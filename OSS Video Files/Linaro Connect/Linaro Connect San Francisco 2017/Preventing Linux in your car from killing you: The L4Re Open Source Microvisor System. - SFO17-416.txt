Title: Preventing Linux in your car from killing you: The L4Re Open Source Microvisor System. - SFO17-416
Publication date: 2017-09-29
Playlist: Linaro Connect San Francisco 2017
Description: 
	Session ID: SFO17-416
Session Name: Preventing Linux in your car from killing you: The L4Re Open Source Microvisor System. - SFO17-416
Speaker: Michael Hohmuth
Track: LITE


★ Session Summary ★
The uptake of Linux in modern cars is on the rise. It is very hard to make
Linux safe enough for safety assessors. Thus far the industry has used a
proprietary layer of safety certifiable system software that in addition to
running mission critical applications also allows running Linux safely in
virtual machines. Can that layer be open source as well ? Without compromising
on safety and security certifiability ? This session presents L4Re - an open
source project that ticks a lot of boxes in order to let Linux be what it's
good at while providing the safety that the Auto world demands.
---------------------------------------------------
★ Resources ★
Event Page: http://connect.linaro.org/resource/sfo17/sfo17-416/
Presentation: https://www.slideshare.net/linaroorg/preventing-linux-in-your-car-from-killing-you-the-l4re-open-source-microvisor-system-sfo17416
Video: https://www.youtube.com/watch?v=NEYO7q-x7b0
 ---------------------------------------------------

★ Event Details ★
Linaro Connect San Francisco 2017 (SFO17)
25-29 September 2017
Hyatt Regency San Francisco Airport

---------------------------------------------------
Keyword: 
'http://www.linaro.org'
'http://connect.linaro.org'
---------------------------------------------------
Follow us on Social Media
https://www.facebook.com/LinaroOrg
https://twitter.com/linaroorg
https://www.youtube.com/user/linaroorg?sub_confirmation=1
https://www.linkedin.com/company/1026961
Captions: 
	00:00:00,120 --> 00:00:04,060
[Music]

00:00:08,910 --> 00:00:12,320
[Music]

00:00:13,830 --> 00:00:19,140
sorry 47 problems

00:00:17,010 --> 00:00:21,360
my name is Michael wood I'm from can

00:00:19,140 --> 00:00:23,310
transaction Germany and I'm going to

00:00:21,360 --> 00:00:24,840
present you they hydrolyze the solution

00:00:23,310 --> 00:00:26,400
that's fit for use in automotive and

00:00:24,840 --> 00:00:30,090
other safety related security related

00:00:26,400 --> 00:00:33,590
domains and I love my talk is preventing

00:00:30,090 --> 00:00:37,560
Linux in the car from killing you and

00:00:33,590 --> 00:00:40,170
it's talking mostly about our for read

00:00:37,560 --> 00:00:42,570
micro hypervisor but also about micro

00:00:40,170 --> 00:00:44,970
criminals in general so what's the sport

00:00:42,570 --> 00:00:47,789
about I'm going to talk a little bit

00:00:44,970 --> 00:01:00,539
about why justice is not sufficient for

00:00:47,789 --> 00:01:02,399
safety applications this year and why

00:01:00,539 --> 00:01:06,900
for rias a microkernel is especially

00:01:02,399 --> 00:01:09,060
cool then what my company can concept

00:01:06,900 --> 00:01:11,580
does regarding security and safety

00:01:09,060 --> 00:01:14,790
education of this small step for

00:01:11,580 --> 00:01:20,340
hypervisor and our certification and

00:01:14,790 --> 00:01:22,440
open schools can nice so what's the

00:01:20,340 --> 00:01:24,930
problem the problem is that software's

00:01:22,440 --> 00:01:29,040
buggy and that complex software has many

00:01:24,930 --> 00:01:30,810
parks so what we see nowadays is stuff

00:01:29,040 --> 00:01:32,940
like that where people break into a

00:01:30,810 --> 00:01:37,140
Chancellor Merkel's phone because you

00:01:32,940 --> 00:01:37,830
know it has sparks or people break it to

00:01:37,140 --> 00:01:39,690
your collar

00:01:37,830 --> 00:01:41,310
because guess I mean over the editing

00:01:39,690 --> 00:01:45,840
phase that allows you to X is critical

00:01:41,310 --> 00:01:49,010
functions in your car or you might have

00:01:45,840 --> 00:01:51,240
someone disruption nuclear program and

00:01:49,010 --> 00:01:54,380
actually is this a nice photo because

00:01:51,240 --> 00:01:59,640
you can see the centrifuges

00:01:54,380 --> 00:02:01,380
failing a real plan about this photo so

00:01:59,640 --> 00:02:05,990
I don't know if you want this happens

00:02:01,380 --> 00:02:08,759
with your country's nuclear program or

00:02:05,990 --> 00:02:12,569
you might have something like robotics

00:02:08,759 --> 00:02:14,760
where you have to follow certain safety

00:02:12,569 --> 00:02:20,069
regulations in order to get through it

00:02:14,760 --> 00:02:24,130
by one step build your stuff or you

00:02:20,069 --> 00:02:28,240
might actually have a car that runs days

00:02:24,130 --> 00:02:29,820
function such as autopilot and maybe it

00:02:28,240 --> 00:02:32,950
doesn't work all that well as possible

00:02:29,820 --> 00:02:33,580
so what do you have to be wanna do what

00:02:32,950 --> 00:02:36,910
can you do

00:02:33,580 --> 00:02:39,610
the solution is that we have to find a

00:02:36,910 --> 00:02:42,760
way to isolate the complexity of our

00:02:39,610 --> 00:02:44,830
applications from the critical path you

00:02:42,760 --> 00:02:46,180
imagine that you have very systems where

00:02:44,830 --> 00:02:48,490
you have an operating system running

00:02:46,180 --> 00:02:50,830
some complex applications such as object

00:02:48,490 --> 00:02:52,270
detection in the car and then you have

00:02:50,830 --> 00:02:54,820
this critical piece of safety related

00:02:52,270 --> 00:02:57,190
functionality there that actually can

00:02:54,820 --> 00:02:59,200
switch the system to a safe statements

00:02:57,190 --> 00:03:01,260
in case something goes wrong what you

00:02:59,200 --> 00:03:05,110
want to do this you don't want this

00:03:01,260 --> 00:03:07,690
critical part here depend on that

00:03:05,110 --> 00:03:09,730
complex application and that regular

00:03:07,690 --> 00:03:11,440
operating system such as Windows you

00:03:09,730 --> 00:03:15,490
want to have isolation you want to move

00:03:11,440 --> 00:03:16,930
this out of the complex system you could

00:03:15,490 --> 00:03:18,700
use extra hardware for that you could

00:03:16,930 --> 00:03:20,620
move that critical safety critical parts

00:03:18,700 --> 00:03:22,750
with some extra hardware but that

00:03:20,620 --> 00:03:24,640
creates a communication problem that you

00:03:22,750 --> 00:03:28,330
have to solve so it's best if you could

00:03:24,640 --> 00:03:30,190
do isolation and complex applications on

00:03:28,330 --> 00:03:33,250
one single platform and in order to

00:03:30,190 --> 00:03:36,070
achieve that you have to have some kind

00:03:33,250 --> 00:03:40,060
of safe and secure gateway between the

00:03:36,070 --> 00:03:43,530
two kinds of components and that's what

00:03:40,060 --> 00:03:46,150
we actually provide with virtualization

00:03:43,530 --> 00:03:50,080
solution in our case for our Eve

00:03:46,150 --> 00:03:51,430
microkernel and so this is just a very

00:03:50,080 --> 00:03:54,030
high level view and height of the

00:03:51,430 --> 00:03:54,030
observation

00:03:55,020 --> 00:03:58,129
[Music]

00:04:06,319 --> 00:04:11,060
so you do that your application and your

00:04:09,620 --> 00:04:14,510
operating system can crash all the way

00:04:11,060 --> 00:04:19,280
at once it won't affect your security or

00:04:14,510 --> 00:04:20,810
safety critical part over here so the

00:04:19,280 --> 00:04:23,660
problem is that these complex

00:04:20,810 --> 00:04:24,350
applications are really really hard to

00:04:23,660 --> 00:04:27,680
get right

00:04:24,350 --> 00:04:30,250
they comprise millions and millions of

00:04:27,680 --> 00:04:34,070
lines of code they are really not and

00:04:30,250 --> 00:04:36,889
there are statistics that say that you

00:04:34,070 --> 00:04:40,340
can expect between 20 to 50 bucks for

00:04:36,889 --> 00:04:44,780
every 10,000 line 1,000 lines of code

00:04:40,340 --> 00:04:47,570
and that means that in such a system you

00:04:44,780 --> 00:04:49,910
can expect hundreds of thousands of

00:04:47,570 --> 00:04:52,729
bucks lurking waiting to be exploited

00:04:49,910 --> 00:04:54,470
waiting to crash your system and what

00:04:52,729 --> 00:04:56,479
you want to have is one have trust

00:04:54,470 --> 00:04:58,910
computing base that's several orders of

00:04:56,479 --> 00:05:01,250
magnitude smaller such as at Murray or

00:04:58,910 --> 00:05:02,750
another microkernel as where we comes

00:05:01,250 --> 00:05:04,520
with a cost computing base that can be

00:05:02,750 --> 00:05:07,520
smaller than thirty five thousand lines

00:05:04,520 --> 00:05:11,840
of code which is as I said at least two

00:05:07,520 --> 00:05:13,909
what is the magnitude smaller so what is

00:05:11,840 --> 00:05:16,370
a microkernel let's start from what you

00:05:13,909 --> 00:05:18,880
already know regular monolithic

00:05:16,370 --> 00:05:22,780
operating systems such as Linux runs

00:05:18,880 --> 00:05:26,960
applications use about you shell your

00:05:22,780 --> 00:05:28,760
system your application and then all the

00:05:26,960 --> 00:05:30,560
operating system stuff is running in the

00:05:28,760 --> 00:05:32,300
kernel and privileged mode on the CPU

00:05:30,560 --> 00:05:34,699
which means that if there's a box

00:05:32,300 --> 00:05:37,240
somewhere in there then potentially your

00:05:34,699 --> 00:05:41,330
system can be exploited or can crash and

00:05:37,240 --> 00:05:43,460
as these operating systems drivers in

00:05:41,330 --> 00:05:45,199
privileged mode and drivers tend to be

00:05:43,460 --> 00:05:47,930
the most crash prone and error-prone

00:05:45,199 --> 00:05:50,120
components of the entire system this

00:05:47,930 --> 00:05:52,039
means that you're pretty vulnerable if

00:05:50,120 --> 00:05:55,639
you're on it in that way so what my

00:05:52,039 --> 00:05:57,830
proposals do is they move the boundary

00:05:55,639 --> 00:06:01,280
we use it for the privileged mode way

00:05:57,830 --> 00:06:04,729
down and run only stuff that really

00:06:01,280 --> 00:06:07,729
needs to run in kernel mode in that mode

00:06:04,729 --> 00:06:11,199
and all the other regular open existing

00:06:07,729 --> 00:06:17,289
components run as user

00:06:11,199 --> 00:06:20,050
Asia that isolated among each other so

00:06:17,289 --> 00:06:24,279
when microkernels we're inventors in the

00:06:20,050 --> 00:06:26,340
80s or maybe even seventies there there

00:06:24,279 --> 00:06:29,770
was a lot of hype around them many

00:06:26,340 --> 00:06:32,319
promises were made such as that they

00:06:29,770 --> 00:06:34,659
provides from isolation and good

00:06:32,319 --> 00:06:36,159
protection of OS components they can

00:06:34,659 --> 00:06:38,620
have a minimal trusted computing base

00:06:36,159 --> 00:06:41,620
you can have small components that can

00:06:38,620 --> 00:06:43,270
be validated in isolation and are much

00:06:41,620 --> 00:06:46,089
smaller and therefore also easier to

00:06:43,270 --> 00:06:48,400
validate you can customize them you can

00:06:46,089 --> 00:06:49,719
put you can use just those operating

00:06:48,400 --> 00:06:55,689
system components that you need in your

00:06:49,719 --> 00:06:57,580
system you can run all operating system

00:06:55,689 --> 00:07:00,550
services as user level processes which

00:06:57,580 --> 00:07:03,580
makes it easier to debug yeah well

00:07:00,550 --> 00:07:06,759
defined interfaces because you have to

00:07:03,580 --> 00:07:08,169
have you have to communicate among the

00:07:06,759 --> 00:07:10,960
operating system components you have to

00:07:08,169 --> 00:07:13,749
think about motorisation and interfaces

00:07:10,960 --> 00:07:15,580
you can have multiple personalities so

00:07:13,749 --> 00:07:17,469
you can run applications for many

00:07:15,580 --> 00:07:19,810
different operating systems on one

00:07:17,469 --> 00:07:23,229
system and they are very flexible and

00:07:19,810 --> 00:07:26,460
extensible because you can load stuff at

00:07:23,229 --> 00:07:28,899
runtime or throw it away at runtime so

00:07:26,460 --> 00:07:32,649
these promises that were made in the

00:07:28,899 --> 00:07:35,139
seventies 80s I think not all of them

00:07:32,649 --> 00:07:37,389
have worked out all that well so for

00:07:35,139 --> 00:07:40,210
example there have been experiments with

00:07:37,389 --> 00:07:43,509
multiple 70s in the 80s such as the idea

00:07:40,210 --> 00:07:46,270
of SOS that has been a huge failures and

00:07:43,509 --> 00:07:48,399
which contributed to the prevalent view

00:07:46,270 --> 00:07:50,409
today but micro kernels are something

00:07:48,399 --> 00:07:53,199
stupid something we don't do anymore

00:07:50,409 --> 00:07:55,029
so and if you look really closely we

00:07:53,199 --> 00:07:56,680
also know that starting from the button

00:07:55,029 --> 00:07:59,409
here that

00:07:56,680 --> 00:08:02,139
littles for example really is flexible

00:07:59,409 --> 00:08:04,149
and extensible and it actually isn't

00:08:02,139 --> 00:08:05,409
what most possibility of as it can run

00:08:04,149 --> 00:08:07,779
applications for many different

00:08:05,409 --> 00:08:09,020
operating systems and actually it's not

00:08:07,779 --> 00:08:11,270
all that bad

00:08:09,020 --> 00:08:14,720
it has spelled I did the faces in the

00:08:11,270 --> 00:08:17,120
room so I would say that at least three

00:08:14,720 --> 00:08:19,699
of those are this luck we're monolithic

00:08:17,120 --> 00:08:21,710
systems have cashed up and that aren't

00:08:19,699 --> 00:08:25,819
ability reasons to choose a microphone

00:08:21,710 --> 00:08:28,580
based system today but I think that the

00:08:25,819 --> 00:08:32,089
other properties actually are good

00:08:28,580 --> 00:08:33,919
reasons today to use microkernels do we

00:08:32,089 --> 00:08:36,169
want to have the isolation properties

00:08:33,919 --> 00:08:37,849
and the BIM across the computing base we

00:08:36,169 --> 00:08:43,240
want to have easily validated small

00:08:37,849 --> 00:08:43,240
components and we want customizable team

00:08:43,810 --> 00:08:51,200
so I am a representative of the family

00:08:48,620 --> 00:08:53,180
of microkernel based systems is just an

00:08:51,200 --> 00:08:54,649
attempt to shed some light on the

00:08:53,180 --> 00:08:56,779
history of at four which has been

00:08:54,649 --> 00:08:59,360
starting in at the end of the 80s

00:08:56,779 --> 00:09:02,380
starting with a system called l3 and

00:08:59,360 --> 00:09:05,899
then there have been many different

00:09:02,380 --> 00:09:09,800
iterations of the api's and the

00:09:05,899 --> 00:09:13,160
implementations of therefore and this

00:09:09,800 --> 00:09:15,500
afternoon you will get a talk from

00:09:13,160 --> 00:09:18,170
catalyzer presenting one of those

00:09:15,500 --> 00:09:19,370
contemporary of forces and said for I am

00:09:18,170 --> 00:09:21,320
talking about a different line of

00:09:19,370 --> 00:09:25,339
development that happens in Germany a

00:09:21,320 --> 00:09:27,350
dresser which yielded our every system

00:09:25,339 --> 00:09:29,470
and which came out of the University

00:09:27,350 --> 00:09:29,470
address

00:09:32,460 --> 00:09:39,420
so we started in 97 with a lot of

00:09:36,000 --> 00:09:41,550
academic research in virtualization in

00:09:39,420 --> 00:09:45,570
real time and then security related

00:09:41,550 --> 00:09:47,430
issues and kept concept is actually

00:09:45,570 --> 00:09:50,670
pretty young as a company we were

00:09:47,430 --> 00:09:52,890
founded in 2012 and we have started the

00:09:50,670 --> 00:09:55,350
company in actually the security

00:09:52,890 --> 00:09:57,649
consulting business so high assurance

00:09:55,350 --> 00:10:00,510
security education first sponsor

00:09:57,649 --> 00:10:05,450
commercially used our version of ps4

00:10:00,510 --> 00:10:08,399
microphone so we've been working with

00:10:05,450 --> 00:10:10,050
certifications and with Education

00:10:08,399 --> 00:10:12,510
approvals by the German certification

00:10:10,050 --> 00:10:16,649
security certification agency ESI and

00:10:12,510 --> 00:10:18,620
that's has been our business so far as a

00:10:16,649 --> 00:10:21,690
next step we are also looking into other

00:10:18,620 --> 00:10:25,080
certification related application areas

00:10:21,690 --> 00:10:28,140
so right now we are detecting automotive

00:10:25,080 --> 00:10:31,560
I'm going to talk more about that before

00:10:28,140 --> 00:10:34,020
and after that we'll also go into the

00:10:31,560 --> 00:10:36,690
industry safety market and there there

00:10:34,020 --> 00:10:38,160
will be the site from our own source

00:10:36,690 --> 00:10:39,600
version that will also be certified

00:10:38,160 --> 00:10:41,760
commercial collisions that you can buy

00:10:39,600 --> 00:10:46,740
together with the required certificates

00:10:41,760 --> 00:10:48,900
for your application area so over the

00:10:46,740 --> 00:10:51,930
years a nice bunch of technologies has

00:10:48,900 --> 00:10:54,650
been developed and new system a very

00:10:51,930 --> 00:10:57,180
high level overview that shows you what

00:10:54,650 --> 00:10:59,190
there's a subscriber looks like much

00:10:57,180 --> 00:11:01,890
like diagram I showed you before we have

00:10:59,190 --> 00:11:04,290
just the micro girl and micro hypervisor

00:11:01,890 --> 00:11:06,810
right in the total space and then we can

00:11:04,290 --> 00:11:11,720
run virtual machines and also native

00:11:06,810 --> 00:11:15,839
micro apps in isolated compartments and

00:11:11,720 --> 00:11:18,500
we support various different guest

00:11:15,839 --> 00:11:20,700
operating systems in bushes machines and

00:11:18,500 --> 00:11:22,529
then we also have something called the

00:11:20,700 --> 00:11:25,010
ëthe we run an environment which

00:11:22,529 --> 00:11:28,640
provides the ability to

00:11:25,010 --> 00:11:31,070
easily develop native applications with

00:11:28,640 --> 00:11:33,740
a very small fast computing base that

00:11:31,070 --> 00:11:36,170
use a subset of POSIX so they're easy to

00:11:33,740 --> 00:11:39,730
develop as well and then you can run for

00:11:36,170 --> 00:11:42,680
example native drivers or security

00:11:39,730 --> 00:11:45,080
critical spot or real time stuff

00:11:42,680 --> 00:11:47,690
directly on top of the hypervisor and

00:11:45,080 --> 00:11:50,000
don't have to trust the legacy a

00:11:47,690 --> 00:11:51,680
monolithic operating systems anymore you

00:11:50,000 --> 00:11:53,750
can still use the employ functionality

00:11:51,680 --> 00:11:56,720
but you don't have to trust them anymore

00:11:53,750 --> 00:12:00,350
that's what we want to achieve so if you

00:11:56,720 --> 00:12:05,150
keywords do we support three different

00:12:00,350 --> 00:12:07,670
architectures x86 on this all in 32 64

00:12:05,150 --> 00:12:09,380
bit modes we support a persistent

00:12:07,670 --> 00:12:10,550
virtualization and para virtualization

00:12:09,380 --> 00:12:13,100
one that nature

00:12:10,550 --> 00:12:17,240
we support both dynamic and static

00:12:13,100 --> 00:12:20,510
setups dynamic I mean that we can start

00:12:17,240 --> 00:12:27,860
instantiate and shutdown components at

00:12:20,510 --> 00:12:29,210
runtime dynamically the will should be

00:12:27,860 --> 00:12:31,340
supported for supporting our virtual

00:12:29,210 --> 00:12:34,340
machines is also actually an approximant

00:12:31,340 --> 00:12:36,650
also more than data we do have a POSIX

00:12:34,340 --> 00:12:38,900
answer for native microbes it's all good

00:12:36,650 --> 00:12:40,760
sources is a pretty major system because

00:12:38,900 --> 00:12:46,250
it's been used and developed over the

00:12:40,760 --> 00:12:48,970
past 20 years so let me talk about some

00:12:46,250 --> 00:12:51,710
of the noteworthy features that fov has

00:12:48,970 --> 00:12:54,590
the first most important one of course

00:12:51,710 --> 00:12:58,400
is the isolation feature I mentioned so

00:12:54,590 --> 00:13:01,190
l4 we participated in the last

00:12:58,400 --> 00:13:04,220
evolutionary step of for micro kernels

00:13:01,190 --> 00:13:06,680
and nowadays is a capability system that

00:13:04,220 --> 00:13:08,870
means that we have capabilities as

00:13:06,680 --> 00:13:11,120
protected kernel objects that are used

00:13:08,870 --> 00:13:14,150
to reference other criminal and userland

00:13:11,120 --> 00:13:15,980
objects and using the abilities we get

00:13:14,150 --> 00:13:17,379
two important features the first bonus

00:13:15,980 --> 00:13:19,689
information hiding

00:13:17,379 --> 00:13:21,819
abilities provide local names for all

00:13:19,689 --> 00:13:23,319
system resources that means that if you

00:13:21,819 --> 00:13:25,239
don't have a capability you can't even

00:13:23,319 --> 00:13:26,949
name a resource that you might want to

00:13:25,239 --> 00:13:29,649
communicate over or that you might want

00:13:26,949 --> 00:13:31,839
to use to read something and they also

00:13:29,649 --> 00:13:34,329
provide access control because again if

00:13:31,839 --> 00:13:37,299
you don't have a capability map to your

00:13:34,329 --> 00:13:39,629
task or virtual machine you can't access

00:13:37,299 --> 00:13:42,159
that particular kernel object

00:13:39,629 --> 00:13:44,559
capabilities are also nice because they

00:13:42,159 --> 00:13:48,309
enable reasoning about isolation and

00:13:44,559 --> 00:13:51,970
freedom of interference so basically you

00:13:48,309 --> 00:13:53,979
can show that if you don't have the

00:13:51,970 --> 00:13:56,199
capability to any shared object with

00:13:53,979 --> 00:13:57,909
another compartment then there's

00:13:56,199 --> 00:13:59,649
actually no way to communicate with that

00:13:57,909 --> 00:14:04,379
other compartment of it or to interfere

00:13:59,649 --> 00:14:07,779
with it every is designed to even allow

00:14:04,379 --> 00:14:09,639
sharing prevention for second thoughts

00:14:07,779 --> 00:14:11,349
objects or objects that don't have

00:14:09,639 --> 00:14:13,299
capabilities that are hidden inside the

00:14:11,349 --> 00:14:16,569
kernel such as elevators for example and

00:14:13,299 --> 00:14:21,339
and also invisible architectural State

00:14:16,569 --> 00:14:23,079
including HSN TV State for example but I

00:14:21,339 --> 00:14:24,699
have to admit that we're not 100% there

00:14:23,079 --> 00:14:26,289
yet it's also not needed for many use

00:14:24,699 --> 00:14:28,959
cases because we have features that

00:14:26,289 --> 00:14:31,479
allow us to isolate my higher levels but

00:14:28,959 --> 00:14:35,549
I just want to mention that we think

00:14:31,479 --> 00:14:35,549
about isolation very very hard 30p

00:14:37,350 --> 00:14:41,529
another way to repair the picture to

00:14:39,519 --> 00:14:43,839
talk about is the real-time capabilities

00:14:41,529 --> 00:14:48,329
and for really is it's a real-time

00:14:43,839 --> 00:14:51,879
system and it provides a real-time

00:14:48,329 --> 00:14:53,470
scheduler for each CPU all of them then

00:14:51,879 --> 00:14:53,990
use fixed priority round robin

00:14:53,470 --> 00:14:58,399
scheduling

00:14:53,990 --> 00:15:01,310
real time right now we are adding fat

00:14:58,399 --> 00:15:03,380
group budget scheduling and we also

00:15:01,310 --> 00:15:06,740
support some kind of non real-time way

00:15:03,380 --> 00:15:08,570
they're doing scheduling mechanism one

00:15:06,740 --> 00:15:12,470
also what was also your birthday about

00:15:08,570 --> 00:15:14,750
every is that these do support read and

00:15:12,470 --> 00:15:16,279
virtual CPU migrations so you might want

00:15:14,750 --> 00:15:18,200
you can implement something like load

00:15:16,279 --> 00:15:20,240
balancing or scheduling and user level

00:15:18,200 --> 00:15:24,800
and schedule stuff around on your

00:15:20,240 --> 00:15:26,450
physical CPUs and for we is built a

00:15:24,800 --> 00:15:29,390
capable because it has only very short

00:15:26,450 --> 00:15:31,970
with sections by virtual of interrupts

00:15:29,390 --> 00:15:33,529
and where we have longer running stuff

00:15:31,970 --> 00:15:36,920
inside the kernel we have we have

00:15:33,529 --> 00:15:41,300
preemption points we have a finally

00:15:36,920 --> 00:15:43,250
granular locking system that allows the

00:15:41,300 --> 00:15:44,660
system to stay on really well and the

00:15:43,250 --> 00:15:46,730
locking is actually weight free even

00:15:44,660 --> 00:15:48,830
across even if you have to grab a lock

00:15:46,730 --> 00:15:51,500
that's helping another CPU there's an

00:15:48,830 --> 00:15:53,420
upper bound of weights time that you

00:15:51,500 --> 00:15:55,459
have to spend in order to get access to

00:15:53,420 --> 00:15:57,200
that shared resource but normally there

00:15:55,459 --> 00:15:59,810
is no stretch resource if you run

00:15:57,200 --> 00:16:02,690
locally on your CPU and avoid doing

00:15:59,810 --> 00:16:05,000
stuff that might affect other I'll be

00:16:02,690 --> 00:16:08,089
finished by the other CPUs then there's

00:16:05,000 --> 00:16:10,339
no shared data anywhere and so that's

00:16:08,089 --> 00:16:11,899
the ultimate performance dependency and

00:16:10,339 --> 00:16:19,250
we don't have any big kernel that would

00:16:11,899 --> 00:16:20,959
prevent us from scale thing I want to

00:16:19,250 --> 00:16:23,510
talk about our Lucas realization

00:16:20,959 --> 00:16:25,250
features every supports opposite

00:16:23,510 --> 00:16:28,220
virtualization involved we are

00:16:25,250 --> 00:16:29,120
architectures simply supported and one

00:16:28,220 --> 00:16:32,300
specific

00:16:29,120 --> 00:16:34,760
nice thing about our system is that even

00:16:32,300 --> 00:16:37,700
the platform emulation support so that

00:16:34,760 --> 00:16:39,829
part of the qmu or whatever you use to

00:16:37,700 --> 00:16:41,529
provide the illusion of a digital

00:16:39,829 --> 00:16:44,520
platform to your guest operating systems

00:16:41,529 --> 00:16:46,380
even that component runs as an actress

00:16:44,520 --> 00:16:48,840
user mode application so that's the

00:16:46,380 --> 00:16:53,430
difference perhaps from Zen where you

00:16:48,840 --> 00:16:55,350
have to trust bomb zero and invited

00:16:53,430 --> 00:16:58,890
inside of zero there's an anti little

00:16:55,350 --> 00:17:01,320
girl running Q mu and Tom zero needs to

00:16:58,890 --> 00:17:03,360
be trusted by all the the other domains

00:17:01,320 --> 00:17:05,640
including the critical ones that's not

00:17:03,360 --> 00:17:07,920
the case in our system so all the VMS

00:17:05,640 --> 00:17:11,100
only have a trust relationship with the

00:17:07,920 --> 00:17:12,900
virtual machine that they serve we

00:17:11,100 --> 00:17:15,600
actually have various different

00:17:12,900 --> 00:17:17,910
visualization solutions so one of the

00:17:15,600 --> 00:17:20,370
BMX that we support is called UB mmm

00:17:17,910 --> 00:17:22,890
it's a tiny DMM that's designed to just

00:17:20,370 --> 00:17:25,589
support NATO's guests and it can be tiny

00:17:22,890 --> 00:17:28,770
because it provides necessary

00:17:25,589 --> 00:17:31,680
api's that allows to run as a as a guest

00:17:28,770 --> 00:17:33,660
so for some that provides good bio

00:17:31,680 --> 00:17:35,420
devices for all the necessary basic

00:17:33,660 --> 00:17:39,030
classes and this is a boot protocol and

00:17:35,420 --> 00:17:42,630
what arm actually the state is really

00:17:39,030 --> 00:17:44,610
cool because we can download and Omni

00:17:42,630 --> 00:17:46,350
looks go from our stream and you

00:17:44,610 --> 00:17:50,520
configure it with whatever device then

00:17:46,350 --> 00:17:52,880
it just runs necessary it's just

00:17:50,520 --> 00:17:55,890
supported out-of-the-box

00:17:52,880 --> 00:17:58,410
now the license to do for another V&M

00:17:55,890 --> 00:18:01,760
that we support is called as Acadian

00:17:58,410 --> 00:18:05,970
that support KVM to Rottnest news emerge

00:18:01,760 --> 00:18:07,320
application which uses a qw with KVM and

00:18:05,970 --> 00:18:09,060
the newest guest to provide the platform

00:18:07,320 --> 00:18:12,570
in the nations we use that to support

00:18:09,060 --> 00:18:14,820
Windows guests another virtualization

00:18:12,570 --> 00:18:16,710
that we support virtualization solutions

00:18:14,820 --> 00:18:19,560
that the support is called alpha Linux

00:18:16,710 --> 00:18:22,770
it's our para virtualization solution so

00:18:19,560 --> 00:18:24,480
he is that L denotes the support of you

00:18:22,770 --> 00:18:29,220
know to manage user mode program on top

00:18:24,480 --> 00:18:31,200
of every and we use that to provide

00:18:29,220 --> 00:18:32,640
Linux virtualization even on platforms

00:18:31,200 --> 00:18:34,800
that do not support our business of

00:18:32,640 --> 00:18:36,860
neutralization and there's also

00:18:34,800 --> 00:18:37,929
surprising number of use cases where

00:18:36,860 --> 00:18:39,940
virtualization

00:18:37,929 --> 00:18:44,919
nice or actually having a user book

00:18:39,940 --> 00:18:46,029
Linux is nice because for example such a

00:18:44,919 --> 00:18:48,100
anoxic owner running an application

00:18:46,029 --> 00:18:50,710
program can serve as a client or a

00:18:48,100 --> 00:18:53,259
server for other natively running

00:18:50,710 --> 00:18:56,139
applications on the system and that use

00:18:53,259 --> 00:18:57,820
cases pretty common because Linux has so

00:18:56,139 --> 00:19:00,460
many device drivers so we often use it

00:18:57,820 --> 00:19:03,669
as a device driver OS right device

00:19:00,460 --> 00:19:09,009
drivers are providing services to native

00:19:03,669 --> 00:19:11,200
applications the fourth thing I want to

00:19:09,009 --> 00:19:12,700
talk about on the native applications to

00:19:11,200 --> 00:19:15,519
the microbes as the cobraman

00:19:12,700 --> 00:19:17,740
so my maps are applications program

00:19:15,519 --> 00:19:20,379
directly towards the microkernel api's

00:19:17,740 --> 00:19:23,649
and that's where you can have people

00:19:20,379 --> 00:19:25,659
deployment critical components that are

00:19:23,649 --> 00:19:28,090
really really small very small trusted

00:19:25,659 --> 00:19:29,889
computing base and have no dependency on

00:19:28,090 --> 00:19:32,409
any rich operating systems such as linux

00:19:29,889 --> 00:19:35,139
for a tome zero running linux or

00:19:32,409 --> 00:19:37,029
anything like that and native

00:19:35,139 --> 00:19:39,100
applications are also nice because they

00:19:37,029 --> 00:19:41,919
come without any initialization overhead

00:19:39,100 --> 00:19:46,950
because just from native as native ring

00:19:41,919 --> 00:19:49,330
well userland application we support a

00:19:46,950 --> 00:19:51,100
programming environment for native

00:19:49,330 --> 00:19:54,610
applications called every runtime

00:19:51,100 --> 00:19:56,710
environment which supports a subset of

00:19:54,610 --> 00:19:58,539
POSIX that you would expect so they

00:19:56,710 --> 00:20:00,340
being inclusion AC library and the

00:19:58,539 --> 00:20:02,379
sequence must I agree actually most of

00:20:00,340 --> 00:20:04,840
our systems implemented in C++ to the

00:20:02,379 --> 00:20:06,789
supports it was really well including

00:20:04,840 --> 00:20:09,509
all the dangerous stuff while in

00:20:06,789 --> 00:20:09,509
exceptional sense

00:20:11,220 --> 00:20:15,789
we have a reference library and many

00:20:14,409 --> 00:20:20,139
other things that you would expect from

00:20:15,789 --> 00:20:21,700
an embedded programming environment the

00:20:20,139 --> 00:20:25,179
authoritative environment actually the

00:20:21,700 --> 00:20:27,369
same a native or natural extension

00:20:25,179 --> 00:20:29,289
Tocqueville API you can't really tell

00:20:27,369 --> 00:20:32,830
difference whether you're talking to an

00:20:29,289 --> 00:20:34,480
every oh one time environment object or

00:20:32,830 --> 00:20:38,129
a clone object the interface is the same

00:20:34,480 --> 00:20:40,669
and you can even have one mask

00:20:38,129 --> 00:20:43,159
another or one

00:20:40,669 --> 00:20:46,609
seeing another which is an Isis I bet on

00:20:43,159 --> 00:20:48,529
that we support and we used you a

00:20:46,609 --> 00:20:50,570
foreign environment for example for

00:20:48,529 --> 00:20:52,580
things like that you normally don't care

00:20:50,570 --> 00:20:54,559
about that navigation Program or such as

00:20:52,580 --> 00:20:57,049
aerospace management mobile e that needs

00:20:54,559 --> 00:21:00,590
to be all done user it's by your

00:20:57,049 --> 00:21:02,090
application itself so every year the

00:21:00,590 --> 00:21:04,340
microkernel provides a mechanism to

00:21:02,090 --> 00:21:09,320
implement paging for example or a shared

00:21:04,340 --> 00:21:11,509
libraries on on your own on userland and

00:21:09,320 --> 00:21:12,710
every takes a way that work from you and

00:21:11,509 --> 00:21:17,840
Trust provides you to the default

00:21:12,710 --> 00:21:20,409
implementation another thing I wanted to

00:21:17,840 --> 00:21:23,649
talk about is my original ization so

00:21:20,409 --> 00:21:28,309
whatever we can do is it can allow

00:21:23,649 --> 00:21:30,200
pass-through device access so that users

00:21:28,309 --> 00:21:34,580
and drivers or virtual machines can

00:21:30,200 --> 00:21:36,679
access devices directly and use the

00:21:34,580 --> 00:21:40,429
drivers inside the virtual machine and

00:21:36,679 --> 00:21:43,190
in order for that to be secure you

00:21:40,429 --> 00:21:46,039
actually have to care about DMA because

00:21:43,190 --> 00:21:47,899
usually today's devices have direct

00:21:46,039 --> 00:21:50,119
memory access they can access the entire

00:21:47,899 --> 00:21:52,909
physical memory and to prevent that you

00:21:50,119 --> 00:21:54,350
need and I open I go mu which which

00:21:52,909 --> 00:21:57,859
allows us the address basis that the

00:21:54,350 --> 00:22:01,359
devices can see and we supports that as

00:21:57,859 --> 00:22:04,220
well we have native drivers and

00:22:01,359 --> 00:22:08,539
multiplexing drivers of various devices

00:22:04,220 --> 00:22:10,580
and buses including vti-s serial hdin

00:22:08,539 --> 00:22:12,259
frame buffers and we also support

00:22:10,580 --> 00:22:13,609
virtual networking among virtual

00:22:12,259 --> 00:22:16,100
machines so you can have your butcher

00:22:13,609 --> 00:22:18,769
Ethernet connection or even virtual

00:22:16,100 --> 00:22:22,279
Ethernet switching among various virtual

00:22:18,769 --> 00:22:24,320
machines we also support something that

00:22:22,279 --> 00:22:26,720
does not have a key overhead but still

00:22:24,320 --> 00:22:28,820
allows into the air networking which

00:22:26,720 --> 00:22:30,739
isn't it for a specific lucious topic of

00:22:28,820 --> 00:22:31,660
communication and all of that is based

00:22:30,739 --> 00:22:33,730
on

00:22:31,660 --> 00:22:36,750
summers so any guests that what's the

00:22:33,730 --> 00:22:41,460
level community looks windows connects

00:22:36,750 --> 00:22:41,460
field well as guests on our system

00:22:44,450 --> 00:22:49,430
as I mentioned every is open-source you

00:22:47,390 --> 00:22:52,490
can download it from our website

00:22:49,430 --> 00:22:55,400
nowadays we publish snapshots of our

00:22:52,490 --> 00:22:57,770
internal development versions and you

00:22:55,400 --> 00:23:00,230
only reuse it and assume we will also

00:22:57,770 --> 00:23:02,210
make available our PD stories for anyone

00:23:00,230 --> 00:23:10,040
who's interested won't give up but

00:23:02,210 --> 00:23:11,840
that's right now still Intel so open

00:23:10,040 --> 00:23:14,540
source means which forward license in

00:23:11,840 --> 00:23:17,900
air for rias mostly licensed under GPL

00:23:14,540 --> 00:23:19,910
version truth but one special thing is

00:23:17,900 --> 00:23:21,670
that we also offer commercial licenses

00:23:19,910 --> 00:23:26,150
we do have to realize it's in capability

00:23:21,670 --> 00:23:28,130
and that's why we require contributors

00:23:26,150 --> 00:23:32,240
license agreements for all contributions

00:23:28,130 --> 00:23:34,100
the reason we do that is that we have to

00:23:32,240 --> 00:23:36,050
be able to commercially licensed our

00:23:34,100 --> 00:23:37,340
system in order to attract the

00:23:36,050 --> 00:23:39,590
investments that we eat for

00:23:37,340 --> 00:23:42,620
certification that's basically part of

00:23:39,590 --> 00:23:44,300
our business model and I'm going to talk

00:23:42,620 --> 00:23:47,570
about more about it a little bit later

00:23:44,300 --> 00:23:50,060
and also having available commercial

00:23:47,570 --> 00:23:52,460
licenses is a requirement for some

00:23:50,060 --> 00:23:55,100
target markets including automotive so

00:23:52,460 --> 00:23:58,280
we know that the OEM get your car

00:23:55,100 --> 00:24:00,770
manufacturers don't like to use open

00:23:58,280 --> 00:24:01,940
source software and they of course it

00:24:00,770 --> 00:24:03,620
would like to use the features but they

00:24:01,940 --> 00:24:05,960
look like the licenses for various

00:24:03,620 --> 00:24:08,120
reasons and that's why it's cool to have

00:24:05,960 --> 00:24:13,610
a commercially available system as well

00:24:08,120 --> 00:24:16,910
even if it's also open source in every

00:24:13,610 --> 00:24:18,140
space our company can consent so as the

00:24:16,910 --> 00:24:20,630
maintainer and gatekeeper for

00:24:18,140 --> 00:24:22,580
contributions and that is also a

00:24:20,630 --> 00:24:23,840
requirement because we have to be care

00:24:22,580 --> 00:24:25,100
about the quality and integrity

00:24:23,840 --> 00:24:29,110
management that is needed for

00:24:25,100 --> 00:24:29,110
certification projects that we do

00:24:31,770 --> 00:24:36,420
okay let me show you some of the use

00:24:33,870 --> 00:24:38,130
cases we are supported today and then

00:24:36,420 --> 00:24:40,920
some of the use cases that we was a

00:24:38,130 --> 00:24:43,950
former future including horticulture so

00:24:40,920 --> 00:24:45,870
today well the picture was yesterday in

00:24:43,950 --> 00:24:48,660
the 90s but it was the first commercial

00:24:45,870 --> 00:24:50,940
application of our it also stood in an

00:24:48,660 --> 00:24:54,780
e-book reader or ironically used for

00:24:50,940 --> 00:24:56,370
digital rights management so that was

00:24:54,780 --> 00:25:00,590
the first thing that paid for some

00:24:56,370 --> 00:25:03,270
coffee in the mist over university lap

00:25:00,590 --> 00:25:05,460
then we actually were participating at

00:25:03,270 --> 00:25:08,070
one of those secure mobile current

00:25:05,460 --> 00:25:10,140
projects and began in Germany so there

00:25:08,070 --> 00:25:12,500
was a project called support that

00:25:10,140 --> 00:25:14,550
provided a virtualized Android

00:25:12,500 --> 00:25:17,190
experience where there were two

00:25:14,550 --> 00:25:19,830
instances of Android running on Watford

00:25:17,190 --> 00:25:21,929
one used to securely begin to the

00:25:19,830 --> 00:25:24,090
government Network and do secret phone

00:25:21,929 --> 00:25:26,370
calls with government proprietary crypto

00:25:24,090 --> 00:25:28,320
and the other one to ban to the hotel

00:25:26,370 --> 00:25:30,870
Wi-Fi browse Facebook and used fitter

00:25:28,320 --> 00:25:32,910
and so on and it was really cool product

00:25:30,870 --> 00:25:35,520
unfortunate was discontinued and let the

00:25:32,910 --> 00:25:41,610
guy who was newscast with but it was a

00:25:35,520 --> 00:25:43,500
really nice fun business kissing isn't

00:25:41,610 --> 00:25:45,660
one of the marketing sites from Deutsche

00:25:43,500 --> 00:25:48,059
Telekom that shows how you were able to

00:25:45,660 --> 00:25:49,650
switch seamlessly between the two with

00:25:48,059 --> 00:25:56,340
virtual instances of Android running on

00:25:49,650 --> 00:25:58,920
the same phone another promotion

00:25:56,340 --> 00:26:01,080
application nowadays that we have is a

00:25:58,920 --> 00:26:03,420
customer called gigawatt they provide a

00:26:01,080 --> 00:26:05,670
very similar application but on the

00:26:03,420 --> 00:26:08,700
laptop running to virtualized instances

00:26:05,670 --> 00:26:10,230
of Windows again one for security BBN

00:26:08,700 --> 00:26:12,480
and to the government at work they

00:26:10,230 --> 00:26:13,610
actually integrated a harbor base video

00:26:12,480 --> 00:26:16,230
and solution

00:26:13,610 --> 00:26:18,450
to run as a microd on top of our

00:26:16,230 --> 00:26:20,070
hypervisor in that system and the other

00:26:18,450 --> 00:26:23,360
words we should have in this instance

00:26:20,070 --> 00:26:26,400
you'd use down to the hotel Wi-Fi

00:26:23,360 --> 00:26:30,240
another use case we support this data

00:26:26,400 --> 00:26:31,860
baiance it'll buy us our appliances that

00:26:30,240 --> 00:26:33,690
you put in front of your network access

00:26:31,860 --> 00:26:36,240
and then make sure that you can browse

00:26:33,690 --> 00:26:41,040
the web but no bit of information that

00:26:36,240 --> 00:26:45,630
leads for your network and so this

00:26:41,040 --> 00:26:51,510
company quinoa they provided a system

00:26:45,630 --> 00:26:53,370
where they have a filter that runs a

00:26:51,510 --> 00:26:54,900
very small trusters micro app that's

00:26:53,370 --> 00:26:56,970
just a few hundred lines of code large

00:26:54,900 --> 00:26:58,680
that implements the filtering mechanism

00:26:56,970 --> 00:27:03,480
that prevents bits from leaking out of

00:26:58,680 --> 00:27:05,340
the internal system and then there's

00:27:03,480 --> 00:27:07,410
another customer input us who builds a

00:27:05,340 --> 00:27:10,520
product called security gateway as the

00:27:07,410 --> 00:27:12,990
security gateway that's used to connect

00:27:10,520 --> 00:27:16,200
government networks that have to protect

00:27:12,990 --> 00:27:20,340
classified data through the internet or

00:27:16,200 --> 00:27:21,930
through less classified networks so they

00:27:20,340 --> 00:27:24,540
always talk about high and low domains

00:27:21,930 --> 00:27:25,920
in red and black and between those two

00:27:24,540 --> 00:27:28,380
different kinds of networks we put this

00:27:25,920 --> 00:27:30,210
application gateway that screens all

00:27:28,380 --> 00:27:32,070
traffic coming out from the internal

00:27:30,210 --> 00:27:35,190
wall or a highly classified Network and

00:27:32,070 --> 00:27:37,740
make sure that only approved stuff

00:27:35,190 --> 00:27:42,060
approve emails approved data can every

00:27:37,740 --> 00:27:44,510
network so they switch to every because

00:27:42,060 --> 00:27:46,500
there was a requirement from the Germans

00:27:44,510 --> 00:27:50,040
certification agency for this kind of

00:27:46,500 --> 00:27:52,160
occasion the BSI that they have to use a

00:27:50,040 --> 00:27:56,940
trusted runtime platform and they

00:27:52,160 --> 00:27:59,070
selected our souvenir so let's look at

00:27:56,940 --> 00:28:01,470
some of the future use cases one of them

00:27:59,070 --> 00:28:03,840
just to show you showcases

00:28:01,470 --> 00:28:05,910
we have a customer who builds home

00:28:03,840 --> 00:28:07,860
appliances because you know your

00:28:05,910 --> 00:28:16,940
provision is what to the Internet is

00:28:07,860 --> 00:28:20,100
well these days I don't know why but and

00:28:16,940 --> 00:28:21,840
but still they so they have they are

00:28:20,100 --> 00:28:23,400
opening an attack surface towards the

00:28:21,840 --> 00:28:27,060
internet but they have to make sure that

00:28:23,400 --> 00:28:29,100
it keeps cooling that it keeps running

00:28:27,060 --> 00:28:32,390
it's critical function and that's why

00:28:29,100 --> 00:28:32,390
they have to have some kind of isolation

00:28:33,500 --> 00:28:38,370
so let's talk about some of the

00:28:35,570 --> 00:28:40,140
certification projects that we do the

00:28:38,370 --> 00:28:43,230
first one is actually not safety-related

00:28:40,140 --> 00:28:46,440
security until it's a perfect world

00:28:43,230 --> 00:28:49,770
started we are planning to do and coming

00:28:46,440 --> 00:28:51,450
credibility of class certification these

00:28:49,770 --> 00:28:54,090
certifications are not really a hard

00:28:51,450 --> 00:28:55,500
requirement for the application

00:28:54,090 --> 00:28:57,750
approvals I talked about earlier from

00:28:55,500 --> 00:28:59,880
the BSI but they do speed things up

00:28:57,750 --> 00:29:01,260
because they provide the same

00:28:59,880 --> 00:29:05,430
information that these are Google's

00:29:01,260 --> 00:29:08,790
required and so to easily improve report

00:29:05,430 --> 00:29:11,460
new applications and make them available

00:29:08,790 --> 00:29:13,470
inside classified networks it's nice to

00:29:11,460 --> 00:29:15,120
have a trusted part of the security

00:29:13,470 --> 00:29:17,760
certified that's what we were not doing

00:29:15,120 --> 00:29:20,580
there before about this business aspect

00:29:17,760 --> 00:29:22,260
of it it's the licensing model all the

00:29:20,580 --> 00:29:25,590
code that we do for that project will

00:29:22,260 --> 00:29:27,480
still be open source but we will keep

00:29:25,590 --> 00:29:29,400
some of the certification documentation

00:29:27,480 --> 00:29:31,110
some of the tests and some of our

00:29:29,400 --> 00:29:33,540
quality assurance tooling that we

00:29:31,110 --> 00:29:36,360
require for certification proprietary

00:29:33,540 --> 00:29:38,250
and this is to protect the investment

00:29:36,360 --> 00:29:39,990
the considerable investment that we and

00:29:38,250 --> 00:29:42,290
our sponsor are investing into this

00:29:39,990 --> 00:29:42,290
project

00:29:42,320 --> 00:29:46,890
yeah this is to be protected and

00:29:44,490 --> 00:29:49,910
therefore there should be something that

00:29:46,890 --> 00:29:53,540
does not allow anyone to redo this

00:29:49,910 --> 00:29:56,180
easily even though the code is open so

00:29:53,540 --> 00:29:58,250
in that particular case our sponsor gets

00:29:56,180 --> 00:30:00,620
the exclusive commercial exploitation

00:29:58,250 --> 00:30:03,980
rights for the government market only

00:30:00,620 --> 00:30:05,120
and concept retains the commercial

00:30:03,980 --> 00:30:07,310
exploitation rights for all other

00:30:05,120 --> 00:30:12,440
markets so that's a typical business

00:30:07,310 --> 00:30:14,210
model that we use for syndication let's

00:30:12,440 --> 00:30:15,560
also talk about automotive which is a

00:30:14,210 --> 00:30:20,540
really hot topic with another company

00:30:15,560 --> 00:30:23,750
right now so we are right now installing

00:30:20,540 --> 00:30:25,790
an ISO 216 school certification process

00:30:23,750 --> 00:30:28,480
to achieve the automotive safety

00:30:25,790 --> 00:30:33,170
integrity level which is the highest one

00:30:28,480 --> 00:30:36,230
and it will certify every as a safety

00:30:33,170 --> 00:30:39,230
element out of context abstracting away

00:30:36,230 --> 00:30:41,140
from the underlying platform just the

00:30:39,230 --> 00:30:43,820
software component will be certified and

00:30:41,140 --> 00:30:46,460
it'll actually is a mat requirement for

00:30:43,820 --> 00:30:48,830
many audience especially for the

00:30:46,460 --> 00:30:52,520
high-volume automotive markets so for

00:30:48,830 --> 00:30:54,980
passenger cars basically the licensing

00:30:52,520 --> 00:30:55,760
motors were Cookson simulant look

00:30:54,980 --> 00:30:57,890
familiar to you

00:30:55,760 --> 00:31:01,220
so all the code will still be developed

00:30:57,890 --> 00:31:02,840
in open source but we will keep

00:31:01,220 --> 00:31:05,780
proprietary some of the syndication

00:31:02,840 --> 00:31:08,180
documentation and tests and quality

00:31:05,780 --> 00:31:11,360
assurance tools and again our sponsor

00:31:08,180 --> 00:31:12,710
and watch them in a second gets

00:31:11,360 --> 00:31:14,510
exclusive commercial

00:31:12,710 --> 00:31:17,750
relicensing rights for the automotive

00:31:14,510 --> 00:31:19,400
market only and we conserve retain the

00:31:17,750 --> 00:31:22,030
commercial exploitation rights for all

00:31:19,400 --> 00:31:22,030
our markets

00:31:23,510 --> 00:31:29,750
so we managed to together to a nice

00:31:26,960 --> 00:31:32,390
partnership with a big Tier one software

00:31:29,750 --> 00:31:33,890
supplier so we have to buy them they

00:31:32,390 --> 00:31:36,680
look revised the investment needed to do

00:31:33,890 --> 00:31:38,420
the certification and I think having

00:31:36,680 --> 00:31:41,780
such an relationship is really important

00:31:38,420 --> 00:31:43,340
because this allows the OEMs insure car

00:31:41,780 --> 00:31:48,320
manufacturers to buy from a trusted

00:31:43,340 --> 00:31:50,870
source the Tier one assumes most of the

00:31:48,320 --> 00:31:52,310
risk that comes with this such area is

00:31:50,870 --> 00:31:55,310
the use of such a water order type of

00:31:52,310 --> 00:31:57,650
Iser it can cover the diability issues

00:31:55,310 --> 00:32:00,290
that come up and can indemnify the oh

00:31:57,650 --> 00:32:03,170
yes so if there's ever a recall it's not

00:32:00,290 --> 00:32:05,930
that can transcend local bus or company

00:32:03,170 --> 00:32:08,000
who the countries send in for these

00:32:05,930 --> 00:32:09,770
kinds of business but they can't and

00:32:08,000 --> 00:32:13,640
that's important to the automotive space

00:32:09,770 --> 00:32:16,280
and also they can provide the close

00:32:13,640 --> 00:32:18,710
source instance that is required in the

00:32:16,280 --> 00:32:22,370
automotive market because the OEMs trust

00:32:18,710 --> 00:32:24,380
close tools more we can talk about later

00:32:22,370 --> 00:32:29,720
on the Q&A to watch about the reasons to

00:32:24,380 --> 00:32:32,080
that so for but still open source will

00:32:29,720 --> 00:32:34,550
benefit from this partnership because

00:32:32,080 --> 00:32:37,310
everyone can basically start their

00:32:34,550 --> 00:32:38,780
research development resource burden

00:32:37,310 --> 00:32:40,550
they can download it from our website

00:32:38,780 --> 00:32:42,800
and if they can also do their own

00:32:40,550 --> 00:32:44,300
certification if they have to but if

00:32:42,800 --> 00:32:45,890
they want to have a quicker path they

00:32:44,300 --> 00:32:48,460
can just buy the certified version from

00:32:45,890 --> 00:32:48,460
our t1

00:32:52,430 --> 00:32:55,800
another certification project we are

00:32:54,480 --> 00:33:00,030
planning to do we haven't started yet

00:32:55,800 --> 00:33:03,930
this industrial safety certification

00:33:00,030 --> 00:33:06,600
according to IEC 51 608 and there we are

00:33:03,930 --> 00:33:08,910
shooting for safety integrity level 3

00:33:06,600 --> 00:33:11,430
which is the second highest integrity

00:33:08,910 --> 00:33:13,650
level you can achieve there and it's

00:33:11,430 --> 00:33:16,260
actually also an odd requirements to

00:33:13,650 --> 00:33:18,690
have certification like that in order to

00:33:16,260 --> 00:33:22,410
allow the use of hypervisors in

00:33:18,690 --> 00:33:24,300
industrial safety contexts the licensing

00:33:22,410 --> 00:33:25,740
model again should look familiar but

00:33:24,300 --> 00:33:27,810
it's not that fixed yet because we don't

00:33:25,740 --> 00:33:29,550
have a sponsor for that project gift we

00:33:27,810 --> 00:33:31,830
will develop the code base in the

00:33:29,550 --> 00:33:34,490
opening scores again with the

00:33:31,830 --> 00:33:36,990
certification documentation proprietary

00:33:34,490 --> 00:33:39,420
but behind the panelists penalize you

00:33:36,990 --> 00:33:41,760
who will be the sponsor and look at

00:33:39,420 --> 00:33:43,530
realizing you do this ourselves

00:33:41,760 --> 00:33:46,970
we believe that the nail town between

00:33:43,530 --> 00:33:49,410
automotive safety certification and

00:33:46,970 --> 00:33:51,150
investigation is about all the people

00:33:49,410 --> 00:33:53,640
even standard ourselves as a small

00:33:51,150 --> 00:33:55,350
company but still we are required at

00:33:53,640 --> 00:33:59,270
we're soliciting requirements right now

00:33:55,350 --> 00:34:01,620
and are looking for partners who help us

00:33:59,270 --> 00:34:03,420
finance built and disappeared central

00:34:01,620 --> 00:34:06,090
production goals ahead we already have

00:34:03,420 --> 00:34:09,080
and a good distribution partner who

00:34:06,090 --> 00:34:09,080
knows all the customers

00:34:10,730 --> 00:34:17,849
okay so I talked about open source that

00:34:13,919 --> 00:34:19,169
we talked a little bit about what we as

00:34:17,849 --> 00:34:21,659
a community we as know it's all

00:34:19,169 --> 00:34:22,319
community could do to invest into the

00:34:21,659 --> 00:34:25,859
system

00:34:22,319 --> 00:34:28,079
despite that concept doing providing

00:34:25,859 --> 00:34:30,899
that gate holder function for the

00:34:28,079 --> 00:34:32,010
certified code base so some things that

00:34:30,899 --> 00:34:35,579
we could work on together

00:34:32,010 --> 00:34:38,299
for example our portability issues the

00:34:35,579 --> 00:34:41,579
community could provide a full support

00:34:38,299 --> 00:34:45,179
for platforms that we don't support

00:34:41,579 --> 00:34:47,309
already we have issues with portability

00:34:45,179 --> 00:34:50,339
issues with regards to power management

00:34:47,309 --> 00:34:52,470
and two o'clock networks on the

00:34:50,339 --> 00:34:55,289
platforms those could be expected away

00:34:52,470 --> 00:34:58,349
and unified and we could support

00:34:55,289 --> 00:35:00,569
upcoming firm interfaces that take away

00:34:58,349 --> 00:35:03,900
some of these daunting tasks from our

00:35:00,569 --> 00:35:06,119
system then the community could also be

00:35:03,900 --> 00:35:07,970
involved in providing a better uses for

00:35:06,119 --> 00:35:11,279
the medical experience power system

00:35:07,970 --> 00:35:13,589
working on the usability as it from a

00:35:11,279 --> 00:35:15,450
developer point of view and working on

00:35:13,589 --> 00:35:19,589
the documentation to get this running

00:35:15,450 --> 00:35:22,170
and also we could we would like to work

00:35:19,589 --> 00:35:24,390
more and secure security hardening but

00:35:22,170 --> 00:35:26,069
it's actually the house hell to work on

00:35:24,390 --> 00:35:28,200
that our customers are happy with the

00:35:26,069 --> 00:35:29,880
level of security we already provide but

00:35:28,200 --> 00:35:31,680
there's always more than could be done

00:35:29,880 --> 00:35:33,390
so we do have into an interest

00:35:31,680 --> 00:35:35,970
introducing four methods setting

00:35:33,390 --> 00:35:38,819
analysis to get to a higher level of

00:35:35,970 --> 00:35:41,640
security and maybe go to safety and to

00:35:38,819 --> 00:35:47,099
provide even better isolation for new

00:35:41,640 --> 00:35:50,460
ethical models that might come up before

00:35:47,099 --> 00:35:52,589
I summarize I'd like to thank you so

00:35:50,460 --> 00:35:54,809
first I'd like to thank the Naro

00:35:52,589 --> 00:35:56,309
for inviting me to this conference and

00:35:54,809 --> 00:35:58,980
given me the opportunity to talk about

00:35:56,309 --> 00:36:00,869
our automotive activities and about our

00:35:58,980 --> 00:36:03,410
hypervisor general presented this to

00:36:00,869 --> 00:36:05,760
your community I'd have to think arm to

00:36:03,410 --> 00:36:09,329
providing many interesting conversations

00:36:05,760 --> 00:36:12,020
and connections and insights into your

00:36:09,329 --> 00:36:14,780
company and especially to Robin for

00:36:12,020 --> 00:36:18,470
this is anyone of that thank you and

00:36:14,780 --> 00:36:21,440
then just a summary so why do I think is

00:36:18,470 --> 00:36:23,540
if we read one of the best solutions for

00:36:21,440 --> 00:36:25,910
providing functional safety no it's all

00:36:23,540 --> 00:36:28,880
space today well first it is actually

00:36:25,910 --> 00:36:34,280
open source which is an important

00:36:28,880 --> 00:36:37,190
differentiator then it is a major high

00:36:34,280 --> 00:36:38,840
quality implementation with reach with

00:36:37,190 --> 00:36:41,260
which feature set I hope I could

00:36:38,840 --> 00:36:44,720
introduce you to some of the outstanding

00:36:41,260 --> 00:36:46,580
features that every supports we provide

00:36:44,720 --> 00:36:49,130
a platform that does not require any

00:36:46,580 --> 00:36:51,860
trusted to a legacy platform such as the

00:36:49,130 --> 00:36:55,070
port or that legacy living large code

00:36:51,860 --> 00:36:56,210
base such as Venus there's no trust

00:36:55,070 --> 00:36:58,640
dependencies that would have to be

00:36:56,210 --> 00:37:02,390
removed first such as it would be the

00:36:58,640 --> 00:37:06,140
case of Zen it has been built from the

00:37:02,390 --> 00:37:10,610
ground as a certifiable safe secure

00:37:06,140 --> 00:37:15,830
solution and there's no need to strip

00:37:10,610 --> 00:37:18,050
away stock one a digital benefit is set

00:37:15,830 --> 00:37:20,300
for every commercial licensing is

00:37:18,050 --> 00:37:23,720
available I try to highlight why that is

00:37:20,300 --> 00:37:26,090
an important factor and also we have

00:37:23,720 --> 00:37:28,490
actually already had partners who can

00:37:26,090 --> 00:37:30,950
take on liability coverage which is also

00:37:28,490 --> 00:37:32,390
very important for automotive and I

00:37:30,950 --> 00:37:34,580
think I showed you some ways of how we

00:37:32,390 --> 00:37:37,490
try to arrive at a solution that has

00:37:34,580 --> 00:37:40,630
both liability coverage and still as

00:37:37,490 --> 00:37:45,560
open source in the full certification

00:37:40,630 --> 00:37:47,540
can consent serves as developer who

00:37:45,560 --> 00:37:49,160
covers quality management and the

00:37:47,540 --> 00:37:51,710
development process requirements needed

00:37:49,160 --> 00:37:53,900
push notification and we think we have

00:37:51,710 --> 00:37:55,420
created a unique business model that

00:37:53,900 --> 00:37:57,770
actually attracts the investment needed

00:37:55,420 --> 00:38:01,859
to do the certifications in the first

00:37:57,770 --> 00:38:04,759
place and with that

00:38:01,859 --> 00:38:04,759
thank you for your attention

00:38:22,510 --> 00:38:26,980
it seems like a lot of what you talked

00:38:25,089 --> 00:38:30,099
about there's a good overlap with what a

00:38:26,980 --> 00:38:33,880
trusted execution environment is on on

00:38:30,099 --> 00:38:35,530
the arm platform you make no mention of

00:38:33,880 --> 00:38:38,589
trust zone so I assume you're not using

00:38:35,530 --> 00:38:40,570
any of that so my first question is just

00:38:38,589 --> 00:38:43,390
can you confirm that that you're doing

00:38:40,570 --> 00:38:46,060
all this without using trust zone and

00:38:43,390 --> 00:38:48,520
the second question is have you looked

00:38:46,060 --> 00:38:51,579
at taking that a step further in looking

00:38:48,520 --> 00:38:53,560
at getting a global platform API support

00:38:51,579 --> 00:38:55,750
so that's something like the traditional

00:38:53,560 --> 00:38:58,930
trusted agent would be able to run on

00:38:55,750 --> 00:39:05,380
this platform good questions thank you

00:38:58,930 --> 00:39:07,720
so first let me take the viewpoint of an

00:39:05,380 --> 00:39:09,280
academic public systems developer and

00:39:07,720 --> 00:39:10,510
tell you that we don't need trust or

00:39:09,280 --> 00:39:11,710
because you don't we have in your

00:39:10,510 --> 00:39:13,570
operating system and if we need to

00:39:11,710 --> 00:39:14,650
isolate something just put into a

00:39:13,570 --> 00:39:17,410
virtual machine and its own address

00:39:14,650 --> 00:39:19,570
space it will be insecure error that

00:39:17,410 --> 00:39:22,660
says we actually do support trust as

00:39:19,570 --> 00:39:24,670
well so every can also run as an

00:39:22,660 --> 00:39:26,589
operating system on the secure side for

00:39:24,670 --> 00:39:29,440
example we do have money toward

00:39:26,589 --> 00:39:31,390
switching them on the sides and we do

00:39:29,440 --> 00:39:36,089
provide interfaces to use faster

00:39:31,390 --> 00:39:36,089
components inside our virtual machines

00:39:36,119 --> 00:39:45,280
additionally the second question we have

00:39:42,310 --> 00:39:47,470
look at that and there's actually a

00:39:45,280 --> 00:39:51,099
project underway to support global

00:39:47,470 --> 00:39:52,750
platform api's as part in cement virtual

00:39:51,099 --> 00:39:54,520
machines basically as part of as a

00:39:52,750 --> 00:39:56,140
compartment it would allow you to

00:39:54,520 --> 00:39:58,270
essentially and many of them become just

00:39:56,140 --> 00:40:00,940
one of them running trust so you can

00:39:58,270 --> 00:40:03,400
have many of them for for example for

00:40:00,940 --> 00:40:05,069
devices that have many tenants and have

00:40:03,400 --> 00:40:06,790
different trust

00:40:05,069 --> 00:40:10,329
requirements and do not necessarily

00:40:06,790 --> 00:40:11,560
trust each other so yes this is an

00:40:10,329 --> 00:40:14,360
interesting topic there is some overlap

00:40:11,560 --> 00:40:16,340
and the way we look at it is

00:40:14,360 --> 00:40:18,820
just gorgeous and temperature this as

00:40:16,340 --> 00:40:18,820
much as possible

00:40:26,770 --> 00:40:31,600
you mentioned you mentioned that you

00:40:28,540 --> 00:40:33,760
have about you EMN or implementation you

00:40:31,600 --> 00:40:35,500
can use didn't get you're right that

00:40:33,760 --> 00:40:37,960
they're running as an application on top

00:40:35,500 --> 00:40:40,180
of the microphone oh yeah but if that is

00:40:37,960 --> 00:40:52,690
the case doesn't mean that basically I

00:40:40,180 --> 00:40:54,730
mean they stopped aging well they do

00:40:52,690 --> 00:40:58,300
provide paging to the guests but always

00:40:54,730 --> 00:41:02,880
a mechanism to do that security so what

00:40:58,300 --> 00:41:05,050
if all supports is something called

00:41:02,880 --> 00:41:09,280
let's say that's paging or something

00:41:05,050 --> 00:41:10,540
like that where you provide a butcher

00:41:09,280 --> 00:41:12,580
machine when it's over the set of

00:41:10,540 --> 00:41:15,550
physical page frames that it connects us

00:41:12,580 --> 00:41:18,700
and it can pass on rights only to those

00:41:15,550 --> 00:41:20,380
physical patrons it already has and can

00:41:18,700 --> 00:41:24,010
put them into it which the Machine award

00:41:20,380 --> 00:41:25,210
went to a task it is serving so that's

00:41:24,010 --> 00:41:27,760
something that is protected by the

00:41:25,210 --> 00:41:33,220
microkernel as a patron thickness bit

00:41:27,760 --> 00:41:35,980
there being - a license

00:41:33,220 --> 00:41:46,980
I mean external contributors or does it

00:41:35,980 --> 00:41:49,540
work and so we do accept contributions

00:41:46,980 --> 00:41:53,950
but we would by our contributors design

00:41:49,540 --> 00:41:55,330
in a license agreement and this license

00:41:53,950 --> 00:41:57,280
agreement basically makes sure that

00:41:55,330 --> 00:42:00,430
everything that contributes will end up

00:41:57,280 --> 00:42:03,269
as if we have included the system but

00:42:00,430 --> 00:42:05,729
can concept also has

00:42:03,269 --> 00:42:08,309
three licensing rights for that code and

00:42:05,729 --> 00:42:10,380
we do occasionally get very large

00:42:08,309 --> 00:42:14,759
contributions so for example the initial

00:42:10,380 --> 00:42:17,729
versions of the ports to bits and to AR

00:42:14,759 --> 00:42:20,309
64 were supported by two external

00:42:17,729 --> 00:42:23,699
entities so imagination supported the

00:42:20,309 --> 00:42:26,189
initiative to support and HP Labs

00:42:23,699 --> 00:42:28,769
provided the initial AR 64 support for

00:42:26,189 --> 00:42:33,299
example so we are quite familiar working

00:42:28,769 --> 00:42:44,279
with large contributors that way the

00:42:33,299 --> 00:42:46,589
question is technical first one is of

00:42:44,279 --> 00:42:52,319
magma magma by God so you put in my

00:42:46,589 --> 00:42:55,289
management actually if there's some

00:42:52,319 --> 00:42:59,640
reason behind that or what to put is

00:42:55,289 --> 00:43:02,279
actually turn out at every performance

00:42:59,640 --> 00:43:05,759
with us first like the seventh one going

00:43:02,279 --> 00:43:09,479
to the circus so ready about one zero

00:43:05,759 --> 00:43:13,139
one customer having you to go through

00:43:09,479 --> 00:43:16,049
the case of automotive so for the second

00:43:13,139 --> 00:43:18,869
or other tier one how that works they

00:43:16,049 --> 00:43:23,249
can we use some Tigers works and how

00:43:18,869 --> 00:43:28,319
much okay that so regarding the first

00:43:23,249 --> 00:43:30,899
question so for historically has always

00:43:28,319 --> 00:43:34,999
supported implementing aging on user

00:43:30,899 --> 00:43:37,520
level and so it was actually I think a

00:43:34,999 --> 00:43:40,820
very successful implement

00:43:37,520 --> 00:43:43,849
experiment in providing an end a DI that

00:43:40,820 --> 00:43:46,040
implements the mechanism for supporting

00:43:43,849 --> 00:43:47,990
Aging in the kernel but using all the

00:43:46,040 --> 00:43:50,440
policy to use event so you can implement

00:43:47,990 --> 00:43:53,780
with whatever kind of meeting you want

00:43:50,440 --> 00:43:57,589
in user net as user application so of

00:43:53,780 --> 00:44:00,380
course be notes p.m. or it will give us

00:43:57,589 --> 00:44:02,990
implement paging by doing swapping up

00:44:00,380 --> 00:44:05,599
whatever little stars right and for we

00:44:02,990 --> 00:44:06,980
the native programming framework if we

00:44:05,599 --> 00:44:11,060
want an environment that is report

00:44:06,980 --> 00:44:13,220
supports paging not for swapping

00:44:11,060 --> 00:44:14,720
computer minute as well actually doesn't

00:44:13,220 --> 00:44:17,180
support that right now but it does

00:44:14,720 --> 00:44:18,680
support libraries appropriate right so

00:44:17,180 --> 00:44:20,330
these mechanisms can be implemented of

00:44:18,680 --> 00:44:22,970
user level that doesn't necessarily mean

00:44:20,330 --> 00:44:25,070
that this is this has bad performance it

00:44:22,970 --> 00:44:27,770
just means that for example page faults

00:44:25,070 --> 00:44:29,660
get reflected to a you select program

00:44:27,770 --> 00:44:32,660
and this user program can then make

00:44:29,660 --> 00:44:35,810
political policy decisions on which page

00:44:32,660 --> 00:44:37,670
for access rights to met to the to the

00:44:35,810 --> 00:44:38,060
task or virtual machine that had a page

00:44:37,670 --> 00:44:42,589
fault

00:44:38,060 --> 00:44:44,720
so benchmarks show that for emphasis is

00:44:42,589 --> 00:44:46,820
virtualization the overhead is really

00:44:44,720 --> 00:44:50,330
very preventable I don't think there's

00:44:46,820 --> 00:44:53,839
any performance gain that could be had

00:44:50,330 --> 00:44:55,869
by moving paging back to your second

00:44:53,839 --> 00:44:55,869
question

00:44:56,290 --> 00:45:05,420
so the second so our Tier one part that

00:45:03,500 --> 00:45:09,500
actually is the software also I think

00:45:05,420 --> 00:45:11,450
Iran and they as Martin they use this

00:45:09,500 --> 00:45:13,220
month but house is having enough from

00:45:11,450 --> 00:45:15,890
the Tijuana that also can sell its

00:45:13,220 --> 00:45:18,790
software to all other tier ones they

00:45:15,890 --> 00:45:20,660
provide some of them most used

00:45:18,790 --> 00:45:24,109
implementations of automotive operating

00:45:20,660 --> 00:45:26,359
systems that's use see around so and all

00:45:24,109 --> 00:45:28,670
tier ones use them already so I don't

00:45:26,359 --> 00:45:32,480
think that will be a trust issue with

00:45:28,670 --> 00:45:35,030
using that software within from within

00:45:32,480 --> 00:45:37,119
another tier one the other tier 1 the

00:45:35,030 --> 00:45:40,299
second tier what could either do so

00:45:37,119 --> 00:45:43,390
themselves starting from scratch or they

00:45:40,299 --> 00:45:49,049
could go to that poke under and

00:45:43,390 --> 00:45:49,049
just paralyzes yes there we live with

00:45:57,920 --> 00:46:11,890
any other questions thanks for just just

00:46:07,490 --> 00:46:14,660
follow me this question is ongoing

00:46:11,890 --> 00:46:16,640
certification so you know you could

00:46:14,660 --> 00:46:19,520
teach certification and then you have

00:46:16,640 --> 00:46:21,020
other contributions in is it just a

00:46:19,520 --> 00:46:23,150
matter of re running some tests and

00:46:21,020 --> 00:46:25,490
everything's all good or is this really

00:46:23,150 --> 00:46:31,760
painful you have to go through you know

00:46:25,490 --> 00:46:34,220
periodic process so what we are gonna do

00:46:31,760 --> 00:46:38,560
is we create these products we will talk

00:46:34,220 --> 00:46:38,560
of a stable version which bill gets

00:46:38,740 --> 00:46:43,880
supported for many years to come

00:46:40,970 --> 00:46:47,570
well as development on our master branch

00:46:43,880 --> 00:46:49,840
will just continue and if we redo the

00:46:47,570 --> 00:46:52,130
certification it will be painful but

00:46:49,840 --> 00:46:54,710
some things that we can do continuously

00:46:52,130 --> 00:46:57,860
in order to ease that pain a little bit

00:46:54,710 --> 00:47:00,740
so for example once we have all the you

00:46:57,860 --> 00:47:03,860
a pro structure in place we can use you

00:47:00,740 --> 00:47:05,780
can make sure that QA applies to newly

00:47:03,860 --> 00:47:10,250
developed features for example as well

00:47:05,780 --> 00:47:11,990
if we have all the processes in place

00:47:10,250 --> 00:47:13,610
for quality management we can use them

00:47:11,990 --> 00:47:15,200
just continuously you also call

00:47:13,610 --> 00:47:18,620
developing about the whole master branch

00:47:15,200 --> 00:47:20,330
to provide the necessary process

00:47:18,620 --> 00:47:23,840
requirements when a recertification

00:47:20,330 --> 00:47:26,480
needs to happen so we plan to do all

00:47:23,840 --> 00:47:29,860
that stuff but I still expect that there

00:47:26,480 --> 00:47:29,860
will be some kind of pain

00:47:35,050 --> 00:47:40,230
so the reason I requested my you come

00:47:38,440 --> 00:47:44,800
over and you are the starter was because

00:47:40,230 --> 00:47:48,700
for those of you who saw my update on

00:47:44,800 --> 00:47:51,360
the click Auto both the observation I

00:47:48,700 --> 00:47:53,730
have is that you know there are lots of

00:47:51,360 --> 00:47:58,860
offerings that have taken place on there

00:47:53,730 --> 00:48:05,100
but when it comes to offerings that are

00:47:58,860 --> 00:48:05,100
open source there's going to be few but

00:48:05,820 --> 00:48:09,760
[Music]

00:48:07,110 --> 00:48:12,100
the kind of certification experience

00:48:09,760 --> 00:48:14,740
requirement so very quickly to the spawn

00:48:12,100 --> 00:48:17,440
only found this one and so I'm not

00:48:14,740 --> 00:48:18,910
tossing anything but as I want to see

00:48:17,440 --> 00:48:21,100
options over there this one looks pretty

00:48:18,910 --> 00:48:24,490
damn good

00:48:21,100 --> 00:48:26,760
did the metro area so this is a bit

00:48:24,490 --> 00:48:29,230
unnerving experience for me as well in

00:48:26,760 --> 00:48:30,910
the problems kind of solving strongest

00:48:29,230 --> 00:48:33,010
endorsement of the operating system

00:48:30,910 --> 00:48:34,030
design there's a factor the three

00:48:33,010 --> 00:48:41,880
biggest improvement or you know

00:48:34,030 --> 00:48:41,880
inspectors American any other questions

00:48:42,390 --> 00:48:51,210
so what happens if you have a certified

00:48:45,250 --> 00:48:51,210
part and then you have security

00:48:53,730 --> 00:49:02,460
so hard officer it's actually is a very

00:48:56,490 --> 00:49:03,660
good question that also yeah that comes

00:49:02,460 --> 00:49:05,670
up all the time basically

00:49:03,660 --> 00:49:08,369
so the certification actually applies

00:49:05,670 --> 00:49:10,140
only to the probe that required a

00:49:08,369 --> 00:49:12,750
security patch right so that's this any

00:49:10,140 --> 00:49:15,330
bad thing but a certification actually

00:49:12,750 --> 00:49:18,900
requires such an a floral or remediation

00:49:15,330 --> 00:49:21,780
process so you have to have the process

00:49:18,900 --> 00:49:24,480
to accept patched about seven security

00:49:21,780 --> 00:49:28,290
reports to actually fix them in some

00:49:24,480 --> 00:49:33,480
finite time space and to provide updates

00:49:28,290 --> 00:49:36,030
and that's also a requirement for the

00:49:33,480 --> 00:49:39,119
Education approvals I talked about so

00:49:36,030 --> 00:49:43,590
they what they do is they technically

00:49:39,119 --> 00:49:46,109
required certification for the base for

00:49:43,590 --> 00:49:49,590
a certain version and then they ended

00:49:46,109 --> 00:49:52,780
with updates so it doesn't break the

00:49:49,590 --> 00:49:52,780
[Music]

00:49:58,560 --> 00:50:08,640
[Music]

00:50:04,830 --> 00:50:11,980
yeah so what we can do I mentioned

00:50:08,640 --> 00:50:14,440
productized is that you can shut down we

00:50:11,980 --> 00:50:16,660
stop applications compartments virtual

00:50:14,440 --> 00:50:24,670
machines on the fly and we have a cool

00:50:16,660 --> 00:50:27,040
demo where where that actually embodies

00:50:24,670 --> 00:50:29,260
a butcher customizing the pasta crudo

00:50:27,040 --> 00:50:31,560
and you have an application on your

00:50:29,260 --> 00:50:33,490
smartphone various detect additional

00:50:31,560 --> 00:50:36,730
education needs to be installed with a

00:50:33,490 --> 00:50:39,040
puto and then you have some cloud

00:50:36,730 --> 00:50:42,450
infrastructure that sends a command to

00:50:39,040 --> 00:50:45,460
the Rooter which which starts

00:50:42,450 --> 00:50:48,000
downloading you which the machines to

00:50:45,460 --> 00:50:51,450
the butcher in accentuate them

00:50:48,000 --> 00:50:51,450
personalized for you

00:50:56,710 --> 00:50:59,849
[Music]

00:51:09,520 --> 00:51:17,719
[Music]

00:51:20,119 --> 00:51:30,539
selphie certain classes or dual income

00:51:24,719 --> 00:51:32,699
to afford we don't have anything readily

00:51:30,539 --> 00:51:34,499
available implemented the best business

00:51:32,699 --> 00:51:36,930
are well they're actually that was one

00:51:34,499 --> 00:51:38,579
of the things says three use what if we

00:51:36,930 --> 00:51:41,069
do well back in the eighties the

00:51:38,579 --> 00:51:42,509
predecessor to award so they had already

00:51:41,069 --> 00:51:46,009
had this kind of stuff where they could

00:51:42,509 --> 00:51:47,189
it was what a persistent system and they

00:51:46,009 --> 00:51:49,349
reinitialized

00:51:47,189 --> 00:51:52,079
device drivers when it came back up from

00:51:49,349 --> 00:51:53,219
a suspended state and they wanted to

00:51:52,079 --> 00:51:56,549
work whether they still work at we

00:51:53,219 --> 00:51:58,199
stopped them all as possible but we

00:51:56,549 --> 00:52:00,180
internally collects appointed by Tom

00:51:58,199 --> 00:52:03,059
okay so if you have the mechanism to

00:52:00,180 --> 00:52:04,799
certify security they had can you

00:52:03,059 --> 00:52:07,289
deliver that security update if it

00:52:04,799 --> 00:52:11,009
actually affects Mike because kind of

00:52:07,289 --> 00:52:14,039
itself over the air there's security so

00:52:11,009 --> 00:52:16,920
that's actually something for our or

00:52:14,039 --> 00:52:20,819
users to solve so what they typically do

00:52:16,920 --> 00:52:22,890
is they have the M running best

00:52:20,819 --> 00:52:25,199
implement updating process and that B

00:52:22,890 --> 00:52:27,719
has access to the good image and can

00:52:25,199 --> 00:52:34,469
receive you updates over the air can

00:52:27,719 --> 00:52:37,380
check them can check the and something

00:52:34,469 --> 00:52:39,920
that we don't care about exceed we do

00:52:37,380 --> 00:52:39,920
care about it

00:52:48,270 --> 00:52:54,030
we are running at times I just spoke

00:52:52,500 --> 00:52:57,810
with you overnight

00:52:54,030 --> 00:52:59,480
I guess Jen the solution for this skill

00:52:57,810 --> 00:53:04,080
good story

00:52:59,480 --> 00:53:05,370
yes that's right yes so it's also

00:53:04,080 --> 00:53:07,790
something but the customer to sort

00:53:05,370 --> 00:53:07,790
actually

00:53:14,570 --> 00:53:19,530

YouTube URL: https://www.youtube.com/watch?v=NEYO7q-x7b0


