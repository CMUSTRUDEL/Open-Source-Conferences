Title: Robert Crovella  Understanding OpenACC v3
Publication date: 2017-08-31
Playlist: OpenPOWER Developer Congress 2017
Description: 
	Bob Crovella, Solutions Architect at NVIDIA, provides an overview of OpenACC programming.

Questions that Bob address include:
What is OpenACC programming?
Is it hard to get started?
When should I use it?

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,520 --> 00:00:07,740
[Music]

00:00:08,020 --> 00:00:14,150
open ACC programming is a directives

00:00:11,600 --> 00:00:17,119
based extension to existing languages

00:00:14,150 --> 00:00:19,880
like C and Fortran and allows you to use

00:00:17,119 --> 00:00:23,330
a directive style of programming to take

00:00:19,880 --> 00:00:25,189
existing C and Fortran codes and make

00:00:23,330 --> 00:00:26,570
them run in a parallel fashion on an

00:00:25,189 --> 00:00:29,419
accelerator like a GPU

00:00:26,570 --> 00:00:31,460
open ACC is distinguished from CUDA

00:00:29,419 --> 00:00:33,079
because it has a lower learning curve

00:00:31,460 --> 00:00:36,110
it's much easier to get started with

00:00:33,079 --> 00:00:37,790
open ACC programming also developers who

00:00:36,110 --> 00:00:39,829
are familiar with open MP or another

00:00:37,790 --> 00:00:41,660
style of directed programming are going

00:00:39,829 --> 00:00:43,940
to find open ACC very familiar and

00:00:41,660 --> 00:00:44,600
finally open ACC has a number of

00:00:43,940 --> 00:00:46,550
advantages

00:00:44,600 --> 00:00:48,920
it's multi-platform which means it can

00:00:46,550 --> 00:00:51,289
run on various kinds of accelerators and

00:00:48,920 --> 00:00:58,489
it can even accelerate codes running on

00:00:51,289 --> 00:01:01,820
the CPU as well it's really easy to get

00:00:58,489 --> 00:01:04,640
started we have an open ACC toolkit that

00:01:01,820 --> 00:01:06,830
uses the PGI tool chain and with that

00:01:04,640 --> 00:01:09,050
toolkit you can get started with open

00:01:06,830 --> 00:01:11,930
ACC in just a few hours of instruction

00:01:09,050 --> 00:01:14,120
and you can be porting your code with

00:01:11,930 --> 00:01:17,470
just a few additions to the code to get

00:01:14,120 --> 00:01:17,470
started with parallel programming

00:01:19,920 --> 00:01:24,360
open ACC programming is good for people

00:01:22,920 --> 00:01:26,190
who would like to experiment with

00:01:24,360 --> 00:01:28,080
parallel programming or GPU programming

00:01:26,190 --> 00:01:30,150
but don't necessarily want to take on

00:01:28,080 --> 00:01:32,220
the learning curve of CUDA it's also

00:01:30,150 --> 00:01:33,960
good for those who have an existing code

00:01:32,220 --> 00:01:35,910
and they would like to get started with

00:01:33,960 --> 00:01:38,580
parallelization of that code without

00:01:35,910 --> 00:01:41,250
having to rewrite large portions of the

00:01:38,580 --> 00:01:43,050
code open ECC allows you to sort of

00:01:41,250 --> 00:01:45,509
surgically or tactically go into your

00:01:43,050 --> 00:01:47,369
code and put directives in places where

00:01:45,509 --> 00:01:49,140
you think parallelism could be exposed

00:01:47,369 --> 00:01:51,330
and you could take advantage of it and

00:01:49,140 --> 00:01:53,430
in a very very simple fashion you can

00:01:51,330 --> 00:01:55,140
use these directives to accelerate so

00:01:53,430 --> 00:01:56,490
for people who are porting existing

00:01:55,140 --> 00:01:57,930
codes and would like to get started

00:01:56,490 --> 00:01:59,759
would like to put their toe in the water

00:01:57,930 --> 00:02:01,540
and see how things are working

00:01:59,759 --> 00:02:11,210
open ACC is a great choice

00:02:01,540 --> 00:02:11,210

YouTube URL: https://www.youtube.com/watch?v=HxOsP9vsV9E


