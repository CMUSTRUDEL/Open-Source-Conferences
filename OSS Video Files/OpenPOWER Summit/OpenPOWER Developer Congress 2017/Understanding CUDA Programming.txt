Title: Understanding CUDA Programming
Publication date: 2017-08-31
Playlist: OpenPOWER Developer Congress 2017
Description: 
	Bob Crovella, Solutions Architect at NVIDIA answers questions including:

What is CUDA programming?
Is it hard to get started?
When should I use it?

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,520 --> 00:00:07,740
[Music]

00:00:08,099 --> 00:00:13,450
CUDA programming has been around since

00:00:10,660 --> 00:00:15,520
the day one of nvidia gpus for

00:00:13,450 --> 00:00:18,640
computation it is our unified

00:00:15,520 --> 00:00:21,189
architecture for delivering computation

00:00:18,640 --> 00:00:23,410
on a GPU platform and CUDA programming

00:00:21,189 --> 00:00:25,449
therefore is basically the lowest level

00:00:23,410 --> 00:00:28,180
of programming that you can do on a GPU

00:00:25,449 --> 00:00:30,960
for general-purpose computation CUDA

00:00:28,180 --> 00:00:34,000
extends common languages like C C++

00:00:30,960 --> 00:00:36,070
Fortran and other languages using very

00:00:34,000 --> 00:00:38,379
basic additions to the language which

00:00:36,070 --> 00:00:40,030
are easily understandable to someone

00:00:38,379 --> 00:00:41,530
who's proficient in that language so

00:00:40,030 --> 00:00:48,100
that they can take advantage of the GPU

00:00:41,530 --> 00:00:50,139
architecture it's actually pretty easy

00:00:48,100 --> 00:00:53,469
to get started all the tools that you

00:00:50,139 --> 00:00:56,409
need can be downloaded for free and as I

00:00:53,469 --> 00:00:59,280
mentioned CUDA is essentially an

00:00:56,409 --> 00:01:02,069
extension to common languages like C C++

00:00:59,280 --> 00:01:04,299
Fortran Python and other languages and

00:01:02,069 --> 00:01:06,909
therefore if you know how to program in

00:01:04,299 --> 00:01:08,740
C or C++ for example you're well on your

00:01:06,909 --> 00:01:11,200
way to learning how to use CUDA C and

00:01:08,740 --> 00:01:13,270
C++ the extensions that you need to

00:01:11,200 --> 00:01:16,030
learn our very basic extensions that we

00:01:13,270 --> 00:01:17,980
you would use for a threaded model of

00:01:16,030 --> 00:01:21,370
parallelism and so it's actually pretty

00:01:17,980 --> 00:01:23,800
easy to get started I'm here at the open

00:01:21,370 --> 00:01:25,570
power developer Congress and I will be

00:01:23,800 --> 00:01:26,980
teaching people pretty much everything

00:01:25,570 --> 00:01:31,350
that they need to know about CUDA

00:01:26,980 --> 00:01:31,350
programming to get started in one day

00:01:33,880 --> 00:01:38,480
CUDA programming as I mentioned is the

00:01:36,680 --> 00:01:40,670
lowest form of programming basically

00:01:38,480 --> 00:01:43,610
it's an extension to low-level languages

00:01:40,670 --> 00:01:44,960
like C and C++ and Fortran and so it

00:01:43,610 --> 00:01:46,940
would be used when you're looking for

00:01:44,960 --> 00:01:49,280
the most flexibility or the most

00:01:46,940 --> 00:01:51,800
performance that you can get out of the

00:01:49,280 --> 00:01:53,630
GPU however there are plenty of other

00:01:51,800 --> 00:01:55,310
programming techniques to talk about and

00:01:53,630 --> 00:01:57,080
you might want to consider some of those

00:01:55,310 --> 00:01:59,390
other techniques if you're interested in

00:01:57,080 --> 00:02:00,650
a lower learning curve or taking

00:01:59,390 --> 00:02:03,700
advantage of a particular technology

00:02:00,650 --> 00:02:03,700
like deep learning

00:02:03,850 --> 00:02:11,619
[Music]

00:02:09,560 --> 00:02:11,619

YouTube URL: https://www.youtube.com/watch?v=4fOhRgvAutw


