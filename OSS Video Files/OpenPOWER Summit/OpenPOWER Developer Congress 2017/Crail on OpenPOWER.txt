Title: Crail on OpenPOWER
Publication date: 2017-07-14
Playlist: OpenPOWER Developer Congress 2017
Description: 
	Peter Hofstee, Distinguished Research Staff Member, IBM  Research Laboratory, USA, and  professor in Big Data Systems at Delft University of Technology, Netherlands introduces Crail.io and explains the value of running it on OpenPOWER. 

Questions that Peter address include:
What is CRAIL?
How can CRAIL be used?
What is the infrastructure requirement to run CRAIL?
When is it beneficial to run CRAIL?
What applications would benefit from running CRAIL?
How can you get access to CRAIL?

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,520 --> 00:00:09,540
[Music]

00:00:04,310 --> 00:00:14,639
Crale is a set of API that allow you to

00:00:09,540 --> 00:00:17,220
use high-performance IO networking and

00:00:14,639 --> 00:00:20,039
storage you know with a variety of

00:00:17,220 --> 00:00:22,529
applications and you know my particular

00:00:20,039 --> 00:00:29,599
interest is in using trail with turnin

00:00:22,529 --> 00:00:31,710
spark and you know going through

00:00:29,599 --> 00:00:34,790
serialization deserialization layers

00:00:31,710 --> 00:00:38,129
file system you know block level drivers

00:00:34,790 --> 00:00:40,649
translation layers and the deeper layers

00:00:38,129 --> 00:00:43,890
in the stack and and basically what gail

00:00:40,649 --> 00:00:46,620
trail provides you is much more direct

00:00:43,890 --> 00:00:51,110
access all the way from the user level

00:00:46,620 --> 00:00:51,110
into these underlying technology

00:00:53,710 --> 00:01:00,620
so so Creole will run on just about

00:00:57,649 --> 00:01:03,970
anything but you will see the biggest

00:01:00,620 --> 00:01:07,280
benefits are betrayal if you're using

00:01:03,970 --> 00:01:10,400
underlying technologies like nvme or

00:01:07,280 --> 00:01:13,490
nvme over fabrics or in the case of

00:01:10,400 --> 00:01:16,310
networked things like our DMA based

00:01:13,490 --> 00:01:18,409
drivers that you know give you also the

00:01:16,310 --> 00:01:26,479
efficient the maximum efficiency at the

00:01:18,409 --> 00:01:29,539
at the hardware level we've used Crale

00:01:26,479 --> 00:01:33,590
in a number of of applications so the

00:01:29,539 --> 00:01:36,770
first one is it's terasort and so in

00:01:33,590 --> 00:01:40,009
another video I talked about you know

00:01:36,770 --> 00:01:42,200
how temps and in China use the open

00:01:40,009 --> 00:01:44,210
power systems to get a really good

00:01:42,200 --> 00:01:47,509
result and they're sort and they they

00:01:44,210 --> 00:01:51,380
leverage to be the il capabilities that

00:01:47,509 --> 00:01:54,920
that I just talked about but if you want

00:01:51,380 --> 00:01:57,229
to do this kind of a thing on Kota is

00:01:54,920 --> 00:01:59,180
much more easily accessible and you may

00:01:57,229 --> 00:02:02,540
want to do a terrace or that spark and

00:01:59,180 --> 00:02:04,729
in fact the winner of terrace or two two

00:02:02,540 --> 00:02:09,019
years before we did it was a was a spark

00:02:04,729 --> 00:02:11,510
based and an application and you know

00:02:09,019 --> 00:02:14,239
they're exactly if you if you take your

00:02:11,510 --> 00:02:17,420
spark old and you say okay I'm going to

00:02:14,239 --> 00:02:18,920
get an order of magnitude performance

00:02:17,420 --> 00:02:20,420
gain by going to these new i/o

00:02:18,920 --> 00:02:24,140
technologies you find that you really

00:02:20,420 --> 00:02:27,650
don't but you know our zurich research

00:02:24,140 --> 00:02:30,110
lab with the creo technology developed

00:02:27,650 --> 00:02:32,870
there you know has shown that they can

00:02:30,110 --> 00:02:34,670
get you know and pretty close to an

00:02:32,870 --> 00:02:37,910
order of magnitude performance

00:02:34,670 --> 00:02:40,329
improvement by combining spark with

00:02:37,910 --> 00:02:43,850
trail and then what they do is they

00:02:40,329 --> 00:02:46,100
replace the the fastest in the local

00:02:43,850 --> 00:02:49,250
file system and the shuttle engine with

00:02:46,100 --> 00:02:52,130
the trail components and dramatically

00:02:49,250 --> 00:02:53,100
increase the performance of the terasort

00:02:52,130 --> 00:02:56,440
application

00:02:53,100 --> 00:02:59,130
another application that can benefit

00:02:56,440 --> 00:03:02,530
from this is is for example genomics

00:02:59,130 --> 00:03:05,880
there's a number of steps in a genomics

00:03:02,530 --> 00:03:08,380
gene sequencing pipeline and that are

00:03:05,880 --> 00:03:13,000
you know requires sorting and organizing

00:03:08,380 --> 00:03:17,050
of the data again you know very network

00:03:13,000 --> 00:03:19,690
intensive in that case also genomics

00:03:17,050 --> 00:03:21,670
deals with an enormous amount of data

00:03:19,690 --> 00:03:23,560
and both for the the input data set

00:03:21,670 --> 00:03:25,570
which is typically in the hundreds of

00:03:23,560 --> 00:03:29,170
gigabytes and and the intermediate data

00:03:25,570 --> 00:03:32,530
sets as well and there are two diverging

00:03:29,170 --> 00:03:35,250
trails and can give you good application

00:03:32,530 --> 00:03:35,250
level benefit

00:03:37,890 --> 00:03:46,830
yeah so kreyÃ²l is an open source project

00:03:41,010 --> 00:03:51,390
so you can find it at WWll

00:03:46,830 --> 00:03:57,030
and also on on don't get out under crl

00:03:51,390 --> 00:04:01,120
io / trail and you know so it's there

00:03:57,030 --> 00:04:10,279
for everybody to to pick up

00:04:01,120 --> 00:04:10,279

YouTube URL: https://www.youtube.com/watch?v=f-pgMaEmqn4


