Title: OpenPOWER Summit Europe 2018: Beyond Training - Next Steps of Machine Learning (pt 1)
Publication date: 2019-02-07
Playlist: OpenPOWER Summit Europe 2018
Description: 
	Chris Parsons, IBM, speaks at OpenPOWER Summit Europe 2018.

For more information, please visit: https://openpowerfoundation.org/summit-2018-10-eu/
Captions: 
	00:00:00,210 --> 00:00:07,259
so I am Chris Parsons I work for dawns

00:00:05,879 --> 00:00:08,550
on me that I've used a smaller font than

00:00:07,259 --> 00:00:11,190
I could if I'd known the size of the

00:00:08,550 --> 00:00:14,639
screen I'd made the most of it anyway so

00:00:11,190 --> 00:00:17,250
I'm Chris Parsons I'm a developer

00:00:14,639 --> 00:00:18,869
advocate for IBM my role basically is to

00:00:17,250 --> 00:00:20,630
go out and work with our customers and

00:00:18,869 --> 00:00:23,550
our partners that are trying to use

00:00:20,630 --> 00:00:26,189
power systems and power AI to get the

00:00:23,550 --> 00:00:27,779
most out of their AI workloads so a lot

00:00:26,189 --> 00:00:29,130
of my role involves standing up and

00:00:27,779 --> 00:00:30,449
doing things like this and talking to

00:00:29,130 --> 00:00:32,820
you guys about artificial intelligence

00:00:30,449 --> 00:00:34,590
machine learning and then also kind of

00:00:32,820 --> 00:00:35,969
you know rod in my sleeves up and and

00:00:34,590 --> 00:00:37,530
getting my hands dirty and actually

00:00:35,969 --> 00:00:44,550
writing some code and doing some code

00:00:37,530 --> 00:00:46,320
samples so this session if again this is

00:00:44,550 --> 00:00:48,360
Google by the way doesn't work anyway so

00:00:46,320 --> 00:00:50,940
what is this talk so this talk split

00:00:48,360 --> 00:00:53,250
into two parts with a 15-minute break in

00:00:50,940 --> 00:00:56,610
the middle the first part is going to be

00:00:53,250 --> 00:00:58,289
an introduction to machine learning talk

00:00:56,610 --> 00:00:59,940
about designing and building

00:00:58,289 --> 00:01:03,210
infrastructure for this workload

00:00:59,940 --> 00:01:05,909
specifically what is power AI and why is

00:01:03,210 --> 00:01:10,049
it differentiated and then go through a

00:01:05,909 --> 00:01:12,479
few use cases actual customer use cases

00:01:10,049 --> 00:01:14,070
and then also places where you guys can

00:01:12,479 --> 00:01:15,810
go out and start to find opportunities

00:01:14,070 --> 00:01:18,360
to do this within your own organizations

00:01:15,810 --> 00:01:20,100
within the community based on my

00:01:18,360 --> 00:01:22,619
experience and what I'm seeing and

00:01:20,100 --> 00:01:24,210
before I go on I'd quite like to profile

00:01:22,619 --> 00:01:28,500
the room is anybody in the room data

00:01:24,210 --> 00:01:31,320
scientist okay maybe a half hand okay

00:01:28,500 --> 00:01:31,950
anybody the rumored developer cool

00:01:31,320 --> 00:01:34,740
better

00:01:31,950 --> 00:01:36,150
you guys are my people right so what I'm

00:01:34,740 --> 00:01:38,460
going to do and I know that this is a

00:01:36,150 --> 00:01:40,439
bit brave for the the technology

00:01:38,460 --> 00:01:41,729
industry but I'm going to go through a

00:01:40,439 --> 00:01:44,610
worked example of what machine learning

00:01:41,729 --> 00:01:46,950
is and how that differs from the kind of

00:01:44,610 --> 00:01:48,600
traditional programming paradigm right

00:01:46,950 --> 00:01:50,310
that we're all familiar with if you have

00:01:48,600 --> 00:01:51,990
never coded anything and are not the

00:01:50,310 --> 00:01:54,390
data scientists do not worry by the end

00:01:51,990 --> 00:01:57,540
of it you'll be an expert in both so

00:01:54,390 --> 00:02:00,240
let's start with what is machine

00:01:57,540 --> 00:02:02,430
learning and how does machine learning

00:02:00,240 --> 00:02:04,110
differ from programming now programmers

00:02:02,430 --> 00:02:05,490
in the room you will know that the first

00:02:04,110 --> 00:02:07,170
thing you typically write in any

00:02:05,490 --> 00:02:09,720
programming language is hello world

00:02:07,170 --> 00:02:12,180
right fundamentally your challenge is to

00:02:09,720 --> 00:02:13,590
make it say the string hello world on

00:02:12,180 --> 00:02:14,940
the screen

00:02:13,590 --> 00:02:16,319
that's pretty much all they teach you at

00:02:14,940 --> 00:02:17,640
University and then they release you

00:02:16,319 --> 00:02:20,519
into the wild and they expect you to be

00:02:17,640 --> 00:02:23,099
able to go and build applications and

00:02:20,519 --> 00:02:24,599
hello world is is great right it's a

00:02:23,099 --> 00:02:25,830
simple challenge you see the result

00:02:24,599 --> 00:02:28,200
quickly and then you can build it out

00:02:25,830 --> 00:02:30,420
and expand on those core concepts the

00:02:28,200 --> 00:02:32,910
problem is in the machine learning space

00:02:30,420 --> 00:02:35,129
helloworld doesn't work right if I tell

00:02:32,910 --> 00:02:39,269
the computer what to say back to me it's

00:02:35,129 --> 00:02:42,930
not learn anything right it's not AI

00:02:39,269 --> 00:02:44,970
it's my intelligence so so how do you

00:02:42,930 --> 00:02:47,819
translate that gap then what is the

00:02:44,970 --> 00:02:49,650
hello world for machine learning what is

00:02:47,819 --> 00:02:51,360
the like a simple problem that we can

00:02:49,650 --> 00:02:54,090
all use to get our heads around what is

00:02:51,360 --> 00:02:56,970
going on here with this technology there

00:02:54,090 --> 00:02:58,950
is this data set this data set is called

00:02:56,970 --> 00:03:00,120
amnesty or a few laughs in the room for

00:02:58,950 --> 00:03:04,650
people that are very familiar with

00:03:00,120 --> 00:03:06,660
endless endless is 65,000 handwritten

00:03:04,650 --> 00:03:09,329
single digit numbers now they're all

00:03:06,660 --> 00:03:10,980
grayscale they're all 28 by 28 pixels

00:03:09,329 --> 00:03:13,319
and they're all appropriately labeled

00:03:10,980 --> 00:03:16,079
right what do I mean by label well I

00:03:13,319 --> 00:03:18,690
mean all of the numbers of one are in a

00:03:16,079 --> 00:03:21,060
folder that is called one right it's

00:03:18,690 --> 00:03:23,489
that complicated so you've got this data

00:03:21,060 --> 00:03:25,380
set so 65,000 of these numbers and

00:03:23,489 --> 00:03:26,639
they're all there for you and and

00:03:25,380 --> 00:03:28,769
they're all kind of handwritten like

00:03:26,639 --> 00:03:31,319
this is an example of four of them and

00:03:28,769 --> 00:03:32,970
as programmers if I said to you right

00:03:31,319 --> 00:03:34,650
your challenge is to build me an

00:03:32,970 --> 00:03:37,410
application that recognizes the number

00:03:34,650 --> 00:03:40,109
one and all number ones will look like

00:03:37,410 --> 00:03:41,310
that one right that's really simple you

00:03:40,109 --> 00:03:42,540
can do that really quickly right that's

00:03:41,310 --> 00:03:44,040
not a complicated problem in fact you

00:03:42,540 --> 00:03:46,739
could probably do that in the next sort

00:03:44,040 --> 00:03:49,290
of 50 minutes of this talk but the

00:03:46,739 --> 00:03:52,200
problem is not all number ones do look

00:03:49,290 --> 00:03:55,139
like that right there's a huge variation

00:03:52,200 --> 00:03:56,280
in the way we draw number ones that

00:03:55,139 --> 00:03:57,840
there's a huge variation in the way

00:03:56,280 --> 00:03:59,250
computers draw number ones right think

00:03:57,840 --> 00:04:01,709
about the number of different fonts on a

00:03:59,250 --> 00:04:03,690
computer so even typed number ones don't

00:04:01,709 --> 00:04:06,569
necessarily look like that stereotypical

00:04:03,690 --> 00:04:08,730
number right and I know if you had

00:04:06,569 --> 00:04:09,930
infinite developers in infinite time you

00:04:08,730 --> 00:04:12,630
could build a system that could

00:04:09,930 --> 00:04:15,780
recognize every potential number one but

00:04:12,630 --> 00:04:17,940
a lot of the people that I talk to don't

00:04:15,780 --> 00:04:19,950
have infinite developers or infinite

00:04:17,940 --> 00:04:21,479
time but they've still got this same

00:04:19,950 --> 00:04:23,099
problem they've still got this problem

00:04:21,479 --> 00:04:24,930
they want herself and it doesn't matter

00:04:23,099 --> 00:04:27,300
whether or not we're trying to recognize

00:04:24,930 --> 00:04:27,580
handwritten number ones or whether we

00:04:27,300 --> 00:04:29,560
try

00:04:27,580 --> 00:04:31,930
to recognize what breed of dog something

00:04:29,560 --> 00:04:34,479
is or what type of car it is or whether

00:04:31,930 --> 00:04:36,970
this is a pedestrian or a lamppost the

00:04:34,479 --> 00:04:38,710
fundamental principle is the same thing

00:04:36,970 --> 00:04:41,590
all right what we're going to do is

00:04:38,710 --> 00:04:43,479
expose our system to all of the number

00:04:41,590 --> 00:04:45,370
ones there's about 8,000 of them and all

00:04:43,479 --> 00:04:48,610
of the other numbers to the zero the two

00:04:45,370 --> 00:04:50,259
or three all of those numbers and ask it

00:04:48,610 --> 00:04:52,960
to tell us what patterns there are in

00:04:50,259 --> 00:04:55,509
the data right what fundamentally makes

00:04:52,960 --> 00:04:56,949
something and number one and we're going

00:04:55,509 --> 00:04:58,240
to get the system to do that on its own

00:04:56,949 --> 00:05:00,580
we're going to get the system to learn

00:04:58,240 --> 00:05:02,650
how to do that on its own so let's go a

00:05:00,580 --> 00:05:04,360
bit deeper then so this Explorer one of

00:05:02,650 --> 00:05:05,949
these number ones right and hopefully

00:05:04,360 --> 00:05:08,469
this won't come as a spoiler to anyone

00:05:05,949 --> 00:05:10,539
in the room but computers can't see at

00:05:08,469 --> 00:05:13,990
all so the computer does not perceive

00:05:10,539 --> 00:05:16,150
that number one as as we do it sees it

00:05:13,990 --> 00:05:18,370
as this right so this is the pixel

00:05:16,150 --> 00:05:20,469
values and it's not quite a one-to-one

00:05:18,370 --> 00:05:22,569
relationship but over here we've got

00:05:20,469 --> 00:05:24,849
zero representing our white space all

00:05:22,569 --> 00:05:27,069
the way up to one which is our deepest

00:05:24,849 --> 00:05:29,560
black right what can I do is say look at

00:05:27,069 --> 00:05:32,529
all 8,000 of those that I have already

00:05:29,560 --> 00:05:34,360
told you are number one right and tell

00:05:32,529 --> 00:05:36,759
me what patterns there are tell me what

00:05:34,360 --> 00:05:38,620
number ones have in common what makes

00:05:36,759 --> 00:05:40,930
something a number one right and then

00:05:38,620 --> 00:05:43,750
repeat that for the two three four five

00:05:40,930 --> 00:05:45,190
six number and that's why it's the same

00:05:43,750 --> 00:05:46,150
paradigm for whatever we're trying to

00:05:45,190 --> 00:05:48,969
solve whether or not we're trying to

00:05:46,150 --> 00:05:50,529
detect credit card fraud or classify

00:05:48,969 --> 00:05:52,060
different types of - and it's the same

00:05:50,529 --> 00:05:53,710
fundamental principle what we're going

00:05:52,060 --> 00:05:56,440
to do is look at everything I told you

00:05:53,710 --> 00:05:58,569
was a dashing was a number one and tell

00:05:56,440 --> 00:06:02,289
me what it had in common and how the

00:05:58,569 --> 00:06:03,430
computer does that is this no I'm not

00:06:02,289 --> 00:06:04,620
going to go into the mass here and the

00:06:03,430 --> 00:06:07,120
lines aren't showing up which is

00:06:04,620 --> 00:06:09,969
vexatious but what we've got over here

00:06:07,120 --> 00:06:11,020
is these x-values these are our input

00:06:09,969 --> 00:06:13,330
sorry camera go I'm going to move back

00:06:11,020 --> 00:06:15,940
over there in a second over here these

00:06:13,330 --> 00:06:17,830
are our input pixels right then in the

00:06:15,940 --> 00:06:20,979
middle we've got a matrix multiplication

00:06:17,830 --> 00:06:23,500
so we multiply each of those input

00:06:20,979 --> 00:06:25,719
pixels by these weights and the reason

00:06:23,500 --> 00:06:27,879
we do that is that a lets us I assign

00:06:25,719 --> 00:06:29,469
different priority to different pixels

00:06:27,879 --> 00:06:31,599
in the image right so think about a

00:06:29,469 --> 00:06:34,150
number one and a zero for instance the

00:06:31,599 --> 00:06:36,639
pixel that is dead center of that number

00:06:34,150 --> 00:06:38,199
one is really significant right because

00:06:36,639 --> 00:06:40,240
it's probably the middle of my number

00:06:38,199 --> 00:06:41,230
one but the pixel that is dead center of

00:06:40,240 --> 00:06:42,850
a zero

00:06:41,230 --> 00:06:44,230
I don't care about it doesn't tell me

00:06:42,850 --> 00:06:46,930
anything it's just going to be white

00:06:44,230 --> 00:06:49,270
right um so I did this massive matrix

00:06:46,930 --> 00:06:51,040
multiplication then I had a biased value

00:06:49,270 --> 00:06:52,720
to it just for fun do a linear

00:06:51,040 --> 00:06:55,510
regression and at the other side what I

00:06:52,720 --> 00:06:57,280
get is my output pixel values right what

00:06:55,510 --> 00:07:00,540
the computer determined that output

00:06:57,280 --> 00:07:02,740
pixel value would be now this is a

00:07:00,540 --> 00:07:06,130
significant thing right so we've got

00:07:02,740 --> 00:07:09,670
here the the green bubbles are a matrix

00:07:06,130 --> 00:07:13,300
multiplication Nvidia realized several

00:07:09,670 --> 00:07:16,360
years ago that they'd been designing and

00:07:13,300 --> 00:07:18,820
architecting GPUs to do exactly this

00:07:16,360 --> 00:07:20,770
workload not for machine learning right

00:07:18,820 --> 00:07:22,630
for doing computer graphics and if you

00:07:20,770 --> 00:07:24,670
think about computer graphics it is a

00:07:22,630 --> 00:07:27,190
matrix multiplication problem right this

00:07:24,670 --> 00:07:28,360
this screen here is a matrix of pixels

00:07:27,190 --> 00:07:30,850
right so it's something they've been

00:07:28,360 --> 00:07:33,070
doing for a while was building GPUs to

00:07:30,850 --> 00:07:35,560
do matrix multiplication and they said

00:07:33,070 --> 00:07:37,690
okay let's move into this base and start

00:07:35,560 --> 00:07:39,160
to design GPUs specifically for

00:07:37,690 --> 00:07:41,200
artificial intelligence that start to

00:07:39,160 --> 00:07:44,350
design an architect GPUs specifically

00:07:41,200 --> 00:07:47,170
for AI and they did and then they ran

00:07:44,350 --> 00:07:50,050
into a problem and that problem was PCIe

00:07:47,170 --> 00:07:51,640
right and what they realized was it

00:07:50,050 --> 00:07:55,570
didn't matter how quick they made their

00:07:51,640 --> 00:07:57,340
GPUs eventually data sets were going to

00:07:55,570 --> 00:07:58,630
get too big to fit on one GPU and they

00:07:57,340 --> 00:08:00,760
were going to need to talk to each other

00:07:58,630 --> 00:08:02,770
right and when they talk to each other

00:08:00,760 --> 00:08:04,960
they have to talk over PCIe which is the

00:08:02,770 --> 00:08:08,140
standard interconnect or certainly was a

00:08:04,960 --> 00:08:09,850
few years ago and that hurt their

00:08:08,140 --> 00:08:11,770
performance because suddenly you had

00:08:09,850 --> 00:08:13,750
these really quick GPUs talking to each

00:08:11,770 --> 00:08:15,820
other fairly slowly over some slow

00:08:13,750 --> 00:08:17,740
electronics so they came up with their

00:08:15,820 --> 00:08:20,140
own technology they came up with this

00:08:17,740 --> 00:08:22,930
technology called envy link cunningly

00:08:20,140 --> 00:08:24,820
named which lets you link to NVIDIA GPUs

00:08:22,930 --> 00:08:26,500
together now it's a physical wire you

00:08:24,820 --> 00:08:27,760
can physically plug them in and then

00:08:26,500 --> 00:08:29,860
they talk to each other over this much

00:08:27,760 --> 00:08:31,090
quicker wire and everything happens more

00:08:29,860 --> 00:08:33,220
quickly right so when you're doing

00:08:31,090 --> 00:08:35,410
machine learning problems you get a huge

00:08:33,220 --> 00:08:37,840
speed up but then they ran into another

00:08:35,410 --> 00:08:39,849
problem and that problem was that if

00:08:37,840 --> 00:08:41,470
they did that if they used NV link there

00:08:39,849 --> 00:08:43,960
was still a bottleneck right because the

00:08:41,470 --> 00:08:46,630
CPU the processor that moves the data to

00:08:43,960 --> 00:08:48,850
the GPUs so the CPU that's responsible

00:08:46,630 --> 00:08:54,010
for moving my number one over to the

00:08:48,850 --> 00:08:55,000
GPUs right still talks over PCIe so

00:08:54,010 --> 00:08:56,920
doesn't matter how quickly

00:08:55,000 --> 00:08:59,260
bezel talk to each other my bottleneck

00:08:56,920 --> 00:09:01,990
is one stage further out and this is

00:08:59,260 --> 00:09:04,770
where the open power foundation came in

00:09:01,990 --> 00:09:08,020
right and and the open source power

00:09:04,770 --> 00:09:11,110
processor so what it enabled us to do

00:09:08,020 --> 00:09:14,620
was this so as you can see on this chart

00:09:11,110 --> 00:09:16,630
we've got these envy link lanes so one

00:09:14,620 --> 00:09:18,580
might have a pointer yes look so we've

00:09:16,630 --> 00:09:20,380
got these envy link lanes here that

00:09:18,580 --> 00:09:22,630
connect the GPUs together now that's

00:09:20,380 --> 00:09:25,120
available anywhere Nvidia have their

00:09:22,630 --> 00:09:27,070
GPUs what's unique to Power Systems

00:09:25,120 --> 00:09:28,930
through the open innovation at the open

00:09:27,070 --> 00:09:31,330
power foundation is we've got this power

00:09:28,930 --> 00:09:35,770
nine CPU here our latest processor and

00:09:31,330 --> 00:09:37,690
then the envy link to the GPUs right so

00:09:35,770 --> 00:09:39,970
we've alleviated that bottleneck so we

00:09:37,690 --> 00:09:43,120
literally can get the data to the GPUs

00:09:39,970 --> 00:09:46,120
at ten times the bandwidth right so when

00:09:43,120 --> 00:09:48,580
you've got a GPU problem like machine

00:09:46,120 --> 00:09:50,740
learning like matrix multiplication this

00:09:48,580 --> 00:09:53,080
architecture you can get your photo of a

00:09:50,740 --> 00:09:55,660
number one from main memory across the

00:09:53,080 --> 00:09:57,970
CPU and into the GPU at a much higher

00:09:55,660 --> 00:10:00,130
rate and we've intentionally tried to

00:09:57,970 --> 00:10:02,500
marry these up you'll notice is 117 this

00:10:00,130 --> 00:10:05,350
is 150 we try to make those as close

00:10:02,500 --> 00:10:06,910
together as we possibly could just so

00:10:05,350 --> 00:10:08,260
that we didn't you know introduce

00:10:06,910 --> 00:10:09,220
another bottleneck somewhere else right

00:10:08,260 --> 00:10:11,380
because this point is having this

00:10:09,220 --> 00:10:13,990
communicated at 300 Giga second if this

00:10:11,380 --> 00:10:16,540
is only at 170 right so we tried to make

00:10:13,990 --> 00:10:18,670
those we try to introduce parity there

00:10:16,540 --> 00:10:20,500
where possible so we've designed this

00:10:18,670 --> 00:10:22,330
architecture from the ground up and and

00:10:20,500 --> 00:10:24,490
this is kind of what power I is and and

00:10:22,330 --> 00:10:25,690
I'll come onto that a bit later on but

00:10:24,490 --> 00:10:27,730
we're designing this architecture from

00:10:25,690 --> 00:10:30,820
the ground up for these machine learning

00:10:27,730 --> 00:10:31,830
workloads to get the data to the GPU as

00:10:30,820 --> 00:10:35,170
quickly as possible

00:10:31,830 --> 00:10:37,360
now back to my machine learning hello

00:10:35,170 --> 00:10:39,060
world this is what I get on the other

00:10:37,360 --> 00:10:41,470
side does that show up maybe it doesn't

00:10:39,060 --> 00:10:43,810
so this is what I get out the other side

00:10:41,470 --> 00:10:45,400
of my machine learning right once it's

00:10:43,810 --> 00:10:47,530
done the machine learning I appreciates

00:10:45,400 --> 00:10:48,460
a bit difficult to see I apologize but

00:10:47,530 --> 00:10:50,440
what we've got here

00:10:48,460 --> 00:10:52,180
concretely is a graphing of the weights

00:10:50,440 --> 00:10:53,320
from two charts ago those green bubbles

00:10:52,180 --> 00:10:55,420
if you plot them on a graph looks a bit

00:10:53,320 --> 00:10:57,370
like this and this is what the computer

00:10:55,420 --> 00:10:59,140
is looking for when it sees this number

00:10:57,370 --> 00:11:01,270
then what I think's interesting here is

00:10:59,140 --> 00:11:03,670
if you look at the 0 up there I think

00:11:01,270 --> 00:11:04,959
yeah okay the blue bit there kind of

00:11:03,670 --> 00:11:06,280
looks like a zero

00:11:04,959 --> 00:11:08,830
fair enough machine learning you've done

00:11:06,280 --> 00:11:10,060
a good job and the one that looks

00:11:08,830 --> 00:11:11,590
pretty much like a wine if someone drew

00:11:10,060 --> 00:11:13,300
that on a piece of paper I'd say yeah

00:11:11,590 --> 00:11:14,470
okay I'm looking at a number one but

00:11:13,300 --> 00:11:16,870
what I think is really interesting about

00:11:14,470 --> 00:11:18,820
this chart is if you look over here at

00:11:16,870 --> 00:11:22,000
the four that doesn't anything like a

00:11:18,820 --> 00:11:23,200
four and five I'd say absolutely not

00:11:22,000 --> 00:11:24,880
I've never seen a five that looks

00:11:23,200 --> 00:11:27,310
anything like that and that's because

00:11:24,880 --> 00:11:28,990
the computer is not trying to draw the

00:11:27,310 --> 00:11:31,300
ideal number four or the ideal number

00:11:28,990 --> 00:11:33,910
five what the computer is saying is

00:11:31,300 --> 00:11:36,130
everything you showed me and told me was

00:11:33,910 --> 00:11:38,800
a number four had this in common right

00:11:36,130 --> 00:11:39,730
it had these regions in common so all

00:11:38,800 --> 00:11:41,680
it's doing is looking for those

00:11:39,730 --> 00:11:43,810
commonalities in the data and that's

00:11:41,680 --> 00:11:45,820
what select that's what lets you tackle

00:11:43,810 --> 00:11:47,590
those hugely complex problems without

00:11:45,820 --> 00:11:49,510
spending millions of man-hours on it

00:11:47,590 --> 00:11:50,950
right millions of man I was trawling

00:11:49,510 --> 00:11:52,720
through images drawling through credit

00:11:50,950 --> 00:11:54,340
card transaction data because the

00:11:52,720 --> 00:11:56,170
machine can look at that data and

00:11:54,340 --> 00:11:57,970
intrinsically spot those patterns in it

00:11:56,170 --> 00:11:59,590
and then you can use that so when a new

00:11:57,970 --> 00:12:01,330
number one or a new number two comes

00:11:59,590 --> 00:12:03,610
along you can say okay which does it

00:12:01,330 --> 00:12:05,050
look the most like which of these does

00:12:03,610 --> 00:12:06,910
it look the most like and use that to

00:12:05,050 --> 00:12:08,770
make intelligent decisions and classify

00:12:06,910 --> 00:12:12,490
those images so machine learning really

00:12:08,770 --> 00:12:14,380
is a paradigm shift in the way that we

00:12:12,490 --> 00:12:16,450
can use computing to solve these really

00:12:14,380 --> 00:12:18,130
complex problems and that's why I think

00:12:16,450 --> 00:12:19,750
in the industry in general people are

00:12:18,130 --> 00:12:21,460
adopting it really widely because it

00:12:19,750 --> 00:12:22,990
lets them solve the problem they either

00:12:21,460 --> 00:12:26,170
couldn't before or would have been too

00:12:22,990 --> 00:12:28,630
complicated to self-serve alleys what is

00:12:26,170 --> 00:12:30,820
machine learning with a slight segue

00:12:28,630 --> 00:12:33,220
into open power

00:12:30,820 --> 00:12:35,350
what is power AI so we didn't stop there

00:12:33,220 --> 00:12:38,080
we didn't just stop at the hardware

00:12:35,350 --> 00:12:40,150
design we went one tier higher up as

00:12:38,080 --> 00:12:42,670
well and we built this so we went out

00:12:40,150 --> 00:12:44,200
there to the community to developers to

00:12:42,670 --> 00:12:46,570
data scientists and we said right what

00:12:44,200 --> 00:12:49,000
tools are you guys using when you go and

00:12:46,570 --> 00:12:51,310
build AI right what do you code your

00:12:49,000 --> 00:12:53,620
applications in what frameworks are you

00:12:51,310 --> 00:12:55,750
using when you build these AR these AR

00:12:53,620 --> 00:12:59,070
systems and they came back to us with

00:12:55,750 --> 00:13:01,450
the likes of tensorflow and cafe and

00:12:59,070 --> 00:13:03,850
caris and pi talked all of these

00:13:01,450 --> 00:13:05,380
open-source tools this is what the

00:13:03,850 --> 00:13:09,310
developers and data scientists wanted to

00:13:05,380 --> 00:13:11,580
use and we said ok we he so we took

00:13:09,310 --> 00:13:13,990
these frameworks in house and we

00:13:11,580 --> 00:13:16,180
optimized them to take advantage of the

00:13:13,990 --> 00:13:18,340
power hardware to take advantage of the

00:13:16,180 --> 00:13:20,440
power systems architecture that I showed

00:13:18,340 --> 00:13:22,270
you a couple of slides ago and then we

00:13:20,440 --> 00:13:24,070
made them all available for free so

00:13:22,270 --> 00:13:25,209
all of this good stuff all of the tool

00:13:24,070 --> 00:13:26,680
chain that developers and data

00:13:25,209 --> 00:13:29,740
scientists are currently using is

00:13:26,680 --> 00:13:32,529
available all packaged up ready to run

00:13:29,740 --> 00:13:33,850
on power systems so this is kind of the

00:13:32,529 --> 00:13:35,380
direction we're heading in so we're

00:13:33,850 --> 00:13:37,029
designing the architecture specifically

00:13:35,380 --> 00:13:38,680
for AI and then bringing those

00:13:37,029 --> 00:13:40,420
frameworks bringing that tool train

00:13:38,680 --> 00:13:42,550
along so that it runs on top of this

00:13:40,420 --> 00:13:45,399
platform so it's all about enabling that

00:13:42,550 --> 00:13:46,720
innovation and making it as accessible

00:13:45,399 --> 00:13:48,760
as possible to get the most out of this

00:13:46,720 --> 00:13:49,690
architecture and by the way there'll be

00:13:48,760 --> 00:13:51,399
a lot of people that think yeah well

00:13:49,690 --> 00:13:54,100
what's the value in this if I only want

00:13:51,399 --> 00:13:55,510
one of them um if you ever try going

00:13:54,100 --> 00:13:57,880
through the process of installing one of

00:13:55,510 --> 00:13:59,200
these particularly from source like a

00:13:57,880 --> 00:14:00,820
lot of data scientists have to do in the

00:13:59,200 --> 00:14:03,370
wild you'll know that it really sucks

00:14:00,820 --> 00:14:04,779
right it's not fun trying to install one

00:14:03,370 --> 00:14:06,040
of these and all of the dependencies

00:14:04,779 --> 00:14:08,080
that come with it because they rely on

00:14:06,040 --> 00:14:09,850
so many different mathematical libraries

00:14:08,080 --> 00:14:11,050
under the covers which is why it's

00:14:09,850 --> 00:14:12,640
really useful to have them all come

00:14:11,050 --> 00:14:15,459
along at once with all of their

00:14:12,640 --> 00:14:17,410
dependencies in one package and so

00:14:15,459 --> 00:14:20,170
that's power AI but we've also done some

00:14:17,410 --> 00:14:21,820
cool other tricks like this so there's a

00:14:20,170 --> 00:14:25,630
photo of a server in the middle of this

00:14:21,820 --> 00:14:26,529
chart and this is their this is a value

00:14:25,630 --> 00:14:28,300
add that we've created called

00:14:26,529 --> 00:14:29,890
distributed deep learning so we noticed

00:14:28,300 --> 00:14:32,890
that there was a problem right and this

00:14:29,890 --> 00:14:36,070
problem arises as you try and scale your

00:14:32,890 --> 00:14:37,930
workload so here we have one server and

00:14:36,070 --> 00:14:39,730
you'll have to use your imagination here

00:14:37,930 --> 00:14:42,339
right need you to imagine that I have

00:14:39,730 --> 00:14:43,870
more than seven photos those photos are

00:14:42,339 --> 00:14:45,190
slightly larger than the little dashes

00:14:43,870 --> 00:14:47,709
that are going to appear on this slide

00:14:45,190 --> 00:14:49,720
right but imagine this so we are doing

00:14:47,709 --> 00:14:50,829
machine learning and we need to build a

00:14:49,720 --> 00:14:53,680
classifier that will classify different

00:14:50,829 --> 00:14:56,770
types of dog our process is as follows

00:14:53,680 --> 00:14:59,890
we take our photo ever - and our CPU and

00:14:56,770 --> 00:15:01,690
we copy it over to the GPU and that's

00:14:59,890 --> 00:15:03,670
where the floating-point maths happens

00:15:01,690 --> 00:15:05,320
and it decides what the weights should

00:15:03,670 --> 00:15:07,089
be it does the machine learning about

00:15:05,320 --> 00:15:09,339
that - and then sends the result back to

00:15:07,089 --> 00:15:11,920
the CPU and then requests the next image

00:15:09,339 --> 00:15:15,490
now as you can see through my animations

00:15:11,920 --> 00:15:17,620
that took a long time right and we're a

00:15:15,490 --> 00:15:20,279
clever organization and what we think is

00:15:17,620 --> 00:15:22,480
haha I'm going to buy two servers

00:15:20,279 --> 00:15:25,270
brilliant everything will speed up the

00:15:22,480 --> 00:15:26,770
problem is it doesn't right the problem

00:15:25,270 --> 00:15:29,230
is it doesn't speed up and the reason it

00:15:26,770 --> 00:15:31,540
doesn't is suddenly my problems got a

00:15:29,230 --> 00:15:35,470
lot more complex I still have the seven

00:15:31,540 --> 00:15:36,250
photos of dashan's I still have the same

00:15:35,470 --> 00:15:38,950
net

00:15:36,250 --> 00:15:40,570
I'm still using the same tooling but now

00:15:38,950 --> 00:15:42,250
I've got to deal with the fact that I've

00:15:40,570 --> 00:15:44,160
got to make communication out over my

00:15:42,250 --> 00:15:46,750
physical network right over that

00:15:44,160 --> 00:15:49,660
infrastructure and then I've got to get

00:15:46,750 --> 00:15:52,480
the data into another server right and

00:15:49,660 --> 00:15:53,980
things can in theory at this point slow

00:15:52,480 --> 00:15:56,230
down because everything gets more

00:15:53,980 --> 00:15:57,580
complicated the problem space gets more

00:15:56,230 --> 00:16:00,430
complicated when I introduce more

00:15:57,580 --> 00:16:03,130
servers so we realized that and wanted

00:16:00,430 --> 00:16:05,350
to create a solution to this problem

00:16:03,130 --> 00:16:06,550
so we created a library called

00:16:05,350 --> 00:16:08,980
distributed deep learning which is

00:16:06,550 --> 00:16:11,140
available today that fundamentally

00:16:08,980 --> 00:16:12,790
overcomes this problem and it overcomes

00:16:11,140 --> 00:16:14,800
this problem by running your workload in

00:16:12,790 --> 00:16:17,740
the ideal configuration right so it

00:16:14,800 --> 00:16:19,660
knows what network topology you've got

00:16:17,740 --> 00:16:21,490
it knows what systems you've got it

00:16:19,660 --> 00:16:23,740
knows how many GPUs there are in those

00:16:21,490 --> 00:16:25,210
systems what memory you've got how many

00:16:23,740 --> 00:16:27,130
calls there are in those systems and

00:16:25,210 --> 00:16:29,730
then it determines when you hit run on

00:16:27,130 --> 00:16:32,680
your job how many notes the scale it to

00:16:29,730 --> 00:16:34,150
whether that should run on one GPU in

00:16:32,680 --> 00:16:35,560
one node because it's really small or

00:16:34,150 --> 00:16:38,530
whether it needs to scale to those

00:16:35,560 --> 00:16:40,450
hundreds of nodes so distributed deep

00:16:38,530 --> 00:16:42,790
learning helps you scale your workload

00:16:40,450 --> 00:16:45,400
and to prove that I've animated the dogs

00:16:42,790 --> 00:16:47,440
moves slightly faster in this chart so

00:16:45,400 --> 00:16:49,540
there we go that is conclusive proof the

00:16:47,440 --> 00:16:50,350
distributed deep learning works some

00:16:49,540 --> 00:16:51,670
people are looking at me a bit

00:16:50,350 --> 00:16:54,220
skeptically fair enough

00:16:51,670 --> 00:16:56,410
so on the next chart hopefully yes here

00:16:54,220 --> 00:16:58,270
we go so this is actually distributed

00:16:56,410 --> 00:17:00,010
deep learning these are the actual

00:16:58,270 --> 00:17:02,170
numbers behind my slightly faster moving

00:17:00,010 --> 00:17:03,930
dashan's so what we've been able to

00:17:02,170 --> 00:17:08,410
demonstrate here now this is the same

00:17:03,930 --> 00:17:10,210
workload but on two different sized

00:17:08,410 --> 00:17:12,550
architectures so on the one side we've

00:17:10,210 --> 00:17:15,550
got one system running our workload took

00:17:12,550 --> 00:17:17,560
sixteen days right sixteen days is a

00:17:15,550 --> 00:17:19,240
long time to wait for anything certainly

00:17:17,560 --> 00:17:20,530
for your machine learning job to finish

00:17:19,240 --> 00:17:22,840
I wouldn't want to sit there and check

00:17:20,530 --> 00:17:24,700
if it finishes and then on the other

00:17:22,840 --> 00:17:27,220
side because we've been able to scale

00:17:24,700 --> 00:17:30,100
pretty much linearly using distributed

00:17:27,220 --> 00:17:32,020
deep learning we're able to do that same

00:17:30,100 --> 00:17:34,450
workload in seven hours so you're able

00:17:32,020 --> 00:17:35,680
to get to those results faster you're

00:17:34,450 --> 00:17:37,420
able to get to those insights more

00:17:35,680 --> 00:17:39,880
quickly and again all of this takes

00:17:37,420 --> 00:17:41,770
advantage of things like the env link

00:17:39,880 --> 00:17:44,950
connection between our CPU and our GPU

00:17:41,770 --> 00:17:46,840
our ability to do io and to scale these

00:17:44,950 --> 00:17:50,020
workloads so distributed deep learning

00:17:46,840 --> 00:17:52,360
really can make a difference there now

00:17:50,020 --> 00:17:54,309
we didn't just solve the distribution

00:17:52,360 --> 00:17:57,760
problem we solved another problem too

00:17:54,309 --> 00:18:01,510
and this is my single photo won't fit on

00:17:57,760 --> 00:18:03,880
my GPU right so this is large motor

00:18:01,510 --> 00:18:05,710
support so this is where a single bit of

00:18:03,880 --> 00:18:06,070
data a single image or something like

00:18:05,710 --> 00:18:08,980
that

00:18:06,070 --> 00:18:10,960
doesn't fit on GPU memory it's too big

00:18:08,980 --> 00:18:13,990
for that problem space right so think

00:18:10,960 --> 00:18:16,390
you know large satellite images other

00:18:13,990 --> 00:18:18,669
kind of medical images particularly that

00:18:16,390 --> 00:18:21,159
are bigger than the 16 gigabytes I could

00:18:18,669 --> 00:18:22,750
potentially get on a GPU right now what

00:18:21,159 --> 00:18:26,230
I do in a traditional environment here

00:18:22,750 --> 00:18:28,330
is a copy over 16 gigabytes of the image

00:18:26,230 --> 00:18:29,710
and then do the computation on that get

00:18:28,330 --> 00:18:31,899
the result back and then send over the

00:18:29,710 --> 00:18:34,330
next 16 or I might try to drop the

00:18:31,899 --> 00:18:36,250
resolution right the thing is with a

00:18:34,330 --> 00:18:38,710
large model support what we're able to

00:18:36,250 --> 00:18:39,880
do is and there's a talk on this later

00:18:38,710 --> 00:18:42,789
on by the way which I encourage you to

00:18:39,880 --> 00:18:44,529
get to by lot because of our NV link

00:18:42,789 --> 00:18:45,789
between the CPU and the GPU because of

00:18:44,529 --> 00:18:49,000
that architecture designed for this

00:18:45,789 --> 00:18:51,159
workload what we can do is copy the data

00:18:49,000 --> 00:18:53,169
over to the GPU much more readily right

00:18:51,159 --> 00:18:54,940
so we can copy it over in smaller chunks

00:18:53,169 --> 00:18:56,950
and that enables us to solve some

00:18:54,940 --> 00:19:00,820
problems that you simply can't do on

00:18:56,950 --> 00:19:03,130
other architectures like this so this

00:19:00,820 --> 00:19:05,580
over here on the top left of this chart

00:19:03,130 --> 00:19:08,799
is a scanning electron microscope of

00:19:05,580 --> 00:19:10,270
breast cancer tissue and the sites that

00:19:08,799 --> 00:19:12,159
we are looking for the sites are

00:19:10,270 --> 00:19:13,720
clinician are looking for are these ones

00:19:12,159 --> 00:19:15,399
that are surrounded by green boxes right

00:19:13,720 --> 00:19:17,320
so they're they're pretty small even in

00:19:15,399 --> 00:19:20,200
this image now over here for reference

00:19:17,320 --> 00:19:24,100
I've put the standard input file sizes

00:19:20,200 --> 00:19:26,169
for tents flower and cafe and they're

00:19:24,100 --> 00:19:28,179
expecting images that for a certain

00:19:26,169 --> 00:19:30,039
model that are a thousand by a thousand

00:19:28,179 --> 00:19:31,630
pixels right that's the standard input

00:19:30,039 --> 00:19:34,840
sizes a thousand by a thousand pixels

00:19:31,630 --> 00:19:36,850
now this image over here I mean not this

00:19:34,840 --> 00:19:39,429
one here on this slide but the actual

00:19:36,850 --> 00:19:42,279
version of this image is 70,000 by

00:19:39,429 --> 00:19:44,890
60,000 pixels right so now I've got a

00:19:42,279 --> 00:19:47,020
problem my picture my scanning electron

00:19:44,890 --> 00:19:49,270
microscope image definitely won't fit on

00:19:47,020 --> 00:19:51,520
the GPU and it also won't fit in these

00:19:49,270 --> 00:19:53,710
thousand by thousand boxes that I'm

00:19:51,520 --> 00:19:55,390
expecting it to go into so what can I do

00:19:53,710 --> 00:19:57,070
how can I enable this and this is what

00:19:55,390 --> 00:19:58,510
large model support enables you to do it

00:19:57,070 --> 00:19:59,919
enables you to solve this problem

00:19:58,510 --> 00:20:01,360
without dropping the resolution of the

00:19:59,919 --> 00:20:03,159
image because of course if you were to

00:20:01,360 --> 00:20:03,370
drop the resolution of that image you'd

00:20:03,159 --> 00:20:05,559
lose

00:20:03,370 --> 00:20:06,700
that you were looking for right because

00:20:05,559 --> 00:20:08,320
of course I could drop this down to a

00:20:06,700 --> 00:20:10,300
thousand by a thousand but then I end up

00:20:08,320 --> 00:20:11,800
with like a blurry mess I can't really

00:20:10,300 --> 00:20:13,330
see anything so it enables you to

00:20:11,800 --> 00:20:15,760
overcome these problems too so large

00:20:13,330 --> 00:20:17,890
motor support which is enabled by that

00:20:15,760 --> 00:20:19,480
that infrastructure interconnect really

00:20:17,890 --> 00:20:23,230
does let you tackle these challenges so

00:20:19,480 --> 00:20:24,340
that's large motor support is really

00:20:23,230 --> 00:20:25,800
really cool and there is a talk on it

00:20:24,340 --> 00:20:28,690
later on which I encourage you to go to

00:20:25,800 --> 00:20:31,090
this is the result by the way not just

00:20:28,690 --> 00:20:33,430
photos of dashan's so this is a result

00:20:31,090 --> 00:20:35,830
of using a large motor support and use

00:20:33,430 --> 00:20:39,730
it maximizing that interconnect so we've

00:20:35,830 --> 00:20:41,140
got this same GPU architecture on one

00:20:39,730 --> 00:20:44,200
side of the chart we have it running on

00:20:41,140 --> 00:20:46,750
x86 and on the other side we've got it

00:20:44,200 --> 00:20:48,520
on AC 92 now they're the same the GPUs

00:20:46,750 --> 00:20:50,800
are identical it's the same for GPUs in

00:20:48,520 --> 00:20:52,390
both systems one of them because of that

00:20:50,800 --> 00:20:54,340
faster interconnect between the CPU in

00:20:52,390 --> 00:20:56,410
the GPU we're able to run the workload

00:20:54,340 --> 00:20:59,200
in 49 minutes the other side it takes

00:20:56,410 --> 00:21:01,990
3.1 hours so it really is about enabling

00:20:59,200 --> 00:21:03,250
that speed of delivery but also tackling

00:21:01,990 --> 00:21:04,510
those problems that you couldn't

00:21:03,250 --> 00:21:06,370
somewhere else and this is a

00:21:04,510 --> 00:21:07,840
standardized workload as well which it

00:21:06,370 --> 00:21:12,880
says down here in gray font that you

00:21:07,840 --> 00:21:14,260
can't see yeah so what about actual

00:21:12,880 --> 00:21:15,520
machine learning then so I've been

00:21:14,260 --> 00:21:17,710
talking about deep learning use cases

00:21:15,520 --> 00:21:20,920
and scaling and things like that and an

00:21:17,710 --> 00:21:22,660
image recognition but actually 90% of

00:21:20,920 --> 00:21:23,170
enterprise data doesn't sit in that

00:21:22,660 --> 00:21:25,840
space

00:21:23,170 --> 00:21:27,220
90% of enterprise data is in images and

00:21:25,840 --> 00:21:28,480
lots of the clients that I'm talking to

00:21:27,220 --> 00:21:30,400
now I'm moving that way they want to

00:21:28,480 --> 00:21:31,840
start using alternative data sources but

00:21:30,400 --> 00:21:33,580
for now they're saying actually do you

00:21:31,840 --> 00:21:35,800
know what we've got a absolute ton of

00:21:33,580 --> 00:21:38,380
you know column and row berries

00:21:35,800 --> 00:21:39,790
enterprises databases how do we deal

00:21:38,380 --> 00:21:41,590
with those how do we deal with those

00:21:39,790 --> 00:21:43,510
problems so we have this tooling called

00:21:41,590 --> 00:21:46,720
snap ml

00:21:43,510 --> 00:21:49,000
snap ml basically looks at taking the

00:21:46,720 --> 00:21:50,800
three most popular the three most

00:21:49,000 --> 00:21:52,090
prevalent machine learning algorithm so

00:21:50,800 --> 00:21:54,220
we've got logistic regression linear

00:21:52,090 --> 00:21:56,970
regression and support vector machines

00:21:54,220 --> 00:21:59,770
it looks at taking those three

00:21:56,970 --> 00:22:01,870
algorithms and accelerating them for

00:21:59,770 --> 00:22:03,520
GPUs so those algorithms are not GPU

00:22:01,870 --> 00:22:05,890
accelerated anywhere other than here in

00:22:03,520 --> 00:22:07,270
ethanal and we thought well our

00:22:05,890 --> 00:22:08,770
architecture is all about GPU

00:22:07,270 --> 00:22:10,630
acceleration so what if we did the work

00:22:08,770 --> 00:22:13,330
to make it so that these workloads ran

00:22:10,630 --> 00:22:15,310
on a GPU as well so we did and then we

00:22:13,330 --> 00:22:16,420
made it available as part of power i/o

00:22:15,310 --> 00:22:17,350
as well so you can get your hands on

00:22:16,420 --> 00:22:19,390
these and to you

00:22:17,350 --> 00:22:21,039
there are a lot like using s Kalyan

00:22:19,390 --> 00:22:22,390
which is that so scikit-learn which is

00:22:21,039 --> 00:22:24,250
mentioned over here so the

00:22:22,390 --> 00:22:25,419
implementation actually is very familiar

00:22:24,250 --> 00:22:27,280
today to scientists we've not done

00:22:25,419 --> 00:22:28,450
anything while there's not really a

00:22:27,280 --> 00:22:30,340
different way of defining things

00:22:28,450 --> 00:22:34,390
it feels very familiar if you've done

00:22:30,340 --> 00:22:35,980
either of them and this this lets us do

00:22:34,390 --> 00:22:38,289
something really cool now there is a

00:22:35,980 --> 00:22:41,890
data set out there that is a terabyte in

00:22:38,289 --> 00:22:44,100
size and it is the krita olabs dataset

00:22:41,890 --> 00:22:47,169
is anyone familiar with this dataset

00:22:44,100 --> 00:22:50,340
basically kriti allowed provide those

00:22:47,169 --> 00:22:53,289
web banner ads and this data set is

00:22:50,340 --> 00:22:54,970
click-through data so I think it's a

00:22:53,289 --> 00:22:56,740
prediction on how likely you are to buy

00:22:54,970 --> 00:22:58,809
a product based on your behavior before

00:22:56,740 --> 00:23:01,570
you click an advert one of their banner

00:22:58,809 --> 00:23:03,280
ads so it's actually really useful to

00:23:01,570 --> 00:23:04,630
know if you work in web advertising the

00:23:03,280 --> 00:23:06,429
likelihood of someone buying something

00:23:04,630 --> 00:23:07,990
before they reach an advert and then you

00:23:06,429 --> 00:23:10,240
can determine which ad to show them

00:23:07,990 --> 00:23:12,789
right there was a record for solving

00:23:10,240 --> 00:23:16,630
this problem was a record held by the

00:23:12,789 --> 00:23:18,850
guys at Google and they used 90 x86

00:23:16,630 --> 00:23:21,700
servers to solve the problem and it took

00:23:18,850 --> 00:23:25,210
them an hour or so we ran the same

00:23:21,700 --> 00:23:27,669
workload on four Palantine systems the

00:23:25,210 --> 00:23:30,490
open power derivative systems and this

00:23:27,669 --> 00:23:32,350
was the result so we've gone here it's

00:23:30,490 --> 00:23:36,280
the same accuracy by there we get to the

00:23:32,350 --> 00:23:39,820
same test gloss in both both cases so

00:23:36,280 --> 00:23:42,309
this is the hour that it ran on x86 CPUs

00:23:39,820 --> 00:23:44,950
and this is the minute and a half that

00:23:42,309 --> 00:23:47,289
it took using snap ml taking advantage

00:23:44,950 --> 00:23:49,299
of that GPU acceleration right so this

00:23:47,289 --> 00:23:51,909
is this to me is like a size make

00:23:49,299 --> 00:23:53,530
difference between these two if your

00:23:51,909 --> 00:23:55,030
competition are doing things in in an

00:23:53,530 --> 00:23:57,159
hour and you're able to get those

00:23:55,030 --> 00:23:59,500
results and iterate in a minute I think

00:23:57,159 --> 00:24:00,880
it stands to reason the advantage you're

00:23:59,500 --> 00:24:02,590
gonna gain right it's obvious to me

00:24:00,880 --> 00:24:03,850
anyway the advantage you'll gain and

00:24:02,590 --> 00:24:05,710
being able to respond that quickly to

00:24:03,850 --> 00:24:07,510
changes in the market to update your

00:24:05,710 --> 00:24:09,039
data set that quickly to retrain your

00:24:07,510 --> 00:24:10,900
model and redeploy your model based on

00:24:09,039 --> 00:24:13,150
new intelligence in a minute and a half

00:24:10,900 --> 00:24:14,799
rather than an hour and that's what this

00:24:13,150 --> 00:24:16,419
architecture enables and that's what

00:24:14,799 --> 00:24:18,159
this platform enables so it lets you do

00:24:16,419 --> 00:24:19,600
it lets you tackle the problem you

00:24:18,159 --> 00:24:20,799
couldn't do before right

00:24:19,600 --> 00:24:22,390
because you might think well an hour

00:24:20,799 --> 00:24:23,620
it's not worth us doing it it's not

00:24:22,390 --> 00:24:24,730
worth us are we running that because

00:24:23,620 --> 00:24:26,890
it's going to take too long to get the

00:24:24,730 --> 00:24:28,480
insight but this really does let you

00:24:26,890 --> 00:24:30,540
tackle those problems differently so

00:24:28,480 --> 00:24:40,500
step emelles really really cool as well

00:24:30,540 --> 00:24:42,090
uh sorry yes yes so so so hang on how do

00:24:40,500 --> 00:24:44,550
I go back every go yes so the

00:24:42,090 --> 00:24:48,120
fundamental difference here is here

00:24:44,550 --> 00:24:51,930
this is using tensor flow I believe yeah

00:24:48,120 --> 00:24:53,520
is using tense flow but the the logistic

00:24:51,930 --> 00:24:56,670
regression classifier isn't

00:24:53,520 --> 00:24:58,140
gpu-accelerated on one side nope no and

00:24:56,670 --> 00:24:59,790
that's the difference between that and

00:24:58,140 --> 00:25:03,360
snap ml is that we have gpu-accelerated

00:24:59,790 --> 00:25:06,030
those frameworks those models so that's

00:25:03,360 --> 00:25:07,230
kind of the the pivot there is that so I

00:25:06,030 --> 00:25:10,350
can tell you this is spending most of

00:25:07,230 --> 00:25:11,820
its time waiting in the CPU and this

00:25:10,350 --> 00:25:13,860
we're able to offload the workload to

00:25:11,820 --> 00:25:15,420
GPS so it is fundamentally doing things

00:25:13,860 --> 00:25:18,030
differently which is why we've got such

00:25:15,420 --> 00:25:19,920
a colossal speed-up does that answer

00:25:18,030 --> 00:25:20,880
your question good question there by the

00:25:19,920 --> 00:25:22,530
way I should have said write the start

00:25:20,880 --> 00:25:23,820
please feel free to fire questions at me

00:25:22,530 --> 00:25:25,500
it's much more fun for me if this is

00:25:23,820 --> 00:25:26,820
interactive provided I know the answer

00:25:25,500 --> 00:25:36,090
but don't know the answer don't ask the

00:25:26,820 --> 00:25:38,610
question yesterday yes as part of it so

00:25:36,090 --> 00:25:40,800
so it's bundled in power AI so if you

00:25:38,610 --> 00:25:42,750
install yeah yeah so if you install

00:25:40,800 --> 00:25:43,920
power AR you get snap ah now it's in

00:25:42,750 --> 00:25:49,730
there as part of the package with all

00:25:43,920 --> 00:25:49,730
its dependencies good question so yes

00:25:54,020 --> 00:25:57,510
those numbers may exist I don't have

00:25:56,370 --> 00:26:01,710
them you're right that would be a good

00:25:57,510 --> 00:26:04,500
comparison to see but no I don't good

00:26:01,710 --> 00:26:06,810
question though thank you so I want to

00:26:04,500 --> 00:26:10,500
talk a bit about use cases with the time

00:26:06,810 --> 00:26:12,120
we've got left how I I think the the

00:26:10,500 --> 00:26:13,650
difference is people are doing where

00:26:12,120 --> 00:26:15,690
they're going to find these workloads

00:26:13,650 --> 00:26:20,310
what they're doing differently now and

00:26:15,690 --> 00:26:23,700
also the a few cases that I've actually

00:26:20,310 --> 00:26:25,680
seen so the first one is we had a

00:26:23,700 --> 00:26:28,740
another spoiler because I skipped on too

00:26:25,680 --> 00:26:30,600
many sites we had a bank come to us and

00:26:28,740 --> 00:26:32,220
they said hey IBM we've got a problem

00:26:30,600 --> 00:26:34,650
with fraud and I think we thought yeah

00:26:32,220 --> 00:26:35,910
okay cool well not the first time we've

00:26:34,650 --> 00:26:37,080
heard that in the financial services

00:26:35,910 --> 00:26:39,180
industry there is an issue with fraud

00:26:37,080 --> 00:26:40,860
but they said actually our problem was

00:26:39,180 --> 00:26:44,080
frauds in a really interesting place we

00:26:40,860 --> 00:26:46,180
said okay tell us more and said

00:26:44,080 --> 00:26:50,170
what's common for us is people will

00:26:46,180 --> 00:26:52,810
steal your credit debit card then they

00:26:50,170 --> 00:26:55,180
will steal your PIN number and then they

00:26:52,810 --> 00:26:57,520
will go to a cash point and ATM and

00:26:55,180 --> 00:27:01,090
their withdraw money right there

00:26:57,520 --> 00:27:02,560
withdraw the funds and this is costing

00:27:01,090 --> 00:27:04,840
us you know billions of dollars that

00:27:02,560 --> 00:27:07,450
they're taking all this money how can we

00:27:04,840 --> 00:27:09,400
prevent that how can we stop that that

00:27:07,450 --> 00:27:13,030
source how can we stop that kind of

00:27:09,400 --> 00:27:15,940
fraud at the ATM and we said well we

00:27:13,030 --> 00:27:17,920
think we think we can take advantage of

00:27:15,940 --> 00:27:19,840
the ATM camera to fix that problem right

00:27:17,920 --> 00:27:22,030
so what we did was we built them this

00:27:19,840 --> 00:27:24,520
system and this guy's an IBM oh by the

00:27:22,030 --> 00:27:26,890
way not a criminal what this system does

00:27:24,520 --> 00:27:29,620
is it detects whether or not you are

00:27:26,890 --> 00:27:31,600
trying to hide your face so in this case

00:27:29,620 --> 00:27:33,640
he's clearly wearing a mask what happens

00:27:31,600 --> 00:27:35,710
at that point using the ATM camera what

00:27:33,640 --> 00:27:37,510
happens at that point is we recognize

00:27:35,710 --> 00:27:39,520
he's wearing a mask and we're in a

00:27:37,510 --> 00:27:42,250
position to send one of those two factor

00:27:39,520 --> 00:27:44,320
authentication texts the is this you

00:27:42,250 --> 00:27:45,880
withdrawing cash or not so should you

00:27:44,320 --> 00:27:47,830
wish to withdraw cash wearing your

00:27:45,880 --> 00:27:50,260
favorite balaclava you still can

00:27:47,830 --> 00:27:51,790
you just have to respond to to that text

00:27:50,260 --> 00:27:54,280
message or something like that and

00:27:51,790 --> 00:27:56,890
they're using that to prevent fraud at

00:27:54,280 --> 00:27:59,170
the at the actual ATM at that at that

00:27:56,890 --> 00:28:00,820
cash point right and I think that's

00:27:59,170 --> 00:28:04,650
really interesting and I think that is

00:28:00,820 --> 00:28:07,510
what I'm seeing a lot in this space is

00:28:04,650 --> 00:28:08,590
clients and customers and and people

00:28:07,510 --> 00:28:10,300
that are doing machine learning is

00:28:08,590 --> 00:28:12,520
starting to look at alternative data

00:28:10,300 --> 00:28:14,950
sources right other sources for this

00:28:12,520 --> 00:28:16,660
information or other ways they could get

00:28:14,950 --> 00:28:18,310
this intelligence so it's not about

00:28:16,660 --> 00:28:20,770
thinking well hey what data do we have

00:28:18,310 --> 00:28:23,560
right it's about thinking what problem

00:28:20,770 --> 00:28:26,700
do we need to solve and what data do I

00:28:23,560 --> 00:28:28,960
need to go to get to solve that problem

00:28:26,700 --> 00:28:30,730
right so in this case the problem was

00:28:28,960 --> 00:28:32,470
all people are committing forward ATMs

00:28:30,730 --> 00:28:34,630
so the data you need to go get it's a

00:28:32,470 --> 00:28:37,840
bunch of faces of people using ATMs

00:28:34,630 --> 00:28:39,430
right so it's not about hey why don't we

00:28:37,840 --> 00:28:40,750
what we have is all this transaction

00:28:39,430 --> 00:28:43,120
history and we can use that to identify

00:28:40,750 --> 00:28:44,470
it it's about thinking it's about

00:28:43,120 --> 00:28:46,450
thinking about the problem first and

00:28:44,470 --> 00:28:47,650
then identifying ways that machine

00:28:46,450 --> 00:28:49,600
learning can be used to solve that

00:28:47,650 --> 00:28:52,480
problem I have a couple of other videos

00:28:49,600 --> 00:28:54,820
for you the first one over here on the

00:28:52,480 --> 00:28:57,820
left hand side of this chart this

00:28:54,820 --> 00:28:59,739
trailer was built automatically

00:28:57,820 --> 00:29:02,169
it was built automatically from

00:28:59,739 --> 00:29:04,450
something like 3000 hours of series

00:29:02,169 --> 00:29:06,970
footage what it's looking for is scenes

00:29:04,450 --> 00:29:10,989
of excitement entertainment things like

00:29:06,970 --> 00:29:13,389
that and it's automatically then

00:29:10,989 --> 00:29:15,609
generated this content and generated

00:29:13,389 --> 00:29:16,989
this trailer right so this means to that

00:29:15,609 --> 00:29:18,429
production company that they don't need

00:29:16,989 --> 00:29:20,649
to spend thousands of hours trawling

00:29:18,429 --> 00:29:22,929
through every single second of footage

00:29:20,649 --> 00:29:24,669
to produce this video to entice people

00:29:22,929 --> 00:29:26,379
to watch their show so they can produce

00:29:24,669 --> 00:29:28,179
many more trailers they can produce

00:29:26,379 --> 00:29:29,739
better trailers based on that sentiment

00:29:28,179 --> 00:29:31,659
as well and it's all pulled together

00:29:29,739 --> 00:29:33,759
automatically and if you've ever done

00:29:31,659 --> 00:29:34,570
any video editing you'll know how great

00:29:33,759 --> 00:29:36,849
the idea of having it happen

00:29:34,570 --> 00:29:38,229
automatically is so that's how they're

00:29:36,849 --> 00:29:41,019
doing it that's how they're transforming

00:29:38,229 --> 00:29:43,629
their engagement with with us

00:29:41,019 --> 00:29:46,479
I guess the consumers of television of

00:29:43,629 --> 00:29:47,710
this digital media and it's is literally

00:29:46,479 --> 00:29:49,210
just look through those looking for

00:29:47,710 --> 00:29:50,349
excitement entertainment that kind of

00:29:49,210 --> 00:29:51,549
thing and pull together that trailer

00:29:50,349 --> 00:29:54,279
which i think is really good now this

00:29:51,549 --> 00:29:56,919
one over here on the right-hand side of

00:29:54,279 --> 00:29:59,440
this chart this is really interesting so

00:29:56,919 --> 00:30:01,450
what we've got here is a face detection

00:29:59,440 --> 00:30:04,379
workload that you might be used to

00:30:01,450 --> 00:30:07,029
seeing so we're looking for in this case

00:30:04,379 --> 00:30:08,499
different basketball stars I know

00:30:07,029 --> 00:30:10,509
nothing about basketball the way I will

00:30:08,499 --> 00:30:11,830
hold my hands up at a bit that but we're

00:30:10,509 --> 00:30:12,909
looking at these basketball stars and

00:30:11,830 --> 00:30:15,849
then we're able to do something very

00:30:12,909 --> 00:30:18,909
clever so we can count the number of

00:30:15,849 --> 00:30:20,859
seconds they spend on screen and then

00:30:18,909 --> 00:30:23,259
you can use that to determine exactly

00:30:20,859 --> 00:30:24,849
how much they're advertising space or

00:30:23,259 --> 00:30:27,729
something like that would be worth right

00:30:24,849 --> 00:30:30,940
if the players on screen for longer then

00:30:27,729 --> 00:30:32,529
it's worth more to Nike added us so we

00:30:30,940 --> 00:30:33,909
can literally offer that sadistic the

00:30:32,529 --> 00:30:36,009
other thing is as well if you are a

00:30:33,909 --> 00:30:37,840
marketing agency is that this type of

00:30:36,009 --> 00:30:40,119
implementation this implementation of

00:30:37,840 --> 00:30:42,729
technology lets you see how much you'll

00:30:40,119 --> 00:30:44,200
spend is worth right saying giving two

00:30:42,729 --> 00:30:46,989
athletes exactly the same amount of

00:30:44,200 --> 00:30:48,849
money this would let me see how much

00:30:46,989 --> 00:30:50,739
time one of them versus the other one

00:30:48,849 --> 00:30:52,389
spends on screen right so I'm able to

00:30:50,739 --> 00:30:54,669
target my advertising budget more

00:30:52,389 --> 00:30:56,259
effectively doesn't just have to stop it

00:30:54,669 --> 00:30:59,379
faces by the way we could also look at

00:30:56,259 --> 00:31:01,330
you know the the wider scene right what

00:30:59,379 --> 00:31:05,379
other information is there in that in

00:31:01,330 --> 00:31:06,999
that you know image the actual ads

00:31:05,379 --> 00:31:09,759
around the stadium for instance start to

00:31:06,999 --> 00:31:11,710
look at those alternative data sources

00:31:09,759 --> 00:31:13,630
and pull that stream in to find new red

00:31:11,710 --> 00:31:15,909
nice dreams right so I'm no longer

00:31:13,630 --> 00:31:17,500
looking at what an Abbe that cost me X

00:31:15,909 --> 00:31:18,820
million and then my sales went up by a

00:31:17,500 --> 00:31:20,500
bit I don't know if that's because

00:31:18,820 --> 00:31:21,760
people saw the advert or I released the

00:31:20,500 --> 00:31:23,440
new product I don't really know what's

00:31:21,760 --> 00:31:25,210
going on and it's about generating that

00:31:23,440 --> 00:31:27,220
actionable intelligence by using

00:31:25,210 --> 00:31:29,620
alternative data sources and I think

00:31:27,220 --> 00:31:32,500
really that's kind of where we're

00:31:29,620 --> 00:31:36,640
heading by the way both of these both of

00:31:32,500 --> 00:31:39,640
these were built using tool train that I

00:31:36,640 --> 00:31:43,480
will show you in in the second half of

00:31:39,640 --> 00:31:45,010
this talk so please come along to that

00:31:43,480 --> 00:31:46,450
if you want to see how these were built

00:31:45,010 --> 00:31:47,830
I will show you how they were built and

00:31:46,450 --> 00:31:50,620
how easy it is to implement an

00:31:47,830 --> 00:31:53,220
application that uses either of them so

00:31:50,620 --> 00:31:55,960
stick around for that now with the final

00:31:53,220 --> 00:31:58,210
10 minutes or so I want to talk about I

00:31:55,960 --> 00:31:58,899
might stop that from playing and before

00:31:58,210 --> 00:32:01,210
we all go mad

00:31:58,899 --> 00:32:06,309
put that logo up well maybe that's a bit

00:32:01,210 --> 00:32:07,990
biased there we go go back to a random

00:32:06,309 --> 00:32:11,169
slide I will talk about use cases right

00:32:07,990 --> 00:32:13,630
the places that I think people can get

00:32:11,169 --> 00:32:15,809
started with this today for me there are

00:32:13,630 --> 00:32:17,710
three obvious places because I think

00:32:15,809 --> 00:32:19,360
throughout this talk I hope it came

00:32:17,710 --> 00:32:21,130
across that actually one of the

00:32:19,360 --> 00:32:23,649
difficulties with machine learning is

00:32:21,130 --> 00:32:26,140
that you could really tackle any problem

00:32:23,649 --> 00:32:28,840
you had if you wanted if you had the

00:32:26,140 --> 00:32:29,919
data and that's a difficult thing to get

00:32:28,840 --> 00:32:31,419
your head around right because there's

00:32:29,919 --> 00:32:32,950
an industry we're so used to being told

00:32:31,419 --> 00:32:34,539
well these are the really specific

00:32:32,950 --> 00:32:35,440
things this technology can do so if you

00:32:34,539 --> 00:32:37,299
want to do one of those brilliant

00:32:35,440 --> 00:32:38,860
otherwise look for some other technology

00:32:37,299 --> 00:32:40,630
where as to turn around and say you can

00:32:38,860 --> 00:32:44,049
do anything you want what hurts you the

00:32:40,630 --> 00:32:46,450
most is a different way of thinking and

00:32:44,049 --> 00:32:49,600
often times I'll find that actually that

00:32:46,450 --> 00:32:52,090
can stall for a while because you think

00:32:49,600 --> 00:32:53,320
well if I can do anything I'm gonna want

00:32:52,090 --> 00:32:54,730
to boil the ocean I'm gonna make things

00:32:53,320 --> 00:32:56,740
really complicated I'm not even gonna

00:32:54,730 --> 00:32:59,380
know where to start so where can you

00:32:56,740 --> 00:33:01,149
where can you start looking for for

00:32:59,380 --> 00:33:04,029
these solutions right well how can you

00:33:01,149 --> 00:33:05,980
where do you start looking for these use

00:33:04,029 --> 00:33:07,990
cases for me there are three obvious

00:33:05,980 --> 00:33:11,620
places the first is anywhere where

00:33:07,990 --> 00:33:13,270
you're collecting data right anywhere

00:33:11,620 --> 00:33:14,710
where you're going out there and you're

00:33:13,270 --> 00:33:17,409
getting data what if you did it

00:33:14,710 --> 00:33:18,760
differently what if you didn't use a web

00:33:17,409 --> 00:33:21,130
form for instance

00:33:18,760 --> 00:33:23,590
what if you used a more engaging a more

00:33:21,130 --> 00:33:24,800
exciting way of of collecting that data

00:33:23,590 --> 00:33:28,460
and

00:33:24,800 --> 00:33:29,690
and there are companies doing that okay

00:33:28,460 --> 00:33:30,380
let's go say is anyone bought car

00:33:29,690 --> 00:33:31,790
insurance

00:33:30,380 --> 00:33:35,300
hopefully anyone owns a car puts their

00:33:31,790 --> 00:33:36,710
hand straight up so car insurance I'm

00:33:35,300 --> 00:33:38,120
sure we've all been through the process

00:33:36,710 --> 00:33:39,650
of buying it right you go to that

00:33:38,120 --> 00:33:42,590
website and you enter every single piece

00:33:39,650 --> 00:33:45,260
of information about your car ever what

00:33:42,590 --> 00:33:47,330
color the wheels are who was in it last

00:33:45,260 --> 00:33:48,770
weekend and it takes you four or five

00:33:47,330 --> 00:33:50,120
days you ain't all this information and

00:33:48,770 --> 00:33:51,680
out the other side of it you get a price

00:33:50,120 --> 00:33:52,940
back right and it says I gave well this

00:33:51,680 --> 00:33:56,060
is how much your car insurance would

00:33:52,940 --> 00:33:57,050
cost there's a company in the u.s.

00:33:56,060 --> 00:33:59,210
that's doing that slightly differently

00:33:57,050 --> 00:34:02,300
they've built a platform where what you

00:33:59,210 --> 00:34:04,640
do is you walk outside to your car and

00:34:02,300 --> 00:34:06,320
you take a photo of it and then from

00:34:04,640 --> 00:34:08,900
that it gains all the information that

00:34:06,320 --> 00:34:11,600
it needs to to determine the age make

00:34:08,900 --> 00:34:13,520
model of the car it knows where you are

00:34:11,600 --> 00:34:16,670
of course as well and it'll give you a

00:34:13,520 --> 00:34:17,780
quote for your car insurance right it's

00:34:16,670 --> 00:34:19,190
about thinking about collecting that

00:34:17,780 --> 00:34:20,690
data differently and think about it

00:34:19,190 --> 00:34:22,040
where are you gonna go are you gonna go

00:34:20,690 --> 00:34:23,179
to the platform where you take a photo

00:34:22,040 --> 00:34:24,350
of your car and you get a price back

00:34:23,179 --> 00:34:25,850
straight away or are you going to go to

00:34:24,350 --> 00:34:27,679
the place that means you lose your bank

00:34:25,850 --> 00:34:29,870
holiday weekend filling in all these

00:34:27,679 --> 00:34:31,100
different forms right it's a no-brainer

00:34:29,870 --> 00:34:32,660
you're going to go back to the place

00:34:31,100 --> 00:34:34,280
that gives you the best experience and

00:34:32,660 --> 00:34:36,380
machine learning really can do that

00:34:34,280 --> 00:34:37,760
so that's the first place any way of

00:34:36,380 --> 00:34:39,830
collecting data what if you use speech

00:34:37,760 --> 00:34:44,090
data what if you used image data like

00:34:39,830 --> 00:34:46,040
that the second place is process

00:34:44,090 --> 00:34:48,800
optimization right those things that

00:34:46,040 --> 00:34:50,540
people don't enjoy doing this is about I

00:34:48,800 --> 00:34:52,160
think going and talking to the boots on

00:34:50,540 --> 00:34:54,710
the ground the people doing the jobs day

00:34:52,160 --> 00:34:56,390
to day and saying what sucks up 80

00:34:54,710 --> 00:35:00,020
percent of your time but you don't enjoy

00:34:56,390 --> 00:35:01,280
doing right that that problem um what do

00:35:00,020 --> 00:35:04,510
you do that you actually weren't hired

00:35:01,280 --> 00:35:06,530
to do and it takes you forever right and

00:35:04,510 --> 00:35:08,870
that's an ideal place for machine

00:35:06,530 --> 00:35:12,140
learning because the chances are if they

00:35:08,870 --> 00:35:15,470
don't like doing it it's because it's

00:35:12,140 --> 00:35:17,120
easy and it's mundane and if it's

00:35:15,470 --> 00:35:18,800
mundane and monotonous and they spend

00:35:17,120 --> 00:35:20,410
forever doing it chances are that a

00:35:18,800 --> 00:35:23,630
computer could learn how to do it too

00:35:20,410 --> 00:35:27,020
there's a another there's another

00:35:23,630 --> 00:35:29,390
startup in in the US and the reason it's

00:35:27,020 --> 00:35:31,850
us-based is the two-party consent for

00:35:29,390 --> 00:35:33,830
recordings thing anyway so there's a

00:35:31,850 --> 00:35:37,250
us-based startup that has built an

00:35:33,830 --> 00:35:38,690
application for CRM the customer

00:35:37,250 --> 00:35:41,640
relationship management

00:35:38,690 --> 00:35:43,049
instead of asking your field sellers to

00:35:41,640 --> 00:35:44,430
come back to base and then fill out all

00:35:43,049 --> 00:35:46,049
this information saying what clients

00:35:44,430 --> 00:35:48,359
they spoke to what they spoke to them

00:35:46,049 --> 00:35:49,859
about all of this data what it does is

00:35:48,359 --> 00:35:51,900
it pulls that in from their calendar

00:35:49,859 --> 00:35:53,970
right so who's in the calendar invite

00:35:51,900 --> 00:35:55,650
what the agenda was pulls in all this

00:35:53,970 --> 00:35:58,079
data to fill in this application and

00:35:55,650 --> 00:36:00,900
then it goes one step further in that it

00:35:58,079 --> 00:36:03,359
will listen to the phone calls and then

00:36:00,900 --> 00:36:04,920
determine what the client was interested

00:36:03,359 --> 00:36:06,450
in based on the sentiment of that

00:36:04,920 --> 00:36:08,730
conversation maybe they said they were

00:36:06,450 --> 00:36:10,920
interested in product X not product Y

00:36:08,730 --> 00:36:12,839
and it'll pull all of that in and then

00:36:10,920 --> 00:36:14,160
maybe they said when they were gonna

00:36:12,839 --> 00:36:15,839
look to buy maybe they said hey we're

00:36:14,160 --> 00:36:17,970
gonna look to buy in november/december

00:36:15,839 --> 00:36:20,010
it'll pull that into and then notify

00:36:17,970 --> 00:36:22,799
that seller when he needs to see that

00:36:20,010 --> 00:36:25,200
information right and if you think about

00:36:22,799 --> 00:36:26,279
that as a tool which are you gonna use

00:36:25,200 --> 00:36:27,599
are you gonna want to use the one that

00:36:26,279 --> 00:36:28,950
means you spend forever filling in this

00:36:27,599 --> 00:36:30,240
information or are you gonna want to

00:36:28,950 --> 00:36:31,500
spend that use the one that does it

00:36:30,240 --> 00:36:33,150
automatically and tells you when you

00:36:31,500 --> 00:36:34,319
need to action something right it's a

00:36:33,150 --> 00:36:36,180
no-brainer you're going to do the one

00:36:34,319 --> 00:36:38,609
that saves you time

00:36:36,180 --> 00:36:41,960
what about field engineer's going out

00:36:38,609 --> 00:36:45,059
there and actually you know climbing up

00:36:41,960 --> 00:36:47,910
energy pylons to inspect the cables

00:36:45,059 --> 00:36:49,920
right what if you just fly a drone over

00:36:47,910 --> 00:36:52,079
it and that's quite a prevalent use case

00:36:49,920 --> 00:36:53,730
actually is to fly a drone over it use

00:36:52,079 --> 00:36:55,589
that image data to see whether or not

00:36:53,730 --> 00:36:57,630
you need to see send that field engineer

00:36:55,589 --> 00:36:58,859
up there and that improves safety it

00:36:57,630 --> 00:37:02,009
improves the amount of time your

00:36:58,859 --> 00:37:04,829
employees spend up that energy pylon and

00:37:02,009 --> 00:37:06,720
it makes that whole process I guess more

00:37:04,829 --> 00:37:07,829
effective more efficient so the first is

00:37:06,720 --> 00:37:09,750
anyway you're collecting data

00:37:07,829 --> 00:37:11,400
the second is any of those mundane

00:37:09,750 --> 00:37:13,349
processes an ideal opportunity for

00:37:11,400 --> 00:37:16,619
machine learning the third one and this

00:37:13,349 --> 00:37:19,289
is absolutely my favorite one is the

00:37:16,619 --> 00:37:21,539
opportunity to kind of preempt your

00:37:19,289 --> 00:37:22,859
users next action so to know what

00:37:21,539 --> 00:37:24,690
they're going to want to do next and

00:37:22,859 --> 00:37:26,369
offer it to them on a plate so they

00:37:24,690 --> 00:37:28,980
don't have to go and look for it right

00:37:26,369 --> 00:37:30,450
the simplest example of this and we've

00:37:28,980 --> 00:37:32,369
seen this for you so this won't come as

00:37:30,450 --> 00:37:34,500
a shock to anybody the simplest example

00:37:32,369 --> 00:37:36,480
of this is when you book a flight with

00:37:34,500 --> 00:37:37,829
an airline and it says you're in this

00:37:36,480 --> 00:37:40,230
country for these days do you also want

00:37:37,829 --> 00:37:42,210
a hotel right fairly obvious example

00:37:40,230 --> 00:37:43,680
didn't require any machine learning but

00:37:42,210 --> 00:37:46,019
machine learning lets you go one stage

00:37:43,680 --> 00:37:49,950
further my favorite example of this is

00:37:46,019 --> 00:37:52,380
Gmail actually so Google realized that

00:37:49,950 --> 00:37:53,730
they had and what

00:37:52,380 --> 00:37:55,380
looked at the data right it turns out

00:37:53,730 --> 00:37:57,690
loads of people were starting emails and

00:37:55,380 --> 00:37:59,339
they're never actually sending them and

00:37:57,690 --> 00:38:01,470
they thought okay well why are people

00:37:59,339 --> 00:38:03,839
why are all these emails going to draft

00:38:01,470 --> 00:38:04,980
right so they did some research they're

00:38:03,839 --> 00:38:06,450
boarding some focus groups and they

00:38:04,980 --> 00:38:08,490
looked at why he's so many of their

00:38:06,450 --> 00:38:11,250
emails were going to draft and it turns

00:38:08,490 --> 00:38:13,470
out that it's because people didn't know

00:38:11,250 --> 00:38:14,789
how to start the emails so they'd write

00:38:13,470 --> 00:38:17,069
the name of the person they wanted to

00:38:14,789 --> 00:38:19,170
reply to and then go a couple of lines

00:38:17,069 --> 00:38:21,390
down and then write nothing so they

00:38:19,170 --> 00:38:23,009
thought okay how can I solve that and if

00:38:21,390 --> 00:38:25,170
by the way you're thinking well I know

00:38:23,009 --> 00:38:26,789
how to write emails I can promise you I

00:38:25,170 --> 00:38:28,200
don't every email I've ever written

00:38:26,789 --> 00:38:30,509
starts with the phrase I hope you are

00:38:28,200 --> 00:38:34,049
well and then a bit below that the email

00:38:30,509 --> 00:38:35,250
I actually wanted to write is there it's

00:38:34,049 --> 00:38:37,349
because I don't know how to start email

00:38:35,250 --> 00:38:39,210
so I would be one of their cases anyway

00:38:37,349 --> 00:38:40,740
so they looked at using machine learning

00:38:39,210 --> 00:38:42,690
to solve that problem right they looked

00:38:40,740 --> 00:38:44,220
at using artificial intelligence to

00:38:42,690 --> 00:38:47,339
solve that problem so what they were

00:38:44,220 --> 00:38:49,170
able to do now is using AI is understand

00:38:47,339 --> 00:38:50,460
the context and meaning of the email

00:38:49,170 --> 00:38:52,380
you've received understand what

00:38:50,460 --> 00:38:54,299
questions you've been asked understand

00:38:52,380 --> 00:38:55,859
the syntax understand potentially your

00:38:54,299 --> 00:38:57,569
relationship to the person that sent it

00:38:55,859 --> 00:39:00,240
and then it will come up with three

00:38:57,569 --> 00:39:02,309
smart replies they call them positive

00:39:00,240 --> 00:39:05,160
and neutral and a negative and those are

00:39:02,309 --> 00:39:08,279
the first sentence reply to that email

00:39:05,160 --> 00:39:10,829
and they've had this huge upsurge in a

00:39:08,279 --> 00:39:12,779
people using this service and B email

00:39:10,829 --> 00:39:14,460
traffic being sent using it right

00:39:12,779 --> 00:39:16,799
because it offers you what you need to

00:39:14,460 --> 00:39:18,299
do it takes away that pain point makes

00:39:16,799 --> 00:39:20,640
it easy to do what you want to do next

00:39:18,299 --> 00:39:21,750
which is reply to that email and as an

00:39:20,640 --> 00:39:23,039
end consumer where you're going to go

00:39:21,750 --> 00:39:24,210
you're going to go to the service that

00:39:23,039 --> 00:39:25,589
means you have to start every sentence

00:39:24,210 --> 00:39:27,299
with I hope you're well or you're going

00:39:25,589 --> 00:39:29,490
to go to the place where it helps you

00:39:27,299 --> 00:39:30,779
over that helps you solve that problem

00:39:29,490 --> 00:39:33,029
and gets you to where you want to be

00:39:30,779 --> 00:39:34,440
much faster so those are the three

00:39:33,029 --> 00:39:37,170
places for me that I look for machine

00:39:34,440 --> 00:39:39,000
learning use cases one anywhere where

00:39:37,170 --> 00:39:41,460
you're collecting data to any of those

00:39:39,000 --> 00:39:41,759
business processes right please automate

00:39:41,460 --> 00:39:42,930
them

00:39:41,759 --> 00:39:46,019
please make things easy for your

00:39:42,930 --> 00:39:47,279
employees and the third one is anywhere

00:39:46,019 --> 00:39:48,960
where you can get ahead of your users

00:39:47,279 --> 00:39:50,069
and offer them stuff on a plate and that

00:39:48,960 --> 00:39:51,690
will keep them coming back right and

00:39:50,069 --> 00:39:54,450
that will drive your user adoption and

00:39:51,690 --> 00:39:56,309
stuff like that so so that's it from me

00:39:54,450 --> 00:39:59,400
thank you very much for listening to the

00:39:56,309 --> 00:40:00,900
first half of this two-part talk in the

00:39:59,400 --> 00:40:02,730
second half I'm going to get hands-on I

00:40:00,900 --> 00:40:04,019
promise and I'm gonna we're actually

00:40:02,730 --> 00:40:06,000
going to show you some code which is

00:40:04,019 --> 00:40:07,680
really cool and we're gonna go

00:40:06,000 --> 00:40:10,890
through actually building and training

00:40:07,680 --> 00:40:12,990
and deploying one of these AIS for image

00:40:10,890 --> 00:40:14,910
classification workloads to an iPhone

00:40:12,990 --> 00:40:17,270
app funnily enough so thank you very

00:40:14,910 --> 00:40:17,270

YouTube URL: https://www.youtube.com/watch?v=hNnIpAIgQUU


