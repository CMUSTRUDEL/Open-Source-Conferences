Title: OpenPOWER Summit Europe 2018: Accelerating AI Deployment with H2O Driverless AI on IBM Power9
Publication date: 2018-11-26
Playlist: OpenPOWER Summit Europe 2018
Description: 
	Jo-fai (Joe) Chow, Data Science Evangelist, H2O.ai, speaks at OpenPOWER Summit Europe 2018.

For more information, please visit: https://openpowerfoundation.org/summit-2018-10-eu/
Captions: 
	00:00:01,070 --> 00:00:06,509
so again my name is Joe I'm still the

00:00:03,930 --> 00:00:08,340
only job at hto so my email is Joe at

00:00:06,509 --> 00:00:11,460
actual Toria if you want to reach out to

00:00:08,340 --> 00:00:15,000
me through the handle for hto is at HT

00:00:11,460 --> 00:00:16,560
oai so this is about one of the

00:00:15,000 --> 00:00:17,160
functions in our software called Chavez

00:00:16,560 --> 00:00:18,690
ai

00:00:17,160 --> 00:00:20,310
so in this store I'll give you an

00:00:18,690 --> 00:00:22,619
overview of overview of the company

00:00:20,310 --> 00:00:24,240
first and then some of our perform

00:00:22,619 --> 00:00:26,190
machine learning platforms and then I

00:00:24,240 --> 00:00:28,619
will squeeze in a lifetime or at the end

00:00:26,190 --> 00:00:31,890
to give you a feeling of this software

00:00:28,619 --> 00:00:33,989
so how many of you have part of XTO

00:00:31,890 --> 00:00:36,270
before oh great

00:00:33,989 --> 00:00:37,920
yeah so we are still young companies

00:00:36,270 --> 00:00:39,540
they were young startup in Silicon

00:00:37,920 --> 00:00:42,510
Valley so we focus on machine learning

00:00:39,540 --> 00:00:45,719
platforms we have about 120 people now

00:00:42,510 --> 00:00:47,340
around the world mostly in us we work on

00:00:45,719 --> 00:00:48,780
machine and platforms so that we have

00:00:47,340 --> 00:00:50,730
two open source XT or engineering

00:00:48,780 --> 00:00:52,710
platforms we also have piece of air is

00:00:50,730 --> 00:00:55,500
the commercial java SE i which is the

00:00:52,710 --> 00:00:58,649
focus of today the main office is in is

00:00:55,500 --> 00:01:00,920
in Mountain View California and we do

00:00:58,649 --> 00:01:06,360
have other office in London in Prague in

00:01:00,920 --> 00:01:09,090
in India as well a new one in India so

00:01:06,360 --> 00:01:10,650
XTO we work on like a generic machine

00:01:09,090 --> 00:01:12,630
learning platform so as long as you can

00:01:10,650 --> 00:01:14,909
fame your business problem into machine

00:01:12,630 --> 00:01:16,560
learning problems you can use h2o so you

00:01:14,909 --> 00:01:19,590
can see that this is our like going

00:01:16,560 --> 00:01:21,030
customer base in different industries so

00:01:19,590 --> 00:01:22,439
mainly you know you can we start with

00:01:21,030 --> 00:01:24,720
financial sector because now they are

00:01:22,439 --> 00:01:26,610
the guys who want you know know get a

00:01:24,720 --> 00:01:29,100
cutting edge technology first and that's

00:01:26,610 --> 00:01:30,780
what we have a bit more customers in

00:01:29,100 --> 00:01:31,950
that sector but then you can also see

00:01:30,780 --> 00:01:36,330
that we have other customers in

00:01:31,950 --> 00:01:37,799
different industries so you may ask how

00:01:36,330 --> 00:01:39,960
do we make money from open source

00:01:37,799 --> 00:01:41,549
software so because some of them they do

00:01:39,960 --> 00:01:43,200
need support they need enterprise

00:01:41,549 --> 00:01:45,210
support from from open source software

00:01:43,200 --> 00:01:47,490
so that's why we did they pay us and

00:01:45,210 --> 00:01:49,680
they become our customers and we have

00:01:47,490 --> 00:01:51,150
provide them with enterprise support on

00:01:49,680 --> 00:01:54,110
both open source and commercial

00:01:51,150 --> 00:01:54,110
software's

00:01:57,210 --> 00:02:03,480
okay just a just a few more slide on the

00:02:01,260 --> 00:02:06,450
for marketing so we have we have a lot

00:02:03,480 --> 00:02:09,030
of company using hto now so we have no

00:02:06,450 --> 00:02:11,280
more than 10,000 companies using h2o and

00:02:09,030 --> 00:02:15,000
where many people data scientists using

00:02:11,280 --> 00:02:17,850
xgo worldwide and then we have thanks

00:02:15,000 --> 00:02:20,340
Chuck here is more about the famous

00:02:17,850 --> 00:02:22,140
magic audience from Gartner so we are

00:02:20,340 --> 00:02:23,610
one of the leader in the Magic Quadrant

00:02:22,140 --> 00:02:26,190
for data science and machine learning

00:02:23,610 --> 00:02:27,900
platform this is based on the customer

00:02:26,190 --> 00:02:30,150
feedback and other functionalities in

00:02:27,900 --> 00:02:31,950
the software so we are now happy to be

00:02:30,150 --> 00:02:35,040
recognized as one of the leaders as well

00:02:31,950 --> 00:02:37,560
as IBM day as well and we partner with

00:02:35,040 --> 00:02:40,200
many different companies so iBM is our

00:02:37,560 --> 00:02:42,989
one of them our strategic partners so we

00:02:40,200 --> 00:02:45,660
work with IBM closely to make sure that

00:02:42,989 --> 00:02:48,630
job has a I won quickly on power system

00:02:45,660 --> 00:02:51,780
so this is one of the focus of the talk

00:02:48,630 --> 00:02:57,150
so we try to emphasize why we should use

00:02:51,780 --> 00:02:58,890
this software or with IBM power just a

00:02:57,150 --> 00:03:00,150
quick view of the other platforms that

00:02:58,890 --> 00:03:02,910
we provide all the products that we have

00:03:00,150 --> 00:03:04,799
so those in the on the left hand side I

00:03:02,910 --> 00:03:06,090
don't know why I keep coming back so

00:03:04,799 --> 00:03:08,100
that wouldn't happen side with the white

00:03:06,090 --> 00:03:10,350
background that our open source product

00:03:08,100 --> 00:03:12,900
so other means that they are all with

00:03:10,350 --> 00:03:15,060
Apache 2 license so you can put them

00:03:12,900 --> 00:03:16,440
into your software without well doing

00:03:15,060 --> 00:03:19,860
open source itself so you can actually

00:03:16,440 --> 00:03:21,390
sell actually inside your software but

00:03:19,860 --> 00:03:23,970
please don't do that

00:03:21,390 --> 00:03:25,860
okay so we have h2o what the open source

00:03:23,970 --> 00:03:27,959
platform that we've been like a mature

00:03:25,860 --> 00:03:29,910
state and stable platform that we've

00:03:27,959 --> 00:03:32,130
been working on for years and then we

00:03:29,910 --> 00:03:33,810
integrate it with spark so we have the

00:03:32,130 --> 00:03:36,690
sparkling water a platform like products

00:03:33,810 --> 00:03:39,030
to have machining ability on spark

00:03:36,690 --> 00:03:41,310
customers and nicely we trying to move

00:03:39,030 --> 00:03:44,910
to try to port our algorithm from CPU

00:03:41,310 --> 00:03:47,820
from h2o core CPU based to GPU based

00:03:44,910 --> 00:03:50,510
that's what we're trying to use the GPU

00:03:47,820 --> 00:03:53,760
and IBM power so we just actual for GPU

00:03:50,510 --> 00:03:55,650
package on github so they are open

00:03:53,760 --> 00:03:56,880
source but what we learned from a

00:03:55,650 --> 00:03:58,890
customer feedback what we learned from

00:03:56,880 --> 00:04:00,480
all the years of working with customers

00:03:58,890 --> 00:04:02,579
is that we want create a few more

00:04:00,480 --> 00:04:03,450
functionality including automatic

00:04:02,579 --> 00:04:06,540
feature engineering

00:04:03,450 --> 00:04:07,709
auto report explanation of the model

00:04:06,540 --> 00:04:10,360
without an audience

00:04:07,709 --> 00:04:12,190
so we package all these things into the

00:04:10,360 --> 00:04:17,109
so further on the right is that is

00:04:12,190 --> 00:04:21,430
Travis AI so why do we want to equate

00:04:17,109 --> 00:04:22,840
this software for them for users so this

00:04:21,430 --> 00:04:25,540
is one of the reason why we want to do

00:04:22,840 --> 00:04:27,520
it on this is a simple diagram to show

00:04:25,540 --> 00:04:30,040
you to work for like a typical workflow

00:04:27,520 --> 00:04:32,590
for enterprise and machine learning no

00:04:30,040 --> 00:04:34,450
not no no no every single detail step is

00:04:32,590 --> 00:04:36,490
in this diagram but you can no kind of

00:04:34,450 --> 00:04:38,170
understand now you start from data

00:04:36,490 --> 00:04:40,060
indications so you have different data

00:04:38,170 --> 00:04:41,830
source there with different tables of

00:04:40,060 --> 00:04:43,870
different pages you want to increase

00:04:41,830 --> 00:04:45,850
with them to make the first table to

00:04:43,870 --> 00:04:47,950
create a first table for machine

00:04:45,850 --> 00:04:50,680
learning which you have features and a

00:04:47,950 --> 00:04:52,660
target then you have other things to do

00:04:50,680 --> 00:04:54,400
so you have to check the quality of data

00:04:52,660 --> 00:04:55,750
you have to transform some of the

00:04:54,400 --> 00:04:58,630
features or sometimes some of the

00:04:55,750 --> 00:05:01,060
numbers in or other kakaako values in

00:04:58,630 --> 00:05:02,260
the data you want to create some more

00:05:01,060 --> 00:05:04,480
features you want to do some feature

00:05:02,260 --> 00:05:06,550
engineering and then you do the modeling

00:05:04,480 --> 00:05:07,870
so you have to tune maybe you have to

00:05:06,550 --> 00:05:10,180
try different algorithms because you

00:05:07,870 --> 00:05:12,040
don't know which one the best for a new

00:05:10,180 --> 00:05:14,650
data set you want to tune it because you

00:05:12,040 --> 00:05:17,110
want to optimize which algorithm for a

00:05:14,650 --> 00:05:18,970
data set that you put in into the system

00:05:17,110 --> 00:05:21,160
then you have the model and you also

00:05:18,970 --> 00:05:23,380
want to export the model to 2d pointman

00:05:21,160 --> 00:05:25,900
right and and after that you also want

00:05:23,380 --> 00:05:27,400
to explain the model and to maybe to a

00:05:25,900 --> 00:05:30,640
customer maybe to your colleague or your

00:05:27,400 --> 00:05:33,880
boss so what we have here this one for a

00:05:30,640 --> 00:05:37,479
Chavez ai is a sim simple software here

00:05:33,880 --> 00:05:39,250
to to automate most of the tasks in the

00:05:37,479 --> 00:05:41,260
second half of the pipeline thereby so

00:05:39,250 --> 00:05:43,780
here so from from upon that you have

00:05:41,260 --> 00:05:45,490
your own table your first table and Joe

00:05:43,780 --> 00:05:49,060
first a I can take care of most of the

00:05:45,490 --> 00:05:53,140
past in the rest of the pipeline so let

00:05:49,060 --> 00:05:54,940
me point you to one one of our h2o holy

00:05:53,140 --> 00:05:57,130
so this is Professor we will allele and

00:05:54,940 --> 00:05:59,080
liu kimsen so he is like The Godfather

00:05:57,130 --> 00:06:01,979
of data analytics and data

00:05:59,080 --> 00:06:04,240
visualizations so he's the author of the

00:06:01,979 --> 00:06:06,580
graphic so it was like a very popular

00:06:04,240 --> 00:06:08,979
book that inspired hadn't welcome in in

00:06:06,580 --> 00:06:12,479
our communities to create a teapot tube

00:06:08,979 --> 00:06:15,550
package so he is now working on these

00:06:12,479 --> 00:06:16,990
automatic associations in h2o so what

00:06:15,550 --> 00:06:19,870
that means is that we don't need the

00:06:16,990 --> 00:06:21,910
users to specify what kind of craft that

00:06:19,870 --> 00:06:23,860
we want to create for the focus of quick

00:06:21,910 --> 00:06:25,840
insight so we just ask them

00:06:23,860 --> 00:06:28,000
fill in the data and then once we have a

00:06:25,840 --> 00:06:30,099
data we will use different algorithms to

00:06:28,000 --> 00:06:31,960
determine to detect the interesting

00:06:30,099 --> 00:06:34,060
patterns in the dataset

00:06:31,960 --> 00:06:36,159
so we don't so everything every possible

00:06:34,060 --> 00:06:37,930
combination of go up to the users

00:06:36,159 --> 00:06:39,930
we only saw an interesting graph so this

00:06:37,930 --> 00:06:43,120
will save to use a time to do some

00:06:39,930 --> 00:06:46,650
exponential or exploratory data analysis

00:06:43,120 --> 00:06:48,879
before they want to do machine learning

00:06:46,650 --> 00:06:50,500
and I want to point out to my other

00:06:48,879 --> 00:06:53,500
colleagues that like the toggle Grand

00:06:50,500 --> 00:06:57,189
Master so two people know about cargo is

00:06:53,500 --> 00:06:58,990
a data mining competitions platform that

00:06:57,189 --> 00:07:01,300
you compete with each other worldwide if

00:06:58,990 --> 00:07:02,979
you were to to tackle really difficult

00:07:01,300 --> 00:07:07,840
material problems so we have some of the

00:07:02,979 --> 00:07:09,879
best in the world working at hto so this

00:07:07,840 --> 00:07:11,199
is me here I'm trying to catch up with

00:07:09,879 --> 00:07:13,180
them and a half time where but I'm not

00:07:11,199 --> 00:07:15,789
as good as them but we have the very

00:07:13,180 --> 00:07:18,159
best in the world to work on this

00:07:15,789 --> 00:07:20,500
platform so what I do is to translate

00:07:18,159 --> 00:07:22,900
all our knowledge in antenna science in

00:07:20,500 --> 00:07:26,199
a machine learning into some avocado

00:07:22,900 --> 00:07:27,909
recipes in future engineering so we try

00:07:26,199 --> 00:07:29,440
to create some new features based on the

00:07:27,909 --> 00:07:31,539
war features so for example you can have

00:07:29,440 --> 00:07:33,940
interactions between two features could

00:07:31,539 --> 00:07:36,250
be the feature a buzz feature P and now

00:07:33,940 --> 00:07:38,259
we could have other more fancy more more

00:07:36,250 --> 00:07:40,839
hardcore feature engineering tricks that

00:07:38,259 --> 00:07:43,000
we use only in cargo but sometimes it

00:07:40,839 --> 00:07:44,680
says it's a laborious task to test

00:07:43,000 --> 00:07:47,020
different feature and new tricks one by

00:07:44,680 --> 00:07:49,900
one so what run do is to automate all

00:07:47,020 --> 00:07:52,000
this testing for the users using GPU to

00:07:49,900 --> 00:07:53,229
accelerate the process for the users so

00:07:52,000 --> 00:07:56,110
they don't have to try this

00:07:53,229 --> 00:07:57,370
no distract manually no and try to

00:07:56,110 --> 00:08:02,919
rewrite the code every time they need to

00:07:57,370 --> 00:08:08,139
attack of a new dataset and then also we

00:08:02,919 --> 00:08:10,960
try to emot-- tuning and stacking of the

00:08:08,139 --> 00:08:12,310
model so we try to figure out when you

00:08:10,960 --> 00:08:14,349
have a new data set when you have all

00:08:12,310 --> 00:08:16,839
new features how will you build modeled

00:08:14,349 --> 00:08:19,479
to get the best performance from the

00:08:16,839 --> 00:08:21,460
data set so this is all based on years

00:08:19,479 --> 00:08:23,710
of years of experience from the from

00:08:21,460 --> 00:08:27,039
different competitions and the data

00:08:23,710 --> 00:08:28,960
science project in the past and we

00:08:27,039 --> 00:08:30,789
talked so some people were asked what

00:08:28,960 --> 00:08:32,740
kind of algorithm we have so we have to

00:08:30,789 --> 00:08:34,539
maybe even call the old school or

00:08:32,740 --> 00:08:37,190
traditional algorithm not tree based

00:08:34,539 --> 00:08:39,139
algorithm like XP boost

00:08:37,190 --> 00:08:42,169
Grayden booty machines when I'm forwards

00:08:39,139 --> 00:08:45,079
and etc and we also have to buy the new

00:08:42,169 --> 00:08:48,050
stuff so we use 10 suppor in at back-end

00:08:45,079 --> 00:08:50,329
to to provide deep learning capabilities

00:08:48,050 --> 00:08:52,790
in Java say I so we combine both so we

00:08:50,329 --> 00:08:58,399
can do both in Java say I depending on

00:08:52,790 --> 00:09:00,439
the problems that we have to solve so

00:08:58,399 --> 00:09:03,199
the next question that we want to ask is

00:09:00,439 --> 00:09:06,319
how will this do in the locker anyway

00:09:03,199 --> 00:09:08,029
well settings so we try to use a cago

00:09:06,319 --> 00:09:10,009
again as a benchmark so this is also

00:09:08,029 --> 00:09:10,939
will be the lifetime of that I will show

00:09:10,009 --> 00:09:12,829
you in in a minute

00:09:10,939 --> 00:09:16,160
so we use some of the communications in

00:09:12,829 --> 00:09:18,800
the past to try to use auto Travis AI to

00:09:16,160 --> 00:09:20,720
create illusions automatically in two

00:09:18,800 --> 00:09:22,610
hours and shall compare the work with

00:09:20,720 --> 00:09:24,589
know some of the best team in the past

00:09:22,610 --> 00:09:27,050
which table to spend two or three

00:09:24,589 --> 00:09:29,480
moments onto our own one single problems

00:09:27,050 --> 00:09:31,910
so we say that we can achieve sometimes

00:09:29,480 --> 00:09:34,279
similar performance in two hours

00:09:31,910 --> 00:09:36,980
comparing with the work dedicated that

00:09:34,279 --> 00:09:39,589
the people did know for months in the

00:09:36,980 --> 00:09:42,139
past so this is a good sign that way we

00:09:39,589 --> 00:09:43,880
can use this for business because when

00:09:42,139 --> 00:09:45,500
you have new rates that come in you

00:09:43,880 --> 00:09:47,740
don't want to spend months to get to

00:09:45,500 --> 00:09:51,079
good answers so now you can do it in

00:09:47,740 --> 00:09:55,880
hours or even minutes depending on the

00:09:51,079 --> 00:09:57,350
problem size and we also have with

00:09:55,880 --> 00:09:59,060
that's not the end so we also want to

00:09:57,350 --> 00:10:00,949
provide some kind of explanation to the

00:09:59,060 --> 00:10:02,959
users so for example if you have a

00:10:00,949 --> 00:10:05,000
machine learning model from javis AI

00:10:02,959 --> 00:10:08,089
sometimes is hard to explain the

00:10:05,000 --> 00:10:10,610
complexity or the bakbox model 2 to the

00:10:08,089 --> 00:10:13,100
Nu to little to the result to do am 3

00:10:10,610 --> 00:10:14,899
customers so maybe for gtp ow you may

00:10:13,100 --> 00:10:16,579
want to explain your model so this is

00:10:14,899 --> 00:10:18,170
some functionality that you can use it

00:10:16,579 --> 00:10:21,410
to explain your model but it's not the

00:10:18,170 --> 00:10:23,149
focus of the talk but you can find out

00:10:21,410 --> 00:10:25,490
more information later on from some

00:10:23,149 --> 00:10:28,160
video links in the presentations after

00:10:25,490 --> 00:10:30,319
the talk but I want to focus on this

00:10:28,160 --> 00:10:32,990
today because I want to show you how you

00:10:30,319 --> 00:10:34,579
can create this pipeline from doing a

00:10:32,990 --> 00:10:36,290
simple experiments using Java say I

00:10:34,579 --> 00:10:38,089
switch from training the model from

00:10:36,290 --> 00:10:40,129
doing feature engineering from doing

00:10:38,089 --> 00:10:42,290
different mode tuning and stacking so

00:10:40,129 --> 00:10:44,629
once you have the final model how do you

00:10:42,290 --> 00:10:46,490
put it into a pipeline that you can give

00:10:44,629 --> 00:10:48,980
it to the tank stream to give it to the

00:10:46,490 --> 00:10:49,800
deployment team to embed into different

00:10:48,980 --> 00:10:51,600
application

00:10:49,800 --> 00:10:54,180
that's the focus of this talk so how we

00:10:51,600 --> 00:10:56,370
can automate this and quickly so why

00:10:54,180 --> 00:10:59,610
because if you think about different

00:10:56,370 --> 00:11:01,380
step here in in reality they may move

00:10:59,610 --> 00:11:02,790
different teams so there may be a team

00:11:01,380 --> 00:11:04,800
looking at the player quality the

00:11:02,790 --> 00:11:06,330
transformations there be another team

00:11:04,800 --> 00:11:09,090
looking at the picture engineering and

00:11:06,330 --> 00:11:11,100
then added him on modeling and stuff so

00:11:09,090 --> 00:11:13,170
from from one team to the other there

00:11:11,100 --> 00:11:15,990
may be some frictions or some kind of

00:11:13,170 --> 00:11:17,760
other no incumbent patty of the coke so

00:11:15,990 --> 00:11:20,040
maybe some people using Java some people

00:11:17,760 --> 00:11:22,620
using Python community out so that is

00:11:20,040 --> 00:11:24,270
something that we have to avoid in these

00:11:22,620 --> 00:11:26,460
situations you have to try to automated

00:11:24,270 --> 00:11:28,380
pipeline seamlessly so when they have

00:11:26,460 --> 00:11:30,000
the data in we have the model out and

00:11:28,380 --> 00:11:32,040
then we have a pipeline as well to to

00:11:30,000 --> 00:11:34,770
come with that model so that will now

00:11:32,040 --> 00:11:36,060
again beneficial to the organization's

00:11:34,770 --> 00:11:38,550
because you don't spend that much time

00:11:36,060 --> 00:11:41,750
to deal with the frictions between

00:11:38,550 --> 00:11:44,610
different teams is that okay so far all

00:11:41,750 --> 00:11:47,490
right so next thing I want to do is a

00:11:44,610 --> 00:11:49,290
quick live demo so this is again based

00:11:47,490 --> 00:11:52,740
on the the bench man I show you earlier

00:11:49,290 --> 00:11:54,510
is from a bank or PNP based on one of

00:11:52,740 --> 00:11:57,960
the problem they have is about the

00:11:54,510 --> 00:12:00,060
claims a claims management um in in in

00:11:57,960 --> 00:12:01,650
the bank so what we want to do is a

00:12:00,060 --> 00:12:03,630
Panama classification so they have

00:12:01,650 --> 00:12:04,950
different customers coming in they have

00:12:03,630 --> 00:12:07,260
different claims of maybe other

00:12:04,950 --> 00:12:09,480
insurance or herself so we want to pick

00:12:07,260 --> 00:12:11,550
a separate them into two different types

00:12:09,480 --> 00:12:13,980
so the first type is some claims that no

00:12:11,550 --> 00:12:16,500
looks okay look did you an edge image so

00:12:13,980 --> 00:12:19,320
this should be approved quickly without

00:12:16,500 --> 00:12:21,690
further interaction from the human and

00:12:19,320 --> 00:12:24,300
the second type is that they date this

00:12:21,690 --> 00:12:25,680
kind may not a bit cytology or maybe

00:12:24,300 --> 00:12:28,560
like they know they require a bit more

00:12:25,680 --> 00:12:30,570
attentions from the expert human users

00:12:28,560 --> 00:12:32,730
so this we want to separate them into

00:12:30,570 --> 00:12:34,950
two types of claims based on different

00:12:32,730 --> 00:12:36,780
features like this so this is a this is

00:12:34,950 --> 00:12:38,310
like the first few features that you can

00:12:36,780 --> 00:12:40,410
see so we have a target which is either

00:12:38,310 --> 00:12:43,620
1 or 0 it's a binary classification oh

00:12:40,410 --> 00:12:47,250
sorry is keep going bad to know why and

00:12:43,620 --> 00:12:49,140
then we have about 141 features on the

00:12:47,250 --> 00:12:50,910
right hand side so they could be an

00:12:49,140 --> 00:12:53,040
America they could be missing they could

00:12:50,910 --> 00:12:57,170
be like a categorical IC or a something

00:12:53,040 --> 00:13:01,190
like that so the the data size is about

00:12:57,170 --> 00:13:02,970
114 thousand samples and about 141

00:13:01,190 --> 00:13:08,040
features and

00:13:02,970 --> 00:13:09,810
so it's the medium-sized data so what

00:13:08,040 --> 00:13:12,060
I'm going to do next is to show you the

00:13:09,810 --> 00:13:14,490
actual demo and how to use say from data

00:13:12,060 --> 00:13:17,430
that I got from from this cargo

00:13:14,490 --> 00:13:19,529
munitions put it into Java see I won the

00:13:17,430 --> 00:13:22,790
model and I get the result and charity

00:13:19,529 --> 00:13:25,259
pour it and in a simple way

00:13:22,790 --> 00:13:33,689
okay let me just cancel this and go back

00:13:25,259 --> 00:13:40,730
to my browser okay sorry is there a

00:13:33,689 --> 00:13:42,180
question okay okay that's full screen

00:13:40,730 --> 00:13:45,779
can you see it

00:13:42,180 --> 00:13:50,779
oh is it too right okay is it possible

00:13:45,779 --> 00:13:50,779
to turn down a bit of a night thank you

00:13:59,890 --> 00:14:06,399
okay perfect say okay for everything now

00:14:03,640 --> 00:14:08,589
yeah you can see it now so so first you

00:14:06,399 --> 00:14:10,899
can see this I already imported the data

00:14:08,589 --> 00:14:13,690
so again this is a simple demo so they

00:14:10,899 --> 00:14:16,630
have only to CSV but you can access from

00:14:13,690 --> 00:14:18,160
different source you can use anything on

00:14:16,630 --> 00:14:20,170
local system you can upload the file oh

00:14:18,160 --> 00:14:22,209
you can use a tube you can use sv and

00:14:20,170 --> 00:14:23,920
then later on your spark as well so this

00:14:22,209 --> 00:14:26,490
is quite different ways to import a data

00:14:23,920 --> 00:14:29,440
set but I'm not going to show it today

00:14:26,490 --> 00:14:31,300
so this is lab based on a simple CSV so

00:14:29,440 --> 00:14:33,790
we have two so the first one is for

00:14:31,300 --> 00:14:35,800
training your model and then the second

00:14:33,790 --> 00:14:37,240
one is for testing so some new data set

00:14:35,800 --> 00:14:39,070
that we you don't have the answer but we

00:14:37,240 --> 00:14:41,860
wanted to use the features to get some

00:14:39,070 --> 00:14:44,050
protections okay so what do we do as a

00:14:41,860 --> 00:14:45,730
data scientist when you have a new data

00:14:44,050 --> 00:14:48,700
set you want to have a look first you

00:14:45,730 --> 00:14:50,620
want to do i po do some i bowing before

00:14:48,700 --> 00:14:52,209
you do the machine learning models so we

00:14:50,620 --> 00:14:55,209
have few options here the first one is a

00:14:52,209 --> 00:14:57,010
simple Instagram that just so used some

00:14:55,209 --> 00:14:58,779
of the Year statistics or different

00:14:57,010 --> 00:15:01,779
features you can see target is like a 0

00:14:58,779 --> 00:15:03,579
or 1 there are less there fewer 0 10 one

00:15:01,779 --> 00:15:05,649
so that's these are the one that I feel

00:15:03,579 --> 00:15:07,570
that the ones that became they require

00:15:05,649 --> 00:15:09,880
more attentions by the human and those

00:15:07,570 --> 00:15:13,029
the one is the one that are okay to just

00:15:09,880 --> 00:15:14,740
be approved quickly and then you can

00:15:13,029 --> 00:15:16,240
also see the other feature so with some

00:15:14,740 --> 00:15:18,339
of them they are numeric oh you can see

00:15:16,240 --> 00:15:21,130
histogram somewhat MDI categorical

00:15:18,339 --> 00:15:23,440
against the other is a C or non so that

00:15:21,130 --> 00:15:26,110
different kind of features in this that

00:15:23,440 --> 00:15:28,060
they can just go through quickly so

00:15:26,110 --> 00:15:30,100
nothing too fancy Y here I just give you

00:15:28,060 --> 00:15:33,699
a quick summary a handy function to show

00:15:30,100 --> 00:15:35,560
you some interesting statistics so next

00:15:33,699 --> 00:15:38,380
one is that one form of a sudden

00:15:35,560 --> 00:15:41,170
Wilkinson smart or automatic

00:15:38,380 --> 00:15:43,329
visualizations so if I choose that so

00:15:41,170 --> 00:15:44,589
this is idea the way that we try to use

00:15:43,329 --> 00:15:47,350
different algorithm to detect

00:15:44,589 --> 00:15:48,399
interesting patterns in the data set so

00:15:47,350 --> 00:15:50,380
we're not going to show you all

00:15:48,399 --> 00:15:52,600
different combinations that we can we

00:15:50,380 --> 00:15:54,339
can create from what data set we just

00:15:52,600 --> 00:15:57,220
want to highlight the most interesting

00:15:54,339 --> 00:15:59,350
one so for example we sometimes I would

00:15:57,220 --> 00:16:02,170
just look at the outliers and see

00:15:59,350 --> 00:16:05,320
whether there's some like some others I

00:16:02,170 --> 00:16:07,089
may want to remove them before before I

00:16:05,320 --> 00:16:08,800
create at the machine learning model

00:16:07,089 --> 00:16:11,020
so we can go for different features in a

00:16:08,800 --> 00:16:13,699
few different areas so if you are

00:16:11,020 --> 00:16:16,040
interested in going into still ok dude

00:16:13,699 --> 00:16:19,069
to record you can just go to the hide

00:16:16,040 --> 00:16:20,540
and orange spawn click on it and it will

00:16:19,069 --> 00:16:22,730
bring you to the actual record so we

00:16:20,540 --> 00:16:26,089
have say free samples in here that we

00:16:22,730 --> 00:16:28,429
use we work we think they could be Elias

00:16:26,089 --> 00:16:32,029
so the user can make the decision on how

00:16:28,429 --> 00:16:33,379
they want to deal with this allies and

00:16:32,029 --> 00:16:36,379
also if you want to find out more you

00:16:33,379 --> 00:16:38,779
can also click on help and then you

00:16:36,379 --> 00:16:41,359
bring it to the actual reference to the

00:16:38,779 --> 00:16:43,939
to the album that you so this is again a

00:16:41,359 --> 00:16:46,730
paper written by Professor Wiggins and

00:16:43,939 --> 00:16:48,559
slack in 1999 so he wrote a lot of

00:16:46,730 --> 00:16:51,350
different papers on different which were

00:16:48,559 --> 00:16:53,600
stations trick to do to help users find

00:16:51,350 --> 00:16:56,779
out the most interesting patterns in the

00:16:53,600 --> 00:16:58,999
data so that is the function here that

00:16:56,779 --> 00:17:02,869
allows people to get some quick insight

00:16:58,999 --> 00:17:05,120
without doing the pot themself okay so

00:17:02,869 --> 00:17:07,069
that's at the at this spawn we're happy

00:17:05,120 --> 00:17:08,929
with the inside the first inside then

00:17:07,069 --> 00:17:10,850
now we are trying to build the actual

00:17:08,929 --> 00:17:13,519
model so I'm going back to the actual

00:17:10,850 --> 00:17:18,319
data and then next time are going to

00:17:13,519 --> 00:17:19,699
choose the last often predict so if it

00:17:18,319 --> 00:17:21,559
is the first time that you use this

00:17:19,699 --> 00:17:23,779
software they will ask you whether you

00:17:21,559 --> 00:17:26,539
would like a tour but you tell you have

00:17:23,779 --> 00:17:27,519
me so I will do it for you today it's

00:17:26,539 --> 00:17:31,639
not now

00:17:27,519 --> 00:17:33,409
so this surface is only used for

00:17:31,639 --> 00:17:35,659
supervised learning so we need to supply

00:17:33,409 --> 00:17:37,850
and the first thing is the target of

00:17:35,659 --> 00:17:41,389
what you want to protect in this problem

00:17:37,850 --> 00:17:43,639
so we can choose the t column so again

00:17:41,389 --> 00:17:46,340
this is name no commissioning a target

00:17:43,639 --> 00:17:48,049
so we choose that so figure out some

00:17:46,340 --> 00:17:49,730
other information so we know that is

00:17:48,049 --> 00:17:51,980
that you need that there are two unique

00:17:49,730 --> 00:17:54,440
values so it's a panel e classifications

00:17:51,980 --> 00:17:57,769
so we automatically show you the the

00:17:54,440 --> 00:18:01,760
actual feasible metrics to measure the

00:17:57,769 --> 00:18:03,740
performance so if you have a test s at a

00:18:01,760 --> 00:18:06,380
lot of portago so you can also supply

00:18:03,740 --> 00:18:08,210
that this is not used for creating the

00:18:06,380 --> 00:18:09,830
model this is only used for making some

00:18:08,210 --> 00:18:11,960
projections at the end but you can also

00:18:09,830 --> 00:18:14,690
do that after this experiment so we

00:18:11,960 --> 00:18:17,809
don't have to supply it right now and I

00:18:14,690 --> 00:18:19,700
want to bring you to the free numbers

00:18:17,809 --> 00:18:21,470
here so I could be able to go through

00:18:19,700 --> 00:18:23,840
some details but say saying that we're

00:18:21,470 --> 00:18:27,150
trying to simplify some of the thinking

00:18:23,840 --> 00:18:28,290
of machine learning into feed numbers so

00:18:27,150 --> 00:18:30,300
the first two are quite easy to

00:18:28,290 --> 00:18:31,830
understand so how a quiz that you won't

00:18:30,300 --> 00:18:33,870
need to be so for example you turn to

00:18:31,830 --> 00:18:36,540
one then you have a simple model but

00:18:33,870 --> 00:18:38,730
then they may not be equity enough for

00:18:36,540 --> 00:18:41,160
view but you get some quick like a quic

00:18:38,730 --> 00:18:43,320
model for to have some feeling of the

00:18:41,160 --> 00:18:45,330
eyes that before you do the roofing so

00:18:43,320 --> 00:18:48,090
this is like again if you turn to the

00:18:45,330 --> 00:18:50,490
other way do ten then we try to use all

00:18:48,090 --> 00:18:52,770
the compacts order taco tricks all the

00:18:50,490 --> 00:18:55,559
things that we wait to squeeze the best

00:18:52,770 --> 00:18:57,450
above the data from from different

00:18:55,559 --> 00:19:00,870
tricks but that's a trade-off between

00:18:57,450 --> 00:19:03,540
this equities and a time that we need to

00:19:00,870 --> 00:19:06,179
spend on the experiments so a simple

00:19:03,540 --> 00:19:08,790
trade-off between accuracy and time here

00:19:06,179 --> 00:19:10,830
for the user to consider the next one

00:19:08,790 --> 00:19:12,360
again is again easy to in us understand

00:19:10,830 --> 00:19:13,890
is the time so how many it's a question

00:19:12,360 --> 00:19:16,260
that you want to one so for example

00:19:13,890 --> 00:19:18,360
today I won't do a quick live demo so I

00:19:16,260 --> 00:19:20,550
just use one which just cuckoo for few

00:19:18,360 --> 00:19:21,900
iterations and then stop and of course

00:19:20,550 --> 00:19:23,910
in the real way if you have enough time

00:19:21,900 --> 00:19:26,280
in the world and you can spend a few

00:19:23,910 --> 00:19:28,530
hours or more so we can put it to ten

00:19:26,280 --> 00:19:30,600
then we just try to do do as many as

00:19:28,530 --> 00:19:32,940
possible until there's there's no

00:19:30,600 --> 00:19:36,150
improvement in the search time we just

00:19:32,940 --> 00:19:38,460
do a stopping so let's do one today just

00:19:36,150 --> 00:19:41,309
for quick demo and trying to find and

00:19:38,460 --> 00:19:43,050
the last thing is how about the

00:19:41,309 --> 00:19:44,309
complexity of the model so for example

00:19:43,050 --> 00:19:47,010
if you want to interpret the model

00:19:44,309 --> 00:19:48,600
better say I want to go to ten that

00:19:47,010 --> 00:19:51,090
means that we try to force the

00:19:48,600 --> 00:19:54,570
experiment to use some simple like near

00:19:51,090 --> 00:19:56,670
linear model to work on the problems so

00:19:54,570 --> 00:19:58,800
that in that case the accuracy may not

00:19:56,670 --> 00:20:01,320
be the best but it's easier to explain

00:19:58,800 --> 00:20:02,880
no afterwards so it's maybe it is useful

00:20:01,320 --> 00:20:05,070
for insurance for paying for other

00:20:02,880 --> 00:20:07,710
sector that they they concern more about

00:20:05,070 --> 00:20:10,200
the expandability than the the actual

00:20:07,710 --> 00:20:12,540
accuracy on the other hand of course if

00:20:10,200 --> 00:20:14,040
you don't care about that explanation

00:20:12,540 --> 00:20:15,510
you want to just want to squeeze the

00:20:14,040 --> 00:20:17,820
best I could say that you can try it

00:20:15,510 --> 00:20:20,910
back to five etc so you can find on both

00:20:17,820 --> 00:20:21,929
settings in in a documentation site also

00:20:20,910 --> 00:20:25,830
you it on

00:20:21,929 --> 00:20:28,140
so thanks 100 show is the expert setting

00:20:25,830 --> 00:20:29,700
here this is like we have more control

00:20:28,140 --> 00:20:31,050
of the different things so for example

00:20:29,700 --> 00:20:33,570
you can choose different algorithm that

00:20:31,050 --> 00:20:34,140
we use in this experiment you can hang

00:20:33,570 --> 00:20:36,540
on

00:20:34,140 --> 00:20:40,620
tensa for on and off you can turn on a

00:20:36,540 --> 00:20:42,120
GBM etc so do we try to give it

00:20:40,620 --> 00:20:44,010
make it easier for users to choose

00:20:42,120 --> 00:20:45,840
different kind of algorithm in the

00:20:44,010 --> 00:20:48,270
descent so that they can have more

00:20:45,840 --> 00:20:50,970
control of the echo from that they want

00:20:48,270 --> 00:20:52,559
to use but of course you don't if you

00:20:50,970 --> 00:20:54,300
don't want to look at nucleus this will

00:20:52,559 --> 00:20:56,490
be automatics so we will choose the best

00:20:54,300 --> 00:21:00,090
for the users and automatically in the

00:20:56,490 --> 00:21:01,890
backend ok so that is I like some of

00:21:00,090 --> 00:21:03,990
them to keep function I want to show you

00:21:01,890 --> 00:21:05,400
in this interface so when I click on

00:21:03,990 --> 00:21:08,070
this button here when I launch this

00:21:05,400 --> 00:21:12,660
experiment it will start working on it

00:21:08,070 --> 00:21:14,580
on GPU so let's keep it happy time to

00:21:12,660 --> 00:21:16,710
warm up so you can see that quite a few

00:21:14,580 --> 00:21:18,870
things happening at the same time so let

00:21:16,710 --> 00:21:21,840
me just try to explain it to you one by

00:21:18,870 --> 00:21:24,210
one so you can see on the first thing

00:21:21,840 --> 00:21:27,030
that you notice is a notification saying

00:21:24,210 --> 00:21:28,830
that okay there's a column called ID so

00:21:27,030 --> 00:21:31,320
usually this ID column is not meaningful

00:21:28,830 --> 00:21:34,440
for predictions because they just ID

00:21:31,320 --> 00:21:36,270
like a random numbers associated to the

00:21:34,440 --> 00:21:39,330
record they have nothing to do with the

00:21:36,270 --> 00:21:41,700
target itself so know try to avoid some

00:21:39,330 --> 00:21:43,290
human or newbie errors we try to remove

00:21:41,700 --> 00:21:45,570
that for for users if we detect

00:21:43,290 --> 00:21:48,920
something like this so that's one of the

00:21:45,570 --> 00:21:51,000
things that we try to avoid human errors

00:21:48,920 --> 00:21:53,040
and then you can see in the stock

00:21:51,000 --> 00:21:55,200
working on some GPU so we have a cube

00:21:53,040 --> 00:21:59,420
used on these machines for my workplace

00:21:55,200 --> 00:22:02,760
so we're trying to use different

00:21:59,420 --> 00:22:05,820
resource on the machine so CPU memory

00:22:02,760 --> 00:22:08,370
and GPU which are using efficiency to

00:22:05,820 --> 00:22:11,370
work on the problem on digit of

00:22:08,370 --> 00:22:12,720
fashion's because we try to do is to try

00:22:11,370 --> 00:22:14,280
different things try different settings

00:22:12,720 --> 00:22:17,490
try different feature engineering tricks

00:22:14,280 --> 00:22:20,130
and try to use a model to evaluate the

00:22:17,490 --> 00:22:21,780
performance of different tricks so at

00:22:20,130 --> 00:22:24,390
some point you will see on the on a

00:22:21,780 --> 00:22:26,760
graph here you see the the evaluations

00:22:24,390 --> 00:22:28,710
of matrix over here is so you can see

00:22:26,760 --> 00:22:32,070
that first of all you can see em let me

00:22:28,710 --> 00:22:33,600
go here so we try to use lot loss here

00:22:32,070 --> 00:22:37,500
in this case to measure the performance

00:22:33,600 --> 00:22:40,530
of different ranging tricks so this case

00:22:37,500 --> 00:22:42,660
lower is better so we try to to make it

00:22:40,530 --> 00:22:44,940
lower and know where every time so the

00:22:42,660 --> 00:22:46,980
the first iteration here is even and

00:22:44,940 --> 00:22:50,130
still here what we try to do is try for

00:22:46,980 --> 00:22:51,780
random Moyo so for Windham fix for

00:22:50,130 --> 00:22:53,700
Windham feature engineering set but

00:22:51,780 --> 00:22:54,590
because we don't know which one are the

00:22:53,700 --> 00:22:56,720
best

00:22:54,590 --> 00:22:59,120
which ones are the the best settings for

00:22:56,720 --> 00:23:02,150
for this new desert so we try to use

00:22:59,120 --> 00:23:05,480
genetic algorithm in approach to to

00:23:02,150 --> 00:23:07,159
optimize the feature space from time to

00:23:05,480 --> 00:23:08,960
time so let's say we have four models

00:23:07,159 --> 00:23:11,480
here each of them they have slightly

00:23:08,960 --> 00:23:13,220
different feature engine tricks so when

00:23:11,480 --> 00:23:14,510
trying to look at this this is the best

00:23:13,220 --> 00:23:16,640
model coming out from the first

00:23:14,510 --> 00:23:18,470
iterations so what I try to do is to use

00:23:16,640 --> 00:23:20,779
this information from here so this is

00:23:18,470 --> 00:23:23,090
the best model here the best speech

00:23:20,779 --> 00:23:25,010
rendering set here we try to evolve that

00:23:23,090 --> 00:23:26,480
within the algorithm to the next

00:23:25,010 --> 00:23:28,190
iteration so at some point you would see

00:23:26,480 --> 00:23:29,870
that in the next iterations we try to

00:23:28,190 --> 00:23:32,210
evolve from the the best point from a

00:23:29,870 --> 00:23:36,740
previous one and try to get better at

00:23:32,210 --> 00:23:46,779
the LED and the next iterations is that

00:23:36,740 --> 00:23:46,779
ok so far ok ok you see a question

00:23:48,230 --> 00:23:55,309
oh wait thank you yeah so I wanted to

00:23:52,970 --> 00:23:57,110
mention that this is a fancy interface

00:23:55,309 --> 00:23:59,029
that you can use on the web but that's a

00:23:57,110 --> 00:24:01,490
Python back-end so if you want to do it

00:23:59,029 --> 00:24:03,919
in or in a script in Python script in

00:24:01,490 --> 00:24:05,630
Jupiter and all other IDE you can do it

00:24:03,919 --> 00:24:07,130
the hoping in in that scripting language

00:24:05,630 --> 00:24:09,019
so you don't have to click and think

00:24:07,130 --> 00:24:11,330
thing about how to do click everything

00:24:09,019 --> 00:24:13,669
in order to automate your process you

00:24:11,330 --> 00:24:15,799
can do Python as well okay so the next

00:24:13,669 --> 00:24:17,779
again now you can see that well now we

00:24:15,799 --> 00:24:19,940
have the second iteration interjection 1

00:24:17,779 --> 00:24:23,090
so we try to evolve from the previous

00:24:19,940 --> 00:24:25,639
past to 2 here so this is now the best

00:24:23,090 --> 00:24:27,289
of the second iteration situation 1 and

00:24:25,639 --> 00:24:31,039
then you can also see that when I change

00:24:27,289 --> 00:24:33,200
from here to here that feature

00:24:31,039 --> 00:24:34,929
importance change that's because now we

00:24:33,200 --> 00:24:36,919
are looking at a different set of

00:24:34,929 --> 00:24:39,200
feature transformation or feature

00:24:36,919 --> 00:24:40,850
engineering tricks page on a kind of

00:24:39,200 --> 00:24:43,730
Grandmaster knowledge so this is like

00:24:40,850 --> 00:24:46,039
the chart we put the cargo-master

00:24:43,730 --> 00:24:48,380
into the box into the machines and asked

00:24:46,039 --> 00:24:50,809
them to look at this let's add no

00:24:48,380 --> 00:24:52,429
repeatedly using different tricks to try

00:24:50,809 --> 00:24:54,980
to do this to squeeze the best of this

00:24:52,429 --> 00:24:57,409
data and this has something like we try

00:24:54,980 --> 00:24:59,960
to do to feature engineering on

00:24:57,409 --> 00:25:01,850
different features so later on I'll show

00:24:59,960 --> 00:25:04,880
you the report to tell you you saw or a

00:25:01,850 --> 00:25:07,130
step that will be we have to transform

00:25:04,880 --> 00:25:09,679
features from more features to the new

00:25:07,130 --> 00:25:13,730
features so these are most of the tricks

00:25:09,679 --> 00:25:16,490
that maybe we don't normally use to test

00:25:13,730 --> 00:25:18,500
to theta like a manual in in many

00:25:16,490 --> 00:25:20,539
professions but if you can do it with

00:25:18,500 --> 00:25:23,600
GPU reservations and in an automatic

00:25:20,539 --> 00:25:25,909
wait in a software then is it that the

00:25:23,600 --> 00:25:28,279
the most efficient ways to squeeze the

00:25:25,909 --> 00:25:31,100
best out of the data in a short time

00:25:28,279 --> 00:25:33,440
because if you have to do this in like

00:25:31,100 --> 00:25:36,080
in manufacturing you may have to spend

00:25:33,440 --> 00:25:38,690
weeks or maybe months to just do this

00:25:36,080 --> 00:25:39,590
for one day as such it's quaint

00:25:38,690 --> 00:25:43,669
neighborhoods

00:25:39,590 --> 00:25:45,710
process test it and run it again so what

00:25:43,669 --> 00:25:47,840
I need to do now is just wait for it to

00:25:45,710 --> 00:25:50,950
finish but let me show you one that I

00:25:47,840 --> 00:25:54,200
did before so it was already made

00:25:50,950 --> 00:25:56,750
experiments I did before so it should be

00:25:54,200 --> 00:25:58,610
like least fun it's finished so what I

00:25:56,750 --> 00:26:01,320
try to do is like again you can see that

00:25:58,610 --> 00:26:03,779
as the improvement from of

00:26:01,320 --> 00:26:06,210
across time at the end it is tied at the

00:26:03,779 --> 00:26:08,580
final point that we will use this as the

00:26:06,210 --> 00:26:10,679
base of all the feature engine checks so

00:26:08,580 --> 00:26:12,929
we use that to build a final feature set

00:26:10,679 --> 00:26:15,330
and then we'll build an sample using

00:26:12,929 --> 00:26:17,190
that features the new features and what

00:26:15,330 --> 00:26:19,230
we can do after that is that you can do

00:26:17,190 --> 00:26:21,659
a few points so you can let me show you

00:26:19,230 --> 00:26:24,600
quickly you can interpret it tomorrow

00:26:21,659 --> 00:26:26,880
you can make some new predictions on new

00:26:24,600 --> 00:26:28,529
data set you can transform the wall

00:26:26,880 --> 00:26:31,289
features into new features if you want

00:26:28,529 --> 00:26:33,629
to if you want to build models based on

00:26:31,289 --> 00:26:35,730
new features you can do that there also

00:26:33,629 --> 00:26:37,320
and you can do the pipeline so you can

00:26:35,730 --> 00:26:39,149
download the pipeline that which I'll

00:26:37,320 --> 00:26:41,639
show you later on for the actual

00:26:39,149 --> 00:26:43,409
deployment if you want to capture the

00:26:41,639 --> 00:26:46,169
whole thing and put it into a pipeline

00:26:43,409 --> 00:26:48,659
out for productions and you can also

00:26:46,169 --> 00:26:50,179
download some way so let me just let me

00:26:48,659 --> 00:26:57,120
see the time I'm just quickly show you

00:26:50,179 --> 00:26:59,129
what's it like in the appointment so

00:26:57,120 --> 00:27:01,440
let's say I have finished experiments I

00:26:59,129 --> 00:27:11,490
can download the pipeline and if look

00:27:01,440 --> 00:27:13,379
like something like this so just a few

00:27:11,490 --> 00:27:15,240
files come from that zip file so but I

00:27:13,379 --> 00:27:17,820
may be it's clear if I show you this

00:27:15,240 --> 00:27:19,350
okay so all you see here it's just we

00:27:17,820 --> 00:27:22,769
have some files from that zip file so

00:27:19,350 --> 00:27:25,139
yeah at the pipeline so we call the

00:27:22,769 --> 00:27:26,730
module 2 these are the files that it's a

00:27:25,139 --> 00:27:29,700
PI that include both the feature

00:27:26,730 --> 00:27:33,120
engineering and the actual the models

00:27:29,700 --> 00:27:36,450
itself and the scoring mechanisms in one

00:27:33,120 --> 00:27:39,029
single like Y in those files and now we

00:27:36,450 --> 00:27:41,070
also have to supply the feature that the

00:27:39,029 --> 00:27:43,529
license because we had to use of a wild

00:27:41,070 --> 00:27:45,659
license to make this going happen so

00:27:43,529 --> 00:27:48,330
wanted to do is to this time I want to

00:27:45,659 --> 00:27:51,690
score a simple CSV so example CSV is I

00:27:48,330 --> 00:27:54,320
like some ten examples in a set with

00:27:51,690 --> 00:27:56,940
only the features the war features in

00:27:54,320 --> 00:27:59,429
same as the inputs that we used for the

00:27:56,940 --> 00:28:00,990
experiment and how I do now is that you

00:27:59,429 --> 00:28:04,110
can see the command line so we supported

00:28:00,990 --> 00:28:06,269
hoping this time we just taking CSV as

00:28:04,110 --> 00:28:09,029
an input and then put it pin out to the

00:28:06,269 --> 00:28:12,029
screen but you can change that to modify

00:28:09,029 --> 00:28:14,490
that input and output patterns to embed

00:28:12,029 --> 00:28:15,420
this into your software simply for

00:28:14,490 --> 00:28:16,950
different application

00:28:15,420 --> 00:28:18,090
but this is just showing you example

00:28:16,950 --> 00:28:19,920
data you can just capture the whole

00:28:18,090 --> 00:28:21,840
thing to fold for all the feature

00:28:19,920 --> 00:28:24,330
engineering for all scoring pattern into

00:28:21,840 --> 00:28:26,400
that mojo that pipeline and then you can

00:28:24,330 --> 00:28:28,140
just use that to spit out a number so

00:28:26,400 --> 00:28:30,870
these are the outcome from the

00:28:28,140 --> 00:28:32,940
protection so we have the features they

00:28:30,870 --> 00:28:35,190
call the transformation to become new

00:28:32,940 --> 00:28:36,540
pictures and then we use a model to to

00:28:35,190 --> 00:28:39,450
make predictions and these are the

00:28:36,540 --> 00:28:42,420
predictions so it's a pretty in 0

00:28:39,450 --> 00:28:45,650
and 1 and then each of them and a few

00:28:42,420 --> 00:28:49,170
score in real time then the for each

00:28:45,650 --> 00:28:52,200
each row is about 3.1 know milliseconds

00:28:49,170 --> 00:28:54,030
in real time so it's so fast enough to

00:28:52,200 --> 00:28:56,210
be practical it will be used in the real

00:28:54,030 --> 00:28:56,210
world

00:29:00,140 --> 00:29:04,290
yeah I guess one of sodium so this is

00:29:02,730 --> 00:29:06,540
like if you don't want to use the

00:29:04,290 --> 00:29:09,000
interface from the web the web interface

00:29:06,540 --> 00:29:11,760
you can also use Python back-end to to

00:29:09,000 --> 00:29:14,430
interact with that Java say I so maybe

00:29:11,760 --> 00:29:15,660
it's not so clear on the screen but okay

00:29:14,430 --> 00:29:18,570
so then finally I want to quickly

00:29:15,660 --> 00:29:21,780
mention that so why we have this talk

00:29:18,570 --> 00:29:25,350
today because javis AI works on power

00:29:21,780 --> 00:29:28,320
IBM power you can go to our website and

00:29:25,350 --> 00:29:29,910
you can find out how to install Travis

00:29:28,320 --> 00:29:33,180
AI with different package there could be

00:29:29,910 --> 00:29:34,830
a db2 the Debian package to be IBM could

00:29:33,180 --> 00:29:37,200
be a docker image so they're all

00:29:34,830 --> 00:29:40,380
information that you need from this

00:29:37,200 --> 00:29:42,480
website it's a DLC s top H do AI

00:29:40,380 --> 00:29:44,460
so you can follow more from there and

00:29:42,480 --> 00:29:46,590
you can also see other webinar that we

00:29:44,460 --> 00:29:50,040
did in the past to give you a full rivet

00:29:46,590 --> 00:29:52,140
of the software and the other thing that

00:29:50,040 --> 00:29:53,820
I can also send you later on if you're

00:29:52,140 --> 00:29:55,680
interested is the use case that we have

00:29:53,820 --> 00:29:56,340
with PayPal because PayPal they have the

00:29:55,680 --> 00:29:58,950
IBM power

00:29:56,340 --> 00:30:01,680
I'm shin and and Java say I as a

00:29:58,950 --> 00:30:04,650
software to power and their fortune at

00:30:01,680 --> 00:30:09,030
the for detections in a PayPal

00:30:04,650 --> 00:30:11,970
also because we have some figures saying

00:30:09,030 --> 00:30:13,410
that if you use AI on power you can

00:30:11,970 --> 00:30:18,080
actually get better performance than

00:30:13,410 --> 00:30:21,540
your competitor latter company n right

00:30:18,080 --> 00:30:23,910
so it's free to try so everyone can try

00:30:21,540 --> 00:30:25,950
it so you can just go to our website you

00:30:23,910 --> 00:30:28,830
know user email sign up for for free

00:30:25,950 --> 00:30:29,400
license for 21 days so of course if you

00:30:28,830 --> 00:30:32,200
want to

00:30:29,400 --> 00:30:35,590
externalizing Detroit of a bit longer we

00:30:32,200 --> 00:30:37,330
can also do that individually to you but

00:30:35,590 --> 00:30:39,760
this is like you can try for free before

00:30:37,330 --> 00:30:41,920
you know you trust the software and get

00:30:39,760 --> 00:30:42,510
it oh thank you again for having me

00:30:41,920 --> 00:30:48,049
today

00:30:42,510 --> 00:30:48,049

YouTube URL: https://www.youtube.com/watch?v=Euxo4UL8niI


