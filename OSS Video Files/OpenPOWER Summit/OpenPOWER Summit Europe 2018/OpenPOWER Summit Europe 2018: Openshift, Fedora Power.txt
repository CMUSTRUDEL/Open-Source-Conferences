Title: OpenPOWER Summit Europe 2018: Openshift, Fedora Power
Publication date: 2018-11-26
Playlist: OpenPOWER Summit Europe 2018
Description: 
	Jakub Cajka, Red Hat, speaks at OpenPOWER Foundation's OpenPOWER Summit Europe 2018.

For more information, please visit: https://openpowerfoundation.org/summit-2018-10-eu/
Captions: 
	00:00:00,030 --> 00:00:09,300
so hello everybody welcome my name is

00:00:05,940 --> 00:00:12,690
Jakob Chaka I'm a federal project

00:00:09,300 --> 00:00:15,330
contributor I'm a software engineer also

00:00:12,690 --> 00:00:17,190
at Red Hat and working on Fedora and

00:00:15,330 --> 00:00:20,029
multi arch team and today I'll be

00:00:17,190 --> 00:00:22,529
talking about OpenGL federal power a

00:00:20,029 --> 00:00:26,510
little bit of containers this ability of

00:00:22,529 --> 00:00:28,890
go and generally also other other

00:00:26,510 --> 00:00:33,899
architectures than just power but power

00:00:28,890 --> 00:00:37,260
is focus for today we will go about how

00:00:33,899 --> 00:00:39,960
we are how we are working on enabling

00:00:37,260 --> 00:00:42,180
containers and open shipping fedora we

00:00:39,960 --> 00:00:44,640
will cover from the past which is

00:00:42,180 --> 00:00:46,500
roughly three years ago and we will go

00:00:44,640 --> 00:00:50,070
to the current situation and the future

00:00:46,500 --> 00:00:51,949
well into the future and we'll talk

00:00:50,070 --> 00:00:55,760
about what we want to achieve in Farra

00:00:51,949 --> 00:01:00,180
regarding to containers and OpenShift

00:00:55,760 --> 00:01:01,559
so we go from the base you I guess

00:01:00,180 --> 00:01:04,350
everybody heard about the federal

00:01:01,559 --> 00:01:07,890
distribution Fedora has long support for

00:01:04,350 --> 00:01:10,439
PowerPC it started with PowerPC 64-bit

00:01:07,890 --> 00:01:14,040
began Deon in Fedora 7 which was in the

00:01:10,439 --> 00:01:17,759
year 2007 and we certainly got support

00:01:14,040 --> 00:01:19,650
for PowerPC 64-bit little-endian and it

00:01:17,759 --> 00:01:22,500
was in through our 21 you know four

00:01:19,650 --> 00:01:26,100
years ago so we've been early on on the

00:01:22,500 --> 00:01:29,400
train we in fedora have nearly complete

00:01:26,100 --> 00:01:31,740
party in old packages across most of the

00:01:29,400 --> 00:01:35,009
architectures which PowerPC is no no

00:01:31,740 --> 00:01:38,790
difference so you can get most of them

00:01:35,009 --> 00:01:41,850
or basically all the packages that you

00:01:38,790 --> 00:01:46,439
used from Intel or other cleaner

00:01:41,850 --> 00:01:48,149
architectures let's introduce the open

00:01:46,439 --> 00:01:49,740
shift open to discover entities based

00:01:48,149 --> 00:01:53,009
platform for running containerized

00:01:49,740 --> 00:01:56,880
applications it enables you to deploy

00:01:53,009 --> 00:01:59,969
your application on on the cluster of of

00:01:56,880 --> 00:02:02,549
nodes and it makes sure that application

00:01:59,969 --> 00:02:04,829
is running and it will restart or

00:02:02,549 --> 00:02:08,190
redeployed application if anything goes

00:02:04,829 --> 00:02:10,440
wrong there are more flavors of the open

00:02:08,190 --> 00:02:13,390
shift there is open shipped origin which

00:02:10,440 --> 00:02:16,390
is the upstream project that

00:02:13,390 --> 00:02:22,260
you can't contribute you you can run it

00:02:16,390 --> 00:02:24,790
and yeah and use it without any any or

00:02:22,260 --> 00:02:27,340
itches and then there is a redhead

00:02:24,790 --> 00:02:30,630
openshift container platform which is

00:02:27,340 --> 00:02:33,280
the redhead supported one and you can

00:02:30,630 --> 00:02:36,730
get it now also on PowerPC s it was

00:02:33,280 --> 00:02:38,830
stated in the keynote early on and we

00:02:36,730 --> 00:02:40,959
want to bring it also on further on so

00:02:38,830 --> 00:02:42,940
you can run it on all the architectures

00:02:40,959 --> 00:02:45,490
that open sheet origin and container

00:02:42,940 --> 00:02:49,750
power might not be supporting but also

00:02:45,490 --> 00:02:54,130
to those that are supported by us like

00:02:49,750 --> 00:02:55,810
to start start the journey to the gay in

00:02:54,130 --> 00:02:58,330
the future we had to start with tool

00:02:55,810 --> 00:03:00,610
chain being to have the compiler to

00:02:58,330 --> 00:03:03,820
she'll build all the all the bits and

00:03:00,610 --> 00:03:08,020
pieces like OpenShift kubernetes cryopod

00:03:03,820 --> 00:03:10,420
man mobi docker and any others all of

00:03:08,020 --> 00:03:12,280
those projects everything go so you need

00:03:10,420 --> 00:03:16,930
to go compiler there are two GU

00:03:12,280 --> 00:03:19,000
compilers currently is GC or going or

00:03:16,930 --> 00:03:21,400
however upstream wants to call it it's

00:03:19,000 --> 00:03:24,459
basically the Google compiler that it

00:03:21,400 --> 00:03:27,280
started all and there is GCC go which is

00:03:24,459 --> 00:03:29,680
go front-end for the GCC compiler GCC

00:03:27,280 --> 00:03:34,330
compiler supports all the architectures

00:03:29,680 --> 00:03:36,820
that GCC do kind of it's not probably

00:03:34,330 --> 00:03:42,220
full support but you can build the

00:03:36,820 --> 00:03:46,989
binaries with some caches and GCC and G

00:03:42,220 --> 00:03:51,280
C only support some about for GCC was

00:03:46,989 --> 00:03:54,730
ported thanks to the IBM and notably a

00:03:51,280 --> 00:03:57,250
burger did most of the work and it was

00:03:54,730 --> 00:04:01,930
done on like two or three years ago so

00:03:57,250 --> 00:04:05,019
we have two compiler so so we can start

00:04:01,930 --> 00:04:07,239
building stuff you need also get the

00:04:05,019 --> 00:04:08,709
compiler you need to strap it in most of

00:04:07,239 --> 00:04:12,730
distributions you cannot just grab the

00:04:08,709 --> 00:04:14,680
binaries and you can do stop it by using

00:04:12,730 --> 00:04:17,169
GCC go because it basically on all the

00:04:14,680 --> 00:04:20,890
platforms that the go that the GCC is

00:04:17,169 --> 00:04:23,229
party to so you can use that to to

00:04:20,890 --> 00:04:26,770
bootstrap it or you can stop it using

00:04:23,229 --> 00:04:29,009
the digital compiler bundle that is

00:04:26,770 --> 00:04:32,500
generated by the build scripts of the

00:04:29,009 --> 00:04:35,110
GCC compiler and you can from a day on

00:04:32,500 --> 00:04:37,300
the other supported architecture it's

00:04:35,110 --> 00:04:39,639
very easy to cross compile and go if you

00:04:37,300 --> 00:04:45,780
are not relying on C code I will show

00:04:39,639 --> 00:04:45,780
that we are actually on the PowerPC now

00:04:46,590 --> 00:04:56,580
and we can easily cross compile for

00:04:50,819 --> 00:05:00,099
example 64-bit Intel by just setting the

00:04:56,580 --> 00:05:01,509
read parameters for the compiler and

00:05:00,099 --> 00:05:05,500
it's actually the amount of

00:05:01,509 --> 00:05:07,870
environmental variable go out and with

00:05:05,500 --> 00:05:13,000
that we can just build a small program

00:05:07,870 --> 00:05:18,849
using it it's real fast to see you can

00:05:13,000 --> 00:05:22,090
see and produce binary is as you can see

00:05:18,849 --> 00:05:24,819
is Intel binary you can just run on a

00:05:22,090 --> 00:05:30,389
tall machine just come back just close

00:05:24,819 --> 00:05:30,389
compile from PC PC

00:05:37,060 --> 00:05:41,590
so it's really straightforward the

00:05:40,180 --> 00:05:45,090
cross-compilation really straightforward

00:05:41,590 --> 00:05:48,370
in in go world as long as you do not

00:05:45,090 --> 00:05:52,450
rely on any external stuff that's like

00:05:48,370 --> 00:05:55,210
that's mostly see then it gets become

00:05:52,450 --> 00:05:58,080
more complicated and it's not that no

00:05:55,210 --> 00:06:00,550
that is a bad for dropping and deploying

00:05:58,080 --> 00:06:07,330
to recover it in application it's very

00:06:00,550 --> 00:06:07,750
powerful tool so now we have the clue

00:06:07,330 --> 00:06:10,420
champ

00:06:07,750 --> 00:06:12,100
which we have in federal roughly for all

00:06:10,420 --> 00:06:15,270
the time that it was supported in

00:06:12,100 --> 00:06:18,250
upstream so it's for three years and

00:06:15,270 --> 00:06:21,160
working so now let's build the projects

00:06:18,250 --> 00:06:24,370
with it in federal everything is RPM

00:06:21,160 --> 00:06:26,710
package or mostly all the deliverables

00:06:24,370 --> 00:06:29,710
in the binary world then you have the

00:06:26,710 --> 00:06:33,370
application it's at the end package so

00:06:29,710 --> 00:06:35,560
for that you need it's good to agree on

00:06:33,370 --> 00:06:37,810
some standards how to package go based

00:06:35,560 --> 00:06:41,140
applications so we've been working on

00:06:37,810 --> 00:06:44,320
macros and guidelines that will ease and

00:06:41,140 --> 00:06:47,110
automate the way we are packaging stuff

00:06:44,320 --> 00:06:52,360
so we got the right compilation flags

00:06:47,110 --> 00:06:55,810
etc in go world a and mostly if you open

00:06:52,360 --> 00:06:58,090
shift kubernetes and others is kind of

00:06:55,810 --> 00:07:00,310
issue with the build scripts and that

00:06:58,090 --> 00:07:02,260
sometimes do not support all the

00:07:00,310 --> 00:07:06,640
architectures so you have to page the

00:07:02,260 --> 00:07:08,920
build scripts and work on it also for

00:07:06,640 --> 00:07:12,400
running openshift vn8 etcd

00:07:08,920 --> 00:07:14,920
which also go britain it's a key volley

00:07:12,400 --> 00:07:17,110
storm that is used as back-end for Cuban

00:07:14,920 --> 00:07:20,860
teas and it is sitting for Cuban teas

00:07:17,110 --> 00:07:23,020
and open juicer so we have the binary so

00:07:20,860 --> 00:07:25,870
we can run all the application deployed

00:07:23,020 --> 00:07:26,350
open chief cluster it's kind of not that

00:07:25,870 --> 00:07:30,610
easy

00:07:26,350 --> 00:07:34,560
yeah it's cool you have binary but you

00:07:30,610 --> 00:07:39,430
need also container images and by you

00:07:34,560 --> 00:07:42,820
orchestrate them so so we will start

00:07:39,430 --> 00:07:46,470
with the images open chief needs

00:07:42,820 --> 00:07:49,020
containers to run for it

00:07:46,470 --> 00:07:51,520
even if you do not

00:07:49,020 --> 00:07:54,820
decide to deploy it in containers you

00:07:51,520 --> 00:07:57,520
will still need one container for etcd

00:07:54,820 --> 00:08:00,940
and one container for pots for what

00:07:57,520 --> 00:08:03,010
let's use and also cluster up the

00:08:00,940 --> 00:08:05,710
easiest way for you on the open machine

00:08:03,010 --> 00:08:09,940
to run it on your own needs all

00:08:05,710 --> 00:08:12,520
basically all of the contents so I

00:08:09,940 --> 00:08:13,860
started with looking at what are all the

00:08:12,520 --> 00:08:16,840
containers provided by the upstream

00:08:13,860 --> 00:08:19,450
which was not that icy as I was

00:08:16,840 --> 00:08:20,980
expecting but managed to get older all

00:08:19,450 --> 00:08:24,790
the docker files from which they are

00:08:20,980 --> 00:08:29,620
built and basically as we have the

00:08:24,790 --> 00:08:32,050
binaries and we have we have the

00:08:29,620 --> 00:08:34,380
container images in fedora the basic

00:08:32,050 --> 00:08:37,210
container the base or distribution

00:08:34,380 --> 00:08:39,010
container image it was fairly

00:08:37,210 --> 00:08:42,250
straightforward to build them once I

00:08:39,010 --> 00:08:45,970
have all the docker file but it was just

00:08:42,250 --> 00:08:47,560
on my machine and and I pushed them to

00:08:45,970 --> 00:08:52,690
docker hub but it's not really

00:08:47,560 --> 00:08:56,100
sustainable way so so we also need some

00:08:52,690 --> 00:08:59,290
infrastructure to produce those images

00:08:56,100 --> 00:09:01,300
or basically all the layered images in

00:08:59,290 --> 00:09:04,690
federer not only for the openshift but

00:09:01,300 --> 00:09:06,400
also for all push it it enables us to

00:09:04,690 --> 00:09:09,850
build the images in irreducible and

00:09:06,400 --> 00:09:12,640
sustainable way by sustainable I mean if

00:09:09,850 --> 00:09:15,190
some components of the images change we

00:09:12,640 --> 00:09:17,140
need to rebuild those images for example

00:09:15,190 --> 00:09:20,110
if there are CVE in some important

00:09:17,140 --> 00:09:22,180
component even in something like ugh see

00:09:20,110 --> 00:09:24,010
we need to basically rebuilt all the

00:09:22,180 --> 00:09:29,020
containers so just if you have

00:09:24,010 --> 00:09:32,380
infrastructure for it it enables us to

00:09:29,020 --> 00:09:35,200
solve this issue and also helps us to

00:09:32,380 --> 00:09:37,900
automate the passion of pushing of the

00:09:35,200 --> 00:09:42,190
images into the registry for consumption

00:09:37,900 --> 00:09:44,200
doctor have quite a federal registry for

00:09:42,190 --> 00:09:46,750
that you only for doing that

00:09:44,200 --> 00:09:49,000
infrastructure will need builder or some

00:09:46,750 --> 00:09:52,270
something that officer is the belt or

00:09:49,000 --> 00:09:54,850
the containers and will need to secure

00:09:52,270 --> 00:09:59,170
call registry where we will be pushing

00:09:54,850 --> 00:10:02,080
the results from the builders for that

00:09:59,170 --> 00:10:07,570
Federer is using SBS now for

00:10:02,080 --> 00:10:10,600
in Tao the contentious koji we are

00:10:07,570 --> 00:10:13,450
looking on point or SBS for all the

00:10:10,600 --> 00:10:18,400
support architectures which PowerPC

00:10:13,450 --> 00:10:21,430
64-bit le is one of them and the easiest

00:10:18,400 --> 00:10:26,020
way to try those beers for yourself is

00:10:21,430 --> 00:10:27,610
vs box that I've been using to getting

00:10:26,020 --> 00:10:35,770
the proof concept that it actually can

00:10:27,610 --> 00:10:38,830
work on our PC yeah it's it's it's

00:10:35,770 --> 00:10:42,160
running we are just looking and special

00:10:38,830 --> 00:10:46,570
equipment is looking it's looking how to

00:10:42,160 --> 00:10:48,460
deploy it in infrastructure also the key

00:10:46,570 --> 00:10:50,230
point of the docker image or the

00:10:48,460 --> 00:10:54,340
container images is the manifest lists

00:10:50,230 --> 00:10:55,630
which enables you to get you know get

00:10:54,340 --> 00:10:57,790
the container image for each

00:10:55,630 --> 00:11:00,000
architecture on the same name so you do

00:10:57,790 --> 00:11:04,210
not have to have perfect container like

00:11:00,000 --> 00:11:06,520
for example PowerPC PPC 64 le slash

00:11:04,210 --> 00:11:08,470
fedora you can have just Federer image

00:11:06,520 --> 00:11:11,740
same as under Intel and it will

00:11:08,470 --> 00:11:13,270
correctly pull the right architecture

00:11:11,740 --> 00:11:15,760
for you so you don't be getting

00:11:13,270 --> 00:11:18,640
instruction errors or some really crazy

00:11:15,760 --> 00:11:22,060
stuff going on so I can manage I can

00:11:18,640 --> 00:11:25,180
show you that the manifests are working

00:11:22,060 --> 00:11:29,500
it's actually for more than probably six

00:11:25,180 --> 00:11:33,420
months it was done so you can use it to

00:11:29,500 --> 00:11:33,420
building your own layered images now

00:11:50,160 --> 00:11:55,110
so I will use sport man for running the

00:11:52,710 --> 00:11:57,150
container and we'll just get the shell

00:11:55,110 --> 00:12:00,990
so you can show you that I got

00:11:57,150 --> 00:12:05,400
throughout 28 image it's now pulling it

00:12:00,990 --> 00:12:07,820
from the crop probably should take too

00:12:05,400 --> 00:12:07,820
much time

00:12:17,420 --> 00:12:21,380
and in same way it works for you for

00:12:19,820 --> 00:12:23,810
example if you are using docker built on

00:12:21,380 --> 00:12:26,090
PowerPC you can use it to build your own

00:12:23,810 --> 00:12:30,740
images in the same way I just used from

00:12:26,090 --> 00:12:36,250
failure latest or federal 2004 version

00:12:30,740 --> 00:12:36,250
like what to use so I can

00:12:41,320 --> 00:12:48,709
I'll be good too right container yeah as

00:12:46,010 --> 00:12:51,639
you seen before we are on par PC and

00:12:48,709 --> 00:12:51,639
this is just working

00:12:58,359 --> 00:13:05,480
industry I have not prepared for it but

00:13:02,059 --> 00:13:12,139
we are using Scorpio to manage and some

00:13:05,480 --> 00:13:14,359
scripts but you need to prepare the

00:13:12,139 --> 00:13:16,790
manifest so like locally and then you

00:13:14,359 --> 00:13:23,290
get to talk her help there's little

00:13:16,790 --> 00:13:23,290
steps I'm not sorry

00:13:23,769 --> 00:13:30,649
yeah so it's basically the we are here

00:13:27,980 --> 00:13:33,589
waiting for the OSB s to be available

00:13:30,649 --> 00:13:36,919
for other architectures so that's the

00:13:33,589 --> 00:13:40,160
situation today and we want to go to

00:13:36,919 --> 00:13:42,529
future we also need to make sure that

00:13:40,160 --> 00:13:44,779
the play books which are the unschool PI

00:13:42,529 --> 00:13:48,549
books that are used as installer for the

00:13:44,779 --> 00:13:53,359
open shift are also working make sure

00:13:48,549 --> 00:13:54,799
they're also but we have to SBS or we

00:13:53,359 --> 00:13:57,549
although we can get all the layered

00:13:54,799 --> 00:14:02,629
images so you'll be able to deploy

00:13:57,549 --> 00:14:05,629
deploy any of the applications that are

00:14:02,629 --> 00:14:10,279
already containerized in fedorov on your

00:14:05,629 --> 00:14:13,429
open chief cluster or use store images

00:14:10,279 --> 00:14:15,259
to build your applications and also

00:14:13,429 --> 00:14:17,869
along do that we will have to implement

00:14:15,259 --> 00:14:20,499
the image streams so you can easily

00:14:17,869 --> 00:14:23,899
consume your applications in openshift

00:14:20,499 --> 00:14:26,419
also want you to have some CI

00:14:23,899 --> 00:14:28,579
deployments and testing for what we are

00:14:26,419 --> 00:14:35,449
producing but ever there are the layout

00:14:28,579 --> 00:14:38,600
images or or the openshift itself I hope

00:14:35,449 --> 00:14:41,019
that I will leverage the open power up

00:14:38,600 --> 00:14:44,079
in Barrow which provides provides

00:14:41,019 --> 00:14:49,819
resources to the open source projects in

00:14:44,079 --> 00:14:53,149
up in power space on the link down below

00:14:49,819 --> 00:14:56,419
if you have your own open source project

00:14:53,149 --> 00:14:59,089
you can ask for sources like DMS and

00:14:56,419 --> 00:15:01,720
stuff so you can start testing your

00:14:59,089 --> 00:15:01,720
project there

00:15:04,970 --> 00:15:11,250
so summarize would be half today we have

00:15:08,910 --> 00:15:13,340
all the to chain all the binaries built

00:15:11,250 --> 00:15:17,040
on all the over the supported

00:15:13,340 --> 00:15:22,290
architectures in fedora that's it 64-bit

00:15:17,040 --> 00:15:26,870
and 32-bit arm both Intel's PowerPC 64

00:15:22,290 --> 00:15:29,640
bit and 64 bit my frame we are now

00:15:26,870 --> 00:15:32,790
finishing work on the infrastructure so

00:15:29,640 --> 00:15:34,290
we get deployed all the builders for for

00:15:32,790 --> 00:15:37,110
all the architectures we will probably

00:15:34,290 --> 00:15:39,150
starting unfortunately with 64-bit arm

00:15:37,110 --> 00:15:41,550
as we do not have enough resources now

00:15:39,150 --> 00:15:46,140
in the infrastructure to deploy the

00:15:41,550 --> 00:15:48,180
PowerPC but the federal patina and every

00:15:46,140 --> 00:15:50,670
sunset over the weekend beyond PowerPC

00:15:48,180 --> 00:15:57,780
it will probably release some resources

00:15:50,670 --> 00:16:00,780
so people hopefully Anil did still still

00:15:57,780 --> 00:16:03,090
like current future and more faraway

00:16:00,780 --> 00:16:05,850
future we would like to have all the

00:16:03,090 --> 00:16:08,790
play books and order bits and pieces

00:16:05,850 --> 00:16:13,860
that you need for standard use of open

00:16:08,790 --> 00:16:15,900
shift in full-fledged cluster yeah we

00:16:13,860 --> 00:16:18,390
are open for all users testers and

00:16:15,900 --> 00:16:22,650
contributors so we're happy if you reach

00:16:18,390 --> 00:16:24,750
out to me or anybody else in Federer if

00:16:22,650 --> 00:16:29,150
you want to try it out contribute in

00:16:24,750 --> 00:16:32,940
some way very awesome the work is mainly

00:16:29,150 --> 00:16:37,730
centered about three six containers sake

00:16:32,940 --> 00:16:43,500
caress see which is more on on the

00:16:37,730 --> 00:16:45,930
future operating system and go seek and

00:16:43,500 --> 00:16:50,430
I would like to thank all the people

00:16:45,930 --> 00:16:52,830
involved in upstream Xin Federer most

00:16:50,430 --> 00:16:56,390
notably command very now or Leonberger

00:16:52,830 --> 00:17:01,350
from IBM Jeff young from Red Hat and

00:16:56,390 --> 00:17:03,199
many many others they did a lot of work

00:17:01,350 --> 00:17:06,000
on porting to different bits and pieces

00:17:03,199 --> 00:17:07,949
we basically haven't stumbled on much

00:17:06,000 --> 00:17:08,610
issues thanks to their work already in

00:17:07,949 --> 00:17:12,730
upstreams

00:17:08,610 --> 00:17:13,050
so think big thanks to them

00:17:12,730 --> 00:17:17,880
you

00:17:13,050 --> 00:17:17,880

YouTube URL: https://www.youtube.com/watch?v=gOhTUljFeNY


