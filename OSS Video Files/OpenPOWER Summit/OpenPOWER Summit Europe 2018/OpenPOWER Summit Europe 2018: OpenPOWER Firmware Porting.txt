Title: OpenPOWER Summit Europe 2018: OpenPOWER Firmware Porting
Publication date: 2018-11-26
Playlist: OpenPOWER Summit Europe 2018
Description: 
	Jeremy Kerr, OpenPOWER Platform Architect, IBM Australia, speaks at OpenPOWER Summit Europe 2018.

For more information, please visit: https://openpowerfoundation.org/summit-2018-10-eu/
Captions: 
	00:00:00,350 --> 00:00:07,130
my name is Jeremy her I'm from IBM's

00:00:04,320 --> 00:00:09,720
Linux Technology Center in Australia our

00:00:07,130 --> 00:00:11,160
team has a an open-source software

00:00:09,720 --> 00:00:14,040
development background we're sort of

00:00:11,160 --> 00:00:15,660
booked mostly all linux hackers at heart

00:00:14,040 --> 00:00:17,369
but we all all work on open source

00:00:15,660 --> 00:00:20,070
software voice at work in our spare

00:00:17,369 --> 00:00:23,340
times and that that's kind of our our

00:00:20,070 --> 00:00:26,039
pedigree I'm here today to give you some

00:00:23,340 --> 00:00:28,380
insights about the open power firmware

00:00:26,039 --> 00:00:31,009
Suites and how you'd go about modifying

00:00:28,380 --> 00:00:34,590
it and extending it for your own use

00:00:31,009 --> 00:00:37,050
that might be to add support just to say

00:00:34,590 --> 00:00:39,809
a new platform maybe implement in youth

00:00:37,050 --> 00:00:42,809
you know new cool feature make it work

00:00:39,809 --> 00:00:44,579
with your own management systems or as

00:00:42,809 --> 00:00:47,460
we say in Australia just for just for

00:00:44,579 --> 00:00:50,100
shits and giggles and we have a few

00:00:47,460 --> 00:00:52,320
documents online about about the general

00:00:50,100 --> 00:00:55,590
process of developing the open power

00:00:52,320 --> 00:00:57,629
firmware they're a bit scattered we have

00:00:55,590 --> 00:00:59,460
sort of blog posts and we have official

00:00:57,629 --> 00:01:01,079
documents and unofficial documents and

00:00:59,460 --> 00:01:02,219
mailing list posts and all these sorts

00:01:01,079 --> 00:01:05,240
of things

00:01:02,219 --> 00:01:08,639
what eternity here today is give a a

00:01:05,240 --> 00:01:10,709
sort of collected view an overview of of

00:01:08,639 --> 00:01:12,840
some of the points that that weren't

00:01:10,709 --> 00:01:14,670
going to a bit more detail so since

00:01:12,840 --> 00:01:16,439
we're here in person make use of it I'm

00:01:14,670 --> 00:01:17,999
happy to answer questions or if you want

00:01:16,439 --> 00:01:22,109
me to clarify anything please let me

00:01:17,999 --> 00:01:23,549
know straight away this presentation has

00:01:22,109 --> 00:01:26,759
sort of varying levels of technical

00:01:23,549 --> 00:01:29,459
content the introduction we sort of

00:01:26,759 --> 00:01:30,539
start with some general bits and it

00:01:29,459 --> 00:01:32,520
might be a bit obvious to start with

00:01:30,539 --> 00:01:34,590
we'll see how we go don't worry there's

00:01:32,520 --> 00:01:37,889
only one slide with with C code in it

00:01:34,590 --> 00:01:40,200
and the rest is bit but examples in

00:01:37,889 --> 00:01:41,609
shell but I guess if you if you only

00:01:40,200 --> 00:01:44,219
take one thing away from the talk today

00:01:41,609 --> 00:01:46,109
is is that there is a large community of

00:01:44,219 --> 00:01:48,090
us working on this stuff and if you're

00:01:46,109 --> 00:01:49,819
fiddling with with open power firmware

00:01:48,090 --> 00:01:52,319
you don't need to do it all by yourself

00:01:49,819 --> 00:01:53,939
there's a bunch of us who are hopefully

00:01:52,319 --> 00:01:55,829
accessible to the rest of the world

00:01:53,939 --> 00:01:58,289
hopefully accessible to the the other

00:01:55,829 --> 00:02:01,439
developers who are keen and can help out

00:01:58,289 --> 00:02:03,059
with with your own personal bits of work

00:02:01,439 --> 00:02:08,219
you want to do on the open pal firmware

00:02:03,059 --> 00:02:10,649
so that said we'll get into it I'm sure

00:02:08,219 --> 00:02:12,959
most folks are familiar already that the

00:02:10,649 --> 00:02:14,069
open power source code firmware source

00:02:12,959 --> 00:02:18,209
code is all up on

00:02:14,069 --> 00:02:20,549
github the top-level open - power

00:02:18,209 --> 00:02:22,290
project on github kind of hosts a large

00:02:20,549 --> 00:02:24,450
amount of sub repositories so I'll go

00:02:22,290 --> 00:02:25,889
into a bit of e the composition of about

00:02:24,450 --> 00:02:27,689
that soon

00:02:25,889 --> 00:02:31,819
and we'll sort of talk about some of

00:02:27,689 --> 00:02:31,819
these over the the time today

00:02:31,829 --> 00:02:36,930
two important sub projects that we that

00:02:34,829 --> 00:02:38,400
we work with is firstly leave this Docs

00:02:36,930 --> 00:02:41,579
repository and it contains I'm

00:02:38,400 --> 00:02:44,280
surprisingly documentation as with most

00:02:41,579 --> 00:02:47,099
documentation though there may be some

00:02:44,280 --> 00:02:49,019
substantial gaps there there's a fairly

00:02:47,099 --> 00:02:52,019
large to-do list of things we want to

00:02:49,019 --> 00:02:53,129
add or clarify and but but there is a

00:02:52,019 --> 00:02:55,370
lot of good stuff there so I would

00:02:53,129 --> 00:02:57,659
recommend having a browse through that

00:02:55,370 --> 00:02:59,819
before you sort of start embark on any

00:02:57,659 --> 00:03:01,290
any largest projects especially if you

00:02:59,819 --> 00:03:04,139
can you know open power for me to check

00:03:01,290 --> 00:03:05,189
it out if you have any any feedback on

00:03:04,139 --> 00:03:08,310
it let us know as well

00:03:05,189 --> 00:03:11,069
the second major component of the the

00:03:08,310 --> 00:03:14,340
open power github project is it's called

00:03:11,069 --> 00:03:15,900
Opie build and that kind of brings a

00:03:14,340 --> 00:03:17,699
bunch of the firmware components

00:03:15,900 --> 00:03:20,579
together I'll cover that in a bit more

00:03:17,699 --> 00:03:23,639
detail soon as I said there's a lot of

00:03:20,579 --> 00:03:25,620
components to a build most of the bits

00:03:23,639 --> 00:03:30,629
that actually make it an open power

00:03:25,620 --> 00:03:33,269
system are contained in open power

00:03:30,629 --> 00:03:35,819
specific repositories we also pull in a

00:03:33,269 --> 00:03:40,409
lot of other bits of open source

00:03:35,819 --> 00:03:42,359
software utilities libraries and and

00:03:40,409 --> 00:03:44,340
some of these components of what ends up

00:03:42,359 --> 00:03:48,470
getting built into the actual firmware

00:03:44,340 --> 00:03:51,180
image itself so we'll have a chunk of a

00:03:48,470 --> 00:03:54,030
separate open source projects which

00:03:51,180 --> 00:03:57,560
comprise a firmware component you know

00:03:54,030 --> 00:04:01,889
in a firmware image we also need some

00:03:57,560 --> 00:04:03,239
some bits that construct the actual

00:04:01,889 --> 00:04:04,439
image itself so like a compiler of

00:04:03,239 --> 00:04:07,560
course you need a compiler to compile

00:04:04,439 --> 00:04:09,840
stuff we have some open power specific

00:04:07,560 --> 00:04:11,519
utilities that are used to build server

00:04:09,840 --> 00:04:15,870
images so that that's the second column

00:04:11,519 --> 00:04:17,729
man but because we have a bunch of stuff

00:04:15,870 --> 00:04:19,199
it would be really mean to ask everyone

00:04:17,729 --> 00:04:22,079
to sort of pull those things together

00:04:19,199 --> 00:04:25,250
manual themselves and and build your own

00:04:22,079 --> 00:04:26,520
firmware so we have an overall

00:04:25,250 --> 00:04:27,720
repository called

00:04:26,520 --> 00:04:30,930
Opie build and that's that's

00:04:27,720 --> 00:04:33,060
our build system it's based on the the

00:04:30,930 --> 00:04:36,450
Builder utility if you may have heard of

00:04:33,060 --> 00:04:38,790
it and this is the top-level repo that

00:04:36,450 --> 00:04:40,620
you would clone to construct a new

00:04:38,790 --> 00:04:42,750
firmware image so it handles the

00:04:40,620 --> 00:04:45,750
download configuration compilation and

00:04:42,750 --> 00:04:48,180
packaging of all these these bits on the

00:04:45,750 --> 00:04:51,540
left using the bits in the middle to

00:04:48,180 --> 00:04:52,950
construct you a firmer image in most

00:04:51,540 --> 00:04:54,810
cases that that's the thing that we

00:04:52,950 --> 00:05:03,900
flash into the process and/or the penal

00:04:54,810 --> 00:05:06,510
on on these machines the given that the

00:05:03,900 --> 00:05:09,480
way that we use the opie build project

00:05:06,510 --> 00:05:12,180
is it itself is in version control so in

00:05:09,480 --> 00:05:15,860
theory that means that if you have a

00:05:12,180 --> 00:05:19,230
specific version of a VOP build guitry

00:05:15,860 --> 00:05:20,730
we can use that that reported version

00:05:19,230 --> 00:05:23,010
number to find out exactly which

00:05:20,730 --> 00:05:25,380
components were used to construct that

00:05:23,010 --> 00:05:27,419
build so we you know we might say we're

00:05:25,380 --> 00:05:30,690
using petit boug version 1.0 0.2 plus

00:05:27,419 --> 00:05:31,980
skibird version 5.6 plus this version of

00:05:30,690 --> 00:05:34,410
the linker and this version the peano

00:05:31,980 --> 00:05:39,600
muscial so that top level project allow

00:05:34,410 --> 00:05:42,600
us allows us to to verify and and record

00:05:39,600 --> 00:05:43,710
which sub projects all went into it so

00:05:42,600 --> 00:05:45,620
it kind of gives us a bit of

00:05:43,710 --> 00:05:48,300
auditability and a bit of verifiability

00:05:45,620 --> 00:05:49,770
however that working properly depends on

00:05:48,300 --> 00:05:54,110
a few things to be set up correctly so

00:05:49,770 --> 00:05:56,130
I'll cover that in a in a little bit um

00:05:54,110 --> 00:05:58,380
like I said we've got a whole bunch of

00:05:56,130 --> 00:06:00,450
stuff you know in power firmware this

00:05:58,380 --> 00:06:04,520
slide is a bit of a diagram of a very

00:06:00,450 --> 00:06:04,520
simplified diagram of how that all works

00:06:04,550 --> 00:06:08,910
so as it's implied quite a bit in

00:06:07,290 --> 00:06:11,940
general this is sort of the early boot

00:06:08,910 --> 00:06:17,220
process with time going from left to

00:06:11,940 --> 00:06:19,080
right so first up this isn't my area so

00:06:17,220 --> 00:06:20,550
Stuart Smith earlier today gave an

00:06:19,080 --> 00:06:24,120
excellent talk about the details of this

00:06:20,550 --> 00:06:27,450
is quite generalized we start on the on

00:06:24,120 --> 00:06:29,370
the left doing some some very low-level

00:06:27,450 --> 00:06:31,229
machine in it that's that's the sort of

00:06:29,370 --> 00:06:33,570
stuff that makes your computer actually

00:06:31,229 --> 00:06:35,760
act like a computer at the start all we

00:06:33,570 --> 00:06:37,229
have is a little bit occasion and very

00:06:35,760 --> 00:06:40,440
limited ability to actually run

00:06:37,229 --> 00:06:41,639
instructions so that B on the Left turns

00:06:40,440 --> 00:06:43,169
it into a computer gets it

00:06:41,639 --> 00:06:45,620
you get memory up gets it running out of

00:06:43,169 --> 00:06:48,210
memory gets get some IO up another thing

00:06:45,620 --> 00:06:51,389
once that's happened the last thing that

00:06:48,210 --> 00:06:54,349
hosts brew does is launches another

00:06:51,389 --> 00:06:58,020
piece of foam are called ski boot and

00:06:54,349 --> 00:06:59,400
I've get asked what what the difference

00:06:58,020 --> 00:07:01,050
between high spirit and ski boot is and

00:06:59,400 --> 00:07:02,340
why they're two separate projects and

00:07:01,050 --> 00:07:04,560
there's a lot of different sort of

00:07:02,340 --> 00:07:07,110
complexity around that but mainly think

00:07:04,560 --> 00:07:09,300
of it as host boot does the the actual

00:07:07,110 --> 00:07:15,770
low-level initialization and ski boot

00:07:09,300 --> 00:07:18,029
performs a bit of a runtime services for

00:07:15,770 --> 00:07:22,860
for the actual operating system that

00:07:18,029 --> 00:07:25,409
ends up running the in this diagram the

00:07:22,860 --> 00:07:27,479
the stuff that's in blue is shipped in

00:07:25,409 --> 00:07:32,729
the machine firmware and they're stuff

00:07:27,479 --> 00:07:35,789
in purple and different so blue is what

00:07:32,729 --> 00:07:37,529
is provided by the end user so install

00:07:35,789 --> 00:07:40,409
an operating system and that's the the

00:07:37,529 --> 00:07:42,659
purple section there so blue bits come

00:07:40,409 --> 00:07:47,210
with machine pebble bits come from the

00:07:42,659 --> 00:07:51,120
user so my my um my focus is kind of the

00:07:47,210 --> 00:07:53,819
these bits here and and how linux and

00:07:51,120 --> 00:07:55,620
our firmware interact I can certainly

00:07:53,819 --> 00:07:57,180
help out a bit with the machine and it

00:07:55,620 --> 00:08:01,219
things but there's there's better

00:07:57,180 --> 00:08:06,659
qualified people here at the conference

00:08:01,219 --> 00:08:08,789
so opal what we have this this piece

00:08:06,659 --> 00:08:10,800
ephemeral opal of which ski boot is an

00:08:08,789 --> 00:08:13,439
implementation opal stands for open

00:08:10,800 --> 00:08:16,560
power abstraction layer and it provides

00:08:13,439 --> 00:08:18,509
a way of abstracting all of the the

00:08:16,560 --> 00:08:21,389
quite low-level bits of hardware

00:08:18,509 --> 00:08:23,789
initialization from the eventual Linux

00:08:21,389 --> 00:08:26,879
workload of ends now it's possible we

00:08:23,789 --> 00:08:28,500
could run we could modify Linux to work

00:08:26,879 --> 00:08:28,889
directly on the hardware was no oka

00:08:28,500 --> 00:08:31,439
layer

00:08:28,889 --> 00:08:33,690
the the opal layer or ski boot here

00:08:31,439 --> 00:08:36,089
doesn't provide anything special it

00:08:33,690 --> 00:08:38,610
doesn't have any special privileges it

00:08:36,089 --> 00:08:40,529
doesn't doesn't have any doesn't or any

00:08:38,610 --> 00:08:44,070
protected motor and fire all that's

00:08:40,529 --> 00:08:46,290
doing is providing a bit of a bit of

00:08:44,070 --> 00:08:47,790
hardware abstraction for for Linux so

00:08:46,290 --> 00:08:50,579
that it doesn't have to know intimately

00:08:47,790 --> 00:08:52,199
about the layout of our machines and and

00:08:50,579 --> 00:08:54,460
that that regards think of it as more of

00:08:52,199 --> 00:09:00,520
a library rather than a layer of

00:08:54,460 --> 00:09:01,930
where that's impenetrable the well I

00:09:00,520 --> 00:09:05,170
guess discussing this we need to keep

00:09:01,930 --> 00:09:06,760
things in in context we kind of care

00:09:05,170 --> 00:09:08,470
about all these blue bits this is this

00:09:06,760 --> 00:09:11,380
is where we work every day but for

00:09:08,470 --> 00:09:13,000
end-users that's that's the real stuff

00:09:11,380 --> 00:09:15,040
that they care about they don't really

00:09:13,000 --> 00:09:17,020
worry too much about how their firmware

00:09:15,040 --> 00:09:19,480
works they just want to get it running

00:09:17,020 --> 00:09:22,120
get their work load going and get their

00:09:19,480 --> 00:09:24,940
work going load going as efficiently as

00:09:22,120 --> 00:09:26,410
possible so we kind of need to when

00:09:24,940 --> 00:09:28,510
we're doing firmware development is is

00:09:26,410 --> 00:09:31,600
to think about how the global context of

00:09:28,510 --> 00:09:33,250
how we how we develop things that

00:09:31,600 --> 00:09:36,040
enables that to happen rather than

00:09:33,250 --> 00:09:37,750
getting in the way or requiring weed

00:09:36,040 --> 00:09:41,500
interactions or that sort of thing so

00:09:37,750 --> 00:09:43,210
like turds from line we everything we do

00:09:41,500 --> 00:09:49,180
is really to get that that purple bit

00:09:43,210 --> 00:09:50,860
going we those those purple bits are

00:09:49,180 --> 00:09:52,900
often developed in their own ecosystems

00:09:50,860 --> 00:09:55,290
if we make changes to interface that

00:09:52,900 --> 00:09:57,820
affects that we need to be cognizant of

00:09:55,290 --> 00:10:01,510
what what consequence those those

00:09:57,820 --> 00:10:02,500
changes have and and it means that the

00:10:01,510 --> 00:10:04,630
firmware do what we do

00:10:02,500 --> 00:10:08,140
sorry firmware development that we do

00:10:04,630 --> 00:10:14,920
doesn't make unnecessary demands on on

00:10:08,140 --> 00:10:16,450
those bits of user software so like I

00:10:14,920 --> 00:10:19,210
said we have we have different different

00:10:16,450 --> 00:10:22,960
components on the different sources for

00:10:19,210 --> 00:10:24,730
the stuff running machine the the stuff

00:10:22,960 --> 00:10:26,590
that ships in the platform and the stuff

00:10:24,730 --> 00:10:28,630
that is provided as part of the

00:10:26,590 --> 00:10:32,740
adventure workload we sometimes get

00:10:28,630 --> 00:10:34,840
queries from system integrators who want

00:10:32,740 --> 00:10:37,960
to develop a fancy new feature and

00:10:34,840 --> 00:10:40,390
requires modification to that purple bit

00:10:37,960 --> 00:10:42,250
and that's it's not necessarily a

00:10:40,390 --> 00:10:46,420
problem but it requires very careful

00:10:42,250 --> 00:10:48,730
development we consider the the

00:10:46,420 --> 00:10:50,830
ecosystem the way people consume those

00:10:48,730 --> 00:10:53,290
parts the way of people load those parts

00:10:50,830 --> 00:10:56,770
onto the system before we can go instead

00:10:53,290 --> 00:10:58,270
of changing that we linearly for some

00:10:56,770 --> 00:11:00,970
new features in some systems that might

00:10:58,270 --> 00:11:04,690
be unavoidable don't think of it those

00:11:00,970 --> 00:11:06,760
bits as as completely unmodifiable but

00:11:04,690 --> 00:11:07,930
there's always a bit more consideration

00:11:06,760 --> 00:11:09,610
required when we're

00:11:07,930 --> 00:11:11,320
we're doing things that either change

00:11:09,610 --> 00:11:15,610
those parts or change interfaces to

00:11:11,320 --> 00:11:17,410
those parts when we when we want to

00:11:15,610 --> 00:11:18,910
modify the firmware we can do that quite

00:11:17,410 --> 00:11:22,480
easily right we just modify the firmware

00:11:18,910 --> 00:11:25,029
and and make sure that the machine is is

00:11:22,480 --> 00:11:28,630
shipped with that modified firmware for

00:11:25,029 --> 00:11:30,130
the external software bits it's we need

00:11:28,630 --> 00:11:34,350
to think about how the end users are

00:11:30,130 --> 00:11:37,120
expected to consume our changes there we

00:11:34,350 --> 00:11:39,430
usually a user will be consuming that

00:11:37,120 --> 00:11:40,870
through a Linux distribution so that we

00:11:39,430 --> 00:11:44,470
installing Red Hat at once or whatever

00:11:40,870 --> 00:11:47,640
and consuming it that way so if we want

00:11:44,470 --> 00:11:50,740
to modify it there's there's a bit of

00:11:47,640 --> 00:11:52,480
consideration around that do we do we

00:11:50,740 --> 00:11:54,490
ask every user - rather than using Red

00:11:52,480 --> 00:11:57,100
Hat use our own customers it's been

00:11:54,490 --> 00:11:59,410
reasonable do we want to have every user

00:11:57,100 --> 00:12:00,690
have to apply a custom patches are you

00:11:59,410 --> 00:12:04,630
going to support those patches forever

00:12:00,690 --> 00:12:06,190
so it's not it's much easier to make our

00:12:04,630 --> 00:12:07,930
changes in firmware than it is to get

00:12:06,190 --> 00:12:09,790
things through the ecosystem not to say

00:12:07,930 --> 00:12:13,089
that's not possible but it does again

00:12:09,790 --> 00:12:15,430
require some consideration there and in

00:12:13,089 --> 00:12:16,959
doing so I'd always suggest having a

00:12:15,430 --> 00:12:18,339
chat with the open power community I've

00:12:16,959 --> 00:12:20,589
got some resources at the end of the

00:12:18,339 --> 00:12:23,080
slides about how you would do that but

00:12:20,589 --> 00:12:25,120
it's we need to sort of consider how the

00:12:23,080 --> 00:12:26,830
ecosystem works and not burden folks too

00:12:25,120 --> 00:12:31,750
much with open power specializations

00:12:26,830 --> 00:12:33,850
when we're doing the the message that

00:12:31,750 --> 00:12:35,620
you'd actually get changes into the

00:12:33,850 --> 00:12:37,720
Linux kernel on on end-user systems

00:12:35,620 --> 00:12:39,820
looks a bit like this I am NOT going to

00:12:37,720 --> 00:12:43,060
go into too much detail but any sort of

00:12:39,820 --> 00:12:45,790
kernel code that we write we will send

00:12:43,060 --> 00:12:47,890
upstream to to the PowerPC kernel

00:12:45,790 --> 00:12:50,920
maintainer who happens to be an IBM er

00:12:47,890 --> 00:12:53,680
but that's not necessarily doesn't have

00:12:50,920 --> 00:12:56,050
to be case he will then do some testing

00:12:53,680 --> 00:12:58,900
for run tool Innes and then at some

00:12:56,050 --> 00:13:01,329
point in the future the one of the

00:12:58,900 --> 00:13:04,450
distributions will consume Lena's new

00:13:01,329 --> 00:13:05,980
tree and and by the time the end user

00:13:04,450 --> 00:13:07,360
wants to install the operating system

00:13:05,980 --> 00:13:08,980
they'll consume it through there so

00:13:07,360 --> 00:13:11,230
there's potentially quite a long process

00:13:08,980 --> 00:13:15,270
there and it's adds a bit of inertia to

00:13:11,230 --> 00:13:17,829
any changes again that that are

00:13:15,270 --> 00:13:20,500
modifying that purple bit of workload

00:13:17,829 --> 00:13:22,269
that we had before now why am i

00:13:20,500 --> 00:13:25,209
mentioning operating system changes

00:13:22,269 --> 00:13:27,160
in a firmware talk because the cleric

00:13:25,209 --> 00:13:30,430
carries over to the two other bits of

00:13:27,160 --> 00:13:32,319
firmware itself in fact we have we have

00:13:30,430 --> 00:13:34,690
a couple of bits that we we need to be

00:13:32,319 --> 00:13:36,009
careful about modifying on the right

00:13:34,690 --> 00:13:38,589
hand side the interface between the

00:13:36,009 --> 00:13:41,620
firmware and the operating system and in

00:13:38,589 --> 00:13:43,810
the middle there we have a bit of I

00:13:41,620 --> 00:13:45,579
guess exposure of firmware into folks

00:13:43,810 --> 00:13:48,009
management systems so we have a our

00:13:45,579 --> 00:13:50,680
bootloader in auto power machines and it

00:13:48,009 --> 00:13:51,850
has you know folks interface or people

00:13:50,680 --> 00:13:54,850
who are provisioning systems will

00:13:51,850 --> 00:13:56,680
interface that in certain methods to to

00:13:54,850 --> 00:13:58,480
make their data center work so there's

00:13:56,680 --> 00:14:01,959
kind of some some bits there that we

00:13:58,480 --> 00:14:04,990
need to to consider requirements of

00:14:01,959 --> 00:14:07,240
customers when we when we change or or

00:14:04,990 --> 00:14:09,190
remove bits or lawyers or add bits to it

00:14:07,240 --> 00:14:12,009
and we've got to think about how they're

00:14:09,190 --> 00:14:13,690
eventually consumed so we have ever gets

00:14:12,009 --> 00:14:16,870
a bit of advice for for folks who want

00:14:13,690 --> 00:14:19,740
to work on these bits firstly work with

00:14:16,870 --> 00:14:23,680
current standards and implementations

00:14:19,740 --> 00:14:27,279
wherever possible we we try and make the

00:14:23,680 --> 00:14:28,540
trends like folks evaluating open power

00:14:27,279 --> 00:14:30,759
we want to make that as seamless as

00:14:28,540 --> 00:14:33,069
possible that means we should make these

00:14:30,759 --> 00:14:35,439
changes in in in the context of the

00:14:33,069 --> 00:14:39,550
entire industry rather than just sort of

00:14:35,439 --> 00:14:41,470
doing things as a one-off and discuss

00:14:39,550 --> 00:14:43,420
things with upstream if you've got an

00:14:41,470 --> 00:14:45,430
idea if you've got a proposed way of

00:14:43,420 --> 00:14:48,730
doing things have a chat with the the

00:14:45,430 --> 00:14:52,300
upstream close projects and and often we

00:14:48,730 --> 00:14:55,470
can or collaborate to get a good good

00:14:52,300 --> 00:14:59,439
design that that's consumed or everyone

00:14:55,470 --> 00:15:01,750
just again going back to our ALP sort of

00:14:59,439 --> 00:15:03,459
boot flow now our component to the

00:15:01,750 --> 00:15:06,130
system one took a bit about development

00:15:03,459 --> 00:15:10,240
now there's a lot of bits involved

00:15:06,130 --> 00:15:13,209
there's a build process that we use to

00:15:10,240 --> 00:15:15,160
bring it all together but I think I

00:15:13,209 --> 00:15:18,970
think we've done a fairly decent job on

00:15:15,160 --> 00:15:21,370
making that not too difficult to consume

00:15:18,970 --> 00:15:25,750
so for the developers around this is

00:15:21,370 --> 00:15:27,730
what how we would build a basic flow for

00:15:25,750 --> 00:15:31,870
building an open powerful branch so

00:15:27,730 --> 00:15:34,689
firstly we grab the the OB bill source

00:15:31,870 --> 00:15:35,769
tree hi and then do a bit of

00:15:34,689 --> 00:15:38,290
configuration

00:15:35,769 --> 00:15:40,029
there's a little little shell sort of

00:15:38,290 --> 00:15:43,239
file we can sauce and that gives us some

00:15:40,029 --> 00:15:45,279
sing commands to use the build system

00:15:43,239 --> 00:15:48,970
and then we configure and then build it

00:15:45,279 --> 00:15:51,579
now the OPP old system will download

00:15:48,970 --> 00:15:56,110
like I said before will downloads build

00:15:51,579 --> 00:15:57,790
things and then generate a firmware

00:15:56,110 --> 00:15:59,559
image suitable for applying to the

00:15:57,790 --> 00:16:03,939
machine that you've specified in that

00:15:59,559 --> 00:16:05,079
second last line that's great if you're

00:16:03,939 --> 00:16:06,579
wanting to build an existing

00:16:05,079 --> 00:16:08,829
configuration for an existing machine

00:16:06,579 --> 00:16:09,999
that's already in the tree but we're

00:16:08,829 --> 00:16:15,069
looking at developing here this is a

00:16:09,999 --> 00:16:16,629
talk about developing firmware so we all

00:16:15,069 --> 00:16:20,649
actually modify some of the components

00:16:16,629 --> 00:16:22,360
to remember that okay build is just the

00:16:20,649 --> 00:16:24,459
build system itself it doesn't contain

00:16:22,360 --> 00:16:25,869
any source code for the firmware all

00:16:24,459 --> 00:16:28,259
it's doing is pulling in other bits of

00:16:25,869 --> 00:16:30,850
firmware and and and generating this

00:16:28,259 --> 00:16:34,899
this image out of out of those bits

00:16:30,850 --> 00:16:37,299
so rather than modifying OB bills we

00:16:34,899 --> 00:16:39,069
want to modify one of the components of

00:16:37,299 --> 00:16:40,689
firmware and because Stewart's here I

00:16:39,069 --> 00:16:43,110
picked ski brute as an example for that

00:16:40,689 --> 00:16:46,119
because Stewart's the maintainer for

00:16:43,110 --> 00:16:48,759
this is how is the simplified process of

00:16:46,119 --> 00:16:50,889
how we would modify ski boot for our a

00:16:48,759 --> 00:16:53,319
new platform an existing platform this

00:16:50,889 --> 00:16:56,619
case I've shown with a swim so again

00:16:53,319 --> 00:16:59,259
you'd clone the the firmware tree you

00:16:56,619 --> 00:17:01,990
might maybe use VI and edit some of your

00:16:59,259 --> 00:17:05,649
head up wanting platform definitions and

00:17:01,990 --> 00:17:06,970
then commit it to the the ski boots so

00:17:05,649 --> 00:17:08,439
you should always commit your changes as

00:17:06,970 --> 00:17:10,770
soon as you can so you've got rid of a

00:17:08,439 --> 00:17:14,439
record of what you what are you doing

00:17:10,770 --> 00:17:18,039
now like like many open source projects

00:17:14,439 --> 00:17:20,529
we can use we can build ski boot with

00:17:18,039 --> 00:17:23,020
the changes we just made using the make

00:17:20,529 --> 00:17:25,990
utility of course if you work on your

00:17:23,020 --> 00:17:27,490
laptop if you just used the standard

00:17:25,990 --> 00:17:30,220
compiler you have your going to compile

00:17:27,490 --> 00:17:32,980
ski boot for x86 which is not going to

00:17:30,220 --> 00:17:34,779
work at all so instead we want to

00:17:32,980 --> 00:17:37,419
compile it for the power architecture so

00:17:34,779 --> 00:17:39,309
we use a across compiler to do that now

00:17:37,419 --> 00:17:40,870
on my machine i'm running ubuntu cross

00:17:39,309 --> 00:17:43,600
compiler packages are easily available

00:17:40,870 --> 00:17:46,870
so so we can just use that if you don't

00:17:43,600 --> 00:17:49,920
have a cross compiler handy what you can

00:17:46,870 --> 00:17:53,230
do is actually use the one that

00:17:49,920 --> 00:17:55,120
provided during the Opie build step so

00:17:53,230 --> 00:17:58,840
here what we're doing is we're building

00:17:55,120 --> 00:18:02,560
ski boot the pointing it to a compiler

00:17:58,840 --> 00:18:05,620
that's built as part of the EOP build

00:18:02,560 --> 00:18:07,690
build system so that allows us to do to

00:18:05,620 --> 00:18:10,060
do select some build checking to do a

00:18:07,690 --> 00:18:11,710
compile of ski boot make sure that the

00:18:10,060 --> 00:18:13,930
changes we've done don't fundamentally

00:18:11,710 --> 00:18:16,500
break things at the build time and that

00:18:13,930 --> 00:18:20,440
gives us a little first pass local build

00:18:16,500 --> 00:18:22,510
we can do using the Oh people cross

00:18:20,440 --> 00:18:24,070
compiler enemy the previous example just

00:18:22,510 --> 00:18:26,350
using the cross compile we already have

00:18:24,070 --> 00:18:28,660
here so there's ski boot is really nice

00:18:26,350 --> 00:18:30,130
in that regard it's not too picky about

00:18:28,660 --> 00:18:36,910
environment you can just give it a cross

00:18:30,130 --> 00:18:39,040
compiler and it'll it'll build away now

00:18:36,910 --> 00:18:40,960
we we actually want to build it into a

00:18:39,040 --> 00:18:44,590
firm which not just a single ski but

00:18:40,960 --> 00:18:47,320
build so what we can do is is tell Opie

00:18:44,590 --> 00:18:49,360
build rather than using the other

00:18:47,320 --> 00:18:51,400
sources that are upstream on github we

00:18:49,360 --> 00:18:54,100
can point it to our a local tree that

00:18:51,400 --> 00:18:56,200
we've done our changes to so here in

00:18:54,100 --> 00:18:58,210
this case we're saying we want to use

00:18:56,200 --> 00:19:01,630
our local ski boot tree that has our

00:18:58,210 --> 00:19:02,830
changes in it rather than the one that's

00:19:01,630 --> 00:19:05,440
out on github rather than the ski boot

00:19:02,830 --> 00:19:08,200
it's out in github we use that we do

00:19:05,440 --> 00:19:12,490
that using these ski boots site and ski

00:19:08,200 --> 00:19:15,370
boots Chi method variables which say use

00:19:12,490 --> 00:19:18,280
our git tree which is in this path and

00:19:15,370 --> 00:19:19,480
then apply user specific version of that

00:19:18,280 --> 00:19:22,660
gear tree so what you do is you make a

00:19:19,480 --> 00:19:23,950
change to get sorry in ski we get get

00:19:22,660 --> 00:19:25,810
the version number that comes out when

00:19:23,950 --> 00:19:28,180
you commit it and then feed that version

00:19:25,810 --> 00:19:31,240
number back into your Opie build build

00:19:28,180 --> 00:19:34,210
in this case so that'll do the normal

00:19:31,240 --> 00:19:36,400
OPA build process I will use your local

00:19:34,210 --> 00:19:38,380
changes rather than the upstream ski

00:19:36,400 --> 00:19:42,280
boot code you can then take the firmware

00:19:38,380 --> 00:19:44,440
image thatthat Spitzer and flash on to

00:19:42,280 --> 00:19:46,600
machine and then test it and that will

00:19:44,440 --> 00:19:50,620
now include the changes that that you've

00:19:46,600 --> 00:19:52,480
made into that ski boot tree I mentioned

00:19:50,620 --> 00:19:56,790
earlier that that we can take in Opie

00:19:52,480 --> 00:19:59,380
build version and use that to calculate

00:19:56,790 --> 00:20:02,040
the versions of all the components that

00:19:59,380 --> 00:20:03,480
we've used in that Opie build run

00:20:02,040 --> 00:20:05,340
this kind of ruins that a bit because

00:20:03,480 --> 00:20:07,770
we've overridden what it thinks other

00:20:05,340 --> 00:20:09,390
versions it should use so this is good

00:20:07,770 --> 00:20:10,710
for testing it's it's terrible for

00:20:09,390 --> 00:20:12,660
production you don't want to ship any

00:20:10,710 --> 00:20:13,220
production images using this sort of

00:20:12,660 --> 00:20:15,090
thing

00:20:13,220 --> 00:20:17,730
because now if I've written something

00:20:15,090 --> 00:20:20,240
and now our reality doesn't correspond

00:20:17,730 --> 00:20:22,590
to what's in the actual o people tree

00:20:20,240 --> 00:20:24,450
there's there's some minor things we

00:20:22,590 --> 00:20:26,070
consolidated me to get that but it's

00:20:24,450 --> 00:20:28,080
really own the overriding here is only

00:20:26,070 --> 00:20:31,470
really appropriate for so my development

00:20:28,080 --> 00:20:32,640
so what's the proper way to do this once

00:20:31,470 --> 00:20:35,070
you've got your changes right once

00:20:32,640 --> 00:20:38,160
you've done your testing is send things

00:20:35,070 --> 00:20:40,640
upstream this is part of that that key

00:20:38,160 --> 00:20:44,090
point of your never working alone here

00:20:40,640 --> 00:20:46,710
you have a communities back you up you

00:20:44,090 --> 00:20:48,270
hopefully you could have engaged with us

00:20:46,710 --> 00:20:51,660
beforehand and said hey I'm trying this

00:20:48,270 --> 00:20:53,490
out so but if you're confident doing

00:20:51,660 --> 00:20:54,690
things you could this could be your

00:20:53,490 --> 00:20:56,340
first interaction with the other empower

00:20:54,690 --> 00:21:00,450
communities to send send your pages

00:20:56,340 --> 00:21:03,270
upstream you changed upstream it removes

00:21:00,450 --> 00:21:05,580
the need for you to carry those private

00:21:03,270 --> 00:21:07,020
customizations and it means that you can

00:21:05,580 --> 00:21:09,540
use official source trees that also

00:21:07,020 --> 00:21:11,340
include your support there's we hope

00:21:09,540 --> 00:21:12,870
it's less work overall for you to to

00:21:11,340 --> 00:21:16,410
upstream things rather than keeping them

00:21:12,870 --> 00:21:18,150
in your your private trees it also means

00:21:16,410 --> 00:21:20,460
that your changes will get reviews from

00:21:18,150 --> 00:21:24,270
the community potentially fix any bugs

00:21:20,460 --> 00:21:25,530
that might happen invites and and

00:21:24,270 --> 00:21:27,540
anything that might happen to other

00:21:25,530 --> 00:21:29,490
platforms based on your changes I sorted

00:21:27,540 --> 00:21:30,960
out earlier rather than rather than

00:21:29,490 --> 00:21:33,240
later

00:21:30,960 --> 00:21:34,830
and importantly this also guarantees

00:21:33,240 --> 00:21:36,420
provide some guarantee that you're

00:21:34,830 --> 00:21:40,350
you're complying with the open-source

00:21:36,420 --> 00:21:42,360
licenses in the opilio compile firmware

00:21:40,350 --> 00:21:44,250
there are certainly other ways to make

00:21:42,360 --> 00:21:45,720
sure you're compliant but this is

00:21:44,250 --> 00:21:47,730
probably the easiest is to have your

00:21:45,720 --> 00:21:51,780
code up there it's available in the same

00:21:47,730 --> 00:21:53,730
places that people expect and and all of

00:21:51,780 --> 00:21:55,350
the all the components that you end up

00:21:53,730 --> 00:21:55,980
building in your tree because they're

00:21:55,350 --> 00:21:58,410
upstream

00:21:55,980 --> 00:22:00,150
they're just available as is like I said

00:21:58,410 --> 00:22:01,920
it it's I'm I'm a lawyer I can't tell

00:22:00,150 --> 00:22:04,730
you how exactly to do this but it's

00:22:01,920 --> 00:22:07,410
certainly the easiest method of getting

00:22:04,730 --> 00:22:10,110
come in compliance with with the

00:22:07,410 --> 00:22:13,490
licenses involved here any questions

00:22:10,110 --> 00:22:15,840
about so far about the apps remain cool

00:22:13,490 --> 00:22:18,299
we often hear that up streaming can be

00:22:15,840 --> 00:22:19,620
a bit overwhelming certainly with some

00:22:18,299 --> 00:22:23,100
of the vendors that I've working in a

00:22:19,620 --> 00:22:25,950
sort of see it as a a big job that isn't

00:22:23,100 --> 00:22:28,429
necessary and and it we can just defer

00:22:25,950 --> 00:22:32,250
that till later I want to sort of

00:22:28,429 --> 00:22:34,890
address that a bit um there's how do we

00:22:32,250 --> 00:22:37,110
do it it's fairly simple these these

00:22:34,890 --> 00:22:39,150
steps are kind of at the essence of of

00:22:37,110 --> 00:22:43,020
how you would take your patch that you

00:22:39,150 --> 00:22:47,070
submit it or commit the committed to ski

00:22:43,020 --> 00:22:49,620
boot and submitted up string it's a

00:22:47,070 --> 00:22:51,000
little bit of a simplification but if

00:22:49,620 --> 00:22:52,529
you're not familiar here's a quick

00:22:51,000 --> 00:22:56,279
example for the again for the ski boot

00:22:52,529 --> 00:22:57,960
component the actual process might vary

00:22:56,279 --> 00:23:01,620
depending on which component of firmware

00:22:57,960 --> 00:23:03,659
modifying and and how the community for

00:23:01,620 --> 00:23:05,880
that component works but but still for

00:23:03,659 --> 00:23:08,130
ski boot it's fairly straightforward we

00:23:05,880 --> 00:23:10,500
use the get format patch tool to turn

00:23:08,130 --> 00:23:12,480
the commit that you've just made into an

00:23:10,500 --> 00:23:15,149
email we can then edit the email and

00:23:12,480 --> 00:23:17,659
then we can send the email so kind of

00:23:15,149 --> 00:23:20,460
three steps there

00:23:17,659 --> 00:23:23,159
in this example we're sending the mail

00:23:20,460 --> 00:23:26,970
to the mail that contains your change to

00:23:23,159 --> 00:23:29,039
this this ski boot email address most of

00:23:26,970 --> 00:23:31,470
the ski boot discussions happen on this

00:23:29,039 --> 00:23:32,820
mailing list you don't necessarily have

00:23:31,470 --> 00:23:34,679
to be a member to send things to it but

00:23:32,820 --> 00:23:36,210
I encourage it because it means you sort

00:23:34,679 --> 00:23:40,380
of participate in the community in

00:23:36,210 --> 00:23:42,149
advance when you when you send a mail

00:23:40,380 --> 00:23:43,919
it'll go to the ski boot mailing list a

00:23:42,149 --> 00:23:44,970
bunch of us will receive it I think it's

00:23:43,919 --> 00:23:47,760
worried about for people in this room

00:23:44,970 --> 00:23:51,450
they will receive the mail user sets and

00:23:47,760 --> 00:23:52,980
and if it's well I guess most

00:23:51,450 --> 00:23:57,179
importantly Stewart orders heavy email

00:23:52,980 --> 00:24:00,870
if the codes of good enough quality he

00:23:57,179 --> 00:24:03,240
will apply it if it's not it's not a

00:24:00,870 --> 00:24:05,880
huge deal that's fine it's it's a

00:24:03,240 --> 00:24:07,559
collaborative process you'll get some

00:24:05,880 --> 00:24:12,600
feedback you get too friendly feedback

00:24:07,559 --> 00:24:15,590
if you don't we'll we'll fix that but

00:24:12,600 --> 00:24:15,590
yeah

00:24:16,470 --> 00:24:21,750
you know I really want to encourage you

00:24:19,050 --> 00:24:22,860
know for first-time contributors this

00:24:21,750 --> 00:24:24,180
can be a little bit daunting you know

00:24:22,860 --> 00:24:25,470
sending the color that you've done that

00:24:24,180 --> 00:24:27,060
you might not be familiar with sending

00:24:25,470 --> 00:24:30,420
it out to the world it can be a bit

00:24:27,060 --> 00:24:32,240
daunting I guess I'd like for vital

00:24:30,420 --> 00:24:36,450
encouragement and reassurance about that

00:24:32,240 --> 00:24:38,100
Stuart's a friendly guy we try and make

00:24:36,450 --> 00:24:41,220
the community a friendly collaborative

00:24:38,100 --> 00:24:43,520
place for all kinds of contributors for

00:24:41,220 --> 00:24:45,630
new ones for old ones with death so

00:24:43,520 --> 00:24:48,120
regardless of the method you used to

00:24:45,630 --> 00:24:50,460
submit it submit your poor request or

00:24:48,120 --> 00:24:53,130
send an email really encourage you to

00:24:50,460 --> 00:24:54,210
give it a go and once that's once Stuart

00:24:53,130 --> 00:24:57,150
has accepted your patches which

00:24:54,210 --> 00:24:59,580
eventually will happen you get to remove

00:24:57,150 --> 00:25:02,910
these bits out of your build step and

00:24:59,580 --> 00:25:04,590
you go back to just using Opie build to

00:25:02,910 --> 00:25:06,510
build your firmware which means you're

00:25:04,590 --> 00:25:09,630
back to having verifiable version

00:25:06,510 --> 00:25:10,440
numbers you have you know vanilla sauce

00:25:09,630 --> 00:25:11,550
trees you don't have weird

00:25:10,440 --> 00:25:14,070
customizations everything's been

00:25:11,550 --> 00:25:15,930
reviewed and you now do is plane over

00:25:14,070 --> 00:25:19,470
there build and it has your changes in

00:25:15,930 --> 00:25:22,230
it which is really important I said I

00:25:19,470 --> 00:25:24,750
have simplified the process a bit but

00:25:22,230 --> 00:25:26,940
not a whole lot I just main thing is to

00:25:24,750 --> 00:25:29,550
encourage you if you want to go further

00:25:26,940 --> 00:25:30,990
into how it's done let us know or just

00:25:29,550 --> 00:25:32,370
try it out see what happens there's

00:25:30,990 --> 00:25:35,310
there's some good documentation on the

00:25:32,370 --> 00:25:37,080
on the the get process especially for

00:25:35,310 --> 00:25:38,580
developing things for the kernel if you

00:25:37,080 --> 00:25:40,800
find some docs the kernel it applies the

00:25:38,580 --> 00:25:46,740
same to ski with it except don't send it

00:25:40,800 --> 00:25:48,600
to the kill me simply skip it so that

00:25:46,740 --> 00:25:50,790
that's kind of a general build sort of

00:25:48,600 --> 00:25:54,210
process I'd like to use a bit more of a

00:25:50,790 --> 00:25:57,680
solid example in doing a platform port

00:25:54,210 --> 00:25:59,880
for frozen power and that has a few

00:25:57,680 --> 00:26:00,960
important components here firstly isn't

00:25:59,880 --> 00:26:04,410
identified we're going to call it

00:26:00,960 --> 00:26:06,450
something I'll go into why in the next

00:26:04,410 --> 00:26:08,160
slide but we've got to think up a name

00:26:06,450 --> 00:26:09,900
that we can apply to just this platform

00:26:08,160 --> 00:26:13,230
so that when we're running on that floor

00:26:09,900 --> 00:26:15,990
platform we know what it is we also have

00:26:13,230 --> 00:26:18,060
some some machine deffend definition for

00:26:15,990 --> 00:26:19,710
that early initialization procedure I'm

00:26:18,060 --> 00:26:21,540
going to completely bypass that because

00:26:19,710 --> 00:26:22,740
it's not sort of an area I work in

00:26:21,540 --> 00:26:24,990
there's probably like I said better

00:26:22,740 --> 00:26:27,210
people to help out with that we also

00:26:24,990 --> 00:26:28,890
have an opal platform definition for the

00:26:27,210 --> 00:26:31,890
platform that's the bit we can go into

00:26:28,890 --> 00:26:34,230
a bit of detail again like I said we the

00:26:31,890 --> 00:26:36,960
identifier is really important we call

00:26:34,230 --> 00:26:40,440
it a compatible string because it's it's

00:26:36,960 --> 00:26:43,740
a property within the device tree which

00:26:40,440 --> 00:26:46,260
is a machine description that is used as

00:26:43,740 --> 00:26:48,600
the canonical machine identifier and

00:26:46,260 --> 00:26:51,450
it's usually in a format of vendor

00:26:48,600 --> 00:26:54,870
common vendor common name so this is the

00:26:51,450 --> 00:26:58,440
one we use for we'll swing the AC 92 and

00:26:54,870 --> 00:27:01,080
it has to be unique this this compatible

00:26:58,440 --> 00:27:03,150
string is our a very last resort for any

00:27:01,080 --> 00:27:06,000
any releases any fixes that need to

00:27:03,150 --> 00:27:07,650
happen sort of post release it allows us

00:27:06,000 --> 00:27:11,610
to apply a fixed under one machine but

00:27:07,650 --> 00:27:13,740
not the entire urban power world and

00:27:11,610 --> 00:27:15,660
that will often be when we when one of

00:27:13,740 --> 00:27:16,890
us is engaged to debug something that'll

00:27:15,660 --> 00:27:18,120
be the first thing we check to make sure

00:27:16,890 --> 00:27:20,460
that we actually working on the machine

00:27:18,120 --> 00:27:22,680
we think we are and we're working on the

00:27:20,460 --> 00:27:24,420
the code that we think we're working on

00:27:22,680 --> 00:27:26,390
when we're doing a debugging effort so

00:27:24,420 --> 00:27:30,420
this this is really important we've had

00:27:26,390 --> 00:27:32,700
I've had cases where folks with other

00:27:30,420 --> 00:27:35,340
system integrators have taken the

00:27:32,700 --> 00:27:38,070
reference design and pretty much used it

00:27:35,340 --> 00:27:41,280
as is made a few small modifications but

00:27:38,070 --> 00:27:43,770
then not modified the vendor common name

00:27:41,280 --> 00:27:46,710
string and it means we have we were then

00:27:43,770 --> 00:27:48,950
left with a case where we can't do any

00:27:46,710 --> 00:27:52,920
any sort of light fixes or any fixes on

00:27:48,950 --> 00:27:55,290
on official upstream firmware because we

00:27:52,920 --> 00:27:57,390
have no way to differentiate the two the

00:27:55,290 --> 00:27:59,280
two variations of string of machine so

00:27:57,390 --> 00:28:00,900
that that's really important this this

00:27:59,280 --> 00:28:02,520
probably isn't enough information to go

00:28:00,900 --> 00:28:04,020
on so for doing that virus want to

00:28:02,520 --> 00:28:05,370
emphasize that it's really important

00:28:04,020 --> 00:28:09,380
have a chat with us if you if you have

00:28:05,370 --> 00:28:12,470
any problems about that once that's done

00:28:09,380 --> 00:28:15,120
what we need to do is create a a

00:28:12,470 --> 00:28:17,520
definition in opal slash ski boot that

00:28:15,120 --> 00:28:20,280
describes your machine we have a few a

00:28:17,520 --> 00:28:22,020
few here already this is just one of the

00:28:20,280 --> 00:28:24,360
directories in the ski boot tree we have

00:28:22,020 --> 00:28:27,600
a bunch of platform definitions in this

00:28:24,360 --> 00:28:31,040
case for the ast B and C type platforms

00:28:27,600 --> 00:28:34,650
which are mostly open power ones or all

00:28:31,040 --> 00:28:39,540
and each of those files generally have

00:28:34,650 --> 00:28:42,900
one platform definition for file this is

00:28:39,540 --> 00:28:47,370
a subset of us that encapsulate

00:28:42,900 --> 00:28:50,250
platform-specific functionality when

00:28:47,370 --> 00:28:51,780
when ski where it starts what we do is

00:28:50,250 --> 00:28:54,480
we get that compatible string which I

00:28:51,780 --> 00:28:56,880
spoke about before and then well

00:28:54,480 --> 00:28:59,040
actually what we do is we call a probe

00:28:56,880 --> 00:29:01,230
function in each of the the platform

00:28:59,040 --> 00:29:03,060
definitions and most of those probe

00:29:01,230 --> 00:29:05,370
functions will basically the the probe

00:29:03,060 --> 00:29:08,490
function will turn true if it is that

00:29:05,370 --> 00:29:11,400
platform or false otherwise and this is

00:29:08,490 --> 00:29:12,630
why it's important to have that that

00:29:11,400 --> 00:29:14,790
compatible string as you something

00:29:12,630 --> 00:29:17,550
unique we use that to determine which

00:29:14,790 --> 00:29:20,370
machine ople is starting on so we'll

00:29:17,550 --> 00:29:22,650
check that and then say yes this is the

00:29:20,370 --> 00:29:26,100
platform starting and apply all the the

00:29:22,650 --> 00:29:29,130
platform specific stuff I've covered

00:29:26,100 --> 00:29:32,850
about 5,000 bits of functionality in one

00:29:29,130 --> 00:29:35,220
slide there any question about that or

00:29:32,850 --> 00:29:41,400
what the platform definition in ski boot

00:29:35,220 --> 00:29:44,100
does cool ok again after B Earth if you

00:29:41,400 --> 00:29:46,140
guys like the next injury you've written

00:29:44,100 --> 00:29:47,900
your you've copied probably copied one

00:29:46,140 --> 00:29:50,070
of the the existing platform definitions

00:29:47,900 --> 00:29:51,780
first thing you've done is change the

00:29:50,070 --> 00:29:53,250
compatible string so you've got a unique

00:29:51,780 --> 00:29:56,040
machine and fire and then you've

00:29:53,250 --> 00:29:58,200
implemented your own urine stuff the

00:29:56,040 --> 00:29:59,550
early platform initialization some of

00:29:58,200 --> 00:30:02,060
the other parameters that you would have

00:29:59,550 --> 00:30:05,150
in a schema definition for your platform

00:30:02,060 --> 00:30:07,620
what are you doing X you want to test it

00:30:05,150 --> 00:30:10,770
the way you do that will really depend

00:30:07,620 --> 00:30:12,570
on how your platform works so there's

00:30:10,770 --> 00:30:14,850
the different methods of flashing

00:30:12,570 --> 00:30:18,150
firmware different thing different bits

00:30:14,850 --> 00:30:21,240
of hardware functionality that you want

00:30:18,150 --> 00:30:25,320
to test out so people often think it's

00:30:21,240 --> 00:30:26,760
overly overly difficult to do that in an

00:30:25,320 --> 00:30:28,500
effort to solve that problem Stewart

00:30:26,760 --> 00:30:31,080
here mentioned me a lot today I loved

00:30:28,500 --> 00:30:33,740
his work Stewart here has implemented

00:30:31,080 --> 00:30:37,170
something called the Opie test framework

00:30:33,740 --> 00:30:39,780
so that's as you'd expect a bunch of

00:30:37,170 --> 00:30:41,580
tests that do hardware specific stuff it

00:30:39,780 --> 00:30:46,230
pulls in some other test Suites and and

00:30:41,580 --> 00:30:49,860
bits of that and not only does it have

00:30:46,230 --> 00:30:51,330
tests in it but it also has some

00:30:49,860 --> 00:30:54,110
functionality in it that knows how to

00:30:51,330 --> 00:30:56,590
apply a piece of a new piece of firmware

00:30:54,110 --> 00:31:01,299
onto onto a arbitrary

00:30:56,590 --> 00:31:04,029
hopefully not to auditory but a lot of

00:31:01,299 --> 00:31:05,980
the the intelligence about flashing open

00:31:04,029 --> 00:31:09,009
power machines about rebooting them

00:31:05,980 --> 00:31:11,200
about managing the kind of procedures

00:31:09,009 --> 00:31:14,799
you want to do in a test I covered in

00:31:11,200 --> 00:31:18,759
the the o P test framework and that also

00:31:14,799 --> 00:31:22,090
is on github it's just another a project

00:31:18,759 --> 00:31:24,429
on github you can clone running machine

00:31:22,090 --> 00:31:25,840
and use it in various environments for

00:31:24,429 --> 00:31:29,919
for testing so I wanted to mention that

00:31:25,840 --> 00:31:33,429
you know in our coverage today compile

00:31:29,919 --> 00:31:35,559
definitely tests of course you know in

00:31:33,429 --> 00:31:37,480
the early stages of development you want

00:31:35,559 --> 00:31:39,759
to do some individual tests that's fine

00:31:37,480 --> 00:31:42,909
but the opt test framework certainly

00:31:39,759 --> 00:31:46,360
makes a lot of that much easier and a

00:31:42,909 --> 00:31:47,860
more abstract it I guess um like said

00:31:46,360 --> 00:31:52,389
that there's gonna be a few resources

00:31:47,860 --> 00:31:56,019
here on a point you're a few the the

00:31:52,389 --> 00:31:58,690
open power per project github pages are

00:31:56,019 --> 00:32:00,070
often the best place to start that's

00:31:58,690 --> 00:32:01,570
that's where the sources are held each

00:32:00,070 --> 00:32:03,279
one will probably have a readme file

00:32:01,570 --> 00:32:05,649
about you know some backgrounds on

00:32:03,279 --> 00:32:07,179
contributing on maybe some overall

00:32:05,649 --> 00:32:08,740
designs that that's where we where I'd

00:32:07,179 --> 00:32:12,299
start if I was looking at contributing

00:32:08,740 --> 00:32:15,129
to a new open power firmware project

00:32:12,299 --> 00:32:18,100
there's also a bunch of per project

00:32:15,129 --> 00:32:20,289
mailing lists for those of us who are

00:32:18,100 --> 00:32:25,480
from ancient times and freeze my own

00:32:20,289 --> 00:32:27,610
list this is where we go the and that's

00:32:25,480 --> 00:32:29,499
divided up by my actual source project

00:32:27,610 --> 00:32:32,049
now that that's not always helpful if

00:32:29,499 --> 00:32:34,210
you kind of don't know where to start we

00:32:32,049 --> 00:32:36,639
have we have folks asking you know this

00:32:34,210 --> 00:32:38,019
is great having these specific lists but

00:32:36,639 --> 00:32:39,549
I don't know if I want to work on ski

00:32:38,019 --> 00:32:41,919
bruit or if I need to work on Linux or

00:32:39,549 --> 00:32:44,799
peti boots or something else so in that

00:32:41,919 --> 00:32:46,570
regard we have we have some generic

00:32:44,799 --> 00:32:48,399
stuff that that can be handy so we have

00:32:46,570 --> 00:32:50,679
this mailing list it's pretty low

00:32:48,399 --> 00:32:52,960
traffic at the moment called open power

00:32:50,679 --> 00:32:55,149
- firmware and that's just a general

00:32:52,960 --> 00:32:56,679
color like a collection of folks from

00:32:55,149 --> 00:33:00,129
different parts of the the firmware

00:32:56,679 --> 00:33:03,399
community who kind of look on that just

00:33:00,129 --> 00:33:05,619
to help folks out who may not have a

00:33:03,399 --> 00:33:08,200
particular project in mind or don't know

00:33:05,619 --> 00:33:09,700
which projects applicable that that's

00:33:08,200 --> 00:33:10,419
that's a you know a good place to send

00:33:09,700 --> 00:33:13,869
mail to if you

00:33:10,419 --> 00:33:16,809
you forget get cracking on that we also

00:33:13,869 --> 00:33:19,450
have the Stack Overflow community and we

00:33:16,809 --> 00:33:21,639
have a few tags there if you use the

00:33:19,450 --> 00:33:23,200
open power tag it means it appears in

00:33:21,639 --> 00:33:26,049
the list that I check almost daily and

00:33:23,200 --> 00:33:27,669
most of my colleagues will also see at

00:33:26,049 --> 00:33:29,590
some point so that's that's a good place

00:33:27,669 --> 00:33:32,139
to start - if you like using new and

00:33:29,590 --> 00:33:36,009
cool sort of stuff rather than mailing

00:33:32,139 --> 00:33:38,799
lists and also you can ask me I may be

00:33:36,009 --> 00:33:41,409
in Amsterdam at a time so I can't also

00:33:38,799 --> 00:33:42,669
guarantee a quick response but you know

00:33:41,409 --> 00:33:44,499
most of us in the community work on

00:33:42,669 --> 00:33:46,059
different bits are quite happy to answer

00:33:44,499 --> 00:33:48,249
random questions there I can't I can't

00:33:46,059 --> 00:33:50,499
provide you know five nines portering

00:33:48,249 --> 00:33:51,609
like that but um you know we're all sort

00:33:50,499 --> 00:33:53,499
of community members here who were very

00:33:51,609 --> 00:33:55,269
happy about if you can find Stewart's

00:33:53,499 --> 00:33:59,169
moments as well that could be useful but

00:33:55,269 --> 00:34:02,049
I won't I mean putting a hole here cool

00:33:59,169 --> 00:34:03,700
another another resource sort of more on

00:34:02,049 --> 00:34:05,649
the official side if you are looking for

00:34:03,700 --> 00:34:07,809
a bit more kind of guaranteed response

00:34:05,649 --> 00:34:10,240
is the the open power foundation of

00:34:07,809 --> 00:34:12,669
course for the bits that I've been

00:34:10,240 --> 00:34:14,740
talking about here today the system

00:34:12,669 --> 00:34:17,079
software workgroup is probably the most

00:34:14,740 --> 00:34:21,069
appropriate we kind of discussed

00:34:17,079 --> 00:34:23,169
surprisingly system software and where

00:34:21,069 --> 00:34:24,730
most most of the folks here are members

00:34:23,169 --> 00:34:26,379
if you're not the signup process is

00:34:24,730 --> 00:34:28,299
quite simple you can be an individual

00:34:26,379 --> 00:34:30,099
member or a corporate member but we have

00:34:28,299 --> 00:34:32,679
this system software worker with

00:34:30,099 --> 00:34:33,849
meetings in different time zones to suit

00:34:32,679 --> 00:34:36,970
sort of where you asked we have one

00:34:33,849 --> 00:34:38,859
early one one week late on the next and

00:34:36,970 --> 00:34:40,299
we're trying to sort of group some of

00:34:38,859 --> 00:34:42,010
the maintenance of these open port open

00:34:40,299 --> 00:34:44,260
source projects into into the workgroup

00:34:42,010 --> 00:34:45,549
as well not to remove them from the

00:34:44,260 --> 00:34:47,339
community but just to have a bit of a

00:34:45,549 --> 00:34:50,200
regular sort of thing that happens there

00:34:47,339 --> 00:34:51,790
yeah so that that's the kind of set of

00:34:50,200 --> 00:34:54,490
three different resources for where

00:34:51,790 --> 00:34:59,670
you're at I highly recommend checking

00:34:54,490 --> 00:35:01,730
them out any questions thank you

00:34:59,670 --> 00:35:01,730

YouTube URL: https://www.youtube.com/watch?v=v73Nw7NDxYI


