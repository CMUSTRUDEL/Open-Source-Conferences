Title: OpenPOWER Summit Europe 2018: Facilitating IP Development for the OpenCAPI Memory Interface
Publication date: 2018-11-14
Playlist: OpenPOWER Summit Europe 2018
Description: 
	Kevin McLLVain, Memory Development Engineer, IBM speaks at OpenPOWER Foundation's OpenPOWER Summit Europe 2018.

For more information, please visit: https://openpowerfoundation.org/summit-2018-10-eu/
Captions: 
	00:00:00,500 --> 00:00:05,040
all right so hello my name is Kevin

00:00:03,149 --> 00:00:08,099
McIlvain I'm a memory development

00:00:05,040 --> 00:00:10,230
engineer with IBM so before we get

00:00:08,099 --> 00:00:15,059
started I just wanted to quickly touch

00:00:10,230 --> 00:00:16,949
on you know I come from a hardware

00:00:15,059 --> 00:00:18,480
background right so I've done hardware

00:00:16,949 --> 00:00:21,330
for quite a long time have been really

00:00:18,480 --> 00:00:24,119
involved with our previous memory

00:00:21,330 --> 00:00:26,160
buffered solutions for p8 I did a lot of

00:00:24,119 --> 00:00:27,930
the design for both the memory

00:00:26,160 --> 00:00:30,150
controller and test engines on that chip

00:00:27,930 --> 00:00:32,880
was involved a lot and to bring up that

00:00:30,150 --> 00:00:35,340
now I'm I've been involved with the with

00:00:32,880 --> 00:00:39,440
the direct attach memory subsystem bring

00:00:35,340 --> 00:00:42,510
up for our p9 systems like the AC 920 so

00:00:39,440 --> 00:00:45,180
what I want to touch on now is the open

00:00:42,510 --> 00:00:47,850
capping memory interface and why it's so

00:00:45,180 --> 00:00:49,320
important why I'm excited about it why I

00:00:47,850 --> 00:00:52,530
hope everybody else would be excited

00:00:49,320 --> 00:00:54,449
about it too so I just want to cut to

00:00:52,530 --> 00:00:55,829
the chase here to is like what is the

00:00:54,449 --> 00:00:57,390
moralist story here right so you're not

00:00:55,829 --> 00:01:00,270
waiting till the end to figure it out

00:00:57,390 --> 00:01:02,190
all right so the the moralist story here

00:01:00,270 --> 00:01:05,850
is that the open power is the best

00:01:02,190 --> 00:01:07,439
platform to exploit emerging memory

00:01:05,850 --> 00:01:09,240
technologies right we've already seen

00:01:07,439 --> 00:01:10,979
that a lot of the presentations earlier

00:01:09,240 --> 00:01:12,570
in terms of like all the accelerator

00:01:10,979 --> 00:01:15,119
work that's been going on with the open

00:01:12,570 --> 00:01:16,650
capi interfaces and things like that but

00:01:15,119 --> 00:01:19,110
there's more to come right with the next

00:01:16,650 --> 00:01:20,909
generation of p9 that's gonna be coming

00:01:19,110 --> 00:01:22,409
out with the open capi memory interface

00:01:20,909 --> 00:01:25,950
we've touched on that and some of the

00:01:22,409 --> 00:01:27,780
other conversations the open capi 3.1 we

00:01:25,950 --> 00:01:30,420
just know that you know it's a

00:01:27,780 --> 00:01:32,820
forward-thinking architecture we're

00:01:30,420 --> 00:01:35,850
gonna be you know we're accepting the

00:01:32,820 --> 00:01:37,500
technology scaling challenges and the

00:01:35,850 --> 00:01:40,619
open powers architected to solve those

00:01:37,500 --> 00:01:42,360
issues right so it's not just for GPUs

00:01:40,619 --> 00:01:43,110
and other accelerators now it's for

00:01:42,360 --> 00:01:44,750
memory too

00:01:43,110 --> 00:01:47,689
we have to really start thinking about

00:01:44,750 --> 00:01:50,549
you know the changes in the upcoming

00:01:47,689 --> 00:01:52,740
memory subsystem so open power

00:01:50,549 --> 00:01:55,380
recognizes that memories the forefront

00:01:52,740 --> 00:01:57,570
of transforming system architecture

00:01:55,380 --> 00:01:59,340
right so namely we're looking at the

00:01:57,570 --> 00:02:00,869
memory agnostic interfaces so we can

00:01:59,340 --> 00:02:04,740
attach all types of different memories

00:02:00,869 --> 00:02:06,810
the open capi 3.0 the 3.1 and the

00:02:04,740 --> 00:02:08,550
upcoming well the upcoming 3.1 and for

00:02:06,810 --> 00:02:11,370
that oh right we're no longer going to

00:02:08,550 --> 00:02:13,980
be tied to a specific media like a ddr4

00:02:11,370 --> 00:02:16,590
right so that makes it much

00:02:13,980 --> 00:02:20,670
easier to manage your technology

00:02:16,590 --> 00:02:22,709
transitions from dr4 to DTR 5 emerging

00:02:20,670 --> 00:02:23,940
memory technologies things like that and

00:02:22,709 --> 00:02:25,110
we've learned a lot of that in the past

00:02:23,940 --> 00:02:28,730
with their other buffered memory

00:02:25,110 --> 00:02:30,780
solutions transitioning from ddr3 to dr4

00:02:28,730 --> 00:02:32,580
so there's also gonna be firmware

00:02:30,780 --> 00:02:34,080
support for new memory technologies for

00:02:32,580 --> 00:02:36,450
persistent memory we're already working

00:02:34,080 --> 00:02:39,000
on you know in the open power right is

00:02:36,450 --> 00:02:41,069
to provide a mechanism in firmware to

00:02:39,000 --> 00:02:42,329
support persistent memory right so when

00:02:41,069 --> 00:02:44,610
we start attaching these persistent

00:02:42,329 --> 00:02:46,920
memories in the system can utilize those

00:02:44,610 --> 00:02:49,500
right and we need this open ecosystem

00:02:46,920 --> 00:02:50,700
for fast industry research development

00:02:49,500 --> 00:02:53,160
and adoption right we're at the

00:02:50,700 --> 00:02:55,680
precipice of big changes in the memory

00:02:53,160 --> 00:02:59,489
subsystem and open power is ready to

00:02:55,680 --> 00:03:01,049
lead the way so we've we've looked at a

00:02:59,489 --> 00:03:02,700
lot of graphs earlier today in other

00:03:01,049 --> 00:03:04,859
presentations about the scaling

00:03:02,700 --> 00:03:06,900
challenges right one of the things that

00:03:04,859 --> 00:03:08,459
we don't talk about so much anymore as

00:03:06,900 --> 00:03:10,260
the the old Von Neumanns bottleneck

00:03:08,459 --> 00:03:12,569
right so your throughputs always limited

00:03:10,260 --> 00:03:15,120
by all your memory bandwidth

00:03:12,569 --> 00:03:16,319
capabilities are right and in the past

00:03:15,120 --> 00:03:19,560
there's been a lot of processor

00:03:16,319 --> 00:03:21,389
technology - it's evolved to help

00:03:19,560 --> 00:03:24,349
alleviate that those throughput issues

00:03:21,389 --> 00:03:27,209
some of those being caching prefetch and

00:03:24,349 --> 00:03:28,980
multi-threading and then also it's like

00:03:27,209 --> 00:03:30,959
you know it's holding hands with the

00:03:28,980 --> 00:03:32,639
Moore's law right so the shrinking

00:03:30,959 --> 00:03:36,000
device is an increasing speed right

00:03:32,639 --> 00:03:37,919
that's caused a lot of changes in the

00:03:36,000 --> 00:03:39,690
compute architecture to compensate for

00:03:37,919 --> 00:03:42,650
the now slowing Moore's Law right so

00:03:39,690 --> 00:03:44,970
you're increasing your core counts your

00:03:42,650 --> 00:03:47,130
so what we have to do you're starting to

00:03:44,970 --> 00:03:50,370
augment your processors with GPUs and

00:03:47,130 --> 00:03:52,109
FPGA specialized accelerators which are

00:03:50,370 --> 00:03:54,540
all connected now with advanced iOS

00:03:52,109 --> 00:03:57,389
right so this is requiring more memory

00:03:54,540 --> 00:03:59,579
and memory bandwidth and density right

00:03:57,389 --> 00:04:01,079
so but we can't just think about what's

00:03:59,579 --> 00:04:03,000
happening the processors and trying to

00:04:01,079 --> 00:04:04,530
scale the processors we have to also

00:04:03,000 --> 00:04:06,480
think about the memory but the memories

00:04:04,530 --> 00:04:08,400
starting to hit a lot of limitations -

00:04:06,480 --> 00:04:10,590
right so as we start to move forward

00:04:08,400 --> 00:04:15,090
from ddr4 and we're looking at dr5

00:04:10,590 --> 00:04:17,010
coming up we have on chip ECC right

00:04:15,090 --> 00:04:18,419
because there's a divided the devices

00:04:17,010 --> 00:04:20,729
are shrinking they're not holding as

00:04:18,419 --> 00:04:22,590
much charge anymore so every time you do

00:04:20,729 --> 00:04:24,599
a read operation that device is checking

00:04:22,590 --> 00:04:26,370
and doing an Ecco and might do a read

00:04:24,599 --> 00:04:27,660
modify write so that's going to add

00:04:26,370 --> 00:04:29,940
latency to your devices

00:04:27,660 --> 00:04:32,580
and then also the interface out to your

00:04:29,940 --> 00:04:34,350
DDR memories right so it's got to employ

00:04:32,580 --> 00:04:36,650
things like DfE right because we're

00:04:34,350 --> 00:04:39,180
starting to reach the limitations of the

00:04:36,650 --> 00:04:42,780
single-ended memory interface all right

00:04:39,180 --> 00:04:45,300
so with that you know it's adding cost

00:04:42,780 --> 00:04:48,540
it's adding latency we're starting to

00:04:45,300 --> 00:04:51,780
also see power density and scaling

00:04:48,540 --> 00:04:54,090
limitations so these are some charts

00:04:51,780 --> 00:04:58,680
that were shown in this jeddaks server

00:04:54,090 --> 00:05:00,120
forum I credit to KH Kim but what it

00:04:58,680 --> 00:05:02,280
kind of shows here is the power

00:05:00,120 --> 00:05:05,160
processor trend over on the Left right

00:05:02,280 --> 00:05:08,190
the main message there is as you all add

00:05:05,160 --> 00:05:11,100
more cores and more threads to equal

00:05:08,190 --> 00:05:13,560
more higher performance per socket your

00:05:11,100 --> 00:05:15,690
memory capacity also has to increase the

00:05:13,560 --> 00:05:17,580
match that right so each one of those

00:05:15,690 --> 00:05:19,440
new cores and threads is going to need

00:05:17,580 --> 00:05:21,240
more memory bandwidth going to it right

00:05:19,440 --> 00:05:23,850
and then here on the right is the

00:05:21,240 --> 00:05:26,130
problem that we've seen you know listed

00:05:23,850 --> 00:05:29,520
in some other presentations like ken's

00:05:26,130 --> 00:05:31,290
earlier is that your DRAM die density is

00:05:29,520 --> 00:05:33,060
starting to flatten out right and you're

00:05:31,290 --> 00:05:34,740
starting to increase your cost and

00:05:33,060 --> 00:05:38,550
you're not getting as much benefit out

00:05:34,740 --> 00:05:39,870
of that from your DRAM devices so what

00:05:38,550 --> 00:05:42,120
does this mean right what are the

00:05:39,870 --> 00:05:44,100
challenges so if we look over here on

00:05:42,120 --> 00:05:46,020
the Left right this is a typical pyramid

00:05:44,100 --> 00:05:47,370
we've seen them a lot you know it's

00:05:46,020 --> 00:05:48,870
around the industry quite a bit and a

00:05:47,370 --> 00:05:51,570
lot of presentations but it basically

00:05:48,870 --> 00:05:53,670
shows in your memory stack and how your

00:05:51,570 --> 00:05:55,860
decrease in cost is applied as you move

00:05:53,670 --> 00:05:58,140
out away from your processor and then

00:05:55,860 --> 00:06:01,560
also the access times to get to those

00:05:58,140 --> 00:06:04,110
those devices so what's happening right

00:06:01,560 --> 00:06:06,570
is to all these AI type applications for

00:06:04,110 --> 00:06:08,540
instance right as an example require a

00:06:06,570 --> 00:06:11,220
tremendous amount of memory bandwidth

00:06:08,540 --> 00:06:14,760
and it's driven it's driving a massive

00:06:11,220 --> 00:06:16,290
increase in memory capacity so your DRAM

00:06:14,760 --> 00:06:17,580
technology is beginning to face the

00:06:16,290 --> 00:06:20,310
scaling challenges like we mentioned

00:06:17,580 --> 00:06:22,500
before but you still require low latency

00:06:20,310 --> 00:06:25,710
DRAM devices to be attached in your

00:06:22,500 --> 00:06:27,450
system all right so that requires you

00:06:25,710 --> 00:06:29,520
you know you still have to grow your

00:06:27,450 --> 00:06:30,870
capacity and bandwidth so right but your

00:06:29,520 --> 00:06:32,370
costs are also becoming a major

00:06:30,870 --> 00:06:34,530
inhibitor so what you have to start

00:06:32,370 --> 00:06:36,750
doing is we have to start now augmenting

00:06:34,530 --> 00:06:38,010
your DRAM devices much like we've been

00:06:36,750 --> 00:06:40,080
starting to augment all of our

00:06:38,010 --> 00:06:41,350
processors right with GPUs and things

00:06:40,080 --> 00:06:43,180
like that

00:06:41,350 --> 00:06:45,400
so now we have to augment the DRAM with

00:06:43,180 --> 00:06:46,750
the merging memory technology right

00:06:45,400 --> 00:06:49,900
you're still gonna require different

00:06:46,750 --> 00:06:52,240
tiers for DRAM for low latency so the

00:06:49,900 --> 00:06:54,760
idea here is to significantly reduce the

00:06:52,240 --> 00:06:57,580
cost of your high-capacity memory right

00:06:54,760 --> 00:06:59,500
so heteros gene heterogeneous memory

00:06:57,580 --> 00:07:01,360
architectures are the next logical step

00:06:59,500 --> 00:07:05,770
right so how do we get there what's the

00:07:01,360 --> 00:07:07,990
best path forward so in your traditional

00:07:05,770 --> 00:07:10,510
memory architectures right you would

00:07:07,990 --> 00:07:13,180
have a your memory directly attached to

00:07:10,510 --> 00:07:15,880
your CPU through the memory controller

00:07:13,180 --> 00:07:17,680
then you have flexible i/o and capi PCIe

00:07:15,880 --> 00:07:20,169
talking to storage adapter it's just

00:07:17,680 --> 00:07:22,750
basic example right but where can we add

00:07:20,169 --> 00:07:24,880
the most value so everybody's been

00:07:22,750 --> 00:07:27,850
looking at trying to move storage class

00:07:24,880 --> 00:07:30,550
type memories up to your your direct

00:07:27,850 --> 00:07:32,820
attached memory locations right so we're

00:07:30,550 --> 00:07:37,120
talking about hybrid dims like NV domen

00:07:32,820 --> 00:07:38,919
FP even H H's you know just its

00:07:37,120 --> 00:07:41,169
proprietary from some other companies

00:07:38,919 --> 00:07:42,580
but the main one here is the P right

00:07:41,169 --> 00:07:45,460
that's the one where you actually really

00:07:42,580 --> 00:07:46,750
get to start utilizing the the storage

00:07:45,460 --> 00:07:48,100
class memory that's out there on the

00:07:46,750 --> 00:07:50,680
DIMM it's not there just there to be

00:07:48,100 --> 00:07:54,340
like a backup right and in the case of

00:07:50,680 --> 00:07:55,960
an and B demand so as you start to move

00:07:54,340 --> 00:07:57,700
all those bits out there right any more

00:07:55,960 --> 00:07:59,470
bets more bandwidth right but one of the

00:07:57,700 --> 00:08:02,410
challenges with doing that right you're

00:07:59,470 --> 00:08:04,600
still tied to a ddr4 ddr5 interface and

00:08:02,410 --> 00:08:06,610
your protocols are specific and not very

00:08:04,600 --> 00:08:08,700
flexible right so it's difficult again

00:08:06,610 --> 00:08:12,610
to manage your technology transitions

00:08:08,700 --> 00:08:14,680
and in specific with the envied MP when

00:08:12,610 --> 00:08:15,910
you go out into the industry like and

00:08:14,680 --> 00:08:17,200
you're talking in JEDEC and you're

00:08:15,910 --> 00:08:19,810
working with some of the memory vendors

00:08:17,200 --> 00:08:20,979
they they're very concerned about what's

00:08:19,810 --> 00:08:23,500
going to happen there what is the

00:08:20,979 --> 00:08:25,870
support going to be for the envied MP

00:08:23,500 --> 00:08:27,010
protocol right there's a lot of there's

00:08:25,870 --> 00:08:29,380
a lot of work going on the work group

00:08:27,010 --> 00:08:31,210
and they're coming out with the spec but

00:08:29,380 --> 00:08:33,729
what they see is they see that the

00:08:31,210 --> 00:08:36,130
biggest processor you know guy out there

00:08:33,729 --> 00:08:38,710
is coming up with his own solution right

00:08:36,130 --> 00:08:41,650
and that's going to be a proprietary

00:08:38,710 --> 00:08:44,560
extension on ddr4 right so there's this

00:08:41,650 --> 00:08:46,240
3d crosspoint right so it's a

00:08:44,560 --> 00:08:49,180
proprietary extension on the year for

00:08:46,240 --> 00:08:51,339
for only a single SCM technology so what

00:08:49,180 --> 00:08:53,630
we see is that restricts innovation and

00:08:51,339 --> 00:08:57,290
cost per gigabyte competition

00:08:53,630 --> 00:08:59,150
right so that it also compromises

00:08:57,290 --> 00:09:01,370
bandwidth in capacity with your DRAM

00:08:59,150 --> 00:09:04,130
tears and your versus SCM with tears

00:09:01,370 --> 00:09:05,300
right so there's some other just the

00:09:04,130 --> 00:09:07,700
architecture in the way that it's

00:09:05,300 --> 00:09:08,750
currently slated to work in the system

00:09:07,700 --> 00:09:12,290
right because you're taking away a

00:09:08,750 --> 00:09:13,910
memory channel to put this on so there's

00:09:12,290 --> 00:09:15,350
a lot of concern right so if other

00:09:13,910 --> 00:09:17,330
memory vendors go out and they try to

00:09:15,350 --> 00:09:18,890
make their own devices and attach to nvm

00:09:17,330 --> 00:09:20,120
PD where's the volume going to be for

00:09:18,890 --> 00:09:21,260
them right how are they going to

00:09:20,120 --> 00:09:24,170
innovate how are they going to apply

00:09:21,260 --> 00:09:26,660
into the entity into the architecture

00:09:24,170 --> 00:09:28,700
right so we can add a lot of value

00:09:26,660 --> 00:09:32,300
through the open copy memory interface

00:09:28,700 --> 00:09:34,820
right so by making this interface

00:09:32,300 --> 00:09:37,490
agnostic right we were able to embrace

00:09:34,820 --> 00:09:39,590
all the diverse memory technologies that

00:09:37,490 --> 00:09:41,990
are coming we encourage innovation in

00:09:39,590 --> 00:09:44,210
the industry right but it's not just

00:09:41,990 --> 00:09:46,420
limited to the open power CPUs I mean

00:09:44,210 --> 00:09:48,950
right now obviously with with open capi

00:09:46,420 --> 00:09:50,570
the power architecture is the only place

00:09:48,950 --> 00:09:51,920
where it's being used but that doesn't

00:09:50,570 --> 00:09:53,540
mean it's the only place is going to

00:09:51,920 --> 00:09:56,810
survive right we've already heard talk

00:09:53,540 --> 00:09:58,910
from other companies you know with with

00:09:56,810 --> 00:10:01,060
concerns about the scalability of the

00:09:58,910 --> 00:10:04,670
DRAM direct-attached interface and

00:10:01,060 --> 00:10:06,170
showing more and more eyes opening up to

00:10:04,670 --> 00:10:07,700
what we're doing with the open capi

00:10:06,170 --> 00:10:10,040
saying hey this really does look like a

00:10:07,700 --> 00:10:11,420
great solution moving forward all right

00:10:10,040 --> 00:10:13,610
so some of the other things that are

00:10:11,420 --> 00:10:16,130
great about this is you get the more

00:10:13,610 --> 00:10:17,780
bandwidth and the more bits right so you

00:10:16,130 --> 00:10:21,080
have fewer pins and what you would see

00:10:17,780 --> 00:10:24,530
with the normal ddr4 dr5 interface so in

00:10:21,080 --> 00:10:27,800
comparison to ddr4 the open copy is

00:10:24,530 --> 00:10:29,420
about thirty four pins versus 154 one

00:10:27,800 --> 00:10:32,930
memory Channel so it's like a four point

00:10:29,420 --> 00:10:36,230
4x reduction in pins right so eight

00:10:32,930 --> 00:10:38,900
channel is a ddr4 on the p9 is about

00:10:36,230 --> 00:10:42,070
1200 pins that's huge and then your oh

00:10:38,900 --> 00:10:44,780
my is 2x the bandwidth for half the pins

00:10:42,070 --> 00:10:46,370
so that's that's a pretty huge reduction

00:10:44,780 --> 00:10:48,170
right so that allows you to do a lot

00:10:46,370 --> 00:10:50,180
more differentiation on your processor

00:10:48,170 --> 00:10:52,130
in addition to adding a lot more

00:10:50,180 --> 00:10:56,450
bandwidth right because you can use that

00:10:52,130 --> 00:10:57,800
other pin space for other feature so a

00:10:56,450 --> 00:10:59,270
couple other notes and we'll talk more

00:10:57,800 --> 00:11:02,480
about this on a table later

00:10:59,270 --> 00:11:05,150
is that your ddr4 and oh my if you look

00:11:02,480 --> 00:11:07,520
at channel per channel have equal max

00:11:05,150 --> 00:11:10,160
only read bandwidth capable

00:11:07,520 --> 00:11:12,470
and the right is the same way but the OL

00:11:10,160 --> 00:11:14,330
mic and support that same read bandwidth

00:11:12,470 --> 00:11:16,550
and right bandwidth at the same time

00:11:14,330 --> 00:11:20,660
right so it's almost like getting two

00:11:16,550 --> 00:11:22,640
ddr4 channels for one so there's also

00:11:20,660 --> 00:11:24,860
this gives you the capability to support

00:11:22,640 --> 00:11:27,260
you know possibly up to 16 or my

00:11:24,860 --> 00:11:29,480
channels per processor this is perfect

00:11:27,260 --> 00:11:31,480
for emerging heterogeneous technologies

00:11:29,480 --> 00:11:33,380
and your memory acceleration and

00:11:31,480 --> 00:11:35,270
optimizes your it can help you optimize

00:11:33,380 --> 00:11:38,800
your memory tier bandwidth and capacity

00:11:35,270 --> 00:11:41,300
for lower total cost of ownership right

00:11:38,800 --> 00:11:43,850
also there's the drive to push this

00:11:41,300 --> 00:11:46,040
through JEDEC so there is we're working

00:11:43,850 --> 00:11:49,460
through JEDEC and different task groups

00:11:46,040 --> 00:11:51,830
to create a standardization for the DDR

00:11:49,460 --> 00:11:55,460
5dm right which will have an open Cappy

00:11:51,830 --> 00:12:00,830
interface so this is a quote from

00:11:55,460 --> 00:12:02,690
somebody sitting in the room so Jeff so

00:12:00,830 --> 00:12:04,460
I just really like this quote right this

00:12:02,690 --> 00:12:06,470
came out of the the hot chips article

00:12:04,460 --> 00:12:08,870
right so this really talks about the

00:12:06,470 --> 00:12:10,580
flexibility of attach right and just

00:12:08,870 --> 00:12:12,020
being able to drive a ton of bandwidth

00:12:10,580 --> 00:12:14,180
through the CPU it's the big switch

00:12:12,020 --> 00:12:16,400
right you got a pass through all your

00:12:14,180 --> 00:12:17,870
memory bandwidth from one capability to

00:12:16,400 --> 00:12:19,850
another it really helps you tie in

00:12:17,870 --> 00:12:20,930
everything in your system and one of

00:12:19,850 --> 00:12:22,760
those things is going to be your memory

00:12:20,930 --> 00:12:24,740
right and depending what kind of GPUs

00:12:22,760 --> 00:12:26,800
and everything you have out there they

00:12:24,740 --> 00:12:29,510
may want to utilize the memory are

00:12:26,800 --> 00:12:31,100
consistently right so depending what you

00:12:29,510 --> 00:12:33,650
have out there in terms of emerging

00:12:31,100 --> 00:12:35,180
memory or direct-attached d rams you can

00:12:33,650 --> 00:12:40,280
really optimize your total solution

00:12:35,180 --> 00:12:41,990
together so this is a you know kind of

00:12:40,280 --> 00:12:43,760
the chart of you know where we've been

00:12:41,990 --> 00:12:46,820
in the past right so this is your power

00:12:43,760 --> 00:12:48,830
ii architecture so even back in back

00:12:46,820 --> 00:12:50,360
then we had the DMI interface right and

00:12:48,830 --> 00:12:52,130
this is kind of where the open power

00:12:50,360 --> 00:12:54,110
memory work group started right with

00:12:52,130 --> 00:12:55,790
this differential memory interface it

00:12:54,110 --> 00:12:57,200
was an agnostic interface which was

00:12:55,790 --> 00:12:59,300
great you could attach whatever you

00:12:57,200 --> 00:13:01,550
wanted out there lea we've done research

00:12:59,300 --> 00:13:02,900
on that interface we've put FPGAs on

00:13:01,550 --> 00:13:05,030
there with emerging memory we've done

00:13:02,900 --> 00:13:07,280
all that kind of stuff right and we

00:13:05,030 --> 00:13:09,530
learned a lot but we also know that hey

00:13:07,280 --> 00:13:11,540
we we learned that this is proprietary

00:13:09,530 --> 00:13:12,770
nobody likes proprietary when you're

00:13:11,540 --> 00:13:14,870
trying to work through an open

00:13:12,770 --> 00:13:16,940
architecture system and you want to

00:13:14,870 --> 00:13:20,180
drive innovation you have to open

00:13:16,940 --> 00:13:21,080
everything up right so but it it was you

00:13:20,180 --> 00:13:23,210
know initially it was

00:13:21,080 --> 00:13:25,100
used for other reasons right it gave us

00:13:23,210 --> 00:13:27,230
the high bandwidth the big densities and

00:13:25,100 --> 00:13:29,150
when that was initially architected it

00:13:27,230 --> 00:13:30,860
was still at that rise up where you

00:13:29,150 --> 00:13:33,380
could keep scaling your DRAM technology

00:13:30,860 --> 00:13:39,110
it wasn't quite leveling off like it is

00:13:33,380 --> 00:13:40,640
now so then we kind of realized that we

00:13:39,110 --> 00:13:41,840
needed low end solutions where we had

00:13:40,640 --> 00:13:43,250
direct-attached right because that

00:13:41,840 --> 00:13:45,590
allows people to take something that's

00:13:43,250 --> 00:13:48,440
not a customized dim and plug it into a

00:13:45,590 --> 00:13:51,110
system right that allowed you to go out

00:13:48,440 --> 00:13:53,810
into you know data centers and put in

00:13:51,110 --> 00:13:55,370
your p9 systems and people could bring

00:13:53,810 --> 00:13:57,470
over their own dims things like that

00:13:55,370 --> 00:13:59,630
right so at the open capi memory

00:13:57,470 --> 00:14:01,400
interface we're trying to do the best of

00:13:59,630 --> 00:14:04,490
both both worlds right we're trying to

00:14:01,400 --> 00:14:06,440
have this agnostic interface with with

00:14:04,490 --> 00:14:08,810
super high bandwidth that really

00:14:06,440 --> 00:14:10,490
supports emerging memories but we're

00:14:08,810 --> 00:14:12,500
also trying to do the standardization

00:14:10,490 --> 00:14:14,390
through JEDEC so that we can move

00:14:12,500 --> 00:14:17,420
forward and try to get more people to

00:14:14,390 --> 00:14:18,650
adopt it bring up that ecosystem with

00:14:17,420 --> 00:14:21,230
the different memory vendors that are

00:14:18,650 --> 00:14:22,790
out there to try to drive down the total

00:14:21,230 --> 00:14:25,340
cost of the dims right that's not going

00:14:22,790 --> 00:14:26,660
to happen initially but it's the you

00:14:25,340 --> 00:14:28,070
know it's a progression right you got to

00:14:26,660 --> 00:14:31,430
start somewhere so we're starting with

00:14:28,070 --> 00:14:33,170
that with the jeddak strategies so if we

00:14:31,430 --> 00:14:34,910
move forward we talk about you know what

00:14:33,170 --> 00:14:36,470
are we doing in the open power memory

00:14:34,910 --> 00:14:38,810
workgroup with the strata with the

00:14:36,470 --> 00:14:40,430
strategy going forward you know what do

00:14:38,810 --> 00:14:42,320
we need to start talking about right we

00:14:40,430 --> 00:14:43,970
need to start working with the new

00:14:42,320 --> 00:14:46,490
interfaces that are coming down the path

00:14:43,970 --> 00:14:48,620
right we think that this open capi 3.1

00:14:46,490 --> 00:14:50,450
memory interface is really something

00:14:48,620 --> 00:14:52,010
substantial to work with we already have

00:14:50,450 --> 00:14:54,410
a lot of work going on with the open

00:14:52,010 --> 00:14:55,760
copy 3.0 and the LPC modes that we've

00:14:54,410 --> 00:14:58,610
talked about in some of the other groups

00:14:55,760 --> 00:15:00,740
especially some of the heterogeneous and

00:14:58,610 --> 00:15:04,730
hybrid memory work that Ken talked about

00:15:00,740 --> 00:15:06,650
earlier and we need to also support a

00:15:04,730 --> 00:15:08,570
roadmap for these standardized dims so

00:15:06,650 --> 00:15:10,640
that's billing another ecosystem too

00:15:08,570 --> 00:15:13,040
right through the open power ecosystem

00:15:10,640 --> 00:15:15,260
to enable all of your memory vendors to

00:15:13,040 --> 00:15:17,690
go off and build these new dims right

00:15:15,260 --> 00:15:19,640
because that's it's a huge undertaking

00:15:17,690 --> 00:15:21,380
for them right they see you know they

00:15:19,640 --> 00:15:22,760
they know how to test industry standard

00:15:21,380 --> 00:15:24,830
dims that's what they like they can

00:15:22,760 --> 00:15:26,210
touch their own memories through the

00:15:24,830 --> 00:15:27,800
interface they can wiggle the bits on

00:15:26,210 --> 00:15:29,810
those now they have to talk through a

00:15:27,800 --> 00:15:31,310
buffer chip right but we've been through

00:15:29,810 --> 00:15:33,350
that in the past with the buffered dim

00:15:31,310 --> 00:15:34,670
solutions for the pH right we know how

00:15:33,350 --> 00:15:37,100
to work with them on that

00:15:34,670 --> 00:15:39,050
we know what their concerns are so we're

00:15:37,100 --> 00:15:41,120
also working with them to figure out all

00:15:39,050 --> 00:15:42,740
the best test solutions to build in to

00:15:41,120 --> 00:15:44,660
buffer chips that should be standardized

00:15:42,740 --> 00:15:46,460
in the buffer chips to try to build up

00:15:44,660 --> 00:15:48,050
this ecosystem to drive the cost down on

00:15:46,460 --> 00:15:51,800
these Dems right so it's not just

00:15:48,050 --> 00:15:54,290
thinking about innovation as really

00:15:51,800 --> 00:15:56,360
working on the accelerator part and all

00:15:54,290 --> 00:15:57,590
the you know speeding up and blending

00:15:56,360 --> 00:15:59,270
all the heterogeneous stuff together

00:15:57,590 --> 00:16:01,880
that's a huge component on where we need

00:15:59,270 --> 00:16:03,470
to move forward but there's also the now

00:16:01,880 --> 00:16:05,300
part of it right we need to start making

00:16:03,470 --> 00:16:07,070
dims now at the support the next

00:16:05,300 --> 00:16:09,560
generation of systems where we're

00:16:07,070 --> 00:16:12,230
replacing direct-attached memory right

00:16:09,560 --> 00:16:14,840
so at that standpoint we need to start

00:16:12,230 --> 00:16:16,940
building up that ecosystem through open

00:16:14,840 --> 00:16:18,470
power as well so that anybody can go off

00:16:16,940 --> 00:16:20,510
and start building dims if they want to

00:16:18,470 --> 00:16:22,160
right that's the way to really drive an

00:16:20,510 --> 00:16:25,040
ecosystem so we're working hard at that

00:16:22,160 --> 00:16:27,230
as well so what that includes is

00:16:25,040 --> 00:16:29,650
building up reference designs I'll show

00:16:27,230 --> 00:16:32,120
you one in a few minutes here

00:16:29,650 --> 00:16:33,590
characterization qualification code for

00:16:32,120 --> 00:16:34,880
the system developers that are going to

00:16:33,590 --> 00:16:37,010
build something with these DIMMs and how

00:16:34,880 --> 00:16:38,510
do they qualify their memory subsystems

00:16:37,010 --> 00:16:40,400
things like that

00:16:38,510 --> 00:16:41,660
and then also the verification IP what

00:16:40,400 --> 00:16:43,160
if somebody wants to go and build their

00:16:41,660 --> 00:16:44,750
own buffer chip to put on these DIMMs

00:16:43,160 --> 00:16:46,910
right we want to make sure that they

00:16:44,750 --> 00:16:49,040
have IP that's available to them that

00:16:46,910 --> 00:16:51,080
they can go and drive their emulation

00:16:49,040 --> 00:16:54,260
environments and simulation environments

00:16:51,080 --> 00:16:56,570
and things like that so the goal here is

00:16:54,260 --> 00:16:58,520
we have to support not just you know the

00:16:56,570 --> 00:17:01,160
research part of it and what we're doing

00:16:58,520 --> 00:17:02,720
in the workgroup right now but I think

00:17:01,160 --> 00:17:04,400
that the work group needs expand and

00:17:02,720 --> 00:17:06,829
bring in the concerns of more people in

00:17:04,400 --> 00:17:10,190
the area for you know the research side

00:17:06,829 --> 00:17:10,970
of it and then also just driving lower

00:17:10,190 --> 00:17:14,390
cost

00:17:10,970 --> 00:17:16,160
Denton solutions as well so here's just

00:17:14,390 --> 00:17:18,079
a quick chart we've talked about in the

00:17:16,160 --> 00:17:20,260
workgroup a bit this gives you kind of a

00:17:18,079 --> 00:17:23,329
picture of your bandwidth right so

00:17:20,260 --> 00:17:25,550
across different you know some different

00:17:23,329 --> 00:17:27,410
comparisons so this is you know just

00:17:25,550 --> 00:17:28,700
theoretical maximums for sustained

00:17:27,410 --> 00:17:32,110
bandwidth right just for discussion

00:17:28,700 --> 00:17:35,390
purpose so so if you think of a ddr4

00:17:32,110 --> 00:17:36,620
3,200 M this is your near-term right so

00:17:35,390 --> 00:17:39,470
that's you know kind of industry

00:17:36,620 --> 00:17:41,060
standard now one channel 64 bits per

00:17:39,470 --> 00:17:43,490
channel or yes it's four bits per

00:17:41,060 --> 00:17:45,530
channel compare that to your open capi

00:17:43,490 --> 00:17:48,470
by eight you get the by eight read the

00:17:45,530 --> 00:17:50,530
buy it right so you're 204

00:17:48,470 --> 00:17:53,000
bandwidth for eat under floor for right

00:17:50,530 --> 00:17:55,940
so if you do a comparison between your

00:17:53,000 --> 00:17:59,030
max D re bandwidth to the open copyright

00:17:55,940 --> 00:18:00,830
so you can actually run you can get a

00:17:59,030 --> 00:18:02,360
hundred percent read bandwidth and

00:18:00,830 --> 00:18:04,130
you're not even really using any of the

00:18:02,360 --> 00:18:06,080
right side on the open capi so think of

00:18:04,130 --> 00:18:07,280
all the stuff that the other items that

00:18:06,080 --> 00:18:08,870
you could be doing you could send down a

00:18:07,280 --> 00:18:10,309
lot of stuff there for your emerging

00:18:08,870 --> 00:18:11,780
memory technology you can really start

00:18:10,309 --> 00:18:14,480
to blend stuff with the capabilities

00:18:11,780 --> 00:18:16,970
that are out there dr v right which

00:18:14,480 --> 00:18:18,679
isn't too far off the ddr5 dim is

00:18:16,970 --> 00:18:20,450
actually you know it's like cutting a

00:18:18,679 --> 00:18:22,700
ddr4 dimm in half and you have two

00:18:20,450 --> 00:18:24,470
32-bit channels there right so you get a

00:18:22,700 --> 00:18:25,909
little more flexibility and driving

00:18:24,470 --> 00:18:27,980
bandwidth right bandwidth and read

00:18:25,909 --> 00:18:30,559
bandwidth at the same time but it's

00:18:27,980 --> 00:18:32,539
still you know you you know so you can

00:18:30,559 --> 00:18:34,400
you can do two things at once right

00:18:32,539 --> 00:18:36,230
or you have the same kind of overall

00:18:34,400 --> 00:18:38,720
bandwidth calculations for total reach

00:18:36,230 --> 00:18:40,720
or right but allows you to learn more

00:18:38,720 --> 00:18:43,309
flexibility in your solutions as well

00:18:40,720 --> 00:18:44,990
then when you get down the road really

00:18:43,309 --> 00:18:46,400
far down the road I don't even know you

00:18:44,990 --> 00:18:49,159
know you always say this this is what

00:18:46,400 --> 00:18:51,679
ddr5 is max out for 6400 but are we ever

00:18:49,159 --> 00:18:53,330
going to get there who knows but what a

00:18:51,679 --> 00:18:55,039
shows here is you know just some other

00:18:53,330 --> 00:18:57,260
calculations moving on but by the time

00:18:55,039 --> 00:18:59,630
you get here this would be further down

00:18:57,260 --> 00:19:01,400
the road where your OMI interface your

00:18:59,630 --> 00:19:03,500
open capping memory interface will

00:19:01,400 --> 00:19:08,059
probably much faster than 25 probably 30

00:19:03,500 --> 00:19:09,380
to 250 at that point so I'm gonna skip

00:19:08,059 --> 00:19:11,750
ahead a little bit cuz I'm probably

00:19:09,380 --> 00:19:13,429
getting short on time so what we want to

00:19:11,750 --> 00:19:14,659
do in the in the memory work group right

00:19:13,429 --> 00:19:16,429
now right there's been a lot of

00:19:14,659 --> 00:19:18,650
conversations and how we blend this with

00:19:16,429 --> 00:19:20,450
what open cappy's doing what the

00:19:18,650 --> 00:19:21,650
accelerator work groups are doing and

00:19:20,450 --> 00:19:23,570
all that and I think we need to have

00:19:21,650 --> 00:19:25,700
more facilitation on those discussions

00:19:23,570 --> 00:19:26,809
and just really figure out how we want

00:19:25,700 --> 00:19:29,120
to move forward and what the right

00:19:26,809 --> 00:19:30,710
direction is but we need to have like

00:19:29,120 --> 00:19:33,250
loops we need to have some sort of

00:19:30,710 --> 00:19:35,750
hardware support right we need to have

00:19:33,250 --> 00:19:37,370
in the wrong button here we need to have

00:19:35,750 --> 00:19:40,070
the reference designs to support the

00:19:37,370 --> 00:19:42,919
open copy 3 at all in 3.1 verification

00:19:40,070 --> 00:19:44,570
IP open power partners that can provide

00:19:42,919 --> 00:19:46,190
open power ready hardware we've already

00:19:44,570 --> 00:19:49,130
seen a lot of stuff being developed

00:19:46,190 --> 00:19:50,900
right software support right I'm a

00:19:49,130 --> 00:19:52,730
hardware guy we I want to get more

00:19:50,900 --> 00:19:53,960
people involved on the software side of

00:19:52,730 --> 00:19:55,490
things right I've seen a lot of great

00:19:53,960 --> 00:19:57,080
presentations earlier I think we could

00:19:55,490 --> 00:19:59,240
probably bring in a lot of what's been

00:19:57,080 --> 00:20:01,250
done what the open can't be snap bring

00:19:59,240 --> 00:20:02,360
it in here for developing these and

00:20:01,250 --> 00:20:04,280
applying it to

00:20:02,360 --> 00:20:06,320
being the new heterogeneous memory

00:20:04,280 --> 00:20:09,530
solutions for plugging into where

00:20:06,320 --> 00:20:12,320
direct-attached would be so this is kind

00:20:09,530 --> 00:20:14,120
of a quick overview of what we've been

00:20:12,320 --> 00:20:16,370
working on in the in the task group is

00:20:14,120 --> 00:20:20,270
developing what this interface is here

00:20:16,370 --> 00:20:22,880
right so the idea is to have kind of

00:20:20,270 --> 00:20:25,430
hide this whole open Cappy stack from

00:20:22,880 --> 00:20:28,040
the developer on the FPGA right so they

00:20:25,430 --> 00:20:29,480
can develop their own abstract that you

00:20:28,040 --> 00:20:32,090
know their own memory functional unit

00:20:29,480 --> 00:20:34,490
that hides out here and we just talk AXI

00:20:32,090 --> 00:20:35,870
right so axe is very you know when

00:20:34,490 --> 00:20:37,670
you're working with FPGA is it's pretty

00:20:35,870 --> 00:20:39,020
industry standard it's out there for you

00:20:37,670 --> 00:20:41,270
know this is most of the work obviously

00:20:39,020 --> 00:20:43,970
it's been done with other zhiling stuff

00:20:41,270 --> 00:20:45,980
but the AXI is known right so to

00:20:43,970 --> 00:20:48,290
abstract out what you have to do here it

00:20:45,980 --> 00:20:51,050
makes things a whole lot easier so or

00:20:48,290 --> 00:20:52,910
specify how this would work right in an

00:20:51,050 --> 00:20:55,580
open power system not just with open

00:20:52,910 --> 00:20:57,800
Cappy so in an open power system there's

00:20:55,580 --> 00:21:00,020
a couple nuances right because if you

00:20:57,800 --> 00:21:01,970
take the open Cappy interface and you

00:21:00,020 --> 00:21:03,530
plug it into another system they might

00:21:01,970 --> 00:21:05,540
use meta bits and things like that in a

00:21:03,530 --> 00:21:07,370
different way right so we have to spec

00:21:05,540 --> 00:21:09,050
out you know there's there'll be a bus

00:21:07,370 --> 00:21:11,300
that comes out across here it's going to

00:21:09,050 --> 00:21:12,710
present a command and it'll have meta

00:21:11,300 --> 00:21:14,240
bits right you got it you have to know

00:21:12,710 --> 00:21:16,520
how to handle those meta bits anything's

00:21:14,240 --> 00:21:18,050
you know particular to the open power

00:21:16,520 --> 00:21:20,210
all right so that's what we want to

00:21:18,050 --> 00:21:21,590
focus in the open power work group is

00:21:20,210 --> 00:21:25,490
how does it work with the open power

00:21:21,590 --> 00:21:27,890
machines this kind of shows the abstract

00:21:25,490 --> 00:21:30,890
of what would be on the verification IP

00:21:27,890 --> 00:21:33,350
so this is actually already in place and

00:21:30,890 --> 00:21:36,710
being used for the development of the

00:21:33,350 --> 00:21:40,550
next generation memory buffer and it's

00:21:36,710 --> 00:21:42,260
driving the it's driving the emulation

00:21:40,550 --> 00:21:44,000
pattern so we have test engines and

00:21:42,260 --> 00:21:46,730
they're obviously not everything's

00:21:44,000 --> 00:21:48,290
listed here but there's a lot of great

00:21:46,730 --> 00:21:49,520
stuff here that emulates the traffic

00:21:48,290 --> 00:21:51,680
that would normally come from the host

00:21:49,520 --> 00:21:56,060
so you can do very precise emulation and

00:21:51,680 --> 00:21:58,100
simulation and then what we can do is

00:21:56,060 --> 00:22:00,350
you can take that same image and plug it

00:21:58,100 --> 00:22:02,720
into the FPGA on a test platform that

00:22:00,350 --> 00:22:05,180
you would give to a vendor right so this

00:22:02,720 --> 00:22:06,380
test platform is also in development

00:22:05,180 --> 00:22:09,290
right and we'd like to make this a

00:22:06,380 --> 00:22:11,570
reference design that's provided out as

00:22:09,290 --> 00:22:13,250
needed but this would go to memory

00:22:11,570 --> 00:22:15,320
vendors they can plug in that same

00:22:13,250 --> 00:22:15,830
verification IP they can drive the open

00:22:15,320 --> 00:22:18,620
cap each

00:22:15,830 --> 00:22:21,649
on the board this happens to be a bu9 P

00:22:18,620 --> 00:22:25,220
on there so it's set up the drive nine

00:22:21,649 --> 00:22:27,289
or sorry for open kappa channels we have

00:22:25,220 --> 00:22:29,269
you know two slim Sasa's over there to

00:22:27,289 --> 00:22:31,549
do other work but this is a general

00:22:29,269 --> 00:22:34,159
concept right so this would have a BMC

00:22:31,549 --> 00:22:36,140
on it that can run our our open power

00:22:34,159 --> 00:22:38,450
toolkit all the corona stuff there's a

00:22:36,140 --> 00:22:39,919
lot of great things going on here but

00:22:38,450 --> 00:22:43,700
it'd be great to be able to do something

00:22:39,919 --> 00:22:46,340
here with snap as well so we can talk a

00:22:43,700 --> 00:22:51,860
lot more any with anybody offline about

00:22:46,340 --> 00:22:53,659
this after the this discussion but next

00:22:51,860 --> 00:22:55,519
we as I said mentioned before we need to

00:22:53,659 --> 00:22:57,350
get more software support right we want

00:22:55,519 --> 00:22:59,539
to get more support for different types

00:22:57,350 --> 00:23:01,970
of characterization qualification code

00:22:59,539 --> 00:23:03,880
right there'll be a lot in there that's

00:23:01,970 --> 00:23:06,889
available for testing the standardized

00:23:03,880 --> 00:23:09,889
differential dims but as people start to

00:23:06,889 --> 00:23:11,210
build interesting you know different

00:23:09,889 --> 00:23:13,760
types of heterogeneous memory that's

00:23:11,210 --> 00:23:15,500
going to plug into a DDM interface we

00:23:13,760 --> 00:23:17,389
imagine that you know there'll be other

00:23:15,500 --> 00:23:19,789
IPE right that would go out onto the

00:23:17,389 --> 00:23:21,980
fpga they use the drive the workload to

00:23:19,789 --> 00:23:26,510
test specific devices so it's a very

00:23:21,980 --> 00:23:28,399
flexible platform right let's see here

00:23:26,510 --> 00:23:29,990
what else so we just need to do that

00:23:28,399 --> 00:23:31,429
bring more discussion to the workgroup

00:23:29,990 --> 00:23:34,070
and really figure out how we want to

00:23:31,429 --> 00:23:35,450
move forward so that's really how what i

00:23:34,070 --> 00:23:37,490
want to talk about with you know

00:23:35,450 --> 00:23:39,889
facilitating the IP this is just a chart

00:23:37,490 --> 00:23:41,330
about you know what the overall listed

00:23:39,889 --> 00:23:44,179
description and scope of the current

00:23:41,330 --> 00:23:47,240
workgroup is and i think we needed to

00:23:44,179 --> 00:23:49,250
decide if this really applies and how we

00:23:47,240 --> 00:23:50,870
want to move forward with both the open

00:23:49,250 --> 00:23:52,940
power memory workgroup do we need one

00:23:50,870 --> 00:23:58,690
and open capi how do we make this all

00:23:52,940 --> 00:23:58,690
work together so that's it so thank you

00:23:59,160 --> 00:24:01,220

YouTube URL: https://www.youtube.com/watch?v=3_bFOtiq3Xk


