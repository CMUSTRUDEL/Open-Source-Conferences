Title: POWER9 Support in coreboot - Michał Żygowski, 3mdeb Embedded Systems Consulting
Publication date: 2020-09-21
Playlist: OpenPOWER Summit NA 2020
Description: 
	POWER9 Support in coreboot - Michał Żygowski, 3mdeb Embedded Systems Consulting

Speakers: Michał Żygowski

coreboot is an open source firmware development framework and its history is reaching 1999. Its primary goal was to boot the machine as fast as possible and launch a Linux kernel. OpenPOWER firmware has a similar goal: initialize the hardware and launch a Linux kernel. coreboot has always been in favor of open hardware and open firmware solutions. The best proof is that the first open firmware implementation for RISC-V appeared right here, in coreboot. Now the time comes for OpenPOWER. This talk will describe the plans of porting the POWER9 architecture to coreboot along with Talos II and Talos II Lite machines. With joint cooperation of 3mdeb Embedded Systems Consulting, Insurgo Technologies Libres/Open Technologies and Raptor Computing Systems this plan may become a reality in the near future. In this presentation, the details of the coreboot port for POWER9 will be discussed covering hostboot, skiboot and petitboot and how they fit into coreboot firmware model.
Captions: 
	00:00:00,080 --> 00:00:03,919
hello everybody thank you for attending

00:00:02,560 --> 00:00:07,320
my presentation on

00:00:03,919 --> 00:00:11,040
vampire summit north america

00:00:07,320 --> 00:00:14,799
2020 my presentation will be about

00:00:11,040 --> 00:00:14,799
power 9 support and core boot

00:00:15,040 --> 00:00:21,199
i will uh quickly introduce

00:00:18,160 --> 00:00:23,039
myself to you and as well i will

00:00:21,199 --> 00:00:24,240
uh describe who's involved in the

00:00:23,039 --> 00:00:27,199
project

00:00:24,240 --> 00:00:27,760
why we chose core boots what use cases

00:00:27,199 --> 00:00:30,160
we

00:00:27,760 --> 00:00:30,960
we do have in mind or development

00:00:30,160 --> 00:00:34,320
roadmap

00:00:30,960 --> 00:00:37,520
future plans we'll also explain you

00:00:34,320 --> 00:00:40,800
what dasharow is what are our plans for

00:00:37,520 --> 00:00:43,280
validation of the hardware and firmware

00:00:40,800 --> 00:00:45,840
and uh at the end we will jump into the

00:00:43,280 --> 00:00:45,840
discussions

00:00:46,559 --> 00:00:52,480
so uh quickly about me

00:00:50,000 --> 00:00:53,760
my name is michael jakovsky and i'm a

00:00:52,480 --> 00:00:58,719
firmware engineer in

00:00:53,760 --> 00:01:01,120
frame depth embedded systems consulting

00:00:58,719 --> 00:01:03,680
i'm mainly interested in core boot

00:01:01,120 --> 00:01:06,960
advanced hardware firmware features

00:01:03,680 --> 00:01:06,960
and security solutions

00:01:08,000 --> 00:01:14,479
so what really firmware is

00:01:11,520 --> 00:01:16,400
firmware is a class of software that

00:01:14,479 --> 00:01:18,240
helps in low-level installation and

00:01:16,400 --> 00:01:21,680
control of your hardware

00:01:18,240 --> 00:01:23,439
it is important for oems and oedems to

00:01:21,680 --> 00:01:24,479
depend on the firmware to provide very

00:01:23,439 --> 00:01:26,320
secure

00:01:24,479 --> 00:01:28,159
compatible and high performance

00:01:26,320 --> 00:01:31,119
environment for customers

00:01:28,159 --> 00:01:31,759
operating systems and applications this

00:01:31,119 --> 00:01:34,079
is also

00:01:31,759 --> 00:01:36,560
important for cloud providers which

00:01:34,079 --> 00:01:38,479
depend on the firmware configuration

00:01:36,560 --> 00:01:41,119
to use advanced platform security

00:01:38,479 --> 00:01:43,040
features and virtualization to

00:01:41,119 --> 00:01:44,320
harden their virtual machines in their

00:01:43,040 --> 00:01:47,119
infrastructure

00:01:44,320 --> 00:01:49,520
for example google cloud's shielded

00:01:47,119 --> 00:01:52,840
virtual machines

00:01:49,520 --> 00:01:55,759
also civilize provide server

00:01:52,840 --> 00:01:58,000
providers also depend on the firmware

00:01:55,759 --> 00:01:58,960
in order to efficiently leverage the

00:01:58,000 --> 00:02:00,560
security

00:01:58,960 --> 00:02:03,759
runtime management capabilities in their

00:02:00,560 --> 00:02:06,880
solutions you can also

00:02:03,759 --> 00:02:08,879
often see some bios customizations and

00:02:06,880 --> 00:02:10,399
options to increase their performance

00:02:08,879 --> 00:02:15,200
which is very crucial and

00:02:10,399 --> 00:02:17,280
high performance computing solutions

00:02:15,200 --> 00:02:18,319
also the analytic companies depend on

00:02:17,280 --> 00:02:20,640
the firmware to

00:02:18,319 --> 00:02:22,720
fully utilize the underlying hardware

00:02:20,640 --> 00:02:25,920
and tune it to the particular

00:02:22,720 --> 00:02:28,959
workload so

00:02:25,920 --> 00:02:31,599
why core boot exactly

00:02:28,959 --> 00:02:32,480
we chose carbon because it is an open

00:02:31,599 --> 00:02:34,879
source firmware

00:02:32,480 --> 00:02:37,360
framework and development framework

00:02:34,879 --> 00:02:40,480
which history is reaching

00:02:37,360 --> 00:02:42,319
the 1999

00:02:40,480 --> 00:02:44,640
and its primary goal was to boot the

00:02:42,319 --> 00:02:46,400
machine as fast as possible and launch a

00:02:44,640 --> 00:02:48,800
linux kernel

00:02:46,400 --> 00:02:50,239
also the same goes for the open power

00:02:48,800 --> 00:02:53,120
primer currently

00:02:50,239 --> 00:02:55,120
initialize the hardware as much as

00:02:53,120 --> 00:02:57,840
possible and as quickly as possible

00:02:55,120 --> 00:02:58,480
and then launch the target operating

00:02:57,840 --> 00:03:02,239
system

00:02:58,480 --> 00:03:03,440
preferably in linux coreboot has always

00:03:02,239 --> 00:03:06,080
been

00:03:03,440 --> 00:03:07,680
in favor of open hardware and open

00:03:06,080 --> 00:03:10,159
premier solutions

00:03:07,680 --> 00:03:11,599
the best proof for that is that the

00:03:10,159 --> 00:03:13,040
first open firmware inflation

00:03:11,599 --> 00:03:16,239
implementation for

00:03:13,040 --> 00:03:19,680
risk 5 architecture appears right here

00:03:16,239 --> 00:03:22,800
in core boot now the time comes

00:03:19,680 --> 00:03:26,000
for open power one may of course

00:03:22,800 --> 00:03:27,120
run congruent for emulated power pc64 in

00:03:26,000 --> 00:03:29,360
qmu

00:03:27,120 --> 00:03:30,319
but that's not fun even the slightest

00:03:29,360 --> 00:03:32,400
bit

00:03:30,319 --> 00:03:34,319
nothing can replace the real hardware

00:03:32,400 --> 00:03:38,239
experience

00:03:34,319 --> 00:03:40,239
so who uses corbot exactly

00:03:38,239 --> 00:03:43,200
there are companies that work hard and

00:03:40,239 --> 00:03:44,959
push uh keep pushing x863 competitors

00:03:43,200 --> 00:03:47,519
for more open firmware

00:03:44,959 --> 00:03:48,080
one of the main pioneers is google which

00:03:47,519 --> 00:03:51,200
promotes

00:03:48,080 --> 00:03:54,799
coreboot with their chromebook devices

00:03:51,200 --> 00:03:56,640
coreboot is also used by tesla siemens

00:03:54,799 --> 00:04:00,319
and probably by many other companies we

00:03:56,640 --> 00:04:04,480
are not aware of

00:04:00,319 --> 00:04:08,319
core core boot uh is also a recognized

00:04:04,480 --> 00:04:11,280
brand uh for open source firmware

00:04:08,319 --> 00:04:13,280
uh to be honest it is probably the top

00:04:11,280 --> 00:04:14,080
two and the most recognizable firmware

00:04:13,280 --> 00:04:16,320
solutions

00:04:14,080 --> 00:04:17,840
right after ufi implementations like

00:04:16,320 --> 00:04:20,959
edk2

00:04:17,840 --> 00:04:23,680
that means if power

00:04:20,959 --> 00:04:27,280
would be supported by coreboot it should

00:04:23,680 --> 00:04:29,919
become more powerful as well

00:04:27,280 --> 00:04:30,800
core boot is also known to be super fast

00:04:29,919 --> 00:04:32,960
and lightweight

00:04:30,800 --> 00:04:35,919
so the boot speed should be lower

00:04:32,960 --> 00:04:38,000
compared to open power firmware

00:04:35,919 --> 00:04:39,840
the main programming language in core

00:04:38,000 --> 00:04:42,720
boot is c

00:04:39,840 --> 00:04:44,400
in compare comparing to c plus plus

00:04:42,720 --> 00:04:45,440
which is the main language for houseboat

00:04:44,400 --> 00:04:49,040
for example

00:04:45,440 --> 00:04:51,919
it is much more simple and lightweight

00:04:49,040 --> 00:04:52,960
although c lacks many advanced features

00:04:51,919 --> 00:04:56,160
of c plus plus

00:04:52,960 --> 00:04:58,479
like exceptions runtime type

00:04:56,160 --> 00:05:02,080
information objective programming but

00:04:58,479 --> 00:05:02,080
this is it is much faster and

00:05:02,160 --> 00:05:09,759
it is quicker for some new person to

00:05:05,520 --> 00:05:09,759
dive into the code and start development

00:05:09,840 --> 00:05:12,800
also uh

00:05:13,440 --> 00:05:21,360
there is a kind of

00:05:17,199 --> 00:05:22,080
um saying that one firmware to rule them

00:05:21,360 --> 00:05:24,880
all

00:05:22,080 --> 00:05:26,639
one fret model for all so corbus

00:05:24,880 --> 00:05:29,199
supports many architectures

00:05:26,639 --> 00:05:30,080
and we should use one firmware for all

00:05:29,199 --> 00:05:33,199
platforms

00:05:30,080 --> 00:05:34,400
to have the same security model and have

00:05:33,199 --> 00:05:38,000
the most

00:05:34,400 --> 00:05:40,639
unified code um

00:05:38,000 --> 00:05:42,080
from the other uh similarities i have

00:05:40,639 --> 00:05:44,000
found and differences

00:05:42,080 --> 00:05:45,600
is that the both projects seem to use

00:05:44,000 --> 00:05:48,720
the garrett for code

00:05:45,600 --> 00:05:50,720
view cardboard for example

00:05:48,720 --> 00:05:52,240
has its own public instance of the

00:05:50,720 --> 00:05:56,160
garrett which is

00:05:52,240 --> 00:05:59,520
available at review.carbon.org

00:05:56,160 --> 00:06:02,720
while powers seem to use an internal one

00:05:59,520 --> 00:06:05,919
which i haven't been able to find

00:06:02,720 --> 00:06:06,319
it's also easier to find curb developers

00:06:05,919 --> 00:06:09,919
than

00:06:06,319 --> 00:06:09,919
open power firmware developers

00:06:10,880 --> 00:06:16,960
and who is involved in the project

00:06:14,080 --> 00:06:18,960
so basically it started with insurgo

00:06:16,960 --> 00:06:21,520
technologies

00:06:18,960 --> 00:06:23,440
uh libre's open technologies who is the

00:06:21,520 --> 00:06:26,560
initiator of the project

00:06:23,440 --> 00:06:28,240
as well as its main sponsor inserco

00:06:26,560 --> 00:06:31,520
sells their own product called

00:06:28,240 --> 00:06:34,960
privacy beast x 230

00:06:31,520 --> 00:06:38,319
it is a custom refurbished lenovo laptop

00:06:34,960 --> 00:06:39,600
certified by cubesaras it contains open

00:06:38,319 --> 00:06:40,720
source and hardened firmware

00:06:39,600 --> 00:06:43,919
implementation

00:06:40,720 --> 00:06:44,479
based on the core boot and heads the

00:06:43,919 --> 00:06:46,800
product

00:06:44,479 --> 00:06:48,479
is known from the secure process of

00:06:46,800 --> 00:06:50,720
firmware ownership

00:06:48,479 --> 00:06:51,919
a first class and first ever done in the

00:06:50,720 --> 00:06:54,240
word mechanism

00:06:51,919 --> 00:06:56,560
to regenerate secrets and mitigate

00:06:54,240 --> 00:06:59,599
supply chain attacks

00:06:56,560 --> 00:07:02,319
however x230

00:06:59,599 --> 00:07:03,120
is quite an old laptop almost 7 years

00:07:02,319 --> 00:07:05,120
old

00:07:03,120 --> 00:07:07,199
and there seemed to be no possibility to

00:07:05,120 --> 00:07:10,319
move to a more modern one

00:07:07,199 --> 00:07:11,680
why because x86 architecture is bloated

00:07:10,319 --> 00:07:14,560
with binary blobs

00:07:11,680 --> 00:07:15,199
responsible for hardware initialization

00:07:14,560 --> 00:07:18,960
and this

00:07:15,199 --> 00:07:21,680
is likely will not change in the future

00:07:18,960 --> 00:07:23,520
that is why surgo looks far ahead and

00:07:21,680 --> 00:07:25,199
turned their eyes on open hardware

00:07:23,520 --> 00:07:28,639
architecture

00:07:25,199 --> 00:07:29,599
such as power user got together with

00:07:28,639 --> 00:07:31,919
frame dev

00:07:29,599 --> 00:07:33,120
want to promote open premier solutions

00:07:31,919 --> 00:07:34,960
and as well as

00:07:33,120 --> 00:07:37,440
and as a fellow colleagues in a ziegler

00:07:34,960 --> 00:07:39,840
profession cooperate to make open

00:07:37,440 --> 00:07:40,960
and fully ownable hardware accessible to

00:07:39,840 --> 00:07:42,639
everyone

00:07:40,960 --> 00:07:44,960
frame depth with much experience in the

00:07:42,639 --> 00:07:47,039
firmware field will be responsible for

00:07:44,960 --> 00:07:49,599
porting the power 9 architecture to core

00:07:47,039 --> 00:07:51,759
boot with talos 2 and dallas to light as

00:07:49,599 --> 00:07:53,840
reference platforms

00:07:51,759 --> 00:07:55,599
these platforms are designed by raptor

00:07:53,840 --> 00:07:57,360
computing systems

00:07:55,599 --> 00:07:59,280
and this company is supporting us with

00:07:57,360 --> 00:08:01,199
the hardware

00:07:59,280 --> 00:08:03,599
prem the app also plans to offer

00:08:01,199 --> 00:08:05,840
products based on open power 9

00:08:03,599 --> 00:08:07,440
platforms as well as software and

00:08:05,840 --> 00:08:10,240
firmware development services

00:08:07,440 --> 00:08:10,240
and support

00:08:10,479 --> 00:08:16,960
so uh again why core boots because

00:08:14,080 --> 00:08:18,160
primed up loves car boot we have a

00:08:16,960 --> 00:08:19,919
strong presence and

00:08:18,160 --> 00:08:21,520
boot firmware for network appliance and

00:08:19,919 --> 00:08:24,240
firewall devices

00:08:21,520 --> 00:08:26,639
we also did srtm and drtm

00:08:24,240 --> 00:08:29,199
implementations in the firmware

00:08:26,639 --> 00:08:31,039
uh we have performed tpm 2.0 enabling

00:08:29,199 --> 00:08:34,399
for various platforms

00:08:31,039 --> 00:08:37,839
we also did immune enablement and other

00:08:34,399 --> 00:08:39,919
hardware features enabling we are very

00:08:37,839 --> 00:08:41,760
familiar with low-level development and

00:08:39,919 --> 00:08:44,640
validation integration

00:08:41,760 --> 00:08:44,959
we have for example uh implemented bits

00:08:44,640 --> 00:08:48,399
and

00:08:44,959 --> 00:08:51,120
chipset as a payload in core boot

00:08:48,399 --> 00:08:53,279
we also have various open source

00:08:51,120 --> 00:08:56,000
firmware trainings and workshops

00:08:53,279 --> 00:08:57,279
we argenize grub and cubesaws mini

00:08:56,000 --> 00:08:59,440
summit

00:08:57,279 --> 00:09:01,200
and of course we are quite active in

00:08:59,440 --> 00:09:03,839
open source foreign community for over

00:09:01,200 --> 00:09:03,839
five years

00:09:04,000 --> 00:09:08,240
so what use case we have in mind our

00:09:07,120 --> 00:09:11,120
main use case

00:09:08,240 --> 00:09:14,000
is to kind of mimic the current open

00:09:11,120 --> 00:09:16,880
firmware put process

00:09:14,000 --> 00:09:18,800
although the host boot mostly host boot

00:09:16,880 --> 00:09:21,920
will be replaced with core boot

00:09:18,800 --> 00:09:23,680
the boot process will be quite similar

00:09:21,920 --> 00:09:27,120
to the open power one

00:09:23,680 --> 00:09:28,560
so in place of the hose boot we have the

00:09:27,120 --> 00:09:31,519
core boot which

00:09:28,560 --> 00:09:32,480
consists of stages like boot block ram

00:09:31,519 --> 00:09:35,839
stage

00:09:32,480 --> 00:09:37,680
and drum stage which then is responsible

00:09:35,839 --> 00:09:40,480
which then the ram stage is responsible

00:09:37,680 --> 00:09:42,640
for loading the payload

00:09:40,480 --> 00:09:44,640
the similarity the similarity in the

00:09:42,640 --> 00:09:47,200
open power framework is that the payload

00:09:44,640 --> 00:09:48,240
should be the ski board which this

00:09:47,200 --> 00:09:51,680
keyboard later

00:09:48,240 --> 00:09:54,800
launches the pettit boot a k exec based

00:09:51,680 --> 00:09:57,120
bootloader in our use case

00:09:54,800 --> 00:09:58,240
we want to replace the host boot with

00:09:57,120 --> 00:10:00,560
core boot

00:09:58,240 --> 00:10:02,320
and then the pet it would with heads

00:10:00,560 --> 00:10:04,959
heads is a

00:10:02,320 --> 00:10:06,640
very similar to petite boot uh it also

00:10:04,959 --> 00:10:09,920
is based on linux kernel and k

00:10:06,640 --> 00:10:13,360
exec mechanism although it

00:10:09,920 --> 00:10:14,240
it has an improved and hardened security

00:10:13,360 --> 00:10:17,680
model

00:10:14,240 --> 00:10:20,880
it allows for signature verifications

00:10:17,680 --> 00:10:20,880
and firmware ownership

00:10:21,120 --> 00:10:26,000
so how our roadmap looks looks like

00:10:26,800 --> 00:10:30,640
we are quite on the beginning of our

00:10:29,519 --> 00:10:33,360
journey

00:10:30,640 --> 00:10:34,560
we just started in september with the

00:10:33,360 --> 00:10:37,040
implementation

00:10:34,560 --> 00:10:39,200
which was preceded with initial

00:10:37,040 --> 00:10:43,040
evaluation which took us

00:10:39,200 --> 00:10:46,640
about one month and now we start

00:10:43,040 --> 00:10:50,880
porting the core boot and our plan for

00:10:46,640 --> 00:10:50,880
for example september is to finish

00:10:51,279 --> 00:10:55,440
the boot block phase so we should have

00:10:53,279 --> 00:10:57,279
for example

00:10:55,440 --> 00:10:59,360
initial serial output and boutique

00:10:57,279 --> 00:11:02,079
machine

00:10:59,360 --> 00:11:03,360
so for now it will uh cover only the

00:11:02,079 --> 00:11:06,959
host book part

00:11:03,360 --> 00:11:10,560
um and later we will

00:11:06,959 --> 00:11:13,680
also plan to support power 10 and maybe

00:11:10,560 --> 00:11:17,200
uh then hypervisor

00:11:13,680 --> 00:11:20,320
um how how the uh how the open

00:11:17,200 --> 00:11:22,160
firm open power firmware boot flow fits

00:11:20,320 --> 00:11:23,760
into the core boot booting and device

00:11:22,160 --> 00:11:26,800
model

00:11:23,760 --> 00:11:30,160
of course it is mapping certain

00:11:26,800 --> 00:11:33,120
installation steps to curb stages

00:11:30,160 --> 00:11:34,959
so how it would look like for example

00:11:33,120 --> 00:11:36,079
for code boot we have good block room

00:11:34,959 --> 00:11:39,200
stage boost car

00:11:36,079 --> 00:11:40,079
and drive stage and house boot covers

00:11:39,200 --> 00:11:43,120
istep

00:11:40,079 --> 00:11:46,160
since number six to number 21

00:11:43,120 --> 00:11:49,440
and then we have the similar boot flow

00:11:46,160 --> 00:11:49,440
with ski boot and payload

00:11:50,240 --> 00:11:54,160
so starting with boot block boot block

00:11:52,800 --> 00:11:58,720
is a

00:11:54,160 --> 00:12:01,839
x86 uh it is a very early boot stage

00:11:58,720 --> 00:12:03,839
and for x66 for example

00:12:01,839 --> 00:12:06,320
it is responsible for setting up

00:12:03,839 --> 00:12:09,600
temporary memory in cache

00:12:06,320 --> 00:12:11,519
setup stack to run c code it performs

00:12:09,600 --> 00:12:14,639
very basic hardware installation and

00:12:11,519 --> 00:12:18,079
sets up a debugging interface

00:12:14,639 --> 00:12:20,560
for power 9 it is basically i step 6

00:12:18,079 --> 00:12:21,760
which will be ported we'll we will

00:12:20,560 --> 00:12:25,519
handle the state

00:12:21,760 --> 00:12:28,560
of the processor left by

00:12:25,519 --> 00:12:29,440
cell boot engines we'll set up certain

00:12:28,560 --> 00:12:32,000
registers to

00:12:29,440 --> 00:12:34,959
just enough to run c code and set up the

00:12:32,000 --> 00:12:34,959
debugging interface

00:12:36,000 --> 00:12:42,639
now the rom stage the rom stage is

00:12:39,120 --> 00:12:47,040
the next stage after the boot block

00:12:42,639 --> 00:12:48,959
um what it does for x86 basically

00:12:47,040 --> 00:12:51,200
it performs enough hardware

00:12:48,959 --> 00:12:52,800
initialization just to be able to train

00:12:51,200 --> 00:12:56,880
the memory

00:12:52,800 --> 00:13:00,399
then the dram is trained

00:12:56,880 --> 00:13:04,399
and and the cb mem is set up

00:13:00,399 --> 00:13:05,360
cbmm is a reserved core boot memory area

00:13:04,399 --> 00:13:09,600
which is

00:13:05,360 --> 00:13:12,880
used to hold curb specific information

00:13:09,600 --> 00:13:16,560
for power nine the roam stage would

00:13:12,880 --> 00:13:19,040
include importing istep 7 to 14.

00:13:16,560 --> 00:13:20,000
we will configure the nest complex that

00:13:19,040 --> 00:13:23,760
we will configure the

00:13:20,000 --> 00:13:27,360
fabric the xbox the smp initialization

00:13:23,760 --> 00:13:27,360
and ddr4 installation

00:13:28,399 --> 00:13:34,560
the post car postcard is a

00:13:31,839 --> 00:13:35,920
intermediate stage which is which has

00:13:34,560 --> 00:13:39,040
only a single

00:13:35,920 --> 00:13:41,360
uh responsibility just tear down the

00:13:39,040 --> 00:13:44,079
temporary memory environment which is

00:13:41,360 --> 00:13:46,639
resided in cache and prepared to run

00:13:44,079 --> 00:13:49,519
code from the dram

00:13:46,639 --> 00:13:53,120
for the for the power nine it is rather

00:13:49,519 --> 00:13:56,320
nothing to do in particular

00:13:53,120 --> 00:13:56,880
and there we go with rum stage from

00:13:56,320 --> 00:13:59,440
stage

00:13:56,880 --> 00:14:00,240
uh is the first stage which is run from

00:13:59,440 --> 00:14:04,639
the

00:14:00,240 --> 00:14:07,920
main memory for x86 it is responsible

00:14:04,639 --> 00:14:09,199
for initializing all devices on the pci

00:14:07,920 --> 00:14:13,519
bus

00:14:09,199 --> 00:14:14,880
and not only um it constructs sm bios

00:14:13,519 --> 00:14:17,440
and acpi tables

00:14:14,880 --> 00:14:18,079
it finalizes some hardware installation

00:14:17,440 --> 00:14:21,920
locks some

00:14:18,079 --> 00:14:24,160
certain registers then it checks for

00:14:21,920 --> 00:14:25,360
operating system resume and in the

00:14:24,160 --> 00:14:28,399
presume institute and

00:14:25,360 --> 00:14:30,000
it just resumes with the rest with the

00:14:28,399 --> 00:14:33,839
resume vector of the operating

00:14:30,000 --> 00:14:37,120
system otherwise it just loads the

00:14:33,839 --> 00:14:40,079
the payload and execute it for power

00:14:37,120 --> 00:14:43,120
nine the boot phase will consist of

00:14:40,079 --> 00:14:44,880
importing isop's 15 to 21.

00:14:43,120 --> 00:14:47,600
will also initialize the leftover of the

00:14:44,880 --> 00:14:49,199
devices and construct

00:14:47,600 --> 00:14:51,680
the device tree for the operating

00:14:49,199 --> 00:14:54,160
texture consumption

00:14:51,680 --> 00:14:55,519
and at the end of the stage we also load

00:14:54,160 --> 00:14:59,839
that execute the payout

00:14:55,519 --> 00:14:59,839
which in this case will be this keyboard

00:15:00,480 --> 00:15:07,440
and and then we have the

00:15:03,519 --> 00:15:12,240
payload stage so it is not

00:15:07,440 --> 00:15:15,040
exactly the core boot part but

00:15:12,240 --> 00:15:15,839
let's compare let's compare it uh as

00:15:15,040 --> 00:15:18,959
well

00:15:15,839 --> 00:15:20,560
so for x86 boot phase we have various

00:15:18,959 --> 00:15:23,600
payloads available

00:15:20,560 --> 00:15:26,800
c bios with legacy interrupts

00:15:23,600 --> 00:15:30,320
services we have very known grub

00:15:26,800 --> 00:15:33,199
we have also ufi pi load we can also

00:15:30,320 --> 00:15:35,759
run linux kernel directly or any other

00:15:33,199 --> 00:15:39,360
simple alpha executable

00:15:35,759 --> 00:15:42,079
for power nine for now we have only

00:15:39,360 --> 00:15:44,959
one choice we have to launch skip boot

00:15:42,079 --> 00:15:47,120
as a first stage payload

00:15:44,959 --> 00:15:48,079
which then skip would perform the rest

00:15:47,120 --> 00:15:50,320
of the hardware

00:15:48,079 --> 00:15:51,360
installation like pci extras link

00:15:50,320 --> 00:15:55,120
training

00:15:51,360 --> 00:15:56,560
and expose the open power

00:15:55,120 --> 00:15:58,880
abstraction layer to the operating

00:15:56,560 --> 00:16:01,759
system and then the second stage payload

00:15:58,880 --> 00:16:04,320
would be the petite boot or heads

00:16:01,759 --> 00:16:08,000
or any other exact based payload to load

00:16:04,320 --> 00:16:11,440
the target operating system

00:16:08,000 --> 00:16:14,480
future plans for the future

00:16:11,440 --> 00:16:16,320
we would like uh to pour this keyboard

00:16:14,480 --> 00:16:17,600
related hardware initialization and

00:16:16,320 --> 00:16:20,639
probably opel

00:16:17,600 --> 00:16:24,800
to coreboot since coreboot

00:16:20,639 --> 00:16:27,040
device model uh assumes that uh

00:16:24,800 --> 00:16:29,120
when we leave the ram stage all hardware

00:16:27,040 --> 00:16:31,199
is already initialized and prepared for

00:16:29,120 --> 00:16:34,000
operating system launch

00:16:31,199 --> 00:16:35,600
so in order to leverage the advantage of

00:16:34,000 --> 00:16:37,759
coreboot's flexibility

00:16:35,600 --> 00:16:39,839
all hardware installation should be done

00:16:37,759 --> 00:16:44,160
before jumping to the payloads

00:16:39,839 --> 00:16:46,480
and then we may run any pedals we want

00:16:44,160 --> 00:16:50,240
developing firmware is one thing keeping

00:16:46,480 --> 00:16:52,000
up it up to date is another thing

00:16:50,240 --> 00:16:54,240
for security reasons or reproductive

00:16:52,000 --> 00:16:56,000
action keeping up to date either for

00:16:54,240 --> 00:16:59,440
security reasons or improvements

00:16:56,000 --> 00:16:59,440
introduction is another thing

00:16:59,680 --> 00:17:04,199
as the official consultants of for linux

00:17:02,720 --> 00:17:07,839
foundation ifw

00:17:04,199 --> 00:17:08,319
updfs we also plan to enable open power

00:17:07,839 --> 00:17:12,319
based

00:17:08,319 --> 00:17:12,319
versus firmware update in this project

00:17:13,120 --> 00:17:18,880
we also plan to process and hypervisor

00:17:16,880 --> 00:17:21,919
the power line as well as

00:17:18,880 --> 00:17:24,559
would like to stop our part and when

00:17:21,919 --> 00:17:24,559
time comes

00:17:25,039 --> 00:17:31,600
and uh from best technical perspective

00:17:28,960 --> 00:17:32,000
we would like to become an independent

00:17:31,600 --> 00:17:34,960
software

00:17:32,000 --> 00:17:37,360
vendor for open power not only in the

00:17:34,960 --> 00:17:39,760
firmware field but also in user space

00:17:37,360 --> 00:17:41,760
we have linux experts on board which

00:17:39,760 --> 00:17:43,679
together with our firmware specialists

00:17:41,760 --> 00:17:45,600
will prepare a solution satisfying

00:17:43,679 --> 00:17:48,160
anyone's needs

00:17:45,600 --> 00:17:49,440
everything is a part of our dasharo

00:17:48,160 --> 00:17:51,200
product family

00:17:49,440 --> 00:17:52,480
so we have just been accepted as a

00:17:51,200 --> 00:17:56,160
silver member of

00:17:52,480 --> 00:17:59,120
open for power foundation too but

00:17:56,160 --> 00:17:59,120
what is the shadow

00:17:59,760 --> 00:18:02,880
the chero is

00:18:04,480 --> 00:18:08,799
our own product which we have been

00:18:06,880 --> 00:18:12,960
developing recently

00:18:08,799 --> 00:18:15,360
and the name is took from a chess move

00:18:12,960 --> 00:18:16,000
which provides various opportunities for

00:18:15,360 --> 00:18:19,679
a

00:18:16,000 --> 00:18:21,120
wise chess master in polish it is called

00:18:19,679 --> 00:18:24,640
rashada so we did

00:18:21,120 --> 00:18:25,600
some kind of anagram so it opens the

00:18:24,640 --> 00:18:28,240
rook's position

00:18:25,600 --> 00:18:29,679
but most of all it protects the king and

00:18:28,240 --> 00:18:32,799
this is our

00:18:29,679 --> 00:18:36,320
main main idea to protect the king

00:18:32,799 --> 00:18:38,160
and who is the king the king is the user

00:18:36,320 --> 00:18:40,559
and the user should be protected from

00:18:38,160 --> 00:18:43,120
any threats

00:18:40,559 --> 00:18:45,280
that's essentially what the ashara does

00:18:43,120 --> 00:18:46,240
it provides security in a way that may

00:18:45,280 --> 00:18:49,840
look simple

00:18:46,240 --> 00:18:53,120
but its conflict city is enormous

00:18:49,840 --> 00:18:54,880
so uh the sharo is a new biosphere

00:18:53,120 --> 00:18:56,480
technology that brings the solutions to

00:18:54,880 --> 00:19:00,000
the problems of ownership

00:18:56,480 --> 00:19:02,080
performance security and compatibility

00:19:00,000 --> 00:19:04,160
allowing to create secure and efficient

00:19:02,080 --> 00:19:06,160
images that can be fully customizable to

00:19:04,160 --> 00:19:08,400
your product

00:19:06,160 --> 00:19:10,559
so the showroom for openpower would also

00:19:08,400 --> 00:19:13,120
be a firmware technology

00:19:10,559 --> 00:19:14,240
that would leverage its openness to

00:19:13,120 --> 00:19:19,200
provide the own

00:19:14,240 --> 00:19:22,080
the respectful respect for freedom

00:19:19,200 --> 00:19:22,080
and openness

00:19:23,039 --> 00:19:31,039
so dasharro consists of four modules

00:19:27,760 --> 00:19:34,799
this security module

00:19:31,039 --> 00:19:38,080
which includes various security features

00:19:34,799 --> 00:19:42,559
performance module which is designed

00:19:38,080 --> 00:19:45,520
to optimize the performance for

00:19:42,559 --> 00:19:46,320
given workloads the compatibility module

00:19:45,520 --> 00:19:47,679
related to

00:19:46,320 --> 00:19:51,039
various maintenance features and

00:19:47,679 --> 00:19:52,400
validation as well as marketing module

00:19:51,039 --> 00:19:56,480
designed to increase their brand

00:19:52,400 --> 00:20:00,640
awareness and customer value features

00:19:56,480 --> 00:20:03,440
and the validation our validation

00:20:00,640 --> 00:20:04,720
is based on remote testing environment

00:20:03,440 --> 00:20:07,840
rt

00:20:04,720 --> 00:20:11,520
this uh our own uh

00:20:07,840 --> 00:20:11,520
orange pie hat designed to

00:20:11,760 --> 00:20:14,960
to simplify the testing procedures of

00:20:14,640 --> 00:20:18,000
the

00:20:14,960 --> 00:20:19,520
firmware and it is capable of

00:20:18,000 --> 00:20:22,240
controlling the

00:20:19,520 --> 00:20:23,120
hardware powered states gathering flash

00:20:22,240 --> 00:20:26,320
output

00:20:23,120 --> 00:20:27,360
or flashing the firmware itself so uh

00:20:26,320 --> 00:20:30,640
for example

00:20:27,360 --> 00:20:33,440
our if validation infrastructure

00:20:30,640 --> 00:20:37,440
consists of various

00:20:33,440 --> 00:20:41,360
various machines connected to the rtes

00:20:37,440 --> 00:20:45,919
and these rts are connected in a network

00:20:41,360 --> 00:20:45,919
together with rest api

00:20:46,320 --> 00:20:49,360
software which allows us to communicate

00:20:48,240 --> 00:20:52,640
with the rte

00:20:49,360 --> 00:20:55,919
and control the device under testing

00:20:52,640 --> 00:20:59,360
we have also a pce server

00:20:55,919 --> 00:21:00,960
for booting operating systems without

00:20:59,360 --> 00:21:03,919
any storage

00:21:00,960 --> 00:21:04,400
and we have also automated tests which

00:21:03,919 --> 00:21:08,159
uh

00:21:04,400 --> 00:21:09,360
all are launched and for example can

00:21:08,159 --> 00:21:12,559
automatically

00:21:09,360 --> 00:21:15,120
um generate results

00:21:12,559 --> 00:21:17,840
whether the firmware quality is good or

00:21:15,120 --> 00:21:17,840
not

00:21:18,240 --> 00:21:23,840
and that would be it for my presentation

00:21:22,159 --> 00:21:25,360
since frame definition is on the

00:21:23,840 --> 00:21:28,559
beginning of their journey

00:21:25,360 --> 00:21:32,480
with open power i have

00:21:28,559 --> 00:21:36,320
certain questions to the audience

00:21:32,480 --> 00:21:38,880
if do you see any issues in our plan

00:21:36,320 --> 00:21:41,120
i would like to hear your opinions so

00:21:38,880 --> 00:21:42,640
how also how could openpower benefit

00:21:41,120 --> 00:21:44,559
more from coreboot

00:21:42,640 --> 00:21:46,799
if do you see any problem with current

00:21:44,559 --> 00:21:49,919
open power firmware

00:21:46,799 --> 00:21:51,840
and if there is any need for independent

00:21:49,919 --> 00:21:55,280
software vendors providing constant

00:21:51,840 --> 00:21:55,280
support in the firmware field

00:21:56,880 --> 00:22:06,000
thank you very much for your attendance

00:22:01,200 --> 00:22:06,000
and i hope we can have a nice discussion

00:22:06,240 --> 00:22:09,919
okay so um if you don't have any

00:22:08,960 --> 00:22:12,159
questions now

00:22:09,919 --> 00:22:14,559
i will be also available on open power

00:22:12,159 --> 00:22:17,600
foundation slack so you can reach me

00:22:14,559 --> 00:22:20,080
and find me by my name and we can talk

00:22:17,600 --> 00:22:20,080

YouTube URL: https://www.youtube.com/watch?v=Mb__SNfMVFw


