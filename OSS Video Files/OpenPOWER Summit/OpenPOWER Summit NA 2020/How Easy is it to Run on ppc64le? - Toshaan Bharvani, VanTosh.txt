Title: How Easy is it to Run on ppc64le? - Toshaan Bharvani, VanTosh
Publication date: 2020-09-21
Playlist: OpenPOWER Summit NA 2020
Description: 
	How Easy is it to Run on ppc64le? - Toshaan Bharvani, VanTosh

Speakers: Toshaan Bharvani

This presentation is about how easy it is to migrate workloads on OpenPOWER systems, mainly looking at the ppc64le architecture. Firstly we will look at some examples of how difficult is is to migrate existing open source software to ppc64le. In the second part, some optimizations will be looked at, and how these optimizations can lead to better performance and the effort to this is not as difficult as expected.
Captions: 
	00:00:01,120 --> 00:00:03,760
hello i'll be presenting how easy is to

00:00:03,439 --> 00:00:07,200
run

00:00:03,760 --> 00:00:10,719
on ppc64le um

00:00:07,200 --> 00:00:13,920
so this presentation will give you a

00:00:10,719 --> 00:00:16,240
small introduction and how we

00:00:13,920 --> 00:00:18,720
over the past several years have been

00:00:16,240 --> 00:00:22,960
migrating workloads to

00:00:18,720 --> 00:00:25,199
power machines um initially not power

00:00:22,960 --> 00:00:26,480
initially not open power but towards the

00:00:25,199 --> 00:00:29,599
end we reached

00:00:26,480 --> 00:00:34,160
open power machines

00:00:29,599 --> 00:00:36,960
so who am i i live in antwerp belgium

00:00:34,160 --> 00:00:39,160
i'm an i.t engineer um we've been a

00:00:36,960 --> 00:00:42,719
foundation member since

00:00:39,160 --> 00:00:44,239
2017 and as some of you may have heard

00:00:42,719 --> 00:00:47,600
in the introduction

00:00:44,239 --> 00:00:48,160
i'm now the tse chair i've been involved

00:00:47,600 --> 00:00:51,199
with

00:00:48,160 --> 00:00:55,199
linux for quite a while

00:00:51,199 --> 00:00:58,320
done a lot of stuff for centos and

00:00:55,199 --> 00:01:00,719
rel and now my own power here which will

00:00:58,320 --> 00:01:03,760
come later too

00:01:00,719 --> 00:01:05,439
so a lot of things around virtualization

00:01:03,760 --> 00:01:10,840
containers

00:01:05,439 --> 00:01:14,240
um i'm also on twitter irc and wherever

00:01:10,840 --> 00:01:15,920
so the introduction

00:01:14,240 --> 00:01:18,479
typically when people start building

00:01:15,920 --> 00:01:19,439
software um and if you look at most of

00:01:18,479 --> 00:01:22,240
the

00:01:19,439 --> 00:01:23,439
people running things they clap for

00:01:22,240 --> 00:01:25,200
something that's easy

00:01:23,439 --> 00:01:27,920
we build it on the machines we have

00:01:25,200 --> 00:01:31,520
which is our laptops

00:01:27,920 --> 00:01:34,400
and in that space um x86

00:01:31,520 --> 00:01:36,159
typically intel has been the king and

00:01:34,400 --> 00:01:39,439
has been around for quite a lot

00:01:36,159 --> 00:01:42,720
quite a long time um and it is it's

00:01:39,439 --> 00:01:46,000
easy it's cheap it's readily available

00:01:42,720 --> 00:01:48,799
so people focus on that they don't think

00:01:46,000 --> 00:01:50,640
about other things beyond that their

00:01:48,799 --> 00:01:54,240
perspective on that

00:01:50,640 --> 00:01:56,719
um and and that works of course

00:01:54,240 --> 00:01:57,759
when you're studying in university or

00:01:56,719 --> 00:02:00,560
that can work well

00:01:57,759 --> 00:02:02,719
also in different uh setups but that

00:02:00,560 --> 00:02:04,799
might not be what what the real world or

00:02:02,719 --> 00:02:08,959
the business world always uses

00:02:04,799 --> 00:02:12,640
um and so once we

00:02:08,959 --> 00:02:16,320
go into that world you get distributed

00:02:12,640 --> 00:02:17,520
setups because the only way to increase

00:02:16,320 --> 00:02:20,640
[Music]

00:02:17,520 --> 00:02:21,599
x86 boxes is by actually putting more of

00:02:20,640 --> 00:02:23,760
them together

00:02:21,599 --> 00:02:25,599
and so you need to scale out you get

00:02:23,760 --> 00:02:27,360
then distributed systems

00:02:25,599 --> 00:02:28,959
and then you need to actually manage

00:02:27,360 --> 00:02:31,840
these distributed systems

00:02:28,959 --> 00:02:34,400
and you have vast number of systems uh

00:02:31,840 --> 00:02:37,440
trying to

00:02:34,400 --> 00:02:39,040
coherently work together and you end up

00:02:37,440 --> 00:02:42,480
having to build clusters

00:02:39,040 --> 00:02:44,959
and to manage those and it might be

00:02:42,480 --> 00:02:48,000
simpler to have something

00:02:44,959 --> 00:02:49,599
different in that case um not to mention

00:02:48,000 --> 00:02:51,280
only that you need consistency over

00:02:49,599 --> 00:02:54,480
systems

00:02:51,280 --> 00:02:56,000
so it becomes much more complicated

00:02:54,480 --> 00:02:59,040
if you're looking from a scale out

00:02:56,000 --> 00:03:02,239
perspective for certain applications

00:02:59,040 --> 00:03:03,599
and in that way we need to rethink what

00:03:02,239 --> 00:03:05,920
we are doing sometimes

00:03:03,599 --> 00:03:08,720
and look at different ways of running

00:03:05,920 --> 00:03:10,400
these workloads

00:03:08,720 --> 00:03:12,640
in in today's world where we want to be

00:03:10,400 --> 00:03:15,360
drained and where we want to have the

00:03:12,640 --> 00:03:20,879
most efficient system possible

00:03:15,360 --> 00:03:23,360
it is better to have systems that are

00:03:20,879 --> 00:03:24,720
measured for their scales and that can

00:03:23,360 --> 00:03:28,159
actually do what

00:03:24,720 --> 00:03:28,159
they meant what they are meant to do

00:03:29,200 --> 00:03:33,360
then of course we had virtualization and

00:03:32,159 --> 00:03:35,599
containerization

00:03:33,360 --> 00:03:37,920
more recently but virtualization meant

00:03:35,599 --> 00:03:40,159
that in place of doing scale outs we

00:03:37,920 --> 00:03:42,799
could actually

00:03:40,159 --> 00:03:43,440
have on mult multiple machines run on

00:03:42,799 --> 00:03:46,159
one

00:03:43,440 --> 00:03:47,519
bare metal machine and a lot of

00:03:46,159 --> 00:03:50,560
rethinking had to be done

00:03:47,519 --> 00:03:51,680
a lot of migrations have have been done

00:03:50,560 --> 00:03:54,080
around that

00:03:51,680 --> 00:03:55,920
and i think today we can say that most

00:03:54,080 --> 00:03:56,720
of the applications have been made

00:03:55,920 --> 00:03:58,959
available

00:03:56,720 --> 00:04:00,000
for virtual machines in such a way that

00:03:58,959 --> 00:04:03,439
it is

00:04:00,000 --> 00:04:07,040
a de facto standard and so

00:04:03,439 --> 00:04:09,120
it's very easy to imagine a world

00:04:07,040 --> 00:04:10,959
where you can just get a virtual machine

00:04:09,120 --> 00:04:12,799
and it works

00:04:10,959 --> 00:04:14,159
and typically those virtual machines

00:04:12,799 --> 00:04:17,600
again run

00:04:14,159 --> 00:04:21,040
on commodity hardware which is

00:04:17,600 --> 00:04:23,040
cheaply and easily available

00:04:21,040 --> 00:04:24,639
and in that way there are different

00:04:23,040 --> 00:04:27,680
platforms that have come up

00:04:24,639 --> 00:04:30,000
and we have to rethink our world

00:04:27,680 --> 00:04:31,440
and cross building had a new meaning

00:04:30,000 --> 00:04:34,160
previously if you wanted to buy

00:04:31,440 --> 00:04:35,440
if you wanted your workload on your uh

00:04:34,160 --> 00:04:37,120
something to build

00:04:35,440 --> 00:04:39,040
you would build it on your laptop or you

00:04:37,120 --> 00:04:39,759
could build it in a build environment if

00:04:39,040 --> 00:04:43,759
you were

00:04:39,759 --> 00:04:46,800
luckier and you could cross build it for

00:04:43,759 --> 00:04:48,800
the actual platform you wanted to run on

00:04:46,800 --> 00:04:49,840
with virtualization we can actually run

00:04:48,800 --> 00:04:54,960
a fully

00:04:49,840 --> 00:04:54,960
uh full virtual machine on unknown

00:04:55,040 --> 00:04:58,960
or on not on not on the same hardware

00:04:57,520 --> 00:05:02,000
and this enables us

00:04:58,960 --> 00:05:03,199
to actually build with the native

00:05:02,000 --> 00:05:05,039
compilers

00:05:03,199 --> 00:05:07,199
um through emulation and and

00:05:05,039 --> 00:05:08,160
virtualization and so cross-building has

00:05:07,199 --> 00:05:10,240
a new meaning

00:05:08,160 --> 00:05:12,320
because it means that we don't need to

00:05:10,240 --> 00:05:15,039
have everything available at our

00:05:12,320 --> 00:05:15,039
fingertips

00:05:17,360 --> 00:05:20,720
so in our approach we did what is what

00:05:19,840 --> 00:05:23,360
we

00:05:20,720 --> 00:05:24,880
call the bottom up we started from the

00:05:23,360 --> 00:05:27,680
hardware upwards

00:05:24,880 --> 00:05:30,479
um so and then we worked our way up to

00:05:27,680 --> 00:05:30,479
applications

00:05:35,280 --> 00:05:38,320
so we started with acquiring a power

00:05:37,360 --> 00:05:41,919
rate machine

00:05:38,320 --> 00:05:43,919
in 2014 uh sorry

00:05:41,919 --> 00:05:45,360
into power rate started with the

00:05:43,919 --> 00:05:48,880
commitment to be open

00:05:45,360 --> 00:05:51,199
and this is actually the initial setup

00:05:48,880 --> 00:05:54,960
of the open power foundation

00:05:51,199 --> 00:05:56,479
where ibm committed itself to be more

00:05:54,960 --> 00:05:58,400
open

00:05:56,479 --> 00:06:00,800
i don't think many of us from the

00:05:58,400 --> 00:06:02,720
outside world expected to be as open as

00:06:00,800 --> 00:06:05,840
we have it today

00:06:02,720 --> 00:06:09,600
or as it will be in the future

00:06:05,840 --> 00:06:12,720
but ibm with power rate introduction

00:06:09,600 --> 00:06:14,639
went uh towards the open world and said

00:06:12,720 --> 00:06:17,520
that okay we want to open up

00:06:14,639 --> 00:06:18,720
and we will slowly start opening these

00:06:17,520 --> 00:06:21,680
systems

00:06:18,720 --> 00:06:22,240
primarily they were looking at linux and

00:06:21,680 --> 00:06:25,039
so

00:06:22,240 --> 00:06:26,639
a year later we acquired a linux machine

00:06:25,039 --> 00:06:28,240
or a machine that's specifically built

00:06:26,639 --> 00:06:31,039
for linux

00:06:28,240 --> 00:06:33,280
and after that we started looking at how

00:06:31,039 --> 00:06:36,240
we can get linux

00:06:33,280 --> 00:06:38,560
on these type of machines and how we can

00:06:36,240 --> 00:06:40,240
actually get software running on them

00:06:38,560 --> 00:06:42,160
and so we had a lot of discussions with

00:06:40,240 --> 00:06:46,160
them whereby we

00:06:42,160 --> 00:06:48,000
we realized that the end result would be

00:06:46,160 --> 00:06:50,160
an open source machine

00:06:48,000 --> 00:06:52,960
and like i said none of us would have

00:06:50,160 --> 00:06:54,880
thought that it is where we are today

00:06:52,960 --> 00:06:56,080
but we we started this journey and we

00:06:54,880 --> 00:06:59,440
took uh

00:06:56,080 --> 00:07:00,560
the risk to to move forward however

00:06:59,440 --> 00:07:02,720
there were no open

00:07:00,560 --> 00:07:04,160
free open source linux distributions at

00:07:02,720 --> 00:07:07,120
that point

00:07:04,160 --> 00:07:09,280
um sorry no free open source enterprise

00:07:07,120 --> 00:07:12,960
linux distributions at that point

00:07:09,280 --> 00:07:17,039
um centos wasn't available on on power

00:07:12,960 --> 00:07:20,479
yet at least not for power 8

00:07:17,039 --> 00:07:22,000
and so being in that community

00:07:20,479 --> 00:07:24,560
i looked around at what would be

00:07:22,000 --> 00:07:27,840
possible and what waste centos was going

00:07:24,560 --> 00:07:30,720
um fedora was already available or

00:07:27,840 --> 00:07:32,400
was nearly available at that point uh

00:07:30,720 --> 00:07:33,759
debian has been available for quite a

00:07:32,400 --> 00:07:36,639
long time

00:07:33,759 --> 00:07:37,039
and suse was also one of the first ones

00:07:36,639 --> 00:07:40,720
to be

00:07:37,039 --> 00:07:43,440
available from our perspective

00:07:40,720 --> 00:07:44,360
initially we wanted to have full support

00:07:43,440 --> 00:07:47,639
for

00:07:44,360 --> 00:07:49,840
pvpc64 so the big engine version and

00:07:47,639 --> 00:07:53,919
ppc64le the little

00:07:49,840 --> 00:07:54,400
engine version and so we started our

00:07:53,919 --> 00:07:57,599
journey

00:07:54,400 --> 00:08:01,120
and given that centos

00:07:57,599 --> 00:08:04,160
approach was to rebuild red rel

00:08:01,120 --> 00:08:06,800
as closely to rel as possible

00:08:04,160 --> 00:08:07,919
um our opinion was different in that and

00:08:06,800 --> 00:08:09,680
we wanted to

00:08:07,919 --> 00:08:11,599
actually get some enterprise linux

00:08:09,680 --> 00:08:13,440
distribution on it that would be as

00:08:11,599 --> 00:08:13,840
close to the hardware and optimize as

00:08:13,440 --> 00:08:16,720
much

00:08:13,840 --> 00:08:17,759
of the hardware possibilities as we

00:08:16,720 --> 00:08:22,160
could

00:08:17,759 --> 00:08:27,840
um and so we started building

00:08:22,160 --> 00:08:27,840
uh our own linux distribution

00:08:28,319 --> 00:08:32,479
in in 2015 primarily we started with big

00:08:31,680 --> 00:08:35,680
endian

00:08:32,479 --> 00:08:38,000
um and then a little bit later

00:08:35,680 --> 00:08:39,519
beginning of 2016 we started with little

00:08:38,000 --> 00:08:42,159
indian

00:08:39,519 --> 00:08:42,959
we were lucky that we were able to

00:08:42,159 --> 00:08:46,560
convince

00:08:42,959 --> 00:08:47,440
a few customers running our e-commerce

00:08:46,560 --> 00:08:49,279
platform

00:08:47,440 --> 00:08:50,720
which is running php and mysql at the

00:08:49,279 --> 00:08:54,160
back end

00:08:50,720 --> 00:08:57,519
to actually allow us to migrate

00:08:54,160 --> 00:09:00,959
our workloads to power machines um

00:08:57,519 --> 00:09:03,040
and in doing so we we also acquired a

00:09:00,959 --> 00:09:03,680
second machine so we could be highly

00:09:03,040 --> 00:09:06,720
available

00:09:03,680 --> 00:09:09,040
and we could have a setup

00:09:06,720 --> 00:09:10,640
whereby we could do some testing and

00:09:09,040 --> 00:09:13,920
some development

00:09:10,640 --> 00:09:15,600
and qa and workloads

00:09:13,920 --> 00:09:17,440
production workloads on these two

00:09:15,600 --> 00:09:20,200
machines

00:09:17,440 --> 00:09:22,000
so we acquired the second machine and in

00:09:20,200 --> 00:09:25,360
2016 we actually

00:09:22,000 --> 00:09:28,800
migrated uh our very first customer to

00:09:25,360 --> 00:09:31,839
an e-commerce platform um from the

00:09:28,800 --> 00:09:33,200
perspective it as you see it didn't take

00:09:31,839 --> 00:09:37,680
us that long

00:09:33,200 --> 00:09:40,640
um we're not a huge company so it still

00:09:37,680 --> 00:09:41,200
requires uh some effort and a lot of

00:09:40,640 --> 00:09:43,440
work

00:09:41,200 --> 00:09:44,640
has been done to actually rebuild

00:09:43,440 --> 00:09:48,839
everything um

00:09:44,640 --> 00:09:50,480
i'll come back to that uh in a later

00:09:48,839 --> 00:09:53,200
stage

00:09:50,480 --> 00:09:54,320
so what did we actually do we we rebuilt

00:09:53,200 --> 00:09:57,440
power el

00:09:54,320 --> 00:09:58,560
7 which was based on center seven uh on

00:09:57,440 --> 00:10:01,839
power eight for

00:09:58,560 --> 00:10:03,279
big endian and little endian um we

00:10:01,839 --> 00:10:07,040
optimized so that means

00:10:03,279 --> 00:10:10,160
you you bootstrap from

00:10:07,040 --> 00:10:11,519
uh in this case fedora you bootstrap

00:10:10,160 --> 00:10:14,800
from fedora you then

00:10:11,519 --> 00:10:17,760
build your first run on fedora

00:10:14,800 --> 00:10:19,600
you then rebuild whole sentence with the

00:10:17,760 --> 00:10:21,839
optimizations

00:10:19,600 --> 00:10:22,720
the first time and then you rebuild your

00:10:21,839 --> 00:10:24,959
own

00:10:22,720 --> 00:10:26,880
distribution flavor in this case what we

00:10:24,959 --> 00:10:30,000
call power yell

00:10:26,880 --> 00:10:31,920
specifically for power eight so it takes

00:10:30,000 --> 00:10:33,440
three iterations to actually get a

00:10:31,920 --> 00:10:36,640
working package

00:10:33,440 --> 00:10:38,160
um that not keeping account with the

00:10:36,640 --> 00:10:39,680
number of patches and the number of

00:10:38,160 --> 00:10:41,760
tests that we were doing in between

00:10:39,680 --> 00:10:43,920
there

00:10:41,760 --> 00:10:45,440
and then we we sat down and we optimized

00:10:43,920 --> 00:10:49,839
of course mariadb

00:10:45,440 --> 00:10:53,440
and php5 at the time for power rate

00:10:49,839 --> 00:10:56,800
and so end of 2016 we migrated

00:10:53,440 --> 00:10:59,600
uh customers and in 2017 we had

00:10:56,800 --> 00:11:01,200
production workloads running on our

00:10:59,600 --> 00:11:03,200
power rate machines

00:11:01,200 --> 00:11:04,320
and we were keeping on optimizing these

00:11:03,200 --> 00:11:07,200
workloads

00:11:04,320 --> 00:11:09,040
and trying to find new workloads and new

00:11:07,200 --> 00:11:12,240
customers we could actually migrate

00:11:09,040 --> 00:11:15,200
to the power a platform

00:11:12,240 --> 00:11:16,079
so the customers that we migrated um

00:11:15,200 --> 00:11:19,200
these

00:11:16,079 --> 00:11:21,279
three that initially started in 2016

00:11:19,200 --> 00:11:22,480
are still today running on power

00:11:21,279 --> 00:11:25,279
machines

00:11:22,480 --> 00:11:26,560
um so till now we have been lucky that

00:11:25,279 --> 00:11:28,640
none of the

00:11:26,560 --> 00:11:31,839
customers that we migrated to power had

00:11:28,640 --> 00:11:31,839
to have relief power again

00:11:34,959 --> 00:11:41,920
so for onboarding we started

00:11:38,399 --> 00:11:44,880
looking to more workloads obviously

00:11:41,920 --> 00:11:46,640
we started with the easier setups like

00:11:44,880 --> 00:11:50,480
python 3

00:11:46,640 --> 00:11:52,639
ruby moving to php 7

00:11:50,480 --> 00:11:53,920
having support for mariadb mysql

00:11:52,639 --> 00:11:56,959
postgres

00:11:53,920 --> 00:11:59,839
and java support

00:11:56,959 --> 00:12:01,200
and it's the last one java support that

00:11:59,839 --> 00:12:04,720
actually got us our first

00:12:01,200 --> 00:12:08,959
linux sorry sap customer so the

00:12:04,720 --> 00:12:12,720
customer migrated an sap workload

00:12:08,959 --> 00:12:15,839
from uh non-ibm

00:12:12,720 --> 00:12:18,450
sorry from non-power to an

00:12:15,839 --> 00:12:19,760
ibm power machine and

00:12:18,450 --> 00:12:21,839
[Music]

00:12:19,760 --> 00:12:23,040
we were looking at what else we could do

00:12:21,839 --> 00:12:26,000
and so by

00:12:23,040 --> 00:12:27,680
starting these three bullet pointed

00:12:26,000 --> 00:12:31,279
versions of python c

00:12:27,680 --> 00:12:34,560
ruby php um we were able to

00:12:31,279 --> 00:12:37,040
move majority of the web stacks

00:12:34,560 --> 00:12:37,680
so any web application you can think of

00:12:37,040 --> 00:12:40,240
today

00:12:37,680 --> 00:12:40,800
that runs on these back ends typically

00:12:40,240 --> 00:12:43,680
works

00:12:40,800 --> 00:12:45,600
very well and those are the ones we

00:12:43,680 --> 00:12:47,200
focused on because we knew that we had

00:12:45,600 --> 00:12:49,519
workloads and customers that could

00:12:47,200 --> 00:12:51,760
actually do that

00:12:49,519 --> 00:12:52,639
migrating most of the c and c plus plus

00:12:51,760 --> 00:12:56,800
code uh

00:12:52,639 --> 00:12:58,560
was also fairly easy most of the

00:12:56,800 --> 00:13:00,480
applications that you couldn't just

00:12:58,560 --> 00:13:03,600
recompile and you needed to patch

00:13:00,480 --> 00:13:06,160
was because they presumed that

00:13:03,600 --> 00:13:06,880
the hardware was running in a specific

00:13:06,160 --> 00:13:09,519
way

00:13:06,880 --> 00:13:10,720
um typically they were mostly thinking

00:13:09,519 --> 00:13:13,760
intel based

00:13:10,720 --> 00:13:15,440
so we need to open that up in such a way

00:13:13,760 --> 00:13:19,200
that it is acceptable

00:13:15,440 --> 00:13:22,480
um for other people to to use it and to

00:13:19,200 --> 00:13:22,800
other architectures to use it and and it

00:13:22,480 --> 00:13:25,279
was

00:13:22,800 --> 00:13:27,040
fairly easy communicating with the open

00:13:25,279 --> 00:13:29,760
source community to getting

00:13:27,040 --> 00:13:31,279
support for that there have been

00:13:29,760 --> 00:13:34,320
multiple previous

00:13:31,279 --> 00:13:36,959
presentations where they've shown that

00:13:34,320 --> 00:13:39,600
it if we enable these things it actually

00:13:36,959 --> 00:13:42,240
migrates quite quickly

00:13:39,600 --> 00:13:44,000
and and the patchwork typically is

00:13:42,240 --> 00:13:46,800
fairly limited

00:13:44,000 --> 00:13:48,000
and once we patch it we try to put these

00:13:46,800 --> 00:13:50,000
patches upstream

00:13:48,000 --> 00:13:51,040
so we don't need to carry them ourselves

00:13:50,000 --> 00:13:54,160
all the time

00:13:51,040 --> 00:13:57,279
um and that makes it easy also

00:13:54,160 --> 00:13:59,440
um most of the migrations initially

00:13:57,279 --> 00:14:00,639
is is fairly easy once you want to do

00:13:59,440 --> 00:14:02,639
optimizations

00:14:00,639 --> 00:14:04,560
then it becomes a different story and

00:14:02,639 --> 00:14:07,760
you need to do much more

00:14:04,560 --> 00:14:07,760
thought process in that

00:14:09,040 --> 00:14:14,320
so afterwards we we started uh

00:14:12,639 --> 00:14:16,480
being a little bit more aggressive with

00:14:14,320 --> 00:14:19,600
customers and and

00:14:16,480 --> 00:14:21,440
advising them more to run open power

00:14:19,600 --> 00:14:24,959
machines

00:14:21,440 --> 00:14:28,839
we got some customers who migrated

00:14:24,959 --> 00:14:30,160
from propriety power 7 to power 8

00:14:28,839 --> 00:14:32,560
machines

00:14:30,160 --> 00:14:34,160
so moving them also to open power and

00:14:32,560 --> 00:14:37,440
linux machines

00:14:34,160 --> 00:14:40,240
um our own machines uh

00:14:37,440 --> 00:14:42,160
are mostly ibm machines but we were able

00:14:40,240 --> 00:14:45,440
to get some loan machines

00:14:42,160 --> 00:14:49,120
uh to test them on on non-ibm so

00:14:45,440 --> 00:14:50,880
uh tn and uh super metro hardware

00:14:49,120 --> 00:14:52,320
so we could actually verify that it

00:14:50,880 --> 00:14:56,839
works on on

00:14:52,320 --> 00:14:59,839
other hardware that is um of the same

00:14:56,839 --> 00:15:02,959
order

00:14:59,839 --> 00:15:05,760
sorry um and

00:15:02,959 --> 00:15:07,120
uh given all that effort we also became

00:15:05,760 --> 00:15:10,720
an open power

00:15:07,120 --> 00:15:14,959
foundation member um given that we were

00:15:10,720 --> 00:15:18,800
wanting to be more involved in this

00:15:14,959 --> 00:15:20,639
movement and get more uh facilities in

00:15:18,800 --> 00:15:24,000
that

00:15:20,639 --> 00:15:26,079
area after that we

00:15:24,000 --> 00:15:27,680
were looking at a lot of the ai

00:15:26,079 --> 00:15:28,959
solutions so this is around the time

00:15:27,680 --> 00:15:32,800
when

00:15:28,959 --> 00:15:36,320
the ac 922 came out

00:15:32,800 --> 00:15:39,360
and we were successful in helping

00:15:36,320 --> 00:15:40,079
some of the customers in the automotive

00:15:39,360 --> 00:15:43,199
industry

00:15:40,079 --> 00:15:46,320
to implement some of the ai solutions

00:15:43,199 --> 00:15:49,120
based on that um the

00:15:46,320 --> 00:15:50,079
the optimizations we did there uh

00:15:49,120 --> 00:15:52,480
weren't only

00:15:50,079 --> 00:15:54,480
all fully open source because of the

00:15:52,480 --> 00:15:56,880
nature of the work

00:15:54,480 --> 00:15:59,519
however we try to contribute as much as

00:15:56,880 --> 00:16:02,240
possible back

00:15:59,519 --> 00:16:05,759
at this point it became clear that big

00:16:02,240 --> 00:16:07,920
endian would not be a focus anymore

00:16:05,759 --> 00:16:08,800
in the same way that it has been in the

00:16:07,920 --> 00:16:12,399
past

00:16:08,800 --> 00:16:13,920
and so we we enabled and moved our focus

00:16:12,399 --> 00:16:15,519
to little endian

00:16:13,920 --> 00:16:18,000
um this doesn't mean that we we have

00:16:15,519 --> 00:16:18,639
stopped um looking at big engine we

00:16:18,000 --> 00:16:22,800
still

00:16:18,639 --> 00:16:25,839
support for power rate power el 7

00:16:22,800 --> 00:16:29,040
little engine and big engine um

00:16:25,839 --> 00:16:31,600
for power gl 8 we haven't decided yet

00:16:29,040 --> 00:16:34,240
um but we started migrating all projects

00:16:31,600 --> 00:16:36,240
to little engine

00:16:34,240 --> 00:16:37,600
so the initial setups were typically

00:16:36,240 --> 00:16:39,759
done on big engine

00:16:37,600 --> 00:16:41,519
and now we have moved into little engine

00:16:39,759 --> 00:16:44,720
so we know that all the workloads

00:16:41,519 --> 00:16:47,199
work on both uh engines

00:16:44,720 --> 00:16:48,560
um there are a few workloads which only

00:16:47,199 --> 00:16:50,560
work on little engine

00:16:48,560 --> 00:16:53,040
and there are a few workloads which only

00:16:50,560 --> 00:16:56,240
work on big engine

00:16:53,040 --> 00:17:00,720
and then we we started looking at golang

00:16:56,240 --> 00:17:04,160
and at parting goal line to to power

00:17:00,720 --> 00:17:05,439
and so we we assisted with that and that

00:17:04,160 --> 00:17:08,480
gave us an entry

00:17:05,439 --> 00:17:10,079
into all of the

00:17:08,480 --> 00:17:11,919
container world because most of the

00:17:10,079 --> 00:17:14,240
container world software is written in

00:17:11,919 --> 00:17:16,959
golang

00:17:14,240 --> 00:17:19,839
and so we we started looking at open

00:17:16,959 --> 00:17:19,839
containers

00:17:20,480 --> 00:17:23,520
so we have a few customers running power

00:17:22,400 --> 00:17:27,120
9 with ai

00:17:23,520 --> 00:17:30,400
solutions and now that

00:17:27,120 --> 00:17:33,840
power ai is being open sourced

00:17:30,400 --> 00:17:37,039
that that's a good thing and we can have

00:17:33,840 --> 00:17:38,960
more open source solutions in that um

00:17:37,039 --> 00:17:41,280
we started looking at open container so

00:17:38,960 --> 00:17:43,520
we we skipped all the docker stuff and

00:17:41,280 --> 00:17:46,559
moved directly to podman

00:17:43,520 --> 00:17:49,520
which is an open source version

00:17:46,559 --> 00:17:51,440
and we've been running uh containers

00:17:49,520 --> 00:17:54,559
with podman already since

00:17:51,440 --> 00:17:55,440
a year now some of them even in

00:17:54,559 --> 00:17:59,360
production

00:17:55,440 --> 00:18:03,440
where where they are more appropriate

00:17:59,360 --> 00:18:06,400
and in 2019 uh we started

00:18:03,440 --> 00:18:07,440
um being more active in the open power

00:18:06,400 --> 00:18:10,000
foundation

00:18:07,440 --> 00:18:12,880
and trying to adopt help communities uh

00:18:10,000 --> 00:18:17,600
open source communities adopt open power

00:18:12,880 --> 00:18:21,520
um doing more presentations like this

00:18:17,600 --> 00:18:24,480
getting people access to machines

00:18:21,520 --> 00:18:24,880
helping them out in in any way we could

00:18:24,480 --> 00:18:26,880
uh

00:18:24,880 --> 00:18:28,080
even helping them sometimes with code

00:18:26,880 --> 00:18:31,280
and with other

00:18:28,080 --> 00:18:31,840
suggestions um and so now we are looking

00:18:31,280 --> 00:18:34,400
at

00:18:31,840 --> 00:18:36,799
what we can do more um from our

00:18:34,400 --> 00:18:39,679
perspective we are

00:18:36,799 --> 00:18:41,120
we've started building power el 8 and

00:18:39,679 --> 00:18:44,240
and we will

00:18:41,120 --> 00:18:45,440
release that soon which is basically the

00:18:44,240 --> 00:18:48,640
rebuild of centos

00:18:45,440 --> 00:18:51,840
8. and at this point we have a whole

00:18:48,640 --> 00:18:55,120
bunch of optimizations already in mind

00:18:51,840 --> 00:18:57,679
which will help

00:18:55,120 --> 00:19:00,799
running workloads more efficiently and

00:18:57,679 --> 00:19:00,799
more streamlined

00:19:05,120 --> 00:19:11,520
so what are these optimizations

00:19:08,240 --> 00:19:15,440
i've been talking about so to

00:19:11,520 --> 00:19:17,840
understand what we did uh we made a very

00:19:15,440 --> 00:19:19,919
strict decision in the beginning and we

00:19:17,840 --> 00:19:23,360
compiled everything with the gcc

00:19:19,919 --> 00:19:26,559
compiler and that

00:19:23,360 --> 00:19:28,880
means that all our compilation is done

00:19:26,559 --> 00:19:30,799
with open source compilers

00:19:28,880 --> 00:19:32,799
um and it's done with the compiler that

00:19:30,799 --> 00:19:35,919
is readily available by

00:19:32,799 --> 00:19:39,039
the open source community um

00:19:35,919 --> 00:19:41,840
i know there are the ibm has a

00:19:39,039 --> 00:19:42,400
an optimized compiler which does a lot

00:19:41,840 --> 00:19:43,919
of work

00:19:42,400 --> 00:19:46,000
and they've been presentation about that

00:19:43,919 --> 00:19:48,559
and those optimizations

00:19:46,000 --> 00:19:50,640
um enable you to automatically get what

00:19:48,559 --> 00:19:54,160
gcc or llvm

00:19:50,640 --> 00:19:56,480
would do but we chose to

00:19:54,160 --> 00:19:57,360
use the open source ones and the ones

00:19:56,480 --> 00:20:00,160
that are

00:19:57,360 --> 00:20:02,400
uh fairly transparent to the outside

00:20:00,160 --> 00:20:03,520
world that are also used by all the open

00:20:02,400 --> 00:20:05,200
source

00:20:03,520 --> 00:20:06,799
projects that we would like to interact

00:20:05,200 --> 00:20:09,919
with

00:20:06,799 --> 00:20:11,360
and so we started with compiler

00:20:09,919 --> 00:20:13,360
optimizations

00:20:11,360 --> 00:20:14,480
so we went through all of the gcc

00:20:13,360 --> 00:20:16,159
documentation

00:20:14,480 --> 00:20:18,400
figured out which optimizations would

00:20:16,159 --> 00:20:21,440
work for power eight of

00:20:18,400 --> 00:20:25,039
power nine and we applied those

00:20:21,440 --> 00:20:26,960
while compiling um so we would strap our

00:20:25,039 --> 00:20:30,240
compiler from a generic

00:20:26,960 --> 00:20:32,159
we then include our optimization we then

00:20:30,240 --> 00:20:33,760
recompile everything with our optimized

00:20:32,159 --> 00:20:37,520
compilers

00:20:33,760 --> 00:20:39,760
and we patch wherever needed

00:20:37,520 --> 00:20:42,080
all the patches that are not specific to

00:20:39,760 --> 00:20:45,120
our distribution we push up source

00:20:42,080 --> 00:20:46,720
upstream um anything specific to our

00:20:45,120 --> 00:20:49,039
distribution of course we don't

00:20:46,720 --> 00:20:50,640
push upstream there are a few changes we

00:20:49,039 --> 00:20:53,840
make

00:20:50,640 --> 00:20:57,120
mostly related to naming

00:20:53,840 --> 00:21:01,280
or copyrights or logos that

00:20:57,120 --> 00:21:04,240
that cannot be used or used some places

00:21:01,280 --> 00:21:05,280
also some of the internal changes we

00:21:04,240 --> 00:21:07,919
make is like

00:21:05,280 --> 00:21:08,960
in place of hitting um the upstream

00:21:07,919 --> 00:21:12,080
project we hit

00:21:08,960 --> 00:21:16,559
our own mirrors so that we don't

00:21:12,080 --> 00:21:18,559
create an overload for them in that way

00:21:16,559 --> 00:21:19,679
but so all the optimizations that are

00:21:18,559 --> 00:21:21,679
done there

00:21:19,679 --> 00:21:22,880
are are well thought of and and are

00:21:21,679 --> 00:21:26,240
tested

00:21:22,880 --> 00:21:27,679
um and it's that work that we actually

00:21:26,240 --> 00:21:30,240
spend most of the time in the beginning

00:21:27,679 --> 00:21:31,520
with um and that is one of the things

00:21:30,240 --> 00:21:34,559
we're also looking at

00:21:31,520 --> 00:21:36,400
uh in power real eight is how these

00:21:34,559 --> 00:21:39,679
optimizations can

00:21:36,400 --> 00:21:42,720
further enhance the way we we run things

00:21:39,679 --> 00:21:47,600
um so in in our initial

00:21:42,720 --> 00:21:48,780
power 8 tests we were able to run

00:21:47,600 --> 00:21:50,960
about

00:21:48,780 --> 00:21:53,520
[Music]

00:21:50,960 --> 00:21:55,280
15 million queries per second on a

00:21:53,520 --> 00:21:58,480
mariadb

00:21:55,280 --> 00:22:00,559
setup and

00:21:58,480 --> 00:22:02,400
we haven't done the tests on power nine

00:22:00,559 --> 00:22:03,840
yet uh because we don't have a band

00:22:02,400 --> 00:22:07,039
metal machine available

00:22:03,840 --> 00:22:08,960
to do these tests um but in in a virtual

00:22:07,039 --> 00:22:11,360
machine we already reaching 10 million

00:22:08,960 --> 00:22:13,200
transactions per second

00:22:11,360 --> 00:22:16,159
and if you would run bare metal you

00:22:13,200 --> 00:22:19,120
always get more than that

00:22:16,159 --> 00:22:20,799
most of the newer versions of gcc

00:22:19,120 --> 00:22:24,400
actually

00:22:20,799 --> 00:22:26,799
already optimize a lot of the

00:22:24,400 --> 00:22:28,799
compiler options and we'll do a lot of

00:22:26,799 --> 00:22:31,440
the optimizations internally

00:22:28,799 --> 00:22:33,039
so we suspect that a lot of the work

00:22:31,440 --> 00:22:36,000
that we had to do initially

00:22:33,039 --> 00:22:36,640
will become easier over time um and with

00:22:36,000 --> 00:22:40,000
a lot of the

00:22:36,640 --> 00:22:41,919
open source projects looking at open

00:22:40,000 --> 00:22:43,280
power machines and understanding the

00:22:41,919 --> 00:22:47,520
benefits of them

00:22:43,280 --> 00:22:50,320
we will over time again be better off

00:22:47,520 --> 00:22:50,320
and easier off

00:22:52,240 --> 00:22:55,520
so what what type of patches are we

00:22:54,159 --> 00:22:56,640
actually talking about most of the

00:22:55,520 --> 00:22:58,880
patches we have

00:22:56,640 --> 00:22:59,679
are very fairly straightforward and

00:22:58,880 --> 00:23:02,720
fairly

00:22:59,679 --> 00:23:04,559
limited so here you have for instance a

00:23:02,720 --> 00:23:07,760
patch that we had for mariadb

00:23:04,559 --> 00:23:11,039
chalera which is basically

00:23:07,760 --> 00:23:13,679
in place of statically putting the uh

00:23:11,039 --> 00:23:14,080
multiplier and the page size what we are

00:23:13,679 --> 00:23:17,360
doing

00:23:14,080 --> 00:23:19,520
is we are changing the way the uh

00:23:17,360 --> 00:23:20,720
page size and multipliers work that is

00:23:19,520 --> 00:23:23,120
because of the way

00:23:20,720 --> 00:23:24,080
the power actually does paging and page

00:23:23,120 --> 00:23:27,440
sizes

00:23:24,080 --> 00:23:28,240
um and this is why it makes sometimes a

00:23:27,440 --> 00:23:31,600
difference

00:23:28,240 --> 00:23:35,760
in how you apply some of these things

00:23:31,600 --> 00:23:36,480
um in the meanwhile maria dp galera has

00:23:35,760 --> 00:23:39,520
already

00:23:36,480 --> 00:23:41,520
most of these patches in um and so it's

00:23:39,520 --> 00:23:44,320
it's fairly easy to do this

00:23:41,520 --> 00:23:46,880
and to recompile my newer versions of

00:23:44,320 --> 00:23:49,440
mariadb with callera in there

00:23:46,880 --> 00:23:50,080
with these patches already in there so

00:23:49,440 --> 00:23:52,000
it's basically

00:23:50,080 --> 00:23:53,919
just the paging size which is

00:23:52,000 --> 00:23:56,000
architecture specific

00:23:53,919 --> 00:23:57,679
um here there are some other changes for

00:23:56,000 --> 00:24:00,720
build environments

00:23:57,679 --> 00:24:04,240
um so what we want to do here is

00:24:00,720 --> 00:24:06,480
not enable sse4.2

00:24:04,240 --> 00:24:08,799
because that's not available on a power

00:24:06,480 --> 00:24:10,880
machine

00:24:08,799 --> 00:24:12,159
power machines have different type of

00:24:10,880 --> 00:24:15,520
optimizations

00:24:12,159 --> 00:24:17,360
which is signing and and you see some of

00:24:15,520 --> 00:24:19,520
the compile options that we

00:24:17,360 --> 00:24:21,279
add so that we can get the most out of

00:24:19,520 --> 00:24:23,120
the machine

00:24:21,279 --> 00:24:24,880
without having to patch the full

00:24:23,120 --> 00:24:28,720
software

00:24:24,880 --> 00:24:30,000
entirely to be able to do this we need

00:24:28,720 --> 00:24:34,320
to actually

00:24:30,000 --> 00:24:37,200
sometimes use extra bits and then so we

00:24:34,320 --> 00:24:38,159
repatch the compilers or the application

00:24:37,200 --> 00:24:40,080
itself

00:24:38,159 --> 00:24:42,480
depending on what is the quickest

00:24:40,080 --> 00:24:42,480
solution

00:24:45,120 --> 00:24:49,640
for for about a few years we have been

00:24:47,840 --> 00:24:51,600
doing that behind the scenes so from

00:24:49,640 --> 00:24:55,039
2015 more or less

00:24:51,600 --> 00:24:57,200
until 2017

00:24:55,039 --> 00:24:58,960
and then we slowly started opening up

00:24:57,200 --> 00:25:02,320
all our infrastructure

00:24:58,960 --> 00:25:05,919
um and

00:25:02,320 --> 00:25:09,200
now we actually offer this fully

00:25:05,919 --> 00:25:12,400
free optimized version

00:25:09,200 --> 00:25:14,960
so uh on the website you can find

00:25:12,400 --> 00:25:16,799
all the information all the patches we

00:25:14,960 --> 00:25:20,320
have going to our git

00:25:16,799 --> 00:25:22,240
system um and as i mentioned a few times

00:25:20,320 --> 00:25:24,880
we are looking at power el8

00:25:22,240 --> 00:25:26,960
which is on the way um and we are

00:25:24,880 --> 00:25:30,080
looking at how we can better support

00:25:26,960 --> 00:25:30,960
newer architectures or newer type of

00:25:30,080 --> 00:25:34,480
systems

00:25:30,960 --> 00:25:34,960
um for the moment our city pipeline is

00:25:34,480 --> 00:25:37,360
is

00:25:34,960 --> 00:25:38,400
because it has a lot of hooks in there

00:25:37,360 --> 00:25:41,520
isn't open

00:25:38,400 --> 00:25:44,320
to the world or open sourced on its own

00:25:41,520 --> 00:25:45,279
so i'm looking at how we can do that in

00:25:44,320 --> 00:25:48,960
the future

00:25:45,279 --> 00:25:51,679
and how do how we can

00:25:48,960 --> 00:25:51,679
open that up

00:25:52,080 --> 00:25:56,000
okay so these are some of the

00:25:53,760 --> 00:25:59,840
applications that

00:25:56,000 --> 00:26:02,159
we were able to migrate

00:25:59,840 --> 00:26:02,960
i can't put all the names there because

00:26:02,159 --> 00:26:05,840
of

00:26:02,960 --> 00:26:06,960
sometimes ndas without customers but

00:26:05,840 --> 00:26:08,559
these are the ones we can

00:26:06,960 --> 00:26:10,480
talk about these are the open source

00:26:08,559 --> 00:26:11,919
ones

00:26:10,480 --> 00:26:14,159
there are a lot of web apps which we

00:26:11,919 --> 00:26:17,440
have also migrated and are able to run

00:26:14,159 --> 00:26:20,880
on on power and which are fairly easy to

00:26:17,440 --> 00:26:20,880
to migrate yourself so

00:26:22,480 --> 00:26:26,720
and then yes if you have any other

00:26:24,720 --> 00:26:30,320
workloads you can think of

00:26:26,720 --> 00:26:33,279
uh how can we empower you to

00:26:30,320 --> 00:26:33,279
get them on power

00:26:34,640 --> 00:26:38,720
thank you for your attention um if you

00:26:36,960 --> 00:26:42,320
have any questions

00:26:38,720 --> 00:26:43,679
um you can ask them in slack i see there

00:26:42,320 --> 00:26:46,080
are a few come in

00:26:43,679 --> 00:26:48,880
um if you have any questions afterwards

00:26:46,080 --> 00:26:53,440
you can always email me

00:26:48,880 --> 00:26:56,880
so which version of gcc do you use

00:26:53,440 --> 00:26:59,760
um so for that we

00:26:56,880 --> 00:27:00,720
decided to go with the version that

00:26:59,760 --> 00:27:03,919
comes from

00:27:00,720 --> 00:27:05,440
the upstream uh distribution we are

00:27:03,919 --> 00:27:10,000
using in this case centos

00:27:05,440 --> 00:27:12,559
so for power real uh 7 that's 4.8.5

00:27:10,000 --> 00:27:14,320
with a lot of patches in there so that

00:27:12,559 --> 00:27:15,679
we can actually compile a lot of the

00:27:14,320 --> 00:27:18,320
newer

00:27:15,679 --> 00:27:20,320
software in there but it's more back

00:27:18,320 --> 00:27:23,279
posting than anything else and

00:27:20,320 --> 00:27:24,799
for uh power el8 if i remember the

00:27:23,279 --> 00:27:28,240
version well by heart that's

00:27:24,799 --> 00:27:28,240
um eight dot

00:27:29,320 --> 00:27:34,799
8.5 or 8.6 um

00:27:32,240 --> 00:27:35,520
that one isn't out yet so once it comes

00:27:34,799 --> 00:27:38,080
out

00:27:35,520 --> 00:27:39,039
i will be using that did we consider to

00:27:38,080 --> 00:27:42,799
use the ibm

00:27:39,039 --> 00:27:45,600
advance 2 chain yes we did

00:27:42,799 --> 00:27:46,240
yes it has a newer version of gcc and it

00:27:45,600 --> 00:27:49,710
is

00:27:46,240 --> 00:27:51,120
compiled and optimized with a lot of um

00:27:49,710 --> 00:27:53,440
[Music]

00:27:51,120 --> 00:27:55,520
optimizations in there the reason why we

00:27:53,440 --> 00:27:58,960
decided not to go with that

00:27:55,520 --> 00:28:00,640
uh was to be as transparent for the open

00:27:58,960 --> 00:28:04,000
source world as possible

00:28:00,640 --> 00:28:07,679
and also to have the ability to run

00:28:04,000 --> 00:28:10,399
centos uh binaries or rel binaries

00:28:07,679 --> 00:28:11,200
on power yell which means that if you

00:28:10,399 --> 00:28:16,320
today

00:28:11,200 --> 00:28:19,440
have any binary that was compiled for um

00:28:16,320 --> 00:28:22,960
uh centos url they will

00:28:19,440 --> 00:28:25,600
automatically work also on power yell um

00:28:22,960 --> 00:28:27,039
and we in our initial test we were not

00:28:25,600 --> 00:28:30,640
able to guarantee that

00:28:27,039 --> 00:28:30,640
if we use the ibm toolchain

00:28:33,600 --> 00:28:39,520
do we make use of sscc sorry sse

00:28:37,159 --> 00:28:41,919
compatibility implementations on power

00:28:39,520 --> 00:28:44,880
in recent versions of gcc

00:28:41,919 --> 00:28:45,360
so for power el8 yes we will be using

00:28:44,880 --> 00:28:47,440
those

00:28:45,360 --> 00:28:48,640
newer versions and we will actually be

00:28:47,440 --> 00:28:51,919
looking at how we can get

00:28:48,640 --> 00:28:55,120
vectoring synthetic vector intrinsic

00:28:51,919 --> 00:28:57,360
optimizations in there and we

00:28:55,120 --> 00:28:59,279
are actually that's one of the reasons

00:28:57,360 --> 00:28:59,760
why we haven't released uh power real

00:28:59,279 --> 00:29:01,200
eight

00:28:59,760 --> 00:29:03,039
is because we want to drive those

00:29:01,200 --> 00:29:05,760
optimizations further

00:29:03,039 --> 00:29:09,039
and be able to use those much better

00:29:05,760 --> 00:29:09,039
than what we did in the past

00:29:10,720 --> 00:29:15,679
and i think i'm out of time um

00:29:14,080 --> 00:29:17,840
those are the questions that are that

00:29:15,679 --> 00:29:20,159
were that i'm able to do

00:29:17,840 --> 00:29:22,480
in the session itself if you have any

00:29:20,159 --> 00:29:26,960
other questions i'm also on slack

00:29:22,480 --> 00:29:26,960

YouTube URL: https://www.youtube.com/watch?v=kASzjphZLjI


