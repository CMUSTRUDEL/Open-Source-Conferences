Title: OpenCAPI-based Image Analysis Pipeline for 18 GB s kilohertz-framerate X-ray...  - Filip Leonarski
Publication date: 2020-09-21
Playlist: OpenPOWER Summit NA 2020
Description: 
	OpenCAPI-based Image Analysis Pipeline for 18 GB/s kilohertz-framerate X-ray Camera at the Swiss Light Source synchrotron - Filip Leonarski, Paul Scherrer Institute

Speakers: Filip Leonarski

Macromolecular crystallography is an experimental technique allowing to explore 3D atomic structure of proteins, used by academics for research in biology and by pharmaceutical companies in rational drug design. While up to now development of the technique was limited by scientific instruments performance, recently computing performance becomes a key limitation. In his presentation Filip will present a computing challenge to handle 18 GB/s data stream coming from the new X-ray detector. He will show his experiences in applying conventional hardware for the task and why this attempt failed. He will then present how IC 922 server with OpenCAPI enabled FPGA boards allowed to build a sustainable and scalable solution for high speed data acquisition. Finally, he will give a perspective, how the advancement in hardware development will enable better science by users of the Swiss Light Source.
Captions: 
	00:00:00,640 --> 00:00:06,720
so good morning good afternoon again

00:00:03,280 --> 00:00:10,000
my name is philipp leonarski i work as a

00:00:06,720 --> 00:00:12,559
beamline data scientist at the pulsar

00:00:10,000 --> 00:00:13,920
institute in switzerland and in this

00:00:12,559 --> 00:00:16,000
presentation today

00:00:13,920 --> 00:00:17,680
i would like to show you an application

00:00:16,000 --> 00:00:21,039
of open copy

00:00:17,680 --> 00:00:26,080
for handling data from our new x-ray

00:00:21,039 --> 00:00:26,080
cameras at our synchrotron so

00:00:27,359 --> 00:00:31,279
in this presentation i would like to

00:00:29,679 --> 00:00:34,640
first give you

00:00:31,279 --> 00:00:37,760
a quick introduction into what

00:00:34,640 --> 00:00:40,000
we do at synchrotron in terms of

00:00:37,760 --> 00:00:42,000
macromolecular crystallography

00:00:40,000 --> 00:00:43,200
i would like to introduce you to the

00:00:42,000 --> 00:00:46,559
challenges

00:00:43,200 --> 00:00:48,719
that come with our new x-ray detectors

00:00:46,559 --> 00:00:50,960
and i would like to show you how we

00:00:48,719 --> 00:00:54,480
solve these challenges

00:00:50,960 --> 00:00:58,559
with help of power architecture and

00:00:54,480 --> 00:01:01,760
oc axle software stack

00:00:58,559 --> 00:01:04,400
so you probably know x-rays

00:01:01,760 --> 00:01:05,760
for the way they can penetrate matter

00:01:04,400 --> 00:01:09,360
and they can

00:01:05,760 --> 00:01:13,200
show what they can

00:01:09,360 --> 00:01:16,240
allow us to see inside matter

00:01:13,200 --> 00:01:19,040
but it's not only as in imaging

00:01:16,240 --> 00:01:20,720
for on microscopic scale but it's also

00:01:19,040 --> 00:01:24,000
on nanoscale

00:01:20,720 --> 00:01:26,880
so x-rays allow us to know

00:01:24,000 --> 00:01:27,840
how atoms organize themselves into

00:01:26,880 --> 00:01:30,880
molecules

00:01:27,840 --> 00:01:31,680
and bigger structures now the photo 51

00:01:30,880 --> 00:01:35,840
i'm showing

00:01:31,680 --> 00:01:39,840
here made by goslink and franklin

00:01:35,840 --> 00:01:41,280
allowed watson and creek to find how the

00:01:39,840 --> 00:01:44,560
double helix

00:01:41,280 --> 00:01:47,040
of dna looks like this was the photo

00:01:44,560 --> 00:01:48,159
was instrumental in finding the

00:01:47,040 --> 00:01:51,280
structure

00:01:48,159 --> 00:01:55,040
of dna double helix and this

00:01:51,280 --> 00:01:58,399
continues till recently

00:01:55,040 --> 00:02:01,040
when researchers

00:01:58,399 --> 00:02:02,479
were able to find an atomic structure

00:02:01,040 --> 00:02:06,640
for ribosome

00:02:02,479 --> 00:02:10,640
which is a complex of more than

00:02:06,640 --> 00:02:13,120
a hundred thousand atoms and with x-rays

00:02:10,640 --> 00:02:15,040
they were able to find the positions of

00:02:13,120 --> 00:02:18,879
the atoms in this complex

00:02:15,040 --> 00:02:20,840
and to understand how ribosome is doing

00:02:18,879 --> 00:02:23,520
its functions and we are proud that the

00:02:20,840 --> 00:02:24,959
psi as some of the structures that led

00:02:23,520 --> 00:02:28,400
to the nobel prize

00:02:24,959 --> 00:02:32,080
in 2009 were actually solved here

00:02:28,400 --> 00:02:35,120
in vitigen now to say

00:02:32,080 --> 00:02:37,360
about what x-ray crystallography is it's

00:02:35,120 --> 00:02:39,599
an experimental science

00:02:37,360 --> 00:02:42,080
that allows to determine the atomic and

00:02:39,599 --> 00:02:45,200
molecular structure of a crystal

00:02:42,080 --> 00:02:48,640
through measuring how

00:02:45,200 --> 00:02:49,760
x-rays x-ray beam is diffracted through

00:02:48,640 --> 00:02:53,760
the crystal

00:02:49,760 --> 00:02:55,760
so we can see here an image

00:02:53,760 --> 00:02:57,200
that would be formed by x-rays passing

00:02:55,760 --> 00:02:59,760
through a crystal

00:02:57,200 --> 00:03:00,400
so that the x-rays are diffracted in

00:02:59,760 --> 00:03:03,040
multiple

00:03:00,400 --> 00:03:04,080
directions and by knowing intensities of

00:03:03,040 --> 00:03:06,239
these spots

00:03:04,080 --> 00:03:07,120
we can build electron density of the

00:03:06,239 --> 00:03:10,720
structure

00:03:07,120 --> 00:03:12,720
and then the full atomic model

00:03:10,720 --> 00:03:14,000
and actually up today there are more

00:03:12,720 --> 00:03:16,400
than 150

00:03:14,000 --> 00:03:17,920
000 of structures of molecules solved

00:03:16,400 --> 00:03:18,800
with extra crystallography this is the

00:03:17,920 --> 00:03:22,800
currently

00:03:18,800 --> 00:03:24,959
the most precise tool to find

00:03:22,800 --> 00:03:27,040
structure atomic structure of bio

00:03:24,959 --> 00:03:29,360
biological molecules

00:03:27,040 --> 00:03:32,080
and there are more than 300 structures

00:03:29,360 --> 00:03:34,319
of covet related proteins

00:03:32,080 --> 00:03:36,239
that were deposited in the protein data

00:03:34,319 --> 00:03:40,080
bank and are available

00:03:36,239 --> 00:03:43,920
for researchers to design new drugs

00:03:40,080 --> 00:03:45,920
for covid so why

00:03:43,920 --> 00:03:47,760
actually is this happening at the

00:03:45,920 --> 00:03:51,200
synchrotron

00:03:47,760 --> 00:03:52,560
now interestingly for our high energy

00:03:51,200 --> 00:03:54,480
physics colleagues

00:03:52,560 --> 00:03:55,840
at cern there is an effect that is very

00:03:54,480 --> 00:03:59,280
undesirable

00:03:55,840 --> 00:04:03,040
so when a particle charged particle

00:03:59,280 --> 00:04:06,080
is bent on a magnet to make it

00:04:03,040 --> 00:04:08,319
go into round way part of it energy is

00:04:06,080 --> 00:04:14,000
lost

00:04:08,319 --> 00:04:15,920
so this requires more

00:04:14,000 --> 00:04:17,120
more acceleration for high energy

00:04:15,920 --> 00:04:19,359
physics it

00:04:17,120 --> 00:04:20,479
gets it's more expensive but it's

00:04:19,359 --> 00:04:24,639
actually not lost

00:04:20,479 --> 00:04:27,120
it's radiated as a beam of very sprite

00:04:24,639 --> 00:04:28,080
electromagnetic magnetic radiation

00:04:27,120 --> 00:04:31,120
especially

00:04:28,080 --> 00:04:32,320
in the range of x-rays and this is

00:04:31,120 --> 00:04:35,199
actually a blessing

00:04:32,320 --> 00:04:35,759
for the x-ray structural sciences as

00:04:35,199 --> 00:04:38,000
this

00:04:35,759 --> 00:04:40,000
the beam that comes from a protein from

00:04:38,000 --> 00:04:42,880
a particle accelerator

00:04:40,000 --> 00:04:43,600
is many times higher than what you can

00:04:42,880 --> 00:04:46,080
get

00:04:43,600 --> 00:04:47,520
with conventional x-ray tubes that you

00:04:46,080 --> 00:04:50,800
see at the airports

00:04:47,520 --> 00:04:52,240
or at the hospital so currently many

00:04:50,800 --> 00:04:56,400
accelerators

00:04:52,240 --> 00:04:59,840
are built to produce light

00:04:56,400 --> 00:05:02,880
x-ray light uv

00:04:59,840 --> 00:05:06,479
and not only as colliders

00:05:02,880 --> 00:05:08,479
like lhc in cern now

00:05:06,479 --> 00:05:10,479
in terms of light sources there are two

00:05:08,479 --> 00:05:12,720
classes there are synchrotrons which you

00:05:10,479 --> 00:05:15,440
can see here there are circular

00:05:12,720 --> 00:05:16,560
so that the electrons they fly on the

00:05:15,440 --> 00:05:19,120
circle

00:05:16,560 --> 00:05:20,880
and there are magnets in many positions

00:05:19,120 --> 00:05:24,400
and then they generate

00:05:20,880 --> 00:05:26,160
this beams of x-rays or other

00:05:24,400 --> 00:05:28,320
electromagnetic radiation

00:05:26,160 --> 00:05:30,320
there are also long linear accelerators

00:05:28,320 --> 00:05:32,400
and can produce very short pulses it's a

00:05:30,320 --> 00:05:35,759
new kit on the block

00:05:32,400 --> 00:05:37,520
i will not talk about friction lasers i

00:05:35,759 --> 00:05:40,639
can just say that we have one

00:05:37,520 --> 00:05:41,440
here in switzerland on one side of the

00:05:40,639 --> 00:05:44,400
river

00:05:41,440 --> 00:05:45,360
you can see swissvale here but i will

00:05:44,400 --> 00:05:47,520
focus today

00:05:45,360 --> 00:05:49,280
on the swiss light source the circular

00:05:47,520 --> 00:05:54,240
building here where i spend

00:05:49,280 --> 00:05:54,240
most of my time working on

00:05:54,560 --> 00:05:59,120
integrating x-ray detectors for

00:05:56,880 --> 00:06:02,240
crystallography beamlines

00:05:59,120 --> 00:06:05,360
now we have multiple techniques

00:06:02,240 --> 00:06:07,600
available at the swiss light source

00:06:05,360 --> 00:06:09,520
and one of them is biological

00:06:07,600 --> 00:06:12,479
crystallography

00:06:09,520 --> 00:06:14,720
now we have three experimental stations

00:06:12,479 --> 00:06:18,000
dedicated to this technique

00:06:14,720 --> 00:06:21,199
with users being from both industrial

00:06:18,000 --> 00:06:24,240
world so pharmaceutical companies which

00:06:21,199 --> 00:06:28,000
look for potential drug

00:06:24,240 --> 00:06:31,440
targets to bind proteins

00:06:28,000 --> 00:06:33,120
but also we have academics from all over

00:06:31,440 --> 00:06:35,840
the world

00:06:33,120 --> 00:06:37,280
that visit us i mean currently in coffee

00:06:35,840 --> 00:06:39,120
times they

00:06:37,280 --> 00:06:41,680
only see us on the screen they do their

00:06:39,120 --> 00:06:45,280
experience remotely

00:06:41,680 --> 00:06:48,080
and they do experiments to understand to

00:06:45,280 --> 00:06:50,800
do basic research in structural biology

00:06:48,080 --> 00:06:52,560
now this year is special we have quite a

00:06:50,800 --> 00:06:54,880
lot of covet research

00:06:52,560 --> 00:06:56,240
happening solving structures of coving

00:06:54,880 --> 00:07:00,160
proteins

00:06:56,240 --> 00:07:03,199
but we also have other users

00:07:00,160 --> 00:07:05,199
doing remotely measurements at our

00:07:03,199 --> 00:07:07,120
facility to send samples

00:07:05,199 --> 00:07:08,479
in liquid nitrogen and we mount them and

00:07:07,120 --> 00:07:12,479
they can measure

00:07:08,479 --> 00:07:16,400
so how the end station looks like

00:07:12,479 --> 00:07:18,479
it's a quite long x-ray optics which is

00:07:16,400 --> 00:07:20,240
not shown on this image

00:07:18,479 --> 00:07:22,720
and then there is a place to mount a

00:07:20,240 --> 00:07:25,520
crystal and this device

00:07:22,720 --> 00:07:27,919
in the back actually allows to rotate

00:07:25,520 --> 00:07:30,319
this crystal

00:07:27,919 --> 00:07:32,720
so the beam can hit different

00:07:30,319 --> 00:07:35,840
orientations of the crystal depending on

00:07:32,720 --> 00:07:38,000
how this device is rotating now the

00:07:35,840 --> 00:07:40,800
crystal can be mounted with a robot

00:07:38,000 --> 00:07:42,160
here and unmounted so it all can be

00:07:40,800 --> 00:07:44,560
controlled remotely

00:07:42,160 --> 00:07:46,080
and then the most important device from

00:07:44,560 --> 00:07:49,680
my side is this

00:07:46,080 --> 00:07:52,720
shiny surface here which is an x-ray

00:07:49,680 --> 00:07:55,759
detector now the image that

00:07:52,720 --> 00:07:58,560
we see on the detector from a crystal

00:07:55,759 --> 00:08:00,160
is a set of spots that look more or less

00:07:58,560 --> 00:08:03,280
like this one

00:08:00,160 --> 00:08:05,599
and from intensity of the spots

00:08:03,280 --> 00:08:06,639
we are actually able to tell 3d

00:08:05,599 --> 00:08:09,840
structure

00:08:06,639 --> 00:08:14,720
of protein of interest

00:08:09,840 --> 00:08:17,120
now psi is also a major player in the

00:08:14,720 --> 00:08:19,120
hybrid pixel detectors we were

00:08:17,120 --> 00:08:22,560
developing them for cern

00:08:19,120 --> 00:08:24,319
and then researchers at psi realize

00:08:22,560 --> 00:08:25,759
that the technology can be also used for

00:08:24,319 --> 00:08:27,840
x-ray cameras

00:08:25,759 --> 00:08:28,879
which were pilatus and eiger those are

00:08:27,840 --> 00:08:32,320
names of

00:08:28,879 --> 00:08:32,959
swiss mountains now we have a psi

00:08:32,320 --> 00:08:35,440
startup

00:08:32,959 --> 00:08:37,279
that actually commercialized the design

00:08:35,440 --> 00:08:38,479
and most synchrotrons are equipped with

00:08:37,279 --> 00:08:39,919
detectors

00:08:38,479 --> 00:08:41,839
now what is important about these

00:08:39,919 --> 00:08:44,640
detectors there is a sensor

00:08:41,839 --> 00:08:46,160
that is a piece of silicon where x-rays

00:08:44,640 --> 00:08:49,120
are absorbed

00:08:46,160 --> 00:08:52,320
and there is a readout chip which has

00:08:49,120 --> 00:08:55,440
dedicated electronics for each pixel

00:08:52,320 --> 00:08:56,320
so a megapixel detector you can actually

00:08:55,440 --> 00:08:59,839
think

00:08:56,320 --> 00:09:03,040
as 4 million of detectors

00:08:59,839 --> 00:09:06,160
working in parallel and

00:09:03,040 --> 00:09:09,600
currently we are rolling out

00:09:06,160 --> 00:09:12,480
a new design um as

00:09:09,600 --> 00:09:13,600
while the all detectors pilatus and

00:09:12,480 --> 00:09:18,240
eiger

00:09:13,600 --> 00:09:22,160
were extremely good in looking on

00:09:18,240 --> 00:09:24,880
weak signal we could see a single

00:09:22,160 --> 00:09:25,839
photon single x-ray photon on this

00:09:24,880 --> 00:09:28,800
detector

00:09:25,839 --> 00:09:30,720
very clearly but they suffered from

00:09:28,800 --> 00:09:33,120
count rate limitation

00:09:30,720 --> 00:09:34,080
which limited the dynamic range of the

00:09:33,120 --> 00:09:37,279
detector

00:09:34,080 --> 00:09:40,240
especially at very fast frame rates

00:09:37,279 --> 00:09:41,519
now we have a new design called jungfrau

00:09:40,240 --> 00:09:44,800
also from one of the

00:09:41,519 --> 00:09:46,160
highest swiss mountains that

00:09:44,800 --> 00:09:48,000
addresses the limitations of the

00:09:46,160 --> 00:09:50,880
previous technology

00:09:48,000 --> 00:09:52,480
now juncrow is a great detector to work

00:09:50,880 --> 00:09:56,000
at kilohertz frame rates

00:09:52,480 --> 00:09:58,880
so one to two thousand images per second

00:09:56,000 --> 00:10:00,000
and the way it achieves a very high

00:09:58,880 --> 00:10:03,200
dynamic range

00:10:00,000 --> 00:10:03,680
is through being able to dynamically

00:10:03,200 --> 00:10:06,640
work

00:10:03,680 --> 00:10:08,640
in three different modes now when there

00:10:06,640 --> 00:10:11,120
is just a few photons coming

00:10:08,640 --> 00:10:12,160
there is only a single capacitor

00:10:11,120 --> 00:10:14,959
operating

00:10:12,160 --> 00:10:16,720
which allows to measure precisely with a

00:10:14,959 --> 00:10:20,880
low dynamic range

00:10:16,720 --> 00:10:22,079
now when it the pixel sees that the more

00:10:20,880 --> 00:10:24,720
photons are coming

00:10:22,079 --> 00:10:26,079
it actually switches to a mode which is

00:10:24,720 --> 00:10:29,120
less precise

00:10:26,079 --> 00:10:32,160
but has a very high dynamic range

00:10:29,120 --> 00:10:35,279
so for example in this black spot

00:10:32,160 --> 00:10:37,440
the middle one is measured with a mode

00:10:35,279 --> 00:10:40,480
that offers a high dynamic range but

00:10:37,440 --> 00:10:40,480
maybe a bit less

00:10:40,640 --> 00:10:45,440
precision and the outside

00:10:43,760 --> 00:10:46,880
is measured in the mode that is

00:10:45,440 --> 00:10:49,760
sensitive for

00:10:46,880 --> 00:10:52,160
low counts now this makes reading our

00:10:49,760 --> 00:10:54,320
data from this detector very complicated

00:10:52,160 --> 00:10:55,279
because we are actually not reading 17

00:10:54,320 --> 00:10:57,920
here

00:10:55,279 --> 00:10:58,720
we are reading that the mode which was

00:10:57,920 --> 00:11:02,000
used was

00:10:58,720 --> 00:11:04,000
g0 the blue one and what was measured by

00:11:02,000 --> 00:11:07,279
the analog to digital converter

00:11:04,000 --> 00:11:09,519
now for this one we know that it's g2 so

00:11:07,279 --> 00:11:11,040
it has to be converted differently so

00:11:09,519 --> 00:11:14,079
conversion of the pixels

00:11:11,040 --> 00:11:15,440
is difficult now this is a modular

00:11:14,079 --> 00:11:18,800
detector

00:11:15,440 --> 00:11:21,920
uh we have roughly 500 000 pixels

00:11:18,800 --> 00:11:22,560
per single module each module produces

00:11:21,920 --> 00:11:25,120
00:11:22,560 --> 00:11:28,000
up to 20 gigabits per second which is

00:11:25,120 --> 00:11:30,800
just because we have two fiber links

00:11:28,000 --> 00:11:32,640
of 10 gigabit per second coming out so a

00:11:30,800 --> 00:11:35,920
4 megapixel detector

00:11:32,640 --> 00:11:40,000
can produce 160 gigabits

00:11:35,920 --> 00:11:42,800
per second now we are currently

00:11:40,000 --> 00:11:43,680
upgrading our light source to be able to

00:11:42,800 --> 00:11:46,480
have 10 times

00:11:43,680 --> 00:11:47,040
more photon flux and this will allow us

00:11:46,480 --> 00:11:49,839
to do

00:11:47,040 --> 00:11:50,800
measurements 10 times faster we could

00:11:49,839 --> 00:11:53,519
measure

00:11:50,800 --> 00:11:54,399
for our academic or industrial customers

00:11:53,519 --> 00:11:58,079
10 times

00:11:54,399 --> 00:12:01,760
more samples per hour

00:11:58,079 --> 00:12:04,160
but this enables us to do new techniques

00:12:01,760 --> 00:12:05,519
like for example screening thousand drug

00:12:04,160 --> 00:12:06,959
like fragments

00:12:05,519 --> 00:12:08,959
which is like molecular docking on a

00:12:06,959 --> 00:12:11,279
supercomputer just with a fully

00:12:08,959 --> 00:12:12,880
experimental method

00:12:11,279 --> 00:12:15,040
it also enables us a room temperature

00:12:12,880 --> 00:12:18,320
crystallography but this

00:12:15,040 --> 00:12:20,800
increases its pushes data throughput

00:12:18,320 --> 00:12:22,320
also by an order of magnitude and

00:12:20,800 --> 00:12:24,560
looking historically

00:12:22,320 --> 00:12:26,800
from the day that the pilatus detector

00:12:24,560 --> 00:12:28,880
was installed at the swiss light source

00:12:26,800 --> 00:12:31,839
we are doubling data rates of our

00:12:28,880 --> 00:12:34,880
detectors every two years

00:12:31,839 --> 00:12:35,519
so we need to have sustainable computing

00:12:34,880 --> 00:12:38,480
solution

00:12:35,519 --> 00:12:39,680
to actually deal with this increasing of

00:12:38,480 --> 00:12:42,079
data

00:12:39,680 --> 00:12:44,160
now what we need is a way to transfer

00:12:42,079 --> 00:12:45,519
data from the detector which is a simple

00:12:44,160 --> 00:12:48,880
device

00:12:45,519 --> 00:12:50,880
uh to a computer to be able to buffer

00:12:48,880 --> 00:12:52,880
so detector has no buffering capability

00:12:50,880 --> 00:12:55,360
to only streams udp packets

00:12:52,880 --> 00:12:57,040
going to be able to buffer everything

00:12:55,360 --> 00:12:57,920
and then either store it on the file

00:12:57,040 --> 00:13:02,560
system

00:12:57,920 --> 00:13:04,720
or do on the fly processing of this data

00:13:02,560 --> 00:13:07,279
now we tried two different solutions we

00:13:04,720 --> 00:13:09,680
tried the conventional cpu centric

00:13:07,279 --> 00:13:11,920
first because that's easier and then we

00:13:09,680 --> 00:13:15,760
tried the task specific architecture

00:13:11,920 --> 00:13:18,480
with power 9 and oc axle

00:13:15,760 --> 00:13:19,519
now first approach we bought just a very

00:13:18,480 --> 00:13:22,720
expensive

00:13:19,519 --> 00:13:24,800
4 cpu socket server with quite a lot of

00:13:22,720 --> 00:13:28,240
memory

00:13:24,800 --> 00:13:31,440
we wrote we had already a receiver that

00:13:28,240 --> 00:13:35,519
is able to receive udp packets just with

00:13:31,440 --> 00:13:38,160
linux system calls we have

00:13:35,519 --> 00:13:39,440
wrote a highly optimized cpu code to do

00:13:38,160 --> 00:13:41,360
the conversion

00:13:39,440 --> 00:13:42,639
from this three different modes to

00:13:41,360 --> 00:13:45,680
linear scale

00:13:42,639 --> 00:13:48,800
and compression we could reach

00:13:45,680 --> 00:13:52,240
roughly five gigabytes per second of the

00:13:48,800 --> 00:13:53,040
throughput from the detector to storage

00:13:52,240 --> 00:13:56,480
or

00:13:53,040 --> 00:13:59,120
to to other streaming

00:13:56,480 --> 00:13:59,600
out this would require this is the

00:13:59,120 --> 00:14:02,800
problem

00:13:59,600 --> 00:14:04,079
is in the interrupts handling in the way

00:14:02,800 --> 00:14:07,279
that the linux

00:14:04,079 --> 00:14:09,839
network stack is moving the data

00:14:07,279 --> 00:14:11,440
from them from and into the memory

00:14:09,839 --> 00:14:14,160
multiple times

00:14:11,440 --> 00:14:15,760
but at the end we could reach with quite

00:14:14,160 --> 00:14:17,440
a lot of effort five gigabytes per

00:14:15,760 --> 00:14:19,199
second and this would require to have

00:14:17,440 --> 00:14:21,760
four such expensive servers

00:14:19,199 --> 00:14:23,600
to handle the throughput so we have

00:14:21,760 --> 00:14:24,720
started to look into a domain specific

00:14:23,600 --> 00:14:28,480
architecture because

00:14:24,720 --> 00:14:30,399
it's quite a trendy uh subject right now

00:14:28,480 --> 00:14:31,600
and we looked into power 9 as this is a

00:14:30,399 --> 00:14:35,279
throughput

00:14:31,600 --> 00:14:38,160
optimized architecture it's

00:14:35,279 --> 00:14:39,199
known for having a high throughput and

00:14:38,160 --> 00:14:40,079
we found there are actually two

00:14:39,199 --> 00:14:42,480
different options

00:14:40,079 --> 00:14:44,880
offered by power nine we could either

00:14:42,480 --> 00:14:46,320
have a very high throughput with gpus

00:14:44,880 --> 00:14:50,160
and nv-link

00:14:46,320 --> 00:14:54,800
or a bit smaller throughput but still

00:14:50,160 --> 00:15:00,240
high enough with open copy and fpgas

00:14:54,800 --> 00:15:02,480
now gpus seem to be easier to program

00:15:00,240 --> 00:15:04,000
they do not offer real-time guarantee

00:15:02,480 --> 00:15:06,880
while our application

00:15:04,000 --> 00:15:06,880
really requires

00:15:07,120 --> 00:15:11,279
that we are guaranteed that the things

00:15:09,360 --> 00:15:14,160
are handled in the real time

00:15:11,279 --> 00:15:15,519
but on the other hand fpgas imperfect

00:15:14,160 --> 00:15:19,360
but they are so

00:15:15,519 --> 00:15:23,199
so complicated to program and we thought

00:15:19,360 --> 00:15:26,959
that it's just impossible to implement

00:15:23,199 --> 00:15:27,680
our task in the fpga without having an

00:15:26,959 --> 00:15:32,639
extreme

00:15:27,680 --> 00:15:36,480
effort and a lot of people a lot of time

00:15:32,639 --> 00:15:40,079
but then we talked with snap developers

00:15:36,480 --> 00:15:43,120
in october 2019 and they told us

00:15:40,079 --> 00:15:44,480
you don't need actually to do vhdl or

00:15:43,120 --> 00:15:47,920
verilog

00:15:44,480 --> 00:15:51,920
you just do high level synthesis with c

00:15:47,920 --> 00:15:55,759
or c plus plus and our tools

00:15:51,920 --> 00:15:58,480
will help you to do all the rest

00:15:55,759 --> 00:15:59,839
so give it a try we gave it a try and

00:15:58,480 --> 00:16:03,519
actually january

00:15:59,839 --> 00:16:07,040
2020 we are able to collect

00:16:03,519 --> 00:16:10,720
data from a detector through

00:16:07,040 --> 00:16:12,880
snap and copy um

00:16:10,720 --> 00:16:14,560
and it's only three months we already

00:16:12,880 --> 00:16:16,399
have results so we decided

00:16:14,560 --> 00:16:17,920
we want to really go for fpgas we want

00:16:16,399 --> 00:16:22,880
to invest

00:16:17,920 --> 00:16:26,399
time into into this solution

00:16:22,880 --> 00:16:27,040
ac 922 is amazing in terms of gpu

00:16:26,399 --> 00:16:32,079
throughput

00:16:27,040 --> 00:16:32,079
but limited for fpgas and at this time

00:16:32,680 --> 00:16:39,839
ic922 server was being introduced

00:16:36,959 --> 00:16:41,040
which has a significant open copy

00:16:39,839 --> 00:16:43,360
capability

00:16:41,040 --> 00:16:44,959
and we decided to go for this one and

00:16:43,360 --> 00:16:46,880
march 2020

00:16:44,959 --> 00:16:48,320
we already have a pixel conversion we

00:16:46,880 --> 00:16:51,839
have data acquisition

00:16:48,320 --> 00:16:54,959
and pixel conversion working with snap

00:16:51,839 --> 00:16:58,240
now later quite quickly we moved from

00:16:54,959 --> 00:17:01,680
snap to up to oc

00:16:58,240 --> 00:17:04,799
excel and from copy to open copy

00:17:01,680 --> 00:17:07,199
and currently we have a system with two

00:17:04,799 --> 00:17:08,240
fpgas being able to collect 18 gigabytes

00:17:07,199 --> 00:17:10,640
per second

00:17:08,240 --> 00:17:11,679
so we have reached our objective in six

00:17:10,640 --> 00:17:13,360
months

00:17:11,679 --> 00:17:14,799
and we have good prospects that we

00:17:13,360 --> 00:17:17,520
actually can

00:17:14,799 --> 00:17:19,600
increase the throughput up to 50

00:17:17,520 --> 00:17:22,079
gigabytes per second

00:17:19,600 --> 00:17:23,600
another thing it's a very energy

00:17:22,079 --> 00:17:26,720
efficient solution

00:17:23,600 --> 00:17:32,400
actually the fpga takes probably 35

00:17:26,720 --> 00:17:35,600
watts um and it's probably

00:17:32,400 --> 00:17:37,760
five or ten times less than the large

00:17:35,600 --> 00:17:40,480
server would actually take to do the

00:17:37,760 --> 00:17:44,240
same tasks that vga is doing

00:17:40,480 --> 00:17:47,679
so the the throughput that the workflow

00:17:44,240 --> 00:17:50,640
we were able to do as

00:17:47,679 --> 00:17:52,080
fpga actually received the udp packets

00:17:50,640 --> 00:17:55,440
does the conversion

00:17:52,080 --> 00:17:59,440
does some filtering on the fly and then

00:17:55,440 --> 00:18:03,520
saves images into host memory

00:17:59,440 --> 00:18:06,320
and after compression

00:18:03,520 --> 00:18:07,360
they can be sent via infiniband to

00:18:06,320 --> 00:18:10,400
online processing

00:18:07,360 --> 00:18:12,640
or storage we're also experimenting

00:18:10,400 --> 00:18:16,080
currently with gpus as well which are

00:18:12,640 --> 00:18:19,039
available for ic922

00:18:16,080 --> 00:18:20,400
but that the first benefit for us was

00:18:19,039 --> 00:18:23,039
that open copy has

00:18:20,400 --> 00:18:23,600
higher throughput than pci express but

00:18:23,039 --> 00:18:25,919
then

00:18:23,600 --> 00:18:26,799
when i started to develop code for oc

00:18:25,919 --> 00:18:30,559
axle

00:18:26,799 --> 00:18:34,080
i found the memory coherence and the

00:18:30,559 --> 00:18:37,919
ability for the process to see

00:18:34,080 --> 00:18:40,240
virtual virtual memory space

00:18:37,919 --> 00:18:41,600
so that the fpga can see virtual memory

00:18:40,240 --> 00:18:43,440
space this is just great

00:18:41,600 --> 00:18:44,990
because i can work with pointers on the

00:18:43,440 --> 00:18:46,160
fpga

00:18:44,990 --> 00:18:48,320
[Music]

00:18:46,160 --> 00:18:50,320
i don't need to worry about trans

00:18:48,320 --> 00:18:53,760
translating physical and

00:18:50,320 --> 00:18:57,840
virtual memory or about the fact that

00:18:53,760 --> 00:18:57,840
something is not cache coherent

00:18:57,919 --> 00:19:03,600
and then oc accel abstracts the

00:19:01,600 --> 00:19:05,440
how to use the open copy i don't need to

00:19:03,600 --> 00:19:08,720
know how actually

00:19:05,440 --> 00:19:11,360
the transceivers in the open copy work

00:19:08,720 --> 00:19:13,280
i just tell the program to copy things

00:19:11,360 --> 00:19:16,799
from from the host to fpga and this

00:19:13,280 --> 00:19:20,000
this happens uh so i think

00:19:16,799 --> 00:19:24,160
from my side oc accel is really

00:19:20,000 --> 00:19:26,480
a tool to move

00:19:24,160 --> 00:19:28,799
fpga development development for

00:19:26,480 --> 00:19:32,559
software developers

00:19:28,799 --> 00:19:33,760
um so as as a software development

00:19:32,559 --> 00:19:37,280
project

00:19:33,760 --> 00:19:38,960
um i was able to also interface all of

00:19:37,280 --> 00:19:41,840
this with a continuous integration

00:19:38,960 --> 00:19:42,240
pipeline with gitlab just as i would do

00:19:41,840 --> 00:19:45,280
with

00:19:42,240 --> 00:19:47,840
with a c code to use

00:19:45,280 --> 00:19:49,679
tools that provide unit tests because at

00:19:47,840 --> 00:19:50,400
the end of the day my action code is a c

00:19:49,679 --> 00:19:52,880
code

00:19:50,400 --> 00:19:54,000
so i can also compile this cpu code do

00:19:52,880 --> 00:19:56,799
all the testings

00:19:54,000 --> 00:19:58,640
ensure that semantically everything is

00:19:56,799 --> 00:20:02,240
doing what it's supposed to do

00:19:58,640 --> 00:20:05,440
the data structures are correct

00:20:02,240 --> 00:20:07,280
and then i can start testing on the fpga

00:20:05,440 --> 00:20:11,039
while i'm sure that at least the c

00:20:07,280 --> 00:20:12,960
code is correct

00:20:11,039 --> 00:20:16,720
and talking about the results do we have

00:20:12,960 --> 00:20:16,720
any results yes we have results

00:20:16,799 --> 00:20:20,000
we measured quite a few crystals already

00:20:19,280 --> 00:20:22,880
with the open

00:20:20,000 --> 00:20:24,640
copy readout most interesting one is one

00:20:22,880 --> 00:20:26,960
of our users

00:20:24,640 --> 00:20:28,960
provided as crystals of a nucleocapsid

00:20:26,960 --> 00:20:30,480
phosphoprotein

00:20:28,960 --> 00:20:33,919
these were of course first measured with

00:20:30,480 --> 00:20:35,200
a conventional setup we don't want to

00:20:33,919 --> 00:20:37,039
waste

00:20:35,200 --> 00:20:38,640
user samples for an experimental

00:20:37,039 --> 00:20:41,440
detector only

00:20:38,640 --> 00:20:42,080
so we first tested with a conventional

00:20:41,440 --> 00:20:43,760
setup

00:20:42,080 --> 00:20:45,360
and the measurement took roughly one

00:20:43,760 --> 00:20:48,400
minute it

00:20:45,360 --> 00:20:50,159
actually maybe even a bit more and then

00:20:48,400 --> 00:20:51,440
we have tested the same crystal with a

00:20:50,159 --> 00:20:54,320
jungle detector

00:20:51,440 --> 00:20:55,760
and open copy system and we were able to

00:20:54,320 --> 00:20:58,400
collect 2000 images

00:20:55,760 --> 00:20:58,880
in a single second and this allowed to

00:20:58,400 --> 00:21:02,400
solve

00:20:58,880 --> 00:21:06,159
the crystal with a good enough quality

00:21:02,400 --> 00:21:09,440
so it really shows that with the

00:21:06,159 --> 00:21:13,039
with the open copy readout uh

00:21:09,440 --> 00:21:15,919
we can for the new upgraded

00:21:13,039 --> 00:21:16,720
swiss light source 2.0 we can actually

00:21:15,919 --> 00:21:19,840
reach

00:21:16,720 --> 00:21:21,760
the performance so we have some

00:21:19,840 --> 00:21:22,640
challenges in front of us we actually

00:21:21,760 --> 00:21:25,440
have

00:21:22,640 --> 00:21:27,200
this detector with tilted panels you see

00:21:25,440 --> 00:21:29,360
it has 10 megapixels

00:21:27,200 --> 00:21:30,880
so it will be 46 gigabytes per second

00:21:29,360 --> 00:21:33,520
that we need to deal with

00:21:30,880 --> 00:21:36,240
we're already working with ibm copy team

00:21:33,520 --> 00:21:38,240
to extend design for higher throughput

00:21:36,240 --> 00:21:40,000
uh we are also looking to do some

00:21:38,240 --> 00:21:42,799
feature extraction

00:21:40,000 --> 00:21:43,600
on the fly to find the positions of the

00:21:42,799 --> 00:21:47,760
spots

00:21:43,600 --> 00:21:52,320
we are looking to use either gpus or

00:21:47,760 --> 00:21:55,440
to use some free space in the fpga

00:21:52,320 --> 00:21:58,559
to analyze this data

00:21:55,440 --> 00:22:00,640
and we are also looking for

00:21:58,559 --> 00:22:02,320
machine learning and we especially

00:22:00,640 --> 00:22:04,320
high-speed inference

00:22:02,320 --> 00:22:05,760
and for this we look forward for the for

00:22:04,320 --> 00:22:08,080
the power 10

00:22:05,760 --> 00:22:08,080
um

00:22:09,120 --> 00:22:12,799
online inference capabilities and there

00:22:12,320 --> 00:22:14,799
are

00:22:12,799 --> 00:22:16,240
a lot of people involved i would like to

00:22:14,799 --> 00:22:18,159
thank first of all my colleagues at the

00:22:16,240 --> 00:22:20,240
pulsar institute

00:22:18,159 --> 00:22:23,039
from crystallography group but also from

00:22:20,240 --> 00:22:25,280
detective group and science i.t

00:22:23,039 --> 00:22:27,120
colleagues from factories the company

00:22:25,280 --> 00:22:29,679
that commercialized the detectors

00:22:27,120 --> 00:22:31,760
and from other light sources and

00:22:29,679 --> 00:22:34,159
particular accelerators

00:22:31,760 --> 00:22:36,240
i would like to thank the bruno and

00:22:34,159 --> 00:22:39,360
alexander and the whole cappy team

00:22:36,240 --> 00:22:42,880
because they help us really a lot

00:22:39,360 --> 00:22:46,559
we also got a lot of support from lionel

00:22:42,880 --> 00:22:50,159
and his company innobus from

00:22:46,559 --> 00:22:53,039
ibm switzerland as well as the ic922

00:22:50,159 --> 00:22:56,159
early support program team

00:22:53,039 --> 00:22:56,640
and i look forward to see questions from

00:22:56,159 --> 00:23:09,840
you

00:22:56,640 --> 00:23:09,840
thank you

00:24:48,000 --> 00:24:55,279
so i have a question about how many t4

00:24:51,440 --> 00:24:58,240
gpus would do the job if gpus are chosen

00:24:55,279 --> 00:24:58,240
to sort the images

00:24:59,360 --> 00:25:05,760
i currently

00:25:02,640 --> 00:25:09,039
just to do feature extraction

00:25:05,760 --> 00:25:10,320
i use two gpus at the moment and i'm not

00:25:09,039 --> 00:25:14,480
able to reach

00:25:10,320 --> 00:25:17,760
a two kilohertz uh um

00:25:14,480 --> 00:25:22,240
performance so

00:25:17,760 --> 00:25:22,240
i believe optimal would be to have four

00:25:22,960 --> 00:25:29,360
i believe that the bottleneck

00:25:26,799 --> 00:25:31,070
is transferred between host memory and a

00:25:29,360 --> 00:25:33,440
gpu

00:25:31,070 --> 00:25:37,679
[Music]

00:25:33,440 --> 00:25:37,679
and ultimately i think actually

00:25:37,919 --> 00:25:42,880
that the algorithm could work with fpgas

00:25:40,400 --> 00:25:46,000
as well

00:25:42,880 --> 00:25:47,360
so as soon as i have time to do with

00:25:46,000 --> 00:25:52,080
this i probably

00:25:47,360 --> 00:25:52,080
would prefer to to do it on fpga

00:25:54,840 --> 00:25:57,840
um

00:25:58,320 --> 00:26:02,559
so um i also got a question um a very

00:26:01,200 --> 00:26:07,120
good question about the moving

00:26:02,559 --> 00:26:10,480
lc4 compression onto the fpga as well

00:26:07,120 --> 00:26:11,840
um i had looked into this because xilinx

00:26:10,480 --> 00:26:15,840
is actually offering

00:26:11,840 --> 00:26:18,559
an um code to do

00:26:15,840 --> 00:26:19,600
compression lc4 but it's actually

00:26:18,559 --> 00:26:24,240
requires quite

00:26:19,600 --> 00:26:27,360
quite a lot of resources on the fpga

00:26:24,240 --> 00:26:28,480
so it would not likely not fit for the

00:26:27,360 --> 00:26:32,880
bandwidth

00:26:28,480 --> 00:26:34,720
we need so currently

00:26:32,880 --> 00:26:36,720
compression is is the thing that we we

00:26:34,720 --> 00:26:40,159
keep for for cpu

00:26:36,720 --> 00:26:42,799
so cpu can at least do something in this

00:26:40,159 --> 00:26:42,799
configuration

00:26:44,240 --> 00:26:47,569
[Music]

00:26:50,320 --> 00:26:56,080
so the next question is about um

00:26:53,760 --> 00:26:58,880
how much performance if any is lost

00:26:56,080 --> 00:27:03,360
using oc axle and hls versus

00:26:58,880 --> 00:27:06,000
pure rtl uh to be honest i have no idea

00:27:03,360 --> 00:27:06,880
because i am a software developer i

00:27:06,000 --> 00:27:10,000
would certainly

00:27:06,880 --> 00:27:13,840
not be able to implement

00:27:10,000 --> 00:27:16,960
all of this in rtl

00:27:13,840 --> 00:27:19,679
maybe alexandra bruno are able to

00:27:16,960 --> 00:27:20,320
answer this question but i would like

00:27:19,679 --> 00:27:24,399
just

00:27:20,320 --> 00:27:28,880
to underline that of course

00:27:24,399 --> 00:27:32,720
with rtl you could be better

00:27:28,880 --> 00:27:34,559
but the time to get to solution

00:27:32,720 --> 00:27:37,200
when we were talking with fpga

00:27:34,559 --> 00:27:40,799
developers working at the psi

00:27:37,200 --> 00:27:44,320
um it's just amazing

00:27:40,799 --> 00:27:48,080
to be able to in in few months

00:27:44,320 --> 00:27:53,039
to to get a working solution with

00:27:48,080 --> 00:27:53,039
with a single developer

00:28:01,279 --> 00:28:04,799
uh okay so i also have a question with

00:28:03,600 --> 00:28:09,840
fpga could you

00:28:04,799 --> 00:28:12,960
hope to do the exact the same job as gpu

00:28:09,840 --> 00:28:15,520
yes i believe so so that the algorithm i

00:28:12,960 --> 00:28:16,799
have implemented on the gpu to do spot

00:28:15,520 --> 00:28:20,480
finding

00:28:16,799 --> 00:28:24,880
is actually uh friendly

00:28:20,480 --> 00:28:27,919
to be transferred to either cpu or

00:28:24,880 --> 00:28:32,080
fpga because i'm not using any

00:28:27,919 --> 00:28:35,279
very specific cuda structures or

00:28:32,080 --> 00:28:35,279
kuda calls that

00:28:36,159 --> 00:28:40,320
regarding in communication between the

00:28:39,520 --> 00:28:44,880
threads

00:28:40,320 --> 00:28:47,200
so i believe this code uh

00:28:44,880 --> 00:28:47,200
could

00:28:48,080 --> 00:28:51,679
could be done with fpgas as well

00:28:53,200 --> 00:28:58,559
so i have a question how many open cap

00:28:55,440 --> 00:29:03,440
fpga cards have i evaluated

00:28:58,559 --> 00:29:05,440
i evaluated to 1 which is 9 h3

00:29:03,440 --> 00:29:07,520
i'm very happy with the cards from alpha

00:29:05,440 --> 00:29:10,480
data

00:29:07,520 --> 00:29:11,360
it provides the the performance we need

00:29:10,480 --> 00:29:15,039
it's also

00:29:11,360 --> 00:29:18,880
low power consumption so

00:29:15,039 --> 00:29:20,240
we were happy um with the cart and we

00:29:18,880 --> 00:29:22,080
haven't

00:29:20,240 --> 00:29:23,840
looked into different ones for us the

00:29:22,080 --> 00:29:27,279
big requirement was

00:29:23,840 --> 00:29:29,679
hpm memory because we need to load some

00:29:27,279 --> 00:29:32,559
conversion constants

00:29:29,679 --> 00:29:34,880
and this is on the level of hundreds of

00:29:32,559 --> 00:29:37,200
gigabytes per second

00:29:34,880 --> 00:29:38,480
and this could be only achieved with

00:29:37,200 --> 00:29:41,919
with hpm

00:29:38,480 --> 00:29:45,919
and there's not a lot

00:29:41,919 --> 00:29:55,840
cards that offer open copy

00:29:45,919 --> 00:29:55,840
and hpm memory at the same time

00:30:02,559 --> 00:30:09,840
okay i think i am out of time

00:30:06,080 --> 00:30:13,440
for answering

00:30:09,840 --> 00:30:17,039
the questions um

00:30:13,440 --> 00:30:18,799
i have just

00:30:17,039 --> 00:30:23,039
so what is the percentage of food

00:30:18,799 --> 00:30:24,799
utilization for 983

00:30:23,039 --> 00:30:26,559
i don't remember exact number but there

00:30:24,799 --> 00:30:28,960
is still space left

00:30:26,559 --> 00:30:28,960
for sure

00:30:32,000 --> 00:30:34,799
and i have one

00:30:35,039 --> 00:30:39,520
last question about the cost of the

00:30:37,360 --> 00:30:42,960
solution

00:30:39,520 --> 00:30:44,159
for fpga development uh a significant

00:30:42,960 --> 00:30:48,640
cost

00:30:44,159 --> 00:30:52,399
is development time

00:30:48,640 --> 00:30:55,919
and this is actually much way cheaper

00:30:52,399 --> 00:30:59,760
with um oc axle and high level synthesis

00:30:55,919 --> 00:31:01,600
okay thank you very much um

00:30:59,760 --> 00:31:05,039
and i look forward for the discussions

00:31:01,600 --> 00:31:05,039

YouTube URL: https://www.youtube.com/watch?v=7XqCkUIg1QY


