Title: POWER your CLOUD - Toshaan Bharvani, VanTosh
Publication date: 2020-09-21
Playlist: OpenPOWER Summit NA 2020
Description: 
	POWER your CLOUD - Toshaan Bharvani, VanTosh

Speakers: Toshaan Bharvani

This presentation is about how we transformed our Data Center from a vintage server center to a dynamic DevOps inspired Cloud. In the process we build an open source Linux distribution and provide a wide range of software that can run directly on multiple platforms to our customers that enable them to take advantage of a cloud based approach. The use of open source software enabled us to build and maintain a platform that has multiple CPU architectures, multiple CPU optimizations and get the maximum from the hardware and software. PowerEL, the Linux distribution, that enables us to get an optimized experience for the users while utilizing the maximum of the hardware. In addition to that we recompile optimized version of many open source components to be able to deliver software rapidly and conveniently.
Captions: 
	00:00:00,799 --> 00:00:03,600
welcome to the second session that i'm

00:00:02,800 --> 00:00:06,399
giving today

00:00:03,600 --> 00:00:07,919
um that's about power your cloud so it's

00:00:06,399 --> 00:00:11,040
our journey from the

00:00:07,919 --> 00:00:12,320
data center centric point of view to a

00:00:11,040 --> 00:00:15,679
more cloud

00:00:12,320 --> 00:00:19,039
perspective and a cloud approach to what

00:00:15,679 --> 00:00:19,039
we offer as a platform

00:00:21,119 --> 00:00:27,680
so who am i i'm from belgium

00:00:24,480 --> 00:00:30,000
i have my own company we are a member of

00:00:27,680 --> 00:00:33,520
the openpower foundation

00:00:30,000 --> 00:00:36,480
since 2017 and as some of you may know

00:00:33,520 --> 00:00:37,120
from the introduction i'm also a tsc

00:00:36,480 --> 00:00:40,719
chair

00:00:37,120 --> 00:00:42,879
as of this year i'm involved in a lot of

00:00:40,719 --> 00:00:45,840
enterprise linux

00:00:42,879 --> 00:00:48,559
and in a lot of the open source world um

00:00:45,840 --> 00:00:51,680
i like to keep things secure

00:00:48,559 --> 00:00:54,320
i do virtualization in containers and we

00:00:51,680 --> 00:00:56,160
do config management and devops

00:00:54,320 --> 00:00:59,520
and we work on the hardware software

00:00:56,160 --> 00:01:02,640
side of the world

00:00:59,520 --> 00:01:05,519
so this presentation will be

00:01:02,640 --> 00:01:06,479
about what we did and how we did it to

00:01:05,519 --> 00:01:09,600
do that i will give a

00:01:06,479 --> 00:01:13,680
brief introduction so

00:01:09,600 --> 00:01:17,439
in 2005 we built a data center

00:01:13,680 --> 00:01:20,159
as many companies were doing at the time

00:01:17,439 --> 00:01:20,640
the infrastructure was quite rigid it

00:01:20,159 --> 00:01:23,040
could take

00:01:20,640 --> 00:01:24,880
up to a month just to get the physical

00:01:23,040 --> 00:01:26,720
hardware

00:01:24,880 --> 00:01:28,560
and that doesn't include the negotiating

00:01:26,720 --> 00:01:31,520
for the actual purchase

00:01:28,560 --> 00:01:32,079
um after we got the hardware and we

00:01:31,520 --> 00:01:35,200
actually

00:01:32,079 --> 00:01:36,720
got a tracked and stacked and everything

00:01:35,200 --> 00:01:39,680
was up and running

00:01:36,720 --> 00:01:41,600
from a physical point of view it could

00:01:39,680 --> 00:01:42,720
take another two weeks to get access to

00:01:41,600 --> 00:01:45,759
the network

00:01:42,720 --> 00:01:46,799
uh or to storage um everything was bare

00:01:45,759 --> 00:01:48,479
metal

00:01:46,799 --> 00:01:49,920
uh everything was installed on the

00:01:48,479 --> 00:01:52,159
machine

00:01:49,920 --> 00:01:53,200
we didn't actually have automation so it

00:01:52,159 --> 00:01:56,880
was actual

00:01:53,200 --> 00:01:58,560
manual labor installing it from scratch

00:01:56,880 --> 00:02:02,000
getting everything configured

00:01:58,560 --> 00:02:02,799
getting everything running which at the

00:02:02,000 --> 00:02:07,119
time

00:02:02,799 --> 00:02:09,280
was not maybe that abnormal

00:02:07,119 --> 00:02:11,200
but there were already better ways of

00:02:09,280 --> 00:02:14,319
doing this

00:02:11,200 --> 00:02:17,840
the company i worked for

00:02:14,319 --> 00:02:21,360
didn't have all those investments

00:02:17,840 --> 00:02:24,400
and so we we did what we could

00:02:21,360 --> 00:02:26,480
and we we saw very quickly what type of

00:02:24,400 --> 00:02:28,879
problems we had

00:02:26,480 --> 00:02:30,800
if a network if a machine had to change

00:02:28,879 --> 00:02:32,000
network it could take again and up to a

00:02:30,800 --> 00:02:33,360
week

00:02:32,000 --> 00:02:35,599
if the storage wasn't configured

00:02:33,360 --> 00:02:38,720
properly or things weren't working

00:02:35,599 --> 00:02:41,360
it would um add

00:02:38,720 --> 00:02:41,840
more delays and getting things done was

00:02:41,360 --> 00:02:45,440
was

00:02:41,840 --> 00:02:48,400
very cumbersome um a lot of manual

00:02:45,440 --> 00:02:50,480
labeled a lot of paperwork um a lot of

00:02:48,400 --> 00:02:54,480
people that were involved

00:02:50,480 --> 00:02:58,080
and it took a very long time

00:02:54,480 --> 00:03:00,080
and so in 2010

00:02:58,080 --> 00:03:01,599
uh a few of us thought we could do it

00:03:00,080 --> 00:03:04,720
better

00:03:01,599 --> 00:03:06,800
and we built the company and our idea

00:03:04,720 --> 00:03:10,560
was to get things done faster

00:03:06,800 --> 00:03:13,280
to optimize a lot of these things um

00:03:10,560 --> 00:03:14,640
from the operating point from the

00:03:13,280 --> 00:03:17,920
hardware point of

00:03:14,640 --> 00:03:19,920
view from the operating system and from

00:03:17,920 --> 00:03:24,799
the application

00:03:19,920 --> 00:03:26,959
and to do that we actually

00:03:24,799 --> 00:03:28,879
bought a lot of stuff from the old data

00:03:26,959 --> 00:03:32,000
center and the company they had

00:03:28,879 --> 00:03:34,319
and took a lot of their

00:03:32,000 --> 00:03:35,519
knowledge and tried to optimize and do

00:03:34,319 --> 00:03:38,319
things faster

00:03:35,519 --> 00:03:38,640
get things done better um but we were

00:03:38,319 --> 00:03:41,440
still

00:03:38,640 --> 00:03:42,879
having that it wasn't a real green field

00:03:41,440 --> 00:03:44,799
it was a

00:03:42,879 --> 00:03:46,879
green brown field so it took a lot of

00:03:44,799 --> 00:03:49,200
the existing stuff that

00:03:46,879 --> 00:03:50,159
that the company had that the previous

00:03:49,200 --> 00:03:52,879
company had

00:03:50,159 --> 00:03:53,599
and we rebuilt around that but we didn't

00:03:52,879 --> 00:03:57,120
start from

00:03:53,599 --> 00:04:00,000
scratch fully which made the

00:03:57,120 --> 00:04:01,040
inception of the company and the actual

00:04:00,000 --> 00:04:03,920
getting things

00:04:01,040 --> 00:04:05,280
done quickly uh much easier because

00:04:03,920 --> 00:04:07,840
those were already there

00:04:05,280 --> 00:04:08,560
in place um but on the other hand it

00:04:07,840 --> 00:04:11,200
meant that

00:04:08,560 --> 00:04:13,599
our initial idea of getting things done

00:04:11,200 --> 00:04:16,560
faster and optimizations weren't

00:04:13,599 --> 00:04:18,639
there from the beginning in the field

00:04:16,560 --> 00:04:22,079
yet

00:04:18,639 --> 00:04:25,360
and so it took us a few years to

00:04:22,079 --> 00:04:26,639
to realize that doing only operations

00:04:25,360 --> 00:04:29,440
wouldn't be enough

00:04:26,639 --> 00:04:30,639
and we actually had to start development

00:04:29,440 --> 00:04:33,680
and

00:04:30,639 --> 00:04:37,680
we had to migrate

00:04:33,680 --> 00:04:38,639
our old systems from a data centric

00:04:37,680 --> 00:04:42,320
point of view

00:04:38,639 --> 00:04:45,280
to a cloud point of view and initially

00:04:42,320 --> 00:04:47,440
we migrated to something cloud-ish i

00:04:45,280 --> 00:04:49,520
wouldn't call it cloud at that point

00:04:47,440 --> 00:04:50,479
uh we started embracing configuration

00:04:49,520 --> 00:04:53,680
management

00:04:50,479 --> 00:04:55,360
and automation we started working on our

00:04:53,680 --> 00:04:58,639
own linux distribution to

00:04:55,360 --> 00:05:00,160
enable us to have more control on what

00:04:58,639 --> 00:05:03,440
would actually be going on

00:05:00,160 --> 00:05:06,639
in that space and have

00:05:03,440 --> 00:05:09,039
us uh optimize and run things

00:05:06,639 --> 00:05:11,280
as properly as we wanted and in the way

00:05:09,039 --> 00:05:14,960
we wanted it

00:05:11,280 --> 00:05:17,680
and so we started this journey

00:05:14,960 --> 00:05:18,080
and we started the migration from the

00:05:17,680 --> 00:05:21,600
old

00:05:18,080 --> 00:05:25,199
to the new and then

00:05:21,600 --> 00:05:26,800
we embraced devops

00:05:25,199 --> 00:05:28,400
and initially we didn't actually

00:05:26,800 --> 00:05:32,080
understand what it was

00:05:28,400 --> 00:05:32,639
um most of my friends were very active

00:05:32,080 --> 00:05:36,000
in the

00:05:32,639 --> 00:05:39,440
devops community and so i i

00:05:36,000 --> 00:05:42,639
listened to them and initially

00:05:39,440 --> 00:05:45,520
i learned a lot from them and in

00:05:42,639 --> 00:05:46,960
took a lot of those ideas and tried to

00:05:45,520 --> 00:05:50,639
apply them to our

00:05:46,960 --> 00:05:53,840
model and what we had done

00:05:50,639 --> 00:05:56,000
but like most uh organizations

00:05:53,840 --> 00:05:57,840
if you don't have a green field and

00:05:56,000 --> 00:06:00,000
you're starting with something

00:05:57,840 --> 00:06:00,960
it means that you need to transform what

00:06:00,000 --> 00:06:04,160
you have

00:06:00,960 --> 00:06:07,199
uh to what you want to get and that

00:06:04,160 --> 00:06:09,960
takes a long time um

00:06:07,199 --> 00:06:11,680
we started to understand the word

00:06:09,960 --> 00:06:14,960
rebuildability

00:06:11,680 --> 00:06:17,759
and with that i mean that um

00:06:14,960 --> 00:06:18,560
if you look at the old data center your

00:06:17,759 --> 00:06:21,759
machines

00:06:18,560 --> 00:06:23,039
were pets you actually installed them

00:06:21,759 --> 00:06:26,639
you nurtured them

00:06:23,039 --> 00:06:28,400
and you took care of them in such a way

00:06:26,639 --> 00:06:31,440
because the configuration

00:06:28,400 --> 00:06:33,680
the up i mean the the the actual

00:06:31,440 --> 00:06:36,160
building up of all that stack

00:06:33,680 --> 00:06:38,080
was a whole endeavor and you did not

00:06:36,160 --> 00:06:39,680
want to do that again

00:06:38,080 --> 00:06:42,479
because you did not have the tooling

00:06:39,680 --> 00:06:45,759
around that and even if you used maybe

00:06:42,479 --> 00:06:46,240
um kickstart or pc to install the actual

00:06:45,759 --> 00:06:49,280
machine

00:06:46,240 --> 00:06:51,199
the configuration was much more complex

00:06:49,280 --> 00:06:52,639
and configuration management made that

00:06:51,199 --> 00:06:55,599
easier um

00:06:52,639 --> 00:06:56,000
and we were able to actually get things

00:06:55,599 --> 00:06:59,199
around

00:06:56,000 --> 00:07:02,479
faster but rebuildability was about

00:06:59,199 --> 00:07:04,400
was more than that it meant being able

00:07:02,479 --> 00:07:07,199
to build up the whole stack

00:07:04,400 --> 00:07:07,759
all over again and to do that you need

00:07:07,199 --> 00:07:10,400
to

00:07:07,759 --> 00:07:12,160
be able to build from metal up to the

00:07:10,400 --> 00:07:14,800
application layer

00:07:12,160 --> 00:07:15,680
and again this this needs to happen in

00:07:14,800 --> 00:07:19,440
stages

00:07:15,680 --> 00:07:22,479
so you start with the physical machine

00:07:19,440 --> 00:07:24,639
obviously there is no automation there

00:07:22,479 --> 00:07:27,120
you still need to buy the machine get it

00:07:24,639 --> 00:07:30,240
wrecked but once it is in the rack

00:07:27,120 --> 00:07:30,880
it should be fully automated from the

00:07:30,240 --> 00:07:33,039
actual

00:07:30,880 --> 00:07:33,919
installation of the os to the virtual

00:07:33,039 --> 00:07:37,280
machines

00:07:33,919 --> 00:07:38,960
to the applications and so on and so

00:07:37,280 --> 00:07:40,880
we tried to make our automation

00:07:38,960 --> 00:07:44,240
automatic in such a way

00:07:40,880 --> 00:07:44,879
that today if we put a machine into a

00:07:44,240 --> 00:07:47,919
rack

00:07:44,879 --> 00:07:50,639
it basically re configures itself

00:07:47,919 --> 00:07:51,840
gets up on all the networks and gets all

00:07:50,639 --> 00:07:55,039
its configuration

00:07:51,840 --> 00:07:56,879
from a central management point and this

00:07:55,039 --> 00:07:58,960
means that we are also sure

00:07:56,879 --> 00:08:01,120
that if we ever replace machines with

00:07:58,960 --> 00:08:04,160
newer machines

00:08:01,120 --> 00:08:06,560
we can have that automation working it

00:08:04,160 --> 00:08:07,199
also means that in the older systems

00:08:06,560 --> 00:08:09,759
where

00:08:07,199 --> 00:08:11,039
typically clusters had to be exactly the

00:08:09,759 --> 00:08:13,360
same machines

00:08:11,039 --> 00:08:14,960
now we don't need that anymore machines

00:08:13,360 --> 00:08:16,800
can be a little bit different because

00:08:14,960 --> 00:08:19,199
automation will figure that out

00:08:16,800 --> 00:08:20,879
and we have other abstraction layers

00:08:19,199 --> 00:08:24,479
that can make it possible

00:08:20,879 --> 00:08:26,720
to reuse our existing infrastructure

00:08:24,479 --> 00:08:29,440
without having to fully change the

00:08:26,720 --> 00:08:29,440
infrastructure

00:08:31,840 --> 00:08:36,159
and now that we have all of this did we

00:08:34,640 --> 00:08:40,320
actually reach

00:08:36,159 --> 00:08:43,360
a real end point no because

00:08:40,320 --> 00:08:43,760
to to do devops or to even think about

00:08:43,360 --> 00:08:46,959
it

00:08:43,760 --> 00:08:49,680
means that you have to embrace a new

00:08:46,959 --> 00:08:50,480
philosophy a new culture and there is

00:08:49,680 --> 00:08:54,000
basically no

00:08:50,480 --> 00:08:56,399
end to that um it means that you need to

00:08:54,000 --> 00:08:57,839
continuously optimize continuously

00:08:56,399 --> 00:09:01,519
improve yourself

00:08:57,839 --> 00:09:05,519
continuously keep innovating

00:09:01,519 --> 00:09:07,120
and enabling multiple players in there

00:09:05,519 --> 00:09:09,279
so in the previous stage we had

00:09:07,120 --> 00:09:11,440
optimized everything for ourselves

00:09:09,279 --> 00:09:13,680
from an operation from a developer point

00:09:11,440 --> 00:09:14,320
of view but the next stage we wanted to

00:09:13,680 --> 00:09:16,959
be

00:09:14,320 --> 00:09:18,080
more business oriented we wanted to ha

00:09:16,959 --> 00:09:21,600
give the customer

00:09:18,080 --> 00:09:24,640
an experience that was

00:09:21,600 --> 00:09:26,000
optimized for them and we wanted them to

00:09:24,640 --> 00:09:29,120
be able to feel

00:09:26,000 --> 00:09:32,640
that that they also had some empowerment

00:09:29,120 --> 00:09:34,720
in there and as such um

00:09:32,640 --> 00:09:36,240
the next step would be actually to get

00:09:34,720 --> 00:09:39,760
all players involved

00:09:36,240 --> 00:09:40,640
even customers or users depending on

00:09:39,760 --> 00:09:42,959
your business

00:09:40,640 --> 00:09:44,320
whoever is is valuable so the business

00:09:42,959 --> 00:09:48,399
needs to be integrated

00:09:44,320 --> 00:09:48,399
into this workflow

00:09:49,200 --> 00:09:55,440
so how did we do this transformation

00:09:52,240 --> 00:09:56,560
in 2005 we had about 35 physical

00:09:55,440 --> 00:09:58,959
machines

00:09:56,560 --> 00:10:00,320
for compute nodes 15 physical machines

00:09:58,959 --> 00:10:02,079
for storage nodes

00:10:00,320 --> 00:10:04,000
and five different networks most of it

00:10:02,079 --> 00:10:07,600
was based on vmware

00:10:04,000 --> 00:10:10,720
and we we set this all up

00:10:07,600 --> 00:10:13,920
it was a mix of a lot of

00:10:10,720 --> 00:10:17,440
different machines doing specific tasks

00:10:13,920 --> 00:10:18,320
and specific things given that these

00:10:17,440 --> 00:10:21,680
machines

00:10:18,320 --> 00:10:25,040
were not able um to

00:10:21,680 --> 00:10:27,680
uh fully utilize their

00:10:25,040 --> 00:10:29,120
capacities it meant that of these 35

00:10:27,680 --> 00:10:32,320
physical machines

00:10:29,120 --> 00:10:35,839
not all of them were actually running at

00:10:32,320 --> 00:10:36,480
full capacity at the time we typically

00:10:35,839 --> 00:10:39,279
had

00:10:36,480 --> 00:10:40,560
about 10 percent cpu utilization in the

00:10:39,279 --> 00:10:43,440
compute nodes

00:10:40,560 --> 00:10:45,200
and on the physical storage machines we

00:10:43,440 --> 00:10:47,920
hardly had 20 percent

00:10:45,200 --> 00:10:48,560
storage utilization so it was far far

00:10:47,920 --> 00:10:50,480
less

00:10:48,560 --> 00:10:52,160
but because of the way that we decided

00:10:50,480 --> 00:10:54,959
to install everything

00:10:52,160 --> 00:10:55,839
bare metal or based on vmware with

00:10:54,959 --> 00:10:58,880
licenses

00:10:55,839 --> 00:11:02,399
which were rather restrictive

00:10:58,880 --> 00:11:04,640
it was very difficult to do much around

00:11:02,399 --> 00:11:04,640
that

00:11:04,880 --> 00:11:11,839
then um the first idea of cloud came up

00:11:09,279 --> 00:11:13,279
and this is actually when we started the

00:11:11,839 --> 00:11:15,920
a different company

00:11:13,279 --> 00:11:17,519
we brought over some of those machines

00:11:15,920 --> 00:11:21,600
we

00:11:17,519 --> 00:11:24,640
combined compute and storage nodes

00:11:21,600 --> 00:11:27,440
and we started looking at kvm

00:11:24,640 --> 00:11:28,000
from linux and at this point it was

00:11:27,440 --> 00:11:30,240
still very

00:11:28,000 --> 00:11:31,680
early days most of production workload

00:11:30,240 --> 00:11:34,079
was still running vmware

00:11:31,680 --> 00:11:35,760
but we started playing with kvm and

00:11:34,079 --> 00:11:39,279
exploring uh how we could

00:11:35,760 --> 00:11:42,959
actually get this up and running um

00:11:39,279 --> 00:11:45,440
and we even looked at xen at the time

00:11:42,959 --> 00:11:46,959
um it's not mentioned here because we

00:11:45,440 --> 00:11:47,680
never actually had any production

00:11:46,959 --> 00:11:50,240
running on

00:11:47,680 --> 00:11:51,600
sen uh but we did look at it and and it

00:11:50,240 --> 00:11:54,639
was a

00:11:51,600 --> 00:11:56,000
a very interesting time to try out

00:11:54,639 --> 00:11:59,600
things and to start

00:11:56,000 --> 00:12:01,680
new development and then it took us

00:11:59,600 --> 00:12:04,880
about two years to figure out

00:12:01,680 --> 00:12:08,480
that um we could actually migrate

00:12:04,880 --> 00:12:11,200
everything to kvm

00:12:08,480 --> 00:12:12,720
and we wouldn't have uh vmware and its

00:12:11,200 --> 00:12:16,399
licensing anymore

00:12:12,720 --> 00:12:19,200
as a requirement um so we we basically

00:12:16,399 --> 00:12:21,839
migrated within those two years

00:12:19,200 --> 00:12:24,959
everything from vmware to kvm

00:12:21,839 --> 00:12:26,399
and beside that uh we didn't do much

00:12:24,959 --> 00:12:27,760
because we were looking at what the

00:12:26,399 --> 00:12:30,560
customers wanted and what

00:12:27,760 --> 00:12:32,560
their enablement was and so the next

00:12:30,560 --> 00:12:35,440
step is actually when we

00:12:32,560 --> 00:12:36,399
started looking at clustering systems at

00:12:35,440 --> 00:12:38,720
how we can make

00:12:36,399 --> 00:12:41,440
systems highly available and how we can

00:12:38,720 --> 00:12:43,120
have a different

00:12:41,440 --> 00:12:44,800
well how we can have different

00:12:43,120 --> 00:12:47,680
architectures to

00:12:44,800 --> 00:12:48,639
provide the same experience so here we

00:12:47,680 --> 00:12:52,079
introduced

00:12:48,639 --> 00:12:53,760
multiple brands we introduced our first

00:12:52,079 --> 00:12:57,360
different architecture

00:12:53,760 --> 00:12:59,600
um and we started to manage all of that

00:12:57,360 --> 00:13:00,959
or we tried to manage all of that from

00:12:59,600 --> 00:13:03,440
one central point

00:13:00,959 --> 00:13:04,639
um initially that wasn't the case so we

00:13:03,440 --> 00:13:08,000
we had multiple

00:13:04,639 --> 00:13:09,920
control nodes um and and initially there

00:13:08,000 --> 00:13:13,200
were a lot of things that we

00:13:09,920 --> 00:13:16,320
we had to work around um

00:13:13,200 --> 00:13:17,839
but a lot of the things already

00:13:16,320 --> 00:13:19,040
made more sense because we had different

00:13:17,839 --> 00:13:20,800
machines we had a little bit older

00:13:19,040 --> 00:13:24,000
machines we had newer machines

00:13:20,800 --> 00:13:25,600
we had uh different brands of machines

00:13:24,000 --> 00:13:28,399
so we could actually test whether this

00:13:25,600 --> 00:13:31,360
works over different types of machines

00:13:28,399 --> 00:13:32,240
we started looking at the things that

00:13:31,360 --> 00:13:34,880
today

00:13:32,240 --> 00:13:35,920
are referred to hyper converge where we

00:13:34,880 --> 00:13:38,240
were trying to

00:13:35,920 --> 00:13:40,320
get compute storage and network into one

00:13:38,240 --> 00:13:43,600
node and get them to

00:13:40,320 --> 00:13:45,600
uh utilize more of their cpu more of

00:13:43,600 --> 00:13:48,240
their storage more of their memory

00:13:45,600 --> 00:13:50,160
so that utilization would go up and the

00:13:48,240 --> 00:13:53,360
number of physical machines we needed to

00:13:50,160 --> 00:13:55,600
actually have went down this is also the

00:13:53,360 --> 00:13:57,440
time when we

00:13:55,600 --> 00:13:59,920
started migrating everything to a

00:13:57,440 --> 00:14:01,600
virtual environment

00:13:59,920 --> 00:14:04,720
initially a lot of the databases were

00:14:01,600 --> 00:14:06,160
not moved to virtual environments

00:14:04,720 --> 00:14:08,959
those were actually the last ones to

00:14:06,160 --> 00:14:12,000
migrate but

00:14:08,959 --> 00:14:15,600
the migration to virtual

00:14:12,000 --> 00:14:18,320
machines made it easier to actually have

00:14:15,600 --> 00:14:19,920
different types of physical machines

00:14:18,320 --> 00:14:23,360
different types of

00:14:19,920 --> 00:14:27,199
architectures and different types of

00:14:23,360 --> 00:14:27,199
placements of those machines

00:14:28,480 --> 00:14:33,839
then two years later we were able to

00:14:31,279 --> 00:14:37,519
consolidate more of these machines

00:14:33,839 --> 00:14:41,839
um we standardized on

00:14:37,519 --> 00:14:45,279
one brand for the x86 machines

00:14:41,839 --> 00:14:46,480
on the power and we had more power

00:14:45,279 --> 00:14:49,440
machines now

00:14:46,480 --> 00:14:50,480
and we introduced the raspberry pi as

00:14:49,440 --> 00:14:53,680
control nodes

00:14:50,480 --> 00:14:55,040
and as compute nodes also um so that we

00:14:53,680 --> 00:14:58,160
would actually have

00:14:55,040 --> 00:14:59,360
three different architectures um of

00:14:58,160 --> 00:15:01,680
course

00:14:59,360 --> 00:15:02,880
you you know that raspberry pi is not a

00:15:01,680 --> 00:15:06,000
very performant

00:15:02,880 --> 00:15:08,079
uh machine compared to the other ones

00:15:06,000 --> 00:15:10,880
but it allowed us to run specialized

00:15:08,079 --> 00:15:12,320
workloads or limited workloads on these

00:15:10,880 --> 00:15:16,000
little machines

00:15:12,320 --> 00:15:19,199
and have ourselves

00:15:16,000 --> 00:15:23,040
aware of how the different architectures

00:15:19,199 --> 00:15:23,600
can be used how our software stack and

00:15:23,040 --> 00:15:25,920
our

00:15:23,600 --> 00:15:27,600
automation tools would have to interact

00:15:25,920 --> 00:15:31,120
with different architectures

00:15:27,600 --> 00:15:31,120
and different ways of working

00:15:33,839 --> 00:15:40,160
and so more recently we

00:15:37,680 --> 00:15:40,800
upgraded those raspberry pi's with newer

00:15:40,160 --> 00:15:45,199
versions

00:15:40,800 --> 00:15:48,240
which are 60 64-bit enabled and we

00:15:45,199 --> 00:15:52,160
added some ai

00:15:48,240 --> 00:15:55,600
arm versions of nvidia um to allow some

00:15:52,160 --> 00:15:59,600
uh of offloading on that end

00:15:55,600 --> 00:16:02,959
this again means that we can use the

00:15:59,600 --> 00:16:06,000
specific system for its specific purpose

00:16:02,959 --> 00:16:06,639
if a specific application runs best on

00:16:06,000 --> 00:16:08,959
arm

00:16:06,639 --> 00:16:10,880
we run it on arm if a specific

00:16:08,959 --> 00:16:13,440
application runs best on power

00:16:10,880 --> 00:16:14,480
we run them on power if specific

00:16:13,440 --> 00:16:18,000
applications run

00:16:14,480 --> 00:16:18,399
on x we run them on x and we want to

00:16:18,000 --> 00:16:21,199
have

00:16:18,399 --> 00:16:23,600
one management system to be able to

00:16:21,199 --> 00:16:25,680
deploy to all of these machines

00:16:23,600 --> 00:16:27,199
we want to be able to run all of these

00:16:25,680 --> 00:16:30,480
machines in such a way

00:16:27,199 --> 00:16:33,120
that they are one cloud platform but

00:16:30,480 --> 00:16:35,440
they also give one user experience so if

00:16:33,120 --> 00:16:39,759
a user says i need to have

00:16:35,440 --> 00:16:39,759
a specific application for example

00:16:41,600 --> 00:16:46,480
surveillance system that would require

00:16:45,360 --> 00:16:50,880
you to have

00:16:46,480 --> 00:16:54,399
storage in our case uh because of the

00:16:50,880 --> 00:16:54,880
the way we we have our data our cloud

00:16:54,399 --> 00:16:58,480
setup

00:16:54,880 --> 00:17:00,560
um storage nodes are typically on x86

00:16:58,480 --> 00:17:02,720
uh while the power nodes typically run

00:17:00,560 --> 00:17:04,880
more the intensive workloads

00:17:02,720 --> 00:17:07,919
um and we use the jetsons for some of

00:17:04,880 --> 00:17:07,919
the ai stuff

00:17:08,160 --> 00:17:15,439
because it's it's cheap it does its work

00:17:11,919 --> 00:17:19,280
and it basically can give us

00:17:15,439 --> 00:17:21,199
quick access to certain things

00:17:19,280 --> 00:17:23,199
over time we will most probably change

00:17:21,199 --> 00:17:25,439
that also to power systems

00:17:23,199 --> 00:17:26,559
but we will keep the mix so that we can

00:17:25,439 --> 00:17:28,720
actually see

00:17:26,559 --> 00:17:29,600
where specific workloads also work

00:17:28,720 --> 00:17:31,440
better

00:17:29,600 --> 00:17:33,280
and then we can advise customers that

00:17:31,440 --> 00:17:36,000
this workload works best

00:17:33,280 --> 00:17:38,000
on this platform having the different

00:17:36,000 --> 00:17:39,919
platforms gives us that ability

00:17:38,000 --> 00:17:41,760
and gives us also the option to test

00:17:39,919 --> 00:17:46,880
this without within our

00:17:41,760 --> 00:17:49,120
own stack of systems

00:17:46,880 --> 00:17:50,000
so from a software perspective it

00:17:49,120 --> 00:17:53,360
becomes

00:17:50,000 --> 00:17:56,480
a very big issue

00:17:53,360 --> 00:17:57,840
so we we have our own linux distribution

00:17:56,480 --> 00:18:01,200
called power el

00:17:57,840 --> 00:18:04,640
which runs on the power

00:18:01,200 --> 00:18:08,080
architecture which also runs on x86

00:18:04,640 --> 00:18:12,160
and on the raspberry pi

00:18:08,080 --> 00:18:16,160
and this means that we can if we can run

00:18:12,160 --> 00:18:19,760
the full operating system stack and

00:18:16,160 --> 00:18:22,240
all other layers of that um to our

00:18:19,760 --> 00:18:24,240
benefit we can optimize for that and we

00:18:22,240 --> 00:18:27,039
can run them as we think

00:18:24,240 --> 00:18:28,640
best um in there we also have a lot of

00:18:27,039 --> 00:18:31,679
workloads running on centos

00:18:28,640 --> 00:18:32,720
because it's it's very common customers

00:18:31,679 --> 00:18:35,960
typically

00:18:32,720 --> 00:18:37,760
like centos um we have specific

00:18:35,960 --> 00:18:40,840
applications which

00:18:37,760 --> 00:18:41,919
um from the application point of view or

00:18:40,840 --> 00:18:45,039
from um

00:18:41,919 --> 00:18:47,039
our customs perspective run on ubuntu or

00:18:45,039 --> 00:18:50,559
debian because they want it

00:18:47,039 --> 00:18:52,000
um also for some of the newer web

00:18:50,559 --> 00:18:53,760
development ubuntu

00:18:52,000 --> 00:18:56,240
is preferred because most of the web

00:18:53,760 --> 00:19:01,440
developers prefer this

00:18:56,240 --> 00:19:01,440
we run 3bsd mostly for our zfs

00:19:01,520 --> 00:19:06,160
interaction so all the storages is

00:19:03,919 --> 00:19:08,720
freebsd with zfs

00:19:06,160 --> 00:19:09,679
that runs or that used to run primarily

00:19:08,720 --> 00:19:12,240
on x

00:19:09,679 --> 00:19:15,200
now we have also running some workloads

00:19:12,240 --> 00:19:18,000
on power for that

00:19:15,200 --> 00:19:20,160
and open bsd we use for all its routing

00:19:18,000 --> 00:19:22,320
so packet filtering

00:19:20,160 --> 00:19:24,559
arc linux is specifically used on some

00:19:22,320 --> 00:19:28,000
of the raspberry pi's

00:19:24,559 --> 00:19:31,200
to enable us to have 64-bit enablement

00:19:28,000 --> 00:19:32,160
and some of the software there was

00:19:31,200 --> 00:19:34,480
developed with

00:19:32,160 --> 00:19:36,640
with some other partners we have who

00:19:34,480 --> 00:19:37,280
have done a lot of work on arch linux so

00:19:36,640 --> 00:19:39,840
we

00:19:37,280 --> 00:19:41,039
use those so you see that there's a

00:19:39,840 --> 00:19:44,480
variety

00:19:41,039 --> 00:19:47,760
of distributions in there which

00:19:44,480 --> 00:19:48,559
give us the possibility to run different

00:19:47,760 --> 00:19:52,960
workloads

00:19:48,559 --> 00:19:56,240
and also gives us the ability to

00:19:52,960 --> 00:19:59,520
run or to accommodate the customers

00:19:56,240 --> 00:20:02,880
in such a way that they

00:19:59,520 --> 00:20:06,080
get what they are looking for um so we

00:20:02,880 --> 00:20:10,640
have some customers also running

00:20:06,080 --> 00:20:13,280
their own linux distribution like suse

00:20:10,640 --> 00:20:13,679
for some of the sap stuff but typically

00:20:13,280 --> 00:20:16,480
we

00:20:13,679 --> 00:20:18,400
we don't push that in our own stack we

00:20:16,480 --> 00:20:21,840
will do that if the customer demands

00:20:18,400 --> 00:20:21,840
uh requests us

00:20:22,159 --> 00:20:27,760
from an automation point of view we

00:20:24,240 --> 00:20:30,880
chose to go with ansible

00:20:27,760 --> 00:20:33,600
it's a very good orchestration tool it

00:20:30,880 --> 00:20:35,280
does also configuration management

00:20:33,600 --> 00:20:36,720
initially when we started we used

00:20:35,280 --> 00:20:40,320
buildbot

00:20:36,720 --> 00:20:41,440
we are we have or we are migrating to

00:20:40,320 --> 00:20:44,400
concourse

00:20:41,440 --> 00:20:46,159
um which is another ci cd platform which

00:20:44,400 --> 00:20:49,120
enables us to

00:20:46,159 --> 00:20:50,240
to actually get a pipeline for our

00:20:49,120 --> 00:20:53,840
deployments

00:20:50,240 --> 00:20:54,799
um in our deployments we use qmu and

00:20:53,840 --> 00:20:58,080
podman

00:20:54,799 --> 00:20:59,360
uh so if you aim me for the virtual

00:20:58,080 --> 00:21:02,559
machines with lipfurt as

00:20:59,360 --> 00:21:07,280
abstraction layer and podman with

00:21:02,559 --> 00:21:10,240
kubernetes for the containers

00:21:07,280 --> 00:21:12,000
we have a vm installer role which is

00:21:10,240 --> 00:21:15,360
basically announceable

00:21:12,000 --> 00:21:16,880
role which installs our virtual machines

00:21:15,360 --> 00:21:18,960
from scratch

00:21:16,880 --> 00:21:20,640
fully customized to the needs of the

00:21:18,960 --> 00:21:22,799
application

00:21:20,640 --> 00:21:25,600
on different parts of the machine or on

00:21:22,799 --> 00:21:29,440
different parts of the

00:21:25,600 --> 00:21:33,280
cloud infrastructure allowing us to have

00:21:29,440 --> 00:21:36,720
the best system for each

00:21:33,280 --> 00:21:39,200
integration we have a container builder

00:21:36,720 --> 00:21:40,559
role which is basically a pipeline which

00:21:39,200 --> 00:21:41,600
builds the container so that we can

00:21:40,559 --> 00:21:45,440
deploy them

00:21:41,600 --> 00:21:47,520
to our stack and we have a whole bunch

00:21:45,440 --> 00:21:48,799
of ansible depart deploy scripts which

00:21:47,520 --> 00:21:51,919
is basically

00:21:48,799 --> 00:21:52,960
um deploying the full application so

00:21:51,919 --> 00:21:54,960
once the vm

00:21:52,960 --> 00:21:56,480
has been installed we can run the deploy

00:21:54,960 --> 00:21:59,760
scripts which will install

00:21:56,480 --> 00:22:03,440
for instance a pre-text ticketing system

00:21:59,760 --> 00:22:06,480
or an uh vtcommerce e-commerce platform

00:22:03,440 --> 00:22:10,000
and get that fully with the right

00:22:06,480 --> 00:22:12,960
load balancer enablement with the right

00:22:10,000 --> 00:22:14,000
let's encrypt certificates um with the

00:22:12,960 --> 00:22:17,039
full backup

00:22:14,000 --> 00:22:19,840
system in there um it will talk to our

00:22:17,039 --> 00:22:22,159
isinger 2 for monitoring and alerting

00:22:19,840 --> 00:22:23,039
so it will put that in on high

00:22:22,159 --> 00:22:26,080
availability

00:22:23,039 --> 00:22:29,120
or into a normal cluster node

00:22:26,080 --> 00:22:32,400
and we'll do the alerting accordingly

00:22:29,120 --> 00:22:33,360
and to power all of this we use request

00:22:32,400 --> 00:22:36,400
tracker

00:22:33,360 --> 00:22:40,080
as our ticketing system so

00:22:36,400 --> 00:22:43,360
we chose not to build a fancy gui

00:22:40,080 --> 00:22:45,120
or a web interface most of it just works

00:22:43,360 --> 00:22:48,799
through a ticketing system

00:22:45,120 --> 00:22:52,480
and the ticketing system basically

00:22:48,799 --> 00:22:55,679
pushes our pipeline

00:22:52,480 --> 00:22:58,720
depending on what we are what the user

00:22:55,679 --> 00:23:02,559
is allowed to do and in such

00:22:58,720 --> 00:23:06,000
we have a fully automated system

00:23:02,559 --> 00:23:09,039
as per the cloud so we are able to give

00:23:06,000 --> 00:23:12,320
our users our customers on

00:23:09,039 --> 00:23:12,720
cloud experience and they are able to

00:23:12,320 --> 00:23:15,760
get

00:23:12,720 --> 00:23:18,400
the best of each platform and

00:23:15,760 --> 00:23:20,400
if the applications are known to us we

00:23:18,400 --> 00:23:20,960
actually have deploy scripts which will

00:23:20,400 --> 00:23:23,039
look

00:23:20,960 --> 00:23:24,000
and which will deploy the application on

00:23:23,039 --> 00:23:27,200
the best platform

00:23:24,000 --> 00:23:27,200
as per our testings

00:23:28,240 --> 00:23:31,600
so from a customer perspective what does

00:23:30,080 --> 00:23:34,080
that actually mean

00:23:31,600 --> 00:23:34,960
a customer can you can request a virtual

00:23:34,080 --> 00:23:38,159
machine

00:23:34,960 --> 00:23:38,960
a container or an application and

00:23:38,159 --> 00:23:42,159
depending on

00:23:38,960 --> 00:23:44,559
which of these three it requests

00:23:42,159 --> 00:23:46,400
a specific request will be created in

00:23:44,559 --> 00:23:48,400
request tracker which picks it up

00:23:46,400 --> 00:23:50,640
it will verify if this user is of course

00:23:48,400 --> 00:23:53,840
allowed to do any of these actions

00:23:50,640 --> 00:23:57,919
our concours cid cd pipeline will

00:23:53,840 --> 00:24:01,200
start implementation using ansible our

00:23:57,919 --> 00:24:03,440
cube and will kick off the deployment

00:24:01,200 --> 00:24:05,360
at that point the machine on the pod

00:24:03,440 --> 00:24:07,919
gets deployed and provisioned

00:24:05,360 --> 00:24:10,720
um and if it's part of the application

00:24:07,919 --> 00:24:13,440
gets added to the load balancer

00:24:10,720 --> 00:24:15,039
through service discovery and becomes

00:24:13,440 --> 00:24:18,640
available to the

00:24:15,039 --> 00:24:22,240
user if it's a virtual machine it gets

00:24:18,640 --> 00:24:23,919
um deployed it will get you a full

00:24:22,240 --> 00:24:25,039
application layer if that is what the

00:24:23,919 --> 00:24:28,000
customer wants

00:24:25,039 --> 00:24:29,120
if it just wants the machine itself it

00:24:28,000 --> 00:24:32,559
will

00:24:29,120 --> 00:24:36,640
give the user um the

00:24:32,559 --> 00:24:40,640
credentials that it can log into um

00:24:36,640 --> 00:24:41,360
afterwards our backend so ansible in

00:24:40,640 --> 00:24:43,520
this case

00:24:41,360 --> 00:24:45,279
we'll add it to the monitoring will also

00:24:43,520 --> 00:24:46,159
add it automatically to our backup

00:24:45,279 --> 00:24:49,039
system

00:24:46,159 --> 00:24:51,120
and the user getting gets an email with

00:24:49,039 --> 00:24:54,080
all the details

00:24:51,120 --> 00:24:54,960
when we first started implementing this

00:24:54,080 --> 00:24:58,400
we had

00:24:54,960 --> 00:25:01,440
about two hours from

00:24:58,400 --> 00:25:04,240
user request to user email

00:25:01,440 --> 00:25:05,120
we actually have brought that down and i

00:25:04,240 --> 00:25:07,919
did a test

00:25:05,120 --> 00:25:08,240
two days ago to about half an hour so

00:25:07,919 --> 00:25:10,720
that

00:25:08,240 --> 00:25:12,799
includes the actual building of the

00:25:10,720 --> 00:25:13,600
machine so we don't clone machines we

00:25:12,799 --> 00:25:17,200
build them

00:25:13,600 --> 00:25:17,200
using the deployment system

00:25:17,440 --> 00:25:21,520
installing an application in this case a

00:25:20,000 --> 00:25:24,000
ticketing system

00:25:21,520 --> 00:25:25,520
and putting all the monitoring backup

00:25:24,000 --> 00:25:28,000
and verification

00:25:25,520 --> 00:25:31,440
user creation in there with the actual

00:25:28,000 --> 00:25:34,720
mail being sent 30 minutes later

00:25:31,440 --> 00:25:36,559
we have that also for

00:25:34,720 --> 00:25:38,400
surveillance systems it takes a little

00:25:36,559 --> 00:25:40,000
bit longer because it requires multiple

00:25:38,400 --> 00:25:41,760
machines and it's a cluster

00:25:40,000 --> 00:25:44,000
because it does a lot of the ai stuff in

00:25:41,760 --> 00:25:45,360
there but we've got that down to about

00:25:44,000 --> 00:25:48,000
45 minutes

00:25:45,360 --> 00:25:48,799
uh which means that the customer or the

00:25:48,000 --> 00:25:53,120
user

00:25:48,799 --> 00:25:57,840
gets a full cloud experience

00:25:53,120 --> 00:25:57,840
in that way

00:25:58,080 --> 00:26:04,400
so you don't need a cloud provider

00:26:02,480 --> 00:26:06,159
you could use openstack you could use

00:26:04,400 --> 00:26:08,240
open nebula

00:26:06,159 --> 00:26:10,159
what your user is most or what your

00:26:08,240 --> 00:26:14,320
business will be most interested in

00:26:10,159 --> 00:26:16,720
is the cloud experience and so

00:26:14,320 --> 00:26:17,360
we want to empower the business and that

00:26:16,720 --> 00:26:20,480
is what

00:26:17,360 --> 00:26:25,840
we try to do and what we have been able

00:26:20,480 --> 00:26:25,840
to do for our customers

00:26:26,080 --> 00:26:31,440

YouTube URL: https://www.youtube.com/watch?v=nfWPkMS9iGE


