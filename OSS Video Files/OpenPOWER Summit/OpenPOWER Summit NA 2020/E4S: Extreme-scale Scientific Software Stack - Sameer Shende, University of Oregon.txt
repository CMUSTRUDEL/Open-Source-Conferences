Title: E4S: Extreme-scale Scientific Software Stack - Sameer Shende, University of Oregon
Publication date: 2020-09-21
Playlist: OpenPOWER Summit NA 2020
Description: 
	E4S: Extreme-scale Scientific Software Stack - Sameer Shende, University of Oregon

Speakers: Sameer Shende

The DOE Exascale Computing Project (ECP) Software Technology focus area is developing an HPC software ecosystem that will enable the efficient and performant execution of exascale applications. The Extreme-scale Scientific Software Stack (E4S) [https://e4s.io], is a coherent software stack that will enable application developers to write parallel applications that can target diverse exascale architectures. E4S provides both source builds through the Spack platform and a set of containers that feature a broad collection of HPC software packages. E4S exists to accelerate the development, deployment, and use of HPC software, lowering the barriers for HPC users. It provides container images, build manifests, and turn-key, from-source builds of popular HPC software packages developed as Software Development Kits (SDKs). It will introduce the E4S containers are being deployed at the HPC systems at DOE national laboratories using Singularity, Shifter, and Charliecloud container runtimes.
Captions: 
	00:00:01,199 --> 00:00:07,839
hi my name is samir shinde

00:00:04,000 --> 00:00:08,480
and i will be describing the extreme

00:00:07,839 --> 00:00:13,280
scale

00:00:08,480 --> 00:00:13,280
scientific software stack or e4s

00:00:14,920 --> 00:00:20,480
today

00:00:16,400 --> 00:00:22,880
there are two challenges that

00:00:20,480 --> 00:00:24,720
i would like to address today the first

00:00:22,880 --> 00:00:26,240
is that with

00:00:24,720 --> 00:00:28,400
our hardware getting more and more

00:00:26,240 --> 00:00:30,240
complex it's getting harder to

00:00:28,400 --> 00:00:31,760
accurately measure and optimize the

00:00:30,240 --> 00:00:35,440
performance of our

00:00:31,760 --> 00:00:37,120
hpc and ai machine learning workloads

00:00:35,440 --> 00:00:39,280
the second problem is that as our

00:00:37,120 --> 00:00:41,360
software gets more complex

00:00:39,280 --> 00:00:43,280
it's getting harder to install the tools

00:00:41,360 --> 00:00:45,200
and libraries correctly

00:00:43,280 --> 00:00:47,280
in an integrated and interoperable

00:00:45,200 --> 00:00:50,320
software stack

00:00:47,280 --> 00:00:51,199
and to address these issues we present

00:00:50,320 --> 00:00:54,399
the

00:00:51,199 --> 00:00:55,360
ecp's extreme scale scientific software

00:00:54,399 --> 00:00:58,399
stack

00:00:55,360 --> 00:01:00,320
now ecp has three technical areas there

00:00:58,399 --> 00:01:02,640
is the application development

00:01:00,320 --> 00:01:03,840
software technology and hardware and

00:01:02,640 --> 00:01:06,400
integration

00:01:03,840 --> 00:01:08,479
and our goal is to deliver expanded and

00:01:06,400 --> 00:01:10,640
vertically integrated software stack

00:01:08,479 --> 00:01:12,720
to achieve the full potential of our

00:01:10,640 --> 00:01:16,080
exa-scale computing

00:01:12,720 --> 00:01:19,200
platforms there are 70 unique

00:01:16,080 --> 00:01:21,600
products that span a number of areas

00:01:19,200 --> 00:01:23,680
from programming models and runtime to

00:01:21,600 --> 00:01:26,720
math libraries to

00:01:23,680 --> 00:01:27,759
tools to data and visualization and

00:01:26,720 --> 00:01:31,119
these form the

00:01:27,759 --> 00:01:33,520
crux of our software stack

00:01:31,119 --> 00:01:34,240
we work on products that applications

00:01:33,520 --> 00:01:37,920
need now

00:01:34,240 --> 00:01:41,360
and in the future and we have

00:01:37,920 --> 00:01:45,040
a range of products in this

00:01:41,360 --> 00:01:48,000
software stack which includes mpi

00:01:45,040 --> 00:01:49,680
openmp openacc there are performance

00:01:48,000 --> 00:01:52,320
portability libraries that

00:01:49,680 --> 00:01:53,520
allow you to write performance portable

00:01:52,320 --> 00:01:55,200
codes

00:01:53,520 --> 00:01:56,560
there are performance evaluation tools

00:01:55,200 --> 00:01:59,119
such as papi

00:01:56,560 --> 00:01:59,920
the tao performance system an hpc

00:01:59,119 --> 00:02:01,759
toolkit

00:01:59,920 --> 00:02:03,040
there are math libraries such as

00:02:01,759 --> 00:02:07,119
trilinos

00:02:03,040 --> 00:02:10,160
blas petse

00:02:07,119 --> 00:02:13,599
sundials sparse solvers there are

00:02:10,160 --> 00:02:16,640
io libraries such as hdfi mpio

00:02:13,599 --> 00:02:20,560
adios and data and visualization tools

00:02:16,640 --> 00:02:23,760
such as para view so we have

00:02:20,560 --> 00:02:26,080
many of these st or

00:02:23,760 --> 00:02:27,120
software technology products that ecp is

00:02:26,080 --> 00:02:29,200
developing

00:02:27,120 --> 00:02:30,800
and they're grouped into these software

00:02:29,200 --> 00:02:34,000
development toolkits

00:02:30,800 --> 00:02:36,920
or sdks that group

00:02:34,000 --> 00:02:38,640
similar products together and ensure

00:02:36,920 --> 00:02:41,920
interoperability

00:02:38,640 --> 00:02:44,959
and compliance to policies of sdks

00:02:41,920 --> 00:02:48,959
and then e4s consists of

00:02:44,959 --> 00:02:52,560
multiple sdks put together

00:02:48,959 --> 00:02:53,440
so e4s aims to deliver a modular

00:02:52,560 --> 00:02:56,400
interoperable

00:02:53,440 --> 00:02:57,040
and deployable software stack and to

00:02:56,400 --> 00:02:58,560
deliver

00:02:57,040 --> 00:02:59,920
expanded and vertically integrated

00:02:58,560 --> 00:03:00,879
software stacks to achieve the full

00:02:59,920 --> 00:03:04,000
potential

00:03:00,879 --> 00:03:08,000
of our platforms our goal is really to

00:03:04,000 --> 00:03:11,040
lower these barriers lower the barriers

00:03:08,000 --> 00:03:14,159
to using software technology products

00:03:11,040 --> 00:03:16,239
and we also have performance evaluation

00:03:14,159 --> 00:03:18,239
tools that will allow you to observe the

00:03:16,239 --> 00:03:20,959
performance of these applications

00:03:18,239 --> 00:03:22,400
and our goal is to also enable uniform

00:03:20,959 --> 00:03:26,159
apis where

00:03:22,400 --> 00:03:30,239
available you can download e4s from our

00:03:26,159 --> 00:03:32,239
website e4s.io it's a community effort

00:03:30,239 --> 00:03:34,799
it's a community effort to provide open

00:03:32,239 --> 00:03:38,239
source software packages

00:03:34,799 --> 00:03:39,040
and allow them to be deployed in an easy

00:03:38,239 --> 00:03:43,120
to use

00:03:39,040 --> 00:03:45,920
manner and we have support for both

00:03:43,120 --> 00:03:46,950
from source builds as well as containers

00:03:45,920 --> 00:03:48,480
of

00:03:46,950 --> 00:03:50,640
[Music]

00:03:48,480 --> 00:03:52,080
a broad collection of hpc software

00:03:50,640 --> 00:03:55,920
packages

00:03:52,080 --> 00:03:57,519
so e4s primarily exists to accelerate

00:03:55,920 --> 00:04:00,640
the development deployment

00:03:57,519 --> 00:04:02,720
and use of hpc software and provide

00:04:00,640 --> 00:04:06,560
these hpc packages

00:04:02,720 --> 00:04:09,680
in a easy to use manner these are the

00:04:06,560 --> 00:04:13,519
areas that i described earlier but

00:04:09,680 --> 00:04:16,560
really ecp software technology sdks

00:04:13,519 --> 00:04:17,199
span a number of different areas

00:04:16,560 --> 00:04:19,199
including

00:04:17,199 --> 00:04:21,120
programming models and runtime where

00:04:19,199 --> 00:04:25,520
they have packages such as

00:04:21,120 --> 00:04:28,320
legion cocos raja mpi

00:04:25,520 --> 00:04:28,639
like impitch and openmpi we have support

00:04:28,320 --> 00:04:32,800
for

00:04:28,639 --> 00:04:36,479
compilers and llvm compilers

00:04:32,800 --> 00:04:39,759
and other projects that use them we have

00:04:36,479 --> 00:04:43,759
tools and technology which includes tau

00:04:39,759 --> 00:04:47,360
hpc toolkit caliper papi

00:04:43,759 --> 00:04:51,440
we have xsdk or the math libraries

00:04:47,360 --> 00:04:55,919
which include packages such as super lu

00:04:51,440 --> 00:04:57,199
trilinos we have support for sundials

00:04:55,919 --> 00:05:00,960
petsy

00:04:57,199 --> 00:05:04,400
and we have analysis visualization

00:05:00,960 --> 00:05:07,360
and reduction operations with paraview

00:05:04,400 --> 00:05:08,800
we have visit data management io

00:05:07,360 --> 00:05:12,080
services

00:05:08,800 --> 00:05:12,800
and also ecosystem at large applications

00:05:12,080 --> 00:05:16,240
so there are

00:05:12,800 --> 00:05:20,000
a number of different areas that that

00:05:16,240 --> 00:05:23,360
these sdks cover and these sdks

00:05:20,000 --> 00:05:24,000
are typically put together in this form

00:05:23,360 --> 00:05:25,440
with math

00:05:24,000 --> 00:05:27,440
libraries data and visualization

00:05:25,440 --> 00:05:31,120
programming models and then we integrate

00:05:27,440 --> 00:05:35,120
build test and deploy them

00:05:31,120 --> 00:05:38,639
so e4s is a curated release

00:05:35,120 --> 00:05:42,000
of software technology products and e4s

00:05:38,639 --> 00:05:43,840
is based on the spac package manager

00:05:42,000 --> 00:05:46,000
you can learn more about spac from this

00:05:43,840 --> 00:05:49,280
pack.io web page

00:05:46,000 --> 00:05:52,560
we have binary build caches

00:05:49,280 --> 00:05:55,280
for bare metal installs so we support

00:05:52,560 --> 00:05:58,319
multiple platforms including the ibm

00:05:55,280 --> 00:06:00,400
ppc 64 le platforms

00:05:58,319 --> 00:06:01,919
and we have container images that are

00:06:00,400 --> 00:06:04,840
available on docker hub

00:06:01,919 --> 00:06:07,520
and available for download from the e4s

00:06:04,840 --> 00:06:08,880
website and these include the pre-built

00:06:07,520 --> 00:06:12,160
binaries of

00:06:08,880 --> 00:06:15,199
st products where we have both

00:06:12,160 --> 00:06:17,440
base images which allow you to create

00:06:15,199 --> 00:06:19,520
your own custom image

00:06:17,440 --> 00:06:21,120
and also full featured containers which

00:06:19,520 --> 00:06:22,560
have a number of these packages

00:06:21,120 --> 00:06:24,880
pre-installed

00:06:22,560 --> 00:06:26,560
and they all come with gpu support so

00:06:24,880 --> 00:06:30,560
that you can use the

00:06:26,560 --> 00:06:34,400
the cuda and nvidia gpus

00:06:30,560 --> 00:06:37,600
through the ppc64le platform

00:06:34,400 --> 00:06:39,280
now we also have recipes for creating

00:06:37,600 --> 00:06:42,000
custom images we have

00:06:39,280 --> 00:06:42,960
support for building e4s images in

00:06:42,000 --> 00:06:45,680
gitlab

00:06:42,960 --> 00:06:46,800
we also have a validation test suite and

00:06:45,680 --> 00:06:49,599
a virtual box

00:06:46,800 --> 00:06:50,800
image with support for multiple runtimes

00:06:49,599 --> 00:06:54,560
and we also have

00:06:50,800 --> 00:06:57,599
an image on aws so it's typically

00:06:54,560 --> 00:06:58,000
released twice a year and you can find

00:06:57,599 --> 00:07:00,560
the

00:06:58,000 --> 00:07:01,759
latest version 1.1 release which

00:07:00,560 --> 00:07:05,520
includes over

00:07:01,759 --> 00:07:09,039
45 full release products

00:07:05,520 --> 00:07:11,360
and it has support for gpus

00:07:09,039 --> 00:07:13,599
so if you go to the docker hub page you

00:07:11,360 --> 00:07:15,360
can just directly pull from there using

00:07:13,599 --> 00:07:19,280
the ecp e4s

00:07:15,360 --> 00:07:22,800
ubuntu 1804 e4s gpu

00:07:19,280 --> 00:07:25,919
and it has support for cuda101243

00:07:22,800 --> 00:07:29,120
as you can see the ppc64le platform

00:07:25,919 --> 00:07:32,319
in this full featured release and if you

00:07:29,120 --> 00:07:35,440
look inside the image here are

00:07:32,319 --> 00:07:37,120
all the packages that are installed from

00:07:35,440 --> 00:07:39,520
the

00:07:37,120 --> 00:07:41,520
software technology portfolio and there

00:07:39,520 --> 00:07:45,520
are many more

00:07:41,520 --> 00:07:48,240
and we have support for nvidia gpus

00:07:45,520 --> 00:07:49,120
and this illustrates that we have

00:07:48,240 --> 00:07:52,160
support for

00:07:49,120 --> 00:07:54,720
ai ml frameworks like this

00:07:52,160 --> 00:07:55,440
in fact let me just jump right in and

00:07:54,720 --> 00:08:00,240
show you a

00:07:55,440 --> 00:08:03,360
demo of this this is a singularity image

00:08:00,240 --> 00:08:07,280
and i can just

00:08:03,360 --> 00:08:11,360
load it using this singularity command

00:08:07,280 --> 00:08:13,919
and i can say python and

00:08:11,360 --> 00:08:15,039
you know it's difficult to install

00:08:13,919 --> 00:08:19,520
packages like

00:08:15,039 --> 00:08:24,000
tensorflow keras by torch

00:08:19,520 --> 00:08:30,479
and these are pre-installed for you and

00:08:24,000 --> 00:08:30,479
if you see the gpu availability

00:08:31,039 --> 00:08:35,279
you can see that on this ppc 64 le

00:08:34,000 --> 00:08:40,159
system

00:08:35,279 --> 00:08:44,719
i have access to v100

00:08:40,159 --> 00:08:44,719
four of these v100 gpus

00:08:44,880 --> 00:08:49,519
and a number of other packages such as

00:08:49,600 --> 00:08:57,440
i could say pi torch or

00:08:53,279 --> 00:08:59,920
cv2 or matplotlib

00:08:57,440 --> 00:09:00,560
the most commonly used packages are all

00:08:59,920 --> 00:09:08,320
there

00:09:00,560 --> 00:09:12,560
in the distribution so you

00:09:08,320 --> 00:09:14,959
you can use it on this ac922

00:09:12,560 --> 00:09:14,959
system

00:09:21,040 --> 00:09:29,760
here is an example of using python so

00:09:24,399 --> 00:09:29,760
if you are an ai or machine learning

00:09:30,000 --> 00:09:34,080
user you don't need to install all these

00:09:33,120 --> 00:09:36,480
packages from

00:09:34,080 --> 00:09:37,360
source you can just download a single

00:09:36,480 --> 00:09:40,959
gpu

00:09:37,360 --> 00:09:43,120
enabled image and deployed on

00:09:40,959 --> 00:09:45,680
your system without any special

00:09:43,120 --> 00:09:48,640
permissions or privileges

00:09:45,680 --> 00:09:49,440
you can download the gpu image directly

00:09:48,640 --> 00:09:52,720
from

00:09:49,440 --> 00:09:55,279
our e4s web page or do a docker pull

00:09:52,720 --> 00:09:56,399
as i mentioned and you can use it with

00:09:55,279 --> 00:10:00,720
docker

00:09:56,399 --> 00:10:04,480
we are also enabling other custom images

00:10:00,720 --> 00:10:08,480
and here is an example of a tensorflow

00:10:04,480 --> 00:10:11,760
2.2 image with cuda

00:10:08,480 --> 00:10:14,320
built in and one that can be downloaded

00:10:11,760 --> 00:10:16,640
like this for ppc 64 le

00:10:14,320 --> 00:10:18,399
so if you are trying to build this

00:10:16,640 --> 00:10:20,959
tensorflow 2.2

00:10:18,399 --> 00:10:23,760
then you can just get a docker image

00:10:20,959 --> 00:10:27,200
from the ecp

00:10:23,760 --> 00:10:30,800
e4s area

00:10:27,200 --> 00:10:34,480
on docker hub here are other images

00:10:30,800 --> 00:10:36,560
this is with tensorflow with cuda 10.2

00:10:34,480 --> 00:10:38,720
and these are custom images that we have

00:10:36,560 --> 00:10:42,399
built which you can just pull

00:10:38,720 --> 00:10:45,519
directly like this now

00:10:42,399 --> 00:10:49,519
our e4s distribution

00:10:45,519 --> 00:10:51,200
is built upon the spac package manager

00:10:49,519 --> 00:10:53,600
and we use this for the software

00:10:51,200 --> 00:10:54,560
delivery it provides the ability to

00:10:53,600 --> 00:10:57,360
specify different

00:10:54,560 --> 00:10:57,600
versions of the software packages that

00:10:57,360 --> 00:11:00,399
are

00:10:57,600 --> 00:11:01,120
or are not interoperable and it's a

00:11:00,399 --> 00:11:04,000
build layer

00:11:01,120 --> 00:11:05,839
for a large collection of software tools

00:11:04,000 --> 00:11:08,959
and is the

00:11:05,839 --> 00:11:11,519
primary platform for

00:11:08,959 --> 00:11:13,760
deploying our tools and libraries and

00:11:11,519 --> 00:11:15,440
the motivation for this is that

00:11:13,760 --> 00:11:18,160
really scientific software is becoming

00:11:15,440 --> 00:11:21,440
extremely complex

00:11:18,160 --> 00:11:25,839
here is the dependency tree of

00:11:21,440 --> 00:11:29,440
nalu a generalized unstructured parallel

00:11:25,839 --> 00:11:31,519
low mark flow system and you can see

00:11:29,440 --> 00:11:33,440
that nalu depends on trilinus which

00:11:31,519 --> 00:11:35,600
depends on parameters which depends on

00:11:33,440 --> 00:11:38,800
matters which depends on c make

00:11:35,600 --> 00:11:40,880
and a number of packages so our software

00:11:38,800 --> 00:11:43,680
is becoming very complex

00:11:40,880 --> 00:11:45,920
here is an example of deal two a c plus

00:11:43,680 --> 00:11:48,880
plus finite element library and

00:11:45,920 --> 00:11:50,240
and you can see that to install all

00:11:48,880 --> 00:11:53,360
these packages

00:11:50,240 --> 00:11:56,160
correctly can be challenging

00:11:53,360 --> 00:11:56,800
here is the dependency tree for our

00:11:56,160 --> 00:11:59,200
miner

00:11:56,800 --> 00:12:00,560
and you get the idea that our packages

00:11:59,200 --> 00:12:03,360
are becoming

00:12:00,560 --> 00:12:03,839
really complex and even proprietary

00:12:03,360 --> 00:12:06,399
codes

00:12:03,839 --> 00:12:07,360
are often based on many open source

00:12:06,399 --> 00:12:10,480
libraries

00:12:07,360 --> 00:12:15,440
all these nodes in blue are

00:12:10,480 --> 00:12:17,279
open source packages used by aries

00:12:15,440 --> 00:12:19,200
and the exascale computing project is

00:12:17,279 --> 00:12:22,800
building an entire ecosystem with

00:12:19,200 --> 00:12:23,760
over 15 applications of with 80 software

00:12:22,800 --> 00:12:26,560
packages

00:12:23,760 --> 00:12:29,519
with multiple platforms and compilers

00:12:26,560 --> 00:12:31,120
and programming models so if you

00:12:29,519 --> 00:12:33,600
use two or three different versions of

00:12:31,120 --> 00:12:34,399
each package this combinatorial

00:12:33,600 --> 00:12:36,079
explosion

00:12:34,399 --> 00:12:37,680
will lead to like over a million

00:12:36,079 --> 00:12:39,600
combinations

00:12:37,680 --> 00:12:40,720
and every application has its own

00:12:39,600 --> 00:12:44,240
software dependency

00:12:40,720 --> 00:12:47,279
so we are now at a point

00:12:44,240 --> 00:12:50,880
where developers facilities

00:12:47,279 --> 00:12:55,600
are dedicating many ftes

00:12:50,880 --> 00:12:59,680
just to building and porting the hpc

00:12:55,600 --> 00:13:03,440
packages and this is not scalable and

00:12:59,680 --> 00:13:06,000
often this trades reuse for usability

00:13:03,440 --> 00:13:08,480
and usability for performance so we must

00:13:06,000 --> 00:13:11,200
make it easier to rely on other people's

00:13:08,480 --> 00:13:12,560
software but how do we install software

00:13:11,200 --> 00:13:14,079
how do we install software on a

00:13:12,560 --> 00:13:16,320
supercomputer

00:13:14,079 --> 00:13:18,320
well we start with downloading all the

00:13:16,320 --> 00:13:20,800
16 tarballs you may need for an

00:13:18,320 --> 00:13:21,360
application and then we start building

00:13:20,800 --> 00:13:24,560
it

00:13:21,360 --> 00:13:27,760
manually one by one

00:13:24,560 --> 00:13:30,160
and it looks a little bit like this

00:13:27,760 --> 00:13:32,240
where we configure we build we fight

00:13:30,160 --> 00:13:36,000
with the compiler we tweak the configure

00:13:32,240 --> 00:13:38,639
arguments we configure make install

00:13:36,000 --> 00:13:39,760
and then finally we are able to build

00:13:38,639 --> 00:13:42,000
the application

00:13:39,760 --> 00:13:43,279
and when we run the code if it seg

00:13:42,000 --> 00:13:46,240
faults we start

00:13:43,279 --> 00:13:47,680
all over again and there has to be a

00:13:46,240 --> 00:13:49,519
better way

00:13:47,680 --> 00:13:51,120
to deal with the complexity of

00:13:49,519 --> 00:13:54,000
installation

00:13:51,120 --> 00:13:55,440
now you may ask what about modules well

00:13:54,000 --> 00:13:58,160
modules don't

00:13:55,440 --> 00:13:59,519
install the software they are just a way

00:13:58,160 --> 00:14:01,519
to

00:13:59,519 --> 00:14:03,120
modify your environment so that you can

00:14:01,519 --> 00:14:06,079
put ld library paths

00:14:03,120 --> 00:14:08,320
and paths correctly but somebody else

00:14:06,079 --> 00:14:11,680
has to build the software that

00:14:08,320 --> 00:14:14,720
modules export so

00:14:11,680 --> 00:14:15,440
that's where this pack package manager

00:14:14,720 --> 00:14:18,639
comes in

00:14:15,440 --> 00:14:20,720
it's a very easy to install package

00:14:18,639 --> 00:14:21,120
manager you can just do a git clone you

00:14:20,720 --> 00:14:23,680
can

00:14:21,120 --> 00:14:25,360
set up your environment and then you can

00:14:23,680 --> 00:14:27,920
just install the package

00:14:25,360 --> 00:14:30,079
you can say spac install tau and then

00:14:27,920 --> 00:14:32,320
tau and its dependencies are installed

00:14:30,079 --> 00:14:33,680
within the spac directory structure but

00:14:32,320 --> 00:14:34,800
what is interesting is that it can

00:14:33,680 --> 00:14:36,800
support

00:14:34,800 --> 00:14:38,399
many variants for the same build you can

00:14:36,800 --> 00:14:38,800
have different compilers you can have

00:14:38,399 --> 00:14:42,079
different

00:14:38,800 --> 00:14:45,040
mpi implementations and build options

00:14:42,079 --> 00:14:46,959
so it provides a spec syntax you can say

00:14:45,040 --> 00:14:48,639
for example spack install tau

00:14:46,959 --> 00:14:50,959
and it will install tau performance

00:14:48,639 --> 00:14:54,959
system but you can also say

00:14:50,959 --> 00:14:57,839
spac install tau at 2.29.1

00:14:54,959 --> 00:14:59,440
it understands different versions so

00:14:57,839 --> 00:15:02,480
within the same spec

00:14:59,440 --> 00:15:05,360
i can have two different versions of tau

00:15:02,480 --> 00:15:06,959
installed and i can specify a compiler

00:15:05,360 --> 00:15:10,880
for one i could say

00:15:06,959 --> 00:15:14,240
but use the gcc 730 compiler

00:15:10,880 --> 00:15:16,240
using the percentage symbol i can also

00:15:14,240 --> 00:15:16,880
specify variants and build options such

00:15:16,240 --> 00:15:19,920
as

00:15:16,880 --> 00:15:23,360
please use python with p threads and

00:15:19,920 --> 00:15:24,639
mpi or when you use mpi please use the

00:15:23,360 --> 00:15:27,839
mvap pitch 2

00:15:24,639 --> 00:15:30,880
which supports the infiniband hardware

00:15:27,839 --> 00:15:34,560
version 2.3 but don't use the wrapper r

00:15:30,880 --> 00:15:37,519
path argument so that you can you can

00:15:34,560 --> 00:15:38,480
take the build of that and move it to a

00:15:37,519 --> 00:15:41,759
different system

00:15:38,480 --> 00:15:42,560
the binary and then launch it you can

00:15:41,759 --> 00:15:44,560
say stack

00:15:42,560 --> 00:15:47,199
find and then it will show you all the

00:15:44,560 --> 00:15:49,920
packages that are installed

00:15:47,199 --> 00:15:52,240
and this is really a very interesting

00:15:49,920 --> 00:15:55,279
way of

00:15:52,240 --> 00:15:58,560
of using software

00:15:55,279 --> 00:16:00,800
where you can say spac spac find

00:15:58,560 --> 00:16:02,079
and it will show you all the packages

00:16:00,800 --> 00:16:04,800
that are installed

00:16:02,079 --> 00:16:07,120
over here here is the m pitch package

00:16:04,800 --> 00:16:10,320
three two one you can say stack

00:16:07,120 --> 00:16:13,839
location minus i m pitch

00:16:10,320 --> 00:16:17,920
and then it will show you the location

00:16:13,839 --> 00:16:21,040
so if you say which mpi cc

00:16:17,920 --> 00:16:24,240
it picks up the mpi compilers from

00:16:21,040 --> 00:16:24,240
this particular location

00:16:28,959 --> 00:16:32,880
you can get more information about spac

00:16:31,519 --> 00:16:35,759
from this web page

00:16:32,880 --> 00:16:37,839
but it is central to ecp software

00:16:35,759 --> 00:16:40,959
strategy

00:16:37,839 --> 00:16:42,959
now we provide in e4s spac

00:16:40,959 --> 00:16:44,399
build caches and container build

00:16:42,959 --> 00:16:48,000
pipelines

00:16:44,399 --> 00:16:51,600
and there are recipes that you can

00:16:48,000 --> 00:16:53,519
download from our github page and

00:16:51,600 --> 00:16:54,720
there are build caches that we have

00:16:53,519 --> 00:16:56,800
created

00:16:54,720 --> 00:16:58,800
what this means is you do not need to

00:16:56,800 --> 00:16:59,600
compile the package from the source code

00:16:58,800 --> 00:17:02,959
you can simply

00:16:59,600 --> 00:17:06,880
point to this e4s build cache

00:17:02,959 --> 00:17:09,919
and then it will download the binaries

00:17:06,880 --> 00:17:13,039
for your platform here we see

00:17:09,919 --> 00:17:15,439
that we have now accumulated over 8 000

00:17:13,039 --> 00:17:17,039
ppc 64 le binaries and you can search

00:17:15,439 --> 00:17:19,760
for the stack packages

00:17:17,039 --> 00:17:21,679
if you go to this web page and you can

00:17:19,760 --> 00:17:22,319
pick an architecture and within that you

00:17:21,679 --> 00:17:24,720
can

00:17:22,319 --> 00:17:26,559
pick different operating systems like

00:17:24,720 --> 00:17:31,120
like red hat

00:17:26,559 --> 00:17:32,720
8.2 or ubuntu 2004

00:17:31,120 --> 00:17:35,280
and then you can see which package is

00:17:32,720 --> 00:17:38,600
available and if you just say spac

00:17:35,280 --> 00:17:42,240
mirror add e4s and point to this

00:17:38,600 --> 00:17:43,200
cache.e4s dot io and build cache keys

00:17:42,240 --> 00:17:44,960
dash id

00:17:43,200 --> 00:17:47,360
then you will be able to just say spac

00:17:44,960 --> 00:17:50,799
install and it will pick up

00:17:47,360 --> 00:17:54,720
in this case a amrex package

00:17:50,799 --> 00:17:58,000
from the build cache and download it

00:17:54,720 --> 00:18:01,360
we also have git lab runner images

00:17:58,000 --> 00:18:02,880
on github where we have for example an

00:18:01,360 --> 00:18:06,160
ubuntu 1804

00:18:02,880 --> 00:18:06,960
image for ppc 64 le you can see that it

00:18:06,160 --> 00:18:08,799
has

00:18:06,960 --> 00:18:11,440
a number of downloads that's as it's

00:18:08,799 --> 00:18:15,520
being used by our git lab runners

00:18:11,440 --> 00:18:19,520
and many different uh

00:18:15,520 --> 00:18:23,280
operating systems are supported we have

00:18:19,520 --> 00:18:26,480
base images for ppc64le where you can

00:18:23,280 --> 00:18:29,919
see there is ubuntu rel as well as

00:18:26,480 --> 00:18:30,559
centos we use the ubi universal binary

00:18:29,919 --> 00:18:33,280
image

00:18:30,559 --> 00:18:34,080
and the advantage of using ubi is that

00:18:33,280 --> 00:18:36,640
if your

00:18:34,080 --> 00:18:37,679
software stack is based on ubi and it's

00:18:36,640 --> 00:18:41,120
running on a

00:18:37,679 --> 00:18:41,520
red hat system then the support of red

00:18:41,120 --> 00:18:43,679
hat

00:18:41,520 --> 00:18:44,640
extends all the way to the software

00:18:43,679 --> 00:18:49,840
stack

00:18:44,640 --> 00:18:52,240
used in ubi so it's a supported image

00:18:49,840 --> 00:18:54,640
in e4s we also have reproducible docker

00:18:52,240 --> 00:18:57,840
recipes that you can find over here

00:18:54,640 --> 00:18:59,760
in this case on how to build it

00:18:57,840 --> 00:19:01,760
and we have a singularity image and i

00:18:59,760 --> 00:19:02,720
just showed you to use this image you

00:19:01,760 --> 00:19:06,080
can just go to the

00:19:02,720 --> 00:19:09,120
e4s webpage to the download link

00:19:06,080 --> 00:19:10,240
download this singularity file just one

00:19:09,120 --> 00:19:13,360
file and

00:19:10,240 --> 00:19:14,880
launch it with the dash dash nv for

00:19:13,360 --> 00:19:16,960
accessing the gpu

00:19:14,880 --> 00:19:18,559
just launch this image with bin bash and

00:19:16,960 --> 00:19:22,799
then you can

00:19:18,559 --> 00:19:26,160
already have all these packages in your

00:19:22,799 --> 00:19:28,559
in your area here

00:19:26,160 --> 00:19:30,880
are build pipelines for creating stack

00:19:28,559 --> 00:19:33,919
build caches

00:19:30,880 --> 00:19:35,440
and how we add another package to this

00:19:33,919 --> 00:19:39,280
you can see that they are multi-stage

00:19:35,440 --> 00:19:42,000
builds this is a build that's happening

00:19:39,280 --> 00:19:44,799
on an ibm system at oak ridge national

00:19:42,000 --> 00:19:48,320
labs it's ppc 64 le and you can see

00:19:44,799 --> 00:19:50,720
how these jobs are all staged

00:19:48,320 --> 00:19:51,760
in the build pipeline we also have a

00:19:50,720 --> 00:19:55,120
test suite

00:19:51,760 --> 00:19:57,600
now this is very interesting because

00:19:55,120 --> 00:19:58,160
we are assembling all these packages but

00:19:57,600 --> 00:20:01,679
we

00:19:58,160 --> 00:20:06,000
have a way to validate that they do what

00:20:01,679 --> 00:20:09,919
they claim to support so we have

00:20:06,000 --> 00:20:13,520
examples that we build and we run

00:20:09,919 --> 00:20:16,559
and get a pass failure output

00:20:13,520 --> 00:20:17,120
from different tools and libraries and

00:20:16,559 --> 00:20:19,679
then

00:20:17,120 --> 00:20:21,360
we use that to create these reproducible

00:20:19,679 --> 00:20:25,919
container builds using the base

00:20:21,360 --> 00:20:28,960
images here is a virtual box

00:20:25,919 --> 00:20:32,000
image where i can

00:20:28,960 --> 00:20:35,039
use this image and

00:20:32,000 --> 00:20:37,200
get familiar with different types of

00:20:35,039 --> 00:20:38,320
container runtimes it has docker

00:20:37,200 --> 00:20:41,520
singularity

00:20:38,320 --> 00:20:45,919
shifter charlie cloud and it has

00:20:41,520 --> 00:20:49,280
back pre-installed you can also use the

00:20:45,919 --> 00:20:52,400
image to launch an e4s

00:20:49,280 --> 00:20:55,200
image like i just showed you and

00:20:52,400 --> 00:20:57,360
use the bin bash and then use the spack

00:20:55,200 --> 00:21:01,360
from within this

00:20:57,360 --> 00:21:03,840
so uh to summarize i'll say that e4s

00:21:01,360 --> 00:21:03,840
is not

00:21:04,480 --> 00:21:07,760
a project that has started from a

00:21:05,840 --> 00:21:09,679
scratch it is building on top of

00:21:07,760 --> 00:21:13,200
previous effort

00:21:09,679 --> 00:21:15,520
it is leveraging the work of many other

00:21:13,200 --> 00:21:17,440
tool and library developers the

00:21:15,520 --> 00:21:19,760
precursor work done at

00:21:17,440 --> 00:21:20,799
the university of oregon and paratools

00:21:19,760 --> 00:21:23,919
inc on

00:21:20,799 --> 00:21:27,039
hpc linux contributed to this

00:21:23,919 --> 00:21:29,520
is the ideas classic xsdk project

00:21:27,039 --> 00:21:30,159
the original sdk that's still continuing

00:21:29,520 --> 00:21:33,760
under the

00:21:30,159 --> 00:21:34,400
ecp and of course spac the package

00:21:33,760 --> 00:21:37,679
manager

00:21:34,400 --> 00:21:37,679
predates e4s

00:21:37,840 --> 00:21:41,440
we are working to improve support for

00:21:40,159 --> 00:21:44,559
gpus

00:21:41,440 --> 00:21:47,840
and visualization tools we have a

00:21:44,559 --> 00:21:51,280
doe llvm effort where we are

00:21:47,840 --> 00:21:53,679
putting together multiple research

00:21:51,280 --> 00:21:56,960
projects that are funded by doe

00:21:53,679 --> 00:21:56,960
and have a

00:21:57,120 --> 00:22:02,640
single doe llvm

00:22:00,480 --> 00:22:04,880
repository and we'll be doing some

00:22:02,640 --> 00:22:06,000
additional ci testing and facility

00:22:04,880 --> 00:22:08,159
deployment

00:22:06,000 --> 00:22:09,919
with this we also have a project called

00:22:08,159 --> 00:22:12,960
super containers

00:22:09,919 --> 00:22:15,120
and we are studying the scalable startup

00:22:12,960 --> 00:22:17,280
of these containers and also improving

00:22:15,120 --> 00:22:19,760
the launch of mpi applications

00:22:17,280 --> 00:22:20,559
the idea being you can build on one

00:22:19,760 --> 00:22:23,360
machine

00:22:20,559 --> 00:22:23,840
take the binary to another supercomputer

00:22:23,360 --> 00:22:27,039
and then

00:22:23,840 --> 00:22:29,760
launch it using the e4s

00:22:27,039 --> 00:22:31,039
container launch tool so that you can

00:22:29,760 --> 00:22:34,960
switch the mpi

00:22:31,039 --> 00:22:37,280
inside the container with the native mpi

00:22:34,960 --> 00:22:38,159
that may be supporting high performance

00:22:37,280 --> 00:22:41,280
interconnects

00:22:38,159 --> 00:22:43,360
such as the melanox infiniband

00:22:41,280 --> 00:22:45,280
that's available on systems such as

00:22:43,360 --> 00:22:48,799
summit and sierra

00:22:45,280 --> 00:22:50,799
so using the mpg abi

00:22:48,799 --> 00:22:53,760
or application binary interface we can

00:22:50,799 --> 00:22:55,520
do this substitution

00:22:53,760 --> 00:22:58,400
conclusion i'll say that it provides a

00:22:55,520 --> 00:23:02,400
well integrated software stack for ai

00:22:58,400 --> 00:23:05,760
ml and hpc and assists since

00:23:02,400 --> 00:23:08,799
source based builds from our binary

00:23:05,760 --> 00:23:09,600
cache and containers so i would like to

00:23:08,799 --> 00:23:11,760
say that

00:23:09,600 --> 00:23:14,000
e4s is not a closed system for taking

00:23:11,760 --> 00:23:15,840
contributions only from doe

00:23:14,000 --> 00:23:18,480
software development teams it's an

00:23:15,840 --> 00:23:20,640
extensible open architecture

00:23:18,480 --> 00:23:22,720
software ecosystem that accepts

00:23:20,640 --> 00:23:23,520
contributions from u.s and international

00:23:22,720 --> 00:23:25,360
teams

00:23:23,520 --> 00:23:26,960
it's a full collection of compatible

00:23:25,360 --> 00:23:30,240
software capabilities

00:23:26,960 --> 00:23:33,280
and it represents a manifest of many

00:23:30,240 --> 00:23:35,520
allah selectable software capabilities

00:23:33,280 --> 00:23:36,400
you can think of it as a vehicle for

00:23:35,520 --> 00:23:39,440
delivering high

00:23:36,400 --> 00:23:41,600
quality reusable software

00:23:39,440 --> 00:23:42,960
products in collaboration with others

00:23:41,600 --> 00:23:46,400
and a sort of a

00:23:42,960 --> 00:23:47,600
conduit for future leading edge hpc

00:23:46,400 --> 00:23:49,679
software

00:23:47,600 --> 00:23:53,120
which targets the scalable next

00:23:49,679 --> 00:23:53,120
generation computing platforms

00:23:53,200 --> 00:23:57,600
the work that i presented happens partly

00:23:56,960 --> 00:23:59,200
at the

00:23:57,600 --> 00:24:01,120
performance research laboratory at the

00:23:59,200 --> 00:24:02,880
university of oregon we are based in

00:24:01,120 --> 00:24:05,440
eugene oregon

00:24:02,880 --> 00:24:07,919
and i would like to thank our sponsors

00:24:05,440 --> 00:24:10,880
the exascale computing project

00:24:07,919 --> 00:24:12,240
for their support of this project so

00:24:10,880 --> 00:24:16,240
with this

00:24:12,240 --> 00:24:21,120
i'll take any questions or

00:24:16,240 --> 00:24:21,120
comments that you may have in the qa

00:24:22,159 --> 00:24:24,480
and

00:24:26,799 --> 00:24:34,240
i can show you some examples as well

00:24:31,440 --> 00:24:34,240
here is a

00:24:37,279 --> 00:24:41,360
here is an example of trilinos

00:24:44,840 --> 00:24:51,279
now

00:24:47,679 --> 00:24:56,240
i can start from a scratch and

00:24:51,279 --> 00:24:58,640
say spac load minus r trilinos

00:24:56,240 --> 00:25:00,400
this loads trilinos and all its

00:24:58,640 --> 00:25:01,200
dependencies using the stack package

00:25:00,400 --> 00:25:04,320
manager

00:25:01,200 --> 00:25:06,960
if i say spac location dash i

00:25:04,320 --> 00:25:06,960
trilinos

00:25:07,440 --> 00:25:12,960
then i can see this directory in the

00:25:10,159 --> 00:25:12,960
stack package

00:25:13,120 --> 00:25:19,919
i see that it has a lib directory

00:25:16,559 --> 00:25:23,919
and it has a number of these libraries

00:25:19,919 --> 00:25:23,919
solvers that are pre-installed

00:25:24,720 --> 00:25:30,320
i can say compile.sh and i am

00:25:28,000 --> 00:25:32,000
compiling with these libraries you can

00:25:30,320 --> 00:25:34,640
see that this

00:25:32,000 --> 00:25:35,520
package uses a number of libraries if i

00:25:34,640 --> 00:25:39,440
were to just say

00:25:35,520 --> 00:25:42,559
ldd on this whole tan binary

00:25:39,440 --> 00:25:45,279
well that's

00:25:42,559 --> 00:25:45,840
about 113 shared objects that are being

00:25:45,279 --> 00:25:49,039
used

00:25:45,840 --> 00:25:52,000
to just build this and if i

00:25:49,039 --> 00:25:52,000
were to run this

00:25:54,400 --> 00:26:02,159
i can use mpi i can launch this

00:25:57,520 --> 00:26:04,480
solver i can even

00:26:02,159 --> 00:26:04,480
use

00:26:05,279 --> 00:26:14,559
tao to profile this application

00:26:10,720 --> 00:26:18,720
here i'm just saying profile the

00:26:14,559 --> 00:26:22,240
i o in the application profile

00:26:18,720 --> 00:26:23,120
the kernels and there are files that are

00:26:22,240 --> 00:26:24,880
produced for

00:26:23,120 --> 00:26:26,159
every thread of execution where you can

00:26:24,880 --> 00:26:28,320
see the mpi

00:26:26,159 --> 00:26:30,880
you can see which files and ports were

00:26:28,320 --> 00:26:30,880
accessed

00:26:32,799 --> 00:26:36,320
and i can of course visualize that

00:26:36,480 --> 00:26:42,559
so with this i'll

00:26:40,159 --> 00:26:44,960
i'll see if there's any other questions

00:26:42,559 --> 00:26:44,960
we can

00:26:45,440 --> 00:26:53,840
we can help with

00:26:53,919 --> 00:26:58,640
if you have any if you need some

00:26:56,960 --> 00:27:02,799
additional information please visit

00:26:58,640 --> 00:27:05,679
our webpage the e4s dot io

00:27:02,799 --> 00:27:07,520
and please get in touch with us i hope

00:27:05,679 --> 00:27:09,600
you find

00:27:07,520 --> 00:27:11,120
this collection of hpc tools and

00:27:09,600 --> 00:27:15,520
libraries useful

00:27:11,120 --> 00:27:18,640
in your in your work

00:27:15,520 --> 00:27:18,640

YouTube URL: https://www.youtube.com/watch?v=gfrN__dO7iA


