Title: OpenPOWER Summit NA 2019: Protected Execution Facility On Power
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Guerney Hunt, Ram Pai & Michael Anderson, IBM

IBM POWER9 architecture introduces  Protected Execution Facility (PEF) which enables secure memory, which can only be accessed when the processor is in a new higher privileged mode called Ultravisor mode.  Some facilities that were previously hypervisor privileged are now ultravisor privileged. This talk presents architectural changes for PEF,  the Protected Execution Ultravisor, and new services called ultra calls.  Combined with enhancements to the Virtual Machine format a new class of VMs called Secure Virtual Machines (SVM) is enabled.  SVMs utilize hypervisor services and run in secure memory under the control of the Ultravisor.  SVMs are protected from attacks from the Hypervisor, other privileged software entities, and privileged users on the system.  POWER9 systems can concurrently support both normal VMs and SVMs. All firmware and tools for PEF will be Open Sourced.
Captions: 
	00:00:00,740 --> 00:00:08,639
okay I guess it's about time so we're

00:00:07,020 --> 00:00:10,440
gonna be talking to you about protected

00:00:08,639 --> 00:00:14,099
execution facility which is a new

00:00:10,440 --> 00:00:18,840
feature available in some upcoming power

00:00:14,099 --> 00:00:20,340
processors this slide is basically to

00:00:18,840 --> 00:00:24,090
tell you that some of the concepts were

00:00:20,340 --> 00:00:26,010
presented were done were funded by

00:00:24,090 --> 00:00:28,170
research that were sponsored by the US

00:00:26,010 --> 00:00:29,779
and Canadian governments whenever we

00:00:28,170 --> 00:00:32,660
talk about it we have to tell you that

00:00:29,779 --> 00:00:35,790
so that you understand the security

00:00:32,660 --> 00:00:37,829
contras it's increasingly difficult to

00:00:35,790 --> 00:00:39,540
verify the provenance and correctness of

00:00:37,829 --> 00:00:40,920
software components like hypervisors

00:00:39,540 --> 00:00:44,070
operating systems and privileged

00:00:40,920 --> 00:00:46,050
software these these components provide

00:00:44,070 --> 00:00:49,410
a larger tax base and unfortunately they

00:00:46,050 --> 00:00:51,390
can also contain a number of zero-day

00:00:49,410 --> 00:00:53,610
vulnerabilities including zero-day

00:00:51,390 --> 00:00:55,079
attacks and as open power becomes more

00:00:53,610 --> 00:00:58,440
prevalent it'll become more susceptible

00:00:55,079 --> 00:01:01,170
to this sort of stuff so the objectives

00:00:58,440 --> 00:01:03,210
for protected execution facility are to

00:01:01,170 --> 00:01:05,549
introduce this concept we call a secure

00:01:03,210 --> 00:01:07,260
virtual machine which protects the

00:01:05,549 --> 00:01:09,960
secure virtual machine against attacks

00:01:07,260 --> 00:01:12,420
from outside these svm components and

00:01:09,960 --> 00:01:14,880
enables the the protection of the svm

00:01:12,420 --> 00:01:17,520
code and data we create a smaller

00:01:14,880 --> 00:01:19,380
trusted computing base and we have an

00:01:17,520 --> 00:01:22,320
open source ecosystem associated with

00:01:19,380 --> 00:01:24,840
this it's also integrated with trusted

00:01:22,320 --> 00:01:26,490
computing tooling and we provide the

00:01:24,840 --> 00:01:28,860
ability to convert an existing virtual

00:01:26,490 --> 00:01:32,070
machine image running on power into an

00:01:28,860 --> 00:01:33,600
SVM image we don't have any limitations

00:01:32,070 --> 00:01:36,479
on the amount of memory we can protect

00:01:33,600 --> 00:01:39,689
and and any of your existing application

00:01:36,479 --> 00:01:42,329
code can run in this SVM so a quick

00:01:39,689 --> 00:01:43,740
overview of what we're doing here if you

00:01:42,329 --> 00:01:45,600
know as you're familiar with power power

00:01:43,740 --> 00:01:47,820
has problem states supervisor state in

00:01:45,600 --> 00:01:50,009
hypervisor state we now introduce a new

00:01:47,820 --> 00:01:51,750
state called ultra vires state it's at

00:01:50,009 --> 00:01:55,229
the bottom because it's the highest

00:01:51,750 --> 00:01:56,729
privilege State in the machine and this

00:01:55,229 --> 00:01:59,430
gives us the ability to provide

00:01:56,729 --> 00:02:02,909
confidentiality and integrity for SVM

00:01:59,430 --> 00:02:04,469
code and data we're minimizing the TCB

00:02:02,909 --> 00:02:07,250
to this ultra visor state and the

00:02:04,469 --> 00:02:09,629
hardware it's built upon we made some

00:02:07,250 --> 00:02:10,050
processor changes which I'll describe in

00:02:09,629 --> 00:02:11,760
a minute

00:02:10,050 --> 00:02:13,560
and we're adding some firm and there's

00:02:11,760 --> 00:02:15,990
some firmware changes both the host boot

00:02:13,560 --> 00:02:18,240
and opal and we add a whole new section

00:02:15,990 --> 00:02:20,070
of firmware called the ultra visor it's

00:02:18,240 --> 00:02:22,020
the architecture includes the what's

00:02:20,070 --> 00:02:24,540
provided by the ultra vires as well as

00:02:22,020 --> 00:02:27,090
the hardware we've got this new mode

00:02:24,540 --> 00:02:30,480
called ultra vires mode which as high

00:02:27,090 --> 00:02:31,860
polished as I said and and the firmware

00:02:30,480 --> 00:02:33,750
or the ultra vires firmware and the

00:02:31,860 --> 00:02:37,680
hardware used to manage the security of

00:02:33,750 --> 00:02:39,270
the machine we introduced a concept into

00:02:37,680 --> 00:02:40,950
the architecture called secure memory

00:02:39,270 --> 00:02:43,670
which can only be accessed when you're

00:02:40,950 --> 00:02:48,270
running in secure mode by a secure VM

00:02:43,670 --> 00:02:50,190
and we allow both a normal virtual

00:02:48,270 --> 00:02:52,410
machine and a secure virtual machine to

00:02:50,190 --> 00:02:54,300
run on the same platform and the

00:02:52,410 --> 00:02:57,470
overhead associated with the changes is

00:02:54,300 --> 00:02:59,460
only on the secure virtual machines so

00:02:57,470 --> 00:03:02,310
this gives you a picture basically

00:02:59,460 --> 00:03:02,760
starting you can do top-down or

00:03:02,310 --> 00:03:04,950
bottom-up

00:03:02,760 --> 00:03:06,930
but we'll go bottom-up you know you've

00:03:04,950 --> 00:03:09,840
got some storage we have a trusted

00:03:06,930 --> 00:03:11,460
platform module there's a private key

00:03:09,840 --> 00:03:15,000
associated with the processor that's

00:03:11,460 --> 00:03:16,650
locked in the TPM we add some we make

00:03:15,000 --> 00:03:18,930
some changes to implement in the

00:03:16,650 --> 00:03:20,760
hardware one of those changes separates

00:03:18,930 --> 00:03:22,800
the memory addressable by the machine

00:03:20,760 --> 00:03:25,320
into some of its secure memory some of

00:03:22,800 --> 00:03:27,000
its normal memory we had this protected

00:03:25,320 --> 00:03:29,610
execution ultra vires below the

00:03:27,000 --> 00:03:33,209
hypervisor which is any hypervisor there

00:03:29,610 --> 00:03:35,250
Linux KVM runs on top of it and then

00:03:33,209 --> 00:03:37,500
there's a public key associated with the

00:03:35,250 --> 00:03:39,870
private key that you use this new

00:03:37,500 --> 00:03:41,489
tooling to generate to convert a normal

00:03:39,870 --> 00:03:43,620
virtual machine into a secure virtual

00:03:41,489 --> 00:03:46,470
machine and the secure virtual machines

00:03:43,620 --> 00:03:50,610
are stored or stored on your standard

00:03:46,470 --> 00:03:55,080
disk that's basically a quick overview

00:03:50,610 --> 00:03:58,739
of what we have here so the protected

00:03:55,080 --> 00:03:59,940
execution term refers to the changes

00:03:58,739 --> 00:04:02,640
made the power and open power

00:03:59,940 --> 00:04:04,620
architecture where each machine has a

00:04:02,640 --> 00:04:07,110
public/private key here they get the new

00:04:04,620 --> 00:04:10,350
firmware when we have these things we

00:04:07,110 --> 00:04:11,790
call secure virtual machines to get to

00:04:10,350 --> 00:04:13,470
create a secure virtual machine you

00:04:11,790 --> 00:04:15,450
start with a normal virtual machine and

00:04:13,470 --> 00:04:17,489
and run some tooling that will also be

00:04:15,450 --> 00:04:20,880
open source and does the conversion for

00:04:17,489 --> 00:04:22,440
you secure virtual machines executing

00:04:20,880 --> 00:04:24,000
secure memory which is under the control

00:04:22,440 --> 00:04:25,650
of the all provider

00:04:24,000 --> 00:04:27,630
it's important to note that all secure

00:04:25,650 --> 00:04:29,610
virtual machines start execution as a

00:04:27,630 --> 00:04:33,090
normal virtual machine and then they

00:04:29,610 --> 00:04:34,350
they issue a new Cisco if you're

00:04:33,090 --> 00:04:36,300
familiar with the architecture we have

00:04:34,350 --> 00:04:38,640
Cisco level-1 level-2 we introduced

00:04:36,300 --> 00:04:42,810
level 3 which goes directly to this new

00:04:38,640 --> 00:04:44,490
firmware and neither the hypervisor

00:04:42,810 --> 00:04:47,190
normal normal virtual machines can

00:04:44,490 --> 00:04:50,450
reference secure memory or and in fact

00:04:47,190 --> 00:04:53,550
most of the hardware can't reference it

00:04:50,450 --> 00:04:55,410
so just to talk a little bit about the

00:04:53,550 --> 00:04:59,190
format of a secure virtual machine and

00:04:55,410 --> 00:05:02,670
and and how the thing boots this picture

00:04:59,190 --> 00:05:07,170
is is designed if your secure virtual

00:05:02,670 --> 00:05:09,270
machine contains a Zee image so you end

00:05:07,170 --> 00:05:11,100
up with you know you start off in slaw

00:05:09,270 --> 00:05:14,850
if you go to grub grub loads as the

00:05:11,100 --> 00:05:16,830
image and the image runs it you know you

00:05:14,850 --> 00:05:20,790
get these new boot targets the Zee image

00:05:16,830 --> 00:05:22,800
runs and eventually does a ultra call to

00:05:20,790 --> 00:05:25,530
move this whole thing into secure memory

00:05:22,800 --> 00:05:28,230
and then become secure the alternative

00:05:25,530 --> 00:05:31,110
format I don't have illustrated in in

00:05:28,230 --> 00:05:34,590
this picture but it's basically to

00:05:31,110 --> 00:05:36,330
inject the ESM operand I call it a blob

00:05:34,590 --> 00:05:39,990
here but it's really an operand of this

00:05:36,330 --> 00:05:41,820
new ultra call we can inject it into the

00:05:39,990 --> 00:05:44,340
init Ram FS so you can have two

00:05:41,820 --> 00:05:45,960
different formats for you or the tooling

00:05:44,340 --> 00:05:47,580
will convert it to there one format or

00:05:45,960 --> 00:05:53,390
the other format either one of them is

00:05:47,580 --> 00:05:58,290
bootable as boots by grub the ESM operon

00:05:53,390 --> 00:06:00,419
contains these things illustrated here

00:05:58,290 --> 00:06:03,450
the the purple the green and the orange

00:06:00,419 --> 00:06:05,910
thing we refer to as lock boxes what it

00:06:03,450 --> 00:06:08,790
is is it's the symmetric key protecting

00:06:05,910 --> 00:06:10,530
the blue section wrapped with the public

00:06:08,790 --> 00:06:13,560
key of that's associated with the

00:06:10,530 --> 00:06:15,810
hardware the mission the the SVM is

00:06:13,560 --> 00:06:19,229
authorized to run on you can have as

00:06:15,810 --> 00:06:21,180
many lock boxes as you want inside the

00:06:19,229 --> 00:06:23,040
the blue area is what we call the

00:06:21,180 --> 00:06:24,840
verification information this is

00:06:23,040 --> 00:06:27,540
integrity information that's used by the

00:06:24,840 --> 00:06:29,610
new firmware to verify the integrity of

00:06:27,540 --> 00:06:31,320
the kernel the init Ram FS and the our

00:06:29,610 --> 00:06:32,290
Test section associated with the virtual

00:06:31,320 --> 00:06:34,780
machine

00:06:32,290 --> 00:06:36,580
there are also what we call symmetric

00:06:34,780 --> 00:06:38,200
key blobs which are secrets that the

00:06:36,580 --> 00:06:40,770
Creator the virtual machine wants to

00:06:38,200 --> 00:06:43,330
embed in it are also in this section and

00:06:40,770 --> 00:06:46,630
finally we have the passphrase for the

00:06:43,330 --> 00:06:51,070
encrypted filesystem we the tooling

00:06:46,630 --> 00:06:54,130
wants you to have the filesystem of the

00:06:51,070 --> 00:06:55,990
of the SVM protected by an

00:06:54,130 --> 00:06:58,660
encrypted filesystem otherwise you can't

00:06:55,990 --> 00:07:01,300
protect it when it's at rest so we use

00:06:58,660 --> 00:07:06,520
like say DM DM crypt can protect your

00:07:01,300 --> 00:07:09,040
file your disk while it's not running so

00:07:06,520 --> 00:07:13,780
now we'll just try to walk through the

00:07:09,040 --> 00:07:16,360
changes and a little bit of a not too

00:07:13,780 --> 00:07:19,240
quickly here but it give you a buffer a

00:07:16,360 --> 00:07:21,040
base idea of what we did we're using an

00:07:19,240 --> 00:07:22,750
address bit that's not inside the

00:07:21,040 --> 00:07:25,420
physical memory space to indicate

00:07:22,750 --> 00:07:27,600
whether the memory is secure or not the

00:07:25,420 --> 00:07:29,920
amount of secure memory is configurable

00:07:27,600 --> 00:07:32,740
the way you normally configure machine

00:07:29,920 --> 00:07:34,990
features in power we added another bit

00:07:32,740 --> 00:07:37,300
or used up a previously reserved bit and

00:07:34,990 --> 00:07:39,970
the MSR to indicate that a process is

00:07:37,300 --> 00:07:41,920
actually running secure we now have

00:07:39,970 --> 00:07:45,280
three bits that determine the privilege

00:07:41,920 --> 00:07:47,230
of a prophet processor we had the s bit

00:07:45,280 --> 00:07:49,150
to the HP and the PR bit which

00:07:47,230 --> 00:07:51,430
previously determined the preffer the

00:07:49,150 --> 00:07:52,990
privilege of a processor so if you're

00:07:51,430 --> 00:07:54,910
running secure you can be in problem

00:07:52,990 --> 00:07:56,530
state you can be an OS state you can be

00:07:54,910 --> 00:07:58,480
an ultra Weiser state or you can be

00:07:56,530 --> 00:08:00,730
where we have one configuration that's

00:07:58,480 --> 00:08:02,710
currently reserved if you're a normal

00:08:00,730 --> 00:08:04,570
virtual machine you run in problem state

00:08:02,710 --> 00:08:08,260
privilege so a state hypervisor state

00:08:04,570 --> 00:08:10,870
and now and there's a mode 0 1 1 called

00:08:08,260 --> 00:08:12,940
problem hypervisor or adjunct mode for

00:08:10,870 --> 00:08:16,060
the hypervisor we add a bunch of new

00:08:12,940 --> 00:08:22,210
registers such as SMF ctrl and these

00:08:16,060 --> 00:08:24,730
others us us MOR us us r0 us are r1 us

00:08:22,210 --> 00:08:26,620
PRG 0 1 are are similar to the registers

00:08:24,730 --> 00:08:29,320
that exist for hypervisor mode and have

00:08:26,620 --> 00:08:30,940
similar functions but refer to when the

00:08:29,320 --> 00:08:33,130
system is running an ultra vires mode

00:08:30,940 --> 00:08:36,580
and the you registers can only be

00:08:33,130 --> 00:08:40,210
referenced by the ultra vires anew

00:08:36,580 --> 00:08:42,580
instruction you f-you you RFID the issue

00:08:40,210 --> 00:08:43,889
is that note that the ultra vires is the

00:08:42,580 --> 00:08:46,649
only one who can

00:08:43,889 --> 00:08:48,779
on the MSR Sabbath best bit when he's

00:08:46,649 --> 00:08:51,660
returning causing something to execute

00:08:48,779 --> 00:08:53,189
you've probably figured out that by now

00:08:51,660 --> 00:08:54,809
that this requires a little bit of pair

00:08:53,189 --> 00:08:58,350
of virtualization and the hypervisor to

00:08:54,809 --> 00:09:00,239
get it to run and that we've done and

00:08:58,350 --> 00:09:03,959
those changes are being are being up

00:09:00,239 --> 00:09:08,519
streamed as we speak so going at a lower

00:09:03,959 --> 00:09:11,549
level we rely on a route of trust and

00:09:08,519 --> 00:09:13,410
one such route of trust is a TPM which

00:09:11,549 --> 00:09:15,839
is available in open power systems

00:09:13,410 --> 00:09:19,439
that's where we lock up the private key

00:09:15,839 --> 00:09:21,629
the ultraviolet EPM to get access to the

00:09:19,439 --> 00:09:24,989
symmetric key protecting the SVM so when

00:09:21,629 --> 00:09:27,660
you do that when you do that ESM also

00:09:24,989 --> 00:09:30,600
call you pass as a pointer to us to this

00:09:27,660 --> 00:09:32,609
ESM operandi described the ultraviolet

00:09:30,600 --> 00:09:35,549
looks in the lock boxes to see if it's

00:09:32,609 --> 00:09:37,859
if it see the each lock boxes indexed by

00:09:35,549 --> 00:09:40,139
the number of bits from the private key

00:09:37,859 --> 00:09:42,119
and if it sees its bits the bits

00:09:40,139 --> 00:09:44,879
associated with its private key in there

00:09:42,119 --> 00:09:46,379
it uses that lock box to decrypt and get

00:09:44,879 --> 00:09:48,389
the symmetric key and then it can get

00:09:46,379 --> 00:09:51,929
the verification information and verify

00:09:48,389 --> 00:09:54,029
that that the the machine that you wish

00:09:51,929 --> 00:09:56,339
to become a secure virtual machine has

00:09:54,029 --> 00:09:58,290
not been tampered with now before it

00:09:56,339 --> 00:10:00,899
does any of that when you do the ESM

00:09:58,290 --> 00:10:02,999
call what it does is it copies the non

00:10:00,899 --> 00:10:04,980
secure machine into secure memory where

00:10:02,999 --> 00:10:08,389
nobody can touch it and then it does all

00:10:04,980 --> 00:10:08,389
of its verification and checks

00:10:08,569 --> 00:10:18,749
so if yeah so I've told you all this if

00:10:14,579 --> 00:10:21,059
if if the secure virtual machine passes

00:10:18,749 --> 00:10:23,220
the checks then the ultra vires passes

00:10:21,059 --> 00:10:25,829
control would to it with MSR sub s

00:10:23,220 --> 00:10:29,730
equals one and it starts running and

00:10:25,829 --> 00:10:32,069
secure so the one of the changes is that

00:10:29,730 --> 00:10:35,100
when the processor is running with that

00:10:32,069 --> 00:10:37,199
bit set to one saying that the thing

00:10:35,100 --> 00:10:39,329
running is secure all interrupts go

00:10:37,199 --> 00:10:43,499
directly to the alt revise or not to the

00:10:39,329 --> 00:10:46,049
hypervisor and so an addition to protect

00:10:43,499 --> 00:10:48,179
the SVM some of the resources that were

00:10:46,049 --> 00:10:50,309
previously hypervisor privileged are now

00:10:48,179 --> 00:10:52,439
ultra vires privilege which means when

00:10:50,309 --> 00:10:54,209
the hypervisor wants to do some of its

00:10:52,439 --> 00:10:56,470
work it's got to call the alt revisor

00:10:54,209 --> 00:10:59,680
and ask it to do the work for it

00:10:56,470 --> 00:11:00,850
but it also allows the ultra vires to

00:10:59,680 --> 00:11:02,950
make sure that the work that's being

00:11:00,850 --> 00:11:05,040
requested won't put the secure virtual

00:11:02,950 --> 00:11:07,900
machine at risk

00:11:05,040 --> 00:11:09,580
SVM's are protected and can only run on

00:11:07,900 --> 00:11:12,370
an authorized machine meaning if the

00:11:09,580 --> 00:11:14,920
ultra of machine doesn't find the

00:11:12,370 --> 00:11:17,770
symmetric key encrypted with its public

00:11:14,920 --> 00:11:20,800
key then the ex request to execute will

00:11:17,770 --> 00:11:22,870
fail and that authorization is

00:11:20,800 --> 00:11:28,120
determined by the creator of the SVM not

00:11:22,870 --> 00:11:30,070
by the hardware platform okay so unless

00:11:28,120 --> 00:11:31,630
a process is running in secure mode it

00:11:30,070 --> 00:11:33,730
can access to key memory I made that

00:11:31,630 --> 00:11:35,830
point a couple of times told you that

00:11:33,730 --> 00:11:38,860
you've got to use a hypervisor to talk

00:11:35,830 --> 00:11:41,950
to use certain resources such as PTC are

00:11:38,860 --> 00:11:44,350
in the architecture the hypervisor can

00:11:41,950 --> 00:11:47,590
only see secure memory encrypted this

00:11:44,350 --> 00:11:49,120
this feature is is enforced by the ultra

00:11:47,590 --> 00:11:50,950
vires if the hypervisor couldn't

00:11:49,120 --> 00:11:52,800
actually get access to the secure memory

00:11:50,950 --> 00:11:56,350
couldn't do paging for the ultra vires

00:11:52,800 --> 00:12:00,400
the i/o system cannot and cannot address

00:11:56,350 --> 00:12:02,320
secure memory so that but the SVM can

00:12:00,400 --> 00:12:04,810
request to share pages of memory with

00:12:02,320 --> 00:12:07,810
the hypervisor which means that we get

00:12:04,810 --> 00:12:10,600
the SVM gets to use virtual i/o not not

00:12:07,810 --> 00:12:14,560
actual you can't at this point dedicate

00:12:10,600 --> 00:12:19,000
devices to SVM but Verdejo works by

00:12:14,560 --> 00:12:20,920
using bounds buffering the SVM can only

00:12:19,000 --> 00:12:23,170
address the memory in its page tables

00:12:20,920 --> 00:12:25,330
it's not it's not unlike some other

00:12:23,170 --> 00:12:26,980
trusted execution environments when

00:12:25,330 --> 00:12:29,560
you're running security we do not give

00:12:26,980 --> 00:12:31,090
you access to the entire machine we only

00:12:29,560 --> 00:12:33,130
give you access to the memory that's in

00:12:31,090 --> 00:12:35,410
your page table and the effect of this

00:12:33,130 --> 00:12:37,480
is that not only are we protecting us

00:12:35,410 --> 00:12:39,640
the SVM from the hypervisor and other

00:12:37,480 --> 00:12:42,040
normal VMs but we're protecting the

00:12:39,640 --> 00:12:44,200
hypervisor and the normal VMs from the

00:12:42,040 --> 00:12:46,900
SVM so you can't like use this

00:12:44,200 --> 00:12:49,240
capability to build this great spyware

00:12:46,900 --> 00:12:51,820
that will nuke your machine but you know

00:12:49,240 --> 00:12:54,430
the ultra vires this much significantly

00:12:51,820 --> 00:12:56,200
smaller entity restricts the SVM to a

00:12:54,430 --> 00:12:58,330
certain set of pages and that's all it

00:12:56,200 --> 00:13:00,310
can get to can't generate physical

00:12:58,330 --> 00:13:02,440
addresses and reference any arbitrary

00:13:00,310 --> 00:13:04,450
memory the ultra vires

00:13:02,440 --> 00:13:06,520
the other thing about the ultra vires is

00:13:04,450 --> 00:13:07,160
it only operates in response to an

00:13:06,520 --> 00:13:10,880
interrupt

00:13:07,160 --> 00:13:13,430
there's no timer interrupt that that

00:13:10,880 --> 00:13:15,500
will cause the operator up the ultra

00:13:13,430 --> 00:13:18,290
vires to come into control and what this

00:13:15,500 --> 00:13:20,180
means is that we don't the haven't

00:13:18,290 --> 00:13:22,400
enabling this feature doesn't impose any

00:13:20,180 --> 00:13:25,910
additional overhead on a normal virtual

00:13:22,400 --> 00:13:28,010
machine direct any additional direct

00:13:25,910 --> 00:13:29,750
overhead I should say there's a small

00:13:28,010 --> 00:13:31,880
amount of overhead because the

00:13:29,750 --> 00:13:34,400
hypervisor has to use altar calls to get

00:13:31,880 --> 00:13:35,720
to certain resources but the frequency

00:13:34,400 --> 00:13:38,450
of the hypervisors uses those resources

00:13:35,720 --> 00:13:40,390
is fairly low so the overhead to a

00:13:38,450 --> 00:13:42,470
normal virtual machine is less than 2%

00:13:40,390 --> 00:13:44,090
you know I don't have an exact number

00:13:42,470 --> 00:13:46,940
right now but it's it's way less than

00:13:44,090 --> 00:13:49,190
that and it would depend on as in any

00:13:46,940 --> 00:13:50,990
measurement of overhead it depends on

00:13:49,190 --> 00:13:53,270
the instruction mix and the frequency

00:13:50,990 --> 00:13:54,440
they are the overhead mostly curves when

00:13:53,270 --> 00:13:55,820
you're starting something up so if you

00:13:54,440 --> 00:13:58,930
start things up and they run for a long

00:13:55,820 --> 00:14:01,730
time you don't see it you know because

00:13:58,930 --> 00:14:04,220
that's that's the way it works you know

00:14:01,730 --> 00:14:06,590
the there's a register called the page

00:14:04,220 --> 00:14:08,180
table control register inside the

00:14:06,590 --> 00:14:10,310
architecture which is owned by the ultra

00:14:08,180 --> 00:14:11,840
vires so every time the hypervisor needs

00:14:10,310 --> 00:14:17,120
to start a new virtual machine it's got

00:14:11,840 --> 00:14:20,800
to ask to make some changes as as an

00:14:17,120 --> 00:14:24,350
overview the these resources have become

00:14:20,800 --> 00:14:26,240
ultra visor privileged in power we have

00:14:24,350 --> 00:14:28,370
something called scam registers which

00:14:26,240 --> 00:14:31,130
are used to configure the hardware and

00:14:28,370 --> 00:14:33,410
those are ultra visor privileges and

00:14:31,130 --> 00:14:34,880
sometimes the hypervisor wants to do

00:14:33,410 --> 00:14:36,560
things but those are just those

00:14:34,880 --> 00:14:38,840
registers control some interesting

00:14:36,560 --> 00:14:41,480
features which could can allow bad

00:14:38,840 --> 00:14:44,090
things to do allow bad things to happen

00:14:41,480 --> 00:14:46,280
so what's going on is the ultra visor if

00:14:44,090 --> 00:14:48,050
the hypervisor wants to do something the

00:14:46,280 --> 00:14:50,510
ultraviolet looks at the request and if

00:14:48,050 --> 00:14:53,120
the if it believes the request is OK it

00:14:50,510 --> 00:14:55,010
does it and if it doesn't it goes back

00:14:53,120 --> 00:14:59,570
to the hypervisor without doing the

00:14:55,010 --> 00:15:00,890
request the processor configuration

00:14:59,570 --> 00:15:02,390
registers I just talked about there's

00:15:00,890 --> 00:15:04,250
stop state information when you do

00:15:02,390 --> 00:15:06,710
suspend and resume that also has to be

00:15:04,250 --> 00:15:08,210
protected so that you can't use the stop

00:15:06,710 --> 00:15:11,060
sate to transition or get information

00:15:08,210 --> 00:15:12,830
out of a secure entity I've already told

00:15:11,060 --> 00:15:14,930
you a couple of times about the PTC are

00:15:12,830 --> 00:15:16,730
and there's partition partition table

00:15:14,930 --> 00:15:18,440
entries we move the partition table

00:15:16,730 --> 00:15:18,970
entries into secure memory so if your

00:15:18,440 --> 00:15:20,860
manipulate

00:15:18,970 --> 00:15:21,910
you go through the ultra vires that's

00:15:20,860 --> 00:15:24,189
because if you could put arbitrary

00:15:21,910 --> 00:15:25,779
addresses in there as a hypervisor you

00:15:24,189 --> 00:15:29,319
could put arbitrary addresses that could

00:15:25,779 --> 00:15:33,730
do bad things so we also paging for the

00:15:29,319 --> 00:15:34,620
SVM is is managed by the hypervisor but

00:15:33,730 --> 00:15:37,689
the ultra vires

00:15:34,620 --> 00:15:39,310
manages the SVM memory so do you think

00:15:37,689 --> 00:15:41,139
of memory as this side being normal

00:15:39,310 --> 00:15:43,209
memory and this side being secure memory

00:15:41,139 --> 00:15:45,490
the secure virtual machine is over here

00:15:43,209 --> 00:15:47,680
on the right and if the hypervisor wants

00:15:45,490 --> 00:15:49,839
to page it out or reduce its space he

00:15:47,680 --> 00:15:51,910
has to say oh I need that paged the

00:15:49,839 --> 00:15:54,850
ultra vires encrypts that page over here

00:15:51,910 --> 00:15:56,800
moves it over to non secure memory and

00:15:54,850 --> 00:15:59,259
the hypervisor can write it out to the

00:15:56,800 --> 00:16:00,730
paging space when it's it's encrypted

00:15:59,259 --> 00:16:02,980
with the tech with a technique that

00:16:00,730 --> 00:16:05,740
gives us integrity protection as well as

00:16:02,980 --> 00:16:07,449
confidentiality and it's and it's strong

00:16:05,740 --> 00:16:09,699
enough to give us protection against

00:16:07,449 --> 00:16:11,709
replay attacks so the hypervisor can

00:16:09,699 --> 00:16:13,899
pick this thing up and page it back into

00:16:11,709 --> 00:16:15,850
memory but unless it puts it back into

00:16:13,899 --> 00:16:17,860
the exact virtual address space where it

00:16:15,850 --> 00:16:20,920
was paged out from you will get a fault

00:16:17,860 --> 00:16:24,639
and the ultra vires will kill the SVM so

00:16:20,920 --> 00:16:30,750
so we also have to control the debug

00:16:24,639 --> 00:16:35,620
registers C IBRD WRX in D awr etc and

00:16:30,750 --> 00:16:37,809
this new register SMF ctrl sub D SMS

00:16:35,620 --> 00:16:39,459
ctrl is the SMF control register there's

00:16:37,809 --> 00:16:40,750
an E bit that says it's enabled and

00:16:39,459 --> 00:16:43,000
there's a D bit that says that we're

00:16:40,750 --> 00:16:45,819
allowing debug facilities on on secure

00:16:43,000 --> 00:16:48,459
virtual machines when the machine turns

00:16:45,819 --> 00:16:52,569
on it comes up and ultd it comes up with

00:16:48,459 --> 00:16:55,720
SMS ctrl sub e off but running in secure

00:16:52,569 --> 00:17:00,850
mode so host boot and ople boot in

00:16:55,720 --> 00:17:04,839
secure mode and at some point they will

00:17:00,850 --> 00:17:09,220
turn the S bit off if they turn the S

00:17:04,839 --> 00:17:11,199
bit off without turning the SMF enable

00:17:09,220 --> 00:17:13,870
bit on it can never be turned on again

00:17:11,199 --> 00:17:15,730
until the machine is rebooted so what

00:17:13,870 --> 00:17:19,360
happens is that when you get to opal

00:17:15,730 --> 00:17:21,429
opal goes to the ultra vires and if opal

00:17:19,360 --> 00:17:22,540
loads the ultra vires it has the ability

00:17:21,429 --> 00:17:25,750
to turn the

00:17:22,540 --> 00:17:27,850
get off or turn that bit on so it sets a

00:17:25,750 --> 00:17:30,280
bit on and then when it goes back to

00:17:27,850 --> 00:17:31,480
opal so that opal can load the base

00:17:30,280 --> 00:17:34,210
operating system

00:17:31,480 --> 00:17:36,250
it turns the S bit off so opal starts

00:17:34,210 --> 00:17:39,670
its execution in secure mode and ends

00:17:36,250 --> 00:17:41,740
its execution in in normal hypervisor

00:17:39,670 --> 00:17:44,980
mode and then it goes to the booting OS

00:17:41,740 --> 00:17:47,770
and then the only way you can get into

00:17:44,980 --> 00:17:52,780
secure mode is with a ultra call you

00:17:47,770 --> 00:17:54,250
know from then on out and so and and

00:17:52,780 --> 00:17:56,230
that's that's the way we do it so I

00:17:54,250 --> 00:17:58,300
think I've just about covered all the

00:17:56,230 --> 00:18:00,040
hardware now what ROM is gonna do is

00:17:58,300 --> 00:18:04,870
walk you in more detail through some of

00:18:00,040 --> 00:18:05,380
the implications on the firmware thanks

00:18:04,870 --> 00:18:09,910
pindy

00:18:05,380 --> 00:18:12,340
okay so now gardania's talked about the

00:18:09,910 --> 00:18:15,220
PF that is the protected execution

00:18:12,340 --> 00:18:17,790
environment that's a hardware feature so

00:18:15,220 --> 00:18:20,680
that hardware feature is then being

00:18:17,790 --> 00:18:24,280
exploited by software and finally what

00:18:20,680 --> 00:18:25,780
you get is a feature called secure

00:18:24,280 --> 00:18:28,480
virtual machines that's something that

00:18:25,780 --> 00:18:30,370
is consumable right so how are we

00:18:28,480 --> 00:18:31,750
building the secure virtual machines and

00:18:30,370 --> 00:18:33,130
what's the software architecture I'm

00:18:31,750 --> 00:18:35,380
going to talk about that and then I'll

00:18:33,130 --> 00:18:37,570
run through step by step as to how we

00:18:35,380 --> 00:18:40,360
boot up the system what happens at each

00:18:37,570 --> 00:18:42,670
stages and finally how you get a this

00:18:40,360 --> 00:18:45,220
wonderful secure virtual machine right

00:18:42,670 --> 00:18:46,630
so with that being said the software

00:18:45,220 --> 00:18:50,350
architecture looks something like this

00:18:46,630 --> 00:18:52,600
you got the host boot the Opel boot and

00:18:50,350 --> 00:18:55,720
services and now we got into introduce a

00:18:52,600 --> 00:18:58,630
new layer called ultra vires right so

00:18:55,720 --> 00:19:00,490
you got host let's go for go from host

00:18:58,630 --> 00:19:01,900
port that's the host put that is this

00:19:00,490 --> 00:19:04,060
has a little bit of changes have

00:19:01,900 --> 00:19:05,200
happened in the host boot so it

00:19:04,060 --> 00:19:07,810
continues to do whatever

00:19:05,200 --> 00:19:09,370
responsibilities is supposed to do then

00:19:07,810 --> 00:19:11,260
that is the boot time services there are

00:19:09,370 --> 00:19:13,840
some more changes here which is supposed

00:19:11,260 --> 00:19:15,550
to initialize the environment I'll go

00:19:13,840 --> 00:19:18,400
through those in the later slide as well

00:19:15,550 --> 00:19:20,140
what it does there is this new layer

00:19:18,400 --> 00:19:22,330
which we call as the ultra wiser which

00:19:20,140 --> 00:19:25,240
basically helps us enable the secure

00:19:22,330 --> 00:19:27,160
virtual machines right and then the

00:19:25,240 --> 00:19:28,840
hypervisor is a para virtualized

00:19:27,160 --> 00:19:30,100
hypervisor which sits on top of the

00:19:28,840 --> 00:19:31,750
ultra wiser this is the para

00:19:30,100 --> 00:19:35,050
virtualization layer that we have over

00:19:31,750 --> 00:19:35,770
here which essentially uses ultra calls

00:19:35,050 --> 00:19:37,990
to get

00:19:35,770 --> 00:19:39,790
services because some of the features

00:19:37,990 --> 00:19:42,430
sorry some of the resources which were

00:19:39,790 --> 00:19:44,320
earlier available to diaper wiser are no

00:19:42,430 --> 00:19:46,270
more available because it's a secure

00:19:44,320 --> 00:19:48,340
environment and it's only can be

00:19:46,270 --> 00:19:50,800
accessed to an alt reviser so we have to

00:19:48,340 --> 00:19:53,020
paralyze the hypervisor and then there

00:19:50,800 --> 00:19:54,640
is this layer this small component that

00:19:53,020 --> 00:19:57,870
we have added into the hypervisor which

00:19:54,640 --> 00:20:02,260
we call as heterogeneous memory manager

00:19:57,870 --> 00:20:05,320
though the ultra wiser is responsible

00:20:02,260 --> 00:20:07,960
for managing all the secure pages the

00:20:05,320 --> 00:20:09,970
ultra hypervisor still has to be aware

00:20:07,960 --> 00:20:12,340
of the secure pages and be able to

00:20:09,970 --> 00:20:14,440
manage pseudo manage those pages with

00:20:12,340 --> 00:20:16,120
the help of the kernel so and that is

00:20:14,440 --> 00:20:19,240
done the interaction with the hyper

00:20:16,120 --> 00:20:21,490
ultra Weiser he is done by this module

00:20:19,240 --> 00:20:22,830
over here called which we call as UV hmm

00:20:21,490 --> 00:20:27,280
in other words ultra Weiser

00:20:22,830 --> 00:20:29,260
heterogeneous memory manager then we

00:20:27,280 --> 00:20:30,970
have this PRD layer which was there

00:20:29,260 --> 00:20:32,890
earlier which has now been broken into

00:20:30,970 --> 00:20:36,010
two pieces there is a security idea and

00:20:32,890 --> 00:20:38,470
as a PRD and that is because the PRD is

00:20:36,010 --> 00:20:41,080
doing sensitive operations which are

00:20:38,470 --> 00:20:42,970
privileged sensitive as a result we need

00:20:41,080 --> 00:20:44,800
to give some extra privileges to it so

00:20:42,970 --> 00:20:47,830
it plans as a special kind of a secure

00:20:44,800 --> 00:20:50,500
virtual machine and it has access to

00:20:47,830 --> 00:20:52,960
most of the resources that the ultra

00:20:50,500 --> 00:20:54,490
Weiser has so broken that down band then

00:20:52,960 --> 00:20:56,560
there is a protocol between the PRD and

00:20:54,490 --> 00:20:58,120
the secure PID I'll not go details in

00:20:56,560 --> 00:21:00,640
too much detail about it other than

00:20:58,120 --> 00:21:02,620
saying that these are broken and some of

00:21:00,640 --> 00:21:04,390
the pieces of now insecure PRD and some

00:21:02,620 --> 00:21:07,090
of the pieces are in the PRD and there's

00:21:04,390 --> 00:21:08,890
a proxy layer here called the host boot

00:21:07,090 --> 00:21:10,660
runtime which is basically acting as a

00:21:08,890 --> 00:21:13,810
proxy and interacting with the security

00:21:10,660 --> 00:21:16,660
ID other than that there are other

00:21:13,810 --> 00:21:18,610
components within the has garnished and

00:21:16,660 --> 00:21:19,960
mentioned earlier both the secure

00:21:18,610 --> 00:21:22,090
virtual machine as well as the normal

00:21:19,960 --> 00:21:25,930
virtual machine can stay together like

00:21:22,090 --> 00:21:27,430
run on the same machine so we can have a

00:21:25,930 --> 00:21:28,540
normal virtual machine running at the

00:21:27,430 --> 00:21:31,750
same time we can have a secure virtual

00:21:28,540 --> 00:21:33,040
machine running on the same platform the

00:21:31,750 --> 00:21:34,990
changes that have happened in the

00:21:33,040 --> 00:21:36,730
security machine are like so there are

00:21:34,990 --> 00:21:38,170
some changes in the prom minute layer

00:21:36,730 --> 00:21:40,720
which I will talk about it at some other

00:21:38,170 --> 00:21:43,030
point in time and then there are some

00:21:40,720 --> 00:21:45,160
small interactions that go happen where

00:21:43,030 --> 00:21:46,840
we have to share the pages where we

00:21:45,160 --> 00:21:49,640
mentioned about earlier I will talk

00:21:46,840 --> 00:21:51,710
about that later as well so this is

00:21:49,640 --> 00:21:53,470
high level architecture and these are

00:21:51,710 --> 00:21:56,030
the various pieces that I talked about

00:21:53,470 --> 00:21:59,120
one other important aspect that we need

00:21:56,030 --> 00:22:01,640
to know is a virtual machine image by

00:21:59,120 --> 00:22:02,990
itself cannot be become a secure virtual

00:22:01,640 --> 00:22:05,090
machine image we have to do some

00:22:02,990 --> 00:22:06,740
conversion there has to be some

00:22:05,090 --> 00:22:08,360
additional bits that has to be added

00:22:06,740 --> 00:22:10,490
like what Akane mentioned about the

00:22:08,360 --> 00:22:13,220
which is the ESM blob the blob which

00:22:10,490 --> 00:22:15,500
contains the information about the

00:22:13,220 --> 00:22:18,350
integrity and the confidentiality info

00:22:15,500 --> 00:22:19,880
information that needs to be provided to

00:22:18,350 --> 00:22:21,290
the ultra Weiser in order for the

00:22:19,880 --> 00:22:23,240
virtual machine to turn into secure

00:22:21,290 --> 00:22:25,900
virtual machine so there is this tool

00:22:23,240 --> 00:22:29,270
that we have built and will be available

00:22:25,900 --> 00:22:31,220
whenever you want to run a security

00:22:29,270 --> 00:22:33,740
machine this the what this tool does at

00:22:31,220 --> 00:22:35,179
a high level is there is this one the

00:22:33,740 --> 00:22:37,700
first tool that we have is core which we

00:22:35,179 --> 00:22:40,669
call as the ASM generator which

00:22:37,700 --> 00:22:44,270
basically takes the kernel and the init

00:22:40,669 --> 00:22:47,270
30 unit Rama face and and other

00:22:44,270 --> 00:22:50,210
information and and generates some kind

00:22:47,270 --> 00:22:52,429
of a binary blob and then then we have

00:22:50,210 --> 00:22:55,070
another tool called the unit RM FS

00:22:52,429 --> 00:22:57,140
converter which is basically it takes

00:22:55,070 --> 00:23:03,799
the TSM information and injects into an

00:22:57,140 --> 00:23:06,620
init Rd and then also it it adds some

00:23:03,799 --> 00:23:09,049
more you know scripting inside the init

00:23:06,620 --> 00:23:11,390
RD to help it to mount the root

00:23:09,049 --> 00:23:13,940
filesystem when the virtual machine

00:23:11,390 --> 00:23:15,350
turns secure and wants to wants to mount

00:23:13,940 --> 00:23:17,150
the root filesystem at that point in

00:23:15,350 --> 00:23:20,630
time it needs the password that password

00:23:17,150 --> 00:23:22,370
has to be got from the ultra vires so

00:23:20,630 --> 00:23:25,400
for that we need some scripts in the

00:23:22,370 --> 00:23:27,410
init Ram FS to do to do that so we have

00:23:25,400 --> 00:23:31,160
this tool which will put those scripts

00:23:27,410 --> 00:23:34,179
into the into the Anitra FS so that tool

00:23:31,160 --> 00:23:36,950
along with the SM blob generated tool

00:23:34,179 --> 00:23:38,750
used by this higher-level tool which you

00:23:36,950 --> 00:23:41,210
call as the image conversion tool and

00:23:38,750 --> 00:23:43,400
what it does is it takes a normal

00:23:41,210 --> 00:23:45,200
virtual machine image you pass it to

00:23:43,400 --> 00:23:48,740
this tool it will generate a secure

00:23:45,200 --> 00:23:49,970
virtual machine image right and the main

00:23:48,740 --> 00:23:51,049
difference between normal virtual

00:23:49,970 --> 00:23:53,360
machine image and the second virtual

00:23:51,049 --> 00:23:56,179
machine images it has put in the CSM

00:23:53,360 --> 00:23:58,070
blocks inside that inside each of the

00:23:56,179 --> 00:24:00,169
unit IDs for for the corresponding

00:23:58,070 --> 00:24:02,990
kernels so that's the main thing it does

00:24:00,169 --> 00:24:04,940
so it you take a VM image

00:24:02,990 --> 00:24:07,100
you provide it with all the platform

00:24:04,940 --> 00:24:09,110
keys on which all platforms do you want

00:24:07,100 --> 00:24:11,360
to run this virtual machine on right you

00:24:09,110 --> 00:24:12,799
provide that all those keys it takes

00:24:11,360 --> 00:24:14,990
those keys and you then provide it all

00:24:12,799 --> 00:24:16,640
the secrets that you want you can when

00:24:14,990 --> 00:24:18,500
you provide that it will take that and

00:24:16,640 --> 00:24:23,120
finally convert it into a sacred virtual

00:24:18,500 --> 00:24:24,500
machine image so this is this along with

00:24:23,120 --> 00:24:26,559
the other changes that we talked to the

00:24:24,500 --> 00:24:29,929
different software stack will help us

00:24:26,559 --> 00:24:33,169
build build and run a secure virtual

00:24:29,929 --> 00:24:34,899
machine image so having talked

00:24:33,169 --> 00:24:37,760
abstractly about the different pieces

00:24:34,899 --> 00:24:40,010
let me bring them all together and step

00:24:37,760 --> 00:24:42,380
you step by step as to how things what

00:24:40,010 --> 00:24:44,720
happens at what stage so to begin with

00:24:42,380 --> 00:24:47,299
let's see what happens you brought up

00:24:44,720 --> 00:24:49,460
you is let's say you got a brand new new

00:24:47,299 --> 00:24:52,039
machine like let's say with the spoon or

00:24:49,460 --> 00:24:55,220
a Boston MA not a person or with a spoon

00:24:52,039 --> 00:24:57,470
so you brought it up you powered it on

00:24:55,220 --> 00:25:00,380
the first thing that happens is the

00:24:57,470 --> 00:25:02,149
software that gets loaded which is the

00:25:00,380 --> 00:25:04,309
host boot which gets loaded that gets

00:25:02,149 --> 00:25:07,820
loaded in an ultra visor mode and it

00:25:04,309 --> 00:25:11,740
starts running so it starts running in

00:25:07,820 --> 00:25:15,770
an ultra visor mode and then host boot

00:25:11,740 --> 00:25:17,510
initializes the platform it configures

00:25:15,770 --> 00:25:19,340
the memory some part of the memory to

00:25:17,510 --> 00:25:21,200
the secure memory which means the some

00:25:19,340 --> 00:25:23,450
of the address security spaces are now

00:25:21,200 --> 00:25:25,399
backed with memory a separate pool of

00:25:23,450 --> 00:25:27,049
memory and other address space is backed

00:25:25,399 --> 00:25:31,190
by another pool of memory which is a

00:25:27,049 --> 00:25:32,990
normal memory it then initializes all

00:25:31,190 --> 00:25:34,250
the HT data tables which contains the

00:25:32,990 --> 00:25:38,029
information which is generally the case

00:25:34,250 --> 00:25:41,960
with any other normal system as well it

00:25:38,029 --> 00:25:45,080
then loads the host boot runtime that

00:25:41,960 --> 00:25:46,789
piece of that piece of code it loads

00:25:45,080 --> 00:25:49,730
into memory that is again in secure

00:25:46,789 --> 00:25:53,149
memory and loads opal opal is key boot

00:25:49,730 --> 00:25:55,580
and then executes opal right at this

00:25:53,149 --> 00:25:58,279
point in time a host boot has loaded

00:25:55,580 --> 00:25:59,809
opal and you in control - oh sorry host

00:25:58,279 --> 00:26:02,210
boot is loaded opal and given control

00:25:59,809 --> 00:26:06,649
tuples the opal and opal now starts

00:26:02,210 --> 00:26:08,750
running now when opal runs what it does

00:26:06,649 --> 00:26:10,460
is it the normal thing it goes and

00:26:08,750 --> 00:26:11,929
initializes all the platform creates the

00:26:10,460 --> 00:26:13,330
device free by looking at the edge of

00:26:11,929 --> 00:26:15,370
that table and

00:26:13,330 --> 00:26:18,090
and it then goes and interacts with the

00:26:15,370 --> 00:26:20,980
TPM and sets up a password in the TPM

00:26:18,090 --> 00:26:22,450
right and this password is needed later

00:26:20,980 --> 00:26:24,550
I will talk about it later but this

00:26:22,450 --> 00:26:26,650
password is needed by the alt reviser so

00:26:24,550 --> 00:26:33,580
he creates that password with the TPM

00:26:26,650 --> 00:26:36,070
and then loads the ultra wiser and when

00:26:33,580 --> 00:26:37,720
it lost alt reviser along with loading

00:26:36,070 --> 00:26:39,640
delta weather it also provides the

00:26:37,720 --> 00:26:41,590
device tree and the TPM password that he

00:26:39,640 --> 00:26:42,570
just generated it provides said to the

00:26:41,590 --> 00:26:46,590
Altizer

00:26:42,570 --> 00:26:49,750
right and gives control to that wiser

00:26:46,590 --> 00:26:51,310
ultra wiser gets control what it does is

00:26:49,750 --> 00:26:53,500
it is responsible for all the secure

00:26:51,310 --> 00:26:55,030
memory that is there in the system so it

00:26:53,500 --> 00:26:56,650
initialize the secure memory it is

00:26:55,030 --> 00:26:58,600
responsible for all the partition table

00:26:56,650 --> 00:27:00,130
and the page table it's mostly

00:26:58,600 --> 00:27:01,660
responsible for the partition table it

00:27:00,130 --> 00:27:05,140
initializes the partition table then

00:27:01,660 --> 00:27:07,330
sets it up it initializes all the data

00:27:05,140 --> 00:27:09,010
structures to manage the secure memory

00:27:07,330 --> 00:27:11,530
the data structures to manage all the

00:27:09,010 --> 00:27:13,300
secure virtual machines and also sets up

00:27:11,530 --> 00:27:15,310
its data structure so that it can handle

00:27:13,300 --> 00:27:17,820
new alter any ultra calls and hyper

00:27:15,310 --> 00:27:22,540
calls that can come in the future right

00:27:17,820 --> 00:27:24,970
then synthesizes the secure PRD which is

00:27:22,540 --> 00:27:28,030
over here and we did the secure PRD that

00:27:24,970 --> 00:27:31,360
is this host put runtime it then loads

00:27:28,030 --> 00:27:33,640
the but actually the open boot I am

00:27:31,360 --> 00:27:36,370
sorry opal is already loaded it provides

00:27:33,640 --> 00:27:38,920
it ends over the control to opal runtime

00:27:36,370 --> 00:27:40,930
services but at the time when it returns

00:27:38,920 --> 00:27:44,290
control to the opal runtime services it

00:27:40,930 --> 00:27:47,740
would have switched the mode of the CPU

00:27:44,290 --> 00:27:50,650
from ultra vires or more to a hypervisor

00:27:47,740 --> 00:27:52,420
mode which means now onwards the

00:27:50,650 --> 00:27:54,430
software that is opal software which is

00:27:52,420 --> 00:27:58,480
getting controlled cannot access any of

00:27:54,430 --> 00:28:00,220
the sensitive resources on the system if

00:27:58,480 --> 00:28:07,780
it has to access it has to go through an

00:28:00,220 --> 00:28:09,820
ultra cop make sure is it there so at

00:28:07,780 --> 00:28:12,700
this point in time ultra wise it has got

00:28:09,820 --> 00:28:14,950
control sorry host put runtime Services

00:28:12,700 --> 00:28:18,250
has got control host boot runtime

00:28:14,950 --> 00:28:21,850
services then loads the hypervisor which

00:28:18,250 --> 00:28:24,370
is normally the case even with a normal

00:28:21,850 --> 00:28:26,650
system the host boot runtime services

00:28:24,370 --> 00:28:27,190
loads the hypervisor and within the

00:28:26,650 --> 00:28:29,980
hypervisor

00:28:27,190 --> 00:28:31,750
this modules one is the one which helps

00:28:29,980 --> 00:28:33,790
the hypervisor to be paravirtualized and

00:28:31,750 --> 00:28:36,010
the other one is the one which helps the

00:28:33,790 --> 00:28:39,580
hypervisor to manage sudo manage the

00:28:36,010 --> 00:28:43,920
secure memory so the hypervisor has

00:28:39,580 --> 00:28:46,240
booted and then the hypervisor

00:28:43,920 --> 00:28:48,220
initializes it does his normal job which

00:28:46,240 --> 00:28:51,430
is if Isis is normal memory it

00:28:48,220 --> 00:28:53,710
initializes data structures it basically

00:28:51,430 --> 00:28:55,210
manages all the normal memory because it

00:28:53,710 --> 00:28:58,720
is it continues to be responsible for

00:28:55,210 --> 00:29:01,780
normal memory and then it synthesizes a

00:28:58,720 --> 00:29:04,600
PRD and runs the peer host boot runtime

00:29:01,780 --> 00:29:06,790
proxy in that PRD sets up the user space

00:29:04,600 --> 00:29:12,010
and starts loads and executes the init

00:29:06,790 --> 00:29:14,200
process so at this point in time our

00:29:12,010 --> 00:29:16,420
hypervisor is entirely booted a user

00:29:14,200 --> 00:29:18,880
space is running in the hypervisor then

00:29:16,420 --> 00:29:21,700
now comes this part which where we are

00:29:18,880 --> 00:29:24,670
starting this virtual machine so you go

00:29:21,700 --> 00:29:26,650
to the user space at this you would have

00:29:24,670 --> 00:29:28,930
created a secure ocean machine image

00:29:26,650 --> 00:29:30,940
through by using our tools by taking a

00:29:28,930 --> 00:29:32,470
normal virtual machine then image

00:29:30,940 --> 00:29:34,240
running it to our tool and would have

00:29:32,470 --> 00:29:37,450
created secure ocean machine image you

00:29:34,240 --> 00:29:41,650
provide that to qmu so you provide that

00:29:37,450 --> 00:29:45,280
image to kmu and start a KML so key mu

00:29:41,650 --> 00:29:47,380
starts it registers its partition with

00:29:45,280 --> 00:29:50,410
the hypervisor initializes the word I

00:29:47,380 --> 00:29:53,980
would devices load slav into its memory

00:29:50,410 --> 00:29:55,600
and hands over the control to sloth with

00:29:53,980 --> 00:29:58,060
the help of the hypervisor so when the

00:29:55,600 --> 00:29:59,530
control goes back to sloth it would be

00:29:58,060 --> 00:30:01,930
running in a virtual machine were mode

00:29:59,530 --> 00:30:06,280
that is the supervisor mode in this case

00:30:01,930 --> 00:30:08,650
so sloth has got control what's love

00:30:06,280 --> 00:30:11,950
does is it loads the prominent the

00:30:08,650 --> 00:30:13,000
kernel the init Rama face and the SM

00:30:11,950 --> 00:30:15,040
blob which is there in the unit and

00:30:13,000 --> 00:30:20,970
hammerfest it loads all that in it into

00:30:15,040 --> 00:30:24,400
its memory and and hands over control to

00:30:20,970 --> 00:30:26,200
prominent this is where the key piece of

00:30:24,400 --> 00:30:28,660
information happens at this point till

00:30:26,200 --> 00:30:31,120
now the q mu and the virtual machine

00:30:28,660 --> 00:30:33,520
image is all backed by normal pages so

00:30:31,120 --> 00:30:35,350
it is running in normal memory but if

00:30:33,520 --> 00:30:37,750
the

00:30:35,350 --> 00:30:38,950
and at some point in time the virtual

00:30:37,750 --> 00:30:41,050
machine has to convert the secure

00:30:38,950 --> 00:30:43,270
virtual machine image so they secure

00:30:41,050 --> 00:30:45,100
virtual machine so at this point in time

00:30:43,270 --> 00:30:48,370
the prom-prom mean it is the one who is

00:30:45,100 --> 00:30:50,380
responsible for that prom minute the I'm

00:30:48,370 --> 00:30:52,900
all first it initializes data structure

00:30:50,380 --> 00:30:54,970
but the next thing it does is it makes a

00:30:52,900 --> 00:30:57,040
you call it call it calls into the ultra

00:30:54,970 --> 00:30:58,900
vires and request ultra vires please

00:30:57,040 --> 00:31:03,190
switch me over to a secure virtual

00:30:58,900 --> 00:31:05,710
machine mode so an ultra call is made

00:31:03,190 --> 00:31:07,900
and ultra vires takes the ESM

00:31:05,710 --> 00:31:10,570
information that is there in the blob

00:31:07,900 --> 00:31:12,310
that was there in the unitarity it takes

00:31:10,570 --> 00:31:14,290
that information validates whether the

00:31:12,310 --> 00:31:17,050
kernel all the software that has been

00:31:14,290 --> 00:31:18,430
loaded in its memory is all integrity

00:31:17,050 --> 00:31:20,140
protected in the end is the right

00:31:18,430 --> 00:31:23,470
software that needs to be run if

00:31:20,140 --> 00:31:27,520
everything checks out it it what it does

00:31:23,470 --> 00:31:29,080
is it moves all the sorry move all the

00:31:27,520 --> 00:31:33,550
data which is there in the normal memory

00:31:29,080 --> 00:31:35,350
to secure memory and backs though all

00:31:33,550 --> 00:31:37,180
the address space of the security of the

00:31:35,350 --> 00:31:41,340
virtual machine image by secure memory

00:31:37,180 --> 00:31:43,210
and hands all control back to the SVM in

00:31:41,340 --> 00:31:45,400
with the SMS

00:31:43,210 --> 00:31:46,930
yes baton which means this secure

00:31:45,400 --> 00:31:50,260
virtual machine image can now access

00:31:46,930 --> 00:31:52,270
secure memory so it can access secure

00:31:50,260 --> 00:31:54,010
memory but only the memory the pages

00:31:52,270 --> 00:31:55,480
that are there mapped into its page

00:31:54,010 --> 00:31:55,780
table and that is done by the ultra

00:31:55,480 --> 00:31:58,510
vires

00:31:55,780 --> 00:32:00,970
so here is a case where the virtual

00:31:58,510 --> 00:32:02,140
machine has converted from a normal

00:32:00,970 --> 00:32:09,310
virtual machine to a secure virtual

00:32:02,140 --> 00:32:12,160
machine right so if you if you see here

00:32:09,310 --> 00:32:14,710
all the the pages here are backed by a

00:32:12,160 --> 00:32:17,080
secure memory but there is a problem if

00:32:14,710 --> 00:32:20,880
you do that because some of the services

00:32:17,080 --> 00:32:23,320
like I whoa especially word typo and

00:32:20,880 --> 00:32:26,980
virtual private area those are the areas

00:32:23,320 --> 00:32:30,760
that are needed by the hypervisor to

00:32:26,980 --> 00:32:33,910
correctly to correctly service the any

00:32:30,760 --> 00:32:35,860
virtual machine so hypervisor will not

00:32:33,910 --> 00:32:39,460
be able to service this virtual machine

00:32:35,860 --> 00:32:41,710
now onwards because it is it has does

00:32:39,460 --> 00:32:43,660
not have access to the VP area and the

00:32:41,710 --> 00:32:46,630
word typo area and without that the

00:32:43,660 --> 00:32:49,000
hypervisor will not be able to do or any

00:32:46,630 --> 00:32:49,330
of its operations for in on behalf of

00:32:49,000 --> 00:32:52,630
the

00:32:49,330 --> 00:32:54,790
virtual machine so we have to make sure

00:32:52,630 --> 00:32:57,100
that some of its address space within

00:32:54,790 --> 00:33:01,270
the virtual machine can be accessed by

00:32:57,100 --> 00:33:03,400
the hypervisor and that is done by the

00:33:01,270 --> 00:33:05,410
next step over here the kernel as soon

00:33:03,400 --> 00:33:07,240
as it gets control after initializing

00:33:05,410 --> 00:33:10,570
its data structure the first thing it

00:33:07,240 --> 00:33:13,330
does is it shares the the VP a and the

00:33:10,570 --> 00:33:16,000
world typo area with the hypervisor with

00:33:13,330 --> 00:33:18,640
using an ultra call it calls into the

00:33:16,000 --> 00:33:21,610
ultra vires and asked reviser to back

00:33:18,640 --> 00:33:24,220
those pages which were earlier backed by

00:33:21,610 --> 00:33:25,870
secure pages with normal pages and what

00:33:24,220 --> 00:33:28,060
the ultra wiser does is interact with

00:33:25,870 --> 00:33:31,150
the hypervisor get some normal pages

00:33:28,060 --> 00:33:33,060
from the hypervisor and and replaces

00:33:31,150 --> 00:33:36,100
those acute pages which is normal pages

00:33:33,060 --> 00:33:39,340
so by doing so what happens is now the

00:33:36,100 --> 00:33:40,750
hypervisor can access some of the data

00:33:39,340 --> 00:33:42,550
that is there in the second virtual

00:33:40,750 --> 00:33:46,570
machine image and hence be able to

00:33:42,550 --> 00:33:48,880
service the service the the i/o requests

00:33:46,570 --> 00:33:50,440
as well as the scheduling and those

00:33:48,880 --> 00:33:52,630
kinds of information that diaper wiser

00:33:50,440 --> 00:33:53,980
needs using the it can help it can use

00:33:52,630 --> 00:33:56,410
that to help the secure virtual machine

00:33:53,980 --> 00:33:58,540
the hypervisor does not have access to

00:33:56,410 --> 00:34:00,340
anybody anything else other than the

00:33:58,540 --> 00:34:03,010
areas that the secure virtual machine

00:34:00,340 --> 00:34:08,080
images kernel has explicitly shared with

00:34:03,010 --> 00:34:11,170
the hypervisor so having done that we we

00:34:08,080 --> 00:34:13,120
have reached a stage where where the

00:34:11,170 --> 00:34:15,780
pages are shared everything looks good

00:34:13,120 --> 00:34:18,460
and now all its it's a matter of

00:34:15,780 --> 00:34:20,530
mounting the the any trauma facility

00:34:18,460 --> 00:34:22,330
gets control and anytime FS as I told

00:34:20,530 --> 00:34:25,120
you earlier it puts its own scripts

00:34:22,330 --> 00:34:26,470
inside the tools the SVM build tools

00:34:25,120 --> 00:34:27,160
have put some scripts inside the unit

00:34:26,470 --> 00:34:29,440
Ramirez

00:34:27,160 --> 00:34:32,140
those tools those scripts that are there

00:34:29,440 --> 00:34:33,580
in a trimer fest are executing and one

00:34:32,140 --> 00:34:34,750
of the first thing it does is it goes

00:34:33,580 --> 00:34:36,850
and makes an ultra call to the

00:34:34,750 --> 00:34:39,310
ultraviolet and ask that provider for

00:34:36,850 --> 00:34:41,920
the secrets that are there in the ESM so

00:34:39,310 --> 00:34:43,990
the in the it takes that secret and one

00:34:41,920 --> 00:34:44,800
of the secret is the passphrase of the

00:34:43,990 --> 00:34:47,290
root filesystem

00:34:44,800 --> 00:34:49,230
so using that root filesystem passphrase

00:34:47,290 --> 00:34:52,420
it is able to mount the root filesystem

00:34:49,230 --> 00:34:54,250
right so at this point in time it votes

00:34:52,420 --> 00:34:56,560
the root filesystem and then onwards the

00:34:54,250 --> 00:34:58,090
rest of the thing continues and it looks

00:34:56,560 --> 00:35:00,190
as if it's a normal virtual machine but

00:34:58,090 --> 00:35:01,150
with deep inside it it's a secure

00:35:00,190 --> 00:35:03,670
virtual machine is

00:35:01,150 --> 00:35:06,490
and nobody else in the system no

00:35:03,670 --> 00:35:08,740
hypervisor not no PRD or nobody else can

00:35:06,490 --> 00:35:11,079
can access the security of machines

00:35:08,740 --> 00:35:12,519
image it is entirely protected the only

00:35:11,079 --> 00:35:13,869
thing that can access this secure

00:35:12,519 --> 00:35:15,940
virtual machines pages is the ultra

00:35:13,869 --> 00:35:17,499
visor given that ultra is it is a very

00:35:15,940 --> 00:35:23,440
small piece of code with a very small

00:35:17,499 --> 00:35:26,109
layer so the there isn't there is hardly

00:35:23,440 --> 00:35:28,539
well it is well protected from the rest

00:35:26,109 --> 00:35:31,329
of the software which is not trusted on

00:35:28,539 --> 00:35:33,549
the system so at this point in time we

00:35:31,329 --> 00:35:36,160
have a running secure virtual machine

00:35:33,549 --> 00:35:39,400
and that brings us to the last slide

00:35:36,160 --> 00:35:42,430
over here so this is the summary summary

00:35:39,400 --> 00:35:45,309
is protected was a PF protected

00:35:42,430 --> 00:35:47,319
execution facility allows us to entrust

00:35:45,309 --> 00:35:51,069
at execution and armitron power and open

00:35:47,319 --> 00:35:53,410
power systems it enables this this

00:35:51,069 --> 00:35:56,460
Hardware sorry the CPU techni this

00:35:53,410 --> 00:36:00,309
feature in the CPU helps us enable SEC

00:35:56,460 --> 00:36:02,410
secure virtual machines normal virtual

00:36:00,309 --> 00:36:04,569
machines can be used and can be

00:36:02,410 --> 00:36:09,009
converted to be made secure virtual

00:36:04,569 --> 00:36:11,170
machines the entire ecosystem is open

00:36:09,009 --> 00:36:12,579
source will be open sourcing this ultra

00:36:11,170 --> 00:36:14,319
wiser firmware the build tools

00:36:12,579 --> 00:36:16,599
everything so you can build it by

00:36:14,319 --> 00:36:19,960
yourself it will be available in git

00:36:16,599 --> 00:36:22,539
repository and before we GA the system

00:36:19,960 --> 00:36:26,769
we will make a tech preview available so

00:36:22,539 --> 00:36:29,440
that people can the community the open

00:36:26,769 --> 00:36:32,849
source community can try it out and help

00:36:29,440 --> 00:36:37,869
us build a more strong and a secure

00:36:32,849 --> 00:36:41,519
technology here so with that I am

00:36:37,869 --> 00:36:41,519
opening up for questions

00:36:42,090 --> 00:36:45,219
[Music]

00:36:46,069 --> 00:36:53,400
three CPUs oh sorry about that so this

00:36:50,910 --> 00:36:55,980
new feature requires completely like new

00:36:53,400 --> 00:37:02,880
revision of the CPU did he point three

00:36:55,980 --> 00:37:05,579
right yeah

00:37:02,880 --> 00:37:07,140
DD 2.3 is the first version of the

00:37:05,579 --> 00:37:09,990
hardware that has everything working

00:37:07,140 --> 00:37:11,609
properly it was available in our earlier

00:37:09,990 --> 00:37:12,990
versions which we used of course to

00:37:11,609 --> 00:37:15,930
figure out whether it was working

00:37:12,990 --> 00:37:17,750
properly but DD 2.3 will work okay I

00:37:15,930 --> 00:37:20,760
think one more question

00:37:17,750 --> 00:37:25,079
is it impossible to pass through PCI

00:37:20,760 --> 00:37:26,940
devices to a secure virtual machine PCI

00:37:25,079 --> 00:37:33,329
device pastor is not supported at this

00:37:26,940 --> 00:37:38,809
time thank you so sorry did you say that

00:37:33,329 --> 00:37:45,839
this is already will be in some power 9

00:37:38,809 --> 00:37:48,299
so the new they're the newest the newest

00:37:45,839 --> 00:37:54,119
power 9 chip I don't think it's for sale

00:37:48,299 --> 00:37:56,910
yeah okay I just yeah yeah that's the

00:37:54,119 --> 00:38:01,380
internal name of the chip you know hos

00:37:56,910 --> 00:38:02,819
DD 1 part 1 0 DD 2 dot okay so one of

00:38:01,380 --> 00:38:05,760
the generations you know that it's

00:38:02,819 --> 00:38:07,319
sometime this year I guess those chips

00:38:05,760 --> 00:38:15,960
are gonna start coming out in in

00:38:07,319 --> 00:38:18,990
machines right right so if you have an

00:38:15,960 --> 00:38:20,430
AC 922 you have an enabled machine he

00:38:18,990 --> 00:38:24,839
probably knows his schedule better than

00:38:20,430 --> 00:38:25,410
I do but it did they drift into other

00:38:24,839 --> 00:38:28,339
machines

00:38:25,410 --> 00:38:28,339
eventually

00:38:32,970 --> 00:38:42,060
well he can't because he doesn't know

00:38:35,220 --> 00:38:44,520
how to turn it on yes so the basic point

00:38:42,060 --> 00:38:45,930
is as as he said when we as the systems

00:38:44,520 --> 00:38:48,750
reduce later this year they'll have

00:38:45,930 --> 00:38:50,760
their chips on them and when the tech

00:38:48,750 --> 00:38:53,010
preview is announced you'll be able to

00:38:50,760 --> 00:38:54,839
get the firmware that will enable you to

00:38:53,010 --> 00:38:57,060
take one of those systems if you already

00:38:54,839 --> 00:39:01,410
have one and begin experimenting with

00:38:57,060 --> 00:39:05,010
this okay another question is it

00:39:01,410 --> 00:39:08,819
something somehow which is already

00:39:05,010 --> 00:39:12,390
exists in the in the power systems with

00:39:08,819 --> 00:39:16,560
AIX which is adopted to the open power

00:39:12,390 --> 00:39:19,589
or is it completely right now PE PF is

00:39:16,560 --> 00:39:23,760
in the hardware but it is not being used

00:39:19,589 --> 00:39:26,910
by power VM at this point in time if you

00:39:23,760 --> 00:39:30,450
happen to have an AIX image that ran

00:39:26,910 --> 00:39:33,630
under Linux KVM you could convert it but

00:39:30,450 --> 00:39:37,490
it is not it's only available its own

00:39:33,630 --> 00:39:41,520
the first the target for this is is

00:39:37,490 --> 00:39:44,099
Linux Linux running native on the system

00:39:41,520 --> 00:39:47,160
and the virtual machine is running under

00:39:44,099 --> 00:39:49,079
Linux Linux running under power VM is

00:39:47,160 --> 00:39:51,569
not protected by this at this time

00:39:49,079 --> 00:39:55,130
that's not the first the first out

00:39:51,569 --> 00:40:00,510
target is our open power and our power

00:39:55,130 --> 00:40:02,760
linux customers KVM hypervisor okay will

00:40:00,510 --> 00:40:06,660
it require any changes in the key VM

00:40:02,760 --> 00:40:09,300
itself there are a few changes in KVM

00:40:06,660 --> 00:40:12,540
because it is the hypervisor you have to

00:40:09,300 --> 00:40:14,310
it has to be para virtualized and many

00:40:12,540 --> 00:40:20,579
of those patches are already submitted

00:40:14,310 --> 00:40:23,550
and going through the community we have

00:40:20,579 --> 00:40:25,109
already submitted the patches for KVM so

00:40:23,550 --> 00:40:28,740
those are in the process of getting

00:40:25,109 --> 00:40:30,660
accepted so the two high level things

00:40:28,740 --> 00:40:32,550
that are needed in KVM is para

00:40:30,660 --> 00:40:33,960
virtualized KVM in the sense there is

00:40:32,550 --> 00:40:36,180
just some set of patches which will help

00:40:33,960 --> 00:40:37,940
para virtualized the KVM and there's

00:40:36,180 --> 00:40:41,670
another set of patch which will help you

00:40:37,940 --> 00:40:44,250
we help the KVM to manage secure memory

00:40:41,670 --> 00:40:46,260
pseudo secure memory right so those two

00:40:44,250 --> 00:40:47,249
set of patches will enable the KVM to

00:40:46,260 --> 00:40:49,380
run

00:40:47,249 --> 00:40:52,799
I'll take you torture machine okay when

00:40:49,380 --> 00:40:55,650
we say paravai paravirtualized KVM what

00:40:52,799 --> 00:40:57,359
we really mean is enable KVM to

00:40:55,650 --> 00:41:00,390
manipulate the resources that were

00:40:57,359 --> 00:41:02,490
removed from it's privileged so it'll

00:41:00,390 --> 00:41:04,680
have to make altar calls and it's not

00:41:02,490 --> 00:41:06,900
all of KVM it's really it's really just

00:41:04,680 --> 00:41:10,529
a small set of things that it has to now

00:41:06,900 --> 00:41:13,529
talk to us about of course so when you

00:41:10,529 --> 00:41:16,079
say that the secure memory is confused

00:41:13,529 --> 00:41:19,829
of secure memory is configurable right

00:41:16,079 --> 00:41:22,079
is it is it dynamic or you know it's not

00:41:19,829 --> 00:41:24,749
dynamically configurable in the first

00:41:22,079 --> 00:41:26,609
release when you get it if you if your

00:41:24,749 --> 00:41:28,920
machine is enabled with the microcode if

00:41:26,609 --> 00:41:31,289
you brought up a power machine fresh out

00:41:28,920 --> 00:41:32,730
of the box you know the first time you

00:41:31,289 --> 00:41:34,710
boot it up you end up booting to the

00:41:32,730 --> 00:41:36,539
petty boot menu and you set some

00:41:34,710 --> 00:41:39,180
configuration parameters and stuff like

00:41:36,539 --> 00:41:40,529
that and then you reboot it again and

00:41:39,180 --> 00:41:42,839
then it comes all the way up that's how

00:41:40,529 --> 00:41:44,509
power works well what we've done is

00:41:42,839 --> 00:41:47,940
we've added to that petty boot

00:41:44,509 --> 00:41:51,539
configuration phase us wait some extra

00:41:47,940 --> 00:41:54,359
menus where you say I want I want PFR I

00:41:51,539 --> 00:41:56,910
don't want it if I want PEF this much of

00:41:54,359 --> 00:41:58,950
my memory I want to be secured this much

00:41:56,910 --> 00:42:01,109
and the rest of it is non secure and

00:41:58,950 --> 00:42:02,940
there's a minimum amount you have to set

00:42:01,109 --> 00:42:04,769
and we tell you that you have to set at

00:42:02,940 --> 00:42:09,869
least this much or more to be secured

00:42:04,769 --> 00:42:12,089
okay so the this thing can still be

00:42:09,869 --> 00:42:15,509
working in kind of a legacy mode without

00:42:12,089 --> 00:42:19,380
yeah once the Machine the hardware runs

00:42:15,509 --> 00:42:22,380
without PF otherwise power VM wouldn't

00:42:19,380 --> 00:42:24,299
work and iSeries wouldn't work all of

00:42:22,380 --> 00:42:26,369
which run on the same platform they all

00:42:24,299 --> 00:42:28,589
run on the same hardware they run on DD

00:42:26,369 --> 00:42:31,499
2.3 with no changes it doesn't impact

00:42:28,589 --> 00:42:34,259
them they're running on DD 2.3 today and

00:42:31,499 --> 00:42:40,950
DD 2.3 is enabled but what's going on is

00:42:34,259 --> 00:42:42,630
the bits off okay right the software

00:42:40,950 --> 00:42:44,400
stack will everything will look the same

00:42:42,630 --> 00:42:45,539
only thing additional thing is you'll be

00:42:44,400 --> 00:42:46,980
able to run a security machine

00:42:45,539 --> 00:42:48,809
everything else if you are there you had

00:42:46,980 --> 00:42:50,819
normal virtual machines they'll continue

00:42:48,809 --> 00:42:52,559
to run they'll continue to work but if

00:42:50,819 --> 00:42:55,859
you want to run security of machines yes

00:42:52,559 --> 00:42:57,960
you can do that if PNM if P EF is not

00:42:55,859 --> 00:42:58,970
enabled on the machine there is no

00:42:57,960 --> 00:43:01,910
impact

00:42:58,970 --> 00:43:05,420
performance whatsoever okay and what

00:43:01,910 --> 00:43:08,870
what's the impact if it is enabled the

00:43:05,420 --> 00:43:11,690
overhead as I said as I as I said as I

00:43:08,870 --> 00:43:13,910
said in my talk when I thought about the

00:43:11,690 --> 00:43:16,370
hardware changes to normal virtual

00:43:13,910 --> 00:43:18,290
machines it's less than two to one half

00:43:16,370 --> 00:43:20,060
to two and a half percent the last

00:43:18,290 --> 00:43:22,520
estimate we did was about half a percent

00:43:20,060 --> 00:43:26,020
on startup and zero and unsteady state

00:43:22,520 --> 00:43:28,490
to secure virtual machines Oh

00:43:26,020 --> 00:43:31,970
what was our last estimate it's less

00:43:28,490 --> 00:43:35,030
than 10 percent okay and that's going to

00:43:31,970 --> 00:43:37,910
depend on what the secure virtual

00:43:35,030 --> 00:43:39,890
machine does yes because because some

00:43:37,910 --> 00:43:41,990
things it does require more more

00:43:39,890 --> 00:43:44,510
intervention by the by the ultra violet

00:43:41,990 --> 00:43:48,430
and some things it does require less so

00:43:44,510 --> 00:43:48,430
it's going to depend on your execution

00:43:48,820 --> 00:43:55,040
if it is CPU bound I don't see much

00:43:52,480 --> 00:43:56,600
performance set if it is IO born you

00:43:55,040 --> 00:43:58,000
will see some performance because we'll

00:43:56,600 --> 00:44:00,770
have to do some bounds buffering

00:43:58,000 --> 00:44:02,090
otherwise if we're the CPU bound I don't

00:44:00,770 --> 00:44:04,670
think you'll see much of a performance

00:44:02,090 --> 00:44:07,130
Empire it's one other thing in the first

00:44:04,670 --> 00:44:09,340
release we're not enabling over commit

00:44:07,130 --> 00:44:12,350
of SVM memory mm-hm

00:44:09,340 --> 00:44:14,210
you know we're just not we're you don't

00:44:12,350 --> 00:44:16,970
have to have over commit for the SVM to

00:44:14,210 --> 00:44:18,740
work so we're not enabling that so what

00:44:16,970 --> 00:44:21,170
Ram is saying is exactly correct if your

00:44:18,740 --> 00:44:23,870
CPU bound you'll see nothing if your are

00:44:21,170 --> 00:44:25,820
if you do a lot of Ohio that's virtual

00:44:23,870 --> 00:44:28,370
IO through ver diode to disk or whatever

00:44:25,820 --> 00:44:30,290
network whatever that's where we have to

00:44:28,370 --> 00:44:32,060
do the bounce buffering to protect you -

00:44:30,290 --> 00:44:33,860
I didn't say it during the main

00:44:32,060 --> 00:44:36,290
presentation but basically what happens

00:44:33,860 --> 00:44:38,840
is when an interrupt comes in it goes to

00:44:36,290 --> 00:44:41,300
the alter of Iser what the alt revisor

00:44:38,840 --> 00:44:43,040
does is it takes it takes the state of

00:44:41,300 --> 00:44:45,530
the secure virtual machine and it shoves

00:44:43,040 --> 00:44:48,170
it away it generates some arbitrary

00:44:45,530 --> 00:44:49,520
state and sends the interrupt and

00:44:48,170 --> 00:44:52,100
reflects the interrupt to the hypervisor

00:44:49,520 --> 00:44:53,660
if it's an asynchronous interrupt

00:44:52,100 --> 00:44:56,090
meaning it has nothing to do with the

00:44:53,660 --> 00:44:58,160
running virtual machine then the

00:44:56,090 --> 00:44:59,870
hypervisor gets it examines the

00:44:58,160 --> 00:45:01,280
interrupts does this job and reflects it

00:44:59,870 --> 00:45:03,770
to the correct virtual machine and

00:45:01,280 --> 00:45:05,480
eventually however the interrupt could

00:45:03,770 --> 00:45:07,820
be what the interrupt could have been

00:45:05,480 --> 00:45:11,510
caused by an H call and s assist call

00:45:07,820 --> 00:45:11,990
level 2 by the running secure virtual

00:45:11,510 --> 00:45:14,210
machine

00:45:11,990 --> 00:45:17,600
that's when the secure virtual machine

00:45:14,210 --> 00:45:20,900
wants to request the hypervisor do some

00:45:17,600 --> 00:45:23,540
work for it all of those will reflect it

00:45:20,900 --> 00:45:26,630
to the hypervisor except for get random

00:45:23,540 --> 00:45:28,400
number for obvious reason you cannot let

00:45:26,630 --> 00:45:31,790
something you don't trust control what

00:45:28,400 --> 00:45:34,760
you use as a random number but what

00:45:31,790 --> 00:45:37,580
happens on a Cisco level 2 is it comes

00:45:34,760 --> 00:45:39,710
into the ultraviolent erupt the ultra

00:45:37,580 --> 00:45:42,830
takes the state shoves it away like

00:45:39,710 --> 00:45:44,810
every other interrupt but it generates

00:45:42,830 --> 00:45:47,510
arbitrary state for the hypervisor

00:45:44,810 --> 00:45:49,810
except all of the parameters required

00:45:47,510 --> 00:45:53,330
for the sis call are passed without

00:45:49,810 --> 00:45:54,920
changing them and it's reflected to the

00:45:53,330 --> 00:45:57,050
hypervisor because if the hypervisor

00:45:54,920 --> 00:45:59,810
didn't get them it couldn't do the

00:45:57,050 --> 00:46:01,520
request and then on on the way back it

00:45:59,810 --> 00:46:03,650
passes the results into the secure

00:46:01,520 --> 00:46:06,080
virtual me virtual machine so what we're

00:46:03,650 --> 00:46:09,020
doing is we're eliminating the side

00:46:06,080 --> 00:46:11,600
channels that can be caused but that can

00:46:09,020 --> 00:46:13,280
appear in because of requesting services

00:46:11,600 --> 00:46:15,380
from the hypervisor and leaving

00:46:13,280 --> 00:46:17,390
arbitrary state in all of the other

00:46:15,380 --> 00:46:26,390
registers and in the power architecture

00:46:17,390 --> 00:46:27,859
that are not used for the Cisco hey guys

00:46:26,390 --> 00:46:29,780
thanks for the presentation I was

00:46:27,859 --> 00:46:33,760
curious about something I believe Bernie

00:46:29,780 --> 00:46:35,930
said is it possible for you to have

00:46:33,760 --> 00:46:40,010
paging between secure and non-secure

00:46:35,930 --> 00:46:42,080
memory is that what you ok ok yeah so

00:46:40,010 --> 00:46:43,910
basically what we did is there's an

00:46:42,080 --> 00:46:45,590
ultra call that a secure virtual machine

00:46:43,910 --> 00:46:47,930
says that I want to have a shared page

00:46:45,590 --> 00:46:49,970
with the hypervisor and what he's

00:46:47,930 --> 00:46:52,400
telling the ultra vires get some

00:46:49,970 --> 00:46:55,609
hypervisor memory and stick it in my

00:46:52,400 --> 00:46:57,650
page table at this address what it is is

00:46:55,609 --> 00:47:00,770
a secure virtual machine can reference

00:46:57,650 --> 00:47:03,140
both secure memory and normal memory but

00:47:00,770 --> 00:47:05,840
only the memory that's in its page table

00:47:03,140 --> 00:47:08,570
it can't reference arbitrarily normal

00:47:05,840 --> 00:47:10,700
memory like one of the other

00:47:08,570 --> 00:47:12,740
architectures SGX you know that when

00:47:10,700 --> 00:47:16,490
you're running a secure process and in

00:47:12,740 --> 00:47:18,890
SGX you have access to all the memory in

00:47:16,490 --> 00:47:21,320
the machine well we didn't do that for

00:47:18,890 --> 00:47:23,720
obvious reasons you only get access to

00:47:21,320 --> 00:47:25,760
the memory that we let you have that's

00:47:23,720 --> 00:47:27,610
why that's why what we have

00:47:25,760 --> 00:47:30,680
in our architecture we have what we call

00:47:27,610 --> 00:47:32,120
bi-directional protection we protect the

00:47:30,680 --> 00:47:34,130
secure virtual machines from the

00:47:32,120 --> 00:47:37,340
hypervisor and normal virtual machines

00:47:34,130 --> 00:47:38,990
and other secure virtual machines and we

00:47:37,340 --> 00:47:40,820
protect everybody from everybody this

00:47:38,990 --> 00:47:43,190
little alt revisor thing which is not

00:47:40,820 --> 00:47:46,070
very large it's not tiny but it's not

00:47:43,190 --> 00:47:48,260
very large it protects the hypervisor

00:47:46,070 --> 00:47:49,760
from the secure virtual machines and it

00:47:48,260 --> 00:47:51,590
protects the normal virtual machines

00:47:49,760 --> 00:47:53,720
from the secure virtual machines because

00:47:51,590 --> 00:47:58,070
their memory is not in the address space

00:47:53,720 --> 00:47:59,930
of the SVM but you know the thing was

00:47:58,070 --> 00:48:01,880
that close you wanted to another page in

00:47:59,930 --> 00:48:05,450
and page out right the paging I was all

00:48:01,880 --> 00:48:10,430
about if you have limited space in the

00:48:05,450 --> 00:48:13,130
secure memory resources right you need

00:48:10,430 --> 00:48:15,650
you need to pay to swap out right memory

00:48:13,130 --> 00:48:18,320
so it gets encrypted by the by the

00:48:15,650 --> 00:48:19,640
processor itself is that it yes no it

00:48:18,320 --> 00:48:21,530
doesn't get entered by the processor

00:48:19,640 --> 00:48:22,730
Ultra wiser does the encryption and puts

00:48:21,530 --> 00:48:25,850
it in normalizer

00:48:22,730 --> 00:48:28,640
look at the hypervisor as our swap

00:48:25,850 --> 00:48:30,920
device for the secure memory hypervisors

00:48:28,640 --> 00:48:33,260
memory is our swap device we whenever we

00:48:30,920 --> 00:48:36,140
are low on memory secure memory and push

00:48:33,260 --> 00:48:38,300
the secure page to hypervisor itself

00:48:36,140 --> 00:48:40,250
when it's insecure memory it's not

00:48:38,300 --> 00:48:41,540
encrypted right I mean it's it's in

00:48:40,250 --> 00:48:43,700
secular memory is not encrypted yeah

00:48:41,540 --> 00:48:46,610
it's only a question of catching up the

00:48:43,700 --> 00:48:48,650
page faults I mean yes and yes allowing

00:48:46,610 --> 00:48:50,990
the secure memory to live in its own

00:48:48,650 --> 00:48:53,120
space but I mean you need that space for

00:48:50,990 --> 00:48:56,660
for any other reason you can swap out to

00:48:53,120 --> 00:48:59,960
normal correct memory and encrypt it on

00:48:56,660 --> 00:49:02,510
its way in and out you know the latency

00:48:59,960 --> 00:49:04,760
numbers for for doing this thing we have

00:49:02,510 --> 00:49:07,100
not got those numbers yet but to begin

00:49:04,760 --> 00:49:08,720
with in the initial first release I had

00:49:07,100 --> 00:49:10,970
it when one of the slides will not be

00:49:08,720 --> 00:49:12,590
heavier doing over commit secure memory

00:49:10,970 --> 00:49:15,170
were coming in the first initial release

00:49:12,590 --> 00:49:16,910
but soon we'll be doing secure or memory

00:49:15,170 --> 00:49:19,640
or commit which means you can have as

00:49:16,910 --> 00:49:20,840
many as VMs and that can be shortage of

00:49:19,640 --> 00:49:23,180
secure memory in which case we'll have

00:49:20,840 --> 00:49:24,950
to page out into normal memory but for

00:49:23,180 --> 00:49:27,260
now since you are not allowing secure

00:49:24,950 --> 00:49:28,760
over commit the paging page out is not

00:49:27,260 --> 00:49:31,400
happening and we don't know the numbers

00:49:28,760 --> 00:49:34,220
yet okay okay I can't tell you that what

00:49:31,400 --> 00:49:35,940
we're doing is we're doing a ESI APM if

00:49:34,220 --> 00:49:40,410
you're familiar with cryptography

00:49:35,940 --> 00:49:43,619
and Rara es our AES encryption algorithm

00:49:40,410 --> 00:49:45,450
uses the power a AES instruction so you

00:49:43,619 --> 00:49:49,049
don't get much faster than that it's

00:49:45,450 --> 00:49:50,640
really really fast i APM is at integrity

00:49:49,049 --> 00:49:53,400
aware paralyzed double mode it's a

00:49:50,640 --> 00:49:55,859
motivate a es that was published about

00:49:53,400 --> 00:49:57,839
15 years ago it's been well checked out

00:49:55,859 --> 00:49:59,970
by the security community nobody's found

00:49:57,839 --> 00:50:01,619
any holes in it what it does is it gives

00:49:59,970 --> 00:50:04,530
you your integrity protection and your

00:50:01,619 --> 00:50:07,650
encryption decryption in parallel thank

00:50:04,530 --> 00:50:09,150
you excellent I have a lot more

00:50:07,650 --> 00:50:14,609
questions but probably the last one

00:50:09,150 --> 00:50:17,069
because we are over reaching time so is

00:50:14,609 --> 00:50:21,329
there any use in in that protection

00:50:17,069 --> 00:50:24,230
facility for a host without KVM like

00:50:21,329 --> 00:50:28,140
with a single solid operating system I

00:50:24,230 --> 00:50:30,809
guess what you're asking me is can I can

00:50:28,140 --> 00:50:34,250
I use this if you're not running KVM the

00:50:30,809 --> 00:50:39,569
answer is that when you run when you run

00:50:34,250 --> 00:50:41,839
Linux native on power you run the

00:50:39,569 --> 00:50:44,309
operating system in hypervisor mode

00:50:41,839 --> 00:50:46,950
because if you don't run the operating

00:50:44,309 --> 00:50:51,329
system in hypervisor mode you cannot you

00:50:46,950 --> 00:50:53,309
cannot access you cannot you cannot

00:50:51,329 --> 00:50:58,049
touch the facilities that are hypervisor

00:50:53,309 --> 00:51:00,450
privilege and so that is not something

00:50:58,049 --> 00:51:02,190
that we're going to enable at this point

00:51:00,450 --> 00:51:06,329
in time but at some point down the road

00:51:02,190 --> 00:51:08,430
we probably will it work it will work if

00:51:06,329 --> 00:51:11,039
you have an ultra riser and if you don't

00:51:08,430 --> 00:51:13,020
want to run KVM you can still run a KVM

00:51:11,039 --> 00:51:14,760
kernel which is paravirtualized cut on

00:51:13,020 --> 00:51:16,410
support because the kernel will be

00:51:14,760 --> 00:51:19,230
running in hypervisor mode you cannot

00:51:16,410 --> 00:51:21,510
access security in secure facilities

00:51:19,230 --> 00:51:22,829
right so as it is that it will have to

00:51:21,510 --> 00:51:24,900
make ultra calls into the ultra vires

00:51:22,829 --> 00:51:27,960
you know what you can run yeah no the

00:51:24,900 --> 00:51:29,730
question was not can I or I can't

00:51:27,960 --> 00:51:32,130
because well I understand I can because

00:51:29,730 --> 00:51:34,680
the KVM is the easy is Linus it's a

00:51:32,130 --> 00:51:40,440
Korean system I mean is there you use in

00:51:34,680 --> 00:51:42,960
that there's a debate on that protection

00:51:40,440 --> 00:51:45,869
protection from this kind of specter and

00:51:42,960 --> 00:51:47,420
well it happens though it it turns out

00:51:45,869 --> 00:51:51,540
that

00:51:47,420 --> 00:51:53,790
the issue is what do you think is the

00:51:51,540 --> 00:51:57,240
future of containers in cloud

00:51:53,790 --> 00:51:59,700
infrastructure right now we do a lot of

00:51:57,240 --> 00:52:03,060
containers inside of virtual machines in

00:51:59,700 --> 00:52:04,860
cloud infrastructure but but Linux

00:52:03,060 --> 00:52:06,720
itself as a native operating system

00:52:04,860 --> 00:52:08,490
ignore what we just talked about Linux

00:52:06,720 --> 00:52:11,130
as a native operating system supports

00:52:08,490 --> 00:52:15,420
containers natively so you can run Linux

00:52:11,130 --> 00:52:17,520
bare metal on on a power platform with

00:52:15,420 --> 00:52:20,730
containers with OpenStack with all that

00:52:17,520 --> 00:52:24,960
stuff and it works just fine and so the

00:52:20,730 --> 00:52:27,090
the debate is what is and we don't know

00:52:24,960 --> 00:52:30,750
so we have to prepare for all possible

00:52:27,090 --> 00:52:33,240
futures the debate is is is the future

00:52:30,750 --> 00:52:35,760
of cloud infrastructure going to always

00:52:33,240 --> 00:52:38,580
rely on virtual machines or is it gonna

00:52:35,760 --> 00:52:40,320
rely on containers and that's the debate

00:52:38,580 --> 00:52:43,050
that's going on in the community as a

00:52:40,320 --> 00:52:46,770
whole and that that debate that affects

00:52:43,050 --> 00:52:49,080
how we look at our hardware that as of

00:52:46,770 --> 00:52:51,000
today as of today will support secure

00:52:49,080 --> 00:52:52,080
containers but the secure containers

00:52:51,000 --> 00:52:54,600
will be running it in secure virtual

00:52:52,080 --> 00:52:57,180
machines and there was a talk supposed

00:52:54,600 --> 00:52:59,070
to be happening next but due to some

00:52:57,180 --> 00:53:02,310
reason the presenter could not come over

00:52:59,070 --> 00:53:03,930
but finally this thing will be exposed

00:53:02,310 --> 00:53:05,460
the entire technology will be exposed as

00:53:03,930 --> 00:53:06,810
secure containers and those secure

00:53:05,460 --> 00:53:09,000
containers will run in the insecure

00:53:06,810 --> 00:53:11,580
Wachtel machines and to answer your

00:53:09,000 --> 00:53:12,960
question yes you probably can do secure

00:53:11,580 --> 00:53:16,560
containers on the native but that's a

00:53:12,960 --> 00:53:18,450
debate to be had in the future okay so

00:53:16,560 --> 00:53:20,760
this reminds me of the movie with

00:53:18,450 --> 00:53:22,290
Leonardo DiCaprio you know when when

00:53:20,760 --> 00:53:24,359
they go to sleep and then in the sleep

00:53:22,290 --> 00:53:26,910
they go to sleep and then in another

00:53:24,359 --> 00:53:32,490
sleep they are going to sleep again that

00:53:26,910 --> 00:53:34,200
Inception Inception yeah sorry one last

00:53:32,490 --> 00:53:38,700
question since I believe we have the

00:53:34,200 --> 00:53:41,940
time if you run with the ultra vires

00:53:38,700 --> 00:53:44,820
with the PF enabled but you are not

00:53:41,940 --> 00:53:46,650
caring about running secure virtual

00:53:44,820 --> 00:53:49,530
machines are you able to run an

00:53:46,650 --> 00:53:53,130
unmodified OS or you need a modified OS

00:53:49,530 --> 00:53:54,570
on top of the in order to boot the on

00:53:53,130 --> 00:53:57,060
top of duty you'll have to have a

00:53:54,570 --> 00:53:57,630
modified OS because if the ultra vires

00:53:57,060 --> 00:54:00,690
are they

00:53:57,630 --> 00:54:02,940
if the ultra vires they're I mean we've

00:54:00,690 --> 00:54:04,560
patches are in the kernel they're mostly

00:54:02,940 --> 00:54:07,950
in the linux kernel where it has to deal

00:54:04,560 --> 00:54:09,810
with paging so it's not in some of the

00:54:07,950 --> 00:54:11,640
virtualization parts of KVM it's all

00:54:09,810 --> 00:54:14,220
associated with the page infrastructure

00:54:11,640 --> 00:54:16,319
and with accessing scone registers okay

00:54:14,220 --> 00:54:18,460
so if you reflect those patches into

00:54:16,319 --> 00:54:21,119
your OS you're golden

00:54:18,460 --> 00:54:23,160
[Music]

00:54:21,119 --> 00:54:25,130
two ways you can do that one is disable

00:54:23,160 --> 00:54:27,660
PF and run and they are normal stuff

00:54:25,130 --> 00:54:29,550
yeah so if you want if you disable it

00:54:27,660 --> 00:54:31,470
you can run it on normal stuff but if

00:54:29,550 --> 00:54:33,329
you enable it then yes you have to

00:54:31,470 --> 00:54:35,819
enlighten your kernel patch your nose

00:54:33,329 --> 00:54:38,910
and potentially PRD I mean the

00:54:35,819 --> 00:54:40,500
application pad yes if you enable it but

00:54:38,910 --> 00:54:45,720
if you disable it things are as usual

00:54:40,500 --> 00:54:46,170
excellent thank you I think that should

00:54:45,720 --> 00:54:48,140
be it

00:54:46,170 --> 00:54:52,380
thanks a lot

00:54:48,140 --> 00:54:52,380

YouTube URL: https://www.youtube.com/watch?v=pKh_mPPo9X4


