Title: OpenPOWER Summit NA 2019: Hybrid Memory Project and OpenCAPI
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Michael Miller, Rambus

Rambus Labs will present its Proteus Hardware Platform -- a flexible, high performance platform that is well-suited for hybrid memory research and beyond. Combining  DRAM with emerging memories has shown promise as a  cost-performant way of increasing system capacity.
Captions: 
	00:00:00,170 --> 00:00:07,589
all right as he said my name is Michael

00:00:02,909 --> 00:00:11,759
Miller and we've been looking into

00:00:07,589 --> 00:00:14,519
hybrid memory at Rambis and I want to go

00:00:11,759 --> 00:00:15,990
through our Proteus platform and tell

00:00:14,519 --> 00:00:17,369
you how we got there

00:00:15,990 --> 00:00:19,949
so hopefully go through some of the

00:00:17,369 --> 00:00:22,680
goals and the motivations for doing for

00:00:19,949 --> 00:00:25,619
building our Proteus platform and then

00:00:22,680 --> 00:00:30,000
the types of research that we can do

00:00:25,619 --> 00:00:33,769
with it or that could be done and and

00:00:30,000 --> 00:00:33,769
then talk about where we go on from here

00:00:35,329 --> 00:00:42,540
you know we all have heard it all over

00:00:38,790 --> 00:00:44,820
all the time about the the data the way

00:00:42,540 --> 00:00:48,300
data is blowing up and we need to handle

00:00:44,820 --> 00:00:52,559
more data faster less power

00:00:48,300 --> 00:00:56,699
and so at Rambis we decide several years

00:00:52,559 --> 00:01:01,190
ago to start searching in this space how

00:00:56,699 --> 00:01:04,799
we can combine data combine memories

00:01:01,190 --> 00:01:10,080
such that we can reduce the the cost

00:01:04,799 --> 00:01:12,659
performance point and one of the things

00:01:10,080 --> 00:01:16,799
that we focused on were the emerging

00:01:12,659 --> 00:01:19,259
memories and the the one that we picked

00:01:16,799 --> 00:01:20,909
to start with was flash now that's been

00:01:19,259 --> 00:01:24,630
around for storage of course but in the

00:01:20,909 --> 00:01:26,700
memory realm it's it's starting to come

00:01:24,630 --> 00:01:30,810
into its own and so we started looking

00:01:26,700 --> 00:01:32,520
at that a couple years ago we wanted

00:01:30,810 --> 00:01:34,409
this to be a collaboration we knew that

00:01:32,520 --> 00:01:38,430
we couldn't do it on our own and so we

00:01:34,409 --> 00:01:43,860
have have partners along the way with us

00:01:38,430 --> 00:01:46,860
in fact Smart TVs a company that we use

00:01:43,860 --> 00:01:48,780
for our VIP for open capi so we're very

00:01:46,860 --> 00:01:54,630
happy to have that so is nice to have

00:01:48,780 --> 00:01:57,240
them precede this and of course we

00:01:54,630 --> 00:02:01,759
wanted to look at opportunities besides

00:01:57,240 --> 00:02:04,159
just flash but go on to the next one you

00:02:01,759 --> 00:02:07,640
did I skip something here

00:02:04,159 --> 00:02:09,800
all right so when we got started we said

00:02:07,640 --> 00:02:11,900
before we start diving into building a

00:02:09,800 --> 00:02:16,069
platform we needed to do a bunch of

00:02:11,900 --> 00:02:18,739
simulation and we had a gem 5 simulator

00:02:16,069 --> 00:02:20,810
and we tried a lot of different

00:02:18,739 --> 00:02:23,540
combinations of D ramp because that's

00:02:20,810 --> 00:02:25,580
the standard right now against which

00:02:23,540 --> 00:02:28,310
everything is being measured and then we

00:02:25,580 --> 00:02:29,840
put in different latencies for what we

00:02:28,310 --> 00:02:32,750
thought emergent memories could be or

00:02:29,840 --> 00:02:42,010
might be in the future and as you can

00:02:32,750 --> 00:02:42,010
see here on the first column oh whoa

00:02:43,790 --> 00:02:46,569
excuse me

00:02:47,150 --> 00:02:50,200
am I missing something

00:02:51,300 --> 00:02:55,660
all right all right thank you

00:02:53,890 --> 00:02:57,490
all right so as you can see in the first

00:02:55,660 --> 00:03:00,970
column we ran a bunch of benchmarks and

00:02:57,490 --> 00:03:04,000
we pegged the the DRAM as the control

00:03:00,970 --> 00:03:06,430
reference and made it all one then we

00:03:04,000 --> 00:03:08,980
decided to go and say let's take flash

00:03:06,430 --> 00:03:11,170
or something similar that has a three

00:03:08,980 --> 00:03:13,990
microsecond read in 100 micro second

00:03:11,170 --> 00:03:17,080
time and ran that against the same batch

00:03:13,990 --> 00:03:19,150
marks and to no surprise of anyone it's

00:03:17,080 --> 00:03:21,720
bad right we got up even to a hundred

00:03:19,150 --> 00:03:24,700
times worse than just DRAM

00:03:21,720 --> 00:03:26,770
but that wasn't where we were aiming for

00:03:24,700 --> 00:03:28,180
we're aiming how can we improve that and

00:03:26,770 --> 00:03:30,880
so we had a couple of techniques that we

00:03:28,180 --> 00:03:33,580
used and we were able to get pretty

00:03:30,880 --> 00:03:38,410
close to DRAM performance you know

00:03:33,580 --> 00:03:41,200
anywhere from 1.1 to 1.7 times worse

00:03:38,410 --> 00:03:42,700
than DRAM but at a cost that may be

00:03:41,200 --> 00:03:46,530
pretty compelling

00:03:42,700 --> 00:03:49,239
it was compelling enough for us that we

00:03:46,530 --> 00:03:52,090
decided to go further with this and to

00:03:49,239 --> 00:03:53,560
build a platform but what are these

00:03:52,090 --> 00:03:56,290
Rambis techniques that we're talking

00:03:53,560 --> 00:04:00,160
about where there were two main ones

00:03:56,290 --> 00:04:03,390
that were useful for us the first one is

00:04:00,160 --> 00:04:06,700
the right interrupt feature and

00:04:03,390 --> 00:04:08,709
typically in flash especially you start

00:04:06,700 --> 00:04:10,540
initiating a writes you have your

00:04:08,709 --> 00:04:14,820
hundred microseconds of write time going

00:04:10,540 --> 00:04:17,890
on and you have a read going to the same

00:04:14,820 --> 00:04:23,140
to the same block and you're stuck you

00:04:17,890 --> 00:04:25,419
gotta wait but working with a partner we

00:04:23,140 --> 00:04:27,160
evaluated that the ability to interrupt

00:04:25,419 --> 00:04:31,090
a write and what that might impact on

00:04:27,160 --> 00:04:33,850
performance and so as you can see in in

00:04:31,090 --> 00:04:36,130
our simulations when we didn't have the

00:04:33,850 --> 00:04:38,229
right interrupts versus when we did have

00:04:36,130 --> 00:04:42,580
the right interrupts we got somewhere

00:04:38,229 --> 00:04:44,620
around half to half the time better

00:04:42,580 --> 00:04:46,960
twice their performance with the right

00:04:44,620 --> 00:04:49,630
interrupt than without it

00:04:46,960 --> 00:04:51,490
I didn't generate these charts so if you

00:04:49,630 --> 00:04:55,090
tried to compare all the charts with the

00:04:51,490 --> 00:04:57,300
previous one it may not exactly line up

00:04:55,090 --> 00:05:01,360
but these are representative of the

00:04:57,300 --> 00:05:03,220
hundreds of simulations that we did so

00:05:01,360 --> 00:05:05,140
that's on the interruptible right and

00:05:03,220 --> 00:05:06,090
then on the on the right side we went

00:05:05,140 --> 00:05:09,370
after DRAM

00:05:06,090 --> 00:05:12,700
techniques so you could call it cash but

00:05:09,370 --> 00:05:16,270
it's a little bit more than that we use

00:05:12,700 --> 00:05:19,210
D RAM as the front-end and flash or our

00:05:16,270 --> 00:05:20,980
emerging memory as a back-end in this

00:05:19,210 --> 00:05:22,990
case over here on these charts we use a

00:05:20,980 --> 00:05:27,010
10 micro second read in the 100

00:05:22,990 --> 00:05:30,730
microsecond right and with those ratios

00:05:27,010 --> 00:05:34,000
we found anywhere from 16 to 1 16 times

00:05:30,730 --> 00:05:36,580
the flash versus 1 times the DRAM to 64

00:05:34,000 --> 00:05:41,220
to 1 where an area that was compelling

00:05:36,580 --> 00:05:44,170
it made it it had a significant benefit

00:05:41,220 --> 00:05:47,620
we designed our board to operate right

00:05:44,170 --> 00:05:50,050
now at 16 to 1 because we wanted to get

00:05:47,620 --> 00:05:52,210
the best performance possible and when

00:05:50,050 --> 00:05:54,490
you take those two together and you go

00:05:52,210 --> 00:05:57,490
back to the previous slide that's where

00:05:54,490 --> 00:06:02,530
we get these numbers and we get a you

00:05:57,490 --> 00:06:04,750
know like I said 1.1 to 1.7 all right so

00:06:02,530 --> 00:06:06,400
now we're on to the exciting stuff at

00:06:04,750 --> 00:06:09,900
least for me as a hardware designer is

00:06:06,400 --> 00:06:12,640
we need to implement this stuff because

00:06:09,900 --> 00:06:15,520
we think we have a storyline that's

00:06:12,640 --> 00:06:17,470
worth going after but we had several

00:06:15,520 --> 00:06:20,080
criteria that we had to do for this

00:06:17,470 --> 00:06:23,830
design the first one is they had to be

00:06:20,080 --> 00:06:25,930
modular again we want to work with

00:06:23,830 --> 00:06:28,720
collaborators and not just build a

00:06:25,930 --> 00:06:31,660
system that's just for us so we we

00:06:28,720 --> 00:06:33,310
designed something that took a host

00:06:31,660 --> 00:06:35,050
system we use a couple different host

00:06:33,310 --> 00:06:36,840
systems one straight from IBM and the

00:06:35,050 --> 00:06:41,200
other one from Wistrom

00:06:36,840 --> 00:06:45,040
to run the the software and the

00:06:41,200 --> 00:06:47,200
benchmarks we made a few minor tweaks I

00:06:45,040 --> 00:06:48,940
believe to some of the drivers but by

00:06:47,200 --> 00:06:55,450
and large the software was going to stay

00:06:48,940 --> 00:07:00,840
the same and then we had a platform that

00:06:55,450 --> 00:07:04,270
included several different protocols or

00:07:00,840 --> 00:07:06,850
blocks and over here we have our course

00:07:04,270 --> 00:07:08,620
are open Cappy which is our initial

00:07:06,850 --> 00:07:11,190
design we start with open Caffey though

00:07:08,620 --> 00:07:14,550
we envision being able to use Gen Z or

00:07:11,190 --> 00:07:18,330
PCIe or something similar in the future

00:07:14,550 --> 00:07:20,099
to be able to convert that into

00:07:18,330 --> 00:07:23,189
an interface and so as you saw on other

00:07:20,099 --> 00:07:26,159
designs AXI 4 was our interface that we

00:07:23,189 --> 00:07:28,289
chose to use so we have an ACCI 4

00:07:26,159 --> 00:07:30,629
interface and then we have the hybrid

00:07:28,289 --> 00:07:35,219
tier manager which takes the request

00:07:30,629 --> 00:07:38,490
from the host and figures out how best

00:07:35,219 --> 00:07:41,550
to utilize the requests and and manage

00:07:38,490 --> 00:07:47,280
flash and DRAM together so this is a

00:07:41,550 --> 00:07:49,889
very high level diagram to show you that

00:07:47,280 --> 00:07:51,990
we made it modular the other thing is

00:07:49,889 --> 00:07:53,520
that we wanted to limit the changes to

00:07:51,990 --> 00:07:56,430
the software I told you about that

00:07:53,520 --> 00:07:58,889
already and then the third thing was we

00:07:56,430 --> 00:08:00,750
wanted to be flexible for the future

00:07:58,889 --> 00:08:02,520
because we don't know exactly what

00:08:00,750 --> 00:08:04,849
memories will be using we knew we were

00:08:02,520 --> 00:08:08,930
going to start with flash and DRAM and

00:08:04,849 --> 00:08:13,919
so with that was the other requirement

00:08:08,930 --> 00:08:20,129
so if we go to the Proteus FPGA hardware

00:08:13,919 --> 00:08:22,590
platform so the Proteus platform has

00:08:20,129 --> 00:08:25,379
several main components it has a vertex

00:08:22,590 --> 00:08:28,319
ultra scale plus 9 which is quite large

00:08:25,379 --> 00:08:30,029
I think the footprint even supports a 13

00:08:28,319 --> 00:08:35,000
as well if we ever felt the need to go

00:08:30,029 --> 00:08:39,659
larger than that it has four independent

00:08:35,000 --> 00:08:41,250
ddr4 dimm slots and independent means

00:08:39,659 --> 00:08:43,440
that we have four different memory

00:08:41,250 --> 00:08:44,310
controllers one for each Tim they're not

00:08:43,440 --> 00:08:54,899
banked together

00:08:44,310 --> 00:08:58,380
there is a fifth domestic

00:08:54,899 --> 00:09:01,560
it doesn't support ddr4 so you can take

00:08:58,380 --> 00:09:03,720
any one of those and replace the DEM of

00:09:01,560 --> 00:09:07,550
the ddr4 with a custom board which we

00:09:03,720 --> 00:09:10,500
did with for flash we built some ddr4

00:09:07,550 --> 00:09:12,390
DIMMs with a couple of pieces of flash

00:09:10,500 --> 00:09:19,110
and and we have an example of that out

00:09:12,390 --> 00:09:21,420
the and at the open copy table we

00:09:19,110 --> 00:09:24,360
support several different types of links

00:09:21,420 --> 00:09:27,870
we have three open capi links we have

00:09:24,360 --> 00:09:30,600
two Gen Z connectors there is a PCIe

00:09:27,870 --> 00:09:32,550
connector and

00:09:30,600 --> 00:09:34,860
we had talked I'm not sure that we have

00:09:32,550 --> 00:09:37,470
any other connectors for for the high

00:09:34,860 --> 00:09:40,050
bandwidth and and then we have some

00:09:37,470 --> 00:09:44,430
onboard memory it's actually ddr4 not

00:09:40,050 --> 00:09:47,160
ddr3 that's the the purpose there was to

00:09:44,430 --> 00:09:50,250
allow for scoreboarding page table

00:09:47,160 --> 00:09:53,310
management whatever you may need you

00:09:50,250 --> 00:09:56,280
don't want to pollute the main memory on

00:09:53,310 --> 00:09:58,350
the Proteus board and then of course we

00:09:56,280 --> 00:10:01,680
have we have clocking and power

00:09:58,350 --> 00:10:05,850
architecture that is quite flexible so

00:10:01,680 --> 00:10:07,620
that's what we designed and this is the

00:10:05,850 --> 00:10:09,420
the hardware level I believe the next

00:10:07,620 --> 00:10:14,100
page is we're going to get down to the

00:10:09,420 --> 00:10:17,940
fpga level and you sort of saw a couple

00:10:14,100 --> 00:10:19,650
slides ago but essentially what we have

00:10:17,940 --> 00:10:23,310
here for our initial design is we have

00:10:19,650 --> 00:10:25,800
the open capi logic we built our logic

00:10:23,310 --> 00:10:29,550
to convert it to ax I and then you have

00:10:25,800 --> 00:10:32,280
a couple of ax I crossbars and then in

00:10:29,550 --> 00:10:34,140
between would be for the sake of our

00:10:32,280 --> 00:10:38,310
first design would be more like a cache

00:10:34,140 --> 00:10:41,700
controller but this cache controller is

00:10:38,310 --> 00:10:43,590
not operating its operating focus on the

00:10:41,700 --> 00:10:45,330
flash as the destination because that

00:10:43,590 --> 00:10:47,670
ultimately what we want to do is we want

00:10:45,330 --> 00:10:50,940
to replace as much DRAM as we can with

00:10:47,670 --> 00:10:53,910
flash because it's cheaper and so we're

00:10:50,940 --> 00:10:57,980
operating on a larger block like 4k a

00:10:53,910 --> 00:11:03,330
fork a page for for the cache line size

00:10:57,980 --> 00:11:06,900
for this design and the cache controller

00:11:03,330 --> 00:11:10,410
is really only interested in dealing

00:11:06,900 --> 00:11:14,250
with interfacing to the DRAM as far as

00:11:10,410 --> 00:11:17,610
interface facing to the the flash we

00:11:14,250 --> 00:11:20,370
have additional block over here that has

00:11:17,610 --> 00:11:22,050
to manage all the policies associated

00:11:20,370 --> 00:11:26,910
with flash for instance you have we're

00:11:22,050 --> 00:11:29,010
leveling you have migration and you have

00:11:26,910 --> 00:11:31,920
buffers associated with this so we can

00:11:29,010 --> 00:11:33,270
bring in and out 4k at a time and sort

00:11:31,920 --> 00:11:35,850
of keep that out of the way until we

00:11:33,270 --> 00:11:37,530
have the data so that's sort of the

00:11:35,850 --> 00:11:38,940
workhorse in the flash and so if you

00:11:37,530 --> 00:11:41,310
ended up having something different you

00:11:38,940 --> 00:11:42,990
can replace that with a management

00:11:41,310 --> 00:11:47,990
protocol for a different

00:11:42,990 --> 00:11:49,170
memory all right and of course being

00:11:47,990 --> 00:11:51,750
FPGAs

00:11:49,170 --> 00:11:55,589
if you decide you you know here we show

00:11:51,750 --> 00:11:57,720
that we have 4d realm controllers and

00:11:55,589 --> 00:11:59,910
then and then we have a flash well

00:11:57,720 --> 00:12:01,440
that's not entirely true it's it's a

00:11:59,910 --> 00:12:03,660
combination of four you could have all

00:12:01,440 --> 00:12:05,880
four D ramps or you could have two

00:12:03,660 --> 00:12:07,500
diagrams to flash or you could have all

00:12:05,880 --> 00:12:10,920
fourth being separate you just need to

00:12:07,500 --> 00:12:20,180
have IP for that that would be supported

00:12:10,920 --> 00:12:22,890
by Xilinx the Xilinx FPGA all right so

00:12:20,180 --> 00:12:26,250
the the possibilities we talked about it

00:12:22,890 --> 00:12:31,670
being flexible and our first our first

00:12:26,250 --> 00:12:35,370
goal was to make a hybrid flash ddr4

00:12:31,670 --> 00:12:37,470
combo and we are almost done with them I

00:12:35,370 --> 00:12:39,990
don't have numbers to put up here so

00:12:37,470 --> 00:12:42,600
that's good for me or bad for me I don't

00:12:39,990 --> 00:12:47,010
know but that's still a work in progress

00:12:42,600 --> 00:12:48,420
but we we do have a demo that that we

00:12:47,010 --> 00:12:51,149
have shown in the past and I can show

00:12:48,420 --> 00:12:56,760
tomorrow if you catch me outside and

00:12:51,149 --> 00:13:00,750
near the open copy booth with DRAM but

00:12:56,760 --> 00:13:03,990
you know we work we have with a huge

00:13:00,750 --> 00:13:06,240
FPGA a lot of room left in the FPGA with

00:13:03,990 --> 00:13:08,339
the design that we're working on you

00:13:06,240 --> 00:13:11,370
know we envision being able to near

00:13:08,339 --> 00:13:12,899
memory compute we have an open Cathy we

00:13:11,370 --> 00:13:15,000
have Gen Z can we hook those two

00:13:12,899 --> 00:13:17,880
together make a switch make some type of

00:13:15,000 --> 00:13:20,399
fabric that would be interesting can we

00:13:17,880 --> 00:13:22,680
hook multiple open capping machines

00:13:20,399 --> 00:13:25,050
together to one board or hook multiple

00:13:22,680 --> 00:13:26,750
boards together the open Cappy Gen Z a

00:13:25,050 --> 00:13:30,660
lot of possibilities there

00:13:26,750 --> 00:13:35,550
we've also kicked around what type of

00:13:30,660 --> 00:13:40,410
software support we could do can we use

00:13:35,550 --> 00:13:44,730
prediction a you know AI on the host to

00:13:40,410 --> 00:13:48,180
inform the the Proteus platform what

00:13:44,730 --> 00:13:52,829
four K blocks we need to get next do we

00:13:48,180 --> 00:13:55,850
do using history figure out what we may

00:13:52,829 --> 00:13:55,850
need next based on

00:13:58,640 --> 00:14:05,040
so as I said we're in the research I'm

00:14:02,880 --> 00:14:08,820
in the Risa as was mentioned I'm in the

00:14:05,040 --> 00:14:10,620
research labs a tree at Rambis this is

00:14:08,820 --> 00:14:15,000
not a part that we're gonna take and

00:14:10,620 --> 00:14:16,800
sell it's really it's a platform that

00:14:15,000 --> 00:14:20,070
we're trying to collaborate with others

00:14:16,800 --> 00:14:22,320
so we mentioned a few things you know

00:14:20,070 --> 00:14:25,980
right now we're focusing mainly on the

00:14:22,320 --> 00:14:27,779
the memory side of the m1 I believe

00:14:25,980 --> 00:14:28,980
aren't open Cappy but we certainly can

00:14:27,779 --> 00:14:31,680
see where we would be able to do

00:14:28,980 --> 00:14:33,450
acceleration as well and I'm sure there

00:14:31,680 --> 00:14:35,580
are a lot of people out there who have

00:14:33,450 --> 00:14:37,500
other ideas that would be interesting

00:14:35,580 --> 00:14:39,930
and so if you have an interesting idea

00:14:37,500 --> 00:14:43,170
and you would like to collaborate we'd

00:14:39,930 --> 00:14:44,400
be all ears and that's whether that's

00:14:43,170 --> 00:14:47,550
industry or academia

00:14:44,400 --> 00:14:49,710
it doesn't matter us we're you know we

00:14:47,550 --> 00:14:51,930
want to try to figure out what problems

00:14:49,710 --> 00:14:55,860
are coming and see if we can't come to

00:14:51,930 --> 00:14:58,770
solutions that would be beneficial and I

00:14:55,860 --> 00:15:01,760
believe that is it I am happy to take

00:14:58,770 --> 00:15:01,760
questions if there are any

00:15:04,990 --> 00:15:07,629

YouTube URL: https://www.youtube.com/watch?v=9_tyQG8zKTo


