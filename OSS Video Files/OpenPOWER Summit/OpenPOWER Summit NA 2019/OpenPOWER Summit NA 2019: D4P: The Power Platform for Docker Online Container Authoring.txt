Title: OpenPOWER Summit NA 2019: D4P: The Power Platform for Docker Online Container Authoring
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Abdul Dakkak, UIUC

The current POWER container community lags behind that of some other architecture. Part of this is because software developers are unable to publish docker images without access to a Power system. Docker for Power (D4P) is a platform to develop and deploy Power containers within a web browser without access to a local Power system.

The aim of D4P is to enrich the Power container ecosystem by providing both a platform for developers to create docker containers and for Power community to find docker images. Already, we have built and published over 200 docker images that are available in the D4P image catalog. User
contribution is key to extend D4P's catalog.

D4P is available online https://dockerfile-builder.mybluemix.net and slated to be the hub for the Power
community to create, discover, and use docker images.
Captions: 
	00:00:00,030 --> 00:00:07,200
so hi my name is Abdul Haq I'm a PhD

00:00:05,040 --> 00:00:11,730
student at University of Illinois at

00:00:07,200 --> 00:00:15,599
urbana-champaign we're part of the AI

00:00:11,730 --> 00:00:18,779
IBM AI horizons network and the center

00:00:15,599 --> 00:00:22,189
is called C 3s R or the Center for

00:00:18,779 --> 00:00:26,430
cognitive computing for system research

00:00:22,189 --> 00:00:30,240
and this is joint work between me and

00:00:26,430 --> 00:00:35,850
the Shu Ginger's young from IBM and what

00:00:30,240 --> 00:00:41,300
may have so the objective of this talk

00:00:35,850 --> 00:00:43,739
or this tool that I'm presenting is that

00:00:41,300 --> 00:00:46,770
one thing that we were having trouble

00:00:43,739 --> 00:00:50,430
with one power systems were first

00:00:46,770 --> 00:00:54,149
introduced is there was a lack of kind

00:00:50,430 --> 00:00:58,170
of an ecosystem for you know containers

00:00:54,149 --> 00:01:01,649
and and sort of ability to compile stuff

00:00:58,170 --> 00:01:04,320
on the of these systems so we were the

00:01:01,649 --> 00:01:08,640
the kind of back story is that we were

00:01:04,320 --> 00:01:11,850
teaching a GPU programming class using

00:01:08,640 --> 00:01:14,990
power eight systems two years ago

00:01:11,850 --> 00:01:17,369
and one of the things that these

00:01:14,990 --> 00:01:19,290
students had to do was develop an

00:01:17,369 --> 00:01:23,430
open-ended project so they bring in

00:01:19,290 --> 00:01:26,070
their own project and develop it on

00:01:23,430 --> 00:01:28,790
these p8 systems and the p8 systems were

00:01:26,070 --> 00:01:32,400
you know the state of the art back then

00:01:28,790 --> 00:01:38,100
we were developing in a thing called Rai

00:01:32,400 --> 00:01:41,670
which we developed in house and what Rai

00:01:38,100 --> 00:01:43,710
allows you to do is develop locally on

00:01:41,670 --> 00:01:46,979
your system but execute all the codes

00:01:43,710 --> 00:01:49,920
remotely so you can think of it as a

00:01:46,979 --> 00:01:52,770
lightweight it's a bit more powerful

00:01:49,920 --> 00:01:55,079
that necess agent that you know a user

00:01:52,770 --> 00:01:57,229
is oblivious to the you know which

00:01:55,079 --> 00:02:02,490
system is actually executing the code

00:01:57,229 --> 00:02:05,219
and it has the same benefits as SSH

00:02:02,490 --> 00:02:07,789
but we found a limitation in the power

00:02:05,219 --> 00:02:11,520
ecosystem so these users were trying to

00:02:07,789 --> 00:02:12,540
execute code and they relied on some

00:02:11,520 --> 00:02:16,590
libraries and the

00:02:12,540 --> 00:02:18,390
they're executed roulette you know the

00:02:16,590 --> 00:02:19,799
library is the easiest way to put them

00:02:18,390 --> 00:02:23,189
on these power system was to use

00:02:19,799 --> 00:02:25,370
containers and we found there's not that

00:02:23,189 --> 00:02:28,650
many containers on these power systems

00:02:25,370 --> 00:02:32,359
we were trying to do cross compilation

00:02:28,650 --> 00:02:35,790
so you know x86 cross-compile on power

00:02:32,359 --> 00:02:39,359
you know using tools like qmu or you

00:02:35,790 --> 00:02:42,090
know or just installing the kind of

00:02:39,359 --> 00:02:45,439
cross compilers we find those to be

00:02:42,090 --> 00:02:48,599
either slow or it just didn't work and

00:02:45,439 --> 00:02:53,129
if you look at current Eko the current

00:02:48,599 --> 00:02:56,450
ecosystem this is just a rough idea you

00:02:53,129 --> 00:03:01,280
know in terms of docker containers on

00:02:56,450 --> 00:03:06,060
Intel there's about two million you know

00:03:01,280 --> 00:03:09,959
docker images on docker hub for arm

00:03:06,060 --> 00:03:13,139
there's about 8,000 and for power

00:03:09,959 --> 00:03:16,230
there's about 500 this is again a rough

00:03:13,139 --> 00:03:19,199
estimate and using our tool we were

00:03:16,230 --> 00:03:22,799
actually we're we contributed to 300 of

00:03:19,199 --> 00:03:26,549
those 500 containers so just over six

00:03:22,799 --> 00:03:31,139
hundred sixty percent of the containers

00:03:26,549 --> 00:03:34,049
were responsible for so what we're

00:03:31,139 --> 00:03:36,840
trying to do was extend the powerpc

00:03:34,049 --> 00:03:40,199
docker ecosystem by making it possible

00:03:36,840 --> 00:03:42,720
for people to build on power without

00:03:40,199 --> 00:03:45,329
really having access to the hardware so

00:03:42,720 --> 00:03:48,049
people are interested in you know making

00:03:45,329 --> 00:03:51,150
sure you know like tensorflow or MX net

00:03:48,049 --> 00:03:53,010
compiles on power but you know an open

00:03:51,150 --> 00:03:57,959
source developer does not have access to

00:03:53,010 --> 00:04:00,409
the power system so you know any kind of

00:03:57,959 --> 00:04:03,209
person off the street can then just

00:04:00,409 --> 00:04:06,959
develop these or you know compile and

00:04:03,209 --> 00:04:10,500
run on these power systems we also

00:04:06,959 --> 00:04:12,479
wanted a way for or a home for these

00:04:10,500 --> 00:04:15,689
docker containers so that people don't

00:04:12,479 --> 00:04:18,840
have to sift through docker hub to find

00:04:15,689 --> 00:04:21,959
find them because some is somewhat hard

00:04:18,840 --> 00:04:25,950
to search for architecture specific

00:04:21,959 --> 00:04:30,310
containers on docker hub

00:04:25,950 --> 00:04:32,080
so let me show you a demo of this and

00:04:30,310 --> 00:04:38,080
this is a tool that we've been using for

00:04:32,080 --> 00:04:39,250
quite a while and it has a this is the

00:04:38,080 --> 00:04:41,710
web interface and I'll show the

00:04:39,250 --> 00:04:45,940
command-line interface in a in a little

00:04:41,710 --> 00:04:49,590
bit so again it's a bare-bones system

00:04:45,940 --> 00:04:49,590
but the idea is that you know you have a

00:04:50,220 --> 00:04:56,730
drop-down and what you're able to do is

00:04:53,560 --> 00:05:01,120
let's say I upload like a zip file and

00:04:56,730 --> 00:05:02,620
you now have an editor you know and and

00:05:01,120 --> 00:05:05,380
you know you can have multiple files

00:05:02,620 --> 00:05:07,720
that that you're editing but this is a

00:05:05,380 --> 00:05:09,790
docker container and then I can say okay

00:05:07,720 --> 00:05:11,680
I want to build this and this is going

00:05:09,790 --> 00:05:16,030
to build on some machine in the

00:05:11,680 --> 00:05:20,110
background so this is either running you

00:05:16,030 --> 00:05:24,730
know we have a power system at Illinois

00:05:20,110 --> 00:05:27,520
and we have one that was donated by IBM

00:05:24,730 --> 00:05:30,400
in in their servers form and there's

00:05:27,520 --> 00:05:34,630
another one in Oregon State that we were

00:05:30,400 --> 00:05:37,990
using but this built the containers that

00:05:34,630 --> 00:05:39,790
the container because one thing that the

00:05:37,990 --> 00:05:42,550
reason is actually built with quickly is

00:05:39,790 --> 00:05:44,710
because these things are cached but

00:05:42,550 --> 00:05:50,670
let's say I modified this CUDA version

00:05:44,710 --> 00:05:54,400
to be ten and I was gonna have to build

00:05:50,670 --> 00:06:00,600
you know it's now you know downloading

00:05:54,400 --> 00:06:03,490
some some some you know apps installed

00:06:00,600 --> 00:06:06,580
packages and this is actually real time

00:06:03,490 --> 00:06:10,450
what the server is doing so it's

00:06:06,580 --> 00:06:14,590
downloading some some packages so let me

00:06:10,450 --> 00:06:16,990
actually go back to and show for example

00:06:14,590 --> 00:06:21,880
how you be able to so let's say I've

00:06:16,990 --> 00:06:25,930
built the image and now I want to

00:06:21,880 --> 00:06:28,510
publish it to docker hub so what I could

00:06:25,930 --> 00:06:31,810
do is you know I built you know I just

00:06:28,510 --> 00:06:34,900
tests if it builds okay it builds and

00:06:31,810 --> 00:06:38,430
now I can essentially say okay I want to

00:06:34,900 --> 00:06:38,430
publish it to docker hub so

00:06:38,899 --> 00:06:57,709
tests latest latest that's my username

00:06:49,249 --> 00:07:04,769
so now it's actually built the image and

00:06:57,709 --> 00:07:09,769
if I go and it's going to publish so

00:07:04,769 --> 00:07:09,769
it's publishing the docker images and

00:07:12,949 --> 00:07:19,699
let me go to hub docker calm

00:07:28,470 --> 00:07:37,440
so this is the image that I published so

00:07:33,870 --> 00:07:43,590
in so this was a test from five hours

00:07:37,440 --> 00:07:46,500
ago but in a few seconds it will be

00:07:43,590 --> 00:07:54,150
published like that that test case will

00:07:46,500 --> 00:07:56,400
be published any question by the way you

00:07:54,150 --> 00:07:58,850
can feel free to ask any questions at

00:07:56,400 --> 00:07:58,850
any time

00:08:08,030 --> 00:08:15,780
so do you do maintain those images up to

00:08:12,450 --> 00:08:19,050
date or this is a single shot so we

00:08:15,780 --> 00:08:21,690
parted this is the image by our own and

00:08:19,050 --> 00:08:24,960
if you have any issues go fix it so how

00:08:21,690 --> 00:08:27,870
do you handle that right so actually the

00:08:24,960 --> 00:08:32,400
me yeah so while we were waiting for

00:08:27,870 --> 00:08:35,490
that so we have a so I BM actually and

00:08:32,400 --> 00:08:36,660
and we developed a bunch of docker

00:08:35,490 --> 00:08:40,260
images

00:08:36,660 --> 00:08:46,050
I think it's on github there's a repo

00:08:40,260 --> 00:08:49,620
called PPC 64 le slash build scripts so

00:08:46,050 --> 00:08:52,020
we actually build those regularly so IBM

00:08:49,620 --> 00:08:55,680
maintains them and and we also you know

00:08:52,020 --> 00:09:00,480
do a bunch of you know we have our own

00:08:55,680 --> 00:09:02,700
images so in that terms we built will

00:09:00,480 --> 00:09:06,360
build regularly for them so these are

00:09:02,700 --> 00:09:09,930
the images that you know we have and if

00:09:06,360 --> 00:09:12,150
you actually go to the you know one of

00:09:09,930 --> 00:09:17,310
these links is the this is the docker

00:09:12,150 --> 00:09:19,530
file that it's based off of so you know

00:09:17,310 --> 00:09:23,550
this was last updated last August and

00:09:19,530 --> 00:09:26,580
you can see you know the docker hub

00:09:23,550 --> 00:09:28,200
image that was built I don't think I

00:09:26,580 --> 00:09:31,910
clicked on the same thing but you know

00:09:28,200 --> 00:09:36,710
that this is the you know IBM comm

00:09:31,910 --> 00:09:42,980
cookies PVC 64 le and what and we have a

00:09:36,710 --> 00:09:48,630
you know you know 300 as I said of those

00:09:42,980 --> 00:09:54,030
306 of these images that that we

00:09:48,630 --> 00:09:56,520
maintain now you know if there's a new

00:09:54,030 --> 00:09:58,260
version you know it's it's up to the

00:09:56,520 --> 00:10:00,420
person who's developing the docker file

00:09:58,260 --> 00:10:02,910
to make sure that they've updated the

00:10:00,420 --> 00:10:04,920
scripts and things like that and they

00:10:02,910 --> 00:10:07,700
can use these tools to actually push

00:10:04,920 --> 00:10:07,700
these changes

00:10:11,050 --> 00:10:17,030
does this work better if you updated the

00:10:14,990 --> 00:10:20,780
image could you actually set your flat

00:10:17,030 --> 00:10:21,890
your version tags yeah to show that so

00:10:20,780 --> 00:10:23,600
you get multiple versions out there

00:10:21,890 --> 00:10:27,260
which is a piece of the currency

00:10:23,600 --> 00:10:29,090
question right yeah so it's not the

00:10:27,260 --> 00:10:31,370
whole story but it's so when you when

00:10:29,090 --> 00:10:36,410
you publish the image you can just say

00:10:31,370 --> 00:10:39,040
so let's do this again tests you know v2

00:10:36,410 --> 00:10:42,200
or something

00:10:39,040 --> 00:10:46,490
push so actually now I have this

00:10:42,200 --> 00:10:49,790
I should have latest was updated two

00:10:46,490 --> 00:10:52,880
minutes ago but you know I should have

00:10:49,790 --> 00:10:57,260
once this v2 thing finishes I will have

00:10:52,880 --> 00:10:59,390
a another tag that's called v2 so yeah

00:10:57,260 --> 00:11:01,940
so you can actually have a version you

00:10:59,390 --> 00:11:08,630
know using these gift tags or you know

00:11:01,940 --> 00:11:10,970
get args and stuff like that so first

00:11:08,630 --> 00:11:13,130
question so do you sign it those images

00:11:10,970 --> 00:11:15,620
so one of the concerns about using

00:11:13,130 --> 00:11:17,750
images that are provided by other person

00:11:15,620 --> 00:11:20,360
or are the company is regarded the

00:11:17,750 --> 00:11:22,280
content of those images so first

00:11:20,360 --> 00:11:24,950
question do you sign those image to

00:11:22,280 --> 00:11:27,470
ensure that the source of the images is

00:11:24,950 --> 00:11:29,900
some trust Authority something like that

00:11:27,470 --> 00:11:32,510
so no II don't

00:11:29,900 --> 00:11:35,150
one thing is all this is also open

00:11:32,510 --> 00:11:37,850
source so you can actually and and and

00:11:35,150 --> 00:11:39,770
the server is also open source so you

00:11:37,850 --> 00:11:42,620
can bring up your own one of you know

00:11:39,770 --> 00:11:49,670
one of these and you know do

00:11:42,620 --> 00:11:53,090
modifications second question so today

00:11:49,670 --> 00:11:57,310
docker container just part of kubernetes

00:11:53,090 --> 00:12:00,440
system and as part of the kubernetes

00:11:57,310 --> 00:12:03,980
deployment like openshift for instance i

00:12:00,440 --> 00:12:06,980
can create a helm shirt which is you can

00:12:03,980 --> 00:12:10,600
see that as a package for deploying your

00:12:06,980 --> 00:12:14,300
application inside the cabinet cluster

00:12:10,600 --> 00:12:17,390
discipline so some how can I attach it

00:12:14,300 --> 00:12:20,510
this process as part of my helm chard

00:12:17,390 --> 00:12:21,570
creation process so when I'm doing an

00:12:20,510 --> 00:12:23,910
deployment on what

00:12:21,570 --> 00:12:27,600
cobranet a coconut cluster for instance

00:12:23,910 --> 00:12:30,930
I can somehow create a image if that was

00:12:27,600 --> 00:12:33,030
originally created for x86 part that

00:12:30,930 --> 00:12:36,540
image to power and do the deployment

00:12:33,030 --> 00:12:38,850
inside my cluster kind of can I have

00:12:36,540 --> 00:12:40,680
these etosha to a CIS city system

00:12:38,850 --> 00:12:43,080
do you have API for that do you have

00:12:40,680 --> 00:12:45,690
anything that can attach I can attach to

00:12:43,080 --> 00:12:50,190
your system to do some other automation

00:12:45,690 --> 00:12:56,190
behind the scenes right so there's a few

00:12:50,190 --> 00:12:59,370
ways I'll come to the there's a command

00:12:56,190 --> 00:13:01,950
line version of all of this there's also

00:12:59,370 --> 00:13:03,930
a you know you can use the REST API if

00:13:01,950 --> 00:13:07,860
you want to use that or there's also an

00:13:03,930 --> 00:13:10,830
RPC API that you could use so you know

00:13:07,860 --> 00:13:14,040
depending on what sort of level you want

00:13:10,830 --> 00:13:17,100
you could interact with this you don't

00:13:14,040 --> 00:13:19,080
have to do a bunch of clicks to do these

00:13:17,100 --> 00:13:23,420
and actually I'll show in a few slides

00:13:19,080 --> 00:13:26,970
how we integrate that too with a

00:13:23,420 --> 00:13:29,550
continuous integration system which you

00:13:26,970 --> 00:13:32,670
know it just provides machines for x86

00:13:29,550 --> 00:13:35,910
but we use those to build docker you

00:13:32,670 --> 00:13:42,330
know power docker images and run those

00:13:35,910 --> 00:13:44,460
as well yep had to wait for the mic

00:13:42,330 --> 00:13:46,230
sorry so to answer part of Rafael's

00:13:44,460 --> 00:13:48,690
question about the security as well and

00:13:46,230 --> 00:13:50,810
I think you know this as well the IBM

00:13:48,690 --> 00:13:53,880
calm during space up there on docker hub

00:13:50,810 --> 00:13:54,560
the only people that can can write there

00:13:53,880 --> 00:13:58,110
are

00:13:54,560 --> 00:14:00,810
select sets of IBM errs or those that

00:13:58,110 --> 00:14:02,550
have been given a proxy right so there

00:14:00,810 --> 00:14:05,490
is some security built in there because

00:14:02,550 --> 00:14:07,170
of who has the keys to go publish right

00:14:05,490 --> 00:14:10,410
so now they it's up to their publishing

00:14:07,170 --> 00:14:11,640
system but the docker hub or the the

00:14:10,410 --> 00:14:13,950
sign in that they used to get the docker

00:14:11,640 --> 00:14:15,620
hub is very unique to them so that is

00:14:13,950 --> 00:14:19,110
some help and the rest is docker hub

00:14:15,620 --> 00:14:21,150
protections the other question that I

00:14:19,110 --> 00:14:23,610
think Rafael asked you answered part of

00:14:21,150 --> 00:14:25,470
it really well but anything about helm

00:14:23,610 --> 00:14:27,900
charts or openshift a lot of that's

00:14:25,470 --> 00:14:30,270
gonna go into like a Red Hat repository

00:14:27,900 --> 00:14:31,470
rather than yours the docker hub is

00:14:30,270 --> 00:14:34,680
where you're still going to pull all of

00:14:31,470 --> 00:14:35,130
the containers from but all the auxilary

00:14:34,680 --> 00:14:37,260
up

00:14:35,130 --> 00:14:40,050
Raiders helm charts etc are going to

00:14:37,260 --> 00:14:43,860
come from currently a Red Hat openshift

00:14:40,050 --> 00:14:47,760
repository it's actually this the back

00:14:43,860 --> 00:15:00,510
to this thing so now yeah so going back

00:14:47,760 --> 00:15:02,670
to this like right so so we we maintain

00:15:00,510 --> 00:15:04,680
not only like this sort of interface

00:15:02,670 --> 00:15:06,720
where you know kind of any person with a

00:15:04,680 --> 00:15:10,410
web browser can just go in and and and

00:15:06,720 --> 00:15:13,410
build and build docker images so that

00:15:10,410 --> 00:15:16,560
you know the cost of entry is low but we

00:15:13,410 --> 00:15:19,680
also have this list of power system you

00:15:16,560 --> 00:15:22,530
know power images these are you know one

00:15:19,680 --> 00:15:25,440
thing about this IBM comm is in mixes

00:15:22,530 --> 00:15:29,160
there's power architectures there's also

00:15:25,440 --> 00:15:33,030
x86 and there's Z there might be others

00:15:29,160 --> 00:15:35,700
I don't know so so we actually just

00:15:33,030 --> 00:15:38,340
differentiate with you know what we

00:15:35,700 --> 00:15:40,050
built the power and Z architectures and

00:15:38,340 --> 00:15:50,580
for this case we were just concentrating

00:15:40,050 --> 00:15:53,100
on the power kind of images so a bunch

00:15:50,580 --> 00:15:55,590
of this stuff is I already answered but

00:15:53,100 --> 00:15:57,570
you know in terms of the website we

00:15:55,590 --> 00:15:59,430
support multi file editing so one of the

00:15:57,570 --> 00:16:01,980
issues is you know docker file sometimes

00:15:59,430 --> 00:16:05,970
have attachments or other scripts that

00:16:01,980 --> 00:16:09,660
need to be used so users can upload text

00:16:05,970 --> 00:16:12,000
files or zip files you know and then the

00:16:09,660 --> 00:16:14,340
other thing is that when you get the

00:16:12,000 --> 00:16:17,450
output it's real-time streamed from

00:16:14,340 --> 00:16:19,920
whatever server is in the background

00:16:17,450 --> 00:16:22,580
that's that's processing so the

00:16:19,920 --> 00:16:25,290
essentially everything is in real-time

00:16:22,580 --> 00:16:27,330
there's also a command-line option so if

00:16:25,290 --> 00:16:29,550
you don't like clicks and things like

00:16:27,330 --> 00:16:35,310
that so the command-line option allows

00:16:29,550 --> 00:16:37,380
you to he download a binary and you

00:16:35,310 --> 00:16:40,350
could essentially run that command that

00:16:37,380 --> 00:16:43,350
does the same operation so lemme and and

00:16:40,350 --> 00:16:45,589
it has the same interface as before so

00:16:43,350 --> 00:16:45,589
me

00:16:45,900 --> 00:16:55,230
and so you know this docker file builder

00:16:50,250 --> 00:17:01,980
you can download it online and what you

00:16:55,230 --> 00:17:09,540
could do is say builds and this is

00:17:01,980 --> 00:17:13,350
essentially doing the same thing and you

00:17:09,540 --> 00:17:18,270
can also upload these images I think you

00:17:13,350 --> 00:17:21,540
need to upload and and you know you put

00:17:18,270 --> 00:17:23,550
in your username and password through

00:17:21,540 --> 00:17:25,140
those but the username one of the

00:17:23,550 --> 00:17:26,730
problems is the password you know it's

00:17:25,140 --> 00:17:28,290
kind of plain text so what you could do

00:17:26,730 --> 00:17:30,690
is you can put you can create a

00:17:28,290 --> 00:17:32,910
configuration file that has the an

00:17:30,690 --> 00:17:36,000
encrypted version of the password or you

00:17:32,910 --> 00:17:38,700
know the other thing is it supports

00:17:36,000 --> 00:17:42,420
multiple architectures so you know if I

00:17:38,700 --> 00:17:44,550
have these docker for power I could you

00:17:42,420 --> 00:17:45,750
know there's multiple as I'll tell you

00:17:44,550 --> 00:17:49,800
about the architecture you can

00:17:45,750 --> 00:17:51,450
essentially change the cue or you know

00:17:49,800 --> 00:17:53,130
where you're gonna publish and it will

00:17:51,450 --> 00:17:54,950
build for different architectures now we

00:17:53,130 --> 00:17:59,370
have to modify the docker file so that

00:17:54,950 --> 00:18:02,730
you know you cannot build a docker file

00:17:59,370 --> 00:18:05,070
on the power but you can with the same

00:18:02,730 --> 00:18:08,640
command line you know say okay I'm gonna

00:18:05,070 --> 00:18:11,580
run in parallel you know three different

00:18:08,640 --> 00:18:17,280
docker can doctor builds on different

00:18:11,580 --> 00:18:19,260
machines there's another thing with

00:18:17,280 --> 00:18:22,140
truly support which is the ability text

00:18:19,260 --> 00:18:24,660
view so you can you know you can kind of

00:18:22,140 --> 00:18:26,460
go beyond this so once you've built the

00:18:24,660 --> 00:18:28,590
docker container you can execute the

00:18:26,460 --> 00:18:30,059
commands with it within it so one thing

00:18:28,590 --> 00:18:33,540
that we use this for is for example

00:18:30,059 --> 00:18:35,670
running benchmarks so we want to have

00:18:33,540 --> 00:18:39,470
the ability to whenever we make

00:18:35,670 --> 00:18:41,880
modifications to some library code to

00:18:39,470 --> 00:18:43,320
you know build the docker build the

00:18:41,880 --> 00:18:45,210
docker container and then run some

00:18:43,320 --> 00:18:47,610
benchmarks within that and you know

00:18:45,210 --> 00:18:50,520
create kind of plots and things like

00:18:47,610 --> 00:18:53,190
that and that's a kind of an extension

00:18:50,520 --> 00:18:55,350
of this work which is what we call rye

00:18:53,190 --> 00:18:56,610
and you can kind of find information

00:18:55,350 --> 00:18:58,860
about that and

00:18:56,610 --> 00:19:00,780
and this github repo that's what we use

00:18:58,860 --> 00:19:07,410
for for teaching and kind of as

00:19:00,780 --> 00:19:11,929
infrastructure in our Center now one one

00:19:07,410 --> 00:19:14,549
problem with this is there's a lot of

00:19:11,929 --> 00:19:16,650
kind of continuously and Gration systems

00:19:14,549 --> 00:19:20,220
that would you know you'd like to use

00:19:16,650 --> 00:19:22,650
because they're tied into you know tools

00:19:20,220 --> 00:19:25,830
like github and things like that so one

00:19:22,650 --> 00:19:30,450
one example of this is Travis so Travis

00:19:25,830 --> 00:19:33,740
is a simple tool that allows you to you

00:19:30,450 --> 00:19:36,809
know you know you can use to build

00:19:33,740 --> 00:19:38,669
docker images for x86 but we also want

00:19:36,809 --> 00:19:43,260
to build for power so we actually have a

00:19:38,669 --> 00:19:45,390
sample repository that essentially what

00:19:43,260 --> 00:19:48,330
it does is within Travis it downloads

00:19:45,390 --> 00:19:50,330
this docker for power binary and uses a

00:19:48,330 --> 00:19:55,760
command line to build the images and

00:19:50,330 --> 00:20:00,090
that example is in a tool we call scope

00:19:55,760 --> 00:20:02,150
which is a benchmark suite and and and

00:20:00,090 --> 00:20:04,470
that's kind of the mechanism that that

00:20:02,150 --> 00:20:10,530
benchmark suite builds these power

00:20:04,470 --> 00:20:12,480
images that people can eat use so in

00:20:10,530 --> 00:20:15,630
terms of architecture what's happening

00:20:12,480 --> 00:20:18,510
behind the scenes what we have is what

00:20:15,630 --> 00:20:20,220
we at our Center what we've done is we

00:20:18,510 --> 00:20:24,750
built essentially a runtime for

00:20:20,220 --> 00:20:26,960
distributed kind of services and this is

00:20:24,750 --> 00:20:29,669
just a manifestation of that sort of

00:20:26,960 --> 00:20:32,490
components so what we have is at the top

00:20:29,669 --> 00:20:37,470
level is a web UI that's interacting

00:20:32,490 --> 00:20:40,020
with kind of an RPC or G RPC gateway and

00:20:37,470 --> 00:20:43,230
that's using a set of components like

00:20:40,020 --> 00:20:44,940
you know health monitoring tracing and

00:20:43,230 --> 00:20:47,580
and things like that and then in the

00:20:44,940 --> 00:20:51,090
background there's some hardware that's

00:20:47,580 --> 00:20:54,030
that is running on so when you actually

00:20:51,090 --> 00:20:55,950
do use that for example the one web page

00:20:54,030 --> 00:20:59,240
what you're actually interacting with is

00:20:55,950 --> 00:21:03,800
a web server that's essentially

00:20:59,240 --> 00:21:08,760
executing a this docker for power binary

00:21:03,800 --> 00:21:10,420
and that you know interacts with a set

00:21:08,760 --> 00:21:12,520
of worker nodes

00:21:10,420 --> 00:21:15,880
and the worker noses are responsible to

00:21:12,520 --> 00:21:18,760
publish stuff to dr. hub and you can

00:21:15,880 --> 00:21:21,910
actually have multiple of these sweets

00:21:18,760 --> 00:21:24,700
of kind of worker nodes and we classify

00:21:21,910 --> 00:21:27,430
them based on the queue so you can

00:21:24,700 --> 00:21:31,600
essentially have a user can submit a job

00:21:27,430 --> 00:21:33,370
to a to the power Q and there's a bunch

00:21:31,600 --> 00:21:37,090
of power nodes that are listening to

00:21:33,370 --> 00:21:38,860
them so as I said we have for this sort

00:21:37,090 --> 00:21:41,260
of doctor for power we have three

00:21:38,860 --> 00:21:46,930
systems that are you know in three

00:21:41,260 --> 00:21:48,400
different states essentially and but we

00:21:46,930 --> 00:21:52,360
also have other ones like you know

00:21:48,400 --> 00:21:54,580
there's a 1 for the Z system that's

00:21:52,360 --> 00:21:58,150
running and I think can Canada or

00:21:54,580 --> 00:22:01,090
something and x86 and there's also arm

00:21:58,150 --> 00:22:02,590
and other sort of architectures and the

00:22:01,090 --> 00:22:05,890
idea is that you know a user can just

00:22:02,590 --> 00:22:08,200
say okay I have five images or four

00:22:05,890 --> 00:22:10,210
images for docker images and I'm just

00:22:08,200 --> 00:22:14,970
going to run them and compile them in

00:22:10,210 --> 00:22:14,970
parallel on all these different systems

00:22:18,000 --> 00:22:27,760
in terms of resources all this code is

00:22:22,060 --> 00:22:31,750
open source so you can find it online at

00:22:27,760 --> 00:22:34,030
you know docker file builder and there's

00:22:31,750 --> 00:22:37,750
instructions on how you can essentially

00:22:34,030 --> 00:22:41,050
set up your own back-end so those are

00:22:37,750 --> 00:22:44,560
available at this ripe project so I

00:22:41,050 --> 00:22:50,320
charade and it works we've tested two

00:22:44,560 --> 00:22:55,870
works for x86 arm and power and and this

00:22:50,320 --> 00:23:00,150
Z system as 390x and all the hardware's

00:22:55,870 --> 00:23:05,610
was provided by IBM and and Oregon State

00:23:00,150 --> 00:23:09,900
so we we run on those so with that

00:23:05,610 --> 00:23:09,900
there's any questions I can

00:23:09,909 --> 00:23:24,140
yep not from you or from IBM so far what

00:23:20,270 --> 00:23:26,500
do you mean so other people that are

00:23:24,140 --> 00:23:28,850
using your docker for power front-end

00:23:26,500 --> 00:23:30,590
are there any others that are using it

00:23:28,850 --> 00:23:40,520
today is it well advertised is it well

00:23:30,590 --> 00:23:45,649
known there are a few people at IBM that

00:23:40,520 --> 00:23:46,370
are using it in terms of development

00:23:45,649 --> 00:23:50,870
efforts

00:23:46,370 --> 00:23:54,140
you know it's entirely from us although

00:23:50,870 --> 00:23:56,779
the people for Z they've contributed

00:23:54,140 --> 00:24:08,149
some stuff to patches and things like

00:23:56,779 --> 00:24:11,299
that to closed environment I don't need

00:24:08,149 --> 00:24:14,299
that man okay for the record is it a

00:24:11,299 --> 00:24:16,760
purpose that you not well use not well

00:24:14,299 --> 00:24:19,250
known can we enhance your position by

00:24:16,760 --> 00:24:21,679
evangelizing yeah I mean it's not like

00:24:19,250 --> 00:24:23,539
the position that I cornered I didn't

00:24:21,679 --> 00:24:24,260
know if you wanted people to come yeah

00:24:23,539 --> 00:24:26,179
definitely

00:24:24,260 --> 00:24:31,570
yeah yeah because we can do that right

00:24:26,179 --> 00:24:31,570
yeah it's not purpose it's just you know

00:24:38,289 --> 00:24:47,239
right yeah

00:24:44,600 --> 00:24:49,489
the other thing is yeah and this is

00:24:47,239 --> 00:24:55,489
actually running on IBM cloud the web

00:24:49,489 --> 00:24:57,739
server should be there an option there

00:24:55,489 --> 00:24:59,720
you log in your account

00:24:57,739 --> 00:25:04,309
I let migrate my container for power

00:24:59,720 --> 00:25:09,070
then see all these stuff yeah yeah

00:25:04,309 --> 00:25:14,980
definitely I'm very open to people using

00:25:09,070 --> 00:25:19,279
in terms of like tracking usage I think

00:25:14,980 --> 00:25:26,600
like there's Google Analytics I bring up

00:25:19,279 --> 00:25:28,340
it's not used by a lot of people and do

00:25:26,600 --> 00:25:30,590
you think you have enough capacity that

00:25:28,340 --> 00:25:32,419
if people piled on you'd be able to run

00:25:30,590 --> 00:25:39,590
through are you short of capacity at the

00:25:32,419 --> 00:25:42,109
moment so you could essentially you know

00:25:39,590 --> 00:25:45,859
what that's kind of one of the designs

00:25:42,109 --> 00:25:49,070
is that you can expand and contracted

00:25:45,859 --> 00:25:52,279
based on usage we have three systems

00:25:49,070 --> 00:25:54,799
that are running and I think that you

00:25:52,279 --> 00:25:56,749
know building these docker images is CPU

00:25:54,799 --> 00:25:59,419
bound you know it's as fast as you can

00:25:56,749 --> 00:26:05,450
compile and we can have a control on the

00:25:59,419 --> 00:26:11,570
queue so that oops control on the queue

00:26:05,450 --> 00:26:13,159
so that you know only one compilation is

00:26:11,570 --> 00:26:15,289
happening at the same time or you can

00:26:13,159 --> 00:26:19,340
over subscribe these to get some

00:26:15,289 --> 00:26:22,419
progress you know I don't think right

00:26:19,340 --> 00:26:24,649
now we're maxing out their capacity but

00:26:22,419 --> 00:26:26,929
probably if you know if you have but

00:26:24,649 --> 00:26:29,720
every person that's using bluemix is

00:26:26,929 --> 00:26:33,019
also using this then you know three

00:26:29,720 --> 00:26:38,359
servers might not be enough yeah the

00:26:33,019 --> 00:26:39,859
reason I ask is number one we would love

00:26:38,359 --> 00:26:41,149
to see more people using this anybody

00:26:39,859 --> 00:26:43,369
that's trying to build containers that

00:26:41,149 --> 00:26:45,440
needs a way to do it drag and drop your

00:26:43,369 --> 00:26:46,580
docker file your zip file whatever over

00:26:45,440 --> 00:26:50,510
there

00:26:46,580 --> 00:26:52,370
if you run out of capacity ask me we're

00:26:50,510 --> 00:26:53,960
gonna put this on IBM cloud at some

00:26:52,370 --> 00:26:56,960
point and have the background for it as

00:26:53,960 --> 00:26:58,580
well so and I don't know I've been kind

00:26:56,960 --> 00:27:00,650
of sitting here incognito but I'm

00:26:58,580 --> 00:27:01,400
Garrett Huizinga so Prius at that works

00:27:00,650 --> 00:27:03,710
with you

00:27:01,400 --> 00:27:04,789
works for me so a lot of the jobs that

00:27:03,710 --> 00:27:07,760
you've generated are things that we

00:27:04,789 --> 00:27:09,919
ported a power from our team but this to

00:27:07,760 --> 00:27:12,140
us has been a phenomenal service the

00:27:09,919 --> 00:27:14,990
guys here at UIUC I'm gonna do a big

00:27:12,140 --> 00:27:17,210
shout out it'll great job with this very

00:27:14,990 --> 00:27:18,770
simple interface if you want to build

00:27:17,210 --> 00:27:19,850
containers and you don't have the

00:27:18,770 --> 00:27:22,130
capacity you don't have the

00:27:19,850 --> 00:27:26,200
infrastructure build your docker file

00:27:22,130 --> 00:27:26,200
drag it in get it published

00:27:28,809 --> 00:27:34,610
Abdul the reason I was asking is kind of

00:27:32,000 --> 00:27:37,450
his words there I cover all the United

00:27:34,610 --> 00:27:40,130
States universities with all the sellers

00:27:37,450 --> 00:27:43,429
Garrett has links to all the markets if

00:27:40,130 --> 00:27:46,159
you want to open up your world to all of

00:27:43,429 --> 00:27:49,159
our ecosystem of people we can

00:27:46,159 --> 00:27:51,470
orchestrate that in short order I'll be

00:27:49,159 --> 00:27:54,169
on your campus September 9th probably

00:27:51,470 --> 00:27:56,539
when June June comes maybe we can talk

00:27:54,169 --> 00:27:59,240
about that with the lad but we need to

00:27:56,539 --> 00:28:02,380
spread the word right right and so we

00:27:59,240 --> 00:28:05,650
can orchestrate a cross industry

00:28:02,380 --> 00:28:12,260
cross-functional special University

00:28:05,650 --> 00:28:14,390
WebEx right so talk to glad mm-hmm yeah

00:28:12,260 --> 00:28:16,039
the other thing that I think kind of

00:28:14,390 --> 00:28:19,400
good going back to one of your questions

00:28:16,039 --> 00:28:23,840
is one thing that we were also we

00:28:19,400 --> 00:28:26,270
haven't it's relatively trivial is you

00:28:23,840 --> 00:28:29,419
know for that built scripts PowerPC

00:28:26,270 --> 00:28:32,860
thing they constantly update these

00:28:29,419 --> 00:28:36,230
docker files right now we what we do is

00:28:32,860 --> 00:28:38,030
even though I don't like it it's we

00:28:36,230 --> 00:28:40,280
manually like every month or something

00:28:38,030 --> 00:28:43,220
we look at the recent changes and we

00:28:40,280 --> 00:28:45,770
built those but one thing that we are

00:28:43,220 --> 00:28:49,100
able to do you know through some scripts

00:28:45,770 --> 00:28:51,100
is you can figure out which which which

00:28:49,100 --> 00:28:52,990
docker file has been changed and

00:28:51,100 --> 00:28:55,179
automatically you know

00:28:52,990 --> 00:28:57,490
those sort of things that can commit

00:28:55,179 --> 00:29:01,150
though commit them to the doctor file so

00:28:57,490 --> 00:29:03,400
you essentially can have you know thing

00:29:01,150 --> 00:29:09,360
like that I hope you know webhook or

00:29:03,400 --> 00:29:12,280
something to make changes yeah

00:29:09,360 --> 00:29:13,840
so you just triggered a thought for me

00:29:12,280 --> 00:29:15,760
that I hadn't put together I also work

00:29:13,840 --> 00:29:17,770
in the Travis CI stuff we could get a

00:29:15,760 --> 00:29:19,660
Travis die Yama file and publish it for

00:29:17,770 --> 00:29:21,280
you to the build scripts if we had a way

00:29:19,660 --> 00:29:23,830
to connect it to go to your d4p

00:29:21,280 --> 00:29:26,320
container we should talk offline but

00:29:23,830 --> 00:29:28,240
there's probably a quote/unquote easy

00:29:26,320 --> 00:29:36,450
way to go automate some of this stuff so

00:29:28,240 --> 00:29:40,480
it's doing some currency north whenever

00:29:36,450 --> 00:29:43,510
happens we download these binary you

00:29:40,480 --> 00:29:46,170
know dr. papyrus binary creates some you

00:29:43,510 --> 00:29:49,000
know configuration faso creates a new

00:29:46,170 --> 00:29:50,650
version tag put some later

00:29:49,000 --> 00:29:52,750
you know pushes the latest version and

00:29:50,650 --> 00:29:57,670
then a you know whatever the branch tag

00:29:52,750 --> 00:29:59,620
is then pushes those to dr. hub but it

00:29:57,670 --> 00:30:02,320
also you know so that uses the power but

00:29:59,620 --> 00:30:06,280
for x86 it just uses regular Travis it

00:30:02,320 --> 00:30:09,040
doesn't do anything special we plan on

00:30:06,280 --> 00:30:13,750
also writing a blog about all of you

00:30:09,040 --> 00:30:15,790
know more how do you go about doing this

00:30:13,750 --> 00:30:18,960
not from so much about architecture more

00:30:15,790 --> 00:30:18,960
about the use scenarios

00:30:21,310 --> 00:30:27,590
so I'll I can't shut up can I so when

00:30:26,330 --> 00:30:31,100
you publish when you get ready for that

00:30:27,590 --> 00:30:33,200
blog copy me or Jin John on it and we'll

00:30:31,100 --> 00:30:38,510
put it on the our blog engine from IBM

00:30:33,200 --> 00:30:42,320
as well on the developer portal so I've

00:30:38,510 --> 00:30:44,990
seen a couple of large directories on

00:30:42,320 --> 00:30:47,390
the docker hub one of them is a IBM comm

00:30:44,990 --> 00:30:49,580
that was already mentioned and probably

00:30:47,390 --> 00:30:53,210
another one is a PPC 64

00:30:49,580 --> 00:30:57,230
isn't yours no we have another one

00:30:53,210 --> 00:31:01,490
called c3 oh sorry I believe but we've

00:30:57,230 --> 00:31:06,140
been moving to this IBM comm one as well

00:31:01,490 --> 00:31:09,710
so we have another one called this C 3s

00:31:06,140 --> 00:31:13,820
R which is our Center and it also has a

00:31:09,710 --> 00:31:15,290
bunch of these PowerPC images but you

00:31:13,820 --> 00:31:22,040
know we've been moving so that's why

00:31:15,290 --> 00:31:24,290
these are two years old so to answer

00:31:22,040 --> 00:31:26,780
your question the PPC 64 LE one is

00:31:24,290 --> 00:31:29,810
actually owned by docker hub and it's

00:31:26,780 --> 00:31:32,300
one of their guys that does its he goes

00:31:29,810 --> 00:31:35,590
by tiannan but he actually does all the

00:31:32,300 --> 00:31:37,730
official builds of docker images for all

00:31:35,590 --> 00:31:39,650
architectures and those are published

00:31:37,730 --> 00:31:43,550
automatically the PPC 64 lease so that's

00:31:39,650 --> 00:31:45,470
a lock down docker only repository right

00:31:43,550 --> 00:31:47,510
so we published the IBM comm we work

00:31:45,470 --> 00:31:53,390
with them to do so that's kind of the

00:31:47,510 --> 00:32:00,830
official on that site thank you yeah so

00:31:53,390 --> 00:32:04,270
I'll be around thank you very much and

00:32:00,830 --> 00:32:04,270

YouTube URL: https://www.youtube.com/watch?v=hXh_aLLo2kE


