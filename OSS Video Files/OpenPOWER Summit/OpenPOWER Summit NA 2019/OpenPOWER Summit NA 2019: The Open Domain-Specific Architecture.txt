Title: OpenPOWER Summit NA 2019: The Open Domain-Specific Architecture
Publication date: 2019-08-28
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Bapi Vinnakota, Netronome 

Domain-specific accelerators (DSAs) are expected to be used in the data center and at the edge for a wide range of applications including machine learning, inferencing, video transcoding, database acceleration, blockchain and other applications. The Open Domain-Specific Architecture (ODSA) is a new incubation effort in the Open Compute Project. 

The ODSA project aims to enable silicon vendors, systems vendors, data center operators and others to create high-performance DSAs at low development cost and time through the use of chiplet-based designs. In chiplet-based designs, an integrated product is implemented across multiple die, referred to as chiplets, but functions as though it is implemented on a monolithic IC. Chiplet-based designs require physical and logical interfaces between chiplets.

Specifically, the ODSA aims to do the following:
1. Define open physical and logical interfaces to allow chiplets from multiple vendors to interoperate. Unlike todayâ€™s closed systems, product designers can combine best-in-class chiplets from multiple vendors.
2. Create a marketplace of chiplets that support these interfaces. Create reference implementations, business practices and operational workflows to assemble DSAs with chiplets from the marketplace.

This talk will provide a technical introduction to the ODSA, recent technical results from the group and discuss the potential application of Open Power technologies, including the OMI.
Captions: 
	00:00:00,030 --> 00:00:08,790
so thank you for all I'm being here in

00:00:02,190 --> 00:00:10,500
the session of death I've got lots and

00:00:08,790 --> 00:00:13,080
lots of slides because we're a project

00:00:10,500 --> 00:00:14,730
that's produced a lot of output just a

00:00:13,080 --> 00:00:17,039
small group so you know I'll hang around

00:00:14,730 --> 00:00:18,210
and spend more cycles in whatever you

00:00:17,039 --> 00:00:19,439
want to hear about I'll move past

00:00:18,210 --> 00:00:23,000
whatever you don't want to hear about

00:00:19,439 --> 00:00:29,210
feel free to interrupt me at any point I

00:00:23,000 --> 00:00:31,380
think the next one is at five oh five

00:00:29,210 --> 00:00:33,170
five ten okay that gives me about 30

00:00:31,380 --> 00:00:39,300
mins okay perfect

00:00:33,170 --> 00:00:42,270
so I work at metronome and I'm here to

00:00:39,300 --> 00:00:45,480
talk about a new project in the Open

00:00:42,270 --> 00:00:49,649
Compute Project and so essentially what

00:00:45,480 --> 00:00:53,010
we're trying to do is get Silicon to be

00:00:49,649 --> 00:00:55,770
developed as a collection of Chiclets

00:00:53,010 --> 00:00:58,109
rather than as monolithic dot and this

00:00:55,770 --> 00:00:59,160
is taken off in the recent past what's

00:00:58,109 --> 00:01:00,809
different about what we're trying to do

00:00:59,160 --> 00:01:03,390
is trying to make the interpreter

00:01:00,809 --> 00:01:05,010
interface be an open one so that you can

00:01:03,390 --> 00:01:06,840
mix and match giblets from multiple

00:01:05,010 --> 00:01:09,420
companies that's the basic aim of the

00:01:06,840 --> 00:01:10,920
group and we're going after accelerators

00:01:09,420 --> 00:01:12,450
normally I have to explain to everybody

00:01:10,920 --> 00:01:14,220
what an accelerator is and what are the

00:01:12,450 --> 00:01:15,600
main specific architecture it is and

00:01:14,220 --> 00:01:17,880
some why I feel like this conference we

00:01:15,600 --> 00:01:19,820
don't need to go through all that yeah

00:01:17,880 --> 00:01:23,070
so fundamentally we're going after

00:01:19,820 --> 00:01:27,210
making making accelerators and I tell

00:01:23,070 --> 00:01:29,189
you why we chose then a couple of words

00:01:27,210 --> 00:01:37,939
from my sponsor the company that pays my

00:01:29,189 --> 00:01:40,079
bills and I mean the company makes

00:01:37,939 --> 00:01:42,990
silicon and then delivers them in the

00:01:40,079 --> 00:01:44,369
form of smart Nix and what is

00:01:42,990 --> 00:01:46,770
interesting about what the company makes

00:01:44,369 --> 00:01:48,810
is there's a whole bunch of software it

00:01:46,770 --> 00:01:50,280
delivers on top of the smart mix because

00:01:48,810 --> 00:01:52,950
essentially their aim of the smartening

00:01:50,280 --> 00:01:55,619
is to offload offload compute from the

00:01:52,950 --> 00:01:59,430
host so whether it's virtual switching v

00:01:55,619 --> 00:02:01,380
router or EBP f4p for you essentially

00:01:59,430 --> 00:02:03,960
have a whole lot of ways in which you

00:02:01,380 --> 00:02:07,079
can program the data path and all of

00:02:03,960 --> 00:02:11,009
those need contributions to the open

00:02:07,079 --> 00:02:12,510
open that the Linux kernel to OpenStack

00:02:11,009 --> 00:02:13,069
and so there's a whole bunch of software

00:02:12,510 --> 00:02:18,739
the company

00:02:13,069 --> 00:02:19,939
builds up on top of that I'm also here

00:02:18,739 --> 00:02:22,400
representing the Open Compute Project

00:02:19,939 --> 00:02:24,819
which is there anybody who doesn't know

00:02:22,400 --> 00:02:27,319
about it I'll just keep zooming pass

00:02:24,819 --> 00:02:29,989
everybody knows about OCP right now so

00:02:27,319 --> 00:02:32,030
let's keep going so everybody knows that

00:02:29,989 --> 00:02:34,150
there's like six seven yards a few

00:02:32,030 --> 00:02:37,879
top-level projects we are in this

00:02:34,150 --> 00:02:41,090
where's the server I can't even see it

00:02:37,879 --> 00:02:42,159
oh here we're in the server horizontal

00:02:41,090 --> 00:02:46,790
thing that's us

00:02:42,159 --> 00:02:48,260
okay so and then I feel like I skip past

00:02:46,790 --> 00:02:48,980
this too I mean but the more interesting

00:02:48,260 --> 00:02:50,689
thing about domain-specific

00:02:48,980 --> 00:02:52,760
architectures basically is that they

00:02:50,689 --> 00:02:55,489
were still programmable but that the

00:02:52,760 --> 00:02:57,260
data path is customized to a domain so

00:02:55,489 --> 00:02:58,639
the two running examples I use our

00:02:57,260 --> 00:03:00,680
Google's tensorflow

00:02:58,639 --> 00:03:05,150
which has multiply accumulated

00:03:00,680 --> 00:03:06,829
referencing metronomes network processor

00:03:05,150 --> 00:03:08,870
which has a huge collection of light

00:03:06,829 --> 00:03:10,909
threads because I ultimately check if

00:03:08,870 --> 00:03:12,620
you have you build an NT you you know

00:03:10,909 --> 00:03:14,030
the pain point is 40 by 2 minimum size

00:03:12,620 --> 00:03:15,530
packets which come along when you need

00:03:14,030 --> 00:03:17,120
to somehow figure out how to do 5 to

00:03:15,530 --> 00:03:20,000
further a tuple look up on these

00:03:17,120 --> 00:03:22,220
miserable 45 packets and ship them

00:03:20,000 --> 00:03:23,989
somewhere so both of them give you

00:03:22,220 --> 00:03:26,120
extremely different architectures

00:03:23,989 --> 00:03:29,720
metronome is the bar how do i how do i

00:03:26,120 --> 00:03:32,900
do a gazillion light threads googles TPU

00:03:29,720 --> 00:03:36,739
is about how do I move a massive amount

00:03:32,900 --> 00:03:37,939
of data in to do a influencing I will

00:03:36,739 --> 00:03:39,889
come back to what and the main reason

00:03:37,939 --> 00:03:42,650
you do a domain-specific architecture is

00:03:39,889 --> 00:03:45,099
for the power performance improvement so

00:03:42,650 --> 00:03:49,040
what is interesting about

00:03:45,099 --> 00:03:51,079
domain-specific architectures is that by

00:03:49,040 --> 00:03:53,959
definition they serve a smaller market

00:03:51,079 --> 00:03:56,689
and if they're serving a smaller market

00:03:53,959 --> 00:03:58,159
and by definition you you're going

00:03:56,689 --> 00:04:00,919
through domain-specific architectures

00:03:58,159 --> 00:04:02,239
because you face a computer and so you

00:04:00,919 --> 00:04:04,040
want to be on the best latest and

00:04:02,239 --> 00:04:06,409
greatest process node except for the

00:04:04,040 --> 00:04:11,569
cost of developing silicon keeps going

00:04:06,409 --> 00:04:13,280
up so the second interesting you can say

00:04:11,569 --> 00:04:15,289
is I take my accelerator and may develop

00:04:13,280 --> 00:04:16,940
it on a more mature process node which

00:04:15,289 --> 00:04:18,739
case ends up being a bigger die there's

00:04:16,940 --> 00:04:20,269
some guy some somebody at what chips had

00:04:18,739 --> 00:04:22,039
this like the world's biggest wafer

00:04:20,269 --> 00:04:23,130
something you see that it was like

00:04:22,039 --> 00:04:26,269
anyway

00:04:23,130 --> 00:04:26,269
[Music]

00:04:28,690 --> 00:04:34,160
so either way DSA's in my mind present

00:04:32,060 --> 00:04:36,290
an interesting development economics

00:04:34,160 --> 00:04:38,150
challenge that's the basic that's the

00:04:36,290 --> 00:04:40,550
basic thing that we're here to solve so

00:04:38,150 --> 00:04:42,260
the answer and you know we've got the

00:04:40,550 --> 00:04:43,730
for those of you don't know we've got

00:04:42,260 --> 00:04:45,500
the whole father of triplets sitting in

00:04:43,730 --> 00:04:48,320
the audience here and he helped me make

00:04:45,500 --> 00:04:51,230
my last last slide but we're basically

00:04:48,320 --> 00:04:52,910
rehashing the work he did at Marvel so

00:04:51,230 --> 00:05:06,290
you know he can interrupt me whenever he

00:04:52,910 --> 00:05:09,410
like motivations one is to take a board

00:05:06,290 --> 00:05:12,170
and shrink it down because you want to

00:05:09,410 --> 00:05:15,460
do a Power smaller footprint whatever

00:05:12,170 --> 00:05:17,020
else on the other end is saying how to

00:05:15,460 --> 00:05:18,470
[Music]

00:05:17,020 --> 00:05:20,300
disaggregated I

00:05:18,470 --> 00:05:22,340
those are your two broad motivations and

00:05:20,300 --> 00:05:25,130
in either case you'll benefit from new

00:05:22,340 --> 00:05:27,680
interdite connectivity that's the basic

00:05:25,130 --> 00:05:34,660
pitch has a basic motivation for the

00:05:27,680 --> 00:05:34,660
group so actually we've seen all this

00:05:34,780 --> 00:05:40,490
the original

00:05:36,380 --> 00:05:44,090
Moochie then we've got a lot of chip led

00:05:40,490 --> 00:05:45,830
based product that's available so

00:05:44,090 --> 00:05:47,000
there's a lot of shipment activity but

00:05:45,830 --> 00:05:50,270
what's interesting what all the chip

00:05:47,000 --> 00:05:51,710
light activity is any multi chip product

00:05:50,270 --> 00:05:53,180
typically comes from a single company

00:05:51,710 --> 00:05:55,340
and integrates products from a single

00:05:53,180 --> 00:05:56,810
company and what we're trying to do is

00:05:55,340 --> 00:05:58,370
sort of say can you build Chipola

00:05:56,810 --> 00:06:02,530
products by integrating chip words from

00:05:58,370 --> 00:06:02,530
multiple companies right and

00:06:03,750 --> 00:06:14,230
we provide baby rich people second CEO

00:06:11,710 --> 00:06:20,850
who writes papers at IKEA by actively

00:06:14,230 --> 00:06:20,850
company and this data is so large

00:06:25,030 --> 00:06:28,270
[Music]

00:06:55,620 --> 00:06:58,689
[Music]

00:07:00,800 --> 00:07:36,600
now I have a choice of integration is a

00:07:33,720 --> 00:07:38,570
good start as a good alternative or

00:07:36,600 --> 00:07:43,830
process drink and far less expensive

00:07:38,570 --> 00:07:45,420
right and I'll skip this for now but one

00:07:43,830 --> 00:08:01,020
of the things we do as an open group is

00:07:45,420 --> 00:08:03,290
we have a lot of lot of so one one so is

00:08:01,020 --> 00:08:03,290
this

00:08:05,140 --> 00:08:27,590
and when you want to chip with this

00:08:25,160 --> 00:08:34,900
product across multiple company you have

00:08:27,590 --> 00:08:39,620
a shared shared bunk map I never shared

00:08:34,900 --> 00:08:41,570
evaluation your share until we did a

00:08:39,620 --> 00:08:43,640
survey of the audio flight or our

00:08:41,570 --> 00:08:53,270
anything you do like shared information

00:08:43,640 --> 00:08:54,500
I was astonishing really lovely split

00:08:53,270 --> 00:08:56,150
every engineer in the audience that know

00:08:54,500 --> 00:08:58,040
he does informations to secret to share

00:08:56,150 --> 00:08:59,570
and every business person said well of

00:08:58,040 --> 00:09:00,920
course we have to share it and we're

00:08:59,570 --> 00:09:35,270
going to find a way to share this

00:09:00,920 --> 00:09:38,870
information but you have to implement

00:09:35,270 --> 00:09:40,700
that and all that typically the way

00:09:38,870 --> 00:09:43,460
companies try to manage their complexity

00:09:40,700 --> 00:09:52,580
and expertise is by by buying

00:09:43,460 --> 00:09:56,870
off-the-shelf IP software for components

00:09:52,580 --> 00:09:59,240
and putting them into their check one

00:09:56,870 --> 00:10:08,540
option we're looking at is what if you

00:09:59,240 --> 00:10:16,850
could buy and then you start getting

00:10:08,540 --> 00:10:20,250
interesting economies of scale your CPU

00:10:16,850 --> 00:10:22,060
processor codes are not going to be

00:10:20,250 --> 00:10:24,620
[Music]

00:10:22,060 --> 00:10:26,330
using across multiple dying so there's a

00:10:24,620 --> 00:10:28,520
bunch of interesting options in our mind

00:10:26,330 --> 00:10:30,470
that's the basic this is a kind of basic

00:10:28,520 --> 00:10:32,030
reference architecture we use I waded

00:10:30,470 --> 00:10:33,530
through a whole bunch of papers and

00:10:32,030 --> 00:10:35,930
almost all architecture of how this

00:10:33,530 --> 00:10:37,339
basic thing in common that they they

00:10:35,930 --> 00:10:38,750
have a word domain-specific logic and

00:10:37,339 --> 00:10:40,250
they have a lot of general-purpose logic

00:10:38,750 --> 00:11:02,660
and we started out with saying let's

00:10:40,250 --> 00:11:05,630
target that general-purpose logic so the

00:11:02,660 --> 00:11:07,640
interesting thing I found was that there

00:11:05,630 --> 00:11:09,470
was like there's always a holy war at

00:11:07,640 --> 00:11:11,120
the very bottom of the stack and there's

00:11:09,470 --> 00:11:12,860
a holy war at the very top of the stack

00:11:11,120 --> 00:11:15,140
and in the middle there's like this

00:11:12,860 --> 00:11:16,910
great open room for compromise so if you

00:11:15,140 --> 00:11:19,480
looked at our chip originally we started

00:11:16,910 --> 00:11:19,480
out saying

00:11:52,210 --> 00:12:33,430
the goal is to define this OpenStack and

00:12:29,740 --> 00:12:33,430
what we want to do

00:12:37,830 --> 00:12:40,919
[Music]

00:12:44,470 --> 00:12:51,729
no low-cost interface between shipments

00:12:49,139 --> 00:12:53,079
to the market we love the mortals who

00:12:51,729 --> 00:12:55,350
want us to support more than

00:12:53,079 --> 00:12:57,669
occasionally or shrinko boredom or

00:12:55,350 --> 00:13:04,209
diversification but we want to support a

00:12:57,669 --> 00:13:07,149
very specific port instead of stack of

00:13:04,209 --> 00:13:09,549
my Chiclets how people build Chiclets

00:13:07,149 --> 00:13:16,600
were that marketplace and it would be

00:13:09,549 --> 00:13:21,179
simple products we essentially have

00:13:16,600 --> 00:13:21,179
three broad groups

00:13:28,150 --> 00:13:37,360
then we have a lot of reference designs

00:13:33,230 --> 00:13:40,340
boc work to show people our assemblies

00:13:37,360 --> 00:13:44,170
assemble mighty chief electronics from

00:13:40,340 --> 00:13:44,170
that stack and finally

00:13:45,769 --> 00:13:51,509
- I think you have a somehow find a way

00:13:49,199 --> 00:13:54,029
to distribute product order to the

00:13:51,509 --> 00:13:56,490
people providing individual Chiclets you

00:13:54,029 --> 00:13:58,379
have liabilities your product will

00:13:56,490 --> 00:14:01,949
depend on entrepreneurship regrets vol

00:13:58,379 --> 00:14:14,249
how do you handle that so whole bunch of

00:14:01,949 --> 00:14:19,800
issues with when you move to a place so

00:14:14,249 --> 00:14:21,980
these are the broad activities so it is

00:14:19,800 --> 00:14:27,360
an eye tracker this is actually we have

00:14:21,980 --> 00:14:29,999
four activities more detailed we give

00:14:27,360 --> 00:14:36,509
these look I have oversight of these so

00:14:29,999 --> 00:14:40,829
the rest of the work or with my we visit

00:14:36,509 --> 00:14:42,509
for things once we have like as very

00:14:40,829 --> 00:14:44,999
very nice and detailed analysis of

00:14:42,509 --> 00:14:47,370
interjected files so the actual

00:14:44,999 --> 00:14:48,959
mechanism the final bits move from one

00:14:47,370 --> 00:14:51,439
shape to another there's a whole bunch

00:14:48,959 --> 00:14:54,920
of competing options out there and we're

00:14:51,439 --> 00:14:58,319
we put a lot of effort into figuring out

00:14:54,920 --> 00:15:01,649
how to compare all these in a way that

00:14:58,319 --> 00:15:03,610
all the vendors can agree is fair and

00:15:01,649 --> 00:15:06,490
then we also have

00:15:03,610 --> 00:15:10,180
proposal for a new internship like five

00:15:06,490 --> 00:15:15,100
because I come to Miami so that's the

00:15:10,180 --> 00:15:17,140
bunch of let me have a fairly hefty

00:15:15,100 --> 00:15:24,160
group to here prototype work protect

00:15:17,140 --> 00:15:27,370
productive work but emergency

00:15:24,160 --> 00:15:29,740
I hear particulate design exchange and

00:15:27,370 --> 00:15:31,240
the idea is that if you're going to

00:15:29,740 --> 00:15:33,790
create stupid marketplace they need to

00:15:31,240 --> 00:15:37,390
be some ways in which you describe your

00:15:33,790 --> 00:15:42,670
triplet physical some packaging I told

00:15:37,390 --> 00:15:45,040
me the story of how the design team and

00:15:42,670 --> 00:15:47,500
the packaging team had a very different

00:15:45,040 --> 00:15:50,980
definition of the axis on which the chip

00:15:47,500 --> 00:15:53,230
was flipped and so the faculty team

00:15:50,980 --> 00:15:55,390
flipped it this way and the design team

00:15:53,230 --> 00:15:56,950
flipped it this way and so when they

00:15:55,390 --> 00:15:58,660
pack in the chips the bumps didn't match

00:15:56,950 --> 00:16:05,350
depending on the chip didn't work for a

00:15:58,660 --> 00:16:07,930
year the packaging so our basic even -

00:16:05,350 --> 00:16:10,000
you get everybody to agree on what zero

00:16:07,930 --> 00:16:13,720
zero is whether it's the center of the

00:16:10,000 --> 00:16:17,110
diet what in more order you know and

00:16:13,720 --> 00:16:17,870
therefore define your pumps how do you

00:16:17,110 --> 00:16:21,890
know

00:16:17,870 --> 00:16:23,240
and how do you describe the readiness in

00:16:21,890 --> 00:16:23,930
the chip that standards to which was

00:16:23,240 --> 00:16:26,360
tested

00:16:23,930 --> 00:16:28,220
so we acidity told these were hoping to

00:16:26,360 --> 00:16:30,020
the larger some kind of respect or a

00:16:28,220 --> 00:16:31,230
standard and I walk you through some of

00:16:30,020 --> 00:16:34,369
our activities

00:16:31,230 --> 00:16:34,369
[Music]

00:16:48,389 --> 00:16:53,919
really is for something like inferencing

00:16:51,369 --> 00:16:55,959
or video transcoding if you do machine

00:16:53,919 --> 00:16:59,949
learning you have a lot more i/o

00:16:55,959 --> 00:17:01,329
bandwidth between engines so you need a

00:16:59,949 --> 00:17:04,750
you need a very different reference

00:17:01,329 --> 00:17:07,419
architecture so what I'm going to do in

00:17:04,750 --> 00:17:09,610
the rest in the ten minutes that I have

00:17:07,419 --> 00:17:10,870
is this walk you through and please you

00:17:09,610 --> 00:17:12,730
know if you could tell me what you find

00:17:10,870 --> 00:17:37,029
interesting I'll stop there or I'll just

00:17:12,730 --> 00:17:39,399
keep zooming and moving but you move

00:17:37,029 --> 00:17:42,730
2,000 wires off the diet and if you burn

00:17:39,399 --> 00:17:45,190
otherwise anything the Pacific bridge or

00:17:42,730 --> 00:17:47,019
some other technology so Intel's AI dee'

00:17:45,190 --> 00:17:52,480
kind of falls into the butt into that

00:17:47,019 --> 00:17:55,419
pocket and then one of the other group

00:17:52,480 --> 00:18:01,840
of people take an off packaged cereal

00:17:55,419 --> 00:18:06,090
box and move it on package and and then

00:18:01,840 --> 00:18:06,090
you saw in your diet I interconnected

00:18:10,650 --> 00:19:01,600
the advantage of the organic seems to

00:18:22,660 --> 00:19:03,250
have one of the ideal so we don't have

00:19:01,600 --> 00:19:12,429
to go quite that far we think emerging

00:19:03,250 --> 00:19:16,059
products will but ideally what we're

00:19:12,429 --> 00:19:21,520
looking for is a bus that's easy can be

00:19:16,059 --> 00:19:24,929
routed in an organic substrate so the

00:19:21,520 --> 00:19:24,929
answer in our minds

00:19:29,670 --> 00:19:32,849
[Music]

00:19:45,620 --> 00:19:48,760
[Music]

00:20:20,380 --> 00:20:23,419
[Music]

00:20:46,210 --> 00:21:48,249
so you can do so you can be supported as

00:21:44,869 --> 00:21:48,249
an open-source implementation the

00:21:48,340 --> 00:21:58,659
complex good teams to design it so

00:21:53,450 --> 00:22:10,029
that's that's come back to this in a bit

00:21:58,659 --> 00:22:10,029
so prototypes we punch of prototypes

00:22:12,040 --> 00:22:16,969
[Music]

00:22:14,539 --> 00:22:19,659
with art with three excavator feature

00:22:16,969 --> 00:22:23,749
plays on the idea that this board

00:22:19,659 --> 00:22:46,369
development plan we're going to do then

00:22:23,749 --> 00:22:48,589
is based on what we've done so we've got

00:22:46,369 --> 00:22:50,869
this baseboard and so if you have your

00:22:48,589 --> 00:22:52,789
own accelerator you can reuse this

00:22:50,869 --> 00:22:55,190
design toss one of the components and

00:22:52,789 --> 00:22:56,899
the police one of these three boards

00:22:55,190 --> 00:23:00,849
with your board and you can create a

00:22:56,899 --> 00:23:00,849
package so what we try to do is create

00:23:02,709 --> 00:23:06,559
his corn his idea was one and I give

00:23:05,269 --> 00:23:10,190
you've got a fan base for the tea

00:23:06,559 --> 00:23:12,459
daughter card so if you want to use what

00:23:10,190 --> 00:23:12,459
we're hoping

00:23:56,780 --> 00:23:59,990
[Music]

00:24:00,160 --> 00:24:04,190
what you can see is as usual we're

00:24:02,810 --> 00:24:07,040
trying to raise money for this effort so

00:24:04,190 --> 00:24:09,580
if if you have some lying around please

00:24:07,040 --> 00:24:09,580
give me a call

00:24:14,060 --> 00:24:19,059
[Music]

00:24:26,410 --> 00:24:29,499
[Music]

00:24:30,210 --> 00:24:38,080
so you can share steal that's a basic

00:24:35,740 --> 00:24:39,519
intent we think that we can if you're on

00:24:38,080 --> 00:24:42,460
the net your own part will program it

00:24:39,519 --> 00:24:43,899
using data path using P for and there is

00:24:42,460 --> 00:24:47,009
CP will be program using a just

00:24:43,899 --> 00:24:51,639
straightforward GCC compiler and the

00:24:47,009 --> 00:24:53,860
atronics FPGA has its own tool chain so

00:24:51,639 --> 00:25:05,529
this we've gone through I'll skip

00:24:53,860 --> 00:25:07,570
through this so the neat thing about

00:25:05,529 --> 00:25:09,340
this design each company gets to design

00:25:07,570 --> 00:25:12,759
their own which push it all the

00:25:09,340 --> 00:25:14,110
baseboard every designer is like it's

00:25:12,759 --> 00:25:18,220
kind of might be if you're familiar with

00:25:14,110 --> 00:25:26,639
OCPs OEM project is like a mini OAM mini

00:25:18,220 --> 00:25:26,639
OAM option so then our last

00:25:33,610 --> 00:25:39,140
to deactivate our consortium they've

00:25:36,590 --> 00:25:40,820
designed to flip these IOT products they

00:25:39,140 --> 00:25:42,740
have an internal specification we want

00:25:40,820 --> 00:25:44,690
to use as a starting point for this

00:25:42,740 --> 00:25:46,190
discussion but the whole idea is like

00:25:44,690 --> 00:26:10,820
how do you come up just with a standard

00:25:46,190 --> 00:26:12,920
we defined the huge in vanity but the PC

00:26:10,820 --> 00:26:16,220
I mean if you have a board where use PCI

00:26:12,920 --> 00:26:18,080
on the outside you just shrink it into a

00:26:16,220 --> 00:26:20,210
packet and use PCR your transport

00:26:18,080 --> 00:26:23,590
protocol the inside all the software

00:26:20,210 --> 00:26:23,590
around on the board will not the package

00:26:26,260 --> 00:26:37,160
the only trick is you have to make PCIe

00:26:29,110 --> 00:26:39,500
inside if you are doing die

00:26:37,160 --> 00:26:40,760
disaggregation there's a case to be had

00:26:39,500 --> 00:26:43,550
for a new protocol

00:26:40,760 --> 00:26:46,040
just like axials on the inside of an

00:26:43,550 --> 00:26:48,220
arm-based SOC you need some kind of a

00:26:46,040 --> 00:26:48,220
new

00:26:54,600 --> 00:26:59,350
joining us please you know drop me in

00:26:57,429 --> 00:27:15,580
order out we'd show you there how to do

00:26:59,350 --> 00:27:24,130
this at the end right standardized

00:27:15,580 --> 00:27:30,640
interface between the PCs so now here

00:27:24,130 --> 00:27:33,190
you can build an adapter from the pipe

00:27:30,640 --> 00:27:35,909
interface in your series any

00:27:33,190 --> 00:27:39,299
off-the-shelf PCIe controller

00:27:35,909 --> 00:27:42,359
will transport BCI over your short-range

00:27:39,299 --> 00:27:43,499
fine it's not unique to Bunter why they

00:27:42,359 --> 00:27:48,559
need in the fight that's why if you look

00:27:43,499 --> 00:27:48,559
back at the stack this was an idea from

00:27:51,970 --> 00:27:57,559
the idea that you do that pipe adapter

00:27:54,230 --> 00:28:01,160
then you have a very simple board to

00:27:57,559 --> 00:28:03,110
package animation model as long as your

00:28:01,160 --> 00:28:06,590
Shortridge point supports the pipe

00:28:03,110 --> 00:28:11,530
adapter and controller will work with

00:28:06,590 --> 00:28:11,530
your adapter and all the software

00:28:12,160 --> 00:28:18,440
package that's the thing so this is a

00:28:15,380 --> 00:28:33,620
very clean design part about integration

00:28:18,440 --> 00:28:44,809
and what then you could take an open

00:28:33,620 --> 00:28:46,700
Cathy board and then an open caffeine

00:28:44,809 --> 00:28:50,000
back layer would find a way to work with

00:28:46,700 --> 00:28:51,950
the short range short rates early

00:28:50,000 --> 00:28:53,480
Shortridge fine short window interface

00:28:51,950 --> 00:28:57,530
whatever your shortage individual

00:28:53,480 --> 00:29:00,620
choices right so we do that if you have

00:28:57,530 --> 00:29:04,670
an abstraction is a very clean path for

00:29:00,620 --> 00:29:07,000
package to board integration how to save

00:29:04,670 --> 00:29:07,000
power

00:29:07,900 --> 00:29:13,480
the other interesting use case

00:29:20,950 --> 00:29:28,419
help me put these together thank you

00:29:25,700 --> 00:29:33,080
the whole idea here is if you go back

00:29:28,419 --> 00:29:34,400
one of the prime motivations for if you

00:29:33,080 --> 00:29:42,190
go back to this reference or

00:29:34,400 --> 00:29:42,190
architecture it was interesting we had

00:29:48,110 --> 00:29:51,480
[Music]

00:29:57,279 --> 00:30:01,659
the interesting thing goes what part

00:29:59,600 --> 00:30:05,390
would you like to buy our Chiclets today

00:30:01,659 --> 00:30:11,630
question right and you know a collection

00:30:05,390 --> 00:30:18,169
of stories like for longing so neither

00:30:11,630 --> 00:30:21,320
the separate shipment and to pull out

00:30:18,169 --> 00:30:23,580
memory a separate chip I don't know the

00:30:21,320 --> 00:30:25,950
interesting thing

00:30:23,580 --> 00:30:28,800
you can use either internal memory and a

00:30:25,950 --> 00:30:32,490
separate chip later or the interface

00:30:28,800 --> 00:30:36,810
external memory we all might create a

00:30:32,490 --> 00:30:40,170
long reach 5 a longer reach fighting on

00:30:36,810 --> 00:30:42,270
on than the traditional memory and so if

00:30:40,170 --> 00:30:43,680
you can move that to a chipler then you

00:30:42,270 --> 00:30:49,880
can have one single chip load which can

00:30:43,680 --> 00:30:49,880
be shared across multiple designs so you

00:30:53,590 --> 00:30:56,720
[Music]

00:31:28,550 --> 00:31:36,050
see what 505 then all your

00:31:48,990 --> 00:32:01,540
so today we're assuming this is our

00:31:59,650 --> 00:32:05,640
understanding and then you can sort of

00:32:01,540 --> 00:32:05,640
see where you can move the memory as a

00:32:07,110 --> 00:32:10,110
stir

00:32:15,810 --> 00:32:18,990
[Music]

00:32:24,380 --> 00:32:27,569
[Music]

00:33:02,920 --> 00:33:09,250
the all-wise

00:33:27,100 --> 00:33:30,100
we

00:34:39,060 --> 00:34:41,060
Oh

00:34:51,540 --> 00:34:59,020
so we think there's potentially using

00:34:56,230 --> 00:35:02,230
OMI as a memory transport protocol for

00:34:59,020 --> 00:35:04,210
memory disaggregation inside done and

00:35:02,230 --> 00:35:06,340
you get a whole benefit of heterogeneous

00:35:04,210 --> 00:35:08,290
integration and if there's a way to

00:35:06,340 --> 00:35:09,910
figure this out we could I could use all

00:35:08,290 --> 00:35:39,490
the help that we as a group can use all

00:35:09,910 --> 00:35:41,950
the help we can get very nice to how you

00:35:39,490 --> 00:35:44,520
can the subside of the build who knew

00:35:41,950 --> 00:35:44,520
all right

00:35:45,190 --> 00:35:51,200
[Music]

00:35:46,560 --> 00:35:51,200
remote workshops once every three months

00:35:54,840 --> 00:35:59,020
[Music]

00:35:57,600 --> 00:36:00,760
right there

00:35:59,020 --> 00:36:01,900
maybe it's good nice enough to move when

00:36:00,760 --> 00:36:04,030
Dean and they were nice enough to host

00:36:01,900 --> 00:36:13,000
her next workshop it's at IBM in

00:36:04,030 --> 00:36:15,250
al-madinah on September 12 and we mean

00:36:13,000 --> 00:36:16,120
by this you can look for you can find us

00:36:15,250 --> 00:36:18,790
at a catheter

00:36:16,120 --> 00:36:20,170
we both all the stuff together class

00:36:18,790 --> 00:36:22,530
workshop those inspections why it's

00:36:20,170 --> 00:36:22,530

YouTube URL: https://www.youtube.com/watch?v=WiyjRWYcqfA


