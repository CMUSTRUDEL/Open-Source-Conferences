Title: OpenPOWER Summit NA 2019: Highlights of OpenCAPI Verification IP
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Bipul Talukdar, SmartDV

An update on the OpenCAPI Verification IP that has been demoed by SmartDV.
Captions: 
	00:00:00,060 --> 00:00:06,240
any we're all tired we'll be quick this

00:00:03,090 --> 00:00:08,490
is an update for primarily is an update

00:00:06,240 --> 00:00:11,280
for the open copy verification IP that

00:00:08,490 --> 00:00:12,900
we had been developing and before that

00:00:11,280 --> 00:00:16,560
I'll quickly go through a few slides

00:00:12,900 --> 00:00:23,100
about our products how we do our

00:00:16,560 --> 00:00:26,340
products and ok so about 10 years back

00:00:23,100 --> 00:00:29,010
we developed something called like a

00:00:26,340 --> 00:00:32,309
smart compiler and we have a proprietary

00:00:29,010 --> 00:00:35,280
language in who is we can encode a

00:00:32,309 --> 00:00:38,670
specification and enter into our

00:00:35,280 --> 00:00:44,149
compiler and in an executable format and

00:00:38,670 --> 00:00:47,340
that can produce in a verification IP so

00:00:44,149 --> 00:00:52,140
in smart TV language this is how we try

00:00:47,340 --> 00:00:54,300
to define a verification IP basically

00:00:52,140 --> 00:00:58,739
you know the irrespective of the user

00:00:54,300 --> 00:01:01,829
platform the verification IP should be

00:00:58,739 --> 00:01:06,689
generative also for emulation simulation

00:01:01,829 --> 00:01:10,049
or for FPGA you know post silicon we

00:01:06,689 --> 00:01:11,490
also have a another version of the smart

00:01:10,049 --> 00:01:15,090
compiler that can actually generate

00:01:11,490 --> 00:01:21,720
digital design ip's given the same

00:01:15,090 --> 00:01:25,229
sparks and that's how we can you know

00:01:21,720 --> 00:01:27,659
get ahead of the market because we can

00:01:25,229 --> 00:01:31,619
be early adopters with a protocol say

00:01:27,659 --> 00:01:34,530
open copy and we can create verification

00:01:31,619 --> 00:01:37,710
IP for open copy or be like say darling

00:01:34,530 --> 00:01:44,100
for risk 5 stuff and get verification IP

00:01:37,710 --> 00:01:46,229
cranked out pretty quickly enough so so

00:01:44,100 --> 00:01:51,689
here's a statement that verification IP

00:01:46,229 --> 00:01:53,850
baselines the design ecosystems so so

00:01:51,689 --> 00:01:56,070
what I mean by that is that you have

00:01:53,850 --> 00:01:59,340
your bestfriends ready before even you

00:01:56,070 --> 00:02:02,130
do the design so given those two block

00:01:59,340 --> 00:02:04,950
diagrams one is for tile link and one is

00:02:02,130 --> 00:02:07,439
for open copy once you have that

00:02:04,950 --> 00:02:10,379
infrastructure in place you can replace

00:02:07,439 --> 00:02:11,000
any of those blocks with your design

00:02:10,379 --> 00:02:12,650
blocks

00:02:11,000 --> 00:02:17,060
and you can run your test pants pretty

00:02:12,650 --> 00:02:19,520
quickly so so that's that's where

00:02:17,060 --> 00:02:21,380
critically fit in a verification IP in

00:02:19,520 --> 00:02:23,270
their design cycles and I think that's

00:02:21,380 --> 00:02:30,500
very important and critical for you know

00:02:23,270 --> 00:02:32,959
that success so this is a list of the

00:02:30,500 --> 00:02:35,780
verification IP that we have apparently

00:02:32,959 --> 00:02:37,430
we are the largest provider in the world

00:02:35,780 --> 00:02:38,959
for before anybody bickerson I'd be

00:02:37,430 --> 00:02:41,870
different for different specifications

00:02:38,959 --> 00:02:48,020
feel free to browse our web as SmartTV

00:02:41,870 --> 00:02:51,890
that come so so this is a brief slide

00:02:48,020 --> 00:02:56,690
for our synthesizable verification IPS

00:02:51,890 --> 00:02:59,120
so we have like we can generate a

00:02:56,690 --> 00:03:01,989
verification IP versions which is seem

00:02:59,120 --> 00:03:05,660
excel compliant so what that means is

00:03:01,989 --> 00:03:07,940
with a little you know as you can use

00:03:05,660 --> 00:03:09,470
the same API Sacro simulation and

00:03:07,940 --> 00:03:12,200
emulation basically moving from

00:03:09,470 --> 00:03:14,720
simulation to emulation is is a breeze

00:03:12,200 --> 00:03:16,310
it's pretty quickly in the current in

00:03:14,720 --> 00:03:18,290
the current market you know existing

00:03:16,310 --> 00:03:20,239
solutions that you have from the big

00:03:18,290 --> 00:03:21,680
three vendors they take a lot of time

00:03:20,239 --> 00:03:23,450
when you move from simulation to

00:03:21,680 --> 00:03:26,510
emulation but because we support

00:03:23,450 --> 00:03:28,070
something like every sim axle a

00:03:26,510 --> 00:03:31,549
compliant with reasonably what that

00:03:28,070 --> 00:03:33,470
means is this conversion moving from

00:03:31,549 --> 00:03:35,480
platform to platform from ins into

00:03:33,470 --> 00:03:39,650
engines assimilation to emulation is

00:03:35,480 --> 00:03:41,900
very quick we also have verification IP

00:03:39,650 --> 00:03:45,049
for formal verification I will not go in

00:03:41,900 --> 00:03:47,600
details of that if you have questions is

00:03:45,049 --> 00:03:49,310
feel free to ask me later or reach out

00:03:47,600 --> 00:03:54,110
to me if you need more information on

00:03:49,310 --> 00:03:56,810
that and this is a so this library is

00:03:54,110 --> 00:03:59,209
somewhat new we have currently this

00:03:56,810 --> 00:04:03,260
library has for a serial port post

00:03:59,209 --> 00:04:07,340
primarily the SPM I I to see kind of

00:04:03,260 --> 00:04:09,500
protocols so you can do post silicon

00:04:07,340 --> 00:04:11,660
level verification using this

00:04:09,500 --> 00:04:13,940
verification is basically you can

00:04:11,660 --> 00:04:17,239
program or verification IP into F is ES

00:04:13,940 --> 00:04:17,880
and and can do post silicon verification

00:04:17,239 --> 00:04:22,950
using

00:04:17,880 --> 00:04:24,840
this set of verification heipiess okay

00:04:22,950 --> 00:04:26,730
so now that that was an overview on the

00:04:24,840 --> 00:04:29,400
owner product stuff and this is now

00:04:26,730 --> 00:04:31,770
quickly jumping into the highlights of

00:04:29,400 --> 00:04:34,040
our open happy verification I think

00:04:31,770 --> 00:04:38,850
that's where the highlights sure

00:04:34,040 --> 00:04:40,800
so our open copy verification IP is in

00:04:38,850 --> 00:04:42,360
the market I think about for a year now

00:04:40,800 --> 00:04:45,630
we have been we have been the early

00:04:42,360 --> 00:04:49,440
adopters we have been working with a

00:04:45,630 --> 00:04:52,020
verification IP designer team and over a

00:04:49,440 --> 00:04:56,100
year we have produced open KP

00:04:52,020 --> 00:04:58,950
verification IP that supports to the

00:04:56,100 --> 00:05:01,170
latest specification for that o with

00:04:58,950 --> 00:05:03,540
little off right now work in progress

00:05:01,170 --> 00:05:05,750
for those four bullets but other than

00:05:03,540 --> 00:05:07,380
that we kind of cover the entire photo

00:05:05,750 --> 00:05:09,240
specification today with our

00:05:07,380 --> 00:05:13,380
verification I'd be offering an open

00:05:09,240 --> 00:05:18,180
copy and it's proven by the early

00:05:13,380 --> 00:05:20,760
adopters we cannot take the name we have

00:05:18,180 --> 00:05:24,210
few early adopters who with whom we have

00:05:20,760 --> 00:05:26,670
worked and matured you know the spec and

00:05:24,210 --> 00:05:31,310
the verification IP together being the

00:05:26,670 --> 00:05:34,680
early adopters we provide the standard

00:05:31,310 --> 00:05:39,590
UVM verification IP blocks in the

00:05:34,680 --> 00:05:42,390
offering we have our host and device

00:05:39,590 --> 00:05:45,540
modes of the verification IP and we

00:05:42,390 --> 00:05:50,600
provide the passive monitoring of the

00:05:45,540 --> 00:05:53,880
pass we also you can collect coverage

00:05:50,600 --> 00:05:56,640
and also have a checker so we call the

00:05:53,880 --> 00:05:59,400
scoreboard a checker so for that that

00:05:56,640 --> 00:06:06,120
for that data pod verification on your

00:05:59,400 --> 00:06:08,190
bus any question on that I think is

00:06:06,120 --> 00:06:11,880
pretty clear yes

00:06:08,190 --> 00:06:14,160
all right so so we implement the entire

00:06:11,880 --> 00:06:17,750
open KP layers layer two layer

00:06:14,160 --> 00:06:21,930
transaction layer data link layer Phi

00:06:17,750 --> 00:06:24,890
and we provide layer debug at the layer

00:06:21,930 --> 00:06:27,590
boundaries within our verification IP

00:06:24,890 --> 00:06:29,990
that we basically do

00:06:27,590 --> 00:06:31,880
section logging at the boundary level so

00:06:29,990 --> 00:06:34,040
you know what's going into a specific

00:06:31,880 --> 00:06:36,800
layer and was coming out and you can

00:06:34,040 --> 00:06:38,870
cross verify and as you know at the same

00:06:36,800 --> 00:06:40,880
time we have our data checker going so

00:06:38,870 --> 00:06:44,420
together with that and the transaction

00:06:40,880 --> 00:06:48,080
logging you can very easily do debugging

00:06:44,420 --> 00:06:50,570
at the layer level of the protocol we

00:06:48,080 --> 00:06:54,200
support callbacks you can do various

00:06:50,570 --> 00:06:56,420
things with the callbacks right now we

00:06:54,200 --> 00:06:59,450
use callbacks for error injection

00:06:56,420 --> 00:07:02,840
deletion and we also provide some tasks

00:06:59,450 --> 00:07:04,640
that the user can modify for you know

00:07:02,840 --> 00:07:08,600
playing with the behavior of the error

00:07:04,640 --> 00:07:10,460
they inject in the design in addition

00:07:08,600 --> 00:07:11,960
you can do a back door stuff with the

00:07:10,460 --> 00:07:15,070
callbacks they are standard

00:07:11,960 --> 00:07:15,070
methodologies for that

00:07:21,200 --> 00:07:27,750
so so here I saw in this block diagram I

00:07:25,260 --> 00:07:32,370
saw a little inside our verification I'd

00:07:27,750 --> 00:07:35,640
be how its kind of architected so so

00:07:32,370 --> 00:07:38,640
it's say who the host or the other

00:07:35,640 --> 00:07:41,130
device there are two parts one is

00:07:38,640 --> 00:07:44,850
transmitter and one is a receiver and

00:07:41,130 --> 00:07:47,940
and both has and the transmitter works

00:07:44,850 --> 00:07:51,240
around a common FIFO so that common FIFO

00:07:47,940 --> 00:07:53,550
is the interface of the user so a UVM

00:07:51,240 --> 00:07:56,490
user will primarily be writing sequences

00:07:53,550 --> 00:07:59,820
to write into the FIFO and and the way

00:07:56,490 --> 00:08:03,450
our BFM that the host be FM will work is

00:07:59,820 --> 00:08:06,690
if the the training link the link is up

00:08:03,450 --> 00:08:08,820
after the training then it will look

00:08:06,690 --> 00:08:11,670
into the common FIFO and if it's empty

00:08:08,820 --> 00:08:13,650
then it will start sending oils primes

00:08:11,670 --> 00:08:15,210
and once it sees that something is in

00:08:13,650 --> 00:08:17,580
the common paper then it starts sending

00:08:15,210 --> 00:08:20,010
that over the link and in the same

00:08:17,580 --> 00:08:23,730
manner in the receiver and you have a

00:08:20,010 --> 00:08:26,940
FIFO where the receiver puts the data

00:08:23,730 --> 00:08:29,790
back is coming in into the god FIFO and

00:08:26,940 --> 00:08:32,280
then we have these states objects

00:08:29,790 --> 00:08:35,040
sitting there and that primarily you

00:08:32,280 --> 00:08:38,070
know collects information from the bus

00:08:35,040 --> 00:08:41,310
and that goes into our the monitor

00:08:38,070 --> 00:08:44,930
analysis ports and that creates the

00:08:41,310 --> 00:08:44,930
database for the functional campuses

00:08:47,550 --> 00:08:54,090
and this is something more on the debug

00:08:50,490 --> 00:08:57,000
so we implement debug ports so debug

00:08:54,090 --> 00:08:59,330
ports are primarily state variables from

00:08:57,000 --> 00:09:03,060
our bf ends within the verification IP

00:08:59,330 --> 00:09:06,810
for example for the training phase we

00:09:03,060 --> 00:09:08,820
have a link training state variable and

00:09:06,810 --> 00:09:11,220
I'm not sure if it's very clear in the

00:09:08,820 --> 00:09:14,310
way from that I saw there

00:09:11,220 --> 00:09:17,700
so you basically track that state

00:09:14,310 --> 00:09:21,060
variable as the link progresses and and

00:09:17,700 --> 00:09:24,180
and if certain sequence values that you

00:09:21,060 --> 00:09:26,670
can see within the link that's the step

00:09:24,180 --> 00:09:30,150
that state variable that develop or I

00:09:26,670 --> 00:09:32,180
mean is not correct that's when you

00:09:30,150 --> 00:09:34,530
should see a assertion is firing

00:09:32,180 --> 00:09:38,790
basically property that will be part of

00:09:34,530 --> 00:09:40,950
our in a protocol validation a part of

00:09:38,790 --> 00:09:42,750
the monitor and you should see a firing

00:09:40,950 --> 00:09:47,850
coming from there so by firing what I

00:09:42,750 --> 00:09:53,130
means is a violation and so in addition

00:09:47,850 --> 00:09:57,900
to that we support a specific way of

00:09:53,130 --> 00:10:00,960
debugging the verification with other

00:09:57,900 --> 00:10:05,700
waveforms at well from level so we call

00:10:00,960 --> 00:10:07,470
it a smart TV VIP debugs might be a PD

00:10:05,700 --> 00:10:09,600
bug and so that I probably what it does

00:10:07,470 --> 00:10:13,650
is it tablets all the transactions that

00:10:09,600 --> 00:10:16,770
you drive into a drive from your from

00:10:13,650 --> 00:10:20,940
your master or from your device or from

00:10:16,770 --> 00:10:26,070
your host and it can cross-reference

00:10:20,940 --> 00:10:28,140
between the between the transaction

00:10:26,070 --> 00:10:30,480
cable and away from so you can go back

00:10:28,140 --> 00:10:33,480
and forth also at the same time that

00:10:30,480 --> 00:10:36,480
protocol that debugger has the spec

00:10:33,480 --> 00:10:39,420
built into it so it can show you in

00:10:36,480 --> 00:10:42,240
ideal case in case of a non failure how

00:10:39,420 --> 00:10:44,520
the worm should look like and in your

00:10:42,240 --> 00:10:46,230
applications case how it is going wrong

00:10:44,520 --> 00:10:49,649
so it can basically show the differences

00:10:46,230 --> 00:10:51,509
so I have one slide on that later in the

00:10:49,649 --> 00:10:55,920
in addition just so you a pictorial view

00:10:51,509 --> 00:10:59,369
of it and this is like writing a test

00:10:55,920 --> 00:11:02,910
how we write it has e in our VIP it's

00:10:59,369 --> 00:11:07,619
pretty simple for example this is a test

00:11:02,910 --> 00:11:09,509
case that you write for training so

00:11:07,619 --> 00:11:11,939
where you basically say that you want to

00:11:09,509 --> 00:11:14,279
do first thing you have to do is what

00:11:11,939 --> 00:11:17,579
speed you want to work and so you can

00:11:14,279 --> 00:11:21,389
see that it's a 25 gigabit speed I have

00:11:17,579 --> 00:11:24,290
said in the s DVD configure I think I

00:11:21,389 --> 00:11:24,290
could choose this

00:11:33,040 --> 00:11:42,710
Yeah right there and then you do wait

00:11:38,750 --> 00:11:44,660
some time and then after you send a

00:11:42,710 --> 00:11:48,500
command frame for doing that training

00:11:44,660 --> 00:11:50,300
for the for the host and and then you

00:11:48,500 --> 00:11:52,250
process that and then after for the

00:11:50,300 --> 00:11:55,070
device you do the same thing and then

00:11:52,250 --> 00:11:57,320
you process that so this is the simplest

00:11:55,070 --> 00:12:00,470
way this is a very simple way to do a

00:11:57,320 --> 00:12:04,570
training you know done and once you do

00:12:00,470 --> 00:12:06,950
that then you can look at the logs and

00:12:04,570 --> 00:12:09,290
what is the status of your training at

00:12:06,950 --> 00:12:14,900
some point so for example here at this

00:12:09,290 --> 00:12:17,930
specific time point you have your so you

00:12:14,900 --> 00:12:19,580
have your distract and submit link

00:12:17,930 --> 00:12:21,260
training done at that point

00:12:19,580 --> 00:12:26,000
and while the receive linger is not done

00:12:21,260 --> 00:12:28,100
so if you have to retraining so as you

00:12:26,000 --> 00:12:30,620
go so you at some point you have this

00:12:28,100 --> 00:12:32,120
boat this training as done and at that

00:12:30,620 --> 00:12:37,190
point basically you are done with your

00:12:32,120 --> 00:12:41,090
training so this is what I was talking

00:12:37,190 --> 00:12:43,400
about the smart verification IP debug so

00:12:41,090 --> 00:12:45,500
so you have a transaction table go in

00:12:43,400 --> 00:12:47,750
there and that transaction table can

00:12:45,500 --> 00:12:49,520
tell you if the transaction went okay or

00:12:47,750 --> 00:12:52,370
not by bad and good there are some

00:12:49,520 --> 00:12:55,010
status going on there and and and then

00:12:52,370 --> 00:12:56,750
it also pops the waveforms and you can

00:12:55,010 --> 00:12:58,550
cross-reference at certain time point

00:12:56,750 --> 00:13:01,460
when you take your cursor you can go to

00:12:58,550 --> 00:13:04,160
the exact transaction over there so and

00:13:01,460 --> 00:13:06,530
if something is bad in that case you can

00:13:04,160 --> 00:13:08,900
see your application where it's going

00:13:06,530 --> 00:13:12,260
wrong cross referencing going back and

00:13:08,900 --> 00:13:13,940
forth on time there and if you want to

00:13:12,260 --> 00:13:17,000
see what is the ideal case then you can

00:13:13,940 --> 00:13:21,350
see your you know speck waveforms coming

00:13:17,000 --> 00:13:23,630
in another tab over there and this is

00:13:21,350 --> 00:13:25,400
independent of simulator or emulator so

00:13:23,630 --> 00:13:28,310
yeah it's kind of like it works on a

00:13:25,400 --> 00:13:30,890
post-processing basis so as any tool you

00:13:28,310 --> 00:13:36,080
may be using for your verification this

00:13:30,890 --> 00:13:40,240
debugger will still work this indices we

00:13:36,080 --> 00:13:43,490
call it smart VIP debug that was them

00:13:40,240 --> 00:13:43,790
okay so if you so it's we are in the

00:13:43,490 --> 00:13:45,680
soup

00:13:43,790 --> 00:13:49,880
roving like I said that we have more

00:13:45,680 --> 00:13:52,040
than hundred customers and and and out

00:13:49,880 --> 00:13:54,200
of the ten top semiconductors seven are

00:13:52,040 --> 00:13:56,510
our customers so you know feel free to

00:13:54,200 --> 00:13:59,810
resort to us or any of your verification

00:13:56,510 --> 00:14:01,250
IP need and also of course open copy we

00:13:59,810 --> 00:14:02,260
have the very biggest enemy out danger

00:14:01,250 --> 00:14:04,930
markets

00:14:02,260 --> 00:14:08,010
[Music]

00:14:04,930 --> 00:14:08,010

YouTube URL: https://www.youtube.com/watch?v=BTEPBiH5d0Y


