Title: OpenPOWER Summit NA 2019: POWERing up gem5
Publication date: 2019-08-28
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Basavaraj Talawar, National Institute of Technology Karnataka, Surathkal 

For the first time ever, full system POWER9 CPU model support has been added to the popular industry-academia standard gem5 architecture simulator. The implementation is done via a 3 year university project at the National Institute of Technology Karnataka, Surathkal, India and co-mentored by the Linux Technology Center at IBM, Bangalore. The functionality of the models have been fully verified by booting the OPAL firmware and the Linux kernel on gem5 on the POWER9 model.Development milestones include enabling 64-bit, little-endian support, privilege instructions and Radix MMU support, adding exception handling, and serial console support. This talk will detail the development journey, demo the Linux boot, and elaborate the future goals of this exciting project that the OpenPOWER partners from industry and academia will benefit immensely from.
Captions: 
	00:00:00,089 --> 00:00:07,350
good afternoon everyone over the past

00:00:03,410 --> 00:00:09,120
three years or so our group at NIT case

00:00:07,350 --> 00:00:11,550
erotical has been working very closely

00:00:09,120 --> 00:00:15,719
with the IBM's Linux Technology Center

00:00:11,550 --> 00:00:19,130
in Bangalore in India to build to build

00:00:15,719 --> 00:00:21,840
into gem 5 the into into the gem 5

00:00:19,130 --> 00:00:24,810
architecture simulator models of the

00:00:21,840 --> 00:00:27,240
power of processor and this talk I'm

00:00:24,810 --> 00:00:29,130
going to focus on the journey and on

00:00:27,240 --> 00:00:31,349
what we have done so far and what are

00:00:29,130 --> 00:00:33,360
the capabilities of the simulator

00:00:31,349 --> 00:00:37,620
because of this collaboration

00:00:33,360 --> 00:00:38,969
I'm Basavaraj star I'm a faculty at the

00:00:37,620 --> 00:00:44,789
National Institute of Technology

00:00:38,969 --> 00:00:48,180
Karnataka and yeah so what gem 5 is gem

00:00:44,789 --> 00:00:50,430
5 is currently the de facto architecture

00:00:48,180 --> 00:00:52,649
system architecture simulator used

00:00:50,430 --> 00:00:56,640
heavily in the computer architecture

00:00:52,649 --> 00:01:00,149
field so basically there are processor

00:00:56,640 --> 00:01:02,100
models and there are system core and

00:01:00,149 --> 00:01:03,989
uncorks so there is processor

00:01:02,100 --> 00:01:06,689
architecture that there are multiple

00:01:03,989 --> 00:01:09,030
processor models that allow us to plug

00:01:06,689 --> 00:01:11,850
in the required processor model and to

00:01:09,030 --> 00:01:12,659
simulate the processor at a given level

00:01:11,850 --> 00:01:15,060
of detail

00:01:12,659 --> 00:01:17,820
similarly there are a bunch of Iowa

00:01:15,060 --> 00:01:20,159
models and a memory subsystem models so

00:01:17,820 --> 00:01:21,750
that we can plug in the required details

00:01:20,159 --> 00:01:27,420
and and build our own system and

00:01:21,750 --> 00:01:29,310
simulate the full system so yeah this

00:01:27,420 --> 00:01:33,270
will be basically gem 5 allows their

00:01:29,310 --> 00:01:34,920
existing all components for processors

00:01:33,270 --> 00:01:36,930
for the memory subsystem the i/o

00:01:34,920 --> 00:01:41,250
subsystem and some of the interconnect

00:01:36,930 --> 00:01:43,759
and one can rig up a system of a

00:01:41,250 --> 00:01:46,829
particular configuration and execute

00:01:43,759 --> 00:01:49,860
execute workloads either as a full

00:01:46,829 --> 00:01:52,200
system mode or are in the system

00:01:49,860 --> 00:01:54,149
emulation mode then 5 the name itself

00:01:52,200 --> 00:01:59,570
the origins of gem 5 there were two

00:01:54,149 --> 00:02:02,189
simulators in the past m5 was a detailed

00:01:59,570 --> 00:02:04,380
processor and i/o model a simulator from

00:02:02,189 --> 00:02:07,140
the University of Michigan gems was the

00:02:04,380 --> 00:02:10,280
was it was a fairly detailed

00:02:07,140 --> 00:02:13,200
when a memory hierarchy simulator so the

00:02:10,280 --> 00:02:17,580
combination of both of these simulators

00:02:13,200 --> 00:02:22,590
is is gem 5 right so what gem file

00:02:17,580 --> 00:02:25,830
provides is there are a rich set of CPU

00:02:22,590 --> 00:02:27,750
models that simulate the processor at

00:02:25,830 --> 00:02:30,930
different design points starting from a

00:02:27,750 --> 00:02:33,750
simple functional simulator up to to the

00:02:30,930 --> 00:02:36,810
completely out of order simulator with

00:02:33,750 --> 00:02:38,520
all the components required to do

00:02:36,810 --> 00:02:42,300
out-of-order simulation that's one thing

00:02:38,520 --> 00:02:45,540
there are memory models for for all the

00:02:42,300 --> 00:02:48,330
levels of the hierarchy 4s Rams and D

00:02:45,540 --> 00:02:51,870
Rams and even now very recently the NB

00:02:48,330 --> 00:02:54,510
Em's and so on and so the memory

00:02:51,870 --> 00:02:56,400
hierarchy also includes some of the

00:02:54,510 --> 00:02:59,640
consistency and the coherence protocols

00:02:56,400 --> 00:03:03,150
modeling it also loves that the i/o

00:02:59,640 --> 00:03:06,030
models there are set of fiber models for

00:03:03,150 --> 00:03:11,280
byte based and block based and you know

00:03:06,030 --> 00:03:13,769
network i/o and so on two modes of

00:03:11,280 --> 00:03:15,420
simulations are possible in gem 5 the

00:03:13,769 --> 00:03:18,420
full system mode where all the

00:03:15,420 --> 00:03:20,459
components all the layers and all the

00:03:18,420 --> 00:03:22,530
components can be simulated a complete

00:03:20,459 --> 00:03:23,910
operating system can be run on e when we

00:03:22,530 --> 00:03:26,989
are running in a full system simulation

00:03:23,910 --> 00:03:31,860
mode a system call emulation mode is

00:03:26,989 --> 00:03:33,930
more of a restricted environment and we

00:03:31,860 --> 00:03:35,700
would always like to simulate and we

00:03:33,930 --> 00:03:37,620
would always like to gather you know

00:03:35,700 --> 00:03:40,320
characteristics or metrics while running

00:03:37,620 --> 00:03:42,060
in the full system simulation mode what

00:03:40,320 --> 00:03:44,549
is shown in the small table is actually

00:03:42,060 --> 00:03:46,650
there are four kinds of CPU models study

00:03:44,549 --> 00:03:48,239
from the atomic sample to the timing

00:03:46,650 --> 00:03:50,640
simple which has which has a functional

00:03:48,239 --> 00:03:52,769
simulator with minimum number of timing

00:03:50,640 --> 00:03:56,040
information associated with it and in

00:03:52,769 --> 00:03:59,180
order type lined CPU and an hour

00:03:56,040 --> 00:04:01,260
completely out of order CPU and

00:03:59,180 --> 00:04:03,510
basically the the

00:04:01,260 --> 00:04:05,790
you know in the range of you know read

00:04:03,510 --> 00:04:07,980
off is also sort of shown that the

00:04:05,790 --> 00:04:09,360
simple functional simulation will take

00:04:07,980 --> 00:04:11,790
very less time but will be least

00:04:09,360 --> 00:04:15,150
accurate whereas we are running out of

00:04:11,790 --> 00:04:16,620
orders mode the simulation will will

00:04:15,150 --> 00:04:20,040
take much longer but we get more

00:04:16,620 --> 00:04:23,010
accurate results right so why this

00:04:20,040 --> 00:04:25,260
journey began is jem v i already

00:04:23,010 --> 00:04:27,419
mentioned is popular in the computer

00:04:25,260 --> 00:04:29,370
architecture circles for all the

00:04:27,419 --> 00:04:32,340
processors shown in the first column

00:04:29,370 --> 00:04:34,650
right so there has been there has been

00:04:32,340 --> 00:04:37,010
support for the others some of the

00:04:34,650 --> 00:04:39,030
others have been you know consistently

00:04:37,010 --> 00:04:41,460
worked upon you know people are

00:04:39,030 --> 00:04:43,680
committing threads or committing models

00:04:41,460 --> 00:04:45,930
into the other processors for example

00:04:43,680 --> 00:04:49,350
arm has a you know a strong continuous

00:04:45,930 --> 00:04:54,690
support risk v is you know gathering a

00:04:49,350 --> 00:04:56,550
lot of momentum whereas the power and

00:04:54,690 --> 00:04:58,889
x86 also enables full system simulation

00:04:56,550 --> 00:05:01,400
so importantly arm x86 what is not shown

00:04:58,889 --> 00:05:05,340
here is the AMD the AMD models are also

00:05:01,400 --> 00:05:08,250
mature the AMD models can also run full

00:05:05,340 --> 00:05:09,780
system simulation now the status of the

00:05:08,250 --> 00:05:13,110
power as you can see is sort of

00:05:09,780 --> 00:05:17,280
highlighted that there is no maintainer

00:05:13,110 --> 00:05:20,970
and the power support was pre-2005 which

00:05:17,280 --> 00:05:23,340
is is a version 2.0 six and at that time

00:05:20,970 --> 00:05:25,229
it was 32-bit begin yen and it could

00:05:23,340 --> 00:05:30,120
only run system emulation mode and

00:05:25,229 --> 00:05:34,320
simple program so we took up this task

00:05:30,120 --> 00:05:37,380
that will bring up to speed to today's

00:05:34,320 --> 00:05:40,260
is a version and will try and run you

00:05:37,380 --> 00:05:42,570
know full system simulation on the power

00:05:40,260 --> 00:05:47,599
model that was the task that we set out

00:05:42,570 --> 00:05:50,130
to complete right of course the gem 5

00:05:47,599 --> 00:05:52,680
software itself the simulator itself is

00:05:50,130 --> 00:05:55,560
distributed with the you know generous

00:05:52,680 --> 00:05:59,610
bsd license so we were able to do that

00:05:55,560 --> 00:06:01,199
and gem 5 is pretty much every

00:05:59,610 --> 00:06:04,110
architecture conference and most of the

00:06:01,199 --> 00:06:05,000
papers use gem 5 it's now more or less

00:06:04,110 --> 00:06:07,320
in

00:06:05,000 --> 00:06:10,140
considered as the standard for computer

00:06:07,320 --> 00:06:12,240
architects emulation that is this is in

00:06:10,140 --> 00:06:14,730
the academia in the industry two

00:06:12,240 --> 00:06:16,920
companies heavily used I believe to some

00:06:14,730 --> 00:06:18,900
extent in inter losses AMD heavily uses

00:06:16,920 --> 00:06:23,370
gem five internally is what we've heard

00:06:18,900 --> 00:06:28,530
also they have published all of their

00:06:23,370 --> 00:06:32,040
gem five not all of some of the more you

00:06:28,530 --> 00:06:34,740
know prominent models upstream in into

00:06:32,040 --> 00:06:37,470
gem five and they have you know

00:06:34,740 --> 00:06:39,930
announced all of these changes in those

00:06:37,470 --> 00:06:43,620
several conferences of course the

00:06:39,930 --> 00:06:47,100
specific model that is that is in in

00:06:43,620 --> 00:06:47,910
md's expertise or in name these family

00:06:47,100 --> 00:06:50,520
is the APU

00:06:47,910 --> 00:06:52,290
so the APU model modeling is cycle

00:06:50,520 --> 00:06:55,020
accurate in in gem five and we can also

00:06:52,290 --> 00:06:58,710
see the total number of commits is is a

00:06:55,020 --> 00:07:01,500
large slightly a dated number similarly

00:06:58,710 --> 00:07:04,380
arm also has um so on one step ahead

00:07:01,500 --> 00:07:06,990
they have a what is packaged as a

00:07:04,380 --> 00:07:09,930
research starter kit to enable arm

00:07:06,990 --> 00:07:12,600
affiliated research worldwide so you

00:07:09,930 --> 00:07:16,140
download that research kit and it's

00:07:12,600 --> 00:07:17,880
basically a 64-bit on v8 model and again

00:07:16,140 --> 00:07:21,120
full system simulation can be around on

00:07:17,880 --> 00:07:24,120
it it also contains a GPU model and arm

00:07:21,120 --> 00:07:28,260
is one of the more you know in more

00:07:24,120 --> 00:07:32,370
active in the gem five in the gem fiber

00:07:28,260 --> 00:07:35,640
code stream so status enough power

00:07:32,370 --> 00:07:39,330
before we began the project is shown in

00:07:35,640 --> 00:07:41,910
the top box the old is a V version 2.0

00:07:39,330 --> 00:07:44,640
six 32-bit beginning programs was we

00:07:41,910 --> 00:07:46,200
were able to run with minimum be there

00:07:44,640 --> 00:07:47,970
any restricted environment no full

00:07:46,200 --> 00:07:49,770
system simulation support and newer tool

00:07:47,970 --> 00:07:53,430
chains were not working so what we

00:07:49,770 --> 00:07:57,780
planned is by the end of the but as soon

00:07:53,430 --> 00:08:03,900
as possible it try and simulate programs

00:07:57,780 --> 00:08:07,010
in is a 3.0 and and try and get 64-bit

00:08:03,900 --> 00:08:09,510
little-endian programs that's what a 3.0

00:08:07,010 --> 00:08:10,740
contains and try and get full system

00:08:09,510 --> 00:08:12,630
simulation support if these three

00:08:10,740 --> 00:08:14,010
variables were done correctly then we

00:08:12,630 --> 00:08:15,780
would be able to we should be able to

00:08:14,010 --> 00:08:19,439
run the Linux kernel that was our target

00:08:15,780 --> 00:08:23,969
when we began this project and what

00:08:19,439 --> 00:08:27,089
the mode of engagement was our group at

00:08:23,969 --> 00:08:29,309
an IT que su rascal and with the strong

00:08:27,089 --> 00:08:31,649
mentoring and with strong in

00:08:29,309 --> 00:08:34,769
collaboration with the IBM LTC in

00:08:31,649 --> 00:08:36,750
Bangalore we set out with this target

00:08:34,769 --> 00:08:38,909
and first of all people would not know

00:08:36,750 --> 00:08:40,649
where my Institute is so if you know

00:08:38,909 --> 00:08:42,899
Bangalore and that's on the right hand

00:08:40,649 --> 00:08:44,009
side right that's Bangalore in the you

00:08:42,899 --> 00:08:45,569
know underlined so that that's where

00:08:44,009 --> 00:08:50,370
Bangalore is and we are on the west

00:08:45,569 --> 00:08:54,209
coast approximately 250 miles as the

00:08:50,370 --> 00:08:56,129
crow file it's 250 miles right or do to

00:08:54,209 --> 00:08:57,990
the west of Bangalore and though there's

00:08:56,129 --> 00:09:02,009
a couple of pictures of my Institute I

00:08:57,990 --> 00:09:06,149
just wanted to show that so the mode of

00:09:02,009 --> 00:09:09,779
engagement was most of the time the

00:09:06,149 --> 00:09:13,139
group worked in the university at at at

00:09:09,779 --> 00:09:15,689
the university and some say six months

00:09:13,139 --> 00:09:20,129
or so on and off they also spent in IBM

00:09:15,689 --> 00:09:22,920
Bangalore so we are looking to expand

00:09:20,129 --> 00:09:24,990
this collaboration and we enough I try

00:09:22,920 --> 00:09:28,740
trying to seek out more groups that can

00:09:24,990 --> 00:09:31,259
participate in this gem 5 effort so the

00:09:28,740 --> 00:09:33,449
sort of talking about the phases of

00:09:31,259 --> 00:09:35,870
development the first thing we wanted to

00:09:33,449 --> 00:09:38,009
do was to support integer instructions

00:09:35,870 --> 00:09:42,029
little-endian 64-bit integer

00:09:38,009 --> 00:09:45,269
instructions these are the group members

00:09:42,029 --> 00:09:47,430
that were involved in this and the what

00:09:45,269 --> 00:09:50,189
we did was take the Linux kernel that

00:09:47,430 --> 00:09:53,699
was compiled in the 64-bit little Indian

00:09:50,189 --> 00:09:55,680
PowerPC compiler and extracted out all

00:09:53,699 --> 00:09:57,959
the instructions that that the Linux

00:09:55,680 --> 00:09:59,519
kernel uses so that was the list of

00:09:57,959 --> 00:10:01,769
instructions that had to be implemented

00:09:59,519 --> 00:10:03,480
first of all in the in the gem 5 house

00:10:01,769 --> 00:10:05,639
m5 enables implementing these

00:10:03,480 --> 00:10:08,370
instructions is it has an internal DSL

00:10:05,639 --> 00:10:10,769
that we can describe the functionality

00:10:08,370 --> 00:10:13,529
we can also basically for a given major

00:10:10,769 --> 00:10:16,110
opcode and a minor opcode what what's

00:10:13,529 --> 00:10:18,360
the and the mnemonic give X right of the

00:10:16,110 --> 00:10:23,660
functionality in it so in the DSL there

00:10:18,360 --> 00:10:27,050
that's the specific code that's the

00:10:23,660 --> 00:10:28,580
the specific program in which the you

00:10:27,050 --> 00:10:31,580
know description had to be written this

00:10:28,580 --> 00:10:34,490
is one of the earlier instructions that

00:10:31,580 --> 00:10:35,690
we added the specific example that we

00:10:34,490 --> 00:10:38,090
are showing here is parity word and

00:10:35,690 --> 00:10:40,130
parity double but of course the DRS

00:10:38,090 --> 00:10:43,580
point out to the timeline we started off

00:10:40,130 --> 00:10:45,470
in May 2017 by by Mays 2017 starting

00:10:43,580 --> 00:10:48,770
from early June 2017 we were able to

00:10:45,470 --> 00:10:50,600
lead January 2017 we had to go through a

00:10:48,770 --> 00:10:51,950
lot of code base and to figure out where

00:10:50,600 --> 00:10:55,220
it is to be added in what's to be done

00:10:51,950 --> 00:10:58,090
and we were you know you know a few

00:10:55,220 --> 00:10:59,960
months able to figure out exactly where

00:10:58,090 --> 00:11:02,120
modifications had to be done in Gem

00:10:59,960 --> 00:11:04,720
fight the m5 code base is you know sort

00:11:02,120 --> 00:11:09,620
of fairly convoluted sort of fairly

00:11:04,720 --> 00:11:11,990
large so and what has shown in the in

00:11:09,620 --> 00:11:13,340
the code itself is you know couple of

00:11:11,990 --> 00:11:15,620
instructions the parity word in the

00:11:13,340 --> 00:11:18,800
parity double word and the functionality

00:11:15,620 --> 00:11:21,470
that is required with the input operands

00:11:18,800 --> 00:11:23,780
and the functionality and that has to be

00:11:21,470 --> 00:11:26,120
coded into the amount or who has to be

00:11:23,780 --> 00:11:27,620
modeled into gem 5 we began with this

00:11:26,120 --> 00:11:29,210
and and there were large number of

00:11:27,620 --> 00:11:31,100
instructions there are few instructions

00:11:29,210 --> 00:11:33,410
that we added in it including loads and

00:11:31,100 --> 00:11:36,140
stores and family if the whole family of

00:11:33,410 --> 00:11:38,240
loads and stores and a fairly large

00:11:36,140 --> 00:11:40,610
number of addition and Matic

00:11:38,240 --> 00:11:42,260
instructions and the logic instructions

00:11:40,610 --> 00:11:43,070
or arithmetic instructions included

00:11:42,260 --> 00:11:47,570
addition subtraction multiplication

00:11:43,070 --> 00:11:49,820
dividend division and and its offshoots

00:11:47,570 --> 00:11:52,100
all of them and and of course also the

00:11:49,820 --> 00:11:53,330
modulo the logical instructions we had

00:11:52,100 --> 00:11:56,570
all the logical instructions and

00:11:53,330 --> 00:11:58,730
separately compare family count the

00:11:56,570 --> 00:12:00,200
number of ones a parity family then

00:11:58,730 --> 00:12:02,060
branches and the shifts and rotate so

00:12:00,200 --> 00:12:06,050
all of these instructions had to be

00:12:02,060 --> 00:12:08,840
written in once we had done that we had

00:12:06,050 --> 00:12:11,960
also to enable a support for elf ABI

00:12:08,840 --> 00:12:16,400
second version with the pre 2005 2006

00:12:11,960 --> 00:12:18,890
was a bi v1 so this had to be updated

00:12:16,400 --> 00:12:21,650
also so the little bit of you know code

00:12:18,890 --> 00:12:24,320
was added into Gem fight to enable

00:12:21,650 --> 00:12:27,740
support for elf ABI v2 once we had done

00:12:24,320 --> 00:12:30,080
this much we had the we had all the

00:12:27,740 --> 00:12:32,390
components in to run simple assembly

00:12:30,080 --> 00:12:35,280
code which in in which used only these

00:12:32,390 --> 00:12:37,980
bunch of instructions

00:12:35,280 --> 00:12:40,620
so that was phase one so this this this

00:12:37,980 --> 00:12:42,120
itself took some amount of time so once

00:12:40,620 --> 00:12:43,050
we've done this much then we thought

00:12:42,120 --> 00:12:45,360
okay now if there are a bunch of

00:12:43,050 --> 00:12:48,690
instructions that we can run so we'll

00:12:45,360 --> 00:12:50,790
put together a full system and try and

00:12:48,690 --> 00:12:54,300
run we'll put together a full system and

00:12:50,790 --> 00:12:55,770
see what we can do with it and we

00:12:54,300 --> 00:12:57,540
started off rigging up one system in

00:12:55,770 --> 00:12:59,220
this fairly simple system just contains

00:12:57,540 --> 00:13:03,480
one processor and the memory it's

00:12:59,220 --> 00:13:05,130
connected to a memory bus so what is

00:13:03,480 --> 00:13:07,200
being shown here is the configuration

00:13:05,130 --> 00:13:08,610
file and we sort of try modified the

00:13:07,200 --> 00:13:11,130
configuration file put total number of

00:13:08,610 --> 00:13:13,980
CPUs equal to one and the address range

00:13:11,130 --> 00:13:16,050
that we wanted to simulate right and we

00:13:13,980 --> 00:13:19,170
didn't do any anything else just

00:13:16,050 --> 00:13:21,750
absolutely simple full system is a

00:13:19,170 --> 00:13:23,280
simple system at this point once we

00:13:21,750 --> 00:13:24,870
added that then we had to add all these

00:13:23,280 --> 00:13:27,570
special registers that are required to

00:13:24,870 --> 00:13:30,450
keep context while the instructions are

00:13:27,570 --> 00:13:32,310
executing inside the processor all the

00:13:30,450 --> 00:13:33,960
special registers the counter the expect

00:13:32,310 --> 00:13:35,810
exception is the floating-point status

00:13:33,960 --> 00:13:37,830
machine status registers importantly

00:13:35,810 --> 00:13:41,880
etcetera so all of that had to be added

00:13:37,830 --> 00:13:43,440
SR of 0s are r1 the entire segments and

00:13:41,880 --> 00:13:44,970
special registers we added in and we

00:13:43,440 --> 00:13:48,300
declared all of them and we also sort of

00:13:44,970 --> 00:13:49,890
wrote how that they can be used in the

00:13:48,300 --> 00:13:53,040
input operands what will be the code

00:13:49,890 --> 00:13:55,380
names and so on all of that we put in

00:13:53,040 --> 00:13:56,700
and after that the instructions that

00:13:55,380 --> 00:13:58,470
were required was to return from

00:13:56,700 --> 00:13:59,400
interrupt so both hypervisor written

00:13:58,470 --> 00:14:02,730
from interrupts when they return from

00:13:59,400 --> 00:14:05,610
interrupts RFID instructions were added

00:14:02,730 --> 00:14:07,680
in right and what is being shown is of

00:14:05,610 --> 00:14:12,150
course the functionality of these

00:14:07,680 --> 00:14:15,540
instructions which how does the MSR get

00:14:12,150 --> 00:14:19,380
updated when the RFID instructions are H

00:14:15,540 --> 00:14:21,720
RFID instructions are executed then we

00:14:19,380 --> 00:14:25,290
were ready to add in the decremented

00:14:21,720 --> 00:14:27,630
interrupt support for of course the goal

00:14:25,290 --> 00:14:30,120
being the final in linux kernel is going

00:14:27,630 --> 00:14:31,950
to execute on this but for the kernel to

00:14:30,120 --> 00:14:33,900
have any kind of you know time out and

00:14:31,950 --> 00:14:36,089
you know context switch or any sort of

00:14:33,900 --> 00:14:38,130
you know the sense of time then we need

00:14:36,089 --> 00:14:41,370
the decremented interrupt so we put in

00:14:38,130 --> 00:14:42,360
the decremented interrupts first the

00:14:41,370 --> 00:14:44,790
couple of instructions that are

00:14:42,360 --> 00:14:46,950
highlighted there are the PC is being

00:14:44,790 --> 00:14:49,350
stored into the SR of 0

00:14:46,950 --> 00:14:51,810
and finally the pc state is zero x900

00:14:49,350 --> 00:14:57,270
that is where the decremented interrupt

00:14:51,810 --> 00:14:59,100
handling happens so we we were now at

00:14:57,270 --> 00:15:00,390
this point we were gaining expertise on

00:14:59,100 --> 00:15:02,520
or we were giving knowledge on how to

00:15:00,390 --> 00:15:05,220
include interrupt handling and how to

00:15:02,520 --> 00:15:07,800
you know simulate interrupts and into

00:15:05,220 --> 00:15:09,750
the into the m5 so once we were once

00:15:07,800 --> 00:15:11,490
once that much was done the only thing

00:15:09,750 --> 00:15:16,730
that was remaining to execute a

00:15:11,490 --> 00:15:21,570
bare-metal program was to was to set up

00:15:16,730 --> 00:15:22,590
was to set up the memory system so at

00:15:21,570 --> 00:15:25,350
this point we didn't have address

00:15:22,590 --> 00:15:26,280
translation yet so also as you can see

00:15:25,350 --> 00:15:28,170
in the code we're not actually

00:15:26,280 --> 00:15:29,550
translating any address at this point

00:15:28,170 --> 00:15:30,990
the virtual address is equal to the

00:15:29,550 --> 00:15:34,830
physical address that's something that

00:15:30,990 --> 00:15:37,790
we we do next but if we just put in a

00:15:34,830 --> 00:15:41,280
placeholder for address translation here

00:15:37,790 --> 00:15:45,720
no translation is being done but given

00:15:41,280 --> 00:15:47,730
this much with the with the the return

00:15:45,720 --> 00:15:52,230
four means will return from interrupt

00:15:47,730 --> 00:15:54,570
instruction and with the decremented

00:15:52,230 --> 00:15:59,670
interrupt and with the placeholder for

00:15:54,570 --> 00:16:01,380
the with no translation right physical

00:15:59,670 --> 00:16:03,900
this is equal to virtual address we were

00:16:01,380 --> 00:16:06,390
able to run bare metal programs at this

00:16:03,900 --> 00:16:11,850
point so or what is called the real more

00:16:06,390 --> 00:16:16,140
programs right and so that was that was

00:16:11,850 --> 00:16:17,520
again an important milestone so what was

00:16:16,140 --> 00:16:19,440
missing here was of course the address

00:16:17,520 --> 00:16:24,020
translation which is what we took up

00:16:19,440 --> 00:16:29,310
next and powered nine uses the radix

00:16:24,020 --> 00:16:32,820
page tables and that was something we

00:16:29,310 --> 00:16:35,900
had to put in so a sequence of you know

00:16:32,820 --> 00:16:39,090
figuring out how this has to be done and

00:16:35,900 --> 00:16:42,960
we put in extensive documentation inside

00:16:39,090 --> 00:16:46,470
the code to show how the the radix page

00:16:42,960 --> 00:16:49,230
table works and how does it a page table

00:16:46,470 --> 00:16:50,580
walk actually happen inside the code at

00:16:49,230 --> 00:16:54,000
this point again we were not ready to

00:16:50,580 --> 00:16:58,280
handle faults but so what is what

00:16:54,000 --> 00:17:00,080
actually was done was there was always a

00:16:58,280 --> 00:17:02,000
hit in the page table the walk was

00:17:00,080 --> 00:17:03,980
always successful so there was no fault

00:17:02,000 --> 00:17:06,890
at this point so we had taken care of

00:17:03,980 --> 00:17:09,140
that fault handling is what was missing

00:17:06,890 --> 00:17:11,569
so we added the fault handling next so

00:17:09,140 --> 00:17:13,880
that's we are entering into the third

00:17:11,569 --> 00:17:15,170
year now we're entering a so the

00:17:13,880 --> 00:17:19,850
exception handling and the fault

00:17:15,170 --> 00:17:22,069
handling was at it next so the the fault

00:17:19,850 --> 00:17:23,360
handling was required to do system calls

00:17:22,069 --> 00:17:26,540
in the first place and that was one of

00:17:23,360 --> 00:17:30,200
the things that was primarily required

00:17:26,540 --> 00:17:32,180
so the the first initial interrupts that

00:17:30,200 --> 00:17:33,740
we have that we supported was the

00:17:32,180 --> 00:17:35,450
program interrupt and the data interrupt

00:17:33,740 --> 00:17:37,520
and you know the interrupt that happens

00:17:35,450 --> 00:17:38,630
while memory is being accessed either in

00:17:37,520 --> 00:17:40,190
the instruction cache or in the data

00:17:38,630 --> 00:17:43,130
cache what is what is shown on the left

00:17:40,190 --> 00:17:44,450
hand side and on the right hand side is

00:17:43,130 --> 00:17:45,920
the asynchronous program interrupt that

00:17:44,450 --> 00:17:48,620
happens while in the middle of the

00:17:45,920 --> 00:17:51,140
execution of an instruction so if there

00:17:48,620 --> 00:17:53,480
is a if there's a decrement or interrupt

00:17:51,140 --> 00:17:54,710
for example then what is what has to be

00:17:53,480 --> 00:17:57,070
done is the current instruction

00:17:54,710 --> 00:17:59,990
completes and the next instruction will

00:17:57,070 --> 00:18:02,060
begin to execute when the RFID returns

00:17:59,990 --> 00:18:04,010
so that's why this instruction address

00:18:02,060 --> 00:18:07,610
plus 4 on the right hand side whereas in

00:18:04,010 --> 00:18:09,770
the data storage interrupt the the fault

00:18:07,610 --> 00:18:11,650
or the interrupt has occurred the

00:18:09,770 --> 00:18:14,450
interrupt has occurred while the

00:18:11,650 --> 00:18:16,190
instruction is being executed so the

00:18:14,450 --> 00:18:19,790
same instruction has to be repeated so

00:18:16,190 --> 00:18:22,850
that's those things we put in once we

00:18:19,790 --> 00:18:25,520
were once the exception handling support

00:18:22,850 --> 00:18:29,110
was added in so we were able to trap

00:18:25,520 --> 00:18:33,800
instructions and we were not ready to

00:18:29,110 --> 00:18:36,970
you know service page faults and with

00:18:33,800 --> 00:18:40,670
with all of these put in we were now

00:18:36,970 --> 00:18:46,220
more or less ready to execute the Linux

00:18:40,670 --> 00:18:49,220
kernel and so so first of all to even do

00:18:46,220 --> 00:18:51,770
that we had to modify the power you know

00:18:49,220 --> 00:18:55,700
compiled a Linux kernel because the next

00:18:51,770 --> 00:19:01,420
by default assumes that there are

00:18:55,700 --> 00:19:01,420
multiple processors so the sum of those

00:19:01,570 --> 00:19:08,270
constants had to be turned off some of

00:19:03,770 --> 00:19:09,740
the multiprocessor code code portions

00:19:08,270 --> 00:19:11,630
that resumed multiprocessor context had

00:19:09,740 --> 00:19:13,670
to be changed either to unique processor

00:19:11,630 --> 00:19:16,060
texts or had to be sort of you know

00:19:13,670 --> 00:19:18,020
commented out those things we did

00:19:16,060 --> 00:19:20,270
because at this point we didn't have

00:19:18,020 --> 00:19:22,700
doorbell tin interrupts to be able to

00:19:20,270 --> 00:19:25,790
simulate multiple process MP we didn't

00:19:22,700 --> 00:19:27,950
have that capability so as you can see

00:19:25,790 --> 00:19:30,500
what is what the arrow points to is the

00:19:27,950 --> 00:19:32,300
total number of active CPUs is equal to

00:19:30,500 --> 00:19:35,200
one so that those some of the changes we

00:19:32,300 --> 00:19:39,800
had to do in the Linux kernel itself and

00:19:35,200 --> 00:19:42,590
then we were able to run run the Linux

00:19:39,800 --> 00:19:44,030
kernel but we are able to begin in

00:19:42,590 --> 00:19:47,360
execution executing the Linux kernel

00:19:44,030 --> 00:19:50,960
there were a few errors while we were

00:19:47,360 --> 00:19:54,050
doing that they were coke the bunch of

00:19:50,960 --> 00:19:55,580
errors in the implementation of the

00:19:54,050 --> 00:19:58,130
implementations of the previous

00:19:55,580 --> 00:20:00,380
instructions and we fix that there were

00:19:58,130 --> 00:20:03,200
few instructions that we had not come

00:20:00,380 --> 00:20:07,670
across before but was what was required

00:20:03,200 --> 00:20:12,380
for example the clear complete clear of

00:20:07,670 --> 00:20:14,840
block of cash or put zeros into a block

00:20:12,380 --> 00:20:17,990
block of cash is what is shown in the

00:20:14,840 --> 00:20:21,020
bottom left and some error correction

00:20:17,990 --> 00:20:26,180
that we had done for the move mood-wise

00:20:21,020 --> 00:20:28,580
MSR and and such instructions that we

00:20:26,180 --> 00:20:32,900
had encountered with errors we did that

00:20:28,580 --> 00:20:35,210
and once we had crossed that point we

00:20:32,900 --> 00:20:37,940
came to a point where we had to get the

00:20:35,210 --> 00:20:40,730
kernel log sniffing so currently at this

00:20:37,940 --> 00:20:42,680
point we are only able to look at gem

00:20:40,730 --> 00:20:45,770
files output we are not sniffing into

00:20:42,680 --> 00:20:47,570
kernels or log and what we did to sniff

00:20:45,770 --> 00:20:49,370
out kernel log is to find out where

00:20:47,570 --> 00:20:50,870
print K actually writes into the buffer

00:20:49,370 --> 00:20:54,710
where what is the address into the

00:20:50,870 --> 00:20:57,140
buffer the print K rides into and then

00:20:54,710 --> 00:20:59,840
found out through gem five assembly or

00:20:57,140 --> 00:21:01,550
Gen 5 binary object dump we did and then

00:20:59,840 --> 00:21:03,500
finally found out the exact instruction

00:21:01,550 --> 00:21:05,560
addresses that use this and find out

00:21:03,500 --> 00:21:08,480
where the buffers addresses are and

00:21:05,560 --> 00:21:09,470
basically read that out did a DMM copy

00:21:08,480 --> 00:21:11,030
and they read it out and then that's

00:21:09,470 --> 00:21:13,160
what the output is shown in the right

00:21:11,030 --> 00:21:15,440
hand side is the kernel log we sort of

00:21:13,160 --> 00:21:18,080
you know the probe into the yeah

00:21:15,440 --> 00:21:23,230
into the gym five to get out the kernel

00:21:18,080 --> 00:21:25,790
log and we also set up GDB GDB

00:21:23,230 --> 00:21:27,830
works well with the other processor

00:21:25,790 --> 00:21:30,890
models so there was already some sort of

00:21:27,830 --> 00:21:36,260
infrastructure that hooks onto the gdb

00:21:30,890 --> 00:21:39,560
inside the m5 so with some you know hack

00:21:36,260 --> 00:21:41,180
was needed and the gdb was plugged in

00:21:39,560 --> 00:21:45,320
and we were able to you know interface

00:21:41,180 --> 00:21:46,760
with gdb also so at this point so we had

00:21:45,320 --> 00:21:48,950
both gdb and the kernel lock printing

00:21:46,760 --> 00:21:51,710
out but it was also useful to get us get

00:21:48,950 --> 00:21:53,660
a serial console in in again gem 5 has

00:21:51,710 --> 00:21:58,030
all of these infrastructure already into

00:21:53,660 --> 00:22:00,170
it a250 UART was already there and that

00:21:58,030 --> 00:22:05,450
what was required was to create a new

00:22:00,170 --> 00:22:09,770
device and we call it G 500 and that was

00:22:05,450 --> 00:22:11,330
configured to read out to read out into

00:22:09,770 --> 00:22:12,620
the serial console and we were able to

00:22:11,330 --> 00:22:14,750
get a serial console with the serial

00:22:12,620 --> 00:22:17,720
console you are able to then telnet into

00:22:14,750 --> 00:22:19,970
the into the gem 5 device and we were

00:22:17,720 --> 00:22:22,730
able to look at the order level to look

00:22:19,970 --> 00:22:24,640
at the kernel logs again so once that

00:22:22,730 --> 00:22:29,570
was done so we were able to run the full

00:22:24,640 --> 00:22:31,100
Linux kernel at this point and the next

00:22:29,570 --> 00:22:33,160
step we did was to try and put the

00:22:31,100 --> 00:22:35,920
firmware on it so that the open power

00:22:33,160 --> 00:22:38,180
opal eye open for abstraction layer what

00:22:35,920 --> 00:22:42,410
so one of the advantages with putting

00:22:38,180 --> 00:22:44,420
opal was that the device tree or the the

00:22:42,410 --> 00:22:46,700
device reconstruction opal would do for

00:22:44,420 --> 00:22:48,350
the kernel and that and also there there

00:22:46,700 --> 00:22:50,000
are other scheduling and interrupt

00:22:48,350 --> 00:22:51,860
handling capabilities that opal provides

00:22:50,000 --> 00:22:54,800
which would be which we could use later

00:22:51,860 --> 00:22:57,110
so with so that's why I opal would have

00:22:54,800 --> 00:23:01,970
been a it was a good component to put in

00:22:57,110 --> 00:23:06,050
so we again opal had to modified a

00:23:01,970 --> 00:23:07,460
little bit to to make it understand that

00:23:06,050 --> 00:23:09,770
it was running on gem fiber not on an

00:23:07,460 --> 00:23:11,140
original processor to make it understand

00:23:09,770 --> 00:23:14,060
it was running on a single processor

00:23:11,140 --> 00:23:16,370
simulation mode so there are a few TV

00:23:14,060 --> 00:23:18,740
tweaks to be done on opal so once that

00:23:16,370 --> 00:23:20,870
was done again opal was also running

00:23:18,740 --> 00:23:22,610
correctly so the built in the device

00:23:20,870 --> 00:23:24,220
tree and the device tree was handed over

00:23:22,610 --> 00:23:26,470
to the next kernel and

00:23:24,220 --> 00:23:31,419
would boot inside the m5 correctly after

00:23:26,470 --> 00:23:33,669
that so this was an important so this

00:23:31,419 --> 00:23:36,820
was an important milestone again this is

00:23:33,669 --> 00:23:39,159
what we had set out to do early so this

00:23:36,820 --> 00:23:43,870
happened in April you know there's a few

00:23:39,159 --> 00:23:49,029
months ago and what has shown is the

00:23:43,870 --> 00:23:53,110
full execution of the m5 in in the in

00:23:49,029 --> 00:23:56,279
the pictures here after that so at this

00:23:53,110 --> 00:24:01,600
point Linux is running on a uniprocessor

00:23:56,279 --> 00:24:04,720
in power 64-bit little-endian so a few

00:24:01,600 --> 00:24:08,259
changes we had we had done originally to

00:24:04,720 --> 00:24:09,909
the Linux kernel to make they can assume

00:24:08,259 --> 00:24:11,440
that the underlying processor is a

00:24:09,909 --> 00:24:13,389
uniprocessor so we had undo all the

00:24:11,440 --> 00:24:18,039
changes to make it to try and support

00:24:13,389 --> 00:24:20,559
SMT to SMT equals to that is so we

00:24:18,039 --> 00:24:22,330
turned off all of the configures MP made

00:24:20,559 --> 00:24:25,059
false and a total number of CPUs equals

00:24:22,330 --> 00:24:27,820
1 so we turned off all the all of those

00:24:25,059 --> 00:24:31,409
in the Linux kernel and one of the

00:24:27,820 --> 00:24:33,549
interrupts that was required to simulate

00:24:31,409 --> 00:24:35,230
simultaneous multi processors was the

00:24:33,549 --> 00:24:36,850
doorbell interrupt and we put in the

00:24:35,230 --> 00:24:39,460
doorbell instruction and support for the

00:24:36,850 --> 00:24:41,559
doorbell interrupt also importantly

00:24:39,460 --> 00:24:44,250
we're added the atomic instructions so

00:24:41,559 --> 00:24:51,149
at this point we were able to run the

00:24:44,250 --> 00:24:53,470
SMP kernel and yeah we undid all the

00:24:51,149 --> 00:24:57,250
changes that be done to the Linux kernel

00:24:53,470 --> 00:25:02,350
and and if you had so enough we are able

00:24:57,250 --> 00:25:06,220
to run simultaneous threads in in CPU

00:25:02,350 --> 00:25:09,490
zero and CPU one and of course there are

00:25:06,220 --> 00:25:11,649
some timing on waiting to to wake up the

00:25:09,490 --> 00:25:15,159
second CPU the first CPU wakes up the

00:25:11,649 --> 00:25:17,370
second CPU the first 30 NCP and so on

00:25:15,159 --> 00:25:19,840
but we were able to run SMT

00:25:17,370 --> 00:25:26,669
simultaneously and this is one snapshot

00:25:19,840 --> 00:25:30,220
for that so at this point yeah so open

00:25:26,669 --> 00:25:35,330
node yeah so all of this was running

00:25:30,220 --> 00:25:39,649
correctly and now a unmodified opal runs

00:25:35,330 --> 00:25:42,139
on the Linux kernel correctly runs with

00:25:39,649 --> 00:25:46,039
the relics kernel on gem 5 on a SMT

00:25:42,139 --> 00:25:48,409
equals to PowerPC now process currently

00:25:46,039 --> 00:25:53,360
we are working on the external interrupt

00:25:48,409 --> 00:25:56,570
handling and so with the external

00:25:53,360 --> 00:26:01,129
interrupt handling we are yeah so we're

00:25:56,570 --> 00:26:05,330
putting this code in I think we are we

00:26:01,129 --> 00:26:07,100
are at this stage now so the next next

00:26:05,330 --> 00:26:10,820
sequence of steps that we are planning

00:26:07,100 --> 00:26:15,619
to do is the the processor model that is

00:26:10,820 --> 00:26:19,820
currently running is the is is a timing

00:26:15,619 --> 00:26:21,769
simple processor model we are now the

00:26:19,820 --> 00:26:24,379
next stage is to put in a pipeline first

00:26:21,769 --> 00:26:25,970
of all an inorder processor and and the

00:26:24,379 --> 00:26:27,320
next stage after that if we are once we

00:26:25,970 --> 00:26:29,090
are successful with the inorder pipeline

00:26:27,320 --> 00:26:31,700
processor we will be moving on to the

00:26:29,090 --> 00:26:34,700
out of order fully pipeline processor we

00:26:31,700 --> 00:26:36,889
have to add in some of the register

00:26:34,700 --> 00:26:39,529
renaming and in the TLB is and you know

00:26:36,889 --> 00:26:42,980
scoreboards a kind of equivalence there

00:26:39,529 --> 00:26:47,269
so that's the next step for this

00:26:42,980 --> 00:26:50,779
processor of for the for the project all

00:26:47,269 --> 00:26:54,139
of the all of the code that we've been

00:26:50,779 --> 00:26:58,309
working on is on github now and it's

00:26:54,139 --> 00:27:00,649
under the family power - gem 5 the the

00:26:58,309 --> 00:27:03,529
the modified gem file code that runs the

00:27:00,649 --> 00:27:05,269
that contains the PowerPC models is in

00:27:03,529 --> 00:27:08,090
the first link the second link is the

00:27:05,269 --> 00:27:10,429
opal firmware that's again modified for

00:27:08,090 --> 00:27:12,470
this game 5 and the Linux kernel version

00:27:10,429 --> 00:27:15,230
that works with this m-phy so all of

00:27:12,470 --> 00:27:16,940
these are now uploaded and we're also in

00:27:15,230 --> 00:27:23,470
the process of up streaming all of this

00:27:16,940 --> 00:27:27,889
into the original gem 5 in my project so

00:27:23,470 --> 00:27:30,999
yeah so we are in that process and yeah

00:27:27,889 --> 00:27:34,340
so that that was what I had for now and

00:27:30,999 --> 00:27:37,789
fairly large number of students from our

00:27:34,340 --> 00:27:40,399
group have been involved and one half of

00:27:37,789 --> 00:27:42,799
them are currently at IBM also and also

00:27:40,399 --> 00:27:45,500
a very strong support from IBM the first

00:27:42,799 --> 00:27:48,020
row is I have to call out Madhavan unjú

00:27:45,500 --> 00:27:52,450
and Gowtham they are the ones who drove

00:27:48,020 --> 00:27:54,980
the mentoring from the IBM side

00:27:52,450 --> 00:27:57,590
throughout the project of course the the

00:27:54,980 --> 00:27:59,240
bottom three are the second row three

00:27:57,590 --> 00:28:02,059
guys are all students were all students

00:27:59,240 --> 00:28:04,400
who are currently working with IBM LTC

00:28:02,059 --> 00:28:06,049
in Bangalore based on their experience

00:28:04,400 --> 00:28:08,360
in the gem 5 project they were all sort

00:28:06,049 --> 00:28:10,460
of you know inclusion - so that was a

00:28:08,360 --> 00:28:14,450
good win for them and it was it was

00:28:10,460 --> 00:28:16,820
great for us all so yeah this slide

00:28:14,450 --> 00:28:19,070
doesn't have the de deepankar sharma who

00:28:16,820 --> 00:28:21,770
was the feed idea for this but but

00:28:19,070 --> 00:28:25,720
that's had two men I have to mention the

00:28:21,770 --> 00:28:27,890
banker also here so yeah so we're only

00:28:25,720 --> 00:28:30,049
we're only beginning to see a lot of

00:28:27,890 --> 00:28:31,370
possibilities again I'm talking to

00:28:30,049 --> 00:28:35,210
people here and there they're saying

00:28:31,370 --> 00:28:36,830
where is this feature and and others and

00:28:35,210 --> 00:28:39,890
so there are a bunch of components that

00:28:36,830 --> 00:28:42,830
we still have to work on the core and

00:28:39,890 --> 00:28:46,250
the encore I think so the it's it's an

00:28:42,830 --> 00:28:47,809
exciting journey and we are where we

00:28:46,250 --> 00:28:49,970
hope that more people will come on board

00:28:47,809 --> 00:28:51,429
we are looking for more universities and

00:28:49,970 --> 00:28:54,470
more groups to sort of work with us

00:28:51,429 --> 00:28:56,840
together to sort of build a full system

00:28:54,470 --> 00:29:00,380
simulation model and the vision is a

00:28:56,840 --> 00:29:03,530
sort of a very you know slightly a large

00:29:00,380 --> 00:29:06,230
one so it's it will require multiple

00:29:03,530 --> 00:29:08,980
groups and multiple people to be working

00:29:06,230 --> 00:29:10,970
together on on this so that's all I had

00:29:08,980 --> 00:29:13,179
thanks Diane thanks thank you for the

00:29:10,970 --> 00:29:13,179
time

00:29:17,100 --> 00:29:20,359
[Applause]

00:29:24,580 --> 00:29:28,820
the i/o modules are all there

00:29:26,769 --> 00:29:30,229
specifically from the power system we

00:29:28,820 --> 00:29:32,570
have not seen anything we're not even

00:29:30,229 --> 00:29:34,460
we've not gone there yet but there are a

00:29:32,570 --> 00:29:36,710
bunch of i/o models that are both

00:29:34,460 --> 00:29:40,129
generic and for example any other system

00:29:36,710 --> 00:29:41,840
the x86 systems and so they all have our

00:29:40,129 --> 00:29:43,639
models we haven't tinkered with any of

00:29:41,840 --> 00:29:45,259
these ever models yet but they are all

00:29:43,639 --> 00:29:54,859
there and and in the simulation yeah

00:29:45,259 --> 00:29:57,229
they're all in the simulation so that is

00:29:54,859 --> 00:29:59,269
the goal yes as I said that is the

00:29:57,229 --> 00:30:14,629
that's what we are after we want to do

00:29:59,269 --> 00:30:17,539
that right so we have not gone to that

00:30:14,629 --> 00:30:21,320
point so I I can't comment but the idea

00:30:17,539 --> 00:30:24,889
really is the holy really is to be able

00:30:21,320 --> 00:30:27,619
to simulate all of the confidence

00:30:24,889 --> 00:30:30,109
correctly the hope all was one of the in

00:30:27,619 --> 00:30:36,200
that in that line so we put in fall

00:30:30,109 --> 00:30:39,139
first so yeah so all of the stuff that

00:30:36,200 --> 00:30:40,549
we are looking at right so am i open

00:30:39,139 --> 00:30:43,190
Caffey so we don't know there are so

00:30:40,549 --> 00:30:44,929
many things much later but if you know

00:30:43,190 --> 00:30:47,479
I'm still they are not still at that

00:30:44,929 --> 00:30:50,100
point it but that's something that we

00:30:47,479 --> 00:30:55,190
want if somebody else can

00:30:50,100 --> 00:31:02,720
[Music]

00:30:55,190 --> 00:31:02,720
yes yes yes

00:31:03,139 --> 00:31:12,910
yes yes it would be too early to say

00:31:09,600 --> 00:31:14,440
that will replace what you have but

00:31:12,910 --> 00:31:17,450
[Music]

00:31:14,440 --> 00:31:20,590
but it'll be so much easier when you

00:31:17,450 --> 00:31:23,750
have your own open-source simulator that

00:31:20,590 --> 00:31:25,490
you're free to use and modify and also

00:31:23,750 --> 00:31:27,799
the Academy is is also working on this

00:31:25,490 --> 00:31:30,649
the m5 so that's where the you know

00:31:27,799 --> 00:31:39,190
value comes in for the simulator come

00:31:30,649 --> 00:31:39,190
sorry yes yes

00:31:39,940 --> 00:31:45,080
so they have been first of all surprised

00:31:42,740 --> 00:31:47,659
because after 2005 there has not been a

00:31:45,080 --> 00:32:00,440
maintainer there is also the core group

00:31:47,659 --> 00:32:03,379
in in dev 5 so yeah so that I think that

00:32:00,440 --> 00:32:05,899
person andreas somebody says is not a

00:32:03,379 --> 00:32:07,909
part of the m5 anymore so they don't

00:32:05,899 --> 00:32:11,120
have the power expertise so they are

00:32:07,909 --> 00:32:13,580
coming back to us asking us to validate

00:32:11,120 --> 00:32:16,190
and everything so that's happening right

00:32:13,580 --> 00:32:17,570
now that conversation is going on but

00:32:16,190 --> 00:32:20,059
that's been happening since two months

00:32:17,570 --> 00:32:21,799
Arad now but it wasn't accepted

00:32:20,059 --> 00:32:24,590
immediately because they aren't also not

00:32:21,799 --> 00:32:26,450
sure what has to be done what's correct

00:32:24,590 --> 00:32:28,009
and what happens to be always how it is

00:32:26,450 --> 00:32:33,470
to be validated but that process is

00:32:28,009 --> 00:32:35,260
going on yes I'm a faculty of the

00:32:33,470 --> 00:32:44,919
university s

00:32:35,260 --> 00:32:48,940
yes yes I'm a professor yeah it's a part

00:32:44,919 --> 00:32:51,190
of their curriculum and so usually so

00:32:48,940 --> 00:32:53,770
all the all the students master student

00:32:51,190 --> 00:32:57,790
and it was their final one-year project

00:32:53,770 --> 00:33:00,160
we have 10 11 months finally a project

00:32:57,790 --> 00:33:03,059
so when we said they work both at the

00:33:00,160 --> 00:33:05,950
University at that IBM so the mode is

00:33:03,059 --> 00:33:08,110
they're working on gem 5 at the

00:33:05,950 --> 00:33:10,390
University for the first six months or

00:33:08,110 --> 00:33:13,510
so after that they they could probably

00:33:10,390 --> 00:33:15,280
go to IBM for the another six months and

00:33:13,510 --> 00:33:17,530
when they go to IBM they get of course

00:33:15,280 --> 00:33:19,710
internship there's otherwise also there

00:33:17,530 --> 00:33:22,870
they have scholarship as part of their

00:33:19,710 --> 00:33:28,210
masters course so that is anyways

00:33:22,870 --> 00:33:30,580
they're not when they are in the

00:33:28,210 --> 00:33:33,870
university when they go to IBM's as

00:33:30,580 --> 00:33:37,740
interns usually they go as EB transfer

00:33:33,870 --> 00:33:41,500
yes the mode of engagement is remote

00:33:37,740 --> 00:33:42,880
calls and you know Skype and that kind

00:33:41,500 --> 00:33:50,500
of thing every week that sort of thing

00:33:42,880 --> 00:33:54,040
has been happening yet this now there's

00:33:50,500 --> 00:33:57,160
one there's one only so usually it's

00:33:54,040 --> 00:33:57,460
just two per year it's been three years

00:33:57,160 --> 00:33:58,850
now

00:33:57,460 --> 00:34:01,960
two per year

00:33:58,850 --> 00:34:01,960
[Music]

00:34:06,350 --> 00:34:08,889
it's

00:34:09,680 --> 00:34:16,240
so if there aren't any more thank you

00:34:13,310 --> 00:34:16,240

YouTube URL: https://www.youtube.com/watch?v=KHvHdottdJA


