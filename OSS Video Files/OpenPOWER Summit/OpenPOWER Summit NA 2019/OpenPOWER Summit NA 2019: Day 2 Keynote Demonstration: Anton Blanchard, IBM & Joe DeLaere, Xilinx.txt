Title: OpenPOWER Summit NA 2019: Day 2 Keynote Demonstration: Anton Blanchard, IBM & Joe DeLaere, Xilinx
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:04,560
so this all started with a simple

00:00:02,010 --> 00:00:06,569
question for us now you've heard the

00:00:04,560 --> 00:00:07,710
announce from Ken inside IBM we were

00:00:06,569 --> 00:00:10,019
quite excited by it

00:00:07,710 --> 00:00:12,330
but the question to us was what else

00:00:10,019 --> 00:00:14,309
could we bring it's great to come with

00:00:12,330 --> 00:00:17,670
an announcement but can we do anything

00:00:14,309 --> 00:00:20,810
tangible could be perhaps simulate a

00:00:17,670 --> 00:00:24,810
simple power ice a call could we

00:00:20,810 --> 00:00:26,189
synthesize something on an FPGA even so

00:00:24,810 --> 00:00:29,189
a couple months ago we took that idea

00:00:26,189 --> 00:00:31,470
away and thought about it now first

00:00:29,189 --> 00:00:32,460
thing I'd like to point out a bit of

00:00:31,470 --> 00:00:34,770
background about myself

00:00:32,460 --> 00:00:37,559
I'm predominately a software person I

00:00:34,770 --> 00:00:39,450
work with Hardware people but the last

00:00:37,559 --> 00:00:42,140
line of VHDL I wrote was at college I

00:00:39,450 --> 00:00:44,910
wrote a counter it probably didn't count

00:00:42,140 --> 00:00:47,879
I've never had to design any significant

00:00:44,910 --> 00:00:49,250
hardware and we only had a couple months

00:00:47,879 --> 00:00:53,070
to make this happen

00:00:49,250 --> 00:00:56,640
yeah would you trust this man to build

00:00:53,070 --> 00:00:58,530
hardware I certainly would not so what

00:00:56,640 --> 00:01:00,870
but why we can we can announce today is

00:00:58,530 --> 00:01:03,359
something very simple it's a first step

00:01:00,870 --> 00:01:06,150
in a journey we call it microwatt it's a

00:01:03,359 --> 00:01:09,570
tiny power call it's open power is a

00:01:06,150 --> 00:01:12,570
scalar fixed point subset compliant it's

00:01:09,570 --> 00:01:15,090
written in VHDL 2008 it uses an

00:01:12,570 --> 00:01:18,540
open-source tools toolkit for simulation

00:01:15,090 --> 00:01:20,880
called G HDL it uses these are links to

00:01:18,540 --> 00:01:23,130
Vado toolset for when we want to do FPGA

00:01:20,880 --> 00:01:24,689
synthesis and it's not yet available but

00:01:23,130 --> 00:01:29,700
it will be shortly available up on

00:01:24,689 --> 00:01:33,119
github very simple very simple by CPU

00:01:29,700 --> 00:01:36,210
standards it's single issue in order the

00:01:33,119 --> 00:01:38,070
aim is to be very simple and we reuse

00:01:36,210 --> 00:01:39,900
other open hardware components where it

00:01:38,070 --> 00:01:42,180
makes sense there was no sense for us to

00:01:39,900 --> 00:01:43,290
build a UART for example so we just

00:01:42,180 --> 00:01:49,200
pulled it in from the open hardware

00:01:43,290 --> 00:01:50,850
world classic risk pipeline we had to

00:01:49,200 --> 00:01:52,320
stretch it a bit for timing but I mean

00:01:50,850 --> 00:01:53,970
this is textbook what anyone would

00:01:52,320 --> 00:01:59,189
probably do at college if they done

00:01:53,970 --> 00:02:00,509
hardware which I hadn't so we we had the

00:01:59,189 --> 00:02:01,770
makings of a core what are we going to

00:02:00,509 --> 00:02:05,040
do next well we've got to run something

00:02:01,770 --> 00:02:07,829
on it so one it run micro Python anyone

00:02:05,040 --> 00:02:09,810
heard of Micro Python before yes no a

00:02:07,829 --> 00:02:13,920
few people heard of Python I hope hope

00:02:09,810 --> 00:02:16,260
so so basically it's just a very simple

00:02:13,920 --> 00:02:18,150
embedded interpreter and the idea here

00:02:16,260 --> 00:02:20,069
is is it's self-contained it's simple

00:02:18,150 --> 00:02:21,540
but it's actually quite useful and it's

00:02:20,069 --> 00:02:22,709
used in a lot of places you'll see it

00:02:21,540 --> 00:02:24,390
all over the place in the

00:02:22,709 --> 00:02:27,150
microcontroller and low-end kind of

00:02:24,390 --> 00:02:29,400
embedded world so we took micro Python

00:02:27,150 --> 00:02:31,620
and one of the team back home Michael

00:02:29,400 --> 00:02:33,810
kneeling ported it to our microwatt core

00:02:31,620 --> 00:02:35,610
one of the good things we found was it

00:02:33,810 --> 00:02:36,989
didn't require any generic changes

00:02:35,610 --> 00:02:39,120
basically all we had to do was add

00:02:36,989 --> 00:02:40,440
platform code which is what you always

00:02:39,120 --> 00:02:42,660
have to do when you add a new platform

00:02:40,440 --> 00:02:43,560
to micro Python things like the console

00:02:42,660 --> 00:02:46,590
and stuff like that

00:02:43,560 --> 00:02:49,080
and with that we had basically the

00:02:46,590 --> 00:02:51,180
makings of a very simple open pair us a

00:02:49,080 --> 00:02:53,370
core so what we're seeing here is we're

00:02:51,180 --> 00:02:55,769
just going in to build micro Python and

00:02:53,370 --> 00:02:57,299
it builds and it produces an image it's

00:02:55,769 --> 00:02:59,819
basically a ram image that we can load

00:02:57,299 --> 00:03:07,350
in so now we jump into microwatt and we

00:02:59,819 --> 00:03:08,819
rebuild it and once we build it then we

00:03:07,350 --> 00:03:10,920
basically all we have to do is link in

00:03:08,819 --> 00:03:13,290
the RAM image that we built from Python

00:03:10,920 --> 00:03:15,900
and we run it and basically at that

00:03:13,290 --> 00:03:19,380
stage we are interacting with a

00:03:15,900 --> 00:03:22,350
simulated power core so this is the

00:03:19,380 --> 00:03:24,239
compiled VHDL and basically executing

00:03:22,350 --> 00:03:26,370
you know instructions as you would on

00:03:24,239 --> 00:03:28,410
real hardware it's a little slow

00:03:26,370 --> 00:03:34,650
obviously and and hopefully we can add

00:03:28,410 --> 00:03:36,209
up and we can fantastic so there was the

00:03:34,650 --> 00:03:37,380
first step we've simulated something

00:03:36,209 --> 00:03:40,230
what can we do next

00:03:37,380 --> 00:03:42,000
well next step was enter I had an FPGA

00:03:40,230 --> 00:03:45,810
board lying around and it was a fairly

00:03:42,000 --> 00:03:47,609
old one it's a Xilinx art except PGA and

00:03:45,810 --> 00:03:49,620
a little development board for him I

00:03:47,609 --> 00:03:51,359
think digital it the question was can we

00:03:49,620 --> 00:03:57,870
take that VHDL and can we make it work

00:03:51,359 --> 00:04:00,209
on top of the the FPGA and turns out we

00:03:57,870 --> 00:04:00,750
can so this is just a quick demo of

00:04:00,209 --> 00:04:04,140
Votto

00:04:00,750 --> 00:04:08,600
we're basically loading up the VHDL the

00:04:04,140 --> 00:04:10,500
VHD of the built VHDL loading on on to a

00:04:08,600 --> 00:04:12,660
onto the FPGA

00:04:10,500 --> 00:04:15,060
just over the USB and if we flip across

00:04:12,660 --> 00:04:16,380
after this point we get the micro Python

00:04:15,060 --> 00:04:18,720
shell so this is actually running micro

00:04:16,380 --> 00:04:19,889
part for now and I if PJ and the first

00:04:18,720 --> 00:04:26,280
thing you always want to do is run a

00:04:19,889 --> 00:04:27,870
hollow world and that runs great we'll

00:04:26,280 --> 00:04:29,280
also try something a little more stress

00:04:27,870 --> 00:04:30,990
other than that because that doesn't

00:04:29,280 --> 00:04:32,490
really prove too much so we'll just run

00:04:30,990 --> 00:04:34,580
a quick Fibonacci sequence

00:04:32,490 --> 00:04:36,750
so we'll just copy and paste that and

00:04:34,580 --> 00:04:41,520
then copy it back into the Python

00:04:36,750 --> 00:04:43,169
interpreter and it runs so we've got

00:04:41,520 --> 00:04:44,190
something now that runs on an FPGA and

00:04:43,169 --> 00:04:44,850
so we thought that was pretty cool

00:04:44,190 --> 00:04:49,229
that's great

00:04:44,850 --> 00:04:51,270
what next at that point well firstly I

00:04:49,229 --> 00:04:53,000
would like to point out I'm sure you're

00:04:51,270 --> 00:04:56,400
thinking at the moment your nice demo

00:04:53,000 --> 00:04:57,660
but other any smoke and mirrors and I

00:04:56,400 --> 00:05:01,340
want to tell you today there absolutely

00:04:57,660 --> 00:05:03,510
no smoke and mirrors okay there are some

00:05:01,340 --> 00:05:05,340
so we'll run through that next there's a

00:05:03,510 --> 00:05:07,199
few limitations as with all good demos

00:05:05,340 --> 00:05:08,580
we don't have any hardware divide

00:05:07,199 --> 00:05:10,380
instructions at the moment we just ran

00:05:08,580 --> 00:05:11,760
out of time what we're able to do is

00:05:10,380 --> 00:05:15,060
basically pull it out of a tool chain

00:05:11,760 --> 00:05:18,570
temporarily no reason for that we can

00:05:15,060 --> 00:05:21,750
pull in a very simple divider from other

00:05:18,570 --> 00:05:24,240
open Hardware out there that shouldn't

00:05:21,750 --> 00:05:25,949
be a problem at all we're still working

00:05:24,240 --> 00:05:28,229
on cases and bypassing as I said is very

00:05:25,949 --> 00:05:30,360
simple but that should be easy to use

00:05:28,229 --> 00:05:31,729
again we can pick up some cases from

00:05:30,360 --> 00:05:34,229
some of the open hardware

00:05:31,729 --> 00:05:36,930
implementations as well it's not

00:05:34,229 --> 00:05:40,860
optimized it's a proof of concept but it

00:05:36,930 --> 00:05:43,050
does work so this point our friends at

00:05:40,860 --> 00:05:44,220
Xilinx came along and said can you do

00:05:43,050 --> 00:05:46,340
anything with one of our great

00:05:44,220 --> 00:05:48,780
LVO acceleration cards so we thought

00:05:46,340 --> 00:05:50,460
yeah we'll give it a go so they sent it

00:05:48,780 --> 00:05:53,340
out a couple weeks ago and we threw it

00:05:50,460 --> 00:05:54,570
on and we managed to make it work now

00:05:53,340 --> 00:05:56,669
one thing I will point out if you use

00:05:54,570 --> 00:05:58,949
their PJs before this is like a chip

00:05:56,669 --> 00:06:02,430
real estate our little core is that

00:05:58,949 --> 00:06:03,930
little bit of blue so we thought we're

00:06:02,430 --> 00:06:07,500
not even using this called this this

00:06:03,930 --> 00:06:09,840
FPGA what can we do next and so we

00:06:07,500 --> 00:06:13,110
thought obviously how many of our cores

00:06:09,840 --> 00:06:16,650
can we sit on an FPGA so this point I'll

00:06:13,110 --> 00:06:19,669
open up for suggestions how many do you

00:06:16,650 --> 00:06:19,669
think we managed to fit

00:06:21,639 --> 00:06:27,729
200 200 I admire your optimism Hugh

00:06:24,879 --> 00:06:31,360
you're wrong but and I've brought I've

00:06:27,729 --> 00:06:35,069
brought koalas they have a koala any

00:06:31,360 --> 00:06:39,310
other takers who said 40

00:06:35,069 --> 00:06:48,189
you've been prompted you're correct you

00:06:39,310 --> 00:07:00,879
can you catch in fact yes we fit 40 of

00:06:48,189 --> 00:07:04,870
them on this FPGA actually 41 because we

00:07:00,879 --> 00:07:07,300
had the main trick here so what are we

00:07:04,870 --> 00:07:11,590
going to do with this new power that

00:07:07,300 --> 00:07:13,689
we've found well what are we gonna do

00:07:11,590 --> 00:07:15,039
let's think of something interesting

00:07:13,689 --> 00:07:16,659
well I mean as I said there's a very

00:07:15,039 --> 00:07:20,080
simple they're not coherent

00:07:16,659 --> 00:07:21,729
they run just the power ice a fixed

00:07:20,080 --> 00:07:22,199
point subset what are we going to run

00:07:21,729 --> 00:07:24,939
with it

00:07:22,199 --> 00:07:26,259
well I thought let's run an accelerator

00:07:24,939 --> 00:07:28,180
we'll have 40 accelerators doing

00:07:26,259 --> 00:07:30,099
something really useful and I thought

00:07:28,180 --> 00:07:32,830
what do I spend most of my time doing

00:07:30,099 --> 00:07:36,210
every day and then I thought about it

00:07:32,830 --> 00:07:38,409
for a while and I thought gosh you know

00:07:36,210 --> 00:07:41,110
it seems like each day a new language

00:07:38,409 --> 00:07:43,629
comes out and I have to investigate it

00:07:41,110 --> 00:07:45,550
and look at it I simply be writing hello

00:07:43,629 --> 00:07:47,560
world applications all the damn time so

00:07:45,550 --> 00:07:50,080
I thought why don't I write a hello

00:07:47,560 --> 00:07:52,389
world accelerator so I've got 40 open

00:07:50,080 --> 00:07:55,060
power cores or running an accelerator

00:07:52,389 --> 00:07:59,289
its job in life is to print open print

00:07:55,060 --> 00:08:00,580
hello world over my hello world bus the

00:07:59,289 --> 00:08:01,569
real reason was only had a day to come

00:08:00,580 --> 00:08:04,689
up with this so I couldn't think of

00:08:01,569 --> 00:08:07,599
anything better and so here's a demo

00:08:04,689 --> 00:08:08,979
we're basically now using what I think

00:08:07,599 --> 00:08:11,080
probably about 80 plus percent of the

00:08:08,979 --> 00:08:14,110
FPGA so that's pretty good sure we could

00:08:11,080 --> 00:08:15,819
fit more cause if I had more time and

00:08:14,110 --> 00:08:17,349
let's run it so basically now we're

00:08:15,819 --> 00:08:20,020
going to synthesize and we're sorry

00:08:17,349 --> 00:08:21,460
we're going to load onto the FPGA and

00:08:20,020 --> 00:08:23,319
we've sped this up a bit because it is

00:08:21,460 --> 00:08:25,089
quite a B FPGA so it takes a bit longer

00:08:23,319 --> 00:08:26,289
to run and then we'll flip over to the

00:08:25,089 --> 00:08:30,140
console and see our hello world

00:08:26,289 --> 00:08:32,900
applicate I forgot the locking

00:08:30,140 --> 00:08:34,700
so I've got more work to be done but it

00:08:32,900 --> 00:08:38,630
was 40 real cause running real

00:08:34,700 --> 00:08:42,370
instructions on this one FPGA so that's

00:08:38,630 --> 00:08:42,370
where we are today that was pretty cool

00:08:44,560 --> 00:08:48,980
this is just a first step as I said this

00:08:47,360 --> 00:08:51,860
is just a proof of concept this is just

00:08:48,980 --> 00:08:54,500
something we often played with and we're

00:08:51,860 --> 00:08:56,090
really hoping to see more more effort

00:08:54,500 --> 00:08:58,370
from the community some collaboration

00:08:56,090 --> 00:08:59,510
around this it's been a lot of fun we've

00:08:58,370 --> 00:09:01,880
had a lot of fun on it in the last

00:08:59,510 --> 00:09:03,530
couple months we've got a lot more to

00:09:01,880 --> 00:09:06,020
add so at the moment we're just adding

00:09:03,530 --> 00:09:08,270
supervisor state and so if we add a

00:09:06,020 --> 00:09:09,470
patch that Michael Newland worked on it

00:09:08,270 --> 00:09:11,090
took him in afternoon to kind of add

00:09:09,470 --> 00:09:12,020
enough that we think we'll run some of

00:09:11,090 --> 00:09:14,690
the IOT os's

00:09:12,020 --> 00:09:15,770
so we could run one of those a little

00:09:14,690 --> 00:09:17,180
bit more work we should be able to get

00:09:15,770 --> 00:09:19,580
enough supervisor state to get Linux

00:09:17,180 --> 00:09:20,900
going that should be good and eventually

00:09:19,580 --> 00:09:22,370
I'd love to see other people implement

00:09:20,900 --> 00:09:24,140
these cause let's see more of them on

00:09:22,370 --> 00:09:27,620
github maybe a Vera Log implementation

00:09:24,140 --> 00:09:29,900
who knows we'd like to point out later

00:09:27,620 --> 00:09:31,340
on today we have a bot around all the

00:09:29,900 --> 00:09:33,380
open announcements that Ken made this

00:09:31,340 --> 00:09:36,140
morning that's in the harbor ballroom at

00:09:33,380 --> 00:09:39,260
H at 11:20 so I come along if you're

00:09:36,140 --> 00:09:42,200
interested in that at that point I'd

00:09:39,260 --> 00:09:44,780
like to hand over to Joe Daler who's

00:09:42,200 --> 00:09:46,100
been a great support from us from Xilinx

00:09:44,780 --> 00:09:47,600
to talk a bit more about the Alvie oh

00:09:46,100 --> 00:09:50,950
and open power and everything around

00:09:47,600 --> 00:09:50,950
that thanks Jay

00:09:52,850 --> 00:09:58,490
so a little gratuitous product placement

00:09:55,130 --> 00:10:00,470
here for silence and Al vo we are

00:09:58,490 --> 00:10:03,020
pleased to be working with Xilinx I'm

00:10:00,470 --> 00:10:05,300
sorry please be working with IBM and the

00:10:03,020 --> 00:10:07,640
open power community on the power is a

00:10:05,300 --> 00:10:10,460
and the porting example that Anton

00:10:07,640 --> 00:10:11,980
worked on to give this this product to

00:10:10,460 --> 00:10:14,060
the marketplace

00:10:11,980 --> 00:10:17,330
one other thing I wanted to talk about

00:10:14,060 --> 00:10:19,750
is a you know coming from the FPGA

00:10:17,330 --> 00:10:22,340
industry I've been in there for 20 years

00:10:19,750 --> 00:10:26,120
his story really resonated to me with

00:10:22,340 --> 00:10:27,770
this project on microwatt so from the

00:10:26,120 --> 00:10:29,570
Xilinx point of view he's a

00:10:27,770 --> 00:10:30,890
distinguished engineer in software

00:10:29,570 --> 00:10:33,260
engineering he comes from a software

00:10:30,890 --> 00:10:35,750
background has never used fpga

00:10:33,260 --> 00:10:38,390
is not a hardware guy in a short amount

00:10:35,750 --> 00:10:40,820
of time he took our hardware was able to

00:10:38,390 --> 00:10:43,010
port his design created a very quick

00:10:40,820 --> 00:10:43,769
manner this is really exciting for us

00:10:43,010 --> 00:10:45,569
because

00:10:43,769 --> 00:10:47,639
Ziya links this is our ultimate goal is

00:10:45,569 --> 00:10:50,309
to have our products used by software

00:10:47,639 --> 00:10:52,110
engineers in the software ecosystem so

00:10:50,309 --> 00:10:54,809
they can harness the acceleration

00:10:52,110 --> 00:10:58,249
advantage of FPGAs and so I want to

00:10:54,809 --> 00:11:01,559
commend Anton for kick-starting that

00:10:58,249 --> 00:11:04,079
putting this on the github Anton is a

00:11:01,559 --> 00:11:06,509
seeding the ecosystem with this power is

00:11:04,079 --> 00:11:08,429
a soft core and we believe that the

00:11:06,509 --> 00:11:12,179
community can take that and evolve it

00:11:08,429 --> 00:11:15,049
and drive the open-open power and the

00:11:12,179 --> 00:11:18,019
open community with this solution and

00:11:15,049 --> 00:11:20,579
hopefully we can add a hardware divide

00:11:18,019 --> 00:11:22,879
onto that that power is a solution

00:11:20,579 --> 00:11:25,319
because effigies are really good at that

00:11:22,879 --> 00:11:28,350
RTD Xilinx we've been collaborating with

00:11:25,319 --> 00:11:29,639
IBM for a while and we are going to

00:11:28,350 --> 00:11:32,579
continue to collaborate with them on

00:11:29,639 --> 00:11:34,100
data center solutions in across all the

00:11:32,579 --> 00:11:36,779
verticals of data center including

00:11:34,100 --> 00:11:38,309
compute storage and networking and we

00:11:36,779 --> 00:11:40,259
look forward to collaborating more on

00:11:38,309 --> 00:11:43,079
creating solutions with Alvie oh that

00:11:40,259 --> 00:11:45,959
can be deployed in any server so I want

00:11:43,079 --> 00:11:48,329
to thank I be M and Anton for this

00:11:45,959 --> 00:11:50,549
effort and we look forward to continued

00:11:48,329 --> 00:11:54,420
innovation together using Xilinx

00:11:50,549 --> 00:11:59,320
solutions l vo and FPGA so thank you

00:11:54,420 --> 00:11:59,320

YouTube URL: https://www.youtube.com/watch?v=JdMTLs7EMM0


