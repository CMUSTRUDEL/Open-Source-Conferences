Title: OpenPOWER Summit NA 2019: OpenPOWER in Enterprise: Gaps & Challenges
Publication date: 2019-08-20
Playlist: OpenPOWER Summit NA 2019
Description: 
	Presented by Nikolay Semenov & Alexey Stepanov, Yadro

Following the Foundation strategy to make OpenPOWER a default choice for modern workloads, at YADRO we are committed to deliver OpenPOWER solutions to Enterprises, allowing them to experience efficient hyperscale-designed hardware benefits. Enterprise world brings new requirements for system design, accompanying tools and services offered by vendor.
Making YADRO OpenPOWER products Enterprise ready, we revealed gaps and challenges that have to be addressed on a vendor side or community level. We will share YADRO field experience dealing with these gaps, so that we all could get more mature platform and products closer to Enterprise needs.
Captions: 
	00:00:00,030 --> 00:00:09,420
so hello again and I guess we're gonna

00:00:03,480 --> 00:00:11,309
start we're gonna talk we're gonna

00:00:09,420 --> 00:00:13,380
change each other and it's a

00:00:11,309 --> 00:00:16,619
presentation of two of us my name is

00:00:13,380 --> 00:00:20,939
Nikolai Simonov and Alex Hayes will be

00:00:16,619 --> 00:00:23,960
joining me in a moment I'm gonna start

00:00:20,939 --> 00:00:26,369
with the question why why enterprise

00:00:23,960 --> 00:00:28,859
because historically the open power

00:00:26,369 --> 00:00:31,529
technology evolution has been driven in

00:00:28,859 --> 00:00:34,140
large part by hyper scale computing

00:00:31,529 --> 00:00:36,570
focused providers and with

00:00:34,140 --> 00:00:39,180
supercomputers like Sierra and Summit

00:00:36,570 --> 00:00:41,489
the platform has experienced the grant

00:00:39,180 --> 00:00:44,610
great momentum and high adoption in the

00:00:41,489 --> 00:00:46,649
HPC world but the strategy of the

00:00:44,610 --> 00:00:49,800
foundation is to become the default

00:00:46,649 --> 00:00:52,379
platform for the new workloads and the

00:00:49,800 --> 00:00:54,899
one of the community vectors to make it

00:00:52,379 --> 00:00:57,420
happen is to bring the best practices

00:00:54,899 --> 00:01:00,149
and efficient design principles to

00:00:57,420 --> 00:01:03,329
mainstream enterprise customers service

00:01:00,149 --> 00:01:05,760
providers and data centers and that

00:01:03,329 --> 00:01:07,380
ambitious goal drives the platform

00:01:05,760 --> 00:01:11,010
maturity the industry adoption and

00:01:07,380 --> 00:01:12,600
expansion of power architecture since

00:01:11,010 --> 00:01:14,970
the enterprise segment is really broad

00:01:12,600 --> 00:01:19,350
its diverse and it brings a lot of

00:01:14,970 --> 00:01:23,040
opportunities and today the enterprise

00:01:19,350 --> 00:01:26,790
customers they face increased adoption

00:01:23,040 --> 00:01:28,590
of modern data intensive and cognitive

00:01:26,790 --> 00:01:32,040
workload they have much in common with

00:01:28,590 --> 00:01:34,950
HPC world but the required capabilities

00:01:32,040 --> 00:01:37,470
that current architectures cannot easily

00:01:34,950 --> 00:01:40,890
meet and it creates really a demand for

00:01:37,470 --> 00:01:44,280
innovative designs and specific hardware

00:01:40,890 --> 00:01:45,810
solutions that are optimized for rapidly

00:01:44,280 --> 00:01:49,049
growing capacity and performance

00:01:45,810 --> 00:01:51,149
requirements so for the foundation it's

00:01:49,049 --> 00:01:53,399
a strategic opportunity to bridge into

00:01:51,149 --> 00:01:56,700
enterprise markets and as a vendor we

00:01:53,399 --> 00:01:59,600
have as a vendor we have been dedicated

00:01:56,700 --> 00:02:05,759
to delivering to enterprise customers

00:01:59,600 --> 00:02:08,640
but yeah we can the Foundation provides

00:02:05,759 --> 00:02:09,810
a platform the powerhouse platform to

00:02:08,640 --> 00:02:12,450
build

00:02:09,810 --> 00:02:15,120
really good solutions as it does and HPC

00:02:12,450 --> 00:02:18,150
and hyper scale worlds but there are

00:02:15,120 --> 00:02:19,860
challenges and gaps to be filled to me

00:02:18,150 --> 00:02:22,350
to be able to meet the enterprise

00:02:19,860 --> 00:02:24,840
requirements and customer expectations

00:02:22,350 --> 00:02:26,940
and today in this talk we want to bring

00:02:24,840 --> 00:02:29,550
your attention to the challenges that

00:02:26,940 --> 00:02:32,430
emerge when a vendor tries to deliver

00:02:29,550 --> 00:02:35,160
open parts based systems to enterprise

00:02:32,430 --> 00:02:38,130
customers it's quite harder than it

00:02:35,160 --> 00:02:39,270
might sound but there is a big

00:02:38,130 --> 00:02:43,290
difference because there is a big

00:02:39,270 --> 00:02:46,950
difference in customer requirements they

00:02:43,290 --> 00:02:49,410
want higher research functionality the

00:02:46,950 --> 00:02:51,600
one higher reliability better resource

00:02:49,410 --> 00:02:53,340
management like more precise

00:02:51,600 --> 00:02:56,819
orchestration a lot of different things

00:02:53,340 --> 00:02:58,830
and we have made certain paths and we

00:02:56,819 --> 00:03:04,890
would like just to share our experience

00:02:58,830 --> 00:03:07,620
so if different vendors if our members

00:03:04,890 --> 00:03:10,500
from all of the foundation who decide to

00:03:07,620 --> 00:03:11,610
join this movement and deliver to

00:03:10,500 --> 00:03:19,079
enterprise

00:03:11,610 --> 00:03:22,640
they have easier way ahead of them so we

00:03:19,079 --> 00:03:25,530
gained some dis experience and let's

00:03:22,640 --> 00:03:36,060
share it it might be the most useful for

00:03:25,530 --> 00:03:40,019
the product managers for sitios so we

00:03:36,060 --> 00:03:45,350
believe that the rest is a key to the

00:03:40,019 --> 00:03:49,109
enterprise world and the term rus means

00:03:45,350 --> 00:03:52,760
reliability availability support ability

00:03:49,109 --> 00:03:56,430
serviceability and in fact it was

00:03:52,760 --> 00:03:58,769
invented by IBM they used to describe

00:03:56,430 --> 00:04:04,440
the mainframe computers in the late 60s

00:03:58,769 --> 00:04:07,109
with this board and there is a good

00:04:04,440 --> 00:04:10,230
definition that I found from a book and

00:04:07,109 --> 00:04:13,320
the RUS system shall be a systematic

00:04:10,230 --> 00:04:15,959
union of software and hardware for the

00:04:13,320 --> 00:04:17,789
purpose of managing and monitoring all

00:04:15,959 --> 00:04:20,609
hardware and software components of the

00:04:17,789 --> 00:04:23,189
system to their individual potential

00:04:20,609 --> 00:04:26,310
to me that sounds like a great promise

00:04:23,189 --> 00:04:29,310
if I if I have a computer system I can

00:04:26,310 --> 00:04:32,789
use it to the technical limits it will

00:04:29,310 --> 00:04:35,460
still stay up under my control it will

00:04:32,789 --> 00:04:42,090
be manageable and serviceable and

00:04:35,460 --> 00:04:44,550
available reliable so that's just great

00:04:42,090 --> 00:04:48,060
the important part in that description

00:04:44,550 --> 00:04:50,550
is that the union of software and

00:04:48,060 --> 00:04:53,310
hardware so that we are not only talking

00:04:50,550 --> 00:04:56,030
about the hardware but we are talking

00:04:53,310 --> 00:04:59,699
about the entire environment which is a

00:04:56,030 --> 00:05:04,199
multi layer and includes the hardware

00:04:59,699 --> 00:05:14,000
firmware the operating system the system

00:05:04,199 --> 00:05:20,419
of software and the applications well

00:05:14,000 --> 00:05:24,259
that's a lawyer's of our environment and

00:05:20,419 --> 00:05:25,919
I will walk through the all the layers

00:05:24,259 --> 00:05:30,300
from bottom to top

00:05:25,919 --> 00:05:32,190
and we'll think what Russ and enterprise

00:05:30,300 --> 00:05:39,539
features are relevant to each of these

00:05:32,190 --> 00:05:44,610
layers so our first layer is a hardware

00:05:39,539 --> 00:05:49,080
and well it's probably an easy part I

00:05:44,610 --> 00:05:51,599
will quickly touch some of these facts

00:05:49,080 --> 00:05:56,639
and things but first of all I would like

00:05:51,599 --> 00:05:58,050
to give you a little visual explanation

00:05:56,639 --> 00:06:00,599
of what's the difference between the

00:05:58,050 --> 00:06:03,449
hyper scale and the environment er prize

00:06:00,599 --> 00:06:06,690
worlds it is only possible at this point

00:06:03,449 --> 00:06:10,020
because the hardware layer is the only

00:06:06,690 --> 00:06:15,839
physical layer that we can see and touch

00:06:10,020 --> 00:06:21,000
so I think many people have seen that

00:06:15,839 --> 00:06:24,259
the googles iris server which is a

00:06:21,000 --> 00:06:28,610
perfect example of a hyper scale

00:06:24,259 --> 00:06:33,629
Hardware right and very successful and

00:06:28,610 --> 00:06:37,189
but well it looks like

00:06:33,629 --> 00:06:41,059
it is a little bit military-looking so

00:06:37,189 --> 00:06:45,419
because it's a solid sheet metal chassis

00:06:41,059 --> 00:06:48,149
with no extra facilities with kind of

00:06:45,419 --> 00:06:50,759
nothing else and doesn't have any hot

00:06:48,149 --> 00:06:57,319
pluggable components because it is a hot

00:06:50,759 --> 00:07:01,559
lockable component itself it reminds me

00:06:57,319 --> 00:07:05,219
when I was a student in my university we

00:07:01,559 --> 00:07:08,369
had a number of technical scientific

00:07:05,219 --> 00:07:12,089
faculties like physics mathematics etc

00:07:08,369 --> 00:07:14,550
but we also had a military section and I

00:07:12,089 --> 00:07:17,339
need notice that I started my university

00:07:14,550 --> 00:07:22,800
studies in in the country called USSR

00:07:17,339 --> 00:07:27,139
and the equipment that we used to see

00:07:22,800 --> 00:07:31,949
all that military section very similar

00:07:27,139 --> 00:07:34,979
to what the googles is so if there's a

00:07:31,949 --> 00:07:36,839
bomb explosion you can plug it out like

00:07:34,979 --> 00:07:42,680
insert a new one and we'll keep running

00:07:36,839 --> 00:07:45,869
that's a great stuff but enterprise

00:07:42,680 --> 00:07:47,309
hardware is expected to have a little

00:07:45,869 --> 00:07:54,389
bit more flexible and user-friendly

00:07:47,309 --> 00:07:56,729
design well going back to the rust

00:07:54,389 --> 00:08:00,110
features in the hardware well as I said

00:07:56,729 --> 00:08:05,519
they are more or less obvious now

00:08:00,110 --> 00:08:11,399
we protect memory and caches with ECC we

00:08:05,519 --> 00:08:13,559
protect storage drives with right

00:08:11,399 --> 00:08:17,699
controller this is optional because well

00:08:13,559 --> 00:08:22,680
very high-speed devices may lose the

00:08:17,699 --> 00:08:25,680
benefits beyond the behind the Irate

00:08:22,680 --> 00:08:29,399
controller so that this part could be

00:08:25,680 --> 00:08:32,039
floated to the operating system level so

00:08:29,399 --> 00:08:34,589
hot-swappable storage drives hosts local

00:08:32,039 --> 00:08:37,229
funds and power supplies cable

00:08:34,589 --> 00:08:40,829
management arm the power cable

00:08:37,229 --> 00:08:44,010
protection so that it doesn't

00:08:40,829 --> 00:08:46,720
unplug just by accident

00:08:44,010 --> 00:08:52,740
extractable race so both of the things

00:08:46,720 --> 00:08:58,440
that intended to build a reliable

00:08:52,740 --> 00:09:01,720
available and serviceable system that's

00:08:58,440 --> 00:09:06,070
what we are not going to do is the

00:09:01,720 --> 00:09:09,839
fault-tolerant system so not all the

00:09:06,070 --> 00:09:14,529
components inside are redundant like

00:09:09,839 --> 00:09:16,480
memory CPU sockets motherboard

00:09:14,529 --> 00:09:18,670
they are normally considered a single

00:09:16,480 --> 00:09:20,290
point of failure and because we are

00:09:18,670 --> 00:09:22,329
talking about the entire environment we

00:09:20,290 --> 00:09:25,420
offload the availability features to the

00:09:22,329 --> 00:09:29,940
higher levels like a clustering software

00:09:25,420 --> 00:09:29,940
or data replication and things like that

00:09:30,870 --> 00:09:41,680
now we are going to to the firmware

00:09:35,529 --> 00:09:44,920
level we don't really have too few more

00:09:41,680 --> 00:09:51,069
bundles in the open power hardware so

00:09:44,920 --> 00:09:54,940
first one is the open BMC and the second

00:09:51,069 --> 00:09:56,740
big bundle is the pin or where the most

00:09:54,940 --> 00:10:03,069
of the system program is located like a

00:09:56,740 --> 00:10:11,920
ski boot host boot and OCC and other

00:10:03,069 --> 00:10:13,389
images with with open BMC the open BMC

00:10:11,920 --> 00:10:15,670
is the first entry point for the

00:10:13,389 --> 00:10:17,680
customer into the hardware so that's why

00:10:15,670 --> 00:10:19,389
they are that that's the first thing

00:10:17,680 --> 00:10:21,940
that they see and they will quickly

00:10:19,389 --> 00:10:27,730
identify the features that they would

00:10:21,940 --> 00:10:31,029
like to have in in that in that firmware

00:10:27,730 --> 00:10:34,269
and that's the list of features and as

00:10:31,029 --> 00:10:37,899
you can see only a few of them are

00:10:34,269 --> 00:10:39,790
currently fully supported a number of

00:10:37,899 --> 00:10:42,130
them are supported with limitations and

00:10:39,790 --> 00:10:44,829
a number of them are not supported at

00:10:42,130 --> 00:10:48,160
all and are probably in development

00:10:44,829 --> 00:10:49,530
phase or some of them they need to be

00:10:48,160 --> 00:10:51,870
even just

00:10:49,530 --> 00:10:54,360
have some planning for development so

00:10:51,870 --> 00:10:56,880
that's I am probably a long way to go I

00:10:54,360 --> 00:10:58,860
will not go any further because we have

00:10:56,880 --> 00:11:04,230
a second session today a little bit

00:10:58,860 --> 00:11:06,150
later about the open BMC features and

00:11:04,230 --> 00:11:08,760
their implementation

00:11:06,150 --> 00:11:10,860
so please welcome at half-past four

00:11:08,760 --> 00:11:21,690
everybody if you want to have more

00:11:10,860 --> 00:11:24,930
details on this and for the pin or

00:11:21,690 --> 00:11:27,870
bundle it is very important from the

00:11:24,930 --> 00:11:32,130
point of view of for us because it runs

00:11:27,870 --> 00:11:35,540
the parlance of test it continues system

00:11:32,130 --> 00:11:38,100
monitoring and the error reporting and

00:11:35,540 --> 00:11:41,280
many other things like that so they are

00:11:38,100 --> 00:11:45,660
all applicable to the Russ and they are

00:11:41,280 --> 00:11:49,940
also some issues with with customer

00:11:45,660 --> 00:11:54,120
expectations I mean not everything is

00:11:49,940 --> 00:11:56,700
working like they probably expect so

00:11:54,120 --> 00:12:00,740
first of all they are continuous

00:11:56,700 --> 00:12:04,260
Diagnostics in the server firmware is

00:12:00,740 --> 00:12:10,980
available in two modes the manufacturing

00:12:04,260 --> 00:12:14,160
mode and well normal mode I don't think

00:12:10,980 --> 00:12:16,860
it has any special name we normally say

00:12:14,160 --> 00:12:21,330
in the man if manufacturing or out of

00:12:16,860 --> 00:12:25,250
manufacturing so in in the mean of

00:12:21,330 --> 00:12:31,260
manufacturing you want the every single

00:12:25,250 --> 00:12:35,370
error like even if it is not very

00:12:31,260 --> 00:12:41,040
critical it will be immediately reported

00:12:35,370 --> 00:12:43,620
in the system error logs and this

00:12:41,040 --> 00:12:46,410
produces a lot of events and messages

00:12:43,620 --> 00:12:48,280
and it really intended only for the

00:12:46,410 --> 00:12:53,280
manufacturing

00:12:48,280 --> 00:12:56,590
tests for for a new newly built hardware

00:12:53,280 --> 00:12:58,990
and not in the production and normally

00:12:56,590 --> 00:13:01,960
after that we switch to the production

00:12:58,990 --> 00:13:04,360
mode and then in this mode most of the

00:13:01,960 --> 00:13:07,180
errors they are just hidden and they do

00:13:04,360 --> 00:13:12,820
not appear anywhere and only the very

00:13:07,180 --> 00:13:16,510
fatal errors are showing in the system

00:13:12,820 --> 00:13:20,500
error logs well this is not really good

00:13:16,510 --> 00:13:22,180
because for for the enterprise customers

00:13:20,500 --> 00:13:24,550
they would like to have more detailed

00:13:22,180 --> 00:13:28,480
error logging but not as detailed as in

00:13:24,550 --> 00:13:30,790
a manufacturing mode but not that silent

00:13:28,480 --> 00:13:35,080
that we have out of manufacturing once

00:13:30,790 --> 00:13:38,830
so it will be probably good to to

00:13:35,080 --> 00:13:42,040
develop some intermediate I don't know

00:13:38,830 --> 00:13:46,390
enterprise reporting mode maybe he

00:13:42,040 --> 00:13:48,700
didn't make it flexible and with with

00:13:46,390 --> 00:13:53,350
some options so that could be activated

00:13:48,700 --> 00:13:55,480
or deactivated so this will be much more

00:13:53,350 --> 00:14:06,520
interesting for the enterprise customers

00:13:55,480 --> 00:14:08,800
and in the another problem with error

00:14:06,520 --> 00:14:11,970
reporting is that system error logs are

00:14:08,800 --> 00:14:15,150
only available in the binary format and

00:14:11,970 --> 00:14:19,180
it's very hard to read and decode it and

00:14:15,150 --> 00:14:22,630
currently the decode of system airlocks

00:14:19,180 --> 00:14:27,010
requires some external software which is

00:14:22,630 --> 00:14:31,600
only able to run on the x86 platform

00:14:27,010 --> 00:14:33,940
which is not good because well we are

00:14:31,600 --> 00:14:37,180
sort of we are trying to develop and

00:14:33,940 --> 00:14:40,480
sell open power systems and then we we

00:14:37,180 --> 00:14:44,800
need for maintenance we need x86

00:14:40,480 --> 00:14:48,160
platform as well so what we definitely

00:14:44,800 --> 00:14:50,890
need is that this error decoding error

00:14:48,160 --> 00:14:53,860
decoding tool will be ported to the ARM

00:14:50,890 --> 00:14:56,560
architecture to be able to run on the

00:14:53,860 --> 00:14:59,470
open BMC and probably even built in in

00:14:56,560 --> 00:15:01,710
into the open BMC package this will

00:14:59,470 --> 00:15:06,020
significantly increase the

00:15:01,710 --> 00:15:11,250
price features of the open power systems

00:15:06,020 --> 00:15:14,790
so that's I think about the firmware and

00:15:11,250 --> 00:15:21,110
we are going to the software level which

00:15:14,790 --> 00:15:24,570
is so yeah let's talk about the

00:15:21,110 --> 00:15:27,180
operating system level now typically

00:15:24,570 --> 00:15:29,430
we're on one of the well-known Linux

00:15:27,180 --> 00:15:32,790
distributions on our servers well I mean

00:15:29,430 --> 00:15:34,470
customers do run it and it could be Red

00:15:32,790 --> 00:15:38,010
Hat it could be serious it could be

00:15:34,470 --> 00:15:41,040
Ubuntu but it means that we are

00:15:38,010 --> 00:15:44,130
expanding the evaluation even further by

00:15:41,040 --> 00:15:48,380
engaging the new friends of us the Linux

00:15:44,130 --> 00:15:50,910
Foundation community and most of these

00:15:48,380 --> 00:15:53,760
power Linux distributions they have

00:15:50,910 --> 00:15:57,240
really good enterprise rate and offer

00:15:53,760 --> 00:15:59,310
customer support packages but the

00:15:57,240 --> 00:16:02,540
enterprise customers might require some

00:15:59,310 --> 00:16:04,710
extra efforts from the hardware vendor

00:16:02,540 --> 00:16:06,960
to make sure that the critical

00:16:04,710 --> 00:16:08,940
applications are running as in a

00:16:06,960 --> 00:16:13,500
compliant environment there might be

00:16:08,940 --> 00:16:16,230
compliance requirements for the system

00:16:13,500 --> 00:16:19,830
to be purchased and they demand that

00:16:16,230 --> 00:16:22,380
should the system the purchase should be

00:16:19,830 --> 00:16:26,280
officially certified by the operating

00:16:22,380 --> 00:16:27,780
system vendor and from we have

00:16:26,280 --> 00:16:29,970
experience with such kind of

00:16:27,780 --> 00:16:34,620
certification with red hats use and

00:16:29,970 --> 00:16:37,200
somewhat with Ubuntu but well the late

00:16:34,620 --> 00:16:40,140
the canonical certification is not

00:16:37,200 --> 00:16:42,510
really quite straightforward but in

00:16:40,140 --> 00:16:45,300
general a lot of technical issues might

00:16:42,510 --> 00:16:49,830
arise when you try to certify your

00:16:45,300 --> 00:16:51,870
machine for an operating system and the

00:16:49,830 --> 00:16:54,450
paradox is that it doesn't necessarily

00:16:51,870 --> 00:16:58,080
mean that the hardware is bad or the

00:16:54,450 --> 00:17:00,360
hardware is doing something wrong just

00:16:58,080 --> 00:17:04,170
to give a couple of examples how it

00:17:00,360 --> 00:17:08,070
happens you sign as a partner you get a

00:17:04,170 --> 00:17:09,930
test kit you run it you comment on any

00:17:08,070 --> 00:17:11,360
warnings that might appear you submit

00:17:09,930 --> 00:17:14,179
the results and

00:17:11,360 --> 00:17:16,819
a couple of in some time you get the

00:17:14,179 --> 00:17:20,600
official badge you celebrate and go home

00:17:16,819 --> 00:17:24,139
but in practice it it doesn't happen

00:17:20,600 --> 00:17:27,189
like that it starts with the the this

00:17:24,139 --> 00:17:30,489
test kids you get they might be not

00:17:27,189 --> 00:17:32,539
fully compatible with the powers

00:17:30,489 --> 00:17:36,289
architecture they might they might have

00:17:32,539 --> 00:17:39,950
some x86 specific tests included for

00:17:36,289 --> 00:17:42,679
example and our test routine might

00:17:39,950 --> 00:17:44,600
require presence of some embedded video

00:17:42,679 --> 00:17:47,359
controller that when you have only a

00:17:44,600 --> 00:17:49,460
serial console so there is always some

00:17:47,359 --> 00:17:53,269
technical work just to make the tests

00:17:49,460 --> 00:17:56,179
run and then you when you get the

00:17:53,269 --> 00:17:58,450
results yeah you submit and there might

00:17:56,179 --> 00:18:01,399
be some long ways in time from the

00:17:58,450 --> 00:18:07,700
operating system vendor to respond to

00:18:01,399 --> 00:18:13,460
that but well there is another problem

00:18:07,700 --> 00:18:17,629
the Lin the open power expertise in the

00:18:13,460 --> 00:18:19,519
Linux vendors is not very mature so a

00:18:17,629 --> 00:18:23,299
support ticket opened by your customer

00:18:19,519 --> 00:18:25,039
or by yourself might need a lot of extra

00:18:23,299 --> 00:18:28,039
effort to get connected to the right

00:18:25,039 --> 00:18:30,230
people and resolved and it's sometimes

00:18:28,039 --> 00:18:32,090
it's hard to meet the enterprise as a

00:18:30,230 --> 00:18:38,330
lace because the enterprise world is all

00:18:32,090 --> 00:18:41,239
about SLA and sometimes it can be that

00:18:38,330 --> 00:18:44,299
the solution exists somewhere in IBM

00:18:41,239 --> 00:18:47,090
knowledgebase or within knowledge basis

00:18:44,299 --> 00:18:49,399
of specific Linux vendor but they're not

00:18:47,090 --> 00:18:52,549
connected to each other so you might

00:18:49,399 --> 00:18:55,570
struggle a lot to find solutions for the

00:18:52,549 --> 00:19:00,230
problems that have already been resolved

00:18:55,570 --> 00:19:02,210
but even even if the solution is really

00:19:00,230 --> 00:19:04,489
simple sometimes you you can find it

00:19:02,210 --> 00:19:07,429
faster it might require like you know

00:19:04,489 --> 00:19:10,340
only a couple of lines in the source

00:19:07,429 --> 00:19:12,470
code but the customer won't accept it

00:19:10,340 --> 00:19:15,169
unless it's released officially by the

00:19:12,470 --> 00:19:20,640
operating system vendor and it this will

00:19:15,169 --> 00:19:27,299
can take quite a lot of time they

00:19:20,640 --> 00:19:30,090
well for we have some examples the

00:19:27,299 --> 00:19:33,480
customers just require official patch or

00:19:30,090 --> 00:19:35,850
hot fix and to integrate it in the

00:19:33,480 --> 00:19:38,420
pipeline of a vendor takes a lot of

00:19:35,850 --> 00:19:42,090
effort and doesn't happen fast sometimes

00:19:38,420 --> 00:19:43,860
you just wait four months for your small

00:19:42,090 --> 00:19:50,040
patch to be included in the official

00:19:43,860 --> 00:19:53,910
release well well you basically there

00:19:50,040 --> 00:19:56,040
you have to get the new patch accept it

00:19:53,910 --> 00:19:58,799
in the upstream and then port it back to

00:19:56,040 --> 00:20:03,330
the problem kernel or probe to the

00:19:58,799 --> 00:20:07,940
software version and at this time you

00:20:03,330 --> 00:20:07,940
are facing and the unhappy customer oh

00:20:10,669 --> 00:20:17,940
well we have a practical example with

00:20:13,230 --> 00:20:20,130
the opal PRD demon it's outdated in male

00:20:17,940 --> 00:20:22,980
repositories but it it's a critical

00:20:20,130 --> 00:20:27,690
feature it's a critical part in view of

00:20:22,980 --> 00:20:29,160
Fras features the only recent version is

00:20:27,690 --> 00:20:32,160
only available on the github but

00:20:29,160 --> 00:20:34,230
repositories of that are maintained by

00:20:32,160 --> 00:20:38,669
vendors they contained outdated versions

00:20:34,230 --> 00:20:41,940
and we had a practical case were this

00:20:38,669 --> 00:20:52,260
caused some errors with the customer

00:20:41,940 --> 00:20:54,450
side in one case it because they the

00:20:52,260 --> 00:20:56,610
failure of the demon itself and in

00:20:54,450 --> 00:20:59,520
another case it comes even the crash of

00:20:56,610 --> 00:21:04,169
the entire host so that's a was very

00:20:59,520 --> 00:21:08,450
painful so the now we are going to the

00:21:04,169 --> 00:21:11,520
application layer and we we include

00:21:08,450 --> 00:21:14,460
system software and the application

00:21:11,520 --> 00:21:16,590
software here so we are expanding it

00:21:14,460 --> 00:21:23,160
refer in the third to the entire also

00:21:16,590 --> 00:21:25,590
open a software community and well the

00:21:23,160 --> 00:21:28,049
rest features in the software first of

00:21:25,590 --> 00:21:29,820
all they mean something to the software

00:21:28,049 --> 00:21:31,980
vendors because they also need to think

00:21:29,820 --> 00:21:34,390
about how they are providing the

00:21:31,980 --> 00:21:37,370
reliable available and

00:21:34,390 --> 00:21:40,880
serviceable software what for for the

00:21:37,370 --> 00:21:42,980
heart of the lair they can also mean it

00:21:40,880 --> 00:21:45,410
can also be very important because for

00:21:42,980 --> 00:21:49,520
us as it was said earlier they could

00:21:45,410 --> 00:21:52,929
have provided some availability features

00:21:49,520 --> 00:21:54,260
like clustering or data replication and

00:21:52,929 --> 00:21:57,230
well

00:21:54,260 --> 00:21:59,559
also the term serviceability we can

00:21:57,230 --> 00:22:02,299
extend it a little bit towards to the

00:21:59,559 --> 00:22:05,960
manageability and usability so this

00:22:02,299 --> 00:22:10,730
entire perception of the software is

00:22:05,960 --> 00:22:14,600
also very important overall the software

00:22:10,730 --> 00:22:17,210
ecosystem is one of the major aspects of

00:22:14,600 --> 00:22:20,380
the success for the hardware platform

00:22:17,210 --> 00:22:26,230
and I think we earlier we had a section

00:22:20,380 --> 00:22:28,700
where it was also underlying it so the

00:22:26,230 --> 00:22:34,220
for example people complaining that the

00:22:28,700 --> 00:22:39,950
docker hub has a very few open power

00:22:34,220 --> 00:22:41,360
images so it's important because the

00:22:39,950 --> 00:22:43,700
customers that you know do not buy a

00:22:41,360 --> 00:22:45,470
hardware just because they need to spend

00:22:43,700 --> 00:22:47,540
some money they they want to install

00:22:45,470 --> 00:22:50,840
some software and run some workloads and

00:22:47,540 --> 00:22:53,270
on that hardware and solve some problems

00:22:50,840 --> 00:22:59,620
from some questions or queries etc

00:22:53,270 --> 00:23:03,710
et-cetera process some data and we have

00:22:59,620 --> 00:23:07,250
limited influence to the software world

00:23:03,710 --> 00:23:09,799
because we are a hardware vendor but as

00:23:07,250 --> 00:23:11,630
a last moment when member of the

00:23:09,799 --> 00:23:19,750
foundation will want to highlight this

00:23:11,630 --> 00:23:24,670
aspect we we

00:23:19,750 --> 00:23:27,940
we didn't Ivelisse only were close

00:23:24,670 --> 00:23:34,780
probably but in in the in the workloads

00:23:27,940 --> 00:23:37,150
that we examine it we've seen a room

00:23:34,780 --> 00:23:41,920
from for improvement because first of

00:23:37,150 --> 00:23:44,860
all some software is not even compatible

00:23:41,920 --> 00:23:47,590
with open power it only exists on the

00:23:44,860 --> 00:23:50,940
x86 platform for example a lot of

00:23:47,590 --> 00:23:54,730
analytic software is it's like that and

00:23:50,940 --> 00:23:57,400
as we said we want to make an open power

00:23:54,730 --> 00:24:03,220
a default platform for all these new

00:23:57,400 --> 00:24:06,340
kinds of workloads then it is possible

00:24:03,220 --> 00:24:09,640
that at some point the one power

00:24:06,340 --> 00:24:12,490
platform was supported but then in the

00:24:09,640 --> 00:24:15,340
next release the support of open power

00:24:12,490 --> 00:24:18,190
was discontinued and abandon it that's

00:24:15,340 --> 00:24:20,770
also not a good idea because customer

00:24:18,190 --> 00:24:22,600
would would not be able to do perform an

00:24:20,770 --> 00:24:24,320
upgrade and migrate a new version with

00:24:22,600 --> 00:24:27,410
new features

00:24:24,320 --> 00:24:27,410
[Music]

00:24:29,419 --> 00:24:39,299
also another problem is that a different

00:24:35,700 --> 00:24:41,490
functionality could be present in the in

00:24:39,299 --> 00:24:46,679
the same software we built for different

00:24:41,490 --> 00:24:48,630
platforms and can even leave that very

00:24:46,679 --> 00:24:50,909
different impression when you use it on

00:24:48,630 --> 00:24:53,970
one platform and then compare it to

00:24:50,909 --> 00:24:57,960
another and then a good example that

00:24:53,970 --> 00:25:02,750
would be a good software package which

00:24:57,960 --> 00:25:02,750
is a very popular open-source

00:25:03,110 --> 00:25:10,559
virtualization orchestration package

00:25:07,730 --> 00:25:14,010
over all the year virtualization is very

00:25:10,559 --> 00:25:16,049
important because a a lot of customers

00:25:14,010 --> 00:25:18,289
used to deploy virtual machines on on

00:25:16,049 --> 00:25:21,480
the hardware this increases the

00:25:18,289 --> 00:25:27,120
effective use of the hardware resources

00:25:21,480 --> 00:25:32,090
and at the same time allows to isolate

00:25:27,120 --> 00:25:32,090
different software wishes might be

00:25:32,480 --> 00:25:37,230
required different versions of operating

00:25:34,860 --> 00:25:39,539
system and all those other system

00:25:37,230 --> 00:25:47,580
software like operating system libraries

00:25:39,539 --> 00:25:50,909
etc apart from a number of proprietary

00:25:47,580 --> 00:25:54,120
solutions like VMware and hyper-v that

00:25:50,909 --> 00:25:58,649
come with the set of pallet tools to

00:25:54,120 --> 00:26:03,029
manage and monitor the the

00:25:58,649 --> 00:26:06,330
virtualization platform key VM may also

00:26:03,029 --> 00:26:09,750
be the natural choice for the open

00:26:06,330 --> 00:26:13,580
source adopters or in the projects that

00:26:09,750 --> 00:26:16,769
are focused on the open source software

00:26:13,580 --> 00:26:19,830
even despite the fact that the KVM

00:26:16,769 --> 00:26:25,139
unlocks some features that are available

00:26:19,830 --> 00:26:28,019
with proprietary solutions since the key

00:26:25,139 --> 00:26:31,049
VM is the only realization option

00:26:28,019 --> 00:26:33,870
available for open power customers who

00:26:31,049 --> 00:26:37,470
need to engage this on virtualization

00:26:33,870 --> 00:26:40,150
they basically they have no choice and

00:26:37,470 --> 00:26:42,940
they have to run KVM regardless of

00:26:40,150 --> 00:26:46,630
what previous experience of

00:26:42,940 --> 00:26:50,770
virtualization they had so if they

00:26:46,630 --> 00:26:52,390
already have some key VM deployed in

00:26:50,770 --> 00:26:55,840
their infrastructure that's probably

00:26:52,390 --> 00:26:58,870
easier because they either have some

00:26:55,840 --> 00:27:03,190
helium management tools or maybe they

00:26:58,870 --> 00:27:05,529
are geeks and they just like to run the

00:27:03,190 --> 00:27:10,990
common line utilities and they are fine

00:27:05,529 --> 00:27:13,440
with that but in case if customers never

00:27:10,990 --> 00:27:16,210
had any KVM experience they probably

00:27:13,440 --> 00:27:18,250
would like to ask some for some

00:27:16,210 --> 00:27:21,039
orchestration software and they over it

00:27:18,250 --> 00:27:24,399
could be a very good choice because on

00:27:21,039 --> 00:27:27,029
the x86 it works perfect and it is very

00:27:24,399 --> 00:27:29,980
it was very good is it is bundled with

00:27:27,029 --> 00:27:32,320
everything with all the dependencies and

00:27:29,980 --> 00:27:36,760
they are all pre-configured so once you

00:27:32,320 --> 00:27:39,520
installed it it is ready to run but when

00:27:36,760 --> 00:27:41,890
you start to run it on your own power it

00:27:39,520 --> 00:27:44,260
is very different it doesn't contain the

00:27:41,890 --> 00:27:46,480
internal database so you have to find

00:27:44,260 --> 00:27:48,940
download and install it manually and

00:27:46,480 --> 00:27:54,130
configure it and manually to be used

00:27:48,940 --> 00:27:57,399
with will the overt and then there is a

00:27:54,130 --> 00:28:01,529
another drawback is that over it

00:27:57,399 --> 00:28:04,960
normally has a highly available option

00:28:01,529 --> 00:28:10,600
it can run in they call it self hosted

00:28:04,960 --> 00:28:13,630
engine mmm and on the x86 but for some

00:28:10,600 --> 00:28:16,570
reason this self hosted engine does not

00:28:13,630 --> 00:28:20,470
exist for open power so you either need

00:28:16,570 --> 00:28:24,520
to run it you know in the without I will

00:28:20,470 --> 00:28:28,659
be the features or you need to deploy it

00:28:24,520 --> 00:28:34,029
on the external x86 platform that's

00:28:28,659 --> 00:28:34,649
again very strange and customers do not

00:28:34,029 --> 00:28:40,980
accept that

00:28:34,649 --> 00:28:43,690
so overall the the overt is not the only

00:28:40,980 --> 00:28:46,060
orchestration software that is available

00:28:43,690 --> 00:28:48,730
for key VM but

00:28:46,060 --> 00:28:54,010
we wanted to share this experience with

00:28:48,730 --> 00:28:58,750
you because it is very it shows what

00:28:54,010 --> 00:29:02,700
problems can be with different platforms

00:28:58,750 --> 00:29:02,700
supported in the same software

00:29:05,110 --> 00:29:09,400
another issue that could be seen with

00:29:07,690 --> 00:29:12,970
the software solutions is a lack of

00:29:09,400 --> 00:29:15,100
continuous support so it is not enough

00:29:12,970 --> 00:29:18,550
just to enable the hardware platform at

00:29:15,100 --> 00:29:22,690
one point it should be maintained in the

00:29:18,550 --> 00:29:26,050
next releases so this issue that we face

00:29:22,690 --> 00:29:29,230
it with a DP DK network traffic analysis

00:29:26,050 --> 00:29:32,740
engine that it was initially supported

00:29:29,230 --> 00:29:35,710
with power8 now it already supports

00:29:32,740 --> 00:29:41,230
power 9 but support for power weight was

00:29:35,710 --> 00:29:43,660
removed in the later release we don't

00:29:41,230 --> 00:29:45,220
understand why because our research

00:29:43,660 --> 00:29:48,310
shows that it's still possible to

00:29:45,220 --> 00:29:53,920
execute it on power rate it just needs

00:29:48,310 --> 00:29:56,350
some extra effort and some not obvious

00:29:53,920 --> 00:30:01,650
steps to do it but anyway this is

00:29:56,350 --> 00:30:01,650
possible but that's that's weight worth

00:30:02,100 --> 00:30:08,980
one more important aspect is the

00:30:04,510 --> 00:30:10,980
performance optimization when you port

00:30:08,980 --> 00:30:13,990
your software to the power platform

00:30:10,980 --> 00:30:17,620
that's the first step

00:30:13,990 --> 00:30:20,770
it has to be optimized to use the

00:30:17,620 --> 00:30:22,900
features that are present in the power

00:30:20,770 --> 00:30:27,850
platform and some hardware acceleration

00:30:22,900 --> 00:30:30,970
etc things like that if you are not

00:30:27,850 --> 00:30:32,860
doing this this is not good because at

00:30:30,970 --> 00:30:35,020
the end of the day the platform

00:30:32,860 --> 00:30:37,270
advantages will not be visible to the

00:30:35,020 --> 00:30:41,860
customer because the air mask by the in

00:30:37,270 --> 00:30:44,620
optimal software on cases like that

00:30:41,860 --> 00:30:47,830
require extra force to run a successful

00:30:44,620 --> 00:30:52,100
proof-of-concept create a solution and

00:30:47,830 --> 00:30:54,830
win the customer deal that's why our

00:30:52,100 --> 00:30:59,030
our invitation for the community to

00:30:54,830 --> 00:31:02,120
continue the ongoing contribution to the

00:30:59,030 --> 00:31:03,740
development of power specific and truly

00:31:02,120 --> 00:31:06,980
multi-platform software

00:31:03,740 --> 00:31:10,340
this will outcome an expanding of the

00:31:06,980 --> 00:31:18,049
open power ecosystem that's what's our

00:31:10,340 --> 00:31:20,600
goal so this list of useful resources

00:31:18,049 --> 00:31:25,929
for software porting the docker hub

00:31:20,600 --> 00:31:29,890
images the developer IBM comp ages 4

00:31:25,929 --> 00:31:37,760
with collection of software packages and

00:31:29,890 --> 00:31:40,820
with the porting guides and the SDK ok

00:31:37,760 --> 00:31:43,520
to wrap up this talk were little bit

00:31:40,820 --> 00:31:46,280
over time the this lack of platform

00:31:43,520 --> 00:31:47,870
features and the capabilities that are

00:31:46,280 --> 00:31:51,140
commonly demanded by enterprise

00:31:47,870 --> 00:31:55,580
customers is an important constraint for

00:31:51,140 --> 00:32:00,500
us for developing the innovative and

00:31:55,580 --> 00:32:02,870
high-performance systems so as you could

00:32:00,500 --> 00:32:04,909
could see from our speech delivering the

00:32:02,870 --> 00:32:06,559
open part based solutions for enterprise

00:32:04,909 --> 00:32:09,740
customers has quite a number of

00:32:06,559 --> 00:32:13,640
challenges but it results in a bigger

00:32:09,740 --> 00:32:16,760
market oh this the challenges cause big

00:32:13,640 --> 00:32:21,260
longer time to market and a lot more

00:32:16,760 --> 00:32:25,159
effort more integration more tests to

00:32:21,260 --> 00:32:27,140
run but generally there is a lot of

00:32:25,159 --> 00:32:29,450
things to be done in hardware in

00:32:27,140 --> 00:32:32,570
firmware in an application stack and

00:32:29,450 --> 00:32:35,600
always stack but if we do this work as a

00:32:32,570 --> 00:32:39,380
community if we bring this situation to

00:32:35,600 --> 00:32:42,049
a better level we'll be able to go first

00:32:39,380 --> 00:32:44,390
the platform will become more mature the

00:32:42,049 --> 00:32:47,299
awareness and adoption of the platform

00:32:44,390 --> 00:32:52,220
will grow and new markets would open for

00:32:47,299 --> 00:32:54,710
us and so yeah we'd like to make these

00:32:52,220 --> 00:32:57,950
two worlds closer the open power and the

00:32:54,710 --> 00:32:59,870
enterprise you know thank you for your

00:32:57,950 --> 00:33:04,750
time

00:32:59,870 --> 00:33:04,750

YouTube URL: https://www.youtube.com/watch?v=psf2qx8_ERQ


