Title: OpenPOWER Summit 2016 - A CAPI-based Preliminary Example in Seismic Migration
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Haohuan Fu of Tsinghua University
Captions: 
	00:00:00,230 --> 00:00:04,380
good morning ladies and gentlemen it's

00:00:02,460 --> 00:00:06,210
my great honor stand here to make the

00:00:04,380 --> 00:00:07,980
presentation the title of my

00:00:06,210 --> 00:00:10,950
presentation today is a preliminary

00:00:07,980 --> 00:00:13,559
evaluation of open power 0 optimizing

00:00:10,950 --> 00:00:17,880
stantial paste or rhythms and my name is

00:00:13,559 --> 00:00:19,920
TMC from sea lion Earth Day the

00:00:17,880 --> 00:00:21,869
presentation today will be divided in 4

00:00:19,920 --> 00:00:24,240
parts and first of all we would like to

00:00:21,869 --> 00:00:26,250
provide a brief extraction of our

00:00:24,240 --> 00:00:28,769
research group and secondly an

00:00:26,250 --> 00:00:31,470
evaluation of powerade procedure would

00:00:28,769 --> 00:00:33,930
provided and said uncertainly we would

00:00:31,470 --> 00:00:36,870
like to provide the briefing section of

00:00:33,930 --> 00:00:39,870
cabby technology and finally come up

00:00:36,870 --> 00:00:42,600
come out come out with the preliminary

00:00:39,870 --> 00:00:46,200
example of open power based on the cafe

00:00:42,600 --> 00:00:47,760
and our research group is called sinha

00:00:46,200 --> 00:00:51,420
high-performance to your computing group

00:00:47,760 --> 00:00:54,780
and our research target a finding the

00:00:51,420 --> 00:00:56,699
best computational solution of based on

00:00:54,780 --> 00:00:59,940
the combination of architecture or

00:00:56,699 --> 00:01:02,399
rhythm and applications and the

00:00:59,940 --> 00:01:04,890
applications we are focusing on includes

00:01:02,399 --> 00:01:08,369
the climate modeling seismic modeling

00:01:04,890 --> 00:01:11,400
and treaty planning and as for the

00:01:08,369 --> 00:01:15,630
platform we use the CPU GPU and TFE and

00:01:11,400 --> 00:01:18,720
so on and there are some partners of our

00:01:15,630 --> 00:01:21,030
group including some some of them in

00:01:18,720 --> 00:01:25,680
academic area and some of them I in the

00:01:21,030 --> 00:01:27,960
industrial Field secondly we would like

00:01:25,680 --> 00:01:30,090
to provide a brief extraction of the

00:01:27,960 --> 00:01:33,630
power eight processors or optimizing

00:01:30,090 --> 00:01:35,579
special based algorithms and first of

00:01:33,630 --> 00:01:38,100
all I've take a quick gallons of the

00:01:35,579 --> 00:01:40,170
power it precise ER and in each chip

00:01:38,100 --> 00:01:43,350
module of power 8 processor it is

00:01:40,170 --> 00:01:45,720
combined with tongue or 30 course each

00:01:43,350 --> 00:01:47,880
of which is capable of running up to a

00:01:45,720 --> 00:01:51,299
slice in simultaneous multi-threading

00:01:47,880 --> 00:01:54,180
mode and then the bandwidth of each

00:01:51,299 --> 00:01:58,110
module eight up to 200 gigabytes per

00:01:54,180 --> 00:02:00,930
second and to evaluate it power a

00:01:58,110 --> 00:02:05,189
provider we use stories general Tsin

00:02:00,930 --> 00:02:07,619
shows at our target program and kick

00:02:05,189 --> 00:02:10,110
jacobus to ensure at an example we could

00:02:07,619 --> 00:02:12,260
find out that if we want to get the blue

00:02:10,110 --> 00:02:14,930
point in the middle the

00:02:12,260 --> 00:02:17,989
we need to wait need to use the value of

00:02:14,930 --> 00:02:20,569
all this damn important and at T point

00:02:17,989 --> 00:02:24,019
and then we could get the value of blue

00:02:20,569 --> 00:02:26,629
point in tomato and the murmur except

00:02:24,019 --> 00:02:29,209
memory except pattern of this Jacobi

00:02:26,629 --> 00:02:33,440
essential and autism could be shown in

00:02:29,209 --> 00:02:35,269
the right part of this slide and from

00:02:33,440 --> 00:02:38,060
the memory test pattern we could figure

00:02:35,269 --> 00:02:40,879
out that the remote memory test at

00:02:38,060 --> 00:02:42,859
frequent so the cash maze would be one

00:02:40,879 --> 00:02:45,560
of the biggest challenge of our program

00:02:42,859 --> 00:02:48,170
and secondly from the autism we could

00:02:45,560 --> 00:02:51,139
find out that the Floop to fight ratio

00:02:48,170 --> 00:02:53,239
of this autism is quite low so the

00:02:51,139 --> 00:02:58,700
bandwidth the program is the bandwidth

00:02:53,239 --> 00:03:01,040
bound program and to fully analyze the

00:02:58,700 --> 00:03:03,139
performance of powerade processor a set

00:03:01,040 --> 00:03:05,180
of out my thing techniques would provide

00:03:03,139 --> 00:03:07,250
it first of all we use the light with

00:03:05,180 --> 00:03:10,280
turning to figure out which is the best

00:03:07,250 --> 00:03:13,239
choice of compiler and the optimal

00:03:10,280 --> 00:03:15,409
compiler options according to the

00:03:13,239 --> 00:03:19,639
experimental result we could find out

00:03:15,409 --> 00:03:21,470
that the readout of excel compiler is

00:03:19,639 --> 00:03:24,590
far more better than the GCC compiler

00:03:21,470 --> 00:03:27,290
without other ones to change so the

00:03:24,590 --> 00:03:30,340
actually our compiler with the compiler

00:03:27,290 --> 00:03:33,049
options as shown by its path choice and

00:03:30,340 --> 00:03:36,319
then the second quarter section a

00:03:33,049 --> 00:03:39,079
problem is how to use the simultaneous

00:03:36,319 --> 00:03:40,730
multi-threading mode and as we know the

00:03:39,079 --> 00:03:43,370
simultaneous multi-threading mode aid

00:03:40,730 --> 00:03:45,470
the evaluation of power precise ER and

00:03:43,370 --> 00:03:50,079
actually it's just like the hyper

00:03:45,470 --> 00:03:52,639
sliding of some related coming and

00:03:50,079 --> 00:03:54,680
according to the unlighted as well as

00:03:52,639 --> 00:03:58,879
the experimental result we could find

00:03:54,680 --> 00:04:02,449
out that the latency bound programs is

00:03:58,879 --> 00:04:05,120
real benefit most from the simultaneous

00:04:02,449 --> 00:04:07,220
multi-threading mode and the for the our

00:04:05,120 --> 00:04:10,840
spiritual based algorithm since we have

00:04:07,220 --> 00:04:14,419
fun waistband so the most optimal

00:04:10,840 --> 00:04:18,979
performance it cat when the sm t is

00:04:14,419 --> 00:04:22,159
equal to one and add for the same device

00:04:18,979 --> 00:04:24,380
ization they are the main problem of the

00:04:22,159 --> 00:04:24,960
vectorization a that we should determine

00:04:24,380 --> 00:04:28,050
home

00:04:24,960 --> 00:04:30,569
point we should choose at one time and

00:04:28,050 --> 00:04:34,169
there are two kinds of method of the

00:04:30,569 --> 00:04:36,360
same revitalization including the jpr or

00:04:34,169 --> 00:04:40,740
gate simdi and weight as our and he

00:04:36,360 --> 00:04:42,509
simply on the trip and according to the

00:04:40,740 --> 00:04:45,930
experimental result we could figure out

00:04:42,509 --> 00:04:47,699
that the trip here orientate simply back

00:04:45,930 --> 00:04:51,990
citation will come up with a better

00:04:47,699 --> 00:04:54,000
performance without and also for the

00:04:51,990 --> 00:04:57,030
cash blocking my third the ass go to

00:04:54,000 --> 00:04:59,009
waste and according to the readout we

00:04:57,030 --> 00:05:00,930
could find that the 2d blocking method

00:04:59,009 --> 00:05:03,710
will come out with a better without

00:05:00,930 --> 00:05:07,320
mainly due to a most efficient

00:05:03,710 --> 00:05:12,300
utilization of the cache of the cache

00:05:07,320 --> 00:05:14,250
elements and with the of my vision away

00:05:12,300 --> 00:05:17,630
the training techniques techniques we

00:05:14,250 --> 00:05:21,080
provided I could figure out that upper a

00:05:17,630 --> 00:05:24,870
remarkable performance boost a decayed

00:05:21,080 --> 00:05:28,770
and compared with other with the related

00:05:24,870 --> 00:05:30,509
work we could find that the power is the

00:05:28,770 --> 00:05:34,289
power could get far more better

00:05:30,509 --> 00:05:36,930
performance than the related company the

00:05:34,289 --> 00:05:38,970
product of the pub related company and

00:05:36,930 --> 00:05:43,919
we could get the conclusion that the

00:05:38,970 --> 00:05:45,060
open power is powerful and finally we

00:05:43,919 --> 00:05:47,759
would like to provide a brief

00:05:45,060 --> 00:05:50,849
introduction of cafe technology and a

00:05:47,759 --> 00:05:53,849
preliminary example running an open open

00:05:50,849 --> 00:05:58,139
power with cafe the what ADA Cabot as

00:05:53,849 --> 00:06:00,389
Bruce talked earlier it a coher the cafe

00:05:58,139 --> 00:06:03,389
is a short for the coherent accelerator

00:06:00,389 --> 00:06:05,669
procedure interface and the our case we

00:06:03,389 --> 00:06:10,440
just choose FPGA and powerade at our

00:06:05,669 --> 00:06:12,509
accelerator and provider respectively so

00:06:10,440 --> 00:06:14,490
what will happen prio to cabbie the

00:06:12,509 --> 00:06:16,590
cabbie is the technology designed for

00:06:14,490 --> 00:06:20,539
the heterogeneous computing and periodic

00:06:16,590 --> 00:06:23,219
repay if an application to call the FPGA

00:06:20,539 --> 00:06:26,370
then it need to cause device driver

00:06:23,219 --> 00:06:29,219
maybe it should first general generate

00:06:26,370 --> 00:06:32,070
some variables and the input data stores

00:06:29,219 --> 00:06:33,900
them into the virtual address memory and

00:06:32,070 --> 00:06:36,810
drink or eat them to the device driver

00:06:33,900 --> 00:06:38,729
storage address and finally copy them

00:06:36,810 --> 00:06:42,449
into the FPGA local

00:06:38,729 --> 00:06:44,639
and once the fpl get the outward at age

00:06:42,449 --> 00:06:46,889
should mow it back to the device driver

00:06:44,639 --> 00:06:49,289
storage area and then back to the

00:06:46,889 --> 00:06:51,659
virtual address memory and in that case

00:06:49,289 --> 00:06:54,719
the Assyrians of data which I'm not

00:06:51,659 --> 00:06:56,699
coherent and you notations thousands of

00:06:54,719 --> 00:07:01,319
instructions in the device kick driver

00:06:56,699 --> 00:07:05,249
if needed so with cafe what will happen

00:07:01,319 --> 00:07:08,069
through the PS air in the FPGA part we

00:07:05,249 --> 00:07:09,779
could just the application could

00:07:08,069 --> 00:07:11,610
generate some variable store some

00:07:09,779 --> 00:07:14,099
variables and input data into the

00:07:11,610 --> 00:07:18,080
virtual great memory and then it will be

00:07:14,099 --> 00:07:21,629
the FPGA it capable for exciting days

00:07:18,080 --> 00:07:24,059
variables so in that case they are only

00:07:21,629 --> 00:07:27,830
one to hurt version of data and no

00:07:24,059 --> 00:07:31,770
device driver call if needed animal and

00:07:27,830 --> 00:07:34,919
to test the performance of cafe we use

00:07:31,770 --> 00:07:37,889
the preliminary example vacate the stern

00:07:34,919 --> 00:07:39,960
show based rtm and according to the OEM

00:07:37,889 --> 00:07:42,029
showing the in the power of this slide

00:07:39,960 --> 00:07:44,279
we could figure out that they are

00:07:42,029 --> 00:07:46,499
streaming challenges of this program

00:07:44,279 --> 00:07:48,719
which had the memory temperature

00:07:46,499 --> 00:07:53,009
computational pressure and IO pressure

00:07:48,719 --> 00:07:56,699
and through the experimental result we

00:07:53,009 --> 00:07:58,919
could find out that when we use one call

00:07:56,699 --> 00:08:00,959
power run you with want to use one cup

00:07:58,919 --> 00:08:03,300
of power 8 the mammary excess pressure

00:08:00,959 --> 00:08:05,610
and computing computational pressure is

00:08:03,300 --> 00:08:07,919
a boat analogy of the program however

00:08:05,610 --> 00:08:10,770
when we use 20 course or even more cause

00:08:07,919 --> 00:08:13,469
of power it precise ER the fill I oh and

00:08:10,770 --> 00:08:15,839
others other stuffs would be the main

00:08:13,469 --> 00:08:21,689
bata night as we could say in the yeah

00:08:15,839 --> 00:08:24,529
adhere and to solve this problem waited

00:08:21,689 --> 00:08:27,539
on the hybrid or rhythm which is a

00:08:24,529 --> 00:08:30,300
hybrid always them make that that makes

00:08:27,539 --> 00:08:32,610
the host take charge of the aisle and

00:08:30,300 --> 00:08:34,680
other part of the program and make the

00:08:32,610 --> 00:08:38,959
device specifically take charge of the

00:08:34,680 --> 00:08:41,519
capitation apart and in that case

00:08:38,959 --> 00:08:44,699
compared with the original performance

00:08:41,519 --> 00:08:47,370
and the power of my performance we could

00:08:44,699 --> 00:08:52,040
figure out that the cabbie room would

00:08:47,370 --> 00:08:52,040
come up with a better without wait yeah

00:08:52,509 --> 00:08:58,790
and in conclusion the Kami the open

00:08:55,550 --> 00:09:01,279
power system with cafe is a makes the

00:08:58,790 --> 00:09:04,220
combination of powerful hosts flexible

00:09:01,279 --> 00:09:06,139
device and low latency interface so it

00:09:04,220 --> 00:09:10,279
would come up with an extremely high

00:09:06,139 --> 00:09:14,050
performance in other without and that's

00:09:10,279 --> 00:09:14,050

YouTube URL: https://www.youtube.com/watch?v=evyau1xug7k


