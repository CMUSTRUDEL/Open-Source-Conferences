Title: OpenPOWER Summit 2016 - HTX & eCMD system development tools
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Jason Albert & Mehulkumar J. Patel of IBM
Captions: 
	00:00:00,000 --> 00:00:06,180
my name is mehul patel and i've been

00:00:03,419 --> 00:00:08,069
working in IBM for past 13 years doing

00:00:06,180 --> 00:00:12,120
some of these Hardware validation tools

00:00:08,069 --> 00:00:13,830
development for the power servers and in

00:00:12,120 --> 00:00:17,130
today's presentation we able to talk

00:00:13,830 --> 00:00:20,510
about you know two very important system

00:00:17,130 --> 00:00:24,000
development system test kind of tools

00:00:20,510 --> 00:00:25,980
htx andy command and i have a jason

00:00:24,000 --> 00:00:27,990
albert who would you know cover about

00:00:25,980 --> 00:00:30,119
the eq man as well as some of the

00:00:27,990 --> 00:00:32,969
important announcement about these three

00:00:30,119 --> 00:00:36,899
tools and you know how the future of

00:00:32,969 --> 00:00:39,480
these two tools so let me start with

00:00:36,899 --> 00:00:43,379
that so in the agenda i have a quick

00:00:39,480 --> 00:00:45,660
overview of htx and then Jason will

00:00:43,379 --> 00:00:48,180
cover the command part as well as some

00:00:45,660 --> 00:00:54,149
of the important announcements about the

00:00:48,180 --> 00:00:57,059
future of these two tools alright so HDX

00:00:54,149 --> 00:00:58,920
has ants for hardware test executive

00:00:57,059 --> 00:01:01,980
this is basically the system level

00:00:58,920 --> 00:01:05,729
hardware validation tool for the power

00:01:01,980 --> 00:01:08,220
server so HDX basically you know

00:01:05,729 --> 00:01:11,970
consists of it's a tool suite consists

00:01:08,220 --> 00:01:14,930
of the exercisers we call it as a test

00:01:11,970 --> 00:01:18,240
program call it as exerciser we have got

00:01:14,930 --> 00:01:21,900
in the tool suite we have exercises for

00:01:18,240 --> 00:01:24,930
processor memory and i/o subsystem like

00:01:21,900 --> 00:01:28,259
you know there are programs for VSU

00:01:24,930 --> 00:01:31,680
their programs for l2 cache l3 cache

00:01:28,259 --> 00:01:36,090
memory fabric bus whole bunch of i/o

00:01:31,680 --> 00:01:38,810
devices like disks network adapters you

00:01:36,090 --> 00:01:41,729
know RDMA capable adapters and so on so

00:01:38,810 --> 00:01:45,180
the the tool so it consists of all these

00:01:41,729 --> 00:01:47,280
exerciser most of these exerciser has

00:01:45,180 --> 00:01:50,840
got the test logic sitting in the user

00:01:47,280 --> 00:01:56,149
space and they're all the user processes

00:01:50,840 --> 00:01:59,399
HDX is kind of currently supported on a

00:01:56,149 --> 00:02:03,540
linux operating system running either as

00:01:59,399 --> 00:02:05,759
a kvm guest or it could be running as a

00:02:03,540 --> 00:02:07,710
host or it could even be running as a

00:02:05,759 --> 00:02:11,870
non virtualized

00:02:07,710 --> 00:02:14,990
in a non virtualized mode so currently

00:02:11,870 --> 00:02:18,890
h6 is kind of supported and tested on

00:02:14,990 --> 00:02:25,140
three different flavors of linux redhat

00:02:18,890 --> 00:02:28,890
su SE and ubuntu you know each each of

00:02:25,140 --> 00:02:30,540
the HDX exerciser basically as I

00:02:28,890 --> 00:02:32,730
mentioned the test logic resides in a

00:02:30,540 --> 00:02:35,280
user space you could have an associated

00:02:32,730 --> 00:02:37,020
rule file which kind of describes the

00:02:35,280 --> 00:02:39,720
test cases and you can go and kind of

00:02:37,020 --> 00:02:41,550
you know change the test cases on the

00:02:39,720 --> 00:02:44,100
fly and the exercise of would kind of

00:02:41,550 --> 00:02:49,320
change its test pattern or behavior

00:02:44,100 --> 00:02:51,239
accordingly so HDX also has got two

00:02:49,320 --> 00:02:54,209
different kind of management interfaces

00:02:51,239 --> 00:02:56,519
to control the exercisers you could you

00:02:54,209 --> 00:02:58,080
could have a menu-driven interface or

00:02:56,519 --> 00:02:59,910
you could even have an automation

00:02:58,080 --> 00:03:02,780
friendly kind of command-line interface

00:02:59,910 --> 00:03:06,090
as well his cheeks has kind of been used

00:03:02,780 --> 00:03:09,209
within IBM right from bring up to

00:03:06,090 --> 00:03:11,930
manufacturing test for a little over you

00:03:09,209 --> 00:03:14,519
know two decades I would say and

00:03:11,930 --> 00:03:17,000
currently H takes is also kind of

00:03:14,519 --> 00:03:23,720
available to all the open power partners

00:03:17,000 --> 00:03:27,329
open bar members in a binary form ok

00:03:23,720 --> 00:03:29,489
here's the sort of a you know a high

00:03:27,329 --> 00:03:31,380
level diagram of htx I cannot go into

00:03:29,489 --> 00:03:33,299
details of each exerciser but I just

00:03:31,380 --> 00:03:36,209
wanted to give you a glimpse of you know

00:03:33,299 --> 00:03:38,130
at a very high level how does HT look

00:03:36,209 --> 00:03:40,680
like so you can see that on the

00:03:38,130 --> 00:03:42,450
left-hand side these are all the bunch

00:03:40,680 --> 00:03:45,180
of hardware exercises these are all

00:03:42,450 --> 00:03:46,650
basically the user programs each of the

00:03:45,180 --> 00:03:49,079
hardware exercise are kind of runs

00:03:46,650 --> 00:03:50,760
independent of the other one and the

00:03:49,079 --> 00:03:52,350
objective is that each of the hardware

00:03:50,760 --> 00:03:55,350
exercise a kind of focuses on a specific

00:03:52,350 --> 00:03:58,019
part of the order specific unit of the

00:03:55,350 --> 00:04:01,079
hardware beat up you know VSU or l2 or

00:03:58,019 --> 00:04:04,700
l3 cache or you know a memory or fabric

00:04:01,079 --> 00:04:08,090
bus or or maybe an i/o piece over there

00:04:04,700 --> 00:04:11,070
these Hardware exercise are basically

00:04:08,090 --> 00:04:13,290
communicates through the bunch of

00:04:11,070 --> 00:04:16,139
inter-process communication mechanism

00:04:13,290 --> 00:04:18,750
and they put in the you know error logs

00:04:16,139 --> 00:04:21,299
message log statistics they feed all of

00:04:18,750 --> 00:04:23,789
that into a inter process communication

00:04:21,299 --> 00:04:25,949
mechanism and you know there are a bunch

00:04:23,789 --> 00:04:28,590
of other helper programs like a message

00:04:25,949 --> 00:04:30,629
log program or stats program they

00:04:28,590 --> 00:04:33,870
basically utilize that information and

00:04:30,629 --> 00:04:36,509
create some useful files over there this

00:04:33,870 --> 00:04:38,580
users basically interact through a top

00:04:36,509 --> 00:04:41,039
layer which is called the HDX supervisor

00:04:38,580 --> 00:04:43,289
so we got two different interfaces as I

00:04:41,039 --> 00:04:44,849
mentioned you have a you know a user

00:04:43,289 --> 00:04:47,099
interactive kind of a menu-driven

00:04:44,849 --> 00:04:49,020
interface or you could even have a

00:04:47,099 --> 00:04:53,819
command-line interface to automate your

00:04:49,020 --> 00:04:55,860
runs and as I already mentioned htx kind

00:04:53,819 --> 00:04:58,949
of runs in three different modes we're

00:04:55,860 --> 00:05:00,990
here it can run it as a Linux guest you

00:04:58,949 --> 00:05:03,449
can run it as a bare metal nan

00:05:00,990 --> 00:05:06,000
virtualized mode or it can even run on a

00:05:03,449 --> 00:05:10,400
you know a Linux in the host environment

00:05:06,000 --> 00:05:12,840
itself so with this I'll hand it over to

00:05:10,400 --> 00:05:17,430
Jesus and all but he will talk through

00:05:12,840 --> 00:05:21,120
week Matt thanks very well so II command

00:05:17,430 --> 00:05:24,900
is for is IBM systems Hardware access

00:05:21,120 --> 00:05:26,430
API for bring up in debug of systems if

00:05:24,900 --> 00:05:29,639
you've used the open power lab toolkit

00:05:26,430 --> 00:05:31,259
you've used a command and what the whole

00:05:29,639 --> 00:05:33,090
purpose mindii command is to provide a

00:05:31,259 --> 00:05:34,500
consistent user experience when trying

00:05:33,090 --> 00:05:37,199
to debug the system as you move from

00:05:34,500 --> 00:05:41,370
system to system or even generation a

00:05:37,199 --> 00:05:44,250
generation of processor the core API is

00:05:41,370 --> 00:05:46,759
a CC plus API but it also provides a

00:05:44,250 --> 00:05:51,710
UNIX command line for debug as well as

00:05:46,759 --> 00:05:55,139
Python and Perl bindings for scripting

00:05:51,710 --> 00:05:58,020
it goes it has said over two hundred

00:05:55,139 --> 00:06:02,430
api's and that's from simple scan INSCOM

00:05:58,020 --> 00:06:04,289
to i2c access GPIO access and even like

00:06:02,430 --> 00:06:06,870
architected register state in the

00:06:04,289 --> 00:06:09,110
processor and there's a core data object

00:06:06,870 --> 00:06:12,029
that most of the api's use and that has

00:06:09,110 --> 00:06:13,680
a ton of different data manipulation API

00:06:12,029 --> 00:06:16,110
is on if you want to print your data is

00:06:13,680 --> 00:06:17,900
binary strings or left line strings that

00:06:16,110 --> 00:06:22,110
provides all that functionality for you

00:06:17,900 --> 00:06:24,569
and it is designed so that the user can

00:06:22,110 --> 00:06:26,430
switch between environments pretty

00:06:24,569 --> 00:06:28,199
easily you just flip an environment

00:06:26,430 --> 00:06:30,509
variable to point to a different plug in

00:06:28,199 --> 00:06:33,180
and you can switch from running like the

00:06:30,509 --> 00:06:34,600
lab bring up debug code to running

00:06:33,180 --> 00:06:36,100
against the production firmware

00:06:34,600 --> 00:06:38,080
and their version of you command to do

00:06:36,100 --> 00:06:39,610
and your command stick and when you do

00:06:38,080 --> 00:06:44,020
that so your gets gone whatever it might

00:06:39,610 --> 00:06:45,880
be run the same and it does I think

00:06:44,020 --> 00:06:49,090
we're on like version 14 of each command

00:06:45,880 --> 00:06:50,860
now it can it guarantees compatibility

00:06:49,090 --> 00:06:54,190
with in the minor revisions and it does

00:06:50,860 --> 00:06:55,570
major revision API checking just so that

00:06:54,190 --> 00:06:58,080
way your programs don't core dump it

00:06:55,570 --> 00:07:01,240
just polite pretty nice polite message

00:06:58,080 --> 00:07:02,890
and it's been in use since 2003 so we've

00:07:01,240 --> 00:07:05,830
used it on multiple generations of power

00:07:02,890 --> 00:07:09,700
now we'll give you a little bit of a

00:07:05,830 --> 00:07:12,640
damn the ecom an API is the center part

00:07:09,700 --> 00:07:15,040
here in blue if you use going back the

00:07:12,640 --> 00:07:16,600
open power lab toolkit if you use any of

00:07:15,040 --> 00:07:19,240
the tools they're like fur check or I

00:07:16,600 --> 00:07:20,970
otk cron dump those I'll run up here in

00:07:19,240 --> 00:07:24,430
the user space as he command programs

00:07:20,970 --> 00:07:26,620
using the API and then there's you can

00:07:24,430 --> 00:07:28,810
have any number of plugins to talk to

00:07:26,620 --> 00:07:30,010
your hardware Cronus is the one people

00:07:28,810 --> 00:07:32,170
are probably most familiar with that's

00:07:30,010 --> 00:07:35,170
what we ship to a lot of people to debug

00:07:32,170 --> 00:07:37,660
their hardware there's a plug-in layer

00:07:35,170 --> 00:07:39,310
that you create that will adapt it to or

00:07:37,660 --> 00:07:41,920
plugin so if you have an existing tool

00:07:39,310 --> 00:07:43,240
that's what you can use that for and

00:07:41,920 --> 00:07:44,440
from a user perspective it's really

00:07:43,240 --> 00:07:47,980
pretty slick because if you run a

00:07:44,440 --> 00:07:50,080
program like crop dump it'll prone to

00:07:47,980 --> 00:07:51,580
dump the state from power where and

00:07:50,080 --> 00:07:55,060
it'll create the stump file over here

00:07:51,580 --> 00:07:57,280
where you can then use a command and use

00:07:55,060 --> 00:07:59,860
the scandi plugin to go in and do a gets

00:07:57,280 --> 00:08:02,380
 so whether you're talking to the

00:07:59,860 --> 00:08:04,180
hardware or a dump file the user is run

00:08:02,380 --> 00:08:06,640
on the same commands they don't have to

00:08:04,180 --> 00:08:11,500
learn for each different tool they move

00:08:06,640 --> 00:08:12,730
to so we've kind of covered the our test

00:08:11,500 --> 00:08:14,260
tools and our bring up in

00:08:12,730 --> 00:08:17,320
characterization tools which kind of

00:08:14,260 --> 00:08:19,000
form the core of what we do and so today

00:08:17,320 --> 00:08:21,880
what we're here to announce actually is

00:08:19,000 --> 00:08:26,020
that we're open sourcing both of these

00:08:21,880 --> 00:08:27,730
tools so ibm's open source you know

00:08:26,020 --> 00:08:29,290
ibm's opened up the hardware we've

00:08:27,730 --> 00:08:31,450
opened up the firmware stack and now

00:08:29,290 --> 00:08:32,919
we're opening the tools on top of that

00:08:31,450 --> 00:08:36,490
that you can use to debug and bring up

00:08:32,919 --> 00:08:38,740
those things sumtotal it's over 35 years

00:08:36,490 --> 00:08:41,890
of combined IBM development experience

00:08:38,740 --> 00:08:45,430
in these tools it's live now on github

00:08:41,890 --> 00:08:46,420
it's a patchy 2 point 0 license and you

00:08:45,430 --> 00:08:47,810
know the main reason we're doing this is

00:08:46,420 --> 00:08:51,350
we want to collaborate with everyone

00:08:47,810 --> 00:08:52,970
make Google talks about maybe we'll talk

00:08:51,350 --> 00:08:54,920
about the exercisers and that's

00:08:52,970 --> 00:08:56,720
definitely something where if you're

00:08:54,920 --> 00:08:59,090
providing if you're creating an IO

00:08:56,720 --> 00:09:02,440
adapter you know consider creating an

00:08:59,090 --> 00:09:05,750
htx exerciser and contributing it back

00:09:02,440 --> 00:09:08,089
and it is flexible collaboration we know

00:09:05,750 --> 00:09:10,279
a lot of people right now they're using

00:09:08,089 --> 00:09:11,830
the open power tab lab toolkit or HDX

00:09:10,279 --> 00:09:14,210
they're using the binary distributions

00:09:11,830 --> 00:09:15,920
those will continue to be available from

00:09:14,210 --> 00:09:18,050
IBM if you don't want to mess around

00:09:15,920 --> 00:09:20,420
with building the source and stuff you

00:09:18,050 --> 00:09:24,260
don't have to but it is available it is

00:09:20,420 --> 00:09:26,779
out there so you can build HDX for if

00:09:24,260 --> 00:09:29,270
you want and then hopefully while you're

00:09:26,779 --> 00:09:31,250
in there take a look maybe contribute an

00:09:29,270 --> 00:09:33,470
exerciser there's sample exercisers that

00:09:31,250 --> 00:09:35,990
make it really easy to get started and

00:09:33,470 --> 00:09:38,540
then same with E command if you feel

00:09:35,990 --> 00:09:39,890
there's an API missing propose it or at

00:09:38,540 --> 00:09:41,930
the same point you can create your own

00:09:39,890 --> 00:09:46,160
plug-in to talk specifically to your

00:09:41,930 --> 00:09:47,210
hardware so these two charts will just

00:09:46,160 --> 00:09:49,550
kind of go real quick these are the

00:09:47,210 --> 00:09:51,350
details so they'll be online you can see

00:09:49,550 --> 00:09:52,970
where to get where to get it from a cool

00:09:51,350 --> 00:09:58,310
is the lead maintain will be the lean

00:09:52,970 --> 00:10:01,850
maintainer on HX and then Matt light who

00:09:58,310 --> 00:10:05,420
can be here is the lead maintainer on on

00:10:01,850 --> 00:10:06,860
e command and so the documentation is

00:10:05,420 --> 00:10:09,020
out there for both we're just getting

00:10:06,860 --> 00:10:12,920
started we're certainly you know looking

00:10:09,020 --> 00:10:14,180
forward to feedback on that as well so

00:10:12,920 --> 00:10:17,060
the final slide here is we just wanna

00:10:14,180 --> 00:10:18,860
say thanks we do want to like say we

00:10:17,060 --> 00:10:21,589
want to contribute with everyone with

00:10:18,860 --> 00:10:23,570
the API defined you know now if there's

00:10:21,589 --> 00:10:25,130
something you know I know one of the

00:10:23,570 --> 00:10:26,780
things that's been missing on the host

00:10:25,130 --> 00:10:28,280
boot side is no source level debugger

00:10:26,780 --> 00:10:29,810
hopefully now with the api out there

00:10:28,280 --> 00:10:32,600
defined maybe that's something that

00:10:29,810 --> 00:10:34,220
someone's interested in creating if

00:10:32,600 --> 00:10:36,530
you're getting questions find myself

00:10:34,220 --> 00:10:38,510
form a hole here on the floor or get in

00:10:36,530 --> 00:10:41,390
touch after the summit with the emails

00:10:38,510 --> 00:10:43,630
there below so so we've got thank you

00:10:41,390 --> 00:10:43,630

YouTube URL: https://www.youtube.com/watch?v=BkWqsof3oCw


