Title: OpenPOWER Summit 2016 - Mission Critical Accelerated Applications
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Roy Graham of DRC Computer
Captions: 
	00:00:01,399 --> 00:00:08,010
well good evening for any of you know

00:00:05,400 --> 00:00:10,730
the music group Pink Floyd yola also

00:00:08,010 --> 00:00:15,870
know the line is there anybody out there

00:00:10,730 --> 00:00:20,539
any way up to the subject matter so I'm

00:00:15,870 --> 00:00:23,880
Roy grant from DRC computer we have

00:00:20,539 --> 00:00:26,599
developed a range of applications I'll

00:00:23,880 --> 00:00:29,099
talk more about that in a minute

00:00:26,599 --> 00:00:32,820
particularly we're very focused on high

00:00:29,099 --> 00:00:37,530
performance applications so we take a

00:00:32,820 --> 00:00:39,540
number of fpga-based board so we work

00:00:37,530 --> 00:00:43,559
closely with bit where with nanotech

00:00:39,540 --> 00:00:46,559
with alpha data and we program the the

00:00:43,559 --> 00:00:48,539
applications onto those boards so a sort

00:00:46,559 --> 00:00:50,190
of value if you like or unleashing the

00:00:48,539 --> 00:00:53,699
market is developing very high

00:00:50,190 --> 00:00:54,930
performance applications we've done a

00:00:53,699 --> 00:00:56,670
lot of work in many many different

00:00:54,930 --> 00:00:59,129
applications areas i'll talk about those

00:00:56,670 --> 00:01:01,920
as we go through the the presentation

00:00:59,129 --> 00:01:03,960
we're based in Silicon Valley and there

00:01:01,920 --> 00:01:05,790
were actually a subsidiary of another

00:01:03,960 --> 00:01:09,180
California software company called

00:01:05,790 --> 00:01:10,830
security first corporation just a I

00:01:09,180 --> 00:01:13,500
don't know how many of you are familiar

00:01:10,830 --> 00:01:15,299
with FPGAs but we'll we'll assume some

00:01:13,500 --> 00:01:17,430
knowledge but not a lot one of the ways

00:01:15,299 --> 00:01:18,810
to look at at pjs from a high-level

00:01:17,430 --> 00:01:21,750
point of view is that you've got

00:01:18,810 --> 00:01:23,729
something like 10,000 processing units

00:01:21,750 --> 00:01:25,680
within the chip so if you compare that

00:01:23,729 --> 00:01:29,280
for example with a cpu or you might have

00:01:25,680 --> 00:01:30,990
you know 4 8 16 cause the key is to find

00:01:29,280 --> 00:01:34,740
applications where you can get each of

00:01:30,990 --> 00:01:36,360
those 10,000 processing units executing

00:01:34,740 --> 00:01:38,520
in parallel and in fact all of those

00:01:36,360 --> 00:01:40,500
10,000 do execute on every clock cycle

00:01:38,520 --> 00:01:41,640
so the key is to look for that

00:01:40,500 --> 00:01:45,329
parallelism where you can take advantage

00:01:41,640 --> 00:01:48,270
of that that technology in many

00:01:45,329 --> 00:01:50,430
application areas were achieving 50 to

00:01:48,270 --> 00:01:53,820
100 times acceleration compared to the

00:01:50,430 --> 00:01:56,219
equivalent software version more often

00:01:53,820 --> 00:01:59,399
than not we've taken for example a

00:01:56,219 --> 00:02:01,890
single threaded single core application

00:01:59,399 --> 00:02:03,420
software application and when we go back

00:02:01,890 --> 00:02:05,250
to the basic so you really look at the

00:02:03,420 --> 00:02:07,710
mathematics if you like behind the

00:02:05,250 --> 00:02:09,810
algorithms behind the application and

00:02:07,710 --> 00:02:11,250
really say well I'm now going to program

00:02:09,810 --> 00:02:12,510
this not for a single core or single

00:02:11,250 --> 00:02:13,330
thread or even a multi-threaded

00:02:12,510 --> 00:02:15,220
environment

00:02:13,330 --> 00:02:17,950
I'm not going to program this for a

00:02:15,220 --> 00:02:19,570
device that has 10,000 and processing

00:02:17,950 --> 00:02:21,550
units in it so you go back to the

00:02:19,570 --> 00:02:24,490
fundamentals of the algorithm then you

00:02:21,550 --> 00:02:27,550
structure a solution around that around

00:02:24,490 --> 00:02:31,330
that structure one of the big advantages

00:02:27,550 --> 00:02:34,390
of fpgas they they're very low power

00:02:31,330 --> 00:02:37,270
consumption device typically around 25

00:02:34,390 --> 00:02:38,830
watts so if you kind of think about the

00:02:37,270 --> 00:02:42,280
math of this year let's say you getting

00:02:38,830 --> 00:02:44,920
50 times acceleration compared to a cpu

00:02:42,280 --> 00:02:49,690
you're replacing 50 cpus with one at pj

00:02:44,920 --> 00:02:51,220
you're looking at 50 times what 50 125

00:02:49,690 --> 00:02:53,230
watts you're looking at six kilowatts

00:02:51,220 --> 00:02:57,780
and replacing that with a 25 watt device

00:02:53,230 --> 00:03:00,780
so in environments where energy space

00:02:57,780 --> 00:03:04,090
real estate is important infrastructure

00:03:00,780 --> 00:03:05,740
then FPGA is offer a very very good

00:03:04,090 --> 00:03:07,959
solution and for that type of

00:03:05,740 --> 00:03:11,790
environment one of the other advantages

00:03:07,959 --> 00:03:15,580
of fpgas is they're highly secure so the

00:03:11,790 --> 00:03:18,340
ability to get in and modify an FPGA

00:03:15,580 --> 00:03:21,489
wants it's running is very very

00:03:18,340 --> 00:03:23,650
difficult it's nowhere near it's a lot

00:03:21,489 --> 00:03:25,690
easier for example in software had to go

00:03:23,650 --> 00:03:27,970
in and provide a Trojan horse or pro or

00:03:25,690 --> 00:03:30,489
hack into the software it's virtually

00:03:27,970 --> 00:03:32,530
impossible to do that within an FPGA so

00:03:30,489 --> 00:03:36,880
it also lends itself very nicely to

00:03:32,530 --> 00:03:38,650
secure based environment the other big

00:03:36,880 --> 00:03:41,350
advantage of fpgas because you've got

00:03:38,650 --> 00:03:42,910
this huge processing capacity is you can

00:03:41,350 --> 00:03:45,519
start to look at things like analytics

00:03:42,910 --> 00:03:47,410
very differently so rather than that the

00:03:45,519 --> 00:03:50,019
conventional ETL structure where you

00:03:47,410 --> 00:03:51,730
store the data you might convert it and

00:03:50,019 --> 00:03:53,769
then and then you do the analytics on on

00:03:51,730 --> 00:03:56,890
the back end we can actually now do the

00:03:53,769 --> 00:03:59,320
analytics on the fly so we can take in

00:03:56,890 --> 00:04:00,850
data directly into the FPGA run the

00:03:59,320 --> 00:04:03,130
algorithm the analytic algorithms that

00:04:00,850 --> 00:04:04,840
we want to on the FPGA and and output

00:04:03,130 --> 00:04:08,290
the result so it becomes a very real

00:04:04,840 --> 00:04:12,760
time responsive environment compared to

00:04:08,290 --> 00:04:14,080
conventional computer architectures the

00:04:12,760 --> 00:04:16,810
sort of applications that lend

00:04:14,080 --> 00:04:18,489
themselves very well to F pjs view again

00:04:16,810 --> 00:04:20,229
if you're looking at how do I exploit

00:04:18,489 --> 00:04:23,590
this parallelism of things like pattern

00:04:20,229 --> 00:04:24,820
identification pattern matching and for

00:04:23,590 --> 00:04:26,830
those who you're very familiar with big

00:04:24,820 --> 00:04:29,050
data replication you know the

00:04:26,830 --> 00:04:30,639
the analytics in big data is finding the

00:04:29,050 --> 00:04:32,740
you know they call it the needle in the

00:04:30,639 --> 00:04:35,169
haystack problem its pattern

00:04:32,740 --> 00:04:37,900
identification pattern matching types of

00:04:35,169 --> 00:04:39,340
applications and in fact people still

00:04:37,900 --> 00:04:41,259
talk about well we have this massive

00:04:39,340 --> 00:04:42,729
data source we're going to find the

00:04:41,259 --> 00:04:44,289
needle in the haystack I say that's the

00:04:42,729 --> 00:04:46,509
wrong problem what you need to do is

00:04:44,289 --> 00:04:48,520
find the needle before you add the hay

00:04:46,509 --> 00:04:51,460
onto the haystack so you do it as a

00:04:48,520 --> 00:04:56,110
screaming environment as your input as

00:04:51,460 --> 00:04:58,990
you input the data we joined the open

00:04:56,110 --> 00:05:01,210
power foundation in January we actually

00:04:58,990 --> 00:05:05,080
had been working with a BM for a number

00:05:01,210 --> 00:05:08,169
of months during last year and I've been

00:05:05,080 --> 00:05:10,509
very impressed and very grateful to the

00:05:08,169 --> 00:05:12,610
the help and assistance we've got from

00:05:10,509 --> 00:05:15,370
both IBM but also from other partners

00:05:12,610 --> 00:05:16,810
and in fact this this conference has

00:05:15,370 --> 00:05:18,699
been very useful in terms of a lot of

00:05:16,810 --> 00:05:22,080
new introductions into other open power

00:05:18,699 --> 00:05:25,120
members so I've seen substantial value

00:05:22,080 --> 00:05:31,060
as a supplier in the the of empower

00:05:25,120 --> 00:05:34,029
foundation all our solutions are cloud

00:05:31,060 --> 00:05:35,800
enabled the environments that we

00:05:34,029 --> 00:05:38,529
typically operate in often have

00:05:35,800 --> 00:05:40,409
dedicated data centers we do a lot of

00:05:38,529 --> 00:05:43,419
work in the intelligence community

00:05:40,409 --> 00:05:45,250
however the applications have been

00:05:43,419 --> 00:05:48,219
architected and structured so either

00:05:45,250 --> 00:05:50,560
both highly scalable but also it's

00:05:48,219 --> 00:05:54,690
possible to place those inside inside a

00:05:50,560 --> 00:05:57,219
cloud-based cloud-based environment and

00:05:54,690 --> 00:06:00,180
so if we take a look at just some of the

00:05:57,219 --> 00:06:02,500
applications that we have we worked on

00:06:00,180 --> 00:06:05,919
you can see this I what I've tried to

00:06:02,500 --> 00:06:09,460
here is is contrast a cloud-based

00:06:05,919 --> 00:06:11,650
environment from on the x-axis to a

00:06:09,460 --> 00:06:14,710
dedicated environment that on the y-axis

00:06:11,650 --> 00:06:16,300
from a server to a mobile so many of the

00:06:14,710 --> 00:06:17,830
applications again because of the very

00:06:16,300 --> 00:06:19,960
low energy footprint or low power

00:06:17,830 --> 00:06:21,819
consumption footprint can actually be

00:06:19,960 --> 00:06:23,529
crab placed into a mobile environment

00:06:21,819 --> 00:06:25,330
whether it's a laptop or whether it's a

00:06:23,529 --> 00:06:27,580
you know I'd like device or even a

00:06:25,330 --> 00:06:29,740
cellphone environment you'll see here

00:06:27,580 --> 00:06:32,620
that a lot of these applications have

00:06:29,740 --> 00:06:35,319
that ability to migrate from a dedicated

00:06:32,620 --> 00:06:39,370
server environment into either a cloud

00:06:35,319 --> 00:06:40,180
environment or into into mobile devices

00:06:39,370 --> 00:06:42,449
and

00:06:40,180 --> 00:06:45,250
in fact frequently the applications

00:06:42,449 --> 00:06:46,810
operate like we used to talk about

00:06:45,250 --> 00:06:48,910
client server based environment where

00:06:46,810 --> 00:06:50,050
there's a tight cooperation if you like

00:06:48,910 --> 00:06:52,240
between what happens on the mobile

00:06:50,050 --> 00:06:54,699
device was what happens in the backend

00:06:52,240 --> 00:06:56,650
server so for example a biometrics

00:06:54,699 --> 00:06:58,630
application fingerprint analysis may be

00:06:56,650 --> 00:07:02,160
a good one where you might store on the

00:06:58,630 --> 00:07:05,440
local device the fingerprint set that's

00:07:02,160 --> 00:07:07,389
known people that's local to that

00:07:05,440 --> 00:07:09,009
particular geography but on the other

00:07:07,389 --> 00:07:10,750
hand you may have travelers so then then

00:07:09,009 --> 00:07:12,310
you go to the backend system as well so

00:07:10,750 --> 00:07:14,919
you have this ability to migrate quickly

00:07:12,310 --> 00:07:16,270
between the mobile device and the do the

00:07:14,919 --> 00:07:18,849
analytics on the mobile device but also

00:07:16,270 --> 00:07:22,090
have access to the backend cloud

00:07:18,849 --> 00:07:23,770
environment as well so what I like to do

00:07:22,090 --> 00:07:25,479
and just sort of finish off the

00:07:23,770 --> 00:07:27,880
presentation is talk about the two that

00:07:25,479 --> 00:07:30,669
two applications here that I've circled

00:07:27,880 --> 00:07:34,259
in red once the fuzzy search and the

00:07:30,669 --> 00:07:39,490
others the the graph networking product

00:07:34,259 --> 00:07:43,900
so on the graph side the we run we use

00:07:39,490 --> 00:07:45,760
graph networking and we run to specific

00:07:43,900 --> 00:07:48,389
algorithms within this structure so

00:07:45,760 --> 00:07:50,800
one's a Dykstra so Dykstra looks for

00:07:48,389 --> 00:07:53,740
connections between entities an entity

00:07:50,800 --> 00:07:56,740
could be a person a location could be a

00:07:53,740 --> 00:08:00,310
thing could be an event and then you

00:07:56,740 --> 00:08:02,590
connecting the the entities are things

00:08:00,310 --> 00:08:03,849
called edges so you look for what are

00:08:02,590 --> 00:08:07,870
the tightness of the connection between

00:08:03,849 --> 00:08:09,460
the entities and then you also look for

00:08:07,870 --> 00:08:11,530
what's called centrality so you're

00:08:09,460 --> 00:08:14,680
looking for maybe specific locations

00:08:11,530 --> 00:08:20,320
events people that are central if you

00:08:14,680 --> 00:08:24,159
like to a structure the environment that

00:08:20,320 --> 00:08:26,650
we run in it's applicable to financial

00:08:24,159 --> 00:08:28,930
services as well as to the intelligence

00:08:26,650 --> 00:08:31,780
market and also transportation so

00:08:28,930 --> 00:08:33,729
anything where you're looking for in

00:08:31,780 --> 00:08:36,339
real-time connections between things

00:08:33,729 --> 00:08:39,760
between entities it's an ideal

00:08:36,339 --> 00:08:41,860
application for that now the the big

00:08:39,760 --> 00:08:44,290
advantage of the FPGA so try to show

00:08:41,860 --> 00:08:47,200
here in the bottom right graphic is that

00:08:44,290 --> 00:08:48,700
because of the evaluators of things have

00:08:47,200 --> 00:08:51,310
run the dikes from the the betweenness

00:08:48,700 --> 00:08:53,560
centrality algorithms and those

00:08:51,310 --> 00:08:54,240
evaluators are small enough that we can

00:08:53,560 --> 00:08:56,010
actually get

00:08:54,240 --> 00:08:58,500
more more than one of those in fact to a

00:08:56,010 --> 00:09:01,770
hundred of those inside an individual

00:08:58,500 --> 00:09:03,089
FPGA so just think you've got two sets

00:09:01,770 --> 00:09:05,010
of things going on here in terms of

00:09:03,089 --> 00:09:07,140
parallelism so you've got not only the

00:09:05,010 --> 00:09:09,029
execution of those 10,000 processing

00:09:07,140 --> 00:09:11,250
units on every clock cycle we've also

00:09:09,029 --> 00:09:12,720
now got a hundred instances of that

00:09:11,250 --> 00:09:16,140
particular algorithm running

00:09:12,720 --> 00:09:18,000
simultaneously insid inside the FPGA you

00:09:16,140 --> 00:09:21,000
know try and do that with the CPU it's

00:09:18,000 --> 00:09:22,760
really hard so that's part of the reason

00:09:21,000 --> 00:09:25,980
why we get the very high performance

00:09:22,760 --> 00:09:27,630
again is through the the use of large

00:09:25,980 --> 00:09:30,209
large numbers of these evaluations

00:09:27,630 --> 00:09:32,310
inside the FPGA so we're evaluating

00:09:30,209 --> 00:09:36,990
something like a thousand something like

00:09:32,310 --> 00:09:39,180
a million nodes and age transactions

00:09:36,990 --> 00:09:40,649
within a second so you can see that we

00:09:39,180 --> 00:09:43,230
can deal with extremely large and a

00:09:40,649 --> 00:09:47,930
hundred million node and neck of a

00:09:43,230 --> 00:09:50,520
billion edge edge networks this

00:09:47,930 --> 00:09:52,470
application was actually installer a

00:09:50,520 --> 00:09:55,170
customer early part of last year was

00:09:52,470 --> 00:09:56,880
actually demonstrated at c15 we're there

00:09:55,170 --> 00:09:59,190
on the honors eiling's boo that was

00:09:56,880 --> 00:10:01,110
actually run on a powerade and serve and

00:09:59,190 --> 00:10:04,160
we we have it again here so if you go to

00:10:01,110 --> 00:10:06,420
the xilinx area of the oven power

00:10:04,160 --> 00:10:07,829
conference area then you'll see this

00:10:06,420 --> 00:10:10,649
said this application being demonstrated

00:10:07,829 --> 00:10:14,250
its run on on a powerade server and

00:10:10,649 --> 00:10:16,770
we're actually using a bit where context

00:10:14,250 --> 00:10:18,980
115 board to run this run this

00:10:16,770 --> 00:10:18,980
application

00:10:25,220 --> 00:10:29,480
so the other I because I'd like to talk

00:10:27,560 --> 00:10:31,459
about is the inline text and data

00:10:29,480 --> 00:10:34,670
analysis so if you're looking at social

00:10:31,459 --> 00:10:37,550
media I'm ready to try and analyze that

00:10:34,670 --> 00:10:39,110
people don't structure that in the way

00:10:37,550 --> 00:10:40,670
they might structure an email or you

00:10:39,110 --> 00:10:43,040
might see in a newspaper article so they

00:10:40,670 --> 00:10:45,680
they typically misspelled are you short

00:10:43,040 --> 00:10:47,800
hand they often use mixed languages and

00:10:45,680 --> 00:10:49,899
when they're typing texts or they're

00:10:47,800 --> 00:10:53,449
submitting something to Twitter or

00:10:49,899 --> 00:10:56,000
Facebook so if you analyze in that data

00:10:53,449 --> 00:10:58,490
and conventionally what you're doing in

00:10:56,000 --> 00:10:59,899
a structure more structured environment

00:10:58,490 --> 00:11:01,610
is you use a regular expression engine

00:10:59,899 --> 00:11:05,060
so each okay I'm looking for this

00:11:01,610 --> 00:11:06,560
particular expression and search through

00:11:05,060 --> 00:11:09,139
these documents for me until you find

00:11:06,560 --> 00:11:11,209
that particular expression so it may be

00:11:09,139 --> 00:11:14,240
for example restaurants in San Jose is a

00:11:11,209 --> 00:11:17,089
is an expression you're looking for in

00:11:14,240 --> 00:11:18,740
social media and the only time it

00:11:17,089 --> 00:11:21,259
actually will raise a flag and say I've

00:11:18,740 --> 00:11:23,449
found that that particular string is

00:11:21,259 --> 00:11:25,819
when it finds that exact match it finds

00:11:23,449 --> 00:11:30,410
restaurants in San Jose mentioned

00:11:25,819 --> 00:11:32,480
explicitly inside the document in social

00:11:30,410 --> 00:11:34,970
media that doesn't work i mean people

00:11:32,480 --> 00:11:36,589
rarely spell things out exactly like

00:11:34,970 --> 00:11:38,990
that so what you need is some e where

00:11:36,589 --> 00:11:41,839
it's tolerant of missed the misspellings

00:11:38,990 --> 00:11:45,529
the gaps insertions the mixed languages

00:11:41,839 --> 00:11:47,329
for example inside the the message so we

00:11:45,529 --> 00:11:48,620
have a fuzzy logic based algorithm it

00:11:47,329 --> 00:11:50,000
actually says all right well tell me the

00:11:48,620 --> 00:11:54,139
string you're looking for restaurants in

00:11:50,000 --> 00:11:57,920
San Jose but also tell me what degree of

00:11:54,139 --> 00:11:59,660
torrent you'll accept in terms of for

00:11:57,920 --> 00:12:02,029
example gaps and socials and deletions

00:11:59,660 --> 00:12:05,889
in there in that text string and then

00:12:02,029 --> 00:12:08,689
when you reach a certain score certain

00:12:05,889 --> 00:12:09,589
analysis level that it raised a flag and

00:12:08,689 --> 00:12:11,720
then you can actually going to take a

00:12:09,589 --> 00:12:13,279
manual look at that particular message

00:12:11,720 --> 00:12:17,389
or that particular spring or their

00:12:13,279 --> 00:12:20,050
particular document so it runs through

00:12:17,389 --> 00:12:22,730
that the product that we have installed

00:12:20,050 --> 00:12:24,259
is typically running around 10 million

00:12:22,730 --> 00:12:30,110
characters a second through a single

00:12:24,259 --> 00:12:32,389
FPGA and we were seen around we can load

00:12:30,110 --> 00:12:34,399
in up to about a thousand simultaneous

00:12:32,389 --> 00:12:36,769
string so the other bondage of the FPGA

00:12:34,399 --> 00:12:38,750
is where is in a CPU you might be

00:12:36,769 --> 00:12:40,280
looking for one spring at a time

00:12:38,750 --> 00:12:42,860
each each as you go through each

00:12:40,280 --> 00:12:44,960
execution of the other of the

00:12:42,860 --> 00:12:46,610
application in the case of the FB day

00:12:44,960 --> 00:12:48,140
you can search for a thousand strings

00:12:46,610 --> 00:12:51,170
simultaneously so you're literally

00:12:48,140 --> 00:12:53,720
screaming the raw data streams through

00:12:51,170 --> 00:12:55,910
the FPGA and nef pjs got the strings

00:12:53,720 --> 00:12:57,470
stored in it and it'll look for these

00:12:55,910 --> 00:12:59,090
particular room strings that you're

00:12:57,470 --> 00:13:00,620
looking for score them and then raise a

00:12:59,090 --> 00:13:05,260
flag when it reaches a particular

00:13:00,620 --> 00:13:07,460
threshold level this application has the

00:13:05,260 --> 00:13:08,960
ability like some of the others that I

00:13:07,460 --> 00:13:11,330
described on the previous slides I've

00:13:08,960 --> 00:13:12,650
actually been cloud enabled and so one

00:13:11,330 --> 00:13:15,890
of the clouds it could for example

00:13:12,650 --> 00:13:17,540
appear in is the IBM cloud and the fact

00:13:15,890 --> 00:13:20,330
that it's already run on a powerade and

00:13:17,540 --> 00:13:21,830
it's already running within a xilinx fpj

00:13:20,330 --> 00:13:24,020
makes it ideally suitable for a

00:13:21,830 --> 00:13:28,790
cloud-based environment that supports an

00:13:24,020 --> 00:13:30,170
fpga-based structure so that's the last

00:13:28,790 --> 00:13:31,520
I was only going to run through those

00:13:30,170 --> 00:13:35,170
two applications if you got any other

00:13:31,520 --> 00:13:37,340
questions I'd be happy to answer those

00:13:35,170 --> 00:13:40,000
good in which case thank you thank you

00:13:37,340 --> 00:13:40,000

YouTube URL: https://www.youtube.com/watch?v=bI7hWUFpWd0


