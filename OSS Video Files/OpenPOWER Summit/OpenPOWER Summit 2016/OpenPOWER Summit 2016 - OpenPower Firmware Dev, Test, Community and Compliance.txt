Title: OpenPOWER Summit 2016 - OpenPower Firmware Dev, Test, Community and Compliance
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Stewart Smith of IBM
Captions: 
	00:00:00,000 --> 00:00:04,529
this is a lovely sort of

00:00:01,380 --> 00:00:06,299
all-encompassing title of open power

00:00:04,529 --> 00:00:10,019
firmware development testing community

00:00:06,299 --> 00:00:12,360
and compliance which is you know a topic

00:00:10,019 --> 00:00:13,710
for four hours of discussion but we'll

00:00:12,360 --> 00:00:18,029
squeeze it into a small summary that

00:00:13,710 --> 00:00:20,789
people can find other places to go and

00:00:18,029 --> 00:00:23,640
look at and talk to people about so Who

00:00:20,789 --> 00:00:26,760
am I I'm Stuart I'm called the opal

00:00:23,640 --> 00:00:29,910
architect at IBM so I'll oversee the the

00:00:26,760 --> 00:00:31,349
whole of opal development which is the

00:00:29,910 --> 00:00:34,590
open power abstraction layer you can

00:00:31,349 --> 00:00:37,649
email me there and I work with everyone

00:00:34,590 --> 00:00:39,570
who works on everything open power

00:00:37,649 --> 00:00:42,570
everything sort of Linux it down into

00:00:39,570 --> 00:00:44,969
user space so it's a kind of a full

00:00:42,570 --> 00:00:47,070
stack kind of deal and what is open

00:00:44,969 --> 00:00:49,559
power firmware well if you had to github

00:00:47,070 --> 00:00:51,600
open power especially the opie build

00:00:49,559 --> 00:00:53,250
project so this is where all the

00:00:51,600 --> 00:00:56,160
different firmware components for an

00:00:53,250 --> 00:00:57,870
open power machine live and opie build

00:00:56,160 --> 00:01:00,149
is what builds them all together into a

00:00:57,870 --> 00:01:01,590
single firmware image if you want to

00:01:00,149 --> 00:01:03,059
know sort of exactly all the different

00:01:01,590 --> 00:01:05,400
components what they do I'm going to

00:01:03,059 --> 00:01:07,200
give you a youtube link earlier this

00:01:05,400 --> 00:01:11,909
year in january i spoke with linux come

00:01:07,200 --> 00:01:14,820
for you in where we reach along in

00:01:11,909 --> 00:01:16,409
australia and that felt videos up there

00:01:14,820 --> 00:01:18,330
which is basically an overview of you

00:01:16,409 --> 00:01:20,610
know how you boot an open power system

00:01:18,330 --> 00:01:22,110
and what goes on and so that's about 45

00:01:20,610 --> 00:01:27,420
minutes of your life that I promise

00:01:22,110 --> 00:01:29,850
you'll enjoy the basic boot process is a

00:01:27,420 --> 00:01:32,159
self boot engine that starts a core up I

00:01:29,850 --> 00:01:35,670
webhost brute run we have OCC's get

00:01:32,159 --> 00:01:37,740
started ski boot as in hope all starts

00:01:35,670 --> 00:01:39,840
which then loads a Linux system which

00:01:37,740 --> 00:01:41,939
runs petty boot which is the bootloader

00:01:39,840 --> 00:01:43,710
lets you choose I want to boot off a CD

00:01:41,939 --> 00:01:46,049
I want to boot off a network I want to

00:01:43,710 --> 00:01:49,200
boot off one of my hard drives and then

00:01:46,049 --> 00:01:51,810
you have an operating system so that's

00:01:49,200 --> 00:01:54,329
the 18 second overview of what took me

00:01:51,810 --> 00:01:56,820
45 minutes to explain in that YouTube

00:01:54,329 --> 00:01:58,920
talk and you think wow that's a lot of

00:01:56,820 --> 00:02:00,869
firmware code and it's like yes it is I

00:01:58,920 --> 00:02:02,430
did a little count with slot counts so

00:02:00,869 --> 00:02:04,920
we have around six hundred thousand

00:02:02,430 --> 00:02:07,350
lines of unique code for open power

00:02:04,920 --> 00:02:09,330
firmware and if we go and count all of

00:02:07,350 --> 00:02:11,310
the rest of the code that's used in that

00:02:09,330 --> 00:02:12,000
and assembled it's another 24 million

00:02:11,310 --> 00:02:13,560
lines

00:02:12,000 --> 00:02:15,030
code from elsewhere so that includes

00:02:13,560 --> 00:02:16,530
like the Linux kernel it's part of the

00:02:15,030 --> 00:02:17,970
petty boot environment that of course

00:02:16,530 --> 00:02:20,100
includes a tool chain that we used to

00:02:17,970 --> 00:02:22,500
build everything lipsy that gets run in

00:02:20,100 --> 00:02:24,240
all these places all of the the user

00:02:22,500 --> 00:02:26,550
space libraries of petty boot users and

00:02:24,240 --> 00:02:28,620
so this is sort of a lot of code like

00:02:26,550 --> 00:02:30,330
it's you know we round it off to 24

00:02:28,620 --> 00:02:33,360
million because what's another 600,000

00:02:30,330 --> 00:02:34,950
lines of code between friends a lot of

00:02:33,360 --> 00:02:37,410
code that gets run just to boot your

00:02:34,950 --> 00:02:38,730
computer right this is before you were

00:02:37,410 --> 00:02:40,440
running the operating system that's

00:02:38,730 --> 00:02:42,800
running the workload you care about this

00:02:40,440 --> 00:02:45,720
is everything it's getting to that stage

00:02:42,800 --> 00:02:47,400
so I tell friends is like what do I work

00:02:45,720 --> 00:02:50,250
on the code that runs before the screen

00:02:47,400 --> 00:02:51,510
works which is the unexcited bit but you

00:02:50,250 --> 00:02:55,860
know if it doesn't come on at the end

00:02:51,510 --> 00:02:58,290
you know people get annoyed so how do we

00:02:55,860 --> 00:03:01,430
maintain this code base right 24 25

00:02:58,290 --> 00:03:03,510
million lines of code is a lot of code

00:03:01,430 --> 00:03:06,030
we have sort of a general philosophy

00:03:03,510 --> 00:03:08,100
which can be only maintain what we have

00:03:06,030 --> 00:03:10,200
to write take everything else from

00:03:08,100 --> 00:03:11,790
upstream right so if we're looking at

00:03:10,200 --> 00:03:13,890
here's the interface to select what to

00:03:11,790 --> 00:03:15,390
boot from we could have written our own

00:03:13,890 --> 00:03:17,280
interface there and then we'd have our

00:03:15,390 --> 00:03:19,140
own way of detecting disks our own way

00:03:17,280 --> 00:03:20,790
of talking to PCI our own way to talking

00:03:19,140 --> 00:03:22,650
to the network turns out that's a lot of

00:03:20,790 --> 00:03:24,680
work and we have this thing called Linux

00:03:22,650 --> 00:03:28,140
that already exists that already has

00:03:24,680 --> 00:03:30,330
disk drivers and already has pci drivers

00:03:28,140 --> 00:03:31,650
and already has a way to display things

00:03:30,330 --> 00:03:33,420
on a screen so we could write a simple

00:03:31,650 --> 00:03:35,310
app that runs on top of linux using

00:03:33,420 --> 00:03:37,560
existing libraries that just gives you a

00:03:35,310 --> 00:03:39,000
menu so we take everything else from

00:03:37,560 --> 00:03:41,340
upstream and only maintain what we have

00:03:39,000 --> 00:03:43,799
to so if we look at the power specific

00:03:41,340 --> 00:03:45,810
parts we have host boot that makes the

00:03:43,799 --> 00:03:47,519
processor start to look like a processor

00:03:45,810 --> 00:03:50,070
as and you have caused that run and

00:03:47,519 --> 00:03:53,010
memory that works you have the occ which

00:03:50,070 --> 00:03:55,220
does like hard thermal limit controls

00:03:53,010 --> 00:03:58,170
and then you have opal which provides

00:03:55,220 --> 00:04:01,470
boot and runtime services so it does

00:03:58,170 --> 00:04:03,420
things like make PCI happen and then

00:04:01,470 --> 00:04:05,489
provide a runtime interface to Linux

00:04:03,420 --> 00:04:07,470
that hardware abstraction layer and then

00:04:05,489 --> 00:04:09,600
we have these generic parts that we take

00:04:07,470 --> 00:04:11,519
from elsewhere petty boot is not power

00:04:09,600 --> 00:04:13,530
specific at all you can build and run it

00:04:11,519 --> 00:04:15,060
on your x86 box that's not a problem you

00:04:13,530 --> 00:04:18,390
can build and run it on anything it's

00:04:15,060 --> 00:04:20,450
just Linux user space opie build a

00:04:18,390 --> 00:04:22,830
building freh structure is actually just

00:04:20,450 --> 00:04:25,169
build root and this came about through

00:04:22,830 --> 00:04:25,889
the open w IT project and it's basically

00:04:25,169 --> 00:04:28,050
where

00:04:25,889 --> 00:04:29,879
how to build a tool chain build a linux

00:04:28,050 --> 00:04:31,949
kernel build a bunch of user space and

00:04:29,879 --> 00:04:34,590
assemble it into a thing and so we just

00:04:31,949 --> 00:04:36,150
do a small extension to that to build

00:04:34,590 --> 00:04:37,590
the power specific components and

00:04:36,150 --> 00:04:40,110
assemble that into the format we need

00:04:37,590 --> 00:04:41,669
and then we have you know flash

00:04:40,110 --> 00:04:45,629
manipulation utilities which are also

00:04:41,669 --> 00:04:47,789
not power specific at all so what we

00:04:45,629 --> 00:04:49,860
don't maintain Linux we don't maintain

00:04:47,789 --> 00:04:51,629
Linux we have a large Linux community

00:04:49,860 --> 00:04:53,789
that does that for us so we just have

00:04:51,629 --> 00:04:56,340
people who work on the upstream linux

00:04:53,789 --> 00:04:57,960
kernel user space for petty boot guess

00:04:56,340 --> 00:05:00,060
what we use buildroot so everything

00:04:57,960 --> 00:05:02,129
comes from their build tooling guess

00:05:00,060 --> 00:05:04,259
what you have to use builder to

00:05:02,129 --> 00:05:06,300
construct the tool chain and a whole

00:05:04,259 --> 00:05:08,069
thing of the idea of we can contribute

00:05:06,300 --> 00:05:09,810
things upstream first so instead of

00:05:08,069 --> 00:05:12,419
forking everything in maintaining a fork

00:05:09,810 --> 00:05:13,800
if we make upstream work for us then we

00:05:12,419 --> 00:05:15,810
don't have to maintain a large Delta

00:05:13,800 --> 00:05:17,819
from upstream and over the history of

00:05:15,810 --> 00:05:19,979
opie build and open power firmware we've

00:05:17,819 --> 00:05:21,659
reduced our Delta from upstream to be

00:05:19,979 --> 00:05:26,400
something that is very very close so we

00:05:21,659 --> 00:05:29,129
run eight patches on top of upstream

00:05:26,400 --> 00:05:31,560
Linux 44 currently for the petty boot

00:05:29,129 --> 00:05:33,900
environment like one of those patches is

00:05:31,560 --> 00:05:35,909
literally tack dash open power to the

00:05:33,900 --> 00:05:37,830
end of the version string there's a very

00:05:35,909 --> 00:05:40,199
small amount of patches their petty boot

00:05:37,830 --> 00:05:42,240
of course is upstream I will use you

00:05:40,199 --> 00:05:44,490
know upstream GCC no custom patches

00:05:42,240 --> 00:05:46,080
there as well and so we always push

00:05:44,490 --> 00:05:48,000
upstream there and build it as well as

00:05:46,080 --> 00:05:50,069
now down to about four or five patches

00:05:48,000 --> 00:05:51,629
on top of builder and some of those is

00:05:50,069 --> 00:05:54,000
actually most of those are actually back

00:05:51,629 --> 00:05:55,860
porting existing things from the

00:05:54,000 --> 00:05:57,599
development version of build route back

00:05:55,860 --> 00:05:59,310
into a stable version so we're quite

00:05:57,599 --> 00:06:01,800
proud of the fact that we're not

00:05:59,310 --> 00:06:05,129
maintaining large deltas on projects we

00:06:01,800 --> 00:06:07,919
use so how do development processes and

00:06:05,129 --> 00:06:09,629
communities work this varies a lot by

00:06:07,919 --> 00:06:10,919
component so because there's that you

00:06:09,629 --> 00:06:13,259
know six hundred thousands of lines of

00:06:10,919 --> 00:06:15,449
code that's power specific of course is

00:06:13,259 --> 00:06:16,379
several projects worth and different

00:06:15,449 --> 00:06:19,589
projects deal with this a bit

00:06:16,379 --> 00:06:21,240
differently so host boot external sort

00:06:19,589 --> 00:06:23,310
of contributions that go through github

00:06:21,240 --> 00:06:24,839
issues and pull requests a lot of

00:06:23,310 --> 00:06:26,669
development is done internally and this

00:06:24,839 --> 00:06:29,039
is like well before there is even like a

00:06:26,669 --> 00:06:32,069
complete simulation of the hardware that

00:06:29,039 --> 00:06:34,199
will be made in the future OCC is also a

00:06:32,069 --> 00:06:37,110
bit internal currently ski boot we're

00:06:34,199 --> 00:06:38,519
very much on the the Linux kernel style

00:06:37,110 --> 00:06:39,289
of working things we have a mailing list

00:06:38,519 --> 00:06:41,089
and

00:06:39,289 --> 00:06:42,589
use patchwork and the same with petty

00:06:41,089 --> 00:06:44,300
boot so we have mailing lists and

00:06:42,589 --> 00:06:46,339
patches there as well as you know we'll

00:06:44,300 --> 00:06:48,379
also do github issues and github pull

00:06:46,339 --> 00:06:49,729
requests as well also happen so there's

00:06:48,379 --> 00:06:52,309
a bit of variation there between teams

00:06:49,729 --> 00:06:55,399
so we can you know work with people

00:06:52,309 --> 00:06:58,399
inside IBM and outside IBM and the way

00:06:55,399 --> 00:07:00,800
that each team feels comfortable Opie

00:06:58,399 --> 00:07:02,569
build itself o people brings everything

00:07:00,800 --> 00:07:04,639
together so it takes all these firmware

00:07:02,569 --> 00:07:06,860
components and then assembles here is

00:07:04,639 --> 00:07:09,139
the firmware image the main way that we

00:07:06,860 --> 00:07:11,509
develop that is through get up github

00:07:09,139 --> 00:07:13,430
the issues in pull requests we also now

00:07:11,509 --> 00:07:14,869
have a mailing list where discussion

00:07:13,430 --> 00:07:17,479
happens and that's a lovely new addition

00:07:14,869 --> 00:07:19,369
or the other way you can do it of course

00:07:17,479 --> 00:07:20,869
is to bug Patrick about something

00:07:19,369 --> 00:07:25,669
because I just so you sit down so

00:07:20,869 --> 00:07:27,080
therefore there is we also interact with

00:07:25,669 --> 00:07:28,369
upstream on all the other projects so

00:07:27,080 --> 00:07:30,050
the way we maintain all the other

00:07:28,369 --> 00:07:33,289
components that go into firmware is well

00:07:30,050 --> 00:07:35,719
let's push it upstream and then if we

00:07:33,289 --> 00:07:37,610
have to bat for something to alcove we

00:07:35,719 --> 00:07:41,119
will do that but the focus is get it

00:07:37,610 --> 00:07:42,740
upstream and so the way we develop those

00:07:41,119 --> 00:07:44,539
is guess what the way each of those

00:07:42,740 --> 00:07:45,949
communities works so for linux kernel

00:07:44,539 --> 00:07:47,749
it's the Linux kernel mainline list and

00:07:45,949 --> 00:07:49,219
maintain errs the Builder is the bill

00:07:47,749 --> 00:07:51,499
direct mailing list for all the

00:07:49,219 --> 00:07:54,620
toolchain stuff but our GCC and Lib C

00:07:51,499 --> 00:07:56,180
and everyone work and how the power

00:07:54,620 --> 00:07:58,639
specific user space so stuff for like

00:07:56,180 --> 00:08:00,319
getting and setting like smt modes and

00:07:58,639 --> 00:08:01,879
something in there guess what we have

00:08:00,319 --> 00:08:05,059
people who maintain that code base as

00:08:01,879 --> 00:08:07,370
well and we work with it that way so

00:08:05,059 --> 00:08:09,009
welcoming newcomers the best way to get

00:08:07,370 --> 00:08:10,999
started if you're looking at developing

00:08:09,009 --> 00:08:13,039
open power firmware or having a

00:08:10,999 --> 00:08:14,899
build-out it is to probably jump on the

00:08:13,039 --> 00:08:16,610
mailing list and ask questions if you

00:08:14,899 --> 00:08:19,039
get stuck at any point of reading the

00:08:16,610 --> 00:08:20,659
readme zand github stuff guess what we

00:08:19,039 --> 00:08:22,399
have a mailing list we can ask all the

00:08:20,659 --> 00:08:26,269
questions you want and hopefully someone

00:08:22,399 --> 00:08:28,180
will reply nicely to you so after we've

00:08:26,269 --> 00:08:32,060
dollars development how do we then

00:08:28,180 --> 00:08:35,329
ensure that it works we have all this

00:08:32,060 --> 00:08:39,709
code 24 25 million lines of it how do we

00:08:35,329 --> 00:08:40,849
know if it works I obviously got the

00:08:39,709 --> 00:08:43,399
timing wrong because at some point the

00:08:40,849 --> 00:08:45,410
schedule sandy stalk was yesterday it

00:08:43,399 --> 00:08:46,970
was in fact today but I'm going to blame

00:08:45,410 --> 00:08:49,800
the international date line on that

00:08:46,970 --> 00:08:51,880
rather than anything ever changing

00:08:49,800 --> 00:08:53,230
there's lots of different compliance in

00:08:51,880 --> 00:08:54,400
an open power system of course right

00:08:53,230 --> 00:08:56,110
there's hardware versus phone where

00:08:54,400 --> 00:08:58,060
compliance one thing is the hardware has

00:08:56,110 --> 00:08:59,680
to work correctly which is sort of your

00:08:58,060 --> 00:09:01,600
base layer the hardware doesn't work and

00:08:59,680 --> 00:09:04,120
isn't compliant to the ISO you're

00:09:01,600 --> 00:09:05,560
already in more trouble for firmware we

00:09:04,120 --> 00:09:07,150
want to have sort of an amount of

00:09:05,560 --> 00:09:08,740
compliance there in testing because of

00:09:07,150 --> 00:09:10,270
course multiple people building adware

00:09:08,740 --> 00:09:12,010
systems we want to make sure that we

00:09:10,270 --> 00:09:14,830
have the same firmware interfaces so for

00:09:12,010 --> 00:09:17,200
example the one ubuntu install CD works

00:09:14,830 --> 00:09:18,730
on all open power machines we don't want

00:09:17,200 --> 00:09:21,220
a situation where you need a purse

00:09:18,730 --> 00:09:23,740
system install city that would be awful

00:09:21,220 --> 00:09:27,760
and annoying and that's just for me let

00:09:23,740 --> 00:09:29,140
alone end users we also want to make

00:09:27,760 --> 00:09:30,700
sure of course that between each

00:09:29,140 --> 00:09:32,830
provision of firmware we don't have

00:09:30,700 --> 00:09:34,960
regressions we also want to make sure

00:09:32,830 --> 00:09:37,660
that we have a consistent boot interface

00:09:34,960 --> 00:09:39,280
so that your you're currently installed

00:09:37,660 --> 00:09:43,480
operating system will continue to boot

00:09:39,280 --> 00:09:45,850
when you update the firmware news coming

00:09:43,480 --> 00:09:48,370
on an exerciser see the previous talk 15

00:09:45,850 --> 00:09:50,560
minutes ago we have HD XL there to do

00:09:48,370 --> 00:09:52,570
sort of more intense exercising of the

00:09:50,560 --> 00:09:54,040
system as a whole and that exercises you

00:09:52,570 --> 00:09:56,230
know part of the firmware interfaces and

00:09:54,040 --> 00:09:57,670
part of the Linux system as well but

00:09:56,230 --> 00:09:59,170
that is of course sort of a different

00:09:57,670 --> 00:10:01,330
thing than sort of functionally testing

00:09:59,170 --> 00:10:03,460
parts of the firmware as well so how do

00:10:01,330 --> 00:10:06,730
we test firmware well guess what we have

00:10:03,460 --> 00:10:08,320
a thing called Opie test framework this

00:10:06,730 --> 00:10:10,330
is a project is that I have one

00:10:08,320 --> 00:10:12,460
overarching sort of test runner to run a

00:10:10,330 --> 00:10:14,589
whole bunch of compliance and

00:10:12,460 --> 00:10:16,450
verification tests for open power

00:10:14,589 --> 00:10:18,190
firmware this is very much a work in

00:10:16,450 --> 00:10:20,080
progress right so this is trying to take

00:10:18,190 --> 00:10:22,570
a bunch of existing testing that was

00:10:20,080 --> 00:10:24,640
happening inside IBM on IBM power

00:10:22,570 --> 00:10:26,350
firmware stuff and refocusing that whole

00:10:24,640 --> 00:10:28,480
effort to have here is an open source

00:10:26,350 --> 00:10:30,580
project that anyone can go and run and

00:10:28,480 --> 00:10:32,350
then we can have it based for different

00:10:30,580 --> 00:10:34,360
users so we can have things like it

00:10:32,350 --> 00:10:37,270
could perhaps run htx if you're doing a

00:10:34,360 --> 00:10:39,070
system test as inmate is is my brand new

00:10:37,270 --> 00:10:41,470
open power system that I've just

00:10:39,070 --> 00:10:42,670
manufactured going to work correctly we

00:10:41,470 --> 00:10:44,140
could have a job there to say i have a

00:10:42,670 --> 00:10:45,970
new firmware revision is the firmware

00:10:44,140 --> 00:10:48,220
part working correctly or I've updated

00:10:45,970 --> 00:10:49,990
the BMC is all the BMC functionality

00:10:48,220 --> 00:10:52,960
working correctly and the way that talks

00:10:49,990 --> 00:10:55,060
to the host processor we also have

00:10:52,960 --> 00:10:56,680
internal tests there's a lot of existing

00:10:55,060 --> 00:10:58,930
testing that keeps happening inside IBM

00:10:56,680 --> 00:11:00,970
and the idea is that we move all of that

00:10:58,930 --> 00:11:03,520
as open as possible there is also other

00:11:00,970 --> 00:11:05,200
open source test Suites so we have some

00:11:03,520 --> 00:11:07,270
sort of above the firmware level there

00:11:05,200 --> 00:11:10,150
are of course our test Suites to test

00:11:07,270 --> 00:11:12,160
like kvm functionality which test you

00:11:10,150 --> 00:11:14,260
can you still start virtual machines

00:11:12,160 --> 00:11:17,560
there's the Linux test project that very

00:11:14,260 --> 00:11:19,720
much focuses on testing Linux itself and

00:11:17,560 --> 00:11:21,550
so we have these other test suites that

00:11:19,720 --> 00:11:23,740
we can run as part of like the whole

00:11:21,550 --> 00:11:25,210
system of verifying it but the idea

00:11:23,740 --> 00:11:27,160
behind having an Opie test framework

00:11:25,210 --> 00:11:28,540
project there are but github is too

00:11:27,160 --> 00:11:31,690
callate what we care about from a

00:11:28,540 --> 00:11:32,830
firmware point of view so that is a

00:11:31,690 --> 00:11:35,650
lovely project you should come and

00:11:32,830 --> 00:11:38,430
contribute to of course how do we test

00:11:35,650 --> 00:11:40,900
and do opal things we have a

00:11:38,430 --> 00:11:42,670
documentation which are lovely text

00:11:40,900 --> 00:11:44,170
files on a directory which is lovely

00:11:42,670 --> 00:11:46,510
because you can read that on a terminal

00:11:44,170 --> 00:11:48,430
and in Emacs which is the one true

00:11:46,510 --> 00:11:51,610
editor in case there's any VI users in

00:11:48,430 --> 00:11:55,690
the room yeah I have the microphone

00:11:51,610 --> 00:11:57,250
there for emacs wins we also have the

00:11:55,690 --> 00:11:59,650
boot interface so petty boot itself has

00:11:57,250 --> 00:12:00,970
its own test suite so for testing things

00:11:59,650 --> 00:12:03,760
like you know can we still boot off a

00:12:00,970 --> 00:12:05,590
cd-rom for example there is a pity boot

00:12:03,760 --> 00:12:07,150
test suite that's just launches a whole

00:12:05,590 --> 00:12:08,530
bunch of virtual machines a whole bunch

00:12:07,150 --> 00:12:10,510
of configured disks and a whole bunch of

00:12:08,530 --> 00:12:12,340
different os's and runs the automated

00:12:10,510 --> 00:12:15,190
tests so that's testing that petty blue

00:12:12,340 --> 00:12:17,020
component so we have a mixture of sort

00:12:15,190 --> 00:12:18,670
of individual unit tests and then we can

00:12:17,020 --> 00:12:22,180
test the whole system as itself as well

00:12:18,670 --> 00:12:25,390
just kind of useful so what about now in

00:12:22,180 --> 00:12:27,970
the future we have just am I pre-empting

00:12:25,390 --> 00:12:31,000
anyone renouncing open power already yes

00:12:27,970 --> 00:12:32,740
good open I already is a new definition

00:12:31,000 --> 00:12:35,170
that's out there that is basically a

00:12:32,740 --> 00:12:36,490
self assurance thing of saying my system

00:12:35,170 --> 00:12:38,110
conforms to some basic set of

00:12:36,490 --> 00:12:40,180
requirements to be called an open power

00:12:38,110 --> 00:12:42,730
machine and that's part of sort of our

00:12:40,180 --> 00:12:44,230
current way of saying you know if you do

00:12:42,730 --> 00:12:45,790
this and don't do that you'll be

00:12:44,230 --> 00:12:49,180
compatible with other open power systems

00:12:45,790 --> 00:12:52,000
in the future we hope to have a very

00:12:49,180 --> 00:12:53,470
much more solid and easy to run you know

00:12:52,000 --> 00:12:55,390
for anyone in the room that wants to run

00:12:53,470 --> 00:12:57,250
it against their machine a conformance

00:12:55,390 --> 00:12:58,930
and compliance test where you go does

00:12:57,250 --> 00:13:01,720
this machine i'm currently sitting at as

00:12:58,930 --> 00:13:03,340
a user conformed to open power standards

00:13:01,720 --> 00:13:05,470
and all come back and run for you know

00:13:03,340 --> 00:13:08,500
however many minutes is and say yes it

00:13:05,470 --> 00:13:10,180
does or no it doesn't your changes to

00:13:08,500 --> 00:13:12,130
your firmware have made the system no

00:13:10,180 --> 00:13:14,050
longer valid and that's part of the work

00:13:12,130 --> 00:13:15,550
in progress we have all those existing

00:13:14,050 --> 00:13:16,810
test suites i talked about that we run

00:13:15,550 --> 00:13:18,940
internally and

00:13:16,810 --> 00:13:21,430
run externally as well that may or may

00:13:18,940 --> 00:13:23,110
not be easy too hard to run and our aim

00:13:21,430 --> 00:13:25,180
is to have that being an easy compliant

00:13:23,110 --> 00:13:27,190
sweet that becomes a compliance document

00:13:25,180 --> 00:13:29,500
which is run this command and if it

00:13:27,190 --> 00:13:31,300
passes you're okay is like the ideal

00:13:29,500 --> 00:13:34,000
world and we'll see how close we get to

00:13:31,300 --> 00:13:36,670
that and so part of that of course with

00:13:34,000 --> 00:13:38,410
compliance is a test suite and a part of

00:13:36,670 --> 00:13:40,270
that is a complaint statement saying you

00:13:38,410 --> 00:13:45,339
I have and have not done these specific

00:13:40,270 --> 00:13:46,660
things cool we have I believe 44 seconds

00:13:45,339 --> 00:13:48,460
for questions if there's anything of

00:13:46,660 --> 00:13:51,430
that or feel free to come up and ask me

00:13:48,460 --> 00:13:54,850
questions or shoot me email or contact

00:13:51,430 --> 00:13:57,250
any one of our wonderful IBM firmware

00:13:54,850 --> 00:13:58,810
developers around the room who I could

00:13:57,250 --> 00:13:59,980
probably cajole to like raise their

00:13:58,810 --> 00:14:02,730
hands and be dumped into answering

00:13:59,980 --> 00:14:02,730

YouTube URL: https://www.youtube.com/watch?v=85R2UyFrfpg


