Title: OpenPOWER Summit 2016 - Measuring and Managing Power Consumption
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Todd Rosedahl of IBM
Captions: 
	00:00:00,000 --> 00:00:04,680
hi my name is Todd rolls doll I am good

00:00:03,000 --> 00:00:07,109
work I've worked in power and thermal

00:00:04,680 --> 00:00:10,740
management at IBM for over 20 years

00:00:07,109 --> 00:00:14,490
working on power solutions for our

00:00:10,740 --> 00:00:15,839
thanks Andrew for our servers and I'm

00:00:14,490 --> 00:00:17,369
going to talk today about managing and

00:00:15,839 --> 00:00:19,380
measuring power consumption on on your

00:00:17,369 --> 00:00:21,359
server specifically in an open power

00:00:19,380 --> 00:00:23,189
environment we have open source code and

00:00:21,359 --> 00:00:25,500
up and down the stack and you heard our

00:00:23,189 --> 00:00:26,970
friends from rackspace talk about more

00:00:25,500 --> 00:00:28,769
open source code you know they were

00:00:26,970 --> 00:00:30,779
trying to get going so I'm going to talk

00:00:28,769 --> 00:00:34,640
about the techniques you can use to

00:00:30,779 --> 00:00:41,070
manage the power and measure the power

00:00:34,640 --> 00:00:43,890
yeah it's seeking you can read these fun

00:00:41,070 --> 00:00:46,289
facts but it's clear that throughout our

00:00:43,890 --> 00:00:49,050
data centers you're using more and more

00:00:46,289 --> 00:00:51,300
power where's there you look you just

00:00:49,050 --> 00:00:53,250
saw the keynote if you did in every time

00:00:51,300 --> 00:00:54,930
you talked about performance he was

00:00:53,250 --> 00:00:57,000
talking about performance per watt he's

00:00:54,930 --> 00:00:58,170
talking about how can we reduce the

00:00:57,000 --> 00:00:59,879
amount of power we're going to we're

00:00:58,170 --> 00:01:02,250
going to use you know there's a smaller

00:00:59,879 --> 00:01:05,580
little GPU coming up using only like 40

00:01:02,250 --> 00:01:07,380
watts we have to go after keeping this

00:01:05,580 --> 00:01:08,970
power down because it's so intimately

00:01:07,380 --> 00:01:15,630
related with the performance you're

00:01:08,970 --> 00:01:17,850
going to get on your servers talk about

00:01:15,630 --> 00:01:19,560
this this eco this is the the open

00:01:17,850 --> 00:01:22,259
source ecosystem that's been in it

00:01:19,560 --> 00:01:24,030
evolved here we have all all of this has

00:01:22,259 --> 00:01:25,710
been has been open sourced we're going

00:01:24,030 --> 00:01:26,939
after that you know the firmware down

00:01:25,710 --> 00:01:28,680
here and the hardware we're going to

00:01:26,939 --> 00:01:30,810
open our set everything in green here

00:01:28,680 --> 00:01:32,670
has been done so it opal is that open

00:01:30,810 --> 00:01:34,530
power abstraction layer that's been open

00:01:32,670 --> 00:01:36,900
source there's the host boot code that

00:01:34,530 --> 00:01:39,299
that's our BIOS the loads and get your

00:01:36,900 --> 00:01:41,670
system initialized and then newly is

00:01:39,299 --> 00:01:43,799
this on chip controller I know if last

00:01:41,670 --> 00:01:47,430
year at this conference we'd open source

00:01:43,799 --> 00:01:49,170
the OCC and so that that's I'm going to

00:01:47,430 --> 00:01:50,700
talk about that a little bit more and

00:01:49,170 --> 00:01:52,530
then there's something new called aim

00:01:50,700 --> 00:01:55,229
stir it's a tool that you can use to

00:01:52,530 --> 00:01:57,420
detail profiling of your system you can

00:01:55,229 --> 00:02:00,270
get in and analyze the power and

00:01:57,420 --> 00:02:02,280
performance profile and sort that is now

00:02:00,270 --> 00:02:04,469
been open source as well and so you have

00:02:02,280 --> 00:02:09,509
the ability to do much more detailed

00:02:04,469 --> 00:02:11,480
analysis so next is a video that talks

00:02:09,509 --> 00:02:18,250
about the OCC functionality

00:02:11,480 --> 00:02:18,250
I think

00:02:20,900 --> 00:02:23,530
No

00:02:26,870 --> 00:02:41,030
so there's there's no sound its weak

00:02:31,280 --> 00:02:43,819
giving a sound on this and memory

00:02:41,030 --> 00:02:45,500
bandwidth this enables customization for

00:02:43,819 --> 00:02:47,360
performance and energy management as

00:02:45,500 --> 00:02:50,299
well as system reliability and

00:02:47,360 --> 00:02:52,579
availability one of those customizations

00:02:50,299 --> 00:02:55,549
is the ability to monitor and control

00:02:52,579 --> 00:02:57,409
the processor frequency here we show the

00:02:55,549 --> 00:02:59,629
system starting out with the processor

00:02:57,409 --> 00:03:01,069
running at the nominal frequency and all

00:02:59,629 --> 00:03:03,920
power and temperature measurements

00:03:01,069 --> 00:03:05,959
within acceptable system parameters the

00:03:03,920 --> 00:03:08,269
processor frequency is then increased

00:03:05,959 --> 00:03:09,920
above nominal which causes the system

00:03:08,269 --> 00:03:12,409
power usage to increase and the

00:03:09,920 --> 00:03:14,090
processor temperature to rise here we

00:03:12,409 --> 00:03:15,829
have it set so that as the processor

00:03:14,090 --> 00:03:18,290
temperature approaches the maximum limit

00:03:15,829 --> 00:03:20,450
the occ reduces the system frequency

00:03:18,290 --> 00:03:23,599
slightly to ensure that the system stays

00:03:20,450 --> 00:03:26,269
thermally safe another customization

00:03:23,599 --> 00:03:27,980
available is power capping here we see

00:03:26,269 --> 00:03:29,810
that as the workload on the processor

00:03:27,980 --> 00:03:32,329
increases the system power usage

00:03:29,810 --> 00:03:34,849
increases as this power consumption

00:03:32,329 --> 00:03:36,829
approaches the power cap limit the occ

00:03:34,849 --> 00:03:38,660
will reduce the processor frequency and

00:03:36,829 --> 00:03:41,690
a loud memory bandwidth to keep the

00:03:38,660 --> 00:03:44,090
system under the power cap when the

00:03:41,690 --> 00:03:45,769
system utilization is low the frequency

00:03:44,090 --> 00:03:49,069
can be reduced to reduce the overall

00:03:45,769 --> 00:03:50,840
system power consumption the OCC

00:03:49,069 --> 00:03:52,310
responds quickly to system fault

00:03:50,840 --> 00:03:55,280
conditions in order to keep the system

00:03:52,310 --> 00:03:57,709
running in this example a power supply

00:03:55,280 --> 00:04:00,079
has failed we see the total available

00:03:57,709 --> 00:04:02,120
power drop and the OCC lowers the

00:04:00,079 --> 00:04:05,540
process of frequency in order to enforce

00:04:02,120 --> 00:04:08,239
the new lower power cab with the open

00:04:05,540 --> 00:04:10,669
source OCC code on open power systems

00:04:08,239 --> 00:04:12,889
the system management functions shown in

00:04:10,669 --> 00:04:15,919
this video can be implemented enhanced

00:04:12,889 --> 00:04:18,470
and expanded additionally new innovative

00:04:15,919 --> 00:04:20,690
functions can be created whether your

00:04:18,470 --> 00:04:23,060
solution demands power savings thermal

00:04:20,690 --> 00:04:25,070
protection or maximum performance you

00:04:23,060 --> 00:04:26,690
now have the right tools and the control

00:04:25,070 --> 00:04:32,090
to strike just the right balance between

00:04:26,690 --> 00:04:35,120
these three attributes alright so that

00:04:32,090 --> 00:04:39,349
video describes overall what the OCC

00:04:35,120 --> 00:04:40,580
does one it is a separate 405 processor

00:04:39,349 --> 00:04:42,470
right on the die with with the

00:04:40,580 --> 00:04:45,080
other cars and I'll talk about that

00:04:42,470 --> 00:04:47,030
further on or more later but the key is

00:04:45,080 --> 00:04:49,099
there is it's not taking any performance

00:04:47,030 --> 00:04:50,539
away from your server all that all the

00:04:49,099 --> 00:04:53,830
cores are still there for the two for

00:04:50,539 --> 00:04:55,939
you to run your your your customer jobs

00:04:53,830 --> 00:04:57,800
this picture is just showing that all

00:04:55,939 --> 00:05:00,259
the fingers really that the OCC has

00:04:57,800 --> 00:05:02,449
fingers in in many different in many

00:05:00,259 --> 00:05:03,590
different pies here so it's talking to

00:05:02,449 --> 00:05:05,300
the processors and getting their

00:05:03,590 --> 00:05:08,090
temperatures it's talking to the memory

00:05:05,300 --> 00:05:09,319
it hasn't interface up to two opal talk

00:05:08,090 --> 00:05:12,860
back and forth to exchange information

00:05:09,319 --> 00:05:16,879
so we can better tune the system all the

00:05:12,860 --> 00:05:19,580
hardware so it reads the the power of

00:05:16,879 --> 00:05:23,150
your system every 250 microseconds so

00:05:19,580 --> 00:05:25,849
because it has the ability to to access

00:05:23,150 --> 00:05:27,680
all that data it can do these functions

00:05:25,849 --> 00:05:29,629
here can do the power capping and the

00:05:27,680 --> 00:05:30,610
performance tuning and and then today

00:05:29,629 --> 00:05:32,870
I'm going to talk more about the

00:05:30,610 --> 00:05:34,789
sophisticated measurement and profiling

00:05:32,870 --> 00:05:36,080
you can do it has all that data and now

00:05:34,789 --> 00:05:39,770
we're going to be able to export that

00:05:36,080 --> 00:05:41,120
data out to for use by some tooling so

00:05:39,770 --> 00:05:45,409
you can do some profiling and figure out

00:05:41,120 --> 00:05:47,479
that the power performance trade-offs so

00:05:45,409 --> 00:05:50,719
another view again of the of the OCC

00:05:47,479 --> 00:05:53,419
this is the p8 module and of course I

00:05:50,719 --> 00:05:55,039
blown up the OCC 44 effect but it has

00:05:53,419 --> 00:05:56,509
you can see it's right here on the die

00:05:55,039 --> 00:05:58,250
with these other the other cores and has

00:05:56,509 --> 00:06:00,620
access to that power bus that's the main

00:05:58,250 --> 00:06:02,870
fabric bus of your of your system

00:06:00,620 --> 00:06:04,190
because it's on that bus it can it can

00:06:02,870 --> 00:06:06,560
do anything it can talk to main memory

00:06:04,190 --> 00:06:09,889
so it talks actually to the other OCC

00:06:06,560 --> 00:06:12,020
the in main memory it talks to the up to

00:06:09,889 --> 00:06:14,389
the OS through through main memory and

00:06:12,020 --> 00:06:16,729
then it has I to see interfaces down to

00:06:14,389 --> 00:06:19,460
the to the BMC which we just had a

00:06:16,729 --> 00:06:20,779
rackspace talk about the BMC it's giving

00:06:19,460 --> 00:06:22,789
information that BMC about the

00:06:20,779 --> 00:06:25,819
temperatures and the powers so it can

00:06:22,789 --> 00:06:27,529
export that out the ipmi or ended also

00:06:25,819 --> 00:06:28,839
the BMC uses that information for fan

00:06:27,529 --> 00:06:32,750
control to keep the system

00:06:28,839 --> 00:06:34,639
energy-efficient the spy interfaces to

00:06:32,750 --> 00:06:36,319
some special power measurement hardware

00:06:34,639 --> 00:06:39,169
so that's how i can read every rail

00:06:36,319 --> 00:06:41,779
every voltage rail and the total system

00:06:39,169 --> 00:06:44,440
power it can read to do that to the

00:06:41,779 --> 00:06:44,440
power capping

00:06:46,259 --> 00:06:50,500
alright so I should should point out the

00:06:48,310 --> 00:06:51,910
way this works the standard Linux

00:06:50,500 --> 00:06:54,220
governors that you'd be used to using

00:06:51,910 --> 00:06:56,229
with with any Intel system those are

00:06:54,220 --> 00:06:58,750
still in place you can even have

00:06:56,229 --> 00:07:00,460
performance that's on demand governor

00:06:58,750 --> 00:07:03,039
the balance the power save those

00:07:00,460 --> 00:07:04,449
governors work and they still set the

00:07:03,039 --> 00:07:06,400
frequency and say here's the frequency I

00:07:04,449 --> 00:07:09,159
want the system to run at the OCC is

00:07:06,400 --> 00:07:10,629
just in it there to enforce power and

00:07:09,159 --> 00:07:12,940
thermal limits to make sure that we

00:07:10,629 --> 00:07:16,150
don't don't go over power / or /

00:07:12,940 --> 00:07:18,069
temperature also we do have the idol

00:07:16,150 --> 00:07:19,930
states just like that the Intel systems

00:07:18,069 --> 00:07:21,729
so we have nap sleep and Winkle that

00:07:19,930 --> 00:07:24,430
shuts up we sawed off clocks which are

00:07:21,729 --> 00:07:26,020
enough clock in cash and that's really a

00:07:24,430 --> 00:07:28,120
great way to save power when you when

00:07:26,020 --> 00:07:30,130
you're not using your your processors or

00:07:28,120 --> 00:07:31,630
at all or for a period of time there are

00:07:30,130 --> 00:07:33,909
three different power caps supported

00:07:31,630 --> 00:07:35,680
that you have a dealer system cap you

00:07:33,909 --> 00:07:37,270
have some emergency cap and the example

00:07:35,680 --> 00:07:39,280
in the video it was used for if you lose

00:07:37,270 --> 00:07:40,599
a power supply but it can be used really

00:07:39,280 --> 00:07:42,130
for anything since this is all open

00:07:40,599 --> 00:07:45,310
source you can change this to do

00:07:42,130 --> 00:07:46,690
whatever you want you know with that you

00:07:45,310 --> 00:07:48,430
can you can have it if a battery goes

00:07:46,690 --> 00:07:50,440
low or however you however you would

00:07:48,430 --> 00:07:52,780
decide to use that second power cab then

00:07:50,440 --> 00:07:54,310
there's a third one DCM is supported it

00:07:52,780 --> 00:07:56,680
would be like a customer or user cap

00:07:54,310 --> 00:07:58,930
that cap gets set gets sent from the BMC

00:07:56,680 --> 00:08:03,909
up to the OCC and then it will enforce

00:07:58,930 --> 00:08:05,349
the lower of the three cabs a little bit

00:08:03,909 --> 00:08:08,710
more about how the countess voting box

00:08:05,349 --> 00:08:10,960
works here's opal again so it opal and

00:08:08,710 --> 00:08:12,279
Linux above it is actually saying here's

00:08:10,960 --> 00:08:14,800
the piece date I want based on the

00:08:12,279 --> 00:08:17,080
utilization that they see the OCC is

00:08:14,800 --> 00:08:18,580
here reading reading this power every

00:08:17,080 --> 00:08:20,169
250 microseconds from that power

00:08:18,580 --> 00:08:22,509
measurement hardware and then making a

00:08:20,169 --> 00:08:24,870
decision based on those power caps say

00:08:22,509 --> 00:08:27,729
do what you know is it okay for opal to

00:08:24,870 --> 00:08:30,759
set that frequency or should I wish I

00:08:27,729 --> 00:08:33,310
clip it similarly with that we have the

00:08:30,759 --> 00:08:36,459
temperature control down here therefore

00:08:33,310 --> 00:08:38,110
DTS is on every color the OCC is reading

00:08:36,459 --> 00:08:39,640
those averaging them comparing it to

00:08:38,110 --> 00:08:42,279
other limits that were set in the system

00:08:39,640 --> 00:08:44,229
to say what you know how hot my memory

00:08:42,279 --> 00:08:46,180
should get how hot you my processor get

00:08:44,229 --> 00:08:48,220
makes a decision and then and then also

00:08:46,180 --> 00:08:50,620
decides then what is the maximum piece

00:08:48,220 --> 00:08:52,660
date I'm going to allow mother system to

00:08:50,620 --> 00:08:54,399
go to so the designer comes in gets

00:08:52,660 --> 00:08:56,170
clipped by the maximum and then the OCC

00:08:54,399 --> 00:08:57,520
hardware takes care of automatically

00:08:56,170 --> 00:08:59,230
setting the

00:08:57,520 --> 00:09:01,750
you know the voltage and the frequency

00:08:59,230 --> 00:09:03,640
that same data that was used it was

00:09:01,750 --> 00:09:05,800
collected by the Oct goes down to the

00:09:03,640 --> 00:09:10,390
BMC for its use for the either the fan

00:09:05,800 --> 00:09:13,000
control or export out so who started the

00:09:10,390 --> 00:09:15,370
new thing for for this year is this

00:09:13,000 --> 00:09:17,200
measurement you can measure a system at

00:09:15,370 --> 00:09:19,990
a number of ways and traditionally you

00:09:17,200 --> 00:09:21,520
would go in band to the OS you would get

00:09:19,990 --> 00:09:23,350
performance information you can even you

00:09:21,520 --> 00:09:25,480
can get some power information that way

00:09:23,350 --> 00:09:28,300
that that's good for some things it has

00:09:25,480 --> 00:09:30,070
tighter workload synchronization right

00:09:28,300 --> 00:09:31,600
you start a job you can you can go you

00:09:30,070 --> 00:09:33,280
know exactly when you started in the OS

00:09:31,600 --> 00:09:35,680
and you can read you'd read the data

00:09:33,280 --> 00:09:37,540
that way the bad thing is it's using the

00:09:35,680 --> 00:09:39,280
system processors you don't really want

00:09:37,540 --> 00:09:42,300
to use your system process system to

00:09:39,280 --> 00:09:44,950
measure a system that you're that

00:09:42,300 --> 00:09:46,900
because you can affect it right so the

00:09:44,950 --> 00:09:48,250
other way to do is go out of band if you

00:09:46,900 --> 00:09:51,370
go out a band here this is going through

00:09:48,250 --> 00:09:54,010
the BMC the standard a PMI sensors are

00:09:51,370 --> 00:09:55,840
supported the so you can get all your

00:09:54,010 --> 00:09:58,510
temperatures in the temperature

00:09:55,840 --> 00:10:01,300
processor core temperatures as well as

00:09:58,510 --> 00:10:02,710
power from every rail DCM is supported

00:10:01,300 --> 00:10:05,110
which is it gives a little more

00:10:02,710 --> 00:10:07,540
flexibility for reading that power the

00:10:05,110 --> 00:10:10,360
new thing here is a master that's been

00:10:07,540 --> 00:10:11,770
open sourced and so that is it pass

00:10:10,360 --> 00:10:13,300
through and I p.m. i pass through in

00:10:11,770 --> 00:10:15,130
official the only entities that need to

00:10:13,300 --> 00:10:17,380
understand this complicated set of

00:10:15,130 --> 00:10:19,870
instructions is Ames sure to be running

00:10:17,380 --> 00:10:21,400
here on their laptop and the OCC itself

00:10:19,870 --> 00:10:24,370
would understand these these commands

00:10:21,400 --> 00:10:26,650
the BMC is just a pass through here so a

00:10:24,370 --> 00:10:28,900
command could come down through that BMC

00:10:26,650 --> 00:10:33,160
to the OCC and say measure something and

00:10:28,900 --> 00:10:36,070
some fine fine grain detail it store

00:10:33,160 --> 00:10:41,440
that then in OCC's SRAM and then grab it

00:10:36,070 --> 00:10:43,210
out for analysis more details on aim

00:10:41,440 --> 00:10:45,280
stir this is it stands for automated

00:10:43,210 --> 00:10:48,670
measurement for system temperature and

00:10:45,280 --> 00:10:50,530
energy reporting again it's it it's a

00:10:48,670 --> 00:10:52,720
pass-through so it goes down in through

00:10:50,530 --> 00:10:55,510
this this would be your BMC into that

00:10:52,720 --> 00:10:57,430
OCC and the way it works is it has an 8k

00:10:55,510 --> 00:10:59,020
buffer since it's been open source you

00:10:57,430 --> 00:11:00,310
could change this to whatever you want

00:10:59,020 --> 00:11:02,590
you can have a scrolling buffer but

00:11:00,310 --> 00:11:04,690
today there's an 8k buffer and what

00:11:02,590 --> 00:11:08,050
happens is that you would tell the OCC

00:11:04,690 --> 00:11:10,030
put some particular data into it into

00:11:08,050 --> 00:11:10,850
your ass ram so you would maybe take

00:11:10,030 --> 00:11:13,459
that 200

00:11:10,850 --> 00:11:15,529
50 micro second power value that's being

00:11:13,459 --> 00:11:18,800
read and you could log that every 250

00:11:15,529 --> 00:11:20,120
log that up in main memory then because

00:11:18,800 --> 00:11:22,279
then you show then you would get eight

00:11:20,120 --> 00:11:25,610
full k of data then you go read that and

00:11:22,279 --> 00:11:26,959
you can export it graph it and then and

00:11:25,610 --> 00:11:28,699
then that way to see what see what

00:11:26,959 --> 00:11:30,980
happen with the power or you can you can

00:11:28,699 --> 00:11:32,569
do something on a slower time scale here

00:11:30,980 --> 00:11:34,310
I said I'll essentially a temperature

00:11:32,569 --> 00:11:36,019
sensor at two milliseconds is even too

00:11:34,310 --> 00:11:37,490
fast for a temperature sensor but you

00:11:36,019 --> 00:11:40,040
can you could read a temperature sensor

00:11:37,490 --> 00:11:41,300
but much more much more slowly and then

00:11:40,040 --> 00:11:43,519
you get a total of eight seconds worth

00:11:41,300 --> 00:11:45,889
of data but again it's constrained by an

00:11:43,519 --> 00:11:47,569
8k buffer so it fills the buffer up then

00:11:45,889 --> 00:11:53,779
you read the buffering and post process

00:11:47,569 --> 00:11:55,940
it this is a description of the sensor

00:11:53,779 --> 00:11:58,730
so when I say a sensor we have a

00:11:55,940 --> 00:12:01,790
particular format this is in up there in

00:11:58,730 --> 00:12:02,930
main memory or in in our SRAM and so

00:12:01,790 --> 00:12:05,120
that you know there's a sensor name of

00:12:02,930 --> 00:12:07,160
course and there there's metadata whose

00:12:05,120 --> 00:12:09,050
data about the data as we say like how

00:12:07,160 --> 00:12:11,569
often this this particular thing is

00:12:09,050 --> 00:12:13,759
updated half and it's red there's a

00:12:11,569 --> 00:12:15,649
minimum and a maximum that are stored

00:12:13,759 --> 00:12:17,839
for every sensor over whatever period of

00:12:15,649 --> 00:12:20,329
time and then there's an accumulator

00:12:17,839 --> 00:12:23,029
which is a key aspect so you can

00:12:20,329 --> 00:12:24,649
continually be reading the power and

00:12:23,029 --> 00:12:26,329
we're updating this accumulator so you

00:12:24,649 --> 00:12:27,649
can read it once you get read it a

00:12:26,329 --> 00:12:30,620
second later and then you can see the

00:12:27,649 --> 00:12:33,110
difference how much power it was was it

00:12:30,620 --> 00:12:34,579
was expended during that time and and

00:12:33,110 --> 00:12:36,319
that way you can get a total and energy

00:12:34,579 --> 00:12:37,490
total and you don't have to say reset

00:12:36,319 --> 00:12:42,860
this sensor it's just always

00:12:37,490 --> 00:12:44,870
accumulating this is a sample sensor

00:12:42,860 --> 00:12:46,579
list it just there's there's a there's a

00:12:44,870 --> 00:12:48,740
full document out there that's been open

00:12:46,579 --> 00:12:50,269
source it describes these sensors I'm

00:12:48,740 --> 00:12:52,339
just giving you sort of feel for for

00:12:50,269 --> 00:12:54,410
what you can do so you can get all the

00:12:52,339 --> 00:12:56,449
you know the voltages of course have the

00:12:54,410 --> 00:12:58,970
frequency of your core you can measure

00:12:56,449 --> 00:13:01,550
that the utilization instructions per

00:12:58,970 --> 00:13:04,310
second all the temperatures and powers

00:13:01,550 --> 00:13:07,579
that have described so there's a rich

00:13:04,310 --> 00:13:09,620
set of utilization and so performance

00:13:07,579 --> 00:13:12,670
and power data you can you can access to

00:13:09,620 --> 00:13:15,290
correlate between those two things

00:13:12,670 --> 00:13:17,449
here's a simple example very simple so

00:13:15,290 --> 00:13:19,130
we are we are running along it had a

00:13:17,449 --> 00:13:20,990
workload running we shut this workload

00:13:19,130 --> 00:13:21,270
off or really really probably winkled

00:13:20,990 --> 00:13:23,490
this

00:13:21,270 --> 00:13:25,620
or completely stop the power brought it

00:13:23,490 --> 00:13:27,660
down to zero we're also monitoring the

00:13:25,620 --> 00:13:29,580
temperatures of the various course and

00:13:27,660 --> 00:13:31,140
the nest as we went as soon as we drop

00:13:29,580 --> 00:13:33,120
that power and turn that work load off

00:13:31,140 --> 00:13:34,620
our temperatures dropped you would

00:13:33,120 --> 00:13:39,330
expect this there's nothing nothing

00:13:34,620 --> 00:13:41,610
novel here or new but if you use this

00:13:39,330 --> 00:13:47,040
type of data you could find anomalies in

00:13:41,610 --> 00:13:48,540
input in power and utilization so so

00:13:47,040 --> 00:13:50,610
some of the insights you saw and this is

00:13:48,540 --> 00:13:52,440
also what was just stated in the keynote

00:13:50,610 --> 00:13:53,730
is you have to visualize these things

00:13:52,440 --> 00:13:54,960
you're looking at a string of data is

00:13:53,730 --> 00:13:57,210
not going to help you but if you take

00:13:54,960 --> 00:13:59,310
that data and you graph it and if you're

00:13:57,210 --> 00:14:01,560
very careful making sure everything your

00:13:59,310 --> 00:14:03,000
time aligning your sensor data correctly

00:14:01,560 --> 00:14:05,370
so you're looking at things in the same

00:14:03,000 --> 00:14:07,080
time frame you can you can really see a

00:14:05,370 --> 00:14:09,480
lot of interesting results and we've

00:14:07,080 --> 00:14:12,330
seen issues with voltage slowing we've

00:14:09,480 --> 00:14:14,310
used this to tune algorithms to get

00:14:12,330 --> 00:14:15,630
better performance per watt so it's all

00:14:14,310 --> 00:14:16,800
really about performance per watt right

00:14:15,630 --> 00:14:19,740
you want you want to be able to tune

00:14:16,800 --> 00:14:21,390
that exactly to that maximum performance

00:14:19,740 --> 00:14:27,960
or wad and you can do that using this

00:14:21,390 --> 00:14:31,410
tool okay and then just another plug for

00:14:27,960 --> 00:14:33,060
the open BMC all the stuff we showed you

00:14:31,410 --> 00:14:35,160
before it's all open source that BMC is

00:14:33,060 --> 00:14:36,600
not right but now that Rackspace was

00:14:35,160 --> 00:14:38,670
just up here they said hey we're working

00:14:36,600 --> 00:14:40,410
this open BMC there's a session on this

00:14:38,670 --> 00:14:43,470
tomorrow as well that if you're

00:14:40,410 --> 00:14:45,480
interested you should attend to do to

00:14:43,470 --> 00:14:49,260
get more detail on what like how you

00:14:45,480 --> 00:14:54,420
could contribute and benefit from the

00:14:49,260 --> 00:14:56,910
open BMC just a series of references

00:14:54,420 --> 00:14:59,730
there is so answers been open sourced

00:14:56,910 --> 00:15:01,410
this the BMC has been open sourced also

00:14:59,730 --> 00:15:02,430
there's a document off there if you

00:15:01,410 --> 00:15:04,500
don't want to use aim sure there's

00:15:02,430 --> 00:15:06,480
another method you can use you can go if

00:15:04,500 --> 00:15:08,580
you can just do your own ipmi command to

00:15:06,480 --> 00:15:10,140
pass through the BMC and there's

00:15:08,580 --> 00:15:16,370
information on exactly how to do that

00:15:10,140 --> 00:15:16,370

YouTube URL: https://www.youtube.com/watch?v=us0EAeqQdtA


