Title: OpenPOWER Summit 2016-Low Latency Access to Phase Change Memory in OpenPOWER Systems
Publication date: 2016-04-29
Playlist: OpenPOWER Summit 2016
Description: 
	Presented by Nikolaos Papendreou of IBM
Captions: 
	00:00:00,000 --> 00:00:05,430
so good evening my name is Nicholas oven

00:00:03,060 --> 00:00:08,069
dreamed I am a researcher at the IBM

00:00:05,430 --> 00:00:11,090
Research Lab in Zurich and in this talk

00:00:08,069 --> 00:00:13,440
i would like to present you our work on

00:00:11,090 --> 00:00:14,759
demonstrating low latency access to

00:00:13,440 --> 00:00:18,960
phase change memory in upper power

00:00:14,759 --> 00:00:21,150
systems using kappa so the objective of

00:00:18,960 --> 00:00:22,619
this project is to demonstrate phase

00:00:21,150 --> 00:00:25,439
change memory attachment to Holborn

00:00:22,619 --> 00:00:27,029
power service via copy and in particular

00:00:25,439 --> 00:00:28,410
to showcase the efficiency of Kappa

00:00:27,029 --> 00:00:30,990
protocol in data access from

00:00:28,410 --> 00:00:32,730
non-volatile memory and also leverage

00:00:30,990 --> 00:00:35,640
the low latency in small kernel the

00:00:32,730 --> 00:00:37,800
access of PCM and moreover to build a

00:00:35,640 --> 00:00:39,450
platform where future PCM tips can be

00:00:37,800 --> 00:00:42,030
attached to open power service via

00:00:39,450 --> 00:00:44,070
caffeine tested on real workload this

00:00:42,030 --> 00:00:46,289
work is a joint work between the teams

00:00:44,070 --> 00:00:48,180
the IBM Research Durak and the

00:00:46,289 --> 00:00:50,370
University of putters in Greece and you

00:00:48,180 --> 00:00:54,239
see the names of the members in the

00:00:50,370 --> 00:00:56,760
slides so in the next slide I would like

00:00:54,239 --> 00:00:58,289
to present the prototyping system and

00:00:56,760 --> 00:01:00,449
the non-volatile memory chip that we

00:00:58,289 --> 00:01:03,270
have used in this demonstration I will

00:01:00,449 --> 00:01:04,650
describe the fpga detector of the phase

00:01:03,270 --> 00:01:07,650
change memory controller that we

00:01:04,650 --> 00:01:09,750
developed and present measurements on

00:01:07,650 --> 00:01:14,729
latency and performance and finally I

00:01:09,750 --> 00:01:17,159
will summarize little so our prototyping

00:01:14,729 --> 00:01:19,799
platform consists of two systems the IBM

00:01:17,159 --> 00:01:23,280
power system is 812 and the time

00:01:19,799 --> 00:01:26,009
palmetto custom reference system both

00:01:23,280 --> 00:01:28,619
are copy enabled they are running ubuntu

00:01:26,009 --> 00:01:31,799
15 to 10 and they are equipped with fpga

00:01:28,619 --> 00:01:35,549
cards from alpha data with the Cylons

00:01:31,799 --> 00:01:37,920
fpga which integrates the copy the PSL

00:01:35,549 --> 00:01:40,259
for the copy and our custom a view and

00:01:37,920 --> 00:01:42,570
phase change memory controller in

00:01:40,259 --> 00:01:44,939
addition we build some custom prototype

00:01:42,570 --> 00:01:47,100
phase change memory things in order to

00:01:44,939 --> 00:01:48,600
connect them directly to the fpga card

00:01:47,100 --> 00:01:53,280
and i will describe more details in the

00:01:48,600 --> 00:01:54,540
next slide so in this work we designed

00:01:53,280 --> 00:01:56,340
two different phase change memory

00:01:54,540 --> 00:01:59,040
controllers for two different phase

00:01:56,340 --> 00:02:01,740
change memory technologies the first one

00:01:59,040 --> 00:02:04,290
which is shown on the left I corresponds

00:02:01,740 --> 00:02:07,069
to an old faith change memory technology

00:02:04,290 --> 00:02:09,750
using legacy parts from micron this is a

00:02:07,069 --> 00:02:12,180
nslc phase change memory chip with a

00:02:09,750 --> 00:02:13,420
serial interface and on the figure on

00:02:12,180 --> 00:02:16,569
the level you see they

00:02:13,420 --> 00:02:18,819
cast on PCM dim that we build with this

00:02:16,569 --> 00:02:21,520
particular tip and also we design

00:02:18,819 --> 00:02:24,370
special som adapters in order to connect

00:02:21,520 --> 00:02:28,000
this PCM dream to the FPGA cards on the

00:02:24,370 --> 00:02:29,890
server the second controller corresponds

00:02:28,000 --> 00:02:32,380
to a next generation phase change memory

00:02:29,890 --> 00:02:34,569
technology and here we assume my comp

00:02:32,380 --> 00:02:36,459
ddr3 compatible in their face and we

00:02:34,569 --> 00:02:38,319
used read and write latencies that

00:02:36,459 --> 00:02:40,390
correspond to state-of-the-art PCM tip

00:02:38,319 --> 00:02:42,940
designs since this part are not

00:02:40,390 --> 00:02:45,069
available here for this case we have

00:02:42,940 --> 00:02:47,230
used dram modules and special hard work

00:02:45,069 --> 00:02:49,540
to emulate the PCM channel read and

00:02:47,230 --> 00:02:54,100
write latency and expose the PCM tip

00:02:49,540 --> 00:02:56,290
characteristics to the host this figure

00:02:54,100 --> 00:02:59,350
shows the high-level overview of the

00:02:56,290 --> 00:03:01,569
FPGA architecture on top is the copy

00:02:59,350 --> 00:03:03,280
paste phase change memory controller the

00:03:01,569 --> 00:03:05,170
custom a view provides the interface

00:03:03,280 --> 00:03:08,080
with a copy and implements wet and data

00:03:05,170 --> 00:03:09,910
management the PCM channel controller

00:03:08,080 --> 00:03:12,280
implements the interface with the a view

00:03:09,910 --> 00:03:15,100
and in addition it offers low level

00:03:12,280 --> 00:03:16,690
memory management and vibrations we

00:03:15,100 --> 00:03:18,609
build two different p same channel

00:03:16,690 --> 00:03:20,260
controllers for the two different PCM

00:03:18,609 --> 00:03:23,440
tips that we discussed in the previous

00:03:20,260 --> 00:03:25,720
life and moreover for comparison we

00:03:23,440 --> 00:03:28,329
developed a native pcie-based design

00:03:25,720 --> 00:03:30,310
that implements a descriptor like

00:03:28,329 --> 00:03:34,260
protocol and the PCM channel controller

00:03:30,310 --> 00:03:37,209
is again the same so here we show some

00:03:34,260 --> 00:03:40,120
measurements this figure shows the cdf

00:03:37,209 --> 00:03:43,500
of the right and read latency that we

00:03:40,120 --> 00:03:45,609
have been using 128 bite accesses and

00:03:43,500 --> 00:03:48,010
the measurements corresponds to the

00:03:45,609 --> 00:03:50,440
palmetto system the copy paste phase

00:03:48,010 --> 00:03:53,230
change memory controller and the PCM

00:03:50,440 --> 00:03:56,230
beams with the legacy PCM parts so we

00:03:53,230 --> 00:03:59,440
obtain very low right in read latency

00:03:56,230 --> 00:04:01,810
with mean values of 2.9 and 8.7

00:03:59,440 --> 00:04:07,030
microseconds respectively and I would

00:04:01,810 --> 00:04:10,060
like to stress the small variance of the

00:04:07,030 --> 00:04:12,069
measurements so in particular 99% of the

00:04:10,060 --> 00:04:15,880
rates complete within a point eight

00:04:12,069 --> 00:04:17,799
microseconds out of which 4.5 are due to

00:04:15,880 --> 00:04:20,769
the serial command and data interface of

00:04:17,799 --> 00:04:23,470
this particular chip if we move to the

00:04:20,769 --> 00:04:25,450
next generation PCM chip scenario which

00:04:23,470 --> 00:04:26,060
we have emulated with special hardware

00:04:25,450 --> 00:04:28,970
and

00:04:26,060 --> 00:04:30,889
assume a fast ddr3 like interface here

00:04:28,970 --> 00:04:34,700
we get even better measurements for the

00:04:30,889 --> 00:04:36,350
latency with mean values of 2.9 and 3.6

00:04:34,700 --> 00:04:38,990
for right and with respectively and

00:04:36,350 --> 00:04:40,580
again I want to mention the very small

00:04:38,990 --> 00:04:42,650
variance of the measurements and

00:04:40,580 --> 00:04:45,050
ninety-nine percent of the rates

00:04:42,650 --> 00:04:50,180
complete with in 3.9 microseconds in

00:04:45,050 --> 00:04:52,910
this case in this chart we measure the

00:04:50,180 --> 00:04:55,820
right and read system performance for

00:04:52,910 --> 00:05:01,160
different data block size and we also

00:04:55,820 --> 00:05:04,430
compare cappy and pcie we observe that

00:05:01,160 --> 00:05:07,400
the capi based controller outperforms

00:05:04,430 --> 00:05:09,710
the native PCIe design and we get

00:05:07,400 --> 00:05:13,910
similar results for both systems as a

00:05:09,710 --> 00:05:16,190
t20 and the palmetto and for large block

00:05:13,910 --> 00:05:18,880
sizes the system bandwidth basically is

00:05:16,190 --> 00:05:22,580
limited from the five bandwidth of the

00:05:18,880 --> 00:05:25,160
specific PCM tips while for small sizes

00:05:22,580 --> 00:05:27,139
we can even improve the performance by

00:05:25,160 --> 00:05:28,550
doing some further optimizations in the

00:05:27,139 --> 00:05:33,760
data management and the descriptive

00:05:28,550 --> 00:05:36,500
management of the a view so in summary

00:05:33,760 --> 00:05:38,570
we have attached PCM to open power

00:05:36,500 --> 00:05:42,560
service via copy and diplomatic as know

00:05:38,570 --> 00:05:44,150
maybe on xylenes fpga we design custom

00:05:42,560 --> 00:05:46,100
cappy based phase change memory con

00:05:44,150 --> 00:05:48,289
laurels few different versions for two

00:05:46,100 --> 00:05:52,250
different technologies and we measured

00:05:48,289 --> 00:05:54,410
low latency for 128 bytes read and write

00:05:52,250 --> 00:05:57,320
access from to PCM things on a power

00:05:54,410 --> 00:05:59,270
server as a next step we are working on

00:05:57,320 --> 00:06:01,070
improving the performance by doing some

00:05:59,270 --> 00:06:04,070
protocol optimization at the a view

00:06:01,070 --> 00:06:05,780
level and also measured the system

00:06:04,070 --> 00:06:10,669
performance for different read and write

00:06:05,780 --> 00:06:12,560
workloads and also to try to extend the

00:06:10,669 --> 00:06:15,919
designer that support multiple PCM

00:06:12,560 --> 00:06:17,840
channels for higher throughput finally I

00:06:15,919 --> 00:06:19,970
would like to acknowledge the work of

00:06:17,840 --> 00:06:23,979
other people that contributed in this

00:06:19,970 --> 00:06:23,979

YouTube URL: https://www.youtube.com/watch?v=uAFgn9tKd1Q


