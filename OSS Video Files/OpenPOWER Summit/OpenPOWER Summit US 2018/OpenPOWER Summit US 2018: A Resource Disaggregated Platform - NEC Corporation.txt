Title: OpenPOWER Summit US 2018: A Resource Disaggregated Platform - NEC Corporation
Publication date: 2018-04-03
Playlist: OpenPOWER Summit US 2018
Description: 
	Deepak Pathania, Senior Technical Leader, NEC Corporation, discusses a resource disaggregated platform for realizing ultra fast failover recovery high availability systems at OpenPOWER Summit 2018.

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,510 --> 00:00:08,130
hi I welcome you all on behalf of NEC a

00:00:04,400 --> 00:00:10,679
here in the session and also we are

00:00:08,130 --> 00:00:14,219
proud members of IBM open power summit

00:00:10,679 --> 00:00:18,560
and we are today here to address the

00:00:14,219 --> 00:00:21,779
need for affordable and available

00:00:18,560 --> 00:00:25,680
systems which is which was the key

00:00:21,779 --> 00:00:27,830
message today in the keynote so so I'm

00:00:25,680 --> 00:00:30,779
going to talk about resources

00:00:27,830 --> 00:00:33,239
disaggregated platform for ultra fast

00:00:30,779 --> 00:00:35,700
failover recovery mechanisms so there

00:00:33,239 --> 00:00:38,190
are two technologies offered by NEC

00:00:35,700 --> 00:00:41,820
which I'm going to talk about so the

00:00:38,190 --> 00:00:43,980
first technology is Express ether which

00:00:41,820 --> 00:00:45,870
is a resource this aggregated system and

00:00:43,980 --> 00:00:49,079
the second technology is Express cluster

00:00:45,870 --> 00:00:55,260
X which is for the failover recovery

00:00:49,079 --> 00:00:58,770
software so with this I'll first start

00:00:55,260 --> 00:01:01,170
with the defining what can be a resource

00:00:58,770 --> 00:01:03,510
disaggregated platform so a resource

00:01:01,170 --> 00:01:06,750
disaggregated platform can be a

00:01:03,510 --> 00:01:09,750
technology which extends beyond the

00:01:06,750 --> 00:01:11,939
chassis of the computer so any C's

00:01:09,750 --> 00:01:15,270
Express ether is actually the technology

00:01:11,939 --> 00:01:18,720
which is for extending PCIe over

00:01:15,270 --> 00:01:22,680
Ethernet and in this technology what we

00:01:18,720 --> 00:01:26,790
do is that we move the iOS outside the

00:01:22,680 --> 00:01:29,610
chassis of the computer and basically we

00:01:26,790 --> 00:01:32,460
extend the PCIe over ethernet allows us

00:01:29,610 --> 00:01:37,110
to get the distance and switching

00:01:32,460 --> 00:01:40,740
capability and such a system is a very

00:01:37,110 --> 00:01:43,560
desirable for scaling up from a normal

00:01:40,740 --> 00:01:51,119
desktop or a server to a cloud a level

00:01:43,560 --> 00:01:55,170
deployment so exposition is nothing but

00:01:51,119 --> 00:01:57,930
just another PCIe switch and over to the

00:01:55,170 --> 00:02:00,509
left you see the PCIe switch

00:01:57,930 --> 00:02:03,180
configuration in a normal desktop or a

00:02:00,509 --> 00:02:05,549
server where we have a CPU the way I

00:02:03,180 --> 00:02:08,039
have a connected PCIe switch and we have

00:02:05,549 --> 00:02:12,879
our devices now on the right is what

00:02:08,039 --> 00:02:15,670
explicit re-enforce so in the middle of

00:02:12,879 --> 00:02:17,379
the switch we it is split it between two

00:02:15,670 --> 00:02:19,389
halves the upstream ports and the

00:02:17,379 --> 00:02:21,459
downstream ports and we in the middle we

00:02:19,389 --> 00:02:24,489
have the ethernet now this Ethernet is

00:02:21,459 --> 00:02:28,810
invisible by the word invisible we mean

00:02:24,489 --> 00:02:31,900
is that the CPU sees all these i/o

00:02:28,810 --> 00:02:35,049
devices as as if they are at the local

00:02:31,900 --> 00:02:37,230
and that's the kind of statement we need

00:02:35,049 --> 00:02:40,000
which we need to achieve because

00:02:37,230 --> 00:02:42,189
introducing Ethernet brings a lot of

00:02:40,000 --> 00:02:44,709
unsent uncertainties and these

00:02:42,189 --> 00:02:46,450
uncertainties are something which we

00:02:44,709 --> 00:02:50,620
have worked on in in our product and

00:02:46,450 --> 00:02:53,560
actually we are able to realize the

00:02:50,620 --> 00:02:58,329
resource disaggregated platform and I'll

00:02:53,560 --> 00:03:00,250
be discussing in my for the slides now

00:02:58,329 --> 00:03:04,239
we can see this concept has a broad

00:03:00,250 --> 00:03:06,400
scale single computer and so the this is

00:03:04,239 --> 00:03:09,129
the on the left is the traditional way

00:03:06,400 --> 00:03:12,129
we see our current computer architecture

00:03:09,129 --> 00:03:14,290
with PCIe switch and on the right is

00:03:12,129 --> 00:03:16,810
what do is the more of a futuristic view

00:03:14,290 --> 00:03:19,629
that how can we extend so the power of

00:03:16,810 --> 00:03:21,549
Ethernet allows us to extend it over two

00:03:19,629 --> 00:03:24,669
kilometers as well and also the

00:03:21,549 --> 00:03:27,569
switching port so we are not limited by

00:03:24,669 --> 00:03:30,159
any physical constraints in case of

00:03:27,569 --> 00:03:31,989
basically Express ether and we can

00:03:30,159 --> 00:03:34,840
actually have a broad scale single

00:03:31,989 --> 00:03:37,299
computer that means that I I can scale

00:03:34,840 --> 00:03:42,220
up from a single computer to a big

00:03:37,299 --> 00:03:45,720
system and speaking of that since we are

00:03:42,220 --> 00:03:50,169
using Ethernet so we can visualize

00:03:45,720 --> 00:03:52,840
access either system based architectures

00:03:50,169 --> 00:03:56,009
as a system or network now the system 1

00:03:52,840 --> 00:03:59,739
network allows us the capability to have

00:03:56,009 --> 00:04:02,799
various compute nodes or accelerator

00:03:59,739 --> 00:04:06,099
nodes and storage nodes to be connected

00:04:02,799 --> 00:04:11,709
and to support the existing CPU so the

00:04:06,099 --> 00:04:14,680
IBM power 9 CPUs can be supported by the

00:04:11,709 --> 00:04:17,079
iOS or the accelerators and the

00:04:14,680 --> 00:04:19,810
disaggregation would allow to support it

00:04:17,079 --> 00:04:21,699
in a more cost-efficient way so we can

00:04:19,810 --> 00:04:24,639
actually have a system which is spread

00:04:21,699 --> 00:04:27,979
out on network and the capability of

00:04:24,639 --> 00:04:31,070
having a system or network

00:04:27,979 --> 00:04:35,860
can be discussed in my next slide which

00:04:31,070 --> 00:04:39,169
talks about features so so these are the

00:04:35,860 --> 00:04:43,789
kief four features which expresses her

00:04:39,169 --> 00:04:47,060
offers and and these features allows it

00:04:43,789 --> 00:04:49,580
to be a very good example of our source

00:04:47,060 --> 00:04:53,240
disaggregation with a practical

00:04:49,580 --> 00:04:55,490
perspective and the first part is of

00:04:53,240 --> 00:04:56,750
course as we are disaggregating and

00:04:55,490 --> 00:04:59,630
moving out of the chassis of the

00:04:56,750 --> 00:05:02,330
computer we should be having equivalent

00:04:59,630 --> 00:05:04,010
performance as local because if we lose

00:05:02,330 --> 00:05:07,130
on performance then we lose on our

00:05:04,010 --> 00:05:10,430
applications which which might not be a

00:05:07,130 --> 00:05:14,000
good way of looking at this deployment

00:05:10,430 --> 00:05:16,340
so Ethernet is literally invisible and

00:05:14,000 --> 00:05:19,310
how it is we can discuss in detail and

00:05:16,340 --> 00:05:22,039
the second part is we've got a low

00:05:19,310 --> 00:05:24,680
latency el2

00:05:22,039 --> 00:05:27,080
Ethernet with without any software stack

00:05:24,680 --> 00:05:30,050
so that means we are working on the l2

00:05:27,080 --> 00:05:33,199
layer of the ethernet and we do not

00:05:30,050 --> 00:05:36,770
require any software stack to be

00:05:33,199 --> 00:05:43,010
deployed for for our expertise of

00:05:36,770 --> 00:05:45,949
product and since Ethernet has some

00:05:43,010 --> 00:05:49,870
uncertainties that it incurs losses so

00:05:45,949 --> 00:05:53,120
and PCI is some protocol which doesn't

00:05:49,870 --> 00:05:56,330
cannot tolerate basically any packet

00:05:53,120 --> 00:05:59,960
loss so our secret sauce sauce in X

00:05:56,330 --> 00:06:02,770
procedure product allows without losing

00:05:59,960 --> 00:06:05,870
any packet we are able to basically

00:06:02,770 --> 00:06:11,060
transfer the PCIe a packets over

00:06:05,870 --> 00:06:14,120
Ethernet and using you know time-tested

00:06:11,060 --> 00:06:17,720
algorithms with NEC research labs we are

00:06:14,120 --> 00:06:22,539
able to achieve zero percent loss or a

00:06:17,720 --> 00:06:25,550
lossless system using Express ether and

00:06:22,539 --> 00:06:28,039
the fourth and the most important part

00:06:25,550 --> 00:06:31,220
is the i/o dynamic real reallocation so

00:06:28,039 --> 00:06:33,590
since we talked about that this is a

00:06:31,220 --> 00:06:35,719
system on network kind of strategy where

00:06:33,590 --> 00:06:39,710
we have extended the PCIe over Ethernet

00:06:35,719 --> 00:06:40,320
so we can have various multiple GPU

00:06:39,710 --> 00:06:44,790
nodes

00:06:40,320 --> 00:06:47,250
or SSD nodes located over the network so

00:06:44,790 --> 00:06:51,150
that means we also have the capability

00:06:47,250 --> 00:06:53,660
to switch between them so this switching

00:06:51,150 --> 00:06:56,400
between them allows us to reuse or

00:06:53,660 --> 00:06:59,850
efficiently use the GPUs and SSDs which

00:06:56,400 --> 00:07:03,590
are existing on the system Network

00:06:59,850 --> 00:07:06,540
basically so how we see it is that we

00:07:03,590 --> 00:07:09,090
provide resource as a service so that

00:07:06,540 --> 00:07:12,510
means the resources can be physically

00:07:09,090 --> 00:07:14,720
allocated to different users based upon

00:07:12,510 --> 00:07:17,790
their need so let's just say we have a

00:07:14,720 --> 00:07:21,540
32 GPU cluster and some of the users

00:07:17,790 --> 00:07:24,690
require 30 GPUs and other user requires

00:07:21,540 --> 00:07:29,060
8 GPUs so once the 30 GPU job is done

00:07:24,690 --> 00:07:32,250
those GPUs can be reallocated to the

00:07:29,060 --> 00:07:35,040
next user and such kind of services

00:07:32,250 --> 00:07:38,490
allows the efficient utilization of the

00:07:35,040 --> 00:07:40,170
resources and since using Ethernet we

00:07:38,490 --> 00:07:43,170
have we do not have the distance

00:07:40,170 --> 00:07:46,230
limitation so we can have kind of a

00:07:43,170 --> 00:07:49,290
campus in a campus we can have GPUs or

00:07:46,230 --> 00:07:52,230
SSDs or any PCI devices lo que lo kated

00:07:49,290 --> 00:07:53,760
far apart and still the the each one of

00:07:52,230 --> 00:07:59,550
the users located in the campus can

00:07:53,760 --> 00:08:01,470
utilize that power so talking about the

00:07:59,550 --> 00:08:04,890
throughput and reliability in my

00:08:01,470 --> 00:08:07,770
previous slide I talked about that we

00:08:04,890 --> 00:08:11,400
have a lossless kind of situation we try

00:08:07,770 --> 00:08:14,130
to achieve the identities of Ethernet so

00:08:11,400 --> 00:08:17,400
we first of all provide dual ports in

00:08:14,130 --> 00:08:20,480
our communication between the server and

00:08:17,400 --> 00:08:23,910
the iOS which are remotely located and

00:08:20,480 --> 00:08:28,050
the dual boots allows us pass redundancy

00:08:23,910 --> 00:08:30,840
and also load balancing so each foot

00:08:28,050 --> 00:08:33,120
this is a 40 gig express ether product

00:08:30,840 --> 00:08:34,620
which we are showing here so each port

00:08:33,120 --> 00:08:37,620
is of 40 gigs so that succumb

00:08:34,620 --> 00:08:40,530
accumulative of 80 Gbps of bandwidth we

00:08:37,620 --> 00:08:43,979
are providing 4 X 8 link which is or 64

00:08:40,530 --> 00:08:47,100
GB PS so we are running 64 GB PS link

00:08:43,979 --> 00:08:51,300
requirement over 80 GB PS so we are

00:08:47,100 --> 00:08:53,940
actually able to hide the latency of the

00:08:51,300 --> 00:08:56,130
distance as well in such situations

00:08:53,940 --> 00:08:59,850
and since there are multiple paths from

00:08:56,130 --> 00:09:03,480
host towards the i/o so even one of the

00:08:59,850 --> 00:09:04,500
paths fail the next part is the one

00:09:03,480 --> 00:09:06,240
through which the packet can be

00:09:04,500 --> 00:09:09,000
delivered so in this way we make sure

00:09:06,240 --> 00:09:12,300
that there are no losses occurring

00:09:09,000 --> 00:09:13,740
during the transmission that is the

00:09:12,300 --> 00:09:16,560
ethernet uncertainity

00:09:13,740 --> 00:09:20,820
so let's just say we have a Ethernet

00:09:16,560 --> 00:09:25,020
fabric multiple nodes so the extra seat

00:09:20,820 --> 00:09:27,990
the host you basically he takes out each

00:09:25,020 --> 00:09:30,210
of the paths checks the latency of each

00:09:27,990 --> 00:09:33,510
of the paths and then accordingly map of

00:09:30,210 --> 00:09:37,440
create a system map and it may in order

00:09:33,510 --> 00:09:38,850
to make sure that that the packet which

00:09:37,440 --> 00:09:41,070
has been sent from the Express either

00:09:38,850 --> 00:09:44,820
side make sure it is delivered to the

00:09:41,070 --> 00:09:47,000
i/o side remotely the next I want to

00:09:44,820 --> 00:09:49,830
talk about is the bandwidth utilization

00:09:47,000 --> 00:09:51,180
so normally with the ethernet another

00:09:49,830 --> 00:09:53,910
problem is that the bandwidth

00:09:51,180 --> 00:09:57,180
utilization we have to make sure that

00:09:53,910 --> 00:09:59,460
the band is completely utilized now in

00:09:57,180 --> 00:10:01,560
in contrast to the top one the tcp

00:09:59,460 --> 00:10:04,350
Renault the the below one is what

00:10:01,560 --> 00:10:06,570
express ether does it is works on the

00:10:04,350 --> 00:10:10,440
proving mechanism so probing mechanism

00:10:06,570 --> 00:10:12,120
makes keeps on basically registering the

00:10:10,440 --> 00:10:15,360
latency of each of the paths from host

00:10:12,120 --> 00:10:19,050
to i/o through the network and it makes

00:10:15,360 --> 00:10:21,620
sure that the each the bandwidth is 80

00:10:19,050 --> 00:10:24,630
GBS of bandwidth is fully utilized and

00:10:21,620 --> 00:10:27,840
it always measures the arrival time of

00:10:24,630 --> 00:10:29,790
the packets and the sending time so in

00:10:27,840 --> 00:10:32,730
this way it is able to utilize the

00:10:29,790 --> 00:10:37,370
entire bandwidth and justify the usage

00:10:32,730 --> 00:10:41,010
so because since pci is a high bandwidth

00:10:37,370 --> 00:10:43,830
requirement so in case of like GPUs or

00:10:41,010 --> 00:10:47,100
SSDs where you are querying or in memory

00:10:43,830 --> 00:10:50,940
database systems so such a requirement

00:10:47,100 --> 00:10:53,580
comes in and we are able to evolve from

00:10:50,940 --> 00:10:58,770
the ethernet uncertainties in this case

00:10:53,580 --> 00:11:01,950
as well so this is the example of in

00:10:58,770 --> 00:11:05,890
case of a part failover occurs how we

00:11:01,950 --> 00:11:11,050
cope up with that is that basically

00:11:05,890 --> 00:11:12,700
on the top you see the 13th packet was

00:11:11,050 --> 00:11:16,089
not able to get delivered because this

00:11:12,700 --> 00:11:18,010
switch was broken so if you see there

00:11:16,089 --> 00:11:21,279
there are alternate paths with it it has

00:11:18,010 --> 00:11:23,800
already been calculated so it will take

00:11:21,279 --> 00:11:26,019
the alternate path skipping the switch

00:11:23,800 --> 00:11:28,329
which is being broken and once the

00:11:26,019 --> 00:11:31,779
switch is recovered it will back again

00:11:28,329 --> 00:11:34,180
trace that but so in this way through

00:11:31,779 --> 00:11:36,310
the network Ethernet cobia may able to

00:11:34,180 --> 00:11:42,519
make sure that the PCI packets are

00:11:36,310 --> 00:11:45,790
delivered from source host sooo the i/o

00:11:42,519 --> 00:11:51,490
side now the same is also useful in case

00:11:45,790 --> 00:11:53,950
of multi path i/o which is our main

00:11:51,490 --> 00:11:56,260
topic today as well in which we can have

00:11:53,950 --> 00:11:59,740
failover recoveries over various

00:11:56,260 --> 00:12:03,220
database systems so and this allows us

00:11:59,740 --> 00:12:07,750
to realize such a system over Ethernet

00:12:03,220 --> 00:12:09,160
network another next part is the last

00:12:07,750 --> 00:12:11,350
part which is the dynamic resource

00:12:09,160 --> 00:12:13,930
allocation now the dynamic resource

00:12:11,350 --> 00:12:18,430
allocation basically allows us to

00:12:13,930 --> 00:12:21,459
reallocate the resources to the hosts

00:12:18,430 --> 00:12:23,649
and and since it is on there sitting on

00:12:21,459 --> 00:12:26,320
the Ethernet network so basically I can

00:12:23,649 --> 00:12:29,620
allocate from one host to the other

00:12:26,320 --> 00:12:31,300
these iOS and this can be done by

00:12:29,620 --> 00:12:35,079
software as well as from hardware

00:12:31,300 --> 00:12:36,820
hardware and the on the on the left you

00:12:35,079 --> 00:12:39,370
see the expertise and manager software

00:12:36,820 --> 00:12:41,740
which is sitting on the same network so

00:12:39,370 --> 00:12:44,949
this software is for primarily for

00:12:41,740 --> 00:12:47,760
managing and configuring such or

00:12:44,949 --> 00:12:51,459
dynamically reallocations now these are

00:12:47,760 --> 00:12:53,380
even for hot plugs so you can plug in

00:12:51,459 --> 00:12:55,870
your devices and plug out your devices

00:12:53,380 --> 00:12:59,680
on the run time and you can configure

00:12:55,870 --> 00:13:01,360
them based upon the user requirement so

00:12:59,680 --> 00:13:04,779
the extra system manager software

00:13:01,360 --> 00:13:09,070
basically is used for configuring and

00:13:04,779 --> 00:13:11,829
monitoring so it monitors the bandwidth

00:13:09,070 --> 00:13:16,480
utilization and it also gives status

00:13:11,829 --> 00:13:17,740
statistics of how we can how well we are

00:13:16,480 --> 00:13:19,120
utilizing and how

00:13:17,740 --> 00:13:21,580
we are going with the current

00:13:19,120 --> 00:13:23,740
communication so for this software we

00:13:21,580 --> 00:13:25,330
provide the REST API interface and this

00:13:23,740 --> 00:13:28,750
interface is a generic interface in

00:13:25,330 --> 00:13:39,760
which you can integrate this software

00:13:28,750 --> 00:13:42,460
into your existing IT infrastructure to

00:13:39,760 --> 00:13:44,950
all so the various flavors of extra

00:13:42,460 --> 00:13:47,500
seats as you see on the bottom from left

00:13:44,950 --> 00:13:49,960
to right we ensure that each of the

00:13:47,500 --> 00:13:54,010
members are can talking to each other so

00:13:49,960 --> 00:13:58,600
that means either it is forced to IO IO

00:13:54,010 --> 00:14:02,230
2 IO or single IO to multiple hosts or

00:13:58,600 --> 00:14:04,930
and host to host so we we tend to

00:14:02,230 --> 00:14:07,480
support all all of these configurations

00:14:04,930 --> 00:14:11,860
and without the involvement of the

00:14:07,480 --> 00:14:13,930
actual switch main route so so in case

00:14:11,860 --> 00:14:16,420
of peer-to-peer we if the transaction

00:14:13,930 --> 00:14:19,270
doesn't goes all the way to the host it

00:14:16,420 --> 00:14:21,850
can be routed from the Ethernet switch

00:14:19,270 --> 00:14:24,610
itself so it's like iOS are talking

00:14:21,850 --> 00:14:26,740
among themselves at themselves and such

00:14:24,610 --> 00:14:29,490
a configuration allows us to have a kind

00:14:26,740 --> 00:14:32,140
of a mesh kind of architecture in which

00:14:29,490 --> 00:14:36,010
every node is talking to independently

00:14:32,140 --> 00:14:41,410
to each other so now so thanks to the

00:14:36,010 --> 00:14:43,320
PCIe gen3 specifications such a system

00:14:41,410 --> 00:14:47,560
can be realized

00:14:43,320 --> 00:14:49,120
now for the explicit third line up so we

00:14:47,560 --> 00:14:51,400
have different versions of X procedure

00:14:49,120 --> 00:14:53,530
so we have the 1 G 10 G and the 40 G

00:14:51,400 --> 00:14:57,360
version so one G version is primarily

00:14:53,530 --> 00:15:00,310
for the applications which are based on

00:14:57,360 --> 00:15:02,790
IOT platforms where the connectivity

00:15:00,310 --> 00:15:05,410
basic connectivity is a requirement the

00:15:02,790 --> 00:15:07,120
moving on to the 10 G is more of a thin

00:15:05,410 --> 00:15:09,880
client solutions which you want to

00:15:07,120 --> 00:15:12,610
extend 40 G's for your compute and

00:15:09,880 --> 00:15:15,070
storage high performance requirements so

00:15:12,610 --> 00:15:18,490
we provide different flavors catering to

00:15:15,070 --> 00:15:20,230
different use cases and the needs now I

00:15:18,490 --> 00:15:23,470
have talked about the various features

00:15:20,230 --> 00:15:26,380
and you know what kind of variants we

00:15:23,470 --> 00:15:28,420
are offering with the express user but

00:15:26,380 --> 00:15:29,380
we need to also prove it on the

00:15:28,420 --> 00:15:31,080
performance grounds

00:15:29,380 --> 00:15:32,730
so on the

00:15:31,080 --> 00:15:36,480
means grounds we did some tests with

00:15:32,730 --> 00:15:40,170
SSDs and now these are FIO benchmark

00:15:36,480 --> 00:15:42,810
results and if you see on the left and

00:15:40,170 --> 00:15:44,640
right these are sequential reads and

00:15:42,810 --> 00:15:47,100
sequential writes so this is the

00:15:44,640 --> 00:15:49,140
bandwidth utilization local versus

00:15:47,100 --> 00:15:51,300
remote so that means we placed an SSD in

00:15:49,140 --> 00:15:53,520
the local slot and then we place the SSD

00:15:51,300 --> 00:15:56,520
in the remote slot of the express heater

00:15:53,520 --> 00:15:58,920
and what do we find out is that we are

00:15:56,520 --> 00:16:02,250
able to utilize the entire bandwidth and

00:15:58,920 --> 00:16:05,300
as it was you as it would be utilized in

00:16:02,250 --> 00:16:11,850
a local slot and we are able to you get

00:16:05,300 --> 00:16:13,140
97% of hva versus local performance that

00:16:11,850 --> 00:16:18,060
means X procedure versus local

00:16:13,140 --> 00:16:21,060
performance and this this actually make

00:16:18,060 --> 00:16:24,560
sure the user that this device is as

00:16:21,060 --> 00:16:28,920
good as working as local and in terms of

00:16:24,560 --> 00:16:32,340
now if I talk about performance and in

00:16:28,920 --> 00:16:34,890
terms of I ops so in terms of I ops as

00:16:32,340 --> 00:16:37,500
well even if we work with multiple SSDs

00:16:34,890 --> 00:16:40,200
so one two four and if even if we work

00:16:37,500 --> 00:16:43,830
with multiple SSDs as well still we do

00:16:40,200 --> 00:16:45,930
not lose on performance so this is the

00:16:43,830 --> 00:16:49,770
SSD example the next example is with the

00:16:45,930 --> 00:16:54,060
GPGPU P 100 so we did some and body test

00:16:49,770 --> 00:16:57,120
with the the gpgpu or PEEP Nvidia P 100

00:16:54,060 --> 00:16:59,610
so this is a graph of gigaflops versus n

00:16:57,120 --> 00:17:02,660
bodies and what we find out is that you

00:16:59,610 --> 00:17:06,060
see that - almost overlapping hang

00:17:02,660 --> 00:17:08,250
curves this is the configuration is

00:17:06,060 --> 00:17:10,920
where it is locally or located in the

00:17:08,250 --> 00:17:13,740
local slot GPU and configuration B is

00:17:10,920 --> 00:17:15,959
the GPUs located in the remote so we did

00:17:13,740 --> 00:17:18,870
tests parallely and what we found out is

00:17:15,959 --> 00:17:20,459
the results are as it is same so that

00:17:18,870 --> 00:17:22,890
means we are not losing on performance

00:17:20,459 --> 00:17:26,010
even if they are distance apart and now

00:17:22,890 --> 00:17:28,470
this is this basically gives a lot of

00:17:26,010 --> 00:17:30,750
confidence to the user that even if I if

00:17:28,470 --> 00:17:34,730
my I was disaggregated it's outside my

00:17:30,750 --> 00:17:38,910
chassis still I am at an advantage of

00:17:34,730 --> 00:17:42,340
you know that advantage which is as good

00:17:38,910 --> 00:17:45,560
as local so

00:17:42,340 --> 00:17:49,640
using extra seater technology if I talk

00:17:45,560 --> 00:17:52,790
talk about the use case today is that I

00:17:49,640 --> 00:17:56,540
can actually have failover recoveries

00:17:52,790 --> 00:17:59,090
and this is I can have with the

00:17:56,540 --> 00:18:01,640
configuration with the legacy so let's

00:17:59,090 --> 00:18:03,470
just say we have a main inmate so I will

00:18:01,640 --> 00:18:05,750
be talking about in memory database so

00:18:03,470 --> 00:18:07,580
we have a main DB which is FC sandwich

00:18:05,750 --> 00:18:10,850
is a legacy one so I can actually

00:18:07,580 --> 00:18:15,470
integrate with the nvme which is a fast

00:18:10,850 --> 00:18:18,530
faster then then the fibre channel and

00:18:15,470 --> 00:18:20,630
it also allows us faster recovery so

00:18:18,530 --> 00:18:23,390
basically we can have quick recovery

00:18:20,630 --> 00:18:24,950
fail overs using Express ether or the

00:18:23,390 --> 00:18:28,910
disaggregated system which I just talked

00:18:24,950 --> 00:18:32,570
about now this is possible because of

00:18:28,910 --> 00:18:35,510
the Express cluster system so the

00:18:32,570 --> 00:18:38,330
Express cluster system basically allows

00:18:35,510 --> 00:18:41,420
us is a software this which is a second

00:18:38,330 --> 00:18:43,760
offering from NEC which allows us to do

00:18:41,420 --> 00:18:45,590
quick failover recoveries so earlier the

00:18:43,760 --> 00:18:48,800
system has been used between servers and

00:18:45,590 --> 00:18:50,090
it is able been able to achieve the

00:18:48,800 --> 00:18:55,420
performance of five nines

00:18:50,090 --> 00:18:58,820
so 99.999% of failover recovery and

00:18:55,420 --> 00:19:01,400
combining Express ether express ether

00:18:58,820 --> 00:19:04,820
manager along with Express cluster with

00:19:01,400 --> 00:19:07,610
with this new configuration basically we

00:19:04,820 --> 00:19:11,810
can achieve a system in which the

00:19:07,610 --> 00:19:14,600
disaggregated IOT's can be used for

00:19:11,810 --> 00:19:16,400
failover recoveries now in our demo

00:19:14,600 --> 00:19:20,360
today which we are displaying at our

00:19:16,400 --> 00:19:22,940
booth we have this configuration where

00:19:20,360 --> 00:19:26,090
the software app is running and it is

00:19:22,940 --> 00:19:27,800
talking with the two servers within the

00:19:26,090 --> 00:19:30,200
active servers and the standby server

00:19:27,800 --> 00:19:32,270
and these these both of the servers are

00:19:30,200 --> 00:19:35,510
connected to the nvme drives which are

00:19:32,270 --> 00:19:38,330
remotely located over Ethernet now in

00:19:35,510 --> 00:19:42,020
case one of them fails this switching

00:19:38,330 --> 00:19:44,240
happens automatically an Express cluster

00:19:42,020 --> 00:19:46,880
is able to achieve the same failover

00:19:44,240 --> 00:19:49,520
recovery which has been it was earlier

00:19:46,880 --> 00:19:51,380
able to achieve with service so with the

00:19:49,520 --> 00:19:53,930
disaggregated system as well we are able

00:19:51,380 --> 00:19:55,350
to achieve the same performance in terms

00:19:53,930 --> 00:19:58,830
of sale over recovery

00:19:55,350 --> 00:20:02,130
now this claim is basically mentions

00:19:58,830 --> 00:20:05,850
here is that we are able to replicate

00:20:02,130 --> 00:20:08,040
the same behavior as local and so yet we

00:20:05,850 --> 00:20:10,260
have the capability of disaggregating

00:20:08,040 --> 00:20:13,830
that capability of disaggregation

00:20:10,260 --> 00:20:15,690
basically allows us to achieve a lot of

00:20:13,830 --> 00:20:17,910
applications so on the right hand side

00:20:15,690 --> 00:20:20,910
you see the application this for

00:20:17,910 --> 00:20:22,620
primarily for the computing side the

00:20:20,910 --> 00:20:24,570
acceleration nodes where we can you have

00:20:22,620 --> 00:20:26,700
clusters of GB GPUs or accelerate or

00:20:24,570 --> 00:20:29,000
FPGA which are coming up and then we can

00:20:26,700 --> 00:20:32,340
have a cluster of nvme SSDs as well

00:20:29,000 --> 00:20:36,060
whereas on the left bottom side you see

00:20:32,340 --> 00:20:37,830
is more of a iot kind of area which we

00:20:36,060 --> 00:20:40,860
are trying to explore so that means

00:20:37,830 --> 00:20:44,280
these sensors you see will be seen as

00:20:40,860 --> 00:20:46,680
local sensors to the cpu because they

00:20:44,280 --> 00:20:49,140
are located over PCIe remember that

00:20:46,680 --> 00:20:50,700
Ethernet is invisible because we have

00:20:49,140 --> 00:20:53,160
achieved the same performance as local

00:20:50,700 --> 00:20:55,680
right so Ethernet is literally invisible

00:20:53,160 --> 00:21:01,430
for the CPU who's sitting over there and

00:20:55,680 --> 00:21:05,750
on the server side now this kind of

00:21:01,430 --> 00:21:08,760
domain approach allows us to think of a

00:21:05,750 --> 00:21:12,240
single unified protocol which connects

00:21:08,760 --> 00:21:15,900
all so in future we are coming up with

00:21:12,240 --> 00:21:18,030
hardware software express eater as well

00:21:15,900 --> 00:21:20,610
as with wireless Express ether as well

00:21:18,030 --> 00:21:23,430
so we are we have already achieved good

00:21:20,610 --> 00:21:25,530
results with Wi-Fi extra seat sir so we

00:21:23,430 --> 00:21:28,230
can connect with your iOS through Wi-Fi

00:21:25,530 --> 00:21:30,750
and even with the software version of

00:21:28,230 --> 00:21:34,800
expertise ur we are coming up with the

00:21:30,750 --> 00:21:39,030
efficient algorithms so what does that

00:21:34,800 --> 00:21:42,030
mean that it does mean that your mobile

00:21:39,030 --> 00:21:46,470
phone can access this GPGPU powers

00:21:42,030 --> 00:21:49,620
remotely and actually you can send your

00:21:46,470 --> 00:21:52,560
data to the GP GPUs directly and get the

00:21:49,620 --> 00:21:56,010
processing or the storage done and get

00:21:52,560 --> 00:21:57,000
the results back and you even if you are

00:21:56,010 --> 00:22:00,090
sitting in a car in your car

00:21:57,000 --> 00:22:01,920
infotainment system so that means the so

00:22:00,090 --> 00:22:06,350
there is no software stacks involved

00:22:01,920 --> 00:22:06,350
this is pure sheer hardware protocol

00:22:06,370 --> 00:22:13,850
this is a sort I'm sorry so this is a

00:22:09,620 --> 00:22:16,160
software so this whole there's no

00:22:13,850 --> 00:22:20,420
software stack involved so this actually

00:22:16,160 --> 00:22:23,000
helps us to achieve a single unified

00:22:20,420 --> 00:22:26,270
protocol to connect all and yet we get

00:22:23,000 --> 00:22:29,000
the performance now we need to think of

00:22:26,270 --> 00:22:31,280
why we should do this because PCIe and

00:22:29,000 --> 00:22:35,090
Ethernet are both time-tested protocols

00:22:31,280 --> 00:22:39,110
and and they deserve to be evolved in

00:22:35,090 --> 00:22:42,940
more same most most simplest way and I

00:22:39,110 --> 00:22:46,490
believe that as we move forward with the

00:22:42,940 --> 00:22:51,650
resource disaggregation technology he

00:22:46,490 --> 00:22:53,390
using express ether we can get the

00:22:51,650 --> 00:22:56,240
following advantages which I just

00:22:53,390 --> 00:22:59,179
discussed so it gives the ethernet gives

00:22:56,240 --> 00:23:01,760
the distance and so there's no distance

00:22:59,179 --> 00:23:04,910
or length limitation and also with the

00:23:01,760 --> 00:23:07,700
dynamic switching capability and similar

00:23:04,910 --> 00:23:10,340
performance as remote versus local like

00:23:07,700 --> 00:23:13,299
we saw and moving within the she devices

00:23:10,340 --> 00:23:17,090
plug-in peak play capability as well and

00:23:13,299 --> 00:23:18,710
making or legacy devices useful that

00:23:17,090 --> 00:23:21,350
means we have existing lot of PCIe

00:23:18,710 --> 00:23:23,480
devices in the market so since they are

00:23:21,350 --> 00:23:25,820
bare PCI slots you can make them useful

00:23:23,480 --> 00:23:28,880
in our technology and even for the

00:23:25,820 --> 00:23:31,880
future so the resource disaggregated

00:23:28,880 --> 00:23:33,590
technology and with the Express cluster

00:23:31,880 --> 00:23:36,470
of failover mechanisms which can

00:23:33,590 --> 00:23:38,840
actually achieve a modular system where

00:23:36,470 --> 00:23:39,919
we can scale up from bottom to top that

00:23:38,840 --> 00:23:42,470
means you can start with a single

00:23:39,919 --> 00:23:45,020
desktop or a server and you can go to

00:23:42,470 --> 00:23:49,130
the top to the cloud level deployment

00:23:45,020 --> 00:23:52,640
and actually using such protocols like

00:23:49,130 --> 00:23:55,309
PCI a and Ethernet weak it's a I think

00:23:52,640 --> 00:23:59,179
it's a revolutionary step ahead to move

00:23:55,309 --> 00:24:01,280
forward and look into this area as the

00:23:59,179 --> 00:24:05,059
next single unified protocol for

00:24:01,280 --> 00:24:08,300
connecting all so now that's ends my

00:24:05,059 --> 00:24:17,510
speech thank you so much

00:24:08,300 --> 00:24:20,780
I think we have around five minutes so

00:24:17,510 --> 00:24:23,350
if you have any questions please I would

00:24:20,780 --> 00:24:23,350
love to answer

00:24:30,190 --> 00:24:32,790
yes

00:24:42,920 --> 00:24:49,090
hello

00:24:44,750 --> 00:24:49,090
yes I'll just skip on to that slide

00:24:55,030 --> 00:24:57,810
this one

00:24:57,909 --> 00:25:02,190
adabo with this one yes

00:25:04,350 --> 00:25:11,970
every 50 milliseconds we are basically

00:25:07,470 --> 00:25:14,250
sending management frames across sender

00:25:11,970 --> 00:25:17,340
and receiver and we are actually trying

00:25:14,250 --> 00:25:20,309
to get the network latency and then we

00:25:17,340 --> 00:25:21,690
choose the best path to send and to make

00:25:20,309 --> 00:25:24,080
sure that the bandwidth is properly

00:25:21,690 --> 00:25:24,080
utilized

00:25:33,380 --> 00:25:38,450
it's a PCIe is a peer-to-peer

00:25:35,120 --> 00:25:41,779
communication so it's not parallel

00:25:38,450 --> 00:25:44,840
communication so in PCIe it's always as

00:25:41,779 --> 00:25:47,740
the host as talking we have so we're

00:25:44,840 --> 00:25:47,740
primarily

00:25:58,980 --> 00:26:06,179
yep so so our our exposition logic is

00:26:02,970 --> 00:26:09,029
currently realized in an FPGA so we are

00:26:06,179 --> 00:26:12,029
actually looking forward to collaborate

00:26:09,029 --> 00:26:15,029
with the programmable switches so that

00:26:12,029 --> 00:26:17,460
we can make an intelligent packet

00:26:15,029 --> 00:26:20,940
transmission and receiving so this would

00:26:17,460 --> 00:26:23,580
be very useful in so obviously I look

00:26:20,940 --> 00:26:25,529
for a dedicated network for GPUs but if

00:26:23,580 --> 00:26:27,470
I want to deploy it in a shared Ethernet

00:26:25,529 --> 00:26:31,100
network that would be really beneficial

00:26:27,470 --> 00:26:31,100
we look forward to it

00:26:37,040 --> 00:26:44,600
so the idea is to actually utilize the

00:26:39,530 --> 00:26:46,870
power of the existing systems and keep

00:26:44,600 --> 00:26:46,870
it simple

00:26:57,040 --> 00:26:59,610
okay

00:27:01,050 --> 00:27:08,930
so I thank you all for giving your time

00:27:05,820 --> 00:27:08,930

YouTube URL: https://www.youtube.com/watch?v=ePxGPIBKfy0


