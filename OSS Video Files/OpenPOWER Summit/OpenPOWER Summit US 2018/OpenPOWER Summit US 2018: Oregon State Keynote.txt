Title: OpenPOWER Summit US 2018: Oregon State Keynote
Publication date: 2018-04-04
Playlist: OpenPOWER Summit US 2018
Description: 
	Christopher M Sullivan, Assistant Director for Biocomputing, CGRB Oregon State, discusses ORNL's use of OpenPOWER. 

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,000 --> 00:00:04,380
ladies and gentlemen please welcome

00:00:01,820 --> 00:00:06,359
Assistant Director for bio computing

00:00:04,380 --> 00:00:08,670
Center for genome research and bio

00:00:06,359 --> 00:00:10,350
computing at Oregon State University

00:00:08,670 --> 00:00:17,090
Chris Sullivan

00:00:10,350 --> 00:00:19,290
[Music]

00:00:17,090 --> 00:00:22,050
good morning I'm gonna talk to you today

00:00:19,290 --> 00:00:23,640
about porting software onto the power

00:00:22,050 --> 00:00:25,560
platform I mean we have all this

00:00:23,640 --> 00:00:27,060
wonderful hardware but in the end we

00:00:25,560 --> 00:00:28,800
really have to take advantage of it and

00:00:27,060 --> 00:00:30,060
that's what the software does we're

00:00:28,800 --> 00:00:31,560
gonna move quickly through some of these

00:00:30,060 --> 00:00:34,290
slides because we have a bunch to go

00:00:31,560 --> 00:00:36,570
through so back in the day

00:00:34,290 --> 00:00:38,760
processing meant a bunch of equipment

00:00:36,570 --> 00:00:41,489
with a person standing there doing

00:00:38,760 --> 00:00:43,920
something today processing means

00:00:41,489 --> 00:00:45,930
processors on boards this is where we

00:00:43,920 --> 00:00:47,879
get our work done this is how we move

00:00:45,930 --> 00:00:51,380
forward we've kind of given up that old

00:00:47,879 --> 00:00:53,940
method of of processing with machines

00:00:51,380 --> 00:00:56,010
back in the day storage meant a big box

00:00:53,940 --> 00:00:59,190
put it on a shelf this is where we did

00:00:56,010 --> 00:01:00,989
things storage today means lots and lots

00:00:59,190 --> 00:01:03,120
of hard drive space so we've actually

00:01:00,989 --> 00:01:06,630
changed the definitions as we go through

00:01:03,120 --> 00:01:09,960
time and this is really important back

00:01:06,630 --> 00:01:11,369
in the day memory meant your brain and

00:01:09,960 --> 00:01:13,140
this is what we talked about you

00:01:11,369 --> 00:01:16,020
basically leveraged it the best you

00:01:13,140 --> 00:01:17,820
could now we can then manage memory a

00:01:16,020 --> 00:01:20,160
little bit differently we can store

00:01:17,820 --> 00:01:22,979
things in this you know volatile memory

00:01:20,160 --> 00:01:24,810
and let it come and go as we need and it

00:01:22,979 --> 00:01:28,530
allows more memory allows us to attack

00:01:24,810 --> 00:01:30,619
bigger problems I work with a lot of

00:01:28,530 --> 00:01:32,610
researchers this is what we do and

00:01:30,619 --> 00:01:34,830
researchers need computers to help

00:01:32,610 --> 00:01:36,750
answer scientific questions this is

00:01:34,830 --> 00:01:39,510
generally the look we get when we see

00:01:36,750 --> 00:01:41,460
our people working and moving on to the

00:01:39,510 --> 00:01:44,130
power platform helped us change that

00:01:41,460 --> 00:01:46,380
okay so our users became very pleased

00:01:44,130 --> 00:01:49,110
with their pathway forward and that's

00:01:46,380 --> 00:01:50,640
what we're here to talk to you about ok

00:01:49,110 --> 00:01:52,259
so the Center for Genome Research and

00:01:50,640 --> 00:01:53,909
bio computing is a little bit more than

00:01:52,259 --> 00:01:55,880
just a genome research group we've

00:01:53,909 --> 00:01:58,140
actually taken on almost all the

00:01:55,880 --> 00:01:59,729
research computing at Oregon State

00:01:58,140 --> 00:02:03,360
University and we are underneath the

00:01:59,729 --> 00:02:06,780
research office we do try and create

00:02:03,360 --> 00:02:09,450
methods and tools that fit our community

00:02:06,780 --> 00:02:11,760
and we identified open power as a

00:02:09,450 --> 00:02:14,040
pathway forward for these new methods

00:02:11,760 --> 00:02:15,540
and tools I'm going to talk about how we

00:02:14,040 --> 00:02:18,660
have to choose the proper operating

00:02:15,540 --> 00:02:20,340
system and then talk more clearly about

00:02:18,660 --> 00:02:22,799
building these tools on the open power

00:02:20,340 --> 00:02:25,200
systems there are some problems and

00:02:22,799 --> 00:02:26,669
therein seeded from groups like Intel

00:02:25,200 --> 00:02:28,110
they try and make it so that everybody's

00:02:26,669 --> 00:02:30,150
biased to Intel we

00:02:28,110 --> 00:02:32,070
found that then we're going to talk

00:02:30,150 --> 00:02:36,750
about some examples of how we use them

00:02:32,070 --> 00:02:38,550
so the CG RB works very hard with 26

00:02:36,750 --> 00:02:40,590
departments at Oregon State University

00:02:38,550 --> 00:02:41,640
to build infrastructure for researchers

00:02:40,590 --> 00:02:43,620
which is a little bit different than a

00:02:41,640 --> 00:02:45,630
standard infrastructure most

00:02:43,620 --> 00:02:47,370
infrastructures apply lots of policy and

00:02:45,630 --> 00:02:49,020
policy effects the research question in

00:02:47,370 --> 00:02:51,810
a negative way changes the scope and

00:02:49,020 --> 00:02:53,550
introduces a bias we have to help them

00:02:51,810 --> 00:02:56,880
create tools for data mining and data

00:02:53,550 --> 00:02:58,290
processing we do build new algorithms so

00:02:56,880 --> 00:03:00,420
I actually have students that we employ

00:02:58,290 --> 00:03:02,970
to do this we create lots of

00:03:00,420 --> 00:03:05,100
deliverables we publish stuff constantly

00:03:02,970 --> 00:03:08,520
I put out three papers already this year

00:03:05,100 --> 00:03:09,660
and have already one accepted one of the

00:03:08,520 --> 00:03:11,580
main things that we're here to talk

00:03:09,660 --> 00:03:13,050
about is ways of reducing cost and

00:03:11,580 --> 00:03:16,140
increasing the scope and that's what the

00:03:13,050 --> 00:03:18,420
power platform gave us so the center

00:03:16,140 --> 00:03:21,540
currently runs about 20,000 jobs a day

00:03:18,420 --> 00:03:23,340
we have now we are closer to 5,000

00:03:21,540 --> 00:03:26,400
processors at this point I realized

00:03:23,340 --> 00:03:28,950
we're over four petabytes of usable

00:03:26,400 --> 00:03:31,020
redundant storage we generate four to

00:03:28,950 --> 00:03:33,690
eight terabytes of data a day from

00:03:31,020 --> 00:03:35,220
different groups we have lots of

00:03:33,690 --> 00:03:36,810
machines with greater than a terabyte of

00:03:35,220 --> 00:03:39,780
RAM because that helps us change the

00:03:36,810 --> 00:03:41,730
scope we have six power systems this is

00:03:39,780 --> 00:03:43,410
really important we are continuing to

00:03:41,730 --> 00:03:46,620
buy them and that's an important model

00:03:43,410 --> 00:03:50,970
so how do these fit into the methods and

00:03:46,620 --> 00:03:52,860
tools around the open power so open

00:03:50,970 --> 00:03:54,330
power really allowed us to increase the

00:03:52,860 --> 00:03:57,420
scope of the data that we conclude in

00:03:54,330 --> 00:04:00,239
analysis both in terms of thread and in

00:03:57,420 --> 00:04:03,150
terms of moving data across the bus the

00:04:00,239 --> 00:04:05,220
bus speeds are really what changes and

00:04:03,150 --> 00:04:07,470
transforms our ability to work with data

00:04:05,220 --> 00:04:09,090
I have groups that go out and mine data

00:04:07,470 --> 00:04:11,430
out of the ocean and they generate 80

00:04:09,090 --> 00:04:13,560
terabytes of data a week I have a

00:04:11,430 --> 00:04:16,320
quarter petabyte coming every month or

00:04:13,560 --> 00:04:18,209
so from owl sounds in the forest so we

00:04:16,320 --> 00:04:20,549
have to try and reduce processing time

00:04:18,209 --> 00:04:25,020
four months two weeks otherwise I will

00:04:20,549 --> 00:04:27,150
be impacted by data constantly okay we

00:04:25,020 --> 00:04:29,640
also need to run multiple tools at the

00:04:27,150 --> 00:04:31,380
same time so that we can converge into a

00:04:29,640 --> 00:04:34,910
single space and not run a single

00:04:31,380 --> 00:04:38,340
algorithm this is really important okay

00:04:34,910 --> 00:04:40,460
why so much storage man we are in a data

00:04:38,340 --> 00:04:41,969
deluge we are hemorrhaging data from

00:04:40,460 --> 00:04:46,019
sequencers

00:04:41,969 --> 00:04:48,059
from video cameras from microphones from

00:04:46,019 --> 00:04:48,899
citizen science from everything it's out

00:04:48,059 --> 00:04:52,409
of control

00:04:48,899 --> 00:04:55,319
so really the the movement right now is

00:04:52,409 --> 00:04:56,759
how to manage the data and and that's

00:04:55,319 --> 00:04:58,169
really what we're trying to do with

00:04:56,759 --> 00:05:03,119
these new technologies and these new

00:04:58,169 --> 00:05:05,009
platforms let's see there's also lots

00:05:03,119 --> 00:05:07,799
and lots of steps within an analysis one

00:05:05,009 --> 00:05:12,599
pipeline could have 15 to 20 steps each

00:05:07,799 --> 00:05:14,329
step increasing the amount of output why

00:05:12,599 --> 00:05:17,159
such large memory machines the scope

00:05:14,329 --> 00:05:19,679
okay so I can have a single machine try

00:05:17,159 --> 00:05:22,079
and assemble the pine genome and it

00:05:19,679 --> 00:05:25,079
would take six terabytes of RAM to help

00:05:22,079 --> 00:05:27,869
me do that okay so really we're trying

00:05:25,079 --> 00:05:29,669
to leverage nvme technologies and things

00:05:27,869 --> 00:05:31,649
like this to help us not have to buy

00:05:29,669 --> 00:05:34,459
really expensive memory systems and

00:05:31,649 --> 00:05:37,439
address these questions with lower cost

00:05:34,459 --> 00:05:39,659
okay different algorithms use different

00:05:37,439 --> 00:05:42,329
amounts of memory and for analysis and

00:05:39,659 --> 00:05:44,279
we also want to be able to start lots of

00:05:42,329 --> 00:05:46,649
jobs and as we increase the thread count

00:05:44,279 --> 00:05:48,300
we're decreasing the amount of memory

00:05:46,649 --> 00:05:53,789
per thread if we don't put that memory

00:05:48,300 --> 00:05:55,769
back on the machines so we focus a lot

00:05:53,789 --> 00:05:58,169
on data mining and data processing and a

00:05:55,769 --> 00:05:59,519
lot of this comes through initially

00:05:58,169 --> 00:06:01,649
high-throughput sequencing and image

00:05:59,519 --> 00:06:03,779
analysis so this is why we're so deeply

00:06:01,649 --> 00:06:05,249
embedded with groups like Illumina who

00:06:03,779 --> 00:06:07,439
creates some of this sequencing

00:06:05,249 --> 00:06:09,989
technology in nvidia nvidia heavily

00:06:07,439 --> 00:06:12,539
backs us for all of our image stuff so

00:06:09,989 --> 00:06:14,069
we are massively processing image data

00:06:12,539 --> 00:06:16,559
constantly we have groups that just take

00:06:14,069 --> 00:06:21,089
pictures of herds of animals going

00:06:16,559 --> 00:06:23,549
through the forests and stuff so we work

00:06:21,089 --> 00:06:26,309
very hard on creating an infrastructure

00:06:23,549 --> 00:06:28,499
that researchers can take an advantage

00:06:26,309 --> 00:06:30,509
of and they define the pathway forward

00:06:28,499 --> 00:06:32,639
one of the key points of this we

00:06:30,509 --> 00:06:36,149
understood was enabling users to use the

00:06:32,639 --> 00:06:37,979
infrastructure without having to involve

00:06:36,149 --> 00:06:39,629
themselves with compiling or dealing

00:06:37,979 --> 00:06:42,059
with software so literally we are

00:06:39,629 --> 00:06:43,889
lowering the activation energy for users

00:06:42,059 --> 00:06:46,649
to take advantage of this hardware by

00:06:43,889 --> 00:06:50,129
compiling the tools for them we were

00:06:46,649 --> 00:06:51,719
able to put over 4,000 programs on our

00:06:50,129 --> 00:06:53,339
standard research cluster and as we

00:06:51,719 --> 00:06:54,660
brought online the power we realized we

00:06:53,339 --> 00:06:56,970
need to do the same thing over there

00:06:54,660 --> 00:06:59,010
and so we began this process with an

00:06:56,970 --> 00:07:01,590
undergraduate who had peaked $10 an hour

00:06:59,010 --> 00:07:03,600
this is how easy it is to get this stuff

00:07:01,590 --> 00:07:05,280
to work and he just sat for a month or

00:07:03,600 --> 00:07:07,590
two on compiling the software tools and

00:07:05,280 --> 00:07:08,270
he came up to 2000 programs in about two

00:07:07,590 --> 00:07:10,920
months

00:07:08,270 --> 00:07:13,380
all right that's that's how easy it was

00:07:10,920 --> 00:07:14,550
this student then continued on and

00:07:13,380 --> 00:07:16,830
started working with IBM and I'll talk

00:07:14,550 --> 00:07:19,290
about that a little bit later we have

00:07:16,830 --> 00:07:21,300
computational staff that will sit there

00:07:19,290 --> 00:07:22,950
and help our researchers bring online

00:07:21,300 --> 00:07:25,890
the tools that they need compile the

00:07:22,950 --> 00:07:28,680
software and we donate that time okay so

00:07:25,890 --> 00:07:30,300
that is what enables our users this is

00:07:28,680 --> 00:07:32,340
how our users don't even know that

00:07:30,300 --> 00:07:34,590
they're using power they can just submit

00:07:32,340 --> 00:07:38,910
jobs and it finds the right stuff and it

00:07:34,590 --> 00:07:40,170
gets it done let's see so let's talk

00:07:38,910 --> 00:07:44,010
about choosing the proper operating

00:07:40,170 --> 00:07:45,750
system so in research for us it's all

00:07:44,010 --> 00:07:48,210
linings we don't we don't even have

00:07:45,750 --> 00:07:49,710
Windows we have Windows to run some some

00:07:48,210 --> 00:07:53,550
pieces of data acquisition that's about

00:07:49,710 --> 00:07:56,100
it and right now there was a big big big

00:07:53,550 --> 00:07:58,560
change for us that came through with the

00:07:56,100 --> 00:08:00,150
power and this was little endian we

00:07:58,560 --> 00:08:02,460
really were not interested in talking

00:08:00,150 --> 00:08:04,380
about power because of the fact that so

00:08:02,460 --> 00:08:06,180
many of the software packages were

00:08:04,380 --> 00:08:08,820
written in a context of little-endian

00:08:06,180 --> 00:08:11,040
a little endian allowed us when we moved

00:08:08,820 --> 00:08:12,900
to power 8 to actually start embracing

00:08:11,040 --> 00:08:14,880
every single piece of open-source

00:08:12,900 --> 00:08:18,600
research software and watch it work

00:08:14,880 --> 00:08:20,669
without any effort or any anytime and so

00:08:18,600 --> 00:08:22,290
this one piece I think is the

00:08:20,669 --> 00:08:24,930
fundamental reason why everybody should

00:08:22,290 --> 00:08:26,940
start moving on to power platform we can

00:08:24,930 --> 00:08:31,080
take advantage of this at little or no

00:08:26,940 --> 00:08:32,729
effort big endian was a was the big

00:08:31,080 --> 00:08:35,789
separation we had back in the day with

00:08:32,729 --> 00:08:38,610
AIX and and i come from that time I ran

00:08:35,789 --> 00:08:40,080
our six thousands I remember I acts and

00:08:38,610 --> 00:08:42,690
and ultimately it was a phenomenal

00:08:40,080 --> 00:08:45,180
platform but it didn't hold through time

00:08:42,690 --> 00:08:47,970
and we had to move on and I had to wait

00:08:45,180 --> 00:08:49,740
for IBM to come forward with this

00:08:47,970 --> 00:08:52,170
solution this solution also happened

00:08:49,740 --> 00:08:54,770
from Apple so Apple gave up and went to

00:08:52,170 --> 00:08:57,150
the Intel processor and it fundamentally

00:08:54,770 --> 00:08:59,310
revolutionized how Apple was selling

00:08:57,150 --> 00:09:03,089
their product this is the key behind

00:08:59,310 --> 00:09:05,010
everything so when we saw this happen

00:09:03,089 --> 00:09:07,170
the CG RB became very excited and

00:09:05,010 --> 00:09:08,490
thought wow maybe we can actually use

00:09:07,170 --> 00:09:09,810
these machines for researchers

00:09:08,490 --> 00:09:11,280
maybe researchers can really take

00:09:09,810 --> 00:09:13,380
advantage of this bleeding edge hardware

00:09:11,280 --> 00:09:14,970
and move in new directions and finally

00:09:13,380 --> 00:09:16,590
go back to our heterogeneous environment

00:09:14,970 --> 00:09:23,310
we really don't want to be sitting in

00:09:16,590 --> 00:09:25,200
the land of one architecture so we

00:09:23,310 --> 00:09:28,320
ultimately are a big cent to less shop

00:09:25,200 --> 00:09:30,150
we also run Ubuntu we really don't care

00:09:28,320 --> 00:09:32,490
our users tell us what we want to do we

00:09:30,150 --> 00:09:34,440
try and conform our infrastructure

00:09:32,490 --> 00:09:36,180
around our users rather than asking our

00:09:34,440 --> 00:09:38,610
users to fit themselves into my

00:09:36,180 --> 00:09:42,510
infrastructure this is how we enable

00:09:38,610 --> 00:09:44,790
people so let's talk about compiling

00:09:42,510 --> 00:09:46,140
software I'm gonna actually go through

00:09:44,790 --> 00:09:48,120
an example and we're gonna actually do

00:09:46,140 --> 00:09:49,710
it because it's that easy it is so easy

00:09:48,120 --> 00:09:54,060
it was dumbfounding you can pay someone

00:09:49,710 --> 00:09:56,820
$10 an hour to do it all right so start

00:09:54,060 --> 00:09:58,710
at the beginning back in the day there

00:09:56,820 --> 00:10:00,210
was this thing called Auto conf and we

00:09:58,710 --> 00:10:02,520
all kind of forgot about it because of

00:10:00,210 --> 00:10:04,470
the fact that we became so Intel centric

00:10:02,520 --> 00:10:06,900
that everybody just started off at dot

00:10:04,470 --> 00:10:09,000
slash configure make make install but we

00:10:06,900 --> 00:10:10,290
really had this original concept of Auto

00:10:09,000 --> 00:10:12,540
conf where we had to identify the

00:10:10,290 --> 00:10:13,920
architecture and so if we actually just

00:10:12,540 --> 00:10:16,530
went back and I told the student to type

00:10:13,920 --> 00:10:18,630
the word Auto call everything started to

00:10:16,530 --> 00:10:21,120
work it was amazing it was because we

00:10:18,630 --> 00:10:23,460
were not Intel so in the end when we

00:10:21,120 --> 00:10:25,740
look at stuff here's two examples you

00:10:23,460 --> 00:10:27,480
got an x86 and a PowerPC they're running

00:10:25,740 --> 00:10:30,030
the exact same operating system how

00:10:27,480 --> 00:10:32,310
phenomenal is that it's phenomenal for

00:10:30,030 --> 00:10:35,220
my users look I got the same version of

00:10:32,310 --> 00:10:37,530
GCC everything is the same you literally

00:10:35,220 --> 00:10:40,410
are working under the same operating

00:10:37,530 --> 00:10:42,900
space Auto comp is the same everything's

00:10:40,410 --> 00:10:44,460
the same I mean there's some little

00:10:42,900 --> 00:10:46,680
tidbits along the line but in the end

00:10:44,460 --> 00:10:50,790
you are basically able to just buy the

00:10:46,680 --> 00:10:54,030
Machine get out there and start going so

00:10:50,790 --> 00:10:58,800
there are some problems we noticed that

00:10:54,030 --> 00:11:02,880
some of the x86 stuff had Intel conceded

00:10:58,800 --> 00:11:05,880
in the IDE sse sse2 memory out of stuff

00:11:02,880 --> 00:11:08,570
so in the end users and developers had

00:11:05,880 --> 00:11:11,160
no idea that they were actually putting

00:11:08,570 --> 00:11:13,500
dependencies that were Intel specific

00:11:11,160 --> 00:11:16,110
into their code ok and we've been able

00:11:13,500 --> 00:11:17,850
to communicate to some of those groups

00:11:16,110 --> 00:11:19,860
and then show them that their impact

00:11:17,850 --> 00:11:20,910
factors been lost because they won't be

00:11:19,860 --> 00:11:22,150
able to take advantage of new

00:11:20,910 --> 00:11:23,620
technologies and

00:11:22,150 --> 00:11:25,090
been going through recoding it and

00:11:23,620 --> 00:11:26,890
actually bringing their code in

00:11:25,090 --> 00:11:30,100
compliance with working across multiple

00:11:26,890 --> 00:11:33,700
architectures and not just power even

00:11:30,100 --> 00:11:35,320
raspberry PI's arm everything okay

00:11:33,700 --> 00:11:36,940
listen yeah well I can't go back let's

00:11:35,320 --> 00:11:38,410
keep going forward there was also one

00:11:36,940 --> 00:11:40,780
little option that we realized is that

00:11:38,410 --> 00:11:43,030
lots of the coders still had to be able

00:11:40,780 --> 00:11:45,370
to put something in there that allowed

00:11:43,030 --> 00:11:46,930
it to understand that there was a build

00:11:45,370 --> 00:11:49,660
type and so we actually use the build

00:11:46,930 --> 00:11:51,970
type in there of PowerPC 64 so we're

00:11:49,660 --> 00:11:53,800
going to run through an actual compile

00:11:51,970 --> 00:11:55,900
here on both sides doing the exact same

00:11:53,800 --> 00:11:58,900
program and show you that it basically

00:11:55,900 --> 00:12:01,720
looks exactly the same this is what

00:11:58,900 --> 00:12:03,820
really excited us when we realized that

00:12:01,720 --> 00:12:05,440
we could just sit there and get all of

00:12:03,820 --> 00:12:08,440
our software ported on to this new

00:12:05,440 --> 00:12:10,300
architecture my users just started using

00:12:08,440 --> 00:12:12,280
it and I'm going to talk a little later

00:12:10,300 --> 00:12:15,550
in the afternoon about how we created a

00:12:12,280 --> 00:12:18,040
truly heterogeneous infrastructure for

00:12:15,550 --> 00:12:20,050
my users to just blindly submit jobs

00:12:18,040 --> 00:12:22,120
they don't care what machine it goes to

00:12:20,050 --> 00:12:23,920
because all the software is already

00:12:22,120 --> 00:12:24,520
there in it as I believe intent afire

00:12:23,920 --> 00:12:26,110
Kotecha

00:12:24,520 --> 00:12:29,530
and give them the correct environment

00:12:26,110 --> 00:12:32,650
variables okay so as we work through

00:12:29,530 --> 00:12:39,360
here we actually are just building the

00:12:32,650 --> 00:12:41,890
same piece of software and we keep going

00:12:39,360 --> 00:12:47,310
you get more threads on the other power

00:12:41,890 --> 00:12:50,890
so it gets to go faster as always our

00:12:47,310 --> 00:12:52,450
users submitted jobs and as their job

00:12:50,890 --> 00:12:54,610
started going they realized very quickly

00:12:52,450 --> 00:12:56,710
pay these power machines are finishing

00:12:54,610 --> 00:12:58,720
the jobs a lot faster and we could send

00:12:56,710 --> 00:13:01,510
a lot more jobs at them and so the

00:12:58,720 --> 00:13:03,070
scaling really started to occur my users

00:13:01,510 --> 00:13:05,680
started thinking about how to take

00:13:03,070 --> 00:13:07,720
advantage of this space and change the

00:13:05,680 --> 00:13:10,300
way that they did their research so

00:13:07,720 --> 00:13:11,860
there you go it all works and that's

00:13:10,300 --> 00:13:14,830
literally the amount of time it took my

00:13:11,860 --> 00:13:18,400
student and so he just sat there doing

00:13:14,830 --> 00:13:21,700
this for hours and he had a lot of fun

00:13:18,400 --> 00:13:24,430
with it in the end in many cases it's

00:13:21,700 --> 00:13:26,170
really just this easy we just go through

00:13:24,430 --> 00:13:29,350
and we just keep compiling software we

00:13:26,170 --> 00:13:31,450
continue forward to still to this day 70

00:13:29,350 --> 00:13:32,800
to 80% just compiled with cake they

00:13:31,450 --> 00:13:35,230
don't they don't take any effort

00:13:32,800 --> 00:13:37,269
at all ones that have problems are x86

00:13:35,230 --> 00:13:42,189
specific and their Intel libraries that

00:13:37,269 --> 00:13:44,259
are MMX or SSE many times threading is

00:13:42,189 --> 00:13:48,639
really where you get the advantage from

00:13:44,259 --> 00:13:51,759
IBM I perform from the power IBM and and

00:13:48,639 --> 00:13:54,309
and the group ultimately took my student

00:13:51,759 --> 00:13:56,199
as an intern and worked with him to take

00:13:54,309 --> 00:13:58,689
all those 2000 programs and create build

00:13:56,199 --> 00:14:00,519
scripts so now any of the researchers in

00:13:58,689 --> 00:14:02,049
the research community can just pull

00:14:00,519 --> 00:14:04,899
down build scripts and watch the tools

00:14:02,049 --> 00:14:06,970
work on power so we really kind of

00:14:04,899 --> 00:14:08,499
broaden the impact around the research

00:14:06,970 --> 00:14:11,799
community to start taking advantage of

00:14:08,499 --> 00:14:13,449
this technology we just started

00:14:11,799 --> 00:14:14,860
deploying power8 and our infrastructure

00:14:13,449 --> 00:14:16,089
because our users loved it so much and

00:14:14,860 --> 00:14:17,139
they realized that they didn't have to

00:14:16,089 --> 00:14:19,239
do anything to actually take advantage

00:14:17,139 --> 00:14:21,749
of it and we actually by the Minsky

00:14:19,239 --> 00:14:25,119
machines now and we really enjoy having

00:14:21,749 --> 00:14:26,589
GPUs that are part of the system bus so

00:14:25,119 --> 00:14:28,119
that that way we can actually move data

00:14:26,589 --> 00:14:32,049
across them in ways we've never done

00:14:28,119 --> 00:14:35,709
before we also tested things in the capi

00:14:32,049 --> 00:14:37,660
space so we tested some stuff where we

00:14:35,709 --> 00:14:40,119
were able to take advantage of this capi

00:14:37,660 --> 00:14:42,790
technology and we were able to doing we

00:14:40,119 --> 00:14:45,220
we actually worked on a gzip card where

00:14:42,790 --> 00:14:47,529
we were able to take 70 hours of gzip

00:14:45,220 --> 00:14:48,939
work that was CPU based and turned it

00:14:47,529 --> 00:14:51,429
into less than an hour's worth of time

00:14:48,939 --> 00:14:54,279
on a card this is the bandwidth we're

00:14:51,429 --> 00:14:55,720
talking about this reinvents my file

00:14:54,279 --> 00:14:58,029
space so my users don't have to keep

00:14:55,720 --> 00:15:01,360
spending money it's incredible the band

00:14:58,029 --> 00:15:03,100
went through these things the NV link so

00:15:01,360 --> 00:15:05,920
NV link allowed us to finally start

00:15:03,100 --> 00:15:07,499
moving data through the GPUs and putting

00:15:05,920 --> 00:15:09,699
the GPU onto the motherboard

00:15:07,499 --> 00:15:12,189
fundamentally changed our interaction

00:15:09,699 --> 00:15:14,230
with data I actually am able to put 60

00:15:12,189 --> 00:15:15,999
terabytes of data through GPUs like it's

00:15:14,230 --> 00:15:18,999
nothing at this point in time so it

00:15:15,999 --> 00:15:20,110
really brought the GPU forward and into

00:15:18,999 --> 00:15:23,579
a position where we can use it for

00:15:20,110 --> 00:15:25,869
processing of real large data sets

00:15:23,579 --> 00:15:28,869
finally I worked very closely with Lance

00:15:25,869 --> 00:15:31,029
in oh s you OSL who's been a big member

00:15:28,869 --> 00:15:33,189
of open power for a long time and lance

00:15:31,029 --> 00:15:36,189
and I have been working very hard to

00:15:33,189 --> 00:15:37,419
create an environment for all developers

00:15:36,189 --> 00:15:39,730
in the entire world

00:15:37,419 --> 00:15:41,410
to take advantage of this platform so we

00:15:39,730 --> 00:15:44,019
actually brought online three Minsky

00:15:41,410 --> 00:15:45,980
machines and Lance and I have deployed

00:15:44,019 --> 00:15:47,570
them with p1 hundreds on them

00:15:45,980 --> 00:15:49,130
so developers in the research community

00:15:47,570 --> 00:15:51,020
in the general community can just start

00:15:49,130 --> 00:15:52,670
porting all their software and we have a

00:15:51,020 --> 00:15:57,950
lot of groups in this space doing this

00:15:52,670 --> 00:16:00,020
and ultimately we can get people on the

00:15:57,950 --> 00:16:03,920
GPUs we can get them into the copy we

00:16:00,020 --> 00:16:05,210
got envy at nvme flashcards in there we

00:16:03,920 --> 00:16:06,770
have all kinds of stuff we have them

00:16:05,210 --> 00:16:09,890
connected with Mellanox switches where

00:16:06,770 --> 00:16:12,650
we can actually move the data across the

00:16:09,890 --> 00:16:17,150
switch between the nvm es it's really

00:16:12,650 --> 00:16:19,580
impressive so groups like julia

00:16:17,150 --> 00:16:21,950
jean-marc diamond we even have Unova

00:16:19,580 --> 00:16:24,290
lots and lots of groups have actually

00:16:21,950 --> 00:16:25,610
come in and actually started developing

00:16:24,290 --> 00:16:28,420
on this platform and considered a

00:16:25,610 --> 00:16:32,420
continuous development environment

00:16:28,420 --> 00:16:34,760
so in summary computational science

00:16:32,420 --> 00:16:35,900
really does run a gamut of research we

00:16:34,760 --> 00:16:37,610
don't really know where we're gonna go

00:16:35,900 --> 00:16:39,770
tomorrow and that's what's exciting

00:16:37,610 --> 00:16:41,660
that's what the pilgrim power platform

00:16:39,770 --> 00:16:43,190
provides us is a pathway to know that

00:16:41,660 --> 00:16:47,150
we're going to succeed regardless of

00:16:43,190 --> 00:16:48,890
what comes at me so new technologies can

00:16:47,150 --> 00:16:50,450
change computational science this is

00:16:48,890 --> 00:16:52,190
what we're trying to do we don't want to

00:16:50,450 --> 00:16:55,340
become stagnant I have to move forward

00:16:52,190 --> 00:16:57,680
ok new technologies require changes and

00:16:55,340 --> 00:16:59,030
tools and hardware this is what we do we

00:16:57,680 --> 00:17:01,010
have to be able to implement this new

00:16:59,030 --> 00:17:03,770
hardware and it's our responsibility to

00:17:01,010 --> 00:17:06,290
lower that activation energy and allow

00:17:03,770 --> 00:17:07,280
the users to take advantage of it almost

00:17:06,290 --> 00:17:12,199
like they don't even know they're in

00:17:07,280 --> 00:17:14,709
there ok so with that I will invite

00:17:12,199 --> 00:17:17,510
Scott Schultz from Mellanox up and

00:17:14,709 --> 00:17:19,630
hopefully he can elaborate some more on

00:17:17,510 --> 00:17:19,630

YouTube URL: https://www.youtube.com/watch?v=-hq8utGE-oU


