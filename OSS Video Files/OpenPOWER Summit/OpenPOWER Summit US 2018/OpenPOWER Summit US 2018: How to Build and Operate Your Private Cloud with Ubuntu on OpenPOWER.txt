Title: OpenPOWER Summit US 2018: How to Build and Operate Your Private Cloud with Ubuntu on OpenPOWER
Publication date: 2018-04-03
Playlist: OpenPOWER Summit US 2018
Description: 
	OpenPOWER member from Canonical discusses the roles OpenPOWER servers can play in the cloud at OpenPOWER Summit 2018.

Presenter:
- Ivan DoboÅ¡, Solutions Architect, Canonical

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:00,060 --> 00:00:03,540
okay so let me start good afternoon and

00:00:02,580 --> 00:00:05,580
thank you for coming

00:00:03,540 --> 00:00:07,049
my name is Yvonne dobisch I'm a

00:00:05,580 --> 00:00:09,599
Solutions Architect with the canonical

00:00:07,049 --> 00:00:13,710
the company behind open to Linux

00:00:09,599 --> 00:00:15,900
distribution and today I will discuss

00:00:13,710 --> 00:00:18,480
with you what are the solutions we are

00:00:15,900 --> 00:00:25,050
bringing to you we which are now running

00:00:18,480 --> 00:00:26,910
also on PPC c64 le architecture so you

00:00:25,050 --> 00:00:32,579
can use them to build and operate your

00:00:26,910 --> 00:00:35,370
private in hybrid clouds so before going

00:00:32,579 --> 00:00:37,980
to the technology let's just mention

00:00:35,370 --> 00:00:40,770
where we are in terms of Ubuntu

00:00:37,980 --> 00:00:43,590
canonical and open powder foundation so

00:00:40,770 --> 00:00:45,960
I work for a company canonical and we

00:00:43,590 --> 00:00:50,700
are the platinum sponsor of open powder

00:00:45,960 --> 00:00:52,610
foundation and our major open project is

00:00:50,700 --> 00:00:58,530
Ubuntu obviously the Linux distribution

00:00:52,610 --> 00:01:01,100
so a bit about history in April 2014 the

00:00:58,530 --> 00:01:03,750
Ubuntu 1404 came to the market

00:01:01,100 --> 00:01:09,060
supporting not only exactly 6 an arm but

00:01:03,750 --> 00:01:12,450
not now also IBM Power Architecture 1404

00:01:09,060 --> 00:01:15,299
as you see is mark as LTS LTS means a

00:01:12,450 --> 00:01:17,729
long term support which is our Ubuntu

00:01:15,299 --> 00:01:22,140
release which you will be supported for

00:01:17,729 --> 00:01:24,060
five years and more as you might know a

00:01:22,140 --> 00:01:27,420
burrowed map every six months there is a

00:01:24,060 --> 00:01:30,689
new release of Ubuntu all those releases

00:01:27,420 --> 00:01:33,240
are supported for nine months while the

00:01:30,689 --> 00:01:36,000
LTS versions are supported for five

00:01:33,240 --> 00:01:39,180
years and more every six months on the

00:01:36,000 --> 00:01:41,159
same date that the release parity on the

00:01:39,180 --> 00:01:43,710
same date we have the new one to release

00:01:41,159 --> 00:01:48,060
available across hardware platforms and

00:01:43,710 --> 00:01:50,220
we do support arm x86 power architecture

00:01:48,060 --> 00:01:53,490
and also astronautics architecture these

00:01:50,220 --> 00:01:56,520
are the scale up IBM servers so the

00:01:53,490 --> 00:02:00,229
upcoming 18:04 will be the one to

00:01:56,520 --> 00:02:03,500
support power 9 while 1404 does support

00:02:00,229 --> 00:02:03,500
power 8

00:02:04,909 --> 00:02:09,200
and it's not only a wanton but ever

00:02:07,159 --> 00:02:11,750
foolish software ecosystem we are

00:02:09,200 --> 00:02:14,989
bringing to do power I'm saying our

00:02:11,750 --> 00:02:18,260
software ecosystem all those are open

00:02:14,989 --> 00:02:21,530
source projects besides one exception

00:02:18,260 --> 00:02:24,980
which is landscape that's the management

00:02:21,530 --> 00:02:27,620
tool it's what you might know redhead

00:02:24,980 --> 00:02:31,810
satellite or Susan manager so this is

00:02:27,620 --> 00:02:34,459
our tool for managing your your servers

00:02:31,810 --> 00:02:37,220
otherwise all the other pieces here are

00:02:34,459 --> 00:02:41,150
hundred percent open-source some of the

00:02:37,220 --> 00:02:43,010
projects are led by canonical but all of

00:02:41,150 --> 00:02:46,060
them are open source and everybody's

00:02:43,010 --> 00:02:48,530
will come to the party to contribute I

00:02:46,060 --> 00:02:50,750
didn't I think it's also worth to

00:02:48,530 --> 00:02:52,579
mention our other model of doing

00:02:50,750 --> 00:02:54,650
business is that bit we don't have

00:02:52,579 --> 00:02:58,040
license products all the software is

00:02:54,650 --> 00:03:00,379
free and commercial support is optional

00:02:58,040 --> 00:03:05,769
component so you can but you don't need

00:03:00,379 --> 00:03:08,120
to go with commercial support from us so

00:03:05,769 --> 00:03:11,389
actually this one is kind of the summary

00:03:08,120 --> 00:03:15,470
of all the cloud and containers related

00:03:11,389 --> 00:03:18,170
projects we believe in and let me now

00:03:15,470 --> 00:03:20,299
start from the most important part if

00:03:18,170 --> 00:03:22,609
for this discussion which is the bare

00:03:20,299 --> 00:03:25,549
metal support so what we do in terms of

00:03:22,609 --> 00:03:27,079
supporting the power servers I will just

00:03:25,549 --> 00:03:28,519
say power servers by the diamond of

00:03:27,079 --> 00:03:33,220
copiously products from different

00:03:28,519 --> 00:03:36,709
vendors but based on power architecture

00:03:33,220 --> 00:03:37,549
so there is a project called mass metal

00:03:36,709 --> 00:03:40,760
as a service

00:03:37,549 --> 00:03:45,530
you see mass dot IO is the home page of

00:03:40,760 --> 00:03:47,750
the project and from the administrator

00:03:45,530 --> 00:03:49,010
of the machines what it does so we'd

00:03:47,750 --> 00:03:51,049
have the tool like this what do you have

00:03:49,010 --> 00:03:52,970
to do we do you have a new server you

00:03:51,049 --> 00:03:54,560
put it on your data center you plug it

00:03:52,970 --> 00:03:56,389
to your infrastructure in terms of

00:03:54,560 --> 00:03:58,810
electricity and networking may be

00:03:56,389 --> 00:04:01,160
external storage if there is some and

00:03:58,810 --> 00:04:03,799
then in some way you have to provision

00:04:01,160 --> 00:04:06,680
operating system into it right into all

00:04:03,799 --> 00:04:08,980
times we came with the CD now it may be

00:04:06,680 --> 00:04:11,450
USB stick or just pixie boot it somehow

00:04:08,980 --> 00:04:15,049
you will configure your network in terms

00:04:11,450 --> 00:04:16,910
of DHCP DNS and then you take care about

00:04:15,049 --> 00:04:18,680
that server and maybe from time to time

00:04:16,910 --> 00:04:20,120
you updates and patches

00:04:18,680 --> 00:04:23,630
maybe from time to time you have to

00:04:20,120 --> 00:04:27,949
rebel the server again so this is what

00:04:23,630 --> 00:04:30,520
can be fully autumn automated by using

00:04:27,949 --> 00:04:32,810
mass so this is what mass is doing for

00:04:30,520 --> 00:04:36,199
administrators helping you with the

00:04:32,810 --> 00:04:39,259
management of the server's and then uses

00:04:36,199 --> 00:04:42,919
of mass can consider mass as a

00:04:39,259 --> 00:04:45,259
bare-metal api so as you have api's to

00:04:42,919 --> 00:04:47,740
your Amazon or any other public cloud

00:04:45,259 --> 00:04:51,440
provider you have also now available

00:04:47,740 --> 00:04:56,349
api's to work video on prem hardware

00:04:51,440 --> 00:04:56,349
infrastructure through mass interfaces

00:04:56,470 --> 00:05:02,539
so this is the real issue and we compare

00:04:59,570 --> 00:05:05,810
our own primary public clouds how long

00:05:02,539 --> 00:05:10,669
it going to take to in such instantiate

00:05:05,810 --> 00:05:12,500
a new instance in the public cloud you

00:05:10,669 --> 00:05:13,759
how do you do that no nothing the

00:05:12,500 --> 00:05:15,590
interface is you do it with a piece of

00:05:13,759 --> 00:05:18,410
script and it will take you several

00:05:15,590 --> 00:05:20,630
minutes to have your new server in

00:05:18,410 --> 00:05:23,060
public cloud up and running right and

00:05:20,630 --> 00:05:24,440
now we can discuss if this X is two

00:05:23,060 --> 00:05:26,510
minutes or five minutes but we

00:05:24,440 --> 00:05:28,490
definitely know it's in several minutes

00:05:26,510 --> 00:05:31,130
how long it's going to take you on your

00:05:28,490 --> 00:05:33,919
own Prem infrastructure if it would

00:05:31,130 --> 00:05:37,400
consider the end-to-end cycle starting

00:05:33,919 --> 00:05:40,130
with the request through procurement

00:05:37,400 --> 00:05:41,990
till the physical installation and

00:05:40,130 --> 00:05:43,940
deployment operating system it may be

00:05:41,990 --> 00:05:46,729
still will be X but definitely not

00:05:43,940 --> 00:05:51,259
minutes may be hours days weeks months

00:05:46,729 --> 00:05:53,630
depends of your organization so so this

00:05:51,259 --> 00:05:56,300
is what mass is bringing in the game to

00:05:53,630 --> 00:06:00,199
shrinking then time using the automation

00:05:56,300 --> 00:06:03,020
of course mass did not help you to speed

00:06:00,199 --> 00:06:06,169
up your procurement cycle the point here

00:06:03,020 --> 00:06:08,630
is to operate your on-prem

00:06:06,169 --> 00:06:10,940
infrastructure with the efficiency of

00:06:08,630 --> 00:06:13,940
public cloud maybe to repurpose the

00:06:10,940 --> 00:06:16,070
server as you need automatically and so

00:06:13,940 --> 00:06:18,199
on so in ideal world you will see your

00:06:16,070 --> 00:06:22,009
server only once when you plug it on the

00:06:18,199 --> 00:06:25,430
floor or in the rec otherwise you do

00:06:22,009 --> 00:06:28,130
everything with tools like maths so

00:06:25,430 --> 00:06:30,169
these are the several steps through the

00:06:28,130 --> 00:06:32,000
that lifecycle let me drive you through

00:06:30,169 --> 00:06:33,890
some screenshots I'm not going

00:06:32,000 --> 00:06:35,180
to do the live demo I was asked better

00:06:33,890 --> 00:06:37,850
not to do it cause of networking

00:06:35,180 --> 00:06:40,010
potential issues but let's at least

00:06:37,850 --> 00:06:43,850
Drive you through the major steps here

00:06:40,010 --> 00:06:46,970
so mass does have a concept of high

00:06:43,850 --> 00:06:49,130
availability built in for that we have

00:06:46,970 --> 00:06:52,160
the high available concept of origin

00:06:49,130 --> 00:06:55,280
controllers and the region controller

00:06:52,160 --> 00:06:57,860
can talk to several rec controllers so

00:06:55,280 --> 00:07:02,390
on each rec you normally would run one

00:06:57,860 --> 00:07:04,040
rec controller ideally maybe in the top

00:07:02,390 --> 00:07:05,780
of the recs which there are already some

00:07:04,040 --> 00:07:08,450
devices available in the market running

00:07:05,780 --> 00:07:11,960
mass inside top of the Rex which and

00:07:08,450 --> 00:07:17,210
then that rec controller is managing the

00:07:11,960 --> 00:07:19,880
notes inside that rack so you see that

00:07:17,210 --> 00:07:21,980
the copy of images you would potentially

00:07:19,880 --> 00:07:23,720
like to deploy to those nodes and we

00:07:21,980 --> 00:07:25,340
will discuss those images where they are

00:07:23,720 --> 00:07:28,460
coming from and how you can build your

00:07:25,340 --> 00:07:32,950
own image if needed those images would

00:07:28,460 --> 00:07:36,370
reside in the rec controller while

00:07:32,950 --> 00:07:40,940
region controller will provide the

00:07:36,370 --> 00:07:44,840
services of DNS Network time syslog and

00:07:40,940 --> 00:07:51,440
proxy and so on so that's the high-level

00:07:44,840 --> 00:07:54,080
concept then in the end math should when

00:07:51,440 --> 00:07:56,479
you use mass you will inform us about

00:07:54,080 --> 00:08:00,050
all your servers and your networking

00:07:56,479 --> 00:08:05,479
configuration so here is an example of

00:08:00,050 --> 00:08:07,430
two fabrics we on each there there are

00:08:05,479 --> 00:08:11,330
no villains activated and there are

00:08:07,430 --> 00:08:13,430
several subnets there so this way you

00:08:11,330 --> 00:08:17,590
have the inventory of your servers and

00:08:13,430 --> 00:08:20,330
networks in one tool and then you can

00:08:17,590 --> 00:08:21,979
instruct mass that if each time you

00:08:20,330 --> 00:08:24,200
would deploy an operating system to the

00:08:21,979 --> 00:08:25,550
particular server you can influence to

00:08:24,200 --> 00:08:27,200
which network that server will be

00:08:25,550 --> 00:08:30,160
connected so mass can do it

00:08:27,200 --> 00:08:30,160
automatically for you

00:08:30,880 --> 00:08:36,380
so this is what when configuring a

00:08:33,830 --> 00:08:38,570
specific node here on this example you

00:08:36,380 --> 00:08:41,390
see there are several networking

00:08:38,570 --> 00:08:43,219
interfaces and as you see we do not be

00:08:41,390 --> 00:08:45,230
lonely with physical networking

00:08:43,219 --> 00:08:47,600
interfaces but we also support the

00:08:45,230 --> 00:08:49,940
a linux networking concepts like bridges

00:08:47,600 --> 00:08:51,710
and bones so you can instruct mass that

00:08:49,940 --> 00:08:54,770
every time that operating system would

00:08:51,710 --> 00:08:58,820
be deployed a bond or bridge will be

00:08:54,770 --> 00:09:01,520
created inside that operating system so

00:08:58,820 --> 00:09:04,100
that was a bit about networking and of

00:09:01,520 --> 00:09:08,630
course we do support the protocols like

00:09:04,100 --> 00:09:11,750
DHCP or you can you can instruct mass to

00:09:08,630 --> 00:09:14,270
assign the IP addresses based on some

00:09:11,750 --> 00:09:16,190
internal algorithm not to use the HCP

00:09:14,270 --> 00:09:18,170
you can statically allocated I P

00:09:16,190 --> 00:09:19,640
addresses you can inform us about the

00:09:18,170 --> 00:09:23,210
other devices you have on the network

00:09:19,640 --> 00:09:25,220
like routers switches so mass would

00:09:23,210 --> 00:09:31,160
never allocate that particular IP

00:09:25,220 --> 00:09:33,920
address to one of the nodes this is an

00:09:31,160 --> 00:09:39,890
and the next step is about allocating

00:09:33,920 --> 00:09:44,750
the disk space to the nodes again when

00:09:39,890 --> 00:09:46,670
you put the new node in the rec based on

00:09:44,750 --> 00:09:50,540
the type of the node mass will either

00:09:46,670 --> 00:09:53,240
sense it or you will manually instruct

00:09:50,540 --> 00:09:55,970
mass and put some information in the

00:09:53,240 --> 00:09:59,600
mass about what is this server about in

00:09:55,970 --> 00:10:02,890
terms of what kind of BM cities and IP

00:09:59,600 --> 00:10:06,410
address on which the BMC is running and

00:10:02,890 --> 00:10:09,200
then mass will run kind of inventory of

00:10:06,410 --> 00:10:11,870
that server commissioning so after that

00:10:09,200 --> 00:10:14,150
process mass will fully understand what

00:10:11,870 --> 00:10:16,160
is the hardware about not only in terms

00:10:14,150 --> 00:10:18,830
of course and memory but also in terms

00:10:16,160 --> 00:10:21,680
of network interfaces and and disks

00:10:18,830 --> 00:10:25,190
inside so must now have the info about

00:10:21,680 --> 00:10:27,650
the node and you can create your

00:10:25,190 --> 00:10:30,020
partitioning scheme of your disks here

00:10:27,650 --> 00:10:32,420
so when the operating system will be

00:10:30,020 --> 00:10:37,790
deployed the correct scheme would be

00:10:32,420 --> 00:10:40,820
applied immediately so this is an

00:10:37,790 --> 00:10:44,240
example of the screen where I see that I

00:10:40,820 --> 00:10:47,210
have already some nodes node one two and

00:10:44,240 --> 00:10:49,180
three one and two running Ubuntu so

00:10:47,210 --> 00:10:53,090
these were already successfully deployed

00:10:49,180 --> 00:10:57,020
no number three just deploying Center s7

00:10:53,090 --> 00:10:58,610
and node 4 and five node 4 is there

00:10:57,020 --> 00:11:03,200
ready rating

00:10:58,610 --> 00:11:04,790
and note 5 is just testing itself so

00:11:03,200 --> 00:11:06,950
there are there is a set of scrip of

00:11:04,790 --> 00:11:10,370
mass so you can just say test yourself

00:11:06,950 --> 00:11:13,180
to check that the hardware is still okay

00:11:10,370 --> 00:11:15,860
that it's in the good health conditions

00:11:13,180 --> 00:11:18,980
ready for an operating system to be

00:11:15,860 --> 00:11:20,779
deployed to so the question now is what

00:11:18,980 --> 00:11:23,899
kind of operating systems we could

00:11:20,779 --> 00:11:27,050
deploy with mass so out of the box we do

00:11:23,899 --> 00:11:30,230
support Ubuntu releases and Centaurus

00:11:27,050 --> 00:11:32,240
this is what is coming out of the box so

00:11:30,230 --> 00:11:35,450
without any commercial support from

00:11:32,240 --> 00:11:38,510
canonical Ubuntu and CentOS can be

00:11:35,450 --> 00:11:42,050
deployed then we are ready to help you

00:11:38,510 --> 00:11:45,230
to build the redhead and Susa images but

00:11:42,050 --> 00:11:47,420
and windows images for exactly six but

00:11:45,230 --> 00:11:49,160
of course these are licensed products so

00:11:47,420 --> 00:11:51,709
for that we cannot just do it out of the

00:11:49,160 --> 00:11:53,660
box you have to provide us with some

00:11:51,709 --> 00:11:55,850
proof of the license and license number

00:11:53,660 --> 00:11:57,649
and so on so we can help you to build

00:11:55,850 --> 00:12:00,110
those images and some clients are

00:11:57,649 --> 00:12:02,810
interested in the custom images so that

00:12:00,110 --> 00:12:04,399
could be for example a specific redhead

00:12:02,810 --> 00:12:06,769
image with some middleware inside

00:12:04,399 --> 00:12:09,649
already so every time they deploy they

00:12:06,769 --> 00:12:13,310
deploy not only the the server itself

00:12:09,649 --> 00:12:17,029
but also with some pre-tested pre-loaded

00:12:13,310 --> 00:12:20,630
applications so for custom images and

00:12:17,029 --> 00:12:22,310
non Centaurus and Ubuntu images you

00:12:20,630 --> 00:12:24,980
would need to go in the commercial

00:12:22,310 --> 00:12:26,870
agreement with canonical and you would

00:12:24,980 --> 00:12:30,370
provide you with the tooling for

00:12:26,870 --> 00:12:30,370
creating those images

00:12:34,880 --> 00:12:39,589
so if imagine my mass is already up and

00:12:37,699 --> 00:12:43,790
running be having all the information

00:12:39,589 --> 00:12:46,519
about my servers and networking so now I

00:12:43,790 --> 00:12:48,589
can really using those api's mentioned

00:12:46,519 --> 00:12:51,050
at the beginning this is now my bare

00:12:48,589 --> 00:12:52,880
metal cloud so I can now make calls to

00:12:51,050 --> 00:12:55,940
the cloud like it was a public cloud

00:12:52,880 --> 00:12:58,160
saying find me a machine with these

00:12:55,940 --> 00:13:00,170
characteristics here in my example it's

00:12:58,160 --> 00:13:04,069
a find me a machine which is of the

00:13:00,170 --> 00:13:07,360
hardware architecture VP c64 so power

00:13:04,069 --> 00:13:10,940
architecture find me a note somewhere

00:13:07,360 --> 00:13:13,910
where there are GPUs inside and this and

00:13:10,940 --> 00:13:17,500
this size of the memory and so on and if

00:13:13,910 --> 00:13:20,180
you find such a node now deploy a

00:13:17,500 --> 00:13:22,459
specific operating system in that from

00:13:20,180 --> 00:13:26,029
those images which are which are there

00:13:22,459 --> 00:13:29,600
in mass so this is what mass is doing so

00:13:26,029 --> 00:13:32,360
how I can do it I can do it from math

00:13:29,600 --> 00:13:34,370
GUI I can do it from command line with

00:13:32,360 --> 00:13:36,050
mass command so this means also I can do

00:13:34,370 --> 00:13:39,740
it from any kind of scripting language

00:13:36,050 --> 00:13:42,139
so that's that CLI option but I can also

00:13:39,740 --> 00:13:43,639
use some tools which are available on

00:13:42,139 --> 00:13:47,209
the market which are able to consume

00:13:43,639 --> 00:13:50,269
those interfaces like chef and some

00:13:47,209 --> 00:13:52,910
clients are using ansible for deploying

00:13:50,269 --> 00:13:55,639
their stuff on top of mass cloud and we

00:13:52,910 --> 00:13:59,360
also provide another open-source

00:13:55,639 --> 00:14:04,699
software called juju which I will

00:13:59,360 --> 00:14:07,790
introduce to you soon so then once I

00:14:04,699 --> 00:14:10,189
build my mass bare-metal cloud I can

00:14:07,790 --> 00:14:12,380
it's to me is not the same concept as

00:14:10,189 --> 00:14:14,720
dealing with public cloud with a piece

00:14:12,380 --> 00:14:16,339
of script I can call my cloud asking

00:14:14,720 --> 00:14:18,050
give me an instance with the specific

00:14:16,339 --> 00:14:22,819
parameters with a specific operating

00:14:18,050 --> 00:14:24,880
system ok so that would be a bit kind of

00:14:22,819 --> 00:14:27,199
introduction to mass again math dot IO

00:14:24,880 --> 00:14:29,089
it's the web page where you can find

00:14:27,199 --> 00:14:32,329
more information again hundred-percent

00:14:29,089 --> 00:14:37,490
open-source project free to use course

00:14:32,329 --> 00:14:40,060
hardware architectures so now let me

00:14:37,490 --> 00:14:42,939
move to other piece of technology which

00:14:40,060 --> 00:14:46,910
later I will show you how we use it in

00:14:42,939 --> 00:14:49,850
building OpenStack from canonical

00:14:46,910 --> 00:14:53,260
and this is a piece of technology called

00:14:49,850 --> 00:14:56,900
lxd which we introduced as a fully

00:14:53,260 --> 00:15:03,200
supported option with Ubuntu 1604 so in

00:14:56,900 --> 00:15:05,690
April 2016 so what is Alex D so first of

00:15:03,200 --> 00:15:07,880
all let's talk about Alexi what is Alexi

00:15:05,690 --> 00:15:10,000
so as you might know alex is an

00:15:07,880 --> 00:15:13,310
abbreviation of Linux containers a

00:15:10,000 --> 00:15:15,980
technology which was born at IBM some

00:15:13,310 --> 00:15:18,290
years ago probably as an answer to

00:15:15,980 --> 00:15:20,210
Solaris zones which was the containers

00:15:18,290 --> 00:15:22,430
technology on Solaris operating system

00:15:20,210 --> 00:15:24,740
so it's a pretty cool technology and if

00:15:22,430 --> 00:15:27,520
you are familiar with docker which is a

00:15:24,740 --> 00:15:29,870
kind of defect to standard for

00:15:27,520 --> 00:15:33,170
applications in containers as of today

00:15:29,870 --> 00:15:36,110
the first docker was based on Alexi

00:15:33,170 --> 00:15:38,350
technology so doctor was actually kind

00:15:36,110 --> 00:15:41,390
of the way how you can consume Alexi

00:15:38,350 --> 00:15:43,550
technology in the in the nice way so we

00:15:41,390 --> 00:15:45,680
offering another way how you can consume

00:15:43,550 --> 00:15:50,210
Alekseev technology it's called lxd

00:15:45,680 --> 00:15:54,800
consider lxd is a LXE version 2 with D

00:15:50,210 --> 00:15:58,700
being the daemon so it's kind of roper

00:15:54,800 --> 00:16:00,560
around alexa technology giving you

00:15:58,700 --> 00:16:05,450
another experience have you can consume

00:16:00,560 --> 00:16:09,050
containers so from the very high level

00:16:05,450 --> 00:16:14,420
what is what is lxd so imagine lxd being

00:16:09,050 --> 00:16:16,430
a kind of hypervisor in quotes providing

00:16:14,420 --> 00:16:19,100
you not with virtual machines but with

00:16:16,430 --> 00:16:21,740
containers but those containers behave

00:16:19,100 --> 00:16:23,930
like virtual machines so we hope from

00:16:21,740 --> 00:16:26,900
your perspective from your from user

00:16:23,930 --> 00:16:29,180
experience every time I will say lxd

00:16:26,900 --> 00:16:32,690
give me one more container type of

00:16:29,180 --> 00:16:35,990
Ubuntu or type of Debian I will have of

00:16:32,690 --> 00:16:38,030
an impression I got a full virtual

00:16:35,990 --> 00:16:40,160
machine even if it's container but I

00:16:38,030 --> 00:16:42,770
will have a impression it's a virtual

00:16:40,160 --> 00:16:46,280
machine and I can use standard ways how

00:16:42,770 --> 00:16:48,710
to install some software inside inside

00:16:46,280 --> 00:16:52,610
that server so we don't want to I can

00:16:48,710 --> 00:16:55,160
just use up the install command with

00:16:52,610 --> 00:16:58,220
Centaurus that would be yum install

00:16:55,160 --> 00:17:01,400
whatever it is so it's a full machine

00:16:58,220 --> 00:17:04,380
kind of container

00:17:01,400 --> 00:17:06,750
any questions so far to that lxt

00:17:04,380 --> 00:17:09,480
code can be can be a bit confusing cause

00:17:06,750 --> 00:17:13,020
people really now having doctor in mind

00:17:09,480 --> 00:17:15,300
when we talking containers so let's let

00:17:13,020 --> 00:17:20,189
me explain it a bit better on on this

00:17:15,300 --> 00:17:25,939
chart so on this chart I got five open

00:17:20,189 --> 00:17:28,710
to house a two ABCD whatever may be e

00:17:25,939 --> 00:17:32,160
each of those is of course running Linux

00:17:28,710 --> 00:17:38,790
kernel and each of those is running also

00:17:32,160 --> 00:17:41,190
the lxd daemon and then each of those is

00:17:38,790 --> 00:17:43,560
running several Lexi machine containers

00:17:41,190 --> 00:17:46,890
here on this example how I can

00:17:43,560 --> 00:17:50,670
instantiate those containers so for that

00:17:46,890 --> 00:17:53,700
we have a legs the rest API so again I

00:17:50,670 --> 00:17:57,590
have my CLI so I can use it through my

00:17:53,700 --> 00:18:02,250
scripts and I can just say Lexi launch

00:17:57,590 --> 00:18:04,740
Ubuntu 1604 container 1 as a name and in

00:18:02,250 --> 00:18:06,480
two seconds I have a new server running

00:18:04,740 --> 00:18:08,730
on my system of course as a virtual

00:18:06,480 --> 00:18:09,530
machine or technically the Lexi

00:18:08,730 --> 00:18:13,800
container

00:18:09,530 --> 00:18:17,370
the other option how I can do this is

00:18:13,800 --> 00:18:19,550
through OpenStack so as you might know

00:18:17,370 --> 00:18:22,710
that KBM is the de facto standard for

00:18:19,550 --> 00:18:25,500
OpenStack hypervisors we provide drivers

00:18:22,710 --> 00:18:28,800
for legs D so there is an oval X the

00:18:25,500 --> 00:18:31,260
driver so you can say that on the

00:18:28,800 --> 00:18:35,580
particle node like here node B host be

00:18:31,260 --> 00:18:37,650
if it was a note in my OpenStack I can

00:18:35,580 --> 00:18:39,900
just say give me a new instance on the

00:18:37,650 --> 00:18:43,200
node and it will not be a full kvn being

00:18:39,900 --> 00:18:44,940
but it would be Alex D so I can of

00:18:43,200 --> 00:18:47,550
course then in one OpenStack I can

00:18:44,940 --> 00:18:49,200
combine those two technologies so some

00:18:47,550 --> 00:18:52,710
nodes can be running the KVM hypervisor

00:18:49,200 --> 00:18:56,190
source and the other set of nodes lxd

00:18:52,710 --> 00:18:59,810
hypervisors so what would be the big

00:18:56,190 --> 00:19:03,110
benefit of flex d comparing to kayvyun

00:18:59,810 --> 00:19:07,230
the the biggest advantage here is the

00:19:03,110 --> 00:19:10,260
density because as you see on each node

00:19:07,230 --> 00:19:12,390
I'm running just one kernel so all the

00:19:10,260 --> 00:19:13,470
other containers are sharing the same

00:19:12,390 --> 00:19:16,500
kernel

00:19:13,470 --> 00:19:17,070
while with KVM if I had ten virtual

00:19:16,500 --> 00:19:19,260
machines

00:19:17,070 --> 00:19:21,809
it would mean I'm running 11 kernels of

00:19:19,260 --> 00:19:25,860
my note a kernel of my host Boston

00:19:21,809 --> 00:19:28,620
Coronas one per each virtual machine so

00:19:25,860 --> 00:19:30,480
in fact with as I said Alexa means Linux

00:19:28,620 --> 00:19:33,330
container so definitely you cannot run

00:19:30,480 --> 00:19:35,309
Windows like that but I did not say it's

00:19:33,330 --> 00:19:39,780
Ubuntu containers it's Linux containers

00:19:35,309 --> 00:19:43,289
so I can run CentOS version 6 library in

00:19:39,780 --> 00:19:47,700
my Roxy containers fully head leveraging

00:19:43,289 --> 00:19:49,980
the newest Ubuntu kernel of the host ok

00:19:47,700 --> 00:19:54,210
so I can combine different Linux

00:19:49,980 --> 00:19:56,760
distributions in under laxity so

00:19:54,210 --> 00:20:00,240
actually be as canonical we are

00:19:56,760 --> 00:20:02,850
maintaining those images for lxd again

00:20:00,240 --> 00:20:05,059
in general that is a pretty long list of

00:20:02,850 --> 00:20:07,289
images for different Linux distributions

00:20:05,059 --> 00:20:09,690
specifically of pom power

00:20:07,289 --> 00:20:16,289
we do support Debian and Ubuntu images

00:20:09,690 --> 00:20:18,480
as of now for four legs be for

00:20:16,289 --> 00:20:20,370
commercial support of course we can

00:20:18,480 --> 00:20:26,100
build also images for other distros if

00:20:20,370 --> 00:20:28,409
there is such a request so density was

00:20:26,100 --> 00:20:30,480
the biggest advantage the other is I

00:20:28,409 --> 00:20:32,669
would call it close to bare metal

00:20:30,480 --> 00:20:34,669
performance because actually each

00:20:32,669 --> 00:20:37,169
container as you can imagine is

00:20:34,669 --> 00:20:40,380
implemented as a process on the kernel

00:20:37,169 --> 00:20:43,169
so there is no latency like if there is

00:20:40,380 --> 00:20:45,030
one weird virtual machines so those

00:20:43,169 --> 00:20:48,260
Linux containers are leveraging the

00:20:45,030 --> 00:20:51,450
latest Linux kernel technologies like

00:20:48,260 --> 00:20:53,580
namespaces see group namespaces see

00:20:51,450 --> 00:20:55,679
groups and up-armored that the

00:20:53,580 --> 00:20:59,640
combination of those three giving you

00:20:55,679 --> 00:21:01,409
the isolation between containers so

00:20:59,640 --> 00:21:03,450
don't take me wrong Alex Dee is not

00:21:01,409 --> 00:21:04,950
meant to be a replacement of KVM because

00:21:03,450 --> 00:21:07,169
maybe some clients for some specific

00:21:04,950 --> 00:21:09,270
workloads they need to have the

00:21:07,169 --> 00:21:12,059
isolation which would be provided only

00:21:09,270 --> 00:21:14,159
on virtual machine level but for other

00:21:12,059 --> 00:21:17,789
workloads maybe like the Linux

00:21:14,159 --> 00:21:20,190
containers is good enough for isolation

00:21:17,789 --> 00:21:22,559
for plenty of workers and plenty of

00:21:20,190 --> 00:21:24,090
situations so that would then give you

00:21:22,559 --> 00:21:25,690
the option to squeeze your hardware

00:21:24,090 --> 00:21:29,200
better

00:21:25,690 --> 00:21:31,270
based on x86 benchmarks we have 14 times

00:21:29,200 --> 00:21:35,050
better density with likes D comparing to

00:21:31,270 --> 00:21:37,000
KVM so it's really significant you

00:21:35,050 --> 00:21:40,240
remember this morning we were told there

00:21:37,000 --> 00:21:42,040
were on during the keynotes we were told

00:21:40,240 --> 00:21:44,080
that there is an issue that ok you can

00:21:42,040 --> 00:21:46,240
do the virtualization only once and then

00:21:44,080 --> 00:21:49,240
you already have the benefit but it's

00:21:46,240 --> 00:21:53,260
difficult to find another zero how you

00:21:49,240 --> 00:21:56,890
can make your utilization of hardware

00:21:53,260 --> 00:21:59,200
even better so give a try to tool XD to

00:21:56,890 --> 00:22:01,720
compare it video que bien if you run in

00:21:59,200 --> 00:22:04,410
KVM and maybe this can give give you

00:22:01,720 --> 00:22:10,720
additional benefits of virtualization

00:22:04,410 --> 00:22:13,300
and in april so what i was mentioning is

00:22:10,720 --> 00:22:16,750
true since april 16 in april this year

00:22:13,300 --> 00:22:19,900
we will bring to the market the laxity

00:22:16,750 --> 00:22:22,000
clustering capability which then means

00:22:19,900 --> 00:22:24,640
that you can just call here in this

00:22:22,000 --> 00:22:27,970
example i put my five nodes in one leg

00:22:24,640 --> 00:22:30,430
the cluster and then I can make the call

00:22:27,970 --> 00:22:33,640
like lxd give me an instance or I need

00:22:30,430 --> 00:22:35,740
two more ubuntu instances so somewhere

00:22:33,640 --> 00:22:37,860
in the cluster those instances would be

00:22:35,740 --> 00:22:40,750
created of course I can still have the

00:22:37,860 --> 00:22:43,060
option of explicit placement and I could

00:22:40,750 --> 00:22:49,270
say give me two instances of center

00:22:43,060 --> 00:22:53,680
seven on host B so there's a summary of

00:22:49,270 --> 00:22:55,510
legs D benefits for cloud very easy way

00:22:53,680 --> 00:22:57,640
how you can lift and shift your existing

00:22:55,510 --> 00:22:59,920
applications without you know building

00:22:57,640 --> 00:23:01,690
docker images and changing your

00:22:59,920 --> 00:23:03,850
processes how you deal with applications

00:23:01,690 --> 00:23:06,460
so if your applications are happy today

00:23:03,850 --> 00:23:10,180
in a VM they should be also happy inside

00:23:06,460 --> 00:23:11,740
and like see container with legs B then

00:23:10,180 --> 00:23:14,200
this is also the way how we can

00:23:11,740 --> 00:23:16,450
collocate different components of

00:23:14,200 --> 00:23:18,220
different if I have a software solution

00:23:16,450 --> 00:23:20,080
which is pretty complex having different

00:23:18,220 --> 00:23:23,350
components I can easily co-locate them

00:23:20,080 --> 00:23:26,560
on the same physical node while having

00:23:23,350 --> 00:23:29,290
the isolation provided for Lexi

00:23:26,560 --> 00:23:31,090
containers by legs B and then I give you

00:23:29,290 --> 00:23:34,090
an example of our OpenStack how we deal

00:23:31,090 --> 00:23:35,950
with that and legs the in general can

00:23:34,090 --> 00:23:38,260
also give you some benefit in any kind

00:23:35,950 --> 00:23:39,250
of cloud because typically in public

00:23:38,260 --> 00:23:42,010
cloud

00:23:39,250 --> 00:23:44,290
you you have your instances implemented

00:23:42,010 --> 00:23:45,970
as virtual machines nobody can stop you

00:23:44,290 --> 00:23:48,460
if you have a woman to virtual machine

00:23:45,970 --> 00:23:50,410
instance in cloud to enable their legs

00:23:48,460 --> 00:23:56,110
be inside and put them some more

00:23:50,410 --> 00:23:58,420
workloads inside that instance so let's

00:23:56,110 --> 00:24:02,380
let's move now to another project of us

00:23:58,420 --> 00:24:04,750
called juju which we considered to be

00:24:02,380 --> 00:24:07,570
the model driven operation of the

00:24:04,750 --> 00:24:14,980
software is anybody familiar a bit at

00:24:07,570 --> 00:24:18,160
least with the juju thank you so first

00:24:14,980 --> 00:24:19,960
let me do some like high-level messages

00:24:18,160 --> 00:24:22,600
here what you jus is doing judo is

00:24:19,960 --> 00:24:24,510
helping you to deploy an operate

00:24:22,600 --> 00:24:28,170
software in clouds

00:24:24,510 --> 00:24:31,720
okay so judo has this concept of charms

00:24:28,170 --> 00:24:33,670
wear charm is technically it's a

00:24:31,720 --> 00:24:37,420
collection of scripts so we be providing

00:24:33,670 --> 00:24:39,370
some framework and every single software

00:24:37,420 --> 00:24:41,770
project can have a jutsu charm for that

00:24:39,370 --> 00:24:44,950
solution so vo you know juju charms

00:24:41,770 --> 00:24:47,650
available for OpenStack components for

00:24:44,950 --> 00:24:49,570
MariaDB pose gray actually these are

00:24:47,650 --> 00:24:51,280
hundreds of charms available in due to

00:24:49,570 --> 00:24:53,740
charm just check do two charms calm

00:24:51,280 --> 00:24:56,170
these are again it's kind of open-source

00:24:53,740 --> 00:24:58,810
operation so not only you have open

00:24:56,170 --> 00:25:01,270
source software for free but also the

00:24:58,810 --> 00:25:05,070
way how you would operate and deploy and

00:25:01,270 --> 00:25:07,570
by operation I mean all these actions

00:25:05,070 --> 00:25:10,540
installation configuration scaling up

00:25:07,570 --> 00:25:12,910
scaling down health checks typical

00:25:10,540 --> 00:25:14,640
application potentially for for a

00:25:12,910 --> 00:25:19,300
database the typical operation can be

00:25:14,640 --> 00:25:24,190
backup restore upgrade so all of those

00:25:19,300 --> 00:25:26,290
are encapsulated inside charms and then

00:25:24,190 --> 00:25:28,690
I have a besides my command line I have

00:25:26,290 --> 00:25:31,240
also my GUI where I can model my

00:25:28,690 --> 00:25:35,080
solution and here is very simple

00:25:31,240 --> 00:25:37,300
solution it's for WordPress so as you

00:25:35,080 --> 00:25:40,680
see there is a wordpress charm in the

00:25:37,300 --> 00:25:45,310
middle there is a J proxy on top and

00:25:40,680 --> 00:25:48,280
there is MySQL to host the data of the

00:25:45,310 --> 00:25:52,020
WordPress so all I need to do is to put

00:25:48,280 --> 00:25:55,200
those bubbles on my canvas

00:25:52,020 --> 00:25:57,690
draw the line between a and B to build

00:25:55,200 --> 00:25:59,910
the relation because due to charms they

00:25:57,690 --> 00:26:02,520
have also the information and capsulated

00:25:59,910 --> 00:26:06,150
about how to integrate with other pieces

00:26:02,520 --> 00:26:09,480
of software and once I built this I can

00:26:06,150 --> 00:26:12,390
just say how many instances of those I'd

00:26:09,480 --> 00:26:14,400
like to have this is my model and now I

00:26:12,390 --> 00:26:17,370
can deploy this model to different

00:26:14,400 --> 00:26:19,320
clouds so of course all the major public

00:26:17,370 --> 00:26:21,690
clouds are supported but here

00:26:19,320 --> 00:26:24,570
specifically for this even what is

00:26:21,690 --> 00:26:27,150
important mass is supported as one of

00:26:24,570 --> 00:26:30,960
the club as one of the substrates where

00:26:27,150 --> 00:26:33,600
juju can see the applications so mass is

00:26:30,960 --> 00:26:36,120
fully supported as a bare-metal so

00:26:33,600 --> 00:26:38,670
actually everything you can do with the

00:26:36,120 --> 00:26:41,550
juju and math onyx 86 now you can in

00:26:38,670 --> 00:26:44,760
public cloud now you can do also on

00:26:41,550 --> 00:26:47,400
power based servers and we do the same

00:26:44,760 --> 00:26:50,430
also of course on x86 and on the other

00:26:47,400 --> 00:26:52,920
architectures we do support so that's

00:26:50,430 --> 00:26:55,800
the concept of juju to give you the

00:26:52,920 --> 00:26:58,650
option to deploy applications on top of

00:26:55,800 --> 00:27:03,750
clouds and mass being one of the clouds

00:26:58,650 --> 00:27:05,880
we do support rigid so of course there I

00:27:03,750 --> 00:27:08,760
could not run the session about building

00:27:05,880 --> 00:27:11,880
cloud on power we do go into without

00:27:08,760 --> 00:27:15,570
mentioning OpenStack because actually

00:27:11,880 --> 00:27:18,110
opens tag and VMware are the two options

00:27:15,570 --> 00:27:21,150
how to operate or how to build your

00:27:18,110 --> 00:27:22,710
private cloud so we as open-source

00:27:21,150 --> 00:27:25,950
company we of course we believe in

00:27:22,710 --> 00:27:28,740
OpenStack be one of the first members of

00:27:25,950 --> 00:27:31,770
OpenStack foundation so this is just to

00:27:28,740 --> 00:27:34,560
ensure you that ever all we do in terms

00:27:31,770 --> 00:27:37,230
of OpenStack we also do on IBM power so

00:27:34,560 --> 00:27:39,030
it's easy now with Mass juju and our

00:27:37,230 --> 00:27:41,430
OpenStack to build the OpenStack cross

00:27:39,030 --> 00:27:47,160
platforms again including power

00:27:41,430 --> 00:27:50,670
I was already mentioning Ubuntu release

00:27:47,160 --> 00:27:53,280
cycle and you know that OpenStack also

00:27:50,670 --> 00:27:55,770
had the same cycle two times a year so

00:27:53,280 --> 00:27:58,800
we have the same concept of OpenStack

00:27:55,770 --> 00:28:01,410
LTS versions so every two years we have

00:27:58,800 --> 00:28:04,470
a LTS version of OpenStack which we

00:28:01,410 --> 00:28:05,640
would support for five years sometimes

00:28:04,470 --> 00:28:09,870
even more

00:28:05,640 --> 00:28:12,600
the other versions of OpenStack video

00:28:09,870 --> 00:28:14,820
support for 18 months and every other we

00:28:12,600 --> 00:28:17,610
be support for double-time of that for

00:28:14,820 --> 00:28:20,040
three years for 36 months so we have

00:28:17,610 --> 00:28:26,760
very predictable roadmap in terms of

00:28:20,040 --> 00:28:28,020
Ubuntu server and OpenStack I was

00:28:26,760 --> 00:28:30,840
already mentioning that we are using

00:28:28,020 --> 00:28:33,929
legs the heavily for our OpenStack so

00:28:30,840 --> 00:28:36,840
this is an example of an open stack

00:28:33,929 --> 00:28:38,610
architecture and you know that OpenStack

00:28:36,840 --> 00:28:40,640
is organizing different projects a lot

00:28:38,610 --> 00:28:43,020
of components and here on this

00:28:40,640 --> 00:28:45,840
architecture you see that some of those

00:28:43,020 --> 00:28:47,820
are here implemented on bare metal level

00:28:45,840 --> 00:28:51,419
like the hypervisors you know Novik IBM

00:28:47,820 --> 00:28:53,730
and novel XP and safe and swift right

00:28:51,419 --> 00:28:57,090
there some of them are implemented as

00:28:53,730 --> 00:29:00,240
virtual machines and plenty of them here

00:28:57,090 --> 00:29:02,309
are implemented as Linux containers

00:29:00,240 --> 00:29:05,070
under legacy control again this is an

00:29:02,309 --> 00:29:07,950
example with the juju you can model your

00:29:05,070 --> 00:29:10,140
OpenStack deployment for your needs and

00:29:07,950 --> 00:29:12,600
then just ask you to deploy that model

00:29:10,140 --> 00:29:16,470
to your bare metal to take hardware

00:29:12,600 --> 00:29:27,870
infrastructure so that would be the

00:29:16,470 --> 00:29:29,340
model of open stagnant and so that was

00:29:27,870 --> 00:29:32,070
OpenStack for infrastructure as a

00:29:29,340 --> 00:29:33,630
service as you see what's happening on

00:29:32,070 --> 00:29:36,570
the market in terms of containers

00:29:33,630 --> 00:29:39,840
kubernetes really has a big momentum

00:29:36,570 --> 00:29:42,210
there in terms of coordinating docker

00:29:39,840 --> 00:29:45,000
like containers no really the containers

00:29:42,210 --> 00:29:47,790
having applications inside so we also

00:29:45,000 --> 00:29:51,510
fully support canonical distribution of

00:29:47,790 --> 00:29:53,040
kubernetes on power and canonical

00:29:51,510 --> 00:29:56,280
dissolution of kubernetes is hundred

00:29:53,040 --> 00:29:59,460
first handed percent upstream kubernetes

00:29:56,280 --> 00:30:01,890
and deployed and operated with juju

00:29:59,460 --> 00:30:04,290
so the same way you can deploy your open

00:30:01,890 --> 00:30:07,290
stack on top of mass you can also deploy

00:30:04,290 --> 00:30:10,049
your kubernetes cluster either on top of

00:30:07,290 --> 00:30:13,559
mass or on top of OpenStack if you like

00:30:10,049 --> 00:30:15,690
to deploy kubernetes on top in virtual

00:30:13,559 --> 00:30:17,390
machines on OpenStack a node on bare

00:30:15,690 --> 00:30:21,260
metal

00:30:17,390 --> 00:30:25,220
so to conclude the session here are some

00:30:21,260 --> 00:30:28,700
articles we'll be describing how we deal

00:30:25,220 --> 00:30:32,559
with legs the nvidia gpus how we kannada

00:30:28,700 --> 00:30:35,420
ties GPUs with kubernetes in general

00:30:32,559 --> 00:30:39,080
which could then go even to kind of

00:30:35,420 --> 00:30:41,000
commoditization of AI technologies so I

00:30:39,080 --> 00:30:45,230
can then you know do to deploy

00:30:41,000 --> 00:30:47,890
kubernetes and on top of that use maybe

00:30:45,230 --> 00:30:50,299
helm to deploy my tensor flow framework

00:30:47,890 --> 00:30:52,610
so again it's a cross hardware

00:30:50,299 --> 00:30:54,559
architecture story whatever we do we do

00:30:52,610 --> 00:30:58,090
it across platforms to give you the same

00:30:54,559 --> 00:31:00,919
experience so we you don't need to

00:30:58,090 --> 00:31:06,230
invest heavily in the new knowledge of

00:31:00,919 --> 00:31:10,270
specific architectures so as a summary

00:31:06,230 --> 00:31:12,830
you want to pretty successful in clouds

00:31:10,270 --> 00:31:15,110
keep in mind that whatever we do we do

00:31:12,830 --> 00:31:17,120
also on on power architecture so if you

00:31:15,110 --> 00:31:20,330
go with Ubuntu you can keep your

00:31:17,120 --> 00:31:24,950
strategy easy that you your hardware

00:31:20,330 --> 00:31:26,360
architectures would be covered all so

00:31:24,950 --> 00:31:28,660
that would be from me thank you very

00:31:26,360 --> 00:31:28,660

YouTube URL: https://www.youtube.com/watch?v=7g7wAB1LZK8


