Title: OpenPOWER Summit US 2018: CAPI SNAP Framework
Publication date: 2018-04-03
Playlist: OpenPOWER Summit US 2018
Description: 
	Bruno Mesnet, Power CAPI Enablement, IBM Power Systems, discusses CAPI SNAP framework, the tool for C/C++ programmers to accelerate by a 2 digit factor using FPGA technology, at OpenPOWER Summit 2018.

For more information, please visit: http://www.openpowerfoundation.org
Captions: 
	00:00:02,449 --> 00:00:11,639
okay hello so I had a dream I had a

00:00:08,370 --> 00:00:23,970
dream that one day you see C++

00:00:11,639 --> 00:00:31,920
programmer could use it I think one day

00:00:23,970 --> 00:00:43,500
I had a meeting with a customer what do

00:00:31,920 --> 00:00:46,440
we get BK it's a short three just show

00:00:43,500 --> 00:00:50,239
me what you can do with that okay three

00:00:46,440 --> 00:00:50,239
weeks to port see

00:00:57,340 --> 00:01:05,870
and we did it we have been able to do it

00:01:00,890 --> 00:01:07,130
with 11 days the result was really

00:01:05,870 --> 00:01:14,710
correct

00:01:07,130 --> 00:01:25,450
we have been able to do by 35 factor

00:01:14,710 --> 00:01:30,950
better than okay so how do we do that

00:01:25,450 --> 00:01:34,490
Mario sort of so we used what we call

00:01:30,950 --> 00:01:36,890
snap and stop is based on Kathy now I

00:01:34,490 --> 00:01:41,630
will not duplicate all the slides from

00:01:36,890 --> 00:01:48,229
Myron okay I will just to explain you

00:01:41,630 --> 00:01:51,500
what there's nothing magic behind that

00:01:48,229 --> 00:01:57,979
so Kathy is stands for current

00:01:51,500 --> 00:02:01,010
accelerator meaning that you have some

00:01:57,979 --> 00:02:03,770
specific logic in the CPU and you have

00:02:01,010 --> 00:02:06,460
specific logic on the FPGA which name is

00:02:03,770 --> 00:02:06,460
PSL

00:02:37,250 --> 00:02:42,140
so that's what processor interface

00:02:39,170 --> 00:02:53,390
that's good that's also an accelerator

00:02:42,140 --> 00:02:58,460
because you may know that rhythm much

00:02:53,390 --> 00:03:01,340
better than CPU it's also have the

00:02:58,460 --> 00:03:05,120
coherent data feature which means very

00:03:01,340 --> 00:03:19,940
simply that from an external card so

00:03:05,120 --> 00:03:26,320
from the FPGA you are able to use the

00:03:19,940 --> 00:03:29,780
same address nothing to change ok ok so

00:03:26,320 --> 00:03:42,730
quicker simpler safer safer it's

00:03:29,780 --> 00:03:42,730
important because which helps you

00:03:57,330 --> 00:04:02,490
so just very quickly to understand what

00:04:00,360 --> 00:04:06,540
is the difference between the I was a

00:04:02,490 --> 00:04:08,250
classic picture when you have an

00:04:06,540 --> 00:04:12,180
application running on the system you

00:04:08,250 --> 00:04:21,570
have different CPUs and your application

00:04:12,180 --> 00:04:25,010
is putting all the variables in you will

00:04:21,570 --> 00:04:28,170
just use a memory device reverse ray

00:04:25,010 --> 00:04:31,200
which will take you some CPU which will

00:04:28,170 --> 00:04:45,870
take you some memory also very often

00:04:31,200 --> 00:04:48,680
will duplicate the back as soon as you

00:04:45,870 --> 00:04:48,680
have the data

00:04:52,730 --> 00:05:00,030
on the data so no currency thousands of

00:04:57,690 --> 00:05:08,760
instructions due to the device driver

00:05:00,030 --> 00:05:15,320
memory allocated for that and CPU what

00:05:08,760 --> 00:05:17,940
we try to do is doing so with the kepi

00:05:15,320 --> 00:05:27,630
you still have to push all the variables

00:05:17,940 --> 00:05:30,720
and the data somewhere in memory don't

00:05:27,630 --> 00:05:40,410
throw anything the data out there go and

00:05:30,720 --> 00:05:44,730
fetch them ok so he will be able to

00:05:40,410 --> 00:05:48,930
access the memories memories area

00:05:44,730 --> 00:05:51,570
without any device driver without taking

00:05:48,930 --> 00:05:53,820
resource the application is just telling

00:05:51,570 --> 00:05:57,350
the FPGA where are the data that's all

00:05:53,820 --> 00:05:57,350
she's not processing things

00:06:04,590 --> 00:06:14,730
okay so behind that you will understand

00:06:09,900 --> 00:06:20,430
that when you want to do things in a

00:06:14,730 --> 00:06:24,169
typical non Cappy environment you will

00:06:20,430 --> 00:06:28,410
have to call the driver to copy the data

00:06:24,169 --> 00:06:33,780
inform the the accelerator and then go

00:06:28,410 --> 00:06:36,630
back interrupting you pulling or getting

00:06:33,780 --> 00:06:40,610
the interruptions from the from the FPGA

00:06:36,630 --> 00:06:44,370
and so on so this takes time okay things

00:06:40,610 --> 00:06:48,660
on the FPGA on the kepi model there's

00:06:44,370 --> 00:07:00,590
nothing to do but just saying that the

00:06:48,660 --> 00:07:00,590
data are here taken to prepare the data

00:07:01,400 --> 00:07:10,530
different paradigm saying that the FPGA

00:07:05,610 --> 00:07:15,210
now is seen exactly as a new trust yeah

00:07:10,530 --> 00:07:17,550
the same right it's not a sleigh it's a

00:07:15,210 --> 00:07:21,410
master like any other processor and

00:07:17,550 --> 00:07:21,410
that's so cool to understand

00:07:27,040 --> 00:07:32,620
power line I would go very quickly on

00:07:29,680 --> 00:07:41,950
that difference between 408 and 409 we

00:07:32,620 --> 00:07:49,920
are going from A to D bandwidth and from

00:07:41,950 --> 00:07:49,920
p8 and p9 to behind we are ending

00:07:57,819 --> 00:08:07,870
as a Brian Myron just told you numbers

00:08:02,349 --> 00:08:09,129
now so latency is being to be reduced a

00:08:07,870 --> 00:08:12,669
lot

00:08:09,129 --> 00:08:15,490
we have also very cool things like the

00:08:12,669 --> 00:08:34,029
harbor thread wake up meaning that the

00:08:15,490 --> 00:08:39,490
FPGA is able interrupt for the hybrid

00:08:34,029 --> 00:08:41,800
concentrating thing nice okay so just to

00:08:39,490 --> 00:08:46,620
show you what's it inside between or

00:08:41,800 --> 00:08:59,950
eight I would say p1 2.0 and open kepi

00:08:46,620 --> 00:09:03,820
AFU is the application and the

00:08:59,950 --> 00:09:12,390
application here is the application

00:09:03,820 --> 00:09:16,600
running on the CPU ok so moving the PSL

00:09:12,390 --> 00:09:22,110
the proxy and the PCI Express and we

00:09:16,600 --> 00:09:22,110
will move to a TL on TL interface

00:09:32,620 --> 00:09:37,610
open capilla will not go through this

00:09:35,030 --> 00:09:42,910
one you may have heard about it it's not

00:09:37,610 --> 00:09:47,810
just FPGA it's for much wider

00:09:42,910 --> 00:10:00,860
applications and these are the the guys

00:09:47,810 --> 00:10:04,540
who are behind ok snap snap stands for

00:10:00,860 --> 00:10:07,430
storage and networking and processing

00:10:04,540 --> 00:10:11,080
it's just a framework but it's a

00:10:07,430 --> 00:10:15,470
framework which is open source so you

00:10:11,080 --> 00:10:21,650
have seen if you are a hardware guy how

00:10:15,470 --> 00:10:29,300
do we design a going I guess here using

00:10:21,650 --> 00:10:35,840
tesha Express using drivers that 10

00:10:29,300 --> 00:10:38,440
years what you were to do a design it

00:10:35,840 --> 00:10:38,440
takes more

00:10:40,640 --> 00:10:52,589
when we we bring the kepi we added

00:10:46,320 --> 00:11:03,300
security with the PSL we added a library

00:10:52,589 --> 00:11:16,110
to work with it so this is the new

00:11:03,300 --> 00:11:20,399
feature the snap framework with we have

00:11:16,110 --> 00:11:28,649
been able to develop this framework this

00:11:20,399 --> 00:11:31,560
is an open source framework once more so

00:11:28,649 --> 00:11:40,130
this brings a very good things meaning

00:11:31,560 --> 00:11:40,130
that se Gauri is able to put a new code

00:11:45,140 --> 00:11:54,890
ok how it works very simply you have

00:11:51,060 --> 00:12:00,630
normally an application working on a CPU

00:11:54,890 --> 00:12:06,209
and the storage or networking so what we

00:12:00,630 --> 00:12:09,329
do is we take function take a function

00:12:06,209 --> 00:12:18,300
and you want to upload it or load or

00:12:09,329 --> 00:12:20,910
accelerated and with FPGA that's

00:12:18,300 --> 00:12:24,060
interesting because FPGA provides you

00:12:20,910 --> 00:12:26,459
well that PJ card provides you some new

00:12:24,060 --> 00:12:30,170
hires so you are able to access the

00:12:26,459 --> 00:12:33,480
network storage everything without

00:12:30,170 --> 00:12:34,600
taking server resources that's

00:12:33,480 --> 00:12:37,240
interesting

00:12:34,600 --> 00:12:41,290
this is and the choice of the court with

00:12:37,240 --> 00:12:44,970
the combat the second thing is we are

00:12:41,290 --> 00:12:48,310
using Cathy meaning that we don't need

00:12:44,970 --> 00:12:53,170
we are able to access directly to the

00:12:48,310 --> 00:12:56,040
server memory okay and in the middle of

00:12:53,170 --> 00:13:00,279
all that we have the block all the glue

00:12:56,040 --> 00:13:05,079
so that your action is able to discuss

00:13:00,279 --> 00:13:08,620
with the CPU with the server in general

00:13:05,079 --> 00:13:12,880
and you don't need to know how what is

00:13:08,620 --> 00:13:15,790
the protocol used behind that we used

00:13:12,880 --> 00:13:18,310
also vivid Oh HLS HLS stands for high

00:13:15,790 --> 00:13:29,500
level synthesis it's a sort of compiler

00:13:18,310 --> 00:13:32,380
which like C it gives you something

00:13:29,500 --> 00:13:35,230
which is Diaries digestible by stamp and

00:13:32,380 --> 00:13:40,449
then you have nothing else to know about

00:13:35,230 --> 00:13:50,170
that so this means that C code or has no

00:13:40,449 --> 00:13:52,259
need to have FPGA skills ok so what's in

00:13:50,170 --> 00:13:52,259
it

00:13:52,390 --> 00:13:57,730
first of all that's what capi provides

00:13:54,760 --> 00:14:02,320
you PSL on the right so that's on the

00:13:57,730 --> 00:14:08,950
FPGA side the different lipstick sale

00:14:02,320 --> 00:14:14,610
lip accelerate accelerate libraries well

00:14:08,950 --> 00:14:22,090
we just built all the logic so that

00:14:14,610 --> 00:14:26,020
everything is is ready the first name

00:14:22,090 --> 00:14:29,380
off snap was down hot so we did the

00:14:26,020 --> 00:14:36,100
whole whole bunch off logic and you just

00:14:29,380 --> 00:14:41,050
had to put the jelly okay so what is

00:14:36,100 --> 00:14:43,450
interesting for you is your actions it

00:14:41,050 --> 00:15:02,580
can be C can be VHDL very long if you

00:14:43,450 --> 00:15:02,580
want to with that you have access to

00:15:11,220 --> 00:15:19,270
write and address with the different the

00:15:16,630 --> 00:15:23,640
great feature with that is from the C

00:15:19,270 --> 00:15:28,780
point from the C code accessing the Iran

00:15:23,640 --> 00:15:32,040
or accessing the server memory is

00:15:28,780 --> 00:15:32,040
exactly the same

00:15:32,840 --> 00:15:38,750
like the nbme you I said that you're

00:15:35,570 --> 00:15:42,160
exactly the same no need to understand

00:15:38,750 --> 00:15:50,300
the protocol behind that which is true

00:15:42,160 --> 00:15:55,820
okay so all this is the glue which gives

00:15:50,300 --> 00:16:01,340
you something transference different

00:15:55,820 --> 00:16:04,460
codes we are supporting depending on the

00:16:01,340 --> 00:16:07,400
application you need you can ask for

00:16:04,460 --> 00:16:13,670
tutor bytes of flash on the right you

00:16:07,400 --> 00:16:18,160
can you can ask for passports for

00:16:13,670 --> 00:16:21,370
internet sent gen1 also some time cut

00:16:18,160 --> 00:16:21,370
different price

00:16:32,099 --> 00:17:00,579
which is the first one that's right so

00:16:54,220 --> 00:17:07,809
we used it at the very beginning altura

00:17:00,579 --> 00:17:12,839
went away - okay so we use - exactly

00:17:07,809 --> 00:17:12,839
what you can use both step has been

00:17:15,970 --> 00:17:32,059
well depends on the call I think so yes

00:17:27,919 --> 00:17:35,840
we what the snap has not been supporting

00:17:32,059 --> 00:17:44,149
this after our chain if there is a

00:17:35,840 --> 00:17:48,369
business behind that okay okay so dr.

00:17:44,149 --> 00:17:51,700
show you how things are simple today

00:17:48,369 --> 00:17:59,239
this is a hello world example you can

00:17:51,700 --> 00:18:07,549
have a look to this one it's in an hour

00:17:59,239 --> 00:18:09,970
you can go through the anti flow and so

00:18:07,549 --> 00:18:14,470
just to show you how things do are on

00:18:09,970 --> 00:18:19,249
today when we are running an application

00:18:14,470 --> 00:18:22,369
for example you read a redefine you

00:18:19,249 --> 00:18:25,210
could that text in the memory and then

00:18:22,369 --> 00:18:28,210
the CPU is doing too well here it's

00:18:25,210 --> 00:18:28,210
lowercase

00:18:29,980 --> 00:18:37,299
back in the server memory and then the

00:18:34,330 --> 00:18:50,230
server memory back to the storage okay

00:18:37,299 --> 00:19:06,100
so this is the difference is just a new

00:18:50,230 --> 00:19:17,740
argument CPU so the example you can have

00:19:06,100 --> 00:19:20,980
in Hardware function is the upper case

00:19:17,740 --> 00:19:27,490
just you do to be simple to be sure we

00:19:20,980 --> 00:19:33,899
are not achieving the two things we are

00:19:27,490 --> 00:19:33,899
changing in the C code and this is

00:19:44,220 --> 00:19:59,519
resources and the second thing is we

00:19:53,470 --> 00:19:59,519
need to add this switch from red to blue

00:20:06,190 --> 00:20:14,920
okay so physically when you do the thing

00:20:11,710 --> 00:20:17,710
here's what how we do its behind that's

00:20:14,920 --> 00:20:20,620
it just one instructions it make make

00:20:17,710 --> 00:20:23,710
model or make image you will see that so

00:20:20,620 --> 00:20:26,170
first of thing first of all you take

00:20:23,710 --> 00:20:28,260
your application to software application

00:20:26,170 --> 00:20:30,730
and you run it as a software application

00:20:28,260 --> 00:20:34,540
meaning that the application and the

00:20:30,730 --> 00:20:44,050
function with the action continue but

00:20:34,540 --> 00:20:49,660
with the behind the second step which is

00:20:44,050 --> 00:20:58,840
done is let's build a model so that the

00:20:49,660 --> 00:21:01,860
action this means that behind that all

00:20:58,840 --> 00:21:12,670
the logic is different we are using real

00:21:01,860 --> 00:21:17,340
application but also using we have a

00:21:12,670 --> 00:21:17,340
model which is able to answer as you

00:21:19,740 --> 00:21:26,710
okay so you are able to simulate that

00:21:23,320 --> 00:21:30,100
exactly the same way as if you had a

00:21:26,710 --> 00:21:37,240
software application but it's running as

00:21:30,100 --> 00:21:39,320
if it was the first step is do that but

00:21:37,240 --> 00:21:43,440
on a real hour

00:21:39,320 --> 00:21:46,290
now you may notice that today we are

00:21:43,440 --> 00:21:50,270
running these two first phase on an x86

00:21:46,290 --> 00:21:50,270
server this is

00:22:19,149 --> 00:22:26,289
it's just these two first simulation

00:22:23,720 --> 00:22:26,289
which are

00:22:33,920 --> 00:22:46,970
we did all right the good thing to know

00:22:43,860 --> 00:22:46,970
is every

00:22:55,280 --> 00:23:02,270
every planet has a bug in in the FPGA my

00:22:59,270 --> 00:23:05,260
code I have been able to reproduce it

00:23:02,270 --> 00:23:05,260
and set at the same

00:23:08,810 --> 00:23:16,920
okay so behind that's you just do you

00:23:14,010 --> 00:23:20,310
make to combine things here you do make

00:23:16,920 --> 00:23:31,520
model and there you make image okay

00:23:20,310 --> 00:23:38,700
so simple use case interesting thing is

00:23:31,520 --> 00:23:41,430
okay when you are considering you say

00:23:38,700 --> 00:23:46,250
okay I take a function like PJ and I

00:23:41,430 --> 00:23:46,250
tell you oh it doesn't go very far sir

00:23:50,690 --> 00:23:55,440
where are the data where they are

00:23:53,580 --> 00:23:58,890
processed and where the results are

00:23:55,440 --> 00:24:02,040
going so very often you are considering

00:23:58,890 --> 00:24:05,310
just the process fine but if you are

00:24:02,040 --> 00:24:08,480
able to enter the data directly on this

00:24:05,310 --> 00:24:08,480
fpj car

00:24:16,550 --> 00:24:24,320
you may things think things are

00:24:20,150 --> 00:24:36,470
differently today if you consider this

00:24:24,320 --> 00:24:46,370
very simple example the time to process

00:24:36,470 --> 00:24:50,090
it will not be the main factor so it

00:24:46,370 --> 00:24:54,250
will take nearly 20 seconds to ingest

00:24:50,090 --> 00:24:54,250
one terabyte of data on the server

00:24:59,920 --> 00:25:14,960
the second thing is through very very

00:25:09,890 --> 00:25:16,370
small amount of data to the server think

00:25:14,960 --> 00:25:20,990
about that that's interesting to see

00:25:16,370 --> 00:25:25,340
consider the whole chain so that's the

00:25:20,990 --> 00:25:31,070
different things we did when I took the

00:25:25,340 --> 00:25:33,920
example about the 35 X Factor it was a

00:25:31,070 --> 00:25:36,280
very specific example meaning that I was

00:25:33,920 --> 00:25:36,280
not taking

00:25:48,800 --> 00:25:59,990
so FPGA is really good if you take data

00:25:54,590 --> 00:26:10,130
from outside so to consider all use

00:25:59,990 --> 00:26:15,650
storage and the processing can be done

00:26:10,130 --> 00:26:20,030
with this data so Kappa Snap is well

00:26:15,650 --> 00:26:23,120
just a mixed mix gathering the best way

00:26:20,030 --> 00:26:28,910
we have been able able to find so it's

00:26:23,120 --> 00:26:37,240
just putting together open-source logic

00:26:28,910 --> 00:26:37,240
on get up we used the vivid o2 HLS

00:26:45,850 --> 00:26:54,430
yeah we did that the way that we can

00:26:48,880 --> 00:27:01,350
take any excess you want white we took

00:26:54,430 --> 00:27:05,130
this one it's just because of the many

00:27:01,350 --> 00:27:05,130
other provider one

00:27:12,210 --> 00:27:20,940
okay we use in the middle or eight or

00:27:15,149 --> 00:27:28,710
nine or ten next and the interesting

00:27:20,940 --> 00:27:33,240
thing is there is no specific interface

00:27:28,710 --> 00:27:36,330
like Intel did they are just physically

00:27:33,240 --> 00:27:43,879
connecting the PGA with the processor we

00:27:36,330 --> 00:27:43,879
are allowing any that was a specifier

00:27:47,550 --> 00:28:03,030
here's the where you can find the you

00:27:51,450 --> 00:28:09,570
know the the snap just to show you these

00:28:03,030 --> 00:28:11,250
are all the slides you will have you

00:28:09,570 --> 00:28:14,340
will have all the details so this is a

00:28:11,250 --> 00:28:23,600
good example I used this is something

00:28:14,340 --> 00:28:30,870
you can have been able to take the code

00:28:23,600 --> 00:28:34,160
we just changed to two lines because for

00:28:30,870 --> 00:28:42,960
example this is the sharp three

00:28:34,160 --> 00:28:46,260
algorithm to be able to get I didn't

00:28:42,960 --> 00:28:48,030
even entered that I didn't want to enter

00:28:46,260 --> 00:29:12,960
that and to understand what's behind

00:28:48,030 --> 00:29:16,740
that I just changed different things the

00:29:12,960 --> 00:29:19,860
same example has been done with GPU here

00:29:16,740 --> 00:29:24,290
is the loop I had and then ask me what's

00:29:19,860 --> 00:29:24,290
it's doing unsure its rotation

00:29:34,929 --> 00:29:43,159
okay okay and I will I provided you all

00:29:40,009 --> 00:29:49,600
the different things if you want to go

00:29:43,159 --> 00:29:49,600
into the example that's in the FPGA

00:29:50,200 --> 00:29:53,200
that's

00:29:59,600 --> 00:30:07,480
this is this is it's six

00:30:11,460 --> 00:30:17,460
well everything

00:30:49,940 --> 00:30:52,840
any question

00:31:46,560 --> 00:31:50,420
so with every get me

00:31:56,990 --> 00:31:59,890
I lost it

00:32:26,310 --> 00:32:28,850
yes

00:32:29,430 --> 00:32:34,810
that's all

00:32:31,190 --> 00:32:34,810
today you have expressly

00:32:48,470 --> 00:32:51,460
well

00:32:58,450 --> 00:33:00,450
Oh

00:33:37,039 --> 00:33:41,089
notice plumbum across the park

00:33:47,070 --> 00:33:50,540
well I know

00:34:18,200 --> 00:34:21,730
how many actions can I

00:34:34,760 --> 00:34:42,280
so close to the first question the

00:34:37,720 --> 00:34:42,280
number actually

00:35:04,620 --> 00:35:09,960
yes

00:35:06,060 --> 00:35:09,960
so today

00:35:24,680 --> 00:35:28,160
in action

00:36:18,599 --> 00:36:23,579
so yes all the

00:36:39,070 --> 00:36:49,180
action mood for the video screening for

00:36:45,440 --> 00:36:49,180
example you just thought the action

00:37:32,010 --> 00:37:35,130

YouTube URL: https://www.youtube.com/watch?v=wvpKpUgPnsM


