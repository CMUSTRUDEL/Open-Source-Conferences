Title: OpenPOWER Summit Europe 2016 - CAPI SNAP Framework
Publication date: 2016-11-17
Playlist: OpenPOWER Summit Europe 2016
Description: 
	
Captions: 
	00:00:12,730 --> 00:00:19,730
I'm Bruce while the chief engineer for

00:00:17,119 --> 00:00:20,810
Cappy and we're going to make an

00:00:19,730 --> 00:00:23,660
announcement we are making an

00:00:20,810 --> 00:00:26,360
announcement today of the capi snap

00:00:23,660 --> 00:00:31,039
framework Greg mentioned it in the

00:00:26,360 --> 00:00:33,980
opening slides of this section snap

00:00:31,039 --> 00:00:37,850
stands for the storage network and Excel

00:00:33,980 --> 00:00:39,980
and analytics programming framework the

00:00:37,850 --> 00:00:42,799
concept was initiated at open Power

00:00:39,980 --> 00:00:47,299
Summit six months ago so we've gone from

00:00:42,799 --> 00:00:50,449
a concept six months ago to a demo today

00:00:47,299 --> 00:00:54,949
and product release at the end of the

00:00:50,449 --> 00:00:57,320
year and I brought a prop because

00:00:54,949 --> 00:01:01,280
there's really two stories here JT

00:00:57,320 --> 00:01:03,739
remembers this problem the story one is

00:01:01,280 --> 00:01:07,280
about Cathy snap the story two is about

00:01:03,739 --> 00:01:10,640
how we formed a collaboration across

00:01:07,280 --> 00:01:13,850
seven different companies and created an

00:01:10,640 --> 00:01:17,540
enablement tool this keppi snap as the

00:01:13,850 --> 00:01:19,970
team under open power foundation so when

00:01:17,540 --> 00:01:22,550
we were at open power summit in san jose

00:01:19,970 --> 00:01:26,120
a couple of us had some ideas we sat

00:01:22,550 --> 00:01:30,320
down is Rob here rob taylor sat at table

00:01:26,120 --> 00:01:32,000
with us we got JT's name on here now

00:01:30,320 --> 00:01:36,050
attack was at the tables eiling's was at

00:01:32,000 --> 00:01:38,060
the table etc so so we started drawing

00:01:36,050 --> 00:01:41,000
these pictures on that note book and it

00:01:38,060 --> 00:01:44,930
very quickly became a document and we

00:01:41,000 --> 00:01:46,190
said hang on we have to make sure we

00:01:44,930 --> 00:01:49,120
have the right governess over this

00:01:46,190 --> 00:01:50,870
because it's multiple companies all

00:01:49,120 --> 00:01:52,520
participating you see the names of the

00:01:50,870 --> 00:01:55,540
companies that end up working on it

00:01:52,520 --> 00:01:58,520
across the bottom here we decided on

00:01:55,540 --> 00:02:00,170
basically day one that this wasn't going

00:01:58,520 --> 00:02:01,729
to be an IBM own thing this was going to

00:02:00,170 --> 00:02:04,990
be an open power own thing and was going

00:02:01,729 --> 00:02:07,670
to run under app under the open power

00:02:04,990 --> 00:02:10,549
accelerator work group as a sub group

00:02:07,670 --> 00:02:13,580
under there and that's where it remains

00:02:10,549 --> 00:02:15,709
today we report results every two weeks

00:02:13,580 --> 00:02:17,870
into that work group and all of our

00:02:15,709 --> 00:02:18,500
document document ation goes under open

00:02:17,870 --> 00:02:31,820
power

00:02:18,500 --> 00:02:33,920
and a big I'm hitting with a laser the

00:02:31,820 --> 00:02:37,040
one of the reasons the one of the

00:02:33,920 --> 00:02:39,140
driving forces is that we are making

00:02:37,040 --> 00:02:41,000
everything about this framework open

00:02:39,140 --> 00:02:42,830
we're going to put the open source out

00:02:41,000 --> 00:02:44,510
on github at the end of the year we are

00:02:42,830 --> 00:02:48,020
using github a private version of the

00:02:44,510 --> 00:02:51,160
github now we will turn that into the

00:02:48,020 --> 00:02:54,170
open version at the end of the year

00:02:51,160 --> 00:02:57,430
right from day one to significant direct

00:02:54,170 --> 00:03:00,620
directives this is now on cappy snap

00:02:57,430 --> 00:03:02,920
number one we have to make it easy for

00:03:00,620 --> 00:03:07,580
programmers to start to use acceleration

00:03:02,920 --> 00:03:10,760
program is v's developers we do that

00:03:07,580 --> 00:03:15,110
through a simple API and making it much

00:03:10,760 --> 00:03:17,270
easier to create acceleration IP that's

00:03:15,110 --> 00:03:19,250
what this framework is about and then of

00:03:17,270 --> 00:03:21,380
course the second part is that we're

00:03:19,250 --> 00:03:23,600
going to make this an open source so

00:03:21,380 --> 00:03:25,880
what does this framework look like we

00:03:23,600 --> 00:03:28,549
have an application running on App our

00:03:25,880 --> 00:03:31,549
server over here that's your application

00:03:28,549 --> 00:03:34,910
with his virtual address space and in

00:03:31,549 --> 00:03:38,780
yellow we have a cap e-library framework

00:03:34,910 --> 00:03:45,470
library and here's the simple API he's

00:03:38,780 --> 00:03:48,290
coming back up isn't it that's connected

00:03:45,470 --> 00:03:51,470
to a Cappy enabled card with the

00:03:48,290 --> 00:03:53,329
framework on it and the personalized

00:03:51,470 --> 00:03:55,340
action code and I'm going to flip back

00:03:53,329 --> 00:03:57,950
and forth here this is a network card

00:03:55,340 --> 00:04:02,420
but we're ought we can also do this on a

00:03:57,950 --> 00:04:05,930
storage flash card so you can have you

00:04:02,420 --> 00:04:08,090
can have storage Ethernet anything

00:04:05,930 --> 00:04:09,860
hanging off of this network card you can

00:04:08,090 --> 00:04:13,190
put your data out here on the flash card

00:04:09,860 --> 00:04:17,269
these both these cards will be enabled

00:04:13,190 --> 00:04:20,359
as we move forward all of this framework

00:04:17,269 --> 00:04:22,940
will move forward to power 9 and Cappie

00:04:20,359 --> 00:04:24,950
too and it will move even further on

00:04:22,940 --> 00:04:27,080
with open Cappy the framework will be

00:04:24,950 --> 00:04:31,580
supported all the way through

00:04:27,080 --> 00:04:35,020
so the key is this API and the

00:04:31,580 --> 00:04:37,090
simplicity of it fundamentally a

00:04:35,020 --> 00:04:40,370
programmer calls a function and that

00:04:37,090 --> 00:04:43,490
function has a source where do I get my

00:04:40,370 --> 00:04:45,139
data from it has an action what do I

00:04:43,490 --> 00:04:47,300
want to do to that data and it has a

00:04:45,139 --> 00:04:50,599
destination where am I going to put the

00:04:47,300 --> 00:04:53,360
data after the action has been performed

00:04:50,599 --> 00:04:56,419
on it so maybe your data is out on a

00:04:53,360 --> 00:04:58,759
storage area network here and you want

00:04:56,419 --> 00:05:00,710
to do a search on it so you pull the

00:04:58,759 --> 00:05:03,319
data in here you do the search right

00:05:00,710 --> 00:05:06,050
here and you send your hits and put them

00:05:03,319 --> 00:05:09,620
into your virtual address space that's a

00:05:06,050 --> 00:05:11,900
basic basic use case for it a search and

00:05:09,620 --> 00:05:14,210
that is fundamentally one of the demos

00:05:11,900 --> 00:05:16,039
that we show today well why is that cool

00:05:14,210 --> 00:05:19,550
it's cool in two different ways number

00:05:16,039 --> 00:05:22,190
one you're putting the action closer to

00:05:19,550 --> 00:05:25,759
the data that's important because you

00:05:22,190 --> 00:05:27,620
have a lot more bandwidth here on some

00:05:25,759 --> 00:05:31,129
of the cards you can get a hundred

00:05:27,620 --> 00:05:35,779
multiple hundred gig Ethernet connectors

00:05:31,129 --> 00:05:38,629
here versus the eight or 16 gig pci

00:05:35,779 --> 00:05:43,729
connector here so now we're kind of

00:05:38,629 --> 00:05:45,259
blowing traditional computer design out

00:05:43,729 --> 00:05:47,419
of the water where you're making an

00:05:45,259 --> 00:05:49,909
unbalanced system so if you have more

00:05:47,419 --> 00:05:52,669
data bandwidth here because you can do

00:05:49,909 --> 00:05:55,460
work here you need less data bandwidth

00:05:52,669 --> 00:05:59,419
here so you're moving your compute

00:05:55,460 --> 00:06:01,069
closer to the data in this case and your

00:05:59,419 --> 00:06:02,750
computing faster because it's on an

00:06:01,069 --> 00:06:05,770
accelerator so you've got two different

00:06:02,750 --> 00:06:08,360
benefits that come out of that use case

00:06:05,770 --> 00:06:11,360
the same kind of card maybe you have

00:06:08,360 --> 00:06:13,190
Ethernet packets coming in and you can

00:06:11,360 --> 00:06:15,050
do all kinds of work on that ethernet

00:06:13,190 --> 00:06:19,580
packet maybe you're doing security maybe

00:06:15,050 --> 00:06:22,250
you're doing some some kind of checking

00:06:19,580 --> 00:06:26,509
on that and a second demo that we will

00:06:22,250 --> 00:06:29,270
show today has ethernet packets that we

00:06:26,509 --> 00:06:31,129
run statistics on here and put those

00:06:29,270 --> 00:06:33,229
statistics down into the virtual address

00:06:31,129 --> 00:06:36,469
space so two different examples will

00:06:33,229 --> 00:06:38,350
show today e and either of those cards

00:06:36,469 --> 00:06:41,650
will have it

00:06:38,350 --> 00:06:43,720
so the API is simple source action

00:06:41,650 --> 00:06:45,880
destination and then we get into the

00:06:43,720 --> 00:06:48,940
action code well rather than doing this

00:06:45,880 --> 00:06:51,990
in rtl and vhdl or Verilog we have

00:06:48,940 --> 00:06:55,750
enabled programming languages like C and

00:06:51,990 --> 00:07:00,040
the goal language to write this action

00:06:55,750 --> 00:07:04,330
code so this is what it looked like for

00:07:00,040 --> 00:07:06,700
an API before Cappy snap you had to

00:07:04,330 --> 00:07:09,070
interact with an install library code

00:07:06,700 --> 00:07:12,190
and the operating system and set up and

00:07:09,070 --> 00:07:15,250
create your AF make a connection to your

00:07:12,190 --> 00:07:17,320
AF you then you had to go over and open

00:07:15,250 --> 00:07:20,370
the AF you and start your process and

00:07:17,320 --> 00:07:23,860
then and then stop it all kinds of

00:07:20,370 --> 00:07:26,950
low-level work all in order to call a

00:07:23,860 --> 00:07:29,020
function on the accelerator this is

00:07:26,950 --> 00:07:32,140
computer engineering work but if you

00:07:29,020 --> 00:07:35,710
want to enable programmers you've got to

00:07:32,140 --> 00:07:38,470
make a leap to this source action and

00:07:35,710 --> 00:07:40,630
destination so that yellow library on

00:07:38,470 --> 00:07:42,340
the previous card here this framework

00:07:40,630 --> 00:07:44,440
library takes care of all these

00:07:42,340 --> 00:07:47,320
low-level details so that the

00:07:44,440 --> 00:07:49,060
application just needs to say hey here's

00:07:47,320 --> 00:07:50,890
my source address it could be out in the

00:07:49,060 --> 00:07:52,900
ethernet address it could be a storage

00:07:50,890 --> 00:07:54,510
area network it could be main memory it

00:07:52,900 --> 00:07:57,340
could be something else on the card

00:07:54,510 --> 00:07:58,990
here's my action you can have multiple

00:07:57,340 --> 00:08:01,270
actions on the card maybe you have a

00:07:58,990 --> 00:08:03,550
search and a merge function for

00:08:01,270 --> 00:08:06,160
databases or an intersection function

00:08:03,550 --> 00:08:07,930
out there you can have multiple actions

00:08:06,160 --> 00:08:10,480
on the card so you're telling it which

00:08:07,930 --> 00:08:12,190
action you want to perform and finally

00:08:10,480 --> 00:08:14,230
you have the destination this is where I

00:08:12,190 --> 00:08:16,090
put the data when I'm done and it could

00:08:14,230 --> 00:08:18,580
go right back to the same area as the

00:08:16,090 --> 00:08:22,600
source it could you know it could be any

00:08:18,580 --> 00:08:24,910
one of multiple destinations so that's

00:08:22,600 --> 00:08:29,290
the API that's simple with a function

00:08:24,910 --> 00:08:31,090
call for the accelerator code the other

00:08:29,290 --> 00:08:32,919
side of the equation making this easy

00:08:31,090 --> 00:08:35,740
this is what it looks like in our

00:08:32,919 --> 00:08:38,380
workbooks as we talk about this happens

00:08:35,740 --> 00:08:41,770
to be a case where we're doing a bunch

00:08:38,380 --> 00:08:44,950
of different commands to fetch data to

00:08:41,770 --> 00:08:48,760
pull data out of the system memory and

00:08:44,950 --> 00:08:50,920
get it over to the device this is again

00:08:48,760 --> 00:08:53,620
written for computer engineers now

00:08:50,920 --> 00:08:56,980
programmers programmer wants to write

00:08:53,620 --> 00:08:59,470
code so here's our search code couple

00:08:56,980 --> 00:09:04,600
lines we're looking for an image this is

00:08:59,470 --> 00:09:07,180
you know basic C++ here and there's no

00:09:04,600 --> 00:09:09,010
the framework itself manages moving all

00:09:07,180 --> 00:09:12,639
the data in getting it over into the

00:09:09,010 --> 00:09:15,339
action for you so now as an application

00:09:12,639 --> 00:09:18,070
developer all you have to do is think

00:09:15,339 --> 00:09:21,430
about your action your sort your merge

00:09:18,070 --> 00:09:24,399
your statistics so those are the levers

00:09:21,430 --> 00:09:26,500
that we've put into this copy snap in

00:09:24,399 --> 00:09:31,630
order to make it easy for programmers

00:09:26,500 --> 00:09:35,199
developers and is fees finish up with

00:09:31,630 --> 00:09:37,779
some key dates and actions november and

00:09:35,199 --> 00:09:41,110
december we have a limited number of

00:09:37,779 --> 00:09:44,380
early users we've got a couple signed up

00:09:41,110 --> 00:09:46,120
if you are interested in or if you're an

00:09:44,380 --> 00:09:48,790
isv and you're interested in in

00:09:46,120 --> 00:09:51,670
partnering and trying to try it out the

00:09:48,790 --> 00:09:57,970
capi snap frame work early send an email

00:09:51,670 --> 00:10:00,550
to copy @ us.ibm.com we will get you the

00:09:57,970 --> 00:10:03,579
forms and ask you the questions needed

00:10:00,550 --> 00:10:06,130
and you have potential to be an early

00:10:03,579 --> 00:10:10,089
partner otherwise in January the entire

00:10:06,130 --> 00:10:12,070
framework will be released with example

00:10:10,089 --> 00:10:18,459
code so you can pick that up and take it

00:10:12,070 --> 00:10:22,420
and and and work work with it modify it

00:10:18,459 --> 00:10:27,850
use it however you like so that's Cappy

00:10:22,420 --> 00:10:33,390
snap we have two demos tonight tomorrow

00:10:27,850 --> 00:10:36,459
at Randy's session we have a programmer

00:10:33,390 --> 00:10:38,860
version of this will go a bit deeper

00:10:36,459 --> 00:10:41,220
into what these interfaces look like and

00:10:38,860 --> 00:10:44,620
then later in the morning at the

00:10:41,220 --> 00:10:47,019
accelerator to session we'll have a

00:10:44,620 --> 00:10:49,779
little bit more about what's built into

00:10:47,019 --> 00:10:51,670
those yellow boxes out on the FPGA and

00:10:49,779 --> 00:10:54,819
how how things are working under the

00:10:51,670 --> 00:10:56,800
covers so three more opportunities to

00:10:54,819 --> 00:10:59,620
learn more about Cappy snap two sessions

00:10:56,800 --> 00:11:01,269
as well as the demos this evening so i

00:10:59,620 --> 00:11:02,579
encourage you to stop by the booths if

00:11:01,269 --> 00:11:07,309
you're interested

00:11:02,579 --> 00:11:07,309
and learn about it thank you very much

00:11:15,279 --> 00:11:17,339
you

00:11:26,800 --> 00:11:29,130

YouTube URL: https://www.youtube.com/watch?v=Its7zORveC0


