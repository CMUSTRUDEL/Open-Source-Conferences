Title: Google Summer of Code and BeagleBoard.org - Drew Fustini, BeagleBoard.org Foundation
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Google Summer of Code and BeagleBoard.org - Drew Fustini, BeagleBoard.org Foundation

BeagleBoard.org is a mentoring organization for Google Summer of Code. GSoC is a great benefit to both the students and the Open Source organizations for which the student projects are created. This talk will highlight past GSoC students and their projects like: BeaglePilot, BeagleLogic, and BeagleSat. This talk will also review the results from the 7 students in 2016: BeagleScope, Sonic Anemometer, Beaglebone Blue API, BeagleBoard-X15 drivers, Improving Bone101 experience, SPI slave driver

About Drew Fustini
Board member of the BeagleBoard.org Foundation. Embedded Systems Engineer at OSH Park ("Perfect Purple PCBs"). Embedded Linux support for Adafruit Industries. Maintainer of Adafruit BeagleBone Python library. Member of Open Source Hardware Association.
Captions: 
	00:00:00,269 --> 00:00:07,109
it's supposed to start at 11:30 right

00:00:02,360 --> 00:00:09,540
okay cool so how many of you were just

00:00:07,109 --> 00:00:12,330
in Jason's talk previously

00:00:09,540 --> 00:00:14,910
okay so some of you now all of you so

00:00:12,330 --> 00:00:16,710
I'm Rufus tini I am part of the

00:00:14,910 --> 00:00:18,930
BeagleBoard the dark foundation I'm one

00:00:16,710 --> 00:00:20,820
of the board members we have two other

00:00:18,930 --> 00:00:23,340
here at the middle innings conference we

00:00:20,820 --> 00:00:25,470
have Jason crognard who's a co-founder

00:00:23,340 --> 00:00:28,560
of BeagleBoard org and we also have

00:00:25,470 --> 00:00:30,990
Robert Nelson here who does our Debian

00:00:28,560 --> 00:00:32,460
images and handles kernel builds and all

00:00:30,990 --> 00:00:35,460
that wonderful stuff so they're both

00:00:32,460 --> 00:00:38,550
around as well and we also have the

00:00:35,460 --> 00:00:41,160
technical showcase this evening so I

00:00:38,550 --> 00:00:43,170
wanted to talk to you about Google

00:00:41,160 --> 00:00:45,450
Summer of Code and some of the past

00:00:43,170 --> 00:00:47,280
projects that we have done as part of

00:00:45,450 --> 00:00:49,340
BeagleBoard org as how many people have

00:00:47,280 --> 00:00:54,510
heard of google Summer of Code before

00:00:49,340 --> 00:00:56,280
okay so most of you so yeah basically

00:00:54,510 --> 00:00:58,020
it's a program global program for

00:00:56,280 --> 00:00:59,789
students to get stipends for writing

00:00:58,020 --> 00:01:03,750
open-source projects so pretty pretty

00:00:59,789 --> 00:01:05,640
cool thing it's been around for 12 years

00:01:03,750 --> 00:01:08,040
over a hundred countries have

00:01:05,640 --> 00:01:10,770
participated over 500 open-source

00:01:08,040 --> 00:01:12,270
projects over 12,000 students and over

00:01:10,770 --> 00:01:16,409
30 million lines of code have been

00:01:12,270 --> 00:01:17,610
written in this past year in 2016 there

00:01:16,409 --> 00:01:20,310
was a hundred and seventy-eight

00:01:17,610 --> 00:01:22,830
open-source projects such as our ARS

00:01:20,310 --> 00:01:27,420
BeagleBoard org there were over 1,200

00:01:22,830 --> 00:01:28,650
university students 67 countries over a

00:01:27,420 --> 00:01:32,340
thousand students completed it

00:01:28,650 --> 00:01:34,220
successfully so around 85% in each

00:01:32,340 --> 00:01:38,820
student that completed successfully got

00:01:34,220 --> 00:01:41,369
$5,500 so the timeline lists here a few

00:01:38,820 --> 00:01:43,680
weeks ago organizations applied and next

00:01:41,369 --> 00:01:47,189
this next week coming week we'll find

00:01:43,680 --> 00:01:49,799
out what organizations were accepted and

00:01:47,189 --> 00:01:51,560
then between that period of March 20th

00:01:49,799 --> 00:01:54,060
is when students should hopefully be

00:01:51,560 --> 00:01:55,799
talking with the mentoring organizations

00:01:54,060 --> 00:01:57,360
that have been accepted figure out what

00:01:55,799 --> 00:01:59,790
projects they might want to work on what

00:01:57,360 --> 00:02:03,780
the needs of the mentoring organizations

00:01:59,790 --> 00:02:06,240
like we've been in the past might might

00:02:03,780 --> 00:02:07,799
be looking for and then March 20th this

00:02:06,240 --> 00:02:09,720
is probably the most important date

00:02:07,799 --> 00:02:11,490
right now is students can start applying

00:02:09,720 --> 00:02:14,190
on March 20th

00:02:11,490 --> 00:02:15,450
and then the beginning of May the

00:02:14,190 --> 00:02:17,100
students proposals that have been

00:02:15,450 --> 00:02:19,050
accepted by the mentoring organizations

00:02:17,100 --> 00:02:21,750
are announced and then the students

00:02:19,050 --> 00:02:24,480
actually start coding at the end of May

00:02:21,750 --> 00:02:26,340
and then there's a few points along the

00:02:24,480 --> 00:02:29,610
way during the summer there's midterm

00:02:26,340 --> 00:02:31,290
evaluation in June final evaluation in

00:02:29,610 --> 00:02:34,140
project submissions in August and then

00:02:31,290 --> 00:02:35,940
finally in October for the mentors from

00:02:34,140 --> 00:02:38,640
the different mentoring organizations

00:02:35,940 --> 00:02:43,320
they'll come to Google's headquarters in

00:02:38,640 --> 00:02:44,880
California and have a Metro summit so

00:02:43,320 --> 00:02:46,500
there's a few requirements for students

00:02:44,880 --> 00:02:48,480
they're going to participate in google

00:02:46,500 --> 00:02:50,730
Summer of Code one is they have to be 18

00:02:48,480 --> 00:02:53,190
years of age and older they must be a

00:02:50,730 --> 00:02:56,459
full or part-time university student or

00:02:53,190 --> 00:02:59,160
be accepted for the fall term of this

00:02:56,459 --> 00:03:01,500
year and it has to be an accredited

00:02:59,160 --> 00:03:03,690
university so I've seen some questions

00:03:01,500 --> 00:03:06,030
on the mailing list of some students

00:03:03,690 --> 00:03:07,500
that are from maybe an online your risk

00:03:06,030 --> 00:03:10,140
or something like that so if it's not

00:03:07,500 --> 00:03:12,540
accredited then unfortunately they can't

00:03:10,140 --> 00:03:14,970
participate fueler things like that to

00:03:12,540 --> 00:03:18,030
be eligible to work in the country that

00:03:14,970 --> 00:03:19,440
they're in and they can't have done it

00:03:18,030 --> 00:03:22,440
more than once so they can't have been

00:03:19,440 --> 00:03:24,000
accepted to a previous google Summer of

00:03:22,440 --> 00:03:25,739
Code project and that's different

00:03:24,000 --> 00:03:27,360
because in the past students are able to

00:03:25,739 --> 00:03:29,130
do it more than more than one year but

00:03:27,360 --> 00:03:31,140
now it's just you can only do it once

00:03:29,130 --> 00:03:32,820
though the cool thing a lot a lot of

00:03:31,140 --> 00:03:36,660
students will then become mentors in

00:03:32,820 --> 00:03:39,000
following years so the way the stipends

00:03:36,660 --> 00:03:41,489
get paid out it's incremental so there's

00:03:39,000 --> 00:03:43,350
the first evaluation in July second

00:03:41,489 --> 00:03:45,870
emulation August and then the final

00:03:43,350 --> 00:03:48,359
evaluation in September it's changed a

00:03:45,870 --> 00:03:50,370
little bit this year in 2017 so instead

00:03:48,359 --> 00:03:52,859
of just being a flat amount for every

00:03:50,370 --> 00:03:55,320
student the amount is actually based on

00:03:52,859 --> 00:03:58,049
the country they're in so on the google

00:03:55,320 --> 00:03:59,579
Summer of Code website there's a chart

00:03:58,049 --> 00:04:02,250
of depending on the country and the

00:03:59,579 --> 00:04:04,140
actual amount another thing I should

00:04:02,250 --> 00:04:06,209
mention the the slides are up on the

00:04:04,140 --> 00:04:08,070
conference website also the e Linux wiki

00:04:06,209 --> 00:04:11,040
so there's a lot of hyperlinks in these

00:04:08,070 --> 00:04:13,670
slides so if you're interested you can

00:04:11,040 --> 00:04:16,169
grab the slides and click on the links

00:04:13,670 --> 00:04:18,479
so BeagleBoard org how many people were

00:04:16,169 --> 00:04:21,120
to BeagleBoard out arg before okay

00:04:18,479 --> 00:04:22,590
pretty much everyone so Google Board of

00:04:21,120 --> 00:04:24,340
dark is a community round building

00:04:22,590 --> 00:04:27,030
open-source hardware

00:04:24,340 --> 00:04:29,710
we're makers educators and professionals

00:04:27,030 --> 00:04:31,000
so BeagleBoard originally came out back

00:04:29,710 --> 00:04:33,460
in 2008

00:04:31,000 --> 00:04:37,260
and it was one of the first affordable

00:04:33,460 --> 00:04:40,840
armed development boards Jason was the

00:04:37,260 --> 00:04:43,660
co-creator of that platform and then in

00:04:40,840 --> 00:04:46,150
2011 the BeagleBone came out which was a

00:04:43,660 --> 00:04:49,449
smaller version of the beagle board and

00:04:46,150 --> 00:04:52,979
more focused on doing DIY projects it

00:04:49,449 --> 00:04:55,180
had more reasonable headers for doing

00:04:52,979 --> 00:04:58,120
interfacing with external external

00:04:55,180 --> 00:04:59,500
circuitry and then the most common

00:04:58,120 --> 00:05:02,110
BeagleBone you'll probably find in

00:04:59,500 --> 00:05:05,400
projects out there is the BeagleBone

00:05:02,110 --> 00:05:05,400
black and that came out in 2013

00:05:05,490 --> 00:05:09,970
so because the BeagleBone is open-source

00:05:07,810 --> 00:05:12,310
hardware there is a wide array of

00:05:09,970 --> 00:05:14,919
different variations of the Beagle bone

00:05:12,310 --> 00:05:19,060
from different manufacturers like aero

00:05:14,919 --> 00:05:20,590
element 14 seed studio and our most

00:05:19,060 --> 00:05:23,740
recent one is the BeagleBone black

00:05:20,590 --> 00:05:25,780
wireless so if you notice that big chip

00:05:23,740 --> 00:05:28,180
there in the middle that's a there's a

00:05:25,780 --> 00:05:30,880
system in package from octavo which is a

00:05:28,180 --> 00:05:33,039
new company in texas this came out last

00:05:30,880 --> 00:05:34,270
year and it integrates a lot of the

00:05:33,039 --> 00:05:36,970
silicon that was in the BeagleBone black

00:05:34,270 --> 00:05:39,070
into one package so the advantage of

00:05:36,970 --> 00:05:41,919
that is now we have room to have Wi-Fi

00:05:39,070 --> 00:05:44,169
and Bluetooth also reduce the complexity

00:05:41,919 --> 00:05:46,389
of the board it's designing Eagle now

00:05:44,169 --> 00:05:49,500
which is a much more accessible CAD

00:05:46,389 --> 00:05:51,970
package than the previous one and

00:05:49,500 --> 00:05:54,789
tonight at the technical showcase we're

00:05:51,970 --> 00:05:56,950
going to have the BeagleBoard x-15 and

00:05:54,789 --> 00:05:59,200
we'll also have a preview of the

00:05:56,950 --> 00:06:02,800
BeagleBone blue so come come check that

00:05:59,200 --> 00:06:04,810
out this evening so a bigger board a

00:06:02,800 --> 00:06:07,360
dark foundation we're a u.s. nonprofit

00:06:04,810 --> 00:06:09,190
we provide education around the design

00:06:07,360 --> 00:06:11,139
and use of open source software and open

00:06:09,190 --> 00:06:13,510
source hardware we foster communication

00:06:11,139 --> 00:06:16,300
between individuals interested in open

00:06:13,510 --> 00:06:18,550
source so probably one of my favorite

00:06:16,300 --> 00:06:20,710
google Summer of Code projects was the

00:06:18,550 --> 00:06:24,490
beagle logic by Kumar abba sheikh back

00:06:20,710 --> 00:06:26,380
in 2014 so this turns the Beagle bone

00:06:24,490 --> 00:06:28,990
into a logic analyzer and a pretty good

00:06:26,380 --> 00:06:32,770
logic analyzer 14 channel 100 mega

00:06:28,990 --> 00:06:35,650
sample has 320 megabytes of buffer space

00:06:32,770 --> 00:06:38,180
you can get 3.3 seconds of a channel

00:06:35,650 --> 00:06:39,740
data also integrates with Sig rock

00:06:38,180 --> 00:06:44,419
so you have capability to decode all

00:06:39,740 --> 00:06:45,800
sorts of different protocols so to get

00:06:44,419 --> 00:06:47,419
started one of the one of the things

00:06:45,800 --> 00:06:49,280
that's nice about this is if there's an

00:06:47,419 --> 00:06:51,650
SD card image you just put the SD card

00:06:49,280 --> 00:06:54,199
in your BeagleBone turn it on and you

00:06:51,650 --> 00:06:55,720
can pull it up in your web browser this

00:06:54,199 --> 00:06:58,220
is an example of how you'd hook it up so

00:06:55,720 --> 00:07:00,289
there's a Cape there Beagle logic Cape

00:06:58,220 --> 00:07:02,060
now you don't need the Cape it's just if

00:07:00,289 --> 00:07:03,979
you have five volt signals the

00:07:02,060 --> 00:07:06,169
beaglebones 3.3 volts so if you want to

00:07:03,979 --> 00:07:08,539
hook it up to a five volt system like

00:07:06,169 --> 00:07:10,820
maybe nard we know you need the Cape but

00:07:08,539 --> 00:07:12,770
the capes not required to use the Beagle

00:07:10,820 --> 00:07:14,270
logic software and that's another

00:07:12,770 --> 00:07:16,009
interesting point about google Summer of

00:07:14,270 --> 00:07:17,810
Code is it's really about code so you

00:07:16,009 --> 00:07:19,759
can have Hardware be a part of your

00:07:17,810 --> 00:07:21,349
google Summer of Code project but it

00:07:19,759 --> 00:07:25,340
can't be the main output the main output

00:07:21,349 --> 00:07:28,250
has to be a software so this is the web

00:07:25,340 --> 00:07:30,740
interface for the beagle logic and you

00:07:28,250 --> 00:07:32,000
can choose the sample or eight select

00:07:30,740 --> 00:07:33,889
what channels you want to use and then

00:07:32,000 --> 00:07:36,229
you can see the waveforms there so this

00:07:33,889 --> 00:07:38,360
is a nice interface for people that are

00:07:36,229 --> 00:07:40,280
maybe new to logic analyzers but it also

00:07:38,360 --> 00:07:43,340
integrates into sig Rock which is a

00:07:40,280 --> 00:07:45,949
great open source project that will

00:07:43,340 --> 00:07:49,130
decode all sorts of different protocols

00:07:45,949 --> 00:07:50,599
so here it's decoding audio data so it's

00:07:49,130 --> 00:07:52,039
nice that there's an option there for

00:07:50,599 --> 00:07:53,630
beginners and also for more advanced

00:07:52,039 --> 00:07:56,300
users that want to decode all sorts of

00:07:53,630 --> 00:07:58,039
different protocols so one of the things

00:07:56,300 --> 00:08:00,020
that makes this possible is the fact

00:07:58,039 --> 00:08:03,520
that the BeagleBone has these

00:08:00,020 --> 00:08:06,169
programmable real-time units or PR use

00:08:03,520 --> 00:08:08,659
so how many people have heard of the PRU

00:08:06,169 --> 00:08:12,320
before on the BeagleBone okay so so

00:08:08,659 --> 00:08:13,729
about half of you so these are micro

00:08:12,320 --> 00:08:15,800
controllers that are on the same die is

00:08:13,729 --> 00:08:18,650
the main arm processor so there are two

00:08:15,800 --> 00:08:20,750
200 megahertz 32-bit microcontrollers

00:08:18,650 --> 00:08:23,570
that have access to the same peripherals

00:08:20,750 --> 00:08:25,460
and the main ddr system memory as the

00:08:23,570 --> 00:08:27,860
harm processor so it allows us to do

00:08:25,460 --> 00:08:31,280
really high-speed real-time tasks and

00:08:27,860 --> 00:08:33,380
that's what the beagle logic leverages

00:08:31,280 --> 00:08:35,570
to be able to handle this 100 mega

00:08:33,380 --> 00:08:40,610
sample 14 channel logic analyzer

00:08:35,570 --> 00:08:43,190
use-case so beagle logic is composed

00:08:40,610 --> 00:08:45,709
mostly of there's Pru firmware there's a

00:08:43,190 --> 00:08:48,020
Linux kernel driver that presents it as

00:08:45,709 --> 00:08:50,990
a character device slash dev slash

00:08:48,020 --> 00:08:53,029
beagle logic and then there is an ojs

00:08:50,990 --> 00:08:56,720
server that provides that web interface

00:08:53,029 --> 00:08:58,520
that I showed earlier so Kumar kept on

00:08:56,720 --> 00:09:01,279
working on this which was great so in

00:08:58,520 --> 00:09:04,670
2015 he submitted it to the hackaday

00:09:01,279 --> 00:09:07,670
prize and was chosen as one of the best

00:09:04,670 --> 00:09:09,350
product finalists and he was also a

00:09:07,670 --> 00:09:12,470
mentor at that point so he traveled out

00:09:09,350 --> 00:09:14,410
to the mentor summit in 2015 and also

00:09:12,470 --> 00:09:16,880
went to the hackaday super conference so

00:09:14,410 --> 00:09:19,130
he has a great blog post on his website

00:09:16,880 --> 00:09:20,720
that talks about that journey and I

00:09:19,130 --> 00:09:23,690
recommend checking it out if you grab

00:09:20,720 --> 00:09:27,620
the slides and click on that link so he

00:09:23,690 --> 00:09:29,899
kept on working on big o logic and was

00:09:27,620 --> 00:09:31,310
wondering what people wanted additional

00:09:29,899 --> 00:09:33,560
features they wanted and a lot of people

00:09:31,310 --> 00:09:36,620
wanted analog it turned out analog

00:09:33,560 --> 00:09:38,810
sampling he also in 2016 last summer was

00:09:36,620 --> 00:09:40,520
it was an intern at Google in Mountain

00:09:38,810 --> 00:09:42,410
View so it's kind of cool to see the

00:09:40,520 --> 00:09:44,480
progression there from being a google

00:09:42,410 --> 00:09:46,670
google Summer of Code student to being a

00:09:44,480 --> 00:09:48,950
mentor to then being an intern at

00:09:46,670 --> 00:09:51,820
Google's offices so it turned out that

00:09:48,950 --> 00:09:54,170
there was also a group at Google in

00:09:51,820 --> 00:09:57,110
Google research that wanted to have a

00:09:54,170 --> 00:09:58,310
high speed data acquisition device so

00:09:57,110 --> 00:10:00,740
they had created something called the

00:09:58,310 --> 00:10:03,350
PRU DAC which is a cape for doing high

00:10:00,740 --> 00:10:04,899
speed data acquisition and it turned out

00:10:03,350 --> 00:10:07,570
they realized that they could leverage

00:10:04,899 --> 00:10:11,329
beagle logic so they're able to use

00:10:07,570 --> 00:10:12,800
Kumar's beagle logic software and it

00:10:11,329 --> 00:10:14,390
turned out that performed actually much

00:10:12,800 --> 00:10:17,870
better than the sample code that they

00:10:14,390 --> 00:10:20,690
had originally written so another

00:10:17,870 --> 00:10:23,240
project I think that had a good impact

00:10:20,690 --> 00:10:25,100
was beagle Ross this was back in 2013

00:10:23,240 --> 00:10:27,950
how many people are familiar with Ross

00:10:25,100 --> 00:10:30,829
which is the robot operating system okay

00:10:27,950 --> 00:10:33,829
so this was basically an integration of

00:10:30,829 --> 00:10:36,020
Ross into the Beagle bone in the

00:10:33,829 --> 00:10:40,640
implementation was as an OE layer and

00:10:36,020 --> 00:10:43,490
open embedded layer so the Beagle bone

00:10:40,640 --> 00:10:45,860
part of it is he created a few Ross

00:10:43,490 --> 00:10:47,959
packages so the ability for Ross to be

00:10:45,860 --> 00:10:49,370
able to talk to different sensors that

00:10:47,959 --> 00:10:53,779
you might connect to the Beagle bone and

00:10:49,370 --> 00:10:56,149
also control motors and then that same

00:10:53,779 --> 00:10:58,520
student Victor followed up the next year

00:10:56,149 --> 00:11:01,459
in 2014 with beagle pilots so this is a

00:10:58,520 --> 00:11:02,900
linux-based autopilot for flying robots

00:11:01,459 --> 00:11:05,209
based on the Beagle bone so part of that

00:11:02,900 --> 00:11:07,009
was he ported RG pilot

00:11:05,209 --> 00:11:10,360
to be able to run in Linux on the

00:11:07,009 --> 00:11:13,519
BeagleBone and also did Ross integration

00:11:10,360 --> 00:11:15,559
and one of the nice things was at the

00:11:13,519 --> 00:11:18,470
end of this he wrote a paper with some

00:11:15,559 --> 00:11:21,829
other people describing the possibility

00:11:18,470 --> 00:11:24,470
of open source Linux auto pilots for

00:11:21,829 --> 00:11:26,899
drones which I think in 2014 was still

00:11:24,470 --> 00:11:28,399
kind of a more of a newer thing most

00:11:26,899 --> 00:11:29,959
people using microcontrollers I think

00:11:28,399 --> 00:11:31,879
back then and one of the interesting

00:11:29,959 --> 00:11:33,589
things as they showed that Linux can

00:11:31,879 --> 00:11:35,420
perfectly be used to meet the real-time

00:11:33,589 --> 00:11:37,790
requirements needed by an auto pilot

00:11:35,420 --> 00:11:39,470
requiring only about a quarter of the

00:11:37,790 --> 00:11:40,249
processor on the BeagleBone black so I

00:11:39,470 --> 00:11:42,339
think that was pretty interesting

00:11:40,249 --> 00:11:44,600
there's lots of interesting graphs and

00:11:42,339 --> 00:11:46,009
metrics in the paper so I recommend

00:11:44,600 --> 00:11:50,059
checking that out if you have interest

00:11:46,009 --> 00:11:52,279
in that and he then went on Victor went

00:11:50,059 --> 00:11:54,259
on to create a company called early

00:11:52,279 --> 00:11:56,149
robotics to commercialize the beagle

00:11:54,259 --> 00:11:58,490
pilots so they have a product called the

00:11:56,149 --> 00:12:01,160
early brain which is an artificial brain

00:11:58,490 --> 00:12:02,689
for making robots and drones and you can

00:12:01,160 --> 00:12:05,119
see there they're say there's a

00:12:02,689 --> 00:12:07,009
quadcopter with early brain which is

00:12:05,119 --> 00:12:08,749
essentially a cape that goes on top of

00:12:07,009 --> 00:12:11,299
the Beagle bone along with the bugle

00:12:08,749 --> 00:12:14,269
pilot software and there's also a spider

00:12:11,299 --> 00:12:15,980
spider robot as well so it's cool to see

00:12:14,269 --> 00:12:17,869
the progression from google Summer of

00:12:15,980 --> 00:12:19,160
Code project to then creating something

00:12:17,869 --> 00:12:21,879
that's valuable to community to then

00:12:19,160 --> 00:12:25,040
actually turning it into a product and

00:12:21,879 --> 00:12:29,569
then kind of going on farther there was

00:12:25,040 --> 00:12:31,249
also the Beagle sat in 2014 or 2015 so

00:12:29,569 --> 00:12:32,899
it's a nano satellite platform based on

00:12:31,249 --> 00:12:35,689
the Beagle bone so essentially software

00:12:32,899 --> 00:12:37,519
that would allow would help you in the

00:12:35,689 --> 00:12:41,689
process of developing a linux-based

00:12:37,519 --> 00:12:44,839
CubeSat so one of the main things here

00:12:41,689 --> 00:12:48,079
was the ability to interface sensors

00:12:44,839 --> 00:12:50,119
like I am use into the Python library

00:12:48,079 --> 00:12:53,689
that's popular in the BeagleBone pyb VI

00:12:50,119 --> 00:12:55,959
o and then be able to fuse dude

00:12:53,689 --> 00:12:59,029
sensor fusion so be able to combine

00:12:55,959 --> 00:13:02,119
digital compass and accelerometer gyro

00:12:59,029 --> 00:13:04,970
in beagle to use that so I think that's

00:13:02,119 --> 00:13:06,759
still an ongoing project so someone

00:13:04,970 --> 00:13:10,929
asked me yesterday if I knew of any

00:13:06,759 --> 00:13:15,819
Linux systems that were in orbit and yes

00:13:10,929 --> 00:13:15,819
you did okay awesome cool

00:13:17,350 --> 00:13:22,550
so another interesting project was the

00:13:20,690 --> 00:13:25,730
USB sniffer so this was all the way back

00:13:22,550 --> 00:13:29,150
in 2010 and this was with the Beagle

00:13:25,730 --> 00:13:31,220
board which had several USB ports on it

00:13:29,150 --> 00:13:34,220
so the way that this works is you

00:13:31,220 --> 00:13:35,990
connect the USB device and a USB host

00:13:34,220 --> 00:13:38,540
and you're able to sit in between and

00:13:35,990 --> 00:13:41,210
sniff the USB traffic so it can be

00:13:38,540 --> 00:13:43,070
pretty useful for doing development and

00:13:41,210 --> 00:13:45,200
also probably doing reverse engineering

00:13:43,070 --> 00:13:50,870
trying to get Linux drivers working for

00:13:45,200 --> 00:13:54,200
various types of hardware and one of the

00:13:50,870 --> 00:13:56,090
other I think really useful projects was

00:13:54,200 --> 00:13:59,210
the user space Arduino so this was done

00:13:56,090 --> 00:14:01,900
back in 2013 by two students this was to

00:13:59,210 --> 00:14:06,170
provide a way to run Arduino code in

00:14:01,900 --> 00:14:08,390
Linux so are most people heard of

00:14:06,170 --> 00:14:11,510
Arduino here okay

00:14:08,390 --> 00:14:12,950
so pretty simple way of programming a

00:14:11,510 --> 00:14:16,400
microcontroller with the simplified

00:14:12,950 --> 00:14:19,280
wiring language which is based on C++ so

00:14:16,400 --> 00:14:21,050
a lot of people coming into the beagle

00:14:19,280 --> 00:14:23,380
community BeagleBoard commute beagle

00:14:21,050 --> 00:14:25,160
board or community using beaglebones

00:14:23,380 --> 00:14:26,750
oftentimes they're coming from more

00:14:25,160 --> 00:14:28,550
simple microcontroller boards like

00:14:26,750 --> 00:14:31,160
Arduinos and they're pretty comfortable

00:14:28,550 --> 00:14:33,980
with that level of abstraction of

00:14:31,160 --> 00:14:35,930
writing Arduino sketches so it's a

00:14:33,980 --> 00:14:38,270
really nice to have that ability for

00:14:35,930 --> 00:14:40,430
them to start using their code that they

00:14:38,270 --> 00:14:42,260
were using their Arduino in Linux so

00:14:40,430 --> 00:14:45,740
this was an implementation to be able to

00:14:42,260 --> 00:14:48,050
run Arduino sketches in Linux and this

00:14:45,740 --> 00:14:49,310
project was done on the BeagleBone but

00:14:48,050 --> 00:14:52,880
it actually because it's just

00:14:49,310 --> 00:14:54,440
implementing in Linux it's applicable to

00:14:52,880 --> 00:14:56,750
other boards as well and other projects

00:14:54,440 --> 00:14:58,820
have gone on to use this as well so

00:14:56,750 --> 00:15:01,240
there's more information there if you

00:14:58,820 --> 00:15:06,260
want to check out examples in code and

00:15:01,240 --> 00:15:09,500
screencast of how it all works so this

00:15:06,260 --> 00:15:11,780
past year in 2016 we had seven projects

00:15:09,500 --> 00:15:14,330
one of which is the Beagle scope which

00:15:11,780 --> 00:15:18,170
was cool to see that build upon beagle

00:15:14,330 --> 00:15:19,730
logic so a few of the students I told

00:15:18,170 --> 00:15:21,470
them I was doing this presentation and I

00:15:19,730 --> 00:15:24,620
was like it'd be great if you could give

00:15:21,470 --> 00:15:26,960
me some slides about your your project

00:15:24,620 --> 00:15:28,730
so Sabine was one of the people that

00:15:26,960 --> 00:15:30,680
provided me with some slides

00:15:28,730 --> 00:15:35,779
so essentially what beagles go

00:15:30,680 --> 00:15:38,420
is to be able to hook up a ADC with a

00:15:35,779 --> 00:15:40,940
parallel bus to the BeagleBone using the

00:15:38,420 --> 00:15:43,610
PRU so the way that this is done is by

00:15:40,940 --> 00:15:46,250
leveraging the i/o subsystem so

00:15:43,610 --> 00:15:48,080
basically you're taking the PRU your

00:15:46,250 --> 00:15:50,089
union says you're using it as a parallel

00:15:48,080 --> 00:15:52,640
bus to be able to connect to a

00:15:50,089 --> 00:15:55,130
high-speed parallel ABC and then

00:15:52,640 --> 00:15:57,490
exposing that with the i/o or the

00:15:55,130 --> 00:16:02,240
industrial i/o the industrial IO

00:15:57,490 --> 00:16:04,070
subsystem the Linux kernel so ego scope

00:16:02,240 --> 00:16:05,240
is composed of three things there's an

00:16:04,070 --> 00:16:06,830
i/o device driver

00:16:05,240 --> 00:16:09,170
there's the parallel interface bus

00:16:06,830 --> 00:16:12,709
driver for that parallel bus that's

00:16:09,170 --> 00:16:16,880
connected to the Beagle bone and then a

00:16:12,709 --> 00:16:18,680
platform-specific driver as well so the

00:16:16,880 --> 00:16:20,750
main thing if you're interested in using

00:16:18,680 --> 00:16:23,300
this to consider is if there is a device

00:16:20,750 --> 00:16:25,430
driver for what you want to use so for

00:16:23,300 --> 00:16:27,620
example is there a device driver for the

00:16:25,430 --> 00:16:29,510
ADC that you want to use in this case he

00:16:27,620 --> 00:16:33,110
was looking at a particular high speed

00:16:29,510 --> 00:16:34,490
ADC board which there was he was

00:16:33,110 --> 00:16:37,300
developed a device driver for that as

00:16:34,490 --> 00:16:39,589
well so this is basically a way to

00:16:37,300 --> 00:16:40,180
expose the high speed capabilities of

00:16:39,589 --> 00:16:48,650
the PRU

00:16:40,180 --> 00:16:51,230
as a device in i/o layer and links there

00:16:48,650 --> 00:16:53,330
to different information about the

00:16:51,230 --> 00:16:55,850
project it supports reading raw data

00:16:53,330 --> 00:17:00,220
it also supports buffered capture using

00:16:55,850 --> 00:17:02,900
ILO buffers more links about the project

00:17:00,220 --> 00:17:04,819
wiki source code one of the things

00:17:02,900 --> 00:17:07,670
that's cool about google Summer of Code

00:17:04,819 --> 00:17:09,980
is the students keep a blog and they're

00:17:07,670 --> 00:17:11,750
supposed to update it every week so it's

00:17:09,980 --> 00:17:13,370
cool to be able to go back and look and

00:17:11,750 --> 00:17:17,839
see the progress of the project along

00:17:13,370 --> 00:17:20,480
the way one of the other projects from

00:17:17,839 --> 00:17:25,100
last year was multi-channel sound driver

00:17:20,480 --> 00:17:28,220
for the BeagleBoard x-15 so the

00:17:25,100 --> 00:17:30,410
BeagleBoard x-15 is probably our most

00:17:28,220 --> 00:17:31,700
capable board and that's a new board

00:17:30,410 --> 00:17:33,980
that's coming out you can see that at

00:17:31,700 --> 00:17:38,030
the technical showcase tonight but it

00:17:33,980 --> 00:17:40,910
has a dual core a 15 it has also DSP so

00:17:38,030 --> 00:17:43,130
this project was to leverage that

00:17:40,910 --> 00:17:46,910
capability into a high performance sound

00:17:43,130 --> 00:17:48,590
system so Henrik was another student

00:17:46,910 --> 00:17:52,250
that provided me with some slides about

00:17:48,590 --> 00:17:54,260
his project so previous to this project

00:17:52,250 --> 00:17:55,910
there was a BeagleBone cape but they

00:17:54,260 --> 00:17:58,400
created called C tag which was a

00:17:55,910 --> 00:17:59,720
multi-channel high 2's sound card that

00:17:58,400 --> 00:18:02,419
you could use with the BeagleBone and

00:17:59,720 --> 00:18:05,059
this google Summer of Code project was

00:18:02,419 --> 00:18:07,730
about being able to use that with the

00:18:05,059 --> 00:18:11,480
new x-15 board and leverage the the

00:18:07,730 --> 00:18:13,309
higher performance of the x-15 so the

00:18:11,480 --> 00:18:15,679
first part was to port the audio card

00:18:13,309 --> 00:18:20,240
drivers to the prosperous in the

00:18:15,679 --> 00:18:26,390
BeagleBoard x-15 it's using I think in

00:18:20,240 --> 00:18:27,950
analog devices a really good ADC there

00:18:26,390 --> 00:18:29,330
or something like that so they had to

00:18:27,950 --> 00:18:31,280
port over the driver for that and then

00:18:29,330 --> 00:18:33,950
the other part was to create a user

00:18:31,280 --> 00:18:36,260
space library to be able to utilize the

00:18:33,950 --> 00:18:39,890
DSP that's in the x-15 so it has dual

00:18:36,260 --> 00:18:41,809
core DSPs in the x-15 so they created a

00:18:39,890 --> 00:18:43,820
user space library to make it easier for

00:18:41,809 --> 00:18:47,059
creating audio applications to leverage

00:18:43,820 --> 00:18:50,360
that and so it's called libbed ESPE x-15

00:18:47,059 --> 00:18:55,400
it uses OpenCL to offload operations to

00:18:50,360 --> 00:18:59,540
the DSP one of our other projects back

00:18:55,400 --> 00:19:01,790
in 2016 was the idea of exposing the PRU

00:18:59,540 --> 00:19:03,650
which is that the two microcontrollers

00:19:01,790 --> 00:19:05,150
that are in the BeagleBone to add

00:19:03,650 --> 00:19:08,270
additional peripherals that you might

00:19:05,150 --> 00:19:11,690
need so this project implemented a ITC

00:19:08,270 --> 00:19:14,450
controller and a spy controller in the

00:19:11,690 --> 00:19:17,360
PRU so the BeagleBone has a lot of i/o

00:19:14,450 --> 00:19:18,559
the Satar chip the TI is the charge of

00:19:17,360 --> 00:19:21,169
this and the BeagleBone has a lot of i/o

00:19:18,559 --> 00:19:24,770
but you might need more you might want

00:19:21,169 --> 00:19:26,720
more ITC master or another spy bus so in

00:19:24,770 --> 00:19:28,880
this case you could use this to then

00:19:26,720 --> 00:19:36,140
create additional peripherals using the

00:19:28,880 --> 00:19:38,270
PRU and this project was to have the

00:19:36,140 --> 00:19:39,890
Beagle bone act as a spy slave so

00:19:38,270 --> 00:19:42,770
usually with these Linux systems they're

00:19:39,890 --> 00:19:44,990
usually acting as a spy master but in

00:19:42,770 --> 00:19:47,390
this case it is to use the Beagle bone

00:19:44,990 --> 00:19:50,330
as a spice slave as part of a greater

00:19:47,390 --> 00:19:52,370
system and one of the mentors actually

00:19:50,330 --> 00:19:54,200
Michael is in the back there so if you

00:19:52,370 --> 00:19:57,919
have any questions about this you might

00:19:54,200 --> 00:20:01,100
want to chat with him later but it was

00:19:57,919 --> 00:20:03,080
pretty interesting to see using the

00:20:01,100 --> 00:20:03,890
Beagle bone as something that is a

00:20:03,080 --> 00:20:08,210
little bit different than what you

00:20:03,890 --> 00:20:11,390
normally do with a Linux system and

00:20:08,210 --> 00:20:14,060
finally I think the last project I'm

00:20:11,390 --> 00:20:17,900
going to talk about is another project

00:20:14,060 --> 00:20:19,130
from 2016 which was to add support for

00:20:17,900 --> 00:20:21,230
the new hardware that's in the Beagle

00:20:19,130 --> 00:20:24,260
bone blue so the Beagle bone blue is a

00:20:21,230 --> 00:20:26,630
beagle bone with hardware to make it

00:20:24,260 --> 00:20:31,340
good for doing robotics projects so we

00:20:26,630 --> 00:20:33,130
have motor drivers sensors IMU different

00:20:31,340 --> 00:20:37,970
things like that so this project was to

00:20:33,130 --> 00:20:40,370
get get those drivers working in the

00:20:37,970 --> 00:20:42,980
Linux kernel so Jason's previous talk he

00:20:40,370 --> 00:20:45,290
was talking about how a lot of the

00:20:42,980 --> 00:20:47,120
existing demo code for the BeagleBone

00:20:45,290 --> 00:20:49,700
blue is done in user space so this

00:20:47,120 --> 00:20:52,780
project was to get that working with the

00:20:49,700 --> 00:20:56,330
device drivers that exists in the kernel

00:20:52,780 --> 00:20:59,240
so I think that is all the projects I'm

00:20:56,330 --> 00:21:00,590
going to talk about today the main thing

00:20:59,240 --> 00:21:02,450
to keep in mind if any of you are

00:21:00,590 --> 00:21:05,780
students undergraduate or graduate

00:21:02,450 --> 00:21:07,970
students or you know graduate or

00:21:05,780 --> 00:21:11,419
undergraduate students they can apply on

00:21:07,970 --> 00:21:13,010
March 30th I think it's a it's a great

00:21:11,419 --> 00:21:15,530
thing and you get to work with mentors

00:21:13,010 --> 00:21:18,260
from the industry and you get paid and

00:21:15,530 --> 00:21:21,080
you create open source code that you can

00:21:18,260 --> 00:21:23,150
use in your portfolio and resumes and

00:21:21,080 --> 00:21:27,050
job interviews so I would highly

00:21:23,150 --> 00:21:29,419
recommend checking it out I think that

00:21:27,050 --> 00:21:34,340
was rather short so if there are any

00:21:29,419 --> 00:21:38,260
questions like we can we can chat or

00:21:34,340 --> 00:21:38,260
Jason you have anything you want to add

00:21:39,539 --> 00:21:48,929
oh yes so we applied as an organization

00:21:47,340 --> 00:21:51,479
we won't find out until next week if

00:21:48,929 --> 00:21:53,519
BeagleBoard org is going to be accepted

00:21:51,479 --> 00:21:55,559
but we are definitely looking for

00:21:53,519 --> 00:21:57,779
mentors in addition to students we need

00:21:55,559 --> 00:22:06,149
mentors to help those students achieve

00:21:57,779 --> 00:22:08,580
the project goals that they want yes

00:22:06,149 --> 00:22:10,529
yeah so there's I think last year there

00:22:08,580 --> 00:22:11,429
was a hundred and seventy-eight project

00:22:10,529 --> 00:22:13,859
so there's all sorts of different

00:22:11,429 --> 00:22:15,960
projects so hopefully whatever you're

00:22:13,859 --> 00:22:18,929
interested in there's probably a project

00:22:15,960 --> 00:22:19,470
along those lines oh oh you were okay

00:22:18,929 --> 00:22:27,679
cool

00:22:19,470 --> 00:22:30,929
so yeah well it's on the video okay um

00:22:27,679 --> 00:22:33,899
how realistic is it for a student to

00:22:30,929 --> 00:22:35,899
spin up on a Pru project for a G Sauk

00:22:33,899 --> 00:22:37,710
program if they've never done it before

00:22:35,899 --> 00:22:40,619
they could probably depends a lot on

00:22:37,710 --> 00:22:44,279
their background you know if they've

00:22:40,619 --> 00:22:46,470
done low-level programming before like

00:22:44,279 --> 00:22:48,629
my close the one thing that's nice now

00:22:46,470 --> 00:22:51,299
is we have several mentors that were

00:22:48,629 --> 00:22:53,849
previously students so Kumar Abba Sheik

00:22:51,299 --> 00:22:56,220
and now sue being who had done the Vigo

00:22:53,849 --> 00:22:58,559
scope is now looking to be a mentor so

00:22:56,220 --> 00:23:00,119
so they'd be available for yeah yeah

00:22:58,559 --> 00:23:02,190
great so that's the great thing and I

00:23:00,119 --> 00:23:04,049
think since BeagleBoard dog has been in

00:23:02,190 --> 00:23:06,200
google Summer of Code for many years now

00:23:04,049 --> 00:23:09,059
it's great to see that kind of

00:23:06,200 --> 00:23:11,309
succession of from a student to a mentor

00:23:09,059 --> 00:23:13,409
and then they're able to help out and

00:23:11,309 --> 00:23:15,629
for us what we try and do is we try and

00:23:13,409 --> 00:23:18,989
get prospective students to join our IRC

00:23:15,629 --> 00:23:20,549
channel or join the mailing list and

00:23:18,989 --> 00:23:24,059
talk about their ideas and then

00:23:20,549 --> 00:23:26,249
hopefully kind of have a nice organic

00:23:24,059 --> 00:23:27,629
process where it's like hey I could

00:23:26,249 --> 00:23:29,039
probably be a mentor for that and the

00:23:27,629 --> 00:23:31,139
students like I'd be interested in this

00:23:29,039 --> 00:23:34,440
so for the PRU I think we actually have

00:23:31,139 --> 00:23:36,889
a fairly good amount of people involved

00:23:34,440 --> 00:23:38,759
that have done projects with the Pru

00:23:36,889 --> 00:23:40,619
especially the people that did the

00:23:38,759 --> 00:23:43,919
Beagle logic and the Beagle scope so and

00:23:40,619 --> 00:23:46,109
for us in terms of the I think the

00:23:43,919 --> 00:23:47,759
differentiating factor of the Beagle

00:23:46,109 --> 00:23:49,529
bone and the Beagle board is the Pru is

00:23:47,759 --> 00:23:52,830
are a big part of that so in general

00:23:49,529 --> 00:23:53,550
we're very very keen to have Pru

00:23:52,830 --> 00:24:01,320
projects

00:23:53,550 --> 00:24:03,450
yeah I just wanted to try to address

00:24:01,320 --> 00:24:07,050
some of the technicalities of the the

00:24:03,450 --> 00:24:10,920
complexity of the PRU projects we made a

00:24:07,050 --> 00:24:12,650
transition and for BeagleBoard how we

00:24:10,920 --> 00:24:15,930
try to support the pure use from uio

00:24:12,650 --> 00:24:17,940
into remote proc and that was really on

00:24:15,930 --> 00:24:20,010
the push of what we thought the the

00:24:17,940 --> 00:24:22,470
future of linux was it's about trying to

00:24:20,010 --> 00:24:23,760
do things in the kernel so uio is a way

00:24:22,470 --> 00:24:26,670
to simply memory map the entire

00:24:23,760 --> 00:24:30,300
peripheral and there is a user space

00:24:26,670 --> 00:24:33,360
library that uses utilizes uio to do all

00:24:30,300 --> 00:24:34,890
of the peer you management but but we

00:24:33,360 --> 00:24:38,280
were trying to we we did get away from

00:24:34,890 --> 00:24:41,070
that so that's still that that uio stuff

00:24:38,280 --> 00:24:42,900
is mainlined you can use the ueo library

00:24:41,070 --> 00:24:45,600
to load and run pure you code and

00:24:42,900 --> 00:24:46,890
there's an API for doing that but but I

00:24:45,600 --> 00:24:48,420
think for a while it got a little bit

00:24:46,890 --> 00:24:50,340
harder because we transitioned away from

00:24:48,420 --> 00:24:52,050
that and so that did make for some of

00:24:50,340 --> 00:24:56,460
the documentation online to be a little

00:24:52,050 --> 00:24:59,250
bit confusing it's really simple to you

00:24:56,460 --> 00:25:02,430
create an elf binary now for the pure

00:24:59,250 --> 00:25:04,490
use and remote proc we'll load it right

00:25:02,430 --> 00:25:07,650
so you just put it into Lib firmware and

00:25:04,490 --> 00:25:10,110
you there's a couple of Syst FS entries

00:25:07,650 --> 00:25:12,030
where you just poke and it will load it

00:25:10,110 --> 00:25:13,980
of course at boot time you just you can

00:25:12,030 --> 00:25:15,300
it'll just like you specified in the

00:25:13,980 --> 00:25:16,770
device tree and all just loaded at boot

00:25:15,300 --> 00:25:17,520
time like it does all the other

00:25:16,770 --> 00:25:20,220
firmwares

00:25:17,520 --> 00:25:22,710
but you know if you want to change it

00:25:20,220 --> 00:25:24,720
you can just prod some CSIS FS entries

00:25:22,710 --> 00:25:27,300
and all reload and run that firmware now

00:25:24,720 --> 00:25:30,210
communications at that point you know

00:25:27,300 --> 00:25:31,770
there's a RP message which is a pretty

00:25:30,210 --> 00:25:33,210
formal way of doing communication

00:25:31,770 --> 00:25:34,410
between the processors and that still

00:25:33,210 --> 00:25:35,490
it's to be a little bit confusing

00:25:34,410 --> 00:25:36,810
because you have to have code on the

00:25:35,490 --> 00:25:39,720
peer used to understand how to do peer

00:25:36,810 --> 00:25:40,950
Yuma to do RP message I think a lot of

00:25:39,720 --> 00:25:43,470
people didn't understand it's still just

00:25:40,950 --> 00:25:44,790
as simple as mem mapping the peripheral

00:25:43,470 --> 00:25:46,380
and using the shared remembering space

00:25:44,790 --> 00:25:47,520
for communicating there's nothing

00:25:46,380 --> 00:25:48,870
stopping you from doing that just

00:25:47,520 --> 00:25:51,630
because you use remote proc for the

00:25:48,870 --> 00:25:56,070
loader there's almost no API needed to

00:25:51,630 --> 00:26:03,420
work with the peer use right remote proc

00:25:56,070 --> 00:26:04,860
is not mainline at this point it's I

00:26:03,420 --> 00:26:07,530
don't know there's a there isn't I think

00:26:04,860 --> 00:26:10,950
T I was doing another patch submission

00:26:07,530 --> 00:26:14,280
imminently yeah we do maintain it

00:26:10,950 --> 00:26:16,140
against for 94.9 so for for BeagleBoard

00:26:14,280 --> 00:26:18,870
there's a one against the LTS Colonel

00:26:16,140 --> 00:26:21,390
for the 4.9 LTS Colonel for students

00:26:18,870 --> 00:26:23,700
doing development but the you know I

00:26:21,390 --> 00:26:27,960
know it's anyone was any day now things

00:26:23,700 --> 00:26:29,790
I that remote proc will go mainline but

00:26:27,960 --> 00:26:31,020
you I yo is you AOS mainline but when

00:26:29,790 --> 00:26:32,400
you know again we think that the

00:26:31,020 --> 00:26:33,840
ultimately mainline will go away from

00:26:32,400 --> 00:26:43,260
that and so we're trying to get on the

00:26:33,840 --> 00:26:44,550
future other points about google Summer

00:26:43,260 --> 00:26:45,810
of Code I just meant that we were

00:26:44,550 --> 00:26:54,800
looking for that we were looking for

00:26:45,810 --> 00:26:56,850
mentors yeah yeah so the question was

00:26:54,800 --> 00:26:59,970
what a mentors do you what are the

00:26:56,850 --> 00:27:02,490
responsibilities of the mentors so the

00:26:59,970 --> 00:27:06,330
mentors are really there to help both

00:27:02,490 --> 00:27:08,460
before so before during this time after

00:27:06,330 --> 00:27:09,960
the organisations are accepted and the

00:27:08,460 --> 00:27:13,110
students apply that's really the time

00:27:09,960 --> 00:27:14,790
where hopefully potential mentors and

00:27:13,110 --> 00:27:17,910
potential students will discuss either a

00:27:14,790 --> 00:27:19,770
mindless or on IRC what projects the

00:27:17,910 --> 00:27:21,060
student is interested in and also what

00:27:19,770 --> 00:27:24,210
projects would be good for the

00:27:21,060 --> 00:27:25,470
organization so that's one of the times

00:27:24,210 --> 00:27:29,250
where there's there's a fair amount of

00:27:25,470 --> 00:27:31,260
activity one of the things that helps a

00:27:29,250 --> 00:27:34,290
lot is if you have multiple mentors so

00:27:31,260 --> 00:27:38,400
if it's just one mentor it can be a lot

00:27:34,290 --> 00:27:40,370
of work for one individual so we try and

00:27:38,400 --> 00:27:43,470
get multiple mentors for a project

00:27:40,370 --> 00:27:44,400
especially with time zones involved you

00:27:43,470 --> 00:27:46,980
know it can be somewhat difficult

00:27:44,400 --> 00:27:48,540
depending on if the mentor and the the

00:27:46,980 --> 00:27:51,540
student are in different times though so

00:27:48,540 --> 00:27:54,660
it definitely helps a lot to have two or

00:27:51,540 --> 00:27:57,480
three mentors for a project to share

00:27:54,660 --> 00:28:00,060
that load and I think then additional

00:27:57,480 --> 00:28:01,890
perspective mentors are less likely to

00:28:00,060 --> 00:28:03,720
be discouraged because they know it's

00:28:01,890 --> 00:28:11,480
not going to just be solely you know on

00:28:03,720 --> 00:28:11,480
them so you have any idea what's that

00:28:11,690 --> 00:28:17,509
as being one of the administrators for

00:28:15,379 --> 00:28:19,610
for our effort we do try to distinguish

00:28:17,509 --> 00:28:21,500
between what we call primary mentors and

00:28:19,610 --> 00:28:23,149
like secondary mentors and something

00:28:21,500 --> 00:28:25,070
because the primary mentor has the

00:28:23,149 --> 00:28:27,799
responsibility of defining the project

00:28:25,070 --> 00:28:29,750
and passing or failing the student that

00:28:27,799 --> 00:28:32,809
we do expect a pretty strong commitment

00:28:29,750 --> 00:28:34,519
from from that primary mentor but we do

00:28:32,809 --> 00:28:36,169
look for secondary mentors to try to

00:28:34,519 --> 00:28:38,629
handle when that primary mentor is not

00:28:36,169 --> 00:28:41,629
available somebody in the region maybe

00:28:38,629 --> 00:28:44,120
that speaks can speak more clearly to

00:28:41,629 --> 00:28:45,710
somebody in a particular region we do

00:28:44,120 --> 00:28:47,990
try to find people to overlap in time

00:28:45,710 --> 00:28:50,870
zones so we're looking for a lot of

00:28:47,990 --> 00:28:53,659
secondary mentors so you don't have to

00:28:50,870 --> 00:28:54,830
have that big pressure of like I'm the

00:28:53,659 --> 00:28:56,330
guy that's gonna pass or fail this

00:28:54,830 --> 00:28:58,490
student and I'm the guys going to define

00:28:56,330 --> 00:29:00,139
what's in and out of the project you can

00:28:58,490 --> 00:29:02,389
just show up and support it right

00:29:00,139 --> 00:29:04,909
there's it's an open mailing list it's

00:29:02,389 --> 00:29:07,039
an open IRC channel we try to keep the

00:29:04,909 --> 00:29:09,500
communication between the students and

00:29:07,039 --> 00:29:11,450
the mentors through those channels we've

00:29:09,500 --> 00:29:13,370
experimented with Google Hangouts and

00:29:11,450 --> 00:29:15,169
even phone calls and other things but it

00:29:13,370 --> 00:29:18,940
just doesn't alt scale to a community

00:29:15,169 --> 00:29:21,080
effort we try to step them back to IRC

00:29:18,940 --> 00:29:23,090
that's the way that we try to support

00:29:21,080 --> 00:29:25,190
the students it works really well when

00:29:23,090 --> 00:29:26,600
everybody's engaged and and so if you

00:29:25,190 --> 00:29:28,370
can spend some time on IRC and on the

00:29:26,600 --> 00:29:30,620
mailing list answering newbies questions

00:29:28,370 --> 00:29:32,690
and giving them some guidance just just

00:29:30,620 --> 00:29:34,159
do it and we do ask for you we do

00:29:32,690 --> 00:29:36,200
encourage you to kind of sign up be

00:29:34,159 --> 00:29:39,320
accessible know let people know who you

00:29:36,200 --> 00:29:41,990
are but it doesn't necessarily require a

00:29:39,320 --> 00:29:43,100
huge time commitment we're just not

00:29:41,990 --> 00:29:47,179
going to sign you a student if you're

00:29:43,100 --> 00:29:51,889
not gonna put the time in the time

00:29:47,179 --> 00:29:53,600
commitment for primary mentor the the

00:29:51,889 --> 00:29:56,389
expectation on our part is the students

00:29:53,600 --> 00:29:58,879
are putting in 30 40 hours and so that

00:29:56,389 --> 00:30:01,700
the the mentors would be available to

00:29:58,879 --> 00:30:03,620
answer a couple of questions every day

00:30:01,700 --> 00:30:05,269
right it's so multiple times during the

00:30:03,620 --> 00:30:06,950
day so they would be accessible they are

00:30:05,269 --> 00:30:08,720
on the IRC from if the students get

00:30:06,950 --> 00:30:11,090
stuck they can idle there they don't

00:30:08,720 --> 00:30:12,500
need they can do their jobs and just

00:30:11,090 --> 00:30:16,159
answer questions but they should

00:30:12,500 --> 00:30:20,059
probably allocate you know five hours a

00:30:16,159 --> 00:30:24,440
week to the students and to probably a

00:30:20,059 --> 00:30:26,289
good eyeball figure it's it's not a zero

00:30:24,440 --> 00:30:28,130
if

00:30:26,289 --> 00:30:31,759
one of the other things that it's nice

00:30:28,130 --> 00:30:33,580
is so in addition to the mentors is you

00:30:31,759 --> 00:30:36,350
can also have people come in that have

00:30:33,580 --> 00:30:38,419
specific domain knowledge or skill in a

00:30:36,350 --> 00:30:40,990
certain area to help out so one things I

00:30:38,419 --> 00:30:44,630
thought was really cool was weave with

00:30:40,990 --> 00:30:47,779
Eagle scope I think it was or sip Eagle

00:30:44,630 --> 00:30:49,610
scope okay so it was using an ILO driver

00:30:47,779 --> 00:30:52,700
so there's this industrial i/o subsystem

00:30:49,610 --> 00:30:54,500
lace kernel so Michael is actually get

00:30:52,700 --> 00:30:56,990
able to get the maintainer that

00:30:54,500 --> 00:30:59,779
subsystem Jonathan Cameron to to come on

00:30:56,990 --> 00:31:01,309
to our IRC channel sometimes and talk

00:30:59,779 --> 00:31:02,929
with the student involved with that so

00:31:01,309 --> 00:31:04,429
that was really cool to be able to get

00:31:02,929 --> 00:31:06,320
like the person actually runs that

00:31:04,429 --> 00:31:09,169
subsystem to come in and give some

00:31:06,320 --> 00:31:11,179
guidance so I think there's kind of a

00:31:09,169 --> 00:31:14,620
range there yeah but for for being a

00:31:11,179 --> 00:31:16,759
primary mentor it's it's definitely a

00:31:14,620 --> 00:31:18,019
significant commitment I think you know

00:31:16,759 --> 00:31:18,919
and that's one of the things I guess I

00:31:18,019 --> 00:31:21,230
should have mentioned at the beginning

00:31:18,919 --> 00:31:22,940
about the students is Google Summer of

00:31:21,230 --> 00:31:25,370
Code is considered basically a full-time

00:31:22,940 --> 00:31:27,590
job for the students so like 40 hours of

00:31:25,370 --> 00:31:29,570
the week like every day working on it in

00:31:27,590 --> 00:31:32,149
the weekly reports are a big part of

00:31:29,570 --> 00:31:33,590
that you know so it really it really is

00:31:32,149 --> 00:31:36,710
like a full-time engagement for the

00:31:33,590 --> 00:31:43,690
student during the summer do you have

00:31:36,710 --> 00:31:43,690
anything to add Michael okay

00:31:45,400 --> 00:31:55,090
if you do become a primary mentor make

00:31:50,510 --> 00:31:58,370
sure you have a good secondary group

00:31:55,090 --> 00:32:03,140
because there's gonna be times when you

00:31:58,370 --> 00:32:05,570
you can't be there for the student and I

00:32:03,140 --> 00:32:09,049
picked up a lot of slack this last

00:32:05,570 --> 00:32:11,600
summer and I I think it helped a lot for

00:32:09,049 --> 00:32:15,250
the other guys it really lessened their

00:32:11,600 --> 00:32:18,740
burden because these these are like

00:32:15,250 --> 00:32:20,600
professionals they have timelines and

00:32:18,740 --> 00:32:24,140
all this other stuff going on and these

00:32:20,600 --> 00:32:27,309
students can get pretty demanding so if

00:32:24,140 --> 00:32:31,280
you if you have the time it's rewarding

00:32:27,309 --> 00:32:34,360
but it can be demanding if you're a

00:32:31,280 --> 00:32:43,280
mentor in the primary domain at least so

00:32:34,360 --> 00:32:49,010
yeah thanks any other questions or

00:32:43,280 --> 00:32:54,559
comments about google Summer of Code ok

00:32:49,010 --> 00:32:58,490
I guess if that's all there is then we

00:32:54,559 --> 00:32:59,990
can I think we ended with you'll have

00:32:58,490 --> 00:33:02,419
some time left before the next actually

00:32:59,990 --> 00:33:04,640
it's lunch right so I guess you go to

00:33:02,419 --> 00:33:07,000
lunch early all right well thank you if

00:33:04,640 --> 00:33:11,559
you know anyone tell them to apply

00:33:07,000 --> 00:33:11,559

YouTube URL: https://www.youtube.com/watch?v=Dk0KhYNS1CU


