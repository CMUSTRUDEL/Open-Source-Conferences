Title: State of the U-Boot - Thomas Rini, Konsulko Group
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	State of the U-Boot - Thomas Rini, Konsulko Group

The U-Boot project has been around for over 16 years and is widely used in the industry. Times change and projects evolve and we are no exception. Come and learn about our efforts to make a unified environment, support EFI binaries, support CI testing on both real hardware and QEMU, and more. In this presentation, Tom Rini will talk about how to utilize these features today and the benefits they have for your project. Tom will also talk about other features in progress and how people can help. Tom will also cover the challenges in moving from a vendor provided tree to the latest mainline version.

About Thomas Rini
Tom Rini has over 18 years experience in developing different parts of the Linux ecosystem with the majority of that time focusing on embedded systems. He was an early PowerPC Linux developer, focusing on the area of hand-off between firmware and kernel and a key developer in the OpenEmbedded and Yocto projects, spending time on the OpenEmbedded Technical Steering Committee. He has been a technical leader at MontaVista, Mentor Graphics and Texas Instruments as well as playing key roles in the Embedded Alley Solutions team. He is currently the head custodian of Das U-Boot and a Principal Software Engineer at Konsulko Group.
Captions: 
	00:00:00,000 --> 00:00:06,750
so my name is Tom Rainey I am the head

00:00:02,850 --> 00:00:09,450
custodian of the u-boot project and I am

00:00:06,750 --> 00:00:14,700
here to kind of give a state of the

00:00:09,450 --> 00:00:16,890
project per talk so I think the first

00:00:14,700 --> 00:00:19,260
thing I want to kind of go over is in

00:00:16,890 --> 00:00:20,970
order to talk about where we are now we

00:00:19,260 --> 00:00:27,779
should talk about where we've come from

00:00:20,970 --> 00:00:31,189
so a history in brief and this the

00:00:27,779 --> 00:00:35,489
project started out in approximately

00:00:31,189 --> 00:00:40,680
1998 with Magnus dam creating PVC boots

00:00:35,489 --> 00:00:44,100
and that supported the Motorola 80 RPC

00:00:40,680 --> 00:00:47,399
8xx line and a little while later this

00:00:44,100 --> 00:00:50,039
was forked into arm boot by someone

00:00:47,399 --> 00:00:53,239
whose name unfortunately escapes me to

00:00:50,039 --> 00:00:58,109
support ARM processors of the time and

00:00:53,239 --> 00:01:03,149
in November 2002 it was merged into you

00:00:58,109 --> 00:01:05,000
boots at the this time we added support

00:01:03,149 --> 00:01:07,439
for our third architecture which

00:01:05,000 --> 00:01:09,000
surprisingly to me when I was doing the

00:01:07,439 --> 00:01:11,549
research on this again was oh that's

00:01:09,000 --> 00:01:12,540
right we added x86 back then Wow

00:01:11,549 --> 00:01:15,090
I would have thought it would have been

00:01:12,540 --> 00:01:17,430
nips or something like that no you boot

00:01:15,090 --> 00:01:27,930
third architecture inch them in up with

00:01:17,430 --> 00:01:32,119
x86 ISP 520 AMD or SSD so actual real

00:01:27,930 --> 00:01:32,119
working on the hardware types for cool

00:01:32,450 --> 00:01:39,299
so in that time we've added support for

00:01:36,560 --> 00:01:44,520
over ten other additional architectures

00:01:39,299 --> 00:01:49,740
and from the shortly after Magnus

00:01:44,520 --> 00:01:53,159
created it to up until once they dropped

00:01:49,740 --> 00:01:56,210
2012 Wolfgang tank was the head

00:01:53,159 --> 00:01:59,460
custodian and lead for the project and

00:01:56,210 --> 00:02:02,329
oversaw a lot of good work that happened

00:01:59,460 --> 00:02:02,329
on at the time

00:02:02,750 --> 00:02:10,020
short so in September 2012 wolfgang

00:02:07,380 --> 00:02:12,360
stepped down and I have taken over as

00:02:10,020 --> 00:02:15,900
the head custodian since then

00:02:12,360 --> 00:02:18,120
and when I was doing this slide one of

00:02:15,900 --> 00:02:21,480
the kind of interesting things that hit

00:02:18,120 --> 00:02:23,670
me was wow this year will be five years

00:02:21,480 --> 00:02:27,920
that I've been the head of the project

00:02:23,670 --> 00:02:30,690
so kind of for this set of slides my

00:02:27,920 --> 00:02:31,980
state of the project is well here are

00:02:30,690 --> 00:02:35,640
some of the things that over the last

00:02:31,980 --> 00:02:37,050
five years have changed some of these

00:02:35,640 --> 00:02:39,270
things will be projects that we've

00:02:37,050 --> 00:02:41,370
started and completed some of these will

00:02:39,270 --> 00:02:42,959
be things that we've just now started on

00:02:41,370 --> 00:02:46,200
and some of these will be things that

00:02:42,959 --> 00:02:47,790
have been in progress for a while but I

00:02:46,200 --> 00:02:50,070
think it's important to go over this

00:02:47,790 --> 00:02:52,470
kind of history because lots of people

00:02:50,070 --> 00:02:55,350
will have their first or second or even

00:02:52,470 --> 00:02:59,640
third experiences with u-boot not being

00:02:55,350 --> 00:03:02,730
whatever it is today but they say might

00:02:59,640 --> 00:03:04,500
have picked up a mips router and that is

00:03:02,730 --> 00:03:06,920
unfortunately happen to be shipping with

00:03:04,500 --> 00:03:10,140
an extremely old version of you lose or

00:03:06,920 --> 00:03:11,610
they picked up a reference platform from

00:03:10,140 --> 00:03:14,250
whatever silicon vendor they're working

00:03:11,610 --> 00:03:16,470
with and that has a kind of old view

00:03:14,250 --> 00:03:18,900
boot not that old not that great might

00:03:16,470 --> 00:03:20,390
be two years old might be five years old

00:03:18,900 --> 00:03:23,100
sometimes it might even be worse

00:03:20,390 --> 00:03:25,140
especially if for example you're picking

00:03:23,100 --> 00:03:27,930
up an existing internal commercial

00:03:25,140 --> 00:03:30,510
project your task is updating a little

00:03:27,930 --> 00:03:32,130
bit and when the project was started

00:03:30,510 --> 00:03:35,100
they picked out whatever the vendor gave

00:03:32,130 --> 00:03:36,840
them and you might be on something that

00:03:35,100 --> 00:03:39,239
is approaching ten years old as your

00:03:36,840 --> 00:03:42,810
first experience with what you looks

00:03:39,239 --> 00:03:45,750
like and a lot has changed since then so

00:03:42,810 --> 00:03:47,820
I'm going to try and cover a lot of the

00:03:45,750 --> 00:03:51,590
positives that I want to emphasize that

00:03:47,820 --> 00:03:51,590
we've evolved through over the years

00:03:52,790 --> 00:03:58,230
there's more information on our history

00:03:55,739 --> 00:04:00,989
over on Wikipedia and I would encourage

00:03:58,230 --> 00:04:03,090
people who are so inclined to give it a

00:04:00,989 --> 00:04:04,470
read and update because there's also

00:04:03,090 --> 00:04:11,160
some somewhat out-of-date information

00:04:04,470 --> 00:04:15,650
there so now I want to talk a little bit

00:04:11,160 --> 00:04:15,650
about the state of our community and

00:04:15,769 --> 00:04:21,900
first one I want to make is that over

00:04:18,600 --> 00:04:24,220
the last year when we've had a bimonthly

00:04:21,900 --> 00:04:27,220
release cycle which means that

00:04:24,220 --> 00:04:28,870
do release kind of around the second

00:04:27,220 --> 00:04:30,730
Monday of the month open up a merge

00:04:28,870 --> 00:04:33,790
window until about three weeks later

00:04:30,730 --> 00:04:37,030
then every other week we do an RC we get

00:04:33,790 --> 00:04:40,210
three RCS then we release then we go

00:04:37,030 --> 00:04:42,220
again and for the last year every

00:04:40,210 --> 00:04:45,430
release has had more than 20 different

00:04:42,220 --> 00:04:47,620
companies and more than a hundred and

00:04:45,430 --> 00:04:50,740
ten individual developers contributing

00:04:47,620 --> 00:04:53,560
every time I think that's a pretty good

00:04:50,740 --> 00:04:55,630
metric for where we are today and I hope

00:04:53,560 --> 00:04:59,550
to see both of these numbers grow but

00:04:55,630 --> 00:04:59,550
these to me are pretty good numbers

00:05:00,060 --> 00:05:05,440
we've also had a number of talks about

00:05:03,790 --> 00:05:07,480
you boots highlighting different

00:05:05,440 --> 00:05:09,070
features different aspects different

00:05:07,480 --> 00:05:10,870
things that we've done over more

00:05:09,070 --> 00:05:13,750
recently at a number of different

00:05:10,870 --> 00:05:15,580
industry conferences and I don't just

00:05:13,750 --> 00:05:17,470
mean to places like this which are

00:05:15,580 --> 00:05:20,500
really fun and I'm glad to be doing a

00:05:17,470 --> 00:05:22,150
presentation here but for example Simon

00:05:20,500 --> 00:05:25,180
glass was giving a presentation on

00:05:22,150 --> 00:05:26,470
u-boot at armed tech con talking about

00:05:25,180 --> 00:05:28,090
you boot to an entirely different

00:05:26,470 --> 00:05:30,310
audience that and normally wouldn't be

00:05:28,090 --> 00:05:35,890
hearing about us and that's a very good

00:05:30,310 --> 00:05:39,190
thing so one of the other aspects of

00:05:35,890 --> 00:05:42,070
community to us is that we leverage code

00:05:39,190 --> 00:05:43,450
from a number of other places we've

00:05:42,070 --> 00:05:46,300
leveraged a number of things from the

00:05:43,450 --> 00:05:49,000
Linux kernel and when possible if we

00:05:46,300 --> 00:05:51,490
find a bug we push it back up and we fix

00:05:49,000 --> 00:05:54,550
it if we introduce a new useful feature

00:05:51,490 --> 00:05:58,450
we push it up there as well kind of my

00:05:54,550 --> 00:06:00,550
personal favorite one here is that in

00:05:58,450 --> 00:06:02,470
you boots we pushed up the feature to

00:06:00,550 --> 00:06:04,630
the kernel of when you want to build in

00:06:02,470 --> 00:06:06,460
a separate object directory you no

00:06:04,630 --> 00:06:08,980
longer have to make that directory first

00:06:06,460 --> 00:06:10,990
you can just do make oels wherever you

00:06:08,980 --> 00:06:12,700
wander objects to go and the kernel will

00:06:10,990 --> 00:06:14,919
go oh that doesn't exist let me make it

00:06:12,700 --> 00:06:19,980
for you now not go oh it doesn't exist

00:06:14,919 --> 00:06:21,430
I'm going to stop and complain sorry

00:06:19,980 --> 00:06:23,800
thank you

00:06:21,430 --> 00:06:26,020
so when we're talking about communities

00:06:23,800 --> 00:06:28,750
there's a couple other things I do want

00:06:26,020 --> 00:06:30,880
to talk about here I'm not just

00:06:28,750 --> 00:06:33,760
referring to the community of you boot

00:06:30,880 --> 00:06:38,139
itself but the community of people who

00:06:33,760 --> 00:06:41,229
work on boot loaders I am very glad

00:06:38,139 --> 00:06:43,840
that the bear box project exists and is

00:06:41,229 --> 00:06:46,120
doing good and awesome work for example

00:06:43,840 --> 00:06:48,490
you might have seen Linux comm promoting

00:06:46,120 --> 00:06:51,430
a talk from EOC Europe about doing

00:06:48,490 --> 00:06:53,379
secured verified boot with bear box

00:06:51,430 --> 00:06:55,810
looking at some of the details

00:06:53,379 --> 00:06:58,629
hey cool they leveraged our verified

00:06:55,810 --> 00:07:00,129
boot stuff to do it there I am really

00:06:58,629 --> 00:07:02,499
glad that they did that because that

00:07:00,129 --> 00:07:04,180
shows that our idea was good and it's

00:07:02,499 --> 00:07:07,749
also a good portable idea that other

00:07:04,180 --> 00:07:10,629
people can leverage competition makes us

00:07:07,749 --> 00:07:13,180
all do better work by the same token

00:07:10,629 --> 00:07:15,849
bear box came up with the idea first of

00:07:13,180 --> 00:07:18,099
well let's have the ability to build our

00:07:15,849 --> 00:07:20,800
code and run it as a host application so

00:07:18,099 --> 00:07:22,840
that we can test things and do useful

00:07:20,800 --> 00:07:25,379
stuff like that hey that's a good idea

00:07:22,840 --> 00:07:28,900
we have that now Thank You bear box

00:07:25,379 --> 00:07:32,800
similar things can be said about core

00:07:28,900 --> 00:07:35,889
boot and even Tiano core it is good that

00:07:32,800 --> 00:07:38,830
there is a diverse offering of boot

00:07:35,889 --> 00:07:40,599
loaders available today because again as

00:07:38,830 --> 00:07:42,909
I was saying I believe that the

00:07:40,599 --> 00:07:44,289
competition or may not competition is

00:07:42,909 --> 00:07:46,960
the wrong word but the fact that

00:07:44,289 --> 00:07:49,270
multiple projects exists and can show

00:07:46,960 --> 00:07:50,949
off their ideas not just talk about

00:07:49,270 --> 00:07:53,110
their ideas leads to better

00:07:50,949 --> 00:07:59,250
implementations and better outcomes for

00:07:53,110 --> 00:08:02,020
everyone so I'll talk real quickly about

00:07:59,250 --> 00:08:05,889
architecture and system-on-chip support

00:08:02,020 --> 00:08:09,399
we have today taking first quick look at

00:08:05,889 --> 00:08:12,460
32-bit arm in no particular order and a

00:08:09,399 --> 00:08:15,969
non exhaustive list we have support for

00:08:12,460 --> 00:08:19,899
things ranging from the Atmel the out 91

00:08:15,969 --> 00:08:22,659
stuff but also their arm v7 based stuff

00:08:19,899 --> 00:08:24,189
we have support for rock ship we have

00:08:22,659 --> 00:08:26,439
support for a large number of Texas

00:08:24,189 --> 00:08:30,370
Instruments platforms we have support

00:08:26,439 --> 00:08:32,409
for edx PS i dot MX line we have support

00:08:30,370 --> 00:08:34,120
for lots of other things i've listed

00:08:32,409 --> 00:08:36,070
there we have support for even more

00:08:34,120 --> 00:08:37,599
platforms that I didn't want to list

00:08:36,070 --> 00:08:40,149
here simply because it would have taken

00:08:37,599 --> 00:08:41,890
up the entire slide I do want to mention

00:08:40,149 --> 00:08:46,000
just at the end there we have support

00:08:41,890 --> 00:08:50,199
for stm32 because we now have good and

00:08:46,000 --> 00:08:51,250
reasonable support for arm v7m for the

00:08:50,199 --> 00:08:54,220
cases where it

00:08:51,250 --> 00:08:56,650
does make sense say hey I want to put

00:08:54,220 --> 00:08:59,080
you Bhutan here so that I can do some

00:08:56,650 --> 00:09:03,970
other smart elsewhere within my system

00:08:59,080 --> 00:09:05,200
and go from that place so even when you

00:09:03,970 --> 00:09:07,870
do have the case of while I'm running on

00:09:05,200 --> 00:09:09,790
an arm v7m we are an option now

00:09:07,870 --> 00:09:12,360
depending on your system design and

00:09:09,790 --> 00:09:16,630
that's important

00:09:12,360 --> 00:09:19,120
talk about 64-bit arm real quick again

00:09:16,630 --> 00:09:21,970
an exhaustive list here is that we

00:09:19,120 --> 00:09:23,890
support the NXT Liars cape family we

00:09:21,970 --> 00:09:26,500
have support for all winter in zhiling

00:09:23,890 --> 00:09:29,710
we have support for unifier Integra and

00:09:26,500 --> 00:09:32,200
Marvell we have support for a large

00:09:29,710 --> 00:09:35,980
number of the various ninety-six boards

00:09:32,200 --> 00:09:36,640
families and again I am very happy to

00:09:35,980 --> 00:09:39,310
see this

00:09:36,640 --> 00:09:41,280
I believe this once again shows off that

00:09:39,310 --> 00:09:44,230
we have a good and reasonable

00:09:41,280 --> 00:09:46,210
architecture and design for how we want

00:09:44,230 --> 00:09:47,770
to go about sharing all of our kernel

00:09:46,210 --> 00:09:52,690
between our platforms and our

00:09:47,770 --> 00:09:56,710
architectures and so forth we have

00:09:52,690 --> 00:09:58,570
support from it if you've been doing hip

00:09:56,710 --> 00:09:59,680
stuff for a long time or heard about it

00:09:58,570 --> 00:10:01,210
at some point in the past you've

00:09:59,680 --> 00:10:04,150
probably heard of the multiplet form

00:10:01,210 --> 00:10:05,920
this is the historic platform reference

00:10:04,150 --> 00:10:08,530
platform we've had good support for that

00:10:05,920 --> 00:10:10,390
for a long time but we also have good

00:10:08,530 --> 00:10:15,120
support now for the Boston platform

00:10:10,390 --> 00:10:15,120
which is the modern reference design

00:10:15,930 --> 00:10:21,400
going back to x86 which while it was our

00:10:19,330 --> 00:10:23,650
third architecture part of the reason it

00:10:21,400 --> 00:10:26,290
surprised me was that when I picked up

00:10:23,650 --> 00:10:29,500
the project supported it in languishing

00:10:26,290 --> 00:10:32,920
for a while but these days that's once

00:10:29,500 --> 00:10:36,370
again changed and x86 is a very well

00:10:32,920 --> 00:10:39,520
supported platform we can run in 32 or

00:10:36,370 --> 00:10:43,120
64-bit mode we support a large number of

00:10:39,520 --> 00:10:45,220
the recent releases from Intel on my

00:10:43,120 --> 00:10:47,020
laptop over here which is unfortunately

00:10:45,220 --> 00:10:49,180
not what I'm running the presentation

00:10:47,020 --> 00:10:51,640
off of the only reason I'm not running

00:10:49,180 --> 00:10:53,320
you boot on it right now is I

00:10:51,640 --> 00:10:55,540
unfortunately made the mistake of making

00:10:53,320 --> 00:10:57,670
it my primary laptop before I took the

00:10:55,540 --> 00:10:59,670
time to fully customize it and risk

00:10:57,670 --> 00:11:02,830
having to reinstall it a few times but

00:10:59,670 --> 00:11:04,870
we can be run on modern Chromebook see

00:11:02,830 --> 00:11:07,180
that's kind of cool I think

00:11:04,870 --> 00:11:08,950
and once again this is a very in

00:11:07,180 --> 00:11:11,290
exhaustive list of all the various

00:11:08,950 --> 00:11:14,830
architectures we support there's things

00:11:11,290 --> 00:11:17,560
like arc and NDS 32 and Blackson and of

00:11:14,830 --> 00:11:26,470
course PowerPC we still have good

00:11:17,560 --> 00:11:28,090
support for PowerPC these days I now

00:11:26,470 --> 00:11:30,490
want to talk briefly about some of the

00:11:28,090 --> 00:11:34,560
various important features that we've

00:11:30,490 --> 00:11:38,950
added again over the last several years

00:11:34,560 --> 00:11:42,040
so SPL or secondary program loader is a

00:11:38,950 --> 00:11:44,680
way to build you boot so that it will

00:11:42,040 --> 00:11:47,650
have a much reduced footprint and the

00:11:44,680 --> 00:11:49,990
primary goal of this is to load a full

00:11:47,650 --> 00:11:53,260
you loop this gets used when you're

00:11:49,990 --> 00:11:56,710
booting from something like emmc or nand

00:11:53,260 --> 00:11:59,620
or what-have-you when you are not a the

00:11:56,710 --> 00:12:01,450
ROM is not able to easily read an

00:11:59,620 --> 00:12:04,150
arbitrary amount of code and put and

00:12:01,450 --> 00:12:05,740
execute it directly but instead has to

00:12:04,150 --> 00:12:07,780
read a much smaller amount of code

00:12:05,740 --> 00:12:10,570
typically put it into some form of

00:12:07,780 --> 00:12:12,640
already initialized Ram such as SRAM or

00:12:10,570 --> 00:12:15,420
I RAM or what-have-you depending on your

00:12:12,640 --> 00:12:18,220
system design and execute it from there

00:12:15,420 --> 00:12:21,130
one of the things that we've done in SPL

00:12:18,220 --> 00:12:23,260
is added the ability to say ok well in

00:12:21,130 --> 00:12:25,570
addition to just going on to full you

00:12:23,260 --> 00:12:28,630
boots why don't we just go directly to

00:12:25,570 --> 00:12:30,550
the Linux if we have the ability to read

00:12:28,630 --> 00:12:32,920
up you boot we probably have the ability

00:12:30,550 --> 00:12:35,440
to read a device tree blob and the

00:12:32,920 --> 00:12:37,540
kernel and why don't we just get out of

00:12:35,440 --> 00:12:41,050
the way all that much quicker save a

00:12:37,540 --> 00:12:43,000
couple seconds on boot this is also

00:12:41,050 --> 00:12:47,320
further enhanced with some other things

00:12:43,000 --> 00:12:50,600
that I'll talk about shortly like right

00:12:47,320 --> 00:12:52,709
now so we have good

00:12:50,600 --> 00:12:56,879
really wish I had presentation mode

00:12:52,709 --> 00:12:58,529
sorry so cryptic cryptographic image

00:12:56,879 --> 00:13:01,019
support as I was saying one of the

00:12:58,529 --> 00:13:04,699
features we've had for a while is the

00:13:01,019 --> 00:13:08,129
ability to do cryptographic signing of

00:13:04,699 --> 00:13:10,110
the payload and this includes both

00:13:08,129 --> 00:13:12,300
support for things such as the

00:13:10,110 --> 00:13:15,480
proprietary methods that you might have

00:13:12,300 --> 00:13:17,639
if you're booting say a TI high security

00:13:15,480 --> 00:13:19,980
device where and there are certain

00:13:17,639 --> 00:13:22,110
functions within the ROM that you can

00:13:19,980 --> 00:13:24,809
use to have your payload be

00:13:22,110 --> 00:13:27,120
authenticated we can leverage that to

00:13:24,809 --> 00:13:29,759
verify our next steps and go from there

00:13:27,120 --> 00:13:32,850
so that you do have a continuously valid

00:13:29,759 --> 00:13:35,490
chain of trust or we have the ability to

00:13:32,850 --> 00:13:37,319
support you using your own keys so that

00:13:35,490 --> 00:13:43,769
you know you trust the system because

00:13:37,319 --> 00:13:46,379
it's signed with your keys generic

00:13:43,769 --> 00:13:48,569
distribution boot support this has had a

00:13:46,379 --> 00:13:52,259
number of topics or a number of talks at

00:13:48,569 --> 00:13:55,079
various times and I I am very happy that

00:13:52,259 --> 00:13:58,529
the work that went into this was done

00:13:55,079 --> 00:14:00,360
and it was indeed not an easy task but I

00:13:58,529 --> 00:14:02,399
am again very grateful that the

00:14:00,360 --> 00:14:05,129
communities spent the time to make this

00:14:02,399 --> 00:14:07,769
work and work well for everyone who

00:14:05,129 --> 00:14:10,230
wanted to stop in on this what this

00:14:07,769 --> 00:14:12,959
means is that when you're building a

00:14:10,230 --> 00:14:16,680
board if you select an option couple of

00:14:12,959 --> 00:14:19,259
options in Kay config you will get a set

00:14:16,680 --> 00:14:23,069
of food scripts that will run through

00:14:19,259 --> 00:14:25,860
and do their best to look in every place

00:14:23,069 --> 00:14:27,750
that a your board supports in terms of

00:14:25,860 --> 00:14:30,449
storage or over the network and

00:14:27,750 --> 00:14:33,689
what-have-you where an off-the-shelf

00:14:30,449 --> 00:14:36,839
distribution via Debian or Susa or

00:14:33,689 --> 00:14:38,699
Fedora or any sort of custom thing you

00:14:36,839 --> 00:14:40,319
built that happens to again put things

00:14:38,699 --> 00:14:44,779
into these well defined and documented

00:14:40,319 --> 00:14:44,779
locations will go ahead and boot off of

00:14:46,249 --> 00:14:52,439
the most interesting thing to me of late

00:14:49,649 --> 00:14:54,749
at least is that FreeBSD wants to

00:14:52,439 --> 00:14:57,329
leverage this same exact infrastructure

00:14:54,749 --> 00:15:00,059
to say that well on our arm systems

00:14:57,329 --> 00:15:01,589
where we don't have yet the ability to

00:15:00,059 --> 00:15:02,450
say that we're going to use an EFI

00:15:01,589 --> 00:15:05,600
application to

00:15:02,450 --> 00:15:07,970
if we throw our loader into these known

00:15:05,600 --> 00:15:12,460
locations all right now you just run

00:15:07,970 --> 00:15:12,460
FreeBSD on your board that's cool to me

00:15:12,880 --> 00:15:17,000
finally on going to mentioned very

00:15:15,260 --> 00:15:20,140
briefly because there is a talk about

00:15:17,000 --> 00:15:23,360
this tomorrow yep I application support

00:15:20,140 --> 00:15:26,480
the very very short version of this is

00:15:23,360 --> 00:15:29,750
to say that now you can go ahead and

00:15:26,480 --> 00:15:33,920
take say grub built as an EFI

00:15:29,750 --> 00:15:36,680
application for arm and food it and you

00:15:33,920 --> 00:15:41,450
can therefore use that as your general

00:15:36,680 --> 00:15:44,720
bootloader bringing a much more familiar

00:15:41,450 --> 00:15:46,790
environment to large sets of end users

00:15:44,720 --> 00:15:48,770
of oh this works just like my other

00:15:46,790 --> 00:15:50,720
machines do or here's my usual grub

00:15:48,770 --> 00:15:53,870
prompt when I get into Linux here are

00:15:50,720 --> 00:15:55,670
the files I need to modify this is just

00:15:53,870 --> 00:15:57,860
like all my other machines I don't need

00:15:55,670 --> 00:15:59,930
to learn new tasks to get on with the

00:15:57,860 --> 00:16:01,160
parts that I want to do in my system

00:15:59,930 --> 00:16:03,350
that are the reason I have this

00:16:01,160 --> 00:16:05,450
particular board in front of me we're

00:16:03,350 --> 00:16:07,550
lowering the barrier to entry to being

00:16:05,450 --> 00:16:10,340
able to do what one wants to do with

00:16:07,550 --> 00:16:12,710
their board rather than having to learn

00:16:10,340 --> 00:16:15,200
new tap just to get to the point of

00:16:12,710 --> 00:16:21,920
working on that particular project you

00:16:15,200 --> 00:16:24,170
want to work on so another thing I want

00:16:21,920 --> 00:16:27,440
to talk about her little bit is our

00:16:24,170 --> 00:16:30,860
testing and CI or continuous integration

00:16:27,440 --> 00:16:34,460
efforts I talked a little bit about

00:16:30,860 --> 00:16:38,030
Travis CI org and I talked a little

00:16:34,460 --> 00:16:41,960
testy why I'm going to talk a little bit

00:16:38,030 --> 00:16:44,900
about T bot let's talk real briefly

00:16:41,960 --> 00:16:46,700
about poverty and then I'm going to talk

00:16:44,900 --> 00:16:54,410
just a little bit about various board

00:16:46,700 --> 00:16:58,730
farms so Travis CI if you've not heard

00:16:54,410 --> 00:17:00,110
of them they are a cloud-based solution

00:16:58,730 --> 00:17:03,200
to offer you

00:17:00,110 --> 00:17:05,709
various build environments for running

00:17:03,200 --> 00:17:08,720
your tests in an automated fashion and

00:17:05,709 --> 00:17:11,030
like many other projects they provide

00:17:08,720 --> 00:17:12,130
community versions of their same

00:17:11,030 --> 00:17:13,959
services so that if

00:17:12,130 --> 00:17:15,880
you happen to be an open-source project

00:17:13,959 --> 00:17:17,829
you can say well I'd like to do my stuff

00:17:15,880 --> 00:17:19,420
over here I'll say great here you go

00:17:17,829 --> 00:17:22,150
here's a couple of restrictions here

00:17:19,420 --> 00:17:29,260
while you're able to do but go at it

00:17:22,150 --> 00:17:33,250
have fun and we have they so with Travis

00:17:29,260 --> 00:17:37,390
CI we are currently able to build 97% of

00:17:33,250 --> 00:17:38,920
all of the boards in huge that's another

00:17:37,390 --> 00:17:41,280
way of saying we're able to build oh

00:17:38,920 --> 00:17:47,710
just about 1,200 different

00:17:41,280 --> 00:17:49,360
configurations of you boots in Travis in

00:17:47,710 --> 00:17:52,420
addition to building all of those

00:17:49,360 --> 00:17:55,360
different configurations we kick off ten

00:17:52,420 --> 00:17:57,760
different qmu based instances of running

00:17:55,360 --> 00:18:01,210
our tests op py framework and we also

00:17:57,760 --> 00:18:05,470
run it on sandbox we also run a couple

00:18:01,210 --> 00:18:11,740
of other different tests such as a SLO C

00:18:05,470 --> 00:18:14,290
and a couple other different things but

00:18:11,740 --> 00:18:18,160
what to me the best thing about Travis

00:18:14,290 --> 00:18:20,800
CI is that anyone can leverage this

00:18:18,160 --> 00:18:23,260
support all you need to do is if you

00:18:20,800 --> 00:18:26,500
have a github you just need to go into

00:18:23,260 --> 00:18:30,430
Travis CI accept the various permissions

00:18:26,500 --> 00:18:33,220
and then any time you happen to push to

00:18:30,430 --> 00:18:36,010
your own personal github repository of

00:18:33,220 --> 00:18:38,380
you loops Travis CI will see that within

00:18:36,010 --> 00:18:41,470
a few seconds say okay let me kick off

00:18:38,380 --> 00:18:45,010
the build and a couple hours later you

00:18:41,470 --> 00:18:46,570
will get results it's not something you

00:18:45,010 --> 00:18:48,640
want to do with every single time you

00:18:46,570 --> 00:18:50,920
make a change but before you run off to

00:18:48,640 --> 00:18:53,140
the day we head off to lunch or just

00:18:50,920 --> 00:18:57,490
before you happen to push a large series

00:18:53,140 --> 00:18:59,800
out you can run this and be much more

00:18:57,490 --> 00:19:01,810
certain that you haven't accidentally

00:18:59,800 --> 00:19:03,310
introduced a regression on some other

00:19:01,810 --> 00:19:10,330
platform that you hadn't thought would

00:19:03,310 --> 00:19:13,000
even be applicable so test dot P wise

00:19:10,330 --> 00:19:15,760
next thing I want to talk about this

00:19:13,000 --> 00:19:18,190
framework is based on the PI test

00:19:15,760 --> 00:19:21,190
framework so there's lots of additional

00:19:18,190 --> 00:19:23,170
public documentation to make understand

00:19:21,190 --> 00:19:26,010
how the tests are written how one would

00:19:23,170 --> 00:19:26,010
write their own test

00:19:26,500 --> 00:19:37,040
test up PU I work on both real hardware

00:19:30,350 --> 00:19:38,810
and in qmu as I saying the Travis this

00:19:37,040 --> 00:19:41,060
is important because we have tests that

00:19:38,810 --> 00:19:43,130
are written both to be target local

00:19:41,060 --> 00:19:47,120
which is to say that they will execute

00:19:43,130 --> 00:19:48,650
on the board and make sure that say the

00:19:47,120 --> 00:19:51,170
shell commands various shell commands

00:19:48,650 --> 00:19:54,050
work as we expect them to but it can

00:19:51,170 --> 00:19:56,450
also work to talk between a your target

00:19:54,050 --> 00:19:58,310
and a particular host so that you can

00:19:56,450 --> 00:20:00,020
make sure that for examples D a few

00:19:58,310 --> 00:20:03,740
works in all the cases that it has

00:20:00,020 --> 00:20:05,510
worked in historically or that your

00:20:03,740 --> 00:20:07,670
networking is still working as expected

00:20:05,510 --> 00:20:09,830
because you're able to load an image

00:20:07,670 --> 00:20:13,100
over the network and verify the checksum

00:20:09,830 --> 00:20:15,080
on it and to some extent we're even able

00:20:13,100 --> 00:20:18,020
to enable and replicate some of those

00:20:15,080 --> 00:20:19,790
tests inside of Travis because we can

00:20:18,020 --> 00:20:22,670
for example say well we're going to fire

00:20:19,790 --> 00:20:24,200
up local networking with qmu therefore

00:20:22,670 --> 00:20:28,520
we're going to do all the network based

00:20:24,200 --> 00:20:33,200
tests every time as well as don't get

00:20:28,520 --> 00:20:34,520
the board farm shortly kind of a final

00:20:33,200 --> 00:20:37,220
thing that I wanted to mention on this

00:20:34,520 --> 00:20:41,360
slide is that we have a script called

00:20:37,220 --> 00:20:45,710
test ffff test SH which will go ahead

00:20:41,360 --> 00:20:49,940
and run a I'm going to say like 30 or so

00:20:45,710 --> 00:20:52,880
different tests but it will run them on

00:20:49,940 --> 00:20:55,070
fat will run them on x2 or lemon x3 and

00:20:52,880 --> 00:20:57,110
will run the mine x4 and these are

00:20:55,070 --> 00:20:58,580
checking for various regressions that

00:20:57,110 --> 00:20:59,960
we've had in the past to make sure that

00:20:58,580 --> 00:21:02,720
we don't accidentally introduce them

00:20:59,960 --> 00:21:05,180
again to make sure that again when the

00:21:02,720 --> 00:21:07,640
writing or file files to a file system

00:21:05,180 --> 00:21:10,790
everything is good and consistent and

00:21:07,640 --> 00:21:14,210
worked as expected we are in the process

00:21:10,790 --> 00:21:17,030
of moving these tests over to test py

00:21:14,210 --> 00:21:19,160
and it is likely that while the current

00:21:17,030 --> 00:21:21,260
tests are sent are limited to working

00:21:19,160 --> 00:21:24,020
only on sandbox we will have that

00:21:21,260 --> 00:21:26,990
initial limitation when we move these

00:21:24,020 --> 00:21:28,820
tests over to test py and from that

00:21:26,990 --> 00:21:30,710
point we will figure out how do we

00:21:28,820 --> 00:21:33,380
enable these tests to be run on real

00:21:30,710 --> 00:21:35,300
hardware as well because that's rings

00:21:33,380 --> 00:21:37,510
there to run into real potential

00:21:35,300 --> 00:21:39,940
complications for example

00:21:37,510 --> 00:21:41,800
if you wanted to send a file up over DfE

00:21:39,940 --> 00:21:45,340
you and have it be written to an export

00:21:41,800 --> 00:21:46,930
file system you want to be sure that the

00:21:45,340 --> 00:21:49,510
particular chipset you happen to be

00:21:46,930 --> 00:21:52,360
using for your MMC or you happen to be

00:21:49,510 --> 00:21:54,040
using for USB nothing look bad over and

00:21:52,360 --> 00:22:02,140
there with a recent change and has

00:21:54,040 --> 00:22:04,030
corrupted your image so if P ba and I

00:22:02,140 --> 00:22:06,550
didn't get the animations right sorry so

00:22:04,030 --> 00:22:08,770
so quote from the readme for a minute P

00:22:06,550 --> 00:22:12,220
rot is a tool for executing tests on

00:22:08,770 --> 00:22:14,050
boards to me this kind of puts it

00:22:12,220 --> 00:22:15,580
somewhere between the functionality one

00:22:14,050 --> 00:22:18,670
would get with something like Jenkins

00:22:15,580 --> 00:22:23,590
and what would get what someone would

00:22:18,670 --> 00:22:25,960
get when using test py hiko shelter who

00:22:23,590 --> 00:22:29,710
is the main author of the tool has a

00:22:25,960 --> 00:22:32,050
very good video up on YouTube that goes

00:22:29,710 --> 00:22:35,830
over how you would use it to run a

00:22:32,050 --> 00:22:38,620
bisect on real hardware to find a real

00:22:35,830 --> 00:22:41,590
problem now the reason I wanted to

00:22:38,620 --> 00:22:45,220
mention this tool right now is that kind

00:22:41,590 --> 00:22:48,580
of on average he is found maybe like one

00:22:45,220 --> 00:22:52,840
or two regressions every release with

00:22:48,580 --> 00:22:55,780
his tool so this is a very important

00:22:52,840 --> 00:22:58,510
tool in that allows us additional ways

00:22:55,780 --> 00:23:02,820
to get at different Hardware depending

00:22:58,510 --> 00:23:02,820
on how you have your board farm set up

00:23:03,450 --> 00:23:10,060
so cover T it's quite likely you've

00:23:08,380 --> 00:23:12,690
heard of this because it is well

00:23:10,060 --> 00:23:15,700
utilized in Linux and in other projects

00:23:12,690 --> 00:23:17,140
they are also a compiler one a number

00:23:15,700 --> 00:23:20,380
one of the number of commercial tools

00:23:17,140 --> 00:23:22,630
that will offer free instances to open

00:23:20,380 --> 00:23:24,940
source projects with small limitations

00:23:22,630 --> 00:23:30,280
to it and we have a community instance

00:23:24,940 --> 00:23:32,680
under da sea route the limitation that

00:23:30,280 --> 00:23:34,720
being a community project gives us as we

00:23:32,680 --> 00:23:36,400
are only allowed what they call one

00:23:34,720 --> 00:23:39,220
configure we are only allowed one of

00:23:36,400 --> 00:23:41,520
what they call a configuration so we are

00:23:39,220 --> 00:23:45,190
only able to build today for sandbox

00:23:41,520 --> 00:23:46,600
which is good and bad in that it means

00:23:45,190 --> 00:23:48,790
that we are unable to get as much

00:23:46,600 --> 00:23:50,279
coverage as we would like on every set

00:23:48,790 --> 00:23:54,730
of architecture code

00:23:50,279 --> 00:23:58,330
but we are able to build a large number

00:23:54,730 --> 00:24:00,580
of platform specific drivers against

00:23:58,330 --> 00:24:02,499
sandbox even though they will not at all

00:24:00,580 --> 00:24:04,899
function but since we're just looking

00:24:02,499 --> 00:24:10,059
for build time coverage and that's

00:24:04,899 --> 00:24:12,129
certainly fine review so in terms of

00:24:10,059 --> 00:24:14,980
what cover tee has gotten us I try and

00:24:12,129 --> 00:24:18,340
run it at least every single time I make

00:24:14,980 --> 00:24:22,299
an RC and over the last year they have

00:24:18,340 --> 00:24:24,730
found and 45 different defects which I

00:24:22,299 --> 00:24:26,019
have passed along to people to introduce

00:24:24,730 --> 00:24:27,159
them and said hey can you please go

00:24:26,019 --> 00:24:30,039
ahead and fix this problem

00:24:27,159 --> 00:24:33,999
okay sure here we go and our code

00:24:30,039 --> 00:24:38,379
quality improves most of these two have

00:24:33,999 --> 00:24:41,350
been in our tooling and these are still

00:24:38,379 --> 00:24:43,090
important bugs to get fixed because this

00:24:41,350 --> 00:24:45,519
is the kind of example code that someone

00:24:43,090 --> 00:24:46,720
might pick up and look for for how would

00:24:45,519 --> 00:24:48,970
they want to write a tool to do

00:24:46,720 --> 00:24:51,429
something else and we want to make sure

00:24:48,970 --> 00:24:54,429
that we are providing good and correct

00:24:51,429 --> 00:24:58,269
example code in these cases there's also

00:24:54,429 --> 00:25:00,580
one case here where in poverty decided

00:24:58,269 --> 00:25:03,399
ditch our fought our version of a k

00:25:00,580 --> 00:25:05,529
build tool had a bug and on okay I

00:25:03,399 --> 00:25:07,509
wonder what put the C ideas for this

00:25:05,529 --> 00:25:09,879
over in Linux liked over the Linux

00:25:07,509 --> 00:25:11,919
project it wasn't reported there for

00:25:09,879 --> 00:25:14,980
whatever reason no one's ever figure out

00:25:11,919 --> 00:25:15,519
why but found the problem fix the

00:25:14,980 --> 00:25:17,440
problem

00:25:15,519 --> 00:25:19,119
push the fix up to Linux we're

00:25:17,440 --> 00:25:21,399
contributing back over to the community

00:25:19,119 --> 00:25:23,409
because we're all just one big open

00:25:21,399 --> 00:25:29,200
source community here it's important to

00:25:23,409 --> 00:25:29,440
work together it's funny because it's

00:25:29,200 --> 00:25:33,039
true

00:25:29,440 --> 00:25:35,350
so one other thing I do want to mention

00:25:33,039 --> 00:25:37,929
about Cafferty is that there are a

00:25:35,350 --> 00:25:40,629
number of other vendors who do have

00:25:37,929 --> 00:25:43,269
commercial instances of this tool and do

00:25:40,629 --> 00:25:46,239
run it on YouTube and they have also

00:25:43,269 --> 00:25:48,509
found and fixed and sent the fixes up to

00:25:46,239 --> 00:25:52,419
us various problems over the last

00:25:48,509 --> 00:25:56,320
several years really and this is good

00:25:52,419 --> 00:26:00,330
and I am happy that companies are seeing

00:25:56,320 --> 00:26:00,330
this as a worthwhile thing to do

00:26:02,150 --> 00:26:06,650
out time to talk ever so briefly about

00:26:04,860 --> 00:26:10,380
board farms

00:26:06,650 --> 00:26:13,800
first of all tanks has their board farm

00:26:10,380 --> 00:26:17,010
which is administered via t-boz and as I

00:26:13,800 --> 00:26:18,960
was saying does find and report back and

00:26:17,010 --> 00:26:21,290
get fixed various regressions and this

00:26:18,960 --> 00:26:21,290
is good

00:26:21,350 --> 00:26:25,950
various private companies that I don't

00:26:24,000 --> 00:26:27,720
want to name but I do believe there are

00:26:25,950 --> 00:26:30,180
some representatives of within the room

00:26:27,720 --> 00:26:34,230
have their own board farms up and

00:26:30,180 --> 00:26:37,470
running and they run tests ey they run

00:26:34,230 --> 00:26:40,260
their own tests and this is good and

00:26:37,470 --> 00:26:43,680
helps us to avoid regressions on various

00:26:40,260 --> 00:26:45,480
platforms that I don't have or that

00:26:43,680 --> 00:26:49,170
other people don't have or people don't

00:26:45,480 --> 00:26:52,380
generally have easy access to finally

00:26:49,170 --> 00:26:54,330
there's my board farm I know my cables

00:26:52,380 --> 00:26:55,170
are a slight mess it would be worse if

00:26:54,330 --> 00:26:58,020
you could see what's underneath that

00:26:55,170 --> 00:26:59,850
shelf that shelf is kind of one of the

00:26:58,020 --> 00:27:02,850
first little tidbits that I want to pass

00:26:59,850 --> 00:27:04,860
back to everyone else I'm using simple

00:27:02,850 --> 00:27:07,860
garage shelving which means that my

00:27:04,860 --> 00:27:11,250
shelf is MDF and when it's time to swap

00:27:07,860 --> 00:27:13,830
out the board I can just toss that out

00:27:11,250 --> 00:27:16,200
go down to the big-box store buy a new

00:27:13,830 --> 00:27:19,200
sheet of MDF and drill the holes where I

00:27:16,200 --> 00:27:20,610
need them to be for what I have my

00:27:19,200 --> 00:27:23,730
shelving doesn't change just the

00:27:20,610 --> 00:27:27,090
individual shelf and so far I'm actually

00:27:23,730 --> 00:27:28,770
pretty happy with that there's a couple

00:27:27,090 --> 00:27:34,650
other things I do want to point out in

00:27:28,770 --> 00:27:37,650
here so first a number of the board's

00:27:34,650 --> 00:27:41,460
over there are using flash air Wi-Fi

00:27:37,650 --> 00:27:44,760
enabled SD cards if you have a board

00:27:41,460 --> 00:27:49,290
that can boot from a fat file system it

00:27:44,760 --> 00:27:53,190
is possible from the command line to

00:27:49,290 --> 00:27:55,860
upload a new binary to it power cycle

00:27:53,190 --> 00:27:59,190
the board and have your tests run on

00:27:55,860 --> 00:28:01,440
your new binary you don't have to rely

00:27:59,190 --> 00:28:04,320
on well if it pricks I need to pull it

00:28:01,440 --> 00:28:06,600
out possibly run JTAG possibly just have

00:28:04,320 --> 00:28:09,510
to do the unfortunate SD card shuffle

00:28:06,600 --> 00:28:11,790
if it breaks but so long as the board is

00:28:09,510 --> 00:28:13,480
able to power on and four it is going to

00:28:11,790 --> 00:28:15,880
be able to power on

00:28:13,480 --> 00:28:17,769
for a couple seconds why the SD card

00:28:15,880 --> 00:28:19,809
will show up on your network you can

00:28:17,769 --> 00:28:21,730
push over a new working version again

00:28:19,809 --> 00:28:25,029
and go from there you unbreakable

00:28:21,730 --> 00:28:27,340
remotely there's some configuration

00:28:25,029 --> 00:28:33,070
details to there I've got a article up

00:28:27,340 --> 00:28:35,139
on that so Jason was just saying they

00:28:33,070 --> 00:28:36,549
don't have a micro version and it's true

00:28:35,139 --> 00:28:39,250
that they unfortunately only come in

00:28:36,549 --> 00:28:42,460
full size but there are a good number of

00:28:39,250 --> 00:28:44,409
easily purchasable adapter board so a

00:28:42,460 --> 00:28:47,139
large number of my boards there actually

00:28:44,409 --> 00:28:48,940
have the full size SD card stuck into an

00:28:47,139 --> 00:28:52,840
adapter stuck into the micro SD slot

00:28:48,940 --> 00:28:54,610
because it's what I need to do is I

00:28:52,840 --> 00:28:56,500
can't change the hardware and I really

00:28:54,610 --> 00:28:58,510
want this functionality because it means

00:28:56,500 --> 00:29:00,309
that whenever I do a push like for

00:28:58,510 --> 00:29:02,200
example later tonight I've gotten a pull

00:29:00,309 --> 00:29:03,840
request I'm going to grab it I'm going

00:29:02,200 --> 00:29:06,370
to push it out to where I do test

00:29:03,840 --> 00:29:09,159
Travis touch the AI is going to fire off

00:29:06,370 --> 00:29:10,870
it's going to run it to our run build to

00:29:09,159 --> 00:29:13,059
hour-long build cycle it's going to run

00:29:10,870 --> 00:29:14,649
QM you want a bunch of things my board

00:29:13,059 --> 00:29:16,510
farm is going to trigger and it's also

00:29:14,649 --> 00:29:19,380
going to run on all of those pieces of

00:29:16,510 --> 00:29:23,139
real hardware without me doing anything

00:29:19,380 --> 00:29:28,450
so the next thing is the yep kit why

00:29:23,139 --> 00:29:31,029
cush what this is is a USB hub where the

00:29:28,450 --> 00:29:34,320
ability to control power to all of the

00:29:31,029 --> 00:29:36,220
other ports in software isn't just a

00:29:34,320 --> 00:29:39,960
accidental feature that works

00:29:36,220 --> 00:29:43,809
it is a supported feature of the product

00:29:39,960 --> 00:29:45,789
since basically forever USB as a

00:29:43,809 --> 00:29:47,049
specification has allowed for the

00:29:45,789 --> 00:29:50,139
ability to say that while you can

00:29:47,049 --> 00:29:53,169
remotely control power ports but for the

00:29:50,139 --> 00:29:56,320
longest time it was more luck than

00:29:53,169 --> 00:29:59,169
design if you picked up a USB hub where

00:29:56,320 --> 00:30:02,200
this functionality works that works

00:29:59,169 --> 00:30:05,500
extremely reliably in it what I consider

00:30:02,200 --> 00:30:08,320
a must-have for certain boards I have

00:30:05,500 --> 00:30:10,389
that if you have USB plugged into the

00:30:08,320 --> 00:30:12,730
gadget port in addition to providing

00:30:10,389 --> 00:30:15,639
power power however it normally accepts

00:30:12,730 --> 00:30:17,860
it just enough power will leak in from

00:30:15,639 --> 00:30:20,139
the USB side such that the board will

00:30:17,860 --> 00:30:22,570
never fully reset and therefore the

00:30:20,139 --> 00:30:25,179
board get kind of wedged and either have

00:30:22,570 --> 00:30:25,970
to take it out of your lab or you get

00:30:25,179 --> 00:30:27,980
something like this

00:30:25,970 --> 00:30:29,930
where you can remotely turn off that USB

00:30:27,980 --> 00:30:31,460
port there's no power leaking in that

00:30:29,930 --> 00:30:33,800
way you can turn off the power

00:30:31,460 --> 00:30:36,200
everywhere else the board is really off

00:30:33,800 --> 00:30:38,360
then you bring it all back up and you

00:30:36,200 --> 00:30:41,420
have successfully reset your board and

00:30:38,360 --> 00:30:43,760
you worked around a limitation of the

00:30:41,420 --> 00:30:46,550
actual hardware you have that you may

00:30:43,760 --> 00:30:47,690
wish wasn't there but there it is and we

00:30:46,550 --> 00:31:00,050
have to live in the reality-based

00:30:47,690 --> 00:31:02,510
community yeah so the question is if it

00:31:00,050 --> 00:31:05,690
only comes in a 4 port version and there

00:31:02,510 --> 00:31:09,380
is a 4 and I want to say 6 port version

00:31:05,690 --> 00:31:12,760
available there nor how many forces the

00:31:09,380 --> 00:31:14,570
maximum you're shaking your head yeah I

00:31:12,760 --> 00:31:18,950
thought that alert

00:31:14,570 --> 00:31:21,670
I would this is the law the short answer

00:31:18,950 --> 00:31:25,940
is to check the website because I was 43

00:31:21,670 --> 00:31:29,990
ok I must have been looking at something

00:31:25,940 --> 00:31:43,420
else I apologize and even at 3/4 it is

00:31:29,990 --> 00:31:45,710
still very useful to have yes yes so the

00:31:43,420 --> 00:31:48,650
so the comment is that there are

00:31:45,710 --> 00:31:51,590
additional USB hubs that will provide

00:31:48,650 --> 00:31:55,310
this functionality however they do have

00:31:51,590 --> 00:31:57,290
a much larger price tag to them the very

00:31:55,310 --> 00:31:59,990
nice thing about this is that I believe

00:31:57,290 --> 00:32:02,600
it was 30 euros and another 7 for

00:31:59,990 --> 00:32:04,910
shipping to my house in North Carolina

00:32:02,600 --> 00:32:07,730
it only took about a week to get here

00:32:04,910 --> 00:32:11,450
and it works perfectly I could have

00:32:07,730 --> 00:32:13,810
gotten a larger one for a lot more but

00:32:11,450 --> 00:32:15,860
this does exactly what I need to do

00:32:13,810 --> 00:32:19,340
because the final thing I want to point

00:32:15,860 --> 00:32:20,900
out is up in the upper left corner you

00:32:19,340 --> 00:32:22,820
might have spotted a relay controller

00:32:20,900 --> 00:32:26,810
these are used for a couple of different

00:32:22,820 --> 00:32:29,180
things in modern look for farms what I'm

00:32:26,810 --> 00:32:31,940
using it for is simply the ability to

00:32:29,180 --> 00:32:34,190
toggle the reset line on certain boards

00:32:31,940 --> 00:32:35,970
that I have however a much better

00:32:34,190 --> 00:32:38,040
application of it

00:32:35,970 --> 00:32:40,320
it might get to at some point with my

00:32:38,040 --> 00:32:44,250
own lab is that you can utilize this and

00:32:40,320 --> 00:32:46,950
an off-the-shelf ATX power supply to

00:32:44,250 --> 00:32:59,730
provide the power to your boards in a

00:32:46,950 --> 00:33:01,470
large number of cases so the comment is

00:32:59,730 --> 00:33:03,810
that the link I provided to the eight

00:33:01,470 --> 00:33:07,470
port relay that I have that same company

00:33:03,810 --> 00:33:14,760
makes 16 and 24 at 16 and 24 port

00:33:07,470 --> 00:33:16,980
versions as well yeah yeah so the quite

00:33:14,760 --> 00:33:19,080
the common is about digital loggers and

00:33:16,980 --> 00:33:22,170
one thing that I don't have on my list

00:33:19,080 --> 00:33:24,300
here is that my power control is using

00:33:22,170 --> 00:33:27,420
two separate digital loggers power

00:33:24,300 --> 00:33:29,460
switches and whenever I need to turn one

00:33:27,420 --> 00:33:31,440
of the board's offer on I have a script

00:33:29,460 --> 00:33:34,500
will call curl with the correct username

00:33:31,440 --> 00:33:36,660
password port and what I wanted to do

00:33:34,500 --> 00:33:39,900
and we'll turn the board's off and on

00:33:36,660 --> 00:33:42,750
remotely the kind of downside to this is

00:33:39,900 --> 00:33:45,270
that it can start to get both expensive

00:33:42,750 --> 00:33:47,460
and kind of cluttery

00:33:45,270 --> 00:33:49,770
depending on just how many boards you

00:33:47,460 --> 00:33:51,690
want to have in your board farm which is

00:33:49,770 --> 00:34:01,380
why people have moved on to using relays

00:33:51,690 --> 00:34:04,560
and ATX control power supply so the

00:34:01,380 --> 00:34:07,470
comment is that you can also use a relay

00:34:04,560 --> 00:34:11,130
to simulate button presses if you have

00:34:07,470 --> 00:34:14,010
the things wired up correctly I don't

00:34:11,130 --> 00:34:16,950
have that is a pet as a test in my setup

00:34:14,010 --> 00:34:18,810
but I could see various uses for that

00:34:16,950 --> 00:34:21,480
depending on how your hardware is and

00:34:18,810 --> 00:34:25,790
what one needs to do in order to put it

00:34:21,480 --> 00:34:25,790
into the correct mode to toggle flashing

00:34:26,360 --> 00:34:32,130
so now we're going to move on to various

00:34:29,250 --> 00:34:34,830
parts of you boot that have changed over

00:34:32,130 --> 00:34:37,710
the last several years the first thing

00:34:34,830 --> 00:34:39,870
is that the Venerable make all script

00:34:37,710 --> 00:34:41,910
that you might have seen if you've tried

00:34:39,870 --> 00:34:43,560
to build an older version of you boot

00:34:41,910 --> 00:34:47,130
and you want it to build more than one

00:34:43,560 --> 00:34:49,859
target has been retired July of the past

00:34:47,130 --> 00:34:53,039
year we finally said our replacement is

00:34:49,859 --> 00:34:55,980
good the replacement here is called

00:34:53,039 --> 00:34:59,130
build man and it was introduced back in

00:34:55,980 --> 00:35:02,609
April 2013 and after about three years

00:34:59,130 --> 00:35:05,069
we said ok all of the use cases that one

00:35:02,609 --> 00:35:06,989
might have form a call we can support

00:35:05,069 --> 00:35:09,930
those in this new tool and we can do a

00:35:06,989 --> 00:35:13,380
lot of other cool things as well build

00:35:09,930 --> 00:35:16,380
men is a lot more flexible this is in

00:35:13,380 --> 00:35:18,029
part because instead of working off of

00:35:16,380 --> 00:35:21,299
the environment because it's a shell

00:35:18,029 --> 00:35:23,309
script we read in an NIT file and we can

00:35:21,299 --> 00:35:26,150
configure to say that here where I want

00:35:23,309 --> 00:35:29,009
you to look for your various tool chains

00:35:26,150 --> 00:35:32,670
so this means that we can do in a single

00:35:29,009 --> 00:35:35,069
command build multiple architectures or

00:35:32,670 --> 00:35:37,140
for example if you wanted to say fill

00:35:35,069 --> 00:35:39,269
everything from freescale you can just

00:35:37,140 --> 00:35:41,220
say build off build man free scale and

00:35:39,269 --> 00:35:43,259
that will build all the PowerPC stuff

00:35:41,220 --> 00:35:45,239
that will build all the 32-bit arm stuff

00:35:43,259 --> 00:35:47,309
that will build all the 64-bit arm stuff

00:35:45,239 --> 00:35:48,359
without you having to figure out well

00:35:47,309 --> 00:35:50,039
here are the different environment

00:35:48,359 --> 00:35:53,999
variables I need to set to have the

00:35:50,039 --> 00:35:56,249
correct tool chain spawns further we can

00:35:53,999 --> 00:35:58,170
even define what it is we want to build

00:35:56,249 --> 00:36:01,109
in a single command using regular

00:35:58,170 --> 00:36:05,099
expressions in order to support Travis

00:36:01,109 --> 00:36:07,440
CI and there's limitation of any job in

00:36:05,099 --> 00:36:10,769
your free instance must be done in about

00:36:07,440 --> 00:36:13,079
50 minutes we do things like say alright

00:36:10,769 --> 00:36:15,809
I want to build everything that is an

00:36:13,079 --> 00:36:17,160
IMX board but is not from free scale

00:36:15,809 --> 00:36:20,009
because I have a different jobs will

00:36:17,160 --> 00:36:21,930
cover buildings free scale and IMX that

00:36:20,009 --> 00:36:24,210
I can split this large number of boards

00:36:21,930 --> 00:36:30,269
down into something that will be done in

00:36:24,210 --> 00:36:33,539
just under 50 minutes another really

00:36:30,269 --> 00:36:36,599
handy thing is that build man will let

00:36:33,539 --> 00:36:39,509
us do build for two different revisions

00:36:36,599 --> 00:36:42,839
or if you wanted it to every revision in

00:36:39,509 --> 00:36:45,299
a given series and tell you for each of

00:36:42,839 --> 00:36:47,670
those commits for every board that

00:36:45,299 --> 00:36:51,059
you've told it to build did the binary

00:36:47,670 --> 00:36:53,759
size change at all if it did can you

00:36:51,059 --> 00:36:57,599
tell me what functions grew or shrunk in

00:36:53,759 --> 00:36:59,670
size between those builds we do care

00:36:57,599 --> 00:37:02,759
about the size of our binary so this is

00:36:59,670 --> 00:37:03,569
an important feature and it also allows

00:37:02,759 --> 00:37:05,819
doing other

00:37:03,569 --> 00:37:08,369
forms of regression testing a lot easier

00:37:05,819 --> 00:37:10,259
for example and I'll talk about when

00:37:08,369 --> 00:37:12,569
we're doing cake and big migration I'll

00:37:10,259 --> 00:37:14,309
talk about a little bit we can go ahead

00:37:12,569 --> 00:37:15,690
and say build everything before we do

00:37:14,309 --> 00:37:17,009
the migration build everything

00:37:15,690 --> 00:37:19,650
afterwards and there should be

00:37:17,009 --> 00:37:21,749
absolutely no size differences because

00:37:19,650 --> 00:37:25,319
we've just moved an option from a header

00:37:21,749 --> 00:37:26,999
file to a cake config file but it still

00:37:25,319 --> 00:37:28,559
should have the same value as before all

00:37:26,999 --> 00:37:32,359
the same code as before should be built

00:37:28,559 --> 00:37:32,359
the binary should be exactly the same

00:37:32,839 --> 00:37:41,369
then man this is a relatively new tool

00:37:37,529 --> 00:37:43,859
that we've introduced and this is for

00:37:41,369 --> 00:37:47,609
creating a functional output from more

00:37:43,859 --> 00:37:50,549
than one binary we use the device tree

00:37:47,609 --> 00:37:53,249
syntax to describe how we want to be put

00:37:50,549 --> 00:37:55,499
together I can see some grins throughout

00:37:53,249 --> 00:37:57,509
the audience and I want to point out

00:37:55,499 --> 00:38:00,660
that making use of the device tree

00:37:57,509 --> 00:38:03,599
syntax to do other things is a

00:38:00,660 --> 00:38:06,059
relatively common practice especially in

00:38:03,599 --> 00:38:07,619
u-boot when we're building a fit image

00:38:06,059 --> 00:38:09,449
for example which is something we've had

00:38:07,619 --> 00:38:12,089
for a long time now and why it's not

00:38:09,449 --> 00:38:19,049
part of the slides that syntax as well

00:38:12,089 --> 00:38:20,609
is device trees so the best way to

00:38:19,049 --> 00:38:24,209
explain this by showing a couple of

00:38:20,609 --> 00:38:28,319
examples so what we used in man for now

00:38:24,209 --> 00:38:30,390
on x86 is to say that here is where we

00:38:28,319 --> 00:38:32,519
need to place each of the files that

00:38:30,390 --> 00:38:36,930
must be in the final image where they

00:38:32,519 --> 00:38:39,390
must go on the maps at the Romick realms

00:38:36,930 --> 00:38:40,859
we have to have in order for the chip to

00:38:39,390 --> 00:38:43,680
work correctly we can say that you boot

00:38:40,859 --> 00:38:46,949
goes over here our binary the blog to

00:38:43,680 --> 00:38:49,079
the VGA goes over here if it's using SSP

00:38:46,949 --> 00:38:52,380
so that blob goes over there and we can

00:38:49,079 --> 00:38:54,719
pad things out as we need to so that in

00:38:52,380 --> 00:38:57,329
the end we get one file that can be

00:38:54,719 --> 00:38:59,150
written wherever it needs to go and work

00:38:57,329 --> 00:39:02,009
correctly

00:38:59,150 --> 00:39:05,430
another example here is that on all

00:39:02,009 --> 00:39:08,099
winter devices it is quite common to say

00:39:05,430 --> 00:39:10,880
that you want to have one file which

00:39:08,099 --> 00:39:14,009
contains both SPL and you boot itself

00:39:10,880 --> 00:39:14,800
this is helpful in writing to an SD card

00:39:14,009 --> 00:39:17,290
what

00:39:14,800 --> 00:39:21,640
this is extremely required when you want

00:39:17,290 --> 00:39:23,560
to save food over USB so we say that SPL

00:39:21,640 --> 00:39:25,300
part goes over here then we Pat it out a

00:39:23,560 --> 00:39:29,320
little bit and then we play see you good

00:39:25,300 --> 00:39:33,820
over there the final example of what

00:39:29,320 --> 00:39:37,570
this is really useful for is on a AR 64

00:39:33,820 --> 00:39:40,480
or RB 8 we can say that we wanted me to

00:39:37,570 --> 00:39:42,580
put a TF over here we want to put you

00:39:40,480 --> 00:39:45,550
boot over there we want to put other

00:39:42,580 --> 00:39:49,270
blobs where they have to be within this

00:39:45,550 --> 00:39:58,360
file so that we can write a single image

00:39:49,270 --> 00:40:02,740
that will work on our arm v8 platform so

00:39:58,360 --> 00:40:06,970
they build and k config historically you

00:40:02,740 --> 00:40:09,760
boot had its own build system but for

00:40:06,970 --> 00:40:13,840
about three years now we have had K

00:40:09,760 --> 00:40:16,240
billed as the make logic in the in you

00:40:13,840 --> 00:40:20,080
boot so whenever you look at a you make

00:40:16,240 --> 00:40:22,510
file it's the same exact syntax as the

00:40:20,080 --> 00:40:25,240
kernel this also means that whatever

00:40:22,510 --> 00:40:27,730
tricks one would do in the kernel - for

00:40:25,240 --> 00:40:30,430
example build a single file or to get

00:40:27,730 --> 00:40:32,560
the dot I file or pre process your

00:40:30,430 --> 00:40:35,380
assemble or so on and so forth all of

00:40:32,560 --> 00:40:38,410
those same exact chips and tricks work

00:40:35,380 --> 00:40:43,800
the same exact way here it is the same

00:40:38,410 --> 00:40:47,290
build system the other part of this is

00:40:43,800 --> 00:40:48,670
transitioning from having a header file

00:40:47,290 --> 00:40:50,710
that describes what features are going

00:40:48,670 --> 00:40:53,590
to be enabled to using the K config

00:40:50,710 --> 00:40:55,840
tools and syntax that is the kernel this

00:40:53,590 --> 00:41:00,010
transition has been in progress pretty

00:40:55,840 --> 00:41:03,760
much since then our implementation of

00:41:00,010 --> 00:41:09,250
the K config language itself is in sync

00:41:03,760 --> 00:41:11,860
with the 4.10 kernel one kind of

00:41:09,250 --> 00:41:15,070
difference between you boot and our use

00:41:11,860 --> 00:41:18,670
of K config and the kernel and its use

00:41:15,070 --> 00:41:20,200
of K config or at least my the way I

00:41:18,670 --> 00:41:23,800
look at how the kernel has historically

00:41:20,200 --> 00:41:26,500
used it is that we want to have more

00:41:23,800 --> 00:41:28,450
logic in the K config files in terms of

00:41:26,500 --> 00:41:31,900
giving a correct default

00:41:28,450 --> 00:41:33,430
value for a given platform as opposed to

00:41:31,900 --> 00:41:36,400
saying that well we'll just have a

00:41:33,430 --> 00:41:38,650
default of zero or an empty string or

00:41:36,400 --> 00:41:41,770
whatever and leave it up to the person

00:41:38,650 --> 00:41:45,880
creating the board def config file to

00:41:41,770 --> 00:41:48,490
put in the right value we do this to

00:41:45,880 --> 00:41:50,260
both ensure that it is more likely when

00:41:48,490 --> 00:41:52,420
a person introduces a new board that

00:41:50,260 --> 00:41:55,359
they will get something that works but

00:41:52,420 --> 00:41:58,570
also to reduce the size of our def

00:41:55,359 --> 00:42:01,480
config files and the final thing I want

00:41:58,570 --> 00:42:03,579
to say about K config is that with 410

00:42:01,480 --> 00:42:07,329
the kernel has introduced a new keyword

00:42:03,579 --> 00:42:09,760
called imply which lets you say that if

00:42:07,329 --> 00:42:12,369
you have this one option set you really

00:42:09,760 --> 00:42:15,520
ought to have these other things enabled

00:42:12,369 --> 00:42:18,520
as well but it is still possible and

00:42:15,520 --> 00:42:20,890
easy to do for the user to say no I know

00:42:18,520 --> 00:42:22,930
better I'm customizing this board based

00:42:20,890 --> 00:42:27,099
on what I've done here I'm going to turn

00:42:22,930 --> 00:42:28,720
these things off but still have the def

00:42:27,099 --> 00:42:30,820
config say that well we're going to

00:42:28,720 --> 00:42:32,500
start with the EBM the evm has lots of

00:42:30,820 --> 00:42:35,500
stuff we're going to make sure that all

00:42:32,500 --> 00:42:37,869
these things are enabled or our psalms

00:42:35,500 --> 00:42:40,810
says that we have the following features

00:42:37,869 --> 00:42:42,250
on it these things should be enabled but

00:42:40,810 --> 00:42:44,050
if your hardware that you're using the

00:42:42,250 --> 00:42:49,869
psalm with doesn't actually need it you

00:42:44,050 --> 00:42:53,680
can still easily turn it off some stuff

00:42:49,869 --> 00:42:56,740
that we have in progress historically

00:42:53,680 --> 00:42:58,560
you boot has not had a driver model and

00:42:56,740 --> 00:43:01,270
that has something that has been

00:42:58,560 --> 00:43:04,750
changing over the last several years and

00:43:01,270 --> 00:43:07,960
our conversion of everything to driver

00:43:04,750 --> 00:43:10,240
model is not done it is making good

00:43:07,960 --> 00:43:13,450
progress but there are still obstacles

00:43:10,240 --> 00:43:16,839
we need to overcome because we do have

00:43:13,450 --> 00:43:19,030
binary size constraints and we need to

00:43:16,839 --> 00:43:21,609
figure out the best places to make the

00:43:19,030 --> 00:43:23,950
trade-offs between code reusability and

00:43:21,609 --> 00:43:28,180
still producing something that will

00:43:23,950 --> 00:43:30,339
function on our hardware additionally we

00:43:28,180 --> 00:43:32,319
want to make use of the device tree for

00:43:30,339 --> 00:43:35,170
finding out our platform specific data

00:43:32,319 --> 00:43:37,540
where things are addresses so on and so

00:43:35,170 --> 00:43:39,609
forth but once again we start to run

00:43:37,540 --> 00:43:41,170
into the problem of well if it's in the

00:43:39,609 --> 00:43:43,089
device tree

00:43:41,170 --> 00:43:44,440
how can we make use of that if it's

00:43:43,089 --> 00:43:47,770
something we need to have really early

00:43:44,440 --> 00:43:49,299
on and I was sitting in the Zephyr talk

00:43:47,770 --> 00:43:51,520
on using device trees this morning I

00:43:49,299 --> 00:43:52,990
went oh that is really awesome I need to

00:43:51,520 --> 00:43:54,660
try and work with that community as well

00:43:52,990 --> 00:43:56,980
to figure out how we can leverage that

00:43:54,660 --> 00:43:58,839
because that's really cool and will also

00:43:56,980 --> 00:44:00,839
help us solve some of our other problems

00:43:58,839 --> 00:44:03,069
that I'm going to be talking about

00:44:00,839 --> 00:44:05,500
because we need to figure out how to use

00:44:03,069 --> 00:44:08,290
both driver models and device tree and

00:44:05,500 --> 00:44:10,930
SPL but again SPL is something where we

00:44:08,290 --> 00:44:14,500
are often size constraints have a size

00:44:10,930 --> 00:44:17,140
constraints kind of a couple examples

00:44:14,500 --> 00:44:20,049
here are the smart web platform which is

00:44:17,140 --> 00:44:21,940
I believe an atmega 91 based platform

00:44:20,049 --> 00:44:24,220
where we have about 12 kilobytes of

00:44:21,940 --> 00:44:27,309
memory and another example would be the

00:44:24,220 --> 00:44:30,730
nips creator CI 20 where the ROM will

00:44:27,309 --> 00:44:31,930
only load 14 kilobytes and maybe even a

00:44:30,730 --> 00:44:34,839
little bit less there's kind of some

00:44:31,930 --> 00:44:37,210
experimentation that the documentation

00:44:34,839 --> 00:44:42,880
says 14 but if you actually try wants a

00:44:37,210 --> 00:44:45,490
little bit less actually making good use

00:44:42,880 --> 00:44:48,700
of the device tree throughout is still

00:44:45,490 --> 00:44:50,440
something that is in progress and I am

00:44:48,700 --> 00:44:55,510
confident that we will work through the

00:44:50,440 --> 00:44:58,420
problems on to solve this includes

00:44:55,510 --> 00:45:00,579
moving from leaf potentially moving from

00:44:58,420 --> 00:45:03,760
a static device tree once we are up and

00:45:00,579 --> 00:45:06,609
running to a live tree that reflects

00:45:03,760 --> 00:45:08,319
changes it might have gone on as we move

00:45:06,609 --> 00:45:10,299
it up the hardware and notice that oh

00:45:08,319 --> 00:45:12,040
we're actually happen to be on this

00:45:10,299 --> 00:45:13,720
variant of the hardware we don't have

00:45:12,040 --> 00:45:16,240
this particular peripheral let's turn

00:45:13,720 --> 00:45:17,740
that off or we need to do these

00:45:16,240 --> 00:45:19,390
particular runtime tweaks because

00:45:17,740 --> 00:45:22,089
something is in one location and not

00:45:19,390 --> 00:45:24,339
another that is also however something

00:45:22,089 --> 00:45:30,730
we still need to decide if it is the

00:45:24,339 --> 00:45:32,589
best choice for us yeah so the next

00:45:30,730 --> 00:45:34,630
thing is once we've talked about live

00:45:32,589 --> 00:45:36,010
trees some more and there's also things

00:45:34,630 --> 00:45:38,619
that need to be solved out here in terms

00:45:36,010 --> 00:45:40,390
of working with overlays is once we've

00:45:38,619 --> 00:45:42,549
done all this does it make sense to say

00:45:40,390 --> 00:45:44,230
well we have our functional incorrect

00:45:42,549 --> 00:45:46,059
live device tree let's just pass that

00:45:44,230 --> 00:45:48,910
straight on to the kernel or do we still

00:45:46,059 --> 00:45:50,770
need to load the device tree again apply

00:45:48,910 --> 00:45:55,510
logic and so on and so forth

00:45:50,770 --> 00:45:59,560
then pass that over so now near term

00:45:55,510 --> 00:46:02,280
goals this is not a road map this is my

00:45:59,560 --> 00:46:04,930
hopes for where the project will be by

00:46:02,280 --> 00:46:09,070
maybe this time next year maybe a little

00:46:04,930 --> 00:46:13,150
bit sooner I really really want to see a

00:46:09,070 --> 00:46:15,610
finish migration 2k config this calendar

00:46:13,150 --> 00:46:18,240
year there's still a couple of

00:46:15,610 --> 00:46:21,430
challenges and hurdles to be sorted out

00:46:18,240 --> 00:46:24,070
there are some cases today we're in our

00:46:21,430 --> 00:46:27,850
config dot H files we have some logic

00:46:24,070 --> 00:46:29,680
that will be hard to translate but I am

00:46:27,850 --> 00:46:34,090
confident we can figure out a good way

00:46:29,680 --> 00:46:36,160
to do that one of the things that I've

00:46:34,090 --> 00:46:38,560
seen people talk about at various points

00:46:36,160 --> 00:46:42,490
is wouldn't it be much easier to have

00:46:38,560 --> 00:46:44,830
just SPL load up a Linux that can turn

00:46:42,490 --> 00:46:47,170
to whatever flashing or recovery needs

00:46:44,830 --> 00:46:49,780
to happen and then Kay exact into the

00:46:47,170 --> 00:46:52,570
real Colonel if there are people that

00:46:49,780 --> 00:46:57,370
want to make this happen I am happy to

00:46:52,570 --> 00:47:01,210
offer assistance I really want to see it

00:46:57,370 --> 00:47:04,270
has more and in some cases better tests

00:47:01,210 --> 00:47:06,520
in our test op py framework this is

00:47:04,270 --> 00:47:08,650
again something that every time I am

00:47:06,520 --> 00:47:12,220
going to go ahead and push changes out

00:47:08,650 --> 00:47:14,410
to master test dot py gets run on a

00:47:12,220 --> 00:47:16,690
large number of instances and all of

00:47:14,410 --> 00:47:19,540
that has to come back positive before I

00:47:16,690 --> 00:47:23,850
actually make the changes go live so the

00:47:19,540 --> 00:47:23,850
more tests we have here the better I

00:47:24,060 --> 00:47:28,450
would really like to strike up the

00:47:26,320 --> 00:47:32,230
conversation with kernel dot C kernel CI

00:47:28,450 --> 00:47:35,200
org again because there are problems in

00:47:32,230 --> 00:47:36,940
the kernel or at least in the community

00:47:35,200 --> 00:47:41,140
at large that we can help each other

00:47:36,940 --> 00:47:44,110
with for example in the 4.6 time frame

00:47:41,140 --> 00:47:48,190
the kernel introduced a change to their

00:47:44,110 --> 00:47:50,920
boot Flags on x86 that broke us broke or

00:47:48,190 --> 00:47:53,170
boot or broke anyone else that didn't

00:47:50,920 --> 00:47:57,130
happen to catch it at the time and if

00:47:53,170 --> 00:47:59,650
kernel see I did have loops of all of

00:47:57,130 --> 00:48:02,470
different firmwares booting out of qmu

00:47:59,650 --> 00:48:04,359
running the kernel this issue would have

00:48:02,470 --> 00:48:10,869
been caught immediately rather than

00:48:04,359 --> 00:48:12,880
and more haphazardly finally I want to

00:48:10,869 --> 00:48:16,960
find more time to answer Stack Overflow

00:48:12,880 --> 00:48:19,509
and again I see some well-deserved grins

00:48:16,960 --> 00:48:23,739
out in the audience but while I have

00:48:19,509 --> 00:48:26,380
seen my fair share of bad answers and

00:48:23,739 --> 00:48:28,359
bad questions I believe it is important

00:48:26,380 --> 00:48:30,430
to be able to have enough reputation out

00:48:28,359 --> 00:48:32,829
there to down both the bad answers and

00:48:30,430 --> 00:48:34,690
bad questions and up both the good ones

00:48:32,829 --> 00:48:37,690
because it is much better for our

00:48:34,690 --> 00:48:39,640
community if when a new developer or

00:48:37,690 --> 00:48:41,529
user heads to their favorite search

00:48:39,640 --> 00:48:43,690
engine throws their problem at it and

00:48:41,529 --> 00:48:46,299
they get a result on Stack Overflow they

00:48:43,690 --> 00:48:48,880
get a good answer not someone else

00:48:46,299 --> 00:48:52,749
asking the same question with no votes

00:48:48,880 --> 00:48:53,769
up or down and no answer to it and then

00:48:52,749 --> 00:48:55,749
in the comments that becomes

00:48:53,769 --> 00:48:57,759
documentation and it becomes

00:48:55,749 --> 00:48:59,170
documentation or it just becomes oh well

00:48:57,759 --> 00:49:01,180
this just doesn't work I'm going to move

00:48:59,170 --> 00:49:03,190
on and do something else rather than oh

00:49:01,180 --> 00:49:05,289
well I can answer that I know what

00:49:03,190 --> 00:49:07,630
you're trying to do there or I'm sorry

00:49:05,289 --> 00:49:10,480
that's a bad question please ask it in a

00:49:07,630 --> 00:49:15,009
different way so that it's more specific

00:49:10,480 --> 00:49:19,359
I also really want to expand our cover

00:49:15,009 --> 00:49:22,569
tea coverage this includes having more

00:49:19,359 --> 00:49:24,099
things be built in sandbox by default is

00:49:22,569 --> 00:49:25,960
maybe a little over a year ago now when

00:49:24,099 --> 00:49:27,099
I last went through and said well here

00:49:25,960 --> 00:49:29,049
are all the commands that I can easily

00:49:27,099 --> 00:49:32,049
build in sandbox let's update the def

00:49:29,049 --> 00:49:35,680
config that needs to happen again but by

00:49:32,049 --> 00:49:38,230
that same token it would also be really

00:49:35,680 --> 00:49:39,789
helpful if more people said that hey I

00:49:38,230 --> 00:49:42,220
would like to review the defect that

00:49:39,789 --> 00:49:43,660
poverty finds because that's already

00:49:42,220 --> 00:49:46,059
done the hard work of finding a problem

00:49:43,660 --> 00:49:47,890
I can read the code and provide a

00:49:46,059 --> 00:49:49,779
solution to that and that's the way I

00:49:47,890 --> 00:49:52,329
can contribute back to the community

00:49:49,779 --> 00:49:55,599
there's a lot of outstanding defects

00:49:52,329 --> 00:49:57,579
there I am only mostly certain that we

00:49:55,599 --> 00:49:59,529
don't have an egg on the face type bug

00:49:57,579 --> 00:50:00,849
as happened to grub when there is zero

00:49:59,529 --> 00:50:02,950
here's how you get around that password

00:50:00,849 --> 00:50:10,870
issue that happened to them a while ago

00:50:02,950 --> 00:50:14,830
but who can say and with that question

00:50:10,870 --> 00:50:16,930
and one of the things that was always

00:50:14,830 --> 00:50:19,240
prompted coreboot we're all the binary

00:50:16,930 --> 00:50:21,640
blobs that we acquired by hand cells be

00:50:19,240 --> 00:50:23,470
able to anything yeah are you finding

00:50:21,640 --> 00:50:28,180
that they're more cooperative with you

00:50:23,470 --> 00:50:31,150
or situation so the answer is that we

00:50:28,180 --> 00:50:34,360
work with Intel and what they provide to

00:50:31,150 --> 00:50:35,980
us as best we can and I've been given

00:50:34,360 --> 00:50:38,940
the signal that we're out of time so

00:50:35,980 --> 00:50:38,940
thank you for attending

00:50:39,430 --> 00:50:42,710

YouTube URL: https://www.youtube.com/watch?v=dKBUSMa6oZI


