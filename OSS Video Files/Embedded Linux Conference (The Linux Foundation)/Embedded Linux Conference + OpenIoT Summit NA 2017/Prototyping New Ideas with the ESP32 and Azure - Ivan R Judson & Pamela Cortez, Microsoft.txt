Title: Prototyping New Ideas with the ESP32 and Azure - Ivan R Judson & Pamela Cortez, Microsoft
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Prototyping New Ideas with the ESP32 and Azure - Ivan R Judson & Pamela Cortez, Microsoft

Prototyping New Ideas with the ESP32 and Azure - The Internet of Things is a large complex space with solutions provided by many organizations for many components; from devices, sdks, management tools, gateways, protocols, cloud storage and processing, complex event processing, data management, analytics, machine learning to solutions that include all of these technologies. Figuring out what's necessary to get started converting an idea to a real prototype and validate that it works -- end-to-end -- is a daunting task facing many. In this talk an idea will be converted to a prototype including the end-to-end software using the inexpensive but fully capable ESP32 and Azure. During this process, the open source tools and sdks will be highlighted, providing a low cost experience for product prototyping.

About Ivan Judson
Ivan R. Judson is a Senior Engineer in the Partner Catalyst team at Microsoft. While at Argonne National Laboratory he built high performance computing systems, large format projection displays, and advanced collaborative workspaces. At Montana State University he taught undergraduate and graduate Computer Science and created the Research Computing Group to consolidate, stabilize, and productionize compute and data management services for the $100M research enterprise.
Captions: 
	00:00:00,000 --> 00:00:03,780
I think we have more people than

00:00:01,800 --> 00:00:06,899
registered so we can wait

00:00:03,780 --> 00:00:09,840
well what time is it say my watch noise

00:00:06,899 --> 00:00:15,030
oh it says now we can start anytime sup

00:00:09,840 --> 00:00:17,100
you okay alrighty I'll get started

00:00:15,030 --> 00:00:18,680
where's our little doohickey you got to

00:00:17,100 --> 00:00:23,460
do Hickey okay

00:00:18,680 --> 00:00:25,140
welcome to the 4/20 session at the which

00:00:23,460 --> 00:00:27,390
day is it are we the embedded the next

00:00:25,140 --> 00:00:29,880
day of the open IOT day or are they all

00:00:27,390 --> 00:00:33,660
the same day now that's me okay welcome

00:00:29,880 --> 00:00:37,440
to our talk on prototyping with DSP 32

00:00:33,660 --> 00:00:40,500
I'm Ivan Judson and my colleague Pamela

00:00:37,440 --> 00:00:42,120
Cortez to give you a little bit of

00:00:40,500 --> 00:00:43,739
context about what we're talking about

00:00:42,120 --> 00:00:48,120
who we are and what's going on

00:00:43,739 --> 00:00:51,059
I am a sort of career academic who's

00:00:48,120 --> 00:00:52,770
gone into the commercial world I have

00:00:51,059 --> 00:00:55,590
been three years at Microsoft at a

00:00:52,770 --> 00:00:59,070
start-up before that and in my role at

00:00:55,590 --> 00:01:00,989
Microsoft I helped sort of get our hands

00:00:59,070 --> 00:01:03,809
wrapped around partner opportunities in

00:01:00,989 --> 00:01:07,380
IOT working with the aldryn foundation

00:01:03,809 --> 00:01:10,500
framework consortium and then rolled

00:01:07,380 --> 00:01:12,659
into a bunch of open IOT events being

00:01:10,500 --> 00:01:14,520
involved here I have a little bit of

00:01:12,659 --> 00:01:15,869
experience all over the place but what

00:01:14,520 --> 00:01:18,000
I've done at Microsoft over the last

00:01:15,869 --> 00:01:21,380
couple years is really engage in

00:01:18,000 --> 00:01:24,390
customer problems around IOT and then

00:01:21,380 --> 00:01:26,280
more recently I have taken all of that

00:01:24,390 --> 00:01:28,229
and rolled it up and I've moved over

00:01:26,280 --> 00:01:31,700
into the product side so I'm working in

00:01:28,229 --> 00:01:34,740
our Asscher IOT product team and I am

00:01:31,700 --> 00:01:36,840
specifically tasked with working on me

00:01:34,740 --> 00:01:40,979
Microsoft connected vehicle platform

00:01:36,840 --> 00:01:42,740
which we announced at CES this year with

00:01:40,979 --> 00:01:47,299
a whole bunch of details left unanswered

00:01:42,740 --> 00:01:49,259
intentionally and I have been working

00:01:47,299 --> 00:01:51,149
I'm sure there's other things that we

00:01:49,259 --> 00:01:53,100
were going to talk about but I have been

00:01:51,149 --> 00:01:56,520
working with with espresso from the

00:01:53,100 --> 00:01:59,399
esp8266 and now the 32 for about a year

00:01:56,520 --> 00:02:01,380
building various ideas and products and

00:01:59,399 --> 00:02:03,990
I have a little bit of a startup passion

00:02:01,380 --> 00:02:06,899
so I've been advocating these devices in

00:02:03,990 --> 00:02:09,270
various scenarios so I'll let pamela

00:02:06,899 --> 00:02:12,360
introduce herself talk a little bit she

00:02:09,270 --> 00:02:13,440
does thanks Ivan so my name is Pamela

00:02:12,360 --> 00:02:15,840
Cortez

00:02:13,440 --> 00:02:17,070
before Microsoft I worked at Sparkfun

00:02:15,840 --> 00:02:18,750
electronics in the engineering

00:02:17,070 --> 00:02:21,120
department so I did anywhere from

00:02:18,750 --> 00:02:23,610
Harvard engineering to their software

00:02:21,120 --> 00:02:26,490
league and then anywhere from making a

00:02:23,610 --> 00:02:28,710
tweeting turkey to playing office pranks

00:02:26,490 --> 00:02:34,020
to robotics and going out and teaching

00:02:28,710 --> 00:02:36,990
as well so I'm interested your guys's

00:02:34,020 --> 00:02:41,280
background are you guys mostly embedded

00:02:36,990 --> 00:02:45,330
Linux who's the embedded folks okay and

00:02:41,280 --> 00:02:48,590
then who are the folks where they're

00:02:45,330 --> 00:02:52,380
focused on the cloud side of IOT

00:02:48,590 --> 00:02:52,740
everything is clickable looks great as I

00:02:52,380 --> 00:02:56,610
love it

00:02:52,740 --> 00:02:58,380
all the into end IOT solution so we we

00:02:56,610 --> 00:03:00,480
like to think of this more of it like a

00:02:58,380 --> 00:03:03,360
chalk talk where it's very interactive

00:03:00,480 --> 00:03:06,420
so if you have any questions let us know

00:03:03,360 --> 00:03:09,540
and just interrupt us and if you have

00:03:06,420 --> 00:03:12,980
anything that experience with some of

00:03:09,540 --> 00:03:15,750
our products or some of the open-source

00:03:12,980 --> 00:03:17,790
commits that we've done and would say a

00:03:15,750 --> 00:03:19,620
positive or negative feedback feel free

00:03:17,790 --> 00:03:21,870
to give it to us because we want to hear

00:03:19,620 --> 00:03:24,000
it as well so I'm going to get started

00:03:21,870 --> 00:03:27,060
on really what the agenda is going to be

00:03:24,000 --> 00:03:28,500
for this for this talk so we're gonna be

00:03:27,060 --> 00:03:31,110
talking about the prototyping process

00:03:28,500 --> 00:03:33,420
and really high-level on that and then

00:03:31,110 --> 00:03:35,910
we're going to talk about the ESP 32

00:03:33,420 --> 00:03:40,590
background and who in here has worked

00:03:35,910 --> 00:03:45,750
with the esp8266 so we got you who's

00:03:40,590 --> 00:03:48,300
already worked on the ESP 32 great great

00:03:45,750 --> 00:03:49,709
so that gives me a little bit more

00:03:48,300 --> 00:03:54,720
context so I could talk a little bit

00:03:49,709 --> 00:03:56,610
more about what is the esp8266 as ESP 32

00:03:54,720 --> 00:03:59,040
alright and then we're going to talk

00:03:56,610 --> 00:04:03,060
about Asha and then I was going to do a

00:03:59,040 --> 00:04:05,220
ESP 32 demo all right so I'm going to

00:04:03,060 --> 00:04:07,459
talk really high level on the

00:04:05,220 --> 00:04:10,860
prototyping process for IOT devices

00:04:07,459 --> 00:04:13,680
through first step number one is come up

00:04:10,860 --> 00:04:15,959
with that new idea so anywhere from

00:04:13,680 --> 00:04:19,620
let's say you have an idea for streaming

00:04:15,959 --> 00:04:23,040
device for home automation or maybe

00:04:19,620 --> 00:04:25,540
you're just copying Alexa and deciding

00:04:23,040 --> 00:04:28,560
to make you know your own own device

00:04:25,540 --> 00:04:32,170
I you just starting off with an idea and

00:04:28,560 --> 00:04:33,760
what you want for your product the next

00:04:32,170 --> 00:04:36,580
step is actually thinking about the

00:04:33,760 --> 00:04:38,410
requirements so for example what's it

00:04:36,580 --> 00:04:40,900
going to do do you want to stream video

00:04:38,410 --> 00:04:41,980
do you want to you know stream audio or

00:04:40,900 --> 00:04:45,490
none of the above

00:04:41,980 --> 00:04:52,360
or maybe you know maybe the attendant

00:04:45,490 --> 00:04:55,570
use of it is you know being able to have

00:04:52,360 --> 00:04:57,670
a home automation device but sometimes

00:04:55,570 --> 00:04:59,440
you have to think about the real life

00:04:57,670 --> 00:05:01,060
use because sometimes people will take

00:04:59,440 --> 00:05:03,970
your product and totally use it for the

00:05:01,060 --> 00:05:07,330
different use case which we see all the

00:05:03,970 --> 00:05:09,700
time or even hack it as well which I

00:05:07,330 --> 00:05:11,080
believe it's the fun part but if you're

00:05:09,700 --> 00:05:12,610
if you're trying to have a product in

00:05:11,080 --> 00:05:13,870
the consumer side you don't want anyone

00:05:12,610 --> 00:05:16,660
being able to hack your product of

00:05:13,870 --> 00:05:18,550
course and then doing market research so

00:05:16,660 --> 00:05:20,820
if you know you're going to do this

00:05:18,550 --> 00:05:24,280
product that I just described and

00:05:20,820 --> 00:05:26,500
there's already 50 other companies doing

00:05:24,280 --> 00:05:28,870
it if that's something that you want to

00:05:26,500 --> 00:05:30,430
do or what is the difference what is the

00:05:28,870 --> 00:05:33,430
difference between your product versus

00:05:30,430 --> 00:05:36,520
other products and then the device

00:05:33,430 --> 00:05:37,750
selection so budget it's a real big

00:05:36,520 --> 00:05:39,460
thing especially when I was doing

00:05:37,750 --> 00:05:42,100
hardware engineering we thought about

00:05:39,460 --> 00:05:45,100
the bill of material all the time and

00:05:42,100 --> 00:05:47,760
the most reason the reason for that is

00:05:45,100 --> 00:05:51,580
because if we're building a cheap Wi-Fi

00:05:47,760 --> 00:05:55,570
solution and our bomb our bill of

00:05:51,580 --> 00:05:57,550
materials is like $70 and we have our

00:05:55,570 --> 00:05:59,800
margins need to be at you know 4x

00:05:57,550 --> 00:06:02,230
there's no way that we could actually be

00:05:59,800 --> 00:06:04,150
competitive in that market so budget is

00:06:02,230 --> 00:06:08,260
actually a really big topic for

00:06:04,150 --> 00:06:10,030
engineers and then a device lifecycle -

00:06:08,260 --> 00:06:13,600
it's just something that's going to be

00:06:10,030 --> 00:06:14,950
out in the field for 15 20 plus years

00:06:13,600 --> 00:06:17,230
or it's just something that you think

00:06:14,950 --> 00:06:19,780
it's going to last you know for the five

00:06:17,230 --> 00:06:23,050
five years so something to think about

00:06:19,780 --> 00:06:25,720
and then of course how you connect to it

00:06:23,050 --> 00:06:27,580
so a big topic right now is remote

00:06:25,720 --> 00:06:30,220
monitoring in places where there's no

00:06:27,580 --> 00:06:32,920
Wi-Fi or Bluetooth how do you how do you

00:06:30,220 --> 00:06:35,440
deal with that how you connect you sit

00:06:32,920 --> 00:06:38,480
through gateways you know seller modules

00:06:35,440 --> 00:06:40,280
through that whole methodology

00:06:38,480 --> 00:06:42,350
how you design devices it's very

00:06:40,280 --> 00:06:46,040
different than just deciding and

00:06:42,350 --> 00:06:49,030
consumer devices and then also for a

00:06:46,040 --> 00:06:50,420
device selection you got to think of

00:06:49,030 --> 00:06:52,160
products that are going to be

00:06:50,420 --> 00:06:54,650
end-of-life so if you've got a really

00:06:52,160 --> 00:06:58,400
great deal on a microcontroller from

00:06:54,650 --> 00:07:00,460
eBay and you're thinking it's oh that's

00:06:58,400 --> 00:07:02,600
great and then your product gets fake

00:07:00,460 --> 00:07:03,950
there's going to be you know you're

00:07:02,600 --> 00:07:06,020
going to learn you're going to have some

00:07:03,950 --> 00:07:07,880
tough learnings from that especially if

00:07:06,020 --> 00:07:09,920
you want to have millions of devices

00:07:07,880 --> 00:07:11,720
then you find out you can no longer use

00:07:09,920 --> 00:07:14,030
that chipset mostly because it's

00:07:11,720 --> 00:07:17,090
end-of-life so things like that and then

00:07:14,030 --> 00:07:20,830
product lifecycle development testing

00:07:17,090 --> 00:07:23,870
device management you're seeing a lot of

00:07:20,830 --> 00:07:26,060
great headway and device management how

00:07:23,870 --> 00:07:28,430
you do over-the-air updates with

00:07:26,060 --> 00:07:30,650
firmware is a big topic especially for

00:07:28,430 --> 00:07:32,960
security as well being able to patch

00:07:30,650 --> 00:07:34,640
those devices if someone does get hold

00:07:32,960 --> 00:07:37,490
of those devices it's something to pay

00:07:34,640 --> 00:07:40,790
attention to and then also product

00:07:37,490 --> 00:07:42,830
support so if you have a product or say

00:07:40,790 --> 00:07:45,170
well we'll go back to Alexa because it's

00:07:42,830 --> 00:07:48,350
a really popular IOT product at the

00:07:45,170 --> 00:07:50,360
moment and one of the things to or the

00:07:48,350 --> 00:07:52,100
echo one of the things to think about is

00:07:50,360 --> 00:07:54,500
what type of technical support you're

00:07:52,100 --> 00:07:57,490
going to have for that because there's

00:07:54,500 --> 00:08:00,530
going to be a lot of beginners using the

00:07:57,490 --> 00:08:01,880
echo so you want to be able to sure that

00:08:00,530 --> 00:08:03,830
you have enough customer service

00:08:01,880 --> 00:08:05,930
representatives and then if you have

00:08:03,830 --> 00:08:08,180
developers hacking with that project or

00:08:05,930 --> 00:08:09,710
that product you need to be able to have

00:08:08,180 --> 00:08:11,780
the staffing for that as well

00:08:09,710 --> 00:08:13,130
so that's super high level it's really

00:08:11,780 --> 00:08:16,700
going to set us up for the rest of the

00:08:13,130 --> 00:08:20,000
the talk so some of the actual devices

00:08:16,700 --> 00:08:23,510
that we have SDKs with and support for

00:08:20,000 --> 00:08:26,390
and a lot of our device SDKs Ivan will

00:08:23,510 --> 00:08:28,730
talk to at the end of the end of the

00:08:26,390 --> 00:08:35,270
talk as well so I have anywhere from the

00:08:28,730 --> 00:08:36,830
esp8266 to raspberry PI's Edison's one

00:08:35,270 --> 00:08:39,160
of the things to think about between

00:08:36,830 --> 00:08:40,790
microcontrollers and micro processors

00:08:39,160 --> 00:08:42,950
microcontrollers are really good at

00:08:40,790 --> 00:08:47,180
ingesting data and sending it to the

00:08:42,950 --> 00:08:50,180
cloud doing really simple things I and

00:08:47,180 --> 00:08:52,400
the micro processors are really good for

00:08:50,180 --> 00:08:55,130
would say you want something where your

00:08:52,400 --> 00:08:57,260
doing compute on the edge so you want to

00:08:55,130 --> 00:08:58,580
do something that you have all this

00:08:57,260 --> 00:09:00,470
amount of data but you don't want to

00:08:58,580 --> 00:09:04,460
send all the data straight up to the

00:09:00,470 --> 00:09:06,500
cloud you can do some of some of the you

00:09:04,460 --> 00:09:08,870
know analytics right on the device side

00:09:06,500 --> 00:09:10,820
and then what you need is send up to the

00:09:08,870 --> 00:09:13,100
cloud and the reason for that is a huge

00:09:10,820 --> 00:09:15,740
cost savings there really depends on

00:09:13,100 --> 00:09:18,050
what type of scenario that you want to

00:09:15,740 --> 00:09:21,830
do so let me know if you guys have any

00:09:18,050 --> 00:09:23,630
questions but I would get ahead so why

00:09:21,830 --> 00:09:26,510
expressive why are we here talking about

00:09:23,630 --> 00:09:29,090
it and why Microsoft is putting an

00:09:26,510 --> 00:09:32,720
interest in it mostly because it's a low

00:09:29,090 --> 00:09:37,310
cost chipset which is made by expressive

00:09:32,720 --> 00:09:39,260
systems it's ideally under $20 for a dev

00:09:37,310 --> 00:09:42,800
board and easy to get started for and

00:09:39,260 --> 00:09:45,760
also it crosses between the maker

00:09:42,800 --> 00:09:51,080
community beginners and then also

00:09:45,760 --> 00:09:52,820
startup and you know R&D research and to

00:09:51,080 --> 00:09:54,950
production you can actually go from

00:09:52,820 --> 00:09:57,320
prototyping to production really easily

00:09:54,950 --> 00:10:00,080
unlike some of the products in the maker

00:09:57,320 --> 00:10:02,240
community some of them are great for

00:10:00,080 --> 00:10:04,010
prototyping but when you go to

00:10:02,240 --> 00:10:06,230
production you'll find out that there's

00:10:04,010 --> 00:10:08,210
not that support for it or it's hard to

00:10:06,230 --> 00:10:10,700
scale up with some of those some of

00:10:08,210 --> 00:10:14,240
those products and then also there's

00:10:10,700 --> 00:10:16,730
fasten'd option by you know sparkfun

00:10:14,240 --> 00:10:19,910
Adafruit and many others using this

00:10:16,730 --> 00:10:21,860
chipset which is great because it will

00:10:19,910 --> 00:10:23,930
help beginners out who want to you know

00:10:21,860 --> 00:10:25,070
their influencers in the communities but

00:10:23,930 --> 00:10:27,500
maybe they don't know how to start get

00:10:25,070 --> 00:10:30,080
getting started with hardware it's easy

00:10:27,500 --> 00:10:32,690
for them to prototype their idea bring

00:10:30,080 --> 00:10:35,030
it to an investor and then be able to

00:10:32,690 --> 00:10:41,030
build up a team behind that idea as well

00:10:35,030 --> 00:10:44,300
and then I forgot to mention that

00:10:41,030 --> 00:10:47,750
expresso was named a cool vendor in IOT

00:10:44,300 --> 00:10:50,060
in 2016 by Gardner and Gardner is really

00:10:47,750 --> 00:10:52,610
that gold standard of you know who are

00:10:50,060 --> 00:10:54,770
the leaders in IOT and they say cool

00:10:52,610 --> 00:10:56,660
vendor but is really means that they're

00:10:54,770 --> 00:10:58,880
the most innovative vendor at this

00:10:56,660 --> 00:11:02,270
moment and it's mostly due to their open

00:10:58,880 --> 00:11:04,910
source community support this is really

00:11:02,270 --> 00:11:07,850
taken off in the community so what's a

00:11:04,910 --> 00:11:11,450
you are a maker who wanted to you know

00:11:07,850 --> 00:11:14,330
make a smart light bulb or a connected

00:11:11,450 --> 00:11:16,190
device or connected appliance you can

00:11:14,330 --> 00:11:17,960
actually do that really easily because

00:11:16,190 --> 00:11:20,210
there's such a huge community who's

00:11:17,960 --> 00:11:24,320
willing to help you out and open source

00:11:20,210 --> 00:11:27,680
code behind it as well all right I'm

00:11:24,320 --> 00:11:28,940
gonna jump in more yeah Jennifer um for

00:11:27,680 --> 00:11:30,890
those of you who've worked with any of

00:11:28,940 --> 00:11:33,530
the expressive ships UPS in the past 80

00:11:30,890 --> 00:11:36,110
to 66 development environment was not

00:11:33,530 --> 00:11:39,590
entirely open there were most of it was

00:11:36,110 --> 00:11:41,810
but some of the actual library Express

00:11:39,590 --> 00:11:44,060
have had built and distributed binary

00:11:41,810 --> 00:11:46,010
because of whatever management they had

00:11:44,060 --> 00:11:47,300
been going through but in that process

00:11:46,010 --> 00:11:49,730
and by working with them over the last

00:11:47,300 --> 00:11:52,310
couple of years for the ESP 32 in

00:11:49,730 --> 00:11:55,430
particular it is entirely open the

00:11:52,310 --> 00:11:57,320
entire toolset the entire source for

00:11:55,430 --> 00:12:00,050
everything so you can you can basically

00:11:57,320 --> 00:12:03,560
start from a piece of you know a board

00:12:00,050 --> 00:12:05,240
and an editor and run you build and run

00:12:03,560 --> 00:12:08,030
your app in minutes it's a pretty

00:12:05,240 --> 00:12:09,620
straightforward process and I think that

00:12:08,030 --> 00:12:11,380
they understand that they are in the

00:12:09,620 --> 00:12:14,030
hardware innovation business and

00:12:11,380 --> 00:12:15,880
leveraging communities the open source

00:12:14,030 --> 00:12:18,110
and open tools from the community

00:12:15,880 --> 00:12:20,600
accelerates their business as well as

00:12:18,110 --> 00:12:23,660
everyone else's so they really do get

00:12:20,600 --> 00:12:25,160
that sort of model yeah definitely and

00:12:23,660 --> 00:12:28,250
they're really good at building up that

00:12:25,160 --> 00:12:33,770
community as well alright and why the

00:12:28,250 --> 00:12:36,230
ESP 32 so the ESP 32 is you can use it

00:12:33,770 --> 00:12:39,140
for many different applications anywhere

00:12:36,230 --> 00:12:42,220
from wearables connected appliances to

00:12:39,140 --> 00:12:46,970
streaming audio and video players and

00:12:42,220 --> 00:12:48,680
even a connective upon oh I already

00:12:46,970 --> 00:12:52,760
mentioned connected appliances and home

00:12:48,680 --> 00:12:55,460
automation so another thing is it has 12

00:12:52,760 --> 00:12:58,430
years of committed expressive support

00:12:55,460 --> 00:13:00,680
which is huge especially when you make a

00:12:58,430 --> 00:13:02,870
make a product you want to make sure

00:13:00,680 --> 00:13:06,860
that that product has support for a long

00:13:02,870 --> 00:13:09,380
time and they're guaranteeing 12 even 20

00:13:06,860 --> 00:13:11,240
years of device lifespan which is really

00:13:09,380 --> 00:13:14,720
great especially when it's going out of

00:13:11,240 --> 00:13:17,550
the field because a lot of the products

00:13:14,720 --> 00:13:21,060
that do go out and commercial

00:13:17,550 --> 00:13:24,270
enterprise scenarios do you see in the

00:13:21,060 --> 00:13:26,940
field for a really long time and then

00:13:24,270 --> 00:13:28,890
also its multiple factors depending on

00:13:26,940 --> 00:13:31,850
your product requirement so you can

00:13:28,890 --> 00:13:34,410
really just have it simply adjusted

00:13:31,850 --> 00:13:36,209
ingesting data straight to the cloud or

00:13:34,410 --> 00:13:37,950
you could do stuff with that data before

00:13:36,209 --> 00:13:41,070
it goes to the clouds there's three

00:13:37,950 --> 00:13:46,320
versatile so you come so many different

00:13:41,070 --> 00:13:49,050
form factors to get started with here's

00:13:46,320 --> 00:13:52,020
a couple so this one's there dev Ford I

00:13:49,050 --> 00:13:54,209
if you've read for it before it nicely

00:13:52,020 --> 00:13:56,459
fits and just right into a breadboard

00:13:54,209 --> 00:13:58,560
it's you can connect it with jumper

00:13:56,459 --> 00:14:01,440
wires really easy to start it with great

00:13:58,560 --> 00:14:04,800
documentation and then the next one is

00:14:01,440 --> 00:14:08,130
the rover board has an LCD in the back

00:14:04,800 --> 00:14:09,510
and then extra components as well what's

00:14:08,130 --> 00:14:12,630
great about this one you can stream

00:14:09,510 --> 00:14:14,220
audio you can do video and so that's a

00:14:12,630 --> 00:14:16,529
great way of getting started without

00:14:14,220 --> 00:14:18,420
connecting a bunch of shields and

00:14:16,529 --> 00:14:20,940
everything with it and then on top of it

00:14:18,420 --> 00:14:23,730
you know out of food and sparkfun there

00:14:20,940 --> 00:14:26,010
are we making board development boards

00:14:23,730 --> 00:14:29,040
and shield for this product as well

00:14:26,010 --> 00:14:31,020
so if you're a fan of their company you

00:14:29,040 --> 00:14:33,120
can work with work with their past

00:14:31,020 --> 00:14:36,600
shield that were being used for the

00:14:33,120 --> 00:14:38,279
esp8266 how many of you are familiar

00:14:36,600 --> 00:14:39,570
before you move on how many you're

00:14:38,279 --> 00:14:42,570
familiar with the difference in the

00:14:39,570 --> 00:14:46,320
board versus the dev board versus the

00:14:42,570 --> 00:14:49,079
shield okay so I just want to point out

00:14:46,320 --> 00:14:51,779
in this picture the ESP 32 is actually

00:14:49,079 --> 00:14:53,760
only that part of the picture it is a

00:14:51,779 --> 00:14:55,860
square here the rest of this is their

00:14:53,760 --> 00:14:58,860
dev board so it's mounted to expose all

00:14:55,860 --> 00:15:00,839
the interfaces on the on that 32 and it

00:14:58,860 --> 00:15:06,270
has some LEDs and buttons for resetting

00:15:00,839 --> 00:15:09,930
and firmware and it actually has a you

00:15:06,270 --> 00:15:11,600
are serial blah blah blah I can plug

00:15:09,930 --> 00:15:16,260
into my USB port without an adapter

00:15:11,600 --> 00:15:18,420
which is really nice my wife happy yeah

00:15:16,260 --> 00:15:20,160
yeah a PDI interface that's worth

00:15:18,420 --> 00:15:22,380
looking for yeah because a lot of course

00:15:20,160 --> 00:15:25,260
you have to have the FBI basic to

00:15:22,380 --> 00:15:28,050
connect with it and extra boards so I

00:15:25,260 --> 00:15:30,900
mean it's the full package you have to

00:15:28,050 --> 00:15:31,320
add sensors to it but it's still nice

00:15:30,900 --> 00:15:35,550
against

00:15:31,320 --> 00:15:41,700
it with so we're going to of course we

00:15:35,550 --> 00:15:46,560
lose yeah so the esp8266 versus the ESP

00:15:41,700 --> 00:15:52,410
32 so the 82 66 came first and as a

00:15:46,560 --> 00:15:56,760
Wi-Fi chip thanks for helping and so

00:15:52,410 --> 00:16:01,020
this one is based on the ten silica it's

00:15:56,760 --> 00:16:05,720
a 32-bit microcontroller and then the

00:16:01,020 --> 00:16:10,710
ESP 32 is still 10 silica but it's a

00:16:05,720 --> 00:16:12,210
dual-core lx6 microcontroller and the

00:16:10,710 --> 00:16:15,150
reason why I wanted to mention that is

00:16:12,210 --> 00:16:19,860
because this company this 10 silica is

00:16:15,150 --> 00:16:22,830
actually we're using hololens and their

00:16:19,860 --> 00:16:26,220
technology and our hololens device the

00:16:22,830 --> 00:16:28,410
little little tip is there and then some

00:16:26,220 --> 00:16:30,510
other things are that the operating

00:16:28,410 --> 00:16:33,240
voltage and the operating temperature is

00:16:30,510 --> 00:16:36,870
the same between both chipsets and then

00:16:33,240 --> 00:16:39,450
for the ESP 32 it has both Wi-Fi and

00:16:36,870 --> 00:16:41,760
Bluetooth so something to think about is

00:16:39,450 --> 00:16:44,760
that the ESP 32 it's not a complete

00:16:41,760 --> 00:16:46,200
replacement of the 80 to 66 because

00:16:44,760 --> 00:16:48,600
there's applications where you don't

00:16:46,200 --> 00:16:50,580
need that bluetooth so if you don't need

00:16:48,600 --> 00:16:53,610
the bluetooth wife's and more on your

00:16:50,580 --> 00:16:55,200
bill of materials to get that feature so

00:16:53,610 --> 00:16:58,710
something to think about if you're

00:16:55,200 --> 00:17:00,360
you're deciding if you're going to use

00:16:58,710 --> 00:17:04,410
it for your product or not so the

00:17:00,360 --> 00:17:07,890
sensors the esp8266 doesn't have any

00:17:04,410 --> 00:17:09,360
sensors included so that that's probably

00:17:07,890 --> 00:17:12,660
good if you just want a really basic

00:17:09,360 --> 00:17:16,770
microcontroller and then the 32 has a

00:17:12,660 --> 00:17:19,650
hall sensor capacitive touch ultra-low

00:17:16,770 --> 00:17:22,380
noise analog amplifier which is really

00:17:19,650 --> 00:17:26,820
nice so a couple different sensors you

00:17:22,380 --> 00:17:31,620
can use and for GPIO pins the 80 to 66

00:17:26,820 --> 00:17:34,260
has 17 pins and then the ESP 32 has 32

00:17:31,620 --> 00:17:36,030
pins there's a lot more pins that you

00:17:34,260 --> 00:17:39,240
can work with but then again it goes

00:17:36,030 --> 00:17:42,090
back to do you really need 32 GPIO pins

00:17:39,240 --> 00:17:43,590
for your application and then I'm going

00:17:42,090 --> 00:17:45,049
to tell you right now I haven't done an

00:17:43,590 --> 00:17:48,350
application where I needed that many

00:17:45,049 --> 00:17:51,200
but it could be very useful depending on

00:17:48,350 --> 00:17:56,149
what scenario you're using for security

00:17:51,200 --> 00:17:58,940
the jump from 80 to 66 232 there's a lot

00:17:56,149 --> 00:18:00,950
more security features for the 32

00:17:58,940 --> 00:18:03,980
they've done a lot of really great

00:18:00,950 --> 00:18:06,409
innovative updates to security that

00:18:03,980 --> 00:18:09,950
doesn't mean that that 82 66 isn't

00:18:06,409 --> 00:18:12,679
secure it just means that the 32 with

00:18:09,950 --> 00:18:14,559
the youth bluetooth support and Wi-Fi

00:18:12,679 --> 00:18:21,230
combined they also have even more

00:18:14,559 --> 00:18:23,690
security features yeah how many bit

00:18:21,230 --> 00:18:25,570
curve I don't remember off the top of

00:18:23,690 --> 00:18:28,669
our head we can look at this back it's

00:18:25,570 --> 00:18:30,289
one of the things I'm interesting in

00:18:28,669 --> 00:18:32,059
terms of the extra features we don't

00:18:30,289 --> 00:18:33,710
have in the table and I don't think we

00:18:32,059 --> 00:18:37,580
talk about them later in the slides is

00:18:33,710 --> 00:18:40,909
that the ESP 32 actually has the notion

00:18:37,580 --> 00:18:43,429
of doing secure firmware so it has a

00:18:40,909 --> 00:18:45,350
memory protection that if you mess with

00:18:43,429 --> 00:18:47,359
it it'll erase itself and it also has

00:18:45,350 --> 00:18:50,389
the ability to encrypt the flash and the

00:18:47,359 --> 00:18:52,489
bootloader we don't do that in our in

00:18:50,389 --> 00:18:54,139
our demo because once you encrypt then

00:18:52,489 --> 00:18:55,669
the process is longer for doing all the

00:18:54,139 --> 00:18:58,009
updates you can't really do over-the-air

00:18:55,669 --> 00:18:59,690
yet with that way and so we're not

00:18:58,009 --> 00:19:01,789
demoing any of that but it has

00:18:59,690 --> 00:19:06,259
significant more security features as a

00:19:01,789 --> 00:19:07,759
as a edge device that you want to put in

00:19:06,259 --> 00:19:10,239
a place where it may get tampered with

00:19:07,759 --> 00:19:13,639
and you want to be able to trust it so

00:19:10,239 --> 00:19:15,679
yeah thanks Ivan and then for power

00:19:13,639 --> 00:19:17,289
consumption modes we like to always

00:19:15,679 --> 00:19:20,389
point that out because battery

00:19:17,289 --> 00:19:25,249
management and power consumption is a

00:19:20,389 --> 00:19:27,649
huge topic for IOT so for the 80 to 66

00:19:25,249 --> 00:19:30,379
versus the 32 things to keep in mind

00:19:27,649 --> 00:19:34,820
that is the battery management of power

00:19:30,379 --> 00:19:38,179
modes are let better with the 32 however

00:19:34,820 --> 00:19:40,999
there's also a lot more modes in the 32

00:19:38,179 --> 00:19:43,309
that you could change for so if you have

00:19:40,999 --> 00:19:47,539
any questions for that let me know and

00:19:43,309 --> 00:19:48,739
then there's also some times that the

00:19:47,539 --> 00:19:50,840
power consumption is going to be more

00:19:48,739 --> 00:19:53,090
for the 32 it's mostly because you're

00:19:50,840 --> 00:19:55,549
doing more with the chipset the

00:19:53,090 --> 00:19:58,730
microcontroller in the scenario yeah one

00:19:55,549 --> 00:20:01,490
one detail in that that's useful is

00:19:58,730 --> 00:20:04,190
even in low-power mode with 232 there is

00:20:01,490 --> 00:20:06,050
an ultra-low power co processor that can

00:20:04,190 --> 00:20:07,910
be woken up and used and so there's

00:20:06,050 --> 00:20:11,030
actually like I want to say eight

00:20:07,910 --> 00:20:12,740
different power modes in the 32 so in

00:20:11,030 --> 00:20:14,960
this table we just tried to match up the

00:20:12,740 --> 00:20:22,520
most sort of the closest corresponding

00:20:14,960 --> 00:20:24,290
modes yeah hibernation is the lowest

00:20:22,520 --> 00:20:26,780
state that they document yeah

00:20:24,290 --> 00:20:29,120
yes this is literally powered off and

00:20:26,780 --> 00:20:32,840
you know consuming that one it doesn't

00:20:29,120 --> 00:20:35,180
have a powered off state yeah so it's

00:20:32,840 --> 00:20:36,860
not a direct comparison when you get to

00:20:35,180 --> 00:20:41,480
the last numbers from off and

00:20:36,860 --> 00:20:43,850
hibernation alright so Microsoft

00:20:41,480 --> 00:20:46,040
expressive out of fruit and sparks eyes

00:20:43,850 --> 00:20:49,160
so we've had a really strong partnership

00:20:46,040 --> 00:20:52,460
with expressive and also the the maker

00:20:49,160 --> 00:20:54,770
companies as well and the biggest thing

00:20:52,460 --> 00:20:57,590
that we take away from that is that we

00:20:54,770 --> 00:21:00,380
want to be able to contribute to express

00:20:57,590 --> 00:21:02,900
those ecosystem so and make sure that

00:21:00,380 --> 00:21:05,180
it's able to connect to as you're right

00:21:02,900 --> 00:21:07,430
out of the box it'll make it a lot

00:21:05,180 --> 00:21:10,100
easier for developers to get started

00:21:07,430 --> 00:21:12,890
with and then we've also been working

00:21:10,100 --> 00:21:16,250
with Adafruit to create you know the 80

00:21:12,890 --> 00:21:18,020
to 66 kits so for people kids bred for

00:21:16,250 --> 00:21:20,480
different sensors like temperature

00:21:18,020 --> 00:21:23,420
humidity and really get started to see

00:21:20,480 --> 00:21:26,300
what you could do with the 80 to 66

00:21:23,420 --> 00:21:29,270
other thing with that is that you could

00:21:26,300 --> 00:21:32,870
use the Arduino IDE but you can also use

00:21:29,270 --> 00:21:34,490
the native on the SDK as well which i

00:21:32,870 --> 00:21:36,560
really recommend especially if you're

00:21:34,490 --> 00:21:39,200
thinking about going into production but

00:21:36,560 --> 00:21:41,210
if you're you know a maker or someone

00:21:39,200 --> 00:21:42,650
who wants to get started with it and

00:21:41,210 --> 00:21:44,450
you're comfortable with Arduino IDE

00:21:42,650 --> 00:21:47,060
there's full support for that as well

00:21:44,450 --> 00:21:50,150
and you're seeing it with the ESP 32

00:21:47,060 --> 00:21:51,920
that's coming out for Arduino support so

00:21:50,150 --> 00:21:54,440
that kind of just what the kit looks

00:21:51,920 --> 00:21:56,840
like all the code is you know open

00:21:54,440 --> 00:21:58,160
source so it's the hardware is easy get

00:21:56,840 --> 00:22:01,580
started where you go back to the

00:21:58,160 --> 00:22:03,170
partners I just want to point out if I

00:22:01,580 --> 00:22:08,090
recall correctly correct me if I'm wrong

00:22:03,170 --> 00:22:11,430
this kit we put together with one of our

00:22:08,090 --> 00:22:14,310
partners I had a piece out of fruit yeah

00:22:11,430 --> 00:22:18,390
and this I think retails for 4695 about

00:22:14,310 --> 00:22:21,780
$50 and it has all these components this

00:22:18,390 --> 00:22:24,870
the rover board retails for about the

00:22:21,780 --> 00:22:27,120
same price just about the same price it

00:22:24,870 --> 00:22:29,400
has many of the same sensors but not all

00:22:27,120 --> 00:22:32,910
of them it has an LCD which that doesn't

00:22:29,400 --> 00:22:36,990
have and having given hundreds of hours

00:22:32,910 --> 00:22:38,940
of tutorials on IOT I would rather carry

00:22:36,990 --> 00:22:41,850
these around and help people learn how

00:22:38,940 --> 00:22:45,210
to write software then match up pins to

00:22:41,850 --> 00:22:46,080
holes yeah there's a big value to

00:22:45,210 --> 00:22:48,570
integrated

00:22:46,080 --> 00:22:49,800
yeah and LCDs are not cheap either so

00:22:48,570 --> 00:22:53,310
they definitely got a really great deal

00:22:49,800 --> 00:22:54,630
on that dev board I totally agree and if

00:22:53,310 --> 00:22:56,640
you're not familiar with bread

00:22:54,630 --> 00:22:58,110
forwarding and you're just starting it

00:22:56,640 --> 00:23:03,090
could be kind of little timid dating for

00:22:58,110 --> 00:23:06,030
people as well so as I mentioned you

00:23:03,090 --> 00:23:09,300
know we have Wi-Fi Bluetooth and power

00:23:06,030 --> 00:23:14,190
management for the ESP 32 and here's the

00:23:09,300 --> 00:23:16,170
pin out the 30 32 GPIO pin so I'm going

00:23:14,190 --> 00:23:19,020
to let Ivan takeover talk about the

00:23:16,170 --> 00:23:21,780
cloud side and the full indian iot

00:23:19,020 --> 00:23:23,700
solution well let's see how it goes how

00:23:21,780 --> 00:23:27,390
many of you have built IOT solutions

00:23:23,700 --> 00:23:29,400
with the cloud going to the cloud about

00:23:27,390 --> 00:23:33,120
a quarter of you how many of you have

00:23:29,400 --> 00:23:36,960
used Microsoft cloud at all a sure okay

00:23:33,120 --> 00:23:41,010
a different quarter of you fair enough

00:23:36,960 --> 00:23:44,280
I'm going to give sort of a a very quick

00:23:41,010 --> 00:23:46,530
overview of what we provide in Azure but

00:23:44,280 --> 00:23:49,020
mostly from the point of view of an IOT

00:23:46,530 --> 00:23:50,460
trying to try to build something in the

00:23:49,020 --> 00:23:52,560
IOT space and have an end-to-end

00:23:50,460 --> 00:23:55,020
solution that delivers some value not

00:23:52,560 --> 00:23:57,030
just to the customer but also to you

00:23:55,020 --> 00:24:00,860
because no one gets into the business of

00:23:57,030 --> 00:24:00,860
doing IOT just for fun right

00:24:03,740 --> 00:24:10,290
like we'll get to that that's part of

00:24:08,640 --> 00:24:12,270
our demo excellent question

00:24:10,290 --> 00:24:16,590
but you're setting me up and I'm not

00:24:12,270 --> 00:24:17,960
ready yet we didn't plant him we'll pay

00:24:16,590 --> 00:24:20,970
him later but we didn't plan it

00:24:17,960 --> 00:24:24,660
so this is generally the way we think

00:24:20,970 --> 00:24:27,150
about IOT in the big picture and what

00:24:24,660 --> 00:24:28,980
you should notice here is this big bar

00:24:27,150 --> 00:24:31,830
in the middle is essentially where the

00:24:28,980 --> 00:24:34,860
cloud starts from the client point of

00:24:31,830 --> 00:24:37,800
view this is this is from here to the

00:24:34,860 --> 00:24:41,010
right is infrastructure that you would

00:24:37,800 --> 00:24:43,740
outsource to a cloud provider Microsoft

00:24:41,010 --> 00:24:46,230
Google Amazon whomever and we would all

00:24:43,740 --> 00:24:48,930
provide functionally the same kind of

00:24:46,230 --> 00:24:51,210
solutions we would provide what we call

00:24:48,930 --> 00:24:53,460
batch analytics hop path analytics with

00:24:51,210 --> 00:24:56,760
hot path business logic business logic

00:24:53,460 --> 00:24:58,560
is things like real time applications

00:24:56,760 --> 00:25:02,520
that trigger on the data coming in so

00:24:58,560 --> 00:25:04,170
logic applications lambda and we use

00:25:02,520 --> 00:25:06,420
actor framework so we're monitoring

00:25:04,170 --> 00:25:08,280
things in the real time hot path

00:25:06,420 --> 00:25:09,900
analytics or more things where you're

00:25:08,280 --> 00:25:12,000
going to process the data as it's coming

00:25:09,900 --> 00:25:13,220
in and do some interesting things on it

00:25:12,000 --> 00:25:15,900
sliding when though averages

00:25:13,220 --> 00:25:18,090
aggregations things like that and then

00:25:15,900 --> 00:25:20,640
batch analytics is more where you're

00:25:18,090 --> 00:25:21,990
going to do try to extract insight

00:25:20,640 --> 00:25:23,400
knowledge from the data that you're

00:25:21,990 --> 00:25:25,080
acquiring this isn't something you're

00:25:23,400 --> 00:25:27,600
going to do every minute every hour but

00:25:25,080 --> 00:25:29,220
you might do a daily weekly monthly it's

00:25:27,600 --> 00:25:32,790
places where you would apply technology

00:25:29,220 --> 00:25:36,180
like Hadoop or SPARC to process large

00:25:32,790 --> 00:25:38,190
quantities of data or in our case we

00:25:36,180 --> 00:25:39,690
have things like Asher ml where you can

00:25:38,190 --> 00:25:41,640
build machine learning models and then

00:25:39,690 --> 00:25:43,980
execute them on the data as it flows in

00:25:41,640 --> 00:25:45,810
you need that large quantity of data to

00:25:43,980 --> 00:25:47,700
train your model and then you can run

00:25:45,810 --> 00:25:49,920
your model as either hot path analytics

00:25:47,700 --> 00:25:52,260
or a logic app tell me when an anomaly

00:25:49,920 --> 00:25:53,910
is happening with my devices so that I

00:25:52,260 --> 00:25:56,520
can notify someone to go out there and

00:25:53,910 --> 00:25:58,590
repair that kind of stuff

00:25:56,520 --> 00:26:00,300
we have a bunch of infrastructure in the

00:25:58,590 --> 00:26:02,040
in these places that's Microsoft

00:26:00,300 --> 00:26:04,410
specific and so does every cloud

00:26:02,040 --> 00:26:06,630
provider the point the only point I want

00:26:04,410 --> 00:26:08,250
to make about this side is that one of

00:26:06,630 --> 00:26:10,530
the things we have worked very hard at

00:26:08,250 --> 00:26:11,880
over the last few years is to make sure

00:26:10,530 --> 00:26:14,850
that you can bring your existing

00:26:11,880 --> 00:26:15,830
expertise and add the value to this side

00:26:14,850 --> 00:26:17,420
of the pie

00:26:15,830 --> 00:26:19,370
with the tools and technologies you're

00:26:17,420 --> 00:26:23,180
familiar with so you can write node

00:26:19,370 --> 00:26:25,010
based applications Python you can still

00:26:23,180 --> 00:26:26,960
do c-sharp and various other Microsoft

00:26:25,010 --> 00:26:28,850
technologies but you can do it with

00:26:26,960 --> 00:26:31,820
essentially anything our spark

00:26:28,850 --> 00:26:33,440
implementation is Python native so we're

00:26:31,820 --> 00:26:36,560
not doing anything sort of strange in

00:26:33,440 --> 00:26:38,330
that space so that's kind of all the

00:26:36,560 --> 00:26:41,090
stuff that happens in the cloud this

00:26:38,330 --> 00:26:43,790
cloud gateway this is an old slide this

00:26:41,090 --> 00:26:45,710
is now if we if I were to make up if I

00:26:43,790 --> 00:26:49,670
had gone and found the newer slide this

00:26:45,710 --> 00:26:51,770
would say IOT hub IOT hub is the cloud

00:26:49,670 --> 00:26:54,820
endpoint for IOT devices in the

00:26:51,770 --> 00:26:58,220
Microsoft ecosystem IOT hub provides

00:26:54,820 --> 00:27:01,400
large-scale telemetry ingestion as well

00:26:58,220 --> 00:27:03,830
as command and control out to devices we

00:27:01,400 --> 00:27:06,410
have documented plans for device

00:27:03,830 --> 00:27:08,270
management software management various

00:27:06,410 --> 00:27:10,580
other components that are going out to

00:27:08,270 --> 00:27:11,930
the device I don't know where we are in

00:27:10,580 --> 00:27:14,000
the delivery of those plans and I'm

00:27:11,930 --> 00:27:15,350
inside the product team so I'm trying to

00:27:14,000 --> 00:27:18,020
be very careful while not saying

00:27:15,350 --> 00:27:20,960
anything I'm not supposed to we didn't

00:27:18,020 --> 00:27:24,080
release the device management and twins

00:27:20,960 --> 00:27:25,790
methods Ruth all of that recently so

00:27:24,080 --> 00:27:27,800
those are those are ways to build up

00:27:25,790 --> 00:27:29,210
data models on the cloud side that

00:27:27,800 --> 00:27:31,190
interact with the data on your device

00:27:29,210 --> 00:27:33,980
and so your device becomes a first-class

00:27:31,190 --> 00:27:36,560
managed object in fact I think in the

00:27:33,980 --> 00:27:38,300
public github repo I did see device

00:27:36,560 --> 00:27:40,670
method yes

00:27:38,300 --> 00:27:42,290
so that's life so device methods are the

00:27:40,670 --> 00:27:43,850
notion that you have an object over here

00:27:42,290 --> 00:27:45,770
that you can invoke a method on that

00:27:43,850 --> 00:27:48,230
goes all the way to your device executes

00:27:45,770 --> 00:27:49,850
and comes back with a return that looks

00:27:48,230 --> 00:27:53,210
synchronous from the programming model

00:27:49,850 --> 00:27:55,370
I'll leave it at that it may or may not

00:27:53,210 --> 00:27:57,770
actually be but it it behaves the way

00:27:55,370 --> 00:28:00,260
you would anticipate it so from the

00:27:57,770 --> 00:28:02,600
cloud side from IOT hub the next step

00:28:00,260 --> 00:28:04,910
out is what we talked about is the

00:28:02,600 --> 00:28:06,560
protocol adapter layer and you're all

00:28:04,910 --> 00:28:08,450
probably if you if you've been in this

00:28:06,560 --> 00:28:10,010
business longer than five minutes aware

00:28:08,450 --> 00:28:12,740
of the fact and everybody has their own

00:28:10,010 --> 00:28:14,840
protocol on the wire to carry data and

00:28:12,740 --> 00:28:18,400
do what they want to do and everybody's

00:28:14,840 --> 00:28:21,100
protocol is the best one out there

00:28:18,400 --> 00:28:25,430
so don't get into the trap of arguing

00:28:21,100 --> 00:28:28,400
just write an adapter so historically

00:28:25,430 --> 00:28:29,960
speaking our protocol choice has been am

00:28:28,400 --> 00:28:33,480
cute

00:28:29,960 --> 00:28:35,940
we also now support mqtt is a

00:28:33,480 --> 00:28:39,390
first-class citizen from protocol

00:28:35,940 --> 00:28:43,290
support so over time initially we had a

00:28:39,390 --> 00:28:46,200
mqtt to a MTP adapter we now host that

00:28:43,290 --> 00:28:48,170
natively so that we can do a MTP and

00:28:46,200 --> 00:28:51,540
MQTT two devices natively without

00:28:48,170 --> 00:28:53,720
another adapter layer you can imagine

00:28:51,540 --> 00:28:55,890
any number of other protocol adapters

00:28:53,720 --> 00:28:58,799
they could they can be built for

00:28:55,890 --> 00:29:00,570
anything and in fact this is how you

00:28:58,799 --> 00:29:02,190
bring in legacy devices where you can't

00:29:00,570 --> 00:29:05,580
change the protocol on the device that's

00:29:02,190 --> 00:29:06,809
one way to bring them in another block

00:29:05,580 --> 00:29:09,090
you'll see up here is the thing we call

00:29:06,809 --> 00:29:11,040
the field gateway so the notion of

00:29:09,090 --> 00:29:12,900
proximal networking is important if you

00:29:11,040 --> 00:29:15,150
put a bunch of sensors out and out in a

00:29:12,900 --> 00:29:18,360
environment that's disconnected or

00:29:15,150 --> 00:29:19,860
lightly connected or in a place where

00:29:18,360 --> 00:29:24,179
you put a whole bunch of sensors that

00:29:19,860 --> 00:29:25,890
have short-range networking you can put

00:29:24,179 --> 00:29:27,870
a field gateway think of it as like a

00:29:25,890 --> 00:29:30,179
Wi-Fi router in your house out with them

00:29:27,870 --> 00:29:32,090
that can communicate to the sensors and

00:29:30,179 --> 00:29:34,169
then it can communicate to the cloud

00:29:32,090 --> 00:29:37,080
that's what we think of as a field

00:29:34,169 --> 00:29:38,700
gateway it can be either necessary for

00:29:37,080 --> 00:29:40,980
networking infrastructure reasons or

00:29:38,700 --> 00:29:42,630
because of logical architecture that it

00:29:40,980 --> 00:29:45,360
makes more sense to design a system that

00:29:42,630 --> 00:29:48,240
way and then from there on out you have

00:29:45,360 --> 00:29:50,280
devices that are connected into your iot

00:29:48,240 --> 00:29:52,020
infrastructure and the point I want to

00:29:50,280 --> 00:29:55,799
make before I leave this slide which I

00:29:52,020 --> 00:29:57,540
am anxious to do is that everything that

00:29:55,799 --> 00:30:01,080
we provide technology lives that's

00:29:57,540 --> 00:30:03,299
outside of the IOT hub today is

00:30:01,080 --> 00:30:06,450
available on github it's all MIT

00:30:03,299 --> 00:30:09,000
licensed so the protocol gateways that

00:30:06,450 --> 00:30:10,890
we have out there the field gateway SDK

00:30:09,000 --> 00:30:15,630
that we have out there and all of the

00:30:10,890 --> 00:30:19,049
client SDKs feed them in C Java C sharp

00:30:15,630 --> 00:30:21,450
and some other set of languages I've

00:30:19,049 --> 00:30:23,040
lost track of they are all available and

00:30:21,450 --> 00:30:25,350
people can play with them today without

00:30:23,040 --> 00:30:27,120
having to talk to us at all and we're

00:30:25,350 --> 00:30:31,049
also expanding it to like for the

00:30:27,120 --> 00:30:34,049
gateway SDK is a having support for OPC

00:30:31,049 --> 00:30:37,940
UA which is really great for connecting

00:30:34,049 --> 00:30:39,870
legacy devices and Industry 4.0 the

00:30:37,940 --> 00:30:42,050
something to think about as well if

00:30:39,870 --> 00:30:44,480
you're really trying to take

00:30:42,050 --> 00:30:46,100
your legacy devices mostly on the

00:30:44,480 --> 00:30:47,780
manufacturing floor and connecting them

00:30:46,100 --> 00:30:49,070
to the cloud that's actually an

00:30:47,780 --> 00:30:51,680
interesting point I'm going to skip off

00:30:49,070 --> 00:30:54,200
that slide but I wanted to point out

00:30:51,680 --> 00:30:55,460
that when I came from outside of the

00:30:54,200 --> 00:30:57,680
product team to the product team at

00:30:55,460 --> 00:30:59,780
Microsoft one of my biggest actions to

00:30:57,680 --> 00:31:01,190
grind was why they weren't why the IOT

00:30:59,780 --> 00:31:03,440
product team wasn't paying more

00:31:01,190 --> 00:31:05,510
attention to what I care about which is

00:31:03,440 --> 00:31:10,220
innovation and product discovery and

00:31:05,510 --> 00:31:12,740
then I was very nicely informed from

00:31:10,220 --> 00:31:16,010
outside of the company actually that our

00:31:12,740 --> 00:31:18,650
IOT announcement sort of when we went

00:31:16,010 --> 00:31:20,900
when we went live with our IOT solution

00:31:18,650 --> 00:31:22,430
we went live in Hanover Massey which is

00:31:20,900 --> 00:31:24,920
the largest manufacturing conference

00:31:22,430 --> 00:31:26,930
that occurs and we went live with the

00:31:24,920 --> 00:31:28,760
ability to announce that every device on

00:31:26,930 --> 00:31:31,190
the show floor was capable of connecting

00:31:28,760 --> 00:31:32,630
to add your IOT because we had put in

00:31:31,190 --> 00:31:34,460
the effort to build the gateways to make

00:31:32,630 --> 00:31:37,520
it happen and gave them away essentially

00:31:34,460 --> 00:31:40,970
and so the fact that on day one we lit

00:31:37,520 --> 00:31:42,530
up 38,000 devices made me realize we

00:31:40,970 --> 00:31:45,440
might have made a strategic investment

00:31:42,530 --> 00:31:49,520
that made sense and so I had little

00:31:45,440 --> 00:31:50,660
criticism after that so here's the

00:31:49,520 --> 00:31:52,400
things that you can do in building your

00:31:50,660 --> 00:31:54,350
own IOT solution I'm going to burn

00:31:52,400 --> 00:31:56,570
through a bunch of this stuff but

00:31:54,350 --> 00:31:59,600
essentially you can prosecute it in real

00:31:56,570 --> 00:32:00,890
time you can build dashboards get smart

00:31:59,600 --> 00:32:01,820
without your machine learning because if

00:32:00,890 --> 00:32:04,900
you don't have Azure machine learning

00:32:01,820 --> 00:32:07,640
you can't beat no wait that's true

00:32:04,900 --> 00:32:08,900
storing data for later analysis all

00:32:07,640 --> 00:32:11,360
sorts of other stuff and then we also

00:32:08,900 --> 00:32:12,740
have as your functions for this new

00:32:11,360 --> 00:32:14,450
fancy thing that everyone talks about

00:32:12,740 --> 00:32:16,700
server with computing which is really

00:32:14,450 --> 00:32:21,050
not server list because they run

00:32:16,700 --> 00:32:23,630
somewhere but it's a great buzzword this

00:32:21,050 --> 00:32:25,610
is what IOT talks about our IOT hub

00:32:23,630 --> 00:32:28,400
since I talked about it I'm going to

00:32:25,610 --> 00:32:30,650
skip over this one thing that we do have

00:32:28,400 --> 00:32:32,210
that I think is interesting and if

00:32:30,650 --> 00:32:33,950
you're in the space and you're going I

00:32:32,210 --> 00:32:36,800
don't know what device I want I don't

00:32:33,950 --> 00:32:38,630
know what capabilities I need I don't

00:32:36,800 --> 00:32:40,730
really understand all the stuff that's

00:32:38,630 --> 00:32:42,170
out there when it comes to hardware we

00:32:40,730 --> 00:32:45,050
have this thing called the device

00:32:42,170 --> 00:32:47,840
catalog that we host its catalog that a

00:32:45,050 --> 00:32:49,700
variety sweet comm you can actually you

00:32:47,840 --> 00:32:53,150
can't see it over here but this is

00:32:49,700 --> 00:32:55,730
industry device type tested compatible

00:32:53,150 --> 00:32:58,000
sensors built in sensors os

00:32:55,730 --> 00:33:00,980
connectivity hardware interfaces

00:32:58,000 --> 00:33:03,520
manufacturers cloud protocol geo

00:33:00,980 --> 00:33:05,750
availability so every potential sort of

00:33:03,520 --> 00:33:07,850
aspect of the device that you might want

00:33:05,750 --> 00:33:09,890
to understand we have a way to pivot on

00:33:07,850 --> 00:33:12,170
that data and look at the various

00:33:09,890 --> 00:33:15,170
devices that we've interacted with or

00:33:12,170 --> 00:33:17,210
that we know NOAA I'm going to say this

00:33:15,170 --> 00:33:19,430
because it comes up on a later slide but

00:33:17,210 --> 00:33:21,920
one of the key values that we bring to

00:33:19,430 --> 00:33:24,280
the conversation is a history of working

00:33:21,920 --> 00:33:26,450
with a very large partner ecosystem

00:33:24,280 --> 00:33:27,820
putting something together like this for

00:33:26,450 --> 00:33:30,590
us is actually pretty straightforward

00:33:27,820 --> 00:33:35,390
putting this together if you have to go

00:33:30,590 --> 00:33:37,130
sign 99 2-way NDA's just to get access

00:33:35,390 --> 00:33:38,750
to the spec sheet is a little bit

00:33:37,130 --> 00:33:40,850
cumbersome for a single person or a

00:33:38,750 --> 00:33:42,890
single entity so this is something we

00:33:40,850 --> 00:33:43,900
can offer to the community that is a

00:33:42,890 --> 00:33:46,040
huge value

00:33:43,900 --> 00:33:48,410
one thing I would want to point out is

00:33:46,040 --> 00:33:50,600
that as our works on all platforms Ivan

00:33:48,410 --> 00:33:52,370
is said and this device catalog really

00:33:50,600 --> 00:33:55,610
highlights that you know if you wanted

00:33:52,370 --> 00:33:57,440
to work on Windows 10 IOT core that's

00:33:55,610 --> 00:33:59,840
great but we also have all these other

00:33:57,440 --> 00:34:03,350
devices and partnerships you know that

00:33:59,840 --> 00:34:05,360
uses Wind River Yocto or no operating

00:34:03,350 --> 00:34:07,790
system at all so we want to really make

00:34:05,360 --> 00:34:10,400
sure that people know that it's not just

00:34:07,790 --> 00:34:12,410
Windows but is all different platforms

00:34:10,400 --> 00:34:15,050
that were contributing to and wanting to

00:34:12,410 --> 00:34:19,330
help out with yeah actually you'll

00:34:15,050 --> 00:34:22,520
notice that which computer did you bring

00:34:19,330 --> 00:34:24,590
so in fact one of us brought a Windows

00:34:22,520 --> 00:34:27,710
computer but the one we're demoing from

00:34:24,590 --> 00:34:32,270
isn't a Windows computer because that's

00:34:27,710 --> 00:34:34,040
not the one I brought oh the whole golly

00:34:32,270 --> 00:34:36,920
I wasn't ready for demo yet I hadn't

00:34:34,040 --> 00:34:38,900
teaches up in my brain all right so I'm

00:34:36,920 --> 00:34:45,610
going to take you through a little bit

00:34:38,900 --> 00:34:45,610
of a tour and byte or what I mean is I

00:34:45,700 --> 00:34:55,240
am hoping everything works the way I

00:34:49,040 --> 00:34:55,240
expect it's going to this is my desktop

00:34:55,679 --> 00:35:02,160
that's a trout in case anyone's

00:34:58,660 --> 00:35:06,150
wondering I get that question a lot I

00:35:02,160 --> 00:35:06,150
have to find the right window

00:35:26,180 --> 00:35:34,770
so I am going to show you a couple of

00:35:30,809 --> 00:35:39,809
interesting things so what you'll see

00:35:34,770 --> 00:35:42,030
here if you could see and it doesn't get

00:35:39,809 --> 00:35:45,359
bigger on that way how do I make it

00:35:42,030 --> 00:35:48,329
bigger I'm going to point it out and

00:35:45,359 --> 00:35:50,910
it's going to be a pain but what you see

00:35:48,329 --> 00:35:54,480
here is this is a top-level directory in

00:35:50,910 --> 00:35:55,770
my home directory called ESP so what

00:35:54,480 --> 00:35:57,510
I've done which is a pretty

00:35:55,770 --> 00:36:01,800
straightforward exercise that I have

00:35:57,510 --> 00:36:04,140
literally followed the ESP 32 directions

00:36:01,800 --> 00:36:08,369
off their github page their development

00:36:04,140 --> 00:36:10,550
environment is called ESP - IDF and so

00:36:08,369 --> 00:36:14,579
I've created an ESP directory I've

00:36:10,550 --> 00:36:17,640
checked out the ESP IDF project from

00:36:14,579 --> 00:36:21,059
github I downloaded the extensive

00:36:17,640 --> 00:36:23,160
toolset so ten silica is the company

00:36:21,059 --> 00:36:26,550
that actually maps out all the logic for

00:36:23,160 --> 00:36:28,500
the core processor they provide a tool

00:36:26,550 --> 00:36:30,960
chain called the extensive tool chain it

00:36:28,500 --> 00:36:35,220
to GCC derivative for cross compiling

00:36:30,960 --> 00:36:37,650
for their hardware so you can see that

00:36:35,220 --> 00:36:40,170
that's installed here extensor ESP 32

00:36:37,650 --> 00:36:43,470
elf I put it in my path so that I could

00:36:40,170 --> 00:36:46,260
find the compiler right so now I have

00:36:43,470 --> 00:36:49,619
this ESP IDF an extension toolkit and

00:36:46,260 --> 00:36:56,369
the extent of the configuration was

00:36:49,619 --> 00:37:00,510
essentially woops I can type and I can

00:36:56,369 --> 00:37:04,049
make this one bigger you'll notice I

00:37:00,510 --> 00:37:05,700
have this IDF path set so I had to set

00:37:04,049 --> 00:37:08,400
an environment variable to find the IDF

00:37:05,700 --> 00:37:12,359
path pretty straightforward and then in

00:37:08,400 --> 00:37:16,410
my path I had to add the extensive tools

00:37:12,359 --> 00:37:18,569
the bend to the tools literally that was

00:37:16,410 --> 00:37:21,059
what I had to do to get started now

00:37:18,569 --> 00:37:24,089
I've plugged in an ESP 32 into my

00:37:21,059 --> 00:37:30,030
machine into my USB port and it is

00:37:24,089 --> 00:37:33,140
currently running as the slab USB you

00:37:30,030 --> 00:37:33,140
are device

00:37:34,130 --> 00:37:43,020
what you see here actually I'm going to

00:37:36,690 --> 00:37:57,180
start over so you can see it from I am

00:37:43,020 --> 00:37:59,610
going to go get bigger so you can see so

00:37:57,180 --> 00:38:03,600
this is that ESP IDs that's not big

00:37:59,610 --> 00:38:07,140
enough for the people in the back tell

00:38:03,600 --> 00:38:11,880
me when I have my can't see very well

00:38:07,140 --> 00:38:14,970
today's because I'm tired so so this is

00:38:11,880 --> 00:38:16,890
the ESP IDF pass if you look at the

00:38:14,970 --> 00:38:21,990
readme it'll tell you exactly the same

00:38:16,890 --> 00:38:26,430
thing as what I just did basically check

00:38:21,990 --> 00:38:28,170
it out and do stuff now they have a make

00:38:26,430 --> 00:38:31,050
system setup that should look really

00:38:28,170 --> 00:38:33,840
familiar if you've ever built the Linux

00:38:31,050 --> 00:38:35,130
kernel in the old days I don't know how

00:38:33,840 --> 00:38:38,940
it is today I haven't done it in the

00:38:35,130 --> 00:38:41,910
left n years where n is larger than I'm

00:38:38,940 --> 00:38:45,780
going to admit but if I go to the

00:38:41,910 --> 00:38:47,430
examples directory here's some simple

00:38:45,780 --> 00:38:49,950
examples right here's a hello world

00:38:47,430 --> 00:38:53,190
example so if I sit here in the hello

00:38:49,950 --> 00:39:01,580
world directory and I say make menu

00:38:53,190 --> 00:39:01,580
config oh I wonder how big I have to go

00:39:04,280 --> 00:39:08,840
it just keeps getting better doesn't it

00:39:14,640 --> 00:39:19,740
yeah I never it always bites me somehow

00:39:21,810 --> 00:39:30,130
there so it goes through this very handy

00:39:26,320 --> 00:39:33,130
little configuration menu if you look at

00:39:30,130 --> 00:39:34,840
this the first option is the SDK so it's

00:39:33,130 --> 00:39:36,790
going to tell me that it's found the

00:39:34,840 --> 00:39:40,300
extensive compiler and it's using Python

00:39:36,790 --> 00:39:42,010
- I can do bootloader config which is

00:39:40,300 --> 00:39:45,190
basically however most do I want the

00:39:42,010 --> 00:39:47,740
system to run in under security you can

00:39:45,190 --> 00:39:50,140
see I can I can actually select enable

00:39:47,740 --> 00:39:53,200
secure boot and enable flash encryption

00:39:50,140 --> 00:39:54,730
it says read dot first because once you

00:39:53,200 --> 00:39:55,930
do this you can't actually go back

00:39:54,730 --> 00:39:58,090
through the development cycle without

00:39:55,930 --> 00:40:00,910
more work so they don't want you to be

00:39:58,090 --> 00:40:02,910
surprised as an engineer that you made a

00:40:00,910 --> 00:40:05,740
choice that it makes your life harder

00:40:02,910 --> 00:40:08,590
serial flasher config this is where I

00:40:05,740 --> 00:40:13,180
can tell it things like that's not where

00:40:08,590 --> 00:40:17,020
it is I'm going to go here I'm going to

00:40:13,180 --> 00:40:24,310
select this I'm going to not go there

00:40:17,020 --> 00:40:26,590
I'm going to go here and put it there it

00:40:24,310 --> 00:40:28,930
sets itself to a reasonable baud rate

00:40:26,590 --> 00:40:30,520
compresses things when it goes up they

00:40:28,930 --> 00:40:31,720
have a couple of tools one is make

00:40:30,520 --> 00:40:34,390
monitor which I'm going to show you

00:40:31,720 --> 00:40:36,640
which is really handy in the development

00:40:34,390 --> 00:40:39,220
I'm going to save it just to be pedantic

00:40:36,640 --> 00:40:41,920
because save your work often something

00:40:39,220 --> 00:40:43,870
will blow up you can choose how you want

00:40:41,920 --> 00:40:46,180
the partition table on the ESP 32 to

00:40:43,870 --> 00:40:48,640
work it has a couple of out-of-the-box

00:40:46,180 --> 00:40:50,830
solutions one is a single app with no

00:40:48,640 --> 00:40:54,220
over-the-air support and the other one

00:40:50,830 --> 00:40:56,200
is you can have a factory based app with

00:40:54,220 --> 00:40:57,130
two over-the-air segments defined so

00:40:56,200 --> 00:40:59,800
that you can then do over-the-air

00:40:57,130 --> 00:41:02,230
updates I'm going to leave it like it is

00:40:59,800 --> 00:41:05,800
for now because the demo is going to

00:41:02,230 --> 00:41:08,950
change some stuff later a bunch of

00:41:05,800 --> 00:41:10,420
optimization stuff gets done if you go

00:41:08,950 --> 00:41:12,430
to release but we want to see all the

00:41:10,420 --> 00:41:13,960
stuff come out when we build it and then

00:41:12,430 --> 00:41:15,190
in component config this is where you

00:41:13,960 --> 00:41:16,960
start getting into the meat of what's

00:41:15,190 --> 00:41:18,850
included in the in the app that you're

00:41:16,960 --> 00:41:21,400
going to build right so you can turn

00:41:18,850 --> 00:41:23,350
bluetooth on and off first thing to know

00:41:21,400 --> 00:41:25,180
that way if you're doing Wi-Fi and you

00:41:23,350 --> 00:41:28,059
all want to use the power

00:41:25,180 --> 00:41:31,000
just leave the Bluetooth off under the

00:41:28,059 --> 00:41:32,619
ESP 30 to specific commands or

00:41:31,000 --> 00:41:34,480
configuration you'll notice a couple of

00:41:32,619 --> 00:41:36,099
things one is you can select the CPU

00:41:34,480 --> 00:41:38,980
frequency which will affect your power

00:41:36,099 --> 00:41:42,789
consumption the choices are 80 160 and

00:41:38,980 --> 00:41:45,160
240 it comes out of the box of 240 you

00:41:42,789 --> 00:41:49,510
can reserve memory for two cores the the

00:41:45,160 --> 00:41:51,400
ESP 32 actually has two cores inside the

00:41:49,510 --> 00:41:55,210
chip and you can reserve memory for both

00:41:51,400 --> 00:42:01,180
but also down lower you can say if I can

00:41:55,210 --> 00:42:07,180
find it maybe it's not here oh it's on a

00:42:01,180 --> 00:42:09,809
previous setting I think no it's going

00:42:07,180 --> 00:42:09,809
to be here somewhere

00:42:09,869 --> 00:42:14,710
I'm missing it somewhere there is an

00:42:12,640 --> 00:42:17,500
option to stay lock the app to a single

00:42:14,710 --> 00:42:18,910
core so then you don't actually need

00:42:17,500 --> 00:42:21,730
both enabled and you can save resources

00:42:18,910 --> 00:42:23,799
but you can see there's a bunch of other

00:42:21,730 --> 00:42:27,670
configs this is the ultra low pro

00:42:23,799 --> 00:42:29,829
low-power processor that is available to

00:42:27,670 --> 00:42:31,329
run even when you are in sleep mode but

00:42:29,829 --> 00:42:32,950
you have to program it with assembly and

00:42:31,329 --> 00:42:36,010
their tooling isn't filled out yet so I

00:42:32,950 --> 00:42:40,240
never enable that it's not worth the

00:42:36,010 --> 00:42:44,380
work right now a bunch of stant a bunch

00:42:40,240 --> 00:42:45,730
of other stuff real-time clock source so

00:42:44,380 --> 00:42:49,029
you'll notice there's no clock which

00:42:45,730 --> 00:42:52,599
will come up later in my demo turning

00:42:49,029 --> 00:42:55,990
Wi-Fi on this is the one under free are

00:42:52,599 --> 00:42:58,690
under art off I can say run this run the

00:42:55,990 --> 00:43:01,900
artists program only only on the first

00:42:58,690 --> 00:43:03,609
core so if I allocate memory for both

00:43:01,900 --> 00:43:06,010
and lock into the first quorum wasting

00:43:03,609 --> 00:43:07,809
memory if I if I don't allocate memory

00:43:06,010 --> 00:43:10,390
for both and I run it on one I'm kind of

00:43:07,809 --> 00:43:16,349
got the optimal resource stuff going on

00:43:10,390 --> 00:43:18,369
then there's a bunch of other config I

00:43:16,349 --> 00:43:21,270
haven't experienced any but my

00:43:18,369 --> 00:43:24,880
experience is anecdotal I haven't tested

00:43:21,270 --> 00:43:30,579
so I'm not sure that door doesn't like

00:43:24,880 --> 00:43:37,289
to be opened by the way a bunch of other

00:43:30,579 --> 00:43:40,239
interesting things one of them being

00:43:37,289 --> 00:43:44,979
there's the debug stuff I think it's

00:43:40,239 --> 00:43:47,920
under here there is an interesting debug

00:43:44,979 --> 00:43:50,229
behavior that they support where you can

00:43:47,920 --> 00:43:53,099
dump you can have the ESP thirty-two

00:43:50,229 --> 00:43:55,720
when it has a problem dump its core in

00:43:53,099 --> 00:43:58,119
one mode you can dump the core to flash

00:43:55,720 --> 00:44:02,979
memory and in another mode it'll

00:43:58,119 --> 00:44:04,509
actually encode the core and dump it

00:44:02,979 --> 00:44:06,039
over the serial port so that you can

00:44:04,509 --> 00:44:07,239
grab it and they have tools for then

00:44:06,039 --> 00:44:09,130
converting it back to a corridor

00:44:07,239 --> 00:44:12,039
analyzed on your desktop which i think

00:44:09,130 --> 00:44:13,960
is kind of hint anyway I'm going to save

00:44:12,039 --> 00:44:16,690
this because I think that I haven't made

00:44:13,960 --> 00:44:21,849
any changes that aren't kill me you

00:44:16,690 --> 00:44:25,509
never know and I'm going to say make for

00:44:21,849 --> 00:44:27,009
now I'll just say make just for fun to

00:44:25,509 --> 00:44:29,229
show you so it's building all of its

00:44:27,009 --> 00:44:31,089
various pieces and it's pretty quick and

00:44:29,229 --> 00:44:33,489
simple and straightforward nothing

00:44:31,089 --> 00:44:39,309
magical going on other than its using

00:44:33,489 --> 00:44:47,049
the cross compiler to target five

00:44:39,309 --> 00:44:49,479
minutes yes yes it is there are cross

00:44:47,049 --> 00:44:53,670
compilers for most of the platforms if

00:44:49,479 --> 00:44:53,670
not all of them at least those three

00:44:55,499 --> 00:45:01,479
it's a GCC port yeah for that so now

00:44:59,589 --> 00:45:04,269
it's built you see it says you can run

00:45:01,479 --> 00:45:05,769
make flash I'm going to run a couple of

00:45:04,269 --> 00:45:10,539
commands at the same time I'm gonna run

00:45:05,769 --> 00:45:12,819
make flash and monitor so now it's going

00:45:10,539 --> 00:45:14,259
to actually flash to the device over the

00:45:12,819 --> 00:45:16,749
serial port because I pre-configured

00:45:14,259 --> 00:45:18,039
that all on the menu and once it flashes

00:45:16,749 --> 00:45:20,469
it's going to hit it's going to invoke

00:45:18,039 --> 00:45:22,059
the reset on the board and open a serial

00:45:20,469 --> 00:45:24,249
port monitor so that we can actually see

00:45:22,059 --> 00:45:27,519
it as it goes by all the same sort of

00:45:24,249 --> 00:45:28,900
command this is compared to the inn so

00:45:27,519 --> 00:45:30,999
there you go now it's started you can

00:45:28,900 --> 00:45:33,940
see it said hello world and then it will

00:45:30,999 --> 00:45:38,079
reboot again and there's the output so

00:45:33,940 --> 00:45:40,569
this is about the most amazing

00:45:38,079 --> 00:45:43,559
improvement in development over what we

00:45:40,569 --> 00:45:47,109
did with the esp8266 you can imagine

00:45:43,559 --> 00:45:49,440
that was not fun to program I mean it

00:45:47,109 --> 00:45:52,500
was fun to program

00:45:49,440 --> 00:45:56,550
it was high effort this is fun and low

00:45:52,500 --> 00:46:00,329
effort we have a dry ot using MQTT

00:45:56,550 --> 00:46:03,540
running on the esp8266 we have it

00:46:00,329 --> 00:46:06,140
compiling and mostly running here which

00:46:03,540 --> 00:46:08,940
is explains why I'm tired for this talk

00:46:06,140 --> 00:46:12,210
the one place that we the one thing we

00:46:08,940 --> 00:46:18,690
have left to connect which I can show

00:46:12,210 --> 00:46:23,579
you actually for fun let's go now to ESP

00:46:18,690 --> 00:46:27,810
ESP IDF adder so I'll take you through

00:46:23,579 --> 00:46:31,530
what I did here really quickly merging

00:46:27,810 --> 00:46:34,530
to make environments so azure IOT c99

00:46:31,530 --> 00:46:37,470
library we use c make this is clearly

00:46:34,530 --> 00:46:38,970
not using c make its using component

00:46:37,470 --> 00:46:43,740
make files and platform make files

00:46:38,970 --> 00:46:46,319
animate makes it infrastructure so if I

00:46:43,740 --> 00:46:48,300
go into components which is where it

00:46:46,319 --> 00:46:50,069
looks for default by for sub components

00:46:48,300 --> 00:46:53,780
it wants to build you can see I have an

00:46:50,069 --> 00:46:56,190
azure IOT SDK and see if I go in here

00:46:53,780 --> 00:46:59,910
you'll see I built the component make

00:46:56,190 --> 00:47:02,280
file for the IOT sdk it has all of the

00:46:59,910 --> 00:47:04,470
stuff that you need to build i have

00:47:02,280 --> 00:47:06,119
pulled out a subset of all the various

00:47:04,470 --> 00:47:07,920
libraries because i don't need all of

00:47:06,119 --> 00:47:10,980
them I don't need a AMQP I don't need

00:47:07,920 --> 00:47:13,710
HTTP and WebSockets I just want the MQTT

00:47:10,980 --> 00:47:16,650
layer I'm going to get the I'm running

00:47:13,710 --> 00:47:18,950
out of time fine so if I do make and I'm

00:47:16,650 --> 00:47:26,839
just going to go fast your make Flash

00:47:18,950 --> 00:47:26,839
monitor actually I have to go up here

00:47:28,349 --> 00:47:37,499
look I can spell I promise

00:47:34,339 --> 00:47:42,359
so I built it in there been no changes

00:47:37,499 --> 00:47:44,009
so now it's flashing reflashing this

00:47:42,359 --> 00:47:45,960
will take about a minute and a half two

00:47:44,009 --> 00:47:50,009
minutes because it's a fairly large

00:47:45,960 --> 00:47:53,670
binary there's not a lot of optimization

00:47:50,009 --> 00:47:56,160
in the ESP 30 to build system so there's

00:47:53,670 --> 00:47:58,979
a ton of object files that are still

00:47:56,160 --> 00:48:00,829
linked in and move to the ESP 32 even

00:47:58,979 --> 00:48:03,509
though they're not necessarily in use

00:48:00,829 --> 00:48:06,239
there's a big opportunity in our

00:48:03,509 --> 00:48:10,229
community to come up with a single set

00:48:06,239 --> 00:48:11,789
of reliable object implement object file

00:48:10,229 --> 00:48:14,339
implementations for things like around

00:48:11,789 --> 00:48:16,789
security that everybody doesn't have to

00:48:14,339 --> 00:48:20,339
include their own TLS layer every time

00:48:16,789 --> 00:48:23,609
so here I am I'm launching you can see

00:48:20,339 --> 00:48:26,069
I'm there you can't see because I went

00:48:23,609 --> 00:48:34,969
by too fast but what you can't see I've

00:48:26,069 --> 00:48:37,200
exited what you'll see here it fires up

00:48:34,969 --> 00:48:40,619
one of the first things that you see

00:48:37,200 --> 00:48:42,749
right here which is interesting is we're

00:48:40,619 --> 00:48:46,170
on the we're on the L F of N channel

00:48:42,749 --> 00:48:48,900
Wi-Fi we got our IP address and I invoke

00:48:46,170 --> 00:48:50,400
an SMTP server to get local time because

00:48:48,900 --> 00:48:55,170
if I don't set my local time right

00:48:50,400 --> 00:48:57,239
generating credentials sucks so I set my

00:48:55,170 --> 00:48:58,650
local time and I print out the Portland

00:48:57,239 --> 00:49:00,180
time and Shanghai because that's where

00:48:58,650 --> 00:49:03,420
expressive so I thought it was kind of

00:49:00,180 --> 00:49:06,749
cute and then I've in I've initialized

00:49:03,420 --> 00:49:10,079
the IOT SDK and I've created the client

00:49:06,749 --> 00:49:11,999
and I've set the message callback which

00:49:10,079 --> 00:49:14,279
means I'm registering for when I get an

00:49:11,999 --> 00:49:16,589
MQTT message from the cloud and I've

00:49:14,279 --> 00:49:19,289
posted an asynchronous message to go to

00:49:16,589 --> 00:49:22,140
the cloud and then in the background

00:49:19,289 --> 00:49:25,109
when my work loop happens you'll see I'm

00:49:22,140 --> 00:49:28,200
trying to connect to this end point

00:49:25,109 --> 00:49:31,369
which is my end qtg endpoint and the

00:49:28,200 --> 00:49:34,319
first thing that happens is it fails and

00:49:31,369 --> 00:49:37,319
I can tell you from our experience with

00:49:34,319 --> 00:49:39,960
the 80 to 66 that this failure is that I

00:49:37,319 --> 00:49:41,480
did not tell it what client certificate

00:49:39,960 --> 00:49:44,390
to provide when it did

00:49:41,480 --> 00:49:46,369
rocket with the TLS connection so the

00:49:44,390 --> 00:49:47,570
cloud side is saying it's really nice

00:49:46,369 --> 00:49:49,480
you want to talk to me but I don't know

00:49:47,570 --> 00:49:52,010
who you are

00:49:49,480 --> 00:49:54,740
and so that's where we are on the demo

00:49:52,010 --> 00:49:56,869
but you can see we've got a whole bunch

00:49:54,740 --> 00:49:58,580
of stuff built we will share this on

00:49:56,869 --> 00:50:01,220
github it will be freely available for

00:49:58,580 --> 00:50:02,570
anyone who wants to do it we have really

00:50:01,220 --> 00:50:05,030
good interactions with espresso from

00:50:02,570 --> 00:50:07,100
others and if you have questions now

00:50:05,030 --> 00:50:09,010
it's probably your time because if I

00:50:07,100 --> 00:50:13,220
talk any more he's going to give me the

00:50:09,010 --> 00:50:17,100
yeah we got look at me going 2-0 oh yeah

00:50:13,220 --> 00:50:22,290
we got ready rubs off yes thank you guys

00:50:17,100 --> 00:50:22,290

YouTube URL: https://www.youtube.com/watch?v=W0OA7jaoBA0


