Title: Keynote: Dirk Hohndel, VP, VMware, in Conversation with Linux Creator Linus Torvalds
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Keynote: Dirk Hohndel, VP, Chief Open Source Officer, VMware, in Conversation with Linux Creator Linus Torvalds

About Dirk Hohndel
Dirk is VMware’s Chief Open Source Officer, leading the company’s open source efforts and strategy and driving common values and processes across the company for VMware’s interaction with the open source communities. Before joining VMware, Dirk spent almost 15 years as Intel’s Chief Linux and Open Source Technologist, guiding Intel’s engagements in open source. Before that, among other roles, he worked as Chief Technology Officer of SuSE and Unix Architect of Deutsche Bank. Dirk has been an active developer and contributor in Linux and open source since the early 1990s. He was one of the early Linux kernel developers and has contributed to several dozen open source projects over the years. Dirk holds a Diploma in Mathematics and Computer Science from the University of Würzburg, Germany. He lives in Portland, OR.

About Linus Torvalds
Linus Torvalds created the Linux kernel and oversaw open source development of the widely-used Linux operating system. Torvalds was born on December 28, 1969 in Helsinki, Finland. Torvalds enrolled at the University of Helsinki in 1988, graduating with a master's degree in computer science. His M.Sc. thesis was titled Linux: A Portable Operating System. An avid computer programmer, Linus authored many gaming applications in his early years. After purchasing a personal computer with an Intel 386 CPU, he began using Minix, an Unix-inspired operating system created by Andrew Tanenbaum for use as a teaching tool. Torvalds started work on a new kernel, later to be named "Linux", in the fall of 1991 and after forming a team of volunteers to work on this new kernel, released V1.0 in the spring of 1994. In 1996, Torvalds accepted an invitation to visit the California headquarters of Transmeta, a start-up company in the first stages of designing an energy saving central processing unit (CPU). Torvalds then accepted a position at Transmeta and moved to California with his family. Along with his work for Transmeta, Torvalds continued to oversee kernel development for Linux. In 2003, Torvalds left Transmeta to focus exclusively on the Linux kernel, backed by the Open Source Development Labs (OSDL), a consortium formed by high-tech companies, which included IBM, Hewlett-Packard, Intel, AMD, RedHat, Novell and many others. The purpose of the consortium was to promote Linux development. OSDL merged with The Free Standards Group in January 2007 to become The Linux Foundation. Torvalds remains the ultimate authority on what new code is incorporated into the standard Linux kernel.
Captions: 
	00:00:00,290 --> 00:00:06,480
good morning everyone so I think that

00:00:03,389 --> 00:00:10,380
conversation was not eight years ago but

00:00:06,480 --> 00:00:15,389
something like 2003 not to date you or

00:00:10,380 --> 00:00:18,570
anything but been a while and you did

00:00:15,389 --> 00:00:22,560
this Linux thing I just learn okay good

00:00:18,570 --> 00:00:25,410
so my name is Dirk cuando this is my

00:00:22,560 --> 00:00:27,750
hometown it's very rare to actually wake

00:00:25,410 --> 00:00:29,699
up in my own bed and then be able to go

00:00:27,750 --> 00:00:31,769
to a conference I really appreciate that

00:00:29,699 --> 00:00:36,120
we need to do more conferences in

00:00:31,769 --> 00:00:38,340
Portland who hears from Portland it's

00:00:36,120 --> 00:00:43,920
actually fewer people that I thought wow

00:00:38,340 --> 00:00:47,489
okay nevermind my hometown as well these

00:00:43,920 --> 00:00:49,110
days for last 13 years I have to say

00:00:47,489 --> 00:00:52,020
having a conference in portland in

00:00:49,110 --> 00:00:56,520
February I'm at least it keeps the

00:00:52,020 --> 00:01:00,120
people inside is what I say well we were

00:00:56,520 --> 00:01:02,670
in in tahoe last week and and jim's joke

00:01:00,120 --> 00:01:04,710
was that there would be mudslides drinks

00:01:02,670 --> 00:01:06,720
of the in the evening reception did not

00:01:04,710 --> 00:01:10,080
go over well with all the mudslides

00:01:06,720 --> 00:01:12,360
locking people from going there but ok

00:01:10,080 --> 00:01:14,390
so normally when limits and i go to a

00:01:12,360 --> 00:01:16,409
conference one of the things that we do

00:01:14,390 --> 00:01:19,439
traditionally if we go somewhere really

00:01:16,409 --> 00:01:21,810
exciting to go scuba diving and then go

00:01:19,439 --> 00:01:24,720
to a conference this time there wasn't

00:01:21,810 --> 00:01:26,939
an easy stop on the way to go scuba

00:01:24,720 --> 00:01:29,610
diving from our homes to hear but i

00:01:26,939 --> 00:01:31,290
think we're going up to hood sports in a

00:01:29,610 --> 00:01:33,200
couple of weeks where the water

00:01:31,290 --> 00:01:36,450
temperature is going to be a very bamhi

00:01:33,200 --> 00:01:39,140
42 degrees and it's going to be awesome

00:01:36,450 --> 00:01:41,729
i'm very much looking forward to this

00:01:39,140 --> 00:01:45,570
this is the second in a row that we're

00:01:41,729 --> 00:01:47,189
dlc yet now why I avoided ELC for many

00:01:45,570 --> 00:01:50,700
years and now we're doing it two years

00:01:47,189 --> 00:01:53,670
in a row how did that happen I've dup I

00:01:50,700 --> 00:01:57,479
I will not take any responsibility so

00:01:53,670 --> 00:02:00,540
let's start with some actual content for

00:01:57,479 --> 00:02:03,600
what for to you released it on sunday

00:02:00,540 --> 00:02:07,390
from 10-4 attend do this to something

00:02:03,600 --> 00:02:12,040
else oh I read it binary sorry for a 10

00:02:07,390 --> 00:02:15,540
enlisted you released it on Sunday

00:02:12,040 --> 00:02:19,060
highlight lowlight anything interesting

00:02:15,540 --> 00:02:21,580
for 10 was fairly calm for but nine was

00:02:19,060 --> 00:02:24,280
our big relief because greg had made the

00:02:21,580 --> 00:02:27,640
mistake of telling everybody that 4.9

00:02:24,280 --> 00:02:31,000
would be a long-term release which

00:02:27,640 --> 00:02:34,540
always means that now several companies

00:02:31,000 --> 00:02:36,730
decide oh we really hate this so for 29

00:02:34,540 --> 00:02:41,620
was bigger than usual and I expected

00:02:36,730 --> 00:02:45,820
four-point tend to be calmer it wasn't

00:02:41,620 --> 00:02:48,280
it was very average these days it means

00:02:45,820 --> 00:02:53,170
that we change a lot of things that

00:02:48,280 --> 00:02:56,230
there were no like big things that you

00:02:53,170 --> 00:03:00,060
need to like bring up we had tons of new

00:02:56,230 --> 00:03:04,060
drivers we had tons of updates the core

00:03:00,060 --> 00:03:09,060
I all find it surprising that even now

00:03:04,060 --> 00:03:12,820
like 25 plus years after we still have

00:03:09,060 --> 00:03:15,760
updates to really core like including

00:03:12,820 --> 00:03:20,040
low level assembly files for x86 that

00:03:15,760 --> 00:03:23,230
have been around forever but it there's

00:03:20,040 --> 00:03:26,049
the whole process has been so smooth and

00:03:23,230 --> 00:03:28,780
normal for the last ten years that we

00:03:26,049 --> 00:03:33,640
seldom have these huge peaks we have a

00:03:28,780 --> 00:03:36,329
lot of working out on all over but for

00:03:33,640 --> 00:03:38,709
points10 did not have anything that

00:03:36,329 --> 00:03:42,730
specifically I'd like to shout out for

00:03:38,709 --> 00:03:45,579
so you said that Greg made a mistake

00:03:42,730 --> 00:03:47,410
free announcing that 49 would be a long

00:03:45,579 --> 00:03:49,329
term support tunnel why do you think

00:03:47,410 --> 00:03:52,030
that's a mistake isn't it good to give

00:03:49,329 --> 00:03:55,120
people advanced warning is this is the

00:03:52,030 --> 00:03:57,610
one you want to aim for so greg has

00:03:55,120 --> 00:04:00,070
actually been trying it both ways and

00:03:57,610 --> 00:04:03,420
i'm not sure mistake is necessarily the

00:04:00,070 --> 00:04:06,870
wrong like the right thing to call it

00:04:03,420 --> 00:04:11,170
I'm actually happier with having

00:04:06,870 --> 00:04:14,680
releases that are purely time based and

00:04:11,170 --> 00:04:17,410
are just regular and then the we pick

00:04:14,680 --> 00:04:19,070
and greg has done that way several times

00:04:17,410 --> 00:04:23,270
to that he just picks

00:04:19,070 --> 00:04:26,210
them based on timing and often after the

00:04:23,270 --> 00:04:28,370
fact and that just means that you don't

00:04:26,210 --> 00:04:30,860
have this situation where you have

00:04:28,370 --> 00:04:32,630
developers who feel pushed into hitting

00:04:30,860 --> 00:04:38,300
a particular release and I think that's

00:04:32,630 --> 00:04:40,580
healthier it just means that we we merge

00:04:38,300 --> 00:04:44,000
code when it's ready and we don't have

00:04:40,580 --> 00:04:49,430
any other pressures and and it's been

00:04:44,000 --> 00:04:55,160
very successful model for us and pre

00:04:49,430 --> 00:04:56,870
announcing LTS releases kind of fights

00:04:55,160 --> 00:04:59,840
that it's not so bad I mean

00:04:56,870 --> 00:05:02,330
realistically it was bigger than usual

00:04:59,840 --> 00:05:05,840
but we didn't have any huge issues I

00:05:02,330 --> 00:05:09,860
just like how our process has literally

00:05:05,840 --> 00:05:11,390
been about doing steady releases all the

00:05:09,860 --> 00:05:13,880
time and then you have the stable trees

00:05:11,390 --> 00:05:16,310
after that and then you pick one of the

00:05:13,880 --> 00:05:18,950
stable trees to be a long-term support

00:05:16,310 --> 00:05:22,130
release and and it's being we've been

00:05:18,950 --> 00:05:24,800
doing this for ten plus years and it

00:05:22,130 --> 00:05:26,750
works really well so I want to focus

00:05:24,800 --> 00:05:30,140
this a little bit because there are a

00:05:26,750 --> 00:05:31,730
lot of of groups not just commercial

00:05:30,140 --> 00:05:34,700
companies a lot of groups to actually

00:05:31,730 --> 00:05:36,830
like the idea of knowing which stable

00:05:34,700 --> 00:05:39,890
which kernel will be the long-term they

00:05:36,830 --> 00:05:43,010
had one so and I remember that it was

00:05:39,890 --> 00:05:45,290
maybe a couple years ago there was a lot

00:05:43,010 --> 00:05:47,660
of frustration that the feeling was that

00:05:45,290 --> 00:05:49,850
the people were tricked to thinking it

00:05:47,660 --> 00:05:52,370
was a different one and there were some

00:05:49,850 --> 00:05:56,090
hard feelings so do we have any evidence

00:05:52,370 --> 00:05:59,420
in for top nine that thing's got merged

00:05:56,090 --> 00:06:02,510
to too early so more taxes after the

00:05:59,420 --> 00:06:06,140
fact or for more stability issues after

00:06:02,510 --> 00:06:08,390
the release it's too early to tell yet I

00:06:06,140 --> 00:06:09,590
don't think I think 4.9 is to find

00:06:08,390 --> 00:06:17,480
release and I don't think it actually

00:06:09,590 --> 00:06:19,850
cost problems I i think our regular

00:06:17,480 --> 00:06:22,880
really schedule is so predictable now

00:06:19,850 --> 00:06:27,680
that people don't actually worry too

00:06:22,880 --> 00:06:29,300
much and and there are people who care

00:06:27,680 --> 00:06:31,580
deeply about the long-term support

00:06:29,300 --> 00:06:32,900
releases but at the same time those

00:06:31,580 --> 00:06:37,850
people also tend

00:06:32,900 --> 00:06:40,160
have a longer term look on these

00:06:37,850 --> 00:06:43,190
releases in the first place so they

00:06:40,160 --> 00:06:45,410
seldom have a lot of things that they

00:06:43,190 --> 00:06:47,930
want to get into this particular release

00:06:45,410 --> 00:06:50,090
so you did there was definitely some

00:06:47,930 --> 00:06:54,320
pressure and 4.9 ended up being the

00:06:50,090 --> 00:06:56,300
biggest release we've ever done but but

00:06:54,320 --> 00:07:00,020
at the same time I don't think we I'm

00:06:56,300 --> 00:07:02,750
not saying 4.9 bad I just say that I

00:07:00,020 --> 00:07:04,669
prefer that the model where where we

00:07:02,750 --> 00:07:06,590
don't have to worry about particular

00:07:04,669 --> 00:07:09,800
features at all and we just merge with

00:07:06,590 --> 00:07:12,260
Fred so you announce this crazy idea 12

00:07:09,800 --> 00:07:14,330
and a half years ago into that lock july

00:07:12,260 --> 00:07:18,199
two thousand four I actually did my

00:07:14,330 --> 00:07:22,780
homework so literally half the history

00:07:18,199 --> 00:07:26,870
of our Colonel it has been this 10-week

00:07:22,780 --> 00:07:29,389
roughly revolving door of a new release

00:07:26,870 --> 00:07:31,460
and I mean when we started this I think

00:07:29,389 --> 00:07:33,800
we all in the room told you that you

00:07:31,460 --> 00:07:35,840
were batshit crazy yeah I think it was

00:07:33,800 --> 00:07:40,460
that may have been really exact words

00:07:35,840 --> 00:07:42,949
yes yes they were yeah we've had it's

00:07:40,460 --> 00:07:45,470
interesting the colonel is a big project

00:07:42,949 --> 00:07:51,169
and we've actually done a lot of things

00:07:45,470 --> 00:07:54,740
that that tried a lot of differential

00:07:51,169 --> 00:07:57,169
perches at over the years and every time

00:07:54,740 --> 00:07:59,510
we do something it ends up pushing other

00:07:57,169 --> 00:08:01,550
projects to do the same thing which I

00:07:59,510 --> 00:08:03,770
find interest we used to do the even-odd

00:08:01,550 --> 00:08:06,830
thing which was a huge mistake but it

00:08:03,770 --> 00:08:08,870
worked for several years where where we

00:08:06,830 --> 00:08:11,210
would have even releases our stable

00:08:08,870 --> 00:08:13,310
releases and odd releases are the

00:08:11,210 --> 00:08:16,490
development releases and we do that for

00:08:13,310 --> 00:08:19,310
like each release would effectively take

00:08:16,490 --> 00:08:21,229
we were aiming for one year but it would

00:08:19,310 --> 00:08:25,060
effectively take two to three years

00:08:21,229 --> 00:08:28,490
which was very painful but it became

00:08:25,060 --> 00:08:31,580
inside the open-source groups a lot of

00:08:28,490 --> 00:08:34,370
other projects ended up trying the same

00:08:31,580 --> 00:08:36,680
thing and in fact when we switched over

00:08:34,370 --> 00:08:39,740
ten years ago to the new model where we

00:08:36,680 --> 00:08:42,169
do every releases every ten weeks it

00:08:39,740 --> 00:08:45,740
took years before people realized that

00:08:42,169 --> 00:08:47,420
okay three-point 11 is not actually a

00:08:45,740 --> 00:08:50,190
development really

00:08:47,420 --> 00:08:52,589
and three point 10 is not actually a

00:08:50,190 --> 00:08:56,339
stable release they're all stable yeah

00:08:52,589 --> 00:08:58,920
so we we've tried a lot of different

00:08:56,339 --> 00:09:02,100
models of usually also in source control

00:08:58,920 --> 00:09:06,800
management we get and the last ten years

00:09:02,100 --> 00:09:09,509
have been really pleasant for me because

00:09:06,800 --> 00:09:11,910
the process really has worked and we

00:09:09,509 --> 00:09:18,170
have not seen any pain real pain points

00:09:11,910 --> 00:09:21,930
yet and I say that because when you hit

00:09:18,170 --> 00:09:26,850
pain points in in your release model in

00:09:21,930 --> 00:09:29,459
your code slow that ends up being really

00:09:26,850 --> 00:09:31,769
painful I mean those those have been the

00:09:29,459 --> 00:09:37,730
times when I have gone this is not fun

00:09:31,769 --> 00:09:39,870
anymore right and and i like to say our

00:09:37,730 --> 00:09:42,600
current release schedule is almost

00:09:39,870 --> 00:09:45,930
boring which is exactly what you want

00:09:42,600 --> 00:09:49,949
you do not want your flow to be where

00:09:45,930 --> 00:09:52,019
where people start trying exciting new

00:09:49,949 --> 00:09:54,750
things because that's really painful it

00:09:52,019 --> 00:09:57,689
was interesting we were both in tahoe

00:09:54,750 --> 00:10:01,560
last week and before hour before my

00:09:57,689 --> 00:10:03,810
presentation the cubanita skies were on

00:10:01,560 --> 00:10:06,269
stage and they describes their release

00:10:03,810 --> 00:10:07,949
model which sounded very familiar they

00:10:06,269 --> 00:10:10,230
have two weeks where you can commit

00:10:07,949 --> 00:10:12,569
features to this feature repository

00:10:10,230 --> 00:10:14,370
after that gets frozen and then for ten

00:10:12,569 --> 00:10:16,589
weeks they develop on this and like I

00:10:14,370 --> 00:10:18,870
write that model before you know it

00:10:16,589 --> 00:10:21,480
really has been a very successful model

00:10:18,870 --> 00:10:25,319
at least at least as far as i can tell i

00:10:21,480 --> 00:10:28,500
think so i'm definitely in charge of the

00:10:25,319 --> 00:10:31,439
development side so i have very little

00:10:28,500 --> 00:10:33,269
connection to companies and product

00:10:31,439 --> 00:10:35,100
ization because after the development

00:10:33,269 --> 00:10:37,920
Colonel we have the stable colonel then

00:10:35,100 --> 00:10:40,079
we have long-term leases then we have

00:10:37,920 --> 00:10:43,319
the companies themselves during their

00:10:40,079 --> 00:10:46,410
own releases on top of the long term so

00:10:43,319 --> 00:10:49,410
I'm often at least two or three trees

00:10:46,410 --> 00:10:53,009
away from productization but from what I

00:10:49,410 --> 00:10:57,880
can tell even the product side really

00:10:53,009 --> 00:11:00,760
likes just this regular cadence of

00:10:57,880 --> 00:11:03,940
releases and knowing that whenever they

00:11:00,760 --> 00:11:06,880
do start something they they always have

00:11:03,940 --> 00:11:08,680
something that is not too old and as I

00:11:06,880 --> 00:11:10,360
it works both from a development

00:11:08,680 --> 00:11:13,450
standpoint and it does seem to work very

00:11:10,360 --> 00:11:16,300
well from a production standpoint to and

00:11:13,450 --> 00:11:18,520
now somebody can stand up and scream no

00:11:16,300 --> 00:11:23,860
you're wrong this is horrible oh that

00:11:18,520 --> 00:11:26,170
would be awesome anybody then and so but

00:11:23,860 --> 00:11:29,200
but you seem to indicate that this is

00:11:26,170 --> 00:11:32,640
all working well so are people really

00:11:29,200 --> 00:11:36,490
still disciplined are people really

00:11:32,640 --> 00:11:38,820
following the rules merch window and

00:11:36,490 --> 00:11:42,490
then after the merge window it's only

00:11:38,820 --> 00:11:44,620
fixes they are weak we're following the

00:11:42,490 --> 00:11:46,660
rules way better than we used to I mean

00:11:44,620 --> 00:11:48,610
the first five years it really took five

00:11:46,660 --> 00:11:51,730
years for people to really understand

00:11:48,610 --> 00:11:55,690
that there were rules at all open source

00:11:51,730 --> 00:11:57,970
development is sometimes a bit like

00:11:55,690 --> 00:12:01,030
 people people do their own thing

00:11:57,970 --> 00:12:03,400
and people have very strong opinions of

00:12:01,030 --> 00:12:04,990
how things should be done so for

00:12:03,400 --> 00:12:08,770
changing the whole model of development

00:12:04,990 --> 00:12:13,810
it took a long time before people really

00:12:08,770 --> 00:12:16,420
got it we're doing fairly well one of

00:12:13,810 --> 00:12:19,240
the metrics people use to check how well

00:12:16,420 --> 00:12:22,000
we're actually following the merge

00:12:19,240 --> 00:12:24,790
window rules is is looking after each

00:12:22,000 --> 00:12:27,880
release how much of the release was

00:12:24,790 --> 00:12:32,350
actually ready and in the so called

00:12:27,880 --> 00:12:34,330
random next tree before before the merge

00:12:32,350 --> 00:12:38,620
window open and we're usually ninety

00:12:34,330 --> 00:12:40,710
percent so 85 to 95 percent it depends a

00:12:38,620 --> 00:12:44,740
bit on release and that's actually

00:12:40,710 --> 00:12:46,840
fairly I mean that's clearly the bulk of

00:12:44,740 --> 00:12:49,650
it but then there is that roughly ten

00:12:46,840 --> 00:12:52,350
percent and a lot of that is bugs

00:12:49,650 --> 00:12:54,640
getting fixed and that just happens

00:12:52,350 --> 00:12:58,350
obviously after things have been merged

00:12:54,640 --> 00:13:02,440
but they're having I mean there are

00:12:58,350 --> 00:13:06,070
subsystems that I just say guys I will

00:13:02,440 --> 00:13:09,010
not pull you can't follow the rules go

00:13:06,070 --> 00:13:10,990
away right come back in two months when

00:13:09,010 --> 00:13:14,260
the merger window is open again

00:13:10,990 --> 00:13:18,250
and then do this right because this you

00:13:14,260 --> 00:13:20,020
you can't send me stuff in the late RC

00:13:18,250 --> 00:13:24,550
believes that I have never seen before

00:13:20,020 --> 00:13:27,640
and that is not a fix and and it still

00:13:24,550 --> 00:13:30,130
happens and sometimes I'm public about

00:13:27,640 --> 00:13:32,589
these love firsts and sometimes actually

00:13:30,130 --> 00:13:34,750
most the time I'm not and outside tell

00:13:32,589 --> 00:13:38,230
people in private guys I'm not pulling

00:13:34,750 --> 00:13:41,500
this because you can't follow these

00:13:38,230 --> 00:13:46,510
easy simple rules but on the whole I

00:13:41,500 --> 00:13:48,160
mean things work really well and and one

00:13:46,510 --> 00:13:50,310
of the advantage of the fairly short

00:13:48,160 --> 00:13:52,899
cycle is that even when people screw up

00:13:50,310 --> 00:13:56,230
you don't have I mean when we used to

00:13:52,899 --> 00:13:58,330
have two to three years of relief cycles

00:13:56,230 --> 00:14:01,120
if you screwed up and you miss that

00:13:58,330 --> 00:14:04,450
window you missed two to three years

00:14:01,120 --> 00:14:06,279
right and now if you've grew up and you

00:14:04,450 --> 00:14:10,060
can't follow the rules and I have to

00:14:06,279 --> 00:14:13,839
shout at you you only lost two months

00:14:10,060 --> 00:14:17,860
maybe so it it still happens but but

00:14:13,839 --> 00:14:19,959
it's it's way better than it used to be

00:14:17,860 --> 00:14:22,750
you can see it in a lot of other things

00:14:19,959 --> 00:14:25,630
people have gotten used to get I used to

00:14:22,750 --> 00:14:27,880
every release I used to have to really

00:14:25,630 --> 00:14:32,079
talk to people and by talking I mean

00:14:27,880 --> 00:14:34,959
shouting about how their get trees were

00:14:32,079 --> 00:14:37,029
rebased how they had more merge commits

00:14:34,959 --> 00:14:39,040
than they had actual work because they

00:14:37,029 --> 00:14:40,510
were just merging from me every day

00:14:39,040 --> 00:14:43,060
during the middle of Mercia window

00:14:40,510 --> 00:14:45,610
taking random stuff that may or may not

00:14:43,060 --> 00:14:49,000
work don't do that and I told people

00:14:45,610 --> 00:14:50,560
over and over and over again and I don't

00:14:49,000 --> 00:14:53,079
think I need to anymore I think people

00:14:50,560 --> 00:14:55,930
kind of a understand get Matt much

00:14:53,079 --> 00:14:58,510
better than they used to but B also the

00:14:55,930 --> 00:15:00,430
whole thing where where the process has

00:14:58,510 --> 00:15:02,890
been working so well for so long but

00:15:00,430 --> 00:15:05,020
that people kind of have learned what

00:15:02,890 --> 00:15:07,120
works and what does not work so it takes

00:15:05,020 --> 00:15:10,029
us to mean the process is going to stay

00:15:07,120 --> 00:15:12,339
around for a while longer I hope so I

00:15:10,029 --> 00:15:15,430
hope so really I mean we've had we've

00:15:12,339 --> 00:15:17,740
had serious disruptions in the process

00:15:15,430 --> 00:15:19,810
and they being very painful and they've

00:15:17,740 --> 00:15:20,140
been good I mean don't get me wrong they

00:15:19,810 --> 00:15:23,560
didn't

00:15:20,140 --> 00:15:26,320
good looking back but at the time we've

00:15:23,560 --> 00:15:28,420
had so many very painful situations

00:15:26,320 --> 00:15:31,120
where where people really hated each

00:15:28,420 --> 00:15:35,610
other's guts and and people walked away

00:15:31,120 --> 00:15:38,140
and there was a huge amount of stress

00:15:35,610 --> 00:15:39,400
even if our process right now is not

00:15:38,140 --> 00:15:42,880
perfect I'm not going to say it's

00:15:39,400 --> 00:15:45,760
perfect but it's it's working what it

00:15:42,880 --> 00:15:47,770
what having a stable process that people

00:15:45,760 --> 00:15:51,850
know how it works means that you don't

00:15:47,770 --> 00:15:54,610
have to worry about okay what will

00:15:51,850 --> 00:15:59,530
happen will I have to change the way I

00:15:54,610 --> 00:16:01,360
work there's a lot of us that ok I'm not

00:15:59,530 --> 00:16:04,560
going to say we're autistic because

00:16:01,360 --> 00:16:08,800
we're not but people end up being very

00:16:04,560 --> 00:16:12,730
set in their ways like you have you have

00:16:08,800 --> 00:16:16,540
you may be great at coding but it's very

00:16:12,730 --> 00:16:18,430
annoying when things change around you

00:16:16,540 --> 00:16:20,700
and you have to jump through hoops and

00:16:18,430 --> 00:16:26,610
you have to learn new things to do and

00:16:20,700 --> 00:16:32,560
we do have a lot of people who are I'm

00:16:26,610 --> 00:16:34,720
borderline OCD and and and really having

00:16:32,560 --> 00:16:38,530
a process that works makes everybody so

00:16:34,720 --> 00:16:42,850
much happier I think I'll change topics

00:16:38,530 --> 00:16:44,830
here so one of the things that I always

00:16:42,850 --> 00:16:48,850
find interesting especially Arjun

00:16:44,830 --> 00:16:53,860
embedded event security and the linux

00:16:48,850 --> 00:16:57,400
kernel and specifically the insane size

00:16:53,860 --> 00:17:02,260
of the attack surface the linux offers

00:16:57,400 --> 00:17:04,240
and of course I mean chips are getting

00:17:02,260 --> 00:17:07,540
getting bigger and bigger to the size

00:17:04,240 --> 00:17:09,940
isn't as critical anymore in the does it

00:17:07,540 --> 00:17:13,870
fit but I think it still is very

00:17:09,940 --> 00:17:15,670
critical in the attack surface do you

00:17:13,870 --> 00:17:19,329
think that linux really is the right

00:17:15,670 --> 00:17:21,100
kernel for IOT I think it depends on

00:17:19,329 --> 00:17:26,530
what you're doing I mean if you're doing

00:17:21,100 --> 00:17:28,750
a small sensor thing at the end point

00:17:26,530 --> 00:17:29,130
when it may not be the right thing at

00:17:28,750 --> 00:17:31,980
one

00:17:29,130 --> 00:17:33,870
I'm almost stirring that if you're doing

00:17:31,980 --> 00:17:36,570
these small sensors that are

00:17:33,870 --> 00:17:38,010
battery-operated and they're doing one

00:17:36,570 --> 00:17:40,590
thing they're sensing temperature

00:17:38,010 --> 00:17:44,790
humidity whatever and and they're just

00:17:40,590 --> 00:17:47,130
phoning back to a local box that then

00:17:44,790 --> 00:17:50,070
gateway that then actually does to be a

00:17:47,130 --> 00:17:52,230
work I understand that you maybe you

00:17:50,070 --> 00:17:55,230
want to use when it's even in the sensor

00:17:52,230 --> 00:17:57,630
for other reasons but but that's where

00:17:55,230 --> 00:18:00,450
we're Linux is certainly questionable

00:17:57,630 --> 00:18:02,070
but then once you get the is a gateway

00:18:00,450 --> 00:18:07,530
or anything that actually talks to the

00:18:02,070 --> 00:18:09,480
internet once you hit networking things

00:18:07,530 --> 00:18:11,340
get much more complicated and at that

00:18:09,480 --> 00:18:14,160
point you probably do want a real

00:18:11,340 --> 00:18:15,930
offering system and then I obviously

00:18:14,160 --> 00:18:19,470
think that Linux is the real operating

00:18:15,930 --> 00:18:23,010
systems inc III had a great conversation

00:18:19,470 --> 00:18:26,040
with with a an expert in the area of

00:18:23,010 --> 00:18:28,080
secure and reliable operating systems

00:18:26,040 --> 00:18:32,760
and he was convinced that we should

00:18:28,080 --> 00:18:35,550
start from scratch using rock and C++

00:18:32,760 --> 00:18:38,880
for the outer layers and create a secure

00:18:35,550 --> 00:18:44,520
design I know what a huge C++ very long

00:18:38,880 --> 00:18:47,820
I is I believe I maintain the only open

00:18:44,520 --> 00:18:51,510
source project which linux has sent C++

00:18:47,820 --> 00:18:57,870
changes commits written in C++ I'm very

00:18:51,510 --> 00:19:00,120
proud of that but what do you I don't

00:18:57,870 --> 00:19:03,240
think that what what do you think of the

00:19:00,120 --> 00:19:05,730
idea of creating something in a a

00:19:03,240 --> 00:19:10,560
domain-specific language designed around

00:19:05,730 --> 00:19:14,070
security to create a more robust kernel

00:19:10,560 --> 00:19:17,670
for the edge for the for the network's

00:19:14,070 --> 00:19:19,890
facing devices I think if

00:19:17,670 --> 00:19:23,520
domain-specific languages and having

00:19:19,890 --> 00:19:25,920
something that is clearly more designed

00:19:23,520 --> 00:19:28,830
towards secure you Nancy is a great

00:19:25,920 --> 00:19:30,690
thing I don't think those languages tend

00:19:28,830 --> 00:19:36,090
to be all that great at system

00:19:30,690 --> 00:19:38,790
programming it's doable in small niches

00:19:36,090 --> 00:19:40,860
but and that's not where Linux is going

00:19:38,790 --> 00:19:44,490
so if you want to do a

00:19:40,860 --> 00:19:46,500
each thing go wild the whole point of

00:19:44,490 --> 00:19:50,220
Linux is to be general purpose that you

00:19:46,500 --> 00:19:55,380
can use it across a very wide variety of

00:19:50,220 --> 00:19:59,750
devices and and use model and and there

00:19:55,380 --> 00:20:04,140
is clearly a certain dichotomy between

00:19:59,750 --> 00:20:07,620
generic and security you're always going

00:20:04,140 --> 00:20:13,470
to be more secure by making your device

00:20:07,620 --> 00:20:15,210
or service more specific and less

00:20:13,470 --> 00:20:18,870
capable there's no question about that

00:20:15,210 --> 00:20:22,710
and Linux is not interested in more

00:20:18,870 --> 00:20:26,370
specific and less capable at the same

00:20:22,710 --> 00:20:28,140
time we've certainly seen more specific

00:20:26,370 --> 00:20:31,049
and less cape will also be a complete

00:20:28,140 --> 00:20:33,960
disaster from a security standpoint I

00:20:31,049 --> 00:20:36,419
think in the end even a secure language

00:20:33,960 --> 00:20:40,650
will not help you when you have people

00:20:36,419 --> 00:20:43,650
who are rushing to get some random small

00:20:40,650 --> 00:20:46,410
consumer device out the door and then

00:20:43,650 --> 00:20:48,630
you just make the security mistakes in

00:20:46,410 --> 00:20:52,250
the higher levels in your protocols and

00:20:48,630 --> 00:20:56,070
in your lack of encryption and in your

00:20:52,250 --> 00:20:59,880
updating models and all these details so

00:20:56,070 --> 00:21:03,419
I think you do have a huge advantage in

00:20:59,880 --> 00:21:04,980
Linux in the fact that you have a lot of

00:21:03,419 --> 00:21:06,390
different peoples in a lot of different

00:21:04,980 --> 00:21:10,650
areas that you actually care about

00:21:06,390 --> 00:21:13,620
security I don't think security is an

00:21:10,650 --> 00:21:15,059
absolute and if you care about security

00:21:13,620 --> 00:21:17,340
and you clearly showed in this

00:21:15,059 --> 00:21:20,370
environment you want to have multiple

00:21:17,340 --> 00:21:23,010
levels and layers of security and the

00:21:20,370 --> 00:21:24,570
colonel will never be perfect don't get

00:21:23,010 --> 00:21:28,020
me wrong the colonel is big it's

00:21:24,570 --> 00:21:31,140
complicated in in the embedded world you

00:21:28,020 --> 00:21:33,900
can limit that by compiling away as much

00:21:31,140 --> 00:21:36,809
of it as you can but even then you'll

00:21:33,900 --> 00:21:39,090
never be perfect do a security shell

00:21:36,809 --> 00:21:41,100
around it do a security shell around

00:21:39,090 --> 00:21:44,730
that make sure that you don't accept any

00:21:41,100 --> 00:21:46,710
random connections and then the embedded

00:21:44,730 --> 00:21:50,669
people still put their own back doors

00:21:46,710 --> 00:21:53,759
because they want to debug things so

00:21:50,669 --> 00:21:56,909
I'm sure you've seen the same stories as

00:21:53,759 --> 00:21:59,580
I havering yeah so the Securities is

00:21:56,909 --> 00:22:02,039
never going to be perfect anybody who

00:21:59,580 --> 00:22:04,200
tells you that they aim for perfect

00:22:02,039 --> 00:22:06,989
security stop talking to them they're

00:22:04,200 --> 00:22:08,549
morons don't don't even bother the

00:22:06,989 --> 00:22:11,450
people you want to talk to you are the

00:22:08,549 --> 00:22:14,909
people who mitigate security issues and

00:22:11,450 --> 00:22:18,359
an admit up front that nothing is ever

00:22:14,909 --> 00:22:20,730
perfect and and in this kind of crowd

00:22:18,359 --> 00:22:24,929
one of the mitigations need to be able

00:22:20,730 --> 00:22:28,679
to do upgrades secure updates over the

00:22:24,929 --> 00:22:33,570
network don't depend on consumers doing

00:22:28,679 --> 00:22:35,909
them for you because they want and don't

00:22:33,570 --> 00:22:39,119
make your upgrade process and attack

00:22:35,909 --> 00:22:42,509
surface which is the other common

00:22:39,119 --> 00:22:45,119
mistake but make sure they can happen at

00:22:42,509 --> 00:22:47,100
every single lever level and then you'll

00:22:45,119 --> 00:22:49,320
still end up having security issues with

00:22:47,100 --> 00:22:51,029
the hardware not being secure and

00:22:49,320 --> 00:22:52,619
somebody comes up with a really clever

00:22:51,029 --> 00:22:56,369
scheme to actually attack the hardware

00:22:52,619 --> 00:22:58,889
itself and at that point you just admit

00:22:56,369 --> 00:23:01,649
okay there is no perfect security next

00:22:58,889 --> 00:23:02,879
generation will do better and since you

00:23:01,649 --> 00:23:05,249
you need to make sure that you're

00:23:02,879 --> 00:23:08,369
resilient to some extent and then have

00:23:05,249 --> 00:23:11,279
multiple layers of together let's go

00:23:08,369 --> 00:23:14,549
back a little bit go to limit today we

00:23:11,279 --> 00:23:17,100
have 32 main platforms and the colonel

00:23:14,549 --> 00:23:19,049
tree and the plan now that we may have

00:23:17,100 --> 00:23:20,999
heard you architectures I would not call

00:23:19,049 --> 00:23:24,460
the main platforms because some of them

00:23:20,999 --> 00:23:28,790
are very very random right

00:23:24,460 --> 00:23:32,110
my next question was going to be are

00:23:28,790 --> 00:23:37,340
they all maintained test it working

00:23:32,110 --> 00:23:40,580
useful realistically I think all of them

00:23:37,340 --> 00:23:45,020
I'm useful to somebody there are people

00:23:40,580 --> 00:23:48,470
who enjoy tinkering and but yeah not a

00:23:45,020 --> 00:23:52,970
lot of them are are really just toys and

00:23:48,470 --> 00:23:54,560
and are testament to how portable the

00:23:52,970 --> 00:23:57,620
colonel is that you can actually create

00:23:54,560 --> 00:24:01,370
a new architecture support in not very

00:23:57,620 --> 00:24:03,320
much code if you have a GCC port to your

00:24:01,370 --> 00:24:06,170
architecture you can literally do a

00:24:03,320 --> 00:24:09,680
Linux support to it in like a couple of

00:24:06,170 --> 00:24:14,120
thousand lines of code it won't be maybe

00:24:09,680 --> 00:24:18,050
a completely full capable system but it

00:24:14,120 --> 00:24:20,540
will work but the end result of that is

00:24:18,050 --> 00:24:26,030
we do of the 30-plus architectures we

00:24:20,540 --> 00:24:28,430
support 45 are actually real and

00:24:26,030 --> 00:24:31,540
meaningful and something you should

00:24:28,430 --> 00:24:34,460
actually think of using in a in that

00:24:31,540 --> 00:24:38,320
production setting oh now I'll get you

00:24:34,460 --> 00:24:38,320
in trouble to which four or five oz oh

00:24:38,440 --> 00:24:47,180
just from a maintenance angle I'd say

00:24:42,760 --> 00:24:50,600
x86 arm powerpc and s390 seem to be the

00:24:47,180 --> 00:24:53,300
ones that get reliably link now I might

00:24:50,600 --> 00:24:56,780
have missed something I mean if I forgot

00:24:53,300 --> 00:25:02,120
one or two don't don't think that that

00:24:56,780 --> 00:25:04,990
your conjecture is not worthy but but on

00:25:02,120 --> 00:25:08,750
the whole those for the ones that that I

00:25:04,990 --> 00:25:13,250
call out as being both actually

00:25:08,750 --> 00:25:16,070
maintained and in good shape and by

00:25:13,250 --> 00:25:20,470
armed I mean both 32 and 64-bit I don

00:25:16,070 --> 00:25:25,850
same for x86 the rest tend to be

00:25:20,470 --> 00:25:29,180
sporadic so in those four architectures

00:25:25,850 --> 00:25:31,550
other interesting innovations are the

00:25:29,180 --> 00:25:34,540
new things that you're excited about I

00:25:31,550 --> 00:25:36,370
mean this morning I read about Amy's

00:25:34,540 --> 00:25:40,630
rising platform that will revolutionize

00:25:36,370 --> 00:25:42,550
the world which I came about but other

00:25:40,630 --> 00:25:44,500
innovations where you say oh I can't

00:25:42,550 --> 00:25:48,520
wait for this to be available in public

00:25:44,500 --> 00:25:49,840
oasis all boring today realistically

00:25:48,520 --> 00:25:52,480
most like a textured look pretty much

00:25:49,840 --> 00:25:56,050
the same I mean the ISIS differ but they

00:25:52,480 --> 00:25:59,050
all do the same things there are a few

00:25:56,050 --> 00:26:02,230
things coming up I'm very happy about

00:25:59,050 --> 00:26:04,510
for example PowerPC seems to be finally

00:26:02,230 --> 00:26:06,880
getting rid of the hashed page tables

00:26:04,510 --> 00:26:13,210
that I always hated for the passion and

00:26:06,880 --> 00:26:16,990
they have a radix tree so that's

00:26:13,210 --> 00:26:19,450
somebody can be close to directly and

00:26:16,990 --> 00:26:22,720
that's a very welcome thing just because

00:26:19,450 --> 00:26:26,500
their memory management will be so much

00:26:22,720 --> 00:26:28,960
better it it's still early days for that

00:26:26,500 --> 00:26:33,790
but I enjoy seeing those kinds of

00:26:28,960 --> 00:26:36,070
improvements on x86 we're actually it's

00:26:33,790 --> 00:26:39,190
funny we used to i mean so the colonel

00:26:36,070 --> 00:26:41,980
obviously used to be x86 only and on the

00:26:39,190 --> 00:26:45,910
original paging model for x86 was the

00:26:41,980 --> 00:26:49,630
two-level pastry that the tables that

00:26:45,910 --> 00:26:52,000
that the Iranian will 386 had and we

00:26:49,630 --> 00:26:54,100
expanded that from two to three because

00:26:52,000 --> 00:26:56,380
alpha had had a bigger virtual address

00:26:54,100 --> 00:26:58,540
space then we expanded it from three to

00:26:56,380 --> 00:27:02,680
four and now we're on the cusp of

00:26:58,540 --> 00:27:05,020
expanding it from four to five and the

00:27:02,680 --> 00:27:07,630
previous ones were fairly painful going

00:27:05,020 --> 00:27:10,720
from 45 it looks like it will be it

00:27:07,630 --> 00:27:16,570
might even happen 4.2 11 probably four

00:27:10,720 --> 00:27:19,810
point 12 its twenty patches and they're

00:27:16,570 --> 00:27:22,510
not even that big and I'm impressed by

00:27:19,810 --> 00:27:25,030
how we can now I mean partly because

00:27:22,510 --> 00:27:27,700
we've done this several times before we

00:27:25,030 --> 00:27:30,790
can now just add a new level of paging

00:27:27,700 --> 00:27:35,170
and it doesn't even look like a big deal

00:27:30,790 --> 00:27:36,970
anymore so we we do have core

00:27:35,170 --> 00:27:42,460
functionality coming to core

00:27:36,970 --> 00:27:47,430
architectures at the same time one of

00:27:42,460 --> 00:27:52,150
the issues we have if we still support

00:27:47,430 --> 00:27:58,350
processors from 20 years ago we finally

00:27:52,150 --> 00:28:03,420
did drop support for the 386 and because

00:27:58,350 --> 00:28:07,300
realistically it you cannot make us safe

00:28:03,420 --> 00:28:09,990
operating system on a 386 because the

00:28:07,300 --> 00:28:13,390
page faults doesn't work right on that

00:28:09,990 --> 00:28:16,120
but but we still support ships that are

00:28:13,390 --> 00:28:17,920
20 years old and and that don't have

00:28:16,120 --> 00:28:20,080
certain features so we still support

00:28:17,920 --> 00:28:22,930
chips that do not have the don't execute

00:28:20,080 --> 00:28:25,180
bit which is coming back to the security

00:28:22,930 --> 00:28:29,050
issue that's a security issue if you

00:28:25,180 --> 00:28:31,690
don't have no execute bit you are going

00:28:29,050 --> 00:28:36,010
to be open to a lot of attacks that

00:28:31,690 --> 00:28:37,750
modern ships aren't even open to so so

00:28:36,010 --> 00:28:40,000
some of the issues we always have our

00:28:37,750 --> 00:28:42,820
about compatibility and supporting chips

00:28:40,000 --> 00:28:45,360
that are not as good that's what you can

00:28:42,820 --> 00:28:48,580
get today and what you can get tomorrow

00:28:45,360 --> 00:28:51,250
so if someone who follows your active

00:28:48,580 --> 00:28:54,190
social media life I've noticed quite a

00:28:51,250 --> 00:28:57,700
few posts on models that you're building

00:28:54,190 --> 00:29:00,730
whether it's RC car so a little dragons

00:28:57,700 --> 00:29:03,490
or what not are we seeing a shift from

00:29:00,730 --> 00:29:06,640
Lina's the software developer tool eNOS

00:29:03,490 --> 00:29:11,500
the hard getting car now now I've done

00:29:06,640 --> 00:29:15,670
hardware and good they always end up not

00:29:11,500 --> 00:29:20,590
working that well now I I grew up doing

00:29:15,670 --> 00:29:23,290
plastic models and one of the hex of the

00:29:20,590 --> 00:29:25,780
current roughly ten week release window

00:29:23,290 --> 00:29:27,490
is that right now I'm in my really busy

00:29:25,780 --> 00:29:32,220
time and I sit in front of the computer

00:29:27,490 --> 00:29:34,180
12 hours a day in five weeks I'm

00:29:32,220 --> 00:29:38,440
expecting and hoping to be in the

00:29:34,180 --> 00:29:41,860
situation where I'm mostly just waiting

00:29:38,440 --> 00:29:45,040
around for bug reports and fixes right

00:29:41,860 --> 00:29:49,390
so I can do most of them most of my time

00:29:45,040 --> 00:29:52,840
I do end up checking email but I need to

00:29:49,390 --> 00:29:55,750
check email once an hour and most of

00:29:52,840 --> 00:29:58,930
those hours not a lot of has had

00:29:55,750 --> 00:30:00,910
so I started building model while I'm

00:29:58,930 --> 00:30:03,520
waiting for that to happen some people

00:30:00,910 --> 00:30:06,580
like watching TV that doesn't do it for

00:30:03,520 --> 00:30:08,650
me I thinker with these tiny models

00:30:06,580 --> 00:30:11,200
instead unless that was good for last

00:30:08,650 --> 00:30:13,510
movies and here i hope that you would

00:30:11,200 --> 00:30:17,980
announce the big project number for the

00:30:13,510 --> 00:30:20,170
leanest maker kit now yeah okay then I

00:30:17,980 --> 00:30:21,310
guess our time is up thank you very much

00:30:20,170 --> 00:30:26,790
Venus thank you

00:30:21,310 --> 00:30:26,790

YouTube URL: https://www.youtube.com/watch?v=XB550IYYG-w


