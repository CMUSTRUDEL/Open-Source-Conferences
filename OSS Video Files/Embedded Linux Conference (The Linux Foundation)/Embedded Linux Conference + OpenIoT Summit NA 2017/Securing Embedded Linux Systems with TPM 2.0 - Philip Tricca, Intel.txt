Title: Securing Embedded Linux Systems with TPM 2.0 - Philip Tricca, Intel
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Securing Embedded Linux Systems with TPM 2.0 - Philip Tricca, Intel

Despite the myriad technologies available for the task, securing Linux systems (embedded or otherwise) is not much easier today than it was 10 years ago. Where many security talks at ELC have given surveys of the various components, and architectures for securing embedded Linux systems this talk is a deep dive into enabling and using the new trusted platform module 2.0 (TPM2) to achieve specific security goals.

This talk will have 3 major thrusts: Firstly we will discuss a threat model that describes the security goals we wish to achieve as well as the threats to these goals that we're able to mitigate with the TPM. Second, we describe the Intel TPM2 software stack (TSS) and the various possible configurations appropriate for Linux systems from embedded up to servers. Finally we discuss implementations of our mitigations using the meta-measured Open Embedded layer.

About Philip Tricca
Philip is a platform architect in Intel's platform security division working to enable use of the Trusted Platform Module (TPM) and SGX in open source. Recently Phil has taken over maintainership of Intel's implementation of the TPM2 software stack and has been obsessing over system integrity and measurement architectures for years. In his spare time he maintains the meta-measured Open Embedded meta layer where he brings together the various integrity measurement components from TPM2 patches to Grub2 all the way up to the userspace infrastructure. Additionally he's a periodic contributor to meta-selinux and the OpenXT project.
Captions: 
	00:00:00,030 --> 00:00:05,490
so thanks everyone for showing up my

00:00:02,760 --> 00:00:08,670
name is in large print behind me which

00:00:05,490 --> 00:00:11,400
is a little bit scary I'm Phil trikha I

00:00:08,670 --> 00:00:14,160
am currently working for Intel on the

00:00:11,400 --> 00:00:17,010
trusted computing group's software stack

00:00:14,160 --> 00:00:21,840
to drive the second iteration of the TPM

00:00:17,010 --> 00:00:24,810
which is the trusted platform module the

00:00:21,840 --> 00:00:28,170
talk today is largely focused on three

00:00:24,810 --> 00:00:29,580
specific areas the we'll start out with

00:00:28,170 --> 00:00:31,109
just with some background stuff I mean

00:00:29,580 --> 00:00:33,360
this is just kind of level set it's not

00:00:31,109 --> 00:00:34,380
anything you probably don't already know

00:00:33,360 --> 00:00:36,210
but I think it's something that we need

00:00:34,380 --> 00:00:38,790
to say before we kind of get too far

00:00:36,210 --> 00:00:39,960
into it and then the the second arc here

00:00:38,790 --> 00:00:42,930
is just going to be about what the TPM

00:00:39,960 --> 00:00:44,700
is what it does what it's intended for

00:00:42,930 --> 00:00:46,410
and really what it's not intended for

00:00:44,700 --> 00:00:47,760
and then finally we'll talk about the

00:00:46,410 --> 00:00:49,980
software stack and this is the stuff

00:00:47,760 --> 00:00:51,840
that's actually interesting the the

00:00:49,980 --> 00:00:53,309
architecture of what the software stack

00:00:51,840 --> 00:00:55,500
is what it's meant to do the different

00:00:53,309 --> 00:00:58,170
components involved we'll get into how

00:00:55,500 --> 00:00:59,699
you can actually pick it up kick the

00:00:58,170 --> 00:01:01,260
tires if you've got a system that has a

00:00:59,699 --> 00:01:02,699
TPM on even if you don't there's a

00:01:01,260 --> 00:01:04,589
simulator out there you can run software

00:01:02,699 --> 00:01:06,360
and then we'll talk about like some

00:01:04,589 --> 00:01:10,290
actually use cases ways you can actually

00:01:06,360 --> 00:01:11,729
use this thing to do some meaningful or

00:01:10,290 --> 00:01:13,560
to implement them some meaningful kind

00:01:11,729 --> 00:01:15,540
of security properties in the embedded

00:01:13,560 --> 00:01:20,159
Linux systems that I'm hoping that you

00:01:15,540 --> 00:01:21,509
all are building so the the first bit of

00:01:20,159 --> 00:01:23,490
this is a bit of a soapbox and I'll

00:01:21,509 --> 00:01:24,570
apologize for this but I feel like it's

00:01:23,490 --> 00:01:27,540
really important to say that a lot of

00:01:24,570 --> 00:01:29,790
people when they see embedded hardware

00:01:27,540 --> 00:01:32,549
security modules and things like the TPM

00:01:29,790 --> 00:01:34,770
they they see you know TPM trusted

00:01:32,549 --> 00:01:37,439
platform module that means that you know

00:01:34,770 --> 00:01:39,360
it's trusted and I should believe that

00:01:37,439 --> 00:01:41,850
that this thing is going to solve all my

00:01:39,360 --> 00:01:43,320
problems but the reality is is that you

00:01:41,850 --> 00:01:44,909
know if there was a silver bullet in

00:01:43,320 --> 00:01:47,820
computer security we would have found it

00:01:44,909 --> 00:01:49,470
by now I hope and it would have solved

00:01:47,820 --> 00:01:51,299
all our problems anyways and the fact of

00:01:49,470 --> 00:01:54,030
the matter is the TPM is an extremely

00:01:51,299 --> 00:01:56,640
useful piece of technology but it will

00:01:54,030 --> 00:01:58,560
not do security for you it's a tool in

00:01:56,640 --> 00:02:02,159
your toolbox just like every other tool

00:01:58,560 --> 00:02:05,250
and you can use it to great ends or you

00:02:02,159 --> 00:02:07,710
can screw it up or ibly and you know end

00:02:05,250 --> 00:02:11,009
up with with kind of a zero-sum game in

00:02:07,710 --> 00:02:14,550
the end so really this is the soapbox

00:02:11,009 --> 00:02:18,239
where I say security is a process it is

00:02:14,550 --> 00:02:19,470
something that you have to do from from

00:02:18,239 --> 00:02:20,610
the very beginning of your process

00:02:19,470 --> 00:02:22,530
through the very end of your process

00:02:20,610 --> 00:02:24,569
everything from you know architecture or

00:02:22,530 --> 00:02:26,129
really I mean design through to the

00:02:24,569 --> 00:02:27,930
implementation and all the way through

00:02:26,129 --> 00:02:29,550
to the maintenance tale for your for

00:02:27,930 --> 00:02:31,349
your system and this is something that

00:02:29,550 --> 00:02:32,670
takes everyone in your team not to say

00:02:31,349 --> 00:02:34,769
that everyone in your team has to be a

00:02:32,670 --> 00:02:36,690
security expert or have some like crazy

00:02:34,769 --> 00:02:38,099
security background but everyone has to

00:02:36,690 --> 00:02:39,780
be aware that the decisions that they

00:02:38,099 --> 00:02:41,310
make when they're implementing the

00:02:39,780 --> 00:02:42,510
software that's in your system they have

00:02:41,310 --> 00:02:44,340
to understand how that affects the

00:02:42,510 --> 00:02:47,879
overall security properties of the

00:02:44,340 --> 00:02:50,550
platform and there really is no such

00:02:47,879 --> 00:02:53,220
thing as a secure system there are

00:02:50,550 --> 00:02:55,650
shades across the spectrum for security

00:02:53,220 --> 00:02:57,569
but you will never build something

00:02:55,650 --> 00:02:58,650
that's perfect we're all here talking

00:02:57,569 --> 00:03:00,269
about open source we're all here talking

00:02:58,650 --> 00:03:01,860
about Linux these are things that we

00:03:00,269 --> 00:03:04,440
didn't write these are things that we

00:03:01,860 --> 00:03:06,269
get for free and we also get all of the

00:03:04,440 --> 00:03:07,890
bad things with the good and the bad

00:03:06,269 --> 00:03:09,989
things are much much much smaller than

00:03:07,890 --> 00:03:11,940
the good but there are security

00:03:09,989 --> 00:03:13,290
vulnerabilities in the software that you

00:03:11,940 --> 00:03:15,180
will take some other projects that we

00:03:13,290 --> 00:03:16,830
will put in your system you'll have to

00:03:15,180 --> 00:03:18,180
be able to deal with the the fallout

00:03:16,830 --> 00:03:20,640
from those security problems you have to

00:03:18,180 --> 00:03:22,560
be able to recover from them and you

00:03:20,640 --> 00:03:24,810
know really our goal is secure enough

00:03:22,560 --> 00:03:26,010
secure enough for the use case secure

00:03:24,810 --> 00:03:28,620
enough for the customers that are buying

00:03:26,010 --> 00:03:31,049
our platforms and putting a TPM on these

00:03:28,620 --> 00:03:33,569
platforms will instantly get you from 0

00:03:31,049 --> 00:03:35,640
to 60 on the security spectrum it will

00:03:33,569 --> 00:03:36,959
give you a useful tool that one that has

00:03:35,640 --> 00:03:39,030
a certain set of security properties

00:03:36,959 --> 00:03:42,120
that we'll talk about but it's not going

00:03:39,030 --> 00:03:44,340
to solve all the problems so this means

00:03:42,120 --> 00:03:45,420
that we still have to do the basics we

00:03:44,340 --> 00:03:47,190
still have to do the things we've been

00:03:45,420 --> 00:03:50,159
talking about for years which some

00:03:47,190 --> 00:03:52,110
people still don't do and that's that's

00:03:50,159 --> 00:03:54,659
everything from like the basic you know

00:03:52,110 --> 00:03:56,099
platform hardening stuff that we do when

00:03:54,659 --> 00:03:57,810
we first pick up a desktop system right

00:03:56,099 --> 00:04:00,689
we turn off services that we're not

00:03:57,810 --> 00:04:04,099
using we exclude tools from our build

00:04:00,689 --> 00:04:05,250
and all of this is the desire the the

00:04:04,099 --> 00:04:07,349
defense-in-depth

00:04:05,250 --> 00:04:09,060
stuff that we know that we should be

00:04:07,349 --> 00:04:11,250
doing from day one which is minimizing

00:04:09,060 --> 00:04:12,720
the attack surface of our system we want

00:04:11,250 --> 00:04:14,430
to make sure that any everything that's

00:04:12,720 --> 00:04:17,250
running on it is just the stuff we need

00:04:14,430 --> 00:04:20,549
and nothing that we don't need and

00:04:17,250 --> 00:04:23,850
we want to make sure that that's a small

00:04:20,549 --> 00:04:25,470
and attack surface as possible and the

00:04:23,850 --> 00:04:26,520
good thing is is that the good news is

00:04:25,470 --> 00:04:28,200
that we're talking about embedded Linux

00:04:26,520 --> 00:04:29,820
systems right general desktops are

00:04:28,200 --> 00:04:32,100
particularly difficult to reason about

00:04:29,820 --> 00:04:33,660
because they're meant to serve a very

00:04:32,100 --> 00:04:35,310
large audience that may have a number of

00:04:33,660 --> 00:04:38,250
different goals but for embedded systems

00:04:35,310 --> 00:04:40,080
they're designed specifically to do one

00:04:38,250 --> 00:04:41,880
function and that means that we can

00:04:40,080 --> 00:04:43,920
start excluding a large portion of the

00:04:41,880 --> 00:04:45,900
tools that we just don't need which can

00:04:43,920 --> 00:04:47,640
reduce our attack surface significantly

00:04:45,900 --> 00:04:49,470
and this lets us do fun stuff like

00:04:47,640 --> 00:04:51,360
making our root filesystem read-only

00:04:49,470 --> 00:04:53,310
right if you do that on a generic

00:04:51,360 --> 00:04:55,560
desktop Linux system you're going to

00:04:53,310 --> 00:04:58,020
have your users up in Revolt because

00:04:55,560 --> 00:04:59,640
they can't do the weird stuff that they

00:04:58,020 --> 00:05:01,740
were expecting to be able to do but on

00:04:59,640 --> 00:05:02,850
an embedded Linux system general you

00:05:01,740 --> 00:05:04,530
don't have anyone log into this thing

00:05:02,850 --> 00:05:06,210
and changing where you know bin Bash

00:05:04,530 --> 00:05:07,770
points where they put in you know a

00:05:06,210 --> 00:05:11,100
different shell that they'd rather have

00:05:07,770 --> 00:05:12,690
so I always advocate for making your

00:05:11,100 --> 00:05:14,220
root filesystem that comes out of your

00:05:12,690 --> 00:05:15,930
open embedded or whatever build system

00:05:14,220 --> 00:05:17,460
you've got making that read-only and

00:05:15,930 --> 00:05:19,110
then having a very small data partition

00:05:17,460 --> 00:05:20,280
where you actually can write the things

00:05:19,110 --> 00:05:22,050
you need to write something that's very

00:05:20,280 --> 00:05:24,000
small and this is about making your

00:05:22,050 --> 00:05:25,680
system as resilient to attack as

00:05:24,000 --> 00:05:28,080
possible so if someone pops a shell on

00:05:25,680 --> 00:05:29,970
your system maybe to tell me that you

00:05:28,080 --> 00:05:32,669
didn't disable they won't be able to

00:05:29,970 --> 00:05:33,810
drop in you know their malware directly

00:05:32,669 --> 00:05:35,820
into the root filesystem it'll make

00:05:33,810 --> 00:05:39,180
their just their lives harder

00:05:35,820 --> 00:05:41,430
similarly the the ideas around the kind

00:05:39,180 --> 00:05:42,840
of tale of maintenance all of these

00:05:41,430 --> 00:05:45,810
systems need to be updatable in the

00:05:42,840 --> 00:05:48,510
field automatic updates even better

00:05:45,810 --> 00:05:50,730
signed automatic updates if your system

00:05:48,510 --> 00:05:52,140
will accept a payload and basically

00:05:50,730 --> 00:05:53,610
write this over the root filesystem as

00:05:52,140 --> 00:05:55,080
an update without checking a digital

00:05:53,610 --> 00:05:57,000
signature on it you have very

00:05:55,080 --> 00:05:59,340
significant problems and ones that the

00:05:57,000 --> 00:06:01,200
TPM will not solve for you however if

00:05:59,340 --> 00:06:03,240
you want to protect the key that you're

00:06:01,200 --> 00:06:05,100
using to check the signature with and

00:06:03,240 --> 00:06:07,680
keep that in the TPM that's something

00:06:05,100 --> 00:06:09,990
that it will help you with and finally

00:06:07,680 --> 00:06:12,590
the last point here about mandatory

00:06:09,990 --> 00:06:14,610
access control and the one about

00:06:12,590 --> 00:06:16,919
decreasing complexity and embedded

00:06:14,610 --> 00:06:20,130
systems I'm a big fan of SEO Linux I've

00:06:16,919 --> 00:06:22,650
worked on it in past lives and I think

00:06:20,130 --> 00:06:24,360
you know on a general desktop system

00:06:22,650 --> 00:06:26,430
it's kind of difficult to reason over

00:06:24,360 --> 00:06:28,710
these large security policies but for

00:06:26,430 --> 00:06:29,520
embedded systems it actually is

00:06:28,710 --> 00:06:30,900
significant

00:06:29,520 --> 00:06:32,699
so if you're building a really

00:06:30,900 --> 00:06:34,889
stripped-down small system you're

00:06:32,699 --> 00:06:36,930
selinux policy can get extremely small

00:06:34,889 --> 00:06:38,430
as well it's a mandatory access control

00:06:36,930 --> 00:06:40,740
policy I think is largely something

00:06:38,430 --> 00:06:44,300
that's becoming part of the basics that

00:06:40,740 --> 00:06:44,300
everyone should be doing along the way

00:06:44,389 --> 00:06:48,629
another thing that I'm going to beat the

00:06:46,979 --> 00:06:49,710
drum about is threat modeling this is

00:06:48,629 --> 00:06:52,889
actually something that was new to me a

00:06:49,710 --> 00:06:54,419
couple years ago and it's really it's a

00:06:52,889 --> 00:06:56,729
process amount of Technology right this

00:06:54,419 --> 00:06:58,979
is a process that a team goes through

00:06:56,729 --> 00:07:00,720
when they're designing and building a

00:06:58,979 --> 00:07:02,520
system where we sit down and we talk

00:07:00,720 --> 00:07:05,759
about the assets that our system needs

00:07:02,520 --> 00:07:07,199
to protect and the the threats to that

00:07:05,759 --> 00:07:08,490
system and it's largely a creative

00:07:07,199 --> 00:07:10,440
process right people sit down and we

00:07:08,490 --> 00:07:12,060
brainstorm and we write these big lists

00:07:10,440 --> 00:07:13,440
about you know the assets in the system

00:07:12,060 --> 00:07:15,599
which are usually fairly tangible and

00:07:13,440 --> 00:07:18,000
then we come up with these kind of you

00:07:15,599 --> 00:07:19,710
know these these threats that start out

00:07:18,000 --> 00:07:21,330
being very reasonable and very sane and

00:07:19,710 --> 00:07:23,039
then just get wild really quickly and

00:07:21,330 --> 00:07:25,469
it's actually a really good creative

00:07:23,039 --> 00:07:27,120
process because a lot of times these

00:07:25,469 --> 00:07:29,729
things that seem really wild at first

00:07:27,120 --> 00:07:31,919
end up being fairly in scope later on

00:07:29,729 --> 00:07:33,539
and so it's really nice to be able to

00:07:31,919 --> 00:07:36,120
build out this large kind of collection

00:07:33,539 --> 00:07:38,669
and document really what these threats

00:07:36,120 --> 00:07:40,289
to the system are because it's a really

00:07:38,669 --> 00:07:41,639
useful tool when we start thinking about

00:07:40,289 --> 00:07:43,169
which threats we're going to mitigate

00:07:41,639 --> 00:07:45,409
you can look at these things and you can

00:07:43,169 --> 00:07:47,580
look at past information and you can say

00:07:45,409 --> 00:07:49,620
generally with pretty good fidelity

00:07:47,580 --> 00:07:51,919
which ones are more likely to occur than

00:07:49,620 --> 00:07:54,479
others and so you can start prioritizing

00:07:51,919 --> 00:07:55,500
the the threats you're going to mitigate

00:07:54,479 --> 00:07:58,080
and where you're going to spend your

00:07:55,500 --> 00:08:00,060
time in your team's energies to actually

00:07:58,080 --> 00:08:01,469
remediating the most likely threats to

00:08:00,060 --> 00:08:04,860
your system to protect the most

00:08:01,469 --> 00:08:06,240
important assets in that system and it

00:08:04,860 --> 00:08:08,039
really it's a game of trade-offs right

00:08:06,240 --> 00:08:09,539
you can't fix everything you'll never

00:08:08,039 --> 00:08:12,479
have that perfect system like I said in

00:08:09,539 --> 00:08:13,710
the previous slides but the important

00:08:12,479 --> 00:08:15,990
thing is to find the things that are

00:08:13,710 --> 00:08:17,550
most likely to happen remediate those

00:08:15,990 --> 00:08:18,750
threats and then have a list of the

00:08:17,550 --> 00:08:20,969
things you haven't remediated the

00:08:18,750 --> 00:08:23,310
threats you've accepted because they're

00:08:20,969 --> 00:08:24,690
either too much work or they're so

00:08:23,310 --> 00:08:26,279
unlikely to happen that they're not that

00:08:24,690 --> 00:08:28,289
big a deal or maybe you can do a partial

00:08:26,279 --> 00:08:29,729
remediation to you know through

00:08:28,289 --> 00:08:31,500
something like a mandatory access

00:08:29,729 --> 00:08:34,380
control policy that will confine some

00:08:31,500 --> 00:08:35,760
kind of exploit and really this ends up

00:08:34,380 --> 00:08:37,169
being a useful information when you want

00:08:35,760 --> 00:08:39,089
to actually describe the properties of

00:08:37,169 --> 00:08:41,430
your system to a customer I've found

00:08:39,089 --> 00:08:42,570
that to be kind of unnerving ly common

00:08:41,430 --> 00:08:43,240
when you talk to people about the

00:08:42,570 --> 00:08:45,940
security

00:08:43,240 --> 00:08:47,620
properties of the system most people

00:08:45,940 --> 00:08:49,089
can't really describe what that is and

00:08:47,620 --> 00:08:51,430
so as you're going through a threat

00:08:49,089 --> 00:08:53,770
modeling exercise you can go and build

00:08:51,430 --> 00:08:56,020
out this big collection of risks and

00:08:53,770 --> 00:08:57,640
assets and then you can say which

00:08:56,020 --> 00:08:59,980
receive mitigated which risks you

00:08:57,640 --> 00:09:01,660
haven't and most importantly why which

00:08:59,980 --> 00:09:03,880
ones are important and which ones aren't

00:09:01,660 --> 00:09:05,050
that important and someone may disagree

00:09:03,880 --> 00:09:07,330
with you and it actually makes for

00:09:05,050 --> 00:09:09,850
really good conversations and helps kind

00:09:07,330 --> 00:09:13,029
of illuminate the the space you're

00:09:09,850 --> 00:09:14,080
working in and so I was trying to come

00:09:13,029 --> 00:09:15,130
up with something interesting for the

00:09:14,080 --> 00:09:17,260
slide about you know if your team

00:09:15,130 --> 00:09:18,490
doesn't threat model these but the only

00:09:17,260 --> 00:09:21,160
thing I could come up with was just

00:09:18,490 --> 00:09:22,390
please give it a shot I'm assuming

00:09:21,160 --> 00:09:24,160
everyone in the room and I'm really

00:09:22,390 --> 00:09:26,140
tempted to ask for a show of hands but I

00:09:24,160 --> 00:09:27,490
always hate when people do that so I'm

00:09:26,140 --> 00:09:29,440
going to assume that there's probably

00:09:27,490 --> 00:09:31,570
some subset of you that do do threat

00:09:29,440 --> 00:09:33,190
modeling and some subset that don't all

00:09:31,570 --> 00:09:35,279
I can say to the people that don't is

00:09:33,190 --> 00:09:37,810
like it's pretty much free content

00:09:35,279 --> 00:09:38,470
Microsoft is really the you know love

00:09:37,810 --> 00:09:41,980
them or hate them

00:09:38,470 --> 00:09:43,029
Microsoft is kind of the the group

00:09:41,980 --> 00:09:44,589
that's produced the most useful

00:09:43,029 --> 00:09:46,240
information in the threat modeling area

00:09:44,589 --> 00:09:49,540
and that's because they've probably

00:09:46,240 --> 00:09:50,829
sustained the most attacks against their

00:09:49,540 --> 00:09:52,360
systems because their systems are so

00:09:50,829 --> 00:09:54,100
widely deployed we have a very long

00:09:52,360 --> 00:09:56,140
legacy tale and they've kept a lot of

00:09:54,100 --> 00:09:57,670
this information around for so long or

00:09:56,140 --> 00:10:00,310
rather the technology around for so long

00:09:57,670 --> 00:10:02,649
that people have attacked it constantly

00:10:00,310 --> 00:10:04,720
and till their benefit into their credit

00:10:02,649 --> 00:10:06,790
they've built a very interesting and

00:10:04,720 --> 00:10:09,310
very useful body of knowledge around how

00:10:06,790 --> 00:10:12,010
to model threats how to to pride do the

00:10:09,310 --> 00:10:13,600
prioritization maybe how you could keep

00:10:12,010 --> 00:10:15,940
this information for your team you know

00:10:13,600 --> 00:10:17,620
to learn from and have you know past

00:10:15,940 --> 00:10:19,420
projects or other future project learn

00:10:17,620 --> 00:10:21,670
from past projects and they give away a

00:10:19,420 --> 00:10:22,779
lot of this content on MSDN it's 100%

00:10:21,670 --> 00:10:24,970
worth a good look

00:10:22,779 --> 00:10:26,560
Oh wasp ah also is kind of extended this

00:10:24,970 --> 00:10:28,089
into some of the application space and

00:10:26,560 --> 00:10:29,829
there are a couple books that came out

00:10:28,089 --> 00:10:31,480
of Microsoft Adam show stacks was really

00:10:29,829 --> 00:10:33,250
you know my first introduction to this

00:10:31,480 --> 00:10:34,329
so if you're going to do any one thing

00:10:33,250 --> 00:10:36,640
or if you get anything from this talk

00:10:34,329 --> 00:10:38,589
I'd say go out find a copy of Adam shows

00:10:36,640 --> 00:10:40,510
textbook and talk to your team about

00:10:38,589 --> 00:10:43,810
actually describing the threats that

00:10:40,510 --> 00:10:45,520
your system faces and so my my last

00:10:43,810 --> 00:10:47,020
slide kind of going over the basics are

00:10:45,520 --> 00:10:48,670
just kind of these classic security

00:10:47,020 --> 00:10:49,810
concepts I have a tendency to kind of

00:10:48,670 --> 00:10:51,820
get wrapped around the axle on this

00:10:49,810 --> 00:10:53,020
slide where I talk about you know the

00:10:51,820 --> 00:10:55,660
academic backgrounds for all these

00:10:53,020 --> 00:10:56,290
things and waste a pile of the 39 second

00:10:55,660 --> 00:10:57,820
hour minutes

00:10:56,290 --> 00:10:58,990
still ticking down in front of me so

00:10:57,820 --> 00:11:00,759
let's just do this really quick

00:10:58,990 --> 00:11:01,930
confidentiality to use this one it's one

00:11:00,759 --> 00:11:03,370
that we all know the most about right

00:11:01,930 --> 00:11:05,259
it's about keeping things secret

00:11:03,370 --> 00:11:08,800
generally people think of this as

00:11:05,259 --> 00:11:10,180
synonymous with encryption now

00:11:08,800 --> 00:11:12,730
encryption is something we usually use

00:11:10,180 --> 00:11:14,649
to maintain confidentiality in the

00:11:12,730 --> 00:11:16,889
system but I could just as easily build

00:11:14,649 --> 00:11:19,269
a system that no one can access and

00:11:16,889 --> 00:11:21,819
maintain the confidential confidential

00:11:19,269 --> 00:11:23,649
'ti of that system now generally we've

00:11:21,819 --> 00:11:25,269
kind of all agreed that that's really

00:11:23,649 --> 00:11:26,889
impossible and eventually someone breaks

00:11:25,269 --> 00:11:28,120
into your system and so a lot of times

00:11:26,889 --> 00:11:29,500
we throw some encryption on top of that

00:11:28,120 --> 00:11:31,120
to say that even if someone can read

00:11:29,500 --> 00:11:33,310
this if they don't have access to the

00:11:31,120 --> 00:11:35,170
key they can't actually decrypt it to

00:11:33,310 --> 00:11:36,759
make sense of it and it's generally

00:11:35,170 --> 00:11:39,190
easier to protect a very small

00:11:36,759 --> 00:11:41,319
encryption key than it is to protect you

00:11:39,190 --> 00:11:43,839
know a very large body of information on

00:11:41,319 --> 00:11:45,279
the computer system integrity is

00:11:43,839 --> 00:11:47,860
effectively the dual of confidentiality

00:11:45,279 --> 00:11:49,750
where confidentiality is concerned with

00:11:47,860 --> 00:11:50,970
who's reading information integrity is

00:11:49,750 --> 00:11:54,250
concerned with who's writing information

00:11:50,970 --> 00:11:56,920
so if I produce you know hard disk image

00:11:54,250 --> 00:12:01,089
from an embedded build system and I

00:11:56,920 --> 00:12:02,800
deploy this onto my systems it's a it's

00:12:01,089 --> 00:12:04,690
kind of a hole and I can generally

00:12:02,800 --> 00:12:06,550
measure it I can calculate a hash over

00:12:04,690 --> 00:12:09,550
it and I can figure out what you know

00:12:06,550 --> 00:12:10,569
how to identify it but if my system ends

00:12:09,550 --> 00:12:11,920
up having you know its integrity

00:12:10,569 --> 00:12:13,540
decreased where someone can actually

00:12:11,920 --> 00:12:15,790
write to the system they will be able to

00:12:13,540 --> 00:12:17,440
change that root filesystem a change

00:12:15,790 --> 00:12:18,970
components of that root filesystem and

00:12:17,440 --> 00:12:20,170
the integrity would you know the

00:12:18,970 --> 00:12:23,380
integrity state of the system is to

00:12:20,170 --> 00:12:25,209
created authentication is usually you

00:12:23,380 --> 00:12:27,190
know whatever one knows when I type in a

00:12:25,209 --> 00:12:29,170
username and password so really it's

00:12:27,190 --> 00:12:30,459
about proving something to be true when

00:12:29,170 --> 00:12:33,069
someone shows up and they claim to be

00:12:30,459 --> 00:12:35,290
user X you challenge them and say okay

00:12:33,069 --> 00:12:36,970
well user X knows a secret do you

00:12:35,290 --> 00:12:38,319
actually know that secret and if they

00:12:36,970 --> 00:12:39,760
provide the secret then you know they

00:12:38,319 --> 00:12:42,329
are authenticated and they proven

00:12:39,760 --> 00:12:44,290
effectively their claim to be true

00:12:42,329 --> 00:12:45,790
operation is something very similar to

00:12:44,290 --> 00:12:48,399
authentication and authorization is

00:12:45,790 --> 00:12:49,870
actually very very heavily ingrained in

00:12:48,399 --> 00:12:50,529
the TPM so this is something worth

00:12:49,870 --> 00:12:53,110
discussing

00:12:50,529 --> 00:12:54,970
so authorization is less about proving

00:12:53,110 --> 00:12:56,380
who you are approving so maybe true

00:12:54,970 --> 00:12:58,630
it's more about proving that you are

00:12:56,380 --> 00:13:00,639
allowed to do something or use some

00:12:58,630 --> 00:13:02,350
object so authorization you're really

00:13:00,639 --> 00:13:04,060
just not claiming to be someone but

00:13:02,350 --> 00:13:06,130
you're claiming to have some kind of

00:13:04,060 --> 00:13:08,230
and again it just boils down to

00:13:06,130 --> 00:13:10,900
providing either the ability to satisfy

00:13:08,230 --> 00:13:13,090
a policy which is simply the TPM does in

00:13:10,900 --> 00:13:15,040
a really interesting way or the ability

00:13:13,090 --> 00:13:16,620
to produce a secret that only someone

00:13:15,040 --> 00:13:18,700
who's authorized to be able to produce

00:13:16,620 --> 00:13:19,960
Donald PDA ssin is kind of less

00:13:18,700 --> 00:13:21,940
interesting in this context but really

00:13:19,960 --> 00:13:25,780
it's about keeping someone from denying

00:13:21,940 --> 00:13:27,190
a fact so if something happened in a

00:13:25,780 --> 00:13:29,470
system with strong non-repudiation

00:13:27,190 --> 00:13:31,450
properties you would be able to or

00:13:29,470 --> 00:13:32,890
someone wanted to claim that oh that

00:13:31,450 --> 00:13:34,390
actually didn't happen I didn't produce

00:13:32,890 --> 00:13:36,130
that data you would have some way to

00:13:34,390 --> 00:13:38,200
actually refute that claim and say well

00:13:36,130 --> 00:13:39,790
you actually did and here's why usually

00:13:38,200 --> 00:13:42,250
this is the realm of digital signatures

00:13:39,790 --> 00:13:43,630
and again the TPM can be used to produce

00:13:42,250 --> 00:13:45,940
a system that has these types of

00:13:43,630 --> 00:13:48,040
properties but again to get back to the

00:13:45,940 --> 00:13:49,690
original thesis here the TPM doesn't

00:13:48,040 --> 00:13:50,830
give you these things using the TPM

00:13:49,690 --> 00:13:52,900
won't get you all these properties

00:13:50,830 --> 00:13:55,240
however the TPM is a building block that

00:13:52,900 --> 00:13:58,440
you can use to build a system that

00:13:55,240 --> 00:14:01,000
realizes some of these properties

00:13:58,440 --> 00:14:02,710
alright so shifting gears from my

00:14:01,000 --> 00:14:04,810
soapbox I'm officially stepping down off

00:14:02,710 --> 00:14:06,700
of that and we're actually going to get

00:14:04,810 --> 00:14:08,230
into what what a TPM is and I'll

00:14:06,700 --> 00:14:10,420
apologize the slides that are up on the

00:14:08,230 --> 00:14:12,280
web differ in order a little bit here I

00:14:10,420 --> 00:14:14,650
just as it was I've been practicing this

00:14:12,280 --> 00:14:19,570
this turned in to be a little bit easier

00:14:14,650 --> 00:14:22,720
flow to go into this slide neck so so

00:14:19,570 --> 00:14:24,760
the TPM itself is really just a small

00:14:22,720 --> 00:14:26,140
crypto engine and I've often heard it

00:14:24,760 --> 00:14:27,880
described or I've heard it described as

00:14:26,140 --> 00:14:30,430
a crypto decelerate er as opposed to a

00:14:27,880 --> 00:14:32,740
crypto accelerator it's very small as a

00:14:30,430 --> 00:14:34,240
very kind of anemic CPU ah no generally

00:14:32,740 --> 00:14:37,120
and does these things very slow and this

00:14:34,240 --> 00:14:38,310
was actually by design so internally it

00:14:37,120 --> 00:14:40,660
has a number of cryptographic functions

00:14:38,310 --> 00:14:42,360
hashing functions there are key

00:14:40,660 --> 00:14:44,200
generation functions which really are

00:14:42,360 --> 00:14:46,540
relying on the random number generator

00:14:44,200 --> 00:14:49,420
which is something we'll talk about in

00:14:46,540 --> 00:14:50,650
detail later but also the last bullet

00:14:49,420 --> 00:14:51,730
here is an interesting one around the

00:14:50,650 --> 00:14:54,610
integrity measurement and reporting

00:14:51,730 --> 00:14:55,690
subsystem this is what what we'll see

00:14:54,610 --> 00:14:58,090
here on the bottom right hand part of

00:14:55,690 --> 00:15:00,400
the slide that we call PCR banks the

00:14:58,090 --> 00:15:01,960
platform configuration registers and a

00:15:00,400 --> 00:15:03,210
block diagram over here on the right is

00:15:01,960 --> 00:15:04,390
really meant to

00:15:03,210 --> 00:15:06,220
[Music]

00:15:04,390 --> 00:15:08,530
to kind of hammer home this point that

00:15:06,220 --> 00:15:10,600
there is the number of different

00:15:08,530 --> 00:15:12,790
functions that kind of spent that sit

00:15:10,600 --> 00:15:15,400
around this i/o bus and the TPM is meant

00:15:12,790 --> 00:15:16,990
to have one input and one output because

00:15:15,400 --> 00:15:19,180
it's designed largely came you know

00:15:16,990 --> 00:15:22,510
around the early 2000s when we were

00:15:19,180 --> 00:15:23,950
realizing that the software separation

00:15:22,510 --> 00:15:25,930
mechanisms implemented an operating

00:15:23,950 --> 00:15:28,150
system kernels was significantly weaker

00:15:25,930 --> 00:15:30,100
than we needed them to be and so we were

00:15:28,150 --> 00:15:31,780
seeing processes on a system attacking

00:15:30,100 --> 00:15:34,240
other processes and breaking down these

00:15:31,780 --> 00:15:35,950
separation barriers between them that

00:15:34,240 --> 00:15:37,480
the operating system enforces that's

00:15:35,950 --> 00:15:38,290
largely because of the complexity of the

00:15:37,480 --> 00:15:41,160
operating system

00:15:38,290 --> 00:15:44,080
so the TPM was an observation that the

00:15:41,160 --> 00:15:45,520
most sensitive and important information

00:15:44,080 --> 00:15:49,030
on your system is often the crypto keys

00:15:45,520 --> 00:15:50,980
and so you want to take your crypto keys

00:15:49,030 --> 00:15:53,020
and your crypto operations and segregate

00:15:50,980 --> 00:15:54,730
them in a very small but very tightly

00:15:53,020 --> 00:15:56,860
controlled environment that has one

00:15:54,730 --> 00:15:59,110
input and one output receives command

00:15:56,860 --> 00:16:03,790
buffers sends responses and is

00:15:59,110 --> 00:16:05,620
impervious to software attack also

00:16:03,790 --> 00:16:07,180
that's worth something that's worth

00:16:05,620 --> 00:16:09,310
discussing are the different flavors of

00:16:07,180 --> 00:16:10,720
TPMS you can have typically where we're

00:16:09,310 --> 00:16:13,660
all very comfortable thinking about

00:16:10,720 --> 00:16:16,210
these things as separate chips on the

00:16:13,660 --> 00:16:18,010
system like a discrete IP block send a

00:16:16,210 --> 00:16:20,110
piece of silicon and it's wired into the

00:16:18,010 --> 00:16:24,010
system through a well-defined bus like

00:16:20,110 --> 00:16:25,180
the spi bus or or the LPC bus and we

00:16:24,010 --> 00:16:28,030
even seen them looked over the I Square

00:16:25,180 --> 00:16:31,210
C bus but it's also very valid to build

00:16:28,030 --> 00:16:34,000
the TPM that is an IP block or discrete

00:16:31,210 --> 00:16:36,610
IP block that's on a larger SOC and so

00:16:34,000 --> 00:16:38,770
that you can have something like Intel's

00:16:36,610 --> 00:16:40,900
PTT which runs in the sea SME or

00:16:38,770 --> 00:16:43,720
something like software TPM that would

00:16:40,900 --> 00:16:45,970
run in armes trust zone that would have

00:16:43,720 --> 00:16:47,770
again one input and one output and that

00:16:45,970 --> 00:16:49,150
would that would prevent the software

00:16:47,770 --> 00:16:51,310
level attacks from the operating system

00:16:49,150 --> 00:16:53,530
or applications against it but still

00:16:51,310 --> 00:16:55,810
within the same package so a TPM doesn't

00:16:53,530 --> 00:16:57,430
necessarily have to be a discrete piece

00:16:55,810 --> 00:17:00,040
of silicon it can be included in a

00:16:57,430 --> 00:17:01,060
larger SOC or even for the folks here

00:17:00,040 --> 00:17:04,209
that are familiar with virtualization

00:17:01,060 --> 00:17:05,949
like Zen Zen has a virtual TPM that can

00:17:04,209 --> 00:17:07,930
actually be run in a separate virtual

00:17:05,949 --> 00:17:10,630
machine from the the system that it's

00:17:07,930 --> 00:17:12,250
servicing and it uses the iommu and the

00:17:10,630 --> 00:17:14,440
separation properties of the hypervisor

00:17:12,250 --> 00:17:16,270
to protect it from direct software

00:17:14,440 --> 00:17:17,559
attacks so there's just kind of

00:17:16,270 --> 00:17:18,759
different flavors of the TP

00:17:17,559 --> 00:17:23,919
and that can exist as well and they're

00:17:18,759 --> 00:17:25,629
all valid TPMS so kind of reaching back

00:17:23,919 --> 00:17:28,149
to that threat modeling discussion the

00:17:25,629 --> 00:17:29,470
the TPM itself has its own threat model

00:17:28,149 --> 00:17:31,779
but it's it's described in a

00:17:29,470 --> 00:17:33,249
particularly interesting way and it's

00:17:31,779 --> 00:17:36,159
largely around the fact that the T and

00:17:33,249 --> 00:17:37,570
TPM meaning trusted really doesn't

00:17:36,159 --> 00:17:39,490
necessarily mean that you should trust

00:17:37,570 --> 00:17:43,029
it but simply by virtue of using it you

00:17:39,490 --> 00:17:45,279
must trust it it is an opaque box that

00:17:43,029 --> 00:17:47,529
does crypto operations for you and if

00:17:45,279 --> 00:17:49,179
you believe it's going to to protect

00:17:47,529 --> 00:17:51,850
your keys and perform these operations

00:17:49,179 --> 00:17:54,059
for you you implicitly trust it it's not

00:17:51,850 --> 00:17:57,009
open-source software you don't get to

00:17:54,059 --> 00:17:59,320
actually interrogate the code directly

00:17:57,009 --> 00:18:01,779
but by virtue of using it you are

00:17:59,320 --> 00:18:04,570
trusting it and so this first bullet

00:18:01,779 --> 00:18:07,200
here underneath the the top level there

00:18:04,570 --> 00:18:10,149
this protected capability is how the TPM

00:18:07,200 --> 00:18:11,679
architecture document describes the

00:18:10,149 --> 00:18:15,190
different functions of the TPM provides

00:18:11,679 --> 00:18:16,629
so any any function of the TPM and in

00:18:15,190 --> 00:18:17,799
the previous slide that I showed this

00:18:16,629 --> 00:18:19,990
kind of breakout with these boxes

00:18:17,799 --> 00:18:22,149
they're all protected capabilities and

00:18:19,990 --> 00:18:23,529
by protected capability it really means

00:18:22,149 --> 00:18:24,999
that if the capabilities the TPM

00:18:23,529 --> 00:18:27,369
protects from the outside world so

00:18:24,999 --> 00:18:30,279
software cannot tamper with these these

00:18:27,369 --> 00:18:31,450
functions and therefore you must trust

00:18:30,279 --> 00:18:33,850
these functions and they must be

00:18:31,450 --> 00:18:35,649
implemented properly if they're not the

00:18:33,850 --> 00:18:37,499
you know the trust you should place on

00:18:35,649 --> 00:18:40,029
the system is significantly degraded

00:18:37,499 --> 00:18:42,159
similarly shielded locations are a place

00:18:40,029 --> 00:18:44,080
in the TPM where we're sensitive data

00:18:42,159 --> 00:18:46,749
can reside and it can only be operated

00:18:44,080 --> 00:18:48,039
on by these protected capabilities so

00:18:46,749 --> 00:18:50,889
protected capabilities or things that

00:18:48,039 --> 00:18:52,929
you must trust and the shielded location

00:18:50,889 --> 00:18:54,639
is where sensitive data resides what

00:18:52,929 --> 00:18:57,460
it's being operated on by a protected

00:18:54,639 --> 00:18:59,710
capability the last bullet here in this

00:18:57,460 --> 00:19:01,330
the subset is this notion of a protected

00:18:59,710 --> 00:19:03,220
object it's very much related to a

00:19:01,330 --> 00:19:04,690
shielded location and that protected

00:19:03,220 --> 00:19:06,669
objects contain sensitive information

00:19:04,690 --> 00:19:08,980
where the sensitive information is

00:19:06,669 --> 00:19:11,440
encrypted and it's only ever decrypted

00:19:08,980 --> 00:19:13,419
in a shielded location so that it can be

00:19:11,440 --> 00:19:15,940
operated on by a protected capability

00:19:13,419 --> 00:19:17,499
now this is relevant to the TPM in

00:19:15,940 --> 00:19:19,899
general because it has a very small

00:19:17,499 --> 00:19:22,659
amount of RAM in it and so the actual

00:19:19,899 --> 00:19:23,980
number of secrets of the TPM can hold at

00:19:22,659 --> 00:19:26,289
any one point in time it's very small

00:19:23,980 --> 00:19:28,480
generally about you know three RSA keys

00:19:26,289 --> 00:19:30,340
maybe four and you know it's really

00:19:28,480 --> 00:19:34,150
depending on the implementation and

00:19:30,340 --> 00:19:35,620
a protected object is effectively a that

00:19:34,150 --> 00:19:38,080
has sensitive data in it where the

00:19:35,620 --> 00:19:39,909
sensitive data is encrypted anytime that

00:19:38,080 --> 00:19:42,279
it's not in a shielded location and so

00:19:39,909 --> 00:19:44,080
this allows the TPM to take secrets

00:19:42,279 --> 00:19:46,299
encrypt them and then export them off

00:19:44,080 --> 00:19:48,100
the system so that they can be persisted

00:19:46,299 --> 00:19:51,400
in you know operating system memory

00:19:48,100 --> 00:19:54,460
that's much more plentiful than the TPM

00:19:51,400 --> 00:19:55,840
itself and so this is usually the realm

00:19:54,460 --> 00:19:57,250
of something like a resource manager

00:19:55,840 --> 00:19:58,809
that actually will do this kind of

00:19:57,250 --> 00:20:01,120
context switching much like an operating

00:19:58,809 --> 00:20:05,380
system schedule it does for the CPU but

00:20:01,120 --> 00:20:06,789
on the TPM itself and finally you know I

00:20:05,380 --> 00:20:09,520
was talking about the threat model the

00:20:06,789 --> 00:20:12,029
the TPM is meant to protect from attacks

00:20:09,520 --> 00:20:14,740
by malicious software on the platform

00:20:12,029 --> 00:20:17,020
the physical security properties of the

00:20:14,740 --> 00:20:18,549
TPM are largely out of scope other than

00:20:17,020 --> 00:20:21,190
there needs to be this one input and

00:20:18,549 --> 00:20:22,600
output mechanism the the TPM does not

00:20:21,190 --> 00:20:24,669
claim to give you any kind of physical

00:20:22,600 --> 00:20:26,289
protection so if someone pops the chip

00:20:24,669 --> 00:20:28,000
off your system or starts probing on the

00:20:26,289 --> 00:20:29,590
bus there's nothing in the TPM

00:20:28,000 --> 00:20:31,090
specification that requires that it be

00:20:29,590 --> 00:20:33,309
able to protect against these these

00:20:31,090 --> 00:20:34,840
attacks now this allows for vendors to

00:20:33,309 --> 00:20:37,750
differentiate their implementations you

00:20:34,840 --> 00:20:39,580
can buy a fit certified TPM that meets a

00:20:37,750 --> 00:20:41,950
number of security requirements however

00:20:39,580 --> 00:20:43,510
this is not a requirement of a TPM and

00:20:41,950 --> 00:20:46,570
this is because the TPM was meant to be

00:20:43,510 --> 00:20:48,279
low cost the idea was to drive adoption

00:20:46,570 --> 00:20:49,750
and get these things into as many

00:20:48,279 --> 00:20:51,760
systems as possible so that people are

00:20:49,750 --> 00:20:53,529
getting their crypto keys out of general

00:20:51,760 --> 00:20:55,899
kind of RAM out of the way from the

00:20:53,529 --> 00:20:58,179
operating system but not so much that it

00:20:55,899 --> 00:21:00,059
you know requires that you buy in five

00:20:58,179 --> 00:21:03,659
ten thousand dollars to have like a full

00:21:00,059 --> 00:21:05,770
physically secure HSM on your system so

00:21:03,659 --> 00:21:07,149
physical protections largely out of

00:21:05,770 --> 00:21:08,529
scope and there's tons of information

00:21:07,149 --> 00:21:10,090
out there there's been guys that have

00:21:08,529 --> 00:21:11,919
given talks at DEFCON there's been folks

00:21:10,090 --> 00:21:13,480
that publish academic papers where they

00:21:11,919 --> 00:21:15,190
actually physically attacked the TPM

00:21:13,480 --> 00:21:17,080
they'll start stripping metal layers off

00:21:15,190 --> 00:21:19,570
the die they'll start pulling you know

00:21:17,080 --> 00:21:21,460
secrets out of the thing and you know

00:21:19,570 --> 00:21:22,779
for commodity TPMS that's largely out of

00:21:21,460 --> 00:21:25,029
scope but it makes for an interesting

00:21:22,779 --> 00:21:27,330
exercise for you know decapping chips

00:21:25,029 --> 00:21:30,279
which is kind of fun

00:21:27,330 --> 00:21:31,990
and finally just this is actually one of

00:21:30,279 --> 00:21:34,659
the most interesting and probably

00:21:31,990 --> 00:21:38,230
complicated parts of the TPM is this

00:21:34,659 --> 00:21:39,640
notion of integrity measurement so this

00:21:38,230 --> 00:21:42,720
is one that I struggle with so bear with

00:21:39,640 --> 00:21:44,050
me if I if I lag a bit on this slide so

00:21:42,720 --> 00:21:45,280
integrity

00:21:44,050 --> 00:21:48,070
measurement is really about identifying

00:21:45,280 --> 00:21:50,070
the software on a system the behavior

00:21:48,070 --> 00:21:52,630
that a system has a software system is

00:21:50,070 --> 00:21:54,520
largely defined or almost exclusively

00:21:52,630 --> 00:21:56,410
defined by the software that's on the

00:21:54,520 --> 00:21:59,110
platform that's executing you know

00:21:56,410 --> 00:22:00,940
hardware is generally immutable software

00:21:59,110 --> 00:22:02,290
can be changed and so if someone messes

00:22:00,940 --> 00:22:03,670
up the integrity of your system and they

00:22:02,290 --> 00:22:06,580
start changing it it will behave

00:22:03,670 --> 00:22:10,450
differently and so the notion of the

00:22:06,580 --> 00:22:12,280
measured boot is around the the ability

00:22:10,450 --> 00:22:13,960
to measure the the components of the

00:22:12,280 --> 00:22:17,020
system as they come up as the system

00:22:13,960 --> 00:22:18,970
itself boots so everything you know you

00:22:17,020 --> 00:22:21,430
know the kind of notion of this Turtles

00:22:18,970 --> 00:22:23,080
all the way down there is this last part

00:22:21,430 --> 00:22:24,100
that gets or this first part that gets

00:22:23,080 --> 00:22:25,630
measured at the bottom of your

00:22:24,100 --> 00:22:27,820
measurement and we call this the root of

00:22:25,630 --> 00:22:29,980
trust for measurement the RTM on old

00:22:27,820 --> 00:22:33,190
BioSpace systems this was the bios boot

00:22:29,980 --> 00:22:35,440
block you know there there's a parallel

00:22:33,190 --> 00:22:37,150
in UEFI and there's a parallel in pretty

00:22:35,440 --> 00:22:38,800
much every system that boots is a some

00:22:37,150 --> 00:22:41,350
instruction that the CPU performs when

00:22:38,800 --> 00:22:43,120
it comes up grabs a piece of code out of

00:22:41,350 --> 00:22:45,010
an S or a piece of memory that I'm

00:22:43,120 --> 00:22:47,530
usually on the SPI bus turns it into

00:22:45,010 --> 00:22:50,380
memory transfers control to it well in a

00:22:47,530 --> 00:22:52,120
measure boot system that thing is the

00:22:50,380 --> 00:22:53,620
root of your measurement and therefore

00:22:52,120 --> 00:22:55,120
it's effectively measures itself it's

00:22:53,620 --> 00:22:57,880
the thing you trust much like you trust

00:22:55,120 --> 00:22:59,740
the TPM but in a measured boot that

00:22:57,880 --> 00:23:01,600
thing before it transfers control to the

00:22:59,740 --> 00:23:03,310
next piece of farm or it measures it and

00:23:01,600 --> 00:23:04,840
by measuring I mean it calculates a hash

00:23:03,310 --> 00:23:07,090
over it so you can identify it write a

00:23:04,840 --> 00:23:08,740
one-way function and it stores this hash

00:23:07,090 --> 00:23:10,330
somewhere on the system and the TPM is

00:23:08,740 --> 00:23:12,610
specifically designed to store these

00:23:10,330 --> 00:23:14,860
hashes in these things we call platform

00:23:12,610 --> 00:23:17,050
configuration registers PCR for short

00:23:14,860 --> 00:23:19,060
there's generally about 25 on most

00:23:17,050 --> 00:23:20,650
general-purpose systems sometime less

00:23:19,060 --> 00:23:23,470
depending on the actual platform itself

00:23:20,650 --> 00:23:25,450
and so as the system boots the Stormers

00:23:23,470 --> 00:23:26,710
pulled out of SPI you give it its

00:23:25,450 --> 00:23:28,300
transfer control and it's measured

00:23:26,710 --> 00:23:31,090
before it receives that control this

00:23:28,300 --> 00:23:32,980
kind of this builds up from firmware

00:23:31,090 --> 00:23:35,680
option roms for the bootloader to the

00:23:32,980 --> 00:23:37,060
operating system each cysts or each part

00:23:35,680 --> 00:23:38,590
of the system before it transfers

00:23:37,060 --> 00:23:40,840
control to the next it measures it

00:23:38,590 --> 00:23:43,240
stores that information in a PCR and

00:23:40,840 --> 00:23:46,480
then the system continues to boot and so

00:23:43,240 --> 00:23:48,880
these PCRs are populated with

00:23:46,480 --> 00:23:50,410
information that is put there by TPM

00:23:48,880 --> 00:23:53,080
function called the extend function and

00:23:50,410 --> 00:23:54,350
extend again is a protected capability

00:23:53,080 --> 00:23:56,000
which is something that you must

00:23:54,350 --> 00:23:58,190
trust to be implemented properly in

00:23:56,000 --> 00:24:00,530
order for the TPM to be you know a part

00:23:58,190 --> 00:24:01,880
of the system and so in the end once the

00:24:00,530 --> 00:24:04,520
operating systems up if you look at

00:24:01,880 --> 00:24:06,320
these PCR values they should reflect the

00:24:04,520 --> 00:24:11,480
state of the software that is running on

00:24:06,320 --> 00:24:13,640
the system and so again I've kind of

00:24:11,480 --> 00:24:15,679
stepped on this slide already PCR is a

00:24:13,640 --> 00:24:17,450
shielded location only operated on by

00:24:15,679 --> 00:24:20,929
the single protected capability that is

00:24:17,450 --> 00:24:22,760
the extend operation it's memory that is

00:24:20,929 --> 00:24:25,549
only capable of storing a hash and the

00:24:22,760 --> 00:24:28,010
TPM spec it must be the size of the

00:24:25,549 --> 00:24:30,559
largest hash produced by an algorithm in

00:24:28,010 --> 00:24:31,970
the TPM typically there's about 24 these

00:24:30,559 --> 00:24:33,919
are most general-purpose computers these

00:24:31,970 --> 00:24:35,809
days but their respects coming out that

00:24:33,919 --> 00:24:40,070
allow for less fur for mobile devices

00:24:35,809 --> 00:24:42,470
and embedded systems and the the extend

00:24:40,070 --> 00:24:44,000
operation itself is defined as a hash

00:24:42,470 --> 00:24:46,210
that depends on the previous state of

00:24:44,000 --> 00:24:48,710
the PCR so there's this kind of

00:24:46,210 --> 00:24:51,260
mathematical equation up here that

00:24:48,710 --> 00:24:52,610
defines the PCR at time n I guess I

00:24:51,260 --> 00:24:55,030
shouldn't use T their time T would have

00:24:52,610 --> 00:24:57,440
been nice but we'll say time n for now

00:24:55,030 --> 00:24:58,730
which is defined by the previous state

00:24:57,440 --> 00:25:01,280
its previous state so when the system

00:24:58,730 --> 00:25:02,690
restarts this thing's all zeros and when

00:25:01,280 --> 00:25:04,580
you do your first measurement it takes

00:25:02,690 --> 00:25:06,620
the time at n minus 1 or the takes the

00:25:04,580 --> 00:25:08,390
value at n minus 1 which is all zeros

00:25:06,620 --> 00:25:10,070
concatenates that with whatever it is

00:25:08,390 --> 00:25:12,049
you're hashing and then calculates the

00:25:10,070 --> 00:25:14,059
hash over both of those things so the

00:25:12,049 --> 00:25:16,850
value in a PCR the hash value always

00:25:14,059 --> 00:25:19,179
rolls forward never goes backwards and

00:25:16,850 --> 00:25:21,679
it relies on that kind of one-way

00:25:19,179 --> 00:25:22,760
computational property of a hash so that

00:25:21,679 --> 00:25:24,500
it can only move in that forward

00:25:22,760 --> 00:25:27,140
direction and so the only way to change

00:25:24,500 --> 00:25:31,309
the values in these PCRs is to reset the

00:25:27,140 --> 00:25:33,740
system and again that makes it easy to

00:25:31,309 --> 00:25:35,240
verify but very difficult to forge right

00:25:33,740 --> 00:25:38,120
so that's the whole point of the hashing

00:25:35,240 --> 00:25:40,580
algorithm alright so shifting again

00:25:38,120 --> 00:25:42,679
we're getting into the the TCG software

00:25:40,580 --> 00:25:44,780
stack now so we understand kind of what

00:25:42,679 --> 00:25:47,570
were required to do as far as just kind

00:25:44,780 --> 00:25:49,549
of best practices for building a Linux

00:25:47,570 --> 00:25:51,710
system all of these kind of you know

00:25:49,549 --> 00:25:53,659
minimum bar things we've talked a little

00:25:51,710 --> 00:25:55,760
bit about what the TPM is it does some

00:25:53,659 --> 00:25:57,799
of its functions and now we'll get into

00:25:55,760 --> 00:25:59,000
how we actually drive it so that whole

00:25:57,799 --> 00:26:00,770
measure booting is generally something

00:25:59,000 --> 00:26:02,780
that most software developers never

00:26:00,770 --> 00:26:04,580
interact with the it's something that's

00:26:02,780 --> 00:26:05,720
instrumented into the firmware something

00:26:04,580 --> 00:26:07,610
that's instrumented into the hardware

00:26:05,720 --> 00:26:07,879
and we don't generally interact with it

00:26:07,610 --> 00:26:09,769
but

00:26:07,879 --> 00:26:11,869
we do interact with the TPM we do so

00:26:09,769 --> 00:26:13,369
through a programming API just like we

00:26:11,869 --> 00:26:17,119
do every other device on the system and

00:26:13,369 --> 00:26:18,829
the TCG defines the software stack that

00:26:17,119 --> 00:26:20,599
defines these API to interacting with it

00:26:18,829 --> 00:26:22,909
so there's a number of different API s

00:26:20,599 --> 00:26:25,009
and on the bottom here is the discussion

00:26:22,909 --> 00:26:27,709
of this access broker and resource

00:26:25,009 --> 00:26:28,789
managers generally a system daemon but

00:26:27,709 --> 00:26:30,259
if you look at some systems as

00:26:28,789 --> 00:26:32,409
implemented in the kernel itself and

00:26:30,259 --> 00:26:35,149
this is something that is used to

00:26:32,409 --> 00:26:36,979
mediate access to the TPM it's a single

00:26:35,149 --> 00:26:38,479
device you potentially have any number

00:26:36,979 --> 00:26:39,949
of applications on your system trying to

00:26:38,479 --> 00:26:41,989
use it and so this is the thing that

00:26:39,949 --> 00:26:43,940
gives them all the illusion that they

00:26:41,989 --> 00:26:45,440
are the only user of the TPM so it's

00:26:43,940 --> 00:26:47,929
much like an operating system scheduler

00:26:45,440 --> 00:26:49,249
in that it takes context persists it for

00:26:47,929 --> 00:26:50,899
an applications which is that I would

00:26:49,249 --> 00:26:53,629
allows another application to use it and

00:26:50,899 --> 00:26:55,849
we'll just keep doing that for for as

00:26:53,629 --> 00:26:57,619
long as the system's running it's meant

00:26:55,849 --> 00:26:59,239
to be as simple as possible and it also

00:26:57,619 --> 00:27:01,819
has to deal with power management

00:26:59,239 --> 00:27:04,399
functions so if the system goes down in

00:27:01,819 --> 00:27:06,169
a power state or a sleep State the the

00:27:04,399 --> 00:27:07,940
resource manager is responsible for

00:27:06,169 --> 00:27:09,739
taking information out of the TPM

00:27:07,940 --> 00:27:10,999
storing it in main memory and then

00:27:09,739 --> 00:27:12,019
letting the system put itself to sleep

00:27:10,999 --> 00:27:13,879
because when the system goes into a

00:27:12,019 --> 00:27:16,069
sleep state the TPM memory is RAM and

00:27:13,879 --> 00:27:18,589
it's mostly lost it needs to be in a

00:27:16,069 --> 00:27:20,419
reset when it comes back up now on top

00:27:18,589 --> 00:27:22,489
of this is this thing we call the TPM

00:27:20,419 --> 00:27:24,769
command transmission interface or TCP I

00:27:22,489 --> 00:27:27,169
this is something that was added in TPM

00:27:24,769 --> 00:27:29,449
2 that was missing from TPM 1.2 and it's

00:27:27,169 --> 00:27:33,679
particularly compelling because it's a

00:27:29,449 --> 00:27:36,919
very slim basically 7 response API that

00:27:33,679 --> 00:27:38,359
is meant to abstract the the details of

00:27:36,919 --> 00:27:40,639
the IPC mechanism that's used to

00:27:38,359 --> 00:27:43,009
transfer TPM commands and responses from

00:27:40,639 --> 00:27:45,559
the application to either the TPM or the

00:27:43,009 --> 00:27:47,059
resource manager and so this is a good

00:27:45,559 --> 00:27:49,190
way to decouple that kind of higher

00:27:47,059 --> 00:27:51,229
level API in the application from the

00:27:49,190 --> 00:27:52,669
lower level implementation of how the

00:27:51,229 --> 00:27:54,440
commands actually get transmitted there

00:27:52,669 --> 00:27:56,629
so on a Linux system you may see domain

00:27:54,440 --> 00:27:58,879
sockets you may see D bus for

00:27:56,629 --> 00:28:00,259
transmitting these things and the T CTI

00:27:58,879 --> 00:28:02,269
there should be a different key CTI

00:28:00,259 --> 00:28:03,859
module for all those different IPC

00:28:02,269 --> 00:28:05,349
mechanisms and if something can be

00:28:03,859 --> 00:28:07,219
dynamically loaded into an application

00:28:05,349 --> 00:28:08,659
depending on whatever the needs of the

00:28:07,219 --> 00:28:11,119
system are so this keeps you from having

00:28:08,659 --> 00:28:14,029
to change your application every time

00:28:11,119 --> 00:28:16,579
you have a different transport mechanism

00:28:14,029 --> 00:28:18,379
that lives underneath you and so you

00:28:16,579 --> 00:28:20,419
know one could implement a tcpi layer

00:28:18,379 --> 00:28:21,549
the talks over IP sockets and so you

00:28:20,419 --> 00:28:23,049
could send TPM commands

00:28:21,549 --> 00:28:25,600
the local system to a remote system if

00:28:23,049 --> 00:28:27,549
you want to go that route finally on top

00:28:25,600 --> 00:28:29,259
of this stuff we build three programming

00:28:27,549 --> 00:28:30,610
api's the one on the left here called

00:28:29,259 --> 00:28:32,529
the system API is the only one that's

00:28:30,610 --> 00:28:34,059
actually specified currently the one in

00:28:32,529 --> 00:28:36,100
the middle is the enhanced system API

00:28:34,059 --> 00:28:38,440
and the one on the far right is the what

00:28:36,100 --> 00:28:39,850
we call a feature API so the system API

00:28:38,440 --> 00:28:41,169
is the spec that's published and this is

00:28:39,850 --> 00:28:43,450
the one that intel has implemented it is

00:28:41,169 --> 00:28:46,149
the lowest level in the programming

00:28:43,450 --> 00:28:48,460
interfaces it is not meant to hide any

00:28:46,149 --> 00:28:51,460
of the details of the TPM from the user

00:28:48,460 --> 00:28:53,350
someone who is writing to this API will

00:28:51,460 --> 00:28:54,970
need to know intimately the details of

00:28:53,350 --> 00:28:57,399
how the TPM works there's a one-to-one

00:28:54,970 --> 00:28:59,559
mapping with the TPM commands and the

00:28:57,399 --> 00:29:01,899
API calls so you're literally invoking

00:28:59,559 --> 00:29:03,580
specific TPM commands and in fact

00:29:01,899 --> 00:29:06,399
there's actually more functions because

00:29:03,580 --> 00:29:07,980
this this API and I forgot to put it on

00:29:06,399 --> 00:29:10,659
the bullet up here this API has

00:29:07,980 --> 00:29:12,399
asynchronous variants of all the

00:29:10,659 --> 00:29:14,320
function calls so it's meant to be very

00:29:12,399 --> 00:29:16,299
much something can be integrated into a

00:29:14,320 --> 00:29:18,039
venture oven languages so that you could

00:29:16,299 --> 00:29:21,249
have or other so you don't require that

00:29:18,039 --> 00:29:22,960
each application create its own you know

00:29:21,249 --> 00:29:24,190
threading environment because a lot of

00:29:22,960 --> 00:29:25,659
times if you're asking the TPM to

00:29:24,190 --> 00:29:27,700
perform some operations it will take

00:29:25,659 --> 00:29:29,499
tens of seconds to generate keys

00:29:27,700 --> 00:29:31,539
potentially and so you don't want to

00:29:29,499 --> 00:29:33,399
have your application walk or have to

00:29:31,539 --> 00:29:34,749
require every application implement

00:29:33,399 --> 00:29:36,249
their own event loop so this is

00:29:34,749 --> 00:29:37,809
something that allows it to be implement

00:29:36,249 --> 00:29:39,850
agreat it into existing aventure of an

00:29:37,809 --> 00:29:42,609
API or inventor of a programming

00:29:39,850 --> 00:29:43,960
environments very easily but it's also

00:29:42,609 --> 00:29:46,690
something that's designed to be very

00:29:43,960 --> 00:29:48,759
heavily or very amenable to embedding so

00:29:46,690 --> 00:29:51,039
you can implement this in very low level

00:29:48,759 --> 00:29:52,269
or very low level systems it doesn't

00:29:51,039 --> 00:29:54,129
interact with the file system it's not

00:29:52,269 --> 00:29:55,809
meant to have any persistent storage it

00:29:54,129 --> 00:29:57,100
does not perform any crypto operations

00:29:55,809 --> 00:29:59,409
itself so if you want to use the

00:29:57,100 --> 00:30:01,389
higher-level TPM functions like H max

00:29:59,409 --> 00:30:03,580
sessions or encrypted sessions you need

00:30:01,389 --> 00:30:05,019
to provide that crypto yourself it also

00:30:03,580 --> 00:30:07,929
doesn't do any dynamic memory allocation

00:30:05,019 --> 00:30:09,220
so it can exist on heap with systems so

00:30:07,929 --> 00:30:11,499
this is something that's designed to be

00:30:09,220 --> 00:30:14,019
able to be integrated easily into like a

00:30:11,499 --> 00:30:16,320
UEFI environment or maybe into an SGX

00:30:14,019 --> 00:30:18,399
Enclave something very deeply embedded

00:30:16,320 --> 00:30:20,679
now the enhanced list of a P I which

00:30:18,399 --> 00:30:22,299
hasn't actually you know we're in the

00:30:20,679 --> 00:30:23,859
TCG were kind of finalizing the spec

00:30:22,299 --> 00:30:25,239
right now for this this is meant to kind

00:30:23,859 --> 00:30:27,309
of bring this up a level where it's now

00:30:25,239 --> 00:30:28,600
providing crypto functions for you so

00:30:27,309 --> 00:30:29,919
it'll handle all of the aged Matic

00:30:28,600 --> 00:30:31,779
sessions and encrypted sessions if you

00:30:29,919 --> 00:30:33,700
need that still it doesn't do any file

00:30:31,779 --> 00:30:34,050
i/o but it will do memory allocation for

00:30:33,700 --> 00:30:35,520
you see

00:30:34,050 --> 00:30:37,650
have to worry about managing memory in

00:30:35,520 --> 00:30:39,660
your own program so will not be

00:30:37,650 --> 00:30:40,950
something that can be put into heavily

00:30:39,660 --> 00:30:43,110
embedded systems that don't have a heap

00:30:40,950 --> 00:30:45,240
and finally the feature API is really

00:30:43,110 --> 00:30:46,470
kind of soldat nebulous right now to me

00:30:45,240 --> 00:30:49,260
I've only been working in this page for

00:30:46,470 --> 00:30:51,210
a short period of time but this is a PA

00:30:49,260 --> 00:30:53,220
that's meant to be very much abstract

00:30:51,210 --> 00:30:55,350
from the TPM itself it's meant to be

00:30:53,220 --> 00:30:57,330
something that can be used by you know

00:30:55,350 --> 00:30:59,100
your your typical application developers

00:30:57,330 --> 00:31:00,990
who don't want to learn the intricacies

00:30:59,100 --> 00:31:03,030
of the TPM but they do know that they

00:31:00,990 --> 00:31:04,650
need crypto keys and a couple crypto

00:31:03,030 --> 00:31:05,940
operations so they shouldn't have to

00:31:04,650 --> 00:31:09,660
actually know the TPM commands

00:31:05,940 --> 00:31:11,400
themselves all right so to put a picture

00:31:09,660 --> 00:31:13,830
to the site I generally live on on

00:31:11,400 --> 00:31:15,240
diagrams and so this is a just a way to

00:31:13,830 --> 00:31:17,220
put these things together to show you

00:31:15,240 --> 00:31:19,410
how a normal application that's invoking

00:31:17,220 --> 00:31:20,640
a system API call as we have it

00:31:19,410 --> 00:31:23,430
implemented today what it would look

00:31:20,640 --> 00:31:25,530
like but prefix here TSS 2 is the TPM

00:31:23,430 --> 00:31:27,720
software stack 2 for the second

00:31:25,530 --> 00:31:29,610
iteration this is the identifier for the

00:31:27,720 --> 00:31:32,130
system API and then those axes are meant

00:31:29,610 --> 00:31:34,320
to be some TPM function this is what's

00:31:32,130 --> 00:31:36,660
exposed by the system API it's just a

00:31:34,320 --> 00:31:37,770
other a shared object or a static object

00:31:36,660 --> 00:31:39,690
if you're going to link it directly into

00:31:37,770 --> 00:31:41,400
your application and underneath that you

00:31:39,690 --> 00:31:42,660
instantiate a tcpi and you actually pass

00:31:41,400 --> 00:31:44,330
that to the system API when you

00:31:42,660 --> 00:31:46,800
initialize it so that's the thing that

00:31:44,330 --> 00:31:50,190
catches commands and send them out to

00:31:46,800 --> 00:31:53,010
the IPC bus and so really the the system

00:31:50,190 --> 00:31:55,470
API itself is just a layer that takes

00:31:53,010 --> 00:31:57,960
see structures and serializes them into

00:31:55,470 --> 00:32:00,150
a TPM objects or at the TPM command

00:31:57,960 --> 00:32:01,440
buffers and it does the respond reverse

00:32:00,150 --> 00:32:03,390
when it gets a response back so we'll

00:32:01,440 --> 00:32:04,830
give you see structures from that you

00:32:03,390 --> 00:32:08,850
know kind of network byte order a

00:32:04,830 --> 00:32:10,320
command buffer and the TC Ti is the live

00:32:08,850 --> 00:32:11,940
underneath that to catch those byte

00:32:10,320 --> 00:32:13,380
streams and then send them out over the

00:32:11,940 --> 00:32:14,760
IPC bus we've got two that we've

00:32:13,380 --> 00:32:16,410
implemented now that are an open source

00:32:14,760 --> 00:32:18,780
one of which talks directly to the

00:32:16,410 --> 00:32:22,440
device driver in Linux so this is deputy

00:32:18,780 --> 00:32:24,300
PM 0 the other one is a socket API so

00:32:22,440 --> 00:32:26,760
there's a given IP address and a port

00:32:24,300 --> 00:32:28,320
and it will connect either the resource

00:32:26,760 --> 00:32:32,070
manager or will connect to the simulator

00:32:28,320 --> 00:32:34,110
if you're doing testing type stuff and

00:32:32,070 --> 00:32:35,490
again the the whole thing or at least in

00:32:34,110 --> 00:32:37,830
this picture this is meant to have as

00:32:35,490 --> 00:32:39,180
few external dependencies as possible so

00:32:37,830 --> 00:32:41,580
it can be integrated into very heavily

00:32:39,180 --> 00:32:42,870
embedded environments and so one of the

00:32:41,580 --> 00:32:45,880
items on my wish list here is to

00:32:42,870 --> 00:32:48,169
actually make this usable from UEFI

00:32:45,880 --> 00:32:49,910
this is again just to kind of break that

00:32:48,169 --> 00:32:52,370
out a little bit more to describe how a

00:32:49,910 --> 00:32:53,840
system would look at run time you've

00:32:52,370 --> 00:32:55,460
obviously got more than one application

00:32:53,840 --> 00:32:56,900
running at a time and so the resource

00:32:55,460 --> 00:32:58,820
manager is what would be mediating

00:32:56,900 --> 00:33:00,860
access here the resource manager hosts

00:32:58,820 --> 00:33:02,809
the back end for this IPC bus all the

00:33:00,860 --> 00:33:04,490
applications are using a TC TI to

00:33:02,809 --> 00:33:07,280
connect to the resource manager over the

00:33:04,490 --> 00:33:08,360
set IPC bus and then you know in the

00:33:07,280 --> 00:33:09,710
resource manager itself you can

00:33:08,360 --> 00:33:10,820
implement any number of things kind of

00:33:09,710 --> 00:33:12,679
the minimum is you'd have to be able to

00:33:10,820 --> 00:33:14,390
do the management of transient objects

00:33:12,679 --> 00:33:16,460
and sessions but you could implement

00:33:14,390 --> 00:33:19,309
quotas you can implement some kind of

00:33:16,460 --> 00:33:20,750
access control and this is the thing

00:33:19,309 --> 00:33:22,640
that's mediating access to the TPM

00:33:20,750 --> 00:33:25,669
itself but notice the resource manager

00:33:22,640 --> 00:33:27,080
itself has its own TC Ti so it's it's a

00:33:25,669 --> 00:33:29,450
you know it's a very modular design that

00:33:27,080 --> 00:33:34,850
really uses a lot of components across

00:33:29,450 --> 00:33:36,110
it so the the implementation itself and

00:33:34,850 --> 00:33:38,240
the code that we've put out there is

00:33:36,110 --> 00:33:41,030
intel is actually hosted on github we've

00:33:38,240 --> 00:33:42,620
tried to make the the processes you know

00:33:41,030 --> 00:33:43,190
kind of transparent and participatory as

00:33:42,620 --> 00:33:45,260
possible

00:33:43,190 --> 00:33:47,450
intel has this organization we call zero

00:33:45,260 --> 00:33:49,130
one org that's up on github and we host

00:33:47,450 --> 00:33:51,710
two repositories onto that one of which

00:33:49,130 --> 00:33:53,510
is the TPM software stack one of our the

00:33:51,710 --> 00:33:55,820
other one is a set of command line tools

00:33:53,510 --> 00:33:57,169
that you can use to drive the TPM just

00:33:55,820 --> 00:33:58,309
to kind of do some prototyping and

00:33:57,169 --> 00:34:01,549
things you can run on the command line

00:33:58,309 --> 00:34:03,500
the it's distributed under three clause

00:34:01,549 --> 00:34:06,169
BSD license and this is all designed to

00:34:03,500 --> 00:34:08,000
make things as you know as usable and

00:34:06,169 --> 00:34:09,679
flexible as possible for people who want

00:34:08,000 --> 00:34:10,879
to pick this up and implement it and

00:34:09,679 --> 00:34:12,889
because this is you know meant to be

00:34:10,879 --> 00:34:14,960
very heavily embedded this gives you as

00:34:12,889 --> 00:34:16,179
much flexibility as you can and so you

00:34:14,960 --> 00:34:18,409
don't have to worry about you know the

00:34:16,179 --> 00:34:21,800
intricacies of linking and how that

00:34:18,409 --> 00:34:23,690
affects the licenses so this is actually

00:34:21,800 --> 00:34:25,820
something that I've started working on

00:34:23,690 --> 00:34:26,990
very recently the the majority the code

00:34:25,820 --> 00:34:28,429
out there was implemented by my

00:34:26,990 --> 00:34:30,020
predecessor he's actually left Intel

00:34:28,429 --> 00:34:32,810
since and I've I've taken over for him

00:34:30,020 --> 00:34:34,820
since then so personally I really don't

00:34:32,810 --> 00:34:36,649
know a whole lot about the inner

00:34:34,820 --> 00:34:38,000
workings of the TPM directly but I

00:34:36,649 --> 00:34:40,190
figured out a lot of the machinery and

00:34:38,000 --> 00:34:43,159
the the way that the plumbing works in

00:34:40,190 --> 00:34:44,600
the TSS so if you show up on the mailing

00:34:43,159 --> 00:34:45,770
list or rather we don't even have a

00:34:44,600 --> 00:34:47,840
mailing list at this point if you show

00:34:45,770 --> 00:34:50,000
up on the github issues and start asking

00:34:47,840 --> 00:34:51,409
questions I will probably not know the

00:34:50,000 --> 00:34:53,389
answer to the actual thing you're trying

00:34:51,409 --> 00:34:54,770
to do the TPM but I will be able to help

00:34:53,389 --> 00:34:56,750
you set up the plumbing so you can talk

00:34:54,770 --> 00:34:58,430
to it very easily the good news is we've

00:34:56,750 --> 00:34:59,839
had a whole bunch of people show up and

00:34:58,430 --> 00:35:01,190
answering questions for us now I'm even

00:34:59,839 --> 00:35:02,809
know who they are in a lot of cases that

00:35:01,190 --> 00:35:05,450
the folks from Facebook show up we've

00:35:02,809 --> 00:35:06,890
got some folks from Ali Baba and you

00:35:05,450 --> 00:35:09,380
know we've gotten some requests from

00:35:06,890 --> 00:35:12,230
other folks as well so I've been pretty

00:35:09,380 --> 00:35:14,420
impressed by how quickly this is a this

00:35:12,230 --> 00:35:17,000
community has kind of come together and

00:35:14,420 --> 00:35:18,829
this last bullet here is she's take it

00:35:17,000 --> 00:35:19,940
as a word of warning there's a lot of

00:35:18,829 --> 00:35:21,460
churn that's going to be happening in

00:35:19,940 --> 00:35:24,920
these repos over the next couple months

00:35:21,460 --> 00:35:26,990
my predecessor was a windows developer

00:35:24,920 --> 00:35:28,490
and a firmware developer and so the

00:35:26,990 --> 00:35:30,530
majority of what I've been doing in this

00:35:28,490 --> 00:35:32,390
code is and this is how I got involved

00:35:30,530 --> 00:35:34,359
with this of the whole project was just

00:35:32,390 --> 00:35:37,550
implementing it saying Auto Tools build

00:35:34,359 --> 00:35:38,839
and decoupling a lot of the really close

00:35:37,550 --> 00:35:41,030
coupling between a lot of things that

00:35:38,839 --> 00:35:42,829
needed to be turned into libraries it's

00:35:41,030 --> 00:35:45,619
not particularly glamorous work but you

00:35:42,829 --> 00:35:49,160
know it's I think it's particularly

00:35:45,619 --> 00:35:51,079
useful and important and finally I'm

00:35:49,160 --> 00:35:52,369
this is actually predated my work at

00:35:51,079 --> 00:35:54,140
Intel and I've started integrating this

00:35:52,369 --> 00:35:54,980
stuff into my own personal work and

00:35:54,140 --> 00:35:58,579
openembedded

00:35:54,980 --> 00:36:01,579
I've been working with the TPM 1.2 for

00:35:58,579 --> 00:36:02,599
quite a while and you know 2.0 is the

00:36:01,579 --> 00:36:05,150
new stuff that I'm starting to integrate

00:36:02,599 --> 00:36:07,940
into a meta layer that I call meta

00:36:05,150 --> 00:36:10,339
measured this is a layer that sets up

00:36:07,940 --> 00:36:11,599
all the TPM infrastructure for you in a

00:36:10,339 --> 00:36:13,819
build so you can integrate this into

00:36:11,599 --> 00:36:15,710
your open embedded build I've got live

00:36:13,819 --> 00:36:18,500
images and in it our deeds that come out

00:36:15,710 --> 00:36:20,089
of this thing and I've got some grub

00:36:18,500 --> 00:36:20,900
patches as well that are integrated

00:36:20,089 --> 00:36:22,730
there hopefully they're going to be

00:36:20,900 --> 00:36:23,930
obsoleted by some work that's going

00:36:22,730 --> 00:36:26,299
upstream and what this does is that

00:36:23,930 --> 00:36:28,040
instruments grub in the UEFI environment

00:36:26,299 --> 00:36:29,630
at least to measure all the things

00:36:28,040 --> 00:36:31,609
relevant to the boot process before it

00:36:29,630 --> 00:36:35,150
hands off to the kernel this was a huge

00:36:31,609 --> 00:36:37,099
gap in in Linux systems previously for

00:36:35,150 --> 00:36:38,420
measure boots where all the firmware we

00:36:37,099 --> 00:36:40,040
do the measurements you get to the boot

00:36:38,420 --> 00:36:41,420
loader and it would all just kind of

00:36:40,040 --> 00:36:43,700
disappear because the boot loader would

00:36:41,420 --> 00:36:46,010
load you're in an RD loader kernel read

00:36:43,700 --> 00:36:47,540
a bunch of config files and then launch

00:36:46,010 --> 00:36:49,010
the kernel without ever measuring any of

00:36:47,540 --> 00:36:52,790
that stuff so these patches that are

00:36:49,010 --> 00:36:55,250
going upstream are intended to fix that

00:36:52,790 --> 00:36:56,630
problem and I've got a board Support

00:36:55,250 --> 00:36:58,910
Package for the middle board max that's

00:36:56,630 --> 00:37:01,849
out there now it turns on the TPM

00:36:58,910 --> 00:37:03,770
through using the machine feature which

00:37:01,849 --> 00:37:05,540
is you know kind of nice and I'm also

00:37:03,770 --> 00:37:07,760
working on getting this stuff working on

00:37:05,540 --> 00:37:10,730
an arm system so

00:37:07,760 --> 00:37:13,730
the Infineon actually sells an SPI TPM

00:37:10,730 --> 00:37:16,400
you can plug in to the Raspberry Pi and

00:37:13,730 --> 00:37:20,150
it talks to the Raspberry Pi over the

00:37:16,400 --> 00:37:21,590
SPI bus excuse me it doesn't have a

00:37:20,150 --> 00:37:22,400
fully instrumented measure boot so

00:37:21,590 --> 00:37:23,840
you're not going to get very many

00:37:22,400 --> 00:37:26,270
meaningful measurements out of your PC

00:37:23,840 --> 00:37:27,800
RS but you can do interesting stuff with

00:37:26,270 --> 00:37:28,540
the TPM once the system is up and

00:37:27,800 --> 00:37:31,280
running

00:37:28,540 --> 00:37:32,869
unfortunately there's still some work to

00:37:31,280 --> 00:37:34,250
be done a bit TSS to support big endian

00:37:32,869 --> 00:37:35,930
systems this is something that we and

00:37:34,250 --> 00:37:37,520
Intel do quite a bit of unfortunately

00:37:35,930 --> 00:37:41,990
but we assume the world is little-endian

00:37:37,520 --> 00:37:44,210
but in fact it's not and so you can't

00:37:41,990 --> 00:37:45,980
actually build the TSS right now for big

00:37:44,210 --> 00:37:47,900
endian systems but I've got some patches

00:37:45,980 --> 00:37:52,250
that are that I'm testing now to fix

00:37:47,900 --> 00:37:54,230
that problem so now we're making that

00:37:52,250 --> 00:37:55,640
kind of jump into two use cases and I

00:37:54,230 --> 00:37:58,010
was trying to come up with the simplest

00:37:55,640 --> 00:37:59,630
most concise use case that you don't

00:37:58,010 --> 00:38:01,250
have to do much work in order to benefit

00:37:59,630 --> 00:38:02,720
from having a TPM on your platform and

00:38:01,250 --> 00:38:03,920
I'm keeping in mind that kind of arm

00:38:02,720 --> 00:38:05,480
system where it's not really tightly

00:38:03,920 --> 00:38:06,770
integrated into the firmware but when

00:38:05,480 --> 00:38:08,359
you you know your kernel comes up

00:38:06,770 --> 00:38:11,900
there's a TPM there and it might make

00:38:08,359 --> 00:38:14,090
some use of it and so it turns out that

00:38:11,900 --> 00:38:15,590
random numbers and the quality of the

00:38:14,090 --> 00:38:18,080
random numbers on your system are really

00:38:15,590 --> 00:38:20,140
really really important when you're

00:38:18,080 --> 00:38:22,130
doing cryptographic operations and

00:38:20,140 --> 00:38:25,190
cryptographic operations really can just

00:38:22,130 --> 00:38:28,460
mean creating an ssl tunnel or setting

00:38:25,190 --> 00:38:29,780
up a VPN over you know like IPSec and so

00:38:28,460 --> 00:38:31,340
the more entropy you can have in your

00:38:29,780 --> 00:38:32,930
system the more randomness you can get

00:38:31,340 --> 00:38:34,850
in your system the better the keys that

00:38:32,930 --> 00:38:37,369
you generate for your sessions will be

00:38:34,850 --> 00:38:40,640
and so the TPM has its own random number

00:38:37,369 --> 00:38:43,040
generator but Linux has its own you know

00:38:40,640 --> 00:38:46,160
entropy source internally as well the

00:38:43,040 --> 00:38:48,710
the RNG tools that are out there exist

00:38:46,160 --> 00:38:50,750
so that you can take other randomness

00:38:48,710 --> 00:38:53,270
sources or other entropy sources and

00:38:50,750 --> 00:38:56,140
plug them into the kernels entropy pool

00:38:53,270 --> 00:38:58,190
and so you should never trust any one

00:38:56,140 --> 00:39:00,140
specific part of your system unless you

00:38:58,190 --> 00:39:02,119
have to and since you don't have to in

00:39:00,140 --> 00:39:03,740
this case now look you've got the kernel

00:39:02,119 --> 00:39:05,359
it's going to reach out to network ports

00:39:03,740 --> 00:39:07,220
it's going to look at all sorts of

00:39:05,359 --> 00:39:08,869
timing stuff in the kernel and generate

00:39:07,220 --> 00:39:11,300
entropy from that but you can also take

00:39:08,869 --> 00:39:13,190
the TPMS RNG and hook it in to that as

00:39:11,300 --> 00:39:14,540
well you don't actually have to trust

00:39:13,190 --> 00:39:16,460
either one of them but you can take the

00:39:14,540 --> 00:39:19,340
two of them together and the RNG tools

00:39:16,460 --> 00:39:21,349
will or rather you take the TPM RNG

00:39:19,340 --> 00:39:23,210
kernel module combine that with the RNG

00:39:21,349 --> 00:39:25,279
tools hook them together and you can add

00:39:23,210 --> 00:39:26,930
their entropy source from your ppm into

00:39:25,279 --> 00:39:28,609
your kernel you still get to read dev

00:39:26,930 --> 00:39:30,349
random or Debu random just like you

00:39:28,609 --> 00:39:32,479
normally would but you get the added

00:39:30,349 --> 00:39:35,210
benefit of an additional entropy source

00:39:32,479 --> 00:39:37,009
and so if you're embedded Linux system

00:39:35,210 --> 00:39:39,049
is hooking up to a VPN to talk to some

00:39:37,009 --> 00:39:41,809
kind of back-end or it's setting up SSL

00:39:39,049 --> 00:39:44,210
tunnels or doing HTTP or whatever that

00:39:41,809 --> 00:39:47,420
means that you can use the TPM for your

00:39:44,210 --> 00:39:49,460
your your asymmetric operations for

00:39:47,420 --> 00:39:51,049
doing the sign to do your DNA Hellman

00:39:49,460 --> 00:39:53,359
and Jake but you can also benefit from

00:39:51,049 --> 00:39:54,979
having a really good entropy source or a

00:39:53,359 --> 00:39:56,630
more varied entropy source to generate

00:39:54,979 --> 00:39:58,599
the session keys that are used over

00:39:56,630 --> 00:40:01,069
those potentially long-lived connections

00:39:58,599 --> 00:40:02,299
there's actually a whole handful of how

00:40:01,069 --> 00:40:04,069
to's that have been written up over the

00:40:02,299 --> 00:40:07,279
past three to five years for doing this

00:40:04,069 --> 00:40:08,749
and it's you know the it's the first

00:40:07,279 --> 00:40:10,249
thing you should set up on these systems

00:40:08,749 --> 00:40:11,690
and now as I was going back and

00:40:10,249 --> 00:40:14,420
researching this talk I realized I never

00:40:11,690 --> 00:40:16,160
set this up for my OE bills so my

00:40:14,420 --> 00:40:18,970
homework that I'm going to do as soon as

00:40:16,160 --> 00:40:21,710
I get back to to the bar with my laptop

00:40:18,970 --> 00:40:22,940
is to start working on getting this set

00:40:21,710 --> 00:40:24,920
up so that you know these things just

00:40:22,940 --> 00:40:26,660
happen out of the box when you integrate

00:40:24,920 --> 00:40:31,430
meta measured into your into your oh you

00:40:26,660 --> 00:40:33,380
build all right so similarly basic

00:40:31,430 --> 00:40:34,999
crypto operations is kind of the next

00:40:33,380 --> 00:40:37,130
step that you could go the next kind of

00:40:34,999 --> 00:40:39,289
level of effort this is the stuff we're

00:40:37,130 --> 00:40:42,140
actually interacting with the TPM using

00:40:39,289 --> 00:40:44,749
the system API but you can actually

00:40:42,140 --> 00:40:46,219
start an experiment using the TPM tools

00:40:44,749 --> 00:40:47,539
that are just the command-line tools

00:40:46,219 --> 00:40:51,380
that were distributing is open source

00:40:47,539 --> 00:40:52,670
and this guy here Davide he's a facebook

00:40:51,380 --> 00:40:53,180
engineer and he actually gave a talk at

00:40:52,670 --> 00:40:55,999
FOSDEM

00:40:53,180 --> 00:40:58,309
a couple weeks ago that talked or that

00:40:55,999 --> 00:41:00,650
walk through the steps necessary to

00:40:58,309 --> 00:41:03,349
create a signing key using the TPM tools

00:41:00,650 --> 00:41:06,739
that we have up on github how to sign

00:41:03,349 --> 00:41:08,329
something and how to then verify that

00:41:06,739 --> 00:41:10,339
signature outside of the TPM so the

00:41:08,329 --> 00:41:14,329
belief then is that you're on a platform

00:41:10,339 --> 00:41:16,910
that has a TPM you generate a public key

00:41:14,329 --> 00:41:18,769
and you sign some piece of data you

00:41:16,910 --> 00:41:20,059
export the public key that ends up on

00:41:18,769 --> 00:41:23,329
some other system that may not have a

00:41:20,059 --> 00:41:25,190
TPM and so you can extract and transform

00:41:23,329 --> 00:41:26,660
the TPM key into something that OpenSSL

00:41:25,190 --> 00:41:28,609
understands and then verify the

00:41:26,660 --> 00:41:30,349
signature this is where you start to

00:41:28,609 --> 00:41:34,200
butt up against some of the weirdness of

00:41:30,349 --> 00:41:37,349
the TPM so the TPM has this

00:41:34,200 --> 00:41:38,880
notion of the EK which is very much

00:41:37,349 --> 00:41:41,550
something that can is the key that

00:41:38,880 --> 00:41:43,290
actually identifies the platform and so

00:41:41,550 --> 00:41:45,150
the TPM will not allow this key to be

00:41:43,290 --> 00:41:46,890
used to sign any information because

00:41:45,150 --> 00:41:48,690
that ties the signed information

00:41:46,890 --> 00:41:50,520
directly back to the platform and you

00:41:48,690 --> 00:41:52,020
lose anonymity there so underneath the

00:41:50,520 --> 00:41:53,880
ek you actually build these kind of

00:41:52,020 --> 00:41:55,650
hierarchies of keys you can create

00:41:53,880 --> 00:41:57,390
what's called an attestation key that

00:41:55,650 --> 00:41:58,650
you can use for that the temporary key

00:41:57,390 --> 00:42:00,540
and you can generate as many as you want

00:41:58,650 --> 00:42:02,040
destroy them as you see fit you could

00:42:00,540 --> 00:42:03,869
use them as one-time-only keys if you

00:42:02,040 --> 00:42:05,790
want and they can be used to sign any

00:42:03,869 --> 00:42:07,410
amount of information and so then we

00:42:05,790 --> 00:42:09,300
have these these four commands here that

00:42:07,410 --> 00:42:11,940
I've listed out that describe the the

00:42:09,300 --> 00:42:13,440
hashing process and so Davide actually I

00:42:11,940 --> 00:42:15,570
think he created this word press

00:42:13,440 --> 00:42:19,290
specifically to write this one out too

00:42:15,570 --> 00:42:22,859
that's the only blog in his blog so you

00:42:19,290 --> 00:42:24,660
know even if he if he took the the time

00:42:22,859 --> 00:42:26,640
to create a blog to write one blog post

00:42:24,660 --> 00:42:30,420
I think this is one blog post worth

00:42:26,640 --> 00:42:31,920
reading and finally you know as I'm

00:42:30,420 --> 00:42:34,070
getting up close to the five minute mark

00:42:31,920 --> 00:42:37,020
this last this last use case is really

00:42:34,070 --> 00:42:38,760
one that is really interesting and

00:42:37,020 --> 00:42:41,670
compelling if you have a system where

00:42:38,760 --> 00:42:44,609
the measure launches is very very well

00:42:41,670 --> 00:42:46,650
developed and this is uses some of the

00:42:44,609 --> 00:42:49,079
higher level functions with TPM and what

00:42:46,650 --> 00:42:50,640
we call TPM policies key usage policies

00:42:49,079 --> 00:42:54,660
and this is actually what Microsoft

00:42:50,640 --> 00:42:56,730
BitLocker uses in Windows to to to allow

00:42:54,660 --> 00:42:58,770
access to the disk crypto key so as the

00:42:56,730 --> 00:43:00,300
system comes up what happens is this

00:42:58,770 --> 00:43:02,280
whole matter launch process happens and

00:43:00,300 --> 00:43:04,170
you end up with the PCR is populated

00:43:02,280 --> 00:43:05,819
with the information that describes the

00:43:04,170 --> 00:43:08,010
software on the system you can then

00:43:05,819 --> 00:43:11,069
create a key and bind the usage of that

00:43:08,010 --> 00:43:12,780
key to the state of those PCR values so

00:43:11,069 --> 00:43:14,880
that if someone changes your firmware

00:43:12,780 --> 00:43:17,069
changes some of your low-level system

00:43:14,880 --> 00:43:18,839
software that key will no longer be

00:43:17,069 --> 00:43:19,890
usable because the PCR values will be

00:43:18,839 --> 00:43:22,800
different and you won't be able to

00:43:19,890 --> 00:43:25,290
satisfy the policy and so BitLocker uses

00:43:22,800 --> 00:43:27,300
this as a way to to bind their their

00:43:25,290 --> 00:43:29,160
hard disk crypto keys to the state of

00:43:27,300 --> 00:43:30,450
the platform similarly a project I

00:43:29,160 --> 00:43:32,430
worked on in a past life that we call

00:43:30,450 --> 00:43:35,640
open XT which is a kind of a

00:43:32,430 --> 00:43:37,890
virtualization system that uses Zen and

00:43:35,640 --> 00:43:39,540
a whole bunch of kind of platform

00:43:37,890 --> 00:43:42,530
security properties uses the same

00:43:39,540 --> 00:43:45,380
mechanism for sealing

00:43:42,530 --> 00:43:47,240
cryptokeys for a Lux volume where all of

00:43:45,380 --> 00:43:48,170
the the configuration information for

00:43:47,240 --> 00:43:50,450
that system resides

00:43:48,170 --> 00:43:52,070
so someone tampers with the system it'll

00:43:50,450 --> 00:43:53,690
boot up but then it'll say I can't get

00:43:52,070 --> 00:43:55,610
access to this key because the PC RS

00:43:53,690 --> 00:43:57,500
don't match what the system expected and

00:43:55,610 --> 00:44:00,770
therefore the TPM won't release this key

00:43:57,500 --> 00:44:02,180
to me and so this is a particularly

00:44:00,770 --> 00:44:04,670
powerful tool and something that's

00:44:02,180 --> 00:44:05,870
that's extremely useful when you're when

00:44:04,670 --> 00:44:07,550
you're building these types of systems

00:44:05,870 --> 00:44:09,380
if you want to have a really good

00:44:07,550 --> 00:44:11,480
assurance that the integrity state of

00:44:09,380 --> 00:44:15,320
the platform is what you expect it to be

00:44:11,480 --> 00:44:16,250
so a couple of shout outs to some

00:44:15,320 --> 00:44:17,570
friends that helped me put this together

00:44:16,250 --> 00:44:19,040
some of the folks I'm working with in

00:44:17,570 --> 00:44:20,150
the TCG i've only been working with the

00:44:19,040 --> 00:44:22,700
trusty competing group for a couple

00:44:20,150 --> 00:44:24,650
months but these folks have been super

00:44:22,700 --> 00:44:26,810
helpful and bringing me up to speed

00:44:24,650 --> 00:44:27,830
and and you know getting me to a point

00:44:26,810 --> 00:44:29,240
where i'm actually contributing to the

00:44:27,830 --> 00:44:30,710
spec so that's been particularly helpful

00:44:29,240 --> 00:44:32,510
and I got a couple folks here at the

00:44:30,710 --> 00:44:34,520
bottom bill and Imran who I've been

00:44:32,510 --> 00:44:35,870
working with an Intel to kind of build

00:44:34,520 --> 00:44:39,020
up a team of people that are supporting

00:44:35,870 --> 00:44:40,670
this project so just I can't thank them

00:44:39,020 --> 00:44:42,470
enough for the contributions they've

00:44:40,670 --> 00:44:45,290
made and how much they make me look like

00:44:42,470 --> 00:44:47,660
I know what I'm doing so many thanks to

00:44:45,290 --> 00:44:48,230
them if they're watching the video and

00:44:47,660 --> 00:44:49,610
that's it

00:44:48,230 --> 00:44:51,710
we've got five minutes left on the

00:44:49,610 --> 00:44:53,930
countdown timer here almost exactly if

00:44:51,710 --> 00:44:55,910
anyone has any questions happy to answer

00:44:53,930 --> 00:44:56,900
them can take them offline if you want

00:44:55,910 --> 00:44:59,120
if you don't want to ask him here but

00:44:56,900 --> 00:45:01,310
I'll be floating around all week if you

00:44:59,120 --> 00:45:02,810
want to learn more about TPMS systems

00:45:01,310 --> 00:45:07,270
where they're integrated and how you can

00:45:02,810 --> 00:45:07,270
use them you sir

00:45:23,079 --> 00:45:27,710
okay so the question was how much of

00:45:25,160 --> 00:45:29,510
this is specific to Intel platforms how

00:45:27,710 --> 00:45:31,760
much of it will work on arm platforms

00:45:29,510 --> 00:45:33,470
and specifically I guess a lot of the

00:45:31,760 --> 00:45:35,930
arm manufacturers have bought into the

00:45:33,470 --> 00:45:37,310
the global platform initiative I think

00:45:35,930 --> 00:45:40,310
is what it's called that's largely a

00:45:37,310 --> 00:45:41,480
competitor for the TCG so I don't

00:45:40,310 --> 00:45:43,609
necessarily know you'll ever see them

00:45:41,480 --> 00:45:46,880
both residing on the same platform but

00:45:43,609 --> 00:45:47,960
really the TPM is you know of our

00:45:46,880 --> 00:45:50,960
physical chip or something that can be

00:45:47,960 --> 00:45:53,030
implemented in an SOC so that's pretty

00:45:50,960 --> 00:45:54,800
much you know can be realized on either

00:45:53,030 --> 00:45:56,480
part of the system the software stack

00:45:54,800 --> 00:45:58,099
that I was talking about should be

00:45:56,480 --> 00:46:00,230
portable between the two now I point out

00:45:58,099 --> 00:46:01,609
that it's not and I'm trying to work in

00:46:00,230 --> 00:46:04,760
to fix that and my goal is to have that

00:46:01,609 --> 00:46:07,069
fixed pretty quickly but as far as the

00:46:04,760 --> 00:46:09,079
global platform versus TCG thing goes I

00:46:07,069 --> 00:46:09,859
mean they're meant to achieve similar

00:46:09,079 --> 00:46:11,180
goals

00:46:09,859 --> 00:46:12,950
I really don't know enough about the

00:46:11,180 --> 00:46:14,960
global platform initiative to say either

00:46:12,950 --> 00:46:16,640
way but from what I understand they're

00:46:14,960 --> 00:46:19,369
largely now kind of competing against

00:46:16,640 --> 00:46:21,380
each other so I imagine you could

00:46:19,369 --> 00:46:24,849
probably implement a system that could

00:46:21,380 --> 00:46:26,990
use either or depending on how much of

00:46:24,849 --> 00:46:28,250
well depending on which platform

00:46:26,990 --> 00:46:30,440
features you're using so things like

00:46:28,250 --> 00:46:31,819
platform configuration registers I don't

00:46:30,440 --> 00:46:34,069
know how much measure boot stuff the

00:46:31,819 --> 00:46:35,180
global platform Edition it does so there

00:46:34,069 --> 00:46:36,710
may be some parts that aren't but

00:46:35,180 --> 00:46:39,230
generally you should be able to take a

00:46:36,710 --> 00:46:40,940
TPM integrate it into an arm system and

00:46:39,230 --> 00:46:46,780
use it just like you would on an x86

00:46:40,940 --> 00:46:46,780
system it's not another hand back there

00:46:47,920 --> 00:46:53,660
it's actually a daughter card so the the

00:46:50,869 --> 00:46:55,999
Raspberry Pi has like that block of the

00:46:53,660 --> 00:46:59,539
14 pins on there something it exposes

00:46:55,999 --> 00:47:00,709
the I squared C SPI bus and Infineon

00:46:59,539 --> 00:47:02,150
actually provides that in a daughter

00:47:00,709 --> 00:47:04,160
card that just plugs right into the top

00:47:02,150 --> 00:47:05,420
of it they haven't got to the point

00:47:04,160 --> 00:47:07,400
where you can just like you know call up

00:47:05,420 --> 00:47:09,619
fries and buy one or get a one off new

00:47:07,400 --> 00:47:11,239
egg but this is kind of a supply demand

00:47:09,619 --> 00:47:12,709
problem where there you know that you

00:47:11,239 --> 00:47:14,209
can't just go order one because no one

00:47:12,709 --> 00:47:16,009
really wants to go order one as far as I

00:47:14,209 --> 00:47:17,119
can tell so if you show up and you start

00:47:16,009 --> 00:47:19,640
banging on the door saying hey I want to

00:47:17,119 --> 00:47:21,650
buy this stuff that might actually help

00:47:19,640 --> 00:47:24,529
out so if you know an infinite rep or

00:47:21,650 --> 00:47:25,729
really any TPI manufacturer if you can

00:47:24,529 --> 00:47:30,079
convince them you actually want to do

00:47:25,729 --> 00:47:31,579
something meaningful with this so the

00:47:30,079 --> 00:47:33,890
quote yeah whether or not it's on

00:47:31,579 --> 00:47:35,119
digi-key you can actually buy TPMS on

00:47:33,890 --> 00:47:37,069
juju key but I've only ever been able to

00:47:35,119 --> 00:47:38,569
find one point twos in the Atmel ones

00:47:37,069 --> 00:47:40,249
that were on the I squared C bus i

00:47:38,569 --> 00:47:41,809
actually soldered some of the hose onto

00:47:40,249 --> 00:47:44,059
some boards to make them work and you

00:47:41,809 --> 00:47:47,749
can I actually made one work on a an

00:47:44,059 --> 00:47:50,059
Intel Edison board but you know it's as

00:47:47,749 --> 00:47:52,130
we same until it's been blue wired like

00:47:50,059 --> 00:47:53,839
I soldered the thing and had wires

00:47:52,130 --> 00:47:55,099
hanging off of it and if you poked it

00:47:53,839 --> 00:47:56,390
the wrong way it would you know it

00:47:55,099 --> 00:47:58,309
shorted out

00:47:56,390 --> 00:47:59,089
but from what I understand actually it

00:47:58,309 --> 00:48:00,019
someone to reach out to me recently

00:47:59,089 --> 00:48:02,479
there are some people that are actually

00:48:00,019 --> 00:48:04,099
making arm systems that have TPMS that

00:48:02,479 --> 00:48:06,380
are actually on the board itself so I'm

00:48:04,099 --> 00:48:08,269
hopeful that that will start seeing this

00:48:06,380 --> 00:48:14,619
kind of a more general availability soon

00:48:08,269 --> 00:48:14,619
oh one right there

00:48:25,450 --> 00:48:30,460
right so the question there was a notice

00:48:28,420 --> 00:48:32,349
that or rather a note that there is

00:48:30,460 --> 00:48:35,079
something called secure boot in UEFI

00:48:32,349 --> 00:48:38,140
that has a word in common with my rogue

00:48:35,079 --> 00:48:40,799
boot so secure boot is actually a

00:48:38,140 --> 00:48:44,290
signature checking scheme there's a

00:48:40,799 --> 00:48:46,930
database in the efi of keys and in

00:48:44,290 --> 00:48:49,240
secure boot environment the UEFI will

00:48:46,930 --> 00:48:49,930
actually refuse to transfer control to a

00:48:49,240 --> 00:48:51,549
bootloader

00:48:49,930 --> 00:48:53,349
that hasn't been signed with a key

00:48:51,549 --> 00:48:54,910
that's in that database so this is

00:48:53,349 --> 00:48:58,000
completely different for measuring boot

00:48:54,910 --> 00:48:59,530
like 100 percent so secure boot is

00:48:58,000 --> 00:49:00,970
actually an enforcement mechanism it

00:48:59,530 --> 00:49:02,410
checks a signature and then refuses

00:49:00,970 --> 00:49:04,720
transfer control if the signature

00:49:02,410 --> 00:49:06,579
doesn't check we're measure boot is 100

00:49:04,720 --> 00:49:08,890
percent passive the system will boot as

00:49:06,579 --> 00:49:10,660
it is but anything that's deviated from

00:49:08,890 --> 00:49:12,280
what's expected will just be recorded

00:49:10,660 --> 00:49:13,900
but there won't be any enforcement

00:49:12,280 --> 00:49:16,180
mechanism but to can actually live side

00:49:13,900 --> 00:49:18,369
by side very easily since one is so

00:49:16,180 --> 00:49:21,930
incredibly passive so you can have these

00:49:18,369 --> 00:49:21,930
two things exist very much together

00:49:30,279 --> 00:49:34,369
so the follow-up was whether or not

00:49:32,630 --> 00:49:37,219
these would need to be integrated into a

00:49:34,369 --> 00:49:41,859
single bootloader I'm not entirely sure

00:49:37,219 --> 00:49:45,259
that I know the answer that exactly so

00:49:41,859 --> 00:49:46,579
yes and no I mean you really ideally you

00:49:45,259 --> 00:49:49,849
wouldn't have to ideally would just be

00:49:46,579 --> 00:49:51,140
done for you so the the secure boot

00:49:49,849 --> 00:49:53,029
stuff you don't ever actually write any

00:49:51,140 --> 00:49:53,989
code implement secure boot you just make

00:49:53,029 --> 00:49:55,339
sure that whatever it is you're

00:49:53,989 --> 00:49:58,669
launching has the right signature on it

00:49:55,339 --> 00:50:00,469
and the the corresponding public key for

00:49:58,669 --> 00:50:04,429
the private part that did the signing is

00:50:00,469 --> 00:50:05,839
in your key database similarly if the

00:50:04,429 --> 00:50:07,339
bootloader is instrumented properly and

00:50:05,839 --> 00:50:09,380
these these patches do go upstream into

00:50:07,339 --> 00:50:11,089
grub then you'll never actually have to

00:50:09,380 --> 00:50:14,449
touch it it'll just work out of the box

00:50:11,089 --> 00:50:15,529
so ideally no but currently yes you

00:50:14,449 --> 00:50:17,779
would actually need to do a bit of work

00:50:15,529 --> 00:50:21,429
to patch grub and to set up your you

00:50:17,779 --> 00:50:21,429
know your your secure boot environment

00:50:21,789 --> 00:50:25,809
yes the handsome man down front

00:50:35,349 --> 00:50:40,549
yes so if our demo works tomorrow there

00:50:38,179 --> 00:50:43,309
will be a demo that shows a measure of

00:50:40,549 --> 00:50:45,589
launch functioning using the technology

00:50:43,309 --> 00:50:47,209
I was just describing so if you're

00:50:45,589 --> 00:50:48,890
hanging around and you want to go

00:50:47,209 --> 00:50:52,219
through the demo area you'll see me

00:50:48,890 --> 00:50:54,529
there hopefully and hopefully you'll see

00:50:52,219 --> 00:50:56,539
a functional demo as well no guarantees

00:50:54,529 --> 00:50:59,539
the worst case scenario will talk your

00:50:56,539 --> 00:51:04,729
ear off about this stuff just trying to

00:50:59,539 --> 00:51:05,959
set expectations well alright well if

00:51:04,729 --> 00:51:07,669
there's nothing else thanks for coming

00:51:05,959 --> 00:51:14,049
out I really appreciate you filling this

00:51:07,669 --> 00:51:14,049

YouTube URL: https://www.youtube.com/watch?v=0qu9R7Tlw9o


