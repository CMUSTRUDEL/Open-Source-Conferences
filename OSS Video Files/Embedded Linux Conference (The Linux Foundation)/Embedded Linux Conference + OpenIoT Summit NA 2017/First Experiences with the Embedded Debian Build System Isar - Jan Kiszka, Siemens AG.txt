Title: First Experiences with the Embedded Debian Build System Isar - Jan Kiszka, Siemens AG
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	First Experiences with the Embedded Debian Build System Isar - Jan Kiszka, Siemens AG

In some of our embedded projects, we are using Debian as the basis. In others, Yocto with its Poky distribution is the basis. Isar promises to combined the best of both: the layered, extensible, reusable set of image generation rules (bitbake) with the a mature, long-term maintained, pre-built, feature-rich distribution (Debian).

In this talk, we will present our first experiences with isar while creating a bootable image for a target device. We will look into standard tasks like defining the package set or defining partitions and file systems. We will also present how we integrated a custom boot loader and performed various customizations. This will provide a first impressions about possible workflows with isar, its strengths but also its to-dos.

About Jan Kiszka
Jan Kiszka is working as consultant and senior software engineer in the Competence Center for Embedded Linux at Siemens Corporate Technology. He is supporting Siemens sectors with adapting and enhancing open source as platform for their products. For customer projects and whenever his spare time permits, he is contributing to open source projects, specifically in the area of real-time and virtualization.
Captions: 
	00:00:00,030 --> 00:00:08,160
so welcome everyone to my talk about yet

00:00:05,730 --> 00:00:11,519
another build systems for embedded

00:00:08,160 --> 00:00:14,429
systems so this talk is going to be a

00:00:11,519 --> 00:00:17,369
little bit of mixture of looking at it

00:00:14,429 --> 00:00:19,890
from a user perspective which we did and

00:00:17,369 --> 00:00:21,660
are still doing but also a little bit

00:00:19,890 --> 00:00:27,660
about promoting it because we also

00:00:21,660 --> 00:00:30,359
interested this thing is working so this

00:00:27,660 --> 00:00:32,430
is graph is a structure of my talk well

00:00:30,359 --> 00:00:34,860
I'm going to explain of course first of

00:00:32,430 --> 00:00:37,140
all what why we are doing yet another

00:00:34,860 --> 00:00:40,230
build systems a build system for better

00:00:37,140 --> 00:00:43,079
devices would like to introduce you to

00:00:40,230 --> 00:00:45,180
this system called either icer in

00:00:43,079 --> 00:00:48,989
english but either you know why they

00:00:45,180 --> 00:00:50,879
don't present you a little bit first

00:00:48,989 --> 00:00:53,190
steps how to get running with it and

00:00:50,879 --> 00:00:54,570
then look into the customizations that

00:00:53,190 --> 00:00:56,640
you usually do if you build your own

00:00:54,570 --> 00:00:58,910
embedded system and how these could be

00:00:56,640 --> 00:01:01,859
done in Anisa

00:00:58,910 --> 00:01:03,799
well derive some two deuce for this

00:01:01,859 --> 00:01:09,390
project for MIT and given a outlook and

00:01:03,799 --> 00:01:11,100
summarize the talk so if you look at the

00:01:09,390 --> 00:01:14,369
embedded systems how they are being

00:01:11,100 --> 00:01:16,320
built out of their their inputs these

00:01:14,369 --> 00:01:19,110
days they're basically ball would say

00:01:16,320 --> 00:01:21,479
two directions one is this roll your own

00:01:19,110 --> 00:01:24,450
thing I'm doing it out of source tree

00:01:21,479 --> 00:01:25,770
sort of the sources like open betas to

00:01:24,450 --> 00:01:29,009
in lock you up to is to enact built

00:01:25,770 --> 00:01:32,280
route and you can extend the list very

00:01:29,009 --> 00:01:34,500
long and that usually implies that

00:01:32,280 --> 00:01:36,630
you're doing cross builds if you're

00:01:34,500 --> 00:01:37,350
targeting a different architecture but

00:01:36,630 --> 00:01:39,210
even if you're doing the same

00:01:37,350 --> 00:01:41,369
architecture you may have a need to

00:01:39,210 --> 00:01:42,990
cross built because your tool chain may

00:01:41,369 --> 00:01:45,780
differ so often the tool chain would

00:01:42,990 --> 00:01:49,259
strip is included it gives you a high

00:01:45,780 --> 00:01:54,149
flexibility regarding the customization

00:01:49,259 --> 00:01:56,280
of your system of course but if you look

00:01:54,149 --> 00:01:58,320
at the increasingly complex systems we

00:01:56,280 --> 00:02:00,540
have these days which are making more

00:01:58,320 --> 00:02:03,119
and more closer to two desktops and an

00:02:00,540 --> 00:02:05,670
server installations and the production

00:02:03,119 --> 00:02:08,039
times of course also go up significantly

00:02:05,670 --> 00:02:11,280
because you build everything from source

00:02:08,039 --> 00:02:13,740
code and also one thing people tend to

00:02:11,280 --> 00:02:15,900
forget what what the experts

00:02:13,740 --> 00:02:17,670
if you have is of course still a certain

00:02:15,900 --> 00:02:19,410
dependency on your host system on your

00:02:17,670 --> 00:02:21,000
build system where you're running on so

00:02:19,410 --> 00:02:25,260
it doesn't solve the problem of this as

00:02:21,000 --> 00:02:28,200
well and then there are more and more

00:02:25,260 --> 00:02:29,550
embedded based and bear based systems

00:02:28,200 --> 00:02:33,870
for embedded devices these days

00:02:29,550 --> 00:02:36,150
disillusion based based systems so their

00:02:33,870 --> 00:02:38,490
approach is basically to take what we

00:02:36,150 --> 00:02:41,010
have already the ecosystems from the

00:02:38,490 --> 00:02:43,380
desktop from the server area and and use

00:02:41,010 --> 00:02:45,630
the distributions established there try

00:02:43,380 --> 00:02:47,460
to fit them into embedded devices that's

00:02:45,630 --> 00:02:50,460
getting more and more easier with the

00:02:47,460 --> 00:02:52,320
standardization of the hardware and it's

00:02:50,460 --> 00:02:54,780
actually not that that new and to say

00:02:52,320 --> 00:02:57,120
well if you look at the list here there

00:02:54,780 --> 00:03:00,300
are many of these systems what happens

00:02:57,120 --> 00:03:01,860
districts are a bit older like LB but

00:03:00,300 --> 00:03:03,510
also the distributions realized these

00:03:01,860 --> 00:03:06,210
days that they could scale down if you

00:03:03,510 --> 00:03:07,620
think of IOT scenarios there's more and

00:03:06,210 --> 00:03:09,720
more interest in enabling these

00:03:07,620 --> 00:03:12,660
distributions to go for a smaller

00:03:09,720 --> 00:03:15,960
devices all small may vary but yeah

00:03:12,660 --> 00:03:17,730
there's a trends we'll say so the idea

00:03:15,960 --> 00:03:20,520
is to install from pre-built binaries

00:03:17,730 --> 00:03:23,430
not build everything from source that

00:03:20,520 --> 00:03:25,500
may lead of course to larger images that

00:03:23,430 --> 00:03:28,620
may mean that you have a slower boot

00:03:25,500 --> 00:03:30,870
time unless you applies customizations

00:03:28,620 --> 00:03:32,370
again so mix are doing some kind of

00:03:30,870 --> 00:03:36,330
post-processing on the normal

00:03:32,370 --> 00:03:38,520
distribution installation between both

00:03:36,330 --> 00:03:41,540
there's something like a hybrid solution

00:03:38,520 --> 00:03:44,280
hybrid approach interestingly it's

00:03:41,540 --> 00:03:45,480
representing media Debian here maybe

00:03:44,280 --> 00:03:47,940
there are some others but this is

00:03:45,480 --> 00:03:51,750
basically what I'm aware of that uses

00:03:47,940 --> 00:03:55,080
distribution packages in their source

00:03:51,750 --> 00:03:57,450
form but we built them using a classic

00:03:55,080 --> 00:04:00,230
mia from source distribution building

00:03:57,450 --> 00:04:03,630
system like like you up to in this case

00:04:00,230 --> 00:04:06,390
wall so they try to combine benefit from

00:04:03,630 --> 00:04:07,920
both sources but of course they also

00:04:06,390 --> 00:04:09,570
have some downside that means for

00:04:07,920 --> 00:04:12,570
example you have to write your own

00:04:09,570 --> 00:04:18,239
recipes in this case to import these

00:04:12,570 --> 00:04:20,760
resources so if you look at what what we

00:04:18,239 --> 00:04:22,710
really need I would say this is some

00:04:20,760 --> 00:04:26,700
kind of list of general requirements on

00:04:22,710 --> 00:04:27,370
embedded system builders so in the end

00:04:26,700 --> 00:04:30,370
you

00:04:27,370 --> 00:04:32,949
to have some ready-to-use image for your

00:04:30,370 --> 00:04:35,260
device maybe on an SD card maybe

00:04:32,949 --> 00:04:37,389
flashable directly into the internal

00:04:35,260 --> 00:04:39,430
flash or something like this you want to

00:04:37,389 --> 00:04:41,320
have this done in one step more or less

00:04:39,430 --> 00:04:43,690
or at least the output should be ready

00:04:41,320 --> 00:04:44,830
and not really like you have for example

00:04:43,690 --> 00:04:46,479
with some server systems where you have

00:04:44,830 --> 00:04:48,340
to do some post-processing on the device

00:04:46,479 --> 00:04:50,979
that's something that you can replicate

00:04:48,340 --> 00:04:52,750
easily that you can then deploy in your

00:04:50,979 --> 00:04:57,310
production phase to your embedded device

00:04:52,750 --> 00:04:59,440
and be done with it well it has to be

00:04:57,310 --> 00:05:01,960
reproducible naturally if you are doing

00:04:59,440 --> 00:05:03,220
this professionally and you want to have

00:05:01,960 --> 00:05:05,289
to replicate it all you have to

00:05:03,220 --> 00:05:07,210
replicate the results you have to be

00:05:05,289 --> 00:05:10,389
able to reproduce the results after a

00:05:07,210 --> 00:05:12,729
longer period for us often it's could be

00:05:10,389 --> 00:05:14,560
a decade or even longer but you have to

00:05:12,729 --> 00:05:18,360
be able to reproduce what you've done

00:05:14,560 --> 00:05:20,740
before in the past you have to integrate

00:05:18,360 --> 00:05:22,810
further sources not just from this

00:05:20,740 --> 00:05:25,120
distribution well it's real life you

00:05:22,810 --> 00:05:26,800
have your business logic so yeah your

00:05:25,120 --> 00:05:28,750
own application possibly running on this

00:05:26,800 --> 00:05:30,160
you have third parties coming in not

00:05:28,750 --> 00:05:34,510
everything comes from this one source

00:05:30,160 --> 00:05:36,370
and well if you look at our domain what

00:05:34,510 --> 00:05:39,010
we usually don't do just one device we

00:05:36,370 --> 00:05:41,349
do many they are similar and they have

00:05:39,010 --> 00:05:43,800
some overlap so you have to deal with

00:05:41,349 --> 00:05:45,639
something like the similarity in these

00:05:43,800 --> 00:05:47,200
devices you don't want to do everything

00:05:45,639 --> 00:05:50,020
from scratch over and over again so

00:05:47,200 --> 00:05:52,000
product line development reusable

00:05:50,020 --> 00:05:55,240
components and also configuration

00:05:52,000 --> 00:05:56,979
artifacts it's yeah one go for this and

00:05:55,240 --> 00:05:59,229
in the end you of course yeah you want

00:05:56,979 --> 00:06:01,660
to have a quick bootstrap food

00:05:59,229 --> 00:06:03,160
QuickStart for your beginner developers

00:06:01,660 --> 00:06:04,720
on this so what you have to deal with it

00:06:03,160 --> 00:06:06,430
but it also has to be powerful

00:06:04,720 --> 00:06:10,590
extensible for those the experts and

00:06:06,430 --> 00:06:13,479
doing a real complex product out of it

00:06:10,590 --> 00:06:15,250
we specifically Siemens has some

00:06:13,479 --> 00:06:17,080
additional requirements but I guess they

00:06:15,250 --> 00:06:21,250
also share to some other companies as

00:06:17,080 --> 00:06:23,919
well it turns out that we really would

00:06:21,250 --> 00:06:27,340
like on a long run to avoid building

00:06:23,919 --> 00:06:29,650
everything from sauce well there is

00:06:27,340 --> 00:06:32,979
already a pool of pre-built packages

00:06:29,650 --> 00:06:34,690
available and we want to reuse them as

00:06:32,979 --> 00:06:36,099
far as possible because one of the

00:06:34,690 --> 00:06:39,190
things that you lose if you do

00:06:36,099 --> 00:06:40,830
everything from source yourself you use

00:06:39,190 --> 00:06:43,110
the the QA that apps

00:06:40,830 --> 00:06:45,570
dream distributions already did on their

00:06:43,110 --> 00:06:47,160
packages you can easily lose them

00:06:45,570 --> 00:06:49,140
because you just very little bit on your

00:06:47,160 --> 00:06:51,240
YouTube chain on your build process and

00:06:49,140 --> 00:06:52,710
everything so you get basically you come

00:06:51,240 --> 00:06:54,900
up with your own distribution yes and

00:06:52,710 --> 00:06:56,760
that's an advantage but it's often also

00:06:54,900 --> 00:07:00,510
disadvantages from the QA perspective it

00:06:56,760 --> 00:07:02,340
can be disadvantage yeah and as our

00:07:00,510 --> 00:07:04,290
systems are increasingly getting

00:07:02,340 --> 00:07:06,210
increasingly complex the requirements

00:07:04,290 --> 00:07:08,970
the features that they would include

00:07:06,210 --> 00:07:10,740
also the the number of packages the

00:07:08,970 --> 00:07:13,920
dependency that they pull in also

00:07:10,740 --> 00:07:16,590
increase so a simple system can already

00:07:13,920 --> 00:07:19,860
contain a few hundred packages or even

00:07:16,590 --> 00:07:22,080
up to well some thousand packages so

00:07:19,860 --> 00:07:24,360
this is something which goes bigger and

00:07:22,080 --> 00:07:26,100
bigger if you look at what what kind of

00:07:24,360 --> 00:07:28,560
components you pull in from the server

00:07:26,100 --> 00:07:30,810
from the mobile development and things

00:07:28,560 --> 00:07:33,510
like this yeah it's just it's just

00:07:30,810 --> 00:07:35,610
counting basically and eventually you

00:07:33,510 --> 00:07:39,870
will have longer and longer production

00:07:35,610 --> 00:07:42,690
times for your system furthermore as we

00:07:39,870 --> 00:07:45,120
are the markets where we have to support

00:07:42,690 --> 00:07:47,340
the products for a very long time as I

00:07:45,120 --> 00:07:50,340
mentioned this 10 years is just the the

00:07:47,340 --> 00:07:52,770
lower bound so to say we want to use

00:07:50,340 --> 00:07:54,060
more of the established long term

00:07:52,770 --> 00:07:56,040
maintenance process that exists

00:07:54,060 --> 00:07:58,430
typically with distributions which are

00:07:56,040 --> 00:08:00,990
not that common yet for the source based

00:07:58,430 --> 00:08:02,310
distribution Builders often because well

00:08:00,990 --> 00:08:03,360
they can't really handle all the

00:08:02,310 --> 00:08:07,170
variation that you could build out of

00:08:03,360 --> 00:08:11,010
this and last but not least also very

00:08:07,170 --> 00:08:13,130
important for us is the the license

00:08:11,010 --> 00:08:15,480
compliance sources license compliance

00:08:13,130 --> 00:08:17,460
that means that you follow the

00:08:15,480 --> 00:08:19,260
obligation that the open-source license

00:08:17,460 --> 00:08:20,370
is put on you and that of course means

00:08:19,260 --> 00:08:23,160
you have to first understand what

00:08:20,370 --> 00:08:24,630
licenses actually are involved and often

00:08:23,160 --> 00:08:26,190
that's not that trivial just by looking

00:08:24,630 --> 00:08:28,020
at the package and looking at the

00:08:26,190 --> 00:08:30,690
top-level copying file that may reflect

00:08:28,020 --> 00:08:33,210
the truth but it may also be only part

00:08:30,690 --> 00:08:36,600
of the truth and that's also very

00:08:33,210 --> 00:08:38,670
important that you have a source from

00:08:36,600 --> 00:08:40,380
upstream from your distribution or

00:08:38,670 --> 00:08:42,810
wherever it comes from where this kind

00:08:40,380 --> 00:08:45,180
of information has been gathered very

00:08:42,810 --> 00:08:46,650
carefully already and you can you can

00:08:45,180 --> 00:08:51,090
build on this and don't have to do the

00:08:46,650 --> 00:08:53,190
work okay so if we want to build on top

00:08:51,090 --> 00:08:54,610
of a distribution the question is of

00:08:53,190 --> 00:08:56,320
course which one to pick

00:08:54,610 --> 00:08:58,930
and that's a little bit like which

00:08:56,320 --> 00:09:00,850
editor to pick so we can discuss about a

00:08:58,930 --> 00:09:04,200
lot of these things but let's say okay

00:09:00,850 --> 00:09:07,899
we picked one for the time being that's

00:09:04,200 --> 00:09:10,899
debian and well that doesn't mean that

00:09:07,899 --> 00:09:12,459
others are bad or have cannot fulfill

00:09:10,899 --> 00:09:15,490
all these requirements as well but this

00:09:12,459 --> 00:09:18,250
is simply just a way to go for our why

00:09:15,490 --> 00:09:20,019
debian well first of all is a large

00:09:18,250 --> 00:09:21,940
community different ecosystem very

00:09:20,019 --> 00:09:26,110
established has proven to be there and

00:09:21,940 --> 00:09:28,000
stay there it's it's increasingly

00:09:26,110 --> 00:09:30,370
popular embedded as well so if you look

00:09:28,000 --> 00:09:33,070
at well of the recipes but also others

00:09:30,370 --> 00:09:35,079
like the ambien flavors of Debian and

00:09:33,070 --> 00:09:39,579
they more and more become popular on

00:09:35,079 --> 00:09:42,130
these embedded devices well not to

00:09:39,579 --> 00:09:44,019
underestimate we have some experience

00:09:42,130 --> 00:09:46,630
with Debian before so we are shipping

00:09:44,019 --> 00:09:48,820
products better products where Debian is

00:09:46,630 --> 00:09:50,320
included doesn't mean at all our Linux

00:09:48,820 --> 00:09:52,570
players are debian-based but some of

00:09:50,320 --> 00:09:55,060
them are so this apparently seems to

00:09:52,570 --> 00:09:58,690
work even without all the tiny features

00:09:55,060 --> 00:10:01,600
on top like standardized build system

00:09:58,690 --> 00:10:04,750
for this kind of devices so they are all

00:10:01,600 --> 00:10:06,370
doing their image production in well an

00:10:04,750 --> 00:10:10,329
efficient way for the specific product

00:10:06,370 --> 00:10:11,709
but always a little bit different yeah

00:10:10,329 --> 00:10:13,779
well now that version of Debian is

00:10:11,709 --> 00:10:15,399
long-term support well this is of course

00:10:13,779 --> 00:10:19,209
something that other distributions have

00:10:15,399 --> 00:10:20,740
as well not all but many but very

00:10:19,209 --> 00:10:22,180
interesting as I mention before is the

00:10:20,740 --> 00:10:25,390
strict license tag that they have it

00:10:22,180 --> 00:10:26,649
implies Debian do does it for the reason

00:10:25,390 --> 00:10:29,199
that they want to ensure that they only

00:10:26,649 --> 00:10:32,680
have real free software included nothing

00:10:29,199 --> 00:10:34,449
which is well violating these goals that

00:10:32,680 --> 00:10:36,820
implies of course they have to check the

00:10:34,449 --> 00:10:39,010
licenses as well and find out if there

00:10:36,820 --> 00:10:43,420
are something well inconsistencies or

00:10:39,010 --> 00:10:45,579
mouth not applicable packages so they do

00:10:43,420 --> 00:10:47,230
some work which is variable for us as

00:10:45,579 --> 00:10:51,190
well from a perspective that we want to

00:10:47,230 --> 00:10:54,490
build on top of well worked out license

00:10:51,190 --> 00:10:56,079
description of the package and last but

00:10:54,490 --> 00:10:59,110
not least Debian is something which

00:10:56,079 --> 00:11:01,240
scales down can scale down to small

00:10:59,110 --> 00:11:03,610
sizes maybe not as small if you build

00:11:01,240 --> 00:11:05,709
your own Linux from scratch

00:11:03,610 --> 00:11:07,300
and it also can scale up so if your

00:11:05,709 --> 00:11:08,120
embedded system becomes bigger and

00:11:07,300 --> 00:11:10,190
bigger as

00:11:08,120 --> 00:11:14,839
just amazing could grow with this

00:11:10,190 --> 00:11:17,720
packaging system that you have so this

00:11:14,839 --> 00:11:20,210
is where the either project comes into

00:11:17,720 --> 00:11:23,270
play so either actually is a new project

00:11:20,210 --> 00:11:25,670
being released in October something like

00:11:23,270 --> 00:11:27,710
this last year but actually has a longer

00:11:25,670 --> 00:11:29,330
history and the history starts with

00:11:27,710 --> 00:11:31,700
something which is called or what was

00:11:29,330 --> 00:11:33,620
called Slynt depending on your point of

00:11:31,700 --> 00:11:36,230
view it was the siemens or as a small

00:11:33,620 --> 00:11:40,520
Linux distribution a Debian based

00:11:36,230 --> 00:11:44,180
attempt at that time needed in order to

00:11:40,520 --> 00:11:48,140
get Linux from the distribution sauce

00:11:44,180 --> 00:11:49,880
into embedded devices that is what even

00:11:48,140 --> 00:11:53,620
colleagues before I joined Zeman's

00:11:49,880 --> 00:11:53,620
worked on for quite awhile

00:11:53,890 --> 00:12:01,310
Slynt became well it came into some

00:11:58,820 --> 00:12:03,110
products but eventually of course the

00:12:01,310 --> 00:12:05,300
community became bigger than what we can

00:12:03,110 --> 00:12:08,420
were able to build and so Slynt

00:12:05,300 --> 00:12:10,790
basically faced out but still it was in

00:12:08,420 --> 00:12:13,250
one product present or one set of

00:12:10,790 --> 00:12:16,610
product present and and evolved a little

00:12:13,250 --> 00:12:18,800
bit and it also involved in regarding

00:12:16,610 --> 00:12:20,779
how the it was being produced so how the

00:12:18,800 --> 00:12:22,880
image was being produced starting from a

00:12:20,779 --> 00:12:24,980
script in the early days later on

00:12:22,880 --> 00:12:29,570
someone implemented a bit peg on top of

00:12:24,980 --> 00:12:33,110
this for these specific products so at

00:12:29,570 --> 00:12:37,190
the point then later on as a Slynt as a

00:12:33,110 --> 00:12:38,810
across building version of debian became

00:12:37,190 --> 00:12:41,600
less interesting because of the

00:12:38,810 --> 00:12:44,630
maintenance effort this specific product

00:12:41,600 --> 00:12:47,529
series switched over to pure debian but

00:12:44,630 --> 00:12:50,450
kept the bit baked part of this and

00:12:47,529 --> 00:12:52,310
finally last year's basically when we

00:12:50,450 --> 00:12:54,589
started as a central department of

00:12:52,310 --> 00:12:57,459
Siemens look into the options how to get

00:12:54,589 --> 00:13:00,290
debian integrated into more than one

00:12:57,459 --> 00:13:04,010
Siemens device or more than one Siemens

00:13:00,290 --> 00:13:05,959
product series we basically got in touch

00:13:04,010 --> 00:13:11,000
again with those people bidding doing

00:13:05,959 --> 00:13:14,200
the early stages of either development

00:13:11,000 --> 00:13:17,120
and that is a company called elbows

00:13:14,200 --> 00:13:19,220
who's doing this or was doing this kind

00:13:17,120 --> 00:13:22,070
of development for a specific division

00:13:19,220 --> 00:13:23,450
of Siemens and then said oh boy wait we

00:13:22,070 --> 00:13:25,010
already have something which is

00:13:23,450 --> 00:13:27,590
conceptually possibly interesting for

00:13:25,010 --> 00:13:29,840
you we just love to make it open source

00:13:27,590 --> 00:13:31,390
and that's the point basically we came

00:13:29,840 --> 00:13:33,800
together and said okay let's try to

00:13:31,390 --> 00:13:35,240
evolve from this product specific

00:13:33,800 --> 00:13:37,250
development something which could be

00:13:35,240 --> 00:13:40,130
useful as an open source project and

00:13:37,250 --> 00:13:42,080
could be shared by others of course that

00:13:40,130 --> 00:13:44,300
means that well a lot of things have to

00:13:42,080 --> 00:13:45,980
be little bit done differently because

00:13:44,300 --> 00:13:48,650
they were done for a specific purpose so

00:13:45,980 --> 00:13:50,300
far and not for a generic use case so we

00:13:48,650 --> 00:13:53,890
spawned that the open source release

00:13:50,300 --> 00:13:56,420
which was done technically by others and

00:13:53,890 --> 00:13:57,950
it was called ether so what is easier

00:13:56,420 --> 00:14:01,040
well it's an integrated system for

00:13:57,950 --> 00:14:03,890
automated root filesystem generation and

00:14:01,040 --> 00:14:05,600
you see it or a little bit it's not

00:14:03,890 --> 00:14:08,510
completely expressing what the term is

00:14:05,600 --> 00:14:10,730
and it's also a nice place to have

00:14:08,510 --> 00:14:13,160
barbeque in Munich well it's the river

00:14:10,730 --> 00:14:15,200
floating along this side actually so

00:14:13,160 --> 00:14:18,260
either is the river flowing through

00:14:15,200 --> 00:14:24,020
Semitic so this is basically where the

00:14:18,260 --> 00:14:26,450
name comes from either is trying to

00:14:24,020 --> 00:14:28,340
combine the best of three worlds one of

00:14:26,450 --> 00:14:30,950
the world is a Debian based system that

00:14:28,340 --> 00:14:34,550
delivers you all the packages you want

00:14:30,950 --> 00:14:37,580
to include at least most of them with an

00:14:34,550 --> 00:14:40,730
integration tool bitbake which is well

00:14:37,580 --> 00:14:44,680
established in building distributions

00:14:40,730 --> 00:14:50,540
and highly flexible we see later on

00:14:44,680 --> 00:14:52,600
plus the way Yocto structures the

00:14:50,540 --> 00:14:56,000
description of embedded systems and also

00:14:52,600 --> 00:14:57,590
enables certain workflows so this is

00:14:56,000 --> 00:14:59,600
basically pulling these kind of

00:14:57,590 --> 00:15:03,890
information together and in building

00:14:59,600 --> 00:15:06,020
something where you buy out of this how

00:15:03,890 --> 00:15:10,130
it looks like using an example of an arm

00:15:06,020 --> 00:15:13,550
target so we first of all have your dev

00:15:10,130 --> 00:15:19,790
a repository upstream repository and we

00:15:13,550 --> 00:15:21,950
built built chroot all of this yeah

00:15:19,790 --> 00:15:23,690
where's to being able to build further

00:15:21,950 --> 00:15:25,700
espere further elements of your of your

00:15:23,690 --> 00:15:28,070
target device specifically you only have

00:15:25,700 --> 00:15:31,340
some parts of your device which are not

00:15:28,070 --> 00:15:33,110
coming from binary packages but have to

00:15:31,340 --> 00:15:36,110
be built actually and that's what this

00:15:33,110 --> 00:15:37,550
case a hello so your example applique

00:15:36,110 --> 00:15:41,029
in this case but it can of course be

00:15:37,550 --> 00:15:43,160
more complex so this is being as put as

00:15:41,029 --> 00:15:45,050
the inputs can be a git repository a

00:15:43,160 --> 00:15:47,180
source of posit or which being built

00:15:45,050 --> 00:15:49,279
then in this environment and generating

00:15:47,180 --> 00:15:51,560
then a debian package all of this so

00:15:49,279 --> 00:15:55,760
basically filling the gap that upstream

00:15:51,560 --> 00:15:59,000
Debian is not providing and you also use

00:15:55,760 --> 00:16:00,560
of the Debian tooling to create the root

00:15:59,000 --> 00:16:05,300
filesystem for your target

00:16:00,560 --> 00:16:07,399
that's multi-strap in this case and yeah

00:16:05,300 --> 00:16:09,320
this this pulls together the standard

00:16:07,399 --> 00:16:12,279
root filesystem parts from the binary

00:16:09,320 --> 00:16:14,839
packages plus those packages which are

00:16:12,279 --> 00:16:17,300
custom made and typically in embedded

00:16:14,839 --> 00:16:19,880
systems beside the business logic that

00:16:17,300 --> 00:16:22,519
is maybe a bootloader that is most often

00:16:19,880 --> 00:16:24,680
the kernel and these things then are put

00:16:22,519 --> 00:16:27,649
together installed and creating a root

00:16:24,680 --> 00:16:29,810
filesystem image and last but not least

00:16:27,649 --> 00:16:31,970
in this chain of course there is a

00:16:29,810 --> 00:16:35,600
generation of the bootable image and

00:16:31,970 --> 00:16:37,339
that's also part of the easel logic and

00:16:35,600 --> 00:16:39,649
in the end we end up with a bootable

00:16:37,339 --> 00:16:44,930
directly bootable image in this

00:16:39,649 --> 00:16:47,690
production chain so if you want to try

00:16:44,930 --> 00:16:51,560
out either these are the first steps the

00:16:47,690 --> 00:16:53,420
first yeah tries to get something

00:16:51,560 --> 00:16:57,470
running on in this case on the human

00:16:53,420 --> 00:17:00,740
machine for example so it requires first

00:16:57,470 --> 00:17:05,299
of all Debian built environment so host

00:17:00,740 --> 00:17:08,540
environment can be the host itself or a

00:17:05,299 --> 00:17:12,890
virtual machine clone the repository

00:17:08,540 --> 00:17:15,470
it's on github and then bootstrap your

00:17:12,890 --> 00:17:18,890
environment similar to what what your

00:17:15,470 --> 00:17:21,760
two are doing an open embedded and then

00:17:18,890 --> 00:17:24,530
fire up the build process we a bit back

00:17:21,760 --> 00:17:26,360
specifying the image you want to build

00:17:24,530 --> 00:17:29,210
in this case with the multi kontrick

00:17:26,360 --> 00:17:32,179
feature you will all specify the the

00:17:29,210 --> 00:17:33,710
machine you're building for or you do it

00:17:32,179 --> 00:17:36,200
like the up to normal way we our

00:17:33,710 --> 00:17:39,650
configuration files and yeah for this

00:17:36,200 --> 00:17:42,110
demo start up the virtual machines will

00:17:39,650 --> 00:17:44,210
start up a QA emulator where this image

00:17:42,110 --> 00:17:47,929
is being booted then so that's the one

00:17:44,210 --> 00:17:49,450
case we also have a case for testing our

00:17:47,929 --> 00:17:51,520
physical hardware

00:17:49,450 --> 00:17:54,610
so this was a recipe probably ones in

00:17:51,520 --> 00:17:57,790
this case that uses directly the

00:17:54,610 --> 00:18:02,050
raspbian repository a sauce and not just

00:17:57,790 --> 00:18:04,630
a bein same approach basically just a

00:18:02,050 --> 00:18:06,880
different target to build and then you

00:18:04,630 --> 00:18:13,270
can directly write to an SD card and

00:18:06,880 --> 00:18:15,250
have your bootable image so how does

00:18:13,270 --> 00:18:17,680
either look like internally this is the

00:18:15,250 --> 00:18:19,270
structure the top-level view of this if

00:18:17,680 --> 00:18:21,040
you check out you basically have this

00:18:19,270 --> 00:18:23,680
kind of folders and files in your

00:18:21,040 --> 00:18:27,460
repository the first of all there's

00:18:23,680 --> 00:18:30,550
bitbake the tool well known and yeah

00:18:27,460 --> 00:18:33,310
support or maintained out of three so we

00:18:30,550 --> 00:18:36,300
just copy this in updated once a while

00:18:33,310 --> 00:18:39,280
there are no patches on it just standard

00:18:36,300 --> 00:18:43,420
then there is the the core layer the

00:18:39,280 --> 00:18:45,810
meter layer and there is an a template

00:18:43,420 --> 00:18:48,040
layer available meter either which is

00:18:45,810 --> 00:18:50,980
providing you some examples and also

00:18:48,040 --> 00:18:53,290
enabling the bootstrap processes I

00:18:50,980 --> 00:18:54,640
showed on the slide before there's a

00:18:53,290 --> 00:18:56,140
script folder with some additional

00:18:54,640 --> 00:18:58,660
helper script and then there is this

00:18:56,140 --> 00:19:03,400
bootstrap script available on the top

00:18:58,660 --> 00:19:07,540
level so if you want to start your own

00:19:03,400 --> 00:19:09,510
project with this one way is to just

00:19:07,540 --> 00:19:12,670
clone the repository as it's there

00:19:09,510 --> 00:19:15,820
you will find this meter either layer

00:19:12,670 --> 00:19:19,060
there and use it as a template so copy

00:19:15,820 --> 00:19:21,010
it modify it and yeah well at what you

00:19:19,060 --> 00:19:23,980
normally do in building your own device

00:19:21,010 --> 00:19:26,830
that's your own image description with

00:19:23,980 --> 00:19:29,860
the own list of packages and possibly

00:19:26,830 --> 00:19:31,660
also your own port machine that you want

00:19:29,860 --> 00:19:33,760
to scribe for your target that's one way

00:19:31,660 --> 00:19:35,680
or if you want to do it more

00:19:33,760 --> 00:19:37,960
sophisticated with a more complex system

00:19:35,680 --> 00:19:40,510
that's of course what we are targeting

00:19:37,960 --> 00:19:43,240
for is you create your own repository

00:19:40,510 --> 00:19:46,330
with your own layer or your own set of

00:19:43,240 --> 00:19:48,760
layers which just basically then

00:19:46,330 --> 00:19:50,860
includes either as an upstream sauce

00:19:48,760 --> 00:19:53,380
like you would do this with jaco you

00:19:50,860 --> 00:19:56,350
have the unmodified octo repository the

00:19:53,380 --> 00:19:58,150
poco repository and just included and

00:19:56,350 --> 00:20:00,490
add additional layers on top of this

00:19:58,150 --> 00:20:01,780
that may mean that you need to probably

00:20:00,490 --> 00:20:02,890
some configuration management for all

00:20:01,780 --> 00:20:07,540
these sets of

00:20:02,890 --> 00:20:09,520
tourists like repo or other tools so

00:20:07,540 --> 00:20:11,230
then you can start using the normal

00:20:09,520 --> 00:20:13,960
layer mechanisms that you know from

00:20:11,230 --> 00:20:16,720
possibly know for me octo you have

00:20:13,960 --> 00:20:19,240
different kind of sources of input you

00:20:16,720 --> 00:20:22,270
add to this so we may have bought

00:20:19,240 --> 00:20:24,520
Support Package players you may have

00:20:22,270 --> 00:20:26,890
layers with specific library is coming

00:20:24,520 --> 00:20:30,130
in from third parties you may have your

00:20:26,890 --> 00:20:32,170
own well company division unit layer

00:20:30,130 --> 00:20:35,380
which at certain features which are

00:20:32,170 --> 00:20:38,740
commodity to all of your devices in a

00:20:35,380 --> 00:20:40,840
series or in a department and then you

00:20:38,740 --> 00:20:42,309
specifically have product layers where

00:20:40,840 --> 00:20:44,410
you describe specifically the

00:20:42,309 --> 00:20:50,880
differences in the the products and the

00:20:44,410 --> 00:20:54,520
configuration so adding your own image

00:20:50,880 --> 00:20:56,980
yeah as I said first step either derive

00:20:54,520 --> 00:21:00,429
from the from the template file that's

00:20:56,980 --> 00:21:02,440
there there are some these two images

00:21:00,429 --> 00:21:04,419
poori provided there's also a variant

00:21:02,440 --> 00:21:06,850
available which describes additional

00:21:04,419 --> 00:21:09,730
debug packages also a normal case that

00:21:06,850 --> 00:21:13,720
you have a production release image at a

00:21:09,730 --> 00:21:15,549
debug image and yeah you can extend

00:21:13,720 --> 00:21:17,830
basically on this base image what's

00:21:15,549 --> 00:21:20,559
available there adding your things so

00:21:17,830 --> 00:21:23,230
this is typical tasks to be done there

00:21:20,559 --> 00:21:25,450
is here adding some additional packages

00:21:23,230 --> 00:21:28,299
to the list so there is the variable

00:21:25,450 --> 00:21:30,460
describing that image pre-install you

00:21:28,299 --> 00:21:32,169
can this is for packages from coming

00:21:30,460 --> 00:21:34,600
from binary sources from the repository

00:21:32,169 --> 00:21:37,390
upstream repositories if you have self

00:21:34,600 --> 00:21:43,299
bit packages you use the image install

00:21:37,390 --> 00:21:45,160
variable for this add files from I want

00:21:43,299 --> 00:21:47,049
to add files in your new route effects

00:21:45,160 --> 00:21:49,510
of the targets of customization steps

00:21:47,049 --> 00:21:51,910
you can add two tasks which is basically

00:21:49,510 --> 00:21:55,860
doing this so shown on the right side is

00:21:51,910 --> 00:21:59,830
some tasks which copies over from your

00:21:55,860 --> 00:22:01,750
repository for me from your layer in

00:21:59,830 --> 00:22:04,360
this case a host key for the target

00:22:01,750 --> 00:22:07,690
device drops it in basically on the root

00:22:04,360 --> 00:22:12,929
of s well that's trivial as it is this

00:22:07,690 --> 00:22:15,120
slide or you can also modify

00:22:12,929 --> 00:22:16,870
post-process so to say your image

00:22:15,120 --> 00:22:18,820
removing stuff

00:22:16,870 --> 00:22:20,550
moving for exams the package database if

00:22:18,820 --> 00:22:23,890
you don't want it on a target device and

00:22:20,550 --> 00:22:26,260
though there's a bootstrap script or

00:22:23,890 --> 00:22:28,660
post-processing script available

00:22:26,260 --> 00:22:31,559
it's a debian config script where you

00:22:28,660 --> 00:22:33,700
just can Acuras own thing forked or

00:22:31,559 --> 00:22:36,100
modified in a way that you can use it

00:22:33,700 --> 00:22:39,190
part this is well basically scripting

00:22:36,100 --> 00:22:41,650
and then you can modify the the target

00:22:39,190 --> 00:22:47,920
systems further into your needs rip it

00:22:41,650 --> 00:22:49,900
down and things like this so next step

00:22:47,920 --> 00:22:53,290
might be adding your own applications to

00:22:49,900 --> 00:22:56,470
this so two options basically one is to

00:22:53,290 --> 00:22:59,170
let either do the build process while

00:22:56,470 --> 00:23:01,210
the image is being produced and the

00:22:59,170 --> 00:23:05,160
other one is which is also being used in

00:23:01,210 --> 00:23:08,830
the internal projects but what either

00:23:05,160 --> 00:23:12,280
rose from is having a separate build

00:23:08,830 --> 00:23:14,650
process for the those packages or those

00:23:12,280 --> 00:23:16,360
applications coming in as Debian

00:23:14,650 --> 00:23:18,070
packages already into the central

00:23:16,360 --> 00:23:21,040
repository and you just pull it as if

00:23:18,070 --> 00:23:23,410
they were upstream packages so those are

00:23:21,040 --> 00:23:26,309
possible but if you look at we want to

00:23:23,410 --> 00:23:30,940
look at the source based approach now

00:23:26,309 --> 00:23:32,740
Wow one approach is typical approach is

00:23:30,940 --> 00:23:35,950
to Debian eyes these kind of sources

00:23:32,740 --> 00:23:38,530
that means adding a folder with a

00:23:35,950 --> 00:23:41,890
necessary meter data according to the

00:23:38,530 --> 00:23:44,650
Debian format and yeah then let Debian

00:23:41,890 --> 00:23:46,600
basically do the work for you if you're

00:23:44,650 --> 00:23:49,179
building natively and you are lucky and

00:23:46,600 --> 00:23:50,980
this is what you don't have to do any

00:23:49,179 --> 00:23:52,530
kind of cross building maybe don't do

00:23:50,980 --> 00:23:55,929
cross porting actually with either

00:23:52,530 --> 00:23:58,120
anything but just not for the target and

00:23:55,929 --> 00:24:00,160
the same target architecture is done in

00:23:58,120 --> 00:24:03,820
a chemo environment immolated

00:24:00,160 --> 00:24:05,740
environment well just to ensure that we

00:24:03,820 --> 00:24:10,900
are not have to have cross food trade at

00:24:05,740 --> 00:24:12,220
this point yeah and then of course you

00:24:10,900 --> 00:24:14,290
have to add this additional package

00:24:12,220 --> 00:24:17,020
would be done in the local conflict just

00:24:14,290 --> 00:24:21,190
for experiments or you add it in your

00:24:17,020 --> 00:24:24,070
own image recipe as a static cook to the

00:24:21,190 --> 00:24:27,070
say-so on the right you see the example

00:24:24,070 --> 00:24:29,650
of such kind of application here it's

00:24:27,070 --> 00:24:30,340
not awfully complex and this code alone

00:24:29,650 --> 00:24:32,470
actually

00:24:30,340 --> 00:24:36,070
describes everything just needed for

00:24:32,470 --> 00:24:37,510
this specific package built so the git

00:24:36,070 --> 00:24:40,960
repository where you have to pull it

00:24:37,510 --> 00:24:43,840
from the hash you want to use there and

00:24:40,960 --> 00:24:47,260
it inherits here on the top is on the

00:24:43,840 --> 00:24:50,890
bottom you see inherits dpkg pair class

00:24:47,260 --> 00:24:52,809
which describes how to build this

00:24:50,890 --> 00:24:57,610
package with the Debian way so basically

00:24:52,809 --> 00:25:02,110
wraps around a Debian build process and

00:24:57,610 --> 00:25:03,970
that's it so now you have your own

00:25:02,110 --> 00:25:05,980
application but normally what you also

00:25:03,970 --> 00:25:08,890
customize in your bedded system is the

00:25:05,980 --> 00:25:11,409
kernel for various reasons so what to do

00:25:08,890 --> 00:25:13,000
with the kernel well similar approach

00:25:11,409 --> 00:25:16,690
and ebonized

00:25:13,000 --> 00:25:18,340
the kernel so you add the specific

00:25:16,690 --> 00:25:21,450
folder describing how the kernel is to

00:25:18,340 --> 00:25:25,360
be built and let e-z either do the work

00:25:21,450 --> 00:25:28,029
so there's an available in the example

00:25:25,360 --> 00:25:30,880
branch on the upstream project custom

00:25:28,029 --> 00:25:32,740
kernel there's just a little bit fix up

00:25:30,880 --> 00:25:35,230
needed for the URI used in this

00:25:32,740 --> 00:25:37,960
description and that basically pulls a

00:25:35,230 --> 00:25:39,580
demonstration kernel in and and builds

00:25:37,960 --> 00:25:44,610
this thing within the either build

00:25:39,580 --> 00:25:48,010
process for a target image or

00:25:44,610 --> 00:25:49,840
iteratively to this well you can build

00:25:48,010 --> 00:25:52,360
it separately just like the application

00:25:49,840 --> 00:25:55,630
do it outside of the normal image

00:25:52,360 --> 00:25:59,260
processor production process and just

00:25:55,630 --> 00:26:02,049
pull in from a repo already built debian

00:25:59,260 --> 00:26:03,970
package that's one way to do it but if

00:26:02,049 --> 00:26:06,460
you want to put what we want to pull in

00:26:03,970 --> 00:26:09,010
some some kernel sauce it's in an

00:26:06,460 --> 00:26:11,169
unmodified way and there's also another

00:26:09,010 --> 00:26:13,990
mechanism possible that's what was I was

00:26:11,169 --> 00:26:15,880
playing with these days basically

00:26:13,990 --> 00:26:19,919
carrying them the meter files to Debian

00:26:15,880 --> 00:26:23,919
eyes the kernel inside the recipes and

00:26:19,919 --> 00:26:25,360
only applying them as you prepare the

00:26:23,919 --> 00:26:28,090
kernel sources for the build process

00:26:25,360 --> 00:26:30,309
within Debian that allows you basically

00:26:28,090 --> 00:26:33,820
to pull from yeah unmodified git

00:26:30,309 --> 00:26:35,320
repositories from upstream or different

00:26:33,820 --> 00:26:38,530
branches like stable branches for

00:26:35,320 --> 00:26:40,750
example Wow

00:26:38,530 --> 00:26:42,220
and of course we don't want to do this

00:26:40,750 --> 00:26:44,230
over and over again with every kernel

00:26:42,220 --> 00:26:46,450
variant we are pulling in so the

00:26:44,230 --> 00:26:51,150
step would be to make this kind of

00:26:46,450 --> 00:26:54,100
pattern reusable for your own kernel and

00:26:51,150 --> 00:26:55,900
even possibly carry over this pattern

00:26:54,100 --> 00:26:58,240
also to application that's another step

00:26:55,900 --> 00:27:01,120
to be done or could be done if you have

00:26:58,240 --> 00:27:02,799
for example the other tools based build

00:27:01,120 --> 00:27:06,070
process for your application you can

00:27:02,799 --> 00:27:08,410
just write the same set of Debian

00:27:06,070 --> 00:27:10,840
packages of Debian meta files for this

00:27:08,410 --> 00:27:13,240
kind of process and you can reuse this

00:27:10,840 --> 00:27:15,790
well so how does it look like if you

00:27:13,240 --> 00:27:20,380
want to split up this kind of build

00:27:15,790 --> 00:27:22,510
process in a usable part so I patched a

00:27:20,380 --> 00:27:26,169
little bit on the on the meter layer and

00:27:22,510 --> 00:27:29,440
adding basically a folder which is for

00:27:26,169 --> 00:27:33,429
building kernels Linux kernels so it

00:27:29,440 --> 00:27:36,730
consists of set of these meter files for

00:27:33,429 --> 00:27:38,890
Debian to produce this in Debian and an

00:27:36,730 --> 00:27:41,919
include file which describes the common

00:27:38,890 --> 00:27:45,730
part of the build and this include file

00:27:41,919 --> 00:27:48,520
basically has yeah describing the

00:27:45,730 --> 00:27:51,309
standard build process it's including

00:27:48,520 --> 00:27:53,710
the Debian folder that is on the left

00:27:51,309 --> 00:27:56,230
side it's also expecting that the

00:27:53,710 --> 00:27:59,470
definer recipe will provide some deaf

00:27:56,230 --> 00:28:01,660
config for the kernel and last but not

00:27:59,470 --> 00:28:03,610
least that's the instruction do you see

00:28:01,660 --> 00:28:06,910
below that is basically the step needed

00:28:03,610 --> 00:28:08,770
needed to put over the the Debian folder

00:28:06,910 --> 00:28:13,179
and before the build process starts and

00:28:08,770 --> 00:28:17,020
also copies in the Deaf config for the

00:28:13,179 --> 00:28:18,970
build and that's basic what you have to

00:28:17,020 --> 00:28:21,250
do now you want to use this kind of

00:28:18,970 --> 00:28:24,640
pattern you just create in your own

00:28:21,250 --> 00:28:26,110
layer a little folder with containing

00:28:24,640 --> 00:28:29,590
the Deaf config and containing little

00:28:26,110 --> 00:28:32,860
recipe the recipes look like this it

00:28:29,590 --> 00:28:35,940
just pulls in the include file and then

00:28:32,860 --> 00:28:39,040
describes what repository should provide

00:28:35,940 --> 00:28:45,760
the kernel which branch which sauce rest

00:28:39,040 --> 00:28:47,850
and you're done that's it so there's

00:28:45,760 --> 00:28:49,960
another example available for

00:28:47,850 --> 00:28:52,510
customizing the bootloader in this case

00:28:49,960 --> 00:28:55,750
you boot that's also available in the

00:28:52,510 --> 00:28:57,370
custom branch and now pushed upstream so

00:28:55,750 --> 00:28:58,100
just look into it it's it's basically

00:28:57,370 --> 00:29:01,040
just the same

00:28:58,100 --> 00:29:05,900
in this case what was done in upstream

00:29:01,040 --> 00:29:08,270
is putting or setting up an wood fork

00:29:05,900 --> 00:29:10,880
which contains just additional debian

00:29:08,270 --> 00:29:12,080
files but of course the pattern I just

00:29:10,880 --> 00:29:14,380
presented for the kernel could be

00:29:12,080 --> 00:29:20,690
applied on this as well so just the same

00:29:14,380 --> 00:29:23,800
so to say so last step basically before

00:29:20,690 --> 00:29:25,820
you have a fully bootable image is well

00:29:23,800 --> 00:29:27,950
describing how the image should look

00:29:25,820 --> 00:29:31,370
like with the layout of partitions

00:29:27,950 --> 00:29:33,860
possibly and and yeah how these things

00:29:31,370 --> 00:29:36,770
should be done should be laid out on the

00:29:33,860 --> 00:29:38,990
on the final image file so there are

00:29:36,770 --> 00:29:42,860
good examples available in this case for

00:29:38,990 --> 00:29:46,430
the recipe first of all the the machine

00:29:42,860 --> 00:29:50,300
this defines what kind of image should

00:29:46,430 --> 00:29:53,500
be built for this machine so the image

00:29:50,300 --> 00:29:58,370
type variable defines basically where

00:29:53,500 --> 00:30:01,400
where to look for what kind of class

00:29:58,370 --> 00:30:04,250
describes the build process of the image

00:30:01,400 --> 00:30:07,880
and that again this class file contains

00:30:04,250 --> 00:30:11,450
then yeah a list of shell commands in

00:30:07,880 --> 00:30:13,910
this additional tasks to describe here

00:30:11,450 --> 00:30:17,000
this in this case our PI is the image

00:30:13,910 --> 00:30:18,350
generations task list of shell commands

00:30:17,000 --> 00:30:23,320
I didn't list it here they are bit

00:30:18,350 --> 00:30:28,690
longer basically creating the structure

00:30:23,320 --> 00:30:31,100
on your SD card image file putting in

00:30:28,690 --> 00:30:32,900
the root filesystem image they are

00:30:31,100 --> 00:30:35,000
putting in the bootloader at the right

00:30:32,900 --> 00:30:37,160
location and things like this setting up

00:30:35,000 --> 00:30:39,590
these all things near the end here you

00:30:37,160 --> 00:30:42,610
have this image done in these manual

00:30:39,590 --> 00:30:46,640
steps but encoded into the task here and

00:30:42,610 --> 00:30:50,600
you add the task in the bitbake way

00:30:46,640 --> 00:30:54,440
before the actual build is done and

00:30:50,600 --> 00:30:56,300
after well the root filesystem has been

00:30:54,440 --> 00:31:00,770
produced it's the dependency expression

00:30:56,300 --> 00:31:03,080
here so that's basically the steps

00:31:00,770 --> 00:31:05,780
if you want to build your own images and

00:31:03,080 --> 00:31:08,300
well we played so far I was hoping to do

00:31:05,780 --> 00:31:10,340
really a complete bootstrap of a new

00:31:08,300 --> 00:31:11,539
device this way but it didn't finish

00:31:10,340 --> 00:31:14,210
quite in time for the

00:31:11,539 --> 00:31:17,090
presentation but of course we tried to

00:31:14,210 --> 00:31:20,359
individual steps and learn some stuff of

00:31:17,090 --> 00:31:22,340
this oh I skipped something important

00:31:20,359 --> 00:31:27,229
point right because one thing that you

00:31:22,340 --> 00:31:28,909
see here that general description to be

00:31:27,229 --> 00:31:31,220
done for the image production of course

00:31:28,909 --> 00:31:34,399
is not specific - Aiza not specific to

00:31:31,220 --> 00:31:36,169
debian so if you produce a recipe pie

00:31:34,399 --> 00:31:38,090
image you have basically do the same

00:31:36,169 --> 00:31:41,570
steps independent of what sources you're

00:31:38,090 --> 00:31:43,669
pulling in so the vision for example for

00:31:41,570 --> 00:31:46,279
this part is to use this and share this

00:31:43,669 --> 00:31:48,919
with other projects for example we are

00:31:46,279 --> 00:31:51,649
thinking of using or using Vic for the

00:31:48,919 --> 00:31:53,299
image production step pulling this in

00:31:51,649 --> 00:31:58,989
and not open coding it like it's done

00:31:53,299 --> 00:32:01,279
right now manually so back to the top

00:31:58,989 --> 00:32:03,440
what lessons did we learn from the

00:32:01,279 --> 00:32:06,919
experiments well the good things about

00:32:03,440 --> 00:32:08,479
either the similarity between Yocto and

00:32:06,919 --> 00:32:10,519
open bed it helps a lot from writing the

00:32:08,479 --> 00:32:12,529
recipes so you don't have to learn a

00:32:10,519 --> 00:32:15,529
complete new build systems if you switch

00:32:12,529 --> 00:32:16,999
over home Yocto for example it's the

00:32:15,529 --> 00:32:20,169
same language the same structuring of

00:32:16,999 --> 00:32:22,970
layers that's the benefit you pull over

00:32:20,169 --> 00:32:25,159
so I'm not an expert in both of them so

00:32:22,970 --> 00:32:27,220
for me it was pretty easy my loose my

00:32:25,159 --> 00:32:29,599
little knowledge in in Europe to build

00:32:27,220 --> 00:32:33,590
and applying it basically on the user

00:32:29,599 --> 00:32:36,200
build the recipes as you've seen can

00:32:33,590 --> 00:32:38,299
become very simple because all the magic

00:32:36,200 --> 00:32:42,409
is the back it's in the distribution

00:32:38,299 --> 00:32:44,330
it's the distribution build process the

00:32:42,409 --> 00:32:47,239
image generation itself out of the

00:32:44,330 --> 00:32:49,429
binary package is nicely fast so it's

00:32:47,239 --> 00:32:52,489
been done maybe in 10 minutes or even

00:32:49,429 --> 00:32:55,220
less for a complete embedded system try

00:32:52,489 --> 00:32:58,849
this with a sufficiently complex source

00:32:55,220 --> 00:33:04,220
build build system and the structure of

00:32:58,849 --> 00:33:07,759
either so far is rather simple so it's

00:33:04,220 --> 00:33:08,899
just 300 lines of code well for the

00:33:07,759 --> 00:33:10,460
differentiating part and non

00:33:08,899 --> 00:33:13,639
differentiating part bit bigger for a

00:33:10,460 --> 00:33:15,919
little bit bigger but yeah well anyway

00:33:13,639 --> 00:33:17,989
it's not changed so it's just existing

00:33:15,919 --> 00:33:20,899
code if someone packaged bitbake

00:33:17,989 --> 00:33:22,909
basically as a package we could maybe

00:33:20,899 --> 00:33:25,090
just use it as is and don't have to

00:33:22,909 --> 00:33:27,259
carry our own version

00:33:25,090 --> 00:33:29,539
but of course there are also shuttle

00:33:27,259 --> 00:33:31,549
sites and in this case well we also find

00:33:29,539 --> 00:33:33,499
some things one thing that first of all

00:33:31,549 --> 00:33:35,869
came up for me when I first look at it

00:33:33,499 --> 00:33:37,490
you currently need root privileges for

00:33:35,869 --> 00:33:39,499
generating the image it's not really

00:33:37,490 --> 00:33:42,889
nice if you have a build server which

00:33:39,499 --> 00:33:45,499
then tries to execute it and you have to

00:33:42,889 --> 00:33:47,600
set some pseudo rules to enable the

00:33:45,499 --> 00:33:49,249
build process this is probably fixable

00:33:47,600 --> 00:33:52,249
or you've just put it in the virtual

00:33:49,249 --> 00:33:53,509
machine like I did for this yeah but

00:33:52,249 --> 00:33:55,820
still it should be it should be done

00:33:53,509 --> 00:33:59,720
better and other systems so that is as

00:33:55,820 --> 00:34:02,090
possible technically yeah well there's

00:33:59,720 --> 00:34:04,850
some room for improvement for the recipe

00:34:02,090 --> 00:34:07,039
development itself so this is this is

00:34:04,850 --> 00:34:09,260
the first thing that some recipes aren't

00:34:07,039 --> 00:34:11,359
really update or uh not really rebuilt

00:34:09,260 --> 00:34:13,909
when you change them it's apparently in

00:34:11,359 --> 00:34:15,919
a bit back issue there might be some

00:34:13,909 --> 00:34:17,179
workarounds for this or some solutions

00:34:15,919 --> 00:34:20,599
for this in the recent version of

00:34:17,179 --> 00:34:21,889
bitbake that not applied here so I had

00:34:20,599 --> 00:34:24,050
to fight a little bit while I was

00:34:21,889 --> 00:34:26,809
playing with the recipes to rebuild

00:34:24,050 --> 00:34:29,780
things manually destroying some of the

00:34:26,809 --> 00:34:32,000
files which basically text the stages so

00:34:29,780 --> 00:34:33,740
the timestamp files and trying to

00:34:32,000 --> 00:34:36,260
trigger the thing in the right way to do

00:34:33,740 --> 00:34:39,049
it and yeah there's also no cleanup

00:34:36,260 --> 00:34:41,119
tasks implemented yet trivial things but

00:34:39,049 --> 00:34:43,970
still if you do it the first time it was

00:34:41,119 --> 00:34:46,669
not the best experience this point on

00:34:43,970 --> 00:34:48,740
the to-do list by now another thing you

00:34:46,669 --> 00:34:51,889
quickly learn well we don't do the cross

00:34:48,740 --> 00:34:54,349
build so far that's nice you can use the

00:34:51,889 --> 00:34:55,879
upstream to Genesis and it's not so nice

00:34:54,349 --> 00:34:58,849
if you're sitting there waiting for your

00:34:55,879 --> 00:35:01,910
kernel usually this user space or QA

00:34:58,849 --> 00:35:04,400
user space built based build processes

00:35:01,910 --> 00:35:07,099
they take ten times as a native build or

00:35:04,400 --> 00:35:08,660
the cross build and so this is maybe

00:35:07,099 --> 00:35:11,180
okay and it's being actually used for

00:35:08,660 --> 00:35:13,880
the building of the existing in our

00:35:11,180 --> 00:35:15,650
system this way it's okay if you have a

00:35:13,880 --> 00:35:17,750
large server farm if you just put it

00:35:15,650 --> 00:35:19,040
there and write overnight it's not okay

00:35:17,750 --> 00:35:20,329
if you're sitting there as a developer

00:35:19,040 --> 00:35:24,619
in front of your console waiting for the

00:35:20,329 --> 00:35:27,290
image so one approach to do this is to

00:35:24,619 --> 00:35:29,329
overcome this is to switch back at least

00:35:27,290 --> 00:35:32,299
for the kernel to cross building the

00:35:29,329 --> 00:35:34,359
kernel is nicely cross buildable so not

00:35:32,299 --> 00:35:37,700
a big issue but still has to be done or

00:35:34,359 --> 00:35:38,420
the alternative to this well arm servers

00:35:37,700 --> 00:35:41,180
are coming

00:35:38,420 --> 00:35:42,799
some of the more in the Rex and they of

00:35:41,180 --> 00:35:43,970
course have a different performance than

00:35:42,799 --> 00:35:48,980
if they have to build for the armed

00:35:43,970 --> 00:35:50,890
systems at least so what is next what's

00:35:48,980 --> 00:35:53,539
in the cue for changes

00:35:50,890 --> 00:35:56,599
well the findings that we have done

00:35:53,539 --> 00:35:58,339
during the evaluation they are on the

00:35:56,599 --> 00:36:01,039
to-do list now and should be resolved

00:35:58,339 --> 00:36:02,990
soon somewhere resolved just before this

00:36:01,039 --> 00:36:04,670
presentation

00:36:02,990 --> 00:36:07,069
it could be six support is something we

00:36:04,670 --> 00:36:09,200
look into there are some traces for them

00:36:07,069 --> 00:36:11,000
pits for this already for chemo but the

00:36:09,200 --> 00:36:15,200
real system is basically waiting on our

00:36:11,000 --> 00:36:17,569
desk to be a yeah bootstrap this way as

00:36:15,200 --> 00:36:21,260
we want to add a reference port for 536

00:36:17,569 --> 00:36:23,839
definitely jesse is being enabled so the

00:36:21,260 --> 00:36:26,029
jersey version of Devon is enabled in

00:36:23,839 --> 00:36:27,980
the development branch it has to be

00:36:26,029 --> 00:36:30,980
integrated the master and some pics have

00:36:27,980 --> 00:36:32,630
to be done still there yeah and then the

00:36:30,980 --> 00:36:34,910
image creation via vic as i mentioned

00:36:32,630 --> 00:36:38,180
before is something nicely shareable

00:36:34,910 --> 00:36:41,569
between existing other build systems and

00:36:38,180 --> 00:36:43,849
an easier so Rick itself has its pros

00:36:41,569 --> 00:36:46,609
and cons but we are working on this Ori

00:36:43,849 --> 00:36:49,130
for the octopod so we will probably

00:36:46,609 --> 00:36:50,809
reduce it also here and yeah

00:36:49,130 --> 00:36:53,480
documentation can always be improved you

00:36:50,809 --> 00:36:59,779
know it has been approved or it recently

00:36:53,480 --> 00:37:03,500
so you may wonder now problem solved one

00:36:59,779 --> 00:37:05,329
size fits at all dump or the built from

00:37:03,500 --> 00:37:07,250
source and no not really

00:37:05,329 --> 00:37:09,410
so one of the devices that we are

00:37:07,250 --> 00:37:11,420
shipping now is a nice one which shows

00:37:09,410 --> 00:37:16,069
that you still have a need for source

00:37:11,420 --> 00:37:18,759
build that's the somatic IOT mm its

00:37:16,069 --> 00:37:23,029
industrial IOT platform device

00:37:18,759 --> 00:37:24,920
containing a processor with some erratum

00:37:23,029 --> 00:37:27,259
so we need to work around in the tool

00:37:24,920 --> 00:37:30,170
chain one reason to change the tool

00:37:27,259 --> 00:37:32,329
chain and one reason to not be able to

00:37:30,170 --> 00:37:34,490
use your pre-built these two packages

00:37:32,329 --> 00:37:36,920
because no distribution out there

00:37:34,490 --> 00:37:40,250
supports this kind of processor out of

00:37:36,920 --> 00:37:42,920
the box so what we did for the product

00:37:40,250 --> 00:37:45,650
release we created a Yocto layer for it

00:37:42,920 --> 00:37:47,930
which enables you as a customer or as a

00:37:45,650 --> 00:37:50,690
user of this device to build your own

00:37:47,930 --> 00:37:51,710
distribution for that that's the normal

00:37:50,690 --> 00:37:53,829
way

00:37:51,710 --> 00:37:55,700
if you have to build from source code

00:37:53,829 --> 00:37:56,890
but of course there are also other

00:37:55,700 --> 00:38:00,829
reasons to do this

00:37:56,890 --> 00:38:02,869
well highly optimized systems typically

00:38:00,829 --> 00:38:05,869
if you go down for size for whatever

00:38:02,869 --> 00:38:07,490
reason we are typically build our

00:38:05,869 --> 00:38:09,230
devices not in the domain where you

00:38:07,490 --> 00:38:12,380
really have to count the bits in your

00:38:09,230 --> 00:38:16,430
flash but there are that kind of devices

00:38:12,380 --> 00:38:19,339
in the market or if you have to go down

00:38:16,430 --> 00:38:20,750
and optimizing for performance maybe

00:38:19,339 --> 00:38:23,000
that you have to apply some some

00:38:20,750 --> 00:38:25,089
compiler switches to squeeze out the

00:38:23,000 --> 00:38:27,530
last performance bits from your hardware

00:38:25,089 --> 00:38:30,500
all that you have to tune the boot times

00:38:27,530 --> 00:38:31,700
of your system then you may also go for

00:38:30,500 --> 00:38:33,260
the sauce bit and drop certain

00:38:31,700 --> 00:38:34,460
approaches that the distributions are

00:38:33,260 --> 00:38:37,130
taking which are really not appropriate

00:38:34,460 --> 00:38:39,400
applicable for your specific embedded

00:38:37,130 --> 00:38:43,369
devices

00:38:39,400 --> 00:38:45,770
so to summarize well I still think this

00:38:43,369 --> 00:38:48,140
might all look small interest me to have

00:38:45,770 --> 00:38:52,609
either as a promising framework for

00:38:48,140 --> 00:38:56,119
building embedded Debian images the

00:38:52,609 --> 00:38:57,710
edges we found so far well they I think

00:38:56,119 --> 00:39:00,740
they are fixable and they will be fixed

00:38:57,710 --> 00:39:04,819
probably soon so that's not a blocking

00:39:00,740 --> 00:39:07,069
point very interesting in our very

00:39:04,819 --> 00:39:09,200
important part of either is that that

00:39:07,069 --> 00:39:12,170
code sharing and recipe sharing is in

00:39:09,200 --> 00:39:16,280
the center that means you can build your

00:39:12,170 --> 00:39:19,730
product lines using reusing the

00:39:16,280 --> 00:39:21,920
description that you made this way so

00:39:19,730 --> 00:39:24,619
you don't have to rewrite basically your

00:39:21,920 --> 00:39:29,030
your bootstrap script all the time and

00:39:24,619 --> 00:39:30,859
copy it over but also it enables sharing

00:39:29,030 --> 00:39:33,380
common steps in building embedded

00:39:30,859 --> 00:39:35,270
systems with other solutions may they be

00:39:33,380 --> 00:39:37,940
source based or may there be

00:39:35,270 --> 00:39:40,339
distribution based so there is room for

00:39:37,940 --> 00:39:42,109
collaboration and either is already

00:39:40,339 --> 00:39:45,559
reaching out of words reaching out to

00:39:42,109 --> 00:39:48,230
these mentioned lb and meter Debian

00:39:45,559 --> 00:39:50,540
people here and they're in contact

00:39:48,230 --> 00:39:53,809
basically trying to define what the next

00:39:50,540 --> 00:39:55,540
steps to work on together is for example

00:39:53,809 --> 00:39:58,040
LD is thinking about using bitbake

00:39:55,540 --> 00:39:59,780
internally meter Debian it's also the

00:39:58,040 --> 00:40:02,299
thinking about basically what to do with

00:39:59,780 --> 00:40:04,140
the bootstrapping process the image

00:40:02,299 --> 00:40:06,700
generation process

00:40:04,140 --> 00:40:08,770
and I specifically think it's a very

00:40:06,700 --> 00:40:10,300
nice tool if you are living in both

00:40:08,770 --> 00:40:12,430
worlds and this is what we are going to

00:40:10,300 --> 00:40:15,850
do if the future definitely if you have

00:40:12,430 --> 00:40:18,070
yours your source based Debian sorry

00:40:15,850 --> 00:40:21,610
sorry you saw space doctor based devices

00:40:18,070 --> 00:40:24,340
there and your Debian based devices you

00:40:21,610 --> 00:40:26,290
can use now the same similar very

00:40:24,340 --> 00:40:28,840
similar language to describe the build

00:40:26,290 --> 00:40:31,060
process of both you don't have to learn

00:40:28,840 --> 00:40:33,490
two completely different approaches for

00:40:31,060 --> 00:40:35,110
building embedded devices that of course

00:40:33,490 --> 00:40:39,370
is valuable if you have to deal with a

00:40:35,110 --> 00:40:41,490
large set of edit systems so some

00:40:39,370 --> 00:40:44,050
resources if you want dick near and

00:40:41,490 --> 00:40:51,250
otherwise thank you for attention and

00:40:44,050 --> 00:40:53,370
I'm taking questions of course in the

00:40:51,250 --> 00:40:53,370
back

00:41:09,690 --> 00:41:13,569
yeah okay the question was how to

00:41:11,799 --> 00:41:16,180
express dependencies between the

00:41:13,569 --> 00:41:17,710
packages so I my examples here for the

00:41:16,180 --> 00:41:19,930
self the application there were no

00:41:17,710 --> 00:41:21,609
dependency is expressed but you have the

00:41:19,930 --> 00:41:22,420
same mechanism to express it like you

00:41:21,609 --> 00:41:24,430
have in doctor

00:41:22,420 --> 00:41:25,990
that depends variables and our

00:41:24,430 --> 00:41:28,270
dependence variables you can just add

00:41:25,990 --> 00:41:30,549
them where they are not part of the

00:41:28,270 --> 00:41:32,049
Debian upstream package so if you if you

00:41:30,549 --> 00:41:34,119
take an upstream Debian packages they

00:41:32,049 --> 00:41:37,569
are already encoded in so if you say it

00:41:34,119 --> 00:41:40,180
stormy X X pulls in the dependencies

00:41:37,569 --> 00:41:42,849
automatically and the normal dependency

00:41:40,180 --> 00:41:45,040
process of Debian works but if you

00:41:42,849 --> 00:41:47,650
describe your own source base package

00:41:45,040 --> 00:41:49,960
you may have to add a specific these

00:41:47,650 --> 00:41:52,089
kind of dependencies in variable form so

00:41:49,960 --> 00:41:55,210
this is in the examples that you find in

00:41:52,089 --> 00:42:00,040
the meter either a repository but it's

00:41:55,210 --> 00:42:02,400
not a part of the slide set here tell me

00:42:00,040 --> 00:42:02,400
your question

00:42:05,790 --> 00:42:20,160
ah ok so the Debian package built out of

00:42:17,640 --> 00:42:23,010
this process if you want to put in the

00:42:20,160 --> 00:42:25,020
dependencies there you have to put it

00:42:23,010 --> 00:42:26,970
into the metadata just like we do it

00:42:25,020 --> 00:42:28,740
with Debian packages so there is

00:42:26,970 --> 00:42:30,750
currently no automatic process if you

00:42:28,740 --> 00:42:32,580
express it in the recipe the dependency

00:42:30,750 --> 00:42:35,460
there's no automatic translation to

00:42:32,580 --> 00:42:38,400
transfer this into the into the Debian

00:42:35,460 --> 00:42:40,560
meter files could be done technically

00:42:38,400 --> 00:42:43,770
don't think there's anything like this

00:42:40,560 --> 00:42:45,300
already in place but yeah possible and

00:42:43,770 --> 00:42:54,260
probably make some sense at certain

00:42:45,300 --> 00:42:54,260
hours here yes

00:43:07,369 --> 00:43:11,970
okay so the question is how's the

00:43:10,050 --> 00:43:13,530
consistency between the upstream binary

00:43:11,970 --> 00:43:16,290
package we pull in and the self bit

00:43:13,530 --> 00:43:18,900
packages we have in during the bill is a

00:43:16,290 --> 00:43:20,490
build process so this this relies on the

00:43:18,900 --> 00:43:23,970
fact that we are using the app stream

00:43:20,490 --> 00:43:27,570
toolchain available from the binary

00:43:23,970 --> 00:43:30,930
sources for the build process of our own

00:43:27,570 --> 00:43:33,150
self birth packages if debian doesn't

00:43:30,930 --> 00:43:34,859
fulfill this requirement well then we

00:43:33,150 --> 00:43:36,690
lost but this is something we can

00:43:34,859 --> 00:43:38,460
actually reasonably expect from from

00:43:36,690 --> 00:43:40,740
debian that you can rebuild your own

00:43:38,460 --> 00:43:43,980
packages with the app stream tool chain

00:43:40,740 --> 00:43:46,790
that you can get also consistent package

00:43:43,980 --> 00:43:46,790
results all of this

00:43:56,310 --> 00:44:01,240
so the question is if we thought more in

00:43:59,740 --> 00:44:02,859
details about the cross-compilation

00:44:01,240 --> 00:44:06,369
option that i were brought up

00:44:02,859 --> 00:44:07,630
I personally not is just developed a

00:44:06,369 --> 00:44:10,300
feeling that someone should look into

00:44:07,630 --> 00:44:11,770
this and I briefly discussed with the

00:44:10,300 --> 00:44:14,190
maintainer person with the ghoul off of

00:44:11,770 --> 00:44:17,550
the visa and he said yeah

00:44:14,190 --> 00:44:19,990
possible but it has to be done

00:44:17,550 --> 00:44:22,980
what technically has to be done for this

00:44:19,990 --> 00:44:25,300
so first of all yes there is upstream

00:44:22,980 --> 00:44:28,570
available cost built for crossbow

00:44:25,300 --> 00:44:31,359
toolchain for forearm for example v7 rb8

00:44:28,570 --> 00:44:34,420
that would be the first step to use and

00:44:31,359 --> 00:44:36,220
well but it has to be examined in more

00:44:34,420 --> 00:44:39,970
details how what the restrictions are

00:44:36,220 --> 00:44:42,760
and probably I think the pattern will

00:44:39,970 --> 00:44:45,550
remain that your your production version

00:44:42,760 --> 00:44:47,410
will do native bills so we'll run and

00:44:45,550 --> 00:44:49,359
Kure more just to have the insurance

00:44:47,410 --> 00:44:51,579
that this is consistent but for the

00:44:49,359 --> 00:44:53,500
development phase where the developer

00:44:51,579 --> 00:44:55,540
the kernel developers maybe sit there

00:44:53,500 --> 00:44:58,480
and then want to build an image while

00:44:55,540 --> 00:45:00,520
being able to build the kernel they may

00:44:58,480 --> 00:45:02,710
go this fast pass so this is probably

00:45:00,520 --> 00:45:04,119
not the version you want to apply for

00:45:02,710 --> 00:45:05,380
the production version and this is

00:45:04,119 --> 00:45:06,670
actually this was picking up from a

00:45:05,380 --> 00:45:08,710
colleague of mine who looked into this

00:45:06,670 --> 00:45:10,900
and immediately started switching over

00:45:08,710 --> 00:45:13,750
the colonel bill doing out of tree in a

00:45:10,900 --> 00:45:14,890
cross way on his desktop and just used

00:45:13,750 --> 00:45:16,050
either for generating the root

00:45:14,890 --> 00:45:18,970
filesystem

00:45:16,050 --> 00:45:20,560
yeah the kernel is easy and we don't

00:45:18,970 --> 00:45:23,619
want to open the can for all the

00:45:20,560 --> 00:45:26,410
packages there so if you if you look at

00:45:23,619 --> 00:45:29,230
Barnes presentation from Foster for

00:45:26,410 --> 00:45:31,359
example he also has a pattern to be

00:45:29,230 --> 00:45:33,640
further developed but conceptually it's

00:45:31,359 --> 00:45:35,440
there how to deal with modified upstream

00:45:33,640 --> 00:45:37,900
packages so if you have to open them

00:45:35,440 --> 00:45:39,430
upstream package maybe modify something

00:45:37,900 --> 00:45:42,369
apply a patch or something like this

00:45:39,430 --> 00:45:43,990
then you the question arises as well how

00:45:42,369 --> 00:45:45,730
to deal with it and I think this is

00:45:43,990 --> 00:45:48,040
probably most reasonable to keep it in

00:45:45,730 --> 00:45:49,720
the interim environment build it with

00:45:48,040 --> 00:45:51,250
the same tool shed it was originally

00:45:49,720 --> 00:45:53,609
built and not going for cross in that

00:45:51,250 --> 00:45:53,609
case

00:45:56,960 --> 00:46:00,470
yeah oh sorry

00:46:17,640 --> 00:46:23,279
okay the question is how do we what's

00:46:20,190 --> 00:46:26,130
our feeling about reproducibility using

00:46:23,279 --> 00:46:33,599
the Debian tool chain over a longer

00:46:26,130 --> 00:46:36,420
period okay plus the yeah the variation

00:46:33,599 --> 00:46:38,489
that we have well this is currently

00:46:36,420 --> 00:46:41,069
based on the on the experience we have

00:46:38,489 --> 00:46:45,720
with doing basically roll your own

00:46:41,069 --> 00:46:48,839
Debian version for a long period it's so

00:46:45,720 --> 00:46:50,309
far it works there might be some corner

00:46:48,839 --> 00:46:53,430
cases that we didn't run into with the

00:46:50,309 --> 00:46:54,779
existing Debian based products but this

00:46:53,430 --> 00:46:57,599
is something of course to keep in mind

00:46:54,779 --> 00:47:00,809
and if it really turns out to be the

00:46:57,599 --> 00:47:05,549
viable way by using the upstream Debian

00:47:00,809 --> 00:47:08,279
tool chain for a 15 year old product Wow

00:47:05,549 --> 00:47:11,400
it probably needs further thoughts I

00:47:08,279 --> 00:47:13,170
wouldn't I wouldn't blindly apply it but

00:47:11,400 --> 00:47:16,710
on the other hand this kind of system

00:47:13,170 --> 00:47:19,410
exists not yet 10 years but at least 5

00:47:16,710 --> 00:47:22,279
years something and they didn't explode

00:47:19,410 --> 00:47:26,369
yet so it's not completely infeasible

00:47:22,279 --> 00:47:28,109
but yeah if we identify problems and

00:47:26,369 --> 00:47:30,059
that's also the one of these approaches

00:47:28,109 --> 00:47:31,200
here we want to go upstream we want to

00:47:30,059 --> 00:47:32,759
talk upstream so if you identify

00:47:31,200 --> 00:47:34,859
problems in the Debian way of

00:47:32,759 --> 00:47:37,109
maintaining tool chains other as

00:47:34,859 --> 00:47:39,539
elements for maintaining it that long

00:47:37,109 --> 00:47:41,400
and Debian is targeting for I think 7

00:47:39,539 --> 00:47:44,970
years or longer with the maintenance of

00:47:41,400 --> 00:47:47,400
of the versions and we of course would

00:47:44,970 --> 00:47:51,710
report or even fix upstream the issues

00:47:47,400 --> 00:47:51,710
and to make them reusable for us again

00:47:55,290 --> 00:48:04,050
what the questions otherwise thank you

00:48:01,000 --> 00:48:08,159
all and enjoy lunch

00:48:04,050 --> 00:48:08,159

YouTube URL: https://www.youtube.com/watch?v=OehKeHlUx-g


