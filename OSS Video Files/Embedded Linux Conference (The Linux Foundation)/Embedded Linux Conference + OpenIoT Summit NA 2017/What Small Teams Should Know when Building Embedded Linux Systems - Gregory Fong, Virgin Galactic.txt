Title: What Small Teams Should Know when Building Embedded Linux Systems - Gregory Fong, Virgin Galactic
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	What Small Teams Should Know when Building Embedded Linux Systems - Gregory Fong, Virgin Galactic

Learning a new build system or SDK can be an intimidating barrier to putting together a custom embedded Linux application. In this presentation, Gregory Fong will demonstrate how to spend the minimum of time and effort to add in the functionality you need to develop your application when you understand the scope of available documentation, common features across modern build systems, and availability of reference platforms. He will highlight how working with OpenEmbedded/Yocto has enabled Virgin Galactic to move swiftly with a small team on the LauncherOne satellite launch vehicle flight computer.

About Gregory Fong
Gregory Fong is a Senior Software Engineer at Virgin Galactic, where he has been making extensive use of Linux and Openembedded/Yocto for the flight computer of LauncherOne, a small satellite launch vehicle. Before that, he was a Linux kernel developer at Broadcom, where he made a handful of contributions to the Linux kernel, including the Broadcom STB GPIO controller driver, and also maintained the stbgcc cross-compiler toolchain and the kernel and rootfs for the 40nm BMIPS processor.
Captions: 
	00:00:00,000 --> 00:00:03,689
I'm guessing you're all here because you

00:00:02,280 --> 00:00:05,400
have a project that you're working on or

00:00:03,689 --> 00:00:07,890
looking to start one that requires

00:00:05,400 --> 00:00:10,469
building custom hardware you've already

00:00:07,890 --> 00:00:13,259
done this before and are looking to

00:00:10,469 --> 00:00:14,759
either do it do this again or maybe

00:00:13,259 --> 00:00:16,890
commiserate with someone else who's gone

00:00:14,759 --> 00:00:18,359
through the growing pain or you saw the

00:00:16,890 --> 00:00:21,060
name Virgin Galactic and it piqued your

00:00:18,359 --> 00:00:24,390
interest well regardless of where here

00:00:21,060 --> 00:00:26,160
welcome we're going to focus on the

00:00:24,390 --> 00:00:28,320
steps that you need to go from project

00:00:26,160 --> 00:00:29,939
conception to having hardware and

00:00:28,320 --> 00:00:32,099
operating system that you need to

00:00:29,939 --> 00:00:34,050
disable to support whatever desired

00:00:32,099 --> 00:00:36,750
software application you're creating so

00:00:34,050 --> 00:00:38,610
I hope you find something interesting to

00:00:36,750 --> 00:00:40,800
take away from it so let's go ahead and

00:00:38,610 --> 00:00:42,360
get started so first of all let's start

00:00:40,800 --> 00:00:43,530
off with a very important question and

00:00:42,360 --> 00:00:46,170
I'm going to assume that you're one of

00:00:43,530 --> 00:00:48,570
the people who's looking to get a new

00:00:46,170 --> 00:00:50,520
project moving and the question here is

00:00:48,570 --> 00:00:53,160
what is it that you're really trying to

00:00:50,520 --> 00:00:55,320
build after all building logic system

00:00:53,160 --> 00:00:58,170
isn't usually the end goal unless you're

00:00:55,320 --> 00:00:59,489
doing a reference set up but there's

00:00:58,170 --> 00:01:02,160
something else that you really want to

00:00:59,489 --> 00:01:04,400
be creating are you building a consumer

00:01:02,160 --> 00:01:07,140
device some internet-of-things

00:01:04,400 --> 00:01:10,530
monstrosity wait what conference am I

00:01:07,140 --> 00:01:14,460
get again some appliance so test harness

00:01:10,530 --> 00:01:16,049
a flight computer knowing this what

00:01:14,460 --> 00:01:17,340
you're building is really what's going

00:01:16,049 --> 00:01:19,740
to define the sorts of trade-off you

00:01:17,340 --> 00:01:22,950
make and it'll be good to keep this in

00:01:19,740 --> 00:01:24,600
mind as you're going so regardless to

00:01:22,950 --> 00:01:26,880
keep one you want to keep your focus and

00:01:24,600 --> 00:01:28,229
avoid getting mired in tool creation as

00:01:26,880 --> 00:01:30,960
you're working in a small team by making

00:01:28,229 --> 00:01:33,689
use of these sorts of existing tools so

00:01:30,960 --> 00:01:35,759
how do we start like what what do we

00:01:33,689 --> 00:01:38,009
even do at this point it can be daunting

00:01:35,759 --> 00:01:39,509
to find the starting point since but so

00:01:38,009 --> 00:01:41,220
it let's at least start from the basics

00:01:39,509 --> 00:01:42,689
hardware takes probably the longest time

00:01:41,220 --> 00:01:46,170
to realize it provides of anything

00:01:42,689 --> 00:01:47,280
software in comparison is easy so you

00:01:46,170 --> 00:01:49,799
want to get to the hardware rate as

00:01:47,280 --> 00:01:51,509
early as possible and if you're lucky in

00:01:49,799 --> 00:01:54,149
the development process the hardware

00:01:51,509 --> 00:01:56,549
hasn't actually been set or determined

00:01:54,149 --> 00:01:59,340
yet so you can take the time to figure

00:01:56,549 --> 00:02:00,630
out what it's actually needed that's the

00:01:59,340 --> 00:02:02,729
one who works on software you're going

00:02:00,630 --> 00:02:03,840
to want to make sure to get as involved

00:02:02,729 --> 00:02:06,719
in discussion as early as possible

00:02:03,840 --> 00:02:08,340
because hardware designers often get

00:02:06,719 --> 00:02:11,099
buried in data sheets and forget about

00:02:08,340 --> 00:02:12,780
the software development time that is

00:02:11,099 --> 00:02:14,220
affected by the decisions that they make

00:02:12,780 --> 00:02:18,180
and the last thing that you

00:02:14,220 --> 00:02:19,860
one is an interface designed by the

00:02:18,180 --> 00:02:23,580
heart designers that doesn't work well

00:02:19,860 --> 00:02:25,710
with existing software interfaces and so

00:02:23,580 --> 00:02:28,320
at least to get moving in the right

00:02:25,710 --> 00:02:30,180
direction here you'll end up starting

00:02:28,320 --> 00:02:32,250
off with what that designers usually

00:02:30,180 --> 00:02:34,850
provide different reference boards to

00:02:32,250 --> 00:02:37,170
get sorry from which are intended to

00:02:34,850 --> 00:02:38,370
show off a lot of the features of the

00:02:37,170 --> 00:02:39,810
hardware they sell and regardless of

00:02:38,370 --> 00:02:41,910
whether it doesn't actually fit your

00:02:39,810 --> 00:02:45,030
specific requirement it's at least some

00:02:41,910 --> 00:02:46,200
place to start and I just realized I

00:02:45,030 --> 00:02:50,310
forgot to advance all the slides so

00:02:46,200 --> 00:02:54,800
sorry about that so one of the things

00:02:50,310 --> 00:02:56,580
that's going to affect what you need is

00:02:54,800 --> 00:02:58,410
depending on what your team's looks

00:02:56,580 --> 00:03:00,600
current level software expertise is if

00:02:58,410 --> 00:03:02,459
you have a for instance a seasoned

00:03:00,600 --> 00:03:04,410
developer who's done a bunch of hardware

00:03:02,459 --> 00:03:05,459
and software bring ups before your

00:03:04,410 --> 00:03:07,670
requirements are going to be less than

00:03:05,459 --> 00:03:11,160
if you're working with it with a team of

00:03:07,670 --> 00:03:13,650
largely novices do this but it doesn't

00:03:11,160 --> 00:03:14,850
really it while that will affect your

00:03:13,650 --> 00:03:16,260
timeline it doesn't really matter

00:03:14,850 --> 00:03:18,420
because because if you're a small team

00:03:16,260 --> 00:03:21,420
and starting out with a new product in

00:03:18,420 --> 00:03:22,769
company you want to be where you're

00:03:21,420 --> 00:03:24,630
working with limited resources you want

00:03:22,769 --> 00:03:27,650
to save time where you can and that

00:03:24,630 --> 00:03:29,910
means starting with a strong foundation

00:03:27,650 --> 00:03:31,830
when you're a small team all different

00:03:29,910 --> 00:03:33,930
resources this is a paramount importance

00:03:31,830 --> 00:03:35,430
without building on the work of others

00:03:33,930 --> 00:03:38,250
you'll be setting yourself up to fail

00:03:35,430 --> 00:03:41,220
and unless you're buying a product from

00:03:38,250 --> 00:03:43,890
a completely new vendor you'll realize

00:03:41,220 --> 00:03:45,810
that all of the projects that they that

00:03:43,890 --> 00:03:47,820
they have been created from what they've

00:03:45,810 --> 00:03:49,260
sold before have had other people using

00:03:47,820 --> 00:03:52,470
them and I've had the chance to learn

00:03:49,260 --> 00:03:55,620
from past mistakes so one of the ways

00:03:52,470 --> 00:03:57,690
you can make use of other people's

00:03:55,620 --> 00:04:00,959
errors and what's been learned from that

00:03:57,690 --> 00:04:05,130
is to make use of the vendor provided a

00:04:00,959 --> 00:04:06,810
software development kit or Android

00:04:05,130 --> 00:04:08,610
would support tractors depending on the

00:04:06,810 --> 00:04:13,110
level of what what it is that you're

00:04:08,610 --> 00:04:17,100
doing and it's likely based on one of

00:04:13,110 --> 00:04:20,000
the following whether it's using yaakov

00:04:17,100 --> 00:04:22,200
embedded open wrt build route I'm

00:04:20,000 --> 00:04:24,030
probably going to annoy some people here

00:04:22,200 --> 00:04:26,130
by saying that it really doesn't matter

00:04:24,030 --> 00:04:27,050
because I know there's a lot of people

00:04:26,130 --> 00:04:30,470
in different

00:04:27,050 --> 00:04:31,729
like how this is obviously a better like

00:04:30,470 --> 00:04:34,039
opened over cheese obviously better for

00:04:31,729 --> 00:04:35,479
routers or Lauren doesn't seem to be

00:04:34,039 --> 00:04:38,870
here right now or else I would go get

00:04:35,479 --> 00:04:40,129
more about that but you know whether

00:04:38,870 --> 00:04:42,139
using build routes because you like it

00:04:40,129 --> 00:04:43,490
because it's simpler but if you're a

00:04:42,139 --> 00:04:45,349
small team starting out and you're and

00:04:43,490 --> 00:04:46,430
you're working with hardware you want to

00:04:45,349 --> 00:04:48,440
use what the vendor gives you because

00:04:46,430 --> 00:04:49,909
I've tested it before and then you can

00:04:48,440 --> 00:04:54,470
at least get started with something that

00:04:49,909 --> 00:04:55,789
will work all of these sure some pretty

00:04:54,470 --> 00:04:56,990
common things and this is what it

00:04:55,789 --> 00:04:58,370
doesn't matter too much they have a

00:04:56,990 --> 00:05:03,319
large amount of commonly used software

00:04:58,370 --> 00:05:04,460
and you can get started with that but in

00:05:03,319 --> 00:05:06,110
all of these cases they're probably

00:05:04,460 --> 00:05:08,020
going to name this thing specific things

00:05:06,110 --> 00:05:11,360
for whatever niche you're designing for

00:05:08,020 --> 00:05:13,490
so you know you'll probably be okay

00:05:11,360 --> 00:05:15,379
we're getting some the core utilities or

00:05:13,490 --> 00:05:17,539
some replacements like busybox

00:05:15,379 --> 00:05:19,699
and or other things that everyone needs

00:05:17,539 --> 00:05:21,710
like MTP but if you want you know

00:05:19,699 --> 00:05:24,110
specialized math libraries because

00:05:21,710 --> 00:05:25,520
you're doing a certain exploit that's

00:05:24,110 --> 00:05:28,060
not necessarily going to be built in

00:05:25,520 --> 00:05:30,710
what to whatever you're trying to use

00:05:28,060 --> 00:05:33,469
but in all these cases it's pretty easy

00:05:30,710 --> 00:05:35,300
to add in additional packages in fact

00:05:33,469 --> 00:05:40,699
the designers of these want you to do

00:05:35,300 --> 00:05:43,639
that frequently so while some of the

00:05:40,699 --> 00:05:46,520
more elaborate setups will give you like

00:05:43,639 --> 00:05:50,330
you have to contain seemingly everything

00:05:46,520 --> 00:05:51,529
including the kitchen sink you all kinds

00:05:50,330 --> 00:05:54,979
of different graphic libraries and some

00:05:51,529 --> 00:05:57,110
of them are more and minimal there's at

00:05:54,979 --> 00:05:59,930
least some components that are not going

00:05:57,110 --> 00:06:01,069
to be available and all these things

00:05:59,930 --> 00:06:02,810
you're going to want to make your

00:06:01,069 --> 00:06:04,789
additions in a way that is going to be

00:06:02,810 --> 00:06:06,469
easy to port forward later Yocto for

00:06:04,789 --> 00:06:09,050
instance makes this particularly easy to

00:06:06,469 --> 00:06:10,069
do with its layer system and which is

00:06:09,050 --> 00:06:12,800
probably the reason that somebody

00:06:10,069 --> 00:06:14,870
vendors use it it certainly saved us a

00:06:12,800 --> 00:06:16,940
lot of time at Virgin Galactic being

00:06:14,870 --> 00:06:18,680
able to have internally use our own

00:06:16,940 --> 00:06:21,650
layer and use that to port forward as

00:06:18,680 --> 00:06:25,090
new versions come out but it's a way

00:06:21,650 --> 00:06:27,020
that you can save some effort there and

00:06:25,090 --> 00:06:29,389
really you don't want to ignore the tool

00:06:27,020 --> 00:06:30,979
the vendor has provided seems for reason

00:06:29,389 --> 00:06:32,210
and even though it might feel liquid for

00:06:30,979 --> 00:06:34,849
example when you're just setting up a

00:06:32,210 --> 00:06:36,199
reference board and saying okay great I

00:06:34,849 --> 00:06:37,610
can get this reference board working how

00:06:36,199 --> 00:06:39,860
does that really translate to what I'm

00:06:37,610 --> 00:06:40,830
actually doing but these tools actually

00:06:39,860 --> 00:06:43,680
will grow with your needs

00:06:40,830 --> 00:06:45,180
I'm like this toy toolbox and in

00:06:43,680 --> 00:06:47,790
enormous amount of effort has gone into

00:06:45,180 --> 00:06:50,160
building all of the build systems you

00:06:47,790 --> 00:06:53,250
use regardless of how clumsy it might

00:06:50,160 --> 00:06:55,170
feel at first and as tempting as it can

00:06:53,250 --> 00:06:56,550
be to try and reenter much something

00:06:55,170 --> 00:06:58,290
because you like the filter build system

00:06:56,550 --> 00:06:59,700
better you're in you're going to end up

00:06:58,290 --> 00:07:01,830
repeating the same mistakes as other

00:06:59,700 --> 00:07:05,150
people and really not creating the

00:07:01,830 --> 00:07:07,260
product that you are trying to do and

00:07:05,150 --> 00:07:09,210
again another stumbling block here is

00:07:07,260 --> 00:07:13,430
your octo in particular has some very

00:07:09,210 --> 00:07:15,780
confusing terminology in case you know

00:07:13,430 --> 00:07:19,320
people end up throwing around terms like

00:07:15,780 --> 00:07:20,820
octo openembedded pokies it bake and etc

00:07:19,320 --> 00:07:23,100
it can be a little off-putting until

00:07:20,820 --> 00:07:24,660
you've gotten familiar with what's all

00:07:23,100 --> 00:07:27,650
that's talking about but you don't want

00:07:24,660 --> 00:07:29,640
that to be the stopping point there

00:07:27,650 --> 00:07:32,190
because one of the things that you

00:07:29,640 --> 00:07:35,190
really get from using whatever a vendor

00:07:32,190 --> 00:07:36,420
provided stuff is really support you

00:07:35,190 --> 00:07:37,950
don't want to discount the amount that

00:07:36,420 --> 00:07:40,890
having a vendor support stuff on your

00:07:37,950 --> 00:07:43,050
site and help and I know how painful it

00:07:40,890 --> 00:07:46,530
can be sometimes to feel like when

00:07:43,050 --> 00:07:48,480
you're you you can be talking to you get

00:07:46,530 --> 00:07:50,700
your vendor in you at some first level

00:07:48,480 --> 00:07:52,710
support staff and they don't know what

00:07:50,700 --> 00:07:54,030
what it is that you're asking or whatnot

00:07:52,710 --> 00:07:57,090
but it is still better than having

00:07:54,030 --> 00:07:58,560
nobody at all most of the time and while

00:07:57,090 --> 00:08:00,270
there's a lot of documentation available

00:07:58,560 --> 00:08:02,130
for all of these projects there will be

00:08:00,270 --> 00:08:04,110
a questions with the documentation don't

00:08:02,130 --> 00:08:05,310
cover and someone who is very familiar

00:08:04,110 --> 00:08:09,780
with your tools can help you learn them

00:08:05,310 --> 00:08:12,450
and works yet sometimes bugs are

00:08:09,780 --> 00:08:14,190
deliberately left undocumented because

00:08:12,450 --> 00:08:15,660
the vendor doesn't want you to know

00:08:14,190 --> 00:08:20,190
about them however their support staff

00:08:15,660 --> 00:08:21,930
probably are very well aware of this so

00:08:20,190 --> 00:08:25,560
some things to kind of watch for when

00:08:21,930 --> 00:08:27,770
you're selecting something that is

00:08:25,560 --> 00:08:29,850
between what a vendor is doing is that

00:08:27,770 --> 00:08:31,500
for instance does the vendor provide

00:08:29,850 --> 00:08:33,390
thorough and the hardware and software

00:08:31,500 --> 00:08:35,250
release notes looking through these

00:08:33,390 --> 00:08:38,130
sorts of release notes can give you a

00:08:35,250 --> 00:08:40,170
really good idea of a vendor

00:08:38,130 --> 00:08:41,490
communication level like how do they

00:08:40,170 --> 00:08:43,500
communicate with you what's level of

00:08:41,490 --> 00:08:45,060
transparency that they provide do they

00:08:43,500 --> 00:08:46,830
provide access for instance to patch

00:08:45,060 --> 00:08:48,600
notes that can be extremely valuable to

00:08:46,830 --> 00:08:50,670
audit if you have the resources or the

00:08:48,600 --> 00:08:51,590
need to do it you want to know the Delta

00:08:50,670 --> 00:08:52,820
from whatever

00:08:51,590 --> 00:08:54,560
upstream software projects you're

00:08:52,820 --> 00:08:56,720
working from because anything that's

00:08:54,560 --> 00:09:00,140
different that the vendor has provided

00:08:56,720 --> 00:09:01,430
probably has undergone less review this

00:09:00,140 --> 00:09:02,810
is particularly important that you're

00:09:01,430 --> 00:09:08,420
working on any sort of safety credible

00:09:02,810 --> 00:09:10,100
system is there any sort of direct

00:09:08,420 --> 00:09:11,420
support channel available or are you

00:09:10,100 --> 00:09:13,970
going to have to go through a reseller

00:09:11,420 --> 00:09:17,450
and your needs here are probably going

00:09:13,970 --> 00:09:19,400
to differ because as a smaller

00:09:17,450 --> 00:09:21,650
organization while it might sound better

00:09:19,400 --> 00:09:23,210
to have a direct support channel it may

00:09:21,650 --> 00:09:24,530
be very well that the case that you're

00:09:23,210 --> 00:09:25,940
working with an extremely large vendor

00:09:24,530 --> 00:09:28,220
that it isn't going to listen to you or

00:09:25,940 --> 00:09:29,930
respond to you if you talk to them I can

00:09:28,220 --> 00:09:34,130
think of a few off the top of my head

00:09:29,930 --> 00:09:35,750
that I won't name right now and having a

00:09:34,130 --> 00:09:37,460
reseller that you go through means that

00:09:35,750 --> 00:09:39,500
they might have a lot more clout with

00:09:37,460 --> 00:09:41,120
whoever the vendor is and be able to get

00:09:39,500 --> 00:09:42,770
used to the right support people faster

00:09:41,120 --> 00:09:45,620
even though it might sound more

00:09:42,770 --> 00:09:50,420
inconvenient sometimes it's the other

00:09:45,620 --> 00:09:51,920
way around and next how long is software

00:09:50,420 --> 00:09:53,300
support normally provided for a chipset

00:09:51,920 --> 00:09:55,310
and not just the chipset

00:09:53,300 --> 00:09:57,410
you also want to consider like all the

00:09:55,310 --> 00:10:00,010
different components on on the board and

00:09:57,410 --> 00:10:01,850
make sure early on that all of

00:10:00,010 --> 00:10:06,520
everything that you're looking for is

00:10:01,850 --> 00:10:11,570
actually support and don't just consider

00:10:06,520 --> 00:10:14,870
the big stuff here really it doesn't

00:10:11,570 --> 00:10:17,570
really matter if your SOC is it

00:10:14,870 --> 00:10:19,100
supported for you know ten years if some

00:10:17,570 --> 00:10:21,380
smaller chip on your board it's almost

00:10:19,100 --> 00:10:24,980
imported for you know for the next two

00:10:21,380 --> 00:10:26,450
and suddenly there's no replacement that

00:10:24,980 --> 00:10:29,960
will fit in without having to do a board

00:10:26,450 --> 00:10:31,670
board we work so now let's kind of go

00:10:29,960 --> 00:10:34,750
back into the common features of the

00:10:31,670 --> 00:10:37,670
sorts of vendors provided education DSPs

00:10:34,750 --> 00:10:39,290
so because you're probably thinking at

00:10:37,670 --> 00:10:42,770
this point what if I have got some

00:10:39,290 --> 00:10:44,030
hardware this is all one all these this

00:10:42,770 --> 00:10:45,260
place is well and good for getting some

00:10:44,030 --> 00:10:46,940
reference board but we're making

00:10:45,260 --> 00:10:48,380
significant modifications to hardware

00:10:46,940 --> 00:10:49,670
for our application so how does this

00:10:48,380 --> 00:10:51,650
translate into building our own stuff

00:10:49,670 --> 00:10:56,870
instead of using an off-the-shelf

00:10:51,650 --> 00:10:58,320
turnkey solution and well the reference

00:10:56,870 --> 00:11:00,389
design to your friend

00:10:58,320 --> 00:11:02,759
if your small team I really hope

00:11:00,389 --> 00:11:05,519
whatever your design is that it's based

00:11:02,759 --> 00:11:07,829
off of a fun a reference design because

00:11:05,519 --> 00:11:09,360
if not and you'd better have some

00:11:07,829 --> 00:11:11,190
serious and has expertise so you're

00:11:09,360 --> 00:11:12,750
going to feel horribly but we're talking

00:11:11,190 --> 00:11:14,130
I mean this presentation is geared at

00:11:12,750 --> 00:11:16,380
small team so if you have that you're

00:11:14,130 --> 00:11:19,380
fine but in which case what are you

00:11:16,380 --> 00:11:21,089
doing it to talk you want to make sure

00:11:19,380 --> 00:11:22,730
to have a reference board first I can't

00:11:21,089 --> 00:11:25,500
stress that enough

00:11:22,730 --> 00:11:26,759
it's your baseline and especially since

00:11:25,500 --> 00:11:31,199
you won't likely have fully working

00:11:26,759 --> 00:11:33,149
hardware immediately it's it's what you

00:11:31,199 --> 00:11:34,470
need to get start a virgin size

00:11:33,149 --> 00:11:36,000
differences we start by getting a

00:11:34,470 --> 00:11:37,410
reference board from the vendor and

00:11:36,000 --> 00:11:39,750
getting an application working there

00:11:37,410 --> 00:11:42,269
with some of the required feature set

00:11:39,750 --> 00:11:44,190
and that means that we can only work we

00:11:42,269 --> 00:11:45,959
can worry about developing for any sort

00:11:44,190 --> 00:11:48,899
of newly add stuff later rather than

00:11:45,959 --> 00:11:50,670
trying to do everything at once and this

00:11:48,899 --> 00:11:53,880
has allowed us to save enormous lian

00:11:50,670 --> 00:11:57,810
development time so once you actually

00:11:53,880 --> 00:11:59,130
have the hardware that you're that

00:11:57,810 --> 00:12:01,199
you're applying to use even if it's only

00:11:59,130 --> 00:12:02,760
in the early development stage you can

00:12:01,199 --> 00:12:04,860
you can at least do start doing

00:12:02,760 --> 00:12:08,190
comparisons between the reference boards

00:12:04,860 --> 00:12:09,959
and it and you'll want to keep track of

00:12:08,190 --> 00:12:11,790
these differences and note the impact on

00:12:09,959 --> 00:12:13,560
the project the more things that the

00:12:11,790 --> 00:12:15,319
verge from the reference the more work

00:12:13,560 --> 00:12:17,399
that you've got cut out for yourself and

00:12:15,319 --> 00:12:18,870
the more important that this checklist

00:12:17,399 --> 00:12:23,360
becomes so you want to write everything

00:12:18,870 --> 00:12:26,610
down or better yet use an issue tracker

00:12:23,360 --> 00:12:28,560
this seems like it should be obvious but

00:12:26,610 --> 00:12:32,459
you'd be surprised how many how often

00:12:28,560 --> 00:12:36,449
this doesn't exist especially in a

00:12:32,459 --> 00:12:38,970
hardware design land so you want to at

00:12:36,449 --> 00:12:40,139
least have something whether it's you're

00:12:38,970 --> 00:12:42,000
using something like gear a redline

00:12:40,139 --> 00:12:43,649
track it doesn't really matter what it

00:12:42,000 --> 00:12:45,839
is get it in there

00:12:43,649 --> 00:12:48,029
for instance what we do is that all of

00:12:45,839 --> 00:12:50,610
these sorts of differences get turned

00:12:48,029 --> 00:12:51,899
into future tickets with subtasks as we

00:12:50,610 --> 00:12:53,880
need to have them so that way they don't

00:12:51,899 --> 00:12:55,980
get we don't lose track of them whenever

00:12:53,880 --> 00:12:57,360
our budget is changing and you can put

00:12:55,980 --> 00:13:00,120
together an established process to do

00:12:57,360 --> 00:13:01,410
this and it also helps out to start

00:13:00,120 --> 00:13:03,810
planning out the schedule to work on

00:13:01,410 --> 00:13:05,160
each of these changes and gives us an

00:13:03,810 --> 00:13:07,660
idea of how long it's going to take to

00:13:05,160 --> 00:13:10,149
work on each of these items

00:13:07,660 --> 00:13:12,639
that can the sorts of time estimates can

00:13:10,149 --> 00:13:15,790
give you a sense of what impact would be

00:13:12,639 --> 00:13:17,529
if any of these change which is

00:13:15,790 --> 00:13:19,779
particularly likely a small organization

00:13:17,529 --> 00:13:22,120
and this lit in other words letting you

00:13:19,779 --> 00:13:24,699
really reduce cut down on scope creep

00:13:22,120 --> 00:13:27,490
that most dreaded of two words that

00:13:24,699 --> 00:13:30,070
you'll ever hear while you're trying to

00:13:27,490 --> 00:13:32,320
be a deadline and because the last thing

00:13:30,070 --> 00:13:34,560
if you want far software development

00:13:32,320 --> 00:13:36,459
time to be the surprise from the chain

00:13:34,560 --> 00:13:44,709
ideally you push it all the last month

00:13:36,459 --> 00:13:46,440
hard work and so sorry so once you have

00:13:44,709 --> 00:13:53,050
your reference in fact for comparison

00:13:46,440 --> 00:13:54,760
you're going to want to take note of

00:13:53,050 --> 00:13:56,589
some of the specific ways in which your

00:13:54,760 --> 00:13:59,110
actual board diverges from the vendor

00:13:56,589 --> 00:14:01,690
reference for instance if you have a

00:13:59,110 --> 00:14:03,519
similar board schematic and there isn't

00:14:01,690 --> 00:14:06,370
too much change except for any sort of

00:14:03,519 --> 00:14:08,589
added peripherals you're likely to at

00:14:06,370 --> 00:14:11,440
least have the same processor memory as

00:14:08,589 --> 00:14:12,790
a reference board you might go up and

00:14:11,440 --> 00:14:14,889
down that but it's going to be pretty

00:14:12,790 --> 00:14:16,720
similar but it's very common to have for

00:14:14,889 --> 00:14:20,019
instance a separate a different set up

00:14:16,720 --> 00:14:24,790
for storage and most other peripherals

00:14:20,019 --> 00:14:26,230
and something that more closely matches

00:14:24,790 --> 00:14:28,089
what your program needs if it's the

00:14:26,230 --> 00:14:29,800
second iteration you're you're probably

00:14:28,089 --> 00:14:31,029
not going to see as many changes even

00:14:29,800 --> 00:14:33,250
though it will probably be reduced from

00:14:31,029 --> 00:14:34,360
what the first iteration is but

00:14:33,250 --> 00:14:36,040
presumably or building something

00:14:34,360 --> 00:14:38,410
interesting there's going to also be at

00:14:36,040 --> 00:14:41,500
least a few sensors or control

00:14:38,410 --> 00:14:43,899
interfaces connected whether directly to

00:14:41,500 --> 00:14:45,940
the source through some indirect more

00:14:43,899 --> 00:14:47,730
indirect means and to get a little more

00:14:45,940 --> 00:14:49,990
specific about what you'll have to do

00:14:47,730 --> 00:14:53,610
you're going to want to figure out where

00:14:49,990 --> 00:14:57,519
each piece of hardware is connected so

00:14:53,610 --> 00:15:00,819
whatever pin pin setup that you have you

00:14:57,519 --> 00:15:01,899
want to be able to to alter chances are

00:15:00,819 --> 00:15:03,339
you're not going to use the same setup

00:15:01,899 --> 00:15:05,560
of whatever the reference design is

00:15:03,339 --> 00:15:09,010
using either because your hardware

00:15:05,560 --> 00:15:10,930
designer has decided that it's much more

00:15:09,010 --> 00:15:12,279
convenient to do it this other way or

00:15:10,930 --> 00:15:14,589
it's actually impossible for them to

00:15:12,279 --> 00:15:16,720
route it similarly to the way that was

00:15:14,589 --> 00:15:18,910
done because of things that we need to

00:15:16,720 --> 00:15:19,920
be added for your application or just

00:15:18,910 --> 00:15:25,040
because the

00:15:19,920 --> 00:15:28,410
it may be some cost related reason but

00:15:25,040 --> 00:15:30,660
what it comes down to is the most SS you

00:15:28,410 --> 00:15:33,420
support multiple configurations and the

00:15:30,660 --> 00:15:36,059
reference boards often just don't have

00:15:33,420 --> 00:15:37,259
something that fits what you do because

00:15:36,059 --> 00:15:38,759
they really are trying to show off

00:15:37,259 --> 00:15:43,309
different features of the board rather

00:15:38,759 --> 00:15:46,259
than you know make a final product so

00:15:43,309 --> 00:15:47,129
once you've taken down all this what

00:15:46,259 --> 00:15:49,679
you're going to want to be doing is

00:15:47,129 --> 00:15:51,179
updating the device tree on the most

00:15:49,679 --> 00:15:52,919
device tree platforms board files and

00:15:51,179 --> 00:15:54,929
others to describe what the hardware is

00:15:52,919 --> 00:15:56,910
that you do have and while the details

00:15:54,929 --> 00:15:58,319
of updating that are pretty out of scope

00:15:56,910 --> 00:15:59,759
here the reference design is going to

00:15:58,319 --> 00:16:02,639
have one and you're pretty much going to

00:15:59,759 --> 00:16:06,019
be basing it off of that to just

00:16:02,639 --> 00:16:09,389
describe where your design differs and

00:16:06,019 --> 00:16:11,910
then once you've kind of gotten that in

00:16:09,389 --> 00:16:14,100
you can update add in whatever drivers

00:16:11,910 --> 00:16:16,559
that you need for your ad for your added

00:16:14,100 --> 00:16:18,720
peripherals and this is where getting

00:16:16,559 --> 00:16:20,369
involved in the hardware development

00:16:18,720 --> 00:16:22,290
process early on can really help because

00:16:20,369 --> 00:16:24,480
you can work with your hardware designer

00:16:22,290 --> 00:16:26,939
to make sure that to find out exactly

00:16:24,480 --> 00:16:29,149
what sort of persons they're adding when

00:16:26,939 --> 00:16:31,470
whether whether there's any sort of

00:16:29,149 --> 00:16:34,319
upstream drivers already available in

00:16:31,470 --> 00:16:36,899
the other kernel version what and really

00:16:34,319 --> 00:16:38,279
find out then does the kernel version

00:16:36,899 --> 00:16:39,749
that you're planning on basing I already

00:16:38,279 --> 00:16:42,449
have drivers for that are you going to

00:16:39,749 --> 00:16:44,819
need to back port them from from a new

00:16:42,449 --> 00:16:47,489
newer car release how difficult is that

00:16:44,819 --> 00:16:49,589
going to be and while in an ideal world

00:16:47,489 --> 00:16:55,049
you would always be working with

00:16:49,589 --> 00:16:57,209
upstream as if you're following what I'm

00:16:55,049 --> 00:16:58,589
saying early about using the software

00:16:57,209 --> 00:16:59,999
provided by a vendor in order to save

00:16:58,589 --> 00:17:03,449
yourself time chances are you're not

00:16:59,999 --> 00:17:05,929
going to get exactly the latest so I

00:17:03,449 --> 00:17:08,699
want to make sure that you have that

00:17:05,929 --> 00:17:09,959
it's it's a little bit you're going to

00:17:08,699 --> 00:17:13,470
have more work cut out for you if you're

00:17:09,959 --> 00:17:15,149
doing more cutting-edge stuff and on

00:17:13,470 --> 00:17:17,459
that note if you're going to be a lot

00:17:15,149 --> 00:17:19,860
doing a lot of kernel hacking you're

00:17:17,459 --> 00:17:21,779
going to want to use a several separate

00:17:19,860 --> 00:17:23,549
kernel get draw the Tauri if you

00:17:21,779 --> 00:17:25,019
diverged significantly from the

00:17:23,549 --> 00:17:28,799
reference so basically having your own

00:17:25,019 --> 00:17:31,139
downstream tree and reason for this is

00:17:28,799 --> 00:17:32,230
that while all of the build systems

00:17:31,139 --> 00:17:35,049
provide

00:17:32,230 --> 00:17:36,970
a method for adding n patches on top of

00:17:35,049 --> 00:17:38,169
different packages if you if you're

00:17:36,970 --> 00:17:41,309
adding a new bunch of drivers this is

00:17:38,169 --> 00:17:44,290
rapidly going to become unmaintainable

00:17:41,309 --> 00:17:47,049
because as good of a tool that quilt is

00:17:44,290 --> 00:17:50,460
for anyone who's used it before it's

00:17:47,049 --> 00:17:52,150
nowhere near as capable as using

00:17:50,460 --> 00:17:54,760
actually using a tool that's designed

00:17:52,150 --> 00:17:56,530
for this purpose and you'll end up

00:17:54,760 --> 00:17:58,299
spending a lot more time doing that then

00:17:56,530 --> 00:17:58,570
you just using a tool that's good for

00:17:58,299 --> 00:18:00,730
that

00:17:58,570 --> 00:18:04,480
so once you've done all of this and

00:18:00,730 --> 00:18:05,880
finally put together a system that

00:18:04,480 --> 00:18:08,130
supports the hardware you need and

00:18:05,880 --> 00:18:11,049
another else you're going to actually

00:18:08,130 --> 00:18:13,570
and you know your whoever is working on

00:18:11,049 --> 00:18:18,010
the application side if it's not you has

00:18:13,570 --> 00:18:19,720
already been taking some time to work on

00:18:18,010 --> 00:18:21,460
that the parts that they can in the

00:18:19,720 --> 00:18:23,380
meantime you're going to want to start

00:18:21,460 --> 00:18:27,160
integrating that into your and your main

00:18:23,380 --> 00:18:28,660
build system and this is obviously

00:18:27,160 --> 00:18:30,640
hugely dependent on what it is that

00:18:28,660 --> 00:18:33,130
you're trying to build but most

00:18:30,640 --> 00:18:34,390
interesting applications are there's a

00:18:33,130 --> 00:18:35,740
lot of common features here because most

00:18:34,390 --> 00:18:38,230
interesting applications are going to

00:18:35,740 --> 00:18:41,080
have some number of dependencies between

00:18:38,230 --> 00:18:42,669
them so you're going to want to note

00:18:41,080 --> 00:18:45,669
whatever compile and run time defenses

00:18:42,669 --> 00:18:46,900
you have and in the likely case that

00:18:45,669 --> 00:18:48,700
you're building something that shouldn't

00:18:46,900 --> 00:18:50,770
require user interaction to start your

00:18:48,700 --> 00:18:54,220
program you'll probably want to be

00:18:50,770 --> 00:18:57,460
creating a service that starts up when

00:18:54,220 --> 00:19:01,630
it's intended or possibly even restarts

00:18:57,460 --> 00:19:05,650
itself when it goes down also we're

00:19:01,630 --> 00:19:08,679
thinking about early on is how it is

00:19:05,650 --> 00:19:11,530
that you want to deploy for instance

00:19:08,679 --> 00:19:13,090
Trust at Virgin Galactic one of the

00:19:11,530 --> 00:19:16,990
things that the key things that we

00:19:13,090 --> 00:19:18,760
follow is test as you fly which means we

00:19:16,990 --> 00:19:21,400
are one of our goals is to minimize

00:19:18,760 --> 00:19:24,040
differences between Houston development

00:19:21,400 --> 00:19:26,049
versus production four which is for us a

00:19:24,040 --> 00:19:30,490
flight environment or working on the

00:19:26,049 --> 00:19:31,990
test camp and that means that in this

00:19:30,490 --> 00:19:34,690
case there's actually actually don't

00:19:31,990 --> 00:19:38,710
want to have differences between you

00:19:34,690 --> 00:19:40,750
know what's what you have in in all

00:19:38,710 --> 00:19:42,580
parts of your deployment but if you have

00:19:40,750 --> 00:19:44,080
a different case where say you know you

00:19:42,580 --> 00:19:46,300
know that your target system is going to

00:19:44,080 --> 00:19:49,960
have a smaller amount of

00:19:46,300 --> 00:19:52,030
memory that source space than your than

00:19:49,960 --> 00:19:54,730
what when what you're using too early

00:19:52,030 --> 00:19:56,290
bring up for debug then you might want

00:19:54,730 --> 00:19:57,940
to have you know multiple different

00:19:56,290 --> 00:19:59,980
builds one for development one to

00:19:57,940 --> 00:20:02,010
production or just provide a set of

00:19:59,980 --> 00:20:04,180
that's easier to use for debugging

00:20:02,010 --> 00:20:06,070
essentially taking advantage of whatever

00:20:04,180 --> 00:20:10,020
options build system provides that can

00:20:06,070 --> 00:20:10,020
help improve your workflow and

00:20:10,230 --> 00:20:16,800
particularly note examples that that

00:20:14,920 --> 00:20:19,090
these build systems can provide for

00:20:16,800 --> 00:20:21,490
making a package repository that your

00:20:19,090 --> 00:20:23,920
target machines can grab from I know

00:20:21,490 --> 00:20:25,990
that at least both open wrt and Yocto

00:20:23,920 --> 00:20:27,670
make this pretty straightforward to

00:20:25,990 --> 00:20:29,590
create the takács repository I think

00:20:27,670 --> 00:20:31,300
open Tory to is mostly go package and

00:20:29,590 --> 00:20:34,960
doke seems to be able to use whatever

00:20:31,300 --> 00:20:38,860
you want whether rpm or a package or

00:20:34,960 --> 00:20:41,920
something else but at any rate you can

00:20:38,860 --> 00:20:45,690
use that in order to get your other

00:20:41,920 --> 00:20:47,950
developers moving faster speaking of

00:20:45,690 --> 00:20:51,960
packages though none of these it's

00:20:47,950 --> 00:20:55,090
really a substitute for instituting some

00:20:51,960 --> 00:20:56,710
simple best practices so now that we

00:20:55,090 --> 00:20:59,530
kind of got old all the things put

00:20:56,710 --> 00:21:01,750
together for how you want to build up

00:20:59,530 --> 00:21:04,630
build up your system some things that

00:21:01,750 --> 00:21:07,120
you'd want to do is to use version

00:21:04,630 --> 00:21:08,260
control another seemingly obvious thing

00:21:07,120 --> 00:21:10,330
that seems to fall by the wayside

00:21:08,260 --> 00:21:13,060
because when it comes to build system

00:21:10,330 --> 00:21:14,650
because it seems that at this point that

00:21:13,060 --> 00:21:16,420
a lot of people have accepted that

00:21:14,650 --> 00:21:18,610
version control is a reasonable thing to

00:21:16,420 --> 00:21:20,350
do for a lot of application software you

00:21:18,610 --> 00:21:22,960
know working on the kernel or anything

00:21:20,350 --> 00:21:26,050
like that but then on build systems it

00:21:22,960 --> 00:21:27,160
turns out that like oh I received the

00:21:26,050 --> 00:21:28,420
tarball or tip soil

00:21:27,160 --> 00:21:30,570
clearly that's the fine way to do things

00:21:28,420 --> 00:21:33,040
let's just make copies of directory I

00:21:30,570 --> 00:21:34,540
can't emphasize an accent use not using

00:21:33,040 --> 00:21:36,490
a version control system is asking for

00:21:34,540 --> 00:21:39,010
truffle you don't want to fall into that

00:21:36,490 --> 00:21:40,870
trap you or your teammates are going to

00:21:39,010 --> 00:21:43,240
make mistakes and you're going to want

00:21:40,870 --> 00:21:46,240
to make sure that you have something to

00:21:43,240 --> 00:21:48,280
come back to it and be able to figure

00:21:46,240 --> 00:21:49,840
out what went wrong and win but even

00:21:48,280 --> 00:21:51,970
better than just using version control

00:21:49,840 --> 00:21:54,640
because anyone anyone can just throw

00:21:51,970 --> 00:21:56,750
things in repository and do have

00:21:54,640 --> 00:21:59,900
something that's nearly useless

00:21:56,750 --> 00:22:04,370
is use version control like the upstream

00:21:59,900 --> 00:22:05,060
project does whether you're working with

00:22:04,370 --> 00:22:07,760
openembedded

00:22:05,060 --> 00:22:10,910
or open to route here motorists and that

00:22:07,760 --> 00:22:13,580
usually means making small modular

00:22:10,910 --> 00:22:15,470
commits at reading the commit log to

00:22:13,580 --> 00:22:17,870
find out how they've done this in the

00:22:15,470 --> 00:22:21,020
past because all of these projects have

00:22:17,870 --> 00:22:22,670
had people learning from from the past

00:22:21,020 --> 00:22:24,050
past mistakes essentially and put

00:22:22,670 --> 00:22:30,050
together an established process for

00:22:24,050 --> 00:22:32,390
doing this and doing acting like

00:22:30,050 --> 00:22:35,750
upstream helps in a lot of in a lot of

00:22:32,390 --> 00:22:38,240
ways because you also get the benefit

00:22:35,750 --> 00:22:40,280
from possibly pulling in new changes

00:22:38,240 --> 00:22:41,900
from the upstream project in making that

00:22:40,280 --> 00:22:46,880
easier or pushing back in the other

00:22:41,900 --> 00:22:48,530
direction which can be a hard sell

00:22:46,880 --> 00:22:50,660
sometimes especially if you're working

00:22:48,530 --> 00:22:53,900
at an industry that traditionally hasn't

00:22:50,660 --> 00:22:55,760
been doing this so which can lead to the

00:22:53,900 --> 00:22:57,740
question which I mean people give an

00:22:55,760 --> 00:23:00,500
entire talk on this I'm sure there's at

00:22:57,740 --> 00:23:03,860
least one here but like why it's

00:23:00,500 --> 00:23:06,770
upstreaming important and at the high

00:23:03,860 --> 00:23:09,950
level it boils down to you get reduced

00:23:06,770 --> 00:23:12,110
maintenance costs over time it pays

00:23:09,950 --> 00:23:14,870
dividends if you do it sooner because

00:23:12,110 --> 00:23:15,920
supporting local changes required to

00:23:14,870 --> 00:23:18,500
support whatever Hardware you're

00:23:15,920 --> 00:23:20,420
creating becomes a lot easier you start

00:23:18,500 --> 00:23:23,120
seeing higher code quality because when

00:23:20,420 --> 00:23:25,820
you get you've got more eyes on the code

00:23:23,120 --> 00:23:28,310
upstream reviewers are going to note the

00:23:25,820 --> 00:23:30,050
code base better then the new probably

00:23:28,310 --> 00:23:32,060
if you're working on a small team with

00:23:30,050 --> 00:23:34,280
you only some of the areas of expertise

00:23:32,060 --> 00:23:36,380
that you can have and can tell you how

00:23:34,280 --> 00:23:37,550
to improve or more specifically what

00:23:36,380 --> 00:23:42,200
you'll need to change before they'll

00:23:37,550 --> 00:23:45,710
accept it and honestly the ones are

00:23:42,200 --> 00:23:48,050
really a cell to your higher management

00:23:45,710 --> 00:23:52,520
is that it's actually just really good

00:23:48,050 --> 00:23:56,060
low cost positive PR because after all

00:23:52,520 --> 00:23:58,280
your organization is benefiting from the

00:23:56,060 --> 00:24:00,680
work of others and it's just kind of the

00:23:58,280 --> 00:24:01,980
right thing to do to also give back to

00:24:00,680 --> 00:24:06,510
the greeny

00:24:01,980 --> 00:24:08,220
and really we're all tomato you're using

00:24:06,510 --> 00:24:09,300
software the built that is knows built

00:24:08,220 --> 00:24:11,720
in collaboration of a whole bunch of

00:24:09,300 --> 00:24:14,430
people like a lot of them are here and

00:24:11,720 --> 00:24:16,140
if you're not a become the organization

00:24:14,430 --> 00:24:18,450
isn't involved in this process and your

00:24:16,140 --> 00:24:21,720
competitors are you lose out an enormous

00:24:18,450 --> 00:24:23,250
opportunity to really get involved in

00:24:21,720 --> 00:24:25,980
the direction of the project in a way

00:24:23,250 --> 00:24:28,110
that is beneficial to you your company

00:24:25,980 --> 00:24:30,360
whatever it is that you're doing while

00:24:28,110 --> 00:24:31,920
anyone else who's using the same thing

00:24:30,360 --> 00:24:34,110
gets to take full advantage of being

00:24:31,920 --> 00:24:36,600
involved in this process and over time

00:24:34,110 --> 00:24:38,190
the cost to maintain these local changes

00:24:36,600 --> 00:24:41,790
if you're not involved in this is going

00:24:38,190 --> 00:24:44,340
to add up substantially I know one

00:24:41,790 --> 00:24:50,550
project that I was involved in a few

00:24:44,340 --> 00:24:52,830
years ago had had a comparison between a

00:24:50,550 --> 00:24:55,890
few different groups one of one of which

00:24:52,830 --> 00:24:58,170
was heavily involved in an up streaming

00:24:55,890 --> 00:25:01,020
process from one of which was not and

00:24:58,170 --> 00:25:04,730
the time delta between the upstream

00:25:01,020 --> 00:25:07,370
process was on the order of months so

00:25:04,730 --> 00:25:09,870
you want to be involved in and that and

00:25:07,370 --> 00:25:11,550
speaking of local changes you're going

00:25:09,870 --> 00:25:14,910
to want to take take steps to make sure

00:25:11,550 --> 00:25:17,490
that up streaming is easy to manage and

00:25:14,910 --> 00:25:21,150
one way one great way to do that is to

00:25:17,490 --> 00:25:23,010
set up a build system for your build

00:25:21,150 --> 00:25:25,440
system or a continuous integration

00:25:23,010 --> 00:25:28,620
system to handle these sorts of things

00:25:25,440 --> 00:25:30,930
so it doesn't really matter what tool

00:25:28,620 --> 00:25:32,250
you use to do this whether it's junk

00:25:30,930 --> 00:25:37,410
into gold but or whatever you want to

00:25:32,250 --> 00:25:40,800
have something because especially with

00:25:37,410 --> 00:25:41,820
fewer eyes on it it's going to be in a

00:25:40,800 --> 00:25:45,990
small team it's going to be easier to

00:25:41,820 --> 00:25:50,130
make these sorts of mistakes so you want

00:25:45,990 --> 00:25:52,050
to have be using an option to use local

00:25:50,130 --> 00:25:56,250
mirrors for whatever build system you're

00:25:52,050 --> 00:25:58,350
using because you'd let you don't really

00:25:56,250 --> 00:26:01,020
want to be dependent on any sort of

00:25:58,350 --> 00:26:04,230
third party ready so it's a note and you

00:26:01,020 --> 00:26:09,020
say on the mode so it goes down and your

00:26:04,230 --> 00:26:11,970
build breaks not really what you want so

00:26:09,020 --> 00:26:13,680
doing things that way can really help if

00:26:11,970 --> 00:26:15,000
you take advantage of whatever sorts of

00:26:13,680 --> 00:26:16,410
shared caches

00:26:15,000 --> 00:26:20,340
real system provides this can also

00:26:16,410 --> 00:26:21,870
really cut down on build time and reduce

00:26:20,340 --> 00:26:25,260
the time that developers avoiding to

00:26:21,870 --> 00:26:30,060
find out hey when I made this change and

00:26:25,260 --> 00:26:36,810
I submitted it did it work or is this

00:26:30,060 --> 00:26:39,780
ready to be reviewed and there's just an

00:26:36,810 --> 00:26:43,020
enormous value that you get from having

00:26:39,780 --> 00:26:45,720
working automated builds you can make

00:26:43,020 --> 00:26:47,990
sure by doing this and that there's

00:26:45,720 --> 00:26:50,640
almost never actually any broken builds

00:26:47,990 --> 00:26:52,290
because if you don't do that and you end

00:26:50,640 --> 00:26:55,830
up with broken build it's going to make

00:26:52,290 --> 00:26:57,660
it a lot harder her and one who tried to

00:26:55,830 --> 00:27:01,800
track something down and tried to use

00:26:57,660 --> 00:27:04,080
bisect to solve a problem and found out

00:27:01,800 --> 00:27:07,590
that a whole bunch of builds during the

00:27:04,080 --> 00:27:11,670
bisection process failed I know your

00:27:07,590 --> 00:27:13,290
pain and look because bugs will be

00:27:11,670 --> 00:27:15,900
introduced if you remove if you're

00:27:13,290 --> 00:27:17,370
trying to move quickly and you'll waste

00:27:15,900 --> 00:27:20,490
a lot of time tracking down the problem

00:27:17,370 --> 00:27:21,840
if if a bunch of commits don't build you

00:27:20,490 --> 00:27:24,150
want you to hist the history of what you

00:27:21,840 --> 00:27:26,700
do to work for you not against you

00:27:24,150 --> 00:27:30,620
and for tracking down looks that it's

00:27:26,700 --> 00:27:34,100
really the only way to do it and

00:27:30,620 --> 00:27:37,110
possibly deploying to it TFTP server

00:27:34,100 --> 00:27:38,910
using using this sort of setup can make

00:27:37,110 --> 00:27:40,920
sure that everyone on the network on

00:27:38,910 --> 00:27:44,670
whatever network using can easily boot

00:27:40,920 --> 00:27:47,700
the latest version and save time that

00:27:44,670 --> 00:27:49,770
way and finally the last common-sense

00:27:47,700 --> 00:27:51,420
item that i'm going to add here is to do

00:27:49,770 --> 00:27:53,220
make sure you're doing code reviews for

00:27:51,420 --> 00:27:54,930
this some reason this is also a common

00:27:53,220 --> 00:27:56,730
blind spot when it comes to build

00:27:54,930 --> 00:27:57,990
systems usually it's considered obvious

00:27:56,730 --> 00:27:59,520
that code reviews are necessary for

00:27:57,990 --> 00:28:01,770
applications and kernels at the moment

00:27:59,520 --> 00:28:03,510
but a lot of people seem to feel that

00:28:01,770 --> 00:28:06,690
distribution build system recipes

00:28:03,510 --> 00:28:08,670
scripts and so forth and everything

00:28:06,690 --> 00:28:11,040
associated with that or somehow a merits

00:28:08,670 --> 00:28:12,360
special exclusion from this but if your

00:28:11,040 --> 00:28:14,280
operating system build system doesn't

00:28:12,360 --> 00:28:16,470
work it doesn't matter if your

00:28:14,280 --> 00:28:21,240
application is perfect your product

00:28:16,470 --> 00:28:22,530
still doesn't work and another selling

00:28:21,240 --> 00:28:23,790
point is that the overhead for doing

00:28:22,530 --> 00:28:25,410
this it's pretty low

00:28:23,790 --> 00:28:27,990
when you're working with a small team

00:28:25,410 --> 00:28:29,820
less than five people code you

00:28:27,990 --> 00:28:31,530
you can go pretty fast this way when you

00:28:29,820 --> 00:28:33,900
start getting large teams of diffusion

00:28:31,530 --> 00:28:35,010
of responsibility in some ways it's good

00:28:33,900 --> 00:28:37,140
because you have more people to do

00:28:35,010 --> 00:28:38,550
reviews but in the other sense that

00:28:37,140 --> 00:28:41,100
starts meeting that the volume just

00:28:38,550 --> 00:28:42,179
parts increasing it can be more

00:28:41,100 --> 00:28:48,630
difficult to figure out who should be

00:28:42,179 --> 00:28:49,830
doing what and if you're going to be

00:28:48,630 --> 00:28:51,030
doing reviews you want to make sure that

00:28:49,830 --> 00:28:54,480
there's at least common standards that

00:28:51,030 --> 00:28:55,830
everyone's aware of whether this is this

00:28:54,480 --> 00:28:57,990
was kind of vary by project of course

00:28:55,830 --> 00:29:01,080
but if you're making you know patch

00:28:57,990 --> 00:29:02,010
modifications to say these new blocks

00:29:01,080 --> 00:29:03,720
it's going to be different than you're

00:29:02,010 --> 00:29:08,780
making a patch modification to the

00:29:03,720 --> 00:29:10,980
kernel or four or four gilepsy or four

00:29:08,780 --> 00:29:12,630
you know one of the different math

00:29:10,980 --> 00:29:18,290
libraries but you want to use whatever

00:29:12,630 --> 00:29:20,640
code style is appropriate for that so

00:29:18,290 --> 00:29:23,210
you want to same line this process using

00:29:20,640 --> 00:29:25,500
whatever chat varies checklist and

00:29:23,210 --> 00:29:27,750
scripts anything you can automate is

00:29:25,500 --> 00:29:29,309
good whether there's things like check

00:29:27,750 --> 00:29:32,540
batch available for the kernel in and

00:29:29,309 --> 00:29:35,280
just really make sure that the scope is

00:29:32,540 --> 00:29:40,710
recognized by everyone involved who's

00:29:35,280 --> 00:29:43,740
doing reviews so in summary if you're

00:29:40,710 --> 00:29:44,670
putting together a new system you want

00:29:43,740 --> 00:29:46,380
to make sure that you're involved and

00:29:44,670 --> 00:29:47,790
the hardware design early on as a

00:29:46,380 --> 00:29:50,480
software developer so that way it

00:29:47,790 --> 00:29:53,160
reduces a number surprises for everybody

00:29:50,480 --> 00:29:55,140
you want to make sure to use whatever

00:29:53,160 --> 00:29:58,500
reference words are available and and

00:29:55,140 --> 00:30:00,150
use that to determine the Delta and

00:29:58,500 --> 00:30:02,850
figure out how much work there is to do

00:30:00,150 --> 00:30:04,500
and how long it's going to take and use

00:30:02,850 --> 00:30:08,429
the vendor SDK because they've already

00:30:04,500 --> 00:30:09,840
tested it out with the wood most of the

00:30:08,429 --> 00:30:12,540
setup that you have even if it's not

00:30:09,840 --> 00:30:13,710
identical to what you're building you

00:30:12,540 --> 00:30:18,210
don't want to use version control

00:30:13,710 --> 00:30:21,150
because that's mention history is should

00:30:18,210 --> 00:30:23,160
work for you and not against you and you

00:30:21,150 --> 00:30:25,050
want to work with stream projects as

00:30:23,160 --> 00:30:26,280
much as possible because I mean that's

00:30:25,050 --> 00:30:29,160
just going to save you time in the long

00:30:26,280 --> 00:30:32,370
run and if you're trying to build a

00:30:29,160 --> 00:30:36,520
successful project to over several years

00:30:32,370 --> 00:30:39,820
you want to think in the long term so

00:30:36,520 --> 00:30:41,890
that's all I got with that I hope you

00:30:39,820 --> 00:30:49,500
enjoyed it then should be off to a good

00:30:41,890 --> 00:30:49,500
start anyone have any question yes Lee

00:30:59,850 --> 00:31:08,080
I've seen both it outside so the

00:31:04,000 --> 00:31:09,400
question was like does if someone is up

00:31:08,080 --> 00:31:12,040
streaming do they typically go through

00:31:09,400 --> 00:31:14,230
their vendor or elsewhere I'd say it

00:31:12,040 --> 00:31:16,380
depends on whether that vendor has a

00:31:14,230 --> 00:31:18,730
habit of moving things upstream or not

00:31:16,380 --> 00:31:20,559
and whether they're interested in being

00:31:18,730 --> 00:31:22,570
involved in the process but it's

00:31:20,559 --> 00:31:31,330
definitely a case-by-case basis at least

00:31:22,570 --> 00:31:34,690
in my experience anybody else once

00:31:31,330 --> 00:31:35,960
that's right okay great well thank you

00:31:34,690 --> 00:31:40,880
all for coming

00:31:35,960 --> 00:31:40,880

YouTube URL: https://www.youtube.com/watch?v=W-E-DxWA4gc


