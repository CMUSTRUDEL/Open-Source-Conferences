Title: From Growing Trend to Gold Standard: Tooling Linux for the Future of Embedded Systems
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	From Growing Trend to Gold Standard: Tooling Linux for the Future of Embedded Systems - Patrick Quairoli, SUSE

With embedded systems projected to experience steady growth in the coming years, more organizations are seeking to leverage the value and benefits of Linux. To manage and keep pace with this trend, embedded system developers face increasing pressure to simplify their development process, while working through the challenges of bringing products to market faster and more securely.

Experience and expertise in developing and managing Linux systems is invaluable in this regard, and can help accelerate embedded development. Come join the conversation about how the components of a quality-engineered, operating system provides greater platform diversity and advanced tooling, along with enterprise-ready system benefits through expert support, security, training, and enhanced flexibility.

About Patrick Quairoli
20+ years of IT experience with 10+ years focused on Linux and Open Source solutions. Previously responsible for the Lenovo and IBM global hardware alliances at SUSE. Patrick now leads the IHV and Embedded technology team at SUSE focused on business development, and joint go-to market strategy around SUSE's key solutions.
Captions: 
	00:00:00,030 --> 00:00:04,319
okay so my name is Patrick Rowley I'm a

00:00:02,550 --> 00:00:07,410
director of alliances and embedded

00:00:04,319 --> 00:00:09,780
technology at Sousa actually joining me

00:00:07,410 --> 00:00:12,230
today is to e two E's the program

00:00:09,780 --> 00:00:14,040
manager for our embedded program and

00:00:12,230 --> 00:00:15,630
going to talk to you a little bit today

00:00:14,040 --> 00:00:18,539
about what we do in the embedded space

00:00:15,630 --> 00:00:20,640
what we do an open-source in general and

00:00:18,539 --> 00:00:22,109
feel free to ask any questions at any

00:00:20,640 --> 00:00:29,220
point in time and I'll try and get them

00:00:22,109 --> 00:00:32,340
answered for you okay so with in Susa we

00:00:29,220 --> 00:00:34,920
kind of set some guidelines on how we

00:00:32,340 --> 00:00:36,870
want to be perceived in the market and

00:00:34,920 --> 00:00:38,809
what we focus in on is you know

00:00:36,870 --> 00:00:42,660
controlling our infrastructure

00:00:38,809 --> 00:00:44,789
optimizing operations and improving or

00:00:42,660 --> 00:00:46,829
innovating faster and we do this in a

00:00:44,789 --> 00:00:48,780
number of different ways and as we go

00:00:46,829 --> 00:00:51,239
through the conversation today we're

00:00:48,780 --> 00:00:53,190
going to harken back to some of these

00:00:51,239 --> 00:00:55,680
topics about how do you maintain control

00:00:53,190 --> 00:00:57,120
over your infrastructure in this case it

00:00:55,680 --> 00:00:59,219
could either be your infrastructure or

00:00:57,120 --> 00:01:01,079
the infrastructure that you're providing

00:00:59,219 --> 00:01:03,420
to your customers through your solutions

00:01:01,079 --> 00:01:05,880
how do you optimize operations how do

00:01:03,420 --> 00:01:07,830
you really take advantage of not only

00:01:05,880 --> 00:01:10,470
your support organization your

00:01:07,830 --> 00:01:12,900
development organization so that you can

00:01:10,470 --> 00:01:14,790
build solutions that focus on the

00:01:12,900 --> 00:01:17,670
industry that you're interested in and

00:01:14,790 --> 00:01:20,340
not focus in on something like the

00:01:17,670 --> 00:01:21,450
operating system and innovate faster and

00:01:20,340 --> 00:01:23,790
we'll talk a little bit about how we

00:01:21,450 --> 00:01:25,590
approach innovation at Susa and what we

00:01:23,790 --> 00:01:29,579
do that makes us feel that we are highly

00:01:25,590 --> 00:01:31,439
innovative so people have been coming up

00:01:29,579 --> 00:01:33,180
and say hey I didn't realize Susa had an

00:01:31,439 --> 00:01:37,350
embedded product or I didn't realize

00:01:33,180 --> 00:01:38,970
that embedded Susa was a thing we don't

00:01:37,350 --> 00:01:41,600
actually have a project and we don't

00:01:38,970 --> 00:01:44,939
have a product what we have as a program

00:01:41,600 --> 00:01:48,630
if you were in the keynote session

00:01:44,939 --> 00:01:50,520
earlier this week when leanness was

00:01:48,630 --> 00:01:53,579
asked the question about will there be

00:01:50,520 --> 00:01:55,579
an edge kernel a small kernel that is

00:01:53,579 --> 00:01:57,869
just for edge infrastructure devices

00:01:55,579 --> 00:01:59,850
leanest this response was pretty on par

00:01:57,869 --> 00:02:03,240
with the way we approach things which is

00:01:59,850 --> 00:02:05,759
no Linux is a general purpose operating

00:02:03,240 --> 00:02:08,550
system and the more you focus that

00:02:05,759 --> 00:02:10,619
operating system the more you focus on

00:02:08,550 --> 00:02:13,950
the solution that you want to provide

00:02:10,619 --> 00:02:14,220
more planning you put in to how you want

00:02:13,950 --> 00:02:15,960
to

00:02:14,220 --> 00:02:18,030
present yourself out into the market

00:02:15,960 --> 00:02:19,620
that's what creates the opportunity

00:02:18,030 --> 00:02:23,640
that's what creates the innovation the

00:02:19,620 --> 00:02:25,950
value so it's our objective to focus on

00:02:23,640 --> 00:02:27,920
the operating system so that you can

00:02:25,950 --> 00:02:31,380
focus in on what you want to focus in on

00:02:27,920 --> 00:02:33,210
now at the same time we don't go and put

00:02:31,380 --> 00:02:36,450
out a different kernel for embedded

00:02:33,210 --> 00:02:37,980
space our Linux kernel is the same Linux

00:02:36,450 --> 00:02:40,920
kernel that we run on the Raspberry Pi

00:02:37,980 --> 00:02:43,350
as we run on IBM System z mainframes as

00:02:40,920 --> 00:02:45,900
well as Intel and power and everything

00:02:43,350 --> 00:02:47,880
in between so it's a common code base

00:02:45,900 --> 00:02:50,340
that we use and that we maintain and we

00:02:47,880 --> 00:02:54,030
support but we do provide you

00:02:50,340 --> 00:02:57,090
opportunities to scale and shrink that

00:02:54,030 --> 00:02:58,620
codebase in a supportable fashion so

00:02:57,090 --> 00:03:00,959
that you can take that solution to

00:02:58,620 --> 00:03:03,540
market and you know that we still run

00:03:00,959 --> 00:03:05,670
that through our same QA process our

00:03:03,540 --> 00:03:07,920
validation process and if you ever call

00:03:05,670 --> 00:03:10,410
for a support that will provide it at

00:03:07,920 --> 00:03:13,500
the same time we've got a program in

00:03:10,410 --> 00:03:16,080
place because we recognize that the

00:03:13,500 --> 00:03:18,480
price that you buy for or the price you

00:03:16,080 --> 00:03:20,430
pay for an Enterprise Linux distribution

00:03:18,480 --> 00:03:22,530
is going to be very different for

00:03:20,430 --> 00:03:25,500
something that you may want to embed in

00:03:22,530 --> 00:03:28,500
a very small solution that's going to

00:03:25,500 --> 00:03:33,600
scale to millions of units versus tens

00:03:28,500 --> 00:03:35,190
of thousands of units so we've actually

00:03:33,600 --> 00:03:40,890
been in the embedded space for quite a

00:03:35,190 --> 00:03:43,500
long time probably maybe 15 years or so

00:03:40,890 --> 00:03:44,760
and actually our first foray into the

00:03:43,500 --> 00:03:48,140
embedded space started in the retail

00:03:44,760 --> 00:03:50,420
space so we worked in the retail market

00:03:48,140 --> 00:03:54,350
working on cash registers and

00:03:50,420 --> 00:03:57,780
point-of-sale solutions we expanded into

00:03:54,350 --> 00:04:00,540
kiosks and little by little people come

00:03:57,780 --> 00:04:04,230
to us and say hey could I include Linux

00:04:00,540 --> 00:04:06,330
or Susa in this solution maybe it's a

00:04:04,230 --> 00:04:09,720
data warehouse can I include

00:04:06,330 --> 00:04:12,090
SUSE Linux in this key server for

00:04:09,720 --> 00:04:14,459
encryption can I include SUSE Linux in

00:04:12,090 --> 00:04:16,530
this firewall option for a rackmount

00:04:14,459 --> 00:04:19,320
server can I use it as a virtual

00:04:16,530 --> 00:04:21,150
appliance inside of Amazon can I use it

00:04:19,320 --> 00:04:25,200
inside of this medical device imaging

00:04:21,150 --> 00:04:27,030
devices can I use it for mirroring mail

00:04:25,200 --> 00:04:28,830
solutions so we

00:04:27,030 --> 00:04:30,840
expanded into all of those different

00:04:28,830 --> 00:04:33,330
areas through relationships and

00:04:30,840 --> 00:04:37,830
partnerships and not one size fits all

00:04:33,330 --> 00:04:40,830
but one kernel has worked in all these

00:04:37,830 --> 00:04:42,090
spaces for a number of years and now

00:04:40,830 --> 00:04:44,460
we're getting down to the point where

00:04:42,090 --> 00:04:45,930
you say embed it to somebody and it

00:04:44,460 --> 00:04:47,900
everybody immediately goes to a beagle

00:04:45,930 --> 00:04:51,120
board or a raspberry pie from a

00:04:47,900 --> 00:04:53,430
perspective well we support arm and we

00:04:51,120 --> 00:04:56,280
support x86 but the important thing is

00:04:53,430 --> 00:04:58,290
is that we're gonna support you based on

00:04:56,280 --> 00:05:00,480
what your solution is and you don't have

00:04:58,290 --> 00:05:03,570
to be hesitant to think well is that as

00:05:00,480 --> 00:05:06,240
embedded solution or not well it depends

00:05:03,570 --> 00:05:08,010
from our perspective if this is a fixed

00:05:06,240 --> 00:05:10,530
function system and not a

00:05:08,010 --> 00:05:12,840
general-purpose system we typically

00:05:10,530 --> 00:05:14,640
consider that an embedded solution so at

00:05:12,840 --> 00:05:16,919
that point we encourage you to reach out

00:05:14,640 --> 00:05:19,590
to us and send us an email at embedded

00:05:16,919 --> 00:05:22,440
suit at Susa comm and we'll work with

00:05:19,590 --> 00:05:30,810
you to make sure that our platform can

00:05:22,440 --> 00:05:34,229
meet your needs so we've got a number of

00:05:30,810 --> 00:05:35,550
solutions in this space to really you

00:05:34,229 --> 00:05:37,110
know partner with you we don't want to

00:05:35,550 --> 00:05:38,669
approach the embedded space as a

00:05:37,110 --> 00:05:41,720
customer space we want to approach this

00:05:38,669 --> 00:05:45,270
as a partnership and we have support

00:05:41,720 --> 00:05:48,030
solutions we've got feature capability

00:05:45,270 --> 00:05:50,010
solutions beta programs resale solutions

00:05:48,030 --> 00:05:52,590
all different types of solutions in the

00:05:50,010 --> 00:05:53,010
market that we can tailor to fit your

00:05:52,590 --> 00:05:55,710
needs

00:05:53,010 --> 00:05:57,870
and again there's very few of our

00:05:55,710 --> 00:06:00,900
embedded partners that we work with that

00:05:57,870 --> 00:06:02,250
work on the same model and that's one of

00:06:00,900 --> 00:06:05,130
the most important things you guys can

00:06:02,250 --> 00:06:07,500
realize so with that what I want to do

00:06:05,130 --> 00:06:10,410
is actually talk a little bit about how

00:06:07,500 --> 00:06:12,180
we can offer a secure a flexible and

00:06:10,410 --> 00:06:16,550
most importantly a supported environment

00:06:12,180 --> 00:06:16,550
for your embedded solution

00:06:19,510 --> 00:06:25,190
all right so building an embedded

00:06:22,520 --> 00:06:27,500
solution is hard we're actually building

00:06:25,190 --> 00:06:29,870
any solution is hard and most of the

00:06:27,500 --> 00:06:32,720
work actually has to start early on in

00:06:29,870 --> 00:06:35,210
the planning process again if we harken

00:06:32,720 --> 00:06:37,190
back to the keynotes one of the key

00:06:35,210 --> 00:06:39,560
takeaways is the fact that security

00:06:37,190 --> 00:06:42,919
cannot be an afterthought you have to

00:06:39,560 --> 00:06:45,229
start with your surface or your attack

00:06:42,919 --> 00:06:46,880
surface in mind you have to understand

00:06:45,229 --> 00:06:49,540
what controls you're going to need

00:06:46,880 --> 00:06:53,720
whether they're through networking or

00:06:49,540 --> 00:06:55,820
access control lists for users access

00:06:53,720 --> 00:06:57,889
for different devices you need to start

00:06:55,820 --> 00:07:00,139
thinking about security as the first

00:06:57,889 --> 00:07:02,780
step and one of the major points about

00:07:00,139 --> 00:07:05,090
planning insecurity is actually one of

00:07:02,780 --> 00:07:07,580
the last steps that people or the actual

00:07:05,090 --> 00:07:11,690
and user customer touches which is patch

00:07:07,580 --> 00:07:14,600
management and upgrades so many times we

00:07:11,690 --> 00:07:17,479
see solutions hit the market they get

00:07:14,600 --> 00:07:18,919
update at once or twice as the interests

00:07:17,479 --> 00:07:21,590
and the innovation is high on that

00:07:18,919 --> 00:07:23,450
particular product or solution and then

00:07:21,590 --> 00:07:26,000
we don't see that product updated or

00:07:23,450 --> 00:07:28,250
innovated after twelve months well

00:07:26,000 --> 00:07:31,880
that's a vulnerability it's a huge

00:07:28,250 --> 00:07:33,740
vulnerability and that's why we see even

00:07:31,880 --> 00:07:37,010
though out in the security industry as

00:07:33,740 --> 00:07:40,250
we see the number of denial service

00:07:37,010 --> 00:07:41,930
attacks increasing moderately the

00:07:40,250 --> 00:07:43,760
effects of those denial service attacks

00:07:41,930 --> 00:07:45,289
are becoming greater and greater and

00:07:43,760 --> 00:07:47,090
we're talking you know hundreds of

00:07:45,289 --> 00:07:49,460
thousands of gigabytes of denial service

00:07:47,090 --> 00:07:52,010
attacks but typically from the same

00:07:49,460 --> 00:07:54,680
attack area so one of the things that we

00:07:52,010 --> 00:07:58,370
have to talk about is why security is so

00:07:54,680 --> 00:08:00,320
important and why actually sometimes

00:07:58,370 --> 00:08:02,510
it's a thankless job to go and build a

00:08:00,320 --> 00:08:06,340
Linux distribution and manage that and

00:08:02,510 --> 00:08:09,080
that's what we want to talk about so

00:08:06,340 --> 00:08:10,639
during the planning process and the

00:08:09,080 --> 00:08:12,410
coding process and the building process

00:08:10,639 --> 00:08:14,030
and the development process you're

00:08:12,410 --> 00:08:16,250
working in a closed system you have an

00:08:14,030 --> 00:08:17,419
idea of where your target platform is

00:08:16,250 --> 00:08:19,789
you have an idea of where your target

00:08:17,419 --> 00:08:21,050
operating system is and obviously we're

00:08:19,789 --> 00:08:22,729
all here at the embedded Linux

00:08:21,050 --> 00:08:24,410
conference everyone knows that the

00:08:22,729 --> 00:08:27,050
target platform of choice right now is

00:08:24,410 --> 00:08:29,630
Linux and you have choices to make

00:08:27,050 --> 00:08:32,240
choices do you go and

00:08:29,630 --> 00:08:34,760
your own distribution do you go and take

00:08:32,240 --> 00:08:37,220
a community distribution do you partner

00:08:34,760 --> 00:08:40,580
with an Enterprise Linux distribution in

00:08:37,220 --> 00:08:42,260
order to provide that support and

00:08:40,580 --> 00:08:44,180
service and we're going to talk about a

00:08:42,260 --> 00:08:45,590
little bit today is if you do partner

00:08:44,180 --> 00:08:47,750
with an Enterprise Linux distribution

00:08:45,590 --> 00:08:49,820
the fact that we do have tools to

00:08:47,750 --> 00:08:53,270
support you during your development

00:08:49,820 --> 00:08:54,920
process during your build process during

00:08:53,270 --> 00:08:57,740
your deployment process and more

00:08:54,920 --> 00:09:00,320
importantly from a security perspective

00:08:57,740 --> 00:09:03,290
and from a patch management perspective

00:09:00,320 --> 00:09:05,950
we also have tools and solutions that

00:09:03,290 --> 00:09:08,780
support you in that environment as well

00:09:05,950 --> 00:09:12,260
so this gives you the opportunity to

00:09:08,780 --> 00:09:21,200
build a custom Linux kernel that's

00:09:12,260 --> 00:09:22,940
supportable flexible and secure so what

00:09:21,200 --> 00:09:27,050
we're going to talk about are a few

00:09:22,940 --> 00:09:29,600
different products and solutions that we

00:09:27,050 --> 00:09:32,030
offer and of course it's the foundation

00:09:29,600 --> 00:09:34,130
from our perspective is SUSE Linux

00:09:32,030 --> 00:09:36,830
Enterprise Server and again this is the

00:09:34,130 --> 00:09:38,990
same operating system that we deploy to

00:09:36,830 --> 00:09:41,120
all of our customers and this is the

00:09:38,990 --> 00:09:42,680
same OS that we support for all of our

00:09:41,120 --> 00:09:44,300
customers and I think that's the most

00:09:42,680 --> 00:09:46,940
important thing all right we have a

00:09:44,300 --> 00:09:50,060
support organization worldwide we have

00:09:46,940 --> 00:09:51,650
engineers and a security team that are

00:09:50,060 --> 00:09:53,690
focused on watching critical

00:09:51,650 --> 00:09:55,970
vulnerabilities providing those patches

00:09:53,690 --> 00:09:59,000
back upstream into the kernel and back

00:09:55,970 --> 00:10:00,260
into our code stream we also provide a

00:09:59,000 --> 00:10:01,790
solution that we'll talk about in the

00:10:00,260 --> 00:10:03,530
next slide called just enough operating

00:10:01,790 --> 00:10:06,620
system and this is typically where

00:10:03,530 --> 00:10:08,870
people kind of perk their ears up much

00:10:06,620 --> 00:10:10,820
like in the robotic videos earlier this

00:10:08,870 --> 00:10:12,230
morning they perk your ears up they want

00:10:10,820 --> 00:10:14,210
to learn a little bit more about what we

00:10:12,230 --> 00:10:16,640
mean by just enough operating system or

00:10:14,210 --> 00:10:18,290
juice as we refer to it we're going to

00:10:16,640 --> 00:10:21,350
talk about package building we're going

00:10:18,290 --> 00:10:23,690
to talk about image building how we can

00:10:21,350 --> 00:10:25,460
support multiple platforms and in some

00:10:23,690 --> 00:10:27,650
cases multiple distributions right we

00:10:25,460 --> 00:10:29,930
are an open source company we recognize

00:10:27,650 --> 00:10:31,970
that community and collaboration are

00:10:29,930 --> 00:10:35,930
extremely important in an open source

00:10:31,970 --> 00:10:39,100
environment and we'll go back and cover

00:10:35,930 --> 00:10:39,100
some of these topics as well

00:10:40,629 --> 00:10:45,529
so I highlighted a few of the platforms

00:10:44,149 --> 00:10:49,730
that we support here I mentioned them

00:10:45,529 --> 00:10:52,999
earlier arm x86 power we've recently

00:10:49,730 --> 00:10:54,829
announced support for Raspberry Pi so

00:10:52,999 --> 00:10:57,050
we're getting you know broader and

00:10:54,829 --> 00:10:59,029
broader in our support and and the

00:10:57,050 --> 00:11:00,860
reason why we can offer so many products

00:10:59,029 --> 00:11:02,779
and solutions is because we've been

00:11:00,860 --> 00:11:05,329
doing this a long time we started

00:11:02,779 --> 00:11:07,639
initially in the x86 we quickly moved to

00:11:05,329 --> 00:11:11,809
the mainframe and as new technologies

00:11:07,639 --> 00:11:14,120
were introduced like Itanium and arm

00:11:11,809 --> 00:11:17,449
we've invested in those solutions as

00:11:14,120 --> 00:11:19,100
well but the important part is that you

00:11:17,449 --> 00:11:23,569
guys are building critical systems in

00:11:19,100 --> 00:11:25,999
most cases and we can't stress this

00:11:23,569 --> 00:11:29,660
enough that reliability and availability

00:11:25,999 --> 00:11:31,699
is extremely important in this space and

00:11:29,660 --> 00:11:34,399
that's one of the reasons why you've

00:11:31,699 --> 00:11:36,800
chosen to use Linux in your environment

00:11:34,399 --> 00:11:38,389
is because of its reliability we put a

00:11:36,800 --> 00:11:40,939
lot of additional effort into making

00:11:38,389 --> 00:11:43,550
sure that our solution is highly

00:11:40,939 --> 00:11:45,829
reliable and highly efficient and we

00:11:43,550 --> 00:11:47,959
focus really on making sure that you can

00:11:45,829 --> 00:11:50,149
take advantage of innovations that are

00:11:47,959 --> 00:11:53,269
out there as quickly as possible in the

00:11:50,149 --> 00:11:54,379
Linux kernel so that you can support the

00:11:53,269 --> 00:11:57,879
latest innovations that you want to

00:11:54,379 --> 00:11:57,879
bring to market within your solutions

00:11:58,389 --> 00:12:03,829
the other thing we here in the embedded

00:12:00,529 --> 00:12:06,620
space is a term that we hear over and

00:12:03,829 --> 00:12:09,499
over again is with long life right

00:12:06,620 --> 00:12:12,379
we need a Linux we need a supportable

00:12:09,499 --> 00:12:14,600
Linux for it you know five years ten

00:12:12,379 --> 00:12:18,800
years eight years whatever the case may

00:12:14,600 --> 00:12:21,439
be so we have what we refer to as a ten

00:12:18,800 --> 00:12:23,240
plus three-year support life cycle so

00:12:21,439 --> 00:12:25,040
when we start a code stream we will

00:12:23,240 --> 00:12:28,220
support that code stream in a generally

00:12:25,040 --> 00:12:31,040
supported manner for ten years within

00:12:28,220 --> 00:12:33,199
each one of those service pack releases

00:12:31,040 --> 00:12:36,019
we offer the ability to have long-term

00:12:33,199 --> 00:12:38,360
service pack support so even though we

00:12:36,019 --> 00:12:40,160
provide a brief overlap period that you

00:12:38,360 --> 00:12:43,189
would upgrade from service pack one to

00:12:40,160 --> 00:12:45,379
service pack 2 if you need to stay on a

00:12:43,189 --> 00:12:46,999
particular service pack whether it's for

00:12:45,379 --> 00:12:50,509
development reasons whether it's for

00:12:46,999 --> 00:12:52,459
compliance reasons we offer capabilities

00:12:50,509 --> 00:12:52,940
for you to have long term service packs

00:12:52,459 --> 00:12:55,490
support

00:12:52,940 --> 00:12:56,960
and when we end general support at the

00:12:55,490 --> 00:12:59,630
end of the ten years of our release

00:12:56,960 --> 00:13:01,550
cycle we still offer an additional three

00:12:59,630 --> 00:13:05,600
years of long-term service pack support

00:13:01,550 --> 00:13:08,210
for that final code stream so in essence

00:13:05,600 --> 00:13:10,070
if you wanted to run on a common code

00:13:08,210 --> 00:13:12,230
stream this is one of the best models

00:13:10,070 --> 00:13:15,080
you're going to find out there but more

00:13:12,230 --> 00:13:17,780
importantly if you really want to get

00:13:15,080 --> 00:13:19,430
down to a very stable and static code

00:13:17,780 --> 00:13:22,580
stream typically you want to look for

00:13:19,430 --> 00:13:25,310
the last service pack release within any

00:13:22,580 --> 00:13:27,650
given cycle because that's the one where

00:13:25,310 --> 00:13:30,380
the code gets locked down you do fewer

00:13:27,650 --> 00:13:33,830
and fewer feature enhancements but you

00:13:30,380 --> 00:13:36,110
also have fewer and fewer bug fixes and

00:13:33,830 --> 00:13:37,790
fewer and fewer security vulnerabilities

00:13:36,110 --> 00:13:39,500
because as they talked about in the

00:13:37,790 --> 00:13:41,480
keynote when you release a product there

00:13:39,500 --> 00:13:43,880
are no known vulnerabilities the

00:13:41,480 --> 00:13:46,190
vulnerabilities only come after that so

00:13:43,880 --> 00:13:49,220
obviously after you know three or four

00:13:46,190 --> 00:13:51,650
years the vulnerabilities tend to lessen

00:13:49,220 --> 00:13:54,560
within any given code stream now this is

00:13:51,650 --> 00:13:56,180
a sample we may do for service pack

00:13:54,560 --> 00:14:00,650
releases in a code stream we may do

00:13:56,180 --> 00:14:02,990
three we've varied between five and four

00:14:00,650 --> 00:14:04,490
in the most recent code streams but we

00:14:02,990 --> 00:14:07,040
always support to code streams in our

00:14:04,490 --> 00:14:09,230
distribution if anybody is keeping score

00:14:07,040 --> 00:14:13,940
that's currently less 11 Service Pack 4

00:14:09,230 --> 00:14:15,620
and it's less 12 service pack 2 but the

00:14:13,940 --> 00:14:22,160
most important thing when you start to

00:14:15,620 --> 00:14:23,330
think about the code stream is well what

00:14:22,160 --> 00:14:25,760
does it provide me and what's the

00:14:23,330 --> 00:14:27,350
support ability of that code stream so

00:14:25,760 --> 00:14:29,780
we talked a little bit about you know

00:14:27,350 --> 00:14:33,350
rapid innovation at Susa so it was

00:14:29,780 --> 00:14:36,260
actually about five or six years ago

00:14:33,350 --> 00:14:39,680
that we decided that maintaining a

00:14:36,260 --> 00:14:42,590
common kernel within a code stream just

00:14:39,680 --> 00:14:44,300
wasn't worth the effort anymore we were

00:14:42,590 --> 00:14:46,700
getting requests from our hardware

00:14:44,300 --> 00:14:48,470
partners requests from our customers to

00:14:46,700 --> 00:14:50,450
support new hardware and new

00:14:48,470 --> 00:14:51,920
enhancements in the Linux kernel could

00:14:50,450 --> 00:14:53,750
have been virtualization could have been

00:14:51,920 --> 00:14:56,150
containers it could have been new

00:14:53,750 --> 00:14:59,350
chipsets and we basically had made a

00:14:56,150 --> 00:15:02,960
determination at one point that it's not

00:14:59,350 --> 00:15:06,440
effective to go and back port tens of

00:15:02,960 --> 00:15:11,660
thousands 20,000 lines of codes and

00:15:06,440 --> 00:15:13,759
cases I'm exaggerating into an old level

00:15:11,660 --> 00:15:15,889
Colonel just to maintain that Colonel

00:15:13,759 --> 00:15:18,440
level because the number of changes that

00:15:15,889 --> 00:15:20,959
you make after a few thousand changes

00:15:18,440 --> 00:15:22,579
it's really not part of that Colonel

00:15:20,959 --> 00:15:25,279
tree anymore it's changed so

00:15:22,579 --> 00:15:27,050
dramatically so one of the things that

00:15:25,279 --> 00:15:29,720
we do in order to provide you innovation

00:15:27,050 --> 00:15:31,430
is we focus on the API and the ABI

00:15:29,720 --> 00:15:33,709
compatibility so we want to make sure

00:15:31,430 --> 00:15:36,230
that the applications that sit on top of

00:15:33,709 --> 00:15:38,240
the kernel are highly compatible because

00:15:36,230 --> 00:15:40,870
ultimately what we are doing is we are

00:15:38,240 --> 00:15:43,639
supporting the kernel and the packages

00:15:40,870 --> 00:15:45,649
what you put on top of that is your

00:15:43,639 --> 00:15:47,529
responsibility so what I did here is

00:15:45,649 --> 00:15:51,500
that's got a little bit of a sampling of

00:15:47,529 --> 00:15:53,779
how Susa in comparative releases between

00:15:51,500 --> 00:15:57,230
some of our competitors how we have

00:15:53,779 --> 00:15:59,569
constantly been innovating taking code

00:15:57,230 --> 00:16:02,360
from the upstream kernel basing on

00:15:59,569 --> 00:16:04,579
current kernels making sure that

00:16:02,360 --> 00:16:06,769
customers have access to the most recent

00:16:04,579 --> 00:16:08,689
technologies and whether that is again

00:16:06,769 --> 00:16:10,639
networking technologies memory

00:16:08,689 --> 00:16:12,800
protection technologies or other

00:16:10,639 --> 00:16:14,990
enhancements on the processor side we're

00:16:12,800 --> 00:16:17,449
trying to always stay as close to the

00:16:14,990 --> 00:16:20,360
mainline kernel as possible and do fewer

00:16:17,449 --> 00:16:22,880
back ports so you know the minimizing of

00:16:20,360 --> 00:16:26,600
back porting and patches this provides

00:16:22,880 --> 00:16:28,579
better peer review because as code is

00:16:26,600 --> 00:16:30,529
going upstream into the kernel and more

00:16:28,579 --> 00:16:32,810
people are looking at that code we've

00:16:30,529 --> 00:16:35,750
got more eyes on it if we were to start

00:16:32,810 --> 00:16:38,300
back porting all this upstream code into

00:16:35,750 --> 00:16:40,100
our specific code tree then it's just us

00:16:38,300 --> 00:16:42,139
looking at it and that's not the way we

00:16:40,100 --> 00:16:43,939
want to work we are always upstream

00:16:42,139 --> 00:16:51,439
first and that sort what going to be our

00:16:43,939 --> 00:16:55,279
focus and I think yesterday Ryan we're

00:16:51,439 --> 00:16:57,949
from Intel yeah so he was talking about

00:16:55,279 --> 00:17:00,380
critical vulnerabilities right in the

00:16:57,949 --> 00:17:02,600
CVEs and again this is one of the

00:17:00,380 --> 00:17:05,240
reasons why you want to try and focus on

00:17:02,600 --> 00:17:08,179
a modern current kernel is because as

00:17:05,240 --> 00:17:10,520
you back port critical vulnerabilities

00:17:08,179 --> 00:17:12,470
there's lots of other things inside of

00:17:10,520 --> 00:17:14,299
the Linux kernel those could be touching

00:17:12,470 --> 00:17:16,850
and you're just modifying as you go

00:17:14,299 --> 00:17:18,980
along and tramping out bugs is you go

00:17:16,850 --> 00:17:20,000
backwards and backwards so we always try

00:17:18,980 --> 00:17:20,959
and keep moving forward

00:17:20,000 --> 00:17:28,490
that's one of the ways we try to

00:17:20,959 --> 00:17:30,050
innovate so a recent study had found and

00:17:28,490 --> 00:17:31,550
I think we actually have a blogpost on

00:17:30,050 --> 00:17:33,980
sue so calm about this

00:17:31,550 --> 00:17:35,870
a recent study had found that about 85%

00:17:33,980 --> 00:17:39,020
of developers admit that they've rushed

00:17:35,870 --> 00:17:40,730
their applications to market now I'm not

00:17:39,020 --> 00:17:43,160
gonna say they've done this maliciously

00:17:40,730 --> 00:17:44,870
right but the moment you consider

00:17:43,160 --> 00:17:46,370
rushing your application to market

00:17:44,870 --> 00:17:47,870
you're not looking at the whole picture

00:17:46,370 --> 00:17:52,270
and this is where we think security

00:17:47,870 --> 00:17:55,250
plays a huge spot so we recognize that

00:17:52,270 --> 00:17:57,560
you know within our distribution itself

00:17:55,250 --> 00:17:59,720
we have about 3,000 packages that make

00:17:57,560 --> 00:18:02,000
up our enterprise distribution well

00:17:59,720 --> 00:18:04,040
that's obviously not something you want

00:18:02,000 --> 00:18:06,650
to put it into an embedded system the if

00:18:04,040 --> 00:18:09,520
you go and install everything that Susa

00:18:06,650 --> 00:18:12,770
has to offer you have an extremely large

00:18:09,520 --> 00:18:14,420
essentially attack surface right every

00:18:12,770 --> 00:18:16,040
one of those applications potentially

00:18:14,420 --> 00:18:18,890
has one or more vulnerabilities

00:18:16,040 --> 00:18:21,130
including the Linux kernel so what we've

00:18:18,890 --> 00:18:23,750
started to do is we started to provide

00:18:21,130 --> 00:18:26,660
this concept of just enough operating

00:18:23,750 --> 00:18:29,180
system it's an ISO image it allows

00:18:26,660 --> 00:18:33,110
there's a few templates associated with

00:18:29,180 --> 00:18:34,970
it you can build a template for you know

00:18:33,110 --> 00:18:37,270
container service you can build a very

00:18:34,970 --> 00:18:39,860
small application server you can build a

00:18:37,270 --> 00:18:41,720
very small web server whatever the case

00:18:39,860 --> 00:18:43,760
may be but we've started with these

00:18:41,720 --> 00:18:45,680
templates that if you want to you can

00:18:43,760 --> 00:18:48,620
deploy this just enough operating system

00:18:45,680 --> 00:18:51,740
in any of the virtualized environments

00:18:48,620 --> 00:18:55,700
that are listed there this is not a

00:18:51,740 --> 00:18:58,370
physical distribution but what we do

00:18:55,700 --> 00:19:00,410
when we provide just enough operating

00:18:58,370 --> 00:19:02,210
system in these virtual environments we

00:19:00,410 --> 00:19:04,550
also provide something along with it and

00:19:02,210 --> 00:19:06,890
we call it a Kiwi package and I'll talk

00:19:04,550 --> 00:19:08,930
a little bit about Kiwi as we get

00:19:06,890 --> 00:19:11,510
further on the presentation but right

00:19:08,930 --> 00:19:14,450
now are just enough operating system is

00:19:11,510 --> 00:19:16,490
a very lean function specific operating

00:19:14,450 --> 00:19:20,300
system where you start with about a 300

00:19:16,490 --> 00:19:22,670
megabyte kernel and then you add on to

00:19:20,300 --> 00:19:25,370
that what you need it gives you a

00:19:22,670 --> 00:19:27,590
starting point so instead of starting

00:19:25,370 --> 00:19:29,390
from Ground Zero we start you from what

00:19:27,590 --> 00:19:31,490
we consider our base level of support

00:19:29,390 --> 00:19:32,700
this is the kernel that if you strip

00:19:31,490 --> 00:19:37,769
away every

00:19:32,700 --> 00:19:39,989
else will run on armed Intel power x86

00:19:37,769 --> 00:19:41,730
this is the kernel that we support this

00:19:39,989 --> 00:19:43,889
is the kernel that we watch for critical

00:19:41,730 --> 00:19:47,700
vulnerabilities we apply patches and

00:19:43,889 --> 00:19:50,609
updates to and we'll talk again how you

00:19:47,700 --> 00:19:54,350
can take advantage of this with Kiwi in

00:19:50,609 --> 00:19:58,259
a build process a little bit later on

00:19:54,350 --> 00:20:01,049
okay so packages platforms and

00:19:58,259 --> 00:20:04,470
repositories oh my so how many folks

00:20:01,049 --> 00:20:06,330
have heard of the open build service and

00:20:04,470 --> 00:20:08,879
it's not a trick question okay some

00:20:06,330 --> 00:20:11,279
hands good so the open build service is

00:20:08,879 --> 00:20:14,519
a generic system to build and distribute

00:20:11,279 --> 00:20:16,409
binary packages from sources and here's

00:20:14,519 --> 00:20:19,049
the last three that an automatic

00:20:16,409 --> 00:20:21,950
consistent and reproducible or

00:20:19,049 --> 00:20:24,690
repeatable way and this is key for us

00:20:21,950 --> 00:20:27,359
now we have a lot of partners and a lot

00:20:24,690 --> 00:20:29,639
of customers that use this and they use

00:20:27,359 --> 00:20:32,340
it with Susa and they use it sometimes

00:20:29,639 --> 00:20:34,619
with other distributions but our open

00:20:32,340 --> 00:20:36,299
build service is a tool that we've

00:20:34,619 --> 00:20:38,999
actually been using for close to two

00:20:36,299 --> 00:20:40,799
decades now internally it started out

00:20:38,999 --> 00:20:44,009
with a different name we called it Auto

00:20:40,799 --> 00:20:46,019
build when we started to recognize that

00:20:44,009 --> 00:20:48,779
people wanted Linux on more than one

00:20:46,019 --> 00:20:50,970
platform we realize that we need to

00:20:48,779 --> 00:20:53,249
create an automatic consistent

00:20:50,970 --> 00:20:56,489
reproducible way to build multiple

00:20:53,249 --> 00:20:58,799
packages for multiple platforms so when

00:20:56,489 --> 00:21:01,850
we release a product we release it on

00:20:58,799 --> 00:21:04,919
all of our supported platforms day one

00:21:01,850 --> 00:21:07,529
and that's because of this service this

00:21:04,919 --> 00:21:10,019
is a toolkit that we use in-house

00:21:07,529 --> 00:21:14,429
it's a toolkit that probably about a

00:21:10,019 --> 00:21:16,679
decade ago maybe fifteen years ago we

00:21:14,429 --> 00:21:18,509
actually open sourced if you wanted to

00:21:16,679 --> 00:21:20,159
go build your own build service you can

00:21:18,509 --> 00:21:23,480
go out to get and you can get the code

00:21:20,159 --> 00:21:25,529
and you can build one of your own

00:21:23,480 --> 00:21:27,480
mileage may vary but you know it's

00:21:25,529 --> 00:21:29,340
something we use and we constantly

00:21:27,480 --> 00:21:30,929
update because it's part of our

00:21:29,340 --> 00:21:33,389
infrastructure this is what we use for

00:21:30,929 --> 00:21:35,789
all of our products the build service

00:21:33,389 --> 00:21:39,210
can build packages for multiple

00:21:35,789 --> 00:21:42,149
distributions we support rpm and Debian

00:21:39,210 --> 00:21:44,970
packages we support all of the

00:21:42,149 --> 00:21:46,799
architectures that are listed there from

00:21:44,970 --> 00:21:49,850
a build perspective

00:21:46,799 --> 00:21:52,409
and if it's not listed there you can use

00:21:49,850 --> 00:21:55,049
qemu to emulate some of those

00:21:52,409 --> 00:21:58,260
non-existent hardware and in the backend

00:21:55,049 --> 00:21:59,669
that build service is another tool that

00:21:58,260 --> 00:22:01,110
we're going to talk about in detail and

00:21:59,669 --> 00:22:03,480
I want to separate the conversations

00:22:01,110 --> 00:22:05,700
called Kiwis so we'll get into the Kiwi

00:22:03,480 --> 00:22:08,010
conversation in a few minutes but most

00:22:05,700 --> 00:22:11,100
importantly one of the things that the

00:22:08,010 --> 00:22:15,090
build service offers is a repository

00:22:11,100 --> 00:22:18,120
server so this gives you the ability as

00:22:15,090 --> 00:22:21,780
you're developing your application to

00:22:18,120 --> 00:22:24,090
have a toolkit in which you can put a

00:22:21,780 --> 00:22:27,150
framework around your build environment

00:22:24,090 --> 00:22:30,270
your target platforms your target

00:22:27,150 --> 00:22:32,760
packaging format and maintain a

00:22:30,270 --> 00:22:34,289
repository for yourselves you can lock

00:22:32,760 --> 00:22:36,090
that repository and you can branch that

00:22:34,289 --> 00:22:39,030
repository you can then use that

00:22:36,090 --> 00:22:40,650
repository to do patches and updates and

00:22:39,030 --> 00:22:43,590
there's collaborative functions in there

00:22:40,650 --> 00:22:45,120
for the developers as well so let's talk

00:22:43,590 --> 00:22:47,880
a little bit about how the build server

00:22:45,120 --> 00:22:49,650
works there's lots of material out

00:22:47,880 --> 00:22:52,169
online and you'll learn a lot more from

00:22:49,650 --> 00:22:55,400
that than you will from me but I want to

00:22:52,169 --> 00:22:58,409
just give you a couple of highlights so

00:22:55,400 --> 00:23:02,039
we build from source and we also build

00:22:58,409 --> 00:23:07,049
from binaries if that's the case we do

00:23:02,039 --> 00:23:09,360
support not just Susa but about nine or

00:23:07,049 --> 00:23:10,620
sixteen different versions of

00:23:09,360 --> 00:23:12,750
distributions so if you think there's

00:23:10,620 --> 00:23:14,730
about eight or nine main distributions

00:23:12,750 --> 00:23:16,740
out there we typically will support two

00:23:14,730 --> 00:23:18,960
or three versions of that distribution

00:23:16,740 --> 00:23:20,700
if you want to build a package so if you

00:23:18,960 --> 00:23:22,799
want to use the build service to build a

00:23:20,700 --> 00:23:24,950
Susa package and a bunch of package and

00:23:22,799 --> 00:23:27,510
a Red Hat package or a CentOS or a

00:23:24,950 --> 00:23:30,330
scientific Linux package or a debian

00:23:27,510 --> 00:23:34,500
package you can do that so you can have

00:23:30,330 --> 00:23:37,559
multiple targets built with and through

00:23:34,500 --> 00:23:39,179
the build service now the package

00:23:37,559 --> 00:23:42,120
sources in the individual package are

00:23:39,179 --> 00:23:44,429
put into projects and you can obviously

00:23:42,120 --> 00:23:46,919
link multiple projects together to make

00:23:44,429 --> 00:23:50,159
larger and larger builds you can also

00:23:46,919 --> 00:23:52,230
take those projects and branch them so

00:23:50,159 --> 00:23:54,809
say you've got a stable one over lease

00:23:52,230 --> 00:23:57,270
that is considered your GA release you

00:23:54,809 --> 00:23:58,890
can take that project branch that

00:23:57,270 --> 00:23:59,549
project and start working on your

00:23:58,890 --> 00:24:01,529
packages

00:23:59,549 --> 00:24:03,659
and then you can submit those packages

00:24:01,529 --> 00:24:05,399
back through the build service to let's

00:24:03,659 --> 00:24:07,289
say you're a release engineering team or

00:24:05,399 --> 00:24:09,989
your QA team because they'll have access

00:24:07,289 --> 00:24:12,840
to Europe repositories now you can

00:24:09,989 --> 00:24:17,399
maintain these repositories on-site we

00:24:12,840 --> 00:24:22,580
support multiple repositories that are

00:24:17,399 --> 00:24:24,809
out there sue says yes our PMS apt Arch

00:24:22,580 --> 00:24:25,860
multiple repository types are supported

00:24:24,809 --> 00:24:28,049
in this function

00:24:25,860 --> 00:24:30,659
but we also allow you to pull from

00:24:28,049 --> 00:24:35,220
public repositories so if SourceForge or

00:24:30,659 --> 00:24:37,889
get or other version control systems can

00:24:35,220 --> 00:24:41,489
also be pulled into this the nice thing

00:24:37,889 --> 00:24:42,659
about this is that we have this service

00:24:41,489 --> 00:24:46,679
that runs in the background that

00:24:42,659 --> 00:24:49,529
monitors those repositories so if

00:24:46,679 --> 00:24:52,109
something changes on get new code was

00:24:49,529 --> 00:24:53,759
submitted in your nightly builds if you

00:24:52,109 --> 00:24:55,470
choose to do so if you're doing nightly

00:24:53,759 --> 00:24:57,809
builds for example you can actually

00:24:55,470 --> 00:25:01,289
force a rebuild if one of those

00:24:57,809 --> 00:25:04,679
dependencies were there so what we do is

00:25:01,289 --> 00:25:07,889
we basically use virtual machines or

00:25:04,679 --> 00:25:10,919
cheetah or chair routes in order to

00:25:07,889 --> 00:25:14,159
build out the infrastructure it happens

00:25:10,919 --> 00:25:16,409
in four phases we've got the pre install

00:25:14,159 --> 00:25:18,570
face the install phase the build phase

00:25:16,409 --> 00:25:20,100
and then the post build phase so the pre

00:25:18,570 --> 00:25:22,019
install phase is where everything is

00:25:20,100 --> 00:25:24,029
defined for let's say your build

00:25:22,019 --> 00:25:25,739
environment so you go to define your

00:25:24,029 --> 00:25:27,450
file system you go and define your tool

00:25:25,739 --> 00:25:29,669
change you go and find define your boot

00:25:27,450 --> 00:25:31,080
loaders and the packages that you want

00:25:29,669 --> 00:25:32,940
to include and then you've got the

00:25:31,080 --> 00:25:34,950
install phase that's where the VM kicks

00:25:32,940 --> 00:25:37,950
in or the chair route takes place and

00:25:34,950 --> 00:25:40,889
actually builds out the machine that's

00:25:37,950 --> 00:25:42,509
going to do your package build at that

00:25:40,889 --> 00:25:44,909
point it takes your packages and does

00:25:42,509 --> 00:25:46,769
the actual build you could define what

00:25:44,909 --> 00:25:48,989
the compiler switches are they can be

00:25:46,769 --> 00:25:50,429
predefined if you choose to there's some

00:25:48,989 --> 00:25:51,809
recipes out there that you can choose

00:25:50,429 --> 00:25:54,179
and say well if I'm going to build this

00:25:51,809 --> 00:25:56,009
on power it's going to use this version

00:25:54,179 --> 00:25:57,779
of the tool chain and these switches or

00:25:56,009 --> 00:26:00,570
I'm going to build it on arm it's going

00:25:57,779 --> 00:26:02,669
to do this and that means that as you go

00:26:00,570 --> 00:26:04,919
and make code modifications to your

00:26:02,669 --> 00:26:07,679
repositories and resubmit those or as

00:26:04,919 --> 00:26:09,149
those repositories change upstream the

00:26:07,679 --> 00:26:12,090
builds are going to happen automatically

00:26:09,149 --> 00:26:13,490
the build fails it's going to give you

00:26:12,090 --> 00:26:14,420
an alert it's going to back

00:26:13,490 --> 00:26:16,010
everything out and you're gonna have to

00:26:14,420 --> 00:26:19,429
go in and fix it sorry we don't do that

00:26:16,010 --> 00:26:21,679
for you right but if the bill is to

00:26:19,429 --> 00:26:23,330
build succeeds you get to hat choose

00:26:21,679 --> 00:26:25,520
what happens with that repository you

00:26:23,330 --> 00:26:28,040
can go and take that successful build

00:26:25,520 --> 00:26:30,410
and move it to a repository and that

00:26:28,040 --> 00:26:32,480
then becomes what your QA team your

00:26:30,410 --> 00:26:33,890
maintenance team tests against or what

00:26:32,480 --> 00:26:36,890
your maintenance team will then try and

00:26:33,890 --> 00:26:40,460
use to recreate problems or issues that

00:26:36,890 --> 00:26:44,780
may happen and that's called download on

00:26:40,460 --> 00:26:47,900
demand updater that repository checking

00:26:44,780 --> 00:26:49,460
on the the backend so again you pick

00:26:47,900 --> 00:26:52,130
your target distribution you pick your

00:26:49,460 --> 00:26:53,600
target Pat platform you go and define a

00:26:52,130 --> 00:26:55,700
package and now you've got a repository

00:26:53,600 --> 00:26:58,010
inside of your organization for your

00:26:55,700 --> 00:27:00,260
solution remember we're not talking

00:26:58,010 --> 00:27:02,750
about building an OS we're talking about

00:27:00,260 --> 00:27:07,870
you guys using these tools to build your

00:27:02,750 --> 00:27:09,920
solutions right the OS is not a question

00:27:07,870 --> 00:27:12,679
now if you're not that interested in

00:27:09,920 --> 00:27:13,880
doing that we have another solution and

00:27:12,679 --> 00:27:15,740
only going to spend a minute on this so

00:27:13,880 --> 00:27:18,940
we introduced this concept called

00:27:15,740 --> 00:27:21,640
package hub not every organization has

00:27:18,940 --> 00:27:23,690
developers and a lot of organizations

00:27:21,640 --> 00:27:25,250
despite the fact that we provide over

00:27:23,690 --> 00:27:28,520
3,000 packages and our distribution

00:27:25,250 --> 00:27:30,770
somebody wants 3001 and sometimes it's

00:27:28,520 --> 00:27:33,440
an open-source package and all they

00:27:30,770 --> 00:27:37,429
really need to do is have someone do the

00:27:33,440 --> 00:27:39,980
effort and compile it for them so the if

00:27:37,429 --> 00:27:42,980
you need community packages and you want

00:27:39,980 --> 00:27:45,350
to run them in a way that's not going to

00:27:42,980 --> 00:27:47,900
break Seuss's kernel and it's actually

00:27:45,350 --> 00:27:51,080
built with the same back-end build

00:27:47,900 --> 00:27:53,900
service we actually use the community

00:27:51,080 --> 00:27:56,660
packages through package hub so if

00:27:53,900 --> 00:27:59,179
there's a particular open-source package

00:27:56,660 --> 00:28:01,130
that we don't provide it's likely

00:27:59,179 --> 00:28:03,170
already been built by the community and

00:28:01,130 --> 00:28:04,760
it's already up here on package hub you

00:28:03,170 --> 00:28:11,510
can just download it included as part of

00:28:04,760 --> 00:28:14,270
your offering shortcut okay so you've

00:28:11,510 --> 00:28:16,640
defined your projects you've identified

00:28:14,270 --> 00:28:18,710
your packages your sources and your rpms

00:28:16,640 --> 00:28:21,740
and your binaries you created your

00:28:18,710 --> 00:28:24,530
projects you've set your targets and

00:28:21,740 --> 00:28:26,390
you've set your platform and you've

00:28:24,530 --> 00:28:27,410
built your repositories and now you've

00:28:26,390 --> 00:28:29,390
got a bunch of

00:28:27,410 --> 00:28:31,910
cages for your application that you want

00:28:29,390 --> 00:28:33,890
to do something with and this is where

00:28:31,910 --> 00:28:35,450
Kiwi comes in so we've built the

00:28:33,890 --> 00:28:37,790
packages now I actually have to built an

00:28:35,450 --> 00:28:39,740
image now sorry to say we don't build

00:28:37,790 --> 00:28:40,670
images for competing distributions if

00:28:39,740 --> 00:28:43,130
you're going to build an image you're

00:28:40,670 --> 00:28:46,910
going to build it on Susa we kind of

00:28:43,130 --> 00:28:49,040
think of Kiwi as a soda vending machine

00:28:46,910 --> 00:28:50,990
you know put the quarter in you're going

00:28:49,040 --> 00:28:52,130
to get the soda out that you want and we

00:28:50,990 --> 00:28:54,740
think this is the best one

00:28:52,130 --> 00:28:57,050
so what Kiwi is it's a command line tool

00:28:54,740 --> 00:28:59,840
that was written in Pearl for building

00:28:57,050 --> 00:29:04,340
Linux images and it supports a variety

00:28:59,840 --> 00:29:09,500
of image formats everything that Susa

00:29:04,340 --> 00:29:11,570
builds also goes through Kiwi so you can

00:29:09,500 --> 00:29:13,760
build and my eyes are going you can

00:29:11,570 --> 00:29:16,640
build ISO images live CDs you could

00:29:13,760 --> 00:29:18,530
build pixie boot images hard disk images

00:29:16,640 --> 00:29:23,050
if you just want to go into a DD over to

00:29:18,530 --> 00:29:29,240
it USB keys we support virtual machines

00:29:23,050 --> 00:29:32,420
appliances based on OVF VM decays cue

00:29:29,240 --> 00:29:36,190
cow or all and we've added support for

00:29:32,420 --> 00:29:39,140
containers you can use Kiwi to build

00:29:36,190 --> 00:29:43,490
cloud images either for OpenStack cloud

00:29:39,140 --> 00:29:46,880
or cloud images for Shore or cloud

00:29:43,490 --> 00:29:50,090
images for Amazon all these things can

00:29:46,880 --> 00:29:51,170
be done with Kiwi and the nice part

00:29:50,090 --> 00:29:52,400
about it is you don't really need a

00:29:51,170 --> 00:29:54,500
whole lot of infrastructure you can

00:29:52,400 --> 00:29:56,420
actually run it on a laptop all right

00:29:54,500 --> 00:29:59,660
just be careful with it because it does

00:29:56,420 --> 00:30:01,790
run as root but again another open

00:29:59,660 --> 00:30:03,830
source project that we provide it is

00:30:01,790 --> 00:30:08,210
available in github and there's multiple

00:30:03,830 --> 00:30:10,460
documentation sources out there if one

00:30:08,210 --> 00:30:12,800
of the things we do do is we provide

00:30:10,460 --> 00:30:15,560
Kiwi with every version of SUSE Linux

00:30:12,800 --> 00:30:18,140
Enterprise so it's not installed by

00:30:15,560 --> 00:30:20,420
default but the packages are there I

00:30:18,140 --> 00:30:23,570
think in version 11 it was part of the

00:30:20,420 --> 00:30:25,310
SDK and in version 12 it's just part of

00:30:23,570 --> 00:30:27,800
the the regular distribution so you can

00:30:25,310 --> 00:30:30,140
choose to install Kiwi as the package

00:30:27,800 --> 00:30:32,270
well now this is where we go back to

00:30:30,140 --> 00:30:34,550
just enough operating system so we

00:30:32,270 --> 00:30:36,410
provide you this concept of just enough

00:30:34,550 --> 00:30:38,030
operating system we kind of limit it's a

00:30:36,410 --> 00:30:39,760
virtual machine use because that's the

00:30:38,030 --> 00:30:41,450
easiest way for us to get it out there

00:30:39,760 --> 00:30:42,679
but when we

00:30:41,450 --> 00:30:45,019
I do these five or six different

00:30:42,679 --> 00:30:47,299
templates that you can choose from for

00:30:45,019 --> 00:30:50,330
this juice image we also provide you the

00:30:47,299 --> 00:30:52,639
Kiwi template for that so it gives you a

00:30:50,330 --> 00:30:55,519
starting point and you can start with a

00:30:52,639 --> 00:30:58,820
minimum build for Kiwi and you can

00:30:55,519 --> 00:31:00,919
include your packages that you've built

00:30:58,820 --> 00:31:03,289
with the open build service which also

00:31:00,919 --> 00:31:05,090
does dependency resolution and build the

00:31:03,289 --> 00:31:06,620
dependent packages as well so your

00:31:05,090 --> 00:31:10,130
repository actually has everything that

00:31:06,620 --> 00:31:13,850
you should need inside of it to build

00:31:10,130 --> 00:31:17,539
your solution and you can then run this

00:31:13,850 --> 00:31:19,669
through Kiwi now if you're running on

00:31:17,539 --> 00:31:22,730
the Susa open build server that's

00:31:19,669 --> 00:31:25,340
available online Kiwis actually one of

00:31:22,730 --> 00:31:27,080
the targets in the build so I talked

00:31:25,340 --> 00:31:29,389
about the open build service being able

00:31:27,080 --> 00:31:31,309
to build to multiple distributions but

00:31:29,389 --> 00:31:32,630
also multiple platforms well if you

00:31:31,309 --> 00:31:35,090
choose not to build to a platform you

00:31:32,630 --> 00:31:36,980
can actually build it to a Kiwi image

00:31:35,090 --> 00:31:38,179
and then you'll get those choices that

00:31:36,980 --> 00:31:40,250
we just talked about the virtual

00:31:38,179 --> 00:31:42,830
machines the physical machines the ISOs

00:31:40,250 --> 00:31:47,210
whichever type of image that you need to

00:31:42,830 --> 00:31:48,799
deploy out to your customers so you can

00:31:47,210 --> 00:31:51,110
pull from your repositories or the

00:31:48,799 --> 00:31:55,730
private repositories and the Kiwi happen

00:31:51,110 --> 00:31:56,529
the Kiwi build actually happens in two

00:31:55,730 --> 00:31:58,730
steps

00:31:56,529 --> 00:32:01,250
much like the build service when it

00:31:58,730 --> 00:32:05,679
prepares the build environment it uses

00:32:01,250 --> 00:32:08,419
chroot so it's going to go and build

00:32:05,679 --> 00:32:11,090
based on your configuration and your

00:32:08,419 --> 00:32:15,320
repositories it's going to go and build

00:32:11,090 --> 00:32:17,360
an unpackage root filesystem that has

00:32:15,320 --> 00:32:20,779
everything that you need to create your

00:32:17,360 --> 00:32:22,580
image at that point it takes the image

00:32:20,779 --> 00:32:24,230
description and the in the description

00:32:22,580 --> 00:32:25,399
can have lots of different things it can

00:32:24,230 --> 00:32:27,769
tell you that there are particular

00:32:25,399 --> 00:32:31,070
additional files you want to pull in it

00:32:27,769 --> 00:32:34,760
can go and do cleanup it can go and do

00:32:31,070 --> 00:32:37,639
some scripting changes but the image

00:32:34,760 --> 00:32:40,010
description then takes that unpackaged

00:32:37,639 --> 00:32:42,130
image and packages it up as the final

00:32:40,010 --> 00:32:45,169
destination so if that's an ISO or a

00:32:42,130 --> 00:32:47,179
live USB key whatever it is that you're

00:32:45,169 --> 00:32:50,750
providing to your customers as the end

00:32:47,179 --> 00:32:53,029
solution that unpackaged image then gets

00:32:50,750 --> 00:32:55,190
packaged up and the true route is

00:32:53,029 --> 00:32:58,280
destroyed right so this leaves

00:32:55,190 --> 00:32:59,780
nothing behind in the build process you

00:32:58,280 --> 00:33:01,430
can't go back and look in and see what

00:32:59,780 --> 00:33:03,200
you want to tweak if you do need to

00:33:01,430 --> 00:33:04,880
tweak something you're gonna find out

00:33:03,200 --> 00:33:07,130
about that during the installation

00:33:04,880 --> 00:33:09,650
process when you go through your QA and

00:33:07,130 --> 00:33:13,040
at that point you can go backwards and

00:33:09,650 --> 00:33:16,480
update your image descriptors to you

00:33:13,040 --> 00:33:22,160
know change your boot image change your

00:33:16,480 --> 00:33:24,890
your your config files adjust at what

00:33:22,160 --> 00:33:30,980
point certain files get brought into the

00:33:24,890 --> 00:33:34,280
root before it gets packaged up okay so

00:33:30,980 --> 00:33:39,530
what happens after you've built your

00:33:34,280 --> 00:33:45,650
image QA this is the thankless job the

00:33:39,530 --> 00:33:47,570
job everyone hates so we use a open

00:33:45,650 --> 00:33:50,690
source tool called open QA and actually

00:33:47,570 --> 00:33:53,450
this is actually used by a few different

00:33:50,690 --> 00:33:56,060
projects out in the world today SUSE

00:33:53,450 --> 00:33:59,210
uses it Fedora uses it a number of our

00:33:56,060 --> 00:34:01,700
partners use it but this is a product

00:33:59,210 --> 00:34:03,760
called open QA and the focus of it is to

00:34:01,700 --> 00:34:08,200
test applications and operating systems

00:34:03,760 --> 00:34:10,940
it is primarily done via a GUI console

00:34:08,200 --> 00:34:14,390
there it you do have the ability to

00:34:10,940 --> 00:34:17,030
check various code paths and various

00:34:14,390 --> 00:34:20,450
installation options and it basically

00:34:17,030 --> 00:34:23,180
comes down to two basic concepts running

00:34:20,450 --> 00:34:27,410
a job and this thing called needles

00:34:23,180 --> 00:34:30,130
which is comparing expected outputs to

00:34:27,410 --> 00:34:33,700
actual outputs inside of the

00:34:30,130 --> 00:34:38,150
distribution or the image I should say

00:34:33,700 --> 00:34:39,740
so the way open QA works is obviously

00:34:38,150 --> 00:34:42,020
there's restful api is that you can use

00:34:39,740 --> 00:34:44,450
that you can automate the the entire

00:34:42,020 --> 00:34:46,220
back-end system or make calls into it as

00:34:44,450 --> 00:34:48,730
you need to but there is a web interface

00:34:46,220 --> 00:34:53,810
now the web interface is responsible for

00:34:48,730 --> 00:34:56,780
coordinating all the workers and all the

00:34:53,810 --> 00:34:59,900
the questions that come out but

00:34:56,780 --> 00:35:01,580
ultimately the worker schedules and the

00:34:59,900 --> 00:35:06,530
pool of resources that you have there

00:35:01,580 --> 00:35:08,060
are all targeted at managing that OS

00:35:06,530 --> 00:35:11,300
auto inst

00:35:08,060 --> 00:35:14,690
that's listed there on the side there

00:35:11,300 --> 00:35:20,000
and basically what this does is it does

00:35:14,690 --> 00:35:22,430
uses QEMU to build an installation

00:35:20,000 --> 00:35:26,660
framework for the packages or the image

00:35:22,430 --> 00:35:30,140
that you've just built it uses at that

00:35:26,660 --> 00:35:33,560
point this concept called needles to go

00:35:30,140 --> 00:35:35,510
and compare screenshots right so you go

00:35:33,560 --> 00:35:37,070
and set specific needles for specific

00:35:35,510 --> 00:35:39,200
screenshots and you compare it for

00:35:37,070 --> 00:35:41,600
certain information if that information

00:35:39,200 --> 00:35:42,830
is there it has the decision to if that

00:35:41,600 --> 00:35:44,840
informations there it's going to

00:35:42,830 --> 00:35:47,180
continue on the process if that

00:35:44,840 --> 00:35:48,470
information is not there maybe the the

00:35:47,180 --> 00:35:51,080
needle will sit and wait for a while

00:35:48,470 --> 00:35:53,180
maybe it'll ask for user interaction

00:35:51,080 --> 00:35:56,150
maybe you've got to snap another needle

00:35:53,180 --> 00:35:59,990
update your expectations and then put

00:35:56,150 --> 00:36:04,190
that JSON file back into the auto inst

00:35:59,990 --> 00:36:08,450
in order for the quality control to

00:36:04,190 --> 00:36:10,460
continue now it doesn't just do needles

00:36:08,450 --> 00:36:13,450
it can this can be an automated QA

00:36:10,460 --> 00:36:16,220
process right so it'll basically take

00:36:13,450 --> 00:36:20,750
whatever images that you want to push

00:36:16,220 --> 00:36:23,990
into the the virtual machine or the QEMU

00:36:20,750 --> 00:36:26,420
and start that up and run it through a

00:36:23,990 --> 00:36:28,670
scripted install take that scripted

00:36:26,420 --> 00:36:30,740
insult and then do additional scripts

00:36:28,670 --> 00:36:32,360
capture the output of those scripts and

00:36:30,740 --> 00:36:34,130
tell you where the successes and then

00:36:32,360 --> 00:36:37,730
where the failures are so you can then

00:36:34,130 --> 00:36:39,830
go back report those bugs back into your

00:36:37,730 --> 00:36:41,630
developers goes back into the open build

00:36:39,830 --> 00:36:43,700
service build service builds the targets

00:36:41,630 --> 00:36:45,350
nightly builds come back out images are

00:36:43,700 --> 00:36:47,050
there they sit down the next morning and

00:36:45,350 --> 00:36:49,580
it all starts all over again

00:36:47,050 --> 00:36:50,900
right so we're talking about you know

00:36:49,580 --> 00:36:54,230
controlling your infrastructure

00:36:50,900 --> 00:36:56,720
optimizing your infrastructure these are

00:36:54,230 --> 00:36:58,550
some of the tools that we use these are

00:36:56,720 --> 00:37:00,860
the tools that you can use these are all

00:36:58,550 --> 00:37:05,150
open source these are all freely

00:37:00,860 --> 00:37:07,580
available tools the only thing that we

00:37:05,150 --> 00:37:10,240
are actually selling as a product is the

00:37:07,580 --> 00:37:10,240
operating system

00:37:11,549 --> 00:37:15,880
okay so patches and updates so when you

00:37:14,289 --> 00:37:18,640
buy the operating system where when you

00:37:15,880 --> 00:37:21,039
you know work with us to include it as

00:37:18,640 --> 00:37:22,780
part of your solution we have a free

00:37:21,039 --> 00:37:24,880
technology called the subscription

00:37:22,780 --> 00:37:28,119
management tool very rudimentary tool

00:37:24,880 --> 00:37:31,359
the goal of this is to provide you a way

00:37:28,119 --> 00:37:33,490
to get the patches from Susa into your

00:37:31,359 --> 00:37:37,510
organization and determine what you want

00:37:33,490 --> 00:37:40,720
to build with it so it's it answers the

00:37:37,510 --> 00:37:43,660
questions about how are you going to do

00:37:40,720 --> 00:37:45,400
maintenance and security patches how are

00:37:43,660 --> 00:37:47,440
you going to push those maintenance and

00:37:45,400 --> 00:37:49,299
security patches out to your customers

00:37:47,440 --> 00:37:52,270
how are you going to report on the

00:37:49,299 --> 00:37:55,299
compliance or the vulnerabilities that

00:37:52,270 --> 00:37:59,260
exist in your solution that you've

00:37:55,299 --> 00:38:00,910
created and the subscription management

00:37:59,260 --> 00:38:03,910
tool is a really simple system it

00:38:00,910 --> 00:38:06,369
basically acts as a proxy server inside

00:38:03,910 --> 00:38:09,039
of your organization so it reaches out

00:38:06,369 --> 00:38:11,440
to seuss of customer care it gets access

00:38:09,039 --> 00:38:14,470
to the patches and updates annals that

00:38:11,440 --> 00:38:16,690
we are constantly updating and providing

00:38:14,470 --> 00:38:19,210
new features or capabilities for and

00:38:16,690 --> 00:38:21,670
allows you to put it into one of three

00:38:19,210 --> 00:38:23,950
areas you can take those packages and

00:38:21,670 --> 00:38:26,559
you can put it in basically a staging

00:38:23,950 --> 00:38:28,750
area to test and validate so you've got

00:38:26,559 --> 00:38:30,369
your replicas you've got your staging

00:38:28,750 --> 00:38:33,339
area and then you can determine which

00:38:30,369 --> 00:38:35,319
packages you want to put out there once

00:38:33,339 --> 00:38:36,640
you put it out there all your customers

00:38:35,319 --> 00:38:38,260
are going to get access to this as long

00:38:36,640 --> 00:38:40,660
as they can reach your back-end system

00:38:38,260 --> 00:38:42,609
if your customers are disconnected maybe

00:38:40,660 --> 00:38:45,010
they're operating in an air-gap fashion

00:38:42,609 --> 00:38:46,869
if you want to put it out there via a

00:38:45,010 --> 00:38:49,599
USB key you want to put it out there as

00:38:46,869 --> 00:38:51,549
an OS image if you want to go package up

00:38:49,599 --> 00:38:53,740
a repository and send them a disk of

00:38:51,549 --> 00:38:56,230
some sort you can do that as well so

00:38:53,740 --> 00:38:59,529
there is a sneakernet component to this

00:38:56,230 --> 00:39:01,930
at the last mile if that's something

00:38:59,529 --> 00:39:04,630
that you do need if you need greater

00:39:01,930 --> 00:39:05,920
control and capabilities beyond that if

00:39:04,630 --> 00:39:07,750
you actually needed to do some

00:39:05,920 --> 00:39:09,549
additional post scripting or you

00:39:07,750 --> 00:39:11,980
actually want to break customers out

00:39:09,549 --> 00:39:14,529
into specific groups then we've got a

00:39:11,980 --> 00:39:17,170
much more robust and higher level

00:39:14,529 --> 00:39:19,349
product called Susa manager that we'll

00:39:17,170 --> 00:39:19,349
talk about

00:39:21,060 --> 00:39:28,240
okay so I'm gonna stop here that was a

00:39:25,390 --> 00:39:29,920
ton of information it actually went by

00:39:28,240 --> 00:39:37,560
pretty quick for me hopefully you guys

00:39:29,920 --> 00:39:40,200
weren't tortured any questions comments

00:39:37,560 --> 00:39:44,080
snarky comments are welcome

00:39:40,200 --> 00:39:46,570
guy in the back slapping okay so the the

00:39:44,080 --> 00:39:53,350
rest of this is basically commercial

00:39:46,570 --> 00:39:56,470
self-service we like build so we are an

00:39:53,350 --> 00:39:57,940
open-source company some other companies

00:39:56,470 --> 00:39:59,470
may have tried to spread flood we are an

00:39:57,940 --> 00:40:01,270
open-source company everything we do is

00:39:59,470 --> 00:40:02,860
out in the open we don't do a whole lot

00:40:01,270 --> 00:40:05,920
of acquisitions we've done a few

00:40:02,860 --> 00:40:08,800
recently but those were actually open

00:40:05,920 --> 00:40:10,510
some open source projects and resources

00:40:08,800 --> 00:40:12,520
that are still working in the

00:40:10,510 --> 00:40:15,280
open-source community everything we do

00:40:12,520 --> 00:40:17,920
is open source first and foremost we

00:40:15,280 --> 00:40:19,690
work very closely in the community we

00:40:17,920 --> 00:40:21,970
try not to put things on Rails we are

00:40:19,690 --> 00:40:23,410
very collaborative as much as we can be

00:40:21,970 --> 00:40:24,550
and that's not just in the open-source

00:40:23,410 --> 00:40:27,520
community but it's also with our

00:40:24,550 --> 00:40:28,960
partners I can't tell you how many times

00:40:27,520 --> 00:40:31,690
we go to conferences and people say god

00:40:28,960 --> 00:40:34,090
we love you and hopefully we're not

00:40:31,690 --> 00:40:36,280
stretching ourselves too thin so beloved

00:40:34,090 --> 00:40:39,420
that much but we do appreciate the the

00:40:36,280 --> 00:40:41,710
customers and the partners that we have

00:40:39,420 --> 00:40:43,150
these are some of the projects that we

00:40:41,710 --> 00:40:44,770
work in these are not all of the

00:40:43,150 --> 00:40:47,440
projects but some of these are actually

00:40:44,770 --> 00:40:49,710
our own projects some of them are shared

00:40:47,440 --> 00:40:53,310
projects obviously the Linux Foundation

00:40:49,710 --> 00:40:56,140
Ceph is an area of high interest for us

00:40:53,310 --> 00:40:59,230
nowadays with distributed storage as

00:40:56,140 --> 00:41:02,110
well as OpenStack so we are sitting on

00:40:59,230 --> 00:41:05,620
the board in a number of these projects

00:41:02,110 --> 00:41:08,170
we are participating with our partners

00:41:05,620 --> 00:41:12,190
and sometimes with our competition in

00:41:08,170 --> 00:41:13,390
all of these projects as well this is a

00:41:12,190 --> 00:41:18,100
little bit about us if you're not

00:41:13,390 --> 00:41:20,590
familiar with us and we were the first

00:41:18,100 --> 00:41:22,510
Enterprise Linux distribution 24 years

00:41:20,590 --> 00:41:28,810
of experience thousands of certified

00:41:22,510 --> 00:41:31,570
systems etc etc etc and that's really

00:41:28,810 --> 00:41:33,010
all I have so if you guys have any other

00:41:31,570 --> 00:41:35,380
questions I'm

00:41:33,010 --> 00:41:38,830
here we will be at the booth tonight I

00:41:35,380 --> 00:41:40,960
think there is happy hour tonight so

00:41:38,830 --> 00:41:43,180
we're looking forward to that but I do

00:41:40,960 --> 00:41:45,670
appreciate your time and your attention

00:41:43,180 --> 00:41:48,490
and again if you have any questions feel

00:41:45,670 --> 00:41:50,080
free to ask now or I'll hang up here for

00:41:48,490 --> 00:41:51,730
a little while longer I think we have

00:41:50,080 --> 00:41:56,520
some time before the next session starts

00:41:51,730 --> 00:42:01,389
up thank you

00:41:56,520 --> 00:42:01,389

YouTube URL: https://www.youtube.com/watch?v=qXbItoOkvEY


