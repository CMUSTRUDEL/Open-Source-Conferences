Title: SDK in the Browser for Zephyr Project - Sakari Poussa, Intel
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	SDK in the Browser for Zephyr Project - Sakari Poussa, Intel

Starting a development for embedded IoT system can be a tedious task, starting with the tools and SDK installations. You also need to have proper operating system, cables and environment variables set up correctly in order to do anything. This can take hours if not days. In this talk, we present an alternative, fast and easy way to start IoT development. All you need is your Zephyr board, USB cable and Web Browser. The Zephyr will be running JavaScript Runtime for Zephyr including a “shell” developer mode and Web USB. The Browser has the IDE where you can edit and download code to your board. No compiling, flashing or rebooting is required. During the talk, we will also do live application development and deployment from the Browser to IoT boards running Zephyr.

About Sakari Poussa
Sakari Poussa is a software architect in Intel’s Open Source Technology Center located in Espoo, Finland, leading web and IoT technology development. Previous to joining Intel, Sakari directed the software engineering efforts of Nokia’s Linux-based mobile operating systems (Maemo and MeeGo) for the popular N900 and N9 device series. At Intel, Sakari has been working on open source projects including Tizen and Crosswalk web runtime. Currently, Sakari is the lead architect of the web platform on Intel’s open source IoT solutions. Sakari has given a lot of technical presentations in big conferences like OSTS (Intel internal), Linux Foundation events, MeeGo/Tizen conferences and in number of smaller events. Sakari has lived five years in the US, which ensures his English, and presentation skills are good.
Captions: 
	00:00:00,030 --> 00:00:06,600
so welcome everybody this is a session

00:00:03,330 --> 00:00:10,469
about SDK SDK in the in the browser for

00:00:06,600 --> 00:00:13,650
several s I'm sorry poster from from

00:00:10,469 --> 00:00:16,410
Intel I work in the web technologies

00:00:13,650 --> 00:00:20,130
team there and our mission is to enable

00:00:16,410 --> 00:00:22,769
web technologies in in all the computing

00:00:20,130 --> 00:00:25,619
platforms and and today we're gonna talk

00:00:22,769 --> 00:00:33,050
the safer OS and and and what we have

00:00:25,619 --> 00:00:36,510
done there the agenda for this talk is

00:00:33,050 --> 00:00:39,180
first we talk about the problem we are

00:00:36,510 --> 00:00:43,579
we are solving here and then one

00:00:39,180 --> 00:00:47,250
solution that's the core of the talk

00:00:43,579 --> 00:00:51,800
I'll do a live demo let's see how that

00:00:47,250 --> 00:00:56,039
one goes and then we'll talk about the

00:00:51,800 --> 00:01:00,480
founding blocks how the the solution is

00:00:56,039 --> 00:01:03,870
put together it involves a couple things

00:01:00,480 --> 00:01:07,860
first the the JavaScript engine running

00:01:03,870 --> 00:01:12,600
on set foo and then a new standards

00:01:07,860 --> 00:01:18,240
called web USB and then the the browser

00:01:12,600 --> 00:01:21,210
application itself and if you have any

00:01:18,240 --> 00:01:25,770
questions please interrupt me at any

00:01:21,210 --> 00:01:32,610
time so really what's the problem we're

00:01:25,770 --> 00:01:37,340
we're trying to solve here the for an

00:01:32,610 --> 00:01:39,630
average developer IOT might be you know

00:01:37,340 --> 00:01:43,880
walk in the park they know what they're

00:01:39,630 --> 00:01:47,540
doing but especially for newcomers

00:01:43,880 --> 00:01:50,729
students who are new to the area

00:01:47,540 --> 00:01:55,049
starting a new I Oh T project can be a

00:01:50,729 --> 00:01:57,990
tedious task you have all these boards

00:01:55,049 --> 00:01:59,909
and cables and sensors and and you

00:01:57,990 --> 00:02:05,610
really don't know you know where to

00:01:59,909 --> 00:02:10,020
start and that the starting a new IOT

00:02:05,610 --> 00:02:13,319
projects typically involves you need to

00:02:10,020 --> 00:02:13,590
set up your development environments you

00:02:13,319 --> 00:02:16,200
need

00:02:13,590 --> 00:02:19,400
to have all the sorts of different

00:02:16,200 --> 00:02:23,370
cables the correct ones some sensors

00:02:19,400 --> 00:02:26,129
documentation sample college you might

00:02:23,370 --> 00:02:28,769
want to or need to update the BIOS and

00:02:26,129 --> 00:02:33,480
firmware and even your OS and all that

00:02:28,769 --> 00:02:37,049
and the documentation at best it's all

00:02:33,480 --> 00:02:39,330
over the place and may be outdated then

00:02:37,049 --> 00:02:41,690
you don't know which one is true and

00:02:39,330 --> 00:02:44,069
which one is not

00:02:41,690 --> 00:02:51,420
so the solution we got to talk about

00:02:44,069 --> 00:02:53,940
today is really a simple one and so the

00:02:51,420 --> 00:02:58,410
the idea is that what if this is all you

00:02:53,940 --> 00:03:00,209
need so you need a board obviously which

00:02:58,410 --> 00:03:03,420
you're gonna write your application and

00:03:00,209 --> 00:03:08,390
then you will need a USB cable in this

00:03:03,420 --> 00:03:16,140
case and and a web browser that's it and

00:03:08,390 --> 00:03:19,680
so I'm gonna do a demo now and so you

00:03:16,140 --> 00:03:23,489
get a sense what it is and then I'll

00:03:19,680 --> 00:03:24,829
present that the building blocks how it

00:03:23,489 --> 00:03:27,329
actually works

00:03:24,829 --> 00:03:35,220
assuming that requires well I'm gonna

00:03:27,329 --> 00:03:39,750
talk about that anyway okay so I have a

00:03:35,220 --> 00:03:42,150
Chrome browser here the I dunno 101

00:03:39,750 --> 00:03:45,329
board the safer board

00:03:42,150 --> 00:03:46,889
it's running safer OS I'll talk about

00:03:45,329 --> 00:03:49,019
that what's what's in there

00:03:46,889 --> 00:03:52,799
but basically it's a set fee board I

00:03:49,019 --> 00:03:55,650
have the USB cable and I have a couple

00:03:52,799 --> 00:03:58,859
of sensors attached to that but more

00:03:55,650 --> 00:04:04,590
about that later so when I plug in the

00:03:58,859 --> 00:04:08,120
USB to my PC Mac in this case the board

00:04:04,590 --> 00:04:14,540
will boot and you will get a

00:04:08,120 --> 00:04:18,989
notification there on the corner and

00:04:14,540 --> 00:04:21,539
says that okay web USB detected and it's

00:04:18,989 --> 00:04:25,380
telling me a URL where to go so I'll

00:04:21,539 --> 00:04:27,030
just click that and it'll launch maybe

00:04:25,380 --> 00:04:31,509
the browser

00:04:27,030 --> 00:04:36,099
as I said you all get to bottom up all

00:04:31,509 --> 00:04:38,680
these wonderful things later doing the

00:04:36,099 --> 00:04:43,569
presentation but what it does is that it

00:04:38,680 --> 00:04:49,270
will take you to a webpage which in this

00:04:43,569 --> 00:04:56,169
case is our IDE or the SDK it's just a

00:04:49,270 --> 00:05:01,330
web application and so I'll hit the get

00:04:56,169 --> 00:05:05,590
started it gives me the the IDE and I

00:05:01,330 --> 00:05:07,449
hit the the connect button it tells me

00:05:05,590 --> 00:05:10,599
that okay there's a there's a web USB

00:05:07,449 --> 00:05:13,539
device out there you want to connect it

00:05:10,599 --> 00:05:16,719
says a paired because I have talked to

00:05:13,539 --> 00:05:19,000
this device previously if it's a brand

00:05:16,719 --> 00:05:20,800
new it just don't say that

00:05:19,000 --> 00:05:25,599
otherwise the functionality is the same

00:05:20,800 --> 00:05:28,870
I connect so now I'm talking to the

00:05:25,599 --> 00:05:35,250
board so this console there on the

00:05:28,870 --> 00:05:38,520
bottom you actually see it let's try to

00:05:35,250 --> 00:05:38,520
make it

00:05:42,080 --> 00:05:49,310
okay well that's bigger so you have

00:05:47,539 --> 00:05:53,090
there on the bottom you have an

00:05:49,310 --> 00:05:54,560
interactive shell you can type some

00:05:53,090 --> 00:06:00,259
basic commands so we have the file

00:05:54,560 --> 00:06:03,710
system there you can eval javascript

00:06:00,259 --> 00:06:06,400
code there and you can reboot and

00:06:03,710 --> 00:06:09,349
there's all sorts of commands available

00:06:06,400 --> 00:06:16,270
then you have your editor and you can

00:06:09,349 --> 00:06:16,270
start typing some code here so like

00:06:17,620 --> 00:06:32,419
console.log hello you'll see okay and

00:06:27,819 --> 00:06:36,080
when you hit the upload button it'll

00:06:32,419 --> 00:06:38,750
copy the file to the safety board it

00:06:36,080 --> 00:06:42,849
runs it there and and the console output

00:06:38,750 --> 00:06:47,330
it's it's coming to the bottom of the

00:06:42,849 --> 00:06:49,699
page there's still I mean this is brand

00:06:47,330 --> 00:06:52,940
new so we need to clean up the console

00:06:49,699 --> 00:06:57,009
so it's showing there's some protocol

00:06:52,940 --> 00:07:02,750
commands but the but you get the picture

00:06:57,009 --> 00:07:06,590
so we can then try to do something to to

00:07:02,750 --> 00:07:12,909
access these sensors so we can say that

00:07:06,590 --> 00:07:18,770
okay I need some pins and here comes the

00:07:12,909 --> 00:07:20,960
the note require statement so you can

00:07:18,770 --> 00:07:26,599
require modules right now these modules

00:07:20,960 --> 00:07:36,289
are built in and so you say okay it's

00:07:26,599 --> 00:07:39,440
all do we know 101 pins and I'll try to

00:07:36,289 --> 00:07:48,250
access some of the that the sensors are

00:07:39,440 --> 00:07:48,250
hooked to the GPIO so I say GPIO I need

00:07:49,180 --> 00:07:56,790
GPIO module

00:07:52,729 --> 00:07:59,490
and at anytime you can test your codes

00:07:56,790 --> 00:08:06,690
you can upload that see if there's any

00:07:59,490 --> 00:08:15,080
errors and then you can write any

00:08:06,690 --> 00:08:22,560
JavaScript like interval set interval

00:08:15,080 --> 00:08:30,870
function and you say again let's log

00:08:22,560 --> 00:08:34,789
something from the loop and you run this

00:08:30,870 --> 00:08:40,680
one every second something like this

00:08:34,789 --> 00:08:46,620
okay so it'll start executing that on a

00:08:40,680 --> 00:08:55,110
target device if you want to do access

00:08:46,620 --> 00:08:57,709
the hardware I have a buzzer in the in

00:08:55,110 --> 00:08:57,709
the GPIO

00:09:00,990 --> 00:09:13,230
so you open it and you say okay the pin

00:09:08,760 --> 00:09:17,850
is what is the pin the buzzer is in pain

00:09:13,230 --> 00:09:21,510
number two rates no that's the button

00:09:17,850 --> 00:09:31,020
the buzzer is on the pin for so then you

00:09:21,510 --> 00:09:41,340
say pens IO for Direction is out okay

00:09:31,020 --> 00:09:48,590
and let's declare a alarm which is false

00:09:41,340 --> 00:09:48,590
and then in the in the loop you say

00:09:49,400 --> 00:09:52,400
buzzer

00:09:59,089 --> 00:10:01,809
right

00:10:02,080 --> 00:10:10,269
alarm let's try this one

00:10:05,410 --> 00:10:18,870
nothing should happen error okay waste

00:10:10,269 --> 00:10:18,870
error thank you

00:10:22,930 --> 00:10:35,130
nice try it again okay so now if we

00:10:28,779 --> 00:10:35,130
change the alarm to toggle it here

00:10:36,029 --> 00:10:51,720
you should hear something okay

00:10:42,210 --> 00:10:56,920
so it's working let's kill that one I

00:10:51,720 --> 00:10:59,950
was told not to do any led so it was an

00:10:56,920 --> 00:11:03,339
LED demo but you get the picture so I

00:10:59,950 --> 00:11:06,430
mean you you you can write code here you

00:11:03,339 --> 00:11:08,589
can download it to the target device and

00:11:06,430 --> 00:11:11,440
you can execute it there I'll talk about

00:11:08,589 --> 00:11:14,830
the api's we have so you can do more

00:11:11,440 --> 00:11:28,390
much more than the GPIO and the basic

00:11:14,830 --> 00:11:34,839
stuff I can't stop good it's good to

00:11:28,390 --> 00:11:42,190
have the experts on the audience all

00:11:34,839 --> 00:11:52,810
right so there was the demo so how does

00:11:42,190 --> 00:11:55,870
it work so now yes okay it's better so

00:11:52,810 --> 00:12:00,010
the way it works is that on the

00:11:55,870 --> 00:12:03,250
left-hand side you have the two sefar

00:12:00,010 --> 00:12:06,339
then you have the JavaScript runtime for

00:12:03,250 --> 00:12:09,700
Zephyr which is on top of the Jerry

00:12:06,339 --> 00:12:14,140
scape that's an open source project that

00:12:09,700 --> 00:12:21,209
we have been working on about a year now

00:12:14,140 --> 00:12:24,820
the Zephyr OS itself has now a web USB

00:12:21,209 --> 00:12:28,930
driver which we actually contributed

00:12:24,820 --> 00:12:30,820
there as well and then we have a part of

00:12:28,930 --> 00:12:34,900
the part of the JavaScript runtime a

00:12:30,820 --> 00:12:37,270
module called a shell and what this a

00:12:34,900 --> 00:12:40,450
shell is doing

00:12:37,270 --> 00:12:43,300
among other things is that it's telling

00:12:40,450 --> 00:12:48,310
the web USB that okay these are the the

00:12:43,300 --> 00:12:50,710
URLs that I support and then when when

00:12:48,310 --> 00:12:53,350
you connect the USB cable the Chrome

00:12:50,710 --> 00:12:57,340
browser will ask that okay this is a web

00:12:53,350 --> 00:13:01,480
USB device what are the the URLs you

00:12:57,340 --> 00:13:06,400
want to go to and and and that's where

00:13:01,480 --> 00:13:10,810
it shows the the dialog on the top hand

00:13:06,400 --> 00:13:15,630
right corner and you click that it'll

00:13:10,810 --> 00:13:18,850
get to the Internet where the

00:13:15,630 --> 00:13:21,720
application lives it downloads the

00:13:18,850 --> 00:13:26,460
application to your Chrome browser and

00:13:21,720 --> 00:13:29,050
and and you have the IDE there and this

00:13:26,460 --> 00:13:31,060
application the web app doesn't need

00:13:29,050 --> 00:13:33,160
anything from the cloud it's just a

00:13:31,060 --> 00:13:36,520
static well not a static but standalone

00:13:33,160 --> 00:13:36,940
web application so you can run it even

00:13:36,520 --> 00:13:40,210
offline

00:13:36,940 --> 00:13:41,920
we are planning of adding the the

00:13:40,210 --> 00:13:44,710
offline support there so you don't even

00:13:41,920 --> 00:13:47,170
need the internet connection in the

00:13:44,710 --> 00:13:51,880
future if you have launched the

00:13:47,170 --> 00:13:55,420
application just once so from there you

00:13:51,880 --> 00:13:57,340
have the the connect button there so you

00:13:55,420 --> 00:14:00,310
hit that it'll connect back to the

00:13:57,340 --> 00:14:04,510
device and then you have your data path

00:14:00,310 --> 00:14:08,680
path ready it's a serial connection on

00:14:04,510 --> 00:14:10,990
top of USB so you can send receive

00:14:08,680 --> 00:14:16,390
anything you want you built on top of

00:14:10,990 --> 00:14:20,160
that so that's the in a nutshell the the

00:14:16,390 --> 00:14:20,160
operation any questions on this one

00:14:22,950 --> 00:14:36,580
ok so comparing the development flow on

00:14:31,960 --> 00:14:41,080
most embedded systems this is true at

00:14:36,580 --> 00:14:43,210
least for for safer and for the original

00:14:41,080 --> 00:14:48,040
101 the arm bolts work a little bit

00:14:43,210 --> 00:14:50,350
differently but the the cycle if you're

00:14:48,040 --> 00:14:52,780
doing native development is that you

00:14:50,350 --> 00:14:54,790
your codes you compile it you link it

00:14:52,780 --> 00:14:57,400
assuming that all your cross compiling

00:14:54,790 --> 00:14:59,710
environment is correct you reboot the

00:14:57,400 --> 00:15:02,020
device you flash it you reboot it again

00:14:59,710 --> 00:15:04,960
and you run your codes and see what

00:15:02,020 --> 00:15:08,410
happens with the JavaScript development

00:15:04,960 --> 00:15:12,390
the cycle is much faster you just edit

00:15:08,410 --> 00:15:15,550
your codes you copy and you run it and

00:15:12,390 --> 00:15:18,250
and with these ingredients the IDE the

00:15:15,550 --> 00:15:25,090
web USB and the JavaScript runtime for

00:15:18,250 --> 00:15:28,530
safer this is possible now then next

00:15:25,090 --> 00:15:31,140
we'll talk about the one of the

00:15:28,530 --> 00:15:34,120
ingredients a little bit more detailed

00:15:31,140 --> 00:15:36,100
which is the the JavaScript runtime for

00:15:34,120 --> 00:15:38,350
safe you OS by the way this is the

00:15:36,100 --> 00:15:41,800
office so beautiful-beautiful name for

00:15:38,350 --> 00:15:48,970
our project some people call it safe UJS

00:15:41,800 --> 00:15:53,020
but that's the way it is so the purpose

00:15:48,970 --> 00:15:55,000
of that project is is to enable the

00:15:53,020 --> 00:15:58,930
JavaScript application development on

00:15:55,000 --> 00:16:02,170
set for a s and to address the the big

00:15:58,930 --> 00:16:04,300
big JavaScript developer community which

00:16:02,170 --> 00:16:08,920
already been building websites and

00:16:04,300 --> 00:16:10,990
mobile applications for decades so they

00:16:08,920 --> 00:16:16,270
can use their family of languages

00:16:10,990 --> 00:16:18,160
familiar tools also in in the IOT and as

00:16:16,270 --> 00:16:21,280
I demonstrated the the development cycle

00:16:18,160 --> 00:16:25,750
it's it's fast so there's no flashing

00:16:21,280 --> 00:16:29,470
just copy the files over it is based on

00:16:25,750 --> 00:16:33,040
the Samsung open source project called

00:16:29,470 --> 00:16:37,540
Jerry script that's the engine and an

00:16:33,040 --> 00:16:42,550
API layer which is the JavaScript

00:16:37,540 --> 00:16:47,620
runtime we try to mimic the well-known

00:16:42,550 --> 00:16:48,870
nodejs api's and when there's not

00:16:47,620 --> 00:16:51,670
available

00:16:48,870 --> 00:16:54,550
that type of API we need to invent

00:16:51,670 --> 00:16:57,270
something or our own and that's that's

00:16:54,550 --> 00:17:04,190
always a struggle

00:16:57,270 --> 00:17:05,960
so already today we can see some

00:17:04,190 --> 00:17:09,410
with Kayson portability so we can run

00:17:05,960 --> 00:17:12,400
the same codes on Linux on top of nodejs

00:17:09,410 --> 00:17:18,020
and and on top of Zephyr with this

00:17:12,400 --> 00:17:20,690
JavaScript runtime and right now the the

00:17:18,020 --> 00:17:23,570
board I mean the runtime supports two

00:17:20,690 --> 00:17:27,050
boards the alguna 101 which is the x86

00:17:23,570 --> 00:17:32,240
based board and the freedom board which

00:17:27,050 --> 00:17:36,800
is non based we understand that we need

00:17:32,240 --> 00:17:40,310
to support more boards and and most of

00:17:36,800 --> 00:17:43,430
the sefie boards should have should run

00:17:40,310 --> 00:17:47,990
this runtime but it's all in a detail to

00:17:43,430 --> 00:17:56,600
support every single kind of the pins

00:17:47,990 --> 00:18:00,280
and the external peripherals there so

00:17:56,600 --> 00:18:03,200
the way the architecture in a high-level

00:18:00,280 --> 00:18:08,720
it was already in the in the opening

00:18:03,200 --> 00:18:10,910
picture but we have unmodified set for

00:18:08,720 --> 00:18:14,300
so we don't we don't touch that we just

00:18:10,910 --> 00:18:17,120
consume it same goes with the Jerry

00:18:14,300 --> 00:18:21,560
script we're just using it there's no

00:18:17,120 --> 00:18:24,940
internal bad cheese on top of that we

00:18:21,560 --> 00:18:29,780
have actually contributed some codes

00:18:24,940 --> 00:18:32,060
there to make our life easier but they

00:18:29,780 --> 00:18:34,880
are just the upstream versions of those

00:18:32,060 --> 00:18:38,510
and then comes the JavaScript runtime

00:18:34,880 --> 00:18:41,120
for safer which contains the there on

00:18:38,510 --> 00:18:43,970
the left-hand side all the API bindings

00:18:41,120 --> 00:18:46,970
which actually allows you to access the

00:18:43,970 --> 00:18:51,110
hardware Bluetooth Network

00:18:46,970 --> 00:18:57,020
whatever is available on the device we

00:18:51,110 --> 00:19:00,440
have pretty nice built tools so we can

00:18:57,020 --> 00:19:04,730
just type make and it'll produce you the

00:19:00,440 --> 00:19:09,350
teammates and we have a lot of sample

00:19:04,730 --> 00:19:13,760
codes demo applications the AP is that

00:19:09,350 --> 00:19:16,610
we supports are all documented and yeah

00:19:13,760 --> 00:19:18,880
it's it's open source more about that

00:19:16,610 --> 00:19:18,880
later

00:19:20,070 --> 00:19:28,780
we have two modes in in in run time so

00:19:24,040 --> 00:19:32,200
we have a run time mode or a production

00:19:28,780 --> 00:19:35,110
mode which takes your JavaScript

00:19:32,200 --> 00:19:38,800
applications and and convert that to a C

00:19:35,110 --> 00:19:42,190
string and embeds that to the final set

00:19:38,800 --> 00:19:45,550
for image and and and then you flash

00:19:42,190 --> 00:19:47,560
that image to your device and it then

00:19:45,550 --> 00:19:50,320
picks up the JavaScript application and

00:19:47,560 --> 00:19:52,030
start executing that and that's the only

00:19:50,320 --> 00:19:56,230
application you're gonna run on that

00:19:52,030 --> 00:19:58,990
configuration then we have the developer

00:19:56,230 --> 00:20:04,360
mode which is what you saw with with the

00:19:58,990 --> 00:20:07,420
browser IDE and that's where we can

00:20:04,360 --> 00:20:11,830
change the JavaScript application so you

00:20:07,420 --> 00:20:13,720
can just copy over the application and

00:20:11,830 --> 00:20:19,660
replace that over and over and over

00:20:13,720 --> 00:20:23,260
again and so the way you distinguish

00:20:19,660 --> 00:20:28,510
these two things is that in the runtime

00:20:23,260 --> 00:20:30,460
mode you just type make and it'll take

00:20:28,510 --> 00:20:33,010
everything it takes your JavaScript

00:20:30,460 --> 00:20:37,590
application the runtime the JavaScript

00:20:33,010 --> 00:20:41,680
engine set your OS builds everything and

00:20:37,590 --> 00:20:47,170
out comes the the binary and then you

00:20:41,680 --> 00:20:50,290
you flash it back to the device and then

00:20:47,170 --> 00:20:53,260
if you say this magic words them equals

00:20:50,290 --> 00:20:54,460
a shell it will leave the JavaScript

00:20:53,260 --> 00:20:58,300
application out

00:20:54,460 --> 00:21:03,070
it adds other things like the web USB

00:20:58,300 --> 00:21:10,950
the filesystem and and and the shell so

00:21:03,070 --> 00:21:15,550
you can do this development mode and

00:21:10,950 --> 00:21:23,830
well that's basically a summary summary

00:21:15,550 --> 00:21:29,350
of the how it works the the JavaScript

00:21:23,830 --> 00:21:31,540
API is that we currently support are

00:21:29,350 --> 00:21:34,930
listed here

00:21:31,540 --> 00:21:37,900
I think I have at least materially of

00:21:34,930 --> 00:21:41,350
them so they are in the middle we have

00:21:37,900 --> 00:21:42,940
the the cephiro West ap ice and then on

00:21:41,350 --> 00:21:45,970
the right hand side we have the

00:21:42,940 --> 00:21:49,270
corresponding no jsap ice as I said in

00:21:45,970 --> 00:21:54,820
the beginning we are mimicking the note

00:21:49,270 --> 00:21:58,000
jsap ice as much as we can so the events

00:21:54,820 --> 00:22:01,510
timers console logging that's available

00:21:58,000 --> 00:22:06,850
now that's part of the core API is in

00:22:01,510 --> 00:22:09,250
the node same with the buffer and then

00:22:06,850 --> 00:22:13,720
we have a ble API

00:22:09,250 --> 00:22:16,840
so you can do ble applications you can

00:22:13,720 --> 00:22:19,180
do google's physical web type of

00:22:16,840 --> 00:22:21,850
application you can define GATT profiles

00:22:19,180 --> 00:22:24,850
all in a JavaScript so that's pretty

00:22:21,850 --> 00:22:28,060
comprehensive API and we've modelled

00:22:24,850 --> 00:22:33,550
that according to the well-known or

00:22:28,060 --> 00:22:37,090
widely used baleno NPM package then we

00:22:33,550 --> 00:22:40,540
have all the hardware API support it's I

00:22:37,090 --> 00:22:44,650
believe the SPI is still not supported

00:22:40,540 --> 00:22:48,280
but all the others are and they're the

00:22:44,650 --> 00:22:51,160
API design is it's kind of a problematic

00:22:48,280 --> 00:22:56,620
since there's no well known standard

00:22:51,160 --> 00:23:01,680
there and that's where we try to go with

00:22:56,620 --> 00:23:04,600
the johnny-five type of api's that's the

00:23:01,680 --> 00:23:07,990
plan for the future they're not today

00:23:04,600 --> 00:23:12,160
like that but that's that's where we're

00:23:07,990 --> 00:23:15,130
heading we also implemented the ocf api

00:23:12,160 --> 00:23:18,430
that emerged so she was talking about

00:23:15,130 --> 00:23:23,320
earlier today in the keynote so you can

00:23:18,430 --> 00:23:26,590
write these ocf compliant or

00:23:23,320 --> 00:23:32,640
non-compliant at least ocf application

00:23:26,590 --> 00:23:32,640
sensors with javascript with our api's

00:23:32,670 --> 00:23:42,190
then we have a couple of w3c center

00:23:38,770 --> 00:23:43,700
api's namely sensors and performance

00:23:42,190 --> 00:23:46,170
api's

00:23:43,700 --> 00:23:49,260
because as I said in the beginning we

00:23:46,170 --> 00:23:55,320
are part of the web platform team at

00:23:49,260 --> 00:23:57,180
Intel which mission is to enable web

00:23:55,320 --> 00:24:00,420
developers or developers to have

00:23:57,180 --> 00:24:04,850
harmonized api's across all computing

00:24:00,420 --> 00:24:09,170
platform and these w3c API stay are in

00:24:04,850 --> 00:24:11,250
the in the browser API so all the

00:24:09,170 --> 00:24:17,460
application that once in your browser

00:24:11,250 --> 00:24:20,310
are using these w3c api's the latest API

00:24:17,460 --> 00:24:24,660
that we got from Paul here in the

00:24:20,310 --> 00:24:26,600
audience is this the UDP which is

00:24:24,660 --> 00:24:31,980
according to the nodejs

00:24:26,600 --> 00:24:37,340
UDP core API we are putting close in the

00:24:31,980 --> 00:24:41,220
in the file system API the next one

00:24:37,340 --> 00:24:43,560
coming TCP HTTP so you'll be able to run

00:24:41,220 --> 00:24:49,550
actually HTTP server in yourself your

00:24:43,560 --> 00:24:55,620
device coop MQTT has been discussed but

00:24:49,550 --> 00:24:57,990
no actions there yet okay so that's the

00:24:55,620 --> 00:25:01,620
JavaScript runtime that's that's the the

00:24:57,990 --> 00:25:03,390
piece running on on the selfie board so

00:25:01,620 --> 00:25:09,890
then a couple sites about the the web

00:25:03,390 --> 00:25:15,570
USB assembly already asked about that so

00:25:09,890 --> 00:25:18,300
why it matters USB is everywhere so it

00:25:15,570 --> 00:25:23,480
is the de facto standard for connecting

00:25:18,300 --> 00:25:27,300
devices it's fast reliable and in

00:25:23,480 --> 00:25:32,190
inexpensive and it can power your device

00:25:27,300 --> 00:25:34,350
I like for example Bluetooth and there's

00:25:32,190 --> 00:25:38,090
this couple of advantages over a

00:25:34,350 --> 00:25:41,400
bluetooth and our other wireless

00:25:38,090 --> 00:25:45,810
technologies and not going to go over

00:25:41,400 --> 00:25:48,990
those details but one thing to point out

00:25:45,810 --> 00:25:50,940
here is that we can make this happen

00:25:48,990 --> 00:25:54,600
with with the web Bluetooth as well

00:25:50,940 --> 00:25:57,229
which is yet another API in the browser

00:25:54,600 --> 00:26:00,119
so that

00:25:57,229 --> 00:26:04,439
potential future enhancement so you can

00:26:00,119 --> 00:26:10,109
run the IDE over Bluetooth to your self

00:26:04,439 --> 00:26:13,679
your device so what the web USB is it's

00:26:10,109 --> 00:26:15,479
a w3c standard well it's not a standard

00:26:13,679 --> 00:26:18,959
yet it's actually I'll take that back

00:26:15,479 --> 00:26:23,299
but the way the w3c standardization work

00:26:18,959 --> 00:26:27,409
is that it's it's a long process

00:26:23,299 --> 00:26:31,189
sometimes even too long if you ask

00:26:27,409 --> 00:26:38,099
well maybe me or somebody else as well

00:26:31,189 --> 00:26:40,889
anyway Google Mozilla they have been

00:26:38,099 --> 00:26:45,089
heavily pushing this Web USB standard

00:26:40,889 --> 00:26:49,739
and it's in the fairly early phase right

00:26:45,089 --> 00:26:53,729
now it's in in Google's terms it's in

00:26:49,739 --> 00:26:58,789
the in the origin trial phase which

00:26:53,729 --> 00:27:03,029
means that they are they are planning of

00:26:58,789 --> 00:27:05,249
enabling it by default and we are this

00:27:03,029 --> 00:27:08,189
IDE for example is participating that

00:27:05,249 --> 00:27:11,129
origin trial so you don't need to do any

00:27:08,189 --> 00:27:19,199
tweaking in your Chrome settings it just

00:27:11,129 --> 00:27:22,949
it just works but that's and the way it

00:27:19,199 --> 00:27:24,959
works is that I don't know the the USB

00:27:22,949 --> 00:27:27,329
protocol that well but there are these

00:27:24,959 --> 00:27:30,779
headers and descriptors what you

00:27:27,329 --> 00:27:39,359
exchanged between the handshake and the

00:27:30,779 --> 00:27:41,909
web USB just defines few URLs or few new

00:27:39,359 --> 00:27:43,519
fields there where you pass these URLs

00:27:41,909 --> 00:27:48,959
and things like that

00:27:43,519 --> 00:27:51,089
and there's a whole bunch of

00:27:48,959 --> 00:27:53,609
documentation and material available

00:27:51,089 --> 00:27:56,759
about the web USB security or of course

00:27:53,609 --> 00:27:59,189
is one of the big concerns and one of

00:27:56,759 --> 00:28:03,269
the couple of the main topics in the

00:27:59,189 --> 00:28:05,969
security area of the web USB is that the

00:28:03,269 --> 00:28:09,880
URL that the device is advertising to

00:28:05,969 --> 00:28:14,230
the browser it's only gonna talk to that

00:28:09,880 --> 00:28:17,200
site and it needs to be HTTPS and and

00:28:14,230 --> 00:28:22,080
only scripts from that site can access

00:28:17,200 --> 00:28:22,080
back to the device yep

00:28:34,019 --> 00:28:42,250
that's a good question this is actually

00:28:38,789 --> 00:28:49,830
can it provided me this material for the

00:28:42,250 --> 00:28:55,149
web USB details will become but I

00:28:49,830 --> 00:29:01,419
recommend it and required for yeah yeah

00:28:55,149 --> 00:29:03,940
I think the the way yeah it's it's a

00:29:01,419 --> 00:29:07,149
good question I cannot answer that right

00:29:03,940 --> 00:29:12,250
now sorry

00:29:07,149 --> 00:29:14,200
and it works only in Chrome right now

00:29:12,250 --> 00:29:17,289
Chrome is the only browser who has

00:29:14,200 --> 00:29:22,360
implemented the the web USB so that

00:29:17,289 --> 00:29:24,850
obviously a limitation but chrome is

00:29:22,360 --> 00:29:34,980
available on Linux Mac and Windows and

00:29:24,850 --> 00:29:34,980
it works on all those platforms did I

00:29:39,010 --> 00:29:52,990
I think you saw Safari browser in my Mac

00:29:49,770 --> 00:29:54,760
that must have been yeah I mean you

00:29:52,990 --> 00:30:01,390
cannot do that with Safari because

00:29:54,760 --> 00:30:05,710
Safari doesn't have the web USB API so

00:30:01,390 --> 00:30:09,250
that is well let's go to the issues so

00:30:05,710 --> 00:30:13,960
it's new the web USBs is new so it

00:30:09,250 --> 00:30:16,770
doesn't come without issues so on Linux

00:30:13,960 --> 00:30:21,330
most of the distros shipped with the

00:30:16,770 --> 00:30:25,000
package called modem manager and it's

00:30:21,330 --> 00:30:27,970
hijacking these USB CDC devices which

00:30:25,000 --> 00:30:32,320
which this Web USB device is claiming to

00:30:27,970 --> 00:30:35,290
be and it is that CDC device and so you

00:30:32,320 --> 00:30:37,290
need to explicitly kill it the the modem

00:30:35,290 --> 00:30:41,170
manager is pretty aggressive in in

00:30:37,290 --> 00:30:44,170
acquiring those devices unless you you

00:30:41,170 --> 00:30:46,480
blacklist your vendor and and product ID

00:30:44,170 --> 00:30:50,490
in in the in the modem manager so I

00:30:46,480 --> 00:30:54,880
think we want to be on that black lace

00:30:50,490 --> 00:30:55,780
on Windows the earlier versions before

00:30:54,880 --> 00:30:59,890
00:30:55,780 --> 00:31:01,870
it needed some custom driver you needed

00:30:59,890 --> 00:31:10,780
to download somewhere it didn't work out

00:31:01,870 --> 00:31:13,780
of the box now it it works but Google is

00:31:10,780 --> 00:31:17,980
still having quite a bit of problems on

00:31:13,780 --> 00:31:20,440
the under Chrome on Windows but that

00:31:17,980 --> 00:31:22,780
should be getting better on Mac on the

00:31:20,440 --> 00:31:25,590
other hand I haven't seen any major

00:31:22,780 --> 00:31:25,590
issues

00:31:27,480 --> 00:31:34,470
okay so then the browser application

00:31:31,470 --> 00:31:37,919
itself that the one that you see in in

00:31:34,470 --> 00:31:42,690
the browser so this one this is a fairly

00:31:37,919 --> 00:31:48,720
a bit small updated picture and what we

00:31:42,690 --> 00:31:52,769
are planning of doing is actually quite

00:31:48,720 --> 00:31:55,289
a few things so you saw the editor you

00:31:52,769 --> 00:31:59,519
saw the console on the right-hand side

00:31:55,289 --> 00:32:01,919
we're going to integrate a module called

00:31:59,519 --> 00:32:04,889
board viewer where you have a

00:32:01,919 --> 00:32:07,460
interactive SVG image of the boils that

00:32:04,889 --> 00:32:11,190
you're connected to so you can mouse

00:32:07,460 --> 00:32:13,830
hover your mouse over you see what pain

00:32:11,190 --> 00:32:16,820
is what you can see a documentation of

00:32:13,830 --> 00:32:19,409
that in the future we might want to

00:32:16,820 --> 00:32:21,990
enable a feature where you can just drag

00:32:19,409 --> 00:32:24,480
a pin there to the coding window it'll

00:32:21,990 --> 00:32:27,690
give you the right code to initialize

00:32:24,480 --> 00:32:32,820
that so it'll come up drag-and-drop

00:32:27,690 --> 00:32:35,279
exercise to write code and then based on

00:32:32,820 --> 00:32:38,519
you know what board you were connected

00:32:35,279 --> 00:32:44,760
to it'll automatically bloat the proper

00:32:38,519 --> 00:32:47,510
board that type of plants but there we

00:32:44,760 --> 00:32:47,510
are we're not there yet

00:32:47,690 --> 00:32:54,600
so the the application itself

00:32:51,179 --> 00:32:58,830
it's a browser only web app so there's

00:32:54,600 --> 00:33:04,019
no server that you need to talk to it's

00:32:58,830 --> 00:33:09,350
just a standalone app the code editor

00:33:04,019 --> 00:33:11,850
itself it's a a editor called Monaco

00:33:09,350 --> 00:33:14,970
Monaco however you pronounce that

00:33:11,850 --> 00:33:17,399
it's from Microsoft Microsoft is using

00:33:14,970 --> 00:33:21,679
that in their Visual Studio code the

00:33:17,399 --> 00:33:25,080
open-source version of the visual studio

00:33:21,679 --> 00:33:27,840
it's it's a pretty robust full-featured

00:33:25,080 --> 00:33:30,480
editor the console that you saw there

00:33:27,840 --> 00:33:34,799
that's another external component from

00:33:30,480 --> 00:33:37,769
Google so we haven't actually invented a

00:33:34,799 --> 00:33:40,700
whole lot of things here because those

00:33:37,769 --> 00:33:43,340
are available already the

00:33:40,700 --> 00:33:49,970
bollier that I showed that's a new

00:33:43,340 --> 00:33:53,260
that's that's an Intel codebase then

00:33:49,970 --> 00:33:58,070
obviously we have the the web USB for

00:33:53,260 --> 00:34:01,690
device communication oh and actually one

00:33:58,070 --> 00:34:07,910
thing that I forgot to mention is that

00:34:01,690 --> 00:34:12,830
we have these multiple tabs so you can

00:34:07,910 --> 00:34:14,990
see here that there on the pop top all

00:34:12,830 --> 00:34:19,100
you cannot really see it but this is a

00:34:14,990 --> 00:34:20,930
tab and with this green button you can

00:34:19,100 --> 00:34:24,200
get another tab and you can connect that

00:34:20,930 --> 00:34:27,110
to another USB device so if you have if

00:34:24,200 --> 00:34:29,900
you're developing a client-server type

00:34:27,110 --> 00:34:32,960
of application you can write server code

00:34:29,900 --> 00:34:35,450
in one app window client code in the

00:34:32,960 --> 00:34:38,230
other one push the code to both boards

00:34:35,450 --> 00:34:38,230
and see how things go

00:34:42,280 --> 00:34:49,400
we also have a github integration so you

00:34:47,240 --> 00:34:54,380
can pull in your code directly from from

00:34:49,400 --> 00:34:58,040
the github and it's it's done with the

00:34:54,380 --> 00:35:01,090
using a angular 2 framework for those

00:34:58,040 --> 00:35:13,580
who understand or are interested in

00:35:01,090 --> 00:35:18,230
front-end frameworks the the IDE itself

00:35:13,580 --> 00:35:20,900
is also open sourced we open source that

00:35:18,230 --> 00:35:25,000
I think a week ago so all the code for

00:35:20,900 --> 00:35:30,640
the browser application is available and

00:35:25,000 --> 00:35:34,790
the the live site where the actual

00:35:30,640 --> 00:35:38,330
browser is running on top of web server

00:35:34,790 --> 00:35:41,300
it's using the github io pages so you

00:35:38,330 --> 00:35:44,000
can just directly go there to that site

00:35:41,300 --> 00:35:46,390
and and you'll get the browser or the or

00:35:44,000 --> 00:35:46,390
the IDE

00:35:49,030 --> 00:36:04,790
okay so those were the three major

00:35:55,030 --> 00:36:08,810
ingredients for the for the IDE so then

00:36:04,790 --> 00:36:11,570
I think I have like ten minutes so I'll

00:36:08,810 --> 00:36:14,350
just briefly go over the the next steps

00:36:11,570 --> 00:36:17,540
and you know summary and then I have a

00:36:14,350 --> 00:36:41,210
time for Q&A but you have a question

00:36:17,540 --> 00:36:47,210
there yes well okay okay so note note ya

00:36:41,210 --> 00:36:53,540
know Jas is not part of this project no

00:36:47,210 --> 00:36:58,760
no no no and then you need a a web

00:36:53,540 --> 00:37:02,470
server which is serving these that the

00:36:58,760 --> 00:37:06,790
web pages and the JavaScript scripts and

00:37:02,470 --> 00:37:11,270
CSS files for the browser but that's it

00:37:06,790 --> 00:37:15,580
the the thing that I meant when I said

00:37:11,270 --> 00:37:20,720
that it doesn't need a server means that

00:37:15,580 --> 00:37:26,350
the web application the ide doesn't talk

00:37:20,720 --> 00:37:30,020
to a build server or any other service

00:37:26,350 --> 00:37:33,680
in order to perform its task like if

00:37:30,020 --> 00:37:38,060
you're familiar with the like the arm

00:37:33,680 --> 00:37:40,870
embed it's a browser application but

00:37:38,060 --> 00:37:45,470
it's totally relying on the back end so

00:37:40,870 --> 00:37:47,900
it's sending your code to the server

00:37:45,470 --> 00:37:51,050
which is building it and it's giving you

00:37:47,900 --> 00:37:54,020
back the binary so there's a strong

00:37:51,050 --> 00:37:55,670
connection between the front page you

00:37:54,020 --> 00:37:58,460
see and and the back end

00:37:55,670 --> 00:38:02,890
what I'm saying here is that we have no

00:37:58,460 --> 00:38:02,890
back-end it's just the web page

00:38:11,930 --> 00:38:21,630
I yeah yeah I I agree I think it's cool

00:38:19,500 --> 00:38:24,690
and we want to keep it cool so we have

00:38:21,630 --> 00:38:28,880
no plans of introducing any server at

00:38:24,690 --> 00:38:35,850
least the mandatory server requirements

00:38:28,880 --> 00:38:42,530
okay this presentation is available

00:38:35,850 --> 00:38:47,910
already online but so the the well

00:38:42,530 --> 00:38:51,420
github.com zero one org safer Jas - IDE

00:38:47,910 --> 00:38:53,640
that's where the code libs and then you

00:38:51,420 --> 00:38:56,610
mangle it to the the way the github does

00:38:53,640 --> 00:39:01,740
the i/o pages it gives you this type of

00:38:56,610 --> 00:39:08,090
URL where the light side is did you get

00:39:01,740 --> 00:39:11,910
it okay okay so as I said this is a

00:39:08,090 --> 00:39:16,890
pretty new project there's a lot of work

00:39:11,910 --> 00:39:20,160
to be done and so what we would like to

00:39:16,890 --> 00:39:24,120
do is to have first of all the board

00:39:20,160 --> 00:39:28,470
viewer available have more boards there

00:39:24,120 --> 00:39:30,980
right now it's just the Arduino 101 the

00:39:28,470 --> 00:39:36,890
communication between the panels that I

00:39:30,980 --> 00:39:40,020
talked then it would be good to have the

00:39:36,890 --> 00:39:43,260
proper API documentation - to the

00:39:40,020 --> 00:39:46,890
moniker editor meaning proper the safer

00:39:43,260 --> 00:39:50,250
Jas I will runtime api's so when you

00:39:46,890 --> 00:39:55,380
type in you know GPIO it'll give you an

00:39:50,250 --> 00:39:58,590
GPI dot it'll give you all the functions

00:39:55,380 --> 00:40:01,170
that that object supports now it's just

00:39:58,590 --> 00:40:04,620
some I don't know exactly what it is but

00:40:01,170 --> 00:40:07,590
it's not very relevant so then you can

00:40:04,620 --> 00:40:09,210
you don't actually in that case you need

00:40:07,590 --> 00:40:13,430
less and less the API documentation

00:40:09,210 --> 00:40:13,430
because the editor is is giving you that

00:40:13,770 --> 00:40:24,150
it would be easy to plug into other IDs

00:40:19,430 --> 00:40:26,420
because on the device side it's just the

00:40:24,150 --> 00:40:30,930
USB and then the protocol on top of that

00:40:26,420 --> 00:40:33,810
however that the protocol right now it's

00:40:30,930 --> 00:40:38,970
it's really ad hoc we need to define a

00:40:33,810 --> 00:40:42,180
proper protocol document it so then any

00:40:38,970 --> 00:40:45,390
project can implement their own IDE on

00:40:42,180 --> 00:40:49,350
top of the web USB it would be good if

00:40:45,390 --> 00:40:51,480
we can flash the device via the web USB

00:40:49,350 --> 00:40:55,710
I don't know whether this is even

00:40:51,480 --> 00:40:59,490
possible but so then people don't need

00:40:55,710 --> 00:41:05,490
to do the initial bootstrapping of the

00:40:59,490 --> 00:41:08,040
boils one pre big limitation right now

00:41:05,490 --> 00:41:11,640
is that because it's a browser

00:41:08,040 --> 00:41:16,560
application you don't have access to the

00:41:11,640 --> 00:41:20,970
local file system so well that's the way

00:41:16,560 --> 00:41:23,400
it is this ways around that but we need

00:41:20,970 --> 00:41:27,570
to pick the collect solution for that

00:41:23,400 --> 00:41:31,650
one the web USB itself it's undergoing

00:41:27,570 --> 00:41:34,260
some changes they current origin trial

00:41:31,650 --> 00:41:36,780
runs till end of mites and then after

00:41:34,260 --> 00:41:39,330
that Google has already announced that

00:41:36,780 --> 00:41:42,150
they will and the w3c working group has

00:41:39,330 --> 00:41:48,450
announced that they will revisit the API

00:41:42,150 --> 00:41:53,640
and most likely change that one of the

00:41:48,450 --> 00:41:55,550
problems we have with the Arduino 101 is

00:41:53,640 --> 00:41:56,950
that

00:41:55,550 --> 00:42:00,760
[Music]

00:41:56,950 --> 00:42:03,890
the way we built the a shell is that

00:42:00,760 --> 00:42:06,890
since okay let let me take that that

00:42:03,890 --> 00:42:10,490
back in in the production mode the way

00:42:06,890 --> 00:42:12,890
we built the runtime is that it analyzes

00:42:10,490 --> 00:42:15,410
the JavaScript application and it only

00:42:12,890 --> 00:42:18,860
builds the modules that the application

00:42:15,410 --> 00:42:20,840
is using so if you're using Bluetooth it

00:42:18,860 --> 00:42:24,320
will bring in the separate Bluetooth

00:42:20,840 --> 00:42:26,840
module but if you're not it doesn't

00:42:24,320 --> 00:42:28,820
build it in the a shell on the other

00:42:26,840 --> 00:42:30,920
hand we have no idea what the

00:42:28,820 --> 00:42:33,350
application is so we need to below

00:42:30,920 --> 00:42:39,590
everything there and that's where we're

00:42:33,350 --> 00:42:44,780
running short on the ROM memory which we

00:42:39,590 --> 00:42:50,480
have 256 K a little bit less than 300 K

00:42:44,780 --> 00:42:53,870
at the moment and this has been only

00:42:50,480 --> 00:42:58,100
tested with the original 101 it would be

00:42:53,870 --> 00:43:03,980
good to test and fix that for other

00:42:58,100 --> 00:43:08,620
boards as well and as I said it's all

00:43:03,980 --> 00:43:11,170
open so we're really looking for

00:43:08,620 --> 00:43:16,750
contributions and users and applications

00:43:11,170 --> 00:43:16,750
both on the runtime and the and the IDE

00:43:18,010 --> 00:43:29,830
so as a summary the browser-based IDE

00:43:25,670 --> 00:43:33,860
it's a easy to use fast to get started

00:43:29,830 --> 00:43:37,310
development environment it should lower

00:43:33,860 --> 00:43:42,440
the entry barrier for for destroy IOT

00:43:37,310 --> 00:43:44,830
projects and we think that it's a it's a

00:43:42,440 --> 00:43:48,110
it's a really perfect match for

00:43:44,830 --> 00:43:51,170
education classrooms hackathons demos

00:43:48,110 --> 00:43:53,120
where you don't have a lot of time so

00:43:51,170 --> 00:43:55,940
you kind of a time box you have you know

00:43:53,120 --> 00:43:57,500
45 minutes an hour to get things going

00:43:55,940 --> 00:43:59,960
and you don't want to waste time setting

00:43:57,500 --> 00:44:03,230
up your environment so with this one you

00:43:59,960 --> 00:44:07,460
can just get up and running in in in a

00:44:03,230 --> 00:44:09,609
couple minutes okay so I think I have

00:44:07,460 --> 00:44:47,259
five more minutes for

00:44:09,609 --> 00:44:50,319
questions yeah it's a it's a it's a good

00:44:47,259 --> 00:44:54,489
question and I think JavaScript in in

00:44:50,319 --> 00:45:00,519
the IOT will have this challenge for

00:44:54,489 --> 00:45:04,799
four years to come and the but there

00:45:00,519 --> 00:45:04,799
should be no reason for that because

00:45:09,660 --> 00:45:31,630
okay okay yes yes yeah yes yeah but but

00:45:27,130 --> 00:45:34,720
then the way then then you know once

00:45:31,630 --> 00:45:37,480
you're done with your your tinkering you

00:45:34,720 --> 00:45:40,960
should switch to the so-called proto

00:45:37,480 --> 00:45:43,599
production mode and and and you you said

00:45:40,960 --> 00:45:47,650
okay now it works let's go to you know

00:45:43,599 --> 00:45:50,470
some trial let's flash you know a couple

00:45:47,650 --> 00:45:53,079
hundred devices and and that's where you

00:45:50,470 --> 00:45:55,749
bake in your application into the image

00:45:53,079 --> 00:45:59,170
and you just flash that we've actually

00:45:55,749 --> 00:46:01,029
we have a hackathon tomorrow Wednesday

00:45:59,170 --> 00:46:07,170
afternoon which unfortunately it's

00:46:01,029 --> 00:46:09,400
already full but there we are kind of

00:46:07,170 --> 00:46:13,900
demonstrating and trying out these

00:46:09,400 --> 00:46:15,460
different workflows but the production

00:46:13,900 --> 00:46:19,749
modes I mean these guys they they

00:46:15,460 --> 00:46:23,380
flashed I think we have 35 boards and it

00:46:19,749 --> 00:46:26,349
took what couple minutes 5-10 minutes

00:46:23,380 --> 00:46:28,420
to class them all with the production

00:46:26,349 --> 00:46:35,309
image so what once once once you're done

00:46:28,420 --> 00:46:35,309
you just keep copying it or so yeah okay

00:46:42,210 --> 00:46:50,370
yeah it's it's it's another good

00:46:45,900 --> 00:46:53,850
question the vague answer it depends it

00:46:50,370 --> 00:46:56,040
depends on your application then we have

00:46:53,850 --> 00:47:01,940
been running you know demos where we

00:46:56,040 --> 00:47:05,180
have ble doing the physical web

00:47:01,940 --> 00:47:09,780
advertisement and then a gap profile

00:47:05,180 --> 00:47:13,980
which is accessing a few centers and we

00:47:09,780 --> 00:47:18,780
haven't hit a rom sorry Ram limits with

00:47:13,980 --> 00:47:24,660
the original 101 which contains 55k ram

00:47:18,780 --> 00:47:28,740
so but once we if we if we start running

00:47:24,660 --> 00:47:32,250
a you know we have TCP and HTTP and we

00:47:28,740 --> 00:47:36,120
start running you know web server there

00:47:32,250 --> 00:47:37,710
and somebody sends a big JSON blob or

00:47:36,120 --> 00:47:46,620
something I'm sure we're gonna run out

00:47:37,710 --> 00:47:49,190
of memory so I don't know yeah yeah yeah

00:47:46,620 --> 00:47:49,190
did

00:47:53,520 --> 00:48:09,110
I think the answer the question was

00:48:05,580 --> 00:48:19,100
about wrong sorry RAAM RAAM RAAM

00:48:09,110 --> 00:48:23,580
yeah yeah yeah but I I don't know I mean

00:48:19,100 --> 00:48:28,580
what type of application you need to run

00:48:23,580 --> 00:48:28,580
over the the RAM limit

00:48:52,110 --> 00:48:57,390
down on our doing a one on one and so

00:48:59,640 --> 00:49:11,920
yes yeah we don't have the bindings yet

00:49:04,180 --> 00:49:17,030
but maybe later this year okay anything

00:49:11,920 --> 00:49:21,189
else all right I think we're done thanks

00:49:17,030 --> 00:49:21,189

YouTube URL: https://www.youtube.com/watch?v=FTLjNYKkiSM


