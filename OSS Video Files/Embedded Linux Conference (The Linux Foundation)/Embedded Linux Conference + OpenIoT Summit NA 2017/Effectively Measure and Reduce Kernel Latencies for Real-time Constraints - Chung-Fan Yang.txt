Title: Effectively Measure and Reduce Kernel Latencies for Real-time Constraints - Chung-Fan Yang
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Effectively Measure and Reduce Kernel Latencies for Real-time Constraints - Chung-Fan Yang & Jim Huang, South Star Xelerator (SSX)

The latency means the time after a task is invoked and before it is executed. It depends on Linux scheduler latency, the deferred execution method (workqueue vs. tasklet vs. kthread), and the priorities of competing tasks. In this talk , we show the effective ways to experiment the different methods, in terms of their response latency, and figure out how the system load, and user space task priorities affect them on both Intel and ARM architectures.

We will also analyze and improve the scalability of Linux performance in multi-core environments upon the measurements, used in actual real-time applications.

About Jim Huang
Jim leads the engineering team of South Star Xelerator (SSX), building open source based commercial solutions for information infrastructure and robotics. After involved in Android Open Source Project, Jim specialises in real-time and virtualization to bring Linux based robots to fit for the industrial requirements. He is the co-founder of LXDE project, a lightwight desktop environment widely used in embedded devices such as Raspbery Pi. speaking experience: ELC 203-2015 and OpenIoT 2016.

About Chung-Fan Yang
Chung-Fan Yang is current 4th grade student from National Cheng-Kung University, Taiwan. Majoring is electronic-engineering, he spent most of the time on firmware and embedded system developments, from hardware to system software level. Recently, he focued on the experimenting real-time Linux kernel and exploring different real-time performance optimization techniques for various applications.
Captions: 
	00:00:00,030 --> 00:00:05,040
hello everybody we are going to talk

00:00:02,280 --> 00:00:07,740
about approach to major and reduce

00:00:05,040 --> 00:00:12,290
colonel agency runs a perspective of

00:00:07,740 --> 00:00:16,520
newellton substantive women and

00:00:12,290 --> 00:00:21,060
interpreted in this talk we discussed

00:00:16,520 --> 00:00:26,029
the latency which means the time up to

00:00:21,060 --> 00:00:31,349
pass is invoke and people is its cue and

00:00:26,029 --> 00:00:37,370
we are talking about detail well that

00:00:31,349 --> 00:00:40,440
has to come from also we introduced

00:00:37,370 --> 00:00:42,870
microscope measurements by efficient way

00:00:40,440 --> 00:00:46,200
to visualize cysts in the latency so

00:00:42,870 --> 00:00:51,920
major target in our libertine system is

00:00:46,200 --> 00:00:56,129
pre and RT but I think the idea can be

00:00:51,920 --> 00:01:00,440
reused by other do an extension daggers

00:00:56,129 --> 00:01:05,119
anyway in the finally we are we were

00:01:00,440 --> 00:01:07,890
analyzed and reduced latency using

00:01:05,119 --> 00:01:14,869
coaches a knife medical for it is

00:01:07,890 --> 00:01:18,619
important so pre not he is self is

00:01:14,869 --> 00:01:22,970
approach to minimize Lina's internally

00:01:18,619 --> 00:01:27,290
latencies of external event to to

00:01:22,970 --> 00:01:32,520
response so the latency consists of

00:01:27,290 --> 00:01:36,570
several paths so the first one is people

00:01:32,520 --> 00:01:40,290
in Iran is really react you have to

00:01:36,570 --> 00:01:44,610
handle the critical section which which

00:01:40,290 --> 00:01:48,090
might disable interval and you have to

00:01:44,610 --> 00:01:53,430
wait for with the time from the Howell

00:01:48,090 --> 00:01:56,939
to react interlock also in the design of

00:01:53,430 --> 00:01:57,960
dinners in Iran there is a top health

00:01:56,939 --> 00:02:05,369
and a bad health

00:01:57,960 --> 00:02:10,860
so this despise quick tour also you so

00:02:05,369 --> 00:02:13,120
trying to Vega usually involves lock as

00:02:10,860 --> 00:02:15,819
you and and so on

00:02:13,120 --> 00:02:19,440
then you have a to handles a button help

00:02:15,819 --> 00:02:25,209
which means stop our queue and an other

00:02:19,440 --> 00:02:27,160
potential signals Asian so in in the

00:02:25,209 --> 00:02:32,620
last part you have a to handle the

00:02:27,160 --> 00:02:36,819
scheduler so what does pre and him kana

00:02:32,620 --> 00:02:38,799
means it impressed council of latency to

00:02:36,819 --> 00:02:42,849
allow the kernel to be presentable

00:02:38,799 --> 00:02:46,000
anywhere and the kana pre engine

00:02:42,849 --> 00:02:52,019
increased responsibility but also but in

00:02:46,000 --> 00:02:56,410
an aside it decreased throughput we

00:02:52,019 --> 00:02:59,230
mentioned preemption to be to be the

00:02:56,410 --> 00:03:02,440
ability to interrupt a test and many

00:02:59,230 --> 00:03:06,849
prehension points so you can compare it

00:03:02,440 --> 00:03:10,569
to tiger the first one has longer

00:03:06,849 --> 00:03:14,980
latency but if you you can insert more

00:03:10,569 --> 00:03:17,730
prevention points we can get this to

00:03:14,980 --> 00:03:21,220
show her latency and as a longer

00:03:17,730 --> 00:03:24,850
non-printable problem used so longer

00:03:21,220 --> 00:03:29,470
waiting high and the uncertainty comes

00:03:24,850 --> 00:03:34,019
so the idea about pre-entry and art he

00:03:29,470 --> 00:03:40,420
is to make system copy and book as well

00:03:34,019 --> 00:03:45,069
even in in the context of system code so

00:03:40,420 --> 00:03:46,660
if you change the diagram you can see if

00:03:45,069 --> 00:03:52,060
you turn off pre

00:03:46,660 --> 00:03:55,660
cannot prehension the kernel only pre

00:03:52,060 --> 00:03:57,519
end in user space in other words pre

00:03:55,660 --> 00:03:59,769
entering is not allowed in cannot more

00:03:57,519 --> 00:04:05,019
when when you're Connor is configured

00:03:59,769 --> 00:04:08,019
with pre engine disabled Friel so you

00:04:05,019 --> 00:04:14,319
can see from the diagram in the new

00:04:08,019 --> 00:04:18,579
account Henry Estelle is is always the

00:04:14,319 --> 00:04:22,960
most most important highest priority

00:04:18,579 --> 00:04:26,730
task and and you can see from Thailand

00:04:22,960 --> 00:04:33,100
as well it's a so alkyl

00:04:26,730 --> 00:04:36,850
another cannot wait as a secondary so if

00:04:33,100 --> 00:04:41,260
you enabled pre engine configuration in

00:04:36,850 --> 00:04:45,070
your kernel for example - so the first

00:04:41,260 --> 00:04:50,830
one is to insert it's pretty prehension

00:04:45,070 --> 00:04:53,110
point in kernel by introduce my sleep so

00:04:50,830 --> 00:04:57,160
column can be pre and only at prehension

00:04:53,110 --> 00:05:02,680
point if you configure your economies

00:04:57,160 --> 00:05:06,070
configure pre ends which insert more

00:05:02,680 --> 00:05:11,770
prehension point and do implicitly

00:05:06,070 --> 00:05:17,010
prehension so pre engine engine could

00:05:11,770 --> 00:05:23,370
happen when free engine county gets 0

00:05:17,010 --> 00:05:32,560
and finally the complication of pre and

00:05:23,370 --> 00:05:38,560
RT for is to reduce non preventable case

00:05:32,560 --> 00:05:42,099
in kernel here here we in care about

00:05:38,560 --> 00:05:44,770
spin up and interrupt contest so you can

00:05:42,099 --> 00:05:47,950
see from the diagram almost every past

00:05:44,770 --> 00:05:52,720
can be preventable in in the in this

00:05:47,950 --> 00:05:58,330
kind of complication and the if you

00:05:52,720 --> 00:06:03,430
compare with the original one I mean to

00:05:58,330 --> 00:06:07,240
turn off the prevention in kernel and

00:06:03,430 --> 00:06:10,180
the compared with pre NRT you can you

00:06:07,240 --> 00:06:14,440
can see the so I'll cure itself it's

00:06:10,180 --> 00:06:18,539
done so so I'll Q is removing in pre NRT

00:06:14,440 --> 00:06:21,760
conversion well case so add QD is

00:06:18,539 --> 00:06:25,210
implement as a normal kind of way which

00:06:21,760 --> 00:06:29,490
handles all some air cues so our Q lungs

00:06:25,210 --> 00:06:33,659
from the context cool ways from them and

00:06:29,490 --> 00:06:36,969
there are more system management rate

00:06:33,659 --> 00:06:39,539
such as actually watch table

00:06:36,969 --> 00:06:43,449
case of our QD and

00:06:39,539 --> 00:06:47,079
possible Hannah you can check the SN

00:06:43,449 --> 00:06:52,539
talk by Stephen bluster last that last

00:06:47,079 --> 00:06:57,489
year huge eh a little information of pre

00:06:52,539 --> 00:07:04,179
and RT you can see old also spin luck I

00:06:57,489 --> 00:07:11,259
ask yourself is repressed with spin lock

00:07:04,179 --> 00:07:15,099
and it is quite interesting we an art

00:07:11,259 --> 00:07:19,199
history already changed too impatient so

00:07:15,099 --> 00:07:24,179
if the real implantation is here a new

00:07:19,199 --> 00:07:24,179
artist spin duck which is three people

00:07:25,199 --> 00:07:32,459
so if we talk about how to measure the

00:07:29,649 --> 00:07:35,259
latency we have to consider several

00:07:32,459 --> 00:07:37,829
condition such a scenario the first

00:07:35,259 --> 00:07:42,149
scenario is wake up

00:07:37,829 --> 00:07:46,389
also I mentioned before the latest ik

00:07:42,149 --> 00:07:51,819
consists of three paths for how well are

00:07:46,389 --> 00:07:53,819
you scheduled and the finally test get a

00:07:51,819 --> 00:07:59,309
response

00:07:53,819 --> 00:08:01,809
so in Nina's Nina's in the rendering is

00:07:59,309 --> 00:08:06,269
quite a quite tricky

00:08:01,809 --> 00:08:10,689
Endora controls in how a signal and

00:08:06,269 --> 00:08:14,319
process switch to sushi more from the

00:08:10,689 --> 00:08:17,789
rigid mode like you sumo and Bank

00:08:14,319 --> 00:08:22,199
banking richest and the disabled irq

00:08:17,789 --> 00:08:26,579
generica interval vector call a code and

00:08:22,199 --> 00:08:30,669
the servitor contest in interactivity so

00:08:26,579 --> 00:08:35,949
the last part is to identify which

00:08:30,669 --> 00:08:41,139
interact happen and cause the ribbon irq

00:08:35,949 --> 00:08:45,160
service so in this scenario you can see

00:08:41,139 --> 00:08:47,920
the test to is I mean the institution I

00:08:45,160 --> 00:08:51,139
would have to each get delay because of

00:08:47,920 --> 00:08:56,209
external event

00:08:51,139 --> 00:09:03,120
another scenario is Waker an adult CPU

00:08:56,209 --> 00:09:06,240
it has time to regard CPU by means of

00:09:03,120 --> 00:09:10,079
ipi which means in the processor

00:09:06,240 --> 00:09:16,519
interrupts so it has time from phantom

00:09:10,079 --> 00:09:20,519
or CPU from idle to run it is a get a

00:09:16,519 --> 00:09:24,360
problem about potential latencies so

00:09:20,519 --> 00:09:28,829
spiritual needs to put wait with a task

00:09:24,360 --> 00:09:32,839
otherwise in interlock increase so we

00:09:28,829 --> 00:09:37,920
have to think about how how to be

00:09:32,839 --> 00:09:41,480
reduced latency in this condition the

00:09:37,920 --> 00:09:44,579
first one is you can think about

00:09:41,480 --> 00:09:48,690
arrangement of process priority lower

00:09:44,579 --> 00:09:53,940
priority task ways entire queue while

00:09:48,690 --> 00:10:00,779
high priority task given CPU and you can

00:09:53,940 --> 00:10:03,930
change it is scheduling policy for

00:10:00,779 --> 00:10:07,260
example schedule people and Robbie

00:10:03,930 --> 00:10:14,399
always schedule before schedule other of

00:10:07,260 --> 00:10:18,690
a page so let's back to the measurement

00:10:14,399 --> 00:10:22,350
we want to introduce a efficient way to

00:10:18,690 --> 00:10:26,820
perform microscope measurement so we

00:10:22,350 --> 00:10:30,750
think about the several items the first

00:10:26,820 --> 00:10:35,779
one is a cross and hydrogen timer which

00:10:30,750 --> 00:10:42,329
you we usually usually mention as h RT

00:10:35,779 --> 00:10:48,300
as RT is it's a quite critical because

00:10:42,329 --> 00:10:53,940
of it consists it introduced to how and

00:10:48,300 --> 00:10:57,899
the subway interrupt for the currency so

00:10:53,940 --> 00:10:59,850
timing in Iran are not not response when

00:10:57,899 --> 00:11:00,620
system is all OD

00:10:59,850 --> 00:11:05,680
and

00:11:00,620 --> 00:11:09,200
it cost more time and letters in cannot

00:11:05,680 --> 00:11:12,530
under the nest way is test the switching

00:11:09,200 --> 00:11:17,990
cost as you know a process which is

00:11:12,530 --> 00:11:23,050
always heavy than very switching process

00:11:17,990 --> 00:11:26,630
switching needs needs to thrush TOB if

00:11:23,050 --> 00:11:29,410
your new your hand operation consists of

00:11:26,630 --> 00:11:34,310
lots of process process switching

00:11:29,410 --> 00:11:37,940
miserable is is necessary and also we

00:11:34,310 --> 00:11:40,490
think about page faults initial memory

00:11:37,940 --> 00:11:45,940
SS cost paid for and it costs more

00:11:40,490 --> 00:11:50,590
latencies and the page our swap area

00:11:45,940 --> 00:11:54,770
also called page box you can use a

00:11:50,590 --> 00:11:57,950
assistant called unlock oh and repress

00:11:54,770 --> 00:12:01,070
the illusion memory rotator with your

00:11:57,950 --> 00:12:05,290
customer that's what so as you might

00:12:01,070 --> 00:12:14,030
know there is there some built-ins based

00:12:05,290 --> 00:12:17,810
like POS F and also we sing about issue

00:12:14,030 --> 00:12:22,070
of mod multi cost tasks and can move

00:12:17,810 --> 00:12:26,540
from local co2 lamoco and this migration

00:12:22,070 --> 00:12:32,920
cost additional latency so you can face

00:12:26,540 --> 00:12:37,690
the problem by by using CPU state or

00:12:32,920 --> 00:12:42,890
specify the CPC groups the final one is

00:12:37,690 --> 00:12:48,770
is luck as I mentioned before a spin

00:12:42,890 --> 00:12:53,690
lock or already replaced by our team you

00:12:48,770 --> 00:12:58,430
test which can sleep spindle must not

00:12:53,690 --> 00:13:02,630
used in atomic path that is free and

00:12:58,430 --> 00:13:05,630
disable or local irq set our team you

00:13:02,630 --> 00:13:08,720
tests use of peyote inheritance it not

00:13:05,630 --> 00:13:09,800
just a Mew test implement the protocol

00:13:08,720 --> 00:13:12,670
of peyote

00:13:09,800 --> 00:13:14,240
inheritance to prevent from priority

00:13:12,670 --> 00:13:20,600
invention

00:13:14,240 --> 00:13:27,529
and is no longer just fuel tax I mean

00:13:20,600 --> 00:13:31,579
fast mutex so as a result the lats the

00:13:27,529 --> 00:13:36,040
cause of the new locks get higher in in

00:13:31,579 --> 00:13:39,410
general so people we to really

00:13:36,040 --> 00:13:42,709
measurement we have to prepare would law

00:13:39,410 --> 00:13:46,929
in order to simulate and the figure of

00:13:42,709 --> 00:13:51,980
the profit term many tools you can use

00:13:46,929 --> 00:13:55,249
we just Picasa the first one is the

00:13:51,980 --> 00:13:59,480
famous one as a happened hemorrhage

00:13:55,249 --> 00:14:02,660
Israel is to adjust a single source to

00:13:59,480 --> 00:14:05,720
to test the schedule and the units are

00:14:02,660 --> 00:14:08,959
key performers by spawning process and

00:14:05,720 --> 00:14:15,110
right under the next one is stressed

00:14:08,959 --> 00:14:20,959
such as at or you can use it to

00:14:15,110 --> 00:14:24,019
normalize the data to get I mean you

00:14:20,959 --> 00:14:26,600
date her made major funder sister and I

00:14:24,019 --> 00:14:33,670
give you an overview of a system impact

00:14:26,600 --> 00:14:37,579
each kernel I had this fantastic link in

00:14:33,670 --> 00:14:42,920
the different parts so you can compare

00:14:37,579 --> 00:14:47,089
with various conversions and the last

00:14:42,920 --> 00:14:49,660
one is our in-house Prieta tasks which

00:14:47,089 --> 00:14:53,779
evaluate low balance or aggressive

00:14:49,660 --> 00:14:59,899
this is parties of new product and

00:14:53,779 --> 00:15:04,480
already in use in some change china

00:14:59,899 --> 00:15:08,779
factory so Emily person Israel is our

00:15:04,480 --> 00:15:12,110
our customer buys proven so we use it

00:15:08,779 --> 00:15:15,139
was the simulator good law and so

00:15:12,110 --> 00:15:19,149
Abaddon can be used to impose a user

00:15:15,139 --> 00:15:24,799
mode and economic we will talk later

00:15:19,149 --> 00:15:27,800
so cyclic test the program cyclic test

00:15:24,799 --> 00:15:32,540
is well known one

00:15:27,800 --> 00:15:35,149
and how can he work staggered years past

00:15:32,540 --> 00:15:38,660
a major that they'll have fun

00:15:35,149 --> 00:15:43,309
very schedule to Vega from when is

00:15:38,660 --> 00:15:49,850
actually is it kids get a wake up

00:15:43,309 --> 00:15:55,089
so the motivational cycle test is trying

00:15:49,850 --> 00:15:59,110
to major the time time in there have

00:15:55,089 --> 00:16:03,170
cyclic test can use a highlighter and

00:15:59,110 --> 00:16:05,989
today together allow user to see the

00:16:03,170 --> 00:16:08,600
distribution of latency so if you check

00:16:05,989 --> 00:16:12,769
the diagram you can see some interest

00:16:08,600 --> 00:16:16,429
sparked a long pair of Legends shows

00:16:12,769 --> 00:16:20,329
that some has in the kernel are taking a

00:16:16,429 --> 00:16:24,910
while to be pre end during Rico session

00:16:20,329 --> 00:16:28,160
where the kernel cannot interrupt

00:16:24,910 --> 00:16:35,149
Saturday's test is there is a good tool

00:16:28,160 --> 00:16:39,740
but we want to mention is this

00:16:35,149 --> 00:16:43,730
disadvantage as the loss of time

00:16:39,740 --> 00:16:48,889
information of this state latency events

00:16:43,730 --> 00:16:52,660
and there is no way to deconstruct so we

00:16:48,889 --> 00:16:59,569
are thinking about efficient way to

00:16:52,660 --> 00:17:04,779
implement the way to major and it's a

00:16:59,569 --> 00:17:07,939
way we can reduce the latency eventually

00:17:04,779 --> 00:17:10,270
okay so talking about providing tools

00:17:07,939 --> 00:17:12,500
for linear scheduling we were mainly

00:17:10,270 --> 00:17:15,529
focusing on the overall performance of

00:17:12,500 --> 00:17:19,220
the super system so traditionally we use

00:17:15,529 --> 00:17:21,319
perf to understand which probably lies

00:17:19,220 --> 00:17:25,159
the CPU resource this is achieved by

00:17:21,319 --> 00:17:28,820
productively simple in the CPUs pmu

00:17:25,159 --> 00:17:31,360
counters and you static code analysis to

00:17:28,820 --> 00:17:31,360
understand

00:17:31,410 --> 00:17:40,620
since the method works well for rodent

00:17:36,120 --> 00:17:42,000
ncpo tags as we high throughput Waclaw

00:17:40,620 --> 00:17:45,060
before real-time tests we will have to

00:17:42,000 --> 00:17:48,090
get down to the MCOs second label to

00:17:45,060 --> 00:17:52,170
every single point understand every

00:17:48,090 --> 00:17:54,660
single point while the CPU is doing in a

00:17:52,170 --> 00:17:58,970
paper before proposing a paper take up

00:17:54,660 --> 00:18:03,840
wizard call last year neurosis they have

00:17:58,970 --> 00:18:05,970
developed Tanika which locks the aygos

00:18:03,840 --> 00:18:07,950
behavior this allowed us to trace the

00:18:05,970 --> 00:18:10,770
scheduling results in the micro second

00:18:07,950 --> 00:18:13,800
level this is accomplished by inserting

00:18:10,770 --> 00:18:16,050
profiling points or preventing hoops in

00:18:13,800 --> 00:18:18,960
the scipios in this linear scheduler

00:18:16,050 --> 00:18:21,360
which will trigger every time at a point

00:18:18,960 --> 00:18:23,880
of interest typically this would be the

00:18:21,360 --> 00:18:26,600
point which with the scheduled state

00:18:23,880 --> 00:18:29,730
changes like rank you increase decrease

00:18:26,600 --> 00:18:35,730
condition or the current schooling

00:18:29,730 --> 00:18:38,360
process ID or decelerated the profile

00:18:35,730 --> 00:18:42,810
data store as a text file and can be

00:18:38,360 --> 00:18:44,280
fast and an assist later on the original

00:18:42,810 --> 00:18:47,250
source which the course have provided

00:18:44,280 --> 00:18:50,970
the platter which visualizes wrong sides

00:18:47,250 --> 00:18:52,740
of each core phone in the form of himmat

00:18:50,970 --> 00:18:56,190
who assemble on the screen is a gmail

00:18:52,740 --> 00:18:58,830
four core Intel i5 processor scooting

00:18:56,190 --> 00:19:01,860
heck bench profiling stuff on a top left

00:18:58,830 --> 00:19:07,140
and goes routed to a right every pixel

00:19:01,860 --> 00:19:12,600
means 110 microsecond and he wraps every

00:19:07,140 --> 00:19:14,610
10 millisecond but if all the profiles

00:19:12,600 --> 00:19:18,090
trigger and the event of wrong to

00:19:14,610 --> 00:19:20,810
increase/decrease and balancing events

00:19:18,090 --> 00:19:23,690
and scheduling events in a schedule and

00:19:20,810 --> 00:19:27,240
of course the scheduling hooks can be

00:19:23,690 --> 00:19:29,520
put at every points in the scheduler so

00:19:27,240 --> 00:19:32,940
we can actually provide any kind of

00:19:29,520 --> 00:19:35,880
scheduled events for somehow we have

00:19:32,940 --> 00:19:41,040
modified to profile the kindest sweetest

00:19:35,880 --> 00:19:43,680
of the schedule in the scheduler so on

00:19:41,040 --> 00:19:44,250
the screen is example of an cortex and I

00:19:43,680 --> 00:19:47,420
run eh

00:19:44,250 --> 00:19:50,670
and every of the you know like yellow

00:19:47,420 --> 00:19:54,330
stages is where the CPU to contest which

00:19:50,670 --> 00:19:56,450
is also we have recorded switch to PID

00:19:54,330 --> 00:19:59,670
so we can use other tool to analyze

00:19:56,450 --> 00:20:01,550
every microsecond quality which is

00:19:59,670 --> 00:20:04,830
curtain

00:20:01,550 --> 00:20:07,160
this is an example of color switch

00:20:04,830 --> 00:20:12,570
points of quarters in Iran in stress and

00:20:07,160 --> 00:20:18,770
Sakura test altogether we have zoom it

00:20:12,570 --> 00:20:22,980
to a larger scale and our blue box with

00:20:18,770 --> 00:20:25,530
rate stages is the cycle it has entered

00:20:22,980 --> 00:20:27,600
a wrong cue and with the red box and a

00:20:25,530 --> 00:20:29,670
yellow search is for your cycle it has

00:20:27,600 --> 00:20:33,300
been kind of switched and being executed

00:20:29,670 --> 00:20:38,040
and that yellow search is about 10

00:20:33,300 --> 00:20:40,950
microseconds scale and with other tools

00:20:38,040 --> 00:20:44,850
we have developed we can other analysis

00:20:40,950 --> 00:20:46,970
the time between cycle it has real-time

00:20:44,850 --> 00:20:49,800
tasks enter in the wrong queue and

00:20:46,970 --> 00:20:51,170
probably as a histogram and also a

00:20:49,800 --> 00:20:53,930
country switch time

00:20:51,170 --> 00:20:57,300
Paris is green so we can know exactly

00:20:53,930 --> 00:21:01,110
how much time it takes for each interval

00:20:57,300 --> 00:21:05,730
the psychologist says enters schedules

00:21:01,110 --> 00:21:07,620
by the scheduler and here's a skew of

00:21:05,730 --> 00:21:09,600
the schedule during which the time

00:21:07,620 --> 00:21:13,680
between the testers in queue and put

00:21:09,600 --> 00:21:16,800
into execution so the scheduler profile

00:21:13,680 --> 00:21:18,600
look enables to understand how text is

00:21:16,800 --> 00:21:25,290
treated by the schedule in wrong time

00:21:18,600 --> 00:21:28,610
under various load conditions wait so

00:21:25,290 --> 00:21:35,730
let's play to the latency how can we

00:21:28,610 --> 00:21:41,790
reduce the latency have to be major test

00:21:35,730 --> 00:21:45,680
some London tips improve the latency

00:21:41,790 --> 00:21:48,540
reduce the latency am Priya not he

00:21:45,680 --> 00:21:55,140
preemption is disabled up to acquire

00:21:48,540 --> 00:21:57,190
lost being luck which was the newer

00:21:55,140 --> 00:22:03,220
importation or spin luck

00:21:57,190 --> 00:22:06,489
in part4 pretension Nam I mean the early

00:22:03,220 --> 00:22:11,340
Bernina you know you can use a spin lock

00:22:06,489 --> 00:22:15,489
to spin and he until until you get luck

00:22:11,340 --> 00:22:20,200
but for Priya not he all spin lock was

00:22:15,489 --> 00:22:24,099
was replaced by slipping subservience

00:22:20,200 --> 00:22:27,609
pin dock so you have to use a low spin

00:22:24,099 --> 00:22:31,440
lock one instead of spin dock and the

00:22:27,609 --> 00:22:35,440
prevention of long time is a problem

00:22:31,440 --> 00:22:38,529
which which in price higher priority

00:22:35,440 --> 00:22:44,340
task canal and the print printed he

00:22:38,529 --> 00:22:44,340
tried to make Rico section free and ball

00:22:44,820 --> 00:22:53,769
if we sing about the detail when you try

00:22:48,909 --> 00:22:56,559
to disable interrupts you you need user

00:22:53,769 --> 00:23:03,070
need a schedule schedule to check if

00:22:56,559 --> 00:23:05,440
higher priority has this CPU or not to

00:23:03,070 --> 00:23:11,349
break out of the prevention of section

00:23:05,440 --> 00:23:15,159
and here disable prehension has an

00:23:11,349 --> 00:23:21,099
effect of luck in cpu to add as a task

00:23:15,159 --> 00:23:25,330
and in imputation in the deep internals

00:23:21,099 --> 00:23:30,489
our impaired he dinners mutex UTIs

00:23:25,330 --> 00:23:34,779
always he luck which will spin in some

00:23:30,489 --> 00:23:38,799
conditions with pre not he heroes cue

00:23:34,779 --> 00:23:46,119
means optimistic spinning for sleeping

00:23:38,799 --> 00:23:48,340
luck so if we think about the detail

00:23:46,119 --> 00:23:54,279
I'll ask you again

00:23:48,340 --> 00:23:58,749
alkyl straight because every irq contest

00:23:54,279 --> 00:24:01,899
in pre and RT is actually a kind of a a

00:23:58,749 --> 00:24:05,229
normal chemistry and I accused where as

00:24:01,899 --> 00:24:10,390
a schedule the first in first out task

00:24:05,229 --> 00:24:13,320
with a peyote party 50

00:24:10,390 --> 00:24:17,110
priority can be changed so that other

00:24:13,320 --> 00:24:22,000
mutant has other more important tasks

00:24:17,110 --> 00:24:27,850
can can have higher priority and you

00:24:22,000 --> 00:24:31,230
should always avoid unnecessary spin up

00:24:27,850 --> 00:24:37,510
spin luck I accused save for example

00:24:31,230 --> 00:24:42,790
there's imputation in CSS true and you

00:24:37,510 --> 00:24:46,720
can see the funds funded to the coal

00:24:42,790 --> 00:24:51,610
leasing sorry okay

00:24:46,720 --> 00:24:55,720
so that the sequence is spin lock out

00:24:51,610 --> 00:25:00,400
yourself and performs a low spin lock

00:24:55,720 --> 00:25:04,990
and send you to sum up operation finally

00:25:00,400 --> 00:25:10,300
you unlock low loss ping a lock and spin

00:25:04,990 --> 00:25:13,180
and lock actually store in period he the

00:25:10,300 --> 00:25:18,730
semantics of spin lock already changing

00:25:13,180 --> 00:25:22,420
spin lot Eric you said do not disable

00:25:18,730 --> 00:25:26,410
interrupts imprinted here for instance

00:25:22,420 --> 00:25:30,820
in this so consequently you should

00:25:26,410 --> 00:25:34,960
depress the low spin lock this sequence

00:25:30,820 --> 00:25:40,180
like spin disable Eric you know snorting

00:25:34,960 --> 00:25:44,430
RQ and dude spin up which is sleep

00:25:40,180 --> 00:25:48,940
sleeping luck so you can avoid

00:25:44,430 --> 00:25:52,660
unnecessary loss spin lock yourself to

00:25:48,940 --> 00:25:58,630
shorten to add the latency because of

00:25:52,660 --> 00:26:03,490
black also be able to think about Ohio

00:25:58,630 --> 00:26:09,810
citizen code there is a research in asti

00:26:03,490 --> 00:26:15,400
I about this year ago the idea is

00:26:09,810 --> 00:26:19,510
citizen Corps have input you should

00:26:15,400 --> 00:26:23,980
increment in the many hours synchronous

00:26:19,510 --> 00:26:27,070
mechanism and the flex SC

00:26:23,980 --> 00:26:31,720
the researcher of the net proposed a new

00:26:27,070 --> 00:26:36,240
impatient that implement is session this

00:26:31,720 --> 00:26:40,450
system code in in schooner and the

00:26:36,240 --> 00:26:44,260
implement please web packages in user

00:26:40,450 --> 00:26:47,070
label which translates a legacy

00:26:44,260 --> 00:26:54,100
synchronous decent call into the e

00:26:47,070 --> 00:26:57,130
section is one eventually breaks SC can

00:26:54,100 --> 00:27:02,220
you import a perforce you can see from

00:26:57,130 --> 00:27:07,870
the vibrant fountain site so you can see

00:27:02,220 --> 00:27:11,250
apart my SQL binder and so on so a

00:27:07,870 --> 00:27:18,940
patient gets input by by this research

00:27:11,250 --> 00:27:21,880
but however the flex SC is is given the

00:27:18,940 --> 00:27:26,799
impact of the camp ability so we use

00:27:21,880 --> 00:27:30,399
another way about almost 20 years ago

00:27:26,799 --> 00:27:33,970
there is a interesting hack called

00:27:30,399 --> 00:27:37,720
tournament Ennis which in Airport

00:27:33,970 --> 00:27:41,440
appeared to excuse the process in Como

00:27:37,720 --> 00:27:45,309
and that's a benefit our running use of

00:27:41,440 --> 00:27:49,210
program in kana more as user program can

00:27:45,309 --> 00:27:52,330
SS Colonel ed space directory so you you

00:27:49,210 --> 00:27:56,789
don't need to use system system called

00:27:52,330 --> 00:28:00,159
gates in order to invoke the season Col

00:27:56,789 --> 00:28:03,570
internals you can write rate in what

00:28:00,159 --> 00:28:09,039
caused the function call since you get

00:28:03,570 --> 00:28:12,970
everything in in kernel which means user

00:28:09,039 --> 00:28:16,029
problem can be booked system call very

00:28:12,970 --> 00:28:21,070
fast because it is unnecessary to switch

00:28:16,029 --> 00:28:25,120
between Economo and usable by using

00:28:21,070 --> 00:28:28,750
constantly system in season in terms of

00:28:25,120 --> 00:28:32,379
contest wishes unlike Conemaugh kernel

00:28:28,750 --> 00:28:37,299
modules in Kalama Dinah's use the

00:28:32,379 --> 00:28:37,900
problem I used to scooty no more process

00:28:37,299 --> 00:28:40,570
is

00:28:37,900 --> 00:28:43,180
several previously never so schedule and

00:28:40,570 --> 00:28:46,630
the pageant up her phone as usual

00:28:43,180 --> 00:28:52,050
although you you machinery is too tender

00:28:46,630 --> 00:28:57,670
to do such thing but it in fact is set

00:28:52,050 --> 00:29:01,210
because you the process still get

00:28:57,670 --> 00:29:06,730
isolated in in the in Chrome or dinners

00:29:01,210 --> 00:29:11,530
so we will show you how we can use more

00:29:06,730 --> 00:29:16,150
techniques like peanut he these along

00:29:11,530 --> 00:29:19,900
with cannot Medina's in his study so

00:29:16,150 --> 00:29:22,840
let's think about the detail so talking

00:29:19,900 --> 00:29:25,540
about a case study you are using these

00:29:22,840 --> 00:29:27,310
platforms first one is the a terroristic

00:29:25,540 --> 00:29:33,790
on five sock development kit and

00:29:27,310 --> 00:29:37,690
otherwise the SP is 66q severy SDB both

00:29:33,790 --> 00:29:40,960
are using context and I by a wise to :

00:29:37,690 --> 00:29:44,350
others quad-core and mary's post one

00:29:40,960 --> 00:29:46,090
gigabyte of ddr3 the experiment

00:29:44,350 --> 00:29:48,040
configuration we are using is a bureau

00:29:46,090 --> 00:29:50,950
paste system and the kernel version is

00:29:48,040 --> 00:29:54,190
4.4 and we have patched it with the

00:29:50,950 --> 00:29:57,520
bring RT patches additional pages will

00:29:54,190 --> 00:30:00,850
apply the words decor pages and chemical

00:29:57,520 --> 00:30:02,320
ominous pages depends on the each memory

00:30:00,850 --> 00:30:06,940
we are we are going to do and how we

00:30:02,320 --> 00:30:09,850
explain data when we come to it the page

00:30:06,940 --> 00:30:12,910
must suit as we mentioned it as security

00:30:09,850 --> 00:30:15,760
text and the MZ test and for cycle it

00:30:12,910 --> 00:30:19,660
has the arguments and the parameters

00:30:15,760 --> 00:30:22,360
given is given above and post of these

00:30:19,660 --> 00:30:26,170
two test pages is wrong in koromon

00:30:22,360 --> 00:30:29,410
leaners if possible as as if kuraman

00:30:26,170 --> 00:30:32,320
leanness is enable in our kernel for MC

00:30:29,410 --> 00:30:34,900
test is measuring the determinant of

00:30:32,320 --> 00:30:37,600
code execution time is divert me to

00:30:34,900 --> 00:30:40,740
simulate robot motion transfer algorithm

00:30:37,600 --> 00:30:43,540
which as you know ik has mentioned

00:30:40,740 --> 00:30:45,190
earlier yawns is the user space program

00:30:43,540 --> 00:30:48,100
all Kannamma margin kernel space

00:30:45,190 --> 00:30:51,280
annual outputs the execution time of

00:30:48,100 --> 00:30:53,800
each strong so for this

00:30:51,280 --> 00:30:56,830
symbol on the left is a security test in

00:30:53,800 --> 00:31:01,480
compared to MC test is I'll put every

00:30:56,830 --> 00:31:05,110
psychos in seclusion time so we will run

00:31:01,480 --> 00:31:07,660
from what we learn from Socrates is the

00:31:05,110 --> 00:31:09,430
tutor of the wake up's and from MCTS

00:31:07,660 --> 00:31:14,440
we're going to learn about its accused

00:31:09,430 --> 00:31:16,180
in times jitter okay so these are our

00:31:14,440 --> 00:31:18,970
experiments and measurements the first

00:31:16,180 --> 00:31:21,370
one is how color monitors benefits the

00:31:18,970 --> 00:31:25,660
real-time performance and we're going to

00:31:21,370 --> 00:31:28,840
measure the SMB piece sketch purity of

00:31:25,660 --> 00:31:30,930
linear systems and to look after there

00:31:28,840 --> 00:31:34,270
is there anything we need to care about

00:31:30,930 --> 00:31:36,490
when using it as a real-time operating

00:31:34,270 --> 00:31:39,550
system and we are going to talk about

00:31:36,490 --> 00:31:43,840
showing inter arrival time and finally a

00:31:39,550 --> 00:31:46,750
schedule duration so first screw

00:31:43,840 --> 00:31:51,550
nominees in program will ten performers

00:31:46,750 --> 00:31:54,820
we run this experiment ma six and we

00:31:51,550 --> 00:31:57,820
have setup the CPU is isolated and

00:31:54,820 --> 00:31:59,830
steadiest Achilles which means there

00:31:57,820 --> 00:32:03,520
will be no timer interrupts and CPU one

00:31:59,830 --> 00:32:07,540
and we have used the Technic of cache

00:32:03,520 --> 00:32:11,800
lockdown which locks all able to ke

00:32:07,540 --> 00:32:13,480
justice the first CP CP one and a lot is

00:32:11,800 --> 00:32:16,920
a combination of heck bench and the NAP

00:32:13,480 --> 00:32:21,460
of test bench we use this MC test and

00:32:16,920 --> 00:32:23,800
for user space MC test we can find all

00:32:21,460 --> 00:32:26,020
that this is not running in kana

00:32:23,800 --> 00:32:28,600
Molina's the user space density as we

00:32:26,020 --> 00:32:31,330
can see a lot of jitters and spikes and

00:32:28,600 --> 00:32:34,960
for kernel space MC test is much more

00:32:31,330 --> 00:32:38,080
stable the reason of this is because the

00:32:34,960 --> 00:32:41,020
impact of system calls the course is

00:32:38,080 --> 00:32:43,660
very high for interesting courses the

00:32:41,020 --> 00:32:46,690
use of space MC tests are generating a

00:32:43,660 --> 00:32:49,930
lot of spikes during this discussion if

00:32:46,690 --> 00:32:52,300
we move user space MC tests into normal

00:32:49,930 --> 00:32:55,380
Nina's we will see Ella spiders come

00:32:52,300 --> 00:32:57,970
away and the overall execution time is

00:32:55,380 --> 00:33:02,660
very stable and is comparable to the

00:32:57,970 --> 00:33:07,810
kernel space MC test so we can

00:33:02,660 --> 00:33:14,750
see how economically has improves the

00:33:07,810 --> 00:33:17,060
tendency and system cost and now I'm

00:33:14,750 --> 00:33:22,090
going to talk about its SMP schedule

00:33:17,060 --> 00:33:25,310
bility of the penalty patched kernel

00:33:22,090 --> 00:33:28,310
UNESCO we are running this on a second

00:33:25,310 --> 00:33:33,410
or five stock and the load is race and

00:33:28,310 --> 00:33:36,620
the number of threads is there so we can

00:33:33,410 --> 00:33:40,190
see that the whole ends which wraps is

00:33:36,620 --> 00:33:43,160
10 milliseconds and for by default near

00:33:40,190 --> 00:33:45,410
schedule is said to be scheduled and

00:33:43,160 --> 00:33:48,530
parents attend loads every 10

00:33:45,410 --> 00:33:53,050
milliseconds so this opus of tasks and

00:33:48,530 --> 00:33:56,600
Congress wishes will not be reparent and

00:33:53,050 --> 00:33:59,300
leaving a lot of gaps which are showing

00:33:56,600 --> 00:34:02,900
green which is only one text running

00:33:59,300 --> 00:34:08,629
insider CPU compare it with another CPU

00:34:02,900 --> 00:34:10,669
is running over five tests and for the

00:34:08,629 --> 00:34:16,520
Weslaco pages is not going to help with

00:34:10,669 --> 00:34:18,830
this with this because it does not alert

00:34:16,520 --> 00:34:21,230
the scheduler replenishes time scope so

00:34:18,830 --> 00:34:21,980
it still replaying parents every 10

00:34:21,230 --> 00:34:28,370
milliseconds

00:34:21,980 --> 00:34:32,629
this is considered ok for long term high

00:34:28,370 --> 00:34:36,200
throughput workload because after some

00:34:32,629 --> 00:34:39,590
time they problems were advertised then

00:34:36,200 --> 00:34:42,889
the super will still be good / for

00:34:39,590 --> 00:34:44,960
real-time tests like Sakura test we can

00:34:42,889 --> 00:34:49,220
find out that secretary spin schedule

00:34:44,960 --> 00:34:52,300
and wake up every time and an overloaded

00:34:49,220 --> 00:34:59,540
call and as the other costs much more

00:34:52,300 --> 00:35:02,620
free for resources and this could bring

00:34:59,540 --> 00:35:05,900
unwanted overhead to a real-time system

00:35:02,620 --> 00:35:08,720
and whether we have measured as

00:35:05,900 --> 00:35:12,200
scalability impact font chrome holiness

00:35:08,720 --> 00:35:14,190
and as harmonious is targeted video

00:35:12,200 --> 00:35:16,010
system goes overhead so

00:35:14,190 --> 00:35:22,710
actually there's no much difference

00:35:16,010 --> 00:35:31,440
between the difference between page and

00:35:22,710 --> 00:35:38,610
not page the kernels so sure inter

00:35:31,440 --> 00:35:41,460
arrival time we have able to catch the

00:35:38,610 --> 00:35:43,800
event of schedule in microsecond level

00:35:41,460 --> 00:35:44,310
so we have temperatures and event

00:35:43,800 --> 00:35:47,400
eyelids

00:35:44,310 --> 00:35:50,960
which is two texts with very very short

00:35:47,400 --> 00:35:53,960
inter arrival time enter a queue and

00:35:50,960 --> 00:35:53,960
this

00:35:59,460 --> 00:36:06,420
to text is versus the Tamarack you of

00:36:02,640 --> 00:36:08,490
the system and otherwise the Secretary's

00:36:06,420 --> 00:36:11,880
main test and you can see that at

00:36:08,490 --> 00:36:13,980
certain time led to match almost scared

00:36:11,880 --> 00:36:16,560
and enters the wrong queue and cause

00:36:13,980 --> 00:36:22,950
some overhead to the scheduler also this

00:36:16,560 --> 00:36:24,960
has another showcases the may set of

00:36:22,950 --> 00:36:27,600
securities and real scientist of the

00:36:24,960 --> 00:36:29,580
Securities and Sami in sometimes they

00:36:27,600 --> 00:36:33,390
will come very close together under a

00:36:29,580 --> 00:36:36,540
couple of other 10 to 20 microseconds

00:36:33,390 --> 00:36:38,990
they almost enter the long queues

00:36:36,540 --> 00:36:38,990
together

00:36:43,040 --> 00:36:48,840
so the benefits of visualizing tests in

00:36:46,710 --> 00:36:51,840
the rabbit is that you could call a skew

00:36:48,840 --> 00:36:53,880
pattern half or texts delay we would

00:36:51,840 --> 00:36:57,360
like to produce a system with constant

00:36:53,880 --> 00:36:59,970
and rather large into driver time which

00:36:57,360 --> 00:37:06,150
we are lower less scheduled overhead and

00:36:59,970 --> 00:37:07,500
lower assistance uncertainty finally I

00:37:06,150 --> 00:37:09,690
would like to talk about a scheduler

00:37:07,500 --> 00:37:12,900
Asian who is the time schedule detects

00:37:09,690 --> 00:37:15,410
schedule and cue the task for contest

00:37:12,900 --> 00:37:17,940
reaching the curves on the top is

00:37:15,410 --> 00:37:21,570
secured a test running with one mini

00:37:17,940 --> 00:37:24,080
second interval it's a bit hard to see

00:37:21,570 --> 00:37:27,690
there is countless which every yellows

00:37:24,080 --> 00:37:31,380
status and the system is running with no

00:37:27,690 --> 00:37:33,360
load the graph below shows the schedule

00:37:31,380 --> 00:37:36,600
duration for each cycle cycle the test

00:37:33,360 --> 00:37:39,240
the orange bars means that the service

00:37:36,600 --> 00:37:41,880
is the only one task in the wrong hue

00:37:39,240 --> 00:37:44,550
and for red wines it means there are

00:37:41,880 --> 00:37:46,920
over two tests in Iran hue so the

00:37:44,550 --> 00:37:48,420
scheduler had to pick the mock name we

00:37:46,920 --> 00:37:51,150
can find out the schedule durations

00:37:48,420 --> 00:37:57,300
pretty low as well as usually is below

00:37:51,150 --> 00:37:59,670
10 microseconds and for the histogram we

00:37:57,300 --> 00:38:01,980
can spoil the mood yes it's mostly below

00:37:59,670 --> 00:38:07,380
10 microseconds and the Maxima is about

00:38:01,980 --> 00:38:09,330
20 microseconds and for the next one we

00:38:07,380 --> 00:38:12,810
are going to run with a mail load which

00:38:09,330 --> 00:38:14,790
is a stretched with swishy field stress

00:38:12,810 --> 00:38:18,060
again we've saturated with my mini

00:38:14,790 --> 00:38:20,670
Sinkin in the phone and okay final that

00:38:18,060 --> 00:38:24,150
still the scheduled to version is pretty

00:38:20,670 --> 00:38:27,060
low as low as about five microseconds

00:38:24,150 --> 00:38:30,690
with some spikes and the parts are all

00:38:27,060 --> 00:38:36,840
red because it's always sharing a call

00:38:30,690 --> 00:38:39,510
with a stress test found his histogram

00:38:36,840 --> 00:38:42,180
view we can also find a result at the

00:38:39,510 --> 00:38:45,750
maximum of the scurry division is 16

00:38:42,180 --> 00:38:49,160
micro seconds and as since counts

00:38:45,750 --> 00:38:52,350
interesting as we run it again with

00:38:49,160 --> 00:38:54,360
heavy load which is stretched with a CPU

00:38:52,350 --> 00:38:56,580
straight secure it has 1 millisecond

00:38:54,360 --> 00:39:01,560
interval we can fire as a lot of content

00:38:56,580 --> 00:39:04,260
switches and schedule division is not as

00:39:01,560 --> 00:39:06,600
stable as previous resource it varies

00:39:04,260 --> 00:39:14,510
from 10 microseconds to 30 micro

00:39:06,600 --> 00:39:16,980
sequences and it's not constant value

00:39:14,510 --> 00:39:22,230
his shockwave you can find a less

00:39:16,980 --> 00:39:25,170
creates another peak which is about 27

00:39:22,230 --> 00:39:29,180
microseconds and maximum has opened all

00:39:25,170 --> 00:39:29,180
the way up to 34 microseconds

00:39:29,960 --> 00:39:34,890
also we have found a now not only heavy

00:39:32,850 --> 00:39:38,610
load will cause increased schedule

00:39:34,890 --> 00:39:39,890
division but also short burst text in a

00:39:38,610 --> 00:39:42,990
report examples if you

00:39:39,890 --> 00:39:44,910
0hq concur imodium citizens view wise

00:39:42,990 --> 00:39:48,750
excluding the sagar detest real-time

00:39:44,910 --> 00:39:52,400
Street and Main Street together and when

00:39:48,750 --> 00:39:56,550
the two psycho detects straight comes

00:39:52,400 --> 00:39:59,250
into the scheduler with radius short

00:39:56,550 --> 00:40:02,580
interval timer schedule division of this

00:39:59,250 --> 00:40:06,980
real-time text will rise about double

00:40:02,580 --> 00:40:11,700
the time when he's running so low in the

00:40:06,980 --> 00:40:13,800
CPU and histogram you can find that the

00:40:11,700 --> 00:40:18,480
maximum has gone all the way up to the

00:40:13,800 --> 00:40:20,820
studies three microseconds scale so

00:40:18,480 --> 00:40:23,430
absolutely when the schedule include a

00:40:20,820 --> 00:40:25,290
high variety testing to the rank you it

00:40:23,430 --> 00:40:26,790
will require a fury of scheduler

00:40:25,290 --> 00:40:28,920
division before switching it for

00:40:26,790 --> 00:40:31,920
execution scheduled a division between

00:40:28,920 --> 00:40:34,890
entering Ron Q and Candice which would

00:40:31,920 --> 00:40:40,950
be most at most as 35 microsecond

00:40:34,890 --> 00:40:44,010
depends on the load and the scheduler

00:40:40,950 --> 00:40:47,610
Linux kernel is using guarantees and all

00:40:44,010 --> 00:40:50,190
one uncertain which text to be executed

00:40:47,610 --> 00:40:53,010
but after identify the next test for

00:40:50,190 --> 00:40:55,620
execution schedule would still require

00:40:53,010 --> 00:40:57,900
some extra time which would vary with

00:40:55,620 --> 00:41:01,470
the load in the schedule in run queue

00:40:57,900 --> 00:41:04,200
the long queue is scheduling the shorter

00:41:01,470 --> 00:41:05,940
the inter-arrival time the widest

00:41:04,200 --> 00:41:11,790
schedule at derision

00:41:05,940 --> 00:41:14,910
distribution will spray so we have been

00:41:11,790 --> 00:41:15,960
varied the real-time behavior of needs

00:41:14,910 --> 00:41:17,640
by providing disk

00:41:15,960 --> 00:41:21,390
schedule and measuring the intensity of

00:41:17,640 --> 00:41:24,180
various variants and intensive interest

00:41:21,390 --> 00:41:26,970
can cause long always sentences due to

00:41:24,180 --> 00:41:29,970
the design of the in the process

00:41:26,970 --> 00:41:32,190
invocation mechanism in Linux we propose

00:41:29,970 --> 00:41:34,500
new tools to visualize test schedule in

00:41:32,190 --> 00:41:38,400
your fine brainian scale as microsecond

00:41:34,500 --> 00:41:40,680
scale this elbow is not only focusing on

00:41:38,400 --> 00:41:42,870
the interrupt latency but also scheduled

00:41:40,680 --> 00:41:46,800
a duration blocks and he surveyed with

00:41:42,870 --> 00:41:49,770
and it would Suz be highly desirable to

00:41:46,800 --> 00:41:53,520
combine arisen in 1610 X for example

00:41:49,770 --> 00:41:55,290
crominus isolated CPU ticklers kernel to

00:41:53,520 --> 00:41:58,770
improve the text responsiveness and the

00:41:55,290 --> 00:42:04,620
various target application courtesies on

00:41:58,770 --> 00:42:08,250
top of tree Amati here's our references

00:42:04,620 --> 00:42:12,060
so even check the page your loop

00:42:08,250 --> 00:42:16,770
reference you can you can see I create

00:42:12,060 --> 00:42:19,410
some Yoshi talk and related one so you

00:42:16,770 --> 00:42:23,910
can check the first one by Stephen

00:42:19,410 --> 00:42:27,420
Foster talking about what is real

00:42:23,910 --> 00:42:30,210
consistent and how we ended he is the

00:42:27,420 --> 00:42:33,330
actually implement and that the next one

00:42:30,210 --> 00:42:36,049
is quite interesting so the guy from he

00:42:33,330 --> 00:42:39,890
Tosh give a

00:42:36,049 --> 00:42:43,849
your caste was for the study the

00:42:39,890 --> 00:42:47,329
real-time property in embeddedness is

00:42:43,849 --> 00:42:51,349
about three years ago and that the sir

00:42:47,329 --> 00:42:55,009
one is a total not talking about to do

00:42:51,349 --> 00:42:58,809
tend to report yes the talk was already

00:42:55,009 --> 00:43:02,660
about five years ago about the steer is

00:42:58,809 --> 00:43:07,969
essentially in in in the viewer design

00:43:02,660 --> 00:43:11,390
and then last two to one the first thing

00:43:07,969 --> 00:43:14,869
is that the euro cysts paper and the

00:43:11,390 --> 00:43:18,229
last one is OS di which I mentioned

00:43:14,869 --> 00:43:22,069
earlier about how to reduce the O'Hara

00:43:18,229 --> 00:43:26,779
decision code and the fourth application

00:43:22,069 --> 00:43:30,890
I mean a term tour we major the latency

00:43:26,779 --> 00:43:33,679
we mentioned before will be in open

00:43:30,890 --> 00:43:39,049
source you can check out the github link

00:43:33,679 --> 00:43:42,170
up to two slides get update because the

00:43:39,049 --> 00:43:45,519
one you download from the EOC website is

00:43:42,170 --> 00:43:48,920
a preliminary one and we were up there

00:43:45,519 --> 00:43:52,329
another one mentioning to be happening

00:43:48,920 --> 00:43:56,289
and the reference stay up so you can

00:43:52,329 --> 00:44:00,709
prepare your own profile data and

00:43:56,289 --> 00:44:03,489
visualize using the tool so to have any

00:44:00,709 --> 00:44:03,489
question

00:44:05,210 --> 00:44:27,380
it was like okay the question is which

00:44:23,690 --> 00:44:33,079
Colonel come on line come up permit hell

00:44:27,380 --> 00:44:38,650
are you we use like yes okay the

00:44:33,079 --> 00:44:45,020
building configurations okay we use

00:44:38,650 --> 00:44:51,550
peanut he user to configure pre end for

00:44:45,020 --> 00:44:56,240
and we disable sang some not necessary

00:44:51,550 --> 00:45:00,770
debate library and using ticklish kana

00:44:56,240 --> 00:45:05,510
or nuts and the isolate CPU so you can

00:45:00,770 --> 00:45:11,859
use a civil state to specify the IQ

00:45:05,510 --> 00:45:14,569
affinity and also we use customized

00:45:11,859 --> 00:45:18,920
customized memory allocated for for the

00:45:14,569 --> 00:45:21,920
higher level of patients and we mean mg

00:45:18,920 --> 00:45:29,869
test our low Perkins for simulation

00:45:21,920 --> 00:45:32,170
model so others things are usual as you

00:45:29,869 --> 00:45:32,170
may know

00:45:42,540 --> 00:45:51,609
this the original also has a website

00:45:48,010 --> 00:45:56,380
which published these pages yes and also

00:45:51,609 --> 00:45:59,859
is paper discussing about the thermals

00:45:56,380 --> 00:46:02,520
and how they how they implemented in x86

00:45:59,859 --> 00:46:02,520
chips

00:46:20,020 --> 00:46:22,590
eight

00:46:27,380 --> 00:46:29,559
yes

00:46:31,630 --> 00:46:34,630
sure

00:46:39,589 --> 00:46:42,369
because

00:46:55,670 --> 00:47:09,710
today to tell two questions that the

00:47:01,760 --> 00:47:14,599
last one is how can be major letters the

00:47:09,710 --> 00:47:19,520
impact of top top hell and a bad help

00:47:14,599 --> 00:47:29,839
irq right okay so let me answer this one

00:47:19,520 --> 00:47:33,140
first okay so we since VI in the in in

00:47:29,839 --> 00:47:37,190
the perspective as a microscope you so

00:47:33,140 --> 00:47:40,280
at everything every everything is

00:47:37,190 --> 00:47:44,809
getting very small so we have to use

00:47:40,280 --> 00:47:53,359
some efficient way like x-rays to figure

00:47:44,809 --> 00:47:58,119
out the impact in the top half so we

00:47:53,359 --> 00:48:02,230
have to figure out the escutcheon high a

00:47:58,119 --> 00:48:06,319
specific in the top half and luck to

00:48:02,230 --> 00:48:10,280
potential lack otherwise we could not am

00:48:06,319 --> 00:48:14,799
a major how to stickers our but have

00:48:10,280 --> 00:48:14,799
tasks a schedule by case of ir could be

00:48:22,720 --> 00:48:31,140
okay what is your first question

00:48:27,240 --> 00:48:31,140
to periodic tasks

00:48:45,280 --> 00:48:49,630
noth-nothing using cyclic test

00:48:53,609 --> 00:48:59,650
okay okay

00:48:56,109 --> 00:49:03,310
the question is about how can we

00:48:59,650 --> 00:49:09,849
generate makrooh the affecting the

00:49:03,310 --> 00:49:14,050
actual system like okay this is a good

00:49:09,849 --> 00:49:16,570
question because we are always facing

00:49:14,050 --> 00:49:18,040
the problem let's cyclic test is too

00:49:16,570 --> 00:49:22,030
simple too

00:49:18,040 --> 00:49:25,170
and it's too naive and so that's the

00:49:22,030 --> 00:49:29,680
reason why we want to implement our own

00:49:25,170 --> 00:49:34,060
test bench so you can see from the

00:49:29,680 --> 00:49:38,609
diagram this is a part of many produced

00:49:34,060 --> 00:49:43,000
by Delta electronics in in Taiwan is a

00:49:38,609 --> 00:49:47,290
scalar lope Arkansas and and the most

00:49:43,000 --> 00:49:52,510
amazing the most avoids improvement is

00:49:47,290 --> 00:49:57,369
in newer paada and EMG test so we use

00:49:52,510 --> 00:50:02,609
real algorithm to major to be a

00:49:57,369 --> 00:50:07,750
simulation packet as a workflow so that

00:50:02,609 --> 00:50:10,990
is an and not good as I think it is and

00:50:07,750 --> 00:50:14,160
not always a good mechanism to use this

00:50:10,990 --> 00:50:18,369
approach but we missing is a real case

00:50:14,160 --> 00:50:23,130
so you might use you must think about

00:50:18,369 --> 00:50:25,990
more more stress more effective ways but

00:50:23,130 --> 00:50:29,500
firstly the reason why we want to talk

00:50:25,990 --> 00:50:32,069
here because we are facing just

00:50:29,500 --> 00:50:32,069
empowerment

00:50:44,800 --> 00:50:51,130
excuse me Karen repeat again flex se

00:50:57,650 --> 00:51:02,539
so you're actually if there is any where

00:51:00,529 --> 00:51:09,249
people are discussion about discussing

00:51:02,539 --> 00:51:12,410
about of excesses paper assessing

00:51:09,249 --> 00:51:19,940
anywhere if somebody is discussing about

00:51:12,410 --> 00:51:23,299
the Flex I think they up to discussion

00:51:19,940 --> 00:51:26,960
about the OSBI paper but you can check

00:51:23,299 --> 00:51:32,029
the heck news I checked a lot last night

00:51:26,960 --> 00:51:37,369
and field discussion about that and it

00:51:32,029 --> 00:51:39,829
is in fact early prototype so it's not

00:51:37,369 --> 00:51:43,009
stable so that's the reason why we use a

00:51:39,829 --> 00:51:46,670
condom vanina's Colombo ninis is already

00:51:43,009 --> 00:51:50,539
verified for more than 10 years and the

00:51:46,670 --> 00:51:53,710
impact of containers is smaller but the

00:51:50,539 --> 00:51:57,380
performance of common illness is not

00:51:53,710 --> 00:52:03,920
quite good compared with oh it was the

00:51:57,380 --> 00:52:05,660
research paper okay I think okay it's

00:52:03,920 --> 00:52:08,989
passed thanks ah okay

00:52:05,660 --> 00:52:09,930
sense again for your attention thank you

00:52:08,989 --> 00:52:16,420
thank you

00:52:09,930 --> 00:52:16,420

YouTube URL: https://www.youtube.com/watch?v=epcPeMlBJW0


