Title: Enabling New Hardware in U-Boot - Jon Mason, Broadcom Ltd.
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Enabling New Hardware in U-Boot - Jon Mason, Broadcom Ltd.

As a popular open source bootloader, U-boot is frequently used for embedded devices. This presentation covers the trials and tribulations of enhancing and upstreaming U-boot with Broadcomâ€™s Northstar SoC product line. After a brief overview of U-boot, its features and uses, the discussion will cover the methodology employed in enabling the new hardware, the process of upstreaming the changes into mainline u-boot, and any complexities encountered during the entire development process.

About Jon Mason
Jon Mason is a Software Engineer in Broadcom Ltd's CCX division. Jon's day job consists of enabling, bug fixing, and upstreaming the Linux and u-boot software for Broadcom's ARM/ARM64 iProc SoCs (StrataGX). Outside of work, Jon maintain's NTB and a few other drivers in Linux.
Captions: 
	00:00:00,290 --> 00:00:07,290
cool so I'll begin

00:00:04,640 --> 00:00:09,269
so I'm John Mason I worked for for

00:00:07,290 --> 00:00:11,160
Broadcom you know if you read the

00:00:09,269 --> 00:00:13,980
description then you know at least a

00:00:11,160 --> 00:00:14,940
little bit about me Broadcom makes a

00:00:13,980 --> 00:00:17,880
bunch of different crafts

00:00:14,940 --> 00:00:19,529
they're awesome stuff the best stuff

00:00:17,880 --> 00:00:25,800
only the best stuff we only make the

00:00:19,529 --> 00:00:27,750
best stuff so my group makes SOC s for

00:00:25,800 --> 00:00:31,130
communications here's the marketing

00:00:27,750 --> 00:00:33,149
blurb you can read it or not it's a

00:00:31,130 --> 00:00:37,620
marketing speak so I'm not sure it's

00:00:33,149 --> 00:00:38,940
actually English and specifically I'll

00:00:37,620 --> 00:00:42,059
work on what we call the North Star

00:00:38,940 --> 00:00:43,350
families of SOC s it's a I don't know

00:00:42,059 --> 00:00:45,930
what while yet two names which is also

00:00:43,350 --> 00:00:47,640
called strategy X as part of the I

00:00:45,930 --> 00:00:50,309
Prague family so if you're familiar with

00:00:47,640 --> 00:00:53,670
some of the wireless routers that are

00:00:50,309 --> 00:00:56,160
very popular like like it I think some

00:00:53,670 --> 00:01:01,170
basis ones are Northstar based which is

00:00:56,160 --> 00:01:03,149
a the 4708 4709 it's cortex a9 without

00:01:01,170 --> 00:01:04,880
VfB because that apparently took up too

00:01:03,149 --> 00:01:07,229
much real estate so you don't want that

00:01:04,880 --> 00:01:09,659
to be at the North Star Plus which is

00:01:07,229 --> 00:01:11,549
essentially the same thing only a little

00:01:09,659 --> 00:01:13,500
bit better and it has neon and BFP and

00:01:11,549 --> 00:01:16,470
then our latest greatest one is North

00:01:13,500 --> 00:01:19,740
Star 2 which is a cortex 8 57 base

00:01:16,470 --> 00:01:21,330
that's armed v8 and it's used all over

00:01:19,740 --> 00:01:23,130
the place and if you want to buy some of

00:01:21,330 --> 00:01:26,909
them just let us know and we'll probably

00:01:23,130 --> 00:01:28,650
sell them to you and then here's the

00:01:26,909 --> 00:01:32,070
that was enough marketing for me for a

00:01:28,650 --> 00:01:34,100
little bit so those little little joke

00:01:32,070 --> 00:01:34,100
here

00:01:37,180 --> 00:01:41,820
okay

00:01:40,080 --> 00:01:48,120
so if you don't know what a bootloader

00:01:41,820 --> 00:01:51,110
is I'm not just going to kick you out so

00:01:48,120 --> 00:01:54,030
a bootloader in extremely high level is

00:01:51,110 --> 00:01:55,170
trying to put the system into a sane

00:01:54,030 --> 00:01:59,310
enough state where you can boo to no

00:01:55,170 --> 00:02:02,180
less you know you find the OS click

00:01:59,310 --> 00:02:04,950
clean up load into memory and boot it

00:02:02,180 --> 00:02:06,480
you have this kind of level 1 vs. level

00:02:04,950 --> 00:02:10,590
2 I don't want to get too deep into this

00:02:06,480 --> 00:02:12,720
because it's not super pertinent to what

00:02:10,590 --> 00:02:14,280
I'm trying to show here but the level 1

00:02:12,720 --> 00:02:15,570
kind of puts it into the same state and

00:02:14,280 --> 00:02:18,870
finds the media and then the level to

00:02:15,570 --> 00:02:22,170
actually boots it and you boot can do

00:02:18,870 --> 00:02:26,880
both and for our purposes we do use it

00:02:22,170 --> 00:02:30,230
for both so what is you boot it's

00:02:26,880 --> 00:02:31,920
actually called vashu boot my German is

00:02:30,230 --> 00:02:34,650
non-existent so I'm sure I'm even

00:02:31,920 --> 00:02:36,690
pronouncing it wrong but Das Boot double

00:02:34,650 --> 00:02:38,250
universal bootloader I just call it you

00:02:36,690 --> 00:02:40,980
boot throughout if it you go what you

00:02:38,250 --> 00:02:42,660
want to hear it called Das Boot just

00:02:40,980 --> 00:02:44,160
whenever I think you boot just put in

00:02:42,660 --> 00:02:49,800
your head to say class right in front of

00:02:44,160 --> 00:02:54,270
it and it's a gplv2 which i think is

00:02:49,800 --> 00:02:57,120
actually pretty significant so you boot

00:02:54,270 --> 00:03:01,350
can boot from pretty much any kind of

00:02:57,120 --> 00:03:04,170
media or open file system including that

00:03:01,350 --> 00:03:06,330
the network so they've plumbed every

00:03:04,170 --> 00:03:08,459
single permutation I could think of and

00:03:06,330 --> 00:03:09,930
I looked and couldn't find anything I

00:03:08,459 --> 00:03:14,459
could actually even think of that wasn't

00:03:09,930 --> 00:03:16,890
possible so some alternatives for you

00:03:14,459 --> 00:03:21,209
boot the core boot

00:03:16,890 --> 00:03:23,520
UEFI or oofy the Tiano Tianna core so

00:03:21,209 --> 00:03:27,630
this is the kind of level one level to

00:03:23,520 --> 00:03:30,239
kind of mash up because Tiano is not

00:03:27,630 --> 00:03:31,830
open but Tana core is and you can kind

00:03:30,239 --> 00:03:34,500
of mesh them together in interesting

00:03:31,830 --> 00:03:37,700
ways I don't want to talk about that too

00:03:34,500 --> 00:03:44,120
much except for saying that it is a

00:03:37,700 --> 00:03:47,700
popular alternative and just to be funny

00:03:44,120 --> 00:03:51,210
Broadcom also has two internal boot

00:03:47,700 --> 00:03:53,280
loader competitors because you know if

00:03:51,210 --> 00:03:54,000
you google boot loaders there's dozens

00:03:53,280 --> 00:03:56,070
and dozens

00:03:54,000 --> 00:03:57,360
for no real reason that I can find

00:03:56,070 --> 00:03:58,890
except for everyone wants to do their

00:03:57,360 --> 00:04:01,620
own thing

00:03:58,890 --> 00:04:03,840
so we have CF ear I think it's also

00:04:01,620 --> 00:04:06,300
pronounced cafe which is abroad come for

00:04:03,840 --> 00:04:07,890
priority license if you buy junk from us

00:04:06,300 --> 00:04:10,020
apparently it's not done of my group so

00:04:07,890 --> 00:04:11,730
I can talk about it or I can't talk

00:04:10,020 --> 00:04:13,380
about it but if you buy it from us a

00:04:11,730 --> 00:04:15,019
little license it back to you and you

00:04:13,380 --> 00:04:18,150
it's mostly used in these home routers

00:04:15,019 --> 00:04:20,910
like the North Star based ones and also

00:04:18,150 --> 00:04:23,300
mitts for the set-top box group and then

00:04:20,910 --> 00:04:24,990
there's bolt which is yet another

00:04:23,300 --> 00:04:28,320
internally developed one that's

00:04:24,990 --> 00:04:32,190
proprietary primarily used for the

00:04:28,320 --> 00:04:35,160
set-top-box group so just yeah there's a

00:04:32,190 --> 00:04:37,560
lot and in the perfect world we'd all be

00:04:35,160 --> 00:04:46,230
using one and maybe one day we can get

00:04:37,560 --> 00:04:50,280
there so this is the kind of bulk of it

00:04:46,230 --> 00:04:55,530
it's how to enable new hardware uses so

00:04:50,280 --> 00:04:57,780
a an early 2016 we get this board back

00:04:55,530 --> 00:05:00,270
this is the North Star to board it's in

00:04:57,780 --> 00:05:01,770
all its glory this is of course an svk

00:05:00,270 --> 00:05:03,030
because you're not actually going to buy

00:05:01,770 --> 00:05:04,380
one of these you're gonna buy like the

00:05:03,030 --> 00:05:06,780
little processor with one or two things

00:05:04,380 --> 00:05:12,120
hanging often a printer or an ass or

00:05:06,780 --> 00:05:14,280
something like that but when we got it

00:05:12,120 --> 00:05:16,320
back no one really cares that much about

00:05:14,280 --> 00:05:18,030
running new boots they they don't they

00:05:16,320 --> 00:05:19,200
even only kind of care about running

00:05:18,030 --> 00:05:22,979
Linux because they want to run their

00:05:19,200 --> 00:05:26,280
benchmarks so essentially you want to

00:05:22,979 --> 00:05:28,200
get the the goal of the first one is to

00:05:26,280 --> 00:05:30,030
get out of the way to get Lennox up and

00:05:28,200 --> 00:05:31,560
running as quickly as possible so that

00:05:30,030 --> 00:05:33,390
your management is not making your work

00:05:31,560 --> 00:05:36,150
weekends and you know until midnight

00:05:33,390 --> 00:05:38,220
every night because you were essentially

00:05:36,150 --> 00:05:39,930
our gating all the other kernel

00:05:38,220 --> 00:05:41,850
developers the device tower developers

00:05:39,930 --> 00:05:44,130
anyone doing Diagnostics every single

00:05:41,850 --> 00:05:45,780
person around you is waiting on you to

00:05:44,130 --> 00:05:48,210
finish so that they can do their job

00:05:45,780 --> 00:05:50,190
which which is not a fun place to be so

00:05:48,210 --> 00:05:51,600
you wanna be out of that hot path let's

00:05:50,190 --> 00:05:55,410
quickly as possible at least I want it

00:05:51,600 --> 00:05:59,220
to be so stuff one is you need to get

00:05:55,410 --> 00:06:03,270
memory working without memory looks like

00:05:59,220 --> 00:06:06,900
you got nothing right so you have RAM

00:06:03,270 --> 00:06:11,460
thighs your RAM needs being knitted and

00:06:06,900 --> 00:06:13,080
set up we luckily had a quick hack

00:06:11,460 --> 00:06:15,570
around it is because we had a fairly

00:06:13,080 --> 00:06:17,310
large SRAM built into the to the SOC so

00:06:15,570 --> 00:06:21,030
we were able to kind of bypassed it and

00:06:17,310 --> 00:06:22,350
run all from SRAM I've also been told

00:06:21,030 --> 00:06:24,750
that if you have a large enough l2 cache

00:06:22,350 --> 00:06:27,930
you can actually read that to act

00:06:24,750 --> 00:06:29,910
as a temporary ram and fit and you can

00:06:27,930 --> 00:06:33,480
hack down the bootloader to fit into

00:06:29,910 --> 00:06:35,220
there so that is kind of that's kind of

00:06:33,480 --> 00:06:37,230
nice if you can get it but if not then

00:06:35,220 --> 00:06:40,050
then you do have to go through but we've

00:06:37,230 --> 00:06:42,660
actually a follow one SOC that had it

00:06:40,050 --> 00:06:44,010
did not have enough s Ram and you do

00:06:42,660 --> 00:06:48,990
have to go through and set up all this

00:06:44,010 --> 00:06:51,480
fun stuff and it just it is not fun and

00:06:48,990 --> 00:06:54,120
this is the step two is getting the

00:06:51,480 --> 00:06:55,350
serial working because without anything

00:06:54,120 --> 00:06:57,900
going to screen how do you know that

00:06:55,350 --> 00:06:59,460
you're booting or bricked or whatever

00:06:57,900 --> 00:07:03,570
you actually need something but there is

00:06:59,460 --> 00:07:06,420
a fun backdoor if you can get a JTAG

00:07:03,570 --> 00:07:08,550
hooked up you actually can look there is

00:07:06,420 --> 00:07:10,530
an internal print log in both you budem

00:07:08,550 --> 00:07:12,270
the kernel if you don't have it working

00:07:10,530 --> 00:07:13,620
where you can actually see what it's

00:07:12,270 --> 00:07:15,720
been printed there it should have made

00:07:13,620 --> 00:07:17,580
it to screen but didn't because the

00:07:15,720 --> 00:07:19,620
serials misconfigured or the serial

00:07:17,580 --> 00:07:24,560
drivers broken because you have a piece

00:07:19,620 --> 00:07:29,940
of cereal that is difficult to digest

00:07:24,560 --> 00:07:32,340
and then step three get networking boot

00:07:29,940 --> 00:07:35,670
get networking working that doesn't

00:07:32,340 --> 00:07:37,950
sound like a very good run there but if

00:07:35,670 --> 00:07:41,810
you can get the kernel net booted you

00:07:37,950 --> 00:07:45,990
essentially are out of the hot path and

00:07:41,810 --> 00:07:48,960
you're no but you might you're going to

00:07:45,990 --> 00:07:50,580
need the ethernet driver an ethernet phy

00:07:48,960 --> 00:07:53,070
you might be lucky enough from a

00:07:50,580 --> 00:07:54,780
previous generation of SOC to have those

00:07:53,070 --> 00:08:00,780
already kind of laying around or maybe

00:07:54,780 --> 00:08:05,400
minor modifications ours required more

00:08:00,780 --> 00:08:10,070
than minor modifications but there's

00:08:05,400 --> 00:08:12,900
also a secondary way if you have pci and

00:08:10,070 --> 00:08:17,290
something like a intel neck you actually

00:08:12,900 --> 00:08:20,110
can use that to TFTP boot and

00:08:17,290 --> 00:08:26,740
kind of sidestep any issues that you

00:08:20,110 --> 00:08:29,440
might have there but what if you don't

00:08:26,740 --> 00:08:32,560
have a thern ette or Ethernet not

00:08:29,440 --> 00:08:34,330
working on a zero or you have some kind

00:08:32,560 --> 00:08:36,340
of restriction in your lab or you can't

00:08:34,330 --> 00:08:41,710
do any txt P or kind of a server running

00:08:36,340 --> 00:08:44,470
or there's no network or or whatever so

00:08:41,710 --> 00:08:48,520
Lisa R chips you can actually actually

00:08:44,470 --> 00:08:55,270
program the spy VHA tags which saves you

00:08:48,520 --> 00:09:00,040
a lot of foot traffic or you can use a

00:08:55,270 --> 00:09:03,280
spy flasher and has a a removable spy

00:09:00,040 --> 00:09:06,430
chip and flash and move and flash and

00:09:03,280 --> 00:09:14,430
moves and flash and move and that gets

00:09:06,430 --> 00:09:17,740
really tedious very very quickly and

00:09:14,430 --> 00:09:22,060
similarly if your SSE if you want to be

00:09:17,740 --> 00:09:23,920
able to reflash your SOC you actually

00:09:22,060 --> 00:09:25,420
can do can't do the same thing but you

00:09:23,920 --> 00:09:32,890
actually need to have the drivers in you

00:09:25,420 --> 00:09:33,100
boot in place so that didn't come out

00:09:32,890 --> 00:09:37,150
right

00:09:33,100 --> 00:09:40,060
so your ear SOC is most likely able to

00:09:37,150 --> 00:09:41,710
boot from NAND or spy but you need to

00:09:40,060 --> 00:09:44,980
have the drivers already implemented in

00:09:41,710 --> 00:09:46,510
you boot so getting that done as soon as

00:09:44,980 --> 00:09:48,910
possible actually will save you a lot of

00:09:46,510 --> 00:09:53,230
this foot traffic which is the well-worn

00:09:48,910 --> 00:09:57,010
footpath here and then kind of lastly

00:09:53,230 --> 00:09:59,550
you want to Internet lastly you you want

00:09:57,010 --> 00:10:04,060
to get the other peripherals running up

00:09:59,550 --> 00:10:05,080
and then finally Diagnostics you want

00:10:04,060 --> 00:10:09,130
have something that can actually test

00:10:05,080 --> 00:10:12,040
your hardware kind of similar to x86

00:10:09,130 --> 00:10:13,830
BIOS post new boot has this

00:10:12,040 --> 00:10:15,400
functionality that's actually pretty

00:10:13,830 --> 00:10:18,340
pretty well done

00:10:15,400 --> 00:10:21,820
and you might also have our marketing

00:10:18,340 --> 00:10:24,970
requirement or a requirement of a

00:10:21,820 --> 00:10:26,320
customer to have something stretch test

00:10:24,970 --> 00:10:27,880
your hardware but they don't want to do

00:10:26,320 --> 00:10:30,910
it in Lennox because of

00:10:27,880 --> 00:10:32,470
various reasons of Linux being more

00:10:30,910 --> 00:10:33,910
having more things running in the

00:10:32,470 --> 00:10:36,220
background you want to see what the

00:10:33,910 --> 00:10:37,449
theoretical max of the the hardware and

00:10:36,220 --> 00:10:43,449
things like that so you can actually run

00:10:37,449 --> 00:10:47,850
those inside you boot but a bit of

00:10:43,449 --> 00:10:49,750
caution here you can easily overflow the

00:10:47,850 --> 00:10:52,480
partition that you've set aside in

00:10:49,750 --> 00:10:54,490
and/or spy for you would if you don't

00:10:52,480 --> 00:10:59,980
size it appropriately or you have a very

00:10:54,490 --> 00:11:02,740
constrained amount of space which can be

00:10:59,980 --> 00:11:04,660
kind of confusing because it doesn't

00:11:02,740 --> 00:11:08,319
show up until you try to boot the

00:11:04,660 --> 00:11:10,660
secondary things like your like Linux or

00:11:08,319 --> 00:11:13,630
you might over overwrite the end of it

00:11:10,660 --> 00:11:21,310
and therefore you don't boot at all it

00:11:13,630 --> 00:11:24,790
did bite us more than once okay and how

00:11:21,310 --> 00:11:27,880
does she need boots so this is the part

00:11:24,790 --> 00:11:33,880
where I'm kind of a poser I apologize

00:11:27,880 --> 00:11:38,170
for that so I wasn't able to push out my

00:11:33,880 --> 00:11:40,269
patches for four for you boot until last

00:11:38,170 --> 00:11:43,120
week and therefore they haven't really

00:11:40,269 --> 00:11:44,860
been reviewed so this is kind of going

00:11:43,120 --> 00:11:50,050
to be hand waving so I apologize for

00:11:44,860 --> 00:11:51,670
that so step one is to sign up for the

00:11:50,050 --> 00:11:54,160
mailing list because the mailing list is

00:11:51,670 --> 00:11:56,519
moderated this did bite me when I did

00:11:54,160 --> 00:11:59,949
submit because I submitted on Friday

00:11:56,519 --> 00:12:02,889
afternoon and if you are not a

00:11:59,949 --> 00:12:05,019
subscriber to the list your patches wait

00:12:02,889 --> 00:12:07,720
until someone approves it and if you do

00:12:05,019 --> 00:12:08,259
it on Friday no one comes to work on the

00:12:07,720 --> 00:12:11,290
weekend

00:12:08,259 --> 00:12:13,689
then on Monday your patches will finally

00:12:11,290 --> 00:12:15,220
hit the mailing list and if Monday is a

00:12:13,689 --> 00:12:16,959
holiday then maybe or there everyone's

00:12:15,220 --> 00:12:19,029
having DLC then maybe they don't get

00:12:16,959 --> 00:12:28,660
reviewed until maybe after this

00:12:19,029 --> 00:12:30,639
presentation so if you get ahead of this

00:12:28,660 --> 00:12:34,500
and subscribe early then you avoid the

00:12:30,639 --> 00:12:34,500
stupid human errors that I encountered

00:12:34,560 --> 00:12:41,199
so they'll trim your approach that I am

00:12:37,809 --> 00:12:41,690
taking that seems to flow with what I've

00:12:41,199 --> 00:12:44,450
seen on them

00:12:41,690 --> 00:12:47,030
analysts is kind of following the lennox

00:12:44,450 --> 00:12:49,610
mantra push early push often kind of

00:12:47,030 --> 00:12:57,550
pushed small pieces I've seen actually a

00:12:49,610 --> 00:12:59,600
lot of full entire system supports but I

00:12:57,550 --> 00:13:01,820
think that might get a lot more review

00:12:59,600 --> 00:13:06,680
eyes to push something quick and get it

00:13:01,820 --> 00:13:10,820
in easy so the kind of lennox model of

00:13:06,680 --> 00:13:12,470
pushing small easy reviews patches each

00:13:10,820 --> 00:13:15,110
patch containing a logical change that

00:13:12,470 --> 00:13:17,270
seems to be universal and running a

00:13:15,110 --> 00:13:19,850
check patch that seems to be especially

00:13:17,270 --> 00:13:22,420
internal to my team a bone of contention

00:13:19,850 --> 00:13:25,250
that shouldn't be necessary check patch

00:13:22,420 --> 00:13:26,360
there is check patch just in new boot

00:13:25,250 --> 00:13:28,070
deflectors and lennox there's get

00:13:26,360 --> 00:13:31,460
maintainer and you just like theirs and

00:13:28,070 --> 00:13:32,840
lennox that should be pretty obvious if

00:13:31,460 --> 00:13:40,280
you have a Linux developer coming to you

00:13:32,840 --> 00:13:43,040
boot to do those things and if you can

00:13:40,280 --> 00:13:46,400
somehow get this in place internally you

00:13:43,040 --> 00:13:53,680
can avoid a lot of pain unfortunately we

00:13:46,400 --> 00:13:53,680
did not have it this is out of order

00:13:54,089 --> 00:14:02,829
so unfortunately for us there wasn't a

00:14:00,579 --> 00:14:04,240
huge amount of customer demand for

00:14:02,829 --> 00:14:05,709
upstreaming you boots we had we got a

00:14:04,240 --> 00:14:07,810
lot of customer demand for up streaming

00:14:05,709 --> 00:14:10,540
Lenox and getting the patches we had out

00:14:07,810 --> 00:14:12,519
of tree and tree and all that but we

00:14:10,540 --> 00:14:15,870
have we had no customer saying that it

00:14:12,519 --> 00:14:21,600
would be fantastic or beneficial to

00:14:15,870 --> 00:14:23,740
upstream u-boot so the real benefit is

00:14:21,600 --> 00:14:26,649
what you have to sell the management

00:14:23,740 --> 00:14:29,980
that by up streaming it you do have

00:14:26,649 --> 00:14:32,139
superior code quality you have the

00:14:29,980 --> 00:14:34,319
ability to cut a software development

00:14:32,139 --> 00:14:38,769
kit on the newer version of you boot

00:14:34,319 --> 00:14:40,870
almost at will if you have multiple like

00:14:38,769 --> 00:14:43,779
a family of s OCS you have to kind of

00:14:40,870 --> 00:14:46,600
convince them that you don't want to

00:14:43,779 --> 00:14:48,790
make every single you boot a snapshot

00:14:46,600 --> 00:14:50,920
you don't want North Star Plus on a four

00:14:48,790 --> 00:14:52,930
year old version of you boot Northstar

00:14:50,920 --> 00:14:55,000
to on the latest one and then in four

00:14:52,930 --> 00:14:57,250
years when we do the next one to be a

00:14:55,000 --> 00:14:59,199
newer one you you want to be in the

00:14:57,250 --> 00:15:02,670
newer version it's less maintenance for

00:14:59,199 --> 00:15:11,079
everyone to have everyone on the same

00:15:02,670 --> 00:15:13,029
release and they're actually so I've

00:15:11,079 --> 00:15:14,410
heard customers that actually do want

00:15:13,029 --> 00:15:17,620
everything running on the latest version

00:15:14,410 --> 00:15:19,360
and there is the possibility maybe false

00:15:17,620 --> 00:15:22,029
or a specter that you might sell more

00:15:19,360 --> 00:15:28,540
chips if you have the enablement

00:15:22,029 --> 00:15:30,009
upstream but if they don't agree then

00:15:28,540 --> 00:15:34,449
you have to upstream after the fact

00:15:30,009 --> 00:15:40,180
which is what we're doing so you have

00:15:34,449 --> 00:15:42,040
this kind of problem of having something

00:15:40,180 --> 00:15:43,509
on the order of 100,000 lines of code

00:15:42,040 --> 00:15:48,939
meant some of which is completely

00:15:43,509 --> 00:15:51,939
unnecessary that you need to upstream so

00:15:48,939 --> 00:15:54,550
step one is to rebase and if you're

00:15:51,939 --> 00:15:55,959
lucky and your code is elegant you could

00:15:54,550 --> 00:15:58,000
just do a git rebase of whatever you

00:15:55,959 --> 00:16:02,860
have to the latest our C which was our

00:15:58,000 --> 00:16:04,760
c2 as of Friday and it might just

00:16:02,860 --> 00:16:06,870
magically work

00:16:04,760 --> 00:16:08,910
unfortunately for us it did not just

00:16:06,870 --> 00:16:12,500
magically work it blew up in new and

00:16:08,910 --> 00:16:15,090
interesting ways and hacking it to

00:16:12,500 --> 00:16:19,830
compile cleanly and then it didn't boot

00:16:15,090 --> 00:16:24,020
and it's it's a nightmare so I took

00:16:19,830 --> 00:16:24,020
option B here is to start from scratch

00:16:25,010 --> 00:16:28,650
it might be difficult to get your

00:16:27,120 --> 00:16:33,090
management to agree or you could just

00:16:28,650 --> 00:16:34,590
not tell them some management managers

00:16:33,090 --> 00:16:40,490
are very hands-off and they might be

00:16:34,590 --> 00:16:43,200
amenable to that and then step to squash

00:16:40,490 --> 00:16:44,760
I don't think anyone and I could be

00:16:43,200 --> 00:16:46,020
wrong you would people correct me I

00:16:44,760 --> 00:16:48,960
don't think anyone cares about your

00:16:46,020 --> 00:16:51,930
thousands of revisions of of an ang

00:16:48,960 --> 00:16:53,340
driver they want one version the latest

00:16:51,930 --> 00:16:57,630
version for when you push the initial

00:16:53,340 --> 00:16:59,670
version so squash get squash is or get

00:16:57,630 --> 00:17:05,579
git rebase you can use it squash it's

00:16:59,670 --> 00:17:09,270
fantastic I highly recommend it and then

00:17:05,579 --> 00:17:11,040
carving it in to submit able chunks this

00:17:09,270 --> 00:17:12,510
is the approach I'm taking hopefully

00:17:11,040 --> 00:17:14,640
that's the correct one of just doing the

00:17:12,510 --> 00:17:17,240
basic and ailment to them taking the

00:17:14,640 --> 00:17:20,040
mantra of going small and growing it

00:17:17,240 --> 00:17:22,110
just doing the part that enables serial

00:17:20,040 --> 00:17:25,500
des config the header files in the board

00:17:22,110 --> 00:17:29,210
file then making it intelligent in

00:17:25,500 --> 00:17:32,490
adding the device tree awareness and

00:17:29,210 --> 00:17:37,500
then carving each individual driver into

00:17:32,490 --> 00:17:39,060
a separate patch and then a note to

00:17:37,500 --> 00:17:41,070
myself to add the basics of how to do

00:17:39,060 --> 00:17:44,810
that sorry about that

00:17:41,070 --> 00:17:47,730
and then finally tags and anything else

00:17:44,810 --> 00:17:51,920
for some reason some companies think

00:17:47,730 --> 00:17:53,580
that this is prepared proprietary

00:17:51,920 --> 00:17:55,920
unfortunately it is not

00:17:53,580 --> 00:17:58,680
if you've shipped out and again I'm not

00:17:55,920 --> 00:18:00,210
a lawyer don't play one on TV but if

00:17:58,680 --> 00:18:02,370
you've released this to a customer or

00:18:00,210 --> 00:18:04,070
somehow otherwise distributed it these

00:18:02,370 --> 00:18:08,280
things are statically compiled together

00:18:04,070 --> 00:18:09,390
views you are obligated by the GPL to

00:18:08,280 --> 00:18:13,890
give away this code it is no longer

00:18:09,390 --> 00:18:17,350
proprietary so

00:18:13,890 --> 00:18:18,520
yeah that might also be something to

00:18:17,350 --> 00:18:20,500
make your management aware of before

00:18:18,520 --> 00:18:23,800
they start shipping products it's not

00:18:20,500 --> 00:18:25,210
they might want to do a audit of all the

00:18:23,800 --> 00:18:26,800
things they think is proprietary and

00:18:25,210 --> 00:18:31,840
making sure that they don't want to hand

00:18:26,800 --> 00:18:33,930
it out and then submit and rework this

00:18:31,840 --> 00:18:37,660
is kind of the open source model

00:18:33,930 --> 00:18:38,920
you said something repair it until

00:18:37,660 --> 00:18:40,270
everyone's happy with it and then it

00:18:38,920 --> 00:18:43,600
goes away and then you move on to the

00:18:40,270 --> 00:18:47,170
next thing do it serially don't submit

00:18:43,600 --> 00:18:48,400
40 drivers at once and then try to do

00:18:47,170 --> 00:18:50,160
them all at once they're all going to

00:18:48,400 --> 00:18:53,650
have probably the same kind of problems

00:18:50,160 --> 00:18:55,630
you know reread reinventing the printf

00:18:53,650 --> 00:18:58,830
seems to be a popular one or adding

00:18:55,630 --> 00:19:02,710
delays for no reason

00:18:58,830 --> 00:19:06,790
so submitting it's early and then fixing

00:19:02,710 --> 00:19:10,380
the same problem from the first one into

00:19:06,790 --> 00:19:13,090
the subsequent pieces is is very vital I

00:19:10,380 --> 00:19:14,590
think I just blew through that but

00:19:13,090 --> 00:19:20,730
hopefully everyone has lots of questions

00:19:14,590 --> 00:19:20,730
or we can go over this patch right now

00:19:22,140 --> 00:19:26,040
so questions coming

00:19:31,549 --> 00:19:35,780
boy give me five

00:19:41,200 --> 00:20:11,240
if you're talking and tomorrow UEFI oh

00:20:09,309 --> 00:20:13,190
the other courses the reference

00:20:11,240 --> 00:20:17,390
application for Yui for the UEFI

00:20:13,190 --> 00:20:22,429
specification from Intel and none of

00:20:17,390 --> 00:20:24,530
these require a TBI yes so we actually

00:20:22,429 --> 00:20:27,020
have a good chunk of service right now

00:20:24,530 --> 00:20:29,210
that are running based on either channel

00:20:27,020 --> 00:20:31,400
core or even a my film where that

00:20:29,210 --> 00:20:33,830
implements the UEFI specification and is

00:20:31,400 --> 00:20:36,020
running full device tree and it's all

00:20:33,830 --> 00:20:38,870
fully spoiler it works fine yeah so I

00:20:36,020 --> 00:20:43,070
think that is a call to interesting part

00:20:38,870 --> 00:20:45,110
to me it is the kind of level one level

00:20:43,070 --> 00:20:46,760
two thing because my understanding of

00:20:45,110 --> 00:20:48,799
piano core and I could be completely

00:20:46,760 --> 00:20:52,130
off-base here is that you have the kind

00:20:48,799 --> 00:20:54,650
of basics what we call BIOS in the old

00:20:52,130 --> 00:20:56,929
days basic firmware which does the setup

00:20:54,650 --> 00:20:59,900
that then launches into the level 2

00:20:56,929 --> 00:21:00,950
which is the piano chords that -

00:20:59,900 --> 00:21:03,289
understanding that or is that not true

00:21:00,950 --> 00:21:06,289
in you would speech is basically talking

00:21:03,289 --> 00:21:09,140
about SPL and the main chunk right so

00:21:06,289 --> 00:21:12,830
channel core does not contain an SPL

00:21:09,140 --> 00:21:14,809
part but we also have platforms in Ubud

00:21:12,830 --> 00:21:16,460
which do not contain an SPL pod but

00:21:14,809 --> 00:21:21,679
require some other film where to do that

00:21:16,460 --> 00:21:24,260
for like like an 80s like and a atf

00:21:21,679 --> 00:21:27,380
sometimes does not include drm

00:21:24,260 --> 00:21:28,970
initialization code either okay so it if

00:21:27,380 --> 00:21:30,500
it was as easy

00:21:28,970 --> 00:21:35,570
I mean people wouldn't get it wrong

00:21:30,500 --> 00:21:37,780
right it's it's complicated but in a

00:21:35,570 --> 00:21:37,780
nutshell

00:21:39,280 --> 00:21:44,830
it's the same thing just not invented to

00:21:41,860 --> 00:21:47,620
you and for the people that might not be

00:21:44,830 --> 00:21:51,520
falling there is this kind of hand off

00:21:47,620 --> 00:21:53,200
ID where you have level one that hands

00:21:51,520 --> 00:21:54,790
off the level two and then you boot you

00:21:53,200 --> 00:21:55,960
actually can do it I think your talk is

00:21:54,790 --> 00:21:59,710
actually talking about it being able to

00:21:55,960 --> 00:22:03,670
go from you boot to UEFI and then boot

00:21:59,710 --> 00:22:05,550
it OS right I'm not going to do my talk

00:22:03,670 --> 00:22:10,750
at this moment hahahahaha

00:22:05,550 --> 00:22:12,700
but basically basically you you can

00:22:10,750 --> 00:22:14,320
extend you boot with the interfaces that

00:22:12,700 --> 00:22:17,020
allow you to implement the UEFI

00:22:14,320 --> 00:22:19,330
specification so that you can run and a

00:22:17,020 --> 00:22:21,940
payload and you boot in parallel at the

00:22:19,330 --> 00:22:24,520
same time and the payload can then call

00:22:21,940 --> 00:22:27,760
back into you boot and to basically

00:22:24,520 --> 00:22:30,070
implement its drivers hmm which is what

00:22:27,760 --> 00:22:33,130
you use to implement a boot loader like

00:22:30,070 --> 00:22:35,050
a graphical boot loader not cubed which

00:22:33,130 --> 00:22:38,910
is more like a film where in a

00:22:35,050 --> 00:22:45,360
traditional PC sense of the word exactly

00:22:38,910 --> 00:22:47,920
so and actually on the HPI thing again

00:22:45,360 --> 00:22:50,710
there's technically nothing that would

00:22:47,920 --> 00:22:52,720
keep you from passing ACPI tables to a

00:22:50,710 --> 00:22:54,250
payload inside of you boot either so if

00:22:52,720 --> 00:22:56,410
you want to do I don't see why anybody

00:22:54,250 --> 00:22:58,750
would but if you wanted to you could

00:22:56,410 --> 00:23:02,410
even teach you boot how to boot a Linux

00:22:58,750 --> 00:23:04,930
kernel with a TPI tables now if you

00:23:02,410 --> 00:23:10,810
really like to shoot yourself in the

00:23:04,930 --> 00:23:13,320
foot another remark or two like where

00:23:10,810 --> 00:23:15,760
when you talk about up streaming thing

00:23:13,320 --> 00:23:19,150
one thing that people keep forgetting

00:23:15,760 --> 00:23:23,680
which is very very very important is

00:23:19,150 --> 00:23:25,630
make sure your patches are always we

00:23:23,680 --> 00:23:28,030
baseball which means every single commit

00:23:25,630 --> 00:23:30,610
inside your patch set has to compile

00:23:28,030 --> 00:23:32,560
throughout so if you if you for example

00:23:30,610 --> 00:23:34,750
added dependency from one level to

00:23:32,560 --> 00:23:36,790
another just by like a link to pedaling

00:23:34,750 --> 00:23:39,370
dependency make sure that you for

00:23:36,790 --> 00:23:42,040
example only allow that driver to ever

00:23:39,370 --> 00:23:43,750
be compiled of the K convict entry after

00:23:42,040 --> 00:23:45,910
every connection is already there

00:23:43,750 --> 00:23:48,910
because otherwise if you do a git bisect

00:23:45,910 --> 00:23:50,740
on something different you might end up

00:23:48,910 --> 00:23:51,970
getting a dependencies included for

00:23:50,740 --> 00:23:53,679
some reason one one reason or another

00:23:51,970 --> 00:23:54,760
and then your whole copay just doesn't

00:23:53,679 --> 00:23:56,050
compile anymore while you're trying to

00:23:54,760 --> 00:23:58,000
find out a buck for a completely

00:23:56,050 --> 00:24:02,710
different board alright so make sure

00:23:58,000 --> 00:24:04,030
that everything is fully bisected those

00:24:02,710 --> 00:24:20,980
are the two I don't um did you have

00:24:04,030 --> 00:24:22,960
anything so the question was was is the

00:24:20,980 --> 00:24:26,260
preferred method to interrupt the boot

00:24:22,960 --> 00:24:28,540
process before booting the kernel um I

00:24:26,260 --> 00:24:31,360
mean there obviously is a timeout that

00:24:28,540 --> 00:24:33,490
that you can do I think is a default of

00:24:31,360 --> 00:24:35,110
just hitting Enter or space works with

00:24:33,490 --> 00:24:42,220
some gate key or the internet gaming

00:24:35,110 --> 00:24:43,900
what's the basic yeah alright and you

00:24:42,220 --> 00:24:46,720
can enter using around like MAC address

00:24:43,900 --> 00:24:50,890
or something like that yes yeah or any

00:24:46,720 --> 00:24:59,140
key thank you and of course with CSP

00:24:50,890 --> 00:25:00,850
it's ctrl C sure the patch is that

00:24:59,140 --> 00:25:02,260
you're submitting for you boot are they

00:25:00,850 --> 00:25:05,440
for an or store in our store plus for

00:25:02,260 --> 00:25:09,250
Northstar too so what I'm spinning right

00:25:05,440 --> 00:25:11,590
now is Northstar to someone already did

00:25:09,250 --> 00:25:13,920
and called an alpha version of North

00:25:11,590 --> 00:25:16,840
Star Plus it doesn't actually boot

00:25:13,920 --> 00:25:22,300
that's not inaudible I think I figured

00:25:16,840 --> 00:25:25,510
out why while doing this patch so I um

00:25:22,300 --> 00:25:27,250
I personally would like to try to steal

00:25:25,510 --> 00:25:29,559
time for management to allow me to

00:25:27,250 --> 00:25:34,870
upstream North Star Plus at North Star

00:25:29,559 --> 00:25:36,670
but kind of how earlier I said you

00:25:34,870 --> 00:25:38,559
really don't want to do a snapshot in

00:25:36,670 --> 00:25:41,530
time of you boot and then walk away from

00:25:38,559 --> 00:25:45,700
it and have each SOC on its own route so

00:25:41,530 --> 00:25:47,710
we have that so we have 2012 start let's

00:25:45,700 --> 00:25:49,780
say 10 remember what exactly what

00:25:47,710 --> 00:25:52,750
release for North Star and North Star

00:25:49,780 --> 00:25:56,290
Plus and then we have luckily we had we

00:25:52,750 --> 00:25:57,970
had a semi new version 2016 no 5 for

00:25:56,290 --> 00:26:01,690
North Star 2

00:25:57,970 --> 00:26:05,800
so yeah one other quick question and

00:26:01,690 --> 00:26:07,660
that is Broadcom is very difficult

00:26:05,800 --> 00:26:09,310
company to work with I don't know about

00:26:07,660 --> 00:26:11,950
working for but working with them is

00:26:09,310 --> 00:26:13,690
very difficult none of their data sheets

00:26:11,950 --> 00:26:17,200
actually tell you what family a

00:26:13,690 --> 00:26:18,760
particular processor is actually in so

00:26:17,200 --> 00:26:20,350
sometimes I'm not sure if it's North

00:26:18,760 --> 00:26:22,720
Star North Star Plus North Star - do you

00:26:20,350 --> 00:26:26,950
have any quick tips on that so if you

00:26:22,720 --> 00:26:33,640
can is there an easy way sorry I think

00:26:26,950 --> 00:26:36,640
this is faster than just so you can key

00:26:33,640 --> 00:26:39,160
off that those names

00:26:36,640 --> 00:26:42,250
yeah because they'll say strategy X and

00:26:39,160 --> 00:26:47,050
it and you don't know what it is but the

00:26:42,250 --> 00:26:50,530
stock names the 53 oh one two three four

00:26:47,050 --> 00:26:53,800
one I mean the secondary numbers the SKU

00:26:50,530 --> 00:26:55,210
numbers very pretty pretty drastically

00:26:53,800 --> 00:26:58,450
bit but the cores are pretty much the

00:26:55,210 --> 00:27:03,880
same okay another question but I'll ask

00:26:58,450 --> 00:27:06,570
you later cuz it's properly sure I'm not

00:27:03,880 --> 00:27:06,570
there no more questions

00:27:11,470 --> 00:27:17,010
all the records kind of question okay

00:27:21,210 --> 00:27:33,520
yes what what peripherals are bringing

00:27:28,960 --> 00:27:35,289
up I would strongly encourage anybody

00:27:33,520 --> 00:27:38,289
that's supporting you to a new platform

00:27:35,289 --> 00:27:41,799
really scan through your IP its chances

00:27:38,289 --> 00:27:43,840
are pretty good that one of those you

00:27:41,799 --> 00:27:46,179
know one of those peripherals is using

00:27:43,840 --> 00:27:48,760
shared IP that there's already driver

00:27:46,179 --> 00:27:51,070
support excellent particularly USB and

00:27:48,760 --> 00:27:57,570
USB on-the-go little tend to be pretty

00:27:51,070 --> 00:27:57,570
widely shared yes agreed thank you

00:28:01,950 --> 00:28:11,120
going once twice so cool well I

00:28:07,860 --> 00:28:11,120
appreciate everyone taking the time

00:28:14,560 --> 00:28:17,060

YouTube URL: https://www.youtube.com/watch?v=zWjt6ZYxAfQ


