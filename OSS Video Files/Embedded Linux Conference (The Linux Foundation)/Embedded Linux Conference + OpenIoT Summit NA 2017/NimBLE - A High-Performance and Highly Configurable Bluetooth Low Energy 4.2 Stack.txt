Title: NimBLE - A High-Performance and Highly Configurable Bluetooth Low Energy 4.2 Stack
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	NimBLE - A High-Performance and Highly Configurable Bluetooth Low Energy 4.2 Stack - Will San Filippo & Sterling Hughes, Runtime

Apache Mynewt's NimBLE is the worldâ€™s first fully open source Bluetooth Low Energy 4.2 stack for both host and controller subsystems for MCU environments. It offers highly granular configuration options such as number of slots per connection, max number of concurrent connections, multiple advertising instances, and more. The configurability enables a wide variety of use cases previously difficult to address with closed or licensed-binary stacks: such as 32 or more concurrent connections using the Nordic nRF52 chip as either Central or Peripheral, large data bursts when connected to a large number of peripherals, ability for a peripheral to connect to multiple centrals, etc. The flexibility of design and configuration also allows developers to reduce stack size in resource-limited environments.
Captions: 
	00:00:00,000 --> 00:00:04,410
all right so I think I'm gonna get

00:00:01,920 --> 00:00:07,140
started it's a 11:30 a few people might

00:00:04,410 --> 00:00:09,540
end up walking in but that's all right

00:00:07,140 --> 00:00:10,110
so I just want to introduce myself to

00:00:09,540 --> 00:00:12,330
everybody

00:00:10,110 --> 00:00:14,639
I'm sterling I'll begin beginning the

00:00:12,330 --> 00:00:17,279
top with will who wrote the nimble

00:00:14,639 --> 00:00:19,770
controller so we're both developers on

00:00:17,279 --> 00:00:21,480
the Apache my new project which is an

00:00:19,770 --> 00:00:22,439
open-source operating system for em to

00:00:21,480 --> 00:00:25,260
use and I'll give a little bit of

00:00:22,439 --> 00:00:27,869
context on minut here but just by way of

00:00:25,260 --> 00:00:29,670
my background so I'm CTO and a

00:00:27,869 --> 00:00:32,579
co-founder of a company called run time

00:00:29,670 --> 00:00:34,350
and right what run times mission is is

00:00:32,579 --> 00:00:37,079
to develop open source software for

00:00:34,350 --> 00:00:38,219
embedded microcontrollers so not just

00:00:37,079 --> 00:00:43,079
cortex-m

00:00:38,219 --> 00:00:45,360
but think software like core processors

00:00:43,079 --> 00:00:47,399
like cortex-m which traditionally

00:00:45,360 --> 00:00:49,649
haven't had up operating systems or

00:00:47,399 --> 00:00:52,440
really a lot of good quality open source

00:00:49,649 --> 00:00:54,449
software that companies can adopt run

00:00:52,440 --> 00:00:57,210
time was kind of founded to modernize

00:00:54,449 --> 00:00:59,550
development for the cortex-m style of

00:00:57,210 --> 00:01:01,730
processor so that includes MIPS and RISC

00:00:59,550 --> 00:01:05,400
5 and a number of other architectures

00:01:01,730 --> 00:01:07,670
and we started a project in the Apache

00:01:05,400 --> 00:01:10,619
Software Foundation called Apache minut

00:01:07,670 --> 00:01:12,060
prior to working at run time I worked at

00:01:10,619 --> 00:01:14,670
a company called Silver Spring networks

00:01:12,060 --> 00:01:17,400
which did large-scale wireless mesh

00:01:14,670 --> 00:01:19,140
networking so we networked power meters

00:01:17,400 --> 00:01:21,390
and streetlights and distribution

00:01:19,140 --> 00:01:24,330
automation controllers and we developed

00:01:21,390 --> 00:01:27,240
a completely proprietary networking

00:01:24,330 --> 00:01:30,420
stack that was layer 1 through layer 7

00:01:27,240 --> 00:01:33,930
on what was originally a VR atmega

00:01:30,420 --> 00:01:36,600
processor so atmega 128 we fit an ipv6

00:01:33,930 --> 00:01:40,590
stack on there and then grew to be arm

00:01:36,600 --> 00:01:42,570
7s and eventually cortex-m and what we

00:01:40,590 --> 00:01:44,970
found is and kind of the background on

00:01:42,570 --> 00:01:47,490
Apache minut what we found was that

00:01:44,970 --> 00:01:50,009
every single company was building their

00:01:47,490 --> 00:01:52,140
own operating system and so we started

00:01:50,009 --> 00:01:55,259
Apache my new within the Apache Software

00:01:52,140 --> 00:01:56,670
Foundation to help address that since

00:01:55,259 --> 00:01:59,280
then we've also become members of the

00:01:56,670 --> 00:02:00,930
Zephyr project so we're civil matte

00:01:59,280 --> 00:02:02,549
silver members on Zephyr we're

00:02:00,930 --> 00:02:04,469
collaborating on El whip and a number of

00:02:02,549 --> 00:02:06,420
other open source projects so our vision

00:02:04,469 --> 00:02:08,280
and our goal in the space is really to

00:02:06,420 --> 00:02:12,060
get good quality open source software

00:02:08,280 --> 00:02:12,650
that companies can use and adopt but

00:02:12,060 --> 00:02:14,930
this

00:02:12,650 --> 00:02:17,650
so this talk is on the Bluetooth stack

00:02:14,930 --> 00:02:19,819
within the Apache minut operating system

00:02:17,650 --> 00:02:22,069
Apache minut is Apache Software

00:02:19,819 --> 00:02:24,349
Foundation project which means it's not

00:02:22,069 --> 00:02:26,090
run or controlled in any way by runtime

00:02:24,349 --> 00:02:28,579
but rather it's a community driven

00:02:26,090 --> 00:02:31,609
open-source project and the way that

00:02:28,579 --> 00:02:32,930
works is it's not corporation to control

00:02:31,609 --> 00:02:36,170
the direction of the project but it's

00:02:32,930 --> 00:02:38,480
individuals so it's the people who

00:02:36,170 --> 00:02:40,879
commit code who elect other committers

00:02:38,480 --> 00:02:42,200
and then the project itself is run

00:02:40,879 --> 00:02:46,489
within the Apache Software Foundation

00:02:42,200 --> 00:02:47,959
which is a 501 C 3 charity and so

00:02:46,489 --> 00:02:50,239
there's really no corporate control

00:02:47,959 --> 00:02:51,920
control is given to the individuals and

00:02:50,239 --> 00:02:53,780
we decided that this was the right place

00:02:51,920 --> 00:02:56,510
to develop an operating system effort

00:02:53,780 --> 00:02:57,680
because what we saw in too many cases is

00:02:56,510 --> 00:02:59,900
you'd either have something but like

00:02:57,680 --> 00:03:02,659
freearc talks which was owned by an

00:02:59,900 --> 00:03:04,849
individual company and license GPL or

00:03:02,659 --> 00:03:08,000
dual licensed which made it really hard

00:03:04,849 --> 00:03:09,590
to build a large ecosystem around it or

00:03:08,000 --> 00:03:12,530
you would have other projects that were

00:03:09,590 --> 00:03:14,750
just a little too GPL for the space so

00:03:12,530 --> 00:03:17,150
Riot would be an example of that where

00:03:14,750 --> 00:03:21,250
it was hard to adopt it into products

00:03:17,150 --> 00:03:23,299
because in the kind of sub Linux world

00:03:21,250 --> 00:03:25,430
everything gets linked into a shared

00:03:23,299 --> 00:03:28,669
binary so your application and your

00:03:25,430 --> 00:03:31,250
proprietary of software would have to be

00:03:28,669 --> 00:03:33,349
GPL if it relied on efforts in the space

00:03:31,250 --> 00:03:35,540
so Apache minut which started about a

00:03:33,349 --> 00:03:37,730
year and a half ago and the idea is a

00:03:35,540 --> 00:03:39,889
completely open-source operating system

00:03:37,730 --> 00:03:42,260
for these cortex-m different devices

00:03:39,889 --> 00:03:43,760
it's a real-time operating system but

00:03:42,260 --> 00:03:45,440
it's more than what you would think of

00:03:43,760 --> 00:03:47,599
as a traditional operating system which

00:03:45,440 --> 00:03:50,930
is just the core of the archives the

00:03:47,599 --> 00:03:54,049
idea is to give a Linux style effort for

00:03:50,930 --> 00:03:56,209
these cortex-m systems so it's a very

00:03:54,049 --> 00:03:58,220
base level there's a secure boot loader

00:03:56,209 --> 00:04:00,829
and flash file systems and flash access

00:03:58,220 --> 00:04:02,569
mechanisms there's a real-time OS and a

00:04:00,829 --> 00:04:04,310
hardware abstraction layer there's

00:04:02,569 --> 00:04:06,290
driver infrastructure and power

00:04:04,310 --> 00:04:09,260
management there's a whole bunch of

00:04:06,290 --> 00:04:11,180
debugging data there and then kind of

00:04:09,260 --> 00:04:13,220
most remain to this talk there's a

00:04:11,180 --> 00:04:15,859
completely open source Bluetooth stack

00:04:13,220 --> 00:04:18,500
in there called nimble and nimble is

00:04:15,859 --> 00:04:20,810
both an open source controller that

00:04:18,500 --> 00:04:21,900
works on the Nordic and r51 and the

00:04:20,810 --> 00:04:24,210
Nordic NRF 50

00:04:21,900 --> 00:04:28,199
you as well as a completely open-source

00:04:24,210 --> 00:04:30,690
Bluetooth host stack and that's built

00:04:28,199 --> 00:04:33,479
directly into the the operating system

00:04:30,690 --> 00:04:35,789
itself so this talk is primarily focused

00:04:33,479 --> 00:04:37,889
upon nimble but it's within the context

00:04:35,789 --> 00:04:39,630
of the Apache my new project which is

00:04:37,889 --> 00:04:42,419
really designed to basically have

00:04:39,630 --> 00:04:46,440
completely open source software for

00:04:42,419 --> 00:04:48,810
cortex-m style microcontrollers so why

00:04:46,440 --> 00:04:50,970
an open source Bluetooth stack this was

00:04:48,810 --> 00:04:53,729
actually the surprisingly what's the

00:04:50,970 --> 00:04:56,010
most common question we got when we

00:04:53,729 --> 00:04:57,419
started developing nimble and it was it

00:04:56,010 --> 00:04:58,830
was primarily asked to us by chip

00:04:57,419 --> 00:05:00,510
vendors but pretty much everybody in the

00:04:58,830 --> 00:05:03,150
space was like well you already have

00:05:00,510 --> 00:05:05,250
stacks from the various chip vendors

00:05:03,150 --> 00:05:08,340
themselves so Nordic has a soft device

00:05:05,250 --> 00:05:11,250
which is stable and tested and everybody

00:05:08,340 --> 00:05:14,010
uses so they wondered why an open source

00:05:11,250 --> 00:05:16,320
Bluetooth stack other vendors similarly

00:05:14,010 --> 00:05:18,270
buy stacks from companies like mine tree

00:05:16,320 --> 00:05:20,550
and they license those stacks with

00:05:18,270 --> 00:05:22,710
commercial support and so the big

00:05:20,550 --> 00:05:24,060
question we got was kind of why do your

00:05:22,710 --> 00:05:26,370
own stack when there's already a

00:05:24,060 --> 00:05:27,599
Bluetooth stack out there and there's

00:05:26,370 --> 00:05:30,990
kind of a couple of reasons that we

00:05:27,599 --> 00:05:32,910
thought of doing it one is in a lot of

00:05:30,990 --> 00:05:35,220
cases people who develop software for

00:05:32,910 --> 00:05:36,780
these cortex-m microcontrollers they

00:05:35,220 --> 00:05:39,090
don't actually have access to the source

00:05:36,780 --> 00:05:41,130
right so you're developing your

00:05:39,090 --> 00:05:43,590
Bluetooth application on a Nordic

00:05:41,130 --> 00:05:46,080
processor and you have no visibility

00:05:43,590 --> 00:05:47,820
into what's actually happening when you

00:05:46,080 --> 00:05:50,940
use the soft device you have no source

00:05:47,820 --> 00:05:53,310
code for it in addition to that we were

00:05:50,940 --> 00:05:55,320
working on a project it was a customer

00:05:53,310 --> 00:05:57,510
who was looking to use minut was looking

00:05:55,320 --> 00:05:58,830
to use in our toss and then we're trying

00:05:57,510 --> 00:06:02,070
to figure out what the problems were

00:05:58,830 --> 00:06:04,229
using the soft device and the CPU would

00:06:02,070 --> 00:06:07,050
just mysteriously disappear right

00:06:04,229 --> 00:06:09,750
because you have the Bluetooth stack is

00:06:07,050 --> 00:06:12,120
the highest priority thing running on

00:06:09,750 --> 00:06:13,710
that chip and so if you're running your

00:06:12,120 --> 00:06:16,620
real-time operating system or you're

00:06:13,710 --> 00:06:19,409
running your application suddenly you

00:06:16,620 --> 00:06:23,370
lose the CPU now is that causing a bug

00:06:19,409 --> 00:06:25,500
in your system maybe probably not but

00:06:23,370 --> 00:06:27,539
you're constantly wondering what's

00:06:25,500 --> 00:06:30,150
happening on the chip and that's really

00:06:27,539 --> 00:06:32,130
a artifact of the fact that if you look

00:06:30,150 --> 00:06:34,500
at kind of the early series of Nordic

00:06:32,130 --> 00:06:35,840
processors they were designed more as

00:06:34,500 --> 00:06:38,210
controllers or

00:06:35,840 --> 00:06:40,430
very simple application processors they

00:06:38,210 --> 00:06:43,190
weren't really designed to write complex

00:06:40,430 --> 00:06:46,220
applications on them so the NRF 51 has a

00:06:43,190 --> 00:06:49,730
cortex m0 microcontroller and 0 plus

00:06:46,220 --> 00:06:52,730
microcontroller on it and it has 128 K a

00:06:49,730 --> 00:06:55,070
flash and 16 K of RAM maybe you were

00:06:52,730 --> 00:06:57,320
blinking an LED or controlling a very

00:06:55,070 --> 00:07:00,020
simple motor but what you've seen over

00:06:57,320 --> 00:07:01,610
time is that as the the kind of the

00:07:00,020 --> 00:07:03,710
process sizes for these chips have gone

00:07:01,610 --> 00:07:06,080
down they've been able to bundle in more

00:07:03,710 --> 00:07:09,220
complex processors and more RAM and

00:07:06,080 --> 00:07:12,380
flash into the chip itself so the

00:07:09,220 --> 00:07:15,440
current generation of the NRF series has

00:07:12,380 --> 00:07:16,910
512 K a flash and 64 K of RAM which for

00:07:15,440 --> 00:07:19,160
the Linux people here is like nothing

00:07:16,910 --> 00:07:22,700
but for us is more than you could ever

00:07:19,160 --> 00:07:24,470
need and then if you look at Nordica

00:07:22,700 --> 00:07:27,710
next generation processor it's about a

00:07:24,470 --> 00:07:29,450
mega flash in 256 K of RAM and you're

00:07:27,710 --> 00:07:32,990
starting to see the chips in this space

00:07:29,450 --> 00:07:35,960
get to that kind of mega flash 256 K of

00:07:32,990 --> 00:07:37,520
RAM space and now you have a fairly

00:07:35,960 --> 00:07:39,560
complex application that you're

00:07:37,520 --> 00:07:41,600
developing within that footprint but you

00:07:39,560 --> 00:07:43,669
actually still have no access to the

00:07:41,600 --> 00:07:45,410
highest priority thing on the chip which

00:07:43,669 --> 00:07:47,060
is the Bluetooth stack that's running so

00:07:45,410 --> 00:07:48,350
it's very hard to debug these specs and

00:07:47,060 --> 00:07:51,050
that was one of the major reasons we

00:07:48,350 --> 00:07:53,090
decided to write an open source one but

00:07:51,050 --> 00:07:55,970
then it actually what we found is it

00:07:53,090 --> 00:07:58,220
also came became a real benefit to have

00:07:55,970 --> 00:07:59,810
a more flexible architecture right if

00:07:58,220 --> 00:08:01,340
you look at people who are developing

00:07:59,810 --> 00:08:04,250
these applications and you look at an

00:08:01,340 --> 00:08:05,930
example for the soft device the the

00:08:04,250 --> 00:08:08,030
challenge that people who are developing

00:08:05,930 --> 00:08:09,919
the soft advise have is because they're

00:08:08,030 --> 00:08:11,930
shipping you a precompiled binary

00:08:09,919 --> 00:08:14,570
without source code access they have to

00:08:11,930 --> 00:08:18,710
compile it for 90% of their users right

00:08:14,570 --> 00:08:20,240
so everybody who is using the Nordic

00:08:18,710 --> 00:08:22,490
platform or any of these platforms

00:08:20,240 --> 00:08:24,530
whether it be the cable ekw 41 z or

00:08:22,490 --> 00:08:26,300
another platform like that they have a

00:08:24,530 --> 00:08:28,280
support issue which is they need to

00:08:26,300 --> 00:08:30,620
compile a one binary that works for 90%

00:08:28,280 --> 00:08:33,050
of their users and so the 10% of their

00:08:30,620 --> 00:08:34,760
users that doesn't work for are kind of

00:08:33,050 --> 00:08:36,469
stranded and without luck and in

00:08:34,760 --> 00:08:38,620
addition it kind of restricts what you

00:08:36,469 --> 00:08:41,450
can do with the stack so as an example

00:08:38,620 --> 00:08:43,310
Bluetooth 42 is something that our

00:08:41,450 --> 00:08:45,920
customers sometimes want to run on area

00:08:43,310 --> 00:08:47,510
51 they want to be able to compile out

00:08:45,920 --> 00:08:49,280
certain features but add other features

00:08:47,510 --> 00:08:49,760
so they might want to run with data lane

00:08:49,280 --> 00:08:53,120
6 10

00:08:49,760 --> 00:08:54,710
but not with security if you have an

00:08:53,120 --> 00:08:56,690
open source pack and it's configurable

00:08:54,710 --> 00:08:58,820
it gives you the flexibility to choose

00:08:56,690 --> 00:09:00,530
what you want to put in there the other

00:08:58,820 --> 00:09:01,970
side of that so we can get really small

00:09:00,530 --> 00:09:03,920
and we'll show you some of the code size

00:09:01,970 --> 00:09:05,960
numbers that we've gotten on the NRF

00:09:03,920 --> 00:09:08,360
series but the converse of that is also

00:09:05,960 --> 00:09:10,460
performance so we support 32

00:09:08,360 --> 00:09:13,580
simultaneous connections in our

00:09:10,460 --> 00:09:15,140
Bluetooth stack and the reason that a

00:09:13,580 --> 00:09:16,610
lot of proprietary stacks don't support

00:09:15,140 --> 00:09:19,010
that is not because they don't have the

00:09:16,610 --> 00:09:20,840
CPU or processing or our ability to

00:09:19,010 --> 00:09:23,150
write that software but because it takes

00:09:20,840 --> 00:09:25,010
a lot of RAM so people who often do

00:09:23,150 --> 00:09:28,670
applications like real-time location

00:09:25,010 --> 00:09:30,170
services where you're a lock or a light

00:09:28,670 --> 00:09:31,460
where you want to track people or a lock

00:09:30,170 --> 00:09:33,800
where you want to see where people are

00:09:31,460 --> 00:09:35,840
it helps to have a lot of connections

00:09:33,800 --> 00:09:38,660
because you can constantly be connecting

00:09:35,840 --> 00:09:40,430
to people seeing how far they are and

00:09:38,660 --> 00:09:42,530
tracking them in a place before you

00:09:40,430 --> 00:09:44,390
decide to open a door so having that

00:09:42,530 --> 00:09:46,520
flexibility to either compile down to

00:09:44,390 --> 00:09:48,250
really really small software sizes where

00:09:46,520 --> 00:09:50,510
you don't want certain features or

00:09:48,250 --> 00:09:52,340
increase the RAM and increase the code

00:09:50,510 --> 00:09:57,050
for more complex use cases is another

00:09:52,340 --> 00:09:59,180
big reason and then finally it just ends

00:09:57,050 --> 00:10:01,400
up being a more efficient process when

00:09:59,180 --> 00:10:03,710
it's open right we can have a unified

00:10:01,400 --> 00:10:06,140
buffering scheme for example across IP

00:10:03,710 --> 00:10:08,360
if you today if you were to run an IP

00:10:06,140 --> 00:10:10,340
stack you know we'd have to be copies in

00:10:08,360 --> 00:10:13,070
and out of the Bluetooth stack itself

00:10:10,340 --> 00:10:14,750
whereas if you have it all open you can

00:10:13,070 --> 00:10:17,750
have a unified buffering scheme that you

00:10:14,750 --> 00:10:19,460
manage and you can have zero copy from

00:10:17,750 --> 00:10:21,950
the controller all the way through your

00:10:19,460 --> 00:10:24,530
application so it ends up being less

00:10:21,950 --> 00:10:26,000
wasteful and then the last thing and

00:10:24,530 --> 00:10:28,760
this is one that's starting to become

00:10:26,000 --> 00:10:30,920
more of a big deal now that we're

00:10:28,760 --> 00:10:32,990
starting to add more platform support is

00:10:30,920 --> 00:10:35,240
that you can migrate your application

00:10:32,990 --> 00:10:37,940
across processors without having to

00:10:35,240 --> 00:10:40,610
retest and recertify the entire thing so

00:10:37,940 --> 00:10:43,070
today if you're using a Bluetooth chip

00:10:40,610 --> 00:10:47,000
from Nordic and you want to eventually

00:10:43,070 --> 00:10:48,470
switch to NX Pease chip for example you

00:10:47,000 --> 00:10:50,870
would have to use a completely different

00:10:48,470 --> 00:10:52,370
Bluetooth spec on an XP then you would

00:10:50,870 --> 00:10:55,220
use on Nordic and you would have to

00:10:52,370 --> 00:10:57,250
completely retest your application when

00:10:55,220 --> 00:11:00,200
you make the switch between chipsets if

00:10:57,250 --> 00:11:02,160
there are bugs that you've worked around

00:11:00,200 --> 00:11:04,019
on the Nordic

00:11:02,160 --> 00:11:06,690
you would have to work around different

00:11:04,019 --> 00:11:08,670
bugs on the nxp chip and so it becomes

00:11:06,690 --> 00:11:10,949
very hard to switch between chipsets and

00:11:08,670 --> 00:11:14,459
choose the right chipset for you based

00:11:10,949 --> 00:11:16,560
upon power performance and price and so

00:11:14,459 --> 00:11:18,810
by having a open-source Bluetooth stack

00:11:16,560 --> 00:11:21,360
that works across platforms it allows

00:11:18,810 --> 00:11:23,519
you to migrate between chipsets without

00:11:21,360 --> 00:11:26,490
having a massive software porting effort

00:11:23,519 --> 00:11:28,860
so that's one of the reasons so some of

00:11:26,490 --> 00:11:31,560
the highlights of nimble so it's a fully

00:11:28,860 --> 00:11:34,560
bluetooth for two of compliant we as

00:11:31,560 --> 00:11:36,959
runtime show up and unplug fast we test

00:11:34,560 --> 00:11:40,230
with all of the other vendors we've run

00:11:36,959 --> 00:11:42,870
pts across the entire host and it passes

00:11:40,230 --> 00:11:44,100
all of the pts Suites in the next month

00:11:42,870 --> 00:11:46,980
or two where we'll be going for

00:11:44,100 --> 00:11:49,589
certification on the stack but it fully

00:11:46,980 --> 00:11:51,930
complies with with pts it has a

00:11:49,589 --> 00:11:54,149
constrained footprint so will will give

00:11:51,930 --> 00:11:57,149
you a bit more of the sizing numbers but

00:11:54,149 --> 00:11:59,220
on the NRF 51 we're able to fit the

00:11:57,149 --> 00:12:02,339
entire Bluetooth stack into about 80 K

00:11:59,220 --> 00:12:06,060
of code as a comparison the Nordics pack

00:12:02,339 --> 00:12:09,209
is 108 KF code so it gives you a

00:12:06,060 --> 00:12:10,290
significant amount of code back it's

00:12:09,209 --> 00:12:12,959
high performance

00:12:10,290 --> 00:12:17,220
so when it comes to throughput numbers

00:12:12,959 --> 00:12:19,829
and throughput were 5 5 X faster than

00:12:17,220 --> 00:12:21,540
Nordic in some cases in addition to that

00:12:19,829 --> 00:12:23,699
we support about 10x the number of

00:12:21,540 --> 00:12:26,310
connections from the Bluetooth you have

00:12:23,699 --> 00:12:28,470
all the source as I mentioned we support

00:12:26,310 --> 00:12:31,259
low-power operation mode so it ties

00:12:28,470 --> 00:12:34,019
within the within our mining art Tufts

00:12:31,259 --> 00:12:35,970
has the concept of a low-power mode and

00:12:34,019 --> 00:12:37,800
system States the Bluetooth stack

00:12:35,970 --> 00:12:39,569
actually ties into those system States

00:12:37,800 --> 00:12:41,339
and there's now been a little bit more

00:12:39,569 --> 00:12:43,079
work to actually leverage low-power

00:12:41,339 --> 00:12:46,559
timers on the Nordic chip and things

00:12:43,079 --> 00:12:48,809
like that it's configurable there's lots

00:12:46,559 --> 00:12:50,670
of different options that we've added to

00:12:48,809 --> 00:12:52,230
the stack that are all changeable

00:12:50,670 --> 00:12:54,120
through our system configuration

00:12:52,230 --> 00:12:54,750
interface and then finally it's

00:12:54,120 --> 00:12:57,000
debuggable

00:12:54,750 --> 00:12:59,430
and by debuggable a you have the source

00:12:57,000 --> 00:13:01,740
which is really the ultimate in terms of

00:12:59,430 --> 00:13:04,829
being able to debug things but also a

00:13:01,740 --> 00:13:06,360
large part of my new is a large part of

00:13:04,829 --> 00:13:08,910
the effort that we've put into my new is

00:13:06,360 --> 00:13:10,829
to make things very easy when you have a

00:13:08,910 --> 00:13:12,480
device in the field to understand what's

00:13:10,829 --> 00:13:14,050
going on and that was our based on our

00:13:12,480 --> 00:13:17,769
experience at Silver Spring where we had

00:13:14,050 --> 00:13:19,930
managed 2223 million devices so

00:13:17,769 --> 00:13:22,149
everything in our in minut has a unified

00:13:19,930 --> 00:13:23,500
logging infrastructure that can go out

00:13:22,149 --> 00:13:26,140
to the console when you're debugging

00:13:23,500 --> 00:13:27,880
things but that you can either write to

00:13:26,140 --> 00:13:30,220
multiple flash buffers or multiple RAM

00:13:27,880 --> 00:13:32,140
buffers when you go to production you

00:13:30,220 --> 00:13:34,750
can control what gets logged on a module

00:13:32,140 --> 00:13:36,790
basis around a level basis and all of

00:13:34,750 --> 00:13:38,410
that is remotely accessible either you

00:13:36,790 --> 00:13:40,600
can pull that back over Bluetooth or any

00:13:38,410 --> 00:13:43,089
of the transports we support there are

00:13:40,600 --> 00:13:45,240
also extensive statistics that we keep

00:13:43,089 --> 00:13:47,649
on the operation of a system and we

00:13:45,240 --> 00:13:49,779
support core dumps within my new so when

00:13:47,649 --> 00:13:51,760
things crash we actually write those to

00:13:49,779 --> 00:13:53,680
flash and you can pull those back which

00:13:51,760 --> 00:13:56,230
are not things that you have with any of

00:13:53,680 --> 00:13:57,910
the existing proprietary stacks so

00:13:56,230 --> 00:13:59,800
there's really been a lot of effort put

00:13:57,910 --> 00:14:02,320
into making the minut stack very easy to

00:13:59,800 --> 00:14:03,820
debug and easy to debug remotely you

00:14:02,320 --> 00:14:06,760
know one of the biggest things we hear

00:14:03,820 --> 00:14:09,519
from customers is I'm out in the field

00:14:06,760 --> 00:14:11,589
and certain Android doesn't seem to work

00:14:09,519 --> 00:14:14,170
with us or even worse than that in a lot

00:14:11,589 --> 00:14:16,300
of cases it's not just Android but it's

00:14:14,170 --> 00:14:18,850
a specific version of Android that's

00:14:16,300 --> 00:14:20,110
tied to a specific controller right so

00:14:18,850 --> 00:14:22,300
how do you understand what type of

00:14:20,110 --> 00:14:23,740
devices you're interacting with what

00:14:22,300 --> 00:14:24,970
type of errors you're seeing in the

00:14:23,740 --> 00:14:26,890
field and how do you bring that back

00:14:24,970 --> 00:14:29,290
remotely a lot of that effort has been

00:14:26,890 --> 00:14:32,980
put into nimble so I'm going to let will

00:14:29,290 --> 00:14:34,660
get up here will has been built the

00:14:32,980 --> 00:14:36,310
controller for our Bluetooth stack and

00:14:34,660 --> 00:14:37,899
has been one of the core developers of

00:14:36,310 --> 00:14:40,630
the Bluetooth spec he's going to talk a

00:14:37,899 --> 00:14:42,190
little bit more about the the layout of

00:14:40,630 --> 00:14:44,410
the stack the source code layout and

00:14:42,190 --> 00:14:52,630
give you some examples on the details of

00:14:44,410 --> 00:14:54,190
it so I'll hand it off to will you'll

00:14:52,630 --> 00:14:55,839
have to excuse me a bit I think my voice

00:14:54,190 --> 00:15:00,160
is a bit out from talking at the booth a

00:14:55,839 --> 00:15:01,720
lot so skip over to the next side so a

00:15:00,160 --> 00:15:03,880
little background on myself my name is

00:15:01,720 --> 00:15:05,829
will so I've worked with sterling at

00:15:03,880 --> 00:15:08,740
Silver Spring networks and before that

00:15:05,829 --> 00:15:09,790
at the company called Metro comm we did

00:15:08,740 --> 00:15:11,980
sort of like the ricochet

00:15:09,790 --> 00:15:14,800
wireless data network so I pretty much

00:15:11,980 --> 00:15:16,269
spent most of all my time doing Wireless

00:15:14,800 --> 00:15:19,000
frequency hopping back protocols and

00:15:16,269 --> 00:15:21,490
bedded firmware so the Bluetooth stack

00:15:19,000 --> 00:15:24,790
was a good fit

00:15:21,490 --> 00:15:26,769
so what we are not showing a lot of

00:15:24,790 --> 00:15:28,569
we're talking about here is the package

00:15:26,769 --> 00:15:31,389
is a tool called youth that allows you

00:15:28,569 --> 00:15:34,540
to you know see a lot of configuration

00:15:31,389 --> 00:15:36,699
options that you choose choose what

00:15:34,540 --> 00:15:38,860
build packages you want you know for

00:15:36,699 --> 00:15:40,449
your application well we'll talk a

00:15:38,860 --> 00:15:42,759
little bit about some of the sample apps

00:15:40,449 --> 00:15:46,629
that we have that do some things that

00:15:42,759 --> 00:15:49,980
folks can use to use as examples to do

00:15:46,629 --> 00:15:52,929
their own application so the basic

00:15:49,980 --> 00:15:54,489
layout of there and if you go you know

00:15:52,929 --> 00:15:57,069
to the source code and download it you

00:15:54,489 --> 00:15:59,470
can see the directory structure we build

00:15:57,069 --> 00:16:02,049
a host only controller only and a

00:15:59,470 --> 00:16:04,179
combined controller host the way you

00:16:02,049 --> 00:16:07,389
sort of you know glue the two together

00:16:04,179 --> 00:16:10,059
or the transport layer and the UART some

00:16:07,389 --> 00:16:13,540
HCI transport layer and the RAM one is

00:16:10,059 --> 00:16:17,529
you know the combined host controller

00:16:13,540 --> 00:16:19,600
transport layer and yeah so the codes

00:16:17,529 --> 00:16:21,910
located if you go it's all in a network

00:16:19,600 --> 00:16:23,739
directory to go to nibble host you'll

00:16:21,910 --> 00:16:26,139
find the host source code we have

00:16:23,739 --> 00:16:28,209
services separated out in a underlying

00:16:26,139 --> 00:16:30,610
directory under there and these are all

00:16:28,209 --> 00:16:32,559
packages which is you know a good thing

00:16:30,610 --> 00:16:35,799
so you know let's say you don't want to

00:16:32,559 --> 00:16:37,949
do uh it's good there too that was going

00:16:35,799 --> 00:16:37,949
to happen

00:16:38,610 --> 00:16:44,709
let's go fullscreen I don't know oh yes

00:16:42,189 --> 00:16:46,149
good okay good so you can choose what

00:16:44,709 --> 00:16:47,290
packages you want in the build like

00:16:46,149 --> 00:16:49,540
sterling said it's highly configurable

00:16:47,290 --> 00:16:51,490
so if you want certain services you can

00:16:49,540 --> 00:16:54,639
bring them in if you don't you don't

00:16:51,490 --> 00:16:57,279
have to include them go to the next

00:16:54,639 --> 00:16:59,619
slide yeah so what we're showing here is

00:16:57,279 --> 00:17:01,689
sort of a sample configuration file

00:16:59,619 --> 00:17:04,149
these are all in these files called

00:17:01,689 --> 00:17:06,159
msconfig gamma files and they're

00:17:04,149 --> 00:17:08,649
packaged based so when you go to a

00:17:06,159 --> 00:17:10,329
certain package and you'll see there's

00:17:08,649 --> 00:17:13,959
like a package amo file which describes

00:17:10,329 --> 00:17:16,630
things about the package you'll see this

00:17:13,959 --> 00:17:17,980
file in in the directory as well and you

00:17:16,630 --> 00:17:20,230
go in there and it's text-based it's

00:17:17,980 --> 00:17:22,569
pretty easy to go in there and modify

00:17:20,230 --> 00:17:24,899
and you know see what configuration

00:17:22,569 --> 00:17:27,819
options that you want to include and

00:17:24,899 --> 00:17:30,279
obviously these are all for saving code

00:17:27,819 --> 00:17:32,020
in RAM and you know if you only want

00:17:30,279 --> 00:17:33,340
your device to be a peripheral you

00:17:32,020 --> 00:17:34,419
choose peripheral if you don't want it

00:17:33,340 --> 00:17:37,059
to you know if you want to be a central

00:17:34,419 --> 00:17:39,340
and peripheral you would you know define

00:17:37,059 --> 00:17:43,420
both and that code gets included

00:17:39,340 --> 00:17:45,640
and it's a the package management tool

00:17:43,420 --> 00:17:49,000
also allows you to pretty easily view

00:17:45,640 --> 00:17:51,940
the configuration settings for your for

00:17:49,000 --> 00:17:54,190
your build you know I don't have any

00:17:51,940 --> 00:17:55,870
examples of that but you know it's a

00:17:54,190 --> 00:17:58,210
simple command line you know tool that

00:17:55,870 --> 00:18:00,430
you can use to you know display all it's

00:17:58,210 --> 00:18:01,900
pretty very easy to use and after using

00:18:00,430 --> 00:18:03,070
make files for most of my life so you

00:18:01,900 --> 00:18:04,750
know this package management tool is

00:18:03,070 --> 00:18:09,220
actually really cool I like it much

00:18:04,750 --> 00:18:10,990
better and I guess yeah so you know some

00:18:09,220 --> 00:18:13,420
of the options here you know if you only

00:18:10,990 --> 00:18:15,310
want a connection you can choose one you

00:18:13,420 --> 00:18:18,760
know I showed 16 here but you can go up

00:18:15,310 --> 00:18:20,290
to pretty much it's configurable so if

00:18:18,760 --> 00:18:23,410
you have a lot of RAM you can go to more

00:18:20,290 --> 00:18:26,950
than 32 so you just have to set it up

00:18:23,410 --> 00:18:28,510
and true or failure and yeah in multiple

00:18:26,950 --> 00:18:30,610
roles can be supported simultaneously

00:18:28,510 --> 00:18:32,410
we'll go a little bit more into that but

00:18:30,610 --> 00:18:34,810
you know you can be you know a central

00:18:32,410 --> 00:18:36,520
and a peripheral you know at the same

00:18:34,810 --> 00:18:43,120
time and have multiple connections for

00:18:36,520 --> 00:18:47,650
each type so this is a little bit about

00:18:43,120 --> 00:18:51,190
the code size for various features in

00:18:47,650 --> 00:18:52,600
the NOS so the bootloader is the

00:18:51,190 --> 00:18:54,790
scenario the secure boot loader which is

00:18:52,600 --> 00:18:58,990
around 12 k and these are pretty much

00:18:54,790 --> 00:19:00,130
based on the nordic platform you know

00:18:58,990 --> 00:19:03,070
you don't get too much different with

00:19:00,130 --> 00:19:06,400
others the core are toss is really small

00:19:03,070 --> 00:19:09,190
it's about 7k bytes so the controller

00:19:06,400 --> 00:19:11,500
base is around 20 and if you were to go

00:19:09,190 --> 00:19:13,690
to the controller package and look at

00:19:11,500 --> 00:19:15,670
the configuration options you can choose

00:19:13,690 --> 00:19:17,500
things you know if you look at 4.2

00:19:15,670 --> 00:19:18,850
features you know let's say you you

00:19:17,500 --> 00:19:20,680
don't want data length extension you

00:19:18,850 --> 00:19:21,490
would take that out and your code base

00:19:20,680 --> 00:19:23,740
will get smaller

00:19:21,490 --> 00:19:25,840
there's encryption privacy all the

00:19:23,740 --> 00:19:28,000
features are separately configurable

00:19:25,840 --> 00:19:31,000
through this this file and you can

00:19:28,000 --> 00:19:32,470
decide which ones you want we definitely

00:19:31,000 --> 00:19:34,480
still have a little bit more work to

00:19:32,470 --> 00:19:35,440
make it a little bit better you know if

00:19:34,480 --> 00:19:37,360
you were to choose central and

00:19:35,440 --> 00:19:39,610
peripheral you know not everything gets

00:19:37,360 --> 00:19:40,960
compiled out and you know we're going to

00:19:39,610 --> 00:19:43,560
be working a little bit more on that so

00:19:40,960 --> 00:19:47,240
we'll be able to better these numbers in

00:19:43,560 --> 00:19:50,490
and not far too far distant future the

00:19:47,240 --> 00:19:52,290
host base is not that much more actually

00:19:50,490 --> 00:19:54,290
as the host can get quite large like

00:19:52,290 --> 00:19:56,460
when we say the complete host that come

00:19:54,290 --> 00:20:00,750
contains a whole bunch of debugging

00:19:56,460 --> 00:20:02,580
statistics logging a lot of extra code

00:20:00,750 --> 00:20:05,100
to make it sort of like really easily

00:20:02,580 --> 00:20:07,230
testable and we'll talk a little bit

00:20:05,100 --> 00:20:10,710
about the application that we have for

00:20:07,230 --> 00:20:12,360
that so it's a pts testing was done with

00:20:10,710 --> 00:20:14,700
this assets of nice little command-line

00:20:12,360 --> 00:20:18,600
tool you can do quite a bunch of the

00:20:14,700 --> 00:20:20,190
Bluetooth stuff with and you know I

00:20:18,600 --> 00:20:21,600
think what it all adds up you can fit

00:20:20,190 --> 00:20:23,040
this for anywhere like sterling said you

00:20:21,600 --> 00:20:26,100
know even you know seventy to hundred

00:20:23,040 --> 00:20:27,930
and you know thirty hundred forty K so

00:20:26,100 --> 00:20:29,700
for most processors these days that's

00:20:27,930 --> 00:20:32,610
good for some of the smaller ones it's a

00:20:29,700 --> 00:20:34,410
little bit tricky but a lot of times

00:20:32,610 --> 00:20:37,320
it's Ram that's uh you know where you

00:20:34,410 --> 00:20:38,550
really have to optimize for and we still

00:20:37,320 --> 00:20:40,770
have a little bit of work I'd say to do

00:20:38,550 --> 00:20:42,210
because you know optimize it the

00:20:40,770 --> 00:20:43,980
connections for you know if you're doing

00:20:42,210 --> 00:20:45,390
just Central's or peripherals but you

00:20:43,980 --> 00:20:49,910
know we feel pretty good about the total

00:20:45,390 --> 00:20:49,910
RAM usage you know for the stack so

00:20:52,070 --> 00:20:57,330
supported platform so the host can run

00:20:55,530 --> 00:20:59,850
on a number of the different processors

00:20:57,330 --> 00:21:01,770
that you know we support you know we

00:20:59,850 --> 00:21:03,720
plan to add a lot more processor support

00:21:01,770 --> 00:21:04,950
you know as we go along and you know

00:21:03,720 --> 00:21:07,440
hopefully that's why we also have a

00:21:04,950 --> 00:21:09,690
community and you know anybody who wants

00:21:07,440 --> 00:21:12,300
to add processor support you know be

00:21:09,690 --> 00:21:15,930
great you know a lot of people you know

00:21:12,300 --> 00:21:18,300
contributing to the project and what we

00:21:15,930 --> 00:21:21,420
have and you know a few of them like

00:21:18,300 --> 00:21:23,160
some of the major ones and you know an

00:21:21,420 --> 00:21:25,410
upcoming one is going to be some of the

00:21:23,160 --> 00:21:27,840
NXP chips which we're going to port the

00:21:25,410 --> 00:21:29,790
controller to and the host pretty much

00:21:27,840 --> 00:21:33,360
reports it's you know that's you know

00:21:29,790 --> 00:21:34,740
pretty non platform-specific code and

00:21:33,360 --> 00:21:37,920
yes so we have mentioned here for the

00:21:34,740 --> 00:21:38,910
controller it's the NRF 51 and 52 we've

00:21:37,920 --> 00:21:42,180
also been playing around with their new

00:21:38,910 --> 00:21:44,040
chip 250 to 840 you know so we have to

00:21:42,180 --> 00:21:45,210
stuff basically up and running there but

00:21:44,040 --> 00:21:47,220
there's a number of features that

00:21:45,210 --> 00:21:52,490
processor that will start adding to as

00:21:47,220 --> 00:21:55,600
we go along and the annex dkw 41 z is a

00:21:52,490 --> 00:21:58,990
work in progress and we

00:21:55,600 --> 00:22:01,360
plan to add more time goes on but we'll

00:21:58,990 --> 00:22:03,160
see which ones get this and again you

00:22:01,360 --> 00:22:04,539
know people who want to add sup the

00:22:03,160 --> 00:22:11,650
community we're totally psyched about

00:22:04,539 --> 00:22:13,740
that so so this is a little bit more

00:22:11,650 --> 00:22:16,750
about the controller specifics and cells

00:22:13,740 --> 00:22:18,160
so this is a you know most of my effort

00:22:16,750 --> 00:22:21,880
in the project has been doing the

00:22:18,160 --> 00:22:24,250
controller and so we have like I said as

00:22:21,880 --> 00:22:26,950
a the only HCI interface we have

00:22:24,250 --> 00:22:29,110
currently is the UART one we plan to add

00:22:26,950 --> 00:22:32,610
some USB support upcoming so there'll be

00:22:29,110 --> 00:22:34,690
a you a USB based one fairly soon and

00:22:32,610 --> 00:22:38,140
you could also want to combine with the

00:22:34,690 --> 00:22:39,640
nibble host it supports all the 4.2

00:22:38,140 --> 00:22:44,020
features I mean I don't think there's

00:22:39,640 --> 00:22:46,270
anything that's not there and if you

00:22:44,020 --> 00:22:47,470
want to go a little bit more into you

00:22:46,270 --> 00:22:49,390
know how the code is sort of laid out

00:22:47,470 --> 00:22:51,010
and what we've done so you know

00:22:49,390 --> 00:22:52,980
basically have you know the basis of

00:22:51,010 --> 00:22:55,390
minor deserves there are toss

00:22:52,980 --> 00:22:57,909
multitasking pre-emptive you know task

00:22:55,390 --> 00:23:00,820
based you know you get to you know write

00:22:57,909 --> 00:23:02,080
your own tasks choose priorities you

00:23:00,820 --> 00:23:04,090
know generally we want the link layer

00:23:02,080 --> 00:23:07,090
tasks to be the highest priority you

00:23:04,090 --> 00:23:09,700
could not do that but yeah I don't

00:23:07,090 --> 00:23:13,000
suggest that but done but it gives you

00:23:09,700 --> 00:23:15,250
the option to do that I'm sort of the

00:23:13,000 --> 00:23:17,500
host and application use a task and the

00:23:15,250 --> 00:23:19,809
link layer uses a task so in its

00:23:17,500 --> 00:23:21,850
smallest form there's really only two

00:23:19,809 --> 00:23:23,409
tasks in the system and you know for

00:23:21,850 --> 00:23:25,630
those of you to do their stuff you know

00:23:23,409 --> 00:23:28,710
that stack test X you know can take

00:23:25,630 --> 00:23:30,610
quite a bit of RAM so you know you don't

00:23:28,710 --> 00:23:32,409
you know it's up to you you can have

00:23:30,610 --> 00:23:34,140
other application tests doing things

00:23:32,409 --> 00:23:36,970
that that's what you want but we try to

00:23:34,140 --> 00:23:39,220
really you know make it so that you know

00:23:36,970 --> 00:23:43,360
in its very basic form we're only using

00:23:39,220 --> 00:23:44,830
a couple of these OS tasks as far as the

00:23:43,360 --> 00:23:47,020
state machines go

00:23:44,830 --> 00:23:48,940
we do have multi advertising so you can

00:23:47,020 --> 00:23:50,169
there's a configuration option you can

00:23:48,940 --> 00:23:51,760
choose that many advertising state

00:23:50,169 --> 00:23:54,220
machines that you want

00:23:51,760 --> 00:23:57,309
there's only currently one scanning or

00:23:54,220 --> 00:24:00,850
initiating state machine we may add to

00:23:57,309 --> 00:24:02,980
that con goes on and you know certainly

00:24:00,850 --> 00:24:06,700
we have you know multiple simultaneous

00:24:02,980 --> 00:24:08,650
connections so you can configure the

00:24:06,700 --> 00:24:10,670
device to

00:24:08,650 --> 00:24:13,100
sort of try to tune it for your

00:24:10,670 --> 00:24:14,900
application you know you want something

00:24:13,100 --> 00:24:16,790
that does a lot of connections very

00:24:14,900 --> 00:24:18,740
quickly and not a lot of data do you

00:24:16,790 --> 00:24:20,540
want to just run one or two connections

00:24:18,740 --> 00:24:21,530
and you want to push a lot of throughput

00:24:20,540 --> 00:24:24,110
through them

00:24:21,530 --> 00:24:26,570
the scheduler sort of configurable in a

00:24:24,110 --> 00:24:28,220
way and how you sort of allocate the

00:24:26,570 --> 00:24:30,110
base amount of time it gets scheduled

00:24:28,220 --> 00:24:32,720
for connections and what you're trying

00:24:30,110 --> 00:24:34,580
to do is you know try to determine like

00:24:32,720 --> 00:24:36,590
how many connections I think I want how

00:24:34,580 --> 00:24:38,510
much time to and allocate them and you

00:24:36,590 --> 00:24:40,820
configure the system and hopefully it'll

00:24:38,510 --> 00:24:44,600
sort of optimize for for your scenario

00:24:40,820 --> 00:24:47,060
and it's a the scheduler does sort of

00:24:44,600 --> 00:24:50,180
use this loose time slot based approach

00:24:47,060 --> 00:24:52,070
it's not there's not fixed time slots so

00:24:50,180 --> 00:24:54,920
let's say advertising scanning

00:24:52,070 --> 00:24:56,150
connections and there's a reason why we

00:24:54,920 --> 00:24:58,610
went about doing X we thinks is a little

00:24:56,150 --> 00:25:00,980
bit more flexible you know you can have

00:24:58,610 --> 00:25:02,270
overlapping connection events because

00:25:00,980 --> 00:25:03,410
sometimes you know you really if you're

00:25:02,270 --> 00:25:06,590
the peripheral you don't really get to

00:25:03,410 --> 00:25:08,420
decide you know when you're going to be

00:25:06,590 --> 00:25:10,250
scheduled for connection event so in

00:25:08,420 --> 00:25:12,530
that case what it'll do is it'll use a

00:25:10,250 --> 00:25:13,880
least recently used approach and it'll

00:25:12,530 --> 00:25:16,340
just you know round-robin the

00:25:13,880 --> 00:25:17,630
connections and hopefully pick the one

00:25:16,340 --> 00:25:22,700
that's not going to time out on your

00:25:17,630 --> 00:25:25,250
supervision timeout sooner and it also

00:25:22,700 --> 00:25:27,710
uses a sort of we took a sort of

00:25:25,250 --> 00:25:29,480
priority approach to it and you know and

00:25:27,710 --> 00:25:30,800
if any you know this is something that

00:25:29,480 --> 00:25:33,920
you wanted to change you could go in and

00:25:30,800 --> 00:25:35,810
change it but connections take priority

00:25:33,920 --> 00:25:40,370
over advertising events and over

00:25:35,810 --> 00:25:42,020
scanning event and so you know what

00:25:40,370 --> 00:25:44,030
obviously the schedule tries to do is

00:25:42,020 --> 00:25:46,190
tries to put advertising events where

00:25:44,030 --> 00:25:47,810
connection events or not and tries to

00:25:46,190 --> 00:25:49,940
move connection events so that you know

00:25:47,810 --> 00:25:51,380
if you're trying to do many of these you

00:25:49,940 --> 00:25:53,810
know it tries to schedule them all in

00:25:51,380 --> 00:25:55,760
such a way that all can work and if they

00:25:53,810 --> 00:25:57,140
can't you know one takes priority and

00:25:55,760 --> 00:25:59,570
you know the one just gets round-robin

00:25:57,140 --> 00:26:02,210
in later

00:25:59,570 --> 00:26:05,300
I think I covered most of that stuff

00:26:02,210 --> 00:26:09,050
there so now we're going to move on to

00:26:05,300 --> 00:26:10,850
the host so like I had said before the

00:26:09,050 --> 00:26:12,710
host an application share task and you

00:26:10,850 --> 00:26:15,110
can split these up into many caches you

00:26:12,710 --> 00:26:16,760
want generally most applications but I

00:26:15,110 --> 00:26:19,460
don't need their own tests to run it but

00:26:16,760 --> 00:26:23,030
if they do you know you can do that

00:26:19,460 --> 00:26:24,920
and if you went in so we don't have an

00:26:23,030 --> 00:26:26,840
example of this but it's a pretty simple

00:26:24,920 --> 00:26:29,030
approach basically the host uses this

00:26:26,840 --> 00:26:31,490
table based approach to define services

00:26:29,030 --> 00:26:33,200
and if you look at the service table

00:26:31,490 --> 00:26:34,580
what you'll see is there's an easy way

00:26:33,200 --> 00:26:36,980
to define characteristics and

00:26:34,580 --> 00:26:39,200
descriptors you have a user-defined

00:26:36,980 --> 00:26:40,820
callback if you want for every single

00:26:39,200 --> 00:26:42,170
you know each characteristic descriptor

00:26:40,820 --> 00:26:43,970
your service can have its own individual

00:26:42,170 --> 00:26:46,670
callbacks you can wrap them all into one

00:26:43,970 --> 00:26:49,340
deal with them that way so you have a

00:26:46,670 --> 00:26:51,560
lot of flexibility there

00:26:49,340 --> 00:26:53,150
and now GAAP procedures are there's a

00:26:51,560 --> 00:26:54,800
set of API to do most of the GAAP

00:26:53,150 --> 00:26:56,690
procedures and I think this is common

00:26:54,800 --> 00:26:59,450
for most blue to Stax you know we just

00:26:56,690 --> 00:27:01,580
show the set and you can see a couple of

00:26:59,450 --> 00:27:03,620
the examples there and again with most

00:27:01,580 --> 00:27:06,260
of these you have callbacks that you can

00:27:03,620 --> 00:27:08,750
you know your application can do what

00:27:06,260 --> 00:27:10,670
you want to if you sort of look and it's

00:27:08,750 --> 00:27:13,280
pretty easy to see does a d-league app

00:27:10,670 --> 00:27:14,630
event function callback an argument we

00:27:13,280 --> 00:27:19,280
have a set of defined events for these

00:27:14,630 --> 00:27:20,450
things so you register your function the

00:27:19,280 --> 00:27:23,000
function gets called with the various

00:27:20,450 --> 00:27:25,400
events and context you know for the

00:27:23,000 --> 00:27:27,410
attributes and the services and you

00:27:25,400 --> 00:27:29,120
write your code to you know based on

00:27:27,410 --> 00:27:31,310
what you want to do for the reason

00:27:29,120 --> 00:27:32,660
lights for that it's pretty simple and

00:27:31,310 --> 00:27:34,520
if you look at the examples we do have a

00:27:32,660 --> 00:27:36,170
fair amount of examples to go through so

00:27:34,520 --> 00:27:38,630
you can look at the code see the

00:27:36,170 --> 00:27:40,430
examples and it should be really pretty

00:27:38,630 --> 00:27:42,860
quick to get a application up and

00:27:40,430 --> 00:27:48,920
running if you're familiar with the with

00:27:42,860 --> 00:27:50,690
the spec so I guess yeah and you know we

00:27:48,920 --> 00:27:52,550
support most of the features you know

00:27:50,690 --> 00:27:56,200
bearing bonding and we have persistence

00:27:52,550 --> 00:27:59,260
of the information so that you can bond

00:27:56,200 --> 00:28:00,920
and you can always go to the

00:27:59,260 --> 00:28:03,410
documentation is a fair amount of

00:28:00,920 --> 00:28:05,360
documentation on the API and you can

00:28:03,410 --> 00:28:11,660
look and describe it it's pretty easy to

00:28:05,360 --> 00:28:13,510
use so so yeah we have documentation you

00:28:11,660 --> 00:28:16,310
can go check that out on the website and

00:28:13,510 --> 00:28:18,410
you know we have a community in the

00:28:16,310 --> 00:28:20,990
Apache minut community and we're you

00:28:18,410 --> 00:28:22,850
know people are I would say extremely

00:28:20,990 --> 00:28:24,410
responsive this is my first open-source

00:28:22,850 --> 00:28:26,450
project so I don't have a lot of

00:28:24,410 --> 00:28:28,190
familiarity with these things but you

00:28:26,450 --> 00:28:30,020
know there's really good support you can

00:28:28,190 --> 00:28:32,840
go there and ask questions it's usually

00:28:30,020 --> 00:28:35,299
answered pretty quickly and thoroughly

00:28:32,840 --> 00:28:37,490
um you know we love committers we love

00:28:35,299 --> 00:28:39,799
people you know contributing to the

00:28:37,490 --> 00:28:42,440
project so you know it's definitely

00:28:39,799 --> 00:28:44,510
something we're looking for and you can

00:28:42,440 --> 00:28:46,309
also contact run-time about consulting

00:28:44,510 --> 00:28:48,830
and commercial support for the OS and

00:28:46,309 --> 00:28:51,710
the stack so you know we're available

00:28:48,830 --> 00:28:54,620
for that and then you know if you go

00:28:51,710 --> 00:28:56,419
into the apps directory a feed is pretty

00:28:54,620 --> 00:29:00,230
easy to see you'll go through the tree

00:28:56,419 --> 00:29:03,080
and we have a sort of basic set of apps

00:29:00,230 --> 00:29:05,000
you know ble perf is a peripheral so it

00:29:03,080 --> 00:29:08,090
shows how to stand up a peripheral and

00:29:05,000 --> 00:29:10,700
do some basic services with it

00:29:08,090 --> 00:29:13,460
ble tiny is now somewhat of a misnomer

00:29:10,700 --> 00:29:15,110
it's not so tiny but it's um it's sort

00:29:13,460 --> 00:29:17,570
of like a really good for a command-line

00:29:15,110 --> 00:29:19,010
test tool to test all aspects of the

00:29:17,570 --> 00:29:20,960
Bluetooth stack so you can set up

00:29:19,010 --> 00:29:23,990
connections advertised through its can

00:29:20,960 --> 00:29:25,399
and it's a pretty powerful command-line

00:29:23,990 --> 00:29:27,649
tool to do a lot of testing and

00:29:25,399 --> 00:29:28,970
debugging with you know that's a you

00:29:27,649 --> 00:29:31,789
know sort of get yourself familiar with

00:29:28,970 --> 00:29:33,169
the stack and the code the only sent is

00:29:31,789 --> 00:29:36,080
a central so it was going to give an

00:29:33,169 --> 00:29:39,320
example of a central and bleh VI is the

00:29:36,080 --> 00:29:41,090
controller only API so you know we run

00:29:39,320 --> 00:29:43,340
it with you know Liese it's great you

00:29:41,090 --> 00:29:44,450
stick it on there and you know you can

00:29:43,340 --> 00:29:49,370
use that as your controller to do

00:29:44,450 --> 00:29:53,750
testing with I think that's pretty much

00:29:49,370 --> 00:29:55,490
most of the presentation you have any

00:29:53,750 --> 00:29:58,960
questions about the community to stack

00:29:55,490 --> 00:29:58,960
or anything about one time

00:30:11,280 --> 00:30:16,660
yeah sorry about that

00:30:13,510 --> 00:30:19,420
oh yeah so newt is a build and package

00:30:16,660 --> 00:30:21,910
management tool so it actually bundle

00:30:19,420 --> 00:30:25,480
its the build system we use with our oh

00:30:21,910 --> 00:30:29,170
s and project there is the ability to

00:30:25,480 --> 00:30:31,030
run new so we're all I mean I think will

00:30:29,170 --> 00:30:34,720
is users look at it the rest of us are

00:30:31,030 --> 00:30:36,400
VI and Emacs for the most part so noot

00:30:34,720 --> 00:30:37,990
does actually build in so for example

00:30:36,400 --> 00:30:40,870
for every board and processor that we

00:30:37,990 --> 00:30:43,930
support we include the debug scripts for

00:30:40,870 --> 00:30:46,510
download a toboggan run and programming

00:30:43,930 --> 00:30:48,790
so anybody who writes a BSP makes sure

00:30:46,510 --> 00:30:51,370
that they actually bring up J link or

00:30:48,790 --> 00:30:52,780
open o CD or any of those things one of

00:30:51,370 --> 00:30:56,110
the things you can do is you can take a

00:30:52,780 --> 00:30:57,880
clip and there's a blog post that a

00:30:56,110 --> 00:31:02,380
company called code coupe wrote on this

00:30:57,880 --> 00:31:05,440
we can send it out and you can fire up

00:31:02,380 --> 00:31:07,660
noot and then use it as a gdb remote and

00:31:05,440 --> 00:31:08,860
then you can debug within a click and

00:31:07,660 --> 00:31:10,990
you can call out to the build system

00:31:08,860 --> 00:31:12,010
with eclipse so there's a there's a

00:31:10,990 --> 00:31:14,170
whole set of instructions for

00:31:12,010 --> 00:31:16,060
configuring it on Eclipse actually one

00:31:14,170 --> 00:31:19,540
of the nice things that we didn't really

00:31:16,060 --> 00:31:21,550
realize going into it about this

00:31:19,540 --> 00:31:24,040
approach is that often you have teams

00:31:21,550 --> 00:31:26,380
where some people use a clip some people

00:31:24,040 --> 00:31:29,170
use Visual Studio some other people use

00:31:26,380 --> 00:31:32,830
just VI and Emacs and having been the

00:31:29,170 --> 00:31:34,690
the guy who use DI all the time the

00:31:32,830 --> 00:31:38,640
problem you'll often get is that the

00:31:34,690 --> 00:31:40,540
make system is some eclipse studio a

00:31:38,640 --> 00:31:42,790
mess

00:31:40,540 --> 00:31:44,350
and so the nice thing about having new

00:31:42,790 --> 00:31:47,110
build and package management and debug

00:31:44,350 --> 00:31:49,030
is that it works for people who use

00:31:47,110 --> 00:31:50,590
Eclipse but there's also a very nice

00:31:49,030 --> 00:31:55,320
command-line interface for people who

00:31:50,590 --> 00:31:55,320
are just VI and Emacs users which is me

00:31:57,080 --> 00:33:04,700
oh yeah that's a great question the we

00:33:02,930 --> 00:33:06,590
can always get better and we know we

00:33:04,700 --> 00:33:09,470
need to get better especially as an open

00:33:06,590 --> 00:33:11,480
source project but some some pointers

00:33:09,470 --> 00:33:17,500
that I'd give you is the my new

00:33:11,480 --> 00:33:19,910
documentation so that there has a

00:33:17,500 --> 00:33:21,800
tutorial on building a sample ble

00:33:19,910 --> 00:33:24,800
application in the very basic one

00:33:21,800 --> 00:33:27,710
there's also an example on how to hook

00:33:24,800 --> 00:33:29,690
in and air quality sensor and make the

00:33:27,710 --> 00:33:31,640
the results of that a co2 sensor

00:33:29,690 --> 00:33:35,030
actually make the results of that co2

00:33:31,640 --> 00:33:37,700
sensor available as a Billy Billy

00:33:35,030 --> 00:33:40,550
peripheral so you actually go through

00:33:37,700 --> 00:33:43,160
the process of there's an iOS app along

00:33:40,550 --> 00:33:44,930
with it all of that is in the core minut

00:33:43,160 --> 00:33:47,120
documentation itself so there are some

00:33:44,930 --> 00:33:49,760
tutorials and then a bunch of detail in

00:33:47,120 --> 00:33:51,800
the documentation itself and then there

00:33:49,760 --> 00:33:53,870
are the sample apps are a really good

00:33:51,800 --> 00:33:56,270
way of getting that up and running as

00:33:53,870 --> 00:34:00,230
well so really sent and nearly per if

00:33:56,270 --> 00:34:01,640
and they work together so you can one of

00:34:00,230 --> 00:34:03,890
them starts up as a central the other

00:34:01,640 --> 00:34:05,590
starts up its peripheral I don't know

00:34:03,890 --> 00:34:08,020
will you want to

00:34:05,590 --> 00:34:11,589
something that has some you know we

00:34:08,020 --> 00:34:13,149
wanted to get to basics in first and we

00:34:11,589 --> 00:34:15,639
will start adding a lot of profile of

00:34:13,149 --> 00:34:17,200
cynicism and you know so you you know

00:34:15,639 --> 00:34:18,879
just want to in standard profiles are

00:34:17,200 --> 00:34:20,679
one do anything tricky that in law we

00:34:18,879 --> 00:34:22,629
just right there for you I mean right

00:34:20,679 --> 00:34:24,700
now we have gone I think there's only

00:34:22,629 --> 00:34:26,409
one or two profiles that we've added but

00:34:24,700 --> 00:34:28,690
that's something we plan to start adding

00:34:26,409 --> 00:34:30,490
in a quite a bit more so I think that's

00:34:28,690 --> 00:34:32,139
what just a lot of concern yeah because

00:34:30,490 --> 00:34:33,369
you know it just does it's like ice

00:34:32,139 --> 00:34:35,589
about you don't have to worry about

00:34:33,369 --> 00:34:37,510
anything you know unless I want to do

00:34:35,589 --> 00:34:59,380
something differently fantastic what you

00:34:37,510 --> 00:35:00,760
doing and parachuting no I'm completely

00:34:59,380 --> 00:35:01,990
unfamiliar with bluetooth when we say I

00:35:00,760 --> 00:35:03,220
think we were both unfamiliar with

00:35:01,990 --> 00:35:05,470
bluetooth when we started and it's a

00:35:03,220 --> 00:35:07,359
stone world right like we have had it

00:35:05,470 --> 00:35:09,790
will has written wireless Mac's for like

00:35:07,359 --> 00:35:12,250
20 years and and then you had a

00:35:09,790 --> 00:35:14,650
Bluetooth and it's not IP and it has all

00:35:12,250 --> 00:35:16,900
of its own terms and there's like a

00:35:14,650 --> 00:35:18,160
whole set of profiles that nobody who's

00:35:16,900 --> 00:35:19,960
developing connected products actually

00:35:18,160 --> 00:35:23,349
really even uses it's mostly for

00:35:19,960 --> 00:35:26,440
keyboard guys and and headphone guys so

00:35:23,349 --> 00:35:30,430
there's really a it's definitely a

00:35:26,440 --> 00:35:52,900
learning curve coming to it so I totally

00:35:30,430 --> 00:35:55,390
agree it well so they have their own

00:35:52,900 --> 00:35:56,800
controller that was actually the the

00:35:55,390 --> 00:35:59,320
long story on that that was actually

00:35:56,800 --> 00:36:03,310
contributed by Nordic slightly after we

00:35:59,320 --> 00:36:05,500
wrote our controller but we also can

00:36:03,310 --> 00:36:07,060
interface with his effer so zephyr has

00:36:05,500 --> 00:36:10,270
its own host stack that was developed by

00:36:07,060 --> 00:36:12,280
Johan right there

00:36:10,270 --> 00:36:14,410
[Music]

00:36:12,280 --> 00:36:16,520
and they will talk about it tomorrow

00:36:14,410 --> 00:36:18,650
Zephyr can work with either the nimble

00:36:16,520 --> 00:36:21,950
controller or the one contributed by

00:36:18,650 --> 00:36:24,860
Nordic the one by Nordic is Nordic only

00:36:21,950 --> 00:36:32,360
whereas we are moving to support the kW

00:36:24,860 --> 00:37:05,750
41 z from NX p as well yeah yeah yeah

00:36:32,360 --> 00:37:07,760
yeah yeah I mean you know from our

00:37:05,750 --> 00:37:11,090
perspective I think more open source

00:37:07,760 --> 00:37:12,620
options are good yeah we like Zephyr oh

00:37:11,090 --> 00:37:14,420
so where this is more of a runtime

00:37:12,620 --> 00:37:16,310
perspective I can't speak for minut

00:37:14,420 --> 00:37:20,450
because we're runtime and we're involved

00:37:16,310 --> 00:37:22,910
in both deafer and in my new so from

00:37:20,450 --> 00:37:25,370
from our perspective like you know the

00:37:22,910 --> 00:37:27,770
great thing about having a bunch of open

00:37:25,370 --> 00:37:30,500
source code is we can go look look at it

00:37:27,770 --> 00:37:32,690
and steal it and vice versa so for

00:37:30,500 --> 00:37:34,640
example in my new I don't know how much

00:37:32,690 --> 00:37:36,500
Zephyr is taken from us but we certainly

00:37:34,640 --> 00:37:39,530
a lot of the security manager

00:37:36,500 --> 00:37:41,000
we took the implementation and the code

00:37:39,530 --> 00:37:44,360
you know we attribute Zephyr it's pretty

00:37:41,000 --> 00:37:47,600
much all there from Zephyr right and if

00:37:44,360 --> 00:37:48,950
you look at the controller stuff I'm not

00:37:47,600 --> 00:37:51,590
sure there's a lot of code sharing there

00:37:48,950 --> 00:37:53,690
we like having our Bluetooth stack for a

00:37:51,590 --> 00:37:55,850
number of reasons within the my new

00:37:53,690 --> 00:37:58,580
project one is we have a fair amount of

00:37:55,850 --> 00:38:01,040
customer usage on our stack and so as

00:37:58,580 --> 00:38:03,170
runtime you know we came out with my new

00:38:01,040 --> 00:38:04,760
and it was a little bit I'd say earlier

00:38:03,170 --> 00:38:07,220
especially on the controller side and

00:38:04,760 --> 00:38:08,780
then the Zephyr support came in and so a

00:38:07,220 --> 00:38:10,730
number of customers actually deployed

00:38:08,780 --> 00:38:12,950
this in production and we have a whole

00:38:10,730 --> 00:38:14,750
set of unit tests for that and a whole

00:38:12,950 --> 00:38:18,140
set of use cases that customers are

00:38:14,750 --> 00:38:19,880
using it on so I think you know what

00:38:18,140 --> 00:38:22,550
you're going to see in this space is

00:38:19,880 --> 00:38:24,950
going to be a lot of projects that

00:38:22,550 --> 00:38:28,839
hopefully over time will collaborate and

00:38:24,950 --> 00:38:31,190
hopefully coalesce but it's actually

00:38:28,839 --> 00:38:32,630
compared to where it was because I've

00:38:31,190 --> 00:38:34,130
been you know in embedded

00:38:32,630 --> 00:38:37,130
microcontrollers and maybe that's caused

00:38:34,130 --> 00:38:39,320
brain damage for over ten years and

00:38:37,130 --> 00:38:41,900
everything was proprietary and if you

00:38:39,320 --> 00:38:42,859
wanted to do you know something you had

00:38:41,900 --> 00:38:46,040
to do it yourself

00:38:42,859 --> 00:38:48,200
uh-huh so at least for example at Silver

00:38:46,040 --> 00:38:50,570
Spring we like we bought an IP stack we

00:38:48,200 --> 00:38:52,849
spent probably two to three years of

00:38:50,570 --> 00:38:54,950
engineering effort on that IP stack and

00:38:52,849 --> 00:38:56,390
really really good engineers that has

00:38:54,950 --> 00:38:58,730
never seen the light of day

00:38:56,390 --> 00:39:03,079
right and it's implementing things like

00:38:58,730 --> 00:39:04,910
IPSec which are completely commodity but

00:39:03,079 --> 00:39:08,390
we had to implement you know I could be

00:39:04,910 --> 00:39:10,400
to and all of these things that were

00:39:08,390 --> 00:39:12,410
code that we just had that we try to

00:39:10,400 --> 00:39:14,000
upstream with a proprietary stack vendor

00:39:12,410 --> 00:39:16,550
that we worked with that was just

00:39:14,000 --> 00:39:18,619
actually absolutely a nightmare so from

00:39:16,550 --> 00:39:20,480
a user perspective I mean I encourage

00:39:18,619 --> 00:39:23,349
you to download them compare a number of

00:39:20,480 --> 00:39:26,329
connections compare power usage compare

00:39:23,349 --> 00:39:29,180
throughput RAM and code sizes all of

00:39:26,329 --> 00:39:31,040
those things are really I could go into

00:39:29,180 --> 00:39:33,230
your decision as well as community and

00:39:31,040 --> 00:39:34,910
all of those things but in general I

00:39:33,230 --> 00:39:36,470
think having a lot of open source code

00:39:34,910 --> 00:39:38,660
out there and it's all Apache license

00:39:36,470 --> 00:39:48,260
that we can share and collaborate on is

00:39:38,660 --> 00:39:50,420
actually a fairly good thing we are

00:39:48,260 --> 00:39:52,099
actually working to break it out of my

00:39:50,420 --> 00:39:54,829
noon and making it more useful for other

00:39:52,099 --> 00:39:56,210
people so we've been working with other

00:39:54,829 --> 00:39:58,640
we can't really say too much but we

00:39:56,210 --> 00:39:59,839
ought you know we essentially designed

00:39:58,640 --> 00:40:02,210
to build and package management system

00:39:59,839 --> 00:40:04,099
into my new the problem is when you're

00:40:02,210 --> 00:40:07,790
kind of developing an operating system

00:40:04,099 --> 00:40:09,619
it's really hard to you know change your

00:40:07,790 --> 00:40:10,819
OSAP eyes and have the separate glue to

00:40:09,619 --> 00:40:13,460
that stack that's constantly being

00:40:10,819 --> 00:40:14,960
developed and having to evolve those two

00:40:13,460 --> 00:40:16,550
at the same time is actually a fairly

00:40:14,960 --> 00:40:19,790
painful effort especially for a small

00:40:16,550 --> 00:40:22,220
team which we work but the goal with

00:40:19,790 --> 00:40:23,990
nimble is actually to eventually break

00:40:22,220 --> 00:40:25,609
it out of my new and have all of the

00:40:23,990 --> 00:40:29,480
operating systems in the space be able

00:40:25,609 --> 00:40:31,819
to use it so that is certainly something

00:40:29,480 --> 00:40:34,010
that's been designed into minut itself

00:40:31,819 --> 00:40:36,440
there's actually a talk tomorrow on

00:40:34,010 --> 00:40:37,910
something called MCU boot which is one

00:40:36,440 --> 00:40:38,260
of the first things we've broken out of

00:40:37,910 --> 00:40:39,730
them

00:40:38,260 --> 00:40:41,710
the operating system and it's a boot

00:40:39,730 --> 00:40:45,070
secure boot loader that works across

00:40:41,710 --> 00:40:47,170
both Zephyr and minut so that's an

00:40:45,070 --> 00:40:48,760
example of where we are taking a

00:40:47,170 --> 00:40:50,530
component that's in my new and looking

00:40:48,760 --> 00:40:52,240
to share it it's a little bit trickier

00:40:50,530 --> 00:40:54,160
on the Bluetooth backside because effort

00:40:52,240 --> 00:40:55,690
has one and we have one and we have

00:40:54,160 --> 00:40:57,190
customers on ours and so we need to

00:40:55,690 --> 00:40:59,260
support it in those type of things so

00:40:57,190 --> 00:41:01,540
there it's more of a sharing and code

00:40:59,260 --> 00:41:06,190
access but we certainly are looking to

00:41:01,540 --> 00:41:13,960
break nimble out and make it cross OS we

00:41:06,190 --> 00:41:19,660
think more more sharing is better the

00:41:13,960 --> 00:41:21,770
other question all right thank you very

00:41:19,660 --> 00:41:25,760
much feel free to come up to us

00:41:21,770 --> 00:41:25,760

YouTube URL: https://www.youtube.com/watch?v=TiIxC1QbZ3k


