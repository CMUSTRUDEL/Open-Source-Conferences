Title: From Zero to First Test in Your Own LAVA Laboratory in less than 45 minutes) - Paweł Wieczorek
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	From Zero to First Test in Your Own LAVA Laboratory in less than 45 minutes) - Paweł Wieczorek, Samsung R&D Institute Poland

Linaro Automated Validation Architecture (LAVA) is without a doubt one of the best currently available tools for managing board farms. It is proven to be quite a handy tool for both developers and tests automation engineers. Although it is provided together with extensive documentation, creating first own laboratory might be a challenging task. Does it have to be for every newcomer? During this talk Paweł will guide through the process of setting up own LAVA instance. Starting from LAVA installation, through common post-install tasks, up to running first tests on a brand new board farm. He will also present how to manage its configuration and how to easily make deployments automated and reproducible.

About Paweł Wieczorek
Paweł Wieczorek works at Samsung R&D Institute Poland since 2014. Starting as an access control developer, Paweł contributed to the security framework of Tizen operating system. At that time, he introduced testing automation practices to Tizen and still actively develops automated test system. Currently he's a Tizen Common release engineer. Speaker on ELC and ELCE 2016, FrOSCon 11, MesosCon Europe 2016 and a few others. Presenter of testing laboratory at Tizen booth during FOSDEM 2016.
Captions: 
	00:00:00,060 --> 00:00:05,910
my name is Bhavik rhetoric I work at

00:00:03,090 --> 00:00:08,580
Samsung Courant Institute Poland and I'm

00:00:05,910 --> 00:00:11,550
currently a member of Tyson common

00:00:08,580 --> 00:00:14,790
release engineering team Tiger common is

00:00:11,550 --> 00:00:17,430
a new Linux distribution which aims at

00:00:14,790 --> 00:00:20,580
providing support for as many

00:00:17,430 --> 00:00:25,289
development boards as we can get our

00:00:20,580 --> 00:00:28,910
hands on now today I would like to guide

00:00:25,289 --> 00:00:32,450
you through your first step in preparing

00:00:28,910 --> 00:00:36,989
some kind of evaluation environment for

00:00:32,450 --> 00:00:39,989
your own lava laboratory I will start

00:00:36,989 --> 00:00:43,739
with a short introduction to what

00:00:39,989 --> 00:00:46,559
actually love is what are its key

00:00:43,739 --> 00:00:50,280
features what are its main use cases and

00:00:46,559 --> 00:00:53,969
how you might benefit from it then I

00:00:50,280 --> 00:00:57,480
will go through the actual setup step

00:00:53,969 --> 00:01:01,050
for the lava laboratory I would also

00:00:57,480 --> 00:01:04,110
like to share with you a few and tools

00:01:01,050 --> 00:01:08,939
that you might find interesting and that

00:01:04,110 --> 00:01:11,700
will make your work here after that I

00:01:08,939 --> 00:01:15,330
would like to recommend a few for the

00:01:11,700 --> 00:01:18,659
steps once the whole lava laboratory is

00:01:15,330 --> 00:01:21,960
followed in place and I will end with a

00:01:18,659 --> 00:01:26,960
short summary few final thoughts and the

00:01:21,960 --> 00:01:29,850
Q&A session as I already mentioned

00:01:26,960 --> 00:01:31,740
entitled common reef engineering

00:01:29,850 --> 00:01:34,950
requires a lot of validation

00:01:31,740 --> 00:01:40,079
verification performing tests on the

00:01:34,950 --> 00:01:44,729
ready to use images of the balloon Linux

00:01:40,079 --> 00:01:47,130
distribution and it's important to ask

00:01:44,729 --> 00:01:49,710
ourselves ask ourselves what's love

00:01:47,130 --> 00:01:51,420
actually is the acronym lava stands for

00:01:49,710 --> 00:01:54,560
linear or automated validation

00:01:51,420 --> 00:01:57,090
architecture and it's system for

00:01:54,560 --> 00:02:01,350
automated deployment of operating

00:01:57,090 --> 00:02:06,719
systems which in our case is crucial for

00:02:01,350 --> 00:02:09,260
day-to-day work it allows to deploy to

00:02:06,719 --> 00:02:12,510
load on the device all the

00:02:09,260 --> 00:02:16,430
necessary elements for the device to

00:02:12,510 --> 00:02:19,980
boot up colonel VTB root of s and so on

00:02:16,430 --> 00:02:23,130
it supports both physical and virtual

00:02:19,980 --> 00:02:27,360
hardware and today we will focus on the

00:02:23,130 --> 00:02:31,110
latter once the whole operating system

00:02:27,360 --> 00:02:34,580
is loaded onto your device it allows you

00:02:31,110 --> 00:02:37,280
to run the various a wide range of

00:02:34,580 --> 00:02:41,790
different tests from Bolton bootloader

00:02:37,280 --> 00:02:45,060
up to system level that although some

00:02:41,790 --> 00:02:50,670
extra hardware might be required for

00:02:45,060 --> 00:02:54,780
some of the test cases and the most

00:02:50,670 --> 00:02:58,590
common starting point for testing on

00:02:54,780 --> 00:03:02,010
your development on your development

00:02:58,590 --> 00:03:05,040
board in for embedded and might be a

00:03:02,010 --> 00:03:07,710
single board our v7 based like bigger

00:03:05,040 --> 00:03:11,880
bone black and flashing it and

00:03:07,710 --> 00:03:14,250
communicating with it it's definitely

00:03:11,880 --> 00:03:17,430
not hard it can be quickly learned by

00:03:14,250 --> 00:03:24,060
any developer and it does not require

00:03:17,430 --> 00:03:28,080
much time from developer but it works

00:03:24,060 --> 00:03:34,440
well only if there are no more than

00:03:28,080 --> 00:03:37,560
single execution of your test and lack

00:03:34,440 --> 00:03:41,730
of parallelism with just a single device

00:03:37,560 --> 00:03:44,580
per developer is not the only problem

00:03:41,730 --> 00:03:49,650
with this workflow support let's suppose

00:03:44,580 --> 00:03:54,030
that your software has to support some

00:03:49,650 --> 00:03:58,020
other target devices for mv7 like a big

00:03:54,030 --> 00:04:01,680
ten on the top left or like ah droids on

00:03:58,020 --> 00:04:03,630
the bottom right and what about if you

00:04:01,680 --> 00:04:08,670
had to support completely new

00:04:03,630 --> 00:04:13,320
architecture like x86 with minnowboard

00:04:08,670 --> 00:04:16,770
turbo sooner or later these are not the

00:04:13,320 --> 00:04:20,130
only problems that might come up with

00:04:16,770 --> 00:04:21,010
development you'll be expected to get

00:04:20,130 --> 00:04:25,750
the test

00:04:21,010 --> 00:04:28,680
out quickly as possible and even with

00:04:25,750 --> 00:04:31,900
all the knowledge in place all the

00:04:28,680 --> 00:04:36,370
procedures known by the whole

00:04:31,900 --> 00:04:38,890
development team it will be harder and

00:04:36,370 --> 00:04:41,380
harder to manage the whole board form

00:04:38,890 --> 00:04:44,050
what can we do about it

00:04:41,380 --> 00:04:48,640
preferably some abstraction layer for

00:04:44,050 --> 00:04:51,970
the whole for all the boards that you

00:04:48,640 --> 00:04:55,540
have to manage might be introduced and

00:04:51,970 --> 00:04:58,600
that actually what lava provides that

00:04:55,540 --> 00:05:02,070
actually why taken common became

00:04:58,600 --> 00:05:06,070
interested in lava in the first place

00:05:02,070 --> 00:05:09,010
lava unified management over all the

00:05:06,070 --> 00:05:12,250
boards that are available in your board

00:05:09,010 --> 00:05:14,920
form it doesn't matter what are the

00:05:12,250 --> 00:05:19,860
procedure procedures for flashing

00:05:14,920 --> 00:05:23,860
devices communicating with them or

00:05:19,860 --> 00:05:26,200
executing tests and collecting results

00:05:23,860 --> 00:05:31,800
from them from the developer's point of

00:05:26,200 --> 00:05:35,770
view any device will be seen equally

00:05:31,800 --> 00:05:38,500
also you got out-of-the-box resource

00:05:35,770 --> 00:05:39,960
allocation and you don't have to worry

00:05:38,500 --> 00:05:44,680
about it anymore

00:05:39,960 --> 00:05:47,910
as long as your execution of your test

00:05:44,680 --> 00:05:51,270
cases can be divided into multiple

00:05:47,910 --> 00:05:55,990
target devices and the cases are not

00:05:51,270 --> 00:05:58,540
dependent on each other little resources

00:05:55,990 --> 00:06:05,710
will be shared across your whole board

00:05:58,540 --> 00:06:10,870
form also in scheduling and dispatching

00:06:05,710 --> 00:06:16,750
all the tabs are is done all for you

00:06:10,870 --> 00:06:20,610
with no required interaction and how

00:06:16,750 --> 00:06:25,300
that lava do that it provides the

00:06:20,610 --> 00:06:29,130
unified environment for any device that

00:06:25,300 --> 00:06:29,130
you add to your laboratory

00:06:29,220 --> 00:06:37,880
to collect and track all the test

00:06:33,060 --> 00:06:42,560
results for future investigation if

00:06:37,880 --> 00:06:46,260
there is need for it and still it

00:06:42,560 --> 00:06:50,580
supports a direct access to your target

00:06:46,260 --> 00:06:54,780
device if such need occurs either by our

00:06:50,580 --> 00:06:59,790
built-in solution which is the hacking

00:06:54,780 --> 00:07:03,780
session or with some external software

00:06:59,790 --> 00:07:10,320
like board over here by free electrons

00:07:03,780 --> 00:07:13,590
and more on those two those two features

00:07:10,320 --> 00:07:16,770
of the lava can be found in the links on

00:07:13,590 --> 00:07:20,760
the slides which have been already

00:07:16,770 --> 00:07:26,760
uploaded bottle caps and to the event

00:07:20,760 --> 00:07:29,700
page so who actually uses lava currently

00:07:26,760 --> 00:07:32,850
of course we narrow for both Android and

00:07:29,700 --> 00:07:37,770
failing of testing on the development

00:07:32,850 --> 00:07:43,020
board also internal Ti performs its boot

00:07:37,770 --> 00:07:46,260
test using the lava board form and as

00:07:43,020 --> 00:07:49,050
for the whole distribution currently

00:07:46,260 --> 00:07:52,979
both automotive-grade Linux and Debian

00:07:49,050 --> 00:07:56,520
performs the tests of its operating

00:07:52,979 --> 00:08:01,140
system images within their lava

00:07:56,520 --> 00:08:05,600
laboratory now that we know what can we

00:08:01,140 --> 00:08:12,600
expect from lava let's move to the

00:08:05,600 --> 00:08:16,560
actual laboratory setup first up we will

00:08:12,600 --> 00:08:18,750
focus on standalone instance which means

00:08:16,560 --> 00:08:23,540
that we will have all the components

00:08:18,750 --> 00:08:26,820
within single machine although lava

00:08:23,540 --> 00:08:29,520
support distribution of the whole

00:08:26,820 --> 00:08:33,169
environment and boards are not bound to

00:08:29,520 --> 00:08:36,950
a single physical location it will be

00:08:33,169 --> 00:08:40,590
the best for the initial evaluation

00:08:36,950 --> 00:08:44,700
environment will also focus just on the

00:08:40,590 --> 00:08:50,490
virtual devices and no actual one will

00:08:44,700 --> 00:08:53,160
be used in this case also and just the

00:08:50,490 --> 00:08:58,140
simplest test will be taken into account

00:08:53,160 --> 00:09:00,870
and these actually might be more of the

00:08:58,140 --> 00:09:05,460
health checks than the actual test cases

00:09:00,870 --> 00:09:09,510
and why is that first of all to reduce

00:09:05,460 --> 00:09:12,630
initial complexity and to just get a

00:09:09,510 --> 00:09:16,470
grip on the key concepts of the lava

00:09:12,630 --> 00:09:19,760
laboratory and to familiarize with a new

00:09:16,470 --> 00:09:23,520
workflow which may differ from the

00:09:19,760 --> 00:09:28,500
current from your current development

00:09:23,520 --> 00:09:33,030
run also although your current test

00:09:28,500 --> 00:09:36,660
cases might be reused within your level

00:09:33,030 --> 00:09:41,820
laboratory it might be preferred to

00:09:36,660 --> 00:09:46,320
postpone eventual migration to the lava

00:09:41,820 --> 00:09:47,570
format so what does lava require from

00:09:46,320 --> 00:09:51,330
you

00:09:47,570 --> 00:09:54,750
fortunately the only strict requirement

00:09:51,330 --> 00:09:57,960
for now is having a machine with that

00:09:54,750 --> 00:10:01,830
supported Debian release which are

00:09:57,960 --> 00:10:05,220
currently stable testing and unstable

00:10:01,830 --> 00:10:11,160
the experimental branch is used only for

00:10:05,220 --> 00:10:13,410
the freezers in the testing branch it

00:10:11,160 --> 00:10:15,930
also might be worth to note that

00:10:13,410 --> 00:10:20,990
although lava is already available

00:10:15,930 --> 00:10:23,990
within Debian main repository it's

00:10:20,990 --> 00:10:28,680
preferred to use the backboard

00:10:23,990 --> 00:10:32,460
repositories since there are the 30 most

00:10:28,680 --> 00:10:33,380
current lava distribution supported by

00:10:32,460 --> 00:10:36,560
leonora

00:10:33,380 --> 00:10:41,430
unfortunately Ubuntu supports both

00:10:36,560 --> 00:10:44,970
frozen and if you're interested in

00:10:41,430 --> 00:10:50,090
and the reason for that you might find

00:10:44,970 --> 00:10:53,220
more details in the link on the slide

00:10:50,090 --> 00:10:56,730
apart from the strict requirement for

00:10:53,220 --> 00:11:01,410
the platform your first level laboratory

00:10:56,730 --> 00:11:04,440
will be based on there are few files

00:11:01,410 --> 00:11:08,610
that you should have prepared

00:11:04,440 --> 00:11:10,830
first of all system image and which can

00:11:08,610 --> 00:11:15,560
be either built all by yourself

00:11:10,830 --> 00:11:19,140
or taken directly from llanera

00:11:15,560 --> 00:11:22,140
mainly from the images dot validation

00:11:19,140 --> 00:11:24,890
that we know dot org server which will

00:11:22,140 --> 00:11:29,280
provide you with some sample images

00:11:24,890 --> 00:11:32,580
before various device then when you have

00:11:29,280 --> 00:11:35,370
to also prepare a health check job which

00:11:32,580 --> 00:11:38,910
also can be taken directly from the

00:11:35,370 --> 00:11:43,320
narrow from there git repositories with

00:11:38,910 --> 00:11:47,880
test cases on get dot Leonardo dog under

00:11:43,320 --> 00:11:50,580
a QA domain also you will need a device

00:11:47,880 --> 00:11:54,630
type template but fortunately lava comes

00:11:50,580 --> 00:11:58,740
with various types of building device

00:11:54,630 --> 00:12:03,060
type template and the only file that

00:11:58,740 --> 00:12:06,570
you'll have to prepare all by hand will

00:12:03,060 --> 00:12:09,930
be an instance definition of your first

00:12:06,570 --> 00:12:14,690
device which in lava terms is a device

00:12:09,930 --> 00:12:18,110
dictionary and for qmu device such

00:12:14,690 --> 00:12:23,490
dictionary might consist just all these

00:12:18,110 --> 00:12:26,670
three lines which tells which device

00:12:23,490 --> 00:12:33,150
template will be extended and specify

00:12:26,670 --> 00:12:38,340
the only two features that are not made

00:12:33,150 --> 00:12:42,780
by default in the template thanks to the

00:12:38,340 --> 00:12:47,220
effort for on packaging team on lava

00:12:42,780 --> 00:12:50,960
project the only two steps that are

00:12:47,220 --> 00:12:54,970
required on the host machine

00:12:50,960 --> 00:12:59,900
are setting up your database for the

00:12:54,970 --> 00:13:03,650
storing both lava settings and the

00:12:59,900 --> 00:13:06,980
results and using the meta package which

00:13:03,650 --> 00:13:09,920
will install all the components for the

00:13:06,980 --> 00:13:16,910
standalone instance as I mentioned

00:13:09,920 --> 00:13:21,770
before the more you'll learn about lava

00:13:16,910 --> 00:13:24,910
the higher your requirement will be as

00:13:21,770 --> 00:13:28,370
for the environment distribution and

00:13:24,910 --> 00:13:32,030
having the exact packages installed that

00:13:28,370 --> 00:13:35,270
you require but just to evaluate the

00:13:32,030 --> 00:13:39,680
technology itself the meta package will

00:13:35,270 --> 00:13:42,770
suffice once this is all in place you

00:13:39,680 --> 00:13:47,000
also have will have to setup the web UI

00:13:42,770 --> 00:13:49,640
for the easiest way to manipulate with

00:13:47,000 --> 00:13:55,580
your lava laboratory and this will

00:13:49,640 --> 00:14:00,470
adjust will be these five steps in the

00:13:55,580 --> 00:14:04,250
terminal which are enabling two

00:14:00,470 --> 00:14:08,930
additional modules for the Apache server

00:14:04,250 --> 00:14:12,920
and replacing the default configuration

00:14:08,930 --> 00:14:18,140
with Train stalled lava configuration

00:14:12,920 --> 00:14:23,110
which comes with lava meta package once

00:14:18,140 --> 00:14:27,440
you have your web UI and your super user

00:14:23,110 --> 00:14:31,880
has to be had to be created and with

00:14:27,440 --> 00:14:36,290
that in place all you have to do is to

00:14:31,880 --> 00:14:40,190
tell your new lava instance what devices

00:14:36,290 --> 00:14:45,850
you would like to test on adding devices

00:14:40,190 --> 00:14:49,010
to your level laboratory is as easy as

00:14:45,850 --> 00:14:54,260
performing these three steps first of

00:14:49,010 --> 00:14:58,580
all you have to note which device type

00:14:54,260 --> 00:15:02,600
your laboratory will support then now

00:14:58,580 --> 00:15:03,250
you have to declare the actual device

00:15:02,600 --> 00:15:07,450
instance

00:15:03,250 --> 00:15:12,100
you would like to use and finally you

00:15:07,450 --> 00:15:16,090
have to specify all the features that

00:15:12,100 --> 00:15:19,630
are not already available from the

00:15:16,090 --> 00:15:22,630
device template using for example the

00:15:19,630 --> 00:15:29,040
file the three line file you saw earlier

00:15:22,630 --> 00:15:34,410
in the required required files slide

00:15:29,040 --> 00:15:37,570
once all of this is done you're in first

00:15:34,410 --> 00:15:41,260
evaluation environment of your own lava

00:15:37,570 --> 00:15:44,920
laboratory is ready to use and although

00:15:41,260 --> 00:15:49,210
in the whole automated way you'll

00:15:44,920 --> 00:15:54,390
probably will be more fond of the CLI

00:15:49,210 --> 00:16:00,130
client just for the quick and dirty test

00:15:54,390 --> 00:16:05,610
the web UI might be your first place and

00:16:00,130 --> 00:16:12,900
so check the lava possibilities and how

00:16:05,610 --> 00:16:19,300
it can be used in Europe workflow once

00:16:12,900 --> 00:16:23,500
all of this is set up we might consider

00:16:19,300 --> 00:16:27,880
a few additional tools that will make

00:16:23,500 --> 00:16:30,640
your work with lava laboratory easier in

00:16:27,880 --> 00:16:34,060
the future and first of all the

00:16:30,640 --> 00:16:36,790
configuration management software it

00:16:34,060 --> 00:16:40,560
will be the best to have your

00:16:36,790 --> 00:16:45,010
environment reproducible not only in the

00:16:40,560 --> 00:16:47,200
evaluation environment but also in the

00:16:45,010 --> 00:16:51,339
future staging and probably production

00:16:47,200 --> 00:16:55,540
so that you know that all of the tests

00:16:51,339 --> 00:17:01,410
that where might will be executed in the

00:16:55,540 --> 00:17:07,240
same way in the corresponding

00:17:01,410 --> 00:17:09,939
environment as well all of the currently

00:17:07,240 --> 00:17:13,569
available tools for configuration

00:17:09,939 --> 00:17:18,129
management are equally good

00:17:13,569 --> 00:17:24,729
from love of point of view so choose

00:17:18,129 --> 00:17:29,440
your favorite it might be preferred to

00:17:24,729 --> 00:17:34,749
use the one that is already in place in

00:17:29,440 --> 00:17:38,879
your infrastructure as 4,000 common

00:17:34,749 --> 00:17:42,779
needs we also do play books

00:17:38,879 --> 00:17:48,609
unfortunately due to some formal issues

00:17:42,779 --> 00:17:53,889
they were not published yet before the

00:17:48,609 --> 00:17:58,509
presentation but I think that all the

00:17:53,889 --> 00:18:02,830
necessary steps should finish by my trip

00:17:58,509 --> 00:18:06,340
back so feel free to ping me directly if

00:18:02,830 --> 00:18:09,940
you would like some further information

00:18:06,340 --> 00:18:13,889
on the configuration management code

00:18:09,940 --> 00:18:18,369
from the Italian common laboratory I

00:18:13,889 --> 00:18:21,580
believe that your first level laboratory

00:18:18,369 --> 00:18:24,999
would probably be set up in a virtual

00:18:21,580 --> 00:18:29,499
environment and depending on the time

00:18:24,999 --> 00:18:33,309
you would like to put into the

00:18:29,499 --> 00:18:36,639
preparation of the laboratory you've got

00:18:33,309 --> 00:18:39,849
two main options of course your options

00:18:36,639 --> 00:18:46,359
are not limited to those solutions but

00:18:39,849 --> 00:18:49,450
this might be the good initial solution

00:18:46,359 --> 00:18:52,509
for you tools and if you are limited on

00:18:49,450 --> 00:18:55,570
time and the vagrant might be your

00:18:52,509 --> 00:18:59,710
choice since new machines can be brought

00:18:55,570 --> 00:19:04,950
up easily and instantly and using the

00:18:59,710 --> 00:19:07,859
Atlas service a wide range of pre-built

00:19:04,950 --> 00:19:11,409
boxes is available at your fingertips

00:19:07,859 --> 00:19:14,419
but do be careful since you'll never

00:19:11,409 --> 00:19:18,299
know what might be in

00:19:14,419 --> 00:19:22,700
unofficial sources from vogue on table

00:19:18,299 --> 00:19:27,000
now if you have some more time spac it

00:19:22,700 --> 00:19:32,159
liquid might be the better choice since

00:19:27,000 --> 00:19:36,059
it is more much more flexible tool and

00:19:32,159 --> 00:19:43,830
still comes with a few user-friendly

00:19:36,059 --> 00:19:48,059
both CLI and gy tools once you make your

00:19:43,830 --> 00:19:55,100
future deployments easier let me

00:19:48,059 --> 00:19:59,330
recommend a few few directions for the

00:19:55,100 --> 00:20:03,750
development of your laboratory and

00:19:59,330 --> 00:20:07,380
adding new device types and actual

00:20:03,750 --> 00:20:09,990
device is not just the virtual one that

00:20:07,380 --> 00:20:13,700
the map that were mentioned in the

00:20:09,990 --> 00:20:17,399
presentation is described in the

00:20:13,700 --> 00:20:20,880
documentation for the lover of love

00:20:17,399 --> 00:20:24,899
lava laboratory the documentation is

00:20:20,880 --> 00:20:28,860
available at each instance at your own

00:20:24,899 --> 00:20:34,740
as well but the most recent will

00:20:28,860 --> 00:20:40,320
probably be on the main minerals and

00:20:34,740 --> 00:20:43,860
lava laboratory also the documentation

00:20:40,320 --> 00:20:47,100
is how to write your own test and how to

00:20:43,860 --> 00:20:50,809
migrate your current test cases to the

00:20:47,100 --> 00:20:55,520
lava format is to described in detail in

00:20:50,809 --> 00:21:01,020
the link chapter if you'd be interested

00:20:55,520 --> 00:21:05,960
to use your lava laboratory in open

00:21:01,020 --> 00:21:10,200
source project feel free to add your

00:21:05,960 --> 00:21:14,760
laboratory to the colonel CI I'm sure

00:21:10,200 --> 00:21:20,720
that more boards are put in to test on

00:21:14,760 --> 00:21:20,720
the recent kernel32 the better

00:21:20,860 --> 00:21:27,730
and you also might benefit from

00:21:23,940 --> 00:21:30,549
familiarizing both with AGL test

00:21:27,730 --> 00:21:34,440
framework setup instructions which goes

00:21:30,549 --> 00:21:42,789
into detail on how the infrastructure

00:21:34,440 --> 00:21:45,789
for the AGL test laboratory is and also

00:21:42,789 --> 00:21:50,620
the testing is initiated from civil

00:21:45,789 --> 00:21:54,429
infrastructure platform publishes some

00:21:50,620 --> 00:21:59,590
interesting documentation on the lava

00:21:54,429 --> 00:22:03,720
laboratory and to how can it be used in

00:21:59,590 --> 00:22:07,659
different workflows if you prefer

00:22:03,720 --> 00:22:11,470
watching all or listening to some

00:22:07,659 --> 00:22:14,380
lecture let me recommend three

00:22:11,470 --> 00:22:18,549
interesting presentation first of all

00:22:14,380 --> 00:22:22,389
much more detailed introduction to the

00:22:18,549 --> 00:22:27,730
lava v2 by Bill Fletcher

00:22:22,389 --> 00:22:31,630
from last year's linear o connect if

00:22:27,730 --> 00:22:36,480
you'd be more interested in having

00:22:31,630 --> 00:22:40,299
direct access to your devices by our

00:22:36,480 --> 00:22:42,330
different solution you might be

00:22:40,299 --> 00:22:45,820
interested in free electrons

00:22:42,330 --> 00:22:49,419
presentation from last year's number two

00:22:45,820 --> 00:22:52,929
synoptic on Europe and if you'd like to

00:22:49,419 --> 00:22:56,669
know how currently lava laboratories can

00:22:52,929 --> 00:23:00,549
be used for the full stock distribution

00:22:56,669 --> 00:23:02,889
testing you might be interesting you

00:23:00,549 --> 00:23:08,080
might be interested in tomorrow's

00:23:02,889 --> 00:23:13,870
presentation by young seaman Miller on

00:23:08,080 --> 00:23:17,919
the integration of lava with Lego of

00:23:13,870 --> 00:23:21,399
course these are not the only materials

00:23:17,919 --> 00:23:23,289
that you might use the whole

00:23:21,399 --> 00:23:26,860
documentation is as I mentioned

00:23:23,289 --> 00:23:31,240
available at each instance of lava

00:23:26,860 --> 00:23:33,700
laboratory if you would have some more

00:23:31,240 --> 00:23:37,090
specific questions

00:23:33,700 --> 00:23:41,950
both laugh I use our mailinglist and

00:23:37,090 --> 00:23:44,380
linear lava IRT channel on freenode will

00:23:41,950 --> 00:23:52,450
be most welcome for all of your

00:23:44,380 --> 00:23:57,790
questions and to sum it up and thanks to

00:23:52,450 --> 00:24:02,230
the efforts of the packages of the lava

00:23:57,790 --> 00:24:04,570
project installation of your first lava

00:24:02,230 --> 00:24:12,040
laboratory for evaluation purposes

00:24:04,570 --> 00:24:18,060
is as easy as the executing fuel command

00:24:12,040 --> 00:24:21,970
in terminal 1 fuel go through the whole

00:24:18,060 --> 00:24:26,230
documentation on the preparation of the

00:24:21,970 --> 00:24:29,230
environment also the setup is almost

00:24:26,230 --> 00:24:31,090
instant once you know what are the

00:24:29,230 --> 00:24:35,280
requirements and what you have to

00:24:31,090 --> 00:24:40,500
prepare prior the actual installation

00:24:35,280 --> 00:24:46,600
and also the unification of the

00:24:40,500 --> 00:24:51,790
environment done by lava is probably the

00:24:46,600 --> 00:24:55,300
key feature that might convince you to

00:24:51,790 --> 00:25:00,550
try out and good lover you've got a

00:24:55,300 --> 00:25:03,790
parallel parallelization of execution of

00:25:00,550 --> 00:25:06,240
all of your test cases at no cost it's

00:25:03,790 --> 00:25:10,360
out of the box

00:25:06,240 --> 00:25:14,710
also the division of responsibilities or

00:25:10,360 --> 00:25:18,520
maybe taking the burden of managing the

00:25:14,710 --> 00:25:21,490
test farm by developers and moving it to

00:25:18,520 --> 00:25:25,960
the test farm opera operators might be

00:25:21,490 --> 00:25:31,750
something that your developers will be

00:25:25,960 --> 00:25:34,720
interested in and although the whole

00:25:31,750 --> 00:25:37,390
documentation for the lava might be a

00:25:34,720 --> 00:25:42,640
little over overwhelming at first

00:25:37,390 --> 00:25:46,090
contact the exhaustive documentation has

00:25:42,640 --> 00:25:47,049
actually no downside all the common

00:25:46,090 --> 00:25:51,369
problems are

00:25:47,049 --> 00:25:55,809
already fixed there and all the

00:25:51,369 --> 00:26:02,230
solutions are available and there is

00:25:55,809 --> 00:26:06,659
also absolutely no need to try to create

00:26:02,230 --> 00:26:09,299
some new board farm management software

00:26:06,659 --> 00:26:14,679
since the existing one

00:26:09,299 --> 00:26:20,230
although might not be as popular as some

00:26:14,679 --> 00:26:24,570
other CI infrastructure tools is already

00:26:20,230 --> 00:26:31,200
in place and also although the

00:26:24,570 --> 00:26:36,909
automation tools might seem too high

00:26:31,200 --> 00:26:41,619
cost at the beginning it will pay off in

00:26:36,909 --> 00:26:49,109
a long term and with every next

00:26:41,619 --> 00:26:52,029
deployment you make that would be all of

00:26:49,109 --> 00:26:55,210
what I've got prepared for you today and

00:26:52,029 --> 00:26:58,710
if you have any questions I will be

00:26:55,210 --> 00:26:58,710
happy to answer them

00:27:05,639 --> 00:27:17,489
and the connections that lava support

00:27:11,659 --> 00:27:21,479
are the basic one is cereal but the SSH

00:27:17,489 --> 00:27:24,450
is also possible lava can be also

00:27:21,479 --> 00:27:29,940
extended with any connection you'll need

00:27:24,450 --> 00:27:33,649
so if there is some distribution

00:27:29,940 --> 00:27:40,409
specific protocol like in title case

00:27:33,649 --> 00:27:42,419
it's it's not hard to add any new using

00:27:40,409 --> 00:27:45,320
the templates that are already available

00:27:42,419 --> 00:27:45,320
in lava

00:28:00,710 --> 00:28:09,820
so as for support of the Oasis on the

00:28:05,510 --> 00:28:14,830
devices the lava out-of-the-box supports

00:28:09,820 --> 00:28:20,210
fuel 9 Linux distribution debian fedora

00:28:14,830 --> 00:28:27,550
Ubuntu openembedded builds and a droid

00:28:20,210 --> 00:28:34,030
as well as for the rare distribution

00:28:27,550 --> 00:28:38,150
such as Tyson in in my case the support

00:28:34,030 --> 00:28:42,050
has to be done by the interested party

00:28:38,150 --> 00:28:46,540
on their own but the templates that are

00:28:42,050 --> 00:28:46,540
already available can be easily extended

00:28:54,190 --> 00:28:57,190
yep

00:29:14,330 --> 00:29:17,140
all right

00:29:17,410 --> 00:29:25,450
so what about the integration with the

00:29:22,470 --> 00:29:34,210
current infrastructure right like gives

00:29:25,450 --> 00:29:39,330
upgrades or some other review tools any

00:29:34,210 --> 00:29:42,160
that can be submitted to the lava

00:29:39,330 --> 00:29:49,410
laboratory in a lower laboratory and

00:29:42,160 --> 00:29:52,990
does not really had no interest in the

00:29:49,410 --> 00:29:57,120
source of the test that has to be

00:29:52,990 --> 00:30:00,010
executed all it does is prepare device

00:29:57,120 --> 00:30:05,730
perform tests collect results and

00:30:00,010 --> 00:30:09,010
publish it further so any combination of

00:30:05,730 --> 00:30:14,580
the current infrastructure that you have

00:30:09,010 --> 00:30:19,600
with the lava has to be done on your own

00:30:14,580 --> 00:30:22,870
if you have current infrastructure with

00:30:19,600 --> 00:30:27,160
for example Jenkins and you have it set

00:30:22,870 --> 00:30:32,560
up on the very event stream or or gig

00:30:27,160 --> 00:30:36,490
top hooks is that required yes it it

00:30:32,560 --> 00:30:42,090
will be as easy as replacing the command

00:30:36,490 --> 00:30:42,090
that has to be executed on the event

00:30:56,100 --> 00:31:02,760
yeah so about a thousand common and

00:30:59,460 --> 00:31:07,110
archived that exactly as you said

00:31:02,760 --> 00:31:11,520
and the OBS open built service is used

00:31:07,110 --> 00:31:17,990
for rebuild of all the packages as for

00:31:11,520 --> 00:31:22,770
the images of the oil itself we use mix

00:31:17,990 --> 00:31:26,250
which is the acronym for mix image

00:31:22,770 --> 00:31:30,900
creator and this is actually the tool

00:31:26,250 --> 00:31:34,470
that that prepares the OS images now

00:31:30,900 --> 00:31:41,520
obvious is used only for the rebuilt of

00:31:34,470 --> 00:31:45,180
the packages and the setup with with

00:31:41,520 --> 00:31:48,360
lava is currently under development but

00:31:45,180 --> 00:31:51,120
we'll be publishing everything as as

00:31:48,360 --> 00:31:53,750
soon as it's on the production

00:31:51,120 --> 00:31:53,750
environment

00:32:03,990 --> 00:32:08,970
can I say sent up a certain number of

00:32:05,760 --> 00:32:12,150
zooming machine safe on low set of

00:32:08,970 --> 00:32:13,680
packing servers the results or where my

00:32:12,150 --> 00:32:15,210
basically just speculative duty

00:32:13,680 --> 00:32:18,270
following test until you're done and

00:32:15,210 --> 00:32:21,990
tell me what happened so as for scaling

00:32:18,270 --> 00:32:29,430
of the whole solution lava will schedule

00:32:21,990 --> 00:32:34,260
the tab only on the available devices on

00:32:29,430 --> 00:32:37,560
the event of the annual test that has to

00:32:34,260 --> 00:32:40,940
be executed so there is as far as I know

00:32:37,560 --> 00:32:45,720
there is no mechanism for spinning up

00:32:40,940 --> 00:32:52,830
dynamically and you're mashing since

00:32:45,720 --> 00:33:00,600
it's it's not the main use case with the

00:32:52,830 --> 00:33:05,330
actual devices but I believe that it

00:33:00,600 --> 00:33:08,640
could be included in your log browser

00:33:05,330 --> 00:33:13,580
performing these three steps for adding

00:33:08,640 --> 00:33:16,560
new devices actually just two of them

00:33:13,580 --> 00:33:19,380
new instance and the instance

00:33:16,560 --> 00:33:26,990
specification because the device type

00:33:19,380 --> 00:33:26,990
will be already known also

00:33:28,480 --> 00:33:37,810
if any other question occurs i'll come

00:33:34,640 --> 00:33:43,550
to you and i feel free to contact me

00:33:37,810 --> 00:33:46,610
directly thank you for coming and thank

00:33:43,550 --> 00:33:51,480
you for your attention

00:33:46,610 --> 00:33:51,480

YouTube URL: https://www.youtube.com/watch?v=g4Hw5I2sk3A


