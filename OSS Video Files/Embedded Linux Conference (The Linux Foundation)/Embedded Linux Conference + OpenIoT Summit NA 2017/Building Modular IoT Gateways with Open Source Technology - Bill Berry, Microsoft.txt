Title: Building Modular IoT Gateways with Open Source Technology - Bill Berry, Microsoft
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Building Modular IoT Gateways with Open Source Technology - Bill Berry, Microsoft

As the IoT community turns its focus toward legacy device integration, security and edge computing, field deployed gateways will become a staple of IoT system architectures.  Building upon flexible open source solutions in the gateway space can dramatically improve your time to market, remove system complexity and allow you to focus on delivering value to your customers. Come see how Microsoftâ€™s open source Azure IoT Gateway SDK can be leveraged to build awesome edge compute solutions on the platform of your choice.

About Bill Berry
In a previous life Bill Berry crafted scenery for Broadway, a la Pirates of Penzance, but now crafts software for the enterprise, a la Pirates of Silicon Valley. Now working at Microsoft, Bill has the opportunity to help developers the world over, deliver cutting edge IoT solutions with Azure products & services. In previous roles, he has lead service integrations with Fortune 500 retailers, curated DevOps initiatives, built high performance distributed data APIs and designed control systems for live entertainment. As a deeply curious engineer, he enjoys pairing complex problems with simple and elegant solutions. Striving for meaningful change, Bill believes that cultural and technical progress is best made through evolution and not revolution.
Captions: 
	00:00:00,000 --> 00:00:06,290
all righty it is 3:00 p.m. I hope

00:00:03,419 --> 00:00:09,150
everybody's having a good day so far

00:00:06,290 --> 00:00:13,469
seeing lots of cool tech particularly in

00:00:09,150 --> 00:00:14,910
the open source and IOT space some

00:00:13,469 --> 00:00:17,699
housekeeping notes when we get to the

00:00:14,910 --> 00:00:21,660
end I'm going to hopefully have time for

00:00:17,699 --> 00:00:25,849
some questions if you lob me a good one

00:00:21,660 --> 00:00:31,529
meatballs please I've got some freebies

00:00:25,849 --> 00:00:34,320
if you're interested so welcome to

00:00:31,529 --> 00:00:37,410
building modular IOT gateways with open

00:00:34,320 --> 00:00:39,239
source technologies hopefully the talk

00:00:37,410 --> 00:00:40,260
title leads you to believe that this

00:00:39,239 --> 00:00:42,870
will be a bit of a high-level

00:00:40,260 --> 00:00:45,270
conversation and it will we'll talk a

00:00:42,870 --> 00:00:46,980
little bit of architecture in particular

00:00:45,270 --> 00:00:49,920
we're going to we are going to dig down

00:00:46,980 --> 00:00:54,120
a little bit though onto the microsoft

00:00:49,920 --> 00:00:57,899
azure IOT gateway sdk so we're going to

00:00:54,120 --> 00:01:00,300
talk about how the sdk can be used in

00:00:57,899 --> 00:01:02,840
you know sort of on-prem installations

00:01:00,300 --> 00:01:05,189
helped funnel data to the cloud and then

00:01:02,840 --> 00:01:07,380
time permitting we'll get into some demo

00:01:05,189 --> 00:01:09,090
and actually see some code fly because

00:01:07,380 --> 00:01:11,280
that's I know why most people are here

00:01:09,090 --> 00:01:13,830
is to actually see demos explode and

00:01:11,280 --> 00:01:16,320
speakers look ridiculous in front of

00:01:13,830 --> 00:01:17,820
their audiences so without further ado

00:01:16,320 --> 00:01:20,400
my name is William berry most people

00:01:17,820 --> 00:01:22,890
call me Bill I'm a senior software

00:01:20,400 --> 00:01:28,140
developer for Microsoft in the developer

00:01:22,890 --> 00:01:30,780
experience team so most of the people in

00:01:28,140 --> 00:01:32,670
my group are evangelists I happen to be

00:01:30,780 --> 00:01:34,979
a software developer by trade and that's

00:01:32,670 --> 00:01:36,600
what I do day in and day out the group

00:01:34,979 --> 00:01:39,210
that I work for has a really sort of

00:01:36,600 --> 00:01:40,829
cool mission right we take new and

00:01:39,210 --> 00:01:42,930
emerging technologies that Microsoft is

00:01:40,829 --> 00:01:44,729
producing and working on we find

00:01:42,930 --> 00:01:47,939
partners that are out in the real world

00:01:44,729 --> 00:01:49,649
in industry and we embed with them to

00:01:47,939 --> 00:01:51,720
help them build their products and

00:01:49,649 --> 00:01:53,579
services for their end customers what

00:01:51,720 --> 00:01:56,759
that does is that helps us Microsoft

00:01:53,579 --> 00:01:59,969
learn how to use and frankly abuse our

00:01:56,759 --> 00:02:01,290
own products right a you know feedback

00:01:59,969 --> 00:02:03,780
to our engineering teams about how

00:02:01,290 --> 00:02:05,189
things are going and also does a little

00:02:03,780 --> 00:02:07,500
bit of evangelism work where we get to

00:02:05,189 --> 00:02:09,090
see our products sort of spread out into

00:02:07,500 --> 00:02:11,640
the community and this is particularly

00:02:09,090 --> 00:02:12,880
important in the open source world and

00:02:11,640 --> 00:02:14,800
in the IOT space

00:02:12,880 --> 00:02:18,130
since you know we're talking about

00:02:14,800 --> 00:02:20,740
everything from devices that are on Prem

00:02:18,130 --> 00:02:22,480
within constraint networks all the way

00:02:20,740 --> 00:02:24,460
up to cloud data workloads you know

00:02:22,480 --> 00:02:26,440
post-processing machine learning and so

00:02:24,460 --> 00:02:29,800
on and so forth and and we as IOT

00:02:26,440 --> 00:02:32,200
experts have sort of that in that great

00:02:29,800 --> 00:02:36,580
opportunity to see the stack the full

00:02:32,200 --> 00:02:38,260
system end-to-end and yeah anyhow so

00:02:36,580 --> 00:02:40,240
without further ado just trying to

00:02:38,260 --> 00:02:42,160
curious little audience caching question

00:02:40,240 --> 00:02:43,780
do I have any makers in the audience

00:02:42,160 --> 00:02:45,310
people that like you know build their

00:02:43,780 --> 00:02:49,300
own ships do their own work at home

00:02:45,310 --> 00:02:50,680
maybe some 3d printing yes no maybe this

00:02:49,300 --> 00:02:52,870
was the audience-participation part so

00:02:50,680 --> 00:02:56,470
you can raise your hands and Susie a

00:02:52,870 --> 00:02:58,360
Stickley in support okay all right so

00:02:56,470 --> 00:03:00,730
how about those of us that are in the

00:02:58,360 --> 00:03:02,770
consumer space right so refrigerators

00:03:00,730 --> 00:03:04,570
devices in the home maybe home

00:03:02,770 --> 00:03:06,690
automation stuff the manufacturing

00:03:04,570 --> 00:03:10,480
around that space okay a few people and

00:03:06,690 --> 00:03:13,090
industry manufacturing great automotive

00:03:10,480 --> 00:03:15,220
aeronautics anything along those lines

00:03:13,090 --> 00:03:21,180
all right everybody working with

00:03:15,220 --> 00:03:25,240
embedded devices all right cool so

00:03:21,180 --> 00:03:27,760
without further ado my background is not

00:03:25,240 --> 00:03:29,590
in software okay my background is

00:03:27,760 --> 00:03:32,340
actually in live entertainment so I

00:03:29,590 --> 00:03:35,350
worked in the theater industry for years

00:03:32,340 --> 00:03:37,810
I worked on Broadway for a scene shop

00:03:35,350 --> 00:03:40,000
that put together most of the shows that

00:03:37,810 --> 00:03:42,430
you see on Broadway and the tour around

00:03:40,000 --> 00:03:44,680
the world okay my specialty was

00:03:42,430 --> 00:03:47,110
automation and motion control so we took

00:03:44,680 --> 00:03:49,870
the same sort of technology that you

00:03:47,110 --> 00:03:52,690
know BIC uses to make a thousand razors

00:03:49,870 --> 00:03:55,240
a second and we made really large pieces

00:03:52,690 --> 00:03:58,740
of machinery move around the stage right

00:03:55,240 --> 00:04:03,760
for actors seeing changes flying stuff

00:03:58,740 --> 00:04:06,580
and that industry has some very very

00:04:03,760 --> 00:04:08,410
hard constraints okay one we're

00:04:06,580 --> 00:04:10,750
typically dealing with large machinery

00:04:08,410 --> 00:04:12,790
we're typically dealing with life safety

00:04:10,750 --> 00:04:14,830
you know sort of scenarios right because

00:04:12,790 --> 00:04:17,290
there are people around are moving

00:04:14,830 --> 00:04:18,580
machinery we've got machinery that's

00:04:17,290 --> 00:04:20,859
interacting with other pieces of

00:04:18,580 --> 00:04:22,330
machinery right so safety equipment pin

00:04:20,859 --> 00:04:22,889
releases and that kind of stuff for a

00:04:22,330 --> 00:04:25,319
list that are

00:04:22,889 --> 00:04:27,449
the stage elevators that are backstage

00:04:25,319 --> 00:04:31,439
you know flying pieces of scenery that

00:04:27,449 --> 00:04:33,120
come in and land on stage and above and

00:04:31,439 --> 00:04:34,740
beyond that we deal with a ton of lemon

00:04:33,120 --> 00:04:36,659
tree data so these systems that we're

00:04:34,740 --> 00:04:38,999
building right that are moving from

00:04:36,659 --> 00:04:42,240
theater to theater to theater right all

00:04:38,999 --> 00:04:44,129
across the world right have some

00:04:42,240 --> 00:04:46,020
incredibly hard constraints and and in

00:04:44,129 --> 00:04:48,539
these environments we're deploying

00:04:46,020 --> 00:04:50,370
things like plcs okay standard

00:04:48,539 --> 00:04:51,539
programmable logic controllers we're

00:04:50,370 --> 00:04:54,330
deploying things like hydraulic

00:04:51,539 --> 00:04:56,009
controllers we're deploying regular

00:04:54,330 --> 00:04:58,020
Windows machines for human machine

00:04:56,009 --> 00:05:00,960
interface maybe some touch screens right

00:04:58,020 --> 00:05:02,610
so we've got this broad base of hardware

00:05:00,960 --> 00:05:05,639
that we've installed into these spaces

00:05:02,610 --> 00:05:08,750
right and they all generate data lots

00:05:05,639 --> 00:05:11,250
and lots and lots of data unfortunately

00:05:08,750 --> 00:05:14,069
most of that data is trapped in the

00:05:11,250 --> 00:05:16,110
theater right we can't get it out for

00:05:14,069 --> 00:05:18,479
any any number of reasons not the least

00:05:16,110 --> 00:05:21,629
of which is that you typically don't

00:05:18,479 --> 00:05:23,129
control the internet access within the

00:05:21,629 --> 00:05:25,349
building that you're moving into most of

00:05:23,129 --> 00:05:27,089
the venues keep that stuff locked down

00:05:25,349 --> 00:05:30,000
the only thing they want you doing is

00:05:27,089 --> 00:05:34,139
checking your email right so you have

00:05:30,000 --> 00:05:37,469
this opportunity where you know if you

00:05:34,139 --> 00:05:39,449
could cloud enable your installations

00:05:37,469 --> 00:05:40,979
you could begin to collect more

00:05:39,449 --> 00:05:42,960
telemetry data right you could begin to

00:05:40,979 --> 00:05:45,120
collect information about how your

00:05:42,960 --> 00:05:47,699
machines are operating how the operators

00:05:45,120 --> 00:05:48,750
are operating those machines right what

00:05:47,699 --> 00:05:51,139
are the performance characteristics

00:05:48,750 --> 00:05:53,279
right standard predictive you know

00:05:51,139 --> 00:05:56,250
maintenance and monitoring you know

00:05:53,279 --> 00:05:59,159
remote monitoring those things become

00:05:56,250 --> 00:06:01,740
you know accessible as soon as we can

00:05:59,159 --> 00:06:04,949
sort of cloud enable our applications

00:06:01,740 --> 00:06:06,449
right cloud enable our devices but we

00:06:04,949 --> 00:06:09,360
also have you know serious security

00:06:06,449 --> 00:06:10,979
risks right we don't want this Hardware

00:06:09,360 --> 00:06:11,899
to be sitting out on the open Internet

00:06:10,979 --> 00:06:15,479
right

00:06:11,899 --> 00:06:21,509
VPNs they're secure but they have their

00:06:15,479 --> 00:06:23,399
drawbacks you know so anyhow in this

00:06:21,509 --> 00:06:25,439
particular you know sort of environment

00:06:23,399 --> 00:06:27,089
right we've got lots and lots and lots

00:06:25,439 --> 00:06:28,469
of different types of machinery that are

00:06:27,089 --> 00:06:29,939
moving lots of different types of

00:06:28,469 --> 00:06:33,629
microprocessors and computers that are

00:06:29,939 --> 00:06:36,220
operating and we were in sort of the

00:06:33,629 --> 00:06:39,280
world of the classic big data space

00:06:36,220 --> 00:06:43,180
okay does everybody know about the yes

00:06:39,280 --> 00:06:44,920
the three V's volume velocity and

00:06:43,180 --> 00:06:47,470
variety anybody ever heard about this

00:06:44,920 --> 00:06:49,870
for big data yes no yes I see some nods

00:06:47,470 --> 00:06:53,020
good not audience participation you can

00:06:49,870 --> 00:06:55,480
you can nod and make me feel more

00:06:53,020 --> 00:06:57,340
comfortable up here so in our particular

00:06:55,480 --> 00:06:59,830
applications in live entertainment right

00:06:57,340 --> 00:07:01,810
we were dealing with a lot of data right

00:06:59,830 --> 00:07:04,390
a high volume of data we've got micro

00:07:01,810 --> 00:07:07,390
processors that are cycling every 5 10

00:07:04,390 --> 00:07:09,370
15 50 milliseconds right they're reading

00:07:07,390 --> 00:07:11,950
their entire input space they're

00:07:09,370 --> 00:07:13,330
executing some amount of logic and then

00:07:11,950 --> 00:07:15,430
they're writing to their output space

00:07:13,330 --> 00:07:16,870
kicking over and running that same

00:07:15,430 --> 00:07:19,420
process again so we've got the

00:07:16,870 --> 00:07:21,850
opportunity to collect a ton of data

00:07:19,420 --> 00:07:23,970
from the field right and use that data

00:07:21,850 --> 00:07:26,680
for processing down roads

00:07:23,970 --> 00:07:28,330
additionally right and and I'll speak to

00:07:26,680 --> 00:07:31,060
at least one show that I did it toured

00:07:28,330 --> 00:07:34,780
from Chicago to deter Anto I think

00:07:31,060 --> 00:07:36,940
ultimately Boston we had high velocity

00:07:34,780 --> 00:07:40,600
data right so this show travelled with

00:07:36,940 --> 00:07:43,710
about 75 axes of automation ok so any

00:07:40,600 --> 00:07:47,020
particular wagon piece of flying scenery

00:07:43,710 --> 00:07:49,060
lifting the floor right one dimension of

00:07:47,020 --> 00:07:52,270
motion for us as an axis of automation

00:07:49,060 --> 00:07:54,550
right and we had 75 of them we were

00:07:52,270 --> 00:07:58,030
flying a piece of trust over the stage

00:07:54,550 --> 00:08:00,700
that weighed 75 thousand pounds okay it

00:07:58,030 --> 00:08:03,610
has 30 pieces of scenery flying up in it

00:08:00,700 --> 00:08:05,229
right with literally 60 plus motors you

00:08:03,610 --> 00:08:08,320
know hanging the thing from the sky was

00:08:05,229 --> 00:08:11,140
huge right and there were times when

00:08:08,320 --> 00:08:13,419
nearly everything it on that stage was

00:08:11,140 --> 00:08:15,610
moving at the same time right so we have

00:08:13,419 --> 00:08:19,360
all of this telemetry building up really

00:08:15,610 --> 00:08:21,820
quickly executing for you know 5 10 15

00:08:19,360 --> 00:08:23,860
seconds and then going quiet right so

00:08:21,820 --> 00:08:25,930
what this is is like high velocity data

00:08:23,860 --> 00:08:28,000
right we have nothing for a long period

00:08:25,930 --> 00:08:30,040
of time then we shoot a lot of telemetry

00:08:28,000 --> 00:08:31,479
up right everything's in motion

00:08:30,040 --> 00:08:33,490
and then we call them back down as we

00:08:31,479 --> 00:08:35,560
decelerate everything sort of changes

00:08:33,490 --> 00:08:37,510
into the next scene and the last point

00:08:35,560 --> 00:08:39,210
here is that we've got variety in our

00:08:37,510 --> 00:08:42,909
data right because we're reading from

00:08:39,210 --> 00:08:46,420
PLC's from you know drives from

00:08:42,909 --> 00:08:48,230
Mitsubishi and plcs from back off you

00:08:46,420 --> 00:08:51,560
know hydraulic controllers and

00:08:48,230 --> 00:08:53,810
opto 22 stuff for console integration so

00:08:51,560 --> 00:08:55,040
we've got a wide variety of different

00:08:53,810 --> 00:08:57,980
information that can be aggregated

00:08:55,040 --> 00:09:00,230
together through some sort of

00:08:57,980 --> 00:09:01,600
application which brings me to my next

00:09:00,230 --> 00:09:04,550
point

00:09:01,600 --> 00:09:07,370
for us you know we had all these things

00:09:04,550 --> 00:09:09,050
deployed out into the field and you know

00:09:07,370 --> 00:09:10,460
this was a while ago before the cloud

00:09:09,050 --> 00:09:13,810
was popular and if we had the

00:09:10,460 --> 00:09:17,090
opportunity to send stuff to the cloud

00:09:13,810 --> 00:09:19,040
right we've got this giant air gap right

00:09:17,090 --> 00:09:21,740
a high impedance air gap between these

00:09:19,040 --> 00:09:25,280
two spaces right restricted on-premises

00:09:21,740 --> 00:09:26,960
data where we would like that data so

00:09:25,280 --> 00:09:29,030
that when things go wrong we don't have

00:09:26,960 --> 00:09:31,430
to fly somebody to Korea which happened

00:09:29,030 --> 00:09:33,080
to me on more than one occasion that is

00:09:31,430 --> 00:09:34,310
a long trip by the way particularly from

00:09:33,080 --> 00:09:36,950
New York

00:09:34,310 --> 00:09:37,940
and we've got this sort of this air gap

00:09:36,950 --> 00:09:40,550
between these two we've got a

00:09:37,940 --> 00:09:42,200
connectivity problem right we could

00:09:40,550 --> 00:09:43,970
potentially just take each one of these

00:09:42,200 --> 00:09:46,280
endpoints you know in the right

00:09:43,970 --> 00:09:48,350
situation in the right scenario and just

00:09:46,280 --> 00:09:51,740
pump their data raw to the cloud okay

00:09:48,350 --> 00:09:53,630
and in the Azure space right we do have

00:09:51,740 --> 00:09:55,700
that capability right we have a thing

00:09:53,630 --> 00:09:58,340
called protocol gateway that allows you

00:09:55,700 --> 00:10:00,890
to deploy custom written software as a

00:09:58,340 --> 00:10:04,040
gateway on the cloud side meaning that

00:10:00,890 --> 00:10:06,260
each individual device that you have ten

00:10:04,040 --> 00:10:08,210
then talk to the cloud via whatever

00:10:06,260 --> 00:10:10,220
protocol that I'm going to keep running

00:10:08,210 --> 00:10:12,230
into that via whatever protocol that it

00:10:10,220 --> 00:10:13,940
wants to talk and then you can sort of

00:10:12,230 --> 00:10:16,160
normalize that information once you get

00:10:13,940 --> 00:10:17,600
to the cloud side but for us we were in

00:10:16,160 --> 00:10:19,160
a constrained space right we were

00:10:17,600 --> 00:10:20,750
dealing with networks that we didn't own

00:10:19,160 --> 00:10:23,360
that we weren't going to be operating

00:10:20,750 --> 00:10:25,970
over so what we needed was something

00:10:23,360 --> 00:10:27,590
that was going to sit sort of on the on

00:10:25,970 --> 00:10:29,600
premise side that was going to give us

00:10:27,590 --> 00:10:31,880
the capability to aggregate this

00:10:29,600 --> 00:10:33,800
information together to collect it to

00:10:31,880 --> 00:10:36,290
filter it to do some sort of

00:10:33,800 --> 00:10:40,690
pre-processing before we ship that data

00:10:36,290 --> 00:10:44,210
off-site which brings us to gateways

00:10:40,690 --> 00:10:46,580
that is my daughter by the way checking

00:10:44,210 --> 00:10:47,060
to see if there was a gnome that was

00:10:46,580 --> 00:10:48,620
there

00:10:47,060 --> 00:10:50,540
my other daughter in this photo actually

00:10:48,620 --> 00:10:53,090
was stealing the gnomes that were there

00:10:50,540 --> 00:10:55,280
which is a totally different problem um

00:10:53,090 --> 00:10:57,470
but this is a classic example of the

00:10:55,280 --> 00:10:59,780
Gateway right there is something on the

00:10:57,470 --> 00:11:01,010
you know some thing some maybe piece of

00:10:59,780 --> 00:11:01,790
information it's on the other side of

00:11:01,010 --> 00:11:03,529
that door

00:11:01,790 --> 00:11:05,420
we open the door we get access to that

00:11:03,529 --> 00:11:07,720
information and that's what our gateway

00:11:05,420 --> 00:11:10,130
applications are allowing us to do so

00:11:07,720 --> 00:11:11,810
fundamentally at a high level of things

00:11:10,130 --> 00:11:14,120
that were you know the topics that we

00:11:11,810 --> 00:11:16,519
want to cover when we're discussing

00:11:14,120 --> 00:11:18,560
gateways or security and isolation right

00:11:16,519 --> 00:11:20,630
so we want to have security sort of in

00:11:18,560 --> 00:11:22,910
the forefront of our conversations right

00:11:20,630 --> 00:11:25,220
are we partitioning our networks right

00:11:22,910 --> 00:11:27,130
are we constraining access to our

00:11:25,220 --> 00:11:30,380
protected networks in both directions

00:11:27,130 --> 00:11:32,720
you know are we making sure that we've

00:11:30,380 --> 00:11:34,430
got solid isolation in those networks so

00:11:32,720 --> 00:11:36,560
we don't have open vulnerabilities that

00:11:34,430 --> 00:11:37,970
we're not expecting the other

00:11:36,560 --> 00:11:42,320
opportunity for gateways is around

00:11:37,970 --> 00:11:44,450
integration right can we reach out to

00:11:42,320 --> 00:11:46,490
lots of different devices you know in in

00:11:44,450 --> 00:11:48,140
lectures my last job in life live

00:11:46,490 --> 00:11:50,360
entertainment space you know we were

00:11:48,140 --> 00:11:52,850
deploying Bekoff gear that was talking

00:11:50,360 --> 00:11:54,560
Modbus over TCP you know we had a little

00:11:52,850 --> 00:11:55,940
bit of twin cat for some of their high

00:11:54,560 --> 00:11:58,730
you know their high speed bus

00:11:55,940 --> 00:12:01,459
applications there was can bus that was

00:11:58,730 --> 00:12:02,690
out there you know and all of you know

00:12:01,459 --> 00:12:04,760
all these different industrial

00:12:02,690 --> 00:12:08,329
automation protocols that we had

00:12:04,760 --> 00:12:09,440
deployed leveraging a gateway we can

00:12:08,329 --> 00:12:11,600
work each one of those channels

00:12:09,440 --> 00:12:13,010
independently and aggregate that

00:12:11,600 --> 00:12:14,410
information together I'm going to look

00:12:13,010 --> 00:12:16,970
how that's accomplished a little later

00:12:14,410 --> 00:12:18,950
what other opportunity we have is that

00:12:16,970 --> 00:12:21,649
if we're going to put some smart compute

00:12:18,950 --> 00:12:24,230
out into the field let's do some work

00:12:21,649 --> 00:12:26,839
there right let's not let that machine

00:12:24,230 --> 00:12:29,959
sit idle right we have an opportunity to

00:12:26,839 --> 00:12:32,630
do pre-processing to do edge computing

00:12:29,959 --> 00:12:34,820
to do edge analytics on this data before

00:12:32,630 --> 00:12:37,310
we ship it to the cloud so let's get a

00:12:34,820 --> 00:12:40,149
platform together a place where we can

00:12:37,310 --> 00:12:43,209
perform some of those activities

00:12:40,149 --> 00:12:46,130
lastly batching in compression right

00:12:43,209 --> 00:12:48,320
this isn't necessarily as true as it

00:12:46,130 --> 00:12:50,720
used to be but data pipelines are

00:12:48,320 --> 00:12:53,180
expensive right wiring stuff up to

00:12:50,720 --> 00:12:55,310
public infrastructure is not cheap you

00:12:53,180 --> 00:12:57,560
know t1 lines are expensive gigabit

00:12:55,310 --> 00:12:59,329
lines are expensive you know connecting

00:12:57,560 --> 00:13:01,279
yourself to the internet is not a cheap

00:12:59,329 --> 00:13:03,980
thing particularly if you're in remote

00:13:01,279 --> 00:13:06,800
communities doing manufacturing you know

00:13:03,980 --> 00:13:08,360
doing electrical system integrations and

00:13:06,800 --> 00:13:10,100
that kind of stuff we want to be

00:13:08,360 --> 00:13:12,529
cognizant of the amount of bandwidth

00:13:10,100 --> 00:13:14,000
that were consuming so we also have an

00:13:12,529 --> 00:13:16,100
opportunity with our gateway

00:13:14,000 --> 00:13:18,350
to do batching and compression where we

00:13:16,100 --> 00:13:20,450
collect a bunch of messages together we

00:13:18,350 --> 00:13:22,130
compress that data and then we burst

00:13:20,450 --> 00:13:27,110
that data up to the club where we can

00:13:22,130 --> 00:13:32,560
use it later on so where do our gateways

00:13:27,110 --> 00:13:34,850
go this is sort of our stock azure IOT

00:13:32,560 --> 00:13:37,190
reference architecture you can pretty

00:13:34,850 --> 00:13:39,470
much ignore everything that's over here

00:13:37,190 --> 00:13:41,000
I have lots of friends from Microsoft

00:13:39,470 --> 00:13:43,340
that will be talking about data

00:13:41,000 --> 00:13:45,560
processing in the cloud about what you

00:13:43,340 --> 00:13:48,260
can do with your IOT data once it's up

00:13:45,560 --> 00:13:49,700
in the cloud where you can put it you

00:13:48,260 --> 00:13:51,020
know how you can store it in those sorts

00:13:49,700 --> 00:13:51,830
of things what I want to focus on is the

00:13:51,020 --> 00:13:55,610
stuff over here

00:13:51,830 --> 00:13:57,500
right we've got IP capable devices you

00:13:55,610 --> 00:13:59,330
know that can connect themselves

00:13:57,500 --> 00:14:00,650
directly to the cloud and that could be

00:13:59,330 --> 00:14:03,130
using something like the protocol

00:14:00,650 --> 00:14:05,120
gateway that I was speaking of earlier

00:14:03,130 --> 00:14:07,900
conversely we might have a fleet of

00:14:05,120 --> 00:14:10,490
existing IOT devices you know on Prem

00:14:07,900 --> 00:14:13,130
microcontrollers and PLC's and those

00:14:10,490 --> 00:14:14,990
types of devices that are sitting on a

00:14:13,130 --> 00:14:16,880
plant floor sitting you know maybe

00:14:14,990 --> 00:14:19,520
you've got a you know some sort of

00:14:16,880 --> 00:14:21,260
Bluetooth device in a retail location

00:14:19,520 --> 00:14:22,850
that kind of thing we have an

00:14:21,260 --> 00:14:24,710
opportunity to collect those you know

00:14:22,850 --> 00:14:26,630
those pieces of information use those

00:14:24,710 --> 00:14:28,160
devices and send their data up to the

00:14:26,630 --> 00:14:31,130
cloud and how we're going to do that is

00:14:28,160 --> 00:14:32,960
by dropping a field gateway that field

00:14:31,130 --> 00:14:35,120
gateway is going to act as a client to

00:14:32,960 --> 00:14:36,800
the cloud okay it's going to have an SDK

00:14:35,120 --> 00:14:39,140
on it it's going to have some client

00:14:36,800 --> 00:14:42,170
that's going to allow it to send data to

00:14:39,140 --> 00:14:43,700
a cloud could be any cloud I would hope

00:14:42,170 --> 00:14:46,760
that that's a sure but it could

00:14:43,700 --> 00:14:48,470
fundamentally be any cloud so in this

00:14:46,760 --> 00:14:49,910
case we're going to take our resource

00:14:48,470 --> 00:14:53,480
constrained devices right our Bluetooth

00:14:49,910 --> 00:14:55,160
our co-op devices we're going to build a

00:14:53,480 --> 00:14:57,830
protocol system that we can deploy to

00:14:55,160 --> 00:14:59,690
our field gateway that will allow us to

00:14:57,830 --> 00:15:01,460
read information from those devices and

00:14:59,690 --> 00:15:03,260
then do post-processing so in this

00:15:01,460 --> 00:15:04,880
particular case the gateways that we're

00:15:03,260 --> 00:15:07,400
talking we're going to be continuing to

00:15:04,880 --> 00:15:09,200
talk about and look at are going to be

00:15:07,400 --> 00:15:12,830
things that we're going to deploy you

00:15:09,200 --> 00:15:14,690
know to some locality someplace near the

00:15:12,830 --> 00:15:18,430
devices the sensors the things that we

00:15:14,690 --> 00:15:18,430
want to interoperate with okay so

00:15:18,700 --> 00:15:22,300
continuing on

00:15:23,660 --> 00:15:31,860
Microsoft provides the azure IOT gateway

00:15:28,680 --> 00:15:34,560
SDK okay this is a library that gives

00:15:31,860 --> 00:15:35,910
you a little bit of application and it

00:15:34,560 --> 00:15:39,510
gives you a little bit of infrastructure

00:15:35,910 --> 00:15:46,980
okay one of the cool things about it is

00:15:39,510 --> 00:15:49,950
that it is open source you know and that

00:15:46,980 --> 00:15:51,360
can't sort of be understated or

00:15:49,950 --> 00:15:55,410
overstate excuse me that can't be

00:15:51,360 --> 00:15:59,430
overstated enough you know a lot of the

00:15:55,410 --> 00:16:01,470
work that we do we can help put our

00:15:59,430 --> 00:16:05,130
wrist out into the community by sharing

00:16:01,470 --> 00:16:07,110
our knowledge right we can collaborate

00:16:05,130 --> 00:16:09,210
together in the open we can participate

00:16:07,110 --> 00:16:11,790
in open conversations and we can shape

00:16:09,210 --> 00:16:14,910
the software that many people use right

00:16:11,790 --> 00:16:16,950
and part of that is helping de-risk our

00:16:14,910 --> 00:16:19,380
applications right when we go to build

00:16:16,950 --> 00:16:21,720
something we can do it with great speed

00:16:19,380 --> 00:16:24,180
right but we're also going to bake in

00:16:21,720 --> 00:16:25,890
all of our assumptions about the

00:16:24,180 --> 00:16:27,840
environments that we're operating in and

00:16:25,890 --> 00:16:30,320
there may be things that are outside of

00:16:27,840 --> 00:16:33,600
our scope of focus that we can't catch

00:16:30,320 --> 00:16:35,520
so leveraging open source software gives

00:16:33,600 --> 00:16:37,830
us the ability to sort of in the you

00:16:35,520 --> 00:16:40,260
know in the open aggregate all of our

00:16:37,830 --> 00:16:43,500
different viewpoints together right to

00:16:40,260 --> 00:16:44,910
build a better more solid product and in

00:16:43,500 --> 00:16:47,790
this particular case you know we're

00:16:44,910 --> 00:16:50,220
offering a gateway SDK that is open

00:16:47,790 --> 00:16:53,880
source and above and beyond that right

00:16:50,220 --> 00:16:57,090
it's cross-platform right so everybody's

00:16:53,880 --> 00:17:02,490
working in the Linux space yeah windows

00:16:57,090 --> 00:17:04,530
open source people there we go I got one

00:17:02,490 --> 00:17:04,830
guy in the back okay the demos just for

00:17:04,530 --> 00:17:06,420
you

00:17:04,830 --> 00:17:07,800
no I'm kidding I'm going to do a Linux

00:17:06,420 --> 00:17:10,740
demo today because I work at Microsoft

00:17:07,800 --> 00:17:12,270
and yeah somewhere on here I have a

00:17:10,740 --> 00:17:15,089
sticker that says Microsoft loves Linux

00:17:12,270 --> 00:17:18,300
and it's true we actually do almost

00:17:15,089 --> 00:17:20,820
everybody on my haul up in Redmond we

00:17:18,300 --> 00:17:21,930
actually do a lot of open source work so

00:17:20,820 --> 00:17:24,839
the guy that sits in the chair right

00:17:21,930 --> 00:17:26,580
behind me does kubernetes work right and

00:17:24,839 --> 00:17:30,030
integrating kubernetes and cluster

00:17:26,580 --> 00:17:32,850
management with Azure resources so we do

00:17:30,030 --> 00:17:34,380
honestly love Linux we're talking about

00:17:32,850 --> 00:17:34,860
being able to deploy a lots of different

00:17:34,380 --> 00:17:38,400
types

00:17:34,860 --> 00:17:41,130
hardware right we can do you know

00:17:38,400 --> 00:17:43,290
raspberry PI's Intel Knox you know all

00:17:41,130 --> 00:17:47,460
the way up to full on regular server

00:17:43,290 --> 00:17:49,679
style machines also we're standards

00:17:47,460 --> 00:17:53,730
compliant right we're written in ANSI CC

00:17:49,679 --> 00:17:55,380
99 one of the cooler things that we'll

00:17:53,730 --> 00:17:57,920
talk about in the next slide is that we

00:17:55,380 --> 00:18:00,240
also support other languages too

00:17:57,920 --> 00:18:03,750
so the fundamental architecture behind

00:18:00,240 --> 00:18:06,120
the SDK is that we're going to you know

00:18:03,750 --> 00:18:08,160
we've got this sort of baseline message

00:18:06,120 --> 00:18:10,020
broker where we're going to send all of

00:18:08,160 --> 00:18:11,850
our data all of our messages we're going

00:18:10,020 --> 00:18:13,830
to we're going to hoist our workload on

00:18:11,850 --> 00:18:16,410
to that message broker just like you

00:18:13,830 --> 00:18:18,780
would with something like AMQP or rabbit

00:18:16,410 --> 00:18:20,940
or m2 TT we're going to put all of our

00:18:18,780 --> 00:18:23,309
messages onto a broker and then tell

00:18:20,940 --> 00:18:26,880
that broker how to move our data around

00:18:23,309 --> 00:18:30,840
the system for us okay the architecture

00:18:26,880 --> 00:18:33,360
itself excuse me is highly customizable

00:18:30,840 --> 00:18:35,880
and pluggable so we can build new

00:18:33,360 --> 00:18:39,510
modules insert them into the sort of

00:18:35,880 --> 00:18:41,760
data pipeline and augment you know the

00:18:39,510 --> 00:18:43,980
behavior of our gateway system right

00:18:41,760 --> 00:18:44,940
that's particularly important in sort of

00:18:43,980 --> 00:18:47,970
you know an agile development

00:18:44,940 --> 00:18:49,830
environment where we may not understand

00:18:47,970 --> 00:18:51,870
the final business requirements of the

00:18:49,830 --> 00:18:54,270
system that we're building right like we

00:18:51,870 --> 00:18:56,130
may want to start prototyping and be

00:18:54,270 --> 00:18:58,440
able to iterate on that you know that

00:18:56,130 --> 00:19:00,059
development work over and over and over

00:18:58,440 --> 00:19:02,610
again adding features and adding

00:19:00,059 --> 00:19:04,679
functionality into the system without

00:19:02,610 --> 00:19:07,260
having to dramatically change its

00:19:04,679 --> 00:19:09,299
structure so the way we can do that is

00:19:07,260 --> 00:19:11,309
to isolate our processes you know our

00:19:09,299 --> 00:19:13,740
business logic into self-contained

00:19:11,309 --> 00:19:15,929
modules deploy those modules to the

00:19:13,740 --> 00:19:20,100
Gateway and then wire them into the data

00:19:15,929 --> 00:19:23,100
flow of the Gateway we support multiple

00:19:20,100 --> 00:19:25,380
language bindings so aside from being

00:19:23,100 --> 00:19:29,910
able to develop and see we also support

00:19:25,380 --> 00:19:32,220
Java we support dotnet and node so

00:19:29,910 --> 00:19:34,200
javascript with node and we have

00:19:32,220 --> 00:19:36,570
bindings for all three environments and

00:19:34,200 --> 00:19:38,940
you can mix and match which is really

00:19:36,570 --> 00:19:41,400
quite an interesting story particularly

00:19:38,940 --> 00:19:44,130
for me I'm primarily a.net developer and

00:19:41,400 --> 00:19:46,410
even weirder I'm primarily a functional

00:19:44,130 --> 00:19:48,870
programmer so I like to write my code in

00:19:46,410 --> 00:19:50,820
f-sharp and either cross

00:19:48,870 --> 00:19:54,840
file to JavaScript to deployed a node or

00:19:50,820 --> 00:19:57,750
actually deploy through the CLR directly

00:19:54,840 --> 00:19:59,700
from my F sharp code so this is a great

00:19:57,750 --> 00:20:01,470
opportunity for me to continue to add to

00:19:59,700 --> 00:20:03,990
module development that kind of stuff

00:20:01,470 --> 00:20:08,040
even though I'm not primarily a C

00:20:03,990 --> 00:20:09,360
developer with the Gateway and we'll

00:20:08,040 --> 00:20:11,630
talk we'll touch a little bit more on

00:20:09,360 --> 00:20:14,280
this later we deploy a handful of

00:20:11,630 --> 00:20:16,080
modules sort of out of the box that give

00:20:14,280 --> 00:20:17,760
you some really great functionality to

00:20:16,080 --> 00:20:21,179
help you do things like connect to the

00:20:17,760 --> 00:20:24,120
cloud so we have an IOT hub module an

00:20:21,179 --> 00:20:26,160
IOT hub is our past service that's

00:20:24,120 --> 00:20:29,010
designed to help you connect literally

00:20:26,160 --> 00:20:31,890
millions of devices up to Azure right so

00:20:29,010 --> 00:20:33,630
it's a huge ingestion system we layer on

00:20:31,890 --> 00:20:36,270
top of that ability to ingest data

00:20:33,630 --> 00:20:38,580
device management capabilities so we can

00:20:36,270 --> 00:20:41,070
register devices and D register devices

00:20:38,580 --> 00:20:43,559
we can push harm where updates from the

00:20:41,070 --> 00:20:45,780
cloud we can interoperate with devices

00:20:43,559 --> 00:20:48,120
that are on premises from the cloud

00:20:45,780 --> 00:20:49,980
using things like direct messages and we

00:20:48,120 --> 00:20:52,679
can push configuration data back and

00:20:49,980 --> 00:20:56,660
forth between our on-prem devices and

00:20:52,679 --> 00:20:58,590
the cloud using things like device twins

00:20:56,660 --> 00:21:01,500
lastly and I touched a bit on this

00:20:58,590 --> 00:21:03,750
earlier you know the the get our gateway

00:21:01,500 --> 00:21:07,020
provides the ability to do buffering and

00:21:03,750 --> 00:21:09,270
batching sort of out of the box so in

00:21:07,020 --> 00:21:10,980
you know low constant connectivity

00:21:09,270 --> 00:21:13,530
scenarios places where the internet

00:21:10,980 --> 00:21:15,960
access is going in and out the SDK will

00:21:13,530 --> 00:21:17,640
help buffer those messages and keep them

00:21:15,960 --> 00:21:19,679
basically cycling around so that

00:21:17,640 --> 00:21:21,600
eventually when connectivity comes back

00:21:19,679 --> 00:21:22,830
and the connection stands back up it

00:21:21,600 --> 00:21:25,320
will send all of that data up to the

00:21:22,830 --> 00:21:27,420
cloud additionally it has batching out

00:21:25,320 --> 00:21:29,820
of the gate that you can you can turn on

00:21:27,420 --> 00:21:32,250
to do message aggregation and help you

00:21:29,820 --> 00:21:34,800
know sort of constrain your internet

00:21:32,250 --> 00:21:36,390
data consumption above and beyond that

00:21:34,800 --> 00:21:38,100
we'll talk about other techniques you

00:21:36,390 --> 00:21:41,730
can use around batching and compression

00:21:38,100 --> 00:21:47,550
by building modules later on so let's

00:21:41,730 --> 00:21:49,860
talk about some concepts excuse me okay

00:21:47,550 --> 00:21:52,170
in this particular case we're going to

00:21:49,860 --> 00:21:54,179
look at connecting a legacy device up to

00:21:52,170 --> 00:21:56,820
the cloud right we've got something like

00:21:54,179 --> 00:21:58,140
in this particular photo here for those

00:21:56,820 --> 00:22:01,560
of you that care this was my thesis

00:21:58,140 --> 00:22:02,520
project I did a robotic bed for a

00:22:01,560 --> 00:22:04,770
production of West

00:22:02,520 --> 00:22:06,450
story and if you're going why was there

00:22:04,770 --> 00:22:08,460
a robotic bed and West Side Story that's

00:22:06,450 --> 00:22:10,530
a great question I don't honestly have a

00:22:08,460 --> 00:22:12,720
good answer for you but there was in

00:22:10,530 --> 00:22:15,660
this particular case we were using a

00:22:12,720 --> 00:22:17,670
Bekoff Modbus tcp/ip controller

00:22:15,660 --> 00:22:19,290
basically to interoperate with this

00:22:17,670 --> 00:22:22,250
remote device and it was using just

00:22:19,290 --> 00:22:25,230
regular wireless off-the-shelf hardware

00:22:22,250 --> 00:22:26,520
to do connectivity basically a bridge

00:22:25,230 --> 00:22:27,930
between two points between our

00:22:26,520 --> 00:22:31,140
controlling machine and the remote

00:22:27,930 --> 00:22:33,270
device so if we were to shift this to a

00:22:31,140 --> 00:22:36,480
cloud scenario we've got our you know

00:22:33,270 --> 00:22:38,940
our Bekoff controller and we're going to

00:22:36,480 --> 00:22:41,100
do a custom module around you know

00:22:38,940 --> 00:22:43,950
Modbus implements you know some Modbus

00:22:41,100 --> 00:22:47,610
implementation could be serial probably

00:22:43,950 --> 00:22:49,530
tcp/ip in this case and since 2017 and I

00:22:47,610 --> 00:22:51,930
don't know how many serial networks are

00:22:49,530 --> 00:22:54,150
left around but we're going to do some

00:22:51,930 --> 00:22:55,860
sort of protocol ingestion and then

00:22:54,150 --> 00:22:57,090
we're going to pipe our data over to a

00:22:55,860 --> 00:22:59,370
module that's going to send the

00:22:57,090 --> 00:23:01,290
information up to the cloud okay that's

00:22:59,370 --> 00:23:02,940
going to be that IOT hub module more

00:23:01,290 --> 00:23:04,920
than likely that's going to help us

00:23:02,940 --> 00:23:06,510
basically receive messages from the

00:23:04,920 --> 00:23:10,020
broker that I was talking about earlier

00:23:06,510 --> 00:23:13,800
and fire that data up to IOT hub and to

00:23:10,020 --> 00:23:15,750
our Azure subscription so here is the

00:23:13,800 --> 00:23:18,330
actual gateway architecture what you

00:23:15,750 --> 00:23:21,810
would build if you were to employ the

00:23:18,330 --> 00:23:23,400
gateway SDK to you know your your

00:23:21,810 --> 00:23:25,860
installation so we've got our remote

00:23:23,400 --> 00:23:30,150
device it's talking whenever protocol

00:23:25,860 --> 00:23:32,670
you want co-op BACnet Modbus OPC UA the

00:23:30,150 --> 00:23:34,860
list goes on we're going to have some

00:23:32,670 --> 00:23:36,390
sort of ingestion module and that thing

00:23:34,860 --> 00:23:38,160
is going to be responsible to talking to

00:23:36,390 --> 00:23:41,850
our remote device it's going to publish

00:23:38,160 --> 00:23:44,100
messages content to the broker those

00:23:41,850 --> 00:23:45,660
messages can have properties things that

00:23:44,100 --> 00:23:47,610
you you know sort of metadata that you

00:23:45,660 --> 00:23:49,530
attach to the message that's going to

00:23:47,610 --> 00:23:53,040
allow you to do sort of filtering and

00:23:49,530 --> 00:23:55,110
post-processing down the road we're

00:23:53,040 --> 00:23:56,490
going to maybe deploy another module you

00:23:55,110 --> 00:23:59,160
know something that's going to do data

00:23:56,490 --> 00:24:01,110
filtering let's say worse we're a

00:23:59,160 --> 00:24:02,880
situation where we've got lots and lots

00:24:01,110 --> 00:24:05,490
and lots of telemetry data that's being

00:24:02,880 --> 00:24:06,870
generated right a temperature sensor and

00:24:05,490 --> 00:24:09,270
we're going to read that temperature

00:24:06,870 --> 00:24:11,400
sensor every 10 milliseconds or every

00:24:09,270 --> 00:24:14,490
100 milliseconds well more than likely

00:24:11,400 --> 00:24:16,020
our error threshold isn't actually all

00:24:14,490 --> 00:24:16,470
that high and we're really concerned

00:24:16,020 --> 00:24:18,990
about

00:24:16,470 --> 00:24:20,730
or strain temperature movements so most

00:24:18,990 --> 00:24:22,950
of our measurements will be exactly the

00:24:20,730 --> 00:24:24,990
same so in the filtering step we've got

00:24:22,950 --> 00:24:28,950
the ability to capture something like

00:24:24,990 --> 00:24:31,260
our Delta's right meaningful measure you

00:24:28,950 --> 00:24:33,360
know measurable change in say our

00:24:31,260 --> 00:24:35,850
temperature sensor reading and then we

00:24:33,360 --> 00:24:38,059
propagate the data path there you know

00:24:35,850 --> 00:24:40,620
only when the data is meaningful

00:24:38,059 --> 00:24:44,039
we have modules around identity mapping

00:24:40,620 --> 00:24:47,100
that will allow you to map sort of a MAC

00:24:44,039 --> 00:24:49,049
address of a you know network device

00:24:47,100 --> 00:24:51,960
that is in your field look you know your

00:24:49,049 --> 00:24:54,390
field deployment to a logical device

00:24:51,960 --> 00:24:56,100
address that's attached to the cloud and

00:24:54,390 --> 00:24:58,200
that way we can you know basically

00:24:56,100 --> 00:25:00,780
create a pipeline of data from you know

00:24:58,200 --> 00:25:02,580
device all the way up to the cloud and

00:25:00,780 --> 00:25:03,630
be talking about the same consistent

00:25:02,580 --> 00:25:04,169
thing from the perspective of the

00:25:03,630 --> 00:25:07,260
Gateway

00:25:04,169 --> 00:25:09,059
we've got logging modules baked in so

00:25:07,260 --> 00:25:10,860
you can flood data down to local log

00:25:09,059 --> 00:25:13,650
files particularly maybe around the

00:25:10,860 --> 00:25:14,610
behavior of your modules or error

00:25:13,650 --> 00:25:16,260
conditions

00:25:14,610 --> 00:25:17,460
you know notifications and that kind of

00:25:16,260 --> 00:25:19,530
stuff we can be writing that down to

00:25:17,460 --> 00:25:21,179
local files and then the last step here

00:25:19,530 --> 00:25:22,980
would be something like our IOT hub

00:25:21,179 --> 00:25:24,570
module where you're going to be pumping

00:25:22,980 --> 00:25:26,640
that data up to the cloud and again in

00:25:24,570 --> 00:25:28,740
each one of these steps you'll notice

00:25:26,640 --> 00:25:30,960
we've got properties for our messages as

00:25:28,740 --> 00:25:33,000
well as the content so you've got the

00:25:30,960 --> 00:25:35,250
ability to listen to a message stream

00:25:33,000 --> 00:25:36,840
write pipe you know plug modules

00:25:35,250 --> 00:25:39,030
together and then you have the

00:25:36,840 --> 00:25:41,850
opportunity to filter those messages

00:25:39,030 --> 00:25:46,799
within each module based on metadata

00:25:41,850 --> 00:25:50,720
about that message excuse me

00:25:46,799 --> 00:25:53,580
so how do you get started

00:25:50,720 --> 00:25:54,990
your basic workflow will look like this

00:25:53,580 --> 00:25:56,730
you'll have some amount of business

00:25:54,990 --> 00:25:59,250
logic that you'll want to implement that

00:25:56,730 --> 00:26:01,020
it's specific to your domain you will

00:25:59,250 --> 00:26:04,500
write modules that encapsulate that

00:26:01,020 --> 00:26:08,039
business logic you know as a single unit

00:26:04,500 --> 00:26:10,169
of deployment okay from there all of our

00:26:08,039 --> 00:26:12,630
configuration is done via a single JSON

00:26:10,169 --> 00:26:16,049
file for the Gateway SDK so you'll add a

00:26:12,630 --> 00:26:17,730
definition around your module what

00:26:16,049 --> 00:26:20,190
arguments it takes from sort of the

00:26:17,730 --> 00:26:22,110
environment so if you run time or

00:26:20,190 --> 00:26:24,059
operational specific characteristics you

00:26:22,110 --> 00:26:25,649
want to apply to your module you can do

00:26:24,059 --> 00:26:27,240
that through the configuration file and

00:26:25,649 --> 00:26:29,280
then at the end of the configuration

00:26:27,240 --> 00:26:29,820
file we'll actually wire up all of our

00:26:29,280 --> 00:26:32,520
module

00:26:29,820 --> 00:26:35,490
to create our data pipeline so ingestion

00:26:32,520 --> 00:26:38,790
to filtering to identity mapping right

00:26:35,490 --> 00:26:41,670
to logging and then off to IOT hub for

00:26:38,790 --> 00:26:44,010
our cloud ingestion and the last step

00:26:41,670 --> 00:26:46,320
will be deploying so as I mentioned

00:26:44,010 --> 00:26:47,880
before what's you know what's in the box

00:26:46,320 --> 00:26:50,070
what are we shipping right now what

00:26:47,880 --> 00:26:52,620
we're shipping a logger that will help

00:26:50,070 --> 00:26:54,630
you do local file logging we're shipping

00:26:52,620 --> 00:26:56,520
the IOT hub module that allows us to

00:26:54,630 --> 00:26:58,950
interoperate with IOT hub our path

00:26:56,520 --> 00:27:01,380
service in Azure we have a Bluetooth

00:26:58,950 --> 00:27:05,280
Bluetooth Low two Bluetooth Low Energy

00:27:01,380 --> 00:27:06,510
module that allows you some QuickStart

00:27:05,280 --> 00:27:08,880
steps particularly in the Bluetooth

00:27:06,510 --> 00:27:11,220
space so one thing I can suggest is if

00:27:08,880 --> 00:27:13,020
you look Texas interest Texas

00:27:11,220 --> 00:27:15,240
Instruments makes this really cool

00:27:13,020 --> 00:27:16,980
little sensor tag it's got a bunch of

00:27:15,240 --> 00:27:19,680
little different sensors on it you know

00:27:16,980 --> 00:27:22,590
temperature humidity velocity that kind

00:27:19,680 --> 00:27:24,840
of stuff and that thing talks via

00:27:22,590 --> 00:27:26,820
bluetooth LE it's relatively inexpensive

00:27:24,840 --> 00:27:31,350
and is a great way to sort of demo and

00:27:26,820 --> 00:27:32,760
try out these workflows for yourself we

00:27:31,350 --> 00:27:35,580
have the identity module which like I

00:27:32,760 --> 00:27:38,970
said helps us map you know some sort of

00:27:35,580 --> 00:27:41,850
on-premise identifiers up to our cloud

00:27:38,970 --> 00:27:43,860
device identity and then we've got a

00:27:41,850 --> 00:27:46,110
bunch of community added modules and

00:27:43,860 --> 00:27:48,330
this is the part you know part of the

00:27:46,110 --> 00:27:50,550
open source conversation here is that

00:27:48,330 --> 00:27:53,390
you know we are looking to try to build

00:27:50,550 --> 00:27:55,410
a community around modules and

00:27:53,390 --> 00:27:57,840
functionality that people can just pull

00:27:55,410 --> 00:28:00,270
off the shelf and use within their data

00:27:57,840 --> 00:28:02,850
pipelines so places where that's

00:28:00,270 --> 00:28:04,680
relatively interesting OPC UA we have a

00:28:02,850 --> 00:28:07,080
module for right now

00:28:04,680 --> 00:28:08,790
Modbus which is an you know an open

00:28:07,080 --> 00:28:10,350
protocol in the industrial automation

00:28:08,790 --> 00:28:12,930
space as well

00:28:10,350 --> 00:28:14,790
BACnet I'm actually kicking off a

00:28:12,930 --> 00:28:17,940
project relatively soon to do co-op

00:28:14,790 --> 00:28:19,050
integration for low-power devices which

00:28:17,940 --> 00:28:20,910
would be I think a relatively

00:28:19,050 --> 00:28:23,730
interesting build and I've also

00:28:20,910 --> 00:28:25,980
published stuff around a compression

00:28:23,730 --> 00:28:27,540
using gzip compression in your data

00:28:25,980 --> 00:28:29,400
pipelines and then we've got some

00:28:27,540 --> 00:28:33,000
additional modules coming around

00:28:29,400 --> 00:28:35,460
batching so we are looking for you know

00:28:33,000 --> 00:28:37,350
community help to build out sort of this

00:28:35,460 --> 00:28:39,270
ecosystem so that we have the

00:28:37,350 --> 00:28:41,730
opportunity to pull down you know

00:28:39,270 --> 00:28:45,320
gateways pull down modules and kick

00:28:41,730 --> 00:28:45,320
things off the ground relatively quickly

00:28:47,180 --> 00:28:51,390
okay so the question was all of these

00:28:49,680 --> 00:28:52,620
modules can be configured through JSON

00:28:51,390 --> 00:28:54,750
yes they can

00:28:52,620 --> 00:28:56,340
so in fact that is how you will

00:28:54,750 --> 00:28:59,430
configure them is using a JSON file

00:28:56,340 --> 00:29:05,780
which we will see in just a moment and

00:28:59,430 --> 00:29:12,210
by just a moment I mean now demo time so

00:29:05,780 --> 00:29:14,930
let's minimize this otherwise that to

00:29:12,210 --> 00:29:14,930
display

00:29:23,990 --> 00:29:28,639
we're going to do a little uh maybe a

00:29:25,879 --> 00:29:30,490
little duplicate display are we going to

00:29:28,639 --> 00:29:35,720
do that there we go

00:29:30,490 --> 00:29:37,490
okay so if I told you that I had my

00:29:35,720 --> 00:29:40,700
slide still up would you believe me the

00:29:37,490 --> 00:29:45,399
answer should be yes if I told you that

00:29:40,700 --> 00:29:45,399
I could run it didn't do it did it

00:29:45,669 --> 00:29:53,809
displays duplicate these displays apply

00:29:50,320 --> 00:29:57,139
keep these changes all right see if

00:29:53,809 --> 00:29:58,669
you're going to stay there okay so what

00:29:57,139 --> 00:30:04,039
do I have here anybody recognize this

00:29:58,669 --> 00:30:07,129
desktop somebody - boo - yeah good so I

00:30:04,039 --> 00:30:09,019
am running a boo - inside of a VM and

00:30:07,129 --> 00:30:11,840
hyper-v on my Windows machine because

00:30:09,019 --> 00:30:17,929
I'm cool like that and I have a super

00:30:11,840 --> 00:30:21,019
secret password there we go so the

00:30:17,929 --> 00:30:22,730
gateway SDK basically looks like this

00:30:21,019 --> 00:30:28,009
when you clone it you're going to have

00:30:22,730 --> 00:30:30,200
things like bindings dependencies some

00:30:28,009 --> 00:30:34,009
core informations and docs some

00:30:30,200 --> 00:30:36,080
dependencies module sample tools etc the

00:30:34,009 --> 00:30:37,309
build for this is all done in C make and

00:30:36,080 --> 00:30:38,509
the instructions are actually really

00:30:37,309 --> 00:30:40,879
good on the website and we'll kind of

00:30:38,509 --> 00:30:42,499
look them over towards the end but let's

00:30:40,879 --> 00:30:44,240
drill into our samples real quick just

00:30:42,499 --> 00:30:47,869
we can look at oh I already have it up

00:30:44,240 --> 00:30:52,100
awesome so this is what the Gateway

00:30:47,869 --> 00:30:56,960
configuration looks like at the top 10

00:30:52,100 --> 00:31:00,940
but no you can't read that can't we it's

00:30:56,960 --> 00:31:00,940
probably like maybe shovel

00:31:01,280 --> 00:31:04,830
right here I'm going to slip back to

00:31:03,150 --> 00:31:08,220
Visual Studio code hopefully we can make

00:31:04,830 --> 00:31:13,140
this a little bit bigger for you there

00:31:08,220 --> 00:31:15,240
we go okay so this is the same

00:31:13,140 --> 00:31:18,809
configuration file happens to be a

00:31:15,240 --> 00:31:20,880
Windows version - the parody one that is

00:31:18,809 --> 00:31:22,410
for Linux so the top of our

00:31:20,880 --> 00:31:24,480
configuration file like you were asking

00:31:22,410 --> 00:31:25,559
we're going to define loaders and these

00:31:24,480 --> 00:31:28,470
are the things that are going to find

00:31:25,559 --> 00:31:31,230
those extra runtime bindings for Java no

00:31:28,470 --> 00:31:32,820
dotnet so we're going to say where we're

00:31:31,230 --> 00:31:34,169
going to get our binding from any

00:31:32,820 --> 00:31:38,520
configuration parameters for that

00:31:34,169 --> 00:31:40,080
binding it's type in the name continuing

00:31:38,520 --> 00:31:42,179
along we're going to find the modules

00:31:40,080 --> 00:31:43,799
that we want to have loaded so in this

00:31:42,179 --> 00:31:46,830
particular case we're going to load up a

00:31:43,799 --> 00:31:48,450
module called node printer it's loader

00:31:46,830 --> 00:31:50,340
name is node which is going to be mapped

00:31:48,450 --> 00:31:52,110
to that loader array that we saw above

00:31:50,340 --> 00:31:53,640
and we're going to give it an entry

00:31:52,110 --> 00:31:55,860
point that's going to give it a path

00:31:53,640 --> 00:31:57,299
basically to the javascript file that we

00:31:55,860 --> 00:32:00,840
want executed as part of this data

00:31:57,299 --> 00:32:04,970
pipeline and we can keep adding

00:32:00,840 --> 00:32:07,820
basically keep adding different modules

00:32:04,970 --> 00:32:09,990
to the JSON file you know to that array

00:32:07,820 --> 00:32:12,630
specifying all the functionality that we

00:32:09,990 --> 00:32:14,610
want you know this particular case let's

00:32:12,630 --> 00:32:19,590
see now as the writer what's a good one

00:32:14,610 --> 00:32:20,790
here here so here's our ist hub writer

00:32:19,590 --> 00:32:23,400
so this is the thing that's going to be

00:32:20,790 --> 00:32:24,960
responsible for taking our you know sort

00:32:23,400 --> 00:32:26,700
of the end of the pipeline out of our

00:32:24,960 --> 00:32:29,040
message broker in the Gateway SDK and

00:32:26,700 --> 00:32:32,370
shuffling that information up to IOT hub

00:32:29,040 --> 00:32:34,049
for us in seeing in ARBs in this ARBs

00:32:32,370 --> 00:32:36,120
object we've got a connection string

00:32:34,049 --> 00:32:39,570
element and here I've got the connection

00:32:36,120 --> 00:32:41,910
string for my particular device to wire

00:32:39,570 --> 00:32:45,330
that excuse me to wire the Gateway up to

00:32:41,910 --> 00:32:46,679
Azure IOT hub at the very end of this

00:32:45,330 --> 00:32:49,169
file you'll notice a section called

00:32:46,679 --> 00:32:51,299
links and what this is going to do is

00:32:49,169 --> 00:32:54,210
this is telling the Gateway how to plumb

00:32:51,299 --> 00:32:55,350
all of our different modules together so

00:32:54,210 --> 00:32:58,559
in this particular case I'm going to

00:32:55,350 --> 00:33:00,240
define a source that could be every

00:32:58,559 --> 00:33:02,340
single module so that's what the star

00:33:00,240 --> 00:33:04,380
stands for and I'm going to sink down to

00:33:02,340 --> 00:33:07,080
the logger what that means is everything

00:33:04,380 --> 00:33:08,760
that the you know each module all the

00:33:07,080 --> 00:33:10,800
data the module produces that it writes

00:33:08,760 --> 00:33:14,340
out is going to go down to the logger

00:33:10,800 --> 00:33:16,350
for processing our next one are know

00:33:14,340 --> 00:33:18,690
sensor we're going to wire that up to

00:33:16,350 --> 00:33:21,210
the IOT hub writer right so we're going

00:33:18,690 --> 00:33:24,059
to take our basically simulated pieces

00:33:21,210 --> 00:33:26,909
of our code that runs the simulator

00:33:24,059 --> 00:33:29,250
create some fake data and push that data

00:33:26,909 --> 00:33:30,900
up to IOT hub and additionally we'll

00:33:29,250 --> 00:33:32,760
print that out to the console when we

00:33:30,900 --> 00:33:34,620
actually go to run this so this is what

00:33:32,760 --> 00:33:38,250
your JSON file looks like and it really

00:33:34,620 --> 00:33:39,779
is not all that complicated you know

00:33:38,250 --> 00:33:42,659
because it's jason we've got the ability

00:33:39,779 --> 00:33:44,700
to also script and automate this so if

00:33:42,659 --> 00:33:46,620
you're thinking like you know I've got

00:33:44,700 --> 00:33:48,510
multiple different runtime environments

00:33:46,620 --> 00:33:51,600
that need different modules deployed it

00:33:48,510 --> 00:33:54,120
is relatively simple to script the

00:33:51,600 --> 00:33:55,799
creation of this file based on different

00:33:54,120 --> 00:33:57,480
parameters in fact I've got a really

00:33:55,799 --> 00:34:00,480
kind of cool blog post about how to do

00:33:57,480 --> 00:34:02,970
that with PowerShell to just define up a

00:34:00,480 --> 00:34:04,799
series of input and then it will build

00:34:02,970 --> 00:34:06,690
this entire file as part of the

00:34:04,799 --> 00:34:10,080
deployment and build pipelines for you

00:34:06,690 --> 00:34:15,060
so that whole thing is a your can be

00:34:10,080 --> 00:34:18,919
automated let's see let's put back okay

00:34:15,060 --> 00:34:23,339
so we're back in our installation and

00:34:18,919 --> 00:34:28,980
let me minimize this let's actually run

00:34:23,339 --> 00:34:31,200
this thing so excuse me the build

00:34:28,980 --> 00:34:32,970
process for this at least this

00:34:31,200 --> 00:34:35,669
particular demo because I'm using node

00:34:32,970 --> 00:34:38,280
is two step one we need to build some

00:34:35,669 --> 00:34:40,800
bindings right that will tell our

00:34:38,280 --> 00:34:41,820
gateway SDK how to interoperate with the

00:34:40,800 --> 00:34:43,679
node scripts that we're going to run

00:34:41,820 --> 00:34:45,869
okay and that obviously means building a

00:34:43,679 --> 00:34:48,210
node environment so we're going to start

00:34:45,869 --> 00:34:50,790
by building our bindings and then we're

00:34:48,210 --> 00:34:53,159
going to basically build the SDK with

00:34:50,790 --> 00:34:55,200
those bindings enabled and and you know

00:34:53,159 --> 00:34:57,180
tell the SDK build scripts look go ahead

00:34:55,200 --> 00:34:59,070
and enable all these bindings and it

00:34:57,180 --> 00:35:00,780
will point to those those particular

00:34:59,070 --> 00:35:03,930
artifacts for integration now that

00:35:00,780 --> 00:35:07,650
process does take a while it is it is

00:35:03,930 --> 00:35:09,180
not short you know the build process for

00:35:07,650 --> 00:35:11,339
the node binding is probably 20 minutes

00:35:09,180 --> 00:35:14,130
and it's another 10 minutes for the SDK

00:35:11,339 --> 00:35:21,480
to build its see that's kind of the way

00:35:14,130 --> 00:35:23,920
life is excuse me my apology so let's

00:35:21,480 --> 00:35:28,300
see go up to

00:35:23,920 --> 00:35:33,280
run this if I can find my command that I

00:35:28,300 --> 00:35:35,820
had so neatly typed in before I can be

00:35:33,280 --> 00:35:35,820
able to find it

00:35:37,710 --> 00:35:47,530
nope all right I did this from scratch

00:35:42,220 --> 00:35:57,240
dot slash node see you got that flash -

00:35:47,530 --> 00:36:00,240
flash - flash build ain't no a samples

00:35:57,240 --> 00:36:00,240
node

00:36:12,760 --> 00:36:18,220
oh that's right there don't flush notes

00:36:16,450 --> 00:36:30,310
simple sample and then let's do doesn't

00:36:18,220 --> 00:36:32,560
flush samples node source gateway there

00:36:30,310 --> 00:36:35,050
we go okay so I'm going to call into the

00:36:32,560 --> 00:36:37,320
Esso that I created wow that's really

00:36:35,050 --> 00:36:37,320
small

00:36:37,990 --> 00:36:47,740
how do I increase the font size on this

00:36:43,350 --> 00:36:49,920
yeah it's not it's not giving me the

00:36:47,740 --> 00:36:49,920
love

00:36:54,619 --> 00:37:01,059
yeah let's hope it's there oh there we

00:36:57,229 --> 00:37:01,059
go Oh ctrl + +

00:37:03,170 --> 00:37:09,320
there we go okay so here we're going to

00:37:06,650 --> 00:37:10,760
go ahead and fill we're going to execute

00:37:09,320 --> 00:37:12,410
our SL file that we've generated from

00:37:10,760 --> 00:37:16,580
the build we're going to pass it that

00:37:12,410 --> 00:37:19,940
gateway sample code excuse me that we

00:37:16,580 --> 00:37:21,620
were working on earlier and right now

00:37:19,940 --> 00:37:23,360
what is basically happening is we're

00:37:21,620 --> 00:37:25,280
generating fake data that data is being

00:37:23,360 --> 00:37:29,600
printed to the screen and we're also

00:37:25,280 --> 00:37:33,170
streaming that live up to Asher and we

00:37:29,600 --> 00:37:35,570
will prove that that's the case by going

00:37:33,170 --> 00:37:40,760
here and this is my Azure subscription

00:37:35,570 --> 00:37:42,230
where I have my IOT hub configured and

00:37:40,760 --> 00:37:43,640
if everything goes well it will show

00:37:42,230 --> 00:37:47,390
more than the seven that were there

00:37:43,640 --> 00:37:51,190
before give this a second to load round

00:37:47,390 --> 00:37:51,190
of applause if this has worked please

00:37:52,090 --> 00:37:58,910
somebody want to do the jeopardy theme

00:37:53,960 --> 00:38:00,850
song while this loves mmm oh and it

00:37:58,910 --> 00:38:06,010
still says seven how pleasant

00:38:00,850 --> 00:38:06,010
let's do activities

00:38:07,680 --> 00:38:10,820
[Music]

00:38:21,470 --> 00:38:26,119
to the dashboard all right well it

00:38:24,710 --> 00:38:28,340
certainly should have sent those

00:38:26,119 --> 00:38:31,849
messages up but does not appear to be

00:38:28,340 --> 00:38:33,680
showing yet in the in the dashboard this

00:38:31,849 --> 00:38:35,390
can occasionally take a little while for

00:38:33,680 --> 00:38:38,690
the telemetry data to show up on the

00:38:35,390 --> 00:38:41,890
home screen we'll try the Diagnostics

00:38:38,690 --> 00:38:41,890
information here in a second

00:38:54,440 --> 00:38:57,250
all right

00:39:01,960 --> 00:39:08,619
there we go 29 messages look at that

00:39:04,450 --> 00:39:12,240
round of applause for IOT hub being kind

00:39:08,619 --> 00:39:14,859
of Sloane and just like that take it up

00:39:12,240 --> 00:39:17,619
anyhow so basically we've what we've

00:39:14,859 --> 00:39:19,990
done here is we've you know built a set

00:39:17,619 --> 00:39:22,890
of language bindings right we've built

00:39:19,990 --> 00:39:25,770
the SDK we've deployed our modules

00:39:22,890 --> 00:39:28,089
through configuration with our JSON file

00:39:25,770 --> 00:39:30,790
we take that thing off and let it run

00:39:28,089 --> 00:39:33,339
and you know that's basically the story

00:39:30,790 --> 00:39:35,440
it is relatively fast to get started

00:39:33,339 --> 00:39:37,000
here particularly if you're looking to

00:39:35,440 --> 00:39:38,650
do sort of integration environments

00:39:37,000 --> 00:39:43,330
where you need to read from a lot of

00:39:38,650 --> 00:39:52,890
different types of sensor data excuse me

00:39:43,330 --> 00:39:52,890
so kick this over

00:40:00,510 --> 00:40:07,530
resources okay this is the location of

00:40:04,560 --> 00:40:11,420
the gateway SDK it's github.com slash

00:40:07,530 --> 00:40:14,760
asher slash azure IOT gateway sdk our

00:40:11,420 --> 00:40:17,480
api reference is available on a github

00:40:14,760 --> 00:40:20,700
io page attached to the same repository

00:40:17,480 --> 00:40:23,040
our built in modules are listed out sort

00:40:20,700 --> 00:40:24,630
of at this URL they're also on the home

00:40:23,040 --> 00:40:28,050
page which I'll show up in just a second

00:40:24,630 --> 00:40:32,100
and then our featured modules are a just

00:40:28,050 --> 00:40:34,380
a deep link off the main page so the

00:40:32,100 --> 00:40:36,510
question to you is can you go out and

00:40:34,380 --> 00:40:38,700
build something on the gateway and if so

00:40:36,510 --> 00:40:41,780
can you help us by contributing to the

00:40:38,700 --> 00:40:44,700
ecosystem that's my one one plea to you

00:40:41,780 --> 00:40:47,940
is to help us build an ecosystem around

00:40:44,700 --> 00:40:50,520
gateway applications for IOT I think

00:40:47,940 --> 00:40:52,410
there's a lot of potential here way more

00:40:50,520 --> 00:40:55,800
potential than I think we've even begun

00:40:52,410 --> 00:40:57,690
to really think about in particular

00:40:55,800 --> 00:40:59,010
around the edge compute space right if

00:40:57,690 --> 00:41:00,810
we're going to deploy something like a

00:40:59,010 --> 00:41:03,000
gateway we have the opportunity to

00:41:00,810 --> 00:41:04,860
actually deploy some real hardware out

00:41:03,000 --> 00:41:07,680
into the field and now all of a sudden

00:41:04,860 --> 00:41:10,110
you know not just edge analytics become

00:41:07,680 --> 00:41:11,880
sort of within scope but actual edge

00:41:10,110 --> 00:41:14,820
compute becomes within scope right we

00:41:11,880 --> 00:41:16,670
can do intelligent decision making right

00:41:14,820 --> 00:41:19,410
relay information of the cloud

00:41:16,670 --> 00:41:22,110
potentially close some stopgap with

00:41:19,410 --> 00:41:24,420
local code execution while we wait for

00:41:22,110 --> 00:41:26,400
some longer running distributed process

00:41:24,420 --> 00:41:28,350
to finish up into the cloud and to read

00:41:26,400 --> 00:41:31,020
that relay that information back to us

00:41:28,350 --> 00:41:32,280
on Prem to our gateway for further

00:41:31,020 --> 00:41:36,440
decision-making so I think there's a

00:41:32,280 --> 00:41:38,340
great opportunity here for integration

00:41:36,440 --> 00:41:40,530
this is who I am

00:41:38,340 --> 00:41:43,590
bilberry you can follow me on Twitter or

00:41:40,530 --> 00:41:45,450
github at William berry III I blogged

00:41:43,590 --> 00:41:48,030
relatively extensively particularly in

00:41:45,450 --> 00:41:50,040
the areas of IOT for those of you that

00:41:48,030 --> 00:41:53,160
are interested that is actually me

00:41:50,040 --> 00:41:56,010
welding so you know that's what I used

00:41:53,160 --> 00:41:59,760
to do back in the day before I got into

00:41:56,010 --> 00:42:04,100
software and I will bring up really

00:41:59,760 --> 00:42:07,350
quick the IOT gateway sdk homepage here

00:42:04,100 --> 00:42:09,120
this is the github repository you'll see

00:42:07,350 --> 00:42:11,810
a bunch of poop of course it's not

00:42:09,120 --> 00:42:11,810
duplicating now

00:42:30,030 --> 00:42:33,360
there we go

00:42:37,370 --> 00:42:43,850
okay here is the gateway SDK page you'll

00:42:43,010 --> 00:42:46,280
see a bunch of really great information

00:42:43,850 --> 00:42:47,990
about architectural drawings sort of

00:42:46,280 --> 00:42:50,870
fundamentals around how to get started

00:42:47,990 --> 00:42:53,030
with the gateway SDK the baked in

00:42:50,870 --> 00:42:55,100
modules that we have the Bluetooth le a

00:42:53,030 --> 00:42:57,380
simple hello world identity mapping

00:42:55,100 --> 00:42:59,770
again that IOT hub and the logging

00:42:57,380 --> 00:43:02,720
modules something for Azure functions

00:42:59,770 --> 00:43:05,840
our featured modules from the community

00:43:02,720 --> 00:43:09,170
like I said Modbus our OPC UA client as

00:43:05,840 --> 00:43:11,810
well as the gzip compression module and

00:43:09,170 --> 00:43:13,340
then sort of a standing operating system

00:43:11,810 --> 00:43:14,870
compatibility and these are basically

00:43:13,340 --> 00:43:16,730
environments that we're building and

00:43:14,870 --> 00:43:18,680
deploying against to check to make sure

00:43:16,730 --> 00:43:20,180
that we've got full operational capacity

00:43:18,680 --> 00:43:22,250
and that includes things like Wind River

00:43:20,180 --> 00:43:23,780
right which I think should be

00:43:22,250 --> 00:43:25,490
particularly interesting to this crowd

00:43:23,780 --> 00:43:28,730
you know if you're working in the RTOS

00:43:25,490 --> 00:43:31,430
space you know that's kind of a cool

00:43:28,730 --> 00:43:35,540
add-on hardware compatibility doc

00:43:31,430 --> 00:43:37,190
samples etc so with that I'll hand you

00:43:35,540 --> 00:43:39,500
all back a few minutes for your day I

00:43:37,190 --> 00:43:43,220
really appreciate your time coming out

00:43:39,500 --> 00:43:46,580
and hearing about the azure gateway SDK

00:43:43,220 --> 00:43:49,970
and yeah thank you very much questions

00:43:46,580 --> 00:43:51,680
yes of course how can I forget it and

00:43:49,970 --> 00:43:53,570
like I said I've got freebies I said

00:43:51,680 --> 00:43:57,190
that at the beginning too so alright

00:43:53,570 --> 00:43:57,190
reach first go for it

00:44:11,780 --> 00:44:14,780
yep

00:44:33,120 --> 00:44:36,370
[Music]

00:44:54,350 --> 00:44:58,140
sure okay

00:44:56,040 --> 00:44:59,790
so great question the question was

00:44:58,140 --> 00:45:02,640
basically around will we be open

00:44:59,790 --> 00:45:04,500
sourcing something on the cloud side for

00:45:02,640 --> 00:45:05,970
Gateway functionality to connect to and

00:45:04,500 --> 00:45:08,580
I think this is where things get

00:45:05,970 --> 00:45:10,020
relatively particular right if you are

00:45:08,580 --> 00:45:11,970
looking to operate you know

00:45:10,020 --> 00:45:13,740
infrastructure as a service in the cloud

00:45:11,970 --> 00:45:16,170
right so you're operating your own VM

00:45:13,740 --> 00:45:18,180
and your own servers right there is

00:45:16,170 --> 00:45:21,180
fundamentally no reason you cannot add

00:45:18,180 --> 00:45:22,980
an endpoint to those systems that is you

00:45:21,180 --> 00:45:25,140
know mirrored with a client on the

00:45:22,980 --> 00:45:27,030
client side so what protocol would you

00:45:25,140 --> 00:45:29,340
want to be speaking between your on-prem

00:45:27,030 --> 00:45:31,380
installation and your is services that

00:45:29,340 --> 00:45:33,570
are in the cloud right potentially an

00:45:31,380 --> 00:45:37,710
open protocol I would assume you know it

00:45:33,570 --> 00:45:39,690
could be HTTP right so let's go with

00:45:37,710 --> 00:45:43,440
that so we're talking you know on Prem

00:45:39,690 --> 00:45:45,600
you know HTTP client to server in the

00:45:43,440 --> 00:45:47,220
cloud right and that's fundamentally

00:45:45,600 --> 00:45:48,480
what we're hoping to get you know sort

00:45:47,220 --> 00:45:50,340
of contributions around from the

00:45:48,480 --> 00:45:53,590
community

00:45:50,340 --> 00:45:53,590
[Music]

00:45:56,610 --> 00:46:01,460
I mean we don't have anything on yet

00:46:03,770 --> 00:46:09,240
well okay so what you really have is a

00:46:06,960 --> 00:46:11,610
gateway solution on Prem that is open

00:46:09,240 --> 00:46:13,500
source how you fundamentally use that

00:46:11,610 --> 00:46:15,150
like what cloud you connect to is

00:46:13,500 --> 00:46:16,590
basically up to you

00:46:15,150 --> 00:46:18,090
you know we provide out of the box

00:46:16,590 --> 00:46:20,700
function I don't even allows you to

00:46:18,090 --> 00:46:23,160
connect that that gateway installation

00:46:20,700 --> 00:46:24,660
to Azure but you can write modules that

00:46:23,160 --> 00:46:26,850
would do whatever you want right they

00:46:24,660 --> 00:46:29,010
just drop into the data processing

00:46:26,850 --> 00:46:30,930
pipeline I'll give you an example so

00:46:29,010 --> 00:46:33,060
let's say you want to de-risk your

00:46:30,930 --> 00:46:35,670
solution by trying out the gateway

00:46:33,060 --> 00:46:37,920
on-premises right without actually doing

00:46:35,670 --> 00:46:40,890
any cloud connectivity you could really

00:46:37,920 --> 00:46:44,610
just stop the Gateway SDK at the locker

00:46:40,890 --> 00:46:46,890
push down to local files and work off of

00:46:44,610 --> 00:46:48,630
that sort of interface in a more SCADA

00:46:46,890 --> 00:46:49,830
style system right where everything is

00:46:48,630 --> 00:46:52,050
going to be constrained within your

00:46:49,830 --> 00:46:53,700
operational environment and test down

00:46:52,050 --> 00:46:55,620
and run the Gateway before you're ready

00:46:53,700 --> 00:46:58,200
to make the move you know to shipping

00:46:55,620 --> 00:47:00,690
the data to a public cloud whatever

00:46:58,200 --> 00:47:02,840
public cloud that may end up being so

00:47:00,690 --> 00:47:05,970
you know the add-ons for us around the

00:47:02,840 --> 00:47:07,410
Gateway SDK are in particular tying in

00:47:05,970 --> 00:47:09,870
to our pad services right

00:47:07,410 --> 00:47:11,430
which you know is IOT hub and that's

00:47:09,870 --> 00:47:13,530
going to come with things like device

00:47:11,430 --> 00:47:16,020
management and those add-on services

00:47:13,530 --> 00:47:18,500
above and beyond sort of just raw data

00:47:16,020 --> 00:47:18,500
ingestion

00:47:24,069 --> 00:47:29,240
okay so the IOT hub writer module that

00:47:27,289 --> 00:47:33,740
we support out of the box to send data

00:47:29,240 --> 00:47:38,270
to Azure supports AMQP supports NQ TT

00:47:33,740 --> 00:47:39,950
and supports HTTP so those are your sort

00:47:38,270 --> 00:47:42,470
of out-of-the-box your three protocols

00:47:39,950 --> 00:47:46,460
that will be interacting with the IOT

00:47:42,470 --> 00:47:55,520
hub path service with yeah yeah yeah

00:47:46,460 --> 00:47:57,200
so 509 x.509 certificate it's up to you

00:47:55,520 --> 00:47:58,819
to implement correct or whatever

00:47:57,200 --> 00:48:00,890
protocol that you're using however that

00:47:58,819 --> 00:48:06,559
protocol handles security or data

00:48:00,890 --> 00:48:09,910
encryption and so on uh between the

00:48:06,559 --> 00:48:09,910
Gateway and the cloud

00:48:28,130 --> 00:48:33,210
so just a real quick question why would

00:48:31,320 --> 00:48:42,300
you not want to use certs that were

00:48:33,210 --> 00:49:02,160
signed by a public authority okay

00:48:42,300 --> 00:49:03,480
so yep sure so your that is a the shark

00:49:02,160 --> 00:49:06,090
just to repeat the question it was

00:49:03,480 --> 00:49:09,300
around using privately while publicly

00:49:06,090 --> 00:49:12,060
signs with private certs for device

00:49:09,300 --> 00:49:14,210
management situations and I can get some

00:49:12,060 --> 00:49:16,470
information to you after this on that

00:49:14,210 --> 00:49:21,920
sorry I can't answer that right off the

00:49:16,470 --> 00:49:24,920
top of my head for you yeah oh great

00:49:21,920 --> 00:49:24,920
yeah

00:49:31,180 --> 00:49:34,180
yep

00:49:36,470 --> 00:49:40,440
you watch it

00:49:38,430 --> 00:49:43,890
yeah

00:49:40,440 --> 00:49:45,300
so the question was why choose as you're

00:49:43,890 --> 00:49:47,520
over helix device Claude and I actually

00:49:45,300 --> 00:49:48,750
can't speak to that I have no experience

00:49:47,520 --> 00:49:53,180
with the Wind River products

00:49:48,750 --> 00:50:01,920
unfortunately so sorry about that

00:49:53,180 --> 00:50:03,420
a limo tech in terms of size memory

00:50:01,920 --> 00:50:05,850
allocation that kind of stuff I don't

00:50:03,420 --> 00:50:08,720
have those statistics for you but but

00:50:05,850 --> 00:50:08,720
it's relatively small

00:50:23,420 --> 00:50:26,900
so the question was does the Gateway

00:50:24,799 --> 00:50:29,510
support other clouds and taking my

00:50:26,900 --> 00:50:31,490
Microsoft hat off fundamentally and we

00:50:29,510 --> 00:50:33,470
kind of touched on this earlier you can

00:50:31,490 --> 00:50:35,299
write you know a module at the end of

00:50:33,470 --> 00:50:38,240
the pipeline to do whatever you want

00:50:35,299 --> 00:50:41,000
right so if you want it to consume some

00:50:38,240 --> 00:50:43,339
REST API that you've deployed to say a

00:50:41,000 --> 00:50:44,930
service fabric cluster or to some I as

00:50:43,339 --> 00:50:47,539
somewhere or even to your own data

00:50:44,930 --> 00:50:49,880
center that's perfectly within scope and

00:50:47,539 --> 00:50:51,500
capability of the Gateway itself right

00:50:49,880 --> 00:50:53,390
because we're just what we're trying to

00:50:51,500 --> 00:50:55,789
provide to you is this sort of core

00:50:53,390 --> 00:50:57,529
baseline infrastructure around message

00:50:55,789 --> 00:51:02,319
brokers and a message they're sort of a

00:50:57,529 --> 00:51:02,319
data pipeline between ingestion to exit

00:51:02,920 --> 00:51:06,950
so the question is do we think we would

00:51:04,910 --> 00:51:08,690
accept drivers for the clouds upstream

00:51:06,950 --> 00:51:11,510
and that's a great question I don't know

00:51:08,690 --> 00:51:14,690
and frankly I would think that the team

00:51:11,510 --> 00:51:15,980
would yeah in fact that would probably

00:51:14,690 --> 00:51:18,230
be something I'd be willing to push

00:51:15,980 --> 00:51:20,599
personally you know was to write modules

00:51:18,230 --> 00:51:21,980
around that so you know I think we have

00:51:20,599 --> 00:51:23,329
a really great story around device

00:51:21,980 --> 00:51:25,190
management that kind of stuff for a sure

00:51:23,329 --> 00:51:32,690
but you know there are compelling

00:51:25,190 --> 00:51:36,380
stories all over the place so one would

00:51:32,690 --> 00:51:38,559
presuppose yeah any other questions

00:51:36,380 --> 00:51:38,559
yes

00:51:42,060 --> 00:51:47,210
okay so how do we compare our solution

00:51:44,670 --> 00:51:49,500
to equip Sakura I don't have any

00:51:47,210 --> 00:51:52,170
personal experience of current so I

00:51:49,500 --> 00:51:54,180
don't know I just started playing with

00:51:52,170 --> 00:51:57,060
it last week to try and get a feel

00:51:54,180 --> 00:52:00,680
around it so I wish I could dance to

00:51:57,060 --> 00:52:00,680
that personally but I'm sorry I can't

00:52:07,490 --> 00:52:11,820
yeah so everything that's the question

00:52:10,410 --> 00:52:13,680
was you know is everything that's in the

00:52:11,820 --> 00:52:15,360
box you know allow you to connect to a

00:52:13,680 --> 00:52:17,760
sure and sort of get started and the

00:52:15,360 --> 00:52:19,800
answer is yes the hello world samples

00:52:17,760 --> 00:52:22,980
will get you up and running sending data

00:52:19,800 --> 00:52:25,920
to Azure you can get started with a free

00:52:22,980 --> 00:52:27,990
account at you know I think it's portal

00:52:25,920 --> 00:52:29,340
laser comm will allow you to get started

00:52:27,990 --> 00:52:31,290
with a free account for a or with

00:52:29,340 --> 00:52:34,230
certain number of credits and begin

00:52:31,290 --> 00:52:35,790
exploring IOT hub so I use IOT hub

00:52:34,230 --> 00:52:38,910
personally for my own home automation

00:52:35,790 --> 00:52:40,890
system I use the free tier it's good for

00:52:38,910 --> 00:52:43,110
eight thousand messages a day which is

00:52:40,890 --> 00:52:44,490
more than my children can turn the

00:52:43,110 --> 00:52:47,520
lights on and off and a light switch

00:52:44,490 --> 00:52:49,080
rave at home so you know it serves my

00:52:47,520 --> 00:52:52,170
purposes pretty well and it's totally

00:52:49,080 --> 00:52:54,600
free so I do pay a limited amount for

00:52:52,170 --> 00:53:02,540
storage down to doc DB to keep that data

00:52:54,600 --> 00:53:02,540
but any other questions yeah sure

00:53:05,390 --> 00:53:11,490
have you filed an issue on the the

00:53:07,920 --> 00:53:12,720
github repository okay yeah I would so

00:53:11,490 --> 00:53:14,940
the question was whether or not we could

00:53:12,720 --> 00:53:16,710
have some functions return real error

00:53:14,940 --> 00:53:19,590
codes and I would really encourage you

00:53:16,710 --> 00:53:21,960
to file an issue in github we are

00:53:19,590 --> 00:53:23,670
actively monitoring it right the code

00:53:21,960 --> 00:53:24,900
development for the SDK is done out in

00:53:23,670 --> 00:53:27,330
the open

00:53:24,900 --> 00:53:29,370
you know I file issues with the team all

00:53:27,330 --> 00:53:31,260
the time you know and that's that's my

00:53:29,370 --> 00:53:32,790
channel of communication of them is

00:53:31,260 --> 00:53:34,770
through github issues and part of that's

00:53:32,790 --> 00:53:36,930
about trying to encode some of this

00:53:34,770 --> 00:53:38,850
knowledge basically in the github issues

00:53:36,930 --> 00:53:41,160
for people to be able to search and and

00:53:38,850 --> 00:53:42,660
you know find down the road so it's an

00:53:41,160 --> 00:53:54,570
important form of documentation for us

00:53:42,660 --> 00:53:57,570
as well yes yes yes we are currently

00:53:54,570 --> 00:53:59,420
using C make and I don't know if there

00:53:57,570 --> 00:54:17,940
have been any requests the team to use

00:53:59,420 --> 00:54:20,070
another build platform yeah yeah

00:54:17,940 --> 00:54:21,150
unfortunately you know obviously can't

00:54:20,070 --> 00:54:22,830
speak to the build system

00:54:21,150 --> 00:54:31,700
I'm just the user yeah no totally

00:54:22,830 --> 00:54:36,750
totally any other questions yeah eight

00:54:31,700 --> 00:54:38,540
straight today I want to push well I

00:54:36,750 --> 00:54:43,020
don't know what all my work with

00:54:38,540 --> 00:54:44,850
vibration data machinery we said that

00:54:43,020 --> 00:54:46,980
day not in small chunks but anybody says

00:54:44,850 --> 00:54:49,140
oh I really won't look at 30 killer data

00:54:46,980 --> 00:54:52,410
because that's my create transform show

00:54:49,140 --> 00:54:56,480
system problem is is would that be

00:54:52,410 --> 00:54:56,480
possibility with this a tree or cement

00:54:57,680 --> 00:55:01,830
so the question was around whether or

00:54:59,849 --> 00:55:05,250
not the SDK is capable of handling like

00:55:01,830 --> 00:55:07,080
high bursts of data the pipeline the

00:55:05,250 --> 00:55:09,960
data pipeline coming in and out of every

00:55:07,080 --> 00:55:11,490
module is serial right so those messages

00:55:09,960 --> 00:55:13,260
are going to stack up in the queue and

00:55:11,490 --> 00:55:16,230
be processed as fast as your code will

00:55:13,260 --> 00:55:18,450
run you know I would think in that

00:55:16,230 --> 00:55:20,400
particular type of scenario you would

00:55:18,450 --> 00:55:22,020
want to be doing you know some sort of

00:55:20,400 --> 00:55:24,930
pre-processing on your data at your

00:55:22,020 --> 00:55:26,369
device level but I don't know enough

00:55:24,930 --> 00:55:30,119
about your application to really answer

00:55:26,369 --> 00:55:32,490
that I've not tried to push the SDK

00:55:30,119 --> 00:55:34,800
really really really hard you know I've

00:55:32,490 --> 00:55:36,810
gone down to I think 10 millisecond

00:55:34,800 --> 00:55:40,160
cycles and it was just fine streaming

00:55:36,810 --> 00:55:45,210
data up to Azure on sort of that speed

00:55:40,160 --> 00:55:52,410
but yeah I don't have that answer for

00:55:45,210 --> 00:55:54,720
you off Southland so so the calm in the

00:55:52,410 --> 00:56:03,390
back was that MQTT is obviously faster

00:55:54,720 --> 00:56:05,820
than rest and AMQP yeah the AMQP stuff

00:56:03,390 --> 00:56:08,270
the connectivity is super robust once

00:56:05,820 --> 00:56:11,040
the channel was stood up it's amazing

00:56:08,270 --> 00:56:12,690
but it does take a while to negotiate

00:56:11,040 --> 00:56:18,300
that handshake and get that connection

00:56:12,690 --> 00:56:22,920
stood up properly yeah any other

00:56:18,300 --> 00:56:25,349
questions well thank you all for coming

00:56:22,920 --> 00:56:27,320
great discussion good questions I really

00:56:25,349 --> 00:56:30,919
appreciate your time today ok

00:56:27,320 --> 00:56:30,919

YouTube URL: https://www.youtube.com/watch?v=7WH7oRhlbDI


