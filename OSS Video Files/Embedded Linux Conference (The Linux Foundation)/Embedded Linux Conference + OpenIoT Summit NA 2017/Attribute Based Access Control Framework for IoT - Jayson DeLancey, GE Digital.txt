Title: Attribute Based Access Control Framework for IoT - Jayson DeLancey, GE Digital
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Attribute Based Access Control Framework for IoT - Jayson DeLancey, GE Digital

The Access Control Service (ACS) is an open-source authorization framework that provides app-specific policies built using attributes that can be assigned to users, groups, roles as well as other resources, relationships, and things within a system. 

ACS was built as part of the Predix Platform to overcome some of the limitations of XACML and OAuth when dealing with problems such as device provisioning in IoT where roles can be dynamic and location specific.

About Jayson DeLancey
As a member of the GE Digital Developer Relations team, Jayson has a focus on Industrial IoT as a Predix Builder Influencer, Cloud Foundry Foundation Ambassador and IoT SIG co-chair. He helped create software to generate ebooks for devices such as the Palm Pilot, wrote testing infrastructure for MATLAB written in MATLAB, has 18 feature film movie credits and helps support a non-profit robotics themed makerspace.
Captions: 
	00:00:00,060 --> 00:00:05,040
my name is Jason Delancey I am a

00:00:02,490 --> 00:00:09,780
developer evangelist with GE digital

00:00:05,040 --> 00:00:13,650
it's a small Silicon Valley startup and

00:00:09,780 --> 00:00:15,960
so going from Thomas Edison to Jeffrey

00:00:13,650 --> 00:00:18,630
Immelt I don't know if you guys are

00:00:15,960 --> 00:00:20,430
familiar with him but he is the CEO and

00:00:18,630 --> 00:00:22,350
chairman of General Electric and last

00:00:20,430 --> 00:00:24,210
year he was quoted as saying that we

00:00:22,350 --> 00:00:26,340
hire between four and five thousand

00:00:24,210 --> 00:00:29,279
college grads every year and whether

00:00:26,340 --> 00:00:32,759
they join in finance or IT or marketing

00:00:29,279 --> 00:00:34,290
they're going to code and I think this

00:00:32,759 --> 00:00:37,770
quote speaks to me for a couple of

00:00:34,290 --> 00:00:39,600
reasons one technically speaking I'm in

00:00:37,770 --> 00:00:40,680
marketing my background in software

00:00:39,600 --> 00:00:42,450
development but now as a developer

00:00:40,680 --> 00:00:45,149
evangelist I am and in more of a

00:00:42,450 --> 00:00:47,489
marketing type of role but also as an

00:00:45,149 --> 00:00:49,800
undergrad at college I went to a school

00:00:47,489 --> 00:00:52,320
where everybody had to take intro to

00:00:49,800 --> 00:00:54,090
programming English majors took intro to

00:00:52,320 --> 00:00:56,789
programming and I think this is very

00:00:54,090 --> 00:01:00,210
relevant for where ge is and where she

00:00:56,789 --> 00:01:01,680
is going because not everyone comes from

00:01:00,210 --> 00:01:03,989
a traditional software engineering

00:01:01,680 --> 00:01:05,640
background I'm interacting a lot of

00:01:03,989 --> 00:01:07,680
times with a material science engineer

00:01:05,640 --> 00:01:09,720
an electrical engineer a mechanical

00:01:07,680 --> 00:01:11,670
engineer someone who's an IT or a data

00:01:09,720 --> 00:01:13,470
scientist who maybe hasn't been

00:01:11,670 --> 00:01:15,960
developing web applications for the last

00:01:13,470 --> 00:01:18,330
20 years so they don't have a good

00:01:15,960 --> 00:01:20,549
grounding in you know now that they're

00:01:18,330 --> 00:01:22,350
writing code they haven't had to deal

00:01:20,549 --> 00:01:24,960
with security flaws or other exploits

00:01:22,350 --> 00:01:27,450
and things like that and so knowing that

00:01:24,960 --> 00:01:30,060
people who are getting involved with

00:01:27,450 --> 00:01:33,869
this sort of background can be kind of

00:01:30,060 --> 00:01:36,150
important and so today I'm going to kind

00:01:33,869 --> 00:01:40,220
of walk through a particular project

00:01:36,150 --> 00:01:42,810
that we've been working on at GE digital

00:01:40,220 --> 00:01:44,729
first gonna try to answer so this is the

00:01:42,810 --> 00:01:47,310
rhetorical questions for spent part of

00:01:44,729 --> 00:01:51,180
the presentation so vision

00:01:47,310 --> 00:01:54,000
why was ACS created so ACS is what we

00:01:51,180 --> 00:01:55,020
call our access control service I don't

00:01:54,000 --> 00:01:57,630
know if anyone else is still paying

00:01:55,020 --> 00:02:00,509
student loans but it's a very different

00:01:57,630 --> 00:02:02,430
thing ACS but also I'm going to try a

00:02:00,509 --> 00:02:04,560
little a bit more about the vision and

00:02:02,430 --> 00:02:08,759
why it's important or how it's being

00:02:04,560 --> 00:02:10,349
used at GE then I'm going to go into

00:02:08,759 --> 00:02:12,660
sort of the history of okay now that we

00:02:10,349 --> 00:02:13,470
understand what the problem is what is

00:02:12,660 --> 00:02:16,500
UA

00:02:13,470 --> 00:02:18,150
of an acronym what is a off what does AK

00:02:16,500 --> 00:02:20,280
mole and what do they have to do with

00:02:18,150 --> 00:02:22,710
what I'm talking about so I'll kind of

00:02:20,280 --> 00:02:25,290
go into some of that history as well and

00:02:22,710 --> 00:02:29,520
then from an understanding of the

00:02:25,290 --> 00:02:31,950
project some introductory concepts what

00:02:29,520 --> 00:02:33,690
are the subjects what are resources what

00:02:31,950 --> 00:02:35,970
is a policy when you're dealing with

00:02:33,690 --> 00:02:38,700
access control and so I'll dive into

00:02:35,970 --> 00:02:42,300
some of those and then try to get a

00:02:38,700 --> 00:02:44,580
little bit more into the usage of the

00:02:42,300 --> 00:02:46,320
tool it's a service so how do you create

00:02:44,580 --> 00:02:48,300
that service for yourself how do you

00:02:46,320 --> 00:02:51,150
create policies how do you control

00:02:48,300 --> 00:02:53,600
access to an application so we really

00:02:51,150 --> 00:02:57,080
are looking at the application layer

00:02:53,600 --> 00:03:01,590
restful services how to control access

00:02:57,080 --> 00:03:02,940
especially in IOT space and then I'll

00:03:01,590 --> 00:03:05,730
kind of start looking a little bit more

00:03:02,940 --> 00:03:08,640
at the source and try to explain how it

00:03:05,730 --> 00:03:09,750
all fits together how it was built and

00:03:08,640 --> 00:03:11,850
where you can find the code if you're

00:03:09,750 --> 00:03:15,960
interested or find out more about the

00:03:11,850 --> 00:03:18,150
project some things that I won't be

00:03:15,960 --> 00:03:20,940
talking about I'm not going to dive too

00:03:18,150 --> 00:03:24,060
deeply into authentication or encryption

00:03:20,940 --> 00:03:27,959
it's not necessarily my background so

00:03:24,060 --> 00:03:29,700
SSL TOS SSO I may mention some of these

00:03:27,959 --> 00:03:32,730
things but I'm not gonna talk about it

00:03:29,700 --> 00:03:35,880
too much identity Federation mr. robot

00:03:32,730 --> 00:03:37,910
is not part of my talk but if you want

00:03:35,880 --> 00:03:40,670
to start talking about season two maybe

00:03:37,910 --> 00:03:43,709
intrusion detection multi-tenancy

00:03:40,670 --> 00:03:46,769
important concepts blockchain and how

00:03:43,709 --> 00:03:48,840
that's being used security for devices

00:03:46,769 --> 00:03:50,280
and industrial control systems I'm not

00:03:48,840 --> 00:03:52,200
going to go too deep into those things

00:03:50,280 --> 00:03:56,820
although those are all part of the

00:03:52,200 --> 00:03:59,750
bigger picture so making sure that we're

00:03:56,820 --> 00:04:02,880
sort of level set on some of the terms

00:03:59,750 --> 00:04:05,940
authentication authorization of course

00:04:02,880 --> 00:04:08,250
we probably heard these many times again

00:04:05,940 --> 00:04:11,820
but authentication are you who you say

00:04:08,250 --> 00:04:13,530
you are I am a GE employee or I'm an

00:04:11,820 --> 00:04:14,160
attendee of this conference I have a

00:04:13,530 --> 00:04:17,010
badge

00:04:14,160 --> 00:04:19,530
I can prove who I am to a certain extent

00:04:17,010 --> 00:04:21,180
and are you allowed to do that that's

00:04:19,530 --> 00:04:22,890
the authorization concern that I'm going

00:04:21,180 --> 00:04:24,810
to be focusing a little bit more which

00:04:22,890 --> 00:04:27,240
is I am a GE employee we've already

00:04:24,810 --> 00:04:27,639
established my identity now allow me to

00:04:27,240 --> 00:04:30,490
enter

00:04:27,639 --> 00:04:33,520
building and so I think when we look at

00:04:30,490 --> 00:04:36,699
a lot of applications you might see very

00:04:33,520 --> 00:04:38,770
simple logic if users employee show the

00:04:36,699 --> 00:04:41,379
employee entrance else show them to the

00:04:38,770 --> 00:04:42,610
visitor lobby right if you are have a

00:04:41,379 --> 00:04:45,069
web application if you're an

00:04:42,610 --> 00:04:48,039
administrator allow you to go in and

00:04:45,069 --> 00:04:49,810
modify devices and configure their

00:04:48,039 --> 00:04:51,939
properties if you're not an

00:04:49,810 --> 00:04:54,490
administrator you just get a regular

00:04:51,939 --> 00:04:58,810
dashboard and so that would be a very

00:04:54,490 --> 00:05:01,270
simplistic access model but in an

00:04:58,810 --> 00:05:05,069
industrial Internet of Things cases it

00:05:01,270 --> 00:05:08,229
gets a little bit more complex so

00:05:05,069 --> 00:05:10,810
there's a commercial with oh and what

00:05:08,229 --> 00:05:13,389
does GE do we're involved with a lot of

00:05:10,810 --> 00:05:14,889
different businesses so wind turbines

00:05:13,389 --> 00:05:16,509
that when we're talking about Internet

00:05:14,889 --> 00:05:18,639
of Things the thing that we're talking

00:05:16,509 --> 00:05:21,129
about is not necessarily a thermostat

00:05:18,639 --> 00:05:24,490
but a big piece of heavy equipment a jet

00:05:21,129 --> 00:05:27,789
engine manufacturing plants and how to

00:05:24,490 --> 00:05:30,400
automate the production of individual

00:05:27,789 --> 00:05:32,430
things MRI machines so healthcare

00:05:30,400 --> 00:05:35,050
there's lots of healthcare use cases

00:05:32,430 --> 00:05:37,330
transportation a locomotive is a rolling

00:05:35,050 --> 00:05:39,639
data center with a lot of sensors and

00:05:37,330 --> 00:05:42,610
information about how its operating

00:05:39,639 --> 00:05:44,560
smart cities entire cities and every

00:05:42,610 --> 00:05:47,349
street light in that city can be

00:05:44,560 --> 00:05:48,939
equipped with sensors gathering data and

00:05:47,349 --> 00:05:50,500
there's been pilot projects about this

00:05:48,939 --> 00:05:52,830
so those are the things that we're

00:05:50,500 --> 00:05:55,389
talking about power generation

00:05:52,830 --> 00:05:58,509
hydroelectric plants nuclear power coal

00:05:55,389 --> 00:06:01,839
power there are GE businesses that focus

00:05:58,509 --> 00:06:07,449
on those areas and develop software to

00:06:01,839 --> 00:06:11,879
help manage those applications and light

00:06:07,449 --> 00:06:15,399
bulbs so another again level-set

00:06:11,879 --> 00:06:17,110
complicated versus complex a complicated

00:06:15,399 --> 00:06:18,909
might be a system with a high level of

00:06:17,110 --> 00:06:21,219
difficulty you know store the user

00:06:18,909 --> 00:06:23,229
credentials and a token using base64

00:06:21,219 --> 00:06:25,750
encoding scheme transferred over TLS

00:06:23,229 --> 00:06:27,250
connection and with this being embedded

00:06:25,750 --> 00:06:29,169
Linux conference there's a lot of very

00:06:27,250 --> 00:06:31,389
complicated and interesting technology

00:06:29,169 --> 00:06:33,279
to explore and understand but on the

00:06:31,389 --> 00:06:36,519
other side there's complex a system that

00:06:33,279 --> 00:06:40,089
has many components and how you manage

00:06:36,519 --> 00:06:40,960
that complexity so allow GE field

00:06:40,089 --> 00:06:43,419
engineers

00:06:40,960 --> 00:06:46,000
or a subcontractor who has electrical

00:06:43,419 --> 00:06:48,699
engineers read access to the data coming

00:06:46,000 --> 00:06:50,650
out of that wind turbine using this

00:06:48,699 --> 00:06:53,650
piece of software that was developed by

00:06:50,650 --> 00:06:56,229
an integration service provider at a

00:06:53,650 --> 00:06:58,389
particular customers location during

00:06:56,229 --> 00:07:00,940
weekdays except for their one location

00:06:58,389 --> 00:07:03,310
in Springfield where that contractor is

00:07:00,940 --> 00:07:04,960
doing a pilot program so therefore he

00:07:03,310 --> 00:07:07,539
has write access but only for the next

00:07:04,960 --> 00:07:10,229
six months that's a little bit more

00:07:07,539 --> 00:07:13,630
complex everything there individually is

00:07:10,229 --> 00:07:16,389
pretty simple but taking Oh together you

00:07:13,630 --> 00:07:19,440
have a lot of complexity to manage and

00:07:16,389 --> 00:07:22,570
then last week was Valentine's Day but

00:07:19,440 --> 00:07:24,759
relationships are complex so again this

00:07:22,570 --> 00:07:26,800
is sort of this notion that you have a

00:07:24,759 --> 00:07:29,229
partner application a customer facility

00:07:26,800 --> 00:07:31,270
at that customer facility you have

00:07:29,229 --> 00:07:33,099
another company's product you have a GE

00:07:31,270 --> 00:07:35,099
product that other company's product is

00:07:33,099 --> 00:07:37,690
actually using a different GE businesses

00:07:35,099 --> 00:07:39,460
part whereas the GE product has a GE

00:07:37,690 --> 00:07:42,430
part and another manufacturer has

00:07:39,460 --> 00:07:43,870
produce parts that go into that there

00:07:42,430 --> 00:07:46,930
was an interesting article that came out

00:07:43,870 --> 00:07:47,500
over the weekend I think it was Business

00:07:46,930 --> 00:07:50,710
Insider

00:07:47,500 --> 00:07:52,509
about airplanes manufactured by Boeing

00:07:50,710 --> 00:07:55,870
and it was sort of a responsive Boeing

00:07:52,509 --> 00:07:57,340
it's made in America and in the shows of

00:07:55,870 --> 00:07:59,590
where all of the different parts and

00:07:57,340 --> 00:08:01,690
components so if you flew here from

00:07:59,590 --> 00:08:03,550
somewhere other than in Portland you

00:08:01,690 --> 00:08:05,949
probably flew on a plane and when you

00:08:03,550 --> 00:08:07,599
think about that airline and all the

00:08:05,949 --> 00:08:10,030
different companies that are involved

00:08:07,599 --> 00:08:12,610
with the manufacturer with the servicing

00:08:10,030 --> 00:08:15,430
the operations all the software the

00:08:12,610 --> 00:08:17,889
regulations that go into it there's a

00:08:15,430 --> 00:08:23,979
lot of people that have hands in this

00:08:17,889 --> 00:08:25,479
access control problem okay so so now if

00:08:23,979 --> 00:08:28,479
that is the problem we're trying to

00:08:25,479 --> 00:08:29,320
solve how did we come up with this

00:08:28,479 --> 00:08:32,979
project

00:08:29,320 --> 00:08:35,409
well first we started looking at Cloud

00:08:32,979 --> 00:08:38,409
Foundry as the basis for our platform

00:08:35,409 --> 00:08:40,959
and just to get a temperature reading

00:08:38,409 --> 00:08:42,820
how many of you are familiar with Cloud

00:08:40,959 --> 00:08:43,779
Foundry you can give me an applause or

00:08:42,820 --> 00:08:48,220
you can raise your hand whenever you

00:08:43,779 --> 00:08:50,560
prefer okay so a few people maybe heard

00:08:48,220 --> 00:08:53,199
about Cloud Foundry one component of

00:08:50,560 --> 00:08:54,230
that architecture is you a a is the user

00:08:53,199 --> 00:08:58,640
account in authentic

00:08:54,230 --> 00:09:01,970
patience service so what that service

00:08:58,640 --> 00:09:03,950
provides is authentication identity

00:09:01,970 --> 00:09:06,170
management for platform-as-a-service

00:09:03,950 --> 00:09:08,150
this is a layer on top of your

00:09:06,170 --> 00:09:09,860
infrastructure managing lots of data

00:09:08,150 --> 00:09:13,010
centers whether it's on-premise whether

00:09:09,860 --> 00:09:16,790
it's equipment whether it's AWS your

00:09:13,010 --> 00:09:21,080
Google Cloud and so on in addition it is

00:09:16,790 --> 00:09:23,410
a Roth to authorization server it's an

00:09:21,080 --> 00:09:27,410
implementation of the oauth2 standard

00:09:23,410 --> 00:09:29,540
supports sam'l SSO authentication skin

00:09:27,410 --> 00:09:32,660
based Identity Management and it is open

00:09:29,540 --> 00:09:36,170
source and that is very important for GE

00:09:32,660 --> 00:09:38,300
in particular it is a basis of one of

00:09:36,170 --> 00:09:41,570
our key platforms where I'm involved

00:09:38,300 --> 00:09:45,500
called predicts but it allows us to also

00:09:41,570 --> 00:09:46,760
look at and inspect what's going on now

00:09:45,500 --> 00:09:50,180
there were a couple of problems like

00:09:46,760 --> 00:09:53,480
while we use UA a and we like a loss in

00:09:50,180 --> 00:09:55,220
particular there are a few issues that

00:09:53,480 --> 00:09:57,650
we ran into when we deal with those

00:09:55,220 --> 00:10:00,380
complex relationships that I was talking

00:09:57,650 --> 00:10:02,630
about before for one the scope based

00:10:00,380 --> 00:10:04,280
privileges are very coarse-grained so if

00:10:02,630 --> 00:10:05,960
we go back to that pseudocode example

00:10:04,280 --> 00:10:08,020
and if we're just making one very simple

00:10:05,960 --> 00:10:10,100
were you would in men or not men and men

00:10:08,020 --> 00:10:11,900
that's not so hard that's very

00:10:10,100 --> 00:10:14,210
coarse-grained ooofff can support that

00:10:11,900 --> 00:10:16,160
but when we have all these neces or data

00:10:14,210 --> 00:10:18,200
striping I'm very specific you have

00:10:16,160 --> 00:10:20,180
access to this asset but not that asset

00:10:18,200 --> 00:10:22,940
within one service it starts getting a

00:10:20,180 --> 00:10:24,980
little bit more complicated the other

00:10:22,940 --> 00:10:27,650
thing with OAuth is that the scope is

00:10:24,980 --> 00:10:30,050
tightly coupled to that access token so

00:10:27,650 --> 00:10:32,990
you know here's my ticket for TriMet

00:10:30,050 --> 00:10:35,840
that got me here but if I drop it and

00:10:32,990 --> 00:10:37,640
someone else picks it up they're able to

00:10:35,840 --> 00:10:39,770
make use of that access token so this

00:10:37,640 --> 00:10:41,660
works ok with OAuth because it's over a

00:10:39,770 --> 00:10:43,340
TOS we understand things but we're

00:10:41,660 --> 00:10:46,310
talking about devices with very

00:10:43,340 --> 00:10:48,890
different communication protocols it can

00:10:46,310 --> 00:10:50,360
get a little bit more complicated the

00:10:48,890 --> 00:10:52,250
other issue with that is that that

00:10:50,360 --> 00:10:54,920
access token during a lifetime until it

00:10:52,250 --> 00:10:57,470
expires whatever privileges have been

00:10:54,920 --> 00:10:58,550
granted to the token are there so if we

00:10:57,470 --> 00:11:01,010
have time based or

00:10:58,550 --> 00:11:04,370
our based or changes being made to

00:11:01,010 --> 00:11:06,590
access policy in real time this access

00:11:04,370 --> 00:11:07,800
token you have to force the user to log

00:11:06,590 --> 00:11:09,120
out log back in

00:11:07,800 --> 00:11:11,790
in order for the some of those changes

00:11:09,120 --> 00:11:13,649
to take effect cannot efficiently make

00:11:11,790 --> 00:11:15,120
access control decisions per request the

00:11:13,649 --> 00:11:18,390
other issue is when you think about

00:11:15,120 --> 00:11:22,220
Identity Management at scale in the

00:11:18,390 --> 00:11:24,870
cloud there are a lot of different

00:11:22,220 --> 00:11:26,610
companies that have federated identity

00:11:24,870 --> 00:11:28,829
so if you had to reach out to that

00:11:26,610 --> 00:11:30,959
identity server at one location

00:11:28,829 --> 00:11:32,940
it may not be fortunate enough to be

00:11:30,959 --> 00:11:35,040
co-located with whatever applications

00:11:32,940 --> 00:11:38,040
you're running that need access to that

00:11:35,040 --> 00:11:42,269
data and there are additionally

00:11:38,040 --> 00:11:44,220
constraints on the token size so if you

00:11:42,269 --> 00:11:46,589
have a very complex relationship like I

00:11:44,220 --> 00:11:48,720
was discussing lots of different

00:11:46,589 --> 00:11:50,790
attributes that might identify what a

00:11:48,720 --> 00:11:54,839
person is what resources what a device

00:11:50,790 --> 00:11:56,579
is you exceed that token size and so

00:11:54,839 --> 00:11:58,649
that again makes it not necessarily

00:11:56,579 --> 00:12:01,740
something that was a solution for our

00:11:58,649 --> 00:12:05,190
problem so what about Zack mole so this

00:12:01,740 --> 00:12:07,260
is another standard its extensible

00:12:05,190 --> 00:12:08,940
access control markup language so on a

00:12:07,260 --> 00:12:12,060
surface it sounds like exactly what we

00:12:08,940 --> 00:12:12,839
were looking for but there are a few

00:12:12,060 --> 00:12:14,790
things with it

00:12:12,839 --> 00:12:17,250
one the policy specifications are done

00:12:14,790 --> 00:12:20,339
in XML and we're working with a lot of

00:12:17,250 --> 00:12:22,110
restful services and JSON many different

00:12:20,339 --> 00:12:24,839
programming languages so there are some

00:12:22,110 --> 00:12:28,050
complications with that can be difficult

00:12:24,839 --> 00:12:29,640
to understand and the implementations

00:12:28,050 --> 00:12:30,959
that were out there and I don't know if

00:12:29,640 --> 00:12:34,350
this is still true it's different

00:12:30,959 --> 00:12:36,029
vendors provide access to it but they

00:12:34,350 --> 00:12:39,390
could be expensive to license and make

00:12:36,029 --> 00:12:40,560
use of the code for conditions when

00:12:39,390 --> 00:12:43,410
you're defining your policy you're

00:12:40,560 --> 00:12:45,600
writing a source code within XML and

00:12:43,410 --> 00:12:47,880
again from developer experience

00:12:45,600 --> 00:12:49,200
standpoint it was a little bit

00:12:47,880 --> 00:12:51,420
complicated a little difficult to

00:12:49,200 --> 00:12:54,510
understand wasn't quite what we were

00:12:51,420 --> 00:12:57,029
looking for and so that kind of brings

00:12:54,510 --> 00:12:59,220
us to the concept what is the concept of

00:12:57,029 --> 00:13:02,220
ACS what is this all about what problem

00:12:59,220 --> 00:13:05,130
are we trying to solve so we start with

00:13:02,220 --> 00:13:08,190
a few high-level system requirements one

00:13:05,130 --> 00:13:09,870
being a consistent and reusable solution

00:13:08,190 --> 00:13:11,459
that's decoupled from the application so

00:13:09,870 --> 00:13:13,079
if we go back to my if you're an

00:13:11,459 --> 00:13:16,020
administrator example or if you're an

00:13:13,079 --> 00:13:17,730
employee example if you have many many

00:13:16,020 --> 00:13:19,110
different services many many different

00:13:17,730 --> 00:13:21,430
applications many many different

00:13:19,110 --> 00:13:23,589
facilities

00:13:21,430 --> 00:13:25,360
having that implementation even if it's

00:13:23,589 --> 00:13:26,980
just that simple if-else statement

00:13:25,360 --> 00:13:29,500
everywhere if you need to make that

00:13:26,980 --> 00:13:31,779
change to that you kind of want to

00:13:29,500 --> 00:13:34,660
decouple that logic from that

00:13:31,779 --> 00:13:37,149
application having a consistent way to

00:13:34,660 --> 00:13:39,490
define those policies so that you can go

00:13:37,149 --> 00:13:41,620
to an authority that says this is the

00:13:39,490 --> 00:13:43,510
access control policy for this set of

00:13:41,620 --> 00:13:45,130
devices or this is the access control

00:13:43,510 --> 00:13:48,990
policy for this set of applications for

00:13:45,130 --> 00:13:51,730
this set of users can be very beneficial

00:13:48,990 --> 00:13:54,010
having a shareable and distributed

00:13:51,730 --> 00:13:59,380
privileged or it's pretty much the same

00:13:54,010 --> 00:14:01,660
point so one reason this also becomes

00:13:59,380 --> 00:14:04,209
important is trend toward micro services

00:14:01,660 --> 00:14:06,520
small standalone services that serve a

00:14:04,209 --> 00:14:08,290
single function so it's sort of your

00:14:06,520 --> 00:14:10,800
pendulum swinging from the other side of

00:14:08,290 --> 00:14:13,600
having the big monolithic applications

00:14:10,800 --> 00:14:15,730
having a lot of services to solve one

00:14:13,600 --> 00:14:17,709
particular problem so let's decouple

00:14:15,730 --> 00:14:19,540
that access control problem from them

00:14:17,709 --> 00:14:22,390
which also gives us a certain amount of

00:14:19,540 --> 00:14:24,010
language independence so all those brand

00:14:22,390 --> 00:14:25,870
new developers people who don't have a

00:14:24,010 --> 00:14:28,120
computer science background are now

00:14:25,870 --> 00:14:30,930
writing services implementing security

00:14:28,120 --> 00:14:33,370
procedures for devices or applications

00:14:30,930 --> 00:14:36,339
some of them are in Python some of them

00:14:33,370 --> 00:14:38,500
Arango some of them and Java so having

00:14:36,339 --> 00:14:41,050
some independence by having a restful

00:14:38,500 --> 00:14:42,490
service layer is beneficial and we can

00:14:41,050 --> 00:14:44,620
do that by having a service contract

00:14:42,490 --> 00:14:47,020
right so that there's an expectation of

00:14:44,620 --> 00:14:51,100
what access control should be able to do

00:14:47,020 --> 00:14:53,020
and being able to talk to those so the

00:14:51,100 --> 00:14:55,990
ACS feature set we're talking about

00:14:53,020 --> 00:14:57,550
attribute management and there are a

00:14:55,990 --> 00:14:59,770
number of features within that

00:14:57,550 --> 00:15:01,510
hierarchical attributes scoped

00:14:59,770 --> 00:15:02,770
attributes and attribute connectors

00:15:01,510 --> 00:15:05,110
where do you get those attributes from

00:15:02,770 --> 00:15:06,940
in the very first place as well as

00:15:05,110 --> 00:15:09,910
policy management how do you evaluate

00:15:06,940 --> 00:15:12,880
whether policy should allow someone

00:15:09,910 --> 00:15:15,070
access to a system or not as well as

00:15:12,880 --> 00:15:17,529
having multiple policy policy sets at

00:15:15,070 --> 00:15:19,180
the same time that some domain experts

00:15:17,529 --> 00:15:21,640
may understand some of the policies but

00:15:19,180 --> 00:15:25,300
not others and being able to to fold

00:15:21,640 --> 00:15:27,880
those together so some of the core

00:15:25,300 --> 00:15:28,600
components of ACS is this notion of a

00:15:27,880 --> 00:15:31,540
subject

00:15:28,600 --> 00:15:34,259
so that's your entity representing a

00:15:31,540 --> 00:15:36,660
user or a device potentially

00:15:34,259 --> 00:15:37,470
it has a configurable set of attributes

00:15:36,660 --> 00:15:38,999
and the things that you might think

00:15:37,470 --> 00:15:42,529
about there is an identity maybe that's

00:15:38,999 --> 00:15:46,529
a URI that's a reference to an OAuth

00:15:42,529 --> 00:15:48,269
identity again solving the author is

00:15:46,529 --> 00:15:49,709
authentication problem but not

00:15:48,269 --> 00:15:51,809
necessarily the authorization problem

00:15:49,709 --> 00:15:53,970
for some of these applications maybe I

00:15:51,809 --> 00:15:56,959
know what organization or department or

00:15:53,970 --> 00:15:59,970
role or any number of discoverable

00:15:56,959 --> 00:16:02,999
attributes for a particular subject or

00:15:59,970 --> 00:16:05,069
device then you have the resource which

00:16:02,999 --> 00:16:06,839
device can be on this side of the

00:16:05,069 --> 00:16:09,569
equation as well so in that we're

00:16:06,839 --> 00:16:11,549
talking about machine to machine but a

00:16:09,569 --> 00:16:13,109
resource represents that configurable

00:16:11,549 --> 00:16:15,809
set of attributes of interest for the

00:16:13,109 --> 00:16:19,829
thing that you're operating on we tend

00:16:15,809 --> 00:16:22,410
to call them assets but it could be a

00:16:19,829 --> 00:16:25,229
service a restful endpoint as well

00:16:22,410 --> 00:16:27,179
that's representing that asset are you

00:16:25,229 --> 00:16:29,160
allowed to operate on that resource and

00:16:27,179 --> 00:16:31,439
then if you are allowed to operate it

00:16:29,160 --> 00:16:35,399
what exactly are you able to do these

00:16:31,439 --> 00:16:39,480
actions match pretty cleanly to restful

00:16:35,399 --> 00:16:42,149
verbs get to read something to write

00:16:39,480 --> 00:16:44,819
something to create something to remove

00:16:42,149 --> 00:16:46,919
something but they're all also support

00:16:44,819 --> 00:16:49,139
for other operations patch subscribe

00:16:46,919 --> 00:16:50,939
messaging and again this is basically

00:16:49,139 --> 00:16:53,249
because this is an access control system

00:16:50,939 --> 00:16:55,739
for restful endpoints and where those

00:16:53,249 --> 00:16:58,589
restful services are being the common

00:16:55,739 --> 00:17:00,959
vocabulary and then the policies

00:16:58,589 --> 00:17:03,239
themselves so if you have a policy

00:17:00,959 --> 00:17:05,579
evaluation engine that's maintaining

00:17:03,239 --> 00:17:08,039
rules to compare these attributes of the

00:17:05,579 --> 00:17:10,740
subject and resources to determine

00:17:08,039 --> 00:17:12,990
whether the user is permitted so you

00:17:10,740 --> 00:17:19,769
have to define conditions and in the

00:17:12,990 --> 00:17:23,959
decision do I allow or deny access so to

00:17:19,769 --> 00:17:23,959
make this very concrete and and really

00:17:24,470 --> 00:17:31,110
you know users of an application right

00:17:27,269 --> 00:17:34,590
so the user in this case is the subject

00:17:31,110 --> 00:17:36,120
and we can say hey they have a role when

00:17:34,590 --> 00:17:38,940
they have a location those are

00:17:36,120 --> 00:17:40,260
attributes of a the subject right so

00:17:38,940 --> 00:17:41,970
this is like a requirement for an

00:17:40,260 --> 00:17:45,510
application that somebody might be

00:17:41,970 --> 00:17:47,750
developing the asset in this case is

00:17:45,510 --> 00:17:53,000
some physical thing maybe it's a win

00:17:47,750 --> 00:17:55,100
turbine maybe it's a commercial

00:17:53,000 --> 00:17:58,460
application or in a manufacturing plant

00:17:55,100 --> 00:18:01,450
and then that too has some attributes

00:17:58,460 --> 00:18:04,340
that's manufactured it has a location

00:18:01,450 --> 00:18:06,910
and maybe there's exceptions not Oregon

00:18:04,340 --> 00:18:09,710
or maybe it's just not any other state

00:18:06,910 --> 00:18:11,870
and that is all for the application

00:18:09,710 --> 00:18:14,240
policy in this case I just mentioned APM

00:18:11,870 --> 00:18:15,950
it is one of the gg software products

00:18:14,240 --> 00:18:18,610
for application performance monitoring

00:18:15,950 --> 00:18:22,610
so it's something that's used for

00:18:18,610 --> 00:18:24,770
monitoring lots of assets and so what

00:18:22,610 --> 00:18:27,290
this request response looks like over

00:18:24,770 --> 00:18:29,750
HTTP you have your app that says hey I

00:18:27,290 --> 00:18:32,510
have a user one two three

00:18:29,750 --> 00:18:33,890
he wants to get asset four five six so

00:18:32,510 --> 00:18:35,240
there's a subject there's an action

00:18:33,890 --> 00:18:38,960
there's a resource that comes in as a

00:18:35,240 --> 00:18:41,210
request so ACS will say okay can I

00:18:38,960 --> 00:18:44,150
discover what attributes I can about

00:18:41,210 --> 00:18:46,850
that subject and that resource and then

00:18:44,150 --> 00:18:49,160
evaluate it against a policy for that

00:18:46,850 --> 00:18:51,980
resource and then send back a response

00:18:49,160 --> 00:18:55,040
and so in this response we see that okay

00:18:51,980 --> 00:18:56,780
we've made a decision that subject has

00:18:55,040 --> 00:18:59,360
allowed permission to use that

00:18:56,780 --> 00:19:00,830
application and along the way we've

00:18:59,360 --> 00:19:02,390
found out a few things about that

00:19:00,830 --> 00:19:04,250
subject and we found a few things out

00:19:02,390 --> 00:19:07,280
about the resource so the application

00:19:04,250 --> 00:19:09,670
can make use of those attributes they

00:19:07,280 --> 00:19:13,640
are basically cached for its usage

00:19:09,670 --> 00:19:15,680
however the application didn't have to

00:19:13,640 --> 00:19:21,950
implicitly know much about how to find

00:19:15,680 --> 00:19:23,690
out about those things so one thing that

00:19:21,950 --> 00:19:24,830
does come up with this is again when you

00:19:23,690 --> 00:19:28,970
start getting into the some of those

00:19:24,830 --> 00:19:32,480
complex complex relationships so let's

00:19:28,970 --> 00:19:34,630
say a user Jason Delancey so that's me

00:19:32,480 --> 00:19:37,640
I'm an evangelist what you eat digital

00:19:34,630 --> 00:19:39,650
so I have a role and maybe that role has

00:19:37,640 --> 00:19:42,470
an attribute hey grant access to a

00:19:39,650 --> 00:19:45,560
report like for asset performance so

00:19:42,470 --> 00:19:48,650
that means when that set of attributes

00:19:45,560 --> 00:19:51,770
is returned for me as a subject it'll

00:19:48,650 --> 00:19:54,230
include report asset performance because

00:19:51,770 --> 00:19:56,080
I'm part of the group GE digital I'm

00:19:54,230 --> 00:19:59,320
also allowed to use this application

00:19:56,080 --> 00:20:01,490
also part of an organization and that

00:19:59,320 --> 00:20:03,529
grants me access to the applica

00:20:01,490 --> 00:20:05,990
and because I'm in that organization

00:20:03,529 --> 00:20:09,559
it's inheriting that attribute to pass

00:20:05,990 --> 00:20:11,720
it through I'm also part of a tenant

00:20:09,559 --> 00:20:14,149
giving me access to certain sets of

00:20:11,720 --> 00:20:17,260
services that all seems pretty

00:20:14,149 --> 00:20:19,760
straightforward so scoped inheritance

00:20:17,260 --> 00:20:24,470
taking sort of that same picture but

00:20:19,760 --> 00:20:27,470
then adding in some constraints but only

00:20:24,470 --> 00:20:30,500
if the site is California so when this

00:20:27,470 --> 00:20:34,070
is evaluated it's basically taking away

00:20:30,500 --> 00:20:38,179
access to that asset performance report

00:20:34,070 --> 00:20:40,010
when I'm in a different location okay so

00:20:38,179 --> 00:20:43,240
those are the basic concepts of the

00:20:40,010 --> 00:20:45,770
project so what does the usage look like

00:20:43,240 --> 00:20:48,980
or how would you use this thing for

00:20:45,770 --> 00:20:51,770
people who are trying to solve similar

00:20:48,980 --> 00:20:56,000
access control problems in applications

00:20:51,770 --> 00:20:59,330
so just for simplicity I run in a docker

00:20:56,000 --> 00:21:01,970
environment with Cloud Foundry so in the

00:20:59,330 --> 00:21:05,029
way ACS is currently set up it is

00:21:01,970 --> 00:21:06,649
partnered with UAA for that identity

00:21:05,029 --> 00:21:08,360
management piece it doesn't have

00:21:06,649 --> 00:21:12,080
Identity Management or authorization

00:21:08,360 --> 00:21:13,669
included in it so I just have a docker

00:21:12,080 --> 00:21:16,399
container I used to pull in some of

00:21:13,669 --> 00:21:20,330
those dependencies and because I didn't

00:21:16,399 --> 00:21:23,419
want to attempt demo gods I am just

00:21:20,330 --> 00:21:26,600
logging in to the predicts cloud to get

00:21:23,419 --> 00:21:29,539
access to this you can pull it down and

00:21:26,600 --> 00:21:31,700
run all of these things on because it is

00:21:29,539 --> 00:21:33,409
open source but getting clubbed boundary

00:21:31,700 --> 00:21:36,830
up and running getting you a a

00:21:33,409 --> 00:21:38,570
configured device can be a little bit of

00:21:36,830 --> 00:21:40,940
work there's some documentation about

00:21:38,570 --> 00:21:44,330
how to do that not necessarily through

00:21:40,940 --> 00:21:47,929
ACS itself but ACS is designed to run on

00:21:44,330 --> 00:21:51,350
that platform so I'm just using our

00:21:47,929 --> 00:21:54,230
cloud instance which allows me to create

00:21:51,350 --> 00:21:56,480
the service and get some details about

00:21:54,230 --> 00:21:58,700
it so in this case what I was interested

00:21:56,480 --> 00:22:02,090
in is what is the URL how do I get to

00:21:58,700 --> 00:22:06,370
ACS do I have permission to get to ACS

00:22:02,090 --> 00:22:09,710
and what is the the scope of that that

00:22:06,370 --> 00:22:10,970
running instance so here this is my

00:22:09,710 --> 00:22:13,670
example where I was running it up in the

00:22:10,970 --> 00:22:16,610
cloud if you're running it local

00:22:13,670 --> 00:22:18,350
is a spoiler spring food application so

00:22:16,610 --> 00:22:20,750
if you pull it a source code down from

00:22:18,350 --> 00:22:24,250
github you can just do a Gradle run and

00:22:20,750 --> 00:22:27,710
pull it bring up a local host instance

00:22:24,250 --> 00:22:29,360
but you do need that UA a piece so if

00:22:27,710 --> 00:22:32,300
you were to inspect either your local

00:22:29,360 --> 00:22:34,100
instance and UA a running under bosch

00:22:32,300 --> 00:22:35,720
light or something out in the cloud as

00:22:34,100 --> 00:22:37,700
your Identity Management you get a token

00:22:35,720 --> 00:22:39,590
a bearer token it has a set of scopes

00:22:37,700 --> 00:22:41,360
until when I was talking about access

00:22:39,590 --> 00:22:45,410
control before these are examples of

00:22:41,360 --> 00:22:48,050
those coarse-grained scopes does that

00:22:45,410 --> 00:22:50,780
particular user have access to read and

00:22:48,050 --> 00:22:53,270
write policies does a user or a client

00:22:50,780 --> 00:22:54,980
have access to read and write attributes

00:22:53,270 --> 00:22:57,560
and so this is really talking about

00:22:54,980 --> 00:22:58,910
whatever application or service is being

00:22:57,560 --> 00:23:00,710
written whether or not it's even allowed

00:22:58,910 --> 00:23:02,150
to talk to ACS at all because you don't

00:23:00,710 --> 00:23:06,710
want anyone to be able to go in and

00:23:02,150 --> 00:23:08,650
modify those access control policies the

00:23:06,710 --> 00:23:11,870
API there are some documentation online

00:23:08,650 --> 00:23:13,700
and the github project about it but

00:23:11,870 --> 00:23:18,130
basically it is just resource and

00:23:13,700 --> 00:23:21,710
subject when defining your attributes so

00:23:18,130 --> 00:23:25,520
I'm doing these with just some restful

00:23:21,710 --> 00:23:27,110
or some straight calls again not having

00:23:25,520 --> 00:23:29,000
a strong opinion on whether you're

00:23:27,110 --> 00:23:31,670
developing application and Python or NGO

00:23:29,000 --> 00:23:33,710
or Java so just to have a common

00:23:31,670 --> 00:23:36,170
language here but basically the headers

00:23:33,710 --> 00:23:38,090
include that access token from a auth

00:23:36,170 --> 00:23:40,550
saying yes I'm allowed to talk to ACS

00:23:38,090 --> 00:23:45,830
and I just want to put or create a new

00:23:40,550 --> 00:23:47,870
role evangelist so ACS is a framework

00:23:45,830 --> 00:23:50,180
for handling these policies and these

00:23:47,870 --> 00:23:52,280
attribute definitions it doesn't have a

00:23:50,180 --> 00:23:54,770
strong opinion about how you go about it

00:23:52,280 --> 00:23:57,740
while world based access control makes a

00:23:54,770 --> 00:24:03,040
lot of sense or or devices and assets

00:23:57,740 --> 00:24:05,840
and resources a lot of that becomes a

00:24:03,040 --> 00:24:08,180
decision point for someone how they want

00:24:05,840 --> 00:24:09,710
to manage their information and some of

00:24:08,180 --> 00:24:12,830
the connectors I'll talk about make it a

00:24:09,710 --> 00:24:14,870
little bit easier but so one of these

00:24:12,830 --> 00:24:17,690
requests might look like having a

00:24:14,870 --> 00:24:19,670
subject identifier evangelist and some

00:24:17,690 --> 00:24:22,310
attributes which is basically just a key

00:24:19,670 --> 00:24:24,410
value pair or an asset it's a list but

00:24:22,310 --> 00:24:27,320
in this case just defining a role as

00:24:24,410 --> 00:24:30,950
evangelist and that issuer is

00:24:27,320 --> 00:24:34,490
trusted Authority on where this data can

00:24:30,950 --> 00:24:37,100
come from so now that I have that role

00:24:34,490 --> 00:24:40,220
defined I can also set up an inheritance

00:24:37,100 --> 00:24:43,340
relationship I'm creating a user for

00:24:40,220 --> 00:24:45,440
myself and specifying some additional

00:24:43,340 --> 00:24:47,450
attributes like a location so now I know

00:24:45,440 --> 00:24:51,260
my location and I know what my role is

00:24:47,450 --> 00:24:52,850
for this particular subject on the other

00:24:51,260 --> 00:24:55,640
side you can do the same thing for

00:24:52,850 --> 00:24:59,180
resources so if I'm creating some

00:24:55,640 --> 00:25:02,210
location California it's just a key

00:24:59,180 --> 00:25:04,130
value pair and then we can start

00:25:02,210 --> 00:25:05,690
defining our assets and how you get to

00:25:04,130 --> 00:25:08,960
this again this is sort of the low-level

00:25:05,690 --> 00:25:11,480
how you scale this up as a separate

00:25:08,960 --> 00:25:14,120
problem but when you're looking at a

00:25:11,480 --> 00:25:16,970
particular asset let's say asset 12 it

00:25:14,120 --> 00:25:20,090
has a location and then maybe I create

00:25:16,970 --> 00:25:22,130
asset 13 where I have not specified a

00:25:20,090 --> 00:25:26,870
location and maybe that's Oregon maybe

00:25:22,130 --> 00:25:28,670
it's somewhere else so this is where we

00:25:26,870 --> 00:25:31,340
start then getting into the policy

00:25:28,670 --> 00:25:34,700
specifications so there are like I said

00:25:31,340 --> 00:25:38,990
a lot of similarities to Zack Milland in

00:25:34,700 --> 00:25:42,440
terms of the concepts but this is the

00:25:38,990 --> 00:25:44,720
JSON specification for how to define a

00:25:42,440 --> 00:25:46,010
particular policy set so I've given it a

00:25:44,720 --> 00:25:48,260
name just sort of the default that

00:25:46,010 --> 00:25:51,890
evangelists can access assets that just

00:25:48,260 --> 00:25:53,690
seems like a good thing to have and we

00:25:51,890 --> 00:25:56,300
can see that the action there is get

00:25:53,690 --> 00:25:59,060
it's whether or not I'm able to read so

00:25:56,300 --> 00:26:02,780
the resource you know so that's a name

00:25:59,060 --> 00:26:06,100
an asset and URI template so this is how

00:26:02,780 --> 00:26:08,630
scaling up the number of attributes and

00:26:06,100 --> 00:26:10,850
assets you have to define that there's

00:26:08,630 --> 00:26:14,630
basically just a pattern match on the

00:26:10,850 --> 00:26:17,570
URI template and then we look at the

00:26:14,630 --> 00:26:22,700
subject as well in this case I have a

00:26:17,570 --> 00:26:25,460
role and then the condition so what does

00:26:22,700 --> 00:26:27,440
the condition mean so there can be a

00:26:25,460 --> 00:26:29,390
number of conditions that all would be

00:26:27,440 --> 00:26:32,990
evaluated in this case we're talking

00:26:29,390 --> 00:26:34,340
about hey let's make sure that whoever

00:26:32,990 --> 00:26:36,950
is trying to access this is an

00:26:34,340 --> 00:26:39,370
evangelist and the condition is

00:26:36,950 --> 00:26:43,270
specified as basically a

00:26:39,370 --> 00:26:45,610
lambda function in and groovy so match a

00:26:43,270 --> 00:26:48,790
single instance of the attribute from

00:26:45,610 --> 00:26:51,130
this issue or look up that role for that

00:26:48,790 --> 00:26:53,710
subject and compare it to evangelists

00:26:51,130 --> 00:26:57,640
and if they match then this condition is

00:26:53,710 --> 00:27:00,220
met and they are granted access so have

00:26:57,640 --> 00:27:04,900
that effect of permitting access to the

00:27:00,220 --> 00:27:07,030
system so I I kind of hinted there that

00:27:04,900 --> 00:27:12,570
groovy is the thing powering those

00:27:07,030 --> 00:27:15,580
conditions so it's very domain-specific

00:27:12,570 --> 00:27:18,720
in that they're subject attributes

00:27:15,580 --> 00:27:22,330
resource attributes split equals size so

00:27:18,720 --> 00:27:25,330
effectively using abstract syntax tree

00:27:22,330 --> 00:27:28,420
only particular methods have been

00:27:25,330 --> 00:27:30,040
approved so that you can't necessarily

00:27:28,420 --> 00:27:32,260
go in and write a conditioner that's

00:27:30,040 --> 00:27:34,360
creating a brand-new class you can't

00:27:32,260 --> 00:27:36,730
import other libraries or write methods

00:27:34,360 --> 00:27:38,170
so so there are some limitations to what

00:27:36,730 --> 00:27:41,290
you can do there but for most

00:27:38,170 --> 00:27:44,530
conditionals and or not the type of

00:27:41,290 --> 00:27:46,870
things that we see in conditions for

00:27:44,530 --> 00:27:50,610
some of the industrial applications this

00:27:46,870 --> 00:27:54,460
is sufficient in terms of a feature set

00:27:50,610 --> 00:27:56,950
so what that then gets down to is now

00:27:54,460 --> 00:28:00,970
you're doing a post to say let's do an

00:27:56,950 --> 00:28:05,230
evaluation of this policy can the

00:28:00,970 --> 00:28:07,840
subject get this particular asset and

00:28:05,230 --> 00:28:10,380
then return permitted or denied as

00:28:07,840 --> 00:28:10,380
appropriate

00:28:12,469 --> 00:28:19,769
so if we track this to the source so how

00:28:16,289 --> 00:28:23,099
does this all work so I kind of

00:28:19,769 --> 00:28:26,159
mentioned it is a spring boot

00:28:23,099 --> 00:28:27,359
application the application is out on

00:28:26,159 --> 00:28:31,109
github

00:28:27,359 --> 00:28:32,820
it's github.com slash predicts slash acs

00:28:31,109 --> 00:28:35,399
if you want to look at the source code

00:28:32,820 --> 00:28:37,859
there are a lot of JSON template

00:28:35,399 --> 00:28:41,399
examples and everything there and a lot

00:28:37,859 --> 00:28:45,839
of my examples here I went down to the

00:28:41,399 --> 00:28:48,749
the rest called layer or what the actual

00:28:45,839 --> 00:28:51,209
protocol exchange is because I didn't

00:28:48,749 --> 00:28:53,759
talk about a particular client library

00:28:51,209 --> 00:28:55,709
but ACS does actually have a spring

00:28:53,759 --> 00:28:57,929
security extension as well so if you are

00:28:55,709 --> 00:29:00,349
working in Java and you want to use ACS

00:28:57,929 --> 00:29:04,109
you can download the github repository

00:29:00,349 --> 00:29:05,849
wire it up to Cloud Foundry and write

00:29:04,109 --> 00:29:07,469
any applications using those security

00:29:05,849 --> 00:29:09,509
extensions that just handle a lot of

00:29:07,469 --> 00:29:12,269
those requests to creating resources

00:29:09,509 --> 00:29:15,499
creating subjects and everything so so

00:29:12,269 --> 00:29:21,059
Java and groovy are a big part of this

00:29:15,499 --> 00:29:23,820
implementation because of that

00:29:21,059 --> 00:29:28,409
relationship that hierarchy as you might

00:29:23,820 --> 00:29:30,059
expect there is graph database so for

00:29:28,409 --> 00:29:34,200
the current implementation it is based

00:29:30,059 --> 00:29:38,639
off of Titan DB uses patchy cassandra

00:29:34,200 --> 00:29:40,709
for storage and tinker pop using gremlin

00:29:38,639 --> 00:29:44,519
as sort of the graph traversal language

00:29:40,709 --> 00:29:46,409
to figure out what the policy evaluation

00:29:44,519 --> 00:29:48,089
would actually be so if you were

00:29:46,409 --> 00:29:50,249
standing this up these are some of the

00:29:48,089 --> 00:29:55,349
components that can be pulled down and

00:29:50,249 --> 00:29:56,820
configured to run a CSM Department so so

00:29:55,349 --> 00:29:58,799
basically we are talking about a service

00:29:56,820 --> 00:30:01,499
that you can run on top of these

00:29:58,799 --> 00:30:04,139
databases and I so I think Titan would

00:30:01,499 --> 00:30:07,669
allow you to configure other data stores

00:30:04,139 --> 00:30:07,669
here you gotta go in that direction

00:30:10,129 --> 00:30:16,019
caching becomes very important

00:30:13,139 --> 00:30:19,289
so Redis is being used to cache a lot of

00:30:16,019 --> 00:30:22,469
these attributes so I kind of hinted at

00:30:19,289 --> 00:30:23,969
these connectors so it's again the idea

00:30:22,469 --> 00:30:24,570
that some of these attributes might come

00:30:23,969 --> 00:30:26,730
from your idea

00:30:24,570 --> 00:30:28,740
the management system they might come

00:30:26,730 --> 00:30:31,080
from a device manufacturer there could

00:30:28,740 --> 00:30:32,630
be other data stores that have a lot of

00:30:31,080 --> 00:30:35,490
these attributes that can be discovered

00:30:32,630 --> 00:30:36,870
and so a lot of efforts in the source

00:30:35,490 --> 00:30:39,030
code around what are some caching

00:30:36,870 --> 00:30:42,330
policies how do you decide when to fetch

00:30:39,030 --> 00:30:44,160
new attributes but without having too

00:30:42,330 --> 00:30:46,050
big of a hit on performance because if

00:30:44,160 --> 00:30:49,050
you're doing this access control with

00:30:46,050 --> 00:30:51,270
each request where appropriate there is

00:30:49,050 --> 00:30:53,250
some performance penalty in order to do

00:30:51,270 --> 00:30:54,870
that

00:30:53,250 --> 00:30:57,660
the platform itself as I kind of

00:30:54,870 --> 00:31:01,770
mentioned built on Cloud Foundry with

00:30:57,660 --> 00:31:03,210
UAA and Jenkins for build so if you go

00:31:01,770 --> 00:31:05,340
to the project you can find out a little

00:31:03,210 --> 00:31:07,350
bit more about some of those things and

00:31:05,340 --> 00:31:09,030
so that kind of leads to a little bit

00:31:07,350 --> 00:31:13,820
more of this what is this open source

00:31:09,030 --> 00:31:16,890
story so ACS is potentially interesting

00:31:13,820 --> 00:31:18,270
because it has been open sourced under

00:31:16,890 --> 00:31:22,290
an Apache 2 license so that's

00:31:18,270 --> 00:31:26,970
interesting for GE perspective that the

00:31:22,290 --> 00:31:29,940
source code is just made available Cloud

00:31:26,970 --> 00:31:31,980
Foundry is another area where we make a

00:31:29,940 --> 00:31:33,360
lot of contributions so as I said my

00:31:31,980 --> 00:31:35,040
background is not necessarily I'm not a

00:31:33,360 --> 00:31:38,970
cyber security professional but we do

00:31:35,040 --> 00:31:41,910
have those folks who are the breakers as

00:31:38,970 --> 00:31:44,040
another way to I really like this notion

00:31:41,910 --> 00:31:46,110
that I happen to be on the maker side of

00:31:44,040 --> 00:31:47,670
things but there's another personality

00:31:46,110 --> 00:31:50,130
type the breakers who are just really

00:31:47,670 --> 00:31:51,630
good at figuring out how to exploit a

00:31:50,130 --> 00:31:53,280
system or how it's not supposed to work

00:31:51,630 --> 00:31:55,560
so so we do have a lot of breakers that

00:31:53,280 --> 00:31:57,720
go in and look at UAA because it is open

00:31:55,560 --> 00:32:01,500
source they could kind of review the

00:31:57,720 --> 00:32:04,290
security behind how authorization and

00:32:01,500 --> 00:32:06,440
authentication work within UA a for some

00:32:04,290 --> 00:32:09,180
of those coarse-grained security

00:32:06,440 --> 00:32:11,540
policies and Identity Management and so

00:32:09,180 --> 00:32:13,560
there have been a number of times where

00:32:11,540 --> 00:32:15,420
we have discovered some of those

00:32:13,560 --> 00:32:17,040
vulnerabilities and provided patches

00:32:15,420 --> 00:32:20,760
back and it's just not necessarily the

00:32:17,040 --> 00:32:22,410
story that's been well told in terms of

00:32:20,760 --> 00:32:23,940
what some of these contributions are so

00:32:22,410 --> 00:32:25,530
within cloud foundry because it's a

00:32:23,940 --> 00:32:28,140
platform as-a-service was originally

00:32:25,530 --> 00:32:31,590
built around HTTP requests WebSocket

00:32:28,140 --> 00:32:33,510
requests didn't really fit I owe T as

00:32:31,590 --> 00:32:35,820
well as it could have and so we actually

00:32:33,510 --> 00:32:36,990
had developers who worked on a go router

00:32:35,820 --> 00:32:39,330
to make it

00:32:36,990 --> 00:32:44,070
work properly for other protocols and

00:32:39,330 --> 00:32:45,390
qtt and so on polymer is a very I don't

00:32:44,070 --> 00:32:49,830
know if anyone's familiar with polymer

00:32:45,390 --> 00:32:51,270
is a UI or web component it's another

00:32:49,830 --> 00:32:54,300
example of some of the open-source

00:32:51,270 --> 00:32:57,210
projects that some of the development

00:32:54,300 --> 00:32:59,990
engineers are working on as well as just

00:32:57,210 --> 00:33:02,640
involvement with a lot of the consortia

00:32:59,990 --> 00:33:06,900
industrial internet I hope and fog and

00:33:02,640 --> 00:33:10,610
so I do want to highlight some of the

00:33:06,900 --> 00:33:14,220
committers to ACS so again github.com

00:33:10,610 --> 00:33:15,840
predicts ACS you can kind of go through

00:33:14,220 --> 00:33:17,340
and see who some of the the committers

00:33:15,840 --> 00:33:19,830
have look at the code look at a lot of

00:33:17,340 --> 00:33:22,260
the JSON examples and everybody can give

00:33:19,830 --> 00:33:24,330
you a flavor for how this goes it really

00:33:22,260 --> 00:33:26,520
it comes around to not necessarily

00:33:24,330 --> 00:33:30,090
needing to reinvent a wheel we have a

00:33:26,520 --> 00:33:32,280
lot of GE businesses that are using ACS

00:33:30,090 --> 00:33:35,510
for managing their access instead of

00:33:32,280 --> 00:33:35,510
going off and implementing their own

00:33:36,140 --> 00:33:42,150
authorization frameworks they're able to

00:33:38,820 --> 00:33:44,010
adopt ACS if those businesses find

00:33:42,150 --> 00:33:47,429
things it's almost that inter sourcing

00:33:44,010 --> 00:33:49,740
model but by being open in the first

00:33:47,429 --> 00:33:53,160
place it's helped set some of the ideas

00:33:49,740 --> 00:33:59,340
around governments and commitments and

00:33:53,160 --> 00:34:01,679
so that is a CS if there are some

00:33:59,340 --> 00:34:03,860
questions I can take some questions or I

00:34:01,679 --> 00:34:06,750
will be around for a little while and

00:34:03,860 --> 00:34:12,290
can can give you a little bit more

00:34:06,750 --> 00:34:12,290
insight into ACS yes

00:34:20,990 --> 00:34:26,780
so that's usually done by the the UAA

00:34:24,440 --> 00:34:31,550
portion so that's the dependency so you

00:34:26,780 --> 00:34:33,200
a a talking to other federated identity

00:34:31,550 --> 00:34:35,720
management systems or other identity

00:34:33,200 --> 00:34:45,169
providers maybe that's not what you

00:34:35,720 --> 00:34:50,000
meant though yes so so in my example the

00:34:45,169 --> 00:34:53,929
issuer so that would probably be you a a

00:34:50,000 --> 00:34:57,500
so as you're putting data points the

00:34:53,929 --> 00:35:02,210
subjects into ACS you can link back to

00:34:57,500 --> 00:35:04,040
the UA a record for that person which in

00:35:02,210 --> 00:35:11,359
turn is may be speaking to some other

00:35:04,040 --> 00:35:15,140
identity provider yeah so in in many

00:35:11,359 --> 00:35:18,859
cases we have another service we call it

00:35:15,140 --> 00:35:21,040
the asset service so that is a typical

00:35:18,859 --> 00:35:23,930
pattern that we have at least for

00:35:21,040 --> 00:35:25,640
recording those entries so part of the

00:35:23,930 --> 00:35:27,079
ACS project is this notion of connectors

00:35:25,640 --> 00:35:32,300
and being able to talk to some of these

00:35:27,079 --> 00:35:33,770
other repositories of resources so I'm

00:35:32,300 --> 00:35:35,960
only familiar with the asset service

00:35:33,770 --> 00:35:37,069
because that's what we tend to use but I

00:35:35,960 --> 00:35:38,660
think that's one of the strengths

00:35:37,069 --> 00:35:41,990
potentially of it being open sources if

00:35:38,660 --> 00:35:43,579
there are other resource that should

00:35:41,990 --> 00:35:45,589
have a connector to be able to discover

00:35:43,579 --> 00:35:49,450
some of those attributes certainly that

00:35:45,589 --> 00:35:49,450
would be a welcome conversation

00:35:53,300 --> 00:36:17,000
all right yes yeah there has certainly

00:36:08,510 --> 00:36:19,310
been a lot of fans yeah yeah so are the

00:36:17,000 --> 00:36:22,100
predicts UI that we're using for a lot

00:36:19,310 --> 00:36:23,900
of applications is based on polymer and

00:36:22,100 --> 00:36:26,390
so I think that's it again it's another

00:36:23,900 --> 00:36:28,850
one of these that we haven't focused

00:36:26,390 --> 00:36:30,410
enough maybe on what that open-source

00:36:28,850 --> 00:36:32,180
sorry you know there's lots of other

00:36:30,410 --> 00:36:33,890
companies that put out their open-source

00:36:32,180 --> 00:36:36,050
report cards and really focus on what

00:36:33,890 --> 00:36:37,700
those contributions are but our IT

00:36:36,050 --> 00:36:39,950
organization lots of organizations

00:36:37,700 --> 00:36:42,530
across GE that I'm not even aware of

00:36:39,950 --> 00:36:45,740
on weekends are working on projects and

00:36:42,530 --> 00:36:47,090
doing lots of really good work so

00:36:45,740 --> 00:36:48,640
polymer is another example where we are

00:36:47,090 --> 00:36:51,530
actually for some of our applications

00:36:48,640 --> 00:36:54,140
building the UI on the framework and in

00:36:51,530 --> 00:36:56,380
trying to work back with the polymer

00:36:54,140 --> 00:36:56,380
team

00:37:00,940 --> 00:37:06,360
all right

00:37:02,970 --> 00:37:19,110
sorry I do tend to talk fast hopefully

00:37:06,360 --> 00:37:20,730
oh yeah this is a great question I would

00:37:19,110 --> 00:37:23,700
put it definitely on the early stages

00:37:20,730 --> 00:37:27,510
side of things so it is being used a lot

00:37:23,700 --> 00:37:29,670
within the GE applications a lot of our

00:37:27,510 --> 00:37:30,810
businesses are making use of it so

00:37:29,670 --> 00:37:33,480
that's why I say a little bit more on

00:37:30,810 --> 00:37:34,890
that inner sourcing side of things but

00:37:33,480 --> 00:37:37,980
because it's been released under an

00:37:34,890 --> 00:37:40,950
Apache 2 license I think there is a goal

00:37:37,980 --> 00:37:43,080
of getting it out there and evangelizing

00:37:40,950 --> 00:37:44,880
to ascend to say like if you does

00:37:43,080 --> 00:37:47,130
everyone need to reinvent the same wheel

00:37:44,880 --> 00:37:50,400
it's not that it's necessarily a super

00:37:47,130 --> 00:37:51,930
complicated problem but dealing with

00:37:50,400 --> 00:37:53,520
some of that complexity and learning

00:37:51,930 --> 00:37:55,770
from some of our use cases can help

00:37:53,520 --> 00:37:57,840
contribute to that project and make it

00:37:55,770 --> 00:38:01,950
something that other people can use and

00:37:57,840 --> 00:38:04,590
like I said there's a wearing a boundary

00:38:01,950 --> 00:38:06,150
shirt here there's a relationship with

00:38:04,590 --> 00:38:07,950
the Cloud Foundry platform as well where

00:38:06,150 --> 00:38:10,530
that does seem that a lot of people have

00:38:07,950 --> 00:38:13,410
these problems if you have that very

00:38:10,530 --> 00:38:14,580
simple case of you in admin or not you

00:38:13,410 --> 00:38:17,580
probably don't need it it might be a

00:38:14,580 --> 00:38:19,140
little bit overkill in that case but but

00:38:17,580 --> 00:38:20,910
if you do have much more complex

00:38:19,140 --> 00:38:22,680
relationships lots of assets lots of

00:38:20,910 --> 00:38:26,180
devices and trying to deal with all

00:38:22,680 --> 00:38:26,180
those things then absolutely

00:38:29,050 --> 00:38:31,650
okay

00:38:39,869 --> 00:38:42,769

YouTube URL: https://www.youtube.com/watch?v=r52Dp3Pevww


