Title: Accelerating Prototype to Commercial Device with Snapdragon and Ubuntu Core - Oksana Wilcox
Publication date: 2017-02-27
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2017
Description: 
	Accelerating Prototype to Commercial Device with Snapdragon and Ubuntu Core - Oksana Wilcox, Qualcomm Technologies & Kyle Fazzari, Canonical

This session will explore the life cycle of software on an IoT device, from prototype to commercial deployment and remote maintenance. The Qualcomm® Snapdragon™ embedded portfolio offers a range of solutions, from development platforms to commercial off-the-shelf modules, to help speed IoT device commercialization.  Using the DragonBoard™ 410c development board based on the Snapdragon 410E processor, this session illustrates how to quickly and easily package an entire software stack, from kernel to applications, for fast prototyping and beta testing using Ubuntu Core and snaps. The session will also demonstrate how to support and maintain the software for devices deployed in the field through trusted application stores with transactional updates and rollback.

About Kyle Fazzari
Kyle Fazzari is a software engineer on the snappy team at Canonical. His focus mostly revolves around Snapcraft and the snap developer experience. His background includes robotics, image processing, and embedded systems.

About Oksana Wilcox
Oksana Wilcox is a staff manager of product planning for Qualcomm Technologies, Inc., within the IoT (Internet of Things) business unit, where she is responsible for Qualcomm® Snapdragon™ embedded computing products.

Oksana has more than 19 years of experience in various business development, operations and product planning roles in the mobile and computing industries.

Prior to joining Qualcomm in 2005, she worked in Ericsson San Diego and Packet Video London, where she worked on various multimedia technology platforms.

Oksana holds a master’s degree in management in marketing from National University, San Diego.
Captions: 
	00:00:00,000 --> 00:00:04,650
hello and welcome to this session called

00:00:02,970 --> 00:00:07,740
accelerating prototype to commercial

00:00:04,650 --> 00:00:10,200
device with snapdragon with Manticore my

00:00:07,740 --> 00:00:11,759
name is Oksana Wilcox I am the manager

00:00:10,200 --> 00:00:14,130
of product planning for Qualcomm

00:00:11,759 --> 00:00:17,400
technologies working on Qualcomm

00:00:14,130 --> 00:00:18,660
Snapdragon embedded processors this

00:00:17,400 --> 00:00:20,160
presentation actually has three

00:00:18,660 --> 00:00:21,900
presenters there's two colleagues of

00:00:20,160 --> 00:00:23,939
mine here from canonical I will

00:00:21,900 --> 00:00:30,480
transition to them after my section they

00:00:23,939 --> 00:00:32,309
will talk more about the ubuntu core we

00:00:30,480 --> 00:00:34,230
all know IOT industries and better

00:00:32,309 --> 00:00:35,520
computing industries mass market

00:00:34,230 --> 00:00:38,340
whatever the terms that you're most

00:00:35,520 --> 00:00:41,250
familiar with are all looking to create

00:00:38,340 --> 00:00:43,860
smart connected devices and where do we

00:00:41,250 --> 00:00:46,110
best look for technologies so that

00:00:43,860 --> 00:00:49,980
already proven have unparalleled scale

00:00:46,110 --> 00:00:52,620
have integrated capabilities rapid

00:00:49,980 --> 00:00:54,930
development cycles other than mobile so

00:00:52,620 --> 00:00:57,629
the smartphone technology is truly from

00:00:54,930 --> 00:01:01,309
digital signal processing from the fast

00:00:57,629 --> 00:01:04,110
CPUs from graphics processing units

00:01:01,309 --> 00:01:07,740
integrated GPS and degraded connectivity

00:01:04,110 --> 00:01:10,260
from Wi-Fi to Bluetooth optimized metal

00:01:07,740 --> 00:01:13,080
media multimedia performances power

00:01:10,260 --> 00:01:16,500
management small power small memory size

00:01:13,080 --> 00:01:18,840
and of course support for various

00:01:16,500 --> 00:01:21,509
operating system other than the in

00:01:18,840 --> 00:01:22,920
mobile space welcome technologist

00:01:21,509 --> 00:01:24,619
obviously as most of you know is a

00:01:22,920 --> 00:01:28,200
semiconductor company that's been

00:01:24,619 --> 00:01:30,210
providing snapdragon solutions to mobile

00:01:28,200 --> 00:01:33,150
OEMs and tablets for many many years

00:01:30,210 --> 00:01:35,220
so understanding the demands of the

00:01:33,150 --> 00:01:37,409
embedded computing industry we wanted to

00:01:35,220 --> 00:01:39,869
capitalize on the investments that we've

00:01:37,409 --> 00:01:43,670
made in the mobile space and bring it to

00:01:39,869 --> 00:01:48,990
the computing and Internet of Things

00:01:43,670 --> 00:01:51,270
industries just a quick snapshot on what

00:01:48,990 --> 00:01:55,170
type of challenges we imagine there are

00:01:51,270 --> 00:01:56,790
in differences between mobile OEMs and

00:01:55,170 --> 00:01:58,110
embedded customers and I won't go

00:01:56,790 --> 00:02:00,869
through every single thing on the list

00:01:58,110 --> 00:02:02,040
but understanding that understanding

00:02:00,869 --> 00:02:04,530
that helps us select particular

00:02:02,040 --> 00:02:06,299
processors and understand what type of

00:02:04,530 --> 00:02:09,300
enablement that we need and would be

00:02:06,299 --> 00:02:11,790
required to bring this to the market

00:02:09,300 --> 00:02:13,379
from the mobile OEMs embedded customers

00:02:11,790 --> 00:02:13,770
perspective the relationships are very

00:02:13,379 --> 00:02:16,350
different

00:02:13,770 --> 00:02:18,720
from high touch one-on-one dedicated FA

00:02:16,350 --> 00:02:20,940
ES and support the very low touch and

00:02:18,720 --> 00:02:24,470
potentially web-only support from

00:02:20,940 --> 00:02:26,660
fulfilling directly to distribution from

00:02:24,470 --> 00:02:30,120
requirement for minimum orders of

00:02:26,660 --> 00:02:32,220
millions of devices to tens of thousands

00:02:30,120 --> 00:02:34,830
maybe hundreds of thousands and Dylan

00:02:32,220 --> 00:02:38,090
will share a number of customers going

00:02:34,830 --> 00:02:40,140
from a handful of OEMs and OEMs to

00:02:38,090 --> 00:02:42,150
hundreds of thousands of customers that

00:02:40,140 --> 00:02:44,430
all in aggregate add up to a tremendous

00:02:42,150 --> 00:02:46,440
business opportunity for the company so

00:02:44,430 --> 00:02:50,250
understanding all of that and all those

00:02:46,440 --> 00:02:52,500
challenges allowed us to focus on

00:02:50,250 --> 00:02:55,140
selecting a particular Snapdragon

00:02:52,500 --> 00:02:57,450
embedded portfolio that we are now

00:02:55,140 --> 00:03:00,180
offering in mass market space that spans

00:02:57,450 --> 00:03:04,470
from low-end to mid-range to high-end

00:03:00,180 --> 00:03:07,350
devices Snapdragon devices from a lower

00:03:04,470 --> 00:03:12,540
end we introduced Snapdragon 410 which

00:03:07,350 --> 00:03:16,560
is an arm a 53 63 sorry 32 and 63 bit

00:03:12,540 --> 00:03:19,320
capable device 1.2 gigahertz per core as

00:03:16,560 --> 00:03:21,540
well as Snapdragon 600 which is mid tier

00:03:19,320 --> 00:03:24,180
from our perspective 1.5 gigahertz per

00:03:21,540 --> 00:03:26,520
core with qualcomm proprietary cpu

00:03:24,180 --> 00:03:29,430
called crate we introduced those devices

00:03:26,520 --> 00:03:33,870
most recently with what we call an e

00:03:29,430 --> 00:03:37,470
scue which stands for extended life that

00:03:33,870 --> 00:03:39,510
in our in our terminology means that

00:03:37,470 --> 00:03:41,370
this devices will be available through

00:03:39,510 --> 00:03:44,280
the year of 2025 which we believe

00:03:41,370 --> 00:03:46,170
believe is a key requirement for the

00:03:44,280 --> 00:03:49,740
embedded space we're currently in the

00:03:46,170 --> 00:03:52,800
process of identifying a SKU for the

00:03:49,740 --> 00:03:56,310
premium tier which at Qualcomm is called

00:03:52,800 --> 00:03:58,770
800 series currently there are modules

00:03:56,310 --> 00:04:00,180
available based on Snapdragon 820 which

00:03:58,770 --> 00:04:02,550
is a for one of the primitive premium

00:04:00,180 --> 00:04:05,130
tier devices however we're still working

00:04:02,550 --> 00:04:06,480
on the dedicated SKU that will put

00:04:05,130 --> 00:04:08,910
through the channel make available to

00:04:06,480 --> 00:04:10,680
mass-market so please stay - stay tuned

00:04:08,910 --> 00:04:15,450
look on our site that they'll become

00:04:10,680 --> 00:04:17,250
available relatively soon again kind of

00:04:15,450 --> 00:04:19,020
an eye chart slide you don't need to see

00:04:17,250 --> 00:04:21,150
this side by side and don't need me to

00:04:19,020 --> 00:04:23,010
speak to side by side in detail but also

00:04:21,150 --> 00:04:26,160
tells you again about the breadth of

00:04:23,010 --> 00:04:28,290
portfolio that we are offering if if

00:04:26,160 --> 00:04:29,880
the types of devices that your aunt

00:04:28,290 --> 00:04:31,890
customers are you as another customer

00:04:29,880 --> 00:04:34,110
looking to launch don't require a lot of

00:04:31,890 --> 00:04:36,470
capacity they don't don't require as

00:04:34,110 --> 00:04:40,260
high of an a speed and potential

00:04:36,470 --> 00:04:42,900
performance of GPU then you can select

00:04:40,260 --> 00:04:45,540
the device like 410 which has obvious

00:04:42,900 --> 00:04:47,100
benefits that that include the cost

00:04:45,540 --> 00:04:49,320
factor as well I won't speak to the cost

00:04:47,100 --> 00:04:52,200
specifically but that's one of the

00:04:49,320 --> 00:04:55,230
reasons we have serious of low tier to

00:04:52,200 --> 00:04:57,000
mid tier devices the Snapdragon 410

00:04:55,230 --> 00:04:58,290
interested in interesting factoids

00:04:57,000 --> 00:05:00,540
supports three different operating

00:04:58,290 --> 00:05:02,850
systems supports Android several

00:05:00,540 --> 00:05:07,590
distributions in Linux and Windows 10

00:05:02,850 --> 00:05:09,960
IOT we are currently working on adding

00:05:07,590 --> 00:05:15,150
that to 600 but it does support Linux

00:05:09,960 --> 00:05:17,100
and Android right now selecting

00:05:15,150 --> 00:05:19,320
processors and making them available in

00:05:17,100 --> 00:05:20,940
mass-market through our partner I have

00:05:19,320 --> 00:05:23,250
emitted to mention that in one of the

00:05:20,940 --> 00:05:24,780
first slides our partner electronics

00:05:23,250 --> 00:05:27,240
which a lot of you probably have bought

00:05:24,780 --> 00:05:31,350
devices or electronics or parts from

00:05:27,240 --> 00:05:32,820
them selecting the devices and making

00:05:31,350 --> 00:05:34,460
them put in them through the channel was

00:05:32,820 --> 00:05:37,020
just the first challenge for us

00:05:34,460 --> 00:05:39,870
understanding what else is required that

00:05:37,020 --> 00:05:41,610
the ecosystem that's required to

00:05:39,870 --> 00:05:43,860
actually enable your customer not only

00:05:41,610 --> 00:05:45,630
take that device so take that board and

00:05:43,860 --> 00:05:46,920
prototype on it and actually launch it

00:05:45,630 --> 00:05:48,990
in the commercial product that customers

00:05:46,920 --> 00:05:51,390
would buy is a completely different

00:05:48,990 --> 00:05:54,330
story and the things that we understood

00:05:51,390 --> 00:05:57,660
in addressed were they need for

00:05:54,330 --> 00:05:59,100
community boards we have for each

00:05:57,660 --> 00:06:01,140
processor in the channel we had

00:05:59,100 --> 00:06:03,060
developed a board called dragon board at

00:06:01,140 --> 00:06:05,400
the Qualcomm trade mark we have a dragon

00:06:03,060 --> 00:06:07,320
book for 10 see right now available it's

00:06:05,400 --> 00:06:09,150
been launched for over a years been a

00:06:07,320 --> 00:06:11,490
very successful development platform for

00:06:09,150 --> 00:06:13,770
software for us we're working on

00:06:11,490 --> 00:06:17,100
developing and launching dragon board

00:06:13,770 --> 00:06:19,020
600c and then in the near future 820 see

00:06:17,100 --> 00:06:21,270
so please to stay tuned again the best

00:06:19,020 --> 00:06:24,360
way to learn about what's coming is

00:06:21,270 --> 00:06:26,940
going to developer doubt Qualcomm comm

00:06:24,360 --> 00:06:28,800
it's our community site that if you sign

00:06:26,940 --> 00:06:30,750
up as a developer then you'll get email

00:06:28,800 --> 00:06:33,750
information about the new products

00:06:30,750 --> 00:06:35,610
coming so that falls for the hardware

00:06:33,750 --> 00:06:37,620
situation then what do you do with the

00:06:35,610 --> 00:06:39,420
software with the software we work very

00:06:37,620 --> 00:06:42,380
closely with Lennar Oh

00:06:39,420 --> 00:06:45,240
96 boards org where Qualcomm is a member

00:06:42,380 --> 00:06:47,100
as part of our membership we have a

00:06:45,240 --> 00:06:50,010
dedicated team of engineers that helps

00:06:47,100 --> 00:06:51,270
develop in our platforms so they're the

00:06:50,010 --> 00:06:52,560
all three platforms that I just

00:06:51,270 --> 00:06:55,080
mentioned they're currently being worked

00:06:52,560 --> 00:06:58,290
on to add additional features in Linux

00:06:55,080 --> 00:07:00,180
open embedded and Linux Debian as well

00:06:58,290 --> 00:07:02,430
as we have a group of folks who work

00:07:00,180 --> 00:07:04,980
with a canonical that enable additional

00:07:02,430 --> 00:07:07,050
features through a Bunter core I've

00:07:04,980 --> 00:07:08,880
mentioned longevity again all this

00:07:07,050 --> 00:07:12,150
chipsets come with a 10-year commitment

00:07:08,880 --> 00:07:14,040
from Qualcomm we're continuing to work

00:07:12,150 --> 00:07:17,130
on making more and more publicly

00:07:14,040 --> 00:07:19,620
available documentation and tools as

00:07:17,130 --> 00:07:21,240
well as I wanted to introduce the

00:07:19,620 --> 00:07:25,140
concept of what we call a Snapdragon

00:07:21,240 --> 00:07:27,570
technology partner that is a group of

00:07:25,140 --> 00:07:30,180
companies that have early access to

00:07:27,570 --> 00:07:31,590
Qualcomm processors a lot of expertise

00:07:30,180 --> 00:07:34,020
in working with Qualcomm source code

00:07:31,590 --> 00:07:36,810
welcome documentation on tools they

00:07:34,020 --> 00:07:38,580
develop modules whether it's Psalms or

00:07:36,810 --> 00:07:41,280
as we seize the full-on development kits

00:07:38,580 --> 00:07:43,290
based on Qualcomm processors a lot of

00:07:41,280 --> 00:07:45,210
the time way ahead those processors

00:07:43,290 --> 00:07:47,310
becoming available in the marketplace so

00:07:45,210 --> 00:07:49,470
customers could go to them get access to

00:07:47,310 --> 00:07:51,060
those devices prototype but they say

00:07:49,470 --> 00:07:52,680
they make a decision that that is the

00:07:51,060 --> 00:07:55,080
right processor for them to actually do

00:07:52,680 --> 00:07:56,610
chip down design or a custom module they

00:07:55,080 --> 00:07:57,870
could come to Qualcomm or actually they

00:07:56,610 --> 00:08:00,780
could come to our electronics and buy

00:07:57,870 --> 00:08:03,890
the actual chip down discrete part at

00:08:00,780 --> 00:08:05,990
that point from from error electronics

00:08:03,890 --> 00:08:08,850
it just kind of gives you yet another

00:08:05,990 --> 00:08:11,160
another view and a few names of

00:08:08,850 --> 00:08:13,530
customers like our partners like again

00:08:11,160 --> 00:08:16,140
our electronics infra chips in force

00:08:13,530 --> 00:08:17,730
computing intrinsic variscite canonical

00:08:16,140 --> 00:08:18,960
even though you guys are most VM you're

00:08:17,730 --> 00:08:20,370
all on the software side but nonetheless

00:08:18,960 --> 00:08:25,020
you provide software integration

00:08:20,370 --> 00:08:27,690
services so having taken care of the

00:08:25,020 --> 00:08:30,750
hardware the documentation the tools the

00:08:27,690 --> 00:08:33,780
hardware partners obviously software is

00:08:30,750 --> 00:08:35,430
key we look at that from enabling the

00:08:33,780 --> 00:08:38,130
various high level operating system

00:08:35,430 --> 00:08:40,710
support middleware and integrating cloud

00:08:38,130 --> 00:08:42,479
providers currently sniper new

00:08:40,710 --> 00:08:44,580
processors and of course the boards that

00:08:42,479 --> 00:08:46,680
have the processes in them as I

00:08:44,580 --> 00:08:48,930
mentioned support the three key

00:08:46,680 --> 00:08:51,120
operating systems Android for Linux we

00:08:48,930 --> 00:08:52,590
support Debian openembedded & Abunda

00:08:51,120 --> 00:08:55,140
core distributions

00:08:52,590 --> 00:08:58,230
and then Windows 10 IOT core we have

00:08:55,140 --> 00:09:02,160
integrated with all join IBM Watson IOT

00:08:58,230 --> 00:09:06,180
platform and we have robotics OS running

00:09:02,160 --> 00:09:09,660
on 410 and 600 for cloud partners who

00:09:06,180 --> 00:09:11,850
partner with AT&T AWS IOT you could

00:09:09,660 --> 00:09:14,850
actually to go on Amazon you could buy

00:09:11,850 --> 00:09:17,070
dragon board for Chauncey AWS kit that

00:09:14,850 --> 00:09:19,710
is integrated with their api's and

00:09:17,070 --> 00:09:22,500
brands Linux Debian we have a recipe for

00:09:19,710 --> 00:09:25,410
IBM bluemix available either on bluemix

00:09:22,500 --> 00:09:28,350
or on on Ericom and we are partners with

00:09:25,410 --> 00:09:31,730
Microsoft Azure so hopefully rounding up

00:09:28,350 --> 00:09:34,830
a software ecosystem solution to get the

00:09:31,730 --> 00:09:38,370
developers what they need and have have

00:09:34,830 --> 00:09:40,020
flexible options for them really quickly

00:09:38,370 --> 00:09:41,940
I'll touch on the community board then I

00:09:40,020 --> 00:09:43,890
will pass on to my colleagues Kyle and

00:09:41,940 --> 00:09:45,480
Lori here from canonical to talk about

00:09:43,890 --> 00:09:47,060
the work that we're doing with

00:09:45,480 --> 00:09:49,800
Snapdragon and dragon board

00:09:47,060 --> 00:09:51,840
dragon fortunes fort MC is a commercial

00:09:49,800 --> 00:09:55,620
product it's a product by Aero designed

00:09:51,840 --> 00:09:57,450
and initially designed by Qualcomm truly

00:09:55,620 --> 00:09:59,490
a prototyping platform platform for

00:09:57,450 --> 00:10:01,440
software development and also for

00:09:59,490 --> 00:10:03,810
prototype of actual connect commercial

00:10:01,440 --> 00:10:05,370
devices if any of your customers are

00:10:03,810 --> 00:10:07,620
yourselves wanted to buy it you go to

00:10:05,370 --> 00:10:09,300
aero you buy the product you get a

00:10:07,620 --> 00:10:11,130
particular fee assigned to your

00:10:09,300 --> 00:10:13,050
organization to work with you to see if

00:10:11,130 --> 00:10:15,740
this is the right product for you

00:10:13,050 --> 00:10:18,060
potentially modules potentially actual

00:10:15,740 --> 00:10:19,740
chip down design for your for your

00:10:18,060 --> 00:10:23,640
product this is a great way to get

00:10:19,740 --> 00:10:27,500
experience with Snapdragon processors we

00:10:23,640 --> 00:10:29,730
are very committed to open source

00:10:27,500 --> 00:10:31,590
distributions and up streaming as though

00:10:29,730 --> 00:10:34,050
for that reason we're very involved with

00:10:31,590 --> 00:10:37,790
when our Foundation as well as 96 ports

00:10:34,050 --> 00:10:40,530
so all the dragon boards that we make to

00:10:37,790 --> 00:10:42,990
give access to qualcomm processors

00:10:40,530 --> 00:10:44,580
early-stage qualcomm early-stage access

00:10:42,990 --> 00:10:47,340
to existing qualcomm processors they're

00:10:44,580 --> 00:10:49,890
all 96 board's compliant which means

00:10:47,340 --> 00:10:51,960
that compliant is 96 board c e open

00:10:49,890 --> 00:10:55,470
hardware specification and the great

00:10:51,960 --> 00:10:57,210
thing about that any mezzanine board any

00:10:55,470 --> 00:10:59,460
accessory that's built to that

00:10:57,210 --> 00:11:04,350
specification by other vendors be at see

00:10:59,460 --> 00:11:05,610
the linker or groove or anyone they will

00:11:04,350 --> 00:11:06,420
work with our boards as well as they

00:11:05,610 --> 00:11:08,639
will work with any other

00:11:06,420 --> 00:11:11,940
more that 96 boards is selling just to

00:11:08,639 --> 00:11:14,910
not to undersell them and that pretty

00:11:11,940 --> 00:11:16,290
much wraps up my portion unless I think

00:11:14,910 --> 00:11:17,730
we will take questions if we need to at

00:11:16,290 --> 00:11:18,570
the end but at this point I'd like to

00:11:17,730 --> 00:11:24,600
introduce Kyle

00:11:18,570 --> 00:11:34,560
Azari and Lowry snow from actually yes

00:11:24,600 --> 00:11:36,510
from canonical I think you guys I'm

00:11:34,560 --> 00:11:38,790
really going to let Kyle spend most of

00:11:36,510 --> 00:11:42,230
the time talking about how a developer

00:11:38,790 --> 00:11:45,240
or a company designing a device would

00:11:42,230 --> 00:11:47,370
choose to select components that would

00:11:45,240 --> 00:11:48,690
accelerate the time to market but I

00:11:47,370 --> 00:11:50,610
wanted to highlight something very

00:11:48,690 --> 00:11:53,459
important because the work that we've

00:11:50,610 --> 00:11:58,199
been doing with Qualcomm and with Lennar

00:11:53,459 --> 00:11:59,820
o Qualcomm and canonical along with some

00:11:58,199 --> 00:12:01,589
of the the hardware partners that that

00:11:59,820 --> 00:12:05,370
Qualcomm is working with we have a

00:12:01,589 --> 00:12:07,829
unique value proposition for a device

00:12:05,370 --> 00:12:10,410
manufacturer or for a developer that's

00:12:07,829 --> 00:12:12,769
that's selecting which parts to build

00:12:10,410 --> 00:12:15,149
with to take a device to market

00:12:12,769 --> 00:12:17,100
fortunately for developers in the

00:12:15,149 --> 00:12:20,430
embedded space today more than ever

00:12:17,100 --> 00:12:23,760
before with words like IOT and internet

00:12:20,430 --> 00:12:27,990
of everything there's a grand focus on

00:12:23,760 --> 00:12:30,170
on providing tools and modules that

00:12:27,990 --> 00:12:33,149
allow a device manufacturer to quickly

00:12:30,170 --> 00:12:36,120
build something that can go from

00:12:33,149 --> 00:12:38,430
prototype to market very quickly so the

00:12:36,120 --> 00:12:41,220
value prop for building with snapdragon

00:12:38,430 --> 00:12:43,620
an ubuntu core is unlike what you might

00:12:41,220 --> 00:12:48,120
see with with other hardware vendors and

00:12:43,620 --> 00:12:52,350
software distros we provide an Ubuntu OS

00:12:48,120 --> 00:12:54,600
image that is a reference image that's

00:12:52,350 --> 00:12:56,699
supported for a five-year period of time

00:12:54,600 --> 00:12:59,730
with Securi immediate updates which is

00:12:56,699 --> 00:13:01,019
an LTS release and and that's because of

00:12:59,730 --> 00:13:03,510
the the work that we've done with the

00:13:01,019 --> 00:13:06,720
Naro group and with Qualcomm along with

00:13:03,510 --> 00:13:08,819
that that OS that can be used to take a

00:13:06,720 --> 00:13:12,540
device to market without any additional

00:13:08,819 --> 00:13:16,290
formal agreement with with canonical we

00:13:12,540 --> 00:13:18,209
have an entire infrastructure and and in

00:13:16,290 --> 00:13:19,540
distribution mechanism that allows you

00:13:18,209 --> 00:13:21,820
to upload an app

00:13:19,540 --> 00:13:25,839
and have your app available on your

00:13:21,820 --> 00:13:27,720
device with over-the-air updates for for

00:13:25,839 --> 00:13:31,329
free we're offering that entire app

00:13:27,720 --> 00:13:33,690
delivery and update mechanism for any

00:13:31,329 --> 00:13:36,220
developer and device manufacturer and

00:13:33,690 --> 00:13:38,529
that's the message that that you get

00:13:36,220 --> 00:13:40,839
when you take a hardware reference

00:13:38,529 --> 00:13:42,699
design from Qualcomm and then this

00:13:40,839 --> 00:13:47,889
reference OS image that goes along with

00:13:42,699 --> 00:13:49,389
that most companies opt to do that work

00:13:47,889 --> 00:13:51,550
on their own and most developers off to

00:13:49,389 --> 00:13:52,930
do that work on their own Oxana

00:13:51,550 --> 00:13:55,540
mentioned the software integration

00:13:52,930 --> 00:13:57,850
service that we provide along with this

00:13:55,540 --> 00:14:01,750
reference image that can be adapted for

00:13:57,850 --> 00:14:03,100
your use we do offer consulting services

00:14:01,750 --> 00:14:07,930
and engineering services to further

00:14:03,100 --> 00:14:12,220
enable your device for market I'm going

00:14:07,930 --> 00:14:15,399
to pass on now to Kyle who's going to

00:14:12,220 --> 00:14:17,440
talk very specifically about something

00:14:15,399 --> 00:14:20,170
that was done to take a device to market

00:14:17,440 --> 00:14:23,290
and how easy it would be to build off of

00:14:20,170 --> 00:14:24,790
this concept to very quickly build a

00:14:23,290 --> 00:14:27,010
prototype and then take that prototype

00:14:24,790 --> 00:14:33,880
to market so software engineer Kyle

00:14:27,010 --> 00:14:36,250
Kazari hey everyone my name is Kyle fat

00:14:33,880 --> 00:14:38,740
sorry and as Larry mentioned I am very

00:14:36,250 --> 00:14:41,709
proudly a grunt software engineer I work

00:14:38,740 --> 00:14:43,510
on this well specifically I work on the

00:14:41,709 --> 00:14:46,810
packagers called snap craft all I'll

00:14:43,510 --> 00:14:48,160
talk about that in a minute but as a lot

00:14:46,810 --> 00:14:50,740
I mentioned what I want to talk about is

00:14:48,160 --> 00:14:53,560
how easy it is to go from a prototype

00:14:50,740 --> 00:14:56,019
you have to an image you can flash in

00:14:53,560 --> 00:14:58,000
the factory and ship using ubuntu core

00:14:56,019 --> 00:14:59,350
and to do that I'm going to give you a

00:14:58,000 --> 00:15:02,319
quick overview of what it meant to court

00:14:59,350 --> 00:15:04,389
exactly is and then walk you through an

00:15:02,319 --> 00:15:07,839
example that that is something you could

00:15:04,389 --> 00:15:11,740
actually buy today so let's get started

00:15:07,839 --> 00:15:14,500
so I'm gonna cover each of these points

00:15:11,740 --> 00:15:18,160
is these empty right slides hold on

00:15:14,500 --> 00:15:20,319
sorry there we go okay so I will cover

00:15:18,160 --> 00:15:23,100
each of these in detail but but what is

00:15:20,319 --> 00:15:25,569
the boon to core well it's as you

00:15:23,100 --> 00:15:27,819
probably know we've been to is based on

00:15:25,569 --> 00:15:30,069
Debian I've been to core is a

00:15:27,819 --> 00:15:31,600
distribution of a boon to that uses a

00:15:30,069 --> 00:15:33,279
different packaging format called snaps

00:15:31,600 --> 00:15:34,839
which gives it a couple

00:15:33,279 --> 00:15:36,819
of interesting properties first of all

00:15:34,839 --> 00:15:39,310
give us a transactional updates which

00:15:36,819 --> 00:15:43,420
means it's updated at how atomically and

00:15:39,310 --> 00:15:44,709
if you lose power or the update goes bad

00:15:43,420 --> 00:15:47,050
right then you can roll back to a

00:15:44,709 --> 00:15:49,360
previous version

00:15:47,050 --> 00:15:51,639
snaps have confinement built into them

00:15:49,360 --> 00:15:53,110
right so you can you get confinement

00:15:51,639 --> 00:15:57,249
that's a pretty easy story for

00:15:53,110 --> 00:15:59,170
additional security the the developer

00:15:57,249 --> 00:16:00,610
experience to actually create snaps is

00:15:59,170 --> 00:16:02,980
is really well thought through like I

00:16:00,610 --> 00:16:04,569
said this is this is what I work on here

00:16:02,980 --> 00:16:07,180
this is where I'm focused with a tool

00:16:04,569 --> 00:16:09,040
called snap craft and then as Larry

00:16:07,180 --> 00:16:11,980
mentioned there's the store that you get

00:16:09,040 --> 00:16:14,259
for free where you you push an update

00:16:11,980 --> 00:16:17,019
and all your devices automatically get

00:16:14,259 --> 00:16:18,249
that update and finally there's the fact

00:16:17,019 --> 00:16:19,959
that it went accordin actually plugs

00:16:18,249 --> 00:16:23,110
into the trusted cadence that have been

00:16:19,959 --> 00:16:25,180
- has long established so let me go

00:16:23,110 --> 00:16:28,389
through each of these points first of

00:16:25,180 --> 00:16:31,149
all what are snaps at its most basic

00:16:28,389 --> 00:16:33,519
level a snap is simply a squash FS image

00:16:31,149 --> 00:16:35,709
with some metadata in it now that

00:16:33,519 --> 00:16:38,220
metadata the the spec for it you know

00:16:35,709 --> 00:16:40,769
what makes this squash FS a snap is

00:16:38,220 --> 00:16:43,209
determined by a governing body from a

00:16:40,769 --> 00:16:44,350
bunch of different distributions here so

00:16:43,209 --> 00:16:46,269
we try to keep it as neutral as possible

00:16:44,350 --> 00:16:47,649
which means that snaps run on a

00:16:46,269 --> 00:16:49,629
different number of different

00:16:47,649 --> 00:16:52,360
distributions including regular old

00:16:49,629 --> 00:16:56,889
Ubuntu desktop and server Debian arch

00:16:52,360 --> 00:16:58,629
right among others and then because of

00:16:56,889 --> 00:17:00,459
the store it allows you to deliver your

00:16:58,629 --> 00:17:02,889
updates directly instead of having to go

00:17:00,459 --> 00:17:04,689
through the various package management

00:17:02,889 --> 00:17:10,000
mechanisms that all of those distres

00:17:04,689 --> 00:17:11,919
used now another property of the fact

00:17:10,000 --> 00:17:13,419
that these are scratch surface images is

00:17:11,919 --> 00:17:15,039
that they also bundle all their

00:17:13,419 --> 00:17:18,750
dependencies which makes them via this

00:17:15,039 --> 00:17:20,919
immutable blob that is your software

00:17:18,750 --> 00:17:22,780
which gives us an interesting

00:17:20,919 --> 00:17:24,939
architecture here so I'm going to

00:17:22,780 --> 00:17:26,589
compare and contrast classic Kubuntu

00:17:24,939 --> 00:17:30,330
here on the Left which is Deb based with

00:17:26,589 --> 00:17:32,950
a boutique or on the right now Deb's can

00:17:30,330 --> 00:17:35,140
include anything and put files anywhere

00:17:32,950 --> 00:17:36,580
right and they run hooks is route you

00:17:35,140 --> 00:17:38,140
think share libraries right you can

00:17:36,580 --> 00:17:40,059
easily get into this dependency held it

00:17:38,140 --> 00:17:42,880
I'm sure many of you are familiar with

00:17:40,059 --> 00:17:45,190
and and there are security issues with

00:17:42,880 --> 00:17:46,630
being able to want you when you install

00:17:45,190 --> 00:17:47,860
a Deb

00:17:46,630 --> 00:17:49,530
Ellen's your system it can do anything

00:17:47,860 --> 00:17:52,600
at once right it's hooks one is root

00:17:49,530 --> 00:17:54,580
with the Boonta core is restructured a

00:17:52,600 --> 00:17:57,400
bit into these snaps where the kernel is

00:17:54,580 --> 00:17:59,110
a kernel SAP the OS part is a coarse

00:17:57,400 --> 00:18:00,390
snap and then you have applications on

00:17:59,110 --> 00:18:06,580
top of that it's a little less flexible

00:18:00,390 --> 00:18:08,530
but it's really nice for IOT devices so

00:18:06,580 --> 00:18:10,810
I've talked about the fact that this

00:18:08,530 --> 00:18:13,380
snaps our squash FS images which by

00:18:10,810 --> 00:18:15,340
definition means they are read-only

00:18:13,380 --> 00:18:17,470
applications are sort of limited if they

00:18:15,340 --> 00:18:20,740
can't write data thread so there are

00:18:17,470 --> 00:18:22,900
some specific areas where the snap is

00:18:20,740 --> 00:18:24,070
allowed to write but because of

00:18:22,900 --> 00:18:26,440
confinement which I'll talk about in a

00:18:24,070 --> 00:18:28,900
second but the point is where the snap

00:18:26,440 --> 00:18:31,840
is putting data is a known place which

00:18:28,900 --> 00:18:33,670
gives us this nice property where you

00:18:31,840 --> 00:18:37,030
have a snap and you have its associated

00:18:33,670 --> 00:18:38,920
data that's tied to its revision so when

00:18:37,030 --> 00:18:40,300
an update comes along right let's say it

00:18:38,920 --> 00:18:42,820
let's say the data that is holding is a

00:18:40,300 --> 00:18:44,740
database when an update comes along the

00:18:42,820 --> 00:18:46,480
first thing it does is run the migration

00:18:44,740 --> 00:18:47,620
on that run some migration on that

00:18:46,480 --> 00:18:49,390
database so let's say that migration

00:18:47,620 --> 00:18:54,550
goes bad right this database is now

00:18:49,390 --> 00:18:56,950
corrupted thankfully when as part of the

00:18:54,550 --> 00:18:58,480
update process the original snap and the

00:18:56,950 --> 00:19:02,290
original data that was associated with

00:18:58,480 --> 00:19:04,270
that revision is kept let's see three

00:19:02,290 --> 00:19:07,420
are kept in total two old ones and a

00:19:04,270 --> 00:19:09,550
current one which means if a failure

00:19:07,420 --> 00:19:11,020
occurs then it can just roll back to the

00:19:09,550 --> 00:19:12,160
previous version and you're back up and

00:19:11,020 --> 00:19:16,660
running right before the upgrade

00:19:12,160 --> 00:19:17,530
actually so let's talk about confinement

00:19:16,660 --> 00:19:18,880
there are a couple of different

00:19:17,530 --> 00:19:20,890
confinement technologies at play here

00:19:18,880 --> 00:19:23,410
one is a farmer and the other one is set

00:19:20,890 --> 00:19:25,650
comp filters and some other ones too but

00:19:23,410 --> 00:19:28,510
those are really the main ones where

00:19:25,650 --> 00:19:30,760
snaps are limited in where they can

00:19:28,510 --> 00:19:32,950
write and their system related

00:19:30,760 --> 00:19:34,630
capabilities and the way that's split

00:19:32,950 --> 00:19:37,840
out is by something that we call

00:19:34,630 --> 00:19:40,450
interfaces so you make your snap and you

00:19:37,840 --> 00:19:42,490
know okay I need to be able to talk to

00:19:40,450 --> 00:19:45,820
the internet so in your snap metadata

00:19:42,490 --> 00:19:49,570
you specify this snap needs the network

00:19:45,820 --> 00:19:51,220
interface and that's some second some

00:19:49,570 --> 00:19:53,170
syscalls right that are whitelisted for

00:19:51,220 --> 00:19:55,080
you and and some app arm acts that

00:19:53,170 --> 00:19:58,060
access granted

00:19:55,080 --> 00:19:59,650
and what that does you know if you've if

00:19:58,060 --> 00:20:00,340
you were in any of the secure related

00:19:59,650 --> 00:20:01,960
talks earlier

00:20:00,340 --> 00:20:03,669
you know that security is not perfect

00:20:01,960 --> 00:20:05,559
right nothing's gonna be perfect but

00:20:03,669 --> 00:20:07,900
this isolates the damage in attacker can

00:20:05,559 --> 00:20:09,070
do if they if they manage to break in

00:20:07,900 --> 00:20:11,260
right the only thing that's gonna happen

00:20:09,070 --> 00:20:13,120
if they break into this one right is

00:20:11,260 --> 00:20:14,460
that they gain that they don't mean any

00:20:13,120 --> 00:20:18,789
of that

00:20:14,460 --> 00:20:22,090
so let's talk about snap graph for a

00:20:18,789 --> 00:20:24,130
little bit since as I mentioned snaps

00:20:22,090 --> 00:20:27,070
bundle their dependencies you end up

00:20:24,130 --> 00:20:29,169
having a lot of disparate pieces right

00:20:27,070 --> 00:20:30,700
that make up the snap each of which have

00:20:29,169 --> 00:20:33,850
their own build system build technology

00:20:30,700 --> 00:20:35,500
etc snap craft is the tool that takes

00:20:33,850 --> 00:20:37,210
all of those disparate pieces and puts

00:20:35,500 --> 00:20:40,149
them into one cohesive unit called this

00:20:37,210 --> 00:20:41,919
snap it can reuse deb packages so you

00:20:40,149 --> 00:20:43,240
know if your component requires boost

00:20:41,919 --> 00:20:44,620
you don't actually need to build boosts

00:20:43,240 --> 00:20:46,750
from source you can just say hey pull

00:20:44,620 --> 00:20:49,270
pull boost from the archives and stage

00:20:46,750 --> 00:20:51,460
that into the snap and the way it

00:20:49,270 --> 00:20:52,990
supports all of these various build

00:20:51,460 --> 00:20:54,760
technologies is by a plug-in system

00:20:52,990 --> 00:20:56,470
which new ones are being written all the

00:20:54,760 --> 00:20:59,080
time and you can actually you can

00:20:56,470 --> 00:21:01,390
actually distribute your own in the

00:20:59,080 --> 00:21:03,490
source with the snap craft is is all

00:21:01,390 --> 00:21:05,169
specified by mo the snap graph yeah mo

00:21:03,490 --> 00:21:07,120
if you want if you have sort of an

00:21:05,169 --> 00:21:10,360
interesting build process that you need

00:21:07,120 --> 00:21:13,029
to use tons of plugins are already out

00:21:10,360 --> 00:21:16,779
there in upstream snap craft these are a

00:21:13,029 --> 00:21:18,309
couple of the examples oh and snap graph

00:21:16,779 --> 00:21:19,779
Daioh if you're interested in there any

00:21:18,309 --> 00:21:21,789
more about this how to make a snap

00:21:19,779 --> 00:21:25,570
that's your starting point snap craft

00:21:21,789 --> 00:21:30,279
out I know another thing I mentioned was

00:21:25,570 --> 00:21:32,110
this store one of the biggest problems

00:21:30,279 --> 00:21:35,020
with IOT devices that are already out

00:21:32,110 --> 00:21:36,640
there is that they rely on the user to

00:21:35,020 --> 00:21:40,570
update or they have no update mechanism

00:21:36,640 --> 00:21:43,299
whatsoever this store the whole snap

00:21:40,570 --> 00:21:45,100
story is already included in it and so

00:21:43,299 --> 00:21:48,700
if you make an image that is based on

00:21:45,100 --> 00:21:50,230
snaps and you ship it if you push an

00:21:48,700 --> 00:21:51,130
updated snap to the store all these

00:21:50,230 --> 00:21:52,600
devices are already going to

00:21:51,130 --> 00:21:57,520
automatically update just as a side

00:21:52,600 --> 00:21:58,510
effect of using a good decor now in

00:21:57,520 --> 00:22:00,130
addition to that there are some

00:21:58,510 --> 00:22:02,049
opportunities for new revenue if you're

00:22:00,130 --> 00:22:04,330
if you're interested in this right so if

00:22:02,049 --> 00:22:06,250
you've got snaps on your device there's

00:22:04,330 --> 00:22:08,919
another snap that you can install called

00:22:06,250 --> 00:22:12,460
snap web so let's say I buy a router

00:22:08,919 --> 00:22:13,929
that is snap based and it comes maybe

00:22:12,460 --> 00:22:14,240
with snap web pre-installed I can

00:22:13,929 --> 00:22:17,270
actually

00:22:14,240 --> 00:22:18,920
visit it and install new snaps just by

00:22:17,270 --> 00:22:21,290
using that interface which means you can

00:22:18,920 --> 00:22:23,440
sell add-ons that your users can install

00:22:21,290 --> 00:22:27,440
this way

00:22:23,440 --> 00:22:29,150
and finally the cadence which which many

00:22:27,440 --> 00:22:30,950
of you will be familiar with here right

00:22:29,150 --> 00:22:32,840
you've got a boon to 1404 supported for

00:22:30,950 --> 00:22:34,340
five years that's an LPS you got the

00:22:32,840 --> 00:22:37,010
three development releases between it in

00:22:34,340 --> 00:22:39,250
1604 which is an LTS then three more

00:22:37,010 --> 00:22:41,870
releases and 1804 which will be an LTS

00:22:39,250 --> 00:22:44,120
and when decor fits in on these LTS

00:22:41,870 --> 00:22:46,010
lines starting with 16 and it's

00:22:44,120 --> 00:22:49,420
supported for five years and then 18 for

00:22:46,010 --> 00:22:49,420
five years just like Valerie mentioned

00:22:49,929 --> 00:22:54,020
so that's sort of the high-level

00:22:52,490 --> 00:22:56,929
overview I actually want to walk you

00:22:54,020 --> 00:22:58,910
through some lower-level details of of

00:22:56,929 --> 00:23:01,520
how you might actually go from a

00:22:58,910 --> 00:23:03,740
prototype to production and to do that

00:23:01,520 --> 00:23:05,540
I'm going to use the next cloud box now

00:23:03,740 --> 00:23:09,200
this is something you can actually buy

00:23:05,540 --> 00:23:12,920
today I've got one with me and it's

00:23:09,200 --> 00:23:14,480
based on it went to court and so I'm

00:23:12,920 --> 00:23:17,059
gonna use this as the enabler to talk

00:23:14,480 --> 00:23:20,750
about okay well this was as two viewers

00:23:17,059 --> 00:23:22,760
will look based on a Raspberry Pi - what

00:23:20,750 --> 00:23:26,120
if I wanted to make a new one based on a

00:23:22,760 --> 00:23:27,860
dragon board right it is really easy so

00:23:26,120 --> 00:23:31,100
let's pretend that your prototype is

00:23:27,860 --> 00:23:33,410
this next cloud snap okay every Ubuntu

00:23:31,100 --> 00:23:36,410
core image is made up of at least three

00:23:33,410 --> 00:23:37,940
snaps this gadget snap on the bottom the

00:23:36,410 --> 00:23:41,140
kernel snap which sits on top of that if

00:23:37,940 --> 00:23:43,850
you will the core snap and then whatever

00:23:41,140 --> 00:23:45,470
application snaps you put on top and I

00:23:43,850 --> 00:23:48,320
want to talk through each one of those

00:23:45,470 --> 00:23:51,170
in a little more detail so let's start

00:23:48,320 --> 00:23:52,700
with this gadget snap so on so I'm

00:23:51,170 --> 00:23:54,920
remaking this device but now it's based

00:23:52,700 --> 00:23:57,050
on our dragon board the gadget snap is

00:23:54,920 --> 00:23:58,790
it holds your bootloader you know any

00:23:57,050 --> 00:24:01,429
sort of file system layout that you

00:23:58,790 --> 00:24:03,770
specify some default configurations for

00:24:01,429 --> 00:24:05,870
services that are on there and like

00:24:03,770 --> 00:24:08,600
Larry is mentioning the dragon board is

00:24:05,870 --> 00:24:09,980
our armed 64 reference board which means

00:24:08,600 --> 00:24:11,179
if you're using a dragon board this is

00:24:09,980 --> 00:24:12,770
already made for you you don't need to

00:24:11,179 --> 00:24:14,390
worry about it it's already provided and

00:24:12,770 --> 00:24:18,200
maintained you can make your own if you

00:24:14,390 --> 00:24:19,880
want to but you don't have to the kernel

00:24:18,200 --> 00:24:21,200
snap presents pretty obvious it's a four

00:24:19,880 --> 00:24:24,440
point four based kernel with the device

00:24:21,200 --> 00:24:26,600
drivers etc right and again since this

00:24:24,440 --> 00:24:28,419
is a reference device this is something

00:24:26,600 --> 00:24:31,059
that's already provided as part of the

00:24:28,419 --> 00:24:33,580
LPS so if you're using the dragon board

00:24:31,059 --> 00:24:35,019
you can use this default kernel and you

00:24:33,580 --> 00:24:39,580
don't need to worry about any updates

00:24:35,019 --> 00:24:41,619
whatsoever the course stamp this is the

00:24:39,580 --> 00:24:44,739
execution environment this is this is a

00:24:41,619 --> 00:24:46,539
nice thin OS if you will for application

00:24:44,739 --> 00:24:49,210
steps and includes the init system basic

00:24:46,539 --> 00:24:51,549
services you know basic files and

00:24:49,210 --> 00:24:53,049
libraries so like not all snaps actually

00:24:51,549 --> 00:24:55,330
bundle lib see they can use the one

00:24:53,049 --> 00:24:56,440
that's in the course now and again if

00:24:55,330 --> 00:24:57,940
you're using a dragon board you don't

00:24:56,440 --> 00:24:59,649
need to worry about making this it's

00:24:57,940 --> 00:25:03,009
already provided and maintained again

00:24:59,649 --> 00:25:04,809
you can make your own if you want now

00:25:03,009 --> 00:25:06,789
this is where this is where you really

00:25:04,809 --> 00:25:09,249
come in right so next thought is our

00:25:06,789 --> 00:25:11,200
example here you use snap craft to

00:25:09,249 --> 00:25:14,980
create this application snap right what

00:25:11,200 --> 00:25:15,970
makes your vise unique so for an example

00:25:14,980 --> 00:25:17,350
of next thought I've talked about how

00:25:15,970 --> 00:25:18,700
they bundle their dependencies and

00:25:17,350 --> 00:25:21,309
they're these disparate build systems

00:25:18,700 --> 00:25:24,850
right so next cloud bundles Apache MySQL

00:25:21,309 --> 00:25:29,669
PHP reduce number of things that makes a

00:25:24,850 --> 00:25:29,669
web application and and that's its snap

00:25:29,970 --> 00:25:36,850
so if you put all these together you end

00:25:34,149 --> 00:25:40,359
up with something that is nicely flash

00:25:36,850 --> 00:25:41,889
sharable to you know board in in factory

00:25:40,359 --> 00:25:43,029
production but how do we get there now

00:25:41,889 --> 00:25:45,070
I'm actually going to take you through

00:25:43,029 --> 00:25:47,710
that and it goes I'm actually going to

00:25:45,070 --> 00:25:51,639
go down to the CLI here so don't worry I

00:25:47,710 --> 00:25:52,749
won't type I got them here but there are

00:25:51,639 --> 00:25:54,879
a couple of things you need to do this

00:25:52,749 --> 00:25:56,919
so every image like I mentioned is made

00:25:54,879 --> 00:25:58,989
of a kernel there Susan engage it kernel

00:25:56,919 --> 00:26:00,249
and course snap and then whatever you

00:25:58,989 --> 00:26:02,950
want add on top so in our case that's

00:26:00,249 --> 00:26:05,019
next cloud and then the two extra pieces

00:26:02,950 --> 00:26:06,190
you need are a store account I'll talk

00:26:05,019 --> 00:26:07,629
about that in a second and a boon to

00:26:06,190 --> 00:26:12,609
image which is the tool to actually

00:26:07,629 --> 00:26:13,899
create a flashable image so the first

00:26:12,609 --> 00:26:15,519
thing you do is create the store account

00:26:13,899 --> 00:26:16,899
and the reason we do this is because if

00:26:15,519 --> 00:26:18,399
Binta core is going to verify the image

00:26:16,899 --> 00:26:19,989
it's booting actually comes from you in

00:26:18,399 --> 00:26:21,249
order for that to happen you have to

00:26:19,989 --> 00:26:23,499
create a key and register to your

00:26:21,249 --> 00:26:26,259
accounts that you know has something to

00:26:23,499 --> 00:26:28,600
figure out so if you go to my apps

00:26:26,259 --> 00:26:31,179
developer ubuntu calm create your free

00:26:28,600 --> 00:26:33,419
account record your account ID you're

00:26:31,179 --> 00:26:35,950
going to need that in a second

00:26:33,419 --> 00:26:37,450
now these slides can be put them

00:26:35,950 --> 00:26:41,169
somewhere so that people can actually

00:26:37,450 --> 00:26:42,010
refer to it later I assume yeah okay

00:26:41,169 --> 00:26:45,130
okay very good

00:26:42,010 --> 00:26:46,510
very good so the next step is to

00:26:45,130 --> 00:26:49,470
actually install it went to image and

00:26:46,510 --> 00:26:53,740
the related tools to make the image that

00:26:49,470 --> 00:26:55,150
that you're gonna flash so snap craft

00:26:53,740 --> 00:26:56,830
and snap D those are needed to generate

00:26:55,150 --> 00:26:58,330
register and actually use the signing

00:26:56,830 --> 00:26:59,740
key and then aboot two images as I

00:26:58,330 --> 00:27:05,020
mentioned is the one that actually puts

00:26:59,740 --> 00:27:08,410
the image together now you're going to

00:27:05,020 --> 00:27:11,200
create a key so in order to build the

00:27:08,410 --> 00:27:12,640
image like I said you need to be able to

00:27:11,200 --> 00:27:14,410
assert that this is your image with your

00:27:12,640 --> 00:27:17,320
keys so snappy has something to verify

00:27:14,410 --> 00:27:18,820
so you use snap craft create key to

00:27:17,320 --> 00:27:20,650
actually generate key this is just GPG

00:27:18,820 --> 00:27:22,750
behind the scene there's nothing magic

00:27:20,650 --> 00:27:24,550
and then you check that everything goes

00:27:22,750 --> 00:27:26,740
okay right snap craft list keys make

00:27:24,550 --> 00:27:28,570
sure your keys listed there and then

00:27:26,740 --> 00:27:32,080
finally register it with your account so

00:27:28,570 --> 00:27:34,660
snap craft register key now by this time

00:27:32,080 --> 00:27:36,700
let's see I believe it will actually ask

00:27:34,660 --> 00:27:38,290
for your login info snap card is tricky

00:27:36,700 --> 00:27:41,590
but that is associated with your account

00:27:38,290 --> 00:27:42,640
and then it registers it and then at

00:27:41,590 --> 00:27:45,460
that point you can use it to actually

00:27:42,640 --> 00:27:47,520
sign assertions and what is an assertion

00:27:45,460 --> 00:27:50,560
I'll talk about that in a second so

00:27:47,520 --> 00:27:54,160
we're gonna create what defines our

00:27:50,560 --> 00:27:56,110
model and in this in this case our model

00:27:54,160 --> 00:27:57,640
is the device that we're gonna ship so

00:27:56,110 --> 00:28:01,450
what is the software that makes up this

00:27:57,640 --> 00:28:03,880
device alright so it is it's JSON JSON

00:28:01,450 --> 00:28:05,350
file and it answers some pretty basic

00:28:03,880 --> 00:28:06,970
questions like what's your models name

00:28:05,350 --> 00:28:09,190
and in my case I just said next cloud

00:28:06,970 --> 00:28:10,870
dragon which you go to course series are

00:28:09,190 --> 00:28:13,540
you targeting so there are only two

00:28:10,870 --> 00:28:15,400
right well there's there's snappy 15 but

00:28:13,540 --> 00:28:17,410
it's it I wouldn't recommend it it's

00:28:15,400 --> 00:28:20,380
based on some older stuff so so either

00:28:17,410 --> 00:28:21,910
16 or 18 18 isn't really out yet so I

00:28:20,380 --> 00:28:25,060
wouldn't recommend net so we're talking

00:28:21,910 --> 00:28:26,620
about 16 here what architecture is this

00:28:25,060 --> 00:28:30,550
for well this is the dragon board so

00:28:26,620 --> 00:28:32,890
armed 64 what gadgets snap is being used

00:28:30,550 --> 00:28:34,540
so the the one that canonical provides

00:28:32,890 --> 00:28:35,830
is called dragon board so I just used

00:28:34,540 --> 00:28:38,320
that here if you were using your own you

00:28:35,830 --> 00:28:39,640
would just specify a file path same with

00:28:38,320 --> 00:28:41,140
the kernel snap dragon board Linux

00:28:39,640 --> 00:28:44,560
that's the one from canonical again you

00:28:41,140 --> 00:28:47,230
could specify a file path here who's

00:28:44,560 --> 00:28:49,660
defining this model so this Authority ID

00:28:47,230 --> 00:28:52,250
brand ID these these two fields is where

00:28:49,660 --> 00:28:53,810
your store account ID comes in that

00:28:52,250 --> 00:28:56,750
you recorded earlier he pasted that in

00:28:53,810 --> 00:28:59,150
here and then when was this model

00:28:56,750 --> 00:29:00,410
defined just you get that from the deep

00:28:59,150 --> 00:29:03,650
commander and you can put it in there

00:29:00,410 --> 00:29:05,390
and finally that was all sort of

00:29:03,650 --> 00:29:07,430
boilerplate stuff this is interesting

00:29:05,390 --> 00:29:10,040
part what extra snaps are included in

00:29:07,430 --> 00:29:12,410
this image right how does this how is

00:29:10,040 --> 00:29:15,020
this different than just the well

00:29:12,410 --> 00:29:17,180
basically if you you brace required

00:29:15,020 --> 00:29:20,060
snaps here and put Canonical's Authority

00:29:17,180 --> 00:29:23,600
and brand ID you end up with the image

00:29:20,060 --> 00:29:26,420
that you could download from from Ubuntu

00:29:23,600 --> 00:29:27,800
comm for the dragon board the required

00:29:26,420 --> 00:29:30,890
snaps is really the interesting part

00:29:27,800 --> 00:29:32,860
where you where you customize it or you

00:29:30,890 --> 00:29:35,840
can replace the gadget kernel etc

00:29:32,860 --> 00:29:37,940
alright so now this is where we turn the

00:29:35,840 --> 00:29:40,880
model definition into a model assertion

00:29:37,940 --> 00:29:44,570
by signing it what you simply cat it out

00:29:40,880 --> 00:29:47,030
to snap sign AC you use the the my key

00:29:44,570 --> 00:29:49,850
name here and redirect it to dragon dot

00:29:47,030 --> 00:29:51,230
model it'll sign it and then you end up

00:29:49,850 --> 00:29:53,030
with your your dragon dot model

00:29:51,230 --> 00:29:54,530
assertion and if you actually look at it

00:29:53,030 --> 00:29:58,510
it contains the exact same information

00:29:54,530 --> 00:30:01,340
as the JSON file plus the signature and

00:29:58,510 --> 00:30:03,020
that's that's the the file that we

00:30:01,340 --> 00:30:04,250
really needed to just hand it to have

00:30:03,020 --> 00:30:09,050
been to image so they can put the thing

00:30:04,250 --> 00:30:12,590
together so you simply run sudo go to

00:30:09,050 --> 00:30:14,360
image the - C option gives it the

00:30:12,590 --> 00:30:15,590
ability to pulled snaps from different

00:30:14,360 --> 00:30:21,050
channels I haven't really talked about

00:30:15,590 --> 00:30:22,370
that but really quickly every snap has a

00:30:21,050 --> 00:30:25,370
number of channels that it can be

00:30:22,370 --> 00:30:29,740
released in the most unstable being edge

00:30:25,370 --> 00:30:31,850
and then beta candidate and then stable

00:30:29,740 --> 00:30:34,340
so that gives you the ability to roll

00:30:31,850 --> 00:30:36,200
out your software in stages instead of

00:30:34,340 --> 00:30:38,900
just immediately releasing to stable all

00:30:36,200 --> 00:30:40,700
the time so in this case I want every

00:30:38,900 --> 00:30:42,560
every snap that is part of this image

00:30:40,700 --> 00:30:46,100
coming from the stable channel so I give

00:30:42,560 --> 00:30:48,050
it there I - oh the giving it the output

00:30:46,100 --> 00:30:50,180
image file and finally the model

00:30:48,050 --> 00:30:52,460
assertion that I'm what it to use to

00:30:50,180 --> 00:30:54,050
make this image that's all it needs

00:30:52,460 --> 00:30:55,190
after a few minutes you'll end up with

00:30:54,050 --> 00:30:57,950
the dragon on image it's going to pull

00:30:55,190 --> 00:30:59,630
down the course snap the kernel snap and

00:30:57,950 --> 00:31:01,520
the gadget snap but you specified along

00:30:59,630 --> 00:31:04,070
with any extra applications that you

00:31:01,520 --> 00:31:05,750
requested and actually put it into a

00:31:04,070 --> 00:31:08,810
flashable image

00:31:05,750 --> 00:31:10,310
at that point you can just flash it to

00:31:08,810 --> 00:31:13,250
an SD card put it in the dragon board

00:31:10,310 --> 00:31:15,830
and boot so you can see that you know

00:31:13,250 --> 00:31:17,450
hopefully you can see that this is

00:31:15,830 --> 00:31:19,190
something that once you have this image

00:31:17,450 --> 00:31:21,470
you hand it off to the factory in and

00:31:19,190 --> 00:31:24,230
you can start rolling right away right

00:31:21,470 --> 00:31:25,550
so it it's really pretty simple once you

00:31:24,230 --> 00:31:27,020
have your board right that you like the

00:31:25,550 --> 00:31:29,870
dragon board you develop your

00:31:27,020 --> 00:31:32,390
application snaps and a cool box and

00:31:29,870 --> 00:31:34,400
that's about it you can ship an image to

00:31:32,390 --> 00:31:38,390
your factory and start rolling on

00:31:34,400 --> 00:31:39,950
production so if you're interested in

00:31:38,390 --> 00:31:41,240
this there are a couple of ways to get

00:31:39,950 --> 00:31:43,730
involved with the community if you need

00:31:41,240 --> 00:31:45,470
some help or have some questions first

00:31:43,730 --> 00:31:47,240
one is that snap craft to i/o website

00:31:45,470 --> 00:31:50,440
that has general snap craft

00:31:47,240 --> 00:31:53,690
documentation and walkthroughs tutorials

00:31:50,440 --> 00:31:54,890
tutorials on Ubuntu comm it has has some

00:31:53,690 --> 00:31:56,510
more snap crafter to boot to core

00:31:54,890 --> 00:31:58,190
tutorials in a code labs format it's

00:31:56,510 --> 00:32:00,290
actually pretty cool it's relatively new

00:31:58,190 --> 00:32:03,020
a good friend of mine put that together

00:32:00,290 --> 00:32:05,570
and if the tutorials and documentation

00:32:03,020 --> 00:32:07,730
don't answer your question ask one on

00:32:05,570 --> 00:32:09,560
ask of intercom there are a couple of

00:32:07,730 --> 00:32:12,020
tags there that many of us are

00:32:09,560 --> 00:32:14,960
subscribed to snap into boutique or tags

00:32:12,020 --> 00:32:16,280
in particular and finally we have a

00:32:14,960 --> 00:32:18,080
couple of different real-time chats that

00:32:16,280 --> 00:32:18,830
you're always welcome to join the snappy

00:32:18,080 --> 00:32:22,310
room on freenode

00:32:18,830 --> 00:32:24,890
and and a rocket chat instance rock

00:32:22,310 --> 00:32:28,700
adobe intercom - the snap craft Channel

00:32:24,890 --> 00:32:31,970
in there I'm Kai Rafa if anyone wants to

00:32:28,700 --> 00:32:35,420
ping me directly and that's that's all I

00:32:31,970 --> 00:32:37,520
had so if anyone has any questions yeah

00:32:35,420 --> 00:32:40,150
either for me or for my colleagues here

00:32:37,520 --> 00:32:40,150
please

00:32:47,170 --> 00:32:52,510
the the course snap you're talking about

00:32:49,570 --> 00:32:55,040
yes that's correct

00:32:52,510 --> 00:33:01,070
that's that's essentially a root of s

00:32:55,040 --> 00:33:02,840
it's it's like like awk right or rig

00:33:01,070 --> 00:33:04,670
really or lib see some really basic

00:33:02,840 --> 00:33:05,870
tools that various snaps will need to

00:33:04,670 --> 00:33:11,150
use so they don't have to bundle them

00:33:05,870 --> 00:33:20,870
themselves yes yes that's exactly what

00:33:11,150 --> 00:33:22,490
it is yes please I don't I don't know

00:33:20,870 --> 00:33:24,200
the exact sizes but I know like the

00:33:22,490 --> 00:33:26,330
minimum specs if that's if that would

00:33:24,200 --> 00:33:28,510
answer your question so the numbers the

00:33:26,330 --> 00:33:32,120
numbers that we have are 800 megahertz

00:33:28,510 --> 00:33:34,250
512 Meg's of storage and a gig of ram

00:33:32,120 --> 00:33:35,990
and you don't actually need a gig but if

00:33:34,250 --> 00:33:38,260
you add many applications you probably

00:33:35,990 --> 00:33:38,260
will

00:33:47,970 --> 00:33:52,660
that's where interfaces come in so so

00:33:50,830 --> 00:33:55,270
the diagram I had earlier where they're

00:33:52,660 --> 00:33:58,180
each walled off that's with like

00:33:55,270 --> 00:33:59,980
complete confinement right but yeah if

00:33:58,180 --> 00:34:01,570
you need to talk to the the network

00:33:59,980 --> 00:34:03,280
right then you you open a little a

00:34:01,570 --> 00:34:06,040
little hole net sandbox with the network

00:34:03,280 --> 00:34:08,560
interface there's actually an interface

00:34:06,040 --> 00:34:11,020
called content that allows to snaps to

00:34:08,560 --> 00:34:12,850
share content with each other but that's

00:34:11,020 --> 00:34:15,040
limited that's limited to that single

00:34:12,850 --> 00:34:17,440
connection right or you need a webcam

00:34:15,040 --> 00:34:19,390
right there's there's a camera interface

00:34:17,440 --> 00:34:22,120
to allow access to camera devices that

00:34:19,390 --> 00:34:24,960
type of thing so so that's how snaps can

00:34:22,120 --> 00:34:24,960
communicate and cooperate

00:34:30,210 --> 00:34:34,120
actually there is a docker snap yeah so

00:34:32,679 --> 00:34:37,480
so they can build on top of each other

00:34:34,120 --> 00:34:39,640
like that it as of right now it doesn't

00:34:37,480 --> 00:34:49,720
work the other way around but we're

00:34:39,640 --> 00:34:51,070
working on it well okay so there there

00:34:49,720 --> 00:34:55,360
are a couple of things here and and

00:34:51,070 --> 00:34:58,090
Larry will so there's there is the the

00:34:55,360 --> 00:35:00,460
base store right which is accessible to

00:34:58,090 --> 00:35:03,910
everybody and when you push up a snap

00:35:00,460 --> 00:35:07,300
you have a couple of options you can

00:35:03,910 --> 00:35:09,040
keep it private and and thus install it

00:35:07,300 --> 00:35:11,500
only on the devices you have there right

00:35:09,040 --> 00:35:14,530
or you can publish it for anyone to use

00:35:11,500 --> 00:35:16,750
if you want but beyond that there's also

00:35:14,530 --> 00:35:18,670
the idea of a branded store which which

00:35:16,750 --> 00:35:22,020
is something I'm not super up to speed

00:35:18,670 --> 00:35:22,020
on so something

00:35:29,519 --> 00:35:32,519
Universal

00:36:17,050 --> 00:36:20,309
[Music]

00:36:53,500 --> 00:36:57,400
but it is of the source

00:37:06,750 --> 00:37:10,410
sorry another question back here

00:37:14,329 --> 00:37:20,970
one more time I'm sorry

00:37:16,170 --> 00:37:23,670
oh okay so the way the way this works is

00:37:20,970 --> 00:37:25,260
well let's say you did follow what I

00:37:23,670 --> 00:37:28,470
just walked through and you just added

00:37:25,260 --> 00:37:30,900
applications on top right every snap is

00:37:28,470 --> 00:37:33,240
updated so it's not one big image that

00:37:30,900 --> 00:37:36,240
you get all updates in right every snap

00:37:33,240 --> 00:37:38,819
is updated on its own but then yeah the

00:37:36,240 --> 00:37:43,950
the gadget snap course snap and kernel

00:37:38,819 --> 00:37:45,900
snap are are things that we maintain the

00:37:43,950 --> 00:37:48,410
the stupid and then the store takes care

00:37:45,900 --> 00:37:48,410
of the updates

00:37:51,020 --> 00:37:54,300
[Music]

00:38:41,200 --> 00:39:27,050
so it would be correct that OTA that's

00:39:03,980 --> 00:39:29,230
part of the store so it's a lot

00:39:27,050 --> 00:39:29,230
different

00:39:32,260 --> 00:39:40,150
we'll manage the women instead of her

00:39:35,660 --> 00:39:40,150
device there's no profit

00:39:44,450 --> 00:39:47,530
any other questions

00:39:51,130 --> 00:40:04,540
oh yeah then it will update from that

00:40:02,830 --> 00:40:11,560
channel yes mm-hmm

00:40:04,540 --> 00:40:14,020
yep that's correct and then a typical

00:40:11,560 --> 00:40:15,400
like a typical CI process ride was just

00:40:14,020 --> 00:40:17,680
it would be to publish your dailies to

00:40:15,400 --> 00:40:19,540
edge right and then you can as you test

00:40:17,680 --> 00:40:22,440
them you can promote them into more

00:40:19,540 --> 00:40:22,440
stable channels etc

00:40:32,850 --> 00:40:38,950
yes yeah you can eat oh yeah mm-hmm

00:40:36,220 --> 00:40:40,900
from you boy good question from like the

00:40:38,950 --> 00:40:43,780
snap web thing I was talking about I'm

00:40:40,900 --> 00:40:47,080
not sure that's a good question I I i

00:40:43,780 --> 00:40:51,270
I'm not sure I would assume so but I've

00:40:47,080 --> 00:40:51,270
not tried I typically do it from the CLI

00:41:03,240 --> 00:41:08,170
so the way the way it works is if that

00:41:06,490 --> 00:41:11,470
was the case right then you would

00:41:08,170 --> 00:41:13,090
effectively DDoS the store right so so

00:41:11,470 --> 00:41:14,920
the way it actually works is every

00:41:13,090 --> 00:41:15,280
device will check for updates four times

00:41:14,920 --> 00:41:18,100
a day

00:41:15,280 --> 00:41:21,640
staggered so it's a it's randomly spaced

00:41:18,100 --> 00:41:23,440
so so no it won't be like that it will

00:41:21,640 --> 00:41:34,810
be at some point in the next couple of

00:41:23,440 --> 00:41:36,460
hours does that make sense yeah not at

00:41:34,810 --> 00:41:38,830
the moment I think the way that I would

00:41:36,460 --> 00:41:40,510
suggest to be nice by using channels but

00:41:38,830 --> 00:41:41,800
but I think they're planning on doing

00:41:40,510 --> 00:41:44,010
something like that store side at some

00:41:41,800 --> 00:41:44,010
point

00:41:51,360 --> 00:41:58,119
[Music]

00:41:54,339 --> 00:41:58,119
yeah that's exactly

00:41:58,420 --> 00:42:06,490
and advice

00:42:07,680 --> 00:42:11,910
and the channel story is being fleshed

00:42:10,410 --> 00:42:14,940
out even further with the ability to

00:42:11,910 --> 00:42:17,330
create your own so right now we're

00:42:14,940 --> 00:42:20,100
working on some LTS channels and then

00:42:17,330 --> 00:42:21,930
the select version specific channels and

00:42:20,100 --> 00:42:24,360
then you can actually what I'm really

00:42:21,930 --> 00:42:26,190
waiting for is the ability to create one

00:42:24,360 --> 00:42:27,630
in CI so like every pull request can

00:42:26,190 --> 00:42:30,900
have a channel that's just created once

00:42:27,630 --> 00:42:33,470
so that people can test it so we're

00:42:30,900 --> 00:42:40,260
working on that as well

00:42:33,470 --> 00:42:42,180
any other questions well we're all

00:42:40,260 --> 00:42:44,040
around for for at least the rest of the

00:42:42,180 --> 00:42:45,600
day maybe a little bit tomorrow as well

00:42:44,040 --> 00:42:53,060
so please sketches have you have any

00:42:45,600 --> 00:42:53,060
more questions oh yes thank you thank

00:42:56,420 --> 00:43:03,219
you very much

00:42:59,620 --> 00:43:03,219

YouTube URL: https://www.youtube.com/watch?v=KRZvtYPRSkY


