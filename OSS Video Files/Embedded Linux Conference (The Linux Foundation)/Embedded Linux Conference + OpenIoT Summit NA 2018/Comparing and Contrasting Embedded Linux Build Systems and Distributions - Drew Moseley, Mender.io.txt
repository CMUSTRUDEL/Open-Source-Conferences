Title: Comparing and Contrasting Embedded Linux Build Systems and Distributions - Drew Moseley, Mender.io
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Comparing and Contrasting Embedded Linux Build Systems and Distributions - Drew Moseley, Mender.io

We will discuss the various options for creating embedded Linux operating systems. We will provide a basic description of each option, including an overview of the workflow for each choice. The talk will cover the advantages and disadvantages of each of these options and provide viewers with a matrix of design considerations to help them pick the right choice for their design.

We will cover the following options:

Yocto/OpenEmbedded
Buildroot
OpenWRT/LEDE
Slimmed down desktop distributions (e.g. Debian, Raspbian, Ubuntu)

We will also touch upon other tools, such as crosstool-ng and ucLinux, which are peripherally related to building embedded Linux systems. The focus for this section will be to make the viewers aware of these tools as they frequently come up while researching embedded Linux so that you are better informed which tools are available. 

About Drew Moseley
Drew Moseley is currently part of the Mender.io open source project to deploy OTA software updates to embedded Linux devices. He has worked on embedded projects such as RAID storage controllers, Direct and Network attached storage devices and graphical pagers. He has spent the last 7 years working in developing production deployments of embedded Linux systems for various security-sensitive industries. He has spent his career in embedded software and developer tools and has focused on embedded Linux and Yocto for about 10 years. He has given talks at various conferences, including Embedded Systems Conference and All Systems Go Berlin. He is currently a Technical Solutions Engineer at Northern.tech, the company behind Mender.io, helping customers develop safer, more secure connected devices. He worked previously as a Technical Project Manager and Professional Services Engineer for Mentor Graphics. He was raised in Tampa, Florida and attended the University of Florida.
Captions: 
	00:00:00,000 --> 00:00:03,480
all right well thank you guys all for

00:00:01,469 --> 00:00:05,130
coming out I hope you're here to hear

00:00:03,480 --> 00:00:07,259
about some embedded Linux build systems

00:00:05,130 --> 00:00:11,820
if you're not you're in the wrong room

00:00:07,259 --> 00:00:13,139
or maybe I am I'm not sure but I do

00:00:11,820 --> 00:00:16,020
appreciate everybody coming out I know

00:00:13,139 --> 00:00:18,600
there's a lot of a lot of crossover a

00:00:16,020 --> 00:00:20,039
lot of interesting talks here and I do

00:00:18,600 --> 00:00:22,380
appreciate you guys coming to hear what

00:00:20,039 --> 00:00:26,160
I may have to say either rightly or

00:00:22,380 --> 00:00:27,300
wrongly about these these things so as I

00:00:26,160 --> 00:00:30,150
said we're here to talk about some

00:00:27,300 --> 00:00:32,850
embedded Linux build systems in distros

00:00:30,150 --> 00:00:34,820
and various options for getting software

00:00:32,850 --> 00:00:36,960
up and running on a vetted Linux device

00:00:34,820 --> 00:00:38,540
things have changed quite a bit in the

00:00:36,960 --> 00:00:41,280
last few years in this space especially

00:00:38,540 --> 00:00:43,379
due to systems like the Raspberry Pi

00:00:41,280 --> 00:00:46,590
making it a lot easier to get in and get

00:00:43,379 --> 00:00:48,450
started for low effort and low dollars

00:00:46,590 --> 00:00:51,270
so there's a lot more options out there

00:00:48,450 --> 00:00:53,250
than there used to be so just a I'll

00:00:51,270 --> 00:00:59,719
start with just a brief overview of what

00:00:53,250 --> 00:00:59,719
we're gonna discuss here go away

00:01:02,780 --> 00:01:07,159
there we go are we back online out there

00:01:08,689 --> 00:01:13,290
all right so I want to start with just a

00:01:11,580 --> 00:01:14,970
little bit of the challenges of embedded

00:01:13,290 --> 00:01:17,130
Linux I suspect the majority of the

00:01:14,970 --> 00:01:18,960
folks in this audience are well familiar

00:01:17,130 --> 00:01:20,790
with them but I figured it was worth a

00:01:18,960 --> 00:01:22,950
review of you know some of the things we

00:01:20,790 --> 00:01:24,090
face is embedded Linux developers that

00:01:22,950 --> 00:01:27,210
are different than your traditional

00:01:24,090 --> 00:01:30,540
desktop or web developer in the issues

00:01:27,210 --> 00:01:32,340
there they will be facing define what a

00:01:30,540 --> 00:01:35,070
build system is from my perspective and

00:01:32,340 --> 00:01:38,840
just some criteria for evaluating them

00:01:35,070 --> 00:01:41,820
for use in your particular system design

00:01:38,840 --> 00:01:43,320
discuss a few popular options obviously

00:01:41,820 --> 00:01:45,299
I'm sure we all have our own favorites

00:01:43,320 --> 00:01:48,720
here in my current role I'm actually

00:01:45,299 --> 00:01:49,860
kind of stepping back and talking to

00:01:48,720 --> 00:01:51,990
more customers and seeing a lot more

00:01:49,860 --> 00:01:54,840
questions about systems I knew nothing

00:01:51,990 --> 00:01:56,729
about so ultimately this talk was really

00:01:54,840 --> 00:01:57,990
to give me an opportunity to learn about

00:01:56,729 --> 00:02:02,070
some of these build systems and I

00:01:57,990 --> 00:02:04,500
figured I'd share what I learned with as

00:02:02,070 --> 00:02:05,939
many people as possible ultimately the

00:02:04,500 --> 00:02:07,710
goal is to help new embedded Linux

00:02:05,939 --> 00:02:09,239
developers get started I'm not here to

00:02:07,710 --> 00:02:10,440
teach you guys how to use Yocto or how

00:02:09,239 --> 00:02:12,720
to use build route or how to be an

00:02:10,440 --> 00:02:13,470
expert in any of these systems obviously

00:02:12,720 --> 00:02:15,660
in

00:02:13,470 --> 00:02:18,060
five minute talk that's quite quite

00:02:15,660 --> 00:02:19,080
quite a tall task especially if I'm

00:02:18,060 --> 00:02:21,300
going to be talking about more than one

00:02:19,080 --> 00:02:23,850
of the systems my goal really here is to

00:02:21,300 --> 00:02:26,400
give a beginner's you of some of these

00:02:23,850 --> 00:02:28,020
systems and like I say things you might

00:02:26,400 --> 00:02:30,150
want to consider when you're designing

00:02:28,020 --> 00:02:32,040
your system in deciding what what build

00:02:30,150 --> 00:02:35,130
system you want to use for any new

00:02:32,040 --> 00:02:37,320
upcoming designs you may have so just a

00:02:35,130 --> 00:02:39,120
briefly about me my name is drew Mosley

00:02:37,320 --> 00:02:41,520
I'm currently working on a project

00:02:39,120 --> 00:02:43,500
called mender do we do have a booth over

00:02:41,520 --> 00:02:44,820
in the the sponsor area

00:02:43,500 --> 00:02:48,209
it's an over-the-air update or for

00:02:44,820 --> 00:02:50,040
embedded Linux it's all open-source dual

00:02:48,209 --> 00:02:51,930
they be root filesystem full robustness

00:02:50,040 --> 00:02:53,790
that kind of thing I've been in the

00:02:51,930 --> 00:02:56,100
embedded Linux and Yocto space for about

00:02:53,790 --> 00:02:58,470
ten years and I've been in general

00:02:56,100 --> 00:03:00,450
embedded for even longer than that as I

00:02:58,470 --> 00:03:02,130
said my current role is a technical

00:03:00,450 --> 00:03:03,510
solutions architect so I'm out actually

00:03:02,130 --> 00:03:05,490
out talking to customers figuring out

00:03:03,510 --> 00:03:08,160
what they want to do I have a long

00:03:05,490 --> 00:03:10,560
history of working on the octo project

00:03:08,160 --> 00:03:13,290
but in my current role I do get people

00:03:10,560 --> 00:03:14,910
asking about other systems so thus the

00:03:13,290 --> 00:03:17,459
impetus for this talk to kind of figure

00:03:14,910 --> 00:03:19,590
out some of the the new systems that are

00:03:17,459 --> 00:03:21,930
rather the other systems not necessarily

00:03:19,590 --> 00:03:23,640
new systems but new to me systems that

00:03:21,930 --> 00:03:25,890
are out there and when they might be

00:03:23,640 --> 00:03:29,600
useful and how I can make better

00:03:25,890 --> 00:03:29,600
recommendations to our potential users

00:03:29,870 --> 00:03:34,440
so briefly let's talk about some of the

00:03:32,820 --> 00:03:36,300
challenges embedded Linux developers

00:03:34,440 --> 00:03:39,060
face obviously the variety of hardware

00:03:36,300 --> 00:03:41,610
that we have to deal with is quite a bit

00:03:39,060 --> 00:03:42,780
broader than most folks you know if

00:03:41,610 --> 00:03:43,950
you're doing web development software

00:03:42,780 --> 00:03:46,019
you're pretty much isolated from the

00:03:43,950 --> 00:03:47,820
hardware you're worried about software

00:03:46,019 --> 00:03:50,190
api's and that kind of thing but in the

00:03:47,820 --> 00:03:51,390
embedded Linux space your your the

00:03:50,190 --> 00:03:53,790
variety of hardware you will deal with

00:03:51,390 --> 00:03:55,260
on any given project can can change

00:03:53,790 --> 00:03:59,209
quite a bit from previous projects

00:03:55,260 --> 00:04:02,640
storage media is tends to be a pretty

00:03:59,209 --> 00:04:04,610
big issue for for most of our users some

00:04:02,640 --> 00:04:07,769
systems have SD MMC some systems have

00:04:04,610 --> 00:04:09,660
USB mass-storage some systems have ubi

00:04:07,769 --> 00:04:11,519
so and each of those has their own

00:04:09,660 --> 00:04:14,160
challenges in ways of dealing with them

00:04:11,519 --> 00:04:15,989
so embedded Linux developers typically

00:04:14,160 --> 00:04:16,669
have to deal with those those kinds of

00:04:15,989 --> 00:04:19,440
things

00:04:16,669 --> 00:04:21,239
additionally a lot of the drivers and

00:04:19,440 --> 00:04:22,680
board support packages for the various

00:04:21,239 --> 00:04:24,539
pieces of hardware we're using in the

00:04:22,680 --> 00:04:26,160
embedded space may not be in the main

00:04:24,539 --> 00:04:26,590
line they may be developed in their own

00:04:26,160 --> 00:04:28,389
four

00:04:26,590 --> 00:04:30,550
maintained by the the semiconductor

00:04:28,389 --> 00:04:32,650
vendors or various other places like

00:04:30,550 --> 00:04:34,870
that so gathering all the right

00:04:32,650 --> 00:04:38,590
components for any particular platform

00:04:34,870 --> 00:04:40,540
can be a challenge and for those coming

00:04:38,590 --> 00:04:43,120
from the non-embedded world cross

00:04:40,540 --> 00:04:45,400
development kind of takes some getting

00:04:43,120 --> 00:04:46,690
used to the idea of you know developing

00:04:45,400 --> 00:04:48,010
code on one machine running it on

00:04:46,690 --> 00:04:49,630
another having to have some kind of

00:04:48,010 --> 00:04:51,040
connection to the machine that kind of

00:04:49,630 --> 00:04:52,780
thing that that does present some

00:04:51,040 --> 00:04:55,720
challenges for folks moving into the

00:04:52,780 --> 00:04:57,430
space and as I said we do with a lot of

00:04:55,720 --> 00:04:59,530
the customers we're seeing now we are

00:04:57,430 --> 00:05:01,150
getting a lot of new embedded Linux

00:04:59,530 --> 00:05:02,560
users coming into the space say from the

00:05:01,150 --> 00:05:04,960
nodejs communities and that kind of

00:05:02,560 --> 00:05:06,820
thing doing IOT devices so a lot of

00:05:04,960 --> 00:05:08,590
these things are very relevant to folks

00:05:06,820 --> 00:05:10,270
that are new to this space and the

00:05:08,590 --> 00:05:11,500
initial device provisioning and what I

00:05:10,270 --> 00:05:13,630
mean by that is how do you get that

00:05:11,500 --> 00:05:15,669
initial image on the on the device that

00:05:13,630 --> 00:05:16,810
can be tricky every device is different

00:05:15,669 --> 00:05:18,610
some of them are simple if you're lucky

00:05:16,810 --> 00:05:21,729
it's an SD card you can take out plug it

00:05:18,610 --> 00:05:24,850
in another machine and and write the

00:05:21,729 --> 00:05:26,410
image to the SD card if you have a raw

00:05:24,850 --> 00:05:28,060
flash based device there may be some

00:05:26,410 --> 00:05:29,710
kind of you know you got a we got a

00:05:28,060 --> 00:05:31,600
short two pins together to put it into a

00:05:29,710 --> 00:05:33,520
certain mode so those are all gonna be

00:05:31,600 --> 00:05:35,470
very device specific and those those

00:05:33,520 --> 00:05:36,039
kind of things do do do tend to slow

00:05:35,470 --> 00:05:37,539
down

00:05:36,039 --> 00:05:43,360
your getting started in the in this

00:05:37,539 --> 00:05:45,039
space so just a few facts embedded Linux

00:05:43,360 --> 00:05:47,560
systems are very large in case you were

00:05:45,039 --> 00:05:49,510
unaware there are typically in any of

00:05:47,560 --> 00:05:51,130
these systems anywhere from hundreds of

00:05:49,510 --> 00:05:54,729
thousands of packages that you'll need

00:05:51,130 --> 00:05:57,250
to download configure build and get up

00:05:54,729 --> 00:05:59,020
and running on your system dependency

00:05:57,250 --> 00:06:00,940
hell unfortunately really is a thing I

00:05:59,020 --> 00:06:02,800
actually googled it and it's a it's a

00:06:00,940 --> 00:06:04,780
very big meme there's lots of

00:06:02,800 --> 00:06:06,610
interesting photos I didn't I decided

00:06:04,780 --> 00:06:09,160
not to actually include any of them

00:06:06,610 --> 00:06:11,830
there but getting the right combination

00:06:09,160 --> 00:06:15,130
of packages and versions for any

00:06:11,830 --> 00:06:17,470
particular configuration can be tricky I

00:06:15,130 --> 00:06:19,840
actually at one point worked on an

00:06:17,470 --> 00:06:21,430
embedded Linux project where the entire

00:06:19,840 --> 00:06:23,139
build system was I think it was like a

00:06:21,430 --> 00:06:25,229
ten thousand line make file and a

00:06:23,139 --> 00:06:27,550
fifteen thousand line shell script so

00:06:25,229 --> 00:06:31,150
the those kind of things don't scale

00:06:27,550 --> 00:06:33,039
very well so the again we're talking

00:06:31,150 --> 00:06:34,990
about embedded Linux systems working

00:06:33,039 --> 00:06:36,099
with simple make files just doesn't cut

00:06:34,990 --> 00:06:37,539
it anymore there's an ax there's a

00:06:36,099 --> 00:06:38,860
number of good options to help you get

00:06:37,539 --> 00:06:40,740
started without having to deal with a

00:06:38,860 --> 00:06:43,480
lot of this complexity yourself

00:06:40,740 --> 00:06:45,460
in general these builds take a long time

00:06:43,480 --> 00:06:46,750
and take a lot of resources if you've

00:06:45,460 --> 00:06:49,900
ever tried to build especially something

00:06:46,750 --> 00:06:52,480
like QT across build that for an

00:06:49,900 --> 00:06:53,890
embedded device of some kind it gets it

00:06:52,480 --> 00:06:56,350
gets hairy takes a lot of disk space

00:06:53,890 --> 00:06:57,460
takes a lot of build time you know a lot

00:06:56,350 --> 00:07:04,150
of coffee breaks while you're waiting

00:06:57,460 --> 00:07:07,060
for things to finish well we sure we can

00:07:04,150 --> 00:07:08,770
do that to sword-fighting breaks coffee

00:07:07,060 --> 00:07:10,300
breaks whatever overnight breaks you

00:07:08,770 --> 00:07:11,470
know I can't tell you how many times I

00:07:10,300 --> 00:07:12,750
start the builds and go to bed because

00:07:11,470 --> 00:07:14,530
it's just not worth waiting for

00:07:12,750 --> 00:07:17,800
especially when you're building from

00:07:14,530 --> 00:07:20,380
scratch in some of these cases some

00:07:17,800 --> 00:07:22,330
other things to consider in general when

00:07:20,380 --> 00:07:23,860
you're talking about embedded

00:07:22,330 --> 00:07:25,780
applications and use of these systems

00:07:23,860 --> 00:07:27,610
and embedded in the embedded space they

00:07:25,780 --> 00:07:29,800
do require significant customization

00:07:27,610 --> 00:07:31,780
it's rare that you're going to take a

00:07:29,800 --> 00:07:33,280
system and use it completely out of the

00:07:31,780 --> 00:07:34,960
box and have it have everything you need

00:07:33,280 --> 00:07:36,520
for your particular application you're

00:07:34,960 --> 00:07:38,530
going to need the ability to customize

00:07:36,520 --> 00:07:40,000
these systems and so any of these build

00:07:38,530 --> 00:07:41,860
systems that you look at they're going

00:07:40,000 --> 00:07:43,300
to have to provide some means for you to

00:07:41,860 --> 00:07:45,700
customize these systems as you move

00:07:43,300 --> 00:07:47,920
forward in your design and similarly a

00:07:45,700 --> 00:07:50,500
lot of the systems will provide defaults

00:07:47,920 --> 00:07:52,750
and some of the systems make it more

00:07:50,500 --> 00:07:53,860
difficult to change those defaults which

00:07:52,750 --> 00:07:55,930
may not be appropriate for your

00:07:53,860 --> 00:07:58,900
environment so that's another thing to

00:07:55,930 --> 00:08:01,480
consider is how well your requirements

00:07:58,900 --> 00:08:05,560
map into the defaults of whatever build

00:08:01,480 --> 00:08:07,780
system you have chosen so what exactly

00:08:05,560 --> 00:08:11,920
do I mean when I'm talking about a build

00:08:07,780 --> 00:08:14,980
system so what a build system is it's a

00:08:11,920 --> 00:08:16,990
mechanism to specify and build a full

00:08:14,980 --> 00:08:18,460
embedded Linux system so it gives you

00:08:16,990 --> 00:08:20,140
the ability to define your hardware

00:08:18,460 --> 00:08:21,850
whichever hardware platform you're

00:08:20,140 --> 00:08:24,520
working on whichever SOC you might be

00:08:21,850 --> 00:08:26,410
you have on your board that kind of

00:08:24,520 --> 00:08:28,900
thing gives you the ability to integrate

00:08:26,410 --> 00:08:32,110
user space applications either yours or

00:08:28,900 --> 00:08:33,790
someone else's generally speaking most

00:08:32,110 --> 00:08:36,790
of these build systems they will bring

00:08:33,790 --> 00:08:38,979
in a lot of user space applications just

00:08:36,790 --> 00:08:41,380
pull down directly from their canonical

00:08:38,979 --> 00:08:43,240
upstream location and then it they will

00:08:41,380 --> 00:08:44,920
all also give you the ability to include

00:08:43,240 --> 00:08:47,350
your own custom applications and

00:08:44,920 --> 00:08:49,900
scripting and that kind of thing a

00:08:47,350 --> 00:08:52,270
couple of couple other things that are

00:08:49,900 --> 00:08:54,300
part of a build system ideally you've

00:08:52,270 --> 00:08:57,029
got the ability to reproduce your build

00:08:54,300 --> 00:09:00,209
a lot of times you see people especially

00:08:57,029 --> 00:09:01,740
in the hobbyist makerspace they log into

00:09:00,209 --> 00:09:03,810
the system remotely they'll install the

00:09:01,740 --> 00:09:05,670
package is using apt-get or yum or

00:09:03,810 --> 00:09:06,930
whatever and then they'll actually once

00:09:05,670 --> 00:09:08,580
they get the system of the way they want

00:09:06,930 --> 00:09:10,230
it they'll actually copy the system off

00:09:08,580 --> 00:09:12,089
as a binary and that's their means of

00:09:10,230 --> 00:09:13,560
reproducibility and that's fine for

00:09:12,089 --> 00:09:14,850
certain environments but I don't

00:09:13,560 --> 00:09:16,680
recommend it if you're going to try to

00:09:14,850 --> 00:09:18,540
go into production and get people to pay

00:09:16,680 --> 00:09:19,980
you for devices and you're gonna be

00:09:18,540 --> 00:09:22,680
deploying large number numbers of

00:09:19,980 --> 00:09:24,060
devices so you need to take a look at

00:09:22,680 --> 00:09:26,250
your build system and figure out okay

00:09:24,060 --> 00:09:28,140
how am I going to reproduce this build

00:09:26,250 --> 00:09:29,579
how am I going to make the same bill to

00:09:28,140 --> 00:09:32,670
know exactly what's getting installed on

00:09:29,579 --> 00:09:33,899
my devices every time they also need to

00:09:32,670 --> 00:09:36,870
have some support from multiple

00:09:33,899 --> 00:09:39,209
developers again if you install on an SD

00:09:36,870 --> 00:09:41,399
card log into the system remotely and

00:09:39,209 --> 00:09:42,839
try to configure all your files in slash

00:09:41,399 --> 00:09:44,579
Etsy and install all your additional

00:09:42,839 --> 00:09:46,140
packages that doesn't scale real well as

00:09:44,579 --> 00:09:49,019
your development team scales up so you

00:09:46,140 --> 00:09:51,540
need some means of doing the development

00:09:49,019 --> 00:09:54,110
away from the board so that you can have

00:09:51,540 --> 00:09:56,040
your larger development teams contribute

00:09:54,110 --> 00:09:57,630
ideally they allow for parallel

00:09:56,040 --> 00:09:59,100
processing as I mentioned in the

00:09:57,630 --> 00:10:01,440
previous slide these systems are huge

00:09:59,100 --> 00:10:05,279
the builds take forever you've got to be

00:10:01,440 --> 00:10:08,790
able to do builds in parallel as much as

00:10:05,279 --> 00:10:10,050
possible across tool chains generally

00:10:08,790 --> 00:10:12,149
should be considered part of your build

00:10:10,050 --> 00:10:13,890
system if you've ever tried to build a

00:10:12,149 --> 00:10:16,260
tool chain yourself you'll you're

00:10:13,890 --> 00:10:17,880
probably familiar with the number of

00:10:16,260 --> 00:10:19,440
additional requirements that that brings

00:10:17,880 --> 00:10:21,570
in getting all the components matched up

00:10:19,440 --> 00:10:22,709
so there are tools that can help with

00:10:21,570 --> 00:10:24,930
that and I've got a link for one or two

00:10:22,709 --> 00:10:26,790
of them later in the slides but ideally

00:10:24,930 --> 00:10:28,050
the build system you choose will will

00:10:26,790 --> 00:10:30,149
take care of the the tool chain

00:10:28,050 --> 00:10:31,260
development for you and another big

00:10:30,149 --> 00:10:32,880
thing that a lot of people miss

00:10:31,260 --> 00:10:34,470
especially early on is license

00:10:32,880 --> 00:10:37,140
management if you're just doing a

00:10:34,470 --> 00:10:39,149
hobbyist project at home that's usually

00:10:37,140 --> 00:10:40,529
not a big deal but if you're working say

00:10:39,149 --> 00:10:42,180
in the automotive space I know they have

00:10:40,529 --> 00:10:44,430
some very strict requirements as far as

00:10:42,180 --> 00:10:46,680
licenses that they allow in their code

00:10:44,430 --> 00:10:48,660
so ideally whatever system you choose to

00:10:46,680 --> 00:10:50,660
develop your your binary image for your

00:10:48,660 --> 00:10:53,459
target will give you some ability to

00:10:50,660 --> 00:10:55,440
track the license the licenses that are

00:10:53,459 --> 00:10:57,120
involved and be able to exclude and

00:10:55,440 --> 00:10:58,680
include specific licenses and throw

00:10:57,120 --> 00:11:03,510
errors if you try to include the wrong

00:10:58,680 --> 00:11:06,029
thing so real briefly a couple things

00:11:03,510 --> 00:11:07,170
that typically people think about when

00:11:06,029 --> 00:11:07,710
they're thinking about build system but

00:11:07,170 --> 00:11:09,120
for

00:11:07,710 --> 00:11:11,100
my perspective I don't consider that

00:11:09,120 --> 00:11:13,620
these components are part of a build

00:11:11,100 --> 00:11:15,270
system it's not an IDE these these build

00:11:13,620 --> 00:11:18,180
systems that we're discussing today are

00:11:15,270 --> 00:11:20,430
not really built for iterative

00:11:18,180 --> 00:11:21,660
development most of the development say

00:11:20,430 --> 00:11:22,980
if you're doing kernel porting or

00:11:21,660 --> 00:11:24,240
whatever you're not going to be doing

00:11:22,980 --> 00:11:26,460
you're you're hard core kernel

00:11:24,240 --> 00:11:28,050
development within the Yocto build

00:11:26,460 --> 00:11:30,000
system of the build root system the the

00:11:28,050 --> 00:11:32,670
the turnaround time is just too long to

00:11:30,000 --> 00:11:34,290
go from a source code change to binaries

00:11:32,670 --> 00:11:35,910
that actually run on your target so you

00:11:34,290 --> 00:11:38,040
might use one of these build systems to

00:11:35,910 --> 00:11:40,170
provision the system initially but then

00:11:38,040 --> 00:11:41,700
you'll typically go for your actual

00:11:40,170 --> 00:11:42,780
application development you'll do some

00:11:41,700 --> 00:11:45,090
work outside of it and whatever

00:11:42,780 --> 00:11:46,740
mechanism is appropriate for you ideally

00:11:45,090 --> 00:11:48,570
using the the tool chains that are built

00:11:46,740 --> 00:11:50,790
by the by the distribution and the

00:11:48,570 --> 00:11:52,650
libraries and that kind of thing it's

00:11:50,790 --> 00:11:54,840
also not generally considered a

00:11:52,650 --> 00:11:56,700
distribution although the raspbian view

00:11:54,840 --> 00:11:59,730
of the world is kind of changing that in

00:11:56,700 --> 00:12:01,710
in some of the hobbyist spaces a lot of

00:11:59,730 --> 00:12:03,750
them are using things like raspbian and

00:12:01,710 --> 00:12:05,400
debian directly out of the box but

00:12:03,750 --> 00:12:07,680
distribution is generally something

00:12:05,400 --> 00:12:10,140
that's kind of layered on top of some of

00:12:07,680 --> 00:12:11,910
the build systems although more and more

00:12:10,140 --> 00:12:12,900
customers and users are looking to use

00:12:11,910 --> 00:12:15,740
things like standard desktop

00:12:12,900 --> 00:12:18,270
distributions in in their target devices

00:12:15,740 --> 00:12:21,690
it's also not typically a deployment and

00:12:18,270 --> 00:12:23,010
provisioning tool so the the the the

00:12:21,690 --> 00:12:25,020
output of these build systems is

00:12:23,010 --> 00:12:27,480
generally build image of some kind but

00:12:25,020 --> 00:12:29,010
they generally don't include direct

00:12:27,480 --> 00:12:30,900
mechanisms to deploy to the system

00:12:29,010 --> 00:12:32,880
there's just too many variety of ways

00:12:30,900 --> 00:12:34,920
that you actually have to get the images

00:12:32,880 --> 00:12:36,180
deployed to your system as I mentioned

00:12:34,920 --> 00:12:37,920
earlier you might if you're lucky you've

00:12:36,180 --> 00:12:39,450
got an SD card that makes it simple if

00:12:37,920 --> 00:12:41,160
you're using something with raw flash

00:12:39,450 --> 00:12:42,690
there's generally some kind of USB

00:12:41,160 --> 00:12:45,210
interface where it comes back into your

00:12:42,690 --> 00:12:47,880
system and shows up as a block device on

00:12:45,210 --> 00:12:49,440
your development system so they provide

00:12:47,880 --> 00:12:51,540
typically these systems will provide

00:12:49,440 --> 00:12:53,130
tools to assist in this but generally

00:12:51,540 --> 00:12:55,170
speaking you're gonna have to go back to

00:12:53,130 --> 00:12:57,090
the manufacturer or the board to figure

00:12:55,170 --> 00:12:59,280
out exactly how to get the images from

00:12:57,090 --> 00:13:01,290
your build system into your deployed

00:12:59,280 --> 00:13:02,970
devices and generally they're not

00:13:01,290 --> 00:13:04,410
considered out-of-the-box solutions it's

00:13:02,970 --> 00:13:06,450
most of these you're not going to take

00:13:04,410 --> 00:13:08,010
run a build install it and have it have

00:13:06,450 --> 00:13:11,310
everything you want on it if you do

00:13:08,010 --> 00:13:12,960
great you're you're you're ahead of the

00:13:11,310 --> 00:13:14,430
game but generally speaking you're gonna

00:13:12,960 --> 00:13:16,200
want to customize these things quite a

00:13:14,430 --> 00:13:17,710
bit you'll add your own custom code

00:13:16,200 --> 00:13:22,630
you'll add your own custom

00:13:17,710 --> 00:13:25,240
that kind of thing so let's jump into a

00:13:22,630 --> 00:13:27,910
couple of the the big names in the space

00:13:25,240 --> 00:13:29,410
Yocto project I suspect most of you have

00:13:27,910 --> 00:13:30,940
at least heard of it if you haven't

00:13:29,410 --> 00:13:33,130
they've got a booth over in the sponsor

00:13:30,940 --> 00:13:34,630
showcase I encourage you to take a look

00:13:33,130 --> 00:13:36,910
as I said at the beginning I've spent

00:13:34,630 --> 00:13:38,530
quite a few years in in the Yocto space

00:13:36,910 --> 00:13:41,440
so this is the one system that I

00:13:38,530 --> 00:13:43,060
actually no know the best you can see

00:13:41,440 --> 00:13:44,560
the quote at the very top that comes

00:13:43,060 --> 00:13:46,960
directly from the octo project website

00:13:44,560 --> 00:13:48,850
it's not an embedded Linux distribution

00:13:46,960 --> 00:13:52,960
it creates a custom one for you

00:13:48,850 --> 00:13:54,940
so the way Yocto is structured it's it

00:13:52,960 --> 00:13:57,340
consists of recipes metadata

00:13:54,940 --> 00:14:00,010
dependencies and configuration recipes

00:13:57,340 --> 00:14:02,050
are basically just that they're sets of

00:14:00,010 --> 00:14:04,720
instructions that tell the octo build

00:14:02,050 --> 00:14:07,330
system how to how to download build

00:14:04,720 --> 00:14:09,280
compose and and everything else you need

00:14:07,330 --> 00:14:11,620
to do for all the package the packages

00:14:09,280 --> 00:14:14,050
that go into your build system the

00:14:11,620 --> 00:14:15,580
primary output of a Yocto build is a

00:14:14,050 --> 00:14:17,620
packaged feed and what that means is the

00:14:15,580 --> 00:14:19,720
directory somewhere on your disk with a

00:14:17,620 --> 00:14:20,980
list of with all the packages that are

00:14:19,720 --> 00:14:23,940
built as part of your configuration

00:14:20,980 --> 00:14:27,910
typically that'll be in RPM format or

00:14:23,940 --> 00:14:30,010
debian format or ipk format and then the

00:14:27,910 --> 00:14:32,890
secondary output is the actual boot

00:14:30,010 --> 00:14:34,930
images so you with Yocto you can

00:14:32,890 --> 00:14:37,360
actually install the package management

00:14:34,930 --> 00:14:39,880
utilities directly onto the target and

00:14:37,360 --> 00:14:42,630
still do things like installing packages

00:14:39,880 --> 00:14:46,570
dynamically at runtime using apt-get or

00:14:42,630 --> 00:14:48,070
ipk or things like that it does

00:14:46,570 --> 00:14:50,440
generally build all the components from

00:14:48,070 --> 00:14:52,030
source although when you're working with

00:14:50,440 --> 00:14:53,770
some of these say the semiconductor

00:14:52,030 --> 00:14:55,500
manufacturers sometimes there are binary

00:14:53,770 --> 00:14:57,910
blobs that need to get downloaded for

00:14:55,500 --> 00:15:00,220
various components and the GPU and that

00:14:57,910 --> 00:15:02,320
kind of thing and it's it's focus really

00:15:00,220 --> 00:15:04,870
is more mechanism than policy there are

00:15:02,320 --> 00:15:07,660
defaults in the octo system for instance

00:15:04,870 --> 00:15:08,770
I believe right now the octo default is

00:15:07,660 --> 00:15:10,540
to use Sisyphean it

00:15:08,770 --> 00:15:12,790
I know system D is becoming more widely

00:15:10,540 --> 00:15:14,920
used it wouldn't surprise me if that if

00:15:12,790 --> 00:15:16,570
their default changes over time however

00:15:14,920 --> 00:15:18,250
the octo project is generally pretty

00:15:16,570 --> 00:15:21,070
good about allowing you to substitute

00:15:18,250 --> 00:15:22,930
your own policy on top of the bare

00:15:21,070 --> 00:15:25,870
mechanisms that are provided by the octo

00:15:22,930 --> 00:15:28,870
system so you got a list of the products

00:15:25,870 --> 00:15:31,090
there from a standard Yocto build it's a

00:15:28,870 --> 00:15:31,480
root filesystem image of some kind it'll

00:15:31,090 --> 00:15:34,060
be an

00:15:31,480 --> 00:15:36,040
ext three or four image perhaps it could

00:15:34,060 --> 00:15:37,840
be a tarball if you want to deploy your

00:15:36,040 --> 00:15:40,270
root filesystem over NFS it could be a

00:15:37,840 --> 00:15:42,580
ubi image it just all depends on your

00:15:40,270 --> 00:15:44,440
board configuration and and how you want

00:15:42,580 --> 00:15:45,700
to use the files the kernel the

00:15:44,440 --> 00:15:48,310
bootloader and the tool chain are

00:15:45,700 --> 00:15:49,900
obviously all included as well those are

00:15:48,310 --> 00:15:51,610
typically stored outside of the root

00:15:49,900 --> 00:15:53,710
filesystem image although for some of

00:15:51,610 --> 00:15:55,540
the deployment models for instance the

00:15:53,710 --> 00:15:57,160
kernel and the device tree could

00:15:55,540 --> 00:15:58,660
potentially actually be inside the root

00:15:57,160 --> 00:16:00,760
filesystem image and loaded from the

00:15:58,660 --> 00:16:03,310
bootloader there and as I mentioned the

00:16:00,760 --> 00:16:05,890
package feed that's a that's the the

00:16:03,310 --> 00:16:06,880
primary output and you see the the link

00:16:05,890 --> 00:16:09,160
there if you haven't gone over to the

00:16:06,880 --> 00:16:11,560
octo project org website I encourage you

00:16:09,160 --> 00:16:13,900
to do so go talk to the the folks at the

00:16:11,560 --> 00:16:17,200
booth and there's a lot of people with a

00:16:13,900 --> 00:16:18,910
lot of knowledge about Yocto so just

00:16:17,200 --> 00:16:20,490
going into just a little just enough

00:16:18,910 --> 00:16:22,840
detail to kind of give you a flavor here

00:16:20,490 --> 00:16:25,180
one of the strengths of the Yocto

00:16:22,840 --> 00:16:27,820
project is its layering mechanism that

00:16:25,180 --> 00:16:30,130
allows individuals that are not directly

00:16:27,820 --> 00:16:31,390
in the octo project to produce their own

00:16:30,130 --> 00:16:33,520
layers with their own custom

00:16:31,390 --> 00:16:35,500
functionality so for instance you've got

00:16:33,520 --> 00:16:37,300
the stock layers from the Yocto project

00:16:35,500 --> 00:16:39,460
that you can download from their github

00:16:37,300 --> 00:16:41,650
and then for most platforms you will

00:16:39,460 --> 00:16:43,780
actually get an external layer that adds

00:16:41,650 --> 00:16:45,550
the blackboard support for that

00:16:43,780 --> 00:16:46,990
particular platform so for instance if

00:16:45,550 --> 00:16:49,030
you're looking at mat at the raspberry

00:16:46,990 --> 00:16:51,250
pi platform you want to run Yocto on

00:16:49,030 --> 00:16:53,050
that if you go to Yocto project order

00:16:51,250 --> 00:16:54,190
and download directly from them you

00:16:53,050 --> 00:16:55,810
won't have the kernel and the board

00:16:54,190 --> 00:16:57,430
support packages necessary you actually

00:16:55,810 --> 00:17:01,420
have to go get the meta raspberry pi

00:16:57,430 --> 00:17:03,460
layer advantages of that are it allows

00:17:01,420 --> 00:17:05,560
the systems to develop at their own

00:17:03,460 --> 00:17:07,840
rates Yocto has the Yocto project has

00:17:05,560 --> 00:17:09,580
their own released cadence the the meta

00:17:07,840 --> 00:17:11,440
raspberry pi layer has its own release

00:17:09,580 --> 00:17:13,660
cadence and everything can be maintained

00:17:11,440 --> 00:17:15,130
separately it's both both a blessing and

00:17:13,660 --> 00:17:16,450
a curse because getting started that

00:17:15,130 --> 00:17:19,780
first time can be a little tricky if

00:17:16,450 --> 00:17:21,910
you're not aware of this and and the

00:17:19,780 --> 00:17:24,160
recipes in general in Yocto they're

00:17:21,910 --> 00:17:25,780
developed in Python and bash so I would

00:17:24,160 --> 00:17:28,540
imagine most of us are reasonably

00:17:25,780 --> 00:17:30,970
familiar the their snippets of code in

00:17:28,540 --> 00:17:33,280
the recipes when for instance if you

00:17:30,970 --> 00:17:35,710
want to create a custom compilation

00:17:33,280 --> 00:17:38,200
recipe you know it's generally done up

00:17:35,710 --> 00:17:40,780
in bash or in Python so it's fairly easy

00:17:38,200 --> 00:17:42,430
to expand and store your code in a

00:17:40,780 --> 00:17:45,130
separate layer I would also encourage

00:17:42,430 --> 00:17:46,540
you when you're doing your system design

00:17:45,130 --> 00:17:48,520
for one of the first steps you need to

00:17:46,540 --> 00:17:50,440
do if you're using Yocto is to create

00:17:48,520 --> 00:17:52,810
create your own custom layer that's

00:17:50,440 --> 00:17:55,120
where your customizations will go your

00:17:52,810 --> 00:17:56,560
you might use the the upstream images

00:17:55,120 --> 00:17:58,090
from the octo project but you'll want to

00:17:56,560 --> 00:17:58,450
add certain packages and that kind of

00:17:58,090 --> 00:17:59,920
thing

00:17:58,450 --> 00:18:01,660
you're better off adding those in a

00:17:59,920 --> 00:18:04,420
custom layer then keeping local patches

00:18:01,660 --> 00:18:06,760
against the upstream Yocto project it

00:18:04,420 --> 00:18:08,710
just makes it easier for separation the

00:18:06,760 --> 00:18:10,000
Yocto project can move forward and it

00:18:08,710 --> 00:18:11,470
makes it easier when it's time for you

00:18:10,000 --> 00:18:13,150
to move to a new version of the project

00:18:11,470 --> 00:18:16,150
if your code is completely separated

00:18:13,150 --> 00:18:19,240
then then then you can have that code

00:18:16,150 --> 00:18:21,910
develop at its own pace the octo project

00:18:19,240 --> 00:18:25,300
also has a very integrated SDK mechanism

00:18:21,910 --> 00:18:26,590
and the idea with this is that it's easy

00:18:25,300 --> 00:18:27,880
to separate between your system

00:18:26,590 --> 00:18:30,130
developers and your application

00:18:27,880 --> 00:18:31,030
developers so your system developers are

00:18:30,130 --> 00:18:33,070
the ones that are running the full

00:18:31,030 --> 00:18:35,500
bitbake builds generating the images

00:18:33,070 --> 00:18:37,990
from scratch and and and producing the

00:18:35,500 --> 00:18:40,840
actual target binary images the

00:18:37,990 --> 00:18:42,640
application developers may not need that

00:18:40,840 --> 00:18:44,050
level of detail into the system they're

00:18:42,640 --> 00:18:45,370
they're developing applications in

00:18:44,050 --> 00:18:48,490
whatever language is appropriate

00:18:45,370 --> 00:18:50,620
so you actually export an SDK from the

00:18:48,490 --> 00:18:51,880
system developer and that consists

00:18:50,620 --> 00:18:53,260
essentially of the library's header

00:18:51,880 --> 00:18:56,080
files and that kind of thing

00:18:53,260 --> 00:18:58,450
that the application developers will

00:18:56,080 --> 00:19:00,190
need to link with their applications

00:18:58,450 --> 00:19:03,220
with to be able to work with a smaller

00:19:00,190 --> 00:19:05,140
subset of the system and this is as I

00:19:03,220 --> 00:19:07,870
mentioned is one of the easy mechanisms

00:19:05,140 --> 00:19:10,540
for allowing multiple developers to

00:19:07,870 --> 00:19:13,870
contribute some optimizations that the

00:19:10,540 --> 00:19:16,240
Yocto project provides if if you've done

00:19:13,870 --> 00:19:18,940
a build previously the pre-built

00:19:16,240 --> 00:19:20,590
binaries will be stored in a mechanism

00:19:18,940 --> 00:19:22,840
called the shared state cache which

00:19:20,590 --> 00:19:24,970
allows for reuse of those binaries if

00:19:22,840 --> 00:19:27,250
the components going in to generate them

00:19:24,970 --> 00:19:30,280
have not changed in subsequent builds so

00:19:27,250 --> 00:19:32,110
it really gives you the ability to reuse

00:19:30,280 --> 00:19:34,450
these components that that haven't

00:19:32,110 --> 00:19:36,550
changed from build to build and and

00:19:34,450 --> 00:19:39,310
parallel builds are very well integrated

00:19:36,550 --> 00:19:40,900
into the octo build system so the the

00:19:39,310 --> 00:19:42,550
the Yocto build system will take as many

00:19:40,900 --> 00:19:44,560
cores and as much memory as you can

00:19:42,550 --> 00:19:47,830
throw at it and and it will parallel

00:19:44,560 --> 00:19:50,050
lies as much as possible a previous talk

00:19:47,830 --> 00:19:51,310
I saw from ELC I think about a year and

00:19:50,050 --> 00:19:52,540
a half two years ago estimated there

00:19:51,310 --> 00:19:56,600
were about eighty four hundred software

00:19:52,540 --> 00:19:58,730
packages available as documented in the

00:19:56,600 --> 00:20:00,320
Yocto metadata index that doesn't

00:19:58,730 --> 00:20:03,139
include layers that are not necessarily

00:20:00,320 --> 00:20:05,120
indexed by the Aqua project so getting

00:20:03,139 --> 00:20:08,149
an exact number is is hard to pin down

00:20:05,120 --> 00:20:09,440
in that 8400 there's probably quite a

00:20:08,149 --> 00:20:11,870
bit of overlap with different versions

00:20:09,440 --> 00:20:13,639
of you know the cool compilers and QT

00:20:11,870 --> 00:20:16,279
and things like that but just to give

00:20:13,639 --> 00:20:18,500
you an idea at one point it was you know

00:20:16,279 --> 00:20:22,730
somewhere around eight to nine thousand

00:20:18,500 --> 00:20:25,009
packages available so what I've got on

00:20:22,730 --> 00:20:27,049
the screen here is the minimum set of

00:20:25,009 --> 00:20:28,820
steps to get up and running with a Yocto

00:20:27,049 --> 00:20:31,009
project build what this will do

00:20:28,820 --> 00:20:34,039
obviously it'll it'll check out the Roco

00:20:31,009 --> 00:20:36,950
version of the the the current Yocto

00:20:34,039 --> 00:20:39,889
project within that pocky repository

00:20:36,950 --> 00:20:41,389
there's some emulated platforms and I

00:20:39,889 --> 00:20:43,070
believe a BeagleBone platform and maybe

00:20:41,389 --> 00:20:45,980
one or two other platforms that have the

00:20:43,070 --> 00:20:47,330
platform support in that layer so this

00:20:45,980 --> 00:20:50,720
set of instructions here will actually

00:20:47,330 --> 00:20:52,669
build an x86 emulated platform with the

00:20:50,720 --> 00:20:54,350
minimal image core image minimal you see

00:20:52,669 --> 00:20:57,289
there is what are the image recipes

00:20:54,350 --> 00:21:00,080
provided by the the pocky repository

00:20:57,289 --> 00:21:02,120
there and it also provides the scripting

00:21:00,080 --> 00:21:04,730
to actually easily run that emulated

00:21:02,120 --> 00:21:06,769
platform on your build system so in this

00:21:04,730 --> 00:21:09,529
case you see the the the image here that

00:21:06,769 --> 00:21:12,080
actually shows the the octo system

00:21:09,529 --> 00:21:14,090
booted up to the shell prompt at this

00:21:12,080 --> 00:21:15,799
point you know it's obviously emulated

00:21:14,090 --> 00:21:18,350
you're gonna want to expand out from

00:21:15,799 --> 00:21:19,940
there but you know with this set of four

00:21:18,350 --> 00:21:22,220
commands you can actually get a Yocto

00:21:19,940 --> 00:21:24,019
system up and running to start nosing

00:21:22,220 --> 00:21:26,450
around with it and get it get a feel for

00:21:24,019 --> 00:21:31,549
how this system might be useful in your

00:21:26,450 --> 00:21:33,799
next design so just in summary about

00:21:31,549 --> 00:21:35,840
Yocto it is very widely supported by

00:21:33,799 --> 00:21:37,909
board and semiconductor vendors a lot of

00:21:35,840 --> 00:21:40,340
the manufacturers out there actually

00:21:37,909 --> 00:21:41,960
maintain their own layers with the board

00:21:40,340 --> 00:21:44,600
support for their particular platforms

00:21:41,960 --> 00:21:47,090
so if you are on a particular platform

00:21:44,600 --> 00:21:49,250
you you definitely want to check what is

00:21:47,090 --> 00:21:50,899
provided by your manufacturer it has an

00:21:49,250 --> 00:21:52,639
extremely active developer community the

00:21:50,899 --> 00:21:54,529
mailing lists get a significant amount

00:21:52,639 --> 00:21:56,120
of traffic I know there's an active IRC

00:21:54,529 --> 00:22:00,860
Channel pretty pretty standard

00:21:56,120 --> 00:22:03,470
open-source community model wide lots of

00:22:00,860 --> 00:22:07,129
functionality enabled by that layering

00:22:03,470 --> 00:22:08,570
mechanism there's a lot of platforms

00:22:07,129 --> 00:22:10,340
that can be added outside of the main

00:22:08,570 --> 00:22:12,110
community there's a lot of functionality

00:22:10,340 --> 00:22:13,460
application-layer things that can be

00:22:12,110 --> 00:22:16,010
added outside of the bane community so

00:22:13,460 --> 00:22:19,550
that that allows for a very widely

00:22:16,010 --> 00:22:21,260
diverse set of functionality and it's

00:22:19,550 --> 00:22:23,680
extremely customizable and expandable

00:22:21,260 --> 00:22:25,670
and one of the nice things about it is

00:22:23,680 --> 00:22:27,230
generally speaking they try to avoid

00:22:25,670 --> 00:22:29,600
putting too many requirements on your

00:22:27,230 --> 00:22:31,330
your host system so where possible the

00:22:29,600 --> 00:22:33,200
octo project will actually build

00:22:31,330 --> 00:22:35,030
appropriate versions of the native

00:22:33,200 --> 00:22:37,580
tooling that are required for for that

00:22:35,030 --> 00:22:39,230
build which is a which allows it to

00:22:37,580 --> 00:22:42,230
easily be supported on a wider variety

00:22:39,230 --> 00:22:43,790
of host operating systems a couple of

00:22:42,230 --> 00:22:45,500
downsides it does in general have a

00:22:43,790 --> 00:22:47,960
steep learning curve it's easy to get

00:22:45,500 --> 00:22:49,010
started quickly but to be functional and

00:22:47,960 --> 00:22:50,510
understand all the ins and outs

00:22:49,010 --> 00:22:52,700
especially when you're adding additional

00:22:50,510 --> 00:22:54,650
layers it can take a while to get used

00:22:52,700 --> 00:22:56,690
to that it's an unfamiliar environment

00:22:54,650 --> 00:22:57,980
and to not embed the developers and

00:22:56,690 --> 00:23:00,800
that's really true of all these systems

00:22:57,980 --> 00:23:02,630
we're discussing today and generally

00:23:00,800 --> 00:23:04,130
speaking it's pretty resource intensive

00:23:02,630 --> 00:23:05,870
especially the first time you try to do

00:23:04,130 --> 00:23:08,210
a build for a new system if you're

00:23:05,870 --> 00:23:10,580
putting a lot of target code on the

00:23:08,210 --> 00:23:13,280
target the initial build times can be

00:23:10,580 --> 00:23:15,640
pretty significant and the amount of

00:23:13,280 --> 00:23:18,680
disk can be pretty significant as well

00:23:15,640 --> 00:23:19,880
the mitigation for that of course is

00:23:18,680 --> 00:23:21,890
that shared state mechanism that I

00:23:19,880 --> 00:23:24,290
mentioned and if you have a central

00:23:21,890 --> 00:23:26,540
build system of course you can actually

00:23:24,290 --> 00:23:29,540
pull from that shared state from your

00:23:26,540 --> 00:23:30,920
sin from your CI system to any of your

00:23:29,540 --> 00:23:32,600
developer build systems so there's a lot

00:23:30,920 --> 00:23:36,260
of mitigations to this but those are

00:23:32,600 --> 00:23:38,120
some things to be aware of so moving on

00:23:36,260 --> 00:23:40,040
build route is probably the other the

00:23:38,120 --> 00:23:42,050
next biggest one that you'll see around

00:23:40,040 --> 00:23:43,310
here I know they fact they got stickers

00:23:42,050 --> 00:23:44,660
up here I guess somebody left it here

00:23:43,310 --> 00:23:46,910
when they were giving a talk the other

00:23:44,660 --> 00:23:48,590
day you see the quote across the top

00:23:46,910 --> 00:23:51,350
again that was pulled directly from

00:23:48,590 --> 00:23:54,710
their website the primary output of

00:23:51,350 --> 00:23:57,020
build route is boot images they don't

00:23:54,710 --> 00:23:58,580
generally support the RPM style package

00:23:57,020 --> 00:24:00,950
management although things are changing

00:23:58,580 --> 00:24:03,560
all the time so it's possible that has

00:24:00,950 --> 00:24:05,120
changed since the last time I dug deeply

00:24:03,560 --> 00:24:06,860
into it I know I've already received at

00:24:05,120 --> 00:24:09,200
least one email correcting a couple

00:24:06,860 --> 00:24:11,860
things I had in here earlier so it's

00:24:09,200 --> 00:24:15,530
because it doesn't generally consider

00:24:11,860 --> 00:24:16,970
packages outside of the boot images that

00:24:15,530 --> 00:24:18,620
you're that you're building it's

00:24:16,970 --> 00:24:20,900
sometimes referred to as a firmware

00:24:18,620 --> 00:24:23,170
generator just to kind of give you an

00:24:20,900 --> 00:24:24,820
idea of how it's used as opposed to

00:24:23,170 --> 00:24:27,250
thing like ACTA which is providing a

00:24:24,820 --> 00:24:29,980
little bit more functionality at the the

00:24:27,250 --> 00:24:31,120
package level again similar Yocto it

00:24:29,980 --> 00:24:33,100
builds all the components from source

00:24:31,120 --> 00:24:36,250
and the focus really is on simplicity

00:24:33,100 --> 00:24:37,840
and I'm new to build root but I was

00:24:36,250 --> 00:24:40,540
actually able to get systems up and

00:24:37,840 --> 00:24:43,090
running pretty simply so the focus on

00:24:40,540 --> 00:24:45,520
simplicity really is it is it advantage

00:24:43,090 --> 00:24:47,440
if in terms of the speed of getting

00:24:45,520 --> 00:24:49,390
started the main products of course are

00:24:47,440 --> 00:24:51,130
the root file system image and the

00:24:49,390 --> 00:24:52,570
kernel boot loader and tool chain very

00:24:51,130 --> 00:24:54,880
similar to octo you're gonna have very

00:24:52,570 --> 00:24:56,200
you know it's trying to do a lot of the

00:24:54,880 --> 00:24:58,090
same things so obviously the the

00:24:56,200 --> 00:24:59,140
products that that you're going to get

00:24:58,090 --> 00:25:02,740
out of the build system are gonna be

00:24:59,140 --> 00:25:05,770
very similar some of the details it uses

00:25:02,740 --> 00:25:07,300
the make files and K config obviously

00:25:05,770 --> 00:25:09,760
that's very widely supported well-known

00:25:07,300 --> 00:25:13,540
if you've ever done any work in busybox

00:25:09,760 --> 00:25:16,210
or in you boot or in the kernel you've

00:25:13,540 --> 00:25:20,230
seen screenshots like the one on the on

00:25:16,210 --> 00:25:22,000
the slide here by default they they the

00:25:20,230 --> 00:25:24,220
default images are intended to be very

00:25:22,000 --> 00:25:25,900
small where possible configuration

00:25:24,220 --> 00:25:27,460
options are disabled in the in the

00:25:25,900 --> 00:25:28,750
default configuration so if you just

00:25:27,460 --> 00:25:31,330
come in and run one of the standard def

00:25:28,750 --> 00:25:32,710
configs most of the most of the

00:25:31,330 --> 00:25:34,660
configuration options for the various

00:25:32,710 --> 00:25:36,490
packages that are built as part of the

00:25:34,660 --> 00:25:38,830
build will have been disabled by default

00:25:36,490 --> 00:25:41,230
they do have a br two external mechanism

00:25:38,830 --> 00:25:43,690
and that's uh it's similar in

00:25:41,230 --> 00:25:45,790
functionality to the layering mechanism

00:25:43,690 --> 00:25:48,160
in yocto it's a way for you to store

00:25:45,790 --> 00:25:51,010
your local editions outside of the main

00:25:48,160 --> 00:25:52,510
build root source tree however unless

00:25:51,010 --> 00:25:55,630
things have changed it's really one

00:25:52,510 --> 00:25:56,950
place to store it so III can't store a

00:25:55,630 --> 00:25:58,780
layer and then have someone else store a

00:25:56,950 --> 00:26:00,730
layer and be able to pull them all in

00:25:58,780 --> 00:26:02,470
it's there's the build route main

00:26:00,730 --> 00:26:04,060
sources and then there's the br to

00:26:02,470 --> 00:26:07,750
external sources which would be my local

00:26:04,060 --> 00:26:09,580
configurations and customizations as I

00:26:07,750 --> 00:26:11,350
mentioned in this case recipes are

00:26:09,580 --> 00:26:14,500
typically defined in the cake config and

00:26:11,350 --> 00:26:16,420
make syntax so it's fairly familiar for

00:26:14,500 --> 00:26:18,190
I'm sure a lot of us and there's lots of

00:26:16,420 --> 00:26:20,290
documentation out of it they did

00:26:18,190 --> 00:26:22,960
recently add an SDK mechanism similar to

00:26:20,290 --> 00:26:24,490
what the Yocto project has where the

00:26:22,960 --> 00:26:25,990
application and system developers are

00:26:24,490 --> 00:26:28,930
able to work in different environments

00:26:25,990 --> 00:26:31,630
that are more appropriate to them and a

00:26:28,930 --> 00:26:34,000
previous also LC talk estimated about

00:26:31,630 --> 00:26:36,510
1800 and software packages again that

00:26:34,000 --> 00:26:38,430
number is probably low now

00:26:36,510 --> 00:26:39,900
since there are things that are

00:26:38,430 --> 00:26:41,580
generally not included like the on

00:26:39,900 --> 00:26:43,230
target tool change the number total

00:26:41,580 --> 00:26:45,150
number of packages that are available

00:26:43,230 --> 00:26:46,740
for building or is gonna be typically

00:26:45,150 --> 00:26:50,850
lower than you'll see in the Yocto

00:26:46,740 --> 00:26:53,910
project so similar to the slide I had

00:26:50,850 --> 00:26:56,250
for Yocto here's our here's our getting

00:26:53,910 --> 00:26:58,650
started for build route it's just a

00:26:56,250 --> 00:27:01,860
couple of commands this pulls the latest

00:26:58,650 --> 00:27:06,480
version the 2018 o2 version directly out

00:27:01,860 --> 00:27:10,050
of their get tree runs a a an emulated

00:27:06,480 --> 00:27:11,430
def config and and launches it in this

00:27:10,050 --> 00:27:13,320
case it actually launches two windows

00:27:11,430 --> 00:27:15,480
one is the frame bar for window and one

00:27:13,320 --> 00:27:17,070
is just the serial console window but in

00:27:15,480 --> 00:27:19,680
a similar number of commands you can get

00:27:17,070 --> 00:27:21,660
an emulated platform up and running that

00:27:19,680 --> 00:27:25,560
that will let you get started and play

00:27:21,660 --> 00:27:28,530
play a little bit with Bill droop so

00:27:25,560 --> 00:27:30,450
summary and I put the first bullet in

00:27:28,530 --> 00:27:32,190
both the pros and cons there seems to be

00:27:30,450 --> 00:27:35,010
less corporate involvement with will

00:27:32,190 --> 00:27:38,040
droop then with Yocto that may just be

00:27:35,010 --> 00:27:40,500
the bias of the the users and people

00:27:38,040 --> 00:27:43,080
that I talk with but that can either be

00:27:40,500 --> 00:27:44,460
a pro or a con depending on on your

00:27:43,080 --> 00:27:45,900
point of view so I've listed it in both

00:27:44,460 --> 00:27:48,120
places and I'll let you pick which side

00:27:45,900 --> 00:27:50,310
makes sense for the way you feel about

00:27:48,120 --> 00:27:51,890
things it is very quick to get started

00:27:50,310 --> 00:27:54,780
that's the the one of the primary

00:27:51,890 --> 00:27:57,720
primary design goals and it's easy to

00:27:54,780 --> 00:27:59,580
understand with it does have an active

00:27:57,720 --> 00:28:01,200
development community and and fairly

00:27:59,580 --> 00:28:03,440
broad architecture and board support and

00:28:01,200 --> 00:28:05,820
I know they're expanding all the time

00:28:03,440 --> 00:28:07,590
configuration changes if you're trying

00:28:05,820 --> 00:28:09,240
to switch from one board to another

00:28:07,590 --> 00:28:11,760
generally that's gonna require a full

00:28:09,240 --> 00:28:16,290
rebuild they don't have quite the number

00:28:11,760 --> 00:28:18,030
of places for storing configuration

00:28:16,290 --> 00:28:20,640
information that they do in Yocto so

00:28:18,030 --> 00:28:22,770
typically if you have for instance two

00:28:20,640 --> 00:28:24,570
but you want to run the same basic image

00:28:22,770 --> 00:28:26,460
on two different platforms there's some

00:28:24,570 --> 00:28:27,840
manual syncing to make sure you get the

00:28:26,460 --> 00:28:30,240
same def config between those two

00:28:27,840 --> 00:28:31,950
platforms so with Yocto it's it's

00:28:30,240 --> 00:28:33,900
separated out a little bit more you can

00:28:31,950 --> 00:28:35,580
kind of pull from different areas with

00:28:33,900 --> 00:28:37,710
build route it's it's a little bit more

00:28:35,580 --> 00:28:40,020
manual if you are building multiple

00:28:37,710 --> 00:28:42,780
platforms and want the same the same the

00:28:40,020 --> 00:28:44,220
same basic configuration there doesn't

00:28:42,780 --> 00:28:45,930
appear to be any reusable shared state

00:28:44,220 --> 00:28:48,480
by default but there there are some

00:28:45,930 --> 00:28:49,510
settings in the k config that seemed to

00:28:48,480 --> 00:28:51,400
enable that I haven't

00:28:49,510 --> 00:28:52,480
chance to play with it I see some faces

00:28:51,400 --> 00:28:54,430
around here that probably know a lot

00:28:52,480 --> 00:28:56,830
more more about that than I do and I can

00:28:54,430 --> 00:29:02,280
certainly speak to that if there are

00:28:56,830 --> 00:29:04,780
questions about it so moving on open wrt

00:29:02,280 --> 00:29:06,550
you see the quote at the top from them

00:29:04,780 --> 00:29:08,530
it's a fully writable file system with

00:29:06,550 --> 00:29:10,800
package management if you're not

00:29:08,530 --> 00:29:13,630
familiar with it it basically started as

00:29:10,800 --> 00:29:17,950
replacement firmware for the venerable

00:29:13,630 --> 00:29:19,510
Linksys wrt54g router that that router

00:29:17,950 --> 00:29:22,300
has been around for I don't know how

00:29:19,510 --> 00:29:24,070
many years now and is no longer being

00:29:22,300 --> 00:29:26,410
maintained obviously by the manufacturer

00:29:24,070 --> 00:29:28,300
people wanted to continue using it so

00:29:26,410 --> 00:29:31,240
they started developing their own custom

00:29:28,300 --> 00:29:32,950
firmware its primary focus of this

00:29:31,240 --> 00:29:35,980
disease of this system it is on

00:29:32,950 --> 00:29:37,810
networking the the number of devices

00:29:35,980 --> 00:29:39,580
that they have custom firmware for is

00:29:37,810 --> 00:29:40,870
pretty astounding I didn't realize there

00:29:39,580 --> 00:29:42,130
were that many consumer networking

00:29:40,870 --> 00:29:43,420
devices out there but there's quite a

00:29:42,130 --> 00:29:48,640
few if you scroll through their list of

00:29:43,420 --> 00:29:51,190
devices unlike build root and Yocto open

00:29:48,640 --> 00:29:52,810
wrt seems to be to be primarily focused

00:29:51,190 --> 00:29:54,760
on the binary distribution side they do

00:29:52,810 --> 00:29:57,670
have a build system but it's very much

00:29:54,760 --> 00:29:59,740
if you go to a be open wrt org the focus

00:29:57,670 --> 00:30:01,150
there is really on downloading the

00:29:59,740 --> 00:30:02,530
binaries and deploying them to your

00:30:01,150 --> 00:30:05,880
system so they provide pre-built

00:30:02,530 --> 00:30:08,440
binaries for a number of systems and and

00:30:05,880 --> 00:30:11,020
expandability is provided in open wrt

00:30:08,440 --> 00:30:12,490
through on device package management

00:30:11,020 --> 00:30:15,760
very similar to what you would see in a

00:30:12,490 --> 00:30:18,040
desktop type distribution the products

00:30:15,760 --> 00:30:20,260
of an open wrt system are the firmware

00:30:18,040 --> 00:30:22,030
image typically in a device specific

00:30:20,260 --> 00:30:24,190
format I have seen some of the maker

00:30:22,030 --> 00:30:26,830
boards coming out where the default

00:30:24,190 --> 00:30:29,380
operating system for them is is an open

00:30:26,830 --> 00:30:32,860
wrt so I know they're they're definitely

00:30:29,380 --> 00:30:35,440
adding functionality but also generally

00:30:32,860 --> 00:30:36,910
speaking for a number of the consumer

00:30:35,440 --> 00:30:39,580
boards that they provide images for

00:30:36,910 --> 00:30:40,660
there are package repositories available

00:30:39,580 --> 00:30:43,120
that you could actually download

00:30:40,660 --> 00:30:45,970
directly to over the internet so if you

00:30:43,120 --> 00:30:47,560
install open wrt for instance on an old

00:30:45,970 --> 00:30:49,720
router you you happen to have at home

00:30:47,560 --> 00:30:50,920
the package repositories are there if

00:30:49,720 --> 00:30:53,440
you want to install something like open

00:30:50,920 --> 00:30:57,760
VPN or some of the other packages that

00:30:53,440 --> 00:30:58,660
are not installed by default so as I

00:30:57,760 --> 00:31:00,640
mentioned there is a build system

00:30:58,660 --> 00:31:03,100
unfortunately I didn't get a whole lot

00:31:00,640 --> 00:31:04,960
of time to play with it this is a

00:31:03,100 --> 00:31:07,120
one of the areas where my content is a

00:31:04,960 --> 00:31:08,799
bit thin here so if anybody has any

00:31:07,120 --> 00:31:10,600
experience with it I'll be over at my

00:31:08,799 --> 00:31:12,130
booth all day today and tomorrow I'd

00:31:10,600 --> 00:31:14,019
love to pick your brain about it

00:31:12,130 --> 00:31:15,970
I know it's consists of make files and

00:31:14,019 --> 00:31:18,309
patches it feels very similar to build

00:31:15,970 --> 00:31:19,899
root in that in that respect it does

00:31:18,309 --> 00:31:22,360
obviously generate a cross tool chain

00:31:19,899 --> 00:31:26,110
the root file system image uses cake and

00:31:22,360 --> 00:31:28,630
fig there's a link for it there as I

00:31:26,110 --> 00:31:30,429
said it does vary its goal is to do very

00:31:28,630 --> 00:31:32,799
similar work to what both build root and

00:31:30,429 --> 00:31:35,080
Yocto do so I would imagine it's going

00:31:32,799 --> 00:31:36,220
to ultimately look very very familiar to

00:31:35,080 --> 00:31:41,500
anyone that's familiar with any of the

00:31:36,220 --> 00:31:43,990
other systems so just a summary on open

00:31:41,500 --> 00:31:45,370
to BRT it is a it is a great choice as a

00:31:43,990 --> 00:31:47,559
replacement firmware if you happen to

00:31:45,370 --> 00:31:48,700
have a consumer device at home that may

00:31:47,559 --> 00:31:50,769
no longer be supported by the

00:31:48,700 --> 00:31:52,809
manufacturer but you don't want to

00:31:50,769 --> 00:31:54,340
necessarily put it in the garbage go

00:31:52,809 --> 00:31:56,110
check out their website they may have a

00:31:54,340 --> 00:31:58,539
pre-built binary image that is

00:31:56,110 --> 00:32:00,879
maintained and as quite a bit newer code

00:31:58,539 --> 00:32:03,039
than than what you have on the device

00:32:00,879 --> 00:32:04,480
from the manufacturer it is a good

00:32:03,039 --> 00:32:07,529
choice for any kind of router networking

00:32:04,480 --> 00:32:09,970
device I have had in my role

00:32:07,529 --> 00:32:11,980
customer-facing now we we do have folks

00:32:09,970 --> 00:32:14,200
ask about open wrt typically for router

00:32:11,980 --> 00:32:15,879
devices and that kind of thing and if

00:32:14,200 --> 00:32:17,529
your application does require package

00:32:15,879 --> 00:32:20,110
based updates this is a potentially a

00:32:17,529 --> 00:32:22,029
good choice for you as well some

00:32:20,110 --> 00:32:23,409
potential cons it seems less affect

00:32:22,029 --> 00:32:25,000
flexible for general embedded

00:32:23,409 --> 00:32:27,639
applications although I'm willing to be

00:32:25,000 --> 00:32:29,230
convinced otherwise on that as I said

00:32:27,639 --> 00:32:32,500
this is the one that I'm just starting

00:32:29,230 --> 00:32:34,899
to dig into and it seems to be have a

00:32:32,500 --> 00:32:37,210
bit more policy imposed by the open wrt

00:32:34,899 --> 00:32:39,970
design they don't make it doesn't seem

00:32:37,210 --> 00:32:41,740
that you can easily customize it as much

00:32:39,970 --> 00:32:45,190
as you can with with the other options

00:32:41,740 --> 00:32:46,659
we've discussed and if you are using

00:32:45,190 --> 00:32:48,490
package based updates with a large

00:32:46,659 --> 00:32:50,139
device fleet that can that can lead to

00:32:48,490 --> 00:32:52,149
problems down the road just do 2 version

00:32:50,139 --> 00:32:54,340
version explosion if you don't know

00:32:52,149 --> 00:32:56,350
exactly what's on say you know you have

00:32:54,340 --> 00:32:57,669
a fleet of 10 to 15,000 devices it can

00:32:56,350 --> 00:32:59,950
be a little bit difficult if they're all

00:32:57,669 --> 00:33:02,110
updating at the package level on their

00:32:59,950 --> 00:33:03,820
own schedule so package based updates

00:33:02,110 --> 00:33:06,009
you might want to rethink that depending

00:33:03,820 --> 00:33:07,809
on your use case but again that's going

00:33:06,009 --> 00:33:13,539
to be very specific to your particular

00:33:07,809 --> 00:33:17,020
application so moving on as I mentioned

00:33:13,539 --> 00:33:19,600
the desktop distributions have seen

00:33:17,020 --> 00:33:22,030
and uh more use in the desktop space

00:33:19,600 --> 00:33:23,950
lately so you know why can't I use my

00:33:22,030 --> 00:33:25,780
favorite distro in the embedded space

00:33:23,950 --> 00:33:28,120
and the answer really is that you can

00:33:25,780 --> 00:33:31,450
with some caveats

00:33:28,120 --> 00:33:34,200
if you've used a Raspberry Pi they come

00:33:31,450 --> 00:33:36,700
with a debian variant on it by default

00:33:34,200 --> 00:33:38,740
the the BeagleBone comes with I believe

00:33:36,700 --> 00:33:42,970
it's Debian by default so certainly

00:33:38,740 --> 00:33:44,620
these packages are out there the the

00:33:42,970 --> 00:33:46,300
basic workflow is you take the Installer

00:33:44,620 --> 00:33:49,630
from the whatever favorite nister you

00:33:46,300 --> 00:33:51,250
have and and you install it on an SD

00:33:49,630 --> 00:33:52,990
card and you pop the SD card in the

00:33:51,250 --> 00:33:55,510
device and if you need to add additional

00:33:52,990 --> 00:33:57,160
packages you use on target package

00:33:55,510 --> 00:34:00,370
management to install the packages that

00:33:57,160 --> 00:34:02,500
kind of thing it does impose more policy

00:34:00,370 --> 00:34:05,020
than some of the build systems we've

00:34:02,500 --> 00:34:06,880
discussed in potentially significant

00:34:05,020 --> 00:34:08,530
amounts of policy each of the

00:34:06,880 --> 00:34:09,669
distributions has their own set of

00:34:08,530 --> 00:34:12,060
defaults that may or may not be

00:34:09,669 --> 00:34:15,130
applicable for your particular use case

00:34:12,060 --> 00:34:17,409
and you're dependent on the vendor

00:34:15,130 --> 00:34:18,909
distro generally for upgrades and the

00:34:17,409 --> 00:34:20,230
decisions they make as far as what the

00:34:18,909 --> 00:34:22,659
defaults are gonna be whether they use

00:34:20,230 --> 00:34:25,000
in Wayland or xorg or system D or sis V

00:34:22,659 --> 00:34:27,130
in it so that's definitely something

00:34:25,000 --> 00:34:28,770
that something to consider if you're

00:34:27,130 --> 00:34:32,260
considering this approach

00:34:28,770 --> 00:34:33,399
most of these device desktop distros

00:34:32,260 --> 00:34:35,080
they're not targeted to embedded

00:34:33,399 --> 00:34:37,090
applications so just in general they may

00:34:35,080 --> 00:34:39,970
not be the best choice they certainly

00:34:37,090 --> 00:34:41,260
are easy to get started with but they're

00:34:39,970 --> 00:34:43,330
not very cross development friendly

00:34:41,260 --> 00:34:44,830
typically I've seen a lot of people

00:34:43,330 --> 00:34:48,610
trying to run the tool chains actually

00:34:44,830 --> 00:34:49,929
on the devices and while that works in

00:34:48,610 --> 00:34:51,280
the short run I think in the long run it

00:34:49,929 --> 00:34:52,659
tends to be pretty painful to actually

00:34:51,280 --> 00:34:57,240
do on target development for some of

00:34:52,659 --> 00:35:00,100
these smaller device device systems so

00:34:57,240 --> 00:35:02,080
just some to summarize that there are a

00:35:00,100 --> 00:35:04,930
lot of choices to start with you saw the

00:35:02,080 --> 00:35:07,780
all the images I had on the original

00:35:04,930 --> 00:35:10,690
slide there's Debian Ubuntu you know

00:35:07,780 --> 00:35:13,930
raspbian arch there's a there's a plenty

00:35:10,690 --> 00:35:15,130
of choices your developers are likely

00:35:13,930 --> 00:35:16,870
already familiar with many of these

00:35:15,130 --> 00:35:19,150
systems so that that definitely helps

00:35:16,870 --> 00:35:21,550
you get up and steps up started quickly

00:35:19,150 --> 00:35:23,080
with that typically there's a large

00:35:21,550 --> 00:35:26,890
selection of pre-built packages for

00:35:23,080 --> 00:35:28,960
these things and it's quick and easy to

00:35:26,890 --> 00:35:30,640
get started and if you need on target

00:35:28,960 --> 00:35:33,880
development that's generally possible

00:35:30,640 --> 00:35:36,760
with these systems the the decisions by

00:35:33,880 --> 00:35:38,079
the vendor may affect you negatively if

00:35:36,760 --> 00:35:40,119
they make a decision that you don't like

00:35:38,079 --> 00:35:42,760
usually they'll make give you some means

00:35:40,119 --> 00:35:45,970
to undo that but it may or may not be

00:35:42,760 --> 00:35:47,339
very easy to do so reproducibility is

00:35:45,970 --> 00:35:49,630
complicated in this environment

00:35:47,339 --> 00:35:51,760
typically you know if you're installing

00:35:49,630 --> 00:35:54,099
packages by hand on the target it's hard

00:35:51,760 --> 00:35:57,099
to come up with a means to produce that

00:35:54,099 --> 00:35:59,140
image from scratch on target images are

00:35:57,099 --> 00:36:01,380
going to be slow and then off target

00:35:59,140 --> 00:36:03,700
builds may be difficult or impossible

00:36:01,380 --> 00:36:06,099
especially in the the arm space getting

00:36:03,700 --> 00:36:07,720
a cross tool chain that can build for

00:36:06,099 --> 00:36:12,309
the particular variant you may happen to

00:36:07,720 --> 00:36:14,440
have can be difficult so with that I'll

00:36:12,309 --> 00:36:15,910
move into just a couple bits of other

00:36:14,440 --> 00:36:19,269
criteria that you might consider when

00:36:15,910 --> 00:36:21,760
you're deciding on a system for putting

00:36:19,269 --> 00:36:23,680
your embedded Linux system together if

00:36:21,760 --> 00:36:26,140
you have already chosen your hardware

00:36:23,680 --> 00:36:28,599
and the hardware vendor provides support

00:36:26,140 --> 00:36:30,519
for one or more of the above systems

00:36:28,599 --> 00:36:32,890
that made that may drive your decision

00:36:30,519 --> 00:36:35,049
for you frankly that's I think probably

00:36:32,890 --> 00:36:37,569
the case for a lot of systems is you

00:36:35,049 --> 00:36:41,200
just the the vendor provides it and it's

00:36:37,569 --> 00:36:43,539
the the path of least resistance to to

00:36:41,200 --> 00:36:44,950
start with that training and

00:36:43,539 --> 00:36:47,740
documentation depending on how familiar

00:36:44,950 --> 00:36:49,299
your developers may be all all the

00:36:47,740 --> 00:36:51,880
systems we discuss today there's lots of

00:36:49,299 --> 00:36:55,059
documentation some of them have more or

00:36:51,880 --> 00:36:56,470
less training available and if you do

00:36:55,059 --> 00:36:59,230
want to use a commercial vendor to ride

00:36:56,470 --> 00:37:01,569
your base support that that can also

00:36:59,230 --> 00:37:03,759
help drive your decision and frankly

00:37:01,569 --> 00:37:05,230
whatever developer experience or

00:37:03,759 --> 00:37:06,910
whatever experience your developers may

00:37:05,230 --> 00:37:11,799
have and preferences they may have for

00:37:06,910 --> 00:37:13,299
for build systems to use so just real

00:37:11,799 --> 00:37:14,890
quick I'll mention just a couple of

00:37:13,299 --> 00:37:17,170
related tools that you may come across

00:37:14,890 --> 00:37:19,869
in your research if you're new to the

00:37:17,170 --> 00:37:21,759
space you see Linux is a port of Linux

00:37:19,869 --> 00:37:23,380
two systems without a memory management

00:37:21,759 --> 00:37:25,710
unit at least that's the way it started

00:37:23,380 --> 00:37:27,579
I haven't kept up with it over the years

00:37:25,710 --> 00:37:29,500
according to their website they're still

00:37:27,579 --> 00:37:32,170
back at kernel to 6 but I haven't dug in

00:37:29,500 --> 00:37:33,940
it too deeply to know but they do

00:37:32,170 --> 00:37:35,559
provide user applications libraries and

00:37:33,940 --> 00:37:37,029
tool chains so if you're just getting

00:37:35,559 --> 00:37:39,069
started in the space that may be

00:37:37,029 --> 00:37:43,060
something you come across and also cross

00:37:39,069 --> 00:37:44,619
to linji which is a k' config based

00:37:43,060 --> 00:37:47,470
configuration utility for actually

00:37:44,619 --> 00:37:49,720
generating cross tool Tunes so this the

00:37:47,470 --> 00:37:51,430
this is actually useful if you need to

00:37:49,720 --> 00:37:53,440
generate tool change for bare metal if

00:37:51,430 --> 00:37:56,079
you need to generate tool chains that go

00:37:53,440 --> 00:37:58,300
to various artists is in embedded Linux

00:37:56,079 --> 00:38:00,310
so that that can be handy as well if you

00:37:58,300 --> 00:38:02,950
do have say a Debian and you want to get

00:38:00,310 --> 00:38:07,630
across tool chain built up from source

00:38:02,950 --> 00:38:08,800
for it so and and I just wanted to

00:38:07,630 --> 00:38:12,010
mention a couple others that I came

00:38:08,800 --> 00:38:14,589
across I've got the links here I know

00:38:12,010 --> 00:38:17,410
nothing about them other than what I've

00:38:14,589 --> 00:38:19,180
seen you know I've used Android on a

00:38:17,410 --> 00:38:20,710
phone obviously I've not had any

00:38:19,180 --> 00:38:22,900
experience with it in the embedded space

00:38:20,710 --> 00:38:26,079
but it's obviously becoming more common

00:38:22,900 --> 00:38:29,220
there LBE and he saw as far as I know

00:38:26,079 --> 00:38:31,480
they're both systems around the Debian

00:38:29,220 --> 00:38:33,849
pre-built packages to allow you to

00:38:31,480 --> 00:38:35,500
configure a custom system without having

00:38:33,849 --> 00:38:37,839
to build everything from source so

00:38:35,500 --> 00:38:39,490
basically if I'm understanding them

00:38:37,839 --> 00:38:41,290
correctly they actually go pull the

00:38:39,490 --> 00:38:43,810
binary packages from the Debian package

00:38:41,290 --> 00:38:45,609
repositories and and kind of repackage

00:38:43,810 --> 00:38:48,220
them into the root filesystem image so

00:38:45,609 --> 00:38:50,140
that's those are some other options

00:38:48,220 --> 00:38:51,369
there's lots of things going on in this

00:38:50,140 --> 00:38:54,220
space things are changing all the time

00:38:51,369 --> 00:38:56,500
so definitely you know keep your eye out

00:38:54,220 --> 00:38:58,720
things will change I'd like to

00:38:56,500 --> 00:39:00,520
eventually add a little bit of more

00:38:58,720 --> 00:39:02,349
content on some of those other options

00:39:00,520 --> 00:39:04,720
to this talk and you know maybe at

00:39:02,349 --> 00:39:06,220
future future conferences I'll be able

00:39:04,720 --> 00:39:09,040
to give a little bit more details on

00:39:06,220 --> 00:39:11,020
some of those other systems so I just

00:39:09,040 --> 00:39:13,089
want to look at just a few minutes left

00:39:11,020 --> 00:39:14,829
I just want to kind of these are some

00:39:13,089 --> 00:39:16,750
use cases that I put together these are

00:39:14,829 --> 00:39:18,910
my thoughts your mileage may vary if

00:39:16,750 --> 00:39:20,109
you're a beginner hobbyist maker the

00:39:18,910 --> 00:39:21,579
commercial day and you're using

00:39:20,109 --> 00:39:23,800
something like a Raspberry Pi that you

00:39:21,579 --> 00:39:26,230
can get easily you know something like a

00:39:23,800 --> 00:39:28,060
desktop distro might be a good choice if

00:39:26,230 --> 00:39:30,700
you look at some of the some of the

00:39:28,060 --> 00:39:33,130
maker blogs out there most of them start

00:39:30,700 --> 00:39:34,930
with Debian and work from there if

00:39:33,130 --> 00:39:37,869
you're in commercial use with a single

00:39:34,930 --> 00:39:39,730
configuration build route might be is a

00:39:37,869 --> 00:39:41,740
good option if you're in a commercial

00:39:39,730 --> 00:39:43,839
use and multiple configurations Yocto

00:39:41,740 --> 00:39:44,980
project might be a better choice just

00:39:43,839 --> 00:39:47,349
because of the way things are structured

00:39:44,980 --> 00:39:49,450
and allow you to easily layer things on

00:39:47,349 --> 00:39:52,390
top of each other again there's so many

00:39:49,450 --> 00:39:54,250
decisions that go into anyone anyone

00:39:52,390 --> 00:39:55,630
application I don't want to presume to

00:39:54,250 --> 00:39:56,410
tell you exactly which one is right

00:39:55,630 --> 00:39:58,330
there's no right

00:39:56,410 --> 00:40:00,160
for everybody these are just some

00:39:58,330 --> 00:40:01,840
general ideas that I threw together and

00:40:00,160 --> 00:40:03,040
I'll kind of leave this slide up there

00:40:01,840 --> 00:40:07,390
and kind of open it up for questions

00:40:03,040 --> 00:40:08,950
this is again my my thoughts on the kind

00:40:07,390 --> 00:40:10,780
of the matrix of things you might want

00:40:08,950 --> 00:40:13,240
to consider as you move forward with

00:40:10,780 --> 00:40:15,010
your system design so with that I think

00:40:13,240 --> 00:40:19,110
we've got about 10 minutes for questions

00:40:15,010 --> 00:40:19,110
so I will open the floor yes

00:40:39,910 --> 00:40:44,380
okay so the question is you know a lot

00:40:42,670 --> 00:40:46,720
of these commercial boards today come

00:40:44,380 --> 00:40:48,940
with ready-made Yocto support provided

00:40:46,720 --> 00:40:51,970
by the vendor typically and is there any

00:40:48,940 --> 00:40:53,619
easy way to import that information into

00:40:51,970 --> 00:40:56,410
build route is that basically your

00:40:53,619 --> 00:40:58,210
question not that I'm aware of but that

00:40:56,410 --> 00:41:00,819
would certainly be nice I know the

00:40:58,210 --> 00:41:02,140
recipes are very different so there

00:41:00,819 --> 00:41:04,089
there may be some tools that can help

00:41:02,140 --> 00:41:06,160
with that but I doubt there's any you

00:41:04,089 --> 00:41:08,230
know real explicit plug-and-play

00:41:06,160 --> 00:41:09,519
mechanism to just you know take the BSP

00:41:08,230 --> 00:41:13,650
out of yakou and drop it in to build

00:41:09,519 --> 00:41:13,650
group yes

00:41:27,170 --> 00:41:31,890
yes so the question is you know how does

00:41:30,240 --> 00:41:34,349
this plug into DevOps environments and

00:41:31,890 --> 00:41:35,880
is is this appropriate for your build

00:41:34,349 --> 00:41:39,810
systems and that kind of thing and it

00:41:35,880 --> 00:41:43,290
depends on obviously on your workflow at

00:41:39,810 --> 00:41:44,970
my current company we do you know our CI

00:41:43,290 --> 00:41:47,250
system uses Yocto builds because that's

00:41:44,970 --> 00:41:49,650
how we deploy our system by default it

00:41:47,250 --> 00:41:51,510
certainly can plug in easily into things

00:41:49,650 --> 00:41:54,090
like Jenkins and other other systems

00:41:51,510 --> 00:41:55,980
like that so and I believe there are

00:41:54,090 --> 00:41:57,570
actually extensions for Jenkins and

00:41:55,980 --> 00:41:59,099
various other CI systems to make it easy

00:41:57,570 --> 00:42:00,300
to do things like this I I haven't

00:41:59,099 --> 00:42:03,660
really spent a whole lot of time on that

00:42:00,300 --> 00:42:05,160
side but anything that allows you to you

00:42:03,660 --> 00:42:06,450
know run a shell script you can actually

00:42:05,160 --> 00:42:13,349
run any of these pretty much any of

00:42:06,450 --> 00:42:16,380
these build systems yes have I looked at

00:42:13,349 --> 00:42:18,180
Jen - no I have not I know you know on

00:42:16,380 --> 00:42:20,099
the desktop side Jen - is a it's

00:42:18,180 --> 00:42:22,619
basically a build from scratch desktop

00:42:20,099 --> 00:42:25,800
operating system right yeah I have not

00:42:22,619 --> 00:42:27,660
do they have the decent support for non

00:42:25,800 --> 00:42:32,190
x86 architectures and cross development

00:42:27,660 --> 00:42:34,050
that kind of thing okay great well I'll

00:42:32,190 --> 00:42:35,670
add it to the list that'll make this

00:42:34,050 --> 00:42:37,410
talk even longer and I know the the Susa

00:42:35,670 --> 00:42:39,900
guys are here in the fact that they

00:42:37,410 --> 00:42:41,580
supported arm was a was news to me so as

00:42:39,900 --> 00:42:45,109
I said this thing this is changing on a

00:42:41,580 --> 00:42:45,109
daily basis so yes

00:42:58,650 --> 00:43:04,150
okay so the question is how do you get

00:43:00,609 --> 00:43:05,829
more desktop style user land with

00:43:04,150 --> 00:43:07,420
something like a Yocto or a build root

00:43:05,829 --> 00:43:09,520
which is a build from source type kit

00:43:07,420 --> 00:43:11,230
well they all you know all those systems

00:43:09,520 --> 00:43:14,470
will have some level of user space

00:43:11,230 --> 00:43:16,240
applications and they can all import

00:43:14,470 --> 00:43:17,829
other applications you just have to take

00:43:16,240 --> 00:43:20,530
the time to write the recipes to do them

00:43:17,829 --> 00:43:23,260
I don't know how many people in the

00:43:20,530 --> 00:43:25,589
embedded space would want a full Ubuntu

00:43:23,260 --> 00:43:27,670
gnome interface on their target device

00:43:25,589 --> 00:43:28,780
there may be a layer for it out there

00:43:27,670 --> 00:43:30,579
already because there there there there

00:43:28,780 --> 00:43:32,410
is a lot of a lot of different layers

00:43:30,579 --> 00:43:33,550
out there that people have used so it

00:43:32,410 --> 00:43:39,960
wouldn't surprise me if something like

00:43:33,550 --> 00:43:39,960
that exists yes

00:43:49,130 --> 00:43:54,140
okay so the question is are there any

00:43:51,860 --> 00:43:56,090
web interfaces to the build system I'm

00:43:54,140 --> 00:43:57,560
not I haven't come across time so

00:43:56,090 --> 00:43:58,880
sending me in many years so I can't

00:43:57,560 --> 00:44:01,580
comment specifically on theirs I know

00:43:58,880 --> 00:44:03,350
the Yocto project has a a project called

00:44:01,580 --> 00:44:05,660
toaster which is basically a web

00:44:03,350 --> 00:44:08,780
front-end that's the only one I familiar

00:44:05,660 --> 00:44:10,220
with I launched it once as part of a

00:44:08,780 --> 00:44:11,750
previous job and that's as far as I've

00:44:10,220 --> 00:44:21,680
gotten with it but I know it's under

00:44:11,750 --> 00:44:23,450
active development so so the question is

00:44:21,680 --> 00:44:27,200
is there a preference on CPU

00:44:23,450 --> 00:44:29,600
architecture for in the individual build

00:44:27,200 --> 00:44:33,260
systems and certainly there is I think

00:44:29,600 --> 00:44:34,910
they all have a you know arm x86 mips

00:44:33,260 --> 00:44:37,340
are generally supported across the board

00:44:34,910 --> 00:44:39,890
I know build root has some other more

00:44:37,340 --> 00:44:41,270
esoteric architectures that may or you

00:44:39,890 --> 00:44:43,430
know that may or may not have Yocto

00:44:41,270 --> 00:44:45,140
support I don't know I tend to focus on

00:44:43,430 --> 00:44:47,090
the more common ones that are supported

00:44:45,140 --> 00:44:48,380
by everything so certainly that's one of

00:44:47,090 --> 00:44:50,180
the first criteria you'll need to look

00:44:48,380 --> 00:44:52,850
at if you have you know something that's

00:44:50,180 --> 00:44:54,290
not a commonly used platform you'll

00:44:52,850 --> 00:44:56,540
definitely want to investigate which

00:44:54,290 --> 00:45:01,540
systems may support your your chipset

00:44:56,540 --> 00:45:01,540
and your boards yes in the back

00:45:22,250 --> 00:45:26,940
sure so the point was I don't have a

00:45:24,930 --> 00:45:28,080
line in here for maintainability and the

00:45:26,940 --> 00:45:30,000
idea being if you're using something

00:45:28,080 --> 00:45:32,369
that has an upstream community like a

00:45:30,000 --> 00:45:35,400
bunt or Debian you get a lot of

00:45:32,369 --> 00:45:36,810
maintainability for free whether that's

00:45:35,400 --> 00:45:39,150
a good thing or a bad thing depends on

00:45:36,810 --> 00:45:40,740
on your point of view you know if the

00:45:39,150 --> 00:45:42,510
software changes out for money that may

00:45:40,740 --> 00:45:44,550
not be a good thing but certainly if

00:45:42,510 --> 00:45:48,119
you're pulling from a pre-built binary

00:45:44,550 --> 00:45:50,940
system like that then that does save

00:45:48,119 --> 00:45:57,030
certainly some effort and build time on

00:45:50,940 --> 00:46:02,010
the part of your developers all right

00:45:57,030 --> 00:46:03,460
anybody else all right very good thank

00:46:02,010 --> 00:46:06,260
you so much

00:46:03,460 --> 00:46:06,260

YouTube URL: https://www.youtube.com/watch?v=AYtivnqNB1A


