Title: System-in-Package Technology: Making it Easier to Build Your Own Linux Computer - Erik Welsh
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	System-in-Package Technology: Making it Easier to Build Your Own Linux Computer - Erik Welsh, Octavo Systems & Jason Kridner, BeagleBoard.org

Now even novices to hardware can build a Linux computer, right at the custom PCB level, enabling you to define your own peripherals, features and form-factor to meet your precise computing needs. Fit a computer into a tiny IoT container or put hundreds of computers on a single board with System-in-Package technology! SiP also eliminates huge chunks of software debug time and removes the need to customize the boot configuration or device tree to get started doing development with a working kernel. Erik Welsh will walk through how SiP integrates heterogeneous processors, memory, and power under one easy to layout package and how it lowers the HW, SW and boot complexity as well as time to production. BeagleBoard.org co-founder, Jason Kridner will join to show how this technology brings building a Linux PC within reach of the larger community of embedded systems designers. 

About Jason Kridner
Jason Kridner is a software architecture manager for embedded processors at Texas Instruments Incorporated (TI). A 25-year veteran of TI, Kridner is also a co-founder of the BeagleBoard.org Foundation, maintainer of open-source development tools such as BeagleBoard, -xM, -X15, BeagleBone, Black, BeagleBone Blue and the new PocketBeagle, a Linux-based open-source USB-key-fob computer. Kridner has previously engaged the open-source community at ELC, Collaboration Summit, Android Builders, OSCON, CES and others.

About Erik Welsh
Erik is the Applications and Systems Manager for Octavo Systems. With over 16 years of industry experience designing hardware and software systems, including 11 years at Texas Instruments, Erik has supported hundreds of developers building embedded systems. Programming on Linux ever since he was a student, Erik has contributed to open source projects including BeagleBoard.org and the WARP (Wireless Open-Access Research Platform) project. Erik has presented and taught workshops at industry conferences and universities.
Captions: 
	00:00:00,030 --> 00:00:05,940
alright well 3 o'clock I guess we'll go

00:00:03,449 --> 00:00:09,240
ahead and get started my name is Eric

00:00:05,940 --> 00:00:11,790
Welsh and I'm with octavo systems and my

00:00:09,240 --> 00:00:15,809
co-presenters is Jason cried nur from

00:00:11,790 --> 00:00:16,949
BeagleBoard org and Texas Instruments so

00:00:15,809 --> 00:00:19,500
today we're going to be talking about

00:00:16,949 --> 00:00:22,289
system and package technology making it

00:00:19,500 --> 00:00:25,619
easier to build your own Linux computer

00:00:22,289 --> 00:00:27,359
I really would enjoy for this session to

00:00:25,619 --> 00:00:29,670
be interactive so please feel free to

00:00:27,359 --> 00:00:31,920
ask questions as we go along we'll be

00:00:29,670 --> 00:00:33,660
talking about a lot of hardware stuff so

00:00:31,920 --> 00:00:35,460
I know that is not necessarily

00:00:33,660 --> 00:00:37,620
everyone's forte so if you if there's

00:00:35,460 --> 00:00:39,809
anything that you want to touch on from

00:00:37,620 --> 00:00:41,940
a heart getting it some more depth or

00:00:39,809 --> 00:00:44,489
anything like that please let us know

00:00:41,940 --> 00:00:46,020
and we have a microphone around there so

00:00:44,489 --> 00:00:48,629
that everyone can hear the questions and

00:00:46,020 --> 00:00:50,190
everything and if you want after the

00:00:48,629 --> 00:00:51,960
presentation feel free to come up and

00:00:50,190 --> 00:00:53,420
talk to us about any other questions you

00:00:51,960 --> 00:00:58,140
might have

00:00:53,420 --> 00:01:01,199
all right so starting off we have this

00:00:58,140 --> 00:01:03,840
single board computer revolution there's

00:01:01,199 --> 00:01:07,220
a proliferation of prototyping boards I

00:01:03,840 --> 00:01:09,180
mean we have raspberry pie eaglebones

00:01:07,220 --> 00:01:12,810
basically anything you ever want to do

00:01:09,180 --> 00:01:14,760
you can prototype now that you just ten

00:01:12,810 --> 00:01:16,650
years ago five years ago you weren't

00:01:14,760 --> 00:01:19,140
able to do there's all sorts of these

00:01:16,650 --> 00:01:21,780
new prototyping boards that are out

00:01:19,140 --> 00:01:24,119
there you have incredible development

00:01:21,780 --> 00:01:27,150
communities that are supporting new

00:01:24,119 --> 00:01:30,420
users and and you have it is huge

00:01:27,150 --> 00:01:32,759
collaboration amongst people coming up

00:01:30,420 --> 00:01:35,880
from school or just getting started with

00:01:32,759 --> 00:01:39,210
projects deciding that hey I need to I

00:01:35,880 --> 00:01:42,990
need to redo my my system and so now I

00:01:39,210 --> 00:01:46,290
have a platform that I can I can use in

00:01:42,990 --> 00:01:47,880
order to do that there's a huge exposure

00:01:46,290 --> 00:01:49,729
to Linux on all of these new single

00:01:47,880 --> 00:01:53,159
board computers so I mean you you have

00:01:49,729 --> 00:01:55,530
known proven Linux solution and from all

00:01:53,159 --> 00:01:58,710
this you you're able to prototype your

00:01:55,530 --> 00:02:00,840
systems much more quickly much more

00:01:58,710 --> 00:02:03,329
efficiently much more effectively than

00:02:00,840 --> 00:02:07,380
you ever have been and so that's that's

00:02:03,329 --> 00:02:10,800
the framework that we live in today now

00:02:07,380 --> 00:02:12,000
as a software person you need to be

00:02:10,800 --> 00:02:14,220
involved in

00:02:12,000 --> 00:02:16,620
hardware development decisions because

00:02:14,220 --> 00:02:18,690
if the hardware guy comes to you and

00:02:16,620 --> 00:02:21,120
says hey there's this really cool piece

00:02:18,690 --> 00:02:23,460
of component that you've got to use but

00:02:21,120 --> 00:02:26,340
there's no drivers for it I mean that

00:02:23,460 --> 00:02:28,110
that's that's a non-starter I mean it's

00:02:26,340 --> 00:02:30,330
it or unless that Hardware has to be

00:02:28,110 --> 00:02:33,360
really good for you to have to invest

00:02:30,330 --> 00:02:36,230
the time and energy to go write actual

00:02:33,360 --> 00:02:39,150
drivers for it because that that's

00:02:36,230 --> 00:02:41,520
software and I mean is you're trying to

00:02:39,150 --> 00:02:43,680
drive your component or get your product

00:02:41,520 --> 00:02:46,140
to market as quickly as possible that's

00:02:43,680 --> 00:02:48,690
that's a gonna be a long pole trying to

00:02:46,140 --> 00:02:52,440
write a new driver for a new piece of

00:02:48,690 --> 00:02:54,660
hardware so as a software developer you

00:02:52,440 --> 00:02:56,520
need to be intimately involved in these

00:02:54,660 --> 00:02:58,830
Hardware decisions I mean there are a

00:02:56,520 --> 00:03:00,930
lot of platforms we talked about all the

00:02:58,830 --> 00:03:03,180
single board computers they are are

00:03:00,930 --> 00:03:06,000
great starting points for your software

00:03:03,180 --> 00:03:08,670
development so that you can focus on the

00:03:06,000 --> 00:03:10,800
value add for your product you don't

00:03:08,670 --> 00:03:12,780
want to have to rewrite drivers because

00:03:10,800 --> 00:03:15,930
that really doesn't add a lot of value

00:03:12,780 --> 00:03:18,860
to your product integrating new features

00:03:15,930 --> 00:03:22,799
and and making sure that you're able to

00:03:18,860 --> 00:03:26,010
focus your software energy on the things

00:03:22,799 --> 00:03:28,830
that add value now similarly as a

00:03:26,010 --> 00:03:30,810
software developer you want to make your

00:03:28,830 --> 00:03:34,860
hardware guys life as easy as possible

00:03:30,810 --> 00:03:37,410
so as you come to the the table and say

00:03:34,860 --> 00:03:39,030
okay what do I need it to in from the

00:03:37,410 --> 00:03:40,980
hardware guys in order to make sure that

00:03:39,030 --> 00:03:43,200
that I can prototype this and get my

00:03:40,980 --> 00:03:45,420
focus on my value add from a software

00:03:43,200 --> 00:03:47,820
point of view you also need to be

00:03:45,420 --> 00:03:50,610
considerate of the hardware guys to use

00:03:47,820 --> 00:03:52,620
open hardware platforms so that the

00:03:50,610 --> 00:03:56,220
hardware guys can focus on the value add

00:03:52,620 --> 00:03:57,810
as well they don't need to to be able to

00:03:56,220 --> 00:04:00,239
I mean if you start with a closed source

00:03:57,810 --> 00:04:03,000
platform like raspberry pie or something

00:04:00,239 --> 00:04:05,160
it becomes very difficult for you to go

00:04:03,000 --> 00:04:07,709
design your hardware system around that

00:04:05,160 --> 00:04:11,090
because I can't buy chips from digi-key

00:04:07,709 --> 00:04:13,769
I can't go and and get all my components

00:04:11,090 --> 00:04:16,290
in and our sourcing everything is

00:04:13,769 --> 00:04:18,299
difficult just going in and read it--and

00:04:16,290 --> 00:04:19,989
redesigning the hardware now I'm stuck I

00:04:18,299 --> 00:04:23,270
have to integrate a

00:04:19,989 --> 00:04:25,580
module as opposed to being able to

00:04:23,270 --> 00:04:30,050
necessarily get the form factor that I

00:04:25,580 --> 00:04:31,730
want for my product so similarly from a

00:04:30,050 --> 00:04:33,620
software you want to focus on your

00:04:31,730 --> 00:04:35,240
value-add from a software point of view

00:04:33,620 --> 00:04:36,710
you also need to be considered the

00:04:35,240 --> 00:04:38,810
hardware and make sure that they focus

00:04:36,710 --> 00:04:42,110
on the value add for the hardware not

00:04:38,810 --> 00:04:44,240
rerouting ddr because I mean having our

00:04:42,110 --> 00:04:46,820
doesn't isn't a bullet point on your on

00:04:44,240 --> 00:04:49,400
your product it dr has to work you have

00:04:46,820 --> 00:04:51,560
to have memory memory has to has to be

00:04:49,400 --> 00:04:54,020
functioning but it's not going to add

00:04:51,560 --> 00:04:55,700
value to your product and that can cause

00:04:54,020 --> 00:04:59,780
a lot of headaches in your product

00:04:55,700 --> 00:05:03,440
lifecycle development so there's this

00:04:59,780 --> 00:05:06,050
whole gap between prototype and product

00:05:03,440 --> 00:05:08,870
so when you're developing a custom PCB

00:05:06,050 --> 00:05:11,030
you have to you have to try to focus on

00:05:08,870 --> 00:05:13,940
your form factor you want smaller you

00:05:11,030 --> 00:05:15,590
want but but as at the same time you

00:05:13,940 --> 00:05:17,750
have to understand that as you're

00:05:15,590 --> 00:05:20,120
driving down size and everything it's

00:05:17,750 --> 00:05:21,710
harder to do and so you want you want

00:05:20,120 --> 00:05:24,830
your open hardware so that you have

00:05:21,710 --> 00:05:25,910
known Lucian's similarly you want to

00:05:24,830 --> 00:05:28,010
make sure that you have known good

00:05:25,910 --> 00:05:29,750
software solutions so you want to make

00:05:28,010 --> 00:05:31,940
sure as you're going from this

00:05:29,750 --> 00:05:34,070
prototyping platform so there's this

00:05:31,940 --> 00:05:36,740
myriad of prototyping platforms out

00:05:34,070 --> 00:05:39,080
there you need to be cognizant of what

00:05:36,740 --> 00:05:42,050
those prototyping platforms offer in

00:05:39,080 --> 00:05:44,419
terms of transition from the prototypes

00:05:42,050 --> 00:05:47,480
to the product because if you don't

00:05:44,419 --> 00:05:50,000
start with a good prototyping solution

00:05:47,480 --> 00:05:52,100
then it's going to be very difficult to

00:05:50,000 --> 00:05:54,140
make that transition you're going to

00:05:52,100 --> 00:05:56,270
have a lot harder time it's been a lot

00:05:54,140 --> 00:05:58,820
more energy getting from that prototype

00:05:56,270 --> 00:06:01,910
to your product then you would otherwise

00:05:58,820 --> 00:06:04,940
and like everything else today you have

00:06:01,910 --> 00:06:07,250
to do more with less and so that's that

00:06:04,940 --> 00:06:10,669
makes it even more critical that you

00:06:07,250 --> 00:06:14,120
have to choose plat starting prototyping

00:06:10,669 --> 00:06:17,270
platforms with the goal of migrating to

00:06:14,120 --> 00:06:18,770
an end product in mind so what are some

00:06:17,270 --> 00:06:21,530
of the things that can simplify your

00:06:18,770 --> 00:06:24,890
life well system and package can really

00:06:21,530 --> 00:06:27,500
provide a simple Linux hardware solution

00:06:24,890 --> 00:06:29,390
so what are the minimum things when

00:06:27,500 --> 00:06:30,979
using a system and packaged device what

00:06:29,390 --> 00:06:33,510
are the minimum things required to run

00:06:30,979 --> 00:06:37,060
Linux well you need to connect up your

00:06:33,510 --> 00:06:39,280
you need to connect a clock you have

00:06:37,060 --> 00:06:41,230
some boot mode registers to select what

00:06:39,280 --> 00:06:43,600
you boot from and then you need a boot

00:06:41,230 --> 00:06:47,290
media so you need your linux image and

00:06:43,600 --> 00:06:50,650
from that now you have a completely

00:06:47,290 --> 00:06:53,350
running Linux Hardware system so if you

00:06:50,650 --> 00:06:55,660
wanted to the this the this is the the

00:06:53,350 --> 00:06:59,139
pocket beagle one of the new development

00:06:55,660 --> 00:07:01,240
boards from beagle Borg and as you can

00:06:59,139 --> 00:07:03,430
see there's very little on this

00:07:01,240 --> 00:07:07,090
particular board I mean it is it is very

00:07:03,430 --> 00:07:10,540
tiny and single sided and it allows you

00:07:07,090 --> 00:07:13,180
to run Linux on on it and it was

00:07:10,540 --> 00:07:14,919
actually very easy to develop and so one

00:07:13,180 --> 00:07:17,460
of the one of the cool things about the

00:07:14,919 --> 00:07:19,600
fact that the system and package is

00:07:17,460 --> 00:07:21,760
incorporating a lot of the complexity

00:07:19,600 --> 00:07:23,620
from a hardware perspective is that if

00:07:21,760 --> 00:07:25,870
you wanted to you could almost dead bug

00:07:23,620 --> 00:07:28,270
this with about 30 connections so you

00:07:25,870 --> 00:07:31,090
need like 16 connections for your boot

00:07:28,270 --> 00:07:33,280
mode selection you need to for your

00:07:31,090 --> 00:07:35,590
clock you need a couple for your boot

00:07:33,280 --> 00:07:38,350
media and then you need a handful of

00:07:35,590 --> 00:07:40,060
other power connections in order to make

00:07:38,350 --> 00:07:42,639
sure that you can choose the right i/o

00:07:40,060 --> 00:07:45,100
voltages you can hook up some of the

00:07:42,639 --> 00:07:47,289
power management IC signals to the

00:07:45,100 --> 00:07:49,090
processor that we're done from a

00:07:47,289 --> 00:07:51,190
flexibility point of view but so in

00:07:49,090 --> 00:07:53,770
flight 30 soldering connections you

00:07:51,190 --> 00:07:56,380
could take this and dead bug it and have

00:07:53,770 --> 00:07:58,780
a Linux computer if that can run so

00:07:56,380 --> 00:08:00,729
that's the kind of simplification you

00:07:58,780 --> 00:08:04,150
want to look for from a hardware point

00:08:00,729 --> 00:08:06,400
of view now your your hardware guys life

00:08:04,150 --> 00:08:09,099
is way easier they get to focus on the

00:08:06,400 --> 00:08:12,250
value-add of what they're trying to do

00:08:09,099 --> 00:08:13,990
so they get to focus on adding the the

00:08:12,250 --> 00:08:16,240
components that are gonna make your

00:08:13,990 --> 00:08:18,750
hardware differentiated as opposed to

00:08:16,240 --> 00:08:21,970
having to focus on all of this this

00:08:18,750 --> 00:08:25,810
extra stuff that is just complexity in

00:08:21,970 --> 00:08:29,440
this day and age so we all can remember

00:08:25,810 --> 00:08:31,210
back when from from college we did a

00:08:29,440 --> 00:08:33,940
microcontroller system it's pretty

00:08:31,210 --> 00:08:36,279
simple I mean it has a tiny I mean your

00:08:33,940 --> 00:08:37,750
microcontroller very self-contained you

00:08:36,279 --> 00:08:40,450
worried about what you wanted to hook up

00:08:37,750 --> 00:08:43,030
to it the microcontroller you hook it up

00:08:40,450 --> 00:08:45,410
over JTAG you ran some code very easy

00:08:43,030 --> 00:08:47,480
but as we move to

00:08:45,410 --> 00:08:49,759
a typical microprocessor suddenly

00:08:47,480 --> 00:08:51,949
there's a whole realm of complexity that

00:08:49,759 --> 00:08:54,230
comes in and mainly because the fact

00:08:51,949 --> 00:08:56,269
that we need a lot faster memory we need

00:08:54,230 --> 00:09:00,319
a lot more memory in order to run

00:08:56,269 --> 00:09:04,120
today's Linux systems and so now instead

00:09:00,319 --> 00:09:06,589
of having this nice integrated compact

00:09:04,120 --> 00:09:10,670
microcontroller that is easy to program

00:09:06,589 --> 00:09:12,379
now we have to worry about DDR and I

00:09:10,670 --> 00:09:14,300
don't know if you've ever talked with

00:09:12,379 --> 00:09:16,990
any any hardware guys that have tried to

00:09:14,300 --> 00:09:19,250
route DDR it is not a very fun endeavor

00:09:16,990 --> 00:09:21,319
there's a lot of stuff that you have to

00:09:19,250 --> 00:09:25,009
do in order to get it right and if you

00:09:21,319 --> 00:09:26,930
get it wrong it's a very long to debug

00:09:25,009 --> 00:09:29,600
cycle and and you have to keep iterating

00:09:26,930 --> 00:09:33,589
on it and it can just destroy schedules

00:09:29,600 --> 00:09:36,980
and cause a lot of pain as you go

00:09:33,589 --> 00:09:39,230
forward so the fact that you have you

00:09:36,980 --> 00:09:43,040
have to have DDR in today's systems

00:09:39,230 --> 00:09:46,009
is just that that's it's what it is and

00:09:43,040 --> 00:09:48,560
so if you can look at trying to find a

00:09:46,009 --> 00:09:51,259
solution that allows your hardware guys

00:09:48,560 --> 00:09:54,500
to not have to deal with that a huge

00:09:51,259 --> 00:09:55,910
advantage similarly there's a lot of

00:09:54,500 --> 00:09:58,389
different power rails that have to

00:09:55,910 --> 00:10:00,439
happen in today's more complex power

00:09:58,389 --> 00:10:02,389
processors so not only do you have your

00:10:00,439 --> 00:10:04,040
i/o voltages but you have all these core

00:10:02,389 --> 00:10:06,350
voltages you want to have these low

00:10:04,040 --> 00:10:08,600
power systems so you have a bunch of

00:10:06,350 --> 00:10:10,759
different voltage rails for in different

00:10:08,600 --> 00:10:14,120
parts of your processor and so those

00:10:10,759 --> 00:10:16,699
things are contributing to the

00:10:14,120 --> 00:10:18,800
complexity that you would otherwise have

00:10:16,699 --> 00:10:23,839
not had to deal with in your

00:10:18,800 --> 00:10:26,600
microcontroller system so the the answer

00:10:23,839 --> 00:10:28,990
or at least our answer is a system and

00:10:26,600 --> 00:10:32,600
package so what does that do well it

00:10:28,990 --> 00:10:36,889
rates a processor some power management

00:10:32,600 --> 00:10:39,740
some DDR and LDO

00:10:36,889 --> 00:10:42,860
and all the associated passives into a

00:10:39,740 --> 00:10:46,879
single piece of single substrate single

00:10:42,860 --> 00:10:49,610
package device so now you get a single

00:10:46,879 --> 00:10:51,589
BGA as opposed to having to deal with

00:10:49,610 --> 00:10:55,130
all of these other separate components

00:10:51,589 --> 00:10:57,260
and deal with that complexity now most

00:10:55,130 --> 00:11:00,350
people are scared by the term BGA

00:10:57,260 --> 00:11:03,170
these aren't your typical BGA's the

00:11:00,350 --> 00:11:06,170
pitch on these is one point two seven

00:11:03,170 --> 00:11:09,290
millimeters so 50 mil which is huge

00:11:06,170 --> 00:11:13,220
so most of when people get scared of

00:11:09,290 --> 00:11:16,340
BGA's they're talking about 0.4 0.3

00:11:13,220 --> 00:11:18,980
millimeter pitch and and those are those

00:11:16,340 --> 00:11:20,660
are hard to deal with but when you're

00:11:18,980 --> 00:11:24,320
talking about these these wide pitch

00:11:20,660 --> 00:11:25,640
BGA's that that I mean one comment from

00:11:24,320 --> 00:11:27,950
from one of our users was you could

00:11:25,640 --> 00:11:31,010
drive a truck through the balls because

00:11:27,950 --> 00:11:35,360
they're so big it's so wide and and so

00:11:31,010 --> 00:11:37,460
that's that's where it really it helps

00:11:35,360 --> 00:11:41,480
simplify the system but it also allows

00:11:37,460 --> 00:11:43,280
you to do a lot in terms of make it easy

00:11:41,480 --> 00:11:45,800
to to design with from a hardware

00:11:43,280 --> 00:11:48,830
perspective so how do we construct a

00:11:45,800 --> 00:11:52,010
system in package well first you

00:11:48,830 --> 00:11:53,300
actually have silicon wafers you

00:11:52,010 --> 00:11:55,580
actually go through and you probe

00:11:53,300 --> 00:11:57,560
silicon wafers you make sure that you

00:11:55,580 --> 00:11:59,690
have known good die from your silicon

00:11:57,560 --> 00:12:02,480
wafer you chop up the wafer and then you

00:11:59,690 --> 00:12:05,510
actually go and attach it using wire

00:12:02,480 --> 00:12:06,650
bonders in order to put it down on on

00:12:05,510 --> 00:12:08,660
your substrate

00:12:06,650 --> 00:12:10,970
you also have discrete components so you

00:12:08,660 --> 00:12:14,180
have packaged parts that you might want

00:12:10,970 --> 00:12:15,200
to use you have passives and now some of

00:12:14,180 --> 00:12:19,360
the reasons you might want to actually

00:12:15,200 --> 00:12:22,940
use pass packaged parts so for ddr3

00:12:19,360 --> 00:12:25,400
jtech actually specified at the package

00:12:22,940 --> 00:12:27,470
level what the standard was and so you

00:12:25,400 --> 00:12:30,080
have a standard pin out for a ddr3

00:12:27,470 --> 00:12:32,000
memory but at the package level now in

00:12:30,080 --> 00:12:34,190
newer standards they actually start

00:12:32,000 --> 00:12:36,410
specifying stuff at the die level but at

00:12:34,190 --> 00:12:38,360
that point in time J deck didn't specify

00:12:36,410 --> 00:12:39,800
anything about the die and so if you

00:12:38,360 --> 00:12:41,840
want to actually be able to switch

00:12:39,800 --> 00:12:44,570
between different memory vendors or

00:12:41,840 --> 00:12:47,000
things like that so sourcing issues that

00:12:44,570 --> 00:12:50,900
you might encounter you have to actually

00:12:47,000 --> 00:12:55,490
go use just package memory and so that

00:12:50,900 --> 00:12:57,200
you'll find that in the OSD system and

00:12:55,490 --> 00:12:59,000
package device that we use on the Pocket

00:12:57,200 --> 00:13:01,520
Beagle it actually does use a package

00:12:59,000 --> 00:13:05,090
DDR primarily for that particular reason

00:13:01,520 --> 00:13:07,220
now then that attach to die and those

00:13:05,090 --> 00:13:09,470
discrete ponent components are all put

00:13:07,220 --> 00:13:10,830
on a substrate now a substrate is

00:13:09,470 --> 00:13:13,320
basically a a small

00:13:10,830 --> 00:13:15,690
printed circuit board it's it's it just

00:13:13,320 --> 00:13:17,460
allows you to have much tighter routing

00:13:15,690 --> 00:13:20,040
rules and much tighter design

00:13:17,460 --> 00:13:23,100
constraints than most standard printed

00:13:20,040 --> 00:13:27,360
circuit boards it's still fr4 it's still

00:13:23,100 --> 00:13:30,870
a pretty much a normal normal circuit

00:13:27,360 --> 00:13:34,340
board but now instead of like using four

00:13:30,870 --> 00:13:38,010
or five mill traces you're able to use

00:13:34,340 --> 00:13:39,720
40 micron trace width and 50 microns

00:13:38,010 --> 00:13:43,280
space rules and so there you're down in

00:13:39,720 --> 00:13:46,680
the one mill one and a half mill type

00:13:43,280 --> 00:13:49,080
routing rules and so you're you have a

00:13:46,680 --> 00:13:52,440
lot more you can do a lot things a lot

00:13:49,080 --> 00:13:54,330
denser and allows you to to keep your

00:13:52,440 --> 00:13:56,190
components a lot closer and pack them

00:13:54,330 --> 00:13:58,890
all together especially because now

00:13:56,190 --> 00:14:01,680
you're using bairdi you don't have to

00:13:58,890 --> 00:14:03,660
worry about the the additional space

00:14:01,680 --> 00:14:05,940
that you needed in order to expose all

00:14:03,660 --> 00:14:08,880
of the different pins because a lot of a

00:14:05,940 --> 00:14:11,340
lot of the the space that a particular

00:14:08,880 --> 00:14:14,490
component takes up is how many pins does

00:14:11,340 --> 00:14:16,830
it need and so the the size of a given

00:14:14,490 --> 00:14:20,370
device tends to depend on the number of

00:14:16,830 --> 00:14:22,440
pins that you have and and so by using

00:14:20,370 --> 00:14:25,020
bairdi you're able to hook things

00:14:22,440 --> 00:14:26,850
together and crush and and get them a

00:14:25,020 --> 00:14:28,740
lot closer than you would on a standard

00:14:26,850 --> 00:14:31,110
printed circuit board because you don't

00:14:28,740 --> 00:14:33,420
have to worry about getting it out to

00:14:31,110 --> 00:14:35,400
pins you can actually use stuff like

00:14:33,420 --> 00:14:37,590
wire bonds in order to make your

00:14:35,400 --> 00:14:39,990
connections down from the die to the

00:14:37,590 --> 00:14:42,240
substrate and last but not least you

00:14:39,990 --> 00:14:45,810
have the pins on the back and so like we

00:14:42,240 --> 00:14:49,140
said there's wide pitch BGA I it we

00:14:45,810 --> 00:14:52,380
actually have had some one at one of our

00:14:49,140 --> 00:14:55,440
our users hand solder one of these on to

00:14:52,380 --> 00:14:57,360
a board and we'll actually show show the

00:14:55,440 --> 00:15:01,740
little bit of the video on that in a

00:14:57,360 --> 00:15:04,320
couple minutes so the question that

00:15:01,740 --> 00:15:07,320
comes to mind though is is why can't you

00:15:04,320 --> 00:15:09,390
just use an SOC I mean SOC has been the

00:15:07,320 --> 00:15:11,940
way that we've we've allowed us allowed

00:15:09,390 --> 00:15:13,980
systems to grow smaller and smaller for

00:15:11,940 --> 00:15:15,750
the last couple of years I mean last 10

00:15:13,980 --> 00:15:18,900
years it's it's we used to have a

00:15:15,750 --> 00:15:20,790
processor only and now we have a

00:15:18,900 --> 00:15:23,340
processor coprocessor graphics

00:15:20,790 --> 00:15:24,240
coprocessor all sorts of peripherals all

00:15:23,340 --> 00:15:26,550
in the same

00:15:24,240 --> 00:15:28,890
piece of silicon so why can't we just

00:15:26,550 --> 00:15:31,440
accomplish this whole goal with an SOC

00:15:28,890 --> 00:15:34,140
well primarily we are a victim of our

00:15:31,440 --> 00:15:37,050
own success in that Moore's law has

00:15:34,140 --> 00:15:39,750
driven us into a lot of different ways

00:15:37,050 --> 00:15:42,720
so for processors in memory

00:15:39,750 --> 00:15:46,070
we've Moore's law has driven us into a

00:15:42,720 --> 00:15:48,810
very low voltage low power dissipation

00:15:46,070 --> 00:15:51,300
vector from a process point of view so

00:15:48,810 --> 00:15:53,550
in a silicon process we've we've we've

00:15:51,300 --> 00:15:56,310
looked at optimizing our processes so

00:15:53,550 --> 00:15:58,440
much and so we can do great things from

00:15:56,310 --> 00:16:01,020
a memory and a processor point of view

00:15:58,440 --> 00:16:02,910
but from an RF point of view if we

00:16:01,020 --> 00:16:06,029
wanted to look at optimizing that well

00:16:02,910 --> 00:16:08,790
now we need to have high power

00:16:06,029 --> 00:16:11,279
dissipation high clock frequency but low

00:16:08,790 --> 00:16:13,170
voltage and so there have been processes

00:16:11,279 --> 00:16:17,010
that have been optimised for for

00:16:13,170 --> 00:16:19,740
particular RF circuits that are kind of

00:16:17,010 --> 00:16:21,360
disparate from what you get for what the

00:16:19,740 --> 00:16:24,420
best processes are for memory and

00:16:21,360 --> 00:16:26,700
processors similarly you see the same

00:16:24,420 --> 00:16:29,339
kind of thing with power it's a

00:16:26,700 --> 00:16:32,250
different set of optimizations on

00:16:29,339 --> 00:16:35,370
silicon process that have made power

00:16:32,250 --> 00:16:37,320
circuitry so good and and and last but

00:16:35,370 --> 00:16:39,750
not least you have you have sensors and

00:16:37,320 --> 00:16:42,149
an analog and all of these things are

00:16:39,750 --> 00:16:43,920
kind of pulling pulling apart from a

00:16:42,149 --> 00:16:47,120
silicon process point of view you're

00:16:43,920 --> 00:16:50,880
trying to op in order to get the best

00:16:47,120 --> 00:16:53,730
performance of each of these areas you

00:16:50,880 --> 00:16:57,630
have to tune your process and and so

00:16:53,730 --> 00:16:59,880
when you go and reach for an SOC and SOC

00:16:57,630 --> 00:17:03,029
basically can only pick one silicon

00:16:59,880 --> 00:17:05,670
process to do everything in and that

00:17:03,029 --> 00:17:07,079
causes it causes you to compromise you

00:17:05,670 --> 00:17:09,750
basically you have to compromise on

00:17:07,079 --> 00:17:12,390
everything in order to pick one process

00:17:09,750 --> 00:17:14,970
that will allow you to do an SOC now

00:17:12,390 --> 00:17:16,650
that's that can be okay and that's

00:17:14,970 --> 00:17:19,439
what--that's that allows you to do a lot

00:17:16,650 --> 00:17:21,030
of things but what's nice about the the

00:17:19,439 --> 00:17:23,280
fact that kind of idea of system and

00:17:21,030 --> 00:17:25,439
package is that we don't have to do the

00:17:23,280 --> 00:17:27,449
compromise we can take dye that have

00:17:25,439 --> 00:17:29,700
been optimized for each of the given

00:17:27,449 --> 00:17:32,400
processes and now combine those all

00:17:29,700 --> 00:17:34,620
together on a substrate so now we kind

00:17:32,400 --> 00:17:37,440
of get the best of all worlds as opposed

00:17:34,620 --> 00:17:40,860
to having to compromise in all Harry

00:17:37,440 --> 00:17:42,690
so that's that's in general why we look

00:17:40,860 --> 00:17:45,120
at system and package as kind of this

00:17:42,690 --> 00:17:47,909
next level of integration as opposed to

00:17:45,120 --> 00:17:50,090
just using another system-on-chip or

00:17:47,909 --> 00:17:55,769
integrating more into a system on chip

00:17:50,090 --> 00:18:00,809
so with the OSD 3 3 5 8 the the impetus

00:17:55,769 --> 00:18:03,090
was to look at the major components of a

00:18:00,809 --> 00:18:05,580
single board computer so we looked up

00:18:03,090 --> 00:18:07,919
worked with Jason a lot on the

00:18:05,580 --> 00:18:11,129
BeagleBone black and we identify what

00:18:07,919 --> 00:18:13,919
were the core components that made that

00:18:11,129 --> 00:18:18,960
that that were difficult to deal with so

00:18:13,919 --> 00:18:21,389
the DDR the power management just all

00:18:18,960 --> 00:18:24,929
the different capacities that added a

00:18:21,389 --> 00:18:26,190
lot of assembly cost so I mean the fact

00:18:24,929 --> 00:18:27,809
that you can integrate a hundred

00:18:26,190 --> 00:18:31,320
passives and don't have to put a hundred

00:18:27,809 --> 00:18:33,600
passives down on a PCB will lower the

00:18:31,320 --> 00:18:35,909
cost of your product because it's just

00:18:33,600 --> 00:18:38,820
easier for assemblers to deal with they

00:18:35,909 --> 00:18:41,580
you I mean if it takes half a cent to

00:18:38,820 --> 00:18:43,320
place each component now you place one

00:18:41,580 --> 00:18:44,730
component instead of a hundred you've

00:18:43,320 --> 00:18:47,909
saved quite a bit of money from an

00:18:44,730 --> 00:18:49,740
assembly point of view and so we looked

00:18:47,909 --> 00:18:51,629
at all of these different types of

00:18:49,740 --> 00:18:55,230
components and pulled them all together

00:18:51,629 --> 00:18:59,730
into a single package that you could

00:18:55,230 --> 00:19:02,460
deal with easily so taking a little bit

00:18:59,730 --> 00:19:06,809
of a dive into what does this look like

00:19:02,460 --> 00:19:09,419
from more some more detail it's actually

00:19:06,809 --> 00:19:11,580
the the the sip the system in package

00:19:09,419 --> 00:19:14,159
uses a six layer substrate so basically

00:19:11,580 --> 00:19:16,500
you get a second six layer board inside

00:19:14,159 --> 00:19:18,509
the little BGA component so that data

00:19:16,500 --> 00:19:20,279
that's where you're dealing with all

00:19:18,509 --> 00:19:22,289
this routing all this complexity is

00:19:20,279 --> 00:19:24,419
because you actually have another six

00:19:22,289 --> 00:19:26,549
layer board sitting there on top of your

00:19:24,419 --> 00:19:29,039
printed circuit boards so by dealing

00:19:26,549 --> 00:19:32,129
with the complexity there you're able to

00:19:29,039 --> 00:19:34,320
do a lot more in your circuit board on a

00:19:32,129 --> 00:19:35,789
lot fewer layers and we'll talk about

00:19:34,320 --> 00:19:38,490
that in a couple minutes

00:19:35,789 --> 00:19:41,789
but then there's all sorts of cool stuff

00:19:38,490 --> 00:19:44,159
because once you over mold it you can

00:19:41,789 --> 00:19:47,250
see from some of these the the some of

00:19:44,159 --> 00:19:50,580
the CEMP icture x' that you're able to

00:19:47,250 --> 00:19:52,289
see so here are the wire bonds in

00:19:50,580 --> 00:19:54,659
here you can see some of the trace

00:19:52,289 --> 00:19:57,240
routing as part of the cross-sectional

00:19:54,659 --> 00:19:59,399
cut down here and you can see these

00:19:57,240 --> 00:20:02,059
little dots here are where they cut the

00:19:59,399 --> 00:20:05,100
wire bonds as they cut through the the

00:20:02,059 --> 00:20:07,649
the zip so like you can see the the cut

00:20:05,100 --> 00:20:11,340
line was here and so you can see some of

00:20:07,649 --> 00:20:13,529
the cuts along that you can see some of

00:20:11,340 --> 00:20:16,080
the dye that's inside the package DDR

00:20:13,529 --> 00:20:17,659
you can actually see what the mold

00:20:16,080 --> 00:20:20,120
compound looks like zoomed in

00:20:17,659 --> 00:20:23,370
tremendously and so this is actually

00:20:20,120 --> 00:20:26,580
where it's bonded a wire bond died down

00:20:23,370 --> 00:20:30,360
onto a package so like one of these

00:20:26,580 --> 00:20:32,100
little wire bonds here blowing up that's

00:20:30,360 --> 00:20:34,440
that's what it looks like and then all

00:20:32,100 --> 00:20:37,769
of the circles are part of the old the

00:20:34,440 --> 00:20:41,250
mold compound that's around it alright

00:20:37,769 --> 00:20:44,519
so let me do show a quick quick video

00:20:41,250 --> 00:20:47,940
this I thought this would be interesting

00:20:44,519 --> 00:20:49,740
so this is what it looks like when the

00:20:47,940 --> 00:20:53,159
wire bond er is actually going and

00:20:49,740 --> 00:20:57,000
bonding all the wires down for for one

00:20:53,159 --> 00:20:59,639
of the the die so basically the wire the

00:20:57,000 --> 00:21:01,529
there's a gold filament that coming down

00:20:59,639 --> 00:21:04,649
and it's just like sewing so the gold

00:21:01,529 --> 00:21:07,049
filament is attached as attaching on to

00:21:04,649 --> 00:21:09,720
the silicon die and then down on to the

00:21:07,049 --> 00:21:12,059
bond pads of the substrate and so they

00:21:09,720 --> 00:21:14,760
have these crazy machines that will go

00:21:12,059 --> 00:21:18,630
through and and go really quick and

00:21:14,760 --> 00:21:21,090
allow you to wire bond to to all these

00:21:18,630 --> 00:21:24,029
different things and so that's basically

00:21:21,090 --> 00:21:26,309
where it when it when it attaches your

00:21:24,029 --> 00:21:27,720
wire bonds here it's a machine like that

00:21:26,309 --> 00:21:29,159
that's actually going through and doing

00:21:27,720 --> 00:21:31,580
it and so there's all sorts of cool

00:21:29,159 --> 00:21:35,549
manufacturing stuff associated

00:21:31,580 --> 00:21:38,789
associated with this and so from that

00:21:35,549 --> 00:21:40,649
now now we are able to do these cool

00:21:38,789 --> 00:21:42,090
boards like our pocket beagle and with

00:21:40,649 --> 00:21:48,389
that I'm gonna let Jason talk a little

00:21:42,090 --> 00:21:51,210
bit about pocket beagle hi I'm Jason

00:21:48,389 --> 00:21:54,029
Carter 25-year employee of Texas

00:21:51,210 --> 00:21:56,460
Instruments and founder of beagle Borg

00:21:54,029 --> 00:21:59,340
along with Gerald Coley back 10 years

00:21:56,460 --> 00:22:00,780
ago and when we were first doing

00:21:59,340 --> 00:22:04,290
BeagleBoard one of the things

00:22:00,780 --> 00:22:06,990
that was actually a consideration was

00:22:04,290 --> 00:22:09,270
using system on module or some

00:22:06,990 --> 00:22:11,130
technology because because our uncle

00:22:09,270 --> 00:22:12,690
always has been to create a real open

00:22:11,130 --> 00:22:13,890
order platform and try to simplify

00:22:12,690 --> 00:22:17,310
things so the people can make their own

00:22:13,890 --> 00:22:20,540
Linux computers but the but the real the

00:22:17,310 --> 00:22:22,860
economics of it didn't quite make sense

00:22:20,540 --> 00:22:25,080
you know when you look at having to add

00:22:22,860 --> 00:22:26,250
a whole other PCB it's a whole it's a

00:22:25,080 --> 00:22:28,830
whole extra effort you have to add

00:22:26,250 --> 00:22:31,590
connectors there's a whole lot of things

00:22:28,830 --> 00:22:33,030
that just you could you could you could

00:22:31,590 --> 00:22:36,360
funny-money it but you couldn't make it

00:22:33,030 --> 00:22:38,790
really lower the ultimate manufacturing

00:22:36,360 --> 00:22:40,680
costs with the system and package

00:22:38,790 --> 00:22:44,340
approach and it's one way to encourage

00:22:40,680 --> 00:22:48,270
all you know silicon vendors and

00:22:44,340 --> 00:22:49,800
everybody did kind of to evaluate we

00:22:48,270 --> 00:22:52,590
actually have the potential for reducing

00:22:49,800 --> 00:22:55,980
the real costs not just the the funny

00:22:52,590 --> 00:22:57,780
money you know sales prices but the

00:22:55,980 --> 00:22:59,550
actual cost because the the assembly

00:22:57,780 --> 00:23:02,190
step is something that already has to be

00:22:59,550 --> 00:23:05,220
done right you still have to take the

00:23:02,190 --> 00:23:08,220
dye and put them into a package so why

00:23:05,220 --> 00:23:09,810
just take one dye and put it into a

00:23:08,220 --> 00:23:11,370
package when you can take the all the

00:23:09,810 --> 00:23:12,900
dyes and then create something it's

00:23:11,370 --> 00:23:15,210
actually much simpler so it has a lot of

00:23:12,900 --> 00:23:18,300
that the those benefits at a system of

00:23:15,210 --> 00:23:22,740
module stuff that's been around for for

00:23:18,300 --> 00:23:26,400
ages but actually you know by using you

00:23:22,740 --> 00:23:27,930
know standard packaging you know we

00:23:26,400 --> 00:23:31,440
could just use it like a regular chip

00:23:27,930 --> 00:23:33,060
now so we really you mean we we're not

00:23:31,440 --> 00:23:35,400
really close to that that linux on a

00:23:33,060 --> 00:23:39,300
chip we've done it right it's done linux

00:23:35,400 --> 00:23:41,880
on a chip and i think that's a bit of a

00:23:39,300 --> 00:23:44,340
game changer so part of the as part of

00:23:41,880 --> 00:23:47,940
the motivation for creating the the the

00:23:44,340 --> 00:23:49,950
pocket Beagle young but we also did it

00:23:47,940 --> 00:23:52,200
to to get something to get something

00:23:49,950 --> 00:23:54,990
smaller to get something lower costs to

00:23:52,200 --> 00:23:56,850
users and to really kind of deliver more

00:23:54,990 --> 00:23:59,580
on that open hardware promise right we

00:23:56,850 --> 00:24:00,990
really want people to be able to to take

00:23:59,580 --> 00:24:04,590
and modify our designs and grow our

00:24:00,990 --> 00:24:06,809
ecosystem in that way with the

00:24:04,590 --> 00:24:08,940
you know an eclectic mix of hardware

00:24:06,809 --> 00:24:10,559
rather than just everybody buying our

00:24:08,940 --> 00:24:11,850
boards all right we think there's a lot

00:24:10,559 --> 00:24:13,470
more opportunity for innovation if

00:24:11,850 --> 00:24:15,600
people actually change things and bow

00:24:13,470 --> 00:24:17,340
around it I don't want to talk too much

00:24:15,600 --> 00:24:20,010
more about the the SIP and processor

00:24:17,340 --> 00:24:21,539
details but those are you know some what

00:24:20,010 --> 00:24:26,970
some of the high-level bullet points are

00:24:21,539 --> 00:24:28,679
there on the slide you know it's a it's

00:24:26,970 --> 00:24:30,900
a full Linux computer and it's got some

00:24:28,679 --> 00:24:32,580
really cool features with the some of

00:24:30,900 --> 00:24:35,460
the microcontrollers and all the analog

00:24:32,580 --> 00:24:39,570
stuff that's that's a part of it you

00:24:35,460 --> 00:24:42,120
know from a you know board design

00:24:39,570 --> 00:24:43,110
perspective we we provided some 100 ml

00:24:42,120 --> 00:24:46,770
headers we could have made this board

00:24:43,110 --> 00:24:50,669
smaller the the we did we chose the a

00:24:46,770 --> 00:24:53,220
small mint tin as the the form factor

00:24:50,669 --> 00:24:54,929
because the the original BeagleBone was

00:24:53,220 --> 00:24:59,580
also done in a mint in form factor just

00:24:54,929 --> 00:25:01,669
a bigger one because in my mind the you

00:24:59,580 --> 00:25:04,380
know the tools for computing our

00:25:01,669 --> 00:25:05,730
fundamental survival tools right this is

00:25:04,380 --> 00:25:07,500
technology we need to make sure the

00:25:05,730 --> 00:25:09,870
future understand that the future

00:25:07,500 --> 00:25:12,149
generations understand that they're

00:25:09,870 --> 00:25:13,590
gonna build on and so it's a fundamental

00:25:12,149 --> 00:25:15,240
tool for survival and I just really love

00:25:13,590 --> 00:25:17,429
the meme of people putting survival kits

00:25:15,240 --> 00:25:18,779
and mint tens so this is your survival

00:25:17,429 --> 00:25:22,559
kit right but now we've gone from the

00:25:18,779 --> 00:25:25,919
big mint tin to the little mint tin for

00:25:22,559 --> 00:25:28,020
force for a survival tool there's but

00:25:25,919 --> 00:25:29,700
that's tool even at the hundred mills we

00:25:28,020 --> 00:25:32,399
can we you know we can give you nice big

00:25:29,700 --> 00:25:34,320
fat pins we didn't put anything on the

00:25:32,399 --> 00:25:36,690
bottom side of the board if you want to

00:25:34,320 --> 00:25:38,190
you can use this board like a psalm you

00:25:36,690 --> 00:25:42,149
can drop this right onto your design you

00:25:38,190 --> 00:25:45,029
can essentially use a reflow oven to

00:25:42,149 --> 00:25:46,320
solder it down through those pins that's

00:25:45,029 --> 00:25:48,210
one of the reasons we didn't put headers

00:25:46,320 --> 00:25:50,580
on it right so you can actually choose

00:25:48,210 --> 00:25:51,929
how you want to interconnect you know in

00:25:50,580 --> 00:25:56,870
the future there might be a version with

00:25:51,929 --> 00:25:59,039
headers whatever don't wait go get one

00:25:56,870 --> 00:26:02,640
but that's the that's the basic idea

00:25:59,039 --> 00:26:06,809
there's a lot of flexibility in this in

00:26:02,640 --> 00:26:11,190
this computer so it's it's it's it

00:26:06,809 --> 00:26:13,620
features are you know the cool sip from

00:26:11,190 --> 00:26:14,980
our from our from a hardware supplier

00:26:13,620 --> 00:26:17,290
partner here

00:26:14,980 --> 00:26:21,820
but it's um it's it's got a whole bunch

00:26:17,290 --> 00:26:24,640
on it on that that far side there's some

00:26:21,820 --> 00:26:26,470
of the different MUX modes out of those

00:26:24,640 --> 00:26:27,850
headers you can do either stink there's

00:26:26,470 --> 00:26:30,700
analog to digital converters there's

00:26:27,850 --> 00:26:33,280
quadrature encoder inputs there's spy

00:26:30,700 --> 00:26:35,350
ports you are ports and everything and

00:26:33,280 --> 00:26:36,970
all that there's every different digital

00:26:35,350 --> 00:26:39,570
pin has eight different MUX modes or you

00:26:36,970 --> 00:26:43,510
can kind of configured what's out there

00:26:39,570 --> 00:26:45,429
and we've got some we the layout is done

00:26:43,510 --> 00:26:49,690
also so that we can connect to the the

00:26:45,429 --> 00:26:50,799
microelectronic microbus click boards so

00:26:49,690 --> 00:26:52,000
you can actually connect two of those

00:26:50,799 --> 00:26:53,650
based on where it's pin out and that's

00:26:52,000 --> 00:26:56,380
over 400 different out on boards that

00:26:53,650 --> 00:26:58,270
you can use today you know with some

00:26:56,380 --> 00:27:01,450
with some small software hope from you

00:26:58,270 --> 00:27:06,429
guys but but but their their hardware

00:27:01,450 --> 00:27:08,770
compatible and you know so I think it

00:27:06,429 --> 00:27:10,360
you know being at $25 and stuff it gives

00:27:08,770 --> 00:27:13,030
you a lot of flexibility to go and

00:27:10,360 --> 00:27:14,350
create your own Linux computers either

00:27:13,030 --> 00:27:16,390
starting with the pocket be more than

00:27:14,350 --> 00:27:19,270
eventually building your own design this

00:27:16,390 --> 00:27:20,830
is to give you an example of what's in

00:27:19,270 --> 00:27:22,720
there it's a little bit of an eye chart

00:27:20,830 --> 00:27:26,140
but honestly for the entire schematic of

00:27:22,720 --> 00:27:28,150
the board of a Linux computer alright

00:27:26,140 --> 00:27:29,820
this is not too bad most of the space is

00:27:28,150 --> 00:27:34,030
actually taken up by the net names

00:27:29,820 --> 00:27:37,059
alright so if you see you know down the

00:27:34,030 --> 00:27:39,730
like that the the far the far left so

00:27:37,059 --> 00:27:41,350
far right side you'll see all the stuff

00:27:39,730 --> 00:27:43,600
breaking out of the the sit most of

00:27:41,350 --> 00:27:46,450
that's just so that it can go to the one

00:27:43,600 --> 00:27:47,860
sheet down where all the headers are and

00:27:46,450 --> 00:27:51,970
that's where that's where most of the

00:27:47,860 --> 00:27:54,460
the board stuff is you talked about the

00:27:51,970 --> 00:27:56,049
different those those 30 types of

00:27:54,460 --> 00:27:59,049
connections whatever those most that's

00:27:56,049 --> 00:28:02,590
all in that first this top the the top

00:27:59,049 --> 00:28:04,120
left so that you can change what the i/o

00:28:02,590 --> 00:28:05,500
voltages are you actually connect them

00:28:04,120 --> 00:28:08,080
up manually on the board but there's not

00:28:05,500 --> 00:28:10,570
too many of those get you that all you

00:28:08,080 --> 00:28:13,840
need is that the crystal likes you need

00:28:10,570 --> 00:28:16,690
a clock source need power for boot you

00:28:13,840 --> 00:28:19,419
see the the micro SD we could also boot

00:28:16,690 --> 00:28:21,059
off the USB or the serial but typically

00:28:19,419 --> 00:28:22,870
people would boot off with the micro SD

00:28:21,059 --> 00:28:24,760
actually it's kind of nice if you want

00:28:22,870 --> 00:28:26,470
to stay for if you want to go to my neck

00:28:24,760 --> 00:28:27,900
console talk I'll show you just doing

00:28:26,470 --> 00:28:29,910
everything

00:28:27,900 --> 00:28:31,620
on USB actually booting it up and

00:28:29,910 --> 00:28:35,760
running from from USB so the only thing

00:28:31,620 --> 00:28:38,100
you would need is the the bottom left

00:28:35,760 --> 00:28:40,560
side to tilith the boot modes and then

00:28:38,100 --> 00:28:45,150
the power and the USB is the boot source

00:28:40,560 --> 00:28:47,790
as well so it's it gets pretty simple in

00:28:45,150 --> 00:28:49,260
terms of you know what a computer looks

00:28:47,790 --> 00:28:52,950
like so hopefully that gives you an idea

00:28:49,260 --> 00:28:55,590
that questions for me before I turn it

00:28:52,950 --> 00:28:57,120
back over to Eric because Eric I think

00:28:55,590 --> 00:29:00,210
wants to show you the the actual

00:28:57,120 --> 00:29:01,710
assembly of the layout and the and the

00:29:00,210 --> 00:29:08,120
layout to rights actually so what this

00:29:01,710 --> 00:29:11,400
what this layout looks like for beagle

00:29:08,120 --> 00:29:15,150
not you know not the not for octavio

00:29:11,400 --> 00:29:17,970
systems we have multi-core a 15 with the

00:29:15,150 --> 00:29:21,000
BeagleBoard X 15 that's readily

00:29:17,970 --> 00:29:22,770
available today I know last ELC every

00:29:21,000 --> 00:29:25,040
five minutes walking in the door hey

00:29:22,770 --> 00:29:29,180
where's the X 15 so why can't I get one

00:29:25,040 --> 00:29:31,440
you can get them now we solved the the

00:29:29,180 --> 00:29:32,610
kind of all that the supply chain stuff

00:29:31,440 --> 00:29:35,850
around that so they're now readily

00:29:32,610 --> 00:29:37,800
available so it's it's a more expensive

00:29:35,850 --> 00:29:39,870
board but it's got a lot of other stuff

00:29:37,800 --> 00:29:42,570
in it it's got really high speed i/o was

00:29:39,870 --> 00:29:45,240
PCI Express and USB 3 and and craziness

00:29:42,570 --> 00:29:46,920
but it is a multi-core you know in terms

00:29:45,240 --> 00:29:49,440
of you know when do we get it into the

00:29:46,920 --> 00:29:51,300
BeagleBone or our pocket beagle form

00:29:49,440 --> 00:29:54,030
factor it's kind of just that's a stay

00:29:51,300 --> 00:29:55,590
tuned right but that's kind of our kind

00:29:54,030 --> 00:29:57,960
of our roadmap process kind of start at

00:29:55,590 --> 00:30:00,690
the desktop replacement model and then

00:29:57,960 --> 00:30:03,720
move it into the more embedded systems

00:30:00,690 --> 00:30:05,100
as we kind of optimize the design any

00:30:03,720 --> 00:30:11,310
other questions for me before I turn it

00:30:05,100 --> 00:30:15,260
back to the so the m3 is actually on the

00:30:11,310 --> 00:30:19,650
SOC so it's on the a m33 5x die itself

00:30:15,260 --> 00:30:22,740
there's I guess technically five exposed

00:30:19,650 --> 00:30:25,740
CPUs because there's the arm cortex a8

00:30:22,740 --> 00:30:27,240
there's the to PR use there's the cortex

00:30:25,740 --> 00:30:29,820
m3 that's typical used for power

00:30:27,240 --> 00:30:31,350
management but you can use it for other

00:30:29,820 --> 00:30:32,940
stuff it's just that most people use the

00:30:31,350 --> 00:30:34,860
pure use to kind of add stuff because

00:30:32,940 --> 00:30:38,640
the pure use have this ultra-low latency

00:30:34,860 --> 00:30:41,340
i/o so when people start adding my

00:30:38,640 --> 00:30:42,840
control our code stuff to the to the to

00:30:41,340 --> 00:30:46,920
the beagles they like to use the pure

00:30:42,840 --> 00:30:48,750
use because they're the EM trees have

00:30:46,920 --> 00:30:50,040
like a four stage pipeline so you can't

00:30:48,750 --> 00:30:52,230
get that you can can't get anywhere

00:30:50,040 --> 00:30:53,550
close to the low latency to the i/o pins

00:30:52,230 --> 00:30:58,440
that you can get from the pier you and

00:30:53,550 --> 00:31:01,530
lastly and leastly there's an X gs5 SG X

00:30:58,440 --> 00:31:03,540
530 graphics accelerator in there that's

00:31:01,530 --> 00:31:05,820
the only thing that has a closed blob on

00:31:03,540 --> 00:31:09,180
it you don't need it for boot unlike

00:31:05,820 --> 00:31:11,970
some other platforms it boots boots

00:31:09,180 --> 00:31:13,980
clean straight into main line you boot

00:31:11,970 --> 00:31:17,460
so you don't have to deal any clothes

00:31:13,980 --> 00:31:20,280
blobs for your Linux systems unless you

00:31:17,460 --> 00:31:22,110
want to use the the user space 3d

00:31:20,280 --> 00:31:27,660
graphics control then you need the SGX

00:31:22,110 --> 00:31:29,820
blob what networking is available so

00:31:27,660 --> 00:31:32,880
then the the networking that comes like

00:31:29,820 --> 00:31:34,590
stock on this is just the USB networking

00:31:32,880 --> 00:31:37,620
right over the the cable you can you can

00:31:34,590 --> 00:31:39,330
flip it over as host and use and provide

00:31:37,620 --> 00:31:40,950
power there's there's little Y cables

00:31:39,330 --> 00:31:42,390
where you can provide power in and flip

00:31:40,950 --> 00:31:45,570
it over as host you can put up a USB

00:31:42,390 --> 00:31:47,330
Wi-Fi dongle plug it in and powered over

00:31:45,570 --> 00:31:49,860
the same connector and use that as host

00:31:47,330 --> 00:31:52,850
you need to kind of log in first and

00:31:49,860 --> 00:31:56,640
configure it so that it next boot up it

00:31:52,850 --> 00:31:59,880
it uses that USB Wi-Fi but you can just

00:31:56,640 --> 00:32:02,880
use con-man config files to kind of set

00:31:59,880 --> 00:32:05,760
that up by default practically most

00:32:02,880 --> 00:32:07,080
people like for for early development a

00:32:05,760 --> 00:32:08,550
lot of what people do would take the

00:32:07,080 --> 00:32:12,900
click modules there's a bunch of them

00:32:08,550 --> 00:32:15,120
there's a click module for Ethernet so

00:32:12,900 --> 00:32:17,910
you add a device tree overlay and our

00:32:15,120 --> 00:32:21,090
our boot config and you can use the

00:32:17,910 --> 00:32:24,090
Ethernet adapter over spy

00:32:21,090 --> 00:32:27,720
there's also Wi-Fi there's also the usb

00:32:24,090 --> 00:32:29,940
on the expansion headers there's usb on

00:32:27,720 --> 00:32:32,730
the expansion headers themselves you can

00:32:29,940 --> 00:32:34,610
take like a little Adafruit and Sparkfun

00:32:32,730 --> 00:32:37,080
both make breakout boards that you can

00:32:34,610 --> 00:32:38,910
connect up and I made the I organized

00:32:37,080 --> 00:32:41,670
the pins so that you can wire those

00:32:38,910 --> 00:32:43,620
pretty much up directly so if you want

00:32:41,670 --> 00:32:45,330
to put a USB host but instead of just

00:32:43,620 --> 00:32:47,210
putting that that type-a connector on

00:32:45,330 --> 00:32:50,850
the board I wanted to bring it across to

00:32:47,210 --> 00:32:51,710
the pin headers so that you could do

00:32:50,850 --> 00:32:53,690
that

00:32:51,710 --> 00:32:55,310
in a in a myriad way so if you want to

00:32:53,690 --> 00:32:57,530
put a hub on there and there's a number

00:32:55,310 --> 00:32:59,000
of different add-on boards including the

00:32:57,530 --> 00:33:00,830
bacon bits that we're using for the e L

00:32:59,000 --> 00:33:02,480
classes and some stuff on tindy where

00:33:00,830 --> 00:33:08,360
you can get USB host ports that you can

00:33:02,480 --> 00:33:09,680
solder down onto it an internet

00:33:08,360 --> 00:33:10,790
connection sharing is probably the most

00:33:09,680 --> 00:33:13,070
common actually

00:33:10,790 --> 00:33:16,850
so you turn on inter connection sharing

00:33:13,070 --> 00:33:19,310
on your host you wish you a DHCP on the

00:33:16,850 --> 00:33:20,540
the Beagle and then it can get to the

00:33:19,310 --> 00:33:22,550
internet so that's that's the most

00:33:20,540 --> 00:33:28,640
common way to act like apt-get packages

00:33:22,550 --> 00:33:32,270
on your your board then to follow up

00:33:28,640 --> 00:33:33,710
from from a system in package processor

00:33:32,270 --> 00:33:35,990
point of view it supports all the

00:33:33,710 --> 00:33:39,740
networking that the a.m. 3 3 5 8

00:33:35,990 --> 00:33:40,940
supports and so like if you actually if

00:33:39,740 --> 00:33:43,940
you use the BeagleBone black as a

00:33:40,940 --> 00:33:45,770
prototyping platform basically you can

00:33:43,940 --> 00:33:47,450
you can use the system and packaged

00:33:45,770 --> 00:33:48,830
device even though the BeagleBone black

00:33:47,450 --> 00:33:50,360
itself doesn't use this has been

00:33:48,830 --> 00:33:52,040
packaged device because the BeagleBone

00:33:50,360 --> 00:33:54,500
black uses all the same components as

00:33:52,040 --> 00:33:56,930
the system and packaged device you can

00:33:54,500 --> 00:33:59,240
actually prototype your your platform on

00:33:56,930 --> 00:34:01,100
the BeagleBone black as well and still

00:33:59,240 --> 00:34:03,020
get the same benefits because from a

00:34:01,100 --> 00:34:05,840
hardware point of view you're now able

00:34:03,020 --> 00:34:08,510
to just cook up to the same iOS that you

00:34:05,840 --> 00:34:09,740
would have otherwise and and so from a

00:34:08,510 --> 00:34:12,080
networking point of view there are

00:34:09,740 --> 00:34:14,720
Ethernet ports and and things like that

00:34:12,080 --> 00:34:17,150
from a processor point of view so that

00:34:14,720 --> 00:34:18,950
you can actually get to it and if you're

00:34:17,150 --> 00:34:21,020
interested there's definitely a lot more

00:34:18,950 --> 00:34:24,590
information on our website octavio

00:34:21,020 --> 00:34:26,870
systems comm so one of the things that

00:34:24,590 --> 00:34:28,760
that's nice about the the fact that

00:34:26,870 --> 00:34:31,520
you're integrating stuff inside the

00:34:28,760 --> 00:34:32,810
system and package is that you don't

00:34:31,520 --> 00:34:35,930
necessarily have to follow the pin out

00:34:32,810 --> 00:34:37,250
of the original device if we look at it

00:34:35,930 --> 00:34:42,200
the a.m. through three five eight the

00:34:37,250 --> 00:34:44,960
it's it's a 384 ball BGA but if we look

00:34:42,200 --> 00:34:47,600
closely we can see that power management

00:34:44,960 --> 00:34:50,960
takes up a power management plus ddr

00:34:47,600 --> 00:34:54,500
take up over a hundred and some-odd pins

00:34:50,960 --> 00:34:57,080
out of out of that those 384 and so if

00:34:54,500 --> 00:35:01,340
we actually look at just the i/o signals

00:34:57,080 --> 00:35:02,450
we actually realized that if we because

00:35:01,340 --> 00:35:04,100
we can connect all these things

00:35:02,450 --> 00:35:05,580
internally we can actually get down to a

00:35:04,100 --> 00:35:08,280
256 ball BG

00:35:05,580 --> 00:35:10,650
and then we can optimize it so we can

00:35:08,280 --> 00:35:12,780
optimize it such that all of the signal

00:35:10,650 --> 00:35:14,940
pins are in those outer three rows and

00:35:12,780 --> 00:35:18,480
columns such that you could actually

00:35:14,940 --> 00:35:20,430
escape the whole BGA in one layer using

00:35:18,480 --> 00:35:23,160
six military six most spaced routing

00:35:20,430 --> 00:35:25,890
rules so very easy to manufacture very

00:35:23,160 --> 00:35:28,470
standard routing rules you're able to

00:35:25,890 --> 00:35:30,390
escape all of your signals in one layer

00:35:28,470 --> 00:35:32,430
you can provide power on the power

00:35:30,390 --> 00:35:34,260
straps at the top and then you have a

00:35:32,430 --> 00:35:37,140
ground ring and the only things in the

00:35:34,260 --> 00:35:39,480
center are your output power rails so

00:35:37,140 --> 00:35:41,460
then and some of the connections but to

00:35:39,480 --> 00:35:44,310
set IO voltages and stuff like that so

00:35:41,460 --> 00:35:45,990
you can use power pours to set your i/o

00:35:44,310 --> 00:35:47,910
voltages but as long as you don't need

00:35:45,990 --> 00:35:50,670
any output power you could potentially

00:35:47,910 --> 00:35:54,960
route the whole thing in one PCB layer

00:35:50,670 --> 00:35:57,060
which is amazing from a cost savings

00:35:54,960 --> 00:35:59,550
point of view so now instead of having

00:35:57,060 --> 00:36:02,160
to use a six layer board because I had

00:35:59,550 --> 00:36:03,990
to do DDR routing and stuff now I can

00:36:02,160 --> 00:36:06,180
conceivably get away with just a one

00:36:03,990 --> 00:36:07,830
layer board now you will have to have

00:36:06,180 --> 00:36:08,610
some power and ground planes and stuff

00:36:07,830 --> 00:36:10,950
like that

00:36:08,610 --> 00:36:12,990
and so generally we find that most

00:36:10,950 --> 00:36:15,270
customers do a four layer board because

00:36:12,990 --> 00:36:19,200
four layer boards nowadays are almost as

00:36:15,270 --> 00:36:22,230
cheap as two layer boards but you you

00:36:19,200 --> 00:36:25,080
find that that it's it's very easy to do

00:36:22,230 --> 00:36:28,800
all of all of these types of routing

00:36:25,080 --> 00:36:30,810
escape things just with a very few

00:36:28,800 --> 00:36:32,910
number of layers now because I don't

00:36:30,810 --> 00:36:35,310
have to deal with this complexity of DDR

00:36:32,910 --> 00:36:38,310
routing of power management plane

00:36:35,310 --> 00:36:40,560
routing I can do it in in a lot fewer

00:36:38,310 --> 00:36:43,650
layers and I don't have to worry about

00:36:40,560 --> 00:36:45,870
as nearly as much complexity so what

00:36:43,650 --> 00:36:48,240
that translated to so the pocket beagle

00:36:45,870 --> 00:36:50,370
is is a four layer PCB

00:36:48,240 --> 00:36:52,050
I mean we're able to do it single sided

00:36:50,370 --> 00:36:54,060
you didn't have to put any capacitors on

00:36:52,050 --> 00:36:56,550
the back because all the capacitors

00:36:54,060 --> 00:36:59,040
needed for the processor are inside the

00:36:56,550 --> 00:37:00,900
system in package so most boards you

00:36:59,040 --> 00:37:03,270
have this whole array of processors

00:37:00,900 --> 00:37:05,130
right underneath it array of capacitors

00:37:03,270 --> 00:37:07,200
right underneath the processor because

00:37:05,130 --> 00:37:08,220
you need the capacitance really close to

00:37:07,200 --> 00:37:10,560
the processor well

00:37:08,220 --> 00:37:12,930
we've integrated all that inside the the

00:37:10,560 --> 00:37:14,490
processor so now in that system in

00:37:12,930 --> 00:37:16,320
package you don't have to worry about

00:37:14,490 --> 00:37:17,400
placing all these caps right underneath

00:37:16,320 --> 00:37:19,230
your underneath

00:37:17,400 --> 00:37:21,810
your main your main processor it's all

00:37:19,230 --> 00:37:24,480
in there that way you can do a single

00:37:21,810 --> 00:37:28,350
sided board and it makes it easy to do

00:37:24,480 --> 00:37:30,840
all of these these layout things in a

00:37:28,350 --> 00:37:32,820
very few number of layers using very

00:37:30,840 --> 00:37:34,830
standard manufacturing rules so that's

00:37:32,820 --> 00:37:37,560
the whole six mil tres six mil space I

00:37:34,830 --> 00:37:40,110
mean that that is very cheap to

00:37:37,560 --> 00:37:41,970
manufacture and similarly from a via

00:37:40,110 --> 00:37:44,820
size you're able to use large vias

00:37:41,970 --> 00:37:50,670
that'll allow you to do very easy

00:37:44,820 --> 00:37:54,680
hardware design so and then and then one

00:37:50,670 --> 00:37:57,840
of the things I'll bring up here is so

00:37:54,680 --> 00:38:01,200
one of the one of the our colleagues

00:37:57,840 --> 00:38:05,370
Michael Welling he actually went through

00:38:01,200 --> 00:38:08,550
and did hand assembly of basically one

00:38:05,370 --> 00:38:12,510
of these using using a stencil he got

00:38:08,550 --> 00:38:14,550
from OSH park and and hand placement and

00:38:12,510 --> 00:38:17,250
hand routing and so he actually went and

00:38:14,550 --> 00:38:23,120
did a short little video we won't watch

00:38:17,250 --> 00:38:26,790
it all about about how to go through and

00:38:23,120 --> 00:38:30,510
and do a lot of basically getting

00:38:26,790 --> 00:38:35,160
getting a stencil and then being able to

00:38:30,510 --> 00:38:38,340
go squeegee on solder to one of the the

00:38:35,160 --> 00:38:43,290
boards put it putting it down cleaning

00:38:38,340 --> 00:38:46,110
it off and then the fun part is you're

00:38:43,290 --> 00:38:47,580
able to go and if you want to watch the

00:38:46,110 --> 00:38:50,760
whole video you're you're more than

00:38:47,580 --> 00:38:53,570
welcome to it's on up on YouTube but you

00:38:50,760 --> 00:38:57,000
can squeegee out your your solder and

00:38:53,570 --> 00:39:00,030
and then from that you're able to now go

00:38:57,000 --> 00:39:04,170
and do hand placement of all sorts of

00:39:00,030 --> 00:39:07,650
components so the and the main part is

00:39:04,170 --> 00:39:11,160
because the BGA is such a wide pitch it

00:39:07,650 --> 00:39:13,560
actually is pretty easy to hand place so

00:39:11,160 --> 00:39:17,070
you can't do that with the point four

00:39:13,560 --> 00:39:19,470
millimeter beach space space BGA's but

00:39:17,070 --> 00:39:21,840
because you're looking at a wide pitch

00:39:19,470 --> 00:39:24,420
BGA you're actually able to go through

00:39:21,840 --> 00:39:26,550
and hand place this and he actually got

00:39:24,420 --> 00:39:28,230
all five of them to work that he

00:39:26,550 --> 00:39:29,970
actually did as part of

00:39:28,230 --> 00:39:32,790
this whole hand assembly process and

00:39:29,970 --> 00:39:35,700
then he shoved it through his own little

00:39:32,790 --> 00:39:40,109
toaster oven that he built into a reflow

00:39:35,700 --> 00:39:41,940
oven so so you can you can you can go

00:39:40,109 --> 00:39:44,640
through and do this in the comfort of

00:39:41,940 --> 00:39:47,700
your own house you just have to go go

00:39:44,640 --> 00:39:50,820
home feel comfort a couple of things but

00:39:47,700 --> 00:39:53,760
so he was able to go get one of the

00:39:50,820 --> 00:39:56,070
early prototypes of this this was the

00:39:53,760 --> 00:39:59,310
the precursor to the pocket beagle but

00:39:56,070 --> 00:40:02,940
he was able to go get everything powered

00:39:59,310 --> 00:40:04,650
up and and booted and everything like

00:40:02,940 --> 00:40:06,150
that and so you're able to actually go

00:40:04,650 --> 00:40:10,890
through and do a hand assembly of this

00:40:06,150 --> 00:40:12,960
so it's it's it's a it's it's fun when

00:40:10,890 --> 00:40:16,980
you're able to do something like that

00:40:12,960 --> 00:40:19,680
and by using something like a system and

00:40:16,980 --> 00:40:22,160
package you're actually able to to go

00:40:19,680 --> 00:40:24,780
and do things like that because

00:40:22,160 --> 00:40:26,930
otherwise I mean with with the standard

00:40:24,780 --> 00:40:29,520
DDR packaging and some of the standard

00:40:26,930 --> 00:40:31,619
processors you're not able to do do

00:40:29,520 --> 00:40:33,840
things like that so it makes it really

00:40:31,619 --> 00:40:36,660
does make it simple in order to actually

00:40:33,840 --> 00:40:39,660
build your own computer now we talked

00:40:36,660 --> 00:40:42,510
about manufacturing we talked about some

00:40:39,660 --> 00:40:44,430
of the software stuff but really a lot

00:40:42,510 --> 00:40:46,290
of it comes in it's it's it's really

00:40:44,430 --> 00:40:49,830
simplifies your board bring up process

00:40:46,290 --> 00:40:52,260
now instead of having to go through and

00:40:49,830 --> 00:40:54,090
and worry about this this DDR not

00:40:52,260 --> 00:40:56,160
working always you have to do you you

00:40:54,090 --> 00:40:59,190
verify your power rails you verify your

00:40:56,160 --> 00:41:01,920
power isolation and and so you make sure

00:40:59,190 --> 00:41:04,140
that you you get everything that you did

00:41:01,920 --> 00:41:05,609
in short power and ground and and once

00:41:04,140 --> 00:41:08,250
you do that once you verify that with

00:41:05,609 --> 00:41:11,460
your DMM then you go download your

00:41:08,250 --> 00:41:13,350
latest image you might you wilderness

00:41:11,460 --> 00:41:17,100
you will need to customize the device

00:41:13,350 --> 00:41:19,410
tree but then you power board and you

00:41:17,100 --> 00:41:23,160
can start seeing seeing in boot and so

00:41:19,410 --> 00:41:25,740
it becomes a very easy boot process as

00:41:23,160 --> 00:41:28,350
opposed to a lot of other things where

00:41:25,740 --> 00:41:30,030
you have to stress about did I actually

00:41:28,350 --> 00:41:32,430
get all the power routing correctly

00:41:30,030 --> 00:41:35,040
correct all the different power rails

00:41:32,430 --> 00:41:37,800
are the planes good enough are they

00:41:35,040 --> 00:41:40,920
supplying power effectively to the

00:41:37,800 --> 00:41:41,760
processor to the DDR did I actually

00:41:40,920 --> 00:41:44,160
length

00:41:41,760 --> 00:41:46,800
all the different buses in DDR correctly

00:41:44,160 --> 00:41:48,930
in order for it to actually meet the 800

00:41:46,800 --> 00:41:52,470
megahertz timing or the whatever timing

00:41:48,930 --> 00:41:56,130
you needed for the DDR so it really

00:41:52,470 --> 00:41:58,940
helps simplify the the whole of that

00:41:56,130 --> 00:42:02,340
design process now I talked about

00:41:58,940 --> 00:42:05,550
servant throw in on that one there so so

00:42:02,340 --> 00:42:07,770
I've I've been I've helped a handful up

00:42:05,550 --> 00:42:09,900
probably about fourteen different boards

00:42:07,770 --> 00:42:11,910
at this point that I had had some

00:42:09,900 --> 00:42:16,109
involvement in doing the the bring up

00:42:11,910 --> 00:42:19,230
with the process the process has been

00:42:16,109 --> 00:42:21,119
really really super simple because then

00:42:19,230 --> 00:42:23,190
like doing board bring up but then like

00:42:21,119 --> 00:42:25,320
getting into before doing anything else

00:42:23,190 --> 00:42:27,119
or actually into the kernel right so

00:42:25,320 --> 00:42:29,880
before we try to worry about any of the

00:42:27,119 --> 00:42:32,369
other peripherals the the display the

00:42:29,880 --> 00:42:35,160
the all the other sensors and everything

00:42:32,369 --> 00:42:37,050
else you're into the kernel rather than

00:42:35,160 --> 00:42:39,990
have to write your own tools to go and

00:42:37,050 --> 00:42:43,260
do that you you're you're just using

00:42:39,990 --> 00:42:45,660
standard like kernel tools for toggling

00:42:43,260 --> 00:42:47,190
GPIO s or talking to I squared C devices

00:42:45,660 --> 00:42:49,130
and exploring a number are loading

00:42:47,190 --> 00:42:52,440
different things for sbir doing the

00:42:49,130 --> 00:42:55,020
configuring the LCD bus right so much

00:42:52,440 --> 00:42:59,190
much easier than traditional board bring

00:42:55,020 --> 00:43:00,630
up and I'll show it my neck console talk

00:42:59,190 --> 00:43:02,790
I'll talk about just how to do that

00:43:00,630 --> 00:43:04,410
entirely just over USB to the point that

00:43:02,790 --> 00:43:07,280
you're in the linux kernel with no other

00:43:04,410 --> 00:43:10,380
connections and an USB not even serial

00:43:07,280 --> 00:43:12,119
so this this is something where you know

00:43:10,380 --> 00:43:15,060
what would usually take you know like

00:43:12,119 --> 00:43:16,410
three days for an experienced embedded

00:43:15,060 --> 00:43:19,410
Linux engineer to kind of bring up the

00:43:16,410 --> 00:43:24,300
DDR or bring up everything else now is

00:43:19,410 --> 00:43:27,900
like in a couple hours tops so it's this

00:43:24,300 --> 00:43:29,910
is this is really nice yep and and as we

00:43:27,900 --> 00:43:31,260
we talk about you you will have to look

00:43:29,910 --> 00:43:33,180
at potentially modifying your device

00:43:31,260 --> 00:43:35,400
tree so this is where you you do have to

00:43:33,180 --> 00:43:38,070
look at your customization and as you

00:43:35,400 --> 00:43:39,930
would for any any system so from your

00:43:38,070 --> 00:43:41,580
prototype to your production you're

00:43:39,930 --> 00:43:43,710
always going to want to make sure that

00:43:41,580 --> 00:43:46,170
your device tree has been modified in

00:43:43,710 --> 00:43:48,690
order to make sure that it's optimized

00:43:46,170 --> 00:43:50,460
for your system and I'll get through

00:43:48,690 --> 00:43:52,740
throw one more in there you don't need

00:43:50,460 --> 00:43:54,090
you if you're basing it off of something

00:43:52,740 --> 00:43:55,550
like the pocket Beagle that has so

00:43:54,090 --> 00:43:57,260
little on it

00:43:55,550 --> 00:43:58,940
you can actually just bring it up on the

00:43:57,260 --> 00:43:59,720
pocket beagle first like we just you

00:43:58,940 --> 00:44:02,090
know to start with a really simple

00:43:59,720 --> 00:44:03,410
device tree and then start adding this

00:44:02,090 --> 00:44:05,060
stuff later so yes you do need to

00:44:03,410 --> 00:44:06,560
customize it but you're already running

00:44:05,060 --> 00:44:08,480
Linux you're already validating hardware

00:44:06,560 --> 00:44:11,480
before you ever do any of that yep and

00:44:08,480 --> 00:44:13,280
and so and then like like Jason was

00:44:11,480 --> 00:44:15,860
saying you can actually use device tree

00:44:13,280 --> 00:44:18,980
overlays in order to help facilitate

00:44:15,860 --> 00:44:21,260
your adding of different device tree

00:44:18,980 --> 00:44:23,240
components to your device tree and so

00:44:21,260 --> 00:44:25,130
you can actually go through and build

00:44:23,240 --> 00:44:28,190
everything out starting with the very

00:44:25,130 --> 00:44:29,390
simple device tree that that's provided

00:44:28,190 --> 00:44:31,850
for you and there's a lot of different

00:44:29,390 --> 00:44:33,410
examples and we want to thank Robert

00:44:31,850 --> 00:44:35,060
Nelson for all of the work that he has

00:44:33,410 --> 00:44:37,850
done in putting together all of this

00:44:35,060 --> 00:44:39,980
device tree stuff for us and so there's

00:44:37,850 --> 00:44:43,820
a link to the device tree rebuilder that

00:44:39,980 --> 00:44:47,510
he publishes for that so kind of just

00:44:43,820 --> 00:44:49,520
recapping basically using a system and

00:44:47,510 --> 00:44:52,280
package device for your Linux computer

00:44:49,520 --> 00:44:54,320
basically brings hundreds of components

00:44:52,280 --> 00:44:56,150
or a hundred plus components into a

00:44:54,320 --> 00:44:59,090
single package so it makes your board

00:44:56,150 --> 00:45:01,160
design faster simpler easier it allows

00:44:59,090 --> 00:45:02,660
you to focus on both the software

00:45:01,160 --> 00:45:04,790
value-add as well as the hardware

00:45:02,660 --> 00:45:08,360
value-add as opposed to worrying about

00:45:04,790 --> 00:45:10,820
these things that that are can be

00:45:08,360 --> 00:45:13,730
challenging and and time consuming and

00:45:10,820 --> 00:45:15,650
don't really cause at any

00:45:13,730 --> 00:45:18,140
differentiation or any value to your

00:45:15,650 --> 00:45:19,910
product it ensures the fact that you're

00:45:18,140 --> 00:45:21,860
gonna have an easier board bring up

00:45:19,910 --> 00:45:24,860
you're going to be able to do all of

00:45:21,860 --> 00:45:29,240
this stuff without having to worry about

00:45:24,860 --> 00:45:32,750
these complex things failing it allows

00:45:29,240 --> 00:45:36,740
you to have a lower cost PC be easier to

00:45:32,750 --> 00:45:38,450
manufacture lower cost manufacturing and

00:45:36,740 --> 00:45:41,690
and like we said some people hand

00:45:38,450 --> 00:45:44,840
soldered this so it really bridges that

00:45:41,690 --> 00:45:46,190
gap between prototype and production so

00:45:44,840 --> 00:45:48,620
you have you have your open hardware

00:45:46,190 --> 00:45:51,140
platforms you have the open source

00:45:48,620 --> 00:45:54,260
software and so it's easy for you to

00:45:51,140 --> 00:45:57,710
migrate from that prototype to your

00:45:54,260 --> 00:45:59,270
product and so as you go forward try to

00:45:57,710 --> 00:46:01,310
make sure that as you're considering

00:45:59,270 --> 00:46:03,550
different prototyping platforms you

00:46:01,310 --> 00:46:06,140
think about that that gap between

00:46:03,550 --> 00:46:08,240
getting from my prototype to my product

00:46:06,140 --> 00:46:11,150
and then making sure that

00:46:08,240 --> 00:46:13,520
that you're doing that with something in

00:46:11,150 --> 00:46:16,250
mind that allows both your hardware

00:46:13,520 --> 00:46:17,990
designer to enjoy life and make sure

00:46:16,250 --> 00:46:20,510
that everything is easy as well as make

00:46:17,990 --> 00:46:22,100
your own life easier and and then as you

00:46:20,510 --> 00:46:24,080
as you look at sip technology in general

00:46:22,100 --> 00:46:26,270
there's going to be a lot more coming

00:46:24,080 --> 00:46:28,670
out soon I mean Intel has announced

00:46:26,270 --> 00:46:31,820
various system and packaged devices

00:46:28,670 --> 00:46:34,460
other companies are looking at sip

00:46:31,820 --> 00:46:36,020
technology as the wave forward for the

00:46:34,460 --> 00:46:37,610
next level of integration and so you're

00:46:36,020 --> 00:46:39,440
going to be seeing a lot more from

00:46:37,610 --> 00:46:41,720
system and package coming forward and

00:46:39,440 --> 00:46:43,880
it's it's going to help make both our

00:46:41,720 --> 00:46:45,620
lives easier from a hardware perspective

00:46:43,880 --> 00:46:48,500
as well as from a software perspective

00:46:45,620 --> 00:46:56,810
so with that we would like to thank you

00:46:48,500 --> 00:46:59,480
and we're open for any questions let me

00:46:56,810 --> 00:47:02,660
let me give you the mic how hard would

00:46:59,480 --> 00:47:06,050
it be to integrate say like a a th 10k

00:47:02,660 --> 00:47:08,420
for nice and but not do it through USB

00:47:06,050 --> 00:47:11,870
like I'm at Wi-Fi but I don't want to

00:47:08,420 --> 00:47:14,720
use USB so Wi-Fi is always a tricky one

00:47:11,870 --> 00:47:17,090
I mean because a lot of times when

00:47:14,720 --> 00:47:20,270
you're looking at a product Wi-Fi needs

00:47:17,090 --> 00:47:23,300
to be placed in a particular peculiar

00:47:20,270 --> 00:47:25,790
area of your board for FCC purposes and

00:47:23,300 --> 00:47:27,650
for various other things so yes you can

00:47:25,790 --> 00:47:30,260
in a great Wi-Fi and I do believe that

00:47:27,650 --> 00:47:32,780
you will see more system and packaged

00:47:30,260 --> 00:47:35,570
devices integrating Wi-Fi but there are

00:47:32,780 --> 00:47:37,220
some challenges about that because by

00:47:35,570 --> 00:47:39,050
putting Wi-Fi in there it starts

00:47:37,220 --> 00:47:41,510
dictating where you might have to place

00:47:39,050 --> 00:47:42,860
the entire device and and it starts to

00:47:41,510 --> 00:47:44,870
taking a little bit more of your form

00:47:42,860 --> 00:47:47,210
factor and so that's the there's some

00:47:44,870 --> 00:47:49,370
some challenges with that but you will

00:47:47,210 --> 00:47:51,020
you will definitely see Wi-Fi in being

00:47:49,370 --> 00:47:57,370
integrated more in system and packaged

00:47:51,020 --> 00:47:59,930
devices temperature range so the the

00:47:57,370 --> 00:48:02,210
basically your temperature range is

00:47:59,930 --> 00:48:05,330
whatever the components that make up

00:48:02,210 --> 00:48:09,350
your system and packaged device so for

00:48:05,330 --> 00:48:10,670
for the OSD three three five eight it's

00:48:09,350 --> 00:48:13,160
offered in both commercial and

00:48:10,670 --> 00:48:17,420
industrial temperature ranges so zero at

00:48:13,160 --> 00:48:19,150
85 C and minus 40 to 85 see like I said

00:48:17,420 --> 00:48:20,520
it depends on the components so

00:48:19,150 --> 00:48:22,680
depending on

00:48:20,520 --> 00:48:25,860
type of ddr you get if the ddr is

00:48:22,680 --> 00:48:27,870
industrial rated and can can do as wide

00:48:25,860 --> 00:48:29,610
a temperature range depending on the

00:48:27,870 --> 00:48:32,460
passive components depending on the

00:48:29,610 --> 00:48:34,890
various dye and so really the system in

00:48:32,460 --> 00:48:37,230
package becomes the subset or the

00:48:34,890 --> 00:48:38,730
minimum of what are all the components

00:48:37,230 --> 00:48:42,000
that make up the system and package

00:48:38,730 --> 00:48:44,040
device and so it really depends on which

00:48:42,000 --> 00:48:45,690
components are integrated and so that's

00:48:44,040 --> 00:48:48,660
so you'll be able to see a lot of

00:48:45,690 --> 00:48:51,030
different temperature ranges now along

00:48:48,660 --> 00:48:52,890
with temperature comes thermal and it's

00:48:51,030 --> 00:48:54,300
it's interesting because system and

00:48:52,890 --> 00:48:56,940
packaged devices kind of become a

00:48:54,300 --> 00:48:59,640
thermal average err because everything's

00:48:56,940 --> 00:49:01,290
put together on a single substrate and

00:48:59,640 --> 00:49:03,540
they have a piece of molded plastic

00:49:01,290 --> 00:49:05,670
which is basically a heat spreader and

00:49:03,540 --> 00:49:08,310
so you end up getting a little bit of

00:49:05,670 --> 00:49:10,200
thermal averaging so you won't see the

00:49:08,310 --> 00:49:13,500
some of some of the dyes that would be

00:49:10,200 --> 00:49:15,630
hot they aren't quite as hot the dyes

00:49:13,500 --> 00:49:17,760
that are cool are not quite as cool and

00:49:15,630 --> 00:49:19,950
so so big it's it kind of acts as a big

00:49:17,760 --> 00:49:21,900
thermal average err so you still will

00:49:19,950 --> 00:49:24,300
see hot spots over your processor and

00:49:21,900 --> 00:49:26,820
your pea macand and things like that but

00:49:24,300 --> 00:49:29,070
you're not going to it's not going to be

00:49:26,820 --> 00:49:31,260
quite as high or quite as low as you

00:49:29,070 --> 00:49:37,880
would have otherwise seen in discrete

00:49:31,260 --> 00:49:37,880
devices alright any other questions

00:49:40,190 --> 00:49:45,990
long-term availability well that's that

00:49:44,310 --> 00:49:48,060
it really depends on the company so I

00:49:45,990 --> 00:49:52,350
mean I can only speak for for our

00:49:48,060 --> 00:49:54,660
company but we we pretend we are

00:49:52,350 --> 00:49:56,880
committed to offering them for as long

00:49:54,660 --> 00:49:59,040
as Texas Instruments offers the aim

00:49:56,880 --> 00:50:00,630
through three five eight and we could

00:49:59,040 --> 00:50:03,090
actually potentially offer them longer

00:50:00,630 --> 00:50:06,570
because you can actually do lifetime

00:50:03,090 --> 00:50:07,860
buys so depending on when when silicon

00:50:06,570 --> 00:50:10,260
vendors end-of-life things

00:50:07,860 --> 00:50:12,840
system and package companies can

00:50:10,260 --> 00:50:14,610
actually do end-of-life buys and so they

00:50:12,840 --> 00:50:17,310
could actually offer products longer

00:50:14,610 --> 00:50:19,050
than particular silicon vendors because

00:50:17,310 --> 00:50:22,940
they're able to do some of these

00:50:19,050 --> 00:50:27,210
inventory management things so and and

00:50:22,940 --> 00:50:28,710
speaking for forty I the am 335 has been

00:50:27,210 --> 00:50:30,060
around for a good long time and it's

00:50:28,710 --> 00:50:31,320
going to be around for a good long time

00:50:30,060 --> 00:50:32,930
because it's a really really really

00:50:31,320 --> 00:50:35,000
popular

00:50:32,930 --> 00:50:36,590
so this particular one I don't think you

00:50:35,000 --> 00:50:37,760
have to worry about in any way shape

00:50:36,590 --> 00:50:40,550
form or fashion it's gonna be available

00:50:37,760 --> 00:50:42,860
for a good long time and with anyone you

00:50:40,550 --> 00:50:46,700
know you want it to have a broad market

00:50:42,860 --> 00:50:48,380
right so it's nice or it's it's the

00:50:46,700 --> 00:50:49,790
broader the market the better the

00:50:48,380 --> 00:50:51,320
longevity and because this is an

00:50:49,790 --> 00:50:53,680
industrial targeted part it gets in

00:50:51,320 --> 00:50:56,090
design into it a lot of industrial

00:50:53,680 --> 00:50:59,510
automation equipment and stuff so they

00:50:56,090 --> 00:51:01,520
have very long life cycles you know so

00:50:59,510 --> 00:51:13,220
so it'll be still available in small

00:51:01,520 --> 00:51:15,440
quantities for a very long time yeah the

00:51:13,220 --> 00:51:16,910
question is are we planning next

00:51:15,440 --> 00:51:20,300
generation pocket beagle with wireless

00:51:16,910 --> 00:51:22,910
connectivity the short answer is no for

00:51:20,300 --> 00:51:25,790
for pocket beagle we're not at this

00:51:22,910 --> 00:51:27,580
phase looking to integrate Wireless on

00:51:25,790 --> 00:51:30,890
it it's it's pretty easy to add it

00:51:27,580 --> 00:51:32,750
externally if the if there was a sip

00:51:30,890 --> 00:51:34,370
available that had wireless technology I

00:51:32,750 --> 00:51:36,770
think we'd be very excited about using

00:51:34,370 --> 00:51:40,030
it but we don't necessarily want to deal

00:51:36,770 --> 00:51:42,320
with that complexity on or on our own I

00:51:40,030 --> 00:51:46,970
just don't answer that enough I think so

00:51:42,320 --> 00:51:50,090
yeah yeah so with that we will both

00:51:46,970 --> 00:51:52,160
Jason and I have posters at a tower the

00:51:50,090 --> 00:51:55,820
technical showcase we have some demos

00:51:52,160 --> 00:51:58,820
some cars remote-control cars and some

00:51:55,820 --> 00:52:00,890
old-school gaming for whack-a-mole as

00:51:58,820 --> 00:52:03,470
well as you can come see kind of some of

00:52:00,890 --> 00:52:05,750
the the guts of what system and package

00:52:03,470 --> 00:52:08,060
devices look like so I definitely

00:52:05,750 --> 00:52:11,750
encourage you to come come talk with us

00:52:08,060 --> 00:52:13,220
and we will definitely be be around if

00:52:11,750 --> 00:52:14,550
you have any other questions so with

00:52:13,220 --> 00:52:20,619
that thank you very much

00:52:14,550 --> 00:52:20,619

YouTube URL: https://www.youtube.com/watch?v=Ri9BXcd4kRE


