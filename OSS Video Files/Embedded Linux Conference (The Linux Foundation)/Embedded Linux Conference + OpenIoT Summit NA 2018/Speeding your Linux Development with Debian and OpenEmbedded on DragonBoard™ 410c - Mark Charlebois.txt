Title: Speeding your Linux Development with Debian and OpenEmbedded on DragonBoard™ 410c - Mark Charlebois
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Speeding your Linux Development with Debian and OpenEmbedded on DragonBoard™ 410c - Mark Charlebois, Qualcomm Technologies

 What’s the fastest or best path from prototype to production?  We’ll discuss the latest strategies and recommendations on choosing the right OS at the right stage of prototype, development and commercialization that will help you get started quickly, manage the trade-offs between the Linux options for rich package support, build sizes, development environments and tools, controlling updates, and making sure you know your options for long term support.

About Mark Charlebois
Mark Charlebois is a Director Engineering in QCT at Qualcomm Technologies Inc. (QTI), a subsidiary of Qualcomm, Inc. He has been developing software for Unix, Linux and embedded systems for more than 30 years. Mark has served as an open source strategist and evangelist, served on the boards of the Linux Foundation, and Drone Code, and on the Steering Committee of the Core Infrastructure Initiative. Mark also served a term as the Dronecode TSC Chair. Currently he works in the Machine Learning Group in QCT.
Captions: 
	00:00:00,030 --> 00:00:05,089
all right thank you for coming so as I

00:00:02,909 --> 00:00:08,160
mentioned at the keynotes this morning

00:00:05,089 --> 00:00:12,480
this will be a talk mainly about Debian

00:00:08,160 --> 00:00:14,370
and openembedded Yocto sort of and the

00:00:12,480 --> 00:00:16,830
whole development process or prototyping

00:00:14,370 --> 00:00:19,170
to commercialization some issues to

00:00:16,830 --> 00:00:21,359
think about benefits of each of them

00:00:19,170 --> 00:00:24,060
concerns about each of them but

00:00:21,359 --> 00:00:29,039
additionally just an introduction to the

00:00:24,060 --> 00:00:31,500
the Snapdragon 410 platform so there's

00:00:29,039 --> 00:00:40,350
some the anyway I'll get to the slides

00:00:31,500 --> 00:00:47,129
and I can explain it from there so the

00:00:40,350 --> 00:00:50,579
410 invented platform is the chip itself

00:00:47,129 --> 00:00:53,039
basically and then there can be Psalms

00:00:50,579 --> 00:00:55,020
created from that and other boards but

00:00:53,039 --> 00:00:56,460
there's a a reference board the dragon

00:00:55,020 --> 00:00:59,010
board for Chauncey development board

00:00:56,460 --> 00:01:02,489
which is compliant with the 96 board

00:00:59,010 --> 00:01:04,769
spec it's available from Aero Lennar o

00:01:02,489 --> 00:01:09,090
produces software for it there's a

00:01:04,769 --> 00:01:13,170
debian build and a open you open up edit

00:01:09,090 --> 00:01:19,820
build so the the 410 a processor

00:01:13,170 --> 00:01:23,220
basically it's a quad core cortex a53

00:01:19,820 --> 00:01:26,970
it's integrated connectivity Bluetooth

00:01:23,220 --> 00:01:30,360
GPS Wi-Fi it has a hexagon DSP in it

00:01:26,970 --> 00:01:35,479
currently the builds for open embedded

00:01:30,360 --> 00:01:38,060
and for Debian don't have a hexagon SDK

00:01:35,479 --> 00:01:41,100
compatibility that's being worked on

00:01:38,060 --> 00:01:45,420
sometime in the near future that should

00:01:41,100 --> 00:01:47,700
also be available there's a Adreno 306

00:01:45,420 --> 00:01:51,570
GPU which is supported by the

00:01:47,700 --> 00:01:52,350
open-source freed reno driver and then

00:01:51,570 --> 00:01:53,640
there's other several that are

00:01:52,350 --> 00:01:57,659
peripheral interfaces there at the

00:01:53,640 --> 00:02:00,750
bottom so this is supported with an

00:01:57,659 --> 00:02:04,049
upstream kernel for graphics video

00:02:00,750 --> 00:02:05,850
acceleration and audio i/o one thing

00:02:04,049 --> 00:02:06,990
that is different with the 410 seat and

00:02:05,850 --> 00:02:10,009
some of the other embedded boards is

00:02:06,990 --> 00:02:12,200
that it uses the Android

00:02:10,009 --> 00:02:16,970
boot image format and it uses the elk a

00:02:12,200 --> 00:02:23,480
bootloader instead of a grub or argue

00:02:16,970 --> 00:02:24,890
boot I should say okay this is my last

00:02:23,480 --> 00:02:27,020
slide on the Fort NC and then I'll get

00:02:24,890 --> 00:02:30,110
it to the other parts so the difference

00:02:27,020 --> 00:02:32,030
here the Snapdragon 410 'part is a long

00:02:30,110 --> 00:02:33,590
term availability part so if you're

00:02:32,030 --> 00:02:36,230
prototyping something building something

00:02:33,590 --> 00:02:40,130
today that parts gonna be around for ten

00:02:36,230 --> 00:02:42,230
years total if you're looking at

00:02:40,130 --> 00:02:44,750
prototyping the dragon board Fortran C

00:02:42,230 --> 00:02:48,170
is a great platform to to take into your

00:02:44,750 --> 00:02:51,940
your prototyping on and they're both

00:02:48,170 --> 00:02:54,130
available they'll be sold through arrow

00:02:51,940 --> 00:02:56,000
there's also a link there to other

00:02:54,130 --> 00:02:57,590
embedded platforms if you want to see

00:02:56,000 --> 00:03:05,420
some of the other commercial options for

00:02:57,590 --> 00:03:07,130
getting the 410 year so let me start

00:03:05,420 --> 00:03:09,560
with just giving you an overview of the

00:03:07,130 --> 00:03:14,450
debian ecosystem some of the pros and

00:03:09,560 --> 00:03:16,100
cons so debian has a huge repository of

00:03:14,450 --> 00:03:17,480
pre-built packages if you're trying to

00:03:16,100 --> 00:03:19,040
get up and running quickly I mean this

00:03:17,480 --> 00:03:20,269
is the benefit that people have seen

00:03:19,040 --> 00:03:22,340
with Raspberry Pi and many of the

00:03:20,269 --> 00:03:23,600
developer boards is you don't have to

00:03:22,340 --> 00:03:25,340
build everything from scratch you don't

00:03:23,600 --> 00:03:26,690
have to start and have a nine-hour build

00:03:25,340 --> 00:03:27,320
time to get up and running with a root

00:03:26,690 --> 00:03:31,190
filesystem

00:03:27,320 --> 00:03:33,440
you you can basically apt-get install

00:03:31,190 --> 00:03:34,850
all the things you need many things are

00:03:33,440 --> 00:03:37,400
prepackaged at least the dependencies

00:03:34,850 --> 00:03:38,930
are there for for other packages and

00:03:37,400 --> 00:03:42,220
that's huge for prototyping that's

00:03:38,930 --> 00:03:42,220
really going to save you some time

00:03:42,340 --> 00:03:47,720
there's a very active community of

00:03:45,370 --> 00:03:50,470
supporters and contributors to Debian

00:03:47,720 --> 00:03:56,000
they do a great job keep doing updates

00:03:50,470 --> 00:03:59,390
doing bug fixes supporting the releases

00:03:56,000 --> 00:04:02,989
being transparent they have a debian

00:03:59,390 --> 00:04:06,440
social contract which talks about how

00:04:02,989 --> 00:04:08,450
the Debian packages will remain open how

00:04:06,440 --> 00:04:12,859
they will also allow for closed source

00:04:08,450 --> 00:04:14,569
packages to be used with Debian how any

00:04:12,859 --> 00:04:16,250
of those packages can be used not

00:04:14,569 --> 00:04:19,099
necessarily in the aggregate of Debian

00:04:16,250 --> 00:04:20,859
but individually as well it really lays

00:04:19,099 --> 00:04:22,960
out all the things that are

00:04:20,859 --> 00:04:27,490
are useful to understand how this can be

00:04:22,960 --> 00:04:29,590
used commercially the one caveat I would

00:04:27,490 --> 00:04:31,990
would say is if you don't have a long

00:04:29,590 --> 00:04:33,550
history and background in Debian with

00:04:31,990 --> 00:04:35,949
the package management and the sort of

00:04:33,550 --> 00:04:38,349
history and evolution of Debian much of

00:04:35,949 --> 00:04:40,840
the documentation that's there is going

00:04:38,349 --> 00:04:43,180
to be very very difficult because it

00:04:40,840 --> 00:04:46,180
presumes a lot of understanding of the

00:04:43,180 --> 00:04:47,889
different packaging projects that have

00:04:46,180 --> 00:04:49,659
been there they've evolved over time

00:04:47,889 --> 00:04:52,180
some of the documentation is a little

00:04:49,659 --> 00:04:55,229
stale so those are the some of the

00:04:52,180 --> 00:04:55,229
things you're gonna find with Debian

00:04:58,139 --> 00:05:06,000
yeah so releases so Debian has been suz

00:05:02,349 --> 00:05:09,870
me stable releases and testing releases

00:05:06,000 --> 00:05:12,310
at any given time there's one stable one

00:05:09,870 --> 00:05:14,650
testing release which has the support of

00:05:12,310 --> 00:05:16,659
the Debian security team and then when a

00:05:14,650 --> 00:05:20,250
new versions released or when it of also

00:05:16,659 --> 00:05:22,360
I mean testing moves to stable there's

00:05:20,250 --> 00:05:24,580
usually about an additional year

00:05:22,360 --> 00:05:27,580
provided for support for that from the

00:05:24,580 --> 00:05:30,729
Debian security team however there is

00:05:27,580 --> 00:05:35,169
another group the W Debian long-term

00:05:30,729 --> 00:05:38,020
support group which is extending the

00:05:35,169 --> 00:05:40,779
lifetime of Debian stable releases to at

00:05:38,020 --> 00:05:43,479
least five years so this is really

00:05:40,779 --> 00:05:46,629
really great for companies that need to

00:05:43,479 --> 00:05:50,139
provide long-term support for four

00:05:46,629 --> 00:05:52,060
platforms and this is also being looked

00:05:50,139 --> 00:05:55,469
at by certain other projects like the

00:05:52,060 --> 00:05:55,469
civil infrastructure project

00:06:00,270 --> 00:06:05,520
so the the Debian build methodology

00:06:02,520 --> 00:06:06,990
typically has been historically native

00:06:05,520 --> 00:06:09,300
built if you have something that you

00:06:06,990 --> 00:06:10,860
want to build in Debian you build it

00:06:09,300 --> 00:06:13,560
natively on the platform that it's on

00:06:10,860 --> 00:06:16,710
it's either if it's an arm hard float

00:06:13,560 --> 00:06:22,229
you build it on an arm hard plug arm

00:06:16,710 --> 00:06:25,620
hard float platform etc and if for

00:06:22,229 --> 00:06:27,750
instance if you have you know a 410 C or

00:06:25,620 --> 00:06:31,770
a Raspberry Pi any of those boards and

00:06:27,750 --> 00:06:33,870
you have a simple prop project that you

00:06:31,770 --> 00:06:35,639
want to build it's simple to just build

00:06:33,870 --> 00:06:39,030
it on the board itself install all of

00:06:35,639 --> 00:06:42,060
the the necessary build packages build

00:06:39,030 --> 00:06:44,099
it easy super simple however if you want

00:06:42,060 --> 00:06:45,900
to build chrome you're not gonna do that

00:06:44,099 --> 00:06:47,580
on your Raspberry Pi you're not going to

00:06:45,900 --> 00:06:48,659
do that on most of those boards if

00:06:47,580 --> 00:06:49,919
you're trying to build clang I don't

00:06:48,659 --> 00:06:52,319
even think you can link it on most of

00:06:49,919 --> 00:06:54,990
these boards so one of the other things

00:06:52,319 --> 00:06:57,240
that people use is doing native build

00:06:54,990 --> 00:07:00,030
but doing it in QM you then you have a

00:06:57,240 --> 00:07:01,770
little access to a lot more RAM you can

00:07:00,030 --> 00:07:03,930
get all the packages installed you

00:07:01,770 --> 00:07:05,639
basically create a sister out using

00:07:03,930 --> 00:07:09,289
multi-strap and then you can install all

00:07:05,639 --> 00:07:11,880
the dependent packages that you need and

00:07:09,289 --> 00:07:14,159
basically chroot into the chroot you can

00:07:11,880 --> 00:07:16,020
bind map all everything you need so that

00:07:14,159 --> 00:07:18,000
you can just have network access and

00:07:16,020 --> 00:07:20,729
apt-get install additional packages if

00:07:18,000 --> 00:07:23,430
you wanted the caveat is that it runs

00:07:20,729 --> 00:07:26,880
about 5 times at least slower than your

00:07:23,430 --> 00:07:30,690
native system will and and that's the

00:07:26,880 --> 00:07:32,009
challenge there is work going on

00:07:30,690 --> 00:07:36,630
especially I believe in the bus to

00:07:32,009 --> 00:07:38,639
release to improve the cross build

00:07:36,630 --> 00:07:41,280
capabilities of Debian there is some

00:07:38,639 --> 00:07:44,210
that are there Debbie and also supports

00:07:41,280 --> 00:07:47,759
multi arch so that you can install other

00:07:44,210 --> 00:07:52,409
architectures and so I could install the

00:07:47,759 --> 00:07:54,630
basic G Lib C other packages into my PC

00:07:52,409 --> 00:07:56,370
so say I could do AR 64 and load those

00:07:54,630 --> 00:07:58,409
packages in and build in link in

00:07:56,370 --> 00:08:00,870
application but there's many problems

00:07:58,409 --> 00:08:03,090
where for instance say I need the Python

00:08:00,870 --> 00:08:04,830
dev headers and if I want to install

00:08:03,090 --> 00:08:06,630
those for a foreign architecture they

00:08:04,830 --> 00:08:09,750
collide with the native ones and so I

00:08:06,630 --> 00:08:11,370
can't actually install them so there are

00:08:09,750 --> 00:08:13,030
some some problems just doing that this

00:08:11,370 --> 00:08:15,040
cross build is not the same as that

00:08:13,030 --> 00:08:16,630
it uses a sisterhood approach as well

00:08:15,040 --> 00:08:18,820
there are some things that are still

00:08:16,630 --> 00:08:20,890
broken but it seems like it's evolving

00:08:18,820 --> 00:08:22,390
it seems like the story's improving and

00:08:20,890 --> 00:08:25,840
I can't say that I have gone down that

00:08:22,390 --> 00:08:34,870
road because it's fairly new I think in

00:08:25,840 --> 00:08:37,990
a sense that it may be more viable so

00:08:34,870 --> 00:08:41,770
Deb package format for those not

00:08:37,990 --> 00:08:43,720
familiar with Debian it's basically it

00:08:41,770 --> 00:08:46,060
has your control files in it that are in

00:08:43,720 --> 00:08:49,390
it it has the description of the package

00:08:46,060 --> 00:08:52,330
dependencies it has all of the packages

00:08:49,390 --> 00:08:54,730
laid out there's a lots of tools for

00:08:52,330 --> 00:08:56,910
querying the packages installing them it

00:08:54,730 --> 00:09:00,910
is a package format supported also by

00:08:56,910 --> 00:09:04,180
Yocto it's any Debbie and derivative

00:09:00,910 --> 00:09:05,950
like Ubuntu uses it as well but there's

00:09:04,180 --> 00:09:08,890
a really confusing evolution of

00:09:05,950 --> 00:09:11,140
packaging helpers to to create these

00:09:08,890 --> 00:09:12,880
packages and so one of the more recent

00:09:11,140 --> 00:09:14,530
ones is this get build package if you

00:09:12,880 --> 00:09:16,990
have a git repository you can use it to

00:09:14,530 --> 00:09:18,580
build a package there was pee builder

00:09:16,990 --> 00:09:20,050
which I think is still used there's s

00:09:18,580 --> 00:09:21,520
build which I don't even have any idea

00:09:20,050 --> 00:09:23,920
what it is because I've never used that

00:09:21,520 --> 00:09:26,560
and then there's D H which is basically

00:09:23,920 --> 00:09:27,850
dead popper seven so you'll see

00:09:26,560 --> 00:09:30,490
references to these if you're reading

00:09:27,850 --> 00:09:32,290
the Debian documentation and this is

00:09:30,490 --> 00:09:35,020
sort of the the big learning curve part

00:09:32,290 --> 00:09:36,970
if you're really trying to get into that

00:09:35,020 --> 00:09:38,560
I mean typically the the Debian

00:09:36,970 --> 00:09:40,330
methodology is you would create a source

00:09:38,560 --> 00:09:41,530
package and then the source package

00:09:40,330 --> 00:09:42,700
would be compiled and generate the

00:09:41,530 --> 00:09:46,030
binary package which you would then

00:09:42,700 --> 00:09:47,970
deploy however if you have binaries that

00:09:46,030 --> 00:09:50,800
are pre generated that are close source

00:09:47,970 --> 00:09:53,230
that you need to repackage into your

00:09:50,800 --> 00:09:54,550
system that's not typically the Debian

00:09:53,230 --> 00:09:56,560
methodology and there's not a really

00:09:54,550 --> 00:09:58,180
good fit there so some of the things

00:09:56,560 --> 00:10:00,490
I've done in the past is just basically

00:09:58,180 --> 00:10:03,070
create my own control file install the

00:10:00,490 --> 00:10:05,680
files into that and then run D package

00:10:03,070 --> 00:10:07,060
that build just to package it up with

00:10:05,680 --> 00:10:08,590
the necessary dependencies and then I

00:10:07,060 --> 00:10:10,810
can integrate it into my system I can

00:10:08,590 --> 00:10:12,370
app I can install it uninstall it and it

00:10:10,810 --> 00:10:16,470
makes it much cleaner than just throwing

00:10:12,370 --> 00:10:16,470
a tar ball in to the system

00:10:19,950 --> 00:10:25,660
so to Debian very very friendly terms

00:10:23,380 --> 00:10:28,000
for commercial deployment some links

00:10:25,660 --> 00:10:30,580
there if you are rolling something out

00:10:28,000 --> 00:10:34,450
and you don't want necessarily just an

00:10:30,580 --> 00:10:36,520
apt update and an apt upgrade and get it

00:10:34,450 --> 00:10:38,740
all the different packages if you need

00:10:36,520 --> 00:10:41,290
to have you know I tested release be

00:10:38,740 --> 00:10:43,660
deployed at any moment in time you can

00:10:41,290 --> 00:10:48,160
pin packages if you want so you don't

00:10:43,660 --> 00:10:49,750
have to pick up certain packages but you

00:10:48,160 --> 00:10:52,030
may want to control when an update can

00:10:49,750 --> 00:10:54,820
be done if not allowing obviously root

00:10:52,030 --> 00:10:58,930
access and not allowing anyone to just

00:10:54,820 --> 00:11:00,970
do an apt update and app upgrade there

00:10:58,930 --> 00:11:03,040
are some license compliance tools that

00:11:00,970 --> 00:11:05,890
are there that are mainly done for the

00:11:03,040 --> 00:11:07,240
overall Debian repository there are some

00:11:05,890 --> 00:11:08,650
tools that are available if you're

00:11:07,240 --> 00:11:09,850
creating an application that will go

00:11:08,650 --> 00:11:11,680
through and find out what all your

00:11:09,850 --> 00:11:14,410
dependencies are and then tell you what

00:11:11,680 --> 00:11:16,420
those licenses are so if you're doing

00:11:14,410 --> 00:11:19,920
license compliance for your product

00:11:16,420 --> 00:11:22,540
obviously this is a big important thing

00:11:19,920 --> 00:11:27,250
and having five years of support is a

00:11:22,540 --> 00:11:29,950
huge benefit of Debian currently the

00:11:27,250 --> 00:11:32,050
Naro build for Fort NC is based on

00:11:29,950 --> 00:11:34,300
Debian testing so if you're prototyping

00:11:32,050 --> 00:11:37,510
now and depending on the lifecycle of

00:11:34,300 --> 00:11:40,090
your prototyping phase if your plan to

00:11:37,510 --> 00:11:41,560
roll out on stable it's actually a good

00:11:40,090 --> 00:11:44,290
pipeline rather than rolling out

00:11:41,560 --> 00:11:46,830
unstable and eating up a year of your

00:11:44,290 --> 00:11:46,830
support time

00:11:50,480 --> 00:11:56,180
all right so I'll switch over to yato

00:11:53,449 --> 00:11:57,199
openembedded so there's maybe some

00:11:56,180 --> 00:11:58,449
confusion as to what's the difference

00:11:57,199 --> 00:12:02,500
between Yocto and openembedded

00:11:58,449 --> 00:12:04,699
so there's a couple good sites I found I

00:12:02,500 --> 00:12:07,010
strangely Wikipedia actually gives you a

00:12:04,699 --> 00:12:09,579
fairly good description of those of the

00:12:07,010 --> 00:12:13,490
layers and the the way that this works

00:12:09,579 --> 00:12:16,970
there's basically what openembedded is

00:12:13,490 --> 00:12:19,730
is a series of layers of recipes in

00:12:16,970 --> 00:12:22,040
order to build packages that then can be

00:12:19,730 --> 00:12:27,920
brought together to create a root

00:12:22,040 --> 00:12:31,880
filesystem that you can then deploy kun

00:12:27,920 --> 00:12:34,130
cui has a really good slides that are

00:12:31,880 --> 00:12:36,589
that describe the terminology of this if

00:12:34,130 --> 00:12:38,240
you're interested in understanding more

00:12:36,589 --> 00:12:41,810
or you if you find any of the terms

00:12:38,240 --> 00:12:44,120
confusing but just to cut to the chase

00:12:41,810 --> 00:12:46,190
here basically openembedded is a build

00:12:44,120 --> 00:12:48,980
system that's based on bitbake which is

00:12:46,190 --> 00:12:51,800
a way to build the packages from these

00:12:48,980 --> 00:12:54,079
recipes openembedded is not a distro

00:12:51,800 --> 00:12:56,380
it's just made up of collections of

00:12:54,079 --> 00:12:59,779
recipes for bitbake organized by layers

00:12:56,380 --> 00:13:02,180
so what is Yocto well Yocto basically

00:12:59,779 --> 00:13:04,519
provides a reference distro that's built

00:13:02,180 --> 00:13:07,310
with open embedded but it adds a lot of

00:13:04,519 --> 00:13:10,060
additional tools and recipes which I'll

00:13:07,310 --> 00:13:10,060
get into some of them

00:13:15,500 --> 00:13:20,790
yeah so one of the big benefits of

00:13:18,570 --> 00:13:22,020
openembedded or octo is if you're

00:13:20,790 --> 00:13:23,730
building products that are cost

00:13:22,020 --> 00:13:26,790
sensitive and you really need to reduce

00:13:23,730 --> 00:13:28,950
flash reduce RAM reduce the BOM cost and

00:13:26,790 --> 00:13:31,560
you're super sensitive to the size of

00:13:28,950 --> 00:13:33,930
your root filesystem image this is going

00:13:31,560 --> 00:13:36,630
to be better for you than typical Debian

00:13:33,930 --> 00:13:38,550
system which may have many more base

00:13:36,630 --> 00:13:40,800
packages or package dependencies you

00:13:38,550 --> 00:13:42,270
have flexibility you have control you

00:13:40,800 --> 00:13:43,589
can decide what options you want to

00:13:42,270 --> 00:13:46,890
enable in a package when you build it

00:13:43,589 --> 00:13:49,170
you can build with busybox versus a set

00:13:46,890 --> 00:13:50,730
of other packages you can choose

00:13:49,170 --> 00:13:52,350
whatever tool chain you want you're not

00:13:50,730 --> 00:13:54,029
stuck with the tool chains that are

00:13:52,350 --> 00:13:57,360
available in that particular release of

00:13:54,029 --> 00:13:59,520
Debian for instance they provide tools

00:13:57,360 --> 00:14:02,520
for software compliance you can

00:13:59,520 --> 00:14:04,500
basically generate an XP DX report that

00:14:02,520 --> 00:14:07,710
will tell you what of all the different

00:14:04,500 --> 00:14:10,770
packages are from your root filesystem

00:14:07,710 --> 00:14:12,540
and its dependencies out sometimes

00:14:10,770 --> 00:14:16,920
that's needed if you're providing things

00:14:12,540 --> 00:14:18,690
in a supply chain what Yocto an open

00:14:16,920 --> 00:14:21,060
embedded have a huge learning curve for

00:14:18,690 --> 00:14:24,209
anyone who has not used it before it is

00:14:21,060 --> 00:14:26,820
basically going to be a whole different

00:14:24,209 --> 00:14:30,450
way of doing things from just basically

00:14:26,820 --> 00:14:31,290
taking a root filesystem and pointing

00:14:30,450 --> 00:14:33,720
your sister root there with your

00:14:31,290 --> 00:14:35,670
compiler and building you have all these

00:14:33,720 --> 00:14:38,279
recipes you have Python layers that

00:14:35,670 --> 00:14:40,320
build it I have definitely had to dive

00:14:38,279 --> 00:14:44,040
into the Python layers a bit baked to

00:14:40,320 --> 00:14:47,550
debug things and builds so that is the

00:14:44,040 --> 00:14:49,920
challenge with it it also takes a long

00:14:47,550 --> 00:14:51,750
time to build the images depending on

00:14:49,920 --> 00:14:53,279
how big if you want one with x11 and a

00:14:51,750 --> 00:14:54,839
bunch of extra packages and depending on

00:14:53,279 --> 00:14:56,610
the speed of your machine it can take as

00:14:54,839 --> 00:15:01,320
taking me up to like nine hours to build

00:14:56,610 --> 00:15:02,640
a root filesystem image and if you want

00:15:01,320 --> 00:15:03,930
to change something and tweak the

00:15:02,640 --> 00:15:05,430
configuration of your build you may end

00:15:03,930 --> 00:15:09,450
up regenerating the entire build again

00:15:05,430 --> 00:15:12,180
so there there's lots of challenges with

00:15:09,450 --> 00:15:12,570
this but you get the flexibility that

00:15:12,180 --> 00:15:15,209
you need

00:15:12,570 --> 00:15:16,650
it also requires lots of storage and

00:15:15,209 --> 00:15:18,000
processing power you definitely want to

00:15:16,650 --> 00:15:20,870
share by disk when you're starting to

00:15:18,000 --> 00:15:20,870
work with this kind of system

00:15:23,839 --> 00:15:31,139
so when I when I adopt this what am I

00:15:28,529 --> 00:15:32,549
getting myself into so basically if

00:15:31,139 --> 00:15:35,009
you're using Debian you're installing

00:15:32,549 --> 00:15:38,699
packages and you're you have a platform

00:15:35,009 --> 00:15:40,499
that developers can target and someone

00:15:38,699 --> 00:15:41,759
can write a third-party package they

00:15:40,499 --> 00:15:43,889
know how it's going to run they know

00:15:41,759 --> 00:15:46,529
what the dependent libraries are when

00:15:43,889 --> 00:15:48,539
you are using openembedded you're

00:15:46,529 --> 00:15:50,399
building your own distro you are your

00:15:48,539 --> 00:15:52,169
distro maintainer unless you're unless

00:15:50,399 --> 00:15:54,119
you're getting open embedded or Yocto

00:15:52,169 --> 00:15:56,639
from someone like a mentor graphics or

00:15:54,119 --> 00:15:58,859
someone else you control the system

00:15:56,639 --> 00:16:01,199
updates you control getting all those

00:15:58,859 --> 00:16:03,359
critical fixes in there and when they're

00:16:01,199 --> 00:16:05,600
deployed whether users can install

00:16:03,359 --> 00:16:08,189
packages or not but there's no

00:16:05,600 --> 00:16:10,129
third-party software ecosystem for your

00:16:08,189 --> 00:16:12,689
specific distro unless you create it

00:16:10,129 --> 00:16:17,429
basically when you do a Yocto build you

00:16:12,689 --> 00:16:20,129
can do a build of the sdk for your

00:16:17,429 --> 00:16:22,350
specific distro and then that is what a

00:16:20,129 --> 00:16:23,549
third-party internal or external could

00:16:22,350 --> 00:16:25,619
build with so say that you have a

00:16:23,549 --> 00:16:28,470
development team that does not want to

00:16:25,619 --> 00:16:29,549
develop in the in using open embedded

00:16:28,470 --> 00:16:31,049
because they don't have the expertise

00:16:29,549 --> 00:16:32,339
they don't have the time they don't have

00:16:31,049 --> 00:16:34,619
the overhead they're used to building

00:16:32,339 --> 00:16:38,759
with a syst root you can generate an sdk

00:16:34,619 --> 00:16:40,679
for your your baseline platform give it

00:16:38,759 --> 00:16:42,119
to that other team they can generate

00:16:40,679 --> 00:16:44,789
their software product and then run it

00:16:42,119 --> 00:16:47,279
on top of your BSP we've used that

00:16:44,789 --> 00:16:49,739
internally at Qualcomm that's a good

00:16:47,279 --> 00:16:54,299
model two separate components and when

00:16:49,739 --> 00:16:56,779
you're doing rapid prototyping and there

00:16:54,299 --> 00:16:59,579
are a couple ways to do these these SDKs

00:16:56,779 --> 00:17:01,199
there's a standard external SDK which is

00:16:59,579 --> 00:17:03,689
really just like a sis root and then

00:17:01,199 --> 00:17:06,000
there's this extensible SDK which has a

00:17:03,689 --> 00:17:09,000
totally different workflow that lets you

00:17:06,000 --> 00:17:12,379
build and package your software and be

00:17:09,000 --> 00:17:15,990
able to upload your recipes into this

00:17:12,379 --> 00:17:19,559
you're basically extend your BSP so that

00:17:15,990 --> 00:17:21,240
other people can basically create

00:17:19,559 --> 00:17:23,309
extensions that are compatible with your

00:17:21,240 --> 00:17:27,379
platform there's a great talk at last

00:17:23,309 --> 00:17:27,379
year's ELC which I gave a link for there

00:17:28,339 --> 00:17:37,120
how do we get for time that's time sorry

00:17:37,940 --> 00:17:43,590
so what's the workflow then for for

00:17:40,830 --> 00:17:45,740
doing this when you are using Yocto you

00:17:43,590 --> 00:17:49,710
basically create your own layer of

00:17:45,740 --> 00:17:51,570
recipes that are custom you can take

00:17:49,710 --> 00:17:54,270
existing recipes and just tweak them

00:17:51,570 --> 00:17:56,100
slightly using a pen dial a BB a pen

00:17:54,270 --> 00:17:59,280
file that says take this recipe but

00:17:56,100 --> 00:18:02,970
instead do this or add this patch or

00:17:59,280 --> 00:18:04,500
change this version or you can create a

00:18:02,970 --> 00:18:07,230
whole new recipe and add that in your

00:18:04,500 --> 00:18:08,610
own layer as well so in in Linares case

00:18:07,230 --> 00:18:10,400
there they've created a medic walk on

00:18:08,610 --> 00:18:14,190
layer that adds qualcomm specific

00:18:10,400 --> 00:18:18,210
recipes for things us that are specific

00:18:14,190 --> 00:18:20,160
to that platform you then need to

00:18:18,210 --> 00:18:22,320
aggregate all the layers is it a Yocto

00:18:20,160 --> 00:18:23,910
layer and openembedded later an external

00:18:22,320 --> 00:18:25,500
layer for instance there's a meta Ross

00:18:23,910 --> 00:18:28,050
layer that's available on github that

00:18:25,500 --> 00:18:29,790
you could then integrate as well and

00:18:28,050 --> 00:18:31,350
then you create this Beebe layers that

00:18:29,790 --> 00:18:33,690
comp file that puts all those layers

00:18:31,350 --> 00:18:35,490
together and says here's all the

00:18:33,690 --> 00:18:36,930
different layers that make up all of the

00:18:35,490 --> 00:18:40,620
different recipes that I can pull from

00:18:36,930 --> 00:18:42,360
to build my root filesystem you then set

00:18:40,620 --> 00:18:44,100
up your local that comp file that says

00:18:42,360 --> 00:18:46,710
ok this is the target I'm building and

00:18:44,100 --> 00:18:49,290
this is the compiled compilers I'm using

00:18:46,710 --> 00:18:52,140
and a target machine and all my build

00:18:49,290 --> 00:18:54,630
flags and if I'm asking any packages and

00:18:52,140 --> 00:18:58,380
anything else that defines this is how

00:18:54,630 --> 00:19:00,750
I'm going to make my build and then you

00:18:58,380 --> 00:19:04,020
can build either standard targets that

00:19:00,750 --> 00:19:06,540
are in Yocto for instance like this bit

00:19:04,020 --> 00:19:09,660
baked core image minimal or you can

00:19:06,540 --> 00:19:10,800
define your own images for your specific

00:19:09,660 --> 00:19:13,020
product or you can build what we call

00:19:10,800 --> 00:19:15,780
package groups that define a whole bunch

00:19:13,020 --> 00:19:17,250
of packages related to one thing and

00:19:15,780 --> 00:19:19,200
then just build that particular package

00:19:17,250 --> 00:19:22,880
group you can also build an individual

00:19:19,200 --> 00:19:22,880
package if you want to specify that

00:19:25,690 --> 00:19:33,280
all right so that was the workflow for

00:19:29,070 --> 00:19:35,710
for open embedded there are some hybrid

00:19:33,280 --> 00:19:38,530
approaches between Debian and open

00:19:35,710 --> 00:19:41,320
embedded there the one of them was

00:19:38,530 --> 00:19:42,040
presented here before SR was something

00:19:41,320 --> 00:19:45,220
that Siemens

00:19:42,040 --> 00:19:48,460
had initially started and it basically

00:19:45,220 --> 00:19:50,950
was a package builder it was not a

00:19:48,460 --> 00:19:57,850
distro builder so it could take any

00:19:50,950 --> 00:20:01,860
Debian derived OS like Debian or M

00:19:57,850 --> 00:20:05,770
Debian or Ubuntu even and you could

00:20:01,860 --> 00:20:08,140
build compatible packages for that

00:20:05,770 --> 00:20:10,360
distribution using the system which

00:20:08,140 --> 00:20:14,800
basically used bit baked and bit baked

00:20:10,360 --> 00:20:16,960
recipes and used all the headers and

00:20:14,800 --> 00:20:20,200
everything from-from Debian so it's a

00:20:16,960 --> 00:20:22,530
way to do a cross build basically for

00:20:20,200 --> 00:20:25,090
Debian and it let people who are used to

00:20:22,530 --> 00:20:27,850
creating embedded products with with

00:20:25,090 --> 00:20:32,200
open embedded and bitbake to do that for

00:20:27,850 --> 00:20:34,360
a Debian based system this I've tried it

00:20:32,200 --> 00:20:36,250
I've used it there were some caveats I

00:20:34,360 --> 00:20:41,080
had to run several things as route

00:20:36,250 --> 00:20:43,090
it also Maps your device devices from

00:20:41,080 --> 00:20:46,930
your kernel into the sister and if you

00:20:43,090 --> 00:20:49,150
RM minus RF your sister root you remove

00:20:46,930 --> 00:20:52,540
all your devices on your machine which

00:20:49,150 --> 00:20:53,980
has happened so it's it's a little

00:20:52,540 --> 00:20:55,480
fragile and it's not something that I

00:20:53,980 --> 00:20:58,270
would have felt comfortable rolling out

00:20:55,480 --> 00:21:00,100
to people at least at the time that I

00:20:58,270 --> 00:21:07,080
had used it there's another one called

00:21:00,100 --> 00:21:11,140
Debbie which is a merger of the the

00:21:07,080 --> 00:21:13,680
Debian approach to things and the pocky

00:21:11,140 --> 00:21:17,470
approach to things and it became Debbie

00:21:13,680 --> 00:21:23,560
so it is not a package builder it's

00:21:17,470 --> 00:21:26,380
basically a distro builder in the sense

00:21:23,560 --> 00:21:29,770
that you can build your own custom

00:21:26,380 --> 00:21:33,790
distro but it is using all of the source

00:21:29,770 --> 00:21:35,230
packages from Debian to do that and so

00:21:33,790 --> 00:21:37,690
what's the point why would you do that

00:21:35,230 --> 00:21:39,160
basically you had that five five-year

00:21:37,690 --> 00:21:40,630
support

00:21:39,160 --> 00:21:44,320
for all those Debbie and source packages

00:21:40,630 --> 00:21:45,730
so the deputy community is committed to

00:21:44,320 --> 00:21:47,350
supporting those so if you're creating a

00:21:45,730 --> 00:21:49,800
product and you need to create your own

00:21:47,350 --> 00:21:52,120
custom one and you don't want to rely on

00:21:49,800 --> 00:21:54,850
the packages in Yocto which you only

00:21:52,120 --> 00:21:56,260
have a year support and you want to

00:21:54,850 --> 00:21:59,620
leverage those this is a great way to

00:21:56,260 --> 00:22:01,870
figure out how to incorporate that long

00:21:59,620 --> 00:22:04,150
term support with your custom platform

00:22:01,870 --> 00:22:06,360
build this is what's being looked at

00:22:04,150 --> 00:22:10,380
from the civil infrastructure project

00:22:06,360 --> 00:22:13,960
which is currently based on on Debbie

00:22:10,380 --> 00:22:22,090
and there's anyway there's a link there

00:22:13,960 --> 00:22:24,520
to more about that so commercial

00:22:22,090 --> 00:22:26,860
deployments of oay and Yocto this is

00:22:24,520 --> 00:22:29,980
kind of why it exists is for commercial

00:22:26,860 --> 00:22:33,280
deployment it was shocked it was created

00:22:29,980 --> 00:22:34,270
from a bunch of commercial companies in

00:22:33,280 --> 00:22:35,560
the openembedded

00:22:34,270 --> 00:22:38,860
ecosystem there was Mentor Graphics

00:22:35,560 --> 00:22:40,270
there was I can't remember all the

00:22:38,860 --> 00:22:43,860
different players that were there Wind

00:22:40,270 --> 00:22:46,690
River and basically they wanted to

00:22:43,860 --> 00:22:49,090
consolidate the directions of things and

00:22:46,690 --> 00:22:53,440
to figure out how to scale and not

00:22:49,090 --> 00:22:57,720
replicate common activities and so you

00:22:53,440 --> 00:23:02,710
mean that's basically why Yocto exists

00:22:57,720 --> 00:23:05,230
there's no commercial district I would

00:23:02,710 --> 00:23:07,060
say from Yocto it provides pocky which

00:23:05,230 --> 00:23:08,560
is a reference distro it's basically a

00:23:07,060 --> 00:23:12,880
hat this is how you would put a distro

00:23:08,560 --> 00:23:14,890
together and Lennar o doesn't use Yocto

00:23:12,880 --> 00:23:17,830
per se they create something called the

00:23:14,890 --> 00:23:23,410
reference platform build and pocky is

00:23:17,830 --> 00:23:25,540
not part of that so Yocto it makes yeah

00:23:23,410 --> 00:23:29,040
as I said two releases a year and each

00:23:25,540 --> 00:23:32,140
release is only supported for one year

00:23:29,040 --> 00:23:33,430
which is a challenge for commercially if

00:23:32,140 --> 00:23:35,050
you're deploying something that's based

00:23:33,430 --> 00:23:36,760
on Yocto you not have to figure out well

00:23:35,050 --> 00:23:37,960
where am I going to get my my fixes from

00:23:36,760 --> 00:23:39,930
where am I going to get security fixes

00:23:37,960 --> 00:23:42,490
how am I going to pipeline those in

00:23:39,930 --> 00:23:44,980
who's responsible for that can I pay

00:23:42,490 --> 00:23:46,240
someone to do that those are questions

00:23:44,980 --> 00:23:48,850
you're going to want to answer if you're

00:23:46,240 --> 00:23:51,180
planning to deploy and ever update your

00:23:48,850 --> 00:23:51,180
product

00:23:51,520 --> 00:23:55,510
and there are some some companies that

00:23:53,620 --> 00:23:58,270
are offering commercial support you can

00:23:55,510 --> 00:24:00,310
buy it there basically they're BSP based

00:23:58,270 --> 00:24:02,590
on Yocto customized for your hardware

00:24:00,310 --> 00:24:04,740
and and have a support contract through

00:24:02,590 --> 00:24:04,740
them

00:24:04,770 --> 00:24:16,840
so then product yeah correct so so let

00:24:15,190 --> 00:24:18,700
me say so the same Mentor Graphics right

00:24:16,840 --> 00:24:20,800
in order for them to have a business and

00:24:18,700 --> 00:24:25,270
scale what they would do is they would

00:24:20,800 --> 00:24:27,760
create a a distribution a reference BSP

00:24:25,270 --> 00:24:30,970
that works across multiple soces that

00:24:27,760 --> 00:24:32,590
basically has a common tested platform

00:24:30,970 --> 00:24:34,000
and then they would do the tweaks to

00:24:32,590 --> 00:24:36,910
change the kernel for that particular

00:24:34,000 --> 00:24:38,220
SOC or others and then the incremental

00:24:36,910 --> 00:24:40,660
difference is basically what you're

00:24:38,220 --> 00:24:43,390
charging so that it's scalable to charge

00:24:40,660 --> 00:24:45,610
to different customers it wouldn't be

00:24:43,390 --> 00:24:47,380
possible for them to create a special

00:24:45,610 --> 00:24:49,000
snowflake distro for every different

00:24:47,380 --> 00:24:51,250
customer and support every one of them

00:24:49,000 --> 00:24:59,310
for ten years it would be phenomenally

00:24:51,250 --> 00:25:02,830
expensive for someone to do that you do

00:24:59,310 --> 00:25:06,090
it's if you're creating something highly

00:25:02,830 --> 00:25:09,600
fragmented it's gonna be very expensive

00:25:06,090 --> 00:25:09,600
it all depends

00:25:13,490 --> 00:25:19,470
yes true true fair enough so it is

00:25:17,610 --> 00:25:21,840
certainly the the more common it is the

00:25:19,470 --> 00:25:24,889
more scalable it is and I think that is

00:25:21,840 --> 00:25:24,889
the point I'm really trying to make

00:25:35,570 --> 00:25:42,650
okay so for for planning for product

00:25:38,180 --> 00:25:45,020
ization some potential gotchas for for a

00:25:42,650 --> 00:25:47,240
lot of qualcomm platforms i know that

00:25:45,020 --> 00:25:48,980
there's a older compilers use like a

00:25:47,240 --> 00:25:51,020
four point nine compiler to build things

00:25:48,980 --> 00:25:52,880
some of those things are on qualcomm

00:25:51,020 --> 00:25:54,350
developer network and so if you're

00:25:52,880 --> 00:25:55,700
trying to grab some of that stuff and

00:25:54,350 --> 00:25:57,260
integrate them into something like a

00:25:55,700 --> 00:26:00,800
recent version of debian you're gonna

00:25:57,260 --> 00:26:03,620
find that there could be some some

00:26:00,800 --> 00:26:05,390
challenges involved if you have

00:26:03,620 --> 00:26:06,440
proprietary metal middleware that you've

00:26:05,390 --> 00:26:08,450
been using say that you are using

00:26:06,440 --> 00:26:11,600
actually android so there is an Android

00:26:08,450 --> 00:26:13,070
build that you could run on a 410 C but

00:26:11,600 --> 00:26:16,070
it's not something that's commercially

00:26:13,070 --> 00:26:19,340
supported it's actually just for for

00:26:16,070 --> 00:26:21,170
community more you're going to find that

00:26:19,340 --> 00:26:23,390
there were it's a downstream kernel it

00:26:21,170 --> 00:26:24,950
has access to just certain pieces of

00:26:23,390 --> 00:26:27,080
hardware that are maybe not enabled in

00:26:24,950 --> 00:26:29,000
the fully upstream build yet so just

00:26:27,080 --> 00:26:30,830
again something to be aware of if you're

00:26:29,000 --> 00:26:32,210
if you've used Android and you're

00:26:30,830 --> 00:26:33,380
anticipating that all of these things

00:26:32,210 --> 00:26:37,310
are going to map over you want to check

00:26:33,380 --> 00:26:40,640
that first there's pre-built libraries

00:26:37,310 --> 00:26:43,810
that may have different C++ ABI s so you

00:26:40,640 --> 00:26:48,230
have the change that happened in GCC 5

00:26:43,810 --> 00:26:53,030
where they moved to the the proper C++

00:26:48,230 --> 00:26:54,620
11 ABI and broke clang at the time and

00:26:53,030 --> 00:26:56,300
so there was a lot of issues depending

00:26:54,620 --> 00:26:58,490
on the compiler that you have through

00:26:56,300 --> 00:26:59,960
that time frame there's also people who

00:26:58,490 --> 00:27:01,670
are using the Android compilers and

00:26:59,960 --> 00:27:04,880
those versions of them and and then

00:27:01,670 --> 00:27:06,260
trying to move to a an IOT platform that

00:27:04,880 --> 00:27:08,960
has a much recent a much more recent

00:27:06,260 --> 00:27:12,290
compiler there's a flag that you need to

00:27:08,960 --> 00:27:14,630
set basically to select the ABI that

00:27:12,290 --> 00:27:15,740
you're using to build and make sure that

00:27:14,630 --> 00:27:17,420
you're building things that are

00:27:15,740 --> 00:27:21,830
compatible as you're putting all these

00:27:17,420 --> 00:27:23,000
these libraries together commercial

00:27:21,830 --> 00:27:27,800
support and software updates

00:27:23,000 --> 00:27:29,510
LTS kernels basically if you support an

00:27:27,800 --> 00:27:32,000
LTS kernel there was an announcement

00:27:29,510 --> 00:27:34,280
from Gregor Hartman that Linux

00:27:32,000 --> 00:27:37,520
Foundation about it was a six year

00:27:34,280 --> 00:27:41,150
support for five years support six years

00:27:37,520 --> 00:27:44,450
six years support yeah for four LTS

00:27:41,150 --> 00:27:46,430
kernels now and so you know there's the

00:27:44,450 --> 00:27:47,840
question of do you want to stay in a

00:27:46,430 --> 00:27:51,110
kernel that old versus not

00:27:47,840 --> 00:27:54,950
sometimes you have to but basically

00:27:51,110 --> 00:27:56,570
provides you that option and then or do

00:27:54,950 --> 00:27:59,419
you want to have so do you have a frozen

00:27:56,570 --> 00:28:01,970
OS basically if you chose Yocto and you

00:27:59,419 --> 00:28:03,650
chose to go with the morty release and

00:28:01,970 --> 00:28:05,570
you're going to support that for 10

00:28:03,650 --> 00:28:07,970
years are you gonna support the morty

00:28:05,570 --> 00:28:09,679
release on that hardware for 10 years or

00:28:07,970 --> 00:28:12,980
you're gonna migrate users from the

00:28:09,679 --> 00:28:14,840
morty to the pyro to the rocky and each

00:28:12,980 --> 00:28:16,700
thing as it goes on so you want to think

00:28:14,840 --> 00:28:19,669
about how you're going to do updates to

00:28:16,700 --> 00:28:22,220
your system given the support the ways

00:28:19,669 --> 00:28:23,809
that support is structured for bug fixes

00:28:22,220 --> 00:28:26,570
and security updates and everything for

00:28:23,809 --> 00:28:28,789
those platforms and then open source

00:28:26,570 --> 00:28:35,120
compliance what tools do you have do you

00:28:28,789 --> 00:28:39,080
need to provide an XP DX for your or

00:28:35,120 --> 00:28:41,720
your you're basically stream of

00:28:39,080 --> 00:28:44,299
deployment or customers who use your

00:28:41,720 --> 00:28:50,899
product supply chain that's a word I'm

00:28:44,299 --> 00:28:53,149
looking for and then on top of all that

00:28:50,899 --> 00:28:56,240
if you have a platform

00:28:53,149 --> 00:28:59,360
how many third-party tools do you want

00:28:56,240 --> 00:29:03,529
to leverage that may or may not be built

00:28:59,360 --> 00:29:05,620
for your specific custom distro that you

00:29:03,529 --> 00:29:09,200
make if you have middleware components

00:29:05,620 --> 00:29:12,559
that you want to use that would need

00:29:09,200 --> 00:29:14,480
that say AWS for instance may not be

00:29:12,559 --> 00:29:17,270
able to target and build custom for

00:29:14,480 --> 00:29:18,950
every individual BSP it would depend on

00:29:17,270 --> 00:29:21,049
the size of the customer and and those

00:29:18,950 --> 00:29:23,659
kinds of things so if you have something

00:29:21,049 --> 00:29:25,940
like a Debian which is a scalable

00:29:23,659 --> 00:29:28,880
addressable platform for third parties

00:29:25,940 --> 00:29:31,760
to create software for you then have a

00:29:28,880 --> 00:29:33,169
much easier way to roll out third-party

00:29:31,760 --> 00:29:36,970
packages and support third-party

00:29:33,169 --> 00:29:36,970
packages on your device and platform

00:29:38,679 --> 00:29:43,700
robot operating system others as well

00:29:41,299 --> 00:29:45,710
there's gonna be lots of pain trying to

00:29:43,700 --> 00:29:47,120
incorporate Ross and all its

00:29:45,710 --> 00:29:48,830
dependencies and everything else into

00:29:47,120 --> 00:29:52,010
the octo platform especially as it rolls

00:29:48,830 --> 00:29:55,090
from release to release for for Debian

00:29:52,010 --> 00:29:55,090
that's basically an app get install

00:29:55,750 --> 00:30:00,729
right

00:29:58,349 --> 00:30:02,579
so I want to leave you with some useful

00:30:00,729 --> 00:30:06,159
links I hope the slides are useful

00:30:02,579 --> 00:30:08,019
standalone but basically if you want

00:30:06,159 --> 00:30:11,229
more information on the dragon board for

00:30:08,019 --> 00:30:13,599
10c there's links off that page to both

00:30:11,229 --> 00:30:16,269
the Debian and open embedded builds for

00:30:13,599 --> 00:30:18,219
that there's the Qualcomm developer

00:30:16,269 --> 00:30:21,899
networks page that has lots of different

00:30:18,219 --> 00:30:24,189
projects that can be done on the 410 see

00:30:21,899 --> 00:30:26,259
debian resources if you want to find out

00:30:24,189 --> 00:30:29,019
more information for debian there's the

00:30:26,259 --> 00:30:32,109
support page they're open embedded

00:30:29,019 --> 00:30:35,469
there's a guide on 96 boards which is

00:30:32,109 --> 00:30:37,539
very useful that talks about open

00:30:35,469 --> 00:30:38,889
embedded and just gives a general

00:30:37,539 --> 00:30:43,329
overview and then how you can use it on

00:30:38,889 --> 00:30:45,849
the 96 board platforms Yocto it has a

00:30:43,329 --> 00:30:47,769
very extensive developer manual that you

00:30:45,849 --> 00:30:50,379
can get access to there for each of the

00:30:47,769 --> 00:30:52,509
different releases pardon me and then

00:30:50,379 --> 00:30:55,179
Arrow Electronics is where you would go

00:30:52,509 --> 00:30:56,949
to get a dragon board for 10 C or any of

00:30:55,179 --> 00:31:03,369
the accessory boards that are available

00:30:56,949 --> 00:31:08,039
for it right so thank you very much for

00:31:03,369 --> 00:31:08,039
coming and I'll take some questions that

00:31:10,620 --> 00:31:13,340
yeah

00:31:21,680 --> 00:31:26,550
so there's a trade-off is that there's a

00:31:24,690 --> 00:31:29,400
break-even point right so say that I

00:31:26,550 --> 00:31:31,830
have 10 packages I have to build if I

00:31:29,400 --> 00:31:34,860
have to build 10 packages way easier to

00:31:31,830 --> 00:31:36,990
do it in qmu because 5 times the cost of

00:31:34,860 --> 00:31:39,680
10 packages is not the time of building

00:31:36,990 --> 00:31:44,730
an entire OS from scratch like once I

00:31:39,680 --> 00:31:48,960
but if you have a hundred packages or

00:31:44,730 --> 00:31:50,640
more to build your your times start to

00:31:48,960 --> 00:31:52,530
become almost as long as building the OS

00:31:50,640 --> 00:31:54,360
from scratch depends how much of the OS

00:31:52,530 --> 00:32:19,050
is your custom stuff and how much of it

00:31:54,360 --> 00:32:23,730
is is differentiating correct so the

00:32:19,050 --> 00:32:25,650
question was a correct so the question

00:32:23,730 --> 00:32:27,360
was about building a single package and

00:32:25,650 --> 00:32:29,640
and that it doesn't take that long to

00:32:27,360 --> 00:32:31,980
actually build a single package that's

00:32:29,640 --> 00:32:34,500
that's correct in that once you've eaten

00:32:31,980 --> 00:32:36,540
the initial cost of building your BSP

00:32:34,500 --> 00:32:38,400
and you have a package and you want to

00:32:36,540 --> 00:32:40,710
make a modification making a

00:32:38,400 --> 00:32:42,630
modification to a specific package that

00:32:40,710 --> 00:32:45,660
changes no platform dependencies is

00:32:42,630 --> 00:32:48,240
relatively quick and so that's not a big

00:32:45,660 --> 00:32:51,600
deal once you're used to the workflow if

00:32:48,240 --> 00:32:53,970
you change anything in that package or

00:32:51,600 --> 00:32:55,590
you change something in the platform for

00:32:53,970 --> 00:32:58,850
that package you are real building the

00:32:55,590 --> 00:32:58,850
whole platform yeah

00:33:02,419 --> 00:33:20,990
right correct correct yes yes

00:33:25,430 --> 00:33:29,750
correct I'll summarize the comments Oh a

00:33:27,500 --> 00:33:31,280
good point in that what doctor does is

00:33:29,750 --> 00:33:33,230
it doesn't every time tell you that you

00:33:31,280 --> 00:33:35,840
have to build the entire district from

00:33:33,230 --> 00:33:37,430
scratch again if you change something it

00:33:35,840 --> 00:33:38,750
will track the dependencies of the

00:33:37,430 --> 00:33:40,460
things you changed and build all the

00:33:38,750 --> 00:34:04,040
components necessary to do that change

00:33:40,460 --> 00:34:06,260
so right so the the device not so the

00:34:04,040 --> 00:34:10,280
dragon board is not a ten-year part the

00:34:06,260 --> 00:34:12,020
the chip the Snapdragon chip and that is

00:34:10,280 --> 00:34:13,460
available for the ten years and there's

00:34:12,020 --> 00:34:17,140
many hardware partners that are making

00:34:13,460 --> 00:34:19,460
either songs or boards related to that

00:34:17,140 --> 00:34:22,130
software right now if you're going

00:34:19,460 --> 00:34:23,270
through Lennar oh there's the Debian

00:34:22,130 --> 00:34:24,980
build if you want to prototype on

00:34:23,270 --> 00:34:27,380
something if you're really going to do

00:34:24,980 --> 00:34:30,520
and you could commercialize on that as

00:34:27,380 --> 00:34:33,080
well if you want to use openembedded

00:34:30,520 --> 00:34:37,490
certainly that's another path that you

00:34:33,080 --> 00:34:40,580
can do the villain are right now updates

00:34:37,490 --> 00:34:42,890
every time there's a new open embedded

00:34:40,580 --> 00:34:44,570
release they'll rebase they're open

00:34:42,890 --> 00:34:46,820
embedded on that so if you're going to

00:34:44,570 --> 00:34:48,350
roll with the open embedded releases and

00:34:46,820 --> 00:34:50,419
you choose open embedded then then

00:34:48,350 --> 00:34:52,460
that's basically your path forward if

00:34:50,419 --> 00:34:53,929
you're going to freeze then you've got

00:34:52,460 --> 00:34:55,940
to decide who's going to do this report

00:34:53,929 --> 00:34:59,210
for you so it's not say that it's

00:34:55,940 --> 00:35:03,610
Qualcomm's issue per se to do that

00:34:59,210 --> 00:35:03,610
choice these choices are yours but but

00:35:12,520 --> 00:35:16,220
correct well anything it's in the

00:35:14,420 --> 00:35:19,100
upstream colonel that supports that

00:35:16,220 --> 00:35:21,080
device should not likely be removed from

00:35:19,100 --> 00:35:22,850
it babe there's basically like old

00:35:21,080 --> 00:35:24,260
platforms and and the maintainer would

00:35:22,850 --> 00:35:26,210
ask Qualcomm is anyone using this

00:35:24,260 --> 00:35:27,860
anymore should we remove it or not if

00:35:26,210 --> 00:35:29,300
it's already supported in the upstream

00:35:27,860 --> 00:35:46,790
colonel it's not gonna banish overnight

00:35:29,300 --> 00:35:52,810
I know there's not I don't think there's

00:35:46,790 --> 00:35:55,100
a anyone who's saying that there's a

00:35:52,810 --> 00:35:56,540
long-term commitment to support

00:35:55,100 --> 00:35:58,340
something which is already supported it

00:35:56,540 --> 00:35:59,720
didn't I don't think that if it's

00:35:58,340 --> 00:36:06,130
supported in the upstream colonel

00:35:59,720 --> 00:36:06,130
yeah Jeff Christian yeah

00:36:09,530 --> 00:36:13,230
you're building the tool chain three

00:36:11,730 --> 00:36:15,840
times you're building the tool chain

00:36:13,230 --> 00:36:17,520
you're building the Canadian cross tool

00:36:15,840 --> 00:36:18,540
chain or the the bootstrap tool chain

00:36:17,520 --> 00:36:22,850
and then you're building the tool chain

00:36:18,540 --> 00:36:22,850
and then you can build the bill yeah oh

00:36:26,990 --> 00:36:40,700
yeah yeah for ten see

00:36:48,480 --> 00:36:52,550
correct and it is supported upstream

00:36:54,470 --> 00:37:00,440
through video for the next v4l - I

00:37:13,280 --> 00:37:18,060
believe there are the openmax drivers

00:37:15,510 --> 00:37:36,300
that are in the 410 see that's yes

00:37:18,060 --> 00:37:38,730
that's sure so it's a zero copy pipeline

00:37:36,300 --> 00:37:43,369
that Linares put together for the

00:37:38,730 --> 00:37:43,369
upstream support for the video core

00:37:45,320 --> 00:37:49,440
there's the open I believe I believe is

00:37:47,670 --> 00:37:51,180
based on the open max il components

00:37:49,440 --> 00:37:55,200
wrapped around ad restreamer layer or

00:37:51,180 --> 00:37:56,760
wrapped around vehicle so the other

00:37:55,200 --> 00:37:59,180
parts are there you can leverage those

00:37:56,760 --> 00:37:59,180
directly

00:38:06,549 --> 00:38:11,869
yeah yeah lonardo guys are probably the

00:38:09,500 --> 00:38:16,210
best guys to talk to you right there any

00:38:11,869 --> 00:38:18,560
other questions comments Corrections

00:38:16,210 --> 00:38:22,850
great thank you everybody for coming

00:38:18,560 --> 00:38:22,850

YouTube URL: https://www.youtube.com/watch?v=IkOMsIv-ITA


