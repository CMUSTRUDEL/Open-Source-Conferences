Title: Real-World Yocto: Getting the Most out of Your Build System - Stephano Cetola, Intel
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Real-World Yocto: Getting the Most out of Your Build System - Stephano Cetola, Intel

Yocto is a collection of tools with lots to offer and plenty of places to get lost. Over the past 5 years Stephano has worked with multiple teams using Yocto and OpenEmbedded. This talk hopes to share his experiences and explore some of the tools used to help projects succeed. This talk will cover some of the most commonly asked questions as well as many often-missed tips & tricks including: practicle examples of Shared State Cache, using package feeds for faster app development, and creating bootable images using the OpenEmbedded Image Creator (wic). 

About Stephano Cetola
Stephano Cetola is an Embedded Software Engineer at Intel where he contributes to the Yocto Project. His main focus over the past 2 years has been enabling product teams using Yocto to increase their effectiveness while giving back to the Yocto community. Before joining Intel, Stephano worked on a small team of engineers bringing a suite of embedded display modules to market. Throughout his career he has used his unconventional background and training to create unique if occasionally over-engineered solutions. In his spare time he enjoys breaking and sometimes building electronics.
Captions: 
	00:00:00,030 --> 00:00:03,540
did you raise your hand if you consider

00:00:01,530 --> 00:00:05,879
yourself to be relatively new to Yocto

00:00:03,540 --> 00:00:09,389
so you've only done say one or two

00:00:05,879 --> 00:00:12,030
builds or maybe one or two products okay

00:00:09,389 --> 00:00:13,200
and then raise your hand if you consider

00:00:12,030 --> 00:00:14,759
yourself to be sort of an old hand

00:00:13,200 --> 00:00:16,379
you've done this quite a few times and

00:00:14,759 --> 00:00:17,760
you feel pretty comfortable and you're

00:00:16,379 --> 00:00:19,680
just okay well this is good there's a

00:00:17,760 --> 00:00:21,330
good mix okay so for the people that

00:00:19,680 --> 00:00:23,130
raised their hand and said they're

00:00:21,330 --> 00:00:26,010
relatively new I'm gonna move a little

00:00:23,130 --> 00:00:28,830
quick but at the end is contact

00:00:26,010 --> 00:00:32,099
information so please download my slides

00:00:28,830 --> 00:00:33,899
and don't hesitate to email me or tweet

00:00:32,099 --> 00:00:37,800
at me or whatever your preference is I'm

00:00:33,899 --> 00:00:40,230
happy to answer questions so thank you

00:00:37,800 --> 00:00:41,460
for coming and a little bit about it

00:00:40,230 --> 00:00:44,520
myself

00:00:41,460 --> 00:00:46,079
so I work for Intel and I work

00:00:44,520 --> 00:00:49,710
contributing full-time to the octo

00:00:46,079 --> 00:00:52,050
project my chief concern at work is

00:00:49,710 --> 00:00:54,449
identifying pain points for customers

00:00:52,050 --> 00:00:56,219
and then either resolving those pain

00:00:54,449 --> 00:01:00,210
points or figuring out what needs to

00:00:56,219 --> 00:01:01,320
change upstream to fix those and then I

00:01:00,210 --> 00:01:04,890
work with both internal and external

00:01:01,320 --> 00:01:06,600
customers and the goal is to make

00:01:04,890 --> 00:01:09,240
everyone's development more productive

00:01:06,600 --> 00:01:11,909
and faster so I'd like to share that

00:01:09,240 --> 00:01:13,950
goal with you here today before I get

00:01:11,909 --> 00:01:15,900
started though I'm going to plug the

00:01:13,950 --> 00:01:18,030
other talks that are going on for Yocto

00:01:15,900 --> 00:01:20,340
there's still a few left tomorrow in

00:01:18,030 --> 00:01:22,350
particular tim whirlings talk I highly

00:01:20,340 --> 00:01:23,549
recommend covers some of the stuff I'll

00:01:22,350 --> 00:01:25,740
be talking about here but in much more

00:01:23,549 --> 00:01:27,119
detail and then also a Yocto project

00:01:25,740 --> 00:01:29,460
developer Day which is going to be on

00:01:27,119 --> 00:01:31,140
Thursday I'm actually going to be

00:01:29,460 --> 00:01:33,960
teaching a session there on package

00:01:31,140 --> 00:01:35,159
feeds and that's going to go into depth

00:01:33,960 --> 00:01:39,420
and a lot of the things that I talked

00:01:35,159 --> 00:01:41,130
about here today so let's get started by

00:01:39,420 --> 00:01:42,659
taking some time off and actually just

00:01:41,130 --> 00:01:45,899
talking about the system and the

00:01:42,659 --> 00:01:47,520
benefits it has so one of the things I

00:01:45,899 --> 00:01:49,259
realized interacting with customers is

00:01:47,520 --> 00:01:52,470
people don't really understand why

00:01:49,259 --> 00:01:53,909
they're using Yocto and what I hear said

00:01:52,470 --> 00:01:56,009
over and over again and I really like is

00:01:53,909 --> 00:01:58,950
that Yocto is essentially a line John in

00:01:56,009 --> 00:02:01,140
the sand of open embedded so we're

00:01:58,950 --> 00:02:03,450
picking certain revisions certain

00:02:01,140 --> 00:02:06,540
versions of software we're drawing a

00:02:03,450 --> 00:02:06,750
line across those but then we're testing

00:02:06,540 --> 00:02:09,570
the

00:02:06,750 --> 00:02:11,760
and that's the part that people miss so

00:02:09,570 --> 00:02:13,740
we have underneath the link to Pocky is

00:02:11,760 --> 00:02:15,780
a link to our continuous integration the

00:02:13,740 --> 00:02:17,910
Auto Builder now you don't need to know

00:02:15,780 --> 00:02:19,680
anything about the auto builder but what

00:02:17,910 --> 00:02:22,200
you need to know is that we are on a

00:02:19,680 --> 00:02:24,510
daily basis testing four different

00:02:22,200 --> 00:02:26,610
architectures on something like six

00:02:24,510 --> 00:02:30,330
different distributions to do the build

00:02:26,610 --> 00:02:32,340
and these tests are being sure that the

00:02:30,330 --> 00:02:34,440
versions of software we've picked for

00:02:32,340 --> 00:02:37,050
our release or going to be tested for

00:02:34,440 --> 00:02:39,060
compatibility and performance so by

00:02:37,050 --> 00:02:40,830
choosing to use Yocto and one of our

00:02:39,060 --> 00:02:43,200
releases instead of just rolling your

00:02:40,830 --> 00:02:44,910
own open embedded distribution you are

00:02:43,200 --> 00:02:46,440
going to get the benefit of all those

00:02:44,910 --> 00:02:47,430
tests that we're doing and if you

00:02:46,440 --> 00:02:50,100
glanced at one of the links there

00:02:47,430 --> 00:02:51,690
there's downloads Yocto project org they

00:02:50,100 --> 00:02:53,760
happen to have a BeagleBone and want to

00:02:51,690 --> 00:02:56,370
test that hardware we provide you with

00:02:53,760 --> 00:02:58,040
SDKs and images so you don't have to

00:02:56,370 --> 00:03:00,630
build it you can just go pull it down

00:02:58,040 --> 00:03:02,040
obviously we have a bug tracker to keep

00:03:00,630 --> 00:03:04,110
track of all the bugs we find when those

00:03:02,040 --> 00:03:06,420
versions of software do not build

00:03:04,110 --> 00:03:09,120
correctly so you can go take a look at

00:03:06,420 --> 00:03:11,640
our our ever stream or have never any

00:03:09,120 --> 00:03:13,380
stream of bugs and while I had a whole

00:03:11,640 --> 00:03:15,450
bunch of links up on the screen I wanted

00:03:13,380 --> 00:03:17,430
to add that link to layers that open

00:03:15,450 --> 00:03:21,030
embedded org not enough people know

00:03:17,430 --> 00:03:22,799
about this so let's say you have your

00:03:21,030 --> 00:03:25,680
build and you're looking to add a piece

00:03:22,799 --> 00:03:27,510
of software you don't want to have to

00:03:25,680 --> 00:03:29,190
write that recipe yourself so someone

00:03:27,510 --> 00:03:32,310
must have written that recipe already

00:03:29,190 --> 00:03:33,090
your first port of call is layers open

00:03:32,310 --> 00:03:35,459
embedded org

00:03:33,090 --> 00:03:36,980
type click on recipes and type the name

00:03:35,459 --> 00:03:39,120
of the software you're looking for

00:03:36,980 --> 00:03:40,769
that's the first place you go the next

00:03:39,120 --> 00:03:42,390
place you go is Google and then after

00:03:40,769 --> 00:03:43,530
that I would say you should go to dev

00:03:42,390 --> 00:03:45,720
tool but you'll be writing your own

00:03:43,530 --> 00:03:48,810
recipe so I was taking advantage of

00:03:45,720 --> 00:03:51,150
having links on the screen so that's

00:03:48,810 --> 00:03:52,500
that's a general overview and this is a

00:03:51,150 --> 00:03:53,880
general overview of some of the concepts

00:03:52,500 --> 00:03:55,440
we talked about I think for the most

00:03:53,880 --> 00:03:57,690
part even the people who are relatively

00:03:55,440 --> 00:04:00,870
new to Yocto in the room have an idea of

00:03:57,690 --> 00:04:03,000
what these I what these concepts are for

00:04:00,870 --> 00:04:05,070
the concept of a distro which abstract

00:04:03,000 --> 00:04:07,560
sout things like the UI in which G Lipsy

00:04:05,070 --> 00:04:10,100
you're using the concept of a machine

00:04:07,560 --> 00:04:12,030
that obstructs out the hardware details

00:04:10,100 --> 00:04:14,070
but the question I'd like to answer

00:04:12,030 --> 00:04:17,549
today is how we take these concepts and

00:04:14,070 --> 00:04:19,859
build useful software with them so we

00:04:17,549 --> 00:04:20,209
take these concepts that we build off of

00:04:19,859 --> 00:04:23,300
them

00:04:20,209 --> 00:04:24,889
different layers and I'm using layers in

00:04:23,300 --> 00:04:28,460
the plural there it's very important you

00:04:24,889 --> 00:04:31,039
remember that because the layers that we

00:04:28,460 --> 00:04:33,289
build aren't inherently structured with

00:04:31,039 --> 00:04:35,990
distros and hardware's but the idea is

00:04:33,289 --> 00:04:39,319
that you can use this abstraction layer

00:04:35,990 --> 00:04:42,080
to form a set of layers that will make

00:04:39,319 --> 00:04:43,580
your life easier down the road so I

00:04:42,080 --> 00:04:45,259
think we all have a basic idea of these

00:04:43,580 --> 00:04:47,210
concepts but one of the things that

00:04:45,259 --> 00:04:50,030
people tend to do is they tend to lump

00:04:47,210 --> 00:04:51,680
everything into one giant layer and I

00:04:50,030 --> 00:04:53,180
see this all the time and it's a

00:04:51,680 --> 00:04:54,889
relatively quick way to get your build

00:04:53,180 --> 00:04:57,440
started you put all of your distro

00:04:54,889 --> 00:04:59,000
information your I'm using an RFID

00:04:57,440 --> 00:05:00,639
example here but you put your distro

00:04:59,000 --> 00:05:02,270
information all the hardware

00:05:00,639 --> 00:05:03,800
requirements that you have and all of

00:05:02,270 --> 00:05:06,410
your software all into one giant later

00:05:03,800 --> 00:05:08,300
called my companies layer and then you

00:05:06,410 --> 00:05:09,860
ship your product and while that is a

00:05:08,300 --> 00:05:12,590
quick way to do it and we'll certainly

00:05:09,860 --> 00:05:14,449
be effective I'm here to stop you from

00:05:12,590 --> 00:05:16,639
doing that because what you're doing is

00:05:14,449 --> 00:05:18,979
you're you're making future use life

00:05:16,639 --> 00:05:19,970
painful so you don't see it yet but down

00:05:18,979 --> 00:05:21,380
the road you're gonna be kicking

00:05:19,970 --> 00:05:22,610
yourself for doing this what its gonna

00:05:21,380 --> 00:05:24,560
make it's gonna make upgrading your

00:05:22,610 --> 00:05:26,509
software really hard it's gonna make

00:05:24,560 --> 00:05:27,949
upgrading your hardware or changing the

00:05:26,509 --> 00:05:30,650
product that you ship much more

00:05:27,949 --> 00:05:32,509
difficult and because you're all going

00:05:30,650 --> 00:05:35,449
to upgrade to the latest version of

00:05:32,509 --> 00:05:38,240
Yocto at some point it's gonna make that

00:05:35,449 --> 00:05:40,580
really hard because no one here is I'm

00:05:38,240 --> 00:05:42,440
busy right everyone's running on pyroar

00:05:40,580 --> 00:05:45,259
yeah ok so you want to raise your hands

00:05:42,440 --> 00:05:46,219
ok so the goal is multiple layers that's

00:05:45,259 --> 00:05:48,469
one of the ideas I want to get you

00:05:46,219 --> 00:05:50,300
across make sure you're you're thinking

00:05:48,469 --> 00:05:51,530
about future you make sure you're

00:05:50,300 --> 00:05:54,759
thinking about what it's like when you

00:05:51,530 --> 00:05:57,800
do finally get to upgrade to 2.4 to Roco

00:05:54,759 --> 00:06:00,199
think about what happens when you need

00:05:57,800 --> 00:06:01,940
to rethink your hardware because that's

00:06:00,199 --> 00:06:03,440
gonna happen your boss is gonna walk in

00:06:01,940 --> 00:06:05,240
and put something new down on your desk

00:06:03,440 --> 00:06:07,009
and expect it all to work in the layer

00:06:05,240 --> 00:06:08,300
system you've built so if you have

00:06:07,009 --> 00:06:09,800
everything chunked up into one layer

00:06:08,300 --> 00:06:12,469
you've just made your life really

00:06:09,800 --> 00:06:14,930
difficult so my example here as I said

00:06:12,469 --> 00:06:16,130
is just an RFID product it's an RF

00:06:14,930 --> 00:06:18,590
product that you're making but when your

00:06:16,130 --> 00:06:20,870
boss comes in and drops a web kiosk on

00:06:18,590 --> 00:06:22,849
your desk and says of course this is all

00:06:20,870 --> 00:06:24,919
going to work in your layer scheme you

00:06:22,849 --> 00:06:26,599
can say yes if you separated things out

00:06:24,919 --> 00:06:28,490
so when you separate out your distro

00:06:26,599 --> 00:06:30,110
layer it makes it easier for you to keep

00:06:28,490 --> 00:06:31,940
a couple of different distros in there

00:06:30,110 --> 00:06:34,160
maybe you have a frame buffer and an X

00:06:31,940 --> 00:06:36,770
11 layer so a really complicated UI and

00:06:34,160 --> 00:06:39,410
really simple UI if your hardware uses

00:06:36,770 --> 00:06:41,090
different different architectures or

00:06:39,410 --> 00:06:43,070
even if you just don't want to have

00:06:41,090 --> 00:06:44,600
those hardware's mingling together so

00:06:43,070 --> 00:06:46,970
video really doesn't have anything to do

00:06:44,600 --> 00:06:48,410
with RF so separating those out into

00:06:46,970 --> 00:06:50,690
different layers makes it easier for you

00:06:48,410 --> 00:06:51,770
then to distribute these so now I know

00:06:50,690 --> 00:06:54,020
you might not be distributing your

00:06:51,770 --> 00:06:55,910
layers to customers but think about the

00:06:54,020 --> 00:06:57,710
internal distributions that you do

00:06:55,910 --> 00:06:59,390
working on your team and handing this

00:06:57,710 --> 00:07:01,010
off to your teammates you want these

00:06:59,390 --> 00:07:04,480
layers to make sense and you want them

00:07:01,010 --> 00:07:05,930
to be easy to modularly remove and add

00:07:04,480 --> 00:07:07,760
software's another great example

00:07:05,930 --> 00:07:09,410
obviously if you're gonna be having

00:07:07,760 --> 00:07:11,510
things like Python living with things

00:07:09,410 --> 00:07:13,370
like C code if they don't have anything

00:07:11,510 --> 00:07:15,230
to do with each other those separations

00:07:13,370 --> 00:07:17,240
of concern mean that you can ship the

00:07:15,230 --> 00:07:19,970
manufacturing people just the thing they

00:07:17,240 --> 00:07:22,730
need or ship the you know the QA team

00:07:19,970 --> 00:07:25,220
exactly the layers they care about the

00:07:22,730 --> 00:07:27,530
idea here is to make layers less painful

00:07:25,220 --> 00:07:30,380
to change by not having them all in one

00:07:27,530 --> 00:07:31,670
group so basically you're taking the

00:07:30,380 --> 00:07:34,040
requirements and allowing the

00:07:31,670 --> 00:07:37,700
requirements to change while keeping

00:07:34,040 --> 00:07:39,800
your layers in a manageable state so

00:07:37,700 --> 00:07:41,330
I've talked about one of the biggest

00:07:39,800 --> 00:07:42,560
pain points I see which is everyone

00:07:41,330 --> 00:07:44,660
throwing everything to the same layer

00:07:42,560 --> 00:07:47,570
but over the past few years I've

00:07:44,660 --> 00:07:50,690
collected a set of tools that I've

00:07:47,570 --> 00:07:52,760
learned about and a set of really tips

00:07:50,690 --> 00:07:54,500
and tricks that I realized will make

00:07:52,760 --> 00:07:56,150
everyone's life easier if we talk about

00:07:54,500 --> 00:07:57,919
them more and a lot of them are buried

00:07:56,150 --> 00:08:00,560
in the complexity that is the octo

00:07:57,919 --> 00:08:03,740
project so the first one I'm going to

00:08:00,560 --> 00:08:05,270
talk about is may seem a little simple

00:08:03,740 --> 00:08:10,040
but I think it's a concept that everyone

00:08:05,270 --> 00:08:11,720
needs to rethink so Yocto generates some

00:08:10,040 --> 00:08:13,900
image something you're going to put onto

00:08:11,720 --> 00:08:17,150
some media and try boot off of

00:08:13,900 --> 00:08:20,180
traditionally we've made an ISO 9660 a

00:08:17,150 --> 00:08:22,130
secluded LCD and I'm sure most of you

00:08:20,180 --> 00:08:23,780
out there pull some vendor layer in and

00:08:22,130 --> 00:08:27,560
that vendor layer is then going to give

00:08:23,780 --> 00:08:30,500
you some customized piece of bootable

00:08:27,560 --> 00:08:33,469
image whether that be an SD card or NAND

00:08:30,500 --> 00:08:35,900
and you're relying on that to do just

00:08:33,469 --> 00:08:37,700
the right thing for you and in the past

00:08:35,900 --> 00:08:39,620
it's been really hard to then change

00:08:37,700 --> 00:08:42,589
that so if you wanted to add multiple

00:08:39,620 --> 00:08:44,000
partitions or you know heaven forfend if

00:08:42,589 --> 00:08:45,530
you were ever try and do some sort of

00:08:44,000 --> 00:08:47,930
layered architecture where you're

00:08:45,530 --> 00:08:48,350
layering read-only and read right on top

00:08:47,930 --> 00:08:50,720
of each

00:08:48,350 --> 00:08:51,590
that used to be really difficult so

00:08:50,720 --> 00:08:53,210
there's been a tool that we've been

00:08:51,590 --> 00:08:55,550
working on for a while called wick and

00:08:53,210 --> 00:08:57,140
wick stands for open embedded image

00:08:55,550 --> 00:09:00,680
creator so I admit those letters are a

00:08:57,140 --> 00:09:02,540
little confusing but it is a catchy name

00:09:00,680 --> 00:09:04,580
so what wick is gonna do is wick is

00:09:02,540 --> 00:09:07,670
gonna read from what we call a kickstart

00:09:04,580 --> 00:09:10,630
file a wks file and this is gonna allow

00:09:07,670 --> 00:09:12,920
you to generate custom partitions and

00:09:10,630 --> 00:09:15,110
custom media that you're then going to

00:09:12,920 --> 00:09:17,000
burn to so for example you might have

00:09:15,110 --> 00:09:19,340
your manufacturing expects to just get

00:09:17,000 --> 00:09:21,110
an SD card from you and and some of your

00:09:19,340 --> 00:09:23,510
less careful customers may boot off of

00:09:21,110 --> 00:09:25,640
SD cards in the field but you also might

00:09:23,510 --> 00:09:27,320
want a boot off of nand or boot off of

00:09:25,640 --> 00:09:29,270
nor and have your filesystem in and

00:09:27,320 --> 00:09:31,430
these kickstart files allow you to

00:09:29,270 --> 00:09:34,070
separate these ideas out very cleanly

00:09:31,430 --> 00:09:36,560
and then reuse them and this way you're

00:09:34,070 --> 00:09:40,360
not writing a custom DB class every time

00:09:36,560 --> 00:09:42,500
you want a new type of media to boot to

00:09:40,360 --> 00:09:44,210
so I really encourage you to go look at

00:09:42,500 --> 00:09:46,810
wick there's lots of really interesting

00:09:44,210 --> 00:09:49,970
little tricks that it can do for example

00:09:46,810 --> 00:09:51,860
if you've generated a wick image there

00:09:49,970 --> 00:09:53,570
actually is a tool inside of wick that

00:09:51,860 --> 00:09:56,330
will let you copy files into that image

00:09:53,570 --> 00:10:00,530
or remove files from it

00:09:56,330 --> 00:10:02,180
you can also just LS a directory inside

00:10:00,530 --> 00:10:03,890
your image so it allows you a level of

00:10:02,180 --> 00:10:05,240
introspection into that thing you just

00:10:03,890 --> 00:10:08,060
generated whereas before it used to just

00:10:05,240 --> 00:10:10,340
be a black box that UD deed to some

00:10:08,060 --> 00:10:11,750
location and hoped that it worked and

00:10:10,340 --> 00:10:13,100
when it didn't you thought oh well

00:10:11,750 --> 00:10:16,790
hopefully something is cruft let's try

00:10:13,100 --> 00:10:19,310
again and speaking of DD Wyck takes

00:10:16,790 --> 00:10:20,510
advantage of be map tools got a quick

00:10:19,310 --> 00:10:25,190
raise of hands of everyone who knows

00:10:20,510 --> 00:10:26,420
what b map tools is oh that is so sad ok

00:10:25,190 --> 00:10:30,380
so I'm really glad I'm talking about

00:10:26,420 --> 00:10:32,540
this so DD as you all know is not a very

00:10:30,380 --> 00:10:34,070
intelligent piece of software and I'm

00:10:32,540 --> 00:10:36,110
not coming down on DD DD is wonderful

00:10:34,070 --> 00:10:38,510
but its job is to take bits from point A

00:10:36,110 --> 00:10:41,960
copy bits to point B all right did I

00:10:38,510 --> 00:10:44,120
just summarize DD pretty well okay so B

00:10:41,960 --> 00:10:47,030
map tool realizes well you're gonna copy

00:10:44,120 --> 00:10:49,490
some useful bits from point A to point B

00:10:47,030 --> 00:10:51,260
but at some point you're gonna copy a

00:10:49,490 --> 00:10:53,240
bunch of zeros why don't I just skip

00:10:51,260 --> 00:10:55,550
that so it does a sparse copy basically

00:10:53,240 --> 00:10:57,440
so wick takes advantage of this by

00:10:55,550 --> 00:10:59,330
default I believe by default in arauco

00:10:57,440 --> 00:11:03,050
we are now spitting out dot wick files

00:10:59,330 --> 00:11:06,320
and da wick me map

00:11:03,050 --> 00:11:09,380
so my apologies for adding one more

00:11:06,320 --> 00:11:10,910
extension to our lives but by using B

00:11:09,380 --> 00:11:12,890
map tools and pointing it at that wick

00:11:10,910 --> 00:11:17,120
file it'll look for that same file name

00:11:12,890 --> 00:11:20,200
dot B map and it will basically you're

00:11:17,120 --> 00:11:23,420
talking an order of magnitude faster so

00:11:20,200 --> 00:11:26,450
go home after this take a 16 gigabyte

00:11:23,420 --> 00:11:28,640
ubuntu image and use B map tools to put

00:11:26,450 --> 00:11:30,650
it on a SD card and then you will never

00:11:28,640 --> 00:11:32,990
ever ever use DD again unless you have

00:11:30,650 --> 00:11:36,680
to okay that's all I'll say about that

00:11:32,990 --> 00:11:37,940
so another thing that that I find

00:11:36,680 --> 00:11:39,290
customers don't know about or they know

00:11:37,940 --> 00:11:40,700
about and they don't use because they

00:11:39,290 --> 00:11:42,650
think it might be too hard or they're

00:11:40,700 --> 00:11:45,230
not sure exactly how it works is S state

00:11:42,650 --> 00:11:46,880
cache one of the biggest complaints

00:11:45,230 --> 00:11:48,770
Yocto has is that it takes a long time

00:11:46,880 --> 00:11:50,450
to build and it does if you put it

00:11:48,770 --> 00:11:52,160
side-by-side with someone like Bill Drew

00:11:50,450 --> 00:11:53,900
you are gonna win with build route for

00:11:52,160 --> 00:11:55,310
speed every time but what a lot of

00:11:53,900 --> 00:11:56,960
people don't understand is that Yocto is

00:11:55,310 --> 00:12:00,320
doing a lot of things behind the scenes

00:11:56,960 --> 00:12:02,840
to make a robust build system and that's

00:12:00,320 --> 00:12:04,460
what's taking all that time so because

00:12:02,840 --> 00:12:06,410
we think those things are important like

00:12:04,460 --> 00:12:09,140
specific debug flags and build history

00:12:06,410 --> 00:12:10,460
and package management we're doing all

00:12:09,140 --> 00:12:12,020
that but we realize you need to speed up

00:12:10,460 --> 00:12:14,690
your build so we've introduced s state

00:12:12,020 --> 00:12:17,600
st by default is going to show up in

00:12:14,690 --> 00:12:19,550
your build directory so my first piece

00:12:17,600 --> 00:12:21,410
of advice is remove that from your build

00:12:19,550 --> 00:12:22,640
directory but that's somewhere else we

00:12:21,410 --> 00:12:24,350
have variables that let you put it

00:12:22,640 --> 00:12:28,430
wherever you want me personally I put it

00:12:24,350 --> 00:12:30,350
in opt Yocto and the idea here is being

00:12:28,430 --> 00:12:32,030
you might have 10 build directory

00:12:30,350 --> 00:12:33,830
someday especially if you have a very

00:12:32,030 --> 00:12:35,150
aggressive sales team you're gonna

00:12:33,830 --> 00:12:36,830
probably have 10 different build

00:12:35,150 --> 00:12:38,270
directories at any one time make sure

00:12:36,830 --> 00:12:39,710
all those build directories are taking

00:12:38,270 --> 00:12:41,390
advantage of downloads and taking

00:12:39,710 --> 00:12:43,160
advantage of s state cache you don't

00:12:41,390 --> 00:12:45,920
ever want to download something twice

00:12:43,160 --> 00:12:47,390
and for that matter if your whole team

00:12:45,920 --> 00:12:50,630
is not sharing a downloads directory

00:12:47,390 --> 00:12:52,460
please please please go do that rsync

00:12:50,630 --> 00:12:53,900
and if s mount something whatever you

00:12:52,460 --> 00:12:56,060
have to do it saves you that amount of

00:12:53,900 --> 00:12:58,310
time and likewise you should be using s

00:12:56,060 --> 00:13:00,620
state mirrors so and I'll talk about

00:12:58,310 --> 00:13:02,000
these in another slide but one of the

00:13:00,620 --> 00:13:04,220
things I do to make this much much

00:13:02,000 --> 00:13:06,970
easier for myself is site comm so site

00:13:04,220 --> 00:13:09,410
Kampf is just a configuration file that

00:13:06,970 --> 00:13:11,870
bitbake will look for when it starts up

00:13:09,410 --> 00:13:14,090
inside the comp directory so what I do

00:13:11,870 --> 00:13:15,110
is I have a script that starts up my

00:13:14,090 --> 00:13:17,209
build directory every

00:13:15,110 --> 00:13:20,120
time for me and copies of my site Kampf

00:13:17,209 --> 00:13:21,980
in there my site comm sets my build my

00:13:20,120 --> 00:13:24,410
download directory and since my estate

00:13:21,980 --> 00:13:26,720
directory so I know I'm at least getting

00:13:24,410 --> 00:13:29,570
of that bonus every single time it also

00:13:26,720 --> 00:13:30,860
sets my mirrors and that's the next

00:13:29,570 --> 00:13:32,720
thing I'm going to talk about everyone

00:13:30,860 --> 00:13:34,310
thinks about estate mirrors as a our

00:13:32,720 --> 00:13:36,350
team probably won't benefit from it or

00:13:34,310 --> 00:13:39,290
oh I don't know how useful it is it is

00:13:36,350 --> 00:13:41,209
extremely useful last week I was talking

00:13:39,290 --> 00:13:43,279
to a documentation person on our team

00:13:41,209 --> 00:13:45,440
and he was having problems with one of

00:13:43,279 --> 00:13:48,589
the builds but he was building two dot

00:13:45,440 --> 00:13:50,240
4.1 one of our releases I showed him the

00:13:48,589 --> 00:13:51,920
link I showed him how to set it up and

00:13:50,240 --> 00:13:54,290
his build took about seven minutes

00:13:51,920 --> 00:13:55,850
because he was just pulling stuff that

00:13:54,290 --> 00:13:57,680
we had already built on the OTO builder

00:13:55,850 --> 00:13:59,420
there was no reason to rebuild any of it

00:13:57,680 --> 00:14:01,519
it looked at the shah's they were all

00:13:59,420 --> 00:14:04,519
correct and it generated a root

00:14:01,519 --> 00:14:05,570
filesystem for him so at the top of this

00:14:04,519 --> 00:14:06,740
slide I'm calling out something really

00:14:05,570 --> 00:14:08,089
important and I think this is something

00:14:06,740 --> 00:14:11,360
that a lot of people to know too

00:14:08,089 --> 00:14:14,269
so when you're when you're basing your

00:14:11,360 --> 00:14:16,220
project off of yocto Yocto is working on

00:14:14,269 --> 00:14:17,450
a branch right we have our master branch

00:14:16,220 --> 00:14:18,950
and then we have for example here we

00:14:17,450 --> 00:14:20,390
have our rocco branch that is a

00:14:18,950 --> 00:14:23,060
constantly moving target

00:14:20,390 --> 00:14:25,190
we do have an S state that's populated

00:14:23,060 --> 00:14:26,810
an estate Yocto project org for that dev

00:14:25,190 --> 00:14:28,339
branch so if you're working on there

00:14:26,810 --> 00:14:30,620
give our auto builder some time and

00:14:28,339 --> 00:14:33,410
it'll update that but if you're doing a

00:14:30,620 --> 00:14:35,690
release you want to be using the tag

00:14:33,410 --> 00:14:37,670
that we've tagged for our releases so

00:14:35,690 --> 00:14:40,279
every release even our point releases

00:14:37,670 --> 00:14:41,600
have tags associated with them when I

00:14:40,279 --> 00:14:43,519
said back at the beginning of this talk

00:14:41,600 --> 00:14:44,930
that we choose a bunch of versions and

00:14:43,519 --> 00:14:47,180
we guarantee they're gonna work and be

00:14:44,930 --> 00:14:49,490
compatible and all that only if they're

00:14:47,180 --> 00:14:50,779
on that version right there so if you're

00:14:49,490 --> 00:14:52,610
pulling off our dev branch

00:14:50,779 --> 00:14:54,709
well we're testing it out our auto

00:14:52,610 --> 00:14:56,540
builder every day but really you want to

00:14:54,709 --> 00:14:58,910
be pulling off of that 2.4 dot 1 is a

00:14:56,540 --> 00:15:00,709
great example and you should be doing

00:14:58,910 --> 00:15:03,410
the same thing we're doing when our auto

00:15:00,709 --> 00:15:05,540
builder finishes a nightly build of our

00:15:03,410 --> 00:15:07,070
dev branch it throws all that estate

00:15:05,540 --> 00:15:09,920
information up on a web server where

00:15:07,070 --> 00:15:12,769
anybody can use it when you try and go

00:15:09,920 --> 00:15:15,170
do a build off of for example 2.4 dot 1

00:15:12,769 --> 00:15:17,240
s state's gonna go look at that mirror

00:15:15,170 --> 00:15:19,610
see that all those Shahs of the same and

00:15:17,240 --> 00:15:21,829
just like my coworker it's gonna build

00:15:19,610 --> 00:15:23,209
in no time at all now obviously that's

00:15:21,829 --> 00:15:24,350
not gonna happen to be the same every

00:15:23,209 --> 00:15:25,610
time you're always going to be changing

00:15:24,350 --> 00:15:27,440
things but this will save you an

00:15:25,610 --> 00:15:28,820
exponential amount of time if you just

00:15:27,440 --> 00:15:32,000
need a base image and then need to

00:15:28,820 --> 00:15:33,020
from there also I was talking to some of

00:15:32,000 --> 00:15:35,240
the group and they wanted me to mention

00:15:33,020 --> 00:15:36,470
that if you happen to be working for a

00:15:35,240 --> 00:15:38,510
company that happens to be one of our

00:15:36,470 --> 00:15:40,550
partners we are talking about possibly

00:15:38,510 --> 00:15:42,620
making that available as a benefit to

00:15:40,550 --> 00:15:43,880
some of our Platinum members but it also

00:15:42,620 --> 00:15:44,900
brings up the fact that you should be

00:15:43,880 --> 00:15:47,300
making that available to your customers

00:15:44,900 --> 00:15:49,250
if your customers are doing builds using

00:15:47,300 --> 00:15:51,710
your layers they should be using sstate

00:15:49,250 --> 00:15:52,880
if your QA team is doing it your QA team

00:15:51,710 --> 00:15:54,410
should be pulling from SD because

00:15:52,880 --> 00:15:55,640
they're not changing anything and your

00:15:54,410 --> 00:15:56,840
manufacturing team and for whatever

00:15:55,640 --> 00:15:58,580
reason they're doing a build from

00:15:56,840 --> 00:16:02,330
scratch they should always be doing a

00:15:58,580 --> 00:16:04,340
build off of SD and again please feel

00:16:02,330 --> 00:16:06,440
free to contact me via email if you have

00:16:04,340 --> 00:16:09,620
questions if you run into any you know

00:16:06,440 --> 00:16:11,270
weird problems with sstate there are the

00:16:09,620 --> 00:16:12,830
people that wrote S state are still on

00:16:11,270 --> 00:16:14,930
our team and we still have the tools

00:16:12,830 --> 00:16:17,060
that we use to build s state available

00:16:14,930 --> 00:16:22,760
to us so we can answer any questions

00:16:17,060 --> 00:16:26,660
that you have this is my required kitten

00:16:22,760 --> 00:16:29,240
slide so along the same lines as S State

00:16:26,660 --> 00:16:30,770
there's a this another way to speed up

00:16:29,240 --> 00:16:33,470
your build so I was talking earlier and

00:16:30,770 --> 00:16:35,540
saying we're all used to the churn and

00:16:33,470 --> 00:16:36,830
burn of we burn a card right so we're

00:16:35,540 --> 00:16:38,780
using DD which hopefully all of you will

00:16:36,830 --> 00:16:40,220
go home and never do again but you're

00:16:38,780 --> 00:16:41,990
using DD you're burning something to a

00:16:40,220 --> 00:16:44,330
card you're putting it in a board you're

00:16:41,990 --> 00:16:46,070
booting it doesn't work so you take the

00:16:44,330 --> 00:16:48,050
card out you change your software you

00:16:46,070 --> 00:16:49,520
put the card back in burn it again put

00:16:48,050 --> 00:16:51,920
it back in the board boot it it's

00:16:49,520 --> 00:16:53,540
missing a library take the card out you

00:16:51,920 --> 00:16:56,210
know if you're smart maybe you're SDP in

00:16:53,540 --> 00:16:58,850
the library over but what you're missing

00:16:56,210 --> 00:17:01,820
is that Yocto is generating packages for

00:16:58,850 --> 00:17:03,170
you it's generating and in this case the

00:17:01,820 --> 00:17:05,000
example I'm using is our PMS it's

00:17:03,170 --> 00:17:07,040
generating all the RPMs that you need

00:17:05,000 --> 00:17:09,020
for your software so if you are doing a

00:17:07,040 --> 00:17:10,910
build and your build needs lib something

00:17:09,020 --> 00:17:13,460
you probably have a package called Lib

00:17:10,910 --> 00:17:15,380
something sitting in that RPM folder so

00:17:13,460 --> 00:17:19,010
Yocto has the ability to run something

00:17:15,380 --> 00:17:21,710
called packaged index I believe yes

00:17:19,010 --> 00:17:25,970
bitbake packaged index so by indexing

00:17:21,710 --> 00:17:27,500
that folder by creating what RPM is

00:17:25,970 --> 00:17:28,760
gonna look for when it needs to parse

00:17:27,500 --> 00:17:31,010
through all that information you

00:17:28,760 --> 00:17:32,720
essentially have a repo and if you look

00:17:31,010 --> 00:17:34,730
at the steps that I've added there's two

00:17:32,720 --> 00:17:37,640
steps to add package management to your

00:17:34,730 --> 00:17:40,220
board to two variables that you need to

00:17:37,640 --> 00:17:41,720
set other two variables which are option

00:17:40,220 --> 00:17:42,740
or the other variable which is optional

00:17:41,720 --> 00:17:45,770
but I think is really

00:17:42,740 --> 00:17:48,670
is the PR server host this as you change

00:17:45,770 --> 00:17:48,670
your software it's going to

00:17:52,120 --> 00:17:59,240
automatically sure we'll see the change

00:17:54,290 --> 00:18:00,770
and then the bitbake PR service you

00:17:59,240 --> 00:18:02,570
actually do need to start that server up

00:18:00,770 --> 00:18:04,250
once that's running you're gonna be

00:18:02,570 --> 00:18:06,050
generating rpms and every time you

00:18:04,250 --> 00:18:09,410
change your software those rpms will

00:18:06,050 --> 00:18:11,540
increment one version so if you've then

00:18:09,410 --> 00:18:14,210
shared that folder in this example I use

00:18:11,540 --> 00:18:16,130
an example of both lady and also twisted

00:18:14,210 --> 00:18:18,950
I use twisted because it's really quick

00:18:16,130 --> 00:18:21,110
it's simple and I can stop it or start

00:18:18,950 --> 00:18:22,400
it sort of willy-nilly but you could

00:18:21,110 --> 00:18:25,010
have a permanent set up with something

00:18:22,400 --> 00:18:26,840
like lady or Apache and share that RPM

00:18:25,010 --> 00:18:28,160
folder and all when I say the RPM folder

00:18:26,840 --> 00:18:31,700
all I'm talking about is in your temp

00:18:28,160 --> 00:18:33,620
directory there's temp deploy rpm that's

00:18:31,700 --> 00:18:35,210
the folder that you need to share and if

00:18:33,620 --> 00:18:36,800
you've setup if you look up at the top

00:18:35,210 --> 00:18:38,840
there's the package feed your eyes if

00:18:36,800 --> 00:18:40,850
you set up that package feed URI when

00:18:38,840 --> 00:18:42,920
you generate your image it'll be

00:18:40,850 --> 00:18:44,210
automatically populated in there so you

00:18:42,920 --> 00:18:46,490
really don't even need to change

00:18:44,210 --> 00:18:48,170
anything on the board so by creating

00:18:46,490 --> 00:18:49,670
that package feed sharing that folder on

00:18:48,170 --> 00:18:52,070
some sort of web server and running

00:18:49,670 --> 00:18:53,720
bitbake package index you've now saved

00:18:52,070 --> 00:18:55,730
yourself the trouble of pulling that SD

00:18:53,720 --> 00:18:57,530
card and copying something on to it now

00:18:55,730 --> 00:18:59,990
on the board you can just say rpm

00:18:57,530 --> 00:19:02,059
install so a great example is when I

00:18:59,990 --> 00:19:03,800
work with customers I get a lot of

00:19:02,059 --> 00:19:05,210
customers who are brand new to Yocto and

00:19:03,800 --> 00:19:08,360
they have a product that they need to

00:19:05,210 --> 00:19:09,860
ship last week generally so what I do is

00:19:08,360 --> 00:19:12,050
I create an image for them and that

00:19:09,860 --> 00:19:13,550
image is never gonna be enough so what I

00:19:12,050 --> 00:19:16,340
do is I create the image that they think

00:19:13,550 --> 00:19:18,710
they want and then I run bitbake world a

00:19:16,340 --> 00:19:20,090
bit big world now to be fair you do

00:19:18,710 --> 00:19:22,660
remember who I work for so I'm doing

00:19:20,090 --> 00:19:25,640
this on a rather beefy server but

00:19:22,660 --> 00:19:27,320
whatever's in there layer any of the

00:19:25,640 --> 00:19:30,500
software in there bitbake world will

00:19:27,320 --> 00:19:33,260
then compile it will create a package of

00:19:30,500 --> 00:19:34,520
that I take that and I put that up for

00:19:33,260 --> 00:19:36,590
them to be able to download and then

00:19:34,520 --> 00:19:37,730
when they email me and say oh but I'm

00:19:36,590 --> 00:19:42,110
missing

00:19:37,730 --> 00:19:44,630
valgrind I just rpm install that you're

00:19:42,110 --> 00:19:46,309
done so this this saves me an immense

00:19:44,630 --> 00:19:48,260
amount of time and it can send you a

00:19:46,309 --> 00:19:49,880
save you an immense amount of time not

00:19:48,260 --> 00:19:50,840
only in your personal development when

00:19:49,880 --> 00:19:52,669
you're doing development on the board

00:19:50,840 --> 00:19:54,169
but anyone at your company or anyone

00:19:52,669 --> 00:19:55,470
externally who needs to very quickly

00:19:54,169 --> 00:19:59,519
install software

00:19:55,470 --> 00:20:02,700
oh sorry I missed one thing all the way

00:19:59,519 --> 00:20:04,169
down there at the bottom rpm oh no

00:20:02,700 --> 00:20:08,460
package we are currently testing this

00:20:04,169 --> 00:20:11,519
with rpm in Oh package so yes you can

00:20:08,460 --> 00:20:13,379
use d package and yes we will accept any

00:20:11,519 --> 00:20:16,789
of the bugs you find and no I will not

00:20:13,379 --> 00:20:16,789
be surprised when you find a bug there

00:20:17,360 --> 00:20:23,370
ok so the next next is a question that I

00:20:21,899 --> 00:20:25,289
get all the time I get this pretty

00:20:23,370 --> 00:20:28,710
constantly from customers and that's I

00:20:25,289 --> 00:20:30,629
just built my file system I booted my

00:20:28,710 --> 00:20:32,580
board and there's a file on here why is

00:20:30,629 --> 00:20:32,759
that file on my board I didn't put it

00:20:32,580 --> 00:20:34,440
there

00:20:32,759 --> 00:20:37,799
something put it there but I don't know

00:20:34,440 --> 00:20:39,269
how to find it so the first utility that

00:20:37,799 --> 00:20:40,860
I'm using there Oh a package data util a

00:20:39,269 --> 00:20:42,750
lot of people don't know this this is my

00:20:40,860 --> 00:20:44,549
first stop that I go to when I need to

00:20:42,750 --> 00:20:45,840
answer that question for them and what

00:20:44,549 --> 00:20:47,399
that's going to do is hopefully it's

00:20:45,840 --> 00:20:50,700
going to output the name of the recipe

00:20:47,399 --> 00:20:52,409
that caused that file to populate on the

00:20:50,700 --> 00:20:55,500
board so in this case I'm pointing it at

00:20:52,409 --> 00:20:56,909
bin SH and so hopefully in a simple core

00:20:55,500 --> 00:21:00,179
image minimum will build this will say

00:20:56,909 --> 00:21:02,850
busy box but you can point that any file

00:21:00,179 --> 00:21:06,090
and it will do its best to introspect

00:21:02,850 --> 00:21:08,129
your build and figure it out this is

00:21:06,090 --> 00:21:10,409
essentially the thing I do before I get

00:21:08,129 --> 00:21:11,909
grep because get grep is the natural

00:21:10,409 --> 00:21:13,620
thing to do when you're looking for how

00:21:11,909 --> 00:21:15,210
did this get in there well the file must

00:21:13,620 --> 00:21:17,850
be sitting somewhere in my layers right

00:21:15,210 --> 00:21:19,830
so those are the two most common things

00:21:17,850 --> 00:21:21,990
to do again if you're using package

00:21:19,830 --> 00:21:24,929
management you have DNF what provides as

00:21:21,990 --> 00:21:27,149
well so we switched recently from smart

00:21:24,929 --> 00:21:28,860
to DNF and the difference is huge DNF

00:21:27,149 --> 00:21:31,470
gives you a lot of introspection into

00:21:28,860 --> 00:21:33,659
what's on your board and why but keep in

00:21:31,470 --> 00:21:35,429
mind that when we do a build and we

00:21:33,659 --> 00:21:38,100
create a file system a lot of this stuff

00:21:35,429 --> 00:21:40,679
is done dynamically there are just a

00:21:38,100 --> 00:21:42,870
couple examples init scripts are a great

00:21:40,679 --> 00:21:44,850
example of a way where somewhere in our

00:21:42,870 --> 00:21:46,110
sanity it's generating a file and

00:21:44,850 --> 00:21:48,389
plopping it on the file system after you

00:21:46,110 --> 00:21:51,600
booted the system can't really tell you

00:21:48,389 --> 00:21:52,649
that if you dig into the the guts of

00:21:51,600 --> 00:21:55,259
Yocto you'll find that there are

00:21:52,649 --> 00:21:58,080
actually route FS post process commands

00:21:55,259 --> 00:21:59,669
that can be run so if someone has tried

00:21:58,080 --> 00:22:01,679
to sneak something on your board by

00:21:59,669 --> 00:22:04,919
using a root of s post bus press command

00:22:01,679 --> 00:22:07,470
these won't solve that problem and so

00:22:04,919 --> 00:22:09,480
for that I have instance number 5 which

00:22:07,470 --> 00:22:11,039
is IRC

00:22:09,480 --> 00:22:12,629
one of the things I love about working

00:22:11,039 --> 00:22:13,950
on the Yocto project and I love about

00:22:12,629 --> 00:22:16,889
the group I work with is we're all

00:22:13,950 --> 00:22:19,950
pretty friendly guys it the IRC channel

00:22:16,889 --> 00:22:21,239
is a great place to ask questions we

00:22:19,950 --> 00:22:23,399
have one of the more friendly

00:22:21,239 --> 00:22:25,320
open-source communities in my opinion so

00:22:23,399 --> 00:22:26,639
please if you find something you don't

00:22:25,320 --> 00:22:28,499
understand how I got there you used all

00:22:26,639 --> 00:22:30,360
these techniques you really just want to

00:22:28,499 --> 00:22:34,710
know post it to the chat and we'll

00:22:30,360 --> 00:22:36,720
respond another another common request

00:22:34,710 --> 00:22:37,980
is not just how did this get on my board

00:22:36,720 --> 00:22:40,080
but rather I know how this got on my

00:22:37,980 --> 00:22:42,269
board I want to change it so think of

00:22:40,080 --> 00:22:43,590
any config that you've ever ended up on

00:22:42,269 --> 00:22:45,239
your board and realize okay now I need

00:22:43,590 --> 00:22:47,639
to go write a recipe to change that

00:22:45,239 --> 00:22:49,350
config so my Apache config is wrong now

00:22:47,639 --> 00:22:51,480
I have to go write a recipe I have to go

00:22:49,350 --> 00:22:53,100
figure out what that means and we have a

00:22:51,480 --> 00:22:55,499
tool to do that for you called recipe

00:22:53,100 --> 00:22:58,619
tool and the command is a pend file so

00:22:55,499 --> 00:23:01,769
Apache config is a great example if you

00:22:58,619 --> 00:23:06,179
call recipe tool append file and point

00:23:01,769 --> 00:23:07,889
it at that config file in in the tree it

00:23:06,179 --> 00:23:09,539
will generate the recipe for you and

00:23:07,889 --> 00:23:10,559
it's a relatively simple recipe but

00:23:09,539 --> 00:23:12,480
you'll be able to throw it into your

00:23:10,559 --> 00:23:16,109
lair and you've edited that config file

00:23:12,480 --> 00:23:17,730
in three minutes instead of 15 or 30

00:23:16,109 --> 00:23:21,299
depending on what kind of day you're

00:23:17,730 --> 00:23:23,669
having the last one which kind of flows

00:23:21,299 --> 00:23:26,399
naturally from the from appending

00:23:23,669 --> 00:23:28,350
configs is the dependency tree so when

00:23:26,399 --> 00:23:29,609
you're trying to figure out why stuff is

00:23:28,350 --> 00:23:31,230
on your board you'll often be interested

00:23:29,609 --> 00:23:34,200
in how the dependency tree has worked

00:23:31,230 --> 00:23:35,730
out you might know that busybox put that

00:23:34,200 --> 00:23:38,519
on your system but what put busybox on

00:23:35,730 --> 00:23:41,149
the system bitbake has an option - gee

00:23:38,519 --> 00:23:44,129
that will generate using graph is a

00:23:41,149 --> 00:23:47,970
dependency tree for you and coming in

00:23:44,129 --> 00:23:49,980
2.5 but not out yet is oh it depends dot

00:23:47,970 --> 00:23:52,409
which will then save you from having to

00:23:49,980 --> 00:23:54,090
look at that gigantic dependency tree

00:23:52,409 --> 00:23:57,749
and instead will let you introspect

00:23:54,090 --> 00:23:59,730
specific parts in it for you and I think

00:23:57,749 --> 00:24:02,279
this gets at one of the things that most

00:23:59,730 --> 00:24:05,039
people miss with bitbake and that's that

00:24:02,279 --> 00:24:08,460
bitbake is just a normal program like

00:24:05,039 --> 00:24:10,710
every other program you use so one of

00:24:08,460 --> 00:24:12,239
the things that has is a - h option and

00:24:10,710 --> 00:24:14,580
I know it sounds silly but a lot of

00:24:12,239 --> 00:24:16,950
people don't think about it so there are

00:24:14,580 --> 00:24:18,899
tons of options inside bitbake that I

00:24:16,950 --> 00:24:21,749
use every day that people have never

00:24:18,899 --> 00:24:22,520
heard of so I poke my favorite one at

00:24:21,749 --> 00:24:24,770
the up at the

00:24:22,520 --> 00:24:26,179
because it reminds me of lunch whenever

00:24:24,770 --> 00:24:27,410
I go out to lunch and I'm gonna do a

00:24:26,179 --> 00:24:32,390
bill that I know it's gonna take forever

00:24:27,410 --> 00:24:34,970
I use - Kay what - kay is saying is I'm

00:24:32,390 --> 00:24:36,620
gonna start this build and eventually

00:24:34,970 --> 00:24:38,630
it's gonna air but I'm gonna keep

00:24:36,620 --> 00:24:40,550
building everything I can for you so

00:24:38,630 --> 00:24:42,980
that while you're off at lunch a lot of

00:24:40,550 --> 00:24:44,630
work gets done so that I use pretty much

00:24:42,980 --> 00:24:47,990
every day we already talked a little bit

00:24:44,630 --> 00:24:50,240
about the graph it is option hopefully a

00:24:47,990 --> 00:24:52,070
lot of you know about the - option the -

00:24:50,240 --> 00:24:53,840
option will output the bitbake

00:24:52,070 --> 00:24:55,340
environment so if you have questions why

00:24:53,840 --> 00:24:57,830
certain variables are set the way they

00:24:55,340 --> 00:24:59,570
are that's a great tool one of the

00:24:57,830 --> 00:25:01,429
mistakes that I see people using every

00:24:59,570 --> 00:25:03,380
day though is they're calling bitbake -

00:25:01,429 --> 00:25:04,700
e and they're piping that to grep

00:25:03,380 --> 00:25:06,980
because they want to grep through the

00:25:04,700 --> 00:25:09,559
results but you're losing a whole bunch

00:25:06,980 --> 00:25:11,240
of history around that variable so

00:25:09,559 --> 00:25:13,160
instead pipe it to less and do your

00:25:11,240 --> 00:25:14,900
search with less and what this will give

00:25:13,160 --> 00:25:16,850
you is not just that variable that was

00:25:14,900 --> 00:25:19,309
set but the variables around that and

00:25:16,850 --> 00:25:23,059
give you some context into that it's a

00:25:19,309 --> 00:25:25,040
common mistake the other another option

00:25:23,059 --> 00:25:26,809
this is - capital C which I've made

00:25:25,040 --> 00:25:28,100
super bold so they're human can remember

00:25:26,809 --> 00:25:31,040
Shawn actually mentioned this in his

00:25:28,100 --> 00:25:34,309
talk yesterday so - C invalidates a

00:25:31,040 --> 00:25:36,230
stamp so we talked about SD cache a

00:25:34,309 --> 00:25:38,960
little bit and I was mentioning earlier

00:25:36,230 --> 00:25:41,540
SD cache can have its own talk it's a

00:25:38,960 --> 00:25:43,490
really complex system but the idea is

00:25:41,540 --> 00:25:47,120
that it's generating a hash of the input

00:25:43,490 --> 00:25:48,980
and tagging that to the output so for

00:25:47,120 --> 00:25:51,440
example and do unpack it's going to look

00:25:48,980 --> 00:25:53,600
at the input to do impact do some sort

00:25:51,440 --> 00:25:55,190
of magic hash on that and then look at

00:25:53,600 --> 00:25:58,309
that hash and if at any point that hash

00:25:55,190 --> 00:26:01,100
has changed its gonna redo that task so

00:25:58,309 --> 00:26:03,500
in this case do one pack so if I know I

00:26:01,100 --> 00:26:05,420
want to undo do pet do unpack that's

00:26:03,500 --> 00:26:08,630
something I need to happen if you just

00:26:05,420 --> 00:26:11,780
use - capital C it'll go back to that

00:26:08,630 --> 00:26:13,040
task undo the hash and then undo

00:26:11,780 --> 00:26:14,510
everything afterwards right because all

00:26:13,040 --> 00:26:16,340
those other hashes are now invalidated

00:26:14,510 --> 00:26:18,020
they're all based on that do unpack hash

00:26:16,340 --> 00:26:20,240
but you could do that for anything you

00:26:18,020 --> 00:26:22,460
do it for do configure do install pick

00:26:20,240 --> 00:26:24,590
your step so it's much much more

00:26:22,460 --> 00:26:27,940
fine-grained than things like clean or

00:26:24,590 --> 00:26:30,500
clean estate it's a very precise tool

00:26:27,940 --> 00:26:31,940
speaking of tools there are lots and

00:26:30,500 --> 00:26:34,400
lots and lots of scripts in the scripts

00:26:31,940 --> 00:26:35,750
directory and one of my tasks for this

00:26:34,400 --> 00:26:36,350
talk was to go through them all and find

00:26:35,750 --> 00:26:38,690
the ones that I

00:26:36,350 --> 00:26:40,850
it's the most like I talked about him so

00:26:38,690 --> 00:26:42,320
bitbake layers is a tool that's actually

00:26:40,850 --> 00:26:45,230
been around a while had under different

00:26:42,320 --> 00:26:47,200
names and it's a great tool when you're

00:26:45,230 --> 00:26:49,580
building layers are searching for layers

00:26:47,200 --> 00:26:51,500
it has a couple of options I'm not gonna

00:26:49,580 --> 00:26:53,059
get into details on it go take a look at

00:26:51,500 --> 00:26:55,280
it especially when you find yourself

00:26:53,059 --> 00:26:56,630
building a layer regularly you should be

00:26:55,280 --> 00:26:58,640
using you should be looking at dev tool

00:26:56,630 --> 00:27:01,640
and you should be looking at at bitbake

00:26:58,640 --> 00:27:03,830
layers dev tool is very much a talk in

00:27:01,640 --> 00:27:06,140
its own dev tool is a class on its own

00:27:03,830 --> 00:27:09,320
but there is a good talk by Tim orling

00:27:06,140 --> 00:27:12,500
from last year about that he goes into a

00:27:09,320 --> 00:27:13,640
details on how to use dev tool Shawn

00:27:12,500 --> 00:27:15,950
talked about it a little bit yesterday

00:27:13,640 --> 00:27:18,200
but if you don't consider yourself a

00:27:15,950 --> 00:27:20,450
full time kernel developer but you need

00:27:18,200 --> 00:27:23,270
to do some edits to the kernel dev tool

00:27:20,450 --> 00:27:25,010
can really be a lifesaver so if you're

00:27:23,270 --> 00:27:27,020
just looking to edit the def config and

00:27:25,010 --> 00:27:29,150
you just know that this driver right

00:27:27,020 --> 00:27:31,340
here is broken and you need to tweak

00:27:29,150 --> 00:27:33,080
that C code until it's not broken dev

00:27:31,340 --> 00:27:36,169
tool can give you an environment inside

00:27:33,080 --> 00:27:39,049
the SDK to run make and to run and to

00:27:36,169 --> 00:27:40,309
build your kernel and it'll allow you to

00:27:39,049 --> 00:27:41,809
do that in such a way that you're not

00:27:40,309 --> 00:27:43,850
having to develop your own cross

00:27:41,809 --> 00:27:45,890
environment you can use the SDKs cross

00:27:43,850 --> 00:27:47,960
environment it is also a really handy

00:27:45,890 --> 00:27:49,130
tool for generating recipes so once

00:27:47,960 --> 00:27:50,659
you've finished with something like

00:27:49,130 --> 00:27:52,490
making a small edit to the kernel rather

00:27:50,659 --> 00:27:55,010
than having to make your own patch dev

00:27:52,490 --> 00:27:56,510
tool can make the patch for you and

00:27:55,010 --> 00:27:58,909
again I'll point you at Tim's talk it's

00:27:56,510 --> 00:28:00,530
a great overview and there are tons tons

00:27:58,909 --> 00:28:03,200
of documentation is out there on the web

00:28:00,530 --> 00:28:05,299
as well I talked a little bit about OE

00:28:03,200 --> 00:28:08,240
depends dot that's coming on later later

00:28:05,299 --> 00:28:11,179
down the road I think that'll be in 2.5

00:28:08,240 --> 00:28:13,510
a big big dump cigs and bitbake diff

00:28:11,179 --> 00:28:15,590
cigs this is another one of those really

00:28:13,510 --> 00:28:18,559
underused scripts that I think is super

00:28:15,590 --> 00:28:20,570
important so I'm pretty sure if I asked

00:28:18,559 --> 00:28:23,120
everyone would raise their hand you just

00:28:20,570 --> 00:28:26,210
changed something in your recipe and

00:28:23,120 --> 00:28:28,730
bitbake went ahead and bit baked 25

00:28:26,210 --> 00:28:31,010
things and you're thinking CRO I made

00:28:28,730 --> 00:28:33,289
this one change what are you doing so

00:28:31,010 --> 00:28:35,270
what's happening is that change has

00:28:33,289 --> 00:28:38,390
caused different estate hashes to

00:28:35,270 --> 00:28:40,309
invalidate and to know how how those are

00:28:38,390 --> 00:28:43,400
invalid or why those invalidated this is

00:28:40,309 --> 00:28:45,350
why DIF cigs and dump Sega's exist they

00:28:43,400 --> 00:28:47,570
were actually used as the tools to

00:28:45,350 --> 00:28:49,520
create estate to test that it was

00:28:47,570 --> 00:28:50,160
functioning properly but you can use

00:28:49,520 --> 00:28:53,250
them too

00:28:50,160 --> 00:28:55,620
look at those cigs and see what changed

00:28:53,250 --> 00:28:56,820
in there so dumped cigs will take a sick

00:28:55,620 --> 00:28:58,620
file which which shocked it was

00:28:56,820 --> 00:29:00,420
generated and it'll dump all the

00:28:58,620 --> 00:29:02,190
information in a very readable format

00:29:00,420 --> 00:29:04,950
you can see oh these are all the things

00:29:02,190 --> 00:29:06,450
it's basing its hash on and then you can

00:29:04,950 --> 00:29:08,220
use the diff tool to look at the two

00:29:06,450 --> 00:29:10,170
beside each other and see what's

00:29:08,220 --> 00:29:11,460
changing so you can work out whether or

00:29:10,170 --> 00:29:12,840
not there was a dependency change

00:29:11,460 --> 00:29:15,360
somewhere hidden in there or an R

00:29:12,840 --> 00:29:19,350
depends change hidden in there so these

00:29:15,360 --> 00:29:21,390
tools are extremely useful let's see oh

00:29:19,350 --> 00:29:22,470
and build history diff build history

00:29:21,390 --> 00:29:24,290
diff is another good one that I think

00:29:22,470 --> 00:29:27,630
people don't don't think about a lot

00:29:24,290 --> 00:29:29,010
changes from build to build or hard to

00:29:27,630 --> 00:29:31,620
track and that's why build history

00:29:29,010 --> 00:29:34,830
exists it exists to try and help the

00:29:31,620 --> 00:29:36,660
quality of your builds be better so

00:29:34,830 --> 00:29:38,160
build history diff is simply a way to

00:29:36,660 --> 00:29:40,470
take two different build histories and

00:29:38,160 --> 00:29:42,570
see what's changed between them it can

00:29:40,470 --> 00:29:44,340
help you not just in QA but also in just

00:29:42,570 --> 00:29:46,110
trying to introspect your system and see

00:29:44,340 --> 00:29:49,080
why things are being built the way they

00:29:46,110 --> 00:29:51,480
are the last two tools I'm going to talk

00:29:49,080 --> 00:29:53,310
about are required in any open source

00:29:51,480 --> 00:29:57,330
project and then those are the create

00:29:53,310 --> 00:29:59,340
pull requests and send pull requests the

00:29:57,330 --> 00:30:02,370
Yocto project is heavily dependent upon

00:29:59,340 --> 00:30:04,320
community involvement and like I said I

00:30:02,370 --> 00:30:06,900
think we have one of the more friendly

00:30:04,320 --> 00:30:08,250
and inviting communities out there so I

00:30:06,900 --> 00:30:10,530
really encourage all of you to go out

00:30:08,250 --> 00:30:13,710
there you can if you're brave enough to

00:30:10,530 --> 00:30:15,570
go look at Bugzilla please do if that's

00:30:13,710 --> 00:30:16,860
a little much just find a part of the

00:30:15,570 --> 00:30:18,900
system that you're interested in working

00:30:16,860 --> 00:30:19,950
on and shoot one of us an email because

00:30:18,900 --> 00:30:21,570
we're always willing to take

00:30:19,950 --> 00:30:22,830
contributions and we're always we're

00:30:21,570 --> 00:30:24,590
always willing to help we're always

00:30:22,830 --> 00:30:26,550
willing to guide you through the process

00:30:24,590 --> 00:30:28,590
these two scripts are just a couple of

00:30:26,550 --> 00:30:30,810
simple examples we have people that are

00:30:28,590 --> 00:30:31,980
coming onto our team internally all the

00:30:30,810 --> 00:30:33,270
time and these are scripts that we're

00:30:31,980 --> 00:30:36,720
constantly improving on to make it

00:30:33,270 --> 00:30:38,790
easier for you to put patches into the

00:30:36,720 --> 00:30:41,400
system and we also realize that this is

00:30:38,790 --> 00:30:43,260
a really complex system I think I

00:30:41,400 --> 00:30:45,270
actually counted yesterday's and

00:30:43,260 --> 00:30:47,040
yesterday's patches considering that

00:30:45,270 --> 00:30:48,660
this is going on we're still over a

00:30:47,040 --> 00:30:51,350
hundred so there was over a hundred

00:30:48,660 --> 00:30:53,640
patches to OE core yesterday even though

00:30:51,350 --> 00:30:56,250
there's a embedded conference going on

00:30:53,640 --> 00:30:58,470
so on a normal day there's somewhere

00:30:56,250 --> 00:31:00,690
around 500 patches getting sent into the

00:30:58,470 --> 00:31:02,700
mailing list so we realized this is a

00:31:00,690 --> 00:31:03,670
complicated process it's hard to wade

00:31:02,700 --> 00:31:05,470
into this

00:31:03,670 --> 00:31:07,390
but we as a community are willing to

00:31:05,470 --> 00:31:09,370
help the OE community the Yocto

00:31:07,390 --> 00:31:12,640
community we're willing to help and

00:31:09,370 --> 00:31:14,560
guide you through that process so with

00:31:12,640 --> 00:31:15,610
that I'm going to remember that it's

00:31:14,560 --> 00:31:17,080
getting late in the day and you're

00:31:15,610 --> 00:31:20,050
probably trying to decide which brewery

00:31:17,080 --> 00:31:21,610
to go to so the last two things I'll

00:31:20,050 --> 00:31:23,080
mention before I take questions is the

00:31:21,610 --> 00:31:25,240
bug triage and the technical meeting

00:31:23,080 --> 00:31:26,730
these are two meetings that are held the

00:31:25,240 --> 00:31:30,100
bug triage is actually every week

00:31:26,730 --> 00:31:32,020
Thursdays at 7:30 a.m. PST and the

00:31:30,100 --> 00:31:33,370
technical meeting is we hold on the

00:31:32,020 --> 00:31:38,110
first Tuesday of every month

00:31:33,370 --> 00:31:39,700
any day I'm sorry that's 8 a.m. PST so

00:31:38,110 --> 00:31:41,110
the bug triage you're always welcome to

00:31:39,700 --> 00:31:42,820
join and just listen in if you're just

00:31:41,110 --> 00:31:45,910
curious how the system works and how

00:31:42,820 --> 00:31:47,560
bugs get get pinned to different people

00:31:45,910 --> 00:31:48,940
like who gets what bugs and what we work

00:31:47,560 --> 00:31:50,620
on and you'll actually get some

00:31:48,940 --> 00:31:51,940
introspection too into where Yocto is

00:31:50,620 --> 00:31:54,250
going and what sort of features we're

00:31:51,940 --> 00:31:56,170
working on and the technical meetings

00:31:54,250 --> 00:31:58,750
are a great place to come ask questions

00:31:56,170 --> 00:32:00,520
so all of the core developers will show

00:31:58,750 --> 00:32:02,260
up every month at this technical meeting

00:32:00,520 --> 00:32:04,420
so if you don't feel comfortable

00:32:02,260 --> 00:32:06,340
chatting on IRC or it's hard for you to

00:32:04,420 --> 00:32:08,170
put the idea or the problem you're

00:32:06,340 --> 00:32:09,910
having into an email come to the

00:32:08,170 --> 00:32:12,190
technical meeting we are all available

00:32:09,910 --> 00:32:13,960
to answer any questions and I am amazed

00:32:12,190 --> 00:32:16,270
every month that how few people take

00:32:13,960 --> 00:32:17,980
advantage of this it is just free advice

00:32:16,270 --> 00:32:19,750
from the people that basically wrote all

00:32:17,980 --> 00:32:22,300
these tools and we're happy to answer

00:32:19,750 --> 00:32:24,130
your questions so also at the top is my

00:32:22,300 --> 00:32:26,380
contact information so of course you're

00:32:24,130 --> 00:32:27,490
always welcome to email me or yell at me

00:32:26,380 --> 00:32:30,820
in public if you find something you

00:32:27,490 --> 00:32:31,900
don't like so that's all and with that

00:32:30,820 --> 00:32:34,050
I'll take any questions that you all

00:32:31,900 --> 00:32:34,050
have

00:32:42,980 --> 00:32:50,090
GCC cash is that a class in yeah

00:32:54,450 --> 00:33:04,120
okay okay no I actually haven't heard of

00:33:01,750 --> 00:33:05,380
GCC class is there a part of Yocto where

00:33:04,120 --> 00:33:19,810
you've seen like a BB class that

00:33:05,380 --> 00:33:21,010
references it or ping me offline well

00:33:19,810 --> 00:33:23,880
yeah we'll figure that one out because

00:33:21,010 --> 00:33:23,880
that is extreme using

00:34:08,170 --> 00:34:13,460
sure so it's a good question so the

00:34:11,000 --> 00:34:15,110
question is basically he's inheriting

00:34:13,460 --> 00:34:16,490
from see make and there's a do install

00:34:15,110 --> 00:34:18,230
being called and it looks like it's

00:34:16,490 --> 00:34:20,450
being called more than once and so the

00:34:18,230 --> 00:34:23,810
question is around you know how did do

00:34:20,450 --> 00:34:25,580
how does do install get happen so one of

00:34:23,810 --> 00:34:27,950
the hard things about Yocto and it takes

00:34:25,580 --> 00:34:29,660
time to learn how to dig through this is

00:34:27,950 --> 00:34:31,340
the fact that really everything is

00:34:29,660 --> 00:34:33,590
layered through with this inheritance so

00:34:31,340 --> 00:34:35,270
see make probably I don't have the code

00:34:33,590 --> 00:34:36,740
in front of me right now but I'm pretty

00:34:35,270 --> 00:34:39,170
sure see make inherits from some other

00:34:36,740 --> 00:34:41,060
class so you have to walk that class

00:34:39,170 --> 00:34:43,280
hierarchy to see how all those do

00:34:41,060 --> 00:34:45,560
installs actually happen so I'll give

00:34:43,280 --> 00:34:47,360
you just a basic example you can have a

00:34:45,560 --> 00:34:49,760
do install in a BB class that you're

00:34:47,360 --> 00:34:52,880
inheriting from but that do install may

00:34:49,760 --> 00:34:54,380
just be a pending do install because the

00:34:52,880 --> 00:35:01,970
do install might actually come from a

00:34:54,380 --> 00:35:03,290
class much further up the chain no no so

00:35:01,970 --> 00:35:05,150
if you don't if you don't have an

00:35:03,290 --> 00:35:06,890
underscore append and you are overriding

00:35:05,150 --> 00:35:09,140
the do install so if you have a do

00:35:06,890 --> 00:35:11,000
install you can yourself say ignore

00:35:09,140 --> 00:35:15,560
whatever do install does I want you to

00:35:11,000 --> 00:35:17,120
do just this exactly if you were to

00:35:15,560 --> 00:35:18,470
write that and then just if you were to

00:35:17,120 --> 00:35:21,590
write your own do install in your recipe

00:35:18,470 --> 00:35:24,760
and just say echo hello world do install

00:35:21,590 --> 00:35:27,260
is gonna echo hello world and be done

00:35:24,760 --> 00:35:28,910
yeah so and just so you know the other

00:35:27,260 --> 00:35:31,100
ways that you can introspect that too is

00:35:28,910 --> 00:35:33,470
to do these builds and then we'll use

00:35:31,100 --> 00:35:35,750
build history diff to see what change so

00:35:33,470 --> 00:35:37,790
as you change or do install look at the

00:35:35,750 --> 00:35:39,290
differences between those two builds the

00:35:37,790 --> 00:35:41,090
diff tool is just a side-by-side

00:35:39,290 --> 00:35:47,230
comparison so you'll see the exact

00:35:41,090 --> 00:35:47,230
changes that happen anywhere else

00:35:53,440 --> 00:36:00,289
sure so the question is about running

00:35:57,519 --> 00:36:03,200
Yocto or building Yocto using jenkins

00:36:00,289 --> 00:36:05,599
that is a great question and there is an

00:36:03,200 --> 00:36:08,089
entire talk tomorrow you can all go so

00:36:05,599 --> 00:36:10,579
Tim or Lang has a talk tomorrow called

00:36:08,089 --> 00:36:14,569
living on master and in his talk he's

00:36:10,579 --> 00:36:16,819
gonna detail a step-by-step evaluation

00:36:14,569 --> 00:36:18,589
of using Jenkins to do builds using

00:36:16,819 --> 00:36:21,559
Yocto and he does it end to end with

00:36:18,589 --> 00:36:22,970
hardware so it's a great I don't know if

00:36:21,559 --> 00:36:26,089
there's any documentation today about

00:36:22,970 --> 00:36:27,440
Jenkins I don't believe so but one of

00:36:26,089 --> 00:36:29,329
the things that we're doing too is we're

00:36:27,440 --> 00:36:31,249
rethinking the auto builder we're sort

00:36:29,329 --> 00:36:32,960
of retooling it has been a long time

00:36:31,249 --> 00:36:34,519
since it's been retooled so we're

00:36:32,960 --> 00:36:36,289
retooling the auto builder now and we're

00:36:34,519 --> 00:36:38,450
thinking about ways that we can use

00:36:36,289 --> 00:36:39,710
Jenkins because we know a lot of people

00:36:38,450 --> 00:36:41,950
are building with that so we'd love to

00:36:39,710 --> 00:36:44,239
have a quick start for Jenkins in Yocto

00:36:41,950 --> 00:36:46,999
with as with most things we're usually

00:36:44,239 --> 00:36:49,130
constrained by resources but if you are

00:36:46,999 --> 00:36:50,569
interested in Jenkins and just CI in

00:36:49,130 --> 00:36:52,969
general I highly recommend you go to

00:36:50,569 --> 00:36:56,059
Tim's talk tim has been doing real-time

00:36:52,969 --> 00:36:57,739
Linux builds on master doing builds on I

00:36:56,059 --> 00:37:00,499
think something ridiculous like 10

00:36:57,739 --> 00:37:01,940
different builds every day so that that

00:37:00,499 --> 00:37:03,170
talk will be an amazing and enlightening

00:37:01,940 --> 00:37:07,329
experience for you if you're building

00:37:03,170 --> 00:37:07,329
with Jenkins thank you

00:37:18,750 --> 00:37:25,200
right yes

00:37:27,160 --> 00:37:31,660
so there are others this this is a great

00:37:30,040 --> 00:37:34,210
question so this question is essentially

00:37:31,660 --> 00:37:35,950
about versioning your layers which is a

00:37:34,210 --> 00:37:37,540
good way to put it we like we when we

00:37:35,950 --> 00:37:39,850
talk about it in our meetings we tend to

00:37:37,540 --> 00:37:41,020
refer to it as a set up tool because at

00:37:39,850 --> 00:37:42,460
the end of the day you want to set up

00:37:41,020 --> 00:37:44,590
your build directory with this with a

00:37:42,460 --> 00:37:46,300
set of different layers and those layers

00:37:44,590 --> 00:37:48,220
have to be at a certain version so you

00:37:46,300 --> 00:37:50,620
want to check this tag out of this layer

00:37:48,220 --> 00:37:52,630
and this tag out of this layer it's a

00:37:50,620 --> 00:37:54,550
very common problem yes so repo is one

00:37:52,630 --> 00:37:58,750
of the main ways I know freescale the

00:37:54,550 --> 00:38:01,600
community BSP uses repo there is inside

00:37:58,750 --> 00:38:04,450
Yocto a a script called combo layer

00:38:01,600 --> 00:38:07,300
which is what one of some of our team

00:38:04,450 --> 00:38:09,040
members use internally and I know a lot

00:38:07,300 --> 00:38:10,450
of people in fact actually could you

00:38:09,040 --> 00:38:12,400
raise your hand if you have made your

00:38:10,450 --> 00:38:13,990
own tool to solve this problem to

00:38:12,400 --> 00:38:17,980
basically check out a whole bunch of

00:38:13,990 --> 00:38:20,170
layers okay yeah so this is very common

00:38:17,980 --> 00:38:22,000
and we realize this is an issue one of

00:38:20,170 --> 00:38:24,100
the problems with this issue is that

00:38:22,000 --> 00:38:26,080
everybody does it a little different so

00:38:24,100 --> 00:38:28,120
what works for one company right I mean

00:38:26,080 --> 00:38:29,860
the simple case a script that does the

00:38:28,120 --> 00:38:31,750
simple check out is you know an

00:38:29,860 --> 00:38:32,140
interesting to our and ever and you're

00:38:31,750 --> 00:38:34,030
done

00:38:32,140 --> 00:38:35,920
but the complexities that lots of

00:38:34,030 --> 00:38:37,480
companies face is that they need a tool

00:38:35,920 --> 00:38:39,550
that not just does that simple thing but

00:38:37,480 --> 00:38:40,630
does lots of other stuff as well and so

00:38:39,550 --> 00:38:41,890
that's why you end up with everybody

00:38:40,630 --> 00:38:43,630
rolling their own so we have been

00:38:41,890 --> 00:38:45,550
talking about this and trying to figure

00:38:43,630 --> 00:38:48,400
out ways that we can develop something

00:38:45,550 --> 00:38:50,020
that works for everyone I should also

00:38:48,400 --> 00:38:52,480
mention that winDriver has a tool that

00:38:50,020 --> 00:38:54,460
they use the to do their setups I think

00:38:52,480 --> 00:38:58,180
if you just google winDriver Yocto setup

00:38:54,460 --> 00:39:04,380
you'll probably find C mark here or just

00:38:58,180 --> 00:39:04,380
find mark Hatley yeah pardon yes

00:39:06,770 --> 00:39:12,810
sorry oh okay

00:39:11,220 --> 00:39:14,040
yeah and currently so the tool that

00:39:12,810 --> 00:39:16,050
wooden rib have developed is currently

00:39:14,040 --> 00:39:17,460
lined up to hopefully become a standard

00:39:16,050 --> 00:39:19,260
for openembedded but that is one of the

00:39:17,460 --> 00:39:21,350
things that we struggle with so thank

00:39:19,260 --> 00:39:24,530
you for asking

00:39:21,350 --> 00:39:24,530
anybody else

00:39:55,120 --> 00:40:00,590
you can this this is really this is

00:39:58,670 --> 00:40:02,510
dependent on your setup so the question

00:40:00,590 --> 00:40:05,930
is basically he's trying to populate an

00:40:02,510 --> 00:40:07,910
SD cache which I applaud you for sir so

00:40:05,930 --> 00:40:09,320
he's trying to generate it up an S state

00:40:07,910 --> 00:40:11,030
cache and he wants to know on his build

00:40:09,320 --> 00:40:13,400
server he's using Jenkins do I want to

00:40:11,030 --> 00:40:15,410
do this every time I build or do I just

00:40:13,400 --> 00:40:17,060
want to have a special case that only

00:40:15,410 --> 00:40:20,330
generates a state cache and that's its

00:40:17,060 --> 00:40:22,880
whole job you can do either it depends

00:40:20,330 --> 00:40:24,680
on your use case so we do it with our

00:40:22,880 --> 00:40:26,210
builds because what we care about is

00:40:24,680 --> 00:40:28,100
whether or not the builds succeeded and

00:40:26,210 --> 00:40:29,870
that's our S state cache we're gonna go

00:40:28,100 --> 00:40:32,450
off and we actually only generate Estate

00:40:29,870 --> 00:40:34,960
caches based on success so if we have a

00:40:32,450 --> 00:40:37,430
failure we don't store that s state cash

00:40:34,960 --> 00:40:39,680
for our releases obviously those

00:40:37,430 --> 00:40:42,260
releases once they succeed we pinned

00:40:39,680 --> 00:40:43,580
that to to dot whatever and that gets so

00:40:42,260 --> 00:40:44,960
it's really up to your use case if you

00:40:43,580 --> 00:40:47,030
did have a use case where you needed s

00:40:44,960 --> 00:40:49,190
state cache more regularly you could do

00:40:47,030 --> 00:40:50,750
that you could I would however recommend

00:40:49,190 --> 00:40:52,850
if you're going to run a run a build

00:40:50,750 --> 00:40:54,800
that just populates the estate cache be

00:40:52,850 --> 00:40:56,480
sure that that's been verified first and

00:40:54,800 --> 00:41:09,980
as long as that's been verified sure

00:40:56,480 --> 00:41:11,390
there's no reason not to sure yeah so

00:41:09,980 --> 00:41:12,740
the question is about s state cache with

00:41:11,390 --> 00:41:16,010
multiple builds and whether or not

00:41:12,740 --> 00:41:18,590
there's conflicts there so I did not

00:41:16,010 --> 00:41:20,720
write this system but as far as I know

00:41:18,590 --> 00:41:23,120
from my experience we're currently doing

00:41:20,720 --> 00:41:24,860
builds on our auto builder each auto

00:41:23,120 --> 00:41:27,110
builder has three builds happening at

00:41:24,860 --> 00:41:30,470
the same time and they're all pushing to

00:41:27,110 --> 00:41:31,910
the same estate cash so I guess I'm

00:41:30,470 --> 00:41:34,850
answering your question by saying here's

00:41:31,910 --> 00:41:37,430
how we test s state cache we have six

00:41:34,850 --> 00:41:39,560
servers all six servers are building

00:41:37,430 --> 00:41:41,240
three builds at the same time and all

00:41:39,560 --> 00:41:43,970
three builds are populating the same s

00:41:41,240 --> 00:41:48,880
take action so if there's a bug we will

00:41:43,970 --> 00:41:48,880
find it anyone else

00:42:07,230 --> 00:42:12,640
right so the question is about s state

00:42:09,940 --> 00:42:14,589
cash and the really the fundamental

00:42:12,640 --> 00:42:16,900
concept of octo is doing so you're

00:42:14,589 --> 00:42:18,970
building from scratch with Yocto what's

00:42:16,900 --> 00:42:22,930
the point of that state cash so I think

00:42:18,970 --> 00:42:26,290
to answer that question I would say SD

00:42:22,930 --> 00:42:26,859
cash has its uses we do builds from

00:42:26,290 --> 00:42:28,780
scratch

00:42:26,859 --> 00:42:30,579
all the time we don't rely on a state a

00:42:28,780 --> 00:42:32,349
hundred percent but that being said

00:42:30,579 --> 00:42:34,780
there's lots of instances where building

00:42:32,349 --> 00:42:37,599
from scratch is an ideal so I'll give

00:42:34,780 --> 00:42:41,349
you an example I have teams that I work

00:42:37,599 --> 00:42:43,390
with that are building on laptops so yes

00:42:41,349 --> 00:42:44,589
for their production they do want to

00:42:43,390 --> 00:42:46,510
build from scratch they do want to

00:42:44,589 --> 00:42:48,490
ensure that that's happening but it's

00:42:46,510 --> 00:42:50,440
just unrealistic to expect their two

00:42:48,490 --> 00:42:52,750
cores to crank out an image in any

00:42:50,440 --> 00:42:55,480
respectable timeframe so really S state

00:42:52,750 --> 00:42:57,130
is the only solution for them and at the

00:42:55,480 --> 00:42:58,410
end of the day it is really it's meant

00:42:57,130 --> 00:43:00,369
to be used

00:42:58,410 --> 00:43:01,660
circumstantially you should figure out

00:43:00,369 --> 00:43:03,790
whether or not it's right for you and

00:43:01,660 --> 00:43:05,530
use it but there are other ways to speed

00:43:03,790 --> 00:43:07,750
up the build if you go and look at your

00:43:05,530 --> 00:43:10,030
bitbake comm for example you'll see a

00:43:07,750 --> 00:43:11,890
whole bunch of debug flags in there and

00:43:10,030 --> 00:43:12,880
so if you really just need to speed up

00:43:11,890 --> 00:43:15,010
your build if that's all you're looking

00:43:12,880 --> 00:43:17,920
for there are lots of other ways to do

00:43:15,010 --> 00:43:20,460
that besides us stay cash but hopefully

00:43:17,920 --> 00:43:20,460
that helps some

00:43:29,970 --> 00:43:39,460
right right yeah Denis brings up a great

00:43:37,390 --> 00:43:41,320
point there's there's often a separation

00:43:39,460 --> 00:43:43,360
of concerns between people who are

00:43:41,320 --> 00:43:45,100
building as build engineers who needed

00:43:43,360 --> 00:43:48,340
to run on a certain platform and ensure

00:43:45,100 --> 00:43:49,780
it's it's configured properly and under

00:43:48,340 --> 00:43:51,130
application developers that just need

00:43:49,780 --> 00:43:52,780
the build so that they can write their

00:43:51,130 --> 00:43:54,400
java app that sits on top of it and

00:43:52,780 --> 00:43:56,230
those guys really don't care whether or

00:43:54,400 --> 00:44:04,420
not the you know gee Lib C is building

00:43:56,230 --> 00:44:51,700
getting built correctly all right sure

00:44:04,420 --> 00:44:54,370
excellent Thank You Dennis sure no so

00:44:51,700 --> 00:44:56,050
the question is essentially that there's

00:44:54,370 --> 00:44:57,670
plenty of places on the wiki you can go

00:44:56,050 --> 00:44:59,740
and find best known methods of doing

00:44:57,670 --> 00:45:01,630
things with Yocto and there are very few

00:44:59,740 --> 00:45:03,310
places that you could go and find the

00:45:01,630 --> 00:45:06,490
worst known method of doing things of

00:45:03,310 --> 00:45:08,350
the Yocto and i think right and that is

00:45:06,490 --> 00:45:09,970
when people choose and to be fair that's

00:45:08,350 --> 00:45:12,340
why i'm here giving this talk because I

00:45:09,970 --> 00:45:13,900
have seen people cram everything in one

00:45:12,340 --> 00:45:15,550
layer and I've seen them make all these

00:45:13,900 --> 00:45:17,920
mistakes so no it's a good point

00:45:15,550 --> 00:45:19,990
actually so we should have a part of the

00:45:17,920 --> 00:45:22,600
wiki that is devoted to please don't do

00:45:19,990 --> 00:45:24,520
this and to be fair that is partly what

00:45:22,600 --> 00:45:25,840
I hope this talk will become I hope that

00:45:24,520 --> 00:45:27,190
I can take these slides and then turn

00:45:25,840 --> 00:45:28,450
them into a wiki where people can go to

00:45:27,190 --> 00:45:30,310
it and say ok these are the things I

00:45:28,450 --> 00:45:31,630
shouldn't be doing here's why I should

00:45:30,310 --> 00:45:33,300
be doing the things that are in the B

00:45:31,630 --> 00:45:42,770
km's and the best known methods

00:45:33,300 --> 00:45:44,700
I I will ping randall munroe and let him

00:45:42,770 --> 00:45:46,200
any other questions I think we still

00:45:44,700 --> 00:46:23,250
have five minutes if anyone has any

00:45:46,200 --> 00:46:26,120
questions no please do it is yeah that's

00:46:23,250 --> 00:46:30,030
the email address right there

00:46:26,120 --> 00:46:31,770
yeah no Sean's coming is great yeah

00:46:30,030 --> 00:46:33,990
absolutely as you guys run into things

00:46:31,770 --> 00:46:35,490
that you know that you realize aren't

00:46:33,990 --> 00:46:36,720
best practices or you're doing something

00:46:35,490 --> 00:46:39,120
and banging your head against that

00:46:36,720 --> 00:46:41,610
please email me let me know I will put

00:46:39,120 --> 00:46:43,980
it up on the wiki for you or I'm happy

00:46:41,610 --> 00:46:46,110
to do documentation just ask any of our

00:46:43,980 --> 00:46:49,530
documentation people as soon as I have

00:46:46,110 --> 00:46:54,740
time I'll do our documentation any other

00:46:49,530 --> 00:46:54,740
questions sure

00:46:59,080 --> 00:47:01,980
right

00:47:06,249 --> 00:47:26,059
right that's a great question so Markos

00:47:22,999 --> 00:47:28,190
question is there's a difference between

00:47:26,059 --> 00:47:30,140
s state mirrors and S state directory

00:47:28,190 --> 00:47:32,539
and it's a subtle difference but it's

00:47:30,140 --> 00:47:35,089
really important the S state directory

00:47:32,539 --> 00:47:38,839
is for you and your build server your

00:47:35,089 --> 00:47:41,329
workstation the intention there is if

00:47:38,839 --> 00:47:43,640
you have several different builds on

00:47:41,329 --> 00:47:46,339
your machine that is the first place

00:47:43,640 --> 00:47:48,859
that's gonna look for s state cache but

00:47:46,339 --> 00:47:51,049
for sharing with other developers across

00:47:48,859 --> 00:47:53,390
multiple machines that's where s state

00:47:51,049 --> 00:47:55,970
mirrors come in handy so what you should

00:47:53,390 --> 00:47:57,920
be doing is populating your mirror from

00:47:55,970 --> 00:47:59,089
your developers or really what you

00:47:57,920 --> 00:48:02,359
should be doing is populating it from

00:47:59,089 --> 00:48:04,910
your build servers este cache so your

00:48:02,359 --> 00:48:07,609
build servers s state derp should

00:48:04,910 --> 00:48:10,400
eventually turn into the S state mirror

00:48:07,609 --> 00:48:12,140
the idea being if that mirror should be

00:48:10,400 --> 00:48:14,720
of at least a relatively known good

00:48:12,140 --> 00:48:16,819
build and that it should use some

00:48:14,720 --> 00:48:19,099
protocol other than a filesystem

00:48:16,819 --> 00:48:20,239
protocol to go get it because you know

00:48:19,099 --> 00:48:22,430
you're gonna have multiple developers

00:48:20,239 --> 00:48:25,730
hitting that machine and requesting I

00:48:22,430 --> 00:48:26,930
state hashes so if you go it's on the

00:48:25,730 --> 00:48:28,670
slide way back there but you guys can go

00:48:26,930 --> 00:48:30,470
back and look if you go back and look at

00:48:28,670 --> 00:48:32,539
s state Yocto project org you can

00:48:30,470 --> 00:48:34,970
actually browse that and you'll see that

00:48:32,539 --> 00:48:37,279
it's just a giant hash and so it starts

00:48:34,970 --> 00:48:39,349
with 0 0 and you can drill your way down

00:48:37,279 --> 00:48:40,999
through that hash and so that means if

00:48:39,349 --> 00:48:43,009
10 developers are all hitting that at

00:48:40,999 --> 00:48:44,839
the same time it's being handled by the

00:48:43,009 --> 00:48:46,430
HTTP protocol so you don't have to worry

00:48:44,839 --> 00:48:48,799
about collisions or people stepping on

00:48:46,430 --> 00:48:50,900
each other's toes so S state mirror is

00:48:48,799 --> 00:48:52,309
where all your developers point and each

00:48:50,900 --> 00:48:55,579
of those developers should have their

00:48:52,309 --> 00:48:56,839
own estate directory and hopefully most

00:48:55,579 --> 00:48:58,549
of the stuff they need is in there and

00:48:56,839 --> 00:48:59,869
it'll be really quick and then the stuff

00:48:58,549 --> 00:49:04,180
they don't have they can go up to the

00:48:59,869 --> 00:49:04,180
web for no please keep going

00:49:09,579 --> 00:49:13,489
No

00:49:10,849 --> 00:49:15,410
so definitely yeah so so I would

00:49:13,489 --> 00:49:16,699
definitely have one person acting as the

00:49:15,410 --> 00:49:19,039
master and it should be your build

00:49:16,699 --> 00:49:20,660
server so your build server should be

00:49:19,039 --> 00:49:22,660
populating your s state your developers

00:49:20,660 --> 00:49:30,979
can populate their own este caches

00:49:22,660 --> 00:49:32,989
that's a good question right yeah

00:49:30,979 --> 00:49:34,969
hopefully your build server is producing

00:49:32,989 --> 00:49:36,769
the build that everyone is using and

00:49:34,969 --> 00:49:39,229
you're just changing the s state of the

00:49:36,769 --> 00:49:41,150
thing you are working on so really your

00:49:39,229 --> 00:49:45,069
changes test it won't be as valuable as

00:49:41,150 --> 00:49:45,069
the build servers changes test day

00:50:21,950 --> 00:50:24,950
sure

00:50:59,640 --> 00:51:05,319
thanks on thank you John

00:51:02,940 --> 00:51:05,739
okay I think we have one minute last

00:51:05,319 --> 00:51:08,309
chance

00:51:05,739 --> 00:51:08,309
oh yeah

00:51:26,770 --> 00:51:32,420
yes absolutely yes the reason that it's

00:51:31,040 --> 00:51:34,190
better to have that in your recipe so

00:51:32,420 --> 00:51:35,630
the question is about you're using see

00:51:34,190 --> 00:51:37,520
make files as an example but basically

00:51:35,630 --> 00:51:40,010
what you're saying is you can put files

00:51:37,520 --> 00:51:42,020
on the file system any way you want and

00:51:40,010 --> 00:51:43,610
that's absolutely true and you really

00:51:42,020 --> 00:51:45,050
just need to follow best practices when

00:51:43,610 --> 00:51:46,910
it comes to how you want the file to get

00:51:45,050 --> 00:51:48,890
on the file system just keep in mind

00:51:46,910 --> 00:51:50,540
that if you want Yocto to be able to

00:51:48,890 --> 00:51:52,880
introspect that for you and tell you how

00:51:50,540 --> 00:51:54,650
it got there you should probably have

00:51:52,880 --> 00:51:57,110
that if anyone's ever gonna edit it or

00:51:54,650 --> 00:51:58,700
care where it came from putting it in

00:51:57,110 --> 00:52:00,140
the recipe may help but again just use

00:51:58,700 --> 00:52:06,710
best practices when it comes to stuff

00:52:00,140 --> 00:52:08,480
like that um it depends when he does it

00:52:06,710 --> 00:52:10,400
yeah yeah so for the see make I guess

00:52:08,480 --> 00:52:14,570
you're right you might get QA errors if

00:52:10,400 --> 00:52:16,850
you're doing it in C make yeah there's

00:52:14,570 --> 00:52:18,950
lots of ways to turn off QA Earths

00:52:16,850 --> 00:52:20,980
but no that's a good point if you're

00:52:18,950 --> 00:52:23,660
putting files on the file system with

00:52:20,980 --> 00:52:28,310
you may get Q errors and you may ignore

00:52:23,660 --> 00:52:30,890
those QA airs right no that's a good

00:52:28,310 --> 00:52:34,480
point yeah insane skip for removing Q

00:52:30,890 --> 00:52:38,510
Ayers is probably a bad idea but yeah

00:52:34,480 --> 00:52:40,790
right hopefully that'll help helps

00:52:38,510 --> 00:52:41,780
answer your question okay okay I think

00:52:40,790 --> 00:52:44,230
we've reached the end so thank you all

00:52:41,780 --> 00:52:46,389
for coming have a great day

00:52:44,230 --> 00:52:46,389

YouTube URL: https://www.youtube.com/watch?v=LXMwP5_v_k4


