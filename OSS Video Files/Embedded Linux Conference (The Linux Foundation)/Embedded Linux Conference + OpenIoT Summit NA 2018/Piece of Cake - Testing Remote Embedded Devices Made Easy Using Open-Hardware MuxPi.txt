Title: Piece of Cake - Testing Remote Embedded Devices Made Easy Using Open-Hardware MuxPi
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Piece of Cake - Testing Remote Embedded Devices Made Easy Using Open-Hardware MuxPi - Paweł Wieczorek, Samsung R&D Institute Poland

 Designing custom hardware, though might seem intimidating at first, can simplify many activities. It solves certain issues, but often raises many others. Paweł will present a fresh open hardware approach at providing remote access (including device flashing, debugging and power management) to embedded devices - MuxPi (https://wiki.tizen.org/MuxPi), successor of SD MUX (https://wiki.tizen.org/SD_MUX) board (showcased during FOSDEM 2016 and Embedded Linux Conference 2016).

Presentation will also introduce components of the new Tizen GNU/Linux distribution's testing laboratory (currently in the process of being published open source):

* Boruta - board farm management system,
* Weles - LAVA-compatible testing framework,
* Perun - binary image testing system. 

About Paweł Wieczorek
Paweł Wieczorek works at Samsung R&D Institute Poland since 2014. Starting as an access control developer, Paweł contributed to the security framework of Tizen operating system. At that time, he introduced testing automation practices to Tizen and still actively develops automated test system. Currently he's a Tizen release engineer. Speaker on ELC and ELCE, FOSDEM, FrOSCon and a few others.
Captions: 
	00:00:00,030 --> 00:00:06,720
hi my name is Paulo vítor ik I work at

00:00:03,600 --> 00:00:09,750
Samsung currently Institute Poland and I

00:00:06,720 --> 00:00:12,480
am currently involved in Tizen release

00:00:09,750 --> 00:00:15,660
engineering team this as you might

00:00:12,480 --> 00:00:18,660
imagine requires a lot of verification

00:00:15,660 --> 00:00:22,590
validation and in order to stay

00:00:18,660 --> 00:00:26,910
efficient with our daily tasks we try to

00:00:22,590 --> 00:00:30,869
automate as much as possible from what

00:00:26,910 --> 00:00:34,260
we do daily today I would like to share

00:00:30,869 --> 00:00:37,140
with you our most recent design for

00:00:34,260 --> 00:00:39,890
testing automation on the embedded

00:00:37,140 --> 00:00:43,980
devices which is max by board and

00:00:39,890 --> 00:00:47,100
accompanying software let me start with

00:00:43,980 --> 00:00:49,050
a short introduction to what we will be

00:00:47,100 --> 00:00:53,250
talking what I will be talking to the

00:00:49,050 --> 00:00:55,980
load I summarize real quick previous

00:00:53,250 --> 00:01:00,719
efforts in this matter then I would like

00:00:55,980 --> 00:01:04,049
to describe our concept and show you the

00:01:00,719 --> 00:01:07,260
solution I will move on to the

00:01:04,049 --> 00:01:10,710
accompanying software and present to you

00:01:07,260 --> 00:01:13,830
our plans for the future nothing I will

00:01:10,710 --> 00:01:17,670
sum it all up and we should still have

00:01:13,830 --> 00:01:21,030
some time for Q&A session so to begin

00:01:17,670 --> 00:01:24,000
with what Tizen actually is it's a new

00:01:21,030 --> 00:01:26,820
Linux distribution aimed at embedded

00:01:24,000 --> 00:01:30,210
devices which uses standard components

00:01:26,820 --> 00:01:33,509
such as a collection of new tools Linux

00:01:30,210 --> 00:01:35,909
kernel obviously wayland server display

00:01:33,509 --> 00:01:39,570
server and enlightenment foundation

00:01:35,909 --> 00:01:43,710
libraries or EFL for short as main

00:01:39,570 --> 00:01:46,369
graphics library it runs on various and

00:01:43,710 --> 00:01:51,090
by the devices such as mobile phones

00:01:46,369 --> 00:01:56,790
wearables TVs or even fridges known as

00:01:51,090 --> 00:02:02,159
family hubs and since May 2017 also IOT

00:01:56,790 --> 00:02:04,020
devices since the Tizen 4 point almost

00:02:02,159 --> 00:02:09,060
on one

00:02:04,020 --> 00:02:12,770
release but before Tyson goes to product

00:02:09,060 --> 00:02:16,440
a platform has to be developed and it

00:02:12,770 --> 00:02:19,800
involves engineers from all over the

00:02:16,440 --> 00:02:23,209
world from R&D centers in USA South

00:02:19,800 --> 00:02:27,540
Korea India and Poland as well and

00:02:23,209 --> 00:02:30,870
that's why we need to release often to

00:02:27,540 --> 00:02:34,830
fail early and to detect any defects

00:02:30,870 --> 00:02:38,069
that might come with the most recent

00:02:34,830 --> 00:02:41,459
patches that's why we have published

00:02:38,069 --> 00:02:43,410
snapshots daily but by no means it

00:02:41,459 --> 00:02:45,959
should affect quality of the software

00:02:43,410 --> 00:02:52,260
that is being published so release

00:02:45,959 --> 00:02:55,010
engineers act upon it and there is a QA

00:02:52,260 --> 00:02:59,940
step and I prior publishing each

00:02:55,010 --> 00:03:03,480
snapshot although internal package tests

00:02:59,940 --> 00:03:08,820
are really helpful it's not enough for

00:03:03,480 --> 00:03:13,140
us since we have to take care of devices

00:03:08,820 --> 00:03:17,660
that are that are being used by various

00:03:13,140 --> 00:03:20,609
developers we intend to check on the

00:03:17,660 --> 00:03:23,250
snapshots before publishing them on

00:03:20,609 --> 00:03:25,470
actual hardware so that we know that

00:03:23,250 --> 00:03:32,310
there will be no unexpected behavior or

00:03:25,470 --> 00:03:35,640
any damages made to those devices as you

00:03:32,310 --> 00:03:39,480
might imagine this requires a lot of

00:03:35,640 --> 00:03:43,950
devices and not of not all of them can

00:03:39,480 --> 00:03:47,760
be easily obtained such as hardware that

00:03:43,950 --> 00:03:50,639
is not yet publicly available or fridges

00:03:47,760 --> 00:03:53,579
I mentioned earlier that's why we wanted

00:03:50,639 --> 00:03:57,989
to have we wanted to be able to access

00:03:53,579 --> 00:04:01,340
them remotely this way there are there

00:03:57,989 --> 00:04:04,350
is no possibility of some security leaks

00:04:01,340 --> 00:04:07,019
developers can focus on software

00:04:04,350 --> 00:04:11,040
development and not on board maintenance

00:04:07,019 --> 00:04:11,730
and boards are not stored aimlessly in

00:04:11,040 --> 00:04:15,750
lockers

00:04:11,730 --> 00:04:17,549
once developers leave office but they

00:04:15,750 --> 00:04:21,090
can be better utilized by

00:04:17,549 --> 00:04:24,840
other developers from different R&D

00:04:21,090 --> 00:04:28,620
institutes that's why we came up with

00:04:24,840 --> 00:04:31,199
the max by board and once it is

00:04:28,620 --> 00:04:36,710
connected to the device under test or

00:04:31,199 --> 00:04:40,710
that we call it Dryad and as you can see

00:04:36,710 --> 00:04:45,240
Dryad requires only two connections to

00:04:40,710 --> 00:04:47,580
the to be able to be accessed from the

00:04:45,240 --> 00:04:50,639
outside world which is power supply of

00:04:47,580 --> 00:04:54,509
course and network connection for

00:04:50,639 --> 00:04:58,470
communication this Dryad is connected to

00:04:54,509 --> 00:05:01,500
the Raspberry Pi 3 board and all other

00:04:58,470 --> 00:05:06,479
connectors are only between the max PI

00:05:01,500 --> 00:05:07,560
and Raspberry Pi that consists this dry

00:05:06,479 --> 00:05:10,830
out

00:05:07,560 --> 00:05:14,669
since trials require only two

00:05:10,830 --> 00:05:19,889
connections it is pretty easy to scale

00:05:14,669 --> 00:05:22,500
it up and it is as easy as connecting

00:05:19,889 --> 00:05:25,740
multiple dryads to the network switch

00:05:22,500 --> 00:05:32,069
and providing a power supply for them it

00:05:25,740 --> 00:05:35,130
also unifies the the access to all of

00:05:32,069 --> 00:05:38,909
these devices it does not matter if it

00:05:35,130 --> 00:05:44,099
is Raspberry Pi Exynos based or draw it

00:05:38,909 --> 00:05:47,969
or a mobile phone such as this note 4 I

00:05:44,099 --> 00:05:51,080
believe and we will get back to the max

00:05:47,969 --> 00:05:55,440
by board in a second but first let me

00:05:51,080 --> 00:05:57,840
tell you which other efforts in this

00:05:55,440 --> 00:06:02,849
matter have been made so far

00:05:57,840 --> 00:06:06,719
starting with software approach most

00:06:02,849 --> 00:06:08,729
notable software is I believe lava which

00:06:06,719 --> 00:06:12,240
stands for linear automated validation

00:06:08,729 --> 00:06:16,680
architecture and is and it is deployment

00:06:12,240 --> 00:06:20,150
system for embedded it supports both

00:06:16,680 --> 00:06:24,710
virtual and physical devices and

00:06:20,150 --> 00:06:26,750
allows running wide range of tests from

00:06:24,710 --> 00:06:29,570
boat and boot loader to system level

00:06:26,750 --> 00:06:34,479
although some additional hardware might

00:06:29,570 --> 00:06:37,639
be required for that it is used by

00:06:34,479 --> 00:06:42,290
various distributions like automotive

00:06:37,639 --> 00:06:47,800
grade Linux but I believe more even more

00:06:42,290 --> 00:06:51,260
popular user of lava is kernel CI with

00:06:47,800 --> 00:06:56,419
three and a half million successful

00:06:51,260 --> 00:07:00,500
boots and Counting for us however lava

00:06:56,419 --> 00:07:03,530
was not a sufficient solution we

00:07:00,500 --> 00:07:05,960
required remote access I mentioned

00:07:03,530 --> 00:07:11,539
earlier and remote access on a level

00:07:05,960 --> 00:07:15,650
that it acts as if the board was already

00:07:11,539 --> 00:07:18,560
on release engineers desks not the one

00:07:15,650 --> 00:07:21,320
that lava supports via hacking session

00:07:18,560 --> 00:07:26,169
which opens the tunnel to already booted

00:07:21,320 --> 00:07:31,490
up device under test and that and then

00:07:26,169 --> 00:07:34,880
gives the access as for the hardware

00:07:31,490 --> 00:07:39,139
approaches Lin ro also came up with a

00:07:34,880 --> 00:07:44,810
LAN piece around 2013 enemies were

00:07:39,139 --> 00:07:46,430
boards that helped with checking hot

00:07:44,810 --> 00:07:51,020
plugging of various devices such as

00:07:46,430 --> 00:07:56,180
Satta USB HDMI but also they gave better

00:07:51,020 --> 00:07:58,729
control over dots however they were

00:07:56,180 --> 00:08:02,330
their development was put on hold and

00:07:58,729 --> 00:08:06,729
lessons learned from development of lmps

00:08:02,330 --> 00:08:14,410
is linked down below slides are already

00:08:06,729 --> 00:08:17,479
online we also gave a try at hardware

00:08:14,410 --> 00:08:21,110
attempt at solving this problem and came

00:08:17,479 --> 00:08:23,389
up with our SD Max board this SD Max

00:08:21,110 --> 00:08:26,380
board requires connection to the test

00:08:23,389 --> 00:08:30,979
server it is not an independent board

00:08:26,380 --> 00:08:32,760
and allows doing three things with

00:08:30,979 --> 00:08:36,539
device under test

00:08:32,760 --> 00:08:41,039
it cuts power supply so that the dot can

00:08:36,539 --> 00:08:43,079
be brought into non-state what I mean is

00:08:41,039 --> 00:08:47,699
to be completely shut off

00:08:43,079 --> 00:08:50,699
it gives pass-through to the usb on the

00:08:47,699 --> 00:08:53,160
dot and of course it shares connection

00:08:50,699 --> 00:08:57,329
to the microSD card between the test

00:08:53,160 --> 00:09:01,949
server and device under test since it

00:08:57,329 --> 00:09:05,790
worked pretty well for us in 2016 we

00:09:01,949 --> 00:09:08,490
decided to make it open hardware and all

00:09:05,790 --> 00:09:12,839
of these come at --ax are available at

00:09:08,490 --> 00:09:18,300
the git repository and it has already

00:09:12,839 --> 00:09:23,519
been reused by cute company by a blatant

00:09:18,300 --> 00:09:28,050
as well and also a forked by resin aisle

00:09:23,519 --> 00:09:30,360
who came up with the Otto hot board

00:09:28,050 --> 00:09:34,079
which is as demarks with a few

00:09:30,360 --> 00:09:39,750
indicators such as micro SD card

00:09:34,079 --> 00:09:44,339
activity or power supply activity but

00:09:39,750 --> 00:09:47,670
the SD max boards also gave us a lot of

00:09:44,339 --> 00:09:49,769
headache for example the USB connection

00:09:47,670 --> 00:09:53,069
between the test server and as the max

00:09:49,769 --> 00:09:56,750
boards was not reliable one and every

00:09:53,069 --> 00:10:01,500
three to six months we got these

00:09:56,750 --> 00:10:06,240
protocol errors you see here and so far

00:10:01,500 --> 00:10:11,940
we've we've not we did not detect the

00:10:06,240 --> 00:10:15,930
root of the problem so we decided to

00:10:11,940 --> 00:10:19,500
take a step back get back to the drawing

00:10:15,930 --> 00:10:22,800
board and came up with a new idea with

00:10:19,500 --> 00:10:25,560
the experience from SD max boards we

00:10:22,800 --> 00:10:28,880
already knew what was working well what

00:10:25,560 --> 00:10:32,160
was not and decided to focus on

00:10:28,880 --> 00:10:34,829
replaceable media only since they are

00:10:32,160 --> 00:10:38,279
the components that we're off most

00:10:34,829 --> 00:10:43,050
quickly and still you might want to have

00:10:38,279 --> 00:10:45,390
the actual media that you will run the

00:10:43,050 --> 00:10:49,830
software on and not just a network

00:10:45,390 --> 00:10:53,910
or similar for example for storage

00:10:49,830 --> 00:10:55,860
benchmarking or so we also decided that

00:10:53,910 --> 00:10:59,580
there should be no single point of

00:10:55,860 --> 00:11:03,029
failure and what I mean by that is that

00:10:59,580 --> 00:11:08,540
a failure of a single subsystem such as

00:11:03,029 --> 00:11:12,630
USB on test host should not cause

00:11:08,540 --> 00:11:15,209
failure on more than one device and also

00:11:12,630 --> 00:11:17,220
we decided that there should be no us

00:11:15,209 --> 00:11:20,910
being involvement from the test server

00:11:17,220 --> 00:11:23,990
with the problems of the SD max we also

00:11:20,910 --> 00:11:28,170
wanted to have absolutely minimum of

00:11:23,990 --> 00:11:31,680
external connections and decided to give

00:11:28,170 --> 00:11:34,920
two of them we want it also unified

00:11:31,680 --> 00:11:37,500
access no matter what device under test

00:11:34,920 --> 00:11:40,769
is actually connected and with the

00:11:37,500 --> 00:11:43,110
feedback from resin IO I decided that

00:11:40,769 --> 00:11:48,839
the setup and maintenance of all the

00:11:43,110 --> 00:11:52,350
boards should be as easy as possible so

00:11:48,839 --> 00:11:58,490
we thought that user interface might of

00:11:52,350 --> 00:12:04,829
might also be beneficial in such port

00:11:58,490 --> 00:12:09,029
with interest in power consumption

00:12:04,829 --> 00:12:12,420
measurements and initiatives such as

00:12:09,029 --> 00:12:15,329
power CI we decided that power

00:12:12,420 --> 00:12:18,690
consumption measurement hardware and

00:12:15,329 --> 00:12:24,149
could also be beneficial on board and

00:12:18,690 --> 00:12:26,279
also we wanted to be able to write some

00:12:24,149 --> 00:12:30,089
additional information to the device

00:12:26,279 --> 00:12:35,270
under test such as EDID via HDMI

00:12:30,089 --> 00:12:39,449
connection for supplying information on

00:12:35,270 --> 00:12:42,540
what hardware can be connected to the

00:12:39,449 --> 00:12:45,570
device under test with all that in mind

00:12:42,540 --> 00:12:49,440
we came up with the max by board I

00:12:45,570 --> 00:12:52,380
mentioned earlier but I believe it will

00:12:49,440 --> 00:12:55,839
be much easier to describe it on these

00:12:52,380 --> 00:12:59,500
blocks so

00:12:55,839 --> 00:13:03,490
as I mentioned only two connections to

00:12:59,500 --> 00:13:05,290
the outside world and we began with the

00:13:03,490 --> 00:13:09,370
gold old as d-max

00:13:05,290 --> 00:13:13,839
so the capability of demultiplexing

00:13:09,370 --> 00:13:17,079
access to the microSD card between the

00:13:13,839 --> 00:13:20,740
server which in our case is this no no

00:13:17,079 --> 00:13:26,470
pie board and ability to switch off the

00:13:20,740 --> 00:13:31,060
power to the device under test next the

00:13:26,470 --> 00:13:34,660
UI often requested and often came up

00:13:31,060 --> 00:13:38,170
with in the feedback we got from the SD

00:13:34,660 --> 00:13:41,680
market development also our control and

00:13:38,170 --> 00:13:44,560
power as power consumption measurement

00:13:41,680 --> 00:13:48,699
hardware is already on the MUX by board

00:13:44,560 --> 00:13:53,259
and to control it to control everything

00:13:48,699 --> 00:13:56,829
we've got the Nano pioneer which is arm

00:13:53,259 --> 00:13:59,589
v7 which is pretty small arm v7 single

00:13:56,829 --> 00:14:04,050
board computer and micro controller on

00:13:59,589 --> 00:14:08,769
the board itself for low-level functions

00:14:04,050 --> 00:14:09,550
as for the connections to the device

00:14:08,769 --> 00:14:13,410
under test

00:14:09,550 --> 00:14:17,130
we've got Ethernet various USBs

00:14:13,410 --> 00:14:25,170
including five pin USB with the ID pin

00:14:17,130 --> 00:14:25,170
and USB OTG if there is a need to have

00:14:25,470 --> 00:14:33,639
control over the UART that's also

00:14:29,019 --> 00:14:37,209
available for diapers which stands for

00:14:33,639 --> 00:14:41,639
dynamic jumper to be able to simulate

00:14:37,209 --> 00:14:44,740
pushing buttons or switching on/off

00:14:41,639 --> 00:14:49,170
various jumpers some of the board's we

00:14:44,740 --> 00:14:54,160
test on require such actions in order to

00:14:49,170 --> 00:14:57,579
to be put into the flashing mode or to

00:14:54,160 --> 00:15:01,630
be booted up such as minnowboard it

00:14:57,579 --> 00:15:04,300
requires pushing the power button we

00:15:01,630 --> 00:15:07,000
also have got the HDMI but as I

00:15:04,300 --> 00:15:08,720
mentioned earlier only PCC line is

00:15:07,000 --> 00:15:12,019
connected for writing

00:15:08,720 --> 00:15:16,819
Idid information and we also knew that

00:15:12,019 --> 00:15:20,449
not everything can be predicted a priori

00:15:16,819 --> 00:15:23,569
so there is also connection for the Adam

00:15:20,449 --> 00:15:26,800
boards with that we've got the ability

00:15:23,569 --> 00:15:29,509
of switching microSD cards between

00:15:26,800 --> 00:15:32,959
device under test and test server which

00:15:29,509 --> 00:15:36,050
in our case is this nano PI board we are

00:15:32,959 --> 00:15:43,100
able to put the device under test into

00:15:36,050 --> 00:15:44,990
norm state we can press buttons on it we

00:15:43,100 --> 00:15:47,089
are able to measure power consumption

00:15:44,990 --> 00:15:50,120
right at the ideal information and also

00:15:47,089 --> 00:15:52,699
provide various connections to the

00:15:50,120 --> 00:15:54,790
device under test over the in Ethernet

00:15:52,699 --> 00:15:59,829
that is connected to the max by board

00:15:54,790 --> 00:16:03,500
and we also are able to interact with

00:15:59,829 --> 00:16:08,360
fir maintained errs are able to interact

00:16:03,500 --> 00:16:11,810
with those devices and since we are at

00:16:08,360 --> 00:16:15,769
interaction max by boards are equipped

00:16:11,810 --> 00:16:18,649
not only with those LEDs activity LEDs I

00:16:15,769 --> 00:16:22,370
mentioned from the feedback from resin

00:16:18,649 --> 00:16:27,589
i/o but also a couple of buttons for

00:16:22,370 --> 00:16:30,889
quick actions some additional LEDs for

00:16:27,589 --> 00:16:33,110
indicating state of the either max by

00:16:30,889 --> 00:16:37,189
board itself or the device under test

00:16:33,110 --> 00:16:43,009
that is connected to it and also all LED

00:16:37,189 --> 00:16:45,920
display for quick information which has

00:16:43,009 --> 00:16:50,649
been pretty useful so far as for the

00:16:45,920 --> 00:16:50,649
extensibility of the board we use

00:16:51,639 --> 00:16:58,970
prototypes prototype boards if there is

00:16:55,309 --> 00:17:02,059
a need to extend features on the max by

00:16:58,970 --> 00:17:07,010
board even further or if there was

00:17:02,059 --> 00:17:11,179
something we did not think of while

00:17:07,010 --> 00:17:16,250
creating this board with that we've got

00:17:11,179 --> 00:17:18,860
finally a standalone device that does

00:17:16,250 --> 00:17:22,310
not need access to the test server

00:17:18,860 --> 00:17:27,770
anymore which is aware of its state

00:17:22,310 --> 00:17:30,980
and not only does it state but also

00:17:27,770 --> 00:17:32,450
device under test that it controls which

00:17:30,980 --> 00:17:35,990
is pretty easy to maintain and

00:17:32,450 --> 00:17:39,230
extensibility and extensible from the

00:17:35,990 --> 00:17:41,570
ground up and if you would like to build

00:17:39,230 --> 00:17:42,020
your own if it would be beneficial for

00:17:41,570 --> 00:17:45,110
you

00:17:42,020 --> 00:17:48,490
you should get equipped with nano

00:17:45,110 --> 00:17:53,260
pioneer which goes for around ten bucks

00:17:48,490 --> 00:18:02,050
parts for the max by board cost around

00:17:53,260 --> 00:18:06,800
$80 and it was for I believe 30 units we

00:18:02,050 --> 00:18:09,940
made around December but also high

00:18:06,800 --> 00:18:13,460
soldering skills and a lot of patience

00:18:09,940 --> 00:18:15,940
still if you're interested go ahead to

00:18:13,460 --> 00:18:19,370
our git repository where you can find

00:18:15,940 --> 00:18:23,840
schematics software schematics for the

00:18:19,370 --> 00:18:27,050
prototype boards and even more but

00:18:23,840 --> 00:18:30,710
that's not the whole solution hardware

00:18:27,050 --> 00:18:33,410
is not everything we also had to develop

00:18:30,710 --> 00:18:38,020
some software that accompanies this

00:18:33,410 --> 00:18:42,590
solution and with approaches such as

00:18:38,020 --> 00:18:46,760
lava monolithic approaches we already

00:18:42,590 --> 00:18:50,260
knew that making changes after time can

00:18:46,760 --> 00:18:53,930
be painful so we decided to go with

00:18:50,260 --> 00:18:57,170
multi-layer architecture and focus on

00:18:53,930 --> 00:19:00,860
following the UNIX philosophy of doing

00:18:57,170 --> 00:19:03,740
one thing but doing hopefully well so

00:19:00,860 --> 00:19:07,430
we've got four layers in our software

00:19:03,740 --> 00:19:13,250
stack and those layers communicate with

00:19:07,430 --> 00:19:18,770
each other via restful HTTP api's still

00:19:13,250 --> 00:19:21,280
we wanted our stack to be similar and to

00:19:18,770 --> 00:19:25,280
be able to develop each of the

00:19:21,280 --> 00:19:30,580
components by the same team so

00:19:25,280 --> 00:19:30,580
everything is written in go language

00:19:30,960 --> 00:19:39,660
as for the software layers there are

00:19:35,130 --> 00:19:45,390
four types of actions that have to be

00:19:39,660 --> 00:19:49,530
done as they today release engineering

00:19:45,390 --> 00:19:52,950
activities and it is monitoring build

00:19:49,530 --> 00:19:56,760
system for new releases are actually

00:19:52,950 --> 00:19:59,880
pretty pre releases since they are not

00:19:56,760 --> 00:20:02,190
publicly available yet or getting

00:19:59,880 --> 00:20:07,220
notification about them depending on

00:20:02,190 --> 00:20:13,160
what your build system supports also

00:20:07,220 --> 00:20:17,880
being able to to schedule all the

00:20:13,160 --> 00:20:21,680
actions having access to the device

00:20:17,880 --> 00:20:26,790
under test and actually running those

00:20:21,680 --> 00:20:30,480
actions so the first one is being taken

00:20:26,790 --> 00:20:39,330
care of param param in slavic legends is

00:20:30,480 --> 00:20:43,050
a demigod with biggest powers so it he

00:20:39,330 --> 00:20:46,470
was chosen for the first layer as for

00:20:43,050 --> 00:20:49,590
the actions that are necessary to be

00:20:46,470 --> 00:20:55,710
taken care of it's the job for welis

00:20:49,590 --> 00:21:00,180
welis in slavic legends is god of the

00:20:55,710 --> 00:21:04,200
underworld and takes care of it as for

00:21:00,180 --> 00:21:06,060
the being able to know where those

00:21:04,200 --> 00:21:08,700
actions can be done it's a job for

00:21:06,060 --> 00:21:12,120
biruta biruta in slavic Legends is a

00:21:08,700 --> 00:21:18,120
caretaker of the forest and all living

00:21:12,120 --> 00:21:20,880
creatures and the knowledge as how to

00:21:18,120 --> 00:21:22,680
perform all those actions is a job for

00:21:20,880 --> 00:21:27,020
Dryad dryads

00:21:22,680 --> 00:21:30,300
are the free souls of the forest and

00:21:27,020 --> 00:21:32,850
let's begin with those max by based

00:21:30,300 --> 00:21:38,640
dryads and dryads

00:21:32,850 --> 00:21:41,760
in our testing farm take take care of a

00:21:38,640 --> 00:21:44,250
single device under tests under test and

00:21:41,760 --> 00:21:47,970
are fully aware of all

00:21:44,250 --> 00:21:51,030
of capabilities that given that provides

00:21:47,970 --> 00:21:53,550
as I mentioned they require only two

00:21:51,030 --> 00:21:56,210
interfaces which are power supply and

00:21:53,550 --> 00:21:59,280
network connection and are equipped with

00:21:56,210 --> 00:22:05,370
software for flashing firmware

00:21:59,280 --> 00:22:09,530
over-the-air and also for cutting power

00:22:05,370 --> 00:22:14,220
connection or or bringing it up again

00:22:09,530 --> 00:22:17,520
but that's just for a single device if

00:22:14,220 --> 00:22:20,490
there are multiple ones they have to be

00:22:17,520 --> 00:22:22,680
taken care of and as for the farm

00:22:20,490 --> 00:22:26,640
management system we've got brutal

00:22:22,680 --> 00:22:30,420
brutal schedules access requests to the

00:22:26,640 --> 00:22:37,650
devices and provides convenient access

00:22:30,420 --> 00:22:41,630
to do the assigned ones so how does

00:22:37,650 --> 00:22:44,610
Dryad life cycle goes in boruto first

00:22:41,630 --> 00:22:47,600
Dryad is in maintenance mode and it can

00:22:44,610 --> 00:22:51,270
be brought into idle or unallocated

00:22:47,600 --> 00:22:55,620
state by the foreign maintainer if there

00:22:51,270 --> 00:22:59,300
is an access request to to dry it with

00:22:55,620 --> 00:23:04,940
capabilities which given Dryad serves

00:22:59,300 --> 00:23:09,150
and it matches then it is assigned the

00:23:04,940 --> 00:23:12,750
test environment is prepared SSH tunnel

00:23:09,150 --> 00:23:16,170
for the access to the Nano PI board is

00:23:12,750 --> 00:23:22,170
set up and then all of the actions might

00:23:16,170 --> 00:23:28,710
be performed so to sum it all up it does

00:23:22,170 --> 00:23:33,170
not matter who requests the access to

00:23:28,710 --> 00:23:37,550
the Triad if there is one that matches

00:23:33,170 --> 00:23:41,570
requirements it will be assigned to

00:23:37,550 --> 00:23:44,370
requester and it can be either

00:23:41,570 --> 00:23:48,770
interactive session by real users or

00:23:44,370 --> 00:23:52,350
just an automated one by some automated

00:23:48,770 --> 00:23:53,760
testing framework and since we are

00:23:52,350 --> 00:23:56,460
talking about automated testing

00:23:53,760 --> 00:23:57,860
framework let's move on to Valis which

00:23:56,460 --> 00:24:01,190
is our

00:23:57,860 --> 00:24:05,540
lava inspired testing framework which

00:24:01,190 --> 00:24:08,420
translates young job definitions like

00:24:05,540 --> 00:24:10,850
they are like the ones used in lava into

00:24:08,420 --> 00:24:15,230
the actions that are being executed on

00:24:10,850 --> 00:24:18,860
dots actions can be divided into several

00:24:15,230 --> 00:24:23,570
sections such as deploy boot test and

00:24:18,860 --> 00:24:29,630
collect we try to maintain compatibility

00:24:23,570 --> 00:24:34,100
with the lava drop definitions but there

00:24:29,630 --> 00:24:37,340
are only a subset of actions that can be

00:24:34,100 --> 00:24:40,520
run in lava laboratories is supported in

00:24:37,340 --> 00:24:44,270
valise so far as you might have

00:24:40,520 --> 00:24:48,350
suspected well as main purpose was to

00:24:44,270 --> 00:24:54,470
automate the step of performing actions

00:24:48,350 --> 00:24:57,980
on the device and that's what it comes

00:24:54,470 --> 00:25:00,650
down to just parsing llamó collecting

00:24:57,980 --> 00:25:03,830
all the necessary assets for job

00:25:00,650 --> 00:25:06,830
execution then requesting access to the

00:25:03,830 --> 00:25:09,460
device under test in biruta and actually

00:25:06,830 --> 00:25:13,970
performing tests and collecting results

00:25:09,460 --> 00:25:17,390
multiple valid server can be can use

00:25:13,970 --> 00:25:20,059
single boruto server since biruta only

00:25:17,390 --> 00:25:25,400
schedules access requests but let's

00:25:20,059 --> 00:25:30,049
focus on just a single one and no matter

00:25:25,400 --> 00:25:33,890
who submits your job for the test

00:25:30,049 --> 00:25:37,490
execution whether it's user or automated

00:25:33,890 --> 00:25:41,510
system it doesn't really matter for for

00:25:37,490 --> 00:25:46,549
Velas FLS takes it from there and takes

00:25:41,510 --> 00:25:50,540
care of the whole testing process moving

00:25:46,549 --> 00:25:54,650
on to the final layer of our neo testing

00:25:50,540 --> 00:25:58,690
system param which is the testing system

00:25:54,650 --> 00:26:01,780
for the OS images it's schedules

00:25:58,690 --> 00:26:05,510
verification pair

00:26:01,780 --> 00:26:08,030
new pre-release and actually automates

00:26:05,510 --> 00:26:13,000
the Quality Assurance steps of release

00:26:08,030 --> 00:26:17,630
engineering duties it crawls given URLs

00:26:13,000 --> 00:26:21,200
then reports and it changes it detects

00:26:17,630 --> 00:26:25,220
submits valid jobs collects all the

00:26:21,200 --> 00:26:29,600
artifacts after the testing jobs are

00:26:25,220 --> 00:26:33,290
completed and interprets the results so

00:26:29,600 --> 00:26:35,780
that we know whether new pre-release can

00:26:33,290 --> 00:26:38,290
be accepted or should be stopped from

00:26:35,780 --> 00:26:38,290
being published

00:26:38,510 --> 00:26:45,950
just like with fellows there can be

00:26:42,680 --> 00:26:49,280
multiple connections from the param

00:26:45,950 --> 00:26:53,950
servers to Vella's for example to

00:26:49,280 --> 00:26:58,540
monitor various build systems which can

00:26:53,950 --> 00:27:05,300
publish software to be tested on all

00:26:58,540 --> 00:27:13,220
those layers combined make the Slav

00:27:05,300 --> 00:27:17,530
stock which we named it and the name

00:27:13,220 --> 00:27:22,730
comes from all of those Slavic legends

00:27:17,530 --> 00:27:26,210
we wanted to keep it simple and the

00:27:22,730 --> 00:27:29,960
coupled so if you only need unified

00:27:26,210 --> 00:27:32,900
access and to be able to access remotely

00:27:29,960 --> 00:27:36,980
your devices under tests in a unified

00:27:32,900 --> 00:27:39,590
way go ahead take the schematics for the

00:27:36,980 --> 00:27:43,310
max whiteboard and you're all set

00:27:39,590 --> 00:27:46,910
but maybe you already have your own

00:27:43,310 --> 00:27:50,990
solution for the remote access to the

00:27:46,910 --> 00:27:55,160
dots but you still want software that

00:27:50,990 --> 00:27:58,340
manages a whole farm replace max by with

00:27:55,160 --> 00:28:03,560
your solution take biruta as long as the

00:27:58,340 --> 00:28:07,310
api's contracts are fine it should work

00:28:03,560 --> 00:28:11,470
properly maybe you have already your own

00:28:07,310 --> 00:28:15,049
testing framework but still could use

00:28:11,470 --> 00:28:18,019
board forum management software

00:28:15,049 --> 00:28:21,559
then go ahead and take multiple parts

00:28:18,019 --> 00:28:24,970
such as burrata and dryads or maybe you

00:28:21,559 --> 00:28:28,249
think that our goal and implementation

00:28:24,970 --> 00:28:31,929
requires reworking or you already have

00:28:28,249 --> 00:28:36,049
your JavaScript based dashboard Python

00:28:31,929 --> 00:28:39,409
testing framework and Jenkins for

00:28:36,049 --> 00:28:43,639
example for scheduling access to the

00:28:39,409 --> 00:28:47,059
boards as long as the API contracts are

00:28:43,639 --> 00:28:51,230
maintained all these layers can be

00:28:47,059 --> 00:28:55,489
easily swapped so that's what we've been

00:28:51,230 --> 00:29:03,080
working so far and as for the future

00:28:55,489 --> 00:29:07,159
plans on the hardware side we plan on

00:29:03,080 --> 00:29:11,029
having the audio input and output on

00:29:07,159 --> 00:29:13,279
being able to test out your i/o and we

00:29:11,029 --> 00:29:16,450
plan to investigate the possibility of

00:29:13,279 --> 00:29:21,350
extending max by boards with USB type-c

00:29:16,450 --> 00:29:26,179
since more and more targets are equipped

00:29:21,350 --> 00:29:29,200
with that connector also we see that

00:29:26,179 --> 00:29:33,230
there is a need to be able to access

00:29:29,200 --> 00:29:37,190
serial console on the nano PI bars and

00:29:33,230 --> 00:29:40,389
the future revisions of Mac's PI will be

00:29:37,190 --> 00:29:44,210
equipped with it on the software side

00:29:40,389 --> 00:29:49,220
will provide web interfaces for all

00:29:44,210 --> 00:29:55,009
current layers so far we only used CLI

00:29:49,220 --> 00:30:01,850
and it was enough we also intend to

00:29:55,009 --> 00:30:09,169
provide service state management for to

00:30:01,850 --> 00:30:12,580
be able to to work with failure if and

00:30:09,169 --> 00:30:16,879
if such occurs and provide further

00:30:12,580 --> 00:30:21,289
layers maybe to automate release

00:30:16,879 --> 00:30:25,200
engineering duties even more or further

00:30:21,289 --> 00:30:29,100
details can be found on wiki pages

00:30:25,200 --> 00:30:31,830
either for max PI boards or lessons

00:30:29,100 --> 00:30:37,769
learned from our experience with Asda

00:30:31,830 --> 00:30:41,250
Max's if you would like to for us to

00:30:37,769 --> 00:30:41,760
help you with creating your own max

00:30:41,250 --> 00:30:44,309
price

00:30:41,760 --> 00:30:47,549
go ahead and drop us a line at mailing

00:30:44,309 --> 00:30:51,830
list out or poke us at Tyson channel on

00:30:47,549 --> 00:30:55,679
freenode to sum it all up

00:30:51,830 --> 00:30:59,669
we finally got a setup

00:30:55,679 --> 00:31:04,289
which can be reused pretty quickly and

00:30:59,669 --> 00:31:07,159
is easy to maintain we finally got all

00:31:04,289 --> 00:31:12,299
the responsibilities divided so

00:31:07,159 --> 00:31:15,809
developers can focus on only on software

00:31:12,299 --> 00:31:19,620
development testers on writing tests and

00:31:15,809 --> 00:31:22,980
far maintain errs on maintaining all

00:31:19,620 --> 00:31:26,779
those devices we've got a parallel

00:31:22,980 --> 00:31:30,200
execution no matter who wants to access

00:31:26,779 --> 00:31:33,830
the devices either automated test

00:31:30,200 --> 00:31:37,950
automated testing systems or interactive

00:31:33,830 --> 00:31:40,679
sessions for real users and we finally

00:31:37,950 --> 00:31:47,330
got the unified environment no matter

00:31:40,679 --> 00:31:47,330
which which type of device is connected

00:31:47,779 --> 00:31:53,340
that's all I've got for you prepared

00:31:51,120 --> 00:31:55,860
today and if you have any questions I

00:31:53,340 --> 00:31:58,139
will be more than happy to answer them

00:31:55,860 --> 00:32:01,340
I will repeat those because I've got

00:31:58,139 --> 00:32:01,340
only one mic

00:32:05,179 --> 00:32:17,759
the alright the question was about CLI

00:32:13,350 --> 00:32:21,230
interfaces on current layers and the

00:32:17,759 --> 00:32:25,320
fact that I only linked the max PI

00:32:21,230 --> 00:32:27,960
repository is because it's the only one

00:32:25,320 --> 00:32:32,120
that is already publicly available all

00:32:27,960 --> 00:32:38,970
other ones are still in the process of

00:32:32,120 --> 00:32:41,789
being published so wellis is halfway

00:32:38,970 --> 00:32:47,279
through param is still in development

00:32:41,789 --> 00:32:52,159
and biruta should be published in a few

00:32:47,279 --> 00:32:56,690
weeks I believe but so far there is no

00:32:52,159 --> 00:32:56,690
publicly available documentation

00:33:19,720 --> 00:33:22,990
all right

00:33:31,840 --> 00:33:38,620
okay if there are no more questions

00:33:35,620 --> 00:33:42,430
thanks for your attention and if you

00:33:38,620 --> 00:33:48,130
would like to see all of those in action

00:33:42,430 --> 00:33:52,710
I have stand on technical showcase

00:33:48,130 --> 00:33:59,410
tomorrow evening if you'd like to see

00:33:52,710 --> 00:34:04,270
dryads or valise Peron only well as and

00:33:59,410 --> 00:34:09,130
biruta Peron not yet but where it's

00:34:04,270 --> 00:34:13,630
coming and tomorrow night

00:34:09,130 --> 00:34:16,630
evening sorry a technical showcase I

00:34:13,630 --> 00:34:19,620
will be demonstrating the software and

00:34:16,630 --> 00:34:22,150
hardware as well if you're interested

00:34:19,620 --> 00:34:24,830
for now thanks for your attention and

00:34:22,150 --> 00:34:29,520
have a good one Thanks

00:34:24,830 --> 00:34:29,520

YouTube URL: https://www.youtube.com/watch?v=Hx9MEhR05cU


