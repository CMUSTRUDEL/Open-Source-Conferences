Title: BoF: Mender, Current and Future Status of the Open Source Project - Eystein Stenberg, Mender.io
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	BoF: Mender, Current and Future Status of the Open Source Project - Eystein Stenberg, Mender.io

This BoF will discuss Mender's current and future status of the open source project to deploy OTA updates to embedded systems.
Captions: 
	00:00:00,030 --> 00:00:05,220
we were going to talk a bit about

00:00:01,280 --> 00:00:09,210
over-the-air updates so this is

00:00:05,220 --> 00:00:11,940
typically how people develop connected

00:00:09,210 --> 00:00:14,099
devices or IOT devices so you start off

00:00:11,940 --> 00:00:16,770
by prototyping production design and

00:00:14,099 --> 00:00:19,650
then you get into some kind of release

00:00:16,770 --> 00:00:23,039
deadline panic towards the end before

00:00:19,650 --> 00:00:25,140
you get into mass production and this is

00:00:23,039 --> 00:00:30,300
also where you typically start thinking

00:00:25,140 --> 00:00:32,579
about over-the-air updates and because

00:00:30,300 --> 00:00:35,250
you know that during this critical phase

00:00:32,579 --> 00:00:37,920
where you're almost there you make some

00:00:35,250 --> 00:00:41,190
mistakes and now you need a way to fix

00:00:37,920 --> 00:00:43,739
them of course this is where you should

00:00:41,190 --> 00:00:45,780
be thinking about over-the-air updates

00:00:43,739 --> 00:00:48,420
and how to resolve them earlier in the

00:00:45,780 --> 00:00:50,340
process so when you have a prototyping

00:00:48,420 --> 00:00:52,379
stage you might want to test it out a

00:00:50,340 --> 00:00:55,289
little bit or especially when you're in

00:00:52,379 --> 00:00:56,969
production design what kind of update

00:00:55,289 --> 00:00:59,820
strategy should you use for your

00:00:56,969 --> 00:01:04,350
application it's really hard to read

00:00:59,820 --> 00:01:05,939
through these things so what we see a

00:01:04,350 --> 00:01:08,790
lot that Mandor obviously will make

00:01:05,939 --> 00:01:10,350
open-source over-the-air update err but

00:01:08,790 --> 00:01:12,990
what we see a lot is that people build

00:01:10,350 --> 00:01:15,439
their own and I've divided them into

00:01:12,990 --> 00:01:17,939
three categories

00:01:15,439 --> 00:01:19,979
by the way how many of you have built

00:01:17,939 --> 00:01:23,280
your own over-the-air updater

00:01:19,979 --> 00:01:27,030
just raise your hand it's kind of like

00:01:23,280 --> 00:01:30,110
one third of you and how many you would

00:01:27,030 --> 00:01:34,650
like to do it again if you had a chance

00:01:30,110 --> 00:01:38,100
one okay but so this is generally also

00:01:34,650 --> 00:01:41,729
what we see like people make it because

00:01:38,100 --> 00:01:45,329
they have to and it's panic and things

00:01:41,729 --> 00:01:48,360
go not as expected always seems like

00:01:45,329 --> 00:01:52,200
easy problem but the first version is

00:01:48,360 --> 00:01:57,719
what I call the breaker which is it's

00:01:52,200 --> 00:02:00,420
very short development time and then you

00:01:57,719 --> 00:02:02,820
start to worry and see the effects of it

00:02:00,420 --> 00:02:05,969
afterwards so you see that when you

00:02:02,820 --> 00:02:08,429
update devices they lose power they

00:02:05,969 --> 00:02:09,660
never come back online and they get

00:02:08,429 --> 00:02:10,850
shipped back to you and you have to

00:02:09,660 --> 00:02:13,340
resolve this and as

00:02:10,850 --> 00:02:15,950
court case for example so you start out

00:02:13,340 --> 00:02:19,400
with some bash scripts maybe and and you

00:02:15,950 --> 00:02:21,380
work your way from there then you have

00:02:19,400 --> 00:02:24,980
the honeypot which is more

00:02:21,380 --> 00:02:26,290
security-related so in this case you

00:02:24,980 --> 00:02:29,030
might not be thinking about

00:02:26,290 --> 00:02:30,440
authentication when you download the

00:02:29,030 --> 00:02:33,680
update for example so if somebody is

00:02:30,440 --> 00:02:35,950
nearby they're able to inject an update

00:02:33,680 --> 00:02:39,890
that was not supposed to go there

00:02:35,950 --> 00:02:43,810
maybe there's plaintext protocols there

00:02:39,890 --> 00:02:48,350
is no signatures actually the Tesla had

00:02:43,810 --> 00:02:51,410
partly this problem until 2016 when they

00:02:48,350 --> 00:02:54,320
got hacked by some Chinese research

00:02:51,410 --> 00:02:56,720
company they did not have signature

00:02:54,320 --> 00:03:00,650
validation of their updates so they were

00:02:56,720 --> 00:03:02,660
able to take over a Tesla it sounds like

00:03:00,650 --> 00:03:06,350
a basic problem that even Tesla has this

00:03:02,660 --> 00:03:08,900
problem and then you have the needy

00:03:06,350 --> 00:03:11,480
updater which is the one that needs a

00:03:08,900 --> 00:03:15,080
lot of attention because you need to do

00:03:11,480 --> 00:03:17,990
it one by one so you have a device and

00:03:15,080 --> 00:03:19,790
then the only way to get software to it

00:03:17,990 --> 00:03:21,860
is through an USB stick and then maybe

00:03:19,790 --> 00:03:24,320
run some rescue mode and a shell script

00:03:21,860 --> 00:03:25,190
there so obviously this doesn't work

00:03:24,320 --> 00:03:28,880
that well

00:03:25,190 --> 00:03:34,370
it doesn't scale that well so it it gets

00:03:28,880 --> 00:03:39,680
done less frequently than it should and

00:03:34,370 --> 00:03:42,440
then why why are this so hard problems

00:03:39,680 --> 00:03:44,210
well it's basically because we work in a

00:03:42,440 --> 00:03:46,310
very rough environment in the embedded

00:03:44,210 --> 00:03:50,780
space as you're probably familiar with

00:03:46,310 --> 00:03:52,880
already the devices are remote they are

00:03:50,780 --> 00:03:55,970
expected to live for a very long time in

00:03:52,880 --> 00:03:58,520
the field maybe five ten years for cars

00:03:55,970 --> 00:04:01,160
it's even longer maybe thirty years and

00:03:58,520 --> 00:04:03,320
then you have these factors that that

00:04:01,160 --> 00:04:06,260
make it hard so it has to work every

00:04:03,320 --> 00:04:10,190
time because it's remote and long life

00:04:06,260 --> 00:04:12,800
time but then the power is unreliable

00:04:10,190 --> 00:04:15,590
maybe it's running on battery maybe

00:04:12,800 --> 00:04:17,380
there's a stupid user that unplugs it

00:04:15,590 --> 00:04:21,739
suddenly while you're doing the update

00:04:17,380 --> 00:04:23,820
why would he ever do that and then what

00:04:21,739 --> 00:04:26,490
happens when the device boots again

00:04:23,820 --> 00:04:29,280
- laughs and you also have unreliable

00:04:26,490 --> 00:04:32,010
Network public network often wireless

00:04:29,280 --> 00:04:33,810
networks that are insecure as well so

00:04:32,010 --> 00:04:37,740
it's a pretty harsh environment as you

00:04:33,810 --> 00:04:39,780
know and based on this we found some

00:04:37,740 --> 00:04:41,850
criteria that you should have as part of

00:04:39,780 --> 00:04:44,730
the update process so it needs to be

00:04:41,850 --> 00:04:46,710
robust and secure integrate well with

00:04:44,730 --> 00:04:48,630
your existing environment because you

00:04:46,710 --> 00:04:50,430
probably have some way of building your

00:04:48,630 --> 00:04:52,380
software and developing your software

00:04:50,430 --> 00:04:54,600
already and you don't want to replace

00:04:52,380 --> 00:04:57,090
all that just to get already our updates

00:04:54,600 --> 00:05:00,900
to it easy to getting started again

00:04:57,090 --> 00:05:02,700
because we're often in that right bottom

00:05:00,900 --> 00:05:06,600
box there were in panic mode and you

00:05:02,700 --> 00:05:09,300
want to enable updates somehow and you

00:05:06,600 --> 00:05:11,940
don't want to spend too much time on

00:05:09,300 --> 00:05:13,920
this and then of course you have

00:05:11,940 --> 00:05:17,220
bandwidth consumptions especially for 3G

00:05:13,920 --> 00:05:20,160
networks and downtime during the update

00:05:17,220 --> 00:05:22,020
this very salsa by application how long

00:05:20,160 --> 00:05:24,510
are you allowed to take your device's

00:05:22,020 --> 00:05:28,140
offline if it's part of the telecom or

00:05:24,510 --> 00:05:30,690
router or network this is very important

00:05:28,140 --> 00:05:33,240
of course to have it very short but it

00:05:30,690 --> 00:05:35,750
varies a bit and then lastly is the

00:05:33,240 --> 00:05:39,120
update server so being able to manage

00:05:35,750 --> 00:05:42,660
updates across a lot of devices is also

00:05:39,120 --> 00:05:48,090
important in order to make it cheap to

00:05:42,660 --> 00:05:51,330
deploy a new update so this is over the

00:05:48,090 --> 00:05:54,180
years after we've worked on this problem

00:05:51,330 --> 00:05:57,150
we released the first version of Mandor

00:05:54,180 --> 00:06:00,810
last year so it's just one year old

00:05:57,150 --> 00:06:03,300
the first version I wonder but will

00:06:00,810 --> 00:06:05,130
develop this workflow that you should

00:06:03,300 --> 00:06:09,860
follow if you're doing over-the-air

00:06:05,130 --> 00:06:11,940
updates so firstly you do some kind of

00:06:09,860 --> 00:06:14,220
detection that there is an update

00:06:11,940 --> 00:06:15,720
available through a secure Channel their

00:06:14,220 --> 00:06:17,700
compatibility checks to make sure that

00:06:15,720 --> 00:06:19,920
the update is for this device it works

00:06:17,700 --> 00:06:22,530
on this device right architecture and so

00:06:19,920 --> 00:06:25,200
on you download it do integrity check

00:06:22,530 --> 00:06:27,750
make sure nothing is corrupted check the

00:06:25,200 --> 00:06:30,750
signature make sure it's authentic

00:06:27,750 --> 00:06:33,419
you might also decrypt and extract it

00:06:30,750 --> 00:06:36,840
depending on if you need those if you

00:06:33,419 --> 00:06:37,650
need confidentiality in your updates and

00:06:36,840 --> 00:06:39,630
then usually

00:06:37,650 --> 00:06:43,259
you have some pre install and post

00:06:39,630 --> 00:06:46,560
install actions but the most important

00:06:43,259 --> 00:06:48,389
one and the one that only that you only

00:06:46,560 --> 00:06:50,880
think about when you're in panic mode is

00:06:48,389 --> 00:06:53,070
to install because see you can see it's

00:06:50,880 --> 00:06:55,770
actually quite a small thing compared to

00:06:53,070 --> 00:06:56,940
all the other things you have to do but

00:06:55,770 --> 00:06:58,680
after you installed it you need to

00:06:56,940 --> 00:07:01,789
restart it you need to do sanity check

00:06:58,680 --> 00:07:05,699
this device work after it did update so

00:07:01,789 --> 00:07:08,210
one thing is if you get linux to boot

00:07:05,699 --> 00:07:10,560
but do your applications work as well

00:07:08,210 --> 00:07:13,620
because otherwise it will be pretty

00:07:10,560 --> 00:07:16,889
useless to the end-user and then lastly

00:07:13,620 --> 00:07:18,810
is maybe most importantly what do you do

00:07:16,889 --> 00:07:20,699
if it doesn't work so there will always

00:07:18,810 --> 00:07:22,949
be some way to resolve it

00:07:20,699 --> 00:07:26,639
maybe ship the device back but that's a

00:07:22,949 --> 00:07:29,960
quite expensive way so what we advocate

00:07:26,639 --> 00:07:34,020
at least is to do have some way to do

00:07:29,960 --> 00:07:36,270
automated roll backs but that depends

00:07:34,020 --> 00:07:39,810
again how you do the installation so

00:07:36,270 --> 00:07:41,550
some ways of installing for example RPM

00:07:39,810 --> 00:07:48,720
packages and things like this you cannot

00:07:41,550 --> 00:07:53,159
roll back in general so quick intro how

00:07:48,720 --> 00:07:58,080
many have used mandir oh it's quite a

00:07:53,159 --> 00:08:02,330
lot four five six maybe sorry you looked

00:07:58,080 --> 00:08:09,720
at it how many are aware of how it works

00:08:02,330 --> 00:08:11,909
ok welcome back welcome to the rest of

00:08:09,720 --> 00:08:17,039
you I'll give you a short intro what it

00:08:11,909 --> 00:08:18,720
is so it has a client on a server so you

00:08:17,039 --> 00:08:22,889
have this management server at the top

00:08:18,720 --> 00:08:24,330
here and you have the devices might be a

00:08:22,889 --> 00:08:27,360
bit small for you but it's on the

00:08:24,330 --> 00:08:29,250
right-hand side no it's so I guess for

00:08:27,360 --> 00:08:31,770
you as well yeah so it's on the

00:08:29,250 --> 00:08:34,919
left-hand side the devices they will

00:08:31,770 --> 00:08:38,459
regularly pull for updates to the

00:08:34,919 --> 00:08:41,880
deployment server and they will if there

00:08:38,459 --> 00:08:44,580
is a update that's ready they will get

00:08:41,880 --> 00:08:46,020
answer get this update and then I will

00:08:44,580 --> 00:08:49,170
install it as you can see at the bottom

00:08:46,020 --> 00:08:52,860
here we have several partitions

00:08:49,170 --> 00:08:56,220
so this is to enable the rollback that I

00:08:52,860 --> 00:08:59,160
mentioned in the previous slide so so we

00:08:56,220 --> 00:09:01,380
have one partition that's active and

00:08:59,160 --> 00:09:03,630
running that's where your system lives

00:09:01,380 --> 00:09:06,300
currently and then we update the other

00:09:03,630 --> 00:09:09,270
one and why do we do this

00:09:06,300 --> 00:09:10,740
so this is because if you lose power for

00:09:09,270 --> 00:09:12,870
example in the middle of the update

00:09:10,740 --> 00:09:14,970
process you will still get back to the

00:09:12,870 --> 00:09:17,370
running partition you wouldn't have

00:09:14,970 --> 00:09:19,680
altered anything of your existing system

00:09:17,370 --> 00:09:21,810
and then you can try again to install

00:09:19,680 --> 00:09:23,970
the update but if you have only one

00:09:21,810 --> 00:09:24,630
partition then when you install the

00:09:23,970 --> 00:09:27,480
update

00:09:24,630 --> 00:09:29,550
it might get half done and then you

00:09:27,480 --> 00:09:34,560
cannot do it anymore so this is to

00:09:29,550 --> 00:09:36,480
enable robust updates and yeah you can't

00:09:34,560 --> 00:09:38,490
update anything you put on the root 12

00:09:36,480 --> 00:09:43,140
system including the kernel device 3

00:09:38,490 --> 00:09:46,470
applications maybe we should do a quick

00:09:43,140 --> 00:09:53,820
demo now I have not started it so it

00:09:46,470 --> 00:09:57,300
will take a little bit but you can also

00:09:53,820 --> 00:09:59,880
try it yourself if you follow the

00:09:57,300 --> 00:10:03,330
getting started we say it will take less

00:09:59,880 --> 00:10:07,610
than one hour to test it out and so far

00:10:03,330 --> 00:10:07,610
it's helped through so

00:10:20,659 --> 00:10:30,539
you can create an account okay so it's

00:10:27,659 --> 00:10:32,249
starting a virtual device here you can

00:10:30,539 --> 00:10:48,149
see there's a mender client there as

00:10:32,249 --> 00:10:53,519
well right now it should be running all

00:10:48,149 --> 00:10:55,139
right it direct so this is the user

00:10:53,519 --> 00:10:56,669
interface that we have it's running

00:10:55,139 --> 00:10:59,639
currently in demo mode which means that

00:10:56,669 --> 00:11:03,749
you cannot use it in production this way

00:10:59,639 --> 00:11:06,569
because it uses a shared key among other

00:11:03,749 --> 00:11:10,129
things so it's it's very insecure I hope

00:11:06,569 --> 00:11:12,569
you cannot connect in mine right now but

00:11:10,129 --> 00:11:16,559
we do also have guidelines how to set it

00:11:12,569 --> 00:11:20,519
up properly but there's a couple there's

00:11:16,559 --> 00:11:22,349
three main areas to look at so one is

00:11:20,519 --> 00:11:25,349
the devices then you have the artifacts

00:11:22,349 --> 00:11:27,149
which are the which the software

00:11:25,349 --> 00:11:28,949
basically that you want to deploy and

00:11:27,149 --> 00:11:30,659
then you have the deployments where you

00:11:28,949 --> 00:11:39,149
kind of combine the devices and the

00:11:30,659 --> 00:11:42,119
artifacts so how many of you use Yocto

00:11:39,149 --> 00:11:52,499
project okay

00:11:42,119 --> 00:11:54,299
maybe 70% so we do have a meta layer so

00:11:52,499 --> 00:11:56,729
if you add that to your to build system

00:11:54,299 --> 00:12:00,449
it will output a couple of extra files

00:11:56,729 --> 00:12:02,549
so one file list has the suffix doc

00:12:00,449 --> 00:12:07,019
mender and this is what I just uploaded

00:12:02,549 --> 00:12:08,729
so you can see it here but this is

00:12:07,019 --> 00:12:13,139
basically a rich file system and it

00:12:08,729 --> 00:12:15,749
contains some additional metadata like

00:12:13,139 --> 00:12:18,449
your checksum the checksum we need that

00:12:15,749 --> 00:12:21,329
in order to not be sure that we got all

00:12:18,449 --> 00:12:22,799
the bits the build a the size and if

00:12:21,329 --> 00:12:24,330
it's signed or not

00:12:22,799 --> 00:12:26,700
so it's

00:12:24,330 --> 00:12:29,190
it's basically roar with file system

00:12:26,700 --> 00:12:31,920
with some metadata around it and this

00:12:29,190 --> 00:12:34,170
gets automatically built if you use

00:12:31,920 --> 00:12:37,490
Yocto we're looking to expand that I'll

00:12:34,170 --> 00:12:40,680
talk a little bit about this later but

00:12:37,490 --> 00:12:43,440
there you go okay so there's one device

00:12:40,680 --> 00:12:46,950
this is started as part of the demo

00:12:43,440 --> 00:12:51,540
setup it's asking you to prove it

00:12:46,950 --> 00:12:54,690
because I haven't added any trust about

00:12:51,540 --> 00:12:57,390
this device before so the device has the

00:12:54,690 --> 00:12:59,940
key of the server but the server doesn't

00:12:57,390 --> 00:13:02,400
know anything about the device so there

00:12:59,940 --> 00:13:05,820
are other ways to approve this device

00:13:02,400 --> 00:13:09,150
you can pre off pre authenticated also

00:13:05,820 --> 00:13:11,360
if you haven't it will just ask you so

00:13:09,150 --> 00:13:14,670
we provide some inventory information

00:13:11,360 --> 00:13:16,770
but most importantly the the current

00:13:14,670 --> 00:13:18,660
software that is running so it's it's

00:13:16,770 --> 00:13:22,920
got a name the software that you have on

00:13:18,660 --> 00:13:24,540
the device already this you can think of

00:13:22,920 --> 00:13:28,230
it like a version but you can put any

00:13:24,540 --> 00:13:29,910
string there or revision and then we

00:13:28,230 --> 00:13:33,150
also collect some additional inventory

00:13:29,910 --> 00:13:36,570
about about the device and this is

00:13:33,150 --> 00:13:39,089
completely configurable so now I have a

00:13:36,570 --> 00:13:41,279
device and I have an artifact so the

00:13:39,089 --> 00:13:42,810
last thing you can see this pop-ups I

00:13:41,279 --> 00:13:47,010
just ignore them but they will try to

00:13:42,810 --> 00:13:49,800
help you what to do next so we can

00:13:47,010 --> 00:13:52,080
create the deployment we can use the

00:13:49,800 --> 00:13:56,240
artifact that we just uploaded the root

00:13:52,080 --> 00:13:58,830
filesystem and we do support grouping so

00:13:56,240 --> 00:14:03,150
you can either do it to all devices or

00:13:58,830 --> 00:14:06,800
you can create a group it doesn't matter

00:14:03,150 --> 00:14:10,770
much right now since I just have one but

00:14:06,800 --> 00:14:14,220
this is the basic workflow and you can

00:14:10,770 --> 00:14:16,050
see the reports as well afterwards and

00:14:14,220 --> 00:14:20,220
the status while it's ongoing

00:14:16,050 --> 00:14:22,170
what is happening so so will tell you

00:14:20,220 --> 00:14:24,620
how long it takes so this will probably

00:14:22,170 --> 00:14:27,390
take a couple of minutes so we can

00:14:24,620 --> 00:14:32,130
resume I guess it's not that interesting

00:14:27,390 --> 00:14:33,310
to watch a progress bar but I'll switch

00:14:32,130 --> 00:14:35,949
back to the

00:14:33,310 --> 00:14:41,249
we can resume here um do you have any

00:14:35,949 --> 00:14:41,249
questions by the way so far yep

00:14:49,809 --> 00:14:59,230
so you're asking about tearing the

00:14:52,389 --> 00:15:00,459
updates so that got it so you have a you

00:14:59,230 --> 00:15:02,110
have an internet connection down to a

00:15:00,459 --> 00:15:04,259
building let's say and then you have

00:15:02,110 --> 00:15:07,959
fast connection within the building yeah

00:15:04,259 --> 00:15:10,930
we don't have anything specifically to

00:15:07,959 --> 00:15:14,470
support that but we use HTTP so it

00:15:10,930 --> 00:15:16,839
should be quite easy to set up a proxy I

00:15:14,470 --> 00:15:19,389
should be proxy there I haven't

00:15:16,839 --> 00:15:21,519
experienced or experimented with it

00:15:19,389 --> 00:15:29,920
myself but uh should be quite

00:15:21,519 --> 00:15:31,870
straightforward yep okay so the question

00:15:29,920 --> 00:15:35,110
is how much additional overhead this

00:15:31,870 --> 00:15:40,959
required on the client-side so part of

00:15:35,110 --> 00:15:43,509
this is shown I can maybe see million so

00:15:40,959 --> 00:15:45,970
I would say the biggest overhead is that

00:15:43,509 --> 00:15:47,439
you have to have to read file systems so

00:15:45,970 --> 00:15:50,079
there is some storage all right it

00:15:47,439 --> 00:15:52,420
depends like how how big your root

00:15:50,079 --> 00:15:55,029
filesystem is obviously you can put we

00:15:52,420 --> 00:15:56,709
also have a data partition so your root

00:15:55,029 --> 00:15:58,449
filesystem could be 50 megabytes in your

00:15:56,709 --> 00:16:00,459
data partition like a gigabyte or

00:15:58,449 --> 00:16:02,860
something so it depends on what what you

00:16:00,459 --> 00:16:06,100
want to update but I would say that's

00:16:02,860 --> 00:16:08,769
the main thing and then the client

00:16:06,100 --> 00:16:11,670
itself I think is about 8 megabytes or

00:16:08,769 --> 00:16:11,670
something like that right now

00:16:21,890 --> 00:16:27,360
right so if you already have an update

00:16:24,180 --> 00:16:33,710
er is there an easy way to transition

00:16:27,360 --> 00:16:36,570
into Mandor so it is not trivial because

00:16:33,710 --> 00:16:38,640
we use this partition layout and that's

00:16:36,570 --> 00:16:40,110
the hardest part and if you have the

00:16:38,640 --> 00:16:45,750
live system running and it doesn't have

00:16:40,110 --> 00:16:47,820
the the partition layout it is a bit

00:16:45,750 --> 00:16:52,160
tricky I've heard about I not tried it

00:16:47,820 --> 00:16:52,160
myself but there is a tool for this

00:16:52,820 --> 00:16:57,570
where you can actually change the

00:16:55,740 --> 00:17:03,990
partition in a running system but it's

00:16:57,570 --> 00:17:11,459
it's risky business so unfortunately

00:17:03,990 --> 00:17:16,310
it's a bit tricky at that stage then

00:17:11,459 --> 00:17:16,310
you're good okay

00:17:25,339 --> 00:17:31,050
right so if you only want to do updates

00:17:28,230 --> 00:17:33,450
say at night or something like that how

00:17:31,050 --> 00:17:36,630
can we support that so we have something

00:17:33,450 --> 00:17:41,160
called state scripts which is partly

00:17:36,630 --> 00:17:43,800
covered I guess it's a bit simply or

00:17:41,160 --> 00:17:46,620
more generic version of the pre and post

00:17:43,800 --> 00:17:49,350
install actions but we have the ability

00:17:46,620 --> 00:17:52,760
to insert scripts between each stage

00:17:49,350 --> 00:17:56,550
here so you can have a script before

00:17:52,760 --> 00:17:59,460
detecting the update and then you can

00:17:56,550 --> 00:18:04,800
implement any logic there to say if time

00:17:59,460 --> 00:18:06,150
is in this interval skip this or just

00:18:04,800 --> 00:18:12,930
retry later

00:18:06,150 --> 00:18:20,250
did I make any sense err yeah yeah this

00:18:12,930 --> 00:18:24,240
is okay three months ago it should have

00:18:20,250 --> 00:18:29,550
been there I think it was in one - so

00:18:24,240 --> 00:18:32,190
maybe around September yeah so that's

00:18:29,550 --> 00:18:34,980
the first state script so there is a

00:18:32,190 --> 00:18:42,420
documentation section about it but if

00:18:34,980 --> 00:18:46,760
your yeah so they're on the on the

00:18:42,420 --> 00:18:51,330
client side there is some talks about

00:18:46,760 --> 00:18:53,220
their artifacts here but yeah

00:18:51,330 --> 00:18:55,200
so there's a lot of states and then you

00:18:53,220 --> 00:18:58,890
can add scripts before and after these

00:18:55,200 --> 00:19:02,370
states and one use case is to to control

00:18:58,890 --> 00:19:04,620
when that happens using these scripts so

00:19:02,370 --> 00:19:07,890
so that's that's one way to do it right

00:19:04,620 --> 00:19:09,840
now we do want to look at also schedules

00:19:07,890 --> 00:19:12,240
of updates on the server side which I

00:19:09,840 --> 00:19:13,890
think would be a better solution for you

00:19:12,240 --> 00:19:17,370
but but it's possible using these

00:19:13,890 --> 00:19:19,170
scripts as well and yeah and then you

00:19:17,370 --> 00:19:24,030
can also use the local times on all the

00:19:19,170 --> 00:19:26,480
devices to to know when to deploy it

00:19:24,030 --> 00:19:33,049
updates so there's one like see

00:19:26,480 --> 00:19:36,950
specifically you probably should

00:19:33,049 --> 00:19:40,169
should do one before artifact in or

00:19:36,950 --> 00:19:42,230
before download I have to think a little

00:19:40,169 --> 00:19:44,759
bit about where exactly to place your

00:19:42,230 --> 00:19:51,539
check but but it's possible and it's

00:19:44,759 --> 00:19:56,639
documented here yes yeah so there's a

00:19:51,539 --> 00:19:58,950
return code that you can you can do that

00:19:56,639 --> 00:20:02,000
too so we can there's two ways you can

00:19:58,950 --> 00:20:05,940
or three outcomes so you can say

00:20:02,000 --> 00:20:07,820
continue or you can say fail and then it

00:20:05,940 --> 00:20:10,440
will abort and rollback or you can say

00:20:07,820 --> 00:20:14,070
retry later and then you can configure

00:20:10,440 --> 00:20:20,149
how long until next attempts basically

00:20:14,070 --> 00:20:20,149
so so it's possible yep

00:20:36,550 --> 00:20:39,550
yep

00:20:46,419 --> 00:20:54,049
we have plans to support them but we

00:20:50,510 --> 00:20:56,000
don't do it yet so the only way to do it

00:20:54,049 --> 00:20:58,190
currently is with this script so you can

00:20:56,000 --> 00:21:02,179
couple like update to the Linux device

00:20:58,190 --> 00:21:06,140
with updates to two other devices that

00:21:02,179 --> 00:21:08,140
are close by but we are planning to

00:21:06,140 --> 00:21:23,870
implement better support for that

00:21:08,140 --> 00:21:26,210
probably next year okay they are

00:21:23,870 --> 00:21:28,910
requested so there is no open port on

00:21:26,210 --> 00:21:31,880
the devices on the clients themself and

00:21:28,910 --> 00:21:34,130
they go over HTTP and they asked the

00:21:31,880 --> 00:21:36,559
server they hit the specific endpoint

00:21:34,130 --> 00:21:38,210
and they check and they provide their

00:21:36,559 --> 00:21:39,799
identity and then the server will

00:21:38,210 --> 00:21:51,230
respond whether or not there is an

00:21:39,799 --> 00:21:53,900
update a partially licensed yeah so a

00:21:51,230 --> 00:22:06,200
partial license is for everything so

00:21:53,900 --> 00:22:08,950
it's fully open source yeah so it

00:22:06,200 --> 00:22:12,230
depends on how you structure the

00:22:08,950 --> 00:22:15,770
partitions so we recommend let's see if

00:22:12,230 --> 00:22:18,080
the pictures here yeah so you can update

00:22:15,770 --> 00:22:20,290
anything inside this root filesystem

00:22:18,080 --> 00:22:26,960
partition

00:22:20,290 --> 00:22:30,679
how did it no no suggest one here like

00:22:26,960 --> 00:22:31,970
yeah and then what we typically do is to

00:22:30,679 --> 00:22:37,040
place the kernel there as well so you

00:22:31,970 --> 00:22:39,590
can update that we we seen some interest

00:22:37,040 --> 00:22:42,890
for updating a bootloader but it's maybe

00:22:39,590 --> 00:22:46,210
like five percent want it because yep

00:22:42,890 --> 00:22:46,210
they don't want to break it

00:22:47,080 --> 00:22:50,890
any other questions

00:23:06,770 --> 00:23:09,770
right

00:23:15,540 --> 00:23:20,530
yeah

00:23:16,809 --> 00:23:24,010
so how can we enable factory reset so

00:23:20,530 --> 00:23:26,860
mmm at least until now we've considered

00:23:24,010 --> 00:23:28,960
that more of a system integration items

00:23:26,860 --> 00:23:32,830
so it we don't cover that like you say

00:23:28,960 --> 00:23:34,870
in our Docs or anywhere so what you

00:23:32,830 --> 00:23:37,870
probably ended up doing is added another

00:23:34,870 --> 00:23:41,830
partition here that had the oldest or

00:23:37,870 --> 00:23:47,170
the factory image and we don't currently

00:23:41,830 --> 00:23:50,080
have any plans to you have to to support

00:23:47,170 --> 00:23:52,210
factory resets directly in manner but we

00:23:50,080 --> 00:23:56,460
can talk afterwards and maybe there's a

00:23:52,210 --> 00:23:56,460
good path for doing that make sense

00:24:09,730 --> 00:24:13,029
[Music]

00:24:19,549 --> 00:24:29,879
yep yep yep so you can do layering if

00:24:27,119 --> 00:24:34,320
your file system so we try to be very

00:24:29,879 --> 00:24:36,840
generic and careful not to require any

00:24:34,320 --> 00:24:38,969
specific technology but that's a good

00:24:36,840 --> 00:24:41,489
point and this is partly also why why

00:24:38,969 --> 00:24:43,169
it's why we currently at least consider

00:24:41,489 --> 00:24:45,389
it more of a system integration thing

00:24:43,169 --> 00:25:02,149
that you know you're using overlay FS

00:24:45,389 --> 00:25:02,149
and therefore you can use that yeah

00:25:02,809 --> 00:25:10,679
right yeah yeah so it's still planned so

00:25:09,149 --> 00:25:12,450
Delta T's right now I'll talk a little

00:25:10,679 --> 00:25:16,229
bit about what we're planning in the

00:25:12,450 --> 00:25:18,839
short term but yeah we will get there

00:25:16,229 --> 00:25:23,309
it's just a matter of priorities the

00:25:18,839 --> 00:25:29,330
moment okay any other questions at this

00:25:23,309 --> 00:25:36,809
point all right let's see if we have

00:25:29,330 --> 00:25:43,830
yeah we have failed update so in this

00:25:36,809 --> 00:25:46,109
case the you will get a past deployment

00:25:43,830 --> 00:25:48,570
here obviously and then you can see what

00:25:46,109 --> 00:25:51,239
happened I just had one device here and

00:25:48,570 --> 00:25:53,669
it was it failed but the device came

00:25:51,239 --> 00:25:56,429
back up so now it has rebooted twice it

00:25:53,669 --> 00:25:59,580
rebooted it wrote update and it rebuilt

00:25:56,429 --> 00:26:05,039
it into it and it might have rebooted

00:25:59,580 --> 00:26:06,989
injured and then it it rolled back so

00:26:05,039 --> 00:26:09,299
it's still in a working condition here

00:26:06,989 --> 00:26:13,109
and it reported to the server what

00:26:09,299 --> 00:26:15,599
happened but this is quite detailed you

00:26:13,109 --> 00:26:17,720
can see the log let me see if I can open

00:26:15,599 --> 00:26:17,720
this

00:26:17,820 --> 00:26:21,690
yeah so this is the log from them and

00:26:20,309 --> 00:26:33,570
their client it's quite a lot of data

00:26:21,690 --> 00:26:37,320
but alright yes there's magic message

00:26:33,570 --> 00:26:42,899
yes so I built root filesystem I was too

00:26:37,320 --> 00:26:46,229
big so I have to build another one but

00:26:42,899 --> 00:26:53,820
yeah this is how it can fail sometimes

00:26:46,229 --> 00:26:55,349
and and this is how you would would

00:26:53,820 --> 00:26:58,619
figure it out so each device would

00:26:55,349 --> 00:27:00,539
create a login and upload it to the

00:26:58,619 --> 00:27:03,509
server if it fails we don't upload logs

00:27:00,539 --> 00:27:20,129
if it's successful because there maybe

00:27:03,509 --> 00:27:32,429
not that interesting yep there are

00:27:20,129 --> 00:27:34,649
groups so I put I put my only device in

00:27:32,429 --> 00:27:36,149
the test group but you can obviously add

00:27:34,649 --> 00:27:41,669
more here and then have a production

00:27:36,149 --> 00:27:44,749
group as well so now once you do it a

00:27:41,669 --> 00:27:51,599
correct way and deploy it to test first

00:27:44,749 --> 00:27:53,639
you should be able to catch this and we

00:27:51,599 --> 00:27:55,379
only allow this is like I've been a

00:27:53,639 --> 00:27:57,720
little bit of a debate but we only allow

00:27:55,379 --> 00:28:01,649
a device to be in one group at a time

00:27:57,720 --> 00:28:03,599
because if you if you happen to add it

00:28:01,649 --> 00:28:07,529
to both test and production it might

00:28:03,599 --> 00:28:10,379
have some interesting side effects so

00:28:07,529 --> 00:28:13,769
it's some people would like that but

00:28:10,379 --> 00:28:15,919
currently we've been managing to keep it

00:28:13,769 --> 00:28:15,919
like this

00:28:16,440 --> 00:28:26,410
all right so a little bit on what we're

00:28:21,250 --> 00:28:29,440
working on right now how many of you

00:28:26,410 --> 00:28:33,580
know you better have done some work in

00:28:29,440 --> 00:28:34,570
Ubud okay you are you bit experts almost

00:28:33,580 --> 00:28:37,540
all of you

00:28:34,570 --> 00:28:40,420
so we also work with some people that

00:28:37,540 --> 00:28:42,429
don't know you bit that well and we do

00:28:40,420 --> 00:28:45,700
require some integration with you bit in

00:28:42,429 --> 00:28:47,230
order to handle the partition switching

00:28:45,700 --> 00:28:54,340
I think Mercer you will give a talk

00:28:47,230 --> 00:28:56,549
about this later and it is difficult

00:28:54,340 --> 00:29:00,100
like if you're coming from a more

00:28:56,549 --> 00:29:02,169
application level background and you

00:29:00,100 --> 00:29:05,650
you're suddenly in this you boot world

00:29:02,169 --> 00:29:09,280
so so we're working on simplifying this

00:29:05,650 --> 00:29:12,309
work so we have some automated patching

00:29:09,280 --> 00:29:15,760
already and then how many of you have

00:29:12,309 --> 00:29:17,679
integrated board with Mandir stop two

00:29:15,760 --> 00:29:20,520
three four okay

00:29:17,679 --> 00:29:22,960
and one thing we were thinking is that

00:29:20,520 --> 00:29:26,799
there are a lot of people doing this and

00:29:22,960 --> 00:29:28,480
there's nobody sharing it so do you

00:29:26,799 --> 00:29:30,820
think you it would make sense for you to

00:29:28,480 --> 00:29:33,220
share it back to the community or do you

00:29:30,820 --> 00:29:36,059
think it's like a more of a proprietary

00:29:33,220 --> 00:29:36,059
thing that you

00:29:46,980 --> 00:30:31,919
yep yeah so you don't think you would be

00:30:09,720 --> 00:30:35,360
allowed to share yep yeah

00:30:31,919 --> 00:30:38,010
that's easier to maintain also that's

00:30:35,360 --> 00:30:39,690
what about you do you think you can

00:30:38,010 --> 00:30:45,919
share your integration you did with

00:30:39,690 --> 00:30:45,919
manda or no yeah yes

00:31:00,549 --> 00:31:07,179
hmm okay great and do you think other

00:31:04,839 --> 00:31:09,190
people would be interested in seeing

00:31:07,179 --> 00:31:11,019
like what you did with Mandir they're

00:31:09,190 --> 00:31:12,789
like how he integrated that into your

00:31:11,019 --> 00:31:18,190
board and do you think that would make

00:31:12,789 --> 00:31:25,979
sense to share that part okay that's

00:31:18,190 --> 00:31:25,979
great yep

00:31:28,590 --> 00:31:33,430
okay that's great

00:31:30,370 --> 00:31:37,750
yeah but the your again the experts so

00:31:33,430 --> 00:31:39,460
there's a lot of people so okay cool

00:31:37,750 --> 00:31:43,090
yeah so that's one area we're looking to

00:31:39,460 --> 00:31:45,730
just create a separate set of

00:31:43,090 --> 00:31:48,610
documentation and and read miss where we

00:31:45,730 --> 00:31:50,470
would basically index the board and

00:31:48,610 --> 00:31:55,030
amend their integrations that people do

00:31:50,470 --> 00:31:58,570
and it's somewhat similar to the Yocto

00:31:55,030 --> 00:32:00,070
in meta layer index we were thinking

00:31:58,570 --> 00:32:03,550
something similar if you put it in your

00:32:00,070 --> 00:32:22,290
github we index it and then do you think

00:32:03,550 --> 00:32:25,720
that would make sense or yeah make sense

00:32:22,290 --> 00:32:29,050
we'll get something going there pretty

00:32:25,720 --> 00:32:31,840
soon and another thing is that we're

00:32:29,050 --> 00:32:37,240
also thinking about CI so maintaining

00:32:31,840 --> 00:32:39,250
these integrations over time so having a

00:32:37,240 --> 00:32:42,640
way for the community to hook up to our

00:32:39,250 --> 00:32:45,580
CI server so we would run all the tests

00:32:42,640 --> 00:32:49,030
on your integration and then you will

00:32:45,580 --> 00:32:51,790
get an output afterwards if it's failed

00:32:49,030 --> 00:32:54,870
you get an email you would get a log and

00:32:51,790 --> 00:32:54,870
you can maintain it over time

00:33:10,830 --> 00:33:28,540
hmm yeah

00:33:23,770 --> 00:33:31,260
that's a great idea cool so you'll see

00:33:28,540 --> 00:33:35,860
some something about this pretty soon

00:33:31,260 --> 00:33:39,820
and then we're looking at other ways we

00:33:35,860 --> 00:33:42,580
can integrate with boards as well we're

00:33:39,820 --> 00:33:45,010
experimenting a little bit with UEFI on

00:33:42,580 --> 00:33:46,690
how you can actually use that to do the

00:33:45,010 --> 00:33:49,950
partition selection so you don't need to

00:33:46,690 --> 00:33:53,680
do any patching at all it's quite

00:33:49,950 --> 00:33:56,590
technical but you can you believe us

00:33:53,680 --> 00:33:59,080
UEFI emulator so you can use that and on

00:33:56,590 --> 00:34:01,660
x86 UEFI is supported pretty much

00:33:59,080 --> 00:34:05,680
everywhere so you can sort of get one

00:34:01,660 --> 00:34:08,800
level below hew boot in that sense and

00:34:05,680 --> 00:34:12,160
then if but this is pretty early stage

00:34:08,800 --> 00:34:13,870
so we don't know if it's possible but if

00:34:12,160 --> 00:34:16,150
it doesn't work we were thinking also

00:34:13,870 --> 00:34:17,740
about the POC mode versus production

00:34:16,150 --> 00:34:21,340
integration where you wouldn't have all

00:34:17,740 --> 00:34:26,290
the robustness criteria like atomic

00:34:21,340 --> 00:34:27,850
updates so in this case if you're just

00:34:26,290 --> 00:34:29,470
testing then they're out on some board

00:34:27,850 --> 00:34:30,730
you can easily do that but if you want

00:34:29,470 --> 00:34:37,810
to bring it to production you have to do

00:34:30,730 --> 00:34:40,020
the integration and then finally we want

00:34:37,810 --> 00:34:43,480
to have some way to do binary

00:34:40,020 --> 00:34:45,150
post-processing also in order to support

00:34:43,480 --> 00:34:48,520
members so if you have an image already

00:34:45,150 --> 00:34:52,420
have some tool that can repartition it

00:34:48,520 --> 00:34:54,940
for you insert make sure that you can do

00:34:52,420 --> 00:34:57,460
the partition switching so if if all

00:34:54,940 --> 00:34:59,470
this is binary and there is no need to

00:34:57,460 --> 00:35:01,840
do source patching we can also build a

00:34:59,470 --> 00:35:06,370
tool that just takes your existing image

00:35:01,840 --> 00:35:08,530
and builds it into the image that can

00:35:06,370 --> 00:35:10,210
that includes Mandor and and the

00:35:08,530 --> 00:35:11,260
partitions that you need so these are

00:35:10,210 --> 00:35:11,630
some of the things we're working on

00:35:11,260 --> 00:35:13,730
right

00:35:11,630 --> 00:35:15,910
does it make sense or do you have any

00:35:13,730 --> 00:35:30,849
other ideas how we can do the

00:35:15,910 --> 00:35:30,849
integration easier yeah

00:35:32,410 --> 00:35:37,550
yeah yeah my sons this is actually a

00:35:35,930 --> 00:35:44,750
fairly common problem you saw it in the

00:35:37,550 --> 00:35:49,660
demo here as well so it's too big make

00:35:44,750 --> 00:35:55,069
sense okay and then in terms of

00:35:49,660 --> 00:35:57,859
platforms we're looking at x86 so this

00:35:55,069 --> 00:36:00,290
is not that well supported by you but it

00:35:57,859 --> 00:36:02,690
supposed to work but it doesn't always

00:36:00,290 --> 00:36:06,230
so maybe we need to look a bit into grub

00:36:02,690 --> 00:36:09,250
and then there's also other systems and

00:36:06,230 --> 00:36:12,230
Yocto of course that are in use on linux

00:36:09,250 --> 00:36:13,790
there been a bit raspbian are very

00:36:12,230 --> 00:36:18,260
similar and then you have build root as

00:36:13,790 --> 00:36:20,770
well that will we'll take a look at yeah

00:36:18,260 --> 00:36:23,180
so that's basically it is there anything

00:36:20,770 --> 00:36:34,300
does it make sense or do you have any

00:36:23,180 --> 00:36:34,300
comments I have not

00:37:18,870 --> 00:37:42,850
right do you have any ideas on how we

00:37:22,240 --> 00:37:44,650
can support it better yeah I don't have

00:37:42,850 --> 00:37:46,570
any information on that I'm sorry I

00:37:44,650 --> 00:37:50,010
haven't worked directly on that but

00:37:46,570 --> 00:37:50,010
maybe yeah

00:38:02,870 --> 00:38:06,040
[Music]

00:38:23,400 --> 00:38:45,100
problem solved

00:38:25,830 --> 00:38:48,570
yeah remember thanks for input any other

00:38:45,100 --> 00:38:48,570
thoughts on yep

00:38:59,320 --> 00:39:04,440
I had a little bit hard time hearing but

00:39:05,850 --> 00:39:22,360
yep right so what we were thinking

00:39:17,830 --> 00:39:24,420
concretely is that when you you first

00:39:22,360 --> 00:39:27,420
will have to create an integration with

00:39:24,420 --> 00:39:29,530
Mandir on your board so there is some

00:39:27,420 --> 00:39:32,260
some integration with you but in

00:39:29,530 --> 00:39:34,330
particular and then we have a checklist

00:39:32,260 --> 00:39:36,880
that you can run through manually to

00:39:34,330 --> 00:39:41,140
make sure that that works so so then

00:39:36,880 --> 00:39:43,930
you're in let's say on your production

00:39:41,140 --> 00:39:46,570
device you you did this integration with

00:39:43,930 --> 00:39:50,560
Mandir and then you know it works

00:39:46,570 --> 00:39:52,750
because you did it once so the idea with

00:39:50,560 --> 00:39:57,550
the CI is that then at that point you

00:39:52,750 --> 00:39:59,080
can you can take one board one of your

00:39:57,550 --> 00:40:01,540
production boards and you can put it

00:39:59,080 --> 00:40:04,390
somewhere it has Internet connectivity

00:40:01,540 --> 00:40:07,030
but it's isolated from your secret

00:40:04,390 --> 00:40:10,240
networks and then you can hook it up to

00:40:07,030 --> 00:40:13,870
our CI server so then our CI server

00:40:10,240 --> 00:40:17,380
would control that board and it will run

00:40:13,870 --> 00:40:19,840
the latest version of Mandor and build

00:40:17,380 --> 00:40:22,500
that image for your board with your

00:40:19,840 --> 00:40:22,500
integration

00:40:29,110 --> 00:40:34,880
yes this idea was based on Yocto so you

00:40:32,690 --> 00:40:44,030
will provide the sources for the build

00:40:34,880 --> 00:40:45,410
to this yeah yeah so we would build an

00:40:44,030 --> 00:40:47,480
entire image this is what we do already

00:40:45,410 --> 00:40:50,990
for the reference devices we have

00:40:47,480 --> 00:40:52,400
raspberry pi 3 and BeagleBone we have we

00:40:50,990 --> 00:40:54,100
use the sources from York to we start

00:40:52,400 --> 00:40:57,800
from scratch build everything and then

00:40:54,100 --> 00:41:00,710
there's some trickery to deploying an

00:40:57,800 --> 00:41:02,960
image on the running system like

00:41:00,710 --> 00:41:06,160
reflashing the entire entire device so

00:41:02,960 --> 00:41:06,160
it's a little bit tricky but

00:41:20,700 --> 00:41:34,510
yep yep so that yeah yeah so right now

00:41:31,330 --> 00:41:39,400
we have zero people that are signed up

00:41:34,510 --> 00:41:42,510
so we'll see if it scales up yeah yeah

00:41:39,400 --> 00:41:45,869
so yeah I'm glad you're interested in

00:41:42,510 --> 00:41:49,030
definitely validates that that we should

00:41:45,869 --> 00:41:52,240
continue to work on this but probably

00:41:49,030 --> 00:41:53,890
once we if we are at a luxury where we

00:41:52,240 --> 00:41:56,680
have scaling problems in the CI

00:41:53,890 --> 00:41:58,869
infrastructure will will will handle

00:41:56,680 --> 00:42:03,330
that like some caps or maybe some paid

00:41:58,869 --> 00:42:03,330
version with more resources and so

00:42:21,660 --> 00:42:24,660
yeah

00:42:30,719 --> 00:42:45,609
you'd rather us to provide the entire

00:42:33,759 --> 00:43:00,880
bill so it would be the board that you

00:42:45,609 --> 00:43:07,380
Pro yeah hmm so that we can do the

00:43:00,880 --> 00:43:10,289
integration on those yep yeah so we have

00:43:07,380 --> 00:43:16,289
commercial offering there that you can

00:43:10,289 --> 00:43:19,349
hire for example to do it we so that's

00:43:16,289 --> 00:43:21,670
basically what we have time to do

00:43:19,349 --> 00:43:31,299
otherwise it's a bit more opportunistic

00:43:21,670 --> 00:43:32,920
so yeah you could we haven't I haven't

00:43:31,299 --> 00:43:38,259
had that request before but it's

00:43:32,920 --> 00:43:42,839
something we'll yeah it's it's a good

00:43:38,259 --> 00:43:42,839
idea and the reason we have yeah

00:44:00,850 --> 00:44:10,480
yeah when are we out of time by the way

00:44:03,980 --> 00:44:14,860
like is it 11 okay in three minutes

00:44:10,480 --> 00:44:14,860
maybe one more question

00:44:18,850 --> 00:44:26,140
no we only use scripts for that what

00:44:21,950 --> 00:44:26,140
were you looking for in particular like

00:44:27,760 --> 00:44:32,660
okay so you want more so this is

00:44:31,160 --> 00:44:35,300
something we have on our road map that

00:44:32,660 --> 00:44:37,130
you can create more dynamic groups as we

00:44:35,300 --> 00:44:39,770
call them so you can base them on

00:44:37,130 --> 00:44:42,619
attributes on the device itself for

00:44:39,770 --> 00:44:44,210
example and you don't have to put them

00:44:42,619 --> 00:44:46,190
specifically into a group they would

00:44:44,210 --> 00:44:47,750
just show up in that group because they

00:44:46,190 --> 00:45:01,340
have these characteristics so that's

00:44:47,750 --> 00:45:04,550
something we will have yes exactly yes

00:45:01,340 --> 00:45:06,350
that will be part of it so typically the

00:45:04,550 --> 00:45:08,780
term used for this campaign management

00:45:06,350 --> 00:45:11,450
yeah but that's basically you start with

00:45:08,780 --> 00:45:15,280
1% and 5% or these devices done that

00:45:11,450 --> 00:45:15,280
device system maybe one last question

00:45:25,600 --> 00:45:42,740
yep yep so with a full image updates and

00:45:39,520 --> 00:45:45,800
we do compress them so they would be

00:45:42,740 --> 00:45:48,080
reduced but this is what gentleman over

00:45:45,800 --> 00:45:50,270
there asked about Delta updates would be

00:45:48,080 --> 00:45:54,170
much more efficient approach where you

00:45:50,270 --> 00:45:56,480
can reduce it maybe in 90 percent or 80

00:45:54,170 --> 00:45:58,550
percent but right now with compression

00:45:56,480 --> 00:46:00,170
you get maybe 50 percent reduction or

00:45:58,550 --> 00:46:07,240
something like that so but this is

00:46:00,170 --> 00:46:10,190
something we will we'll work on yeah and

00:46:07,240 --> 00:46:12,020
and we're streaming it right now as well

00:46:10,190 --> 00:46:13,790
so you don't need any extra space to

00:46:12,020 --> 00:46:15,320
store in the temporary files or anything

00:46:13,790 --> 00:46:20,030
like that it goes directly to your

00:46:15,320 --> 00:46:23,510
rotation I think we have to end but

00:46:20,030 --> 00:46:26,170
thanks so much for joining and we have a

00:46:23,510 --> 00:46:29,810
booth as well and a couple of other

00:46:26,170 --> 00:46:32,990
events coming up so feel free to join

00:46:29,810 --> 00:46:36,740
those and reach out to me if you have

00:46:32,990 --> 00:46:38,350
any more feedback or questions so thanks

00:46:36,740 --> 00:46:42,260
a lot for joining

00:46:38,350 --> 00:46:42,260

YouTube URL: https://www.youtube.com/watch?v=SAWxFqzH-dY


