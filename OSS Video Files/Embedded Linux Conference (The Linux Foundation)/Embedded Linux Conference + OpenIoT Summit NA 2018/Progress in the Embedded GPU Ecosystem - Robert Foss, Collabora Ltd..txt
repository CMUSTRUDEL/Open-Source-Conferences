Title: Progress in the Embedded GPU Ecosystem - Robert Foss, Collabora Ltd.
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Progress in the Embedded GPU Ecosystem - Robert Foss, Collabora Ltd.

Ten years ago no one would have expected the embedded GPU ecosystem in Linux to be what it is now. Today, a large number of GPUs have Open Source support and for those that aren't supported yet, improvements are happening at a rapid pace.

In just the last year Vivante GPUs have gained mainline support and Mali GPUs have seen good progress being made.

In this talk, Robert will cover GPUs in the embedded space and give an overview about their current status, what lies ahead and how the Open Source state of the art compares to the proprietary alternatives.

About Robert Foss
Robert Foss is a Linux graphic stack contributor and Software Engineer at Collabora, and has worked in number of areas including Android, drm_hwcomposer, MESA, Linux DRM and Intel GPU Tools. He holds a MSc in Computer Science and Engineering from the Technical University of Lund, Sweden. Previously he has spoken at Embedded Linux Conference Europe, Open Source Summit North America, Xorg Developers Conference and FOSDEM.
Captions: 
	00:00:00,030 --> 00:00:08,189
let's get started hi I'm Robert Foss I

00:00:05,190 --> 00:00:12,540
work for kelabra as you may have guessed

00:00:08,189 --> 00:00:15,900
and my name is actually Foss

00:00:12,540 --> 00:00:17,699
it's not some sort of an alias it's my

00:00:15,900 --> 00:00:21,350
mother's name as well and she does not

00:00:17,699 --> 00:00:24,570
do any kind of software freely

00:00:21,350 --> 00:00:26,840
so working for Kluber means that I work

00:00:24,570 --> 00:00:30,900
on open source for a living I mostly do

00:00:26,840 --> 00:00:32,450
Lenox graphics work and this is what

00:00:30,900 --> 00:00:35,760
we're going to talk about today the

00:00:32,450 --> 00:00:39,170
embedded GPU ecosystem and how it's

00:00:35,760 --> 00:00:41,160
doing and what's going on so

00:00:39,170 --> 00:00:43,590
specifically we're going to cover the

00:00:41,160 --> 00:00:46,950
history with the open source support is

00:00:43,590 --> 00:00:49,739
for most of the vendors and we're also

00:00:46,950 --> 00:00:51,420
going to cover what comes next and the

00:00:49,739 --> 00:00:54,120
bigger picture of what the industry

00:00:51,420 --> 00:00:58,590
looks like and how open source drivers

00:00:54,120 --> 00:01:01,559
seem to come about so we're not going to

00:00:58,590 --> 00:01:04,519
talk about the GPU you're making in your

00:01:01,559 --> 00:01:10,530
garage we're not going to talk about

00:01:04,519 --> 00:01:14,250
very old architectures like the via

00:01:10,530 --> 00:01:16,830
chrome GPU for example that Kevin brace

00:01:14,250 --> 00:01:18,930
bravely is working on and the emphasis

00:01:16,830 --> 00:01:21,540
is also going to be on the embedded

00:01:18,930 --> 00:01:24,960
ecosystem because it's what's

00:01:21,540 --> 00:01:30,509
interesting to us so let's start off

00:01:24,960 --> 00:01:32,759
with the history this is Intel they've

00:01:30,509 --> 00:01:34,290
contributed for a very long time they've

00:01:32,759 --> 00:01:37,740
been a very good citizen for a very long

00:01:34,290 --> 00:01:43,670
time their current driver the AI 915

00:01:37,740 --> 00:01:45,780
driver was first merged in 2004 and

00:01:43,670 --> 00:01:47,579
they've been very active in supporting

00:01:45,780 --> 00:01:51,720
it since then

00:01:47,579 --> 00:01:54,890
it's they support opengl 4.5 Vulcan 1.1

00:01:51,720 --> 00:01:58,140
and all the applicable hardware anyway

00:01:54,890 --> 00:02:02,310
so if there's a gold standard

00:01:58,140 --> 00:02:05,219
I think int elicit there's also AMD

00:02:02,310 --> 00:02:07,799
which has been around for quite a while

00:02:05,219 --> 00:02:09,750
and the open source space anyway and

00:02:07,799 --> 00:02:12,540
they're also a good a good citizen

00:02:09,750 --> 00:02:15,840
they've contributed a lot especially

00:02:12,540 --> 00:02:18,359
recently but they've been very open

00:02:15,840 --> 00:02:22,260
towards the community since at least

00:02:18,359 --> 00:02:24,349
2009 where they released the

00:02:22,260 --> 00:02:28,260
documentation for the there than current

00:02:24,349 --> 00:02:32,780
high-end GPUs and they also support

00:02:28,260 --> 00:02:35,400
opengl 4.5 and bulk and one at one which

00:02:32,780 --> 00:02:38,370
almost is as as current as it gets

00:02:35,400 --> 00:02:40,260
there's OpenGL 4.6 but that's ignore

00:02:38,370 --> 00:02:42,379
that no one supports it at the moment

00:02:40,260 --> 00:02:47,939
not in the open-source space anyway

00:02:42,379 --> 00:02:48,750
and then there's Nvidia which is very

00:02:47,939 --> 00:02:51,379
interesting

00:02:48,750 --> 00:02:56,120
then novo driver has been around since

00:02:51,379 --> 00:03:00,060
2010 so that's a relatively long history

00:02:56,120 --> 00:03:03,480
it supports opengl 4.5 so it has very

00:03:00,060 --> 00:03:06,840
good support but Nvidia itself has never

00:03:03,480 --> 00:03:09,329
really backed it they have on occasion

00:03:06,840 --> 00:03:14,159
backed it but not like

00:03:09,329 --> 00:03:18,650
through-and-through so they could be a

00:03:14,159 --> 00:03:20,970
better citizen I'm saying that and there

00:03:18,650 --> 00:03:22,650
are very specific things that could be

00:03:20,970 --> 00:03:25,199
doing would which would be very simple

00:03:22,650 --> 00:03:27,930
for them like releasing the the firmware

00:03:25,199 --> 00:03:30,120
for their GPUs so that an open-source

00:03:27,930 --> 00:03:31,709
driver could just load it and run it on

00:03:30,120 --> 00:03:34,919
in the same way that the proprietary

00:03:31,709 --> 00:03:36,840
proprietary one does something

00:03:34,919 --> 00:03:39,169
interesting though about Nvidia and

00:03:36,840 --> 00:03:43,739
their support is the support for their

00:03:39,169 --> 00:03:47,220
Tegra platforms which was partly

00:03:43,739 --> 00:03:49,799
sponsored by an aircraft supplier so

00:03:47,220 --> 00:03:51,959
they up streamed I think the initial

00:03:49,799 --> 00:03:55,040
support for the Tegra platform and

00:03:51,959 --> 00:03:58,409
that's something we'll get back to

00:03:55,040 --> 00:04:01,729
there's also Qualcomm which has an even

00:03:58,409 --> 00:04:04,409
shorter history in the open source space

00:04:01,729 --> 00:04:05,970
and as you may be noticing we're going

00:04:04,409 --> 00:04:10,549
through this in a sort of vaguely

00:04:05,970 --> 00:04:12,959
chronological order and Qualcomm has

00:04:10,549 --> 00:04:15,750
become a it's becoming a rather good

00:04:12,959 --> 00:04:17,220
citizen in the sense that they're

00:04:15,750 --> 00:04:19,590
contributing code through the code

00:04:17,220 --> 00:04:21,629
Aurora project they didn't start the

00:04:19,590 --> 00:04:24,030
driver they didn't start

00:04:21,629 --> 00:04:29,009
the initial development that was Rob

00:04:24,030 --> 00:04:31,830
Clark mostly by himself I think yeah and

00:04:29,009 --> 00:04:33,960
their current driver supports all of

00:04:31,830 --> 00:04:35,969
their hardware which is rather good

00:04:33,960 --> 00:04:40,740
that's more than we can say for for most

00:04:35,969 --> 00:04:44,750
vendors and interestingly there's a fun

00:04:40,740 --> 00:04:49,199
fact about the Qualcomm Adreno drivers

00:04:44,750 --> 00:04:52,580
it was bought by or from AMD they call

00:04:49,199 --> 00:04:56,639
calm but the AMD mobile handset division

00:04:52,580 --> 00:05:00,030
2009 I believe and Adreno is a word play

00:04:56,639 --> 00:05:01,969
on Radeon so it's hidden in plain sight

00:05:00,030 --> 00:05:05,879
if you will

00:05:01,969 --> 00:05:07,530
there's also Broadcom which has been a

00:05:05,879 --> 00:05:12,719
very good citizen but since very very

00:05:07,530 --> 00:05:16,379
recently they hired Erik unhoped in 2015

00:05:12,719 --> 00:05:18,479
I believe who has since been going on a

00:05:16,379 --> 00:05:22,620
solo mission to provide very good

00:05:18,479 --> 00:05:24,120
support for the vc4 platform and the vc4

00:05:22,620 --> 00:05:26,879
platform has very good support now and

00:05:24,120 --> 00:05:30,300
there's more newer Hiatt higher end

00:05:26,879 --> 00:05:32,520
Hardware coming along the V c5 which has

00:05:30,300 --> 00:05:34,860
partial support but it's not really

00:05:32,520 --> 00:05:38,310
really even available to the public in

00:05:34,860 --> 00:05:41,520
dev kits anymore or already so we're

00:05:38,310 --> 00:05:45,089
kind of ahead of us ourselves there is

00:05:41,520 --> 00:05:50,690
also Vivante and the Etna wave driver

00:05:45,089 --> 00:05:53,669
which is fairly recent it's from 2015 in

00:05:50,690 --> 00:05:56,219
Mesa or maybe the kernel the first

00:05:53,669 --> 00:05:58,050
patches were accepted reverse

00:05:56,219 --> 00:06:02,580
engineering of it has been gone on since

00:05:58,050 --> 00:06:03,930
about 2012 and more recently in the past

00:06:02,580 --> 00:06:06,060
few years

00:06:03,930 --> 00:06:08,520
reverse engineering and development has

00:06:06,060 --> 00:06:10,710
been sponsored by another aircraft

00:06:08,520 --> 00:06:12,930
supplier which is very interesting and

00:06:10,710 --> 00:06:15,389
I'm seeing a trend here apparently

00:06:12,930 --> 00:06:18,919
aircraft suppliers care a lot about open

00:06:15,389 --> 00:06:22,740
source which was very surprising to me

00:06:18,919 --> 00:06:24,659
and support for their hardware is now

00:06:22,740 --> 00:06:26,430
very good they're also coming out with

00:06:24,659 --> 00:06:29,399
new newer fancier hardware which has

00:06:26,430 --> 00:06:32,189
initial support but it seems to be

00:06:29,399 --> 00:06:35,939
working out quite well that too

00:06:32,189 --> 00:06:38,009
and then there's imagination imagination

00:06:35,939 --> 00:06:40,349
is interesting in that they have some

00:06:38,009 --> 00:06:45,569
patches and some support floating around

00:06:40,349 --> 00:06:47,999
for their hardware for for their for the

00:06:45,569 --> 00:06:49,649
kernel and for Mesa but none of these

00:06:47,999 --> 00:06:52,409
packages are acceptable to the upstream

00:06:49,649 --> 00:06:54,029
community and that's mostly due to the

00:06:52,409 --> 00:06:57,479
fact that their patches are very partial

00:06:54,029 --> 00:06:59,459
like they support a very slim use case

00:06:57,479 --> 00:07:01,769
or a span slim set of use cases for

00:06:59,459 --> 00:07:04,860
their hardware so they can't be accepted

00:07:01,769 --> 00:07:05,459
due to not offering full like broad

00:07:04,860 --> 00:07:08,969
support

00:07:05,459 --> 00:07:10,619
so there's for example a kernel there's

00:07:08,969 --> 00:07:14,729
for example a kernel driver for the

00:07:10,619 --> 00:07:16,409
power GPUs and it's unacceptable due to

00:07:14,729 --> 00:07:20,179
there being no user space the user of

00:07:16,409 --> 00:07:22,529
them or it so Mesa has no support for it

00:07:20,179 --> 00:07:24,929
there's also some Mesa patches floating

00:07:22,529 --> 00:07:28,139
around for it but there it's very

00:07:24,929 --> 00:07:30,449
limited to non 3d operations so it's not

00:07:28,139 --> 00:07:35,819
interesting to like the wider public

00:07:30,449 --> 00:07:39,329
maybe in some special use cases and then

00:07:35,819 --> 00:07:42,329
there's arm which is fully unsupported

00:07:39,329 --> 00:07:46,309
they have never contributed anything as

00:07:42,329 --> 00:07:51,360
far as I know and not to the GPUs anyway

00:07:46,309 --> 00:07:53,610
they kind of bet very heavy on OpenCL

00:07:51,360 --> 00:07:55,740
for their previous generation of GPUs

00:07:53,610 --> 00:07:59,399
which was interesting the Molly T

00:07:55,740 --> 00:08:02,490
something some things but they wanted to

00:07:59,399 --> 00:08:05,279
sell the open CL support so I think that

00:08:02,490 --> 00:08:07,469
that's descriptive of their perspective

00:08:05,279 --> 00:08:10,289
on open-source they would like to have

00:08:07,469 --> 00:08:11,459
their driver be a paid service so they

00:08:10,289 --> 00:08:15,059
would like to make some money off of it

00:08:11,459 --> 00:08:16,740
which is fair but not really congruent

00:08:15,059 --> 00:08:17,990
with the values of the open-source

00:08:16,740 --> 00:08:23,610
community

00:08:17,990 --> 00:08:25,829
yeah so with the broad hand wavy history

00:08:23,610 --> 00:08:30,779
out of the way it has the open-source

00:08:25,829 --> 00:08:33,750
support today and what it looks like for

00:08:30,779 --> 00:08:38,550
practical reasons I'm not going to have

00:08:33,750 --> 00:08:40,440
a look at anything before 2009 and the

00:08:38,550 --> 00:08:43,440
practical reasons is that

00:08:40,440 --> 00:08:45,060
my diagrams would be like very wide and

00:08:43,440 --> 00:08:49,220
I wouldn't be able to fit stuff in them

00:08:45,060 --> 00:08:52,819
so yeah that's why so 10 years is plenty

00:08:49,220 --> 00:08:55,889
let's have a look at Nvidia first and

00:08:52,819 --> 00:08:58,649
this is what the reverse engineering

00:08:55,889 --> 00:09:01,350
process looked like this is specifically

00:08:58,649 --> 00:09:06,660
looking at a reverse engineering tool

00:09:01,350 --> 00:09:10,610
called env tools and around 2010 early

00:09:06,660 --> 00:09:11,959
2010 the first support for the current

00:09:10,610 --> 00:09:19,980
modern-day

00:09:11,959 --> 00:09:24,959
NVIDIA GPUs was merged that's Fermi 4c

00:09:19,980 --> 00:09:26,850
it's also known as NBC zero but since

00:09:24,959 --> 00:09:29,579
then there's been a steady pace of

00:09:26,850 --> 00:09:31,829
support added for for the NVIDIA GPUs

00:09:29,579 --> 00:09:34,769
and the support comes in the form of

00:09:31,829 --> 00:09:37,470
like adding like get register

00:09:34,769 --> 00:09:39,569
definitions so that you can see what the

00:09:37,470 --> 00:09:41,250
proprietary driver is actually doing

00:09:39,569 --> 00:09:44,790
when it's talking to the GPUs you can

00:09:41,250 --> 00:09:48,810
decode it in a reasonable fashion so

00:09:44,790 --> 00:09:51,070
about every 2 years there seems to be a

00:09:48,810 --> 00:09:56,920
new GPU added

00:09:51,070 --> 00:10:00,009
and let's see oops right I was wrong way

00:09:56,920 --> 00:10:02,079
and this is what the diverse reverse

00:10:00,009 --> 00:10:04,750
engineering work ends up looking like

00:10:02,079 --> 00:10:06,670
when it's actually producing a driver so

00:10:04,750 --> 00:10:07,149
you can see that there's a little bit of

00:10:06,670 --> 00:10:09,339
a delay

00:10:07,149 --> 00:10:13,060
generally speaking from the the reverse

00:10:09,339 --> 00:10:15,040
engineering effort I think that's maybe

00:10:13,060 --> 00:10:18,690
six months from the first Fermi support

00:10:15,040 --> 00:10:21,279
to the later Fermi support in Mesa and

00:10:18,690 --> 00:10:23,800
there's also a corresponding graph for

00:10:21,279 --> 00:10:25,720
for the kernel when stuff is merged but

00:10:23,800 --> 00:10:28,269
it basically says the same thing so it's

00:10:25,720 --> 00:10:32,709
not very interesting so I just opted for

00:10:28,269 --> 00:10:35,380
the Mesa one so Pascal is their latest

00:10:32,709 --> 00:10:38,800
TPU so the open-source support goes all

00:10:35,380 --> 00:10:44,529
the way to current day to whatever you

00:10:38,800 --> 00:10:47,829
can buy in stores today which is nice if

00:10:44,529 --> 00:10:50,880
we continue with Intel there's no

00:10:47,829 --> 00:10:53,170
reverse engineering timeline although

00:10:50,880 --> 00:10:55,510
there has been i've heard rumors

00:10:53,170 --> 00:10:56,980
floating around that internally until

00:10:55,510 --> 00:10:59,110
actually does some reverse engineering

00:10:56,980 --> 00:11:02,980
or the linux team does some reverse

00:10:59,110 --> 00:11:06,370
engineering of their windows driver to

00:11:02,980 --> 00:11:06,970
get better documentation so that's kind

00:11:06,370 --> 00:11:10,779
of interesting

00:11:06,970 --> 00:11:14,769
I guess the this timeline is very much

00:11:10,779 --> 00:11:20,370
caught cut short it's of the i9 15

00:11:14,769 --> 00:11:24,880
driver it itself was merged in 2004 so

00:11:20,370 --> 00:11:28,899
yeah we're missing a fair bit of time so

00:11:24,880 --> 00:11:31,870
in 2000 in 2004 a company called

00:11:28,899 --> 00:11:35,889
tungsten wrote the initial open-source

00:11:31,870 --> 00:11:36,639
driver for the 915 platform and since

00:11:35,889 --> 00:11:38,800
then

00:11:36,639 --> 00:11:42,089
Intel has been actively contributing

00:11:38,800 --> 00:11:45,639
towards it and still is very much so

00:11:42,089 --> 00:11:47,769
so if we look at the gen 10 card where

00:11:45,639 --> 00:11:50,529
that's hardware that isn't even released

00:11:47,769 --> 00:11:53,589
yet so when you actually get a hold of

00:11:50,529 --> 00:11:55,209
that hardware you'll probably be pretty

00:11:53,589 --> 00:11:57,420
pleasantly surprised about the level of

00:11:55,209 --> 00:12:03,310
support it'll work out of the box

00:11:57,420 --> 00:12:04,570
hopefully pretty well so let's look at

00:12:03,310 --> 00:12:06,459
AMD

00:12:04,570 --> 00:12:08,410
there's no reverse engineering timeline

00:12:06,459 --> 00:12:13,420
here either I could probably dig one up

00:12:08,410 --> 00:12:15,970
but since they're their entry into the

00:12:13,420 --> 00:12:18,910
open-source community with the are 600

00:12:15,970 --> 00:12:21,940
GPU they have been providing a

00:12:18,910 --> 00:12:23,260
documentation so little reverse

00:12:21,940 --> 00:12:25,480
engineering efforts have been required

00:12:23,260 --> 00:12:30,279
or at least fewer than normal which is

00:12:25,480 --> 00:12:33,190
very nice and yeah it has I think helped

00:12:30,279 --> 00:12:37,029
the community greatly so this is what

00:12:33,190 --> 00:12:42,149
their timeline looks like there are 600

00:12:37,029 --> 00:12:46,060
around C 2010 it was merged into Mesa

00:12:42,149 --> 00:12:49,209
and the Vega 10 it's the latest hardware

00:12:46,060 --> 00:12:52,360
that's available so it covers basically

00:12:49,209 --> 00:12:54,250
the entire recent span something

00:12:52,360 --> 00:12:56,320
interesting about AMD specifically is

00:12:54,250 --> 00:12:58,990
that they have a lot of drivers like a

00:12:56,320 --> 00:13:02,079
lot lot on the kernel side they have two

00:12:58,990 --> 00:13:07,180
drivers they have the Radeon driver and

00:13:02,079 --> 00:13:09,010
also the AMD GPU driver so that's two on

00:13:07,180 --> 00:13:12,339
the Mesa side they have three drivers

00:13:09,010 --> 00:13:14,470
they have the are 604 that very early

00:13:12,339 --> 00:13:17,380
generation of drivers

00:13:14,470 --> 00:13:20,769
there's the Radeon the Radeon driver

00:13:17,380 --> 00:13:25,779
covers the span like from the Evergreen

00:13:20,769 --> 00:13:29,260
to southern islands I believe and then

00:13:25,779 --> 00:13:33,579
there's the Radeon si which covers sea

00:13:29,260 --> 00:13:34,540
islands and to today so that's the stuff

00:13:33,579 --> 00:13:36,550
that lives in Mesa

00:13:34,540 --> 00:13:40,209
but then there's more than there's

00:13:36,550 --> 00:13:42,190
drivers that don't live in Mesa as

00:13:40,209 --> 00:13:44,410
specifically there's the AMD Vulcan

00:13:42,190 --> 00:13:47,410
driver which is open source and

00:13:44,410 --> 00:13:50,019
available to anyone but it's not really

00:13:47,410 --> 00:13:55,089
hosted to prevent the normal like

00:13:50,019 --> 00:13:57,310
everyday projects like Mesa so it's

00:13:55,089 --> 00:13:58,930
living somewhere else I think on github

00:13:57,310 --> 00:14:05,680
so if you're interested you can have a

00:13:58,930 --> 00:14:07,050
look and then we have Broadcom which is

00:14:05,680 --> 00:14:10,269
interesting

00:14:07,050 --> 00:14:11,800
they have no reverse engineering chart

00:14:10,269 --> 00:14:12,970
because much of the development has

00:14:11,800 --> 00:14:18,160
happened

00:14:12,970 --> 00:14:22,019
house by Broadcom and specifically Eric

00:14:18,160 --> 00:14:24,339
and Holt piece he's the one guy dev team

00:14:22,019 --> 00:14:28,930
insider Broadcom doing all this stuff

00:14:24,339 --> 00:14:32,769
and his work has resulted in very good

00:14:28,930 --> 00:14:34,810
support for the VC for platform so if we

00:14:32,769 --> 00:14:36,009
have a look at the graph it's it's

00:14:34,810 --> 00:14:38,079
pretty empty there's not a lot of

00:14:36,009 --> 00:14:40,389
hardware in there but the VC for

00:14:38,079 --> 00:14:42,129
hardware has been supported for for a

00:14:40,389 --> 00:14:45,129
good while and it's still being actively

00:14:42,129 --> 00:14:48,430
developed on and coming down the

00:14:45,129 --> 00:14:53,519
pipeline there's also the VC 5 and the

00:14:48,430 --> 00:14:57,310
VC 5 is isn't really available quite yet

00:14:53,519 --> 00:15:00,699
so it not being totally ready yet

00:14:57,310 --> 00:15:02,410
doesn't matter yeah that's fine look at

00:15:00,699 --> 00:15:04,600
the dev kits you can get a hold for this

00:15:02,410 --> 00:15:07,779
stuff I would recommend maybe a

00:15:04,600 --> 00:15:10,839
Raspberry Pi 3 there she fast available

00:15:07,779 --> 00:15:16,089
and we would let you try out the VC for

00:15:10,839 --> 00:15:19,750
stuff and then there's the VC 5 Harper

00:15:16,089 --> 00:15:22,660
there's an SOC number I don't think it's

00:15:19,750 --> 00:15:24,850
available anywhere so who knows maybe

00:15:22,660 --> 00:15:29,949
it'll be in the raspberry pi 4 I have no

00:15:24,850 --> 00:15:33,699
idea but maybe continuing on there's

00:15:29,949 --> 00:15:36,759
Qualcomm and this is what their reverse

00:15:33,699 --> 00:15:40,180
engineering shark looks like so it

00:15:36,759 --> 00:15:41,829
started yeah like a few years ago with

00:15:40,180 --> 00:15:45,269
the a 280-300

00:15:41,829 --> 00:15:49,360
they were added basically simultaneously

00:15:45,269 --> 00:15:51,040
the a 200 and 300 hardware was very much

00:15:49,360 --> 00:15:52,269
available at the time or both were

00:15:51,040 --> 00:15:53,949
available at the time of the first

00:15:52,269 --> 00:15:57,819
reverse engineering so they were added

00:15:53,949 --> 00:16:01,209
pretty much simultaneously and this

00:15:57,819 --> 00:16:06,430
hardware's what you'll find probably in

00:16:01,209 --> 00:16:08,350
your Android phone most likely and it

00:16:06,430 --> 00:16:11,529
also covers the entire span of available

00:16:08,350 --> 00:16:13,059
hardware from from Qualcomm the a500 I

00:16:11,529 --> 00:16:15,699
believe is the very latest hardware you

00:16:13,059 --> 00:16:18,670
can get ahold of so it is well supported

00:16:15,699 --> 00:16:21,449
and much of this work has been done by

00:16:18,670 --> 00:16:25,439
Rob Clarke

00:16:21,449 --> 00:16:29,459
yeah and this is what the support in

00:16:25,439 --> 00:16:31,109
Mesa looks like so it's almost like same

00:16:29,459 --> 00:16:34,529
day at least prefer some of the hardware

00:16:31,109 --> 00:16:36,989
targets the a500 the most recent

00:16:34,529 --> 00:16:39,689
hardware was reverse engineered a little

00:16:36,989 --> 00:16:42,749
bit for a little bit before yeah the

00:16:39,689 --> 00:16:45,209
actual support was added to Mesa but

00:16:42,749 --> 00:16:47,220
it's it's all in there and it's in good

00:16:45,209 --> 00:16:48,869
order - like the the driver is very

00:16:47,220 --> 00:16:53,429
mature so that's nice

00:16:48,869 --> 00:16:55,470
and if you want to have a look at the

00:16:53,429 --> 00:16:56,790
hardware and develop it for yourself

00:16:55,470 --> 00:17:01,889
perhaps or develop the drivers for

00:16:56,790 --> 00:17:05,669
yourself this is the first or the most

00:17:01,889 --> 00:17:10,589
reasonable a200 development kit I could

00:17:05,669 --> 00:17:12,689
find it's an XP IMX 53 it should be

00:17:10,589 --> 00:17:17,039
pretty by now it's somewhat old

00:17:12,689 --> 00:17:18,139
it's so three generations old I think if

00:17:17,039 --> 00:17:20,279
you want to have a look at the more

00:17:18,139 --> 00:17:23,429
something more reasonable there's the

00:17:20,279 --> 00:17:26,610
dragon board for 10 C which is a pretty

00:17:23,429 --> 00:17:29,760
current dev board I use it every now and

00:17:26,610 --> 00:17:34,590
then and it's based on the the Qualcomm

00:17:29,760 --> 00:17:37,769
410 e SOC and if you wanna look at the a

00:17:34,590 --> 00:17:40,970
three or a four hundred there's the

00:17:37,769 --> 00:17:47,070
enforce board here it has an a Qualcomm

00:17:40,970 --> 00:17:48,870
805 SOC and lastly there's the most

00:17:47,070 --> 00:17:51,000
recent board I'm not even sure how

00:17:48,870 --> 00:17:53,299
available this is but I think it's

00:17:51,000 --> 00:17:57,299
starting to trickle out of Qualcomm now

00:17:53,299 --> 00:18:01,110
there's the dragon board a 10 C which is

00:17:57,299 --> 00:18:04,200
based on the 820 or sorry the dragon

00:18:01,110 --> 00:18:08,610
board a 20 C which is based on the 820

00:18:04,200 --> 00:18:10,350
associ he's standing for embedded I

00:18:08,610 --> 00:18:16,350
would presume I don't know

00:18:10,350 --> 00:18:18,630
yeah and support for this is pretty ok I

00:18:16,350 --> 00:18:21,360
believe there may be some kernel stuff

00:18:18,630 --> 00:18:25,230
that's still being worked on but it

00:18:21,360 --> 00:18:27,480
should be usable for most use cases so

00:18:25,230 --> 00:18:28,980
that brings us to Vivante which I've

00:18:27,480 --> 00:18:32,080
been sort of

00:18:28,980 --> 00:18:34,570
working with a fair amount recently

00:18:32,080 --> 00:18:38,049
which it's pretty interesting the way it

00:18:34,570 --> 00:18:40,830
was developed so the reverse engineering

00:18:38,049 --> 00:18:45,429
work has been I think it started 2012

00:18:40,830 --> 00:18:47,590
and the Vivante GPUs are very common

00:18:45,429 --> 00:18:48,940
like they're very low priced so you'll

00:18:47,590 --> 00:18:58,799
find them and pretty much anything

00:18:48,940 --> 00:19:01,470
that's cheap and yeah this is what the

00:18:58,799 --> 00:19:04,690
reverse engineering effort actually

00:19:01,470 --> 00:19:14,409
ended up in so the driver was introduced

00:19:04,690 --> 00:19:19,330
2000 and C 1716 yeah and was done in in

00:19:14,409 --> 00:19:20,619
large parts by vladimir van der Laan he

00:19:19,330 --> 00:19:23,909
did much of the reverse engineering

00:19:20,619 --> 00:19:27,549
christian g-minor also did Lucas stock

00:19:23,909 --> 00:19:30,190
Pegatron X also did and the support for

00:19:27,549 --> 00:19:34,090
these this hardware this I think the

00:19:30,190 --> 00:19:36,389
entire span is the GC 200 to the GC 3000

00:19:34,090 --> 00:19:40,029
is a very mature it's pretty good and

00:19:36,389 --> 00:19:42,340
then lastly there's the GC 7000 which

00:19:40,029 --> 00:19:44,950
just tossed the initial support added

00:19:42,340 --> 00:19:46,869
now and you can sort of maybe get a hold

00:19:44,950 --> 00:19:50,860
of a dev board maybe not

00:19:46,869 --> 00:19:52,659
it's a little bit early days for it so

00:19:50,860 --> 00:19:55,419
if you want to develop stuff for the

00:19:52,659 --> 00:19:58,869
dc-3 at 2000 there's the AMX Sabre

00:19:55,419 --> 00:20:03,570
boards or I make six save awards for the

00:19:58,869 --> 00:20:07,929
3000 there's two imx6 QP Sabre boards

00:20:03,570 --> 00:20:11,320
the QP is basically a just a higher-end

00:20:07,929 --> 00:20:16,090
version of the normal m x-x with a

00:20:11,320 --> 00:20:18,549
little bit fancier hardware and then

00:20:16,090 --> 00:20:20,379
there's just a dead board which is

00:20:18,549 --> 00:20:22,619
barely available I don't think I could

00:20:20,379 --> 00:20:24,580
get a hold of one if I wanted to so

00:20:22,619 --> 00:20:28,389
hopefully it'll be easier to get a hold

00:20:24,580 --> 00:20:31,600
of but the developers of the Vivante or

00:20:28,389 --> 00:20:33,879
at the web driver have some hardware so

00:20:31,600 --> 00:20:36,690
development this is proceeding so

00:20:33,879 --> 00:20:40,650
everything is good in that respect

00:20:36,690 --> 00:20:42,180
so let's have a look at at arm there's

00:20:40,650 --> 00:20:45,210
actually something to say about arm

00:20:42,180 --> 00:20:50,930
which is pretty Pleasant some stuff is

00:20:45,210 --> 00:20:54,540
happening the Molly T series of GPUs

00:20:50,930 --> 00:20:58,230
just drew its very first triangles maybe

00:20:54,540 --> 00:21:00,450
I think it was like a month ago which is

00:20:58,230 --> 00:21:01,880
very recent and also there's some more

00:21:00,450 --> 00:21:05,220
there's more of a continuous ongoing

00:21:01,880 --> 00:21:09,060
reverse engineering effort for the Molly

00:21:05,220 --> 00:21:11,730
G Series GPUs there's not much of a

00:21:09,060 --> 00:21:13,830
driver and none of it has been up

00:21:11,730 --> 00:21:16,800
streamed so you won't find any support

00:21:13,830 --> 00:21:19,440
for this and either the kernel or the

00:21:16,800 --> 00:21:22,760
Mesa so it's all based on unlike tooling

00:21:19,440 --> 00:21:27,120
so it's still the very early days for

00:21:22,760 --> 00:21:27,900
arm support but if you want to have a

00:21:27,120 --> 00:21:31,380
look at this stuff

00:21:27,900 --> 00:21:37,050
here's a dub board that you could use it

00:21:31,380 --> 00:21:38,520
has the RK rockchip rk3288 SOC I think

00:21:37,050 --> 00:21:40,280
it's like 70 bucks or something

00:21:38,520 --> 00:21:42,210
something like that that's not too bad

00:21:40,280 --> 00:21:46,620
and if you want to look at the more

00:21:42,210 --> 00:21:49,590
recent G series of GPUs there's the high

00:21:46,620 --> 00:21:50,850
key 960 board which is being used for

00:21:49,590 --> 00:21:53,700
development of all kinds of things

00:21:50,850 --> 00:21:56,310
actually it's pretty interesting and

00:21:53,700 --> 00:21:59,880
support for it is pretty good

00:21:56,310 --> 00:22:04,080
upstream I believe yeah so that brings

00:21:59,880 --> 00:22:07,260
us to imagination and I don't have a lot

00:22:04,080 --> 00:22:09,180
to say about imagination there's not a

00:22:07,260 --> 00:22:14,070
lot of support there's not really any

00:22:09,180 --> 00:22:16,260
reverse engineering going on and they

00:22:14,070 --> 00:22:18,660
don't seem to be too interested in

00:22:16,260 --> 00:22:21,750
actually contributing towards the stuff

00:22:18,660 --> 00:22:23,730
so I don't have any dev kits to

00:22:21,750 --> 00:22:25,920
recommend I don't know if you feel very

00:22:23,730 --> 00:22:29,960
brave you can lick this stuff up and and

00:22:25,920 --> 00:22:34,800
see if there's anything that seems like

00:22:29,960 --> 00:22:36,450
yeah low hanging fruit to you yeah so

00:22:34,800 --> 00:22:38,970
that brings us to what comes next

00:22:36,450 --> 00:22:41,430
so if this is where we are now and where

00:22:38,970 --> 00:22:42,560
we've been before we're also going

00:22:41,430 --> 00:22:46,670
places and

00:22:42,560 --> 00:22:49,640
the OpenGL support is being continuously

00:22:46,670 --> 00:22:51,200
improved OpenGL 4.6 isn't really

00:22:49,640 --> 00:22:53,840
supported by any of the open-source

00:22:51,200 --> 00:22:57,410
drivers quite yet so most of the drivers

00:22:53,840 --> 00:23:00,010
with good support are at 4.5 so there

00:22:57,410 --> 00:23:03,710
are a few features still missing

00:23:00,010 --> 00:23:08,720
there's also open CL support or rather

00:23:03,710 --> 00:23:12,770
there isn't any not in the normal open

00:23:08,720 --> 00:23:18,770
source ecosystem anyway there's the

00:23:12,770 --> 00:23:20,360
Intel neon support for the Intel GPUs so

00:23:18,770 --> 00:23:22,700
this doesn't live in Mesa it lives

00:23:20,360 --> 00:23:27,460
somewhere else all on github I would

00:23:22,700 --> 00:23:30,320
pursue more Intel open source o1 o org

00:23:27,460 --> 00:23:32,810
and I think it support supports the

00:23:30,320 --> 00:23:35,690
latest open CL standards which is very

00:23:32,810 --> 00:23:38,570
nice it's not an easy target to meet but

00:23:35,690 --> 00:23:41,660
they've done it there's also the AMD

00:23:38,570 --> 00:23:42,920
Rock'em which doesn't live inside of

00:23:41,660 --> 00:23:47,180
Mesa or any of the traditional

00:23:42,920 --> 00:23:49,280
repositories either but supplies us with

00:23:47,180 --> 00:23:53,480
a pretty decent open-source support for

00:23:49,280 --> 00:23:56,090
OpenGL but for the community only

00:23:53,480 --> 00:23:58,450
drivers this support is very poor there

00:23:56,090 --> 00:24:02,720
is none basically so if you wanted to

00:23:58,450 --> 00:24:05,390
run OpenCL on your Qualcomm latrina GPU

00:24:02,720 --> 00:24:08,360
you'd be out of luck basically there's

00:24:05,390 --> 00:24:11,170
no such support today but there is

00:24:08,360 --> 00:24:14,440
support coming along for the Nvidia

00:24:11,170 --> 00:24:17,000
driver the new the nouveau driver

00:24:14,440 --> 00:24:22,090
there's also support coming along for

00:24:17,000 --> 00:24:25,910
the freed reno qualcomm driver so that

00:24:22,090 --> 00:24:31,010
what this looks like today is that there

00:24:25,910 --> 00:24:35,420
is a need for an open CL compiler or

00:24:31,010 --> 00:24:39,050
front-end and there is LLVM and it

00:24:35,420 --> 00:24:41,780
supports OpenGL to some extent however

00:24:39,050 --> 00:24:44,080
in order to use it in the context of a

00:24:41,780 --> 00:24:49,820
driver we needed it to emit something

00:24:44,080 --> 00:24:53,390
that is possible by our drivers so we

00:24:49,820 --> 00:24:56,150
need LLVM to emits bearbie which is a

00:24:53,390 --> 00:25:00,560
compiler intermediate format

00:24:56,150 --> 00:25:03,290
suburbia isn't natively supported by the

00:25:00,560 --> 00:25:05,210
open source drivers but you can convert

00:25:03,290 --> 00:25:07,760
suburbia to something that is supported

00:25:05,210 --> 00:25:10,090
by some of the drivers there's more work

00:25:07,760 --> 00:25:15,410
to be done in that space too for sure

00:25:10,090 --> 00:25:18,440
so most of the the current day open

00:25:15,410 --> 00:25:23,690
source drivers are using a format called

00:25:18,440 --> 00:25:27,710
T TSI and TSI is not very easy to

00:25:23,690 --> 00:25:30,640
convert spur V into however there's an

00:25:27,710 --> 00:25:34,150
alternative this a format called near

00:25:30,640 --> 00:25:38,320
which is a bit more modern than T GSI

00:25:34,150 --> 00:25:44,920
tgs I was introduced I believe with the

00:25:38,320 --> 00:25:49,190
AI 915 driver in 2004 it stands for

00:25:44,920 --> 00:25:51,640
tungsten some things intermediate I

00:25:49,190 --> 00:25:54,830
would presume I don't actually know but

00:25:51,640 --> 00:25:57,320
it's it's very old it's been around for

00:25:54,830 --> 00:25:59,150
a long time so it's well supported but

00:25:57,320 --> 00:26:01,490
it's not well suited for the purpose

00:25:59,150 --> 00:26:03,260
it's for example not as I say based

00:26:01,490 --> 00:26:06,080
which is what do you really want your in

00:26:03,260 --> 00:26:09,650
intermediate formats to be leased for

00:26:06,080 --> 00:26:12,830
modern day compilers so the idea is to

00:26:09,650 --> 00:26:15,410
move the open-source drivers to support

00:26:12,830 --> 00:26:18,650
near which would make it very easy or

00:26:15,410 --> 00:26:22,730
relatively easy to ingest spear B into

00:26:18,650 --> 00:26:26,090
the driver yeah so that concludes the

00:26:22,730 --> 00:26:29,510
open CL support collaborative on this in

00:26:26,090 --> 00:26:30,760
terms of making LLVM support omitting

00:26:29,510 --> 00:26:34,100
spur be better

00:26:30,760 --> 00:26:37,610
the there are there is a branch of LLVM

00:26:34,100 --> 00:26:40,220
for this but it's not up streamed into

00:26:37,610 --> 00:26:41,660
the main mainline LLVM which is what we

00:26:40,220 --> 00:26:44,690
want and what we need in order to

00:26:41,660 --> 00:26:48,770
support this stuff there's also a Vulcan

00:26:44,690 --> 00:26:53,900
support most most vendors don't have all

00:26:48,770 --> 00:26:57,160
can support AMD does they have lots of

00:26:53,900 --> 00:27:00,200
support in fact they have rad V which is

00:26:57,160 --> 00:27:03,290
which lives in Mesa which is like the

00:27:00,200 --> 00:27:05,120
community driver and there's also AMD

00:27:03,290 --> 00:27:07,190
Vulcan which is the corporate driver

00:27:05,120 --> 00:27:11,420
both are open source and available

00:27:07,190 --> 00:27:14,810
of course and I believe both support

00:27:11,420 --> 00:27:19,660
Vulcan 1.1 at least rad vidas md vulcan

00:27:14,810 --> 00:27:23,510
may not but it should be soon anyway and

00:27:19,660 --> 00:27:27,400
for intel there's the end driver and it

00:27:23,510 --> 00:27:30,440
supports Vulcan 1-1 and also lives in

00:27:27,400 --> 00:27:34,400
instead of Mesa so it's as Community

00:27:30,440 --> 00:27:38,450
Oriented as it gets so that concludes

00:27:34,400 --> 00:27:40,250
the book and support stuff the big

00:27:38,450 --> 00:27:44,570
picture this is the interesting part to

00:27:40,250 --> 00:27:46,850
me if we look at the development

00:27:44,570 --> 00:27:48,500
perspective of the big picture there are

00:27:46,850 --> 00:27:51,230
things there are a few data conclusions

00:27:48,500 --> 00:27:55,460
we can draw for example some drivers are

00:27:51,230 --> 00:27:58,490
very mature the Intel ones the AMD ones

00:27:55,460 --> 00:28:01,430
they call calm ones they're doing very

00:27:58,490 --> 00:28:04,700
well and they're very reasonable to use

00:28:01,430 --> 00:28:06,980
in a production device and if you find

00:28:04,700 --> 00:28:09,650
any bugs you know just report them and

00:28:06,980 --> 00:28:14,800
someone will actually attend to them so

00:28:09,650 --> 00:28:14,800
that's very nice to see there's also

00:28:14,950 --> 00:28:24,440
lots of lots of supported there are lots

00:28:22,220 --> 00:28:26,720
of vendor supported drivers that don't

00:28:24,440 --> 00:28:29,780
live inside of the the usual

00:28:26,720 --> 00:28:32,920
repositories specifically AMD seems to

00:28:29,780 --> 00:28:35,440
be guilty of doing this which is as

00:28:32,920 --> 00:28:38,840
certainly ok but maybe not ideal

00:28:35,440 --> 00:28:41,120
especially not in the sense that if they

00:28:38,840 --> 00:28:43,970
use the same if AMD used the same code

00:28:41,120 --> 00:28:46,160
paths as the other drivers did there

00:28:43,970 --> 00:28:49,070
would be a lot to gain for the other

00:28:46,160 --> 00:28:53,560
drivers but also less work for AMD but

00:28:49,070 --> 00:28:56,240
presumably they see the value of having

00:28:53,560 --> 00:28:58,940
the same codebase run on multiple

00:28:56,240 --> 00:29:03,350
operating system as a bigger net gain

00:28:58,940 --> 00:29:04,820
for them yeah and then there's this this

00:29:03,350 --> 00:29:07,160
is pretty cool just looking at the

00:29:04,820 --> 00:29:10,250
graphs or the timeless I had there seems

00:29:07,160 --> 00:29:12,530
to be about between zero and three years

00:29:10,250 --> 00:29:14,570
it seems to be that the time it takes to

00:29:12,530 --> 00:29:16,850
reverse from reverse engineering

00:29:14,570 --> 00:29:18,340
something to the day that you actually

00:29:16,850 --> 00:29:21,970
include the first

00:29:18,340 --> 00:29:28,030
support for for a device in the kernel

00:29:21,970 --> 00:29:29,860
or in Mesa so if we look at the arm

00:29:28,030 --> 00:29:33,070
reverse engineering which started

00:29:29,860 --> 00:29:36,190
relatively recently that happened

00:29:33,070 --> 00:29:37,990
basically now if we're very lucky maybe

00:29:36,190 --> 00:29:46,240
we'll have some drivers in three years

00:29:37,990 --> 00:29:47,440
maybe it would be nice and yeah this is

00:29:46,240 --> 00:29:50,590
sort of reiterating what I already

00:29:47,440 --> 00:29:54,610
covered vendor support a pap is a set of

00:29:50,590 --> 00:29:59,820
the initial repos so that's what MD does

00:29:54,610 --> 00:30:01,990
to a large extent also OpenCL is hard

00:29:59,820 --> 00:30:03,940
there's lots of work that needs to be

00:30:01,990 --> 00:30:07,390
done and the ecosystem for it for doing

00:30:03,940 --> 00:30:11,530
it in open source is as not very mature

00:30:07,390 --> 00:30:13,450
like lots of tooling is needed and lots

00:30:11,530 --> 00:30:16,960
of the very basic infrastructure is just

00:30:13,450 --> 00:30:19,150
lacking for example the compiler

00:30:16,960 --> 00:30:21,300
infrastructure with spear v not being

00:30:19,150 --> 00:30:26,800
really in place

00:30:21,300 --> 00:30:29,860
and there's the the vendor aspect to the

00:30:26,800 --> 00:30:31,540
big picture some vendor support is

00:30:29,860 --> 00:30:35,620
really awesome like some vendors are

00:30:31,540 --> 00:30:39,370
really really good and some are not so

00:30:35,620 --> 00:30:43,120
good and open-source drivers come in a

00:30:39,370 --> 00:30:46,390
few different shapes and the way they're

00:30:43,120 --> 00:30:48,070
structured there are the ones with

00:30:46,390 --> 00:30:50,950
vendor support and those that don't

00:30:48,070 --> 00:30:53,230
for example the Vivante driver has no

00:30:50,950 --> 00:30:58,390
vendor support yet the driver is pretty

00:30:53,230 --> 00:31:02,710
damn good so that's cool there are small

00:30:58,390 --> 00:31:06,250
vendors for example Broadcom has the one

00:31:02,710 --> 00:31:08,650
man Eric team which is doing really

00:31:06,250 --> 00:31:13,230
awesome work and there are big teams

00:31:08,650 --> 00:31:13,230
like the the Intel team or the AMD team

00:31:14,280 --> 00:31:21,740
some vendors are more motivated to

00:31:18,400 --> 00:31:25,289
control their their software stack

00:31:21,740 --> 00:31:29,280
that would be maybe the arms the

00:31:25,289 --> 00:31:33,510
imagination the Nvidia they are more

00:31:29,280 --> 00:31:34,530
motivated to to own the software than

00:31:33,510 --> 00:31:38,100
they are to contribute to the

00:31:34,530 --> 00:31:40,679
open-source and then there's the Nvidia

00:31:38,100 --> 00:31:42,929
which is just plain weird

00:31:40,679 --> 00:31:46,169
they have a great driver but they're not

00:31:42,929 --> 00:31:50,610
allowing us to really use their GPUs to

00:31:46,169 --> 00:31:53,370
the fullest extent by not publishing the

00:31:50,610 --> 00:31:58,740
firmware that is needed to actually have

00:31:53,370 --> 00:32:00,000
them work yeah and if we have a look at

00:31:58,740 --> 00:32:04,380
the manufacturers here's some

00:32:00,000 --> 00:32:08,450
interesting stuff - some indices some

00:32:04,380 --> 00:32:08,450
industries really need open source and

00:32:09,260 --> 00:32:15,059
apparently that's that's the aircraft

00:32:12,539 --> 00:32:18,240
industry they care in the sense that

00:32:15,059 --> 00:32:19,980
they have to they really have to support

00:32:18,240 --> 00:32:20,789
a device for 20 years they can't

00:32:19,980 --> 00:32:25,679
half-ass it

00:32:20,789 --> 00:32:29,070
they can't do what the Android did

00:32:25,679 --> 00:32:30,780
Android product manufacturers are doing

00:32:29,070 --> 00:32:34,500
where they sort of release a device and

00:32:30,780 --> 00:32:37,500
it's supported to some extent for a year

00:32:34,500 --> 00:32:39,000
to three years maybe but their devices

00:32:37,500 --> 00:32:40,860
are installed and they're going to be

00:32:39,000 --> 00:32:42,120
the aircraft invest or install and

00:32:40,860 --> 00:32:47,789
they're going to be used for 20 years

00:32:42,120 --> 00:32:50,580
and if if a plane ever goes down because

00:32:47,789 --> 00:32:51,299
of a faulty driver that would be pretty

00:32:50,580 --> 00:32:54,090
unacceptable

00:32:51,299 --> 00:33:00,210
so they actually care about the VAS or

00:32:54,090 --> 00:33:02,400
support and in a very real way so anyone

00:33:00,210 --> 00:33:05,510
who really cares about having good

00:33:02,400 --> 00:33:08,580
long-term support for their drivers

00:33:05,510 --> 00:33:10,650
should have a serious look into the

00:33:08,580 --> 00:33:13,200
open-source drivers it's one of those

00:33:10,650 --> 00:33:16,380
huge things that isn't maybe obvious if

00:33:13,200 --> 00:33:19,049
you do run a proprietary driver how are

00:33:16,380 --> 00:33:23,010
you ever going to move to a new kernel

00:33:19,049 --> 00:33:25,470
in five years probably aren't or maybe

00:33:23,010 --> 00:33:28,429
you are but your vendor will tell you to

00:33:25,470 --> 00:33:31,280
give them a bunch of money to do work

00:33:28,429 --> 00:33:34,190
it's hard to get make guarantees about

00:33:31,280 --> 00:33:36,860
using hardware that is

00:33:34,190 --> 00:33:41,149
supported or poorly supported so it's

00:33:36,860 --> 00:33:44,379
hard to deliver products yeah and that's

00:33:41,149 --> 00:33:44,379
it for me that's all of the conclusions

00:33:44,409 --> 00:33:48,190
does anyone have any questions

00:33:58,340 --> 00:34:03,890
in your opinion do you have a chip

00:34:01,880 --> 00:34:05,420
manufacturer in mind that is doing the

00:34:03,890 --> 00:34:07,520
best in terms of open source software

00:34:05,420 --> 00:34:12,140
development there are some that are

00:34:07,520 --> 00:34:15,800
really good like Intel AMD

00:34:12,140 --> 00:34:17,810
are doing really well at Qualcomm seems

00:34:15,800 --> 00:34:19,700
to be doing or they seem to start caring

00:34:17,810 --> 00:34:21,770
which is very nice like they're actually

00:34:19,700 --> 00:34:24,230
contributing support for for new GPUs

00:34:21,770 --> 00:34:26,899
and there are some that are too small or

00:34:24,230 --> 00:34:31,429
unmotivated or some combination of that

00:34:26,899 --> 00:34:33,080
and is there like any development boards

00:34:31,429 --> 00:34:39,110
that you could really recommend in terms

00:34:33,080 --> 00:34:42,530
of the embedded Sox that are kind of

00:34:39,110 --> 00:34:47,630
leading the way as some that are really

00:34:42,530 --> 00:34:49,040
good yeah I think depending on your use

00:34:47,630 --> 00:34:52,159
case like what kind of performance you

00:34:49,040 --> 00:34:54,169
want you maybe grab a Raspberry Pi they

00:34:52,159 --> 00:34:56,270
have a good support their sheep they're

00:34:54,169 --> 00:35:00,370
available everywhere they're a pretty

00:34:56,270 --> 00:35:00,370
decent option I'd say thank you

00:35:07,619 --> 00:35:16,570
sorry what about risk Bibles so this is

00:35:13,830 --> 00:35:32,170
we're more GPU focused I don't know I

00:35:16,570 --> 00:35:35,710
don't think so I'm Mesa independent of

00:35:32,170 --> 00:35:39,520
the architecture as long as the kernel

00:35:35,710 --> 00:35:42,280
supports whatever whatever CPUs happen

00:35:39,520 --> 00:35:47,530
to be using that should be fine no it

00:35:42,280 --> 00:35:50,859
should be fine so you have mention

00:35:47,530 --> 00:35:53,980
anything about virtualization yeah a lot

00:35:50,859 --> 00:35:55,260
of products I'm looking at have use

00:35:53,980 --> 00:35:58,960
cases where a lot of people in doing

00:35:55,260 --> 00:36:00,490
hypervisors or other sort of testing and

00:35:58,960 --> 00:36:04,990
having is only be with good

00:36:00,490 --> 00:36:06,820
virtualization so currently there is a

00:36:04,990 --> 00:36:11,650
fair amount of work being done to a

00:36:06,820 --> 00:36:17,050
project called Virgil 3d which is rather

00:36:11,650 --> 00:36:19,990
interesting it's used on the host and

00:36:17,050 --> 00:36:22,960
the way it works is that the guest runs

00:36:19,990 --> 00:36:26,560
an open-source graphics stack that has a

00:36:22,960 --> 00:36:29,320
Mesa driver called Virgil the Virgil

00:36:26,560 --> 00:36:34,000
Mesa driver takes stuff south sunset

00:36:29,320 --> 00:36:37,839
through the vert IL paths in the kernel

00:36:34,000 --> 00:36:41,530
to the host where an application called

00:36:37,839 --> 00:36:44,290
virgil render takes that very raw GPU

00:36:41,530 --> 00:36:46,510
state from the guest and pulls out

00:36:44,290 --> 00:36:49,630
OpenGL commands out of it and then runs

00:36:46,510 --> 00:36:53,859
that on whatever driver the host happens

00:36:49,630 --> 00:36:56,050
to be running so you could run a an open

00:36:53,859 --> 00:36:59,170
source host with a proprietary Nvidia

00:36:56,050 --> 00:37:01,770
driver on on the host sir an open source

00:36:59,170 --> 00:37:05,140
guest and a proprietary host if you want

00:37:01,770 --> 00:37:08,010
so that's kind of it now but what is

00:37:05,140 --> 00:37:08,010
currently being worked on

00:37:09,089 --> 00:37:12,660
any more questions

00:37:15,460 --> 00:37:21,060
all right that's it thanks

00:37:17,970 --> 00:37:21,060

YouTube URL: https://www.youtube.com/watch?v=Ag8BGMY8MOs


