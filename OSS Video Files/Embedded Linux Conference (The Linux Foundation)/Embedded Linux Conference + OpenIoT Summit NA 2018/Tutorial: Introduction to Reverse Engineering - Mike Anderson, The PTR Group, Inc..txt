Title: Tutorial: Introduction to Reverse Engineering - Mike Anderson, The PTR Group, Inc.
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Tutorial: Introduction to Reverse Engineering - Mike Anderson, The PTR Group, Inc.

Security is always a concern as our products ship, especially in today's world of cracking attempts. But, what enables the crackers to be able to break into systems? Oftentimes, the answer is that they reverse engineer your product. In this tutorial, we will examine the techniques used by the cracker to reverse engineer your hardware and your software. We will look at techniques to bypass physical security as well as repopulating connectors on motherboards, reading flash storage, accessing firmware updates and the software techniques used to find vulnerabilities in your code. 

About Mike Anderson
Mike Anderson is currently Chief Scientist for The PTR Group, Inc. With over 40 years in the embedded and real-time computing industry, Mike works with a number of RTOS offerings for IoT devices. However, his focus over the past decade is primarily embedded Linux on a number of CPU architectures. As an instructor and consultant, Mike is a regular speaker at the Embedded Linux Conference, OpenIoT Summit and the Embedded Systems Conference as well as other Linux and IoT-oriented conferences. Ongoing projects include several efforts focused on migrating applications from RTOS offerings to real-time enhanced Linux platforms. Additional projects include work with mesh wireless topologies, 6LoWPAN, commercial reverse engineering and multiple robotics projects in working with the FIRST Robotics Program in the high schools.
Captions: 
	00:00:00,230 --> 00:00:08,550
okay cut some misbehaving equipment here

00:00:05,879 --> 00:00:11,280
just a second as is always the case

00:00:08,550 --> 00:00:16,320
right I forgot to sacrifice enough to

00:00:11,280 --> 00:00:19,199
the demo gods this morning yeah it could

00:00:16,320 --> 00:00:20,820
be a problem I don't know but let's see

00:00:19,199 --> 00:00:30,300
what we can do about getting something

00:00:20,820 --> 00:00:34,880
to run come on what the hell is it doing

00:00:30,300 --> 00:00:34,880
I hate when that happens

00:00:35,600 --> 00:00:42,739
all right when all else fails reboot

00:00:40,399 --> 00:00:46,129
and we'll see what we can do about that

00:00:42,739 --> 00:00:49,110
and hopefully it'll reboot well I'm

00:00:46,129 --> 00:00:52,530
happy to see you all here my name is

00:00:49,110 --> 00:00:54,420
Mike Anderson I am chief technology

00:00:52,530 --> 00:00:57,420
officer and chief scientist for the PTR

00:00:54,420 --> 00:00:59,520
group now the PTR group is a small

00:00:57,420 --> 00:01:01,680
embedded systems consulting shop we're

00:00:59,520 --> 00:01:04,010
kind of a boutique engineering shop is

00:01:01,680 --> 00:01:07,439
kind of the best way to describe us and

00:01:04,010 --> 00:01:10,020
some of the things that we do is kind of

00:01:07,439 --> 00:01:11,939
a general basis one of them happens to

00:01:10,020 --> 00:01:13,979
be reverse engineering so commercial

00:01:11,939 --> 00:01:16,590
reverse engineering and reverse

00:01:13,979 --> 00:01:18,780
engineering for various other

00:01:16,590 --> 00:01:21,299
organizations I happen to be located in

00:01:18,780 --> 00:01:22,619
Washington DC so you can get a guess as

00:01:21,299 --> 00:01:26,189
to who it is we do reverse engineering

00:01:22,619 --> 00:01:28,439
for and what we're gonna do in this

00:01:26,189 --> 00:01:31,710
particular session assuming I can get my

00:01:28,439 --> 00:01:33,810
computer to behave itself is we are

00:01:31,710 --> 00:01:37,079
going to talk a little bit about the

00:01:33,810 --> 00:01:38,610
process of reverse engineering and we'll

00:01:37,079 --> 00:01:40,979
talk about reverse engineering on the

00:01:38,610 --> 00:01:44,220
hardware side and reverse engineering on

00:01:40,979 --> 00:01:47,759
the software side see if I can get

00:01:44,220 --> 00:01:49,920
everything to behave itself and I happen

00:01:47,759 --> 00:01:51,720
to like to live dangerously so I

00:01:49,920 --> 00:01:55,100
actually have a board that I've hacked

00:01:51,720 --> 00:01:57,509
into and we will give it a shot to see

00:01:55,100 --> 00:02:00,000
whether or not it will actually do what

00:01:57,509 --> 00:02:03,360
I want it to do this one happens to be a

00:02:00,000 --> 00:02:07,049
router it is a router from our good

00:02:03,360 --> 00:02:11,420
friends at where are they Verizon that's

00:02:07,049 --> 00:02:11,420
it so it's a verizon router

00:02:12,200 --> 00:02:17,819
yeah yeah now it's an action tech router

00:02:15,350 --> 00:02:20,700
and let's see what we got here oh that

00:02:17,819 --> 00:02:25,590
looks better come on

00:02:20,700 --> 00:02:28,920
ha ha yay yippee Skippy no it's an

00:02:25,590 --> 00:02:35,310
action tech router so let's plug in some

00:02:28,920 --> 00:02:47,330
video see what happens I want to do the

00:02:35,310 --> 00:02:47,330
following let's do that and apply yes

00:02:47,480 --> 00:02:53,510
and a little Klingon never can never

00:02:50,489 --> 00:03:02,280
can't have enough Klingon you know ah

00:02:53,510 --> 00:03:08,250
you piece of crap let's try it again and

00:03:02,280 --> 00:03:09,300
this time let's just do that you piece

00:03:08,250 --> 00:03:14,880
of

00:03:09,300 --> 00:03:17,040
I hate Windows well it's just just as

00:03:14,880 --> 00:03:20,010
just this is just PowerPoint running

00:03:17,040 --> 00:03:21,720
under whine and sometimes it does what

00:03:20,010 --> 00:03:23,450
it's supposed to do and sometimes it

00:03:21,720 --> 00:03:28,100
doesn't

00:03:23,450 --> 00:03:30,540
I could I can certainly do that and but

00:03:28,100 --> 00:03:35,790
we're gonna try it one more time here

00:03:30,540 --> 00:03:39,269
and see if we can do a slide show there

00:03:35,790 --> 00:03:48,209
we go alright and they asked me why I

00:03:39,269 --> 00:03:50,040
drink okay so we're gonna do a quick

00:03:48,209 --> 00:03:52,019
introduction to reverse engineering

00:03:50,040 --> 00:03:54,260
although this is not going to be quick

00:03:52,019 --> 00:03:57,090
since I've got a couple hours here but

00:03:54,260 --> 00:04:00,450
we are going to see if I can turn that

00:03:57,090 --> 00:04:02,910
on and yes yeah we are going to talk

00:04:00,450 --> 00:04:05,310
about what reverse engineering is we

00:04:02,910 --> 00:04:07,980
will also discuss a little bit about why

00:04:05,310 --> 00:04:09,390
you would do such a thing some of the

00:04:07,980 --> 00:04:11,180
hardware and software tools that we'll

00:04:09,390 --> 00:04:14,310
use in the reverse engineering process

00:04:11,180 --> 00:04:16,320
some of the impediments that various

00:04:14,310 --> 00:04:19,019
manufacturers will throw up there to try

00:04:16,320 --> 00:04:21,539
and slow you down and the general

00:04:19,019 --> 00:04:24,600
process for being able to hack into

00:04:21,539 --> 00:04:26,430
hardware and then hacking into software

00:04:24,600 --> 00:04:28,110
as the case may be and will actually

00:04:26,430 --> 00:04:31,170
finish up with a kind of a brief

00:04:28,110 --> 00:04:34,200
discussion of some protocol hacking that

00:04:31,170 --> 00:04:36,450
we did definitely an interesting problem

00:04:34,200 --> 00:04:38,700
set and we'll get into all of that as we

00:04:36,450 --> 00:04:41,310
go through the material here one of the

00:04:38,700 --> 00:04:44,550
big issues though is knowing when to

00:04:41,310 --> 00:04:46,560
declare victory it is always a tough

00:04:44,550 --> 00:04:48,720
thing in doing reverse engineering

00:04:46,560 --> 00:04:51,000
you're not quite sure when you've done

00:04:48,720 --> 00:04:53,490
enough there's always something else you

00:04:51,000 --> 00:04:56,040
could potentially do and it's really a

00:04:53,490 --> 00:04:58,050
question of when you know to declare

00:04:56,040 --> 00:05:00,540
victory fold up your tent to home and

00:04:58,050 --> 00:05:03,660
then of course we'll finish up a little

00:05:00,540 --> 00:05:06,360
bit of where should you go from here all

00:05:03,660 --> 00:05:07,320
right so what exactly is the reverse

00:05:06,360 --> 00:05:10,350
engineering process

00:05:07,320 --> 00:05:12,630
first of all let's assume we're given a

00:05:10,350 --> 00:05:15,510
piece of hardware or software as the

00:05:12,630 --> 00:05:16,980
case may be we want to deconstruct it we

00:05:15,510 --> 00:05:19,440
want to find out how it was put together

00:05:16,980 --> 00:05:21,540
we want to find out how they built it

00:05:19,440 --> 00:05:25,050
what kinds of things are inside of it

00:05:21,540 --> 00:05:26,970
whether or not we can extend it and a

00:05:25,050 --> 00:05:29,250
few other issues we'll get into as we go

00:05:26,970 --> 00:05:31,430
through the material now this will

00:05:29,250 --> 00:05:33,870
typically entail removing the case

00:05:31,430 --> 00:05:37,020
repopulating connectors disassembling

00:05:33,870 --> 00:05:38,580
the software and it may require the use

00:05:37,020 --> 00:05:41,010
of hardware debuggers we'll talk a

00:05:38,580 --> 00:05:42,690
little bit about that as well and some

00:05:41,010 --> 00:05:44,250
other test equipment to figure out

00:05:42,690 --> 00:05:45,630
exactly what kind of connector we're

00:05:44,250 --> 00:05:48,480
actually looking at here on the

00:05:45,630 --> 00:05:50,250
motherboard but I will put this out

00:05:48,480 --> 00:05:50,900
there and make sure especially for you

00:05:50,250 --> 00:05:55,470
at home

00:05:50,900 --> 00:05:58,910
don't do this at home unless you know

00:05:55,470 --> 00:06:02,160
it's legal in your dearest jurisdiction

00:05:58,910 --> 00:06:03,570
here in the United States we have this

00:06:02,160 --> 00:06:06,450
nasty thing called the Digital

00:06:03,570 --> 00:06:09,510
Millennium Copyright Act and the DCMA

00:06:06,450 --> 00:06:14,130
gets really testy about disassembling

00:06:09,510 --> 00:06:15,950
firmware so don't do that unless you

00:06:14,130 --> 00:06:20,060
have somebody's written permission

00:06:15,950 --> 00:06:22,950
hopefully a law enforcement agency now

00:06:20,060 --> 00:06:24,900
that being said as we go through the

00:06:22,950 --> 00:06:26,730
material here we will be talking about

00:06:24,900 --> 00:06:28,280
some techniques that in certain

00:06:26,730 --> 00:06:32,100
jurisdictions will get you arrested

00:06:28,280 --> 00:06:35,310
don't do them I am NOT going to come

00:06:32,100 --> 00:06:37,520
bail you out of jail and you can point

00:06:35,310 --> 00:06:40,069
to the YouTube video all you want

00:06:37,520 --> 00:06:41,629
it's not gonna do anything for you this

00:06:40,069 --> 00:06:44,509
is the same sort of thing that I can

00:06:41,629 --> 00:06:47,090
explain how to make a silencer but if I

00:06:44,509 --> 00:06:48,530
make a silencer that's illegal I will

00:06:47,090 --> 00:06:50,629
explain to you how to do reverse

00:06:48,530 --> 00:06:53,000
engineering but actually doing the

00:06:50,629 --> 00:06:55,400
reverse engineering may be illegal in

00:06:53,000 --> 00:06:58,840
your jurisdiction please make sure you

00:06:55,400 --> 00:07:02,389
check that first alright so why do

00:06:58,840 --> 00:07:05,840
reverse engineering well part of the

00:07:02,389 --> 00:07:08,000
goal may be to repair or repurpose or

00:07:05,840 --> 00:07:09,409
upgrade a particular piece of hardware

00:07:08,000 --> 00:07:11,900
that you may have or maybe you're just

00:07:09,409 --> 00:07:14,030
curious what's inside the box those of

00:07:11,900 --> 00:07:17,210
us who back in the Dark Ages used to

00:07:14,030 --> 00:07:18,560
take televisions apart and radios and

00:07:17,210 --> 00:07:20,960
things of that sort just to see what was

00:07:18,560 --> 00:07:24,259
inside of them much to our parents

00:07:20,960 --> 00:07:27,319
dismay it was definitely something fun

00:07:24,259 --> 00:07:30,169
to do and only occasionally after

00:07:27,319 --> 00:07:32,270
actually after it only took once when

00:07:30,169 --> 00:07:34,460
you get across the anode of the

00:07:32,270 --> 00:07:37,250
television set and you get lit up by

00:07:34,460 --> 00:07:41,169
35,000 volts you only have to do that

00:07:37,250 --> 00:07:47,030
once before you respect that red wire

00:07:41,169 --> 00:07:50,060
don't touch the red wire now

00:07:47,030 --> 00:07:51,740
often and of course part of this now is

00:07:50,060 --> 00:07:54,199
we're starting to see some ground being

00:07:51,740 --> 00:07:56,779
gained by the repair movement the repair

00:07:54,199 --> 00:07:58,819
movement is a great thing we should be

00:07:56,779 --> 00:08:01,880
able to repair those devices especially

00:07:58,819 --> 00:08:04,520
phones if we were gonna spend 600 $700

00:08:01,880 --> 00:08:06,800
for a phone and the battery goes dead

00:08:04,520 --> 00:08:09,710
I'm sorry

00:08:06,800 --> 00:08:12,080
I am NOT going to buy a new phone simply

00:08:09,710 --> 00:08:14,539
because the battery can't be replaced

00:08:12,080 --> 00:08:16,460
inside of the phone we'll figure out a

00:08:14,539 --> 00:08:19,009
way to get in the phone and replace the

00:08:16,460 --> 00:08:20,779
battery and we'll do all of that again

00:08:19,009 --> 00:08:23,719
within the limits of whatever our

00:08:20,779 --> 00:08:25,520
jurisdiction may be there are going to

00:08:23,719 --> 00:08:27,440
be cases now this is something

00:08:25,520 --> 00:08:31,089
interesting and we found this happening

00:08:27,440 --> 00:08:35,089
more and more often it's referred to as

00:08:31,089 --> 00:08:37,880
archaeology now whether it is because

00:08:35,089 --> 00:08:41,270
somebody made a device and when they

00:08:37,880 --> 00:08:45,230
made the device they lost the engineer

00:08:41,270 --> 00:08:48,589
that made the device they left they

00:08:45,230 --> 00:08:50,690
forgot to document it the documentation

00:08:48,589 --> 00:08:51,329
was in a package that was installed on a

00:08:50,690 --> 00:08:53,129
server

00:08:51,329 --> 00:08:56,129
the server went buns up and they can't

00:08:53,129 --> 00:08:58,470
get to the package anymore or the same

00:08:56,129 --> 00:09:01,139
thing happens with software that I've

00:08:58,470 --> 00:09:02,929
had cases where they need to figure out

00:09:01,139 --> 00:09:06,660
what the software that they wrote

00:09:02,929 --> 00:09:08,610
actually does and it's often times many

00:09:06,660 --> 00:09:10,470
years after the development of the

00:09:08,610 --> 00:09:12,389
software and nobody remembers exactly

00:09:10,470 --> 00:09:14,999
what they did or how they did it and

00:09:12,389 --> 00:09:17,639
it's not documented and all those happy

00:09:14,999 --> 00:09:20,369
things those are all reasons why you

00:09:17,639 --> 00:09:22,110
might have to go in and take a look at

00:09:20,369 --> 00:09:25,199
an existing device to figure out what it

00:09:22,110 --> 00:09:27,269
does and how it works now there other

00:09:25,199 --> 00:09:30,119
possibility is you might be presented

00:09:27,269 --> 00:09:31,980
with a suspicious device let's assume

00:09:30,119 --> 00:09:34,410
something fell off a truck and showed up

00:09:31,980 --> 00:09:36,420
at your backdoor well what are you going

00:09:34,410 --> 00:09:38,040
to do with that device you're certainly

00:09:36,420 --> 00:09:43,350
not gonna plug it into your own network

00:09:38,040 --> 00:09:45,029
I hope you never can tell now in this

00:09:43,350 --> 00:09:46,790
particular case actually that picture

00:09:45,029 --> 00:09:49,649
that you see right over there that

00:09:46,790 --> 00:09:53,309
hotspot right there that's an actual

00:09:49,649 --> 00:09:56,999
chip under another chip that motherboard

00:09:53,309 --> 00:09:58,889
was specially modified by somebody that

00:09:56,999 --> 00:10:01,829
happened to come as a commercial device

00:09:58,889 --> 00:10:03,629
and when we popped open the box and

00:10:01,829 --> 00:10:05,879
started looking at it in an infrared we

00:10:03,629 --> 00:10:07,919
said wait a minute this chips a lot

00:10:05,879 --> 00:10:10,199
hotter than it's supposed to be I wonder

00:10:07,919 --> 00:10:11,669
what's here and you start taking a look

00:10:10,199 --> 00:10:13,739
at it it turned out somebody had

00:10:11,669 --> 00:10:17,309
actually hogged out a small space

00:10:13,739 --> 00:10:21,329
underneath the existing part and put

00:10:17,309 --> 00:10:23,309
something special there now obviously

00:10:21,329 --> 00:10:26,069
that kind of thing shouldn't happen all

00:10:23,309 --> 00:10:27,569
that often but it does and we're

00:10:26,069 --> 00:10:30,059
actually starting to see quite a bit

00:10:27,569 --> 00:10:33,049
more in the way of counterfeit equipment

00:10:30,059 --> 00:10:35,669
coming out of certain locations in Asia

00:10:33,049 --> 00:10:37,079
this counterfeit equipment some of it is

00:10:35,669 --> 00:10:39,480
really interesting you'll look at the

00:10:37,079 --> 00:10:41,879
real part and it has silver solder leads

00:10:39,480 --> 00:10:44,069
and the counterfeit part has copper

00:10:41,879 --> 00:10:45,809
solder leads and it's the only visible

00:10:44,069 --> 00:10:48,779
sign that you have that it's actually a

00:10:45,809 --> 00:10:51,360
counterfeit these kinds of things are

00:10:48,779 --> 00:10:54,959
starting to happen more and more general

00:10:51,360 --> 00:10:58,619
rule of thumb never buy anything off of

00:10:54,959 --> 00:11:01,420
ebay that you think is going to go into

00:10:58,619 --> 00:11:06,860
your corporate infrastructure

00:11:01,420 --> 00:11:09,170
just a suggestion now there may also be

00:11:06,860 --> 00:11:10,970
some special software on a device that

00:11:09,170 --> 00:11:14,900
you're concerned about whether that's

00:11:10,970 --> 00:11:17,360
malware spyware or gov where if you

00:11:14,900 --> 00:11:19,430
happen to be now 'whats gov where gov

00:11:17,360 --> 00:11:22,000
where happens to be something that we

00:11:19,430 --> 00:11:25,610
find in the german-speaking countries

00:11:22,000 --> 00:11:27,830
the Swiss have mega Panzer and the

00:11:25,610 --> 00:11:31,760
German government has one called r2d2

00:11:27,830 --> 00:11:34,220
and these are legitimate pieces of

00:11:31,760 --> 00:11:37,690
software that the government installs on

00:11:34,220 --> 00:11:40,550
your machine when you're mmm asleep and

00:11:37,690 --> 00:11:42,470
at that point in time they are key

00:11:40,550 --> 00:11:44,390
loggers and other things that they track

00:11:42,470 --> 00:11:45,620
you and see what you do and if you've

00:11:44,390 --> 00:11:47,240
been talking to people you're not

00:11:45,620 --> 00:11:50,330
supposed to talk to they will come

00:11:47,240 --> 00:11:52,850
knocking on your door and gsg-9 is very

00:11:50,330 --> 00:11:55,070
unfriendly with the mp5s as they kick in

00:11:52,850 --> 00:11:57,770
the door it's a general rule don't do

00:11:55,070 --> 00:12:01,339
that that would be bad but gov where is

00:11:57,770 --> 00:12:04,730
certainly a thing we have actually found

00:12:01,339 --> 00:12:09,320
one special thing that I can share with

00:12:04,730 --> 00:12:12,500
you there was a set of equipment from a

00:12:09,320 --> 00:12:15,800
large manufacturer of equipment of of

00:12:12,500 --> 00:12:18,290
computers and this particular large

00:12:15,800 --> 00:12:21,500
manufacturer had sold a whole bunch of

00:12:18,290 --> 00:12:23,990
computers to a defense contractor and

00:12:21,500 --> 00:12:27,680
the defense contractor as part of their

00:12:23,990 --> 00:12:30,560
normal modus operandi take the equipment

00:12:27,680 --> 00:12:33,440
and put it into a sandbox they basically

00:12:30,560 --> 00:12:35,720
put it into a small isolated Network

00:12:33,440 --> 00:12:40,490
Enclave and then they start Dorking

00:12:35,720 --> 00:12:44,360
around with time and sure enough after

00:12:40,490 --> 00:12:48,410
about six months of time it beaconed out

00:12:44,360 --> 00:12:51,320
and went back home to China and said

00:12:48,410 --> 00:12:54,110
hello they of course asked the

00:12:51,320 --> 00:12:58,100
manufacturer what was that the

00:12:54,110 --> 00:13:01,550
manufacturer said oh it came from the

00:12:58,100 --> 00:13:04,100
original design manufacturer that way so

00:13:01,550 --> 00:13:06,680
the fact that they were actually subbing

00:13:04,100 --> 00:13:08,950
the work out to a place in China that

00:13:06,680 --> 00:13:11,720
was doing all the biases and everything

00:13:08,950 --> 00:13:12,620
it was a weird situation we actually

00:13:11,720 --> 00:13:13,360
tracked it down a little bit further

00:13:12,620 --> 00:13:15,130
than that

00:13:13,360 --> 00:13:18,490
and what it turned out was they were

00:13:15,130 --> 00:13:22,420
using the system management mode on the

00:13:18,490 --> 00:13:25,269
x86 and in system management mode it's

00:13:22,420 --> 00:13:28,959
built specifically to allow you to take

00:13:25,269 --> 00:13:30,670
a look at you know temperature and power

00:13:28,959 --> 00:13:31,630
rails and things of that sort it's made

00:13:30,670 --> 00:13:34,390
for the server world

00:13:31,630 --> 00:13:37,779
it's a non-maskable interrupt so you

00:13:34,390 --> 00:13:39,850
can't turn it off and what was happening

00:13:37,779 --> 00:13:40,390
if you switched into system management

00:13:39,850 --> 00:13:43,750
mode

00:13:40,390 --> 00:13:47,320
there was a TCP stack in there and it

00:13:43,750 --> 00:13:50,110
was phoning home so little things like

00:13:47,320 --> 00:13:53,860
that yeah yeah you should probably keep

00:13:50,110 --> 00:13:56,410
an eye on them I always am suspicious of

00:13:53,860 --> 00:13:57,970
any new equipment that I get but I tend

00:13:56,410 --> 00:14:01,420
to be paranoid anyway at least that's

00:13:57,970 --> 00:14:03,880
what my wife will say all right so what

00:14:01,420 --> 00:14:06,160
kind of tools should you have in order

00:14:03,880 --> 00:14:09,970
to be able to just simply disassemble

00:14:06,160 --> 00:14:13,300
the device first of all you're going to

00:14:09,970 --> 00:14:16,329
need a Torx driver set Torx is one of

00:14:13,300 --> 00:14:17,970
the more you know popular weird screws

00:14:16,329 --> 00:14:21,070
that are used in a lot of these cases

00:14:17,970 --> 00:14:24,339
but you'll need screwdrivers and various

00:14:21,070 --> 00:14:26,860
sizes a precision utility knife not to

00:14:24,339 --> 00:14:29,290
use the trade name that you all know

00:14:26,860 --> 00:14:33,360
exact I mean yeah so we don't want to do

00:14:29,290 --> 00:14:36,399
that but a precision utility knife

00:14:33,360 --> 00:14:39,610
sputters these are basically little pry

00:14:36,399 --> 00:14:42,910
bars plastic pry bars guitar picks work

00:14:39,610 --> 00:14:47,110
really well suction cups small hex

00:14:42,910 --> 00:14:48,490
drivers thankfully thanks to the right

00:14:47,110 --> 00:14:50,769
to repair movement these are all

00:14:48,490 --> 00:14:53,410
available as a kit you can go to

00:14:50,769 --> 00:14:55,529
ifixit.com and you can get that little

00:14:53,410 --> 00:14:58,120
kit that you see there in the upper

00:14:55,529 --> 00:14:59,140
right hand corner that little thing

00:14:58,120 --> 00:15:01,209
right there

00:14:59,140 --> 00:15:03,519
that is a really incredible thing now

00:15:01,209 --> 00:15:05,350
one of the things that you don't really

00:15:03,519 --> 00:15:07,199
probably can't recognize is that little

00:15:05,350 --> 00:15:10,269
black thing that looks like a hot dog

00:15:07,199 --> 00:15:15,279
about that length that's a really cool

00:15:10,269 --> 00:15:16,449
device that is a piece of it's a you

00:15:15,279 --> 00:15:19,660
know a squishy

00:15:16,449 --> 00:15:21,640
it's a squishy slug like thing you put

00:15:19,660 --> 00:15:24,069
it in a microwave for about thirty

00:15:21,640 --> 00:15:26,700
seconds and it heats it up and then you

00:15:24,069 --> 00:15:28,920
slam it on the bat while you

00:15:26,700 --> 00:15:32,430
but you place it on the back of the

00:15:28,920 --> 00:15:34,860
device you're trying to unglue and what

00:15:32,430 --> 00:15:38,730
it does is it transfers enough heat to

00:15:34,860 --> 00:15:41,400
the glue to soften it so that you can

00:15:38,730 --> 00:15:44,970
then pull the back off of machines off

00:15:41,400 --> 00:15:47,190
of devices like mono iPhones that you're

00:15:44,970 --> 00:15:48,630
not supposed to pull back off of and

00:15:47,190 --> 00:15:50,070
that's also where the suction cups come

00:15:48,630 --> 00:15:53,910
in by the way you use suction cup to

00:15:50,070 --> 00:15:56,970
pull it apart those are all things that

00:15:53,910 --> 00:15:59,970
definitely handy to have another thing

00:15:56,970 --> 00:16:01,470
that you can do of course if you happen

00:15:59,970 --> 00:16:04,370
to have something that you know it has

00:16:01,470 --> 00:16:07,080
an adhesive in it of some sort heat guns

00:16:04,370 --> 00:16:09,330
if you happen to have solder equipment

00:16:07,080 --> 00:16:11,340
and you've got a heat gun that'll work

00:16:09,330 --> 00:16:14,660
blow dryers if you don't happen to have

00:16:11,340 --> 00:16:17,130
a heat gun or this microwavable gel

00:16:14,660 --> 00:16:19,530
you'll heat the adhesive up and then

00:16:17,130 --> 00:16:20,970
that will make it pliable enough that

00:16:19,530 --> 00:16:23,610
you can get the BOK that you can

00:16:20,970 --> 00:16:24,960
actually get the Box open another thing

00:16:23,610 --> 00:16:25,890
that's really handy and this is one of

00:16:24,960 --> 00:16:27,990
those things that you don't really

00:16:25,890 --> 00:16:31,440
realize until you get into the business

00:16:27,990 --> 00:16:33,600
and that is an inspection microscope you

00:16:31,440 --> 00:16:37,940
really need to be able to read those

00:16:33,600 --> 00:16:41,280
tiny little letters on certain parts and

00:16:37,940 --> 00:16:45,390
even with even with my bad eyes with

00:16:41,280 --> 00:16:47,400
three or four X magnification I still

00:16:45,390 --> 00:16:50,370
can't read them so these little

00:16:47,400 --> 00:16:52,290
inspection microscopes they're USB

00:16:50,370 --> 00:16:54,510
powered you can actually use them to

00:16:52,290 --> 00:16:55,980
take pictures of things so if you need

00:16:54,510 --> 00:16:57,330
to prove to somebody that it was a

00:16:55,980 --> 00:17:00,180
particular part you can actually take a

00:16:57,330 --> 00:17:02,940
picture of it and they go up to 600

00:17:00,180 --> 00:17:05,970
power magnification so does a really

00:17:02,940 --> 00:17:08,270
nice job and definitely it's handy to

00:17:05,970 --> 00:17:10,860
have one of these things around now

00:17:08,270 --> 00:17:12,480
electrical test equipment especially

00:17:10,860 --> 00:17:15,089
when we're trying to figure out exactly

00:17:12,480 --> 00:17:18,420
what kind of circuits are in the box and

00:17:15,089 --> 00:17:21,150
what voltages they're running a volt ohm

00:17:18,420 --> 00:17:23,579
meter is a must don't scrimp on these

00:17:21,150 --> 00:17:26,010
spend a little bit of money get a decent

00:17:23,579 --> 00:17:27,480
one they'll typically cost you a really

00:17:26,010 --> 00:17:29,540
good one will cost you anywhere from

00:17:27,480 --> 00:17:31,710
seventy to a hundred and fifty dollars

00:17:29,540 --> 00:17:33,360
the one that you used to get at the old

00:17:31,710 --> 00:17:36,330
radio shack for those of you who are old

00:17:33,360 --> 00:17:37,920
enough to remember Radio Shack the $9

00:17:36,330 --> 00:17:40,260
meter yeah now that

00:17:37,920 --> 00:17:42,930
doesn't work very well I still have some

00:17:40,260 --> 00:17:45,950
of those and you know I just use them to

00:17:42,930 --> 00:17:48,300
tease my robotic students here try this

00:17:45,950 --> 00:17:49,620
hello what's this meter what's this it

00:17:48,300 --> 00:17:51,240
was a little linear yeah you know it's

00:17:49,620 --> 00:17:59,510
got a little needle on it how do I read

00:17:51,240 --> 00:18:02,190
it the problem with LCD based meters is

00:17:59,510 --> 00:18:05,520
oftentimes the event that I'm looking

00:18:02,190 --> 00:18:09,900
for happened so quickly that it can't

00:18:05,520 --> 00:18:12,150
update the screen fast enough so there's

00:18:09,900 --> 00:18:13,620
a voltage change there but it's so quick

00:18:12,150 --> 00:18:17,340
that I can't tell what the voltage

00:18:13,620 --> 00:18:20,040
change was if that is the case and often

00:18:17,340 --> 00:18:22,590
times it is then we drop to a digital

00:18:20,040 --> 00:18:25,890
storage oscilloscope now if you're a

00:18:22,590 --> 00:18:28,170
software person go into your hardware

00:18:25,890 --> 00:18:30,450
developer one day and ask to hook up the

00:18:28,170 --> 00:18:32,130
digital storage oscilloscope and he will

00:18:30,450 --> 00:18:34,110
look at you like you have 2 heads and

00:18:32,130 --> 00:18:38,040
why do you even know what one of these

00:18:34,110 --> 00:18:42,870
things is let alone one i hook it up to

00:18:38,040 --> 00:18:43,890
something a DSO is a really handy

00:18:42,870 --> 00:18:46,710
application we'll see a couple of

00:18:43,890 --> 00:18:49,830
pictures of where I used a DSO to take a

00:18:46,710 --> 00:18:52,440
look at a signal and it turns out that

00:18:49,830 --> 00:18:54,150
yeah you can spend a lot of money on

00:18:52,440 --> 00:18:57,450
these things I mean Tech's got some

00:18:54,150 --> 00:18:58,970
wonderful scopes you know a 4 channel 2

00:18:57,450 --> 00:19:02,970
gigahertz scope that'll set you back

00:18:58,970 --> 00:19:05,250
$30,000 but the reality is 50 to 100

00:19:02,970 --> 00:19:07,170
megahertz that's good enough for most

00:19:05,250 --> 00:19:09,630
applications most of these kind of

00:19:07,170 --> 00:19:11,070
applications at least so that means you

00:19:09,630 --> 00:19:13,260
can probably pick up a couple hundred

00:19:11,070 --> 00:19:15,960
dollar scope and it'll do ok

00:19:13,260 --> 00:19:18,300
now some of the little PC scopes that

00:19:15,960 --> 00:19:19,800
are USB power and some of them are not

00:19:18,300 --> 00:19:21,780
quite fast enough because they're only

00:19:19,800 --> 00:19:25,350
in like the 5 megahertz 10 megahertz

00:19:21,780 --> 00:19:27,690
range usually 50 megahertz or so will

00:19:25,350 --> 00:19:29,450
allow you to catch most things that

00:19:27,690 --> 00:19:31,920
might be of interest

00:19:29,450 --> 00:19:34,290
another little gizmo that's handy to

00:19:31,920 --> 00:19:37,080
have is an 8 or 16 channel logic

00:19:34,290 --> 00:19:40,140
analyzer this one is one of the ones

00:19:37,080 --> 00:19:43,020
that is powered with USB this is my

00:19:40,140 --> 00:19:43,440
Sayle I've got a wonderful I love my

00:19:43,020 --> 00:19:46,980
Sayle

00:19:43,440 --> 00:19:49,110
it is a USB 3 I've got the Sayle pro

00:19:46,980 --> 00:19:51,060
version so it's got a USB 3 interface on

00:19:49,110 --> 00:19:51,630
it when you got to transfer a lot of

00:19:51,060 --> 00:19:54,330
data

00:19:51,630 --> 00:19:58,040
really really quick USB to doesn't cut

00:19:54,330 --> 00:20:00,870
it but USB 3 does a great job now

00:19:58,040 --> 00:20:02,640
another thing that's handy is a Sig rock

00:20:00,870 --> 00:20:05,430
compatible signal identification

00:20:02,640 --> 00:20:08,940
interface aka bus pirate or something

00:20:05,430 --> 00:20:10,620
similar these are often we'll use these

00:20:08,940 --> 00:20:12,780
as a way of just being able to try and

00:20:10,620 --> 00:20:16,320
identify the type of signal that it is

00:20:12,780 --> 00:20:19,680
is it a JTAG is it a serial port is it

00:20:16,320 --> 00:20:21,240
an I squared C what is it because if you

00:20:19,680 --> 00:20:23,550
start plugging things in without really

00:20:21,240 --> 00:20:26,210
knowing what it is you'll likely let the

00:20:23,550 --> 00:20:28,410
magic blue smoke escape and that's bad

00:20:26,210 --> 00:20:31,950
not to mention the fact they come and go

00:20:28,410 --> 00:20:36,300
what is that smell no I took a shower

00:20:31,950 --> 00:20:38,820
it's not me it's that thing ok now logic

00:20:36,300 --> 00:20:40,890
analyzers is protocol decoders most of

00:20:38,820 --> 00:20:43,740
the high-end logic analyzers these days

00:20:40,890 --> 00:20:47,190
have got protocol decode in them they've

00:20:43,740 --> 00:20:50,370
got I squared C spy CANbus asynchronous

00:20:47,190 --> 00:20:53,310
serial etc the tricky part of course is

00:20:50,370 --> 00:20:55,440
just identifying the signals also these

00:20:53,310 --> 00:20:57,420
devices tend to have their own

00:20:55,440 --> 00:21:00,840
limitation as to what kind of power you

00:20:57,420 --> 00:21:05,510
can put across them 5 volts is a maximum

00:21:00,840 --> 00:21:10,590
and we have seen 12 volt compatible u

00:21:05,510 --> 00:21:12,870
rs-232 interfaces so the old rs-232

00:21:10,590 --> 00:21:14,610
standard actually used to go to 12 volts

00:21:12,870 --> 00:21:17,520
and you'll find the equipment sometimes

00:21:14,610 --> 00:21:20,520
it still does so definitely you got to

00:21:17,520 --> 00:21:22,530
watch out for things like that and some

00:21:20,520 --> 00:21:25,320
of the really expensive units of these

00:21:22,530 --> 00:21:27,600
will decode both PCI Express and other

00:21:25,320 --> 00:21:28,800
high speed busses this particular one

00:21:27,600 --> 00:21:30,720
this happens to actually be from my

00:21:28,800 --> 00:21:34,890
Sayle the Sayle

00:21:30,720 --> 00:21:37,770
will do 10 mega samples per second or

00:21:34,890 --> 00:21:39,990
something like that so it's it's fast

00:21:37,770 --> 00:21:42,960
enough fast enough for most things now I

00:21:39,990 --> 00:21:46,440
have a couple of patents on doing video

00:21:42,960 --> 00:21:48,240
back up out of your video port back in

00:21:46,440 --> 00:21:51,390
the dark ages we used to do things like

00:21:48,240 --> 00:21:53,610
that and I had to use two high-speed

00:21:51,390 --> 00:21:55,860
ecologic to do that so two gigahertz

00:21:53,610 --> 00:21:57,870
logic analyzers and scopes where the

00:21:55,860 --> 00:21:59,900
empty mainframe of the logic analyzer

00:21:57,870 --> 00:22:02,850
nothing in it just the mainframe it's

00:21:59,900 --> 00:22:03,890
$35,000 so fortunately you don't have to

00:22:02,850 --> 00:22:06,350
have anywhere new

00:22:03,890 --> 00:22:08,390
that kind of investment in order to be

00:22:06,350 --> 00:22:12,320
able to do this by the way the Sayle the

00:22:08,390 --> 00:22:13,790
eight ports a li I think is 495 dollars

00:22:12,320 --> 00:22:16,660
something like that it's relatively

00:22:13,790 --> 00:22:19,460
inexpensive for what it is

00:22:16,660 --> 00:22:21,170
maybe that's the 16 is that this 495 the

00:22:19,460 --> 00:22:22,310
eight maybe a little bit cheaper I don't

00:22:21,170 --> 00:22:26,060
remember right offhand it's been a while

00:22:22,310 --> 00:22:28,370
since I bought mine okay so now now that

00:22:26,060 --> 00:22:29,750
we got all these tools collected now

00:22:28,370 --> 00:22:31,520
what's the thing that we want to do

00:22:29,750 --> 00:22:34,850
first of all we need to do a little bit

00:22:31,520 --> 00:22:36,830
of research we need to find out is there

00:22:34,850 --> 00:22:39,920
an original design manufacturer or

00:22:36,830 --> 00:22:43,610
someplace an OD M and if there is an OD

00:22:39,920 --> 00:22:46,760
M who is it for instance with laptops

00:22:43,610 --> 00:22:48,520
it's free it's common to find laptops

00:22:46,760 --> 00:22:52,520
made by a company called Cleve oh

00:22:48,520 --> 00:22:54,230
they'll be branded with Dell or HP or

00:22:52,520 --> 00:22:57,620
some other badge on the outside of them

00:22:54,230 --> 00:23:00,200
but they're actually made by cleveo why

00:22:57,620 --> 00:23:03,080
is that important well it's because

00:23:00,200 --> 00:23:05,000
you're looking for the FCC ID if you

00:23:03,080 --> 00:23:08,810
look in the device you will find

00:23:05,000 --> 00:23:10,070
somewhere an FCC ID associated with it

00:23:08,810 --> 00:23:11,600
now the Federal Communications

00:23:10,070 --> 00:23:14,300
Commission here in the United States has

00:23:11,600 --> 00:23:17,600
requirements for any device that could

00:23:14,300 --> 00:23:19,040
potentially emanate in these in the

00:23:17,600 --> 00:23:21,110
spectrum when they were doing a

00:23:19,040 --> 00:23:24,230
certification for a Class B or Class C

00:23:21,110 --> 00:23:25,850
type device they will have an FCC ID

00:23:24,230 --> 00:23:30,980
associated with them

00:23:25,850 --> 00:23:33,170
the FCC ID is you can look it up on FCC

00:23:30,980 --> 00:23:34,970
ID io among other places you can

00:23:33,170 --> 00:23:36,230
actually go to the FCC but it's so hard

00:23:34,970 --> 00:23:37,850
to find it there

00:23:36,230 --> 00:23:39,890
but there are other websites you can

00:23:37,850 --> 00:23:41,990
actually look up the FCC ID the

00:23:39,890 --> 00:23:45,230
advantage of finding the FCC ID is that

00:23:41,990 --> 00:23:48,560
you will find that a lot of devices use

00:23:45,230 --> 00:23:52,280
the exact same components in particular

00:23:48,560 --> 00:23:54,530
radios radios I actually talked to a

00:23:52,280 --> 00:23:56,930
manufacturer a Chinese manufacturer one

00:23:54,530 --> 00:23:59,420
time about what would it what where it's

00:23:56,930 --> 00:24:01,550
the break-even point for being able to

00:23:59,420 --> 00:24:03,620
make my own radio at what point does it

00:24:01,550 --> 00:24:06,140
make sense to do that and they go well

00:24:03,620 --> 00:24:07,520
after FCC certification and all the

00:24:06,140 --> 00:24:09,200
stuff the registration and everything

00:24:07,520 --> 00:24:12,560
you have to go through break-even point

00:24:09,200 --> 00:24:16,040
is about a million units for your own

00:24:12,560 --> 00:24:17,340
radio so what happens many manufacturers

00:24:16,040 --> 00:24:20,940
don't use their own

00:24:17,340 --> 00:24:23,820
radios manufacturers will go to manual

00:24:20,940 --> 00:24:26,370
to another vendor that has an already

00:24:23,820 --> 00:24:28,530
approved radio set and this already

00:24:26,370 --> 00:24:30,570
approved radio set has an FCC ID

00:24:28,530 --> 00:24:32,460
associated with it you'll look up the

00:24:30,570 --> 00:24:33,990
FCC ID and you find out it's the exact

00:24:32,460 --> 00:24:37,320
same radio that's being used and like

00:24:33,990 --> 00:24:39,540
ten other devices that's an advantage

00:24:37,320 --> 00:24:41,880
because one of those other devices may

00:24:39,540 --> 00:24:44,370
not necessarily be as locked down as the

00:24:41,880 --> 00:24:46,860
one you're looking at it may actually

00:24:44,370 --> 00:24:48,330
have more open source code associated

00:24:46,860 --> 00:24:50,250
with it there may actually be some

00:24:48,330 --> 00:24:53,040
u-boot versions and things of that sort

00:24:50,250 --> 00:24:54,690
floating around for the other units that

00:24:53,040 --> 00:24:56,850
you can then look at those and try to

00:24:54,690 --> 00:24:59,300
figure out what does that mean to me for

00:24:56,850 --> 00:25:01,890
this device that I'm having a look at

00:24:59,300 --> 00:25:03,150
another one which is kind of an odd one

00:25:01,890 --> 00:25:06,330
that you wouldn't normally think about

00:25:03,150 --> 00:25:09,030
and that is are there patents involved

00:25:06,330 --> 00:25:11,040
does the manufacturer of this particular

00:25:09,030 --> 00:25:11,660
device have any patents associated with

00:25:11,040 --> 00:25:14,580
it

00:25:11,660 --> 00:25:16,800
patents are a wonderful thing when you

00:25:14,580 --> 00:25:18,900
go to the US Patent and Trade Office or

00:25:16,800 --> 00:25:22,020
you go to the EU patent and trade

00:25:18,900 --> 00:25:24,840
offices you can the patents are public

00:25:22,020 --> 00:25:26,820
record and when you bring up the

00:25:24,840 --> 00:25:29,640
datasheet of the packet of the patent

00:25:26,820 --> 00:25:30,660
you will find all kinds of interesting

00:25:29,640 --> 00:25:35,280
stuff in there

00:25:30,660 --> 00:25:37,550
circuit diagrams box layouts which parts

00:25:35,280 --> 00:25:40,140
are being used for which motherboards

00:25:37,550 --> 00:25:43,410
there's all kinds of really cool stuff

00:25:40,140 --> 00:25:45,420
in patents and another one that you want

00:25:43,410 --> 00:25:48,570
to take a look at is who are the patent

00:25:45,420 --> 00:25:51,990
holders and see if you can find out any

00:25:48,570 --> 00:25:55,440
information about them the reason I say

00:25:51,990 --> 00:25:58,110
that is because when we get into the the

00:25:55,440 --> 00:26:00,690
disassembly of the protocol we'll find

00:25:58,110 --> 00:26:03,090
out that it was something specific to

00:26:00,690 --> 00:26:05,340
the patent holder that actually made its

00:26:03,090 --> 00:26:06,210
way into the protocol interesting

00:26:05,340 --> 00:26:08,730
problem with that

00:26:06,210 --> 00:26:10,340
so patents and a lot of people who are

00:26:08,730 --> 00:26:14,070
just starting to do reverse engineering

00:26:10,340 --> 00:26:16,080
forget to check the FCC IDs and forget

00:26:14,070 --> 00:26:19,470
to check the patents both of those are

00:26:16,080 --> 00:26:21,690
tremendous sources of information all

00:26:19,470 --> 00:26:23,300
right so now opening the case just

00:26:21,690 --> 00:26:26,190
opening the case can be a problem

00:26:23,300 --> 00:26:29,250
sometimes manufacturers will actually

00:26:26,190 --> 00:26:30,960
sonically weld the case and if they

00:26:29,250 --> 00:26:34,140
sonically weld the case get

00:26:30,960 --> 00:26:36,120
into it is a dremel that's one of those

00:26:34,140 --> 00:26:38,400
tools that I didn't mention before but

00:26:36,120 --> 00:26:43,140
sometimes it's handy to have a dremel

00:26:38,400 --> 00:26:45,360
just to cut through the case now what

00:26:43,140 --> 00:26:47,610
why do they make it so hard well

00:26:45,360 --> 00:26:49,320
sometimes they don't want you to see all

00:26:47,610 --> 00:26:50,790
the goodness that's inside in other

00:26:49,320 --> 00:26:52,740
cases they don't want you to see all the

00:26:50,790 --> 00:26:55,890
badness that's inside like that one

00:26:52,740 --> 00:26:58,770
right up there that is probably one of

00:26:55,890 --> 00:27:02,070
the worst solder jobs I have ever seen

00:26:58,770 --> 00:27:04,200
in a commercial device and that's

00:27:02,070 --> 00:27:06,830
actually considerably cleaned up over

00:27:04,200 --> 00:27:09,630
the first two versions that they made

00:27:06,830 --> 00:27:11,370
cold solder joints I mean it was just

00:27:09,630 --> 00:27:13,650
horrendous inside and you just go well

00:27:11,370 --> 00:27:15,630
if nothing else I might just fix it just

00:27:13,650 --> 00:27:19,820
while I'm here because I just I can't

00:27:15,630 --> 00:27:22,770
stand to look at such bad solder joints

00:27:19,820 --> 00:27:25,260
all right other techniques that are

00:27:22,770 --> 00:27:30,030
designed to keep the casual user out of

00:27:25,260 --> 00:27:32,670
their hardware one is special screws we

00:27:30,030 --> 00:27:36,060
see there a picture of the pentalobe

00:27:32,670 --> 00:27:39,240
screw that was one that Apple made that

00:27:36,060 --> 00:27:40,950
would keep you out of the iPhones turned

00:27:39,240 --> 00:27:42,720
out there were only two pentalobe screws

00:27:40,950 --> 00:27:46,320
in the iPhone it was in the base where

00:27:42,720 --> 00:27:48,780
the USB connector was but it was a

00:27:46,320 --> 00:27:52,800
special screw that they had custom-made

00:27:48,780 --> 00:27:57,990
and it took at least two weeks to fab

00:27:52,800 --> 00:28:01,920
one out of a 3d printed material so you

00:27:57,990 --> 00:28:04,080
know usually you'll see Torx Torx screws

00:28:01,920 --> 00:28:06,390
are very popular make sure you have a

00:28:04,080 --> 00:28:09,150
complete set of Torx especially the

00:28:06,390 --> 00:28:11,820
little tiny torques they are really

00:28:09,150 --> 00:28:15,240
tough to get a hold of and used a lot

00:28:11,820 --> 00:28:17,370
there is a secure Torx which has a

00:28:15,240 --> 00:28:18,960
little post in the middle of it that

00:28:17,370 --> 00:28:22,380
keeps a normal Torx screwdriver from

00:28:18,960 --> 00:28:26,430
going into it so if you go to you know a

00:28:22,380 --> 00:28:29,010
Fry's or you go to and not so much Best

00:28:26,430 --> 00:28:31,740
Buy but Micro Center some of those

00:28:29,010 --> 00:28:34,140
places they'll actually have security

00:28:31,740 --> 00:28:36,000
tool kits that have all these weird

00:28:34,140 --> 00:28:38,550
little screwdrivers inside of them

00:28:36,000 --> 00:28:41,460
definitely worth the 10 bucks that it

00:28:38,550 --> 00:28:43,260
costs to buy one of those the the tools

00:28:41,460 --> 00:28:44,310
themselves are not all that fantastic

00:28:43,260 --> 00:28:46,170
but when you

00:28:44,310 --> 00:28:48,210
something that's got I secure torques

00:28:46,170 --> 00:28:52,500
you need it you need it then and not

00:28:48,210 --> 00:28:54,870
have to go try and find it yeah yeah

00:28:52,500 --> 00:28:56,990
yeah absolutely they are now of course

00:28:54,870 --> 00:28:58,680
sometimes they'll use special adhesives

00:28:56,990 --> 00:29:00,270
that was what we were talking about

00:28:58,680 --> 00:29:01,770
earlier when you use the heat gun to

00:29:00,270 --> 00:29:03,980
kind of melt the adhesive down a little

00:29:01,770 --> 00:29:07,200
bit to make it a little more pliable

00:29:03,980 --> 00:29:09,780
anti-tamper sensors now anti-tamper

00:29:07,200 --> 00:29:11,580
sensors are really tricky what they'll

00:29:09,780 --> 00:29:14,520
have is a case that has some special

00:29:11,580 --> 00:29:16,590
switches inside of it that if you open

00:29:14,520 --> 00:29:21,300
the case it triggers the switch and

00:29:16,590 --> 00:29:23,820
zeros out the flash that is particularly

00:29:21,300 --> 00:29:26,910
troublesome we'll talk more about that

00:29:23,820 --> 00:29:30,360
in just a minute and the other trick

00:29:26,910 --> 00:29:33,420
that they they do is encasing the device

00:29:30,360 --> 00:29:37,470
in epoxy otherwise known as potting the

00:29:33,420 --> 00:29:40,260
device that's that black glue gooey

00:29:37,470 --> 00:29:41,730
thing that you see right there and they

00:29:40,260 --> 00:29:43,530
do that for several different reasons

00:29:41,730 --> 00:29:46,080
one of them is to keep you from figuring

00:29:43,530 --> 00:29:48,150
out what the circuit is other times it's

00:29:46,080 --> 00:29:51,000
to keep you from it keep it from getting

00:29:48,150 --> 00:29:52,770
wet if it is going to be in a moist

00:29:51,000 --> 00:29:55,380
environment we will want to keep the

00:29:52,770 --> 00:29:58,410
circuitry dry so they'll do an epoxy

00:29:55,380 --> 00:29:59,730
code like this or if you happen to be

00:29:58,410 --> 00:30:02,700
going into space

00:29:59,730 --> 00:30:05,340
it's called conformal coating and it'll

00:30:02,700 --> 00:30:07,830
keep your devices from outgassing we do

00:30:05,340 --> 00:30:09,390
a lot of work in the space world so it

00:30:07,830 --> 00:30:12,030
turns out that that happens quite a bit

00:30:09,390 --> 00:30:14,670
so you have to basically conformal coat

00:30:12,030 --> 00:30:16,380
it in order to get it you know keep it

00:30:14,670 --> 00:30:19,500
from outgassing and then blowing the

00:30:16,380 --> 00:30:23,390
chips up now dealing specifically with

00:30:19,500 --> 00:30:25,740
anti Stamper switches and potting any

00:30:23,390 --> 00:30:27,660
well-equipped reverse engineering shop

00:30:25,740 --> 00:30:30,870
we'll have an x-ray inspection

00:30:27,660 --> 00:30:33,150
capability so it's an x-ray machine and

00:30:30,870 --> 00:30:34,740
basically you just simply put the device

00:30:33,150 --> 00:30:36,570
under the x-ray and you take a look at

00:30:34,740 --> 00:30:40,020
it see what it looks like in the x-ray

00:30:36,570 --> 00:30:42,300
world that will typically let you know

00:30:40,020 --> 00:30:45,150
that there may in fact be some tamper

00:30:42,300 --> 00:30:47,900
switches inside of it one of the things

00:30:45,150 --> 00:30:51,120
we have found with tamper switches is

00:30:47,900 --> 00:30:54,150
liquid nitrogen does a great job at

00:30:51,120 --> 00:30:56,130
slowing them down you hit it with liquid

00:30:54,150 --> 00:30:57,900
nitrogen through the case

00:30:56,130 --> 00:31:00,450
then you pull the top off and the switch

00:30:57,900 --> 00:31:02,360
is now basically frozen you can now put

00:31:00,450 --> 00:31:04,800
tape on it and the switch won't trigger

00:31:02,360 --> 00:31:06,570
so liquid nitrogen is great to have

00:31:04,800 --> 00:31:08,430
around not only that but it's fun to

00:31:06,570 --> 00:31:11,670
play with and you can make great ice

00:31:08,430 --> 00:31:15,870
cream with it when you are when you're

00:31:11,670 --> 00:31:17,280
bored now potting that comes in several

00:31:15,870 --> 00:31:21,030
different varieties including the

00:31:17,280 --> 00:31:23,070
special polyesters and epoxy resins when

00:31:21,030 --> 00:31:24,300
you get to the potting you can actually

00:31:23,070 --> 00:31:26,340
kind of put your finger in it you

00:31:24,300 --> 00:31:29,820
determine whether it's a hard pot or

00:31:26,340 --> 00:31:32,670
soft and depending on the type of

00:31:29,820 --> 00:31:35,910
material that it's made from oftentimes

00:31:32,670 --> 00:31:38,100
heating will make it pliable so this is

00:31:35,910 --> 00:31:41,040
one of those cases where just putting it

00:31:38,100 --> 00:31:44,790
in an oven at about 200 250 degrees

00:31:41,040 --> 00:31:46,940
Fahrenheit will make the potting pliable

00:31:44,790 --> 00:31:51,930
enough that you can actually pry it off

00:31:46,940 --> 00:31:53,130
now be careful with this because as you

00:31:51,930 --> 00:31:56,580
heat this thing up first of all

00:31:53,130 --> 00:31:59,100
understand that you're using most likely

00:31:56,580 --> 00:32:02,030
today you're using Rojas solder so Rojas

00:31:59,100 --> 00:32:04,680
solder is a new type of solder lead-free

00:32:02,030 --> 00:32:08,820
but the melting point of Rojas solder is

00:32:04,680 --> 00:32:11,340
around 700 degrees Fahrenheit or so so

00:32:08,820 --> 00:32:13,860
you can heat the board up to about 250

00:32:11,340 --> 00:32:16,680
degrees Fahrenheit and it's not going to

00:32:13,860 --> 00:32:20,100
have any damage to the the actual solder

00:32:16,680 --> 00:32:22,430
in there the other thing that you may

00:32:20,100 --> 00:32:24,450
find is of course when you do that heat

00:32:22,430 --> 00:32:27,480
make sure you have it well ventilated

00:32:24,450 --> 00:32:28,860
because some of these epoxies have toxic

00:32:27,480 --> 00:32:31,200
fumes that come out of them when they

00:32:28,860 --> 00:32:34,230
start heating up so definitely watch out

00:32:31,200 --> 00:32:37,260
for that there are solvents that will

00:32:34,230 --> 00:32:38,580
often do this wd-40 actually does a

00:32:37,260 --> 00:32:40,370
pretty good job against several

00:32:38,580 --> 00:32:44,420
different types of epoxies

00:32:40,370 --> 00:32:47,820
dichloromethane nitric or sulfuric acid

00:32:44,420 --> 00:32:49,140
isopropanol all of those are types of

00:32:47,820 --> 00:32:52,320
materials that can be used to dissolve

00:32:49,140 --> 00:32:55,500
potting the problem with a lot of this

00:32:52,320 --> 00:32:58,710
stuff is it may require special permits

00:32:55,500 --> 00:33:00,390
in your jurisdiction you can't just

00:32:58,710 --> 00:33:03,930
simply call up and say hey I'd like to

00:33:00,390 --> 00:33:05,460
get a gallon of sulphuric acid they most

00:33:03,930 --> 00:33:07,170
of the chemical supply manufacturers

00:33:05,460 --> 00:33:08,269
take a dim view of that sort of thing

00:33:07,170 --> 00:33:10,700
and start asking a lot of

00:33:08,269 --> 00:33:12,320
questions why do you want sulphuric acid

00:33:10,700 --> 00:33:14,330
and what are you planning on doing with

00:33:12,320 --> 00:33:15,559
the sulphuric acid and when you start

00:33:14,330 --> 00:33:16,820
trying to explain to them that your

00:33:15,559 --> 00:33:18,259
reverse engineering a piece of

00:33:16,820 --> 00:33:21,109
government equipment they then take a

00:33:18,259 --> 00:33:23,869
dim view of that and they don't sip you

00:33:21,109 --> 00:33:25,339
the they don't ship it to you but nitric

00:33:23,869 --> 00:33:27,469
acid certainly is something you can

00:33:25,339 --> 00:33:29,869
typically get your hands on sulphuric a

00:33:27,469 --> 00:33:33,259
little bit harder this stuff that you

00:33:29,869 --> 00:33:36,679
see there called attack that is actually

00:33:33,259 --> 00:33:40,459
a pretty decent material it's not cheap

00:33:36,679 --> 00:33:43,759
that little leader can there is almost

00:33:40,459 --> 00:33:46,759
$100 but when you need it you need it

00:33:43,759 --> 00:33:50,209
and it'll actually do a really nice job

00:33:46,759 --> 00:33:53,629
of pretty much dissolving the material

00:33:50,209 --> 00:33:56,450
now when all else fails you'd go to cut

00:33:53,629 --> 00:33:59,570
and scrape cut and scrape is a dremel

00:33:56,450 --> 00:34:03,799
and a an exacto knife excuse me a

00:33:59,570 --> 00:34:06,739
precision utility knife and it's not

00:34:03,799 --> 00:34:10,159
pretty you see an example of it down

00:34:06,739 --> 00:34:12,289
there cut and scrape but unfortunately

00:34:10,159 --> 00:34:13,970
if you can't get the epoxy to melt any

00:34:12,289 --> 00:34:16,760
other way you may not have a choice

00:34:13,970 --> 00:34:19,369
and of course be careful as you're using

00:34:16,760 --> 00:34:22,250
the Dremel to scrape off you know sand

00:34:19,369 --> 00:34:24,799
off layers because sometimes it produces

00:34:22,250 --> 00:34:26,450
fumes sometimes the little particulate

00:34:24,799 --> 00:34:29,089
matter if it gets into your lungs is

00:34:26,450 --> 00:34:30,829
really bad stuff so make sure you wear a

00:34:29,089 --> 00:34:33,500
mask when you're doing this kind of

00:34:30,829 --> 00:34:35,240
stuff in general anytime you're messing

00:34:33,500 --> 00:34:38,329
around with the epoxies and polyester

00:34:35,240 --> 00:34:40,520
resins you want to wear a mask it's

00:34:38,329 --> 00:34:43,549
really pretty much generally nasty stuff

00:34:40,520 --> 00:34:45,470
all the way around now let's assume that

00:34:43,549 --> 00:34:47,990
we have managed to get ourselves into

00:34:45,470 --> 00:34:49,609
the device now that you got it out of

00:34:47,990 --> 00:34:51,909
the case let's take a look at the device

00:34:49,609 --> 00:34:55,760
to see if you can identify the parts

00:34:51,909 --> 00:34:57,380
oftentimes if you look at the parts some

00:34:55,760 --> 00:35:01,089
cases they actually I've had

00:34:57,380 --> 00:35:05,720
manufacturers black out the part number

00:35:01,089 --> 00:35:06,920
with you know a sharpie other cases and

00:35:05,720 --> 00:35:08,450
if you hit it with just the right light

00:35:06,920 --> 00:35:10,099
especially if you're in different

00:35:08,450 --> 00:35:11,390
modalities like infrared you can usually

00:35:10,099 --> 00:35:15,859
read it even though they've marked it

00:35:11,390 --> 00:35:18,500
out with a sharpie or if you I have seen

00:35:15,859 --> 00:35:21,259
them actually scrape the part numbers

00:35:18,500 --> 00:35:22,070
off to try and keep you from figuring it

00:35:21,259 --> 00:35:23,780
out and

00:35:22,070 --> 00:35:26,450
again in that case a little bit of

00:35:23,780 --> 00:35:27,920
nitric acid will usually bring the park

00:35:26,450 --> 00:35:31,370
number back up so you can figure out

00:35:27,920 --> 00:35:33,410
what it was that's you know so being

00:35:31,370 --> 00:35:36,170
able to read the part numbers is easier

00:35:33,410 --> 00:35:38,210
said than done but if you can't identify

00:35:36,170 --> 00:35:41,000
the part numbers try to get a hold of

00:35:38,210 --> 00:35:42,620
the data sheets in some cases the

00:35:41,000 --> 00:35:44,330
manufacturers will be more than happy to

00:35:42,620 --> 00:35:46,490
give you the datasheet Marvell give you

00:35:44,330 --> 00:35:48,470
a data sheet or Atmel or one of those

00:35:46,490 --> 00:35:51,560
guys will give you a data sheet others

00:35:48,470 --> 00:35:53,210
not so keen on giving data sheets Intel

00:35:51,560 --> 00:35:57,350
for instance anybody from Intel in here

00:35:53,210 --> 00:35:58,940
I'm sorry Intel if you want to get data

00:35:57,350 --> 00:36:02,240
sheets from Intel it requires your

00:35:58,940 --> 00:36:05,120
firstborn child and you then have this

00:36:02,240 --> 00:36:07,790
book that is basically handcuffed to you

00:36:05,120 --> 00:36:09,260
and you can't go anywhere you can't

00:36:07,790 --> 00:36:11,540
leave the book because the book gets

00:36:09,260 --> 00:36:13,010
lonely and you know you have to carry it

00:36:11,540 --> 00:36:15,200
with you all the time it really is kind

00:36:13,010 --> 00:36:18,680
of a nuisance in some of the cases for

00:36:15,200 --> 00:36:21,010
some of their parts but absolutely take

00:36:18,680 --> 00:36:23,540
advantage of tear down sites like iFixit

00:36:21,010 --> 00:36:24,920
they have already done if they've

00:36:23,540 --> 00:36:27,020
already done the teardown for you that's

00:36:24,920 --> 00:36:29,870
fantastic saves a lot of time and effort

00:36:27,020 --> 00:36:31,460
in some cases they'll even identify some

00:36:29,870 --> 00:36:33,440
of the really weird chips you know it's

00:36:31,460 --> 00:36:35,630
a samsung part that's not commercially

00:36:33,440 --> 00:36:38,840
available it's only available for

00:36:35,630 --> 00:36:40,460
company XYZ and they'll give you a

00:36:38,840 --> 00:36:42,560
little bit of more of additional

00:36:40,460 --> 00:36:45,920
information about it so that's really

00:36:42,560 --> 00:36:48,280
handy if you can get a hold of that now

00:36:45,920 --> 00:36:50,720
getting that sample data sheet is

00:36:48,280 --> 00:36:52,250
important and the reason it's important

00:36:50,720 --> 00:36:55,040
is because it'll tell you capabilities

00:36:52,250 --> 00:36:58,160
of the part of the major chips that you

00:36:55,040 --> 00:37:00,200
may need to know for instance in this

00:36:58,160 --> 00:37:02,150
particular case we were doing a work we

00:37:00,200 --> 00:37:05,830
were doing a job that used an ABR

00:37:02,150 --> 00:37:08,090
it had an 18 mega processor in it and

00:37:05,830 --> 00:37:09,470
the fact that we were able to take a

00:37:08,090 --> 00:37:10,820
look at the data sheets and find out

00:37:09,470 --> 00:37:12,790
that there were actually two serial

00:37:10,820 --> 00:37:15,050
ports involved in that particular part

00:37:12,790 --> 00:37:16,700
we then could figure out a little bit

00:37:15,050 --> 00:37:19,540
more about what the serial ports were

00:37:16,700 --> 00:37:22,220
doing what they were up to with them

00:37:19,540 --> 00:37:25,670
additionally they may will they may very

00:37:22,220 --> 00:37:26,750
well talk about spy flash interfaces and

00:37:25,670 --> 00:37:30,080
things of that sort to give you an idea

00:37:26,750 --> 00:37:32,060
of how the board is supposed to boot and

00:37:30,080 --> 00:37:33,890
then if it's a spy flash we can then

00:37:32,060 --> 00:37:35,480
hook onto the spy flash and try to read

00:37:33,890 --> 00:37:37,550
the flash directly

00:37:35,480 --> 00:37:39,920
but more importantly it gives you some

00:37:37,550 --> 00:37:44,150
information about voltage levels logic

00:37:39,920 --> 00:37:46,160
voltage levels we see today we don't see

00:37:44,150 --> 00:37:48,200
much in the way a 5 volt anymore it's

00:37:46,160 --> 00:37:53,330
usually 3.3 volts or even all the way

00:37:48,200 --> 00:37:54,950
down to 1.8 or 1.2 volt the logic so you

00:37:53,330 --> 00:37:56,780
definitely need to do a little bit of

00:37:54,950 --> 00:38:00,920
homework there because if you try to

00:37:56,780 --> 00:38:03,740
plug in a 5 volt rs-232 port into a 3.3

00:38:00,920 --> 00:38:07,490
volt logic level poor and it'll toast it

00:38:03,740 --> 00:38:09,859
so definitely a bad thing data sheets

00:38:07,490 --> 00:38:11,720
may also outline a lot of information

00:38:09,859 --> 00:38:14,510
about the algorithms that the part

00:38:11,720 --> 00:38:17,960
supports if it supports things like

00:38:14,510 --> 00:38:19,970
CRC's or anything special that may be

00:38:17,960 --> 00:38:21,560
built into the hardware sometimes the

00:38:19,970 --> 00:38:24,890
manufacturers will take advantage of

00:38:21,560 --> 00:38:26,300
that and it will explain a lot of what

00:38:24,890 --> 00:38:29,090
you're seeing when you're looking at it

00:38:26,300 --> 00:38:32,080
on the oscilloscope alright

00:38:29,090 --> 00:38:34,340
so now repopulating the interfaces of

00:38:32,080 --> 00:38:36,170
course a lot of manufacturers will

00:38:34,340 --> 00:38:40,730
depopulate the debug in the serial

00:38:36,170 --> 00:38:42,350
interfaces so the JTAG interfaces in

00:38:40,730 --> 00:38:45,260
particular will be depopulated at a

00:38:42,350 --> 00:38:47,720
minimum sometimes you'll find the serial

00:38:45,260 --> 00:38:49,970
ports are depopulated as well

00:38:47,720 --> 00:38:52,790
JTAG interfaces often have a pretty

00:38:49,970 --> 00:38:56,109
familiar look about them so it'll be a

00:38:52,790 --> 00:38:58,580
10 pin or a 14 pin or a 20 pin connector

00:38:56,109 --> 00:39:01,640
those kinds of things kind of stick out

00:38:58,580 --> 00:39:05,660
on the board and they're fairly easy to

00:39:01,640 --> 00:39:08,660
find also again kind of a caution here

00:39:05,660 --> 00:39:10,490
about the the logic voltage levels in

00:39:08,660 --> 00:39:14,050
this particular case we put this scope

00:39:10,490 --> 00:39:16,910
on it if you use a digital signal

00:39:14,050 --> 00:39:20,900
storage oscilloscope digital storage

00:39:16,910 --> 00:39:23,450
oscilloscope we have high-voltage probes

00:39:20,900 --> 00:39:25,130
that are available for that so when you

00:39:23,450 --> 00:39:26,690
put that on the circuit and you're

00:39:25,130 --> 00:39:28,700
taking a look at it you know you're not

00:39:26,690 --> 00:39:30,770
going to toast the scope and the scope

00:39:28,700 --> 00:39:32,570
is made to be able to sample the the

00:39:30,770 --> 00:39:34,130
voltage level so will be able to see it

00:39:32,570 --> 00:39:35,869
in this particular case for this one

00:39:34,130 --> 00:39:39,290
this is actually looking at a

00:39:35,869 --> 00:39:41,210
communications channel and what you're

00:39:39,290 --> 00:39:45,260
seeing there are ones and zeros going

00:39:41,210 --> 00:39:46,910
across and also because of what what it

00:39:45,260 --> 00:39:48,810
looks like if you actually could see it

00:39:46,910 --> 00:39:51,960
very well you'd see that that is 3

00:39:48,810 --> 00:39:54,180
a little bit over 3 1 volt markings so

00:39:51,960 --> 00:39:58,680
we were looking at 3.3 volt logic in

00:39:54,180 --> 00:40:01,020
this particular case also of course a

00:39:58,680 --> 00:40:02,640
signal tester like a bus pirate can

00:40:01,020 --> 00:40:04,200
oftentimes determine what kind of signal

00:40:02,640 --> 00:40:05,910
it is whether it's a serial port or a

00:40:04,200 --> 00:40:07,230
JTAG or something along those lines

00:40:05,910 --> 00:40:11,130
they actually have some pretty decent

00:40:07,230 --> 00:40:12,930
tutorials for bus pirates and similar

00:40:11,130 --> 00:40:16,830
sorts of devices and of course sig ROC

00:40:12,930 --> 00:40:18,540
dot org is a great site for kind of

00:40:16,830 --> 00:40:21,060
information about how to do this kind of

00:40:18,540 --> 00:40:24,000
signal analysis of course for those of

00:40:21,060 --> 00:40:26,220
us who do board ports where we're trying

00:40:24,000 --> 00:40:28,740
to port Linux or VxWorks or some other

00:40:26,220 --> 00:40:30,600
operating system to a new platform we

00:40:28,740 --> 00:40:31,920
need these kinds of things because we

00:40:30,600 --> 00:40:33,900
need to be able to see what the circuits

00:40:31,920 --> 00:40:36,720
are actually doing and whether or not

00:40:33,900 --> 00:40:39,090
our our code is actually doing what it's

00:40:36,720 --> 00:40:42,360
supposed to do so definitely really

00:40:39,090 --> 00:40:46,080
handy to have this kind of stuff

00:40:42,360 --> 00:40:47,670
now other cases will actually see a lot

00:40:46,080 --> 00:40:50,150
of examples here are some examples of

00:40:47,670 --> 00:40:52,860
devices that have had to be repopulated

00:40:50,150 --> 00:40:57,630
that's a router up there and it turns

00:40:52,860 --> 00:40:59,520
out that they had four pins normally for

00:40:57,630 --> 00:41:02,030
a serial port you'll have transmit

00:40:59,520 --> 00:41:04,560
receiving ground so that's three pins

00:41:02,030 --> 00:41:07,650
occasionally you will find a power pin

00:41:04,560 --> 00:41:09,480
sitting next to it so again this is one

00:41:07,650 --> 00:41:11,580
of those okay make sure you test the

00:41:09,480 --> 00:41:13,500
pins before you start plugging anything

00:41:11,580 --> 00:41:17,010
in to know which one is the power and

00:41:13,500 --> 00:41:19,680
which one is the ground UART serials J

00:41:17,010 --> 00:41:21,300
tags I mean here we see this particular

00:41:19,680 --> 00:41:24,060
one over here happens to be a JTAG

00:41:21,300 --> 00:41:27,240
signal we have another serial port in

00:41:24,060 --> 00:41:28,950
here this is the pocket beagle if you

00:41:27,240 --> 00:41:30,330
look on the back of the pocket beagle

00:41:28,950 --> 00:41:34,470
they actually have a JTAG interface

00:41:30,330 --> 00:41:36,750
there now this connector that you see

00:41:34,470 --> 00:41:40,380
this is referred to as a needle

00:41:36,750 --> 00:41:41,640
connector or a pogo pen connector the

00:41:40,380 --> 00:41:43,230
little pins that you see there are

00:41:41,640 --> 00:41:45,930
spring-loaded which is why they call

00:41:43,230 --> 00:41:48,090
them pogo pins and what you'll do is

00:41:45,930 --> 00:41:51,540
there are a couple of holes on either

00:41:48,090 --> 00:41:53,700
side and you clip this thing in and then

00:41:51,540 --> 00:41:57,829
it stays in contact with the connector

00:41:53,700 --> 00:42:00,470
so we see this being used a lot in

00:41:57,829 --> 00:42:02,970
microcontrollers so whether it's an arm

00:42:00,470 --> 00:42:05,339
cortex-m three cortex m4 type

00:42:02,970 --> 00:42:07,670
microcontroller oftentimes they will

00:42:05,339 --> 00:42:11,309
have some of these pogo pins

00:42:07,670 --> 00:42:13,920
additionally we're starting to see more

00:42:11,309 --> 00:42:18,270
prevalent prevalence of serial wire

00:42:13,920 --> 00:42:21,720
debug swd swd is basically JTAG but it

00:42:18,270 --> 00:42:24,599
only requires two pins instead of 1140

00:42:21,720 --> 00:42:27,839
9.1 I Triple E 11 49.1 I think is 11

00:42:24,599 --> 00:42:30,930
49.7 so they have a specification for

00:42:27,839 --> 00:42:33,089
this thing generally the serial wire

00:42:30,930 --> 00:42:34,829
debug is targeted at microcontrollers

00:42:33,089 --> 00:42:37,289
but we're starting to see it now on some

00:42:34,829 --> 00:42:40,589
of the larger ARM Cortex a parts as well

00:42:37,289 --> 00:42:43,890
so and if we had a requirement for

00:42:40,589 --> 00:42:47,339
serial wire output which is basically a

00:42:43,890 --> 00:42:49,049
print line it's a serial port that

00:42:47,339 --> 00:42:52,650
requires just one more pen so in three

00:42:49,049 --> 00:42:55,289
pens we can absolutely get a basically

00:42:52,650 --> 00:42:58,680
debug interface etc now some of the

00:42:55,289 --> 00:43:01,530
manufacturers will actually blow the e

00:42:58,680 --> 00:43:04,950
fuses so what the heck is a Neve Hughes

00:43:01,530 --> 00:43:08,250
and effuse is an electrical fuse that's

00:43:04,950 --> 00:43:10,140
on the chip itself and when they blow

00:43:08,250 --> 00:43:13,289
the e fuse it basically breaks the

00:43:10,140 --> 00:43:17,190
connection to the debugger if they blown

00:43:13,289 --> 00:43:20,579
the e fuses the only way to fix those is

00:43:17,190 --> 00:43:21,720
to D cap the chip and with a laser you

00:43:20,579 --> 00:43:25,740
spot-weld

00:43:21,720 --> 00:43:27,599
the e fuse back in place that clearly is

00:43:25,740 --> 00:43:30,210
not something that the typical user has

00:43:27,599 --> 00:43:31,859
at home because they basically have to

00:43:30,210 --> 00:43:33,809
cut the top off the chip and then look

00:43:31,859 --> 00:43:35,730
at it in an electron microscope figure

00:43:33,809 --> 00:43:38,279
out where the fuse is and zap it and

00:43:35,730 --> 00:43:40,079
bring the fuse back so that's not

00:43:38,279 --> 00:43:42,599
something that most people people can do

00:43:40,079 --> 00:43:45,539
but nonetheless hopefully you don't get

00:43:42,599 --> 00:43:48,720
to that level now here we actually see

00:43:45,539 --> 00:43:51,210
two connectors side-by-side one of them

00:43:48,720 --> 00:43:53,309
is a 14 pin connector and the other is a

00:43:51,210 --> 00:43:56,160
10 pin connector the 10 pin connector

00:43:53,309 --> 00:43:58,829
happens to be two serial ports the 14

00:43:56,160 --> 00:44:00,990
pin connectors to JTAG you will also

00:43:58,829 --> 00:44:03,329
notice that they all the holes are nice

00:44:00,990 --> 00:44:06,210
and neatly filled in in the wave solder

00:44:03,329 --> 00:44:07,529
so when we get ready to repopulate the

00:44:06,210 --> 00:44:09,210
connector we're gonna have to get

00:44:07,529 --> 00:44:09,880
through that and actually solder the

00:44:09,210 --> 00:44:12,850
thing back

00:44:09,880 --> 00:44:15,340
so that can be a little tricky all right

00:44:12,850 --> 00:44:17,350
so now why bother repopulating the

00:44:15,340 --> 00:44:18,730
interfaces well of course for serial

00:44:17,350 --> 00:44:22,090
ports the goal is to be able to watch

00:44:18,730 --> 00:44:24,130
the boot cycle we want to know what this

00:44:22,090 --> 00:44:25,630
thing does during the boot cycle we want

00:44:24,130 --> 00:44:27,790
to know if it's using you boot we want

00:44:25,630 --> 00:44:32,110
to know if it's using some custom home

00:44:27,790 --> 00:44:34,210
rolled boot loader of course for JTAG

00:44:32,110 --> 00:44:35,830
and serial wire debug the goal here is

00:44:34,210 --> 00:44:38,380
to be able to read the firmware out of

00:44:35,830 --> 00:44:40,180
the boot flesh we want to be able to

00:44:38,380 --> 00:44:41,620
grab all of the firmware because that's

00:44:40,180 --> 00:44:43,240
going to have some interesting binary

00:44:41,620 --> 00:44:44,650
blobs in it that we probably want to

00:44:43,240 --> 00:44:45,910
take a look at and we'll show you an

00:44:44,650 --> 00:44:48,700
example what that looks like here in a

00:44:45,910 --> 00:44:50,620
moment now once you have the firmware

00:44:48,700 --> 00:44:53,290
you can now start the reverse

00:44:50,620 --> 00:44:55,900
engineering of the boot code which

00:44:53,290 --> 00:44:58,420
bootloader is it using is there a device

00:44:55,900 --> 00:45:00,460
tree blob of course for those of you who

00:44:58,420 --> 00:45:02,080
do a lot of work with a Linux kernel you

00:45:00,460 --> 00:45:03,850
know how important it is to get that

00:45:02,080 --> 00:45:06,630
device tree blob if you don't have the

00:45:03,850 --> 00:45:08,860
blob man your life is living hell so

00:45:06,630 --> 00:45:11,010
being able to pull the device tree blob

00:45:08,860 --> 00:45:14,350
out of the firmware can save you a

00:45:11,010 --> 00:45:15,910
tremendous amount of time obviously if

00:45:14,350 --> 00:45:18,190
you're trying to upgrade the device

00:45:15,910 --> 00:45:20,350
let's say it had a 2/6 kernel on it and

00:45:18,190 --> 00:45:21,880
now you want to move to 414 kernel

00:45:20,350 --> 00:45:23,680
you're gonna have to have the device

00:45:21,880 --> 00:45:26,680
drop blobs because they started using

00:45:23,680 --> 00:45:29,410
device blobs in about the 3 10 3 14 time

00:45:26,680 --> 00:45:31,000
frame so in order to move up to a

00:45:29,410 --> 00:45:34,150
significantly newer kernel you're gonna

00:45:31,000 --> 00:45:35,950
have to figure that out for those of you

00:45:34,150 --> 00:45:38,020
don't know what the device tree blob is

00:45:35,950 --> 00:45:40,150
it's basically a way of describing the

00:45:38,020 --> 00:45:42,010
motherboard and the components that are

00:45:40,150 --> 00:45:44,500
on the motherboard so you'll know

00:45:42,010 --> 00:45:45,490
exactly there's two serial ports located

00:45:44,500 --> 00:45:48,400
at this address

00:45:45,490 --> 00:45:50,380
there is tiempo megabytes worth a memory

00:45:48,400 --> 00:45:52,510
located at this address there's an I

00:45:50,380 --> 00:45:54,850
squared C there's a spy bus all that

00:45:52,510 --> 00:45:56,860
sort of business GPIO s all that will be

00:45:54,850 --> 00:45:58,030
laid out in the device tree blob so if

00:45:56,860 --> 00:46:01,150
you can get a hold of the device tree

00:45:58,030 --> 00:46:03,010
blob that's a huge win and of course

00:46:01,150 --> 00:46:04,870
which OS is it using it may not

00:46:03,010 --> 00:46:09,310
necessarily be using Linux it could be

00:46:04,870 --> 00:46:12,580
using VxWorks or free artists or some

00:46:09,310 --> 00:46:14,650
other flavor out there and if you find

00:46:12,580 --> 00:46:16,840
out that it's using something like Linux

00:46:14,650 --> 00:46:19,060
then which version of Linux is it

00:46:16,840 --> 00:46:21,370
there's been significant changes between

00:46:19,060 --> 00:46:22,070
the two 6 kernel and the 4 4 kernels so

00:46:21,370 --> 00:46:24,650
you know

00:46:22,070 --> 00:46:26,360
as a consequence knowing which version

00:46:24,650 --> 00:46:29,080
of the kernel it was running is a huge

00:46:26,360 --> 00:46:32,570
thing to be able to take into account

00:46:29,080 --> 00:46:35,240
now another thing is of course being

00:46:32,570 --> 00:46:37,640
able to repopulate the interfaces and

00:46:35,240 --> 00:46:39,380
use a JTAG read the flash and get

00:46:37,640 --> 00:46:41,840
yourself a hold of the binary that's all

00:46:39,380 --> 00:46:43,670
very sexy and wow that's very incredible

00:46:41,840 --> 00:46:46,640
you were able to do that but sometimes

00:46:43,670 --> 00:46:48,890
it's not that hard sometimes you just go

00:46:46,640 --> 00:46:53,330
to the manufacturers website and they

00:46:48,890 --> 00:46:55,550
will have updated firmware or even old

00:46:53,330 --> 00:46:57,290
firmware if it's an older device they'll

00:46:55,550 --> 00:46:59,720
have the firmware setting out there and

00:46:57,290 --> 00:47:01,460
you can download it and when you

00:46:59,720 --> 00:47:02,990
download the firmware well okay now I

00:47:01,460 --> 00:47:04,700
just saved myself all the trouble of

00:47:02,990 --> 00:47:05,750
repopulating the J tags and all that

00:47:04,700 --> 00:47:09,680
sort of business that I have the

00:47:05,750 --> 00:47:12,110
firmware if you do have a case for

00:47:09,680 --> 00:47:14,750
firmware update then download it take a

00:47:12,110 --> 00:47:16,550
look see what's in it and we'll show you

00:47:14,750 --> 00:47:19,100
some tools that help you do some

00:47:16,550 --> 00:47:20,570
dissecting of that here in a moment but

00:47:19,100 --> 00:47:22,010
dependent depending on the vendor you

00:47:20,570 --> 00:47:25,370
might just be able to download the

00:47:22,010 --> 00:47:27,020
update directly occasionally they will

00:47:25,370 --> 00:47:29,840
require you to actually do the update

00:47:27,020 --> 00:47:31,220
through the device so if they're going

00:47:29,840 --> 00:47:32,930
to do it through the device then make

00:47:31,220 --> 00:47:34,730
sure you've got your Wireshark turned on

00:47:32,930 --> 00:47:37,190
so you can capture all the packets that

00:47:34,730 --> 00:47:39,620
go through and reconstitute the actual

00:47:37,190 --> 00:47:41,240
firmware image from the packets that got

00:47:39,620 --> 00:47:43,400
transferred in order to download it to

00:47:41,240 --> 00:47:45,890
the device a little bit trickier to do

00:47:43,400 --> 00:47:48,980
that but certainly if you are dedicated

00:47:45,890 --> 00:47:52,190
it's not that hard alright so now that I

00:47:48,980 --> 00:47:55,400
have the image here we have an example

00:47:52,190 --> 00:47:58,850
of this little guy right here this is an

00:47:55,400 --> 00:48:01,850
action tech mi4 24 this one happens to

00:47:58,850 --> 00:48:04,340
be I think this is a rev for something

00:48:01,850 --> 00:48:07,910
rev G maybe but it's one of them that I

00:48:04,340 --> 00:48:10,000
had laying around the house because you

00:48:07,910 --> 00:48:12,260
know Verizon forced me to upgrade and

00:48:10,000 --> 00:48:13,580
therefore I had this extra router

00:48:12,260 --> 00:48:16,310
sitting there as I might as well do

00:48:13,580 --> 00:48:19,040
something with it and when we took a

00:48:16,310 --> 00:48:21,530
look at the firmware we actually found

00:48:19,040 --> 00:48:23,420
that action tech does not supply the

00:48:21,530 --> 00:48:27,020
firmware because it was developed

00:48:23,420 --> 00:48:28,790
specifically for Verizon and as a

00:48:27,020 --> 00:48:31,280
consequence we had to go poking around

00:48:28,790 --> 00:48:34,070
in other places to try and find a copy

00:48:31,280 --> 00:48:35,150
of the firmware we finally did it

00:48:34,070 --> 00:48:37,160
actually only took us about

00:48:35,150 --> 00:48:39,260
so to research and find out where the

00:48:37,160 --> 00:48:41,840
firmware was and then we downloaded the

00:48:39,260 --> 00:48:43,640
firmware having the firmware now you'll

00:48:41,840 --> 00:48:46,010
notice that this is in a weird format a

00:48:43,640 --> 00:48:47,000
dot RMT format which is some sort of

00:48:46,010 --> 00:48:49,520
remote format

00:48:47,000 --> 00:48:50,810
it's a strange format doesn't correspond

00:48:49,520 --> 00:48:54,590
to anything it's something that's

00:48:50,810 --> 00:48:56,870
proprietary but that's okay because it

00:48:54,590 --> 00:48:59,300
turns out that our good friend Ben walk

00:48:56,870 --> 00:49:01,970
and if you're not familiar with Ben walk

00:48:59,300 --> 00:49:03,680
then walk is a great tool for looking at

00:49:01,970 --> 00:49:05,540
binaries and kind of walking through the

00:49:03,680 --> 00:49:08,600
binary to try and find out what's in it

00:49:05,540 --> 00:49:11,080
we took a look at Ben walk and sure

00:49:08,600 --> 00:49:13,970
enough there's a u boot header out there

00:49:11,080 --> 00:49:18,260
which identified the type of processor

00:49:13,970 --> 00:49:20,810
it was and exactly what kind of kernel

00:49:18,260 --> 00:49:22,490
it was running then we saw gzip

00:49:20,810 --> 00:49:26,050
compressed data segment which is

00:49:22,490 --> 00:49:29,840
probably going to be something like oh

00:49:26,050 --> 00:49:32,330
you know cram FS or some other sort of

00:49:29,840 --> 00:49:35,690
compressed file system and then we found

00:49:32,330 --> 00:49:37,730
that there was a wide wide area network

00:49:35,690 --> 00:49:40,220
firmware interface sitting out there

00:49:37,730 --> 00:49:41,450
that if we were really interested in

00:49:40,220 --> 00:49:43,640
going a little bit further in there we

00:49:41,450 --> 00:49:45,770
would have dug into that landcom

00:49:43,640 --> 00:49:47,810
firmware interface to try and figure out

00:49:45,770 --> 00:49:49,760
what was in there but we will see that

00:49:47,810 --> 00:49:51,440
we didn't really have to get that far in

00:49:49,760 --> 00:49:56,720
order to be able to do some interesting

00:49:51,440 --> 00:49:59,990
stuff here now once we know where the

00:49:56,720 --> 00:50:03,590
edges are of the different images now we

00:49:59,990 --> 00:50:07,280
can use a tool like DD to simply extract

00:50:03,590 --> 00:50:08,900
the pieces out so here's an example of

00:50:07,280 --> 00:50:11,810
separating the pieces out of that

00:50:08,900 --> 00:50:13,250
firmware we went out and the first part

00:50:11,810 --> 00:50:16,640
of it of course was you boot so our

00:50:13,250 --> 00:50:18,380
block size is 1 and we told it to skip

00:50:16,640 --> 00:50:21,170
the first hundred and sixty-three bytes

00:50:18,380 --> 00:50:24,350
which is what this told us to do and the

00:50:21,170 --> 00:50:26,000
decimal here it's 163 so we skipped the

00:50:24,350 --> 00:50:29,390
first hundred and sixty-three bytes and

00:50:26,000 --> 00:50:32,150
then basically wrote out until we got to

00:50:29,390 --> 00:50:34,310
the next block that incorporated all of

00:50:32,150 --> 00:50:36,710
the you boot stuff did the exact same

00:50:34,310 --> 00:50:38,870
thing for the compressed file system and

00:50:36,710 --> 00:50:41,540
of course the landcom firmware just for

00:50:38,870 --> 00:50:43,990
completeness so that now we have all

00:50:41,540 --> 00:50:46,970
three of the pieces that are laid out

00:50:43,990 --> 00:50:48,940
now let's start poking around inside

00:50:46,970 --> 00:50:51,130
there because it identified it

00:50:48,940 --> 00:50:54,099
self through been walk as a gzip

00:50:51,130 --> 00:50:57,369
compressed image we simply extract it

00:50:54,099 --> 00:50:57,670
out and then G unzip it and see what's

00:50:57,369 --> 00:51:01,869
in it

00:50:57,670 --> 00:51:04,150
and guess what once we did the unzip and

00:51:01,869 --> 00:51:07,599
then we did a bin walk on that we found

00:51:04,150 --> 00:51:10,030
gzip compressed data we found to cram FS

00:51:07,599 --> 00:51:14,650
file systems a whole bunch of security

00:51:10,030 --> 00:51:16,150
certificates we found CRC polynomials

00:51:14,650 --> 00:51:20,890
for doing the checks we found that it

00:51:16,150 --> 00:51:23,920
was a Linux - 16 - 6 16 point 14 release

00:51:20,890 --> 00:51:27,339
of the kernel when that was made that

00:51:23,920 --> 00:51:29,200
was dated back to 2014 and we also saw

00:51:27,339 --> 00:51:31,960
some of the paths for the actual files

00:51:29,200 --> 00:51:33,130
inside of it we cut it off because there

00:51:31,960 --> 00:51:34,930
was a whole bunch of stuff in there that

00:51:33,130 --> 00:51:36,369
we couldn't make fit on them on the

00:51:34,930 --> 00:51:40,660
screen even this was a little hard to

00:51:36,369 --> 00:51:43,750
get fit but you know that was a really

00:51:40,660 --> 00:51:45,220
fortunate find where you managed to just

00:51:43,750 --> 00:51:47,380
simply by grabbing a hold of the

00:51:45,220 --> 00:51:49,000
firmware doing a little bit of poking

00:51:47,380 --> 00:51:51,609
around in it figured out that it was a

00:51:49,000 --> 00:51:53,440
gzipped environment unzip it and then

00:51:51,609 --> 00:51:56,010
run Ben walk on it again and you find

00:51:53,440 --> 00:51:59,410
all the good stuff that's inside of it

00:51:56,010 --> 00:52:03,310
so now what's the general approach to

00:51:59,410 --> 00:52:07,869
reverse-engineer a binary well we got

00:52:03,310 --> 00:52:10,990
really lucky with the MW - a 424 part

00:52:07,869 --> 00:52:13,329
that firmware was just fantastic because

00:52:10,990 --> 00:52:16,119
of the way they laid it out most

00:52:13,329 --> 00:52:19,000
firmware is not so forgiving now you

00:52:16,119 --> 00:52:20,710
will find that some of the firmware from

00:52:19,000 --> 00:52:23,530
manufacturers if you can download the

00:52:20,710 --> 00:52:25,900
firmware it may be encrypted if it's

00:52:23,530 --> 00:52:28,630
encrypted then that represents a much

00:52:25,900 --> 00:52:31,660
more difficult problem sometimes it's

00:52:28,630 --> 00:52:33,310
just compressed and often times you know

00:52:31,660 --> 00:52:35,619
it's one of these security through

00:52:33,310 --> 00:52:37,450
obscurity kind of things they compress

00:52:35,619 --> 00:52:38,500
it and of course they don't figure that

00:52:37,450 --> 00:52:40,030
anybody can figure out that it's

00:52:38,500 --> 00:52:45,069
compressed and therefore they don't know

00:52:40,030 --> 00:52:47,950
how to decompress it but when we take a

00:52:45,069 --> 00:52:51,460
look at it we run Ben walk and we have

00:52:47,950 --> 00:52:55,150
it print out the entropy now the entropy

00:52:51,460 --> 00:52:56,920
if you have an entropy close to one that

00:52:55,150 --> 00:53:00,730
means it's typically either compressed

00:52:56,920 --> 00:53:01,720
or encrypted and when you see entropy

00:53:00,730 --> 00:53:04,620
like that you go

00:53:01,720 --> 00:53:07,570
okay but at least it didn't start at one

00:53:04,620 --> 00:53:10,210
there was some little piece ahead of it

00:53:07,570 --> 00:53:12,190
that was not one so that gives you some

00:53:10,210 --> 00:53:14,710
hope that there's some way of being able

00:53:12,190 --> 00:53:17,470
to figure out what's inside of it

00:53:14,710 --> 00:53:20,410
then another tool will use is the

00:53:17,470 --> 00:53:22,360
strings command once you've compressed

00:53:20,410 --> 00:53:24,640
it and you run strings across it you'll

00:53:22,360 --> 00:53:27,280
find all kinds of stuff in there like

00:53:24,640 --> 00:53:30,490
this thing here start section RG

00:53:27,280 --> 00:53:33,310
Hardware furrow seon distribution the

00:53:30,490 --> 00:53:36,610
vendor verizon the product version etc

00:53:33,310 --> 00:53:44,800
etc that was all in there just through

00:53:36,610 --> 00:53:46,390
looking at the strings yeah the question

00:53:44,800 --> 00:53:48,640
is how often do we find the manufacturer

00:53:46,390 --> 00:53:50,140
strip the strings out if the

00:53:48,640 --> 00:53:51,820
manufacturer is doing the due diligence

00:53:50,140 --> 00:53:54,580
the way they should they should have

00:53:51,820 --> 00:53:57,460
stripped it sometimes they will

00:53:54,580 --> 00:53:59,410
sometimes they won't and it's just

00:53:57,460 --> 00:54:02,050
caches catch can you may get lucky and

00:53:59,410 --> 00:54:03,450
if you get lucky take it if you're not

00:54:02,050 --> 00:54:05,440
lucky and you get nothing but

00:54:03,450 --> 00:54:07,060
gobbledygook out of the strings come in

00:54:05,440 --> 00:54:08,770
it's like well okay we tried that and

00:54:07,060 --> 00:54:09,700
that didn't pan out for us so let's move

00:54:08,770 --> 00:54:13,480
on to the next thing

00:54:09,700 --> 00:54:15,850
now the next step once you've got it

00:54:13,480 --> 00:54:17,860
separated out a bit then we can take

00:54:15,850 --> 00:54:21,220
another look at the entropy after

00:54:17,860 --> 00:54:22,870
decompressing that image we see a spike

00:54:21,220 --> 00:54:26,560
right there which is the separation

00:54:22,870 --> 00:54:29,830
between the u-boot image and the rest of

00:54:26,560 --> 00:54:31,720
the cram FS these entropies close to one

00:54:29,830 --> 00:54:33,730
and those are the cram FS images and

00:54:31,720 --> 00:54:35,020
then we see the rest of the operating

00:54:33,730 --> 00:54:40,030
system sitting out here

00:54:35,020 --> 00:54:43,570
so again if it's not solid at one that's

00:54:40,030 --> 00:54:45,040
good if it's solid at one that's a bad

00:54:43,570 --> 00:54:46,690
thing that means they've either

00:54:45,040 --> 00:54:48,070
encrypted it or they've got something

00:54:46,690 --> 00:54:51,880
else sitting out there that makes it

00:54:48,070 --> 00:54:53,410
look like encrypted data once we of

00:54:51,880 --> 00:54:55,210
course in this particular case we did

00:54:53,410 --> 00:54:57,370
the bin walk on it we found out there

00:54:55,210 --> 00:54:59,680
were two cram FS in images in the front

00:54:57,370 --> 00:55:01,000
we know what their offsets are because

00:54:59,680 --> 00:55:03,250
we know what their offsets are we can

00:55:01,000 --> 00:55:05,710
simply mount them and take a look at

00:55:03,250 --> 00:55:08,350
them that's a really nice thing about

00:55:05,710 --> 00:55:10,540
the way the loopback interface works in

00:55:08,350 --> 00:55:12,370
Linux if we can identify what the

00:55:10,540 --> 00:55:14,250
filesystem is we can simply loop back

00:55:12,370 --> 00:55:15,670
mount it and then take a look inside

00:55:14,250 --> 00:55:20,170
cram FS

00:55:15,670 --> 00:55:21,790
is compressed but not the headers so the

00:55:20,170 --> 00:55:23,200
data is compressed but the headers are

00:55:21,790 --> 00:55:25,569
visible so you can then look at the

00:55:23,200 --> 00:55:27,520
names of the files inside of cram FS

00:55:25,569 --> 00:55:30,010
when you go to squash FS it's a little

00:55:27,520 --> 00:55:32,530
bit different now we will see a lot more

00:55:30,010 --> 00:55:34,569
squash FS being used a little bit harder

00:55:32,530 --> 00:55:37,000
to do the D the D reference on but not

00:55:34,569 --> 00:55:38,859
impossible but in this case we look we

00:55:37,000 --> 00:55:41,430
were lucky we got crammed FS and it was

00:55:38,859 --> 00:55:43,240
easy to go ahead and mount it now

00:55:41,430 --> 00:55:44,650
normally we then dig a little bit

00:55:43,240 --> 00:55:47,500
further into that go ahead and mount

00:55:44,650 --> 00:55:49,089
them and try to extract things we'll do

00:55:47,500 --> 00:55:50,589
that in at some other time we just don't

00:55:49,089 --> 00:55:53,260
have time to mess around with it here in

00:55:50,589 --> 00:55:54,970
this class all right so now let's take a

00:55:53,260 --> 00:55:56,380
closer look at the binaries let's assume

00:55:54,970 --> 00:55:59,140
we've managed to be able to get the

00:55:56,380 --> 00:56:00,579
binary out of the image what can we do

00:55:59,140 --> 00:56:06,210
with it well first of all there are

00:56:00,579 --> 00:56:08,410
binutils like aab jaao and obtuse

00:56:06,210 --> 00:56:09,190
assemble of the data if you look at

00:56:08,410 --> 00:56:11,470
objects

00:56:09,190 --> 00:56:13,270
excuse me object umph bobs jump has the

00:56:11,470 --> 00:56:16,420
dash S option that'll allow me to

00:56:13,270 --> 00:56:19,420
disassemble the data so this is really

00:56:16,420 --> 00:56:22,359
useful if I know the manufacturer if I

00:56:19,420 --> 00:56:25,750
know it's a MIPS or an arm or a PowerPC

00:56:22,359 --> 00:56:28,390
whatever then I get the object dump for

00:56:25,750 --> 00:56:30,369
PowerPC and I do a nobs jump dash s

00:56:28,390 --> 00:56:33,250
against that image and it will then

00:56:30,369 --> 00:56:37,630
disassemble the image for me understand

00:56:33,250 --> 00:56:40,720
that disassembling the image is useful

00:56:37,630 --> 00:56:43,660
but in some cases not terribly

00:56:40,720 --> 00:56:44,890
enlightening unless you speak the

00:56:43,660 --> 00:56:46,540
assembly language of the native

00:56:44,890 --> 00:56:47,859
processor if you speak the assembly

00:56:46,540 --> 00:56:50,260
language of the native processor then

00:56:47,859 --> 00:56:53,710
you've got all kinds of stuff there also

00:56:50,260 --> 00:56:57,130
understand that when you run into

00:56:53,710 --> 00:56:59,680
something like that and you disassembled

00:56:57,130 --> 00:57:01,960
it there are not gonna be any nice neat

00:56:59,680 --> 00:57:04,869
labels there's not gonna be I mean

00:57:01,960 --> 00:57:07,900
basically the object code is stripped so

00:57:04,869 --> 00:57:10,420
you will find a jump instruction to some

00:57:07,900 --> 00:57:12,640
random offset or some offset from where

00:57:10,420 --> 00:57:15,670
it is right now a relative offset rather

00:57:12,640 --> 00:57:17,859
so when you're in that situation you

00:57:15,670 --> 00:57:20,890
basically have to try and create a map

00:57:17,859 --> 00:57:23,559
of the executable from the assembly

00:57:20,890 --> 00:57:26,470
language now this is definitely a long

00:57:23,559 --> 00:57:28,940
pole to try and go through if you can

00:57:26,470 --> 00:57:31,790
avoid it absolutely try to

00:57:28,940 --> 00:57:34,160
this is why we love open source it is a

00:57:31,790 --> 00:57:36,079
wonderful thing to be able to say well I

00:57:34,160 --> 00:57:37,849
need to get the open source from you and

00:57:36,079 --> 00:57:39,530
then you can do a mapping between the

00:57:37,849 --> 00:57:42,800
open source output and the actual

00:57:39,530 --> 00:57:44,599
executable obviously when you're dealing

00:57:42,800 --> 00:57:47,420
with open source you can get a hold of

00:57:44,599 --> 00:57:50,660
the compilers GCC is often the compiler

00:57:47,420 --> 00:57:52,640
that's used simply because it's free and

00:57:50,660 --> 00:57:54,560
the manufacturers don't want to have to

00:57:52,640 --> 00:57:57,290
spend umpteen thousand dollars for a

00:57:54,560 --> 00:58:00,079
development environment so it works out

00:57:57,290 --> 00:58:03,680
really well that way and everything just

00:58:00,079 --> 00:58:06,680
comes out as normal elf with GCC as the

00:58:03,680 --> 00:58:09,800
primary compiler alright so now let's

00:58:06,680 --> 00:58:11,540
assume that I have my executable and

00:58:09,800 --> 00:58:14,900
I've taken a look at it I go ok this

00:58:11,540 --> 00:58:18,319
looks alright now what can I do well I

00:58:14,900 --> 00:58:20,240
can run it if I happen to have qmu for

00:58:18,319 --> 00:58:23,119
instance for that particular processor

00:58:20,240 --> 00:58:24,890
architecture then I can actually put it

00:58:23,119 --> 00:58:28,130
inside of a qmu session and try to

00:58:24,890 --> 00:58:29,869
execute the code using tools like s

00:58:28,130 --> 00:58:32,089
trace and L trace we can get a pretty

00:58:29,869 --> 00:58:33,859
good idea of what the code is doing what

00:58:32,089 --> 00:58:36,319
functions it's calling up in the kernel

00:58:33,859 --> 00:58:38,930
what libraries it's trying to call as it

00:58:36,319 --> 00:58:42,140
runs there are some disassemblers

00:58:38,930 --> 00:58:44,270
there's the arrestee project this one is

00:58:42,140 --> 00:58:48,349
a fairly nice this assembler does a

00:58:44,270 --> 00:58:50,270
great job for x86 64 and it tries to

00:58:48,349 --> 00:58:52,520
figure out exactly what the jumps are

00:58:50,270 --> 00:58:54,319
and help you put it back together again

00:58:52,520 --> 00:58:57,619
there are also professional tool chains

00:58:54,319 --> 00:59:02,420
and disassemblers like Ida Pro now Ida

00:58:57,619 --> 00:59:06,589
Pro is the hardcore reverse engineers

00:59:02,420 --> 00:59:08,270
friend Ida Pro is not cheap it's like

00:59:06,589 --> 00:59:12,710
six or seven thousand dollars for a copy

00:59:08,270 --> 00:59:20,599
of Ida Pro per CPU architecture so it's

00:59:12,710 --> 00:59:22,190
not cheap but it is awesome what will

00:59:20,599 --> 00:59:24,980
happen you get the assembly language

00:59:22,190 --> 00:59:28,730
output over here you then it will

00:59:24,980 --> 00:59:31,010
construct a calling graph for you and

00:59:28,730 --> 00:59:32,329
allow you to label things so if you look

00:59:31,010 --> 00:59:33,859
at a particular piece of assembly

00:59:32,329 --> 00:59:35,630
language code you can clearly tell that

00:59:33,859 --> 00:59:38,240
it's a print statement you can actually

00:59:35,630 --> 00:59:41,150
label it as print so when you're

00:59:38,240 --> 00:59:42,000
creating the calling sequence here you

00:59:41,150 --> 00:59:43,770
can actually

00:59:42,000 --> 00:59:46,440
try to figure out what this what the

00:59:43,770 --> 00:59:49,200
calling sequences were what code is

00:59:46,440 --> 00:59:50,819
calling what the interrelationships

00:59:49,200 --> 00:59:52,369
between the individual function calls

00:59:50,819 --> 00:59:55,140
inside of it

00:59:52,369 --> 00:59:57,510
understand this code was probably C code

00:59:55,140 --> 00:59:59,069
or C++ code at some point and now we're

00:59:57,510 --> 01:00:00,839
looking at the assembly language so a

00:59:59,069 --> 01:00:03,450
lot of the things that would have been

01:00:00,839 --> 01:00:05,130
control structures inside of the C have

01:00:03,450 --> 01:00:07,859
to be mapped into assembly language

01:00:05,130 --> 01:00:11,910
control structures we can also see the

01:00:07,859 --> 01:00:13,109
actual data itself down here and in some

01:00:11,910 --> 01:00:16,170
cases we're looking for very specific

01:00:13,109 --> 01:00:18,450
byte patterns that indicate the end of a

01:00:16,170 --> 01:00:23,910
JPEG image for instance if they happen

01:00:18,450 --> 01:00:25,890
to have a boot logo or a splash screen

01:00:23,910 --> 01:00:27,480
in the unit and you want to change the

01:00:25,890 --> 01:00:29,400
splash screen to make it really cool

01:00:27,480 --> 01:00:31,050
well you want to find out where the

01:00:29,400 --> 01:00:32,490
splash screen starts and where it stops

01:00:31,050 --> 01:00:33,930
and figure out how much space you have

01:00:32,490 --> 01:00:36,660
and whether or not you can actually go

01:00:33,930 --> 01:00:38,190
out there and reprogram it so all of

01:00:36,660 --> 01:00:41,359
that sort of stuff comes into play with

01:00:38,190 --> 01:00:43,890
Ida Pro as I say it's not a cheap

01:00:41,359 --> 01:00:46,230
although you can get I think a 30-day

01:00:43,890 --> 01:00:47,760
evaluation of Ida Pro if you want to

01:00:46,230 --> 01:00:49,440
play with it but they have training

01:00:47,760 --> 01:00:51,210
classes that teach you how to use Ida

01:00:49,440 --> 01:00:53,970
Pro because it is a complex enough

01:00:51,210 --> 01:00:56,640
toolset that you really need to take the

01:00:53,970 --> 01:00:59,160
ax training class this is used

01:00:56,640 --> 01:01:02,670
oftentimes by larger name government

01:00:59,160 --> 01:01:04,800
agencies to disassemble malware and

01:01:02,670 --> 01:01:09,270
figure out what the malware actually did

01:01:04,800 --> 01:01:11,880
or what it's supposed to do always use

01:01:09,270 --> 01:01:15,900
protection that's a general statement in

01:01:11,880 --> 01:01:17,609
life but nonetheless never run a foreign

01:01:15,900 --> 01:01:19,500
binary on your test platform without

01:01:17,609 --> 01:01:22,800
taking some significant precautions

01:01:19,500 --> 01:01:24,990
first of all qmu is a good start make

01:01:22,800 --> 01:01:26,369
sure you keep it bottled up and of

01:01:24,990 --> 01:01:27,690
course there is support for most of the

01:01:26,369 --> 01:01:32,150
common cpu varieties out there

01:01:27,690 --> 01:01:35,339
especially MIPS PowerPC arm and x86 or

01:01:32,150 --> 01:01:37,349
you could use a VM if you're if you've

01:01:35,339 --> 01:01:40,500
got KVM certainly use that to keep the

01:01:37,349 --> 01:01:44,280
application bottled up at a minimum use

01:01:40,500 --> 01:01:46,380
a chroot LXE type environment LXE rather

01:01:44,280 --> 01:01:48,720
than docker simply because alexei looks

01:01:46,380 --> 01:01:52,020
like a real operating system to the

01:01:48,720 --> 01:01:53,970
application as it runs docker tends to

01:01:52,020 --> 01:01:55,380
be so stripped-down the application says

01:01:53,970 --> 01:01:57,119
well I'm missing this I

01:01:55,380 --> 01:01:59,490
have this library blah blah blah blah I

01:01:57,119 --> 01:02:02,039
can't run well okay if you're running

01:01:59,490 --> 01:02:03,690
LXE chances are you can actually trick

01:02:02,039 --> 01:02:14,150
it into thinking it's running on a real

01:02:03,690 --> 01:02:17,549
operating system yeah oh yeah yeah yeah

01:02:14,150 --> 01:02:20,700
yeah it turns out that some malware will

01:02:17,549 --> 01:02:23,400
look at certain registers to find out if

01:02:20,700 --> 01:02:28,950
they're there and Apple calls that the

01:02:23,400 --> 01:02:33,630
UEFI BIOS I'll probably get in trouble

01:02:28,950 --> 01:02:35,819
for that cut that out but they actually

01:02:33,630 --> 01:02:37,049
looked for special registers in places

01:02:35,819 --> 01:02:38,700
and if they don't find them then they

01:02:37,049 --> 01:02:41,069
say oh I must be running on a VM and

01:02:38,700 --> 01:02:44,250
therefore I don't run so yeah there

01:02:41,069 --> 01:02:46,200
there is certainly legitimate pieces of

01:02:44,250 --> 01:02:47,910
code as well as malware that will look

01:02:46,200 --> 01:02:49,079
around inside the environment that is

01:02:47,910 --> 01:02:52,109
running in to determine whether or not

01:02:49,079 --> 01:02:54,089
it's running on real Hardware in that

01:02:52,109 --> 01:02:57,029
case you have to go in and dork around

01:02:54,089 --> 01:02:58,849
with your qmu register sets to make it

01:02:57,029 --> 01:03:01,470
think that it looks like real Hardware

01:02:58,849 --> 01:03:04,859
sometimes easier said than done

01:03:01,470 --> 01:03:06,509
of course capture the run with the S

01:03:04,859 --> 01:03:07,950
trace and L trace we want to see what

01:03:06,509 --> 01:03:09,930
it's doing we want to see what kernel

01:03:07,950 --> 01:03:12,869
functions it's calling we want to see

01:03:09,930 --> 01:03:15,869
what libraries it's accessing note any

01:03:12,869 --> 01:03:18,329
anomalous behavior it could be a

01:03:15,869 --> 01:03:20,519
legitimate application and because of

01:03:18,329 --> 01:03:22,019
the fact that it's the third Tuesday of

01:03:20,519 --> 01:03:23,609
the month it does something weird on the

01:03:22,019 --> 01:03:28,259
third Tuesday of the month they call

01:03:23,609 --> 01:03:31,019
that Microsoft Patch Tuesday and now cut

01:03:28,259 --> 01:03:32,779
that out too I'm gonna get in real

01:03:31,019 --> 01:03:35,880
trouble here all right

01:03:32,779 --> 01:03:37,559
alternatively you can transfer the

01:03:35,880 --> 01:03:40,049
application to a small platform now

01:03:37,559 --> 01:03:42,630
let's say it's armed then we can take a

01:03:40,049 --> 01:03:44,039
BeagleBone or a Raspberry Pi and we can

01:03:42,630 --> 01:03:46,650
transfer the application to that

01:03:44,039 --> 01:03:49,160
platform and try to run it there if

01:03:46,650 --> 01:03:52,589
something goes wrong pull the plug

01:03:49,160 --> 01:03:54,359
simple enough and you can always refine

01:03:52,589 --> 01:03:57,390
format the SD card and start over again

01:03:54,359 --> 01:04:00,269
but if I'm running malware I probably

01:03:57,390 --> 01:04:02,730
want to destroy the SD card and get

01:04:00,269 --> 01:04:04,529
another one I don't want to take any

01:04:02,730 --> 01:04:06,250
chance that there's something left over

01:04:04,529 --> 01:04:08,410
even though you reformat some

01:04:06,250 --> 01:04:09,640
time's the bad block list and everything

01:04:08,410 --> 01:04:12,190
doesn't quite work the way you think you

01:04:09,640 --> 01:04:13,810
should and it's also I've seen malware

01:04:12,190 --> 01:04:17,050
that actually manipulates the bad block

01:04:13,810 --> 01:04:19,080
list so definitely be careful about

01:04:17,050 --> 01:04:22,900
those kinds of things with SD cards in

01:04:19,080 --> 01:04:25,150
general don't run with Internet Protocol

01:04:22,900 --> 01:04:26,260
enabled don't have it connected to the

01:04:25,150 --> 01:04:28,000
Internet

01:04:26,260 --> 01:04:31,240
pull the ethernet cable or going to

01:04:28,000 --> 01:04:33,130
iptables and block it off there block

01:04:31,240 --> 01:04:34,570
all the outbound traffic until you have

01:04:33,130 --> 01:04:38,770
a warm fuzzy feeling about what it's

01:04:34,570 --> 01:04:40,840
doing again putting it inside of a kind

01:04:38,770 --> 01:04:43,030
of a sandbox and watching it go back and

01:04:40,840 --> 01:04:44,590
forth it turns out that in that case I

01:04:43,030 --> 01:04:46,510
was talking about with the major

01:04:44,590 --> 01:04:49,180
manufacturer and the BIOS chirping back

01:04:46,510 --> 01:04:51,040
out to China that was no operating

01:04:49,180 --> 01:04:55,210
system running that was just sitting at

01:04:51,040 --> 01:04:56,950
the BIOS and it jerked out so they call

01:04:55,210 --> 01:04:59,290
that beaconing and this is a

01:04:56,950 --> 01:05:00,640
characteristic of a lot of malware it'll

01:04:59,290 --> 01:05:02,890
become

01:05:00,640 --> 01:05:04,780
let them know hey I'm here this is my IP

01:05:02,890 --> 01:05:07,360
address do you have anything for me to

01:05:04,780 --> 01:05:09,490
do and the controller will say go to

01:05:07,360 --> 01:05:13,030
sleep and call me in a week or a month

01:05:09,490 --> 01:05:14,740
or six months and then it will wake up

01:05:13,030 --> 01:05:17,020
again go back out check to see if

01:05:14,740 --> 01:05:18,460
there's anything new to do and then

01:05:17,020 --> 01:05:21,400
things will do some really interesting

01:05:18,460 --> 01:05:22,180
stuff this is what you call intelligence

01:05:21,400 --> 01:05:26,230
surveillance and reconnaissance

01:05:22,180 --> 01:05:29,440
operations with is our operations we're

01:05:26,230 --> 01:05:32,830
interested in looking to create a map of

01:05:29,440 --> 01:05:35,380
your network and creating a map of the

01:05:32,830 --> 01:05:37,060
network is really valuable because it

01:05:35,380 --> 01:05:40,690
then tells me that you have printer X

01:05:37,060 --> 01:05:43,570
and router Y and devices made by

01:05:40,690 --> 01:05:46,450
manufacturer such-and-such and by that

01:05:43,570 --> 01:05:49,090
information it helps me understand what

01:05:46,450 --> 01:05:51,100
sorts of attacks might be viable against

01:05:49,090 --> 01:05:52,630
that so understand that the malware

01:05:51,100 --> 01:05:55,120
writers are trying to do that against

01:05:52,630 --> 01:05:57,490
you in which case you definitely need to

01:05:55,120 --> 01:06:01,480
be careful with that kind of stuff now

01:05:57,490 --> 01:06:03,810
we'll show you real quick here the an

01:06:01,480 --> 01:06:07,180
example reverse engineer of a protocol

01:06:03,810 --> 01:06:08,680
in some cases it's not the device that

01:06:07,180 --> 01:06:09,880
we're really interested in we're

01:06:08,680 --> 01:06:13,210
interested in the communications

01:06:09,880 --> 01:06:15,190
protocol that the device uses Ethernet

01:06:13,210 --> 01:06:16,600
cabling of course just because it's got

01:06:15,190 --> 01:06:19,840
an Ethernet cable plug on it doesn't

01:06:16,600 --> 01:06:23,350
necessarily mean it's Ethernet we see

01:06:19,840 --> 01:06:26,110
vennett cabling those eight pen DB rj45

01:06:23,350 --> 01:06:27,910
s get repurposed they are repurposed for

01:06:26,110 --> 01:06:29,890
serial ports they're repurposed for all

01:06:27,910 --> 01:06:33,670
kinds of stuff and it may not be

01:06:29,890 --> 01:06:36,610
standard 802 dot 11 I mean it's a NATO

01:06:33,670 --> 01:06:41,350
2.2 3 or a dot a tip that I'll get it

01:06:36,610 --> 01:06:43,750
802 dot 3 2 it may not be that it may be

01:06:41,350 --> 01:06:45,910
EtherCAT or it may be some other

01:06:43,750 --> 01:06:49,570
industrial protocol which happens to go

01:06:45,910 --> 01:06:51,280
across ethernet cables so when we're

01:06:49,570 --> 01:06:54,970
trying to understand exactly what that's

01:06:51,280 --> 01:06:56,860
doing it's great to be able to kind of

01:06:54,970 --> 01:06:58,300
sniff the protocol and see what's all

01:06:56,860 --> 01:07:00,790
and see what's up

01:06:58,300 --> 01:07:02,560
serial protocols themselves are also

01:07:00,790 --> 01:07:04,870
significantly difficult to reverse

01:07:02,560 --> 01:07:05,860
engineer some of it is just because

01:07:04,870 --> 01:07:09,940
we're dealing with ancient technology

01:07:05,860 --> 01:07:11,470
and that a very few folks still remember

01:07:09,940 --> 01:07:14,230
what a serial port is or how to hook it

01:07:11,470 --> 01:07:16,120
up a lot of the DS deals with serial

01:07:14,230 --> 01:07:17,440
ports today is just a USB connector you

01:07:16,120 --> 01:07:20,260
just plug in the USB connector and it

01:07:17,440 --> 01:07:22,810
magically works but in a lot of this

01:07:20,260 --> 01:07:25,660
older equipment we actually have you

01:07:22,810 --> 01:07:27,310
know data terminal ready data you know

01:07:25,660 --> 01:07:29,500
request us in clear to send kind of

01:07:27,310 --> 01:07:31,240
signals that we need to understand

01:07:29,500 --> 01:07:33,910
exactly how they work in order to enable

01:07:31,240 --> 01:07:36,430
the device otherwise it won't work now

01:07:33,910 --> 01:07:39,370
the use of logic analyzers with protocol

01:07:36,430 --> 01:07:42,400
decoders as your Savior here the the big

01:07:39,370 --> 01:07:45,820
Mambo daddy of all protocol decoders is

01:07:42,400 --> 01:07:49,090
a device from Agilent it is a decoder

01:07:45,820 --> 01:07:52,300
that understands how to do like e 2 e 3

01:07:49,090 --> 01:07:54,820
signals T 1 signals

01:07:52,300 --> 01:07:56,260
you know telephony signaling mechanisms

01:07:54,820 --> 01:07:57,730
and they're expensive

01:07:56,260 --> 01:07:59,290
I mean they're you know twenty thirty

01:07:57,730 --> 01:08:02,620
thousand dollars for one of those things

01:07:59,290 --> 01:08:05,200
so if you can use some of the low end

01:08:02,620 --> 01:08:06,340
logic analyzers like the sale e units to

01:08:05,200 --> 01:08:08,560
help you understand what's going on

01:08:06,340 --> 01:08:11,470
that's a that's a good thing saves you a

01:08:08,560 --> 01:08:13,300
lot of money now obviously again we

01:08:11,470 --> 01:08:16,270
can't emphasize strongly enough check

01:08:13,300 --> 01:08:17,740
your voltages this one happens to be the

01:08:16,270 --> 01:08:20,140
device that we were getting ready to do

01:08:17,740 --> 01:08:23,020
the re on and what voltage does it show

01:08:20,140 --> 01:08:26,470
nine point six volts

01:08:23,020 --> 01:08:28,540
now why was it running at nine point six

01:08:26,470 --> 01:08:31,130
volts turns out it had a pack of

01:08:28,540 --> 01:08:33,530
double-a batteries that were running it

01:08:31,130 --> 01:08:36,890
and that's the raw voltage off the

01:08:33,530 --> 01:08:39,290
doublea's and then we go through various

01:08:36,890 --> 01:08:40,970
buck transformers and step downs and

01:08:39,290 --> 01:08:42,890
filters and everything to get it down to

01:08:40,970 --> 01:08:45,620
the 3.3 volt that the actual circuit

01:08:42,890 --> 01:08:47,420
used but that meant that you had nine

01:08:45,620 --> 01:08:48,890
point six volts floating around in the

01:08:47,420 --> 01:08:50,720
system and you had to be very careful

01:08:48,890 --> 01:08:52,520
about what you plugged into because that

01:08:50,720 --> 01:08:53,630
will definitely toast a serial port in a

01:08:52,520 --> 01:08:56,540
heartbeat

01:08:53,630 --> 01:08:58,100
now again remember volt o meter may not

01:08:56,540 --> 01:09:00,620
necessarily do what you need it to do if

01:08:58,100 --> 01:09:02,870
the voltage is very quickly you may not

01:09:00,620 --> 01:09:04,340
be able to see the spike in the voltage

01:09:02,870 --> 01:09:05,840
in which case we have to drop back and

01:09:04,340 --> 01:09:07,250
take a look at it through a digital

01:09:05,840 --> 01:09:11,270
storage oscilloscope or something

01:09:07,250 --> 01:09:13,550
similar now once we have it hooked up

01:09:11,270 --> 01:09:14,780
and we think we've got it at least the

01:09:13,550 --> 01:09:16,850
voltage that we're trying to figure out

01:09:14,780 --> 01:09:18,609
then try to see if you get the device to

01:09:16,850 --> 01:09:21,830
send any data and watch what happens

01:09:18,609 --> 01:09:24,620
does the voltage change significantly or

01:09:21,830 --> 01:09:25,940
does something else weird happen

01:09:24,620 --> 01:09:27,170
we'll see we'll talk about this

01:09:25,940 --> 01:09:30,380
particular one where something else

01:09:27,170 --> 01:09:32,780
really weird happened all right so let's

01:09:30,380 --> 01:09:34,820
capture some data this happens to be the

01:09:32,780 --> 01:09:37,130
output from the Sayle unit

01:09:34,820 --> 01:09:39,380
this was the transmit side this is the

01:09:37,130 --> 01:09:40,760
received side so they're not lined up

01:09:39,380 --> 01:09:42,020
exactly like that you had the transmit

01:09:40,760 --> 01:09:44,780
side and then you had the receive side

01:09:42,020 --> 01:09:47,960
it was a half duplex connection the bit

01:09:44,780 --> 01:09:50,630
width the bit width when you actually

01:09:47,960 --> 01:09:53,210
set on and measured these bit widths you

01:09:50,630 --> 01:09:57,830
found that it was roughly 56 kilobits

01:09:53,210 --> 01:10:01,310
but not exactly 56 kilobits it was 59

01:09:57,830 --> 01:10:03,710
kilobits in some cases so some of that

01:10:01,310 --> 01:10:06,950
has to do with they're not using a good

01:10:03,710 --> 01:10:09,260
solid crystal reference sometimes if

01:10:06,950 --> 01:10:11,150
they're doing phase-locked loops and

01:10:09,260 --> 01:10:12,080
they're trying to generate the voltage I

01:10:11,150 --> 01:10:14,060
mean they're trying to generate the

01:10:12,080 --> 01:10:15,860
clock using a phase lock loop sometimes

01:10:14,060 --> 01:10:18,350
the phases have the phase lock hasn't

01:10:15,860 --> 01:10:19,370
really happened yet and therefore it

01:10:18,350 --> 01:10:21,050
will be a little wonky

01:10:19,370 --> 01:10:24,500
in terms of the frequency coming out of

01:10:21,050 --> 01:10:26,720
it but it was roughly 56 kilobits and

01:10:24,500 --> 01:10:28,100
there was some drift in it but that was

01:10:26,720 --> 01:10:32,240
something that we could easily take into

01:10:28,100 --> 01:10:34,280
account in the Sayla unit now when

01:10:32,240 --> 01:10:36,320
you're trying to do a protocol decode if

01:10:34,280 --> 01:10:39,260
your logic analyzer supports multiple

01:10:36,320 --> 01:10:41,210
protocols try and switch you've captured

01:10:39,260 --> 01:10:43,790
the data just simply switch the

01:10:41,210 --> 01:10:44,810
interpretation if you look at it as

01:10:43,790 --> 01:10:46,670
CANbus

01:10:44,810 --> 01:10:50,030
if you look at it as I squared C if you

01:10:46,670 --> 01:10:52,610
look at it is you know normal rs-232

01:10:50,030 --> 01:10:55,760
async you know those kinds of things can

01:10:52,610 --> 01:10:56,000
be really helpful just to be able to see

01:10:55,760 --> 01:10:59,240
it

01:10:56,000 --> 01:11:01,250
how many pens are involved with the

01:10:59,240 --> 01:11:02,570
signal is it something that I can see in

01:11:01,250 --> 01:11:05,270
just two pens in which case it's

01:11:02,570 --> 01:11:07,850
probably an rs-232 but does one of the

01:11:05,270 --> 01:11:09,230
pins look like a clock when you hook it

01:11:07,850 --> 01:11:10,880
up to the sailing units you're going to

01:11:09,230 --> 01:11:14,180
see this thing go into DT that's

01:11:10,880 --> 01:11:15,650
probably I squared C so when you start

01:11:14,180 --> 01:11:17,210
doing interpretation for I squared C

01:11:15,650 --> 01:11:19,430
you'll be able to be code the master and

01:11:17,210 --> 01:11:23,570
slave interfaces you'll figure out what

01:11:19,430 --> 01:11:26,360
the I squared C ID is and little tools

01:11:23,570 --> 01:11:28,520
like Arduino czar wonderful at being

01:11:26,360 --> 01:11:31,220
able to do decode on this kind of stuff

01:11:28,520 --> 01:11:33,650
generate the actual I squared C clocks

01:11:31,220 --> 01:11:36,380
the spy clocks and then be able to get

01:11:33,650 --> 01:11:38,420
the device to talk to you even though

01:11:36,380 --> 01:11:42,500
it's maybe kind of isolated from the

01:11:38,420 --> 01:11:43,250
rest of the circuitry of course when we

01:11:42,500 --> 01:11:45,410
were taking a look at that particular

01:11:43,250 --> 01:11:47,840
protocol there was some really strange

01:11:45,410 --> 01:11:50,840
things about the protocol if you if you

01:11:47,840 --> 01:11:52,940
take a look here you'll notice that the

01:11:50,840 --> 01:11:55,720
I don't see if I can get this to show up

01:11:52,940 --> 01:11:55,720
over here whoops

01:11:58,730 --> 01:12:02,510
you'll notice that there was no voltage

01:12:00,290 --> 01:12:05,570
over in this section and then suddenly

01:12:02,510 --> 01:12:07,820
the voltage went high for about 2,000

01:12:05,570 --> 01:12:11,270
milliseconds so about two seconds and

01:12:07,820 --> 01:12:14,030
then it started clocking data now this

01:12:11,270 --> 01:12:17,060
looks a lot like something called break

01:12:14,030 --> 01:12:18,650
a mark after break so when you're

01:12:17,060 --> 01:12:20,210
looking at mark after break protocols

01:12:18,650 --> 01:12:22,490
there's certain types of protocols that

01:12:20,210 --> 01:12:24,050
use this particular technique so we were

01:12:22,490 --> 01:12:26,930
originally thinking that maybe a mark

01:12:24,050 --> 01:12:29,330
after break protocol then as we got a

01:12:26,930 --> 01:12:30,920
little bit further into it it turned out

01:12:29,330 --> 01:12:33,950
that it didn't match any of the known

01:12:30,920 --> 01:12:35,570
mark after break protocols and when we

01:12:33,950 --> 01:12:37,010
took a look at the datasheet it turned

01:12:35,570 --> 01:12:39,560
out that this particular part didn't

01:12:37,010 --> 01:12:41,960
support mark after break communications

01:12:39,560 --> 01:12:44,240
protocol so that helped us a lot by

01:12:41,960 --> 01:12:46,970
being able to rule out what we knew it

01:12:44,240 --> 01:12:49,040
wasn't we didn't know what it was but at

01:12:46,970 --> 01:12:54,290
least we knew it wasn't mark after break

01:12:49,040 --> 01:12:55,760
now this and taking a look at it because

01:12:54,290 --> 01:12:57,290
of that weird it was off and then

01:12:55,760 --> 01:12:58,430
suddenly it went high and then started

01:12:57,290 --> 01:13:00,110
clocking data

01:12:58,430 --> 01:13:02,810
it looked a lot like it might be bit

01:13:00,110 --> 01:13:05,540
banged and when you're bit banging the

01:13:02,810 --> 01:13:07,040
port like that that would also explain a

01:13:05,540 --> 01:13:09,200
lot of where we were getting some of the

01:13:07,040 --> 01:13:10,610
drift in the clock frequency if you're

01:13:09,200 --> 01:13:12,470
bit banging a porch you might be off a

01:13:10,610 --> 01:13:14,990
little bit in which case it might look

01:13:12,470 --> 01:13:17,600
like 56 K plus or minus a couple of K

01:13:14,990 --> 01:13:19,910
bits per second and so it looked like

01:13:17,600 --> 01:13:21,230
yeah maybe this is bit bang okay well

01:13:19,910 --> 01:13:23,290
this is gonna be interesting to try and

01:13:21,230 --> 01:13:26,030
figure out what this protocol does

01:13:23,290 --> 01:13:28,820
fortunately there was some weird things

01:13:26,030 --> 01:13:31,940
about the protocol that told us that it

01:13:28,820 --> 01:13:34,220
was not quite bit banged it turned out

01:13:31,940 --> 01:13:37,130
that of course the voltages started at

01:13:34,220 --> 01:13:39,200
zero and because the voltages started at

01:13:37,130 --> 01:13:41,150
zero we looked at the part we found out

01:13:39,200 --> 01:13:43,130
that the part had two serial ports on it

01:13:41,150 --> 01:13:44,660
so we suspected they were using one of

01:13:43,130 --> 01:13:46,610
the serial ports for the communications

01:13:44,660 --> 01:13:49,010
channel but serial ports when you enable

01:13:46,610 --> 01:13:50,660
serial ports there's a voltage that's

01:13:49,010 --> 01:13:52,100
constantly available on either the

01:13:50,660 --> 01:13:54,290
transmit or receive pin depending on

01:13:52,100 --> 01:13:58,100
whether it's connected as DTE or DC II

01:13:54,290 --> 01:13:59,840
and in taking a look at that we go okay

01:13:58,100 --> 01:14:02,630
well that's really weird because there's

01:13:59,840 --> 01:14:04,520
no voltage at all for extended periods

01:14:02,630 --> 01:14:06,650
of time and then when we trick it to do

01:14:04,520 --> 01:14:10,010
something it the voltage suddenly comes

01:14:06,650 --> 01:14:12,170
on and it starts clocking we took a

01:14:10,010 --> 01:14:14,540
closer look at that we found out that it

01:14:12,170 --> 01:14:16,220
was it although it looks like a break

01:14:14,540 --> 01:14:18,470
signal that high signal that would come

01:14:16,220 --> 01:14:22,670
out it really wasn't mark after break

01:14:18,470 --> 01:14:24,440
and then we have it meant that basically

01:14:22,670 --> 01:14:25,970
if we wanted to inject a new command

01:14:24,440 --> 01:14:28,670
we're gonna have to figure out what the

01:14:25,970 --> 01:14:30,230
pattern is and follow the pattern so the

01:14:28,670 --> 01:14:32,030
goal for this particular case was to be

01:14:30,230 --> 01:14:34,990
able to get into the communications

01:14:32,030 --> 01:14:38,450
protocol and start injecting commands

01:14:34,990 --> 01:14:40,250
that in some cases might confuse the

01:14:38,450 --> 01:14:43,430
device in other cases might do something

01:14:40,250 --> 01:14:45,860
special in the device that we can't

01:14:43,430 --> 01:14:48,620
really get into the details of alright

01:14:45,860 --> 01:14:50,720
so we used a microcontroller to do a lot

01:14:48,620 --> 01:14:53,150
of this testing turns out in this

01:14:50,720 --> 01:14:55,220
particular case it was a CC 3200 from

01:14:53,150 --> 01:14:56,990
Texas Instruments the nice thing about

01:14:55,220 --> 01:14:59,630
this one is it had the right voltage

01:14:56,990 --> 01:15:01,220
level it was all 3.3 volt so we didn't

01:14:59,630 --> 01:15:03,320
have to do any level shifting and we

01:15:01,220 --> 01:15:04,820
didn't have to get any special circuitry

01:15:03,320 --> 01:15:07,700
out there to handle a three point three

01:15:04,820 --> 01:15:10,540
to five volt level shifts also this gave

01:15:07,700 --> 01:15:12,970
us Wi-Fi and JTAG on the

01:15:10,540 --> 01:15:14,590
embedded board so we could actually have

01:15:12,970 --> 01:15:15,850
some options for interfacing to the

01:15:14,590 --> 01:15:19,060
micro and then kind of watch what's

01:15:15,850 --> 01:15:22,240
going on we did opt in this case to use

01:15:19,060 --> 01:15:23,320
the Arduino like energy ax or energy u

01:15:22,240 --> 01:15:26,400
depending on how you pronounce it I

01:15:23,320 --> 01:15:30,070
guess this looks like Arduino code and

01:15:26,400 --> 01:15:32,470
it sets on top of TIR toss so we can get

01:15:30,070 --> 01:15:35,050
it to do fast things when we need them

01:15:32,470 --> 01:15:38,140
to be fast but not have to set there and

01:15:35,050 --> 01:15:41,350
eclipse and our minds go numb as we look

01:15:38,140 --> 01:15:42,790
at the eclipses code to basically boot

01:15:41,350 --> 01:15:43,210
the board and do all the rest of stuff

01:15:42,790 --> 01:15:45,640
with it

01:15:43,210 --> 01:15:48,700
so energy it was a great solution for

01:15:45,640 --> 01:15:52,060
this particular case now in the first

01:15:48,700 --> 01:15:53,320
try we said okay well we think we know

01:15:52,060 --> 01:15:58,450
what we need to do we need to inject

01:15:53,320 --> 01:16:00,850
some serial port like stuff we knew we

01:15:58,450 --> 01:16:02,650
wanted to isolate our circuitry from

01:16:00,850 --> 01:16:05,560
their circuitry so they would not know

01:16:02,650 --> 01:16:07,990
that we were there so we basically made

01:16:05,560 --> 01:16:10,360
our equipment look like a diode well we

01:16:07,990 --> 01:16:12,610
used a diode to keep it from being able

01:16:10,360 --> 01:16:15,070
to be detected by the devices that we're

01:16:12,610 --> 01:16:17,770
communicating with each other and it

01:16:15,070 --> 01:16:19,750
turned out that if we didn't do that or

01:16:17,770 --> 01:16:21,430
if we used a diode but then didn't do

01:16:19,750 --> 01:16:23,830
any additional isolation we ended up

01:16:21,430 --> 01:16:27,460
with this weird thing you'll notice

01:16:23,830 --> 01:16:31,120
those are not nice square edges that's

01:16:27,460 --> 01:16:33,580
bad that says that we would sometimes

01:16:31,120 --> 01:16:36,130
get some things through but other things

01:16:33,580 --> 01:16:37,690
wouldn't come through and it was all

01:16:36,130 --> 01:16:39,100
mystery meat until we put the scope on

01:16:37,690 --> 01:16:41,140
it and then once we saw the scope we go

01:16:39,100 --> 01:16:43,930
oh that explains it

01:16:41,140 --> 01:16:49,150
also weird thing the voltage levels here

01:16:43,930 --> 01:16:51,430
instead of 3.3 volt this was 1.8 volt so

01:16:49,150 --> 01:16:53,620
it was a little strange that we would

01:16:51,430 --> 01:16:57,370
see some big change in the voltage there

01:16:53,620 --> 01:16:59,770
so the fact that it the voltage got cut

01:16:57,370 --> 01:17:01,300
in half the edges looked horrible this

01:16:59,770 --> 01:17:02,310
is not a good thing we have to figure

01:17:01,300 --> 01:17:06,040
out some other way

01:17:02,310 --> 01:17:08,200
so we went to a high speed Schottky

01:17:06,040 --> 01:17:10,510
diode and the high-speed shot key diode

01:17:08,200 --> 01:17:13,330
can handle the frequencies so that

01:17:10,510 --> 01:17:15,070
seemed to fix the problem for us again

01:17:13,330 --> 01:17:17,170
because it's a diode we basically

01:17:15,070 --> 01:17:18,850
isolated ourselves from the signal they

01:17:17,170 --> 01:17:21,670
couldn't tell we were there we could

01:17:18,850 --> 01:17:22,960
inject commands into the system and see

01:17:21,670 --> 01:17:24,070
what happens

01:17:22,960 --> 01:17:25,810
we all

01:17:24,070 --> 01:17:27,880
so needed to power the microcontroller

01:17:25,810 --> 01:17:29,860
so what we wanted to do this we wanted

01:17:27,880 --> 01:17:32,230
to have this a box that we basically

01:17:29,860 --> 01:17:34,329
just plug in line with the thing that we

01:17:32,230 --> 01:17:36,849
were doing the testing on just to make

01:17:34,329 --> 01:17:38,980
things easy that way we could upgrade

01:17:36,849 --> 01:17:40,599
the system in a matter of like 20

01:17:38,980 --> 01:17:42,219
seconds and put our box in the middle

01:17:40,599 --> 01:17:44,679
and then start looking at signals going

01:17:42,219 --> 01:17:47,619
back and forth we needed to power the

01:17:44,679 --> 01:17:50,409
micro and to keep the signal at the same

01:17:47,619 --> 01:17:52,929
reference ground this is a tricky thing

01:17:50,409 --> 01:17:54,639
we definitely want to make sure that the

01:17:52,929 --> 01:17:56,920
ground being referenced in the

01:17:54,639 --> 01:17:59,110
controller the real controller is the

01:17:56,920 --> 01:18:01,480
same ground we're being referencing in

01:17:59,110 --> 01:18:03,670
our circuitry otherwise we get ground

01:18:01,480 --> 01:18:06,760
loop problems and things just go to hell

01:18:03,670 --> 01:18:10,210
in a handbasket so what we did was

01:18:06,760 --> 01:18:12,130
remember that 9.6 volt power we pulled

01:18:10,210 --> 01:18:13,659
that 9.6 volt power ran it through a

01:18:12,130 --> 01:18:14,849
buck transformer that's that little

01:18:13,659 --> 01:18:17,590
white thing you see down there and

01:18:14,849 --> 01:18:20,320
converted it to 5 volts to power the

01:18:17,590 --> 01:18:24,429
microcontroller so if you powered the

01:18:20,320 --> 01:18:26,949
microcontroller through a 5 volt USB

01:18:24,429 --> 01:18:29,829
connector if you powered it with 3.3

01:18:26,949 --> 01:18:31,329
volt it didn't work at least not for our

01:18:29,829 --> 01:18:33,010
application if you powered it with 5

01:18:31,329 --> 01:18:34,960
volt through the USB connector

01:18:33,010 --> 01:18:38,050
everything worked fine so we basically

01:18:34,960 --> 01:18:40,750
took the 9.6 volts we pulled the power

01:18:38,050 --> 01:18:42,550
off of the connector we ran it into this

01:18:40,750 --> 01:18:46,090
power supply we then ran the power

01:18:42,550 --> 01:18:47,619
supply underneath into a USB adapter as

01:18:46,090 --> 01:18:49,900
you can get from Sparkfun they're great

01:18:47,619 --> 01:18:51,150
there's a little PCB that has a USB

01:18:49,900 --> 01:18:53,340
connector on one side and just

01:18:51,150 --> 01:18:56,409
through-hole solder pins on the other

01:18:53,340 --> 01:18:59,230
and so we ran it into that and it turns

01:18:56,409 --> 01:19:02,590
out that these let's see what's wrong

01:18:59,230 --> 01:19:06,010
button these pins that you see here

01:19:02,590 --> 01:19:07,510
that's actually the Pens of the CC 3200

01:19:06,010 --> 01:19:11,110
sticking up through this PCB

01:19:07,510 --> 01:19:13,810
through this perf board and when we did

01:19:11,110 --> 01:19:17,619
all of that it was amazing we could

01:19:13,810 --> 01:19:19,810
actually inject new commands and watch

01:19:17,619 --> 01:19:21,460
what happens you know as we were going

01:19:19,810 --> 01:19:23,560
through doing the decode on the protocol

01:19:21,460 --> 01:19:26,590
we actually found out that there was

01:19:23,560 --> 01:19:29,290
some places where it was representing a

01:19:26,590 --> 01:19:30,940
hundred percent so you would see a

01:19:29,290 --> 01:19:32,409
hundred percent on one thing or a

01:19:30,940 --> 01:19:35,079
hundred percent on the other thing and

01:19:32,409 --> 01:19:36,520
then the mix of hundred percent so you

01:19:35,079 --> 01:19:37,170
would end up with a hundred percent if

01:19:36,520 --> 01:19:39,000
you added the

01:19:37,170 --> 01:19:41,520
them together those are both being

01:19:39,000 --> 01:19:44,160
represented in two bytes for each one of

01:19:41,520 --> 01:19:45,390
those values also now this is the thing

01:19:44,160 --> 01:19:46,650
that we were talking about earlier where

01:19:45,390 --> 01:19:48,270
you did a little research on the

01:19:46,650 --> 01:19:51,090
manufacturer and the people who hold

01:19:48,270 --> 01:19:52,679
that held the patents turns out that the

01:19:51,090 --> 01:19:56,250
people who held this particular patent

01:19:52,679 --> 01:19:58,920
were both ham radio operators and we

01:19:56,250 --> 01:20:00,929
were looking at the protocol output and

01:19:58,920 --> 01:20:04,530
there was a weird thing at the end of

01:20:00,929 --> 01:20:07,710
the protocol that was a 16-bit value

01:20:04,530 --> 01:20:11,730
that changed drastically depending on

01:20:07,710 --> 01:20:14,520
what the input data was and so we we

01:20:11,730 --> 01:20:18,480
said okay well this is probably a 16-bit

01:20:14,520 --> 01:20:23,010
crc and the problem is 16-bit CRC's

01:20:18,480 --> 01:20:25,679
there's 24 different 16-bit CRC's in

01:20:23,010 --> 01:20:28,320
this particular case the because the two

01:20:25,679 --> 01:20:32,489
people who hold the patent were ham

01:20:28,320 --> 01:20:34,620
radio operators we said ah ax 25 which

01:20:32,489 --> 01:20:37,080
is a 16-bit crc that's used in ham radio

01:20:34,620 --> 01:20:41,610
protocols let's try that sure enough

01:20:37,080 --> 01:20:43,710
that's what it was so I mean as a ham

01:20:41,610 --> 01:20:46,080
radio operator I go ah you know I bet

01:20:43,710 --> 01:20:48,690
you they're using ax 25 let's try that

01:20:46,080 --> 01:20:51,360
and sure enough that's what they were

01:20:48,690 --> 01:20:53,040
using and when we went into when we went

01:20:51,360 --> 01:20:54,929
back into the data sheets and actually

01:20:53,040 --> 01:20:58,110
dug down through the data sheets for the

01:20:54,929 --> 01:21:00,480
Atmel part we found that ax 25 was one

01:20:58,110 --> 01:21:04,190
of the modes that it supported so I was

01:21:00,480 --> 01:21:07,500
like oh cool so this is I mean this is

01:21:04,190 --> 01:21:09,000
esoteric you know detective work but

01:21:07,500 --> 01:21:10,620
this is the kind of thing that you have

01:21:09,000 --> 01:21:13,969
to do when you're trying to be serious

01:21:10,620 --> 01:21:16,710
about reverse engineering something now

01:21:13,969 --> 01:21:18,210
but with this particular solution we

01:21:16,710 --> 01:21:20,790
were able to inject commands complete

01:21:18,210 --> 01:21:22,380
with the CRC s and lo and behold the

01:21:20,790 --> 01:21:23,969
controller and the device it was

01:21:22,380 --> 01:21:26,850
controlling was unaware that we were

01:21:23,969 --> 01:21:28,890
there and we were able to do our

01:21:26,850 --> 01:21:31,440
particular job in this case inject

01:21:28,890 --> 01:21:35,219
commands and make things do light up and

01:21:31,440 --> 01:21:37,290
do funny things now reverse engineering

01:21:35,219 --> 01:21:39,270
kind of a summary here reverse

01:21:37,290 --> 01:21:42,929
engineering is an incredibly challenging

01:21:39,270 --> 01:21:46,620
problem it we have found some weird

01:21:42,929 --> 01:21:50,410
correlations and that is people who are

01:21:46,620 --> 01:21:56,670
really talented at reverse engineering

01:21:50,410 --> 01:22:00,310
also like to pick locks I'm not sure why

01:21:56,670 --> 01:22:02,770
but it's just a correlation and some of

01:22:00,310 --> 01:22:05,710
the people who make malware they will

01:22:02,770 --> 01:22:08,170
have like sets of locks sitting on their

01:22:05,710 --> 01:22:09,940
table and that's what they'll do for you

01:22:08,170 --> 01:22:13,930
know a break a mental break they'll sit

01:22:09,940 --> 01:22:15,940
there and try and pick the lock I don't

01:22:13,930 --> 01:22:18,730
know why but it just happens to be a

01:22:15,940 --> 01:22:22,360
strange correlation there

01:22:18,730 --> 01:22:24,820
it's a problem-solving issue and if you

01:22:22,360 --> 01:22:27,910
like solving really really tough

01:22:24,820 --> 01:22:30,460
problems and you're familiar enough with

01:22:27,910 --> 01:22:33,100
the technology the hardware underneath

01:22:30,460 --> 01:22:35,410
it that you can then try to figure out

01:22:33,100 --> 01:22:37,810
okay so this is a serial port but it's

01:22:35,410 --> 01:22:41,080
not quite a serial port you know why is

01:22:37,810 --> 01:22:43,090
it doing this then you'll be successful

01:22:41,080 --> 01:22:45,250
make sure you gather your tools the

01:22:43,090 --> 01:22:48,880
hardware tools from places like I fix it

01:22:45,250 --> 01:22:51,670
again the right to repair movement is a

01:22:48,880 --> 01:22:54,880
fabulous thing because being able to

01:22:51,670 --> 01:22:57,730
source suction cups and pentalobe screw

01:22:54,880 --> 01:22:59,710
drivers is a major pain in the butt but

01:22:57,730 --> 01:23:02,110
thanks to I fix it we can just simply

01:22:59,710 --> 01:23:03,640
buy it as a kit yeah it's a couple

01:23:02,110 --> 01:23:06,610
hundred bucks for the kit but it's worth

01:23:03,640 --> 01:23:09,250
every penny understand what your goals

01:23:06,610 --> 01:23:10,960
are and when to declare victory is your

01:23:09,250 --> 01:23:13,690
goal just simply to figure out oh this

01:23:10,960 --> 01:23:16,720
is a UNIX or this is a Linux machine I

01:23:13,690 --> 01:23:17,710
had my wife get upset when we weigh this

01:23:16,720 --> 01:23:24,550
one

01:23:17,710 --> 01:23:26,560
we had a samsung television and there

01:23:24,550 --> 01:23:28,900
was a firmware update for the samsung

01:23:26,560 --> 01:23:31,300
television and remarkably enough when

01:23:28,900 --> 01:23:33,670
you did the firmware update you saw

01:23:31,300 --> 01:23:37,900
things go across on the screen like you

01:23:33,670 --> 01:23:39,610
boot ah okay we're running you boot on

01:23:37,900 --> 01:23:43,360
this platform and there was a

01:23:39,610 --> 01:23:46,690
maintenance connector on the back that

01:23:43,360 --> 01:23:48,190
happened to be a serial port of course

01:23:46,690 --> 01:23:52,390
the wife took a dim view what are you

01:23:48,190 --> 01:23:57,520
doing to our TV set stop that hands off

01:23:52,390 --> 01:23:59,050
I'm watching that so but it's definitely

01:23:57,520 --> 01:24:01,150
it's kind of a cool thing when you

01:23:59,050 --> 01:24:03,099
understand the technology behind a lot

01:24:01,150 --> 01:24:05,320
of what's being built today

01:24:03,099 --> 01:24:07,630
and certainly here at the embedded Linux

01:24:05,320 --> 01:24:09,550
conference many of the devices that are

01:24:07,630 --> 01:24:11,739
being constructed are in fact using

01:24:09,550 --> 01:24:14,679
Linux anything that is an internet of

01:24:11,739 --> 01:24:17,320
things kind of device it's got to talk

01:24:14,679 --> 01:24:19,119
to the internet somewhere and if he's

01:24:17,320 --> 01:24:19,989
got to have a protocol stack protocol

01:24:19,119 --> 01:24:22,540
stacks you can get them for

01:24:19,989 --> 01:24:24,940
microcontrollers they're expensive but

01:24:22,540 --> 01:24:26,500
if you can get a free one for Linux okay

01:24:24,940 --> 01:24:29,260
it may be worth it to pay a little extra

01:24:26,500 --> 01:24:31,090
more money on the the processor side and

01:24:29,260 --> 01:24:32,590
not have to worry about all this

01:24:31,090 --> 01:24:34,810
software that you'd have to write in

01:24:32,590 --> 01:24:39,540
order to handle repos and firmware

01:24:34,810 --> 01:24:42,190
updates and dealing with you know

01:24:39,540 --> 01:24:44,520
certificates and all sort of business so

01:24:42,190 --> 01:24:47,079
the other thing that I would say is

01:24:44,520 --> 01:24:50,110
understand the legal implications of

01:24:47,079 --> 01:24:53,440
what you're doing as I say in some

01:24:50,110 --> 01:24:55,480
jurisdictions just taken the firmware

01:24:53,440 --> 01:24:59,079
off the platform using a spy flash

01:24:55,480 --> 01:25:01,380
reader is illegal definitely check that

01:24:59,079 --> 01:25:03,849
before you start going down this path

01:25:01,380 --> 01:25:09,099
for most of us I mean we thank you well

01:25:03,849 --> 01:25:11,320
I bought a ps3 and because I bought a

01:25:09,099 --> 01:25:12,969
ps3 it's my ps3 and I can do anything I

01:25:11,320 --> 01:25:13,960
want to if I want to run Linux on my ps3

01:25:12,969 --> 01:25:18,520
I can do that

01:25:13,960 --> 01:25:20,679
no the DCMA says if I go in and change

01:25:18,520 --> 01:25:23,020
the boot sequence the boot firmware to

01:25:20,679 --> 01:25:25,510
boot Linux instead of booting the ps3

01:25:23,020 --> 01:25:29,829
operating system I've violated the DCMA

01:25:25,510 --> 01:25:31,599
and you know it's like well I own it no

01:25:29,829 --> 01:25:34,500
no you don't if you read the fine print

01:25:31,599 --> 01:25:38,920
you really don't own it you have a

01:25:34,500 --> 01:25:42,420
unlimited lease on the device so always

01:25:38,920 --> 01:25:46,690
make sure you read the fine print now

01:25:42,420 --> 01:25:49,090
because I like to live dangerously what

01:25:46,690 --> 01:25:53,190
we're going to do here is I'm going to

01:25:49,090 --> 01:25:55,540
see if I just basically I soldered I

01:25:53,190 --> 01:25:57,730
repopulated one of the serial ports on

01:25:55,540 --> 01:26:00,250
this board and we're gonna try it for

01:25:57,730 --> 01:26:03,070
the first time and of course you know

01:26:00,250 --> 01:26:05,409
again I didn't sacrifice a large amount

01:26:03,070 --> 01:26:08,349
to the demo gods this morning so I'm not

01:26:05,409 --> 01:26:10,139
sure exactly what it's going to do but

01:26:08,349 --> 01:26:14,679
we're gonna try it anyway

01:26:10,139 --> 01:26:16,510
so what we'll do is because I've

01:26:14,679 --> 01:26:17,980
repopulated the serial port

01:26:16,510 --> 01:26:19,809
and I went through and I did measure

01:26:17,980 --> 01:26:22,269
some voltages to kind of know what what

01:26:19,809 --> 01:26:29,099
sorts of things to expect will run

01:26:22,269 --> 01:26:35,230
mini-com on this and we will set it up

01:26:29,099 --> 01:26:36,579
for 115 - which is usually the Volt is

01:26:35,230 --> 01:26:40,329
usually the speed that a lot of these

01:26:36,579 --> 01:26:42,010
guys work it'll be either 115 - or 9600

01:26:40,329 --> 01:26:43,840
baud those are the two that they tend to

01:26:42,010 --> 01:26:46,119
go to now the one that we did the

01:26:43,840 --> 01:26:49,659
protocol arjan that was 56 kilobits

01:26:46,119 --> 01:26:52,210
that's a little unusual 38.4 is even

01:26:49,659 --> 01:26:54,849
more unusual but again just by looking

01:26:52,210 --> 01:26:57,159
at the the the signal we can figure out

01:26:54,849 --> 01:26:58,329
what the bit width is and then calculate

01:26:57,159 --> 01:27:00,280
from the bit width we can figure out

01:26:58,329 --> 01:27:05,230
what the baud rate is but let's assume

01:27:00,280 --> 01:27:07,480
that we have here 100 115 - running in a

01:27:05,230 --> 01:27:11,760
1 that's the other problem that we run

01:27:07,480 --> 01:27:15,489
into a serial in most cases it'll be no

01:27:11,760 --> 01:27:17,679
no parity 8 data bits one stop bit but

01:27:15,489 --> 01:27:21,940
that's not guaranteed it could be seven

01:27:17,679 --> 01:27:24,610
data bits one stop bit seven data bits

01:27:21,940 --> 01:27:26,409
one stop bit even parity or odd parity

01:27:24,610 --> 01:27:30,639
odd parity turned out to be one that he

01:27:26,409 --> 01:27:32,590
used a lot in older equipment so again

01:27:30,639 --> 01:27:34,179
kind of look at the signal as it's

01:27:32,590 --> 01:27:35,559
coming across the scope and see if you

01:27:34,179 --> 01:27:37,269
can figure out whether you've got start

01:27:35,559 --> 01:27:39,340
bits and stop bits and how many of those

01:27:37,269 --> 01:27:41,860
things you have so let's assume that

01:27:39,340 --> 01:27:45,489
we're running here and I'm gonna go

01:27:41,860 --> 01:27:47,760
ahead and power it up and see what

01:27:45,489 --> 01:27:47,760
happens

01:27:53,510 --> 01:28:05,930
all right now with any luck let's see

01:27:57,800 --> 01:28:08,300
what we get here Oh yippee Skippy so

01:28:05,930 --> 01:28:13,700
we've got u-boot sitting here and we can

01:28:08,300 --> 01:28:18,080
do a print env and there's all the

01:28:13,700 --> 01:28:19,610
u-boot settings so we now know based on

01:28:18,080 --> 01:28:22,370
this version of u-boot that there is no

01:28:19,610 --> 01:28:23,780
binary blob no device tree structure

01:28:22,370 --> 01:28:26,330
because of the way the u-boot is put

01:28:23,780 --> 01:28:28,489
together and we can then tell it to

01:28:26,330 --> 01:28:31,239
let's just go ahead and live dangerously

01:28:28,489 --> 01:28:31,239
let's reset it

01:28:41,980 --> 01:28:48,920
so it's uncompressing so this is coming

01:28:44,810 --> 01:28:50,630
off of those two crammed FS protocols

01:28:48,920 --> 01:29:01,060
here let me just blow it up a little bit

01:28:50,630 --> 01:29:10,550
here even nets run at 125 megahertz

01:29:01,060 --> 01:29:12,200
Wi-Fi interfaces let's see this one

01:29:10,550 --> 01:29:15,200
actually it turns out that this is a

01:29:12,200 --> 01:29:20,180
MIPS processor this one happens to be

01:29:15,200 --> 01:29:23,440
using a cavium processor and it's

01:29:20,180 --> 01:29:26,690
bringing up the ethernet at this point

01:29:23,440 --> 01:29:29,300
let's see if we can get it to ah there's

01:29:26,690 --> 01:29:30,380
a user prompt username and password I

01:29:29,300 --> 01:29:31,430
haven't gotten to the point where I've

01:29:30,380 --> 01:29:37,970
figured out what the username and

01:29:31,430 --> 01:29:55,280
password is yet any questions is anyone

01:29:37,970 --> 01:30:02,110
still awake yes unfortunately I cannot

01:29:55,280 --> 01:30:05,600
say yeah I'm both under NDA and

01:30:02,110 --> 01:30:07,730
classification issues I can't say but it

01:30:05,600 --> 01:30:11,180
was it was really tricky it was it was

01:30:07,730 --> 01:30:13,130
like you in you know implied there's

01:30:11,180 --> 01:30:15,140
some real-time encryption happening and

01:30:13,130 --> 01:30:18,800
some decryption that was going on you

01:30:15,140 --> 01:30:21,050
had to basically so differential power

01:30:18,800 --> 01:30:22,820
analysis has anybody ever seen

01:30:21,050 --> 01:30:24,980
differential power analysis so with

01:30:22,820 --> 01:30:28,580
differential power analysis we can

01:30:24,980 --> 01:30:31,580
basically monitor the power rails and it

01:30:28,580 --> 01:30:34,000
turns out it takes more power to decrypt

01:30:31,580 --> 01:30:37,280
the one than it does to decrypt a zero

01:30:34,000 --> 01:30:39,800
so if you're watching it you can

01:30:37,280 --> 01:30:41,960
actually pull thousand 24 bit RSA keys

01:30:39,800 --> 01:30:43,490
off of the device without too much

01:30:41,960 --> 01:30:45,080
trouble now

01:30:43,490 --> 01:30:46,490
downside is you have to have physical

01:30:45,080 --> 01:30:48,050
access to the device this is not

01:30:46,490 --> 01:30:50,450
something I can you know stand off a

01:30:48,050 --> 01:30:53,240
couple miles and figure it out I have

01:30:50,450 --> 01:30:54,360
done things where for instance back in

01:30:53,240 --> 01:30:57,930
the day

01:30:54,360 --> 01:30:59,910
crts you used to be able to reproduce

01:30:57,930 --> 01:31:01,740
with a good receiver I could reproduce

01:30:59,910 --> 01:31:04,680
everything that was on the CRT from at

01:31:01,740 --> 01:31:06,270
least from almost a mile away and so I

01:31:04,680 --> 01:31:08,130
could watch exactly what you were doing

01:31:06,270 --> 01:31:09,780
what you were typing all that sort of

01:31:08,130 --> 01:31:11,160
stuff of course it was on my screen it

01:31:09,780 --> 01:31:13,050
was an oscilloscope and it was all in

01:31:11,160 --> 01:31:14,370
green but I could still figure out what

01:31:13,050 --> 01:31:15,690
you were doing and I could see the

01:31:14,370 --> 01:31:17,250
command so you were typing and when you

01:31:15,690 --> 01:31:20,760
entered password I could see what that

01:31:17,250 --> 01:31:22,830
wasn't that was back in my day when I

01:31:20,760 --> 01:31:27,150
worked for some larger name government

01:31:22,830 --> 01:31:29,400
agencies doing Tempest which was a way

01:31:27,150 --> 01:31:30,450
of being able to look at emanations and

01:31:29,400 --> 01:31:31,620
try to figure out what was going on out

01:31:30,450 --> 01:31:35,340
there

01:31:31,620 --> 01:31:41,600
other questions yeah oh I don't answer

01:31:35,340 --> 01:31:44,040
your questions I'm sorry no no again a

01:31:41,600 --> 01:31:45,300
little bit have not had you know once

01:31:44,040 --> 01:31:47,400
you pay the license it's kind of like

01:31:45,300 --> 01:31:50,030
okay you got what you got and you know

01:31:47,400 --> 01:31:52,200
what you got that's another possibility

01:31:50,030 --> 01:31:55,020
you know there are a lot of additional

01:31:52,200 --> 01:31:58,770
tools I mean I developed some really

01:31:55,020 --> 01:32:02,430
nice disassemblers in the past and tools

01:31:58,770 --> 01:32:05,700
for doing analysis of code we did have a

01:32:02,430 --> 01:32:08,010
large manufacturer printers asked us to

01:32:05,700 --> 01:32:10,740
reproduce a piece of code that they had

01:32:08,010 --> 01:32:14,220
done it was originally written in in

01:32:10,740 --> 01:32:17,100
Italy there were like 60 people who

01:32:14,220 --> 01:32:19,350
worked on the code for three years to

01:32:17,100 --> 01:32:22,560
develop this product and then that

01:32:19,350 --> 01:32:24,960
division went under and they said can

01:32:22,560 --> 01:32:28,020
you reproduce the product based on what

01:32:24,960 --> 01:32:32,610
we have here we have the source code the

01:32:28,020 --> 01:32:36,210
source code was 17,000 lines of source

01:32:32,610 --> 01:32:37,920
code and they were actually what it was

01:32:36,210 --> 01:32:39,600
doing is it was taking a scanned image

01:32:37,920 --> 01:32:41,640
converting it into a PDF and then

01:32:39,600 --> 01:32:42,780
emailing it to somebody so it was one of

01:32:41,640 --> 01:32:45,780
those things called a document center

01:32:42,780 --> 01:32:49,860
and it turned out that they were

01:32:45,780 --> 01:32:54,750
instantiating every line every pixel as

01:32:49,860 --> 01:32:55,950
another object I mean this was like and

01:32:54,750 --> 01:32:59,430
and so you could tell the difference

01:32:55,950 --> 01:33:01,170
between Paolo's code and just seppies

01:32:59,430 --> 01:33:05,220
code because they all had their own

01:33:01,170 --> 01:33:06,690
particular coding styles and we took a

01:33:05,220 --> 01:33:07,310
look at it I mean I have some tools that

01:33:06,690 --> 01:33:09,410
do

01:33:07,310 --> 01:33:12,170
you know reverse engineering of large

01:33:09,410 --> 01:33:14,450
code bases like this and it broke all of

01:33:12,170 --> 01:33:16,700
them it was horrible

01:33:14,450 --> 01:33:18,920
but we said you know what we think we

01:33:16,700 --> 01:33:21,410
know what you want us to do let us try

01:33:18,920 --> 01:33:24,740
and we were able to reproduce it with

01:33:21,410 --> 01:33:27,260
open source code two people six weeks

01:33:24,740 --> 01:33:29,060
and we had 95% of the functionality

01:33:27,260 --> 01:33:31,150
working and we knew how to solve the

01:33:29,060 --> 01:33:32,900
other 5% and they said that's enough

01:33:31,150 --> 01:33:38,360
we've seen enough

01:33:32,900 --> 01:33:43,550
oh by the time we finished we had 50

01:33:38,360 --> 01:33:45,530
lines of code that was it total 50 lines

01:33:43,550 --> 01:33:47,660
of code everything else was just piped

01:33:45,530 --> 01:33:49,640
this to this and do this thing and and

01:33:47,660 --> 01:33:51,140
it was like you know it's just a shell

01:33:49,640 --> 01:33:53,000
script basically and we could reproduce

01:33:51,140 --> 01:33:55,370
this thing and like 50 lines of code and

01:33:53,000 --> 01:33:56,660
the 50 lines of code was some some Java

01:33:55,370 --> 01:33:59,450
that somebody wanted because they wanted

01:33:56,660 --> 01:34:02,090
to have a display okay well we'll give

01:33:59,450 --> 01:34:06,080
you a display sure success you know what

01:34:02,090 --> 01:34:07,820
do you want and that was that was all

01:34:06,080 --> 01:34:09,440
the code was just basically to do the

01:34:07,820 --> 01:34:20,480
display that they wanted to have this as

01:34:09,440 --> 01:34:23,770
success you know okay question that's

01:34:20,480 --> 01:34:23,770
right yeah

01:34:24,420 --> 01:34:32,440
yeah that's a good point you know

01:34:29,199 --> 01:34:35,230
oftentimes oh I I should have mentioned

01:34:32,440 --> 01:34:39,219
this you always get two of whatever

01:34:35,230 --> 01:34:42,159
device you're going to have I mean I

01:34:39,219 --> 01:34:43,780
guess it seems obvious but because the

01:34:42,159 --> 01:34:46,840
first one you're probably going to

01:34:43,780 --> 01:34:48,730
destroy and then once you learn

01:34:46,840 --> 01:34:49,420
everything you need to learn then you do

01:34:48,730 --> 01:34:51,099
the second one

01:34:49,420 --> 01:34:52,750
but yeah you always want to make sure

01:34:51,099 --> 01:34:55,389
that at least two of them fall off the

01:34:52,750 --> 01:35:17,050
truck so that you can figure out what it

01:34:55,389 --> 01:35:18,670
is question given enough time and money

01:35:17,050 --> 01:35:21,760
anything is possible

01:35:18,670 --> 01:35:24,219
now the question is how much time and

01:35:21,760 --> 01:35:25,929
money is it going to be understand that

01:35:24,219 --> 01:35:27,489
you know when you're dealing with

01:35:25,929 --> 01:35:28,929
typical black hats they're gonna be

01:35:27,489 --> 01:35:31,329
trying to take things apart their

01:35:28,929 --> 01:35:33,159
motivations primarily money they're

01:35:31,329 --> 01:35:34,150
trying to hack credit card numbers or

01:35:33,159 --> 01:35:36,010
something they're trying to get some

01:35:34,150 --> 01:35:38,739
money out of it and if you make it

01:35:36,010 --> 01:35:41,260
sufficiently hard they will give up and

01:35:38,739 --> 01:35:43,119
go onto a softer target now at what

01:35:41,260 --> 01:35:46,090
point is it sufficiently hard well

01:35:43,119 --> 01:35:48,940
that's up for debate in the case of

01:35:46,090 --> 01:35:51,610
state-sponsored hackers they effectively

01:35:48,940 --> 01:35:53,409
have no budget and they have the best

01:35:51,610 --> 01:35:55,690
and brightest that they have been able

01:35:53,409 --> 01:35:58,270
to find and there are some really clever

01:35:55,690 --> 01:36:00,179
people that are in that business and if

01:35:58,270 --> 01:36:03,760
you're going against state-sponsored

01:36:00,179 --> 01:36:05,409
they will own you eventually it may take

01:36:03,760 --> 01:36:11,230
them a little while but if they really

01:36:05,409 --> 01:36:13,119
want it they'll get it absolutely you

01:36:11,230 --> 01:36:16,270
want to know who's trying to hack your

01:36:13,119 --> 01:36:17,829
system and unfortunately today a lot of

01:36:16,270 --> 01:36:20,139
companies don't spend enough time doing

01:36:17,829 --> 01:36:21,670
threat modeling when you're trying to

01:36:20,139 --> 01:36:22,900
develop secure code and that's the other

01:36:21,670 --> 01:36:24,309
thing that we do we help people

01:36:22,900 --> 01:36:26,980
understand what it means to develop

01:36:24,309 --> 01:36:29,650
secure code and so when you're in that

01:36:26,980 --> 01:36:31,900
particular business you're trying to

01:36:29,650 --> 01:36:34,449
explain to them that the security

01:36:31,900 --> 01:36:35,739
engineering can cost at least as much as

01:36:34,449 --> 01:36:39,010
the total product

01:36:35,739 --> 01:36:41,260
if not more if you really want to lock

01:36:39,010 --> 01:36:42,850
it down so now your threat modeling

01:36:41,260 --> 01:36:45,040
becomes a factor you know we're talking

01:36:42,850 --> 01:36:47,560
about risk mitigation here what risks do

01:36:45,040 --> 01:36:49,719
I want to accept what risks do I want to

01:36:47,560 --> 01:36:52,870
transfer to a subcontractor so it'll be

01:36:49,719 --> 01:36:57,660
their problem I'm talking to you Toshiba

01:36:52,870 --> 01:36:59,710
I mean you know Toyota and you know so

01:36:57,660 --> 01:37:01,210
you're going to transfer some of that

01:36:59,710 --> 01:37:02,469
you're going to accept some of the risk

01:37:01,210 --> 01:37:04,210
you're going to try and mitigate the

01:37:02,469 --> 01:37:07,210
risk by adding additional security

01:37:04,210 --> 01:37:10,570
measures in place obviously when we're

01:37:07,210 --> 01:37:12,130
using things like TPMS and secure data

01:37:10,570 --> 01:37:15,400
stores that makes things a little bit

01:37:12,130 --> 01:37:17,620
harder obviously and then of course

01:37:15,400 --> 01:37:20,320
using TPMS we need to understand which

01:37:17,620 --> 01:37:22,090
type of TPM because the Chinese have

01:37:20,320 --> 01:37:24,489
their own TPM that have their own

01:37:22,090 --> 01:37:28,060
encryption algorithms in them they do

01:37:24,489 --> 01:37:30,760
the standard TPM 1.2 stuff but they also

01:37:28,060 --> 01:37:33,610
do something else and it turns out that

01:37:30,760 --> 01:37:34,960
a lot of machines a lot of laptops and

01:37:33,610 --> 01:37:38,920
things that come out of mainland China

01:37:34,960 --> 01:37:42,670
have the SSA has the SX 88 chips in them

01:37:38,920 --> 01:37:44,469
and that's a different kind of TPM and

01:37:42,670 --> 01:37:48,610
then you wonder okay is there a backdoor

01:37:44,469 --> 01:37:49,960
in there but they the reason they

01:37:48,610 --> 01:37:52,360
created that chip is because they were

01:37:49,960 --> 01:37:53,800
afraid that TPMS from Infineon and all

01:37:52,360 --> 01:37:55,590
these other places also had backdoors on

01:37:53,800 --> 01:38:00,480
them so go figure

01:37:55,590 --> 01:38:00,480
any other questions yeah

01:38:15,220 --> 01:38:18,220
haha

01:38:18,610 --> 01:38:23,690
occasionally what we find are some

01:38:22,310 --> 01:38:25,880
really interesting things they call them

01:38:23,690 --> 01:38:28,400
door knock protocols America so

01:38:25,880 --> 01:38:30,890
basically you hit this port this port

01:38:28,400 --> 01:38:33,800
this port in this order and it unlocks

01:38:30,890 --> 01:38:35,210
something door knock protocols are

01:38:33,800 --> 01:38:37,520
really interesting to see them

01:38:35,210 --> 01:38:39,770
implemented one of the easiest ways to

01:38:37,520 --> 01:38:42,230
avoid that kind of problem as you're

01:38:39,770 --> 01:38:44,510
trying to engineer secure solution peer

01:38:42,230 --> 01:38:46,670
review I mean it sounds stupid but

01:38:44,510 --> 01:38:48,980
having more than one person look at it

01:38:46,670 --> 01:38:52,460
go what the hell is that why are you

01:38:48,980 --> 01:38:54,080
doing that is a great thing I mean you

01:38:52,460 --> 01:38:56,350
take a look at the numbers between

01:38:54,080 --> 01:38:58,610
proprietary code versus open source code

01:38:56,350 --> 01:39:01,640
proprietary code tend to hat tends to

01:38:58,610 --> 01:39:03,710
have nine times more errors in it than

01:39:01,640 --> 01:39:05,060
open source code simply because if

01:39:03,710 --> 01:39:07,730
nothing else it's because of the peer

01:39:05,060 --> 01:39:09,830
review now that does not mean that open

01:39:07,730 --> 01:39:14,000
source code is impervious look at

01:39:09,830 --> 01:39:16,240
heartbleed that was a big one and it had

01:39:14,000 --> 01:39:18,830
been in there and everybody was using

01:39:16,240 --> 01:39:20,990
SSL for five years before anybody ever

01:39:18,830 --> 01:39:23,780
find it found it it had been peer

01:39:20,990 --> 01:39:26,740
reviewed but they just had didn't happen

01:39:23,780 --> 01:39:26,740
to see that yeah

01:39:33,160 --> 01:39:37,990
mostly greed you know understand that

01:39:36,460 --> 01:39:40,330
when you're trying to build a new device

01:39:37,990 --> 01:39:41,500
that nobody's built before or something

01:39:40,330 --> 01:39:44,590
that's supposed to be better than anyone

01:39:41,500 --> 01:39:47,530
else is built before the the market is

01:39:44,590 --> 01:39:50,320
you're either number one number two or

01:39:47,530 --> 01:39:52,390
nobody knows who you are we can easily

01:39:50,320 --> 01:39:55,120
say okay who's the number one bookseller

01:39:52,390 --> 01:39:58,330
on the internet Amazon

01:39:55,120 --> 01:40:05,950
who's number two Barnes & Noble good

01:39:58,330 --> 01:40:08,290
who's number three maybe that's that's

01:40:05,950 --> 01:40:11,200
the thing once you get to number three

01:40:08,290 --> 01:40:15,130
nobody knows you I mean you might as

01:40:11,200 --> 01:40:18,910
well not even bother so the the problem

01:40:15,130 --> 01:40:20,740
here is it time to market is everything

01:40:18,910 --> 01:40:21,970
you know if I've got this really cool

01:40:20,740 --> 01:40:23,320
thing and I need to get it out in the

01:40:21,970 --> 01:40:26,350
market I need to get it out there before

01:40:23,320 --> 01:40:28,300
anybody else does we take shortcuts we

01:40:26,350 --> 01:40:30,580
don't do the due diligence we don't do

01:40:28,300 --> 01:40:32,650
the security engineering you know

01:40:30,580 --> 01:40:34,900
understand what's the mindset today the

01:40:32,650 --> 01:40:36,610
mindset today is let's say you've just

01:40:34,900 --> 01:40:39,790
bought your brand new iPhone X what's

01:40:36,610 --> 01:40:43,120
the first thing you do plug it in and

01:40:39,790 --> 01:40:47,410
then it yeah well yeah the garbage okay

01:40:43,120 --> 01:40:51,520
we III don't I mean I've got you know I

01:40:47,410 --> 01:40:53,650
use Sony but timbered would actually be

01:40:51,520 --> 01:40:57,940
happy about that since he works for Sony

01:40:53,650 --> 01:40:59,860
but in any case the the the issue here

01:40:57,940 --> 01:41:01,990
is the very first thing you do is you

01:40:59,860 --> 01:41:05,980
plug it in and you update the firmware

01:41:01,990 --> 01:41:07,120
so manufacturers know that the very

01:41:05,980 --> 01:41:10,090
first thing you're supposed to do is

01:41:07,120 --> 01:41:12,700
update the firmware so they ship it with

01:41:10,090 --> 01:41:15,910
firmware that has boo coos and bugs in

01:41:12,700 --> 01:41:17,410
it security problems all kinds of stuff

01:41:15,910 --> 01:41:20,320
just to get it into the distribution

01:41:17,410 --> 01:41:21,520
channel once it's in the distribution

01:41:20,320 --> 01:41:22,480
channel they figure the first thing

01:41:21,520 --> 01:41:23,470
you're gonna do when you get it home

01:41:22,480 --> 01:41:25,600
you're gonna plug it in you're gonna

01:41:23,470 --> 01:41:27,760
update it so that gives them an extra

01:41:25,600 --> 01:41:29,140
six months you know anywhere from three

01:41:27,760 --> 01:41:31,660
to six months in the distribution

01:41:29,140 --> 01:41:33,670
channel before they have to worry about

01:41:31,660 --> 01:41:35,710
anybody actually using this really buggy

01:41:33,670 --> 01:41:38,260
software so that gives them an

01:41:35,710 --> 01:41:40,300
opportunity to fix it and then pre

01:41:38,260 --> 01:41:41,650
position the update so that as soon as

01:41:40,300 --> 01:41:44,240
you update your phone everything's good

01:41:41,650 --> 01:41:46,490
now that doesn't keep you from

01:41:44,240 --> 01:41:47,810
breaking the iPhone within 24 hours of

01:41:46,490 --> 01:41:50,480
them new coming out with a new firmware

01:41:47,810 --> 01:41:51,650
but that's a different problem but

01:41:50,480 --> 01:41:53,600
that's the kind of thing and that's the

01:41:51,650 --> 01:41:58,100
mindset that a lot of manufacturers are

01:41:53,600 --> 01:42:00,530
in these days even my I saw I had a LED

01:41:58,100 --> 01:42:01,520
television set from LG and the first

01:42:00,530 --> 01:42:05,120
thing you do is you update the firmware

01:42:01,520 --> 01:42:06,920
when you plug the TV in really that's

01:42:05,120 --> 01:42:08,810
something I mean most people wouldn't

01:42:06,920 --> 01:42:11,930
think to plug in an appliance into the

01:42:08,810 --> 01:42:13,430
Internet to update its firmware now I

01:42:11,930 --> 01:42:15,710
always am suspicious about things like

01:42:13,430 --> 01:42:18,350
that so I kind of turn on Wireshark and

01:42:15,710 --> 01:42:19,240
I watch what it does but that's a

01:42:18,350 --> 01:42:40,100
different story

01:42:19,240 --> 01:42:41,840
anything else yeah question yeah there

01:42:40,100 --> 01:42:44,720
are going to be cases like that I mean

01:42:41,840 --> 01:42:47,300
for instance they the third People's

01:42:44,720 --> 01:42:48,500
Liberation Army which used to be the

01:42:47,300 --> 01:42:49,520
name they've changed the name now

01:42:48,500 --> 01:42:52,940
because everybody knows who the three

01:42:49,520 --> 01:42:57,410
PLA is but they had a captain that had

01:42:52,940 --> 01:42:59,930
been working at Sea Gate in Malaysia at

01:42:57,410 --> 01:43:01,580
one of their plants and every hard area

01:42:59,930 --> 01:43:04,940
that got shipped out had something

01:43:01,580 --> 01:43:07,430
special on the hard drive they found him

01:43:04,940 --> 01:43:09,980
they caught him he pulled out his black

01:43:07,430 --> 01:43:11,480
passport and they deported him but now

01:43:09,980 --> 01:43:14,090
we don't know how many of those hard

01:43:11,480 --> 01:43:15,890
drives got out before they found him so

01:43:14,090 --> 01:43:18,590
those kinds of things that's kind of a

01:43:15,890 --> 01:43:20,360
one-off I mean it's a very specialized

01:43:18,590 --> 01:43:23,480
system you're not going to see it being

01:43:20,360 --> 01:43:25,370
done very often and so you know

01:43:23,480 --> 01:43:27,920
fortunately that's been so long ago now

01:43:25,370 --> 01:43:30,110
that most of those hard drives are

01:43:27,920 --> 01:43:34,930
already dead but it's still the

01:43:30,110 --> 01:43:38,690
possibility if you find a box an old box

01:43:34,930 --> 01:43:41,990
not very common because it's it's always

01:43:38,690 --> 01:43:44,510
you know what's the payback how quickly

01:43:41,990 --> 01:43:47,750
can I achieve the goal that I'm trying

01:43:44,510 --> 01:43:50,780
to achieve and if I got a custom create

01:43:47,750 --> 01:43:53,090
some whacked out thing to reverse

01:43:50,780 --> 01:43:54,830
engineer this stuff it's just like you

01:43:53,090 --> 01:43:56,420
know is it economically feasible if

01:43:54,830 --> 01:43:58,100
somebody's paying me then absolutely

01:43:56,420 --> 01:44:01,220
I'll do whatever you tell me to do

01:43:58,100 --> 01:44:03,770
not that I'm a bad guy or anything but

01:44:01,220 --> 01:44:05,300
you know the reality is if you're paid

01:44:03,770 --> 01:44:06,230
to do reverse engineering that's what

01:44:05,300 --> 01:44:07,550
you're paid to do and there are a lot of

01:44:06,230 --> 01:44:10,550
companies out there that do reverse

01:44:07,550 --> 01:44:13,090
engineering now you know obviously

01:44:10,550 --> 01:44:16,220
you're trying to to do the the quickest

01:44:13,090 --> 01:44:17,570
solution because nobody wants to hear

01:44:16,220 --> 01:44:18,920
that well you know it's going to take me

01:44:17,570 --> 01:44:20,240
six months to figure out how this

01:44:18,920 --> 01:44:22,460
protocol works especially with

01:44:20,240 --> 01:44:24,710
encryption the encryption is really

01:44:22,460 --> 01:44:27,080
really tough encryption is not the

01:44:24,710 --> 01:44:28,430
end-all be-all because it all becomes an

01:44:27,080 --> 01:44:31,880
issue of whether or not you can retrieve

01:44:28,430 --> 01:44:34,640
the keys data in use is a real

01:44:31,880 --> 01:44:37,300
interesting problem turns out that what

01:44:34,640 --> 01:44:40,460
we see in data center is a lot of times

01:44:37,300 --> 01:44:42,500
as you start migrating VMs from one

01:44:40,460 --> 01:44:46,300
machine to another they take all their

01:44:42,500 --> 01:44:46,300
memory and they write it off to disk so

01:44:46,390 --> 01:44:51,620
passwords keys things like that that

01:44:50,240 --> 01:44:54,530
happened to be sitting in memory are now

01:44:51,620 --> 01:44:58,370
on disk and it makes it real easy to

01:44:54,530 --> 01:45:01,550
find them not necessarily not

01:44:58,370 --> 01:45:03,650
necessarily and and this is again to get

01:45:01,550 --> 01:45:05,900
it out quick they did a kind of crappy

01:45:03,650 --> 01:45:10,130
job of doing their security engineering

01:45:05,900 --> 01:45:12,050
so you find weird stuff like that we

01:45:10,130 --> 01:45:14,600
have a cybersecurity class we teach a

01:45:12,050 --> 01:45:17,300
cybersecurity class and in that class we

01:45:14,600 --> 01:45:19,610
actually do this we run a VM and we

01:45:17,300 --> 01:45:21,790
snapshot it and then you look in the VM

01:45:19,610 --> 01:45:24,790
and you can actually find the password

01:45:21,790 --> 01:45:24,790
yeah

01:45:28,830 --> 01:45:35,530
reverse engineering is almost always

01:45:31,270 --> 01:45:38,050
done as a as kind of a temporary blog

01:45:35,530 --> 01:45:40,300
sort of thing and the sites will pop up

01:45:38,050 --> 01:45:43,600
and then disappear as people start

01:45:40,300 --> 01:45:44,560
getting angry with them you know you

01:45:43,600 --> 01:45:47,350
shouldn't have done that to my machine

01:45:44,560 --> 01:45:50,230
I'm gonna crush you you know that kind

01:45:47,350 --> 01:45:52,060
of stuff so unfortunately there are some

01:45:50,230 --> 01:45:53,650
books that are out right now on reverse

01:45:52,060 --> 01:45:56,260
engineering in particular is a nice one

01:45:53,650 --> 01:45:59,770
that came recently came out on reverse

01:45:56,260 --> 01:46:01,510
engineering Linux binaries definitely an

01:45:59,770 --> 01:46:04,660
interesting one you can pick it up on a

01:46:01,510 --> 01:46:06,160
Kindle actually I just I just got it

01:46:04,660 --> 01:46:09,640
myself I'm still going through it at

01:46:06,160 --> 01:46:11,590
this point but I forget right offhand

01:46:09,640 --> 01:46:13,930
send me an email Mike at the PTR

01:46:11,590 --> 01:46:16,030
group.com I'll tell you who it is okay

01:46:13,930 --> 01:46:17,250
we're out of time I appreciate it thank

01:46:16,030 --> 01:46:24,350
you very much

01:46:17,250 --> 01:46:24,350

YouTube URL: https://www.youtube.com/watch?v=7v7UaMsgg_c


