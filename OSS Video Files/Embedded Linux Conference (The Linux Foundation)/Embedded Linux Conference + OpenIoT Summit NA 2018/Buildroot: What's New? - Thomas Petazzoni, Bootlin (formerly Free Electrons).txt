Title: Buildroot: What's New? - Thomas Petazzoni, Bootlin (formerly Free Electrons)
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Buildroot: What's New? - Thomas Petazzoni, Bootlin (formerly Free Electrons)

Buildroot is a popular and easy to use embedded Linux build system. Within minutes, it is capable of generating lightweight and customized Linux systems, including the cross-compilation toolchain, kernel and bootloader images, as well as a wide variety of userspace libraries and programs.

After a short introduction about Buildroot, this talk will go through the numerous new features and improvements that have appeared in the last few years, and show how they can be useful for developers, users and contributors.

This talk is an updated version of the one given at ELCE 2017. 

About Thomas Petazzoni
Thomas Petazzoni is CTO and embedded Linux developer at Bootlin (formerly Free Electrons). He is a co-maintainer of the Buildroot project and also a contributor to the Linux kernel, helping adding support for Marvell ARM processors.
Captions: 
	00:00:00,030 --> 00:00:05,299
good afternoon first of all I apologize

00:00:03,149 --> 00:00:08,179
for my voice I lost it's in the flights

00:00:05,299 --> 00:00:11,010
to the US so my voice is a bit unusual

00:00:08,179 --> 00:00:12,990
but I guess that do it for for this

00:00:11,010 --> 00:00:13,710
afternoon welcome to my session thanks

00:00:12,990 --> 00:00:16,410
for coming

00:00:13,710 --> 00:00:18,960
if you have edited this talk at the ELC

00:00:16,410 --> 00:00:20,820
II in Prague in last October that's

00:00:18,960 --> 00:00:22,920
gonna be pretty much the same talk so

00:00:20,820 --> 00:00:25,830
it's still time for you to leave and

00:00:22,920 --> 00:00:28,439
attend another session if not then thank

00:00:25,830 --> 00:00:30,720
you for joining I'm gonna be talking

00:00:28,439 --> 00:00:33,230
about Bill route and see what's new in

00:00:30,720 --> 00:00:36,270
this project since the last few years I

00:00:33,230 --> 00:00:38,910
work for a company called boot lean

00:00:36,270 --> 00:00:41,579
formerly known as free elections we

00:00:38,910 --> 00:00:44,460
recently changed our name to this brand

00:00:41,579 --> 00:00:47,149
new name boot lane but were still the

00:00:44,460 --> 00:00:49,620
same company we do embedded Linux

00:00:47,149 --> 00:00:52,020
engineering and training and I

00:00:49,620 --> 00:00:55,370
personally work on kernel stuff as well

00:00:52,020 --> 00:00:59,039
as route and I come from France so

00:00:55,370 --> 00:01:01,649
before we get started as short pole who

00:00:59,039 --> 00:01:06,390
already knows about Pierre route in the

00:01:01,649 --> 00:01:12,210
room so almost everybody who is already

00:01:06,390 --> 00:01:16,680
using it like good Alf of the room who

00:01:12,210 --> 00:01:17,220
is using oh we docked oh another Alf of

00:01:16,680 --> 00:01:19,320
the room

00:01:17,220 --> 00:01:23,549
with some intersection between the two

00:01:19,320 --> 00:01:27,840
interestingly open wrt later or another

00:01:23,549 --> 00:01:35,009
of its ok few more people another build

00:01:27,840 --> 00:01:44,220
system ok what build system ok other

00:01:35,009 --> 00:01:45,720
people using what ok good so for most of

00:01:44,220 --> 00:01:48,960
you that's probably something that's

00:01:45,720 --> 00:01:51,180
already known a short introduction about

00:01:48,960 --> 00:01:53,070
what it is it's an embedded Linux build

00:01:51,180 --> 00:01:55,530
system so they the point is to build

00:01:53,070 --> 00:01:57,540
from source a cross compilation tool

00:01:55,530 --> 00:01:59,850
chain root filesystem with a number of

00:01:57,540 --> 00:02:02,640
libraries and applications all built by

00:01:59,850 --> 00:02:05,640
cross compilation Bill Kindle image and

00:02:02,640 --> 00:02:08,970
potentially put other images as well one

00:02:05,640 --> 00:02:12,650
of its kind of strong selling points is

00:02:08,970 --> 00:02:15,409
that it's reasonably fast pretty simple

00:02:12,650 --> 00:02:17,329
allows you to build a simple root

00:02:15,409 --> 00:02:20,540
filesystem in a matter of two minutes

00:02:17,329 --> 00:02:22,099
it's easy to use and understand and it's

00:02:20,540 --> 00:02:24,230
all based on kind of standard

00:02:22,099 --> 00:02:26,090
technologies Kay config like the Linux

00:02:24,230 --> 00:02:28,489
kernel for defining the configuration

00:02:26,090 --> 00:02:30,170
and based on make files for actually

00:02:28,489 --> 00:02:33,200
describing what the bill is going to do

00:02:30,170 --> 00:02:36,170
it's easily allows to generate small

00:02:33,200 --> 00:02:38,150
file systems the default root filesystem

00:02:36,170 --> 00:02:39,590
let it build is just two Meg's so then

00:02:38,150 --> 00:02:41,209
you can add up more libraries more

00:02:39,590 --> 00:02:43,220
application but at least the baseline is

00:02:41,209 --> 00:02:45,019
already small and you can optimize that

00:02:43,220 --> 00:02:47,239
further down if you need but it's kind

00:02:45,019 --> 00:02:49,579
of a reasonable baseline we've got more

00:02:47,239 --> 00:02:53,209
than 2,300 packages and that's growing

00:02:49,579 --> 00:02:54,680
pretty much every day we generate

00:02:53,209 --> 00:02:56,629
filesystem images and not the

00:02:54,680 --> 00:02:58,819
distribution so it's kind of one of the

00:02:56,629 --> 00:03:01,310
big difference with Oh a yoke tonne

00:02:58,819 --> 00:03:03,049
which builds a distribution with binary

00:03:01,310 --> 00:03:04,760
packages we don't do that in pure wood

00:03:03,049 --> 00:03:06,260
we built just to read my system image

00:03:04,760 --> 00:03:08,329
that can have fixed in stone and if you

00:03:06,260 --> 00:03:10,370
want to build a new version of it you

00:03:08,329 --> 00:03:12,290
just have to rerun the tool to rebuild a

00:03:10,370 --> 00:03:15,260
new image so we don't have any package

00:03:12,290 --> 00:03:18,109
management system integrated it's a very

00:03:15,260 --> 00:03:20,329
neutral project it's like fully open

00:03:18,109 --> 00:03:21,349
source number number of contributors

00:03:20,329 --> 00:03:25,160
coming from different companies

00:03:21,349 --> 00:03:28,790
obviously it's completely independent

00:03:25,160 --> 00:03:30,379
from any specific company the community

00:03:28,790 --> 00:03:34,250
is pretty active and I have a bunch of

00:03:30,379 --> 00:03:36,139
slides about that in a few few slides we

00:03:34,250 --> 00:03:37,940
ship stable releases every three months

00:03:36,139 --> 00:03:39,260
and I talk more about the release

00:03:37,940 --> 00:03:42,500
schedule because there have been some

00:03:39,260 --> 00:03:44,930
changes and improvements recently and it

00:03:42,500 --> 00:03:46,609
started in 2001 which means it's

00:03:44,930 --> 00:03:48,949
probably the oldest still maintained

00:03:46,609 --> 00:03:50,810
build system I'm not sure so I'm going

00:03:48,949 --> 00:03:53,620
to say I'm saying maybe but I think it's

00:03:50,810 --> 00:03:57,769
the oldest still maintained build system

00:03:53,620 --> 00:04:00,650
so I gave this talk four years ago here

00:03:57,769 --> 00:04:03,049
at Yale team which was what's new so

00:04:00,650 --> 00:04:06,079
it's been four years and I thought it

00:04:03,049 --> 00:04:07,750
was time to kind of refresh the people

00:04:06,079 --> 00:04:09,979
were interested in pure root and a

00:04:07,750 --> 00:04:12,049
number of things have changed so we'll

00:04:09,979 --> 00:04:14,060
talk about the activity of the project

00:04:12,049 --> 00:04:15,859
the release schedule and the

00:04:14,060 --> 00:04:17,690
architecture support tool chain support

00:04:15,859 --> 00:04:19,549
a number of infrastructure improvement

00:04:17,690 --> 00:04:23,409
in the project testing improvements and

00:04:19,549 --> 00:04:23,409
a bunch of other details

00:04:23,570 --> 00:04:29,630
so the activity of the project is shown

00:04:26,060 --> 00:04:32,030
on that first slides the tour commits

00:04:29,630 --> 00:04:35,330
activity per release so we've got

00:04:32,030 --> 00:04:37,580
approximately 1,000 to 1,500 comments

00:04:35,330 --> 00:04:39,110
per valise and we ship one release every

00:04:37,580 --> 00:04:41,030
three months so which and it's fairly

00:04:39,110 --> 00:04:44,330
stable over time with some variations

00:04:41,030 --> 00:04:47,450
but it's reasonably stable

00:04:44,330 --> 00:04:49,670
we've got about hundreds hundred ten

00:04:47,450 --> 00:04:51,830
contributory per release and it's also

00:04:49,670 --> 00:04:54,200
fairly stable over time so as you can

00:04:51,830 --> 00:04:57,170
see it has grown from the twenty twelve

00:04:54,200 --> 00:04:59,800
years all the way up to now and we've

00:04:57,170 --> 00:05:02,210
reached kind of a fairly stable point

00:04:59,800 --> 00:05:05,540
the mailing list is fairly active as

00:05:02,210 --> 00:05:07,400
well with about two K to 3 K messages

00:05:05,540 --> 00:05:10,640
amongst on the mailing list so it's so

00:05:07,400 --> 00:05:13,220
pretty active and the number of packages

00:05:10,640 --> 00:05:15,800
as I've said has grown over time so

00:05:13,220 --> 00:05:18,950
we're now up to 2,300 packages

00:05:15,800 --> 00:05:20,750
integrated and as I said every day

00:05:18,950 --> 00:05:23,420
people are contributing more and more

00:05:20,750 --> 00:05:28,100
packages to suit their own specific

00:05:23,420 --> 00:05:30,530
needs in terms of release schedule

00:05:28,100 --> 00:05:33,470
the basic things haven't changed much

00:05:30,530 --> 00:05:35,270
over the last years we still do one

00:05:33,470 --> 00:05:37,790
release every three months so we've got

00:05:35,270 --> 00:05:40,820
one release in February in May in August

00:05:37,790 --> 00:05:42,470
and in October and we never skipped a

00:05:40,820 --> 00:05:44,810
little release or missed the release

00:05:42,470 --> 00:05:48,200
date or well maybe by like two or three

00:05:44,810 --> 00:05:49,280
days something like that but not much

00:05:48,200 --> 00:05:52,130
more than that so it's a pretty

00:05:49,280 --> 00:05:54,500
impressive achievement and we'll be

00:05:52,130 --> 00:05:56,420
celebrating next year the the the ten

00:05:54,500 --> 00:06:00,140
years of the that release cycle because

00:05:56,420 --> 00:06:03,980
that's started in 2009 2009 Oh - was our

00:06:00,140 --> 00:06:06,890
first stable release and the change that

00:06:03,980 --> 00:06:09,380
was made last year is to introduce the

00:06:06,890 --> 00:06:12,830
concept for a release maintained for a

00:06:09,380 --> 00:06:15,590
longer period of time so until 2017 Oh -

00:06:12,830 --> 00:06:18,080
we're not doing any really serious

00:06:15,590 --> 00:06:20,840
maintenance on past releases so as soon

00:06:18,080 --> 00:06:22,490
as new release was up that was the one

00:06:20,840 --> 00:06:25,190
you had to use if you wanted to have any

00:06:22,490 --> 00:06:29,050
sort of support who were simply dropping

00:06:25,190 --> 00:06:32,210
support for any past release so in since

00:06:29,050 --> 00:06:35,150
2017 Oh - we decided to have one hour so

00:06:32,210 --> 00:06:36,570
LCS or one term is a maybe a little bit

00:06:35,150 --> 00:06:38,550
of a stretch here because we are

00:06:36,570 --> 00:06:40,010
only a one-year maintenance period but

00:06:38,550 --> 00:06:43,140
it's still better than just three months

00:06:40,010 --> 00:06:45,780
so 2017 no two has been maintained for a

00:06:43,140 --> 00:06:48,780
year so until 2018 or two that's been

00:06:45,780 --> 00:06:53,220
released just two weeks ago or something

00:06:48,780 --> 00:06:56,130
like that and we will do that every year

00:06:53,220 --> 00:06:58,650
so I know that 20 1802 has been released

00:06:56,130 --> 00:07:00,330
we've stopped the maintenance of 2017

00:06:58,650 --> 00:07:04,440
no.2 and we've started the maintenance

00:07:00,330 --> 00:07:07,800
of 2018 or two for one year until 2019

00:07:04,440 --> 00:07:10,680
or two office Li so for 2017 Oh - we

00:07:07,800 --> 00:07:13,350
made 10 point releases so almost every

00:07:10,680 --> 00:07:16,410
month there has been a point release

00:07:13,350 --> 00:07:19,620
integrating mainly security fixes and

00:07:16,410 --> 00:07:21,840
bug fixes so we try to avoid upgrading

00:07:19,620 --> 00:07:23,580
packages to avoid breaking people having

00:07:21,840 --> 00:07:27,720
existing systems the idea is just to

00:07:23,580 --> 00:07:30,480
back port security fixes or build fixes

00:07:27,720 --> 00:07:32,820
or fixes to license information all the

00:07:30,480 --> 00:07:34,890
things that that should normally not

00:07:32,820 --> 00:07:37,560
break things for for users so we've had

00:07:34,890 --> 00:07:40,830
about almost hate on read commits in

00:07:37,560 --> 00:07:42,660
this in this branch that has stopped to

00:07:40,830 --> 00:07:44,280
be maintained two weeks ago and we've

00:07:42,660 --> 00:07:46,110
started doing that on in your release so

00:07:44,280 --> 00:07:50,060
that's something where we will be trying

00:07:46,110 --> 00:07:53,160
to do moving forward and we hope that

00:07:50,060 --> 00:07:55,050
users will help in this will help us in

00:07:53,160 --> 00:07:56,610
this effort by reporting the issues that

00:07:55,050 --> 00:07:59,760
they have faced if they are using the

00:07:56,610 --> 00:08:02,010
the maintained branch so if you are

00:07:59,760 --> 00:08:05,610
using peer route and not a grading on a

00:08:02,010 --> 00:08:07,800
three-months rhythm I would encourage

00:08:05,610 --> 00:08:10,440
you to pick one of the auto release so

00:08:07,800 --> 00:08:12,690
that you join this like more long-term

00:08:10,440 --> 00:08:15,690
maintenance effort and so you can also

00:08:12,690 --> 00:08:19,550
plan on yearly updates of your plot

00:08:15,690 --> 00:08:23,850
roads infrastructure so that's I think

00:08:19,550 --> 00:08:28,320
the one of the big change that occurred

00:08:23,850 --> 00:08:30,720
last year in terms of maintenance we

00:08:28,320 --> 00:08:33,750
used to have that single commit or

00:08:30,720 --> 00:08:35,910
project maintainer model a little bit

00:08:33,750 --> 00:08:38,760
like Linux channel but of course to a

00:08:35,910 --> 00:08:41,070
different scale we no added two

00:08:38,760 --> 00:08:43,110
additional committers that have the same

00:08:41,070 --> 00:08:45,540
like I would say power just three people

00:08:43,110 --> 00:08:49,260
that can commit to the the official repo

00:08:45,540 --> 00:08:52,640
so I've been part of this team of

00:08:49,260 --> 00:08:55,470
three people and that has helped

00:08:52,640 --> 00:08:59,460
integrate more patches and review more

00:08:55,470 --> 00:09:01,590
work and get more stuff merged in a more

00:08:59,460 --> 00:09:05,220
reasonable timeframe we still do

00:09:01,590 --> 00:09:08,580
physical meetings so every two twice a

00:09:05,220 --> 00:09:10,860
year we have a meeting in one

00:09:08,580 --> 00:09:13,830
LCE and one at FOSDEM so it's a very

00:09:10,860 --> 00:09:16,980
European centric but maybe one day in

00:09:13,830 --> 00:09:19,500
the US and we also have once in a while

00:09:16,980 --> 00:09:21,300
some more private Akutan was just part

00:09:19,500 --> 00:09:23,130
of the core team while the meetings at

00:09:21,300 --> 00:09:25,980
ELC ian and first them are more like

00:09:23,130 --> 00:09:27,810
publicly open to anyone wants to

00:09:25,980 --> 00:09:30,090
participate to to that so that's a

00:09:27,810 --> 00:09:33,090
picture from the meeting at FOSDEM in

00:09:30,090 --> 00:09:36,720
Brussels last month and we had 14

00:09:33,090 --> 00:09:38,370
participants which was nice and really

00:09:36,720 --> 00:09:40,410
allowed to make progress on a number of

00:09:38,370 --> 00:09:45,870
topics

00:09:40,410 --> 00:09:48,060
speaking of architecture support we are

00:09:45,870 --> 00:09:50,310
probably the build system supporting

00:09:48,060 --> 00:09:52,110
some not sure what you're seeing here

00:09:50,310 --> 00:09:54,180
probably build system supporting the

00:09:52,110 --> 00:09:58,020
large number of architectures are you

00:09:54,180 --> 00:10:04,980
saying just the full slide or just I'm

00:09:58,020 --> 00:10:06,960
not sure what you're saying right now so

00:10:04,980 --> 00:10:08,910
probably one of the build systems with

00:10:06,960 --> 00:10:12,270
the largest number of architecture

00:10:08,910 --> 00:10:14,190
supported we've got the the big ones and

00:10:12,270 --> 00:10:17,130
obvious ones like Intel and arm and

00:10:14,190 --> 00:10:19,410
stuff like that but also more specific

00:10:17,130 --> 00:10:24,390
CPU architecture all the ones like m60

00:10:19,410 --> 00:10:34,860
8k or FPGA based CPU architectures like

00:10:24,390 --> 00:10:37,230
micro plays or nails too far yes yep so

00:10:34,860 --> 00:10:38,730
it's it's there's been discussions well

00:10:37,230 --> 00:10:40,440
not really discussion but people like

00:10:38,730 --> 00:10:43,350
talking about a it would be nice to add

00:10:40,440 --> 00:10:46,260
support for risk we we were kind of

00:10:43,350 --> 00:10:48,900
waiting for the supports for it to land

00:10:46,260 --> 00:10:50,820
em stream in GCC and Bennett Hills and

00:10:48,900 --> 00:10:53,730
the kennel and gilepsy and that has

00:10:50,820 --> 00:10:56,010
happened which no paves the way for for

00:10:53,730 --> 00:10:57,900
adding support for Bisbee so it's just a

00:10:56,010 --> 00:11:00,150
matter of someone

00:10:57,900 --> 00:11:01,920
being sufficiently motivated to do the

00:11:00,150 --> 00:11:03,480
few patches that are required it's it's

00:11:01,920 --> 00:11:05,040
very limited the amount the effort that

00:11:03,480 --> 00:11:06,360
is needed to add support for a new

00:11:05,040 --> 00:11:10,860
architecture

00:11:06,360 --> 00:11:12,180
I think the domain the main effort is

00:11:10,860 --> 00:11:14,190
not actually introducing the

00:11:12,180 --> 00:11:16,910
architecture but maintaining it over the

00:11:14,190 --> 00:11:20,100
long run and we'll see that we do a

00:11:16,910 --> 00:11:22,620
quite constant amount of build testing

00:11:20,100 --> 00:11:24,720
and that is to think that that takes to

00:11:22,620 --> 00:11:26,760
the biggest amount of time to to take

00:11:24,720 --> 00:11:28,740
care of when you maintain a CP

00:11:26,760 --> 00:11:31,170
architecture and build I'll get back to

00:11:28,740 --> 00:11:37,380
that but yes Rizvi is definitely on the

00:11:31,170 --> 00:11:40,260
radar at some point yeah yeah and thanks

00:11:37,380 --> 00:11:42,570
for doing it yeah so what we've done in

00:11:40,260 --> 00:11:45,180
terms of CPU architecture improvements

00:11:42,570 --> 00:11:47,279
over the last years is mentioned here so

00:11:45,180 --> 00:11:50,010
we've got no MMU arm support so people

00:11:47,279 --> 00:11:52,410
doing m3 m4 and I should mention m7 has

00:11:50,010 --> 00:11:53,760
been added recently as well we've done

00:11:52,410 --> 00:11:56,820
some a little bit of reorganization

00:11:53,760 --> 00:11:59,550
around arm arm sixty-four options so

00:11:56,820 --> 00:12:01,350
that if you have an arm 64 SOC but you

00:11:59,550 --> 00:12:02,880
want to build an arm 32 bit system you

00:12:01,350 --> 00:12:05,220
can still select that it won't you want

00:12:02,880 --> 00:12:07,320
to build for let's say core like a 53

00:12:05,220 --> 00:12:10,500
but still in 32-bit mode that's been

00:12:07,320 --> 00:12:14,820
added we've got a lot of work from IBM

00:12:10,500 --> 00:12:16,440
dawn on PPC 64 big-endian little-endian

00:12:14,820 --> 00:12:19,350
support so it's it's nice to see

00:12:16,440 --> 00:12:21,810
contributions from the manufacturer

00:12:19,350 --> 00:12:23,970
directly mips has been improved quite

00:12:21,810 --> 00:12:27,029
quite a bit as well from imaginations

00:12:23,970 --> 00:12:29,339
but activity has reduced recently due to

00:12:27,029 --> 00:12:32,940
obviously imagination changing a little

00:12:29,339 --> 00:12:36,450
bit it is 20 G we've added open risk sea

00:12:32,940 --> 00:12:38,760
sky and sparc64 support and a bunch of

00:12:36,450 --> 00:12:40,950
other architectures have been improved M

00:12:38,760 --> 00:12:43,110
68k black fin micro blaze have been

00:12:40,950 --> 00:12:44,790
improved and we've dropped a bunch of

00:12:43,110 --> 00:12:47,100
architectures and I think black fin is

00:12:44,790 --> 00:12:48,480
on the list for being removed as well in

00:12:47,100 --> 00:12:50,760
the near future because it's gonna be

00:12:48,480 --> 00:12:55,620
dropped from the upstream channel in the

00:12:50,760 --> 00:12:58,620
in the fairly well near future on the

00:12:55,620 --> 00:13:00,330
tool chain sign which is kind of an

00:12:58,620 --> 00:13:02,700
obviously an important part for build

00:13:00,330 --> 00:13:06,810
system so build route support since a

00:13:02,700 --> 00:13:08,400
long time to models to provide a tool

00:13:06,810 --> 00:13:10,690
chain so it can build its own so it's

00:13:08,400 --> 00:13:13,690
gonna be all the pencils and GCC and

00:13:10,690 --> 00:13:15,190
see or whatever see library like in the

00:13:13,690 --> 00:13:16,570
right order with the right dependencies

00:13:15,190 --> 00:13:18,840
so that's what we called internal tool

00:13:16,570 --> 00:13:20,980
chain but it can also reuse existing

00:13:18,840 --> 00:13:22,690
tool chains that's what we called

00:13:20,980 --> 00:13:25,000
external tool chain so you've got your

00:13:22,690 --> 00:13:26,770
narrow tool chain or your vendor

00:13:25,000 --> 00:13:28,480
provided tool chain for your favorite

00:13:26,770 --> 00:13:30,220
CPU architecture you can tell a

00:13:28,480 --> 00:13:32,020
beautiful place use it because I trust

00:13:30,220 --> 00:13:35,230
that tool chain more than then what

00:13:32,020 --> 00:13:36,850
you're gonna do so you can do that so on

00:13:35,230 --> 00:13:39,700
the internal tool chain inside we've

00:13:36,850 --> 00:13:42,310
added support for muscle which is kind

00:13:39,700 --> 00:13:45,070
of the new kid in town in terms of see

00:13:42,310 --> 00:13:47,710
libraries we've moved from juice ellipse

00:13:45,070 --> 00:13:49,570
II which was pretty much dead - its fork

00:13:47,710 --> 00:13:51,670
called you see loop CNG's with basically

00:13:49,570 --> 00:13:53,860
the same project but you know maintained

00:13:51,670 --> 00:13:55,900
by another person that has done lots of

00:13:53,860 --> 00:13:58,690
work to clean it up and improve the

00:13:55,900 --> 00:14:01,140
testing and and merge lots of patches

00:13:58,690 --> 00:14:05,380
that were out of tree in a number of

00:14:01,140 --> 00:14:07,300
build systems we do regular updates of

00:14:05,380 --> 00:14:09,010
the tool chain components so pretty much

00:14:07,300 --> 00:14:10,840
whenever there is a new GCC Orpah

00:14:09,010 --> 00:14:13,510
nettles or GB release we have patches

00:14:10,840 --> 00:14:16,650
flowing in to update to that latest

00:14:13,510 --> 00:14:19,120
version and we have a policy of using

00:14:16,650 --> 00:14:22,000
not the latest version but just the one

00:14:19,120 --> 00:14:23,620
before as our default and offered the

00:14:22,000 --> 00:14:25,570
option of choosing the latest one so we

00:14:23,620 --> 00:14:28,900
can have don't directly upgrade to the

00:14:25,570 --> 00:14:31,150
latest GCC version to give some time for

00:14:28,900 --> 00:14:33,370
us to test the packages and for people

00:14:31,150 --> 00:14:36,610
to also test them so we have support for

00:14:33,370 --> 00:14:38,620
for example GCC 7 point X but our G 46

00:14:36,610 --> 00:14:40,420
point X at the moment and same for

00:14:38,620 --> 00:14:42,370
peanut oils and gdb and and so forth

00:14:40,420 --> 00:14:45,340
every all of those components have been

00:14:42,370 --> 00:14:47,470
updated whenever needed we've added a

00:14:45,340 --> 00:14:50,410
link time optimization support and

00:14:47,470 --> 00:14:52,060
Fortran support so that spin we have

00:14:50,410 --> 00:14:56,890
sometimes surprising contributions but

00:14:52,060 --> 00:14:59,860
it's there we use to have a tool chain

00:14:56,890 --> 00:15:02,920
wrapper so it's basically a GCC wrapper

00:14:59,860 --> 00:15:04,930
that calls GCC that we were using only

00:15:02,920 --> 00:15:06,670
for the external tool chain which we

00:15:04,930 --> 00:15:09,280
also know use for the internal tool

00:15:06,670 --> 00:15:11,200
chain especially to check for a number

00:15:09,280 --> 00:15:12,550
of bogus Flags so if you're cross

00:15:11,200 --> 00:15:14,980
compiling but you're refering to

00:15:12,550 --> 00:15:16,390
libraries of your host machine or

00:15:14,980 --> 00:15:18,010
headers of your host machine you're

00:15:16,390 --> 00:15:19,120
probably doing something wrong so the

00:15:18,010 --> 00:15:22,070
wrapper catches that and say oh

00:15:19,120 --> 00:15:23,870
something's bad is bad is happening

00:15:22,070 --> 00:15:26,000
we've dropped a gilepsy because the

00:15:23,870 --> 00:15:29,540
gilepsy no longer exists it's all in

00:15:26,000 --> 00:15:32,450
gilepsy nowadays on the external tool

00:15:29,540 --> 00:15:34,940
chain side so we've done a little bit of

00:15:32,450 --> 00:15:36,410
internal reorganization the way external

00:15:34,940 --> 00:15:38,780
tool chain have added it used to be like

00:15:36,410 --> 00:15:40,160
one big single package ending all of the

00:15:38,780 --> 00:15:43,070
external tool chain stuff which was

00:15:40,160 --> 00:15:45,590
pretty difficult to maintain so we split

00:15:43,070 --> 00:15:47,210
that into individual packages per

00:15:45,590 --> 00:15:49,160
external to chain families so you have

00:15:47,210 --> 00:15:50,600
one package for the line arrow tool

00:15:49,160 --> 00:15:52,220
chain one package for that other

00:15:50,600 --> 00:15:55,010
external tool chain and so on and so

00:15:52,220 --> 00:15:56,570
forth got maybe ten or twelve external

00:15:55,010 --> 00:16:00,170
tool chain packages so it's a bit easier

00:15:56,570 --> 00:16:02,630
to maintain we've improved the wrapper

00:16:00,170 --> 00:16:04,940
with this include and library pass

00:16:02,630 --> 00:16:07,520
checking which is also used in for the

00:16:04,940 --> 00:16:09,890
internal tool chain and with just like

00:16:07,520 --> 00:16:11,420
internal tool chains updated to newer

00:16:09,890 --> 00:16:17,000
versions of the tool chains that were

00:16:11,420 --> 00:16:19,850
available site notes it's kind of not

00:16:17,000 --> 00:16:22,400
directly pure route but related we've

00:16:19,850 --> 00:16:25,810
started this tool chains that link comm

00:16:22,400 --> 00:16:28,670
service that provides a wide range of

00:16:25,810 --> 00:16:30,650
pre-built tool chains for basically

00:16:28,670 --> 00:16:33,110
every CPU architecture that route

00:16:30,650 --> 00:16:36,710
supports with the three variants of the

00:16:33,110 --> 00:16:39,410
C libraries and each time with a stable

00:16:36,710 --> 00:16:41,360
version which is basically the default

00:16:39,410 --> 00:16:42,740
version of the tool chain components

00:16:41,360 --> 00:16:44,180
that build reduces and including

00:16:42,740 --> 00:16:47,960
anteversion which is the lightest of

00:16:44,180 --> 00:16:51,830
them so it makes like through 34 CPU

00:16:47,960 --> 00:16:53,540
architecture x 3 c libraries they are

00:16:51,830 --> 00:16:54,950
not all available on all CPU

00:16:53,540 --> 00:16:57,470
architectures but when available it's

00:16:54,950 --> 00:16:59,120
provided x to one stable weren't

00:16:57,470 --> 00:17:01,040
bleeding edge so it's a I think one

00:16:59,120 --> 00:17:01,250
hundreds and an eighty or something like

00:17:01,040 --> 00:17:03,650
that

00:17:01,250 --> 00:17:08,120
pre-built tool chains that we provide

00:17:03,650 --> 00:17:10,250
and will regularly update them as route

00:17:08,120 --> 00:17:12,949
updates and all of those tool chains

00:17:10,250 --> 00:17:14,720
will not only build them but we when we

00:17:12,949 --> 00:17:16,880
build them we build the tool chain then

00:17:14,720 --> 00:17:18,680
we build a minimal Linux system with the

00:17:16,880 --> 00:17:21,230
Linux scale minimal user space we put

00:17:18,680 --> 00:17:22,730
that up in under qmu to kind of do a

00:17:21,230 --> 00:17:24,890
minimal validation that the tool chain

00:17:22,730 --> 00:17:26,900
is reasonably working so it's not like a

00:17:24,890 --> 00:17:29,630
full test but it's still better than

00:17:26,900 --> 00:17:32,090
nothing and and only if the tool chain

00:17:29,630 --> 00:17:34,040
passes all those tests put upon line on

00:17:32,090 --> 00:17:35,570
that side so if you're looking for a pre

00:17:34,040 --> 00:17:51,470
build tool chain that may be

00:17:35,570 --> 00:17:53,780
useful yes please yeah it is we did

00:17:51,470 --> 00:17:56,630
support that it's been doing that for

00:17:53,780 --> 00:17:58,310
quite a while it yeah they were there

00:17:56,630 --> 00:17:59,900
they were a few gotchas and and then my

00:17:58,310 --> 00:18:02,540
next slide is gonna talk a little bit

00:17:59,900 --> 00:18:04,310
more about that but yes to stool chains

00:18:02,540 --> 00:18:06,500
are built by pill root and made to be

00:18:04,310 --> 00:18:08,660
reusable by anything else so you can

00:18:06,500 --> 00:18:10,730
reuse them as external tool chains in

00:18:08,660 --> 00:18:12,410
Beirut but you can also use them I use

00:18:10,730 --> 00:18:14,990
them regularly for like building my own

00:18:12,410 --> 00:18:17,900
kale or my own on the side when I do

00:18:14,990 --> 00:18:20,020
cannot work or put other work so those

00:18:17,900 --> 00:18:23,560
should normally behave like any regular

00:18:20,020 --> 00:18:25,730
pre-built tool chain that you can find

00:18:23,560 --> 00:18:28,130
so one of the thing that we've improved

00:18:25,730 --> 00:18:30,710
and related to that is relocate table as

00:18:28,130 --> 00:18:32,690
DK so when you build build roots you've

00:18:30,710 --> 00:18:35,020
got a bunch of folders and one of them

00:18:32,690 --> 00:18:37,370
is output host which is where we install

00:18:35,020 --> 00:18:39,230
all the native tools so that's where

00:18:37,370 --> 00:18:40,850
you've got your cross compiler and all

00:18:39,230 --> 00:18:42,620
other tools that might have been

00:18:40,850 --> 00:18:44,420
combined for the host machine that are

00:18:42,620 --> 00:18:46,220
necessary for the build to proceed and

00:18:44,420 --> 00:18:47,870
it also contains the tool change this

00:18:46,220 --> 00:18:49,130
route which is where all the libraries

00:18:47,870 --> 00:18:50,930
and headers that have been cross

00:18:49,130 --> 00:18:52,340
compiled for your target are located so

00:18:50,930 --> 00:18:56,930
that the cross compiler can find them

00:18:52,340 --> 00:18:59,270
and this basically output ask folder can

00:18:56,930 --> 00:19:00,950
be used as an SDK as the compiler it has

00:18:59,270 --> 00:19:02,570
all the libraries all the headers so you

00:19:00,950 --> 00:19:04,250
can give that to application developers

00:19:02,570 --> 00:19:06,620
and they can use it to build

00:19:04,250 --> 00:19:09,320
applications that will run on the

00:19:06,620 --> 00:19:12,410
targets that has been produced by a peer

00:19:09,320 --> 00:19:14,690
route but that SDK was not relocatable

00:19:12,410 --> 00:19:16,670
until now so if you had build it on in

00:19:14,690 --> 00:19:19,250
there and I don't know /home through

00:19:16,670 --> 00:19:20,450
pure brute output asked it had to be

00:19:19,250 --> 00:19:23,210
installed at that very same location

00:19:20,450 --> 00:19:26,810
which is obviously annoying so we'll fix

00:19:23,210 --> 00:19:28,250
that up with a new make SDK target so

00:19:26,810 --> 00:19:31,940
after the build is finished you can do

00:19:28,250 --> 00:19:34,400
make SDK and it's gonna do a number of

00:19:31,940 --> 00:19:36,620
things in the output replacing our path

00:19:34,400 --> 00:19:37,640
generating and a shell script and and

00:19:36,620 --> 00:19:41,750
stuff like that

00:19:37,640 --> 00:19:44,180
that makes the SDK mostly relocatable

00:19:41,750 --> 00:19:45,950
but not everything has been relocated

00:19:44,180 --> 00:19:47,270
and made relocatable but there is a

00:19:45,950 --> 00:19:49,580
shell script that

00:19:47,270 --> 00:19:51,470
generated that people using the SDK have

00:19:49,580 --> 00:19:56,420
to run when the SDK has been installed

00:19:51,470 --> 00:19:57,980
to fix up the remaining absolute path so

00:19:56,420 --> 00:19:59,330
it's been it's quite interesting and

00:19:57,980 --> 00:20:01,910
that's that's being used for the the

00:19:59,330 --> 00:20:04,880
tool chain work obviously and you can

00:20:01,910 --> 00:20:11,660
also use it to provide SDKs to your to

00:20:04,880 --> 00:20:15,830
your users we've added ashes to packages

00:20:11,660 --> 00:20:17,720
to verify downloads and verify that the

00:20:15,830 --> 00:20:19,400
tar balls being downloaded the patch is

00:20:17,720 --> 00:20:21,230
being downloaded have not been modified

00:20:19,400 --> 00:20:23,510
and also that the license files have not

00:20:21,230 --> 00:20:25,520
been modified compared to what you

00:20:23,510 --> 00:20:28,940
expect so it's basically just a very

00:20:25,520 --> 00:20:32,680
simple file that that sits next to every

00:20:28,940 --> 00:20:36,080
package make file that provides ashes

00:20:32,680 --> 00:20:38,420
so the tar ball and patch ashes are

00:20:36,080 --> 00:20:41,120
verified when you extract the tar balls

00:20:38,420 --> 00:20:42,680
and apply the patches and the license

00:20:41,120 --> 00:20:44,690
file ashes are verified when you

00:20:42,680 --> 00:20:46,730
generate licensing reports we've got

00:20:44,690 --> 00:20:49,850
it's nice make legal info target that

00:20:46,730 --> 00:20:52,760
provides for you a manifests who helped

00:20:49,850 --> 00:20:54,590
you is the license compliance and as

00:20:52,760 --> 00:20:56,510
part of that it will verify that's the

00:20:54,590 --> 00:20:59,900
copying file or the license file is

00:20:56,510 --> 00:21:02,330
still the same as what we expect so it's

00:20:59,900 --> 00:21:04,100
it's it's pretty nice feature and almost

00:21:02,330 --> 00:21:07,310
all our packages now have ashes

00:21:04,100 --> 00:21:09,260
available and it's for example allows us

00:21:07,310 --> 00:21:11,000
to detect that upstream sometimes

00:21:09,260 --> 00:21:13,610
reapply a new tar ball and they're the

00:21:11,000 --> 00:21:15,260
same name without putting it as a new

00:21:13,610 --> 00:21:17,480
release so with the hash has been

00:21:15,260 --> 00:21:20,330
exchanged and and you don't know why

00:21:17,480 --> 00:21:24,490
what has changed in the tar ball so it's

00:21:20,330 --> 00:21:26,810
it's a pretty nice feature so we've got

00:21:24,490 --> 00:21:28,880
licensing report as I've said it's it's

00:21:26,810 --> 00:21:30,860
been there since more than four years

00:21:28,880 --> 00:21:33,620
but we've done a bunch of improvement

00:21:30,860 --> 00:21:36,230
there we're now using more consistently

00:21:33,620 --> 00:21:38,120
espy DX license code so that's all the

00:21:36,230 --> 00:21:41,000
license information is is encoded in a

00:21:38,120 --> 00:21:43,220
more standardized format we've added

00:21:41,000 --> 00:21:46,430
ashes for license files as I mentioned

00:21:43,220 --> 00:21:48,470
we've added support for storing the

00:21:46,430 --> 00:21:50,480
source code of binary artifacts and as

00:21:48,470 --> 00:21:51,710
that's especially used for pre-built

00:21:50,480 --> 00:21:52,940
tool chain when you download the

00:21:51,710 --> 00:21:56,060
pre-built tool chain you download

00:21:52,940 --> 00:21:57,920
binaries but as part of your license

00:21:56,060 --> 00:22:00,130
compliance process you also want to ship

00:21:57,920 --> 00:22:03,520
the corresponding source code so

00:22:00,130 --> 00:22:05,620
we have a new variable in in packages

00:22:03,520 --> 00:22:07,150
where they can specify okay this is the

00:22:05,620 --> 00:22:09,190
binary you want to use like for the

00:22:07,150 --> 00:22:11,410
build but for the license compliance

00:22:09,190 --> 00:22:13,240
here is the actual source code Tarble

00:22:11,410 --> 00:22:15,600
that contains all the GCC and pinnacle

00:22:13,240 --> 00:22:18,240
source code so that you can provide a

00:22:15,600 --> 00:22:22,330
set of tarballs that that meet your

00:22:18,240 --> 00:22:24,550
license compliance requirements and last

00:22:22,330 --> 00:22:26,710
but not least we've added license

00:22:24,550 --> 00:22:28,450
details to a large number of packages so

00:22:26,710 --> 00:22:29,920
to the point where almost all of the

00:22:28,450 --> 00:22:32,320
packages have a license information

00:22:29,920 --> 00:22:35,080
nowadays there's like less than 100

00:22:32,320 --> 00:22:37,420
packages still left in the queue and

00:22:35,080 --> 00:22:42,610
your patches are welcome to and help in

00:22:37,420 --> 00:22:45,610
that direction another thing we've added

00:22:42,610 --> 00:22:49,480
is PR to external so if you're familiar

00:22:45,610 --> 00:22:53,170
with the concept of layer that dokdo oae

00:22:49,480 --> 00:22:56,080
as and in some extent open wrt as well

00:22:53,170 --> 00:22:58,000
it's kind of you know a simplified form

00:22:56,080 --> 00:23:00,220
of that it's somewhat simplified

00:22:58,000 --> 00:23:02,470
compared to what we your crow is capable

00:23:00,220 --> 00:23:03,250
of doing but it does help in a number of

00:23:02,470 --> 00:23:05,770
situation

00:23:03,250 --> 00:23:07,750
so basically PR to external allows you

00:23:05,770 --> 00:23:10,630
to point Bill route to another folder

00:23:07,750 --> 00:23:13,690
which contains package definitions and

00:23:10,630 --> 00:23:15,760
DEF configs and other real bill related

00:23:13,690 --> 00:23:20,680
files and artifacts that you need for

00:23:15,760 --> 00:23:23,530
your bill so in companies it Alps kind

00:23:20,680 --> 00:23:25,510
of separating the the open-source build

00:23:23,530 --> 00:23:27,940
routes and open source packages recipes

00:23:25,510 --> 00:23:30,030
and make files from your own in-house

00:23:27,940 --> 00:23:33,880
stuff into two separate locations

00:23:30,030 --> 00:23:35,710
clearly identified so some people don't

00:23:33,880 --> 00:23:37,720
necessarily use that and they prefer to

00:23:35,710 --> 00:23:39,550
use kids and maintain branches so that

00:23:37,720 --> 00:23:42,160
and they use branches to separate their

00:23:39,550 --> 00:23:45,550
own world from the the mainline root

00:23:42,160 --> 00:23:47,500
work but some people felt it was clearer

00:23:45,550 --> 00:23:51,250
to have really two separate folders to

00:23:47,500 --> 00:23:53,170
separate git repositories so a br 2

00:23:51,250 --> 00:23:55,990
external helps in doing that so it's

00:23:53,170 --> 00:23:58,600
it's available since about 4 years now

00:23:55,990 --> 00:24:01,000
and over time we've improved it to

00:23:58,600 --> 00:24:02,860
support multiple PR to external so we've

00:24:01,000 --> 00:24:05,470
got like multiple place where you can

00:24:02,860 --> 00:24:07,960
put your custom package definitions if

00:24:05,470 --> 00:24:09,790
you need so and we've improved it so you

00:24:07,960 --> 00:24:11,800
can implement bootloader packages or

00:24:09,790 --> 00:24:17,310
file system image formats into your

00:24:11,800 --> 00:24:21,640
own in of external tree if you want so

00:24:17,310 --> 00:24:25,480
package infrastructures so Gilbert

00:24:21,640 --> 00:24:27,880
factorizes a lot of the build logic when

00:24:25,480 --> 00:24:29,440
your package uses a standardized build

00:24:27,880 --> 00:24:32,110
system so if you're using the auto tools

00:24:29,440 --> 00:24:33,670
or using C make or you're building a

00:24:32,110 --> 00:24:36,610
Python package it doesn't make a lot of

00:24:33,670 --> 00:24:39,070
sense to repeats in hundreds of packages

00:24:36,610 --> 00:24:40,630
the same configure make make install

00:24:39,070 --> 00:24:44,080
logic with all the variables that you

00:24:40,630 --> 00:24:45,970
have to pass so we have these packages

00:24:44,080 --> 00:24:48,400
for a structure that factorize that that

00:24:45,970 --> 00:24:50,890
common logic so we already adds Auto

00:24:48,400 --> 00:24:52,720
tools to make and peyten infrastructures

00:24:50,890 --> 00:24:55,420
and probably a few more but we've added

00:24:52,720 --> 00:24:57,730
many many more over the last few years

00:24:55,420 --> 00:25:01,660
so we've extended Python package to

00:24:57,730 --> 00:25:03,340
support Python 3 we've added Perl and

00:25:01,660 --> 00:25:06,580
I'm kind of skipping intentionally

00:25:03,340 --> 00:25:09,160
virtual for for a while while ray bar

00:25:06,580 --> 00:25:11,980
for L Lang packages K config for K

00:25:09,160 --> 00:25:14,980
config based packages and a bunch of

00:25:11,980 --> 00:25:17,290
others virtual package allows to create

00:25:14,980 --> 00:25:18,970
virtual packages so it's not really a

00:25:17,290 --> 00:25:21,280
PAC infrastructure like like all the

00:25:18,970 --> 00:25:24,100
others but it helps us support OpenGL or

00:25:21,280 --> 00:25:27,520
JPEG or you'd have those packages that

00:25:24,100 --> 00:25:29,590
provide an an API but that potentially

00:25:27,520 --> 00:25:31,570
has multiple different implementations

00:25:29,590 --> 00:25:34,390
behind the scenes so it helps us and

00:25:31,570 --> 00:25:35,920
like that sort of things we've got a

00:25:34,390 --> 00:25:37,930
Kano module infrastructure to help

00:25:35,920 --> 00:25:40,750
building packages that build Cana

00:25:37,930 --> 00:25:42,580
modules so it does very little things

00:25:40,750 --> 00:25:45,220
but that was repeated in many packages

00:25:42,580 --> 00:25:47,290
we cannot factorize that and and and

00:25:45,220 --> 00:25:50,290
we're adding more and I think on the

00:25:47,290 --> 00:25:52,510
radar we have a go go line package

00:25:50,290 --> 00:25:54,430
infrastructure amazing packet

00:25:52,510 --> 00:25:57,960
infrastructure and probably a bunch of

00:25:54,430 --> 00:25:57,960
others that may be coming in the future

00:25:58,800 --> 00:26:05,170
graphing so we have around the action of

00:26:03,520 --> 00:26:06,910
building your system we also provide a

00:26:05,170 --> 00:26:09,940
number of tools to analyze what your

00:26:06,910 --> 00:26:12,280
build looks like so we can build graphs

00:26:09,940 --> 00:26:13,900
about the dependencies of packages about

00:26:12,280 --> 00:26:16,620
the time it takes to build your system

00:26:13,900 --> 00:26:21,700
to analyze why your build is so long

00:26:16,620 --> 00:26:23,980
we've added some facilities to graph the

00:26:21,700 --> 00:26:25,000
size of the file system on a per package

00:26:23,980 --> 00:26:28,870
basis

00:26:25,000 --> 00:26:30,400
and so normally it was supposed to be

00:26:28,870 --> 00:26:33,130
two slides here but I'm not sure how

00:26:30,400 --> 00:26:35,860
that shows up here and we've added also

00:26:33,130 --> 00:26:38,409
a way of graphing the reverse dependency

00:26:35,860 --> 00:26:42,429
of packages so that's pretty nice to

00:26:38,409 --> 00:26:45,850
analyze who is bringing that package

00:26:42,429 --> 00:26:48,789
into the dependency tree or what

00:26:45,850 --> 00:26:51,309
why is my root file system so big which

00:26:48,789 --> 00:26:53,200
package is contributing this amount of

00:26:51,309 --> 00:26:54,669
kilobytes or megabytes to my overall

00:26:53,200 --> 00:26:56,679
root file system which helps in

00:26:54,669 --> 00:27:02,230
optimizing the the root filesystem

00:26:56,679 --> 00:27:04,510
footprint on the infrastructure level

00:27:02,230 --> 00:27:07,750
we've restructure a little bit the

00:27:04,510 --> 00:27:09,280
skeleton so the skeleton is in would

00:27:07,750 --> 00:27:11,110
speak the the base of the root

00:27:09,280 --> 00:27:12,820
filesystem so it doesn't contain any

00:27:11,110 --> 00:27:15,580
program or anything compiled but it's

00:27:12,820 --> 00:27:17,470
just the basic directory or key a few

00:27:15,580 --> 00:27:19,929
init scripts config files and stuff like

00:27:17,470 --> 00:27:23,049
that that can F is the base of every

00:27:19,929 --> 00:27:25,690
good root filesystem and it used to be

00:27:23,049 --> 00:27:29,320
something like handle in a very special

00:27:25,690 --> 00:27:31,659
way and we've changed that to just be a

00:27:29,320 --> 00:27:33,549
normal package right so all the packages

00:27:31,659 --> 00:27:35,909
that you will depend on that skeleton

00:27:33,549 --> 00:27:39,490
package so it's no part of the normal

00:27:35,909 --> 00:27:42,190
build and package dependency logic and

00:27:39,490 --> 00:27:45,400
that package is actually it's actually

00:27:42,190 --> 00:27:47,860
been split into several sub packages to

00:27:45,400 --> 00:27:49,870
end all the different in its systems

00:27:47,860 --> 00:27:53,140
that we support so if we are if you're

00:27:49,870 --> 00:27:55,000
using a CSV based in its system or a

00:27:53,140 --> 00:27:57,220
system D based in a system you have

00:27:55,000 --> 00:27:59,020
different skeletons I mean if you're

00:27:57,220 --> 00:28:01,330
using system D having in it script in

00:27:59,020 --> 00:28:05,370
etc' slash in it that D doesn't make a

00:28:01,330 --> 00:28:07,630
lot of sense so kind of split that up

00:28:05,370 --> 00:28:09,820
factorize the common part in a common

00:28:07,630 --> 00:28:14,080
package reorganize all that all those

00:28:09,820 --> 00:28:16,840
things so it's a much better supported

00:28:14,080 --> 00:28:19,179
these days this allowed us to and

00:28:16,840 --> 00:28:22,270
support for read-only root filesystem

00:28:19,179 --> 00:28:25,390
with system D which was not nicely

00:28:22,270 --> 00:28:27,820
supported until then we support merge

00:28:25,390 --> 00:28:30,130
slash user so whereas user bin and being

00:28:27,820 --> 00:28:33,159
and user Lib Lib are the same folders

00:28:30,130 --> 00:28:35,620
which is also used by system D so

00:28:33,159 --> 00:28:37,220
there's a bunch of basically better

00:28:35,620 --> 00:28:41,570
support for a system

00:28:37,220 --> 00:28:45,880
based systems in imperial Putin's since

00:28:41,570 --> 00:28:49,370
a few years on the file system side

00:28:45,880 --> 00:28:52,299
there hasn't been that many would say

00:28:49,370 --> 00:28:56,510
major improvements it's mainly minor

00:28:52,299 --> 00:28:58,400
improvements here and there for EXT two

00:28:56,510 --> 00:29:01,690
three four five system formats we know

00:28:58,400 --> 00:29:03,830
use mkfs dot txt 2 3 4 which has

00:29:01,690 --> 00:29:05,630
upstream chrome in the capability of

00:29:03,830 --> 00:29:07,480
generating file system images and not

00:29:05,630 --> 00:29:12,230
just an empty file system on an existing

00:29:07,480 --> 00:29:14,450
block device instead of previously Jenny

00:29:12,230 --> 00:29:17,480
XT 2 FS which was a little bit limited

00:29:14,450 --> 00:29:20,299
we've added support for a XFS can if we

00:29:17,480 --> 00:29:25,220
refine system but at some and was used

00:29:20,299 --> 00:29:27,140
by some users the ISO 9660

00:29:25,220 --> 00:29:29,690
file system support has been completely

00:29:27,140 --> 00:29:31,700
rewritten and we support grub to ISO

00:29:29,690 --> 00:29:34,730
Linux as bootleggers and and in a drama

00:29:31,700 --> 00:29:36,169
fest pure ISO 9660 scenario so all that

00:29:34,730 --> 00:29:41,360
has been made more flexible more

00:29:36,169 --> 00:29:44,330
extensible we use more extensively a

00:29:41,360 --> 00:29:46,280
tool called janemh so it's done by the

00:29:44,330 --> 00:29:48,620
guys at Penghu Tronics and it's a tool

00:29:46,280 --> 00:29:50,750
that helps automate the process of

00:29:48,620 --> 00:29:52,490
creating an SD card image composed of

00:29:50,750 --> 00:29:54,350
multiple partitions containing different

00:29:52,490 --> 00:29:56,600
file system format so you can say with

00:29:54,350 --> 00:30:00,530
gen image okay i want a first partition

00:29:56,600 --> 00:30:03,080
that is in the fat32 format with loose

00:30:00,530 --> 00:30:05,510
files inside and another ext4 partition

00:30:03,080 --> 00:30:07,940
of that size with loose files inside and

00:30:05,510 --> 00:30:10,190
yet another ext4 partition with this or

00:30:07,940 --> 00:30:13,280
these other files and it all generates a

00:30:10,190 --> 00:30:14,929
completely ready to use so it's a SD

00:30:13,280 --> 00:30:17,390
card image but obviously can be used for

00:30:14,929 --> 00:30:21,049
emmc as well or any other POC device

00:30:17,390 --> 00:30:23,299
that you want and this helps build route

00:30:21,049 --> 00:30:26,690
producing an SD card image they can just

00:30:23,299 --> 00:30:28,309
DD in to your MMC or SD card and make it

00:30:26,690 --> 00:30:29,030
completely ready to use so that's that's

00:30:28,309 --> 00:30:32,059
pretty nice

00:30:29,030 --> 00:30:34,549
and we've updated the number of our def

00:30:32,059 --> 00:30:38,270
config so our default configuration that

00:30:34,549 --> 00:30:44,140
support popular deployment boards to use

00:30:38,270 --> 00:30:44,140
this gen image tool we have

00:30:44,279 --> 00:30:49,409
the way we undo like customization in

00:30:47,200 --> 00:30:51,760
build route is very often by calling

00:30:49,409 --> 00:30:54,010
scripts at various points of the build

00:30:51,760 --> 00:30:56,620
so that we don't support and build with

00:30:54,010 --> 00:30:58,330
itself very funky use cases but we give

00:30:56,620 --> 00:31:00,809
the possibility for people we have this

00:30:58,330 --> 00:31:04,029
funky use cases to plug in their own

00:31:00,809 --> 00:31:06,220
custom secret sauce at various points in

00:31:04,029 --> 00:31:10,450
the bill so we used to have and we still

00:31:06,220 --> 00:31:12,279
have a hook at the end of the build but

00:31:10,450 --> 00:31:14,679
so when all packages have been built but

00:31:12,279 --> 00:31:16,659
before the image is created and we have

00:31:14,679 --> 00:31:18,399
at the very end of the build when all

00:31:16,659 --> 00:31:20,380
images have been created so you can call

00:31:18,399 --> 00:31:21,850
any amount of shell script or Python

00:31:20,380 --> 00:31:24,789
script or Perl script that you want to

00:31:21,850 --> 00:31:26,890
do your secret sauce and we've added one

00:31:24,789 --> 00:31:29,230
inside the fake root environment so

00:31:26,890 --> 00:31:31,809
while the image is being built we use

00:31:29,230 --> 00:31:33,490
fake root to make people believe it's

00:31:31,809 --> 00:31:36,100
root while building the the root file

00:31:33,490 --> 00:31:37,360
system image and you can no call a

00:31:36,100 --> 00:31:40,740
custom script at that point as well

00:31:37,360 --> 00:31:40,740
which allows for more customization

00:31:41,279 --> 00:31:49,059
another topic that's been not specific

00:31:46,179 --> 00:31:51,070
to build root but kind of training in a

00:31:49,059 --> 00:31:56,370
number of other build related projects

00:31:51,070 --> 00:31:59,740
is Pro suitability basically given a

00:31:56,370 --> 00:32:02,080
certain configuration I think the

00:31:59,740 --> 00:32:03,940
ability to reproduce the exact same bill

00:32:02,080 --> 00:32:06,669
to the the bite level or to the bit

00:32:03,940 --> 00:32:09,220
level and so you do your build you

00:32:06,669 --> 00:32:11,020
hashed your file system image and then

00:32:09,220 --> 00:32:12,760
you do the same build six months later

00:32:11,020 --> 00:32:16,179
you have the exact same file system

00:32:12,760 --> 00:32:17,080
image with the same hash so we're not

00:32:16,179 --> 00:32:19,419
there yet

00:32:17,080 --> 00:32:21,580
what has been added is the basics so

00:32:19,419 --> 00:32:24,279
we've got the option that says ok I want

00:32:21,580 --> 00:32:26,230
my peel to be reproducible it sets a

00:32:24,279 --> 00:32:28,779
variable that's observed by Jesus Ian a

00:32:26,230 --> 00:32:31,000
number of packages to avoid using time

00:32:28,779 --> 00:32:34,510
stamps which obviously break the

00:32:31,000 --> 00:32:36,490
reproducibility of the of the build and

00:32:34,510 --> 00:32:39,250
a number of other things I've been I've

00:32:36,490 --> 00:32:41,890
been tweak here and there but a lot more

00:32:39,250 --> 00:32:43,750
remains to be done and if there's one

00:32:41,890 --> 00:32:46,539
area where contributions are welcome

00:32:43,750 --> 00:32:48,610
that would be one area the people who

00:32:46,539 --> 00:32:53,409
started that effort are no longer really

00:32:48,610 --> 00:32:56,440
active anymore so help is welcome to to

00:32:53,409 --> 00:32:57,460
push that further on the package side

00:32:56,440 --> 00:32:59,860
which is

00:32:57,460 --> 00:33:01,960
obviously we're the majority of the

00:32:59,860 --> 00:33:05,500
contributions are made and the majority

00:33:01,960 --> 00:33:09,039
of the activity is happening it's kind

00:33:05,500 --> 00:33:11,260
of hard to summarize what has happened

00:33:09,039 --> 00:33:13,929
we've added more than 1,000 packages in

00:33:11,260 --> 00:33:17,710
those four years so lots of things small

00:33:13,929 --> 00:33:20,140
and not very commonly used to bigger

00:33:17,710 --> 00:33:22,480
things but I trying to came up with kind

00:33:20,140 --> 00:33:24,940
of the big things so we've added a salon

00:33:22,480 --> 00:33:28,149
except or contributed by people in the

00:33:24,940 --> 00:33:30,760
IRS space industry we've added well Judy

00:33:28,149 --> 00:33:34,149
I was already there but upgraded to 5/9

00:33:30,760 --> 00:33:36,700
with many different components and duty

00:33:34,149 --> 00:33:39,340
kef has been upgraded OpenCV cody has

00:33:36,700 --> 00:33:41,559
been added the support for languages has

00:33:39,340 --> 00:33:44,200
been improved with go mono and rest

00:33:41,559 --> 00:33:45,789
being added so if you want to use one of

00:33:44,200 --> 00:33:47,799
those languages on your embedded system

00:33:45,789 --> 00:33:51,460
that's possible we've added

00:33:47,799 --> 00:33:54,580
gasolines of Python modules perl modules

00:33:51,460 --> 00:33:57,460
Erlang modules so lots of people are now

00:33:54,580 --> 00:33:59,320
using not only C and C++ but many more

00:33:57,460 --> 00:34:03,820
languages and we have support for that

00:33:59,320 --> 00:34:07,090
in NP routes darker a UF has all that

00:34:03,820 --> 00:34:08,619
container technology is also being added

00:34:07,090 --> 00:34:11,730
to be a root and they are still patches

00:34:08,619 --> 00:34:15,399
pending adding more of those packages

00:34:11,730 --> 00:34:18,609
the system upgrades fuel is also there

00:34:15,399 --> 00:34:20,980
with solutions like SW update rogue I

00:34:18,609 --> 00:34:24,070
think we still don't have a packet for

00:34:20,980 --> 00:34:26,679
mender but hopefully that someone will

00:34:24,070 --> 00:34:29,020
contribute that soon another area where

00:34:26,679 --> 00:34:30,490
a lot of work has been done was hardware

00:34:29,020 --> 00:34:32,260
support so more and more people have

00:34:30,490 --> 00:34:34,540
been enabling root on their platform

00:34:32,260 --> 00:34:36,970
editing the corresponding packages to

00:34:34,540 --> 00:34:41,099
support OpenGL and or other more

00:34:36,970 --> 00:34:44,970
hardware specific aspects PR use for the

00:34:41,099 --> 00:34:48,669
BeagleBone platforms or other other

00:34:44,970 --> 00:34:50,169
aspects and so networking and other

00:34:48,669 --> 00:34:51,790
things have been added as well so it's

00:34:50,169 --> 00:34:55,210
really plenty a plenty of packages that

00:34:51,790 --> 00:34:58,660
have been added another aspect where

00:34:55,210 --> 00:35:01,150
we've done a lot of work is everything

00:34:58,660 --> 00:35:04,359
around I would say QA & lping

00:35:01,150 --> 00:35:08,080
maintaining the overall build system

00:35:04,359 --> 00:35:09,920
into a fairly decent shape as part of

00:35:08,080 --> 00:35:12,319
that we've added a runtime testing

00:35:09,920 --> 00:35:14,660
a structure so a way to describe test

00:35:12,319 --> 00:35:16,849
cases and run them in their qmu and

00:35:14,660 --> 00:35:19,069
check that it's running as expected so

00:35:16,849 --> 00:35:20,990
that's a very small test here that says

00:35:19,069 --> 00:35:23,809
okay build a configuration that has prop

00:35:20,990 --> 00:35:25,579
bear put it up in under mu and verify

00:35:23,809 --> 00:35:28,819
that there is an ssh name we're running

00:35:25,579 --> 00:35:31,220
on port 22 and we've added more and more

00:35:28,819 --> 00:35:33,589
tests so it's we still don't have as

00:35:31,220 --> 00:35:35,690
many tests as we'd like to but we are

00:35:33,589 --> 00:35:38,960
adding more and more and that has helped

00:35:35,690 --> 00:35:41,510
catch a number of issues and nowa days

00:35:38,960 --> 00:35:43,369
for some specific bugs that we get we

00:35:41,510 --> 00:35:46,190
add to corresponding test cases to catch

00:35:43,369 --> 00:35:48,140
the problems in the future so that's

00:35:46,190 --> 00:35:50,119
that's really nice and more and more

00:35:48,140 --> 00:35:54,530
people are relying on that testing

00:35:50,119 --> 00:35:58,990
infrastructure to even write changes and

00:35:54,530 --> 00:36:03,290
build routine and test them ci

00:35:58,990 --> 00:36:05,540
so we already add a CIF words called

00:36:03,290 --> 00:36:08,329
Auto Bild at pure org so basically what

00:36:05,540 --> 00:36:10,220
we do there is we have a set of 50

00:36:08,329 --> 00:36:13,309
architectural tool chain configuration

00:36:10,220 --> 00:36:16,819
that is kind of fixed and then we pick a

00:36:13,309 --> 00:36:18,260
random of those architectural tools in

00:36:16,819 --> 00:36:20,359
configuration generate a random

00:36:18,260 --> 00:36:22,760
selection of packages and build that and

00:36:20,359 --> 00:36:26,900
see if it loads or if it doesn't build

00:36:22,760 --> 00:36:29,900
and that helps a lot catch missing

00:36:26,900 --> 00:36:31,309
dependencies or specific combination of

00:36:29,900 --> 00:36:33,530
packages that have not been handled

00:36:31,309 --> 00:36:35,000
properly or oh we've upgraded that

00:36:33,530 --> 00:36:38,000
library but it's no longer compatible

00:36:35,000 --> 00:36:40,220
with that other package and things like

00:36:38,000 --> 00:36:42,619
that so it this is running 24/7 on

00:36:40,220 --> 00:36:44,569
multiple build slaves so we've got I

00:36:42,619 --> 00:36:48,349
would say five six machines doing that

00:36:44,569 --> 00:36:51,530
24/7 and it's amazing the number of

00:36:48,349 --> 00:36:54,040
problems that this has allowed us to to

00:36:51,530 --> 00:36:58,849
figure out and fix and this is still

00:36:54,040 --> 00:37:00,829
running as well as we speak and as part

00:36:58,849 --> 00:37:04,609
of bringing up a new CPU architectures

00:37:00,829 --> 00:37:07,460
looping back on the RISC V question when

00:37:04,609 --> 00:37:11,089
we add a new CPU architecture we do add

00:37:07,460 --> 00:37:13,700
a configuration for that architecture to

00:37:11,089 --> 00:37:15,049
the system which means all our 2000

00:37:13,700 --> 00:37:17,089
packages start to be built on our

00:37:15,049 --> 00:37:20,480
architecture so if you're GCC or Bennett

00:37:17,089 --> 00:37:22,760
Hills part is not up to speed you'll get

00:37:20,480 --> 00:37:23,180
tons and tons of build failures because

00:37:22,760 --> 00:37:25,220
you're

00:37:23,180 --> 00:37:27,860
jessie support is not good enough for

00:37:25,220 --> 00:37:29,840
your P&G sport is not good enough and

00:37:27,860 --> 00:37:31,970
that's what we expect from people

00:37:29,840 --> 00:37:36,530
maintaining CPU architecture that will

00:37:31,970 --> 00:37:39,020
help us fix all those problems in terms

00:37:36,530 --> 00:37:40,730
of so that Auto Bild stuff has been it's

00:37:39,020 --> 00:37:43,280
been a few improvements but mainly it's

00:37:40,730 --> 00:37:45,830
been it's been the same so what we've

00:37:43,280 --> 00:37:48,860
added is we're testing our def configs

00:37:45,830 --> 00:37:50,780
so that builds minimal systems for a

00:37:48,860 --> 00:37:54,790
number of popular development boards on

00:37:50,780 --> 00:37:57,530
git lamp CI so we make sure they build

00:37:54,790 --> 00:37:59,330
the runtime test that I was describing

00:37:57,530 --> 00:38:04,760
in the previous slides are also run and

00:37:59,330 --> 00:38:06,950
get lab CI we added the support on auto

00:38:04,760 --> 00:38:08,810
builded bureau.org to support testing

00:38:06,950 --> 00:38:10,970
multiple branches until then we're just

00:38:08,810 --> 00:38:13,010
testing the master branch of build root

00:38:10,970 --> 00:38:15,380
but know we have the ability to also

00:38:13,010 --> 00:38:17,200
test the long-term support release so

00:38:15,380 --> 00:38:19,790
when we make new commits to the

00:38:17,200 --> 00:38:22,790
maintenance branch it continues to be

00:38:19,790 --> 00:38:25,160
tested and we can figure out if a a

00:38:22,790 --> 00:38:27,980
minor update to a package because

00:38:25,160 --> 00:38:31,060
there's any build breakage and another

00:38:27,980 --> 00:38:35,540
thing we've added that has helped a lot

00:38:31,060 --> 00:38:37,760
improving the results is notification

00:38:35,540 --> 00:38:40,190
sent to relevant developers whenever

00:38:37,760 --> 00:38:42,250
there's a package failure so I'll get to

00:38:40,190 --> 00:38:44,840
that in the next term the next slide so

00:38:42,250 --> 00:38:47,270
a little bit like the Linux kernel as

00:38:44,840 --> 00:38:49,490
this maintainer is filed that says okay

00:38:47,270 --> 00:38:54,410
for this driver this is the set of

00:38:49,490 --> 00:38:55,820
people in charge for it we have five

00:38:54,410 --> 00:38:57,170
code developers so it's not really

00:38:55,820 --> 00:39:00,470
maintenance but it's basically people

00:38:57,170 --> 00:39:03,350
who care about some part of roots some

00:39:00,470 --> 00:39:05,230
set of packages or some architectures or

00:39:03,350 --> 00:39:08,690
the documentation or anything like that

00:39:05,230 --> 00:39:11,300
and it's used like in the Linux kernel

00:39:08,690 --> 00:39:12,770
to send patches so you can look up that

00:39:11,300 --> 00:39:14,420
file and we have a small tool that does

00:39:12,770 --> 00:39:15,590
that for you you feed it a patch and it

00:39:14,420 --> 00:39:17,420
tells you okay you should send that

00:39:15,590 --> 00:39:19,760
patch to this person that other person

00:39:17,420 --> 00:39:23,810
and to the manganese but we also use it

00:39:19,760 --> 00:39:25,700
in conjunction with the auto builders so

00:39:23,810 --> 00:39:28,220
whenever there is a failure for a given

00:39:25,700 --> 00:39:31,790
package it looks up in that file and

00:39:28,220 --> 00:39:33,500
says oh this person is likely to be

00:39:31,790 --> 00:39:34,370
interested in being notified about

00:39:33,500 --> 00:39:37,090
failures on that

00:39:34,370 --> 00:39:39,200
and that person will be notified so

00:39:37,090 --> 00:39:41,720
developers in that file will receive

00:39:39,200 --> 00:39:43,520
every day a summary of the issues that

00:39:41,720 --> 00:39:45,170
affect either their packages or their

00:39:43,520 --> 00:39:48,860
architecture if there's been any failure

00:39:45,170 --> 00:39:50,840
of course and that has helped a lot to

00:39:48,860 --> 00:39:53,000
raising the attention of people who are

00:39:50,840 --> 00:39:56,510
not like actively monitoring the build

00:39:53,000 --> 00:39:59,120
results but realizing oh my package is

00:39:56,510 --> 00:40:01,640
as a problem I I can probably spend

00:39:59,120 --> 00:40:04,670
alpha an hour look into that and submit

00:40:01,640 --> 00:40:06,170
the corresponding fixes we've added a

00:40:04,670 --> 00:40:08,360
check package script a little bit like

00:40:06,170 --> 00:40:10,220
the cannulas check patch to verify your

00:40:08,360 --> 00:40:12,590
patch check package verifies a bunch of

00:40:10,220 --> 00:40:14,120
very basic and silly rules that we have

00:40:12,590 --> 00:40:16,580
that your package should look like this

00:40:14,120 --> 00:40:19,910
to meet the the coding style so that

00:40:16,580 --> 00:40:23,480
also helps in avoiding well stupids

00:40:19,910 --> 00:40:25,910
review cycles on the mailing list we've

00:40:23,480 --> 00:40:28,130
added a test package a script so it's

00:40:25,910 --> 00:40:29,600
the output you can see on the bottom

00:40:28,130 --> 00:40:32,120
right of this line

00:40:29,600 --> 00:40:35,720
it's basically a small script that will

00:40:32,120 --> 00:40:38,180
build test your package on all the tool

00:40:35,720 --> 00:40:39,920
chain architecture configuration that we

00:40:38,180 --> 00:40:43,850
test in the auto builders so it's kind

00:40:39,920 --> 00:40:46,670
of gonna show you how this package is

00:40:43,850 --> 00:40:49,460
gonna break or not the other builders if

00:40:46,670 --> 00:40:51,860
it gets merged with is nice to run

00:40:49,460 --> 00:40:54,710
before submitting a new package and

00:40:51,860 --> 00:40:57,290
we've got some tools so I mentioned in

00:40:54,710 --> 00:41:01,850
sky scan pi PI but I should mention scan

00:40:57,290 --> 00:41:04,880
Sipan as well which use respectively

00:41:01,850 --> 00:41:06,800
pi PI for Python or Sipan for pearl and

00:41:04,880 --> 00:41:08,870
automatically generates the

00:41:06,800 --> 00:41:10,970
corresponding build with packages we say

00:41:08,870 --> 00:41:12,530
scan pi PI and the name of a patent and

00:41:10,970 --> 00:41:13,850
package and it's going to be generating

00:41:12,530 --> 00:41:16,790
all the build with packages that you

00:41:13,850 --> 00:41:18,860
need to build that Python package into

00:41:16,790 --> 00:41:22,370
your build root system so it's pretty

00:41:18,860 --> 00:41:27,950
nice helps maintaining Putra packages

00:41:22,370 --> 00:41:31,780
for those interpreted languages moving

00:41:27,950 --> 00:41:34,070
on on other missing loose improvements

00:41:31,780 --> 00:41:37,510
the Linux scale package has been

00:41:34,070 --> 00:41:40,040
improved to support what we call

00:41:37,510 --> 00:41:43,310
extension so it's basically features

00:41:40,040 --> 00:41:45,530
that require patches to the kano things

00:41:43,310 --> 00:41:47,510
like the Zen oh my archeiai

00:41:45,530 --> 00:41:49,640
planar patches

00:41:47,510 --> 00:41:51,560
sometimes specific drivers are not like

00:41:49,640 --> 00:41:53,990
standalone K'naan modules but they

00:41:51,560 --> 00:41:56,000
really need to patch the keno itself so

00:41:53,990 --> 00:41:57,850
we have ways to express that things and

00:41:56,000 --> 00:42:00,290
then probably package those extensions

00:41:57,850 --> 00:42:02,240
we've also created a small

00:42:00,290 --> 00:42:05,030
infrastructure for links tools so it's

00:42:02,240 --> 00:42:07,760
been kind of a trend indicator over the

00:42:05,030 --> 00:42:09,650
last five years or so to not only after

00:42:07,760 --> 00:42:12,140
Kane itself but a bunch of user space

00:42:09,650 --> 00:42:14,720
tools for which the source code is part

00:42:12,140 --> 00:42:16,550
of the kaenel tree itself which from a

00:42:14,720 --> 00:42:18,080
package and point of view means that the

00:42:16,550 --> 00:42:20,090
Kino tree is not normally the key not

00:42:18,080 --> 00:42:22,880
anymore but also a number of user space

00:42:20,090 --> 00:42:26,770
applications like perv or GPIO or iio or

00:42:22,880 --> 00:42:29,660
or other things and and we've added

00:42:26,770 --> 00:42:31,540
mechanisms in Peru to build these user

00:42:29,660 --> 00:42:34,359
space applications if you need them

00:42:31,540 --> 00:42:37,310
we've reworked to get text handling

00:42:34,359 --> 00:42:39,890
that's that were a fairly big effort

00:42:37,310 --> 00:42:41,990
they're not not that useful under form

00:42:39,890 --> 00:42:45,080
for the final user but internally it's

00:42:41,990 --> 00:42:48,350
made things a lot clearer and solve the

00:42:45,080 --> 00:42:51,500
number of build issues we've added

00:42:48,350 --> 00:42:53,390
checks on the binaries that generates to

00:42:51,500 --> 00:42:55,490
verify ok it's really built for your

00:42:53,390 --> 00:42:57,230
target architecture and you know people

00:42:55,490 --> 00:42:59,840
not build it for the host architecture

00:42:57,230 --> 00:43:03,380
and recently support for hardening

00:42:59,840 --> 00:43:05,750
feature like railro and fortify source

00:43:03,380 --> 00:43:07,550
has been added and we've got more and

00:43:05,750 --> 00:43:10,730
more people interested in generally

00:43:07,550 --> 00:43:13,340
security hardening the LTS important

00:43:10,730 --> 00:43:15,530
it's part of that SL annex and railro

00:43:13,340 --> 00:43:18,890
fortify so there's there's a pretty

00:43:15,530 --> 00:43:21,410
strong set of people looking into

00:43:18,890 --> 00:43:26,359
improving the security at the build

00:43:21,410 --> 00:43:29,109
system level so what's coming up next on

00:43:26,359 --> 00:43:33,109
the radar what do we have we have

00:43:29,109 --> 00:43:36,130
download cache so right now if you fetch

00:43:33,109 --> 00:43:38,450
a package from a git repository

00:43:36,130 --> 00:43:40,160
pillu is gonna do a clone and then

00:43:38,450 --> 00:43:42,410
generate the tarball on the side so that

00:43:40,160 --> 00:43:44,900
if you do the build again with the same

00:43:42,410 --> 00:43:46,280
git repo and same version it's going to

00:43:44,900 --> 00:43:47,830
reuse the Tarble you have locally

00:43:46,280 --> 00:43:50,150
available so you can do an offline bill

00:43:47,830 --> 00:43:52,820
but if you change the version of that

00:43:50,150 --> 00:43:55,070
package gonna do a clone again from

00:43:52,820 --> 00:43:56,570
scratch and redownload everything so it

00:43:55,070 --> 00:43:58,850
means that if you were just bumping your

00:43:56,570 --> 00:43:59,680
kindle version from like one tag to the

00:43:58,850 --> 00:44:01,990
next time

00:43:59,680 --> 00:44:04,510
every time you do this update you pay

00:44:01,990 --> 00:44:08,550
the price of a complete git clone which

00:44:04,510 --> 00:44:12,460
isn't really nice so we have patches in

00:44:08,550 --> 00:44:15,100
when in the backlog that avoid that by

00:44:12,460 --> 00:44:17,410
having a cache of tickets git

00:44:15,100 --> 00:44:19,720
repositories so you only download

00:44:17,410 --> 00:44:22,360
basically the new get objects instead of

00:44:19,720 --> 00:44:24,760
written load everything hopefully that

00:44:22,360 --> 00:44:27,190
should learn at some point in the near

00:44:24,760 --> 00:44:28,570
future but it's it's take a while to

00:44:27,190 --> 00:44:32,770
integrate that kind of core

00:44:28,570 --> 00:44:34,720
functionality we're looking into adding

00:44:32,770 --> 00:44:36,190
per package out of three bills or right

00:44:34,720 --> 00:44:38,530
now when you build packages and build

00:44:36,190 --> 00:44:41,860
routes the source code to get extruded

00:44:38,530 --> 00:44:43,780
into a folder called output build slash

00:44:41,860 --> 00:44:47,170
the name of the package - the version

00:44:43,780 --> 00:44:49,360
and we do the build entry so if a

00:44:47,170 --> 00:44:51,130
package get built two times one times

00:44:49,360 --> 00:44:53,140
for the host one time for the target we

00:44:51,130 --> 00:44:56,440
extract it twice and we built each time

00:44:53,140 --> 00:44:58,420
to its own source folder and also if you

00:44:56,440 --> 00:45:00,490
use a feature like local packages or

00:44:58,420 --> 00:45:01,720
overwrite source there to say my source

00:45:00,490 --> 00:45:04,420
code is already locally available

00:45:01,720 --> 00:45:06,160
somewhere else on my system build root

00:45:04,420 --> 00:45:08,050
has to do an arcing of the source code

00:45:06,160 --> 00:45:10,240
to bring the source code in the tree and

00:45:08,050 --> 00:45:13,600
build it there which is a little bit

00:45:10,240 --> 00:45:16,600
annoying we want a brain power package

00:45:13,600 --> 00:45:19,930
out of tree build it in theory it's not

00:45:16,600 --> 00:45:22,240
very complicated but that requires a lot

00:45:19,930 --> 00:45:24,370
of cleanup in different places so it's

00:45:22,240 --> 00:45:26,950
it's more effort than than you might

00:45:24,370 --> 00:45:29,710
initially think but hopefully we'll get

00:45:26,950 --> 00:45:31,960
we'll get there and another topic I've

00:45:29,710 --> 00:45:34,210
been working on at the end of last year

00:45:31,960 --> 00:45:36,820
and I hope to be back to it in in the

00:45:34,210 --> 00:45:39,880
next few weeks or months is a top-level

00:45:36,820 --> 00:45:41,860
parallel build so right now root builds

00:45:39,880 --> 00:45:44,350
in a completely sequential way each and

00:45:41,860 --> 00:45:46,930
every package so inside each package we

00:45:44,350 --> 00:45:51,040
use make - J something to make use of

00:45:46,930 --> 00:45:53,440
your multiple CPU cores but each package

00:45:51,040 --> 00:45:55,540
against each other is build sequentially

00:45:53,440 --> 00:45:59,650
so we can guarantee that the build is

00:45:55,540 --> 00:46:01,990
reproducible so we've done we've started

00:45:59,650 --> 00:46:04,420
doing some work to achieve that the same

00:46:01,990 --> 00:46:07,180
amount of reproducibility but even when

00:46:04,420 --> 00:46:08,320
building packages in parallel patches

00:46:07,180 --> 00:46:11,170
have been posted on the mailing list

00:46:08,320 --> 00:46:12,430
people are invited to test them and

00:46:11,170 --> 00:46:15,099
see what it gives in terms of build

00:46:12,430 --> 00:46:19,420
results in practice we have seen a

00:46:15,099 --> 00:46:22,210
sometimes a two times reduction in the

00:46:19,420 --> 00:46:24,339
build time in most cases so it's it's

00:46:22,210 --> 00:46:27,760
pretty nice to divide your bill time by

00:46:24,339 --> 00:46:30,790
two and there's also an effort to

00:46:27,760 --> 00:46:34,660
improve package tooling so we've

00:46:30,790 --> 00:46:37,150
recently so I've contributed a mechanism

00:46:34,660 --> 00:46:39,400
to track upstream packages using release

00:46:37,150 --> 00:46:42,760
monitoring orgs that is really great web

00:46:39,400 --> 00:46:45,760
service that tracks upstream projects I

00:46:42,760 --> 00:46:49,510
think it's like 16,000 upstream projects

00:46:45,760 --> 00:46:51,339
and and that allows you to notice oh

00:46:49,510 --> 00:46:53,349
okay pass the box has made a new release

00:46:51,339 --> 00:46:54,730
maybe we need to upgrade our release as

00:46:53,349 --> 00:46:56,530
well because a new release might have

00:46:54,730 --> 00:46:58,270
interesting bug fixes or security

00:46:56,530 --> 00:47:01,240
updates or things like that so it's and

00:46:58,270 --> 00:47:02,980
it's nice to have some automated way of

00:47:01,240 --> 00:47:05,440
doing that when you have more than 2,000

00:47:02,980 --> 00:47:07,599
packages and some other folks are

00:47:05,440 --> 00:47:09,069
looking at tracking CVS using the NIST

00:47:07,599 --> 00:47:10,990
database when the same you know

00:47:09,069 --> 00:47:16,030
direction okay my system is using

00:47:10,990 --> 00:47:19,270
postbox 128 or whatever are there is

00:47:16,030 --> 00:47:21,040
other known CVS affecting this past box

00:47:19,270 --> 00:47:23,680
version should I upgrade or should I

00:47:21,040 --> 00:47:27,010
back pour some security fixes so that's

00:47:23,680 --> 00:47:29,770
being worked on as well as I mentioned

00:47:27,010 --> 00:47:31,240
new package infrastructures go Mezen and

00:47:29,770 --> 00:47:33,339
perhaps others will come but at least

00:47:31,240 --> 00:47:36,700
four go patches have been submitted and

00:47:33,339 --> 00:47:38,290
measure on it should be done in the near

00:47:36,700 --> 00:47:40,619
future people are interested in that in

00:47:38,290 --> 00:47:45,099
that build system and we're converging

00:47:40,619 --> 00:47:49,780
gradually some packages to to it so to

00:47:45,099 --> 00:47:52,510
wrap up the project is active still

00:47:49,780 --> 00:47:55,299
releasing every every three months we

00:47:52,510 --> 00:47:59,799
have these new LTS paying relocatable

00:47:55,299 --> 00:48:02,380
SDK the package said is is is richer and

00:47:59,799 --> 00:48:03,970
richer and being kept updated and we are

00:48:02,380 --> 00:48:07,470
adding tooling to keep it even more

00:48:03,970 --> 00:48:10,630
up-to-date the testing effort has been

00:48:07,470 --> 00:48:12,640
significantly increased it could be

00:48:10,630 --> 00:48:14,710
improved even further obviously but but

00:48:12,640 --> 00:48:16,299
it's still better than what it was and I

00:48:14,710 --> 00:48:19,569
think we have interesting new features

00:48:16,299 --> 00:48:21,520
on the roadmap if you're new with build

00:48:19,569 --> 00:48:23,520
route and you've never used it there is

00:48:21,520 --> 00:48:27,210
a tutorial organized as

00:48:23,520 --> 00:48:29,610
part of the embedded apprentice Linux

00:48:27,210 --> 00:48:31,980
engineer trike I think I got the acronym

00:48:29,610 --> 00:48:35,940
right which is going to take place on

00:48:31,980 --> 00:48:39,090
Wednesday at 2:30 p.m. so it which comes

00:48:35,940 --> 00:48:41,160
with like practical ends on on the

00:48:39,090 --> 00:48:45,210
pocket video platforms I think that the

00:48:41,160 --> 00:48:47,010
seats are sold out for actually doing

00:48:45,210 --> 00:48:49,230
the lab with the pocket bagel because

00:48:47,010 --> 00:48:51,390
they don't have enough ports but you can

00:48:49,230 --> 00:48:53,520
still join the session and then and see

00:48:51,390 --> 00:48:55,320
what people are doing and look at the

00:48:53,520 --> 00:48:58,830
slides and things like that if you're if

00:48:55,320 --> 00:49:02,340
you're interested in with that I think

00:48:58,830 --> 00:49:07,370
I'm done and I have apparently a minute

00:49:02,340 --> 00:49:29,430
and 30 seconds for questions questions

00:49:07,370 --> 00:49:31,950
yes please sorry can you conceiving I'm

00:49:29,430 --> 00:49:33,480
not sure what the question I would the

00:49:31,950 --> 00:49:35,940
question makes sense I mean build

00:49:33,480 --> 00:49:55,950
resistant to native to octo or to open

00:49:35,940 --> 00:49:57,930
wrt or to OE right so I'm not sure

00:49:55,950 --> 00:50:00,180
either I'm not understanding your

00:49:57,930 --> 00:50:03,110
question or you're confusing what build

00:50:00,180 --> 00:50:05,430
route and about the open wrt are so

00:50:03,110 --> 00:50:06,780
build which is an alternative to open

00:50:05,430 --> 00:50:09,210
wrt and to OE

00:50:06,780 --> 00:50:11,220
onto an opt exists or something like

00:50:09,210 --> 00:50:18,330
that so you're going to use either or or

00:50:11,220 --> 00:50:22,140
or one of these right right no no open D

00:50:18,330 --> 00:50:24,270
royalty was very very a long time ago

00:50:22,140 --> 00:50:26,790
based on pill route it's a fork of pill

00:50:24,270 --> 00:50:29,100
route but that dates back from like 15

00:50:26,790 --> 00:50:31,860
years or something like that and

00:50:29,100 --> 00:50:34,650
nowadays beside the fact that both of

00:50:31,860 --> 00:50:36,120
them use k config from the kennel they

00:50:34,650 --> 00:50:36,820
have pretty much nothing in common

00:50:36,120 --> 00:50:40,840
anymore

00:50:36,820 --> 00:50:54,310
right another question perhaps yes

00:50:40,840 --> 00:50:56,530
please so the we have these sources that

00:50:54,310 --> 00:50:57,580
build road net mural where we keep the

00:50:56,530 --> 00:51:02,980
tar balls

00:50:57,580 --> 00:51:04,630
we never delete them yep so so far we

00:51:02,980 --> 00:51:06,280
have never deleted any file from there

00:51:04,630 --> 00:51:12,310
so we've got tar balls that dates back

00:51:06,280 --> 00:51:14,560
from ten years ago and thirds yes the

00:51:12,310 --> 00:51:17,110
only packages where that is not true

00:51:14,560 --> 00:51:19,360
our package is where you can define an

00:51:17,110 --> 00:51:21,520
arbitrary version like the key no we

00:51:19,360 --> 00:51:24,220
can't like mirror every possible

00:51:21,520 --> 00:51:26,110
conversion because they are myth yeah

00:51:24,220 --> 00:51:27,640
but for what for all the packages where

00:51:26,110 --> 00:51:29,950
the version is fixed in the in the

00:51:27,640 --> 00:51:32,080
package recipe we have all the tar balls

00:51:29,950 --> 00:51:36,400
and we run like every I think every day

00:51:32,080 --> 00:51:38,320
we have a a cron that says okay don't

00:51:36,400 --> 00:51:39,910
load the tar balls for all the packages

00:51:38,320 --> 00:51:41,890
and and and we do that every day every

00:51:39,910 --> 00:51:44,460
day every day and it's it's we never

00:51:41,890 --> 00:51:44,460
delete them

00:51:51,700 --> 00:52:10,130
and no no though there was a question

00:51:57,530 --> 00:52:12,380
yet I love it so the reason why we do so

00:52:10,130 --> 00:52:16,070
the Haas directory contains this is root

00:52:12,380 --> 00:52:19,010
right so what we want to avoid is we

00:52:16,070 --> 00:52:22,960
want to avoid having a package a

00:52:19,010 --> 00:52:25,790
building and while it's building the SIS

00:52:22,960 --> 00:52:27,680
of the compiler being modified by adding

00:52:25,790 --> 00:52:29,990
more libraries right so if you have a

00:52:27,680 --> 00:52:32,660
configure script that runs and while the

00:52:29,990 --> 00:52:35,030
configure script runs at some step you

00:52:32,660 --> 00:52:37,640
have library a not install and then

00:52:35,030 --> 00:52:39,740
suddenly a library a shows up in the sea

00:52:37,640 --> 00:52:41,780
route so you were like check if a header

00:52:39,740 --> 00:52:42,980
is there it's not and then you check if

00:52:41,780 --> 00:52:51,890
the library is there and then suddenly

00:52:42,980 --> 00:52:53,930
it's there right right so if that in the

00:52:51,890 --> 00:52:55,520
ideal world if the dependency

00:52:53,930 --> 00:52:58,339
annotations are correct you don't need

00:52:55,520 --> 00:53:00,859
that but an ideal world doesn't exist

00:52:58,339 --> 00:53:03,440
and in practice it's almost impossible

00:53:00,859 --> 00:53:05,660
to catch all the the optional

00:53:03,440 --> 00:53:07,730
dependencies that packages are are are

00:53:05,660 --> 00:53:09,410
checking and and and they are changing

00:53:07,730 --> 00:53:12,319
all the time I mean you upgrade to a new

00:53:09,410 --> 00:53:15,050
version of package room and the upstream

00:53:12,319 --> 00:53:17,000
developers but oh no if you have library

00:53:15,050 --> 00:53:19,190
blah blah on your own your sis route I'm

00:53:17,000 --> 00:53:21,890
gonna use it and checking all of that

00:53:19,190 --> 00:53:24,770
when you do we do a version bump is like

00:53:21,890 --> 00:53:27,440
unrealistic so in the ideal world yes

00:53:24,770 --> 00:53:33,890
but in practice it's really not possible

00:53:27,440 --> 00:53:36,230
to do that question we don't I've got

00:53:33,890 --> 00:53:38,000
plenty of good stickers here thank thank

00:53:36,230 --> 00:53:42,550
you for joining it on this day to come

00:53:38,000 --> 00:53:42,550

YouTube URL: https://www.youtube.com/watch?v=D6zO4nMX9KY


