Title: Working with the Linux Kernel in the Yocto Project - Sean Hudson, Embedded Linux Architect
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Working with the Linux Kernel in the Yocto Project - Sean Hudson, Embedded Linux Architect

 The Yocto Project combines tools and metadata together to enable developers to create a customized Linux distribution from source. It eases the burden of carrying customizations across distribution upgrades and helps reduce the effort required to port across architectures. At the heart of any system is the kernel. This talk covers the tooling, the best practices and the work flows to create a custom kernel for their distribution. During the talk, we will explore the development cycle of creating a new kernel configuration and integrating it fully back into the platform. Along the way, we will cover several common tasks and provide pointers about where to get more help. This talk is geared for individuals who are familiar with building a customized Linux system and who are familiar with the Yocto Project. 

About Sean Hudson
Sean has developed software for embedded devices since 1996. He started using Linux personally in 1999 and began developing embedded Linux devices professionally in 2006.He is an Emeritus member of the YP Advisory Board, a member of the OpenEmbedded Board, and part of the devicetree.org Technical Steering Committee.
Captions: 
	00:00:00,060 --> 00:00:06,029
welcome everybody you know you coming in

00:00:03,899 --> 00:00:07,740
from lunch and so it's gonna give a

00:00:06,029 --> 00:00:11,360
little bit of time for people to trickle

00:00:07,740 --> 00:00:17,250
in this is working with a Linux kernel

00:00:11,360 --> 00:00:20,880
in the octo project so anybody's in the

00:00:17,250 --> 00:00:23,820
wrong session feel free I see a lot of

00:00:20,880 --> 00:00:25,830
familiar faces been presenting for a

00:00:23,820 --> 00:00:35,790
little while so some of you already know

00:00:25,830 --> 00:00:36,239
me for those of you who don't okay there

00:00:35,790 --> 00:00:38,610
we go

00:00:36,239 --> 00:00:42,899
a little bit about me this is my vanity

00:00:38,610 --> 00:00:45,420
slide my bio so I've been working in

00:00:42,899 --> 00:00:49,079
embedded since 1996 I've been working

00:00:45,420 --> 00:00:51,989
specifically professionally with Linux

00:00:49,079 --> 00:00:55,590
since 2006 but I started playing with

00:00:51,989 --> 00:00:58,140
Linux in 1999 to build myself a little

00:00:55,590 --> 00:01:02,520
gnat router from a DSL connection that

00:00:58,140 --> 00:01:05,610
was open to the world in the OSS world I

00:01:02,520 --> 00:01:07,590
am on the the board of the open embedded

00:01:05,610 --> 00:01:10,200
project and also a member of Meritus of

00:01:07,590 --> 00:01:13,290
the Yocto project advisory board and

00:01:10,200 --> 00:01:15,710
happened to be part of the technical

00:01:13,290 --> 00:01:18,119
steering committee for device true org

00:01:15,710 --> 00:01:22,020
all which is to say I'm really cool

00:01:18,119 --> 00:01:23,939
right so the more enthusiastic you are

00:01:22,020 --> 00:01:25,290
the more enthusiastic I will be I tend

00:01:23,939 --> 00:01:32,430
to thrive very much with an interactive

00:01:25,290 --> 00:01:34,590
audience so all right so here's kind of

00:01:32,430 --> 00:01:36,299
the basic outline we're gonna start with

00:01:34,590 --> 00:01:38,310
a little bit of project advertising I'm

00:01:36,299 --> 00:01:39,930
just gonna throw up a couple things

00:01:38,310 --> 00:01:42,329
about what's going on around the

00:01:39,930 --> 00:01:44,790
conference with the octave project offer

00:01:42,329 --> 00:01:46,920
a little disclaimer about what this this

00:01:44,790 --> 00:01:48,930
presentation is intended to be and what

00:01:46,920 --> 00:01:50,930
it is intended not to be then I'm going

00:01:48,930 --> 00:01:54,720
to dive right in with some basics and

00:01:50,930 --> 00:01:56,219
we'll get into more specifics so this is

00:01:54,720 --> 00:01:59,549
as much for people looking at the slides

00:01:56,219 --> 00:02:01,020
later as it is for hearing with time

00:01:59,549 --> 00:02:03,920
remaining and hopefully with everything

00:02:01,020 --> 00:02:07,649
else working do I have a little pointer

00:02:03,920 --> 00:02:09,629
we'll get to a live example as you all

00:02:07,649 --> 00:02:11,760
know a live example can many times go

00:02:09,629 --> 00:02:14,250
wrong and frequently does so

00:02:11,760 --> 00:02:16,439
if that doesn't work out then we'll move

00:02:14,250 --> 00:02:20,459
on but everything is contained on my

00:02:16,439 --> 00:02:25,379
laptop so why don't we do a little bit

00:02:20,459 --> 00:02:30,329
of the advertising this is a little you

00:02:25,379 --> 00:02:32,610
naturally see this placard right you can

00:02:30,329 --> 00:02:34,290
actually see this and print form down in

00:02:32,610 --> 00:02:37,110
the octave project booth this these are

00:02:34,290 --> 00:02:40,560
all sessions related to the octave

00:02:37,110 --> 00:02:43,170
project including Thursday event which

00:02:40,560 --> 00:02:44,489
is kind of an extra event outside the

00:02:43,170 --> 00:02:47,129
conference

00:02:44,489 --> 00:02:48,540
this isn't I'm going to upload my slides

00:02:47,129 --> 00:02:51,150
as soon as I doesn't present I'm done

00:02:48,540 --> 00:02:53,780
presenting so you can see this it's also

00:02:51,150 --> 00:02:55,650
available to you in the booth on

00:02:53,780 --> 00:02:58,200
Thursday we have a Yocto project

00:02:55,650 --> 00:03:01,049
developer day I will be taking a session

00:02:58,200 --> 00:03:04,349
there as well this is lifted straight

00:03:01,049 --> 00:03:06,690
from the URL down at the bottom the

00:03:04,349 --> 00:03:10,500
takeaway is that if you are looking for

00:03:06,690 --> 00:03:12,900
a way to accelerate you were knowledge

00:03:10,500 --> 00:03:14,310
for the octave project this is put in

00:03:12,900 --> 00:03:17,069
this is put on by the Yocto project

00:03:14,310 --> 00:03:19,519
itself it's off-site it happens to be at

00:03:17,069 --> 00:03:23,750
my former employer Mentor Graphics

00:03:19,519 --> 00:03:26,609
and we do still have some I think

00:03:23,750 --> 00:03:28,560
registration slots open so feel free to

00:03:26,609 --> 00:03:32,310
sign up we'd love to see people here

00:03:28,560 --> 00:03:34,379
alright see me seating people there if

00:03:32,310 --> 00:03:36,030
you really want to pick up some new

00:03:34,379 --> 00:03:37,290
knowledge and there's two tracks on that

00:03:36,030 --> 00:03:39,000
there's a beginner and there's also an

00:03:37,290 --> 00:03:40,919
advanced so if you already are familiar

00:03:39,000 --> 00:03:45,470
with the basics there's still value to

00:03:40,919 --> 00:03:48,780
be had there the octave project booth

00:03:45,470 --> 00:03:53,970
please go by let them scan your badge

00:03:48,780 --> 00:03:56,190
this helps us quite a quite a bit but it

00:03:53,970 --> 00:03:59,669
also gives you an opportunity to talk to

00:03:56,190 --> 00:04:02,040
developers and maintainer x' directly we

00:03:59,669 --> 00:04:03,599
all are generally down there or

00:04:02,040 --> 00:04:05,870
congregating around there and can answer

00:04:03,599 --> 00:04:08,220
questions or point you to people who can

00:04:05,870 --> 00:04:11,250
you can get more information about the

00:04:08,220 --> 00:04:12,030
sessions that I already threw up and of

00:04:11,250 --> 00:04:13,680
course you can get more information

00:04:12,030 --> 00:04:15,190
about the project hey there's also some

00:04:13,680 --> 00:04:16,810
free stuff

00:04:15,190 --> 00:04:21,370
don't know if I have it in my pocket or

00:04:16,810 --> 00:04:23,260
not the stickers and there's a little

00:04:21,370 --> 00:04:26,920
yok T fuzzy thing and a few other things

00:04:23,260 --> 00:04:29,080
and then also we're gonna be there's

00:04:26,920 --> 00:04:33,250
also gonna be a chance to win a copy of

00:04:29,080 --> 00:04:34,690
a book which I reference here but and I

00:04:33,250 --> 00:04:38,380
actually talked a little bit more about

00:04:34,690 --> 00:04:41,140
here this is the disclaimer there's a

00:04:38,380 --> 00:04:42,640
lot to this topic right there's no way

00:04:41,140 --> 00:04:44,440
that I can cover everything related to

00:04:42,640 --> 00:04:47,830
kernel development and the reactive

00:04:44,440 --> 00:04:49,180
project and you know a single talk so

00:04:47,830 --> 00:04:50,560
what I'm gonna be trying to do is

00:04:49,180 --> 00:04:52,180
highlight some of the things that I

00:04:50,560 --> 00:04:54,160
think are important there's a lot of

00:04:52,180 --> 00:04:56,470
resources out there and I'm trying to

00:04:54,160 --> 00:04:58,000
distinguish myself from them so if I am

00:04:56,470 --> 00:04:59,940
leaving things out that you find in

00:04:58,000 --> 00:05:02,740
those a lot of times that's on purpose

00:04:59,940 --> 00:05:04,780
I'm trying to just kind of give you what

00:05:02,740 --> 00:05:08,230
I felt was important for you as a take

00:05:04,780 --> 00:05:09,880
away in isolation and I also want to

00:05:08,230 --> 00:05:12,310
call out Scott for because you're

00:05:09,880 --> 00:05:13,720
sitting right in my eyeline for you know

00:05:12,310 --> 00:05:17,080
putting together some of the best

00:05:13,720 --> 00:05:19,450
project documentation that I've seen I'm

00:05:17,080 --> 00:05:21,700
very biased but I really think that this

00:05:19,450 --> 00:05:24,520
community is extremely welcoming and

00:05:21,700 --> 00:05:25,840
extremely friendly so we'd love to see

00:05:24,520 --> 00:05:29,200
new people come in and we'd love to help

00:05:25,840 --> 00:05:31,510
new people coming in would really want

00:05:29,200 --> 00:05:33,910
to see new people in new faces

00:05:31,510 --> 00:05:35,410
so with that said one of the other

00:05:33,910 --> 00:05:36,940
things I have to call out is the

00:05:35,410 --> 00:05:40,090
embedded Linux systems with the octo

00:05:36,940 --> 00:05:43,180
project by Rudy this is a really really

00:05:40,090 --> 00:05:45,580
good book I have a copy over here this

00:05:43,180 --> 00:05:48,880
is the book that we will be giving out I

00:05:45,580 --> 00:05:51,750
think we're doing one a day so a really

00:05:48,880 --> 00:05:53,950
good book that covers in depth a lot of

00:05:51,750 --> 00:05:56,980
the ins and outs of working with the

00:05:53,950 --> 00:06:01,570
octave project so with that under our

00:05:56,980 --> 00:06:03,130
belt there we go so for the kernel

00:06:01,570 --> 00:06:04,660
whenever you're doing development you're

00:06:03,130 --> 00:06:06,190
gonna need some pretty basic things and

00:06:04,660 --> 00:06:07,390
I mean really basic you're gonna need

00:06:06,190 --> 00:06:11,919
kernel source and you're gonna need a

00:06:07,390 --> 00:06:13,780
kernel config alright in order to make

00:06:11,919 --> 00:06:16,150
it play nice inside the Yocto project

00:06:13,780 --> 00:06:18,520
you're going to also need some metadata

00:06:16,150 --> 00:06:19,810
or a recipe now I'm assuming everybody

00:06:18,520 --> 00:06:21,460
in the room has at least passing

00:06:19,810 --> 00:06:23,200
familiarity with the rock the Yocto

00:06:21,460 --> 00:06:24,660
project if you don't know everything up

00:06:23,200 --> 00:06:26,520
here don't worry about it

00:06:24,660 --> 00:06:28,200
and also knows about kernel development

00:06:26,520 --> 00:06:30,050
again this is not trying to be an

00:06:28,200 --> 00:06:32,520
in-depth on either of those two topics

00:06:30,050 --> 00:06:35,550
we're trying to put things together so

00:06:32,520 --> 00:06:39,390
for the purposes of our talk we need to

00:06:35,550 --> 00:06:41,820
consider different types of kernels and

00:06:39,390 --> 00:06:42,960
I don't mean arm versus x86 or things

00:06:41,820 --> 00:06:45,900
like that

00:06:42,960 --> 00:06:48,630
there's Linux Yocto kernels which are

00:06:45,900 --> 00:06:50,370
kernels that work with a set of tooling

00:06:48,630 --> 00:06:52,860
and I will go into what that is in a

00:06:50,370 --> 00:06:55,560
minute there are what we would call

00:06:52,860 --> 00:06:58,140
traditional kernels which are ones that

00:06:55,560 --> 00:07:00,480
in some cases predate or for various

00:06:58,140 --> 00:07:04,590
reasons just do not support that Yocto

00:07:00,480 --> 00:07:06,270
Linux Yocto tooling and then new and for

00:07:04,590 --> 00:07:08,160
many of you in the room the new kernels

00:07:06,270 --> 00:07:10,410
are going to be the most interest it's

00:07:08,160 --> 00:07:14,520
how do I get a new kernel that I want to

00:07:10,410 --> 00:07:16,590
play with into the system as I say here

00:07:14,520 --> 00:07:19,410
a lot of times this is from semis but

00:07:16,590 --> 00:07:22,320
you got it from somewhere usually it's

00:07:19,410 --> 00:07:23,730
in a version control I get but

00:07:22,320 --> 00:07:27,090
occasionally you just have a tarball

00:07:23,730 --> 00:07:29,520
dumped on you there's no real specific

00:07:27,090 --> 00:07:31,950
tooling for those types of kernels or

00:07:29,520 --> 00:07:33,630
for the traditional one there's a

00:07:31,950 --> 00:07:37,950
there's general tooling that will make

00:07:33,630 --> 00:07:40,740
use of so a little bit more about Linux

00:07:37,950 --> 00:07:44,400
Yocto kernels and in particular the the

00:07:40,740 --> 00:07:47,010
tooling involved of them the octo

00:07:44,400 --> 00:07:50,880
project maintains several kernels and

00:07:47,010 --> 00:07:56,070
each release and around those kernels as

00:07:50,880 --> 00:07:58,890
a set of tooling that helps making helps

00:07:56,070 --> 00:08:01,380
make supporting multiple platforms with

00:07:58,890 --> 00:08:02,910
a single kernel a lot easier that's

00:08:01,380 --> 00:08:04,860
important because if that's not your use

00:08:02,910 --> 00:08:09,750
case this might not be the best option

00:08:04,860 --> 00:08:12,630
for you coming in green now we'll talk

00:08:09,750 --> 00:08:15,990
more about other recommendations in a

00:08:12,630 --> 00:08:18,450
sec one of the key benefits that you get

00:08:15,990 --> 00:08:19,800
from using these kernels is config

00:08:18,450 --> 00:08:22,500
management again we're talking about

00:08:19,800 --> 00:08:25,740
across multiple different platforms

00:08:22,500 --> 00:08:27,930
we're talking across many times tens of

00:08:25,740 --> 00:08:30,150
different types of devices but you want

00:08:27,930 --> 00:08:31,500
a single kernel that you can rely on so

00:08:30,150 --> 00:08:33,780
managing all that configuration

00:08:31,500 --> 00:08:36,460
information this becomes a lot easier

00:08:33,780 --> 00:08:41,680
once you have this full scaffold built

00:08:36,460 --> 00:08:46,530
for you I'm going to talk more about

00:08:41,680 --> 00:08:48,940
what a config fragment is they allow the

00:08:46,530 --> 00:08:52,900
in order to build on that point above

00:08:48,940 --> 00:08:54,430
where the configuration management the

00:08:52,900 --> 00:08:58,060
kernel configuration management I should

00:08:54,430 --> 00:09:00,370
be careful is that it's allowing you to

00:08:58,060 --> 00:09:02,050
break the kernel config into smaller

00:09:00,370 --> 00:09:05,830
pieces that you can apply across

00:09:02,050 --> 00:09:08,080
multiple configurations so this is

00:09:05,830 --> 00:09:11,760
extremely valuable again when you have a

00:09:08,080 --> 00:09:14,470
lot of lots of different platforms I

00:09:11,760 --> 00:09:18,250
alluded to this already but all of this

00:09:14,470 --> 00:09:20,200
is done the tooling relies on the fact

00:09:18,250 --> 00:09:23,980
that you have a very specific setup of

00:09:20,200 --> 00:09:26,230
the kernel in a git repository and a set

00:09:23,980 --> 00:09:29,950
of metadata files in that same

00:09:26,230 --> 00:09:31,390
repository in an orphan branch I'm going

00:09:29,950 --> 00:09:33,850
to make you aware of this I'm not going

00:09:31,390 --> 00:09:36,160
to dive a lot into depth on on how this

00:09:33,850 --> 00:09:38,740
is done I'm gonna say that it is done

00:09:36,160 --> 00:09:43,440
and it relies on this but what we're

00:09:38,740 --> 00:09:43,440
gonna focus more on is how we use it

00:09:43,680 --> 00:09:49,210
this is really kind of the takeaway that

00:09:46,960 --> 00:09:51,460
I'd like to leave you with this is an

00:09:49,210 --> 00:09:58,450
extremely configurable and therefore

00:09:51,460 --> 00:10:00,370
very complex system to set up this

00:09:58,450 --> 00:10:04,060
consumes a couple of developers on the

00:10:00,370 --> 00:10:08,580
project every cycle just to keep these

00:10:04,060 --> 00:10:11,550
things going forward so setting it up is

00:10:08,580 --> 00:10:14,770
time intensive however using it it's not

00:10:11,550 --> 00:10:16,510
and this is where I leave you with us so

00:10:14,770 --> 00:10:18,670
since the Yocto project is actually

00:10:16,510 --> 00:10:20,740
maintaining several of these kernels for

00:10:18,670 --> 00:10:22,180
you if you can leverage them then you

00:10:20,740 --> 00:10:24,120
get the benefit of already having all

00:10:22,180 --> 00:10:26,200
this stuff all the scaffolding built up

00:10:24,120 --> 00:10:27,820
and of course that's also a reference

00:10:26,200 --> 00:10:29,740
model if you decide that you do need it

00:10:27,820 --> 00:10:30,850
I see you guys from Garmin this is

00:10:29,740 --> 00:10:33,360
probably something that you're going to

00:10:30,850 --> 00:10:33,360
want to look at

00:10:39,400 --> 00:10:44,780
the difference between the kernels

00:10:41,720 --> 00:10:47,180
they're really there isn't much

00:10:44,780 --> 00:10:49,430
difference per se it's just the way that

00:10:47,180 --> 00:10:52,280
the the kernel is structured in the git

00:10:49,430 --> 00:10:55,550
repository so for each release that we

00:10:52,280 --> 00:10:57,560
go through there's a selection process

00:10:55,550 --> 00:11:01,370
by the kernel maintainer x' well they

00:10:57,560 --> 00:11:06,230
will go and pull an LTS kernel ltsi

00:11:01,370 --> 00:11:07,640
kernel and usually one other and you

00:11:06,230 --> 00:11:09,140
have to go and look at each release and

00:11:07,640 --> 00:11:10,790
the release notes it'll say which

00:11:09,140 --> 00:11:13,940
kernels are supported

00:11:10,790 --> 00:11:15,470
obviously the well I say obviously for

00:11:13,940 --> 00:11:17,990
those more familiar with the project one

00:11:15,470 --> 00:11:22,520
of the primary validation targets that

00:11:17,990 --> 00:11:23,690
we use is QEMU and so there are gonna be

00:11:22,520 --> 00:11:27,430
things that are a little more specific

00:11:23,690 --> 00:11:30,440
to making that work right out of the box

00:11:27,430 --> 00:11:32,240
but for the most part they're it's like

00:11:30,440 --> 00:11:34,220
with any kernel tree right you're gonna

00:11:32,240 --> 00:11:36,890
have some stream of patches that might

00:11:34,220 --> 00:11:39,590
vary a little bit but we they try and

00:11:36,890 --> 00:11:41,660
stay really right on top of main line as

00:11:39,590 --> 00:11:44,840
much as possible so you'll see that the

00:11:41,660 --> 00:11:52,100
the upcoming release is does do you know

00:11:44,840 --> 00:11:53,810
mark what the 415 okay so like I said

00:11:52,100 --> 00:11:55,580
they try and stay pretty close up what

00:11:53,810 --> 00:11:58,660
up great question

00:11:55,580 --> 00:11:58,660
any other questions well we're at

00:11:58,900 --> 00:12:03,650
alright you're starting to get sleepy

00:12:00,680 --> 00:12:07,100
again so I mentioned the different

00:12:03,650 --> 00:12:10,430
classes of kernels what about adding one

00:12:07,100 --> 00:12:11,900
that we just have a kernel tree you know

00:12:10,430 --> 00:12:15,530
I get repository they don't want to do

00:12:11,900 --> 00:12:17,120
so the simplest approach for people

00:12:15,530 --> 00:12:19,280
coming in with a new kernel is just to

00:12:17,120 --> 00:12:21,410
simply take the traditional approach

00:12:19,280 --> 00:12:24,620
you're going to add in the kernel source

00:12:21,410 --> 00:12:27,290
and your dot config and in this case it

00:12:24,620 --> 00:12:31,070
can be called def config directly into

00:12:27,290 --> 00:12:34,190
the build the recipe there's a good rely

00:12:31,070 --> 00:12:37,520
heavily on a kernel BB class that BB

00:12:34,190 --> 00:12:39,440
class takes care of most of the the the

00:12:37,520 --> 00:12:40,880
heavy lifting if you will of setting up

00:12:39,440 --> 00:12:43,250
the cross it takes care of all of the

00:12:40,880 --> 00:12:44,960
heavy lifting of making sure that your

00:12:43,250 --> 00:12:46,700
cross compile environment is is good to

00:12:44,960 --> 00:12:47,700
go there's a few things though that you

00:12:46,700 --> 00:12:51,950
need to to

00:12:47,700 --> 00:12:59,160
and I actually took this example from

00:12:51,950 --> 00:13:01,560
from meta Ti Dennis Yunior so it was it

00:12:59,160 --> 00:13:04,680
was a really good example of how we do

00:13:01,560 --> 00:13:06,090
traditional kernels and I turned out a

00:13:04,680 --> 00:13:07,530
whole bunch of stuff that wasn't really

00:13:06,090 --> 00:13:09,450
relevant for our talk so there's a lot

00:13:07,530 --> 00:13:11,820
more to this and there's include files

00:13:09,450 --> 00:13:13,320
and other things in here but one of the

00:13:11,820 --> 00:13:15,360
main things I wanted to point out was

00:13:13,320 --> 00:13:17,880
that you have this nice inherit kernel

00:13:15,360 --> 00:13:20,280
that directive inside this recipe is

00:13:17,880 --> 00:13:23,130
going to activate almost everything that

00:13:20,280 --> 00:13:27,540
you need you'll also notice that this

00:13:23,130 --> 00:13:32,130
source URI is just basically pointing to

00:13:27,540 --> 00:13:34,590
in this case the ti in Linux get tree so

00:13:32,130 --> 00:13:36,240
you've got a repository out there it's

00:13:34,590 --> 00:13:39,150
got your kernel in it you point it to it

00:13:36,240 --> 00:13:42,960
and then you include in the files

00:13:39,150 --> 00:13:44,940
subdirectory your config so if you're

00:13:42,960 --> 00:13:46,590
starting from a baseline config that you

00:13:44,940 --> 00:13:49,860
found in the tree you copy it to there

00:13:46,590 --> 00:13:52,560
you push all this in and then away you

00:13:49,860 --> 00:13:53,880
go so I'm gonna pause for a minute see

00:13:52,560 --> 00:13:55,740
if there anybody has any questions on

00:13:53,880 --> 00:14:06,150
this it seems pretty straightforward

00:13:55,740 --> 00:14:08,160
right ok so I'm as an architect I find

00:14:06,150 --> 00:14:10,710
myself many times having to think about

00:14:08,160 --> 00:14:12,180
what does this really boil down to or

00:14:10,710 --> 00:14:13,920
boil up to depending on how you want to

00:14:12,180 --> 00:14:16,020
look at it so what are the really basic

00:14:13,920 --> 00:14:17,550
steps that we need to do and how is this

00:14:16,020 --> 00:14:19,680
different from normal kernel development

00:14:17,550 --> 00:14:21,390
so normal normal kernel development

00:14:19,680 --> 00:14:23,670
you've got your train you make your

00:14:21,390 --> 00:14:26,430
changes you compile you throw it on a

00:14:23,670 --> 00:14:29,850
target lather rinse repeat so what are

00:14:26,430 --> 00:14:32,340
we doing differently now really the main

00:14:29,850 --> 00:14:34,800
thing is we need to add this kernel into

00:14:32,340 --> 00:14:37,440
our build environment we need to add

00:14:34,800 --> 00:14:40,440
this into the cross compile environment

00:14:37,440 --> 00:14:42,930
make sure that all the the toolchain

00:14:40,440 --> 00:14:45,330
pieces line up and all of the the

00:14:42,930 --> 00:14:47,370
different optimization flags line up so

00:14:45,330 --> 00:14:49,020
that when at the end of the day our

00:14:47,370 --> 00:14:51,900
kernel compiles into this environment

00:14:49,020 --> 00:14:53,640
cleanly so the first step then is to do

00:14:51,900 --> 00:14:56,070
just that we're gonna add it in via that

00:14:53,640 --> 00:14:57,520
recipe example that I showed you or if

00:14:56,070 --> 00:14:59,800
you're lucky you already have one

00:14:57,520 --> 00:15:02,500
it's out there into the build

00:14:59,800 --> 00:15:04,060
environment next thing you're gonna do

00:15:02,500 --> 00:15:06,160
is just like you would before you're

00:15:04,060 --> 00:15:08,890
gonna verify your build you're going to

00:15:06,160 --> 00:15:10,690
make sure that it actually runs on your

00:15:08,890 --> 00:15:12,160
target if it doesn't then you're gonna

00:15:10,690 --> 00:15:14,320
go back and you're gonna start making

00:15:12,160 --> 00:15:16,420
changes you're gonna make changes both

00:15:14,320 --> 00:15:19,180
to the source and to the kernel

00:15:16,420 --> 00:15:20,470
configuration after you've made those

00:15:19,180 --> 00:15:25,230
changes you're going to need to capture

00:15:20,470 --> 00:15:26,560
them that's it all right easy we're done

00:15:25,230 --> 00:15:31,540
all right

00:15:26,560 --> 00:15:33,220
no okay still sleeping so the main thing

00:15:31,540 --> 00:15:35,290
is how do we capture those changes right

00:15:33,220 --> 00:15:37,300
you're the fundamentally the steps

00:15:35,290 --> 00:15:39,910
aren't that hard but the devil is always

00:15:37,300 --> 00:15:43,090
in the details so capturing these

00:15:39,910 --> 00:15:45,250
changes is going to influence the way

00:15:43,090 --> 00:15:47,830
you construct that recipe I gave you the

00:15:45,250 --> 00:15:49,620
simple version which had just the git

00:15:47,830 --> 00:15:55,060
repository

00:15:49,620 --> 00:15:56,350
it also will the the way you captured

00:15:55,060 --> 00:15:59,040
these changes influenced the recipe and

00:15:56,350 --> 00:16:01,600
of course the recipe by it by

00:15:59,040 --> 00:16:03,010
correlation is also going to influence

00:16:01,600 --> 00:16:04,780
how you capture these changes I know

00:16:03,010 --> 00:16:07,360
it's very tight although it's a circular

00:16:04,780 --> 00:16:07,870
but the idea is that if you have a

00:16:07,360 --> 00:16:09,010
tarball

00:16:07,870 --> 00:16:12,190
you're going to do things differently

00:16:09,010 --> 00:16:14,290
than if you have a VCS if you are

00:16:12,190 --> 00:16:15,520
working against a known baseline and

00:16:14,290 --> 00:16:19,840
trying to modify it you're going to do

00:16:15,520 --> 00:16:23,860
things a little bit differently so this

00:16:19,840 --> 00:16:25,990
is a little bit of a little bit longer

00:16:23,860 --> 00:16:29,650
than I thought it was on when I wrote it

00:16:25,990 --> 00:16:31,180
but you know when you're one of the key

00:16:29,650 --> 00:16:32,680
points about this and I already alluded

00:16:31,180 --> 00:16:37,120
to it is where you want to capture

00:16:32,680 --> 00:16:40,120
changes as with all recipes in the

00:16:37,120 --> 00:16:43,510
octave project you have the opportunity

00:16:40,120 --> 00:16:45,790
to store those changes as patches or you

00:16:43,510 --> 00:16:48,790
can also store them as a change in your

00:16:45,790 --> 00:16:50,620
version control system again where you

00:16:48,790 --> 00:16:52,000
derive your kernel from as far as a

00:16:50,620 --> 00:16:54,660
baseline is going to drive a lot of

00:16:52,000 --> 00:16:56,280
times what's the easiest model for you

00:16:54,660 --> 00:17:00,149
[Music]

00:16:56,280 --> 00:17:03,009
most cases you're going to use gits

00:17:00,149 --> 00:17:04,659
this same process is going to apply both

00:17:03,009 --> 00:17:06,909
to the kernel configuration and also to

00:17:04,659 --> 00:17:09,429
things like the the device tree which I

00:17:06,909 --> 00:17:14,589
really don't refer to in any other place

00:17:09,429 --> 00:17:17,769
on here personally I find that once you

00:17:14,589 --> 00:17:21,549
get past a handful of patches in your

00:17:17,769 --> 00:17:26,949
recipe it in in terms of your ear layer

00:17:21,549 --> 00:17:30,759
it becomes a bit cumbersome to continue

00:17:26,949 --> 00:17:32,769
to modify that so I tend to strongly

00:17:30,759 --> 00:17:34,450
prefer get and then when I get later on

00:17:32,769 --> 00:17:36,580
I'll show you the particular workflow

00:17:34,450 --> 00:17:40,990
that that I generally adopt where

00:17:36,580 --> 00:17:42,820
possible so we're gonna take a little

00:17:40,990 --> 00:17:44,710
bit of a pause in the middle of this to

00:17:42,820 --> 00:17:54,850
talk about some specific capabilities

00:17:44,710 --> 00:17:58,049
and yes sir where do you run to I'm

00:17:54,850 --> 00:17:58,049
generally running just one yes

00:18:04,800 --> 00:18:12,830
on there and then helpful in why get

00:18:09,870 --> 00:18:12,830
reporter

00:18:49,710 --> 00:18:53,500
there's actually a tool that I'm going

00:18:51,820 --> 00:18:55,330
to talk about cut dev tool which does

00:18:53,500 --> 00:18:57,970
some of that similar type of thing for

00:18:55,330 --> 00:18:59,470
you there there's a tool that we have in

00:18:57,970 --> 00:19:02,260
the project that I will talk about in a

00:18:59,470 --> 00:19:03,700
later slide called dev tool that kind of

00:19:02,260 --> 00:19:05,160
helps automate some of that process for

00:19:03,700 --> 00:19:09,190
you

00:19:05,160 --> 00:19:10,990
yeah well dive into that more again I'm

00:19:09,190 --> 00:19:13,120
how many hit things at a very high level

00:19:10,990 --> 00:19:18,610
so certainly come afterwards and we can

00:19:13,120 --> 00:19:20,050
do ok where was that alright so you know

00:19:18,610 --> 00:19:22,620
again this is very high level this is

00:19:20,050 --> 00:19:27,400
very generic right you're talking about

00:19:22,620 --> 00:19:29,020
some things that are just absolutely you

00:19:27,400 --> 00:19:30,940
know run of them run-of-the-mill type of

00:19:29,020 --> 00:19:33,060
things but they do have sort of long

00:19:30,940 --> 00:19:37,240
lasting impacts so if you start using

00:19:33,060 --> 00:19:38,920
you know get to capture patches then and

00:19:37,240 --> 00:19:42,250
what I've found is that that makes a lot

00:19:38,920 --> 00:19:44,830
easier for instance to diff patches or

00:19:42,250 --> 00:19:45,520
find when a particular patch has has

00:19:44,830 --> 00:19:47,800
gone wrong

00:19:45,520 --> 00:19:49,210
using bisect and things like that you

00:19:47,800 --> 00:19:51,910
lose some of that capability when you're

00:19:49,210 --> 00:19:53,680
using just raw patches stored in the

00:19:51,910 --> 00:19:57,130
layers so that's part of the reason why

00:19:53,680 --> 00:19:58,660
I look at that and prefer it so getting

00:19:57,130 --> 00:20:00,340
into a little bit of bitbake and this

00:19:58,660 --> 00:20:08,470
this goes to ways that we capture those

00:20:00,340 --> 00:20:10,600
changes keep an eye on time here so this

00:20:08,470 --> 00:20:12,160
is I know this is probably unreadable

00:20:10,600 --> 00:20:14,560
for most of you all I did was a list

00:20:12,160 --> 00:20:16,540
tasks here this is the love of the the

00:20:14,560 --> 00:20:17,650
kernel tasks so again this is more for

00:20:16,540 --> 00:20:20,530
reference if you're looking at the

00:20:17,650 --> 00:20:25,200
slides later I'm gonna highlight a

00:20:20,530 --> 00:20:25,200
couple of them that are very valuable

00:20:25,260 --> 00:20:30,370
one of them is the wrapper tasks that is

00:20:28,750 --> 00:20:32,230
around the menu config so if you done

00:20:30,370 --> 00:20:36,670
any kernel development and you you're

00:20:32,230 --> 00:20:38,290
familiar with make menu config in order

00:20:36,670 --> 00:20:42,070
to execute in the bit baked environment

00:20:38,290 --> 00:20:44,440
there is a bit baked - see menu config

00:20:42,070 --> 00:20:47,500
of your kernel this is going to pop open

00:20:44,440 --> 00:20:50,830
a UI that you can use to manually edit

00:20:47,500 --> 00:20:56,860
different options and select them there

00:20:50,830 --> 00:21:01,660
are however some caveats to this yeah I

00:20:56,860 --> 00:21:03,180
already covered that because of the way

00:21:01,660 --> 00:21:06,070
that

00:21:03,180 --> 00:21:07,630
the execution occurs in the the Yocto

00:21:06,070 --> 00:21:09,760
project environment you have to make

00:21:07,630 --> 00:21:16,420
sure that a configuration already exists

00:21:09,760 --> 00:21:19,570
so if you just do a if you go and you do

00:21:16,420 --> 00:21:21,790
a creation of a new environment for

00:21:19,570 --> 00:21:24,430
using the olya net script and you do a

00:21:21,790 --> 00:21:27,130
bit bake - the menu config virtual

00:21:24,430 --> 00:21:29,740
kernel it will fail you have to execute

00:21:27,130 --> 00:21:31,630
the configuration first a simple way to

00:21:29,740 --> 00:21:34,990
do it would just tell it to build until

00:21:31,630 --> 00:21:38,850
it was complete but an alternative is

00:21:34,990 --> 00:21:41,470
also to use the kernel config knee

00:21:38,850 --> 00:21:45,640
command over here haven't a hard time

00:21:41,470 --> 00:21:47,080
seeing this so this will basically drive

00:21:45,640 --> 00:21:48,790
the process through to the point where

00:21:47,080 --> 00:21:50,800
it's completed the configuration so that

00:21:48,790 --> 00:21:54,640
then the next step would be to issue and

00:21:50,800 --> 00:21:57,190
then you configure one of the other

00:21:54,640 --> 00:22:01,230
things to be aware of is that just like

00:21:57,190 --> 00:22:04,870
the command functions in your your tree

00:22:01,230 --> 00:22:06,580
on without the Yocto project being

00:22:04,870 --> 00:22:08,980
involved at all it's modifying the dot

00:22:06,580 --> 00:22:10,780
config in that kernel source tree well

00:22:08,980 --> 00:22:12,280
this is slightly different when you're

00:22:10,780 --> 00:22:14,080
trying to build this inside the octave

00:22:12,280 --> 00:22:15,670
project so it's building it inside or

00:22:14,080 --> 00:22:18,660
it's modifying it directly inside the

00:22:15,670 --> 00:22:21,790
working directory for the project and

00:22:18,660 --> 00:22:24,240
that means that you are subject to the

00:22:21,790 --> 00:22:26,470
whims if you will and it's not really

00:22:24,240 --> 00:22:28,300
whimsical but there there are certain

00:22:26,470 --> 00:22:29,980
steps that you might take in terms of

00:22:28,300 --> 00:22:31,510
modifying recipes and things like this

00:22:29,980 --> 00:22:33,850
that would blow away that configuration

00:22:31,510 --> 00:22:36,730
so if you've spent a whole lot of time

00:22:33,850 --> 00:22:38,260
very carefully selecting options and

00:22:36,730 --> 00:22:39,430
your menu config and you've got it just

00:22:38,260 --> 00:22:41,170
the way you want it and everything else

00:22:39,430 --> 00:22:42,760
and you think okay well I'm gonna clean

00:22:41,170 --> 00:22:44,310
everything and I'm gonna I'm gonna start

00:22:42,760 --> 00:22:48,940
over and make sure everything looks good

00:22:44,310 --> 00:22:51,490
don't do that I think everybody at least

00:22:48,940 --> 00:22:54,780
has done that once and has lived to

00:22:51,490 --> 00:22:57,580
regret this because then you go oh no

00:22:54,780 --> 00:22:59,980
because it blows away that that working

00:22:57,580 --> 00:23:01,150
directory and that config is now gone so

00:22:59,980 --> 00:23:04,270
make sure that you're going to capture

00:23:01,150 --> 00:23:08,050
those changes there's ways that you can

00:23:04,270 --> 00:23:11,200
do that that involved the next command

00:23:08,050 --> 00:23:15,240
but in a bare minimum you can just copy

00:23:11,200 --> 00:23:19,740
that that file out of the work directory

00:23:15,240 --> 00:23:25,240
so another important one oh sorry um

00:23:19,740 --> 00:23:26,980
what I put up here oh one other one

00:23:25,240 --> 00:23:28,930
other point to this so let's say that

00:23:26,980 --> 00:23:31,750
you are actively modifying your your

00:23:28,930 --> 00:23:35,740
menu can your config via menu config and

00:23:31,750 --> 00:23:37,420
you do not want to invalidate previous

00:23:35,740 --> 00:23:40,810
steps but you do want to force it to do

00:23:37,420 --> 00:23:42,670
a compile because it's the tool changed

00:23:40,810 --> 00:23:45,370
it directly in the tree it's not going

00:23:42,670 --> 00:23:49,780
to necessarily do a recompile so you use

00:23:45,370 --> 00:23:51,970
this - see which quite honestly I used

00:23:49,780 --> 00:23:55,090
to use I just used - F which is a force

00:23:51,970 --> 00:23:56,470
I didn't use - C and has some other side

00:23:55,090 --> 00:23:57,160
effects so this one is a better way to

00:23:56,470 --> 00:23:59,110
do it

00:23:57,160 --> 00:24:01,210
Rudi's book actually when I was doing

00:23:59,110 --> 00:24:05,790
some prep work for this was where I

00:24:01,210 --> 00:24:08,280
found this so that basically it

00:24:05,790 --> 00:24:10,990
invalidates the particular s state cache

00:24:08,280 --> 00:24:14,260
for that task and then forces that task

00:24:10,990 --> 00:24:17,170
to rerun so it's a very valuable way to

00:24:14,260 --> 00:24:21,430
tell it I just want you to recompile and

00:24:17,170 --> 00:24:24,070
see if the compile actually works so a

00:24:21,430 --> 00:24:27,580
little little time saver there in terms

00:24:24,070 --> 00:24:30,520
of if you don't do this and you do - C

00:24:27,580 --> 00:24:31,920
compile it will just use what was in

00:24:30,520 --> 00:24:35,350
shared stay and say yeah I'm good and

00:24:31,920 --> 00:24:39,420
and move on so this helps ensure that

00:24:35,350 --> 00:24:39,420
you you get what you actually changed

00:24:40,020 --> 00:24:46,390
I'm sorry yes this is one of the dangers

00:24:44,410 --> 00:24:48,130
of spending too much time with something

00:24:46,390 --> 00:24:50,950
it's yes it's very obvious to me that

00:24:48,130 --> 00:24:52,270
that's a capital C versus a lowercase C

00:24:50,950 --> 00:24:54,010
and those are different I think I

00:24:52,270 --> 00:24:57,100
actually put it in another slide I

00:24:54,010 --> 00:24:59,200
didn't I put it there because I thought

00:24:57,100 --> 00:25:02,950
about it so yeah I mean basically the

00:24:59,200 --> 00:25:05,440
lowercase C is is where you're gonna see

00:25:02,950 --> 00:25:09,430
a different so I have that in red thanks

00:25:05,440 --> 00:25:12,070
for the question let's look at one other

00:25:09,430 --> 00:25:14,080
one here so again there's another script

00:25:12,070 --> 00:25:14,720
inside the kernel called diff config

00:25:14,080 --> 00:25:16,370
actually

00:25:14,720 --> 00:25:20,299
I seem to recall that was something that

00:25:16,370 --> 00:25:23,690
Tim Berg did it does a nice comparison

00:25:20,299 --> 00:25:25,880
of a sorted kernel configuration file

00:25:23,690 --> 00:25:28,400
and then generates just just what it

00:25:25,880 --> 00:25:33,230
says the difference between those so

00:25:28,400 --> 00:25:34,909
that gives you a way to run that when it

00:25:33,230 --> 00:25:38,929
runs successfully it's gonna actually

00:25:34,909 --> 00:25:42,260
just throw out a little a little file

00:25:38,929 --> 00:25:45,190
path that it has that config file config

00:25:42,260 --> 00:25:48,470
fragment that's what this is going to be

00:25:45,190 --> 00:25:50,270
that you can go and look at but that's

00:25:48,470 --> 00:25:52,490
also in that work directory so again you

00:25:50,270 --> 00:25:59,210
can lose this if you're not careful

00:25:52,490 --> 00:26:01,190
once that fragment is generated yes yep

00:25:59,210 --> 00:26:06,049
there should be yeah if you just execute

00:26:01,190 --> 00:26:08,390
that it will say yeah I need to correct

00:26:06,049 --> 00:26:10,760
that but again it wraps the kernel

00:26:08,390 --> 00:26:14,360
script of the same name it is generating

00:26:10,760 --> 00:26:16,669
that that Delta against a baseline so

00:26:14,360 --> 00:26:20,000
this is actually really part of the

00:26:16,669 --> 00:26:23,120
reason why the menu config needs to run

00:26:20,000 --> 00:26:25,570
and also why that our excuse me why you

00:26:23,120 --> 00:26:27,590
need to run that kernel config me

00:26:25,570 --> 00:26:29,659
beforehand because it's part of the

00:26:27,590 --> 00:26:31,789
process of generating this baseline and

00:26:29,659 --> 00:26:34,250
then it uses that baseline to compare

00:26:31,789 --> 00:26:37,250
against and for any changes that you may

00:26:34,250 --> 00:26:39,049
have made and when I get to the live

00:26:37,250 --> 00:26:44,390
demo I can show you when that gets

00:26:39,049 --> 00:26:46,549
created here's some considerations our

00:26:44,390 --> 00:26:49,190
excuse me the same considerations are

00:26:46,549 --> 00:26:51,559
going to apply as far as the many config

00:26:49,190 --> 00:26:54,049
because as I said that I think fragment

00:26:51,559 --> 00:26:56,360
gets dumped into your work directory you

00:26:54,049 --> 00:26:59,260
have to worry about whether or not your

00:26:56,360 --> 00:27:04,370
work directory he's gonna get removed

00:26:59,260 --> 00:27:05,960
still with me everybody still awake all

00:27:04,370 --> 00:27:08,659
right cool

00:27:05,960 --> 00:27:10,520
so creating and integrating those

00:27:08,659 --> 00:27:14,210
changes or the basic developer workflow

00:27:10,520 --> 00:27:16,460
right we've gone through the basic first

00:27:14,210 --> 00:27:17,900
step right so now we want to be able to

00:27:16,460 --> 00:27:20,210
turn that crank we want to make the

00:27:17,900 --> 00:27:21,559
changes to configuration of our kernel

00:27:20,210 --> 00:27:23,600
we want to make source changes and we

00:27:21,559 --> 00:27:27,920
want to be able to have those flow back

00:27:23,600 --> 00:27:29,960
into our build in a clean way yeah so

00:27:27,920 --> 00:27:34,460
when you start from an existing kernel

00:27:29,960 --> 00:27:36,770
recipe great seriously you're almost

00:27:34,460 --> 00:27:38,990
done one of the reasons why though Yocto

00:27:36,770 --> 00:27:41,780
project exists is to make it as turnkey

00:27:38,990 --> 00:27:43,430
as possible so for the ones that are

00:27:41,780 --> 00:27:45,110
currently in the octave project you

00:27:43,430 --> 00:27:47,510
already have a recipe it's already

00:27:45,110 --> 00:27:49,910
integrated into the build system your

00:27:47,510 --> 00:27:51,500
most of the way home you you now can

00:27:49,910 --> 00:27:56,360
focus a little bit more on your changes

00:27:51,500 --> 00:27:59,750
in the kernel in order to modify it one

00:27:56,360 --> 00:28:01,100
without modifying it directly as the

00:27:59,750 --> 00:28:02,660
gentleman the back was saying about you

00:28:01,100 --> 00:28:02,990
know you know I pushed a kernel out of

00:28:02,660 --> 00:28:04,340
work

00:28:02,990 --> 00:28:08,420
well I'm not gonna push the kernel or

00:28:04,340 --> 00:28:10,330
somebody else might you general process

00:28:08,420 --> 00:28:13,670
you're gonna go and create a layer I

00:28:10,330 --> 00:28:15,410
suggest using the octal layer tool which

00:28:13,670 --> 00:28:17,210
is part of the the octave project

00:28:15,410 --> 00:28:23,000
there's a Yocto layer create it'll

00:28:17,210 --> 00:28:25,040
create a skeleton for you you know it's

00:28:23,000 --> 00:28:27,500
funny because I'm getting them told that

00:28:25,040 --> 00:28:30,440
that was actually removed in the latest

00:28:27,500 --> 00:28:31,610
release damn it I have a caveat at the

00:28:30,440 --> 00:28:33,590
end of this which says the tools are

00:28:31,610 --> 00:28:38,150
constantly changing so cool I'll go and

00:28:33,590 --> 00:28:40,820
strike that this is a this was just a

00:28:38,150 --> 00:28:43,400
waited to copy out a skeleton file

00:28:40,820 --> 00:28:44,900
anyway so you can find that and we

00:28:43,400 --> 00:28:48,560
haven't removed the skeleton files have

00:28:44,900 --> 00:28:49,450
a haven't looked and last you don't know

00:28:48,560 --> 00:28:54,190
all right

00:28:49,450 --> 00:28:56,960
anyway so the at this point if you are

00:28:54,190 --> 00:28:58,130
if your kernel supports the optic kernel

00:28:56,960 --> 00:29:00,040
tools remember I said there was two

00:28:58,130 --> 00:29:02,600
different classes there's the ones that

00:29:00,040 --> 00:29:04,880
currently support the Yocto tools and

00:29:02,600 --> 00:29:06,380
then there's ones that are still we

00:29:04,880 --> 00:29:07,940
carry them in the layers they're

00:29:06,380 --> 00:29:09,950
available to you but they're considered

00:29:07,940 --> 00:29:11,720
traditional and they don't use the octal

00:29:09,950 --> 00:29:14,960
air tools so for the ones that fall into

00:29:11,720 --> 00:29:17,090
that former class you can use that diff

00:29:14,960 --> 00:29:20,320
config command and the menu config to

00:29:17,090 --> 00:29:23,360
manually create changes and generate

00:29:20,320 --> 00:29:26,540
config fragments in order to put them

00:29:23,360 --> 00:29:28,160
into your lair and I don't think I

00:29:26,540 --> 00:29:28,490
actually said anything about how to do

00:29:28,160 --> 00:29:32,540
that

00:29:28,490 --> 00:29:37,040
damnit so basically those dot CFG files

00:29:32,540 --> 00:29:39,800
you can add to your source URI sorry I

00:29:37,040 --> 00:29:41,140
need it I need to add that in however if

00:29:39,800 --> 00:29:43,090
your kernel doesn't

00:29:41,140 --> 00:29:45,760
support the Yocto kernel tools then

00:29:43,090 --> 00:29:48,310
really you can still use menu config but

00:29:45,760 --> 00:29:51,430
the your your config file is sitting in

00:29:48,310 --> 00:29:53,980
the tree so at this point you're gonna

00:29:51,430 --> 00:29:56,140
want to copy that out and if you go if

00:29:53,980 --> 00:29:58,540
you think about that recipe example that

00:29:56,140 --> 00:30:01,030
I gave you a few minutes ago

00:29:58,540 --> 00:30:03,250
that's that def config so you'll copy

00:30:01,030 --> 00:30:05,920
that back to your lair

00:30:03,250 --> 00:30:10,510
and then check that in and then away you

00:30:05,920 --> 00:30:13,150
go so that's that's the basic part of it

00:30:10,510 --> 00:30:17,170
and then for your actual patches as

00:30:13,150 --> 00:30:19,200
opposed to the config portion again

00:30:17,170 --> 00:30:22,900
there's you you have two different major

00:30:19,200 --> 00:30:27,640
directions it's basically add them in as

00:30:22,900 --> 00:30:29,940
patches or add them in into your version

00:30:27,640 --> 00:30:29,940
control

00:30:38,170 --> 00:30:44,210
it is not there is a way to do that but

00:30:42,559 --> 00:30:45,770
I didn't go into that here and it's a

00:30:44,210 --> 00:30:49,040
little more involved it's honestly

00:30:45,770 --> 00:30:51,830
something that I have never done so

00:30:49,040 --> 00:30:53,000
there's plenty of people at the project

00:30:51,830 --> 00:31:03,790
who can talk a little bit more about

00:30:53,000 --> 00:31:03,790
what all is involved in doing it okay

00:31:03,820 --> 00:31:12,410
it's bitbake clear okay yeah it's a

00:31:10,340 --> 00:31:13,730
moving target so they get in the last I

00:31:12,410 --> 00:31:14,809
think point that I put on this and I'll

00:31:13,730 --> 00:31:16,970
say it now and then I'll say it again

00:31:14,809 --> 00:31:19,130
later is keep up with it I mean pay

00:31:16,970 --> 00:31:23,030
attention to what's going on clearly it

00:31:19,130 --> 00:31:25,160
can slip by you so this one's probably

00:31:23,030 --> 00:31:26,420
more the way that most people think of

00:31:25,160 --> 00:31:30,140
it I've got a new kernel I want to

00:31:26,420 --> 00:31:33,260
actually add into my tree I what what do

00:31:30,140 --> 00:31:35,360
i do as far as getting that in there

00:31:33,260 --> 00:31:36,200
it's really not that bad so I already

00:31:35,360 --> 00:31:39,800
talked about that

00:31:36,200 --> 00:31:42,200
that skeleton recipe if you add that

00:31:39,800 --> 00:31:45,650
kernel recipe to the build system see

00:31:42,200 --> 00:31:48,730
that one above then you've got it

00:31:45,650 --> 00:31:51,320
integrated into your build system right

00:31:48,730 --> 00:31:54,470
you want to make sure this this is one

00:31:51,320 --> 00:31:57,140
important step here again this has

00:31:54,470 --> 00:31:58,670
bitten me before too you want to make

00:31:57,140 --> 00:32:01,490
sure that in your local comp you're

00:31:58,670 --> 00:32:03,110
setting your preferred provider or maybe

00:32:01,490 --> 00:32:06,590
in your machine count but this is the

00:32:03,110 --> 00:32:08,330
the most straightforward way to set you

00:32:06,590 --> 00:32:10,790
know your preferred provider is now that

00:32:08,330 --> 00:32:13,970
new kernel and that's whatever that

00:32:10,790 --> 00:32:16,550
recipe is that you created here going

00:32:13,970 --> 00:32:18,080
from there you know now you've got it

00:32:16,550 --> 00:32:19,940
integrated into the build system and

00:32:18,080 --> 00:32:21,620
then pretty much you go back to the

00:32:19,940 --> 00:32:25,610
previous slide as far as the steps are

00:32:21,620 --> 00:32:28,309
concerned you can use difficult age if

00:32:25,610 --> 00:32:29,000
it's a Yocto tool if it supports the

00:32:28,309 --> 00:32:33,200
octo tools

00:32:29,000 --> 00:32:35,660
dr. kernel tools or you know you can

00:32:33,200 --> 00:32:37,880
just copy your your config in I think

00:32:35,660 --> 00:32:40,040
the simplest one is just a copy or your

00:32:37,880 --> 00:32:44,660
config into the def config and where you

00:32:40,040 --> 00:32:48,010
go and then patches the same way so it's

00:32:44,660 --> 00:32:48,010
it becomes the same process

00:32:48,280 --> 00:32:54,820
still with me cool

00:32:51,820 --> 00:32:56,559
all right so creating kernel patches you

00:32:54,820 --> 00:32:58,090
know this thing I really kind of

00:32:56,559 --> 00:33:00,100
struggled on this slide more than almost

00:32:58,090 --> 00:33:02,320
any other and it's because there's so

00:33:00,100 --> 00:33:03,760
many different ways you know you use

00:33:02,320 --> 00:33:07,240
your favorite editor we could get into

00:33:03,760 --> 00:33:11,169
VI and Emacs Wars we wanted to but you

00:33:07,240 --> 00:33:12,610
know the idea is that you've got a tree

00:33:11,169 --> 00:33:15,039
on your system and you can create

00:33:12,610 --> 00:33:17,559
packages with those so one way to do it

00:33:15,039 --> 00:33:19,630
and I don't recommend this is you can go

00:33:17,559 --> 00:33:21,400
and work directly in the work directory

00:33:19,630 --> 00:33:24,760
that we spoke of before you can go and

00:33:21,400 --> 00:33:27,850
make changes there you know this is easy

00:33:24,760 --> 00:33:31,120
to get to by using that dev shell that

00:33:27,850 --> 00:33:33,460
the dev shell command and for a quick

00:33:31,120 --> 00:33:35,710
you know you check of something that's

00:33:33,460 --> 00:33:37,450
probably more than sufficient but you

00:33:35,710 --> 00:33:40,510
you are now again at the mercy of that

00:33:37,450 --> 00:33:42,070
that work directory going away it is

00:33:40,510 --> 00:33:44,049
nice however and that you can drop

00:33:42,070 --> 00:33:46,390
immediately in you can execute for

00:33:44,049 --> 00:33:49,000
instance and then make menu config and

00:33:46,390 --> 00:33:50,559
it will run you can do most of the the

00:33:49,000 --> 00:33:52,539
operations that you would expect to do a

00:33:50,559 --> 00:33:54,460
normal kernel development so it's very

00:33:52,539 --> 00:33:58,240
low touch but you don't have a lot of

00:33:54,460 --> 00:33:59,409
safeguards but it can work if you are

00:33:58,240 --> 00:34:01,419
working against a tarball

00:33:59,409 --> 00:34:03,789
you will have essentially no version

00:34:01,419 --> 00:34:06,159
control so generating your patches will

00:34:03,789 --> 00:34:08,169
also be a real pain if you are working

00:34:06,159 --> 00:34:11,440
against a git tree then you at least

00:34:08,169 --> 00:34:15,909
have get to do dips against but there's

00:34:11,440 --> 00:34:18,490
a better way I think I've already

00:34:15,909 --> 00:34:20,560
covered that point you can lose work you

00:34:18,490 --> 00:34:21,790
can also work you know with your with

00:34:20,560 --> 00:34:23,830
your source on another tree

00:34:21,790 --> 00:34:27,429
I don't know of anybody Dayton does this

00:34:23,830 --> 00:34:28,899
with a tarball type of idea but most the

00:34:27,429 --> 00:34:31,720
time that's going to be with git I

00:34:28,899 --> 00:34:33,220
suppose you could but that basically

00:34:31,720 --> 00:34:35,470
removes the possibility that work

00:34:33,220 --> 00:34:37,470
directory that source directory gets

00:34:35,470 --> 00:34:39,879
removed and out from underneath you

00:34:37,470 --> 00:34:46,540
again if you using a version control

00:34:39,879 --> 00:34:47,919
system please leave you know you're not

00:34:46,540 --> 00:34:49,899
going to lose it from accidentally

00:34:47,919 --> 00:34:50,980
because of bitbake but this can also be

00:34:49,899 --> 00:34:53,020
a little bit cumbersome because now

00:34:50,980 --> 00:34:56,349
you're kind of working outside of the

00:34:53,020 --> 00:34:58,420
Yocto project build system and which you

00:34:56,349 --> 00:34:59,950
know all of the delayering and

00:34:58,420 --> 00:35:01,900
capability that you have there is sort

00:34:59,950 --> 00:35:03,370
of this separate piece and

00:35:01,900 --> 00:35:04,810
yeah I know a lot of developers who do

00:35:03,370 --> 00:35:07,180
this though when they're really kind of

00:35:04,810 --> 00:35:10,210
spinning tight on trying to build a

00:35:07,180 --> 00:35:11,880
particular you know kernel or they're

00:35:10,210 --> 00:35:14,740
working to get a kernel working

00:35:11,880 --> 00:35:17,640
functional on a piece of hardware so

00:35:14,740 --> 00:35:20,500
this is this is fine

00:35:17,640 --> 00:35:22,240
remember when we go back to those basic

00:35:20,500 --> 00:35:24,400
steps it was added into your to the

00:35:22,240 --> 00:35:26,530
build system then you're gonna lather

00:35:24,400 --> 00:35:28,240
rinse repeat in terms of the configure

00:35:26,530 --> 00:35:30,670
and make modifications a source and

00:35:28,240 --> 00:35:32,470
integrate it back in well if you're

00:35:30,670 --> 00:35:33,640
testing all of this stuff outside of

00:35:32,470 --> 00:35:35,770
that process

00:35:33,640 --> 00:35:37,480
throwing it directly on a hardware this

00:35:35,770 --> 00:35:42,100
may be this may be your best option to

00:35:37,480 --> 00:35:45,340
start with and as I said about the VCS

00:35:42,100 --> 00:35:47,320
system you can generate patches using

00:35:45,340 --> 00:35:54,550
something like get format if you really

00:35:47,320 --> 00:35:59,980
want to that is a typo and should be a

00:35:54,550 --> 00:36:04,410
pain so syncing patches can be a pain in

00:35:59,980 --> 00:36:06,940
terms of keeping things up to date cool

00:36:04,410 --> 00:36:08,530
that was there just for humor then

00:36:06,940 --> 00:36:11,260
there's what I call a dev tool workflow

00:36:08,530 --> 00:36:16,200
and there's probably some better term

00:36:11,260 --> 00:36:18,910
Scott do we have a fish for this process

00:36:16,200 --> 00:36:23,380
yeah for Colonel of I didn't think

00:36:18,910 --> 00:36:26,050
something have to preferred so dev tool

00:36:23,380 --> 00:36:30,130
I'm curious how many people know about

00:36:26,050 --> 00:36:32,470
what dev tool is that's good that's some

00:36:30,130 --> 00:36:33,760
to go I'm gonna talk a little bit about

00:36:32,470 --> 00:36:37,600
it for those who don't

00:36:33,760 --> 00:36:40,050
it is a command-line tool that how am i

00:36:37,600 --> 00:36:40,050
doing timewise

00:36:42,880 --> 00:36:45,640
it's a command-line tool that's gonna

00:36:44,080 --> 00:36:47,620
make it easier for you to do some of

00:36:45,640 --> 00:36:50,680
this quick turnaround for recipes it's

00:36:47,620 --> 00:36:52,480
not specific to the kernel it's really

00:36:50,680 --> 00:36:53,680
there to do similar to what the

00:36:52,480 --> 00:36:58,450
gentleman in the back was discussing

00:36:53,680 --> 00:37:00,700
about creating a get tree not a get tree

00:36:58,450 --> 00:37:02,560
repo that it's gonna check out your

00:37:00,700 --> 00:37:04,690
source into and then you can easily

00:37:02,560 --> 00:37:07,120
identify what has changed from the

00:37:04,690 --> 00:37:10,420
baseline that it started with so this

00:37:07,120 --> 00:37:14,220
tries to bring that faster development

00:37:10,420 --> 00:37:17,670
cycle right into the process for

00:37:14,220 --> 00:37:19,980
the build it creates a temporary

00:37:17,670 --> 00:37:22,490
workspace layer and it adds it

00:37:19,980 --> 00:37:24,810
automatically into your VB layers Kampf

00:37:22,490 --> 00:37:26,849
this is some of the mechanics of how it

00:37:24,810 --> 00:37:29,910
accomplishes what it is that it we're

00:37:26,849 --> 00:37:31,770
trying to do you can work against the

00:37:29,910 --> 00:37:34,980
live source you can generate the patches

00:37:31,770 --> 00:37:36,690
using the the gif format patch or there

00:37:34,980 --> 00:37:38,640
it will actually collect patches dev

00:37:36,690 --> 00:37:40,290
tools smart enough to when you're ready

00:37:38,640 --> 00:37:43,050
it will actually collect those patches

00:37:40,290 --> 00:37:45,540
and push them up to another layer but it

00:37:43,050 --> 00:37:48,540
basically makes that process a lot a lot

00:37:45,540 --> 00:37:51,990
easier I'm not going to go into a lot

00:37:48,540 --> 00:37:58,290
more depth on this I will highlight one

00:37:51,990 --> 00:37:59,820
command which i think is up next so as I

00:37:58,290 --> 00:38:02,160
said it works well with a kernel and

00:37:59,820 --> 00:38:04,050
once you have that initial recipe in

00:38:02,160 --> 00:38:05,640
place for your new kernel or if you had

00:38:04,050 --> 00:38:08,970
one that you and you were inheriting

00:38:05,640 --> 00:38:11,550
from it's a great way to just simply set

00:38:08,970 --> 00:38:13,410
up a workspace in that tree that you can

00:38:11,550 --> 00:38:17,099
begin to make modifications on directly

00:38:13,410 --> 00:38:19,560
and do so and of knowing that you can

00:38:17,099 --> 00:38:21,180
immediately kick off the build whenever

00:38:19,560 --> 00:38:23,160
you have a change set that you're ready

00:38:21,180 --> 00:38:25,770
to look at and see if it at least

00:38:23,160 --> 00:38:29,220
compiles it also dev tool will help you

00:38:25,770 --> 00:38:30,420
push some packages I don't think it

00:38:29,220 --> 00:38:32,849
really works well for the kernel for

00:38:30,420 --> 00:38:35,010
this down to the target I haven't done

00:38:32,849 --> 00:38:36,990
that I usually load it differently and

00:38:35,010 --> 00:38:38,490
if S or something but this is the

00:38:36,990 --> 00:38:42,270
command that will kind of kick this off

00:38:38,490 --> 00:38:45,320
so dev will modify virtual kernel or

00:38:42,270 --> 00:38:47,390
your the name of your specific kernel

00:38:45,320 --> 00:38:50,220
once again inside the bit baked

00:38:47,390 --> 00:38:52,589
environment is going to one create that

00:38:50,220 --> 00:38:54,990
workspace if it doesn't already exist it

00:38:52,589 --> 00:38:59,220
will insert that that workspace layer

00:38:54,990 --> 00:39:01,650
into the BB layers kampf it will check

00:38:59,220 --> 00:39:03,270
out the source one other interesting

00:39:01,650 --> 00:39:04,770
thing that I hadn't noticed until I

00:39:03,270 --> 00:39:06,869
really started looking closely at it is

00:39:04,770 --> 00:39:11,369
that will also run that kernel config me

00:39:06,869 --> 00:39:16,710
command and in the live the live demo we

00:39:11,369 --> 00:39:21,270
can actually see that occur so capturing

00:39:16,710 --> 00:39:22,980
those kernel patches then I've hit on

00:39:21,270 --> 00:39:25,859
this a couple point a couple times it's

00:39:22,980 --> 00:39:27,130
because the source that you use a lot of

00:39:25,859 --> 00:39:28,830
times is going to influence

00:39:27,130 --> 00:39:34,090
way that it's easiest for you to capture

00:39:28,830 --> 00:39:36,610
changes back to it so and I'm repeating

00:39:34,090 --> 00:39:38,230
my own slides here so one of the general

00:39:36,610 --> 00:39:40,240
patterns that I have found is that if

00:39:38,230 --> 00:39:41,620
your colonel pulls a source tarball then

00:39:40,240 --> 00:39:43,900
it's going to be generally easiest for

00:39:41,620 --> 00:39:47,530
you to collect patches against that tar

00:39:43,900 --> 00:39:49,630
ball that isn't always the case there's

00:39:47,530 --> 00:39:51,640
sort of a another approach in which you

00:39:49,630 --> 00:39:53,860
can take that tar ball put it into get

00:39:51,640 --> 00:39:56,320
and then rewrite the recipe and your bb

00:39:53,860 --> 00:39:58,300
a pen to go and pull from get but that's

00:39:56,320 --> 00:40:00,280
a little bit more advanced it's not

00:39:58,300 --> 00:40:03,490
really that much harder but it's just an

00:40:00,280 --> 00:40:05,110
alternative really I'm happiest when it

00:40:03,490 --> 00:40:07,030
pulls against a version control system

00:40:05,110 --> 00:40:11,200
because then you're able to create the

00:40:07,030 --> 00:40:13,870
patches directly and then you don't have

00:40:11,200 --> 00:40:15,850
to worry about updating the recipe to

00:40:13,870 --> 00:40:17,830
include the source patches every time I

00:40:15,850 --> 00:40:19,990
have had in more than one occasion in

00:40:17,830 --> 00:40:22,210
which I was adding several patches and I

00:40:19,990 --> 00:40:25,060
missed one and things really get

00:40:22,210 --> 00:40:26,890
squirrely and you have to go back and

00:40:25,060 --> 00:40:29,560
then manually on at the list and the

00:40:26,890 --> 00:40:32,190
recipe so as I said when you get past a

00:40:29,560 --> 00:40:35,020
handful I really strongly consider using

00:40:32,190 --> 00:40:37,900
get version control to to make this a

00:40:35,020 --> 00:40:39,400
lot easier this is not this is not

00:40:37,900 --> 00:40:41,580
really that hard right I mean this is

00:40:39,400 --> 00:40:43,600
not really all that groundbreaking

00:40:41,580 --> 00:40:45,430
that's why I kept trying to boil it down

00:40:43,600 --> 00:40:47,350
to those basic steps you want to get

00:40:45,430 --> 00:40:48,910
this so that it builds in the Yocto

00:40:47,350 --> 00:40:51,910
project but then you want to kind of let

00:40:48,910 --> 00:40:57,430
it get out of your way so that that is

00:40:51,910 --> 00:40:59,530
really the the goal for me is to make

00:40:57,430 --> 00:41:02,560
this stuff kind of get out of my way so

00:40:59,530 --> 00:41:07,900
let's see if I have time here I'm going

00:41:02,560 --> 00:41:15,210
to pull up an example hopefully you guys

00:41:07,900 --> 00:41:20,530
are seeing that so all right let's see

00:41:15,210 --> 00:41:22,000
make sure I cleaned up first okay so

00:41:20,530 --> 00:41:25,140
this is telling me that I didn't have my

00:41:22,000 --> 00:41:25,140
workspace left behind

00:41:27,860 --> 00:41:33,020
yeah sure sorry like my eyes are that

00:41:32,300 --> 00:41:41,120
much better

00:41:33,020 --> 00:41:42,070
all right there how's that is that

00:41:41,120 --> 00:41:47,600
better

00:41:42,070 --> 00:41:49,550
all right so I wrapped this up just so

00:41:47,600 --> 00:41:53,900
that I wouldn't typo things but all this

00:41:49,550 --> 00:41:55,520
is doing is the the dev tool modify this

00:41:53,900 --> 00:41:59,480
is you can see it going through the

00:41:55,520 --> 00:42:03,560
steps where this is running in a virtual

00:41:59,480 --> 00:42:06,740
box VM on this laptop it's in a boom

00:42:03,560 --> 00:42:09,470
tube box and there's a couple rappers in

00:42:06,740 --> 00:42:10,970
place for the shells but it's going to

00:42:09,470 --> 00:42:13,250
go out there it's going to do the kernel

00:42:10,970 --> 00:42:17,810
check out as I said it created the the

00:42:13,250 --> 00:42:21,500
workspace layer and injected it into the

00:42:17,810 --> 00:42:23,150
VV layers at least the initial time that

00:42:21,500 --> 00:42:25,250
I ran this I don't remember if I cleared

00:42:23,150 --> 00:42:26,300
it before it came and then it's going to

00:42:25,250 --> 00:42:28,690
take a little bit of time to do the

00:42:26,300 --> 00:42:32,600
kernel checkout and it's renowned is a

00:42:28,690 --> 00:42:36,500
linux Yocto kernel so it runs on

00:42:32,600 --> 00:42:39,500
queueing you x86 I was just for

00:42:36,500 --> 00:42:41,660
simplicity the same step works for for

00:42:39,500 --> 00:42:45,140
any other kind of kernel that you want

00:42:41,660 --> 00:42:49,210
to look at and it's gonna take a sec to

00:42:45,140 --> 00:42:49,210
complete any questions

00:42:54,650 --> 00:42:59,100
do you guys remember when devtool

00:42:57,570 --> 00:43:01,080
initially hit I mean it's been a while

00:42:59,100 --> 00:43:05,040
it's been a long while relatively

00:43:01,080 --> 00:43:07,950
speaking for anybody coming to it new

00:43:05,040 --> 00:43:09,210
it's it's there and I I wouldn't worry

00:43:07,950 --> 00:43:12,330
about it there are going to be subtle

00:43:09,210 --> 00:43:14,640
changes clearly you know there's some

00:43:12,330 --> 00:43:19,020
things get renamed some options changed

00:43:14,640 --> 00:43:22,350
and the like but yeah I mean devtool is

00:43:19,020 --> 00:43:25,710
there so and there is a session on dev

00:43:22,350 --> 00:43:29,390
tool at the Yocto project dev day as

00:43:25,710 --> 00:43:32,910
well all right

00:43:29,390 --> 00:43:35,810
since 2014 so yeah I mean that's like

00:43:32,910 --> 00:43:41,700
ancient by open source project standards

00:43:35,810 --> 00:43:44,400
so and it continues to improve you know

00:43:41,700 --> 00:43:45,690
I mentioned before as where this is

00:43:44,400 --> 00:43:47,940
where I kind of do my song and dance

00:43:45,690 --> 00:43:51,320
while we're waiting for it to run that

00:43:47,940 --> 00:43:54,990
there was a specific set up that the the

00:43:51,320 --> 00:43:57,570
linux Yocto tooling relied on in order

00:43:54,990 --> 00:44:01,260
to do some of the magic and what you can

00:43:57,570 --> 00:44:03,930
see here is not the config niewind to

00:44:01,260 --> 00:44:06,720
see this kernel metadata tasks there

00:44:03,930 --> 00:44:08,430
that's related to the Yocto tooling so

00:44:06,720 --> 00:44:11,400
that takes a little bit of time while it

00:44:08,430 --> 00:44:12,840
goes and actually I skimmed it very fast

00:44:11,400 --> 00:44:14,910
but it's can taking all of these

00:44:12,840 --> 00:44:16,740
different config fragments there's logic

00:44:14,910 --> 00:44:18,720
applied to them in terms of machines

00:44:16,740 --> 00:44:21,810
that they apply to and they don't and it

00:44:18,720 --> 00:44:25,590
consolidates all that and then generates

00:44:21,810 --> 00:44:27,869
a full-blown config for the kernel okay

00:44:25,590 --> 00:44:33,570
so now we're done at this point I now

00:44:27,869 --> 00:44:36,119
have a workspace this is not the most

00:44:33,570 --> 00:44:42,950
stable platform so if I look in the

00:44:36,119 --> 00:44:42,950
workspace sources I've got a Linux yocto

00:44:45,590 --> 00:44:51,920
and you'll notice that there is a config

00:44:49,520 --> 00:44:54,410
in there it's all ready to go if I were

00:44:51,920 --> 00:44:57,950
to issue a build right now it will go

00:44:54,410 --> 00:45:00,560
through the the complete build steps and

00:44:57,950 --> 00:45:08,270
generate it here and in the interest of

00:45:00,560 --> 00:45:11,470
time let's take a look at the config

00:45:08,270 --> 00:45:15,200
well actually let's let's do this first

00:45:11,470 --> 00:45:20,950
we're gonna run queueing you know we're

00:45:15,200 --> 00:45:20,950
not oh it helps if you build it first

00:45:21,940 --> 00:45:30,350
just so my own petard let it run for a

00:45:26,870 --> 00:45:33,230
second since I've done this build before

00:45:30,350 --> 00:45:37,610
it shouldn't take too too long after it

00:45:33,230 --> 00:45:38,690
gets past the config stage so what the

00:45:37,610 --> 00:45:40,160
example I'm going to do here is I'm

00:45:38,690 --> 00:45:44,650
going to basically run through and do

00:45:40,160 --> 00:45:46,880
the the menu config I'm gonna alter it

00:45:44,650 --> 00:45:49,070
and then I'm gonna verify that that

00:45:46,880 --> 00:45:52,460
change actually ended up in the in the

00:45:49,070 --> 00:45:53,690
live target which is under run qmu so

00:45:52,460 --> 00:46:00,430
this is running are there any other

00:45:53,690 --> 00:46:00,430
questions yes

00:46:01,339 --> 00:46:11,180
yes I'm sorry

00:46:20,099 --> 00:46:25,660
so there are limitations in terms of

00:46:22,950 --> 00:46:28,410
using dev tool but they continue to be

00:46:25,660 --> 00:46:31,540
removed with each iteration so I

00:46:28,410 --> 00:46:33,309
generally use this with the the def

00:46:31,540 --> 00:46:37,150
config file because that's the simplest

00:46:33,309 --> 00:46:40,150
but yes you're right behind this the

00:46:37,150 --> 00:46:42,190
question was dev tool is using external

00:46:40,150 --> 00:46:45,250
source behind the scenes then it that is

00:46:42,190 --> 00:46:47,349
a true statement that is a way to use an

00:46:45,250 --> 00:46:49,480
external source tree and there are

00:46:47,349 --> 00:46:52,960
occasionally issues with that I've seen

00:46:49,480 --> 00:46:54,640
with trying to use CFG files but if you

00:46:52,960 --> 00:47:00,819
force it to go through into the config

00:46:54,640 --> 00:47:03,130
me stage again I that works for me so

00:47:00,819 --> 00:47:06,130
but normally I'm using in the model

00:47:03,130 --> 00:47:08,470
where I've got the I don't use the the

00:47:06,130 --> 00:47:13,119
Linux Yocto kernels as much as I'd like

00:47:08,470 --> 00:47:14,619
I end up using an external kernel that I

00:47:13,119 --> 00:47:18,540
have to bring in so then I just have a

00:47:14,619 --> 00:47:22,030
def config and I manually copy it over

00:47:18,540 --> 00:47:25,420
ok so this is going to take a minute

00:47:22,030 --> 00:47:27,760
while it compiles didn't think that part

00:47:25,420 --> 00:47:30,180
through any other questions while we're

00:47:27,760 --> 00:47:30,180
waiting on it

00:47:42,240 --> 00:47:48,910
right right so the question was if you

00:47:46,720 --> 00:47:52,300
are using config fragments can you go

00:47:48,910 --> 00:47:55,619
and look at what it generates and copy

00:47:52,300 --> 00:47:55,619
that out and use and the answer is yes

00:47:55,920 --> 00:48:23,079
anyone else so what I have done

00:48:19,030 --> 00:48:26,050
personally is I used to get and add a

00:48:23,079 --> 00:48:29,560
remote and then I push from within the

00:48:26,050 --> 00:48:32,650
workspace so then I can it's checked out

00:48:29,560 --> 00:48:34,930
from from the nups trinket but since

00:48:32,650 --> 00:48:36,460
it's it's replacing it internally in the

00:48:34,930 --> 00:48:39,550
workspace this gets into the details of

00:48:36,460 --> 00:48:41,530
a dev tool works it's it's not really

00:48:39,550 --> 00:48:45,750
connecting the dots there so you can go

00:48:41,530 --> 00:48:45,750
into the workspace add add the remote

00:48:48,150 --> 00:48:54,670
laptops getting sleepy and you can go

00:48:52,540 --> 00:48:56,170
into the workspace and add a remote and

00:48:54,670 --> 00:48:57,520
then push directly so that way you're

00:48:56,170 --> 00:49:01,260
getting the benefit of using a version

00:48:57,520 --> 00:49:01,260
control system to capture patches

00:49:07,970 --> 00:49:14,750
right which is the case in most cases

00:49:12,050 --> 00:49:17,360
right if you've got in larger than one

00:49:14,750 --> 00:49:20,240
group you're probably not working

00:49:17,360 --> 00:49:21,980
directly against kernel.org so if you've

00:49:20,240 --> 00:49:23,570
got a version control system you're yeah

00:49:21,980 --> 00:49:25,340
sorry I'm just

00:49:23,570 --> 00:49:27,770
the you're absolutely right the the

00:49:25,340 --> 00:49:29,600
consequences then yeah the recipe is

00:49:27,770 --> 00:49:32,210
generally not going to pull against

00:49:29,600 --> 00:49:33,890
kernel lot of work so and that's sort of

00:49:32,210 --> 00:49:36,140
an important point that I kind of

00:49:33,890 --> 00:49:38,990
glossed past in your recipe you wouldn't

00:49:36,140 --> 00:49:39,860
point it upstream to kernel.org because

00:49:38,990 --> 00:49:46,220
you're not gonna be able to bear

00:49:39,860 --> 00:49:48,590
interpret you know the the meta ti layer

00:49:46,220 --> 00:49:50,420
is pointing to the the linux TI kernel

00:49:48,590 --> 00:49:52,460
you're not going to push against that so

00:49:50,420 --> 00:49:53,570
yeah the implicit step there is that

00:49:52,460 --> 00:49:56,090
you're going to create some version

00:49:53,570 --> 00:49:57,920
control system inside some place that

00:49:56,090 --> 00:50:02,690
you can access and you use that to

00:49:57,920 --> 00:50:07,660
capture your changes so yeah it's a it's

00:50:02,690 --> 00:50:07,660
a good question yes sir

00:50:21,050 --> 00:50:30,420
you want to stand up and smile so I

00:50:27,750 --> 00:50:32,610
mentioned that I previously worked for

00:50:30,420 --> 00:50:35,340
Mentor Graphics OOS these are gonna use

00:50:32,610 --> 00:50:38,340
this more than then the average or

00:50:35,340 --> 00:50:42,720
larger organizations are going to you

00:50:38,340 --> 00:50:45,840
know it depends on the specific semi

00:50:42,720 --> 00:50:50,430
whether or not they provide it or not so

00:50:45,840 --> 00:50:52,050
I it I make a common effect well we're

00:50:50,430 --> 00:50:57,020
waiting for this to compile why don't I

00:50:52,050 --> 00:51:04,320
go back to the slide here see if I can

00:50:57,020 --> 00:51:06,540
jump to the right spot um you know your

00:51:04,320 --> 00:51:09,270
your your question kind of hits very

00:51:06,540 --> 00:51:10,410
much with the first point there most

00:51:09,270 --> 00:51:12,180
developers are going to start with a

00:51:10,410 --> 00:51:15,110
kernel that's coming from a sunlight or

00:51:12,180 --> 00:51:17,910
a board manufacturer right in that case

00:51:15,110 --> 00:51:20,070
my advice is take the path of least

00:51:17,910 --> 00:51:21,960
resistance right if they have a kernel

00:51:20,070 --> 00:51:24,630
that supports the Yocto kernel tooling

00:51:21,960 --> 00:51:28,530
then great embrace it and use code

00:51:24,630 --> 00:51:30,530
fragments and use the the normal path

00:51:28,530 --> 00:51:34,200
that you would take to get and generate

00:51:30,530 --> 00:51:36,690
kernel patches but for other ones use

00:51:34,200 --> 00:51:40,520
that basic template I have too many type

00:51:36,690 --> 00:51:42,690
isn't this so to facilitate you know

00:51:40,520 --> 00:51:44,520
bringing it into the build system but

00:51:42,690 --> 00:51:47,220
then you're kind of working as much as

00:51:44,520 --> 00:51:49,020
possible in this tight loop outside

00:51:47,220 --> 00:51:52,560
which is how devtool tends to kind of

00:51:49,020 --> 00:51:55,590
bridge things to my point to the point

00:51:52,560 --> 00:51:57,570
about the use of the Yocto tools if like

00:51:55,590 --> 00:51:59,370
the Garmin guys in the back you have a

00:51:57,570 --> 00:52:02,280
lot a lot of platforms that you have to

00:51:59,370 --> 00:52:03,780
maintain a single base on this is where

00:52:02,280 --> 00:52:05,850
you're gonna really derive a lot of

00:52:03,780 --> 00:52:09,480
benefit from the from the Yocto kernel

00:52:05,850 --> 00:52:10,890
tooling so invest the time upfront you

00:52:09,480 --> 00:52:12,270
got to go look at what the structure is

00:52:10,890 --> 00:52:15,600
that you need to have and get and

00:52:12,270 --> 00:52:19,650
there's a great there's a great kernel

00:52:15,600 --> 00:52:22,590
development guide that Scott has worked

00:52:19,650 --> 00:52:25,740
you know on that helps you to make sure

00:52:22,590 --> 00:52:26,460
and bring and did bring that in so spend

00:52:25,740 --> 00:52:29,280
the time to do that

00:52:26,460 --> 00:52:31,830
I find working against you know get

00:52:29,280 --> 00:52:32,850
repository and using dev tool I tend to

00:52:31,830 --> 00:52:35,010
minimize my pain

00:52:32,850 --> 00:52:37,020
that's my pain so you know you're gonna

00:52:35,010 --> 00:52:39,590
have to do what it's gonna work best in

00:52:37,020 --> 00:52:41,850
your particular environment

00:52:39,590 --> 00:52:43,260
and here's my point at the bottom which

00:52:41,850 --> 00:52:44,940
is you know the tooling continues to

00:52:43,260 --> 00:52:47,610
improve and it release so make sure that

00:52:44,940 --> 00:52:49,080
you keep up with it or you might end up

00:52:47,610 --> 00:52:49,620
with egg on your face you know in the

00:52:49,080 --> 00:52:51,840
final one

00:52:49,620 --> 00:52:54,390
we're already into questions and I think

00:52:51,840 --> 00:52:54,780
I'm running low on time how much time do

00:52:54,390 --> 00:52:59,630
I have

00:52:54,780 --> 00:53:06,149
am I out whoops okay thank you

00:52:59,630 --> 00:53:06,149

YouTube URL: https://www.youtube.com/watch?v=tZACGS5nQxw


