Title: Linux on Quick Turnaround Projects at Ball: No, We Arenâ€™t Putting Linux in Canning Jars
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Linux on Quick Turnaround Projects at Ball: No, We Arenâ€™t Putting Linux in Canning Jars - Sam Povilus, Ball Aerospace

 Modern phased array antennas need a multitude of computers to control various aspect of their operation from steering to cooling. The Linux ecosystemâ€™s broad base allows operational code to be maintainable and understandable as compared to the alternative, custom code written on bare metal or a proprietary RTOS. Sam Povilus will give an overview of how Ball Aerospace used Linux running on Xilinx Zynq FPGAâ€™s to control and monitor an antenna. He will focus on the aspects of making Linux work with an FPGA, as well as how various hardware and software decisions were reached and how those decisions affected aspects of integration with hardware, and maintenance. 

About Sam Povilus
Sam Povilus has worked at Ball Aerospace for the past five years on everything from bare metal software to multi-computer distributed processing environments. He has used Linux for 15 years with the last three dedicated to embedded contexts. He is currently working on a simulator on the Ozone Mapping and Profiling Suite for the JPSS-2 spacecraft and spends his free time trying to get others to use Linux wherever they can.
Captions: 
	00:00:00,000 --> 00:00:02,970
I'm gonna get started I don't know

00:00:01,290 --> 00:00:03,780
people seem to still be silly filtering

00:00:02,970 --> 00:00:05,609
into the room

00:00:03,780 --> 00:00:07,259
I'm fantabulous I work at Ball Aerospace

00:00:05,609 --> 00:00:09,510
I don't know a lot of you probably

00:00:07,259 --> 00:00:11,519
recognize our logo up there from the

00:00:09,510 --> 00:00:16,560
glass jars that's not us and I'll get

00:00:11,519 --> 00:00:18,300
into that a little bit later so I had a

00:00:16,560 --> 00:00:19,470
professor tell me once the best way to

00:00:18,300 --> 00:00:21,090
50 people is to tell them what you're

00:00:19,470 --> 00:00:23,039
going to tell him and then tell him so

00:00:21,090 --> 00:00:23,910
I'm gonna start with that I'm gonna

00:00:23,039 --> 00:00:25,260
start with a little bit of an overview

00:00:23,910 --> 00:00:27,480
of why I'm here what I wanted to get

00:00:25,260 --> 00:00:29,670
across on this presentation what I was

00:00:27,480 --> 00:00:33,059
going for when I signed up to speak

00:00:29,670 --> 00:00:35,570
besides you know the free entrance an

00:00:33,059 --> 00:00:38,610
overview of the company I worked for

00:00:35,570 --> 00:00:40,770
Ball Aerospace is a subsidiary of ball

00:00:38,610 --> 00:00:42,300
corporation that we build we make cans

00:00:40,770 --> 00:00:44,219
for most of our business and they're

00:00:42,300 --> 00:00:46,050
pretty interesting but probably not from

00:00:44,219 --> 00:00:49,079
a Linux perspective aluminum cans and

00:00:46,050 --> 00:00:50,579
Linux not really the same thing I'm

00:00:49,079 --> 00:00:55,110
gonna give you an overview of my Linux

00:00:50,579 --> 00:00:57,149
use and my career because I want to sort

00:00:55,110 --> 00:00:59,609
of make a point about how I use Linux

00:00:57,149 --> 00:01:01,530
and how people like me use Linux I'm

00:00:59,609 --> 00:01:03,359
gonna give you overview of the face rate

00:01:01,530 --> 00:01:05,540
of face your antennas in general and

00:01:03,359 --> 00:01:09,170
then the face to right we were building

00:01:05,540 --> 00:01:12,030
give you an overview of our hardware

00:01:09,170 --> 00:01:14,010
tell you why I wanted to use Linux then

00:01:12,030 --> 00:01:16,170
give you some linux lessons and some

00:01:14,010 --> 00:01:17,220
general embedded development lessons I

00:01:16,170 --> 00:01:19,110
know that a lot of you probably already

00:01:17,220 --> 00:01:21,390
know these things but I think it's

00:01:19,110 --> 00:01:22,740
important that we talk about them and

00:01:21,390 --> 00:01:25,790
I'm gonna go over some of the advantages

00:01:22,740 --> 00:01:29,060
I found when I was actually using Linux

00:01:25,790 --> 00:01:31,740
so why am I here I'm I really wanted to

00:01:29,060 --> 00:01:33,360
I was really struggling to pick an

00:01:31,740 --> 00:01:35,189
audience for this presentation so I hope

00:01:33,360 --> 00:01:37,680
I hit the people out there and I get

00:01:35,189 --> 00:01:38,400
across what I wanted to get across but I

00:01:37,680 --> 00:01:40,829
hope you get something out of my

00:01:38,400 --> 00:01:42,180
presentation I think I'm largely gonna

00:01:40,829 --> 00:01:44,130
be targeting other embedded developers

00:01:42,180 --> 00:01:46,829
that use Linux but I do have some things

00:01:44,130 --> 00:01:49,409
in here for developers the people

00:01:46,829 --> 00:01:51,119
actually producing Linux are there's a

00:01:49,409 --> 00:01:53,280
lot that you guys do that I really

00:01:51,119 --> 00:01:55,530
appreciate and I hope that I can help

00:01:53,280 --> 00:01:59,180
you understand what I need out of your

00:01:55,530 --> 00:02:02,490
product from the embedded developer side

00:01:59,180 --> 00:02:04,670
I want to talk about it ball Linux is

00:02:02,490 --> 00:02:08,099
considered a huge risk

00:02:04,670 --> 00:02:10,229
we are historically of our real-time

00:02:08,099 --> 00:02:12,420
operating system company we run you

00:02:10,229 --> 00:02:16,110
either bare-metal or something like

00:02:12,420 --> 00:02:19,769
VxWorks very expensive operating systems

00:02:16,110 --> 00:02:23,250
and to to propose linux on a project a

00:02:19,769 --> 00:02:24,720
ball for me was very risky I am gonna

00:02:23,250 --> 00:02:27,420
tell you that in my case the risk pays

00:02:24,720 --> 00:02:28,890
off and I think it in general will but

00:02:27,420 --> 00:02:32,060
it depends a lot on your project and

00:02:28,890 --> 00:02:34,410
your skill and how much time you have

00:02:32,060 --> 00:02:36,180
I'm gonna tell you that you'll do a lot

00:02:34,410 --> 00:02:38,099
more reading of code and reading of

00:02:36,180 --> 00:02:39,299
documentation a lot less writing of code

00:02:38,099 --> 00:02:41,310
which i think is a really good thing

00:02:39,299 --> 00:02:43,920
there's a lot of smart people out there

00:02:41,310 --> 00:02:45,390
writing code and if you're using their

00:02:43,920 --> 00:02:46,890
code and not trying to write your set

00:02:45,390 --> 00:02:49,290
write it yourself that's a huge

00:02:46,890 --> 00:02:50,640
advantage and I'm gonna promise you the

00:02:49,290 --> 00:02:51,629
things will come together but there's no

00:02:50,640 --> 00:02:57,569
way you can come back to me if it

00:02:51,629 --> 00:03:00,209
doesn't so you know that's that's what

00:02:57,569 --> 00:03:02,879
I'm gonna say so Paul we started out

00:03:00,209 --> 00:03:05,069
making the aluminum or the glass jars of

00:03:02,879 --> 00:03:06,329
you use for canning you've probably seen

00:03:05,069 --> 00:03:07,859
them you've probably seen the run quite

00:03:06,329 --> 00:03:09,329
a lot they're quite common we don't

00:03:07,859 --> 00:03:11,400
actually make those anymore we make the

00:03:09,329 --> 00:03:14,970
aluminum cans to get your beer your soda

00:03:11,400 --> 00:03:16,530
out of and then for some reason they

00:03:14,970 --> 00:03:18,000
bought a technology division and it's

00:03:16,530 --> 00:03:20,329
spun up it didn't really help with the

00:03:18,000 --> 00:03:23,310
glass jars but it helped with satellites

00:03:20,329 --> 00:03:25,019
so but we're building satellites now

00:03:23,310 --> 00:03:26,730
it's a it's a small segment of balls

00:03:25,019 --> 00:03:29,099
business but it's what we do and we're

00:03:26,730 --> 00:03:30,780
pretty good at it so to that end I'm

00:03:29,099 --> 00:03:33,120
gonna speak about a couple of our

00:03:30,780 --> 00:03:34,590
projects this is a slide off the

00:03:33,120 --> 00:03:37,440
corporate deck and I'm not allowed to

00:03:34,590 --> 00:03:40,530
modify it just so you know time starts

00:03:37,440 --> 00:03:45,269
in the lower right corner goes up and

00:03:40,530 --> 00:03:47,160
then goes left don't ask I didn't I

00:03:45,269 --> 00:03:50,849
I'm not allowed to modify it so I'm

00:03:47,160 --> 00:03:52,950
going with it we started out with the

00:03:50,849 --> 00:03:54,840
orbiting solar observatory that's a

00:03:52,950 --> 00:03:57,060
program we build it's a series of

00:03:54,840 --> 00:04:01,200
satellites we built that are designed to

00:03:57,060 --> 00:04:02,519
look at the Sun that was in 1962 we

00:04:01,200 --> 00:04:05,910
moved on to the infrared astronomical

00:04:02,519 --> 00:04:07,829
satellite it was the first ever space

00:04:05,910 --> 00:04:11,010
telescope to perform a survey of the

00:04:07,829 --> 00:04:14,430
entire night sky in infrared then we

00:04:11,010 --> 00:04:16,959
moved on to the

00:04:14,430 --> 00:04:20,160
solar backscatter ultraviolet radiometer

00:04:16,959 --> 00:04:23,110
- that's an instrument on a satellite

00:04:20,160 --> 00:04:24,520
that helped discover the ozone hole so

00:04:23,110 --> 00:04:25,810
you can see that picture is actually the

00:04:24,520 --> 00:04:28,150
ozone hole I have it up here on my

00:04:25,810 --> 00:04:30,280
laptop - I'm working on a project right

00:04:28,150 --> 00:04:34,510
now that's sort of a follow-on to that

00:04:30,280 --> 00:04:35,979
instrument we built Kobe which is the

00:04:34,510 --> 00:04:38,710
cosmic background Explorer if you've

00:04:35,979 --> 00:04:40,960
ever seen that image of it's a blue and

00:04:38,710 --> 00:04:43,300
pink image of the cosmic background it's

00:04:40,960 --> 00:04:45,880
it helped that instrument helped prove

00:04:43,300 --> 00:04:49,450
the Big Bang Theory so that's a pretty

00:04:45,880 --> 00:04:51,310
big thing we've worked on the tactical

00:04:49,450 --> 00:04:53,370
high-energy laser this was a laser

00:04:51,310 --> 00:04:57,850
system designed just shoot down warheads

00:04:53,370 --> 00:05:00,520
and missiles in flight I don't think it

00:04:57,850 --> 00:05:02,650
actually ended up being built but it was

00:05:00,520 --> 00:05:06,220
a developmental system we built

00:05:02,650 --> 00:05:07,960
high-rise that was the first orbiting

00:05:06,220 --> 00:05:09,700
platform to return high-resolution

00:05:07,960 --> 00:05:12,039
images of the surface of Mars it was

00:05:09,700 --> 00:05:15,370
actually able to pick out where Viking

00:05:12,039 --> 00:05:18,720
landed like 30 or 40 years before it

00:05:15,370 --> 00:05:20,919
existed so that was a pretty cool thing

00:05:18,720 --> 00:05:22,510
orbital Express is one of my favorite

00:05:20,919 --> 00:05:25,180
satellites it's actually a pair of

00:05:22,510 --> 00:05:26,770
satellites we built one and another

00:05:25,180 --> 00:05:28,240
contractor built another and our

00:05:26,770 --> 00:05:31,360
satellite actually went up into orbit

00:05:28,240 --> 00:05:33,070
docked autonomously with another

00:05:31,360 --> 00:05:35,530
spacecraft and was able to refuel the

00:05:33,070 --> 00:05:36,940
other spacecraft on orbit so that's a

00:05:35,530 --> 00:05:40,960
pretty cool project that we were able to

00:05:36,940 --> 00:05:43,270
build deep impact is a is a pair of

00:05:40,960 --> 00:05:46,780
satellites we built the sort of mother

00:05:43,270 --> 00:05:48,729
ship satellite and then sent it sent a

00:05:46,780 --> 00:05:50,139
little impactor that had instrumentation

00:05:48,729 --> 00:05:52,330
on it into a comment and that helped

00:05:50,139 --> 00:05:55,630
discover what the comet was made of and

00:05:52,330 --> 00:05:57,700
it actually kept going and was able to

00:05:55,630 --> 00:05:59,500
rendezvous with another asteroid and

00:05:57,700 --> 00:06:03,220
image it and brought back some really

00:05:59,500 --> 00:06:05,650
cool science Kepler if something's been

00:06:03,220 --> 00:06:07,539
the news lately and that's a really neat

00:06:05,650 --> 00:06:11,110
spacecraft I get to work on really neat

00:06:07,539 --> 00:06:12,880
spacecraft basically it points at one

00:06:11,110 --> 00:06:15,789
point in the galaxy it points at the

00:06:12,880 --> 00:06:17,349
same spot continuously and just measures

00:06:15,789 --> 00:06:20,289
how much light is coming back from each

00:06:17,349 --> 00:06:22,240
of those stars and then as planets come

00:06:20,289 --> 00:06:23,910
in front of those stars they reduce the

00:06:22,240 --> 00:06:26,910
amount of light coming out of the star

00:06:23,910 --> 00:06:28,800
and you're able to detect that how you

00:06:26,910 --> 00:06:31,740
can detect a planet the size of Earth

00:06:28,800 --> 00:06:33,720
including a star from light-years away

00:06:31,740 --> 00:06:37,380
is I don't know how that works but it's

00:06:33,720 --> 00:06:38,610
pretty awesome that it does and then the

00:06:37,380 --> 00:06:40,650
most recent thing I think we were in the

00:06:38,610 --> 00:06:42,990
news for is the Ralph's camera that was

00:06:40,650 --> 00:06:44,040
the thing producing high resolution

00:06:42,990 --> 00:06:45,450
imagery of Pluto

00:06:44,040 --> 00:06:47,010
I think they launched it before it well

00:06:45,450 --> 00:06:49,890
Pluto was a planet when I got there

00:06:47,010 --> 00:06:51,480
Pluto was no longer a planet we can

00:06:49,890 --> 00:06:56,580
discuss whether that's a planet or not

00:06:51,480 --> 00:06:58,440
later offline if I'm gonna talk about my

00:06:56,580 --> 00:07:00,150
career and this is to give the

00:06:58,440 --> 00:07:02,760
developers in the room an impression of

00:07:00,150 --> 00:07:04,860
how I use your product and why I'm not

00:07:02,760 --> 00:07:06,750
an expert in your product I'm not an

00:07:04,860 --> 00:07:10,530
expert in Linux I don't have the time I

00:07:06,750 --> 00:07:12,570
wish I did but I don't so I have in six

00:07:10,530 --> 00:07:14,700
years I worked on nine projects I'm a

00:07:12,570 --> 00:07:17,970
jack-of-all-trades I've done a lot of

00:07:14,700 --> 00:07:20,370
things I started out on a spacecraft

00:07:17,970 --> 00:07:21,600
instrument running on a spark I don't

00:07:20,370 --> 00:07:23,250
know how many of you are used to running

00:07:21,600 --> 00:07:27,960
on spark platforms but it's a pretty old

00:07:23,250 --> 00:07:29,520
platform and it was running vxworks so

00:07:27,960 --> 00:07:32,190
that very expensive real-time operating

00:07:29,520 --> 00:07:33,900
system I was referring to earlier I then

00:07:32,190 --> 00:07:36,390
worked on a spacecraft simulator and

00:07:33,900 --> 00:07:39,690
entirely in software simulator so we're

00:07:36,390 --> 00:07:43,350
simulating what the software or how the

00:07:39,690 --> 00:07:45,450
processor uses the or the how the

00:07:43,350 --> 00:07:47,040
processor emulating the interface for

00:07:45,450 --> 00:07:48,540
this off of the processor for the

00:07:47,040 --> 00:07:52,410
software sorry that's a very complicated

00:07:48,540 --> 00:07:56,940
way of saying that I did some algorithms

00:07:52,410 --> 00:07:59,990
translation that's from MATLAB to C++

00:07:56,940 --> 00:08:02,640
I did a star tracker running on Power PC

00:07:59,990 --> 00:08:04,440
running VxWorks again all of these

00:08:02,640 --> 00:08:05,910
projects have used Linux only as

00:08:04,440 --> 00:08:08,390
development platforms they're not

00:08:05,910 --> 00:08:10,680
embedded Linux in any sense of the word

00:08:08,390 --> 00:08:12,840
then we start to get into the time I was

00:08:10,680 --> 00:08:14,970
able to actually do embed to Linux or at

00:08:12,840 --> 00:08:18,210
least what I call embedded Linux I was

00:08:14,970 --> 00:08:21,180
building a camera system for the Navy

00:08:18,210 --> 00:08:23,280
it used to full up x86 computer it's a

00:08:21,180 --> 00:08:25,110
fairly powerful computer but it is

00:08:23,280 --> 00:08:27,360
technically embedded Linux in my

00:08:25,110 --> 00:08:29,040
worldview so that was a fun experience

00:08:27,360 --> 00:08:32,460
that was my first entrance into the

00:08:29,040 --> 00:08:34,740
embedded Linux world I then I built an

00:08:32,460 --> 00:08:37,020
aircraft and then it was intended to go

00:08:34,740 --> 00:08:37,950
to the International Space Station was a

00:08:37,020 --> 00:08:39,960
lidar that was measuring

00:08:37,950 --> 00:08:41,430
wind speeds I don't think it got the

00:08:39,960 --> 00:08:43,500
final cut to go space-efficient it's

00:08:41,430 --> 00:08:45,150
very hard to go to the space station and

00:08:43,500 --> 00:08:46,620
I don't think our instrument made the

00:08:45,150 --> 00:08:48,450
cut but they're still flying it on

00:08:46,620 --> 00:08:50,340
aircraft

00:08:48,450 --> 00:08:52,470
I built a camera or I help building a

00:08:50,340 --> 00:08:54,060
camera system for the aircraft this is

00:08:52,470 --> 00:08:56,370
probably the strangest embedded system

00:08:54,060 --> 00:08:58,290
you over here oh because it was eight or

00:08:56,370 --> 00:09:00,450
nine Server sized racks that were

00:08:58,290 --> 00:09:02,250
embedded into the aircraft I don't know

00:09:00,450 --> 00:09:03,570
if that's that's sort of stretching the

00:09:02,250 --> 00:09:07,710
definition of embedded depending on who

00:09:03,570 --> 00:09:09,150
you are but I called it embedded I then

00:09:07,710 --> 00:09:10,410
worked on the phased array so that's

00:09:09,150 --> 00:09:13,620
what I'm going to talk about largely in

00:09:10,410 --> 00:09:16,800
this presentation that was a you know a

00:09:13,620 --> 00:09:18,120
pedal Linux build on an arm and we'll

00:09:16,800 --> 00:09:19,500
get into that later and then now I'm

00:09:18,120 --> 00:09:21,810
working on a camera simulator so I'm not

00:09:19,500 --> 00:09:26,130
even working with Linux anymore that's

00:09:21,810 --> 00:09:27,570
sort of the nature of my career so what

00:09:26,130 --> 00:09:29,730
is the phase array and why do we use

00:09:27,570 --> 00:09:33,870
them so antennas started out pretty much

00:09:29,730 --> 00:09:36,930
as wires I don't really know the history

00:09:33,870 --> 00:09:38,610
of them but they started out as wires we

00:09:36,930 --> 00:09:40,680
decided we needed to directionalize them

00:09:38,610 --> 00:09:44,850
so we built things like dishes and

00:09:40,680 --> 00:09:47,160
Yogi's and and they're big they're heavy

00:09:44,850 --> 00:09:50,430
they have to move to target a new thing

00:09:47,160 --> 00:09:52,320
for for detecting or communication and

00:09:50,430 --> 00:09:55,110
so they have to they have to move

00:09:52,320 --> 00:09:57,330
between the two targets or the various

00:09:55,110 --> 00:10:00,180
targets they have and that's slow

00:09:57,330 --> 00:10:02,400
because mechanical things are slow so

00:10:00,180 --> 00:10:04,050
then we went to phased arrays and what

00:10:02,400 --> 00:10:06,330
that allows you to do is steer the beam

00:10:04,050 --> 00:10:08,190
much more quickly purely in electronics

00:10:06,330 --> 00:10:09,990
which we all know can be much faster and

00:10:08,190 --> 00:10:11,970
so you can actually talk to multiple

00:10:09,990 --> 00:10:14,400
targets effectively at the same time not

00:10:11,970 --> 00:10:15,840
actually the same buying time but for

00:10:14,400 --> 00:10:18,140
all intents and purposes is at the same

00:10:15,840 --> 00:10:22,020
time and that's a fantastic ability for

00:10:18,140 --> 00:10:24,060
communications in radar so this is a

00:10:22,020 --> 00:10:27,360
slide a little bit on how a phased array

00:10:24,060 --> 00:10:29,400
works it's a bunch of small antennas

00:10:27,360 --> 00:10:32,790
working together to create a directional

00:10:29,400 --> 00:10:34,850
and signal in our system and this is not

00:10:32,790 --> 00:10:37,200
true in all system but in our system the

00:10:34,850 --> 00:10:39,120
RF the radio frequency signal state

00:10:37,200 --> 00:10:41,970
analog the entire time through the

00:10:39,120 --> 00:10:43,890
entire system we were just sending

00:10:41,970 --> 00:10:45,420
digital control signals to analog

00:10:43,890 --> 00:10:48,510
electronics to control where they were

00:10:45,420 --> 00:10:50,920
pointing that involved amplifiers

00:10:48,510 --> 00:10:54,970
attenuators phase shifters

00:10:50,920 --> 00:10:56,889
and time delays to direct the beam and

00:10:54,970 --> 00:10:58,180
the control computers obviously didn't

00:10:56,889 --> 00:11:01,570
need to be nearly as fast as if they

00:10:58,180 --> 00:11:02,920
were controlling our F so the commanding

00:11:01,570 --> 00:11:05,019
rate is in the tens of Hertz for

00:11:02,920 --> 00:11:06,480
steering it's not that fast that I

00:11:05,019 --> 00:11:08,769
should didn't even require real-time

00:11:06,480 --> 00:11:13,779
constraints because it was you know for

00:11:08,769 --> 00:11:15,519
Linux tents and firts is trivial so this

00:11:13,779 --> 00:11:17,860
is this is the system I was working with

00:11:15,519 --> 00:11:19,660
I was the programmer really the only

00:11:17,860 --> 00:11:21,190
programmer on these blue boards that had

00:11:19,660 --> 00:11:23,139
a little bit of assistance from my boss

00:11:21,190 --> 00:11:28,029
but he was also my boss so he was doing

00:11:23,139 --> 00:11:30,220
a lot of other stuff these are the blue

00:11:28,029 --> 00:11:32,170
boards or micro Zed this is an F net

00:11:30,220 --> 00:11:34,000
platform that runs a Xilinx processor

00:11:32,170 --> 00:11:37,180
that I'll get into in a little bit the

00:11:34,000 --> 00:11:40,779
RF comes in here gets translated into

00:11:37,180 --> 00:11:43,630
fiber optical fiber it gets translated

00:11:40,779 --> 00:11:47,320
back into RF sent to sort of a bulk

00:11:43,630 --> 00:11:51,519
transform system that does some some

00:11:47,320 --> 00:11:52,899
very gross things to the RF and then it

00:11:51,519 --> 00:11:54,310
gets sent on to the sub arrays and

00:11:52,899 --> 00:11:55,600
there's anywhere between fifty and a

00:11:54,310 --> 00:11:58,000
hundred of these and each one of them

00:11:55,600 --> 00:12:00,630
has you know in the tens of antennas on

00:11:58,000 --> 00:12:03,370
them it's all controlled by the central

00:12:00,630 --> 00:12:05,769
again embedded x86 processor your

00:12:03,370 --> 00:12:08,380
definition of embedded may vary but it's

00:12:05,769 --> 00:12:10,269
a it's a full up x86 processor that a

00:12:08,380 --> 00:12:12,610
friend of mine another developer was

00:12:10,269 --> 00:12:14,320
working on and he wrote all the stuff

00:12:12,610 --> 00:12:18,610
that commands the whole system from a

00:12:14,320 --> 00:12:20,290
central location so I don't know what

00:12:18,610 --> 00:12:21,550
the experience level in this room is so

00:12:20,290 --> 00:12:22,959
I hope I'm not talking down to everyone

00:12:21,550 --> 00:12:24,070
I know there are some Xilinx engineers

00:12:22,959 --> 00:12:26,019
in the audience so they'll know this

00:12:24,070 --> 00:12:28,990
already but what is an FPGA and why do

00:12:26,019 --> 00:12:31,720
we use them so FPGAs are fundamentally

00:12:28,990 --> 00:12:33,730
reconfigurable silicon they can be

00:12:31,720 --> 00:12:34,870
controllers they can be memory they can

00:12:33,730 --> 00:12:37,120
be they're probably the most expensive

00:12:34,870 --> 00:12:40,510
way you can possibly get memory but they

00:12:37,120 --> 00:12:43,569
can do it and they can be custom

00:12:40,510 --> 00:12:45,600
processors so you know DSPs visual

00:12:43,569 --> 00:12:47,649
processors pretty much anything you want

00:12:45,600 --> 00:12:49,480
there reconfigurable all the way to

00:12:47,649 --> 00:12:51,490
runtime you can actually pipe a file

00:12:49,480 --> 00:12:54,040
into a special processor or a special

00:12:51,490 --> 00:12:56,199
location into Linux and change how your

00:12:54,040 --> 00:12:57,399
hardware is configured I've never done

00:12:56,199 --> 00:13:00,610
that but it's supposedly it's pretty

00:12:57,399 --> 00:13:02,980
easy they allow external hardware to be

00:13:00,610 --> 00:13:04,510
swapped and added extremely easy easily

00:13:02,980 --> 00:13:06,460
either in development or in run

00:13:04,510 --> 00:13:09,520
time so they have fantastic capabilities

00:13:06,460 --> 00:13:10,840
there they provide expandability for

00:13:09,520 --> 00:13:12,820
future versions you can start out with

00:13:10,840 --> 00:13:14,260
sort of a demo version that has the cut

00:13:12,820 --> 00:13:16,660
down feature set show it to your

00:13:14,260 --> 00:13:18,340
customer and then get them to pay you to

00:13:16,660 --> 00:13:19,630
do a lot more so FPGA is allow you to

00:13:18,340 --> 00:13:21,370
build that into your first version of

00:13:19,630 --> 00:13:23,140
hardware and then it's all software an

00:13:21,370 --> 00:13:26,980
FPGA design from there

00:13:23,140 --> 00:13:28,270
customers love that and and as I

00:13:26,980 --> 00:13:29,950
referenced earlier you can connect

00:13:28,270 --> 00:13:32,680
different daughter boards and hardware

00:13:29,950 --> 00:13:35,320
to the same board during runtime or

00:13:32,680 --> 00:13:38,470
during boot time and FPGA allows you to

00:13:35,320 --> 00:13:42,130
do that much more easily so this is the

00:13:38,470 --> 00:13:44,610
zinc it's a the sort of silver if stuff

00:13:42,130 --> 00:13:48,820
here is hard so you can't change that

00:13:44,610 --> 00:13:50,530
it's a dual-core arm it's built in it's

00:13:48,820 --> 00:13:52,900
got a bunch of i/o built and it's got

00:13:50,530 --> 00:13:54,850
SPI I squared C that kind of stuff built

00:13:52,900 --> 00:13:56,620
in you can't modify it you can change

00:13:54,850 --> 00:13:59,770
what pins it comes out but that's it and

00:13:56,620 --> 00:14:03,460
then it's surrounded by this FPGA fabric

00:13:59,770 --> 00:14:06,670
so this FPGA fabric is where the power

00:14:03,460 --> 00:14:08,560
of this system comes to play you can

00:14:06,670 --> 00:14:09,730
have a lot of soft controllers I'll get

00:14:08,560 --> 00:14:13,120
into it a little bit but you can have a

00:14:09,730 --> 00:14:15,400
lot more i/o than this that's what we

00:14:13,120 --> 00:14:17,290
used it for and like I said you can put

00:14:15,400 --> 00:14:19,120
different processors in here that you

00:14:17,290 --> 00:14:20,620
know do very custom things in here if

00:14:19,120 --> 00:14:24,180
you wanted to we didn't really do a lot

00:14:20,620 --> 00:14:24,180
of that but you can if you want to

00:14:25,470 --> 00:14:29,260
so what hardware was it working listen I

00:14:28,030 --> 00:14:30,520
couldn't fit the other picture the

00:14:29,260 --> 00:14:31,630
previous picture on the slide so you

00:14:30,520 --> 00:14:34,090
gonna have to remember it a little bit

00:14:31,630 --> 00:14:35,170
but there's an RF 2 fiber converter

00:14:34,090 --> 00:14:36,460
there's two of those

00:14:35,170 --> 00:14:39,550
those just have one I squared C

00:14:36,460 --> 00:14:41,110
controller one GPIO and one analog Inigo

00:14:39,550 --> 00:14:44,200
hey Sam why didn't you just use a you

00:14:41,110 --> 00:14:46,120
know Raspberry Pi well I could have I

00:14:44,200 --> 00:14:47,860
have an array driver that's a little bit

00:14:46,120 --> 00:14:50,890
more complicated of a situation

00:14:47,860 --> 00:14:52,900
I've got 4 SPI controllers on there 2 of

00:14:50,890 --> 00:14:53,950
them or controlling SPI flashes and two

00:14:52,900 --> 00:14:56,310
of them are controlling what are

00:14:53,950 --> 00:14:59,860
effectively very large shift registers

00:14:56,310 --> 00:15:02,350
that starts to get to be a scary number

00:14:59,860 --> 00:15:07,480
of SPI buses so you can't really use

00:15:02,350 --> 00:15:09,670
those you got I squared C 2 I squared C

00:15:07,480 --> 00:15:11,560
buses for sensing you know temperatures

00:15:09,670 --> 00:15:13,240
and voltages those kinds of things

00:15:11,560 --> 00:15:15,910
you've got analog the same kind of stuff

00:15:13,240 --> 00:15:18,730
temperatures and voltages and GPIO for

00:15:15,910 --> 00:15:21,280
you know LEDs bulk digital

00:15:18,730 --> 00:15:23,110
transforms those kinds of things the

00:15:21,280 --> 00:15:25,000
subarrays get really really big they

00:15:23,110 --> 00:15:26,560
have eight SPI busses on them so that's

00:15:25,000 --> 00:15:28,390
something you just can't get into your

00:15:26,560 --> 00:15:30,220
hardware you have to have the fpga

00:15:28,390 --> 00:15:34,900
ability to control eight SPI chains

00:15:30,220 --> 00:15:36,910
again four of those are chains are shift

00:15:34,900 --> 00:15:38,530
registers and for our flashes and I'll

00:15:36,910 --> 00:15:39,670
get into the reason those flashes exist

00:15:38,530 --> 00:15:41,860
and why there are four of them in a

00:15:39,670 --> 00:15:43,780
little bit you get five I squared C

00:15:41,860 --> 00:15:45,370
buses again there's a reason there's

00:15:43,780 --> 00:15:46,900
five of them you have to have them

00:15:45,370 --> 00:15:50,650
because of the way the the hardware has

00:15:46,900 --> 00:15:53,020
to be set up analog in GPIO and then

00:15:50,650 --> 00:15:55,060
these are all all three of these are

00:15:53,020 --> 00:15:57,370
controlled centrally by this guy over

00:15:55,060 --> 00:15:59,020
Ethernet so ether notice another thing

00:15:57,370 --> 00:16:02,800
that's really nice with Linux if you

00:15:59,020 --> 00:16:05,170
have it and I'll talk about that so what

00:16:02,800 --> 00:16:07,960
did I need to do I needed to receive

00:16:05,170 --> 00:16:10,080
commands and send telemetry to the

00:16:07,960 --> 00:16:14,470
central controller for processing and

00:16:10,080 --> 00:16:17,440
updating of the customer I need to

00:16:14,470 --> 00:16:19,120
control the RF chain at tens of Hertz so

00:16:17,440 --> 00:16:21,160
not that fast

00:16:19,120 --> 00:16:22,600
I needed to store calibration on the

00:16:21,160 --> 00:16:25,270
daughter board so the daughter boards

00:16:22,600 --> 00:16:26,530
had to each have their own calibration

00:16:25,270 --> 00:16:27,820
there were hundreds of components that

00:16:26,530 --> 00:16:29,140
each had their own calibration point on

00:16:27,820 --> 00:16:30,820
each daughter board they had to be

00:16:29,140 --> 00:16:33,820
stored locally so you could hot-swap

00:16:30,820 --> 00:16:36,220
them so that's a big part of why we have

00:16:33,820 --> 00:16:38,110
flashes everywhere it's because the the

00:16:36,220 --> 00:16:41,410
board itself that has the components

00:16:38,110 --> 00:16:43,000
stores its own calibration you need to

00:16:41,410 --> 00:16:44,530
automate parts of calibration when you

00:16:43,000 --> 00:16:46,660
have hundreds of calibration points on

00:16:44,530 --> 00:16:48,880
per board and you have hundreds of

00:16:46,660 --> 00:16:51,460
boards you get to a really crazy number

00:16:48,880 --> 00:16:53,230
of calibration points really fast you do

00:16:51,460 --> 00:16:54,910
not want to centrally control that even

00:16:53,230 --> 00:16:56,770
with Gigabit Ethernet so you want to

00:16:54,910 --> 00:17:00,310
have some level of automation to make

00:16:56,770 --> 00:17:02,350
your life faster and easier and you need

00:17:00,310 --> 00:17:05,920
to protect the hardware from operator or

00:17:02,350 --> 00:17:07,750
in my case engineer stupidity you don't

00:17:05,920 --> 00:17:09,010
want to blow up your own hardware while

00:17:07,750 --> 00:17:10,120
you're working on it and then you don't

00:17:09,010 --> 00:17:12,810
want to let your customer blow up the

00:17:10,120 --> 00:17:16,360
hardware once they get their hands on it

00:17:12,810 --> 00:17:19,660
so why did I choose Linux I just Linux

00:17:16,360 --> 00:17:21,400
as I wanted to let's be honest I been

00:17:19,660 --> 00:17:24,579
working with it on my laptop for years

00:17:21,400 --> 00:17:25,900
and years and I hadn't really gotten to

00:17:24,579 --> 00:17:28,170
use it in an embedded context the

00:17:25,900 --> 00:17:30,820
previous programs I had worked were all

00:17:28,170 --> 00:17:31,840
other people using it or other people

00:17:30,820 --> 00:17:33,309
directing me on how to you

00:17:31,840 --> 00:17:36,330
and this was the first time I got to

00:17:33,309 --> 00:17:38,559
start from the ground up and use it I

00:17:36,330 --> 00:17:41,080
spent a lot of my time card has

00:17:38,559 --> 00:17:43,750
blizzards that's where I work and we

00:17:41,080 --> 00:17:44,799
have a campus that's fairly open and I

00:17:43,750 --> 00:17:46,870
didn't really like walking between

00:17:44,799 --> 00:17:50,140
buildings in a blizzard ssh means i

00:17:46,870 --> 00:17:53,529
don't have to do that so i mean

00:17:50,140 --> 00:17:56,010
very selfish reasons to choose linux but

00:17:53,529 --> 00:17:58,600
it's i think they're good reasons

00:17:56,010 --> 00:18:00,789
another advantage is your test team your

00:17:58,600 --> 00:18:02,260
electrical team your RF team all have

00:18:00,789 --> 00:18:03,580
experiences linux right it's out there

00:18:02,260 --> 00:18:05,409
they have it on their laptops they're

00:18:03,580 --> 00:18:08,529
using it on their phones and on their

00:18:05,409 --> 00:18:10,000
their macs and some of the more you've

00:18:08,529 --> 00:18:12,279
been using it on their laptops and so

00:18:10,000 --> 00:18:14,940
you can easily tell them hey this is

00:18:12,279 --> 00:18:17,830
just a linux computer just ssh into it

00:18:14,940 --> 00:18:19,360
the big one and this probably makes me a

00:18:17,830 --> 00:18:20,950
really bad and better an engineer but i

00:18:19,360 --> 00:18:22,510
didn't want to write an SPI flash driver

00:18:20,950 --> 00:18:24,580
with we're leveling that did not

00:18:22,510 --> 00:18:25,779
entertain me that did not sound fun and

00:18:24,580 --> 00:18:27,070
it sounded like it would take basically

00:18:25,779 --> 00:18:29,500
the same amount of time it took me to

00:18:27,070 --> 00:18:31,990
bring up this whole project in linux so

00:18:29,500 --> 00:18:33,309
maybe over that engineer but i didn't

00:18:31,990 --> 00:18:35,470
want to do that so that's one of the

00:18:33,309 --> 00:18:37,299
reasons I chose Linux and at ball

00:18:35,470 --> 00:18:38,950
somebody had to we haven't done this

00:18:37,299 --> 00:18:43,510
level of embedded Linux before so

00:18:38,950 --> 00:18:45,580
somebody had to start it so what are my

00:18:43,510 --> 00:18:48,909
company's concerns with Linux and my

00:18:45,580 --> 00:18:51,549
concerns as well speed Linux is is

00:18:48,909 --> 00:18:53,679
probably about as fast as VxWorks but

00:18:51,549 --> 00:18:55,270
it's harder to prove it everything in my

00:18:53,679 --> 00:18:57,520
industry is about proving it can you

00:18:55,270 --> 00:18:59,200
prove that Linux is is going to hit its

00:18:57,520 --> 00:19:01,690
deadlines is going to do everything it

00:18:59,200 --> 00:19:04,330
needs to we don't have that experience

00:19:01,690 --> 00:19:05,860
I know those tools are coming out and

00:19:04,330 --> 00:19:08,200
they have probably been out quite a

00:19:05,860 --> 00:19:09,370
while but we don't have those we don't

00:19:08,200 --> 00:19:11,309
have the experience with those tools so

00:19:09,370 --> 00:19:13,899
Linux is risky from that perspective and

00:19:11,309 --> 00:19:15,640
support you don't have a dedicated

00:19:13,899 --> 00:19:17,529
support channel that you're paying for

00:19:15,640 --> 00:19:19,779
with Linux at least I haven't found one

00:19:17,529 --> 00:19:22,750
I know that a number of companies are

00:19:19,779 --> 00:19:24,490
now offering that but we have not

00:19:22,750 --> 00:19:29,140
experienced that we don't have that in

00:19:24,490 --> 00:19:30,490
our company yet so why are we locked in

00:19:29,140 --> 00:19:33,600
to accepted this is a sort of

00:19:30,490 --> 00:19:36,850
attenuation of the previous slide I

00:19:33,600 --> 00:19:38,919
heard my boss once described VxWorks to

00:19:36,850 --> 00:19:40,809
a vxworks sales rep as sort of the

00:19:38,919 --> 00:19:43,720
Cadillac of operating systems right you

00:19:40,809 --> 00:19:44,450
know the custom or you know VxWorks is

00:19:43,720 --> 00:19:46,670
going to

00:19:44,450 --> 00:19:50,150
stand behind their product you know it's

00:19:46,670 --> 00:19:51,650
gonna work and they will make sure it

00:19:50,150 --> 00:19:52,670
works for you you're gonna pay them for

00:19:51,650 --> 00:19:54,770
it but it'll work

00:19:52,670 --> 00:19:56,630
Linux is more of a Lotus and you're

00:19:54,770 --> 00:20:00,020
bringing a Lotus to a Cadillac show when

00:19:56,630 --> 00:20:01,820
you're bringing Linux to ball it's a

00:20:00,020 --> 00:20:03,740
it's a different product it has a lot of

00:20:01,820 --> 00:20:06,070
advantages over the Cadillac it has a

00:20:03,740 --> 00:20:08,480
lot of advantages over the the vxworks

00:20:06,070 --> 00:20:10,040
but there's also risks involved right

00:20:08,480 --> 00:20:11,240
the support is not as good you're gonna

00:20:10,040 --> 00:20:14,990
end up doing a lot more of the work

00:20:11,240 --> 00:20:16,610
yourself we also have a lot of

00:20:14,990 --> 00:20:18,290
experienced developers at ball I'm

00:20:16,610 --> 00:20:19,820
probably one of the youngest developers

00:20:18,290 --> 00:20:22,910
at ball and I'm not anymore

00:20:19,820 --> 00:20:25,010
but I up until two years ago I was the

00:20:22,910 --> 00:20:27,410
youngest developer maybe the fifth

00:20:25,010 --> 00:20:28,940
youngest developer at the company and so

00:20:27,410 --> 00:20:30,320
we have a lot of history built up

00:20:28,940 --> 00:20:33,560
especially with Linux a lot of our

00:20:30,320 --> 00:20:35,480
developers have used it a lot in and

00:20:33,560 --> 00:20:38,200
back when it wasn't nearly as polished

00:20:35,480 --> 00:20:40,220
as it used to be or as it is now and so

00:20:38,200 --> 00:20:41,870
they're afraid of it they've been bitten

00:20:40,220 --> 00:20:45,760
by Linux in the past and they they

00:20:41,870 --> 00:20:47,990
fairly don't want to use it they have

00:20:45,760 --> 00:20:49,910
they have they're also used to being a

00:20:47,990 --> 00:20:51,410
strained by hardware which is something

00:20:49,910 --> 00:20:54,350
that we don't really have a problem with

00:20:51,410 --> 00:20:56,630
anymore Linux is is bigger it's got a

00:20:54,350 --> 00:20:58,040
lot more requirements from a hardware

00:20:56,630 --> 00:21:00,320
perspective on it so you don't want to

00:20:58,040 --> 00:21:02,840
use it if you don't have to if you're

00:21:00,320 --> 00:21:04,460
running you know when your launch costs

00:21:02,840 --> 00:21:08,600
are in the thousands of dollars a

00:21:04,460 --> 00:21:10,070
kilogram and they have a better

00:21:08,600 --> 00:21:11,840
knowledge of history so a lot of the

00:21:10,070 --> 00:21:14,330
developers I work actually working

00:21:11,840 --> 00:21:16,040
assembly still it's not that common

00:21:14,330 --> 00:21:17,960
anymore but they're writing assembly and

00:21:16,040 --> 00:21:20,650
if you're writing assembly and someone

00:21:17,960 --> 00:21:23,900
throws a Linux at you you're gonna go

00:21:20,650 --> 00:21:27,290
how do I do all this there's this huge

00:21:23,900 --> 00:21:28,460
system built up behind it so there's

00:21:27,290 --> 00:21:31,280
advantages there and there's

00:21:28,460 --> 00:21:33,890
disadvantages there but that's why we

00:21:31,280 --> 00:21:35,390
consider it a little risky to accept

00:21:33,890 --> 00:21:39,050
Linux and it depends highly on the

00:21:35,390 --> 00:21:40,900
project so now I'm gonna start to get

00:21:39,050 --> 00:21:45,080
into some of the things I learned about

00:21:40,900 --> 00:21:46,160
Linux and device tree and any number of

00:21:45,080 --> 00:21:48,440
things so some of these are going to be

00:21:46,160 --> 00:21:50,000
general embedded techniques I'm sure

00:21:48,440 --> 00:21:51,560
most of you know them but I'm gonna go

00:21:50,000 --> 00:21:53,390
over them anyway

00:21:51,560 --> 00:21:55,190
the device three plus an FPGA is

00:21:53,390 --> 00:21:56,240
fantastic I discussed this earlier in a

00:21:55,190 --> 00:21:56,990
slide and this is sort of what I'm

00:21:56,240 --> 00:21:58,490
talking about with

00:21:56,990 --> 00:22:00,380
daughter boards if you have a

00:21:58,490 --> 00:22:02,090
calibration routine and Hardware here

00:22:00,380 --> 00:22:05,300
and a calibration or calibration flash

00:22:02,090 --> 00:22:06,890
here and here and then your Zed board is

00:22:05,300 --> 00:22:09,470
sitting on a sort of motherboard here

00:22:06,890 --> 00:22:11,780
and these are connected over wires the

00:22:09,470 --> 00:22:15,290
device tree makes this really easy to do

00:22:11,780 --> 00:22:17,750
and really easy to swap hardware so

00:22:15,290 --> 00:22:19,429
these dead boards in my system are

00:22:17,750 --> 00:22:22,420
actually all running the same software

00:22:19,429 --> 00:22:25,580
image and actually the same FPGA image

00:22:22,420 --> 00:22:28,970
and they just depending on the pinout

00:22:25,580 --> 00:22:31,309
change what they talk to and they are

00:22:28,970 --> 00:22:34,730
able to detect that based on various

00:22:31,309 --> 00:22:36,679
parameters device tree overlays this is

00:22:34,730 --> 00:22:38,750
my one thing I really want out of this

00:22:36,679 --> 00:22:40,910
presentation device tree overlays are

00:22:38,750 --> 00:22:43,820
not well documented to my knowledge

00:22:40,910 --> 00:22:45,470
I cannot find them I talked to some

00:22:43,820 --> 00:22:46,610
friends at various companies and they're

00:22:45,470 --> 00:22:48,679
like we don't we don't know how to use

00:22:46,610 --> 00:22:50,920
device tree overlays I know that the

00:22:48,679 --> 00:22:55,070
BeagleBoard organization has sort of

00:22:50,920 --> 00:22:56,750
done that and they've used it but for

00:22:55,070 --> 00:22:59,690
FPGAs it's really hard to use it's hard

00:22:56,750 --> 00:23:01,160
to overlay a device tree at runtime so

00:22:59,690 --> 00:23:03,080
if anyone out there is either willing to

00:23:01,160 --> 00:23:05,420
write documentation or willing to make

00:23:03,080 --> 00:23:06,920
it easier to use I encourage you to do

00:23:05,420 --> 00:23:10,850
that I don't have the time but I'd love

00:23:06,920 --> 00:23:12,050
to see something happen there another

00:23:10,850 --> 00:23:14,330
thing I learned when working on this

00:23:12,050 --> 00:23:17,120
project is device free parameter

00:23:14,330 --> 00:23:20,690
standardization is hard so we had a ADC

00:23:17,120 --> 00:23:22,730
that was listed as compatible with the

00:23:20,690 --> 00:23:24,890
device tree and technically it was you

00:23:22,730 --> 00:23:27,650
could plug in this ADC put it on the I

00:23:24,890 --> 00:23:30,950
squared C bus and it would show up and

00:23:27,650 --> 00:23:32,720
give you readings the problem was if you

00:23:30,950 --> 00:23:36,320
changed anything from their defaults in

00:23:32,720 --> 00:23:37,790
this ADC like the reference voltage the

00:23:36,320 --> 00:23:40,720
device did not support that

00:23:37,790 --> 00:23:42,920
so what supported by the device tree

00:23:40,720 --> 00:23:44,450
changes depending on who you're talking

00:23:42,920 --> 00:23:46,240
to and what they're talking about and

00:23:44,450 --> 00:23:49,280
how badly they want to commit their code

00:23:46,240 --> 00:23:53,270
so that's an important lesson from a

00:23:49,280 --> 00:23:55,490
device tree perspective this is where I

00:23:53,270 --> 00:23:57,860
got bit really hard for about a month

00:23:55,490 --> 00:24:01,090
and I can see some guys laughing so I

00:23:57,860 --> 00:24:03,410
suspected they know what this is about

00:24:01,090 --> 00:24:05,059
you can see it right there caution this

00:24:03,410 --> 00:24:07,790
file is automatically generated by petal

00:24:05,059 --> 00:24:10,110
onyx STK do not modify this file that

00:24:07,790 --> 00:24:11,970
screams to me

00:24:10,110 --> 00:24:13,379
this should be working this should be

00:24:11,970 --> 00:24:15,690
tested we should know everything about

00:24:13,379 --> 00:24:19,200
this file it's not this file is not

00:24:15,690 --> 00:24:20,789
correct for the board I was using and it

00:24:19,200 --> 00:24:22,110
cost me a lot of time when you're when

00:24:20,789 --> 00:24:23,909
you're sitting on an error you don't

00:24:22,110 --> 00:24:26,159
know where to look and when your flash

00:24:23,909 --> 00:24:30,029
is broken you really don't know where to

00:24:26,159 --> 00:24:32,429
look that was the change so there was a

00:24:30,029 --> 00:24:34,139
minor part number difference that made

00:24:32,429 --> 00:24:37,740
it look like it was gonna work but it

00:24:34,139 --> 00:24:41,190
didn't so don't trust auto-generated

00:24:37,740 --> 00:24:43,409
files they can have errors too it's just

00:24:41,190 --> 00:24:46,950
an unfortunate consequence of you know

00:24:43,409 --> 00:24:48,299
the industry this is a this is a funny

00:24:46,950 --> 00:24:50,610
way of saying it but Linux doesn't know

00:24:48,299 --> 00:24:53,220
your SPI chain so always I'm using a

00:24:50,610 --> 00:24:55,769
giant shift register always check your

00:24:53,220 --> 00:24:58,620
return values we're only sending data

00:24:55,769 --> 00:25:00,299
out our SPI chain and we didn't have any

00:24:58,620 --> 00:25:02,129
practical reason to read it back we

00:25:00,299 --> 00:25:03,960
didn't need to read the registers values

00:25:02,129 --> 00:25:06,659
back because we're just writing to it

00:25:03,960 --> 00:25:08,669
but you have to do that you have to read

00:25:06,659 --> 00:25:11,909
your return values because especially in

00:25:08,669 --> 00:25:13,860
RF heavy environments wires are gonna

00:25:11,909 --> 00:25:15,480
where's are gonna get signals on them

00:25:13,860 --> 00:25:16,919
and bits are gonna flip and you have to

00:25:15,480 --> 00:25:21,480
be able to prove to your electrical

00:25:16,919 --> 00:25:23,789
engineer that it's his fault because if

00:25:21,480 --> 00:25:25,169
there's a bit flip in there and you

00:25:23,789 --> 00:25:26,820
can't prove it he's gonna go it's

00:25:25,169 --> 00:25:29,399
software it's Linux we're using Linux

00:25:26,820 --> 00:25:30,779
that's dumb and you go I read it back

00:25:29,399 --> 00:25:32,159
and it was different to man and then he

00:25:30,779 --> 00:25:34,019
plugs in the oscilloscope and he goes oh

00:25:32,159 --> 00:25:37,740
yeah look at that there was a bit

00:25:34,019 --> 00:25:40,409
flipping right there so it's kind of a

00:25:37,740 --> 00:25:42,480
dumb technique to mention but absolutely

00:25:40,409 --> 00:25:46,590
reject your return values and that was a

00:25:42,480 --> 00:25:48,899
hard learned lesson for me developers

00:25:46,590 --> 00:25:50,909
will argue about everything Linux

00:25:48,899 --> 00:25:54,149
developers more so and it will be very

00:25:50,909 --> 00:25:56,129
public and very obvious I didn't learn

00:25:54,149 --> 00:25:59,309
what the line between the device tree

00:25:56,129 --> 00:26:00,740
and the kernel was until very late in

00:25:59,309 --> 00:26:02,850
this process and I read some

00:26:00,740 --> 00:26:05,669
documentation that finally clued me into

00:26:02,850 --> 00:26:07,139
what that looked like this this also

00:26:05,669 --> 00:26:08,340
speaks to the get used to reading

00:26:07,139 --> 00:26:09,929
reading the mailing list archives

00:26:08,340 --> 00:26:12,029
there's going to be a lot of arguments

00:26:09,929 --> 00:26:13,980
where you're gonna eminently I think I

00:26:12,029 --> 00:26:16,350
got that word right agree with people on

00:26:13,980 --> 00:26:18,840
one side of a mailing list four or five

00:26:16,350 --> 00:26:20,279
years ago and disagree with the people

00:26:18,840 --> 00:26:21,779
on the other side four or five years ago

00:26:20,279 --> 00:26:23,520
and you want to scream at your screen

00:26:21,779 --> 00:26:25,200
and you want to scream at them

00:26:23,520 --> 00:26:27,600
over the internet but you can't because

00:26:25,200 --> 00:26:33,090
it was five years ago and they don't

00:26:27,600 --> 00:26:35,730
care so that's just gonna happen it's

00:26:33,090 --> 00:26:37,290
not always about Linux this is this is a

00:26:35,730 --> 00:26:40,530
little bit on you silence guys this one

00:26:37,290 --> 00:26:42,570
bit us a little bit there's a glitch

00:26:40,530 --> 00:26:46,080
filter missing in the hard I squared C

00:26:42,570 --> 00:26:47,520
controller on the FPGA I was using so

00:26:46,080 --> 00:26:51,450
that I couldn't change I couldn't fix

00:26:47,520 --> 00:26:52,650
the glitch filter and our I scripts II

00:26:51,450 --> 00:26:55,290
change were originally going through

00:26:52,650 --> 00:26:57,120
this so again back to the hardware

00:26:55,290 --> 00:26:59,730
engineers you have to prove to them that

00:26:57,120 --> 00:27:02,610
it's a hardware issue and not a software

00:26:59,730 --> 00:27:04,410
issue and this one actually got a little

00:27:02,610 --> 00:27:06,900
bit harder because of Linux getting to

00:27:04,410 --> 00:27:10,020
that level of the kernel and getting to

00:27:06,900 --> 00:27:11,400
that level of the hardware in Linux is

00:27:10,020 --> 00:27:14,640
harder than it would have been had I

00:27:11,400 --> 00:27:20,940
been using you know bare metal or like a

00:27:14,640 --> 00:27:22,830
sinner arse off this is a dumb thing but

00:27:20,940 --> 00:27:24,810
also really important be nice to your

00:27:22,830 --> 00:27:27,080
Tech's I work at a company where if we

00:27:24,810 --> 00:27:30,330
produce two of something it's amazing

00:27:27,080 --> 00:27:32,550
it's it's it's a huge deal if we produce

00:27:30,330 --> 00:27:33,810
two of something and we were building

00:27:32,550 --> 00:27:35,640
hundreds of these boards this is

00:27:33,810 --> 00:27:38,250
something we're not particularly used to

00:27:35,640 --> 00:27:39,810
I have no experience telling Tech's how

00:27:38,250 --> 00:27:42,150
to flash I don't know how to burn

00:27:39,810 --> 00:27:44,790
hundred boards I all I know how to do is

00:27:42,150 --> 00:27:46,620
with my manual stupid way and so I wrote

00:27:44,790 --> 00:27:48,270
a 30 step procedure for the text and

00:27:46,620 --> 00:27:50,820
they sort of looked at me like really 30

00:27:48,270 --> 00:27:53,160
steps 400 boards you want me to do this

00:27:50,820 --> 00:27:55,590
that many times I was able to cut it

00:27:53,160 --> 00:27:58,860
down to 17 steps but it was still really

00:27:55,590 --> 00:28:00,960
difficult and very painful so it's kind

00:27:58,860 --> 00:28:02,790
of a stupid thing but be nice to your

00:28:00,960 --> 00:28:03,930
text and try and automate as much of

00:28:02,790 --> 00:28:08,070
their lives as possible because they

00:28:03,930 --> 00:28:10,980
have a lot to do find the fastest way to

00:28:08,070 --> 00:28:12,450
burn flash there's a pretty good story

00:28:10,980 --> 00:28:13,980
here I'll tell you in a second you're

00:28:12,450 --> 00:28:15,780
gonna end up doing it a lot especially

00:28:13,980 --> 00:28:17,460
when you're working in the kernel and

00:28:15,780 --> 00:28:20,630
the file system and the bootloader

00:28:17,460 --> 00:28:22,920
you're gonna burn in flash a lot and

00:28:20,630 --> 00:28:24,690
you're gonna get distracted and that's

00:28:22,920 --> 00:28:26,730
where the story comes from there's a

00:28:24,690 --> 00:28:28,860
really big building at ball that has a

00:28:26,730 --> 00:28:30,300
lot of different projects going on in it

00:28:28,860 --> 00:28:33,360
and it's got a concrete floor and it's

00:28:30,300 --> 00:28:35,180
really fantastic for having wheelie

00:28:33,360 --> 00:28:37,950
chair races

00:28:35,180 --> 00:28:42,870
but if the VP comes on a tour with

00:28:37,950 --> 00:28:45,180
customers it's not so good so it would

00:28:42,870 --> 00:28:48,780
have helped to not be distracted at that

00:28:45,180 --> 00:28:50,820
particular moment maybe not the greatest

00:28:48,780 --> 00:28:52,140
example but it'll happen to you and

00:28:50,820 --> 00:28:55,950
hopefully you'll laugh at it to you

00:28:52,140 --> 00:28:57,090
afterwards SD cards are a fantastic way

00:28:55,950 --> 00:28:58,620
to take care of this but if you're

00:28:57,090 --> 00:29:00,660
working in a vibration sensitive system

00:28:58,620 --> 00:29:03,750
you're gonna have to glue your SD cards

00:29:00,660 --> 00:29:05,880
down at some point and that makes your

00:29:03,750 --> 00:29:07,860
life hard again all of a sudden so be

00:29:05,880 --> 00:29:09,090
careful with how you're using things and

00:29:07,860 --> 00:29:10,200
when you're gonna have to start building

00:29:09,090 --> 00:29:14,820
the hardware gonna have to start gluing

00:29:10,200 --> 00:29:16,860
your hardware down this is a main thesis

00:29:14,820 --> 00:29:18,420
of I think all embedded engineering I

00:29:16,860 --> 00:29:20,460
suspect you can all agree with this

00:29:18,420 --> 00:29:23,340
insert yourself into the hardware design

00:29:20,460 --> 00:29:24,570
process I had a fantastic electrical

00:29:23,340 --> 00:29:26,580
engineer come to me early in the project

00:29:24,570 --> 00:29:27,660
and say hey Sam what do you want you

00:29:26,580 --> 00:29:28,890
know what do you want me to do what

00:29:27,660 --> 00:29:29,820
devices do you want me to use how do you

00:29:28,890 --> 00:29:31,710
want me to pin it out and I was like

00:29:29,820 --> 00:29:34,230
this is great I can pick all drivers

00:29:31,710 --> 00:29:35,850
that are already in the kernel I can pin

00:29:34,230 --> 00:29:37,260
it out so the overlaps work in an

00:29:35,850 --> 00:29:39,900
appropriate way I don't have to use

00:29:37,260 --> 00:29:41,550
device tree overlays this is really

00:29:39,900 --> 00:29:43,350
great he came to me he did it and he had

00:29:41,550 --> 00:29:46,140
the documentation or the the board

00:29:43,350 --> 00:29:48,320
designed but then the electrical team

00:29:46,140 --> 00:29:50,940
had a design review and I wasn't invited

00:29:48,320 --> 00:29:53,850
so they completely changed the design

00:29:50,940 --> 00:29:55,530
and my fault I didn't tell him why I

00:29:53,850 --> 00:29:57,840
wanted these things I just told him what

00:29:55,530 --> 00:29:59,190
I wanted and not why and so they

00:29:57,840 --> 00:30:00,480
completely changed his design sent it

00:29:59,190 --> 00:30:03,210
off of the printer and then two weeks

00:30:00,480 --> 00:30:05,490
later we get these boards back and I'm

00:30:03,210 --> 00:30:07,500
sitting there going alright you changed

00:30:05,490 --> 00:30:10,830
everything on me and everything I wanted

00:30:07,500 --> 00:30:12,840
is gone great so it's really important

00:30:10,830 --> 00:30:14,790
that yeah illogical engineers are busy

00:30:12,840 --> 00:30:16,380
and they don't necessarily want to

00:30:14,790 --> 00:30:18,480
listen to the software the dumb software

00:30:16,380 --> 00:30:20,250
engineers but you have got to get

00:30:18,480 --> 00:30:22,980
everywhere in their process even if they

00:30:20,250 --> 00:30:24,809
ask you what they want or what you want

00:30:22,980 --> 00:30:26,160
you have to make sure they actually do

00:30:24,809 --> 00:30:27,780
it and the boards actually get printed

00:30:26,160 --> 00:30:29,730
with your changes this is another place

00:30:27,780 --> 00:30:30,840
device trees what hell overlays would

00:30:29,730 --> 00:30:33,179
have helped me it would have fixed this

00:30:30,840 --> 00:30:35,820
problem but I didn't know how to use

00:30:33,179 --> 00:30:38,250
them so my Oracle engineering staff

00:30:35,820 --> 00:30:40,140
they're great people but it kind of hurt

00:30:38,250 --> 00:30:42,960
me on this one

00:30:40,140 --> 00:30:45,060
and then my buddy had to write a an

00:30:42,960 --> 00:30:46,500
interface to a rack we're talking

00:30:45,060 --> 00:30:50,789
$100,000

00:30:46,500 --> 00:30:55,049
single rack it's a 380 volt DC power

00:30:50,789 --> 00:30:58,799
supply all you could control it with was

00:30:55,049 --> 00:31:01,530
ActiveX yeah I can see the faces there

00:30:58,799 --> 00:31:03,780
it's extremely painful good ActiveX

00:31:01,530 --> 00:31:05,250
support in Linux and so we would have

00:31:03,780 --> 00:31:06,480
changed this is a hundred thousand

00:31:05,250 --> 00:31:09,030
dollar part we would have changed parts

00:31:06,480 --> 00:31:10,530
easily because it cost us a ton of money

00:31:09,030 --> 00:31:13,710
to try to figure out how to get ActiveX

00:31:10,530 --> 00:31:19,320
into Linux and we had to use Linux so we

00:31:13,710 --> 00:31:22,049
it was just very painful this is a funny

00:31:19,320 --> 00:31:26,370
one hardware will disappear on you

00:31:22,049 --> 00:31:28,200
especially expensive RF hardware the

00:31:26,370 --> 00:31:30,929
first thing you have to do when you're

00:31:28,200 --> 00:31:34,620
starting a project is beg plead or

00:31:30,929 --> 00:31:37,620
threaten for a software test bench if

00:31:34,620 --> 00:31:40,049
you don't get that good welding torch

00:31:37,620 --> 00:31:41,789
because your hardware engineers are

00:31:40,049 --> 00:31:43,350
gonna pull your your your hardware on

00:31:41,789 --> 00:31:44,669
you your RF engineers we're gonna pull

00:31:43,350 --> 00:31:45,600
your hardware on your test engineers

00:31:44,669 --> 00:31:47,220
we're gonna pull your hardware on you

00:31:45,600 --> 00:31:48,750
and if it's welded to the bench it's a

00:31:47,220 --> 00:31:50,460
lot harder for them to do that no I

00:31:48,750 --> 00:31:53,900
didn't actually weld in harder at the

00:31:50,460 --> 00:31:53,900
bench I really wanted to you though

00:31:54,030 --> 00:31:59,370
Linux made testability fantastic this is

00:31:57,000 --> 00:32:02,100
a this is a huge factor especially in my

00:31:59,370 --> 00:32:04,049
industry there's familiarity for the

00:32:02,100 --> 00:32:05,520
test team if they know Linux they can

00:32:04,049 --> 00:32:07,200
just SSH into your board and they can do

00:32:05,520 --> 00:32:08,970
a lot themselves you don't have to be

00:32:07,200 --> 00:32:13,679
hand-holding them like you would with a

00:32:08,970 --> 00:32:14,880
with a richer or a thinner are toss you

00:32:13,679 --> 00:32:16,710
don't have to tell them how to turn on

00:32:14,880 --> 00:32:20,190
GPIO as you can just say it's Linux you

00:32:16,710 --> 00:32:21,480
just use GPIO s you can run a lot of

00:32:20,190 --> 00:32:22,830
your software tests on commodity

00:32:21,480 --> 00:32:24,240
hardware when you're running Linux it's

00:32:22,830 --> 00:32:26,539
a lot harder with VxWorks

00:32:24,240 --> 00:32:29,850
especially from a licensing standpoint

00:32:26,539 --> 00:32:32,429
and access to some sort of scripting

00:32:29,850 --> 00:32:34,590
language on your hardware is really

00:32:32,429 --> 00:32:36,900
really fantastic if you've got to turn

00:32:34,590 --> 00:32:39,570
on and off an LED to determine if your

00:32:36,900 --> 00:32:41,340
GPIO is working in another room the

00:32:39,570 --> 00:32:44,220
ability to write a bash script that just

00:32:41,340 --> 00:32:45,630
flashes it on and off every second is is

00:32:44,220 --> 00:32:46,830
really great because then you don't have

00:32:45,630 --> 00:32:49,140
to have another engineer sitting at the

00:32:46,830 --> 00:32:51,179
desk sending the commands to turn on and

00:32:49,140 --> 00:32:52,350
off the LED you just write a script to

00:32:51,179 --> 00:32:53,840
do it then you walk over the other room

00:32:52,350 --> 00:32:56,309
and see what's actually happening so

00:32:53,840 --> 00:32:59,400
testability is a huge thing that makes

00:32:56,309 --> 00:33:01,590
Linux a lot better

00:32:59,400 --> 00:33:03,690
this is a another silly thing that I

00:33:01,590 --> 00:33:04,800
learned keep a log of everything you do

00:33:03,690 --> 00:33:07,680
especially when you're working with

00:33:04,800 --> 00:33:08,970
embedded Linux you have a ton of

00:33:07,680 --> 00:33:10,200
different things you're working with

00:33:08,970 --> 00:33:11,640
you're working with the kernel you're

00:33:10,200 --> 00:33:13,050
working with you boot you're working

00:33:11,640 --> 00:33:15,630
with the device tree you're working with

00:33:13,050 --> 00:33:17,220
your application and you're gonna switch

00:33:15,630 --> 00:33:19,260
between them because one thing is gonna

00:33:17,220 --> 00:33:21,120
cause an issue in another and so you

00:33:19,260 --> 00:33:22,830
need to keep a log of everything you're

00:33:21,120 --> 00:33:24,480
doing because if you don't you're gonna

00:33:22,830 --> 00:33:26,790
forget you'll you'll be working on the

00:33:24,480 --> 00:33:27,870
device tree for a week or a couple days

00:33:26,790 --> 00:33:29,370
and then you'll get switched to the

00:33:27,870 --> 00:33:31,290
application because something came up

00:33:29,370 --> 00:33:32,340
and you have to fix it and you'll come

00:33:31,290 --> 00:33:33,780
back to the device for you to forget

00:33:32,340 --> 00:33:35,460
where you were and what you were doing

00:33:33,780 --> 00:33:38,010
and what command was working for you so

00:33:35,460 --> 00:33:40,170
keep a log of everything you do I know

00:33:38,010 --> 00:33:43,920
dumb to say that but I think it's

00:33:40,170 --> 00:33:47,160
important to say you're gonna repeat

00:33:43,920 --> 00:33:48,120
tiles trials if you don't do this you're

00:33:47,160 --> 00:33:49,680
gonna have to write a year's guide

00:33:48,120 --> 00:33:52,410
everybody will eventually have to write

00:33:49,680 --> 00:33:54,060
a user's guide for their product so if

00:33:52,410 --> 00:33:55,470
you have that log of everything you did

00:33:54,060 --> 00:33:58,770
when you're developing it and makes your

00:33:55,470 --> 00:33:59,790
users guide a lot easier and other

00:33:58,770 --> 00:34:01,320
developers are gonna come onto the

00:33:59,790 --> 00:34:04,200
project I was actually pretty lucky I

00:34:01,320 --> 00:34:05,820
was working mostly alone but I did have

00:34:04,200 --> 00:34:07,710
a boss who was helping me and I had to

00:34:05,820 --> 00:34:09,210
keep some way of letting him know how to

00:34:07,710 --> 00:34:11,429
take over when I had to leave and move

00:34:09,210 --> 00:34:13,290
on to this next project I was on so keep

00:34:11,429 --> 00:34:16,649
a log I don't care if it's a paper log

00:34:13,290 --> 00:34:18,750
or a blog for yourself or something but

00:34:16,649 --> 00:34:20,790
keep something so you know everything

00:34:18,750 --> 00:34:22,470
you did and every command you typed when

00:34:20,790 --> 00:34:24,179
you're working on a better platform you

00:34:22,470 --> 00:34:27,179
don't always have persistent storage

00:34:24,179 --> 00:34:29,220
your history doesn't stay there so copy

00:34:27,179 --> 00:34:33,570
those commands over whatever over serial

00:34:29,220 --> 00:34:38,129
or SSH to your log so you know what you

00:34:33,570 --> 00:34:39,450
did so these are the advantages to using

00:34:38,129 --> 00:34:40,980
Linux I've mentioned a lot of them

00:34:39,450 --> 00:34:43,350
already but I want to go over them a

00:34:40,980 --> 00:34:46,409
little bit I squared see hardware is

00:34:43,350 --> 00:34:48,450
really easy to move in Linux from the

00:34:46,409 --> 00:34:51,570
hard to the soft when you find a bug in

00:34:48,450 --> 00:34:53,850
the hardware SSH was invaluable

00:34:51,570 --> 00:34:55,409
walking through blizzards is not fun SSH

00:34:53,850 --> 00:34:59,370
makes you not have to do that nearly as

00:34:55,409 --> 00:35:01,080
much FPGA is allow for hardware

00:34:59,370 --> 00:35:04,080
commonality that's a huge advantage of

00:35:01,080 --> 00:35:06,930
the FPGAs and and FPGAs plus the device

00:35:04,080 --> 00:35:11,280
tree is a lot of magic right you the way

00:35:06,930 --> 00:35:12,839
that the hardware appears to linux with

00:35:11,280 --> 00:35:14,339
that device tree and that FPGA

00:35:12,839 --> 00:35:16,979
makes your life so much easier just

00:35:14,339 --> 00:35:19,319
shows up and works for you

00:35:16,979 --> 00:35:20,640
GPIO from user spaces magic I'm sure

00:35:19,319 --> 00:35:23,519
we're all used to writing this sort of

00:35:20,640 --> 00:35:25,440
embedded hello world writing that from

00:35:23,519 --> 00:35:27,450
user space as trivial nowadays you just

00:35:25,440 --> 00:35:29,009
write a bash script to do it and you

00:35:27,450 --> 00:35:33,089
just flash an LED on and off and it's

00:35:29,009 --> 00:35:34,619
fantastic I've said this a lot and I'll

00:35:33,089 --> 00:35:38,700
say it again I didn't have to write a

00:35:34,619 --> 00:35:41,089
we're leveling SPI flash driver that

00:35:38,700 --> 00:35:43,769
alone made the whole project worth it

00:35:41,089 --> 00:35:45,029
you get a lot of boot options it's not

00:35:43,769 --> 00:35:47,640
only next thing it's a you boot thing

00:35:45,029 --> 00:35:51,180
but you get many ways you can boot your

00:35:47,640 --> 00:35:53,039
OS with you boot you can boot over TFTP

00:35:51,180 --> 00:35:56,309
you can do it from onboard flash you can

00:35:53,039 --> 00:35:58,410
send an image you can update images that

00:35:56,309 --> 00:35:59,400
alone has a lot of advantages when

00:35:58,410 --> 00:36:03,049
you're working in a system that's going

00:35:59,400 --> 00:36:05,430
to be updated you've got expandability

00:36:03,049 --> 00:36:07,259
in linux you can write new user

00:36:05,430 --> 00:36:08,670
applications easily upload them easily

00:36:07,259 --> 00:36:10,529
and test them easily

00:36:08,670 --> 00:36:14,430
same thing with FPGA is you can write

00:36:10,529 --> 00:36:16,109
new processing cores easily you have the

00:36:14,430 --> 00:36:17,819
built-in tools for upgrades either your

00:36:16,109 --> 00:36:19,920
application image or your kernel image

00:36:17,819 --> 00:36:23,910
both are incredibly easy to update that

00:36:19,920 --> 00:36:26,160
use standard tools with Linux you have

00:36:23,910 --> 00:36:27,569
the ability to patch same same concept

00:36:26,160 --> 00:36:29,339
right of security vault security

00:36:27,569 --> 00:36:32,009
vulnerabilities noticed you can patch it

00:36:29,339 --> 00:36:34,109
the other systems you know vxworks makes

00:36:32,009 --> 00:36:36,450
that a little bit harder

00:36:34,109 --> 00:36:38,130
there's modularity built in so a lot of

00:36:36,450 --> 00:36:40,469
the engineers where I work and I'm

00:36:38,130 --> 00:36:42,599
guilty of this too when you're writing

00:36:40,469 --> 00:36:44,460
tightly coupled hardware with an artists

00:36:42,599 --> 00:36:46,349
or on bare metal you don't do the

00:36:44,460 --> 00:36:48,420
modularity like you should you you

00:36:46,349 --> 00:36:50,880
couple your hardware and your software

00:36:48,420 --> 00:36:53,130
to a degree really shouldn't the way

00:36:50,880 --> 00:36:55,469
Linux is built you don't do that unless

00:36:53,130 --> 00:36:58,499
you try really hard if you work run from

00:36:55,469 --> 00:37:00,180
user space you don't have to you will

00:36:58,499 --> 00:37:04,619
force yourself to write modular code

00:37:00,180 --> 00:37:08,369
which is a great thing in most cases and

00:37:04,619 --> 00:37:11,039
as as lack of dedicated support channels

00:37:08,369 --> 00:37:12,809
as there are the support for Linux is

00:37:11,039 --> 00:37:14,729
broad there's a huge community around

00:37:12,809 --> 00:37:17,069
Linux around you boot around the device

00:37:14,729 --> 00:37:19,529
tree and as long as you're willing to do

00:37:17,069 --> 00:37:25,710
the research Linux has those support

00:37:19,529 --> 00:37:26,580
channels so thank you I appreciate all

00:37:25,710 --> 00:37:28,340
the work you

00:37:26,580 --> 00:37:31,950
is due to contribute to the code I

00:37:28,340 --> 00:37:33,540
appreciate you guys coming to my talk I

00:37:31,950 --> 00:37:34,620
hope I provided some value I know it was

00:37:33,540 --> 00:37:36,000
a lot of things you've probably already

00:37:34,620 --> 00:37:38,190
discovered for yourself but I think it's

00:37:36,000 --> 00:37:39,900
important to say it I'm happy to take

00:37:38,190 --> 00:37:41,220
questions or comments now but if you're

00:37:39,900 --> 00:37:44,040
uncomfortable talking in front of a

00:37:41,220 --> 00:37:46,080
group I'll be around all till Wednesday

00:37:44,040 --> 00:37:49,020
afternoon you can email me at that

00:37:46,080 --> 00:37:51,540
address and I'll try to answer your

00:37:49,020 --> 00:37:53,070
questions I would really appreciate any

00:37:51,540 --> 00:37:54,510
feedback you have for me this is my

00:37:53,070 --> 00:37:56,100
first presentation in front of group

00:37:54,510 --> 00:37:58,620
this large so if there's anything I can

00:37:56,100 --> 00:38:01,320
do better it's a skill I'm working on so

00:37:58,620 --> 00:38:03,000
I'd like to to get that anything from my

00:38:01,320 --> 00:38:06,750
hair looked funny or my my fly was done

00:38:03,000 --> 00:38:08,880
which I think we're good on to how wrong

00:38:06,750 --> 00:38:11,010
I am about the device tree please let me

00:38:08,880 --> 00:38:20,970
know either through this email or right

00:38:11,010 --> 00:38:23,840
now so open up to questions how did I

00:38:20,970 --> 00:38:23,840
configure the FPGA

00:38:29,099 --> 00:38:32,910
yes oh I was doing it with you boot was

00:38:31,619 --> 00:38:35,040
doing it automatically for me so I had I

00:38:32,910 --> 00:38:37,470
had a prebuilt image I was you boot

00:38:35,040 --> 00:38:39,359
would boot up from on the arm and then

00:38:37,470 --> 00:38:40,470
configure the FPGA very early or very

00:38:39,359 --> 00:38:41,940
early in the food cycle does that answer

00:38:40,470 --> 00:38:49,290
your question okay

00:38:41,940 --> 00:38:51,570
yeah to my detriment yes I did I was I

00:38:49,290 --> 00:38:53,849
was on pedal and x-15 for and about

00:38:51,570 --> 00:38:55,079
three of the bugs I found were fixed in

00:38:53,849 --> 00:38:57,660
the newer version of the kernel by the

00:38:55,079 --> 00:38:59,640
time I was done with the project so

00:38:57,660 --> 00:39:07,440
there's advantages to sticking but

00:38:59,640 --> 00:39:11,880
there's also advantages to upgrading 310

00:39:07,440 --> 00:39:13,170
I think 310 or 3/8 I tried running 412

00:39:11,880 --> 00:39:14,730
on it because I actually have code in

00:39:13,170 --> 00:39:16,380
412 and I wanted to see if it would work

00:39:14,730 --> 00:39:20,220
it actually I fixed some things I wanted

00:39:16,380 --> 00:39:21,839
to fix and it didn't work because I

00:39:20,220 --> 00:39:24,869
don't think I patched it quite

00:39:21,839 --> 00:39:26,280
appropriately but yeah that was very

00:39:24,869 --> 00:39:27,720
close to the end of the project and I

00:39:26,280 --> 00:39:35,310
just wanted to see if my code would have

00:39:27,720 --> 00:39:37,200
worked but it was it's fine yep would I

00:39:35,310 --> 00:39:39,450
do it again oh absolutely

00:39:37,200 --> 00:39:42,450
if if I could have a career doing this

00:39:39,450 --> 00:39:45,060
kind of stuff I would do it every time I

00:39:42,450 --> 00:39:47,609
learned so much I got to learn so much

00:39:45,060 --> 00:39:50,910
about other people's code and it worked

00:39:47,609 --> 00:39:52,740
it came together it all I can say is it

00:39:50,910 --> 00:39:56,130
came together I don't know how it was

00:39:52,740 --> 00:39:59,569
magical but things came together and in

00:39:56,130 --> 00:40:03,260
the end we have a functioning system and

00:39:59,569 --> 00:40:03,260
it it was great

00:40:13,870 --> 00:40:19,100
yeah yeah so that the comment there

00:40:16,760 --> 00:40:20,750
sorry I'm not repeating questions the

00:40:19,100 --> 00:40:22,430
comment there was you know he's

00:40:20,750 --> 00:40:25,100
seconding my device free overlays which

00:40:22,430 --> 00:40:27,020
I'm gonna make really loud device free

00:40:25,100 --> 00:40:29,990
overlays should be documented better and

00:40:27,020 --> 00:40:49,570
more usable anybody listening who can do

00:40:29,990 --> 00:40:49,570
that please do right

00:40:55,289 --> 00:41:02,949
right yeah I think that's a good point

00:41:01,119 --> 00:41:04,359
I'll repeat that you have to set your

00:41:02,949 --> 00:41:07,409
expectations appropriately when you're

00:41:04,359 --> 00:41:09,400
using Linux it's the support levels are

00:41:07,409 --> 00:41:10,539
different than when you're using a paid

00:41:09,400 --> 00:41:14,069
operating system and I think that's a

00:41:10,539 --> 00:41:14,069
very good point so thank you

00:41:20,640 --> 00:41:27,030
I did kind of that was before that was

00:41:23,910 --> 00:41:28,560
the version before they adopted Yocto it

00:41:27,030 --> 00:41:31,830
was pedal linux and then they adopted

00:41:28,560 --> 00:41:34,530
Yocto as far as I know in 16:1 and so I

00:41:31,830 --> 00:41:36,450
did as I learned what I was doing I

00:41:34,530 --> 00:41:38,070
slowly moved away from their environment

00:41:36,450 --> 00:41:39,360
and slowly started doing it on my own at

00:41:38,070 --> 00:41:42,480
the end I was building my own device

00:41:39,360 --> 00:41:43,770
three blobs manually I was building the

00:41:42,480 --> 00:41:45,240
kernel manually obviously I was using

00:41:43,770 --> 00:41:47,280
their patches but I was building that

00:41:45,240 --> 00:41:48,480
manually my application was built

00:41:47,280 --> 00:41:49,830
basically straight from the

00:41:48,480 --> 00:41:51,060
cross-compiler not in their environment

00:41:49,830 --> 00:41:58,080
it just depends on what you know and as

00:41:51,060 --> 00:42:00,900
you learn it no no no I never brought up

00:41:58,080 --> 00:42:02,550
Eclipse thankfully I have I have a lot

00:42:00,900 --> 00:42:04,680
of friends who love Eclipse it has its

00:42:02,550 --> 00:42:08,570
advantages but for kernel development

00:42:04,680 --> 00:42:08,570
kind of stuff it's not not my favorite

00:42:19,800 --> 00:42:22,800
yeah

00:42:26,430 --> 00:42:30,630
yeah so they've decor I'm sorry I'm

00:42:29,369 --> 00:42:32,309
gonna repeat your question after we've

00:42:30,630 --> 00:42:35,549
already discussed it which is did I use

00:42:32,309 --> 00:42:46,799
Eclipse to build my my code and the

00:42:35,549 --> 00:42:48,869
answer is no that's a much longer story

00:42:46,799 --> 00:42:51,240
it turns out I'm an FPGA engineer as

00:42:48,869 --> 00:42:53,940
well largely because I want to get

00:42:51,240 --> 00:42:55,980
integration so as I links is kind enough

00:42:53,940 --> 00:42:57,869
to provide a scripting interface for

00:42:55,980 --> 00:42:59,279
their Bovada tools so you do have to

00:42:57,869 --> 00:43:01,410
launch with Auto but then you just run a

00:42:59,279 --> 00:43:03,270
script in it and if you run the script

00:43:01,410 --> 00:43:04,890
you can get control the script but yeah

00:43:03,270 --> 00:43:07,170
if that was the thing I was talking to

00:43:04,890 --> 00:43:09,539
the Xilinx people about yeah better get

00:43:07,170 --> 00:43:12,140
control on the Vivaro stuff would be

00:43:09,539 --> 00:43:12,140
greatly appreciated

00:43:21,460 --> 00:43:27,110
how do I answer that ITAR is certainly a

00:43:25,400 --> 00:43:29,420
pain when it comes to Linux it's very

00:43:27,110 --> 00:43:36,680
hard to ask questions when you're you're

00:43:29,420 --> 00:43:41,000
asking ITAR things I didn't worry too

00:43:36,680 --> 00:43:42,320
much about open source things because

00:43:41,000 --> 00:43:44,690
the way I've had it explained to me

00:43:42,320 --> 00:43:50,210
means it doesn't matter I'm sure I'm

00:43:44,690 --> 00:43:53,530
wrong but I didn't think about it very

00:43:50,210 --> 00:44:06,830
hard and just sort of try not to think

00:43:53,530 --> 00:44:08,270
so that's a very fair point a vague law

00:44:06,830 --> 00:44:17,630
with criminal penalties yeah that's a

00:44:08,270 --> 00:44:23,750
good way to describe it what do you mean

00:44:17,630 --> 00:44:25,520
by flight software No

00:44:23,750 --> 00:44:27,140
so we are our satellite business is

00:44:25,520 --> 00:44:29,140
still very much the Cadillac of

00:44:27,140 --> 00:44:34,910
satellites we're we're still very much

00:44:29,140 --> 00:44:36,170
doing the VxWorks things and I'd I would

00:44:34,910 --> 00:44:38,030
love to fly Linux and I think we're

00:44:36,170 --> 00:44:40,430
getting close but we have a lot of

00:44:38,030 --> 00:44:41,930
heritage and a lot of customers that

00:44:40,430 --> 00:44:45,940
have requirements that do not allow us

00:44:41,930 --> 00:44:45,940
to fly it on orbit

00:44:57,520 --> 00:45:10,050
oh so I guess I miss describe the

00:45:08,110 --> 00:45:13,900
question is how do I track Hardware bugs

00:45:10,050 --> 00:45:16,540
so we have 50 or 100 of these boards but

00:45:13,900 --> 00:45:20,860
they're all the same and by there's only

00:45:16,540 --> 00:45:22,360
four four different boards and if if one

00:45:20,860 --> 00:45:25,120
of the one of the types of board there

00:45:22,360 --> 00:45:27,850
were 50 to 100 of and if we miss

00:45:25,120 --> 00:45:29,020
prohibit once it all 50 of them got

00:45:27,850 --> 00:45:32,170
reprinted or all hundred of them

00:45:29,020 --> 00:45:35,400
whatever got reprinted so we didn't have

00:45:32,170 --> 00:45:37,060
that problem at least in our version I

00:45:35,400 --> 00:45:37,510
don't know how I would answer that

00:45:37,060 --> 00:45:39,160
question

00:45:37,510 --> 00:45:41,410
in future versions because I'm sure that

00:45:39,160 --> 00:45:43,120
will start to occur and I believe the

00:45:41,410 --> 00:45:44,950
calibration is on board on a lot of

00:45:43,120 --> 00:45:46,120
those boards so that's a nicety of it

00:45:44,950 --> 00:45:51,550
you can put a version number in your

00:45:46,120 --> 00:45:53,470
calibration flash I don't see any hands

00:45:51,550 --> 00:45:54,230
going up so I think we're done so again

00:45:53,470 --> 00:45:59,249
thank you all for coming

00:45:54,230 --> 00:45:59,249

YouTube URL: https://www.youtube.com/watch?v=IGaTOctBubA


