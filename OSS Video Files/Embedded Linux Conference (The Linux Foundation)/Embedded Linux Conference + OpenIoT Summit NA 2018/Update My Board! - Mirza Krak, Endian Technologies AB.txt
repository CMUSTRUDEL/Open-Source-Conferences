Title: Update My Board! - Mirza Krak, Endian Technologies AB
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Update My Board! - Mirza Krak, Endian Technologies AB

There are now well established open-source solutions to do software updates on your embedded Linux device that have been "battle tested", that we can collaborate on to make the complexity of software updates manageable. These projects usually come with an reference implementation using a popular community board (BBB or raspberrypi) which can be used for initial testing.

In this talk Mirza will present how to integrate a number of open-source software update solution to a custom board and go trough the steps necessary for each project, because in the end the hardship/easiness of integrating the project with your custom board could be the deciding factor when deciding which project to use.

The projects that Mirza will cover are:

- SWupdate
- Mender
- aktualizr (libostree)
- resin.io

Attendees are expected to have basic knowledge of software update key concepts and Yocto/OE-core since all of the above projects rely heavily on it for board integration.

About Mirza Krak
Mirza Krak is an embedded Linux developer with over six years of experience in the field and is currently employed by Endian Technologies AB. He is involved in various open-source projects and is a Linux kernel contributor. Mirza's expertise is within: - Linux kernel development (device drivers and board support) - Boot-loaders (U-boot, Barebox, GRUB and more) - Build systems (Yocto/OE-core, Buildroot) - Hardware bring-up - Software updates Mirza is a first time speaker on ELC but has experience giving talks on local meetups
Captions: 
	00:00:02,449 --> 00:00:10,590
okay let's get started thank you for

00:00:08,010 --> 00:00:14,910
joining me today and the plan is today

00:00:10,590 --> 00:00:16,379
is in my session to take a look at how

00:00:14,910 --> 00:00:20,340
we can integrate an open-source software

00:00:16,379 --> 00:00:23,460
update solution on your custom board a

00:00:20,340 --> 00:00:27,090
quick session of you I will start off

00:00:23,460 --> 00:00:30,390
with some background about me and why

00:00:27,090 --> 00:00:32,009
I'm doing this and then we'll jump

00:00:30,390 --> 00:00:35,579
straight to the different projects that

00:00:32,009 --> 00:00:37,739
are available to us and on each project

00:00:35,579 --> 00:00:41,550
I plan to provide a quick lympho about

00:00:37,739 --> 00:00:43,079
what the actual project is requirements

00:00:41,550 --> 00:00:45,450
to be able to run it on your own your

00:00:43,079 --> 00:00:49,610
custom boards because they have

00:00:45,450 --> 00:00:53,550
requirements and I was also provide

00:00:49,610 --> 00:00:58,170
inside so on integration points that

00:00:53,550 --> 00:01:01,260
these projects have I will focus my

00:00:58,170 --> 00:01:04,019
integration insights on the Yocto

00:01:01,260 --> 00:01:07,200
project because all of these projects

00:01:04,019 --> 00:01:10,950
that I have here have that as the

00:01:07,200 --> 00:01:13,860
official integration method but there is

00:01:10,950 --> 00:01:18,180
a possibility to integrate this project

00:01:13,860 --> 00:01:21,920
either with build route or manually if

00:01:18,180 --> 00:01:24,990
you're not using a specific build system

00:01:21,920 --> 00:01:27,330
and a bit background I work as a

00:01:24,990 --> 00:01:30,840
contractor at a company called MDM

00:01:27,330 --> 00:01:33,770
technologies we are based in Sweden so

00:01:30,840 --> 00:01:40,409
I'm a long way from home at the moment I

00:01:33,770 --> 00:01:42,390
am I'm also involved in one in two of

00:01:40,409 --> 00:01:43,130
the projects that I listed and I'm gonna

00:01:42,390 --> 00:01:45,450
cover

00:01:43,130 --> 00:01:47,280
Mandor is one of them where I've been an

00:01:45,450 --> 00:01:50,009
active community member for a while now

00:01:47,280 --> 00:01:54,750
but I've also made computer

00:01:50,009 --> 00:01:56,640
contributions to software update and I'm

00:01:54,750 --> 00:02:00,990
involved in various other open-source

00:01:56,640 --> 00:02:03,840
projects but on my day to day work I

00:02:00,990 --> 00:02:06,409
usually what I do is help out our

00:02:03,840 --> 00:02:09,390
clients deploy embedded Linux devices

00:02:06,409 --> 00:02:11,290
where I do board Support Package

00:02:09,390 --> 00:02:14,400
development basically

00:02:11,290 --> 00:02:17,110
and this includes hardware bring up

00:02:14,400 --> 00:02:19,780
aboard support board support in a

00:02:17,110 --> 00:02:22,599
bootloader normally you boot board

00:02:19,780 --> 00:02:27,600
support in the Linux kernel in some

00:02:22,599 --> 00:02:30,069
cases some custom device drivers and

00:02:27,600 --> 00:02:32,350
normally there is some kind of user

00:02:30,069 --> 00:02:37,840
space or custom distribution based on

00:02:32,350 --> 00:02:41,200
Yocto the core but nowadays this also

00:02:37,840 --> 00:02:44,400
includes integrating an open-source

00:02:41,200 --> 00:02:48,660
software update solution for me at least

00:02:44,400 --> 00:02:52,780
that is part of my delivery so to say I

00:02:48,660 --> 00:02:55,239
have been I have worked in projects

00:02:52,780 --> 00:02:59,769
where we have tried to make our

00:02:55,239 --> 00:03:04,600
homegrown updater so to say and I've

00:02:59,769 --> 00:03:07,000
been down that path and they were

00:03:04,600 --> 00:03:10,840
normally of poor quality and barely

00:03:07,000 --> 00:03:13,150
worked and and that's what I when I

00:03:10,840 --> 00:03:14,560
started to look at the available open

00:03:13,150 --> 00:03:16,480
source project instead instead of

00:03:14,560 --> 00:03:19,570
building our own because someone already

00:03:16,480 --> 00:03:22,840
has done a huge amount of the work that

00:03:19,570 --> 00:03:25,810
you can build upon and some of these

00:03:22,840 --> 00:03:30,329
solutions are basically as close as you

00:03:25,810 --> 00:03:30,329
can get to an out-of-the-box solution

00:03:33,030 --> 00:03:38,130
I just wanted to mention some previous

00:03:35,370 --> 00:03:40,740
talks on this topic because I'm gonna

00:03:38,130 --> 00:03:42,870
focus on in the integration of each

00:03:40,740 --> 00:03:45,570
project they're not so much on what

00:03:42,870 --> 00:03:48,990
different differentiation is in the

00:03:45,570 --> 00:03:51,900
features of the project but these are

00:03:48,990 --> 00:03:54,120
from 2016 and a better Linux conference

00:03:51,900 --> 00:03:55,920
that does RIBA more head-to-head

00:03:54,120 --> 00:03:59,490
comparison of the different projects and

00:03:55,920 --> 00:04:02,360
how do they do the updates and pros and

00:03:59,490 --> 00:04:02,360
cons and so on

00:04:03,470 --> 00:04:08,790
I've also written I've also have a site

00:04:06,270 --> 00:04:12,959
where I've written and I'm writing a

00:04:08,790 --> 00:04:14,790
series of articles covering these

00:04:12,959 --> 00:04:17,459
projects that I'm talking about here but

00:04:14,790 --> 00:04:19,769
more hands-on where I'm also providing

00:04:17,459 --> 00:04:23,610
tutorials for how to use them on or get

00:04:19,769 --> 00:04:27,750
started on their reference boards so if

00:04:23,610 --> 00:04:30,990
you're interested take a look our plan

00:04:27,750 --> 00:04:33,480
is to get straight to it meander is an

00:04:30,990 --> 00:04:37,410
end-to-end open source updater for

00:04:33,480 --> 00:04:39,630
connected devices and mender is an

00:04:37,410 --> 00:04:42,600
end-to-end solution that is open source

00:04:39,630 --> 00:04:44,790
that is you have a mender client that

00:04:42,600 --> 00:04:48,260
runs on your device and there is a

00:04:44,790 --> 00:04:51,260
server component that's also open source

00:04:48,260 --> 00:04:56,270
that where you can manage your devices

00:04:51,260 --> 00:04:59,190
deployments but the key takeaway here is

00:04:56,270 --> 00:05:02,750
from an integration point is that the

00:04:59,190 --> 00:05:08,550
vendor uses symmetric a be image updates

00:05:02,750 --> 00:05:10,169
which I will talk about a bit more so if

00:05:08,550 --> 00:05:13,860
you go into the requirements that are

00:05:10,169 --> 00:05:15,470
required by mender and requires the to

00:05:13,860 --> 00:05:17,430
your run you boot as a boot loader

00:05:15,470 --> 00:05:19,770
that's the only bootloader that

00:05:17,430 --> 00:05:21,479
supported supported at the moment I know

00:05:19,770 --> 00:05:25,470
that they are looking at expanding that

00:05:21,479 --> 00:05:27,510
but but they rely on some features in

00:05:25,470 --> 00:05:30,670
boot even the bootloader to do the

00:05:27,510 --> 00:05:30,670
[Music]

00:05:30,750 --> 00:05:39,990
root filesystem switching yeah there's a

00:05:38,010 --> 00:05:42,420
future we would call boot count em and

00:05:39,990 --> 00:05:47,250
boot can't limit and that they rely on

00:05:42,420 --> 00:05:48,630
and that's basically a counter that's in

00:05:47,250 --> 00:05:50,150
the environment it with your arm and

00:05:48,630 --> 00:05:54,240
that needs to be reset

00:05:50,150 --> 00:05:57,030
once the device boots if it doesn't you

00:05:54,240 --> 00:05:59,250
have an alternative boot command that

00:05:57,030 --> 00:06:02,130
you can like if you have a failed boot

00:05:59,250 --> 00:06:06,090
you can do something else say amanda

00:06:02,130 --> 00:06:08,820
utilizes this and your you boot must

00:06:06,090 --> 00:06:11,460
support this and this is post 2014 i

00:06:08,820 --> 00:06:13,440
think it would you need to store the

00:06:11,460 --> 00:06:15,030
persistence persistent storage of your

00:06:13,440 --> 00:06:17,310
boot environment so it has to be stored

00:06:15,030 --> 00:06:19,800
on the MMC or in a flash and it has to

00:06:17,310 --> 00:06:24,000
be permanently stored so not in iran

00:06:19,800 --> 00:06:27,660
where it's volatile and also relies on a

00:06:24,000 --> 00:06:30,419
set of tools if we set and and and get

00:06:27,660 --> 00:06:34,710
em which are using user space tools to

00:06:30,419 --> 00:06:36,780
manipulate the you boot environment and

00:06:34,710 --> 00:06:38,460
i'm measure and as I mentioned it is a

00:06:36,780 --> 00:06:41,850
requirement that you have two partitions

00:06:38,460 --> 00:06:44,790
for your root file system because mender

00:06:41,850 --> 00:06:48,600
does and the thing is that you have one

00:06:44,790 --> 00:06:51,180
active root repetition and what in

00:06:48,600 --> 00:06:54,510
inactive so when you update you update a

00:06:51,180 --> 00:06:57,210
inactive on reboot and switch so to say

00:06:54,510 --> 00:07:01,620
and that way you can always roll back to

00:06:57,210 --> 00:07:06,600
the previous if them the 10 that one

00:07:01,620 --> 00:07:08,760
doesn't work properly and also requires

00:07:06,600 --> 00:07:11,910
one petition for the status persistent

00:07:08,760 --> 00:07:15,500
storage where it will store some logs of

00:07:11,910 --> 00:07:20,160
the log events of the update procedure

00:07:15,500 --> 00:07:24,290
and when there are only runs on emmc SSD

00:07:20,160 --> 00:07:24,290
courts and UV volumes

00:07:27,050 --> 00:07:34,020
and I'm gonna start working on how to

00:07:29,819 --> 00:07:35,699
integrate member its heavily focused as

00:07:34,020 --> 00:07:37,949
as I measured all this browser project

00:07:35,699 --> 00:07:41,669
are focused on Yocto optimized a

00:07:37,949 --> 00:07:45,809
seamless integration there is an option

00:07:41,669 --> 00:07:48,599
to wrote there is on its way I think or

00:07:45,809 --> 00:07:52,529
maybe our upstream in build route memory

00:07:48,599 --> 00:07:54,449
support as well but there's a meta

00:07:52,529 --> 00:07:56,309
mender layer which is a collection of

00:07:54,449 --> 00:07:58,919
layers so you have a meta man record

00:07:56,309 --> 00:08:03,659
then you have some meta member raspberry

00:07:58,919 --> 00:08:05,990
pi meta mentor demo which are metal and

00:08:03,659 --> 00:08:08,580
raspberry pi is the board specific one

00:08:05,990 --> 00:08:11,099
and what you normally want to do is

00:08:08,580 --> 00:08:12,870
include maymay time and the core and

00:08:11,099 --> 00:08:15,719
then you have to inherit meander class

00:08:12,870 --> 00:08:17,159
which is the manifold which will bring

00:08:15,719 --> 00:08:21,449
you all the features that the member

00:08:17,159 --> 00:08:23,550
offers so to say and if you're lucky

00:08:21,449 --> 00:08:27,089
that's all you need to do because Mendel

00:08:23,550 --> 00:08:29,969
now they support fully automatic you

00:08:27,089 --> 00:08:33,419
boot patching so they try to automate

00:08:29,969 --> 00:08:34,800
the integration to your custom board but

00:08:33,419 --> 00:08:37,199
this does have some require and

00:08:34,800 --> 00:08:40,279
requirements so you have to run this is

00:08:37,199 --> 00:08:43,680
only supported on the Rocco Yocto branch

00:08:40,279 --> 00:08:45,839
you'll probably need to have something a

00:08:43,680 --> 00:08:48,990
recent you boot for this to work and

00:08:45,839 --> 00:08:54,449
this war only works on emmc SD card

00:08:48,990 --> 00:08:59,149
layouts and the output from meta member

00:08:54,449 --> 00:09:01,380
when you build you get an SSD disk image

00:08:59,149 --> 00:09:04,199
which is the image that you used to

00:09:01,380 --> 00:09:05,940
provision your devices so we take an

00:09:04,199 --> 00:09:08,850
image that contains all the petitions

00:09:05,940 --> 00:09:12,300
that are required from members so this

00:09:08,850 --> 00:09:14,810
is provided and the dot member file is a

00:09:12,300 --> 00:09:20,819
mentor artifact this is what you give to

00:09:14,810 --> 00:09:23,850
the client to update the devices but

00:09:20,819 --> 00:09:26,910
it's basically a tour archive containing

00:09:23,850 --> 00:09:31,530
a binary root filesystem

00:09:26,910 --> 00:09:33,150
with some metadata on top of it but if

00:09:31,530 --> 00:09:36,180
we take a closer look this automatically

00:09:33,150 --> 00:09:38,100
boot patching if that fails because it

00:09:36,180 --> 00:09:39,300
doesn't work on our boards you still

00:09:38,100 --> 00:09:42,480
have to do it then you have to do it

00:09:39,300 --> 00:09:44,010
manually and the main integration point

00:09:42,480 --> 00:09:48,240
Remender is you need to make some

00:09:44,010 --> 00:09:50,640
changes enabled so there are two patches

00:09:48,240 --> 00:09:55,290
that our board independent that mentor

00:09:50,640 --> 00:09:57,990
carries that you need to apply to your

00:09:55,290 --> 00:10:00,630
new boot and this is basically a set of

00:09:57,990 --> 00:10:03,030
variables and scripts and commands that

00:10:00,630 --> 00:10:06,570
are defined by the board in independent

00:10:03,030 --> 00:10:08,700
patches there is a and then you have to

00:10:06,570 --> 00:10:13,050
provide one board specific patch and

00:10:08,700 --> 00:10:15,510
that means integrating the generic

00:10:13,050 --> 00:10:18,450
mender commands in your custom board

00:10:15,510 --> 00:10:19,830
boot commands so to say and you also may

00:10:18,450 --> 00:10:23,880
have to make sure that you have the boot

00:10:19,830 --> 00:10:25,680
count end and limit enabled and you have

00:10:23,880 --> 00:10:29,130
to make sure that boot time options like

00:10:25,680 --> 00:10:31,950
is in MMC or flash the story is

00:10:29,130 --> 00:10:34,850
permanently but if you take a look

00:10:31,950 --> 00:10:38,010
closer look this is normally what our

00:10:34,850 --> 00:10:40,620
integration custom integration layer

00:10:38,010 --> 00:10:45,120
looks like so it's basically one patch

00:10:40,620 --> 00:10:46,740
and a baby up low BB appends this is

00:10:45,120 --> 00:10:48,780
actually removed met Amanda bigger Boone

00:10:46,740 --> 00:10:51,090
doesn't exist in the recent releases

00:10:48,780 --> 00:10:54,470
because they automatic cube especially

00:10:51,090 --> 00:10:54,470
patching takes care of this

00:11:00,829 --> 00:11:09,529
and for yeah for the cult for custom you

00:11:05,629 --> 00:11:12,319
boot Forks you have to include to make

00:11:09,529 --> 00:11:14,660
sure to include mender specific include

00:11:12,319 --> 00:11:19,160
files to get the board independent

00:11:14,660 --> 00:11:21,949
patches because they normally work only

00:11:19,160 --> 00:11:24,230
on upstream new boots so if you have our

00:11:21,949 --> 00:11:29,299
custom you would fork you have to have

00:11:24,230 --> 00:11:31,899
custom vbi pens as well but if you take

00:11:29,299 --> 00:11:35,480
take a look at what the actual patch

00:11:31,899 --> 00:11:37,910
looks like and the changes that are

00:11:35,480 --> 00:11:41,029
required so basically it's just changing

00:11:37,910 --> 00:11:43,639
if you have a the boot command in new

00:11:41,029 --> 00:11:46,689
boots like Ron MMC boot so you have to

00:11:43,639 --> 00:11:50,179
prepend that which mender setup and

00:11:46,689 --> 00:11:53,529
append to our recovery and the tri

00:11:50,179 --> 00:11:56,059
recovery is in case of MMC boot fails

00:11:53,529 --> 00:12:03,709
it's gonna run some script trying to

00:11:56,059 --> 00:12:06,549
like roll back to previous image and one

00:12:03,709 --> 00:12:10,459
has to remove all horror hard coded

00:12:06,549 --> 00:12:14,389
parts of the MMC and there are specific

00:12:10,459 --> 00:12:18,259
vendor variables and and this is what

00:12:14,389 --> 00:12:21,049
the member setup script actually sets up

00:12:18,259 --> 00:12:23,720
these member variables because we have a

00:12:21,049 --> 00:12:26,720
dynamic root filesystem

00:12:23,720 --> 00:12:29,110
it's either A or B so we have to have

00:12:26,720 --> 00:12:36,139
some way to switching with between them

00:12:29,110 --> 00:12:40,579
and that's basically it for the

00:12:36,139 --> 00:12:42,709
integration of member that's needed and

00:12:40,579 --> 00:12:46,369
they do provide a protect sensitive but

00:12:42,709 --> 00:12:47,269
a checklist that you go through to make

00:12:46,369 --> 00:12:50,779
sure that you've done all the

00:12:47,269 --> 00:12:57,709
integration points but that should get

00:12:50,779 --> 00:13:02,829
you a overview of it and the next

00:12:57,709 --> 00:13:02,829
project is called libris tree

00:13:02,929 --> 00:13:08,189
mostly explained well described as get

00:13:06,059 --> 00:13:11,899
for operating system binaries because it

00:13:08,189 --> 00:13:14,399
has a very get like command interface

00:13:11,899 --> 00:13:17,489
and the key takeaway from this one is

00:13:14,399 --> 00:13:20,999
that it does image of updates but binary

00:13:17,489 --> 00:13:23,339
Delta's so it applies a binary differs

00:13:20,999 --> 00:13:29,249
instead of because Mendel does for

00:13:23,339 --> 00:13:34,199
example full image updates libbed Westry

00:13:29,249 --> 00:13:35,970
is able to do Delta binary digits and

00:13:34,199 --> 00:13:40,379
some of the requirements because

00:13:35,970 --> 00:13:42,360
liberals tree doesn't really require a

00:13:40,379 --> 00:13:47,040
specific partition table you have one

00:13:42,360 --> 00:13:49,259
partition for your virtual system but it

00:13:47,040 --> 00:13:51,329
so and table but the only real

00:13:49,259 --> 00:13:53,069
requirement is hard links that your file

00:13:51,329 --> 00:13:56,489
system supports highly hard links

00:13:53,069 --> 00:14:00,959
because that's how it does the Delta

00:13:56,489 --> 00:14:03,209
thing but there are some requirements or

00:14:00,959 --> 00:14:04,559
what sort of say in when you use libris

00:14:03,209 --> 00:14:08,600
tree you never boot off physical route

00:14:04,559 --> 00:14:08,600
service so you have to boot or arm disk

00:14:09,649 --> 00:14:14,429
that will set up the physical root

00:14:12,509 --> 00:14:19,889
filesystem and then do what Shay wrote

00:14:14,429 --> 00:14:21,989
change route into the physical see the

00:14:19,889 --> 00:14:25,919
boys tree everything that's management

00:14:21,989 --> 00:14:29,220
in by libris tree is in slash user so

00:14:25,919 --> 00:14:31,499
you can't you can't have files outside

00:14:29,220 --> 00:14:35,790
user that that you want to match with

00:14:31,499 --> 00:14:37,290
manage with Louise tree and you slash

00:14:35,790 --> 00:14:42,600
user is mounted read-only

00:14:37,290 --> 00:14:46,470
that's requirement from it and Lee boys

00:14:42,600 --> 00:14:48,779
she also said has a yeah they had it has

00:14:46,470 --> 00:14:51,329
basically three cattle directories that

00:14:48,779 --> 00:14:53,759
are special it slash user slash war is

00:14:51,329 --> 00:14:55,410
the persistent state so everything that

00:14:53,759 --> 00:14:57,839
you want to keep you write the slash war

00:14:55,410 --> 00:15:03,329
because live wesley won't touch that and

00:14:57,839 --> 00:15:05,699
then you have /dt see that i would talk

00:15:03,329 --> 00:15:07,679
about a bit later but generally live

00:15:05,699 --> 00:15:09,929
Westry it's quite complex to set up

00:15:07,679 --> 00:15:11,279
because because of these requirements

00:15:09,929 --> 00:15:14,029
that it has that you have to have

00:15:11,279 --> 00:15:14,029
everything in user

00:15:14,930 --> 00:15:21,959
which brings on some complete complexity

00:15:18,120 --> 00:15:23,399
and that we are not used to really but

00:15:21,959 --> 00:15:27,029
thankfully there is there is actually a

00:15:23,399 --> 00:15:29,610
Yocto layer called meta updater that

00:15:27,029 --> 00:15:32,730
does all the hard work for you like does

00:15:29,610 --> 00:15:34,889
the make sure that it let you move

00:15:32,730 --> 00:15:37,610
everything to slash user and make sure

00:15:34,889 --> 00:15:40,649
that you have get the client on onboard

00:15:37,610 --> 00:15:43,980
attack updater actually comes from a

00:15:40,649 --> 00:15:48,540
project called Geneva where they

00:15:43,980 --> 00:15:50,399
developed because there is a client

00:15:48,540 --> 00:15:51,990
called actual riser which is able to

00:15:50,399 --> 00:15:55,440
communicate with the server back-end as

00:15:51,990 --> 00:15:57,449
well but you can use meta updater in a

00:15:55,440 --> 00:16:03,589
standalone node if you want to integrate

00:15:57,449 --> 00:16:07,519
Lupo a stirry basically so it's simply

00:16:03,589 --> 00:16:14,490
including meta updater in your VB layers

00:16:07,519 --> 00:16:17,399
then you have to inherit suta what you

00:16:14,490 --> 00:16:20,250
also get from the meta updater your as

00:16:17,399 --> 00:16:22,439
output is you get a ROM disk image that

00:16:20,250 --> 00:16:24,930
you need to boot that will do the setup

00:16:22,439 --> 00:16:28,470
of the libros three physical side and

00:16:24,930 --> 00:16:30,209
change route to change route into it so

00:16:28,470 --> 00:16:34,759
you get that as output basically we

00:16:30,209 --> 00:16:36,779
don't touch them to anything and you get

00:16:34,759 --> 00:16:39,630
deployments is route which is quite

00:16:36,779 --> 00:16:42,630
quite important so every time you do our

00:16:39,630 --> 00:16:45,000
Yocto build it will do commit your

00:16:42,630 --> 00:16:47,100
changes so to say because libo essary

00:16:45,000 --> 00:16:48,689
does Delta updates you need to keep

00:16:47,100 --> 00:16:52,500
track of all the changes that are being

00:16:48,689 --> 00:16:56,220
done all the time so by using it updater

00:16:52,500 --> 00:16:58,620
to set up repository for you which

00:16:56,220 --> 00:17:00,490
already done use to deploy to your

00:16:58,620 --> 00:17:02,380
device

00:17:00,490 --> 00:17:05,990
[Music]

00:17:02,380 --> 00:17:09,380
integration point is really simple

00:17:05,990 --> 00:17:12,560
really all you have to do is make sure

00:17:09,380 --> 00:17:16,100
that your board boots their arm disc

00:17:12,560 --> 00:17:17,839
that is provided by met updater and then

00:17:16,100 --> 00:17:20,870
the rhombus takes over and does all the

00:17:17,839 --> 00:17:24,530
setup which is board independent so to

00:17:20,870 --> 00:17:27,560
say so this is an example script from

00:17:24,530 --> 00:17:32,660
they have a Raspberry Pi as a reference

00:17:27,560 --> 00:17:35,330
board and this is what the integration

00:17:32,660 --> 00:17:37,190
script looks like and the only parts

00:17:35,330 --> 00:17:40,310
that are involved there or basically

00:17:37,190 --> 00:17:43,490
Westry specific there are things are

00:17:40,310 --> 00:17:46,660
generic things that you need to boot a

00:17:43,490 --> 00:17:49,949
Linux system from B to build

00:17:46,660 --> 00:17:49,949
[Music]

00:17:54,600 --> 00:17:59,820
and yeah did I want show me something

00:17:56,909 --> 00:18:01,590
more here please interrupt me with

00:17:59,820 --> 00:18:08,009
questions along the way I forgot to say

00:18:01,590 --> 00:18:10,380
that so please if you have anything yeah

00:18:08,009 --> 00:18:12,990
and you have you have to also think

00:18:10,380 --> 00:18:15,419
about these three specific directories

00:18:12,990 --> 00:18:19,049
which doing impact have impact on your

00:18:15,419 --> 00:18:21,389
system that design actually more and

00:18:19,049 --> 00:18:23,309
this is written the the hard part I

00:18:21,389 --> 00:18:28,350
guess of integrating libres tree that

00:18:23,309 --> 00:18:34,139
you have to but we are restricted in

00:18:28,350 --> 00:18:36,389
this matter so to say and slash war is

00:18:34,139 --> 00:18:38,370
empty by default so if you want to have

00:18:36,389 --> 00:18:40,529
anything there at build time you have to

00:18:38,370 --> 00:18:42,950
make sure that you get something

00:18:40,529 --> 00:18:42,950
installed

00:18:45,250 --> 00:18:56,570
yeah and jumping on to the next one s u

00:18:51,440 --> 00:18:58,130
sv w update it's a linux update agent

00:18:56,570 --> 00:19:00,490
with the goal to provide an efficient a

00:18:58,130 --> 00:19:03,290
safe way to update them by the system's

00:19:00,490 --> 00:19:06,020
so this one is a bit different from the

00:19:03,290 --> 00:19:09,440
previous two that I covered because this

00:19:06,020 --> 00:19:12,920
project aims to be a framework and a set

00:19:09,440 --> 00:19:15,020
of tools more well meander and meta

00:19:12,920 --> 00:19:19,400
update there are more out-of-the-box

00:19:15,020 --> 00:19:21,950
solutions but this project insisted like

00:19:19,400 --> 00:19:23,960
you're given a bunch of tools to update

00:19:21,950 --> 00:19:27,290
systems but there's not three nothing

00:19:23,960 --> 00:19:28,850
really there's no restrictions there's

00:19:27,290 --> 00:19:31,960
no requirement you can basically do

00:19:28,850 --> 00:19:34,100
anything with it but that also like

00:19:31,960 --> 00:19:36,830
makes the integration harder because

00:19:34,100 --> 00:19:39,140
well you have to design your update

00:19:36,830 --> 00:19:44,030
system you're only given the tools to

00:19:39,140 --> 00:19:46,100
execute it by this project and that this

00:19:44,030 --> 00:19:50,540
makes it a bit harder to provide really

00:19:46,100 --> 00:19:55,190
insights how you can integrate it but

00:19:50,540 --> 00:20:01,370
they do have some starting points so

00:19:55,190 --> 00:20:03,380
there is a Metis SV update layer where

00:20:01,370 --> 00:20:06,110
you get there's a client running on your

00:20:03,380 --> 00:20:11,570
device so you have the recipe for the

00:20:06,110 --> 00:20:15,620
client it will also some recipes for a

00:20:11,570 --> 00:20:19,340
recovery wess image and there is a

00:20:15,620 --> 00:20:23,300
software update baby class that enables

00:20:19,340 --> 00:20:26,540
you to build images that software update

00:20:23,300 --> 00:20:28,160
understands basically and then there's a

00:20:26,540 --> 00:20:31,340
submitter software update boards which

00:20:28,160 --> 00:20:33,940
is sort of a reference implementation so

00:20:31,340 --> 00:20:36,800
on having integrate with software plate

00:20:33,940 --> 00:20:38,600
and there's three boards the supported

00:20:36,800 --> 00:20:43,240
at the moment it's big big bone black

00:20:38,600 --> 00:20:43,240
raspberry pi three and one double

00:20:43,270 --> 00:20:49,090
and all the examples here is also

00:20:46,210 --> 00:20:52,200
symmetric a/b updates that they have in

00:20:49,090 --> 00:20:52,200
meta software Awards

00:20:56,840 --> 00:21:00,740
and the integration is really through

00:20:58,850 --> 00:21:03,139
the software description files that

00:21:00,740 --> 00:21:06,909
software update has so it's a simple

00:21:03,139 --> 00:21:10,730
text file based on Lib config syntax

00:21:06,909 --> 00:21:14,090
where we have different Landers and toss

00:21:10,730 --> 00:21:16,159
that you can execute and if you if we

00:21:14,090 --> 00:21:19,999
look at the example image this is the

00:21:16,159 --> 00:21:24,999
bigger bone black image that's part of

00:21:19,999 --> 00:21:28,220
made our software update boards this is

00:21:24,999 --> 00:21:32,269
what it looks like so it says it has a

00:21:28,220 --> 00:21:34,940
copy one and a copy too but if you look

00:21:32,269 --> 00:21:38,480
closer of these what the copies contains

00:21:34,940 --> 00:21:41,480
so they contain an image a container

00:21:38,480 --> 00:21:45,919
script and now you would comment and the

00:21:41,480 --> 00:21:49,249
image is basically at our archive where

00:21:45,919 --> 00:21:51,139
do you want to install one packet and

00:21:49,249 --> 00:21:53,629
this is it like software update on

00:21:51,139 --> 00:21:57,590
standard stands this syntax and execute

00:21:53,629 --> 00:22:01,490
it there's also a script in this

00:21:57,590 --> 00:22:04,850
particular setup that is run before the

00:22:01,490 --> 00:22:09,679
update and software update supports Lua

00:22:04,850 --> 00:22:13,369
scripts and this particular script

00:22:09,679 --> 00:22:15,679
actually partitions the SD card so you

00:22:13,369 --> 00:22:19,789
have if you don't have two partitions it

00:22:15,679 --> 00:22:21,799
will create one extra the first time you

00:22:19,789 --> 00:22:25,039
do an update and that's why the script

00:22:21,799 --> 00:22:26,629
is there and then in the you build it

00:22:25,039 --> 00:22:30,409
would come on that's by basically the

00:22:26,629 --> 00:22:34,129
integration point here because they need

00:22:30,409 --> 00:22:37,009
to set which which part we are going to

00:22:34,129 --> 00:22:40,389
vote from and this is done here and

00:22:37,009 --> 00:22:42,620
basically overrides the boot come on

00:22:40,389 --> 00:22:45,919
with the new part

00:22:42,620 --> 00:22:48,749
[Music]

00:22:45,919 --> 00:22:51,570
and this is it's it's a quite good

00:22:48,749 --> 00:22:53,039
starting point I would also like to

00:22:51,570 --> 00:22:56,090
mention that there's a talk today I

00:22:53,039 --> 00:22:58,529
think it's around 3:00 where they

00:22:56,090 --> 00:23:02,070
explain a bit the possibilities of

00:22:58,529 --> 00:23:04,889
software update but what they have done

00:23:02,070 --> 00:23:08,330
with it so to say so if you're

00:23:04,889 --> 00:23:12,899
interested you can go to that as well

00:23:08,330 --> 00:23:15,479
then we have resonator which is not a

00:23:12,899 --> 00:23:21,299
simple updater compared to the previous

00:23:15,479 --> 00:23:26,340
three that we just had resin IO is a new

00:23:21,299 --> 00:23:28,169
workflow or a new yeah it's a new

00:23:26,340 --> 00:23:30,899
workflow for embedded system basically

00:23:28,169 --> 00:23:38,909
so it's a way of running apps in

00:23:30,899 --> 00:23:41,070
containers on embedded devices so and

00:23:38,909 --> 00:23:44,330
they have actually two different kind of

00:23:41,070 --> 00:23:47,460
updates in resin because they run

00:23:44,330 --> 00:23:50,989
applications in containers they can

00:23:47,460 --> 00:23:54,269
utilize the layering

00:23:50,989 --> 00:23:58,799
feature of container technology to

00:23:54,269 --> 00:24:01,139
update binaries Delta's basically but if

00:23:58,799 --> 00:24:04,049
you want to update the operating system

00:24:01,139 --> 00:24:06,809
underlying and container applications

00:24:04,049 --> 00:24:11,249
they are deploy also a B strategy

00:24:06,809 --> 00:24:14,720
strategy and in that case you don't have

00:24:11,249 --> 00:24:18,619
any Delta updates it's just full image

00:24:14,720 --> 00:24:18,619
for the operating system

00:24:19,309 --> 00:24:26,280
and resonate works with u-boot and group

00:24:23,330 --> 00:24:27,030
and it's usually done with update hooks

00:24:26,280 --> 00:24:32,040
in userspace

00:24:27,030 --> 00:24:34,020
where they have already have the

00:24:32,040 --> 00:24:37,890
variable that says okay I want to boot

00:24:34,020 --> 00:24:42,660
from Part A or Part B is in these text

00:24:37,890 --> 00:24:45,720
files basically and you boot and imports

00:24:42,660 --> 00:24:51,630
these files or grab to determine which

00:24:45,720 --> 00:24:53,250
device which part of the boot but to be

00:24:51,630 --> 00:24:55,920
able to use resin you have to integrate

00:24:53,250 --> 00:24:57,720
resin wares which is an octuple base to

00:24:55,920 --> 00:24:59,250
the distribution so it's a full

00:24:57,720 --> 00:25:02,660
distribution that you have to integrate

00:24:59,250 --> 00:25:07,520
on your device and not just a updater

00:25:02,660 --> 00:25:10,770
because really this is a new concept but

00:25:07,520 --> 00:25:12,390
it also has dual root filesystem parts

00:25:10,770 --> 00:25:14,700
and then they have three extra

00:25:12,390 --> 00:25:19,550
persistent parts that you written have

00:25:14,700 --> 00:25:22,050
to reserve for the resin i/o resin with

00:25:19,550 --> 00:25:26,340
from what I understand they only support

00:25:22,050 --> 00:25:33,690
MMC and SD cards so I haven't seen any

00:25:26,340 --> 00:25:35,520
non support or UB support and how to

00:25:33,690 --> 00:25:37,590
integrate there is a metal resin layer

00:25:35,520 --> 00:25:41,340
which is the starting point for the

00:25:37,590 --> 00:25:46,590
resin Wes I will not talk too much about

00:25:41,340 --> 00:25:48,480
NPM just but what you need you have to

00:25:46,590 --> 00:25:50,610
include meta resin and then you have you

00:25:48,480 --> 00:25:55,050
have create a custom board custom board

00:25:50,610 --> 00:25:59,250
layer but key takeaways is that you have

00:25:55,050 --> 00:26:01,380
to inherits of resin Ubud and inherit

00:25:59,250 --> 00:26:03,900
kennel resin which will do a lot of

00:26:01,380 --> 00:26:05,700
configure can arise in at least does a

00:26:03,900 --> 00:26:09,179
lot of configuration of the kennel

00:26:05,700 --> 00:26:11,670
current Linux kernel to support

00:26:09,179 --> 00:26:14,880
container technology they have a lot of

00:26:11,670 --> 00:26:16,630
requirements for that so you basically

00:26:14,880 --> 00:26:18,490
add inherits and

00:26:16,630 --> 00:26:20,680
then they should take it take care of

00:26:18,490 --> 00:26:22,330
that and you also need to provide an

00:26:20,680 --> 00:26:28,870
update hook which is about script

00:26:22,330 --> 00:26:31,090
basically in your custom layer but if we

00:26:28,870 --> 00:26:34,870
take a closer look for the operating

00:26:31,090 --> 00:26:36,880
system updates which is the a/b strategy

00:26:34,870 --> 00:26:39,520
this is very similar to how Mendel does

00:26:36,880 --> 00:26:42,610
it basically they have three patches

00:26:39,520 --> 00:26:45,490
that are board independent and that are

00:26:42,610 --> 00:26:47,610
applied to your boot and this is a set

00:26:45,490 --> 00:26:50,380
of very important scripts and commands

00:26:47,610 --> 00:26:52,630
and then you need to provide a board

00:26:50,380 --> 00:26:55,270
specific patch to integrate in a similar

00:26:52,630 --> 00:26:57,310
fashion like in member to call these

00:26:55,270 --> 00:26:59,860
resin are your specific commands in your

00:26:57,310 --> 00:27:02,430
boot boot flow they also have a

00:26:59,860 --> 00:27:10,570
dependency on command port and partition

00:27:02,430 --> 00:27:12,610
IDs and unlike men remember the mineral

00:27:10,570 --> 00:27:14,920
Manderlay relies on the you boots for

00:27:12,610 --> 00:27:17,040
very tails to write to the u-boot

00:27:14,920 --> 00:27:19,180
environment where they have the

00:27:17,040 --> 00:27:22,800
Department of variable it says which is

00:27:19,180 --> 00:27:25,180
the active part in resin they have a

00:27:22,800 --> 00:27:29,080
text file in the boot partition instead

00:27:25,180 --> 00:27:32,820
which is important so there's no

00:27:29,080 --> 00:27:32,820
requirement to have foreign very details

00:27:33,420 --> 00:27:38,590
and if we take a look at the exact

00:27:36,070 --> 00:27:43,600
example patch this is for writing from

00:27:38,590 --> 00:27:46,750
the very sighted or sixty well board how

00:27:43,600 --> 00:27:49,390
do what the patch does so it basically

00:27:46,750 --> 00:27:52,780
removes all the hard-coded stuff like we

00:27:49,390 --> 00:27:55,810
did in like Amanda does it and replace

00:27:52,780 --> 00:28:01,630
it with resume or pressing specific

00:27:55,810 --> 00:28:04,960
variables and you also have there's only

00:28:01,630 --> 00:28:08,290
a prepend in this case to the boot

00:28:04,960 --> 00:28:11,160
command so they don't have a upend the

00:28:08,290 --> 00:28:11,160
choice to recover

00:28:11,660 --> 00:28:16,789
in this particular case and this is

00:28:14,750 --> 00:28:22,130
basically they use some resin or

00:28:16,789 --> 00:28:24,700
specific variables to set up what table

00:28:22,130 --> 00:28:24,700
basically

00:28:32,740 --> 00:28:41,559
yeah and I wanted to mention a bit about

00:28:39,690 --> 00:28:45,010
initially I'd ever high ambition

00:28:41,559 --> 00:28:47,500
uncovering very more projects and robach

00:28:45,010 --> 00:28:50,940
trout was one of them I was planning on

00:28:47,500 --> 00:28:53,440
also looking out to integrate that but

00:28:50,940 --> 00:28:57,460
kind of fell out because I didn't have

00:28:53,440 --> 00:29:01,240
time to prepare it but also I tried

00:28:57,460 --> 00:29:04,149
looking at it a bit they have a meta

00:29:01,240 --> 00:29:08,110
route layer but that only integrates the

00:29:04,149 --> 00:29:11,980
client side of it or and you have to get

00:29:08,110 --> 00:29:13,350
artefactual as well but I couldn't

00:29:11,980 --> 00:29:16,600
really find any reference

00:29:13,350 --> 00:29:19,110
implementations on how to integrate but

00:29:16,600 --> 00:29:22,419
Rock is very similar to software update

00:29:19,110 --> 00:29:24,669
because it's also a tool or a framework

00:29:22,419 --> 00:29:27,179
to enable software updates and advices

00:29:24,669 --> 00:29:29,620
so it's not a lot of the box solution

00:29:27,179 --> 00:29:33,789
and then there is something called as

00:29:29,620 --> 00:29:37,320
fewer SW you up d which is also software

00:29:33,789 --> 00:29:39,210
update pronounce it yes

00:29:37,320 --> 00:29:42,509
there is a meta software update layer

00:29:39,210 --> 00:29:43,080
but this is not my understanding used at

00:29:42,509 --> 00:29:46,500
much

00:29:43,080 --> 00:29:53,100
I am truly to use it in many of my

00:29:46,500 --> 00:29:57,350
projects at least and yeah I'm with the

00:29:53,100 --> 00:30:00,029
summary already so yeah and these open

00:29:57,350 --> 00:30:00,899
proper source projects have been there

00:30:00,029 --> 00:30:04,139
for a while

00:30:00,899 --> 00:30:11,789
most of them which makes them proven and

00:30:04,139 --> 00:30:13,559
battle-tested and and there is it's

00:30:11,789 --> 00:30:15,539
really a seamless integration if you are

00:30:13,559 --> 00:30:17,309
using your toe it's of course tougher if

00:30:15,539 --> 00:30:19,919
you don't use your toe or want to

00:30:17,309 --> 00:30:22,649
integrate with build root and or

00:30:19,919 --> 00:30:25,679
manually integrate it on a Debian system

00:30:22,649 --> 00:30:28,769
or something like that but if you are

00:30:25,679 --> 00:30:30,480
using your toe it's basically including

00:30:28,769 --> 00:30:33,480
some meta layers and providing a patch

00:30:30,480 --> 00:30:35,610
and then you're done in most of this and

00:30:33,480 --> 00:30:38,610
that is why there is no reason to really

00:30:35,610 --> 00:30:41,220
go home design your own systems or go

00:30:38,610 --> 00:30:43,019
home grown completely and instead we can

00:30:41,220 --> 00:30:45,299
collaborate on these projects that are

00:30:43,019 --> 00:30:51,160
existing and build upon them and improve

00:30:45,299 --> 00:30:54,319
them so the same ya questions

00:30:51,160 --> 00:30:54,319
[Music]

00:31:10,470 --> 00:31:13,720
[Music]

00:31:15,440 --> 00:31:23,190
yeah I'm not familiar that anyone really

00:31:19,620 --> 00:31:25,920
solves their up update beside resin

00:31:23,190 --> 00:31:27,530
because they have focused on that all

00:31:25,920 --> 00:31:31,050
the ones that I mentioned are really

00:31:27,530 --> 00:31:33,690
image based so full system updates

00:31:31,050 --> 00:31:36,840
basically and like you mentioned invoice

00:31:33,690 --> 00:31:40,280
tree does apply Delta's but you have to

00:31:36,840 --> 00:31:42,750
reboot flat back I'm not sure I'm very

00:31:40,280 --> 00:31:47,690
familiar with purple tiger I'm not sure

00:31:42,750 --> 00:31:47,690
how to use libris tree

00:31:55,210 --> 00:31:58,440
no problem

00:32:00,610 --> 00:32:03,780
[Music]

00:32:15,350 --> 00:32:20,970
well a B copies are order is the most

00:32:18,710 --> 00:32:24,659
robust solution

00:32:20,970 --> 00:32:26,220
in my opinion and if you are able to

00:32:24,659 --> 00:32:30,059
have two copies of the root filesystem

00:32:26,220 --> 00:32:31,169
because in some cases you can't can't

00:32:30,059 --> 00:32:34,739
physically have it because you don't

00:32:31,169 --> 00:32:36,690
have the class for it so to say but if

00:32:34,739 --> 00:32:40,080
you can I don't see really really see a

00:32:36,690 --> 00:32:42,919
better and more robust option to do

00:32:40,080 --> 00:32:42,919
deploy updates

00:32:43,480 --> 00:32:46,599
[Music]

00:32:50,879 --> 00:32:56,429
I haven't actually deployed libris tree

00:32:53,190 --> 00:32:58,259
in a really harsh production environment

00:32:56,429 --> 00:33:02,399
to really get that feedback if it's

00:32:58,259 --> 00:33:05,220
really resilient but by nature the Boise

00:33:02,399 --> 00:33:07,519
tree relies on the hardware and the

00:33:05,220 --> 00:33:11,489
drivers in the file system to handle

00:33:07,519 --> 00:33:14,700
atomicity atomic updates so it relies on

00:33:11,489 --> 00:33:17,429
darden that underlying layers and to be

00:33:14,700 --> 00:33:19,979
resilient to power loss or stuff like

00:33:17,429 --> 00:33:23,460
that which you don't really have when

00:33:19,979 --> 00:33:27,139
you do an a/b update then you kinda

00:33:23,460 --> 00:33:27,139
limonade a bit of the hardware issues

00:33:38,410 --> 00:33:43,930
yeah because it's itself complete Oh

00:33:41,760 --> 00:33:45,480
operating system that you have to

00:33:43,930 --> 00:33:50,200
integrate to be able to use the

00:33:45,480 --> 00:33:53,470
container Delta's so you have to have a

00:33:50,200 --> 00:33:55,750
container I know they have a embedded

00:33:53,470 --> 00:33:57,160
one where we are variant I think they

00:33:55,750 --> 00:34:00,940
started out with docker but they have uh

00:33:57,160 --> 00:34:07,470
something called ballina yeah that they

00:34:00,940 --> 00:34:07,470
use but it still I don't know

00:34:07,790 --> 00:34:10,840
[Music]

00:34:20,739 --> 00:34:23,849
[Music]

00:34:32,850 --> 00:34:38,860
well this solve the problem that you'd

00:34:35,770 --> 00:34:42,130
only have you have a top version so it's

00:34:38,860 --> 00:34:43,929
fully different image based updates and

00:34:42,130 --> 00:34:45,820
in the mender case like it updates the

00:34:43,929 --> 00:34:48,159
root filesystem and if you want to

00:34:45,820 --> 00:34:50,250
update the Linux kernel and the device

00:34:48,159 --> 00:34:53,560
tree it has to be in the root filesystem

00:34:50,250 --> 00:34:55,720
otherwise it can't update it and the

00:34:53,560 --> 00:34:58,690
vendor for example can't update you boot

00:34:55,720 --> 00:35:02,890
because it's generally unsafe to do that

00:34:58,690 --> 00:35:06,030
so didn't they avoid that you can do the

00:35:02,890 --> 00:35:09,310
other project like software update

00:35:06,030 --> 00:35:11,290
update you boot as well but but

00:35:09,310 --> 00:35:14,430
generally it's full disk image updates

00:35:11,290 --> 00:35:17,020
you have a top version and then you can

00:35:14,430 --> 00:35:20,700
find out what other versions are for you

00:35:17,020 --> 00:35:25,680
both for kernel for all the packages and

00:35:20,700 --> 00:35:25,680
you always update everything you know

00:35:32,770 --> 00:35:41,600
yeah all of them I would say support

00:35:37,730 --> 00:35:45,290
that I know members at least support

00:35:41,600 --> 00:35:48,800
signed images and it's compressed images

00:35:45,290 --> 00:35:54,110
of course software update supports

00:35:48,800 --> 00:35:57,770
signed and encrypted images the buoys

00:35:54,110 --> 00:36:00,080
tree is like it's a big library so you

00:35:57,770 --> 00:36:02,480
have to have a client on top that which

00:36:00,080 --> 00:36:04,160
is the actual Iser for example that

00:36:02,480 --> 00:36:05,810
talks with the back end and I would

00:36:04,160 --> 00:36:08,240
assume I don't really know how they

00:36:05,810 --> 00:36:11,660
implement download there but I would

00:36:08,240 --> 00:36:14,110
assume that they have at least check

00:36:11,660 --> 00:36:14,110
some checks

00:36:29,980 --> 00:36:32,550
you

00:36:41,600 --> 00:36:45,620
well you know I've been in the same

00:36:43,880 --> 00:36:47,210
situations many times that you have a

00:36:45,620 --> 00:36:51,560
small microcontroller that you need to

00:36:47,210 --> 00:36:53,810
update and it's quite easy when if you

00:36:51,560 --> 00:36:57,340
do fully match updates to have a post

00:36:53,810 --> 00:37:01,160
post process step like on first boot

00:36:57,340 --> 00:37:03,440
update and microcontroller as well and

00:37:01,160 --> 00:37:07,100
all of these projects you have something

00:37:03,440 --> 00:37:10,820
like that like post install scripts

00:37:07,100 --> 00:37:13,780
little hooks that you can hook onto to

00:37:10,820 --> 00:37:16,760
run custom update procedures for your

00:37:13,780 --> 00:37:20,780
microcontrollers so I would say solvable

00:37:16,760 --> 00:37:22,430
I think that the one that's probably

00:37:20,780 --> 00:37:24,830
trying to handle it best is software

00:37:22,430 --> 00:37:27,920
update that really is trying to focus a

00:37:24,830 --> 00:37:31,820
bit about distributed updates and trying

00:37:27,920 --> 00:37:34,160
to update yeah or have a like proxy

00:37:31,820 --> 00:37:36,670
devices that update other devices and

00:37:34,160 --> 00:37:36,670
stuff like that

00:37:50,470 --> 00:37:56,460
now and that is the meta updater which

00:37:53,109 --> 00:37:56,460
is the actual actual Iser

00:37:59,280 --> 00:38:04,910
[Music]

00:38:02,160 --> 00:38:04,910
hmm

00:38:23,720 --> 00:38:31,250
I wouldn't say that I mean yeah we have

00:38:28,339 --> 00:38:33,950
to arrange the full partition that

00:38:31,250 --> 00:38:38,089
you're updating but that's wishful if

00:38:33,950 --> 00:38:41,839
you use you b50 you be then you at least

00:38:38,089 --> 00:38:46,700
spread out we're leveling equally over

00:38:41,839 --> 00:38:50,000
your whole volumes but it's one array

00:38:46,700 --> 00:38:52,030
cycle per update or maybe two because

00:38:50,000 --> 00:38:54,740
you need to update variable somewhere in

00:38:52,030 --> 00:38:57,559
you boot environment or something like

00:38:54,740 --> 00:39:00,410
that but one would have to calculate

00:38:57,559 --> 00:39:02,390
like how many up if you have 100,000

00:39:00,410 --> 00:39:08,180
cycles on your nine flash or 10,000

00:39:02,390 --> 00:39:09,619
cycles yeah yet the more your size you

00:39:08,180 --> 00:39:12,579
have you the more we're leveling will

00:39:09,619 --> 00:39:12,579
you have of course and

00:39:24,900 --> 00:39:30,069
no it's more efficient even who knows it

00:39:27,310 --> 00:39:32,890
like non controllers but then you have

00:39:30,069 --> 00:39:34,750
the UB file system that tries to like do

00:39:32,890 --> 00:39:45,310
the we're leveling for you or do you

00:39:34,750 --> 00:39:47,849
believe of never work with it

00:39:45,310 --> 00:39:47,849
sorry

00:39:57,170 --> 00:40:04,039
no not with them aware of an aura TMC's

00:40:00,980 --> 00:40:07,519
have some but there are still normal

00:40:04,039 --> 00:40:10,700
partitions on MMC just called boot on or

00:40:07,519 --> 00:40:12,019
boot - I guess so

00:40:10,700 --> 00:40:14,559
I don't think it's a problem to

00:40:12,019 --> 00:40:14,559
integrate

00:40:18,950 --> 00:40:21,910
I'm a Christian

00:40:22,400 --> 00:40:34,780
[Music]

00:40:23,670 --> 00:40:42,640
hmm why everyone has a you booze for all

00:40:34,780 --> 00:40:45,010
day overdose but what they do is they

00:40:42,640 --> 00:40:47,800
make sure that their variables exist in

00:40:45,010 --> 00:40:50,560
the default environment like they

00:40:47,800 --> 00:40:55,060
enforce that that's really not so if you

00:40:50,560 --> 00:40:56,650
upstream it you you're like yeah you

00:40:55,060 --> 00:41:00,220
could have a conflict for it to enable

00:40:56,650 --> 00:41:03,160
it to you I don't know if anyone has

00:41:00,220 --> 00:41:05,650
tried if it if you both would accept

00:41:03,160 --> 00:41:07,250
something like that like but it's

00:41:05,650 --> 00:41:10,440
possible

00:41:07,250 --> 00:41:10,440
[Music]

00:41:12,550 --> 00:41:15,550
hmm

00:41:31,910 --> 00:41:37,070
they are hardly I have every board is

00:41:34,590 --> 00:41:37,070
differently

00:41:37,870 --> 00:41:40,960
[Music]

00:41:48,580 --> 00:41:54,060
I changed this lights lights lights yeah

00:42:01,360 --> 00:42:05,250
in a single update system or

00:42:10,330 --> 00:42:13,540
[Music]

00:42:13,690 --> 00:42:17,660
or in the case of men are they have a be

00:42:16,190 --> 00:42:20,000
like for the root filesystem then they

00:42:17,660 --> 00:42:22,100
have a data partition which is like

00:42:20,000 --> 00:42:24,530
where you put the persistent data so

00:42:22,100 --> 00:42:27,650
amend or update doesn't touch that area

00:42:24,530 --> 00:42:30,980
at all so if you want to keep data you

00:42:27,650 --> 00:42:32,780
put it there basically and that's

00:42:30,980 --> 00:42:35,030
normally what you do when you're on a B

00:42:32,780 --> 00:42:36,530
you have an area where you like if you

00:42:35,030 --> 00:42:39,500
have a database or something that you

00:42:36,530 --> 00:42:42,640
want to save across updates and keep it

00:42:39,500 --> 00:42:42,640
in the separate partition

00:42:44,290 --> 00:42:47,280
any more question

00:42:48,900 --> 00:42:57,760
but thank you

00:42:51,740 --> 00:42:57,760

YouTube URL: https://www.youtube.com/watch?v=ULouYBeoNBY


