Title: Keynote: Speeding Linux Development - Mark Charlebois, Director of Engineering, Qualcomm
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Keynote: Speeding Linux Development - Mark Charlebois, Director of Engineering, Qualcomm Technologies

About Mark Charlebois
Mark Charlebois is a Director Engineering in QCT at Qualcomm Technologies Inc. (QTI), a subsidiary of Qualcomm, Inc. He has been developing software for Unix, Linux and embedded systems for more than 30 years. Mark has served as an open source strategist and evangelist, served on the boards of the Linux Foundation, and Drone Code, and on the Steering Committee of the Core Infrastructure Initiative. Mark also served a term as the Dronecode TSC Chair. Currently he works in the Machine Learning Group in QCT.
Captions: 
	00:00:00,030 --> 00:00:06,629
okay so I want to cover I guess a few

00:00:03,720 --> 00:00:10,410
things that Philips mentioned in his

00:00:06,629 --> 00:00:13,290
previous talk about this is the sort of

00:00:10,410 --> 00:00:14,549
scale of IOT and the complexity of the

00:00:13,290 --> 00:00:15,809
software he's mentioned a lot of the

00:00:14,549 --> 00:00:19,680
hardware functionality going into

00:00:15,809 --> 00:00:22,920
software and how this complexity is

00:00:19,680 --> 00:00:25,800
driving a lot of a lot more software

00:00:22,920 --> 00:00:28,050
dependencies a lot more issues with

00:00:25,800 --> 00:00:30,720
deployment of the software and so I

00:00:28,050 --> 00:00:33,210
started thinking about a talk and what

00:00:30,720 --> 00:00:35,460
kind of thing I could talk at here at

00:00:33,210 --> 00:00:38,370
the conference and so I have a talk

00:00:35,460 --> 00:00:42,120
following this in this room the title of

00:00:38,370 --> 00:00:43,739
it is speeding up development with Yocto

00:00:42,120 --> 00:00:46,710
and opening better started with Debian

00:00:43,739 --> 00:00:47,940
and openembedded on the 410 see it is

00:00:46,710 --> 00:00:50,340
not a marketing talk it is not

00:00:47,940 --> 00:00:51,480
specifically about the 410 see it does

00:00:50,340 --> 00:00:54,989
highlight for people who are interested

00:00:51,480 --> 00:00:56,370
about the the dragon bird 4 can see for

00:00:54,989 --> 00:01:02,039
those who are interested but it's mainly

00:00:56,370 --> 00:01:03,930
a talk about Yocto about debian about

00:01:02,039 --> 00:01:05,159
the differences in the communities I

00:01:03,930 --> 00:01:06,540
can't tell you how many times I have

00:01:05,159 --> 00:01:07,860
tried to explain to people that when you

00:01:06,540 --> 00:01:09,150
build something for one system it

00:01:07,860 --> 00:01:14,250
doesn't automatically work on the other

00:01:09,150 --> 00:01:15,090
system there's a lot of reasons to use

00:01:14,250 --> 00:01:16,710
one versus the other

00:01:15,090 --> 00:01:18,750
there's if you look at the Raspberry Pi

00:01:16,710 --> 00:01:21,150
and you look at that the single board

00:01:18,750 --> 00:01:23,520
computer ecosystem and how having Debian

00:01:21,150 --> 00:01:26,009
and and you know 20,000 packages you can

00:01:23,520 --> 00:01:27,720
bring in allows you to prototype so much

00:01:26,009 --> 00:01:30,090
easier I certainly know in the machine

00:01:27,720 --> 00:01:31,770
learning group when you are trying to

00:01:30,090 --> 00:01:34,350
pull in cafe or something like that and

00:01:31,770 --> 00:01:36,689
you have many dozens of dependencies you

00:01:34,350 --> 00:01:37,890
do not want to do that in your code to

00:01:36,689 --> 00:01:40,500
start with because it will take you

00:01:37,890 --> 00:01:42,540
forever there are ways to do this

00:01:40,500 --> 00:01:43,979
intelligently and so does the speeding

00:01:42,540 --> 00:01:45,890
up part of it is how do we do this

00:01:43,979 --> 00:01:48,659
intelligently how do we think about

00:01:45,890 --> 00:01:50,220
which parts are appropriate can I do

00:01:48,659 --> 00:01:52,970
even deploy with debian there's a lot of

00:01:50,220 --> 00:01:56,070
talk about Debian's

00:01:52,970 --> 00:01:58,020
place in the embedded ecosystem and I

00:01:56,070 --> 00:02:00,450
think people are realizing a lot about

00:01:58,020 --> 00:02:03,240
the code quality that's there the

00:02:00,450 --> 00:02:03,750
support that's there and how how can it

00:02:03,240 --> 00:02:07,680
be leveraged

00:02:03,750 --> 00:02:10,050
so there's projects like SR and another

00:02:07,680 --> 00:02:12,360
one I have found out about Debbie in the

00:02:10,050 --> 00:02:13,530
civil infrastructure project so I'm

00:02:12,360 --> 00:02:13,800
going to talk about all these things in

00:02:13,530 --> 00:02:15,420
the

00:02:13,800 --> 00:02:19,650
and try to paint the broader picture

00:02:15,420 --> 00:02:20,910
give you lots of links but even in the

00:02:19,650 --> 00:02:23,520
speaker's lounge this morning actually

00:02:20,910 --> 00:02:26,310
heard a pretty heated talk about Debian

00:02:23,520 --> 00:02:31,050
vs. Yocto so it is I believe a very

00:02:26,310 --> 00:02:36,000
pertinent issue what else did I want to

00:02:31,050 --> 00:02:38,840
cover yeah the the the other part I

00:02:36,000 --> 00:02:43,020
guess is about cost and speed

00:02:38,840 --> 00:02:45,090
development open-source versus

00:02:43,020 --> 00:02:46,770
leveraging the hardware Philip I'd

00:02:45,090 --> 00:02:49,410
mentioned a lot of the things are moving

00:02:46,770 --> 00:02:50,940
from hardware software but with these

00:02:49,410 --> 00:02:51,990
open frameworks is certainly machine

00:02:50,940 --> 00:02:55,290
learning you want to take advantage of

00:02:51,990 --> 00:02:57,390
the hardware as well and so having a way

00:02:55,290 --> 00:02:59,850
to do this and then scale out into the

00:02:57,390 --> 00:03:02,550
IOT market where you have upcoming

00:02:59,850 --> 00:03:04,740
patches and you have a way to to get

00:03:02,550 --> 00:03:06,000
those those upstream fixes and you're

00:03:04,740 --> 00:03:08,160
not trying to maintain the entire

00:03:06,000 --> 00:03:12,080
platform yourself is important and so

00:03:08,160 --> 00:03:14,640
leveraging an upstream capable platform

00:03:12,080 --> 00:03:15,930
which still gives you access to the

00:03:14,640 --> 00:03:17,790
hardware for acceleration is really

00:03:15,930 --> 00:03:20,280
important and really valuable so that's

00:03:17,790 --> 00:03:21,330
again something else off cover that's

00:03:20,280 --> 00:03:23,760
all I have for today

00:03:21,330 --> 00:03:25,920
please join the talk if you're

00:03:23,760 --> 00:03:28,250
interested after this and I hand it back

00:03:25,920 --> 00:03:28,250
to phone

00:03:28,890 --> 00:03:35,660

YouTube URL: https://www.youtube.com/watch?v=yYvcSAEnAS0


