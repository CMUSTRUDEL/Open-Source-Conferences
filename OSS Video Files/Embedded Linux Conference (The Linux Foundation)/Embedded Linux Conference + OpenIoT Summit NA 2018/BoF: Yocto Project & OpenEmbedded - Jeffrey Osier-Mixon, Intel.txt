Title: BoF: Yocto Project & OpenEmbedded - Jeffrey Osier-Mixon, Intel
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	BoF: Yocto Project & OpenEmbedded - Jeffrey Osier-Mixon, Intel

This BoF provides an open forum for the embedded Linux community to ask questions and discuss issues with Yocto Project and OpenEmbedded principals. This vibrant BoF typically draws over 100 attendees, so bring your questions and be sure to take notes. 

About Jeffrey Osier-Mixon
Jeff "Jefro" Osier-Mixon has been working in open source since the early 1990s and with Linux since about 1994. He has been a technical contributor, tech writer, community manager, and evangelist for many projects. Jefro manages or advises on community for many open source projects, including the Yocto Project, and speaks at several open source events each year.
Captions: 
	00:00:00,030 --> 00:00:05,450
so we're gonna get going this is the

00:00:02,340 --> 00:00:10,740
octo project birds of a feather

00:00:05,450 --> 00:00:13,620
question-and-answer gathering the way

00:00:10,740 --> 00:00:15,360
that these typically work is that we

00:00:13,620 --> 00:00:18,000
don't really have a presentation but we

00:00:15,360 --> 00:00:19,680
do have is a whole row of of Yocto

00:00:18,000 --> 00:00:22,230
project core maintainer sitting up here

00:00:19,680 --> 00:00:25,800
in the front please keep your tomatoes

00:00:22,230 --> 00:00:27,960
to yourself no rotten fruit no nothing

00:00:25,800 --> 00:00:30,119
like that but we what we do want to do

00:00:27,960 --> 00:00:32,910
is hear your questions and to find out

00:00:30,119 --> 00:00:35,489
what it is that is important for you to

00:00:32,910 --> 00:00:37,050
ask about and if nobody has the

00:00:35,489 --> 00:00:40,020
immediate questions we can talk about

00:00:37,050 --> 00:00:41,850
the release that just happened and and

00:00:40,020 --> 00:00:44,399
maybe talk about some of the interesting

00:00:41,850 --> 00:00:45,780
things going on in the project so to

00:00:44,399 --> 00:00:47,670
start out does anybody have any burning

00:00:45,780 --> 00:00:49,829
questions that they're working on it and

00:00:47,670 --> 00:00:51,780
can be dumb easy questions they can be

00:00:49,829 --> 00:00:53,579
even complex questions let me run the

00:00:51,780 --> 00:00:59,539
mic over to you just because we're we're

00:00:53,579 --> 00:01:01,980
I record these so that we with gplv2

00:00:59,539 --> 00:01:04,530
basically now that we have a separate

00:01:01,980 --> 00:01:06,840
layer are you continue to apply security

00:01:04,530 --> 00:01:09,090
Painesville negative match to the gplv2

00:01:06,840 --> 00:01:11,930
and are you planning to rely on people

00:01:09,090 --> 00:01:14,340
doing it and pushing it upstream okay

00:01:11,930 --> 00:01:20,880
good question do you want to take that

00:01:14,340 --> 00:01:22,770
one yeah so many gplv2 is is a problem

00:01:20,880 --> 00:01:24,360
particularly because if somebody's been

00:01:22,770 --> 00:01:26,280
working on the the more recent version

00:01:24,360 --> 00:01:27,780
of the code there are certain licensing

00:01:26,280 --> 00:01:29,189
questions which come into play as to

00:01:27,780 --> 00:01:32,700
whether they can even apply patches to

00:01:29,189 --> 00:01:33,780
the older one so I I really think that

00:01:32,700 --> 00:01:35,729
people are gonna have to find a

00:01:33,780 --> 00:01:37,650
different way of do it dealing with

00:01:35,729 --> 00:01:40,320
things and trying to apply security

00:01:37,650 --> 00:01:42,329
fixes to software's coming ever older so

00:01:40,320 --> 00:01:44,610
I separated that stuff out in the first

00:01:42,329 --> 00:01:46,590
place because we needed to highlight

00:01:44,610 --> 00:01:47,939
there's a problem there and there is a

00:01:46,590 --> 00:01:49,409
big problem to do with you know

00:01:47,939 --> 00:01:51,930
contamination and licensing and that

00:01:49,409 --> 00:01:53,700
kind of thing so yeah I would not rely

00:01:51,930 --> 00:01:56,399
on meta gplv2

00:01:53,700 --> 00:01:58,409
as a long-term solution I mean if people

00:01:56,399 --> 00:01:59,549
send patches and things and they they've

00:01:58,409 --> 00:02:01,619
they've gone through the right process

00:01:59,549 --> 00:02:04,110
with licenses to be able to apply

00:02:01,619 --> 00:02:06,450
patches to it great but like I

00:02:04,110 --> 00:02:09,500
personally can't see it and I personally

00:02:06,450 --> 00:02:11,879
don't want to invest time in that

00:02:09,500 --> 00:02:13,100
Richard pretty is the chief architect

00:02:11,879 --> 00:02:14,960
for the project by the way

00:02:13,100 --> 00:02:17,030
probably introduce people as they as

00:02:14,960 --> 00:02:26,540
they talk there was another question

00:02:17,030 --> 00:02:29,690
back here mr. mark so since we have like

00:02:26,540 --> 00:02:32,890
a pram tarty support in a we will we get

00:02:29,690 --> 00:02:32,890
sytem eyes upward as well

00:02:35,350 --> 00:02:44,570
do we understand the question can you

00:02:40,400 --> 00:02:46,310
repeat the question yeah we have since

00:02:44,570 --> 00:02:48,920
we have a pram 30 supporter in the core

00:02:46,310 --> 00:02:50,510
will we ever get Santa my support as

00:02:48,920 --> 00:02:52,970
well I mean there were patches posted

00:02:50,510 --> 00:02:54,050
but the answer was they have to go

00:02:52,970 --> 00:02:56,900
through the steering committee or

00:02:54,050 --> 00:03:06,700
something and there was no answer after

00:02:56,900 --> 00:03:10,130
that Zen oh my is the question anybody I

00:03:06,700 --> 00:03:13,550
don't know the answer I can give an

00:03:10,130 --> 00:03:15,200
answer it's a good question and the

00:03:13,550 --> 00:03:16,310
reason we have the preempted arty stuff

00:03:15,200 --> 00:03:18,170
in there was because there was somebody

00:03:16,310 --> 00:03:20,030
willing to step up maintain it and it

00:03:18,170 --> 00:03:21,170
has been well maintained for a quite

00:03:20,030 --> 00:03:25,220
long period of time you know

00:03:21,170 --> 00:03:27,020
particularly by Bruce ash field with

00:03:25,220 --> 00:03:28,280
with zonna my I think if somebody does

00:03:27,020 --> 00:03:29,780
want to step up and is willing to

00:03:28,280 --> 00:03:31,790
maintain it and put the effort into that

00:03:29,780 --> 00:03:33,950
that's that's good it does have

00:03:31,790 --> 00:03:36,020
implications for the testing matrix and

00:03:33,950 --> 00:03:37,670
that's another one of my concerns we

00:03:36,020 --> 00:03:39,560
don't test the arty stuff particularly

00:03:37,670 --> 00:03:43,460
heavily but I'm I'm okay with that

00:03:39,560 --> 00:03:44,810
because I know Bruce does if so it's

00:03:43,460 --> 00:03:46,280
partly a question of okay what's the

00:03:44,810 --> 00:03:50,180
repose 'el and who would actually be

00:03:46,280 --> 00:03:51,560
testing it as well if it's yeah things

00:03:50,180 --> 00:03:53,480
have changed and layers are a lot more

00:03:51,560 --> 00:03:54,530
maintainable and can't and all this

00:03:53,480 --> 00:03:56,870
stuff a lot better than used to be able

00:03:54,530 --> 00:03:58,040
to so I'm also tending to push things

00:03:56,870 --> 00:03:59,690
like that to layers where they make

00:03:58,040 --> 00:04:01,460
sense rather than the core so that

00:03:59,690 --> 00:04:03,350
there's a high bar to entry I'm not

00:04:01,460 --> 00:04:05,210
saying no but there needs to be a good

00:04:03,350 --> 00:04:06,380
case for it and other people need to

00:04:05,210 --> 00:04:09,980
turn around say yes I find this

00:04:06,380 --> 00:04:13,460
interesting as well that answers your

00:04:09,980 --> 00:04:14,900
question so I'm to more lling I just

00:04:13,460 --> 00:04:17,180
spent the last year working on the

00:04:14,900 --> 00:04:20,210
real-time Linux project and so I did a

00:04:17,180 --> 00:04:23,090
lot of testing of the preempt RT stuff

00:04:20,210 --> 00:04:25,640
because of that but zona Mya was not on

00:04:23,090 --> 00:04:26,870
our radar but I know that for instance

00:04:25,640 --> 00:04:28,400
Siemens

00:04:26,870 --> 00:04:30,740
is looking into it and things like that

00:04:28,400 --> 00:04:32,270
so there are other people using it but

00:04:30,740 --> 00:04:34,970
Siemens does not not necessarily

00:04:32,270 --> 00:04:37,910
traditionally use Yocto project so we

00:04:34,970 --> 00:04:39,500
need to find you know the group of

00:04:37,910 --> 00:04:41,870
people who are interested in it

00:04:39,500 --> 00:04:44,840
we're gonna step up bring it in and

00:04:41,870 --> 00:04:46,790
maintain it and then we then we'll see

00:04:44,840 --> 00:04:49,190
whether it is appropriate for core or

00:04:46,790 --> 00:04:53,300
not we're really really trying to keep

00:04:49,190 --> 00:04:54,889
core slim in part because we have some

00:04:53,300 --> 00:04:57,290
legal and licensing things that we're

00:04:54,889 --> 00:05:00,530
attempting to do to make it much much

00:04:57,290 --> 00:05:01,850
easier for people to use I can't say a

00:05:00,530 --> 00:05:07,100
whole lot more than that about it right

00:05:01,850 --> 00:05:08,900
now but so I would suggest as Richard is

00:05:07,100 --> 00:05:11,120
kind of indicating what that should go

00:05:08,900 --> 00:05:13,539
to it you know a medicine on my you know

00:05:11,120 --> 00:05:15,650
layer or something like that perhaps or

00:05:13,539 --> 00:05:16,850
wherever met a virtualization or

00:05:15,650 --> 00:05:27,110
someplace where it makes sense I don't

00:05:16,850 --> 00:05:29,750
not sure thank you yeah thanks once

00:05:27,110 --> 00:05:35,840
you've have you have like a custom

00:05:29,750 --> 00:05:42,349
kernel ripple it's stable what are the

00:05:35,840 --> 00:05:48,530
next steps to have bsp layer rating on

00:05:42,349 --> 00:05:53,450
top of this kernel repo sounds like a

00:05:48,530 --> 00:05:55,669
good question okay so I just there's at

00:05:53,450 --> 00:05:58,430
the Yale sessions going on I just

00:05:55,669 --> 00:06:01,460
created a distro layer and a BSP layer

00:05:58,430 --> 00:06:06,590
as an example and wrote up a lab manual

00:06:01,460 --> 00:06:11,270
for that so then I did a so if you look

00:06:06,590 --> 00:06:13,910
in in a week or there's a meta skeleton

00:06:11,270 --> 00:06:17,479
layer and in that there is a Linux

00:06:13,910 --> 00:06:19,370
custom recipe and so that's one place

00:06:17,479 --> 00:06:22,610
where you can do the traditional

00:06:19,370 --> 00:06:25,990
approach where it's a git repo and a def

00:06:22,610 --> 00:06:29,330
config right so not so the Yocto project

00:06:25,990 --> 00:06:32,180
traditional approach to you know within

00:06:29,330 --> 00:06:33,860
linux Yocto is we use config fragments

00:06:32,180 --> 00:06:37,060
and even those of those even though

00:06:33,860 --> 00:06:41,240
those have been supported in mainline

00:06:37,060 --> 00:06:42,980
linux for since 2011

00:06:41,240 --> 00:06:44,900
that's not most people's traditional

00:06:42,980 --> 00:06:46,940
approach to it but so the next step is

00:06:44,900 --> 00:06:49,850
you actually want to create or you might

00:06:46,940 --> 00:06:51,800
want to create a machine or append a

00:06:49,850 --> 00:06:55,400
machine override a machine something

00:06:51,800 --> 00:07:09,410
like that to include that kernel so if

00:06:55,400 --> 00:07:10,970
you look on github at the email so

00:07:09,410 --> 00:07:12,410
there's there's several approaches you

00:07:10,970 --> 00:07:14,150
can take there so basically you need to

00:07:12,410 --> 00:07:15,980
get that that kernel recipe and do a

00:07:14,150 --> 00:07:19,960
layer some house that's being picked up

00:07:15,980 --> 00:07:24,020
by bitbake and you can actually just

00:07:19,960 --> 00:07:26,060
give it a unique name and then have in

00:07:24,020 --> 00:07:27,500
your local comm or if you have a distro

00:07:26,060 --> 00:07:31,160
layer and your distro kampf

00:07:27,500 --> 00:07:33,380
you can add the virtual kernel pointing

00:07:31,160 --> 00:07:35,240
to that specific recipe name there's

00:07:33,380 --> 00:07:36,770
there's a whole lot of other ways to it

00:07:35,240 --> 00:07:39,320
but that's kind of the the basic

00:07:36,770 --> 00:07:41,090
approach should be really the you would

00:07:39,320 --> 00:07:42,140
put that in your own bsp layer even

00:07:41,090 --> 00:07:53,030
though that might be the only thing

00:07:42,140 --> 00:07:54,650
there yep yes so basically that's why

00:07:53,030 --> 00:07:56,690
there's layers so you want to be

00:07:54,650 --> 00:07:59,750
creating in this situation you want to

00:07:56,690 --> 00:08:01,520
be creating a BSP layer it's I would

00:07:59,750 --> 00:08:04,130
highly suggest you probably also want to

00:08:01,520 --> 00:08:05,900
be creating a distro layer because you

00:08:04,130 --> 00:08:07,850
probably are doing a product you

00:08:05,900 --> 00:08:11,420
probably want branding and that's where

00:08:07,850 --> 00:08:13,370
that should go the Machine type stuff is

00:08:11,420 --> 00:08:15,650
where the learning kernel could could be

00:08:13,370 --> 00:08:17,780
defined and that should be in the bsp

00:08:15,650 --> 00:08:20,290
layer there are times when it could be

00:08:17,780 --> 00:08:22,490
appropriate in a distro layer just

00:08:20,290 --> 00:08:26,060
that's a little bit gray area but in

00:08:22,490 --> 00:08:27,710
general that the the Linux rest linux

00:08:26,060 --> 00:08:29,780
kernel recipes should be in your bsp

00:08:27,710 --> 00:08:31,250
layer along with your drivers and if

00:08:29,780 --> 00:08:32,960
you're doing device tree or whatever

00:08:31,250 --> 00:08:35,150
else you're doing you boot those kind of

00:08:32,960 --> 00:08:37,010
things could all be there bootloader

00:08:35,150 --> 00:08:40,130
whatever it is so that all B's belongs

00:08:37,010 --> 00:08:43,729
in the BSP type layer and again I just

00:08:40,130 --> 00:08:49,670
if you look at github at Yale L there's

00:08:43,729 --> 00:08:51,860
a there's a lab that I just did I

00:08:49,670 --> 00:08:53,720
created all these all the metadata I

00:08:51,860 --> 00:08:56,300
wrote up the lab for it

00:08:53,720 --> 00:09:01,090
yeah and there's other places but that I

00:08:56,300 --> 00:09:06,560
just finished that last last week so

00:09:01,090 --> 00:09:14,230
thank you any other questions going on

00:09:06,560 --> 00:09:17,200
yes I am I'm new to octo I have a

00:09:14,230 --> 00:09:22,490
question that is just yakked Ola support

00:09:17,200 --> 00:09:29,060
had docker files for new users to set up

00:09:22,490 --> 00:09:30,650
quickly another one for Tim thank you

00:09:29,060 --> 00:09:32,530
all for asking questions about all the

00:09:30,650 --> 00:09:37,850
stuff that I have been working on okay

00:09:32,530 --> 00:09:39,530
so so last year I was working on the

00:09:37,850 --> 00:09:44,770
crops team which was addressing docker

00:09:39,530 --> 00:09:48,710
usage in to enable docker to help us in

00:09:44,770 --> 00:09:51,350
Yocto project and so on so in the in

00:09:48,710 --> 00:09:54,860
core we actually added the ability to

00:09:51,350 --> 00:09:55,790
create kernel or container recipes so if

00:09:54,860 --> 00:09:58,580
you're talking about actually running

00:09:55,790 --> 00:10:01,340
docker creating docker containers in

00:09:58,580 --> 00:10:03,550
Yocto if that's what you mean yes so

00:10:01,340 --> 00:10:07,790
there's meta virtualization layer has

00:10:03,550 --> 00:10:09,230
has recipes for docker core has the

00:10:07,790 --> 00:10:11,510
ability to create container images

00:10:09,230 --> 00:10:15,560
that's not necessarily limited to docker

00:10:11,510 --> 00:10:17,630
it could be any of the other container

00:10:15,560 --> 00:10:21,620
types that are out there essentially

00:10:17,630 --> 00:10:23,750
what it does is it uses Linux dummy so

00:10:21,620 --> 00:10:25,490
that it doesn't have a kernel because

00:10:23,750 --> 00:10:27,020
most of these kernels most of these

00:10:25,490 --> 00:10:28,730
containers do not have kernels in them

00:10:27,020 --> 00:10:33,320
there are exceptions to that like clear

00:10:28,730 --> 00:10:35,810
Linux or clear containers but and so

00:10:33,320 --> 00:10:39,320
yeah so it is definitely in there it's

00:10:35,810 --> 00:10:41,240
doable I'm not personally really up to

00:10:39,320 --> 00:10:44,750
date on what's going on there but I know

00:10:41,240 --> 00:10:47,030
that there's been activity in various

00:10:44,750 --> 00:10:53,030
places including inside Wind River that

00:10:47,030 --> 00:10:53,450
have been been leveraging that answer

00:10:53,030 --> 00:10:58,089
your question

00:10:53,450 --> 00:10:58,089
good yes

00:11:02,100 --> 00:11:08,920
so what's the what's the vision for yak

00:11:05,650 --> 00:11:10,930
Doce an end OE for two to five years

00:11:08,920 --> 00:11:11,350
from now what are we gonna what will it

00:11:10,930 --> 00:11:13,120
be

00:11:11,350 --> 00:11:18,520
how is it going to evolve in the next

00:11:13,120 --> 00:11:21,250
two to five years flying cars things

00:11:18,520 --> 00:11:28,420
like that do you want to tackle that one

00:11:21,250 --> 00:11:31,810
I don't know if you want me to I'll talk

00:11:28,420 --> 00:11:34,120
about flying cars and stuff no I I I

00:11:31,810 --> 00:11:35,440
think that short term there's some

00:11:34,120 --> 00:11:37,420
definite short term problems with the

00:11:35,440 --> 00:11:39,850
project on our problems with challenges

00:11:37,420 --> 00:11:41,740
such as the maintainer ship and how we

00:11:39,850 --> 00:11:43,840
keep all the recipes up to date how we

00:11:41,740 --> 00:11:46,150
extend some of the automated testing and

00:11:43,840 --> 00:11:47,260
how that applies into other layers with

00:11:46,150 --> 00:11:49,180
an ecosystem because I think

00:11:47,260 --> 00:11:50,560
openembedded core is kind of be leading

00:11:49,180 --> 00:11:52,690
the way but we need to take some of the

00:11:50,560 --> 00:11:55,330
things we've been doing there and roll

00:11:52,690 --> 00:11:57,250
them out so certainly those are the sort

00:11:55,330 --> 00:12:02,050
of the immediate things that I've been

00:11:57,250 --> 00:12:03,790
worrying about and going back five years

00:12:02,050 --> 00:12:05,410
I think we did have a good idea of this

00:12:03,790 --> 00:12:06,820
particular feature sets and so on that

00:12:05,410 --> 00:12:08,680
we need to do such as recipes with

00:12:06,820 --> 00:12:13,270
exists routes such as multi lip support

00:12:08,680 --> 00:12:14,560
I think that and and so there's

00:12:13,270 --> 00:12:16,210
definitely gaps in the project I think

00:12:14,560 --> 00:12:17,620
some of the cloud pieces such as the

00:12:16,210 --> 00:12:20,140
docker containers Tim's just talking

00:12:17,620 --> 00:12:22,960
about crops there are definitely areas

00:12:20,140 --> 00:12:24,070
where we still got work to do but I'm at

00:12:22,960 --> 00:12:26,050
the point where I'm just trying to think

00:12:24,070 --> 00:12:28,030
take a step back and think ok you know

00:12:26,050 --> 00:12:30,280
we know what we need to do short-term I

00:12:28,030 --> 00:12:32,440
think the long-term vision is currently

00:12:30,280 --> 00:12:35,830
just being rethought about so yeah

00:12:32,440 --> 00:12:37,420
that's my take and I think that we're

00:12:35,830 --> 00:12:40,440
probably safe to say that we're welcome

00:12:37,420 --> 00:12:42,940
to community input on that

00:12:40,440 --> 00:12:45,400
so are there specific issues that you

00:12:42,940 --> 00:12:49,320
would want to address or they would want

00:12:45,400 --> 00:12:49,320
the project who to cover

00:12:54,090 --> 00:12:58,510
well I think I mean I don't know if I'll

00:12:56,860 --> 00:13:00,280
ask Tim I met a question you want me to

00:12:58,510 --> 00:13:03,970
bring up my question that we discussed

00:13:00,280 --> 00:13:05,560
so I mean one one just almost a

00:13:03,970 --> 00:13:08,380
short-term thing but it devolves into a

00:13:05,560 --> 00:13:10,120
long-term thing ken can we get the the

00:13:08,380 --> 00:13:12,730
project to align on the long-term

00:13:10,120 --> 00:13:15,910
support kernels for example we seem to

00:13:12,730 --> 00:13:17,620
be missing by a rabbit version or two

00:13:15,910 --> 00:13:19,600
and I know and my project

00:13:17,620 --> 00:13:22,060
automotive-grade Linux now we're being

00:13:19,600 --> 00:13:26,470
we're gonna take Rocco and and forward

00:13:22,060 --> 00:13:30,040
port to 4.14 in order to take advantage

00:13:26,470 --> 00:13:31,480
of long term support but so how do we

00:13:30,040 --> 00:13:35,050
how do we for example here's the

00:13:31,480 --> 00:13:37,570
question I posed the question I posited

00:13:35,050 --> 00:13:40,630
last night which is how do I take Greg's

00:13:37,570 --> 00:13:43,900
new release of the of along the 4.14 for

00:13:40,630 --> 00:13:46,600
example and get that upstream to OE and

00:13:43,900 --> 00:13:51,390
and and pocky and then into my project

00:13:46,600 --> 00:13:51,390
in throwing out of time frame two weeks

00:13:52,440 --> 00:13:58,750
do you wanna answer that one shot just a

00:13:57,100 --> 00:14:08,760
little explosion from the peanut gallery

00:13:58,750 --> 00:14:12,640
back there so specifically on the on the

00:14:08,760 --> 00:14:14,620
the LTS kernels we do have an LTS kernel

00:14:12,640 --> 00:14:16,720
in each of them in every of the reach of

00:14:14,620 --> 00:14:18,400
the releases but you'll find that Barako

00:14:16,720 --> 00:14:20,290
it wasn't for finding it's for 14

00:14:18,400 --> 00:14:23,440
because for 14 hadn't shipped at the

00:14:20,290 --> 00:14:25,480
time yeah right so I think it's for 9 is

00:14:23,440 --> 00:14:27,310
what people are saying here I come over

00:14:25,480 --> 00:14:29,890
the top of my head but the the point is

00:14:27,310 --> 00:14:31,150
that if we have a particular LTS version

00:14:29,890 --> 00:14:32,710
that we've had in that release we'll

00:14:31,150 --> 00:14:34,060
continue to roll with that release and

00:14:32,710 --> 00:14:36,220
roll with the updates for that release

00:14:34,060 --> 00:14:38,470
what we won't do is take a completely

00:14:36,220 --> 00:14:40,960
new of kernel version and pull that back

00:14:38,470 --> 00:14:43,060
into one of the older releases so you're

00:14:40,960 --> 00:14:44,500
seeing things like GCC updates I mean

00:14:43,060 --> 00:14:46,270
you mentioned the releases just come out

00:14:44,500 --> 00:14:51,010
that's actually the 242 point release

00:14:46,270 --> 00:14:51,400
and that has GCC 6i w GCC 7 or upgrades

00:14:51,010 --> 00:14:54,130
in it

00:14:51,400 --> 00:14:57,090
and we did upgrade gc7 from seven to ten

00:14:54,130 --> 00:14:59,380
to seven three seven yeah

00:14:57,090 --> 00:15:01,660
anyway we upgrade GCC and when we say

00:14:59,380 --> 00:15:03,850
upgrade its down a stable branch of GCC

00:15:01,660 --> 00:15:05,320
so those are just bug fixes and security

00:15:03,850 --> 00:15:07,390
fixes and those kind of thing

00:15:05,320 --> 00:15:08,890
they're not feature changes so we do

00:15:07,390 --> 00:15:10,270
something similar to the kernel a kernel

00:15:08,890 --> 00:15:12,160
version you know would have the point

00:15:10,270 --> 00:15:14,770
numbers for the same reason but we

00:15:12,160 --> 00:15:16,450
wouldn't go on back port 414 into into

00:15:14,770 --> 00:15:18,310
Roco that's something that somebody can

00:15:16,450 --> 00:15:20,140
do like a GL if you've got specific use

00:15:18,310 --> 00:15:21,640
cases but it's not something that we

00:15:20,140 --> 00:15:27,430
would do within our current stable

00:15:21,640 --> 00:15:29,770
framework or the project I can add it so

00:15:27,430 --> 00:15:31,600
there's the testing framework which is

00:15:29,770 --> 00:15:33,970
actually making your life easier if you

00:15:31,600 --> 00:15:36,160
are doing that on your own so hopefully

00:15:33,970 --> 00:15:38,200
you'll be able to take that I believe

00:15:36,160 --> 00:15:41,140
and you know validating your kernels

00:15:38,200 --> 00:15:43,390
against the test metadata or the all the

00:15:41,140 --> 00:15:45,850
test infrastructure that's currently

00:15:43,390 --> 00:15:47,460
very good in shape actually that should

00:15:45,850 --> 00:15:51,940
help you kind of accelerate your

00:15:47,460 --> 00:15:53,980
validation just as an example

00:15:51,940 --> 00:15:56,860
so the newer kernel versions require

00:15:53,980 --> 00:15:58,990
open SSL as a dependency during build

00:15:56,860 --> 00:16:00,400
time now and if we tried back porting

00:15:58,990 --> 00:16:01,930
that that will then break a lot of stuff

00:16:00,400 --> 00:16:05,110
in Rocco and we don't have to go and fix

00:16:01,930 --> 00:16:07,270
it and and so that these things do bring

00:16:05,110 --> 00:16:09,430
in changes that cause problems and that

00:16:07,270 --> 00:16:11,080
said I think you that the way the

00:16:09,430 --> 00:16:12,700
metadata is structured you can pull

00:16:11,080 --> 00:16:15,010
pieces and back port and comparatively

00:16:12,700 --> 00:16:16,870
easily so we have our policy for call

00:16:15,010 --> 00:16:20,650
but it should be straightforward in

00:16:16,870 --> 00:16:22,240
tonight a GL yeah I think the really the

00:16:20,650 --> 00:16:33,270
the key is to keep the communication

00:16:22,240 --> 00:16:33,270
going between the projects okay I don't

00:16:33,930 --> 00:16:38,410
so that's that so I understand that

00:16:36,490 --> 00:16:40,150
people want something is stable right so

00:16:38,410 --> 00:16:41,680
they're picking Rocco because it's got a

00:16:40,150 --> 00:16:44,590
couple of point releases so that

00:16:41,680 --> 00:16:48,490
absolutely makes sense but again we're

00:16:44,590 --> 00:16:49,750
in a pickle because as they just said

00:16:48,490 --> 00:16:51,310
there's you know there's a lot of things

00:16:49,750 --> 00:16:54,520
that are gonna break when you up

00:16:51,310 --> 00:17:00,670
especially as big of a jump as for 14

00:16:54,520 --> 00:17:02,110
just happened to be and when GCC changes

00:17:00,670 --> 00:17:03,640
have to come in and gee Lib see changes

00:17:02,110 --> 00:17:05,260
have to come in and everything so all of

00:17:03,640 --> 00:17:08,199
those things unfortunately they come in

00:17:05,260 --> 00:17:09,850
so early in the dependency tree that

00:17:08,199 --> 00:17:11,410
they're basically the first things that

00:17:09,850 --> 00:17:15,130
come in and so everything else

00:17:11,410 --> 00:17:16,620
afterwards was dependent upon that and

00:17:15,130 --> 00:17:22,449
so

00:17:16,620 --> 00:17:24,220
this is why I try to admit to on the

00:17:22,449 --> 00:17:26,290
latest release which is you know sumo is

00:17:24,220 --> 00:17:27,970
going to be coming out we had a long

00:17:26,290 --> 00:17:29,770
discussion about that last night but I'm

00:17:27,970 --> 00:17:31,750
just trying to you know in general I

00:17:29,770 --> 00:17:36,520
would have would be suggesting to people

00:17:31,750 --> 00:17:40,330
if you want the latest belt es that and

00:17:36,520 --> 00:17:43,510
that is 4:14 that we're on for 14 24

00:17:40,330 --> 00:17:45,520
right now on master which is frozen

00:17:43,510 --> 00:17:48,540
feature frozen now which will be

00:17:45,520 --> 00:17:50,770
released in some time from now

00:17:48,540 --> 00:17:53,380
officially it was supposed to be April

00:17:50,770 --> 00:17:55,600
24th but I don't really know where we're

00:17:53,380 --> 00:17:56,860
at I don't know if any of us are a

00:17:55,600 --> 00:18:07,179
hundred percent sure where we're at

00:17:56,860 --> 00:18:10,000
right at this moment but if you were me

00:18:07,179 --> 00:18:13,120
and you were planning a release in July

00:18:10,000 --> 00:18:17,050
or June or July I can't take the risk of

00:18:13,120 --> 00:18:18,429
moving to sumo between now you the other

00:18:17,050 --> 00:18:21,600
thing I just want to I also wanted to

00:18:18,429 --> 00:18:25,530
ask about was QA there seems to be

00:18:21,600 --> 00:18:29,100
things are slowing down in QA like of a

00:18:25,530 --> 00:18:31,330
2.3.3 has taken forever to get out of QA

00:18:29,100 --> 00:18:34,900
so one of the things that's going on

00:18:31,330 --> 00:18:38,980
there the reality is that QA just moved

00:18:34,900 --> 00:18:40,929
from Guadalajara to pinning so there are

00:18:38,980 --> 00:18:42,700
there are realities that happen so that

00:18:40,929 --> 00:18:46,240
is one issue the other issue is we've

00:18:42,700 --> 00:18:49,660
had some very very difficult to fix

00:18:46,240 --> 00:18:51,910
changes that came up in this this

00:18:49,660 --> 00:18:55,830
release cycle that's actually happened

00:18:51,910 --> 00:18:59,440
to the last couple of release cycles and

00:18:55,830 --> 00:19:02,290
we are a fairly small number of people

00:18:59,440 --> 00:19:04,090
the actual people doing this work is you

00:19:02,290 --> 00:19:06,520
you probably be shocked because it's

00:19:04,090 --> 00:19:08,860
certainly less than the number of people

00:19:06,520 --> 00:19:13,929
in this room and the amount of work we

00:19:08,860 --> 00:19:17,200
do is is staggering so anyway so there's

00:19:13,929 --> 00:19:18,660
just some realities there my Pat answer

00:19:17,200 --> 00:19:21,940
to you and I know this is not the answer

00:19:18,660 --> 00:19:24,610
to you specifically but in general this

00:19:21,940 --> 00:19:27,220
is why there's OS bees so this is why we

00:19:24,610 --> 00:19:30,070
have Monta Vista and wind river and

00:19:27,220 --> 00:19:33,220
Mentor Graphics and people like that

00:19:30,070 --> 00:19:34,720
when you need specifically you want that

00:19:33,220 --> 00:19:36,850
kernel support you can get it from those

00:19:34,720 --> 00:19:39,010
OS V's the other thing is we have some

00:19:36,850 --> 00:19:42,610
very very capable consultants like

00:19:39,010 --> 00:19:47,080
consult co and boot Lynn and others that

00:19:42,610 --> 00:19:48,730
can also do this for you so yeah so I'm

00:19:47,080 --> 00:19:56,890
just fooling a putting it on that that

00:19:48,730 --> 00:19:57,820
Colonel questioning I okay um so I don't

00:19:56,890 --> 00:20:00,190
have a horse in this race

00:19:57,820 --> 00:20:03,280
so I'm asking purely out of curiosity

00:20:00,190 --> 00:20:06,040
fed by the the original question so if

00:20:03,280 --> 00:20:09,520
if you guys the project doesn't want to

00:20:06,040 --> 00:20:12,160
support a newer kernel in a shipped

00:20:09,520 --> 00:20:15,970
release branch but you have members of

00:20:12,160 --> 00:20:18,100
the community downstream who are doing

00:20:15,970 --> 00:20:21,010
that work well what would your guidance

00:20:18,100 --> 00:20:24,850
be to if if there are multiple parties

00:20:21,010 --> 00:20:26,590
who want to use say for 14 and those

00:20:24,850 --> 00:20:28,060
guys should be sharing resources and

00:20:26,590 --> 00:20:31,240
collaborating what all guidance would

00:20:28,060 --> 00:20:40,420
you give them to be able to exchange and

00:20:31,240 --> 00:20:42,130
work together I think that people need

00:20:40,420 --> 00:20:44,860
to get together and collaborate on that

00:20:42,130 --> 00:20:46,840
stuff so part of it is figuring out okay

00:20:44,860 --> 00:20:49,510
who has this problem can we share that

00:20:46,840 --> 00:20:51,250
code and what have you and then yeah you

00:20:49,510 --> 00:20:53,650
know find a place on I don't know pokey

00:20:51,250 --> 00:20:55,630
control whatever makes sense to actually

00:20:53,650 --> 00:20:59,440
share that work show it to others and

00:20:55,630 --> 00:21:01,120
then yeah I mean we've the the octo

00:20:59,440 --> 00:21:02,200
projects been doing it stable releases

00:21:01,120 --> 00:21:04,390
and we have sort of like a rough

00:21:02,200 --> 00:21:06,640
two-year timeframe for that after which

00:21:04,390 --> 00:21:08,710
yeah I think we don't really go beyond

00:21:06,640 --> 00:21:09,700
that but we have been asked well okay

00:21:08,710 --> 00:21:11,470
what would people do if they have

00:21:09,700 --> 00:21:13,120
patches for all the releases and the

00:21:11,470 --> 00:21:14,530
answer there is that we'd we're willing

00:21:13,120 --> 00:21:16,150
to create branches but we need to

00:21:14,530 --> 00:21:17,740
differentiate them from the core process

00:21:16,150 --> 00:21:19,210
so people know there's a step sort of

00:21:17,740 --> 00:21:20,590
functioning quality you know that

00:21:19,210 --> 00:21:23,290
they're not running the same tests and

00:21:20,590 --> 00:21:24,730
so on so yeah well it's something that

00:21:23,290 --> 00:21:26,350
we're figuring out but definitely get

00:21:24,730 --> 00:21:31,900
people to collaborate share branches and

00:21:26,350 --> 00:21:33,700
yeah so this my goal for this year is

00:21:31,900 --> 00:21:36,280
actually to do a whole lot more with

00:21:33,700 --> 00:21:37,840
runtime testing instead of preaching

00:21:36,280 --> 00:21:39,850
about it I'm actually going to just make

00:21:37,840 --> 00:21:41,740
it happen and that's one of the things

00:21:39,850 --> 00:21:43,210
that would be necessary here because in

00:21:41,740 --> 00:21:46,330
order to drop the

00:21:43,210 --> 00:21:48,549
quality validation cycles we need to

00:21:46,330 --> 00:21:51,730
have more automation instead of having

00:21:48,549 --> 00:21:53,770
it be done you know in any kind of

00:21:51,730 --> 00:21:55,480
manual or it you preserve the manual

00:21:53,770 --> 00:21:57,490
stuff for what it was should be so

00:21:55,480 --> 00:21:59,289
that's that's just kind of another issue

00:21:57,490 --> 00:22:01,230
that's bit that's been waiting for a

00:21:59,289 --> 00:22:03,820
long time and that's something that

00:22:01,230 --> 00:22:12,159
that's a goal of mine to address this

00:22:03,820 --> 00:22:14,559
year in the in the case of a kernel

00:22:12,159 --> 00:22:15,429
update because I maintain the emitter

00:22:14,559 --> 00:22:23,409
openembedded

00:22:15,429 --> 00:22:24,970
and great so I like one core updated

00:22:23,409 --> 00:22:26,470
their kernel it affected mid

00:22:24,970 --> 00:22:27,970
openembedded and we had to update all

00:22:26,470 --> 00:22:29,590
the packages so that's probably what

00:22:27,970 --> 00:22:34,390
you're gonna see start seeing happen if

00:22:29,590 --> 00:22:35,980
we bring in a really - 14 - 15 - 16

00:22:34,390 --> 00:22:37,690
you'll start breaking other layers that

00:22:35,980 --> 00:22:40,240
you have you're then gonna have to go

00:22:37,690 --> 00:22:42,039
fix because that's what I'm seeing with

00:22:40,240 --> 00:22:43,419
mid open embedded you know the same

00:22:42,039 --> 00:22:44,860
thing with toolchain when we do that it

00:22:43,419 --> 00:22:57,159
just ripples through all the layers you

00:22:44,860 --> 00:23:00,070
know do you have any plans to had you

00:22:57,159 --> 00:23:02,740
boot menu config we see lot of cake on

00:23:00,070 --> 00:23:04,690
fix in you boot and I see lot of

00:23:02,740 --> 00:23:07,450
customers asking for you wouldn't many

00:23:04,690 --> 00:23:09,940
conflicts and one of the like few

00:23:07,450 --> 00:23:13,919
customers I see they ask for like adding

00:23:09,940 --> 00:23:17,080
packages like rotifers minikin fix also

00:23:13,919 --> 00:23:19,390
they see like searching lot of

00:23:17,080 --> 00:23:21,640
dependency packages they are not Yocto

00:23:19,390 --> 00:23:24,520
service but they need some of the

00:23:21,640 --> 00:23:27,309
packages like similar to older a free

00:23:24,520 --> 00:23:30,399
scale a tip kind of mini config to

00:23:27,309 --> 00:23:39,789
select the packages that will be a good

00:23:30,399 --> 00:23:40,960
road map okay so so creating I mean

00:23:39,789 --> 00:23:43,000
effectively what we're asking for is a

00:23:40,960 --> 00:23:45,039
GUI around package sort of a lot of you

00:23:43,000 --> 00:23:47,080
know selection for things in images we

00:23:45,039 --> 00:23:49,600
have tried this several times so there

00:23:47,080 --> 00:23:51,070
was originally hobb and then we which

00:23:49,600 --> 00:23:52,510
was a graphical user interface that

00:23:51,070 --> 00:23:53,919
allowed you to do things like that and

00:23:52,510 --> 00:23:55,670
then toaster was another side of

00:23:53,919 --> 00:23:57,200
development in that direction

00:23:55,670 --> 00:23:58,460
never I don't think it quite got to the

00:23:57,200 --> 00:24:00,800
point where you could do that but it was

00:23:58,460 --> 00:24:02,090
it the idea was that that that would be

00:24:00,800 --> 00:24:06,320
somewhere where that functionality could

00:24:02,090 --> 00:24:07,790
go menu config is is great up to a point

00:24:06,320 --> 00:24:09,380
but with something as complex as we've

00:24:07,790 --> 00:24:10,880
got it doesn't really scale to that

00:24:09,380 --> 00:24:12,230
certainly not to show you the

00:24:10,880 --> 00:24:15,530
information that you would need to make

00:24:12,230 --> 00:24:17,240
decisions toaster was would be able to

00:24:15,530 --> 00:24:18,710
cover it but we can't we're struggling

00:24:17,240 --> 00:24:21,050
to get people to work on toaster

00:24:18,710 --> 00:24:22,490
so yes I love the idea and I'd love to

00:24:21,050 --> 00:24:25,930
have it but somebody's gonna have to

00:24:22,490 --> 00:24:28,160
step up and make that happen and so far

00:24:25,930 --> 00:24:32,360
doesn't seem to be the people stepping

00:24:28,160 --> 00:24:37,760
up to do it speaks to the the quality of

00:24:32,360 --> 00:24:42,500
the project as a community project and

00:24:37,760 --> 00:24:46,280
the questions yes I was wondering if you

00:24:42,500 --> 00:24:49,190
could maybe talk about the the testing

00:24:46,280 --> 00:24:51,380
that you guys are doing you know how I

00:24:49,190 --> 00:24:53,870
guess what what kind of tests are you

00:24:51,380 --> 00:24:56,990
running how could I possibly replicate

00:24:53,870 --> 00:24:58,640
the same test with my system and if the

00:24:56,990 --> 00:25:04,970
answer is you know go read this document

00:24:58,640 --> 00:25:06,200
that's great too it's worth coming a

00:25:04,970 --> 00:25:07,490
quick summary that now because I think

00:25:06,200 --> 00:25:08,690
it's probably interesting to a number of

00:25:07,490 --> 00:25:10,700
people in this room and I think it's

00:25:08,690 --> 00:25:12,020
something that we don't promote enough

00:25:10,700 --> 00:25:14,000
because a lot of people don't realize

00:25:12,020 --> 00:25:18,370
it's there so we've got multiple

00:25:14,000 --> 00:25:20,870
different levels of tests there is a so

00:25:18,370 --> 00:25:22,580
one of them is image testing so when the

00:25:20,870 --> 00:25:23,900
system builds an image it's good to

00:25:22,580 --> 00:25:25,340
figure out okay does this image boot

00:25:23,900 --> 00:25:27,260
what you know what this does the

00:25:25,340 --> 00:25:30,290
functionality and that image work so

00:25:27,260 --> 00:25:32,150
that's what the test image code does so

00:25:30,290 --> 00:25:34,310
there's actually a test image class and

00:25:32,150 --> 00:25:36,530
when you inherit that I think if you

00:25:34,310 --> 00:25:38,450
inherit test image you then get a test

00:25:36,530 --> 00:25:40,040
image task and then that can be run

00:25:38,450 --> 00:25:41,570
automatically after a Ruta fast is

00:25:40,040 --> 00:25:43,280
generated where it could boot it up and

00:25:41,570 --> 00:25:45,830
kiemce you and then run the tests

00:25:43,280 --> 00:25:47,120
against them there is some hooks in

00:25:45,830 --> 00:25:48,620
there which would allow you to interface

00:25:47,120 --> 00:25:50,510
that to a real piece of hardware as well

00:25:48,620 --> 00:25:52,430
so it's not just limited to virtualized

00:25:50,510 --> 00:25:54,350
stuff but we don't tend to use that so

00:25:52,430 --> 00:25:56,000
much we we use that but we use that on

00:25:54,350 --> 00:25:58,220
all our industry infrastructure to boot

00:25:56,000 --> 00:25:59,720
up and then runtime test all of the

00:25:58,220 --> 00:26:01,220
images that we generate where we can run

00:25:59,720 --> 00:26:03,470
them under Kimia and that's pretty much

00:26:01,220 --> 00:26:06,320
everything so when they're alter built

00:26:03,470 --> 00:26:08,930
so we have an auto builder audibility

00:26:06,320 --> 00:26:11,180
Yocto project at org that's

00:26:08,930 --> 00:26:12,620
running all of these bills usually we're

00:26:11,180 --> 00:26:14,540
now pre-testing things because before

00:26:12,620 --> 00:26:16,760
they go into master that's building

00:26:14,540 --> 00:26:18,950
across all of the key mu machines so

00:26:16,760 --> 00:26:21,620
that's four architectures across 32 and

00:26:18,950 --> 00:26:23,690
64-bit across two different distros

00:26:21,620 --> 00:26:25,790
pokey and pokey LSB along with a whole

00:26:23,690 --> 00:26:27,410
load of other configurations and that

00:26:25,790 --> 00:26:30,110
will build the images and then actually

00:26:27,410 --> 00:26:33,020
run them under test image that has some

00:26:30,110 --> 00:26:35,930
other sort of partners in crime so to

00:26:33,020 --> 00:26:37,810
speak such as test SDK and test the

00:26:35,930 --> 00:26:40,130
extensible SDK so there's some other

00:26:37,810 --> 00:26:43,340
tasks that correspond to testing those

00:26:40,130 --> 00:26:45,470
artifacts and then if you've got test

00:26:43,340 --> 00:26:48,950
cases that are more higher level sort of

00:26:45,470 --> 00:26:51,140
workflow type tests then we have our

00:26:48,950 --> 00:26:53,060
self test which is a huge collection of

00:26:51,140 --> 00:26:56,030
tests for things like dev tool recipe

00:26:53,060 --> 00:26:57,410
tool and work flow type sort of

00:26:56,030 --> 00:26:59,780
situations where you'd want to build

00:26:57,410 --> 00:27:01,100
something you know change something and

00:26:59,780 --> 00:27:02,900
then check that something rebuilt or

00:27:01,100 --> 00:27:07,160
those those kind of workflow sort of

00:27:02,900 --> 00:27:10,430
tests and there's also P tests P tests

00:27:07,160 --> 00:27:12,560
are where specific pieces of software

00:27:10,430 --> 00:27:14,000
have test Suites with them so you might

00:27:12,560 --> 00:27:16,400
run make check and it would run through

00:27:14,000 --> 00:27:18,890
and run a set of tests those we capita

00:27:16,400 --> 00:27:21,020
we capture them up into P test packages

00:27:18,890 --> 00:27:23,540
which you can install into the images

00:27:21,020 --> 00:27:26,300
and then run the tests there to get get

00:27:23,540 --> 00:27:28,790
those results so there's an awful lot of

00:27:26,300 --> 00:27:31,340
testing that that you can do and we we

00:27:28,790 --> 00:27:34,010
run we run our self tests we run the

00:27:31,340 --> 00:27:36,200
test image the test SDK and so on P test

00:27:34,010 --> 00:27:38,180
we do run more as part of the manual QA

00:27:36,200 --> 00:27:39,860
process right now but we're looking at

00:27:38,180 --> 00:27:43,820
automating that and then automating

00:27:39,860 --> 00:27:46,040
collecting up the results so yeah and

00:27:43,820 --> 00:27:47,780
there's also a bit baked self-test so

00:27:46,040 --> 00:27:56,420
there are unit tests on specific parts

00:27:47,780 --> 00:27:58,730
the project as well so so P test is

00:27:56,420 --> 00:28:00,290
that's when I say runtime testing I'm

00:27:58,730 --> 00:28:02,720
talking about that so the p and p test

00:28:00,290 --> 00:28:04,340
is for package it's a packaged test so

00:28:02,720 --> 00:28:06,350
that's for individual packages theyíve

00:28:04,340 --> 00:28:10,580
that you've installed into your image

00:28:06,350 --> 00:28:13,670
and so i'm the co maintainer of meta

00:28:10,580 --> 00:28:15,080
python and meta pearl and also you know

00:28:13,670 --> 00:28:16,100
some of the other meta open embedded

00:28:15,080 --> 00:28:18,800
layers

00:28:16,100 --> 00:28:22,700
I've been around up and embedded for 10

00:28:18,800 --> 00:28:24,230
years now so just so happened that

00:28:22,700 --> 00:28:25,670
last year that I spent with the

00:28:24,230 --> 00:28:27,590
real-time team I ended up doing a lot of

00:28:25,670 --> 00:28:31,070
hardware testing and so I actually did

00:28:27,590 --> 00:28:32,870
the testing with lava as the hardware

00:28:31,070 --> 00:28:36,770
framework so I'm actually giving a talk

00:28:32,870 --> 00:28:41,150
tomorrow about that so I just introduced

00:28:36,770 --> 00:28:44,150
into core a new class let's pee test -

00:28:41,150 --> 00:28:46,070
pearl which makes it very very easy to

00:28:44,150 --> 00:28:47,720
have perl modules run their tests and

00:28:46,070 --> 00:28:49,790
that that was easy to do because pearls

00:28:47,720 --> 00:28:52,610
got very consistent testing for

00:28:49,790 --> 00:28:54,050
individual things my next target is

00:28:52,610 --> 00:28:56,180
gonna be Python and then we'll keep

00:28:54,050 --> 00:28:57,500
going from there but one of the problems

00:28:56,180 --> 00:28:59,750
we have is that as people are

00:28:57,500 --> 00:29:01,490
introducing new recipes especially to

00:28:59,750 --> 00:29:04,100
med openembedded but you know also to

00:29:01,490 --> 00:29:06,260
core we don't actually have complete

00:29:04,100 --> 00:29:08,480
coverage of p tests so even though

00:29:06,260 --> 00:29:11,810
whatever that was you know that you're

00:29:08,480 --> 00:29:15,680
you're introducing had unit tests that

00:29:11,810 --> 00:29:17,210
could be run nobody bothered or you know

00:29:15,680 --> 00:29:19,130
took the time the extra time or even

00:29:17,210 --> 00:29:21,500
knew it was there to do the to actually

00:29:19,130 --> 00:29:23,570
create the p test thing so it's very

00:29:21,500 --> 00:29:25,490
briefly what p test does is it runs a

00:29:23,570 --> 00:29:27,560
script that's that you have to provide

00:29:25,490 --> 00:29:29,780
that's called run p tests and that's

00:29:27,560 --> 00:29:32,230
basically just a bash shell which might

00:29:29,780 --> 00:29:34,850
just be as simple as calling make check

00:29:32,230 --> 00:29:38,240
which obviously have to depend on make

00:29:34,850 --> 00:29:39,740
and things like that or it calls

00:29:38,240 --> 00:29:42,680
something else so it could call talks

00:29:39,740 --> 00:29:44,690
for python or whatever so it's really

00:29:42,680 --> 00:29:46,040
not that difficult to do but you do kind

00:29:44,690 --> 00:29:48,050
of you know need to wrap your head

00:29:46,040 --> 00:29:51,020
around it I think we've realized that

00:29:48,050 --> 00:29:54,080
that is a particular point that needs to

00:29:51,020 --> 00:29:56,150
P needs to be documented so that's my

00:29:54,080 --> 00:29:58,100
plan for the next couple of weeks is

00:29:56,150 --> 00:29:59,980
actually to capture some of the things

00:29:58,100 --> 00:30:02,240
that I've just done very very recently

00:29:59,980 --> 00:30:03,830
in order to share that experience with

00:30:02,240 --> 00:30:12,260
other people and try to get more

00:30:03,830 --> 00:30:16,070
community help with that great any other

00:30:12,260 --> 00:30:17,930
burning questions one thing I'm going

00:30:16,070 --> 00:30:19,880
back to what's going on new with the

00:30:17,930 --> 00:30:20,810
project one thing that I can say is that

00:30:19,880 --> 00:30:22,790
we've been doing a whole lot of

00:30:20,810 --> 00:30:25,790
documentation work and we happen to have

00:30:22,790 --> 00:30:27,710
our documentary documentaries here so if

00:30:25,790 --> 00:30:29,840
you have any specific burning issues

00:30:27,710 --> 00:30:31,910
with the documentation or requests and

00:30:29,840 --> 00:30:33,890
would like to talk about them this is a

00:30:31,910 --> 00:30:36,220
great this conference is a great time to

00:30:33,890 --> 00:30:38,320
do that

00:30:36,220 --> 00:30:41,940
also the there is a new Yocto project

00:30:38,320 --> 00:30:44,620
website that just launched last week and

00:30:41,940 --> 00:30:46,180
we're anxious to hear feedback on it so

00:30:44,620 --> 00:30:48,730
if you would like to come and talk to us

00:30:46,180 --> 00:30:51,970
at the booth we would be very grateful

00:30:48,730 --> 00:30:53,050
if you take a look at it and I don't

00:30:51,970 --> 00:30:56,230
know how we're doing on time but I think

00:30:53,050 --> 00:30:57,400
we're getting down towards the end a dev

00:30:56,230 --> 00:30:58,380
day that's a good thing to bring up

00:30:57,400 --> 00:31:02,560
isn't it

00:30:58,380 --> 00:31:05,500
Thursday we are running I think it is

00:31:02,560 --> 00:31:08,590
the the 9th or the 10th dev day it's a

00:31:05,500 --> 00:31:09,850
developer day it'll be off site will

00:31:08,590 --> 00:31:13,930
provide document or provide

00:31:09,850 --> 00:31:15,370
transportation for it it's a paid event

00:31:13,930 --> 00:31:18,100
and what it is is a day-long training

00:31:15,370 --> 00:31:21,640
that you will spend with the folks

00:31:18,100 --> 00:31:24,280
sitting here in the in this room working

00:31:21,640 --> 00:31:26,290
on the octa project there is a beginner

00:31:24,280 --> 00:31:28,690
section that were a beginner track that

00:31:26,290 --> 00:31:31,270
will take you from you know zero to 60

00:31:28,690 --> 00:31:33,220
very quickly and an advanced track where

00:31:31,270 --> 00:31:34,630
we cover a lot of the advanced topics

00:31:33,220 --> 00:31:38,770
that we've been talking about here in

00:31:34,630 --> 00:31:41,020
this buff and more so if you have any

00:31:38,770 --> 00:31:43,300
interest in that come and talk to me I'm

00:31:41,020 --> 00:31:47,410
sure we can we can figure out a way to

00:31:43,300 --> 00:31:50,850
get you there so any other question oh

00:31:47,410 --> 00:31:50,850
yes one more question here in the back

00:32:04,710 --> 00:32:14,530
package management is ported to DNA this

00:32:13,060 --> 00:32:17,890
is from frigid so I think it's like

00:32:14,530 --> 00:32:20,400
where would we plug in for a demo up

00:32:17,890 --> 00:32:20,400
here in front

00:32:28,250 --> 00:32:48,190
Fuji's is a long time sorry long time

00:32:30,890 --> 00:32:48,190
contributed to the to the project audio

00:32:50,590 --> 00:33:03,010
sorry did you is there a VGA connection

00:32:53,720 --> 00:33:03,010
up here this looks like VGA

00:33:24,220 --> 00:33:29,200
something's happening can you see

00:33:27,020 --> 00:33:29,200
anything

00:33:45,120 --> 00:33:53,470
like does anybody have any further

00:33:48,820 --> 00:33:53,950
questions yes David see that one more

00:33:53,470 --> 00:33:57,070
time

00:33:53,950 --> 00:33:58,960
oh the raffle yes at the booth we have a

00:33:57,070 --> 00:34:01,240
couple of copies of Rudy Strife's

00:33:58,960 --> 00:34:03,340
excellent book on the octo project we

00:34:01,240 --> 00:34:05,230
raffling one off today one at the booth

00:34:03,340 --> 00:34:11,880
crawl and one tomorrow so stop by and

00:34:05,230 --> 00:34:14,200
get a raffle ticket so I have a question

00:34:11,880 --> 00:34:17,020
sort of related to a question asked

00:34:14,200 --> 00:34:18,940
earlier about docker is it possible to

00:34:17,020 --> 00:34:20,710
have a base docker image that does

00:34:18,940 --> 00:34:22,150
around Yocto I'm not quite sure what

00:34:20,710 --> 00:34:23,740
that would mean considering you don't

00:34:22,150 --> 00:34:27,520
really have a package manager in Yaka

00:34:23,740 --> 00:34:27,940
octo but it still could potentially be

00:34:27,520 --> 00:34:30,220
useful

00:34:27,940 --> 00:34:32,050
also if you have recommendations on just

00:34:30,220 --> 00:34:33,820
a what training courses would be best

00:34:32,050 --> 00:34:38,230
for octo that would also be really

00:34:33,820 --> 00:34:39,820
useful I might be able to answer the

00:34:38,230 --> 00:34:44,770
basics on that one but did you guys

00:34:39,820 --> 00:34:48,070
wanted wanted to take that one okay okay

00:34:44,770 --> 00:34:49,780
so um the question was is it possible to

00:34:48,070 --> 00:34:51,640
have a base docker image that is running

00:34:49,780 --> 00:34:54,550
the octo and by by that I think what you

00:34:51,640 --> 00:34:57,850
mean is aid running Linux that was

00:34:54,550 --> 00:34:58,840
created with the octo project that's

00:34:57,850 --> 00:35:01,720
certainly possible

00:34:58,840 --> 00:35:04,930
I mean people run Linux in in containers

00:35:01,720 --> 00:35:06,370
very easily we do not have a we were

00:35:04,930 --> 00:35:07,450
talking about a package management and

00:35:06,370 --> 00:35:11,470
that might be a more interesting

00:35:07,450 --> 00:35:19,980
question about package package upgrades

00:35:11,470 --> 00:35:22,030
you mean and updates I thought there was

00:35:19,980 --> 00:35:24,250
typically with docker you have your

00:35:22,030 --> 00:35:25,930
docker file and you're using apt or

00:35:24,250 --> 00:35:27,730
whatever other package manager within

00:35:25,930 --> 00:35:29,980
your docker file to be like include all

00:35:27,730 --> 00:35:31,750
this stuff in there with Yocto I mean

00:35:29,980 --> 00:35:34,360
obviously a system isn't built that way

00:35:31,750 --> 00:35:36,310
so I'm not really sure like how you

00:35:34,360 --> 00:35:37,930
would make a base image usable like how

00:35:36,310 --> 00:35:40,090
would you get everything you needed into

00:35:37,930 --> 00:35:42,130
there I guess you could copy precompiled

00:35:40,090 --> 00:35:45,340
binaries and do it from like the system

00:35:42,130 --> 00:35:47,110
you're building the docker from so I

00:35:45,340 --> 00:35:50,460
just wonder if anyone has done that or

00:35:47,110 --> 00:35:50,460
what the thoughts on that were

00:35:54,080 --> 00:35:59,130
so I'm trying to remember if we've done

00:35:57,810 --> 00:36:02,870
exactly what you're saying but it's

00:35:59,130 --> 00:36:05,430
certainly possible to take one of the

00:36:02,870 --> 00:36:06,840
published artifacts that would be in a

00:36:05,430 --> 00:36:10,170
quorum and minimal quorum it's odd oh

00:36:06,840 --> 00:36:12,510
and actually create a docker container

00:36:10,170 --> 00:36:14,690
out of that I don't remember for a fact

00:36:12,510 --> 00:36:18,900
if we've done that or not

00:36:14,690 --> 00:36:21,510
so there are our unn github slash crops

00:36:18,900 --> 00:36:22,980
there are containers to run the tool

00:36:21,510 --> 00:36:23,760
chain so there's a container

00:36:22,980 --> 00:36:26,640
that'll run

00:36:23,760 --> 00:36:27,720
the you know bit bacon all those

00:36:26,640 --> 00:36:29,600
things for you but that's a different

00:36:27,720 --> 00:36:32,640
that's not what you're talking about

00:36:29,600 --> 00:36:36,740
but we again what I said earlier we do

00:36:32,640 --> 00:36:39,870
have the container images or image class

00:36:36,740 --> 00:36:42,840
capable of generating an image from

00:36:39,870 --> 00:36:46,770
Yocto from a Yocto based build system or

00:36:42,840 --> 00:36:47,940
openembedded based built system so the

00:36:46,770 --> 00:36:50,760
second part of your question was about

00:36:47,940 --> 00:36:52,380
package management so we actually our

00:36:50,760 --> 00:36:55,650
package management sort of agnostic

00:36:52,380 --> 00:36:58,860
because we actually support Debbie and

00:36:55,650 --> 00:37:01,680
packaging rpm packaging and low package

00:36:58,860 --> 00:37:04,590
so there is indeed package management

00:37:01,680 --> 00:37:05,820
there the part that most people who are

00:37:04,590 --> 00:37:08,550
used to traditional district

00:37:05,820 --> 00:37:10,820
distributions don't quite get is where

00:37:08,550 --> 00:37:13,020
you're building your own distribution so

00:37:10,820 --> 00:37:14,580
your distribution that you're building

00:37:13,020 --> 00:37:17,160
as we were talking about earlier or

00:37:14,580 --> 00:37:19,890
alluding to earlier is based on a

00:37:17,160 --> 00:37:22,380
particular kernel a particular GCC

00:37:19,890 --> 00:37:23,970
version a particular G Lib C version or

00:37:22,380 --> 00:37:25,440
muscle or whatever you're using right

00:37:23,970 --> 00:37:27,660
but all of these things are really

00:37:25,440 --> 00:37:29,610
really super important to whether those

00:37:27,660 --> 00:37:33,620
binaries that you've created in your

00:37:29,610 --> 00:37:37,800
package feed are going to work or not so

00:37:33,620 --> 00:37:40,890
there's also an issue of anybody

00:37:37,800 --> 00:37:42,780
actually producing binary packages for

00:37:40,890 --> 00:37:46,700
public consumption because you are now

00:37:42,780 --> 00:37:50,250
signing on to a different kind of legal

00:37:46,700 --> 00:37:51,720
implication than you were when you're

00:37:50,250 --> 00:37:54,780
just providing the source code in order

00:37:51,720 --> 00:37:57,630
to build that and so this is sort of an

00:37:54,780 --> 00:38:00,030
issue that that the Yocto project itself

00:37:57,630 --> 00:38:02,430
would have we don't really have a path

00:38:00,030 --> 00:38:05,130
to providing a package feed that you

00:38:02,430 --> 00:38:06,240
could then go and point to but we can we

00:38:05,130 --> 00:38:08,580
have

00:38:06,240 --> 00:38:11,610
I think it's in tips and tricks there's

00:38:08,580 --> 00:38:13,440
a a thing that talks about package feeds

00:38:11,610 --> 00:38:14,940
and how to how to actually generate your

00:38:13,440 --> 00:38:17,760
own it's quite it's actually quite

00:38:14,940 --> 00:38:21,030
simple to do that and then you could use

00:38:17,760 --> 00:38:22,530
that bin in da core did so if let's say

00:38:21,030 --> 00:38:25,320
inside your company you're inside your

00:38:22,530 --> 00:38:26,730
entity you could create your own package

00:38:25,320 --> 00:38:28,440
feed you know that everybody's on the

00:38:26,730 --> 00:38:29,610
same version the kernel and GCC and

00:38:28,440 --> 00:38:31,860
everything so none of those things are

00:38:29,610 --> 00:38:34,290
going to break and then they can use

00:38:31,860 --> 00:38:37,310
their own use that package feed either

00:38:34,290 --> 00:38:39,990
to update their own images or a VM or

00:38:37,310 --> 00:38:48,360
docker container or whatever so that's

00:38:39,990 --> 00:38:49,680
definitely possible I I do I don't think

00:38:48,360 --> 00:38:51,150
I just don't think we've gone all the

00:38:49,680 --> 00:38:52,230
way there I mean we of course we

00:38:51,150 --> 00:38:53,640
intended to you I just don't think we've

00:38:52,230 --> 00:38:56,970
gone all the way to exactly the model

00:38:53,640 --> 00:38:59,730
you're talking about I would also say

00:38:56,970 --> 00:39:01,110
that most likely it's a you know Wind

00:38:59,730 --> 00:39:03,869
River or somebody you know some of these

00:39:01,110 --> 00:39:05,460
OS fees are indeed gonna have package

00:39:03,869 --> 00:39:08,010
feeds and and other things like that

00:39:05,460 --> 00:39:09,960
available so so there's a different once

00:39:08,010 --> 00:39:11,490
you go to the commercial side where it's

00:39:09,960 --> 00:39:13,830
you're paying for the licensing and

00:39:11,490 --> 00:39:16,140
everything they have gone to that extra

00:39:13,830 --> 00:39:23,280
hurdle to do the legal stuff so there's

00:39:16,140 --> 00:39:25,650
there's just a difference there so just

00:39:23,280 --> 00:39:28,050
speaking from some limited experience

00:39:25,650 --> 00:39:29,760
you can certainly use Yocto to build you

00:39:28,050 --> 00:39:32,510
know the root file system and then

00:39:29,760 --> 00:39:35,460
docker file you can build a docker image

00:39:32,510 --> 00:39:37,590
with just a root filesystem and no need

00:39:35,460 --> 00:39:40,020
to run additional steps to populate any

00:39:37,590 --> 00:39:43,200
additional packages or configurations so

00:39:40,020 --> 00:39:47,760
there is no need to also have a package

00:39:43,200 --> 00:39:50,040
manager in the docker image that resin I

00:39:47,760 --> 00:39:51,990
owe is one company who does some work in

00:39:50,040 --> 00:39:53,940
this space and they generate docker

00:39:51,990 --> 00:39:58,380
images in their build system which is

00:39:53,940 --> 00:40:00,270
based on Yocto although I'm personally

00:39:58,380 --> 00:40:03,330
also curious about the work being done

00:40:00,270 --> 00:40:05,910
in core for this generation of these

00:40:03,330 --> 00:40:09,600
images there's some other challenges for

00:40:05,910 --> 00:40:14,190
example configuring services inside of a

00:40:09,600 --> 00:40:15,810
container and so there's a variety of

00:40:14,190 --> 00:40:19,109
other interesting topics that come from

00:40:15,810 --> 00:40:21,950
generating container images and the

00:40:19,109 --> 00:40:21,950
Yocto build system

00:40:23,750 --> 00:40:28,710
so that sounds like some great ideas to

00:40:26,640 --> 00:40:34,650
put into the wish list for future

00:40:28,710 --> 00:40:37,170
releases and I'm exactly so I know we we

00:40:34,650 --> 00:40:39,690
it was a couple of releases ago so it's

00:40:37,170 --> 00:40:44,190
about a year ago that we got the basic

00:40:39,690 --> 00:40:46,590
container image stuff in there but I we

00:40:44,190 --> 00:40:49,740
definitely did not go a lot further with

00:40:46,590 --> 00:40:52,280
with the container image class so that

00:40:49,740 --> 00:40:55,950
that's certainly a spot that could be

00:40:52,280 --> 00:40:57,390
interesting now and also I think you

00:40:55,950 --> 00:40:58,800
know I think the world has changed in

00:40:57,390 --> 00:41:01,410
that direction a lot more than it was

00:40:58,800 --> 00:41:03,930
even a year ago so it's it's an

00:41:01,410 --> 00:41:06,120
interesting concept to think about

00:41:03,930 --> 00:41:08,310
adding more support for that but we do

00:41:06,120 --> 00:41:09,990
have a lot of challenges with with what

00:41:08,310 --> 00:41:11,550
we can support and what we can add so

00:41:09,990 --> 00:41:13,970
you know we just have to figure out what

00:41:11,550 --> 00:41:17,480
the priority is are and things like that

00:41:13,970 --> 00:41:17,480
are you ready

00:41:23,210 --> 00:41:40,680
training yes so Linux Foundation has

00:41:27,020 --> 00:41:43,020
training we have a boatload of training

00:41:40,680 --> 00:41:45,150
sources there if anybody else is putting

00:41:43,020 --> 00:41:46,860
on training send us a note and we'll get

00:41:45,150 --> 00:41:49,470
your stuff listed on the website as well

00:41:46,860 --> 00:41:52,110
and you know a big part of that we have

00:41:49,470 --> 00:41:54,300
the Linux Foundation classes listed

00:41:52,110 --> 00:41:58,320
there so in a map of where around the

00:41:54,300 --> 00:42:00,420
world these things are as well and a map

00:41:58,320 --> 00:42:03,540
of consultants that also offer training

00:42:00,420 --> 00:42:06,720
so the new website has a lot of new

00:42:03,540 --> 00:42:12,450
features so keep digging all right with

00:42:06,720 --> 00:42:16,680
that I'd like to introduce one more

00:42:12,450 --> 00:42:19,260
question I'm sorry any plans to support

00:42:16,680 --> 00:42:22,400
the after build on Windows 10 with

00:42:19,260 --> 00:42:22,400
Ubuntu subsystem

00:42:25,320 --> 00:42:32,160
I think it's an interesting idea

00:42:30,600 --> 00:42:39,930
well I mean I don't think we were plans

00:42:32,160 --> 00:42:50,030
it's mostly how it goes okay all right

00:42:39,930 --> 00:42:54,060
which is a demonstration from Fujitsu we

00:42:50,030 --> 00:42:59,900
developed package management for Yocto

00:42:54,060 --> 00:43:07,050
project oh and now we put it to DNF

00:42:59,900 --> 00:43:18,020
this is Yocto project Oh binaries for

00:43:07,050 --> 00:43:18,020
rpms at fast

00:43:20,779 --> 00:43:40,819
mm embarrassment is Arabic script we

00:43:28,259 --> 00:43:49,670
added DNF we added the NF script for

00:43:40,819 --> 00:43:49,670
package management at first in it

00:44:26,489 --> 00:44:51,959
next lunch six DUI and select packages

00:44:41,459 --> 00:44:51,959
in stock ow and installed the package

00:44:56,489 --> 00:45:00,029
it's suitable

00:45:39,010 --> 00:45:57,710
it is installed for Gutierrez this

00:45:54,230 --> 00:46:02,290
option makes source archives and the dis

00:45:57,710 --> 00:46:02,290
option makes PDX archives

00:46:22,390 --> 00:46:36,109
this is installed wizard that's all this

00:46:31,630 --> 00:46:41,260
package manager is opened in github

00:46:36,109 --> 00:46:44,320
please get or join developed with us

00:46:41,260 --> 00:46:44,320
thank you

00:46:44,450 --> 00:46:48,989

YouTube URL: https://www.youtube.com/watch?v=jD9ubplq3P4


