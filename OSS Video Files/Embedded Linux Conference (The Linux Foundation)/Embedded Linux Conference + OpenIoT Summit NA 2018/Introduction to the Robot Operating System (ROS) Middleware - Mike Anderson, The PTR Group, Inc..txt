Title: Introduction to the Robot Operating System (ROS) Middleware - Mike Anderson, The PTR Group, Inc.
Publication date: 2018-03-13
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Introduction to the Robot Operating System (ROS) Middleware - Mike Anderson, The PTR Group, Inc.

 One of the most full-featured middleware for developing robotics platforms is the Robot Operating System (ROS). ROS enjoys a huge community of users and a significant ecosystem of both hardware and software support for the development sophisticated robotics platforms. In this session, you will have an opportunity to learn about ROS its installation on a Linux system and its use in the creation of a small mobile robotic platform. 

About Mike Anderson
Mike Anderson is currently Chief Scientist for The PTR Group, Inc. With over 40 years in the embedded and real-time computing industry, Mike works with a number of RTOS offerings for IoT devices. However, his focus over the past decade is primarily embedded Linux on a number of CPU architectures. As an instructor and consultant, Mike is a regular speaker at the Embedded Linux Conference, OpenIoT Summit and the Embedded Systems Conference as well as other Linux and IoT-oriented conferences. Ongoing projects include several efforts focused on migrating applications from RTOS offerings to real-time enhanced Linux platforms. Additional projects include work with mesh wireless topologies, 6LoWPAN, commercial reverse engineering and multiple robotics projects in working with the FIRST Robotics Program in the high schools.
Captions: 
	00:00:00,000 --> 00:00:05,790
all right so we are now at time we're

00:00:04,290 --> 00:00:10,170
going to go ahead and get started

00:00:05,790 --> 00:00:13,259
I appreciate the intro that that Tim

00:00:10,170 --> 00:00:15,480
gave me I hope that it stands up to that

00:00:13,259 --> 00:00:19,320
my name is Mike Anderson I'm from the

00:00:15,480 --> 00:00:21,869
PGR group I've been speaking here to

00:00:19,320 --> 00:00:25,109
embedded Linux conference now since 2007

00:00:21,869 --> 00:00:26,490
I was looking at my old all my old

00:00:25,109 --> 00:00:28,140
presentations and everything it's like

00:00:26,490 --> 00:00:30,390
yeah yeah so it's been been a while

00:00:28,140 --> 00:00:32,669
since I that I've been speaking here and

00:00:30,390 --> 00:00:34,290
I'm always happy to present additional

00:00:32,669 --> 00:00:38,450
information

00:00:34,290 --> 00:00:41,280
I do have four presentations this week

00:00:38,450 --> 00:00:42,930
this one today at this one right now and

00:00:41,280 --> 00:00:45,210
of course I have another one this

00:00:42,930 --> 00:00:46,920
afternoon on reverse engineering if

00:00:45,210 --> 00:00:48,090
you're interested in finding out what

00:00:46,920 --> 00:00:50,070
reverse engineering is all about

00:00:48,090 --> 00:00:51,539
definitely come to that one that'll be

00:00:50,070 --> 00:00:55,079
fun

00:00:51,539 --> 00:00:58,440
then I'm speaking at I'm doing the gdb

00:00:55,079 --> 00:01:01,680
debugging session at the ale and the

00:00:58,440 --> 00:01:04,860
embedded Linux apprentice Linux engineer

00:01:01,680 --> 00:01:07,110
program tomorrow and then on Wednesday

00:01:04,860 --> 00:01:08,580
I'm doing a thing on sensors and

00:01:07,110 --> 00:01:10,530
everything you wanted to know about

00:01:08,580 --> 00:01:12,600
sensors what they're good for what you

00:01:10,530 --> 00:01:14,250
use them for why you would use a

00:01:12,600 --> 00:01:16,920
particular sensor for a particular type

00:01:14,250 --> 00:01:19,170
of task how you interface them that kind

00:01:16,920 --> 00:01:21,020
of stuff and that'll be on Wednesday all

00:01:19,170 --> 00:01:23,340
right so let's go ahead and get started

00:01:21,020 --> 00:01:26,759
we're here to talk about the robot

00:01:23,340 --> 00:01:28,920
operating system and in particular what

00:01:26,759 --> 00:01:31,860
is it and what does it do and a little

00:01:28,920 --> 00:01:35,759
bit of how it works now understand that

00:01:31,860 --> 00:01:37,710
Roz has been around for a while we'll

00:01:35,759 --> 00:01:41,280
talk about some of that and what led to

00:01:37,710 --> 00:01:43,170
it we'll talk about what Roz is and how

00:01:41,280 --> 00:01:45,930
you go about installing it and then

00:01:43,170 --> 00:01:49,350
testing your installation this is a

00:01:45,930 --> 00:01:51,990
relatively complex system so being able

00:01:49,350 --> 00:01:55,290
to test the actual installation is a key

00:01:51,990 --> 00:01:57,240
piece of success with Roz we'll get into

00:01:55,290 --> 00:01:58,579
some of the components and the concepts

00:01:57,240 --> 00:02:00,840
associated with the operating system

00:01:58,579 --> 00:02:02,460
we'll deal with the computation graph

00:02:00,840 --> 00:02:05,040
and some of the naming conventions and

00:02:02,460 --> 00:02:09,060
then we'll take a look at the work to

00:02:05,040 --> 00:02:11,580
build your first robot and we'll examine

00:02:09,060 --> 00:02:12,569
a publish/subscribe example and then

00:02:11,580 --> 00:02:13,410
we'll finish up with a quick little

00:02:12,569 --> 00:02:17,310
summary here

00:02:13,410 --> 00:02:19,470
so what exactly is Roz and why am i

00:02:17,310 --> 00:02:20,940
playing around with it well the reason

00:02:19,470 --> 00:02:24,600
I'm playing around with it is this

00:02:20,940 --> 00:02:27,780
little robot right here this is a robot

00:02:24,600 --> 00:02:30,900
that's targeted at being able to help

00:02:27,780 --> 00:02:33,120
the elderly it's just a prototype at

00:02:30,900 --> 00:02:37,830
this point but one of the things we find

00:02:33,120 --> 00:02:40,290
in many cases we have older parents that

00:02:37,830 --> 00:02:42,060
want to live by themselves they don't

00:02:40,290 --> 00:02:44,280
want to have they don't want to move

00:02:42,060 --> 00:02:45,840
into some care facility they believe

00:02:44,280 --> 00:02:46,740
they can take care of themselves and

00:02:45,840 --> 00:02:48,510
that's great

00:02:46,740 --> 00:02:50,190
unfortunately sometimes you just need

00:02:48,510 --> 00:02:53,400
something to remind them have you taken

00:02:50,190 --> 00:02:55,440
your medicine today or have you eaten

00:02:53,400 --> 00:02:57,630
lately or any of those sorts of

00:02:55,440 --> 00:02:59,430
questions that would typically be the

00:02:57,630 --> 00:03:02,760
responsibility of a health care giver

00:02:59,430 --> 00:03:04,950
but because they've decided they want to

00:03:02,760 --> 00:03:07,560
continue living on their own that health

00:03:04,950 --> 00:03:10,530
care giver isn't typically available so

00:03:07,560 --> 00:03:16,290
the idea is to have an Alexa enabled

00:03:10,530 --> 00:03:18,840
robot that has a little lidar on the top

00:03:16,290 --> 00:03:21,200
of it that it uses for mapping the bill

00:03:18,840 --> 00:03:24,870
of mapping the area mapping the room and

00:03:21,200 --> 00:03:27,600
it's got a Raspberry Pi in here where

00:03:24,870 --> 00:03:29,610
we're doing most of the processing the

00:03:27,600 --> 00:03:32,250
motor controllers why is it a tank drive

00:03:29,610 --> 00:03:34,770
I just happen to have had my fill of

00:03:32,250 --> 00:03:37,950
wheeled based robots for a while so I

00:03:34,770 --> 00:03:41,130
thought I'd try tank drive the whole

00:03:37,950 --> 00:03:43,560
thing since it's about like that not not

00:03:41,130 --> 00:03:46,620
terribly big the idea is to try and make

00:03:43,560 --> 00:03:49,230
these things so that the individuals can

00:03:46,620 --> 00:03:51,480
interact with it ask it questions order

00:03:49,230 --> 00:03:54,000
pizza that kind of stuff but more

00:03:51,480 --> 00:03:55,650
importantly it is cheap enough that you

00:03:54,000 --> 00:03:57,600
could actually have it have them like

00:03:55,650 --> 00:04:00,870
rumbas where they run around on

00:03:57,600 --> 00:04:03,180
different floors and they can then kind

00:04:00,870 --> 00:04:05,550
of keep an eye on the house without

00:04:03,180 --> 00:04:08,310
having to spend a lot of money for

00:04:05,550 --> 00:04:11,130
caregivers but there are a lot of things

00:04:08,310 --> 00:04:13,590
that when we get into the robot

00:04:11,130 --> 00:04:17,520
operating system we have to understand

00:04:13,590 --> 00:04:19,920
why they created it the idea here is to

00:04:17,520 --> 00:04:23,280
create a general purpose mechanism for

00:04:19,920 --> 00:04:26,280
creating robotic applications now why is

00:04:23,280 --> 00:04:26,880
that needed well for any of you who've

00:04:26,280 --> 00:04:28,170
ever ax

00:04:26,880 --> 00:04:30,570
we built a robot how many of you ever

00:04:28,170 --> 00:04:32,910
built a robot most of you how that's

00:04:30,570 --> 00:04:35,370
great man that's fantastic

00:04:32,910 --> 00:04:37,890
then you know how complicated it is to

00:04:35,370 --> 00:04:40,560
actually get a robot to move motor

00:04:37,890 --> 00:04:42,930
controllers power supplies radio

00:04:40,560 --> 00:04:45,750
controls all the things that go into

00:04:42,930 --> 00:04:48,300
just making a robot simply move around

00:04:45,750 --> 00:04:48,750
the floor is a significant amount of

00:04:48,300 --> 00:04:50,820
work

00:04:48,750 --> 00:04:52,560
so the Raw's operating system is

00:04:50,820 --> 00:04:53,700
actually not really an operating system

00:04:52,560 --> 00:04:56,580
per se

00:04:53,700 --> 00:05:00,170
it really is middleware to try and help

00:04:56,580 --> 00:05:02,970
speed up the development process now

00:05:00,170 --> 00:05:05,240
unfortunately when we deal with humans

00:05:02,970 --> 00:05:08,430
humans take a lot of things for granted

00:05:05,240 --> 00:05:09,900
we walk up to a doorknob and we turn the

00:05:08,430 --> 00:05:12,540
doorknob and we open up the door that

00:05:09,900 --> 00:05:14,910
seems fairly natural to us going up and

00:05:12,540 --> 00:05:17,430
down stairs also seems fairly natural to

00:05:14,910 --> 00:05:21,060
us unfortunately both of those are

00:05:17,430 --> 00:05:22,770
incredibly hard problems for robots just

00:05:21,060 --> 00:05:24,810
being able to grab a hold of the

00:05:22,770 --> 00:05:26,520
doorknob if it's not one of those 88

00:05:24,810 --> 00:05:28,050
style doorknobs if it's an actual

00:05:26,520 --> 00:05:30,420
doorknob just trying to grab a hold of

00:05:28,050 --> 00:05:33,090
the doorknob is a tricky problem and

00:05:30,420 --> 00:05:35,070
certainly going up and down steps is a

00:05:33,090 --> 00:05:38,190
very very difficult problem for robotics

00:05:35,070 --> 00:05:39,960
so one of the things that have focused

00:05:38,190 --> 00:05:41,220
on with this little robot here is again

00:05:39,960 --> 00:05:43,200
to make them cheap enough that you could

00:05:41,220 --> 00:05:45,720
have them like rumbas several of them on

00:05:43,200 --> 00:05:47,550
you know in the house and they could

00:05:45,720 --> 00:05:48,900
then run around and figure out what's

00:05:47,550 --> 00:05:52,170
going on in the house at any one point

00:05:48,900 --> 00:05:53,850
in time of course when we're dealing

00:05:52,170 --> 00:05:56,070
with so many different robotic

00:05:53,850 --> 00:05:59,400
applications we have flying robots we

00:05:56,070 --> 00:06:01,560
have swimming robots of course Roz is

00:05:59,400 --> 00:06:05,910
used in a very famous application for an

00:06:01,560 --> 00:06:09,900
underwater Rover this is all stuff that

00:06:05,910 --> 00:06:11,700
basically an individual or a lab or even

00:06:09,900 --> 00:06:13,830
a university probably could not come up

00:06:11,700 --> 00:06:15,660
with on their own it has to be a

00:06:13,830 --> 00:06:17,520
collaborative effort and we have to be

00:06:15,660 --> 00:06:20,100
able to kind of share things back and

00:06:17,520 --> 00:06:22,850
forth in a framework that allows us to

00:06:20,100 --> 00:06:26,220
actually reuse somebody else's software

00:06:22,850 --> 00:06:28,020
so from the history perspective this

00:06:26,220 --> 00:06:30,930
actually this project actually started

00:06:28,020 --> 00:06:33,090
back in 2007 as an outgrowth of some

00:06:30,930 --> 00:06:35,880
work at Stanford University

00:06:33,090 --> 00:06:37,979
they actually sponsored some of the work

00:06:35,880 --> 00:06:39,419
it was a more of a hobbyist style

00:06:37,979 --> 00:06:41,099
approach

00:06:39,419 --> 00:06:44,370
an organization called Willow Garage

00:06:41,099 --> 00:06:46,770
they're a robotics incubator they

00:06:44,370 --> 00:06:48,330
produced a robot known as the pr2 which

00:06:46,770 --> 00:06:50,699
is what you see right there and actually

00:06:48,330 --> 00:06:53,159
there was a PR - in one of the charts

00:06:50,699 --> 00:06:57,449
one of the slides at the keynote this

00:06:53,159 --> 00:07:00,060
morning and the PR - is a relatively

00:06:57,449 --> 00:07:02,719
complicated robot it has vision it has

00:07:00,060 --> 00:07:06,569
obviously manipulators it's got grippers

00:07:02,719 --> 00:07:09,930
it's mobile it can turn it can recognize

00:07:06,569 --> 00:07:11,129
things and people so what they wanted to

00:07:09,930 --> 00:07:13,319
do is they wanted to create an

00:07:11,129 --> 00:07:15,659
environment that would allow folks to be

00:07:13,319 --> 00:07:18,539
able to share develop and share

00:07:15,659 --> 00:07:20,909
individual pieces of code now they

00:07:18,539 --> 00:07:23,400
licensed it under the permissive BSD

00:07:20,909 --> 00:07:26,190
license now having being licensed under

00:07:23,400 --> 00:07:29,759
permissive BSD it gives you the ability

00:07:26,190 --> 00:07:31,529
to release binaries without necessarily

00:07:29,759 --> 00:07:33,180
releasing the sources but most of the

00:07:31,529 --> 00:07:35,639
community of course does release their

00:07:33,180 --> 00:07:37,740
source however not all of the modules

00:07:35,639 --> 00:07:38,879
for Rozz are actually covered under the

00:07:37,740 --> 00:07:40,680
BSD license

00:07:38,879 --> 00:07:42,990
some of them are under apache software

00:07:40,680 --> 00:07:45,779
license version - summer GPL some are

00:07:42,990 --> 00:07:49,139
MIT license so when you're playing

00:07:45,779 --> 00:07:51,479
around with roz as a it's just kind of

00:07:49,139 --> 00:07:52,740
something a learning process then you

00:07:51,479 --> 00:07:54,000
don't really have to pay all that much

00:07:52,740 --> 00:07:56,190
attention to the licenses because

00:07:54,000 --> 00:07:58,080
they're all open-source but if you're

00:07:56,190 --> 00:07:59,819
planning on doing something commercially

00:07:58,080 --> 00:08:02,370
then you absolutely have to pay

00:07:59,819 --> 00:08:05,039
attention to the licensing to make sure

00:08:02,370 --> 00:08:07,680
that you don't run afoul of that now Roz

00:08:05,039 --> 00:08:09,690
is supported by the open-source robotics

00:08:07,680 --> 00:08:13,830
foundation there at OS our foundation

00:08:09,690 --> 00:08:15,990
org great organization good to get some

00:08:13,830 --> 00:08:17,389
you know work with those folks and try

00:08:15,990 --> 00:08:21,449
to figure out exactly what they're up to

00:08:17,389 --> 00:08:22,860
they're trying to put roz forward as an

00:08:21,449 --> 00:08:25,199
operating system that could use for

00:08:22,860 --> 00:08:27,839
multiple different applications now

00:08:25,199 --> 00:08:30,979
installing Roz the latest and greatest

00:08:27,839 --> 00:08:35,250
version of Roz came out in May of 2017

00:08:30,979 --> 00:08:37,500
it's called the lunar loggerhead you

00:08:35,250 --> 00:08:39,839
will find that all of the Roz releases

00:08:37,500 --> 00:08:42,659
are named after Turtles of some sort or

00:08:39,839 --> 00:08:44,760
another in alphabetical order

00:08:42,659 --> 00:08:46,830
so the kinetic comm a

00:08:44,760 --> 00:08:50,340
and the lunar loggerhead and I'm not

00:08:46,830 --> 00:08:52,200
sure what M is going to be but the thing

00:08:50,340 --> 00:08:54,390
about the way Roz has been put together

00:08:52,200 --> 00:08:56,700
if you are running a Debian distribution

00:08:54,390 --> 00:08:59,040
you are in good shape

00:08:56,700 --> 00:09:00,990
Debian distributions are the primary

00:08:59,040 --> 00:09:03,600
mechanism that they use on their website

00:09:00,990 --> 00:09:05,400
for doing their installations they have

00:09:03,600 --> 00:09:08,880
Debian repos so whether you're using

00:09:05,400 --> 00:09:11,400
Ubuntu Linux Mint Debian or one of the

00:09:08,880 --> 00:09:13,560
derivative derivative distributions

00:09:11,400 --> 00:09:15,840
you're in good shape there is some

00:09:13,560 --> 00:09:19,260
experimental support right now in lunar

00:09:15,840 --> 00:09:23,100
loggerhead for Gen 2 and Mac OS and of

00:09:19,260 --> 00:09:24,030
course on Yocto the nice thing about the

00:09:23,100 --> 00:09:27,900
way they've done

00:09:24,030 --> 00:09:36,090
ra's is they have associated with that

00:09:27,900 --> 00:09:42,060
let's see if I can pull it up here where

00:09:36,090 --> 00:09:44,130
did it go maybe there yes there we go so

00:09:42,060 --> 00:09:46,530
these are the installations that they

00:09:44,130 --> 00:09:48,510
support right now they've got to of

00:09:46,530 --> 00:09:50,400
course Debian stretch

00:09:48,510 --> 00:09:52,410
the nice thing that they have which is

00:09:50,400 --> 00:09:55,890
kind of special is that they have

00:09:52,410 --> 00:09:57,510
support for arm in the case of the Abood

00:09:55,890 --> 00:09:59,850
to distribution of course that would be

00:09:57,510 --> 00:10:02,400
the mate point to distribution right now

00:09:59,850 --> 00:10:05,250
on the Raspberry Pi they support both

00:10:02,400 --> 00:10:07,830
arm hf the hardware float and the 64-bit

00:10:05,250 --> 00:10:10,800
arm architectures in addition to the

00:10:07,830 --> 00:10:13,440
standard AMD 64 type architectures this

00:10:10,800 --> 00:10:17,280
is the 1604 release they have not moved

00:10:13,440 --> 00:10:20,220
this forward on either the yakety or

00:10:17,280 --> 00:10:21,690
zesty releases so I'm assuming that

00:10:20,220 --> 00:10:22,890
probably what will happen when they come

00:10:21,690 --> 00:10:25,380
out with their next release they're

00:10:22,890 --> 00:10:28,080
probably going to jump and they'll jump

00:10:25,380 --> 00:10:31,320
to Bionic beaver which is the next long

00:10:28,080 --> 00:10:33,330
term support release so that'll be 1804

00:10:31,320 --> 00:10:35,640
that'll come out next month as a matter

00:10:33,330 --> 00:10:38,240
of fact I hope if everything is on time

00:10:35,640 --> 00:10:40,440
correctly but you'll notice there's no

00:10:38,240 --> 00:10:43,980
explicit support here for any of the

00:10:40,440 --> 00:10:45,660
Fedora or rpm based distributions there

00:10:43,980 --> 00:10:47,730
are individuals who've taken the code

00:10:45,660 --> 00:10:50,690
and repackaged it for those but they're

00:10:47,730 --> 00:10:54,810
not supported officially here at the roz

00:10:50,690 --> 00:10:56,630
facility at the retros website now when

00:10:54,810 --> 00:10:58,410
you get ready to do the installation

00:10:56,630 --> 00:10:59,850
it's a fairly

00:10:58,410 --> 00:11:02,129
straightforward installation if you've

00:10:59,850 --> 00:11:05,459
ever done any Debian distributions

00:11:02,129 --> 00:11:08,040
any installations of Debian PPAs you add

00:11:05,459 --> 00:11:09,569
your GPG key you add the sources you do

00:11:08,040 --> 00:11:11,430
an app get update app get install

00:11:09,569 --> 00:11:12,810
sequence the typical sort of thing we'd

00:11:11,430 --> 00:11:15,449
expect to see with any W and

00:11:12,810 --> 00:11:17,699
distribution if you follow this link

00:11:15,449 --> 00:11:19,500
that you see here that link will

00:11:17,699 --> 00:11:23,509
actually lead you through the process of

00:11:19,500 --> 00:11:25,550
doing this in Ubuntu in the 1604 release

00:11:23,509 --> 00:11:28,319
so all that's pretty straightforward

00:11:25,550 --> 00:11:29,639
once we get it installed we need to make

00:11:28,319 --> 00:11:32,100
sure that everything installed correctly

00:11:29,639 --> 00:11:33,660
now normally what we're going to do when

00:11:32,100 --> 00:11:35,939
we do an install if it's gonna be on a

00:11:33,660 --> 00:11:39,689
desktop based machine then we'll do a

00:11:35,939 --> 00:11:41,550
roz desktop full installation that will

00:11:39,689 --> 00:11:45,990
bring down all of the extra goodies

00:11:41,550 --> 00:11:48,120
there the 3d visualization tools gazebo

00:11:45,990 --> 00:11:49,439
which is a 3d simulation environment

00:11:48,120 --> 00:11:52,920
will show you some examples of that a

00:11:49,439 --> 00:11:54,810
little bit later here and if you do the

00:11:52,920 --> 00:11:57,300
desktop full it brings all those things

00:11:54,810 --> 00:11:59,040
down if you do the normal desktop it

00:11:57,300 --> 00:12:01,290
brings RV's down but doesn't bring

00:11:59,040 --> 00:12:03,180
gazebo and then there are of course

00:12:01,290 --> 00:12:05,509
individual pieces that you can piece

00:12:03,180 --> 00:12:10,100
this thing out understand that the Raw's

00:12:05,509 --> 00:12:13,949
distribution is though several dozen

00:12:10,100 --> 00:12:15,810
individual packages so being able to

00:12:13,949 --> 00:12:17,819
select which packages you're really

00:12:15,810 --> 00:12:20,310
interested in is a challenge in and of

00:12:17,819 --> 00:12:22,680
itself but if you go with the desktop

00:12:20,310 --> 00:12:24,089
distribution just the desktop install

00:12:22,680 --> 00:12:26,160
it'll bring down most of the meta pea

00:12:24,089 --> 00:12:27,569
cuz your packages that you need the

00:12:26,160 --> 00:12:28,889
desktop distribution is a meta package

00:12:27,569 --> 00:12:31,880
that brings down most of the ones that

00:12:28,889 --> 00:12:34,139
you need for doing a typical work so now

00:12:31,880 --> 00:12:36,060
assuming that we have it installed we'll

00:12:34,139 --> 00:12:38,490
use the roz depth command

00:12:36,060 --> 00:12:40,800
ra's definite it has to be done as route

00:12:38,490 --> 00:12:42,870
so this is one of the few places

00:12:40,800 --> 00:12:45,660
actually in roz where we have to be

00:12:42,870 --> 00:12:48,569
super user the roz definite will then

00:12:45,660 --> 00:12:49,860
initialize the repos and make sure that

00:12:48,569 --> 00:12:51,660
it understands what packages are

00:12:49,860 --> 00:12:53,309
available to it and then we'll do a Ross

00:12:51,660 --> 00:12:55,709
DEP update and that will then pull down

00:12:53,309 --> 00:12:58,680
whatever changes may have been made in

00:12:55,709 --> 00:13:00,509
the meantime we want to make sure that

00:12:58,680 --> 00:13:03,809
we have our environment set up there is

00:13:00,509 --> 00:13:06,209
a set up dot bash that they include if

00:13:03,809 --> 00:13:07,589
you understand how roz works basically

00:13:06,209 --> 00:13:10,620
there's a lot of Python in the

00:13:07,589 --> 00:13:11,400
background and roz so although it works

00:13:10,620 --> 00:13:15,120
quite nice

00:13:11,400 --> 00:13:17,850
with both Python and C and C++ most of

00:13:15,120 --> 00:13:19,080
the infrastructure here is Python so we

00:13:17,850 --> 00:13:21,540
need to make sure that we have the

00:13:19,080 --> 00:13:23,400
correct sourcing of the paths to make

00:13:21,540 --> 00:13:25,500
sure we pick up the roz distribution and

00:13:23,400 --> 00:13:28,140
we get this thing called the catkin

00:13:25,500 --> 00:13:30,900
build system we'll talk about that here

00:13:28,140 --> 00:13:33,779
at a moment if you want to be able to

00:13:30,900 --> 00:13:36,660
just run rows robots that's all you have

00:13:33,779 --> 00:13:38,070
to do if you if that's all you're

00:13:36,660 --> 00:13:39,990
interested in and you just want to

00:13:38,070 --> 00:13:42,060
deploy a robot then hey that's great

00:13:39,990 --> 00:13:43,800
that's that's all you do and as a matter

00:13:42,060 --> 00:13:46,410
of fact you'll notice they have an

00:13:43,800 --> 00:13:49,740
option here that says select your robot

00:13:46,410 --> 00:13:52,890
and so there are a number of robots that

00:13:49,740 --> 00:13:54,720
are available it turns out that the pr2

00:13:52,890 --> 00:13:57,300
robot that you saw there is several

00:13:54,720 --> 00:13:59,430
thousand dollars so it's kind of out of

00:13:57,300 --> 00:14:02,580
the range of most hobbyists but

00:13:59,430 --> 00:14:03,810
nonetheless you can select a robot and

00:14:02,580 --> 00:14:07,100
then it'll pull down all the packages

00:14:03,810 --> 00:14:09,600
associated with that particular robot so

00:14:07,100 --> 00:14:10,320
but if you're going to be really working

00:14:09,600 --> 00:14:13,170
with Rozz

00:14:10,320 --> 00:14:16,020
the whole reason you got this is to do

00:14:13,170 --> 00:14:18,150
new code so we need to make sure that we

00:14:16,020 --> 00:14:21,180
have some additional packages installed

00:14:18,150 --> 00:14:24,510
again these are typical packages that we

00:14:21,180 --> 00:14:27,000
would find in a and Anna Bunton 1604

00:14:24,510 --> 00:14:29,940
xenial distribution we see the Python

00:14:27,000 --> 00:14:31,650
roz install Rozz install generator WS

00:14:29,940 --> 00:14:34,080
tool and of course the infamous build

00:14:31,650 --> 00:14:35,070
essential if you've ever built a kernel

00:14:34,080 --> 00:14:36,630
then you know already have built

00:14:35,070 --> 00:14:39,510
essential in there but in any case

00:14:36,630 --> 00:14:40,500
that's just ready to that's the

00:14:39,510 --> 00:14:43,230
additional stuff you have to have in

00:14:40,500 --> 00:14:45,180
order to be able to build code now the

00:14:43,230 --> 00:14:48,270
at this point we're ready to test the

00:14:45,180 --> 00:14:50,220
actual installation so the first piece

00:14:48,270 --> 00:14:52,260
of this is just to check to make sure

00:14:50,220 --> 00:14:54,080
that we have roz installed now we're

00:14:52,260 --> 00:14:56,190
gonna actually try and build something

00:14:54,080 --> 00:14:59,370
well build something really quick

00:14:56,190 --> 00:15:00,750
actually it's a it's an empty build just

00:14:59,370 --> 00:15:03,620
to make sure that the cat can build

00:15:00,750 --> 00:15:06,990
system is actually working correctly now

00:15:03,620 --> 00:15:09,839
where does named cat can come from turns

00:15:06,990 --> 00:15:12,810
out it is a tale shaped flower cluster

00:15:09,839 --> 00:15:14,880
found on willow trees which of course

00:15:12,810 --> 00:15:18,209
Willow Garage was the place where this

00:15:14,880 --> 00:15:20,730
all started so it's kind of an homage to

00:15:18,209 --> 00:15:23,640
a willow garage so it's called the cat

00:15:20,730 --> 00:15:24,840
can build system as if we needed another

00:15:23,640 --> 00:15:27,540
build system

00:15:24,840 --> 00:15:29,220
yes this is yet another build system now

00:15:27,540 --> 00:15:30,720
at this point we want to try and simple

00:15:29,220 --> 00:15:33,600
build so what we're gonna do is we want

00:15:30,720 --> 00:15:36,090
to create a directory called catkin WS

00:15:33,600 --> 00:15:36,900
slash source this will typically be in

00:15:36,090 --> 00:15:38,610
our home directory

00:15:36,900 --> 00:15:41,070
and then we'll CD into that directory

00:15:38,610 --> 00:15:42,960
and we'll initialize a workspace now

00:15:41,070 --> 00:15:44,940
catkin a network space is going to

00:15:42,960 --> 00:15:48,000
create some infrastructure for us

00:15:44,940 --> 00:15:50,490
basically a few directory entries and at

00:15:48,000 --> 00:15:53,070
that point we can then CD back down to

00:15:50,490 --> 00:15:56,220
the catkin WS base directory and issue

00:15:53,070 --> 00:15:59,310
cat can make if all goes well it should

00:15:56,220 --> 00:16:02,120
spit out about 25 or 30 lines worth of

00:15:59,310 --> 00:16:05,040
output that indicate a successful build

00:16:02,120 --> 00:16:06,060
if something fails obviously you need to

00:16:05,040 --> 00:16:08,850
go back and try and figure out what that

00:16:06,060 --> 00:16:11,010
is but generally if you just follow the

00:16:08,850 --> 00:16:12,330
instructions up to this point you're

00:16:11,010 --> 00:16:15,120
going to be able to get past this

00:16:12,330 --> 00:16:16,800
initial build no problem and it should

00:16:15,120 --> 00:16:17,910
take you all of about well the longest

00:16:16,800 --> 00:16:20,070
amount of time that it takes is the

00:16:17,910 --> 00:16:22,170
actual installation of roz itself

00:16:20,070 --> 00:16:25,440
because there are several dozen packages

00:16:22,170 --> 00:16:28,890
involved the cat can make itself is over

00:16:25,440 --> 00:16:32,070
in about 10 seconds or so not a whole

00:16:28,890 --> 00:16:35,370
lot of stuff involved in that now at its

00:16:32,070 --> 00:16:38,550
core ra's is a publish/subscribe message

00:16:35,370 --> 00:16:41,790
passing middleware so what happens here

00:16:38,550 --> 00:16:43,800
we will describe messages we'll describe

00:16:41,790 --> 00:16:47,130
a format for a message and then that

00:16:43,800 --> 00:16:49,650
message will be published from one set

00:16:47,130 --> 00:16:52,440
of nodes and the node is what they call

00:16:49,650 --> 00:16:54,510
their programs will publish from one set

00:16:52,440 --> 00:16:56,940
of nodes and then we will subscribe to

00:16:54,510 --> 00:16:58,590
these things from other nodes the

00:16:56,940 --> 00:17:02,040
communications in this particular model

00:16:58,590 --> 00:17:05,130
is asynchronous so that actually works

00:17:02,040 --> 00:17:06,570
well for a lot of sensors a lot of

00:17:05,130 --> 00:17:10,110
things that could potentially provide

00:17:06,570 --> 00:17:11,880
data at any time however it does not

00:17:10,110 --> 00:17:15,390
work all that well when you actually

00:17:11,880 --> 00:17:16,860
need lockstep behavior so in order to

00:17:15,390 --> 00:17:18,959
handle lockstep behavior they have

00:17:16,860 --> 00:17:20,459
another type of interface called a

00:17:18,959 --> 00:17:22,230
service interface and we'll talk about

00:17:20,459 --> 00:17:24,390
that in a moment but the service

00:17:22,230 --> 00:17:27,630
interface is remote procedure call based

00:17:24,390 --> 00:17:29,370
so if you need that lockstep don't go

00:17:27,630 --> 00:17:31,440
beyond this point until after this has

00:17:29,370 --> 00:17:32,100
completed there's a mechanism for doing

00:17:31,440 --> 00:17:34,860
that

00:17:32,100 --> 00:17:37,430
although the normal behavior here is to

00:17:34,860 --> 00:17:40,670
simply use a synchronous pub

00:17:37,430 --> 00:17:43,280
subscribe now the modules they publish

00:17:40,670 --> 00:17:45,350
the topics and of course in a typical

00:17:43,280 --> 00:17:47,360
pub/sub environment you've got topics

00:17:45,350 --> 00:17:49,610
people subscribe to topics when you

00:17:47,360 --> 00:17:50,960
publish a topic the topic then it'll let

00:17:49,610 --> 00:17:52,400
folks know that the topic has been

00:17:50,960 --> 00:17:53,330
published and they'll be able to go read

00:17:52,400 --> 00:17:55,940
it

00:17:53,330 --> 00:17:59,480
communication is total message passing

00:17:55,940 --> 00:18:02,000
here because it is message passing there

00:17:59,480 --> 00:18:03,620
is no global memory that people can

00:18:02,000 --> 00:18:05,510
somehow write things into and pass a

00:18:03,620 --> 00:18:07,130
lots of data although there is a

00:18:05,510 --> 00:18:10,460
parameter server we'll talk about that

00:18:07,130 --> 00:18:12,080
in a moment but the idea here is by

00:18:10,460 --> 00:18:13,880
forcing everyone to use a message

00:18:12,080 --> 00:18:16,190
passing interface we get nice clean

00:18:13,880 --> 00:18:18,170
interfaces if it's not in the message

00:18:16,190 --> 00:18:19,820
passing format if it's not part of the

00:18:18,170 --> 00:18:23,090
interface definition language then

00:18:19,820 --> 00:18:24,860
basically it doesn't happen so in some

00:18:23,090 --> 00:18:27,410
ways they're actually trying to force

00:18:24,860 --> 00:18:29,450
you to do a better job at engineering

00:18:27,410 --> 00:18:32,390
your robots certainly I've built enough

00:18:29,450 --> 00:18:35,210
robots over the years that in some cases

00:18:32,390 --> 00:18:36,770
they're kind of slammed together and not

00:18:35,210 --> 00:18:41,420
necessarily as robust as they probably

00:18:36,770 --> 00:18:46,220
should have been now the communications

00:18:41,420 --> 00:18:49,460
is basically running on top of TCP so we

00:18:46,220 --> 00:18:51,110
have TCP connections there is an option

00:18:49,460 --> 00:18:53,750
to get into UDP if you need that for

00:18:51,110 --> 00:18:56,510
whatever reason but that is the primary

00:18:53,750 --> 00:18:58,310
mechanism that we use it does support

00:18:56,510 --> 00:19:00,470
the recording and playback of messages

00:18:58,310 --> 00:19:01,940
now this is interesting the actual

00:19:00,470 --> 00:19:04,730
recording of messages goes into

00:19:01,940 --> 00:19:06,380
something called a bag and what will

00:19:04,730 --> 00:19:08,980
happen is we can then kind of post

00:19:06,380 --> 00:19:11,180
process the bag and then use that to

00:19:08,980 --> 00:19:13,310
regenerate those messages over and over

00:19:11,180 --> 00:19:14,870
and over again for regression testing of

00:19:13,310 --> 00:19:17,030
course that's also something that you

00:19:14,870 --> 00:19:18,740
end up doing a lot of with robotics is a

00:19:17,030 --> 00:19:20,270
lot of regression testing because you

00:19:18,740 --> 00:19:22,160
always thought that you had it right the

00:19:20,270 --> 00:19:24,830
first time and it never quite seems to

00:19:22,160 --> 00:19:26,330
be what you thought it was so that's

00:19:24,830 --> 00:19:29,510
always something that we need to be able

00:19:26,330 --> 00:19:30,620
to take into account there is as I

00:19:29,510 --> 00:19:33,200
mentioned support for remote procedure

00:19:30,620 --> 00:19:36,530
calls and there is a distributed

00:19:33,200 --> 00:19:39,170
parameter system which allows me to have

00:19:36,530 --> 00:19:41,180
a master node the master node is

00:19:39,170 --> 00:19:43,670
basically the clearinghouse for all the

00:19:41,180 --> 00:19:46,010
pub/sub all the topics and everything go

00:19:43,670 --> 00:19:47,720
through the master node and then we have

00:19:46,010 --> 00:19:48,920
this parameter system that's usually

00:19:47,720 --> 00:19:51,080
associated with the master

00:19:48,920 --> 00:19:53,630
note that parameter system will then be

00:19:51,080 --> 00:19:56,870
able to feed configuration data into

00:19:53,630 --> 00:19:58,820
individual nodes as needed there are a

00:19:56,870 --> 00:20:01,760
lot of diagnostic capabilities built

00:19:58,820 --> 00:20:03,710
into roz there are replacements for the

00:20:01,760 --> 00:20:05,840
C out functions basically that will then

00:20:03,710 --> 00:20:08,120
write into a bag so that you can then

00:20:05,840 --> 00:20:10,100
capture all that information the

00:20:08,120 --> 00:20:13,310
interesting approach here because it is

00:20:10,100 --> 00:20:17,240
using typical Network protocols IP type

00:20:13,310 --> 00:20:19,610
protocols the robot nodes the individual

00:20:17,240 --> 00:20:21,980
controller pieces do not have to be on

00:20:19,610 --> 00:20:23,890
the same processor core so they can be

00:20:21,980 --> 00:20:26,930
split out amongst various

00:20:23,890 --> 00:20:29,450
microcontrollers and processors and you

00:20:26,930 --> 00:20:31,880
can have them not only be distributed in

00:20:29,450 --> 00:20:33,860
the robot itself but also geographically

00:20:31,880 --> 00:20:36,980
distributed if you needed to have a wide

00:20:33,860 --> 00:20:39,800
area kind of knowledge going on inside

00:20:36,980 --> 00:20:41,990
of the robot for whatever reason now Roz

00:20:39,800 --> 00:20:43,160
has got three levels of concepts

00:20:41,990 --> 00:20:45,890
associated with it they've got a

00:20:43,160 --> 00:20:48,020
filesystem level a computation level and

00:20:45,890 --> 00:20:49,640
then there's the community level at the

00:20:48,020 --> 00:20:51,290
filesystem level these are all the

00:20:49,640 --> 00:20:53,360
things that you will write and work with

00:20:51,290 --> 00:20:55,730
on the file system itself these are

00:20:53,360 --> 00:20:59,030
things you find in directories so we

00:20:55,730 --> 00:21:00,260
have packages and meta packages meta

00:20:59,030 --> 00:21:03,260
packages of course collect packages

00:21:00,260 --> 00:21:05,480
together to make some logical connection

00:21:03,260 --> 00:21:08,150
between the packages we also have

00:21:05,480 --> 00:21:10,310
repositories repositories in this sense

00:21:08,150 --> 00:21:13,460
are not the same type of repository that

00:21:10,310 --> 00:21:16,570
we see in the Debian world this is more

00:21:13,460 --> 00:21:18,620
like a stack so we'll have a lidar

00:21:16,570 --> 00:21:20,410
repository that'll have all the

00:21:18,620 --> 00:21:24,800
functions inside of it for using laser

00:21:20,410 --> 00:21:26,960
laser imaging or laser-guided radars we

00:21:24,800 --> 00:21:29,510
have of course then message types and

00:21:26,960 --> 00:21:32,090
service types message types will define

00:21:29,510 --> 00:21:34,400
the actual pub/sub piece service types

00:21:32,090 --> 00:21:39,050
will define the remote procedure call

00:21:34,400 --> 00:21:40,520
interfaces so now when we get a little

00:21:39,050 --> 00:21:42,740
bit further into this we get into the

00:21:40,520 --> 00:21:46,190
computation graph now the computation

00:21:42,740 --> 00:21:48,500
graph is a peer-to-peer network so all

00:21:46,190 --> 00:21:51,890
of these roz processes known as nodes

00:21:48,500 --> 00:21:53,270
are all connected together and they are

00:21:51,890 --> 00:21:56,300
communicating with each other over the

00:21:53,270 --> 00:21:58,730
network so the computation graft level

00:21:56,300 --> 00:22:01,250
has the node the individual components

00:21:58,730 --> 00:22:02,509
we have the master which is responsible

00:22:01,250 --> 00:22:04,849
for setting up and running

00:22:02,509 --> 00:22:06,499
the namespace we have the parameter

00:22:04,849 --> 00:22:09,559
server which is going to be providing

00:22:06,499 --> 00:22:11,599
those configuration options down to the

00:22:09,559 --> 00:22:13,820
individual nodes and then of course the

00:22:11,599 --> 00:22:16,879
message is associated with messages are

00:22:13,820 --> 00:22:18,679
topics because we are doing pub/sub and

00:22:16,879 --> 00:22:20,329
the services of for the remote procedure

00:22:18,679 --> 00:22:23,229
call mechanisms and I've already talked

00:22:20,329 --> 00:22:25,999
about bags now at the community level

00:22:23,229 --> 00:22:28,479
understand there is a lot of folks

00:22:25,999 --> 00:22:31,399
working on Rozz and this is worldwide

00:22:28,479 --> 00:22:33,349
they have their own distributions

00:22:31,399 --> 00:22:37,129
obviously lunar and loggerhead is one

00:22:33,349 --> 00:22:40,749
distribution the kinetic comma is

00:22:37,129 --> 00:22:43,129
another one we have the raw Zwicky

00:22:40,749 --> 00:22:44,899
excellent source of information if you

00:22:43,129 --> 00:22:46,609
have questions about what's going on

00:22:44,899 --> 00:22:51,139
definitely take a look at the roz wiki

00:22:46,609 --> 00:22:52,909
there is a blog which kind of shows what

00:22:51,139 --> 00:22:54,109
people are up to and the latest and

00:22:52,909 --> 00:22:57,229
greatest things they've been able to do

00:22:54,109 --> 00:23:01,099
and there's also a very nice fax site so

00:22:57,229 --> 00:23:03,949
the community in Roz is very well set up

00:23:01,099 --> 00:23:05,419
very well distributed and very

00:23:03,949 --> 00:23:07,579
supportive of things that you're doing

00:23:05,419 --> 00:23:09,199
so there's no well that's a really

00:23:07,579 --> 00:23:11,149
stupid thing to do kind of questions

00:23:09,199 --> 00:23:13,249
it's a well I might do it a little bit

00:23:11,149 --> 00:23:16,299
differently and here's how we've done it

00:23:13,249 --> 00:23:19,219
in the past now on the file system

00:23:16,299 --> 00:23:21,889
specifics the package is the primary

00:23:19,219 --> 00:23:24,649
unit of software in Roz it's the finest

00:23:21,889 --> 00:23:27,289
granularity it basically is the source

00:23:24,649 --> 00:23:29,929
of libraries nodes datasets

00:23:27,289 --> 00:23:33,859
configuration files anything that needs

00:23:29,929 --> 00:23:36,190
to be viewable at compile time will

00:23:33,859 --> 00:23:38,899
typically be associated with a package

00:23:36,190 --> 00:23:41,329
metadata then control collects those

00:23:38,899 --> 00:23:44,299
packages together there is a package

00:23:41,329 --> 00:23:47,419
manifest and if for whatever reason

00:23:44,299 --> 00:23:49,669
you've been avoiding xml over the last

00:23:47,419 --> 00:23:53,119
several years of your career you cannot

00:23:49,669 --> 00:23:56,479
avoid xml when it comes to Roz Roz is

00:23:53,119 --> 00:23:58,219
extremely XML centric so even when we

00:23:56,479 --> 00:24:01,309
get ready to describe robots we

00:23:58,219 --> 00:24:03,169
described them in XML which can get a

00:24:01,309 --> 00:24:05,349
little bit tedious we'll see some

00:24:03,169 --> 00:24:07,639
examples of this coming up here but

00:24:05,349 --> 00:24:09,619
understand that the whole idea is to

00:24:07,639 --> 00:24:11,899
have some Universal format that can be

00:24:09,619 --> 00:24:15,679
easily parsed and that's why they went

00:24:11,899 --> 00:24:16,429
with XML the message types of course

00:24:15,679 --> 00:24:18,649
these

00:24:16,429 --> 00:24:21,889
actually data structures now the data

00:24:18,649 --> 00:24:24,070
structures are comprised of primitive

00:24:21,889 --> 00:24:26,389
types so we've got integers we've got

00:24:24,070 --> 00:24:28,460
boolean's we've got floats those are the

00:24:26,389 --> 00:24:30,649
basic integer those are the basic types

00:24:28,460 --> 00:24:34,899
and then we combined them together into

00:24:30,649 --> 00:24:37,070
structures just like we have in C or C++

00:24:34,899 --> 00:24:39,379
additionally those structures can be

00:24:37,070 --> 00:24:41,710
nested so we can in fact have structures

00:24:39,379 --> 00:24:44,659
within structures that works fine in roz

00:24:41,710 --> 00:24:47,769
the service level entities that is

00:24:44,659 --> 00:24:50,360
hardcore kind of remote procedure call

00:24:47,769 --> 00:24:52,610
request response type data structures

00:24:50,360 --> 00:24:53,330
and of course we have to define those as

00:24:52,610 --> 00:24:56,509
well

00:24:53,330 --> 00:24:59,419
now at the computation graft level the

00:24:56,509 --> 00:25:02,240
nodes are processes that perform the

00:24:59,419 --> 00:25:04,519
computation so they will have things

00:25:02,240 --> 00:25:06,379
like motor control the lidar interface

00:25:04,519 --> 00:25:10,549
the graphical view all of those will be

00:25:06,379 --> 00:25:13,039
represented as nodes we then have the

00:25:10,549 --> 00:25:15,499
nodes talking to each other this might

00:25:13,039 --> 00:25:16,730
be a remote procedure call using service

00:25:15,499 --> 00:25:18,440
invocation

00:25:16,730 --> 00:25:21,169
but normally nodes are going to publish

00:25:18,440 --> 00:25:22,820
topics other nodes have subscribed to

00:25:21,169 --> 00:25:25,519
topics and as soon as the topic gets

00:25:22,820 --> 00:25:28,159
published the node when it goes into one

00:25:25,519 --> 00:25:30,169
of its loops to look for subscriptions

00:25:28,159 --> 00:25:31,039
it'll basically update and pull down the

00:25:30,169 --> 00:25:33,740
latest information

00:25:31,039 --> 00:25:36,080
the master is that clearinghouse for

00:25:33,740 --> 00:25:38,419
name registration and lookup for the

00:25:36,080 --> 00:25:40,340
rest of the graph so if the master dies

00:25:38,419 --> 00:25:42,950
for whatever reason the entire thing

00:25:40,340 --> 00:25:45,830
dies so you need to make sure that the

00:25:42,950 --> 00:25:47,539
master is stable and is running on a

00:25:45,830 --> 00:25:49,009
machine that is stable with good power

00:25:47,539 --> 00:25:50,210
and all that sort of stuff associated

00:25:49,009 --> 00:25:51,379
with it in order to make sure that

00:25:50,210 --> 00:25:54,230
everything continues to function

00:25:51,379 --> 00:25:55,749
correctly we talked about the primitive

00:25:54,230 --> 00:25:58,909
types there so we got that

00:25:55,749 --> 00:26:01,580
now the topics are the messages that are

00:25:58,909 --> 00:26:04,340
routed via the pub/sub semantics the

00:26:01,580 --> 00:26:05,450
nodes subscribes to topics it does

00:26:04,340 --> 00:26:07,549
support one-to-many

00:26:05,450 --> 00:26:10,549
it also supports many-to-many transport

00:26:07,549 --> 00:26:13,490
so we do have the ability to kind of

00:26:10,549 --> 00:26:15,320
send a broadcast if you will to all of

00:26:13,490 --> 00:26:16,850
the nodes inside of the robot something

00:26:15,320 --> 00:26:18,649
like I'm getting ready to shut down now

00:26:16,850 --> 00:26:20,450
because the battery is almost out those

00:26:18,649 --> 00:26:23,690
kinds of things actually are supported

00:26:20,450 --> 00:26:28,180
quite well additionally what will happen

00:26:23,690 --> 00:26:30,610
inside of the Raw's nodes there is a

00:26:28,180 --> 00:26:34,000
secret or silent it's not really secret

00:26:30,610 --> 00:26:36,790
but it's a silent signal handler that

00:26:34,000 --> 00:26:38,620
gets installed for control C so the

00:26:36,790 --> 00:26:39,970
control C signal handler will intercept

00:26:38,620 --> 00:26:42,010
that and then it lets everybody know

00:26:39,970 --> 00:26:43,780
that the system is going down and it

00:26:42,010 --> 00:26:46,540
sends that information out automatically

00:26:43,780 --> 00:26:48,100
for you all right so we've got the the

00:26:46,540 --> 00:26:51,850
bags we've already talked about those

00:26:48,100 --> 00:26:54,250
now the naming structure as you might

00:26:51,850 --> 00:26:57,030
guess since this looks like a file

00:26:54,250 --> 00:27:01,240
system it is also very file system like

00:26:57,030 --> 00:27:03,370
slash is the top-level now slash can

00:27:01,240 --> 00:27:05,980
then have associated with it resources

00:27:03,370 --> 00:27:08,710
so resources are defined in their

00:27:05,980 --> 00:27:11,620
individual namespaces they may define or

00:27:08,710 --> 00:27:15,220
share other resources effectively what

00:27:11,620 --> 00:27:18,160
happens a the code as it's running will

00:27:15,220 --> 00:27:20,260
stay in its own namespace there is a way

00:27:18,160 --> 00:27:21,490
to get out of a namespace we'll show you

00:27:20,260 --> 00:27:24,430
what that looks like here at a moment

00:27:21,490 --> 00:27:26,650
but the name basically gets resolved

00:27:24,430 --> 00:27:28,930
locally as though each one of the

00:27:26,650 --> 00:27:31,180
domains was a top-level domain so if I

00:27:28,930 --> 00:27:33,780
have a slash and then I have a lidar and

00:27:31,180 --> 00:27:36,880
I have a motor controller and I have a

00:27:33,780 --> 00:27:39,490
you know a camera each one of those

00:27:36,880 --> 00:27:42,100
top-level domains are going to be

00:27:39,490 --> 00:27:43,660
effectively a stovepipe they can

00:27:42,100 --> 00:27:46,570
communicate with each other we can

00:27:43,660 --> 00:27:48,430
actually have an integrator that sets up

00:27:46,570 --> 00:27:50,980
at a higher level that then takes

00:27:48,430 --> 00:27:52,570
messages from one say the camera and

00:27:50,980 --> 00:27:54,940
then feeds them over to the motor

00:27:52,570 --> 00:27:58,660
controller or what have you that can

00:27:54,940 --> 00:28:01,420
actually actually be done it's not that

00:27:58,660 --> 00:28:03,970
complicated but it turns out that when

00:28:01,420 --> 00:28:05,740
we're dealing with the namespace names

00:28:03,970 --> 00:28:07,770
we'll typically begin either with a

00:28:05,740 --> 00:28:11,050
tilde which means you're at the home a

00:28:07,770 --> 00:28:13,450
slash or an alpha character either upper

00:28:11,050 --> 00:28:15,130
or lower then all the subsequent

00:28:13,450 --> 00:28:19,420
characters are either alphanumeric

00:28:15,130 --> 00:28:21,100
underscores or slashes it is fairly

00:28:19,420 --> 00:28:23,890
pedestrian in some of the naming

00:28:21,100 --> 00:28:25,180
conventions that it uses but it does

00:28:23,890 --> 00:28:27,040
keep you out of trouble when you're

00:28:25,180 --> 00:28:28,750
talking about relatively complex systems

00:28:27,040 --> 00:28:31,900
where more than one group may be

00:28:28,750 --> 00:28:33,640
responsible for individual subsystems so

00:28:31,900 --> 00:28:35,860
the name resolution we always have to

00:28:33,640 --> 00:28:38,500
have a base name without a base name we

00:28:35,860 --> 00:28:41,350
can't start a robot we then will have

00:28:38,500 --> 00:28:41,920
relative access so it's going to be from

00:28:41,350 --> 00:28:46,060
wherever

00:28:41,920 --> 00:28:48,610
right now / something underneath me we

00:28:46,060 --> 00:28:50,410
have global names which begin with a

00:28:48,610 --> 00:28:53,290
slash and then we have private names

00:28:50,410 --> 00:28:56,230
which begin with the tilde the the tilde

00:28:53,290 --> 00:28:57,970
private name allows me to have pieces of

00:28:56,230 --> 00:29:00,370
data that aren't visible outside of the

00:28:57,970 --> 00:29:02,020
namespace in case we need to be able to

00:29:00,370 --> 00:29:06,910
do that equivalent of the private call

00:29:02,020 --> 00:29:09,310
in C++ so the package resources names

00:29:06,910 --> 00:29:12,310
will then have this format the package

00:29:09,310 --> 00:29:14,620
name / message type an example here

00:29:12,310 --> 00:29:16,360
standard messages there is a package

00:29:14,620 --> 00:29:19,120
called standard messages which has the

00:29:16,360 --> 00:29:21,670
base types in it one of those base types

00:29:19,120 --> 00:29:23,860
is the string base type that's basically

00:29:21,670 --> 00:29:25,390
just a string oriented message from that

00:29:23,860 --> 00:29:27,340
package that's how that would be

00:29:25,390 --> 00:29:28,990
referenced and when we look in the code

00:29:27,340 --> 00:29:31,960
we'll actually see them reference these

00:29:28,990 --> 00:29:34,990
kinds of things so now here we get to

00:29:31,960 --> 00:29:38,080
the ugly part of what happens in rows

00:29:34,990 --> 00:29:40,420
and that is describing things in the

00:29:38,080 --> 00:29:45,610
unified robot definition a description

00:29:40,420 --> 00:29:47,830
format you RDF you RDF is XML and it is

00:29:45,610 --> 00:29:49,680
an interesting approach to representing

00:29:47,830 --> 00:29:53,680
things given that you have to describe

00:29:49,680 --> 00:29:58,450
every possible connection that the robot

00:29:53,680 --> 00:30:01,000
may have joints wheels connection points

00:29:58,450 --> 00:30:03,580
on the wheels you have to describe the

00:30:01,000 --> 00:30:05,950
physics associated with the wheels the

00:30:03,580 --> 00:30:10,480
inertia you have to describe all of that

00:30:05,950 --> 00:30:12,570
and this at one level this is focusing

00:30:10,480 --> 00:30:15,040
more on the simulation piece of it

00:30:12,570 --> 00:30:16,990
oftentimes what we will do is we will

00:30:15,040 --> 00:30:18,520
create a simulation of the robot so we

00:30:16,990 --> 00:30:21,250
can drive it around and it does what we

00:30:18,520 --> 00:30:23,140
think it should do in the world that

00:30:21,250 --> 00:30:25,720
we've defined in case of something like

00:30:23,140 --> 00:30:28,960
gazebo and then we will take that and

00:30:25,720 --> 00:30:30,700
build the actual item we'd like to be

00:30:28,960 --> 00:30:32,440
able to simulate it first just because

00:30:30,700 --> 00:30:34,330
that way we can work out a lot of the

00:30:32,440 --> 00:30:37,360
details of how things are going to be

00:30:34,330 --> 00:30:39,040
interfaced to each other obviously the

00:30:37,360 --> 00:30:40,960
real world always gets in the way and we

00:30:39,040 --> 00:30:43,690
never quite get the kind of wheel

00:30:40,960 --> 00:30:46,450
friction we hope for or the motor torque

00:30:43,690 --> 00:30:49,120
that we hope for depending on how things

00:30:46,450 --> 00:30:51,580
are put together but at least we have a

00:30:49,120 --> 00:30:53,440
simulation of how it's supposed to work

00:30:51,580 --> 00:30:54,940
so that we can then go oh well that's

00:30:53,440 --> 00:30:55,250
not what it's supposed to do it's

00:30:54,940 --> 00:30:57,140
suppose

00:30:55,250 --> 00:30:58,670
to turn to the right not to the left so

00:30:57,140 --> 00:31:02,870
those kinds of things can actually be

00:30:58,670 --> 00:31:05,630
done here in you RDF we have also

00:31:02,870 --> 00:31:08,900
there's a developed language called Zack

00:31:05,630 --> 00:31:10,400
Pro Zack row is an XML macro language

00:31:08,900 --> 00:31:13,010
and that's because when you start

00:31:10,400 --> 00:31:15,290
describing things like wheels and axles

00:31:13,010 --> 00:31:18,170
and motors and things of that sort the

00:31:15,290 --> 00:31:22,280
number of descriptions can get very very

00:31:18,170 --> 00:31:24,590
large so for instance some of my larger

00:31:22,280 --> 00:31:26,840
robots are six wheel drive robots just

00:31:24,590 --> 00:31:29,510
defining the gearboxes and the wheels

00:31:26,840 --> 00:31:32,060
and the interfaces to Roz for all of

00:31:29,510 --> 00:31:34,990
that is fairly long and tedious

00:31:32,060 --> 00:31:37,730
so using Zack row we can actually

00:31:34,990 --> 00:31:39,770
abbreviate that create a macro that says

00:31:37,730 --> 00:31:42,920
give me a six wheel drive right give me

00:31:39,770 --> 00:31:45,380
a six wheel drive base and then boom the

00:31:42,920 --> 00:31:46,820
six wheel drive base shows up so that

00:31:45,380 --> 00:31:49,430
helps us quite a bit in terms of being

00:31:46,820 --> 00:31:53,180
able to kind of rapidly develop things

00:31:49,430 --> 00:31:56,090
in this approach so we're going to build

00:31:53,180 --> 00:31:58,970
a basic chassis here we'll have to you

00:31:56,090 --> 00:32:01,240
RDF components they'll define a simple

00:31:58,970 --> 00:32:03,980
robot chassis it's basically just a box

00:32:01,240 --> 00:32:06,710
then the link components will describe a

00:32:03,980 --> 00:32:08,240
a rigid body based on its physical

00:32:06,710 --> 00:32:10,100
properties so we'll talk about the width

00:32:08,240 --> 00:32:12,650
the height the length the color those

00:32:10,100 --> 00:32:15,230
kinds of things then the links are going

00:32:12,650 --> 00:32:17,750
to be connected by a joint the joint

00:32:15,230 --> 00:32:20,510
components then describe how our wheels

00:32:17,750 --> 00:32:23,290
are going to be attached we have to try

00:32:20,510 --> 00:32:25,940
we have to describe the type of joint

00:32:23,290 --> 00:32:28,250
the degrees of freedom the axis of

00:32:25,940 --> 00:32:30,800
rotation the amount of friction there's

00:32:28,250 --> 00:32:32,480
a lot of physics in this and that's of

00:32:30,800 --> 00:32:34,190
course because if you're actually trying

00:32:32,480 --> 00:32:38,150
to build real robots in the real world

00:32:34,190 --> 00:32:40,850
physics matters I try to describe this

00:32:38,150 --> 00:32:42,890
to my students my robotics students and

00:32:40,850 --> 00:32:45,320
say look the real world is not very

00:32:42,890 --> 00:32:48,110
forgiving things have more friction than

00:32:45,320 --> 00:32:50,600
you anticipate wheels slip a lot more

00:32:48,110 --> 00:32:51,620
than you think they're going to in our

00:32:50,600 --> 00:32:53,930
particular case for this last

00:32:51,620 --> 00:32:55,910
competition last weekend chains break

00:32:53,930 --> 00:32:58,790
and you didn't anticipate that

00:32:55,910 --> 00:33:00,460
so the real world is not a very

00:32:58,790 --> 00:33:03,890
forgiving place when it comes to robots

00:33:00,460 --> 00:33:06,320
it's nice to be able to build the robot

00:33:03,890 --> 00:33:07,549
in a relatively nice little sandbox and

00:33:06,320 --> 00:33:10,919
work from there

00:33:07,549 --> 00:33:13,860
so speaking of a box here is the box in

00:33:10,919 --> 00:33:17,490
you RDF so we've described a an ELC

00:33:13,860 --> 00:33:21,600
robot we have declared it as the base

00:33:17,490 --> 00:33:24,210
link and in the visual world it has an

00:33:21,600 --> 00:33:25,440
origin at 0 0 0 which is right in the

00:33:24,210 --> 00:33:27,390
middle of the field

00:33:25,440 --> 00:33:30,720
so as we'll see with our viz which is a

00:33:27,390 --> 00:33:32,700
3d graphics visualization tool we will

00:33:30,720 --> 00:33:35,280
just we will describe the box sitting

00:33:32,700 --> 00:33:38,910
basically in the middle of the field the

00:33:35,280 --> 00:33:42,200
R PI there this is the role pitch in yaw

00:33:38,910 --> 00:33:45,990
of the device so it's starting out flat

00:33:42,200 --> 00:33:49,320
no angles no orientation other than just

00:33:45,990 --> 00:33:52,230
flat sitting on a floor the box size

00:33:49,320 --> 00:33:54,960
itself these are in meters so this is a

00:33:52,230 --> 00:33:58,409
1/2 meter long 1/2 meter wide and 1/4

00:33:54,960 --> 00:34:00,270
meter high that describes the geometry

00:33:58,409 --> 00:34:04,919
and we've ended the visual here and of

00:34:00,270 --> 00:34:06,659
course you know typical you XML stuff

00:34:04,919 --> 00:34:09,440
here we got to add all the additional

00:34:06,659 --> 00:34:12,570
verbosity associated with it so now

00:34:09,440 --> 00:34:16,350
assuming that we have described this

00:34:12,570 --> 00:34:19,109
adequately we want to create the package

00:34:16,350 --> 00:34:21,330
that this you RDF is going to go into so

00:34:19,109 --> 00:34:24,899
we'll do a cat can create package and

00:34:21,330 --> 00:34:25,560
we'll call it ELC robot this will be in

00:34:24,899 --> 00:34:28,830
our

00:34:25,560 --> 00:34:31,800
catkin workstation so in that cat when

00:34:28,830 --> 00:34:34,679
catkin WS directory will do this cat can

00:34:31,800 --> 00:34:36,480
create package ELC robot this will

00:34:34,679 --> 00:34:38,540
automatically create some structure for

00:34:36,480 --> 00:34:41,280
me it's going to create a package

00:34:38,540 --> 00:34:43,020
manifest the package XML and it's also

00:34:41,280 --> 00:34:45,179
going to create a see make list that

00:34:43,020 --> 00:34:49,950
will allow me to then launch the build

00:34:45,179 --> 00:34:51,119
so at this point it's created the files

00:34:49,950 --> 00:34:54,840
in

00:34:51,119 --> 00:34:56,730
catkin source ELC robot adjust the

00:34:54,840 --> 00:34:58,109
values and package that XML if you have

00:34:56,730 --> 00:35:01,170
to I mean if you're going to be bringing

00:34:58,109 --> 00:35:02,820
in additional depends dependencies and

00:35:01,170 --> 00:35:04,920
things of that sort you need to express

00:35:02,820 --> 00:35:06,300
them here in the make so that we can

00:35:04,920 --> 00:35:06,960
then make sure that we bring those in

00:35:06,300 --> 00:35:10,380
correctly

00:35:06,960 --> 00:35:12,720
we then CD to cat can workspace and then

00:35:10,380 --> 00:35:16,290
do a cat can make this will produce all

00:35:12,720 --> 00:35:19,020
kinds of build output all this is doing

00:35:16,290 --> 00:35:19,740
now remember is building an empty

00:35:19,020 --> 00:35:21,300
project

00:35:19,740 --> 00:35:23,610
there's nothing here yet

00:35:21,300 --> 00:35:25,620
other than just the infrastructure so

00:35:23,610 --> 00:35:27,450
this is just a test to make sure that

00:35:25,620 --> 00:35:29,760
the infrastructure built correctly and

00:35:27,450 --> 00:35:33,420
now we can start populating it with

00:35:29,760 --> 00:35:36,810
actual files so we're going to create

00:35:33,420 --> 00:35:39,810
the robot for you RDF will do the will

00:35:36,810 --> 00:35:41,520
see the source CD to source ELC robot

00:35:39,810 --> 00:35:44,580
and then we'll make a directory called

00:35:41,520 --> 00:35:47,130
you RDF will copy the you are DF model

00:35:44,580 --> 00:35:49,920
that we just created into that directory

00:35:47,130 --> 00:35:51,450
and in order to run the model we're

00:35:49,920 --> 00:35:55,470
going to have to have what's called a

00:35:51,450 --> 00:35:58,440
launch specification so Ross launch is a

00:35:55,470 --> 00:36:01,500
mechanism for taking a launch spec and

00:35:58,440 --> 00:36:03,090
then turning that into running code so

00:36:01,500 --> 00:36:04,680
what Roz launch will do is it'll be

00:36:03,090 --> 00:36:07,770
responsible for starting up the master

00:36:04,680 --> 00:36:09,270
starting up the parameter server making

00:36:07,770 --> 00:36:11,700
sure that all the connections are there

00:36:09,270 --> 00:36:15,180
it will then look at your code to see if

00:36:11,700 --> 00:36:17,310
you've produced any if you've if you

00:36:15,180 --> 00:36:18,570
produce any topics it will then make

00:36:17,310 --> 00:36:20,610
sure those topics are in the global

00:36:18,570 --> 00:36:23,370
namespace all that stuff will be taken

00:36:20,610 --> 00:36:25,920
care of by Roz launch but we have to

00:36:23,370 --> 00:36:28,980
have the launch specification so the

00:36:25,920 --> 00:36:31,800
launch specification is itself not

00:36:28,980 --> 00:36:34,050
necessarily trivial we'll do a make derp

00:36:31,800 --> 00:36:37,470
on launch and then we'll go in and edit

00:36:34,050 --> 00:36:43,320
the launch using your favorite editor in

00:36:37,470 --> 00:36:45,960
my case that's V I know I know it's just

00:36:43,320 --> 00:36:49,380
simple easy something it's something

00:36:45,960 --> 00:36:50,820
simple here is the launch file alright

00:36:49,380 --> 00:36:55,230
so let's take a look at the launch file

00:36:50,820 --> 00:36:57,750
first of all we are setting up a model

00:36:55,230 --> 00:37:00,090
here we've defined the GUI right now

00:36:57,750 --> 00:37:01,650
it's not going to be coming on just yet

00:37:00,090 --> 00:37:04,350
we'll actually do that a little bit

00:37:01,650 --> 00:37:07,560
later we'll have our robot description

00:37:04,350 --> 00:37:11,130
we are going to find ELC robot in the

00:37:07,560 --> 00:37:13,770
workspace look for you RDF and then we

00:37:11,130 --> 00:37:15,090
will specify the argument which model

00:37:13,770 --> 00:37:17,160
we're going to be using so we'll show

00:37:15,090 --> 00:37:19,470
how this is done when you actually from

00:37:17,160 --> 00:37:22,110
the command line list a particular model

00:37:19,470 --> 00:37:24,630
of robot this is nice because it means

00:37:22,110 --> 00:37:27,330
that I can have subsequent releases in

00:37:24,630 --> 00:37:29,730
the same directory and simply launch

00:37:27,330 --> 00:37:32,760
them as different models so I'm going to

00:37:29,730 --> 00:37:34,530
have a PLC robot OC robot - robot 3

00:37:32,760 --> 00:37:36,630
robot 4 etc

00:37:34,530 --> 00:37:39,090
to the point where I've actually you

00:37:36,630 --> 00:37:41,100
know incrementally built all the tools

00:37:39,090 --> 00:37:44,700
are all the pieces that go along with a

00:37:41,100 --> 00:37:47,940
robot I have a joint in this particular

00:37:44,700 --> 00:37:49,830
case the joint state publisher we'll get

00:37:47,940 --> 00:37:52,230
into the actual joints associated with

00:37:49,830 --> 00:37:54,720
the wheels here's the robot state

00:37:52,230 --> 00:37:55,920
publisher and here is the mechanism that

00:37:54,720 --> 00:37:59,430
actually allows me to do the

00:37:55,920 --> 00:38:02,310
visualization our viz and what our viz

00:37:59,430 --> 00:38:06,360
will do is it will run that find ELC

00:38:02,310 --> 00:38:08,490
robot and look for you RDF our vis if it

00:38:06,360 --> 00:38:11,310
finds it then that says that this has

00:38:08,490 --> 00:38:13,350
already been created as a 3d model if it

00:38:11,310 --> 00:38:15,930
doesn't find it and it won't in the

00:38:13,350 --> 00:38:18,000
first case there is no 3d model and I

00:38:15,930 --> 00:38:21,060
have to tell it to create one well show

00:38:18,000 --> 00:38:23,460
you how that's done in a moment if our

00:38:21,060 --> 00:38:25,080
dot if our viz dies then the entire AHS

00:38:23,460 --> 00:38:27,080
launch will be killed off and that's the

00:38:25,080 --> 00:38:29,130
that's that's a basic simple launcher

00:38:27,080 --> 00:38:31,440
these launchers can get a lot more

00:38:29,130 --> 00:38:33,360
complicated obviously we can have more

00:38:31,440 --> 00:38:37,260
nodes we can have more dependencies

00:38:33,360 --> 00:38:40,170
there is its own kind of art to write

00:38:37,260 --> 00:38:41,700
writing launchers so but this is a very

00:38:40,170 --> 00:38:44,940
simple one that we'll be using for this

00:38:41,700 --> 00:38:47,730
case now what we're going to do is we're

00:38:44,940 --> 00:38:51,000
going to launch it well do a Ross launch

00:38:47,730 --> 00:38:53,340
ELC robot ELC robot RVs launch was the

00:38:51,000 --> 00:38:55,650
thing we just created the model here

00:38:53,340 --> 00:38:57,450
will be ELC robot you are DF which was

00:38:55,650 --> 00:38:59,610
that you are DF that I looked that we

00:38:57,450 --> 00:39:02,760
looked at a couple of charts ago now

00:38:59,610 --> 00:39:04,890
what we get out of that is this lovely

00:39:02,760 --> 00:39:07,350
red box sitting in the middle of the

00:39:04,890 --> 00:39:10,140
field that seems like a lot of work to

00:39:07,350 --> 00:39:11,810
go through just to get a red box but

00:39:10,140 --> 00:39:16,980
again this is kind of incrementally

00:39:11,810 --> 00:39:19,260
developing a robot in 3d space as we go

00:39:16,980 --> 00:39:21,270
through the process so what we're going

00:39:19,260 --> 00:39:22,890
to do is we're going to put some wheels

00:39:21,270 --> 00:39:25,560
on it we're going to color it something

00:39:22,890 --> 00:39:26,910
other than red and then in order for us

00:39:25,560 --> 00:39:28,710
to be able to do that we have to

00:39:26,910 --> 00:39:31,140
describe the wheels we have to describe

00:39:28,710 --> 00:39:33,510
the radius the joint connection to the

00:39:31,140 --> 00:39:36,140
base length their inertia the collision

00:39:33,510 --> 00:39:38,520
characteristics the mass of the wheels

00:39:36,140 --> 00:39:41,280
fortunately again there are predefined

00:39:38,520 --> 00:39:44,070
setups for certain classes of tires

00:39:41,280 --> 00:39:45,630
wheels and general motors so we can just

00:39:44,070 --> 00:39:47,460
simply use those instead of having to

00:39:45,630 --> 00:39:50,260
write all this stuff by hand

00:39:47,460 --> 00:39:53,830
but once we finish with all that we end

00:39:50,260 --> 00:39:55,630
up with lo Allah a blue box with wheels

00:39:53,830 --> 00:39:59,380
we have wheel on this side wheel on that

00:39:55,630 --> 00:40:03,400
side there are actually indicators for

00:39:59,380 --> 00:40:05,440
the center of mass and in this

00:40:03,400 --> 00:40:07,480
particular case what you don't see is I

00:40:05,440 --> 00:40:09,160
actually put a little caster underneath

00:40:07,480 --> 00:40:11,110
the robot otherwise the robot kind of

00:40:09,160 --> 00:40:13,120
does this the caster is not a

00:40:11,110 --> 00:40:14,740
non-functional item we just simply stick

00:40:13,120 --> 00:40:18,460
it underneath there to keep the robot

00:40:14,740 --> 00:40:20,620
level as the robot rolls around now once

00:40:18,460 --> 00:40:23,470
that's done we can actually load it into

00:40:20,620 --> 00:40:24,540
the 3d model and drive it around inside

00:40:23,470 --> 00:40:28,890
a gazebo

00:40:24,540 --> 00:40:31,990
so gazebo is a 3d world simulator and

00:40:28,890 --> 00:40:33,970
it's used not only for Rozz but it's

00:40:31,990 --> 00:40:36,150
used for many many different examples

00:40:33,970 --> 00:40:38,560
there's something called stage as well

00:40:36,150 --> 00:40:41,500
these all give us the ability to

00:40:38,560 --> 00:40:44,050
describe a 3d world and in this

00:40:41,500 --> 00:40:46,840
particular 3d world I have two objects

00:40:44,050 --> 00:40:48,520
two cones there is a Sun which is

00:40:46,840 --> 00:40:51,550
generating the shadows that you see

00:40:48,520 --> 00:40:55,890
there and my robot sitting in the middle

00:40:51,550 --> 00:40:58,390
of the field at this point I have now

00:40:55,890 --> 00:41:01,120
the ability to do things like manipulate

00:40:58,390 --> 00:41:03,270
gravity so I can go into the gazebo

00:41:01,120 --> 00:41:05,440
environment and change things around

00:41:03,270 --> 00:41:07,930
what we're not seeing here is the rest

00:41:05,440 --> 00:41:10,000
of the interface for gazebo which allows

00:41:07,930 --> 00:41:12,300
me to describe characteristics like

00:41:10,000 --> 00:41:15,430
gravity is really heavy at this end or

00:41:12,300 --> 00:41:18,550
this is actually slanted in some way or

00:41:15,430 --> 00:41:21,100
it's a hyperbolic space it turns out

00:41:18,550 --> 00:41:24,010
that gazebo has about a hundred or so

00:41:21,100 --> 00:41:25,750
different predefined models associated

00:41:24,010 --> 00:41:28,330
with it and you can define your own

00:41:25,750 --> 00:41:29,980
models for your own space if you want to

00:41:28,330 --> 00:41:32,740
you know one of the examples we've used

00:41:29,980 --> 00:41:34,930
this for is in FIRST Robotics

00:41:32,740 --> 00:41:38,440
Competition a couple of years ago they

00:41:34,930 --> 00:41:40,330
had the entire field which is a 56 by 28

00:41:38,440 --> 00:41:43,870
field with a lot of objects on it

00:41:40,330 --> 00:41:45,550
completely described inside of gazebo so

00:41:43,870 --> 00:41:48,220
that the teams could actually create

00:41:45,550 --> 00:41:51,270
robots and drive them around on the

00:41:48,220 --> 00:41:53,410
field using the actual joysticks and

00:41:51,270 --> 00:41:55,360
actuators that we were going to be using

00:41:53,410 --> 00:41:57,130
on the real robot so it was a really

00:41:55,360 --> 00:41:59,230
handy way of being able to kind of test

00:41:57,130 --> 00:42:00,670
some ideas out does the arm do what it's

00:41:59,230 --> 00:42:02,410
supposed to do

00:42:00,670 --> 00:42:06,160
am i able to lift this thing up

00:42:02,410 --> 00:42:08,500
correctly can we drive all that sort of

00:42:06,160 --> 00:42:10,990
practice before the physical robot was

00:42:08,500 --> 00:42:13,480
actually created in the first robotics

00:42:10,990 --> 00:42:15,250
competition we have six weeks from the

00:42:13,480 --> 00:42:16,750
time they announced the game to the time

00:42:15,250 --> 00:42:18,850
we have to finish the robot and put it

00:42:16,750 --> 00:42:20,610
in the bag and then we can't touch it

00:42:18,850 --> 00:42:22,780
until we get to the competition and

00:42:20,610 --> 00:42:25,720
hopefully it works when we get it out of

00:42:22,780 --> 00:42:27,940
the bag it almost never does but in any

00:42:25,720 --> 00:42:29,170
case using something like this gives us

00:42:27,940 --> 00:42:31,660
the opportunity of being able to

00:42:29,170 --> 00:42:34,240
actually get the drive team familiar

00:42:31,660 --> 00:42:37,060
with the controls before we actually get

00:42:34,240 --> 00:42:39,010
out on the real field so gazebos very

00:42:37,060 --> 00:42:40,990
nice tool again you had to have

00:42:39,010 --> 00:42:44,380
installed the full desktop version of

00:42:40,990 --> 00:42:46,750
Roz in order to pull gazebo down if you

00:42:44,380 --> 00:42:49,060
did not install gazebo when you

00:42:46,750 --> 00:42:51,460
installed Roz that's okay you can go out

00:42:49,060 --> 00:42:54,640
to the gazebo web site and it has a one

00:42:51,460 --> 00:42:57,760
click link which then does the app get

00:42:54,640 --> 00:43:01,150
to add the GPG key adds the repository

00:42:57,760 --> 00:43:03,550
pulls gazebo down installs all the

00:43:01,150 --> 00:43:04,720
auxilary functions additional packages

00:43:03,550 --> 00:43:08,230
that have to be installed to support

00:43:04,720 --> 00:43:10,480
gazebo gazebo is also 3d aware so if you

00:43:08,230 --> 00:43:12,370
happen to have nvidia graphics

00:43:10,480 --> 00:43:16,390
controllers or something else that's

00:43:12,370 --> 00:43:18,430
providing you 3d it knows opengl so if

00:43:16,390 --> 00:43:21,270
you have opengl it'll actually do opengl

00:43:18,430 --> 00:43:23,710
acceleration which really helps for

00:43:21,270 --> 00:43:25,450
fields that have a lot of objects on

00:43:23,710 --> 00:43:27,640
them especially when your gut robots

00:43:25,450 --> 00:43:29,500
running in a swarm you're trying to see

00:43:27,640 --> 00:43:31,060
how the swarm behavior works or you're

00:43:29,500 --> 00:43:33,430
trying to figure out how you're going to

00:43:31,060 --> 00:43:38,740
interact with certain obstacles on the

00:43:33,430 --> 00:43:40,690
field now a pub/sub of course the Roz

00:43:38,740 --> 00:43:43,570
wiki's got an example of a simple

00:43:40,690 --> 00:43:45,100
pub/sub we're gonna take a look at a pub

00:43:43,570 --> 00:43:47,830
sub just so that you can see what that

00:43:45,100 --> 00:43:50,800
looks like there is in this particular

00:43:47,830 --> 00:43:52,090
case it's just a pub on one side there's

00:43:50,800 --> 00:43:54,010
just one topic that it's going to

00:43:52,090 --> 00:43:56,380
publish and then the listener will

00:43:54,010 --> 00:43:57,850
subscribe to the other side so let me

00:43:56,380 --> 00:44:00,580
see if I can go over there and actually

00:43:57,850 --> 00:44:04,840
make this come together I think it's

00:44:00,580 --> 00:44:06,670
this one yeah there we go alright so

00:44:04,840 --> 00:44:10,240
let's do this

00:44:06,670 --> 00:44:13,180
oops I think that's actually here there

00:44:10,240 --> 00:44:14,260
we go alright so what we have and

00:44:13,180 --> 00:44:18,040
hopefully you can read that from

00:44:14,260 --> 00:44:19,510
back there I have to see programs one's

00:44:18,040 --> 00:44:22,150
called listener the others called talker

00:44:19,510 --> 00:44:25,150
talker will be the publisher it will

00:44:22,150 --> 00:44:27,430
publish the object and the listener will

00:44:25,150 --> 00:44:36,340
be then waiting for updates so let's

00:44:27,430 --> 00:44:38,800
take a look at talker of course this is

00:44:36,340 --> 00:44:42,310
a demo so it's got lots of header stuff

00:44:38,800 --> 00:44:43,740
on it we're interested in let's just

00:44:42,310 --> 00:44:48,400
scroll up a little bit here

00:44:43,740 --> 00:44:49,810
there's our main include for Rozz so

00:44:48,400 --> 00:44:52,390
that's going to be the brain header and

00:44:49,810 --> 00:44:54,460
in this case we're going to be putting

00:44:52,390 --> 00:44:57,580
out a string so it's going to have a

00:44:54,460 --> 00:44:59,950
topic that will have just a string in it

00:44:57,580 --> 00:45:02,740
we're also we've got some other includes

00:44:59,950 --> 00:45:05,110
here for the streaming information our

00:45:02,740 --> 00:45:07,150
main looks just like any other main you

00:45:05,110 --> 00:45:12,070
would expect to see we will then do

00:45:07,150 --> 00:45:14,230
rosin NIT the rosin it will then read

00:45:12,070 --> 00:45:17,530
the arguments from the command line and

00:45:14,230 --> 00:45:20,800
it's going to initialize a node called

00:45:17,530 --> 00:45:24,190
talker and that's what we see here then

00:45:20,800 --> 00:45:26,590
we're going to create a handle to be

00:45:24,190 --> 00:45:28,450
able to deal with that node so this will

00:45:26,590 --> 00:45:31,600
be the mechanism that the master uses

00:45:28,450 --> 00:45:34,570
for being able to actually get the the

00:45:31,600 --> 00:45:37,510
publish and the subscribe options so

00:45:34,570 --> 00:45:41,620
we're going to have an advertise here so

00:45:37,510 --> 00:45:43,510
this is how we actually put a topic out

00:45:41,620 --> 00:45:45,370
there into the may into the global

00:45:43,510 --> 00:45:47,590
namespace we're going to use the

00:45:45,370 --> 00:45:49,920
advertise command and in this case we're

00:45:47,590 --> 00:45:52,390
just going to advertise a string into

00:45:49,920 --> 00:45:54,970
that world it's going to be called

00:45:52,390 --> 00:45:58,330
chatter and of course maximum length

00:45:54,970 --> 00:46:01,060
here is a thousand characters we will

00:45:58,330 --> 00:46:03,220
then set up a loop rate now this loop

00:46:01,060 --> 00:46:06,520
rate is in Hertz so this is running at

00:46:03,220 --> 00:46:09,010
ten Hertz 100 milliseconds per pass this

00:46:06,520 --> 00:46:10,990
is just simply setting our polling loop

00:46:09,010 --> 00:46:14,080
so in those cases where we're actually

00:46:10,990 --> 00:46:16,210
doing polled i/o instead of interrupt

00:46:14,080 --> 00:46:20,350
driven i/o we have a way of being able

00:46:16,210 --> 00:46:22,510
to control that poll rate now we've got

00:46:20,350 --> 00:46:25,420
an integer this is just standard stuff

00:46:22,510 --> 00:46:27,170
here but while we are connected to Roz

00:46:25,420 --> 00:46:29,510
while Roz is okay

00:46:27,170 --> 00:46:33,069
then what we're going to do is we're

00:46:29,510 --> 00:46:35,750
going to put a string out there and

00:46:33,069 --> 00:46:38,390
declare that is the message data and

00:46:35,750 --> 00:46:40,400
then we're going to turn around and

00:46:38,390 --> 00:46:42,559
publish that so this is the published

00:46:40,400 --> 00:46:46,520
call here where we've now published that

00:46:42,559 --> 00:46:48,650
message at this point we now have an

00:46:46,520 --> 00:46:50,900
option in this case there's a thing

00:46:48,650 --> 00:46:52,609
called spin once that allows it to poll

00:46:50,900 --> 00:46:54,290
to see if there's been any updates since

00:46:52,609 --> 00:46:56,510
this is the publisher not the subscriber

00:46:54,290 --> 00:46:58,880
chances are we actually don't need this

00:46:56,510 --> 00:47:02,569
particular call but they do have it here

00:46:58,880 --> 00:47:03,950
and there is a sleep mechanism as well

00:47:02,569 --> 00:47:06,200
if we need to go to sleep for whatever

00:47:03,950 --> 00:47:07,940
reason it's just going to keep track of

00:47:06,200 --> 00:47:11,390
how many times it's written that

00:47:07,940 --> 00:47:16,849
information out into the publish on the

00:47:11,390 --> 00:47:18,470
SUBSCRIBE side the listener listeners

00:47:16,849 --> 00:47:21,260
actually a little bit easier than the

00:47:18,470 --> 00:47:23,450
publisher so the listener again we have

00:47:21,260 --> 00:47:26,960
rods that we had to declare and our

00:47:23,450 --> 00:47:31,640
standard message is string we do declare

00:47:26,960 --> 00:47:33,740
a callback so in this case when

00:47:31,640 --> 00:47:35,569
something gets published it's going to

00:47:33,740 --> 00:47:36,890
hit my callback and let me know that

00:47:35,569 --> 00:47:40,549
there's been an update to this

00:47:36,890 --> 00:47:42,920
particular topic so in the main I will

00:47:40,549 --> 00:47:45,770
do a Roz in it and I'm going to declare

00:47:42,920 --> 00:47:48,109
myself as the listener again have a

00:47:45,770 --> 00:47:50,210
handle that I'll be using to be able to

00:47:48,109 --> 00:47:51,829
have the master talk to me and be able

00:47:50,210 --> 00:47:54,799
to keep track of what things have been

00:47:51,829 --> 00:47:56,750
subscribed and then I have the

00:47:54,799 --> 00:48:00,109
subscriber I'll just subscribe to

00:47:56,750 --> 00:48:02,480
chatter and when it happens it's going

00:48:00,109 --> 00:48:04,099
to call the chat or callback so that

00:48:02,480 --> 00:48:05,720
will then call that piece of code that

00:48:04,099 --> 00:48:06,829
we just looked at and it'll let me know

00:48:05,720 --> 00:48:09,260
that there's been a message there and

00:48:06,829 --> 00:48:11,450
I'll be able to read it and in this case

00:48:09,260 --> 00:48:13,940
we do have the spin the spin actually

00:48:11,450 --> 00:48:15,650
does something here the spin in this

00:48:13,940 --> 00:48:19,069
case is just simply waiting for that

00:48:15,650 --> 00:48:21,440
update to happen when the update happens

00:48:19,069 --> 00:48:23,720
then I'll be able to call that chatter

00:48:21,440 --> 00:48:26,000
back that chatter call back and pull the

00:48:23,720 --> 00:48:29,960
information out and that's basically it

00:48:26,000 --> 00:48:32,270
for a listener to a particular message

00:48:29,960 --> 00:48:33,170
now of course services and things of

00:48:32,270 --> 00:48:35,059
that sort get a little bit more

00:48:33,170 --> 00:48:38,290
complicated unfortunately we don't have

00:48:35,059 --> 00:48:38,290
the time to get into that yeah Joe

00:48:39,110 --> 00:48:43,910
the tags they're all comments basically

00:48:41,930 --> 00:48:46,010
they are mechanisms that you don't

00:48:43,910 --> 00:48:47,660
actually don't have to have them the

00:48:46,010 --> 00:48:49,610
tags are just simply there that there's

00:48:47,660 --> 00:48:52,100
some error checking code that's

00:48:49,610 --> 00:48:54,110
available some actual testing code

00:48:52,100 --> 00:48:55,700
that's available that will allow you to

00:48:54,110 --> 00:48:58,100
make sure you've enumerated everything

00:48:55,700 --> 00:49:00,260
correctly so you don't actually have to

00:48:58,100 --> 00:49:01,790
have those tags but if you have them

00:49:00,260 --> 00:49:05,440
then you get a little bit more

00:49:01,790 --> 00:49:09,740
diagnostic information out of the build

00:49:05,440 --> 00:49:12,800
so that is basically it for being able

00:49:09,740 --> 00:49:16,730
to do a pub/sub not a whole lot to that

00:49:12,800 --> 00:49:20,470
actually and what we have here of course

00:49:16,730 --> 00:49:22,670
is we are just about out of time but

00:49:20,470 --> 00:49:26,210
it's been kind of a whirlwind

00:49:22,670 --> 00:49:28,010
introduction to Roz Roz because of all

00:49:26,210 --> 00:49:30,560
the XML looks to be a little bit

00:49:28,010 --> 00:49:32,630
intimidating fortunately because of the

00:49:30,560 --> 00:49:34,670
definition of a lot of these macros we

00:49:32,630 --> 00:49:37,190
have the ability to just simply pull in

00:49:34,670 --> 00:49:39,380
a macro without having to go through the

00:49:37,190 --> 00:49:41,120
detail definition of everything and

00:49:39,380 --> 00:49:43,310
we're obviously we're standing on the

00:49:41,120 --> 00:49:46,250
shoulders of giants here we're actually

00:49:43,310 --> 00:49:49,490
working with other universities other

00:49:46,250 --> 00:49:51,110
labs and other hobbyists that are going

00:49:49,490 --> 00:49:53,240
through this process of actually trying

00:49:51,110 --> 00:49:55,160
to build up individual Lego block type

00:49:53,240 --> 00:49:58,400
components that we can then stick

00:49:55,160 --> 00:50:00,170
together there are a number of books

00:49:58,400 --> 00:50:02,840
that are out there some of them are

00:50:00,170 --> 00:50:04,760
really nice this one that you see up

00:50:02,840 --> 00:50:06,650
here the systematic approach to learning

00:50:04,760 --> 00:50:11,120
robot operating robot programming with

00:50:06,650 --> 00:50:12,850
Roz Roz robots by example is a nice one

00:50:11,120 --> 00:50:15,200
it gets you kind of up to speed quickly

00:50:12,850 --> 00:50:18,290
and then they have one that is the

00:50:15,200 --> 00:50:20,360
gentle introduction to Roz down here

00:50:18,290 --> 00:50:21,740
this one is relatively new one I haven't

00:50:20,360 --> 00:50:23,330
had a chance to really play with it all

00:50:21,740 --> 00:50:25,490
that much and kind of read through and

00:50:23,330 --> 00:50:28,130
review it yet but I just like the idea

00:50:25,490 --> 00:50:31,850
of a gentle introduction to Roz because

00:50:28,130 --> 00:50:33,560
Roz is by no means gentle if you just

00:50:31,850 --> 00:50:35,320
simply start looking at all the XML and

00:50:33,560 --> 00:50:37,880
everything especially the definition of

00:50:35,320 --> 00:50:40,730
the the languages and everything when

00:50:37,880 --> 00:50:43,040
you when you get ready to do a for

00:50:40,730 --> 00:50:47,360
instance I'll show you this when you get

00:50:43,040 --> 00:50:49,509
ready to do a robot that has C where am

00:50:47,360 --> 00:50:53,559
I I think there

00:50:49,509 --> 00:50:58,239
no no all right well that's okay let's

00:50:53,559 --> 00:51:03,209
go to catkin workspace go to source and

00:50:58,239 --> 00:51:11,199
go to the ELC robot and then go to you

00:51:03,209 --> 00:51:13,689
RDF this robot here number six has got

00:51:11,199 --> 00:51:17,859
all the definitions in it for all the

00:51:13,689 --> 00:51:20,109
wheels and how the inertia works and

00:51:17,859 --> 00:51:22,179
everything else so for instance we see

00:51:20,109 --> 00:51:26,469
here there's the base that we've got to

00:51:22,179 --> 00:51:30,639
find we see what its mass is and this is

00:51:26,469 --> 00:51:33,519
in kilograms inertia this is an inertial

00:51:30,639 --> 00:51:35,919
frame work if you look up inertia in

00:51:33,519 --> 00:51:37,359
Wikipedia it'll actually take you down

00:51:35,919 --> 00:51:40,149
this path and they use the exact same

00:51:37,359 --> 00:51:42,849
definition that wikipedia cat has so if

00:51:40,149 --> 00:51:46,059
you're interested in that here is I told

00:51:42,849 --> 00:51:49,299
you I had a caster there's the

00:51:46,059 --> 00:51:51,429
definition of the caster and again this

00:51:49,299 --> 00:51:53,109
caster doesn't actually do anything it's

00:51:51,429 --> 00:51:55,599
just simply stuck on the bottom of the

00:51:53,109 --> 00:51:58,779
box and it's just simply there to keep

00:51:55,599 --> 00:52:01,719
the box from tilting tipping over but we

00:51:58,779 --> 00:52:05,139
see the that's a roll pitch and yaw

00:52:01,719 --> 00:52:07,959
again is zero we see the size and we see

00:52:05,139 --> 00:52:11,679
the relative attachment point we see

00:52:07,959 --> 00:52:13,899
that it's our sphere of radius 0.05 and

00:52:11,679 --> 00:52:16,569
again we have some characteristic of the

00:52:13,899 --> 00:52:21,719
inertia associated with the caster then

00:52:16,569 --> 00:52:24,459
the right wheel there's the right wheel

00:52:21,719 --> 00:52:28,689
we specify that we want a dark gray

00:52:24,459 --> 00:52:30,669
color we specify its radiuses in this

00:52:28,689 --> 00:52:32,769
particular case there is a roll

00:52:30,669 --> 00:52:35,649
associated with it because it is not

00:52:32,769 --> 00:52:38,169
flat it's kind of vertical here and it's

00:52:35,649 --> 00:52:41,380
going to be attached to the box we then

00:52:38,169 --> 00:52:43,779
have the that's the right wheel then we

00:52:41,380 --> 00:52:47,409
have the right wheel joint that we have

00:52:43,779 --> 00:52:50,259
to describe the left wheel and then the

00:52:47,409 --> 00:52:51,639
left wheel joint and then that's once we

00:52:50,259 --> 00:52:53,829
get past the left wheel joint then we

00:52:51,639 --> 00:52:57,819
basically describe the whole robot to

00:52:53,829 --> 00:52:59,800
launch this what we'll do is we'll do a

00:52:57,819 --> 00:53:04,750
Roz law

00:52:59,800 --> 00:53:11,500
and we need the launch file which is

00:53:04,750 --> 00:53:17,650
whoops let me go look at that hello

00:53:11,500 --> 00:53:20,440
oh it's a I'm in the wrong directory so

00:53:17,650 --> 00:53:28,540
there's the visualization so we'll do a

00:53:20,440 --> 00:53:28,839
Roz launch if I can spell yes there we

00:53:28,540 --> 00:53:34,359
go

00:53:28,839 --> 00:53:45,790
and this whoops and then model colon

00:53:34,359 --> 00:53:50,910
equals LC robot six dot you RDF and I

00:53:45,790 --> 00:53:50,910
messed up somewhere oh yeah

00:53:51,900 --> 00:54:02,710
so I messed up but I'm missing what oh

00:53:57,720 --> 00:54:05,290
yeah yeah yeah yeah but it should find

00:54:02,710 --> 00:54:07,450
it actually maybe I'm in the wrong

00:54:05,290 --> 00:54:12,640
directory here cuz that should have

00:54:07,450 --> 00:54:14,589
launched oh you're right there it is now

00:54:12,640 --> 00:54:16,869
you'll notice there's nothing here right

00:54:14,589 --> 00:54:18,430
now because what I have to do since this

00:54:16,869 --> 00:54:20,800
is the first time I've run it on this

00:54:18,430 --> 00:54:24,849
particular model I need to specify that

00:54:20,800 --> 00:54:26,530
I'm interested into the base link is

00:54:24,849 --> 00:54:32,640
what I'm interested in and I want to add

00:54:26,530 --> 00:54:39,490
a robot model there's my robot model and

00:54:32,640 --> 00:54:41,650
then I want to add the transform so I

00:54:39,490 --> 00:54:43,180
can actually then roll it around so if

00:54:41,650 --> 00:54:45,010
you scroll in far enough you'll actually

00:54:43,180 --> 00:54:47,560
notice that there's a blue and a red

00:54:45,010 --> 00:54:49,990
marker here which indicates up and

00:54:47,560 --> 00:54:52,540
forward so we can now start messing

00:54:49,990 --> 00:54:54,089
around with this and start rolling it

00:54:52,540 --> 00:54:57,339
around just to see what it does

00:54:54,089 --> 00:54:59,470
but that's the general idea behind RV's

00:54:57,339 --> 00:55:01,210
and then you take that same thing and

00:54:59,470 --> 00:55:02,650
you put that into gazebo and now you

00:55:01,210 --> 00:55:07,599
have a 3d model that you can run around

00:55:02,650 --> 00:55:11,880
in space alright questions anybody's

00:55:07,599 --> 00:55:11,880
still awake yes

00:55:17,140 --> 00:55:27,530
as a hobbyist not this now actually

00:55:23,410 --> 00:55:30,140
there are a lot of ones from seed studio

00:55:27,530 --> 00:55:32,270
s EEE there's three e's where what a

00:55:30,140 --> 00:55:35,960
reason why sure why they have the

00:55:32,270 --> 00:55:39,620
Cherokee which is a little like $49

00:55:35,960 --> 00:55:42,650
robot chassis runs off of an Arduino has

00:55:39,620 --> 00:55:44,780
a very simple motor controller little

00:55:42,650 --> 00:55:46,430
two amp motor controllers so it's a good

00:55:44,780 --> 00:55:48,170
place to get started because it's easy

00:55:46,430 --> 00:55:50,390
to get it up and running obviously

00:55:48,170 --> 00:55:52,670
there's nothing really spectacular about

00:55:50,390 --> 00:55:54,830
it because it doesn't have RF control no

00:55:52,670 --> 00:55:56,450
Wi-Fi or anything like that but it's an

00:55:54,830 --> 00:55:58,820
easy platform that you can start with

00:55:56,450 --> 00:56:01,970
and then start adding Wi-Fi start adding

00:55:58,820 --> 00:56:02,750
or Bluetooth or 802 15 for add cameras

00:56:01,970 --> 00:56:05,720
things of that sort

00:56:02,750 --> 00:56:07,880
it's a units about that big and you can

00:56:05,720 --> 00:56:09,860
actually buy it off of Amazon so that

00:56:07,880 --> 00:56:11,570
would be where I would start it's pretty

00:56:09,860 --> 00:56:14,150
easy to get we're up and running and

00:56:11,570 --> 00:56:15,770
doesn't cost a whole lot of money if you

00:56:14,150 --> 00:56:17,330
want to have higher end stuff you

00:56:15,770 --> 00:56:21,440
basically start at a hundred bucks and

00:56:17,330 --> 00:56:25,040
go up some of my robots are three or

00:56:21,440 --> 00:56:29,660
four thousand dollars so it's a hobby

00:56:25,040 --> 00:56:30,580
that my wife is not fond of okay thank

00:56:29,660 --> 00:56:33,349
you very much

00:56:30,580 --> 00:56:35,410
[Applause]

00:56:33,349 --> 00:56:35,410

YouTube URL: https://www.youtube.com/watch?v=yWtGUk3PBms


