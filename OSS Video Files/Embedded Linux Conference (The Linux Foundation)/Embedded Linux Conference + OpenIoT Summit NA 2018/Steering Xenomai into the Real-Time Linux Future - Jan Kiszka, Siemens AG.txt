Title: Steering Xenomai into the Real-Time Linux Future - Jan Kiszka, Siemens AG
Publication date: 2018-03-14
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Steering Xenomai into the Real-Time Linux Future - Jan Kiszka, Siemens AG

 The Xenomai project can look back on a 17 years long history now. It is being used on a significant number of mission critical systems, both in industry and academia. Still, its active developer community was always comparably small, and the loss of one of its core maintainers put the project under additional pressure.

In this talk, we will present our plans and first steps to revive the Xenomai community, make it broader and stronger. This involves scaling down the project scope to a maintainable core. We will also discuss Xenomai's role and relationship to PREEMPT-RT. Furthermore, we will look into the future of its co-kernel variant, and present first technical details of a major overhaul to simplify its maintainability and possibly make it upstream relevant. 

About Jan Kiszka
Jan Kiszka is working as consultant and senior software engineer in the Competence Center for Embedded Linux at Siemens Corporate Technology. He is supporting Siemens division and subsidiaries with adapting and enhancing open source as platform for their products. For customer projects and whenever his spare time permits, he is contributing to open source projects, specifically in the area of real-time and virtualization.
Captions: 
	00:00:00,240 --> 00:00:07,290
welcome everyone my name is Ann kaczka

00:00:03,500 --> 00:00:09,269
working for Siemens copic neurology we

00:00:07,290 --> 00:00:09,929
are doing all kind of crazy stuff with

00:00:09,269 --> 00:00:14,820
Linux

00:00:09,929 --> 00:00:16,410
mostly for products I'm working for

00:00:14,820 --> 00:00:18,330
Siemens for 10 years and actually I'm

00:00:16,410 --> 00:00:21,539
working with real time Linux now for

00:00:18,330 --> 00:00:22,710
almost 18 years and it looks like I will

00:00:21,539 --> 00:00:25,890
have the pleasure to do it a couple of

00:00:22,710 --> 00:00:27,359
years more today I'm representing

00:00:25,890 --> 00:00:30,720
actually an open-source project here

00:00:27,359 --> 00:00:32,610
which is called X&Y and about what this

00:00:30,720 --> 00:00:37,290
project is and specifically where we are

00:00:32,610 --> 00:00:40,200
heading to with it as a community so

00:00:37,290 --> 00:00:42,660
let's again a for today just a quick

00:00:40,200 --> 00:00:46,620
jump into said oh my what it is what's

00:00:42,660 --> 00:00:49,020
it for the reason maybe you wonder if

00:00:46,620 --> 00:00:51,840
you are familiar with rotom linux why we

00:00:49,020 --> 00:00:54,000
need so neat this that's good for what's

00:00:51,840 --> 00:00:55,850
the pros and cons and looking a bit back

00:00:54,000 --> 00:01:00,420
and the current state of the project

00:00:55,850 --> 00:01:02,219
which is well there are two started the

00:01:00,420 --> 00:01:04,229
mid-tone changes we are coming with the

00:01:02,219 --> 00:01:05,939
project what has to be done what we plan

00:01:04,229 --> 00:01:09,290
to do and what further has to be done

00:01:05,939 --> 00:01:12,150
and then also looking if a bit ahead

00:01:09,290 --> 00:01:14,340
architectural outlook what the future

00:01:12,150 --> 00:01:19,500
might look like in a well some years

00:01:14,340 --> 00:01:21,750
from now so what is clean of mine if you

00:01:19,500 --> 00:01:23,640
see my slides from two years ago

00:01:21,750 --> 00:01:26,820
actually it's pretty much the same just

00:01:23,640 --> 00:01:29,369
in the nutshell Senna my is it's an

00:01:26,820 --> 00:01:31,710
artist to Linux portability framework so

00:01:29,369 --> 00:01:34,770
if you are coming from the classic small

00:01:31,710 --> 00:01:36,479
system specialized artists like

00:01:34,770 --> 00:01:38,850
environment and you want to run on a

00:01:36,479 --> 00:01:40,619
state-of-the-art Linux system this is

00:01:38,850 --> 00:01:42,750
actually tool which may help you if you

00:01:40,619 --> 00:01:45,960
have wrote on requirements or if you

00:01:42,750 --> 00:01:48,600
have specific API requirements it comes

00:01:45,960 --> 00:01:50,189
in two flavors which is important so

00:01:48,600 --> 00:01:51,659
there's one thing which is the call to

00:01:50,189 --> 00:01:53,220
Co kernel approach we'll talk a little

00:01:51,659 --> 00:01:55,890
bit about more about this what it means

00:01:53,220 --> 00:01:58,200
as an extension for a patch Linux system

00:01:55,890 --> 00:02:01,170
and there's also a flavor which is a

00:01:58,200 --> 00:02:04,829
part of the cinema project to use it as

00:02:01,170 --> 00:02:07,740
a tool as a library set and to run on

00:02:04,829 --> 00:02:08,750
native Linux including preempt RT and to

00:02:07,740 --> 00:02:11,580
emulate

00:02:08,750 --> 00:02:14,170
preexisting Otto's libraries or artists

00:02:11,580 --> 00:02:16,510
API so this way as well

00:02:14,170 --> 00:02:18,370
so the following talk actually is more

00:02:16,510 --> 00:02:20,260
about the coconut part of it which

00:02:18,370 --> 00:02:22,120
doesn't mean that the native part is

00:02:20,260 --> 00:02:24,130
neglected and what will be dropped in

00:02:22,120 --> 00:02:27,130
the future whatever it's simply that is

00:02:24,130 --> 00:02:28,959
more or less it works pretty well as it

00:02:27,130 --> 00:02:31,090
is right now it's not perfect doesn't

00:02:28,959 --> 00:02:32,830
fulfill our requirements but the actual

00:02:31,090 --> 00:02:35,800
challenge we have of the project is more

00:02:32,830 --> 00:02:38,470
on the cultural side and speaking about

00:02:35,800 --> 00:02:40,739
coke corners actually by now so nama is

00:02:38,470 --> 00:02:42,670
the only remaining product rate

00:02:40,739 --> 00:02:45,340
implementation of this technology of

00:02:42,670 --> 00:02:47,860
this architecture on Linux if you look

00:02:45,340 --> 00:02:49,590
back some 20 years you may remember that

00:02:47,860 --> 00:02:52,360
they were more solutions on the market

00:02:49,590 --> 00:02:54,550
that basically consulate over the years

00:02:52,360 --> 00:02:57,340
at least if you think about will using

00:02:54,550 --> 00:03:01,690
this thing in a serious development of

00:02:57,340 --> 00:03:04,540
serious products so what is a coke

00:03:01,690 --> 00:03:07,150
kernel so this is actually my only

00:03:04,540 --> 00:03:10,630
graphical art I have here let's give you

00:03:07,150 --> 00:03:11,769
an idea about the idea behind is that

00:03:10,630 --> 00:03:15,160
you

00:03:11,769 --> 00:03:17,620
instead of making linux as as a system

00:03:15,160 --> 00:03:19,209
completely a real-time capable or at

00:03:17,620 --> 00:03:21,820
least parts of it completely real-time

00:03:19,209 --> 00:03:25,180
capable with all its part like the pram

00:03:21,820 --> 00:03:26,620
30 approach thus converting schedulers

00:03:25,180 --> 00:03:28,540
converting the internal locks and things

00:03:26,620 --> 00:03:31,150
like this and the koch kernel is

00:03:28,540 --> 00:03:33,250
actually okay this says this system is

00:03:31,150 --> 00:03:35,140
list is optimized for certain purposes

00:03:33,250 --> 00:03:37,019
we don't want to changed it too much we

00:03:35,140 --> 00:03:40,900
just want to put something your site

00:03:37,019 --> 00:03:43,269
which allows you to keep most of the

00:03:40,900 --> 00:03:47,230
programming model you have and that you

00:03:43,269 --> 00:03:50,230
also have with yeah POSIX system but

00:03:47,230 --> 00:03:52,840
have some magic underneath which allows

00:03:50,230 --> 00:03:55,930
you to use for a certain set of of tasks

00:03:52,840 --> 00:03:58,180
in your in your application a different

00:03:55,930 --> 00:04:01,060
scheduling means a prioritized a

00:03:58,180 --> 00:04:03,280
real-time scheduling so in a nutshell

00:04:01,060 --> 00:04:05,290
what happens is if you come and invent

00:04:03,280 --> 00:04:07,180
comes from your from your device from

00:04:05,290 --> 00:04:10,000
your system from the fields and

00:04:07,180 --> 00:04:13,570
interrupt these events are dispatched

00:04:10,000 --> 00:04:16,450
according to their category Linux kind

00:04:13,570 --> 00:04:19,150
non real-time and and real-time and then

00:04:16,450 --> 00:04:21,370
they are directed to when it's real-time

00:04:19,150 --> 00:04:23,409
to the real-time core the real-time

00:04:21,370 --> 00:04:25,539
scheduler and that core can actually

00:04:23,409 --> 00:04:26,980
preempt Linux a pretty much every point

00:04:25,539 --> 00:04:29,680
in time

00:04:26,980 --> 00:04:32,800
later on I will use the term of nmi so

00:04:29,680 --> 00:04:34,900
think of it really as a huge piece of

00:04:32,800 --> 00:04:37,300
software running in MI context from the

00:04:34,900 --> 00:04:40,360
Linux point of view still what you keep

00:04:37,300 --> 00:04:42,580
is what I said there's only same

00:04:40,360 --> 00:04:44,890
programming model basically you have one

00:04:42,580 --> 00:04:48,220
process which can live in both worlds at

00:04:44,890 --> 00:04:50,380
the same time but one threat can only

00:04:48,220 --> 00:04:52,650
live in one of these worlds while they

00:04:50,380 --> 00:04:58,780
can migrate from one side to the other

00:04:52,650 --> 00:05:01,000
so that's the co kernel approach when do

00:04:58,780 --> 00:05:02,770
you want to use it

00:05:01,000 --> 00:05:04,660
so there's actually the case that if

00:05:02,770 --> 00:05:06,940
you're coming from these Otto's worlds

00:05:04,660 --> 00:05:09,460
and you look at the api's and the

00:05:06,940 --> 00:05:11,320
behavior the temporal behavior it kind

00:05:09,460 --> 00:05:14,200
of special and they do not really map

00:05:11,320 --> 00:05:16,090
well on POSIX systems or may not be

00:05:14,200 --> 00:05:18,370
bound for existence but you possibly

00:05:16,090 --> 00:05:20,080
have a large code base which depends on

00:05:18,370 --> 00:05:21,760
this behavior which we want to save

00:05:20,080 --> 00:05:23,470
because the art was no longer maintained

00:05:21,760 --> 00:05:25,650
or it's no longer running on your

00:05:23,470 --> 00:05:28,210
hardware and whatever reasons you have

00:05:25,650 --> 00:05:29,950
then this coke kernel can actually help

00:05:28,210 --> 00:05:31,840
you because it's more flexible than the

00:05:29,950 --> 00:05:34,240
next at the current form regarding

00:05:31,840 --> 00:05:37,570
extending and modeling these behaviors

00:05:34,240 --> 00:05:39,400
in a yeah inaccurate enough way if you

00:05:37,570 --> 00:05:40,600
know where that last code bases if you

00:05:39,400 --> 00:05:42,700
change a little bit of the timing

00:05:40,600 --> 00:05:44,980
behavior things become interesting it

00:05:42,700 --> 00:05:48,280
doesn't mean that the API becomes

00:05:44,980 --> 00:05:50,590
incorrect but the application actually

00:05:48,280 --> 00:05:53,080
may behave in a different way exposing

00:05:50,590 --> 00:05:56,800
behavior or incorrect behavior that

00:05:53,080 --> 00:05:58,270
hasn't happen the original system yeah

00:05:56,800 --> 00:05:59,740
but this one one of the reasons

00:05:58,270 --> 00:06:01,300
basically why we have this

00:05:59,740 --> 00:06:04,110
infrastructure which makes it possible

00:06:01,300 --> 00:06:07,720
to model these interfaces more easily

00:06:04,110 --> 00:06:10,690
another advantage that most of our users

00:06:07,720 --> 00:06:13,480
are interested in is that these Kokura

00:06:10,690 --> 00:06:14,920
yes they are so separate and they have

00:06:13,480 --> 00:06:16,930
some benefits regarding the

00:06:14,920 --> 00:06:18,610
architectural structure of your

00:06:16,930 --> 00:06:21,970
application because you have to think

00:06:18,610 --> 00:06:23,830
now about which belongs to which part of

00:06:21,970 --> 00:06:25,450
the system so with the parameter T

00:06:23,830 --> 00:06:27,820
approach basically you can take an

00:06:25,450 --> 00:06:29,740
arbitrary application put some priority

00:06:27,820 --> 00:06:32,230
in it and it runs in real time which

00:06:29,740 --> 00:06:34,090
doesn't mean it is real time but it gets

00:06:32,230 --> 00:06:36,220
all the benefits from the system in the

00:06:34,090 --> 00:06:38,230
quality the system can deliver with the

00:06:36,220 --> 00:06:38,920
Koch kernel approach if you call the

00:06:38,230 --> 00:06:40,570
wrong ap

00:06:38,920 --> 00:06:42,610
you leave the real-time world and

00:06:40,570 --> 00:06:45,970
because of the architecture you get it

00:06:42,610 --> 00:06:47,620
pretty prominently shown to you that

00:06:45,970 --> 00:06:50,500
also includes if you did some miss

00:06:47,620 --> 00:06:54,400
configuration on the system which is

00:06:50,500 --> 00:06:56,740
also easy to achieve with priam 30 these

00:06:54,400 --> 00:06:58,600
kind of things are not really the

00:06:56,740 --> 00:07:00,960
problem of the of the co kernel approach

00:06:58,600 --> 00:07:03,790
because there is this clear separation

00:07:00,960 --> 00:07:07,120
so we have some application of this kind

00:07:03,790 --> 00:07:08,770
in our products where it actually helps

00:07:07,120 --> 00:07:10,660
a lot if you have a large user base a

00:07:08,770 --> 00:07:13,030
large code base and a large developer

00:07:10,660 --> 00:07:15,040
base and that the system tells you

00:07:13,030 --> 00:07:16,720
actively ok you are leaving the

00:07:15,040 --> 00:07:21,700
real-time world is this what you want to

00:07:16,720 --> 00:07:23,920
do at this point in time yeah and

00:07:21,700 --> 00:07:25,540
another reason that is depending heavily

00:07:23,920 --> 00:07:28,870
on when the Platinum you're running on

00:07:25,540 --> 00:07:30,850
is the latency and the performance

00:07:28,870 --> 00:07:32,770
concerns you may have when you convert

00:07:30,850 --> 00:07:34,810
the complete Linux system to a pair to a

00:07:32,770 --> 00:07:36,940
real-time system so pre empted T a

00:07:34,810 --> 00:07:39,700
natural basically means more context

00:07:36,940 --> 00:07:41,740
switches and that's approach basically

00:07:39,700 --> 00:07:44,380
how they made the existing Linux system

00:07:41,740 --> 00:07:46,660
so preemptable that a lot of things

00:07:44,380 --> 00:07:47,920
happen in task context and that means a

00:07:46,660 --> 00:07:50,050
lot of things have to switch all the

00:07:47,920 --> 00:07:52,840
time just to keep this preempt ability

00:07:50,050 --> 00:07:56,110
low that of course doesn't come for free

00:07:52,840 --> 00:07:58,210
and it may actually cost you something

00:07:56,110 --> 00:08:00,850
if you have like one of the most use

00:07:58,210 --> 00:08:02,530
case we have if you have a performance

00:08:00,850 --> 00:08:04,450
sensitive workload running a site or a

00:08:02,530 --> 00:08:06,160
term workload then this performance

00:08:04,450 --> 00:08:09,130
sensitive workload will of course feel

00:08:06,160 --> 00:08:11,470
the differences and of of a parameter

00:08:09,130 --> 00:08:13,930
keepers and the other thing is that

00:08:11,470 --> 00:08:15,820
because of this a lot of activity going

00:08:13,930 --> 00:08:18,280
on you don't see that normally on an x86

00:08:15,820 --> 00:08:20,110
high-end system but you may see it for

00:08:18,280 --> 00:08:23,650
example on a Raspberry Pi or even lower

00:08:20,110 --> 00:08:25,660
a device and that's also sometimes a

00:08:23,650 --> 00:08:27,400
reason well if you're on too close on

00:08:25,660 --> 00:08:30,040
the capabilities of the hardware with

00:08:27,400 --> 00:08:32,050
your deadlines with your requirements

00:08:30,040 --> 00:08:33,490
then this may help basically to get you

00:08:32,050 --> 00:08:34,750
a little bit more headspace and feel

00:08:33,490 --> 00:08:36,970
more comfortable and to feel that you're

00:08:34,750 --> 00:08:38,950
not really about a few microseconds away

00:08:36,970 --> 00:08:44,010
from the latency of the hardware and of

00:08:38,950 --> 00:08:44,010
the software stick well

00:08:46,610 --> 00:08:49,639
[Music]

00:08:49,780 --> 00:08:54,380
I didn't do benchmark on this and this

00:08:52,130 --> 00:08:55,910
is actually not an absolute design so

00:08:54,380 --> 00:08:57,230
I've seen a lot of benchmarks on this

00:08:55,910 --> 00:09:01,490
and all of these benchmarks actually are

00:08:57,230 --> 00:09:04,370
wrong and but I think what was the last

00:09:01,490 --> 00:09:06,770
thing we have been measured I saw

00:09:04,370 --> 00:09:08,720
recently some benchmark on a recipe pie

00:09:06,770 --> 00:09:10,880
and it was basically a factor of two

00:09:08,720 --> 00:09:12,650
difference on this system which may mean

00:09:10,880 --> 00:09:15,500
if you really tuned it you probably go

00:09:12,650 --> 00:09:20,140
down a little bit more but anyway it is

00:09:15,500 --> 00:09:20,140
not for free that's that's a fact and

00:09:20,710 --> 00:09:28,190
yeah yeah preamp colonel other print per

00:09:25,460 --> 00:09:31,400
entity versus xn on my basically that

00:09:28,190 --> 00:09:33,320
was the comparison yeah and regarding

00:09:31,400 --> 00:09:34,460
the workload thing yes this is deafening

00:09:33,320 --> 00:09:36,230
I don't have the numbers for this as

00:09:34,460 --> 00:09:38,030
well but this is jumpy form from the

00:09:36,230 --> 00:09:46,760
measuring of yeah probably is a bit

00:09:38,030 --> 00:09:48,380
longer ago yeah okay yeah in the end you

00:09:46,760 --> 00:09:48,890
have to measure the thing that's that's

00:09:48,380 --> 00:09:50,780
the point

00:09:48,890 --> 00:09:53,180
and maybe it's improving further and

00:09:50,780 --> 00:09:55,280
looking forward to this and as I said

00:09:53,180 --> 00:09:57,200
this is not there's no black and white

00:09:55,280 --> 00:10:00,380
so they are a good reason to not use a

00:09:57,200 --> 00:10:02,060
cocoa now rather go for pram 30 so first

00:10:00,380 --> 00:10:03,680
of all if none of these concerns I just

00:10:02,060 --> 00:10:06,080
brought up is a concern for you so for

00:10:03,680 --> 00:10:07,880
example if your deadline is one

00:10:06,080 --> 00:10:11,330
millisecond and the latency you get from

00:10:07,880 --> 00:10:14,000
the system is 10 microseconds or 30 you

00:10:11,330 --> 00:10:15,920
don't really care what probes you to

00:10:14,000 --> 00:10:18,890
underneath and yeah that's good enough I

00:10:15,920 --> 00:10:20,840
would say also real time is not over

00:10:18,890 --> 00:10:23,480
often real time and the sense of hat

00:10:20,840 --> 00:10:26,780
real time and Yuri talk to your user and

00:10:23,480 --> 00:10:28,280
your scenario so there's also a good

00:10:26,780 --> 00:10:31,520
reason to go with even standard linux

00:10:28,280 --> 00:10:33,020
monitor problems and also important

00:10:31,520 --> 00:10:34,760
criteria is as I said when the

00:10:33,020 --> 00:10:37,820
application the real-time part is

00:10:34,760 --> 00:10:39,620
actually manageable there's a few skill

00:10:37,820 --> 00:10:41,480
developers working on this it's a

00:10:39,620 --> 00:10:43,550
well-defined interface they interact

00:10:41,480 --> 00:10:45,050
with the system and then it's also a

00:10:43,550 --> 00:10:47,030
good choice

00:10:45,050 --> 00:10:49,520
yeah and nothing comes for free and the

00:10:47,030 --> 00:10:52,310
cocoa nodes have some yeah maintenance

00:10:49,520 --> 00:10:54,290
and some integration challenges we will

00:10:52,310 --> 00:10:56,510
talk about this more and that can also

00:10:54,290 --> 00:10:58,790
be a reason to not go this path

00:10:56,510 --> 00:11:01,070
but in the end keep in mind in general

00:10:58,790 --> 00:11:02,630
rule term requires maintenance and also

00:11:01,070 --> 00:11:04,339
the parameter T approach requires

00:11:02,630 --> 00:11:06,139
maintenance and will require maintenance

00:11:04,339 --> 00:11:08,630
it sir has been a hot topic these days

00:11:06,139 --> 00:11:10,160
around hopefully it will be soft and we

00:11:08,630 --> 00:11:13,610
are also investing as CMAs into this

00:11:10,160 --> 00:11:14,690
topic and but this is a general problem

00:11:13,610 --> 00:11:15,889
we will see later on that this is

00:11:14,690 --> 00:11:19,279
actually a general problem of the

00:11:15,889 --> 00:11:21,170
community here so looking back a little

00:11:19,279 --> 00:11:24,279
bit on sanam I run through this quickly

00:11:21,170 --> 00:11:27,620
Sonoma has a history by now of 17 years

00:11:24,279 --> 00:11:29,540
started in 2001 as this portability

00:11:27,620 --> 00:11:31,100
framework looking back then and it's

00:11:29,540 --> 00:11:33,980
sometimes a reason why to being confused

00:11:31,100 --> 00:11:36,980
with art I looking for a real time

00:11:33,980 --> 00:11:39,079
capable baseline to run on on Linux and

00:11:36,980 --> 00:11:41,269
that time it was the choice to go

00:11:39,079 --> 00:11:42,860
without I so they have a lot of

00:11:41,269 --> 00:11:44,720
technology involved like a day

00:11:42,860 --> 00:11:46,149
especially possibly know this again if

00:11:44,720 --> 00:11:49,550
you're logging in this a long time

00:11:46,149 --> 00:11:52,279
anti-fusion was a the branch of art I to

00:11:49,550 --> 00:11:55,220
work towards Saxena my way which then

00:11:52,279 --> 00:11:58,910
ended in 2005 and with the release of

00:11:55,220 --> 00:12:00,800
cinema 2.0 which basically realized that

00:11:58,910 --> 00:12:03,139
the two projects are two different their

00:12:00,800 --> 00:12:06,980
goals and their way of being maintained

00:12:03,139 --> 00:12:09,380
and external my went its own way for

00:12:06,980 --> 00:12:11,870
different applications inane and a

00:12:09,380 --> 00:12:14,630
different way of maintaining things and

00:12:11,870 --> 00:12:17,899
it evolved pretty quick from their poor

00:12:14,630 --> 00:12:21,589
to a lot of architectures by now we are

00:12:17,899 --> 00:12:23,930
less will see and yeah by now we have 2x

00:12:21,589 --> 00:12:27,380
a number version 3 released now three

00:12:23,930 --> 00:12:29,810
years ago after quite um development

00:12:27,380 --> 00:12:32,839
that basically rework the core of the

00:12:29,810 --> 00:12:35,480
kernel mind towards just doing the the

00:12:32,839 --> 00:12:37,069
POSIX Co kernel approach and the kernel

00:12:35,480 --> 00:12:39,529
and doing all the rest love the other

00:12:37,069 --> 00:12:42,380
api's if you want to emulate for example

00:12:39,529 --> 00:12:45,190
weeks works or UI tron things like this

00:12:42,380 --> 00:12:47,510
this has been done now in user space and

00:12:45,190 --> 00:12:50,120
it will further my three also this

00:12:47,510 --> 00:12:52,069
aforementioned support for a for native

00:12:50,120 --> 00:12:54,260
Linux came in and it's actually being

00:12:52,069 --> 00:12:56,990
used in quite a few products and where

00:12:54,260 --> 00:13:01,089
you want to model the behavior of a

00:12:56,990 --> 00:13:04,790
previous auto system just on plain linux

00:13:01,089 --> 00:13:08,180
and yeah so I recently attended to talk

00:13:04,790 --> 00:13:10,399
at first them and about how to build

00:13:08,180 --> 00:13:12,500
real-time Linux systems of spread 30 and

00:13:10,399 --> 00:13:14,689
said oh my and in the end someone

00:13:12,500 --> 00:13:18,680
audience asked by the way who is using

00:13:14,689 --> 00:13:20,899
actually cinema and yeah well I had to

00:13:18,680 --> 00:13:23,870
step up because even the speaker wasn't

00:13:20,899 --> 00:13:26,149
able to provide an example and and

00:13:23,870 --> 00:13:28,699
benched one of our examples and actually

00:13:26,149 --> 00:13:31,069
there are many out there in the field

00:13:28,699 --> 00:13:32,990
being used for quite a while in the area

00:13:31,069 --> 00:13:37,060
of machine control motion control system

00:13:32,990 --> 00:13:39,500
PLC's printing machines so the long run

00:13:37,060 --> 00:13:42,709
systems for printing newspapers for

00:13:39,500 --> 00:13:45,560
example also printers copiers from Xerox

00:13:42,709 --> 00:13:51,079
and 3d printers we have it's in the room

00:13:45,560 --> 00:13:52,519
here network switches last but not least

00:13:51,079 --> 00:13:54,170
the magnetic resonance scanner the

00:13:52,519 --> 00:13:56,920
example we bring for quite a few years

00:13:54,170 --> 00:14:00,139
now so if you ever have to go for

00:13:56,920 --> 00:14:03,350
examination and MRT and Siemens branded

00:14:00,139 --> 00:14:06,319
you will be examined not only by

00:14:03,350 --> 00:14:08,209
Rotom Linux based on say no my and the

00:14:06,319 --> 00:14:09,829
robotic research field is it's pretty

00:14:08,209 --> 00:14:11,300
formula for quite a while and out of

00:14:09,829 --> 00:14:15,470
this research sometimes they're also

00:14:11,300 --> 00:14:16,970
becoming product out of this and what I

00:14:15,470 --> 00:14:19,069
recently learned what we do is need on

00:14:16,970 --> 00:14:21,319
its community and the NASA is also using

00:14:19,069 --> 00:14:25,430
it to plan to go for space with some

00:14:21,319 --> 00:14:28,670
ends on may be a mouse you know yeah

00:14:25,430 --> 00:14:30,050
this is basically what is known and I

00:14:28,670 --> 00:14:33,230
don't have much pictures here actually

00:14:30,050 --> 00:14:36,050
because well we have a large shadow user

00:14:33,230 --> 00:14:39,170
base and that is actually part of the

00:14:36,050 --> 00:14:40,939
problem of this project so what I'm some

00:14:39,170 --> 00:14:41,630
of these project is unknown to us as a

00:14:40,939 --> 00:14:44,420
maintainer

00:14:41,630 --> 00:14:46,069
with our direct context so it's recently

00:14:44,420 --> 00:14:48,740
I learned there are some out enormous

00:14:46,069 --> 00:14:50,899
logistic vehicles running around in in

00:14:48,740 --> 00:14:54,949
shop floors and in factory floors

00:14:50,899 --> 00:14:57,260
driven by Excel oh my and we know that

00:14:54,949 --> 00:14:59,120
there must be more simply based on the

00:14:57,260 --> 00:15:01,310
fact if you listen around if you talk to

00:14:59,120 --> 00:15:03,709
people how well-known this is and how

00:15:01,310 --> 00:15:05,810
many also consultants are providing

00:15:03,709 --> 00:15:08,660
services to implement it and to big it

00:15:05,810 --> 00:15:11,689
into existing products so walked around

00:15:08,660 --> 00:15:13,790
a couple of years a couple of weeks ago

00:15:11,689 --> 00:15:17,270
on a bedded welfare and then in Germany

00:15:13,790 --> 00:15:19,580
and if you if you just watch the

00:15:17,270 --> 00:15:21,500
and what was printed there as technology

00:15:19,580 --> 00:15:23,480
being offered Kannamma was often honored

00:15:21,500 --> 00:15:25,160
if you talk to me for example they have

00:15:23,480 --> 00:15:27,649
a DSP demonstrating tears and I'll turn

00:15:25,160 --> 00:15:29,209
on my vases and in generally it was

00:15:27,649 --> 00:15:30,470
pretty well known that it exists it

00:15:29,209 --> 00:15:33,140
doesn't mean it on every of these

00:15:30,470 --> 00:15:36,050
providers they have cinnamon but quite a

00:15:33,140 --> 00:15:38,060
few have that used or are still using it

00:15:36,050 --> 00:15:39,649
and so and if you look at our

00:15:38,060 --> 00:15:41,990
subscribers list is pretty long and

00:15:39,649 --> 00:15:44,000
there is this user base behind it that

00:15:41,990 --> 00:15:45,230
is not really visible if you just look

00:15:44,000 --> 00:15:47,930
at the web page if you just look at the

00:15:45,230 --> 00:15:50,899
mailing list and see well what are being

00:15:47,930 --> 00:15:52,640
produced there so you may think this

00:15:50,899 --> 00:15:54,709
must be a healthy project given this

00:15:52,640 --> 00:16:01,070
large user base we have given this

00:15:54,709 --> 00:16:03,890
specialized domain well basically if you

00:16:01,070 --> 00:16:07,339
look at what who contributed most and

00:16:03,890 --> 00:16:09,440
left out some people here but they had

00:16:07,339 --> 00:16:11,180
less contribution to the list in the

00:16:09,440 --> 00:16:14,690
fast past five years only to this

00:16:11,180 --> 00:16:16,880
project and you admit some make some

00:16:14,690 --> 00:16:19,839
split here though the two top most

00:16:16,880 --> 00:16:23,390
philip duke are maintained and jill

00:16:19,839 --> 00:16:26,779
myself being working on this as well and

00:16:23,390 --> 00:16:29,839
some of my projects and further people

00:16:26,779 --> 00:16:31,640
some of them also for for business xing

00:16:29,839 --> 00:16:35,000
most for them actually doing it for for

00:16:31,640 --> 00:16:36,890
some employers but unfortunately also

00:16:35,000 --> 00:16:39,200
quite a few and specifically the to

00:16:36,890 --> 00:16:42,620
maintain is doing it partly not on the

00:16:39,200 --> 00:16:46,250
budget of someone's project or someone's

00:16:42,620 --> 00:16:48,589
bill and well these are six people and

00:16:46,250 --> 00:16:52,640
that makes a system which was critical

00:16:48,589 --> 00:16:54,649
for for quite a few products and what

00:16:52,640 --> 00:16:57,589
happens if you have that many people am

00:16:54,649 --> 00:17:01,130
life can be hard and unfair and and it

00:16:57,589 --> 00:17:03,280
had been unfair to us two years ago we

00:17:01,130 --> 00:17:06,319
we lost one of our maintain a--'s

00:17:03,280 --> 00:17:09,199
tragically and that of course creates

00:17:06,319 --> 00:17:11,750
this scenario we all talk about if

00:17:09,199 --> 00:17:14,480
you're under large project that someone

00:17:11,750 --> 00:17:17,270
is missing now not only as a person as a

00:17:14,480 --> 00:17:20,720
human but also as someone contributing

00:17:17,270 --> 00:17:23,839
to this large code base and that cost us

00:17:20,720 --> 00:17:25,699
now the or make us realize basically

00:17:23,839 --> 00:17:28,490
that we have to talk about this openly

00:17:25,699 --> 00:17:30,169
and that there is now a gap for one

00:17:28,490 --> 00:17:30,900
person remaining as the main maintain

00:17:30,169 --> 00:17:33,210
and the main current

00:17:30,900 --> 00:17:36,210
buta this project is too large and and

00:17:33,210 --> 00:17:38,160
too critical to keep it running so for

00:17:36,210 --> 00:17:40,530
us as demons it was clear as a

00:17:38,160 --> 00:17:42,870
consultant role internally we have to

00:17:40,530 --> 00:17:45,270
talk to our users early enough and

00:17:42,870 --> 00:17:47,420
before this problem becomes too real

00:17:45,270 --> 00:17:49,710
means that there's no support anymore

00:17:47,420 --> 00:17:51,540
what to do and that but we did

00:17:49,710 --> 00:17:53,880
internally first of all carefully

00:17:51,540 --> 00:17:56,160
because always about if you if you say

00:17:53,880 --> 00:17:58,230
ok you have a problem and people may run

00:17:56,160 --> 00:18:00,720
away and the problem just gets bigger

00:17:58,230 --> 00:18:03,210
for those who stay and you can't run

00:18:00,720 --> 00:18:05,490
away easily what should we do with the

00:18:03,210 --> 00:18:08,700
two main users better treatments migrate

00:18:05,490 --> 00:18:10,050
away or invest into this specifically if

00:18:08,700 --> 00:18:12,030
we do something this has to be

00:18:10,050 --> 00:18:15,510
coordinated but underneath our own users

00:18:12,030 --> 00:18:17,130
first of all and after not that long

00:18:15,510 --> 00:18:19,350
discussion actually became clear ok yeah

00:18:17,130 --> 00:18:22,050
what we have to invest in this we still

00:18:19,350 --> 00:18:23,700
may migrate eventually and not all the

00:18:22,050 --> 00:18:25,770
scenarios may stay the same forever

00:18:23,700 --> 00:18:27,690
that's clear but for now if you have a

00:18:25,770 --> 00:18:29,970
product out there now afield for 10

00:18:27,690 --> 00:18:31,380
years sometimes you cannot do this

00:18:29,970 --> 00:18:34,200
decision from one day to the other so

00:18:31,380 --> 00:18:37,650
there's no choice anyway so for us the

00:18:34,200 --> 00:18:39,780
decision was to invest in this and we

00:18:37,650 --> 00:18:42,030
also went public with this and along

00:18:39,780 --> 00:18:45,630
this actually there was this famous post

00:18:42,030 --> 00:18:47,070
of Philip on the mailing list about RT

00:18:45,630 --> 00:18:50,310
net analogy in the elephant in the room

00:18:47,070 --> 00:18:52,800
and where he also clearly stated ok

00:18:50,310 --> 00:18:55,800
folks based on this concrete example of

00:18:52,800 --> 00:18:58,560
the drivers and there is a problem we

00:18:55,800 --> 00:19:01,740
have to do something about it let's try

00:18:58,560 --> 00:19:04,890
to start this process of thinking and of

00:19:01,740 --> 00:19:06,540
getting the input from our shadow user

00:19:04,890 --> 00:19:10,470
base from those who actually can't

00:19:06,540 --> 00:19:11,820
simply go away to something else and it

00:19:10,470 --> 00:19:13,470
actually already raised some awareness

00:19:11,820 --> 00:19:15,660
and and and brought in some first

00:19:13,470 --> 00:19:21,030
commitments but still there is more to

00:19:15,660 --> 00:19:23,820
do on this yeah and that was not only

00:19:21,030 --> 00:19:26,460
the only change coming up just a couple

00:19:23,820 --> 00:19:28,320
of months or two months later and Philip

00:19:26,460 --> 00:19:29,700
went forward with an announcement of

00:19:28,320 --> 00:19:32,130
course we knew this internally

00:19:29,700 --> 00:19:35,010
beforehand that he's going to step back

00:19:32,130 --> 00:19:39,650
from the project lead so when things

00:19:35,010 --> 00:19:41,670
come together they come at once so that

00:19:39,650 --> 00:19:43,800
fortunately he will not completely

00:19:41,670 --> 00:19:44,730
disappear so he will continue to support

00:19:43,800 --> 00:19:46,620
the project

00:19:44,730 --> 00:19:49,620
with reviews and and working on specific

00:19:46,620 --> 00:19:52,799
tasks but he wants to concentrate

00:19:49,620 --> 00:19:54,360
actually no longer on this tedious

00:19:52,799 --> 00:19:57,240
understandably tedious work on the

00:19:54,360 --> 00:19:59,640
forefront which invested a lot of his

00:19:57,240 --> 00:20:01,440
personal time on this but rather work on

00:19:59,640 --> 00:20:04,470
on parts again where you can concentrate

00:20:01,440 --> 00:20:06,000
on like a new Colonel Colonel

00:20:04,470 --> 00:20:09,000
architecture we will see later on about

00:20:06,000 --> 00:20:11,190
it means to get his head and this is

00:20:09,000 --> 00:20:13,890
hands-free for these tasks so fully

00:20:11,190 --> 00:20:14,760
understandable not a thing which

00:20:13,890 --> 00:20:17,640
happened overnight

00:20:14,760 --> 00:20:19,410
surely and not an easy thing because

00:20:17,640 --> 00:20:21,600
that means for the maintainer to look

00:20:19,410 --> 00:20:23,610
for someone else so he asked me to take

00:20:21,600 --> 00:20:25,590
over the project as I've been involved

00:20:23,610 --> 00:20:27,809
for quite a while Ness we are also

00:20:25,590 --> 00:20:28,890
representing a one of the important

00:20:27,809 --> 00:20:31,710
users of the project and the

00:20:28,890 --> 00:20:34,740
contributors but also is not an easy

00:20:31,710 --> 00:20:37,200
decision to take off I get another baby

00:20:34,740 --> 00:20:39,510
to look after and about you out the

00:20:37,200 --> 00:20:42,750
decision for us was then and for me as

00:20:39,510 --> 00:20:45,870
well okay to take this burn try to do my

00:20:42,750 --> 00:20:48,000
best on this we will see and yeah this

00:20:45,870 --> 00:20:49,590
the switch basically has been taking or

00:20:48,000 --> 00:20:53,190
isn't taking place yet so we plan to do

00:20:49,590 --> 00:20:55,320
it and run some latest autumn still need

00:20:53,190 --> 00:20:58,919
to wrap up some things and and yeah look

00:20:55,320 --> 00:21:00,750
into how and get more familiar with the

00:20:58,919 --> 00:21:02,580
corners I haven't looked in in the past

00:21:00,750 --> 00:21:04,410
well here's because they weren't

00:21:02,580 --> 00:21:07,140
relevant for us directly but they are

00:21:04,410 --> 00:21:10,710
relevant for the overall project and we

00:21:07,140 --> 00:21:13,530
also discussed how we can change the the

00:21:10,710 --> 00:21:15,840
maintenance of a critical component the

00:21:13,530 --> 00:21:17,520
patch we have on the on the kernels and

00:21:15,840 --> 00:21:20,850
how to split up this work because this

00:21:17,520 --> 00:21:24,030
was also a major time that was eaten up

00:21:20,850 --> 00:21:26,400
by was required by the maintainer to

00:21:24,030 --> 00:21:28,980
work on in the past specifically was to

00:21:26,400 --> 00:21:32,070
no longer being with us so the newspaper

00:21:28,980 --> 00:21:34,230
basically is that Phillip will continue

00:21:32,070 --> 00:21:38,850
to work on the arm side and we have a

00:21:34,230 --> 00:21:40,890
maintainer for m64 Dimitri nicely and we

00:21:38,850 --> 00:21:42,630
have also some architectural maintainer

00:21:40,890 --> 00:21:45,150
which we didn't have under our tree on

00:21:42,630 --> 00:21:48,450
the agenda actually PowerPC 22 that's

00:21:45,150 --> 00:21:50,660
this the NASA activity as I mentioned

00:21:48,450 --> 00:21:52,710
before so Steven will look at do this

00:21:50,660 --> 00:21:55,559
together with my colleague I will look

00:21:52,710 --> 00:21:57,809
into the x86 part and Phillip will also

00:21:55,559 --> 00:21:58,560
be available for integrating dispatches

00:21:57,809 --> 00:22:00,720
so we have

00:21:58,560 --> 00:22:03,300
trees of course and we will then merge

00:22:00,720 --> 00:22:06,980
them to one patch and that's basically

00:22:03,300 --> 00:22:06,980
still Phillips rolling this

00:22:07,400 --> 00:22:12,810
yeah actually as I mentioned the iPad is

00:22:10,200 --> 00:22:14,610
the critical part and for the

00:22:12,810 --> 00:22:16,890
maintenance effort on the daily basis

00:22:14,610 --> 00:22:18,540
and that's always if you're going out of

00:22:16,890 --> 00:22:20,490
tree and this is unfortunately the case

00:22:18,540 --> 00:22:22,170
for for this approach that is a

00:22:20,490 --> 00:22:24,780
challenge that means catching up with

00:22:22,170 --> 00:22:27,300
developments and adapting completely all

00:22:24,780 --> 00:22:28,980
the times things and that the current

00:22:27,300 --> 00:22:32,160
situation basically about this is that

00:22:28,980 --> 00:22:33,840
we have very limited support which is

00:22:32,160 --> 00:22:36,690
feasible given the amount of resources

00:22:33,840 --> 00:22:40,620
we have currently afforded for is

00:22:36,690 --> 00:22:42,360
supported with well it might be limited

00:22:40,620 --> 00:22:44,700
in the long run x86 and arm we will see

00:22:42,360 --> 00:22:47,400
we have County for at nine it's all

00:22:44,700 --> 00:22:49,290
support and some piece use right now but

00:22:47,400 --> 00:22:52,680
this could be fixed soon for at fourteen

00:22:49,290 --> 00:22:54,540
is ready except for x86 so it's our part

00:22:52,680 --> 00:22:58,350
but we will also look at losses very

00:22:54,540 --> 00:23:00,270
soon yeah and with these many things you

00:22:58,350 --> 00:23:03,090
also have to look into merging of course

00:23:00,270 --> 00:23:04,740
stable versions into this it may lag

00:23:03,090 --> 00:23:07,620
behind if maintained as are busy with

00:23:04,740 --> 00:23:09,180
other things we already cleaned up our

00:23:07,620 --> 00:23:11,370
portfolio a little bit so in the past

00:23:09,180 --> 00:23:13,620
knives to and and as H was dropped

00:23:11,370 --> 00:23:15,300
we about to drop off usually it has been

00:23:13,620 --> 00:23:17,850
announced already PowerPC and and

00:23:15,300 --> 00:23:21,140
Blackfin and we also agreed recently

00:23:17,850 --> 00:23:23,700
during a community meeting that arm

00:23:21,140 --> 00:23:28,220
architectures below version seven will

00:23:23,700 --> 00:23:30,810
also no longer be supported yeah but

00:23:28,220 --> 00:23:32,550
what is the major change now upcoming

00:23:30,810 --> 00:23:34,410
and Filippis was working on this and

00:23:32,550 --> 00:23:36,480
providing a good ground now to work on

00:23:34,410 --> 00:23:39,510
so previously the patches have been

00:23:36,480 --> 00:23:41,490
basically a block and also that was the

00:23:39,510 --> 00:23:43,050
problem for for someone to jump jump in

00:23:41,490 --> 00:23:45,390
and understand what's going on there so

00:23:43,050 --> 00:23:47,790
for the prefect at the patch queue and

00:23:45,390 --> 00:23:50,790
and made it more understandable just by

00:23:47,790 --> 00:23:52,980
creating logical increments that at the

00:23:50,790 --> 00:23:55,080
features that are needed to do with the

00:23:52,980 --> 00:23:57,690
current architecture the the enabling

00:23:55,080 --> 00:24:00,150
the I pipe enabling the cocoa enabling

00:23:57,690 --> 00:24:01,410
in the kernel and the idea behind this

00:24:00,150 --> 00:24:03,570
patch queue is in the end that you can

00:24:01,410 --> 00:24:05,820
take it and more easily ported over to

00:24:03,570 --> 00:24:08,280
whatever kernel you need if it's a

00:24:05,820 --> 00:24:10,520
vendor kernel unfortunately or if it's a

00:24:08,280 --> 00:24:12,410
different version of Linux kernel

00:24:10,520 --> 00:24:14,810
ever if you are not happy with our pace

00:24:12,410 --> 00:24:17,480
of maintaining things you can take these

00:24:14,810 --> 00:24:19,250
patches more easily and map it on on

00:24:17,480 --> 00:24:22,760
your own Colonel so it's an implicit

00:24:19,250 --> 00:24:24,410
documentation we also agree during this

00:24:22,760 --> 00:24:26,900
user meeting that we need a new policy

00:24:24,410 --> 00:24:29,840
regarding how to maintain the patches

00:24:26,900 --> 00:24:32,230
and so the agreement was that we only

00:24:29,840 --> 00:24:33,650
maintained in the future on one version

00:24:32,230 --> 00:24:36,260
the latest

00:24:33,650 --> 00:24:38,840
LTS version it doesn't mean necessarily

00:24:36,260 --> 00:24:40,760
the other kernels will be abandoned but

00:24:38,840 --> 00:24:44,300
that depends not heavily on the users of

00:24:40,760 --> 00:24:46,850
these patches so one of the users

00:24:44,300 --> 00:24:50,510
Simmons and we are currently building

00:24:46,850 --> 00:24:52,160
products on 4.4 kernels and so we will

00:24:50,510 --> 00:24:55,760
maintain this kernel at least for our

00:24:52,160 --> 00:24:57,950
architectures it is commitment and we

00:24:55,760 --> 00:25:00,740
will also move over this maintenance

00:24:57,950 --> 00:25:03,320
queue soon on the super long-term a CIP

00:25:00,740 --> 00:25:05,540
kernel to keep the maintenance even

00:25:03,320 --> 00:25:07,250
longer running so there will be a couple

00:25:05,540 --> 00:25:09,260
of years coming with this kernel for us

00:25:07,250 --> 00:25:10,700
and of course you want to share it and

00:25:09,260 --> 00:25:12,890
we want to get the input from other

00:25:10,700 --> 00:25:15,290
users if they want to go for a long term

00:25:12,890 --> 00:25:17,210
maintain system and the field that is

00:25:15,290 --> 00:25:19,520
currently the choice

00:25:17,210 --> 00:25:22,700
anyone else wanting to jump in of course

00:25:19,520 --> 00:25:25,010
this is open and well we will support of

00:25:22,700 --> 00:25:27,230
course best we can on further work on

00:25:25,010 --> 00:25:32,270
this and try to consolidate activities

00:25:27,230 --> 00:25:35,240
on this so so far for the kernel part

00:25:32,270 --> 00:25:37,280
and/or for the patch part so to say now

00:25:35,240 --> 00:25:38,720
for the the main releases of the project

00:25:37,280 --> 00:25:41,360
so what's the current situation so we

00:25:38,720 --> 00:25:43,580
have two reasons out there 3.0 and 3.1

00:25:41,360 --> 00:25:45,290
upcoming not the Dow's there so there

00:25:43,580 --> 00:25:48,200
are suite of zeros this current stable

00:25:45,290 --> 00:25:50,600
release branch we have a new stable

00:25:48,200 --> 00:25:52,790
version soon to be released and there

00:25:50,600 --> 00:25:55,100
was some fixes pending and some review

00:25:52,790 --> 00:25:57,380
for this for the networking driver stake

00:25:55,100 --> 00:25:59,390
and there's no merge now it's just

00:25:57,380 --> 00:26:02,270
sorting out the last four laws of the

00:25:59,390 --> 00:26:05,090
the patch updates and when this is done

00:26:02,270 --> 00:26:07,010
hopefully in a couple of days only we

00:26:05,090 --> 00:26:10,850
can go out with this another stable

00:26:07,010 --> 00:26:12,860
version 3.1 is in the queue so there is

00:26:10,850 --> 00:26:14,840
this next branch currently which

00:26:12,860 --> 00:26:16,160
prepares for this it's a pretty good

00:26:14,840 --> 00:26:18,170
shape and actually in that good shape

00:26:16,160 --> 00:26:19,880
that we internally have back part of

00:26:18,170 --> 00:26:21,620
some of the new features to our stable

00:26:19,880 --> 00:26:24,050
branch by now and putting this to a

00:26:21,620 --> 00:26:27,530
customer where it was needed

00:26:24,050 --> 00:26:30,770
so there's a good base to come like

00:26:27,530 --> 00:26:33,320
improvements on prio ceiling support and

00:26:30,770 --> 00:26:35,060
and for mutexes and fast schedule

00:26:33,320 --> 00:26:37,040
implementation set schedule

00:26:35,060 --> 00:26:40,070
implementation which avoids Cisco's

00:26:37,040 --> 00:26:43,540
normally doing run time and will also

00:26:40,070 --> 00:26:46,220
introduce a new architecture the arm 64

00:26:43,540 --> 00:26:47,870
only thing what's basically missing from

00:26:46,220 --> 00:26:50,210
a current point of view from the

00:26:47,870 --> 00:26:52,310
criteria is proper support for the

00:26:50,210 --> 00:26:55,130
latest LTS kernel because all

00:26:52,310 --> 00:26:57,590
architectures but once that is settled I

00:26:55,130 --> 00:27:00,050
guess and there's some new requirements

00:26:57,590 --> 00:27:02,570
or some last-minute I guess we can go

00:27:00,050 --> 00:27:04,670
for us we don't wanna release them in

00:27:02,570 --> 00:27:07,280
the future then of course is open there

00:27:04,670 --> 00:27:09,920
is no concrete plan now for what exactly

00:27:07,280 --> 00:27:11,810
the next version will be about that's

00:27:09,920 --> 00:27:14,510
also the input that we expect on the

00:27:11,810 --> 00:27:16,400
community of course what exactly you are

00:27:14,510 --> 00:27:18,020
looking for what would can be improved

00:27:16,400 --> 00:27:20,660
except for the normal housekeeping

00:27:18,020 --> 00:27:22,640
improvements things one thing to

00:27:20,660 --> 00:27:25,040
remember at this and there is something

00:27:22,640 --> 00:27:28,190
like cinema 2.6 or even older out there

00:27:25,040 --> 00:27:29,750
this thing is unmaintained so if you

00:27:28,190 --> 00:27:32,750
should have something in your product or

00:27:29,750 --> 00:27:36,350
if you should get something from a BSP

00:27:32,750 --> 00:27:37,010
vendor hello Alex P this is a dead

00:27:36,350 --> 00:27:42,440
parrot

00:27:37,010 --> 00:27:44,780
seriously driver sticks so adding it

00:27:42,440 --> 00:27:46,820
comes not only with the kernel patch

00:27:44,780 --> 00:27:49,640
with user based libraries there are also

00:27:46,820 --> 00:27:51,650
some drivers which are enabled for this

00:27:49,640 --> 00:27:53,480
Kokoro architecture so what we did

00:27:51,650 --> 00:27:56,120
recently we have a networking stick

00:27:53,480 --> 00:27:57,470
included a small one to target

00:27:56,120 --> 00:27:59,300
specifically hartwell term isn't

00:27:57,470 --> 00:28:02,600
communication and it has been refreshed

00:27:59,300 --> 00:28:05,120
now as I said for 3.0 but this thing

00:28:02,600 --> 00:28:05,960
needs small off I once maintained it a

00:28:05,120 --> 00:28:08,780
long time ago

00:28:05,960 --> 00:28:10,880
for various projects and still surprised

00:28:08,780 --> 00:28:15,590
that this thing is the life and been

00:28:10,880 --> 00:28:17,060
used there is some legacy inside and if

00:28:15,590 --> 00:28:19,370
you're really interested in using this

00:28:17,060 --> 00:28:22,190
as a space I would really recommend to

00:28:19,370 --> 00:28:24,650
talk about with us what you want to use

00:28:22,190 --> 00:28:26,900
and how we can improve this

00:28:24,650 --> 00:28:28,610
infrastructure and for refocus it I mean

00:28:26,900 --> 00:28:31,040
this dates back from the time where

00:28:28,610 --> 00:28:33,950
Ethernet was based on hops and and coax

00:28:31,040 --> 00:28:35,540
cable to address the issues you have and

00:28:33,950 --> 00:28:37,299
you'd want to do real-time over this and

00:28:35,540 --> 00:28:39,309
so there are some aspects which are no

00:28:37,299 --> 00:28:41,739
apply at the same time everyone is

00:28:39,309 --> 00:28:44,230
talking about TSN these days and there

00:28:41,739 --> 00:28:47,739
are some new aspects now which might

00:28:44,230 --> 00:28:50,379
need some integration as well and it has

00:28:47,739 --> 00:28:52,749
some potential as we saw with the NX

00:28:50,379 --> 00:28:54,909
paper and everything so there's there's

00:28:52,749 --> 00:28:56,379
some chance but there is also some some

00:28:54,909 --> 00:28:59,289
more work needed specific on the driver

00:28:56,379 --> 00:29:02,739
side and drop out some old ones I mean

00:28:59,289 --> 00:29:05,169
100 megabits very old hardware is no

00:29:02,739 --> 00:29:07,389
longer available even on the market so

00:29:05,169 --> 00:29:09,249
we can drop some stuff but we possibly

00:29:07,389 --> 00:29:12,220
also missing some some new ones will be

00:29:09,249 --> 00:29:15,279
interesting for some products the other

00:29:12,220 --> 00:29:18,070
parts your GPIO SPI in Ken while they

00:29:15,279 --> 00:29:20,769
currently look good good good enough if

00:29:18,070 --> 00:29:24,489
you have a use case look into this make

00:29:20,769 --> 00:29:27,369
sure it's tested there's still some yeah

00:29:24,489 --> 00:29:30,190
improvements possible and the other area

00:29:27,369 --> 00:29:34,570
this is the analog II stack which is for

00:29:30,190 --> 00:29:37,269
analog i/o similar to not that similar

00:29:34,570 --> 00:29:38,460
to the comedy stack that's still in

00:29:37,269 --> 00:29:40,419
staging in mainline

00:29:38,460 --> 00:29:43,690
unfortunately this thing is often for

00:29:40,419 --> 00:29:46,090
quite a while and if you really want to

00:29:43,690 --> 00:29:48,190
use this thing that's time now to stand

00:29:46,090 --> 00:29:50,590
up because otherwise we will have to

00:29:48,190 --> 00:29:52,629
drop it without a maintainer and

00:29:50,590 --> 00:29:55,720
possibly also without a user doesn't

00:29:52,629 --> 00:29:57,970
make sense to have this in in a nutshell

00:29:55,720 --> 00:30:00,970
we need for these things someone who

00:29:57,970 --> 00:30:03,029
feels responsible because it's used in

00:30:00,970 --> 00:30:06,340
some products it's used on some boards

00:30:03,029 --> 00:30:08,470
so step up and provide your your

00:30:06,340 --> 00:30:09,970
feedback or even better the patches for

00:30:08,470 --> 00:30:12,549
these system to keep them alive keep

00:30:09,970 --> 00:30:15,820
them tested as I said we will drop

00:30:12,549 --> 00:30:18,970
unmaintained or broken drivers of course

00:30:15,820 --> 00:30:20,320
for you with a prio notice but we can't

00:30:18,970 --> 00:30:21,580
really keep them up and if they break

00:30:20,320 --> 00:30:25,809
continuously the built it doesn't make

00:30:21,580 --> 00:30:27,519
sense to have them insert yeah one of

00:30:25,809 --> 00:30:30,249
the things we do have to look into now

00:30:27,519 --> 00:30:31,779
and also because the loss of gel and is

00:30:30,249 --> 00:30:35,519
the the infrastructure has to be

00:30:31,779 --> 00:30:39,239
restructured and partly also rebuilt so

00:30:35,519 --> 00:30:41,649
one thing that's changing also to

00:30:39,239 --> 00:30:43,899
offload further tasks from from Philip

00:30:41,649 --> 00:30:45,909
is that we will move the hosting

00:30:43,899 --> 00:30:49,149
underneath you probably not notice that

00:30:45,909 --> 00:30:51,080
much of it too - thanks to the gate lepa

00:30:49,149 --> 00:30:54,529
tanks so many thanks to the

00:30:51,080 --> 00:30:58,010
for offering this and we also discussing

00:30:54,529 --> 00:30:59,330
now how to re animate certain CI

00:30:58,010 --> 00:31:01,730
infrastructure there's a little bit

00:30:59,330 --> 00:31:04,090
inside of all of our users but there is

00:31:01,730 --> 00:31:07,190
not much publicly done or much

00:31:04,090 --> 00:31:09,200
transparently done so one of the option

00:31:07,190 --> 00:31:11,990
is go with an offering of tanks we have

00:31:09,200 --> 00:31:14,140
on this it's a limited of course because

00:31:11,990 --> 00:31:16,370
this takes some yeah computing resources

00:31:14,140 --> 00:31:19,279
on the other hand it would be beneficial

00:31:16,370 --> 00:31:20,750
to have a public CI system running so I

00:31:19,279 --> 00:31:22,039
played a little bit with it so there are

00:31:20,750 --> 00:31:23,510
some option actually busy with the

00:31:22,039 --> 00:31:25,820
systems out there in the field what you

00:31:23,510 --> 00:31:28,370
get for free me with the free offerings

00:31:25,820 --> 00:31:30,260
and to enable them and do some build

00:31:28,370 --> 00:31:32,059
tests and maybe even some functional

00:31:30,260 --> 00:31:33,950
tests simulated environment so that

00:31:32,059 --> 00:31:37,880
users can also do their own tests prior

00:31:33,950 --> 00:31:39,679
to submitting patches so I tried

00:31:37,880 --> 00:31:41,539
travesty I recently as I was first

00:31:39,679 --> 00:31:43,730
acceptable if it's enough for doing

00:31:41,539 --> 00:31:45,620
really a complete kernel built but even

00:31:43,730 --> 00:31:47,120
without stripping much down it was

00:31:45,620 --> 00:31:48,950
sufficiently fast enough on these

00:31:47,120 --> 00:31:50,990
machines to get a kernel and then

00:31:48,950 --> 00:31:52,700
possibly to further things so this is a

00:31:50,990 --> 00:31:54,409
good area actually for contributions

00:31:52,700 --> 00:31:56,809
because it's not really requiring to be

00:31:54,409 --> 00:31:59,960
a kernel hike on this and still it would

00:31:56,809 --> 00:32:01,370
create a lot of value for the project of

00:31:59,960 --> 00:32:03,529
course now the topic is and on device

00:32:01,370 --> 00:32:06,260
testing which is happening of course and

00:32:03,529 --> 00:32:08,450
many user sites in the basement or in

00:32:06,260 --> 00:32:11,779
the products fields but it's not

00:32:08,450 --> 00:32:14,409
happening in the public and so we want

00:32:11,779 --> 00:32:16,669
to define some reference port for this

00:32:14,409 --> 00:32:18,529
currently what's being done is mostly

00:32:16,669 --> 00:32:20,809
manual testing so again here is

00:32:18,529 --> 00:32:22,639
contribution welcome specifically as

00:32:20,809 --> 00:32:25,250
long as we don't have the best

00:32:22,639 --> 00:32:27,169
infrastructure for this in place there

00:32:25,250 --> 00:32:31,309
option to use the test form of things

00:32:27,169 --> 00:32:32,990
for this but probably more possibly also

00:32:31,309 --> 00:32:35,809
interesting is to look for something

00:32:32,990 --> 00:32:37,669
more distributed to make it easier for

00:32:35,809 --> 00:32:38,929
for those with the product use case

00:32:37,669 --> 00:32:40,760
behind it to hook up with the

00:32:38,929 --> 00:32:43,070
infrastructure and then half the the

00:32:40,760 --> 00:32:46,250
products on the field running against a

00:32:43,070 --> 00:32:47,840
new version continuously so this is like

00:32:46,250 --> 00:32:51,200
typical topic everyone's talking about

00:32:47,840 --> 00:32:54,350
these days like lava deployment where we

00:32:51,200 --> 00:32:56,149
then of course could easily should

00:32:54,350 --> 00:32:58,100
easily reuse some of the existing

00:32:56,149 --> 00:33:01,610
initiatives like what's going on with

00:32:58,100 --> 00:33:03,529
HDL and CRP and others yeah to hook into

00:33:01,610 --> 00:33:04,400
them at least to reuse the patterns that

00:33:03,529 --> 00:33:06,260
they have

00:33:04,400 --> 00:33:10,040
to build up some own infrastructure on

00:33:06,260 --> 00:33:11,870
this that's still a bit fuzzy but as I

00:33:10,040 --> 00:33:14,420
said this is actually an important area

00:33:11,870 --> 00:33:17,300
and again an area where contributions

00:33:14,420 --> 00:33:19,400
are very welcomed and shouldn't be too

00:33:17,300 --> 00:33:23,090
hard to start with some at least initial

00:33:19,400 --> 00:33:26,360
steps so now for something not

00:33:23,090 --> 00:33:28,430
completely different as I said we are

00:33:26,360 --> 00:33:30,980
also looking ahead in the future what

00:33:28,430 --> 00:33:33,560
may come after the current architecture

00:33:30,980 --> 00:33:36,950
and what is now the motivation for

00:33:33,560 --> 00:33:38,620
Philip to focus on something else it's

00:33:36,950 --> 00:33:41,390
not completely something else it's about

00:33:38,620 --> 00:33:43,850
thinking about okay and realizing and

00:33:41,390 --> 00:33:45,740
that the coconut plays its role in the

00:33:43,850 --> 00:33:48,700
in the ecosystem and places role in the

00:33:45,740 --> 00:33:51,920
system we have out there but it's not

00:33:48,700 --> 00:33:53,180
optimized in the way and not designed in

00:33:51,920 --> 00:33:55,390
a way in the current form which is

00:33:53,180 --> 00:33:57,860
optimal for the Linux integration so

00:33:55,390 --> 00:34:00,140
there is an activity as I mentioned only

00:33:57,860 --> 00:34:02,870
two years ago which is called Taft a

00:34:00,140 --> 00:34:05,090
land and Steel II which has to go to

00:34:02,870 --> 00:34:08,450
improve the integration of a cocoa know

00:34:05,090 --> 00:34:12,500
architecture and into the Linux kernel

00:34:08,450 --> 00:34:15,830
into the native environment so this is

00:34:12,500 --> 00:34:17,450
basically the goal is basically to to

00:34:15,830 --> 00:34:19,730
integrate it in a way that it really

00:34:17,450 --> 00:34:22,010
feels like Linux subsystem like

00:34:19,730 --> 00:34:23,899
preemptory is doing in the sense that

00:34:22,010 --> 00:34:25,520
you don't notice the major difference

00:34:23,899 --> 00:34:27,919
and they don't notice that there is

00:34:25,520 --> 00:34:29,600
something alien patching into it but

00:34:27,919 --> 00:34:30,980
really it's being there and it's using

00:34:29,600 --> 00:34:33,530
as much as possible from existing

00:34:30,980 --> 00:34:34,850
infrastructure in contrast to this the

00:34:33,530 --> 00:34:36,860
current architecture it is about

00:34:34,850 --> 00:34:38,960
abstracting away the kernel so we try to

00:34:36,860 --> 00:34:40,669
keep things separate so that we can

00:34:38,960 --> 00:34:43,130
easily move between the different kernel

00:34:40,669 --> 00:34:44,750
versions in theory it works quite well

00:34:43,130 --> 00:34:45,860
actually but still that comes with the

00:34:44,750 --> 00:34:49,010
price that means that you have a lot of

00:34:45,860 --> 00:34:50,980
layer of abstractions which then not

00:34:49,010 --> 00:34:53,270
necessarily are intuitive to understand

00:34:50,980 --> 00:34:57,800
while this new approach should make this

00:34:53,270 --> 00:35:00,830
easier and help basically was keep it

00:34:57,800 --> 00:35:02,240
more maintainable and easy manageable by

00:35:00,830 --> 00:35:04,040
someone who's not deeply familiar with

00:35:02,240 --> 00:35:06,560
all the details in all the history of 20

00:35:04,040 --> 00:35:08,750
years which is important as long as we

00:35:06,560 --> 00:35:11,030
out of tree and and last but not least

00:35:08,750 --> 00:35:12,710
it is also the only chance if we would

00:35:11,030 --> 00:35:14,390
ever get this and to really propose

00:35:12,710 --> 00:35:16,070
something for upstream which is not

00:35:14,390 --> 00:35:18,250
completely unrealistic simply because

00:35:16,070 --> 00:35:19,720
well in the use cases made clear

00:35:18,250 --> 00:35:23,980
and there is a user base and there's an

00:35:19,720 --> 00:35:25,690
interest I guess this is a chance to get

00:35:23,980 --> 00:35:27,880
this in but of course this is not

00:35:25,690 --> 00:35:31,960
happening the other day that will take

00:35:27,880 --> 00:35:33,820
more effort on it so as I said this new

00:35:31,960 --> 00:35:36,250
approach consists of two core elements

00:35:33,820 --> 00:35:37,990
it's the dovetail that's about the

00:35:36,250 --> 00:35:40,480
interrupt routing as you saw on the

00:35:37,990 --> 00:35:43,060
first graphic and and Co Colonel hooks

00:35:40,480 --> 00:35:44,890
so the yeah the thing basically to

00:35:43,060 --> 00:35:46,750
enable the next two to run a second

00:35:44,890 --> 00:35:48,970
schedule arm that's roughly what the

00:35:46,750 --> 00:35:50,950
current iPad patches about from the

00:35:48,970 --> 00:35:52,840
functional point of view and then

00:35:50,950 --> 00:35:55,660
there's something called steely and

00:35:52,840 --> 00:35:57,310
that's actually the new Kirk O'Connell

00:35:55,660 --> 00:35:59,980
implementations of the user of this

00:35:57,310 --> 00:36:01,990
infrastructure that corresponds to what

00:35:59,980 --> 00:36:05,880
currently Excel microvolts or the cool

00:36:01,990 --> 00:36:08,110
kernel implementation of Sonoma is about

00:36:05,880 --> 00:36:09,820
this is ongoing development very

00:36:08,110 --> 00:36:11,200
important this was very important also

00:36:09,820 --> 00:36:13,090
from Philips point of view to mention

00:36:11,200 --> 00:36:14,650
this it's not command center my

00:36:13,090 --> 00:36:16,000
compatible you can't switch from one day

00:36:14,650 --> 00:36:18,490
to the other to the new version and

00:36:16,000 --> 00:36:21,210
things will just work it's not product

00:36:18,490 --> 00:36:24,550
ready and don't use it to fly to mass

00:36:21,210 --> 00:36:26,560
and specifically mention this because

00:36:24,550 --> 00:36:29,110
something funny happened with the 3.0

00:36:26,560 --> 00:36:31,360
release period was published that

00:36:29,110 --> 00:36:33,340
actually after he was working a lot on

00:36:31,360 --> 00:36:35,650
these things and rebasing stuff someone

00:36:33,340 --> 00:36:37,150
came to me and said can you please stop

00:36:35,650 --> 00:36:40,390
this rebasing and we are using it in

00:36:37,150 --> 00:36:43,060
product this is not in this stage that

00:36:40,390 --> 00:36:45,540
this would happen while we will see it's

00:36:43,060 --> 00:36:48,190
running actually but it's not really

00:36:45,540 --> 00:36:49,900
stable and and there's no yeah

00:36:48,190 --> 00:36:51,490
commitment on it that's going to stay in

00:36:49,900 --> 00:36:54,130
this form specifically as I said as we

00:36:51,490 --> 00:36:55,990
are targeting to make it relatable for

00:36:54,130 --> 00:36:58,060
upstream that naturally brings in

00:36:55,990 --> 00:36:59,620
further change we can't predict if we

00:36:58,060 --> 00:37:01,120
should ever propose this it may

00:36:59,620 --> 00:37:03,670
completely break certain internal

00:37:01,120 --> 00:37:06,070
interfaces on external interfaces to

00:37:03,670 --> 00:37:09,880
make it in the form that X absolute

00:37:06,070 --> 00:37:12,520
accepted so looking a little bit into

00:37:09,880 --> 00:37:16,420
into dovetail so this is the interrupts

00:37:12,520 --> 00:37:17,860
pipeline it couldn't thus the same thing

00:37:16,420 --> 00:37:20,890
as before it prioritized selector

00:37:17,860 --> 00:37:23,830
interrupts and and make them yeah

00:37:20,890 --> 00:37:25,450
I like so to say from the next point of

00:37:23,830 --> 00:37:27,490
view so this is what what Philippa

00:37:25,450 --> 00:37:28,630
describes as out of band work it should

00:37:27,490 --> 00:37:31,960
be done in this context of these

00:37:28,630 --> 00:37:34,290
interrupts it slowly builds now on

00:37:31,960 --> 00:37:37,390
obstruction of the couch shop so it's

00:37:34,290 --> 00:37:39,820
naturally integrated Linux and even

00:37:37,390 --> 00:37:41,830
reduces by now the existing locking of

00:37:39,820 --> 00:37:44,710
Linux for this which makes it

00:37:41,830 --> 00:37:46,750
well better maintainable less patching

00:37:44,710 --> 00:37:50,320
and it even allow us to use the lock tab

00:37:46,750 --> 00:37:52,930
for this and then there is the feature

00:37:50,320 --> 00:37:55,390
of task stealing that means it's the the

00:37:52,930 --> 00:37:57,760
hooks required to take an existing Linux

00:37:55,390 --> 00:37:59,800
task and and remove it from the

00:37:57,760 --> 00:38:01,869
scheduler basically suspended for the

00:37:59,800 --> 00:38:03,760
Linux scheduler and hand it over to

00:38:01,869 --> 00:38:06,369
someone else the coast carnal scheduler

00:38:03,760 --> 00:38:08,140
and again returned this and that during

00:38:06,369 --> 00:38:11,890
runtime so depending on the state of the

00:38:08,140 --> 00:38:14,050
task and furthermore we need some event

00:38:11,890 --> 00:38:15,369
hooks in the kernel to propagate things

00:38:14,050 --> 00:38:19,170
which are relevant for the row time

00:38:15,369 --> 00:38:22,780
execution like soos calls like faults or

00:38:19,170 --> 00:38:26,320
signals coming in so normal POSIX Linux

00:38:22,780 --> 00:38:28,420
signals you can check out the code on

00:38:26,320 --> 00:38:30,130
this URL and there's also a little bit

00:38:28,420 --> 00:38:32,050
of documentation available for the

00:38:30,130 --> 00:38:33,640
architecture and for yeah what you can

00:38:32,050 --> 00:38:37,119
expect from this right now from the

00:38:33,640 --> 00:38:39,160
tough day point of view steely that's

00:38:37,119 --> 00:38:41,859
now the as I said the POSIX compatible

00:38:39,160 --> 00:38:44,230
artists core user of this stuff tile

00:38:41,859 --> 00:38:45,760
implementation entry yeah it

00:38:44,230 --> 00:38:48,430
demonstrates basically how these things

00:38:45,760 --> 00:38:49,930
could be used and it's clear that we

00:38:48,430 --> 00:38:52,660
never get Dufty into the main line

00:38:49,930 --> 00:38:55,780
without having a user of it so this is

00:38:52,660 --> 00:38:58,089
naturally comes together and it's yeah

00:38:55,780 --> 00:39:01,660
it's fundamental rework of the Kobalt

00:38:58,089 --> 00:39:04,089
core the current external my core and it

00:39:01,660 --> 00:39:05,349
has more fine-grained locking in

00:39:04,089 --> 00:39:07,720
contrast to the single of we currently

00:39:05,349 --> 00:39:10,150
have a cinema 3 which is simple to

00:39:07,720 --> 00:39:11,710
manage and easy to validate but as some

00:39:10,150 --> 00:39:14,170
limitations of course mate comes to

00:39:11,710 --> 00:39:15,730
larger systems or something about six

00:39:14,170 --> 00:39:17,530
cores where they actively used for

00:39:15,730 --> 00:39:19,450
real-time just something you don't want

00:39:17,530 --> 00:39:22,060
to do right now is existing some of my

00:39:19,450 --> 00:39:23,200
approach it also reuses more of the

00:39:22,060 --> 00:39:25,240
existing infrastructure like clock

00:39:23,200 --> 00:39:27,609
sources that of course makes the

00:39:25,240 --> 00:39:29,650
portability easier also enabled

00:39:27,609 --> 00:39:30,849
something like frequency scaling doing

00:39:29,650 --> 00:39:32,830
runtime and if you want this for

00:39:30,849 --> 00:39:35,530
whatever reason it's possible now it's

00:39:32,830 --> 00:39:38,050
no longer breaking our timekeeping and

00:39:35,530 --> 00:39:39,970
yeah well compatibility to Kenema is not

00:39:38,050 --> 00:39:41,650
available right now but could still be

00:39:39,970 --> 00:39:43,359
added later on as citizen the core is

00:39:41,650 --> 00:39:45,880
stable that you can look into these kind

00:39:43,359 --> 00:39:48,190
of things interesting

00:39:45,880 --> 00:39:50,350
topic remains and that's of course how

00:39:48,190 --> 00:39:52,630
you deal with the real-time drivers if

00:39:50,350 --> 00:39:55,270
they want to be used in the co colonel

00:39:52,630 --> 00:39:56,590
context I need some awareness so

00:39:55,270 --> 00:39:59,530
currently only minimal set is available

00:39:56,590 --> 00:40:01,680
just to demonstrate what's possible but

00:39:59,530 --> 00:40:03,850
on the longer forces the question how to

00:40:01,680 --> 00:40:06,030
how to enable drivers how to keep them

00:40:03,850 --> 00:40:10,330
maintainable and then make them usable

00:40:06,030 --> 00:40:12,160
yeah that's something you look at but it

00:40:10,330 --> 00:40:13,900
remains challenged in general and we

00:40:12,160 --> 00:40:15,610
will have a talk on nothing on real-time

00:40:13,900 --> 00:40:19,720
driver design from four main and as well

00:40:15,610 --> 00:40:22,360
the other day so it's not just topic for

00:40:19,720 --> 00:40:24,400
friend for Kannamma it's actually a

00:40:22,360 --> 00:40:26,830
proper topic for preatty as well though

00:40:24,400 --> 00:40:29,680
with different approaches to talk work

00:40:26,830 --> 00:40:31,120
on this yeah and then of course the

00:40:29,680 --> 00:40:32,800
thing has a user space environment so

00:40:31,120 --> 00:40:34,900
the libraries to actually be built in

00:40:32,800 --> 00:40:37,330
and linked against it this is the URL

00:40:34,900 --> 00:40:39,190
here it's used it's very similar to

00:40:37,330 --> 00:40:41,920
economise reads just focus on this new

00:40:39,190 --> 00:40:45,130
implementation with that you can

00:40:41,920 --> 00:40:46,570
actually now play with it and if you

00:40:45,130 --> 00:40:48,820
look at what what happens with these

00:40:46,570 --> 00:40:53,380
refactoring and it's shrink the code

00:40:48,820 --> 00:40:55,870
massively about factor 2 on the iPod in

00:40:53,380 --> 00:40:59,410
the kernel part and even more than 50%

00:40:55,870 --> 00:41:02,200
right now on the cenomar core part still

00:40:59,410 --> 00:41:04,750
that remains at least you have to state

00:41:02,200 --> 00:41:06,340
it it's the large and fortunately the

00:41:04,750 --> 00:41:08,680
majority of it and it's the statistic

00:41:06,340 --> 00:41:10,750
was about here is orthogonal to the

00:41:08,680 --> 00:41:14,380
existing kernels so only if few lines

00:41:10,750 --> 00:41:17,110
are changed of existing code we have I

00:41:14,380 --> 00:41:19,990
think a few 10 lines change in something

00:41:17,110 --> 00:41:23,020
like the critical scheduler area so this

00:41:19,990 --> 00:41:25,840
is mostly harmless mostly harmless so it

00:41:23,020 --> 00:41:27,970
adds some code yeah as I said it's

00:41:25,840 --> 00:41:30,370
working it's working on arm right now I

00:41:27,970 --> 00:41:32,230
mix 6 and 7 is working some demos and

00:41:30,370 --> 00:41:32,790
there is I'm 64 supported work in

00:41:32,230 --> 00:41:35,770
progress

00:41:32,790 --> 00:41:39,300
check it out have a look don't build a

00:41:35,770 --> 00:41:44,890
product but maybe you won't try it out

00:41:39,300 --> 00:41:47,650
so with this let me summarise and so I'm

00:41:44,890 --> 00:41:49,570
pretty sure and so is Philip and so our

00:41:47,650 --> 00:41:52,420
users I think that the co kernel is

00:41:49,570 --> 00:41:54,640
there to stay it's being used for quite

00:41:52,420 --> 00:41:56,740
a while in production it doesn't

00:41:54,640 --> 00:41:59,230
disappear despite all the great progress

00:41:56,740 --> 00:41:59,710
on the parameter T side so they are

00:41:59,230 --> 00:42:02,530
asked

00:41:59,710 --> 00:42:04,599
use cases of this niche area a real time

00:42:02,530 --> 00:42:07,599
where the niche area Co Colonel plays

00:42:04,599 --> 00:42:10,270
the role and will play a role in general

00:42:07,599 --> 00:42:12,339
we have to state that industrial usage

00:42:10,270 --> 00:42:14,670
of real-time Linux and pommy not only

00:42:12,339 --> 00:42:16,660
real-time Linux has a problem and

00:42:14,670 --> 00:42:19,630
there's an in healthy unhealthy

00:42:16,660 --> 00:42:22,720
imbalance between take and give that's

00:42:19,630 --> 00:42:25,500
clear and we really have to work on this

00:42:22,720 --> 00:42:29,020
and if we map it on the X animal project

00:42:25,500 --> 00:42:33,160
that is really a painful aspect of this

00:42:29,020 --> 00:42:36,940
and open-source doesn't come for free it

00:42:33,160 --> 00:42:39,040
has to you have to commit to it in in

00:42:36,940 --> 00:42:41,230
one way or the other and there are many

00:42:39,040 --> 00:42:43,900
ways to commit to it and to make it keep

00:42:41,230 --> 00:42:46,150
it alive I mean it's it's the the branch

00:42:43,900 --> 00:42:47,680
you are sitting on basically if you do

00:42:46,150 --> 00:42:49,540
nothing about it this may crack

00:42:47,680 --> 00:42:51,490
eventually and yeah then you fall

00:42:49,540 --> 00:42:53,830
heavily with all your products out there

00:42:51,490 --> 00:42:56,200
in the field and that means for us

00:42:53,830 --> 00:42:58,990
specifically and we are always looking

00:42:56,200 --> 00:43:02,260
into for for people who are declaring

00:42:58,990 --> 00:43:04,630
they are using it not maybe in all

00:43:02,260 --> 00:43:06,280
details but at least so far that we know

00:43:04,630 --> 00:43:07,930
okay there are users out there they have

00:43:06,280 --> 00:43:10,240
a certain set of requirements they have

00:43:07,930 --> 00:43:11,859
a certain of expectation we need the

00:43:10,240 --> 00:43:15,670
feedback and that we need to publicly

00:43:11,859 --> 00:43:18,369
and that starch was testing but it

00:43:15,670 --> 00:43:20,920
doesn't end there that means when we

00:43:18,369 --> 00:43:22,750
release a new version we we barely get

00:43:20,920 --> 00:43:24,460
the feedback on this specific the passes

00:43:22,750 --> 00:43:26,410
was painful for Phillip to see it okay

00:43:24,460 --> 00:43:28,359
we are breezing a sea but what's being

00:43:26,410 --> 00:43:31,599
tested is the final release as usual and

00:43:28,359 --> 00:43:32,950
that's not good that doesn't that

00:43:31,599 --> 00:43:36,760
doesn't solve the problems it just

00:43:32,950 --> 00:43:38,349
creates the problems in the field so we

00:43:36,760 --> 00:43:40,030
do not necessarily need although we

00:43:38,349 --> 00:43:42,280
would welcome a lot more kernel hackers

00:43:40,030 --> 00:43:45,070
as this is a core part of the project

00:43:42,280 --> 00:43:47,440
but as I outline there are many many

00:43:45,070 --> 00:43:49,480
areas where even small contributions

00:43:47,440 --> 00:43:51,310
would already make a difference and keep

00:43:49,480 --> 00:43:56,890
this project alive and make it even

00:43:51,310 --> 00:43:59,530
easier to keep alive in the future so

00:43:56,890 --> 00:44:02,619
with this I'd like to thank you and I'm

00:43:59,530 --> 00:44:06,180
open for questions or comments or

00:44:02,619 --> 00:44:06,180
remarks or whatever you have on it

00:44:16,420 --> 00:44:19,550
[Music]

00:44:30,270 --> 00:44:34,050
yeah so the question is about what what

00:44:32,250 --> 00:44:36,420
adaptations are required for the device

00:44:34,050 --> 00:44:39,270
drivers also under the new dovetail

00:44:36,420 --> 00:44:41,610
steering approach so conceptually they

00:44:39,270 --> 00:44:43,320
are similar to the existing model I mean

00:44:41,610 --> 00:44:47,190
at the point where you create these two

00:44:43,320 --> 00:44:49,470
worlds a driver which has to live with a

00:44:47,190 --> 00:44:51,810
certain feature set of certain service

00:44:49,470 --> 00:44:55,440
set in the in the Koch kernel in this

00:44:51,810 --> 00:44:58,170
nmi side band or out of band work load

00:44:55,440 --> 00:45:01,140
has to be aware of this so it has to use

00:44:58,170 --> 00:45:02,880
the the right api's which are enabled to

00:45:01,140 --> 00:45:04,410
work in this environment it hasn't to

00:45:02,880 --> 00:45:09,150
call into the other world an

00:45:04,410 --> 00:45:10,680
uncoordinated way that is well it can be

00:45:09,150 --> 00:45:12,390
expressed right now as we have we have

00:45:10,680 --> 00:45:14,760
some drive abstraction interface which

00:45:12,390 --> 00:45:16,410
is probably not optimal for this but at

00:45:14,760 --> 00:45:18,570
least contains for example the model

00:45:16,410 --> 00:45:21,300
that there are possibly two entry path

00:45:18,570 --> 00:45:22,940
into the driver one a non real-time and

00:45:21,300 --> 00:45:25,560
the other real-time and you want to have

00:45:22,940 --> 00:45:27,960
the right handlers in the right context

00:45:25,560 --> 00:45:29,610
working that could be a model but of

00:45:27,960 --> 00:45:31,920
course it means that you are changing

00:45:29,610 --> 00:45:34,320
the way a classic driver is working

00:45:31,920 --> 00:45:36,840
under Linux which has only one path and

00:45:34,320 --> 00:45:38,820
when one drop to do it doesn't change

00:45:36,840 --> 00:45:40,260
the fact that even as classic driver it

00:45:38,820 --> 00:45:41,820
wants to be usable actually for

00:45:40,260 --> 00:45:44,130
real-time requires a certain

00:45:41,820 --> 00:45:45,990
architecture it doesn't call into

00:45:44,130 --> 00:45:48,060
something which like a work queue which

00:45:45,990 --> 00:45:50,310
has an undefined behavior or an

00:45:48,060 --> 00:45:52,070
unbounded latency behavior that this

00:45:50,310 --> 00:45:55,020
kind of pattern do not show up as well

00:45:52,070 --> 00:45:57,090
while sometimes they are in contrast for

00:45:55,020 --> 00:45:58,440
optimizing for throughput and the real

00:45:57,090 --> 00:46:01,020
time is not about throughput it's about

00:45:58,440 --> 00:46:02,310
the latency thing so these kind of

00:46:01,020 --> 00:46:04,520
channels you have physically set up as

00:46:02,310 --> 00:46:07,170
well but the encoding of this how you

00:46:04,520 --> 00:46:09,660
manifest the API for that and how you

00:46:07,170 --> 00:46:11,730
keep the API maintainable that is then

00:46:09,660 --> 00:46:12,990
the challenge and there is no easy

00:46:11,730 --> 00:46:14,940
answer to this right now

00:46:12,990 --> 00:46:16,680
quite a few of our users I'm sure they

00:46:14,940 --> 00:46:19,290
are just developing they are on-demand

00:46:16,680 --> 00:46:22,230
drivers for their specific products very

00:46:19,290 --> 00:46:24,630
few of them from scratch or by copying

00:46:22,230 --> 00:46:26,760
over existing code focusing just on the

00:46:24,630 --> 00:46:29,010
case that they have this is of course

00:46:26,760 --> 00:46:32,160
not optimal this is the classic fork

00:46:29,010 --> 00:46:33,420
approach and but it's often enough and

00:46:32,160 --> 00:46:35,609
it's for some of them actually it's a

00:46:33,420 --> 00:46:37,800
reason to go this way I had a discussion

00:46:35,609 --> 00:46:39,690
with a friend of mine on this topic and

00:46:37,800 --> 00:46:41,070
and he wanted to ask me something of my

00:46:39,690 --> 00:46:42,840
stuff and I was always pushing back and

00:46:41,070 --> 00:46:44,040
said oh come on why don't you spend 30

00:46:42,840 --> 00:46:45,300
it's so easy for all yours you

00:46:44,040 --> 00:46:47,220
only have a few people working less and

00:46:45,300 --> 00:46:49,350
he's come on can stop this discussion I

00:46:47,220 --> 00:46:50,730
want you to end some like settle my

00:46:49,350 --> 00:46:52,740
question because we know why they're

00:46:50,730 --> 00:46:54,900
using it because we know that we can't

00:46:52,740 --> 00:46:57,270
handle with our existing resource and

00:46:54,900 --> 00:47:00,330
knowledge the complexity of a system max

00:46:57,270 --> 00:47:01,830
parity when it breaks so we will need

00:47:00,330 --> 00:47:04,320
additional support but we feel more

00:47:01,830 --> 00:47:06,270
comfortable in the economic world it has

00:47:04,320 --> 00:47:08,640
its own problems but for our use case

00:47:06,270 --> 00:47:11,430
this is the right thing and and they

00:47:08,640 --> 00:47:14,270
will go with these separate Drive

00:47:11,430 --> 00:47:14,270
approach I suppose

00:47:18,350 --> 00:47:22,360
[Music]

00:47:25,920 --> 00:47:32,240
further question

00:47:28,700 --> 00:47:34,490
so otherwise what but we definitely want

00:47:32,240 --> 00:47:36,319
to do and we besides giving these kind

00:47:34,490 --> 00:47:38,690
of talks and then trying to get the

00:47:36,319 --> 00:47:40,010
feedback actively in this way we're also

00:47:38,690 --> 00:47:42,670
thinking about having another user

00:47:40,010 --> 00:47:45,650
meeting and what we had now a small one

00:47:42,670 --> 00:47:47,900
in at around foster and there were

00:47:45,650 --> 00:47:50,869
probably one if things will work out in

00:47:47,900 --> 00:47:54,589
an autumn as well too just to collect

00:47:50,869 --> 00:47:56,780
this input from the users and and maybe

00:47:54,589 --> 00:47:59,059
give some further hints what things are

00:47:56,780 --> 00:48:01,460
moving to but also give some hints from

00:47:59,059 --> 00:48:05,839
the users to us what they want to have

00:48:01,460 --> 00:48:08,690
and so open for any suggestions or any

00:48:05,839 --> 00:48:11,089
yeah we'll use to join this definitely

00:48:08,690 --> 00:48:12,740
the meeting this is open for this drop

00:48:11,089 --> 00:48:14,960
your raise your hand if you're

00:48:12,740 --> 00:48:16,130
interested in this kind of thing we can

00:48:14,960 --> 00:48:17,720
make it happen if we had a very nice

00:48:16,130 --> 00:48:20,660
meeting a couple of years ago in

00:48:17,720 --> 00:48:23,750
Raceland back then which quite an

00:48:20,660 --> 00:48:26,480
interesting folk folk sector then that

00:48:23,750 --> 00:48:27,829
would be nice to have again and that's

00:48:26,480 --> 00:48:35,390
definitely what we'll offer to the

00:48:27,829 --> 00:48:37,480
community as well otherwise thank you a

00:48:35,390 --> 00:48:40,389
lot for attention

00:48:37,480 --> 00:48:40,389

YouTube URL: https://www.youtube.com/watch?v=Le1O2Hy8KUk


