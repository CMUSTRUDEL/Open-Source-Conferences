Title: Keynote: The Kernel Report - Jonathan Corbet, Kernel Developer and Executive Editor of LWN.net
Publication date: 2018-03-15
Playlist: Embedded Linux Conference + OpenIoT Summit NA 2018
Description: 
	Keynote: The Kernel Report - Jonathan Corbet, Author, Kernel Developer and Executive Editor of LWN.net

This talk will provide a quick overview of the most important topics of interest to the Linux kernel development community. What have the kernel developers been up to, what are some of the biggest challenges for the community, and what can be expected in the near future? Hold on to your seats, it's going to be a fast ride. 

About Jonathan Corbet
Jonathan Corbet is the executive editor at LWN.net. He is the maintainer of the kernel's documentation subsystem, a member of the Linux Foundation's Technical Advisory Board, and a frequent speaker at community events worldwide.
Captions: 
	00:00:00,000 --> 00:00:05,130
all right well good morning everybody

00:00:01,410 --> 00:00:08,250
good to be here

00:00:05,130 --> 00:00:09,750
this there we go this worked before it

00:00:08,250 --> 00:00:11,670
should certainly work this time as well

00:00:09,750 --> 00:00:13,620
so my name is John I'm here to talk

00:00:11,670 --> 00:00:15,870
about the kernel I've got a whole lot of

00:00:13,620 --> 00:00:18,029
stuff to to cover in a short period of

00:00:15,870 --> 00:00:20,789
time so I'm gonna go fast let's just get

00:00:18,029 --> 00:00:23,490
right into it I'll start with a picture

00:00:20,789 --> 00:00:25,560
that I put up and a lot of talks this is

00:00:23,490 --> 00:00:26,849
a simple table of the major kernel

00:00:25,560 --> 00:00:29,340
releases that we have done over the last

00:00:26,849 --> 00:00:31,140
about 13 months it's pretty boring

00:00:29,340 --> 00:00:33,540
doesn't change a whole lot you see we've

00:00:31,140 --> 00:00:35,670
done six releases over this period of

00:00:33,540 --> 00:00:37,770
time each one contains something on the

00:00:35,670 --> 00:00:39,870
order of 13,000 or so changes in it

00:00:37,770 --> 00:00:41,940
quite a few changes for for a 10-week

00:00:39,870 --> 00:00:44,489
development cycle contain the work of

00:00:41,940 --> 00:00:46,500
1700 or so developers we can extend this

00:00:44,489 --> 00:00:48,420
forward pretty easily to the 4.16

00:00:46,500 --> 00:00:52,230
release probably come out right at the

00:00:48,420 --> 00:00:56,250
beginning of April maybe the worst April

00:00:52,230 --> 00:00:57,809
Fool's joke ever we'll never know but we

00:00:56,250 --> 00:01:00,390
can predict this pretty readily based on

00:00:57,809 --> 00:01:01,739
what's happening on there like I said

00:01:00,390 --> 00:01:03,329
it's boring I'm not really sure why I

00:01:01,739 --> 00:01:04,920
put these up anymore they always look

00:01:03,329 --> 00:01:07,170
like this except that the numbers slowly

00:01:04,920 --> 00:01:09,150
get bigger over the years as the the

00:01:07,170 --> 00:01:11,040
pace of the kernel community picks up it

00:01:09,150 --> 00:01:13,830
continues to run as a pretty well

00:01:11,040 --> 00:01:15,119
functioning machine there is one thing

00:01:13,830 --> 00:01:17,460
that's a little bit different on this

00:01:15,119 --> 00:01:20,369
one though that stands out which is that

00:01:17,460 --> 00:01:22,290
for a 15 took 77 days 11 weeks to come

00:01:20,369 --> 00:01:24,060
out it's the first time we has taken

00:01:22,290 --> 00:01:27,570
that long to produce a kernel

00:01:24,060 --> 00:01:29,250
since 3.1 several years ago and 3.1 was

00:01:27,570 --> 00:01:30,479
delayed because kernel.org was

00:01:29,250 --> 00:01:33,420
compromised and we were trying to

00:01:30,479 --> 00:01:35,400
recover from that so one might imagine

00:01:33,420 --> 00:01:37,380
it took something fairly significant to

00:01:35,400 --> 00:01:39,299
to delay the kernel release this time

00:01:37,380 --> 00:01:41,610
around and of course we all know what

00:01:39,299 --> 00:01:43,470
that was which is our good friends

00:01:41,610 --> 00:01:44,909
meltdown the specter these were

00:01:43,470 --> 00:01:46,320
disclosed to the kernel development

00:01:44,909 --> 00:01:49,320
community around the beginning of the

00:01:46,320 --> 00:01:51,500
4.15 cycle by the time for it at 15 came

00:01:49,320 --> 00:01:54,060
out we had the meltdown medications

00:01:51,500 --> 00:01:56,280
merged and the specter mitigations

00:01:54,060 --> 00:01:58,140
pretty much on their way towards coming

00:01:56,280 --> 00:02:01,140
in at that time I'm not going to get

00:01:58,140 --> 00:02:03,390
into the details of meltdown inspector

00:02:01,140 --> 00:02:04,829
there's lots of information out there if

00:02:03,390 --> 00:02:06,719
you're really curious I can recommend a

00:02:04,829 --> 00:02:09,940
website that has covered them in a fair

00:02:06,719 --> 00:02:12,970
amount of detail but I will do

00:02:09,940 --> 00:02:14,650
to look a little bit about what milton

00:02:12,970 --> 00:02:15,820
inspector and the response to them can

00:02:14,650 --> 00:02:17,320
teach us because there is a certain

00:02:15,820 --> 00:02:18,850
amount of unhappiness in the community

00:02:17,320 --> 00:02:21,730
about how this stuff was handled and how

00:02:18,850 --> 00:02:23,350
it played out and so it's worth looking

00:02:21,730 --> 00:02:26,770
at in the hopes that the next time

00:02:23,350 --> 00:02:28,060
around we can do a little bit better but

00:02:26,770 --> 00:02:30,130
the first thing that I would actually

00:02:28,060 --> 00:02:30,400
like to point out that we learn from all

00:02:30,130 --> 00:02:33,370
this

00:02:30,400 --> 00:02:35,200
the develop development community really

00:02:33,370 --> 00:02:38,380
has our back over the course of two

00:02:35,200 --> 00:02:41,290
months we saw many many kernel and

00:02:38,380 --> 00:02:43,510
beyond developers working round the

00:02:41,290 --> 00:02:45,430
clock doing without sleep doing

00:02:43,510 --> 00:02:47,170
everything they could to protect us

00:02:45,430 --> 00:02:50,170
against these problems that were not in

00:02:47,170 --> 00:02:52,420
any way of their own making all right

00:02:50,170 --> 00:02:55,780
they got a little grumpy towards the end

00:02:52,420 --> 00:02:58,510
of it because they were um having a

00:02:55,780 --> 00:03:00,010
pretty hard time of it but if you look

00:02:58,510 --> 00:03:01,690
at the people who came in some of them

00:03:00,010 --> 00:03:03,790
were obviously doing it as part of their

00:03:01,690 --> 00:03:06,100
job others came in just because there

00:03:03,790 --> 00:03:08,140
was a problem to solve and we needed to

00:03:06,100 --> 00:03:09,880
get it solved and contributed to it and

00:03:08,140 --> 00:03:11,560
it was an amazing effort and I think

00:03:09,880 --> 00:03:13,330
that we owe the the people who worked on

00:03:11,560 --> 00:03:17,190
the meltdown inspector mitigations a

00:03:13,330 --> 00:03:17,190
pretty big round of applause all right

00:03:20,319 --> 00:03:26,569
so they did a whole lot of really good

00:03:23,629 --> 00:03:28,010
work but it has to be said that there

00:03:26,569 --> 00:03:31,489
were people who are left out in the cold

00:03:28,010 --> 00:03:33,469
anyway we can start with for example the

00:03:31,489 --> 00:03:35,959
the bsd communities there are millions

00:03:33,469 --> 00:03:38,329
of bsd users out there depending on

00:03:35,959 --> 00:03:40,340
which version of bsd you're using they

00:03:38,329 --> 00:03:42,170
either got no notification of all prior

00:03:40,340 --> 00:03:44,810
to the collapse of the embargo or their

00:03:42,170 --> 00:03:47,870
notification was measured in on the

00:03:44,810 --> 00:03:50,329
order of one or two weeks so when the

00:03:47,870 --> 00:03:52,430
embargo fell down and these these

00:03:50,329 --> 00:03:53,959
vulnerabilities were disclosed they

00:03:52,430 --> 00:03:56,720
really had nothing to tell their users

00:03:53,959 --> 00:03:58,700
other than standby we're working on this

00:03:56,720 --> 00:04:00,799
we'll get there as soon as we can in

00:03:58,700 --> 00:04:03,079
fact you're still scrambling to try to

00:04:00,799 --> 00:04:04,760
to resolve these things but that's not a

00:04:03,079 --> 00:04:06,620
good thing to do the bsd community i

00:04:04,760 --> 00:04:09,620
would like if we could do better than

00:04:06,620 --> 00:04:10,579
that in the future but even in the linux

00:04:09,620 --> 00:04:12,260
world there were there were some

00:04:10,579 --> 00:04:15,230
interesting things that came out of this

00:04:12,260 --> 00:04:16,910
the the major cloud provider is all put

00:04:15,230 --> 00:04:18,620
out nice releases saying we've protected

00:04:16,910 --> 00:04:21,079
all of our users from the very beginning

00:04:18,620 --> 00:04:23,270
everybody is happy but not everybody

00:04:21,079 --> 00:04:25,190
uses the major cloud providers some of

00:04:23,270 --> 00:04:28,490
us are using what are called tier two

00:04:25,190 --> 00:04:30,289
providers if i go on to one of the LW

00:04:28,490 --> 00:04:31,460
one cloud servers and go into this nifty

00:04:30,289 --> 00:04:33,949
directory that you should know about

00:04:31,460 --> 00:04:36,199
where you can see what vulnerability is

00:04:33,949 --> 00:04:38,030
your particular cpu has and what the

00:04:36,199 --> 00:04:41,060
responses are all right what can i see

00:04:38,030 --> 00:04:43,190
ok i'm nicely protected against meltdown

00:04:41,060 --> 00:04:44,870
right has kernel page table isolation

00:04:43,190 --> 00:04:47,120
installed this happened about a month

00:04:44,870 --> 00:04:49,250
after the disclosure on on this

00:04:47,120 --> 00:04:52,039
particular provider pretty much the case

00:04:49,250 --> 00:04:53,960
for all the tier two providers and still

00:04:52,039 --> 00:04:55,880
completely vulnerable to specter none of

00:04:53,960 --> 00:04:57,740
the spectrum mitigations have yet gotten

00:04:55,880 --> 00:04:59,960
into their kernels that is because the

00:04:57,740 --> 00:05:01,909
tier two providers we're not notified

00:04:59,960 --> 00:05:03,620
they were blindsided by it they learned

00:05:01,909 --> 00:05:06,860
about it when the rest of us did when

00:05:03,620 --> 00:05:10,159
the embargo fell down this I think is

00:05:06,860 --> 00:05:11,750
kind of worrisome we've we have a market

00:05:10,159 --> 00:05:14,300
already that's pretty well concentrated

00:05:11,750 --> 00:05:17,090
between a small number of tier one

00:05:14,300 --> 00:05:19,669
providers this kind of sharing of

00:05:17,090 --> 00:05:22,639
information is only gonna serve to

00:05:19,669 --> 00:05:23,900
further consolidate that market and I

00:05:22,639 --> 00:05:26,539
don't think that's really a good thing

00:05:23,900 --> 00:05:28,370
for any anybody that is involved I think

00:05:26,539 --> 00:05:30,349
we need to find a way to get this

00:05:28,370 --> 00:05:31,230
information out a little bit more widely

00:05:30,349 --> 00:05:33,450
than we have

00:05:31,230 --> 00:05:35,210
in the past and there are a couple of

00:05:33,450 --> 00:05:38,460
some things that we can do about that

00:05:35,210 --> 00:05:41,010
but one thing another thing I want to

00:05:38,460 --> 00:05:43,770
point out here that we learned very well

00:05:41,010 --> 00:05:45,870
is the kernel community works as a

00:05:43,770 --> 00:05:48,330
single engineering organization we have

00:05:45,870 --> 00:05:50,790
people working for hundreds of companies

00:05:48,330 --> 00:05:53,100
working on the computer on the kernel

00:05:50,790 --> 00:05:58,170
but when they work on the kernel they're

00:05:53,100 --> 00:06:00,540
working as kernel developers and you can

00:05:58,170 --> 00:06:02,400
see this perhaps most clearly in the

00:06:00,540 --> 00:06:05,640
different response to melt down into

00:06:02,400 --> 00:06:08,040
spectrum the the kernel page table

00:06:05,640 --> 00:06:11,340
isolation patches were posted in mid

00:06:08,040 --> 00:06:14,280
November first time around they then saw

00:06:11,340 --> 00:06:16,320
a broad influx of participation from the

00:06:14,280 --> 00:06:19,320
community people from all over who

00:06:16,320 --> 00:06:20,580
worked on these these patches improved

00:06:19,320 --> 00:06:22,530
them who made the much less invasive

00:06:20,580 --> 00:06:24,660
made their coverage much better made

00:06:22,530 --> 00:06:26,940
them more secure what was merged into

00:06:24,660 --> 00:06:29,490
the 4.15 kernel a little before the

00:06:26,940 --> 00:06:30,780
embargo didn't much resemble what was

00:06:29,490 --> 00:06:32,580
first posted it was much better than

00:06:30,780 --> 00:06:34,350
that because of this kernel didn't

00:06:32,580 --> 00:06:37,170
community to develop in the process that

00:06:34,350 --> 00:06:39,000
was applied to them so in fact when the

00:06:37,170 --> 00:06:41,090
embargo fell down we already had that

00:06:39,000 --> 00:06:45,240
stuff merged into the mainline kernel

00:06:41,090 --> 00:06:47,070
the specter fixes instead were worked on

00:06:45,240 --> 00:06:48,540
in private and they were not only

00:06:47,070 --> 00:06:50,190
working on a private but the people who

00:06:48,540 --> 00:06:51,930
were working on them often even we're

00:06:50,190 --> 00:06:54,000
not able to talk to each other about

00:06:51,930 --> 00:06:56,340
what they were doing as a result when

00:06:54,000 --> 00:06:58,500
the embargo ended we had nothing that

00:06:56,340 --> 00:07:01,200
was set to go into the mainline at that

00:06:58,500 --> 00:07:03,780
point we had distributors who had been

00:07:01,200 --> 00:07:05,370
notified shipping something we had very

00:07:03,780 --> 00:07:07,470
different responses from one distributor

00:07:05,370 --> 00:07:09,720
to the next and if you look at some of

00:07:07,470 --> 00:07:11,310
the publicly posted benchmarks you see

00:07:09,720 --> 00:07:12,360
that the performance characteristics are

00:07:11,310 --> 00:07:14,370
very different the protection

00:07:12,360 --> 00:07:15,870
characteristics are very different what

00:07:14,370 --> 00:07:18,060
did he mention oligo into the mainline

00:07:15,870 --> 00:07:19,260
kernel didn't much resemble the patches

00:07:18,060 --> 00:07:21,450
that were floating around right after

00:07:19,260 --> 00:07:23,520
the embargo fell because again once the

00:07:21,450 --> 00:07:25,680
community got a look at them yes I

00:07:23,520 --> 00:07:27,870
didn't like me very much and made them a

00:07:25,680 --> 00:07:29,850
whole lot better had there been some

00:07:27,870 --> 00:07:31,170
sort of a way for the community to work

00:07:29,850 --> 00:07:33,270
or at least a subset of the community

00:07:31,170 --> 00:07:34,680
because he couldn't really do these in

00:07:33,270 --> 00:07:36,030
the open but if there had been a way to

00:07:34,680 --> 00:07:38,160
bring in a proper subset of the

00:07:36,030 --> 00:07:39,810
community to work on these we would have

00:07:38,160 --> 00:07:44,100
had a much better result and a better

00:07:39,810 --> 00:07:45,270
story when when the embargo collapsed

00:07:44,100 --> 00:07:48,030
something that would have helped with

00:07:45,270 --> 00:07:49,350
that it would have been to realize that

00:07:48,030 --> 00:07:51,990
the kernel development community

00:07:49,350 --> 00:07:54,060
actually has some pretty well evolved

00:07:51,990 --> 00:07:55,950
responses to security issues we have a

00:07:54,060 --> 00:07:58,170
mailing list to trust the people who can

00:07:55,950 --> 00:07:59,820
look at a problem bringing anybody else

00:07:58,170 --> 00:08:01,890
who needs to be brought in get a fixed

00:07:59,820 --> 00:08:03,330
developed get it out to the to

00:08:01,890 --> 00:08:06,120
distributors get it into the stable

00:08:03,330 --> 00:08:08,040
kernels I've been told that this process

00:08:06,120 --> 00:08:09,930
handles about one security issue a week

00:08:08,040 --> 00:08:11,340
most of these we never even know about

00:08:09,930 --> 00:08:13,440
they just get fixed and they go into the

00:08:11,340 --> 00:08:16,230
kernel and life goes on not all of us

00:08:13,440 --> 00:08:18,330
actually agree with the the nobody knows

00:08:16,230 --> 00:08:19,620
about it part but that that is how it

00:08:18,330 --> 00:08:24,410
works and the important thing is that

00:08:19,620 --> 00:08:26,460
we're getting the fixes out there these

00:08:24,410 --> 00:08:29,370
processes were not followed for a

00:08:26,460 --> 00:08:31,560
meltdown inspector and this was perhaps

00:08:29,370 --> 00:08:35,280
because it was a hardware issue not a

00:08:31,560 --> 00:08:37,050
software issue but we had to respond to

00:08:35,280 --> 00:08:38,700
it as if it were just another software

00:08:37,050 --> 00:08:40,380
issue it was something that we had to

00:08:38,700 --> 00:08:42,810
fix in software we had to develop

00:08:40,380 --> 00:08:45,410
patches in pretty much the same way had

00:08:42,810 --> 00:08:48,060
we been able to actually apply our

00:08:45,410 --> 00:08:49,860
community responses to these problems I

00:08:48,060 --> 00:08:52,680
think we would have had better solutions

00:08:49,860 --> 00:08:54,600
faster and perhaps better distributed

00:08:52,680 --> 00:08:56,250
solutions as well so I really hope that

00:08:54,600 --> 00:08:58,290
the next time this sort of thing comes

00:08:56,250 --> 00:08:59,370
around because I think we all agree that

00:08:58,290 --> 00:09:02,430
there will be a next time

00:08:59,370 --> 00:09:04,770
I hope that we can follow our procedures

00:09:02,430 --> 00:09:07,320
a little bit better and not try to kind

00:09:04,770 --> 00:09:10,290
of wing it and do things on the fly as

00:09:07,320 --> 00:09:12,150
it was done this time around okay last

00:09:10,290 --> 00:09:14,340
thing I was saying this we think of

00:09:12,150 --> 00:09:16,770
ourselves is running all this nice free

00:09:14,340 --> 00:09:18,570
software on open systems and so on but

00:09:16,770 --> 00:09:20,670
we what we see with vulnerabilities like

00:09:18,570 --> 00:09:22,560
this is to a great extent our computers

00:09:20,670 --> 00:09:24,720
are still proprietary black boxes with a

00:09:22,560 --> 00:09:26,550
lot of proprietary software running

00:09:24,720 --> 00:09:28,800
underneath what we think of as being the

00:09:26,550 --> 00:09:30,840
hardware level we saw this for example

00:09:28,800 --> 00:09:32,760
with the Intel management engine issues

00:09:30,840 --> 00:09:34,500
that came out last year which were quite

00:09:32,760 --> 00:09:36,300
surprising to a lot of people we've seen

00:09:34,500 --> 00:09:37,860
it again with meltdown a specter where

00:09:36,300 --> 00:09:40,380
there's a bunch of proprietary software

00:09:37,860 --> 00:09:44,420
doing lots of black magic underneath the

00:09:40,380 --> 00:09:46,860
scenes I really would like to see a

00:09:44,420 --> 00:09:48,720
future where we move a little bit more

00:09:46,860 --> 00:09:50,310
toward to open hardware something like

00:09:48,720 --> 00:09:51,900
some of the open firmware stuff that

00:09:50,310 --> 00:09:53,430
Ahmad was talking about before I think

00:09:51,900 --> 00:09:56,209
that's the kind of stuff that we'd like

00:09:53,430 --> 00:09:59,420
to see but also open hardware does

00:09:56,209 --> 00:10:01,550
where we can actually review these

00:09:59,420 --> 00:10:03,199
designs in public and affect them the

00:10:01,550 --> 00:10:05,209
way we do with software it's not a

00:10:03,199 --> 00:10:06,470
panacea it's not gonna fix any problems

00:10:05,209 --> 00:10:08,629
outright just like it hasn't was

00:10:06,470 --> 00:10:12,679
software but I think it can only improve

00:10:08,629 --> 00:10:14,149
the situation quite a bit alright enough

00:10:12,679 --> 00:10:15,499
on that but while I'm on the topic of

00:10:14,149 --> 00:10:17,329
security I'm often a little bit

00:10:15,499 --> 00:10:18,800
pessimistic about how our community

00:10:17,329 --> 00:10:20,720
deals with security so I thought I'd put

00:10:18,800 --> 00:10:23,019
up some good news for a change just to

00:10:20,720 --> 00:10:24,649
be different keep you on your toes

00:10:23,019 --> 00:10:26,929
because there are some good things

00:10:24,649 --> 00:10:28,850
happening perhaps the most significant

00:10:26,929 --> 00:10:30,709
being that work on hardening the kernel

00:10:28,850 --> 00:10:33,949
is going strong and accelerating

00:10:30,709 --> 00:10:35,929
hardening means putting protections into

00:10:33,949 --> 00:10:37,850
the kernel so that even in the presence

00:10:35,929 --> 00:10:39,499
of non vulnerability as the kernel

00:10:37,850 --> 00:10:41,959
itself is difficult or impossible to

00:10:39,499 --> 00:10:43,519
explain this kind of work was very

00:10:41,959 --> 00:10:45,619
difficult to sell to the kernel

00:10:43,519 --> 00:10:47,119
community for many years developers

00:10:45,619 --> 00:10:48,589
didn't see the need for it they didn't

00:10:47,119 --> 00:10:50,389
like the sort of overhead that came with

00:10:48,589 --> 00:10:52,069
it but the case for hardening I think

00:10:50,389 --> 00:10:54,019
has now been quite effectively made and

00:10:52,069 --> 00:10:55,579
so that work is happening and it's

00:10:54,019 --> 00:10:57,949
picking up and we are all safer as a

00:10:55,579 --> 00:10:59,509
result of it we're seeing a lot more

00:10:57,949 --> 00:11:01,699
testing and fuzzing than we used to

00:10:59,509 --> 00:11:03,619
finding problems before they fix our

00:11:01,699 --> 00:11:05,540
users and getting or before they hit our

00:11:03,619 --> 00:11:07,309
users and getting them fixed and more

00:11:05,540 --> 00:11:09,439
fixes getting the stable trees and this

00:11:07,309 --> 00:11:11,720
is important in the kernel community we

00:11:09,439 --> 00:11:13,309
fix incredible numbers of bugs thousands

00:11:11,720 --> 00:11:16,579
of bugs a really embarrassing number of

00:11:13,309 --> 00:11:18,920
bugs actually a lot of these bugs have

00:11:16,579 --> 00:11:20,929
security implications but those are

00:11:18,920 --> 00:11:22,999
often not apparent at the time that the

00:11:20,929 --> 00:11:25,009
bug is fixed it just looks like a bug

00:11:22,999 --> 00:11:26,389
and it takes some enterprising attacker

00:11:25,009 --> 00:11:28,910
to come along and figure out a way to

00:11:26,389 --> 00:11:32,509
exploit it and take advantage of our

00:11:28,910 --> 00:11:34,160
systems so the best way to be safe is to

00:11:32,509 --> 00:11:36,259
get as many of these fixes as you can

00:11:34,160 --> 00:11:37,519
because many of them are fixing security

00:11:36,259 --> 00:11:41,839
problems that we don't actually know

00:11:37,519 --> 00:11:44,240
about yet and that means getting those

00:11:41,839 --> 00:11:45,499
fixes into the stable trees there's been

00:11:44,240 --> 00:11:46,999
a real effort to get more of them

00:11:45,499 --> 00:11:48,649
there's even a guy out there now Sasha

00:11:46,999 --> 00:11:51,439
Levin who has developed a neural network

00:11:48,649 --> 00:11:53,990
system to identify fixes that look like

00:11:51,439 --> 00:11:55,879
they should be stable fixes and call

00:11:53,990 --> 00:11:57,920
them out and get them headed towards the

00:11:55,879 --> 00:11:59,299
stable trees so if you've been looking

00:11:57,920 --> 00:12:01,790
at the stable trees you're seeing a

00:11:59,299 --> 00:12:03,740
whole lot more of these stable releases

00:12:01,790 --> 00:12:06,169
coming out with a lot more fixes in them

00:12:03,740 --> 00:12:07,490
and this is part of why we're doing that

00:12:06,169 --> 00:12:09,649
and I think that again that's a good

00:12:07,490 --> 00:12:10,040
thing in terms of keeping ourselves and

00:12:09,649 --> 00:12:13,850
our users

00:12:10,040 --> 00:12:15,589
safe on the other hand we still have

00:12:13,850 --> 00:12:17,720
anybody who you could call the chief

00:12:15,589 --> 00:12:19,519
security officers for the colonel nobody

00:12:17,720 --> 00:12:21,740
whose job it is to keep the colonel

00:12:19,519 --> 00:12:24,949
secure make it secure keep it that way

00:12:21,740 --> 00:12:27,170
this is an area of chronic

00:12:24,949 --> 00:12:29,240
underinvestment I think in our in our

00:12:27,170 --> 00:12:31,009
commercial ecosystem everybody seems to

00:12:29,240 --> 00:12:33,290
think it's somebody else's problem I

00:12:31,009 --> 00:12:35,990
wish that we could get a little bit more

00:12:33,290 --> 00:12:37,639
more funding in that area to improve our

00:12:35,990 --> 00:12:39,170
story in that regard and of course

00:12:37,639 --> 00:12:41,120
vulnerability is abound we're still very

00:12:39,170 --> 00:12:43,639
good at adding vulnerabilities when

00:12:41,120 --> 00:12:45,440
you're adding 13000 changes every 10

00:12:43,639 --> 00:12:48,199
weeks some of them are going to have

00:12:45,440 --> 00:12:49,519
problems in them so we have a long way

00:12:48,199 --> 00:12:51,550
to go but I think we're heading in the

00:12:49,519 --> 00:12:54,560
right direction and that is a good thing

00:12:51,550 --> 00:12:57,350
one area that we're but I think we do

00:12:54,560 --> 00:12:59,149
have a long way to go that's relevant to

00:12:57,350 --> 00:13:01,850
this community how many of you out there

00:12:59,149 --> 00:13:04,399
you think have some sort of an embedded

00:13:01,850 --> 00:13:05,959
system that will never be updated to to

00:13:04,399 --> 00:13:09,769
address the meltdown inspector problems

00:13:05,959 --> 00:13:10,970
or many other ones as well so those of

00:13:09,769 --> 00:13:13,389
you who have not raised your hands I

00:13:10,970 --> 00:13:15,589
think haven't looked closely enough yet

00:13:13,389 --> 00:13:18,380
so there are a lot of reasons why this

00:13:15,589 --> 00:13:20,600
happens one of them certainly is the

00:13:18,380 --> 00:13:22,760
simple problem of the huge amount of

00:13:20,600 --> 00:13:25,850
Anna tree code that is shipped on these

00:13:22,760 --> 00:13:28,069
systems if you've added a bunch of stuff

00:13:25,850 --> 00:13:30,110
to your kernel and you've back ported it

00:13:28,069 --> 00:13:32,060
to whatever currently shipped the idea

00:13:30,110 --> 00:13:34,760
of moving to a new kernel and dragging

00:13:32,060 --> 00:13:37,310
all that code forward is is intimidating

00:13:34,760 --> 00:13:38,779
at the at the very least it serves as a

00:13:37,310 --> 00:13:41,510
sort of ball and chain that prevents

00:13:38,779 --> 00:13:43,760
these sorts of updates from happening

00:13:41,510 --> 00:13:44,870
and we see it come out every now and

00:13:43,760 --> 00:13:46,790
there was actually a fascinating

00:13:44,870 --> 00:13:48,680
discussion that just went on about a

00:13:46,790 --> 00:13:51,260
back part of the meltdown patches to the

00:13:48,680 --> 00:13:54,139
4.9 kernel for the ARM architecture and

00:13:51,260 --> 00:13:56,000
this led to a kind of a exploiting rant

00:13:54,139 --> 00:13:58,310
from Greg Crow hartman that's actually

00:13:56,000 --> 00:14:00,410
worth reading he was questioning the

00:13:58,310 --> 00:14:02,839
need to do this this big backward at all

00:14:00,410 --> 00:14:04,850
saying just move to 4.14 instead and

00:14:02,839 --> 00:14:07,730
then when you realize you can't do that

00:14:04,850 --> 00:14:09,139
go and yell at your SOC for forcing you

00:14:07,730 --> 00:14:11,060
into the nightmare that they conned you

00:14:09,139 --> 00:14:13,279
into when they're 3 plus million lines

00:14:11,060 --> 00:14:15,079
of added codes added to their kernel

00:14:13,279 --> 00:14:17,389
tree you're always living on borrowed

00:14:15,079 --> 00:14:20,240
time he said and it looks like that time

00:14:17,389 --> 00:14:21,740
is finally up these are pretty strong

00:14:20,240 --> 00:14:22,240
words but there really is some truth to

00:14:21,740 --> 00:14:25,510
this

00:14:22,240 --> 00:14:27,130
that we have so many systems that are

00:14:25,510 --> 00:14:29,709
not getting so many important fixes

00:14:27,130 --> 00:14:31,630
because they are held back by all these

00:14:29,709 --> 00:14:33,250
lines of code and should you think that

00:14:31,630 --> 00:14:35,560
that three million lines is a bit of an

00:14:33,250 --> 00:14:39,010
exaggeration this is a slide I ripped

00:14:35,560 --> 00:14:41,080
off from Tim some years ago should maybe

00:14:39,010 --> 00:14:43,029
get a new one from you just showing the

00:14:41,080 --> 00:14:45,190
amount of out of tree code being shipped

00:14:43,029 --> 00:14:46,630
with with popular mobile chipsets and

00:14:45,190 --> 00:14:49,120
you see that we really are talking

00:14:46,630 --> 00:14:51,520
millions of lines of code if that's a

00:14:49,120 --> 00:14:53,890
huge anchor holding the sort of stuff

00:14:51,520 --> 00:14:55,630
back so we need to do better there are

00:14:53,890 --> 00:14:58,000
actually some reasons for optimism in

00:14:55,630 --> 00:15:00,130
this area including the work that

00:14:58,000 --> 00:15:03,070
Google's done to bring Android up to at

00:15:00,130 --> 00:15:05,529
least a set of well supported long-term

00:15:03,070 --> 00:15:06,010
stable kernels so that that's helped

00:15:05,529 --> 00:15:08,770
quite a bit

00:15:06,010 --> 00:15:11,080
but more encouraging perhaps is the fact

00:15:08,770 --> 00:15:12,580
that a number of SOC vendors are

00:15:11,080 --> 00:15:14,500
actually starting to see the light and

00:15:12,580 --> 00:15:16,480
starting to realize that by carrying all

00:15:14,500 --> 00:15:18,700
the sanitary code they have not only

00:15:16,480 --> 00:15:19,990
made life harder and more and secure for

00:15:18,700 --> 00:15:22,480
the users but they made life more

00:15:19,990 --> 00:15:23,800
difficult for themselves because it

00:15:22,480 --> 00:15:25,300
really is a pain to deal with all this

00:15:23,800 --> 00:15:27,550
so a number of them have actually

00:15:25,300 --> 00:15:29,410
committed at least in private to working

00:15:27,550 --> 00:15:31,600
more closely with with the mainline and

00:15:29,410 --> 00:15:34,480
with upstream and reducing that Delta

00:15:31,600 --> 00:15:36,910
the in the kernels of they ship this is

00:15:34,480 --> 00:15:38,500
gonna take years to play out but I think

00:15:36,910 --> 00:15:40,720
the end result is going to be a whole

00:15:38,500 --> 00:15:42,490
lot better for for everybody involved

00:15:40,720 --> 00:15:43,990
so just to finish this out if you're

00:15:42,490 --> 00:15:45,190
working in the embedded area I think

00:15:43,990 --> 00:15:48,790
there might be a couple people in this

00:15:45,190 --> 00:15:51,329
area doing them work upstream don't dump

00:15:48,790 --> 00:15:54,250
drag all this edit recode with you and

00:15:51,329 --> 00:15:55,870
News mainline released long-term stable

00:15:54,250 --> 00:15:57,670
kernels to the greatest extent you that

00:15:55,870 --> 00:16:03,250
you can't and we'll all be better off

00:15:57,670 --> 00:16:04,839
for it meanwhile there's a whole lot of

00:16:03,250 --> 00:16:06,459
new technologies going into the kernel

00:16:04,839 --> 00:16:08,079
of course with all these changes I don't

00:16:06,459 --> 00:16:09,640
have time really to even mention them

00:16:08,079 --> 00:16:11,140
all much let's talk about them there's

00:16:09,640 --> 00:16:13,570
one they wanted to talk about because I

00:16:11,140 --> 00:16:15,910
think it's gonna affect a lot of us over

00:16:13,570 --> 00:16:18,459
time and that's thing called BPF or the

00:16:15,910 --> 00:16:21,940
berkeley packet filter because there's a

00:16:18,459 --> 00:16:24,940
lot happening here BPF is at the lowest

00:16:21,940 --> 00:16:26,680
level a simple virtual machine that runs

00:16:24,940 --> 00:16:28,390
in the kernel it's got a simple

00:16:26,680 --> 00:16:30,459
processor model registers various

00:16:28,390 --> 00:16:32,110
operations that it can perform the idea

00:16:30,459 --> 00:16:33,769
being that you write a program in this

00:16:32,110 --> 00:16:35,839
particular assembly language is under

00:16:33,769 --> 00:16:38,209
stood by this virtual machine you loaded

00:16:35,839 --> 00:16:41,389
into the kernel and it actually gets run

00:16:38,209 --> 00:16:43,579
in kernel space by the kernel this may

00:16:41,389 --> 00:16:46,369
seem like a radical idea but it's really

00:16:43,579 --> 00:16:48,019
just one of many in the kernel now we

00:16:46,369 --> 00:16:50,209
have things like the a CPI interpreter

00:16:48,019 --> 00:16:52,339
the classic BPF engine which is still

00:16:50,209 --> 00:16:54,410
there still used for a couple things go

00:16:52,339 --> 00:16:56,420
away eventually and the various

00:16:54,410 --> 00:16:57,559
firewalling mechanisms in the network I

00:16:56,420 --> 00:16:59,149
believe they have five of them at the

00:16:57,559 --> 00:17:01,489
moment are all virtual machines as well

00:16:59,149 --> 00:17:03,739
in various types and forms so a virtual

00:17:01,489 --> 00:17:07,549
machine is nothing special or new in the

00:17:03,739 --> 00:17:08,809
kernel they are they abound but there

00:17:07,549 --> 00:17:10,939
are some things that are different about

00:17:08,809 --> 00:17:15,140
the the current extended BPF work this

00:17:10,939 --> 00:17:17,029
is going on right it has been designed

00:17:15,140 --> 00:17:19,039
from the outset to be easy to just in

00:17:17,029 --> 00:17:20,600
time compile into native code so you

00:17:19,039 --> 00:17:22,419
upload this program it turns into

00:17:20,600 --> 00:17:25,189
dynamic code it runs very quickly

00:17:22,419 --> 00:17:27,319
there's an extensive verifier built into

00:17:25,189 --> 00:17:29,210
it to ensure that any program given to

00:17:27,319 --> 00:17:31,100
the kernel is safe for the kernel to run

00:17:29,210 --> 00:17:32,990
make sure it doesn't access memory it

00:17:31,100 --> 00:17:35,149
should access doesn't leak memory to

00:17:32,990 --> 00:17:37,760
user space doesn't go into infinite

00:17:35,149 --> 00:17:39,590
loops lots of things like that as the

00:17:37,760 --> 00:17:41,389
map data structure for communication

00:17:39,590 --> 00:17:44,210
with the kernel with user space the

00:17:41,389 --> 00:17:46,880
ability to call functions in the kernel

00:17:44,210 --> 00:17:48,919
itself to obtain kernel functionality

00:17:46,880 --> 00:17:50,630
and extensive support in the tool chain

00:17:48,919 --> 00:17:52,639
you can write programs and see and

00:17:50,630 --> 00:17:54,200
compile them to BPF with the LLVM

00:17:52,639 --> 00:17:56,360
compiler you don't actually have to

00:17:54,200 --> 00:17:57,980
write in the BPF virtual machine there's

00:17:56,360 --> 00:18:00,320
a whole Python based development

00:17:57,980 --> 00:18:02,240
structure around that for for writing

00:18:00,320 --> 00:18:03,610
programs that have a BPF component it

00:18:02,240 --> 00:18:06,350
makes it all really pretty easy

00:18:03,610 --> 00:18:08,929
and as a result BPF is showing up in a

00:18:06,350 --> 00:18:12,740
lot of places think he'll be expressed

00:18:08,929 --> 00:18:14,240
data path or xdp is a set of BPF hooks

00:18:12,740 --> 00:18:16,490
in the networking stack that are

00:18:14,240 --> 00:18:18,529
designed to allow packet processing

00:18:16,490 --> 00:18:20,990
decisions to be done very quickly under

00:18:18,529 --> 00:18:24,669
user customization by the uploading of a

00:18:20,990 --> 00:18:26,750
BPF program so this is a response to the

00:18:24,669 --> 00:18:29,029
performance concerns that have driven a

00:18:26,750 --> 00:18:30,860
lot of users to use their space

00:18:29,029 --> 00:18:32,690
networking stacks and things like that

00:18:30,860 --> 00:18:34,639
and it seems to be working bringing some

00:18:32,690 --> 00:18:36,470
of those people back to using the actual

00:18:34,639 --> 00:18:39,710
in kernel networking stack which is a

00:18:36,470 --> 00:18:42,770
good thing BP filter is yet another

00:18:39,710 --> 00:18:44,450
firewalling module built around BPF

00:18:42,770 --> 00:18:46,190
looks like it has a good chance of

00:18:44,450 --> 00:18:47,419
eventually taking over pretty much all

00:18:46,190 --> 00:18:47,870
of the firewalling duties with an

00:18:47,419 --> 00:18:51,049
eternal

00:18:47,870 --> 00:18:53,090
secure computing uses classic BPF now is

00:18:51,049 --> 00:18:55,429
be work is being done to update that to

00:18:53,090 --> 00:18:56,840
the extended BPF engine and there's a

00:18:55,429 --> 00:19:00,440
huge amount of work that has been done

00:18:56,840 --> 00:19:02,150
around tracing and using BPF programs

00:19:00,440 --> 00:19:04,970
for selection of tracing events data

00:19:02,150 --> 00:19:06,770
aggregation things like that the result

00:19:04,970 --> 00:19:08,659
of this if you go and you look up the

00:19:06,770 --> 00:19:10,220
BPF compiler collection and the tools

00:19:08,659 --> 00:19:12,529
associated with it we now have hundreds

00:19:10,220 --> 00:19:14,059
of tools for looking inside the kernel

00:19:12,529 --> 00:19:15,770
and understanding what's going on deep

00:19:14,059 --> 00:19:18,289
within the kernel within a running

00:19:15,770 --> 00:19:19,539
production level kernel then we never

00:19:18,289 --> 00:19:21,260
had before we have a level of

00:19:19,539 --> 00:19:22,309
introspection that we didn't have if you

00:19:21,260 --> 00:19:23,990
haven't looked at those tools you should

00:19:22,309 --> 00:19:26,630
there's a lot of interesting stuff

00:19:23,990 --> 00:19:27,620
happening there and BPF i think it's

00:19:26,630 --> 00:19:30,559
going to show up in a lot of other

00:19:27,620 --> 00:19:33,950
places as well we may be heading towards

00:19:30,559 --> 00:19:35,570
a situation where when new functionality

00:19:33,950 --> 00:19:38,110
is added to the kernel especially if it

00:19:35,570 --> 00:19:40,039
has highly performance critical

00:19:38,110 --> 00:19:42,200
characteristics or needs certain kinds

00:19:40,039 --> 00:19:45,289
of customization this functionality may

00:19:42,200 --> 00:19:47,630
be provided as something that you access

00:19:45,289 --> 00:19:50,299
by way of a BPF program not by way of a

00:19:47,630 --> 00:19:51,409
standard system call and so you end up

00:19:50,299 --> 00:19:52,850
having to use these beep you have

00:19:51,409 --> 00:19:58,630
components to get it to work the way you

00:19:52,850 --> 00:20:00,740
want we come from a standard UNIX

00:19:58,630 --> 00:20:02,570
mindset where C is our system

00:20:00,740 --> 00:20:04,399
programming language this is a little

00:20:02,570 --> 00:20:06,649
bit hyperbolic but we may get to a point

00:20:04,399 --> 00:20:07,970
where it's access to do a lot of

00:20:06,649 --> 00:20:10,159
interesting things with the kernel in

00:20:07,970 --> 00:20:12,020
the future we may end up using BPF

00:20:10,159 --> 00:20:14,179
components for four pieces of that I

00:20:12,020 --> 00:20:16,279
think this is I think it's a good thing

00:20:14,179 --> 00:20:18,799
and the it's going to give us a level of

00:20:16,279 --> 00:20:20,990
performance and and flexibility that we

00:20:18,799 --> 00:20:22,880
haven't had until now but it is going to

00:20:20,990 --> 00:20:26,840
be a change it's an interesting thing to

00:20:22,880 --> 00:20:28,370
watch so we may add new stuff to the

00:20:26,840 --> 00:20:30,770
kernel all the time there kernel grows

00:20:28,370 --> 00:20:34,190
and grows and grows we're not so good at

00:20:30,770 --> 00:20:36,169
taking stuff out of it for various

00:20:34,190 --> 00:20:39,140
reasons but as arne bergman just said

00:20:36,169 --> 00:20:41,210
main reason simply is that this stuff

00:20:39,140 --> 00:20:44,059
that nobody cares about nobody cares

00:20:41,210 --> 00:20:46,399
about and so it's hard first identify

00:20:44,059 --> 00:20:48,529
but Arne doesn't care about such things

00:20:46,399 --> 00:20:50,570
and he decided to look and see if there

00:20:48,529 --> 00:20:51,890
may be a couple of architectures that we

00:20:50,570 --> 00:20:55,279
could get rid of because they weren't

00:20:51,890 --> 00:20:59,000
being used anymore he found eight of

00:20:55,279 --> 00:21:00,990
them so the current plans are to remove

00:20:59,000 --> 00:21:03,510
eight architectures from the

00:21:00,990 --> 00:21:05,040
and 4.17 that's quite a few that's

00:21:03,510 --> 00:21:06,360
something like about a quarter of the

00:21:05,040 --> 00:21:09,020
number of supported architectures that

00:21:06,360 --> 00:21:12,450
we have all of these are pretty much

00:21:09,020 --> 00:21:14,910
single vendor SOC designs that the

00:21:12,450 --> 00:21:17,400
vendors decided that it was cheaper just

00:21:14,910 --> 00:21:19,590
to go with with the more common

00:21:17,400 --> 00:21:20,880
commercial designs whatever I looked at

00:21:19,590 --> 00:21:22,110
the patches this morning this is the

00:21:20,880 --> 00:21:24,150
better part of five hundred thousand

00:21:22,110 --> 00:21:26,610
lines of code they will go out of the

00:21:24,150 --> 00:21:30,630
kernel and in for that 17 that's a good

00:21:26,610 --> 00:21:32,400
thing the history of the kernel is such

00:21:30,630 --> 00:21:34,050
that only two releases have ever been

00:21:32,400 --> 00:21:36,450
smaller than their predecessors in terms

00:21:34,050 --> 00:21:39,330
of lines of code but I believe 4.17

00:21:36,450 --> 00:21:40,980
might be be the third one although if we

00:21:39,330 --> 00:21:42,840
can have someone come along with another

00:21:40,980 --> 00:21:44,640
hundred thousand lines of GPU register

00:21:42,840 --> 00:21:48,480
definitions or something we might yet um

00:21:44,640 --> 00:21:50,130
blow that but it could happen while

00:21:48,480 --> 00:21:52,350
we're on the topic of old stuff if you

00:21:50,130 --> 00:21:53,970
look at the documentation it says that

00:21:52,350 --> 00:21:55,530
if you're building the kernel you need a

00:21:53,970 --> 00:21:58,640
version of the compiler that's at least

00:21:55,530 --> 00:22:00,929
3.2 the documentation is lying to you

00:21:58,640 --> 00:22:03,260
the docs maintainer has been sleeping on

00:22:00,929 --> 00:22:03,260
the job again

00:22:03,710 --> 00:22:08,520
there really is known compiler that

00:22:06,470 --> 00:22:10,050
anybody's made working on current

00:22:08,520 --> 00:22:12,120
kernels is 4.1 and you have to work

00:22:10,050 --> 00:22:13,320
pretty hard to do that I think that

00:22:12,120 --> 00:22:14,940
we're gonna see in the very near future

00:22:13,320 --> 00:22:16,290
it will be documented that if you want

00:22:14,940 --> 00:22:18,270
to build the kernel you need at least

00:22:16,290 --> 00:22:20,370
4.6 and maybe something a little bit

00:22:18,270 --> 00:22:22,020
newer than that to do the job so if

00:22:20,370 --> 00:22:23,280
you're building the kernel with with

00:22:22,020 --> 00:22:25,230
ancient compilers you're going to want

00:22:23,280 --> 00:22:28,140
to look at moving forward on that we're

00:22:25,230 --> 00:22:30,990
finally going to update that and I want

00:22:28,140 --> 00:22:33,120
to just close out with on the topic of

00:22:30,990 --> 00:22:35,100
disruptive systems something that I've

00:22:33,120 --> 00:22:37,860
see happening here Linux was wants a

00:22:35,100 --> 00:22:39,750
classic disruptive system as it's fine

00:22:37,860 --> 00:22:41,880
it was this tiny little toy system

00:22:39,750 --> 00:22:43,770
didn't do a whole lot it wasn't taken

00:22:41,880 --> 00:22:45,750
seriously by a whole lot of people but

00:22:43,770 --> 00:22:46,920
then it grew and it is that should

00:22:45,750 --> 00:22:49,080
displaced a whole bunch of big

00:22:46,920 --> 00:22:51,510
well-established legacy players in the

00:22:49,080 --> 00:22:56,520
market and is now dominant as we heard

00:22:51,510 --> 00:22:59,640
before over much of the industry Linux

00:22:56,520 --> 00:23:01,440
is kind of that legacy system now we've

00:22:59,640 --> 00:23:04,080
been around for a long time as an old

00:23:01,440 --> 00:23:07,170
and big project has a lot of a lot of

00:23:04,080 --> 00:23:09,390
momentum and a lot of inertia it has

00:23:07,170 --> 00:23:12,390
large resource requirements that make it

00:23:09,390 --> 00:23:12,880
somewhat unsuitable for the lot of the

00:23:12,390 --> 00:23:15,010
smaller

00:23:12,880 --> 00:23:17,110
deployments that people want to do it

00:23:15,010 --> 00:23:19,090
has large and obstreperous development

00:23:17,110 --> 00:23:21,220
community that can often make you hard

00:23:19,090 --> 00:23:22,750
to get changes into the kernel can make

00:23:21,220 --> 00:23:24,090
it hard to make the kernel do what you

00:23:22,750 --> 00:23:26,200
want it to do

00:23:24,090 --> 00:23:28,720
you look at the rate of change of the

00:23:26,200 --> 00:23:30,190
kernel you say ok we move very fast but

00:23:28,720 --> 00:23:31,690
I think the way that the best describes

00:23:30,190 --> 00:23:34,030
this is that our bandwidth is indeed

00:23:31,690 --> 00:23:36,340
very high but also our latency can be

00:23:34,030 --> 00:23:38,470
very high it can take a long time to get

00:23:36,340 --> 00:23:41,560
get stuff into the kernel and this this

00:23:38,470 --> 00:23:42,910
is bothersome to a lot of people in the

00:23:41,560 --> 00:23:45,430
industry especially in this part of the

00:23:42,910 --> 00:23:47,230
industry that needs often to move faster

00:23:45,430 --> 00:23:49,240
than that and not everybody likes the

00:23:47,230 --> 00:23:50,740
GPL license of course is associated with

00:23:49,240 --> 00:23:55,480
the kernel I think that's short-sighted

00:23:50,740 --> 00:23:57,970
but but people don't ask me on that so

00:23:55,480 --> 00:23:59,860
if you look at the program for this

00:23:57,970 --> 00:24:01,900
conference you'll see a lot of talks

00:23:59,860 --> 00:24:03,840
about a system called Zephyr for example

00:24:01,900 --> 00:24:06,820
which is a small lightweight

00:24:03,840 --> 00:24:09,250
permissively license system the people

00:24:06,820 --> 00:24:11,950
are you looking at using instead of of

00:24:09,250 --> 00:24:14,320
Linux in a lot of situations equally

00:24:11,950 --> 00:24:16,150
notable in its absence from this

00:24:14,320 --> 00:24:17,950
particular conference this is a system

00:24:16,150 --> 00:24:19,960
called fuchsia which is a small

00:24:17,950 --> 00:24:21,730
permissive license kernel being

00:24:19,960 --> 00:24:23,860
developed at Google this has been mooted

00:24:21,730 --> 00:24:25,360
as a replacement for Linux on Android

00:24:23,860 --> 00:24:27,040
systems which would be a pretty

00:24:25,360 --> 00:24:29,380
significant change to our community if

00:24:27,040 --> 00:24:31,000
this were to happen there are a lot of

00:24:29,380 --> 00:24:32,350
other things that are going on as well

00:24:31,000 --> 00:24:36,490
we hear a lot about these other systems

00:24:32,350 --> 00:24:38,020
out there and you know so be it this is

00:24:36,490 --> 00:24:40,180
free software this is all good stuff

00:24:38,020 --> 00:24:41,740
that is happening in a very real way but

00:24:40,180 --> 00:24:44,170
I would like to make the point that we

00:24:41,740 --> 00:24:46,630
have all benefited hugely by having an

00:24:44,170 --> 00:24:49,600
operating system in a kernel that is one

00:24:46,630 --> 00:24:51,940
not dominated by any one company and two

00:24:49,600 --> 00:24:53,890
that has a copyleft license that has

00:24:51,940 --> 00:24:56,260
helped us to build a huge community

00:24:53,890 --> 00:24:58,120
where everybody works towards the good

00:24:56,260 --> 00:24:59,830
of everybody else and we end up with a

00:24:58,120 --> 00:25:02,320
system that suits the needs for

00:24:59,830 --> 00:25:03,970
everybody else a lot of these are the

00:25:02,320 --> 00:25:06,370
systems that are coming up don't

00:25:03,970 --> 00:25:09,280
necessarily meet either of these

00:25:06,370 --> 00:25:11,380
particular criteria here and we're often

00:25:09,280 --> 00:25:13,450
designed to do so and maybe that's our

00:25:11,380 --> 00:25:15,790
future but I think we should be asking

00:25:13,450 --> 00:25:19,240
ourselves do we want to move away from

00:25:15,790 --> 00:25:22,030
this nice situation with our shared

00:25:19,240 --> 00:25:23,920
copyleft license kernel it said the

00:25:22,030 --> 00:25:24,340
future that we want and if it's not what

00:25:23,920 --> 00:25:24,790
we want

00:25:24,340 --> 00:25:26,650
what can we

00:25:24,790 --> 00:25:28,180
do to prevent it I think the only way

00:25:26,650 --> 00:25:30,190
that we can prevent that is to continue

00:25:28,180 --> 00:25:34,270
to work to make Linux so compelling and

00:25:30,190 --> 00:25:36,520
so widely usable that it's the automatic

00:25:34,270 --> 00:25:38,530
choice for people to use if we don't do

00:25:36,520 --> 00:25:41,440
that I don't think that we can count on

00:25:38,530 --> 00:25:44,950
the continued dominance of Linux and in

00:25:41,440 --> 00:25:46,240
much of these areas but I think that we

00:25:44,950 --> 00:25:48,220
shouldn't give up on that quite yet

00:25:46,240 --> 00:25:49,510
and with that that's pretty much all the

00:25:48,220 --> 00:25:50,560
time that I have and I thank you all

00:25:49,510 --> 00:25:56,050
very much

00:25:50,560 --> 00:25:56,050

YouTube URL: https://www.youtube.com/watch?v=AstUJFdzZTU


