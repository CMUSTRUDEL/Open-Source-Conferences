Title: MySQL Troubleshooting and Performance Analysis - Kajiyama San
Publication date: 2019-12-17
Playlist: Open Tech Summit Shenzhen 2019 - Database
Description: 
	Kajiyama San - Sales Consulting Senior Manager at MySQL/Oracle (Japan)
Captions: 
	00:00:00,030 --> 00:00:04,830
so we are getting to the next sections

00:00:02,550 --> 00:00:07,319
kagiyama so this is about the

00:00:04,830 --> 00:00:10,320
performance tuning and also how we

00:00:07,319 --> 00:00:13,710
trouble shoot the way master is doing so

00:00:10,320 --> 00:00:15,900
MySQL can be heavy duty so how do we see

00:00:13,710 --> 00:00:18,539
the role is doing work and how we

00:00:15,900 --> 00:00:22,140
trouble how we make it better so this is

00:00:18,539 --> 00:00:29,400
the talk okay stands are kagiyama

00:00:22,140 --> 00:00:32,279
okay Prakash all right hi everyone my

00:00:29,400 --> 00:00:36,540
name is Kay Kazama I'm sorting team

00:00:32,279 --> 00:00:38,520
leader of MySQL oh so much today I'm

00:00:36,540 --> 00:00:40,290
introducing two topics starting with

00:00:38,520 --> 00:00:42,660
troubleshooting well it's more like you

00:00:40,290 --> 00:00:44,789
know how do you get information from

00:00:42,660 --> 00:00:47,370
MySQL which is useful for

00:00:44,789 --> 00:00:49,620
troubleshooting I don't go into too much

00:00:47,370 --> 00:00:52,410
on the actual troubleshooting itself but

00:00:49,620 --> 00:00:55,140
how you can get the information and I

00:00:52,410 --> 00:01:00,989
rather go spend a bit more time on the

00:00:55,140 --> 00:01:02,550
performance tuning so the baseline of

00:01:00,989 --> 00:01:06,600
the troubleshooting where you got a stir

00:01:02,550 --> 00:01:09,360
to us is always you have to find any

00:01:06,600 --> 00:01:13,619
issues inside of a MySQL and it's mostly

00:01:09,360 --> 00:01:15,750
coming from low farms and what to do or

00:01:13,619 --> 00:01:18,150
most importantly protect your data

00:01:15,750 --> 00:01:20,100
protect your environment application up

00:01:18,150 --> 00:01:23,670
and running so that's kind of ultimate

00:01:20,100 --> 00:01:26,640
goal oh you gotta do the troubleshooting

00:01:23,670 --> 00:01:33,240
but to avoid that kind of a situation

00:01:26,640 --> 00:01:34,740
Oh a pointer you must have a redundancy

00:01:33,240 --> 00:01:37,860
over your environment in which I've

00:01:34,740 --> 00:01:39,350
already explained using MySQL in your DB

00:01:37,860 --> 00:01:41,880
cluster for the high availability

00:01:39,350 --> 00:01:44,189
configuration in case of failure of

00:01:41,880 --> 00:01:46,829
single no just to remove it and restful

00:01:44,189 --> 00:01:49,439
service will take care of application so

00:01:46,829 --> 00:01:51,810
that's the beauty of the MySQL all in

00:01:49,439 --> 00:01:54,570
ODB cluster or which comes with MySQL

00:01:51,810 --> 00:01:57,270
server all my scripts or a twenty low

00:01:54,570 --> 00:01:59,939
with a new major version it nor even if

00:01:57,270 --> 00:02:03,060
you're using one major version older

00:01:59,939 --> 00:02:08,580
Oscar 5.7 comes with in ODB cluster

00:02:03,060 --> 00:02:10,560
blogging as well and then you gotta look

00:02:08,580 --> 00:02:12,569
into the details or what's happening

00:02:10,560 --> 00:02:13,940
inside of MySQL then there are many

00:02:12,569 --> 00:02:17,520
places you can look in

00:02:13,940 --> 00:02:21,810
Ruta coals but a first ball where you go

00:02:17,520 --> 00:02:24,690
is logo fires especially the analog of

00:02:21,810 --> 00:02:26,760
MySQL which gives you sir old details of

00:02:24,690 --> 00:02:30,390
the inners what's happening is a mask

00:02:26,760 --> 00:02:33,270
you well and it's more like a sari the

00:02:30,390 --> 00:02:35,130
server level Oh Ehlers it doesn't give

00:02:33,270 --> 00:02:37,020
you the application level error that

00:02:35,130 --> 00:02:39,480
shouldn't be coming back your

00:02:37,020 --> 00:02:43,380
application science application team got

00:02:39,480 --> 00:02:45,720
looking to the exceptions LMS a park to

00:02:43,380 --> 00:02:49,230
application again this LR dog is

00:02:45,720 --> 00:02:52,920
Harborside LR only and a one work that

00:02:49,230 --> 00:02:56,070
log you must turn on by default is off

00:02:52,920 --> 00:02:59,370
but I really strongly suggest is a local

00:02:56,070 --> 00:03:01,920
Logan a file name the slow query log you

00:02:59,370 --> 00:03:05,040
can turn on this log by by the parameter

00:03:01,920 --> 00:03:07,560
slow ok log and you can specify the file

00:03:05,040 --> 00:03:09,810
name this locally log

00:03:07,560 --> 00:03:13,160
name says it will love every single

00:03:09,810 --> 00:03:15,540
select a sequel statements which is slow

00:03:13,160 --> 00:03:17,970
then how slow is slow

00:03:15,540 --> 00:03:21,660
it depends right so we can change the

00:03:17,970 --> 00:03:24,570
threshold by default in if your query is

00:03:21,660 --> 00:03:26,540
running more than 10 seconds your curry

00:03:24,570 --> 00:03:29,370
will be written into the logo file and

00:03:26,540 --> 00:03:33,620
inside of a local dog it tells you

00:03:29,370 --> 00:03:36,660
actual query execution time as well as

00:03:33,620 --> 00:03:39,239
local wait time the one uncommon

00:03:36,660 --> 00:03:41,519
scenario especially you try to update

00:03:39,239 --> 00:03:43,920
something but someone else is also

00:03:41,519 --> 00:03:46,590
updating the same record that will come

00:03:43,920 --> 00:03:49,049
correct and the because of the mascot

00:03:46,590 --> 00:03:51,260
has a nice local mechanism one

00:03:49,049 --> 00:03:53,040
transaction is changing record and the

00:03:51,260 --> 00:03:56,430
transaction tried to change the same

00:03:53,040 --> 00:03:57,269
record might be or can be waiting for

00:03:56,430 --> 00:03:59,880
someone else

00:03:57,269 --> 00:04:02,700
so all throw get it all also tells you

00:03:59,880 --> 00:04:04,350
because other guy is walking and doing

00:04:02,700 --> 00:04:06,209
something you don't know the other part

00:04:04,350 --> 00:04:08,880
of who is actually doing but you can

00:04:06,209 --> 00:04:10,500
know from the other point and how long

00:04:08,880 --> 00:04:13,140
at least this log file tells you how

00:04:10,500 --> 00:04:16,979
long this query was waiting for someone

00:04:13,140 --> 00:04:21,900
else there's another log named a dinner

00:04:16,979 --> 00:04:24,360
log usually we do not suggest recommend

00:04:21,900 --> 00:04:27,930
you to turn on general because general

00:04:24,360 --> 00:04:29,639
Rob logs everything every single

00:04:27,930 --> 00:04:32,130
and every single - because I was

00:04:29,639 --> 00:04:34,410
internal behavior will be written into

00:04:32,130 --> 00:04:36,240
the general log file so in the

00:04:34,410 --> 00:04:38,759
production environment especially summer

00:04:36,240 --> 00:04:42,870
when summer was busy this log file if

00:04:38,759 --> 00:04:45,720
you turn on it'll be huge but when you

00:04:42,870 --> 00:04:48,449
need to debug through a behavior or

00:04:45,720 --> 00:04:51,870
MySQL especially in test environment

00:04:48,449 --> 00:04:54,150
you turn on general log and running

00:04:51,870 --> 00:04:56,960
application one by one and you can see

00:04:54,150 --> 00:04:59,150
what's going on inside of MySQL and

00:04:56,960 --> 00:05:01,560
sometimes there can be the unexpected

00:04:59,150 --> 00:05:04,500
behavior maybe application is running

00:05:01,560 --> 00:05:06,720
query so many times which is if it's not

00:05:04,500 --> 00:05:11,970
expected yep time to change the plea

00:05:06,720 --> 00:05:13,169
change your application and skipping

00:05:11,970 --> 00:05:16,710
next topic because this is referring

00:05:13,169 --> 00:05:19,440
next slide of course it's important to

00:05:16,710 --> 00:05:22,919
know the environment operating system

00:05:19,440 --> 00:05:25,410
environment first before going to the

00:05:22,919 --> 00:05:27,360
troubleshooting because one of the

00:05:25,410 --> 00:05:31,080
common scenario or kind of mistake we

00:05:27,360 --> 00:05:33,870
are saying is some ladies may be so slow

00:05:31,080 --> 00:05:36,270
and then application team is looking

00:05:33,870 --> 00:05:38,820
into ok let's try to choose sequel

00:05:36,270 --> 00:05:40,830
statements maybe try to our index or

00:05:38,820 --> 00:05:45,900
removing index modifying a part of

00:05:40,830 --> 00:05:49,020
sequel statements but if by mistake with

00:05:45,900 --> 00:05:53,849
some reason that server is consuming a

00:05:49,020 --> 00:05:56,130
lot of swap maybe you can find the tools

00:05:53,849 --> 00:05:59,099
information in the i/o starter VM start

00:05:56,130 --> 00:06:00,750
it's gonna be I'm studying over top you

00:05:59,099 --> 00:06:03,830
can see server is the you know doing the

00:06:00,750 --> 00:06:06,810
page out of Asia in course well swap

00:06:03,830 --> 00:06:10,229
swap is the one the slowest the behavior

00:06:06,810 --> 00:06:13,320
inside of operating system so even if

00:06:10,229 --> 00:06:17,820
you try to choose Seco statements if

00:06:13,320 --> 00:06:19,729
server memory usage was not optimal you

00:06:17,820 --> 00:06:23,159
really may be bit faster but still

00:06:19,729 --> 00:06:25,530
really slow because of a swap so it's

00:06:23,159 --> 00:06:28,849
really important to students broader

00:06:25,530 --> 00:06:31,800
scope and targeting the details

00:06:28,849 --> 00:06:37,050
so there's checking in the OS especially

00:06:31,800 --> 00:06:41,310
a optional tools like a VM start or top

00:06:37,050 --> 00:06:44,490
to see the CPU utilization memory usage

00:06:41,310 --> 00:06:47,090
oh and one more thing you gotta be

00:06:44,490 --> 00:06:49,889
careful is network performance

00:06:47,090 --> 00:06:52,740
the world isn't one of my experience

00:06:49,889 --> 00:06:54,990
experience of a troubleshooting at the

00:06:52,740 --> 00:06:57,810
one customer customers complaining

00:06:54,990 --> 00:06:59,700
Moscow is so slow in response especially

00:06:57,810 --> 00:07:02,130
for the big sector sentiment on

00:06:59,700 --> 00:07:03,600
Sacramento where's big results then I

00:07:02,130 --> 00:07:06,240
looked into the environment CPU

00:07:03,600 --> 00:07:09,300
utilization not so high this guy oh not

00:07:06,240 --> 00:07:12,030
so high they have a really good disk but

00:07:09,300 --> 00:07:15,480
there was some reason the NIT network

00:07:12,030 --> 00:07:20,280
engineer you know by mistake configure

00:07:15,480 --> 00:07:24,270
10 gigabyte 1 GB Ethernet work as a 100

00:07:20,280 --> 00:07:28,410
mega BPS and not free to practice even

00:07:24,270 --> 00:07:31,320
it's kind of odd why he did it over a

00:07:28,410 --> 00:07:33,450
non-integer but anyways without checking

00:07:31,320 --> 00:07:35,310
network performance you can see if i

00:07:33,450 --> 00:07:38,550
could achieve my school server parameter

00:07:35,310 --> 00:07:40,650
or perfect tree and the query is truly

00:07:38,550 --> 00:07:44,010
optimal if network performance so too

00:07:40,650 --> 00:07:46,860
slow Luers dataset cannot travel back

00:07:44,010 --> 00:07:49,380
your application immediately so then you

00:07:46,860 --> 00:07:51,560
gotta check like whenever uses a

00:07:49,380 --> 00:07:55,250
troubleshooting or performance tuning

00:07:51,560 --> 00:07:58,950
you know really important for you to

00:07:55,250 --> 00:08:01,200
know ask yourself is this isn't really

00:07:58,950 --> 00:08:03,419
that root cause am I really looking at

00:08:01,200 --> 00:08:06,300
the right thing you gonna have the

00:08:03,419 --> 00:08:10,640
bigger scope bigger view of the entire

00:08:06,300 --> 00:08:14,039
things first and go into the details

00:08:10,640 --> 00:08:17,700
okay then one more thing regarding to

00:08:14,039 --> 00:08:20,430
the performance and troubleshooting I

00:08:17,700 --> 00:08:23,789
suggest this website name of the Dmitry

00:08:20,430 --> 00:08:26,400
Dmitry Cade of the free throw this is a

00:08:23,789 --> 00:08:28,680
broader website of our performance

00:08:26,400 --> 00:08:31,740
architect my scale has the performance

00:08:28,680 --> 00:08:34,560
architect was doing the benchmark only

00:08:31,740 --> 00:08:36,270
for his life he's just doing benchmark

00:08:34,560 --> 00:08:39,360
benchmark arrangement every single day

00:08:36,270 --> 00:08:41,669
but he also has a nice tools or this

00:08:39,360 --> 00:08:44,600
presentation crystal a brief overview of

00:08:41,669 --> 00:08:47,070
Darwin and lastly if you have a large

00:08:44,600 --> 00:08:49,650
implementation it's like commercial the

00:08:47,070 --> 00:08:51,660
- Kaza our enterprise monitoring to

00:08:49,650 --> 00:08:54,320
enterprise monitoring but today's not

00:08:51,660 --> 00:08:56,270
the main focus of

00:08:54,320 --> 00:08:58,760
in my presentation I go to rather go to

00:08:56,270 --> 00:09:02,590
the features technologies available

00:08:58,760 --> 00:09:02,590
applicable to the community Asia as well

00:09:02,650 --> 00:09:09,350
MySQL or does come with the schema name

00:09:06,230 --> 00:09:11,210
de sisse schema it's it was interesting

00:09:09,350 --> 00:09:12,980
in the earlier version of mask UL but

00:09:11,210 --> 00:09:16,940
now by default it's available but if you

00:09:12,980 --> 00:09:19,610
were using mysql 5.6 you must install or

00:09:16,940 --> 00:09:22,370
sis kima the good news is I Ballmer

00:09:19,610 --> 00:09:25,010
wrote a nice blog to have the sis kima

00:09:22,370 --> 00:09:28,430
for the mysql 5.6 newer version don't

00:09:25,010 --> 00:09:37,700
worry it's already there then one of the

00:09:28,430 --> 00:09:39,740
things I need to highlight here is this

00:09:37,700 --> 00:09:42,280
command in the system it's an actual

00:09:39,740 --> 00:09:46,160
routine saw the routine name the

00:09:42,280 --> 00:09:50,000
diagnostic or this command will help you

00:09:46,160 --> 00:09:53,570
to get all information you need to see

00:09:50,000 --> 00:09:55,250
inside of MySQL if you have experience

00:09:53,570 --> 00:09:58,640
using MySQL there's a commander named

00:09:55,250 --> 00:10:01,040
the show global status to know summize

00:09:58,640 --> 00:10:04,550
the server's internal behavior or really

00:10:01,040 --> 00:10:06,560
basic command state us it tells you the

00:10:04,550 --> 00:10:11,050
really basic status of the MySQL server

00:10:06,560 --> 00:10:14,510
like a version number character sad or

00:10:11,050 --> 00:10:16,820
much more details it's a variable single

00:10:14,510 --> 00:10:21,230
command and one more thing is this will

00:10:16,820 --> 00:10:26,750
repeat every 30 seconds to get the

00:10:21,230 --> 00:10:28,220
fetches those studies statistics but to

00:10:26,750 --> 00:10:30,580
use it you gotta turn on the one

00:10:28,220 --> 00:10:34,750
parameter on top of the sis sis dot

00:10:30,580 --> 00:10:39,830
sorry Diagnostics dot alone underscore I

00:10:34,750 --> 00:10:42,890
as cable this is to fetching all

00:10:39,830 --> 00:10:45,800
statistical information to store into

00:10:42,890 --> 00:10:49,100
the cache and you can see all

00:10:45,800 --> 00:10:53,750
information then it's including robot

00:10:49,100 --> 00:10:56,810
variables in the DV status if they do

00:10:53,750 --> 00:10:59,780
the show in so engine you know DV status

00:10:56,810 --> 00:11:01,100
and you can see the inside our energy

00:10:59,780 --> 00:11:04,070
strategy what's going on for the

00:11:01,100 --> 00:11:06,470
transaction log or semaphore and so on

00:11:04,070 --> 00:11:08,060
instead of you know DV this is a regular

00:11:06,470 --> 00:11:10,340
command so OMG

00:11:08,060 --> 00:11:13,400
status but this diagnostic gives you

00:11:10,340 --> 00:11:15,920
everything after single command what

00:11:13,400 --> 00:11:19,010
else replication information you can get

00:11:15,920 --> 00:11:22,060
homes many things inside of a schema

00:11:19,010 --> 00:11:25,340
including the energy of each transaction

00:11:22,060 --> 00:11:28,760
also the process is like a cry and

00:11:25,340 --> 00:11:32,390
connections and they are simply related

00:11:28,760 --> 00:11:34,940
to i/o and the weights inside inside of

00:11:32,390 --> 00:11:39,380
MySQL it's like coming down to a social

00:11:34,940 --> 00:11:42,170
level or masculine and a per table per

00:11:39,380 --> 00:11:47,840
host and so on you can see with this

00:11:42,170 --> 00:11:49,490
command so I guess this just you know so

00:11:47,840 --> 00:11:51,740
there is a really basic information what

00:11:49,490 --> 00:11:56,180
if I have a schema exist how many tables

00:11:51,740 --> 00:11:58,600
how many beers there and saw on there

00:11:56,180 --> 00:12:08,480
are whole a lot of information comes out

00:11:58,600 --> 00:12:14,390
but if you tried in the console out of

00:12:08,480 --> 00:12:16,940
it will be like this it's too much I

00:12:14,390 --> 00:12:22,070
know it too much to see on the screen

00:12:16,940 --> 00:12:26,210
and as I mentioned ya know something

00:12:22,070 --> 00:12:27,830
else something else on the screen is too

00:12:26,210 --> 00:12:30,170
much and I you can you know

00:12:27,830 --> 00:12:32,390
automatically refresh this one to get

00:12:30,170 --> 00:12:35,150
like every 30 seconds or return sack

00:12:32,390 --> 00:12:37,940
whatever but I know it's too much to

00:12:35,150 --> 00:12:44,960
view on the screen so what I suggest is

00:12:37,940 --> 00:12:46,940
in reference module it tells you so this

00:12:44,960 --> 00:12:50,300
is a part of the reference model of this

00:12:46,940 --> 00:12:52,880
diagnostic command rather not only

00:12:50,300 --> 00:12:57,590
executing on a console use a key command

00:12:52,880 --> 00:13:00,280
to specify the output file ok then this

00:12:57,590 --> 00:13:04,790
command will repeat and pushing to the

00:13:00,280 --> 00:13:08,450
pushing to this file and you can read it

00:13:04,790 --> 00:13:11,030
later on was no thanks to edit or

00:13:08,450 --> 00:13:14,480
whatever or if you prefer to analyze

00:13:11,030 --> 00:13:16,790
whether sad or oak whatever six commands

00:13:14,480 --> 00:13:19,000
if you love and you can look into

00:13:16,790 --> 00:13:19,000
details

00:13:24,220 --> 00:13:30,889
so there were lots of a lot out but the

00:13:26,959 --> 00:13:33,050
most importantly versus yeah the most

00:13:30,889 --> 00:13:35,779
important thing you're gonna think about

00:13:33,050 --> 00:13:36,920
or looking to you is of course snapshot

00:13:35,779 --> 00:13:38,899
at the moment

00:13:36,920 --> 00:13:41,629
it's one important thing to you look

00:13:38,899 --> 00:13:46,129
into but one more thing is you compare

00:13:41,629 --> 00:13:48,139
Delta from one output to another maybe

00:13:46,129 --> 00:13:50,990
the difference of the value insider with

00:13:48,139 --> 00:13:54,529
some output different in the entries in

00:13:50,990 --> 00:13:57,800
the same output so then you can know the

00:13:54,529 --> 00:14:01,759
what's happening is the 30 seconds ago

00:13:57,800 --> 00:14:04,699
and now and you can compare what was

00:14:01,759 --> 00:14:07,939
happening during job media so this is

00:14:04,699 --> 00:14:10,129
this must help you to see a lot of

00:14:07,939 --> 00:14:14,560
details of my school server but one more

00:14:10,129 --> 00:14:18,259
tool I need to introduce is this lovely

00:14:14,560 --> 00:14:20,149
MySQL workbench my workbench is a free

00:14:18,259 --> 00:14:24,139
GUI tool it's a free for three free to

00:14:20,149 --> 00:14:26,269
use to know to use all features and I

00:14:24,139 --> 00:14:27,980
already have the pre-configured master

00:14:26,269 --> 00:14:28,459
server connection so I'm a connecting

00:14:27,980 --> 00:14:30,709
the server

00:14:28,459 --> 00:14:33,470
sorry this is not visible to me so let

00:14:30,709 --> 00:14:44,120
me switch to the mirroring you know as a

00:14:33,470 --> 00:14:47,149
screen excuse me just one moment looks

00:14:44,120 --> 00:14:48,230
good alright so there are a couple

00:14:47,149 --> 00:14:51,110
things we can do

00:14:48,230 --> 00:14:53,920
oh yeah like you can type sequel

00:14:51,110 --> 00:14:53,920
statements here

00:14:57,840 --> 00:15:00,940
[Music]

00:15:02,240 --> 00:15:11,160
you can write sequel statements like

00:15:06,780 --> 00:15:13,200
this and of course you can look some LR

00:15:11,160 --> 00:15:15,890
says yes it's not connecting Sagmeister

00:15:13,200 --> 00:15:15,890
server properiy

00:15:25,320 --> 00:15:30,930
okay so oh okay I'm not gonna property

00:15:28,410 --> 00:15:33,870
here we go the next thing is you can

00:15:30,930 --> 00:15:36,389
hubs are really simple but they're kind

00:15:33,870 --> 00:15:40,350
of good enough dashboard for you then

00:15:36,389 --> 00:15:42,120
you may run some benchmark I'm just

00:15:40,350 --> 00:15:44,790
running a mask of slop is a benchmark

00:15:42,120 --> 00:15:48,060
easy benchmark tool it's just very quick

00:15:44,790 --> 00:15:51,839
but now we see some spike in the in

00:15:48,060 --> 00:15:57,120
ODB's disk i/o or sequel statement usage

00:15:51,839 --> 00:15:58,800
and below of this one help you like well

00:15:57,120 --> 00:16:01,819
there are like sixteen selects per

00:15:58,800 --> 00:16:05,399
second in the last benchmark and so on

00:16:01,819 --> 00:16:08,459
so it gives you really really basic view

00:16:05,399 --> 00:16:10,920
of what's happening inside MySQL and one

00:16:08,459 --> 00:16:14,370
more thing you can check is there you

00:16:10,920 --> 00:16:16,560
can see the inside of a CC schema which

00:16:14,370 --> 00:16:18,600
I mentioned which is coming in to

00:16:16,560 --> 00:16:21,360
massacre eight tells you a lot of

00:16:18,600 --> 00:16:23,850
performance statistics so diagnostic

00:16:21,360 --> 00:16:27,810
commands fetches everything after time

00:16:23,850 --> 00:16:30,120
for you but about memory usage is total

00:16:27,810 --> 00:16:31,800
total memory is really small and number

00:16:30,120 --> 00:16:33,839
users have been too small so only like

00:16:31,800 --> 00:16:37,139
two connections but each user so

00:16:33,839 --> 00:16:39,839
consuming this March what else this guy

00:16:37,139 --> 00:16:42,000
ol top file i/o activities report what

00:16:39,839 --> 00:16:44,610
is there's one the response is in your

00:16:42,000 --> 00:16:47,519
device data file and undo logs are also

00:16:44,610 --> 00:16:50,250
bit of busy how about C sequel

00:16:47,519 --> 00:16:51,779
statements ok diagonal sake it usually

00:16:50,250 --> 00:16:53,760
takes a long time because like an H Cody

00:16:51,779 --> 00:16:56,850
sticks it takes a long long time which I

00:16:53,760 --> 00:17:00,569
said like 120 sack in total it's a

00:16:56,850 --> 00:17:03,240
repeat 420 sack and the insert statement

00:17:00,569 --> 00:17:05,809
took longer times and selectees seems

00:17:03,240 --> 00:17:10,620
like by the number of execution time

00:17:05,809 --> 00:17:12,299
total time is right here in you sack and

00:17:10,620 --> 00:17:16,079
you can see it on the screen it's kind

00:17:12,299 --> 00:17:19,819
of simple but internally again this one

00:17:16,079 --> 00:17:19,819
is using so-called OCC scheme

00:17:41,130 --> 00:17:47,570
okay so oh that's the saying all you got

00:17:43,559 --> 00:17:47,570
to do and this is otherwise from our

00:17:47,630 --> 00:17:53,760
performance architect the guy named

00:17:50,010 --> 00:17:56,640
Dmitri so what is it are the best

00:17:53,760 --> 00:18:00,660
practice number one for the performance

00:17:56,640 --> 00:18:03,090
tuning of my SQL is this use your brain

00:18:00,660 --> 00:18:04,380
as otherwise from the our performance

00:18:03,090 --> 00:18:07,440
architect yes you guys think about

00:18:04,380 --> 00:18:10,830
what's going on inside by yourself but

00:18:07,440 --> 00:18:12,690
of course you are you gonna do ooh what

00:18:10,830 --> 00:18:15,840
import a single number two is monitor

00:18:12,690 --> 00:18:18,030
your embodiment and to monitor your

00:18:15,840 --> 00:18:20,220
environment there are all different

00:18:18,030 --> 00:18:24,090
tools I mentioned but one more thing you

00:18:20,220 --> 00:18:27,150
have to remember is the guy he for the

00:18:24,090 --> 00:18:29,460
Hamasaki msql created a tool to monitor

00:18:27,150 --> 00:18:33,330
your environment to create this kind of

00:18:29,460 --> 00:18:35,610
graph and this tool I'll do helps you to

00:18:33,330 --> 00:18:39,030
churn your environment it's like a no

00:18:35,610 --> 00:18:42,570
you have to must always know tune your

00:18:39,030 --> 00:18:45,570
vacation DV itself OS and a hardware

00:18:42,570 --> 00:18:47,970
sometimes raised as well but she knows a

00:18:45,570 --> 00:18:50,130
query a performer the number of

00:18:47,970 --> 00:18:52,950
benchmark tools available for all which

00:18:50,130 --> 00:18:54,990
works with my scuba and our dev team is

00:18:52,950 --> 00:18:57,210
always using tool named assist bench

00:18:54,990 --> 00:19:01,049
that's a standard benchmark for the

00:18:57,210 --> 00:19:03,659
mysqldb team and our benchmarks are

00:19:01,049 --> 00:19:06,780
certain performance architect Dmitri he

00:19:03,659 --> 00:19:11,059
also created a nice statistics tool or

00:19:06,780 --> 00:19:16,200
the monitoring tool named Adam start and

00:19:11,059 --> 00:19:19,070
this deem start um including the set of

00:19:16,200 --> 00:19:23,280
the benchmark said you know you can

00:19:19,070 --> 00:19:24,659
create environment and get tons of

00:19:23,280 --> 00:19:29,159
commands you to setting up the

00:19:24,659 --> 00:19:31,890
environment and it's it's internally

00:19:29,159 --> 00:19:34,980
using masculine inside by the way and

00:19:31,890 --> 00:19:37,950
you can stran all these queries and you

00:19:34,980 --> 00:19:40,650
get the results so these commands are

00:19:37,950 --> 00:19:44,909
you know what details ie suggest you to

00:19:40,650 --> 00:19:45,980
refer his blog again was Dimitri's

00:19:44,909 --> 00:19:48,539
problem there we go

00:19:45,980 --> 00:19:51,900
give me to reek aid of the Freid of the

00:19:48,539 --> 00:19:54,690
Freid slash log slash broke tells you

00:19:51,900 --> 00:19:57,960
tons of Benjamin previous benchmarks of

00:19:54,690 --> 00:20:00,570
QL and tools are available not in the

00:19:57,960 --> 00:20:05,899
blog or the main main page of the thing

00:20:00,570 --> 00:20:05,899
is and you can see a details

00:20:12,410 --> 00:20:18,190
a couple things from his blog or the

00:20:14,930 --> 00:20:18,190
recent benchmark

00:20:24,960 --> 00:20:30,020
yeah so one of one of delta from the

00:20:28,590 --> 00:20:32,520
Moscow five seven and over eight

00:20:30,020 --> 00:20:35,160
read-only benchmark more under more

00:20:32,520 --> 00:20:37,460
users highest Rupert yeah there are some

00:20:35,160 --> 00:20:40,080
more things we need to improve bit and

00:20:37,460 --> 00:20:43,020
this is a reader unread benchmark I

00:20:40,080 --> 00:20:46,320
believe yes it's no five point seven is

00:20:43,020 --> 00:20:49,950
sort of musk eight is way faster than my

00:20:46,320 --> 00:20:52,830
skill eight so own newest word newer

00:20:49,950 --> 00:20:54,660
version is always faster and there are

00:20:52,830 --> 00:21:08,040
lots of things we were working on inside

00:20:54,660 --> 00:21:09,720
of Moscow eight and sorry but a box to

00:21:08,040 --> 00:21:11,250
the Moscow workbench I want to show this

00:21:09,720 --> 00:21:13,620
one in a live demo but there is some

00:21:11,250 --> 00:21:16,020
reason didn't work but a my askew

00:21:13,620 --> 00:21:19,530
workbench studying with my seven as well

00:21:16,020 --> 00:21:22,560
it comes with a tool function so called

00:21:19,530 --> 00:21:26,520
obj or explain and this bitter explain

00:21:22,560 --> 00:21:29,520
tells you how this select how this query

00:21:26,520 --> 00:21:32,880
a processed or optimize inside of

00:21:29,520 --> 00:21:36,480
optimizer this is the query doing the

00:21:32,880 --> 00:21:40,620
one two three four join of five tables

00:21:36,480 --> 00:21:43,140
and each tables green ones are using a

00:21:40,620 --> 00:21:46,140
unique key look up by the weight one

00:21:43,140 --> 00:21:48,960
table we are doing a full table scan so

00:21:46,140 --> 00:21:52,950
we may need to look into you to improve

00:21:48,960 --> 00:21:55,470
the look into adding index or modifying

00:21:52,950 --> 00:21:57,000
query to have a better performance of

00:21:55,470 --> 00:21:59,760
discrete you may get a better

00:21:57,000 --> 00:22:01,950
performance by adding index in the same

00:21:59,760 --> 00:22:05,130
time there are tiny number on the left

00:22:01,950 --> 00:22:08,220
top corner of each boxes it says numbers

00:22:05,130 --> 00:22:11,580
which is the cost of each operations so

00:22:08,220 --> 00:22:14,580
if this query is used doing the full

00:22:11,580 --> 00:22:17,130
table scan but it cost was small this

00:22:14,580 --> 00:22:19,350
case it's a real tiny cost you may

00:22:17,130 --> 00:22:21,690
ignore for table scan over this grade

00:22:19,350 --> 00:22:23,940
you may change other things in the start

00:22:21,690 --> 00:22:26,010
in certain maybe this one having a

00:22:23,940 --> 00:22:29,190
various number of of the cost for the

00:22:26,010 --> 00:22:30,990
unique key lookup so sort of unique a

00:22:29,190 --> 00:22:33,570
lookup we may try to change the

00:22:30,990 --> 00:22:36,960
conditions we may filter against this

00:22:33,570 --> 00:22:38,880
table first and there are a lot about it

00:22:36,960 --> 00:22:41,850
tells you you know the blue

00:22:38,880 --> 00:22:43,500
usually okay better some green ones okay

00:22:41,850 --> 00:22:45,960
with the ones we get looking to you

00:22:43,500 --> 00:22:47,490
because it's doing a protocol scan so

00:22:45,960 --> 00:22:49,350
this the part of the mask your workbench

00:22:47,490 --> 00:22:53,160
it's a free tool I strongly suggest you

00:22:49,350 --> 00:22:55,320
view down low here having to use that I

00:22:53,160 --> 00:22:57,630
strongly recommend you to test with and

00:22:55,320 --> 00:23:06,180
they tell tells you a lot so a lot of

00:22:57,630 --> 00:23:08,030
you know useful information and everyone

00:23:06,180 --> 00:23:12,630
I'm running a time all right

00:23:08,030 --> 00:23:16,590
yes so the I directly finishing you know

00:23:12,630 --> 00:23:18,540
single or single slice or two slides in

00:23:16,590 --> 00:23:20,910
Eau de abajo pool is the most important

00:23:18,540 --> 00:23:22,680
parameter of my skill to achieve if you

00:23:20,910 --> 00:23:25,020
cannot have enough time to achieve

00:23:22,680 --> 00:23:27,380
anything else change this parameter to

00:23:25,020 --> 00:23:32,010
make this parameter as large as possible

00:23:27,380 --> 00:23:34,530
but not makes one default size is 128

00:23:32,010 --> 00:23:38,010
megabytes usually too small for

00:23:34,530 --> 00:23:41,370
everything if you have 16 GB in the

00:23:38,010 --> 00:23:45,180
server and you mask is only application

00:23:41,370 --> 00:23:49,410
running there set this one to 10 GB it's

00:23:45,180 --> 00:23:51,180
usually was enough or 12 GB is going to

00:23:49,410 --> 00:23:54,060
be to guess but depending on the other

00:23:51,180 --> 00:23:55,980
parameters you tune and a one more thing

00:23:54,060 --> 00:24:00,600
at the inno DV e log of a local file

00:23:55,980 --> 00:24:03,750
size you can this logo file in the file

00:24:00,600 --> 00:24:06,060
system to store your own going are sort

00:24:03,750 --> 00:24:09,090
of committed transaction so larger is

00:24:06,060 --> 00:24:12,930
usually better but maybe like you know

00:24:09,090 --> 00:24:17,580
oh if we have 10 gb of buffer 1 gb of

00:24:12,930 --> 00:24:19,800
file can be okay but you feel like oh

00:24:17,580 --> 00:24:22,620
well it's too much to chain one by one

00:24:19,800 --> 00:24:25,020
the - kill 8 how much it weighs in on

00:24:22,620 --> 00:24:28,110
DVD geek 82 servers that's a new part of

00:24:25,020 --> 00:24:30,630
parameter in moscow server 8 you don't

00:24:28,110 --> 00:24:33,360
have to configure all the details these

00:24:30,630 --> 00:24:36,570
several parameters about energy storage

00:24:33,360 --> 00:24:39,330
engine - kill so in OD be dedicated to

00:24:36,570 --> 00:24:41,610
cyber parameter if you turn on it will

00:24:39,330 --> 00:24:44,760
detect size of memory and attune these

00:24:41,610 --> 00:24:46,560
parameters automatically so this avoids

00:24:44,760 --> 00:24:49,830
you to use a manual tuning of the

00:24:46,560 --> 00:24:52,140
parameters and a we're expanding on this

00:24:49,830 --> 00:24:55,049
power feature and you

00:24:52,140 --> 00:24:58,170
we can automate parameter tuning hours

00:24:55,049 --> 00:25:00,630
this parameter so I will conclude my

00:24:58,170 --> 00:25:03,120
session by showing data parameter in the

00:25:00,630 --> 00:25:05,010
console

00:25:03,120 --> 00:25:10,590
yeah so this is a parameter name of the

00:25:05,010 --> 00:25:13,049
inno dve dedicated the server right now

00:25:10,590 --> 00:25:14,309
it's off you can turn on and a masker

00:25:13,049 --> 00:25:16,380
server will chain you know you have a

00:25:14,309 --> 00:25:19,250
pool you know do you log file size and

00:25:16,380 --> 00:25:19,250

YouTube URL: https://www.youtube.com/watch?v=isKSvhmO1QY


