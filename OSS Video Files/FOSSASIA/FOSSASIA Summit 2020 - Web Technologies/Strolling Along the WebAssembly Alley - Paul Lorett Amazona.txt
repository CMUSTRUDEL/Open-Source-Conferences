Title: Strolling Along the WebAssembly Alley - Paul Lorett Amazona
Publication date: 2020-03-22
Playlist: FOSSASIA Summit 2020 - Web Technologies
Description: 
	FOSSASIA Summit 2020 - Web Technologies
Captions: 
	00:00:01,669 --> 00:00:07,500
hi everyone first of all like to thank

00:00:04,980 --> 00:00:10,710
Foss HR for allowing me to share my

00:00:07,500 --> 00:00:12,150
passion for weather Sunday to you it's

00:00:10,710 --> 00:00:14,400
something that I've been keeping tabs

00:00:12,150 --> 00:00:17,250
with every now and then as it progress

00:00:14,400 --> 00:00:19,890
in the recent years mainly I find what

00:00:17,250 --> 00:00:23,279
Assembly's potential and support for

00:00:19,890 --> 00:00:25,980
multiple languages quite attractive I'm

00:00:23,279 --> 00:00:28,949
Paul and I'm a bit of a polyglot I

00:00:25,980 --> 00:00:31,949
mainly use c-sharp at work and recently

00:00:28,949 --> 00:00:34,290
using Java also for new projects outside

00:00:31,949 --> 00:00:36,170
work I helped organize the following

00:00:34,290 --> 00:00:40,520
thank you made this here in Singapore

00:00:36,170 --> 00:00:43,050
big data X and data kind we organize

00:00:40,520 --> 00:00:45,930
workshops related to data and data

00:00:43,050 --> 00:00:48,180
engineering in big data X way to raise

00:00:45,930 --> 00:00:50,520
data engineering literacy in Singapore

00:00:48,180 --> 00:00:52,590
and around the region as most

00:00:50,520 --> 00:00:55,230
communities these days in light of the

00:00:52,590 --> 00:00:59,309
virus situation were also considering

00:00:55,230 --> 00:01:01,680
online events in data time we use data

00:00:59,309 --> 00:01:03,809
science to help nonprofits get insight

00:01:01,680 --> 00:01:06,330
from their data so that they can serve

00:01:03,809 --> 00:01:08,490
their communities better we tend to use

00:01:06,330 --> 00:01:11,760
Python and are in a number of associated

00:01:08,490 --> 00:01:14,310
projects usually we hold monthly data

00:01:11,760 --> 00:01:16,229
chunks in line with this goal we kept

00:01:14,310 --> 00:01:22,380
this on hold for now until further

00:01:16,229 --> 00:01:24,270
notice as we're in challenging times if

00:01:22,380 --> 00:01:26,580
you're interested to know about this

00:01:24,270 --> 00:01:28,860
groups feel free to contact me online or

00:01:26,580 --> 00:01:32,340
when we see each other in feature local

00:01:28,860 --> 00:01:34,920
meetups like webOS Thomas approach to

00:01:32,340 --> 00:01:38,850
languages we do our best to be open and

00:01:34,920 --> 00:01:41,100
inclusive for our some of us already

00:01:38,850 --> 00:01:43,710
know this but before we proceed further

00:01:41,100 --> 00:01:46,079
I'd like to revisit some other concepts

00:01:43,710 --> 00:01:51,689
on web assembly so that is easier for us

00:01:46,079 --> 00:01:52,259
to refer to them later so what do you

00:01:51,689 --> 00:01:54,780
think

00:01:52,259 --> 00:01:59,070
Abu Bassam do what is web assembly in

00:01:54,780 --> 00:02:02,070
the first place well the web there are

00:01:59,070 --> 00:02:04,439
quite a number of definitions from what

00:02:02,070 --> 00:02:06,979
we have here which says that is a new

00:02:04,439 --> 00:02:10,800
type of code and it looks like an

00:02:06,979 --> 00:02:13,050
assembly and it's a compilation target

00:02:10,800 --> 00:02:14,220
that provides languages such as C C++

00:02:13,050 --> 00:02:16,650
and

00:02:14,220 --> 00:02:19,440
so that they can run on the web is from

00:02:16,650 --> 00:02:23,420
Mozilla or from the mdn documentation

00:02:19,440 --> 00:02:27,000
and if you're one more thorough

00:02:23,420 --> 00:02:29,069
definition we can get it from the web

00:02:27,000 --> 00:02:32,520
assembly specification itself which is

00:02:29,069 --> 00:02:35,420
maintained by w3c from there it says

00:02:32,520 --> 00:02:39,180
that web assembly is a safe portable

00:02:35,420 --> 00:02:40,950
low-level code format and its main goal

00:02:39,180 --> 00:02:44,690
is to enable high performance

00:02:40,950 --> 00:02:50,040
applications on the web it's quite a

00:02:44,690 --> 00:02:52,410
detailed definition but on my side I'd

00:02:50,040 --> 00:02:54,900
like to think of it as a new compilation

00:02:52,410 --> 00:02:57,090
target mainly to enable high performance

00:02:54,900 --> 00:02:59,370
on the web but since I won't be

00:02:57,090 --> 00:03:04,019
discussing much on performance in this

00:02:59,370 --> 00:03:06,720
talk I'll be focusing on web assembly on

00:03:04,019 --> 00:03:12,080
how it provides languages such as C C++

00:03:06,720 --> 00:03:12,080
and Rask with a new compilation target

00:03:12,530 --> 00:03:19,260
so now that we've established that hey I

00:03:15,989 --> 00:03:23,220
can write in C C++ or us and I'm able to

00:03:19,260 --> 00:03:29,970
come palace into web assembly how does

00:03:23,220 --> 00:03:34,590
it work how can you use this on on your

00:03:29,970 --> 00:03:39,450
web project so let's look at that

00:03:34,590 --> 00:03:41,459
scenario as you can see here we have web

00:03:39,450 --> 00:03:46,260
assembly that serves as a compilation

00:03:41,459 --> 00:03:53,220
target here to webassembly binary which

00:03:46,260 --> 00:03:56,459
is as awasum extension one can write the

00:03:53,220 --> 00:03:59,670
logic in C C++ or us or any supported

00:03:56,459 --> 00:04:02,160
language and compile it into wasum this

00:03:59,670 --> 00:04:04,620
gets loaded in JavaScript which is

00:04:02,160 --> 00:04:06,750
embedded in the web page in the

00:04:04,620 --> 00:04:09,299
hard-faced webassembly still has a

00:04:06,750 --> 00:04:11,670
number of limitations one of which is

00:04:09,299 --> 00:04:14,750
that it doesn't have direct access to

00:04:11,670 --> 00:04:18,810
the door so you would still need

00:04:14,750 --> 00:04:22,979
JavaScript as a glue to make use of web

00:04:18,810 --> 00:04:25,770
assembly in the web page but technology

00:04:22,979 --> 00:04:27,080
is constantly evolving with new features

00:04:25,770 --> 00:04:32,120
being worked on

00:04:27,080 --> 00:04:36,099
it's MVP status and it has come a long

00:04:32,120 --> 00:04:39,289
way and perhaps some of you are asking

00:04:36,099 --> 00:04:43,430
how did this webassembly came about in

00:04:39,289 --> 00:04:46,819
the first place in that light

00:04:43,430 --> 00:04:50,210
I'd like to share a brief picture of the

00:04:46,819 --> 00:04:52,580
webassembly time line it's relatively

00:04:50,210 --> 00:04:53,349
short since that technology is quite

00:04:52,580 --> 00:04:57,229
recent

00:04:53,349 --> 00:04:59,360
it started in April 2015 when the

00:04:57,229 --> 00:05:02,210
webassembly community group was formed

00:04:59,360 --> 00:05:04,729
it was initially composed of

00:05:02,210 --> 00:05:07,310
representatives from some major browser

00:05:04,729 --> 00:05:08,930
vendors that wanted a new code format

00:05:07,310 --> 00:05:13,159
for the web that's faster than

00:05:08,930 --> 00:05:17,419
JavaScript in June they announced that

00:05:13,159 --> 00:05:20,060
they're working on the standard in March

00:05:17,419 --> 00:05:22,159
2016 the community group defined the

00:05:20,060 --> 00:05:25,340
four features that will be in the

00:05:22,159 --> 00:05:27,349
standard a few months later some of the

00:05:25,340 --> 00:05:31,360
process implemented those features as a

00:05:27,349 --> 00:05:36,110
preview for the community to try out

00:05:31,360 --> 00:05:39,139
early 2017 the community has chosen an

00:05:36,110 --> 00:05:45,319
official logo I think this is that in

00:05:39,139 --> 00:05:47,539
github I managed to browse the the

00:05:45,319 --> 00:05:49,250
development of this and I saw some funny

00:05:47,539 --> 00:05:50,870
submission as well so you might want to

00:05:49,250 --> 00:05:55,339
check that out again when you get some

00:05:50,870 --> 00:05:58,190
time in March the web assembly MVP was

00:05:55,339 --> 00:06:01,520
declared complete and the preview phase

00:05:58,190 --> 00:06:03,800
ended in September that year Safari

00:06:01,520 --> 00:06:07,099
announces support which makes web azam

00:06:03,800 --> 00:06:12,770
is supported on all four major browsers

00:06:07,099 --> 00:06:15,949
namely Chrome Firefox edge and WebKit in

00:06:12,770 --> 00:06:17,900
February 2018 the new web assembly

00:06:15,949 --> 00:06:20,539
working group which was formed the

00:06:17,900 --> 00:06:23,169
previous year published three public

00:06:20,539 --> 00:06:28,849
working drafts for poor specification

00:06:23,169 --> 00:06:32,990
JavaScript interface and Web API last

00:06:28,849 --> 00:06:35,750
year was also eventful in March was he

00:06:32,990 --> 00:06:39,080
was announced it's a system interface to

00:06:35,750 --> 00:06:40,610
run web assembly outside the web last

00:06:39,080 --> 00:06:44,870
December the

00:06:40,610 --> 00:06:46,689
wide web consortium are w3c and ants

00:06:44,870 --> 00:06:49,849
that the web assembly core specification

00:06:46,689 --> 00:06:52,159
is now an official web standard

00:06:49,849 --> 00:06:55,430
launching a powerful new language for

00:06:52,159 --> 00:06:58,490
the web while all of this have are

00:06:55,430 --> 00:07:01,129
happening various languages are also

00:06:58,490 --> 00:07:04,639
trying to leverage on web assembly in

00:07:01,129 --> 00:07:13,009
this talk let's take a look at two of

00:07:04,639 --> 00:07:15,349
them let's have a look at rust as you

00:07:13,009 --> 00:07:17,180
can see here the rest approach is on par

00:07:15,349 --> 00:07:19,009
with what we've discussed and how web

00:07:17,180 --> 00:07:23,379
something works a while ago

00:07:19,009 --> 00:07:23,379
first we have the rust source code

00:07:26,770 --> 00:07:33,520
then welcome pout that to wasum then we

00:07:30,940 --> 00:07:36,729
use a JavaScript glue to make use of the

00:07:33,520 --> 00:07:40,539
trust library in our webpage as you can

00:07:36,729 --> 00:07:43,300
see here the first part is the function

00:07:40,539 --> 00:07:45,639
that we're importing from JavaScript so

00:07:43,300 --> 00:07:49,780
that we can call in it inside the last

00:07:45,639 --> 00:07:51,729
source code and then the greet function

00:07:49,780 --> 00:07:55,020
will call that later inside the

00:07:51,729 --> 00:07:59,199
JavaScript so this is how we import the

00:07:55,020 --> 00:08:03,810
wasum file and then this is how we call

00:07:59,199 --> 00:08:08,500
the function from Russ

00:08:03,810 --> 00:08:15,580
so let's look into this in how it looks

00:08:08,500 --> 00:08:19,539
like in code so here I have a small rust

00:08:15,580 --> 00:08:22,810
project let's take a look at the lid RS

00:08:19,539 --> 00:08:25,870
this is the same code that we've shown

00:08:22,810 --> 00:08:30,430
in the slide the while ago I'm going to

00:08:25,870 --> 00:08:34,089
build it next to produce the Rossum

00:08:30,430 --> 00:08:39,550
binary file so I'm using Watson pack

00:08:34,089 --> 00:08:41,349
here and once it's complete you should

00:08:39,550 --> 00:08:43,810
be able to see the packaged folder

00:08:41,349 --> 00:08:45,779
getting created and you can see the

00:08:43,810 --> 00:08:48,790
Watson file there including the

00:08:45,779 --> 00:08:52,750
JavaScript glue and on top you can see

00:08:48,790 --> 00:08:56,740
how it's being imported and then how it

00:08:52,750 --> 00:09:00,490
is being called and from here I have a

00:08:56,740 --> 00:09:04,329
sample web page to make use of it I have

00:09:00,490 --> 00:09:10,270
a version of index dot JSP does the glue

00:09:04,329 --> 00:09:12,850
and I'm also trying to import or have

00:09:10,270 --> 00:09:15,730
the dependency dependant on the package

00:09:12,850 --> 00:09:18,839
folder it was created a while ago so I'm

00:09:15,730 --> 00:09:18,839
just going to run it

00:09:28,560 --> 00:09:35,970
and once it's done I'm just going to

00:09:32,620 --> 00:09:35,970
open it in a web page

00:09:42,370 --> 00:09:51,930
hello for Asia so there you go

00:09:46,959 --> 00:09:51,930
the Russ implementation on webassembly

00:09:56,309 --> 00:10:01,740
the Ross approach is similar to what you

00:09:59,559 --> 00:10:06,069
do if you're going to implement using CC

00:10:01,740 --> 00:10:07,589
C++ by M description however our next

00:10:06,069 --> 00:10:13,529
language has a slightly different

00:10:07,589 --> 00:10:16,230
implementation let's take a look c-sharp

00:10:13,529 --> 00:10:20,980
so in c-sharp

00:10:16,230 --> 00:10:24,399
we don't actually compile the directly

00:10:20,980 --> 00:10:27,899
to web assembly so instead as you can

00:10:24,399 --> 00:10:35,800
see here we normally compile it to our

00:10:27,899 --> 00:10:36,550
normal nutnut dll and that gets run by

00:10:35,800 --> 00:10:39,759
the dotnet

00:10:36,550 --> 00:10:41,920
web assembly which is the one that is

00:10:39,759 --> 00:10:43,779
thoroughly interacting with the web

00:10:41,920 --> 00:10:47,679
assembly runtime so we have an

00:10:43,779 --> 00:10:53,139
intermediate dotnet runtime that enables

00:10:47,679 --> 00:10:57,269
our code to run so here this is our code

00:10:53,139 --> 00:11:01,990
and later we're going to use this to

00:10:57,269 --> 00:11:05,980
implement our application so let's do a

00:11:01,990 --> 00:11:13,300
small demo on how it is being done in

00:11:05,980 --> 00:11:16,929
c-sharp not via blazer so here we have a

00:11:13,300 --> 00:11:19,629
small project blazer project and if they

00:11:16,929 --> 00:11:21,459
open this counter the tracer file we

00:11:19,629 --> 00:11:23,800
have the code that I shown you in the

00:11:21,459 --> 00:11:27,069
slide as well let's just modify this a

00:11:23,800 --> 00:11:31,929
little bit and apply some be an

00:11:27,069 --> 00:11:36,389
open-source software thanks we'll modify

00:11:31,929 --> 00:11:45,749
the current count a bit make it maybe

00:11:36,389 --> 00:11:45,749
count two at a time and let's do build

00:11:52,140 --> 00:11:57,990
sometimes this takes a while to build

00:11:59,730 --> 00:12:08,470
but we should be able to see the

00:12:03,570 --> 00:12:13,780
compiler code which is the DLL and that

00:12:08,470 --> 00:12:16,870
DLL should be consumed or executed by

00:12:13,780 --> 00:12:23,160
the dotnet runtime which is in

00:12:16,870 --> 00:12:27,220
webassembly that's our project DLL and

00:12:23,160 --> 00:12:29,370
what going to do next is to run the

00:12:27,220 --> 00:12:29,370
application

00:13:11,800 --> 00:13:19,900
let's open the browser and see the

00:13:16,820 --> 00:13:19,900
application from there

00:13:29,390 --> 00:13:36,320
yes notice a while ago we don't have to

00:13:32,390 --> 00:13:41,959
write any JavaScript we can use c-sharp

00:13:36,320 --> 00:13:49,459
all the way together with our HTML so

00:13:41,959 --> 00:13:52,970
the the implementation now perhaps some

00:13:49,459 --> 00:13:56,420
of you will be asking what about the

00:13:52,970 --> 00:13:57,890
other languages so yeah across the

00:13:56,420 --> 00:13:59,839
spectrum initially when I was preparing

00:13:57,890 --> 00:14:03,290
for this job and I was initially

00:13:59,839 --> 00:14:05,510
thinking maybe I can use a Python also

00:14:03,290 --> 00:14:09,320
to compile into awesome but I didn't

00:14:05,510 --> 00:14:12,019
find any approaches yet to do that I

00:14:09,320 --> 00:14:17,589
think there are some Python

00:14:12,019 --> 00:14:21,260
implementation but it's more of Python

00:14:17,589 --> 00:14:24,470
runtime running in webassembly not

00:14:21,260 --> 00:14:28,310
really compiling into web assembly file

00:14:24,470 --> 00:14:29,029
so some of the languages are still in

00:14:28,310 --> 00:14:31,730
progress

00:14:29,029 --> 00:14:34,930
some are unstable although you can use

00:14:31,730 --> 00:14:38,320
it already and some are stable for

00:14:34,930 --> 00:14:41,930
production usage so some versions of

00:14:38,320 --> 00:14:44,449
laser is already in a sort of stable

00:14:41,930 --> 00:14:46,699
form but some they're added

00:14:44,449 --> 00:14:49,850
functionality with which are still in

00:14:46,699 --> 00:14:52,790
preview mode which includes the one that

00:14:49,850 --> 00:14:56,390
I should show a while ago so if you're

00:14:52,790 --> 00:14:59,930
interested to check the status of other

00:14:56,390 --> 00:15:03,709
languages you can go to this link it

00:14:59,930 --> 00:15:07,910
will show you corresponding status of

00:15:03,709 --> 00:15:10,100
various languages and on how far they've

00:15:07,910 --> 00:15:12,970
gone in terms of well assembly

00:15:10,100 --> 00:15:12,970
implementation

00:15:16,520 --> 00:15:20,100
[Music]

00:15:17,899 --> 00:15:23,790
the last part that I will be sharing

00:15:20,100 --> 00:15:25,699
about are these two things what some

00:15:23,790 --> 00:15:29,220
time and West merr

00:15:25,699 --> 00:15:31,350
these are standalone runtimes for

00:15:29,220 --> 00:15:33,899
webassembly which enables one to run

00:15:31,350 --> 00:15:37,019
webassembly beyond the browser both

00:15:33,899 --> 00:15:39,569
support Swasey a system interface to run

00:15:37,019 --> 00:15:41,999
webassembly outside the web you can

00:15:39,569 --> 00:15:45,389
execute your comparison in these

00:15:41,999 --> 00:15:48,269
runtimes as an additional feature you

00:15:45,389 --> 00:15:50,699
could even embed wasallam and use it in

00:15:48,269 --> 00:15:53,509
another programming language to compile

00:15:50,699 --> 00:15:55,980
wisdom from let's say crust and then the

00:15:53,509 --> 00:16:00,059
compiled wasn't me read that in Python

00:15:55,980 --> 00:16:05,399
for example let's take a look at each of

00:16:00,059 --> 00:16:09,509
them and this is what some time so let's

00:16:05,399 --> 00:16:14,420
say you have are asked simple arrest

00:16:09,509 --> 00:16:17,910
program here we have the hello for Asia

00:16:14,420 --> 00:16:19,319
so we just compile it and then set the

00:16:17,910 --> 00:16:23,519
target to awesome

00:16:19,319 --> 00:16:26,999
32 Wasi and then use that runtime to run

00:16:23,519 --> 00:16:30,269
the Watson binary and then it will

00:16:26,999 --> 00:16:34,230
execute accordingly the same thing will

00:16:30,269 --> 00:16:43,999
happen or was mer was mer has some sort

00:16:34,230 --> 00:16:49,529
of it looks like NPM so you can download

00:16:43,999 --> 00:16:51,329
was some libraries using what am but

00:16:49,529 --> 00:16:56,519
that's part of its toolset as well when

00:16:51,329 --> 00:16:58,709
you run it it's also kind of the same so

00:16:56,519 --> 00:16:59,129
when you run let's say I'll say was on

00:16:58,709 --> 00:17:02,189
file

00:16:59,129 --> 00:17:05,610
I can't even pass parameters on it that

00:17:02,189 --> 00:17:11,819
it it will execute accordingly also on

00:17:05,610 --> 00:17:14,159
top of that I could also compile Watson

00:17:11,819 --> 00:17:18,179
from another language like rust here you

00:17:14,159 --> 00:17:21,000
can have some function compiled into web

00:17:18,179 --> 00:17:22,209
assembly and then on the right side you

00:17:21,000 --> 00:17:27,179
can see

00:17:22,209 --> 00:17:31,210
we have a Python script that is loading

00:17:27,179 --> 00:17:33,850
the corresponding Watson binary that was

00:17:31,210 --> 00:17:36,520
compiled awhile ago for us and use it

00:17:33,850 --> 00:17:39,179
accordingly in Python so you can have

00:17:36,520 --> 00:17:43,510
like sort of language interrupts using

00:17:39,179 --> 00:17:46,870
web assembly as well so web person is

00:17:43,510 --> 00:17:51,070
very very interesting technology

00:17:46,870 --> 00:17:55,899
although the horn state it may not be

00:17:51,070 --> 00:17:58,620
that attractive to some especially some

00:17:55,899 --> 00:18:05,549
languages that requires garbage

00:17:58,620 --> 00:18:09,190
collection I had the chance to talk to I

00:18:05,549 --> 00:18:12,340
think the founder of grout VM I think

00:18:09,190 --> 00:18:18,730
they're also waiting for this feature so

00:18:12,340 --> 00:18:21,940
that they can enable Java to be compiled

00:18:18,730 --> 00:18:24,730
into web assembly as well and at the

00:18:21,940 --> 00:18:27,820
heart state there's no direct gum access

00:18:24,730 --> 00:18:30,730
you still need some JavaScript glue so

00:18:27,820 --> 00:18:35,669
that you can make use of your compiled

00:18:30,730 --> 00:18:37,899
wasum into your web page and of course

00:18:35,669 --> 00:18:41,770
there's no support for older browsers

00:18:37,899 --> 00:18:43,270
although some things i've read that even

00:18:41,770 --> 00:18:45,340
though there's no support for older

00:18:43,270 --> 00:18:48,090
browsers i think there is a polyfill

00:18:45,340 --> 00:18:50,350
solution for it so if you need to

00:18:48,090 --> 00:18:55,020
support older browsers maybe that is

00:18:50,350 --> 00:19:01,240
something that you need to explore so

00:18:55,020 --> 00:19:04,059
this is the end slide and this some of

00:19:01,240 --> 00:19:08,590
the resources that i've checked

00:19:04,059 --> 00:19:13,630
when preparing for this talk the first

00:19:08,590 --> 00:19:16,120
link is about is where I get the web

00:19:13,630 --> 00:19:19,740
assembly specification from it's very

00:19:16,120 --> 00:19:22,360
detailed and the second one is I think

00:19:19,740 --> 00:19:27,039
friendlier documentation which is from

00:19:22,360 --> 00:19:29,890
mdn the third one is how you use rust

00:19:27,039 --> 00:19:34,120
for web assembly you can walk through

00:19:29,890 --> 00:19:35,370
the whole set on getting the game of

00:19:34,120 --> 00:19:38,880
life set up

00:19:35,370 --> 00:19:41,400
as one of its demo and the fourth is

00:19:38,880 --> 00:19:43,580
about laser it's like that nuts

00:19:41,400 --> 00:19:47,760
implementation of web assembly

00:19:43,580 --> 00:19:50,870
especially for c-sharp the last we are

00:19:47,760 --> 00:19:56,670
more into webassembly beyond the browser

00:19:50,870 --> 00:19:58,920
if you have any further questions from

00:19:56,670 --> 00:20:00,600
this talk feel free to reach me out on

00:19:58,920 --> 00:20:06,450
Twitter that's my twitter handle on the

00:20:00,600 --> 00:20:10,050
lower right and that's also my github ID

00:20:06,450 --> 00:20:13,080
so you can ping me whichever it's going

00:20:10,050 --> 00:20:17,490
to be in it for you again thank you very

00:20:13,080 --> 00:20:21,660
much for your time and yeah this is very

00:20:17,490 --> 00:20:27,440
interesting technology hope to most of

00:20:21,660 --> 00:20:27,440

YouTube URL: https://www.youtube.com/watch?v=LjF_mC7HVcw


