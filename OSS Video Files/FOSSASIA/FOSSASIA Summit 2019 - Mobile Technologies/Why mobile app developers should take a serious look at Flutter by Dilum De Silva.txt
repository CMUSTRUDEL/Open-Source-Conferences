Title: Why mobile app developers should take a serious look at Flutter by Dilum De Silva
Publication date: 2019-03-23
Playlist: FOSSASIA Summit 2019 - Mobile Technologies
Description: 
	15 March 2019 17:30, Training Room 2-2

Google claims that we live in a mobile-first era where a lot of users tend to use mobile devices and mobile apps within their daily routine. So, every user expects to have great performance, smooth animations, and beautiful interactive designs whenever they use a mobile application. also, most of the mobile application developers need to develop such applications and new features without compromising quality or performance. This is where flutter and its interesting features make us have serious look at it.
Flutter is Google's mobile UI framework which provides a fast and expressive way for developers to build native apps on both IOS and Android. Rather than just giving an introduction to flutter, I thought of covering a comparison between flutter and native application development to highlight the key points why flutter has become an all-rounder in terms of flexibility, easiness, and developer-friendliness.  This speech and the demo will focus on following areas such as Flutter’s cool features bundle for developers, Dart the language of flutter and flutter’s reactiveness and why everything in flutter based on widgets. Also during the demo, I am planning to build an application to make sure that the audience is grabbing every cool feature to have a serious look at Flutter.
Captions: 
	00:00:00,030 --> 00:00:06,180
I'm de Loup and I plan to talk about ye

00:00:04,230 --> 00:00:07,980
mobile developers should have seen it

00:00:06,180 --> 00:00:10,139
look at frontin yeah before start up

00:00:07,980 --> 00:00:13,170
start off with things anyone who has

00:00:10,139 --> 00:00:15,059
experienced it cluttered okay see it's

00:00:13,170 --> 00:00:17,850
cool it's great to see that all of you

00:00:15,059 --> 00:00:20,550
guys are new and because I can give you

00:00:17,850 --> 00:00:22,830
the actual thing behind that why as

00:00:20,550 --> 00:00:26,010
mobile developers why we should have a

00:00:22,830 --> 00:00:27,930
at least look at further so so this

00:00:26,010 --> 00:00:30,929
basically about me I'm I'm currently

00:00:27,930 --> 00:00:32,460
studying at IIT and I'm part of meetup

00:00:30,929 --> 00:00:34,200
campus expert program also I'm a trainee

00:00:32,460 --> 00:00:36,630
associate soft an engineer so on 24/7

00:00:34,200 --> 00:00:38,370
and we should like recently initiated

00:00:36,630 --> 00:00:40,200
Colombo flat Ameerpet Sri Lanka that's

00:00:38,370 --> 00:00:43,920
the first ever meet up in Sri Lanka so

00:00:40,200 --> 00:00:45,629
and this stuff I'm kind of part of and

00:00:43,920 --> 00:00:48,059
I'm contribute to these organizations

00:00:45,629 --> 00:00:49,920
out there so yeah before before moving

00:00:48,059 --> 00:00:52,350
to flatter you know like nowadays we

00:00:49,920 --> 00:00:53,550
have this we we already had the mobile

00:00:52,350 --> 00:00:56,129
application development right

00:00:53,550 --> 00:00:58,379
so yeah before before I thought of like

00:00:56,129 --> 00:01:00,629
before going jump into flutter if you

00:00:58,379 --> 00:01:02,190
can have a kind of a look at how mobile

00:01:00,629 --> 00:01:03,930
application development so far then you

00:01:02,190 --> 00:01:05,129
can get the actual idea why I'm telling

00:01:03,930 --> 00:01:09,600
that you should have seen us look at

00:01:05,129 --> 00:01:11,760
flutter okay so yeah when it comes to

00:01:09,600 --> 00:01:14,549
mobile application development so we

00:01:11,760 --> 00:01:16,770
have this three platforms right so we

00:01:14,549 --> 00:01:18,150
have Android they release the SDK back

00:01:16,770 --> 00:01:20,400
in 2009

00:01:18,150 --> 00:01:23,790
so we have our u.s. they released the FS

00:01:20,400 --> 00:01:25,500
SDK in back in 2008 and windows are we

00:01:23,790 --> 00:01:30,329
have do we have any windows developers

00:01:25,500 --> 00:01:32,490
now okay we have quite very low number

00:01:30,329 --> 00:01:34,829
of developers for Windows okay yeah

00:01:32,490 --> 00:01:37,500
that's why I put the hell over there so

00:01:34,829 --> 00:01:39,200
I I would like moving on I learned only

00:01:37,500 --> 00:01:41,820
talk about these two because like

00:01:39,200 --> 00:01:43,950
without comparing with Windows and stuff

00:01:41,820 --> 00:01:45,600
so basically these are the major

00:01:43,950 --> 00:01:49,500
platforms that we are using today right

00:01:45,600 --> 00:01:51,720
the Android and the iOS so like when it

00:01:49,500 --> 00:01:53,549
comes even you are a Android or iOS

00:01:51,720 --> 00:01:55,350
developer anyway you have to go and go

00:01:53,549 --> 00:01:57,329
through these layers because like that's

00:01:55,350 --> 00:01:59,610
that's the very high level layers that

00:01:57,329 --> 00:02:02,430
you have to go through a new application

00:01:59,610 --> 00:02:05,030
so like if you consider about the layers

00:02:02,430 --> 00:02:08,399
like in the top part we have this

00:02:05,030 --> 00:02:09,899
widgets which renders your UI whatever

00:02:08,399 --> 00:02:11,879
the thing that the users interact with

00:02:09,899 --> 00:02:13,200
so that we in our your side we have the

00:02:11,879 --> 00:02:15,270
Cupertino widgets in

00:02:13,200 --> 00:02:16,860
Android side we have material widgets

00:02:15,270 --> 00:02:18,599
with they they recently came up with

00:02:16,860 --> 00:02:21,750
these material principles and all the

00:02:18,599 --> 00:02:25,019
stuff that to make sure that users are

00:02:21,750 --> 00:02:27,060
happy with the UI so yeah then then the

00:02:25,019 --> 00:02:29,610
second layer we have the core services

00:02:27,060 --> 00:02:32,340
and also in the Android size we have the

00:02:29,610 --> 00:02:35,849
application and frameworks so moving on

00:02:32,340 --> 00:02:37,590
the third layer that's that's kind of

00:02:35,849 --> 00:02:39,900
important because we have the cows in

00:02:37,590 --> 00:02:41,790
the iOS side comparing to iOS the

00:02:39,900 --> 00:02:45,239
Android side we have the libraries and

00:02:41,790 --> 00:02:47,549
the run type so and the bottom bottom

00:02:45,239 --> 00:02:49,440
layer you have the kernel drivers in iOS

00:02:47,549 --> 00:02:51,690
as well as in Android side we have Linux

00:02:49,440 --> 00:02:53,760
kernel and the device drivers so this is

00:02:51,690 --> 00:02:56,849
a very very high level thing so like

00:02:53,760 --> 00:02:59,280
like if you are just thinking about the

00:02:56,849 --> 00:03:01,260
native application development like in

00:02:59,280 --> 00:03:03,299
this part I'm talking about applications

00:03:01,260 --> 00:03:04,500
for single platform basically like if

00:03:03,299 --> 00:03:07,519
you are developing application for iOS

00:03:04,500 --> 00:03:10,620
that means a single platform right so

00:03:07,519 --> 00:03:13,140
that then again like if we consider a

00:03:10,620 --> 00:03:15,299
kind of high level architecture diagram

00:03:13,140 --> 00:03:17,400
so this here you have this new

00:03:15,299 --> 00:03:19,769
application which was written in Java

00:03:17,400 --> 00:03:23,579
code lean or shipped earlier days we

00:03:19,769 --> 00:03:26,160
used some objective-c and in the the

00:03:23,579 --> 00:03:28,049
other part we have the the omv chat box

00:03:26,160 --> 00:03:29,489
where you render CI so your application

00:03:28,049 --> 00:03:31,680
code directly communicates with the OEM

00:03:29,489 --> 00:03:33,810
widgets in order to render the UI and

00:03:31,680 --> 00:03:36,230
also they have the canvas and events in

00:03:33,810 --> 00:03:38,880
the same layer in the same level and

00:03:36,230 --> 00:03:40,470
whenever your application wants to use

00:03:38,880 --> 00:03:42,630
any of the location services or

00:03:40,470 --> 00:03:44,190
Bluetooth services or else assume that

00:03:42,630 --> 00:03:48,420
your project is using any other sensors

00:03:44,190 --> 00:03:50,670
like any any sensor like you want to

00:03:48,420 --> 00:03:52,590
access any sensor we Co we call it call

00:03:50,670 --> 00:03:55,370
them through the services so this is

00:03:52,590 --> 00:03:57,720
kind of a very high level thing about

00:03:55,370 --> 00:04:00,109
native application development or this

00:03:57,720 --> 00:04:02,790
application for single platforms so

00:04:00,109 --> 00:04:04,290
whatever we do and whatever the platform

00:04:02,790 --> 00:04:06,450
we are talking about everything as a

00:04:04,290 --> 00:04:07,980
course has constant problems right so

00:04:06,450 --> 00:04:10,530
these are some of the process that I

00:04:07,980 --> 00:04:12,480
noticed in single application for single

00:04:10,530 --> 00:04:15,030
platform or the native applications so

00:04:12,480 --> 00:04:17,609
like most of people telling that native

00:04:15,030 --> 00:04:18,989
applications are fast so that's that's

00:04:17,609 --> 00:04:21,000
that's a key thing that tai build

00:04:18,989 --> 00:04:24,780
applications are trying to achieve so

00:04:21,000 --> 00:04:26,790
and it's also responsive so also it's it

00:04:24,780 --> 00:04:28,670
has continuous support yeah because

00:04:26,790 --> 00:04:31,440
most of the native language native

00:04:28,670 --> 00:04:34,700
applications develop with big brands

00:04:31,440 --> 00:04:38,670
right Android said we have Google in the

00:04:34,700 --> 00:04:40,230
US side we have the Apple so and also

00:04:38,670 --> 00:04:42,360
the variety of features that we have

00:04:40,230 --> 00:04:44,340
because we have already proven that

00:04:42,360 --> 00:04:45,750
Android applications are us applications

00:04:44,340 --> 00:04:48,480
that that's what today we are using

00:04:45,750 --> 00:04:50,340
right so it's already proven and the

00:04:48,480 --> 00:04:53,040
community that's that's the big biggest

00:04:50,340 --> 00:04:54,870
part so we have lot of developers who

00:04:53,040 --> 00:04:58,700
has specializes in these areas oh I know

00:04:54,870 --> 00:05:02,520
it Ola iOS so moving on to the con site

00:04:58,700 --> 00:05:05,670
the best the major thing that I I see as

00:05:02,520 --> 00:05:07,320
a assume you are SATA you you want to

00:05:05,670 --> 00:05:10,260
start a startup you just want to make

00:05:07,320 --> 00:05:14,030
sure that you build mobile apps so in an

00:05:10,260 --> 00:05:16,500
early stage or assume that you want to

00:05:14,030 --> 00:05:17,910
develop application for your freelance

00:05:16,500 --> 00:05:21,060
project or something like that in that

00:05:17,910 --> 00:05:23,990
way that having to code bases having two

00:05:21,060 --> 00:05:26,730
languages it's the same case that every

00:05:23,990 --> 00:05:32,310
technology for multi-purpose that that

00:05:26,730 --> 00:05:34,830
that's what they are there that's that's

00:05:32,310 --> 00:05:37,170
the selling point right that's that's

00:05:34,830 --> 00:05:38,820
how they promote it so you have one code

00:05:37,170 --> 00:05:41,070
base for both applications that's the

00:05:38,820 --> 00:05:43,560
anyway I listed same thing here also

00:05:41,070 --> 00:05:45,690
like maintaining two to two different

00:05:43,560 --> 00:05:47,460
projects and two different set of

00:05:45,690 --> 00:05:49,410
developers for both project it's it's

00:05:47,460 --> 00:05:51,630
again it's a disadvantage assuming as a

00:05:49,410 --> 00:05:52,680
large-scale company or a large product

00:05:51,630 --> 00:05:56,850
based company so it's it's a

00:05:52,680 --> 00:05:58,490
disadvantage so and also developing me I

00:05:56,850 --> 00:06:01,110
don't know whether you guys have

00:05:58,490 --> 00:06:03,530
experienced that developing features in

00:06:01,110 --> 00:06:06,030
a synchronous way it's somewhat hard

00:06:03,530 --> 00:06:08,100
income coming to a native application so

00:06:06,030 --> 00:06:11,160
that that part of why I mentioned here

00:06:08,100 --> 00:06:12,570
it's like very very see if you are

00:06:11,160 --> 00:06:14,040
developing a kind of a feature in very

00:06:12,570 --> 00:06:19,620
synchronously you have to put some

00:06:14,040 --> 00:06:21,870
effort there so the the next thing like

00:06:19,620 --> 00:06:25,590
we had the applications for single

00:06:21,870 --> 00:06:27,470
platform then be this one of the Artic

00:06:25,590 --> 00:06:29,550
like one of the diagrams which shows the

00:06:27,470 --> 00:06:31,320
applications for multi platforms it has

00:06:29,550 --> 00:06:33,750
like basically it's a kind of summary so

00:06:31,320 --> 00:06:35,910
in this side we have the we have

00:06:33,750 --> 00:06:37,470
basically two approaches ibid all the

00:06:35,910 --> 00:06:39,889
cross-platform approach maybe you guys

00:06:37,470 --> 00:06:41,990
are like very a few

00:06:39,889 --> 00:06:43,849
these technologies so one of these

00:06:41,990 --> 00:06:45,319
technologies so you know if you just

00:06:43,849 --> 00:06:50,870
considering about hybrid approach we

00:06:45,319 --> 00:06:52,610
have the body called the the application

00:06:50,870 --> 00:06:55,819
which was written in one of the markup

00:06:52,610 --> 00:06:58,009
languages like HTML CSS to add styles

00:06:55,819 --> 00:06:59,330
and we use the our script or a scripting

00:06:58,009 --> 00:07:01,639
language to a double objects and stuff

00:06:59,330 --> 00:07:03,919
so and also there are famous stuff like

00:07:01,639 --> 00:07:05,990
Cordova or PhoneGap and ionic ionic is

00:07:03,919 --> 00:07:08,330
one of the very famous stuff forbid wind

00:07:05,990 --> 00:07:10,639
comes a hybrid approach then then the

00:07:08,330 --> 00:07:13,490
the other side is cross-platform

00:07:10,639 --> 00:07:16,580
approach so in question for us we had

00:07:13,490 --> 00:07:19,219
maybe have you ever noticed that we have

00:07:16,580 --> 00:07:21,680
two parts reactive and nonreactive okay

00:07:19,219 --> 00:07:23,210
so moving on the this this non reactive

00:07:21,680 --> 00:07:26,800
stuff other than submarine I don't know

00:07:23,210 --> 00:07:26,800
whether anyone has used up accelerator

00:07:26,949 --> 00:07:31,789
anyone okay

00:07:29,449 --> 00:07:35,089
so it sits under the gang reactive part

00:07:31,789 --> 00:07:37,639
so it's a it's a it's basically

00:07:35,089 --> 00:07:41,539
something similar to a react native but

00:07:37,639 --> 00:07:43,370
it's it's a more kind of a it's not

00:07:41,539 --> 00:07:45,889
developed in a very good way like react

00:07:43,370 --> 00:07:47,449
native so but the main reactor Rison

00:07:45,889 --> 00:07:51,110
react native came up with they have then

00:07:47,449 --> 00:07:53,180
that reactive components so in the other

00:07:51,110 --> 00:07:55,120
part the non reactive side we have

00:07:53,180 --> 00:07:57,919
summary anyone that work with summary

00:07:55,120 --> 00:07:59,389
okay so summary knees again we when

00:07:57,919 --> 00:08:01,729
you're developing large-scale highly

00:07:59,389 --> 00:08:03,620
scalable mobile applications we use

00:08:01,729 --> 00:08:06,649
summer in which which written in C sharp

00:08:03,620 --> 00:08:08,839
oh and to the UI you can even use

00:08:06,649 --> 00:08:10,639
asp.net I as I guess I haven't never

00:08:08,839 --> 00:08:11,870
quits a marine but I know the submarine

00:08:10,639 --> 00:08:17,860
is there in the ninth round reactive

00:08:11,870 --> 00:08:19,250
side so any job react native developers

00:08:17,860 --> 00:08:21,529
okay cool

00:08:19,250 --> 00:08:24,319
so react native is there it's Google fat

00:08:21,529 --> 00:08:26,539
also they're in the same same area so I

00:08:24,319 --> 00:08:29,599
will talk about react native and Google

00:08:26,539 --> 00:08:32,060
how flattered how we differs in my next

00:08:29,599 --> 00:08:33,680
slides so and we have the native

00:08:32,060 --> 00:08:35,449
JavaScript for right application so

00:08:33,680 --> 00:08:39,380
these are kind of technologies that we

00:08:35,449 --> 00:08:41,000
are using to try that like true to make

00:08:39,380 --> 00:08:45,620
sure that we can write applications for

00:08:41,000 --> 00:08:47,899
multi-platforms so okay so again like

00:08:45,620 --> 00:08:49,190
before moving to in detail stuff these

00:08:47,899 --> 00:08:52,010
very high level architecture about

00:08:49,190 --> 00:08:53,329
hybrid approach can you last what's the

00:08:52,010 --> 00:08:55,629
difference between the pre

00:08:53,329 --> 00:09:00,019
yes native architecture and this one

00:08:55,629 --> 00:09:02,929
anyone yeah

00:09:00,019 --> 00:09:04,730
bridges there again we have replaced the

00:09:02,929 --> 00:09:07,519
OEM widgets with something called

00:09:04,730 --> 00:09:09,829
webview so this is kind of a thing which

00:09:07,519 --> 00:09:12,379
runs on your browser so it's it's it's

00:09:09,829 --> 00:09:13,939
basically we develop a application

00:09:12,379 --> 00:09:15,649
without thinking it has a web

00:09:13,939 --> 00:09:17,360
application at the end of day it's a

00:09:15,649 --> 00:09:20,269
mobile application but still we use of a

00:09:17,360 --> 00:09:22,100
pewter and our things so that way only

00:09:20,269 --> 00:09:24,980
we can communicate with the canvas or

00:09:22,100 --> 00:09:27,139
the events and whenever the application

00:09:24,980 --> 00:09:30,259
your hybrid approach application uses

00:09:27,139 --> 00:09:33,049
any of the sensors as in Bluetooth

00:09:30,259 --> 00:09:35,179
sensors or GPS or something we have to

00:09:33,049 --> 00:09:37,850
go through this bridge because it can't

00:09:35,179 --> 00:09:40,309
directly communicate with the markup

00:09:37,850 --> 00:09:41,480
languages so the JavaScript languages

00:09:40,309 --> 00:09:43,429
I'm not talking about the react native

00:09:41,480 --> 00:09:45,499
this is something about the hybrid

00:09:43,429 --> 00:09:47,660
approach like ionic or something like we

00:09:45,499 --> 00:09:52,639
have this bridge in between these two

00:09:47,660 --> 00:09:56,179
steps so moving to the pros and cons the

00:09:52,639 --> 00:09:58,579
a the pro process when in the pro side

00:09:56,179 --> 00:10:00,679
we have a very good thing we can do CI

00:09:58,579 --> 00:10:03,679
integrations continuous integrations so

00:10:00,679 --> 00:10:05,809
because we develop our application in

00:10:03,679 --> 00:10:07,759
the same way we develop a web app it's

00:10:05,809 --> 00:10:09,199
something similar to that so even you

00:10:07,759 --> 00:10:10,669
can use your application as a web

00:10:09,199 --> 00:10:12,949
application at the end of the day if you

00:10:10,669 --> 00:10:15,019
have to change a bit of UI and you have

00:10:12,949 --> 00:10:16,790
to make sure that some stuff formats

00:10:15,019 --> 00:10:18,709
mapping your bar browser screen so that

00:10:16,790 --> 00:10:20,419
way you can make sure that you can use

00:10:18,709 --> 00:10:23,049
the application as web application as

00:10:20,419 --> 00:10:25,309
well ideally so and also we can use

00:10:23,049 --> 00:10:26,959
continuous integration that's that's one

00:10:25,309 --> 00:10:30,259
of the key things whatever given of the

00:10:26,959 --> 00:10:32,720
key process in hybrid approach so moving

00:10:30,259 --> 00:10:35,959
on to the con site it's it's it's

00:10:32,720 --> 00:10:37,970
relatively slow because why like om

00:10:35,959 --> 00:10:42,470
which it renders the native components

00:10:37,970 --> 00:10:44,149
right in coincide but in this this

00:10:42,470 --> 00:10:46,939
hybrid approach what we have is a

00:10:44,149 --> 00:10:49,549
webview so it has to make sure that the

00:10:46,939 --> 00:10:53,629
UI renders through a webview or inside

00:10:49,549 --> 00:10:55,819
the browser so in that case it you it

00:10:53,629 --> 00:10:57,489
causes some of the slowness in the

00:10:55,819 --> 00:11:00,259
application maybe you guys will

00:10:57,489 --> 00:11:02,059
experience lags not for like smaller

00:11:00,259 --> 00:11:03,799
small applications but when it comes to

00:11:02,059 --> 00:11:06,889
large scale stuff when we will

00:11:03,799 --> 00:11:07,580
experience those stuff so it it is one

00:11:06,889 --> 00:11:10,190
of the

00:11:07,580 --> 00:11:14,589
key points for poor user experience as I

00:11:10,190 --> 00:11:18,200
as I think so moving on this

00:11:14,589 --> 00:11:19,190
cross-platform approach this this kind

00:11:18,200 --> 00:11:21,080
of a high level very high level

00:11:19,190 --> 00:11:23,870
architecture for cross-platform approach

00:11:21,080 --> 00:11:26,690
approach so we have the transfer native

00:11:23,870 --> 00:11:29,720
code in our left side in my left side so

00:11:26,690 --> 00:11:30,620
the framework libraries and SDK for non

00:11:29,720 --> 00:11:33,890
reactive part

00:11:30,620 --> 00:11:36,230
then these it's this part is not

00:11:33,890 --> 00:11:37,970
basically a bridge but we have something

00:11:36,230 --> 00:11:40,070
called JavaScript which but in react

00:11:37,970 --> 00:11:41,930
native this is a very react native a

00:11:40,070 --> 00:11:45,470
very improvement way improved way of

00:11:41,930 --> 00:11:48,140
communicating with the o-yamigedo the

00:11:45,470 --> 00:11:49,940
services but still just to give you an

00:11:48,140 --> 00:11:51,649
idea about cross-platform approach the

00:11:49,940 --> 00:11:53,180
entire technologies that we have in the

00:11:51,649 --> 00:11:56,600
cross platform section so it's something

00:11:53,180 --> 00:11:58,670
like this so in in cross platform did

00:11:56,600 --> 00:12:01,310
you did you notice that we have again we

00:11:58,670 --> 00:12:03,920
have the OEM digits because the react

00:12:01,310 --> 00:12:05,570
kind of native like then technologies

00:12:03,920 --> 00:12:07,130
like react native they can train now

00:12:05,570 --> 00:12:10,910
they can render native components as

00:12:07,130 --> 00:12:13,970
well so so then again that we in this

00:12:10,910 --> 00:12:16,550
case we we we have achieved that fast

00:12:13,970 --> 00:12:17,779
the fast keypoint right the the native

00:12:16,550 --> 00:12:19,220
applications are fast they are saying

00:12:17,779 --> 00:12:21,740
because because they they're in this

00:12:19,220 --> 00:12:23,420
native components so that that thing we

00:12:21,740 --> 00:12:26,690
can achieve here as well but not to that

00:12:23,420 --> 00:12:28,850
level like we we experience in native

00:12:26,690 --> 00:12:30,920
application but still we have the OEM

00:12:28,850 --> 00:12:34,640
visits at the end of the reactive

00:12:30,920 --> 00:12:36,079
applications so we also in order to call

00:12:34,640 --> 00:12:37,850
it service just like we just have to go

00:12:36,079 --> 00:12:41,899
through it rx breach the so called

00:12:37,850 --> 00:12:43,910
JavaScript bridge and the reactive part

00:12:41,899 --> 00:12:45,920
so in in that bridge we have both non

00:12:43,910 --> 00:12:47,480
reactive and reactive because in our

00:12:45,920 --> 00:12:49,670
spectrum approach some of the stuff are

00:12:47,480 --> 00:12:51,110
non reactive and some Mostafa reactive

00:12:49,670 --> 00:12:54,550
so this is the path to reactive stuff

00:12:51,110 --> 00:12:59,839
and that's powerful non reactive stuff

00:12:54,550 --> 00:13:00,320
so yeah okay I have the same same thing

00:12:59,839 --> 00:13:02,000
right

00:13:00,320 --> 00:13:05,510
not the same thing it was mistake so

00:13:02,000 --> 00:13:07,760
I'll just keep it like that so if I'm

00:13:05,510 --> 00:13:11,510
talking about the pros and cons in here

00:13:07,760 --> 00:13:13,970
so I I already mentioned that we have

00:13:11,510 --> 00:13:17,510
ome Jets so at the end of the day we we

00:13:13,970 --> 00:13:19,790
renders the same negative components so

00:13:17,510 --> 00:13:20,840
it's the look and feel somewhat similar

00:13:19,790 --> 00:13:22,400
to native components

00:13:20,840 --> 00:13:23,780
the way it renders through the heart

00:13:22,400 --> 00:13:26,090
bright somewhat similar to any native

00:13:23,780 --> 00:13:28,940
components so even when you're accessing

00:13:26,090 --> 00:13:31,520
the services it's it's a way easier than

00:13:28,940 --> 00:13:34,340
the hybrid approach in these things if

00:13:31,520 --> 00:13:36,800
you are considering about the cons in

00:13:34,340 --> 00:13:40,430
this approach still that we can't

00:13:36,800 --> 00:13:42,590
achieve the frame rendering speeds like

00:13:40,430 --> 00:13:45,710
assume like the in native applications

00:13:42,590 --> 00:13:47,390
we have 53 to 55 FPS if you are if you

00:13:45,710 --> 00:13:50,690
are planning to render something in that

00:13:47,390 --> 00:13:55,720
that FPS count we can render up to 55

00:13:50,690 --> 00:13:58,040
but in this this approach I think in

00:13:55,720 --> 00:14:02,420
cross-platform approach we only have can

00:13:58,040 --> 00:14:06,440
reach up to 51 or 50 so that's one of

00:14:02,420 --> 00:14:08,300
the major core concen hybrid approach so

00:14:06,440 --> 00:14:12,310
if assume that you want to print a kind

00:14:08,300 --> 00:14:15,050
of a very graphics very rich graphics

00:14:12,310 --> 00:14:16,400
application so it's very hard to render

00:14:15,050 --> 00:14:18,110
stuff you we will realize the legs are

00:14:16,400 --> 00:14:19,460
there the colors and colors are coming

00:14:18,110 --> 00:14:20,840
and it's still trying to get into the

00:14:19,460 --> 00:14:26,240
colors so those kind of stuffs are there

00:14:20,840 --> 00:14:28,310
so if your jump into flutter I'll talk

00:14:26,240 --> 00:14:29,690
about in a very brief way about the

00:14:28,310 --> 00:14:33,050
flutter architecture but this is the

00:14:29,690 --> 00:14:36,050
exact very high level architecture for

00:14:33,050 --> 00:14:38,510
flutter flutter as a native AR binary

00:14:36,050 --> 00:14:41,450
code we want but the one you write with

00:14:38,510 --> 00:14:44,990
the dart language so flutter I uses that

00:14:41,450 --> 00:14:47,060
so for the SI language and they they

00:14:44,990 --> 00:14:49,430
convert it to a native binary arm code

00:14:47,060 --> 00:14:51,680
at the end of the day so and they have

00:14:49,430 --> 00:14:54,800
lotta widgets flutter widget includes

00:14:51,680 --> 00:14:57,800
maybe you guys have realized that in om

00:14:54,800 --> 00:15:00,920
visits we had Cupertino and material

00:14:57,800 --> 00:15:04,460
both so in same way in fact we have this

00:15:00,920 --> 00:15:07,400
to petunia and material widgets as as a

00:15:04,460 --> 00:15:09,500
in building in fact so and we have

00:15:07,400 --> 00:15:11,510
something called platform channels where

00:15:09,500 --> 00:15:13,550
they release all the plugins libraries

00:15:11,510 --> 00:15:16,030
to in order to achieve the services and

00:15:13,550 --> 00:15:18,170
all stuff so this doesn't work as a

00:15:16,030 --> 00:15:20,210
 because it doesn't convert

00:15:18,170 --> 00:15:21,770
anything it's you can just import

00:15:20,210 --> 00:15:26,180
plug-in or the library and you can

00:15:21,770 --> 00:15:30,320
directly call to the services so yeah

00:15:26,180 --> 00:15:32,000
flutter on zone so as Google says the

00:15:30,320 --> 00:15:34,280
plateau runs on jellybean Android

00:15:32,000 --> 00:15:36,530
jellybean up to the

00:15:34,280 --> 00:15:40,190
it turns on erm devices arm devices and

00:15:36,530 --> 00:15:41,510
up to 4.1 so from beginning from for

00:15:40,190 --> 00:15:43,670
winter on the latest versed to the

00:15:41,510 --> 00:15:45,740
latest version so in our side we have we

00:15:43,670 --> 00:15:49,550
can further supports iOS 8 or the newer

00:15:45,740 --> 00:15:51,650
versions also the minimum hardware trans

00:15:49,550 --> 00:15:53,660
and iPhone 4s so you can develop your

00:15:51,650 --> 00:15:55,730
application you don't need to worry

00:15:53,660 --> 00:16:00,800
about the older phones or the older

00:15:55,730 --> 00:16:03,530
devices so if we consider about the path

00:16:00,800 --> 00:16:06,230
the flutter came so Google unveiled

00:16:03,530 --> 00:16:08,690
flutter in 2005 15 during the dark

00:16:06,230 --> 00:16:11,450
summit so that conference without that

00:16:08,690 --> 00:16:15,140
summit so and and then they released

00:16:11,450 --> 00:16:18,940
their first alpha version in 2017 back

00:16:15,140 --> 00:16:21,650
in 2017 then the 2018 was one of the

00:16:18,940 --> 00:16:23,590
most successful years for Google they

00:16:21,650 --> 00:16:26,300
dig the flutter team announced the

00:16:23,590 --> 00:16:29,090
preview to the most stable version may I

00:16:26,300 --> 00:16:30,500
jump into flap and try some code and try

00:16:29,090 --> 00:16:32,780
some applique I tried some application

00:16:30,500 --> 00:16:35,920
so it was a very stable version where

00:16:32,780 --> 00:16:38,570
the developers developers started to

00:16:35,920 --> 00:16:42,380
where the developers started to play

00:16:38,570 --> 00:16:45,500
with flutter and what do you call to

00:16:42,380 --> 00:16:47,720
make nice things in plotter so then they

00:16:45,500 --> 00:16:51,230
realized the the current version is I

00:16:47,720 --> 00:16:54,530
only have few few fixes so they released

00:16:51,230 --> 00:16:57,640
the version 1 back in 2018 December so

00:16:54,530 --> 00:16:59,810
and we are waiting for something called

00:16:57,640 --> 00:17:01,850
hummingbird without explaining about

00:16:59,810 --> 00:17:05,300
harm bird I'll I'll keep that part for

00:17:01,850 --> 00:17:07,900
the last slides so I jump into

00:17:05,300 --> 00:17:11,449
hummingbird in ROM in my last sites so

00:17:07,900 --> 00:17:13,760
so what is flutter so if I'm giving up

00:17:11,449 --> 00:17:15,680
just a short answer

00:17:13,760 --> 00:17:18,620
it's the latest mobile sdk that was

00:17:15,680 --> 00:17:21,829
developed by Google flutter team and to

00:17:18,620 --> 00:17:24,740
to develop high quality applications or

00:17:21,829 --> 00:17:26,420
high quality you guys use it like it can

00:17:24,740 --> 00:17:28,550
achieve very high quality stuff

00:17:26,420 --> 00:17:31,010
basically I'll talk about this FPS rate

00:17:28,550 --> 00:17:32,540
the flutter can achieve and all in late

00:17:31,010 --> 00:17:35,300
so it's opposed both on Android and iOS

00:17:32,540 --> 00:17:36,620
devices anyone in future there's Pat

00:17:35,300 --> 00:17:38,030
there's a project called project

00:17:36,620 --> 00:17:42,320
hummingbird that's that that's what I

00:17:38,030 --> 00:17:43,670
was showing my the this diagram so they

00:17:42,320 --> 00:17:45,770
are they are they are jumping to

00:17:43,670 --> 00:17:47,720
hummingbird in order to make sure that

00:17:45,770 --> 00:17:51,769
you only write once

00:17:47,720 --> 00:17:54,049
you covered everything so yeah

00:17:51,769 --> 00:17:56,600
as I told it's it's right write once run

00:17:54,049 --> 00:17:58,039
both this is not a big big big thing

00:17:56,600 --> 00:18:00,080
right it's not magic it's happening

00:17:58,039 --> 00:18:03,620
every cross-platform or hybrid approach

00:18:00,080 --> 00:18:06,200
application so it's one code base so one

00:18:03,620 --> 00:18:08,870
code base maintain and also in flutter

00:18:06,200 --> 00:18:10,789
you have expressive beautiful user

00:18:08,870 --> 00:18:13,190
interfaces some some of the paths are

00:18:10,789 --> 00:18:15,559
very very useful I'll talk about those

00:18:13,190 --> 00:18:20,149
useful stuff for now it's very

00:18:15,559 --> 00:18:22,580
expressive and beautiful so it has quick

00:18:20,149 --> 00:18:25,190
development so the things comes under

00:18:22,580 --> 00:18:27,409
quick development is like you know that

00:18:25,190 --> 00:18:29,480
flutter has something called hot reload

00:18:27,409 --> 00:18:31,490
and hot ray start whenever you you

00:18:29,480 --> 00:18:33,710
change application assume like you got

00:18:31,490 --> 00:18:35,750
into error and you fix that I'll show

00:18:33,710 --> 00:18:37,129
you kind of demo so you fix that you

00:18:35,750 --> 00:18:40,519
assume that you need to change the

00:18:37,129 --> 00:18:43,100
entire app bacala in a bahala or

00:18:40,519 --> 00:18:44,509
complete widget kind of thing a complete

00:18:43,100 --> 00:18:46,490
part of your application so you just

00:18:44,509 --> 00:18:48,169
it's it's just you change it and one

00:18:46,490 --> 00:18:50,509
click on the host or trees or reload

00:18:48,169 --> 00:18:53,960
button it will appear there's no delay

00:18:50,509 --> 00:18:55,820
between the rendering and the change you

00:18:53,960 --> 00:18:57,769
the moment you change the thing you just

00:18:55,820 --> 00:18:59,570
press on the or Trello token command R

00:18:57,769 --> 00:19:01,700
it will be it won't show you any

00:18:59,570 --> 00:19:05,090
progress lines or anything it's it's

00:19:01,700 --> 00:19:09,259
that quick so if you are looking to some

00:19:05,090 --> 00:19:11,990
kind of a that thing this kind of a demo

00:19:09,259 --> 00:19:13,220
project once you create the new proper

00:19:11,990 --> 00:19:15,289
project they are giving Google giving

00:19:13,220 --> 00:19:16,519
this demo project which has the counter

00:19:15,289 --> 00:19:19,360
you can press on a button and increase

00:19:16,519 --> 00:19:19,360
the number so

00:19:31,320 --> 00:19:34,280
yeah I have

00:19:35,830 --> 00:19:50,620
a pixel and the iPhone XR which runs

00:19:39,700 --> 00:19:52,630
with iOS 12.1 is the first time i'm

00:19:50,620 --> 00:19:58,690
running this application so this project

00:19:52,630 --> 00:20:01,300
so in the first time it will take some

00:19:58,690 --> 00:20:02,140
time as usual but further development

00:20:01,300 --> 00:20:08,130
when you are working with the

00:20:02,140 --> 00:20:08,130
application it won't take a lot of time

00:20:09,750 --> 00:20:16,110
okay so until it floats

00:20:13,210 --> 00:20:16,110
oh it until it

00:20:18,780 --> 00:20:29,150
yeah yeah yeah

00:20:38,350 --> 00:20:41,009
yeah

00:20:42,649 --> 00:20:48,990
you want to write one code base and you

00:20:46,830 --> 00:20:52,770
need to deploy it through a fork mobile

00:20:48,990 --> 00:20:54,480
phone and also then as the extra okay

00:20:52,770 --> 00:20:55,830
that's why I told the hummingbird there

00:20:54,480 --> 00:20:58,080
are a lot of surprises in having website

00:20:55,830 --> 00:21:05,070
so just wait for hummingbird project

00:20:58,080 --> 00:21:07,710
flight so okay now it's I think okay

00:21:05,070 --> 00:21:09,600
this application which gives the gives

00:21:07,710 --> 00:21:12,919
us they give us as the demo application

00:21:09,600 --> 00:21:14,789
so you can just press on a button and

00:21:12,919 --> 00:21:18,899
increase the number that's that's the

00:21:14,789 --> 00:21:20,880
demo application so you can see here the

00:21:18,899 --> 00:21:23,850
challah is blue right the the entire

00:21:20,880 --> 00:21:27,720
application or the app by college do so

00:21:23,850 --> 00:21:33,840
how do I show you the okay this way you

00:21:27,720 --> 00:21:39,640
can see how quick flat is so sure you

00:21:33,840 --> 00:21:45,160
want to change this Internet

00:21:39,640 --> 00:21:47,620
now it made my change do you realize

00:21:45,160 --> 00:21:49,720
that you may think that note studio also

00:21:47,620 --> 00:21:51,370
has that same button but what it does is

00:21:49,720 --> 00:21:54,820
it renders the entire application again

00:21:51,370 --> 00:21:55,960
so in in a in Android maybe you guys

00:21:54,820 --> 00:21:58,780
have experienced the same button is

00:21:55,960 --> 00:22:01,120
there the the kind of that button so

00:21:58,780 --> 00:22:02,920
what what Android does is they they

00:22:01,120 --> 00:22:04,480
build the complete application again

00:22:02,920 --> 00:22:07,240
but what flutter does it identifies the

00:22:04,480 --> 00:22:09,670
widget which change which we change and

00:22:07,240 --> 00:22:11,440
it only renders that widget so it

00:22:09,670 --> 00:22:13,090
maintains something called States so

00:22:11,440 --> 00:22:14,679
it's just refresh a state that's it

00:22:13,090 --> 00:22:17,080
instead of building the entire

00:22:14,679 --> 00:22:21,510
application it refreshed the state which

00:22:17,080 --> 00:22:25,270
which which what you call which which

00:22:21,510 --> 00:22:27,640
which which which helps to change the

00:22:25,270 --> 00:22:33,580
color to in order to blue from blue to

00:22:27,640 --> 00:22:35,410
red so okay I'll quickly go like since I

00:22:33,580 --> 00:22:38,410
have a very limited time so flutter

00:22:35,410 --> 00:22:40,630
flutter has something called in flutter

00:22:38,410 --> 00:22:42,549
every UI a button or whatever the thing

00:22:40,630 --> 00:22:46,510
we use it's everything we call as a blog

00:22:42,549 --> 00:22:49,630
widget so in flatter may be a button or

00:22:46,510 --> 00:22:52,110
a menu it's a widget in a fun color

00:22:49,630 --> 00:22:54,370
scheme or whatever the padding stuff

00:22:52,110 --> 00:22:57,160
aspect of layout all those stuff are

00:22:54,370 --> 00:23:00,250
which are better even if you assume that

00:22:57,160 --> 00:23:02,590
you want to capture a tap gesture user

00:23:00,250 --> 00:23:04,840
capture user tap or something like even

00:23:02,590 --> 00:23:07,870
it's a feature so you can have tail a

00:23:04,840 --> 00:23:10,000
lot of widgets inside you widget folder

00:23:07,870 --> 00:23:11,620
so you can reuse them assume that you

00:23:10,000 --> 00:23:13,570
are creating a custom button and you

00:23:11,620 --> 00:23:15,669
don't need to write it twice oh you just

00:23:13,570 --> 00:23:16,660
need to know you don't need to just

00:23:15,669 --> 00:23:18,940
import it everywhere

00:23:16,660 --> 00:23:21,780
you just create a widget inside the

00:23:18,940 --> 00:23:24,160
widget for just use it everywhere so

00:23:21,780 --> 00:23:26,590
basically what's a widget if you are

00:23:24,160 --> 00:23:30,490
considering this this part the app buys

00:23:26,590 --> 00:23:32,380
widget and the hello world text it's

00:23:30,490 --> 00:23:34,360
again another widget so the scaffold

00:23:32,380 --> 00:23:35,559
there's something called scaffold when

00:23:34,360 --> 00:23:37,480
you're creating the scaffold is a widget

00:23:35,559 --> 00:23:39,760
and the entire application is again

00:23:37,480 --> 00:23:42,429
widget so if you want to use this n type

00:23:39,760 --> 00:23:44,470
Age UK you just have to take the upper

00:23:42,429 --> 00:23:46,630
widget and you can use it so they

00:23:44,470 --> 00:23:50,200
maintain something a widget tree you can

00:23:46,630 --> 00:23:51,190
see like in this case we have a card

00:23:50,200 --> 00:23:51,850
card

00:23:51,190 --> 00:23:55,300
which are

00:23:51,850 --> 00:23:57,250
and this will be jet tree since my very

00:23:55,300 --> 00:23:59,530
I have very only short-term I'll moving

00:23:57,250 --> 00:24:02,680
on with fast so this you have you can

00:23:59,530 --> 00:24:04,180
just go through the Plata widgets you

00:24:02,680 --> 00:24:05,800
can just search for part of each there

00:24:04,180 --> 00:24:07,900
are a lot of widgets they have coming up

00:24:05,800 --> 00:24:10,060
with everything the shapes and also

00:24:07,900 --> 00:24:12,040
everything is widgets so they maintain

00:24:10,060 --> 00:24:13,480
the states you know - I told you I say

00:24:12,040 --> 00:24:14,740
instead of rebuilding that same

00:24:13,480 --> 00:24:17,620
application if the entire application

00:24:14,740 --> 00:24:19,990
they only refresh the state later into

00:24:17,620 --> 00:24:21,850
that part or you change so this is one

00:24:19,990 --> 00:24:24,610
of the key points that flutter it's it's

00:24:21,850 --> 00:24:27,400
capable of 60fps and you guys do you

00:24:24,610 --> 00:24:29,410
guys have an like do you guys have here

00:24:27,400 --> 00:24:32,080
about razor phones which you used to

00:24:29,410 --> 00:24:34,930
render games or graphics it has 100 FPS

00:24:32,080 --> 00:24:38,940
capable screens so even flatter supports

00:24:34,930 --> 00:24:41,470
hundred 280 FPS using the version one so

00:24:38,940 --> 00:24:43,420
this high level architecture we this is

00:24:41,470 --> 00:24:45,700
the I in documentation we just have

00:24:43,420 --> 00:24:48,160
three main paths the dart framework the

00:24:45,700 --> 00:24:52,570
Flatiron engine at the platform specific

00:24:48,160 --> 00:24:57,670
stuff this day I in documentation the

00:24:52,570 --> 00:24:59,200
entire diagram so flutter does not use

00:24:57,670 --> 00:25:02,440
OEM components I was talking about this

00:24:59,200 --> 00:25:05,020
so flutter uses that so because it if

00:25:02,440 --> 00:25:06,340
you are really comfortable with the Opie

00:25:05,020 --> 00:25:08,620
related language object-oriented

00:25:06,340 --> 00:25:10,420
language it's really how it's really the

00:25:08,620 --> 00:25:13,300
learning curve is very small you can

00:25:10,420 --> 00:25:15,130
just learn flutter within one week or

00:25:13,300 --> 00:25:17,020
two week and just you can play and you

00:25:15,130 --> 00:25:18,970
can make develop beautiful apps

00:25:17,020 --> 00:25:21,400
so it has fast allocation and

00:25:18,970 --> 00:25:22,930
predictable high performance the object

00:25:21,400 --> 00:25:25,110
orientation is there then the developer

00:25:22,930 --> 00:25:27,700
productivity so yeah

00:25:25,110 --> 00:25:30,460
in flutter you can achieve the both

00:25:27,700 --> 00:25:32,530
negative experience in Android side even

00:25:30,460 --> 00:25:34,720
you can write the if you want to see the

00:25:32,530 --> 00:25:36,880
native Android look and feel instead of

00:25:34,720 --> 00:25:38,890
your custom feel look and feel so you

00:25:36,880 --> 00:25:40,840
can have that tall so in flutter its

00:25:38,890 --> 00:25:42,670
building so it's free and open source

00:25:40,840 --> 00:25:45,670
even you can change the code and try out

00:25:42,670 --> 00:25:48,160
new things so you can use these lengths

00:25:45,670 --> 00:25:50,440
I said these are the people who use

00:25:48,160 --> 00:25:51,790
water the Alibaba application they

00:25:50,440 --> 00:25:54,910
entirely moved to flatter because of the

00:25:51,790 --> 00:25:57,940
rendering time because of 100 day if 120

00:25:54,910 --> 00:26:00,370
fps Alibaba is using under 20 fps to in

00:25:57,940 --> 00:26:03,580
order to render their mobile application

00:26:00,370 --> 00:26:06,160
Google ads now views flutter and these

00:26:03,580 --> 00:26:08,950
to Hamilton maybe you guys have used

00:26:06,160 --> 00:26:10,540
so they are also using even the JD so

00:26:08,950 --> 00:26:12,760
big brands are there they are moving to

00:26:10,540 --> 00:26:15,700
platter so one more thing that's what I

00:26:12,760 --> 00:26:18,060
was talking about so with the

00:26:15,700 --> 00:26:22,060
hummingbird project Plata is capable of

00:26:18,060 --> 00:26:24,640
one code base Windows application for

00:26:22,060 --> 00:26:28,270
your desktop a Mac OS application for

00:26:24,640 --> 00:26:30,820
your desktop application for IOT devices

00:26:28,270 --> 00:26:33,010
and also application for your mobile

00:26:30,820 --> 00:26:35,320
devices so only one code base covering

00:26:33,010 --> 00:26:37,410
every year so waiting for hummingbird

00:26:35,320 --> 00:26:40,300
project it's under development now so

00:26:37,410 --> 00:26:42,820
next big thing in next December so you

00:26:40,300 --> 00:26:44,890
can write one code base and have five or

00:26:42,820 --> 00:26:48,100
six apps for every platform isn't it

00:26:44,890 --> 00:26:50,230
cool that's why I'm telling start have a

00:26:48,100 --> 00:26:51,700
serious look at flutter start learning

00:26:50,230 --> 00:26:53,800
flat I it's it's it's kind of a

00:26:51,700 --> 00:26:56,560
investment you can just move to flutter

00:26:53,800 --> 00:26:58,120
in next December so this one of the

00:26:56,560 --> 00:27:01,360
applications which video can you see the

00:26:58,120 --> 00:27:04,480
shape how hard it is in how hardware to

00:27:01,360 --> 00:27:07,390
achieve that shape in what you call in

00:27:04,480 --> 00:27:09,520
Android you have to have important asset

00:27:07,390 --> 00:27:11,170
you have to do design it using a

00:27:09,520 --> 00:27:13,180
designer you have to get help from

00:27:11,170 --> 00:27:15,580
designer so the thing is there but still

00:27:13,180 --> 00:27:17,500
so in flatter there's something called

00:27:15,580 --> 00:27:19,450
GE clipper just to import GE clipper you

00:27:17,500 --> 00:27:22,420
can draw the shape you you give the

00:27:19,450 --> 00:27:25,060
points 0 0 that point and X and you can

00:27:22,420 --> 00:27:26,980
just curve when they just and all it's

00:27:25,060 --> 00:27:28,570
simple it's inbuilt you don't have to

00:27:26,980 --> 00:27:29,140
import anything from outside that's why

00:27:28,570 --> 00:27:32,310
it's fast

00:27:29,140 --> 00:27:37,330
so we'll I'll show you guys a kind of a

00:27:32,310 --> 00:27:44,260
quick how fast same application I same

00:27:37,330 --> 00:27:47,940
application using Android and see the

00:27:44,260 --> 00:27:47,940
same shape and the same homescreen

00:27:48,940 --> 00:27:53,440
how fast fat is see the shape is there I

00:27:51,970 --> 00:27:54,970
am importing the shape I am designing

00:27:53,440 --> 00:27:58,320
the shape and I am voting it to flutter

00:27:54,970 --> 00:27:58,320
the shape is already done

00:27:58,330 --> 00:28:06,159
I was using the same laptop

00:28:02,200 --> 00:28:08,259
I tried using same internet connection

00:28:06,159 --> 00:28:13,739
same everything same even the room

00:28:08,259 --> 00:28:13,739
temperature is same same place it's done

00:28:15,570 --> 00:28:24,999
two thousand years later so you can

00:28:23,559 --> 00:28:29,429
realize like if you are working on a

00:28:24,999 --> 00:28:29,429
large-scale project how fast fat is so

00:28:29,519 --> 00:28:38,139
yeah that's that's the end of my that's

00:28:34,479 --> 00:28:41,349
a light last slide of my presentation so

00:28:38,139 --> 00:28:42,879
yeah the hummingbird just dumped jump

00:28:41,349 --> 00:28:44,889
into flutter and try out some stuff

00:28:42,879 --> 00:28:46,269
because hummingbird is on the way when

00:28:44,889 --> 00:28:47,649
you have hummingbird it's it's it's

00:28:46,269 --> 00:28:52,710
going to be a real cool thing and it's

00:28:47,649 --> 00:28:52,710

YouTube URL: https://www.youtube.com/watch?v=oMedwVpdjEY


