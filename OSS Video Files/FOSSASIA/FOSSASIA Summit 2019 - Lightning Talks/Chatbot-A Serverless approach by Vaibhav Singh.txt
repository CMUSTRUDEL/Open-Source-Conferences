Title: Chatbot-A Serverless approach by Vaibhav Singh
Publication date: 2019-04-01
Playlist: FOSSASIA Summit 2019 - Lightning Talks
Description: 
	17 March 2019 10:55, Lecture Theatre

A chatbot which is serverless ðŸ˜›
Captions: 
	00:00:00,000 --> 00:00:04,820
morning guys great stock it had bought a

00:00:02,399 --> 00:00:04,820
sublist

00:00:05,509 --> 00:00:09,000
Who am I

00:00:06,990 --> 00:00:11,040
so I'll grab both I'm currently a

00:00:09,000 --> 00:00:12,719
software developer in star India and

00:00:11,040 --> 00:00:14,460
also an open source contributor and

00:00:12,719 --> 00:00:17,310
quantity to various projects for Google

00:00:14,460 --> 00:00:20,189
Facebook for say itself a very long term

00:00:17,310 --> 00:00:22,880
contributor of process here and

00:00:20,189 --> 00:00:22,880
everywhere I

00:00:23,849 --> 00:00:27,660
and everywhere I am known as we're

00:00:25,529 --> 00:00:30,289
posting 97 like on github Facebook

00:00:27,660 --> 00:00:30,289
claimed in Twitter

00:00:31,820 --> 00:00:36,140
so the next question is what is

00:00:33,350 --> 00:00:38,420
surveillance so surveillance is very new

00:00:36,140 --> 00:00:40,010
term for us because right now what we

00:00:38,420 --> 00:00:41,180
are doing is like we are making an

00:00:40,010 --> 00:00:43,190
application we are deploying it

00:00:41,180 --> 00:00:45,739
deploying it either on this solution so

00:00:43,190 --> 00:00:49,040
or any other like VMware anywhere

00:00:45,739 --> 00:00:51,850
contramar servers or cloud servers so

00:00:49,040 --> 00:00:54,260
what the heck is surveillance

00:00:51,850 --> 00:00:57,379
so basically surveillance computing

00:00:54,260 --> 00:00:59,449
allows you to basically deploy or

00:00:57,379 --> 00:01:00,800
basically focus on the code rather than

00:00:59,449 --> 00:01:02,540
focusing on deployment

00:01:00,800 --> 00:01:05,089
so rather than developer focusing on

00:01:02,540 --> 00:01:07,250
deployment like how the end-user will

00:01:05,089 --> 00:01:08,600
experience or what is the scalability

00:01:07,250 --> 00:01:10,310
and all you don't have to worry about

00:01:08,600 --> 00:01:12,800
you just deploy your code or write your

00:01:10,310 --> 00:01:15,979
code and the cloud provider is built a

00:01:12,800 --> 00:01:17,750
cost to take care for you next so

00:01:15,979 --> 00:01:19,130
without thinking about servers and don't

00:01:17,750 --> 00:01:20,479
require you to provision scale and

00:01:19,130 --> 00:01:22,369
manage your server so you don't have to

00:01:20,479 --> 00:01:23,920
require to like worry about like what is

00:01:22,369 --> 00:01:26,539
the operating system what is the

00:01:23,920 --> 00:01:30,320
dependencies and you don't have to

00:01:26,539 --> 00:01:32,360
basically focus on like what is what

00:01:30,320 --> 00:01:33,729
will be the environment which your

00:01:32,360 --> 00:01:35,660
application will be signing on

00:01:33,729 --> 00:01:38,530
everything will be taken care by the

00:01:35,660 --> 00:01:41,119
cloud provider or the service provider

00:01:38,530 --> 00:01:42,590
so that developer can focus on their

00:01:41,119 --> 00:01:46,390
corporate by the way this line is

00:01:42,590 --> 00:01:46,390
exactly from the ADA plus documentation

00:01:49,979 --> 00:01:55,930
so previously what happened is like we

00:01:53,470 --> 00:01:57,640
basically developed app and we deploy on

00:01:55,930 --> 00:01:59,380
physical boxes like we have a physical

00:01:57,640 --> 00:02:02,619
server residing in our either on our

00:01:59,380 --> 00:02:04,659
home or either initiate spaces then we

00:02:02,619 --> 00:02:07,000
move to watch a machine like basically

00:02:04,659 --> 00:02:08,890
rather than using the whole virtual box

00:02:07,000 --> 00:02:10,929
for deploying our code we are using

00:02:08,890 --> 00:02:13,480
virtual machines and code and basically

00:02:10,929 --> 00:02:17,080
ten or ten or more people can basically

00:02:13,480 --> 00:02:19,959
deploy that code there their application

00:02:17,080 --> 00:02:21,970
on virtual machines then comes then a

00:02:19,959 --> 00:02:23,830
doubling is the a SS instances and they

00:02:21,970 --> 00:02:26,140
are very popular and people trying

00:02:23,830 --> 00:02:27,640
different like don't know about the like

00:02:26,140 --> 00:02:29,920
what is the cloud service and what is

00:02:27,640 --> 00:02:31,480
what is this then they started deploying

00:02:29,920 --> 00:02:32,530
they started learning about a doubles

00:02:31,480 --> 00:02:34,239
instance and they started deploying

00:02:32,530 --> 00:02:35,950
their code on the interviewers and they

00:02:34,239 --> 00:02:37,269
are very very lightning because a SS is

00:02:35,950 --> 00:02:40,060
managing the whole thing from

00:02:37,269 --> 00:02:42,010
scalability to everything else then we

00:02:40,060 --> 00:02:43,510
have containers like humanities and

00:02:42,010 --> 00:02:44,680
doctor has a most popular solution for

00:02:43,510 --> 00:02:45,250
the enterprise applications and

00:02:44,680 --> 00:02:48,610
developers

00:02:45,250 --> 00:02:51,459
so after containers we came to lambda

00:02:48,610 --> 00:02:54,220
lambda is just a a sickly so LS

00:02:51,459 --> 00:02:55,030
lambda is a product of AWS because I am

00:02:54,220 --> 00:02:57,160
using AWS

00:02:55,030 --> 00:02:58,720
for Google cloud you can use flower

00:02:57,160 --> 00:03:01,209
functions as well and SEO has your

00:02:58,720 --> 00:03:02,680
functions this they are they are

00:03:01,209 --> 00:03:04,269
different they are the same thing but

00:03:02,680 --> 00:03:06,010
the provided by different cloud

00:03:04,269 --> 00:03:09,070
providers

00:03:06,010 --> 00:03:10,209
so they are different oh I just like a

00:03:09,070 --> 00:03:12,640
patch of conveyux

00:03:10,209 --> 00:03:14,110
cool cloud web class AWS there are

00:03:12,640 --> 00:03:16,030
different cloud providers which

00:03:14,110 --> 00:03:19,739
basically provide you service

00:03:16,030 --> 00:03:23,170
functionality to you next like this

00:03:19,739 --> 00:03:24,910
currently I am using AWS as in my tech

00:03:23,170 --> 00:03:31,799
stack my I mean for my cloth for my

00:03:24,910 --> 00:03:36,700
cloud provider so what is lambda like

00:03:31,799 --> 00:03:39,130
first of all like why the heck AWS you

00:03:36,700 --> 00:03:41,230
the terminology lambda for having a

00:03:39,130 --> 00:03:44,890
surveillance function or service thing

00:03:41,230 --> 00:03:46,810
so lambda is a AWS product and as for

00:03:44,890 --> 00:03:48,190
basically so basically surveillance it

00:03:46,810 --> 00:03:50,950
means like you don't have to worry about

00:03:48,190 --> 00:03:52,720
first thing first you don't have to pay

00:03:50,950 --> 00:03:54,280
for the idle currently what happened is

00:03:52,720 --> 00:03:58,030
like we deploy our application and it's

00:03:54,280 --> 00:04:00,400
running on sour so cost money and you

00:03:58,030 --> 00:04:02,140
have to pay like when it's running so

00:04:00,400 --> 00:04:03,370
basically let's say you have a small

00:04:02,140 --> 00:04:04,659
idea

00:04:03,370 --> 00:04:06,610
in your mind and you are deployed like

00:04:04,659 --> 00:04:08,500
let's deploy it for end-users and see

00:04:06,610 --> 00:04:11,830
how the user reacting and you deployed

00:04:08,500 --> 00:04:14,049
or so it will be running 24/7 and you

00:04:11,830 --> 00:04:16,989
repaying you will paying for that and

00:04:14,049 --> 00:04:18,970
it's like it's very costly let's say you

00:04:16,989 --> 00:04:21,370
users are on like from 9:00 to 5:00 p.m.

00:04:18,970 --> 00:04:22,690
only or 9:00 to 8:00 p.m. only after

00:04:21,370 --> 00:04:24,550
that after the night you have to pay for

00:04:22,690 --> 00:04:26,590
the city for the idol you don't have to

00:04:24,550 --> 00:04:29,410
pay for the idol here

00:04:26,590 --> 00:04:31,720
easy scalability you don't have to worry

00:04:29,410 --> 00:04:33,790
about scalability like let's say you

00:04:31,720 --> 00:04:36,310
have got hit and you get a 1 million

00:04:33,790 --> 00:04:38,500
request on your app server the lambda is

00:04:36,310 --> 00:04:40,570
scale automatically Amazon scale your

00:04:38,500 --> 00:04:42,460
application automatically you don't have

00:04:40,570 --> 00:04:45,460
to change anything in your code to

00:04:42,460 --> 00:04:47,050
maintain for the scalability next

00:04:45,460 --> 00:04:49,960
question is what is first basically so

00:04:47,050 --> 00:04:52,810
LS also known as functional service

00:04:49,960 --> 00:04:55,690
because here we are writing functions so

00:04:52,810 --> 00:04:59,500
functions are not typically exact like

00:04:55,690 --> 00:05:01,060
the r programming language like python

00:04:59,500 --> 00:05:02,560
is a function java is a function you are

00:05:01,060 --> 00:05:06,000
it's not the same as a function that's

00:05:02,560 --> 00:05:06,000

YouTube URL: https://www.youtube.com/watch?v=ESP3X4iUikY


