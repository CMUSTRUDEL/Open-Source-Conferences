Title: Privacy and Decentralisation with Multicast - Brett Sheffield
Publication date: 2020-04-02
Playlist: FOSSASIA Summit 2020 - Internet, Society, Community
Description: 
	Written in 2001, RFC 3170 states: "IP Multicast will play a prominent role on the Internet in the coming years. It is a requirement, not an option, if the Internet is going to scale. Multicast allows application developers to add more functionality without significantly impacting the network."  Nearly two decades later, multicast is still largely ignored and misunderstood.  There are many common misconceptions about multicast, including that it is only useful for streaming video and audio. It does so much more than that.  This talk explains why multicast is the missing piece in the decentralisation puzzle, how multicast can help the Internet continue to scale, better protect our privacy and democracy, solve IoT problems and make polar bears happier at the same time.

FOSSASIA Summit 2020 - Internet, Society, Community

Speaker: Brett Sheffield, Librecast Project
Captions: 
	00:00:05,899 --> 00:00:17,010
okay that's legible thank you well first

00:00:14,340 --> 00:00:18,869
of all thank you to everyone for for

00:00:17,010 --> 00:00:21,949
coming and thank you to the organizers

00:00:18,869 --> 00:00:25,189
for persevering with what has been a

00:00:21,949 --> 00:00:27,869
challenging year for Foss Asia I gather

00:00:25,189 --> 00:00:30,750
there's a lot less people here or fewer

00:00:27,869 --> 00:00:32,309
people here than were expected and thank

00:00:30,750 --> 00:00:33,930
you to the many speakers who have

00:00:32,309 --> 00:00:35,910
managed to make it and to those who've

00:00:33,930 --> 00:00:38,399
managed to do their their presentations

00:00:35,910 --> 00:00:41,610
remotely we were fortunate to get into

00:00:38,399 --> 00:00:45,629
the country early so we happen to

00:00:41,610 --> 00:00:50,160
actually be on site now I'm gonna try a

00:00:45,629 --> 00:00:52,199
bit of a stunt in a moment given the

00:00:50,160 --> 00:00:56,309
current circumstances what I'm gonna do

00:00:52,199 --> 00:00:58,440
I need an assistant for this we're gonna

00:00:56,309 --> 00:01:01,590
shake hands now don't try this at home

00:00:58,440 --> 00:01:09,150
I can't stress that enough not even for

00:01:01,590 --> 00:01:12,570
a joke okay so if you want to come out

00:01:09,150 --> 00:01:14,220
here now just just before we start there

00:01:12,570 --> 00:01:16,320
it's just I'm from the libre caste

00:01:14,220 --> 00:01:19,200
project it's now part of the NL net

00:01:16,320 --> 00:01:21,630
foundation and part of the NGO zero

00:01:19,200 --> 00:01:24,630
program for that which aims to build a

00:01:21,630 --> 00:01:29,610
better decentralized Internet

00:01:24,630 --> 00:01:33,900
but before I begin I just want to give

00:01:29,610 --> 00:01:37,770
you a choice we could do this talk in a

00:01:33,900 --> 00:01:40,350
in a unicast way or we can do it in a

00:01:37,770 --> 00:01:41,520
multicast way now just before I get you

00:01:40,350 --> 00:01:44,640
to vote I just want to show you what

00:01:41,520 --> 00:01:46,890
that might be like in a in a unicast

00:01:44,640 --> 00:01:48,659
world we need to start obviously with a

00:01:46,890 --> 00:01:51,960
handshake again don't try this at home

00:01:48,659 --> 00:01:53,790
this is TCP handshake now we need

00:01:51,960 --> 00:01:55,530
obviously to maintain that handshake

00:01:53,790 --> 00:01:57,329
throughout the talk and that's that's

00:01:55,530 --> 00:02:00,509
going to be about an hour and then if

00:01:57,329 --> 00:02:03,060
you'd all like to form a queue behind

00:02:00,509 --> 00:02:07,079
this lovely lady I'll deliver the talk

00:02:03,060 --> 00:02:09,149
to you one at a time okay now obviously

00:02:07,079 --> 00:02:10,770
I'm being ridiculous we can be a bit

00:02:09,149 --> 00:02:12,290
smarter than that in the unicast world

00:02:10,770 --> 00:02:14,719
I've got I've got

00:02:12,290 --> 00:02:17,030
one I could probably do two of you at

00:02:14,719 --> 00:02:20,810
once you could attach to my legs and

00:02:17,030 --> 00:02:23,390
then basically I need to deliver a few

00:02:20,810 --> 00:02:26,239
lines deliver those same few lines over

00:02:23,390 --> 00:02:28,870
here here here and I'm doing this

00:02:26,239 --> 00:02:32,200
multicast I saw a unicast dance

00:02:28,870 --> 00:02:35,510
basically now thank you

00:02:32,200 --> 00:02:40,129
obviously in in the unicast world we

00:02:35,510 --> 00:02:43,400
have some some other options you know we

00:02:40,129 --> 00:02:45,489
can use caching and CD ends and so on to

00:02:43,400 --> 00:02:48,709
all get around the fact that

00:02:45,489 --> 00:02:52,310
fundamentally unicast doesn't work an

00:02:48,709 --> 00:02:54,230
internet scope it just doesn't we've had

00:02:52,310 --> 00:02:58,400
to keep hacking it and hacking it to

00:02:54,230 --> 00:03:03,260
make it work and so that's where we are

00:02:58,400 --> 00:03:06,260
today alternately I could deliver this

00:03:03,260 --> 00:03:08,480
talk to you in a multicast way now

00:03:06,260 --> 00:03:11,689
essentially by coming here or by joining

00:03:08,480 --> 00:03:15,919
in online you've performed a join on my

00:03:11,689 --> 00:03:18,019
multicast group thank you so you know

00:03:15,919 --> 00:03:19,459
there are other things you could be

00:03:18,019 --> 00:03:21,260
doing with your time but you've you've

00:03:19,459 --> 00:03:24,440
chosen to join this track of your own

00:03:21,260 --> 00:03:27,859
free will presumably and so essentially

00:03:24,440 --> 00:03:30,319
what I'm doing right now is multicast so

00:03:27,859 --> 00:03:36,220
quick show of hands who's who's for

00:03:30,319 --> 00:03:38,269
unicast mmm always one and multicast

00:03:36,220 --> 00:03:40,310
okay what again what are we going to do

00:03:38,269 --> 00:03:41,930
with the rest of our time then cuz you

00:03:40,310 --> 00:03:45,769
all seem to be convinced that multicast

00:03:41,930 --> 00:03:48,949
is a better way of doing things so that

00:03:45,769 --> 00:03:53,060
didn't take me very long at all back in

00:03:48,949 --> 00:03:56,209
2001 there was an RFC brought out RFC 31

00:03:53,060 --> 00:03:57,769
70 and it says this IP multicast will

00:03:56,209 --> 00:03:59,959
play a prominent role on the Internet in

00:03:57,769 --> 00:04:01,579
the coming years it's a requirement not

00:03:59,959 --> 00:04:04,189
an option if the Internet is going to

00:04:01,579 --> 00:04:06,019
scale multicast allows application

00:04:04,189 --> 00:04:08,120
developers to add more functionality

00:04:06,019 --> 00:04:14,620
without significantly impacting the

00:04:08,120 --> 00:04:14,620
network so that was 2001 what year is it

00:04:14,680 --> 00:04:20,180
we've we've been waiting a while we're

00:04:18,470 --> 00:04:21,380
not really doing a lot with multicast

00:04:20,180 --> 00:04:23,719
there's not much happening with on the

00:04:21,380 --> 00:04:25,350
internet very few people know much about

00:04:23,719 --> 00:04:27,360
it at all and

00:04:25,350 --> 00:04:30,900
a lot of what people do know or think

00:04:27,360 --> 00:04:33,510
they know is wrong so that's not great

00:04:30,900 --> 00:04:36,570
I'm gonna try and change that I want to

00:04:33,510 --> 00:04:40,440
change that perception of multicast I

00:04:36,570 --> 00:04:42,720
want to posit the idea that multicast is

00:04:40,440 --> 00:04:45,210
more efficient than unicast but it's

00:04:42,720 --> 00:04:47,940
more scalable than unicast that it can

00:04:45,210 --> 00:04:50,100
solve real world problems that it has

00:04:47,940 --> 00:04:52,230
privacy properties that might surprise

00:04:50,100 --> 00:04:53,790
you that it is

00:04:52,230 --> 00:04:57,330
I feel the missing piece in the

00:04:53,790 --> 00:05:00,090
decentralization puzzle and that it can

00:04:57,330 --> 00:05:05,340
help make this polar bear a lot happier

00:05:00,090 --> 00:05:09,030
too so first of all what is multicast as

00:05:05,340 --> 00:05:13,670
anyone worked with multicast here okay

00:05:09,030 --> 00:05:16,350
got one hand right was that ipv6 or ipv4

00:05:13,670 --> 00:05:18,090
for unfortunately yeah we're not seeing

00:05:16,350 --> 00:05:22,230
a lot of people who had got recent

00:05:18,090 --> 00:05:24,180
experience with ipv6 multicast there are

00:05:22,230 --> 00:05:26,520
quite a few people who worked with ipv4

00:05:24,180 --> 00:05:28,530
multicast back in the mbone days and so

00:05:26,520 --> 00:05:30,840
on perhaps had a bad experience with it

00:05:28,530 --> 00:05:32,700
and have never come back so I'm here to

00:05:30,840 --> 00:05:34,800
tell you that ipv6 multicast is a lot

00:05:32,700 --> 00:05:37,320
better but first of all what's multicast

00:05:34,800 --> 00:05:41,820
in the first place let's start with a

00:05:37,320 --> 00:05:43,050
bit of a definition you may have come

00:05:41,820 --> 00:05:44,970
across this sort of thing if you've

00:05:43,050 --> 00:05:45,740
casually glanced at a textbook at some

00:05:44,970 --> 00:05:48,600
point

00:05:45,740 --> 00:05:51,110
unicast there's obviously one to one

00:05:48,600 --> 00:05:55,530
yeah we're all good with that and

00:05:51,110 --> 00:05:56,580
broadcast is one to all nodes not to

00:05:55,530 --> 00:05:58,950
useful on the Internet

00:05:56,580 --> 00:06:01,710
and in the ipv6 world it's been

00:05:58,950 --> 00:06:03,150
completely replaced by multicast which

00:06:01,710 --> 00:06:06,840
is one too many

00:06:03,150 --> 00:06:10,980
we're good with that okay well that's

00:06:06,840 --> 00:06:15,720
wrong no form of IP multicast in use

00:06:10,980 --> 00:06:19,110
today is one too many it's one to a

00:06:15,720 --> 00:06:21,990
group in the case of unicast you set the

00:06:19,110 --> 00:06:24,720
destination as the sender in the case of

00:06:21,990 --> 00:06:28,290
multicast you do not you send to a group

00:06:24,720 --> 00:06:31,320
you have no idea who is listening to

00:06:28,290 --> 00:06:33,570
that group in the case of this talk

00:06:31,320 --> 00:06:35,310
which I'm doing over multicast now in a

00:06:33,570 --> 00:06:38,639
multicast world I wouldn't know if

00:06:35,310 --> 00:06:41,069
there's anyone in the room the

00:06:38,639 --> 00:06:43,340
be nobody here there could be a million

00:06:41,069 --> 00:06:46,530
of you here and it simply doesn't matter

00:06:43,340 --> 00:06:49,620
the load on me as the speaker does not

00:06:46,530 --> 00:06:52,469
change when I was doing that unicast

00:06:49,620 --> 00:06:54,449
dance before the more connections I'm

00:06:52,469 --> 00:06:56,189
having to manage the harder it gets in

00:06:54,449 --> 00:06:59,219
the load on me goes up and up and I'm

00:06:56,189 --> 00:07:02,039
swapping and you know that is the

00:06:59,219 --> 00:07:03,180
unicast world in the multicast world it

00:07:02,039 --> 00:07:06,810
simply doesn't matter there can be a

00:07:03,180 --> 00:07:09,569
million nodes and I don't know or care

00:07:06,810 --> 00:07:12,060
if more people come into the room now I

00:07:09,569 --> 00:07:14,069
don't have to put any more effort into

00:07:12,060 --> 00:07:17,699
speaking to this audience

00:07:14,069 --> 00:07:20,310
that's how multicast works so there's a

00:07:17,699 --> 00:07:23,430
fundamental difference between unicast

00:07:20,310 --> 00:07:26,159
and broadcast on one hand and multicast

00:07:23,430 --> 00:07:28,349
on the other and it's this unicast and

00:07:26,159 --> 00:07:34,169
broadcast are push technologies and

00:07:28,349 --> 00:07:36,029
multicast is pull so we have a moment

00:07:34,169 --> 00:07:39,629
here to consider the philosophical

00:07:36,029 --> 00:07:41,879
question if a tree falls in the forest

00:07:39,629 --> 00:07:46,080
and nobody's listening

00:07:41,879 --> 00:07:48,779
is any data sent and in the case of

00:07:46,080 --> 00:07:50,939
multicast the answer's no it's all

00:07:48,779 --> 00:07:54,569
dropped by the first hop router or by

00:07:50,939 --> 00:07:56,490
your switch running MLD snooping or igmp

00:07:54,569 --> 00:07:59,430
snooping if you're stuck in an ipv4

00:07:56,490 --> 00:08:01,560
world that's quite an important property

00:07:59,430 --> 00:08:04,169
you can be sending on as many channels

00:08:01,560 --> 00:08:07,710
as you want and if nobody's listening no

00:08:04,169 --> 00:08:10,080
data is sent if one or more nodes are

00:08:07,710 --> 00:08:20,610
listening you are sending at most one

00:08:10,080 --> 00:08:24,560
copy of the data no problem just having

00:08:20,610 --> 00:08:27,360
a short break folks for part two

00:08:24,560 --> 00:08:27,960
consider this tree no we did that bit so

00:08:27,360 --> 00:08:29,580
yeah

00:08:27,960 --> 00:08:31,949
important keep that in your mind if

00:08:29,580 --> 00:08:33,649
nobody's listening no data is being sent

00:08:31,949 --> 00:08:36,360
we're going to return to that later

00:08:33,649 --> 00:08:38,610
there are misconceptions I find around

00:08:36,360 --> 00:08:40,589
multicast when I talk to people about it

00:08:38,610 --> 00:08:42,649
let's have a look at some of those the

00:08:40,589 --> 00:08:45,149
first is that it's only for streaming I

00:08:42,649 --> 00:08:47,550
hear that a lot

00:08:45,149 --> 00:08:49,709
secondly that whilst it might be good

00:08:47,550 --> 00:08:50,660
for streaming its of no use for video on

00:08:49,709 --> 00:08:52,550
demand

00:08:50,660 --> 00:08:55,129
you've got people wanting to watch the

00:08:52,550 --> 00:08:57,680
same video at different times there's

00:08:55,129 --> 00:08:59,569
there's no use case there I've heard

00:08:57,680 --> 00:09:02,029
that it's unreliable because it's it's

00:08:59,569 --> 00:09:02,769
based on UDP I've heard that it's

00:09:02,029 --> 00:09:06,649
unsecure

00:09:02,769 --> 00:09:09,110
from the CTO of one open-source startup

00:09:06,649 --> 00:09:10,550
in in Europe and I've heard that it

00:09:09,110 --> 00:09:12,800
can't work on the Internet

00:09:10,550 --> 00:09:15,379
now fortunately those are all wrong as

00:09:12,800 --> 00:09:17,689
we'll see in a moment multicast is

00:09:15,379 --> 00:09:20,350
essentially about group communication

00:09:17,689 --> 00:09:22,240
and the thing about that is all

00:09:20,350 --> 00:09:25,250
communication is group communication

00:09:22,240 --> 00:09:28,490
even one-to-one that's just a very small

00:09:25,250 --> 00:09:31,610
group that's the special case and the

00:09:28,490 --> 00:09:35,029
only case where unicast makes sense to

00:09:31,610 --> 00:09:39,620
use for all other cases multicast is

00:09:35,029 --> 00:09:42,290
more efficient so you are here well

00:09:39,620 --> 00:09:45,879
round the back of it a bit but basically

00:09:42,290 --> 00:09:51,199
here on this planet with at last count

00:09:45,879 --> 00:09:53,240
seven point seven billion people that's

00:09:51,199 --> 00:09:54,800
that's a whole lot of nodes that that

00:09:53,240 --> 00:09:56,389
want to communicate now on top of that

00:09:54,800 --> 00:09:59,149
you've got the Internet of Things with

00:09:56,389 --> 00:10:00,920
every fridge and washing machine and car

00:09:59,149 --> 00:10:02,540
that all need to talk to each other all

00:10:00,920 --> 00:10:07,459
of these robots that I was hearing about

00:10:02,540 --> 00:10:09,589
in the last talk that's that's a lot so

00:10:07,459 --> 00:10:10,819
they want to communicate in groups you

00:10:09,589 --> 00:10:13,939
might be communicating with your friends

00:10:10,819 --> 00:10:17,180
your family your colleagues but not that

00:10:13,939 --> 00:10:20,329
guy over there and that's fundamentally

00:10:17,180 --> 00:10:22,459
how all of our programs work it's it's

00:10:20,329 --> 00:10:23,720
group communication all of your web

00:10:22,459 --> 00:10:27,380
servers need to talk all of your

00:10:23,720 --> 00:10:29,000
database servers need to talk it's it's

00:10:27,380 --> 00:10:33,490
just how communication works we don't

00:10:29,000 --> 00:10:37,910
build standalone systems anymore and so

00:10:33,490 --> 00:10:40,750
we come to the elephant in the room the

00:10:37,910 --> 00:10:45,860
elephant in the room is that that big

00:10:40,750 --> 00:10:48,110
obvious thing that that we can all see

00:10:45,860 --> 00:10:50,600
but we're not talking about and in the

00:10:48,110 --> 00:10:52,730
case of multicast I'm standing here

00:10:50,600 --> 00:10:56,089
before you telling you that multicast is

00:10:52,730 --> 00:10:57,379
worthy of your time and RFC thirty one

00:10:56,089 --> 00:11:00,009
seventy that we were looking at earlier

00:10:57,379 --> 00:11:03,470
said that it's not just useful but

00:11:00,009 --> 00:11:04,400
necessary for the internet to scale and

00:11:03,470 --> 00:11:07,280
so the

00:11:04,400 --> 00:11:10,040
but in the room is that well if that's

00:11:07,280 --> 00:11:14,180
true then how's everything working at

00:11:10,040 --> 00:11:17,000
the moment we've things must be fine

00:11:14,180 --> 00:11:20,840
we've got our Facebook's and our you

00:11:17,000 --> 00:11:22,940
know various other applications there

00:11:20,840 --> 00:11:25,040
there are people presumably listening to

00:11:22,940 --> 00:11:26,900
this talk right now across this unicast

00:11:25,040 --> 00:11:32,810
Internet they're all being sent

00:11:26,900 --> 00:11:35,750
individual copies of it too but yeah is

00:11:32,810 --> 00:11:38,210
it working well I think there's there's

00:11:35,750 --> 00:11:42,920
fundamentally a problem with unicast and

00:11:38,210 --> 00:11:47,690
it's this this is a link Berkeley's a

00:11:42,920 --> 00:11:50,800
Google's Berkeley data center we're

00:11:47,690 --> 00:11:53,870
building an awful lot of these and

00:11:50,800 --> 00:11:55,610
they're all you know what's a data

00:11:53,870 --> 00:11:57,410
center it's is essentially a whole pile

00:11:55,610 --> 00:11:58,580
of compute computers in one place

00:11:57,410 --> 00:12:02,900
generating Heat

00:11:58,580 --> 00:12:06,050
no the massive substation in the

00:12:02,900 --> 00:12:09,350
foreground there these things don't run

00:12:06,050 --> 00:12:11,420
on double-a batteries so we're building

00:12:09,350 --> 00:12:13,250
these things at a fantastic rate to cope

00:12:11,420 --> 00:12:16,930
with the fact that you know the likes of

00:12:13,250 --> 00:12:19,610
Facebook and Google and Amazon and so on

00:12:16,930 --> 00:12:21,860
have all this data of yours to process

00:12:19,610 --> 00:12:27,770
now if you're sharing your cat pictures

00:12:21,860 --> 00:12:32,050
on Facebook how much of that do you

00:12:27,770 --> 00:12:35,180
think is serving that request

00:12:32,050 --> 00:12:37,730
you've got masses of data centers the

00:12:35,180 --> 00:12:42,020
vast majority of what's going on there

00:12:37,730 --> 00:12:43,970
is not serving you it's not providing

00:12:42,020 --> 00:12:47,120
the service that you are using it's

00:12:43,970 --> 00:12:48,890
analyzing that data figuring out who

00:12:47,120 --> 00:12:52,430
you're talking to who you might want to

00:12:48,890 --> 00:12:53,810
talk to profiling you turning you into a

00:12:52,430 --> 00:12:56,390
product because at the end of the day

00:12:53,810 --> 00:13:00,080
you are not paying for these services

00:12:56,390 --> 00:13:05,060
not with money anyway you're paying with

00:13:00,080 --> 00:13:07,210
your data so yeah this this is one of

00:13:05,060 --> 00:13:13,030
the problems with with the unicast is

00:13:07,210 --> 00:13:13,030
that we are working inefficiently and

00:13:13,090 --> 00:13:17,810
working with the unicast leads to

00:13:15,920 --> 00:13:19,970
centralized designs

00:13:17,810 --> 00:13:21,800
just what we need to do in order to make

00:13:19,970 --> 00:13:23,870
it work we have caching and CD ends and

00:13:21,800 --> 00:13:25,820
so on and massive centralized data

00:13:23,870 --> 00:13:28,430
centers in order to make things work in

00:13:25,820 --> 00:13:31,400
a unicast way so whilst it appears that

00:13:28,430 --> 00:13:35,570
unicast works internet scale it only

00:13:31,400 --> 00:13:37,490
does so because of that multicast leaves

00:13:35,570 --> 00:13:38,900
open the possibility of decentralized

00:13:37,490 --> 00:13:44,380
designs and that's what I want to talk

00:13:38,900 --> 00:13:46,430
to you about so why does it matter now

00:13:44,380 --> 00:13:52,250
I'm just gonna have a drink of water

00:13:46,430 --> 00:13:55,870
before I I cover this next bit it's

00:13:52,250 --> 00:14:01,160
always good to look at why in technology

00:13:55,870 --> 00:14:02,870
but I'm in Singapore and I looked at the

00:14:01,160 --> 00:14:04,670
travel advice for coming here and it

00:14:02,870 --> 00:14:07,490
pointed me at this which was on a

00:14:04,670 --> 00:14:09,460
government website it says the approval

00:14:07,490 --> 00:14:12,110
of the Ministry of Manpower is required

00:14:09,460 --> 00:14:14,120
if the speaker is a foreigner and is

00:14:12,110 --> 00:14:16,550
giving a talk on racial communal

00:14:14,120 --> 00:14:21,170
religious cause related or political

00:14:16,550 --> 00:14:22,430
topics now normally I have some

00:14:21,170 --> 00:14:25,100
political things in here that I would

00:14:22,430 --> 00:14:26,600
talk about when I'm referencing why but

00:14:25,100 --> 00:14:29,000
I can't do that so I need you to use

00:14:26,600 --> 00:14:30,589
your imagination and sort of fill in the

00:14:29,000 --> 00:14:34,089
blanks because I I don't want to get

00:14:30,589 --> 00:14:39,200
myself into trouble so with that in mind

00:14:34,089 --> 00:14:41,720
why does it matter that's a picture of

00:14:39,200 --> 00:14:46,970
Eleanor Roosevelt now she's holding a

00:14:41,720 --> 00:14:50,240
piece of paper there now look at that

00:14:46,970 --> 00:14:53,260
carefully and tell me do you think her

00:14:50,240 --> 00:14:55,460
hands are bigger than Donald Trump's I

00:14:53,260 --> 00:15:00,620
don't know I think they look a little

00:14:55,460 --> 00:15:03,050
bit bigger so the Internet is an amazing

00:15:00,620 --> 00:15:05,420
tool that we've built it's a very useful

00:15:03,050 --> 00:15:11,510
tool is useful for all sorts of things

00:15:05,420 --> 00:15:13,310
that I'm not allowed to talk about and I

00:15:11,510 --> 00:15:15,200
think that internet is under threat from

00:15:13,310 --> 00:15:18,980
a number of angles it's under threat

00:15:15,200 --> 00:15:22,820
from three main sources number one from

00:15:18,980 --> 00:15:26,690
criminals number two from corporations

00:15:22,820 --> 00:15:29,000
and number three here's a picture of

00:15:26,690 --> 00:15:30,560
downtown Singapore you've got some

00:15:29,000 --> 00:15:32,480
really big buildings in the back

00:15:30,560 --> 00:15:34,370
around there and I really love the

00:15:32,480 --> 00:15:37,960
contrast between the Red Roof on the one

00:15:34,370 --> 00:15:42,860
in the foreground and the white stone

00:15:37,960 --> 00:15:46,220
but okay let's go back to multicast

00:15:42,860 --> 00:15:50,210
efficiency matters every byte you waste

00:15:46,220 --> 00:15:54,980
every CPU cycle you waste is killing

00:15:50,210 --> 00:15:57,500
that polar bear we're building masses of

00:15:54,980 --> 00:15:59,150
these if we work in a more efficient way

00:15:57,500 --> 00:16:01,940
we can build fewer of them we're still

00:15:59,150 --> 00:16:03,470
going to need data centers obviously but

00:16:01,940 --> 00:16:05,870
if we build a more decentralized

00:16:03,470 --> 00:16:07,670
internet if we build our systems in a

00:16:05,870 --> 00:16:11,060
more decentralized way with peer-to-peer

00:16:07,670 --> 00:16:13,460
and multicast technologies we can make

00:16:11,060 --> 00:16:17,420
that polar bear and Greta tunberg a lot

00:16:13,460 --> 00:16:21,770
happier so there he is he's looking at

00:16:17,420 --> 00:16:23,510
you folks I think fundamentally the

00:16:21,770 --> 00:16:26,680
design goals of the Internet have

00:16:23,510 --> 00:16:29,060
changed back in the day we didn't really

00:16:26,680 --> 00:16:33,529
care too much about security it

00:16:29,060 --> 00:16:36,140
certainly wasn't a major feature you

00:16:33,529 --> 00:16:37,970
know we have protocols like telnet hands

00:16:36,140 --> 00:16:41,510
up if if you've ever administered a

00:16:37,970 --> 00:16:43,880
server over telnet come on yeah don't

00:16:41,510 --> 00:16:47,089
don't be shy don't be ashamed look we

00:16:43,880 --> 00:16:48,589
hadn't invented SSH back then so if

00:16:47,089 --> 00:16:51,110
you're gonna tell me that security was a

00:16:48,589 --> 00:16:53,860
primary design goal for the original

00:16:51,110 --> 00:16:56,860
internet protocols and yeah then I think

00:16:53,860 --> 00:16:59,089
yeah we need to have a bit of a chat

00:16:56,860 --> 00:17:01,160
likewise we're still using fundamental

00:16:59,089 --> 00:17:03,980
email protocols that are in clear-text

00:17:01,160 --> 00:17:06,709
and so on there's a bit of TLS shoved in

00:17:03,980 --> 00:17:08,689
there opportunistically but it's still

00:17:06,709 --> 00:17:10,870
fundamentally an insecure protocol we're

00:17:08,689 --> 00:17:17,839
only just now looking at moving to a

00:17:10,870 --> 00:17:21,740
secure web so I would argue that privacy

00:17:17,839 --> 00:17:26,650
and security and other human rights

00:17:21,740 --> 00:17:29,270
things that I can't talk about are more

00:17:26,650 --> 00:17:32,210
important to us now and if we were to

00:17:29,270 --> 00:17:34,670
desert to design the internet from

00:17:32,210 --> 00:17:36,410
scratch now and design those protocols

00:17:34,670 --> 00:17:39,020
from scratch now we would be thinking

00:17:36,410 --> 00:17:41,570
very differently for a start we know we

00:17:39,020 --> 00:17:44,350
need to support billions of nodes that

00:17:41,570 --> 00:17:47,420
just wasn't on the cards

00:17:44,350 --> 00:17:48,860
privacy and security are important well

00:17:47,420 --> 00:17:52,040
perhaps putting the source and

00:17:48,860 --> 00:17:54,350
destination address on every packet in

00:17:52,040 --> 00:17:56,780
our protocols is perhaps not the

00:17:54,350 --> 00:17:59,990
greatest of starting points everything

00:17:56,780 --> 00:18:03,590
we do after that is trying to recover

00:17:59,990 --> 00:18:06,290
from these fundamental privacy and

00:18:03,590 --> 00:18:08,480
security mistakes that we've made in the

00:18:06,290 --> 00:18:11,270
the underlying protocol so you can have

00:18:08,480 --> 00:18:13,040
all the tour and VPNs and so on you like

00:18:11,270 --> 00:18:16,370
but that's trying to get around the fact

00:18:13,040 --> 00:18:18,260
that you know at the IP level we're

00:18:16,370 --> 00:18:20,660
giving away who's talking to who on

00:18:18,260 --> 00:18:22,940
every single packet in the case of

00:18:20,660 --> 00:18:26,720
multicast there is no destination IP

00:18:22,940 --> 00:18:28,130
address on each packet there's just the

00:18:26,720 --> 00:18:30,830
group address and you don't know who's

00:18:28,130 --> 00:18:33,080
listening any more than I do so that's a

00:18:30,830 --> 00:18:36,380
huge privacy bonus and we haven't done

00:18:33,080 --> 00:18:37,280
any work yet so let's have a look at how

00:18:36,380 --> 00:18:39,830
we got here

00:18:37,280 --> 00:18:43,250
brief history of IP multicast in the

00:18:39,830 --> 00:18:45,560
beginning in the beginning the the very

00:18:43,250 --> 00:18:48,080
first RFC's that talk about multicast

00:18:45,560 --> 00:18:49,670
talked a bit about it like I I am now

00:18:48,080 --> 00:18:52,550
and that they talked about many to many

00:18:49,670 --> 00:18:53,090
applications and so on and then this

00:18:52,550 --> 00:18:57,770
happened

00:18:53,090 --> 00:19:00,350
the very first multicast protocol RFC

00:18:57,770 --> 00:19:04,270
that came out defined protocol

00:19:00,350 --> 00:19:06,980
independent multicast which basically

00:19:04,270 --> 00:19:08,560
the protocol independent bit means that

00:19:06,980 --> 00:19:12,680
it doesn't matter whether you're using

00:19:08,560 --> 00:19:14,570
rip or BGP or OSPF to manage your

00:19:12,680 --> 00:19:17,990
unicast routes as long as you've got

00:19:14,570 --> 00:19:20,660
that working we can do multicast on top

00:19:17,990 --> 00:19:23,600
of that so I like to call this unicast

00:19:20,660 --> 00:19:25,550
dependent multicast and basically every

00:19:23,600 --> 00:19:28,220
form of IP multicast we have running

00:19:25,550 --> 00:19:32,480
today depends on unicast I'd quite like

00:19:28,220 --> 00:19:35,630
to fix that but one step at a time so to

00:19:32,480 --> 00:19:38,030
get multicast working on a LAN you need

00:19:35,630 --> 00:19:39,860
in the ipv6 world which is all I'm

00:19:38,030 --> 00:19:44,890
interested in at the moment you need to

00:19:39,860 --> 00:19:46,880
turn on MLD snooping now for some reason

00:19:44,890 --> 00:19:52,280
despite the fact we're trying to push

00:19:46,880 --> 00:19:56,010
more towards a an ipv6 network an ipv6

00:19:52,280 --> 00:19:58,880
internet pretty much every switch

00:19:56,010 --> 00:20:01,530
has MLD snooping turned off by default

00:19:58,880 --> 00:20:03,090
now what that means is that when you're

00:20:01,530 --> 00:20:05,280
doing multicast on your land and if

00:20:03,090 --> 00:20:07,920
you're doing ipv6 you are doing

00:20:05,280 --> 00:20:12,330
multicast ipv6 does not work without

00:20:07,920 --> 00:20:14,970
multicast what that means is that switch

00:20:12,330 --> 00:20:18,120
looks like it's running a sort of late

00:20:14,970 --> 00:20:21,440
90s Windows network because it's doing

00:20:18,120 --> 00:20:24,300
broadcast the failure mode is open so

00:20:21,440 --> 00:20:26,760
multicast works but it's working like

00:20:24,300 --> 00:20:28,440
broadcast turn on one setting and while

00:20:26,760 --> 00:20:31,260
these snooping and now you have a proper

00:20:28,440 --> 00:20:34,440
multicast network where the switch is

00:20:31,260 --> 00:20:37,740
keeping track of which ports are

00:20:34,440 --> 00:20:41,400
interested in which groups and therefore

00:20:37,740 --> 00:20:45,420
it can send to exactly which which ports

00:20:41,400 --> 00:20:47,430
are interested so that seems daft to me

00:20:45,420 --> 00:20:49,440
I think switch manufacturers need to

00:20:47,430 --> 00:20:53,280
turn that on by default that's the most

00:20:49,440 --> 00:20:55,770
basic form of ipv6 support if you're

00:20:53,280 --> 00:20:58,980
running ipv6 and it's on by default with

00:20:55,770 --> 00:21:01,020
Linux Windows and Mac and you haven't

00:20:58,980 --> 00:21:02,700
turned that on your switch then just go

00:21:01,020 --> 00:21:04,890
and do it you'll save yourself some

00:21:02,700 --> 00:21:08,640
headaches on a large network it's it's

00:21:04,890 --> 00:21:11,270
very important but so so multicast on my

00:21:08,640 --> 00:21:15,680
LAN is very simple but to get to

00:21:11,270 --> 00:21:18,210
multicast beyond that first hop router

00:21:15,680 --> 00:21:20,460
we need to think about multicast routing

00:21:18,210 --> 00:21:24,840
of course and that means we need to talk

00:21:20,460 --> 00:21:26,580
about rendezvous points well go briefly

00:21:24,840 --> 00:21:29,040
into this this is a sort of thing that

00:21:26,580 --> 00:21:32,690
really should be the topic of a a

00:21:29,040 --> 00:21:35,640
workshop but just briefly to explain how

00:21:32,690 --> 00:21:37,650
multicast routing works let's consider

00:21:35,640 --> 00:21:39,710
this diagram it looks complicated but

00:21:37,650 --> 00:21:43,470
don't worry it's not not really so bad

00:21:39,710 --> 00:21:45,510
so imagine we've got a node here that's

00:21:43,470 --> 00:21:49,320
interested in joining a multicast group

00:21:45,510 --> 00:21:54,030
that's a bun - - over there it will send

00:21:49,320 --> 00:21:57,780
a join request to its local router

00:21:54,030 --> 00:22:01,650
saying I am interested in Group G this

00:21:57,780 --> 00:22:03,840
is a star comma G PIM join request the

00:22:01,650 --> 00:22:06,060
star means I don't care who's sending

00:22:03,840 --> 00:22:09,340
this is any sauce multicast and the

00:22:06,060 --> 00:22:13,600
group G is just any group you know

00:22:09,340 --> 00:22:17,470
that specific group brother so router

00:22:13,600 --> 00:22:18,820
five there it's it's got to do something

00:22:17,470 --> 00:22:21,160
with this joining request what does it

00:22:18,820 --> 00:22:22,510
do it doesn't know anything about this

00:22:21,160 --> 00:22:26,050
group in particular it doesn't know

00:22:22,510 --> 00:22:28,900
who's sending so what it does is it

00:22:26,050 --> 00:22:30,250
sends towards a rendezvous point so we

00:22:28,900 --> 00:22:32,050
need to configure somewhere on our

00:22:30,250 --> 00:22:35,020
network generally sort of one per

00:22:32,050 --> 00:22:36,730
autonomous system we need a rendezvous

00:22:35,020 --> 00:22:38,620
point somewhere it can be anywhere you

00:22:36,730 --> 00:22:41,020
generally put it centrally in your

00:22:38,620 --> 00:22:42,130
network but you can put it up there at

00:22:41,020 --> 00:22:45,520
router four if you like

00:22:42,130 --> 00:22:47,170
and so router five knows that router

00:22:45,520 --> 00:22:50,320
four is the rendezvous point and so it

00:22:47,170 --> 00:22:54,760
sends the join on to that rendezvous

00:22:50,320 --> 00:22:57,400
point and it keeps a note just here in

00:22:54,760 --> 00:23:01,150
it the interface that keeps a note of

00:22:57,400 --> 00:23:02,710
which interface was interested in that

00:23:01,150 --> 00:23:04,390
group and that's that's called the

00:23:02,710 --> 00:23:07,450
outgoing interface list

00:23:04,390 --> 00:23:09,640
oh I out and each router along the path

00:23:07,450 --> 00:23:11,500
does exactly the same so router two here

00:23:09,640 --> 00:23:14,380
also keeps an outgoing interface list

00:23:11,500 --> 00:23:17,410
saying that this interface here is

00:23:14,380 --> 00:23:19,390
interested in Group G that router knows

00:23:17,410 --> 00:23:22,240
that that one is and it all goes on to

00:23:19,390 --> 00:23:23,350
the rendezvous point so we get to the

00:23:22,240 --> 00:23:26,470
round over your point and what does it

00:23:23,350 --> 00:23:31,330
do well at the moment nothing it just

00:23:26,470 --> 00:23:34,240
kind of keeps a note of that and when a

00:23:31,330 --> 00:23:36,430
source wants to send that group then

00:23:34,240 --> 00:23:38,770
things can actually start so I would say

00:23:36,430 --> 00:23:40,600
one over here wants to send to this

00:23:38,770 --> 00:23:42,720
group so again it doesn't know what to

00:23:40,600 --> 00:23:45,280
do with it it sends it to its local

00:23:42,720 --> 00:23:47,530
router and their local router passes it

00:23:45,280 --> 00:23:50,980
on towards their rendezvous point now

00:23:47,530 --> 00:23:54,220
the wrong point has a source and a

00:23:50,980 --> 00:23:57,210
destination we can now build our source

00:23:54,220 --> 00:23:59,680
tree and the data can flow directly

00:23:57,210 --> 00:24:04,180
that's a simplified view of how it all

00:23:59,680 --> 00:24:07,300
works with any source multicast there

00:24:04,180 --> 00:24:09,760
are multiple different modes in ipv4 you

00:24:07,300 --> 00:24:12,130
had sparse and dense mode and this sort

00:24:09,760 --> 00:24:14,380
of thing in ipv6 land you only have

00:24:12,130 --> 00:24:16,020
sparse mode but you also have multiple

00:24:14,380 --> 00:24:18,490
different types you have bi-directional

00:24:16,020 --> 00:24:20,270
multicast which is good for many to many

00:24:18,490 --> 00:24:23,390
applications where

00:24:20,270 --> 00:24:26,450
the source tree you know the the data

00:24:23,390 --> 00:24:28,340
continues to run via the rendezvous

00:24:26,450 --> 00:24:31,670
point and you have have various other

00:24:28,340 --> 00:24:33,080
different modes so I'm not gonna go into

00:24:31,670 --> 00:24:36,950
them all just now I just want you to

00:24:33,080 --> 00:24:41,150
understand that that's the basis of any

00:24:36,950 --> 00:24:43,220
source multicast Starke emoji there is

00:24:41,150 --> 00:24:44,570
another kind of multicast that's become

00:24:43,220 --> 00:24:48,200
more popular called single source

00:24:44,570 --> 00:24:50,600
multicast and so you've got you still

00:24:48,200 --> 00:24:53,630
get your Group G but in this case you

00:24:50,600 --> 00:24:56,000
know the source IP address so that's

00:24:53,630 --> 00:24:58,160
that's s there so what does that look

00:24:56,000 --> 00:25:01,760
like you've got a bun to to here that

00:24:58,160 --> 00:25:04,820
still wants to join this group G but it

00:25:01,760 --> 00:25:07,220
knows that a bun to one is the is the

00:25:04,820 --> 00:25:09,200
sender how does it know that I might

00:25:07,220 --> 00:25:11,480
have done a DNS lookup or something it

00:25:09,200 --> 00:25:14,090
just knows that's where the data is

00:25:11,480 --> 00:25:16,929
coming from so you know that's your

00:25:14,090 --> 00:25:20,059
Netflix server over there or something

00:25:16,929 --> 00:25:23,510
so this and we have no rendezvous point

00:25:20,059 --> 00:25:25,160
we have no need and so we just send a

00:25:23,510 --> 00:25:30,550
join in this case we're saying join

00:25:25,160 --> 00:25:34,240
Ubuntu One Group G send the join across

00:25:30,550 --> 00:25:36,830
data can flow there's nothing else to it

00:25:34,240 --> 00:25:39,880
that's a lot simpler to configure and

00:25:36,830 --> 00:25:42,920
for some use cases that's all you need

00:25:39,880 --> 00:25:46,280
now for that to work on the global

00:25:42,920 --> 00:25:47,750
internet there's one setting that needs

00:25:46,280 --> 00:25:50,179
to be turned on turned on each

00:25:47,750 --> 00:25:54,800
individual intervening router it's off

00:25:50,179 --> 00:25:58,750
by default of course but yeah ipv6

00:25:54,800 --> 00:26:01,130
multicast routing and it just works

00:25:58,750 --> 00:26:02,480
there's no need to configure on Dovie

00:26:01,130 --> 00:26:04,880
points there's no need to do anything

00:26:02,480 --> 00:26:07,280
else I would really love to see that

00:26:04,880 --> 00:26:09,730
turned on by default so we have that an

00:26:07,280 --> 00:26:12,740
ml D snooping turned on on the switches

00:26:09,730 --> 00:26:15,020
we have a whole pile of things that we

00:26:12,740 --> 00:26:18,710
can do we can have a multicast internet

00:26:15,020 --> 00:26:20,900
a proper one so wish me luck with that

00:26:18,710 --> 00:26:23,330
in the meantime we need to work around

00:26:20,900 --> 00:26:25,880
the fact that the internet doesn't have

00:26:23,330 --> 00:26:31,820
a unique oh sorry multicast turned on by

00:26:25,880 --> 00:26:33,889
default it's I feel a big shortcoming

00:26:31,820 --> 00:26:40,289
that needs to be addressed

00:26:33,889 --> 00:26:44,999
so ipv6 multicast has some serious

00:26:40,289 --> 00:26:48,299
advantages over ipv4 multicast the first

00:26:44,999 --> 00:26:51,809
of which is the the namespace ipv6

00:26:48,299 --> 00:26:54,899
addresses have 112 bits in them of those

00:26:51,809 --> 00:26:57,239
a hundred and sorry 128 bits and of

00:26:54,899 --> 00:27:00,029
those 112 bits are reserved for

00:26:57,239 --> 00:27:02,599
multicast group addresses that's a whole

00:27:00,029 --> 00:27:05,399
lot of bits that's enough for an

00:27:02,599 --> 00:27:08,369
individual multicast group for every

00:27:05,399 --> 00:27:09,779
atom on the planet so yeah that's that's

00:27:08,369 --> 00:27:13,679
a bit to be getting on with we can do

00:27:09,779 --> 00:27:17,429
some fun things with that back in the

00:27:13,679 --> 00:27:19,979
day there was the mbone in the late 90s

00:27:17,429 --> 00:27:22,109
Rod Stewart concert over it it went out

00:27:19,979 --> 00:27:24,839
to basically every every continent if

00:27:22,109 --> 00:27:27,619
you had multicast running on your

00:27:24,839 --> 00:27:30,479
network and you wanted to talk to

00:27:27,619 --> 00:27:32,789
multicast and another multicast network

00:27:30,479 --> 00:27:36,629
you basically connected to this mbone

00:27:32,789 --> 00:27:38,909
backbone and all those bits of multicast

00:27:36,629 --> 00:27:41,219
internet could talk to each other met a

00:27:38,909 --> 00:27:44,549
lot of people who've used it just kind

00:27:41,219 --> 00:27:46,950
of fade it away it was ipv4 only there

00:27:44,549 --> 00:27:50,309
was another project called cast gate by

00:27:46,950 --> 00:27:51,989
the three University in Brussels which I

00:27:50,309 --> 00:27:53,729
think was a browser plug-in and some

00:27:51,989 --> 00:27:57,450
other bits and pieces that's been dead

00:27:53,729 --> 00:27:59,579
for more than 10 years now as well what

00:27:57,450 --> 00:28:01,799
I'm proposing is not new technology

00:27:59,579 --> 00:28:04,169
we've done this before but we've done it

00:28:01,799 --> 00:28:07,320
with ipv4 only and we did it at a time

00:28:04,169 --> 00:28:10,079
when we didn't really need multicast in

00:28:07,320 --> 00:28:11,909
the way we do now we need it now because

00:28:10,079 --> 00:28:13,529
of the scaling problems we have we need

00:28:11,909 --> 00:28:17,219
it now because of the privacy issues

00:28:13,529 --> 00:28:20,579
that we need to address and so on so

00:28:17,219 --> 00:28:23,369
there are ways that you can communicate

00:28:20,579 --> 00:28:26,639
from one multicast network to another

00:28:23,369 --> 00:28:29,459
through discontiguous bits of you know

00:28:26,639 --> 00:28:32,909
if you've got these disconnected parts

00:28:29,459 --> 00:28:34,739
of multicast networking if you're an

00:28:32,909 --> 00:28:35,629
autonomous system you basically run your

00:28:34,739 --> 00:28:38,149
own ISP

00:28:35,629 --> 00:28:40,320
then you can configure automatic

00:28:38,149 --> 00:28:41,999
multicast tunneling on your router and

00:28:40,320 --> 00:28:45,209
it will talk to another router that

00:28:41,999 --> 00:28:46,809
speaks AMT and you're good to go

00:28:45,209 --> 00:28:49,840
you can use

00:28:46,809 --> 00:28:53,169
various BGP tricks like anycast and so

00:28:49,840 --> 00:29:00,070
on to discover the other end points and

00:28:53,169 --> 00:29:02,769
off you go but ten minutes already well

00:29:00,070 --> 00:29:09,850
you know okay I need to hurry up let's

00:29:02,769 --> 00:29:14,019
skip a bit so we like tcp/ip because

00:29:09,850 --> 00:29:18,340
it's very reliable but are there other

00:29:14,019 --> 00:29:23,580
ways that we can find this tcp/ip like

00:29:18,340 --> 00:29:23,580
reliability and answer is yes we can so

00:29:27,899 --> 00:29:32,019
gonna have to skip over a few bits here

00:29:30,369 --> 00:29:35,710
to get to some of the fun stuff we have

00:29:32,019 --> 00:29:38,799
various things that we can do we can do

00:29:35,710 --> 00:29:41,409
knacks and replay in the tcp/ip world if

00:29:38,799 --> 00:29:42,850
I send you a bit of data and you know

00:29:41,409 --> 00:29:43,419
you send me an ACK to show that you've

00:29:42,850 --> 00:29:46,960
got it

00:29:43,419 --> 00:29:48,490
that's not very good if there's a lot of

00:29:46,960 --> 00:29:50,710
nodes out there if you all send me an

00:29:48,490 --> 00:29:52,269
ACK that's probably gonna Dass me so

00:29:50,710 --> 00:29:56,379
what we do instead is we send an ACK

00:29:52,269 --> 00:29:58,450
I send packets 1 2 3 & 5 and you send an

00:29:56,379 --> 00:30:02,019
ACK back saying I haven't got packet 4

00:29:58,450 --> 00:30:03,820
and then I just repeat that to you we

00:30:02,019 --> 00:30:04,480
can also do loop and repeaters I'll show

00:30:03,820 --> 00:30:07,389
you in a moment

00:30:04,480 --> 00:30:09,100
that's Voyager 1 it uses forwards error

00:30:07,389 --> 00:30:11,259
correction out of the outer reaches of

00:30:09,100 --> 00:30:14,289
our solar system in high latency

00:30:11,259 --> 00:30:16,210
environments forwards error correction

00:30:14,289 --> 00:30:17,740
that lets you encode a little bit of

00:30:16,210 --> 00:30:19,539
extra data in each packet so if you're

00:30:17,740 --> 00:30:24,159
missing one you just rebuild it from the

00:30:19,539 --> 00:30:25,749
other packets multicast applications

00:30:24,159 --> 00:30:27,340
pretty much everything is a multicast

00:30:25,749 --> 00:30:29,049
application because everything is group

00:30:27,340 --> 00:30:31,869
communication we're building chat

00:30:29,049 --> 00:30:34,629
applications that are fundamentally

00:30:31,869 --> 00:30:37,240
multicast and so on but we're building

00:30:34,629 --> 00:30:39,279
it up here at layer 7 we're doing

00:30:37,240 --> 00:30:43,269
multicast but doing it right up there we

00:30:39,279 --> 00:30:45,940
can do it down here so let's keep that

00:30:43,269 --> 00:30:48,539
polar bear polar bear happy run through

00:30:45,940 --> 00:30:50,799
for some multicast party tricks briefly

00:30:48,539 --> 00:30:53,230
video streaming and conferencing they're

00:30:50,799 --> 00:30:56,649
not much fun although video conferencing

00:30:53,230 --> 00:30:58,269
is quite useful right now replication

00:30:56,649 --> 00:30:59,860
and consensus they're all very good but

00:30:58,269 --> 00:31:00,820
let's get to the fun stuff let's look at

00:30:59,860 --> 00:31:04,040
DNS

00:31:00,820 --> 00:31:05,540
purpose of DNS is essentially to map a

00:31:04,040 --> 00:31:07,460
human-readable address to a

00:31:05,540 --> 00:31:10,940
machine-readable address what does that

00:31:07,460 --> 00:31:13,400
look like in the multicast world we can

00:31:10,940 --> 00:31:15,140
do this this is an ipv6 multicast

00:31:13,400 --> 00:31:17,420
address so it starts with 8 bits that

00:31:15,140 --> 00:31:20,360
are all 1 to say it's multicast then

00:31:17,420 --> 00:31:21,920
it's got 4 bits of flags and then I've

00:31:20,360 --> 00:31:25,520
chucked an e in there which means the

00:31:21,920 --> 00:31:26,840
scope is global and then I've got 112

00:31:25,520 --> 00:31:31,340
bits to play with for the group address

00:31:26,840 --> 00:31:33,230
so I can do silly things like this we

00:31:31,340 --> 00:31:35,180
all just need to agree on where

00:31:33,230 --> 00:31:37,760
example.com is yeah that's the purpose

00:31:35,180 --> 00:31:40,340
of DNS well we just did

00:31:37,760 --> 00:31:42,620
we've not consulted any centralized

00:31:40,340 --> 00:31:44,030
servers at all and we all know that's

00:31:42,620 --> 00:31:48,260
where it is that will be a very short

00:31:44,030 --> 00:31:50,900
RFC no it didn't get a little more

00:31:48,260 --> 00:31:52,850
complicated than that but let's look at

00:31:50,900 --> 00:31:56,180
a chat application

00:31:52,850 --> 00:31:58,550
I built this it's up on github just as

00:31:56,180 --> 00:32:01,070
an example but essentially we've got a

00:31:58,550 --> 00:32:03,710
forking HTTP daemon here running the

00:32:01,070 --> 00:32:06,230
Libre cast libraries and that's plugged

00:32:03,710 --> 00:32:09,940
into a virtual bridge so no real

00:32:06,230 --> 00:32:12,980
interface is involved here at all and

00:32:09,940 --> 00:32:14,450
you've got a standard HTTP connection

00:32:12,980 --> 00:32:16,690
coming in here that gets upgraded to a

00:32:14,450 --> 00:32:19,490
WebSocket yeah a bit of JavaScript

00:32:16,690 --> 00:32:24,470
WebSocket good to go all following so

00:32:19,490 --> 00:32:26,480
far so we get a couple more connections

00:32:24,470 --> 00:32:29,450
coming into this web server and they're

00:32:26,480 --> 00:32:32,450
all talking to this virtual bridge this

00:32:29,450 --> 00:32:33,500
is a use case for multicast where not

00:32:32,450 --> 00:32:34,880
only is there not going across the

00:32:33,500 --> 00:32:35,870
internet or you know it's not leaving

00:32:34,880 --> 00:32:37,580
the data center it's not actually

00:32:35,870 --> 00:32:39,380
leaving the Linux kernel it's just all

00:32:37,580 --> 00:32:44,330
happening inside here but I'm using

00:32:39,380 --> 00:32:47,600
multicast to organize groups essentially

00:32:44,330 --> 00:32:50,120
think IRC but I'm generating multicast

00:32:47,600 --> 00:32:51,680
groups for each Channel and all the

00:32:50,120 --> 00:32:56,240
state is being tracked at the network

00:32:51,680 --> 00:32:57,770
level which is fun but what if we

00:32:56,240 --> 00:33:00,890
plugged that into a real multicast

00:32:57,770 --> 00:33:03,890
network then we can do things like stick

00:33:00,890 --> 00:33:06,500
your github webhook in there so if it

00:33:03,890 --> 00:33:07,760
receives some information from github

00:33:06,500 --> 00:33:09,110
that you've just pushed to commit then

00:33:07,760 --> 00:33:10,940
that can get published to the channel

00:33:09,110 --> 00:33:14,270
again there's a sample of that and get

00:33:10,940 --> 00:33:17,840
or some other app but what if we

00:33:14,270 --> 00:33:21,980
this instead we plug another whole

00:33:17,840 --> 00:33:24,950
server in another you know chat server

00:33:21,980 --> 00:33:28,429
and what we've actually done there is

00:33:24,950 --> 00:33:32,870
we've got Federation with zero lines of

00:33:28,429 --> 00:33:34,550
code no you know hundreds of thousands

00:33:32,870 --> 00:33:37,250
of lines of code or thousands of lines

00:33:34,550 --> 00:33:41,300
of code zip lines of code it's all taken

00:33:37,250 --> 00:33:43,160
care of at the network layer so if

00:33:41,300 --> 00:33:45,380
you've got a server over here in

00:33:43,160 --> 00:33:47,929
Singapore you've got a server ola and

00:33:45,380 --> 00:33:49,970
we're all on the Foss Asia channel here

00:33:47,929 --> 00:33:51,590
in Singapore all these people are

00:33:49,970 --> 00:33:54,400
talking away on the for say sure channel

00:33:51,590 --> 00:33:58,640
no traffic is going across this link

00:33:54,400 --> 00:34:01,309
it's just automatic there's no logic in

00:33:58,640 --> 00:34:03,980
there to keep track of that state but as

00:34:01,309 --> 00:34:06,920
soon as somebody in LA says I want to

00:34:03,980 --> 00:34:09,230
join the Foss Asia channel one an only

00:34:06,920 --> 00:34:11,330
one copy of the data flows across this

00:34:09,230 --> 00:34:15,050
link no matter how many thousands of

00:34:11,330 --> 00:34:19,179
people are into that channel I think

00:34:15,050 --> 00:34:23,990
that's pretty cool unicast can't do that

00:34:19,179 --> 00:34:26,300
so this is a bit of what the API looks

00:34:23,990 --> 00:34:29,330
like it looked very familiar if you're

00:34:26,300 --> 00:34:31,070
you've worked with 0 mq that's

00:34:29,330 --> 00:34:31,850
deliberate but let's look at another

00:34:31,070 --> 00:34:34,399
example

00:34:31,850 --> 00:34:38,119
IOT updates we want to send a file out

00:34:34,399 --> 00:34:40,010
to a million or a billion nodes and the

00:34:38,119 --> 00:34:44,000
only resource we have is one tiny little

00:34:40,010 --> 00:34:45,740
virtual server so I'll skip over the

00:34:44,000 --> 00:34:48,740
code it's up on github if you want to

00:34:45,740 --> 00:34:53,409
see it it's 90 source lines of C for the

00:34:48,740 --> 00:34:56,090
server so what we send is a UDP Datagram

00:34:53,409 --> 00:34:59,000
multicast works over UDP and it's got to

00:34:56,090 --> 00:35:01,369
check some of the file the size of the

00:34:59,000 --> 00:35:03,859
file the size of the chunk that we're

00:35:01,369 --> 00:35:06,650
sending now they're offset from the

00:35:03,859 --> 00:35:08,600
beginning of the file so 0 means this

00:35:06,650 --> 00:35:11,119
bit of data belongs at the beginning of

00:35:08,600 --> 00:35:14,810
the file and obviously a chunk of data

00:35:11,119 --> 00:35:17,619
so that's what we're sending so on the

00:35:14,810 --> 00:35:21,380
client side we just create a memory map

00:35:17,619 --> 00:35:23,150
sparse file if you will and we start

00:35:21,380 --> 00:35:26,030
receiving some data so some data turns

00:35:23,150 --> 00:35:27,300
up and it's got a length of four and an

00:35:26,030 --> 00:35:29,640
offset of zero so

00:35:27,300 --> 00:35:32,220
we plunk it in there and then we get

00:35:29,640 --> 00:35:35,730
another bit that's got an offset of four

00:35:32,220 --> 00:35:38,040
so it clunks in there but this is UDP

00:35:35,730 --> 00:35:41,400
it's unreliable these packets could

00:35:38,040 --> 00:35:43,440
arrive in any order we don't care we've

00:35:41,400 --> 00:35:44,640
got our offset we know where it goes we

00:35:43,440 --> 00:35:48,180
keep track of how much data we've

00:35:44,640 --> 00:35:50,880
received when we've got enough data we

00:35:48,180 --> 00:35:53,610
run our checksum and if it matches we've

00:35:50,880 --> 00:35:56,310
just updated a million a billion nodes

00:35:53,610 --> 00:35:58,050
we don't know doesn't matter so if

00:35:56,310 --> 00:35:59,520
you've got a whole pile of IOT nodes to

00:35:58,050 --> 00:36:01,190
update and you've got a multicast

00:35:59,520 --> 00:36:06,530
network you're in luck

00:36:01,190 --> 00:36:06,530
the load on the server does not change

00:36:06,590 --> 00:36:13,440
you could run the entire static web

00:36:09,440 --> 00:36:15,780
using that method and you wouldn't need

00:36:13,440 --> 00:36:19,350
any CD ends or proxies or caching or

00:36:15,780 --> 00:36:20,760
anything it just works so what about

00:36:19,350 --> 00:36:22,950
reliability and floor control

00:36:20,760 --> 00:36:25,110
well multicast lets us do some things

00:36:22,950 --> 00:36:27,780
that unicast just can't do as well so

00:36:25,110 --> 00:36:30,060
we've got G one here this is a multicast

00:36:27,780 --> 00:36:33,810
group and we're sending packets one two

00:36:30,060 --> 00:36:36,060
three four so what if that's too fast

00:36:33,810 --> 00:36:38,640
for you I'm sending it one rate you

00:36:36,060 --> 00:36:42,000
might be on a slow Network if that's too

00:36:38,640 --> 00:36:44,220
slow for you well I could send it a

00:36:42,000 --> 00:36:45,810
slower rate but then that's gonna be

00:36:44,220 --> 00:36:48,090
very very annoying for those of you on

00:36:45,810 --> 00:36:49,380
fast networks so what do we do in TCP

00:36:48,090 --> 00:36:52,050
we've got all sorts of ways of

00:36:49,380 --> 00:36:55,320
negotiating but UDP we don't have that

00:36:52,050 --> 00:36:56,750
and certainly UDP multicast we don't

00:36:55,320 --> 00:36:59,880
have that because I can't negotiate

00:36:56,750 --> 00:37:02,400
different rates with a million nodes but

00:36:59,880 --> 00:37:05,910
multicast does have a trickle but sleeve

00:37:02,400 --> 00:37:08,580
you can do this remember that tree

00:37:05,910 --> 00:37:12,990
earlier if nobody's listening no data is

00:37:08,580 --> 00:37:16,080
sent so we can if you want the data at

00:37:12,990 --> 00:37:16,980
half the speed just join Group one if

00:37:16,080 --> 00:37:19,920
you want the data

00:37:16,980 --> 00:37:21,540
flatout join groups one and two we can

00:37:19,920 --> 00:37:23,520
split that over four groups if you like

00:37:21,540 --> 00:37:26,190
or a hundred it doesn't matter if

00:37:23,520 --> 00:37:29,820
nobody's listening no data is sent these

00:37:26,190 --> 00:37:32,070
things are just looping through so

00:37:29,820 --> 00:37:35,190
there's your flow control what about

00:37:32,070 --> 00:37:37,380
reliability well not this one's a good

00:37:35,190 --> 00:37:41,200
idea but you can do silly tricks like

00:37:37,380 --> 00:37:43,450
this send the data slightly delayed

00:37:41,200 --> 00:37:45,760
another group again if nobody wants it

00:37:43,450 --> 00:37:47,740
you're not sending any data if you

00:37:45,760 --> 00:37:50,140
missed a packet or just tuned into group

00:37:47,740 --> 00:37:51,670
2 and you get a little bit later just

00:37:50,140 --> 00:37:57,310
like pressing the red button on your TV

00:37:51,670 --> 00:38:00,490
for a you know replay WebRTC has some

00:37:57,310 --> 00:38:02,560
interesting properties this I'm working

00:38:00,490 --> 00:38:07,050
with on a project called Libre cast live

00:38:02,560 --> 00:38:10,869
at the moment basically we are building

00:38:07,050 --> 00:38:12,730
decentralized streaming a twitch like

00:38:10,869 --> 00:38:14,560
service that's decentralized and

00:38:12,730 --> 00:38:20,440
federated using multicast in the data

00:38:14,560 --> 00:38:23,170
center and basically WebRTC lets you

00:38:20,440 --> 00:38:24,670
send different quality strains as it's

00:38:23,170 --> 00:38:26,380
called simulcasting so you've got those

00:38:24,670 --> 00:38:28,060
three colors represent three different

00:38:26,380 --> 00:38:30,849
quality streams you've got a low quality

00:38:28,060 --> 00:38:33,240
stream if you want a medium stream then

00:38:30,849 --> 00:38:36,220
you join the low quality stream and the

00:38:33,240 --> 00:38:37,660
medium stream together and if you want

00:38:36,220 --> 00:38:40,720
the high quality then you join that as

00:38:37,660 --> 00:38:43,359
well so in the case of audio and video

00:38:40,720 --> 00:38:45,640
if we want lower quality we can actually

00:38:43,359 --> 00:38:46,930
just drop packets your ear or fill in

00:38:45,640 --> 00:38:48,190
the difference it's a little bit more

00:38:46,930 --> 00:38:49,450
complicated with video but in the case

00:38:48,190 --> 00:38:52,930
of audio that's literally it

00:38:49,450 --> 00:38:56,050
drop some packets and you know that's

00:38:52,930 --> 00:38:58,119
that's why we do sip over UDP for

00:38:56,050 --> 00:39:02,020
example a late packet is a useless

00:38:58,119 --> 00:39:04,990
packet in the case of live streaming but

00:39:02,020 --> 00:39:10,420
with in the case of a unicast set up

00:39:04,990 --> 00:39:13,329
with with WebRTC if you've got a source

00:39:10,420 --> 00:39:14,770
here that's sending a stream you've got

00:39:13,329 --> 00:39:17,349
a media server here that needs to

00:39:14,770 --> 00:39:19,359
disseminate that stream to other media

00:39:17,349 --> 00:39:22,660
servers and the clients that are joined

00:39:19,359 --> 00:39:24,310
to those media servers then each of

00:39:22,660 --> 00:39:26,520
these media servers needs to keep track

00:39:24,310 --> 00:39:29,980
of state they need to know who is

00:39:26,520 --> 00:39:31,900
listening to what and what quality

00:39:29,980 --> 00:39:33,280
stream to send them so this one here is

00:39:31,900 --> 00:39:35,589
getting all three and therefore it's got

00:39:33,280 --> 00:39:37,180
a high quality stream this one over here

00:39:35,589 --> 00:39:41,319
is only getting the low quality stream

00:39:37,180 --> 00:39:43,150
and in the case of unicast

00:39:41,319 --> 00:39:45,130
each of these servers is keeping track

00:39:43,150 --> 00:39:47,410
of all that this server has got nobody

00:39:45,130 --> 00:39:50,230
joining so it doesn't need any any

00:39:47,410 --> 00:39:52,470
traffic but obviously with multicast

00:39:50,230 --> 00:39:54,820
you've probably caught up with me now

00:39:52,470 --> 00:39:59,050
you can send all three of these

00:39:54,820 --> 00:40:01,360
streams all of the time and only if

00:39:59,050 --> 00:40:05,110
somebody's interested in that stream

00:40:01,360 --> 00:40:07,570
will it get passed on so you know this

00:40:05,110 --> 00:40:10,660
one is getting all three in this case

00:40:07,570 --> 00:40:11,860
only that channel is going across here

00:40:10,660 --> 00:40:14,280
because there's nobody else subscribed

00:40:11,860 --> 00:40:18,340
and this one is receiving no data at all

00:40:14,280 --> 00:40:21,180
so that's the basic back end design for

00:40:18,340 --> 00:40:25,840
the system I'm working on at the moment

00:40:21,180 --> 00:40:27,250
qu IC is based on UDP so I got very

00:40:25,840 --> 00:40:30,100
excited Oh

00:40:27,250 --> 00:40:32,170
UDP maybe we can do multicast with it

00:40:30,100 --> 00:40:34,210
aside a bit of a look I'm not the only

00:40:32,170 --> 00:40:36,700
one who thought that and the BBC

00:40:34,210 --> 00:40:38,620
research team in the UK are in the

00:40:36,700 --> 00:40:43,120
process of drafting in RFC to do exactly

00:40:38,620 --> 00:40:47,200
that presumably for their M there I play

00:40:43,120 --> 00:40:50,350
a system to be able to get streaming

00:40:47,200 --> 00:40:50,830
data out to the CD ends as easily as

00:40:50,350 --> 00:40:52,960
possible

00:40:50,830 --> 00:40:58,180
but we can take it further if we can

00:40:52,960 --> 00:41:02,130
have that we can have a multicast web so

00:40:58,180 --> 00:41:04,210
that brings me to my project Libre cast

00:41:02,130 --> 00:41:07,000
essentially Libre cast aims to get

00:41:04,210 --> 00:41:08,920
multicast in the hands of developers now

00:41:07,000 --> 00:41:11,970
I'm not going to do the the dance but I

00:41:08,920 --> 00:41:16,170
see there's a few people who got that

00:41:11,970 --> 00:41:19,270
what I've built so far is a very basic

00:41:16,170 --> 00:41:21,960
multicast library Libre cast that you

00:41:19,270 --> 00:41:26,800
can just hash include in your C program

00:41:21,960 --> 00:41:30,220
Python Ruby and other languages to

00:41:26,800 --> 00:41:32,640
follow feel free to contribute and the

00:41:30,220 --> 00:41:34,840
next stage is build more of a messaging

00:41:32,640 --> 00:41:36,790
reliable messaging library on top of

00:41:34,840 --> 00:41:42,130
that with forwards error correction and

00:41:36,790 --> 00:41:43,660
so on built in our zero run queue next

00:41:42,130 --> 00:41:46,030
stage on top of that which I should have

00:41:43,660 --> 00:41:48,700
running by mid-year is the transitional

00:41:46,030 --> 00:41:50,640
tunneling stuff again think mbone if

00:41:48,700 --> 00:41:53,440
you're familiar with that

00:41:50,640 --> 00:41:58,150
multicast works over tunnels which means

00:41:53,440 --> 00:41:59,770
we can do multicast over the existing

00:41:58,150 --> 00:42:01,420
internet to try and solve the

00:41:59,770 --> 00:42:03,490
chicken-and-egg problem that we have

00:42:01,420 --> 00:42:05,050
where multicast doesn't run on the

00:42:03,490 --> 00:42:06,280
internet because there's no demand and

00:42:05,050 --> 00:42:07,210
there's no demand because it doesn't

00:42:06,280 --> 00:42:12,640
work and

00:42:07,210 --> 00:42:14,830
so on so I also working on an improved

00:42:12,640 --> 00:42:17,940
routing protocol with a colleague to try

00:42:14,830 --> 00:42:20,470
and break the dependency on unicast and

00:42:17,940 --> 00:42:22,270
I want to work with Foss projects to

00:42:20,470 --> 00:42:26,950
enable multicast everywhere it can be

00:42:22,270 --> 00:42:30,400
and ipv6 along with it I think that ipv6

00:42:26,950 --> 00:42:34,359
multicast is how we get ipv6 out into

00:42:30,400 --> 00:42:37,060
the world because essentially as much as

00:42:34,359 --> 00:42:37,990
I love ipv6 I've been an advocate for it

00:42:37,060 --> 00:42:39,640
for some time

00:42:37,990 --> 00:42:41,770
I really have to admit that it's just a

00:42:39,640 --> 00:42:43,420
bigger namespace it's a little bit

00:42:41,770 --> 00:42:45,640
better in some ways but you really don't

00:42:43,420 --> 00:42:47,650
get anything new there's no commercial

00:42:45,640 --> 00:42:48,690
incentive to deploy it you deploy it

00:42:47,650 --> 00:42:52,420
because you're forced to

00:42:48,690 --> 00:42:54,910
but multicast lets you do things that

00:42:52,420 --> 00:42:58,089
unicast just can't do it gives you the

00:42:54,910 --> 00:43:00,310
incentive to deploy ipv6 there are

00:42:58,089 --> 00:43:03,180
billion dollar reasons like not building

00:43:00,310 --> 00:43:06,820
you know a tenth as many data centers to

00:43:03,180 --> 00:43:08,800
deploy multicast everywhere now finally

00:43:06,820 --> 00:43:11,349
I want to ensure new standards like

00:43:08,800 --> 00:43:14,740
WebRTC and so on support multicast or at

00:43:11,349 --> 00:43:17,109
least don't break it WebRTC is based on

00:43:14,740 --> 00:43:20,470
UDP so it should support multicast but

00:43:17,109 --> 00:43:23,890
because for very good reasons perhaps

00:43:20,470 --> 00:43:26,140
the encryption was baked into the

00:43:23,890 --> 00:43:28,089
standard it mandates a kind of

00:43:26,140 --> 00:43:32,619
one-to-one diffie-hellman style key

00:43:28,089 --> 00:43:34,570
exchange which is no good for group data

00:43:32,619 --> 00:43:36,900
we can use group keys we can use

00:43:34,570 --> 00:43:42,670
capability tokens and things like this

00:43:36,900 --> 00:43:44,550
if we don't mix our layers so thank you

00:43:42,670 --> 00:43:47,230
very much

00:43:44,550 --> 00:43:49,530
get in touch if you're interested in

00:43:47,230 --> 00:43:49,530
helping

00:43:50,190 --> 00:43:53,479
[Applause]

00:43:59,170 --> 00:44:06,590
yes actually and have you looked at the

00:44:01,910 --> 00:44:08,660
in ip6 there's no app needed I'm like

00:44:06,590 --> 00:44:10,850
how do you feel about that and could

00:44:08,660 --> 00:44:13,760
that be like like a major improvement

00:44:10,850 --> 00:44:20,170
for kind of mitigating layer two

00:44:13,760 --> 00:44:22,790
broadcasts essentially in ipv6 we've got

00:44:20,170 --> 00:44:25,430
various multicast methods that are used

00:44:22,790 --> 00:44:29,290
instead of ARP duplicate address

00:44:25,430 --> 00:44:31,910
detection D ID and this sort of thing so

00:44:29,290 --> 00:44:37,940
multicast is used extensively in ipv6

00:44:31,910 --> 00:44:40,940
just on the the local LAN and does that

00:44:37,940 --> 00:44:43,520
answer the question I mean really just

00:44:40,940 --> 00:44:46,370
an the I think personally with a

00:44:43,520 --> 00:44:49,790
datacenters you actually get a lot of

00:44:46,370 --> 00:44:52,970
like broadcasts and do you agree the the

00:44:49,790 --> 00:44:56,140
IP six and when you use IP six you you

00:44:52,970 --> 00:44:58,820
haven't got those up like up broadcasts

00:44:56,140 --> 00:45:01,460
correct you don't have broadcast at all

00:44:58,820 --> 00:45:03,460
and because you're using multicast it's

00:45:01,460 --> 00:45:06,580
only going to where it needs to so

00:45:03,460 --> 00:45:08,930
instead of every single node getting

00:45:06,580 --> 00:45:10,640
those art broadcasts you're getting a

00:45:08,930 --> 00:45:12,950
multicast traffic that's going to a

00:45:10,640 --> 00:45:15,920
routers only group and and that sort of

00:45:12,950 --> 00:45:18,740
thing so a lot of thought has gone into

00:45:15,920 --> 00:45:20,030
the design of ipv6 we're not really

00:45:18,740 --> 00:45:21,260
getting the benefit of that because

00:45:20,030 --> 00:45:23,510
people aren't using it or whether they

00:45:21,260 --> 00:45:24,950
are using it they're not turning on MLD

00:45:23,510 --> 00:45:26,390
snooping and things so essentially they

00:45:24,950 --> 00:45:29,690
have got broadcast traffic and they

00:45:26,390 --> 00:45:32,450
wonder why ipv6 doesn't work it does

00:45:29,690 --> 00:45:35,630
work it's just we need to it's a new

00:45:32,450 --> 00:45:38,990
skill we need to learn it so I have a

00:45:35,630 --> 00:45:43,220
question from the service provider

00:45:38,990 --> 00:45:44,210
perspective for dealing with multicast

00:45:43,220 --> 00:45:46,910
on the public internet and especially

00:45:44,210 --> 00:45:50,540
across autonomous systems between ISPs

00:45:46,910 --> 00:45:51,620
basically yeah and in particular having

00:45:50,540 --> 00:45:53,960
dealt with the situation where the

00:45:51,620 --> 00:45:56,150
economics does not stack up the problem

00:45:53,960 --> 00:45:58,250
for ISPs is not the complexity of

00:45:56,150 --> 00:46:00,710
configuration management although that

00:45:58,250 --> 00:46:02,180
is an issue in in practice for speeds

00:46:00,710 --> 00:46:03,000
are frequently having custom firmware

00:46:02,180 --> 00:46:04,950
builds done

00:46:03,000 --> 00:46:07,350
and so there actually it's not as easy

00:46:04,950 --> 00:46:09,000
as telling an option on its every single

00:46:07,350 --> 00:46:10,920
feature that enabled has to carry its

00:46:09,000 --> 00:46:13,020
weight in their testing and QA process

00:46:10,920 --> 00:46:15,870
so there's an active pressure to turn

00:46:13,020 --> 00:46:17,340
features off but worse for multicast

00:46:15,870 --> 00:46:19,910
there's an enormous amount of state that

00:46:17,340 --> 00:46:21,660
has to be kept by the network

00:46:19,910 --> 00:46:22,950
technologically that's desirable I get

00:46:21,660 --> 00:46:24,000
the point because you think and to do

00:46:22,950 --> 00:46:26,280
all this cool stuff in a very generic

00:46:24,000 --> 00:46:27,270
way rather than having to do it again

00:46:26,280 --> 00:46:31,500
and again and again for every

00:46:27,270 --> 00:46:34,830
application at layer 7 but the the

00:46:31,500 --> 00:46:37,050
challenge was that the the engineering

00:46:34,830 --> 00:46:38,310
for the rooters for their firmware and

00:46:37,050 --> 00:46:40,140
for the hardware configurations across

00:46:38,310 --> 00:46:42,120
tens of thousands of Reuters was already

00:46:40,140 --> 00:46:43,230
pushing everything to the limit it was

00:46:42,120 --> 00:46:44,370
already sort of product management

00:46:43,230 --> 00:46:48,240
discussions about which things are

00:46:44,370 --> 00:46:50,840
turned on and turned off and so the the

00:46:48,240 --> 00:46:52,860
way the question comes up comes out is

00:46:50,840 --> 00:46:54,420
ok a customer who really wants to do

00:46:52,860 --> 00:46:56,730
multicast can just do their own

00:46:54,420 --> 00:47:00,120
rendezvous Reuters somewhere and plug

00:46:56,730 --> 00:47:02,310
them into our network or networks and

00:47:00,120 --> 00:47:05,430
just pay ordinary transit rates for each

00:47:02,310 --> 00:47:06,960
of the unicast streams networks and of

00:47:05,430 --> 00:47:07,260
course customers go hey that does make

00:47:06,960 --> 00:47:09,960
sense

00:47:07,260 --> 00:47:12,510
multicast should be one copy not not

00:47:09,960 --> 00:47:14,460
thousands and so the problem of the ISP

00:47:12,510 --> 00:47:16,500
is oh so you want to do a bunch of

00:47:14,460 --> 00:47:18,870
engineering work and hardware upgrades

00:47:16,500 --> 00:47:20,280
more RAM more CPU to support maintaining

00:47:18,870 --> 00:47:21,990
the state required from all the cost to

00:47:20,280 --> 00:47:25,590
work in all of you to give us less money

00:47:21,990 --> 00:47:27,270
and that immediately killed and I

00:47:25,590 --> 00:47:28,800
suspect I haven't seen like I haven't

00:47:27,270 --> 00:47:32,310
seen inside many ISPs oh there's only

00:47:28,800 --> 00:47:34,890
one it was a global carrier but it seems

00:47:32,310 --> 00:47:36,150
to me that and you actually answered am

00:47:34,890 --> 00:47:37,320
you taking our slides like how do we get

00:47:36,150 --> 00:47:39,900
from here to there and the answer is you

00:47:37,320 --> 00:47:41,700
build applications that use tunnel but

00:47:39,900 --> 00:47:44,790
it seems to me that you've got to

00:47:41,700 --> 00:47:47,040
demonstrate substantial use cases before

00:47:44,790 --> 00:47:49,290
any ISP is willing precisely that's

00:47:47,040 --> 00:47:53,280
exactly what I'm trying to do displace

00:47:49,290 --> 00:47:57,540
the other firmware and CPU menus so yeah

00:47:53,280 --> 00:48:00,320
it's a question of state on routers is a

00:47:57,540 --> 00:48:04,410
good one and it's probably the biggest

00:48:00,320 --> 00:48:07,200
impediment really in that yes it does

00:48:04,410 --> 00:48:08,850
put extra load on on routers but if

00:48:07,200 --> 00:48:11,220
nobody's using it it's not putting a

00:48:08,850 --> 00:48:14,880
level of extra load on there as more

00:48:11,220 --> 00:48:15,990
important more people but then the

00:48:14,880 --> 00:48:16,849
questions I was using the question is

00:48:15,990 --> 00:48:18,049
why even enable

00:48:16,849 --> 00:48:20,089
the feature in the firmware in the first

00:48:18,049 --> 00:48:21,079
place if they have no one using it then

00:48:20,089 --> 00:48:23,960
they can just remove that from the

00:48:21,079 --> 00:48:26,180
firmware and not have to QA it mm-hmm so

00:48:23,960 --> 00:48:28,460
this is a very real cost we go from it's

00:48:26,180 --> 00:48:31,999
not there which is a very real to not

00:48:28,460 --> 00:48:33,829
doing it we are I mean it seems crazy

00:48:31,999 --> 00:48:35,440
but we are literally melting the polar

00:48:33,829 --> 00:48:37,430
ice caps with all these things I mean

00:48:35,440 --> 00:48:41,119
even if we take Bitcoin out of the

00:48:37,430 --> 00:48:42,769
equation you know we are building loads

00:48:41,119 --> 00:48:44,509
loads more data centers all this cloud

00:48:42,769 --> 00:48:46,789
stuff is going up or small stuff is

00:48:44,509 --> 00:48:49,249
going online and it's all operating

00:48:46,789 --> 00:48:50,630
horribly and efficiently any moderately

00:48:49,249 --> 00:48:53,720
popular service is having to run

00:48:50,630 --> 00:48:55,339
multiple servers with caching and load

00:48:53,720 --> 00:48:58,460
balancers and this sort of things CD

00:48:55,339 --> 00:49:00,529
ends which are very expensive and then

00:48:58,460 --> 00:49:02,349
you get situations like you know

00:49:00,529 --> 00:49:05,200
streaming I mean Netflix I'm told this

00:49:02,349 --> 00:49:08,329
25% or more of global Internet traffic

00:49:05,200 --> 00:49:11,779
which is just crazy and that's all these

00:49:08,329 --> 00:49:13,729
people watching streaming services now

00:49:11,779 --> 00:49:18,619
granted not all of them are watching at

00:49:13,729 --> 00:49:22,369
the same time and you know but as I've

00:49:18,619 --> 00:49:25,489
shown with the updater in some cases you

00:49:22,369 --> 00:49:27,739
don't need to in the case of a movie for

00:49:25,489 --> 00:49:31,279
example well imagine you know popular

00:49:27,739 --> 00:49:33,739
movies week we could stream them start

00:49:31,279 --> 00:49:34,940
them at the beginning of each hour now

00:49:33,739 --> 00:49:36,349
that's that's not going to satisfy

00:49:34,940 --> 00:49:37,609
anyone I'm not waiting until the

00:49:36,349 --> 00:49:38,779
beginning of the hour for my stream well

00:49:37,609 --> 00:49:41,450
okay we'll start at every half an hour

00:49:38,779 --> 00:49:43,849
that's not good enough every 15 minutes

00:49:41,450 --> 00:49:46,880
how many streams do you actually need to

00:49:43,849 --> 00:49:49,309
run before actually everyone that wants

00:49:46,880 --> 00:49:50,839
to watch it can watch it exactly when

00:49:49,309 --> 00:49:52,819
they want to watch it well hybridize it

00:49:50,839 --> 00:49:54,859
run run the first ten minutes

00:49:52,819 --> 00:49:56,299
unicast yeah I'm given you're gonna have

00:49:54,859 --> 00:49:58,400
a certain amount of buffering which were

00:49:56,299 --> 00:49:59,989
used to and a certain amount of ads

00:49:58,400 --> 00:50:02,420
tucked on the beginning well you don't

00:49:59,989 --> 00:50:04,819
actually need it to start on the second

00:50:02,420 --> 00:50:05,960
that somebody hits play if you're you

00:50:04,819 --> 00:50:10,130
know Netflix and you're finding yourself

00:50:05,960 --> 00:50:13,460
with ads and things I saw a tweet from

00:50:10,130 --> 00:50:15,049
one app the London exchange point at the

00:50:13,460 --> 00:50:16,789
end of last year there was a big

00:50:15,049 --> 00:50:18,920
football match on and they tweeted that

00:50:16,789 --> 00:50:21,200
they'd reach the highest peak load that

00:50:18,920 --> 00:50:23,329
they have ever had on their exchange and

00:50:21,200 --> 00:50:26,660
that was because of everyone watching

00:50:23,329 --> 00:50:29,359
the same video stream at the same time

00:50:26,660 --> 00:50:30,119
so whilst not everything is video

00:50:29,359 --> 00:50:32,069
on-demand

00:50:30,119 --> 00:50:34,769
still a significant case and that the

00:50:32,069 --> 00:50:36,900
RFC that BBC researcher drafting talks

00:50:34,769 --> 00:50:38,460
about exactly this there's a lot of

00:50:36,900 --> 00:50:40,589
cases where people are watching the same

00:50:38,460 --> 00:50:44,519
thing at the same time take the Olympics

00:50:40,589 --> 00:50:47,609
for example if if it's on this year or

00:50:44,519 --> 00:50:50,369
any other big event there's a lot of

00:50:47,609 --> 00:50:52,680
stuff that happens at the same time but

00:50:50,369 --> 00:50:53,970
there are use cases even where it is

00:50:52,680 --> 00:50:56,460
video on-demand

00:50:53,970 --> 00:51:00,660
so when you've got billion-dollar

00:50:56,460 --> 00:51:02,880
corporations who have that need perhaps

00:51:00,660 --> 00:51:04,109
we've got some way that we can roll this

00:51:02,880 --> 00:51:06,799
out there may be enough aggregated

00:51:04,109 --> 00:51:09,890
demand for Peter

00:51:06,799 --> 00:51:12,650
possibly all right thank you very much

00:51:09,890 --> 00:51:14,910
that's it for today

00:51:12,650 --> 00:51:16,799
enjoy your evening and we will see you

00:51:14,910 --> 00:51:19,549
here tomorrow morning I'm not emceeing

00:51:16,799 --> 00:51:23,990
tomorrow but I'll be around in the

00:51:19,549 --> 00:51:23,990
exhibition area doing cool electronics

00:51:24,310 --> 00:51:28,810

YouTube URL: https://www.youtube.com/watch?v=VoByfGt765U


