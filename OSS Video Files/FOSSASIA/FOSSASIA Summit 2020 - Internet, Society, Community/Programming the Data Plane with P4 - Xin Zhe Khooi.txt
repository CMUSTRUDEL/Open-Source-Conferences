Title: Programming the Data Plane with P4 - Xin Zhe Khooi
Publication date: 2020-03-22
Playlist: FOSSASIA Summit 2020 - Internet, Society, Community
Description: 
	FOSSASIA Summit 2020 - Internet, Society, Community
Captions: 
	00:00:00,979 --> 00:00:07,259
hello everyone and same Jerry IRA

00:00:04,440 --> 00:00:08,670
decided to open networking foundation so

00:00:07,259 --> 00:00:10,320
today we will be talking about

00:00:08,670 --> 00:00:13,650
so programming the data plane which

00:00:10,320 --> 00:00:15,949
before right so before we get started so

00:00:13,650 --> 00:00:18,420
we have to know how a networks work so

00:00:15,949 --> 00:00:19,080
basically networks working at a stupid

00:00:18,420 --> 00:00:21,720
never

00:00:19,080 --> 00:00:24,000
so between so between switches they

00:00:21,720 --> 00:00:27,240
exchange routes finish with each other

00:00:24,000 --> 00:00:29,730
in order to you know to know the exact

00:00:27,240 --> 00:00:32,510
half of how to forward a packet from one

00:00:29,730 --> 00:00:36,390
point to another so the key word here is

00:00:32,510 --> 00:00:39,239
distributed so why don't you go to

00:00:36,390 --> 00:00:41,190
because traditionally how we design is

00:00:39,239 --> 00:00:44,250
that they have a really complex control

00:00:41,190 --> 00:00:46,370
plane as well as a tow plane so these

00:00:44,250 --> 00:00:49,289
two they are interdependent they are

00:00:46,370 --> 00:00:50,940
television so basically the feature sets

00:00:49,289 --> 00:00:53,399
of the control plane is affected by what

00:00:50,940 --> 00:00:55,170
is available down in the deep down in

00:00:53,399 --> 00:00:58,859
the data plane so if they take any

00:00:55,170 --> 00:01:00,989
vendor for example so the more the more

00:00:58,859 --> 00:01:03,350
press the higher the price point

00:01:00,989 --> 00:01:06,750
basically you get a strict with more

00:01:03,350 --> 00:01:08,460
feature sets and more complex case it

00:01:06,750 --> 00:01:11,909
down they answer that which means your

00:01:08,460 --> 00:01:14,430
search camp and have more more features

00:01:11,909 --> 00:01:18,990
and support more protocols for instance

00:01:14,430 --> 00:01:20,850
so in this case to traditionally all

00:01:18,990 --> 00:01:23,400
this you just have to be configured

00:01:20,850 --> 00:01:26,310
distributed in a distributed manner so

00:01:23,400 --> 00:01:29,340
as in like you have to go through all

00:01:26,310 --> 00:01:33,720
the switches manually in order to apply

00:01:29,340 --> 00:01:35,640
the corresponding configurations so here

00:01:33,720 --> 00:01:39,570
here is the problem is that if you have

00:01:35,640 --> 00:01:41,490
a lot of them so managing it would be

00:01:39,570 --> 00:01:45,509
difficult right

00:01:41,490 --> 00:01:49,799
so you to human errors so this is the

00:01:45,509 --> 00:01:53,159
main problem in in traditional switcher

00:01:49,799 --> 00:01:54,930
attaches so then we will think about how

00:01:53,159 --> 00:01:57,360
can we make this better

00:01:54,930 --> 00:01:59,850
so then we have suffered final King

00:01:57,360 --> 00:02:01,950
where we tried to reduce the complexity

00:01:59,850 --> 00:02:05,310
that is in the control plane then we try

00:02:01,950 --> 00:02:07,810
to have a centralized controller so with

00:02:05,310 --> 00:02:11,860
a set us controller then

00:02:07,810 --> 00:02:13,959
when when the controller so for each

00:02:11,860 --> 00:02:16,240
control it manages a group of searches

00:02:13,959 --> 00:02:17,980
in other languages so then the

00:02:16,240 --> 00:02:21,100
controller will have a global overview

00:02:17,980 --> 00:02:24,520
of all the under of all the underlying

00:02:21,100 --> 00:02:27,220
search paths so then so the idea here is

00:02:24,520 --> 00:02:28,840
that okay we remove the widow remove the

00:02:27,220 --> 00:02:30,850
come remove the complexity in the

00:02:28,840 --> 00:02:34,060
contraband we offload this to a

00:02:30,850 --> 00:02:36,430
centralized controller then so between

00:02:34,060 --> 00:02:38,440
the controller and the switch so it

00:02:36,430 --> 00:02:40,450
would be true some protocols such as

00:02:38,440 --> 00:02:40,840
open flow is one of the most popular

00:02:40,450 --> 00:02:43,420
ones

00:02:40,840 --> 00:02:47,080
but then although we have opened up the

00:02:43,420 --> 00:02:49,180
control chamber then based on in terms

00:02:47,080 --> 00:02:51,820
of what the capability of this switch is

00:02:49,180 --> 00:02:53,739
still constrained by the underlined

00:02:51,820 --> 00:02:58,420
entertainment as you can see because

00:02:53,739 --> 00:03:02,800
depending on basic then depending on the

00:02:58,420 --> 00:03:05,739
version of a C for instance in terms of

00:03:02,800 --> 00:03:11,220
the features it put vary from one

00:03:05,739 --> 00:03:15,340
another so if we have a more in-depth

00:03:11,220 --> 00:03:17,620
discussion of an open flow itself in

00:03:15,340 --> 00:03:20,470
terms of as is one of the most popular

00:03:17,620 --> 00:03:24,970
software protocols around so so in short

00:03:20,470 --> 00:03:27,790
open flow has has provided a

00:03:24,970 --> 00:03:30,790
standardized model so in terms of

00:03:27,790 --> 00:03:34,480
providing a match action obstruction so

00:03:30,790 --> 00:03:37,450
basically yeah many so basically how the

00:03:34,480 --> 00:03:39,220
controller defines the rules the

00:03:37,450 --> 00:03:42,610
controller installed rules to decision

00:03:39,220 --> 00:03:46,329
is too much attraction attraction and

00:03:42,610 --> 00:03:48,190
fees right so it is standardized

00:03:46,329 --> 00:03:50,769
photocopied in a controller and a switch

00:03:48,190 --> 00:03:53,650
so basically like I mentioned just now

00:03:50,769 --> 00:03:55,860
it's like you have basically we tried to

00:03:53,650 --> 00:03:58,420
simplify everything then we have

00:03:55,860 --> 00:04:01,090
logically sent we have not much ability

00:03:58,420 --> 00:04:02,739
it can be logically or physically we

00:04:01,090 --> 00:04:04,239
have a centralized controller that

00:04:02,739 --> 00:04:08,049
controls everything

00:04:04,239 --> 00:04:10,090
so basically with a centralized entity

00:04:08,049 --> 00:04:13,750
like the controller basically you would

00:04:10,090 --> 00:04:15,730
have a complete global overview of all

00:04:13,750 --> 00:04:18,010
the switches then you would know from

00:04:15,730 --> 00:04:20,269
end-to-end water development paths that

00:04:18,010 --> 00:04:23,210
can be taken for each

00:04:20,269 --> 00:04:25,520
Paquette so you don't need so then we

00:04:23,210 --> 00:04:28,940
eradicate them eat for an issue with the

00:04:25,520 --> 00:04:30,590
applicants such as OSPF or is is for

00:04:28,940 --> 00:04:33,349
instance we don't need to look for the

00:04:30,590 --> 00:04:40,280
average but then there is a problem with

00:04:33,349 --> 00:04:43,039
its that at times when because not all

00:04:40,280 --> 00:04:46,699
operators are equal I mean in terms of

00:04:43,039 --> 00:04:48,620
the demands for the features so who has

00:04:46,699 --> 00:04:52,490
evolved throughout throughout the years

00:04:48,620 --> 00:04:56,090
i beginning starting with twelve match

00:04:52,490 --> 00:04:58,280
stretch which is travel headers so now

00:04:56,090 --> 00:05:01,520
it's upwards after 40 headers but then

00:04:58,280 --> 00:05:04,009
the problem is for each iteration when

00:05:01,520 --> 00:05:05,810
every version changes so basically

00:05:04,009 --> 00:05:07,909
whenever there's a new version doesn't

00:05:05,810 --> 00:05:10,280
your standard so when this manufactured

00:05:07,909 --> 00:05:12,259
OpenFlow business which is based on the

00:05:10,280 --> 00:05:13,460
current standard so remember that's a

00:05:12,259 --> 00:05:16,250
new iteration whenever there's a new

00:05:13,460 --> 00:05:19,639
standard so it is not forward compatible

00:05:16,250 --> 00:05:21,889
so basically in order to support more

00:05:19,639 --> 00:05:24,050
features as it's so as an operator you

00:05:21,889 --> 00:05:27,909
either have to the places which or you

00:05:24,050 --> 00:05:30,770
have to ask stick with the limited

00:05:27,909 --> 00:05:33,080
limited match times so this actually

00:05:30,770 --> 00:05:35,690
poses a problem as it limits innovation

00:05:33,080 --> 00:05:37,849
so it limits capability on what can be

00:05:35,690 --> 00:05:40,880
done by the controller in really meets

00:05:37,849 --> 00:05:43,279
the application so yeah so this is in

00:05:40,880 --> 00:05:44,960
terms of how inflexible a paper claim in

00:05:43,279 --> 00:05:48,020
lists as issue now slows down

00:05:44,960 --> 00:05:51,349
development so then there comes the

00:05:48,020 --> 00:05:53,719
question so what if we can open up the

00:05:51,349 --> 00:05:55,580
data plane itself so in the case of

00:05:53,719 --> 00:05:58,039
problem over there the planes then we

00:05:55,580 --> 00:06:01,940
have p4 as a programming language the

00:05:58,039 --> 00:06:04,219
program the data plane is tough so we

00:06:01,940 --> 00:06:08,000
try to here we open them the data plane

00:06:04,219 --> 00:06:10,159
so insulin we can on the fly almost on

00:06:08,000 --> 00:06:11,900
the fly to change the packet processing

00:06:10,159 --> 00:06:14,330
pipeline down in the reader plane

00:06:11,900 --> 00:06:18,349
according to our liking then in order to

00:06:14,330 --> 00:06:21,229
suit our needs so that we can operate an

00:06:18,349 --> 00:06:26,120
error according to as as how we want him

00:06:21,229 --> 00:06:29,779
so not only improve inertia just before

00:06:26,120 --> 00:06:32,240
itself can me has been used in

00:06:29,779 --> 00:06:33,860
programmable Nick now in the base cards

00:06:32,240 --> 00:06:36,920
software switches

00:06:33,860 --> 00:06:40,250
as typically external public activity so

00:06:36,920 --> 00:06:43,910
this is this is quite in terms of pre

00:06:40,250 --> 00:06:47,870
for its supports various platforms as

00:06:43,910 --> 00:06:51,020
well so basically why would we want to

00:06:47,870 --> 00:06:53,120
why do we want to talk about p4 because

00:06:51,020 --> 00:06:55,820
before it's currently supported by

00:06:53,120 --> 00:06:58,070
various vendors operators as well as

00:06:55,820 --> 00:07:00,290
universities and startups so it has been

00:06:58,070 --> 00:07:02,030
because because of its capability

00:07:00,290 --> 00:07:04,160
because of its potential for innovation

00:07:02,030 --> 00:07:08,600
so there is why he has attracted various

00:07:04,160 --> 00:07:12,140
interest from various entities so in

00:07:08,600 --> 00:07:14,440
short what is the benefit of p4 words

00:07:12,140 --> 00:07:17,510
the benefit of cronometer claims so

00:07:14,440 --> 00:07:19,970
instead of having one chip so

00:07:17,510 --> 00:07:24,380
traditionally instead of having one ASIC

00:07:19,970 --> 00:07:27,380
if all they come on the complicated or

00:07:24,380 --> 00:07:30,590
the complicated protocols step into one

00:07:27,380 --> 00:07:33,050
chip now we can actually decide what we

00:07:30,590 --> 00:07:36,350
want so we reduce the complexity of you

00:07:33,050 --> 00:07:37,850
we only install we only program the

00:07:36,350 --> 00:07:40,040
relevant protocols that we need for

00:07:37,850 --> 00:07:41,540
example it could be so if you don't need

00:07:40,040 --> 00:07:44,420
to ask reactant we don't need to include

00:07:41,540 --> 00:07:48,740
that in the and ASIC if we if we are

00:07:44,420 --> 00:07:51,800
only doing ipv4 forwarding we don't need

00:07:48,740 --> 00:07:54,050
to care about anything about firewalls

00:07:51,800 --> 00:07:55,670
and stuff so we can only constrain our

00:07:54,050 --> 00:07:58,310
subsequent infamous we can only

00:07:55,670 --> 00:08:00,590
constrain our program to only do a peon

00:07:58,310 --> 00:08:04,670
performing certain tasks that's in terms

00:08:00,590 --> 00:08:08,600
of how you can reduce the complexity in

00:08:04,670 --> 00:08:10,310
protocols evenly even if the protocol is

00:08:08,600 --> 00:08:12,200
is service it's not exist in any

00:08:10,310 --> 00:08:14,780
standards you can always everything

00:08:12,200 --> 00:08:16,970
spread example so here we have an

00:08:14,780 --> 00:08:19,460
example so like for VX land it took 4

00:08:16,970 --> 00:08:21,950
years to gain Wagga Philippi will write

00:08:19,460 --> 00:08:24,350
a Perl ability as far from the

00:08:21,950 --> 00:08:26,240
standardization process but I mean p4 if

00:08:24,350 --> 00:08:28,730
you want if you explain to me there it's

00:08:26,240 --> 00:08:34,010
just around 175 lots of p4

00:08:28,730 --> 00:08:36,470
you get it instantly so that's how how

00:08:34,010 --> 00:08:39,979
people can be used I perform that if

00:08:36,470 --> 00:08:44,000
before we have greater visibility to the

00:08:39,979 --> 00:08:45,860
network so in terms of that we have int

00:08:44,000 --> 00:08:46,820
which is called in banner or telemetry

00:08:45,860 --> 00:08:49,250
which is

00:08:46,820 --> 00:08:51,080
new use case which is brought on by

00:08:49,250 --> 00:08:54,020
program of the ducklings so we were

00:08:51,080 --> 00:08:58,520
discussed you give more discussion in

00:08:54,020 --> 00:09:01,190
the next few slides so pre-floor since

00:08:58,520 --> 00:09:05,030
we are able to program the detergent sir

00:09:01,190 --> 00:09:07,010
so there has been some invest so various

00:09:05,030 --> 00:09:09,410
use cases has been investigated in terms

00:09:07,010 --> 00:09:12,860
of offloading State for applications

00:09:09,410 --> 00:09:15,770
into the rate coupling and since P for

00:09:12,860 --> 00:09:17,690
itself its programming language the data

00:09:15,770 --> 00:09:19,880
plane itself it's a target and we can

00:09:17,690 --> 00:09:23,030
program so now we can enter software

00:09:19,880 --> 00:09:26,980
start development so in terms of go to

00:09:23,030 --> 00:09:26,980
the SDS this I cover them you can

00:09:27,700 --> 00:09:35,720
basically you can build applications of

00:09:31,250 --> 00:09:36,520
it up fix bugs in the big oven on on the

00:09:35,720 --> 00:09:41,750
fly

00:09:36,520 --> 00:09:43,640
so in short depending on your

00:09:41,750 --> 00:09:45,830
requirement depending on your liking you

00:09:43,640 --> 00:09:47,240
can do you can device your own program

00:09:45,830 --> 00:09:51,080
your own ideas

00:09:47,240 --> 00:09:51,650
if p for quickly so here are some news

00:09:51,080 --> 00:09:53,960
kisses

00:09:51,650 --> 00:09:55,940
so with p for yes and they look very use

00:09:53,960 --> 00:10:02,170
it so some of the some of the most

00:09:55,940 --> 00:10:07,390
famous municipal it's how it's a laser

00:10:02,170 --> 00:10:10,040
source which is truck access which is

00:10:07,390 --> 00:10:12,860
consensus algorithm into the intuitive

00:10:10,040 --> 00:10:15,980
happening which has achieved significant

00:10:12,860 --> 00:10:17,840
performance enhancements then next we

00:10:15,980 --> 00:10:19,400
talk about in terms of england our

00:10:17,840 --> 00:10:21,050
telemetry which is one of the most

00:10:19,400 --> 00:10:23,780
killer which is one of the killer

00:10:21,050 --> 00:10:27,890
applications which is brought before so

00:10:23,780 --> 00:10:29,480
basically instead of current current

00:10:27,890 --> 00:10:32,090
monitoring techniques which are out of

00:10:29,480 --> 00:10:34,940
energy we would call all the routers and

00:10:32,090 --> 00:10:37,640
switches for their current current

00:10:34,940 --> 00:10:40,970
statistics for the current flow

00:10:37,640 --> 00:10:42,980
statistics so here how how in when i

00:10:40,970 --> 00:10:45,020
would turn their tables is then whenever

00:10:42,980 --> 00:10:45,740
i can traverse a straddle network from

00:10:45,020 --> 00:10:49,370
end to end

00:10:45,740 --> 00:10:51,950
so each router will append some time as

00:10:49,370 --> 00:10:54,500
that this thing so some statistic okay

00:10:51,950 --> 00:10:56,210
as a custom header to the to the

00:10:54,500 --> 00:10:57,700
mechanism so they could be in terms of a

00:10:56,210 --> 00:11:00,520
queue there could be

00:10:57,700 --> 00:11:03,250
big time stones etc so eventually all

00:11:00,520 --> 00:11:05,080
directors with a pen relevant

00:11:03,250 --> 00:11:06,850
information eventually and depend on

00:11:05,080 --> 00:11:09,100
them at home then there will be a

00:11:06,850 --> 00:11:10,960
long-term agent where that when a

00:11:09,100 --> 00:11:12,970
penultimate rotor was strip off the

00:11:10,960 --> 00:11:17,170
custom headers to the expert to our

00:11:12,970 --> 00:11:20,860
engine so eventually it progressed more

00:11:17,170 --> 00:11:25,060
detail more granularity in terms but not

00:11:20,860 --> 00:11:27,820
exert any any any overhead suture so

00:11:25,060 --> 00:11:30,730
this is one of the one of the still of

00:11:27,820 --> 00:11:34,540
the monitoring techniques that can be

00:11:30,730 --> 00:11:36,760
used to pitch before so we will go

00:11:34,540 --> 00:11:39,400
through a quick introduction maybe 4:16

00:11:36,760 --> 00:11:42,220
so 1:16 because P for this so there are

00:11:39,400 --> 00:11:45,340
two versions one is people 14 as well as

00:11:42,220 --> 00:11:51,250
p4 16 so P for 16 is now the current

00:11:45,340 --> 00:11:56,170
widely supported version so as to recap

00:11:51,250 --> 00:12:01,450
when p4 was found so it was it was

00:11:56,170 --> 00:12:04,570
published in back in 2014 in a sitcom in

00:12:01,450 --> 00:12:09,570
a sitcom CCR so he was back in 2014

00:12:04,570 --> 00:12:11,620
before then it was officially the

00:12:09,570 --> 00:12:14,380
specification was should be released in

00:12:11,620 --> 00:12:16,570
spring 2015 and a current p4 16

00:12:14,380 --> 00:12:21,520
specification was telling us I was

00:12:16,570 --> 00:12:25,990
finalized in May 2017 so the people

00:12:21,520 --> 00:12:28,630
community is a very active community so

00:12:25,990 --> 00:12:30,610
you can check out a legit hub they are

00:12:28,630 --> 00:12:32,680
variously for such reason but nice

00:12:30,610 --> 00:12:35,280
tutorials for everyone to look at as

00:12:32,680 --> 00:12:38,220
well as the mailing list which the

00:12:35,280 --> 00:12:40,330
various members which are quite a bit

00:12:38,220 --> 00:12:42,340
from that they are workshops they are

00:12:40,330 --> 00:12:44,320
being held throttle whoo you should have

00:12:42,340 --> 00:12:47,260
reviewed soon probably usually there'll

00:12:44,320 --> 00:12:49,150
be one in Europe one in the US last but

00:12:47,260 --> 00:12:51,220
not least in terms of economic research

00:12:49,150 --> 00:12:53,410
please boys so there are various

00:12:51,220 --> 00:12:54,880
research being focused on program of

00:12:53,410 --> 00:12:57,400
different things so you can find

00:12:54,880 --> 00:12:59,870
relevant publications since a CNC code

00:12:57,400 --> 00:13:01,910
is SSR and so on

00:12:59,870 --> 00:13:04,400
so in terms of the working group these

00:13:01,910 --> 00:13:07,520
are the five working groups that we have

00:13:04,400 --> 00:13:09,290
in p4 so language design contravariant

00:13:07,520 --> 00:13:13,730
application architecture access

00:13:09,290 --> 00:13:18,170
education I don't know I would go much

00:13:13,730 --> 00:13:21,070
on this so as a programming language p4

00:13:18,170 --> 00:13:24,589
itself know it has a very robust set of

00:13:21,070 --> 00:13:27,830
tools for us to get started with so

00:13:24,589 --> 00:13:30,230
depending on which platform that you

00:13:27,830 --> 00:13:32,360
want to deploy p4 on it could be

00:13:30,230 --> 00:13:34,820
anything natural now FPGA it could be a

00:13:32,360 --> 00:13:39,260
rare photo finish it it could be a PDF

00:13:34,820 --> 00:13:41,990
so all this you have the old compilers

00:13:39,260 --> 00:13:44,720
already so perform it if you want to run

00:13:41,990 --> 00:13:46,600
p4 I mean in terms of if you want to

00:13:44,720 --> 00:13:49,700
communicate with okay for switch with

00:13:46,600 --> 00:13:52,190
different northbound protocols such as

00:13:49,700 --> 00:13:54,950
 floor if you want to run it so

00:13:52,190 --> 00:13:56,570
although the de facto is 3/4 runtime and

00:13:54,950 --> 00:14:00,320
then if you want to run open for switch

00:13:56,570 --> 00:14:03,650
obstruction interface si I it so you can

00:14:00,320 --> 00:14:05,390
implement the Dean of protocol in p4 so

00:14:03,650 --> 00:14:07,040
it depends on it depends on what

00:14:05,390 --> 00:14:08,960
controller implementation that you want

00:14:07,040 --> 00:14:11,770
to run the problem where you have

00:14:08,960 --> 00:14:14,210
simulators various testing tools to

00:14:11,770 --> 00:14:16,940
verify whether you're beautiful P for

00:14:14,210 --> 00:14:18,920
programs correctness or as well as you

00:14:16,940 --> 00:14:21,260
have various summer programs being

00:14:18,920 --> 00:14:24,620
contributed by various contributors

00:14:21,260 --> 00:14:27,650
throughout the world for new colors to

00:14:24,620 --> 00:14:29,450
learn all the examples all the p4

00:14:27,650 --> 00:14:32,720
examples how in terms of the features

00:14:29,450 --> 00:14:36,250
that I'm feeling and the limitations we

00:14:32,720 --> 00:14:38,930
also have plugins as well as tutorials

00:14:36,250 --> 00:14:42,080
so in terms of the development workflow

00:14:38,930 --> 00:14:44,270
so first you will have to know what are

00:14:42,080 --> 00:14:48,140
the requirements of a pivotal part so

00:14:44,270 --> 00:14:50,540
then we as a user who program we will do

00:14:48,140 --> 00:14:52,010
the programming in p4 but then before

00:14:50,540 --> 00:14:54,440
they do the probe and then you would

00:14:52,010 --> 00:14:56,150
have to know what architecture what is

00:14:54,440 --> 00:14:58,730
the architecture that your program for

00:14:56,150 --> 00:15:00,860
example if a program for our photo

00:14:58,730 --> 00:15:02,839
finish which they have to define

00:15:00,860 --> 00:15:04,700
architecture if your programming for the

00:15:02,839 --> 00:15:07,190
surface is you have to be MVP which is

00:15:04,700 --> 00:15:10,550
based on a v1 modern architecture if you

00:15:07,190 --> 00:15:13,040
have a fpga and you can be based on

00:15:10,550 --> 00:15:13,490
their fpga at the tubular so you have to

00:15:13,040 --> 00:15:17,080
know that

00:15:13,490 --> 00:15:19,610
because eventually this underlying

00:15:17,080 --> 00:15:21,649
different architectures have may have

00:15:19,610 --> 00:15:23,899
different external libraries being a

00:15:21,649 --> 00:15:26,480
course which may affect in terms of

00:15:23,899 --> 00:15:28,190
internal pitches so you have the view

00:15:26,480 --> 00:15:30,890
aware what architecture that we are

00:15:28,190 --> 00:15:32,330
proven for so after that once you get

00:15:30,890 --> 00:15:34,820
your pre-approval ready then you

00:15:32,330 --> 00:15:37,250
compound it then eventually you get it

00:15:34,820 --> 00:15:40,160
installed into the switch so this is

00:15:37,250 --> 00:15:41,540
having this Sun this is in terms in

00:15:40,160 --> 00:15:45,589
terms of how the workflow

00:15:41,540 --> 00:15:50,510
look like so if we look so the this is

00:15:45,589 --> 00:15:56,360
the real one model v1 model v1 so this

00:15:50,510 --> 00:15:57,589
is in general how a power switch you

00:15:56,360 --> 00:15:59,779
look like in terms of what are the

00:15:57,589 --> 00:16:01,910
components that you should have so there

00:15:59,779 --> 00:16:04,640
are a few things there there are three

00:16:01,910 --> 00:16:06,860
things that in a peaceful society must

00:16:04,640 --> 00:16:10,370
have you could so there must be a parcel

00:16:06,860 --> 00:16:13,040
then you're a near we have ingress stage

00:16:10,370 --> 00:16:16,779
and you have egress station so in the

00:16:13,040 --> 00:16:19,279
ingress and infestation I can processing

00:16:16,779 --> 00:16:21,410
of course so you have all your match

00:16:19,279 --> 00:16:27,350
action tables where your control logic

00:16:21,410 --> 00:16:30,430
can happen so as for the person it is so

00:16:27,350 --> 00:16:33,140
it is actually how you extract all the

00:16:30,430 --> 00:16:36,589
extra all the relevant headers that you

00:16:33,140 --> 00:16:40,040
want to be processed so these are the

00:16:36,589 --> 00:16:44,690
three main things so in terms of p4 so

00:16:40,040 --> 00:16:47,899
here I have some summary on what it can

00:16:44,690 --> 00:16:50,029
do what one can do so you can do a two

00:16:47,899 --> 00:16:52,790
layer three or even layer four actually

00:16:50,029 --> 00:16:55,550
so it is very high although it looks

00:16:52,790 --> 00:16:58,730
like C++ it's like see but the end of

00:16:55,550 --> 00:17:00,529
point there's no loose because why why

00:16:58,730 --> 00:17:03,410
new because why we want to bound the

00:17:00,529 --> 00:17:06,230
execution time because we want to

00:17:03,410 --> 00:17:09,170
because the people in data in the data

00:17:06,230 --> 00:17:11,420
plane for each and every packet there's

00:17:09,170 --> 00:17:13,189
a limited time magic for this forgets to

00:17:11,420 --> 00:17:14,569
stay in the development so you would

00:17:13,189 --> 00:17:16,370
want them to be for the as soon as

00:17:14,569 --> 00:17:18,709
possible that is why the reason there no

00:17:16,370 --> 00:17:20,929
loops available and memory is statically

00:17:18,709 --> 00:17:23,120
allocated bit which is like for each

00:17:20,929 --> 00:17:25,189
stage there is already the pre allocated

00:17:23,120 --> 00:17:26,030
memory for them so you don't need to do

00:17:25,189 --> 00:17:29,840
a lot

00:17:26,030 --> 00:17:31,250
no money - dumela and since they're

00:17:29,840 --> 00:17:32,510
limited my ring you cannot do a good

00:17:31,250 --> 00:17:36,050
Christian because you don't have to

00:17:32,510 --> 00:17:38,150
stack that instead and so on so yeah so

00:17:36,050 --> 00:17:40,010
for suddenly versus you can have some

00:17:38,150 --> 00:17:42,680
sub process to pass a dress or packet

00:17:40,010 --> 00:17:46,460
header or anything and such so this is

00:17:42,680 --> 00:17:48,380
in terms of how the language has so in

00:17:46,460 --> 00:17:50,870
terms of the target if you look at below

00:17:48,380 --> 00:17:54,500
if you look at the below part of the

00:17:50,870 --> 00:17:57,260
slide so this is defined by the vendor

00:17:54,500 --> 00:17:59,720
so if you have the if you have to feed

00:17:57,260 --> 00:18:01,160
on target so you have to talk about talk

00:17:59,720 --> 00:18:03,050
a description as well as the external

00:18:01,160 --> 00:18:05,360
libraries being supplied by the funeral

00:18:03,050 --> 00:18:08,840
so if it's a sophist your string will

00:18:05,360 --> 00:18:11,810
refer to their BMD 2v1 motor and and so

00:18:08,840 --> 00:18:13,640
on so what can a user define a second

00:18:11,810 --> 00:18:16,280
the usual way you get access to various

00:18:13,640 --> 00:18:18,080
data types and then have the power to do

00:18:16,280 --> 00:18:22,460
have metrics in units as well as

00:18:18,080 --> 00:18:24,790
programmable really as in like to drill

00:18:22,460 --> 00:18:28,790
sample to packet after processing and

00:18:24,790 --> 00:18:31,280
being set up after that so this is an

00:18:28,790 --> 00:18:35,720
example peaceful program so these are

00:18:31,280 --> 00:18:38,420
some of the so this this summarizes the

00:18:35,720 --> 00:18:39,710
components that should exist in mp4 so

00:18:38,420 --> 00:18:41,780
first and foremost you will need to

00:18:39,710 --> 00:18:44,180
include corridor P for corner people

00:18:41,780 --> 00:18:46,280
which is the core package of people and

00:18:44,180 --> 00:18:48,050
secondly so you will see that there's a

00:18:46,280 --> 00:18:50,210
v1 model of p4

00:18:48,050 --> 00:18:51,800
the Viva model which is your

00:18:50,210 --> 00:18:53,690
architecture so if you're programming

00:18:51,800 --> 00:18:55,760
for different targets it could be TSK to

00:18:53,690 --> 00:18:57,290
people it could be talking about people

00:18:55,760 --> 00:18:59,630
so depending on the architecture

00:18:57,290 --> 00:19:01,010
programming form so subsequently you

00:18:59,630 --> 00:19:04,550
define the hairiest that you will be

00:19:01,010 --> 00:19:06,380
your interest on so for this case will

00:19:04,550 --> 00:19:08,930
be only interested and looking at the

00:19:06,380 --> 00:19:11,110
Ethernet and ipv4 then we only define

00:19:08,930 --> 00:19:14,630
distress if you want to define more it

00:19:11,110 --> 00:19:16,670
go to deeper like layer 4 into TCP UDP

00:19:14,630 --> 00:19:19,310
working on the good application layer

00:19:16,670 --> 00:19:22,820
like the DNS it depends on your choice

00:19:19,310 --> 00:19:24,440
and personal so once you define the

00:19:22,820 --> 00:19:26,750
headers then you need a person student

00:19:24,440 --> 00:19:28,430
to actually parse out the relevant

00:19:26,750 --> 00:19:30,620
heavens you have subtraction

00:19:28,430 --> 00:19:33,070
verification then you have egress and

00:19:30,620 --> 00:19:36,590
ingress processing so this to our where

00:19:33,070 --> 00:19:38,210
we rarely write our controller chip

00:19:36,590 --> 00:19:40,190
right out right

00:19:38,210 --> 00:19:42,049
packet processing cross-check across the

00:19:40,190 --> 00:19:44,950
same code in egress and

00:19:42,049 --> 00:19:47,360
egrants ingress and English sorry then

00:19:44,950 --> 00:19:50,059
after that where you go to another

00:19:47,360 --> 00:19:52,820
checksum update so after processing you

00:19:50,059 --> 00:19:56,240
need to go to some checksum update then

00:19:52,820 --> 00:19:59,389
last but not least once everything is

00:19:56,240 --> 00:20:02,240
done you have to depress them which is

00:19:59,389 --> 00:20:03,759
too recent recently everything before

00:20:02,240 --> 00:20:07,159
sending it on a second

00:20:03,759 --> 00:20:10,490
so here here is an example of how you

00:20:07,159 --> 00:20:14,240
can write some write some control logic

00:20:10,490 --> 00:20:17,389
in the in the ingress or egress block so

00:20:14,240 --> 00:20:20,090
in the in the apply balm to be a

00:20:17,389 --> 00:20:22,429
specific test of specific so you can

00:20:20,090 --> 00:20:25,519
rest if statements you can have some

00:20:22,429 --> 00:20:28,789
actions so here so here this is a Sun

00:20:25,519 --> 00:20:31,490
this is an example of a very simple

00:20:28,789 --> 00:20:33,169
forwarding program which is to perform

00:20:31,490 --> 00:20:35,570
anything that comes in from point 1 to

00:20:33,169 --> 00:20:38,480
point 2 and vice versa so this is one

00:20:35,570 --> 00:20:42,889
way of writing it with if statements or

00:20:38,480 --> 00:20:45,080
you can convert it into a table so we

00:20:42,889 --> 00:20:47,509
have a table then you have to match on a

00:20:45,080 --> 00:20:49,960
specific key after you have key then you

00:20:47,509 --> 00:20:52,610
have to match and you apply some

00:20:49,960 --> 00:20:54,409
corresponding actions so for here the

00:20:52,610 --> 00:20:56,299
key that we match one is the ingress

00:20:54,409 --> 00:20:58,850
point then the action is

00:20:56,299 --> 00:21:01,879
then the action itself is to set the how

00:20:58,850 --> 00:21:03,710
to play so here we might so if it

00:21:01,879 --> 00:21:04,940
consoles the same thing the same thing

00:21:03,710 --> 00:21:07,429
as the previous light if it comes from

00:21:04,940 --> 00:21:09,470
the firs first of all then it goes off

00:21:07,429 --> 00:21:11,539
on a circuit board so this is how we

00:21:09,470 --> 00:21:14,570
define a pivot table after defining a

00:21:11,539 --> 00:21:16,360
table then you have to apply the table

00:21:14,570 --> 00:21:20,090
in the cloud block

00:21:16,360 --> 00:21:23,119
so here one there's one more example so

00:21:20,090 --> 00:21:26,539
if so this is an example of how we can

00:21:23,119 --> 00:21:27,769
do ipv4 forwarding so I'm forwarding I

00:21:26,539 --> 00:21:29,929
think I guess actually we would be

00:21:27,769 --> 00:21:32,330
interested on the destination address so

00:21:29,929 --> 00:21:34,490
how do how would we do I could just

00:21:32,330 --> 00:21:36,049
machine probably it could be exact match

00:21:34,490 --> 00:21:38,179
it could be a longest perfect match in

00:21:36,049 --> 00:21:40,730
this case we are using normos perfect

00:21:38,179 --> 00:21:42,769
match then so here and then after

00:21:40,730 --> 00:21:44,690
defining the key then you define the

00:21:42,769 --> 00:21:46,519
action then you can define the size this

00:21:44,690 --> 00:21:48,080
is optional and last but not least you

00:21:46,519 --> 00:21:49,700
can define a default chance so if

00:21:48,080 --> 00:21:50,390
there's no matter then you don't you

00:21:49,700 --> 00:21:53,960
don't think

00:21:50,390 --> 00:21:57,470
action for this case so in terms of the

00:21:53,960 --> 00:22:00,890
limitation so the core language of p4

00:21:57,470 --> 00:22:03,140
itself is very small it is portable and

00:22:00,890 --> 00:22:06,010
that is why is for the good to support

00:22:03,140 --> 00:22:09,050
it can be extended to many targets

00:22:06,010 --> 00:22:11,360
although I wouldn't say that it's only

00:22:09,050 --> 00:22:13,550
say that it's a very complete language

00:22:11,360 --> 00:22:15,920
but in terms of expressivity it has

00:22:13,550 --> 00:22:18,850
limitations on what it can done what we

00:22:15,920 --> 00:22:21,200
can what can be done what cannot be done

00:22:18,850 --> 00:22:22,940
hmm so accelerators can provide

00:22:21,200 --> 00:22:26,980
additional functionality depending on

00:22:22,940 --> 00:22:30,770
the vendor you can have your own

00:22:26,980 --> 00:22:32,690
additional API which are extension to

00:22:30,770 --> 00:22:36,650
the proof to the corporate for language

00:22:32,690 --> 00:22:40,220
so down there and dump and point number

00:22:36,650 --> 00:22:42,200
three you have what people will define

00:22:40,220 --> 00:22:43,970
some standard architecture stuff good to

00:22:42,200 --> 00:22:50,750
be following some standards so that is a

00:22:43,970 --> 00:22:52,790
counter spitters and so this the current

00:22:50,750 --> 00:22:55,130
standards are most mostly for switches

00:22:52,790 --> 00:22:57,380
only so if it's a for fpga users for a

00:22:55,130 --> 00:23:00,320
nick they are no standard architecture

00:22:57,380 --> 00:23:02,540
so effectively it depends on how the

00:23:00,320 --> 00:23:04,310
vendor how the author of the

00:23:02,540 --> 00:23:07,550
architectures of decides what they want

00:23:04,310 --> 00:23:08,180
to support so what is missing from p4

00:23:07,550 --> 00:23:11,150
what

00:23:08,180 --> 00:23:12,800
what does known what is not necessary

00:23:11,150 --> 00:23:15,230
before it is point

00:23:12,800 --> 00:23:17,390
it is essentially a floating point

00:23:15,230 --> 00:23:19,250
operation I'm not be censoring Beckett

00:23:17,390 --> 00:23:21,500
or something and that is one of the

00:23:19,250 --> 00:23:22,640
reason is that if we want to have food

00:23:21,500 --> 00:23:25,460
in point of purchase then you need a

00:23:22,640 --> 00:23:28,730
floating point processing unit so an FPU

00:23:25,460 --> 00:23:31,220
so which is waste in terms of itching

00:23:28,730 --> 00:23:36,140
chip size so there is why floating

00:23:31,220 --> 00:23:38,000
points has been as being extruded in the

00:23:36,140 --> 00:23:39,530
core people in a court before language

00:23:38,000 --> 00:23:41,000
then you don't have pointers for

00:23:39,530 --> 00:23:42,170
instance you do not because if it

00:23:41,000 --> 00:23:43,880
applies you don't have done in the

00:23:42,170 --> 00:23:46,040
memory management which I've mentioned

00:23:43,880 --> 00:23:48,440
before that's known look because we want

00:23:46,040 --> 00:23:50,800
to process packet as soon as possible

00:23:48,440 --> 00:23:52,850
just feel recursion there's no threads

00:23:50,800 --> 00:23:55,310
so in summary

00:23:52,850 --> 00:23:58,040
p4 itself it's a standardized language

00:23:55,310 --> 00:24:00,320
so we can specify how you want to

00:23:58,040 --> 00:24:02,000
process packets not only on switches it

00:24:00,320 --> 00:24:03,620
could be in BP air he could be on

00:24:02,000 --> 00:24:07,309
surfaces just we could be on that

00:24:03,620 --> 00:24:09,290
it could be a mix so it is expressive

00:24:07,309 --> 00:24:11,870
enough for you for us did you find how

00:24:09,290 --> 00:24:13,580
about the processor but it is not that

00:24:11,870 --> 00:24:15,890
specific as conventional programming

00:24:13,580 --> 00:24:19,160
languages then you have all the all the

00:24:15,890 --> 00:24:21,080
news and stuff so in terms of it is type

00:24:19,160 --> 00:24:24,140
safe high level which is important and

00:24:21,080 --> 00:24:26,270
last one last but not least as a

00:24:24,140 --> 00:24:28,340
software as a program manager so you can

00:24:26,270 --> 00:24:31,640
treat people you can treat people from

00:24:28,340 --> 00:24:33,020
programs as software's of concurrent

00:24:31,640 --> 00:24:35,450
current software development techniques

00:24:33,020 --> 00:24:40,309
such as requirements gathering in the

00:24:35,450 --> 00:24:43,340
sdlc scattering design analyst analysis

00:24:40,309 --> 00:24:45,470
or even testing all these methodologies

00:24:43,340 --> 00:24:49,420
apply to people and last but not least

00:24:45,470 --> 00:24:52,700
VP for we have probably revolutionary

00:24:49,420 --> 00:24:54,980
applications such as monitoring to be

00:24:52,700 --> 00:24:55,610
precise investing in binary which I

00:24:54,980 --> 00:24:57,620
mentioned before

00:24:55,610 --> 00:25:00,230
so these are some brand new use cases

00:24:57,620 --> 00:25:04,220
which has been enabled by program where

00:25:00,230 --> 00:25:08,000
they are placed with people so here are

00:25:04,220 --> 00:25:09,500
some references I have used so you may

00:25:08,000 --> 00:25:11,830
refer to some some some of the

00:25:09,500 --> 00:25:14,660
references here for further information

00:25:11,830 --> 00:25:16,610
so last but not least I want to thank

00:25:14,660 --> 00:25:19,400
you for your time and I apologize for

00:25:16,610 --> 00:25:22,010
not being able to basically physically

00:25:19,400 --> 00:25:24,110
present and this year due to the virus

00:25:22,010 --> 00:25:27,260
outbreak and some organizational

00:25:24,110 --> 00:25:29,179
policies so if you have any questions

00:25:27,260 --> 00:25:32,120
please do not hesitate to text me on

00:25:29,179 --> 00:25:34,429
telegram and I hope that you are now

00:25:32,120 --> 00:25:36,860
aware of the p4 programming language I

00:25:34,429 --> 00:25:38,620
hope I do hope that in the future we

00:25:36,860 --> 00:25:42,500
have a more in-depth discussion on

00:25:38,620 --> 00:25:45,140
people and so that I would be able to

00:25:42,500 --> 00:25:48,170
prevent more well well well written

00:25:45,140 --> 00:25:52,390
examples to give a better clarity on

00:25:48,170 --> 00:25:52,390

YouTube URL: https://www.youtube.com/watch?v=77BBEPbuWgI


