Title: An Infrastructure on Containers to Build Your Own Debian based Distro by Andrew Lee
Publication date: 2019-03-29
Playlist: FOSSASIA Summit 2019 - Kernel & Platform
Description: 
	15 March 2019 10:30, Theatre Lounge

It is impressive how much time and resources a team can save by using the OBS infrastructure to manages their packages creation and distribution. OBS is a generic system to build and distribute packages from sources in an automatic, consistent and reproducible way.

Andrew Lee will cover the benefits of using OBS, explain some of it features and workflow for all your packaging and releasing needs, like automatically build package from scratch on multiple target distros and architectures, and show you how to setup OBS infrastructure to build your own Debian based distro easily.
Captions: 
	00:00:00,269 --> 00:00:10,170
hello everyone thanks for attending my

00:00:04,529 --> 00:00:13,440
talk this talk is I will introduce you

00:00:10,170 --> 00:00:15,299
about that there's a infrastructure have

00:00:13,440 --> 00:00:20,580
been using this kind of infrastructure

00:00:15,299 --> 00:00:24,150
to do our work for our customer for like

00:00:20,580 --> 00:00:26,250
a five years and I've been doing this

00:00:24,150 --> 00:00:28,230
and then I also a package lhasa

00:00:26,250 --> 00:00:32,340
infrastructure into a official debian

00:00:28,230 --> 00:00:35,130
package so to keep easier to light you

00:00:32,340 --> 00:00:38,489
guys to use this so i put into the

00:00:35,130 --> 00:00:41,460
containers so this presentation will

00:00:38,489 --> 00:00:43,800
share about how we use these containers

00:00:41,460 --> 00:00:46,710
and infrastructure and in the end of the

00:00:43,800 --> 00:00:49,050
talk i will give you the example how we

00:00:46,710 --> 00:00:51,239
use and how to optimize that such a

00:00:49,050 --> 00:00:55,170
beauty infrastructure in your

00:00:51,239 --> 00:00:58,230
environment okay and i need to sense my

00:00:55,170 --> 00:01:00,570
employee collabora they really courage

00:00:58,230 --> 00:01:04,199
me to share this and also make these

00:01:00,570 --> 00:01:07,020
publish into the debian and also put

00:01:04,199 --> 00:01:11,369
into the images on the web for you guys

00:01:07,020 --> 00:01:15,659
to use okay then i need to introduce

00:01:11,369 --> 00:01:17,189
myself my name is Anjali and also you

00:01:15,659 --> 00:01:21,439
can help me the Jen show is in

00:01:17,189 --> 00:01:23,909
meandering and have been working on the

00:01:21,439 --> 00:01:27,000
open-source community for like 20 years

00:01:23,909 --> 00:01:29,549
so when I was started I do in the RPM

00:01:27,000 --> 00:01:37,500
packaging and then I become Debian

00:01:29,549 --> 00:01:40,470
developer ten years ago okay many of you

00:01:37,500 --> 00:01:43,380
may have already have experience to

00:01:40,470 --> 00:01:44,850
maintain the package so any of you have

00:01:43,380 --> 00:01:49,439
experience to build package or

00:01:44,850 --> 00:01:52,229
maintainer package okay let's give the

00:01:49,439 --> 00:01:54,000
overview that the house the benefit that

00:01:52,229 --> 00:01:56,909
were powerless you fiber benefit you so

00:01:54,000 --> 00:01:59,189
let's look at the classic infrastructure

00:01:56,909 --> 00:02:01,530
when you want to maintain a package we

00:01:59,189 --> 00:02:04,200
publish on the website and a depository

00:02:01,530 --> 00:02:06,570
you need to build the the package in

00:02:04,200 --> 00:02:08,849
your clean environment so for example if

00:02:06,570 --> 00:02:14,120
you want to build your software project

00:02:08,849 --> 00:02:16,760
for Debian Tracy and on the mdc-t 40

00:02:14,120 --> 00:02:20,150
you need prepared a clean shoot right

00:02:16,760 --> 00:02:21,379
and you builded the the package then you

00:02:20,150 --> 00:02:23,450
can make sure that is completely

00:02:21,379 --> 00:02:25,609
produced the ball and then you publish

00:02:23,450 --> 00:02:28,749
that the binary into the web so user can

00:02:25,609 --> 00:02:32,000
download on a repository if you have a

00:02:28,749 --> 00:02:33,769
more customer like for example you want

00:02:32,000 --> 00:02:35,510
to build a u.s. opt web project on two

00:02:33,769 --> 00:02:38,659
different Debian version then you build

00:02:35,510 --> 00:02:41,239
new prepared to two routes to make it be

00:02:38,659 --> 00:02:44,030
faster reproducible and then you publish

00:02:41,239 --> 00:02:45,379
twice and then you feel have more

00:02:44,030 --> 00:02:49,669
customer you want to support more

00:02:45,379 --> 00:02:51,680
educators now you needed you know multi

00:02:49,669 --> 00:02:53,870
supply that abuse and zero to uni

00:02:51,680 --> 00:02:56,359
maintain this and then you have more

00:02:53,870 --> 00:02:58,879
distributions there you get more bills

00:02:56,359 --> 00:03:00,769
and more mock modules so every time you

00:02:58,879 --> 00:03:02,209
want to release a new version just

00:03:00,769 --> 00:03:05,209
imagine that how many interviews you

00:03:02,209 --> 00:03:08,260
have go to build and then publish now

00:03:05,209 --> 00:03:13,870
you have more and more it's nightmare

00:03:08,260 --> 00:03:16,310
right so how can we fix this kind of mix

00:03:13,870 --> 00:03:18,680
okay this is new infrastructure in

00:03:16,310 --> 00:03:20,449
container first of all what you need you

00:03:18,680 --> 00:03:24,069
need to have your own needs distribution

00:03:20,449 --> 00:03:28,699
under somewhere on the crowd and then

00:03:24,069 --> 00:03:31,069
for me I choose Debian here and then you

00:03:28,699 --> 00:03:33,379
get Tucker installed and your

00:03:31,069 --> 00:03:37,549
distribution on the corral and then you

00:03:33,379 --> 00:03:39,620
get the debut OBS image build and then

00:03:37,549 --> 00:03:43,720
that's it done

00:03:39,620 --> 00:03:46,299
so let's see that how this

00:03:43,720 --> 00:03:47,449
infrastructure permanent benefits you

00:03:46,299 --> 00:03:49,819
okay

00:03:47,449 --> 00:03:52,579
this infrastructure automatically auto

00:03:49,819 --> 00:03:55,040
every time when you build a package he

00:03:52,579 --> 00:03:57,709
use a Depot strap to clean the shoe

00:03:55,040 --> 00:04:02,150
route so every time you make sure that

00:03:57,709 --> 00:04:05,870
this is a consistency also reproducible

00:04:02,150 --> 00:04:07,819
boot and then he has a just one source

00:04:05,870 --> 00:04:09,319
up low you don't need to publish the

00:04:07,819 --> 00:04:11,840
binary up you upload a source package

00:04:09,319 --> 00:04:14,840
and then you build against the multiple

00:04:11,840 --> 00:04:17,930
different distributions and different

00:04:14,840 --> 00:04:22,340
articles for you so this is much easier

00:04:17,930 --> 00:04:24,710
to maintain and then when you to read

00:04:22,340 --> 00:04:25,830
the release for your project or your

00:04:24,710 --> 00:04:28,139
software forecast

00:04:25,830 --> 00:04:29,669
you better have some reviewing system

00:04:28,139 --> 00:04:32,460
for the QA to test before you publish

00:04:29,669 --> 00:04:35,250
otherwise I could use a fetcher update

00:04:32,460 --> 00:04:37,770
maybe something broken so the building

00:04:35,250 --> 00:04:39,539
that the review system is like you have

00:04:37,770 --> 00:04:43,979
a branch you can submit the merger

00:04:39,539 --> 00:04:45,990
request similar doctor and then after

00:04:43,979 --> 00:04:49,590
that you publish that automatically

00:04:45,990 --> 00:04:56,009
generate the repository and publish on

00:04:49,590 --> 00:04:58,169
the way for you so for users also is the

00:04:56,009 --> 00:05:00,449
benefit is that because he's published

00:04:58,169 --> 00:05:03,449
to the repository so user can easily

00:05:00,449 --> 00:05:09,509
keep tracking the update from their

00:05:03,449 --> 00:05:12,509
system with a PT and then he has a nice

00:05:09,509 --> 00:05:16,710
value a nicer workflow he is building

00:05:12,509 --> 00:05:18,629
that the CVS like in the in a web UI

00:05:16,710 --> 00:05:23,819
then you can see the order changes or

00:05:18,629 --> 00:05:26,159
abbreviations there and then he also

00:05:23,819 --> 00:05:29,159
that it just when you imported the

00:05:26,159 --> 00:05:31,669
source package they automatic doing the

00:05:29,159 --> 00:05:34,830
dependency calculation and then build

00:05:31,669 --> 00:05:37,919
the packages so just image that you want

00:05:34,830 --> 00:05:40,289
to build a image for your embedded

00:05:37,919 --> 00:05:43,590
system for example you know that the hot

00:05:40,289 --> 00:05:46,169
kind of packages you need they just have

00:05:43,590 --> 00:05:49,110
a script to import the lost package into

00:05:46,169 --> 00:05:50,610
the the the project and then it

00:05:49,110 --> 00:05:51,870
automatically calculate bill

00:05:50,610 --> 00:05:55,490
dependencies and I started building

00:05:51,870 --> 00:05:58,409
housing right and if you get anything

00:05:55,490 --> 00:06:00,690
wrong a failed or missing build

00:05:58,409 --> 00:06:03,389
dependencies then they were evil evil

00:06:00,690 --> 00:06:05,669
show the status on the web page and then

00:06:03,389 --> 00:06:09,029
voice and if you want to build the image

00:06:05,669 --> 00:06:10,680
for your project then you have a auto

00:06:09,029 --> 00:06:13,529
boot and then you found the server or

00:06:10,680 --> 00:06:15,650
package you failed right and then you

00:06:13,529 --> 00:06:18,389
can assign the tasks to different

00:06:15,650 --> 00:06:20,569
engineer to work on different package

00:06:18,389 --> 00:06:23,639
per lorry

00:06:20,569 --> 00:06:25,199
instead of as a method you build the

00:06:23,639 --> 00:06:27,419
founder mech file and as something

00:06:25,199 --> 00:06:29,789
failed a fixed one and they run again

00:06:27,419 --> 00:06:31,800
and then they fund the other air or

00:06:29,789 --> 00:06:33,120
later they cannot really do dispute

00:06:31,800 --> 00:06:34,380
those kind of thing to make multiple

00:06:33,120 --> 00:06:37,550
people to fix it on the same time right

00:06:34,380 --> 00:06:39,990
that is one can do is

00:06:37,550 --> 00:06:42,360
okay and from this one you can see that

00:06:39,990 --> 00:06:44,310
you click on that this missing the

00:06:42,360 --> 00:06:45,749
beauty fencing system it shows that and

00:06:44,310 --> 00:06:48,569
we software ball though you can see what

00:06:45,749 --> 00:06:54,770
is missing easy the young whip by Fung

00:06:48,569 --> 00:06:57,270
in I know so it has the assets control

00:06:54,770 --> 00:06:58,979
building and the webpage so you can

00:06:57,270 --> 00:07:01,319
create different project and different

00:06:58,979 --> 00:07:02,759
engineer and different thing to work on

00:07:01,319 --> 00:07:06,120
each other and who has a right to

00:07:02,759 --> 00:07:09,240
publish who has a right to change or

00:07:06,120 --> 00:07:13,620
during the review you can do in this

00:07:09,240 --> 00:07:15,150
kind of thing okay after we see all the

00:07:13,620 --> 00:07:20,069
benefit and the nice features let's look

00:07:15,150 --> 00:07:22,860
at the how to set it up okay what you

00:07:20,069 --> 00:07:25,439
need to do is you need your

00:07:22,860 --> 00:07:29,039
distributions as I mentioned and with

00:07:25,439 --> 00:07:32,370
the Tucker and Tucker Campos installed

00:07:29,039 --> 00:07:37,680
and then you can fetch the containers

00:07:32,370 --> 00:07:38,909
image in the kit repository there you

00:07:37,680 --> 00:07:42,779
fetch you that one and then you follow

00:07:38,909 --> 00:07:44,430
the steps in with me the MD it's very

00:07:42,779 --> 00:07:47,069
simple steps then you can build the

00:07:44,430 --> 00:07:50,610
image locally and then after you build

00:07:47,069 --> 00:07:52,949
the image then you just bring it up by

00:07:50,610 --> 00:07:55,080
the docker compose up come in and then

00:07:52,949 --> 00:07:56,009
once you done this then you need to

00:07:55,080 --> 00:07:59,159
configure the

00:07:56,009 --> 00:08:02,069
you dns to point to the the container

00:07:59,159 --> 00:08:04,919
where you you you you bring it up so

00:08:02,069 --> 00:08:07,199
here it simple we just use that obvious

00:08:04,919 --> 00:08:13,139
api here because i build on my laptop

00:08:07,199 --> 00:08:15,060
for example just for demo okay once you

00:08:13,139 --> 00:08:17,939
have this image build and then you bring

00:08:15,060 --> 00:08:20,009
out and dns connected you can just type

00:08:17,939 --> 00:08:23,399
the hostname then you can see that from

00:08:20,009 --> 00:08:29,099
where from N and then the weapon and the

00:08:23,399 --> 00:08:33,839
D for account is a demean and then the

00:08:29,099 --> 00:08:36,120
password is openSUSE after you login you

00:08:33,839 --> 00:08:37,740
can see that you can do a configuration

00:08:36,120 --> 00:08:41,190
and create projects with the domain

00:08:37,740 --> 00:08:43,979
account but everything can be decay on

00:08:41,190 --> 00:08:46,079
the web so we create a a simple script

00:08:43,979 --> 00:08:48,930
to help you to set it up so just go back

00:08:46,079 --> 00:08:51,300
to the repository you previously checked

00:08:48,930 --> 00:08:54,000
out and then you can see does

00:08:51,300 --> 00:08:57,510
the the docker images here and then you

00:08:54,000 --> 00:08:59,760
switch into the OBS test folder we have

00:08:57,510 --> 00:09:03,950
a script that provide insight and it's

00:08:59,760 --> 00:09:07,649
photo you can see this the test DoD and

00:09:03,950 --> 00:09:11,310
underscore one sure script you can find

00:09:07,649 --> 00:09:13,920
this and DoD is the short name for the

00:09:11,310 --> 00:09:15,690
tongue low on the men it just imagine

00:09:13,920 --> 00:09:18,240
that this infrastructure were build your

00:09:15,690 --> 00:09:20,190
distributions right but if you want to

00:09:18,240 --> 00:09:23,220
build your package against two Ubuntu or

00:09:20,190 --> 00:09:25,890
against the two Debian just imagine that

00:09:23,220 --> 00:09:27,959
there's so many packages you cannot have

00:09:25,890 --> 00:09:30,390
full Miller on your infrastructure is

00:09:27,959 --> 00:09:32,730
text too much spaces so he has building

00:09:30,390 --> 00:09:35,700
the download on demand you automatically

00:09:32,730 --> 00:09:38,690
fetch the dependencies from the remote

00:09:35,700 --> 00:09:41,160
repository found open to or from Tavian

00:09:38,690 --> 00:09:44,970
so he sets the space on your

00:09:41,160 --> 00:09:47,700
infrastructure and then this script you

00:09:44,970 --> 00:09:50,940
just run it you see that the script we

00:09:47,700 --> 00:09:54,690
pointed to your OBS Fung and host like

00:09:50,940 --> 00:09:57,540
here is a simple I use the OBS API so

00:09:54,690 --> 00:09:59,490
you run this command and then the script

00:09:57,540 --> 00:10:03,120
that will automatically create the

00:09:59,490 --> 00:10:05,279
tongue demon for two different Debian

00:10:03,120 --> 00:10:07,680
versions you can also modify the script

00:10:05,279 --> 00:10:09,990
to fix your needs you can modify update

00:10:07,680 --> 00:10:12,140
to audit it other distributions very

00:10:09,990 --> 00:10:14,459
easy and then you automatically fetch

00:10:12,140 --> 00:10:18,480
the package from Debian like a hollow

00:10:14,459 --> 00:10:20,399
package and then some meet this hollow

00:10:18,480 --> 00:10:24,540
package into a test and repository for

00:10:20,399 --> 00:10:26,760
you so once a while you've done that you

00:10:24,540 --> 00:10:29,190
go back to the wave front end then you

00:10:26,760 --> 00:10:31,410
can see the that is the updates you can

00:10:29,190 --> 00:10:35,070
see that the two TLD project I created

00:10:31,410 --> 00:10:38,060
Debian 8 a B and I and also test the

00:10:35,070 --> 00:10:41,790
project and also the package hello

00:10:38,060 --> 00:10:45,089
so let's just click on the hello package

00:10:41,790 --> 00:10:46,589
now you can see the status so this

00:10:45,089 --> 00:10:49,339
hollow package is going to be built

00:10:46,589 --> 00:10:52,980
against two different two different

00:10:49,339 --> 00:10:55,260
Debian distributions and then against

00:10:52,980 --> 00:10:57,420
all the different articles now you can

00:10:55,260 --> 00:10:59,790
see now is showing the block it's

00:10:57,420 --> 00:11:02,760
because the the Tod is working you click

00:10:59,790 --> 00:11:04,290
on that you can see Tod is going to down

00:11:02,760 --> 00:11:07,199
low

00:11:04,290 --> 00:11:11,069
hundred fifty one packages to build a

00:11:07,199 --> 00:11:12,869
hollow package okay

00:11:11,069 --> 00:11:15,419
yes meanwhile then you can see that is

00:11:12,869 --> 00:11:19,069
your building in progress one education

00:11:15,419 --> 00:11:21,709
or it down and it shows the status there

00:11:19,069 --> 00:11:27,799
okay let's see that the components

00:11:21,709 --> 00:11:30,569
because when I do the the images I put

00:11:27,799 --> 00:11:34,470
multiple images for this infrastructure

00:11:30,569 --> 00:11:38,069
the the front-end is a Ruby rails app

00:11:34,470 --> 00:11:41,429
which has the database on that so that a

00:11:38,069 --> 00:11:43,289
image called OBS API if you see that in

00:11:41,429 --> 00:11:45,779
the repository and then the backend

00:11:43,289 --> 00:11:48,629
service is the the opiate server image

00:11:45,779 --> 00:11:51,660
and also the OBS worker and obvious

00:11:48,629 --> 00:11:54,089
worker is like the Builder so if you

00:11:51,660 --> 00:11:55,979
want to connect to a beaut your package

00:11:54,089 --> 00:11:57,869
to different articles you need a

00:11:55,979 --> 00:12:00,569
different articles worker to connect

00:11:57,869 --> 00:12:02,939
with this but it's a doc file there

00:12:00,569 --> 00:12:05,459
already so it's easy for you to look at

00:12:02,939 --> 00:12:08,160
it and add more worker for your articles

00:12:05,459 --> 00:12:10,619
in need and then the most people that we

00:12:08,160 --> 00:12:12,839
were working on development or written

00:12:10,619 --> 00:12:14,850
packaging we don't like to upload the

00:12:12,839 --> 00:12:17,910
package by the web Fung and right so

00:12:14,850 --> 00:12:21,899
this is tool this is a community tool

00:12:17,910 --> 00:12:24,029
Oh SC and the OSE people pocketing like

00:12:21,899 --> 00:12:25,889
you do that in command line so you can

00:12:24,029 --> 00:12:27,809
submit the package and download fetch

00:12:25,889 --> 00:12:31,259
your package or branch your package with

00:12:27,809 --> 00:12:35,789
a command line so here it's simple the

00:12:31,259 --> 00:12:39,179
SC this is a common workflow we used and

00:12:35,789 --> 00:12:40,739
first hand when you use the OSC you need

00:12:39,179 --> 00:12:45,959
to do some configuration but you will do

00:12:40,739 --> 00:12:49,769
it for you so you just use OSC and - up

00:12:45,959 --> 00:12:53,159
case a and then point to your OBS API

00:12:49,769 --> 00:12:55,109
found em and then you use a command LS

00:12:53,159 --> 00:12:57,389
for example he just want to list that

00:12:55,109 --> 00:12:59,999
what kind of thing available on the OBS

00:12:57,389 --> 00:13:02,489
server and you do this and then you will

00:12:59,999 --> 00:13:04,679
first hang you when you use this you ask

00:13:02,489 --> 00:13:06,269
you this configuration then then you

00:13:04,679 --> 00:13:09,329
need to type your username or password

00:13:06,269 --> 00:13:11,909
here if you create one on the way from n

00:13:09,329 --> 00:13:14,549
then you can use your own and here we

00:13:11,909 --> 00:13:16,829
just exam or an example so I use the

00:13:14,549 --> 00:13:17,860
Atome account and I use the openness to

00:13:16,829 --> 00:13:21,880
set password

00:13:17,860 --> 00:13:23,770
and then you will ask you to this kind

00:13:21,880 --> 00:13:25,480
of thing because this is just a demo so

00:13:23,770 --> 00:13:28,870
we just trust the self scientists the

00:13:25,480 --> 00:13:31,720
tvk okay and then you can see the s

00:13:28,870 --> 00:13:35,110
coming works you this that the the to do

00:13:31,720 --> 00:13:38,830
D and the test project there and then I

00:13:35,110 --> 00:13:41,020
can use this comment OSC check out for

00:13:38,830 --> 00:13:42,820
short is a co and tested I check out the

00:13:41,020 --> 00:13:44,440
test project and you can see that the

00:13:42,820 --> 00:13:46,990
hollow package you also can check it out

00:13:44,440 --> 00:13:50,350
found the found the project and then

00:13:46,990 --> 00:13:54,130
let's switch into the hollow package

00:13:50,350 --> 00:13:56,470
folder and we see that file inside for

00:13:54,130 --> 00:13:59,080
the hollow package and then we want to

00:13:56,470 --> 00:14:00,520
show you the common workflow we usually

00:13:59,080 --> 00:14:03,280
we want to update the package we need to

00:14:00,520 --> 00:14:04,600
extract the source package so we use the

00:14:03,280 --> 00:14:08,110
dpkg source

00:14:04,600 --> 00:14:10,540
- extract the source packages after this

00:14:08,110 --> 00:14:12,070
command you can see there's a folder the

00:14:10,540 --> 00:14:15,480
source curve of these packages guys

00:14:12,070 --> 00:14:18,760
shredded in the folder is called hello -

00:14:15,480 --> 00:14:21,610
2.10 and then you go into the folder and

00:14:18,760 --> 00:14:23,830
you can see the source code of the

00:14:21,610 --> 00:14:26,160
package okay and then you start to

00:14:23,830 --> 00:14:29,560
update the package and but this need the

00:14:26,160 --> 00:14:32,350
debian package in scale if you do not

00:14:29,560 --> 00:14:34,840
have a debian packaging scale here is a

00:14:32,350 --> 00:14:38,200
good start yes a debian have the

00:14:34,840 --> 00:14:40,870
maintainer guy you just go the URL that

00:14:38,200 --> 00:14:44,730
you can see it is a very very nice guy

00:14:40,870 --> 00:14:47,170
to explain the basic of debian packaging

00:14:44,730 --> 00:14:49,030
so that after you you've done your

00:14:47,170 --> 00:14:52,180
modification of course you need to

00:14:49,030 --> 00:14:54,790
prepare new release of your package and

00:14:52,180 --> 00:14:58,210
then you need to update a change log so

00:14:54,790 --> 00:15:01,570
you use the deep change command - I have

00:14:58,210 --> 00:15:04,510
shown to increase to insert a new change

00:15:01,570 --> 00:15:07,900
lock so when you do this command you can

00:15:04,510 --> 00:15:11,440
get a template found deep change and

00:15:07,900 --> 00:15:13,300
then you need to read the previous the

00:15:11,440 --> 00:15:15,220
document I mentioned that the maintainer

00:15:13,300 --> 00:15:17,770
guy to know how to update this properly

00:15:15,220 --> 00:15:20,200
and here which is updated properly and

00:15:17,770 --> 00:15:23,830
here's demo so I appended

00:15:20,200 --> 00:15:26,650
plus a one revision for opiate stock

00:15:23,830 --> 00:15:29,590
demo and then I update the distribution

00:15:26,650 --> 00:15:30,650
to test because it was an inner test

00:15:29,590 --> 00:15:32,900
project

00:15:30,650 --> 00:15:36,200
okay and then you're just safeties and

00:15:32,900 --> 00:15:40,310
exit from your editor and a back go back

00:15:36,200 --> 00:15:43,550
to come in line then you use dpkg view

00:15:40,310 --> 00:15:47,780
package and this comment is generated

00:15:43,550 --> 00:15:51,260
the source package and you see that - -

00:15:47,780 --> 00:15:52,790
s up case s is a source package and - D

00:15:51,260 --> 00:15:54,710
means that you don't check out the

00:15:52,790 --> 00:15:56,150
dependencies because we don't want to

00:15:54,710 --> 00:15:58,520
have older people dependency on our

00:15:56,150 --> 00:16:00,740
laptop or desktop we want that this

00:15:58,520 --> 00:16:02,660
under under container under and the

00:16:00,740 --> 00:16:06,140
obvious infrastructure so we just

00:16:02,660 --> 00:16:07,760
generate the source package and then use

00:16:06,140 --> 00:16:10,850
this command the sauce package go check

00:16:07,760 --> 00:16:15,080
my weight then you go to the parent

00:16:10,850 --> 00:16:17,900
directory and then you see there's a new

00:16:15,080 --> 00:16:20,450
version new revision for the sauce

00:16:17,900 --> 00:16:22,340
package I generated it of course we

00:16:20,450 --> 00:16:25,790
don't need the old one anymore so we

00:16:22,340 --> 00:16:27,380
just remove the old one but it's command

00:16:25,790 --> 00:16:32,330
and then use a

00:16:27,380 --> 00:16:34,190
osc ar ar is add and remove for short so

00:16:32,330 --> 00:16:36,200
you use this you can see that the old

00:16:34,190 --> 00:16:42,440
version captivated and the new version

00:16:36,200 --> 00:16:46,160
get added and then use a OSC checking

00:16:42,440 --> 00:16:48,230
nos CI for short and then all sort of

00:16:46,160 --> 00:16:51,650
come in message and then this one they

00:16:48,230 --> 00:16:54,800
will send a commit into the OBS server

00:16:51,650 --> 00:16:57,140
and then let's check the progress here

00:16:54,800 --> 00:16:59,270
back to the web page you go back you

00:16:57,140 --> 00:17:01,130
just reload the web page and you can see

00:16:59,270 --> 00:17:03,080
oh it's a new vision there the sauce

00:17:01,130 --> 00:17:07,030
package is here and then you start to to

00:17:03,080 --> 00:17:10,640
process to generate the binary packages

00:17:07,030 --> 00:17:13,130
one see that meanwhile if a complete you

00:17:10,640 --> 00:17:14,860
will show you the green secede and you

00:17:13,130 --> 00:17:19,430
click on layer you can see the butyl

00:17:14,860 --> 00:17:21,350
everything is the inside and then

00:17:19,430 --> 00:17:24,730
there's also one the other command is

00:17:21,350 --> 00:17:28,490
always see deeper pocket this is the

00:17:24,730 --> 00:17:31,820
similar syntax like a Debian developers

00:17:28,490 --> 00:17:35,000
to ot put command just one command you

00:17:31,820 --> 00:17:37,940
use this for example we use a refresher

00:17:35,000 --> 00:17:41,720
the source package from the mint kai

00:17:37,940 --> 00:17:43,380
okay and we fetch this and we can see

00:17:41,720 --> 00:17:47,570
the source package

00:17:43,380 --> 00:17:50,580
and when we do this command we just use

00:17:47,570 --> 00:17:53,400
you can see that OSE

00:17:50,580 --> 00:17:56,669
de pute and test is that the project we

00:17:53,400 --> 00:17:59,789
want to upload to and then the DSC file

00:17:56,669 --> 00:18:00,380
the main guy on the scroll one point two

00:17:59,789 --> 00:18:05,280
points

00:18:00,380 --> 00:18:07,200
39 DSC and then after this comment that

00:18:05,280 --> 00:18:09,390
there were a list package your sauce

00:18:07,200 --> 00:18:12,539
package will be uploaded into the test

00:18:09,390 --> 00:18:16,080
project okay again we check the progress

00:18:12,539 --> 00:18:20,760
we got back to the you just click on the

00:18:16,080 --> 00:18:23,039
opioids icon on the left and on that

00:18:20,760 --> 00:18:24,900
webpage and then you can see this front

00:18:23,039 --> 00:18:27,360
page and then you see that that is

00:18:24,900 --> 00:18:32,820
update you can see there's a mint guy

00:18:27,360 --> 00:18:34,830
there and click on that you can see it

00:18:32,820 --> 00:18:36,330
started processing of course there

00:18:34,830 --> 00:18:39,630
didn't need to download the DoD also

00:18:36,330 --> 00:18:42,510
need some time to wait okay and then

00:18:39,630 --> 00:18:44,610
here we already show you about the

00:18:42,510 --> 00:18:47,640
workflow and the setup by way you look

00:18:44,610 --> 00:18:50,730
at about how to optimize this like we're

00:18:47,640 --> 00:18:54,120
using this a lot in at work for isn't

00:18:50,730 --> 00:18:58,409
for instant that we used the merge all

00:18:54,120 --> 00:19:00,659
misc and this one is actually we forked

00:18:58,409 --> 00:19:05,039
from the opened whose merge o matic

00:19:00,659 --> 00:19:06,870
project to our merge all misc and this

00:19:05,039 --> 00:19:08,880
is automatically doing the continuous

00:19:06,870 --> 00:19:10,890
Lily packaging integration

00:19:08,880 --> 00:19:13,740
just imagine create distribution but

00:19:10,890 --> 00:19:16,140
your upstream like if you just vision

00:19:13,740 --> 00:19:18,330
for example at based on Ubuntu but about

00:19:16,140 --> 00:19:21,299
Ubuntu has some new update appears on a

00:19:18,330 --> 00:19:23,940
repository and this software can help

00:19:21,299 --> 00:19:25,770
you to dictate there's a new vision see

00:19:23,940 --> 00:19:27,419
that a two different version different

00:19:25,770 --> 00:19:29,820
revision and newer one fan will burn too

00:19:27,419 --> 00:19:32,309
and this one will automatically Tate and

00:19:29,820 --> 00:19:35,039
then submit that to OBS for you you see

00:19:32,309 --> 00:19:39,990
that the merge automatic merge all misc

00:19:35,039 --> 00:19:43,140
a user estimate mean update okay and

00:19:39,990 --> 00:19:46,500
then also you can hook that the OBS with

00:19:43,140 --> 00:19:48,419
your bucket tracker for example you can

00:19:46,500 --> 00:19:51,290
you can you can modify the source code

00:19:48,419 --> 00:19:54,540
and then once that your package built

00:19:51,290 --> 00:19:57,380
successfully then you can trigger the

00:19:54,540 --> 00:20:00,410
scripted to update the stock status

00:19:57,380 --> 00:20:02,870
your bug tracker or you can also

00:20:00,410 --> 00:20:03,560
integrate that the OBS bill with the

00:20:02,870 --> 00:20:05,930
Jenkins

00:20:03,560 --> 00:20:07,670
so just for instant that you can build

00:20:05,930 --> 00:20:10,130
that the package had already found kid

00:20:07,670 --> 00:20:11,900
and he example that we build an in is

00:20:10,130 --> 00:20:13,850
Colonel package in kit so we have

00:20:11,900 --> 00:20:17,210
multiple developer work on the git

00:20:13,850 --> 00:20:19,910
repository the ones that they want to

00:20:17,210 --> 00:20:21,830
submit a merge and then they watch and

00:20:19,910 --> 00:20:25,160
trigger a Jenkins job and to

00:20:21,830 --> 00:20:27,110
automatically build the new package and

00:20:25,160 --> 00:20:29,300
how they build he actually follows that

00:20:27,110 --> 00:20:31,820
the the common workflow I show you guys

00:20:29,300 --> 00:20:32,660
before you see that uses and command

00:20:31,820 --> 00:20:34,340
right

00:20:32,660 --> 00:20:38,510
you generate a new source package and

00:20:34,340 --> 00:20:40,460
then submit into the OBS and then also

00:20:38,510 --> 00:20:44,960
you can even build your distribution

00:20:40,460 --> 00:20:48,380
image by Jenkins also here is a for

00:20:44,960 --> 00:20:52,030
example that we have the image in the

00:20:48,380 --> 00:20:54,470
kit so we we modify that the the images

00:20:52,030 --> 00:20:56,450
customization and then we submit that

00:20:54,470 --> 00:20:59,510
merge and the merger trigger there's the

00:20:56,450 --> 00:21:02,810
Jenkins job to automatically build a new

00:20:59,510 --> 00:21:05,390
at least for image and once that the

00:21:02,810 --> 00:21:10,520
image build then you can use integrate

00:21:05,390 --> 00:21:13,580
with lava and lava is developed by noon

00:21:10,520 --> 00:21:16,670
arrow which is automatically a

00:21:13,580 --> 00:21:18,830
validation system for real hardware so

00:21:16,670 --> 00:21:21,260
lava is a P hydaker no CI

00:21:18,830 --> 00:21:24,950
and which is the project auto text and

00:21:21,260 --> 00:21:27,230
then to verify the kernel books and also

00:21:24,950 --> 00:21:29,660
we use this one to verify the image

00:21:27,230 --> 00:21:32,870
abused and also running the test on the

00:21:29,660 --> 00:21:39,590
image to see that if the new image have

00:21:32,870 --> 00:21:44,590
no problem okay let's recap then in my

00:21:39,590 --> 00:21:46,760
talk you just already get idea how

00:21:44,590 --> 00:21:49,640
impressive the how much time and

00:21:46,760 --> 00:21:52,550
resources a teen can save if you use it

00:21:49,640 --> 00:21:54,380
is such a infrastructure to to manage

00:21:52,550 --> 00:21:57,980
your package or you with distributions

00:21:54,380 --> 00:21:59,810
and then just remember that you have

00:21:57,980 --> 00:22:03,410
seen how this imposter can benefit you

00:21:59,810 --> 00:22:06,920
and how you set up and about how to use

00:22:03,410 --> 00:22:09,400
the components okay

00:22:06,920 --> 00:22:11,149
and I need to sense that everybody who

00:22:09,400 --> 00:22:13,190
involved in this

00:22:11,149 --> 00:22:16,039
with all those people I couldn't make

00:22:13,190 --> 00:22:34,999
this come true thank you

00:22:16,039 --> 00:22:36,830
and any questions if I want to clone

00:22:34,999 --> 00:22:40,039
your repository I just use admin

00:22:36,830 --> 00:22:42,529
openSUSE you mean clone my whip a story

00:22:40,039 --> 00:22:45,859
then I use a kid you need to code the

00:22:42,529 --> 00:22:50,570
kidnap interface and then you yeah yeah

00:22:45,859 --> 00:22:53,119
yeah okay clone from the repository so

00:22:50,570 --> 00:22:56,809
even though it's openSUSE the password

00:22:53,119 --> 00:22:58,789
but it's actually a debian build it's a

00:22:56,809 --> 00:23:01,519
Debian package but this software is

00:22:58,789 --> 00:23:04,009
developed and by openSUSE the up string

00:23:01,519 --> 00:23:05,899
is open SUSE and then I keep that the

00:23:04,009 --> 00:23:07,399
default username password without the

00:23:05,899 --> 00:23:23,419
modification that you can update change

00:23:07,399 --> 00:23:26,599
that yourself okay I haven't I haven't

00:23:23,419 --> 00:23:30,169
done this before because the my quest is

00:23:26,599 --> 00:23:32,629
and the packaging size so I have a one

00:23:30,169 --> 00:23:35,330
project is finally in that I provide the

00:23:32,629 --> 00:23:38,539
up here and spec file and also that

00:23:35,330 --> 00:23:40,580
Debian DSC file in the same source

00:23:38,539 --> 00:23:42,080
package so abused and different multi

00:23:40,580 --> 00:23:44,659
port of diffusion and also I'm different

00:23:42,080 --> 00:23:46,279
all caches also but I never done that a1

00:23:44,659 --> 00:23:49,309
software maybe you need to provide

00:23:46,279 --> 00:23:52,820
something that OB is supported but this

00:23:49,309 --> 00:23:55,580
one is we actually our customer project

00:23:52,820 --> 00:23:58,309
we use that and based on Debian but most

00:23:55,580 --> 00:24:01,219
of the project and Debian sir we modify

00:23:58,309 --> 00:24:02,960
the the the OBS package to customize to

00:24:01,219 --> 00:24:05,839
make it be able to build a whole

00:24:02,960 --> 00:24:08,089
distribution they've been based yeah so

00:24:05,839 --> 00:24:12,919
this this is the purpose but I never

00:24:08,089 --> 00:24:14,719
tried the other yeah probably yeah maybe

00:24:12,919 --> 00:24:16,700
you need to get obvious

00:24:14,719 --> 00:24:18,379
maybe the technical menu or something I

00:24:16,700 --> 00:24:19,970
think this might be possible I don't

00:24:18,379 --> 00:24:23,550
know because I'm not obviously better

00:24:19,970 --> 00:24:23,550
[Laughter]

00:24:25,530 --> 00:24:34,870
okay any more questions yeah we use this

00:24:32,200 --> 00:24:37,720
to build the the embedded image also not

00:24:34,870 --> 00:24:39,340
only the desktop and it's something very

00:24:37,720 --> 00:24:42,430
powerful because he computed the

00:24:39,340 --> 00:24:45,100
multiple package repair early on the

00:24:42,430 --> 00:24:46,810
same time so much faster than if you

00:24:45,100 --> 00:24:49,210
just have a one make fire to build one

00:24:46,810 --> 00:24:52,270
image and you have catched the multiple

00:24:49,210 --> 00:24:54,820
failed taking a reduced appeal to the

00:24:52,270 --> 00:25:04,900
task to admit many different engineers

00:24:54,820 --> 00:25:06,910
can fix them much quicker I think it

00:25:04,900 --> 00:25:09,550
opens to say over one but I would try

00:25:06,910 --> 00:25:11,410
that it doesn't fit our need because

00:25:09,550 --> 00:25:16,090
they cannot build whole distributions

00:25:11,410 --> 00:25:17,680
and also he is just provided the the the

00:25:16,090 --> 00:25:19,270
package you cannot do the integration

00:25:17,680 --> 00:25:21,370
because you are not the one host on

00:25:19,270 --> 00:25:23,920
yourself you cannot modify the call to

00:25:21,370 --> 00:25:28,650
hook up your bug tracker always young

00:25:23,920 --> 00:25:28,650
Jenkins everything so better self help

00:25:32,970 --> 00:25:40,030
yes yes a pilot but if you need more

00:25:37,140 --> 00:25:42,460
know to suit your need you can do get

00:25:40,030 --> 00:25:45,070
the Tucker image and also the the script

00:25:42,460 --> 00:25:46,990
example the Tod test you can't you can't

00:25:45,070 --> 00:25:48,780
you can each is there you can just

00:25:46,990 --> 00:25:54,210
modify the script to fit your needs

00:25:48,780 --> 00:25:54,210

YouTube URL: https://www.youtube.com/watch?v=EzSPgcVNdFE


