Title: BuildStream - The All Purpose Build and Integration Tool by Tristan Van Berkom
Publication date: 2019-03-29
Playlist: FOSSASIA Summit 2019 - Kernel & Platform
Description: 
	15 March 2019 11:40, Theatre Lounge

This talk will begin with a brief introduction to the problems which revolve around the software build space from the perspective of the developer and the perspective of the system integrator. Then we will present the solutions we've come up with in the BuildStream project; which is now used to build the base Flatpak runtimes and GNOME releases. As this will be a brief session, we will try to discuss the build space in the abstract and hope to raise awareness through the Q&A session.
Captions: 
	00:00:00,800 --> 00:00:06,359
so hello everybody I'm Tristan I work

00:00:04,200 --> 00:00:08,550
for code think and I'm here to talk to

00:00:06,359 --> 00:00:12,599
you about I'm here to talk to you about

00:00:08,550 --> 00:00:15,120
build stream which is a new build and

00:00:12,599 --> 00:00:17,850
integration technology useful for

00:00:15,120 --> 00:00:22,880
integrating full software stacks and for

00:00:17,850 --> 00:00:22,880
developing software within these stacks

00:00:23,210 --> 00:00:27,960
[Music]

00:00:24,859 --> 00:00:31,710
add code think we've had some previous

00:00:27,960 --> 00:00:36,030
iterations of build tooling called base

00:00:31,710 --> 00:00:40,680
rock and ybd and this is basically an

00:00:36,030 --> 00:00:43,950
extension or a new version that we're

00:00:40,680 --> 00:00:46,739
using to build when in gnome and flat

00:00:43,950 --> 00:00:48,450
pack and etc etc so let me get started

00:00:46,739 --> 00:00:51,180
because I'm a little bit late and

00:00:48,450 --> 00:00:54,660
flabbergasted and the slides will help

00:00:51,180 --> 00:00:58,020
me get on top of my game so what is

00:00:54,660 --> 00:01:00,660
build stream trustable build an

00:00:58,020 --> 00:01:06,540
integration tool we because we have a

00:01:00,660 --> 00:01:09,510
focus on deterministic builds and we

00:01:06,540 --> 00:01:12,330
isolate our build sandboxes so basically

00:01:09,510 --> 00:01:14,070
every build environment is like a

00:01:12,330 --> 00:01:16,770
production build environment whether

00:01:14,070 --> 00:01:19,320
you're you know on a build server or on

00:01:16,770 --> 00:01:25,320
your laptop every build environment is

00:01:19,320 --> 00:01:27,720
the same basically it's a pipeline of

00:01:25,320 --> 00:01:30,110
file system data permutation so the

00:01:27,720 --> 00:01:35,040
design is very simple I don't have a

00:01:30,110 --> 00:01:36,689
thing here so the design is very simple

00:01:35,040 --> 00:01:38,939
it's just basically a pipeline of

00:01:36,689 --> 00:01:44,640
elements related by their dependencies

00:01:38,939 --> 00:01:46,619
and each element performs some activity

00:01:44,640 --> 00:01:48,659
on its input file system data and

00:01:46,619 --> 00:01:51,240
creates output file system data and so

00:01:48,659 --> 00:01:57,530
on it just happens to be useful for

00:01:51,240 --> 00:01:57,530
builds sandboxed execution environment

00:01:58,280 --> 00:02:04,140
builds don't have access to the network

00:02:00,600 --> 00:02:08,069
etc etc as you would expect in a

00:02:04,140 --> 00:02:10,110
production build environment we do

00:02:08,069 --> 00:02:13,300
caching and sharing of build artifacts

00:02:10,110 --> 00:02:17,680
which is interesting for workgroup

00:02:13,300 --> 00:02:20,319
and for and for CI and for combination

00:02:17,680 --> 00:02:23,680
of both for instance a workgroup might

00:02:20,319 --> 00:02:25,900
use a CI server who's doing production

00:02:23,680 --> 00:02:28,450
builds or just test builds a lot and

00:02:25,900 --> 00:02:31,030
that means that since they're populating

00:02:28,450 --> 00:02:33,879
an artifact cache when a user or

00:02:31,030 --> 00:02:36,220
developer builds then most of what they

00:02:33,879 --> 00:02:37,660
want to build is already available and

00:02:36,220 --> 00:02:43,000
they can just download it instead of

00:02:37,660 --> 00:02:48,489
building multi-purpose build

00:02:43,000 --> 00:02:50,560
instructions and metadata so perhaps

00:02:48,489 --> 00:02:52,209
you've been in this position where you

00:02:50,560 --> 00:02:54,940
have an application and you want to

00:02:52,209 --> 00:02:57,040
distribute it on several targets say you

00:02:54,940 --> 00:03:01,150
want to distribute a flat-pack you want

00:02:57,040 --> 00:03:03,299
to distribute well bad example because

00:03:01,150 --> 00:03:05,950
we don't really support Windows yet but

00:03:03,299 --> 00:03:10,239
you know you want to support a Windows

00:03:05,950 --> 00:03:12,430
bundle or you know or Debian package and

00:03:10,239 --> 00:03:16,269
you have to have this build directory

00:03:12,430 --> 00:03:17,910
with so many different scripts of all

00:03:16,269 --> 00:03:22,359
the different ways that you build your

00:03:17,910 --> 00:03:24,370
software and we want to be able to allow

00:03:22,359 --> 00:03:28,989
you to do everything with the same build

00:03:24,370 --> 00:03:31,750
metadata so there's that and it has a

00:03:28,989 --> 00:03:34,660
developer story we'll get into that

00:03:31,750 --> 00:03:42,609
later right so what are our motivations

00:03:34,660 --> 00:03:45,489
for developing build stream so looking

00:03:42,609 --> 00:03:48,549
at this and as a perspective of you know

00:03:45,489 --> 00:03:51,690
we weren't satisfied with build root we

00:03:48,549 --> 00:03:54,250
weren't satisfied with Yocto and we

00:03:51,690 --> 00:03:56,590
coming from a perspective where we want

00:03:54,250 --> 00:04:02,200
to build custom Linux firmwares for

00:03:56,590 --> 00:04:08,139
embedded systems right so one of the

00:04:02,200 --> 00:04:11,980
things that we observe is a lot of work

00:04:08,139 --> 00:04:13,900
is duplicated in in cross compilation in

00:04:11,980 --> 00:04:17,079
different projects such as build root

00:04:13,900 --> 00:04:21,370
and Yocto and pushing patches upstream

00:04:17,079 --> 00:04:23,100
to high level or middleware

00:04:21,370 --> 00:04:26,730
which doesn't really need to

00:04:23,100 --> 00:04:28,980
work with cross-compilation so I wonder

00:04:26,730 --> 00:04:32,340
if it's even worthwhile to spend all of

00:04:28,980 --> 00:04:35,730
that human energy patching upstream

00:04:32,340 --> 00:04:37,380
stuff patching middleware to be able to

00:04:35,730 --> 00:04:40,050
cross compile and patching their

00:04:37,380 --> 00:04:44,340
configure scripts and their build their

00:04:40,050 --> 00:04:46,770
build files seems like a big waste when

00:04:44,340 --> 00:04:50,070
all we really need to cross compile is a

00:04:46,770 --> 00:04:52,530
base runtime in a kernel and from there

00:04:50,070 --> 00:04:55,380
we can basically just native compiler

00:04:52,530 --> 00:04:57,600
virtualize and save ourselves all hope

00:04:55,380 --> 00:04:59,250
the whole headache but the same time

00:04:57,600 --> 00:05:01,350
build stream doesn't really prevent you

00:04:59,250 --> 00:05:07,340
to do cross compilation this is just

00:05:01,350 --> 00:05:10,080
kind of my you know opinion one of the

00:05:07,340 --> 00:05:13,350
motivations is smoke testing builds our

00:05:10,080 --> 00:05:17,060
new host platforms we don't want to have

00:05:13,350 --> 00:05:19,230
to do that right so we just say that

00:05:17,060 --> 00:05:23,610
we're never gonna touch the host

00:05:19,230 --> 00:05:25,530
platform so why bother smoke testing

00:05:23,610 --> 00:05:27,600
your whole build on a new version of

00:05:25,530 --> 00:05:30,000
Ubuntu or a new version of Debian or a

00:05:27,600 --> 00:05:33,300
new version of fedora where everything

00:05:30,000 --> 00:05:35,280
just work the same right it's in the

00:05:33,300 --> 00:05:37,260
later slide but basically we have a no

00:05:35,280 --> 00:05:40,440
host tool policy and build stream you

00:05:37,260 --> 00:05:43,890
can never build on your hosts you build

00:05:40,440 --> 00:05:45,780
on your hosts but you never use your

00:05:43,890 --> 00:05:47,100
hosts compiler you never use your hosts

00:05:45,780 --> 00:05:53,090
libraries everything's always

00:05:47,100 --> 00:05:55,380
containerized right and another point is

00:05:53,090 --> 00:05:58,170
complicated setups for production builds

00:05:55,380 --> 00:06:04,800
so since build systems generally are a

00:05:58,170 --> 00:06:08,070
byproduct of a distribution right the

00:06:04,800 --> 00:06:12,240
build system is just basically well we

00:06:08,070 --> 00:06:15,690
need it to also build this so these

00:06:12,240 --> 00:06:18,480
things are like you know rpm and Debian

00:06:15,690 --> 00:06:20,430
they're more than 30 years old now and

00:06:18,480 --> 00:06:22,770
they come from a time where we had a

00:06:20,430 --> 00:06:27,000
very different set of needs so people

00:06:22,770 --> 00:06:32,780
still get to do production environment

00:06:27,000 --> 00:06:34,880
build build setups but then they use obs

00:06:32,780 --> 00:06:37,190
you have to like set up a server and

00:06:34,880 --> 00:06:39,110
everything and you have to you know

00:06:37,190 --> 00:06:41,530
integrate three or four technologies

00:06:39,110 --> 00:06:44,230
together just to get something that is

00:06:41,530 --> 00:06:47,660
more or less repeatable and reproducible

00:06:44,230 --> 00:06:51,740
as a build environment and that was one

00:06:47,660 --> 00:06:54,740
of our motivations monolithic

00:06:51,740 --> 00:06:57,020
repositories of metadata so if anybody

00:06:54,740 --> 00:07:02,690
has anybody in the audience used build

00:06:57,020 --> 00:07:09,560
route or Yocto oh that's that's not very

00:07:02,690 --> 00:07:12,800
many people okay well generally when

00:07:09,560 --> 00:07:14,840
you're in these systems they are the

00:07:12,800 --> 00:07:17,000
more popular systems for generating

00:07:14,840 --> 00:07:19,520
custom Linux firmware so if you if you

00:07:17,000 --> 00:07:23,150
want to any device if you want to make a

00:07:19,520 --> 00:07:26,180
modem or not a modem but you know if you

00:07:23,150 --> 00:07:28,520
want to make a set-top box or or

00:07:26,180 --> 00:07:31,100
anything basically based on Linux you're

00:07:28,520 --> 00:07:32,870
gonna use one of these tools to target

00:07:31,100 --> 00:07:34,250
your platform and to target your

00:07:32,870 --> 00:07:38,000
hardware and to build something

00:07:34,250 --> 00:07:41,300
customized and to take Linux lib see the

00:07:38,000 --> 00:07:42,770
compiler and you know all of the core

00:07:41,300 --> 00:07:49,690
utils and everything you're going to

00:07:42,770 --> 00:07:52,100
build it in this one system right and

00:07:49,690 --> 00:07:54,169
build stream is kind of another one of

00:07:52,100 --> 00:07:56,930
these except you can use it for other

00:07:54,169 --> 00:08:00,200
stuff right and this is the build space

00:07:56,930 --> 00:08:02,720
that we're working with typically these

00:08:00,200 --> 00:08:07,820
repositories or these systems come with

00:08:02,720 --> 00:08:10,610
a prepackaged set of instructions to

00:08:07,820 --> 00:08:12,050
build this system so they already have a

00:08:10,610 --> 00:08:13,580
knowledge of what they're gonna build

00:08:12,050 --> 00:08:17,840
which is another thing we don't really

00:08:13,580 --> 00:08:20,630
like but there are also monolithic

00:08:17,840 --> 00:08:22,820
repositories which means that you have

00:08:20,630 --> 00:08:24,680
one repository with all the build

00:08:22,820 --> 00:08:27,220
instructions to build basically

00:08:24,680 --> 00:08:32,750
everything that you could possibly build

00:08:27,220 --> 00:08:37,070
right and that means that say if you

00:08:32,750 --> 00:08:39,710
have you have like a system or or a base

00:08:37,070 --> 00:08:40,580
image where you might want to use cute

00:08:39,710 --> 00:08:43,150
right

00:08:40,580 --> 00:08:51,160
and cute five

00:08:43,150 --> 00:08:53,320
and Weyland right then you're gonna have

00:08:51,160 --> 00:08:58,210
that all in the same tree with the Linux

00:08:53,320 --> 00:09:00,220
kernel and with with G Lib C and then

00:08:58,210 --> 00:09:03,250
when you make a modification to G Lib C

00:09:00,220 --> 00:09:07,570
or to how you build G Lib C or how you

00:09:03,250 --> 00:09:09,600
build the kernel and it's gonna have a

00:09:07,570 --> 00:09:12,370
repercussion on all the different

00:09:09,600 --> 00:09:15,010
variations of things that you can build

00:09:12,370 --> 00:09:17,740
right so this kind of creates friction

00:09:15,010 --> 00:09:19,870
in a huge environment like Yocto where

00:09:17,740 --> 00:09:29,610
you have like so many different output

00:09:19,870 --> 00:09:29,610
platforms and yeah so note on the time

00:09:31,440 --> 00:09:36,040
so basically the the fact that we had

00:09:34,150 --> 00:09:37,630
all of this in the same tree was

00:09:36,040 --> 00:09:39,400
something that we didn't like so we

00:09:37,630 --> 00:09:43,030
wanted something that was more flexible

00:09:39,400 --> 00:09:45,220
which allowed up streams to consume

00:09:43,030 --> 00:09:48,010
streams to consume from up streams so up

00:09:45,220 --> 00:09:50,260
streams would be lower level lower level

00:09:48,010 --> 00:09:52,240
stacks and people would maintain those

00:09:50,260 --> 00:09:55,270
and up streams could consume them and

00:09:52,240 --> 00:09:57,820
then if we were developing a desktop

00:09:55,270 --> 00:10:00,190
environment then we could just decide

00:09:57,820 --> 00:10:03,090
when to depend on a new version of a

00:10:00,190 --> 00:10:03,090
runtime

00:10:05,690 --> 00:10:10,980
so I'm gonna skip over this because it's

00:10:08,639 --> 00:10:13,350
basically the same thing tight coupling

00:10:10,980 --> 00:10:17,070
of build systems and distributions means

00:10:13,350 --> 00:10:18,930
that you know we have this build system

00:10:17,070 --> 00:10:21,060
but it's only made to build this and I

00:10:18,930 --> 00:10:23,610
can't use it to build that basically

00:10:21,060 --> 00:10:30,810
because it's ingrained and it's built

00:10:23,610 --> 00:10:34,410
together and it's not flexible so what

00:10:30,810 --> 00:10:40,199
are developers what about the developers

00:10:34,410 --> 00:10:43,680
you know um generally developers work on

00:10:40,199 --> 00:10:46,649
their laptop work on a on a module test

00:10:43,680 --> 00:10:49,319
it on their own and push the stuff

00:10:46,649 --> 00:10:51,870
upstream and say okay it's fixed or if

00:10:49,319 --> 00:10:55,139
you're in like a in a company then you

00:10:51,870 --> 00:10:58,259
might have higher bar of entry and a lot

00:10:55,139 --> 00:11:00,300
more restraints but you're making the

00:10:58,259 --> 00:11:03,600
developer's life difficult by saying

00:11:00,300 --> 00:11:05,670
that you have to install this device and

00:11:03,600 --> 00:11:08,180
you have to deploy to this device and we

00:11:05,670 --> 00:11:10,800
want to bring that introduct that

00:11:08,180 --> 00:11:13,050
integrated production environment

00:11:10,800 --> 00:11:16,139
directly to the developers workstations

00:11:13,050 --> 00:11:19,350
so that the developer can actually test

00:11:16,139 --> 00:11:22,380
within a target product and within a

00:11:19,350 --> 00:11:24,060
targeted environment and we do the best

00:11:22,380 --> 00:11:28,740
that we can within a container

00:11:24,060 --> 00:11:30,660
shell but you know of course at a

00:11:28,740 --> 00:11:34,100
certain point you have to boot a VM or

00:11:30,660 --> 00:11:34,100
boot on hardware

00:11:35,860 --> 00:11:41,460
so I'm gonna skip over this because it's

00:11:38,200 --> 00:11:41,460
not important

00:11:41,820 --> 00:11:44,820
cross-compilation

00:11:48,240 --> 00:11:53,519
so I basically spoke about this already

00:11:51,420 --> 00:11:56,100
production builds everywhere by default

00:11:53,519 --> 00:12:03,029
let's just take the environment bring it

00:11:56,100 --> 00:12:05,540
to the developers laptop so we have a

00:12:03,029 --> 00:12:08,329
high focus on reproducible

00:12:05,540 --> 00:12:11,639
reproducibility and repeatability

00:12:08,329 --> 00:12:13,949
repeatability of the same process is to

00:12:11,639 --> 00:12:17,129
say that we can confidently repeat

00:12:13,949 --> 00:12:20,670
exactly the same process every time that

00:12:17,129 --> 00:12:23,100
we build something reproducibility these

00:12:20,670 --> 00:12:25,350
days means bit for a bit reproducibility

00:12:23,100 --> 00:12:28,410
of the output so for a given set of

00:12:25,350 --> 00:12:31,619
inputs we know that the output will

00:12:28,410 --> 00:12:34,040
always be bit for a bit identical that

00:12:31,619 --> 00:12:37,230
is not something that we can achieve

00:12:34,040 --> 00:12:40,170
because if you look at the reproducible

00:12:37,230 --> 00:12:43,199
builds project which is actually very

00:12:40,170 --> 00:12:46,110
interesting there's a bunch of reasons

00:12:43,199 --> 00:12:50,999
why source code also still has to adapt

00:12:46,110 --> 00:12:53,279
to be able to be reproducible but we do

00:12:50,999 --> 00:12:56,910
by default provide an environment that

00:12:53,279 --> 00:13:04,410
is most conducive to creating

00:12:56,910 --> 00:13:06,839
reproducible builds when we say minimize

00:13:04,410 --> 00:13:09,420
on host dependencies for the build tool

00:13:06,839 --> 00:13:11,490
that's important for us because we think

00:13:09,420 --> 00:13:13,860
going forward it's important to be able

00:13:11,490 --> 00:13:16,679
to always bootstrap a new hardware and

00:13:13,860 --> 00:13:19,170
get to a point where you can start

00:13:16,679 --> 00:13:22,850
building and you will have that same

00:13:19,170 --> 00:13:22,850
experience on a new platform

00:13:27,360 --> 00:13:34,649
so reusable multi-purpose build metadata

00:13:32,010 --> 00:13:37,260
is as I said before important to be able

00:13:34,649 --> 00:13:39,149
to target multiple outputs and multiple

00:13:37,260 --> 00:13:52,110
packaging formats with your same

00:13:39,149 --> 00:13:53,880
software right right so your developer

00:13:52,110 --> 00:13:57,029
cycles within build stream would be a

00:13:53,880 --> 00:13:59,010
little bit slower so I say quick here

00:13:57,029 --> 00:14:03,899
but scratch that it's a little bit

00:13:59,010 --> 00:14:05,459
slower but at the same time it means

00:14:03,899 --> 00:14:08,339
that every time you launch a shell or

00:14:05,459 --> 00:14:10,560
you run a test you're running on exactly

00:14:08,339 --> 00:14:12,300
something that you know and you're not

00:14:10,560 --> 00:14:14,430
necessarily only testing your

00:14:12,300 --> 00:14:17,730
application you're testing your

00:14:14,430 --> 00:14:20,519
application with a modification that you

00:14:17,730 --> 00:14:22,110
might have done to gtk or too cute or a

00:14:20,519 --> 00:14:25,170
modification that you might have done

00:14:22,110 --> 00:14:30,600
even in G Lib C and then you can just

00:14:25,170 --> 00:14:32,550
run it right and always know this is

00:14:30,600 --> 00:14:34,829
exactly the combination of things I'm

00:14:32,550 --> 00:14:41,519
testing right now in this shell which is

00:14:34,829 --> 00:14:43,380
quite interesting so artifact sharing is

00:14:41,519 --> 00:14:46,199
something that the belt developer

00:14:43,380 --> 00:14:48,959
benefits from and if you have a

00:14:46,199 --> 00:14:52,560
workgroup and somehow I'm getting a bit

00:14:48,959 --> 00:14:56,130
redundant here sorry about that artifact

00:14:52,560 --> 00:14:58,470
sharing is people are appreciating it a

00:14:56,130 --> 00:15:00,570
lot right now in free desktop as decay

00:14:58,470 --> 00:15:05,100
because we're building things that take

00:15:00,570 --> 00:15:06,990
seven hours to build and when we share

00:15:05,100 --> 00:15:10,110
the artifacts then we only need to build

00:15:06,990 --> 00:15:11,630
like you know for 30 minutes and 20

00:15:10,110 --> 00:15:14,010
minutes of it is downloading right

00:15:11,630 --> 00:15:17,300
because we only build what we want to

00:15:14,010 --> 00:15:17,300
test and what we want to change

00:15:19,720 --> 00:15:27,640
so I have enough time I ran through that

00:15:24,120 --> 00:15:29,800
let's have it a little look at what this

00:15:27,640 --> 00:15:35,050
looks like so when you this is a very

00:15:29,800 --> 00:15:43,840
small sample project its Glade running

00:15:35,050 --> 00:15:47,440
on import of a debian basically image so

00:15:43,840 --> 00:15:51,310
we we're going to import a Debian image

00:15:47,440 --> 00:15:54,100
and then we're gonna build Glade on top

00:15:51,310 --> 00:15:56,830
of that image using the tools that

00:15:54,100 --> 00:16:00,550
Debian provided and then we're gonna use

00:15:56,830 --> 00:16:04,120
debian packaging tools to create a

00:16:00,550 --> 00:16:07,660
Debian package of Glade all within a

00:16:04,120 --> 00:16:11,170
containerized environment which if

00:16:07,660 --> 00:16:13,360
anybody were to run on their laptop they

00:16:11,170 --> 00:16:16,120
should get exactly the same result

00:16:13,360 --> 00:16:19,690
basically so if you were on a spur dora

00:16:16,120 --> 00:16:22,180
system or in a boon to system or a Susi

00:16:19,690 --> 00:16:24,840
system or any system that you could run

00:16:22,180 --> 00:16:27,820
build stream you should be able to

00:16:24,840 --> 00:16:29,680
produce exactly the same deviant package

00:16:27,820 --> 00:16:34,600
for exactly the same deviant version

00:16:29,680 --> 00:16:39,100
right and one thing I'd like to just

00:16:34,600 --> 00:16:42,370
point out in the show output here is the

00:16:39,100 --> 00:16:44,770
cache keys these are very interesting in

00:16:42,370 --> 00:16:49,150
build stream they are basically hashes

00:16:44,770 --> 00:16:51,520
of all of the input so every time we see

00:16:49,150 --> 00:16:54,910
the hashes a lot in the user interface

00:16:51,520 --> 00:16:59,530
because they represent exactly the

00:16:54,910 --> 00:17:03,630
version or the the the hash of all of

00:16:59,530 --> 00:17:03,630
the inputs for a given output basically

00:17:05,210 --> 00:17:12,960
so I'm just gonna go over okay here I

00:17:10,980 --> 00:17:14,670
don't want to spend too much time

00:17:12,960 --> 00:17:15,210
talking because I don't have that much

00:17:14,670 --> 00:17:17,580
time

00:17:15,210 --> 00:17:20,130
so basically projects are composed of

00:17:17,580 --> 00:17:24,510
elements elements are all yamo files

00:17:20,130 --> 00:17:28,940
right now elements are related through

00:17:24,510 --> 00:17:32,160
dependencies and elements can depend on

00:17:28,940 --> 00:17:34,920
elements in other projects that in that

00:17:32,160 --> 00:17:37,770
allows for separation between projects

00:17:34,920 --> 00:17:43,110
and maintainer ships of different builds

00:17:37,770 --> 00:17:45,840
and elements can all be implemented by

00:17:43,110 --> 00:17:48,750
plugins so it's a very flexible system

00:17:45,840 --> 00:17:51,630
which just provides something for

00:17:48,750 --> 00:17:55,080
pipelining of builds in a sandbox

00:17:51,630 --> 00:17:58,680
environment right a pipeline is what we

00:17:55,080 --> 00:18:01,080
call a loaded collection of elements so

00:17:58,680 --> 00:18:02,910
this is maybe one example of what a

00:18:01,080 --> 00:18:10,950
pipeline might look like if you were to

00:18:02,910 --> 00:18:16,980
visualize it import based system build a

00:18:10,950 --> 00:18:19,500
lot of stuff compose it into one file

00:18:16,980 --> 00:18:21,570
system and generate an image with it

00:18:19,500 --> 00:18:23,880
right so those are all different kind of

00:18:21,570 --> 00:18:27,780
plugins that we have have an import

00:18:23,880 --> 00:18:31,230
element that's gonna like just take an

00:18:27,780 --> 00:18:35,270
import of some data and at the base of

00:18:31,230 --> 00:18:35,270
every pipeline there's always an import

00:18:36,860 --> 00:18:45,960
build gnome and so here for example we

00:18:42,570 --> 00:18:47,760
have basically the same kind of gnomish

00:18:45,960 --> 00:18:54,990
example here where we're gonna build

00:18:47,760 --> 00:18:59,190
like epiphany or create a flat-pack yeah

00:18:54,990 --> 00:19:00,900
so this is a integrate for the SDK and

00:18:59,190 --> 00:19:03,750
integrate for the platform so this is

00:19:00,900 --> 00:19:06,900
this is basically how we create the

00:19:03,750 --> 00:19:10,910
gnome SDK but like in in a very

00:19:06,900 --> 00:19:10,910
condensed summary

00:19:12,009 --> 00:19:19,849
take a look at how the yamo files work

00:19:16,749 --> 00:19:25,969
so here is basically what an import

00:19:19,849 --> 00:19:27,710
looks like seems the resolution is not

00:19:25,969 --> 00:19:30,649
very big I'm not sure if anybody can

00:19:27,710 --> 00:19:32,899
read this but basically you have an

00:19:30,649 --> 00:19:35,960
import you say this is an import element

00:19:32,899 --> 00:19:37,669
by specifying the kind and then you say

00:19:35,960 --> 00:19:39,349
this is the source right so you have

00:19:37,669 --> 00:19:42,289
element plugins and you have source

00:19:39,349 --> 00:19:43,759
plugins and sources are just basically

00:19:42,289 --> 00:19:47,830
things which can interact with different

00:19:43,759 --> 00:19:51,049
revision control systems and tar and

00:19:47,830 --> 00:20:02,119
anything to get data in a reliable

00:19:51,049 --> 00:20:05,719
hashable way basically so then we have

00:20:02,119 --> 00:20:08,629
this so since we imported Debian from a

00:20:05,719 --> 00:20:10,759
deep from like um what is it Multi multi

00:20:08,629 --> 00:20:14,539
strapped right so multi-strap creates

00:20:10,759 --> 00:20:17,679
this thing that you can create a Debian

00:20:14,539 --> 00:20:21,559
image of like multiple architectures

00:20:17,679 --> 00:20:23,929
right but since we do it on an

00:20:21,559 --> 00:20:26,389
architecture that we don't know we like

00:20:23,929 --> 00:20:28,489
that d bootstrap process we do it on an

00:20:26,389 --> 00:20:30,950
architecture that doesn't support

00:20:28,489 --> 00:20:33,619
running the binaries of all the

00:20:30,950 --> 00:20:35,719
different arches that we do we postpone

00:20:33,619 --> 00:20:40,249
that step until the sandbox and we just

00:20:35,719 --> 00:20:43,279
run D package configure - a right so

00:20:40,249 --> 00:20:46,759
this this guy just basically takes the

00:20:43,279 --> 00:20:49,609
output of the previous element and says

00:20:46,759 --> 00:20:52,269
okay well my install route is slash and

00:20:49,609 --> 00:20:55,249
I'm a script and I'm just gonna run this

00:20:52,269 --> 00:20:58,879
transform my filesystem and the output

00:20:55,249 --> 00:21:03,099
is gonna be the slash and basically just

00:20:58,879 --> 00:21:06,559
runs deep package configure everything

00:21:03,099 --> 00:21:08,179
some things fail but mostly everything

00:21:06,559 --> 00:21:11,109
comes together and it works and we're

00:21:08,179 --> 00:21:11,109
happy yeah

00:21:13,360 --> 00:21:19,570
of course if you were working as we had

00:21:17,140 --> 00:21:21,220
been a year ago if you're working with

00:21:19,570 --> 00:21:23,500
this D package configure thing you

00:21:21,220 --> 00:21:25,270
wouldn't do it that often and usually it

00:21:23,500 --> 00:21:27,040
would be in a cache server and you would

00:21:25,270 --> 00:21:31,300
have downloaded the already configured

00:21:27,040 --> 00:21:33,240
for your architecture artifacts right so

00:21:31,300 --> 00:21:40,270
this is basically just the build right

00:21:33,240 --> 00:21:44,400
this yeah so here we say I depend on the

00:21:40,270 --> 00:21:50,520
configured D package configure thing and

00:21:44,400 --> 00:21:55,380
my sources are Glade get from gnome

00:21:50,520 --> 00:21:58,000
track the master branch basically

00:21:55,380 --> 00:22:00,250
normally you would have the ref in there

00:21:58,000 --> 00:22:01,390
and that would be the get saw of exactly

00:22:00,250 --> 00:22:05,620
which saw that you're building

00:22:01,390 --> 00:22:10,270
but for brevity I kind of like snip some

00:22:05,620 --> 00:22:12,730
things out and here we have some public

00:22:10,270 --> 00:22:14,800
data which says the public data of an

00:22:12,730 --> 00:22:17,380
element can be read by its reversed

00:22:14,800 --> 00:22:20,470
dependencies so this is just saying like

00:22:17,380 --> 00:22:26,650
ok I'm giving you some data and then the

00:22:20,470 --> 00:22:33,750
later element can read it and the last

00:22:26,650 --> 00:22:36,610
element here is the D package deploy and

00:22:33,750 --> 00:22:40,960
we've done this also with rpm in other

00:22:36,610 --> 00:22:43,090
projects I don't have a demo right now

00:22:40,960 --> 00:22:45,930
colleague of mine is having a demo is

00:22:43,090 --> 00:22:51,610
creating a demo of building Mozilla

00:22:45,930 --> 00:22:54,120
Firefox browser on to for a snap and for

00:22:51,610 --> 00:22:58,960
a flat pack I I don't right now have a

00:22:54,120 --> 00:23:02,590
project which does multiple outputs this

00:22:58,960 --> 00:23:05,950
one this one basically just says my

00:23:02,590 --> 00:23:08,740
input is Glade and this D package deploy

00:23:05,950 --> 00:23:12,700
element that's a plug-in that exists in

00:23:08,740 --> 00:23:14,740
VST external repository it just reads

00:23:12,700 --> 00:23:17,860
the public data of what it's packaging

00:23:14,740 --> 00:23:19,780
right so there's not much configuration

00:23:17,860 --> 00:23:22,960
about how to build the package here

00:23:19,780 --> 00:23:27,570
because it's all already specified in

00:23:22,960 --> 00:23:27,570
the package where we declared the build

00:23:28,470 --> 00:23:31,860
all right

00:23:38,690 --> 00:23:41,690
so

00:23:43,940 --> 00:23:51,349
it's a lot of material I think for a

00:23:48,079 --> 00:23:56,349
short time the status of the build we

00:23:51,349 --> 00:23:58,729
have stable releases since two years now

00:23:56,349 --> 00:24:01,639
we're not making any more stable

00:23:58,729 --> 00:24:05,209
releases because we're working on bills

00:24:01,639 --> 00:24:07,999
dream too and that's a whole other deal

00:24:05,209 --> 00:24:10,909
so we have a stable release 1.2 and

00:24:07,999 --> 00:24:14,479
we're adding bug fixes to it right now

00:24:10,909 --> 00:24:18,379
only it's used by the gnome release team

00:24:14,479 --> 00:24:23,209
to to test and smoke test the build

00:24:18,379 --> 00:24:25,190
process of all of the all of the modules

00:24:23,209 --> 00:24:28,849
see that they build together before

00:24:25,190 --> 00:24:32,959
every release it's used to build the

00:24:28,849 --> 00:24:36,440
SDKs of flat pack so the gnome release

00:24:32,959 --> 00:24:38,779
team is able to maintain the same build

00:24:36,440 --> 00:24:44,109
instructions for their gnome release and

00:24:38,779 --> 00:24:48,219
for the SDKs for the gnome flat pack SDK

00:24:44,109 --> 00:24:51,679
parentheses a flat pack SDK is like a

00:24:48,219 --> 00:24:54,979
firmware but without any systems and

00:24:51,679 --> 00:24:58,999
without a kernel that you use within a

00:24:54,979 --> 00:25:01,099
system called flat pack but I mean snap

00:24:58,999 --> 00:25:03,109
has something similar and that's

00:25:01,099 --> 00:25:08,089
basically a base that you can run things

00:25:03,109 --> 00:25:11,319
on and we use it there we use it for the

00:25:08,089 --> 00:25:14,529
base for your desktop SDK as well and

00:25:11,319 --> 00:25:19,159
right now I'm working on getting the

00:25:14,529 --> 00:25:22,849
gnome nightly images so you should be

00:25:19,159 --> 00:25:24,949
able to have like an image of the latest

00:25:22,849 --> 00:25:27,589
gnome and boot the latest genome at any

00:25:24,949 --> 00:25:29,779
time and we should be doing Knightley's

00:25:27,589 --> 00:25:31,159
of these with build stream and should be

00:25:29,779 --> 00:25:38,890
done in about a month

00:25:31,159 --> 00:25:40,130
I guess so we're working on 2.0 and

00:25:38,890 --> 00:25:42,289
[Music]

00:25:40,130 --> 00:25:45,350
since we've been doing a lot of work

00:25:42,289 --> 00:25:49,070
with Bloomberg and they care a lot about

00:25:45,350 --> 00:25:51,650
scale we're working on scale and

00:25:49,070 --> 00:25:54,830
optimization so I think the project is

00:25:51,650 --> 00:25:58,309
pretty fine you can work on like a a big

00:25:54,830 --> 00:26:00,710
project which is about 500 or 1,000

00:25:58,309 --> 00:26:03,320
different things you know that you want

00:26:00,710 --> 00:26:07,400
to build but like they're not happy if

00:26:03,320 --> 00:26:09,679
you don't if you cannot build 50,000 you

00:26:07,400 --> 00:26:13,280
know we want to load a pipeline and

00:26:09,679 --> 00:26:15,650
parse 50,000 yamo files and we wanted to

00:26:13,280 --> 00:26:18,610
be snappy right and they're doing really

00:26:15,650 --> 00:26:23,480
interesting stuff we're working together

00:26:18,610 --> 00:26:27,500
okay so also we're doing windows on OS X

00:26:23,480 --> 00:26:29,240
ports basically I don't think that we're

00:26:27,500 --> 00:26:31,250
gonna have native builds in Windows

00:26:29,240 --> 00:26:34,220
anytime soon but we're gonna have the

00:26:31,250 --> 00:26:40,340
client working on Windows and we already

00:26:34,220 --> 00:26:42,320
have WSL tested right distributed

00:26:40,340 --> 00:26:44,780
building so that's should have been

00:26:42,320 --> 00:26:48,830
before we're working with the basil and

00:26:44,780 --> 00:26:52,309
build barn people we met up in London

00:26:48,830 --> 00:26:54,440
this year and we're working on using the

00:26:52,309 --> 00:26:59,090
same distributed build network does

00:26:54,440 --> 00:27:02,390
anybody know what basil is no blaze it's

00:26:59,090 --> 00:27:06,230
the Google build system and anyway it's

00:27:02,390 --> 00:27:08,299
it's it's a concept to speed up builds

00:27:06,230 --> 00:27:10,090
because they have huge amounts of

00:27:08,299 --> 00:27:14,210
software to build in a short time and

00:27:10,090 --> 00:27:16,100
they have very granular units it means

00:27:14,210 --> 00:27:18,429
you have to rewrite your whole build

00:27:16,100 --> 00:27:21,200
system for your software to use basil

00:27:18,429 --> 00:27:24,500
but if you do and you have a huge

00:27:21,200 --> 00:27:26,750
monolithic repository or a lot of gits

00:27:24,500 --> 00:27:30,440
that come together aggregated into one

00:27:26,750 --> 00:27:32,210
directory it can be very interesting if

00:27:30,440 --> 00:27:36,830
you're willing to spend the effort right

00:27:32,210 --> 00:27:42,080
so we're working on integrating entire

00:27:36,830 --> 00:27:44,030
system builds with Google's basil to

00:27:42,080 --> 00:27:46,280
work on the same build Network so that

00:27:44,030 --> 00:27:50,709
we can use the same caching resources

00:27:46,280 --> 00:27:54,649
and optimize full system huge builds

00:27:50,709 --> 00:28:00,739
with them and it's a lot of fun I think

00:27:54,649 --> 00:28:02,379
it's a lot of fun if you haven't fell

00:28:00,739 --> 00:28:06,139
asleep yet

00:28:02,379 --> 00:28:09,949
then you can join us on IRC on the

00:28:06,139 --> 00:28:16,729
mailing list we have about 3 1/2 vests a

00:28:09,949 --> 00:28:22,070
year and that's our last hack vests that

00:28:16,729 --> 00:28:24,559
we cannot see very well in London but as

00:28:22,070 --> 00:28:26,179
you can see you can't really see anybody

00:28:24,559 --> 00:28:29,149
who's there but you can see that there's

00:28:26,179 --> 00:28:31,869
a lot of people there you know and and

00:28:29,149 --> 00:28:31,869
you should join us

00:28:32,019 --> 00:28:46,849
yeah so any questions anybody want to

00:28:38,389 --> 00:28:49,639
know about build systems yes

00:28:46,849 --> 00:28:52,219
so the question is is why is it

00:28:49,639 --> 00:28:56,209
important to have building can be

00:28:52,219 --> 00:28:59,499
produce why is it important to have a

00:28:56,209 --> 00:28:59,499
build you can reproduce

00:29:01,719 --> 00:29:10,249
ok bit for a bit yes one of the main

00:29:07,789 --> 00:29:13,099
reasons bit for bit reproducibility is

00:29:10,249 --> 00:29:17,509
important is for validation because we

00:29:13,099 --> 00:29:20,899
don't know we don't if we don't know

00:29:17,509 --> 00:29:22,609
exactly what went into the output right

00:29:20,899 --> 00:29:25,489
and we know then we don't know how we

00:29:22,609 --> 00:29:28,429
made the output right and once we

00:29:25,489 --> 00:29:31,789
validated something like it can take

00:29:28,429 --> 00:29:33,799
like five years for a car company to be

00:29:31,789 --> 00:29:36,109
really happy with their base system

00:29:33,799 --> 00:29:37,699
libraries and if you say that we have to

00:29:36,109 --> 00:29:39,440
rebuild it again but it's going to be

00:29:37,699 --> 00:29:44,989
different but I only change one line of

00:29:39,440 --> 00:29:48,769
code yeah good good luck good luck

00:29:44,989 --> 00:29:51,019
getting them to to make that bug fix

00:29:48,769 --> 00:29:52,459
right because we trust this binary

00:29:51,019 --> 00:29:55,779
worked for five years

00:29:52,459 --> 00:29:58,479
right why change it

00:29:55,779 --> 00:30:04,059
so it's it's obviously more important

00:29:58,479 --> 00:30:09,059
for security and telcos or communication

00:30:04,059 --> 00:30:09,059
systems of course safety critical yeah

00:30:15,179 --> 00:30:22,090
how hard is it to say support for new

00:30:18,820 --> 00:30:27,340
languages in build stream I mean like I

00:30:22,090 --> 00:30:33,960
don't know no js' or other ecosystems

00:30:27,340 --> 00:30:38,169
with lots of packet isn't it's very easy

00:30:33,960 --> 00:30:40,210
basically well it's very easy for us in

00:30:38,169 --> 00:30:43,210
the build stream sense we really only

00:30:40,210 --> 00:30:46,269
have some llamo defaults of what to do

00:30:43,210 --> 00:30:48,999
right so the the more difficult part is

00:30:46,269 --> 00:30:51,669
providing a base runtime which has the

00:30:48,999 --> 00:30:53,739
tooling that you need right so it's just

00:30:51,669 --> 00:30:55,479
a question of setting up a project that

00:30:53,739 --> 00:30:59,349
has the tooling that you need to execute

00:30:55,479 --> 00:31:01,690
and writing up a default yamo plugin

00:30:59,349 --> 00:31:05,379
that says well this is the default stuff

00:31:01,690 --> 00:31:12,999
and you can override you know configure

00:31:05,379 --> 00:31:16,089
options with such and such things that

00:31:12,999 --> 00:31:18,510
answers the question and so everyone

00:31:16,089 --> 00:31:24,190
applause please

00:31:18,510 --> 00:31:24,190

YouTube URL: https://www.youtube.com/watch?v=ImskNYvP6jQ


