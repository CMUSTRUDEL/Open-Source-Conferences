Title: VLC 4 0 by François Cartegnie
Publication date: 2019-03-29
Playlist: FOSSASIA Summit 2019 - Kernel & Platform
Description: 
	15 March 2019 12:10, Theatre Lounge

After 3.0 release, an overview of current achievements and ongoing work at VideoLAN on the most popular multimedia player.
Captions: 
	00:00:02,120 --> 00:00:12,809
okay so I mean hello sorry

00:00:08,970 --> 00:00:17,960
my name is socket Aneesh I am one of the

00:00:12,809 --> 00:00:22,199
VLC developers for a long time now

00:00:17,960 --> 00:00:25,320
mostly working on the Mac sauce which

00:00:22,199 --> 00:00:29,789
means we mutually care about taking all

00:00:25,320 --> 00:00:32,910
the broken formats we see and make them

00:00:29,789 --> 00:00:37,320
available to the cause to be able to

00:00:32,910 --> 00:00:41,010
play back also working on decoders did a

00:00:37,320 --> 00:00:48,230
lot of work on adaptive streaming and

00:00:41,010 --> 00:00:52,309
also on subtitle stack i'm vidalin is

00:00:48,230 --> 00:00:55,710
managed by a video showing their series

00:00:52,309 --> 00:00:59,899
is managed by the video on which is a

00:00:55,710 --> 00:01:05,519
french nonprofit organization we are 40

00:00:59,899 --> 00:01:10,229
bit more 40 members we survive with

00:01:05,519 --> 00:01:14,100
donation which we use for servers to

00:01:10,229 --> 00:01:16,920
build your villages to travel to be here

00:01:14,100 --> 00:01:20,189
for example and we also have our own

00:01:16,920 --> 00:01:23,850
conference on September which is if you

00:01:20,189 --> 00:01:25,860
don't live days which is usually held in

00:01:23,850 --> 00:01:32,909
Paris

00:01:25,860 --> 00:01:35,970
this was last year so we we had many

00:01:32,909 --> 00:01:40,380
many projects we are see just one

00:01:35,970 --> 00:01:45,720
project but we have a lot of trimming

00:01:40,380 --> 00:01:51,659
tools we have codecs for encoding your

00:01:45,720 --> 00:01:56,610
movies like the well-known x264 x265 we

00:01:51,659 --> 00:02:00,840
also have no everyone decoders we also

00:01:56,610 --> 00:02:06,200
have a special library for your DVDs or

00:02:00,840 --> 00:02:09,929
your blu-ray and now we will talk about

00:02:06,200 --> 00:02:13,020
a bit about the videos that you might

00:02:09,929 --> 00:02:13,530
have on desktop so that was all first

00:02:13,020 --> 00:02:16,500
you

00:02:13,530 --> 00:02:20,610
if I do this where we did on a board

00:02:16,500 --> 00:02:26,970
hardware decoding by default we bought

00:02:20,610 --> 00:02:30,870
some v60 video video do support and new

00:02:26,970 --> 00:02:32,640
adaptive stack which I worked alone on

00:02:30,870 --> 00:02:36,420
it with a chalice

00:02:32,640 --> 00:02:41,370
- smooth streaming we enabled HDMI

00:02:36,420 --> 00:02:46,230
pass-through someone did the new HTTP

00:02:41,370 --> 00:02:48,720
you stack with somewhere on there and we

00:02:46,230 --> 00:02:52,130
also offered the chromecast support

00:02:48,720 --> 00:02:57,540
which was a long-awaited feature and

00:02:52,130 --> 00:03:03,420
which introduced us a lot of delay for

00:02:57,540 --> 00:03:06,830
that release so numbers are we serve 1

00:03:03,420 --> 00:03:13,950
million don't know today on all servers

00:03:06,830 --> 00:03:18,239
on more for the latest release we have

00:03:13,950 --> 00:03:23,820
more than 200 millions denotes including

00:03:18,239 --> 00:03:29,030
the dates and this year we passed the

00:03:23,820 --> 00:03:35,340
free billion do not counter in Las Vegas

00:03:29,030 --> 00:03:40,019
that was a really popular agent so as I

00:03:35,340 --> 00:03:42,859
said we did aníbal Harvard decoding by

00:03:40,019 --> 00:03:49,739
default that was a big change between

00:03:42,859 --> 00:03:55,320
verses 2 and ESV free so it was by

00:03:49,739 --> 00:03:58,670
default but the point was hardware

00:03:55,320 --> 00:04:09,140
decoding is fast you can do a cake at

00:03:58,670 --> 00:04:13,709
60fps this is really doable on a really

00:04:09,140 --> 00:04:21,289
low power CPU as long as you had were

00:04:13,709 --> 00:04:25,800
provided so it's quite a huge benefit on

00:04:21,289 --> 00:04:31,000
video pipeline side we have

00:04:25,800 --> 00:04:35,380
so when you decode you can do a lot of

00:04:31,000 --> 00:04:39,009
things like after decoding like scaling

00:04:35,380 --> 00:04:41,259
applying video effect rendering

00:04:39,009 --> 00:04:45,340
subtitles for example doing tone mapping

00:04:41,259 --> 00:04:48,780
if you are if you have HD videos and do

00:04:45,340 --> 00:04:55,080
rendering on the CPU like it was done on

00:04:48,780 --> 00:04:59,350
the VLC - all you can do it on the GPU

00:04:55,080 --> 00:05:01,840
so you can do everything on the GPU or

00:04:59,350 --> 00:05:04,600
in the CPU but when you want to switch

00:05:01,840 --> 00:05:09,610
from one side to the other side it has a

00:05:04,600 --> 00:05:14,070
huge cost and currently with VLC we are

00:05:09,610 --> 00:05:18,940
doing decoding on hardware some scaling

00:05:14,070 --> 00:05:25,360
some tone mapping and rendering but not

00:05:18,940 --> 00:05:31,090
all the effect we had before or the text

00:05:25,360 --> 00:05:33,449
rendering so another benefit of using

00:05:31,090 --> 00:05:39,760
Hara decoding is this is very efficient

00:05:33,449 --> 00:05:44,470
you you can save a lot of power for

00:05:39,760 --> 00:05:50,139
example this is the decoding of 4k video

00:05:44,470 --> 00:05:53,860
HDR video on Windows platform and

00:05:50,139 --> 00:05:56,740
everything mostly is done or GPU so as

00:05:53,860 --> 00:06:01,080
you can see we only use a 7% CPU where

00:05:56,740 --> 00:06:04,990
we were mostly using all your CPU before

00:06:01,080 --> 00:06:07,300
and compared to some other players on

00:06:04,990 --> 00:06:14,310
that platform we are even more efficient

00:06:07,300 --> 00:06:22,300
than them so the current trend is

00:06:14,310 --> 00:06:26,409
towards 4k but it creates a were set of

00:06:22,300 --> 00:06:29,349
new programs because when you're going

00:06:26,409 --> 00:06:34,840
from a HD resolution from a full HD

00:06:29,349 --> 00:06:38,860
resolution to 4k everything is far more

00:06:34,840 --> 00:06:41,260
complex like for subtitle blending

00:06:38,860 --> 00:06:50,770
if you want to whisk out the picture -

00:06:41,260 --> 00:06:56,200
okay it's gone it's saying okay I don't

00:06:50,770 --> 00:06:59,320
know if you want to render subtitles

00:06:56,200 --> 00:07:03,730
over 4k videos when you have to manage

00:06:59,320 --> 00:07:08,410
to draw a bigger amount of pixels which

00:07:03,730 --> 00:07:13,140
is very strong so you can do sim D which

00:07:08,410 --> 00:07:16,930
is a parallel paralyzation in assembly

00:07:13,140 --> 00:07:19,600
it helps but it's not enough this is

00:07:16,930 --> 00:07:22,690
still slow so we need to move other side

00:07:19,600 --> 00:07:24,970
before we are doing some steps on the

00:07:22,690 --> 00:07:28,540
GPU but not everything so we need to

00:07:24,970 --> 00:07:32,290
move all those steps in shaders and GL

00:07:28,540 --> 00:07:35,860
buffers which means on the GPU so

00:07:32,290 --> 00:07:43,240
acceleration is fast it says a lot of

00:07:35,860 --> 00:07:48,430
power this is required okay

00:07:43,240 --> 00:07:53,470
again this is required for all the new

00:07:48,430 --> 00:07:58,740
video resolutions but when we did a

00:07:53,470 --> 00:08:04,240
neighbor 3d acceleration we had some

00:07:58,740 --> 00:08:06,520
strange feedback from the community it

00:08:04,240 --> 00:08:13,360
was not really expected because we had a

00:08:06,520 --> 00:08:17,920
lot of tests but we also received some

00:08:13,360 --> 00:08:23,380
hate mail a lot of hate mail as you can

00:08:17,920 --> 00:08:26,500
see people were not really happy

00:08:23,380 --> 00:08:30,460
well some people and we try to

00:08:26,500 --> 00:08:35,080
understand why so it was people are not

00:08:30,460 --> 00:08:42,070
totally wrong because we up some

00:08:35,080 --> 00:08:45,730
things so the most common drugs is

00:08:42,070 --> 00:08:48,430
people had bad black screen green screen

00:08:45,730 --> 00:08:51,610
whatever screen you want you have pixel

00:08:48,430 --> 00:08:55,840
big pixel pink usually because this is

00:08:51,610 --> 00:08:59,130
because of the yov things on some

00:08:55,840 --> 00:09:04,030
devices like a pole devices you had a

00:08:59,130 --> 00:09:07,450
reboot feature with some videos not sure

00:09:04,030 --> 00:09:11,140
if this is fixed yet most of this is

00:09:07,450 --> 00:09:14,740
just because of drivers most drivers are

00:09:11,140 --> 00:09:17,200
not complete or exposing totally broken

00:09:14,740 --> 00:09:20,110
feature like this say we can do 10 bit

00:09:17,200 --> 00:09:23,560
and the cult so when you've heard them

00:09:20,110 --> 00:09:26,920
10 bit videos everything is wrong and

00:09:23,560 --> 00:09:30,520
there is no way to tell so the only way

00:09:26,920 --> 00:09:34,930
is to indentify for drivers and blacks

00:09:30,520 --> 00:09:37,240
is fine but this is mostly the reason we

00:09:34,930 --> 00:09:41,790
didn't solve it earlier you need a lot

00:09:37,240 --> 00:09:44,740
of devices driver versions platforms and

00:09:41,790 --> 00:09:48,130
even more devices if you consider the

00:09:44,740 --> 00:09:52,090
Android devices Apple devices so it

00:09:48,130 --> 00:09:56,530
needs some more thermal testing than

00:09:52,090 --> 00:10:02,350
just releasing a new version on purely

00:09:56,530 --> 00:10:09,580
software coding so you need a lot of

00:10:02,350 --> 00:10:12,340
hard work right now so this is really

00:10:09,580 --> 00:10:15,100
confusing for the user because you can't

00:10:12,340 --> 00:10:19,930
understand that it doesn't work because

00:10:15,100 --> 00:10:23,430
of the hardware we can tell so if they

00:10:19,930 --> 00:10:34,180
don't ask us we can't we can't really

00:10:23,430 --> 00:10:37,120
feel a problem so how do I also have

00:10:34,180 --> 00:10:41,380
some limits you have some profile for

00:10:37,120 --> 00:10:44,650
decoding videos which means your

00:10:41,380 --> 00:10:48,670
hardware we only decode up to 30 frames

00:10:44,650 --> 00:10:51,730
per second or 60 frames per second which

00:10:48,670 --> 00:10:57,790
also means you have maximum decoding

00:10:51,730 --> 00:11:01,300
speed which mostly is really key to the

00:10:57,790 --> 00:11:05,420
frame rate people can't really

00:11:01,300 --> 00:11:07,649
understand that when we were doing some

00:11:05,420 --> 00:11:10,519
no no we've timed playback on the

00:11:07,649 --> 00:11:15,120
previous video like some people like to

00:11:10,519 --> 00:11:18,509
accelerate videos to play it faster when

00:11:15,120 --> 00:11:21,000
they are taking the train because they

00:11:18,509 --> 00:11:24,990
had some deadlines on time

00:11:21,000 --> 00:11:28,170
it no longer works on hardware because

00:11:24,990 --> 00:11:30,930
you're going sometimes over the hardware

00:11:28,170 --> 00:11:33,180
limit which you could do in software

00:11:30,930 --> 00:11:35,550
because software doesn't have really a

00:11:33,180 --> 00:11:39,089
limit except your CPU limit and you can

00:11:35,550 --> 00:11:44,040
you have the feedback which in that case

00:11:39,089 --> 00:11:47,579
and also if you want to include in

00:11:44,040 --> 00:11:50,399
hardware you have also some limits you

00:11:47,579 --> 00:11:54,329
can't you know very some simplification

00:11:50,399 --> 00:11:58,939
into the silicon to encode your videos

00:11:54,329 --> 00:12:01,980
which gives sometimes lower quality and

00:11:58,939 --> 00:12:14,160
less options so such most before

00:12:01,980 --> 00:12:22,559
transcoding ok come back and for more

00:12:14,160 --> 00:12:26,970
portion of you ok not sure what is

00:12:22,559 --> 00:12:32,129
program is from our developer point of

00:12:26,970 --> 00:12:35,730
view we want to - because VLC is mostly

00:12:32,129 --> 00:12:39,059
modules and arranged it in a stream so

00:12:35,730 --> 00:12:43,110
we want decoders we want to target

00:12:39,059 --> 00:12:46,559
however decoders but most of platform

00:12:43,110 --> 00:12:49,470
are providing directly SDK so we want us

00:12:46,559 --> 00:12:51,660
to program video and do everything and

00:12:49,470 --> 00:12:53,610
this is against the philosophy of fear

00:12:51,660 --> 00:12:56,309
see where we want to text video and

00:12:53,610 --> 00:13:01,519
transform it and probably which we made

00:12:56,309 --> 00:13:01,519
or do other things so

00:13:02,910 --> 00:13:10,800
we we usually don't have access to a

00:13:08,009 --> 00:13:13,860
real and complete API to drive the

00:13:10,800 --> 00:13:17,490
hardware in special especially 40

00:13:13,860 --> 00:13:24,259
hardware and with the same API for

00:13:17,490 --> 00:13:26,940
example on Android with the SDK we have

00:13:24,259 --> 00:13:29,519
the same API but you have totally

00:13:26,940 --> 00:13:31,529
different behavior depending on the

00:13:29,519 --> 00:13:36,290
chipset and you have totally different

00:13:31,529 --> 00:13:39,089
bug and this is really hard to identify

00:13:36,290 --> 00:13:43,350
because they don't really provide the

00:13:39,089 --> 00:13:46,019
suppression of the hardware and you have

00:13:43,350 --> 00:13:50,100
also have some rendering interaction but

00:13:46,019 --> 00:13:53,910
depending if you have OpenGL video or if

00:13:50,100 --> 00:13:59,389
you own window platform of E or if you

00:13:53,910 --> 00:14:04,529
have HDR screen or not an HD capable

00:13:59,389 --> 00:14:07,920
hardware or it is really really

00:14:04,529 --> 00:14:11,430
difficult and some decoders are really

00:14:07,920 --> 00:14:13,740
bad designed like iOS if you are not

00:14:11,430 --> 00:14:16,589
using their own SDK you have to do

00:14:13,740 --> 00:14:21,689
everything by hand like reordering

00:14:16,589 --> 00:14:27,240
frames in most codecs today's frames are

00:14:21,689 --> 00:14:29,819
not in the the output order of the

00:14:27,240 --> 00:14:34,230
frames in not is not in the display

00:14:29,819 --> 00:14:37,620
order and there is some we are doing to

00:14:34,230 --> 00:14:40,050
be done and most of the coder in the

00:14:37,620 --> 00:14:42,769
world are doing it except with Apple

00:14:40,050 --> 00:14:46,579
software whether you you have to do it

00:14:42,769 --> 00:14:51,269
the hand and there's some other tricky

00:14:46,579 --> 00:14:53,339
tricky things in the API which also

00:14:51,269 --> 00:14:57,029
crash like they don't really support

00:14:53,339 --> 00:15:00,569
interlaced videos and interest is still

00:14:57,029 --> 00:15:04,589
around in the board cat for in the

00:15:00,569 --> 00:15:08,519
broadcast world so all those issues are

00:15:04,589 --> 00:15:11,490
incremental fixed in a 3.0 vascular

00:15:08,519 --> 00:15:16,470
issues but it gets better

00:15:11,490 --> 00:15:20,040
so hello is fast its Explorer this is

00:15:16,470 --> 00:15:25,709
man literally and moving if needed if

00:15:20,040 --> 00:15:30,480
you probably is better but there's lots

00:15:25,709 --> 00:15:33,389
of limitations right now it also creates

00:15:30,480 --> 00:15:37,319
a lot of fragmentation as I said we need

00:15:33,389 --> 00:15:39,600
a lot of new devices to test a lot of

00:15:37,319 --> 00:15:42,110
hardware we need to test a lot of

00:15:39,600 --> 00:15:48,209
different best version and drivers

00:15:42,110 --> 00:15:53,929
before we blacklisted them we also need

00:15:48,209 --> 00:15:58,259
to support some native UI on new devices

00:15:53,929 --> 00:16:05,429
this is mostly for Intuit platforms and

00:15:58,259 --> 00:16:08,490
Apple platform yeah which means we have

00:16:05,429 --> 00:16:10,920
a lot of issue to deal with because of

00:16:08,490 --> 00:16:14,759
the increasing number of platforms and

00:16:10,920 --> 00:16:19,639
we need more people to deal with those

00:16:14,759 --> 00:16:26,970
issues so what you're expecting today is

00:16:19,639 --> 00:16:30,240
talk about 4.0 so 4.0 is we be named a

00:16:26,970 --> 00:16:36,360
AutoCheck which is tea from this world

00:16:30,240 --> 00:16:42,209
we have 4k whom it's a bit more maybe 6

00:16:36,360 --> 00:16:48,839
K now we did a lot of architecture

00:16:42,209 --> 00:16:52,009
changes because we really need it we are

00:16:48,839 --> 00:16:57,149
still in everything from the impact

00:16:52,009 --> 00:17:01,769
impact to times some concept we we broke

00:16:57,149 --> 00:17:07,500
from that time and we'll status when

00:17:01,769 --> 00:17:11,100
it's done as usual so we did a huge

00:17:07,500 --> 00:17:13,500
welcome to Z of the internal playlist to

00:17:11,100 --> 00:17:16,640
be seen clear to be to be able to

00:17:13,500 --> 00:17:19,279
delegate most of the feature to the UI

00:17:16,640 --> 00:17:22,060
we did also we work the input manager

00:17:19,279 --> 00:17:25,210
that's what old and

00:17:22,060 --> 00:17:29,380
resources we did some unified

00:17:25,210 --> 00:17:30,490
architecture for our platforms we are

00:17:29,380 --> 00:17:34,180
working towards

00:17:30,490 --> 00:17:39,640
gapless audio playback which everyone

00:17:34,180 --> 00:17:43,180
wants but with mainly our video player

00:17:39,640 --> 00:17:46,390
so music player and video player worlds

00:17:43,180 --> 00:17:51,010
are a bit different of that's quite a

00:17:46,390 --> 00:17:56,460
difficult task or so and we also will be

00:17:51,010 --> 00:17:59,800
providing a real media library like you

00:17:56,460 --> 00:18:05,760
know if you want to save your your

00:17:59,800 --> 00:18:10,330
playlist or import some foreign latest

00:18:05,760 --> 00:18:16,180
on UPnP or everything it would be far

00:18:10,330 --> 00:18:22,990
easier and we also have Reeboks o'clock

00:18:16,180 --> 00:18:28,780
which is the core of year c which gives

00:18:22,990 --> 00:18:32,410
x everywhere to be accurate in your your

00:18:28,780 --> 00:18:37,450
playback so before we had a PC are based

00:18:32,410 --> 00:18:43,090
mostly based on mpeg-2 asset update of

00:18:37,450 --> 00:18:49,170
the clock but we introduced a new a new

00:18:43,090 --> 00:18:52,690
clock where we have the CPU clock and

00:18:49,170 --> 00:18:56,140
one master clock which is you know based

00:18:52,690 --> 00:18:59,410
on the audio output for pacing so you we

00:18:56,140 --> 00:19:03,250
no longer experience some glitch in the

00:18:59,410 --> 00:19:04,750
audio which you could have with the

00:19:03,250 --> 00:19:10,440
current version when you start the

00:19:04,750 --> 00:19:14,260
videos but you can also pick picea or

00:19:10,440 --> 00:19:17,080
another clock and you this clock is also

00:19:14,260 --> 00:19:21,880
driving some slaves which is no video

00:19:17,080 --> 00:19:24,580
also theatres at it will also improve

00:19:21,880 --> 00:19:28,480
second ization because between those

00:19:24,580 --> 00:19:33,310
single doses subtitles or other videos

00:19:28,480 --> 00:19:34,480
or other audio streams so this is a huge

00:19:33,310 --> 00:19:38,700
benefit

00:19:34,480 --> 00:19:43,690
and on Father's do we move out beats who

00:19:38,700 --> 00:19:45,790
from auto auto to assume Nissan we will

00:19:43,690 --> 00:19:49,210
have a new video output architecture to

00:19:45,790 --> 00:19:52,570
deal with with hot rod iconic mostly

00:19:49,210 --> 00:19:55,600
because it will prevent us from allowing

00:19:52,570 --> 00:20:00,250
a lot of memory to be able to do a hot

00:19:55,600 --> 00:20:03,130
body cooling will be more efficient we

00:20:00,250 --> 00:20:08,980
will have in synchronous output mostly

00:20:03,130 --> 00:20:12,250
to be able to do get less audio we will

00:20:08,980 --> 00:20:15,610
have a new video filter API so this is

00:20:12,250 --> 00:20:17,710
mostly for developers away line video

00:20:15,610 --> 00:20:21,400
output so if you want to know a bit more

00:20:17,710 --> 00:20:25,600
but Wayland there is a talk this

00:20:21,400 --> 00:20:28,300
afternoon by Remy which did the work we

00:20:25,600 --> 00:20:31,030
might have some Vulcan video output also

00:20:28,300 --> 00:20:35,670
and on for Mac OS user we will have

00:20:31,030 --> 00:20:40,030
touch power support mostly gadget anyway

00:20:35,670 --> 00:20:43,810
and we will have interface new interface

00:20:40,030 --> 00:20:46,780
modern interface on based on quick QT

00:20:43,810 --> 00:20:50,710
quick so this is mostly for Windows and

00:20:46,780 --> 00:20:56,130
Linux users and we will have a light and

00:20:50,710 --> 00:21:01,510
dark times so how does it look like now

00:20:56,130 --> 00:21:05,980
well mostly this is like the windows RT

00:21:01,510 --> 00:21:10,570
builds you might have seen something

00:21:05,980 --> 00:21:15,010
more modern more smooth we will be able

00:21:10,570 --> 00:21:18,740
to bring some video FX this is big

00:21:15,010 --> 00:21:21,740
change and the

00:21:18,740 --> 00:21:25,220
the default term might be that by

00:21:21,740 --> 00:21:29,270
default on light we don't really know we

00:21:25,220 --> 00:21:35,590
need some feedback about this first this

00:21:29,270 --> 00:21:40,990
is a new video screen we try to have it

00:21:35,590 --> 00:21:44,870
borderless fully borderless for video

00:21:40,990 --> 00:21:47,270
and for the audio we will have the play

00:21:44,870 --> 00:21:50,540
list on the slide all the options of the

00:21:47,270 --> 00:21:53,690
three on the side which you could slide

00:21:50,540 --> 00:21:58,640
in so it looks like most of these

00:21:53,690 --> 00:22:06,549
webpages today and we will also bring

00:21:58,640 --> 00:22:11,720
some 3d support for side-by-side videos

00:22:06,549 --> 00:22:16,880
steve-o's copic and 360 which we already

00:22:11,720 --> 00:22:25,880
have a maybe MVC video which is a 3d

00:22:16,880 --> 00:22:30,140
blu-ray so we did some change we enabled

00:22:25,880 --> 00:22:35,840
the opengl by default we brought in VV

00:22:30,140 --> 00:22:40,220
3.0 360 videos we plan to bring the co

00:22:35,840 --> 00:22:46,549
3d and what's the next step well we will

00:22:40,220 --> 00:22:52,419
bring HMG support in 4.0 we already did

00:22:46,549 --> 00:23:00,020
some demos so we you will be able to use

00:22:52,419 --> 00:23:03,080
any hmd device without any specific SDK

00:23:00,020 --> 00:23:05,990
which means you will be able to watch

00:23:03,080 --> 00:23:10,640
your video with oculus right salaries

00:23:05,990 --> 00:23:14,570
Windows SMD mostly provided by open chef

00:23:10,640 --> 00:23:19,270
D or even a cardboard on Android and you

00:23:14,570 --> 00:23:23,960
will be also able to have a virtual

00:23:19,270 --> 00:23:27,020
theater to watch your videos it depends

00:23:23,960 --> 00:23:33,530
if you want to be first of all bringing

00:23:27,020 --> 00:23:36,919
everyone technology which is a new open

00:23:33,530 --> 00:23:41,480
source codec which is mostly targeting

00:23:36,919 --> 00:23:43,610
to be patent free provide more more more

00:23:41,480 --> 00:23:50,059
completion which is far more efficient

00:23:43,610 --> 00:23:53,440
when achieve ICI hardware support is

00:23:50,059 --> 00:23:59,179
coming and this is already available in

00:23:53,440 --> 00:24:05,780
VLC free since the free dot 3 dot 0.5

00:23:59,179 --> 00:24:09,370
release and video run is also working on

00:24:05,780 --> 00:24:14,770
decoder which is sponsored by what 0

00:24:09,370 --> 00:24:23,570
which is David and we placed

00:24:14,770 --> 00:24:26,600
lib am in 3.0 bench because the previous

00:24:23,570 --> 00:24:31,730
decoder was quite slow this decoder is

00:24:26,600 --> 00:24:35,840
pretty fast at least on a big to use a

00:24:31,730 --> 00:24:39,260
lot of Cindy and this is know also

00:24:35,840 --> 00:24:43,429
available in Firefox chromium ffmpeg

00:24:39,260 --> 00:24:47,000
handbrake so all is good

00:24:43,429 --> 00:24:48,919
we just need hardware support because

00:24:47,000 --> 00:24:51,050
he's still using a lot of CPU because

00:24:48,919 --> 00:24:55,100
this is really an extra gen some

00:24:51,050 --> 00:24:58,790
generation codec on the cost can come

00:24:55,100 --> 00:25:00,260
cast aside we are trying to bring a

00:24:58,790 --> 00:25:03,080
hardware accelerated

00:25:00,260 --> 00:25:07,700
encoding to be able to stream more

00:25:03,080 --> 00:25:12,640
efficiently like with ok SMT we on

00:25:07,700 --> 00:25:12,640
interpret form and also subtitle support

00:25:13,419 --> 00:25:22,100
platform we will drop Windows XP in all

00:25:18,290 --> 00:25:27,140
the odd platforms also the old Android

00:25:22,100 --> 00:25:29,090
and the old iOS to be able to be more

00:25:27,140 --> 00:25:32,780
efficient in all development mostly

00:25:29,090 --> 00:25:35,980
because a lot of old bags become really

00:25:32,780 --> 00:25:38,690
soft and which are bringing a lot of

00:25:35,980 --> 00:25:41,700
issues in the near future

00:25:38,690 --> 00:25:45,210
we are targeting our

00:25:41,700 --> 00:25:47,160
lower latency a new web interface if you

00:25:45,210 --> 00:25:50,730
are using it to bring us all support for

00:25:47,160 --> 00:25:56,040
DRMs to be able to see protected

00:25:50,730 --> 00:26:01,050
contents to be a more secure you heard

00:25:56,040 --> 00:26:03,660
about the NSA targeting uh product so we

00:26:01,050 --> 00:26:08,510
will introduce entered sandboxing worst

00:26:03,660 --> 00:26:12,450
do more fighting we have a occur one

00:26:08,510 --> 00:26:15,660
session currently running we have found

00:26:12,450 --> 00:26:20,420
a lot of bugs which will be fixed we

00:26:15,660 --> 00:26:23,730
also working on VF CGS which is mostly

00:26:20,420 --> 00:26:26,900
we're seeing webassembly it's quite

00:26:23,730 --> 00:26:31,740
fancy new boards on right now because

00:26:26,900 --> 00:26:35,000
the web plugins are dead technology so

00:26:31,740 --> 00:26:38,280
we have some demos you can test for me

00:26:35,000 --> 00:26:43,200
it works but it's still strong because

00:26:38,280 --> 00:26:49,260
this is GS okay well if you have

00:26:43,200 --> 00:26:51,930
question I would be happy to answer this

00:26:49,260 --> 00:26:56,280
pictures video when I was student and I

00:26:51,930 --> 00:26:58,710
didn't knew yet I would work on VLC so

00:26:56,280 --> 00:27:12,660
already music and making music voice

00:26:58,710 --> 00:27:15,600
calls from the audience yeah hi

00:27:12,660 --> 00:27:17,190
so in the just one or two steps before

00:27:15,600 --> 00:27:19,320
you said that basically you'd be

00:27:17,190 --> 00:27:21,060
implementing the hardening as well in

00:27:19,320 --> 00:27:23,130
the VLC so basically expecially

00:27:21,060 --> 00:27:24,780
sandboxing so will that mean that a

00:27:23,130 --> 00:27:26,580
third-party application will try to

00:27:24,780 --> 00:27:28,590
access VLC it will be run in a

00:27:26,580 --> 00:27:29,940
virtualized environment and if it is

00:27:28,590 --> 00:27:31,620
kind of hassle-free over there then it

00:27:29,940 --> 00:27:34,080
will be run on VLC something of that

00:27:31,620 --> 00:27:37,920
sort of the sandbox will be implemented

00:27:34,080 --> 00:27:39,930
or something else okay so if I in the

00:27:37,920 --> 00:27:43,890
secretary you asked me if you we will

00:27:39,930 --> 00:27:47,660
send box it into some containerization

00:27:43,890 --> 00:27:54,210
to be able to to be able to run VLC or

00:27:47,660 --> 00:27:55,680
something else VC is modular so we we

00:27:54,210 --> 00:27:58,200
want to either late

00:27:55,680 --> 00:28:02,190
each module to provide less capabilities

00:27:58,200 --> 00:28:04,700
for each module like the output just

00:28:02,190 --> 00:28:08,160
wanted to have access to the video

00:28:04,700 --> 00:28:10,290
hardware and nothing else like the

00:28:08,160 --> 00:28:12,900
decoder just want to have access to the

00:28:10,290 --> 00:28:16,020
CPU or maybe hardware decoding and

00:28:12,900 --> 00:28:19,590
nothing else and the d-max are where

00:28:16,020 --> 00:28:23,900
most of the issues are only to have

00:28:19,590 --> 00:28:27,270
access to the cpu and of course memory

00:28:23,900 --> 00:28:30,420
the big challenge in this is to share

00:28:27,270 --> 00:28:34,410
data between all those modules because

00:28:30,420 --> 00:28:38,520
usually need high bandwidth and doing

00:28:34,410 --> 00:28:42,570
this in a secure and fast way is west

00:28:38,520 --> 00:28:45,060
challenge is in fact so it won't change

00:28:42,570 --> 00:28:47,670
the way you won pearcy you will just

00:28:45,060 --> 00:28:56,820
launch it and everything will be done

00:28:47,670 --> 00:29:01,860
internally in fact thank you when will

00:28:56,820 --> 00:29:06,600
we LC 4.0 be released the point Overson

00:29:01,860 --> 00:29:11,450
be released so when the 4.0 release will

00:29:06,600 --> 00:29:16,800
be whereas when I said when it's done

00:29:11,450 --> 00:29:19,710
the 3.0 was 2 years late so maybe I can

00:29:16,800 --> 00:29:22,260
tell you that the 4.0 might be released

00:29:19,710 --> 00:29:26,280
by the end of the year really I don't

00:29:22,260 --> 00:29:31,020
know there is main challenge

00:29:26,280 --> 00:29:33,750
ramiz knows a lot of some issues are

00:29:31,020 --> 00:29:37,440
that which are not really solved in the

00:29:33,750 --> 00:29:41,570
core because we did some architectural

00:29:37,440 --> 00:29:41,570
changes we are still working

00:29:45,200 --> 00:29:51,870
maybe the end of you I don't know really

00:29:48,330 --> 00:29:54,500
I would like to just to be enthusiastic

00:29:51,870 --> 00:30:03,650
for you and tell you yeah which soon and

00:29:54,500 --> 00:30:07,190
seriously I really cannot serve so I

00:30:03,650 --> 00:30:07,190
find a question here

00:30:11,090 --> 00:30:21,600
what's it okay why it's a con yeah so

00:30:19,230 --> 00:30:24,450
there's usual questions okay

00:30:21,600 --> 00:30:32,850
people which started projects a course

00:30:24,450 --> 00:30:37,350
on trial did collect traffic cones you

00:30:32,850 --> 00:30:42,390
know students alcohol by night sometimes

00:30:37,350 --> 00:30:45,510
we do things so we had some quite

00:30:42,390 --> 00:30:48,510
collection of cones and what we study

00:30:45,510 --> 00:30:56,250
this project one of the members used

00:30:48,510 --> 00:30:59,660
this as the first symbol for the project

00:30:56,250 --> 00:31:05,000
and that's how it started and now we are

00:30:59,660 --> 00:31:11,970
using it for twenty years maybe fifteen

00:31:05,000 --> 00:31:14,190
bit more than 15 years okay final

00:31:11,970 --> 00:31:16,350
question here earlier in the

00:31:14,190 --> 00:31:18,270
presentation there was a mention of we

00:31:16,350 --> 00:31:20,760
quite a few time to be doing with

00:31:18,270 --> 00:31:22,950
inmates and so on how many people is the

00:31:20,760 --> 00:31:29,180
actively committing or working on this

00:31:22,950 --> 00:31:32,310
project the core team a 10 to 15 people

00:31:29,180 --> 00:31:36,390
because there is some side companies

00:31:32,310 --> 00:31:38,670
working and for again some employment

00:31:36,390 --> 00:31:40,670
for people to be able to work full-time

00:31:38,670 --> 00:31:42,580
of it but

00:31:40,670 --> 00:31:48,620
[Music]

00:31:42,580 --> 00:31:51,950
they will quote him maybe seven people

00:31:48,620 --> 00:31:57,320
including me which is here which are

00:31:51,950 --> 00:32:01,280
really really committing maybe daily and

00:31:57,320 --> 00:32:04,340
how many community community are

00:32:01,280 --> 00:32:10,520
happening every year we have 30 people

00:32:04,340 --> 00:32:17,450
40 people changing things not including

00:32:10,520 --> 00:32:20,230
the translators and okay so I guess then

00:32:17,450 --> 00:32:23,850
I mean you guys could be next

00:32:20,230 --> 00:32:28,119
yeah don't applause for Francois

00:32:23,850 --> 00:32:28,119

YouTube URL: https://www.youtube.com/watch?v=d6sF8CGsD4g


