Title: Introduction to Python - Rafael Lee
Publication date: 2019-12-18
Playlist: Open Tech Summit Shenzhen 2019 - Workshops
Description: 
	Rafael Lee - Robotics Engineer (China)
Captions: 
	00:00:00,000 --> 00:00:05,299
well welcome everyone to this person

00:00:02,129 --> 00:00:09,059
workshop we'll introduce some basic

00:00:05,299 --> 00:00:11,070
grammars of pison and maybe if there are

00:00:09,059 --> 00:00:13,790
more detailed discussions we can decide

00:00:11,070 --> 00:00:17,520
what are we what topics are we going

00:00:13,790 --> 00:00:22,199
further for example data analysis or

00:00:17,520 --> 00:00:30,980
image processing so let's get started

00:00:22,199 --> 00:00:38,309
with this URL basic there's a basic

00:00:30,980 --> 00:00:47,090
tutorial license what operating system

00:00:38,309 --> 00:00:57,930
are you using Windows Linux does anyone

00:00:47,090 --> 00:01:00,719
you use Nanak's okay and OSX okay the

00:00:57,930 --> 00:01:05,670
Windows users need to install Python

00:01:00,719 --> 00:01:11,820
using the batteries so it it can be

00:01:05,670 --> 00:01:14,549
downloaded on Python door org since

00:01:11,820 --> 00:01:16,380
person 2 is going to be obsolete in at

00:01:14,549 --> 00:01:20,790
the end of this year so please download

00:01:16,380 --> 00:01:27,360
Python 3 point so now the major version

00:01:20,790 --> 00:01:29,220
is three point eight for Linux users you

00:01:27,360 --> 00:01:31,350
can use Python three and peasant two

00:01:29,220 --> 00:01:35,159
directly it's already installed in the

00:01:31,350 --> 00:01:37,490
system so I did not say anything class X

00:01:35,159 --> 00:01:40,820
and Linux the other stuff they already

00:01:37,490 --> 00:01:40,820
they already

00:01:46,760 --> 00:01:50,240
[Laughter]

00:02:01,079 --> 00:02:07,810
uniqso programming language always start

00:02:04,240 --> 00:02:16,150
with zero and the last object is the

00:02:07,810 --> 00:02:21,239
lens - one is every is everyone

00:02:16,150 --> 00:02:21,239
following me okay let's go further

00:02:26,370 --> 00:02:31,860
the total here is a variable and if you

00:02:29,160 --> 00:02:35,700
type total equals to 0 that means we

00:02:31,860 --> 00:02:39,000
will create a variable in the in the

00:02:35,700 --> 00:02:46,140
scope of Python and you will very well

00:02:39,000 --> 00:02:48,269
be remembered for someone who has more

00:02:46,140 --> 00:02:53,280
experience about language I should say

00:02:48,269 --> 00:02:56,099
that so this is a assignment or in some

00:02:53,280 --> 00:03:00,900
other programming languages assignment

00:02:56,099 --> 00:03:03,120
is quite different from mining we in

00:03:00,900 --> 00:03:05,850
other languages if we've been find an

00:03:03,120 --> 00:03:08,250
object to a variable it means that the

00:03:05,850 --> 00:03:13,170
object itself is can now be modified and

00:03:08,250 --> 00:03:15,269
if we and the assignment will create a

00:03:13,170 --> 00:03:20,849
new binding in other languages for

00:03:15,269 --> 00:03:24,660
example scheme Python here is no it's

00:03:20,849 --> 00:03:29,489
not running be the virtual machine

00:03:24,660 --> 00:03:31,859
pythons are now run like that and in

00:03:29,489 --> 00:03:35,640
Python you can explicitly delete a

00:03:31,859 --> 00:03:37,829
variable using the you can try that if

00:03:35,640 --> 00:03:40,160
you want to see what wearables you have

00:03:37,829 --> 00:03:47,910
you can type dir

00:03:40,160 --> 00:03:50,120
in your pison license program that's

00:03:47,910 --> 00:03:50,120
right

00:04:46,100 --> 00:04:56,430
everyone gets the same result of 11 you

00:04:49,620 --> 00:04:59,060
have any questions yeah right totally

00:04:56,430 --> 00:04:59,060
the verbal

00:05:01,350 --> 00:05:06,170
you did not write total equal to zero

00:05:08,810 --> 00:05:30,900
here very the eye is a variable we're

00:05:19,410 --> 00:05:33,210
gonna go check out only in the space in

00:05:30,900 --> 00:05:36,020
the front of the line is critical and

00:05:33,210 --> 00:05:36,020
the others are not

00:05:37,350 --> 00:05:43,670
does everyone get the same result okay

00:05:40,710 --> 00:05:48,030
this problem is the first time I've

00:05:43,670 --> 00:05:51,000
experienced this is actually formed from

00:05:48,030 --> 00:05:53,610
the from my understanding for four

00:05:51,000 --> 00:05:56,130
different programming languages is it is

00:05:53,610 --> 00:05:58,920
really a bad design there are a lot of

00:05:56,130 --> 00:06:01,890
defects in Python design so hasn't

00:05:58,920 --> 00:06:06,020
present to some defects and present

00:06:01,890 --> 00:06:08,340
stories so part of them but still I said

00:06:06,020 --> 00:06:10,140
- in my opinion passing is not a

00:06:08,340 --> 00:06:14,820
programming language for serious

00:06:10,140 --> 00:06:16,860
development for it in my experience that

00:06:14,820 --> 00:06:24,440
youth license for quick and dirty works

00:06:16,860 --> 00:06:28,200
for example for olders text processing

00:06:24,440 --> 00:06:32,370
for serious programming I use scheme and

00:06:28,200 --> 00:06:37,080
C++ C++ has its standard and scheme has

00:06:32,370 --> 00:06:46,340
its standard to baptize and if not you

00:06:37,080 --> 00:06:46,340
can take the defect

00:06:47,880 --> 00:06:54,690
let's go further does everyone get the

00:06:52,030 --> 00:06:54,690
same result

00:07:06,349 --> 00:07:13,809
I need some explanation it it seems

00:07:09,439 --> 00:07:16,869
pretty pretty easy to understand right

00:07:13,809 --> 00:07:20,270
now let's go further let's let's go to

00:07:16,869 --> 00:07:22,580
functions function is a pretty pretty

00:07:20,270 --> 00:07:26,270
important abstraction of programming

00:07:22,580 --> 00:07:28,879
languages in capture something inside

00:07:26,270 --> 00:07:32,270
and have well have a simple input and

00:07:28,879 --> 00:07:34,849
output when I write program in assembly

00:07:32,270 --> 00:07:38,059
language I I do not have other

00:07:34,849 --> 00:07:43,909
programming experience so that program

00:07:38,059 --> 00:07:47,240
itself is kind of manipulating different

00:07:43,909 --> 00:07:49,969
registers so after that I learned the

00:07:47,240 --> 00:07:56,270
programming language of C and after that

00:07:49,969 --> 00:08:03,000
I learned the function so it it is

00:07:56,270 --> 00:08:06,160
pretty important so you'll see here that

00:08:03,000 --> 00:08:06,160
[Music]

00:08:09,039 --> 00:08:18,229
for my experience I do not use passing

00:08:15,499 --> 00:08:20,120
interactive show very much so I did not

00:08:18,229 --> 00:08:22,399
notice there are difference between

00:08:20,120 --> 00:08:32,750
interactive show and a row and running

00:08:22,399 --> 00:08:36,469
script I think it's not a good design my

00:08:32,750 --> 00:08:38,659
experience I have many my I have known

00:08:36,469 --> 00:08:42,610
about many programming languages and

00:08:38,659 --> 00:08:42,610
I've never seen anyone like that

00:08:55,190 --> 00:08:58,870
always right Pisan scripts

00:09:01,420 --> 00:09:12,310
I use Emacs Emacs editor it's a famous

00:09:08,110 --> 00:09:17,490
editor one of the best here I use a

00:09:12,310 --> 00:09:20,380
function of exec execute so this is

00:09:17,490 --> 00:09:24,670
using the pison the virtual machine

00:09:20,380 --> 00:09:27,010
itself to interpret the code so with

00:09:24,670 --> 00:09:31,470
that kind of approach we can get the

00:09:27,010 --> 00:09:34,920
same result with without lying between

00:09:31,470 --> 00:09:34,920
different statements

00:09:37,480 --> 00:09:45,700
so exactly it's a pretty powerful

00:09:40,440 --> 00:09:48,340
functions in Python well with the exact

00:09:45,700 --> 00:09:50,710
you can run Python code inside you can

00:09:48,340 --> 00:09:53,590
create Python code inside of Python code

00:09:50,710 --> 00:09:57,250
that means you can modify the running

00:09:53,590 --> 00:09:59,380
script itself to have some higher levels

00:09:57,250 --> 00:10:02,410
of that production in some rare

00:09:59,380 --> 00:10:04,450
occasions you need that when you want to

00:10:02,410 --> 00:10:06,490
create some statement in your running

00:10:04,450 --> 00:10:09,610
time you could use these kind of

00:10:06,490 --> 00:10:14,460
functions I think this is and that is

00:10:09,610 --> 00:10:21,210
called a dynamic of a language it's not

00:10:14,460 --> 00:10:26,200
it means it can be it can be modified

00:10:21,210 --> 00:10:29,620
when you run the code with some static

00:10:26,200 --> 00:10:30,580
languages it cannot be for example the C

00:10:29,620 --> 00:10:32,740
and C++

00:10:30,580 --> 00:10:36,160
everything is compound you cannot modify

00:10:32,740 --> 00:10:40,930
the running running code when the code

00:10:36,160 --> 00:10:44,490
is running you can try other statement

00:10:40,930 --> 00:10:44,490
line using exact

00:10:56,350 --> 00:11:11,950
see here I use three I use three commas

00:11:05,420 --> 00:11:15,320
for two to say that this thing is a long

00:11:11,950 --> 00:11:18,500
string and those three commas cannot be

00:11:15,320 --> 00:11:25,580
in the industry itself so it will be

00:11:18,500 --> 00:11:30,790
quite clear and explicitly so the

00:11:25,580 --> 00:11:30,790
strings in pison can be multi-line

00:11:32,560 --> 00:11:43,430
single quote double quote are the same

00:11:35,720 --> 00:11:48,740
in Tison shall we go further so let's

00:11:43,430 --> 00:11:51,800
try conditional the type of the integer

00:11:48,740 --> 00:11:55,760
no nothing it is a variable and you can

00:11:51,800 --> 00:12:01,700
use the STR to offer and they are the

00:11:55,760 --> 00:12:06,160
variable to all that no shopping list of

00:12:01,700 --> 00:12:06,160
this order but if we sort

00:12:16,710 --> 00:12:22,960
the owner has changed this is way this

00:12:20,590 --> 00:12:28,450
is way called a steady effect which is

00:12:22,960 --> 00:12:30,990
is not a good design to empower way it

00:12:28,450 --> 00:12:34,030
should be to implement a light-weight

00:12:30,990 --> 00:12:37,360
have the shopping list thoughts thoughts

00:12:34,030 --> 00:12:38,620
salt we wish you to get a new lease with

00:12:37,360 --> 00:12:41,500
the new order by the shopping list

00:12:38,620 --> 00:12:43,450
itself is remain the same does not hit a

00:12:41,500 --> 00:12:44,470
good design but this way is not good

00:12:43,450 --> 00:12:48,870
design it's cold

00:12:44,470 --> 00:12:48,870
none it's not functional and it's not

00:12:57,120 --> 00:13:13,600
okay I'm I can show you this is a

00:13:10,750 --> 00:13:16,750
properly implemented implement of sort

00:13:13,600 --> 00:13:20,800
you can see that the Z here it's five

00:13:16,750 --> 00:13:23,950
four and sort it returns a new list of

00:13:20,800 --> 00:13:26,230
the new old proper order but if we tap D

00:13:23,950 --> 00:13:36,430
it remains the same a proper way to do

00:13:26,230 --> 00:13:39,070
that we can write this type use the

00:13:36,430 --> 00:13:41,860
reverse or function so you can see that

00:13:39,070 --> 00:13:45,820
we use the cogito t probably we will

00:13:41,860 --> 00:13:48,270
create a clone of a with its with its

00:13:45,820 --> 00:13:52,600
pointer and with its data content and

00:13:48,270 --> 00:13:55,120
run sort function to the new new list

00:13:52,600 --> 00:13:58,360
itself and return the list as a new

00:13:55,120 --> 00:14:00,520
object so the a itself will remain the

00:13:58,360 --> 00:14:11,020
same here so this is a proper way of

00:14:00,520 --> 00:14:16,390
functional programming which also the

00:14:11,020 --> 00:14:20,920
deep copy creates a clone of this and

00:14:16,390 --> 00:14:23,270
and its content so after after this

00:14:20,920 --> 00:14:28,220
statement there will be two

00:14:23,270 --> 00:14:32,170
- copy of of this list and they are in

00:14:28,220 --> 00:14:35,480
different memory areas of of the Pisan

00:14:32,170 --> 00:14:39,650
virtual machine and we sort only in

00:14:35,480 --> 00:14:42,730
change this one this this list in the

00:14:39,650 --> 00:14:42,730
memory remains the same

00:14:46,930 --> 00:14:54,110
yeah right yeah this is our poverty

00:14:50,240 --> 00:14:58,160
over-design it's confusing me a lot when

00:14:54,110 --> 00:15:00,470
using you should take care where are the

00:14:58,160 --> 00:15:03,770
sati effect the side effect is that when

00:15:00,470 --> 00:15:06,590
you when you call a function the func

00:15:03,770 --> 00:15:10,700
the verbal itself is changed it's not

00:15:06,590 --> 00:15:12,890
good you there will be a lot of mistakes

00:15:10,700 --> 00:15:15,740
when encountered that kind of function

00:15:12,890 --> 00:15:21,560
in other programming languages some

00:15:15,740 --> 00:15:26,060
side-effects functions have the naming

00:15:21,560 --> 00:15:27,500
convention so when you use that function

00:15:26,060 --> 00:15:29,089
you will know that there will be said in

00:15:27,500 --> 00:15:32,870
fact inside that function for example

00:15:29,089 --> 00:15:35,390
scheme you de-emphasize sign you see

00:15:32,870 --> 00:15:38,200
that the function has side effect but

00:15:35,390 --> 00:15:38,200
pison know

00:15:41,980 --> 00:15:44,580
yeah

00:15:46,570 --> 00:15:51,480
no worries it will be announced or him

00:15:53,010 --> 00:15:56,010
we're

00:15:56,380 --> 00:16:02,760
though the a will now be changed right

00:16:06,930 --> 00:16:09,740
this

00:16:12,619 --> 00:16:20,759
here you can assess originally here but

00:16:17,429 --> 00:16:24,319
after the equals to soar thee you will

00:16:20,759 --> 00:16:24,319
have the modified for sure

00:16:33,070 --> 00:16:40,120
and it suggests the demonstration of

00:16:36,850 --> 00:16:42,900
over function demonstration so it's a

00:16:40,120 --> 00:16:49,410
better way of using the function sword

00:16:42,900 --> 00:16:53,320
the sword itself alright and be good

00:16:49,410 --> 00:17:00,310
yeah well no not reading this code if

00:16:53,320 --> 00:17:07,020
you will not you cannot imagine that the

00:17:00,310 --> 00:17:07,020
lease is changed will be quite confusing

00:17:16,589 --> 00:17:31,860
have you tried removal okay I think it's

00:17:27,940 --> 00:17:31,860
better way to create a new list

00:17:45,060 --> 00:17:51,360
oh you can use the insert there were

00:17:47,370 --> 00:17:53,190
insert function let me show you insert

00:17:51,360 --> 00:17:59,700
this is the index and this is the

00:17:53,190 --> 00:18:03,150
content so Lisa is not Airy in C so you

00:17:59,700 --> 00:18:06,930
can have any type inside even even the

00:18:03,150 --> 00:18:13,230
least itself provides an assignment

00:18:06,930 --> 00:18:17,910
assign yourself if you it works like it

00:18:13,230 --> 00:18:23,040
works like assign the pointer not create

00:18:17,910 --> 00:18:40,470
a new object so if you want to create a

00:18:23,040 --> 00:18:44,970
new object pointer we use the sport

00:18:40,470 --> 00:18:48,120
itself is a sort it does not return

00:18:44,970 --> 00:18:51,450
anything and the and the sy itself is

00:18:48,120 --> 00:18:54,420
changed you see that the source is it

00:18:51,450 --> 00:18:58,650
returns none source returns none but the

00:18:54,420 --> 00:19:02,700
s-plane soviets change no no no no no no

00:18:58,650 --> 00:19:08,820
you do not have that function you you

00:19:02,700 --> 00:19:11,210
can see that as so the SL itself is

00:19:08,820 --> 00:19:11,210
changed

00:19:16,160 --> 00:19:22,940
and SL is also modified so this is

00:19:19,850 --> 00:19:24,890
pretty tricky in programming so if you

00:19:22,940 --> 00:19:28,630
want to if you want them to be different

00:19:24,890 --> 00:19:28,630
you should use a coffee dollop coffee

00:19:29,080 --> 00:19:44,990
yeah it's pretty tricky it's not new

00:19:37,040 --> 00:19:47,300
verbal he asked a good question if we

00:19:44,990 --> 00:19:52,430
have assignment in two different lists

00:19:47,300 --> 00:19:58,600
whether the lease itself exchange itself

00:19:52,430 --> 00:20:02,750
is we assign Z to a new variable L so

00:19:58,600 --> 00:20:05,030
the L will be a new variable but if you

00:20:02,750 --> 00:20:08,510
can imagine that the hell itself is five

00:20:05,030 --> 00:20:11,450
four three eighty one and now we modify

00:20:08,510 --> 00:20:14,360
the first element of Z to 99 and V

00:20:11,450 --> 00:20:16,580
itself is nine and nine for sure but we

00:20:14,360 --> 00:20:21,130
can see here that the L itself is

00:20:16,580 --> 00:20:25,490
changed to nine and that means that the

00:20:21,130 --> 00:20:25,970
has the same memory locations in the the

00:20:25,490 --> 00:20:28,400
Pisan

00:20:25,970 --> 00:20:30,650
virtual machine so it's quite quite

00:20:28,400 --> 00:20:37,910
tricky if you want to if you want them

00:20:30,650 --> 00:20:40,760
to be separate I'll show you here the

00:20:37,910 --> 00:20:52,640
Z&L point two different places in

00:20:40,760 --> 00:20:54,980
virtual machine you need to know what

00:20:52,640 --> 00:20:59,090
you are going to do different kinds of

00:20:54,980 --> 00:21:01,190
my assignment can be used - no no no the

00:20:59,090 --> 00:21:05,840
variable integer is quite different from

00:21:01,190 --> 00:21:11,810
the role of this if you assign different

00:21:05,840 --> 00:21:15,070
I'll shoot here here the B is 0 and then

00:21:11,810 --> 00:21:17,900
we modify a the B itself is not changed

00:21:15,070 --> 00:21:20,600
you will cause trouble for sure but I

00:21:17,900 --> 00:21:23,630
will save some running time since when

00:21:20,600 --> 00:21:25,820
you assign a list to another another

00:21:23,630 --> 00:21:27,500
variable if you will copy all the

00:21:25,820 --> 00:21:30,980
content of

00:21:27,500 --> 00:21:34,820
of the of the list - it will create an

00:21:30,980 --> 00:21:42,379
image well in memory there will be two

00:21:34,820 --> 00:21:46,700
versions of this so well yeah yeah well

00:21:42,379 --> 00:21:49,340
speed it up so when you use Python you

00:21:46,700 --> 00:21:58,659
will know that you need to take care of

00:21:49,340 --> 00:21:58,659
this memory location pretty tricky

00:22:02,080 --> 00:22:07,779
instructor dictionaries in other

00:22:05,539 --> 00:22:17,600
programming languages the dictionaries

00:22:07,779 --> 00:22:21,250
refer to table hash table or map write

00:22:17,600 --> 00:22:21,250

YouTube URL: https://www.youtube.com/watch?v=eXKL6-vzBzI


