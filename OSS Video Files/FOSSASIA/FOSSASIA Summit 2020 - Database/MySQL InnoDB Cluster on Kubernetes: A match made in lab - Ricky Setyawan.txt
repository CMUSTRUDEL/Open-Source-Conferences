Title: MySQL InnoDB Cluster on Kubernetes: A match made in lab - Ricky Setyawan
Publication date: 2020-03-22
Playlist: FOSSASIA Summit 2020 - Database
Description: 
	FOSSASIA Summit 2020 - Database
Captions: 
	00:00:00,589 --> 00:00:05,960
hey guys good morning thank you very

00:00:03,720 --> 00:00:09,500
much for joining me in this session

00:00:05,960 --> 00:00:13,440
first of all I'd like to apologize I

00:00:09,500 --> 00:00:14,880
couldn't be there in person thank you

00:00:13,440 --> 00:00:18,270
very much

00:00:14,880 --> 00:00:23,550
to first issue for still allowing this

00:00:18,270 --> 00:00:28,320
to happen through recording okay without

00:00:23,550 --> 00:00:31,740
further ado let's let's start just a

00:00:28,320 --> 00:00:36,510
little little intro my full name is

00:00:31,740 --> 00:00:39,540
Ricky Darwin I've been doing database

00:00:36,510 --> 00:00:43,980
and operations engineering for the past

00:00:39,540 --> 00:00:47,460
two an year plus I've been exposed to

00:00:43,980 --> 00:00:53,610
open source since I started working in

00:00:47,460 --> 00:00:57,020
our commands here that was 2012 and I

00:00:53,610 --> 00:01:03,750
never looked back ever since

00:00:57,020 --> 00:01:07,080
now I also DevOps consultant having a

00:01:03,750 --> 00:01:10,830
lot of fun helping companies to

00:01:07,080 --> 00:01:17,270
transform their culture into their Fox

00:01:10,830 --> 00:01:21,659
culture without further ado let's start

00:01:17,270 --> 00:01:26,430
with what is kubernetes kubernetes was

00:01:21,659 --> 00:01:28,740
originally developed by Google its aim

00:01:26,430 --> 00:01:32,880
is only to manage distributed container

00:01:28,740 --> 00:01:37,950
instances across thousands of nodes or

00:01:32,880 --> 00:01:40,439
service in Google there are other

00:01:37,950 --> 00:01:44,610
similar competing products like Mae

00:01:40,439 --> 00:01:49,950
sauce and doukas one but kubernetes by

00:01:44,610 --> 00:01:51,390
far has much wider adoption and now the

00:01:49,950 --> 00:01:52,970
de facto standard for container

00:01:51,390 --> 00:01:56,880
management

00:01:52,970 --> 00:02:00,780
I'd like to equip a little excerpt from

00:01:56,880 --> 00:02:02,940
Red Hat so basically according to Red

00:02:00,780 --> 00:02:06,020
Hat kubernetes helps you into easily and

00:02:02,940 --> 00:02:10,590
efficiently manage those clusters

00:02:06,020 --> 00:02:12,540
containers clusters clusters can span

00:02:10,590 --> 00:02:16,170
hose across public and private and

00:02:12,540 --> 00:02:18,960
hybrid clouds for this reason kubernetes

00:02:16,170 --> 00:02:21,930
is an ideal platform for hosting cloud

00:02:18,960 --> 00:02:25,110
native applications that require rapid

00:02:21,930 --> 00:02:30,930
scaling for instance like a real time

00:02:25,110 --> 00:02:33,510
they're streaming now before we go

00:02:30,930 --> 00:02:36,210
further let's step back for a bit and

00:02:33,510 --> 00:02:41,700
take a look at what is the difference

00:02:36,210 --> 00:02:45,110
between container and VM so VM as you

00:02:41,700 --> 00:02:48,390
might already know and be unaware that

00:02:45,110 --> 00:02:53,400
each VM has its own operating system

00:02:48,390 --> 00:02:55,380
files so each of them can have different

00:02:53,400 --> 00:03:00,140
operating system you can have Linux you

00:02:55,380 --> 00:03:04,380
can have Windows you can have free DSD

00:03:00,140 --> 00:03:08,550
anything right it doesn't matter what

00:03:04,380 --> 00:03:12,180
the host operating system is right now

00:03:08,550 --> 00:03:17,600
that means it has it has a pretty good

00:03:12,180 --> 00:03:21,630
isolation now let's go to container

00:03:17,600 --> 00:03:24,330
container or the other hand is sharing

00:03:21,630 --> 00:03:28,080
the operating system with the hosts

00:03:24,330 --> 00:03:31,980
it only encapsulated the processes and

00:03:28,080 --> 00:03:35,760
software it supposed to run on the

00:03:31,980 --> 00:03:38,790
container itself so all OS files is

00:03:35,760 --> 00:03:41,120
shared across all the containers and the

00:03:38,790 --> 00:03:41,120
hosts

00:03:42,350 --> 00:03:49,709
why would anyone want to run application

00:03:45,660 --> 00:03:52,980
on containers first is because it's much

00:03:49,709 --> 00:03:57,140
less bulky and require less resources

00:03:52,980 --> 00:04:01,650
compared to the M it is faster to spawn

00:03:57,140 --> 00:04:03,690
lightweight as well because it doesn't

00:04:01,650 --> 00:04:06,300
need to have the OS files inside the

00:04:03,690 --> 00:04:10,290
container all OS files

00:04:06,300 --> 00:04:13,290
sitting on the horse second is the

00:04:10,290 --> 00:04:15,900
process isolation because the each of

00:04:13,290 --> 00:04:18,540
the process which is supposed to be on

00:04:15,900 --> 00:04:22,790
the on specific container is all

00:04:18,540 --> 00:04:22,790
isolated with any other process

00:04:23,180 --> 00:04:30,000
third is easier management you do

00:04:26,010 --> 00:04:33,450
dependencies encapsulation OSN patches

00:04:30,000 --> 00:04:36,140
basically you only need to patch one

00:04:33,450 --> 00:04:41,130
time and all the container will enjoy

00:04:36,140 --> 00:04:43,380
will end your new patches as compared if

00:04:41,130 --> 00:04:46,020
it is in the VM you have to you have to

00:04:43,380 --> 00:04:50,400
patch every single VM because this

00:04:46,020 --> 00:04:52,350
Olivia it is all OS false application

00:04:50,400 --> 00:04:55,100
environment and application code and

00:04:52,350 --> 00:04:59,550
dependencies are all encapsulated within

00:04:55,100 --> 00:05:02,760
each container and we do to the

00:04:59,550 --> 00:05:06,410
encapsulation this is this is one part

00:05:02,760 --> 00:05:09,270
of that is that make it easy for

00:05:06,410 --> 00:05:15,090
continuous testing which is part of dev

00:05:09,270 --> 00:05:21,060
ops workflow to show you the proof that

00:05:15,090 --> 00:05:24,810
the kubernetes is very very fast adopted

00:05:21,060 --> 00:05:27,260
by companies based on study conducted by

00:05:24,810 --> 00:05:32,300
near Mata and cube con and cognitive con

00:05:27,260 --> 00:05:37,800
2018 from over 150 IT professionals

00:05:32,300 --> 00:05:40,650
which it is 78% are using or plan to

00:05:37,800 --> 00:05:43,710
deploy micro services on communities the

00:05:40,650 --> 00:05:46,590
rest of them as you can see they they

00:05:43,710 --> 00:05:51,990
might deploy other application like 20

00:05:46,590 --> 00:05:55,490
Arabic data a iron anime or IOT ever

00:05:51,990 --> 00:05:55,490
thing and so on and so forth

00:05:57,340 --> 00:06:03,500
based on the same study is or it also

00:06:00,979 --> 00:06:06,530
shows that 52 percent are using

00:06:03,500 --> 00:06:08,740
kubernetes in production and nearly 40

00:06:06,530 --> 00:06:14,389
percent are using it in development and

00:06:08,740 --> 00:06:17,000
testing environments now let's take a

00:06:14,389 --> 00:06:19,699
look at the architecture every

00:06:17,000 --> 00:06:21,740
kubernetes system always have a master

00:06:19,699 --> 00:06:26,270
node this is where the kubernetes

00:06:21,740 --> 00:06:28,789
software resides and then you'll see on

00:06:26,270 --> 00:06:31,520
top of it we have a cube CTL this is the

00:06:28,789 --> 00:06:35,960
command line tool to send commands to

00:06:31,520 --> 00:06:39,139
the master to the master node into the

00:06:35,960 --> 00:06:42,169
nodes on the right-hand side you see

00:06:39,139 --> 00:06:45,289
notes normally a kubernetes system

00:06:42,169 --> 00:06:48,530
consists more than just one node it

00:06:45,289 --> 00:06:51,050
called it comprised of multiple nodes to

00:06:48,530 --> 00:06:55,729
form a cluster to have certain high

00:06:51,050 --> 00:07:00,020
availability inside each node you will

00:06:55,729 --> 00:07:05,750
find a number of ports what's basically

00:07:00,020 --> 00:07:10,070
is a group of containers each pod has

00:07:05,750 --> 00:07:13,490
their own network system and other

00:07:10,070 --> 00:07:15,440
resources and hosting as well so all

00:07:13,490 --> 00:07:19,280
these containers within one thought will

00:07:15,440 --> 00:07:22,759
have to share all these resources belong

00:07:19,280 --> 00:07:27,860
to the pod underneath is basically the

00:07:22,759 --> 00:07:31,310
docker software now that we know about

00:07:27,860 --> 00:07:35,300
kubernetes and its architecture let's go

00:07:31,310 --> 00:07:38,060
into masculinity cluster as you know my

00:07:35,300 --> 00:07:40,940
scale is the most popular open-source

00:07:38,060 --> 00:07:46,400
database in the world it's widely used

00:07:40,940 --> 00:07:50,000
everywhere in any applications now minus

00:07:46,400 --> 00:07:52,490
QL inaudible cluster is basically the

00:07:50,000 --> 00:07:55,039
edge a solution hi will built the

00:07:52,490 --> 00:07:58,820
solution built on top of MySQL

00:07:55,039 --> 00:08:01,880
replication technology it's comprised of

00:07:58,820 --> 00:08:04,110
three main components which is mask a

00:08:01,880 --> 00:08:07,479
group replication

00:08:04,110 --> 00:08:09,789
which is in this case in this diagram

00:08:07,479 --> 00:08:12,849
compress of three notes three database

00:08:09,789 --> 00:08:16,780
notes you have on top of it you have

00:08:12,849 --> 00:08:20,410
master out and on the right side you

00:08:16,780 --> 00:08:27,220
have magical shell which is the which is

00:08:20,410 --> 00:08:30,940
the tool to manage inaudible cluster now

00:08:27,220 --> 00:08:33,550
the group replication compress of three

00:08:30,940 --> 00:08:36,490
database nodes one will become primary

00:08:33,550 --> 00:08:39,399
the other two will become secondary the

00:08:36,490 --> 00:08:42,839
primary is available for retry the two

00:08:39,399 --> 00:08:46,270
secondary available for read-only and

00:08:42,839 --> 00:08:52,240
master router will be the will be the

00:08:46,270 --> 00:08:56,200
one to manage palapa anytime the primary

00:08:52,240 --> 00:08:58,959
is down master router will check and

00:08:56,200 --> 00:09:02,290
find out which one will become the new

00:08:58,959 --> 00:09:09,640
primary and it will redirect the traffic

00:09:02,290 --> 00:09:13,170
into the new primary node now why we

00:09:09,640 --> 00:09:16,510
want to run with the bases on kubernetes

00:09:13,170 --> 00:09:20,100
simply because of support from the micro

00:09:16,510 --> 00:09:22,329
services architecture is faster to spawn

00:09:20,100 --> 00:09:25,660
lightweight containers does not include

00:09:22,329 --> 00:09:27,459
oh s files and especially when your

00:09:25,660 --> 00:09:33,100
applications already running micro

00:09:27,459 --> 00:09:35,440
services model next is to eliminate

00:09:33,100 --> 00:09:38,440
hefty license costs when you're using

00:09:35,440 --> 00:09:40,839
and depressed databases but simply

00:09:38,440 --> 00:09:45,070
because many are the press releases like

00:09:40,839 --> 00:09:49,540
nano scale and Maya DB they are they are

00:09:45,070 --> 00:09:55,000
actually licensed based on server where

00:09:49,540 --> 00:09:57,570
in this case let's say you have three

00:09:55,000 --> 00:10:02,670
physical nodes three physical service a

00:09:57,570 --> 00:10:07,800
powerful one and you can run let's say

00:10:02,670 --> 00:10:10,240
maybe 3040 database containers

00:10:07,800 --> 00:10:14,170
it's totally logical and it's actually

00:10:10,240 --> 00:10:16,000
pretty common these days last one is the

00:10:14,170 --> 00:10:16,840
good HEA feature even though you are

00:10:16,000 --> 00:10:20,740
running only

00:10:16,840 --> 00:10:23,020
single instant bit of MySQL so there is

00:10:20,740 --> 00:10:24,850
no cluster a to attach there only a

00:10:23,020 --> 00:10:28,720
single instance and kubernetes will

00:10:24,850 --> 00:10:32,560
still handle the H a because kubernetes

00:10:28,720 --> 00:10:38,710
will simply spawn another container when

00:10:32,560 --> 00:10:39,600
the database container failed not to go

00:10:38,710 --> 00:10:46,750
further

00:10:39,600 --> 00:10:50,500
why MySQL in ODB cluster now inaudible

00:10:46,750 --> 00:10:52,780
clusters is offering you a higher level

00:10:50,500 --> 00:10:57,550
of availability than just a single

00:10:52,780 --> 00:10:59,170
instance it is also affordable as you

00:10:57,550 --> 00:11:02,340
know because my SQL matter Libyan

00:10:59,170 --> 00:11:07,180
PostgreSQL very very affordable

00:11:02,340 --> 00:11:11,920
licensing especially my CL and MariaDB

00:11:07,180 --> 00:11:16,240
is a key as running you know license per

00:11:11,920 --> 00:11:19,920
base per server also on the other hand

00:11:16,240 --> 00:11:23,440
is very easy to scale the read because

00:11:19,920 --> 00:11:27,280
every node in the cluster by default you

00:11:23,440 --> 00:11:29,380
have T notes and two of them each

00:11:27,280 --> 00:11:33,250
secondary which is available for read

00:11:29,380 --> 00:11:35,590
only that means you can actually load

00:11:33,250 --> 00:11:40,120
balance your it only with between these

00:11:35,590 --> 00:11:42,880
two secondary nodes last one is multi

00:11:40,120 --> 00:11:47,620
master no mode multi master mode also

00:11:42,880 --> 00:11:51,610
available and it actually performed very

00:11:47,620 --> 00:11:54,000
well when you configure properly with of

00:11:51,610 --> 00:11:59,800
course with some condition attached and

00:11:54,000 --> 00:12:02,740
do do take note of these conditions

00:11:59,800 --> 00:12:06,670
before you decide to go for multi master

00:12:02,740 --> 00:12:13,720
because this is a very important and it

00:12:06,670 --> 00:12:15,460
can make or break your application on

00:12:13,720 --> 00:12:17,190
with the challenges with databases on

00:12:15,460 --> 00:12:22,149
kubernetes

00:12:17,190 --> 00:12:28,170
now first is I hope because by default

00:12:22,149 --> 00:12:31,180
database is currently is IO intensive so

00:12:28,170 --> 00:12:35,800
there's a challenge to be able to decide

00:12:31,180 --> 00:12:38,350
which which storage book are required

00:12:35,800 --> 00:12:42,520
and on top of that different databases

00:12:38,350 --> 00:12:45,160
have different requirements whether

00:12:42,520 --> 00:12:48,640
there are maybe one databases database

00:12:45,160 --> 00:12:53,680
needs SSD one database need simply can

00:12:48,640 --> 00:12:56,500
run on HDD one can run on read fight

00:12:53,680 --> 00:13:01,209
properly the other one really really

00:12:56,500 --> 00:13:04,360
neat RAID 10 and then maybe some other

00:13:01,209 --> 00:13:06,279
databases require hybrid storage so they

00:13:04,360 --> 00:13:11,020
have different different storage

00:13:06,279 --> 00:13:14,610
requirements next is the different

00:13:11,020 --> 00:13:16,740
configuration for different database

00:13:14,610 --> 00:13:20,790
different database have different

00:13:16,740 --> 00:13:24,089
pattern like online and let's say it is

00:13:20,790 --> 00:13:28,420
section processing or even let's say

00:13:24,089 --> 00:13:34,560
analytical maybe reporting maybe in a

00:13:28,420 --> 00:13:37,990
warehouse and so different different

00:13:34,560 --> 00:13:42,910
database have different configuration

00:13:37,990 --> 00:13:46,350
and and then also a different way of

00:13:42,910 --> 00:13:50,230
application to connect into the database

00:13:46,350 --> 00:13:53,649
so this makes it more complex to manage

00:13:50,230 --> 00:13:56,370
the configuration for each and every

00:13:53,649 --> 00:13:56,370
container

00:13:56,420 --> 00:14:05,670
next is because of the nature of company

00:13:59,640 --> 00:14:08,130
this top is more talk so kubernetes is

00:14:05,670 --> 00:14:12,780
by default design for stateless

00:14:08,130 --> 00:14:17,370
applications so it is easy for you to to

00:14:12,780 --> 00:14:19,260
simply restart whenever whenever the

00:14:17,370 --> 00:14:23,130
container is down kubernetes will do it

00:14:19,260 --> 00:14:26,370
for you automatically but here the

00:14:23,130 --> 00:14:28,380
problem is database has to be persistent

00:14:26,370 --> 00:14:35,100
it has to run on a persistent storage

00:14:28,380 --> 00:14:37,140
right so so that is why any database

00:14:35,100 --> 00:14:38,160
deployment on kubernetes has to run on

00:14:37,140 --> 00:14:42,710
stateful sets

00:14:38,160 --> 00:14:46,650
remember this stateful sets do not use

00:14:42,710 --> 00:14:50,970
normal deployment because by default

00:14:46,650 --> 00:14:55,560
could be a misuse deployment now

00:14:50,970 --> 00:14:58,590
resources resources is shared across

00:14:55,560 --> 00:15:02,460
lots of containers remember what I said

00:14:58,590 --> 00:15:05,400
earlier kubernetes cluster is running

00:15:02,460 --> 00:15:07,770
let's say on a few physical service but

00:15:05,400 --> 00:15:12,590
on top of that can you can have maybe

00:15:07,770 --> 00:15:16,410
hundreds of containers that means all

00:15:12,590 --> 00:15:22,950
database containers will be sharing lots

00:15:16,410 --> 00:15:26,120
of resources databases containers will

00:15:22,950 --> 00:15:29,820
share all the resources of these

00:15:26,120 --> 00:15:35,880
physical notes so resource management

00:15:29,820 --> 00:15:39,930
can be very very complex security and

00:15:35,880 --> 00:15:42,420
audit policy comprises every every

00:15:39,930 --> 00:15:45,030
databases have different security and

00:15:42,420 --> 00:15:47,970
audit policy compliance this make it

00:15:45,030 --> 00:15:51,570
hard as well and the last one is of

00:15:47,970 --> 00:15:55,380
course skill set of the people who

00:15:51,570 --> 00:16:02,720
manage it this is at this moment

00:15:55,380 --> 00:16:07,580
based on my experience doing a number of

00:16:02,720 --> 00:16:07,580
consultancy on certain companies

00:16:07,589 --> 00:16:15,700
not many ideas actually have proper

00:16:12,100 --> 00:16:20,500
skills on kubernetes because kubernetes

00:16:15,700 --> 00:16:25,269
itself is still considerably mean right

00:16:20,500 --> 00:16:27,269
so yeah so people need some time to pick

00:16:25,269 --> 00:16:34,450
up and be familiar with this technology

00:16:27,269 --> 00:16:39,910
so yeah that is there is a pretty pretty

00:16:34,450 --> 00:16:44,640
good challenge there now that we know

00:16:39,910 --> 00:16:47,769
about the challenges how to overcome it

00:16:44,640 --> 00:16:50,290
we have a first is we have to analyze

00:16:47,769 --> 00:16:52,630
the database environments and not an

00:16:50,290 --> 00:16:56,140
analysis in the beginning is very

00:16:52,630 --> 00:16:58,630
important and this will determine

00:16:56,140 --> 00:17:02,560
whether you will make it you will break

00:16:58,630 --> 00:17:04,480
it in production a couple of questions

00:17:02,560 --> 00:17:08,890
that we can ask ourselves before we

00:17:04,480 --> 00:17:12,640
decide to move the end I walk load to

00:17:08,890 --> 00:17:15,400
kubernetes is first where it's already

00:17:12,640 --> 00:17:16,780
running on docker containers if it is

00:17:15,400 --> 00:17:19,390
already running on docker containers

00:17:16,780 --> 00:17:22,510
then it is a no-brainer to simply go

00:17:19,390 --> 00:17:25,660
through kubernetes it make it easier for

00:17:22,510 --> 00:17:29,679
you to manage now if it is still

00:17:25,660 --> 00:17:32,650
monolithic we need to ours as ourselves

00:17:29,679 --> 00:17:36,000
is it possible to taunted it to

00:17:32,650 --> 00:17:36,000
micro-services model

00:17:36,540 --> 00:17:44,260
now also weather apps support splitting

00:17:41,740 --> 00:17:48,460
this databases into smaller smaller

00:17:44,260 --> 00:17:49,120
channels some serpent's apps that's not

00:17:48,460 --> 00:17:52,960
supported

00:17:49,120 --> 00:17:57,300
they simply connect directly using one

00:17:52,960 --> 00:18:03,040
connections and they cannot be changed

00:17:57,300 --> 00:18:06,850
so no choice but certain application

00:18:03,040 --> 00:18:09,520
especially the custom application they

00:18:06,850 --> 00:18:13,990
can see that they can change it then

00:18:09,520 --> 00:18:16,510
they can support you know editing it is

00:18:13,990 --> 00:18:21,280
split into databases into different

00:18:16,510 --> 00:18:23,320
smaller inner bases next is what

00:18:21,280 --> 00:18:26,500
benefits for the database to run on

00:18:23,320 --> 00:18:27,220
micro services versus monolithic don't

00:18:26,500 --> 00:18:32,080
get me wrong

00:18:27,220 --> 00:18:35,110
running on banality it's not it's not a

00:18:32,080 --> 00:18:41,070
bad thing at all it is not a bad thing

00:18:35,110 --> 00:18:43,330
do not fall into this this notion where

00:18:41,070 --> 00:18:48,010
everything has to run on kubernetes

00:18:43,330 --> 00:18:51,040
no no and no something that is running

00:18:48,010 --> 00:18:56,590
on monolithic and runs fine that's it

00:18:51,040 --> 00:18:59,020
do not touch it you better do it's

00:18:56,590 --> 00:19:01,090
actually better for you to focus on new

00:18:59,020 --> 00:19:03,910
application instead of changing whatever

00:19:01,090 --> 00:19:08,680
hood you already have and on monolithic

00:19:03,910 --> 00:19:10,630
and run very well how much effort you

00:19:08,680 --> 00:19:13,510
require to transform to macro services

00:19:10,630 --> 00:19:17,500
model this is something also you need to

00:19:13,510 --> 00:19:22,510
think about how much black how much

00:19:17,500 --> 00:19:26,410
tears how much swept give it to spill in

00:19:22,510 --> 00:19:28,360
order to transform right where it is

00:19:26,410 --> 00:19:32,950
worth your time when it is worth

00:19:28,360 --> 00:19:34,740
everybody's time in your team this is

00:19:32,950 --> 00:19:39,010
something that we need to think about

00:19:34,740 --> 00:19:41,410
next is the ok database is basically

00:19:39,010 --> 00:19:43,450
it's commonly used for data based on

00:19:41,410 --> 00:19:46,450
kubernetes is commonly used for caching

00:19:43,450 --> 00:19:48,730
layer is because caching layer does not

00:19:46,450 --> 00:19:51,500
need to be persistent

00:19:48,730 --> 00:19:54,560
you know you simply let let's say that

00:19:51,500 --> 00:19:56,900
when the containers down you can the

00:19:54,560 --> 00:19:59,300
kubernetes simply respond it back up

00:19:56,900 --> 00:20:01,790
again and the database is empty there

00:19:59,300 --> 00:20:06,370
and the application will simply or

00:20:01,790 --> 00:20:09,740
freely navigate so not a problem

00:20:06,370 --> 00:20:11,840
next use cases is normally database

00:20:09,740 --> 00:20:15,880
sharding database sharding is a good

00:20:11,840 --> 00:20:18,050
it's a good one because why why would

00:20:15,880 --> 00:20:19,940
why would anyone want to shut the

00:20:18,050 --> 00:20:22,760
database is because they want to have a

00:20:19,940 --> 00:20:26,810
better performance because by having a

00:20:22,760 --> 00:20:31,450
smaller database smaller set of data it

00:20:26,810 --> 00:20:35,870
is they can run more they can run

00:20:31,450 --> 00:20:40,370
concurrently they can achieve highly

00:20:35,870 --> 00:20:44,360
parallel processing so this is this is a

00:20:40,370 --> 00:20:46,400
very good use cases one of the most

00:20:44,360 --> 00:20:49,730
popular choices for data sharing

00:20:46,400 --> 00:20:52,250
solution running on mysql MariaDB or

00:20:49,730 --> 00:20:54,980
procore is activitists

00:20:52,250 --> 00:21:02,320
you might have heard about this before

00:20:54,980 --> 00:21:05,570
it is it's very good very very reliable

00:21:02,320 --> 00:21:07,160
piece of software you might want to take

00:21:05,570 --> 00:21:08,620
a look at that if you have interest in

00:21:07,160 --> 00:21:13,210
it

00:21:08,620 --> 00:21:18,290
next one is test and test and test I

00:21:13,210 --> 00:21:22,460
cannot emphasize more the importance of

00:21:18,290 --> 00:21:27,230
testing now moving for from bare metal

00:21:22,460 --> 00:21:30,140
to DM is already required of a big

00:21:27,230 --> 00:21:32,870
paradigm changes moving for bare bare

00:21:30,140 --> 00:21:40,610
metal directly to containers it's even

00:21:32,870 --> 00:21:42,110
more changes a big huge changes so there

00:21:40,610 --> 00:21:45,890
is there will be a lot of unknown

00:21:42,110 --> 00:21:46,750
situation where you will never think

00:21:45,890 --> 00:21:49,810
about it

00:21:46,750 --> 00:21:54,310
so do

00:21:49,810 --> 00:21:56,290
any scenarios that you can think of this

00:21:54,310 --> 00:22:01,440
is very very very important

00:21:56,290 --> 00:22:05,320
I've seen a lot of problems with with

00:22:01,440 --> 00:22:10,120
companies that move from bare metal

00:22:05,320 --> 00:22:12,280
directly to containers simply with you

00:22:10,120 --> 00:22:18,310
know because they are not doing enough

00:22:12,280 --> 00:22:22,540
testing testability especially on

00:22:18,310 --> 00:22:27,310
database full of search now database

00:22:22,540 --> 00:22:29,590
workload can search due to due to

00:22:27,310 --> 00:22:32,200
anything maybe due to due to underlying

00:22:29,590 --> 00:22:36,490
problem within the database do the bulk

00:22:32,200 --> 00:22:38,860
may be due to to the nature of the

00:22:36,490 --> 00:22:41,940
application let's say let's say if it is

00:22:38,860 --> 00:22:44,050
an e-commerce running on Black Friday

00:22:41,940 --> 00:22:46,990
there will be a lot of there will be a

00:22:44,050 --> 00:22:49,480
high search on that area then you I

00:22:46,990 --> 00:22:52,810
think you you heard about the story from

00:22:49,480 --> 00:22:55,960
Amazon story from Alibaba as well right

00:22:52,810 --> 00:22:58,750
that that they they suddenly have a lot

00:22:55,960 --> 00:23:04,300
of transaction coming in on Black Friday

00:22:58,750 --> 00:23:06,420
on eleven eleven twelve twelve you name

00:23:04,300 --> 00:23:06,420
it

00:23:06,810 --> 00:23:15,160
okay the next one is the no skillset in

00:23:11,110 --> 00:23:19,030
no time if you have no skill set and you

00:23:15,160 --> 00:23:23,230
have no time to do all these realistic

00:23:19,030 --> 00:23:28,750
analyze and testing I advise you to

00:23:23,230 --> 00:23:32,410
engage professional help if you want if

00:23:28,750 --> 00:23:34,470
you want to still pursue and explore

00:23:32,410 --> 00:23:38,080
[Music]

00:23:34,470 --> 00:23:41,100
going into urban eighties do engage

00:23:38,080 --> 00:23:41,100
professional help

00:23:42,460 --> 00:23:48,700
how to start you can get a mini queue if

00:23:46,330 --> 00:23:51,010
you want to play around in the on your

00:23:48,700 --> 00:23:53,800
laptop on your own time

00:23:51,010 --> 00:23:57,760
go ahead and download it from the

00:23:53,800 --> 00:24:01,420
kubernetes website from the MySQL part

00:23:57,760 --> 00:24:04,770
you can go to the github from Oracle

00:24:01,420 --> 00:24:08,650
this masca operator is this pick is

00:24:04,770 --> 00:24:15,070
created by the Oracle MySQL team you can

00:24:08,650 --> 00:24:16,960
you can get it there from this link now

00:24:15,070 --> 00:24:18,640
let's say you have a big team you want

00:24:16,960 --> 00:24:23,830
to go and them to get familiar with

00:24:18,640 --> 00:24:25,750
kubernetes you can you can grab a manage

00:24:23,830 --> 00:24:29,830
cooperate this engine in the cloud most

00:24:25,750 --> 00:24:34,000
of the cloud provider go buy one for you

00:24:29,830 --> 00:24:37,440
there are a lot of choices there most of

00:24:34,000 --> 00:24:42,070
them offer free credits for for trial so

00:24:37,440 --> 00:24:45,250
and even some of them actually offer for

00:24:42,070 --> 00:24:47,500
12 months so do make use of their

00:24:45,250 --> 00:24:54,280
generous offer and play around in a

00:24:47,500 --> 00:24:56,650
cloud alright finally we are at almost

00:24:54,280 --> 00:25:00,970
at the end already this is a yes key

00:24:56,650 --> 00:25:09,010
points due to our analysis first we need

00:25:00,970 --> 00:25:10,720
to do analysis properly and totally this

00:25:09,010 --> 00:25:14,080
is very important this will just

00:25:10,720 --> 00:25:18,070
determine whether we make it or we make

00:25:14,080 --> 00:25:22,179
it in a production next is do test and

00:25:18,070 --> 00:25:25,300
test and test and test test any single

00:25:22,179 --> 00:25:30,480
scenarios that that we can think of

00:25:25,300 --> 00:25:33,700
anything put it in to put it into the

00:25:30,480 --> 00:25:37,080
system and test it because anything can

00:25:33,700 --> 00:25:39,790
happen especially on a workload search

00:25:37,080 --> 00:25:42,280
database workload can search and any

00:25:39,790 --> 00:25:46,120
time do to anything like I said before

00:25:42,280 --> 00:25:50,230
so and this will this can impact not

00:25:46,120 --> 00:25:52,830
just your database also other containers

00:25:50,230 --> 00:25:55,150
as well other containers might also have

00:25:52,830 --> 00:25:55,830
other databases that is used by either

00:25:55,150 --> 00:26:00,560
application

00:25:55,830 --> 00:26:05,970
right so this is very important do test

00:26:00,560 --> 00:26:08,250
what elliptic is not it's not bad if you

00:26:05,970 --> 00:26:10,260
have application or database that's

00:26:08,250 --> 00:26:11,940
already in the noggin is I mean the

00:26:10,260 --> 00:26:14,820
surrounding monolithic model at this

00:26:11,940 --> 00:26:17,520
moment live inside if they are already

00:26:14,820 --> 00:26:17,760
running well leave it aside do not touch

00:26:17,520 --> 00:26:21,390
it

00:26:17,760 --> 00:26:25,260
hands off just concentrate on new

00:26:21,390 --> 00:26:30,060
applications leave it aside okay

00:26:25,260 --> 00:26:32,400
do not touch it last but not least find

00:26:30,060 --> 00:26:35,550
strong reasons to justify and get the

00:26:32,400 --> 00:26:38,570
top executive support this is very

00:26:35,550 --> 00:26:43,140
important you don't want you don't want

00:26:38,570 --> 00:26:46,530
in the means of your journey to

00:26:43,140 --> 00:26:49,620
transform to kubernetes suddenly the

00:26:46,530 --> 00:26:52,020
management come down and and you know

00:26:49,620 --> 00:26:55,440
stop everything you don't want this to

00:26:52,020 --> 00:27:01,970
happen so do get the management support

00:26:55,440 --> 00:27:01,970
first before embarking on the journey

00:27:03,020 --> 00:27:11,940
the next few slides will consist of of

00:27:07,800 --> 00:27:15,840
other steps for you to to set up my

00:27:11,940 --> 00:27:19,050
magical operator for kubernetes you can

00:27:15,840 --> 00:27:22,410
follow them I believe our friends from

00:27:19,050 --> 00:27:24,960
for Asia will will put this on online

00:27:22,410 --> 00:27:25,110
this slides online so everyone can see

00:27:24,960 --> 00:27:27,570
it

00:27:25,110 --> 00:27:30,300
everyone can download it and just follow

00:27:27,570 --> 00:27:33,270
the steps to to get it up and running on

00:27:30,300 --> 00:27:36,170
your own system or probably in the

00:27:33,270 --> 00:27:36,170
public cloud as well

00:27:43,240 --> 00:27:45,300
you

00:28:06,269 --> 00:28:13,059
alright guys this is it

00:28:10,750 --> 00:28:16,899
thank you very much for spending about

00:28:13,059 --> 00:28:18,759
28 minutes with me here thank you our

00:28:16,899 --> 00:28:22,870
friends from force Asia to make this

00:28:18,759 --> 00:28:23,710
happen every anyone that wants to

00:28:22,870 --> 00:28:27,039
connect with me

00:28:23,710 --> 00:28:30,269
go ahead this is this is my contact let

00:28:27,039 --> 00:28:33,220
me know if you guys suddenly think about

00:28:30,269 --> 00:28:38,759
having coffee and you need some friend

00:28:33,220 --> 00:28:40,980
call me up ring me and we have a

00:28:38,759 --> 00:28:45,360
computation while talking kubernetes

00:28:40,980 --> 00:28:45,360

YouTube URL: https://www.youtube.com/watch?v=gMPe6cXnZSs


