Title: Codifying Infrastructure with Terraform for the Future by Anton Babenko
Publication date: 2019-03-28
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	17 March 2019 11:15, Training Room 2-2

Immutable infrastructure is a way to success, but what about the lifecycle of individual resources. This talk is about the evolution of resources, code structure, Terraform coding tricks, composition, and refactoring.
Captions: 
	00:00:00,060 --> 00:00:06,649
so let's get started I'm excited to talk

00:00:03,810 --> 00:00:10,219
about things which I am already excited

00:00:06,649 --> 00:00:12,870
so it's my second time in force Asia and

00:00:10,219 --> 00:00:16,770
this time I'm gonna to talk about reform

00:00:12,870 --> 00:00:20,310
and the main idea is I want to bring

00:00:16,770 --> 00:00:24,600
some point to people who already use

00:00:20,310 --> 00:00:25,910
therap one so that you maybe write it a

00:00:24,600 --> 00:00:29,189
little bit better

00:00:25,910 --> 00:00:33,329
okay so first of all couple things about

00:00:29,189 --> 00:00:34,380
myself my name is Anton and I live in

00:00:33,329 --> 00:00:38,219
Norway

00:00:34,380 --> 00:00:39,059
I'm originally from Ukraine no way is

00:00:38,219 --> 00:00:41,730
pretty cold

00:00:39,059 --> 00:00:45,079
comparing to Singapore so we have

00:00:41,730 --> 00:00:47,460
several meters of snow right now and

00:00:45,079 --> 00:00:50,610
over the last few years have been

00:00:47,460 --> 00:00:53,449
actively involved in terraform Hasek

00:00:50,610 --> 00:00:57,390
Warp user group activities aww

00:00:53,449 --> 00:01:01,710
DevOps DevOps days oslo organizing and

00:00:57,390 --> 00:01:03,539
so on I enjoy going around different

00:01:01,710 --> 00:01:06,330
countries and speaking in different

00:01:03,539 --> 00:01:10,650
meetups and be involved with terraform

00:01:06,330 --> 00:01:13,320
and data as communities so if you have

00:01:10,650 --> 00:01:16,970
questions about things which I know not

00:01:13,320 --> 00:01:21,840
to present don't hesitate to contact me

00:01:16,970 --> 00:01:23,460
using any of this channels I can just

00:01:21,840 --> 00:01:26,130
say couple words about projects which

00:01:23,460 --> 00:01:30,390
listed here telephone best practices

00:01:26,130 --> 00:01:34,110
something what I started summarizing

00:01:30,390 --> 00:01:36,570
about half year ago and I try to keep it

00:01:34,110 --> 00:01:39,840
up to date with latest things which I

00:01:36,570 --> 00:01:43,649
find in the community and I hope you

00:01:39,840 --> 00:01:46,829
find it interesting also you can always

00:01:43,649 --> 00:01:51,780
reach me on Twitter and github to see

00:01:46,829 --> 00:01:56,009
what I'm up to before I move to the next

00:01:51,780 --> 00:01:58,820
slide let me ask like can any right hand

00:01:56,009 --> 00:02:03,560
if you use therap one on daily basis

00:01:58,820 --> 00:02:06,719
like anyone use their up on daily basis

00:02:03,560 --> 00:02:08,340
nobody excellent because this is really

00:02:06,719 --> 00:02:13,220
advanced topic okay

00:02:08,340 --> 00:02:16,850
so if if you have never used a rough one

00:02:13,220 --> 00:02:18,680
I'm afraid that you will be a little bit

00:02:16,850 --> 00:02:22,510
disappointed because there are a lot of

00:02:18,680 --> 00:02:26,120
codes a lot of terraform and a lot of

00:02:22,510 --> 00:02:27,560
little bit complicated things so as I

00:02:26,120 --> 00:02:29,980
understand no one is used in telephone

00:02:27,560 --> 00:02:35,420
which is pretty unusual but nevertheless

00:02:29,980 --> 00:02:38,560
thanks for coming so Tara formidable as

00:02:35,420 --> 00:02:41,480
modules in the project which I started

00:02:38,560 --> 00:02:44,260
or I actually join it but then I adopted

00:02:41,480 --> 00:02:50,420
it and became main contributor to this

00:02:44,260 --> 00:02:53,120
if from about 2015-16 this is project

00:02:50,420 --> 00:02:55,220
community contributes different

00:02:53,120 --> 00:02:57,860
terraformable as modules in order to

00:02:55,220 --> 00:03:00,080
build reusable blocks like BBC security

00:02:57,860 --> 00:03:04,180
group auto scaling group and so on and

00:03:00,080 --> 00:03:08,330
by the way who is like familiar with AWS

00:03:04,180 --> 00:03:10,010
can you raise hands so okay good good

00:03:08,330 --> 00:03:11,930
yeah it's good because there are a lot

00:03:10,010 --> 00:03:14,240
of words which I don't really want to

00:03:11,930 --> 00:03:16,400
explain like what is RDS what a security

00:03:14,240 --> 00:03:20,300
group and so on because otherwise we

00:03:16,400 --> 00:03:23,690
will never finish okay so this project

00:03:20,300 --> 00:03:27,980
itself is very useful and was downloaded

00:03:23,690 --> 00:03:30,950
more than two million times so far if

00:03:27,980 --> 00:03:33,290
you need to build things like BBC it's

00:03:30,950 --> 00:03:35,420
unlikely that your case is unique so

00:03:33,290 --> 00:03:38,780
don't hesitate to look into those

00:03:35,420 --> 00:03:43,310
building blocks so telephone was started

00:03:38,780 --> 00:03:47,060
in 2014 as to which allows to just write

00:03:43,310 --> 00:03:49,730
plan and manage infrastructure as close

00:03:47,060 --> 00:03:52,130
as code means that this infrastructure

00:03:49,730 --> 00:03:54,920
will be possible to recreate in

00:03:52,130 --> 00:03:56,720
different configurations in let's say

00:03:54,920 --> 00:03:59,420
different account different regions and

00:03:56,720 --> 00:04:02,959
so so this is actually making DevOps

00:03:59,420 --> 00:04:04,670
movement possible telephone

00:04:02,959 --> 00:04:09,650
configuration file usually looks like

00:04:04,670 --> 00:04:13,070
this in this example we have block AWS

00:04:09,650 --> 00:04:15,650
region where we specify variable we have

00:04:13,070 --> 00:04:19,040
couple resources which we want to create

00:04:15,650 --> 00:04:22,460
and after several commands like reform

00:04:19,040 --> 00:04:24,979
init we download some dependencies like

00:04:22,460 --> 00:04:27,000
provider of specified version and then

00:04:24,979 --> 00:04:30,030
we run tariff on apply and it

00:04:27,000 --> 00:04:34,070
actually great resources which we want

00:04:30,030 --> 00:04:37,440
in this case we are create an s3 bucket

00:04:34,070 --> 00:04:39,150
and we can see the last line is that

00:04:37,440 --> 00:04:43,080
this bucket has been successfully

00:04:39,150 --> 00:04:44,220
created you may think why it's or why

00:04:43,080 --> 00:04:46,470
not

00:04:44,220 --> 00:04:48,870
it works CloudFormation or if you are on

00:04:46,470 --> 00:04:52,560
Google why not Google cloud deployment

00:04:48,870 --> 00:04:55,230
manager or if you're even using Azure as

00:04:52,560 --> 00:05:00,240
your resource manager so and the answer

00:04:55,230 --> 00:05:02,040
is that terraform has more than 100

00:05:00,240 --> 00:05:04,580
other providers in addition to this

00:05:02,040 --> 00:05:08,760
which means that it is possible to

00:05:04,580 --> 00:05:12,720
manage very large amount of different

00:05:08,760 --> 00:05:15,030
type of resources it can be your g-suit

00:05:12,720 --> 00:05:17,669
access for example your Dropbox files

00:05:15,030 --> 00:05:20,690
and access new relic metrics data docked

00:05:17,669 --> 00:05:22,950
revisions different type of dashboards

00:05:20,690 --> 00:05:25,580
whatever else you can figure out there

00:05:22,950 --> 00:05:29,880
are enormous amount of providers of

00:05:25,580 --> 00:05:31,940
created by the community so this was

00:05:29,880 --> 00:05:36,210
basic or Tara for now let's get into

00:05:31,940 --> 00:05:39,540
actually looking what telephone is how

00:05:36,210 --> 00:05:41,490
we actually use so let's start with a

00:05:39,540 --> 00:05:43,919
simple example in this example we're

00:05:41,490 --> 00:05:48,740
creating just oops

00:05:43,919 --> 00:05:51,510
just vbc we specify some properties and

00:05:48,740 --> 00:05:54,120
that's it that's all what this example

00:05:51,510 --> 00:05:56,729
is doing then we will figure out that

00:05:54,120 --> 00:05:59,400
our project will grow we'll start adding

00:05:56,729 --> 00:06:01,410
new resources integrate with different

00:05:59,400 --> 00:06:04,350
data sources applied for different

00:06:01,410 --> 00:06:06,300
regions and so on you may think why why

00:06:04,350 --> 00:06:10,020
because we also need to integrate

00:06:06,300 --> 00:06:13,220
without without a provider and in this

00:06:10,020 --> 00:06:15,570
example we add in a SS Internet gateway

00:06:13,220 --> 00:06:19,380
resources because we want to go to the

00:06:15,570 --> 00:06:23,580
Internet and we start to add couple

00:06:19,380 --> 00:06:26,820
subnets and by the time when we actually

00:06:23,580 --> 00:06:29,430
actually I'm going to add other

00:06:26,820 --> 00:06:34,140
resources like not gateways routes

00:06:29,430 --> 00:06:37,470
routing table our network stack for AWS

00:06:34,140 --> 00:06:39,090
will look much much more than just for

00:06:37,470 --> 00:06:40,439
alliance and main TF file will

00:06:39,090 --> 00:06:44,849
eventually grow

00:06:40,439 --> 00:06:46,949
up to 1020 kilobytes and 300 lines of

00:06:44,849 --> 00:06:50,419
code or more and we are talking just

00:06:46,949 --> 00:06:52,860
about Network stack which is basic of

00:06:50,419 --> 00:06:55,069
everything right we are not even talking

00:06:52,860 --> 00:06:57,689
about deploying other sophisticated

00:06:55,069 --> 00:06:59,489
resources like photo scaling group or

00:06:57,689 --> 00:07:02,939
load balancers which are necessary for

00:06:59,489 --> 00:07:05,809
our application so as we can see the

00:07:02,939 --> 00:07:08,339
code size is increasing constantly and

00:07:05,809 --> 00:07:10,849
dependencies between resources I get in

00:07:08,339 --> 00:07:14,969
worse and worse and more complicated and

00:07:10,849 --> 00:07:17,519
natural in a solution which is which has

00:07:14,969 --> 00:07:19,319
been designed for terraform is called

00:07:17,519 --> 00:07:22,379
tariffs or modules so there are four

00:07:19,319 --> 00:07:24,360
modules is self-contained package of

00:07:22,379 --> 00:07:27,449
telecom configuration which is managed

00:07:24,360 --> 00:07:30,539
as a group there are few types of

00:07:27,449 --> 00:07:33,509
tariffs or modules the first one which

00:07:30,539 --> 00:07:36,419
is resource module yeah it is a great

00:07:33,509 --> 00:07:40,739
example of something what can be open

00:07:36,419 --> 00:07:42,539
sourced and it has no logic building

00:07:40,739 --> 00:07:45,679
inside of it other than just creating

00:07:42,539 --> 00:07:48,300
resource in very flexible configuration

00:07:45,679 --> 00:07:52,189
this is an example of security group

00:07:48,300 --> 00:07:55,289
module which is just fetched from

00:07:52,189 --> 00:07:58,889
specified endpoints in this case it is

00:07:55,289 --> 00:08:02,219
perform registry and we specify which

00:07:58,889 --> 00:08:04,499
version of this module we want and we

00:08:02,219 --> 00:08:07,529
specify different arguments which wants

00:08:04,499 --> 00:08:11,369
a pass into this module so the reason

00:08:07,529 --> 00:08:14,099
why resource module is necessary is it

00:08:11,369 --> 00:08:17,129
is possible to version it as as a whole

00:08:14,099 --> 00:08:19,550
while individual resources cannot be

00:08:17,129 --> 00:08:22,649
managed can not be versatile George

00:08:19,550 --> 00:08:24,749
let's look into real example of security

00:08:22,649 --> 00:08:27,179
group module this is piece of code of

00:08:24,749 --> 00:08:29,759
security group module which may seem

00:08:27,179 --> 00:08:32,789
very complicated but in fact all it does

00:08:29,759 --> 00:08:36,209
in just creation of security group but

00:08:32,789 --> 00:08:40,229
in enormous amount of configuration for

00:08:36,209 --> 00:08:46,529
example ipv4 ipv6 self-references

00:08:40,229 --> 00:08:49,319
computed values and so on draw about why

00:08:46,529 --> 00:08:51,509
five or six hundred lines in order to

00:08:49,319 --> 00:08:52,850
create just security groups you may

00:08:51,509 --> 00:08:56,180
think that

00:08:52,850 --> 00:08:58,820
you will not need this kind of situation

00:08:56,180 --> 00:09:01,580
like why why to make it so complicated

00:08:58,820 --> 00:09:04,220
and the answer is that if you are

00:09:01,580 --> 00:09:07,760
working with syrup one you may know that

00:09:04,220 --> 00:09:11,180
it's not possible to specify MC values

00:09:07,760 --> 00:09:13,130
in some in some arguments so that's why

00:09:11,180 --> 00:09:16,040
you need to figure out all possible

00:09:13,130 --> 00:09:19,960
permutation which will work for your

00:09:16,040 --> 00:09:23,030
case in this case for security group

00:09:19,960 --> 00:09:26,660
there are a lot of situations when you

00:09:23,030 --> 00:09:29,300
cannot specify on one rule both ipv4 and

00:09:26,660 --> 00:09:35,300
ipv6 so you have to make two resources

00:09:29,300 --> 00:09:37,610
differently right another type of Moodle

00:09:35,300 --> 00:09:40,100
is called infrastructure module which is

00:09:37,610 --> 00:09:42,950
essentially a composition of resource

00:09:40,100 --> 00:09:46,010
modules it's good place for your company

00:09:42,950 --> 00:09:50,270
to introduce different naming standards

00:09:46,010 --> 00:09:52,190
tagging or enforce some things which you

00:09:50,270 --> 00:09:54,590
don't want to be customized by

00:09:52,190 --> 00:09:56,600
developers or by users of your modules

00:09:54,590 --> 00:09:59,840
inside of your organization for example

00:09:56,600 --> 00:10:01,910
you want to make module which is

00:09:59,840 --> 00:10:04,960
available across the whole organization

00:10:01,910 --> 00:10:07,520
where people are not able to turn off

00:10:04,960 --> 00:10:09,410
encryption so it doesn't matter if they

00:10:07,520 --> 00:10:11,870
want it or not but there is no way for

00:10:09,410 --> 00:10:13,910
them to turn it off that's why you have

00:10:11,870 --> 00:10:17,600
to make an infrastructure module where

00:10:13,910 --> 00:10:20,690
encryption is always true it is also a

00:10:17,600 --> 00:10:24,110
good way to fulfill missing missing bits

00:10:20,690 --> 00:10:27,260
of terraform like you may use different

00:10:24,110 --> 00:10:29,750
tools to generate parts of your code

00:10:27,260 --> 00:10:33,410
using JSON and cookie cutter or other

00:10:29,750 --> 00:10:35,330
type of pre-processors infrastructure

00:10:33,410 --> 00:10:37,850
modules invocation looks pretty similar

00:10:35,330 --> 00:10:40,040
you specify source of the module in

00:10:37,850 --> 00:10:42,340
specified bunch of different arguments

00:10:40,040 --> 00:10:44,870
which you want to pass to the module

00:10:42,340 --> 00:10:46,810
inside of the module itself you are

00:10:44,870 --> 00:10:50,870
invoking different resource modules

00:10:46,810 --> 00:10:53,680
that's the main difference between the

00:10:50,870 --> 00:10:56,780
resource module and infrastructure model

00:10:53,680 --> 00:11:01,030
so as a small summary there are two

00:10:56,780 --> 00:11:03,950
types of modules which I want to keep as

00:11:01,030 --> 00:11:06,050
separated as possible while a lot of

00:11:03,950 --> 00:11:09,870
people don't feel this

00:11:06,050 --> 00:11:13,830
separation is necessary resource modules

00:11:09,870 --> 00:11:16,470
are those which are maintained on Terra

00:11:13,830 --> 00:11:18,540
Firma SS modules github organization and

00:11:16,470 --> 00:11:20,640
infrastructure Moodle is something what

00:11:18,540 --> 00:11:25,080
usually people have inside of the

00:11:20,640 --> 00:11:28,080
organization's or the specific needs was

00:11:25,080 --> 00:11:30,930
it clear so far good because we're

00:11:28,080 --> 00:11:33,510
getting deep and deep right so let's

00:11:30,930 --> 00:11:35,010
look into how to write more noise okay

00:11:33,510 --> 00:11:37,410
and then we'll look how to call them and

00:11:35,010 --> 00:11:39,780
some tips on how to actually use therap

00:11:37,410 --> 00:11:42,420
one so the first tip which i want to

00:11:39,780 --> 00:11:45,180
give about writing resource module is to

00:11:42,420 --> 00:11:49,020
not write them really go to registry

00:11:45,180 --> 00:11:52,650
telephone registry which is official

00:11:49,020 --> 00:11:59,220
place where you can download and see

00:11:52,650 --> 00:12:00,690
source code of about 650 AWS modules for

00:11:59,220 --> 00:12:02,490
example and there are lots of other

00:12:00,690 --> 00:12:06,260
modules for other providers like Google

00:12:02,490 --> 00:12:10,370
asier and so on it's maintained or

00:12:06,260 --> 00:12:13,980
community can upload their stuff and

00:12:10,370 --> 00:12:16,500
some of those modules are used by many

00:12:13,980 --> 00:12:18,360
many people some of them are pretty bad

00:12:16,500 --> 00:12:22,560
quality so you will have to find

00:12:18,360 --> 00:12:25,560
something but anyway it's usually a very

00:12:22,560 --> 00:12:27,420
good place to look into and start don't

00:12:25,560 --> 00:12:29,340
go to documentation and start writing it

00:12:27,420 --> 00:12:32,610
because you think that your case is so

00:12:29,340 --> 00:12:35,520
unique most likely not like if you

00:12:32,610 --> 00:12:38,520
decided to write a great resource module

00:12:35,520 --> 00:12:40,860
try to always hide implementation

00:12:38,520 --> 00:12:43,110
details from your users you don't have

00:12:40,860 --> 00:12:46,320
to be expert in specific implementation

00:12:43,110 --> 00:12:51,510
of RDS for example but they just want to

00:12:46,320 --> 00:12:54,210
specify the big ones let's say mssql or

00:12:51,510 --> 00:12:57,050
my sequencing and then you inside of the

00:12:54,210 --> 00:12:59,640
module actually figure out what kind of

00:12:57,050 --> 00:13:02,340
arguments each of these resource may

00:12:59,640 --> 00:13:06,240
have for example in this code we're

00:13:02,340 --> 00:13:09,390
creating a massive scale if if it was

00:13:06,240 --> 00:13:12,690
requested or my sequel or Postgres in

00:13:09,390 --> 00:13:15,270
other cases and as you can see if line

00:13:12,690 --> 00:13:18,420
fourteenth's as a time zone can be

00:13:15,270 --> 00:13:19,600
specified for a mesosphere only while

00:13:18,420 --> 00:13:22,600
it's not possible to

00:13:19,600 --> 00:13:25,060
expired for other resources like my

00:13:22,600 --> 00:13:26,709
sequel and postilions which is one of

00:13:25,060 --> 00:13:30,310
type of details which you don't want

00:13:26,709 --> 00:13:33,970
your users to be experts in so hide it

00:13:30,310 --> 00:13:38,980
away from them and output just feels not

00:13:33,970 --> 00:13:40,899
empty database address which you have so

00:13:38,980 --> 00:13:45,880
in this case it can be either ms SQL

00:13:40,899 --> 00:13:49,149
address or any other end user also if

00:13:45,880 --> 00:13:52,620
you work with if you host your

00:13:49,149 --> 00:13:55,449
infrastructure modules in one big

00:13:52,620 --> 00:13:57,730
repository inside of your organization

00:13:55,449 --> 00:13:59,740
and you call this module of multiple

00:13:57,730 --> 00:14:03,490
times for example if you want to create

00:13:59,740 --> 00:14:05,709
I am users and you have a lot of other

00:14:03,490 --> 00:14:09,100
infrastructure modules in one

00:14:05,709 --> 00:14:11,050
organization or in one repository it

00:14:09,100 --> 00:14:14,190
will have to be downloaded multiple

00:14:11,050 --> 00:14:18,250
times so what it means telephone will

00:14:14,190 --> 00:14:21,699
download the whole the whole repository

00:14:18,250 --> 00:14:24,220
and it will just change the directory to

00:14:21,699 --> 00:14:28,480
the place where you want it to be so if

00:14:24,220 --> 00:14:30,850
you are making let's say hundreds of I

00:14:28,480 --> 00:14:32,290
am user you will have to clone the

00:14:30,850 --> 00:14:34,810
repository hundreds of times

00:14:32,290 --> 00:14:38,519
and use just more subset of the story

00:14:34,810 --> 00:14:41,680
which is wasting of time and traffic

00:14:38,519 --> 00:14:44,050
there are few solutions one is to use a

00:14:41,680 --> 00:14:47,050
project like MBT where you can build

00:14:44,050 --> 00:14:53,620
just small artifact for each version

00:14:47,050 --> 00:14:57,399
module and use that one couple things to

00:14:53,620 --> 00:15:01,389
avoid inside models so this is something

00:14:57,399 --> 00:15:03,040
what I want you to look into and tell

00:15:01,389 --> 00:15:08,230
what you think is wrong here other than

00:15:03,040 --> 00:15:11,139
hard code is value of region so I can

00:15:08,230 --> 00:15:18,250
give you a hint a problem is not on line

00:15:11,139 --> 00:15:23,319
one two three or five so which line has

00:15:18,250 --> 00:15:26,019
problem yes exactly and what kind of

00:15:23,319 --> 00:15:29,740
problem is there I'm talking about

00:15:26,019 --> 00:15:32,150
what's wrong with this block in general

00:15:29,740 --> 00:15:38,300
and why it is wrong

00:15:32,150 --> 00:15:41,150
or the module exactly so the answer is

00:15:38,300 --> 00:15:43,580
that if we have different users who want

00:15:41,150 --> 00:15:47,020
to access or who want to configure

00:15:43,580 --> 00:15:49,810
access to a SS provider differently like

00:15:47,020 --> 00:15:53,120
first guy wants to use default

00:15:49,810 --> 00:15:55,310
configuration in order to access a SS

00:15:53,120 --> 00:15:57,680
and not a guy wants to use shared

00:15:55,310 --> 00:16:01,670
credential files they will not be able

00:15:57,680 --> 00:16:04,990
to use your block because you expect

00:16:01,670 --> 00:16:06,920
they will use assumed role in fact no

00:16:04,990 --> 00:16:09,050
they will not use it

00:16:06,920 --> 00:16:12,530
some of them will use environment

00:16:09,050 --> 00:16:15,650
variables which are certain the machine

00:16:12,530 --> 00:16:18,220
and some will use shared national so the

00:16:15,650 --> 00:16:22,880
solution for that one is to not put

00:16:18,220 --> 00:16:25,910
provider block at all in the module and

00:16:22,880 --> 00:16:29,690
second one is provision which is very

00:16:25,910 --> 00:16:32,720
often bad idea in this example we call

00:16:29,690 --> 00:16:38,600
in local exact provision or after V PC

00:16:32,720 --> 00:16:41,540
is created and this block itself is bad

00:16:38,600 --> 00:16:44,390
idea it's actually bad for it whereas

00:16:41,540 --> 00:16:48,980
instance so let me explain why it is

00:16:44,390 --> 00:16:50,930
that for instance you first of all let

00:16:48,980 --> 00:16:53,180
me explain why you think or you may

00:16:50,930 --> 00:16:54,890
think this is good idea because a

00:16:53,180 --> 00:16:57,350
diverse instance will be created and

00:16:54,890 --> 00:16:59,480
then provision or local exactly will be

00:16:57,350 --> 00:17:01,700
executed on your machine so you will

00:16:59,480 --> 00:17:03,980
call ansible playbook you will connect

00:17:01,700 --> 00:17:05,720
to this newly created instance and you

00:17:03,980 --> 00:17:08,180
will do whatever is necessary

00:17:05,720 --> 00:17:11,540
there will be situation quite soon when

00:17:08,180 --> 00:17:14,480
this body this block provision or local

00:17:11,540 --> 00:17:18,070
exactly is not possible to use on launch

00:17:14,480 --> 00:17:21,620
configuration so this means that if you

00:17:18,070 --> 00:17:24,920
start using AWS instance and you put a

00:17:21,620 --> 00:17:28,040
lot of provision or plan you cannot use

00:17:24,920 --> 00:17:29,660
them on launch configuration because the

00:17:28,040 --> 00:17:32,150
regular employee for launch

00:17:29,660 --> 00:17:34,280
configuration is not creation of

00:17:32,150 --> 00:17:38,060
Munchkin rewriting itself it's creation

00:17:34,280 --> 00:17:40,640
of resources which during auto-scaling

00:17:38,060 --> 00:17:43,550
activity so in AWS

00:17:40,640 --> 00:17:46,070
user date has been introduced in other

00:17:43,550 --> 00:17:50,930
providers there is some sort of play

00:17:46,070 --> 00:17:55,490
ploud leniency yeah yeah this code shows

00:17:50,930 --> 00:17:58,310
that this user date will be cold on the

00:17:55,490 --> 00:18:00,920
instance only when instances started

00:17:58,310 --> 00:18:04,190
from the instance itself so it means

00:18:00,920 --> 00:18:06,590
that operator who actually run terraform

00:18:04,190 --> 00:18:08,870
apply it can be CI or it can be

00:18:06,590 --> 00:18:13,190
individual users they don't have to have

00:18:08,870 --> 00:18:17,510
physical access and always be online in

00:18:13,190 --> 00:18:20,000
order to execute this it means that code

00:18:17,510 --> 00:18:22,910
is already separated from me triggering

00:18:20,000 --> 00:18:26,390
something and go in a way from actually

00:18:22,910 --> 00:18:29,360
running and single able if you need to

00:18:26,390 --> 00:18:31,700
have execution of provision or let's say

00:18:29,360 --> 00:18:33,830
when something is done you can assign

00:18:31,700 --> 00:18:36,050
this provision or to move resource no

00:18:33,830 --> 00:18:38,690
resource is special type of resource in

00:18:36,050 --> 00:18:41,330
telephone which is actually just new

00:18:38,690 --> 00:18:44,230
it's not real resource resource it's not

00:18:41,330 --> 00:18:50,060
physical resource in this code will be

00:18:44,230 --> 00:18:53,690
executing AWS CLI when vbc resource is

00:18:50,060 --> 00:18:58,130
created this pattern is very common if

00:18:53,690 --> 00:19:01,250
you need to connect some if you need to

00:18:58,130 --> 00:19:03,260
actually call from CLI to let's say

00:19:01,250 --> 00:19:09,010
admission functionality which is not

00:19:03,260 --> 00:19:12,740
implemented in teleport there are few

00:19:09,010 --> 00:19:15,560
few traits of good terraform Oriels the

00:19:12,740 --> 00:19:17,990
way i see first of all it's very

00:19:15,560 --> 00:19:20,660
important that telephone noodles are

00:19:17,990 --> 00:19:25,040
actually documented and contain a lot of

00:19:20,660 --> 00:19:27,410
examples which people can excuse so if

00:19:25,040 --> 00:19:29,510
module is also appreciated each which

00:19:27,410 --> 00:19:32,300
means that it supports not just your

00:19:29,510 --> 00:19:36,940
specific edge case or your specific

00:19:32,300 --> 00:19:40,250
problem but also wide wide range of

00:19:36,940 --> 00:19:41,600
similar situations it's much better it

00:19:40,250 --> 00:19:45,980
means that people will most likely use

00:19:41,600 --> 00:19:48,440
it I also don't try to put defaults

00:19:45,980 --> 00:19:51,500
which are specific for your particular

00:19:48,440 --> 00:19:54,710
setup so don't care code names numbers

00:19:51,500 --> 00:19:59,810
range like that make it obviously for

00:19:54,710 --> 00:20:02,120
people to require this and also if your

00:19:59,810 --> 00:20:04,370
resource is about creation let's say

00:20:02,120 --> 00:20:07,370
security group don't try to make it

00:20:04,370 --> 00:20:09,230
trade security group and also some I am

00:20:07,370 --> 00:20:11,780
permission it's very seldom when you

00:20:09,230 --> 00:20:14,090
need to combine these things together so

00:20:11,780 --> 00:20:18,440
always make them as small as granular as

00:20:14,090 --> 00:20:20,780
possible and I put test on the last step

00:20:18,440 --> 00:20:23,630
here just because I don't believe the

00:20:20,780 --> 00:20:26,210
testing of resource module is actually

00:20:23,630 --> 00:20:28,280
meaningful because a lot of situations

00:20:26,210 --> 00:20:30,470
you will see that it works on my machine

00:20:28,280 --> 00:20:33,500
but doesn't work on your account your

00:20:30,470 --> 00:20:35,950
machine on your region and so on so I

00:20:33,500 --> 00:20:38,600
don't believe so much in testing as

00:20:35,950 --> 00:20:41,360
being actually show and how it's

00:20:38,600 --> 00:20:48,110
supposed to be used and you can read

00:20:41,360 --> 00:20:51,560
more about this on this URL so small

00:20:48,110 --> 00:20:53,750
summary we figure out that it's better

00:20:51,560 --> 00:20:56,240
to know because there are a lot of them

00:20:53,750 --> 00:20:58,730
in the registry and try to avoid

00:20:56,240 --> 00:21:02,120
providers in provision or s most likely

00:20:58,730 --> 00:21:05,960
you don't need them at all and if you

00:21:02,120 --> 00:21:09,230
try to try to not put them in the module

00:21:05,960 --> 00:21:12,130
you have your life much much easier when

00:21:09,230 --> 00:21:17,230
it comes to usability of these pieces so

00:21:12,130 --> 00:21:20,480
let's look into how to call modules so

00:21:17,230 --> 00:21:22,700
first of all as we can see that over

00:21:20,480 --> 00:21:24,410
time amount of resources and the amount

00:21:22,700 --> 00:21:26,660
of different moving parts is just

00:21:24,410 --> 00:21:29,120
increasing and we start to think how to

00:21:26,660 --> 00:21:30,860
organize code and how to work straight

00:21:29,120 --> 00:21:34,220
different invocation of the terraform

00:21:30,860 --> 00:21:38,800
code there are two patterns the first

00:21:34,220 --> 00:21:44,020
one is all in one is where you have few

00:21:38,800 --> 00:21:46,580
files like main TF when you involve

00:21:44,020 --> 00:21:50,710
different infrastructure or resource

00:21:46,580 --> 00:21:53,690
modules to create different to create

00:21:50,710 --> 00:21:57,140
infrastructure you want so the bad part

00:21:53,690 --> 00:22:00,590
there is it obviously has effect on

00:21:57,140 --> 00:22:04,700
everything so the scope and blast radius

00:22:00,590 --> 00:22:07,910
is large and you will figure out that

00:22:04,700 --> 00:22:10,640
it's getting pretty hard if you are

00:22:07,910 --> 00:22:12,680
working on large amount of resources so

00:22:10,640 --> 00:22:13,790
in reality it means that you will have

00:22:12,680 --> 00:22:15,560
to wait

00:22:13,790 --> 00:22:19,280
every time when you run tariffs on plan

00:22:15,560 --> 00:22:22,310
for meanings to 510 it depends of your

00:22:19,280 --> 00:22:23,990
size of the infrastructure so the best

00:22:22,310 --> 00:22:25,760
in the good part here is that you

00:22:23,990 --> 00:22:30,020
actually have to declare variables in

00:22:25,760 --> 00:22:33,740
few place and another pattern which is

00:22:30,020 --> 00:22:37,250
on another side is one on one when you

00:22:33,740 --> 00:22:44,930
have much smaller less radius and you

00:22:37,250 --> 00:22:47,030
have to you have to describe separate in

00:22:44,930 --> 00:22:51,020
infrastructure model or resource module

00:22:47,030 --> 00:22:54,470
as independent as possible the good part

00:22:51,020 --> 00:22:58,040
here is that you will be able to reduce

00:22:54,470 --> 00:23:00,530
less radios to just necessary things as

00:22:58,040 --> 00:23:02,930
in this example it's also important to

00:23:00,530 --> 00:23:06,530
realize it you're going to work in these

00:23:02,930 --> 00:23:09,140
places quite different so your VP C is

00:23:06,530 --> 00:23:11,930
not to be changing every day every hour

00:23:09,140 --> 00:23:14,830
while your application can change

00:23:11,930 --> 00:23:18,050
actually quite often by developers and

00:23:14,830 --> 00:23:22,010
by separating this you will have

00:23:18,050 --> 00:23:25,010
guaranteed that your you're not going to

00:23:22,010 --> 00:23:27,050
destroy something shared like VP see if

00:23:25,010 --> 00:23:32,780
you have touched an application and so

00:23:27,050 --> 00:23:37,610
on so I'd like to see hands if you are

00:23:32,780 --> 00:23:40,070
using telephone how do you structure or

00:23:37,610 --> 00:23:42,320
how do you group your code so on one

00:23:40,070 --> 00:23:44,900
hand you have all-in-one does anyone use

00:23:42,320 --> 00:23:49,310
all-in-one where you have main TF file

00:23:44,900 --> 00:23:52,820
and you put a person there nobody cool

00:23:49,310 --> 00:23:57,140
and one in one who feel that this is

00:23:52,820 --> 00:23:58,790
like better no no okay I can tell you

00:23:57,140 --> 00:24:01,880
that the most frequent answer among

00:23:58,790 --> 00:24:03,740
people who use terraform is it's

00:24:01,880 --> 00:24:08,030
somewhere in between it's very seldom

00:24:03,740 --> 00:24:11,360
when you need to to stick to one of

00:24:08,030 --> 00:24:14,660
these because it's just unlikely that

00:24:11,360 --> 00:24:16,130
you will be like starting your day and

00:24:14,660 --> 00:24:18,770
thinking like all today I'm going to

00:24:16,130 --> 00:24:22,040
make everything perfect from day one no

00:24:18,770 --> 00:24:23,780
it's not going to be this day so you

00:24:22,040 --> 00:24:27,140
know the type of question which I'd like

00:24:23,780 --> 00:24:27,539
to emphasize is there are different ways

00:24:27,140 --> 00:24:30,570
and

00:24:27,539 --> 00:24:34,859
our greens different tools will actually

00:24:30,570 --> 00:24:37,830
orchestrate invocation of this beat one

00:24:34,859 --> 00:24:40,320
way is if you have all in one where you

00:24:37,830 --> 00:24:44,779
have invocation of multiple moodle's you

00:24:40,320 --> 00:24:47,580
may use - target and specify each module

00:24:44,779 --> 00:24:52,679
separately or you can use make file me

00:24:47,580 --> 00:24:55,379
to invoke it to change this invocation

00:24:52,679 --> 00:24:58,139
let's say create BBC first and recreate

00:24:55,379 --> 00:24:59,909
instances and so on - you have to call

00:24:58,139 --> 00:25:03,509
tariffs on apply in different

00:24:59,909 --> 00:25:05,960
directories and in terraform some people

00:25:03,509 --> 00:25:09,690
may think that this is good way to do

00:25:05,960 --> 00:25:11,580
this is not good way to do that's not

00:25:09,690 --> 00:25:14,129
really good way to do don't try it at

00:25:11,580 --> 00:25:16,379
home while you can falter reform from

00:25:14,129 --> 00:25:20,879
terraform it was not designed to do that

00:25:16,379 --> 00:25:24,299
and I saw some people struggling and

00:25:20,879 --> 00:25:26,460
thinking this is not a joke so when I

00:25:24,299 --> 00:25:30,989
when I show this slide and some people

00:25:26,460 --> 00:25:35,580
take photo I remember their face and one

00:25:30,989 --> 00:25:38,639
kitten so don't try to do this at home

00:25:35,580 --> 00:25:43,229
telephone calling from terraform is not

00:25:38,639 --> 00:25:45,869
good idea in telephone LaGrant is a tool

00:25:43,229 --> 00:25:49,950
which allows to orchestrate invocation

00:25:45,869 --> 00:25:52,919
of infrastructure modules as in this

00:25:49,950 --> 00:25:57,149
example this is Tara grant the grant is

00:25:52,919 --> 00:25:59,999
to to invoke so telegram configuration

00:25:57,149 --> 00:26:04,700
file which like this where we specify

00:25:59,999 --> 00:26:07,710
from which source we want you to get

00:26:04,700 --> 00:26:09,570
like which module we want to get and

00:26:07,710 --> 00:26:11,220
what kind of dependence is this module

00:26:09,570 --> 00:26:15,960
have in this case we are talking about

00:26:11,220 --> 00:26:20,099
ec2 instance which obviously require

00:26:15,960 --> 00:26:24,720
network to be present before and we also

00:26:20,099 --> 00:26:29,009
need to pass arguments to this module so

00:26:24,720 --> 00:26:30,960
in essence that all what is telegram so

00:26:29,009 --> 00:26:34,019
you have just one configuration file

00:26:30,960 --> 00:26:37,379
which describe which module you need to

00:26:34,019 --> 00:26:39,669
use what it depends to and what are

00:26:37,379 --> 00:26:42,409
different arguments are

00:26:39,669 --> 00:26:44,389
unfortunately if force does not contain

00:26:42,409 --> 00:26:48,500
dynamic values which means that you will

00:26:44,389 --> 00:26:50,720
have to somehow provide subnet ID which

00:26:48,500 --> 00:26:54,309
you fetch from network module and put it

00:26:50,720 --> 00:27:01,070
here hard-coded which is pretty bad idea

00:26:54,309 --> 00:27:04,190
so I fix it using small hook it is very

00:27:01,070 --> 00:27:06,379
like logical way to do things in

00:27:04,190 --> 00:27:08,480
Peregrine's because there are ways to

00:27:06,379 --> 00:27:11,120
execute before and after routes on

00:27:08,480 --> 00:27:13,370
different comments so I wrote small

00:27:11,120 --> 00:27:17,529
shell script which is just doing set

00:27:13,370 --> 00:27:20,720
operation and replace these values oh

00:27:17,529 --> 00:27:26,419
you can use modal's TF which I will talk

00:27:20,720 --> 00:27:29,779
little bit later if I have time so right

00:27:26,419 --> 00:27:32,960
now we look into how to call modules I

00:27:29,779 --> 00:27:35,120
can tell you that one in one it works

00:27:32,960 --> 00:27:38,570
much better over time so if you are

00:27:35,120 --> 00:27:41,360
hesitant about where to start will start

00:27:38,570 --> 00:27:43,600
to increase your code in one file or in

00:27:41,360 --> 00:27:46,639
one directory and your terraform

00:27:43,600 --> 00:27:50,029
configuration is about 10 kilobytes then

00:27:46,639 --> 00:27:52,789
you definitely do so try to split it a

00:27:50,029 --> 00:27:57,799
little bit you will see benefit in

00:27:52,789 --> 00:27:59,929
productivity more efficient form so if

00:27:57,799 --> 00:28:03,110
we yeah now let's look how to work with

00:27:59,929 --> 00:28:05,990
code so when we have a requirement to

00:28:03,110 --> 00:28:08,480
add new features to our infrastructure

00:28:05,990 --> 00:28:12,590
it's usually easy but sometimes it makes

00:28:08,480 --> 00:28:15,710
sense to create new resources or use

00:28:12,590 --> 00:28:17,600
existing resources condition and so for

00:28:15,710 --> 00:28:19,789
example if we want to make reusable

00:28:17,600 --> 00:28:23,720
infrastructure Moodle where we get

00:28:19,789 --> 00:28:25,700
information about VP CID if it was

00:28:23,720 --> 00:28:30,019
present if it was not present then we

00:28:25,700 --> 00:28:31,820
created in this case we are using data

00:28:30,019 --> 00:28:36,740
source to find information about

00:28:31,820 --> 00:28:40,340
existing VB CID or we create the one if

00:28:36,740 --> 00:28:46,279
it was not specified and we output just

00:28:40,340 --> 00:28:50,090
an EPC ID back to the user working with

00:28:46,279 --> 00:28:54,340
lists in telephone 0 11 is not so easy

00:28:50,090 --> 00:28:57,970
because they always have

00:28:54,340 --> 00:29:01,900
have index so in this case user list of

00:28:57,970 --> 00:29:05,350
ssh public keys user 1 2 3 & 4

00:29:01,900 --> 00:29:08,620
has has index like each element has

00:29:05,350 --> 00:29:14,350
index which means that user 1 is like 0

00:29:08,620 --> 00:29:16,150
1 2 3 and if we want to delete user 3 it

00:29:14,350 --> 00:29:19,929
means that user for who is going off

00:29:16,150 --> 00:29:23,080
will have to be deleted and recreate so

00:29:19,929 --> 00:29:27,100
for information like for resources which

00:29:23,080 --> 00:29:29,350
like files it's probably okay because we

00:29:27,100 --> 00:29:32,500
can delete last element and will

00:29:29,350 --> 00:29:34,630
recreate it's totally fine for things

00:29:32,500 --> 00:29:39,760
like public keys where we delete it and

00:29:34,630 --> 00:29:42,190
we created again while for stateful list

00:29:39,760 --> 00:29:45,400
for example is an example of stateful

00:29:42,190 --> 00:29:48,820
resource is a SS I am accessing seeker

00:29:45,400 --> 00:29:52,510
keys which which we simply cannot allow

00:29:48,820 --> 00:29:55,090
to be recreated every time because every

00:29:52,510 --> 00:29:57,460
time we'll have new access and secret

00:29:55,090 --> 00:30:00,790
key for the user and that's not

00:29:57,460 --> 00:30:04,720
acceptable in most of cases if we're

00:30:00,790 --> 00:30:07,750
user whose name is started with left z

00:30:04,720 --> 00:30:11,049
we'll have new access and secret key

00:30:07,750 --> 00:30:14,290
every time when me because my name

00:30:11,049 --> 00:30:16,990
starts with a will leave the company for

00:30:14,290 --> 00:30:19,780
easily it's simply not acceptable

00:30:16,990 --> 00:30:23,340
so there are solutions like involving

00:30:19,780 --> 00:30:26,860
jason that in order to generate

00:30:23,340 --> 00:30:31,030
templates so this is an example of JSON

00:30:26,860 --> 00:30:34,929
that template jason that is language by

00:30:31,030 --> 00:30:40,080
Google which generate JSON from data

00:30:34,929 --> 00:30:43,990
structure like just like plain J's list

00:30:40,080 --> 00:30:46,960
so this will produce JSON out and Torah

00:30:43,990 --> 00:30:49,360
for natively works with both HDL which

00:30:46,960 --> 00:30:53,169
is logic or configuration language and

00:30:49,360 --> 00:30:59,530
Jason so this piece of code will produce

00:30:53,169 --> 00:31:02,950
a valid map of modules and outputs which

00:30:59,530 --> 00:31:05,740
will be treated by terraform natively

00:31:02,950 --> 00:31:07,149
and Patera form it will be absolutely

00:31:05,740 --> 00:31:10,419
fine to

00:31:07,149 --> 00:31:14,200
telescope so let's look how to invoke

00:31:10,419 --> 00:31:16,899
this first if we call Jason that and we

00:31:14,200 --> 00:31:20,379
specify which template we want the

00:31:16,899 --> 00:31:26,409
output of produced file will look like

00:31:20,379 --> 00:31:30,039
map of map of maps in this case we are

00:31:26,409 --> 00:31:32,649
calling specific I am module and we pass

00:31:30,039 --> 00:31:34,450
different arguments to this module and

00:31:32,649 --> 00:31:36,429
then we'll later execute error form in

00:31:34,450 --> 00:31:39,580
each interrupt on a flight to get this

00:31:36,429 --> 00:31:44,049
infrastructure this user has created the

00:31:39,580 --> 00:31:47,259
benefit here is that if somebody will be

00:31:44,049 --> 00:31:52,389
removed from the original Jason Jason

00:31:47,259 --> 00:31:55,179
input file the new code will be

00:31:52,389 --> 00:32:00,039
generated only this user will be removed

00:31:55,179 --> 00:32:04,629
nobody else will be touched another way

00:32:00,039 --> 00:32:07,539
is to integrate so if we if we have

00:32:04,629 --> 00:32:10,089
created some resources and we want other

00:32:07,539 --> 00:32:13,440
machine or other script or even other

00:32:10,089 --> 00:32:17,049
human to be able to get the entire

00:32:13,440 --> 00:32:19,089
comment which can be executed we can

00:32:17,049 --> 00:32:21,669
output the attack humans and use just

00:32:19,089 --> 00:32:24,969
reference as in this case Web

00:32:21,669 --> 00:32:30,489
Application Firewall a CL and then we

00:32:24,969 --> 00:32:33,070
can execute it in shell like this if we

00:32:30,489 --> 00:32:36,159
want to execute some of these comments

00:32:33,070 --> 00:32:39,669
automatically every time when something

00:32:36,159 --> 00:32:42,489
has changed we can just use new resource

00:32:39,669 --> 00:32:46,389
and local exact provider again we don't

00:32:42,489 --> 00:32:48,519
need to use resource a SS firewall and

00:32:46,389 --> 00:32:52,179
provision are there because we have to

00:32:48,519 --> 00:32:54,249
use no reason for that there are many

00:32:52,179 --> 00:32:56,950
different age cases when it comes to

00:32:54,249 --> 00:32:59,080
testing it works on my machine it works

00:32:56,950 --> 00:33:02,249
with my account in my project my setup

00:32:59,080 --> 00:33:03,659
because there are lots of different

00:33:02,249 --> 00:33:06,669
configuration

00:33:03,659 --> 00:33:08,279
things like a Tobias region can be

00:33:06,669 --> 00:33:11,379
different we are not even talking about

00:33:08,279 --> 00:33:15,669
your cloud or China which are always

00:33:11,379 --> 00:33:17,399
behind and have very different different

00:33:15,669 --> 00:33:19,530
features available at any point of time

00:33:17,399 --> 00:33:21,540
but also public

00:33:19,530 --> 00:33:24,630
available regions in AWS have very

00:33:21,540 --> 00:33:28,920
different feature set like easy to

00:33:24,630 --> 00:33:31,200
classic link or ipv6 availability means

00:33:28,920 --> 00:33:33,410
that it can work in one account for one

00:33:31,200 --> 00:33:36,780
user but will not work for another one

00:33:33,410 --> 00:33:39,540
also so cleaners is very often problem

00:33:36,780 --> 00:33:42,240
that certain type of instances or

00:33:39,540 --> 00:33:44,850
certain type of IP addresses are not

00:33:42,240 --> 00:33:47,280
available in my account but it can be

00:33:44,850 --> 00:33:51,780
available in other comes this means that

00:33:47,280 --> 00:33:53,820
testing anything else like any kind of

00:33:51,780 --> 00:33:56,250
infrastructure in development or in test

00:33:53,820 --> 00:33:58,800
environment usually has almost no sense

00:33:56,250 --> 00:34:00,900
unless you tested in production account

00:33:58,800 --> 00:34:06,240
with production settings close to

00:34:00,900 --> 00:34:09,450
production as possible so things to

00:34:06,240 --> 00:34:11,370
avoid in terraform we have a little yeah

00:34:09,450 --> 00:34:15,090
we have probably a little bits time so

00:34:11,370 --> 00:34:17,730
I'm a little bit hard but she'll be fine

00:34:15,090 --> 00:34:19,560
inside so if you have any arguments

00:34:17,730 --> 00:34:21,960
which you think it's good idea to

00:34:19,560 --> 00:34:26,790
specify in say light and you always

00:34:21,960 --> 00:34:29,580
remember all of this - bar or - the

00:34:26,790 --> 00:34:32,190
sequence of them usually it makes much

00:34:29,580 --> 00:34:35,370
more sense to put all of them into Tia

00:34:32,190 --> 00:34:39,350
parse files and just include this file

00:34:35,370 --> 00:34:42,120
either automatically or using single

00:34:39,350 --> 00:34:44,460
arguments but don't try to combine all

00:34:42,120 --> 00:34:46,260
this war war war war file and so on

00:34:44,460 --> 00:34:50,159
because you will simply forget about

00:34:46,260 --> 00:34:53,840
them very soon also try to not use all

00:34:50,159 --> 00:34:57,330
this target portal ism which gives you a

00:34:53,840 --> 00:34:59,340
more granular control of what terraform

00:34:57,330 --> 00:35:02,570
should be doing terraform is smart

00:34:59,340 --> 00:35:06,720
enough to understand what to do itself

00:35:02,570 --> 00:35:09,450
just by looking and generalizing usually

00:35:06,720 --> 00:35:13,140
telephone workspaces are evil if you try

00:35:09,450 --> 00:35:15,960
to manage long term environments like

00:35:13,140 --> 00:35:18,960
production their testing and so on they

00:35:15,960 --> 00:35:22,350
always will be much better if you manage

00:35:18,960 --> 00:35:24,200
separately in different directories so

00:35:22,350 --> 00:35:27,090
don't try to use their own workspace

00:35:24,200 --> 00:35:29,460
inside of counts simply because there

00:35:27,090 --> 00:35:32,280
will be a lot of situations when

00:35:29,460 --> 00:35:33,120
readability of your code is much more

00:35:32,280 --> 00:35:36,390
important

00:35:33,120 --> 00:35:38,550
saving two kilobytes of I mean we're not

00:35:36,390 --> 00:35:40,530
paying for disk storage anymore so it's

00:35:38,550 --> 00:35:43,490
much much better to write more code

00:35:40,530 --> 00:35:47,670
which is very easy to understand

00:35:43,490 --> 00:35:51,480
and try to avoid dependencies more deals

00:35:47,670 --> 00:35:54,510
in one module should not be used in

00:35:51,480 --> 00:35:58,530
several layers it will be very hard to

00:35:54,510 --> 00:36:04,290
maintain and debug so at most one or two

00:35:58,530 --> 00:36:06,900
levels is enough so as a small summary

00:36:04,290 --> 00:36:11,490
the main issue with telephone zero alone

00:36:06,900 --> 00:36:13,440
right now is least like the ways we have

00:36:11,490 --> 00:36:16,350
to work with least especially on big

00:36:13,440 --> 00:36:19,220
structures can be a little bit tedious

00:36:16,350 --> 00:36:22,440
be careful with that one and

00:36:19,220 --> 00:36:24,930
try to use therap form and try to

00:36:22,440 --> 00:36:26,610
proceed to reform easier so that you

00:36:24,930 --> 00:36:29,550
don't have to use all of these countless

00:36:26,610 --> 00:36:32,580
features which stare upon provide it's

00:36:29,550 --> 00:36:34,380
not it's not necessary you will have

00:36:32,580 --> 00:36:39,090
much easier life if you just write

00:36:34,380 --> 00:36:41,460
things much smaller and like don't use

00:36:39,090 --> 00:36:44,310
all features of terraform at once I see

00:36:41,460 --> 00:36:46,260
a lot of people try to use they read

00:36:44,310 --> 00:36:48,990
documentation and they try to use all

00:36:46,260 --> 00:36:50,730
parameters and workspaces and then code

00:36:48,990 --> 00:36:53,970
looks like spaghetti and they blame

00:36:50,730 --> 00:36:56,040
telephone for that so instead just don't

00:36:53,970 --> 00:36:59,250
use half of features which star from

00:36:56,040 --> 00:37:04,770
provide and you'll have very easy to

00:36:59,250 --> 00:37:07,080
read code in half-year so you may think

00:37:04,770 --> 00:37:12,330
what does it mean like for the future

00:37:07,080 --> 00:37:15,300
like whether its title so to reform 0 12

00:37:12,330 --> 00:37:17,820
beta is out there it will solve some of

00:37:15,300 --> 00:37:21,750
the problems related to least and few

00:37:17,820 --> 00:37:24,240
others index was sugar things like it

00:37:21,750 --> 00:37:27,210
for example HCl 2 is going to be

00:37:24,240 --> 00:37:30,450
simplified which means that you you're

00:37:27,210 --> 00:37:34,530
not gonna to write all this double

00:37:30,450 --> 00:37:37,470
double closed or curly brackets if you

00:37:34,530 --> 00:37:40,770
want to reference elements and few other

00:37:37,470 --> 00:37:44,460
things so syntax will be just simplified

00:37:40,770 --> 00:37:46,680
that's really a good point there will be

00:37:44,460 --> 00:37:49,110
different ways to look you

00:37:46,680 --> 00:37:52,230
and use or you can use for each in order

00:37:49,110 --> 00:37:54,990
to to configure different properties of

00:37:52,230 --> 00:37:57,900
resources and finally you can use

00:37:54,990 --> 00:37:59,640
correct conditional operator well left

00:37:57,900 --> 00:38:01,560
and right parts are not executed

00:37:59,640 --> 00:38:04,620
simultaneously as it was with zero

00:38:01,560 --> 00:38:07,550
eleven actually for me it's bad side

00:38:04,620 --> 00:38:10,410
because now I have to test my code twice

00:38:07,550 --> 00:38:13,380
which means I had to make sure that I

00:38:10,410 --> 00:38:15,630
provide values so that left part is

00:38:13,380 --> 00:38:17,730
executed you have a run code and see

00:38:15,630 --> 00:38:20,370
that everything was created fine and

00:38:17,730 --> 00:38:23,240
then I had to make it so the bright part

00:38:20,370 --> 00:38:26,190
is experiment and run same home twice

00:38:23,240 --> 00:38:29,150
for me personally as therap or modules

00:38:26,190 --> 00:38:31,380
maintainer this is part of the problem

00:38:29,150 --> 00:38:34,380
extended type of variables you can

00:38:31,380 --> 00:38:37,940
specify what kind of out or input you

00:38:34,380 --> 00:38:41,340
expect candle a strain of maps and so on

00:38:37,940 --> 00:38:43,740
template in values you can link between

00:38:41,340 --> 00:38:47,370
different resources so that modules can

00:38:43,740 --> 00:38:49,860
be now linked then much more is on this

00:38:47,370 --> 00:38:52,980
blog post it's it was written

00:38:49,860 --> 00:38:56,520
approximately half year ago and it's

00:38:52,980 --> 00:39:01,110
still relevant as I said there upon zero

00:38:56,520 --> 00:39:03,780
twelve beta is there but it will must

00:39:01,110 --> 00:39:06,060
fix your code it will be backwards

00:39:03,780 --> 00:39:09,720
compatible with zero eleven you can

00:39:06,060 --> 00:39:11,520
still use it you can even try to use it

00:39:09,720 --> 00:39:13,950
right now because it's available for

00:39:11,520 --> 00:39:17,550
download and you can run it davin test

00:39:13,950 --> 00:39:20,460
environment and I also recommend to use

00:39:17,550 --> 00:39:23,460
whatever existing new point is much

00:39:20,460 --> 00:39:26,040
better than just start right terraform

00:39:23,460 --> 00:39:28,170
after reading documentation because

00:39:26,040 --> 00:39:30,180
other people have made solutions for

00:39:28,170 --> 00:39:33,180
significant amount of workarounds

00:39:30,180 --> 00:39:36,710
problems and you will just get much more

00:39:33,180 --> 00:39:39,540
productive if you read anything like

00:39:36,710 --> 00:39:42,360
terraform modules which you find in

00:39:39,540 --> 00:39:46,740
registrate countless amount of utilities

00:39:42,360 --> 00:39:49,980
I usually tweet about many of them on my

00:39:46,740 --> 00:39:53,250
Twitter account and yeah I have a lot of

00:39:49,980 --> 00:39:55,590
them probably all of them start on my

00:39:53,250 --> 00:39:57,490
github profile because I like to see

00:39:55,590 --> 00:40:00,700
what community is up to

00:39:57,490 --> 00:40:02,589
in general AWS has much better support

00:40:00,700 --> 00:40:04,780
than any other provider approximately

00:40:02,589 --> 00:40:09,640
80% of tools just for my rough estimate

00:40:04,780 --> 00:40:15,000
is for AWS file about 20% is for the

00:40:09,640 --> 00:40:17,800
rest in total in Google so yeah that's I

00:40:15,000 --> 00:40:20,740
have buttons I know that I have a little

00:40:17,800 --> 00:40:25,000
time but I still have bonus which is

00:40:20,740 --> 00:40:26,859
this one so this is you know something

00:40:25,000 --> 00:40:28,900
like this right you probably saw

00:40:26,859 --> 00:40:32,800
something like this before where you

00:40:28,900 --> 00:40:37,230
have so quad craft is - which allows to

00:40:32,800 --> 00:40:38,920
draw visualize your AWS infrastructure

00:40:37,230 --> 00:40:41,260
in the browser

00:40:38,920 --> 00:40:43,619
so you can connect different components

00:40:41,260 --> 00:40:46,750
you can specify different type of

00:40:43,619 --> 00:40:49,930
resources Auto scale in ec2 instances

00:40:46,750 --> 00:40:52,570
load balancers and then you connect all

00:40:49,930 --> 00:40:54,760
of these yourself in the browser you can

00:40:52,570 --> 00:40:59,910
also import your existing infrastructure

00:40:54,760 --> 00:41:02,440
to be able to connect elements visualize

00:40:59,910 --> 00:41:04,300
you can also automatically update when

00:41:02,440 --> 00:41:08,109
something change in your real

00:41:04,300 --> 00:41:11,200
infrastructure and approximately a year

00:41:08,109 --> 00:41:13,990
ago I was looking like we have a doubles

00:41:11,200 --> 00:41:17,170
console where we have been clicking

00:41:13,990 --> 00:41:19,060
historically for quite some time and

00:41:17,170 --> 00:41:22,900
then we have tools like Warcraft where

00:41:19,060 --> 00:41:24,880
we visualize and then we have telephone

00:41:22,900 --> 00:41:28,660
where we describe everything has called

00:41:24,880 --> 00:41:32,920
these three tools are not connected in a

00:41:28,660 --> 00:41:36,310
way that we want them to be like if we

00:41:32,920 --> 00:41:40,180
look by job description this is let's

00:41:36,310 --> 00:41:43,300
call it random is using this okay random

00:41:40,180 --> 00:41:46,240
guys console click everywhere let's call

00:41:43,300 --> 00:41:49,900
them random this is tools for cloud

00:41:46,240 --> 00:41:53,020
architect who are usually thinking about

00:41:49,900 --> 00:41:55,420
different types of resources how to

00:41:53,020 --> 00:41:59,260
connect them what kind of property is

00:41:55,420 --> 00:42:01,270
instant size open ports different

00:41:59,260 --> 00:42:03,040
solution architectures and so on and

00:42:01,270 --> 00:42:06,130
this is for DevOps engineers who are

00:42:03,040 --> 00:42:10,480
describing whatever they figure out as

00:42:06,130 --> 00:42:11,230
code so that it actually works and about

00:42:10,480 --> 00:42:14,680
hockey

00:42:11,230 --> 00:42:16,390
I released or actually released it

00:42:14,680 --> 00:42:18,220
earlier but then I made it publicly

00:42:16,390 --> 00:42:20,980
available for everyone on the cloud

00:42:18,220 --> 00:42:25,420
craft where you design whatever you want

00:42:20,980 --> 00:42:28,300
and then you get use of building blocks

00:42:25,420 --> 00:42:32,200
of a diverse infrastructure and save it

00:42:28,300 --> 00:42:35,080
as their upon configuration so this is

00:42:32,200 --> 00:42:37,270
exactly what modules TF is for I have

00:42:35,080 --> 00:42:39,910
some stickers here for those who want to

00:42:37,270 --> 00:42:43,600
get it it's open-source project it's

00:42:39,910 --> 00:42:45,640
available for free for everyone to be

00:42:43,600 --> 00:42:48,930
able to generate your infrastructure as

00:42:45,640 --> 00:42:52,810
code from visual diagrams so you go to

00:42:48,930 --> 00:42:56,980
you go to craft 0 you can sign up or

00:42:52,810 --> 00:42:59,109
sign in with free account there are this

00:42:56,980 --> 00:43:02,380
feature is available for free for

00:42:59,109 --> 00:43:05,440
everyone everyone you draw whatever you

00:43:02,380 --> 00:43:06,790
want to have many click exponent and the

00:43:05,440 --> 00:43:09,520
end result will be

00:43:06,790 --> 00:43:13,600
zip archive which is potentially ready

00:43:09,520 --> 00:43:15,760
to use for you right now the thing is

00:43:13,600 --> 00:43:19,180
that this code which will be generated

00:43:15,760 --> 00:43:25,510
is good starting point for people who

00:43:19,180 --> 00:43:27,820
want to get started with with like

00:43:25,510 --> 00:43:32,350
enforce best practices slow code

00:43:27,820 --> 00:43:35,290
structure different tools like modules

00:43:32,350 --> 00:43:37,590
perform a SS modules and there are Grand

00:43:35,290 --> 00:43:40,150
Prix commit and few other things

00:43:37,590 --> 00:43:44,290
automatically pre-installed for you and

00:43:40,150 --> 00:43:47,020
the structure of the project is the same

00:43:44,290 --> 00:43:49,630
as you visual as you draw it in a cloud

00:43:47,020 --> 00:43:52,090
craft UI so if you specify that you want

00:43:49,630 --> 00:43:54,490
to have different instance type or

00:43:52,090 --> 00:43:57,100
different auto scaling and how they are

00:43:54,490 --> 00:43:59,350
connected so if you specify that auto

00:43:57,100 --> 00:44:02,320
scaling group application load balancer

00:43:59,350 --> 00:44:04,660
security group VPC are somehow connected

00:44:02,320 --> 00:44:06,460
all of these relations will be taken

00:44:04,660 --> 00:44:09,460
into account and convert it into

00:44:06,460 --> 00:44:12,970
telegram so which means that whatever

00:44:09,460 --> 00:44:16,109
your cloud architect has been thinking

00:44:12,970 --> 00:44:19,869
about you don't have to go and look into

00:44:16,109 --> 00:44:22,960
diagrams again I think what what do you

00:44:19,869 --> 00:44:25,630
mean here whether we have to do this or

00:44:22,960 --> 00:44:29,080
not it will be one to one match

00:44:25,630 --> 00:44:31,510
this is ongoing process and I'm gonna to

00:44:29,080 --> 00:44:36,060
invest more time on this one to make it

00:44:31,510 --> 00:44:36,060
much more complete because now I have

00:44:40,170 --> 00:45:04,590
you and customize it yeah because you

00:44:51,550 --> 00:45:49,510
can just go there or it works on yeah

00:45:04,590 --> 00:45:54,850
yeah yeah that's a really good question

00:45:49,510 --> 00:45:57,180
about terraform state so quite quite

00:45:54,850 --> 00:46:00,640
obvious this is one of the pain points

00:45:57,180 --> 00:46:03,310
for many people your state file is

00:46:00,640 --> 00:46:06,180
contain in all secrets which which II

00:46:03,310 --> 00:46:08,800
didn't want to have in plain text and

00:46:06,180 --> 00:46:10,930
there are many different solutions how

00:46:08,800 --> 00:46:13,570
to do this like one of the most popular

00:46:10,930 --> 00:46:17,860
one is you don't have to give access to

00:46:13,570 --> 00:46:21,570
all developers in order to read from

00:46:17,860 --> 00:46:24,700
this file so you may have centralized

00:46:21,570 --> 00:46:28,090
let's say Atlantis Atlantis is a tool

00:46:24,700 --> 00:46:30,760
which can be connected to your github

00:46:28,090 --> 00:46:34,560
gitlab and since yesterday to bitbucket

00:46:30,760 --> 00:46:37,990
as well so you can connect it with your

00:46:34,560 --> 00:46:38,619
repository and developers from pull

00:46:37,990 --> 00:46:41,829
request

00:46:38,619 --> 00:46:43,989
we'll be able to write applying this

00:46:41,829 --> 00:46:45,849
plan and Atlantis will execute the

00:46:43,989 --> 00:46:48,430
reform in centralized place so this

00:46:45,849 --> 00:46:51,339
means the developers don't have to have

00:46:48,430 --> 00:46:54,279
access to the state file themselves they

00:46:51,339 --> 00:46:57,069
still will be able to read some of these

00:46:54,279 --> 00:46:59,349
if I provide some malicious code so it

00:46:57,069 --> 00:47:03,549
can be it has to be a little bit more

00:46:59,349 --> 00:47:08,950
secret than before but other way is if

00:47:03,549 --> 00:47:11,920
you split like if you split your one big

00:47:08,950 --> 00:47:14,349
page file which contains everything and

00:47:11,920 --> 00:47:16,960
secret into at least two states while

00:47:14,349 --> 00:47:19,509
we're secrets are used only when it's

00:47:16,960 --> 00:47:23,079
necessary you will be better to go and

00:47:19,509 --> 00:47:25,420
then we was having one big state for

00:47:23,079 --> 00:47:30,339
example like there are many different

00:47:25,420 --> 00:47:33,700
ways in AWS itself to manage to not use

00:47:30,339 --> 00:47:36,099
secret staff which will end up in state

00:47:33,700 --> 00:47:41,019
file for example you can use iron rules

00:47:36,099 --> 00:47:45,430
you can use PGP encryption for I'm users

00:47:41,019 --> 00:47:48,519
access keys and you can use different

00:47:45,430 --> 00:47:51,900
types of properties provided by the

00:47:48,519 --> 00:47:55,599
database provider itself but

00:47:51,900 --> 00:47:58,630
approximately as I understand about like

00:47:55,599 --> 00:48:00,759
in a months maybe in two there will be

00:47:58,630 --> 00:48:04,599
three forms our solution which will

00:48:00,759 --> 00:48:08,859
allow a lot of people to not think about

00:48:04,599 --> 00:48:15,900
state company anymore so it will be very

00:48:08,859 --> 00:48:15,900
free bye thanks everyone

00:48:16,400 --> 00:48:19,570

YouTube URL: https://www.youtube.com/watch?v=vONsU-dNql8


