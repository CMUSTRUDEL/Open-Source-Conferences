Title: Fundamentals of deploying applications to Kubernetes by Graham Dumpleton, Jorge Morales
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	16 March 2019 11:00, Lecture Theatre

A hot topic in recent years is running applications in containers. Tools such as docker have made deployment of applications using Linux containers easier, but they do not alone provide everything that is needed to easily manage many applications, or run containers at scale across a cluster of machines.

In this hands on workshop you will learn about the fundamental concepts and terminology around deploying applications to Kubernetes and why it is emerging as the de-facto standard for container orchestration and scheduling.

Topics which will be covered to illustrate how Kubernetes works will include:

What are containers and pods.
Accessing pods for an application via a service.
Scaling up applications to many instances.
Automatic recovery from application failure.
Exposing a web application to the public.
Application lifecycle management.
Monitoring health of an application.
If you attend the workshop, you will be provided access to an online workshop environment with everything you need already setup and installed, but you will need to bring your own laptop in order to access the online environment. You will not need to install anything on your laptop and will be able to jump straight into getting hands on with Kubernetes.
Captions: 
	00:00:00,030 --> 00:00:04,770
hi and I'm not going to talk today there

00:00:02,760 --> 00:00:06,779
is another talk tomorrow that I will be

00:00:04,770 --> 00:00:09,450
living so please join us tomorrow at

00:00:06,779 --> 00:00:11,580
half-past ten in training room two to

00:00:09,450 --> 00:00:15,410
we're talking about open suit or

00:00:11,580 --> 00:00:15,410
kubernetes operators as well

00:00:19,220 --> 00:00:22,970
you don't have to type the commands in

00:00:21,140 --> 00:00:25,130
you can just click on it

00:00:22,970 --> 00:00:26,480
so if you've even got an Android tablet

00:00:25,130 --> 00:00:28,660
you can still do this

00:00:26,480 --> 00:00:31,309
iOS tablets I'm sorry it's not working

00:00:28,660 --> 00:00:33,140
so I can just click on that and it will

00:00:31,309 --> 00:00:36,050
run it so it's very simple to go through

00:00:33,140 --> 00:00:37,220
this okay so just read click and you're

00:00:36,050 --> 00:00:40,449
on you'd have to worry about trying to

00:00:37,220 --> 00:00:43,879
copy/paste anything or enter in by hand

00:00:40,449 --> 00:00:45,829
and that's it this is this running on

00:00:43,879 --> 00:00:49,309
overshift we've also embedded access to

00:00:45,829 --> 00:00:51,079
a web console in there so that you can

00:00:49,309 --> 00:00:53,809
play around there and look at what's

00:00:51,079 --> 00:00:56,479
happening as well the web console is not

00:00:53,809 --> 00:00:58,640
used in the workshop itself it all the

00:00:56,479 --> 00:01:00,680
workshop is done using command-line only

00:00:58,640 --> 00:01:03,259
but you can go through and dig through

00:01:00,680 --> 00:01:05,710
there if you want and just a little

00:01:03,259 --> 00:01:09,229
trick you can drag this left and right

00:01:05,710 --> 00:01:11,119
whoops it's a good trick you can drag

00:01:09,229 --> 00:01:17,750
that divider left and right now I've

00:01:11,119 --> 00:01:21,020
mocked up all my screen to make it so

00:01:17,750 --> 00:01:22,670
you can see it better but just get on

00:01:21,020 --> 00:01:24,350
with and in a minute I'll just start

00:01:22,670 --> 00:01:29,049
going through it myself once I saw that

00:01:24,350 --> 00:01:29,049
my laptop and get this other headset off

00:02:25,730 --> 00:02:29,629
okay so if you came in Nate you wouldn't

00:02:27,950 --> 00:02:31,269
do that that's the URL you can go to if

00:02:29,629 --> 00:02:33,500
you actually wanted to do this yourself

00:02:31,269 --> 00:02:35,840
but what I'm going to do is give it a

00:02:33,500 --> 00:02:37,900
bit of a short slide deck and then I'll

00:02:35,840 --> 00:02:40,459
go from Step four up myself

00:02:37,900 --> 00:02:42,860
now kubernetes this is what we're

00:02:40,459 --> 00:02:44,390
demonstrating today it's the some

00:02:42,860 --> 00:02:46,280
fundamentals of using CUDA modernise

00:02:44,390 --> 00:02:48,819
using the command line to deploy an app

00:02:46,280 --> 00:02:51,440
you're going to go through and deploy a

00:02:48,819 --> 00:02:53,420
front-end web web application which is a

00:02:51,440 --> 00:02:55,129
blog site using Django and you're gonna

00:02:53,420 --> 00:02:58,280
have a back-end database and you go

00:02:55,129 --> 00:02:59,599
those up together make it visible public

00:02:58,280 --> 00:03:01,730
so that people can use it

00:02:59,599 --> 00:03:04,180
initialize the database and that's what

00:03:01,730 --> 00:03:06,049
the exercise is about so kubernetes

00:03:04,180 --> 00:03:07,910
presume you're here because you have

00:03:06,049 --> 00:03:11,150
heard of it now when we get into

00:03:07,910 --> 00:03:13,790
kubernetes your head can very very

00:03:11,150 --> 00:03:15,530
quickly explode it's a very complicated

00:03:13,790 --> 00:03:17,780
system when you look at the whole

00:03:15,530 --> 00:03:20,239
ecosystem and there's a big steep

00:03:17,780 --> 00:03:21,859
learning curve now one important thing

00:03:20,239 --> 00:03:25,190
to say about that

00:03:21,859 --> 00:03:26,780
is that don't expect them understand all

00:03:25,190 --> 00:03:27,739
of it it's like the Linux operating

00:03:26,780 --> 00:03:29,569
system

00:03:27,739 --> 00:03:30,889
you don't go to Linux expected to be

00:03:29,569 --> 00:03:33,799
able to learn all of it

00:03:30,889 --> 00:03:35,690
Ljuba notice is the same taking the

00:03:33,799 --> 00:03:37,569
attitude that you're going to lose learn

00:03:35,690 --> 00:03:39,590
a piece at a time as you go along

00:03:37,569 --> 00:03:42,410
because you'll never learn everything

00:03:39,590 --> 00:03:44,419
about it okay

00:03:42,410 --> 00:03:46,160
but what is cuvee is and what it's all

00:03:44,419 --> 00:03:48,620
about what is it trying to address

00:03:46,160 --> 00:03:51,650
so obviously containers is the big

00:03:48,620 --> 00:03:55,310
buzzword in the last few years which

00:03:51,650 --> 00:03:57,169
docker may very popular because they

00:03:55,310 --> 00:03:58,459
made the idea of packaging up these

00:03:57,169 --> 00:04:00,590
applications to these things called

00:03:58,459 --> 00:04:02,090
containers and running or run into an

00:04:00,590 --> 00:04:06,829
image and running them in a very very

00:04:02,090 --> 00:04:08,900
popular when you look at what that

00:04:06,829 --> 00:04:11,090
technology is about we've come from a

00:04:08,900 --> 00:04:12,859
history of having a virtual idea of

00:04:11,090 --> 00:04:15,919
virtualization which is the idea that

00:04:12,859 --> 00:04:18,739
you can run up machines multiple

00:04:15,919 --> 00:04:21,200
instances of machines within one

00:04:18,739 --> 00:04:23,630
physical machine in each in their own

00:04:21,200 --> 00:04:26,690
little compartments now containers

00:04:23,630 --> 00:04:29,389
essentially the same basic idea but it's

00:04:26,690 --> 00:04:30,289
intended to be a lot less overhead

00:04:29,389 --> 00:04:33,130
because when we talk about

00:04:30,289 --> 00:04:35,630
virtualization we in each of our

00:04:33,130 --> 00:04:37,700
utilized sandboxes are running a full

00:04:35,630 --> 00:04:38,449
operating system when we talk about

00:04:37,700 --> 00:04:41,809
container

00:04:38,449 --> 00:04:43,819
we are only running the processes of the

00:04:41,809 --> 00:04:47,210
particular application you want to run

00:04:43,819 --> 00:04:49,460
so you don't have all that overhead of

00:04:47,210 --> 00:04:51,830
the operating system in each of your

00:04:49,460 --> 00:04:53,839
little isolated containers you are

00:04:51,830 --> 00:04:55,879
making use of the fact that underneath

00:04:53,839 --> 00:04:57,860
your container runtime there is just one

00:04:55,879 --> 00:05:00,050
operating system running which is being

00:04:57,860 --> 00:05:02,210
shared across all of your containers so

00:05:00,050 --> 00:05:04,759
containers just a fancy way of putting a

00:05:02,210 --> 00:05:07,400
fence around a processes for your one

00:05:04,759 --> 00:05:09,309
application and that makes a lot more

00:05:07,400 --> 00:05:14,210
lightweight than using traditional

00:05:09,309 --> 00:05:17,300
virtualization so the general flow if

00:05:14,210 --> 00:05:19,550
making applications run in containers is

00:05:17,300 --> 00:05:22,699
that you're going to take a set of

00:05:19,550 --> 00:05:25,430
instructions of what steps need to be

00:05:22,699 --> 00:05:27,080
run to take the bits and pieces you need

00:05:25,430 --> 00:05:29,689
for your application to build it into a

00:05:27,080 --> 00:05:32,870
package what we call an image it's like

00:05:29,689 --> 00:05:34,219
a glorified tar ball so you might say

00:05:32,870 --> 00:05:36,529
that I need to have these particular

00:05:34,219 --> 00:05:38,559
operating system packages available

00:05:36,529 --> 00:05:40,879
I need this particular language runtime

00:05:38,559 --> 00:05:42,439
and then you're going to need all the

00:05:40,879 --> 00:05:45,319
particular packages for that language

00:05:42,439 --> 00:05:47,749
runtime so our case we're using Python

00:05:45,319 --> 00:05:50,899
application in the front end so I have

00:05:47,749 --> 00:05:52,639
to install all the Django bits for that

00:05:50,899 --> 00:05:54,409
as well because I'm using Django web

00:05:52,639 --> 00:05:56,810
framing so you're going to build that

00:05:54,409 --> 00:05:58,099
into using that set of instructions

00:05:56,810 --> 00:06:00,050
you're going to build up your magic

00:05:58,099 --> 00:06:02,330
tarball or image and we're going to put

00:06:00,050 --> 00:06:04,279
that up into an image registry a place

00:06:02,330 --> 00:06:07,449
essentially where we can store that and

00:06:04,279 --> 00:06:10,639
get access to it then to deploy it

00:06:07,449 --> 00:06:12,139
somewhere so the next step is well so

00:06:10,639 --> 00:06:13,939
we've built our image we're going to

00:06:12,139 --> 00:06:15,889
take that image pull it down firmly

00:06:13,939 --> 00:06:17,569
through tree to a container runtime

00:06:15,889 --> 00:06:19,580
environment and we're going to run it

00:06:17,569 --> 00:06:22,129
and that will run up your processes

00:06:19,580 --> 00:06:24,729
inside that container so essentially

00:06:22,129 --> 00:06:24,729
that's what it's all about

00:06:24,879 --> 00:06:30,139
very like way of doing containerization

00:06:28,339 --> 00:06:31,969
compared to virtualization where you're

00:06:30,139 --> 00:06:35,360
just running up your own application

00:06:31,969 --> 00:06:38,719
processor now running a single container

00:06:35,360 --> 00:06:40,789
is quite easy okay docker made that very

00:06:38,719 --> 00:06:43,159
very easy so that on your laptop you can

00:06:40,789 --> 00:06:44,990
just go docker build give it the set of

00:06:43,159 --> 00:06:47,089
instructions in the docker file it

00:06:44,990 --> 00:06:50,000
produces your image you then go docker

00:06:47,089 --> 00:06:53,060
run great your apps running

00:06:50,000 --> 00:06:55,190
the problem with that is that when you

00:06:53,060 --> 00:06:57,470
want to start scaling out your

00:06:55,190 --> 00:07:00,370
application so you have model instances

00:06:57,470 --> 00:07:03,080
of it even on your own single machine or

00:07:00,370 --> 00:07:05,150
across machines so that you can

00:07:03,080 --> 00:07:07,100
distribute many millions across a big

00:07:05,150 --> 00:07:09,380
cluster of machines that's when things

00:07:07,100 --> 00:07:11,630
get hard and problems going to start to

00:07:09,380 --> 00:07:14,680
arise if you try and do homegrown

00:07:11,630 --> 00:07:16,820
solutions yourself with docker alone

00:07:14,680 --> 00:07:17,720
you're going to have lots and lots of

00:07:16,820 --> 00:07:19,370
problems you're gonna have to solve

00:07:17,720 --> 00:07:23,150
along the way and it's gonna be a lot a

00:07:19,370 --> 00:07:28,550
lot of work and this is where kubernetes

00:07:23,150 --> 00:07:30,700
comes in kubernetes is a what's called

00:07:28,550 --> 00:07:33,830
as container as a service platform

00:07:30,700 --> 00:07:36,830
essentially it's providing you the

00:07:33,830 --> 00:07:39,380
smarts to be able to manage a set of

00:07:36,830 --> 00:07:41,210
machines and now each one of those

00:07:39,380 --> 00:07:42,200
machines will have a container at

00:07:41,210 --> 00:07:44,480
runtime on it

00:07:42,200 --> 00:07:47,360
where you can run up applications and

00:07:44,480 --> 00:07:48,980
communities going to manage for you all

00:07:47,360 --> 00:07:51,620
of those different machines and so when

00:07:48,980 --> 00:07:54,050
I want to deploy an app now I can tell

00:07:51,620 --> 00:07:56,030
kubernetes here is the image for my

00:07:54,050 --> 00:07:58,460
application which I have packaged up

00:07:56,030 --> 00:08:01,010
I need this many instances of it running

00:07:58,460 --> 00:08:03,920
and you tell kubernetes and it will

00:08:01,010 --> 00:08:06,260
worry about where to run it on which

00:08:03,920 --> 00:08:08,240
nodes in our cluster it'll get up and

00:08:06,260 --> 00:08:08,960
running for it it will manage them look

00:08:08,240 --> 00:08:11,300
after it

00:08:08,960 --> 00:08:12,380
if instances of my application die it

00:08:11,300 --> 00:08:14,570
will replace them

00:08:12,380 --> 00:08:17,000
it will migrate instance between nodes

00:08:14,570 --> 00:08:19,970
if it needs to because a node has gone

00:08:17,000 --> 00:08:21,650
down or it's getting too much memory

00:08:19,970 --> 00:08:23,780
resources on it being used and it needs

00:08:21,650 --> 00:08:26,180
to rebalance it can manages all those

00:08:23,780 --> 00:08:28,310
things for you so whereas before in

00:08:26,180 --> 00:08:29,930
doing straight docker that would be a

00:08:28,310 --> 00:08:32,060
quite complicated process because you

00:08:29,930 --> 00:08:33,140
have to write a lot of that stuff to the

00:08:32,060 --> 00:08:35,180
management community it's going to

00:08:33,140 --> 00:08:37,160
manage it all for you so that's what

00:08:35,180 --> 00:08:39,990
kubernetes about how it fits into that

00:08:37,160 --> 00:08:41,430
that story of containers

00:08:39,990 --> 00:08:42,870
so that's all I'm gonna do with the

00:08:41,430 --> 00:08:45,210
slides that just sets a little bit of

00:08:42,870 --> 00:08:47,160
context for you for those who are

00:08:45,210 --> 00:08:56,640
following going to follow along rather

00:08:47,160 --> 00:08:58,290
than actually doing on the yeah so I'm

00:08:56,640 --> 00:09:00,030
now going to go into the to do the

00:08:58,290 --> 00:09:02,730
slides now just very quickly for those

00:09:00,030 --> 00:09:04,050
who may have come in late if you if you

00:09:02,730 --> 00:09:06,360
really want to do this because it is a

00:09:04,050 --> 00:09:10,350
hands-on workshop why am i having so

00:09:06,360 --> 00:09:12,210
much trouble with the mouse to do okay

00:09:10,350 --> 00:09:14,190
if you really want to try and do this

00:09:12,210 --> 00:09:17,630
workshop yourself to hands-on workshop

00:09:14,190 --> 00:09:20,160
you can go to david dress you'll get a

00:09:17,630 --> 00:09:22,440
blue button come up saying start

00:09:20,160 --> 00:09:25,020
workshop just click on it and you'll get

00:09:22,440 --> 00:09:27,090
to see this particular workshop in brown

00:09:25,020 --> 00:09:29,730
which I've got here showing here and

00:09:27,090 --> 00:09:30,960
you'll be able to just go through and do

00:09:29,730 --> 00:09:33,780
this yourself everyone got that now who

00:09:30,960 --> 00:09:36,060
wants to do it as I said we're gonna

00:09:33,780 --> 00:09:38,430
leave this up for a day and the cluster

00:09:36,060 --> 00:09:41,990
all magically get destroyed so you can

00:09:38,430 --> 00:09:41,990
come back and do it later if need be

00:09:49,270 --> 00:09:56,830
how's that showing set not just mom

00:09:54,220 --> 00:09:59,130
okay sorry said it bit a canoe so I'm

00:09:56,830 --> 00:10:01,240
gonna skip some of these initial slides

00:09:59,130 --> 00:10:03,790
but the kubernetes cluster we're using

00:10:01,240 --> 00:10:05,820
today is actually openshift so cubit

00:10:03,790 --> 00:10:09,400
openshift is a distribution of

00:10:05,820 --> 00:10:11,350
kubernetes which provides that container

00:10:09,400 --> 00:10:13,450
as a service functionality that

00:10:11,350 --> 00:10:15,280
kubernetes provides but it actually

00:10:13,450 --> 00:10:15,610
builds a whole lot of stuff on top as

00:10:15,280 --> 00:10:18,010
well

00:10:15,610 --> 00:10:21,270
now our kubernetes is viewed as being a

00:10:18,010 --> 00:10:24,160
a more of an Operations platform

00:10:21,270 --> 00:10:26,860
OpenShift adds on top of that extra

00:10:24,160 --> 00:10:28,870
functionality part of that is what

00:10:26,860 --> 00:10:32,230
people would call platform as a service

00:10:28,870 --> 00:10:36,190
which is an easier way of deploying apps

00:10:32,230 --> 00:10:38,080
it has in their support for running CI

00:10:36,190 --> 00:10:42,190
CD pipelines using Jenkins

00:10:38,080 --> 00:10:44,350
it has support for being able to take

00:10:42,190 --> 00:10:46,270
your source code and build it into an

00:10:44,350 --> 00:10:47,830
image for you so you don't have to worry

00:10:46,270 --> 00:10:49,270
about actually generating all the

00:10:47,830 --> 00:10:51,340
instructions and that's a thing called

00:10:49,270 --> 00:10:53,020
source to image so has all these extra

00:10:51,340 --> 00:10:55,900
features in there that is still a

00:10:53,020 --> 00:10:57,970
kubernetes distribution so we're using

00:10:55,900 --> 00:11:00,220
it today and the exercises all you're

00:10:57,970 --> 00:11:01,930
going to do is use cube cut' or command

00:11:00,220 --> 00:11:04,060
line you're not even going to use the

00:11:01,930 --> 00:11:05,710
openshift specific command line so all

00:11:04,060 --> 00:11:06,160
the things you were doing here today

00:11:05,710 --> 00:11:07,510
because

00:11:06,160 --> 00:11:09,400
openshift is just a few bananas

00:11:07,510 --> 00:11:12,180
distribution you'll be able to apply

00:11:09,400 --> 00:11:12,180
somewhere else

00:11:15,420 --> 00:11:19,890
and when you go through this environment

00:11:17,790 --> 00:11:21,089
you've automatically got access it's all

00:11:19,890 --> 00:11:25,050
been set up for you soon enough to worry

00:11:21,089 --> 00:11:27,269
about that so what I'm going to do first

00:11:25,050 --> 00:11:29,670
is I'm going to deploy my whole

00:11:27,269 --> 00:11:33,029
application my front-end application and

00:11:29,670 --> 00:11:35,700
my database and we'll see what it looks

00:11:33,029 --> 00:11:37,290
like and we're going to destroy the

00:11:35,700 --> 00:11:39,329
front-end and then I'm going to step

00:11:37,290 --> 00:11:42,089
through deploying that front again

00:11:39,329 --> 00:11:44,370
front-end again click step by step and

00:11:42,089 --> 00:11:46,829
we're going to explain the concepts of

00:11:44,370 --> 00:11:48,810
the different components I'm going to

00:11:46,829 --> 00:11:50,370
deploy which create my whole application

00:11:48,810 --> 00:11:53,209
so that you can see how all those things

00:11:50,370 --> 00:11:53,209
bolt together

00:11:55,660 --> 00:12:00,460
so I have two two directories here one

00:11:58,450 --> 00:12:03,760
which is containing my my data based

00:12:00,460 --> 00:12:06,340
code now when we talk about deploying

00:12:03,760 --> 00:12:07,690
apps to kubernetes we're going to

00:12:06,340 --> 00:12:10,840
provide it with a whole bunch of

00:12:07,690 --> 00:12:15,160
configuration for different things that

00:12:10,840 --> 00:12:18,190
can be defined using Yammer or JSON I'm

00:12:15,160 --> 00:12:20,350
using Yamal today

00:12:18,190 --> 00:12:22,270
so in this directory I have four

00:12:20,350 --> 00:12:23,620
different config files for my database

00:12:22,270 --> 00:12:27,700
back-end which are the bits and pieces

00:12:23,620 --> 00:12:29,290
of different components to deploy so

00:12:27,700 --> 00:12:30,880
I've already pre created them so if you

00:12:29,290 --> 00:12:32,620
do have them your already existing it's

00:12:30,880 --> 00:12:35,410
actually can be very simple to then get

00:12:32,620 --> 00:12:37,630
an app deploying in kubernetes if you

00:12:35,410 --> 00:12:39,700
already got them it's it's creating them

00:12:37,630 --> 00:12:42,910
which is the heartbeat in the first

00:12:39,700 --> 00:12:45,520
place so I want to know what's going to

00:12:42,910 --> 00:12:48,220
happen when I deploy this there's a

00:12:45,520 --> 00:12:49,960
command in Cuba news in coop cuddles to

00:12:48,220 --> 00:12:52,060
cuddle apply I said she can give it that

00:12:49,960 --> 00:12:53,920
configuration and it's going to take it

00:12:52,060 --> 00:12:56,440
and it actually going to deploy my app

00:12:53,920 --> 00:12:57,670
based on what their configuration is so

00:12:56,440 --> 00:12:59,980
I want to see what that's going to do

00:12:57,670 --> 00:13:02,890
know I can supply this dry run option

00:12:59,980 --> 00:13:04,060
which says go and pretend you're going

00:13:02,890 --> 00:13:06,550
to do this and tell me what you're going

00:13:04,060 --> 00:13:08,200
to do so all that directory had was

00:13:06,550 --> 00:13:11,290
these four files each of them had

00:13:08,200 --> 00:13:13,480
different resources describing what's

00:13:11,290 --> 00:13:16,840
required as a deployment assistant

00:13:13,480 --> 00:13:18,280
volume claim for Secret Service but

00:13:16,840 --> 00:13:20,370
we'll get into what's inside of some of

00:13:18,280 --> 00:13:20,370
these

00:13:23,199 --> 00:13:27,670
so I did a dry run this time I deal for

00:13:25,269 --> 00:13:30,759
real I'll go and deploy that that is

00:13:27,670 --> 00:13:33,730
gone and deployed my application for the

00:13:30,759 --> 00:13:37,029
database and if I flick over to the the

00:13:33,730 --> 00:13:40,179
web console we can see that is currently

00:13:37,029 --> 00:13:42,869
being deployed so that'll just take it

00:13:40,179 --> 00:13:42,869
take a moment

00:13:44,750 --> 00:13:49,340
so back over here from the command line

00:13:47,030 --> 00:13:51,500
we can also monitor the status of the

00:13:49,340 --> 00:13:53,930
rollout there we can just this cube

00:13:51,500 --> 00:13:56,150
cuddle rollout status and it will just

00:13:53,930 --> 00:13:58,850
monitor that deployment as it happens

00:13:56,150 --> 00:14:01,930
and once it's finished setting that up

00:13:58,850 --> 00:14:04,250
we're done so we know we can move on

00:14:01,930 --> 00:14:07,550
so deploying apps when you've got the

00:14:04,250 --> 00:14:09,800
config already is really simple it's the

00:14:07,550 --> 00:14:11,570
creating of now we've got our front-end

00:14:09,800 --> 00:14:13,460
app as well same thing I have a

00:14:11,570 --> 00:14:17,030
directory which has some different

00:14:13,460 --> 00:14:19,220
resource files in there and I can just

00:14:17,030 --> 00:14:22,850
deploy that one as well and I can

00:14:19,220 --> 00:14:25,700
monitor the rollout of that now while

00:14:22,850 --> 00:14:30,590
that's happening let's stick around in

00:14:25,700 --> 00:14:32,570
this console a bit more so I've now see

00:14:30,590 --> 00:14:35,570
I've got two deployments in my my

00:14:32,570 --> 00:14:38,780
project or name space now when you work

00:14:35,570 --> 00:14:41,860
in kubernetes you can it's not just one

00:14:38,780 --> 00:14:43,820
big sandpit you can actually

00:14:41,860 --> 00:14:47,000
compartmentalize applications under

00:14:43,820 --> 00:14:48,440
what's called namespaces so that way if

00:14:47,000 --> 00:14:50,750
you've got a billing system you might

00:14:48,440 --> 00:14:52,430
deploy that in one name space if you've

00:14:50,750 --> 00:14:55,010
got a web forum you can pull that and

00:14:52,430 --> 00:14:57,080
name another new space and you can work

00:14:55,010 --> 00:14:58,820
with them independently in this

00:14:57,080 --> 00:15:02,090
particular environment what's actually

00:14:58,820 --> 00:15:04,910
happened when you went to that start

00:15:02,090 --> 00:15:06,950
workshop it's created each of you your

00:15:04,910 --> 00:15:09,320
own little namespace to work in and

00:15:06,950 --> 00:15:11,240
create your little account which you can

00:15:09,320 --> 00:15:13,040
then use to access it so you're all

00:15:11,240 --> 00:15:14,450
working in the one cluster you don't

00:15:13,040 --> 00:15:17,390
have your own cluster you're all working

00:15:14,450 --> 00:15:19,220
in the one and you can't see anyone

00:15:17,390 --> 00:15:21,860
else's applications that they are

00:15:19,220 --> 00:15:25,930
deploying because that namespace or

00:15:21,860 --> 00:15:25,930
project provides you a bit of isolation

00:15:26,200 --> 00:15:32,529
so these ones should be up so the

00:15:28,460 --> 00:15:35,840
database is up and running now and the

00:15:32,529 --> 00:15:39,020
web front-end as well now in this

00:15:35,840 --> 00:15:41,360
particular case because the reefs off

00:15:39,020 --> 00:15:43,460
definitions got everything we needed it

00:15:41,360 --> 00:15:45,020
has deployed the database we've deployed

00:15:43,460 --> 00:15:46,760
the front end the front-end database

00:15:45,020 --> 00:15:48,020
have already been linked together so the

00:15:46,760 --> 00:15:50,420
front end has the credential information

00:15:48,020 --> 00:15:53,800
for the database it knows the name of it

00:15:50,420 --> 00:15:57,910
knows how to contact it we've given the

00:15:53,800 --> 00:16:01,370
front-end web application a public URL

00:15:57,910 --> 00:16:03,380
so we can just click on that and we have

00:16:01,370 --> 00:16:04,940
our front-end working there's nothing

00:16:03,380 --> 00:16:06,170
nothing currently showing there in the

00:16:04,940 --> 00:16:09,940
way of blog post because we haven't

00:16:06,170 --> 00:16:09,940
loaded the database of anything

00:16:14,700 --> 00:16:19,850
now these resource files if I go back

00:16:17,340 --> 00:16:22,380
over here

00:16:19,850 --> 00:16:24,180
well these resource those files went on

00:16:22,380 --> 00:16:28,350
to create these different resources you

00:16:24,180 --> 00:16:29,670
saw there and this this comes where you

00:16:28,350 --> 00:16:31,140
know this is where the part of the

00:16:29,670 --> 00:16:34,950
learning curve starts with kubernetes

00:16:31,140 --> 00:16:37,440
and things get very very can get very

00:16:34,950 --> 00:16:39,030
complicated and messy but everything in

00:16:37,440 --> 00:16:42,660
communities is driven by these very soft

00:16:39,030 --> 00:16:44,850
definitions essentially they say what

00:16:42,660 --> 00:16:47,640
just my application needs to look like

00:16:44,850 --> 00:16:49,830
and kubernetes essentially makes the

00:16:47,640 --> 00:16:52,650
deployment agree with what your your

00:16:49,830 --> 00:16:55,530
resources all time so there's some key

00:16:52,650 --> 00:16:58,680
commands in communities which is cube

00:16:55,530 --> 00:17:00,810
cube cut or get another one coop cuttle

00:16:58,680 --> 00:17:03,210
describe which you'll be using a lot

00:17:00,810 --> 00:17:05,340
when working with kubernetes to find out

00:17:03,210 --> 00:17:07,430
what the state of your deployments and

00:17:05,340 --> 00:17:09,660
everything else so we've done two

00:17:07,430 --> 00:17:12,180
deployments here we've done a front end

00:17:09,660 --> 00:17:14,910
and our back in so if we say coop cuddle

00:17:12,180 --> 00:17:17,460
get deployment it can show us our two

00:17:14,910 --> 00:17:20,340
deployments we can also zoom in further

00:17:17,460 --> 00:17:22,500
and actually look at particular one by

00:17:20,340 --> 00:17:27,510
name so here i'm saying i want to look

00:17:22,500 --> 00:17:29,460
at the deployment for just a blog and if

00:17:27,510 --> 00:17:31,310
we want more information that's when we

00:17:29,460 --> 00:17:34,350
can start to use coop cuddle describe

00:17:31,310 --> 00:17:37,230
and it gives you a lot lot more

00:17:34,350 --> 00:17:41,280
information about the state of your

00:17:37,230 --> 00:17:42,990
deployment just that one resource if you

00:17:41,280 --> 00:17:44,940
want to get even more complicated now we

00:17:42,990 --> 00:17:47,490
started off with a Yammer file for our

00:17:44,940 --> 00:17:50,390
description you can actually get back

00:17:47,490 --> 00:17:54,570
out that gamma file which was loaded in

00:17:50,390 --> 00:17:55,920
and so it's actually a lot more in there

00:17:54,570 --> 00:17:57,780
than what we started with and that's

00:17:55,920 --> 00:18:00,000
because when you create the deployment

00:17:57,780 --> 00:18:02,190
you create a minimal deployment

00:18:00,000 --> 00:18:03,630
definition in yours and communities will

00:18:02,190 --> 00:18:06,240
start filling that out with other

00:18:03,630 --> 00:18:09,840
information be they defaults for a

00:18:06,240 --> 00:18:12,810
particular deployment resource resource

00:18:09,840 --> 00:18:14,460
memory and CPU based on quotas that it

00:18:12,810 --> 00:18:15,750
might be or limit what's called limit

00:18:14,460 --> 00:18:19,050
ranges that might be applied to your

00:18:15,750 --> 00:18:21,300
program project so it looks complicated

00:18:19,050 --> 00:18:22,830
but what we're actually going to use to

00:18:21,300 --> 00:18:23,460
create this in the first places are lots

00:18:22,830 --> 00:18:26,160
important

00:18:23,460 --> 00:18:28,830
and as well as the Emmel you can you can

00:18:26,160 --> 00:18:32,430
get JSON as well I personally hate Yemma

00:18:28,830 --> 00:18:34,650
I always prefer using JSON

00:18:32,430 --> 00:18:38,510
everyone seems a lot using Amal for blog

00:18:34,650 --> 00:18:38,510
posts and documentation so you

00:18:42,710 --> 00:18:48,620
so we have a project to hear which has

00:18:45,350 --> 00:18:50,720
multiple applications in it one of the

00:18:48,620 --> 00:18:53,390
big problems with kubernetes how do you

00:18:50,720 --> 00:18:55,220
know what belongs to what these

00:18:53,390 --> 00:18:57,350
resources that we're creating do have

00:18:55,220 --> 00:18:59,450
names associated with them so with the

00:18:57,350 --> 00:19:03,170
blog front-end is called blog the

00:18:59,450 --> 00:19:05,510
database is called blog - database it's

00:19:03,170 --> 00:19:07,490
complicated and messy to be able to deal

00:19:05,510 --> 00:19:08,990
with multiple of these resources at the

00:19:07,490 --> 00:19:11,540
same time if you have to use the names

00:19:08,990 --> 00:19:13,280
all the time it's a very key concept

00:19:11,540 --> 00:19:16,790
that exists in Cuban uses the ability to

00:19:13,280 --> 00:19:18,500
label things this is not just for you to

00:19:16,790 --> 00:19:21,050
be able to make queries based on your

00:19:18,500 --> 00:19:23,210
resources to get information out those

00:19:21,050 --> 00:19:25,940
labels are also used by kubernetes

00:19:23,210 --> 00:19:30,170
internally to draw relationships between

00:19:25,940 --> 00:19:33,050
different things so the deployment

00:19:30,170 --> 00:19:34,460
that's just saying this is the image I

00:19:33,050 --> 00:19:36,770
need to deploy and get running in a

00:19:34,460 --> 00:19:38,270
container but I need to access that so

00:19:36,770 --> 00:19:40,040
we also need what's called a service

00:19:38,270 --> 00:19:41,120
which we'll get to in a moment and you

00:19:40,040 --> 00:19:43,520
need because you've got a relationship

00:19:41,120 --> 00:19:47,300
there between it so you're gonna rely on

00:19:43,520 --> 00:19:49,100
these labels so the labels are something

00:19:47,300 --> 00:19:52,190
that when you create those Rhys often

00:19:49,100 --> 00:19:53,360
issues you need to put in yourself so

00:19:52,190 --> 00:19:54,860
you need to make sure you're setting up

00:19:53,360 --> 00:19:56,450
in the right way so you can do these

00:19:54,860 --> 00:19:58,730
sorts of queries to make it easier if

00:19:56,450 --> 00:20:01,730
you saw so I can this case can make a

00:19:58,730 --> 00:20:04,970
query using coop code or get to get to

00:20:01,730 --> 00:20:11,090
deployment for my front-end application

00:20:04,970 --> 00:20:12,550
by using a label and one very very

00:20:11,090 --> 00:20:17,030
useful thing

00:20:12,550 --> 00:20:18,980
one very useful useful labels is

00:20:17,030 --> 00:20:20,600
deleting things now I want to actually

00:20:18,980 --> 00:20:21,640
delete my front-end now so we can go

00:20:20,600 --> 00:20:26,360
back and do this again

00:20:21,640 --> 00:20:28,220
but my deployment from my front-end

00:20:26,360 --> 00:20:30,710
wasn't just that deployment object it

00:20:28,220 --> 00:20:32,960
was also a service object an ingress

00:20:30,710 --> 00:20:34,940
object at a persistent volume claim and

00:20:32,960 --> 00:20:36,950
I need that delete goes all at once now

00:20:34,940 --> 00:20:38,690
I can delete them by name but it's much

00:20:36,950 --> 00:20:42,040
much easier to use these labels delete

00:20:38,690 --> 00:20:44,570
it so I can just run cube cuddle delete

00:20:42,040 --> 00:20:46,790
deployment so it's ingress secret PBC

00:20:44,570 --> 00:20:49,930
give it a label and I've gone and

00:20:46,790 --> 00:20:52,820
deleted all that application it's

00:20:49,930 --> 00:20:54,140
so we can now start over and we start

00:20:52,820 --> 00:20:56,170
looking at these things now piece by

00:20:54,140 --> 00:20:56,170
piece

00:20:58,220 --> 00:21:02,660
I lost everyone already Hammond is

00:21:00,590 --> 00:21:06,520
actually doing this actually in the

00:21:02,660 --> 00:21:06,520
workshop I'm having no problems

00:21:11,330 --> 00:21:14,869
so what we're gonna do now is are going

00:21:12,799 --> 00:21:16,220
to deploy this front end in pieces we're

00:21:14,869 --> 00:21:17,450
going to lead we've left the database

00:21:16,220 --> 00:21:19,669
alone we're going to leave that one

00:21:17,450 --> 00:21:22,909
there we're just going to redeploy the

00:21:19,669 --> 00:21:25,730
the front end so what we got starting

00:21:22,909 --> 00:21:29,539
out is this deployment resource so it's

00:21:25,730 --> 00:21:34,249
big hunk of yam or it has a name blog

00:21:29,539 --> 00:21:36,739
has these labels blog again and inside

00:21:34,249 --> 00:21:40,429
of that is then has what's a template

00:21:36,739 --> 00:21:42,889
which essentially defining what that

00:21:40,429 --> 00:21:44,539
deployment is to look like so we have a

00:21:42,889 --> 00:21:46,399
name of an image in there which we're

00:21:44,539 --> 00:21:50,509
going to use this for in this case it's

00:21:46,399 --> 00:21:52,489
this OpenShift kata-kata blog django pi

00:21:50,509 --> 00:21:55,489
so that is the image i would have built

00:21:52,489 --> 00:21:57,289
previously from my docker file so it has

00:21:55,489 --> 00:21:58,669
all the bits of my application unit my

00:21:57,289 --> 00:22:00,739
runtime and everything in there and

00:21:58,669 --> 00:22:03,259
that's sitting up on it on a registry in

00:22:00,739 --> 00:22:06,340
this case it's sitting up on a registry

00:22:03,259 --> 00:22:10,279
called docker hub and that image is on

00:22:06,340 --> 00:22:11,659
the internet and I won't deploy that so

00:22:10,279 --> 00:22:14,269
my deployment says that's the image I

00:22:11,659 --> 00:22:17,779
want to deploy I'm saying that it

00:22:14,269 --> 00:22:19,909
exposes a user's a port 8080 for being

00:22:17,779 --> 00:22:22,809
able to access it from my web traffic I

00:22:19,909 --> 00:22:27,649
need to set some environment variables

00:22:22,809 --> 00:22:29,239
for the weather databases credentials

00:22:27,649 --> 00:22:31,489
for database and other bits and pieces I

00:22:29,239 --> 00:22:33,470
have a volume definition X I need

00:22:31,489 --> 00:22:36,519
persistent storage so there has always

00:22:33,470 --> 00:22:36,519
bits and pieces in there

00:22:37,850 --> 00:22:43,080
now in this case you know I've created

00:22:41,400 --> 00:22:45,570
that I knew how to create that if you've

00:22:43,080 --> 00:22:47,580
coming along and they've never used

00:22:45,570 --> 00:22:49,890
communities before what most people do

00:22:47,580 --> 00:22:52,260
is they'll go find some article or

00:22:49,890 --> 00:22:54,480
documentation and go oh I'll just cut

00:22:52,260 --> 00:22:57,080
and paste this I'll change the image

00:22:54,480 --> 00:22:59,790
name and then use it and hope it works

00:22:57,080 --> 00:23:02,210
that's honestly that is actually how

00:22:59,790 --> 00:23:04,410
most people would be doing this

00:23:02,210 --> 00:23:07,230
communities does provide you a little

00:23:04,410 --> 00:23:09,470
bit of assistance but not much on being

00:23:07,230 --> 00:23:12,510
able to create these deployment objects

00:23:09,470 --> 00:23:14,040
and they have two commands for this this

00:23:12,510 --> 00:23:16,080
first one called coop cuddle crate

00:23:14,040 --> 00:23:19,140
deployment and essentially you can give

00:23:16,080 --> 00:23:22,140
that the name of your image do you want

00:23:19,140 --> 00:23:24,780
to run and it gives you a starting point

00:23:22,140 --> 00:23:27,179
now unfortunately that's not really

00:23:24,780 --> 00:23:28,350
complete like there's no port in there

00:23:27,179 --> 00:23:30,330
how do I like that there's no

00:23:28,350 --> 00:23:31,559
environment variables there is another

00:23:30,330 --> 00:23:37,020
one which you can get you slightly

00:23:31,559 --> 00:23:39,420
further which is to cuddle run block and

00:23:37,020 --> 00:23:41,040
if I run that one you can see I can get

00:23:39,420 --> 00:23:42,990
a bit more information so I can define a

00:23:41,040 --> 00:23:46,710
port I can set up an environment

00:23:42,990 --> 00:23:48,179
variable I can say how many instances of

00:23:46,710 --> 00:23:51,540
my application have number of replicas I

00:23:48,179 --> 00:23:53,370
need so you can use those to sort of

00:23:51,540 --> 00:23:56,580
create a skeleton where you can start

00:23:53,370 --> 00:23:59,040
out with that to be honest your can't

00:23:56,580 --> 00:24:01,080
avoid in kubernetes having to drop down

00:23:59,040 --> 00:24:04,140
and start playing with Yammer or JSON

00:24:01,080 --> 00:24:06,179
files to deploy your applications that's

00:24:04,140 --> 00:24:09,260
again where that learning curve gets

00:24:06,179 --> 00:24:11,179
very steep very quickly

00:24:09,260 --> 00:24:15,769
but we'll start out with this second one

00:24:11,179 --> 00:24:19,299
a starting point and we will try and add

00:24:15,769 --> 00:24:22,309
bits and pieces to it so I've already

00:24:19,299 --> 00:24:24,529
taken that that one there from that coop

00:24:22,309 --> 00:24:27,429
cutter run I've dumped it in a file in

00:24:24,529 --> 00:24:32,149
my my directory here and I'm going to

00:24:27,429 --> 00:24:33,799
again use my coop cuddle apply now you

00:24:32,149 --> 00:24:35,240
can just use coupe club apply and give

00:24:33,799 --> 00:24:37,580
it a single file it's actually possible

00:24:35,240 --> 00:24:39,559
to have one file which has whole list of

00:24:37,580 --> 00:24:42,200
resources in there and you can have

00:24:39,559 --> 00:24:44,179
everything in one file now I've used a

00:24:42,200 --> 00:24:46,190
different strategy here which is to have

00:24:44,179 --> 00:24:49,279
a directory where each of my resources

00:24:46,190 --> 00:24:50,990
are separate file there's different ways

00:24:49,279 --> 00:24:52,580
you can approach this you can you can go

00:24:50,990 --> 00:24:55,120
to that and there's a link in in the

00:24:52,580 --> 00:24:57,289
notes there off to where there's a

00:24:55,120 --> 00:24:58,880
discussion on the cuba news

00:24:57,289 --> 00:25:01,789
documentation about the different ways

00:24:58,880 --> 00:25:05,260
you can do things because with that cube

00:25:01,789 --> 00:25:07,700
cuddle run command I I did a dry run

00:25:05,260 --> 00:25:10,669
option just to see what it would create

00:25:07,700 --> 00:25:12,950
if I left that dry run option off it

00:25:10,669 --> 00:25:15,620
would actually go and create that

00:25:12,950 --> 00:25:17,720
resource in kubernetes and actually get

00:25:15,620 --> 00:25:19,760
my image deployed and that's what's

00:25:17,720 --> 00:25:21,830
called an imperative command essentially

00:25:19,760 --> 00:25:23,330
you're making in action essentially

00:25:21,830 --> 00:25:26,600
telling I don't do this and it's going

00:25:23,330 --> 00:25:29,600
going to do it the problem with that is

00:25:26,600 --> 00:25:32,679
that when you do it the only record of

00:25:29,600 --> 00:25:35,899
your configuration exists in kubernetes

00:25:32,679 --> 00:25:38,299
so if I want to make changes after then

00:25:35,899 --> 00:25:40,220
go edit in kubernetes now you can do

00:25:38,299 --> 00:25:43,610
that as a coop cuddle edit command which

00:25:40,220 --> 00:25:47,210
allows should edit but how then do I

00:25:43,610 --> 00:25:49,820
reproduce it on another cluster you sort

00:25:47,210 --> 00:25:51,200
of like gotta extract it and move it out

00:25:49,820 --> 00:25:54,049
and that can be a bit of a problem

00:25:51,200 --> 00:25:56,029
moving configuration from one cluster to

00:25:54,049 --> 00:26:00,409
another so they're much better ways to

00:25:56,029 --> 00:26:02,419
always capture your configurations in a

00:26:00,409 --> 00:26:04,490
file in the filesystem get it under

00:26:02,419 --> 00:26:07,070
version control so that you can track it

00:26:04,490 --> 00:26:09,470
so that's what I've done here I've got a

00:26:07,070 --> 00:26:11,779
directory in there with my files in it

00:26:09,470 --> 00:26:14,120
and I'm gonna have one file per resource

00:26:11,779 --> 00:26:16,130
instead of one with lots in it

00:26:14,120 --> 00:26:18,440
so I can just see and shikoku color

00:26:16,130 --> 00:26:19,420
apply give it the directory and it will

00:26:18,440 --> 00:26:22,540
go and

00:26:19,420 --> 00:26:27,130
boy that so I'll have that deployment

00:26:22,540 --> 00:26:28,480
now popping up over here again there's

00:26:27,130 --> 00:26:32,680
just a deployment I'm missing my little

00:26:28,480 --> 00:26:35,520
bit so let's uh but some move on to

00:26:32,680 --> 00:26:38,740
those sets that's running so I've got my

00:26:35,520 --> 00:26:40,840
image my application deployed it's

00:26:38,740 --> 00:26:42,760
running in a container it's just not

00:26:40,840 --> 00:26:45,120
terribly useful you because I can't

00:26:42,760 --> 00:26:45,120
access it

00:26:46,660 --> 00:26:50,860
now let's have a look at the what's

00:26:48,490 --> 00:26:53,200
happened here first so let's lose our

00:26:50,860 --> 00:26:57,010
coop cuddle get command and we're going

00:26:53,200 --> 00:26:58,900
to list there now I created a deployment

00:26:57,010 --> 00:27:00,970
resource but you'll actually see that

00:26:58,900 --> 00:27:02,679
there's actually being a lot of other

00:27:00,970 --> 00:27:05,020
things created in there it's also

00:27:02,679 --> 00:27:09,429
created what's called a replica set and

00:27:05,020 --> 00:27:12,309
some pods now what that deployment

00:27:09,429 --> 00:27:15,669
object actually is is it acts as a

00:27:12,309 --> 00:27:17,410
template so when I create the

00:27:15,669 --> 00:27:20,409
deployments acting as a template for the

00:27:17,410 --> 00:27:23,200
creation of the replica set the replica

00:27:20,409 --> 00:27:26,049
set is in turn acting as a template for

00:27:23,200 --> 00:27:27,580
the pods now you remember I created that

00:27:26,049 --> 00:27:30,130
deployment initially saying I wondered

00:27:27,580 --> 00:27:32,770
two replicas so the two things you have

00:27:30,130 --> 00:27:36,220
here is the pots the pods represent the

00:27:32,770 --> 00:27:39,610
instances of your application so I have

00:27:36,220 --> 00:27:41,919
my two instances set the replica set is

00:27:39,610 --> 00:27:44,830
like a it's like a little bookkeeping

00:27:41,919 --> 00:27:48,429
management thing in some respects it's

00:27:44,830 --> 00:27:50,890
it's there to drive some mechanisms

00:27:48,429 --> 00:27:53,409
inside of kubernetes which manage pods

00:27:50,890 --> 00:27:55,390
so from that replica set communities

00:27:53,409 --> 00:27:56,919
will monitor replica sets it's from that

00:27:55,390 --> 00:27:58,450
can see are you wanted to actually

00:27:56,919 --> 00:28:00,520
deploy that application how many

00:27:58,450 --> 00:28:01,960
instances and it will then manage the

00:28:00,520 --> 00:28:05,380
number of pods will ensure you've got

00:28:01,960 --> 00:28:07,140
two replicas running so some magic

00:28:05,380 --> 00:28:10,240
little things going in there internally

00:28:07,140 --> 00:28:11,620
I won't go into too much it's just to

00:28:10,240 --> 00:28:16,090
sort of get you the idea that these

00:28:11,620 --> 00:28:17,320
things are happening so yes I look in

00:28:16,090 --> 00:28:18,460
there if you if you did look at the

00:28:17,320 --> 00:28:20,260
replica set you'll see that there's a

00:28:18,460 --> 00:28:21,669
lot of overlap there with what was in

00:28:20,260 --> 00:28:24,820
the deployment and I said that's because

00:28:21,669 --> 00:28:26,260
they're testing us this this deployment

00:28:24,820 --> 00:28:29,500
is acting as a template for the replica

00:28:26,260 --> 00:28:33,669
set and and similarly I can look for

00:28:29,500 --> 00:28:35,440
each pod and I'm just looking at

00:28:33,669 --> 00:28:37,389
oh yeah look up both here same thing

00:28:35,440 --> 00:28:39,579
it's you'll see a lot of overlap because

00:28:37,389 --> 00:28:41,529
the information is flowed through so a

00:28:39,579 --> 00:28:42,549
pod represents an instance of your

00:28:41,529 --> 00:28:44,429
application

00:28:42,549 --> 00:28:46,659
the replica set is essentially a

00:28:44,429 --> 00:28:49,149
configuration of synthetic synthesized

00:28:46,659 --> 00:28:50,889
one which communities used to know it

00:28:49,149 --> 00:28:54,869
has to monitor your application and keep

00:28:50,889 --> 00:28:54,869
how many instances running all the time

00:28:59,730 --> 00:29:05,580
so one of the things here is in that

00:29:02,669 --> 00:29:07,080
deployment we set the number of replicas

00:29:05,580 --> 00:29:13,350
now and that's why we ended up with

00:29:07,080 --> 00:29:15,419
number two so you can one of the good

00:29:13,350 --> 00:29:18,210
things about kubernetes is that scaling

00:29:15,419 --> 00:29:19,889
apps is really really simple it is

00:29:18,210 --> 00:29:21,779
purely just that number in there which

00:29:19,889 --> 00:29:24,480
controls and there are instances I got I

00:29:21,779 --> 00:29:26,309
don't have to go and create new resource

00:29:24,480 --> 00:29:28,889
definitions for each instance the

00:29:26,309 --> 00:29:31,110
deployment replica set plugs that flow

00:29:28,889 --> 00:29:33,690
means I just all I need to do to scale

00:29:31,110 --> 00:29:37,110
up an application is change that number

00:29:33,690 --> 00:29:38,940
of replicas so we can do that so I can

00:29:37,110 --> 00:29:42,779
run this command cuneta scale deployment

00:29:38,940 --> 00:29:45,659
replicas and and it is going to start up

00:29:42,779 --> 00:29:47,309
a new one you'll see how it's starting

00:29:45,659 --> 00:29:49,409
up my new instance there in a new

00:29:47,309 --> 00:29:54,510
container so if I keep doing this

00:29:49,409 --> 00:29:56,610
command I'm now up and running now I

00:29:54,510 --> 00:29:59,549
haven't had to make any decisions there

00:29:56,610 --> 00:30:01,409
about where that instance runs and we're

00:29:59,549 --> 00:30:03,899
running a cluster here with 20 nodes

00:30:01,409 --> 00:30:05,190
because frankly we had no have no idea

00:30:03,899 --> 00:30:07,230
how many people were going to turn up I

00:30:05,190 --> 00:30:09,809
asked the organizers how BIG's the room

00:30:07,230 --> 00:30:12,120
you've given us two or three hundred

00:30:09,809 --> 00:30:15,630
people and we had no idea big the

00:30:12,120 --> 00:30:19,260
conference was so really big cluster I'm

00:30:15,630 --> 00:30:20,580
much bigger than we needed but I didn't

00:30:19,260 --> 00:30:22,940
have to make a decision about where that

00:30:20,580 --> 00:30:26,610
ran that kubernetes knows I want free

00:30:22,940 --> 00:30:29,549
replicas so it will look at what

00:30:26,610 --> 00:30:31,049
requirements my application may need if

00:30:29,549 --> 00:30:33,929
I've defined it in terms of how much

00:30:31,049 --> 00:30:36,120
memory and CPU it needs and it will look

00:30:33,929 --> 00:30:39,419
at what resources are available in that

00:30:36,120 --> 00:30:41,460
cluster and it will go okay I've got a

00:30:39,419 --> 00:30:44,159
node over here in my cluster which is

00:30:41,460 --> 00:30:46,529
got lots of resources available all

00:30:44,159 --> 00:30:51,179
going started over there and you don't

00:30:46,529 --> 00:30:53,460
have to worry about now when I ran this

00:30:51,179 --> 00:30:53,970
cube cuddle scaled deployment or scale

00:30:53,460 --> 00:30:57,090
command

00:30:53,970 --> 00:30:59,190
I always modifying the deployment

00:30:57,090 --> 00:31:00,630
resource definition inside kubernetes

00:30:59,190 --> 00:31:02,580
now you remember what I mentioned before

00:31:00,630 --> 00:31:06,059
about difference between making edits in

00:31:02,580 --> 00:31:08,039
kubernetes and keeping them in files my

00:31:06,059 --> 00:31:11,400
local configuration is now out of sync

00:31:08,039 --> 00:31:13,289
with what is in the cluster

00:31:11,400 --> 00:31:15,390
and this is where keeping your files is

00:31:13,289 --> 00:31:17,039
good because if someone does a mistake

00:31:15,390 --> 00:31:19,559
like that you do need to bring it back

00:31:17,039 --> 00:31:21,539
to what it was before I can actually go

00:31:19,559 --> 00:31:25,559
back and run the exact same command I

00:31:21,539 --> 00:31:28,039
run before to deploy it and say Coupet

00:31:25,559 --> 00:31:30,360
apply again here's my directory of files

00:31:28,039 --> 00:31:32,520
kubernetes will see are actually you

00:31:30,360 --> 00:31:35,760
want to go back to that and it will go

00:31:32,520 --> 00:31:37,919
and do what I essentially bring the

00:31:35,760 --> 00:31:39,690
state of the cluster application the

00:31:37,919 --> 00:31:41,429
cost of back to agree with what my

00:31:39,690 --> 00:31:44,250
configuration said so it's already

00:31:41,429 --> 00:31:46,620
scaled that back down to two because my

00:31:44,250 --> 00:31:49,010
resource file which I'd used only had

00:31:46,620 --> 00:31:51,090
two in it I scaled up to free manually I

00:31:49,010 --> 00:31:53,490
reapplied to configure to put it back to

00:31:51,090 --> 00:31:55,289
two so this is why it's important it

00:31:53,490 --> 00:31:57,299
gives you that ability to reproduce your

00:31:55,289 --> 00:32:00,210
deployments so always use the config

00:31:57,299 --> 00:32:02,190
files in your version control rather

00:32:00,210 --> 00:32:04,530
than trying to make manual changes like

00:32:02,190 --> 00:32:07,740
manual changes in kubernetes is fine in

00:32:04,530 --> 00:32:09,659
development but production and ability

00:32:07,740 --> 00:32:11,900
to redeploy things or issues comfort

00:32:09,659 --> 00:32:11,900
folks

00:32:12,840 --> 00:32:18,809
okay now I mentioned a bit about

00:32:16,400 --> 00:32:20,220
kubernetes making decisions about where

00:32:18,809 --> 00:32:22,140
to run things and one of the things I

00:32:20,220 --> 00:32:24,799
mentioned earlier was the fact that if

00:32:22,140 --> 00:32:27,870
an instance my application will die

00:32:24,799 --> 00:32:30,600
communities knows how many I want so it

00:32:27,870 --> 00:32:32,760
will take care of ensuring I already

00:32:30,600 --> 00:32:35,429
have always have that number so I'm

00:32:32,760 --> 00:32:37,590
watching here the pods

00:32:35,429 --> 00:32:39,480
I have they're running or if my

00:32:37,590 --> 00:32:42,390
instances so if I actually go and delete

00:32:39,480 --> 00:32:46,440
one you'll see that my pod is

00:32:42,390 --> 00:32:48,029
terminating and communities realized oh

00:32:46,440 --> 00:32:50,100
one of them means this application has

00:32:48,029 --> 00:32:52,080
died so it will go oh you actually

00:32:50,100 --> 00:32:54,570
wanted to we're down to one now so we

00:32:52,080 --> 00:32:56,880
will go and create a new one for me and

00:32:54,570 --> 00:32:58,679
so always ensure that it has those two

00:32:56,880 --> 00:33:01,770
rerunning if your application starts

00:32:58,679 --> 00:33:03,510
question and again it will make a

00:33:01,770 --> 00:33:04,860
decision about where to put that and

00:33:03,510 --> 00:33:07,500
actually may microwave that to a

00:33:04,860 --> 00:33:10,039
different node if the resource balance

00:33:07,500 --> 00:33:10,039
have changed

00:33:14,200 --> 00:33:18,389
so I wear four pods container so

00:33:16,570 --> 00:33:22,210
essentially the pod is the instance

00:33:18,389 --> 00:33:25,480
inside a pod the pod essentially is a

00:33:22,210 --> 00:33:27,100
wrapper around a container so we started

00:33:25,480 --> 00:33:29,679
off with containers pot essentially is

00:33:27,100 --> 00:33:32,169
an abstraction inside of kubernetes to

00:33:29,679 --> 00:33:34,119
wrap one or more containers because when

00:33:32,169 --> 00:33:37,389
we were doing that scaling the number of

00:33:34,119 --> 00:33:39,850
replicas what the the scaling unit is

00:33:37,389 --> 00:33:43,299
the pod so I could have a grouping of

00:33:39,850 --> 00:33:45,129
multiple containers but when I scale it

00:33:43,299 --> 00:33:49,149
they're all going to get scaled together

00:33:45,129 --> 00:33:51,070
now I had a database in a front-end I

00:33:49,149 --> 00:33:52,629
have them as separate deployments

00:33:51,070 --> 00:33:55,119
I'm not running them as different

00:33:52,629 --> 00:33:57,369
containers of you in the one pod or

00:33:55,119 --> 00:33:58,419
group because I need to be able to scale

00:33:57,369 --> 00:34:01,389
them independently

00:33:58,419 --> 00:34:03,850
okay usually you're going to end up with

00:34:01,389 --> 00:34:06,100
one container per pot there are use

00:34:03,850 --> 00:34:09,159
cases for having more than one container

00:34:06,100 --> 00:34:11,530
grouped in a pod together and one

00:34:09,159 --> 00:34:14,369
example of that is things called sidecar

00:34:11,530 --> 00:34:16,960
containers if you needed to add in a

00:34:14,369 --> 00:34:18,460
special process for handling

00:34:16,960 --> 00:34:20,379
instrumentation for collection of

00:34:18,460 --> 00:34:22,569
metrics and so on you might use that but

00:34:20,379 --> 00:34:25,059
usually is one container pot so the

00:34:22,569 --> 00:34:27,669
relationship now is container is wrapped

00:34:25,059 --> 00:34:29,859
by a pod pod is managed by the replica

00:34:27,669 --> 00:34:31,659
set the definition of replica set was

00:34:29,859 --> 00:34:34,200
controlled by the point so that's the

00:34:31,659 --> 00:34:34,200
relationship

00:34:39,179 --> 00:34:45,480
so the node when I talk about in the

00:34:40,890 --> 00:34:48,600
cluster it can be a physical machine or

00:34:45,480 --> 00:34:50,220
it can be a sense it's an instance of an

00:34:48,600 --> 00:34:51,899
operating system right so it can be

00:34:50,220 --> 00:34:54,870
deployed to physical hardware or could

00:34:51,899 --> 00:34:57,860
to be ployed in a virtual machine in a

00:34:54,870 --> 00:34:57,860
virtualized environment

00:35:01,450 --> 00:35:05,590
so I have all these pods now you need to

00:35:03,340 --> 00:35:09,490
know what these pods are doing so it is

00:35:05,590 --> 00:35:12,490
possible to get the logs out so you just

00:35:09,490 --> 00:35:14,800
need to know the name of the pod and

00:35:12,490 --> 00:35:16,300
I've just done a funny horrible script

00:35:14,800 --> 00:35:18,700
here to get the name as a pod out so

00:35:16,300 --> 00:35:20,950
I've got a name of one pod and I can

00:35:18,700 --> 00:35:23,230
look at the logs for that and we see

00:35:20,950 --> 00:35:24,070
that it's a django application using mod

00:35:23,230 --> 00:35:25,990
whiskey

00:35:24,070 --> 00:35:33,010
everyone thinks mod whisk is great if

00:35:25,990 --> 00:35:37,210
you're a Python developer so you can get

00:35:33,010 --> 00:35:40,120
logs out by default it's like docker you

00:35:37,210 --> 00:35:43,000
have to go to every pod to get the

00:35:40,120 --> 00:35:44,770
separate logs out but it is possible to

00:35:43,000 --> 00:35:47,050
deploy two kubernetes cluster what's

00:35:44,770 --> 00:35:48,390
called aggregated logging which can

00:35:47,050 --> 00:35:51,670
bring the logs for all these different

00:35:48,390 --> 00:35:56,380
pods together into a common application

00:35:51,670 --> 00:35:58,870
and one solution for that often is I'm

00:35:56,380 --> 00:36:01,570
gonna get this wrong elasticsearch fluid

00:35:58,870 --> 00:36:03,850
D Cabana combination of those tools but

00:36:01,570 --> 00:36:05,620
there are other options as well and

00:36:03,850 --> 00:36:08,010
usually that or sometimes they can be

00:36:05,620 --> 00:36:10,360
integrated into the the web console

00:36:08,010 --> 00:36:11,530
we've open if that is the case so you

00:36:10,360 --> 00:36:13,770
can very easily get to that all

00:36:11,530 --> 00:36:17,680
aggregated logging mechanism

00:36:13,770 --> 00:36:19,570
now we get to logging now each of these

00:36:17,680 --> 00:36:22,090
pods are sexually it's like a little

00:36:19,570 --> 00:36:23,920
mini host and it is actually possible to

00:36:22,090 --> 00:36:27,010
get into them if you need to interact

00:36:23,920 --> 00:36:30,340
with the processes in that app so I can

00:36:27,010 --> 00:36:33,180
run a coop cuddle exec command and run

00:36:30,340 --> 00:36:35,860
command in there to show my environment

00:36:33,180 --> 00:36:37,720
that one old C exit straight away but it

00:36:35,860 --> 00:36:41,260
could actually also get in there and run

00:36:37,720 --> 00:36:43,960
an instance of bash and get in there and

00:36:41,260 --> 00:36:45,490
what run whatever commands I want you

00:36:43,960 --> 00:36:46,690
know look at the files like a new track

00:36:45,490 --> 00:36:49,720
with file system I can look at the

00:36:46,690 --> 00:36:53,380
processes I could be nasty and kill

00:36:49,720 --> 00:36:55,030
processes but obviously if you if you

00:36:53,380 --> 00:36:57,820
kill that special one at the top number

00:36:55,030 --> 00:36:59,560
one your container will exit but thank

00:36:57,820 --> 00:37:01,950
you now is a restart for you that's not

00:36:59,560 --> 00:37:01,950
too bad

00:37:02,670 --> 00:37:07,900
now so we have application we can get

00:37:06,520 --> 00:37:10,180
into them we can see logging but we

00:37:07,900 --> 00:37:12,880
still can't access them now each one of

00:37:10,180 --> 00:37:15,070
those pods I said it acts like a little

00:37:12,880 --> 00:37:17,860
host now each pod does get its own IP

00:37:15,070 --> 00:37:19,870
address that IP address is only

00:37:17,860 --> 00:37:24,310
accessible with inside of the kubernetes

00:37:19,870 --> 00:37:26,320
cluster not outside but dealing with IP

00:37:24,310 --> 00:37:28,420
addresses when communicating between

00:37:26,320 --> 00:37:29,680
components and application is a pain in

00:37:28,420 --> 00:37:32,500
the neck you don't know what these IP

00:37:29,680 --> 00:37:35,800
addresses are in advance and if the pod

00:37:32,500 --> 00:37:37,330
gets killed and replaced it gets another

00:37:35,800 --> 00:37:38,460
different IP address things will change

00:37:37,330 --> 00:37:40,990
all the time

00:37:38,460 --> 00:37:45,580
so Kouba News has this idea of a service

00:37:40,990 --> 00:37:51,940
resource which you can creep now if I

00:37:45,580 --> 00:37:54,690
run this command am i still inside okay

00:37:51,940 --> 00:37:54,690
I thought I press X

00:37:55,590 --> 00:37:59,730
you'll see HS s different IP address now

00:37:58,050 --> 00:38:02,490
when you have multiple instances I want

00:37:59,730 --> 00:38:05,910
to be able to talk to these by one IP

00:38:02,490 --> 00:38:08,070
address rather than multiple so this

00:38:05,910 --> 00:38:10,670
service we have a server ID of a service

00:38:08,070 --> 00:38:12,750
abstraction you can see it up there

00:38:10,670 --> 00:38:15,930
essentially on creating a service called

00:38:12,750 --> 00:38:18,330
blog has a label again and then it has

00:38:15,930 --> 00:38:20,730
this definition here that I'm going to

00:38:18,330 --> 00:38:24,030
create a service the service has its own

00:38:20,730 --> 00:38:26,670
IP address has bought 8080 and what's

00:38:24,030 --> 00:38:29,040
going to happen is it's going to map any

00:38:26,670 --> 00:38:31,350
connections to port 8080 on its IP

00:38:29,040 --> 00:38:33,600
address and route that for automatically

00:38:31,350 --> 00:38:37,020
to one of the instances mypod for me

00:38:33,600 --> 00:38:38,820
where which pods are used is determined

00:38:37,020 --> 00:38:40,890
by this selector and that's where I

00:38:38,820 --> 00:38:45,930
mentioned before about labels being very

00:38:40,890 --> 00:38:50,130
important so I can apply this and it

00:38:45,930 --> 00:38:54,420
creates me a service I have a service

00:38:50,130 --> 00:38:59,550
the service has its own IP address and I

00:38:54,420 --> 00:39:01,920
can I mentioned that the label so that

00:38:59,550 --> 00:39:03,690
selector in their app blog essentially

00:39:01,920 --> 00:39:05,550
it's the same as looking up the pods by

00:39:03,690 --> 00:39:07,320
that label selector those are the things

00:39:05,550 --> 00:39:10,080
will get mapped behind that service I

00:39:07,320 --> 00:39:12,540
can actually look specifically at which

00:39:10,080 --> 00:39:14,970
ones are mapped by looking at what's

00:39:12,540 --> 00:39:17,250
called the endpoints and it will show me

00:39:14,970 --> 00:39:19,110
the two IP addresses for the pods and

00:39:17,250 --> 00:39:22,500
they are mapped now behind that IP

00:39:19,110 --> 00:39:24,980
address for the service again it's still

00:39:22,500 --> 00:39:28,860
an IP address they are pain to deal with

00:39:24,980 --> 00:39:31,290
so the name of that service is added

00:39:28,860 --> 00:39:33,720
into an internal DNS server inside of

00:39:31,290 --> 00:39:36,690
the kubernetes cluster so I can access

00:39:33,720 --> 00:39:39,630
that using a host name of block I don't

00:39:36,690 --> 00:39:41,520
need to use the IP address so if I need

00:39:39,630 --> 00:39:43,410
to access it internally like if I'm in

00:39:41,520 --> 00:39:45,750
the same namespace I can just say blog

00:39:43,410 --> 00:39:47,370
host name or if I need to access it from

00:39:45,750 --> 00:39:51,810
another namespace if I have that ability

00:39:47,370 --> 00:39:54,750
I can use blog namespace name service

00:39:51,810 --> 00:39:57,270
and port and so you know I think so I

00:39:54,750 --> 00:39:58,950
can access it but I'm accessing this

00:39:57,270 --> 00:40:01,200
because I my terminal is running in the

00:39:58,950 --> 00:40:03,900
cluster I'm not outside still yet so

00:40:01,200 --> 00:40:07,200
this is still not public

00:40:03,900 --> 00:40:09,440
so we can now expose that and to do that

00:40:07,200 --> 00:40:12,480
we use what's called an ingress

00:40:09,440 --> 00:40:14,190
essentially saying here's the hostname I

00:40:12,480 --> 00:40:18,779
when I make this thing available outside

00:40:14,190 --> 00:40:21,180
of my cluster F and this is the name of

00:40:18,779 --> 00:40:23,130
the service which I want the that

00:40:21,180 --> 00:40:24,869
request to be mapped into and

00:40:23,130 --> 00:40:27,089
all-seasons service has a mapping to the

00:40:24,869 --> 00:40:29,609
pods so what will happen now is the

00:40:27,089 --> 00:40:31,529
request will come in from outside hit

00:40:29,609 --> 00:40:34,230
the router which is configured with this

00:40:31,529 --> 00:40:35,730
ingress and it will then distribute that

00:40:34,230 --> 00:40:40,079
will send that traffic to one of the

00:40:35,730 --> 00:40:43,140
instances of the pods so I can apply

00:40:40,079 --> 00:40:45,210
that I now have an ingress created and

00:40:43,140 --> 00:40:48,210
we can see that that's the host name was

00:40:45,210 --> 00:40:49,799
created now internally to the cluster my

00:40:48,210 --> 00:40:53,279
service and pods were listening on port

00:40:49,799 --> 00:40:55,200
8080 now outside of the cluster using

00:40:53,279 --> 00:40:56,970
non-standard ports it's not real good

00:40:55,200 --> 00:40:58,859
but the router is smart enough the way

00:40:56,970 --> 00:41:01,319
ingress is set up is that externally

00:40:58,859 --> 00:41:03,450
people will be using port 80 so standard

00:41:01,319 --> 00:41:07,170
port and the router of map set free

00:41:03,450 --> 00:41:10,890
automatically to port 8080 internally so

00:41:07,170 --> 00:41:11,519
that does it all for me one very

00:41:10,890 --> 00:41:13,890
important thing

00:41:11,519 --> 00:41:16,200
don't shoot here maybe how we deleted

00:41:13,890 --> 00:41:18,420
our instances our pod earlier and it

00:41:16,200 --> 00:41:21,569
created a new one it got a different IP

00:41:18,420 --> 00:41:23,640
address q mary's will worry all about

00:41:21,569 --> 00:41:26,339
that when I delete a pod and it comes up

00:41:23,640 --> 00:41:28,259
with a new IP address the old pot is

00:41:26,339 --> 00:41:30,349
automatically removed from the list of

00:41:28,259 --> 00:41:32,970
endpoints from the service and from the

00:41:30,349 --> 00:41:36,029
pods that the router is sending traffic

00:41:32,970 --> 00:41:38,009
to and it will automatically add that IP

00:41:36,029 --> 00:41:40,589
address back into the services a new one

00:41:38,009 --> 00:41:43,410
and again for the ingress so it worries

00:41:40,589 --> 00:41:45,239
about reconfiguring the internal

00:41:43,410 --> 00:41:47,539
networking service and the router for

00:41:45,239 --> 00:41:50,519
you and you don't have to worry about it

00:41:47,539 --> 00:41:53,460
so I've got that up up running now and I

00:41:50,519 --> 00:41:55,049
can go visit it again now this time I

00:41:53,460 --> 00:41:56,849
happen to have some data and that's only

00:41:55,049 --> 00:41:58,470
because I'm not using my real database

00:41:56,849 --> 00:42:00,150
yet this is using an internal test

00:41:58,470 --> 00:42:02,509
database when I deploy it without a real

00:42:00,150 --> 00:42:02,509
database

00:42:04,200 --> 00:42:10,570
so to link to database we need to set

00:42:08,410 --> 00:42:12,540
some environment variables so so that

00:42:10,570 --> 00:42:14,920
was our resources through our database

00:42:12,540 --> 00:42:17,500
so you know hopefully now now with

00:42:14,920 --> 00:42:21,580
deployment and services we have a couple

00:42:17,500 --> 00:42:23,230
others of system volume and secret and I

00:42:21,580 --> 00:42:24,820
can see that on my deployment for my

00:42:23,230 --> 00:42:26,500
blog I currently have one environment

00:42:24,820 --> 00:42:28,600
variable now I want to set some others

00:42:26,500 --> 00:42:31,150
in there for the name of the host of the

00:42:28,600 --> 00:42:33,370
database now we know from the what is it

00:42:31,150 --> 00:42:36,310
before about a service name acts as the

00:42:33,370 --> 00:42:38,110
host name from my database internally so

00:42:36,310 --> 00:42:40,780
by my host name for my database is gonna

00:42:38,110 --> 00:42:43,450
be blog dashdb I need to spy a user's

00:42:40,780 --> 00:42:45,840
password and database name so I need to

00:42:43,450 --> 00:42:45,840
set those

00:42:52,869 --> 00:42:58,749
so cube News has a command a cup cuddle

00:42:55,930 --> 00:43:01,119
Supes set in which does allow me to set

00:42:58,749 --> 00:43:03,009
environment variables and that's okay

00:43:01,119 --> 00:43:06,779
for setting individual one environment

00:43:03,009 --> 00:43:09,609
variable for the host and I can do that

00:43:06,779 --> 00:43:10,989
and essentially if you look at the

00:43:09,609 --> 00:43:14,279
definition what it's doing is just

00:43:10,989 --> 00:43:17,049
filling in some extra fields in my llamo

00:43:14,279 --> 00:43:18,849
but for the credentials of the database

00:43:17,049 --> 00:43:22,089
I actually have them stored in what's

00:43:18,849 --> 00:43:23,559
called a secret this is a way of putting

00:43:22,089 --> 00:43:26,650
information and storing the

00:43:23,559 --> 00:43:29,469
configuration for that as part of the

00:43:26,650 --> 00:43:31,239
communities now the database authority

00:43:29,469 --> 00:43:32,710
using those I want to reuse those in my

00:43:31,239 --> 00:43:34,299
front end I don't wanna have to enter

00:43:32,710 --> 00:43:37,150
them in separately that way I can keep

00:43:34,299 --> 00:43:38,799
them in one spot so the the cou kettle

00:43:37,150 --> 00:43:42,069
set F command has a way of essentially

00:43:38,799 --> 00:43:44,739
setting up the definition of my yam or

00:43:42,069 --> 00:43:46,809
to say I need to set this environment

00:43:44,739 --> 00:43:50,349
rails but use them from this secret so

00:43:46,809 --> 00:43:51,759
I'm not creating them separately so see

00:43:50,349 --> 00:43:53,109
curses way of storing configuration

00:43:51,759 --> 00:43:54,460
there's another thing in communities

00:43:53,109 --> 00:43:56,650
called a conflict map which I don't go

00:43:54,460 --> 00:43:59,469
into here which is very similar secrets

00:43:56,650 --> 00:44:01,119
is essentially the same as conflict map

00:43:59,469 --> 00:44:03,219
but just provides some extra guarantees

00:44:01,119 --> 00:44:05,049
around about how information is saved in

00:44:03,219 --> 00:44:07,979
the cluster it's never saved a disk for

00:44:05,049 --> 00:44:07,979
example in secret

00:44:10,460 --> 00:44:18,109
so from those I can update my general

00:44:14,900 --> 00:44:20,420
definition adding my extra hosts and

00:44:18,109 --> 00:44:21,980
also using it from the secret for the

00:44:20,420 --> 00:44:24,800
other controls and again I can just

00:44:21,980 --> 00:44:26,750
apply that I've now linked my front end

00:44:24,800 --> 00:44:29,599
to my database now when I'm making

00:44:26,750 --> 00:44:31,730
changes like this to the environment

00:44:29,599 --> 00:44:33,500
variables communities are smart enough

00:44:31,730 --> 00:44:36,170
to know that's a configuration change

00:44:33,500 --> 00:44:37,940
and is really deploying my pods for me

00:44:36,170 --> 00:44:40,460
so it's deleting the old ones and bring

00:44:37,940 --> 00:44:46,910
up new instances and it's doing that all

00:44:40,460 --> 00:44:49,490
for me let's think together

00:44:46,910 --> 00:44:52,250
now if you've Millia with Django you'll

00:44:49,490 --> 00:44:53,930
know that break it will can Auto

00:44:52,250 --> 00:44:55,910
configure that they figure the database

00:44:53,930 --> 00:44:59,059
for me but I need to set a credential

00:44:55,910 --> 00:45:03,050
and that's where I can use the fact that

00:44:59,059 --> 00:45:05,030
I can exec into a pod to do a command

00:45:03,050 --> 00:45:06,319
and I'm going to have a little magic

00:45:05,030 --> 00:45:07,400
shell script e we're just going to do

00:45:06,319 --> 00:45:09,829
some things for me it's going to check

00:45:07,400 --> 00:45:15,140
my migration is happening and I can go

00:45:09,829 --> 00:45:17,690
and add my credentials in so I've set up

00:45:15,140 --> 00:45:19,549
a setup that that'll actually also

00:45:17,690 --> 00:45:21,680
pre-loaded some content in my real

00:45:19,549 --> 00:45:24,430
database now as well so I have

00:45:21,680 --> 00:45:24,430
everything going

00:45:27,470 --> 00:45:32,930
now one final thing and we've got five

00:45:29,660 --> 00:45:34,550
minutes left it's excellent this

00:45:32,930 --> 00:45:36,440
particular web application it's storing

00:45:34,550 --> 00:45:39,980
blog post information the database is

00:45:36,440 --> 00:45:42,829
giving persistence for that now but I

00:45:39,980 --> 00:45:45,170
also need to store images for images

00:45:42,829 --> 00:45:48,319
uploaded with blog posts now for that I

00:45:45,170 --> 00:45:49,790
need persistent storage so what we can

00:45:48,319 --> 00:45:52,280
do here community supports the concept

00:45:49,790 --> 00:45:54,890
of persistent volumes so you can have a

00:45:52,280 --> 00:45:56,599
whole bunch of storage available and you

00:45:54,890 --> 00:46:00,020
can make what's called a persistent

00:45:56,599 --> 00:46:04,700
volume claim that essentially says that

00:46:00,020 --> 00:46:07,250
I need storage of a particular size a

00:46:04,700 --> 00:46:09,980
particular type and I need it from my

00:46:07,250 --> 00:46:12,140
application so it supports a number of

00:46:09,980 --> 00:46:14,420
different types of storage or access

00:46:12,140 --> 00:46:17,869
modes depending on whether you need

00:46:14,420 --> 00:46:20,710
storage which can be mounted on multiple

00:46:17,869 --> 00:46:23,440
nodes in a cluster at the same time

00:46:20,710 --> 00:46:25,880
which is far like filesystem storage or

00:46:23,440 --> 00:46:27,859
with a database for example we only have

00:46:25,880 --> 00:46:31,190
at one instance so we know we can get

00:46:27,859 --> 00:46:33,530
away with a type of storage that's only

00:46:31,190 --> 00:46:35,599
or only could be mounted on one node

00:46:33,530 --> 00:46:37,880
time so elastic block storage in Amazon

00:46:35,599 --> 00:46:39,640
for example so you can describe the

00:46:37,880 --> 00:46:46,520
characteristics of the storage you need

00:46:39,640 --> 00:46:47,960
by your yeah more definition and we

00:46:46,520 --> 00:46:49,609
could create that and essentially if

00:46:47,960 --> 00:46:52,310
then companies will say ok I've

00:46:49,609 --> 00:46:54,230
allocated storage but I still need to

00:46:52,310 --> 00:46:55,760
actually mount that in my application so

00:46:54,230 --> 00:46:58,490
I need to go back to my original

00:46:55,760 --> 00:47:01,490
deployment now an ad actually a couple

00:46:58,490 --> 00:47:03,440
of extra bits of information and and

00:47:01,490 --> 00:47:05,390
that is the first one is that this

00:47:03,440 --> 00:47:07,400
deployment is going to need that

00:47:05,390 --> 00:47:11,089
persistent volume claim that was just

00:47:07,400 --> 00:47:12,770
created that storage and I need to go

00:47:11,089 --> 00:47:15,380
into each of the definitions for the

00:47:12,770 --> 00:47:17,740
container in that pod described in the

00:47:15,380 --> 00:47:19,609
deployment and say I want to mount that

00:47:17,740 --> 00:47:22,940
persistent volume a dist directory

00:47:19,609 --> 00:47:25,160
inside of that container

00:47:22,940 --> 00:47:27,049
so again updating my original Yammer

00:47:25,160 --> 00:47:31,759
file on disk I've added those there at

00:47:27,049 --> 00:47:33,680
the bottom I can apply those and I now

00:47:31,759 --> 00:47:35,839
have deployment ingress persistent

00:47:33,680 --> 00:47:38,150
volume and service block and we're back

00:47:35,839 --> 00:47:41,589
now to what we had when I deployed it in

00:47:38,150 --> 00:47:46,670
all in one go so if I were to go back to

00:47:41,589 --> 00:47:48,019
my blog now I've set my my password my

00:47:46,670 --> 00:47:50,450
access to the database

00:47:48,019 --> 00:47:52,880
I could log into it like a crate posts I

00:47:50,450 --> 00:47:55,119
could upload images the images are

00:47:52,880 --> 00:47:58,670
stored on disk to post in the database

00:47:55,119 --> 00:48:02,960
if any of my instances of my application

00:47:58,670 --> 00:48:04,369
die they'll get restarted elsewhere and

00:48:02,960 --> 00:48:08,000
I'll be already connected to the

00:48:04,369 --> 00:48:10,190
database when your pod gets moved from

00:48:08,000 --> 00:48:12,890
one node to another communities will

00:48:10,190 --> 00:48:15,799
worry about moving the storage the

00:48:12,890 --> 00:48:18,109
persistent volume mount with it so it'll

00:48:15,799 --> 00:48:22,730
handle that all for you and you don't

00:48:18,109 --> 00:48:23,990
have to worry about it so that's it if

00:48:22,730 --> 00:48:27,890
you're working through that there are

00:48:23,990 --> 00:48:29,630
some links at the end for finding

00:48:27,890 --> 00:48:31,759
information about OpenShift which is the

00:48:29,630 --> 00:48:35,809
cluster we were using here using

00:48:31,759 --> 00:48:38,079
kubernetes so phase shifters is okay D

00:48:35,809 --> 00:48:42,200
which is the open source upstream

00:48:38,079 --> 00:48:43,880
project which is used goes into over

00:48:42,200 --> 00:48:47,029
just over shift of these of a product

00:48:43,880 --> 00:48:48,859
from Red Hat and an okay D is the open

00:48:47,029 --> 00:48:51,500
source to upstream project it feeds into

00:48:48,859 --> 00:48:54,589
that if you want to run openshift on

00:48:51,500 --> 00:48:57,619
your own laptop there's a project called

00:48:54,589 --> 00:48:59,900
mini shift which you can use or if you

00:48:57,619 --> 00:49:02,869
want to actually deploy a full cluster

00:48:59,900 --> 00:49:04,940
and your own high up in Amazon we have

00:49:02,869 --> 00:49:06,950
tried on open shift comment moment is

00:49:04,940 --> 00:49:08,359
where you can go in try it the very

00:49:06,950 --> 00:49:10,309
latest version of open shift which

00:49:08,359 --> 00:49:13,309
you're going to be releasing down the

00:49:10,309 --> 00:49:14,690
track soon which is open shift for and

00:49:13,309 --> 00:49:16,819
there's some links there to kubernetes

00:49:14,690 --> 00:49:18,349
and a final one at the bottom which is

00:49:16,819 --> 00:49:21,859
good site which is kubernetes by

00:49:18,349 --> 00:49:24,500
example.com which you can go there and

00:49:21,859 --> 00:49:27,109
it provides you again it goes through

00:49:24,500 --> 00:49:29,839
all of different resource types explains

00:49:27,109 --> 00:49:32,510
a bit about them different examples of

00:49:29,839 --> 00:49:34,470
how to use them and so on

00:49:32,510 --> 00:49:39,750
and that's it that's the end of the

00:49:34,470 --> 00:49:40,320
workshop so if you have any if you are

00:49:39,750 --> 00:49:45,210
still awake

00:49:40,320 --> 00:49:47,870
I took a nap while he was talking so

00:49:45,210 --> 00:49:47,870
questions

00:49:50,650 --> 00:49:55,720
one container in one part and that is

00:49:53,460 --> 00:49:57,339
that's what is preferred so if you want

00:49:55,720 --> 00:49:59,079
to put multiple containers in a part

00:49:57,339 --> 00:50:01,509
then I should have a single diploma

00:49:59,079 --> 00:50:04,180
tamil with the different configuration

00:50:01,509 --> 00:50:05,829
is it how does it work so you can put

00:50:04,180 --> 00:50:07,869
multiple containers in a pot but think

00:50:05,829 --> 00:50:11,109
about this as an example okay we had a

00:50:07,869 --> 00:50:12,880
front end and a database yeah if we ran

00:50:11,109 --> 00:50:14,529
the front enemy in one container in a

00:50:12,880 --> 00:50:17,680
database in another container of the

00:50:14,529 --> 00:50:19,779
same pod I can't scale that up because

00:50:17,680 --> 00:50:22,390
you can't just take a database like

00:50:19,779 --> 00:50:24,700
Postgres and say I want ten instances

00:50:22,390 --> 00:50:27,759
now it's not that simple

00:50:24,700 --> 00:50:29,710
so most of the time you prefer having

00:50:27,759 --> 00:50:31,239
one contain two pod because then you can

00:50:29,710 --> 00:50:34,900
scale up the number of replicas

00:50:31,239 --> 00:50:38,829
separately they said there are some use

00:50:34,900 --> 00:50:40,660
cases cycle containers and like this

00:50:38,829 --> 00:50:42,509
workshop environment is an example where

00:50:40,660 --> 00:50:45,309
I'm actually using multiple containers

00:50:42,509 --> 00:50:47,829
the terminal and the content were

00:50:45,309 --> 00:50:50,619
running in from an application running

00:50:47,829 --> 00:50:52,390
in one container that embedded console

00:50:50,619 --> 00:50:54,069
in there was running in a separate

00:50:52,390 --> 00:50:55,450
container at the same point but that

00:50:54,069 --> 00:50:57,700
purely that's because it was convenient

00:50:55,450 --> 00:51:00,160
in the way that I'm running up stuff for

00:50:57,700 --> 00:51:03,579
this environment okay so that answer the

00:51:00,160 --> 00:51:06,059
question yeah sure thanks again one

00:51:03,579 --> 00:51:06,059
monkey see

00:51:07,740 --> 00:51:13,010
I thought you were frying the real

00:51:10,140 --> 00:51:13,010
microfiber man

00:51:18,329 --> 00:51:27,719
just this is shaking when you throw it

00:51:20,579 --> 00:51:30,929
turn it on okay so my question is after

00:51:27,719 --> 00:51:32,999
D with regards to the workshop is the

00:51:30,929 --> 00:51:36,599
code available for the for the workshop

00:51:32,999 --> 00:51:38,459
or it'll be gone after the day as you

00:51:36,599 --> 00:51:41,640
mentioned okay so this particular

00:51:38,459 --> 00:51:43,380
cluster we're doing the workshop in that

00:51:41,640 --> 00:51:44,969
we'll leave that running until tomorrow

00:51:43,380 --> 00:51:47,069
because it's just it it's scheduled to

00:51:44,969 --> 00:51:49,259
be deleted that 10 or 11 o'clock good

00:51:47,069 --> 00:51:51,239
morning so we live it running so you can

00:51:49,259 --> 00:51:52,679
get access to so if you want to try

00:51:51,239 --> 00:51:54,509
again you can do it now are you asking

00:51:52,679 --> 00:51:56,400
about the really do it again or the

00:51:54,509 --> 00:51:58,439
actual no workshop it's a workshop

00:51:56,400 --> 00:52:01,619
content itself yes it is up on a github

00:51:58,439 --> 00:52:03,059
repo okay that right now because we've

00:52:01,619 --> 00:52:04,979
been developing this workshop

00:52:03,059 --> 00:52:06,660
environment over the last few months to

00:52:04,979 --> 00:52:08,579
get it all nice and polished the

00:52:06,660 --> 00:52:11,519
documentation isn't really there for you

00:52:08,579 --> 00:52:14,099
to go and deploy it yourself but it does

00:52:11,519 --> 00:52:17,459
require you have OpenShift to deploy

00:52:14,099 --> 00:52:19,439
into like technically I probably could

00:52:17,459 --> 00:52:20,549
get it going and playing kubernetes but

00:52:19,439 --> 00:52:26,640
I haven't done that yet

00:52:20,549 --> 00:52:28,799
that's enough for me yeah but we will we

00:52:26,640 --> 00:52:31,049
will probably try to post and if you

00:52:28,799 --> 00:52:34,429
follow him on Twitter we will try to

00:52:31,049 --> 00:52:43,829
post the instructions with the postage

00:52:34,429 --> 00:52:46,500
300 so anybody can come follow it okay I

00:52:43,829 --> 00:52:48,480
think we are running out of time

00:52:46,500 --> 00:52:53,140
[Music]

00:52:48,480 --> 00:52:55,960
okay so next thing is group photo going

00:52:53,140 --> 00:52:59,860
to be taken here I think Michael setting

00:52:55,960 --> 00:53:02,320
up things so thank you very much

00:52:59,860 --> 00:53:03,790
grand man Joel please put your hand

00:53:02,320 --> 00:53:09,260
together for them

00:53:03,790 --> 00:53:09,260

YouTube URL: https://www.youtube.com/watch?v=lF8818fZN4Y


