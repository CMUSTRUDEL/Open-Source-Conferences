Title: Democratizing Application Monitoring with Prometheus by Michael Ducy
Publication date: 2019-03-29
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	17 March 2019 12:00, Training Room 2-2

In any observability stack, the “last mile” of metrics, or application metrics, can often be the hardest to get. Platforms expose a variety of different metrics about the underlying performance of the hardware (virtualized or otherwise), but may not easily expose and collect application level metrics to understand the performance of our application code. In this talk, we will cover:
The open source project Prometheus for exposing and collecting metrics.
How Prometheus democratizes metric collection by creating a standard way of adding metrics to code, exposing the metrics for collection, and collection and storage of these metrics.
Graphing and reporting of application metrics with Grafana.
Solutions for long term storage of Prometheus metrics.
Attendees will learn how to implement performance metrics for their own code base, and how Prometheus (along with Open Metrics) has become the standard for exposing application level metrics.
Captions: 
	00:00:00,060 --> 00:00:06,450
so how many people are familiar with

00:00:01,530 --> 00:00:08,580
prometheus at all all right good well

00:00:06,450 --> 00:00:11,730
this will be a good overview which i

00:00:08,580 --> 00:00:14,250
think is the objective and Promethea uh

00:00:11,730 --> 00:00:16,109
i'll give you a overview of the

00:00:14,250 --> 00:00:18,630
different components that make up

00:00:16,109 --> 00:00:21,410
Prometheus and then I'll give you a

00:00:18,630 --> 00:00:26,640
quick example of how to deploy it and

00:00:21,410 --> 00:00:30,449
it's a pretty interesting tool I used to

00:00:26,640 --> 00:00:34,140
work at committee called orbits in the

00:00:30,449 --> 00:00:36,300
US their online travel site

00:00:34,140 --> 00:00:38,790
I think rates to go is like an Asian

00:00:36,300 --> 00:00:40,079
version of what they used to do and

00:00:38,790 --> 00:00:42,320
they're at least back in the day they

00:00:40,079 --> 00:00:46,829
did I don't know if they're still around

00:00:42,320 --> 00:00:49,440
but we created something called graphite

00:00:46,829 --> 00:00:51,120
you might have heard of graphite but it

00:00:49,440 --> 00:00:54,930
was an open-source project that came out

00:00:51,120 --> 00:00:56,969
of orbits and I was on the team actually

00:00:54,930 --> 00:00:58,800
one of my teammates is the one who

00:00:56,969 --> 00:01:00,870
actually wrote graphite and then my

00:00:58,800 --> 00:01:02,930
responsibility was getting the metrics

00:01:00,870 --> 00:01:06,119
out of graphite and creating graphs and

00:01:02,930 --> 00:01:08,220
meaningful information we also created a

00:01:06,119 --> 00:01:11,400
whole a big processing stream around

00:01:08,220 --> 00:01:13,200
that as well so whenever I dive back

00:01:11,400 --> 00:01:15,240
into the world of metrics and see how

00:01:13,200 --> 00:01:17,610
we've kind of progressed it's always

00:01:15,240 --> 00:01:19,680
really interesting to me knowing that I

00:01:17,610 --> 00:01:22,020
have this knowledge or background from

00:01:19,680 --> 00:01:24,270
eleven twelve years ago what we were

00:01:22,020 --> 00:01:30,390
trying to do of monitoring our systems

00:01:24,270 --> 00:01:32,850
so a little bit about me I'm all things

00:01:30,390 --> 00:01:35,640
open source and Cystic we have a couple

00:01:32,850 --> 00:01:37,530
open source projects we also interact

00:01:35,640 --> 00:01:39,210
with a lot of open source projects and

00:01:37,530 --> 00:01:41,520
prometheus is one of them and we like

00:01:39,210 --> 00:01:45,049
Prometheus because it gives us a

00:01:41,520 --> 00:01:48,090
standard way to pull metrics out of

00:01:45,049 --> 00:01:50,670
applications it also gives us a standard

00:01:48,090 --> 00:01:54,360
way to pull metrics and push it into our

00:01:50,670 --> 00:01:55,649
cloud-based Sassie monitoring tool from

00:01:54,360 --> 00:01:57,659
all of the components in your

00:01:55,649 --> 00:02:00,810
communities cluster as well because the

00:01:57,659 --> 00:02:02,520
the kubernetes world the cognitive world

00:02:00,810 --> 00:02:05,909
is starting to kind of standardize on

00:02:02,520 --> 00:02:09,840
Prometheus metrics I used to work at

00:02:05,909 --> 00:02:11,580
chef and so have a background in open

00:02:09,840 --> 00:02:12,390
source for a while now I work at shop

00:02:11,580 --> 00:02:14,910
for about five

00:02:12,390 --> 00:02:17,610
and did a number of roles for them and

00:02:14,910 --> 00:02:20,790
like Anton and the dev offstage

00:02:17,610 --> 00:02:24,270
organizer as well I don't know organized

00:02:20,790 --> 00:02:26,900
DevOps today Ohio and then I also found

00:02:24,270 --> 00:02:29,730
DevOps AIDS in Minneapolis and a few

00:02:26,900 --> 00:02:31,740
others as well and if you want to reach

00:02:29,730 --> 00:02:33,540
out to me that's my github and Twitter

00:02:31,740 --> 00:02:37,050
handle as well as the Twitter handle

00:02:33,540 --> 00:02:39,150
will be down on the corner so this is

00:02:37,050 --> 00:02:41,100
not picking on open shift this is just

00:02:39,150 --> 00:02:44,390
kind of like the most implying that I

00:02:41,100 --> 00:02:46,440
had but this is a you know your typical

00:02:44,390 --> 00:02:47,910
kubernetes cluster and what it looks

00:02:46,440 --> 00:02:50,370
like so you have lots of different

00:02:47,910 --> 00:02:53,180
components you're going to have storage

00:02:50,370 --> 00:02:55,709
you're gonna have the master node where

00:02:53,180 --> 00:02:59,340
kubernetes runs and then you have where

00:02:55,709 --> 00:03:01,800
your applications actually run on the

00:02:59,340 --> 00:03:04,140
infrastructure nodes and then you have a

00:03:01,800 --> 00:03:05,430
whole service layer and hardware and

00:03:04,140 --> 00:03:06,780
cloud provider and a whole bunch of

00:03:05,430 --> 00:03:09,780
other things that you still have to

00:03:06,780 --> 00:03:12,390
monitor and get full information from so

00:03:09,780 --> 00:03:15,630
the other thing is these infrastructure

00:03:12,390 --> 00:03:17,850
nodes are going to scale out scale up

00:03:15,630 --> 00:03:19,650
and down depending upon which it

00:03:17,850 --> 00:03:21,390
workloads are and how many application

00:03:19,650 --> 00:03:23,160
nodes you need and then of course on

00:03:21,390 --> 00:03:27,750
every single one of those nodes you're

00:03:23,160 --> 00:03:29,010
going to have tens of containers running

00:03:27,750 --> 00:03:31,260
on them that are actually running your

00:03:29,010 --> 00:03:33,540
application so it gets very complicated

00:03:31,260 --> 00:03:34,860
to figure out how do I start pulling

00:03:33,540 --> 00:03:36,600
metrics back from all of these things

00:03:34,860 --> 00:03:39,209
the other thing that makes it

00:03:36,600 --> 00:03:41,160
complicated is that these these

00:03:39,209 --> 00:03:42,810
environments are dynamic so machines are

00:03:41,160 --> 00:03:45,630
coming up and down or containers are

00:03:42,810 --> 00:03:46,769
spending up and down and so how can you

00:03:45,630 --> 00:03:49,769
even hold back the metrics and

00:03:46,769 --> 00:03:52,590
information from from things that are

00:03:49,769 --> 00:03:57,090
very rapidly returning and going out

00:03:52,590 --> 00:03:58,410
from underneath you so the question is

00:03:57,090 --> 00:04:00,329
is how do you monitor your core

00:03:58,410 --> 00:04:02,340
infrastructure services how do you alert

00:04:00,329 --> 00:04:04,410
when there's an issue how do you monitor

00:04:02,340 --> 00:04:07,140
the applications themselves and not just

00:04:04,410 --> 00:04:09,090
look at infrastructure metrics while

00:04:07,140 --> 00:04:10,560
infrastructure metrics are important the

00:04:09,090 --> 00:04:12,060
real golden signals that you want to

00:04:10,560 --> 00:04:14,700
look at in your environment tend to come

00:04:12,060 --> 00:04:16,979
from your application and then how can

00:04:14,700 --> 00:04:19,260
you give developers access to monitor

00:04:16,979 --> 00:04:20,880
their applications not only how can you

00:04:19,260 --> 00:04:22,080
give them a way to instrument or code

00:04:20,880 --> 00:04:24,150
but how can you give them a way to

00:04:22,080 --> 00:04:25,910
actually look and see into those

00:04:24,150 --> 00:04:29,040
particular metrics

00:04:25,910 --> 00:04:33,389
so let's talk about what is prometheus

00:04:29,040 --> 00:04:35,730
so it's multiple meanings for a word it

00:04:33,389 --> 00:04:38,190
can be a monitoring staff it can be a

00:04:35,730 --> 00:04:40,020
way to instrument your code it can be a

00:04:38,190 --> 00:04:42,990
metrics interface that Prometheus has

00:04:40,020 --> 00:04:45,630
defined it can be a query language which

00:04:42,990 --> 00:04:47,220
is actually called prom ql or it could

00:04:45,630 --> 00:04:48,930
be the actual metric server itself

00:04:47,220 --> 00:04:52,500
there's actually several components of

00:04:48,930 --> 00:04:55,650
the Prometheus stack and this is what it

00:04:52,500 --> 00:04:59,700
looks like so you have where we get our

00:04:55,650 --> 00:05:01,470
metrics from so we have pull metrics the

00:04:59,700 --> 00:05:03,120
metrics are typically in the default

00:05:01,470 --> 00:05:05,910
scenario and the Prometheus world

00:05:03,120 --> 00:05:08,190
metrics are pool based meaning that

00:05:05,910 --> 00:05:11,610
Prometheus server goes out and scrape

00:05:08,190 --> 00:05:13,830
some metrics off of an HTTP endpoint you

00:05:11,610 --> 00:05:16,229
can have short-lived jobs that will push

00:05:13,830 --> 00:05:18,750
metrics and you can push metrics to a

00:05:16,229 --> 00:05:22,139
push gateway and then the Prometheus

00:05:18,750 --> 00:05:26,070
server pulls the metrics again from the

00:05:22,139 --> 00:05:27,540
push gateway it can use the information

00:05:26,070 --> 00:05:29,760
that's provided through the turbine

00:05:27,540 --> 00:05:31,020
Eddie's metadata API to pull back

00:05:29,760 --> 00:05:33,600
information about what's actually

00:05:31,020 --> 00:05:35,789
running in your kubernetes cluster also

00:05:33,600 --> 00:05:38,789
doing things like how-to discovery so if

00:05:35,789 --> 00:05:40,710
you put annotations on your pods those

00:05:38,789 --> 00:05:43,380
annotations can be used to actually go

00:05:40,710 --> 00:05:44,700
and scrape back metrics off of the

00:05:43,380 --> 00:05:47,400
endpoints that you put in those

00:05:44,700 --> 00:05:49,830
annotations so it's an easy way for

00:05:47,400 --> 00:05:51,950
Prometheus to auto discover where it

00:05:49,830 --> 00:05:54,840
needs to start pulling metrics from

00:05:51,950 --> 00:05:57,870
there's an alert manager which allows

00:05:54,840 --> 00:06:00,330
you to send alerts and you can use the

00:05:57,870 --> 00:06:02,669
same language that you use for prom ql

00:06:00,330 --> 00:06:05,100
to actually write the queries you can

00:06:02,669 --> 00:06:06,750
use that same language to write with you

00:06:05,100 --> 00:06:08,460
would be alerting on so you basically

00:06:06,750 --> 00:06:10,889
run a query and if the values of a

00:06:08,460 --> 00:06:12,270
particular range then you would have the

00:06:10,889 --> 00:06:15,600
alert sent out to those various

00:06:12,270 --> 00:06:20,820
locations and then grow fana is kind of

00:06:15,600 --> 00:06:23,130
the default open-source graphing

00:06:20,820 --> 00:06:24,960
solution it can interface in with a

00:06:23,130 --> 00:06:28,500
whole bunch of different databases

00:06:24,960 --> 00:06:30,450
not only just Prometheus and it gives

00:06:28,500 --> 00:06:33,780
you a common place you dashboarding and

00:06:30,450 --> 00:06:35,430
visualization give access to dashboards

00:06:33,780 --> 00:06:36,960
to your developers and other things like

00:06:35,430 --> 00:06:38,060
that as well and I'll deploy that

00:06:36,960 --> 00:06:40,820
quickly

00:06:38,060 --> 00:06:43,820
here as well so let's talk about the

00:06:40,820 --> 00:06:48,410
first component prometheus being a way

00:06:43,820 --> 00:06:50,390
to instrument your code so back in the

00:06:48,410 --> 00:06:52,460
day and we still kind of have this

00:06:50,390 --> 00:06:54,110
problem and so this is the problem that

00:06:52,460 --> 00:06:56,480
you know Prometheus is really trying to

00:06:54,110 --> 00:06:58,250
solve is that if you wanted to pull Java

00:06:56,480 --> 00:07:01,610
metrics and you have to pull metrics

00:06:58,250 --> 00:07:02,990
into JMX format if you have custom

00:07:01,610 --> 00:07:05,000
metrics and you might be pushing them

00:07:02,990 --> 00:07:07,190
into something like stats D and then you

00:07:05,000 --> 00:07:10,460
need to pull metrics from stat D and not

00:07:07,190 --> 00:07:13,220
store them in database you have things

00:07:10,460 --> 00:07:15,560
like exp bars and then you also have

00:07:13,220 --> 00:07:17,300
things like vendor API so you might push

00:07:15,560 --> 00:07:19,940
to the vendor API or you might have to

00:07:17,300 --> 00:07:21,650
pull metrics positive vendor API a good

00:07:19,940 --> 00:07:24,770
common one where I pull a lot of metrics

00:07:21,650 --> 00:07:27,710
from is the docker hub repository or

00:07:24,770 --> 00:07:29,420
registry you can query the API and you

00:07:27,710 --> 00:07:31,880
can find information about number of

00:07:29,420 --> 00:07:33,830
poles and so as we're tracking the

00:07:31,880 --> 00:07:36,530
success of our open source projects I

00:07:33,830 --> 00:07:38,810
actually have to scrape back data from

00:07:36,530 --> 00:07:40,160
that API to figure out how many times

00:07:38,810 --> 00:07:43,010
people are downloading or software

00:07:40,160 --> 00:07:46,340
software and the problem is is that you

00:07:43,010 --> 00:07:49,400
had to everyone knows what PETA means

00:07:46,340 --> 00:07:52,070
right so it's a pain in the ass for

00:07:49,400 --> 00:07:54,380
everyone you have to maintain this huge

00:07:52,070 --> 00:07:55,970
code base to figure out how you pull

00:07:54,380 --> 00:07:58,310
metric you back from all these various

00:07:55,970 --> 00:07:59,990
different locations you have different

00:07:58,310 --> 00:08:03,650
interfaces especially if you're doing

00:07:59,990 --> 00:08:05,810
something with vendors as well it's not

00:08:03,650 --> 00:08:07,490
always available for your language so

00:08:05,810 --> 00:08:09,410
you might have not have an SDK to

00:08:07,490 --> 00:08:12,020
actually go and implement the thing that

00:08:09,410 --> 00:08:13,450
you need in your language and it doesn't

00:08:12,020 --> 00:08:15,290
always work in this kind of dynamic

00:08:13,450 --> 00:08:16,820
micro-services world as things are

00:08:15,290 --> 00:08:19,070
spinning up and down and auto discovery

00:08:16,820 --> 00:08:20,750
of metrics and things like that tend to

00:08:19,070 --> 00:08:22,240
be very hard with kind of the

00:08:20,750 --> 00:08:24,770
traditional way that we've done things

00:08:22,240 --> 00:08:26,690
and so there's a whole bunch of

00:08:24,770 --> 00:08:30,740
different things that people people have

00:08:26,690 --> 00:08:32,650
done to try and fix this problem

00:08:30,740 --> 00:08:35,890
Prometheus metrics is one of them and

00:08:32,650 --> 00:08:40,220
Prometheus metrics and open metrics are

00:08:35,890 --> 00:08:41,870
this slide was written awhile ago but my

00:08:40,220 --> 00:08:43,700
understanding is Prometheus metrics and

00:08:41,870 --> 00:08:45,980
open metrics are essentially emerging

00:08:43,700 --> 00:08:48,020
and the Prometheus metrics format it's

00:08:45,980 --> 00:08:51,280
becoming kind of the standard open

00:08:48,020 --> 00:08:56,170
metrics format now

00:08:51,280 --> 00:08:58,090
so Prometheus metrics or open metrics

00:08:56,170 --> 00:09:01,000
have really kind of become this de facto

00:08:58,090 --> 00:09:03,670
standard of how we expose metrics so a

00:09:01,000 --> 00:09:06,280
lot of the cloud native applications

00:09:03,670 --> 00:09:08,290
already support exposing Prometheus

00:09:06,280 --> 00:09:10,200
metrics as well as the projects or

00:09:08,290 --> 00:09:14,170
services that you'll be running on top

00:09:10,200 --> 00:09:16,870
of your kubernetes platform so things

00:09:14,170 --> 00:09:19,270
like sto traffic core D and s fluid D

00:09:16,870 --> 00:09:21,310
and so forth they all expose their own

00:09:19,270 --> 00:09:22,750
Prometheus metrics and so once you

00:09:21,310 --> 00:09:24,550
install Prometheus and you have those

00:09:22,750 --> 00:09:25,720
services running on the cluster you're

00:09:24,550 --> 00:09:27,580
able to start collecting information

00:09:25,720 --> 00:09:33,250
back around how those application

00:09:27,580 --> 00:09:35,470
services are performing the the nice

00:09:33,250 --> 00:09:38,140
thing is is that you can instrument once

00:09:35,470 --> 00:09:40,180
and you can support many different use

00:09:38,140 --> 00:09:42,670
cases you can also support many

00:09:40,180 --> 00:09:44,440
different providers as well so that if

00:09:42,670 --> 00:09:45,850
you have a commercial company that you

00:09:44,440 --> 00:09:48,400
want to use most of the commercial

00:09:45,850 --> 00:09:50,230
vendors will pull back from EPS metrics

00:09:48,400 --> 00:09:51,820
autodiscover Prometheus metrics

00:09:50,230 --> 00:09:54,760
something like data dog or even

00:09:51,820 --> 00:09:56,410
assisting you could automatically have

00:09:54,760 --> 00:09:57,640
those metrics hold back so you just need

00:09:56,410 --> 00:09:59,680
to instrument once and then you can

00:09:57,640 --> 00:10:02,140
support the Prometheus server your

00:09:59,680 --> 00:10:04,210
commercial agent you might use Griffin

00:10:02,140 --> 00:10:05,860
or whatever dashboarding the commercial

00:10:04,210 --> 00:10:08,290
vendor provides and so forth

00:10:05,860 --> 00:10:10,210
and so the goal behind this is really

00:10:08,290 --> 00:10:12,010
kind of trying to get rid of all those

00:10:10,210 --> 00:10:14,560
custom exporters and scripts and

00:10:12,010 --> 00:10:17,800
everything that we used to do to massage

00:10:14,560 --> 00:10:24,250
JSON and this is an example of massaging

00:10:17,800 --> 00:10:26,080
JSON we'll skip that so let's talk about

00:10:24,250 --> 00:10:29,950
the metrics format and what it looks

00:10:26,080 --> 00:10:31,750
like so you have the metric name and

00:10:29,950 --> 00:10:34,839
then you have a series of labels you can

00:10:31,750 --> 00:10:38,620
have more than one label if you see if

00:10:34,839 --> 00:10:41,020
you wish and then you have the value of

00:10:38,620 --> 00:10:43,360
the metric and then the timestamp and

00:10:41,020 --> 00:10:45,490
there's a format that this all follows

00:10:43,360 --> 00:10:46,930
there's also a data model that they

00:10:45,490 --> 00:10:50,050
talked about on the previous IO

00:10:46,930 --> 00:10:53,290
documentation as well so you can see

00:10:50,050 --> 00:10:55,570
here we have HTTP requests total in this

00:10:53,290 --> 00:10:58,630
case we're just looking at clothes that

00:10:55,570 --> 00:11:02,080
were successful and then we are looking

00:10:58,630 --> 00:11:04,180
at posts where the code is four hundred

00:11:02,080 --> 00:11:06,040
and so the nice thing what this allows

00:11:04,180 --> 00:11:08,710
to do with these labels is that we can

00:11:06,040 --> 00:11:10,960
query these labels later using prom QL

00:11:08,710 --> 00:11:12,640
to only get the information out that we

00:11:10,960 --> 00:11:16,240
want or only get the metrics that we

00:11:12,640 --> 00:11:22,029
want so if we wanted to track errors you

00:11:16,240 --> 00:11:25,510
could do 400 star star and then a tilde

00:11:22,029 --> 00:11:27,940
there to match something that matches

00:11:25,510 --> 00:11:29,490
that regular expression and I'll show

00:11:27,940 --> 00:11:31,959
that here and it's not show that here

00:11:29,490 --> 00:11:35,380
all right so there's the metrics

00:11:31,959 --> 00:11:36,610
interface as well that's defined so the

00:11:35,380 --> 00:11:39,339
first thing that's important is

00:11:36,610 --> 00:11:41,200
understanding how metrics names work and

00:11:39,339 --> 00:11:43,420
a couple things I'm going to highlight

00:11:41,200 --> 00:11:45,250
on here because this is really long so

00:11:43,420 --> 00:11:50,170
typically the first thing that you have

00:11:45,250 --> 00:11:52,870
is the prefix and then beyond the prefix

00:11:50,170 --> 00:11:55,690
you then you have the actual the metric

00:11:52,870 --> 00:11:57,100
its star the other thing is is that

00:11:55,690 --> 00:11:59,380
you're going to have at the end you're

00:11:57,100 --> 00:12:02,200
going to have things about what the

00:11:59,380 --> 00:12:04,089
actual unit is that you're measuring so

00:12:02,200 --> 00:12:07,209
you can see here that we have seconds we

00:12:04,089 --> 00:12:09,520
have bytes or we have total and total is

00:12:07,209 --> 00:12:11,890
it necessarily something that's unit so

00:12:09,520 --> 00:12:14,500
like HTTP request doesn't necessarily

00:12:11,890 --> 00:12:16,510
have a unit that you're measuring you

00:12:14,500 --> 00:12:20,200
have requests for a second there could

00:12:16,510 --> 00:12:22,450
be another metric that you define but a

00:12:20,200 --> 00:12:25,060
total or accumulating counter would just

00:12:22,450 --> 00:12:28,450
be a total and then you can see here

00:12:25,060 --> 00:12:33,779
when we come combined them where this is

00:12:28,450 --> 00:12:33,779
the total over number of seconds as well

00:12:34,680 --> 00:12:41,440
there's a ton of libraries that allow

00:12:38,920 --> 00:12:42,820
you to instrument your own code and so

00:12:41,440 --> 00:12:44,980
you want to instrument your own code

00:12:42,820 --> 00:12:46,930
around things like how long is it taking

00:12:44,980 --> 00:12:49,120
your application to do the business

00:12:46,930 --> 00:12:50,529
logic type things and that was actually

00:12:49,120 --> 00:12:54,490
the problem that we were trying to solve

00:12:50,529 --> 00:12:56,620
it orbits was that we had Hotel searches

00:12:54,490 --> 00:12:58,150
that we're taking you know 60 seconds

00:12:56,620 --> 00:13:00,700
and we had some hotel searches that were

00:12:58,150 --> 00:13:01,959
taking ten seconds right and so we

00:13:00,700 --> 00:13:03,339
needed to be able to see when those

00:13:01,959 --> 00:13:06,010
events are happening when all of a

00:13:03,339 --> 00:13:07,990
sudden our hotel searches start to fail

00:13:06,010 --> 00:13:09,550
our hotel surgeons start to take a long

00:13:07,990 --> 00:13:12,040
time and then we could use that

00:13:09,550 --> 00:13:13,690
information to determine maybe one of

00:13:12,040 --> 00:13:15,670
our providers were down or maybe one of

00:13:13,690 --> 00:13:18,160
our problem providers were having their

00:13:15,670 --> 00:13:20,890
own issue and then we could turn that

00:13:18,160 --> 00:13:24,310
provider off the other thing that we

00:13:20,890 --> 00:13:25,720
were really wanting to look at is air

00:13:24,310 --> 00:13:28,600
search metrics and other things like

00:13:25,720 --> 00:13:31,870
that and so we wrote actually a custom

00:13:28,600 --> 00:13:33,730
format for our java applications to

00:13:31,870 --> 00:13:36,610
expose these metrics and push them into

00:13:33,730 --> 00:13:39,040
graphite and that's an open source

00:13:36,610 --> 00:13:41,530
project that's probably the code was

00:13:39,040 --> 00:13:44,080
released but never touched again called

00:13:41,530 --> 00:13:47,290
perma I know it's still out there I've

00:13:44,080 --> 00:13:49,240
seen it in a few places but that was

00:13:47,290 --> 00:13:51,160
only for Java so the nice thing is

00:13:49,240 --> 00:13:53,230
what's happened in the world of exposing

00:13:51,160 --> 00:13:57,550
metrics is that no matter what language

00:13:53,230 --> 00:14:00,130
even bash you have a library that you

00:13:57,550 --> 00:14:02,920
can use to easily expose metrics in this

00:14:00,130 --> 00:14:05,800
Prometheus format the other thing is I

00:14:02,920 --> 00:14:08,860
would avoid trying to write your own

00:14:05,800 --> 00:14:11,170
metrics exporter for your language and I

00:14:08,860 --> 00:14:13,360
would really encourage you to use one of

00:14:11,170 --> 00:14:14,530
these that's provided you need to be

00:14:13,360 --> 00:14:16,240
careful about when you're collecting

00:14:14,530 --> 00:14:18,220
metrics is that you don't want to block

00:14:16,240 --> 00:14:20,400
your application and so a lot of these

00:14:18,220 --> 00:14:22,870
libraries actually take into account

00:14:20,400 --> 00:14:24,520
needed to have multiple processes one

00:14:22,870 --> 00:14:26,110
serving metrics collection and one

00:14:24,520 --> 00:14:30,700
serving the actual application code

00:14:26,110 --> 00:14:33,160
itself and you also there's also a lot

00:14:30,700 --> 00:14:36,010
of libraries and needs where you can

00:14:33,160 --> 00:14:37,240
create the data structures around around

00:14:36,010 --> 00:14:43,900
the actual mentor to things like that

00:14:37,240 --> 00:14:46,570
makes it a ton easier so there's what's

00:14:43,900 --> 00:14:48,640
called the metrics exporter so what you

00:14:46,570 --> 00:14:52,420
do in your application is you use one of

00:14:48,640 --> 00:14:55,540
these SDKs to create the exporter and

00:14:52,420 --> 00:14:58,390
it's all metric are exposed via HTTP or

00:14:55,540 --> 00:15:00,310
HTTPS so this gives you a common

00:14:58,390 --> 00:15:01,900
standard way to go in straight metrics

00:15:00,310 --> 00:15:03,400
the other nice thing is that you can

00:15:01,900 --> 00:15:05,470
just open up in your web browser or you

00:15:03,400 --> 00:15:06,760
can just do a curl against the metrics

00:15:05,470 --> 00:15:08,350
endpoint to see if you're getting

00:15:06,760 --> 00:15:09,610
metrics let's see if your metrics are

00:15:08,350 --> 00:15:13,300
incrementing and other things like that

00:15:09,610 --> 00:15:16,200
as well like that there are lots of

00:15:13,300 --> 00:15:19,780
well-known exporters and there's about

00:15:16,200 --> 00:15:21,730
470 different ports allocated for the

00:15:19,780 --> 00:15:24,400
different exporters so these exporters

00:15:21,730 --> 00:15:27,280
are all around things like even

00:15:24,400 --> 00:15:28,960
low-level things of like from the

00:15:27,280 --> 00:15:31,360
hardware layer layer so if you're

00:15:28,960 --> 00:15:33,370
running like Dell

00:15:31,360 --> 00:15:35,620
what's that called the draft inside of

00:15:33,370 --> 00:15:37,959
the dough you can pull in stats off of

00:15:35,620 --> 00:15:40,029
the actual hardware components you can

00:15:37,959 --> 00:15:42,550
pull information from Todd watch and

00:15:40,029 --> 00:15:44,920
other things like that as well and then

00:15:42,550 --> 00:15:50,440
there's lots of different exporters as

00:15:44,920 --> 00:15:54,250
well these this isn't it this is more of

00:15:50,440 --> 00:15:58,060
a definitive list of the actual exporter

00:15:54,250 --> 00:16:00,010
to the ports allocated but not like for

00:15:58,060 --> 00:16:01,870
example we've allocated a port for one

00:16:00,010 --> 00:16:04,120
of our open source projects but we

00:16:01,870 --> 00:16:05,200
haven't started exposing metrics yet all

00:16:04,120 --> 00:16:07,149
right so it kind of gives you the idea

00:16:05,200 --> 00:16:09,040
of like there's a lot of people that are

00:16:07,149 --> 00:16:12,820
wanting to expose metrics in this format

00:16:09,040 --> 00:16:14,170
and shows you the popularity of there's

00:16:12,820 --> 00:16:18,220
a couple different ways that you can

00:16:14,170 --> 00:16:19,930
collect metrics as well so there's some

00:16:18,220 --> 00:16:21,970
good examples are things like see

00:16:19,930 --> 00:16:23,740
advisor a node exporter and coop state

00:16:21,970 --> 00:16:25,360
metrics as well which will pull metrics

00:16:23,740 --> 00:16:28,860
back from your kubernetes cluster and

00:16:25,360 --> 00:16:31,390
then expose them for Prometheus to poll

00:16:28,860 --> 00:16:33,700
we also cover commercial and how a

00:16:31,390 --> 00:16:36,910
commercial agent but I'm gonna skip that

00:16:33,700 --> 00:16:38,560
because that's not relevant for us so

00:16:36,910 --> 00:16:39,699
let's talk about the query language real

00:16:38,560 --> 00:16:42,910
quick

00:16:39,699 --> 00:16:44,500
so prom ql is a full-featured korean

00:16:42,910 --> 00:16:47,920
language that allows you to analyze

00:16:44,500 --> 00:16:51,010
metrics in real time you can filter

00:16:47,920 --> 00:16:53,410
metrics by labels there's a full

00:16:51,010 --> 00:16:55,149
language where you can actually use

00:16:53,410 --> 00:16:58,600
functions as well so you can do things

00:16:55,149 --> 00:17:00,430
like averages standard deviations square

00:16:58,600 --> 00:17:02,920
roots and other things like that as well

00:17:00,430 --> 00:17:06,160
logarithms as well if you need to smooth

00:17:02,920 --> 00:17:08,559
things out you can also do deltas very

00:17:06,160 --> 00:17:10,000
easily so it all depends upon what

00:17:08,559 --> 00:17:11,439
you're trying to create out of your

00:17:10,000 --> 00:17:13,839
metrics so if you're trying to create a

00:17:11,439 --> 00:17:15,819
gauge or if you're just trying to grab a

00:17:13,839 --> 00:17:17,679
counter there's different options

00:17:15,819 --> 00:17:20,829
available to you it also automatically

00:17:17,679 --> 00:17:22,959
create histograms for you as well just

00:17:20,829 --> 00:17:24,669
by leveraging this query language and so

00:17:22,959 --> 00:17:26,650
the data you get back isn't the raw

00:17:24,669 --> 00:17:28,120
metrics data but instead you get the

00:17:26,650 --> 00:17:29,410
histogram with the bucketing already

00:17:28,120 --> 00:17:31,570
done and that it makes it easier to

00:17:29,410 --> 00:17:34,480
expose it to a UI like Groupon or

00:17:31,570 --> 00:17:36,160
something you can also leverage regular

00:17:34,480 --> 00:17:40,240
expressions so let me look at this real

00:17:36,160 --> 00:17:45,669
quick so I keep moving

00:17:40,240 --> 00:17:48,159
it's rattling the mic sorry so seems TP

00:17:45,669 --> 00:17:51,760
request total this would just be every

00:17:48,159 --> 00:17:55,620
single request it's not scoped by time

00:17:51,760 --> 00:17:57,549
and it's also not scoped by any labels

00:17:55,620 --> 00:18:00,880
then if we went into getting more

00:17:57,549 --> 00:18:05,559
specific we could then say show me the

00:18:00,880 --> 00:18:07,570
job API server and handler / API /

00:18:05,559 --> 00:18:10,330
comments so this is kind of showing you

00:18:07,570 --> 00:18:12,700
how you can use expose different metrics

00:18:10,330 --> 00:18:14,470
especially it's really important inside

00:18:12,700 --> 00:18:16,899
of your application you're going to want

00:18:14,470 --> 00:18:18,850
to say the handler so you can actually

00:18:16,899 --> 00:18:21,039
trace back into your application where

00:18:18,850 --> 00:18:23,740
that metrics actually coming from as

00:18:21,039 --> 00:18:26,640
well you can see how you can use regular

00:18:23,740 --> 00:18:29,770
expressions as well so maybe I want

00:18:26,640 --> 00:18:32,830
everything that starts or I'm sorry

00:18:29,770 --> 00:18:36,010
everything that ends with server or for

00:18:32,830 --> 00:18:39,669
example I want to not show anything

00:18:36,010 --> 00:18:42,940
that's a 400 error and so not anything

00:18:39,669 --> 00:18:46,299
that matches this expression so dot is

00:18:42,940 --> 00:18:48,370
similar just like in grep or standard

00:18:46,299 --> 00:18:51,340
regular expressions so any character and

00:18:48,370 --> 00:18:55,299
then star is repeating of that previous

00:18:51,340 --> 00:18:57,700
character so in here since status codes

00:18:55,299 --> 00:19:00,580
are only three characters we just put

00:18:57,700 --> 00:19:03,610
two dots and then you can also do things

00:19:00,580 --> 00:19:06,190
like where you're running functions are

00:19:03,610 --> 00:19:10,059
using functions and so this is going to

00:19:06,190 --> 00:19:11,679
give us the rate over five minutes and

00:19:10,059 --> 00:19:15,220
it's just going to return the data back

00:19:11,679 --> 00:19:16,240
from 30 minutes ago see one minute so

00:19:15,220 --> 00:19:20,260
we're just getting that set of data

00:19:16,240 --> 00:19:21,669
instead of all of the data all right so

00:19:20,260 --> 00:19:24,159
let's talk about the monitoring stack

00:19:21,669 --> 00:19:27,039
real quick and what's all composed in

00:19:24,159 --> 00:19:28,750
this stack and then I'm gonna do just a

00:19:27,039 --> 00:19:30,190
quick deployment and I'll play around

00:19:28,750 --> 00:19:33,190
with how you set up Groupon and things

00:19:30,190 --> 00:19:34,929
like that very quickly so you have the

00:19:33,190 --> 00:19:37,210
Prometheus server you have the alert

00:19:34,929 --> 00:19:38,710
manager you have the Gravano for UI and

00:19:37,210 --> 00:19:40,510
then you have exporters and the push

00:19:38,710 --> 00:19:43,480
gateway and I kind of had already talked

00:19:40,510 --> 00:19:45,520
about this as well by the way there is

00:19:43,480 --> 00:19:48,159
your in the operator talked earlier

00:19:45,520 --> 00:19:50,110
there is a Prometheus operator and that

00:19:48,159 --> 00:19:52,659
operator allows you to set all of this

00:19:50,110 --> 00:19:53,879
up very easily I'm going to use a home

00:19:52,659 --> 00:19:56,159
chart today

00:19:53,879 --> 00:19:58,529
you're not familiar with helm it's

00:19:56,159 --> 00:20:02,369
essentially I know like Apple get our

00:19:58,529 --> 00:20:05,249
p.m. but for kubernetes manifests and so

00:20:02,369 --> 00:20:07,139
or kind of like terraform as well where

00:20:05,249 --> 00:20:09,119
you can very easily go and just say helm

00:20:07,139 --> 00:20:11,070
install the name of the thing you want

00:20:09,119 --> 00:20:13,080
to install and or I'm actually set up

00:20:11,070 --> 00:20:15,479
that for you and your company's

00:20:13,080 --> 00:20:18,090
posterity and when you have one of these

00:20:15,479 --> 00:20:21,809
large deployments using something like

00:20:18,090 --> 00:20:23,909
helm or other tools makes it a lot

00:20:21,809 --> 00:20:26,669
easier or even the operator this is the

00:20:23,909 --> 00:20:28,379
real idea behind the operator is that if

00:20:26,669 --> 00:20:31,679
you want to install Prometheus it's much

00:20:28,379 --> 00:20:34,019
easier just to you have one block of

00:20:31,679 --> 00:20:35,909
JSON instead of all the JSON I'm going

00:20:34,019 --> 00:20:39,619
to show you or yamo that you need to

00:20:35,909 --> 00:20:39,619
actually go and set up this entire stack

00:20:39,979 --> 00:20:43,769
so there's a different couple different

00:20:42,419 --> 00:20:46,379
ways that you can do this I kind of

00:20:43,769 --> 00:20:49,169
already talked about these as well one

00:20:46,379 --> 00:20:51,989
thing that I'll clean out is that you

00:20:49,169 --> 00:20:53,940
probably need lots of Prometheus servers

00:20:51,989 --> 00:20:57,989
and that's kind of one of the limitation

00:20:53,940 --> 00:21:00,179
of Prometheus is that scalability at

00:20:57,989 --> 00:21:02,039
this level works in a horizontal fashion

00:21:00,179 --> 00:21:04,289
and so you have lots of your media

00:21:02,039 --> 00:21:06,570
servers that are all collecting metrics

00:21:04,289 --> 00:21:11,159
and storing metrics the other thing I'll

00:21:06,570 --> 00:21:13,309
point out is that I'm going to work

00:21:11,159 --> 00:21:17,399
around this in a different way I'm sorry

00:21:13,309 --> 00:21:20,460
is that if Prometheus doesn't do long

00:21:17,399 --> 00:21:24,200
term storage so if you need long term

00:21:20,460 --> 00:21:26,849
storage or we let me put it this way

00:21:24,200 --> 00:21:29,519
Prometheus long story long term storage

00:21:26,849 --> 00:21:31,679
is only as good as the durability of the

00:21:29,519 --> 00:21:35,519
discs that you provide super melius

00:21:31,679 --> 00:21:38,220
right and so if you have a stand and

00:21:35,519 --> 00:21:40,139
you're like very we're still doing sands

00:21:38,220 --> 00:21:42,059
or something like that or using EBS

00:21:40,139 --> 00:21:44,509
volumes and things like that you can

00:21:42,059 --> 00:21:47,460
have some guarantee around persistence

00:21:44,509 --> 00:21:50,940
but Prometheus itself gives you no

00:21:47,460 --> 00:21:53,519
ability to do clustering and other

00:21:50,940 --> 00:21:55,710
things like that around your metrics so

00:21:53,519 --> 00:21:58,559
you need to use something like in flux

00:21:55,710 --> 00:22:00,419
DB or cortex there's some other

00:21:58,559 --> 00:22:02,369
commercial software that you can use as

00:22:00,419 --> 00:22:04,799
well to actually go and store those

00:22:02,369 --> 00:22:07,080
metrics and have a durable cluster and

00:22:04,799 --> 00:22:07,980
then instead of going in connecting core

00:22:07,080 --> 00:22:11,010
fauna in

00:22:07,980 --> 00:22:13,080
to Prometheus you connect through fauna

00:22:11,010 --> 00:22:19,650
into one of these database time series

00:22:13,080 --> 00:22:21,059
data mining and so let's talk about your

00:22:19,650 --> 00:22:22,740
fauna real quick

00:22:21,059 --> 00:22:26,340
so core fauna is an open source

00:22:22,740 --> 00:22:28,049
dashboard and graph editor the other

00:22:26,340 --> 00:22:31,830
cool thing about wenger fauna does is

00:22:28,049 --> 00:22:34,620
there's a whole marketplace around data

00:22:31,830 --> 00:22:38,100
source plugins our data provider plugins

00:22:34,620 --> 00:22:39,690
and dashboards as well there's a whole

00:22:38,100 --> 00:22:42,720
bunch of different data sources that you

00:22:39,690 --> 00:22:44,580
can use to query data from as well and

00:22:42,720 --> 00:22:47,040
so it's just not for me it's focused but

00:22:44,580 --> 00:22:49,650
it's focused on lots of different

00:22:47,040 --> 00:22:52,049
databases as well including simple

00:22:49,650 --> 00:22:53,730
things just like my see joint so just

00:22:52,049 --> 00:22:58,500
doing my sequel queries and pulling data

00:22:53,730 --> 00:23:02,160
out of my sequel if you want to alright

00:22:58,500 --> 00:23:04,020
so there's also as I already said

00:23:02,160 --> 00:23:06,870
there's vendor solutions as well so

00:23:04,020 --> 00:23:09,179
there's go Hana cloud and we've cloud we

00:23:06,870 --> 00:23:12,419
have our own back-end that we run as

00:23:09,179 --> 00:23:14,520
well that lets you store these metrics

00:23:12,419 --> 00:23:19,169
in a common location as well we also do

00:23:14,520 --> 00:23:20,990
things like in from implement prom ql so

00:23:19,169 --> 00:23:23,850
that you could actually run queries so

00:23:20,990 --> 00:23:25,650
whether this is more about long-term

00:23:23,850 --> 00:23:28,669
storage the other thing that we can do

00:23:25,650 --> 00:23:31,890
is you can use your Fano with us as well

00:23:28,669 --> 00:23:33,900
if you if you choose to so that's kind

00:23:31,890 --> 00:23:36,090
of how we try to interact with the open

00:23:33,900 --> 00:23:37,650
source community by leveraging a lot of

00:23:36,090 --> 00:23:39,720
the de facto standards that the open

00:23:37,650 --> 00:23:42,270
source community has created as well as

00:23:39,720 --> 00:23:45,299
our own projects that we do around open

00:23:42,270 --> 00:23:49,260
source as well so let me just grab a

00:23:45,299 --> 00:23:51,600
chair here and we can do a quick demo

00:23:49,260 --> 00:23:55,260
hopefully my demo environment didn't

00:23:51,600 --> 00:23:59,250
crash as well all right so if I do a

00:23:55,260 --> 00:24:02,960
coop CTL get yes pods

00:23:59,250 --> 00:24:02,960
I shouldn't have anything running here

00:24:07,640 --> 00:24:12,270
must be getting close to lunch because

00:24:09,840 --> 00:24:12,750
now the Wi-Fi is not working all right

00:24:12,270 --> 00:24:15,390
there we go

00:24:12,750 --> 00:24:18,030
that wasn't too bad and so I'm just

00:24:15,390 --> 00:24:22,080
gonna do a history because it's easier

00:24:18,030 --> 00:24:25,710
because there's a flag I gotta suck so

00:24:22,080 --> 00:24:28,530
if you want to know how to get started

00:24:25,710 --> 00:24:30,780
with hell it's actually really easy you

00:24:28,530 --> 00:24:34,230
just download the hell binary and then

00:24:30,780 --> 00:24:36,330
you run a helm in it and that huh man it

00:24:34,230 --> 00:24:38,580
what it does is basically installs home

00:24:36,330 --> 00:24:40,920
for you and so this is actually a new

00:24:38,580 --> 00:24:43,950
cluster that I had just set up and did

00:24:40,920 --> 00:24:46,890
all of this this morning and so if I

00:24:43,950 --> 00:24:49,800
just run a helm install you specify the

00:24:46,890 --> 00:24:52,980
name that's the unique identifier for it

00:24:49,800 --> 00:24:54,780
and then you specify the chart and then

00:24:52,980 --> 00:24:57,750
just like we learned in the terraform

00:24:54,780 --> 00:25:00,210
tart there's values that you can set to

00:24:57,750 --> 00:25:02,040
change what actually happens when this

00:25:00,210 --> 00:25:04,680
gets deployed so we're changing a

00:25:02,040 --> 00:25:07,800
variable this defines in the prometheus

00:25:04,680 --> 00:25:09,900
chart our back dot create time we're

00:25:07,800 --> 00:25:12,270
setting that to true there's things like

00:25:09,900 --> 00:25:13,350
image names image versions there's a

00:25:12,270 --> 00:25:15,330
whole bunch of different things that you

00:25:13,350 --> 00:25:20,310
can change and I actually downloaded

00:25:15,330 --> 00:25:22,410
being values yamo and so you can see

00:25:20,310 --> 00:25:26,250
here there are things like amounts that

00:25:22,410 --> 00:25:28,650
you can change upgrade strategy if you

00:25:26,250 --> 00:25:30,270
have a service and you want to expose it

00:25:28,650 --> 00:25:33,620
via an idea or a particularly load

00:25:30,270 --> 00:25:44,250
balancer then you can do that as well

00:25:33,620 --> 00:25:45,570
alright so it install and then you'll

00:25:44,250 --> 00:25:47,520
get back information about how to

00:25:45,570 --> 00:25:51,890
actually get to the things that you want

00:25:47,520 --> 00:25:53,880
to get to so I'm going to export this

00:25:51,890 --> 00:25:59,210
and we're just going to connect us

00:25:53,880 --> 00:26:02,630
indirectly to Prometheus and not use

00:25:59,210 --> 00:26:02,630
Griffin Oh real quick

00:26:08,960 --> 00:26:17,309
and so now if I go to 120 7.00 about 900

00:26:13,710 --> 00:26:18,899
I can see that for medius is up and

00:26:17,309 --> 00:26:21,629
running the other really interesting

00:26:18,899 --> 00:26:23,700
thing here is is as soon as I deployed

00:26:21,629 --> 00:26:25,889
it

00:26:23,700 --> 00:26:29,039
I started getting metros back as well

00:26:25,889 --> 00:26:31,859
and so if I click execute then I can

00:26:29,039 --> 00:26:34,289
actually see the metrics and the value

00:26:31,859 --> 00:26:37,320
you can also click on graph and you can

00:26:34,289 --> 00:26:40,259
actually see that data as well and so

00:26:37,320 --> 00:26:42,269
maybe I want to go back just 15 minutes

00:26:40,259 --> 00:26:43,919
and you can see that when I did that

00:26:42,269 --> 00:26:46,350
deployment it's automatically started

00:26:43,919 --> 00:26:48,659
pulling metrics back for me as well so

00:26:46,350 --> 00:26:52,320
it's really just that easy and just that

00:26:48,659 --> 00:27:02,070
quick to start pulling metrics back and

00:26:52,320 --> 00:27:05,009
then let's install grow fauna and so

00:27:02,070 --> 00:27:08,489
once again using a helmet art and I'll

00:27:05,009 --> 00:27:11,789
do a QC TL you can real quick oops ETL

00:27:08,489 --> 00:27:13,619
get pods and this is the value that

00:27:11,789 --> 00:27:16,019
he'll provide so you can see all of

00:27:13,619 --> 00:27:18,899
those different components that helm

00:27:16,019 --> 00:27:21,239
created for me that are running

00:27:18,899 --> 00:27:23,690
Prometheus and then you can see that it

00:27:21,239 --> 00:27:27,419
created the graph on a container or

00:27:23,690 --> 00:27:29,690
graph on a pod as well and so it makes

00:27:27,419 --> 00:27:32,039
it a lot more simpler to actually go and

00:27:29,690 --> 00:27:38,809
deploy things to your terminates cluster

00:27:32,039 --> 00:27:38,809
- so now I need to go and get my secret

00:27:39,830 --> 00:27:46,730
and now I'm going to go and export this

00:27:44,340 --> 00:27:46,730
again

00:27:53,289 --> 00:27:59,659
all right so grab a secret secret and

00:27:56,330 --> 00:28:05,570
now I should be able to go to four or

00:27:59,659 --> 00:28:09,590
three thousand and you're fauna is up

00:28:05,570 --> 00:28:11,779
and running for me money then I'm logged

00:28:09,590 --> 00:28:13,820
in so the first thing you need to do is

00:28:11,779 --> 00:28:17,269
you need to configure a data source and

00:28:13,820 --> 00:28:19,159
so I'm you can see all of the different

00:28:17,269 --> 00:28:21,049
options that are available there are

00:28:19,159 --> 00:28:22,730
different plugins that you can add in as

00:28:21,049 --> 00:28:24,169
well so there's not an option there and

00:28:22,730 --> 00:28:26,149
the default out of the box you can

00:28:24,169 --> 00:28:27,620
download a plug-in and then that plug-in

00:28:26,149 --> 00:28:30,169
allows you to access one of these other

00:28:27,620 --> 00:28:37,130
data sources data sources and then I'm

00:28:30,169 --> 00:28:41,049
just gonna add Prometheus and I'm doing

00:28:37,130 --> 00:28:54,860
a half a sheet because it's a long URL

00:28:41,049 --> 00:28:58,130
there we go and all I need to do this

00:28:54,860 --> 00:28:59,690
save and test and it tells me that the

00:28:58,130 --> 00:29:01,549
data source is working so I should be

00:28:59,690 --> 00:29:03,559
able to go here now and say create

00:29:01,549 --> 00:29:07,159
dashboard and I'm going to create a

00:29:03,559 --> 00:29:11,620
graph to graph and do edit and then we

00:29:07,159 --> 00:29:14,120
should be able to do that node load one

00:29:11,620 --> 00:29:19,039
so that interface that I was looking at

00:29:14,120 --> 00:29:20,929
earlier remember that that kind of curry

00:29:19,039 --> 00:29:23,360
interface against the Prometheus server

00:29:20,929 --> 00:29:24,799
you're not able to save anything you're

00:29:23,360 --> 00:29:27,289
not able to get these dashboards and

00:29:24,799 --> 00:29:30,580
other things like that as well so this

00:29:27,289 --> 00:29:33,049
gives you a much more fully functional

00:29:30,580 --> 00:29:35,899
UI to actually go and create these

00:29:33,049 --> 00:29:39,350
graphs you can resize things you can

00:29:35,899 --> 00:29:42,139
zoom into any time range as well you can

00:29:39,350 --> 00:29:43,700
turn things on and off as well if you

00:29:42,139 --> 00:29:48,289
only want to look at particular things

00:29:43,700 --> 00:29:54,760
you can do that but the nice thing is is

00:29:48,289 --> 00:29:54,760
that Prometheus perm tiger fauna offers

00:29:56,860 --> 00:30:01,970
lots of different dashboards that you

00:29:59,480 --> 00:30:05,120
can import as well and so if you go here

00:30:01,970 --> 00:30:15,320
to import and let's just go to

00:30:05,120 --> 00:30:16,820
opponent then click on dashboards and

00:30:15,320 --> 00:30:20,740
you can see all of these different

00:30:16,820 --> 00:30:25,580
options that are available to you and so

00:30:20,740 --> 00:30:28,520
let's take this one here and all you

00:30:25,580 --> 00:30:34,010
have to do is copy this ID and then I

00:30:28,520 --> 00:30:36,230
paste in the ID and click load and it's

00:30:34,010 --> 00:30:41,780
gonna give me information about this and

00:30:36,230 --> 00:30:43,970
I'd say important and now I have the

00:30:41,780 --> 00:30:46,250
host metrics of my kubernetes cluster I

00:30:43,970 --> 00:30:48,350
can drill down into the dashboards that

00:30:46,250 --> 00:30:50,060
they provide looking at things like

00:30:48,350 --> 00:30:53,120
interrupts what version of the kernel

00:30:50,060 --> 00:30:56,570
when I'm running and so forth an

00:30:53,120 --> 00:31:00,110
overview panel as well I can drill down

00:30:56,570 --> 00:31:01,970
into CPU or load and other things like

00:31:00,110 --> 00:31:05,030
that as well so there's a whole host of

00:31:01,970 --> 00:31:07,220
different dashboards available that you

00:31:05,030 --> 00:31:11,600
can very easily insert into your

00:31:07,220 --> 00:31:13,970
environment and load them on so with

00:31:11,600 --> 00:31:16,370
that thank you for taking the time to

00:31:13,970 --> 00:31:18,680
listen hopefully you learn something

00:31:16,370 --> 00:31:20,570
about kubernetes and I'm happy to I'm

00:31:18,680 --> 00:31:23,600
sorry about prometheus maybe you learned

00:31:20,570 --> 00:31:24,950
something about kubernetes - how many

00:31:23,600 --> 00:31:30,980
take questions if anyone has any

00:31:24,950 --> 00:31:32,990
question I just say that like this is

00:31:30,980 --> 00:31:34,220
also a good way if you have a bunch of I

00:31:32,990 --> 00:31:36,170
know there's a lot of people that are

00:31:34,220 --> 00:31:38,930
like hardware hackers in this community

00:31:36,170 --> 00:31:40,340
so if you're having IOT devices and

00:31:38,930 --> 00:31:42,860
other things like that as well and you

00:31:40,340 --> 00:31:45,050
need to expose metrics this is a very

00:31:42,860 --> 00:31:47,180
good way to expose metrics from your IOT

00:31:45,050 --> 00:31:48,650
devices and other things like that as

00:31:47,180 --> 00:31:50,570
well and then you could have a collector

00:31:48,650 --> 00:31:52,250
go and collect those metrics or they can

00:31:50,570 --> 00:31:54,050
push it back to a push gateway or

00:31:52,250 --> 00:31:56,090
something like that as well and then you

00:31:54,050 --> 00:31:57,590
have Prometheus and Gravano where you

00:31:56,090 --> 00:31:59,210
can go and easily start to graph those

00:31:57,590 --> 00:32:02,660
metrics and pull that information back

00:31:59,210 --> 00:32:04,490
as well I'll be around for a little bit

00:32:02,660 --> 00:32:06,300
if anyone wants to chat but thank you

00:32:04,490 --> 00:32:09,520
very much for attending

00:32:06,300 --> 00:32:09,520

YouTube URL: https://www.youtube.com/watch?v=_FkdzRRErBQ


