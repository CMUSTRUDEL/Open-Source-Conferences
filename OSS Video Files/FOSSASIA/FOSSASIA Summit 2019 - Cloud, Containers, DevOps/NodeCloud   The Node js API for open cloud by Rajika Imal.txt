Title: NodeCloud   The Node js API for open cloud by Rajika Imal
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	15 March 2019 16:10, Lecture Theatre

Organizations move to open cloud solutions based on certain advantages of combining multiple services of different cloud providers. NodeCloud is an open source project which unifies the API layer to simply application layer API contracts and provisioning. The talk will deliver the design and development methodology of NodeCloud library.

With the advent of multiple cloud providers with similar services, many projects tend to use different services from many providers due to certain advantages. API contracts of cloud providers tend to differ in major ways and this leads to slower development and bad developer experience. NodeCloud is an open source solution which unifies the API layer in Node.js runtime. API contracts in NodeCloud make it easier to consume same types of services in different providers with common API semantics.
Captions: 
	00:00:00,060 --> 00:00:05,069
the title of the presentation is not

00:00:02,370 --> 00:00:08,370
cloud so a note cloud is an odd JS

00:00:05,069 --> 00:00:10,469
package for the open cloud so when we

00:00:08,370 --> 00:00:11,940
progressed through the presentation we

00:00:10,469 --> 00:00:15,420
will save what is happened cloud and

00:00:11,940 --> 00:00:21,930
white matters that we know about open

00:00:15,420 --> 00:00:23,880
proud and yeah so Who am I we will start

00:00:21,930 --> 00:00:26,519
in the presentation so I'm Raja yoga and

00:00:23,880 --> 00:00:29,490
I'm currently working as a software

00:00:26,519 --> 00:00:31,170
engineer at 99x technology so a 19x

00:00:29,490 --> 00:00:31,500
technology is a company based in Sri

00:00:31,170 --> 00:00:34,770
Lanka

00:00:31,500 --> 00:00:37,620
so I'm from also from Sri Lanka and also

00:00:34,770 --> 00:00:41,790
I'm a contributor at scholar so we are

00:00:37,620 --> 00:00:44,850
also representing gzip and GCI and you

00:00:41,790 --> 00:00:47,550
can find me and any platform using this

00:00:44,850 --> 00:00:52,829
huddle rajkumar a github medium or

00:00:47,550 --> 00:00:55,680
traitor alright so before starting

00:00:52,829 --> 00:00:59,219
before diving into the all the details

00:00:55,680 --> 00:01:02,640
of north cloud and how we manage the api

00:00:59,219 --> 00:01:09,030
is I need to go through what open cloud

00:01:02,640 --> 00:01:10,710
is all about so so imagine that we have

00:01:09,030 --> 00:01:14,310
a situation like this so we have an

00:01:10,710 --> 00:01:17,850
application and we need to use different

00:01:14,310 --> 00:01:21,180
services of different clouds so in this

00:01:17,850 --> 00:01:23,430
case we have we have cloud a and cloud B

00:01:21,180 --> 00:01:26,759
so this particular application is trying

00:01:23,430 --> 00:01:29,360
to use a particular set of services from

00:01:26,759 --> 00:01:32,970
crowd a and also a particular set of

00:01:29,360 --> 00:01:34,610
services from cloud B as well so this

00:01:32,970 --> 00:01:41,610
application is interacting with

00:01:34,610 --> 00:01:44,610
different clouds so yep so the open

00:01:41,610 --> 00:01:46,799
cloud the basic definition would be

00:01:44,610 --> 00:01:50,970
consuming different services of

00:01:46,799 --> 00:01:54,270
different cloud products so why would we

00:01:50,970 --> 00:01:56,899
need open cloud so one one such use case

00:01:54,270 --> 00:01:59,549
is to make use of different strains of

00:01:56,899 --> 00:02:02,579
different services so you might have

00:01:59,549 --> 00:02:03,200
seen that different cloud providers such

00:02:02,579 --> 00:02:05,420
as a dub

00:02:03,200 --> 00:02:08,269
this GCP they have different services

00:02:05,420 --> 00:02:12,560
and that they have a similar set of

00:02:08,269 --> 00:02:15,319
services so we can make use of these

00:02:12,560 --> 00:02:19,910
friends of each of those services using

00:02:15,319 --> 00:02:22,220
this open cloud paradigm and another

00:02:19,910 --> 00:02:25,760
thing is using the redundant redundancy

00:02:22,220 --> 00:02:30,680
and disaster recovery so we can make use

00:02:25,760 --> 00:02:33,860
of the open cloud paradigm to the gate

00:02:30,680 --> 00:02:35,480
to get rid of disasters and that's to

00:02:33,860 --> 00:02:37,370
avoid vendor lock-in so if you are an

00:02:35,480 --> 00:02:40,610
organization so you might be a

00:02:37,370 --> 00:02:44,750
particularly interested to avoid vendor

00:02:40,610 --> 00:02:47,329
lock-in so you might not be interested

00:02:44,750 --> 00:02:50,209
in getting into one particular cloud

00:02:47,329 --> 00:02:54,680
provider so you need to be flexible to

00:02:50,209 --> 00:02:56,299
shift from one provider to another and

00:02:54,680 --> 00:02:59,209
another thing is compliant so as an

00:02:56,299 --> 00:03:01,310
organization you are very interested and

00:02:59,209 --> 00:03:02,840
you are very concerned about compliance

00:03:01,310 --> 00:03:04,970
or various services from different

00:03:02,840 --> 00:03:07,160
clouds our providers might not be

00:03:04,970 --> 00:03:09,500
compliant with your organization's

00:03:07,160 --> 00:03:12,500
standard so that's a very important

00:03:09,500 --> 00:03:15,109
point and scalability so different

00:03:12,500 --> 00:03:17,269
providers have different levels of

00:03:15,109 --> 00:03:19,639
scalability because different services

00:03:17,269 --> 00:03:21,410
so we need to be thorough about

00:03:19,639 --> 00:03:25,639
scalability as well and we are building

00:03:21,410 --> 00:03:28,040
enterprise applications and cost

00:03:25,639 --> 00:03:30,680
optimization again this is a very big

00:03:28,040 --> 00:03:33,260
concern for organizations the cost is a

00:03:30,680 --> 00:03:39,109
very important thing that we need to

00:03:33,260 --> 00:03:41,690
think about all right so solutions are

00:03:39,109 --> 00:03:43,310
leveraging opens open our cloud so there

00:03:41,690 --> 00:03:46,430
are different there should be different

00:03:43,310 --> 00:03:49,730
characteristics of services we should

00:03:46,430 --> 00:03:52,340
have using the open cloud paradigm so

00:03:49,730 --> 00:03:53,540
one such thing is transparency we need

00:03:52,340 --> 00:03:57,139
to go we need to have a good

00:03:53,540 --> 00:03:59,840
transparency when we call for open cloud

00:03:57,139 --> 00:04:02,180
paradigm so we need to see what's

00:03:59,840 --> 00:04:06,940
actually happening with the APS that we

00:04:02,180 --> 00:04:09,640
are using and the versatility

00:04:06,940 --> 00:04:12,880
and we need to be we need to be able to

00:04:09,640 --> 00:04:15,430
easily manage the the applications which

00:04:12,880 --> 00:04:17,080
are running on different clouds so if

00:04:15,430 --> 00:04:18,370
they are using different providers and

00:04:17,080 --> 00:04:21,130
there are different services they should

00:04:18,370 --> 00:04:24,790
be actually easily managed so we need to

00:04:21,130 --> 00:04:29,860
be thorough about how be about the

00:04:24,790 --> 00:04:32,320
maintenance aspects as well and the

00:04:29,860 --> 00:04:35,620
configuration options again this is one

00:04:32,320 --> 00:04:37,390
such important point that we need to

00:04:35,620 --> 00:04:39,130
think about so when we have different

00:04:37,390 --> 00:04:41,350
providers we need to think about hobby

00:04:39,130 --> 00:04:44,620
of you are actually going to configure

00:04:41,350 --> 00:04:47,380
other cloud-based applications so when

00:04:44,620 --> 00:04:49,570
we are interacting with different ApS we

00:04:47,380 --> 00:04:51,550
need to be thorough about how we are

00:04:49,570 --> 00:04:53,560
going to configure our different

00:04:51,550 --> 00:05:00,580
services using the APS of different

00:04:53,560 --> 00:05:04,630
cloud providers all right so let's move

00:05:00,580 --> 00:05:05,740
into a use case so in this scenario I'm

00:05:04,630 --> 00:05:10,390
referring to

00:05:05,740 --> 00:05:12,520
backing up of AWS s3 pocket in a DCP

00:05:10,390 --> 00:05:14,080
storage so these are similar services

00:05:12,520 --> 00:05:17,710
from different cloud providers it

00:05:14,080 --> 00:05:19,900
oblivious and GCP so why would we need

00:05:17,710 --> 00:05:22,330
something like this so this is a sample

00:05:19,900 --> 00:05:26,080
use case so there might be account

00:05:22,330 --> 00:05:28,210
hacking and against data loss so you

00:05:26,080 --> 00:05:31,230
might be concerned about your data so

00:05:28,210 --> 00:05:35,380
there might be use cases like this from

00:05:31,230 --> 00:05:37,800
backing up head abuse s3 to your GP

00:05:35,380 --> 00:05:37,800
storage

00:05:41,100 --> 00:05:48,360
so this is a very very simplified

00:05:44,160 --> 00:05:51,900
architecture so you have AWS cloud

00:05:48,360 --> 00:05:54,810
provider and GCP so what so this is our

00:05:51,900 --> 00:05:58,020
application layer what you are trying to

00:05:54,810 --> 00:06:01,530
do is we have a cron job in this case

00:05:58,020 --> 00:06:05,010
and we are trying to back up this s3

00:06:01,530 --> 00:06:07,320
data from our application to our GCC so

00:06:05,010 --> 00:06:10,680
how we are going to do this we here we

00:06:07,320 --> 00:06:13,200
have the AWS SDK and here we have the

00:06:10,680 --> 00:06:15,420
GPS details so we need to call this

00:06:13,200 --> 00:06:17,760
application layer and we need to be

00:06:15,420 --> 00:06:20,310
thorough about the maintenance and the

00:06:17,760 --> 00:06:26,180
design aspects of this particular layer

00:06:20,310 --> 00:06:32,640
so this is how we can do with the

00:06:26,180 --> 00:06:35,370
respective speakers so what we see here

00:06:32,640 --> 00:06:39,120
is the is that we have this aggregation

00:06:35,370 --> 00:06:41,730
of appears because different providers

00:06:39,120 --> 00:06:44,670
have their different API implementation

00:06:41,730 --> 00:06:47,450
so AWS might be following a different

00:06:44,670 --> 00:06:50,760
set of specifications and they might

00:06:47,450 --> 00:06:53,400
expose different set of interfaces for

00:06:50,760 --> 00:06:59,040
you and if you think about GCP they will

00:06:53,400 --> 00:07:00,840
do their own specifications and also the

00:06:59,040 --> 00:07:02,730
constructs are different from each each

00:07:00,840 --> 00:07:04,650
other so as I mentioned they have

00:07:02,730 --> 00:07:09,870
different ways of exposing their

00:07:04,650 --> 00:07:11,940
interfaces from different services so

00:07:09,870 --> 00:07:13,590
what are the disadvantages of decided

00:07:11,940 --> 00:07:15,440
rooted API so if you are a large

00:07:13,590 --> 00:07:17,960
organization and if you have

00:07:15,440 --> 00:07:21,570
organization or if you have applications

00:07:17,960 --> 00:07:23,370
using open cloud paradigm you need to

00:07:21,570 --> 00:07:27,030
move faster if you are a large

00:07:23,370 --> 00:07:29,670
organization so it is very hard to move

00:07:27,030 --> 00:07:32,090
faster if you have these is aggregated

00:07:29,670 --> 00:07:32,090
APs

00:07:33,370 --> 00:07:39,190
and you will spend more time on

00:07:37,270 --> 00:07:42,520
integration rather than your business

00:07:39,190 --> 00:07:44,440
logic and there's a really high learning

00:07:42,520 --> 00:07:47,260
curve when it comes to learning the

00:07:44,440 --> 00:07:50,680
different interfaces of different SDKs

00:07:47,260 --> 00:07:52,210
from different cloud providers and it's

00:07:50,680 --> 00:07:53,979
really hard to be focused on the

00:07:52,210 --> 00:07:56,410
business process processes because you

00:07:53,979 --> 00:07:58,300
are you might be a focusing about your

00:07:56,410 --> 00:08:00,610
integration aspects rather than your

00:07:58,300 --> 00:08:04,710
business processes so that's so that

00:08:00,610 --> 00:08:08,680
your ROI our way will be much loved

00:08:04,710 --> 00:08:12,669
so with that so we see that the clear

00:08:08,680 --> 00:08:15,220
constructs us are a necessity and we

00:08:12,669 --> 00:08:18,130
came up with a solution called odd Club

00:08:15,220 --> 00:08:21,910
so this is for node.js only this is a

00:08:18,130 --> 00:08:24,970
node.js package and it's a unified API

00:08:21,910 --> 00:08:26,860
layer in noisy so you will be using only

00:08:24,970 --> 00:08:28,389
no not cloud if you are going to

00:08:26,860 --> 00:08:29,800
interact with different cloud projects

00:08:28,389 --> 00:08:35,710
and if you're using the open cloud

00:08:29,800 --> 00:08:38,440
paradigm so currently we support three

00:08:35,710 --> 00:08:44,620
providers Amazon Web Services Google

00:08:38,440 --> 00:08:48,370
cloud and Microsoft edge so the design

00:08:44,620 --> 00:08:50,800
philosophy so we have chose to we have

00:08:48,370 --> 00:08:52,930
chosen a plug-in architecture for this

00:08:50,800 --> 00:08:54,820
because we need we need to build a

00:08:52,930 --> 00:08:57,180
community around this project so that

00:08:54,820 --> 00:09:03,940
the community also can contribute to our

00:08:57,180 --> 00:09:05,700
not cloud project and yeah so this is a

00:09:03,940 --> 00:09:07,839
pretty previous the same architecture

00:09:05,700 --> 00:09:10,300
diagram that we saw we have the

00:09:07,839 --> 00:09:12,790
different cloud providers and we have

00:09:10,300 --> 00:09:16,720
our application layer so with not cloud

00:09:12,790 --> 00:09:19,390
we can replace those two SDKs and we

00:09:16,720 --> 00:09:21,400
will be using only not nor cloud so that

00:09:19,390 --> 00:09:23,140
it will be more easier and you will be

00:09:21,400 --> 00:09:25,750
all always interacting with not cloud

00:09:23,140 --> 00:09:30,040
api's so you need to so you don't need

00:09:25,750 --> 00:09:32,850
to learn any more extra API is from

00:09:30,040 --> 00:09:32,850
different cloud providers

00:09:34,900 --> 00:09:41,510
so how do you get started so we have

00:09:38,690 --> 00:09:44,600
different plugins so there's a

00:09:41,510 --> 00:09:48,740
configuration file called NC dot kinetic

00:09:44,600 --> 00:09:51,380
DOJ's and what we need to do is just so

00:09:48,740 --> 00:09:54,020
in this in sadat config DOJ's we need to

00:09:51,380 --> 00:09:56,270
import our plugins so one such problem

00:09:54,020 --> 00:09:58,850
is a node cloud head of newest planning

00:09:56,270 --> 00:10:01,730
and the other one is our not cloud gucp

00:09:58,850 --> 00:10:06,130
pluggy so how we use the providers

00:10:01,730 --> 00:10:09,920
I like this we specify our providers and

00:10:06,130 --> 00:10:15,710
yep so here we have AWS and Google

00:10:09,920 --> 00:10:23,870
providers so yep so I will show you a

00:10:15,710 --> 00:10:27,340
quick demonstration of not cloud and how

00:10:23,870 --> 00:10:30,740
we can interact with different APs

00:10:27,340 --> 00:10:32,060
so this simulates the same use case

00:10:30,740 --> 00:10:35,740
lesson that I mentioned in the

00:10:32,060 --> 00:10:40,430
presentation so we are going to upload

00:10:35,740 --> 00:10:43,730
to s3 bucket and also be the same API we

00:10:40,430 --> 00:10:47,900
can you do that to GCP as well so here

00:10:43,730 --> 00:10:51,250
I'm trying to create I'm trying to

00:10:47,900 --> 00:10:51,250
create a state bucket

00:10:57,050 --> 00:11:03,380
so you can see that the parameters these

00:11:00,230 --> 00:11:06,380
parameters might be different for

00:11:03,380 --> 00:11:08,300
different cloud providers and there are

00:11:06,380 --> 00:11:10,550
respective services and that's something

00:11:08,300 --> 00:11:12,710
that we can't actually that we don't

00:11:10,550 --> 00:11:15,740
actually have control on so this

00:11:12,710 --> 00:11:18,710
parameter should be based on the SD case

00:11:15,740 --> 00:11:21,670
so what I'm trying to do here is a great

00:11:18,710 --> 00:11:21,670
s3 bucket

00:11:22,210 --> 00:11:28,370
so you can see that this mystery bucket

00:11:25,970 --> 00:11:35,750
was created from the create API from the

00:11:28,370 --> 00:11:39,490
node cloud SDK and again I'm trying to

00:11:35,750 --> 00:11:39,490
upload from node club

00:11:42,950 --> 00:11:46,990
so I'm giving a key value pair

00:12:04,320 --> 00:12:08,730
and you can see that it was uploaded

00:12:06,839 --> 00:12:11,579
from the SDK not rowdiest

00:12:08,730 --> 00:12:16,620
SDK and we will see again how we can use

00:12:11,579 --> 00:12:19,259
the same API API interface to create a

00:12:16,620 --> 00:12:23,540
GCP storage and also how to upload it

00:12:19,259 --> 00:12:27,209
using the same API so yeah I'm using the

00:12:23,540 --> 00:12:28,860
Google provider from not clump and I'm

00:12:27,209 --> 00:12:31,170
trying to create a bucket so you can see

00:12:28,860 --> 00:12:33,990
that this is the same API so earlier you

00:12:31,170 --> 00:12:36,949
had also bucket but if you use different

00:12:33,990 --> 00:12:39,389
SDKs you will see that AWS SDK has

00:12:36,949 --> 00:12:41,910
different terminology and if you use a

00:12:39,389 --> 00:12:45,029
Google GCP SDK they have a different

00:12:41,910 --> 00:12:48,389
terminology so with non prowdy you need

00:12:45,029 --> 00:12:52,199
to only learn one api and with that on

00:12:48,389 --> 00:12:55,259
twitter api only you can make use of the

00:12:52,199 --> 00:12:59,670
different services so here I am creating

00:12:55,259 --> 00:13:04,579
so this is the the create API the same

00:12:59,670 --> 00:13:04,579
api that i that i use your foil AWS s3

00:13:14,470 --> 00:13:22,269
so we will go to our GCP platform and we

00:13:18,970 --> 00:13:25,269
can see that the the pocket operated in

00:13:22,269 --> 00:13:27,550
now you see me and again I'm trying to

00:13:25,269 --> 00:13:32,560
upload using the same API that I used

00:13:27,550 --> 00:13:35,199
earlier to upload to AWS bucket again

00:13:32,560 --> 00:13:36,910
I'm we have different parameters so this

00:13:35,199 --> 00:13:39,509
is not how under our control as I

00:13:36,910 --> 00:13:39,509
mentioned earlier

00:13:42,330 --> 00:13:46,220
so I'm applauding a key/value pair

00:13:51,900 --> 00:13:58,920
yep so have uploaded a Jason friendly

00:13:55,200 --> 00:14:03,360
and it was there with the same API that

00:13:58,920 --> 00:14:07,500
I used to upload to AWS yesterday so

00:14:03,360 --> 00:14:12,450
that was a quick demonstration of how we

00:14:07,500 --> 00:14:14,430
can use not cloud API is to interact

00:14:12,450 --> 00:14:17,279
with different providers with the same

00:14:14,430 --> 00:14:18,600
API so you don't need to learn learn

00:14:17,279 --> 00:14:24,600
about different API when you are

00:14:18,600 --> 00:14:27,810
building enterprise applications all

00:14:24,600 --> 00:14:32,070
right so we have an organization called

00:14:27,810 --> 00:14:33,960
crowd lips so node cloud is under cloud

00:14:32,070 --> 00:14:38,850
lips organization so if you go to github

00:14:33,960 --> 00:14:41,160
charge slash crowd lips / not cloud you

00:14:38,850 --> 00:14:42,330
will see the core repository so as I

00:14:41,160 --> 00:14:45,180
mentioned earlier we have a plug-in

00:14:42,330 --> 00:14:47,430
architecture so this is the core

00:14:45,180 --> 00:14:52,260
repository that we have and this

00:14:47,430 --> 00:14:54,600
repository has the ability to inject

00:14:52,260 --> 00:14:58,410
different plugins so as I showed earlier

00:14:54,600 --> 00:15:00,870
we have we had the AWS plug-in and also

00:14:58,410 --> 00:15:03,690
a tcp plug-in so this is the core

00:15:00,870 --> 00:15:06,150
repository and these are the plugins

00:15:03,690 --> 00:15:07,470
that we have this is one of the earliest

00:15:06,150 --> 00:15:07,980
projects that we have played an Oort

00:15:07,470 --> 00:15:11,240
cloud

00:15:07,980 --> 00:15:11,240
AWS - honey

00:15:12,720 --> 00:15:17,880
so when we were developing this knot

00:15:16,350 --> 00:15:21,840
cloud project that we thought of how we

00:15:17,880 --> 00:15:24,150
can provide the configuration so we will

00:15:21,840 --> 00:15:26,490
so in a software we have a different

00:15:24,150 --> 00:15:28,650
ways of configuring so we thought of

00:15:26,490 --> 00:15:30,470
going ahead big configuration with code

00:15:28,650 --> 00:15:34,440
so as I mentioned we have a file called

00:15:30,470 --> 00:15:37,740
in Z dot config dot J's so with that

00:15:34,440 --> 00:15:41,760
file we can actually configure it

00:15:37,740 --> 00:15:47,430
configure our not cloud providers and so

00:15:41,760 --> 00:15:49,410
we prefer configuration with code yeah

00:15:47,430 --> 00:15:50,370
so this is the same file that I

00:15:49,410 --> 00:15:53,160
mentioned earlier

00:15:50,370 --> 00:15:59,300
so we have our configuration in our J's

00:15:53,160 --> 00:16:02,460
file so let's say there's a new provider

00:15:59,300 --> 00:16:04,470
upcoming provider and it's a really good

00:16:02,460 --> 00:16:09,690
provider and that they have similar

00:16:04,470 --> 00:16:11,130
services that we have in our different

00:16:09,690 --> 00:16:13,320
products that we that are in the market

00:16:11,130 --> 00:16:16,170
currently so let's say this is a

00:16:13,320 --> 00:16:17,880
provider called X so we need to create a

00:16:16,170 --> 00:16:21,180
plug-in so as a community member

00:16:17,880 --> 00:16:24,180
you see that you need to you need you

00:16:21,180 --> 00:16:26,640
need the you need a plug-in to interact

00:16:24,180 --> 00:16:31,530
with a node clock so how so how you can

00:16:26,640 --> 00:16:33,630
do it is just at the plugin name to the

00:16:31,530 --> 00:16:35,130
list of products or just to create a

00:16:33,630 --> 00:16:38,280
pull request and we have a file called

00:16:35,130 --> 00:16:40,590
product at J so it's really easy to find

00:16:38,280 --> 00:16:43,650
that in the North car not cloud core

00:16:40,590 --> 00:16:45,180
repository and then what you need to do

00:16:43,650 --> 00:16:47,610
is create a repository using the

00:16:45,180 --> 00:16:49,710
following naming convention so you might

00:16:47,610 --> 00:16:52,410
have seen the web pack naming convention

00:16:49,710 --> 00:16:55,530
for plugins and loaded small at the same

00:16:52,410 --> 00:16:57,540
condition that we are following here we

00:16:55,530 --> 00:17:03,030
have node club deployed in it so our

00:16:57,540 --> 00:17:06,780
pride is its crowd - its plugin and you

00:17:03,030 --> 00:17:11,220
have to code your API so in the

00:17:06,780 --> 00:17:13,770
repositories and next what you need to

00:17:11,220 --> 00:17:16,500
do is communicate with the core team so

00:17:13,770 --> 00:17:20,870
you can see the core team if you go to

00:17:16,500 --> 00:17:23,270
our North cloud our core repository and

00:17:20,870 --> 00:17:26,390
just communicate with us tell us what

00:17:23,270 --> 00:17:29,480
you're going to do and we will come in

00:17:26,390 --> 00:17:31,520
catch meet you and we will see what what

00:17:29,480 --> 00:17:34,910
we can do to beat the planning and

00:17:31,520 --> 00:17:36,820
that's the last step just obviously to

00:17:34,910 --> 00:17:45,530
MPN try it with everyone

00:17:36,820 --> 00:17:47,270
yep so the aspects of north cloud where

00:17:45,530 --> 00:17:48,980
can we use this there are three

00:17:47,270 --> 00:17:51,770
different aspects so the first one is

00:17:48,980 --> 00:17:54,350
application layer so this is something

00:17:51,770 --> 00:17:58,790
that I demonstrated in the presentation

00:17:54,350 --> 00:18:00,740
and provisioning infrastructure so let's

00:17:58,790 --> 00:18:06,380
say if you if you need to spin off of a

00:18:00,740 --> 00:18:08,570
VM from AWS or GCP you can use the same

00:18:06,380 --> 00:18:13,070
API to provision your infrastructure

00:18:08,570 --> 00:18:14,420
using the API layer it's earth and the

00:18:13,070 --> 00:18:16,340
consuming infrastructure when you

00:18:14,420 --> 00:18:19,370
consume in different infrastructure

00:18:16,340 --> 00:18:25,780
levels you can interact with the node.js

00:18:19,370 --> 00:18:25,780
SDK and get familiar with the API itself

00:18:26,200 --> 00:18:34,730
yep so that's all I have for from me if

00:18:32,540 --> 00:18:38,590
you want to contact me or use this

00:18:34,730 --> 00:18:41,120
handle I'm on github data and median

00:18:38,590 --> 00:18:47,559
yeah so thank you very much if you have

00:18:41,120 --> 00:18:47,559
any questions questions

00:18:48,760 --> 00:18:57,320
come on complete silence

00:18:53,600 --> 00:19:00,080
I do feel a need to find out what you

00:18:57,320 --> 00:19:01,660
guys are interested in all right

00:19:00,080 --> 00:19:03,830
definitely the question it's my school

00:19:01,660 --> 00:19:12,110
all right thank you my case Randall

00:19:03,830 --> 00:19:13,760
balls thank you we also having this

00:19:12,110 --> 00:19:17,180
project if you're a student early I was

00:19:13,760 --> 00:19:19,550
having this project in Giza and GCI so

00:19:17,180 --> 00:19:22,120
if you're interested just check this out

00:19:19,550 --> 00:19:22,120
thank you very much

00:19:32,110 --> 00:19:34,740
yep

00:19:46,590 --> 00:19:52,470
you are just asking generally boscola

00:19:49,200 --> 00:19:54,060
brain okay so to get started it's collab

00:19:52,470 --> 00:19:55,680
but you can go to our video channel and

00:19:54,060 --> 00:19:56,880
if you're interested in a particular

00:19:55,680 --> 00:19:59,430
project you can go to that particular

00:19:56,880 --> 00:20:01,680
project sangita channel and just say hi

00:19:59,430 --> 00:20:03,720
and mendes will be there and they will

00:20:01,680 --> 00:20:06,330
respond within a day maybe a day or two

00:20:03,720 --> 00:20:07,860
and we will see what you can do if you

00:20:06,330 --> 00:20:09,450
are beginner or if you are intermediate

00:20:07,860 --> 00:20:13,800
level so we will see what is your level

00:20:09,450 --> 00:20:15,690
and we will inspect that and you can

00:20:13,800 --> 00:20:18,450
just get started with issue so we in our

00:20:15,690 --> 00:20:20,970
repositories we mostly we have labels in

00:20:18,450 --> 00:20:22,650
the issues so you can inspect that and

00:20:20,970 --> 00:20:26,780
that just get started for Jesus of

00:20:22,650 --> 00:20:26,780

YouTube URL: https://www.youtube.com/watch?v=Cbf2HvadZqA


