Title: Automating Stateful Applications with Kubernetes Operators by Jorge Morales, Graham Dumpleton
Publication date: 2019-03-28
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	17 March 2019 10:30, Training Room 2-2

Kubernetes scales and manages stateless applications quite easily. Stateful applications can require more work. Databases, caching systems, and file stores are harder to dynamically manage with data intact, and sometimes come with their own notion of clustering. Operators are Kubernetes agents that know how to deploy, scale, manage, backup, and even upgrade complex, stateful applications.

This talk will provide an update on the Operator pattern introduced by CoreOS, adopted by many community projects like Rook, Prometheus, and others, and supported by this springâ€™s release of the Operator Framework by Red Hat. With an understanding of Operators in place, the session will go on to detail the Operator Framework and its main components, the Operator SDK and the Lifecycle management backplane.
Captions: 
	00:00:00,060 --> 00:00:06,810
so they do you have kids I do and one of

00:00:04,589 --> 00:00:09,269
the beautiful things that happens to me

00:00:06,810 --> 00:00:12,150
when I travel is that I know I can rely

00:00:09,269 --> 00:00:15,150
on somebody taking care of them like if

00:00:12,150 --> 00:00:18,029
something happens to them they will be

00:00:15,150 --> 00:00:19,980
taking care so if they fall they will be

00:00:18,029 --> 00:00:22,160
taken to the hospital if that needs to

00:00:19,980 --> 00:00:25,289
happen or if they need to be fed

00:00:22,160 --> 00:00:28,880
somebody will give them the food so I'm

00:00:25,289 --> 00:00:31,949
pretty sure that and having somebody's

00:00:28,880 --> 00:00:34,050
looking after something is your

00:00:31,949 --> 00:00:37,050
responsibility without you having to be

00:00:34,050 --> 00:00:39,180
there it's really cool my name is Laura

00:00:37,050 --> 00:00:41,370
Morales and I will be presenting to you

00:00:39,180 --> 00:00:44,270
today about automating stateful

00:00:41,370 --> 00:00:47,520
applications with Canaries operators a

00:00:44,270 --> 00:00:49,379
granduncle tone is with me but he did a

00:00:47,520 --> 00:00:52,469
a talk yesterday he's really exhausted

00:00:49,379 --> 00:00:54,780
so I will be talking today and I come

00:00:52,469 --> 00:00:56,940
from Spain I'm mostly a Java developer

00:00:54,780 --> 00:01:00,780
and work on RedHat as open ship

00:00:56,940 --> 00:01:02,910
developer advocate and he's Australian

00:01:00,780 --> 00:01:06,659
but since he won't be talking

00:01:02,910 --> 00:01:09,090
I wonder intrusive state scaling

00:01:06,659 --> 00:01:12,810
stateless applications on Canaries is

00:01:09,090 --> 00:01:15,869
releasing so you just need to run a

00:01:12,810 --> 00:01:18,630
single command like this chip City and

00:01:15,869 --> 00:01:20,450
scale the name of your deployment the

00:01:18,630 --> 00:01:22,770
name of the replicas that you want and

00:01:20,450 --> 00:01:28,259
the platform will take care of it

00:01:22,770 --> 00:01:30,750
so how does this happen yes there is the

00:01:28,259 --> 00:01:34,710
common ideal from the command line just

00:01:30,750 --> 00:01:36,570
request a desired state to be to happen

00:01:34,710 --> 00:01:40,110
to be much realized on the cluster and

00:01:36,570 --> 00:01:42,509
then there is a set of controllers on

00:01:40,110 --> 00:01:45,329
the platform Canaries that is monitoring

00:01:42,509 --> 00:01:48,240
this desire state that you want which in

00:01:45,329 --> 00:01:51,119
this case is dreaming it will look into

00:01:48,240 --> 00:01:52,829
the actual state of the cluster for how

00:01:51,119 --> 00:01:55,470
many replicas there are in the cluster

00:01:52,829 --> 00:01:56,490
in this case is one and then what it was

00:01:55,470 --> 00:01:59,040
the same is painting

00:01:56,490 --> 00:02:02,040
we are not matching whatever this guy

00:01:59,040 --> 00:02:03,920
wanted so let's make that happen so the

00:02:02,040 --> 00:02:07,170
controller will scale your application

00:02:03,920 --> 00:02:09,709
those replicas this is really

00:02:07,170 --> 00:02:12,030
straightforward but what about

00:02:09,709 --> 00:02:13,690
applications that are more complex what

00:02:12,030 --> 00:02:17,980
about applications that store

00:02:13,690 --> 00:02:20,140
they done things like databases and type

00:02:17,980 --> 00:02:22,420
of software that have specific role

00:02:20,140 --> 00:02:25,990
depending on which scenes of your

00:02:22,420 --> 00:02:29,530
application you are running so and this

00:02:25,990 --> 00:02:31,210
is this can be more challenging but

00:02:29,530 --> 00:02:34,570
running a database to be honest it's

00:02:31,210 --> 00:02:36,400
also releasing yes keep CTR on the image

00:02:34,570 --> 00:02:39,070
for your database and you have your

00:02:36,400 --> 00:02:41,980
database about running but hey running

00:02:39,070 --> 00:02:43,030
this same software over time it is much

00:02:41,980 --> 00:02:47,140
more complicated

00:02:43,030 --> 00:02:51,960
why mostly because this type of saw work

00:02:47,140 --> 00:02:55,060
statehood software has specific and

00:02:51,960 --> 00:02:57,580
state has the specific requirements they

00:02:55,060 --> 00:03:00,100
need to be maybe resize in a specific

00:02:57,580 --> 00:03:02,520
way when you have a database it's not

00:03:00,100 --> 00:03:04,870
the same to resize the database

00:03:02,520 --> 00:03:07,960
depending on which type of database it

00:03:04,870 --> 00:03:11,800
is so every database might need to take

00:03:07,960 --> 00:03:14,590
the specific actions also upgrading the

00:03:11,800 --> 00:03:16,150
software might be difficult why because

00:03:14,590 --> 00:03:17,380
maybe the scheme up that your database

00:03:16,150 --> 00:03:19,480
has changed

00:03:17,380 --> 00:03:21,430
so going from one version to a different

00:03:19,480 --> 00:03:24,130
version of your database might require

00:03:21,430 --> 00:03:26,800
specific steps to happen in the data

00:03:24,130 --> 00:03:29,350
that is stored by configuring your

00:03:26,800 --> 00:03:31,420
database making backups and restore

00:03:29,350 --> 00:03:35,230
those those are actions that need to

00:03:31,420 --> 00:03:37,240
happen over time why because you want to

00:03:35,230 --> 00:03:40,480
make sure that your application is

00:03:37,240 --> 00:03:43,989
healthy that you are able to provide a

00:03:40,480 --> 00:03:46,620
current least total plan to your users

00:03:43,989 --> 00:03:49,570
that everything will be taking care for

00:03:46,620 --> 00:03:54,250
killing a database for example is also

00:03:49,570 --> 00:03:57,520
another and specific thing or complex

00:03:54,250 --> 00:03:59,530
thing that can happen sometimes when a

00:03:57,520 --> 00:04:01,870
database I want one of the instances

00:03:59,530 --> 00:04:05,290
about other ways goes down you may

00:04:01,870 --> 00:04:07,030
require to bring up a new instance but

00:04:05,290 --> 00:04:09,040
when you do that you may need to

00:04:07,030 --> 00:04:11,440
rebalance the information that is

00:04:09,040 --> 00:04:14,590
storing the database so that is complex

00:04:11,440 --> 00:04:18,030
tasks every application that runs on

00:04:14,590 --> 00:04:21,910
opens on coronaries it's installed once

00:04:18,030 --> 00:04:23,919
but over time you need to copy here you

00:04:21,910 --> 00:04:27,169
need to manage it you need to upgrade it

00:04:23,919 --> 00:04:30,080
over time so these are tasks that will

00:04:27,169 --> 00:04:31,270
happen on a regular basis on this award

00:04:30,080 --> 00:04:34,909
as you run

00:04:31,270 --> 00:04:36,889
also patching applications is critical

00:04:34,909 --> 00:04:39,349
to security and when you run solver

00:04:36,889 --> 00:04:43,069
introduction on an enterprise grade

00:04:39,349 --> 00:04:43,689
production security is critical for your

00:04:43,069 --> 00:04:47,150
business

00:04:43,689 --> 00:04:49,400
anything that is automated that is not

00:04:47,150 --> 00:04:51,860
automated this is low in without every

00:04:49,400 --> 00:04:55,749
time that a human intervention needs to

00:04:51,860 --> 00:04:59,539
happen the delivery process of your

00:04:55,749 --> 00:05:02,060
software is going to be delayed if I

00:04:59,539 --> 00:05:05,029
need to have a manual approval to roll

00:05:02,060 --> 00:05:08,360
out my next released production I am

00:05:05,029 --> 00:05:11,389
relying on whoever needs to manually

00:05:08,360 --> 00:05:15,110
approve my soul to be able to approve it

00:05:11,389 --> 00:05:17,810
and that adds a delay for this award to

00:05:15,110 --> 00:05:21,800
be roll out so automation is something

00:05:17,810 --> 00:05:22,759
that we mostly always want so what if

00:05:21,800 --> 00:05:26,300
conatus

00:05:22,759 --> 00:05:28,520
knew how to do some of these things what

00:05:26,300 --> 00:05:32,539
if kubernetes had all this knowledge on

00:05:28,520 --> 00:05:37,879
how to manage all this over just think

00:05:32,539 --> 00:05:39,860
about biscaia grant don't this guy has

00:05:37,879 --> 00:05:44,080
been working on a database company for

00:05:39,860 --> 00:05:47,210
over 19 years it's fictional profile and

00:05:44,080 --> 00:05:50,750
he's been working at a database company

00:05:47,210 --> 00:05:52,430
for over 19 years can't you imagine the

00:05:50,750 --> 00:05:55,219
amount of knowledge that he's gathered

00:05:52,430 --> 00:05:59,360
on how to run this database in that time

00:05:55,219 --> 00:06:02,960
and more importantly how many of these

00:05:59,360 --> 00:06:05,689
guys does every company has so if we

00:06:02,960 --> 00:06:09,080
look into big companies there may be few

00:06:05,689 --> 00:06:10,969
of them right usually I used to work in

00:06:09,080 --> 00:06:14,000
a really big company and whenever we

00:06:10,969 --> 00:06:16,189
were working on a project we needed to

00:06:14,000 --> 00:06:20,960
wait on this guy to be able to help us

00:06:16,189 --> 00:06:24,729
to do the work related to the relational

00:06:20,960 --> 00:06:28,699
database that was important so we were

00:06:24,729 --> 00:06:30,729
having to wait on on his availability to

00:06:28,699 --> 00:06:34,039
be able to progress hours of work

00:06:30,729 --> 00:06:36,979
development our software delivery if you

00:06:34,039 --> 00:06:39,379
look into smaller companies this guy may

00:06:36,979 --> 00:06:40,669
not even exist why because this type of

00:06:39,379 --> 00:06:42,669
profiles with

00:06:40,669 --> 00:06:45,949
expertise it's really expensive

00:06:42,669 --> 00:06:49,279
sometimes it really scared so it's

00:06:45,949 --> 00:06:51,310
difficult to find so what if we could

00:06:49,279 --> 00:06:54,590
have all the knowledge that this guy has

00:06:51,310 --> 00:06:57,020
about how to run this database and we

00:06:54,590 --> 00:06:59,150
can create a software version of his

00:06:57,020 --> 00:07:02,449
knowledge that knows how to run this

00:06:59,150 --> 00:07:04,610
database over time how to configure how

00:07:02,449 --> 00:07:08,539
to upgrade it how to do everything that

00:07:04,610 --> 00:07:12,250
is required if we could do that we could

00:07:08,539 --> 00:07:15,650
just liberate its expertise everywhere

00:07:12,250 --> 00:07:17,389
so it doesn't really matter where the

00:07:15,650 --> 00:07:21,379
your company will be running whether

00:07:17,389 --> 00:07:23,710
it's cloud or some premises as long as

00:07:21,379 --> 00:07:27,439
you are running kubernetes version of it

00:07:23,710 --> 00:07:30,259
off of your of a deployment you will be

00:07:27,439 --> 00:07:34,610
able to to leverage the expertise

00:07:30,259 --> 00:07:38,300
provided as in a box in a prototype in a

00:07:34,610 --> 00:07:41,270
box way so now your company no matter

00:07:38,300 --> 00:07:44,319
how big or small it is can have a

00:07:41,270 --> 00:07:47,449
software version of this expertise

00:07:44,319 --> 00:07:49,550
running in his deployment meaning that

00:07:47,449 --> 00:07:52,759
you will be able to have production

00:07:49,550 --> 00:07:55,939
grade databases running without needing

00:07:52,759 --> 00:07:58,939
to have a production extra production

00:07:55,939 --> 00:08:01,250
grade expert on that technology so this

00:07:58,939 --> 00:08:05,169
is what is what the operators are

00:08:01,250 --> 00:08:09,710
operators are automated solver managers

00:08:05,169 --> 00:08:12,409
for kubernetes applications they manage

00:08:09,710 --> 00:08:17,089
the install and the lifecycle of your

00:08:12,409 --> 00:08:19,789
kubernetes applications ok so what is

00:08:17,089 --> 00:08:22,669
the recipe so far we have seen what our

00:08:19,789 --> 00:08:26,960
communities operators how do we create

00:08:22,669 --> 00:08:31,849
these operators coronaries provides way

00:08:26,960 --> 00:08:36,860
to extend the platform so you don't need

00:08:31,849 --> 00:08:39,440
to modify we need a source base you need

00:08:36,860 --> 00:08:42,800
to fork it in order to provide your

00:08:39,440 --> 00:08:44,600
custom behavior there is very special

00:08:42,800 --> 00:08:47,180
mechanism in kubernetes

00:08:44,600 --> 00:08:49,699
controllers customer resource

00:08:47,180 --> 00:08:52,310
definitions that allow you to extend the

00:08:49,699 --> 00:08:54,300
platform to provide your own behavior to

00:08:52,310 --> 00:08:56,670
provide to provide mechanic

00:08:54,300 --> 00:09:00,480
a way for you to define how your

00:08:56,670 --> 00:09:04,170
software will be defined so the platform

00:09:00,480 --> 00:09:06,960
will manage it the first thing that you

00:09:04,170 --> 00:09:11,400
need to add into your Canaries platform

00:09:06,960 --> 00:09:15,720
its controller this is what basically is

00:09:11,400 --> 00:09:18,210
the operator its controller running as a

00:09:15,720 --> 00:09:21,890
documents contain arraignments in the

00:09:18,210 --> 00:09:24,350
platform that will monitor a cluster for

00:09:21,890 --> 00:09:29,100
specific instances of your application

00:09:24,350 --> 00:09:31,290
so you define with the CRB custom

00:09:29,100 --> 00:09:34,110
resource definition how your application

00:09:31,290 --> 00:09:36,090
will look like this example is a made-up

00:09:34,110 --> 00:09:39,570
example of a production rayleigh

00:09:36,090 --> 00:09:42,270
database so in this case i define hey my

00:09:39,570 --> 00:09:44,640
software will be a production relevance

00:09:42,270 --> 00:09:47,670
and i want to have i wanted to have

00:09:44,640 --> 00:09:50,970
these characteristics so every time a

00:09:47,670 --> 00:09:53,490
user wants to create an instance of my

00:09:50,970 --> 00:09:56,610
application he will need to provide this

00:09:53,490 --> 00:09:58,170
disk configuration different values for

00:09:56,610 --> 00:10:02,160
the configuration but at the end of the

00:09:58,170 --> 00:10:04,650
day this is how i define my software so

00:10:02,160 --> 00:10:09,120
once the user the end user creates one

00:10:04,650 --> 00:10:13,850
instance of this of this specific custom

00:10:09,120 --> 00:10:16,020
resource what he does is via a JSON

00:10:13,850 --> 00:10:18,300
definition he deploys that into the

00:10:16,020 --> 00:10:20,820
cluster so he said hey this is my

00:10:18,300 --> 00:10:21,900
specific instance of my production

00:10:20,820 --> 00:10:25,290
relevance

00:10:21,900 --> 00:10:28,260
he puts in it into the cluster and then

00:10:25,290 --> 00:10:30,930
the controller the operator will look

00:10:28,260 --> 00:10:33,750
into what you want it to deploy and will

00:10:30,930 --> 00:10:36,990
create all these all the required

00:10:33,750 --> 00:10:40,710
resources in the cluster or that to

00:10:36,990 --> 00:10:44,970
happen where that is specific staple set

00:10:40,710 --> 00:10:47,610
or replica set config maps secrets all

00:10:44,970 --> 00:10:50,790
of that the operator will be watching

00:10:47,610 --> 00:10:53,940
for your for your definition of your

00:10:50,790 --> 00:10:57,300
instance and will be a regular sideline

00:10:53,940 --> 00:11:00,180
so what happens is if you make a change

00:10:57,300 --> 00:11:03,420
to that definition the operator will

00:11:00,180 --> 00:11:05,940
still be monitoring for your definition

00:11:03,420 --> 00:11:08,140
like I explained at the beginning with

00:11:05,940 --> 00:11:10,450
the scale example

00:11:08,140 --> 00:11:12,940
if I say hey my production radio

00:11:10,450 --> 00:11:16,750
database instead of now being version 2

00:11:12,940 --> 00:11:20,020
0 3 is going to be version 2 0 4 when I

00:11:16,750 --> 00:11:22,600
deployed up jamming to the cluster the

00:11:20,020 --> 00:11:24,250
operator will say hey this guy wants an

00:11:22,600 --> 00:11:27,430
upgraded version of this of his

00:11:24,250 --> 00:11:29,590
databases let's go and do it whatever

00:11:27,430 --> 00:11:32,770
the process is for upgrading the

00:11:29,590 --> 00:11:35,230
database it is hard-coded it is encoded

00:11:32,770 --> 00:11:38,560
into the into the operator that is the

00:11:35,230 --> 00:11:40,780
logic the operational logic that the

00:11:38,560 --> 00:11:42,760
operator provides for you and you need

00:11:40,780 --> 00:11:44,800
to be an expert on how to roll out a new

00:11:42,760 --> 00:11:46,990
version of these database you don't need

00:11:44,800 --> 00:11:48,970
to know anything the platform will take

00:11:46,990 --> 00:11:49,420
care of going from one version to

00:11:48,970 --> 00:11:51,760
another

00:11:49,420 --> 00:11:54,580
whatever the steps are required for that

00:11:51,760 --> 00:11:57,940
to happen they will be taking care for

00:11:54,580 --> 00:12:00,670
you so now you're running databases or

00:11:57,940 --> 00:12:02,440
you are running a stateful software in a

00:12:00,670 --> 00:12:05,410
criminal's platform with much more

00:12:02,440 --> 00:12:07,420
confidence knowing that even though you

00:12:05,410 --> 00:12:10,690
are not an expert on that software you

00:12:07,420 --> 00:12:15,570
can run it safely in a production ready

00:12:10,690 --> 00:12:19,240
way so there is a huge there is a set of

00:12:15,570 --> 00:12:22,330
things that are being provided by rate

00:12:19,240 --> 00:12:25,480
high and chorus which is a company where

00:12:22,330 --> 00:12:27,880
quite some time ago that helps on

00:12:25,480 --> 00:12:30,790
creating operators and I'm going to

00:12:27,880 --> 00:12:32,770
lightly describe some of them the

00:12:30,790 --> 00:12:36,730
operator framework it is just an

00:12:32,770 --> 00:12:39,810
umbrella of a set of projects that helps

00:12:36,730 --> 00:12:42,910
with the creation and the management of

00:12:39,810 --> 00:12:45,400
operators this is the github

00:12:42,910 --> 00:12:51,520
organization where you can find all of

00:12:45,400 --> 00:12:54,040
these all of these projects so one of

00:12:51,520 --> 00:12:56,590
the things that you might be wondering

00:12:54,040 --> 00:12:58,900
is a this is cool the operator side the

00:12:56,590 --> 00:13:00,880
chlorine operator on the platform and it

00:12:58,900 --> 00:13:02,520
will take care of my software of my

00:13:00,880 --> 00:13:06,220
application on my databases on my

00:13:02,520 --> 00:13:08,470
stateful applications but what is taking

00:13:06,220 --> 00:13:11,680
care of my operators at the end of the

00:13:08,470 --> 00:13:15,640
day the operator is also an application

00:13:11,680 --> 00:13:18,700
so we can have the same pattern encoding

00:13:15,640 --> 00:13:21,910
on areas where we have specific software

00:13:18,700 --> 00:13:23,860
taking care of the life cycle of our

00:13:21,910 --> 00:13:26,860
predators so when there is a new person

00:13:23,860 --> 00:13:30,430
of our power operator it will roll it

00:13:26,860 --> 00:13:33,330
out so this is called the operator

00:13:30,430 --> 00:13:36,430
lifecycle monitor and it's a special

00:13:33,330 --> 00:13:40,480
version of an operator that manages

00:13:36,430 --> 00:13:43,060
operators so with this I can one of the

00:13:40,480 --> 00:13:46,210
things that I can say is hey watch out

00:13:43,060 --> 00:13:49,000
for these operators on whatever the

00:13:46,210 --> 00:13:51,370
source for this operators are and if

00:13:49,000 --> 00:13:54,760
there is a new release of them just roll

00:13:51,370 --> 00:13:56,710
it up I can I can subscribe to specific

00:13:54,760 --> 00:13:59,440
channels distribution channels for

00:13:56,710 --> 00:14:01,330
operators and when new operator is found

00:13:59,440 --> 00:14:03,880
it will roll out the dippers of the

00:14:01,330 --> 00:14:06,460
operator this subscription I can decide

00:14:03,880 --> 00:14:08,320
whether I wanted to be manual so I will

00:14:06,460 --> 00:14:11,020
need to go and say hey I'd bring my

00:14:08,320 --> 00:14:13,210
operator now because I know I can do it

00:14:11,020 --> 00:14:14,800
with confidence there are some people

00:14:13,210 --> 00:14:18,100
that doesn't trust automation that much

00:14:14,800 --> 00:14:19,990
or I can make it automated like you do

00:14:18,100 --> 00:14:22,000
want your phones if you're looking to do

00:14:19,990 --> 00:14:24,070
your phones you usually have a

00:14:22,000 --> 00:14:26,710
marketplace where you go and you say hey

00:14:24,070 --> 00:14:29,920
this is somewhere I wanna install my my

00:14:26,710 --> 00:14:33,490
on my on my phone I can mark them to

00:14:29,920 --> 00:14:35,380
automatically appear in my phone and the

00:14:33,490 --> 00:14:37,750
phone will be always up-to-date without

00:14:35,380 --> 00:14:39,970
me needing to do anything or I might

00:14:37,750 --> 00:14:41,560
need to go into the marketplace on my

00:14:39,970 --> 00:14:43,600
phone and say hey I create this

00:14:41,560 --> 00:14:45,520
application you go there you check the

00:14:43,600 --> 00:14:47,170
list of updates that you have a little

00:14:45,520 --> 00:14:50,110
below and you decide when you do the

00:14:47,170 --> 00:14:54,300
updates this is called over-the-air

00:14:50,110 --> 00:14:56,920
updates that means that you can assign

00:14:54,300 --> 00:15:01,330
or the platform will connect with all

00:14:56,920 --> 00:15:03,790
these operators sources and will say hey

00:15:01,330 --> 00:15:05,920
these are all the operators that are

00:15:03,790 --> 00:15:09,040
available and I will be able to operate

00:15:05,920 --> 00:15:11,050
them without your intervention for this

00:15:09,040 --> 00:15:13,720
to happen of course there needs to be a

00:15:11,050 --> 00:15:16,000
market list like in your phone I said

00:15:13,720 --> 00:15:18,520
you go to your marketplace in your phone

00:15:16,000 --> 00:15:20,050
and you see your list of this sort and

00:15:18,520 --> 00:15:23,800
you have a little available to install

00:15:20,050 --> 00:15:26,410
on your phone same way on a common areas

00:15:23,800 --> 00:15:28,120
platform or in an open ship platform you

00:15:26,410 --> 00:15:30,790
need to have a market list so this is

00:15:28,120 --> 00:15:34,930
another play this operate on framework

00:15:30,790 --> 00:15:35,760
umbrella organization that helps train

00:15:34,930 --> 00:15:38,820
bar

00:15:35,760 --> 00:15:41,340
places on covering this platform this is

00:15:38,820 --> 00:15:45,270
a this is one of the versions of the one

00:15:41,340 --> 00:15:47,670
on on OpenShift and of course to be able

00:15:45,270 --> 00:15:50,580
to have operators one of the things that

00:15:47,670 --> 00:15:53,280
need to happen is that the ISPs the

00:15:50,580 --> 00:15:56,280
support creators start packaging their

00:15:53,280 --> 00:15:58,200
software as operators without that you

00:15:56,280 --> 00:16:00,420
can have a marketplace you can have a

00:15:58,200 --> 00:16:03,120
framework you can have everything but it

00:16:00,420 --> 00:16:05,160
will be empty so one thing that starts

00:16:03,120 --> 00:16:08,760
to happen is that we are seeing a lot of

00:16:05,160 --> 00:16:11,820
ISPs so-called vendors producing their

00:16:08,760 --> 00:16:14,550
software as operators why because this

00:16:11,820 --> 00:16:17,910
is a way for them to provide their

00:16:14,550 --> 00:16:19,680
software to anyone with the confidence

00:16:17,910 --> 00:16:22,770
that they will be able to run it they

00:16:19,680 --> 00:16:26,610
will be able to have it upgraded on

00:16:22,770 --> 00:16:30,120
running production with confidence some

00:16:26,610 --> 00:16:33,450
people previously will have decided not

00:16:30,120 --> 00:16:35,610
to go for specific technology based on

00:16:33,450 --> 00:16:38,460
the expertise that they have in-house so

00:16:35,610 --> 00:16:41,820
if I don't have for example expert in

00:16:38,460 --> 00:16:44,370
some readies on my company I might not

00:16:41,820 --> 00:16:46,800
allow my developers to install readies

00:16:44,370 --> 00:16:49,950
why because then once Redis is in

00:16:46,800 --> 00:16:52,530
production hey guess what it's difficult

00:16:49,950 --> 00:16:54,150
to manage and I don't know and I might

00:16:52,530 --> 00:16:57,360
have a lot of pain

00:16:54,150 --> 00:17:02,010
I might have to involve all my awesome

00:16:57,360 --> 00:17:04,320
SS are easy to be on call on duty over

00:17:02,010 --> 00:17:06,390
nine long times to be able to upgrade

00:17:04,320 --> 00:17:10,260
from one person of Redis to the next one

00:17:06,390 --> 00:17:12,750
with an operator is being currenty that

00:17:10,260 --> 00:17:14,820
the knowledge we have as the producers

00:17:12,750 --> 00:17:18,480
of the solver is put into the software

00:17:14,820 --> 00:17:20,250
so you know that they are giving you all

00:17:18,480 --> 00:17:21,000
the knowledge that you need to run that

00:17:20,250 --> 00:17:25,620
introduction

00:17:21,000 --> 00:17:28,860
all these ISPs are providing their

00:17:25,620 --> 00:17:31,430
software through an operator hub which

00:17:28,860 --> 00:17:34,680
we had started in conducting in

00:17:31,430 --> 00:17:37,770
collaboration with Amazon Google and

00:17:34,680 --> 00:17:41,490
Microsoft and this is where we are

00:17:37,770 --> 00:17:44,850
curating operators to be available for

00:17:41,490 --> 00:17:48,090
the global used so you might find

00:17:44,850 --> 00:17:49,260
operators everywhere github but those

00:17:48,090 --> 00:17:52,290
operators who know

00:17:49,260 --> 00:17:54,570
whether they work or not so in the

00:17:52,290 --> 00:17:57,390
operator half what we do is we go

00:17:54,570 --> 00:17:59,760
through a thoughtful process of queuing

00:17:57,390 --> 00:18:01,500
all these operators through guarantee

00:17:59,760 --> 00:18:03,570
that they work as they should and they

00:18:01,500 --> 00:18:08,010
comply with specific standards of

00:18:03,570 --> 00:18:10,799
quality this operator have in the case

00:18:08,010 --> 00:18:12,630
of open ship it is where is one of the

00:18:10,799 --> 00:18:14,070
sources for the market risk so that

00:18:12,630 --> 00:18:16,350
means that when you go to the market

00:18:14,070 --> 00:18:18,809
release that you previously saw it will

00:18:16,350 --> 00:18:20,640
connect to this operator huh and it will

00:18:18,809 --> 00:18:23,179
make all of the all of these operators

00:18:20,640 --> 00:18:26,100
ready for you to use on the platform

00:18:23,179 --> 00:18:28,290
another sub project of this operator

00:18:26,100 --> 00:18:31,169
framework that is really interesting is

00:18:28,290 --> 00:18:34,500
they operate on metal what is this more

00:18:31,169 --> 00:18:38,669
I need to get information on the usage

00:18:34,500 --> 00:18:41,580
of my software not really I as a

00:18:38,669 --> 00:18:44,750
development but companies enterprises

00:18:41,580 --> 00:18:48,179
will most likely sometimes need to be

00:18:44,750 --> 00:18:49,320
sure to know how much it's and every

00:18:48,179 --> 00:18:51,809
software that they allow their

00:18:49,320 --> 00:18:54,480
developers to use it's and everything is

00:18:51,809 --> 00:18:58,530
consuming they think about Trivedi's

00:18:54,480 --> 00:19:01,140
software that has licenses if anybody

00:18:58,530 --> 00:19:03,630
thunk that's going to into the

00:19:01,140 --> 00:19:04,679
marketplace and and old readiness and

00:19:03,630 --> 00:19:07,110
use it for free

00:19:04,679 --> 00:19:09,809
you know how much you want to charge the

00:19:07,110 --> 00:19:11,760
risk companies that charged each and

00:19:09,809 --> 00:19:15,000
every team for the amount of resources

00:19:11,760 --> 00:19:18,210
they use and this is another example of

00:19:15,000 --> 00:19:20,190
a resource that they will be using so

00:19:18,210 --> 00:19:22,799
they need to be able to get information

00:19:20,190 --> 00:19:25,440
on how much readies it's an every team

00:19:22,799 --> 00:19:28,650
is using so eventually they will be able

00:19:25,440 --> 00:19:32,760
or they can be able to charge them this

00:19:28,650 --> 00:19:35,880
operator entering a framework it does it

00:19:32,760 --> 00:19:37,860
does some reports that tells you how

00:19:35,880 --> 00:19:40,049
about they use it I mean she of beats

00:19:37,860 --> 00:19:42,630
and every operator that is used on the

00:19:40,049 --> 00:19:44,580
platform or I need Sun every instance of

00:19:42,630 --> 00:19:46,590
the operators that is being used on the

00:19:44,580 --> 00:19:48,290
platform so then whether they want to

00:19:46,590 --> 00:19:51,330
charge you or just give you some

00:19:48,290 --> 00:19:54,630
information what you are using sub them

00:19:51,330 --> 00:19:56,040
but this is the capability this provides

00:19:54,630 --> 00:20:00,030
the quality for you to get that

00:19:56,040 --> 00:20:02,919
information okay so far we have seen

00:20:00,030 --> 00:20:05,860
what our operators how how do we

00:20:02,919 --> 00:20:07,899
our own operator there is also in the

00:20:05,860 --> 00:20:11,679
operator framework umbrella

00:20:07,899 --> 00:20:14,200
there is also an operator SDK and SDK

00:20:11,679 --> 00:20:18,010
makes it easy for you to create

00:20:14,200 --> 00:20:21,190
operators how by providing you Kabbalah

00:20:18,010 --> 00:20:26,049
T's to initially scaffold and create

00:20:21,190 --> 00:20:28,840
some base code for your operator and we

00:20:26,049 --> 00:20:31,809
strap your new operator creates then

00:20:28,840 --> 00:20:34,210
this SDK also provides some extension

00:20:31,809 --> 00:20:36,539
points that covers the most common

00:20:34,210 --> 00:20:41,080
operator you skate like backup/restore

00:20:36,539 --> 00:20:43,779
upgrade install all these patterns that

00:20:41,080 --> 00:20:46,779
can be encoded into an operator and then

00:20:43,779 --> 00:20:49,120
it also provides high level API and

00:20:46,779 --> 00:20:51,580
abstractions for Europe relational logic

00:20:49,120 --> 00:20:54,700
just think about what an operator

00:20:51,580 --> 00:20:57,100
requires usually is to interact with the

00:20:54,700 --> 00:21:01,270
kubernetes api in a specific way way

00:20:57,100 --> 00:21:03,730
more adore how oh and how kinetise

00:21:01,270 --> 00:21:06,309
resources when they are deployed when

00:21:03,730 --> 00:21:08,710
they are graded so they can act they can

00:21:06,309 --> 00:21:11,080
do what is called a reconciliation loop

00:21:08,710 --> 00:21:18,370
so all these patterns that are difficult

00:21:11,080 --> 00:21:21,039
to to code in any language we provide

00:21:18,370 --> 00:21:23,679
high level instruction api's so it's

00:21:21,039 --> 00:21:28,059
easier to use the conatus api your

00:21:23,679 --> 00:21:30,220
longer need to do all of these tasks one

00:21:28,059 --> 00:21:33,100
by one you know no longer need to know

00:21:30,220 --> 00:21:36,250
the kinetise api in death because this

00:21:33,100 --> 00:21:37,809
high level high level API provides you

00:21:36,250 --> 00:21:40,450
an easy way for you to interact with

00:21:37,809 --> 00:21:43,240
this with this corner API so all of this

00:21:40,450 --> 00:21:45,909
it's part of what it's provided in the

00:21:43,240 --> 00:21:47,559
SDK and this is based on the expertise

00:21:45,909 --> 00:21:50,770
that we have been gathering

00:21:47,559 --> 00:21:53,080
record and chorus for the last couple of

00:21:50,770 --> 00:21:56,320
years since corals started working on

00:21:53,080 --> 00:21:59,440
operators and created a operator part ok

00:21:56,320 --> 00:22:01,659
so let's look at a step by step example

00:21:59,440 --> 00:22:04,720
on how to create one of these operators

00:22:01,659 --> 00:22:07,750
what are the steps that need we require

00:22:04,720 --> 00:22:09,549
and we are going to look into the latest

00:22:07,750 --> 00:22:12,940
release which is zero-five-zero

00:22:09,549 --> 00:22:15,410
of the SDK the SDK is evolving inside of

00:22:12,940 --> 00:22:19,880
the new practices and appearance that we

00:22:15,410 --> 00:22:23,480
that we learn over time but the SDK and

00:22:19,880 --> 00:22:26,420
is really interesting first thing that

00:22:23,480 --> 00:22:29,150
you will need to do is boostrap your

00:22:26,420 --> 00:22:31,850
project so you need to create a new

00:22:29,150 --> 00:22:35,300
operator project using the SDK common

00:22:31,850 --> 00:22:38,150
line UCLA so you say a crater is you can

00:22:35,300 --> 00:22:41,810
create a new production ready DB

00:22:38,150 --> 00:22:43,250
operator which is your training and then

00:22:41,810 --> 00:22:46,340
do the site whenever it is trade your

00:22:43,250 --> 00:22:49,970
operator whether that will be clustering

00:22:46,340 --> 00:22:51,980
school or namespaces code the difference

00:22:49,970 --> 00:22:55,010
is whether you want to make your

00:22:51,980 --> 00:22:57,740
software available for everybody that

00:22:55,010 --> 00:22:59,960
runs that is in your cluster or maybe

00:22:57,740 --> 00:23:02,900
for specific people that lives in your

00:22:59,960 --> 00:23:05,660
cluster sometimes you need to take you

00:23:02,900 --> 00:23:07,880
need to make some features available for

00:23:05,660 --> 00:23:09,500
everybody sometimes you want to make it

00:23:07,880 --> 00:23:13,610
features that's available for a specific

00:23:09,500 --> 00:23:17,750
set of people then what you do is you

00:23:13,610 --> 00:23:20,870
define your new custom resource api's so

00:23:17,750 --> 00:23:23,270
let's say that you want to create a

00:23:20,870 --> 00:23:25,520
production rate database so what the

00:23:23,270 --> 00:23:28,840
first thing you say is hey this is going

00:23:25,520 --> 00:23:31,180
to be mine yeah you defined the type of

00:23:28,840 --> 00:23:34,520
resource that you are going to be

00:23:31,180 --> 00:23:36,730
working with and the version of that

00:23:34,520 --> 00:23:40,880
resource that is going to be managed

00:23:36,730 --> 00:23:43,790
then once you have defined the API you

00:23:40,880 --> 00:23:47,020
go into the code and you define the spec

00:23:43,790 --> 00:23:50,120
and the status so the spec and status is

00:23:47,020 --> 00:23:52,160
specification of your resource and what

00:23:50,120 --> 00:23:54,290
information the cluster will give you

00:23:52,160 --> 00:23:57,770
about the resource once it's deployed

00:23:54,290 --> 00:24:00,740
you define all the properties that your

00:23:57,770 --> 00:24:02,540
resource will need to have for example

00:24:00,740 --> 00:24:05,180
for a database that might be version

00:24:02,540 --> 00:24:07,160
number of replicas or any specific

00:24:05,180 --> 00:24:12,410
behavior and whatever we look into

00:24:07,160 --> 00:24:14,120
example with more detailed spec and the

00:24:12,410 --> 00:24:15,980
status is the information that the

00:24:14,120 --> 00:24:19,520
cluster will be giving you so once you

00:24:15,980 --> 00:24:23,150
deploy one instance of this resources we

00:24:19,520 --> 00:24:24,830
plus turd the cluster will be going

00:24:23,150 --> 00:24:26,810
through this reconciliation loop we'll

00:24:24,830 --> 00:24:29,120
be monitoring your application how it's

00:24:26,810 --> 00:24:31,730
running and we'll get information

00:24:29,120 --> 00:24:34,790
into your resource so whenever you query

00:24:31,730 --> 00:24:37,220
for it like a give me information about

00:24:34,790 --> 00:24:39,020
my production rate database the instance

00:24:37,220 --> 00:24:41,270
that I running you get some information

00:24:39,020 --> 00:24:43,760
on what is the status whether it's okay

00:24:41,270 --> 00:24:46,700
the number of current replicas that are

00:24:43,760 --> 00:24:50,240
running all available what you have to

00:24:46,700 --> 00:24:52,190
find this this how your custom resource

00:24:50,240 --> 00:24:54,800
will look like what you need to do is

00:24:52,190 --> 00:24:57,559
generate all the code all the code for

00:24:54,800 --> 00:25:00,740
it so we're there with the generate

00:24:57,559 --> 00:25:02,809
Canaries what it will do the SDK will

00:25:00,740 --> 00:25:07,220
generate all the boilerplate boilerplate

00:25:02,809 --> 00:25:09,290
code for your and operator based on the

00:25:07,220 --> 00:25:12,350
definition of your CID that you have

00:25:09,290 --> 00:25:15,440
done and then what you need to do is

00:25:12,350 --> 00:25:18,500
create a specific controller that will

00:25:15,440 --> 00:25:20,690
be monitoring watching and do they could

00:25:18,500 --> 00:25:23,120
reconciliation for yourself and this is

00:25:20,690 --> 00:25:27,410
this is what all the logic will resign

00:25:23,120 --> 00:25:31,160
this is the only thing or this is where

00:25:27,410 --> 00:25:33,590
you need to put all the take care that

00:25:31,160 --> 00:25:35,900
you're playing on the logic so this

00:25:33,590 --> 00:25:38,300
means that this controller will be

00:25:35,900 --> 00:25:41,690
monitoring your production ready

00:25:38,300 --> 00:25:43,490
database or maybe also some other things

00:25:41,690 --> 00:25:46,010
like the configuration associated to

00:25:43,490 --> 00:25:48,590
your production ready database and when

00:25:46,010 --> 00:25:50,870
there is a change it will do this

00:25:48,590 --> 00:25:54,740
specific actions related to that change

00:25:50,870 --> 00:25:57,110
just think about if I changed number of

00:25:54,740 --> 00:25:59,690
replicas from two to three the logic

00:25:57,110 --> 00:26:00,440
that will say hey now there is a there

00:25:59,690 --> 00:26:04,130
is a newest

00:26:00,440 --> 00:26:06,170
there is two instances or there is three

00:26:04,130 --> 00:26:07,790
instances the pine are required there is

00:26:06,170 --> 00:26:09,740
two instances on the cluster create a

00:26:07,790 --> 00:26:12,679
new one all of that logic will be

00:26:09,740 --> 00:26:15,440
encoded here once you have done all the

00:26:12,679 --> 00:26:16,910
logic what you need to do is make that

00:26:15,440 --> 00:26:17,270
available into a classic how do you do

00:26:16,910 --> 00:26:20,630
that

00:26:17,270 --> 00:26:23,809
your first deploying the definition of

00:26:20,630 --> 00:26:26,510
your custom resource which is saying I

00:26:23,809 --> 00:26:28,880
will be managing production ready

00:26:26,510 --> 00:26:31,760
databases and they will have the suspect

00:26:28,880 --> 00:26:34,970
and these status and all these fields of

00:26:31,760 --> 00:26:38,600
this configuration then you package all

00:26:34,970 --> 00:26:41,390
the logic the controllers and the API in

00:26:38,600 --> 00:26:42,320
a container image you deploy that

00:26:41,390 --> 00:26:46,899
container

00:26:42,320 --> 00:26:50,480
into the cluster and then you apply the

00:26:46,899 --> 00:26:52,940
required resources and rules for that to

00:26:50,480 --> 00:26:59,600
be used by the cluster so those are

00:26:52,940 --> 00:27:03,259
usually roles secrets service accounts

00:26:59,600 --> 00:27:06,559
that will be required by the operator to

00:27:03,259 --> 00:27:09,950
be run and then of course the operator

00:27:06,559 --> 00:27:12,860
definition which is a my operator is

00:27:09,950 --> 00:27:15,230
encoded in this container image stored

00:27:12,860 --> 00:27:17,720
in Y or docker hub or any other

00:27:15,230 --> 00:27:20,299
container recently go and pull it and

00:27:17,720 --> 00:27:22,279
start using of course this can be easy

00:27:20,299 --> 00:27:26,240
with the with the operator lifecycle

00:27:22,279 --> 00:27:27,860
manager and because the that we will

00:27:26,240 --> 00:27:31,009
have to discover this from for example

00:27:27,860 --> 00:27:32,570
operator app and and then once you have

00:27:31,009 --> 00:27:34,309
your operator available in your cluster

00:27:32,570 --> 00:27:37,509
the only thing that you need to do is

00:27:34,309 --> 00:27:40,549
create instances of your software so you

00:27:37,509 --> 00:27:43,730
have the operator available you can now

00:27:40,549 --> 00:27:45,440
allow any of your developers or the

00:27:43,730 --> 00:27:47,960
users of your platform that means

00:27:45,440 --> 00:27:50,889
whether to create instances of those

00:27:47,960 --> 00:27:55,970
specific software that you're managing

00:27:50,889 --> 00:27:59,120
ok so far so good I guess let's get a

00:27:55,970 --> 00:28:02,379
taste of it let's see how all this works

00:27:59,120 --> 00:28:06,529
a little bit I'm going to show you first

00:28:02,379 --> 00:28:10,970
let me see how about time yeah let's see

00:28:06,529 --> 00:28:16,250
an example how this is done through a

00:28:10,970 --> 00:28:19,070
CLI and there is a little like animated

00:28:16,250 --> 00:28:21,169
gif showing to you and then I will do

00:28:19,070 --> 00:28:23,720
the same similar things through the UI

00:28:21,169 --> 00:28:27,019
which is much easier to understand to

00:28:23,720 --> 00:28:29,419
grasp so this is a the recent definition

00:28:27,019 --> 00:28:32,240
which this is an exudate for example

00:28:29,419 --> 00:28:35,090
cluster definition where I say hey I got

00:28:32,240 --> 00:28:37,850
I want to have three three instances of

00:28:35,090 --> 00:28:41,289
my application and I want it to be the

00:28:37,850 --> 00:28:44,600
version 3 3 9 in this example I had

00:28:41,289 --> 00:28:46,309
cluster already with two instances of my

00:28:44,600 --> 00:28:47,990
applet of the application and

00:28:46,309 --> 00:28:50,419
inspiration 3 3 8

00:28:47,990 --> 00:28:53,899
so what when I deploy this resource what

00:28:50,419 --> 00:28:56,180
needs to happen is that it will do a

00:28:53,899 --> 00:28:58,390
scale of my application

00:28:56,180 --> 00:29:00,740
from two to three and it will also

00:28:58,390 --> 00:29:04,280
change the version from three three

00:29:00,740 --> 00:29:05,740
eight to thirty nine so the controller

00:29:04,280 --> 00:29:10,160
what it's doing is going through

00:29:05,740 --> 00:29:12,680
observes observe analyze a cycle so it's

00:29:10,160 --> 00:29:14,750
that is the control loop and it will

00:29:12,680 --> 00:29:16,610
it's observing recurring the state of

00:29:14,750 --> 00:29:18,650
the cluster as I said there is two

00:29:16,610 --> 00:29:21,110
instances of my application with version

00:29:18,650 --> 00:29:25,520
3 3 8 it will analyze the difference so

00:29:21,110 --> 00:29:27,530
hey this guy one person 3 6 9 and this

00:29:25,520 --> 00:29:31,190
guy wanted and three instances is

00:29:27,530 --> 00:29:33,200
instead of two so in the AK loop this is

00:29:31,190 --> 00:29:35,540
the logic that will happen inside your

00:29:33,200 --> 00:29:39,140
controller what it will happen is that

00:29:35,540 --> 00:29:41,990
it will create one more instance it will

00:29:39,140 --> 00:29:44,150
because it's a database and this is

00:29:41,990 --> 00:29:46,850
encoded into the into the logic of the

00:29:44,150 --> 00:29:49,610
operator it will do a backup of the

00:29:46,850 --> 00:29:51,800
information on that on that HCD cluster

00:29:49,610 --> 00:29:54,170
and then it will upgrade it to three no

00:29:51,800 --> 00:29:58,220
why because if there is an error on

00:29:54,170 --> 00:30:00,500
their pre-process they operate from the

00:29:58,220 --> 00:30:02,720
backup will be able to restore so all

00:30:00,500 --> 00:30:05,180
that information on how to go from one

00:30:02,720 --> 00:30:07,760
release to another can be encoded into

00:30:05,180 --> 00:30:09,500
the operator so you don't know no longer

00:30:07,760 --> 00:30:12,350
to do all these kind of things that you

00:30:09,500 --> 00:30:14,690
usually do as a regular user that

00:30:12,350 --> 00:30:17,300
doesn't have a huge expertise on this

00:30:14,690 --> 00:30:18,740
software so this is the first thing that

00:30:17,300 --> 00:30:21,230
happens is you install the operator

00:30:18,740 --> 00:30:22,700
through a germinal JSON definition this

00:30:21,230 --> 00:30:25,370
is kubernetes everything goes through

00:30:22,700 --> 00:30:31,400
JSON in German which is really a pain in

00:30:25,370 --> 00:30:34,580
the ass then has deployed an instance of

00:30:31,400 --> 00:30:39,400
the CD now is putting some information

00:30:34,580 --> 00:30:42,260
into into the into a HCB now we delete

00:30:39,400 --> 00:30:44,410
its so in how if you delete one of the

00:30:42,260 --> 00:30:48,830
instances of the cluster you will just

00:30:44,410 --> 00:30:50,690
get an instance of the cluster okay so

00:30:48,830 --> 00:30:53,690
this was a simple example but then there

00:30:50,690 --> 00:30:55,970
is the resting site more complex example

00:30:53,690 --> 00:30:57,710
you can you can encode into an operator

00:30:55,970 --> 00:30:59,990
you can encode into a custom resource

00:30:57,710 --> 00:31:01,400
definition you can encode any type of

00:30:59,990 --> 00:31:03,980
application that can be your own

00:31:01,400 --> 00:31:06,340
application so just think about a on

00:31:03,980 --> 00:31:09,090
producing an application on my trading

00:31:06,340 --> 00:31:12,649
trading platform that has a

00:31:09,090 --> 00:31:16,110
some given gpv are in Europe has some

00:31:12,649 --> 00:31:19,139
affinity restrictions on loca data

00:31:16,110 --> 00:31:21,120
affinity so whenever I deploy my soul

00:31:19,139 --> 00:31:25,919
worth because I have some bases on

00:31:21,120 --> 00:31:28,980
Germany man UK in Spain France I wanted

00:31:25,919 --> 00:31:31,379
to be defined in this way so maybe do a

00:31:28,980 --> 00:31:34,649
replication one replication factor two

00:31:31,379 --> 00:31:37,289
of the scale back up every hour but then

00:31:34,649 --> 00:31:40,710
on geography I can say hey restrict my

00:31:37,289 --> 00:31:43,559
data to Europe I'm preferable to Germany

00:31:40,710 --> 00:31:45,389
based on the GPA are so this this kind

00:31:43,559 --> 00:31:46,950
of definitions of your application are

00:31:45,389 --> 00:31:48,570
specific to you every time you are

00:31:46,950 --> 00:31:51,210
creating an application you are the one

00:31:48,570 --> 00:31:54,289
that knows how the applications can be

00:31:51,210 --> 00:31:56,820
defined and what how it will be operated

00:31:54,289 --> 00:31:59,309
then you put all the logic on this

00:31:56,820 --> 00:32:02,009
controller so this this operator will

00:31:59,309 --> 00:32:04,590
really make sense to me to put all the

00:32:02,009 --> 00:32:06,570
expertise and this is what is vs solve

00:32:04,590 --> 00:32:09,779
all vendors are doing in order to

00:32:06,570 --> 00:32:12,899
provide their software to be massively

00:32:09,779 --> 00:32:16,980
adaptive okay so now I'm going to show

00:32:12,899 --> 00:32:25,049
you how this works in offensive platform

00:32:16,980 --> 00:32:31,019
it's really nice one this is an open

00:32:25,049 --> 00:32:33,240
ship or cluster which is not gif so it's

00:32:31,019 --> 00:32:37,259
gonna be releasing in the next couple of

00:32:33,240 --> 00:32:53,580
months so I log into a cluster I'm gonna

00:32:37,259 --> 00:32:55,529
log in as a as an administrator and for

00:32:53,580 --> 00:32:57,960
those of you that are familiar with open

00:32:55,529 --> 00:33:01,889
sea you probably glanced at first at the

00:32:57,960 --> 00:33:07,340
UI has changed dramatically this is this

00:33:01,889 --> 00:33:11,669
is based on the merge with with core OS

00:33:07,340 --> 00:33:14,460
so this is what you'll see now how your

00:33:11,669 --> 00:33:17,399
UI look like so we go to the catalog

00:33:14,460 --> 00:33:20,009
here we can see whether we have

00:33:17,399 --> 00:33:21,330
installed operators in this cluster in

00:33:20,009 --> 00:33:22,720
this namespace I don't have anything

00:33:21,330 --> 00:33:25,179
install any operating

00:33:22,720 --> 00:33:27,400
stole and here's your marketplace so

00:33:25,179 --> 00:33:29,530
here you can go to the marketplace it's

00:33:27,400 --> 00:33:31,480
connecting to the operator hub and it's

00:33:29,530 --> 00:33:34,450
showing you all the operators that are

00:33:31,480 --> 00:33:36,400
available and on the operator hat and

00:33:34,450 --> 00:33:38,620
that can be installed where they are

00:33:36,400 --> 00:33:40,390
community base or production base they

00:33:38,620 --> 00:33:43,539
are provided by rehad they are provided

00:33:40,390 --> 00:33:45,760
by different vendors so you just select

00:33:43,539 --> 00:33:48,400
the operator and it gives you a little

00:33:45,760 --> 00:33:51,210
description of what the operator is us

00:33:48,400 --> 00:33:53,890
installing so here in this in this

00:33:51,210 --> 00:33:57,820
example I'm going to install it yes for

00:33:53,890 --> 00:34:00,909
me in this specific namespace so enforce

00:33:57,820 --> 00:34:02,679
Asia and I'm going to say hey this there

00:34:00,909 --> 00:34:04,690
is only one challenge confuse which is

00:34:02,679 --> 00:34:06,669
the finer and then the approval strategy

00:34:04,690 --> 00:34:08,800
automatically over money one I'm going

00:34:06,669 --> 00:34:10,810
to say hey updated update the operator

00:34:08,800 --> 00:34:13,210
every time there is an inversion so I

00:34:10,810 --> 00:34:16,000
just subscribe to this operator channel

00:34:13,210 --> 00:34:19,119
and then what is happening right now is

00:34:16,000 --> 00:34:21,159
that the operator will be installed on

00:34:19,119 --> 00:34:25,169
my cluster we can go to install

00:34:21,159 --> 00:34:35,490
operators and we should see in a moment

00:34:25,169 --> 00:34:35,490
hopefully how the operators are instance

00:34:42,599 --> 00:34:46,980
sorry yeah here

00:34:47,480 --> 00:35:06,330
here so I go to the operator this is

00:34:55,320 --> 00:35:07,920
where I should see let's create a

00:35:06,330 --> 00:35:55,410
different name speech because I was

00:35:07,920 --> 00:36:00,030
playing yesterday with this one now here

00:35:55,410 --> 00:36:03,030
is good i watch the sky so the operator

00:36:00,030 --> 00:36:05,880
we we got the operator as you see the

00:36:03,030 --> 00:36:10,710
status will be changing over time so we

00:36:05,880 --> 00:36:13,110
will give you some information of what

00:36:10,710 --> 00:36:15,870
is going on behind the scenes by the by

00:36:13,110 --> 00:36:18,030
the operator lifecycle manager

00:36:15,870 --> 00:36:20,640
so right now is connected to the life to

00:36:18,030 --> 00:36:23,010
the operator huh with checking that a

00:36:20,640 --> 00:36:26,520
whatever this operator requires to be

00:36:23,010 --> 00:36:28,710
run in the cluster it is available there

00:36:26,520 --> 00:36:30,780
is some requirements they were met and

00:36:28,710 --> 00:36:33,270
now install succeeded that means that

00:36:30,780 --> 00:36:35,190
now I have my operator available in the

00:36:33,270 --> 00:36:38,580
cluster so I can go into the operator

00:36:35,190 --> 00:36:41,610
and now you can see all of the things

00:36:38,580 --> 00:36:44,910
this operator components so this was an

00:36:41,610 --> 00:36:48,560
M Q streams which is Kafka running on

00:36:44,910 --> 00:36:51,660
Canaries and with cacao you can create

00:36:48,560 --> 00:36:54,780
Kaakha Kaakha server you can create a

00:36:51,660 --> 00:36:56,730
Kafka connect cluster katakana test why

00:36:54,780 --> 00:37:00,840
image which gives you the ability to

00:36:56,730 --> 00:37:03,780
build and to be in the cluster

00:37:00,840 --> 00:37:08,040
topics and you sir big sound user so

00:37:03,780 --> 00:37:11,160
let's create a Kafka and I cut cut last

00:37:08,040 --> 00:37:14,940
so we can go here great new and you'll

00:37:11,160 --> 00:37:20,280
see here now this is the I don't know if

00:37:14,940 --> 00:37:22,770
it's speaking up this is the definition

00:37:20,280 --> 00:37:25,740
of the Kafka cluster in general

00:37:22,770 --> 00:37:28,290
representation this is not really nice

00:37:25,740 --> 00:37:31,560
working with generalization in Co

00:37:28,290 --> 00:37:33,210
analysis as I said really challenging so

00:37:31,560 --> 00:37:36,510
I've been 20 in the future this will be

00:37:33,210 --> 00:37:39,960
transformed into a nice UI graphical

00:37:36,510 --> 00:37:41,640
form where you will have drop downs and

00:37:39,960 --> 00:37:44,040
these kind of things for all the values

00:37:41,640 --> 00:37:46,980
but in the meantime this is how you

00:37:44,040 --> 00:37:49,830
define the cluster all the properties

00:37:46,980 --> 00:37:51,770
that you can define so this is for each

00:37:49,830 --> 00:37:55,320
and every application that will be

00:37:51,770 --> 00:37:56,640
available in in in the hub each and

00:37:55,320 --> 00:37:58,830
every application will have different

00:37:56,640 --> 00:38:00,360
configuration so you will Ben would you

00:37:58,830 --> 00:38:02,610
will need to look into the converted

00:38:00,360 --> 00:38:05,040
into the specific documentation for its

00:38:02,610 --> 00:38:07,860
application but basically this is what

00:38:05,040 --> 00:38:11,550
what you can define I when you create a

00:38:07,860 --> 00:38:14,340
calf a cluster so let's create it we

00:38:11,550 --> 00:38:18,960
create a cluster and now my cluster will

00:38:14,340 --> 00:38:23,100
be installing so the operator that I

00:38:18,960 --> 00:38:25,680
have right now and if if I look into the

00:38:23,100 --> 00:38:30,030
pods in this namespace I can see now

00:38:25,680 --> 00:38:31,800
that is creating cluster it is it was

00:38:30,030 --> 00:38:34,380
defined with three replicas so now it's

00:38:31,800 --> 00:38:36,480
creating the zookeeper and first

00:38:34,380 --> 00:38:38,280
initially have got require zookeeper for

00:38:36,480 --> 00:38:40,860
coordination so for cluster combination

00:38:38,280 --> 00:38:43,470
so it's installing as you can see the

00:38:40,860 --> 00:38:45,390
rain s is changing so there is ready one

00:38:43,470 --> 00:38:47,250
ready already containing already the

00:38:45,390 --> 00:38:49,800
second one is ready the third one is

00:38:47,250 --> 00:38:53,010
ready once the soup is fully installed

00:38:49,800 --> 00:38:56,010
this is installing the cluster itself so

00:38:53,010 --> 00:38:59,340
there will be also three Kaka instances

00:38:56,010 --> 00:39:01,910
right now they are creating one by one

00:38:59,340 --> 00:39:05,160
so the operator is taking care of

00:39:01,910 --> 00:39:07,740
installing katka for you you know don't

00:39:05,160 --> 00:39:10,740
don't need to know how to install Kaka

00:39:07,740 --> 00:39:12,560
there is three instances you require

00:39:10,740 --> 00:39:14,529
zookeeper you required to put

00:39:12,560 --> 00:39:16,749
certificates anywhere

00:39:14,529 --> 00:39:18,969
all of that and stone for you so right

00:39:16,749 --> 00:39:22,179
now with with this configuration there

00:39:18,969 --> 00:39:23,919
is some certificates to connect to the

00:39:22,179 --> 00:39:25,959
cracker cluster those are already

00:39:23,919 --> 00:39:28,689
available there is some users to connect

00:39:25,959 --> 00:39:30,819
to the clusters those are there you can

00:39:28,689 --> 00:39:33,069
create more users we are creating the

00:39:30,819 --> 00:39:35,439
cutter users with the operator so the

00:39:33,069 --> 00:39:37,559
operator will take care of its and

00:39:35,439 --> 00:39:41,019
everything specific to your application

00:39:37,559 --> 00:39:45,009
once we have deployed disk after cluster

00:39:41,019 --> 00:39:49,209
and once everything is it's ready okay

00:39:45,009 --> 00:39:50,559
it seems to be ready now we can see here

00:39:49,209 --> 00:39:52,809
we go to the plot

00:39:50,559 --> 00:39:55,380
well there is a huge amount of pots here

00:39:52,809 --> 00:40:01,890
but not only the pots if we look into

00:39:55,380 --> 00:40:01,890
into the SCR these we should see here

00:40:02,789 --> 00:40:09,880
all the CR DS that is Kafka created we

00:40:07,179 --> 00:40:15,299
can look into the cluster this is the

00:40:09,880 --> 00:40:21,489
cluster that we created anyway going to

00:40:15,299 --> 00:40:23,319
returns all instances the Cochran one we

00:40:21,489 --> 00:40:27,159
can see a list of recent attacks that

00:40:23,319 --> 00:40:30,069
were created so with a cluster with the

00:40:27,159 --> 00:40:33,339
cluster when I install the cluster as I

00:40:30,069 --> 00:40:36,909
said there was some zookeeper installed

00:40:33,339 --> 00:40:39,309
there was also they the catkins

00:40:36,909 --> 00:40:42,759
instances itself but there is also some

00:40:39,309 --> 00:40:45,719
more stuff so there is a certificate for

00:40:42,759 --> 00:40:48,069
the cluster communication for the intern

00:40:45,719 --> 00:40:49,929
members communication of the cluster

00:40:48,069 --> 00:40:52,509
there is some definition of the

00:40:49,929 --> 00:40:54,849
certificates that you will be using from

00:40:52,509 --> 00:40:56,559
the user and see external CLI whenever

00:40:54,849 --> 00:40:58,539
you want to connect to the cluster so

00:40:56,559 --> 00:41:00,279
all of this is managed by the operator

00:40:58,539 --> 00:41:03,099
there is a huge amount of things that

00:41:00,279 --> 00:41:04,869
were provided by the operator that in in

00:41:03,099 --> 00:41:07,719
otherwise it will be really difficult

00:41:04,869 --> 00:41:13,449
for you to to know how to deal with how

00:41:07,719 --> 00:41:16,089
to how to manage it now we can't go into

00:41:13,449 --> 00:41:19,509
the into the operator again and we can

00:41:16,089 --> 00:41:21,369
say hey let's create a topic so it's as

00:41:19,509 --> 00:41:23,400
easy as creating the topic I'm gonna use

00:41:21,369 --> 00:41:26,349
the fauces

00:41:23,400 --> 00:41:27,569
cluster that we created the cluster and

00:41:26,349 --> 00:41:32,969
I created this called

00:41:27,569 --> 00:41:35,519
stopping boss Asia and I'm gonna trade

00:41:32,969 --> 00:41:38,489
this topic so what is happening right

00:41:35,519 --> 00:41:41,130
now because this is not really deploying

00:41:38,489 --> 00:41:42,930
any new container image this is not

00:41:41,130 --> 00:41:45,839
deploying anything on the cluster this

00:41:42,930 --> 00:41:47,549
is interacting with with Kaka given the

00:41:45,839 --> 00:41:49,680
knowledge the operator has and it's

00:41:47,549 --> 00:41:52,049
telling Kaka Hayley create the topic

00:41:49,680 --> 00:41:55,079
inside Africa so it can be used

00:41:52,049 --> 00:41:56,069
externally that's very fine that topic

00:41:55,079 --> 00:41:59,249
was created

00:41:56,069 --> 00:42:01,709
so by we're doing that because I know

00:41:59,249 --> 00:42:03,449
have a Kafka install on my cluster

00:42:01,709 --> 00:42:09,599
I'm gonna just connect to one of the

00:42:03,449 --> 00:42:18,199
pots let's say one of the operator one

00:42:09,599 --> 00:42:33,839
of the CAF Capone's and ssh into it and

00:42:18,199 --> 00:42:38,029
being this is caca topics list is list

00:42:33,839 --> 00:42:38,029
it will tell me that I need a zookeeper

00:42:39,559 --> 00:42:43,670
and I'm gonna use the localhost

00:42:46,819 --> 00:42:57,319
so keep a branch on this port so with

00:42:50,729 --> 00:43:01,130
this I should be able to see come on

00:42:57,319 --> 00:43:01,130
let's - panelist

00:43:07,870 --> 00:43:14,630
so it is come on I'm connecting to the

00:43:11,300 --> 00:43:17,660
cluster and I'm looking for the topics

00:43:14,630 --> 00:43:20,120
and today the topic is there so we have

00:43:17,660 --> 00:43:23,390
seen that is easy to deploy and manage

00:43:20,120 --> 00:43:26,270
and work with and stay home so work on a

00:43:23,390 --> 00:43:28,130
cluster in a Miss away from em from a

00:43:26,270 --> 00:43:31,460
user point of view this is much more

00:43:28,130 --> 00:43:33,620
easy than what it will be dealing with

00:43:31,460 --> 00:43:35,990
all the JSON and jamming and from an

00:43:33,620 --> 00:43:39,020
operational point of view this is easier

00:43:35,990 --> 00:43:40,940
to deliver it to any company because

00:43:39,020 --> 00:43:42,920
they don't need to have any expertise

00:43:40,940 --> 00:43:44,810
they just can't rely on the expertise

00:43:42,920 --> 00:43:48,770
that you as the vendor as the author of

00:43:44,810 --> 00:43:50,780
the solar provides for them to use okay

00:43:48,770 --> 00:43:54,290
so wrapping up some helpful resources

00:43:50,780 --> 00:43:56,780
for you guys to look into there is the

00:43:54,290 --> 00:43:58,910
operator train warranty sdk on click on

00:43:56,780 --> 00:44:01,550
github it's under the operator franco

00:43:58,910 --> 00:44:04,190
organization the operator hat that i

00:44:01,550 --> 00:44:06,650
described before where you can find all

00:44:04,190 --> 00:44:10,340
these operators using operator hub iu

00:44:06,650 --> 00:44:12,560
and then some blogs and resources that

00:44:10,340 --> 00:44:14,840
talks about operators of course I'm

00:44:12,560 --> 00:44:17,900
going to advertise those honey dramas

00:44:14,840 --> 00:44:21,410
for his operators and blog up in Sitka

00:44:17,900 --> 00:44:23,930
every operator panel I'm going to tweet

00:44:21,410 --> 00:44:28,300
a link to the slides after the after the

00:44:23,930 --> 00:44:28,300
talk so if you just watch for process

00:44:28,600 --> 00:44:35,600
hashtag there will you'll find it there

00:44:31,790 --> 00:44:38,090
so and one last thing is we have an

00:44:35,600 --> 00:44:40,640
interactive learning portal for

00:44:38,090 --> 00:44:42,380
operators not only for operators but we

00:44:40,640 --> 00:44:44,480
have a section for operators if you go

00:44:42,380 --> 00:44:46,970
to learn the open she becomes last

00:44:44,480 --> 00:44:49,370
operator framework there is a huge

00:44:46,970 --> 00:44:51,980
amount of information on how to run

00:44:49,370 --> 00:44:54,740
operators how to create operators how to

00:44:51,980 --> 00:44:57,860
use operators on common areas or open

00:44:54,740 --> 00:45:00,110
shapes and with this thank you very much

00:44:57,860 --> 00:45:03,860
I don't know if we have time for yes we

00:45:00,110 --> 00:45:10,730
have some time for questions so up to

00:45:03,860 --> 00:45:12,620
you you want to yeah no no no you can

00:45:10,730 --> 00:45:14,870
run operator with previous releases of

00:45:12,620 --> 00:45:17,980
open shift the only thing is that open

00:45:14,870 --> 00:45:21,170
ship for provides all of these

00:45:17,980 --> 00:45:23,920
marketplace he already integrated a news

00:45:21,170 --> 00:45:26,750
release of the marketplace but with 311

00:45:23,920 --> 00:45:30,050
311 you can already use operators

00:45:26,750 --> 00:45:31,640
operators at the end of the day doesn't

00:45:30,050 --> 00:45:33,710
really require anything from open

00:45:31,640 --> 00:45:35,120
the only thing that open ship provides

00:45:33,710 --> 00:45:37,310
is the integration with the marketplace

00:45:35,120 --> 00:45:40,550
and the UI so you can interact with them

00:45:37,310 --> 00:45:44,570
in an easy way any release from I think

00:45:40,550 --> 00:45:48,080
is based on communities 111 or 110 that

00:45:44,570 --> 00:45:50,720
supports CRTs which is the only thing

00:45:48,080 --> 00:45:53,300
that is required by the operators can

00:45:50,720 --> 00:45:54,380
use operators so this operator framework

00:45:53,300 --> 00:45:56,540
you don't require open sea you can

00:45:54,380 --> 00:45:58,850
deploy on inequality splat one of course

00:45:56,540 --> 00:45:59,480
on Delta was the topic of my talk I use

00:45:58,850 --> 00:46:01,640
OpenCL

00:45:59,480 --> 00:46:03,620
because I work on obviously but it was

00:46:01,640 --> 00:46:05,390
easy for me to to show it in this

00:46:03,620 --> 00:46:08,210
platform you can use it on any

00:46:05,390 --> 00:46:11,180
kubernetes platform from 111 yes

00:46:08,210 --> 00:46:14,480
define your CIT you deploy your operator

00:46:11,180 --> 00:46:16,970
and it works then how to discover that

00:46:14,480 --> 00:46:18,650
in a blink one ms platform is little bit

00:46:16,970 --> 00:46:23,830
more difficult you may require us to

00:46:18,650 --> 00:46:23,830
deploy register on the jamel's yourself

00:47:13,000 --> 00:47:20,030
so first question and was and if there

00:47:17,330 --> 00:47:24,650
is a downtime whenever you upgrade your

00:47:20,030 --> 00:47:26,960
operator no but that is specific to each

00:47:24,650 --> 00:47:29,600
and every operator how that is encoding

00:47:26,960 --> 00:47:31,220
operator there shouldn't be so upgrading

00:47:29,600 --> 00:47:33,830
the operator itself

00:47:31,220 --> 00:47:35,690
it shouldn't have any effect unless

00:47:33,830 --> 00:47:37,460
there is a failure of course because at

00:47:35,690 --> 00:47:40,130
the end of the day the operator what it

00:47:37,460 --> 00:47:43,040
does is just monitor the cluster for

00:47:40,130 --> 00:47:44,990
your software that means that if I even

00:47:43,040 --> 00:47:47,660
if I under provide the operator itself

00:47:44,990 --> 00:47:49,430
not the CRT but the operator just so

00:47:47,660 --> 00:47:51,590
where your database will still be

00:47:49,430 --> 00:47:53,240
running because the operator the only

00:47:51,590 --> 00:47:55,310
thing that does is manage your

00:47:53,240 --> 00:47:57,440
application but once it's deployed it's

00:47:55,310 --> 00:47:59,210
there so I could even remove the

00:47:57,440 --> 00:48:02,359
operator I can agree to a new release of

00:47:59,210 --> 00:48:07,220
the operator and that will be there

00:48:02,359 --> 00:48:11,180
then specific upgrading of your instance

00:48:07,220 --> 00:48:14,090
like hey I got a readies two three one

00:48:11,180 --> 00:48:16,820
and I want to upgrade it to two four for

00:48:14,090 --> 00:48:19,400
example that is depending on Redis if

00:48:16,820 --> 00:48:24,770
ready supports and encoding the Interior

00:48:19,400 --> 00:48:28,070
operator logic to upgrade and do a hot

00:48:24,770 --> 00:48:32,000
deployment of the instance we see one

00:48:28,070 --> 00:48:33,530
time then fine so that is for each and

00:48:32,000 --> 00:48:36,020
every application you will need to read

00:48:33,530 --> 00:48:38,839
the documentation what are the changes

00:48:36,020 --> 00:48:41,720
for each and every application that's

00:48:38,839 --> 00:48:45,589
why usually and you will most likely

00:48:41,720 --> 00:48:48,830
have like automated install automatic

00:48:45,589 --> 00:48:50,030
upgrades for your operator itself but

00:48:48,830 --> 00:48:52,880
for the instances of your application

00:48:50,030 --> 00:48:55,700
you might not want to apply etomidate

00:48:52,880 --> 00:48:57,430
they will not apply ultimate in grades

00:48:55,700 --> 00:49:00,589
so that means that the operator itself

00:48:57,430 --> 00:49:03,109
you can safely like with your phone safe

00:49:00,589 --> 00:49:05,300
upgrade my operator to whatever it is

00:49:03,109 --> 00:49:07,250
because that's that has no effect on

00:49:05,300 --> 00:49:10,310
your application then upgrading your

00:49:07,250 --> 00:49:13,520
application from version 2 3 to version

00:49:10,310 --> 00:49:16,070
2 4 you need to go into the definition

00:49:13,520 --> 00:49:18,290
of your database and say hey I'm Grady 2

00:49:16,070 --> 00:49:21,080
to 4 now that I have an operator that

00:49:18,290 --> 00:49:23,210
knows how to manage to four releases so

00:49:21,080 --> 00:49:25,609
that is a manual step then you need to

00:49:23,210 --> 00:49:28,369
make and that is based on you knowing

00:49:25,609 --> 00:49:31,220
that you can operate with zero on time

00:49:28,369 --> 00:49:33,290
or maybe apply that upgrade on a window

00:49:31,220 --> 00:49:36,580
timeframe that you know you can do it

00:49:33,290 --> 00:49:40,010
and then for the second question is the

00:49:36,580 --> 00:49:42,230
operator itself for the monitoring of

00:49:40,010 --> 00:49:44,420
the operators all the information that

00:49:42,230 --> 00:49:46,430
is gathered is for you

00:49:44,420 --> 00:49:47,750
so that means that the operator on my

00:49:46,430 --> 00:49:49,760
training framework what it does is

00:49:47,750 --> 00:49:51,590
gathering information about how the

00:49:49,760 --> 00:49:54,350
instances of the applications are used

00:49:51,590 --> 00:49:56,840
and those reports are are traded for you

00:49:54,350 --> 00:49:58,580
in the platform so if you are using for

00:49:56,840 --> 00:50:00,680
example Open City you will get apt you

00:49:58,580 --> 00:50:02,870
will get a nice report in open seat what

00:50:00,680 --> 00:50:04,580
do you say hey for these operators how

00:50:02,870 --> 00:50:06,320
many people and it will give you all the

00:50:04,580 --> 00:50:08,240
information based on the role based

00:50:06,320 --> 00:50:11,120
access control of the platform pay these

00:50:08,240 --> 00:50:13,310
teams this users use so much of this and

00:50:11,120 --> 00:50:15,920
this and that if you are using on a

00:50:13,310 --> 00:50:17,390
plain common areas platform the

00:50:15,920 --> 00:50:20,150
information that it will be given to you

00:50:17,390 --> 00:50:21,890
will be similar but at the end of the

00:50:20,150 --> 00:50:24,860
day the information is local to your

00:50:21,890 --> 00:50:27,260
cluster it will require the operator

00:50:24,860 --> 00:50:29,540
framework will require connectivity to

00:50:27,260 --> 00:50:33,050
the external to be able to upgrade the

00:50:29,540 --> 00:50:35,630
operator itself or example so when you

00:50:33,050 --> 00:50:38,390
have like the up two updates enabled for

00:50:35,630 --> 00:50:40,820
the operator like on your phone if there

00:50:38,390 --> 00:50:42,950
is no connectivity to the outside there

00:50:40,820 --> 00:50:44,720
will be no way to connect to the outside

00:50:42,950 --> 00:50:47,000
so that means that if you want to have

00:50:44,720 --> 00:50:50,390
that you will have to have like a proxy

00:50:47,000 --> 00:50:52,580
for the operators to be able to to get

00:50:50,390 --> 00:50:53,840
changes like you have like you do for

00:50:52,580 --> 00:50:56,720
when you if you are a Java developer

00:50:53,840 --> 00:50:58,550
with maven having a nexus or an active

00:50:56,720 --> 00:51:00,650
factory where you have a proxy that

00:50:58,550 --> 00:51:02,860
makes that we will provide a similar

00:51:00,650 --> 00:51:02,860
piece

00:51:25,830 --> 00:51:31,200
so we've if your atom is for example the

00:51:28,770 --> 00:51:34,050
question is if if you are running some

00:51:31,200 --> 00:51:38,280
software that for example bits and has

00:51:34,050 --> 00:51:39,960
analogy analytics capability embedded

00:51:38,280 --> 00:51:42,390
into it and that analytics might run

00:51:39,960 --> 00:51:44,700
maybe in the cloud how to get that

00:51:42,390 --> 00:51:46,920
analytic connecting to your cluster so

00:51:44,700 --> 00:51:48,990
that is if there's some where for

00:51:46,920 --> 00:51:52,230
example if I have readies on the ready

00:51:48,990 --> 00:51:54,150
software and get some analytics and

00:51:52,230 --> 00:51:56,670
based on that analytics does some free

00:51:54,150 --> 00:52:00,030
configuration of the of my my instances

00:51:56,670 --> 00:52:02,310
or improving the performance if that

00:52:00,030 --> 00:52:05,160
analytic system has to live outside the

00:52:02,310 --> 00:52:07,680
cluster if there is no connectivity then

00:52:05,160 --> 00:52:10,290
I will not get analytics so if I require

00:52:07,680 --> 00:52:12,720
that dr. Nativity to the external system

00:52:10,290 --> 00:52:14,580
I might need to allow it for example

00:52:12,720 --> 00:52:16,370
there is an example already available in

00:52:14,580 --> 00:52:19,140
the in the cluster which is MongoDB

00:52:16,370 --> 00:52:21,750
MongoDB has some interaction with ops

00:52:19,140 --> 00:52:24,270
manager okay which is the licensing

00:52:21,750 --> 00:52:26,460
server for MongoDB so whenever it is a

00:52:24,270 --> 00:52:28,140
prime MongoDB MongoDB will need to

00:52:26,460 --> 00:52:31,020
connect to the ops manager to say hey

00:52:28,140 --> 00:52:33,720
does this license is valid and you can

00:52:31,020 --> 00:52:37,800
deploy MongoDB so the for the in that

00:52:33,720 --> 00:52:40,170
case user need to provide a proxy to be

00:52:37,800 --> 00:52:41,940
able to go to the ops manager or you

00:52:40,170 --> 00:52:47,370
will not be able to run that so where

00:52:41,940 --> 00:52:49,620
internal okay any more questions in any

00:52:47,370 --> 00:52:51,690
case we will be around because I think

00:52:49,620 --> 00:52:53,070
it's about time who will be around if

00:52:51,690 --> 00:52:55,970
you have more questions just reach out

00:52:53,070 --> 00:53:00,059
to us thank you very much

00:52:55,970 --> 00:53:00,059

YouTube URL: https://www.youtube.com/watch?v=SofBf7779VI


