Title: Right Abstraction by Yogi Rampuria
Publication date: 2019-03-29
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	17 March 2019 14:30, Training Room 2-2

VMs, Containers and functions provide with a wide choice of delivery platforms. When to use what? This is a difficult choice. What do you gain and lose in each of those choices? 

How do we address that in the cloud foundry? What is our experience with these? More importantly what is our customer's experience with these.
Captions: 
	00:00:00,030 --> 00:00:06,210
hi thank you very much special thanks to

00:00:02,669 --> 00:00:09,559
Felicia for accepting my proposal to

00:00:06,210 --> 00:00:12,929
talk here it's been a bit of a

00:00:09,559 --> 00:00:14,370
scheduling nightmare for me and special

00:00:12,929 --> 00:00:17,100
thanks to all of you all because you all

00:00:14,370 --> 00:00:19,470
actually soldier through like four days

00:00:17,100 --> 00:00:21,480
of everything there's I think crunchy

00:00:19,470 --> 00:00:24,119
database talk going on in parallel and

00:00:21,480 --> 00:00:24,869
you all chose to stay and hear me thank

00:00:24,119 --> 00:00:26,760
you so much

00:00:24,869 --> 00:00:30,420
there's also I think a blockchain

00:00:26,760 --> 00:00:35,399
topically on so again yeah very special

00:00:30,420 --> 00:00:36,899
thanks for that my name is Yogi and I

00:00:35,399 --> 00:00:39,329
don't have a clicker so I'll have to go

00:00:36,899 --> 00:00:42,239
back and forth I live in Singapore I

00:00:39,329 --> 00:00:45,030
work for a company called pivotal I'm a

00:00:42,239 --> 00:00:46,760
senior platform architect there I've

00:00:45,030 --> 00:00:49,370
been there for a little over a year and

00:00:46,760 --> 00:00:52,500
what I'm going to talk about today is

00:00:49,370 --> 00:00:56,309
driven from my experience read pivotal

00:00:52,500 --> 00:00:57,899
and my time in you know various large

00:00:56,309 --> 00:01:02,340
enterprises that have actually worked

00:00:57,899 --> 00:01:06,150
for this is purely based on on ground

00:01:02,340 --> 00:01:09,600
things that are seen and sort of boil

00:01:06,150 --> 00:01:12,600
them down to a few simple recipes that

00:01:09,600 --> 00:01:14,790
probably might be useful in your daily

00:01:12,600 --> 00:01:16,200
job or maybe you know somebody that you

00:01:14,790 --> 00:01:21,360
know me may be going through the same

00:01:16,200 --> 00:01:24,180
sort of motion right I am active member

00:01:21,360 --> 00:01:26,460
of some of the local communities so are

00:01:24,180 --> 00:01:27,750
most of your local or your lab travel

00:01:26,460 --> 00:01:31,170
how many people are from Singapore you

00:01:27,750 --> 00:01:33,079
say Oh a show of hands okay how many of

00:01:31,170 --> 00:01:34,350
y'all have seen me for the first time

00:01:33,079 --> 00:01:36,600
Wow

00:01:34,350 --> 00:01:39,960
I go to visit more communities I guess

00:01:36,600 --> 00:01:42,299
now I used to be manager for gdgs G and

00:01:39,960 --> 00:01:42,990
that two new ones are sitting right back

00:01:42,299 --> 00:01:45,930
there

00:01:42,990 --> 00:01:54,090
I was doing not much so they threw me

00:01:45,930 --> 00:01:55,590
out so abstraction I prefer this being a

00:01:54,090 --> 00:01:58,020
more interactive session I don't want

00:01:55,590 --> 00:02:02,130
you all to go up to sleep I already see

00:01:58,020 --> 00:02:04,950
you like you know relaxing there but I

00:02:02,130 --> 00:02:08,369
promise I'll keep it as lively as

00:02:04,950 --> 00:02:10,619
possible what do you mean by abstraction

00:02:08,369 --> 00:02:12,420
like we've all used abstraction as

00:02:10,619 --> 00:02:13,440
developers how many of you identify

00:02:12,420 --> 00:02:18,410
yourself as

00:02:13,440 --> 00:02:21,060
engineers developers everybody not you

00:02:18,410 --> 00:02:31,650
partially I was what's that like I

00:02:21,060 --> 00:02:33,540
really am really interested now oh so

00:02:31,650 --> 00:02:37,200
you do development for yourself on

00:02:33,540 --> 00:02:40,260
personal projects wonderful so you are a

00:02:37,200 --> 00:02:42,180
developer well she they she managed to

00:02:40,260 --> 00:02:44,970
be a developer in a bank which is really

00:02:42,180 --> 00:02:48,300
I used to go for a bank and I know how

00:02:44,970 --> 00:02:53,850
tough that is we go through some of your

00:02:48,300 --> 00:02:55,950
pains in this and mine so simply put you

00:02:53,850 --> 00:02:58,200
know extraction is all about eliminating

00:02:55,950 --> 00:03:01,800
non contextual details right to just

00:02:58,200 --> 00:03:04,140
focus on stuff that matters when you're

00:03:01,800 --> 00:03:06,660
building a house when you start with

00:03:04,140 --> 00:03:07,680
everything you just put like like a map

00:03:06,660 --> 00:03:09,660
of four walls

00:03:07,680 --> 00:03:11,250
okay here's I'm gonna have here's where

00:03:09,660 --> 00:03:12,750
I'm gonna have a door that's where a

00:03:11,250 --> 00:03:14,790
window is gonna go and you just start

00:03:12,750 --> 00:03:16,140
with those details what is the color of

00:03:14,790 --> 00:03:16,800
the window what is the color of the door

00:03:16,140 --> 00:03:18,510
what walls

00:03:16,800 --> 00:03:20,820
what wallpaper is going to be on the

00:03:18,510 --> 00:03:22,830
walls don't care you start with that

00:03:20,820 --> 00:03:25,290
basic frame of reference and then you

00:03:22,830 --> 00:03:27,540
keep adding to it as you go along

00:03:25,290 --> 00:03:30,390
yeah so the process of this abstraction

00:03:27,540 --> 00:03:33,180
has actually allowed us to move or break

00:03:30,390 --> 00:03:36,740
down large complex problems into

00:03:33,180 --> 00:03:39,450
something more manageable yeah

00:03:36,740 --> 00:03:42,209
in essence I I kind of been through a

00:03:39,450 --> 00:03:46,220
lot of definitions online in books and

00:03:42,209 --> 00:03:49,050
this sort of actually puts what I feel

00:03:46,220 --> 00:03:51,239
really out there and this was from a

00:03:49,050 --> 00:03:52,680
gentleman John bouttÃ© act I don't even

00:03:51,239 --> 00:03:55,680
know who that is but I found that

00:03:52,680 --> 00:03:59,880
definition to be most relevant to what

00:03:55,680 --> 00:04:01,980
I'm talking today so keeping the

00:03:59,880 --> 00:04:04,410
information of the given context there

00:04:01,980 --> 00:04:07,860
and removing everything else that is not

00:04:04,410 --> 00:04:13,590
that probably summarizes the abstraction

00:04:07,860 --> 00:04:16,830
for me we are talking about in two by

00:04:13,590 --> 00:04:19,320
four about extra abstractions very

00:04:16,830 --> 00:04:21,840
specifically I'm going to focus on large

00:04:19,320 --> 00:04:24,090
enterprises which have like thousand

00:04:21,840 --> 00:04:26,800
plus developers they are managing like

00:04:24,090 --> 00:04:28,810
you know north of 500 applications

00:04:26,800 --> 00:04:29,919
places I've actually seen about two

00:04:28,810 --> 00:04:33,520
thousand two thousand six hundred

00:04:29,919 --> 00:04:36,610
applications being managed by these the

00:04:33,520 --> 00:04:42,030
problem of scale really makes these the

00:04:36,610 --> 00:04:42,030
whole concept of abstraction super super

00:04:43,379 --> 00:04:48,069
one of the key challenges with and

00:04:45,610 --> 00:04:52,000
enterprises is that they have very very

00:04:48,069 --> 00:04:54,099
huge variety of workloads you know ten

00:04:52,000 --> 00:04:55,810
years ago they embarked on a on a

00:04:54,099 --> 00:04:57,849
journey to modernize their mainframe

00:04:55,810 --> 00:05:00,639
workloads they started actually

00:04:57,849 --> 00:05:04,750
implementing j2ee applications which

00:05:00,639 --> 00:05:07,180
were very portable but because of the

00:05:04,750 --> 00:05:09,280
lack of governance or people rolling

00:05:07,180 --> 00:05:12,669
through projects rolling through jobs

00:05:09,280 --> 00:05:16,349
these became large monolithic

00:05:12,669 --> 00:05:18,789
applications enterprises have also had

00:05:16,349 --> 00:05:21,509
message-oriented middleware where you

00:05:18,789 --> 00:05:24,219
can throw messages that a middleware

00:05:21,509 --> 00:05:25,479
through some magic it group goes through

00:05:24,219 --> 00:05:27,819
the whole system and ends up on the

00:05:25,479 --> 00:05:32,319
right systems sometimes those workflows

00:05:27,819 --> 00:05:34,270
we don't know more modern organizations

00:05:32,319 --> 00:05:36,669
or organization adopting a sort of

00:05:34,270 --> 00:05:38,889
digital transformation they probably are

00:05:36,669 --> 00:05:41,699
on the container or the micro services

00:05:38,889 --> 00:05:44,710
side but it's too few and too far apart

00:05:41,699 --> 00:05:46,659
even that is challenging for them again

00:05:44,710 --> 00:05:49,840
because especially with the micro

00:05:46,659 --> 00:05:51,009
services framework you end up because

00:05:49,840 --> 00:05:52,779
you are building micro services you have

00:05:51,009 --> 00:05:55,990
these small applications scattered all

00:05:52,779 --> 00:05:57,190
over the place not not two of them you

00:05:55,990 --> 00:05:58,599
pick up any two of them they're

00:05:57,190 --> 00:06:00,819
completely different from each other

00:05:58,599 --> 00:06:03,219
how they interact with the system how

00:06:00,819 --> 00:06:05,229
they threw out their logs how they how

00:06:03,219 --> 00:06:07,270
you monitor them how do you start them

00:06:05,229 --> 00:06:09,639
up all those things they are different

00:06:07,270 --> 00:06:11,500
for different applications and hence the

00:06:09,639 --> 00:06:18,340
need for abstraction is even more

00:06:11,500 --> 00:06:20,889
urgently that's the the third a second

00:06:18,340 --> 00:06:23,020
problem which is they have lots of memes

00:06:20,889 --> 00:06:26,849
scattered all over the blue we all bring

00:06:23,020 --> 00:06:31,240
our you know geographical our cultural

00:06:26,849 --> 00:06:33,550
biases into the mix as a developer our

00:06:31,240 --> 00:06:36,699
comments our message our function names

00:06:33,550 --> 00:06:39,300
our function flows they differ

00:06:36,699 --> 00:06:39,300
drastically

00:06:39,499 --> 00:06:42,860
I'm not saying it's a good or bad thing

00:06:41,089 --> 00:06:44,599
I'm just saying that it's a different

00:06:42,860 --> 00:06:49,789
thing it's different things for you to

00:06:44,599 --> 00:06:53,360
manage and the biggest of them all they

00:06:49,789 --> 00:06:56,080
have a very very large legacy does

00:06:53,360 --> 00:06:58,519
anyone recognize what's that

00:06:56,080 --> 00:07:00,860
can anyone say which model that is

00:06:58,519 --> 00:07:04,009
because I don't know I tried doing a

00:07:00,860 --> 00:07:11,419
Google search I couldn't find my it's

00:07:04,009 --> 00:07:13,550
that old so we've actually used

00:07:11,419 --> 00:07:15,439
abstraction as part of our software

00:07:13,550 --> 00:07:17,389
development methodologies right we've

00:07:15,439 --> 00:07:20,419
used object-oriented programming they're

00:07:17,389 --> 00:07:22,969
you know a group of senior developers or

00:07:20,419 --> 00:07:25,129
people who have more knowledge around

00:07:22,969 --> 00:07:27,349
the whole domain they put together some

00:07:25,129 --> 00:07:30,469
high-level imperatives some high-level

00:07:27,349 --> 00:07:32,149
definitions and as developers interns

00:07:30,469 --> 00:07:34,939
junior developers new developers

00:07:32,149 --> 00:07:38,300
freshers they actually start using them

00:07:34,939 --> 00:07:38,839
and implementing the capabilities case

00:07:38,300 --> 00:07:41,569
in point

00:07:38,839 --> 00:07:44,050
so bility VIII servlet api was

00:07:41,569 --> 00:07:46,099
introduced by sun back in the day as

00:07:44,050 --> 00:07:48,079
developers it made our life so much

00:07:46,099 --> 00:07:49,789
easier that if you wanted a server side

00:07:48,079 --> 00:07:51,649
component all you have to do was just

00:07:49,789 --> 00:07:53,769
extend from the servlet class and

00:07:51,649 --> 00:07:57,259
package your application and put it in a

00:07:53,769 --> 00:08:00,050
runtime thing and voila you have an

00:07:57,259 --> 00:08:03,740
absolutely performing server side

00:08:00,050 --> 00:08:06,039
component which was great until it

00:08:03,740 --> 00:08:06,039
wasn't

00:08:07,779 --> 00:08:12,379
functional programming this is still

00:08:10,129 --> 00:08:14,599
quite relevant people use this quite

00:08:12,379 --> 00:08:16,639
extensively it has regained a lot of

00:08:14,599 --> 00:08:19,039
focus these days with hot lane with a

00:08:16,639 --> 00:08:21,050
lot of even go with Ruby all these

00:08:19,039 --> 00:08:22,639
programming languages have really

00:08:21,050 --> 00:08:24,919
repopulate the whole aspect around

00:08:22,639 --> 00:08:28,189
functional programming languages in

00:08:24,919 --> 00:08:29,889
enterprises function functions as a

00:08:28,189 --> 00:08:33,829
functional programming was not

00:08:29,889 --> 00:08:35,930
mainstream in large enterprises only

00:08:33,829 --> 00:08:38,149
like very specific functions would

00:08:35,930 --> 00:08:40,129
probably end up using functional

00:08:38,149 --> 00:08:42,099
programming but now more and more I see

00:08:40,129 --> 00:08:46,480
more and more enterprises actually

00:08:42,099 --> 00:08:46,480
getting warmed up now the idea

00:08:47,930 --> 00:08:54,740
this would be the key focus of our talk

00:08:51,330 --> 00:08:54,740
today which I'm already halfway through

00:08:55,430 --> 00:09:00,450
the key the the abstraction that I want

00:08:58,440 --> 00:09:04,230
to actually talk about more is all

00:09:00,450 --> 00:09:06,540
around the runtimes Cheyenne before me

00:09:04,230 --> 00:09:09,090
even Sydney they spoke about poor OS and

00:09:06,540 --> 00:09:11,670
fedora which is actually great I

00:09:09,090 --> 00:09:14,570
personally use some of them really

00:09:11,670 --> 00:09:19,410
allows me to especially the workstation

00:09:14,570 --> 00:09:21,080
containerization it's a great thing so

00:09:19,410 --> 00:09:23,550
when when it comes to the actual runtime

00:09:21,080 --> 00:09:28,080
abstraction first of all you have no

00:09:23,550 --> 00:09:30,320
abstraction bare metals you have rusty

00:09:28,080 --> 00:09:33,630
servers setting somewhere in a center

00:09:30,320 --> 00:09:36,120
you have an SSH access to it at the best

00:09:33,630 --> 00:09:39,240
or maybe if you're lucky or unlucky you

00:09:36,120 --> 00:09:42,540
will have RDP access into it someone

00:09:39,240 --> 00:09:44,130
would definitely get the joke but remote

00:09:42,540 --> 00:09:46,940
I mean if you are unlucky you will have

00:09:44,130 --> 00:09:51,690
RDP access because it's running Windows

00:09:46,940 --> 00:09:53,940
you get it so you you actually remotely

00:09:51,690 --> 00:09:55,590
connected to it and you go in you put

00:09:53,940 --> 00:09:57,000
your binaries there and you run it you

00:09:55,590 --> 00:10:00,900
run it as a service you run it as a

00:09:57,000 --> 00:10:04,710
system D service or in it we choose your

00:10:00,900 --> 00:10:06,480
poison in that case o or actually I've

00:10:04,710 --> 00:10:09,600
seen a lot of these actually sitting

00:10:06,480 --> 00:10:11,400
under people's desk you know it's like

00:10:09,600 --> 00:10:14,430
you move office and you were like okay

00:10:11,400 --> 00:10:15,690
who's server is that I don't know we

00:10:14,430 --> 00:10:17,460
actually had this situation where we

00:10:15,690 --> 00:10:20,580
were moving an office and there was

00:10:17,460 --> 00:10:23,790
there were two large Dell servers which

00:10:20,580 --> 00:10:26,460
always kept me warm in a hot Singapore

00:10:23,790 --> 00:10:28,140
date and when we are trying to move like

00:10:26,460 --> 00:10:30,090
whose servers are these God knows the

00:10:28,140 --> 00:10:31,590
guy who actually probably bought them is

00:10:30,090 --> 00:10:34,260
long gone but these servers they are

00:10:31,590 --> 00:10:36,390
still running I pulled the plug never

00:10:34,260 --> 00:10:39,450
connected them again nobody has actually

00:10:36,390 --> 00:10:41,210
asked me citizen so I managed to

00:10:39,450 --> 00:10:45,010
decommission two servers in a bang-bang

00:10:41,210 --> 00:10:48,180
kudos to that I said

00:10:45,010 --> 00:10:52,029
Virtual Machines this is a little more

00:10:48,180 --> 00:10:55,269
modern I would say but again like in IT

00:10:52,029 --> 00:10:57,610
industry modern is maybe legacy in six

00:10:55,269 --> 00:10:59,649
months time right yeah virtual machine

00:10:57,610 --> 00:11:04,149
they definitely brought the the whole

00:10:59,649 --> 00:11:06,910
idea of scaling more rapidly without

00:11:04,149 --> 00:11:09,760
being constrained by the physical

00:11:06,910 --> 00:11:11,610
hardware and to be able to actually have

00:11:09,760 --> 00:11:15,699
the level of isolation that is needed

00:11:11,610 --> 00:11:18,220
yeah just in case you are wondering why

00:11:15,699 --> 00:11:19,089
I put up put that up it's again one of

00:11:18,220 --> 00:11:22,209
my windows jokes

00:11:19,089 --> 00:11:30,220
it's a bsod terminal client who knows

00:11:22,209 --> 00:11:32,079
what is BSOD really only so few times

00:11:30,220 --> 00:11:34,180
have really changed blue screen of death

00:11:32,079 --> 00:11:40,240
that's the error message on Windows

00:11:34,180 --> 00:11:43,660
systems well the colors change finally I

00:11:40,240 --> 00:11:47,320
got to put a /gs OD now okay next time

00:11:43,660 --> 00:11:49,329
and then containers are favorite pets

00:11:47,320 --> 00:11:52,630
these days right everything has to be in

00:11:49,329 --> 00:11:56,260
container they are great I use them all

00:11:52,630 --> 00:11:57,820
the time I really really like them they

00:11:56,260 --> 00:12:02,320
are really lightweight they start about

00:11:57,820 --> 00:12:05,440
early they they have no sort of overhead

00:12:02,320 --> 00:12:08,230
per se of having one an entire operating

00:12:05,440 --> 00:12:09,880
system come along or the right but they

00:12:08,230 --> 00:12:11,560
have their own set of challenges like as

00:12:09,880 --> 00:12:13,600
a developer when you are actually

00:12:11,560 --> 00:12:15,880
running applications based off of

00:12:13,600 --> 00:12:17,860
containers you have few things that you

00:12:15,880 --> 00:12:20,110
have to be aware of right there are

00:12:17,860 --> 00:12:24,130
external events which is not your own

00:12:20,110 --> 00:12:26,500
code which makes you actually publish

00:12:24,130 --> 00:12:28,420
your containers it could be one of the

00:12:26,500 --> 00:12:29,890
layers in your container hierarchy that

00:12:28,420 --> 00:12:33,730
has changed and you need to incorporate

00:12:29,890 --> 00:12:35,860
those changes right right so yes we have

00:12:33,730 --> 00:12:37,660
super real advantages but there are a

00:12:35,860 --> 00:12:42,459
few things that actually could be

00:12:37,660 --> 00:12:45,760
painful at scale I'm talking about 2700

00:12:42,459 --> 00:12:49,269
applications running in containers maybe

00:12:45,760 --> 00:12:50,980
about over 100,000 containers so it

00:12:49,269 --> 00:12:53,490
becomes a challenge when you look at it

00:12:50,980 --> 00:12:53,490
at that scale

00:12:54,120 --> 00:12:58,590
the last piece of the second-last other

00:12:56,070 --> 00:13:01,470
piece of abstraction is applications

00:12:58,590 --> 00:13:04,590
this is really really specialized it's

00:13:01,470 --> 00:13:07,350
still containers at its core it still is

00:13:04,590 --> 00:13:09,090
a container Cloud Foundry provides you

00:13:07,350 --> 00:13:11,100
with this ability to take your

00:13:09,090 --> 00:13:13,080
application and some configuration or

00:13:11,100 --> 00:13:17,550
some data which is associated with your

00:13:13,080 --> 00:13:20,940
application and just pass it to Cloud

00:13:17,550 --> 00:13:22,860
Foundry runtime line it actually creates

00:13:20,940 --> 00:13:24,750
the container for you based on the

00:13:22,860 --> 00:13:26,400
workload so if it's a Python application

00:13:24,750 --> 00:13:28,380
it'll create a container that is

00:13:26,400 --> 00:13:30,780
absolutely right for running your Python

00:13:28,380 --> 00:13:35,340
application if it is a java application

00:13:30,780 --> 00:13:39,780
same thing ruby dotnet dotnet on windows

00:13:35,340 --> 00:13:43,800
yes it will actually oh you'll be

00:13:39,780 --> 00:13:45,110
surprised who uses dotnet on Windows so

00:13:43,800 --> 00:13:49,740
although all these things right so

00:13:45,110 --> 00:13:52,560
applications actually take away the pain

00:13:49,740 --> 00:13:55,950
of managing the containers from you and

00:13:52,560 --> 00:13:59,100
it is the responsibility of the platform

00:13:55,950 --> 00:14:02,640
you can probably achieve the same degree

00:13:59,100 --> 00:14:06,060
of flexibility using your own custom

00:14:02,640 --> 00:14:08,970
pipelines whereby in your in your code

00:14:06,060 --> 00:14:10,620
you define some metadata and the

00:14:08,970 --> 00:14:13,230
pipeline will take care of generating

00:14:10,620 --> 00:14:15,240
the container for you yes you could do

00:14:13,230 --> 00:14:16,890
that but that pipeline has to be managed

00:14:15,240 --> 00:14:19,200
by you and imagine that if you have to

00:14:16,890 --> 00:14:23,760
manage that for about 2,700 application

00:14:19,200 --> 00:14:25,800
it's stuff now so application runtimes

00:14:23,760 --> 00:14:27,690
actually gives you that flexibility of

00:14:25,800 --> 00:14:30,330
just throwing your code at it and

00:14:27,690 --> 00:14:34,100
everything below the application and

00:14:30,330 --> 00:14:34,100
data layer is taken care by the platform

00:14:34,280 --> 00:14:40,860
sublet functions function as a service

00:14:37,830 --> 00:14:43,560
lambda all of that is in this space

00:14:40,860 --> 00:14:45,630
the latest entrant is keen eater which

00:14:43,560 --> 00:14:49,890
basically gives you the sole service

00:14:45,630 --> 00:14:51,150
experience on top of cuban IDs so over

00:14:49,890 --> 00:14:53,340
here you're not even talking about an

00:14:51,150 --> 00:14:55,080
application you literally sometimes it's

00:14:53,340 --> 00:14:56,760
just one single file line with one

00:14:55,080 --> 00:14:59,250
function in it you true

00:14:56,760 --> 00:15:02,360
throw it to the platform the platform

00:14:59,250 --> 00:15:04,980
actually takes care of creating

00:15:02,360 --> 00:15:07,170
containers for you and running those

00:15:04,980 --> 00:15:07,900
containers at scale and scaling down to

00:15:07,170 --> 00:15:10,330
zero

00:15:07,900 --> 00:15:16,750
when there is no workload running on

00:15:10,330 --> 00:15:18,610
them this is probably something that not

00:15:16,750 --> 00:15:21,640
many people actually put it put it down

00:15:18,610 --> 00:15:25,630
as an instruction I actually have seen

00:15:21,640 --> 00:15:29,010
amazing amount of applications that have

00:15:25,630 --> 00:15:31,390
started using these specialized runtimes

00:15:29,010 --> 00:15:32,740
make no mistakes these kind of

00:15:31,390 --> 00:15:36,040
specialized runtimes they've been there

00:15:32,740 --> 00:15:39,820
for many many years most of them are

00:15:36,040 --> 00:15:42,610
closed source proprietary you've had tip

00:15:39,820 --> 00:15:46,089
Co you had you know BPM frameworks from

00:15:42,610 --> 00:15:48,700
variety of vendors this is spring to out

00:15:46,089 --> 00:15:51,610
data flow which is completely open

00:15:48,700 --> 00:15:54,370
source based on Spring Framework the way

00:15:51,610 --> 00:15:56,529
it does things is based on pipelines you

00:15:54,370 --> 00:15:58,750
have individual components individual

00:15:56,529 --> 00:16:02,050
applications that are actually stitched

00:15:58,750 --> 00:16:05,170
together at runtime all sorts of inter

00:16:02,050 --> 00:16:08,200
process communication is taken away from

00:16:05,170 --> 00:16:10,930
you as a developer and taken up by the

00:16:08,200 --> 00:16:14,529
platform so over here if you look at a

00:16:10,930 --> 00:16:17,830
simple pipeline here you have an event

00:16:14,529 --> 00:16:19,810
coming from an HTTP going into the

00:16:17,830 --> 00:16:22,290
transformation function and getting

00:16:19,810 --> 00:16:25,000
dumped into a file line the best part is

00:16:22,290 --> 00:16:27,310
in your component which is your HTTP

00:16:25,000 --> 00:16:31,240
component you don't have to write

00:16:27,310 --> 00:16:33,160
anything whatsoever to signify that I

00:16:31,240 --> 00:16:35,980
need to send the data over to transform

00:16:33,160 --> 00:16:39,730
and on the transform side you don't have

00:16:35,980 --> 00:16:42,250
to write anything to signify that I'm

00:16:39,730 --> 00:16:43,750
gonna get events from HTTP the

00:16:42,250 --> 00:16:46,029
connectivity in the black lines between

00:16:43,750 --> 00:16:49,209
the components it's actually

00:16:46,029 --> 00:16:54,339
externalized it's a runtime dependencies

00:16:49,209 --> 00:16:56,040
so you right now outer-box the

00:16:54,339 --> 00:17:01,029
components they support Kafka and

00:16:56,040 --> 00:17:02,920
rabbitmq as the connectivity glue so all

00:17:01,029 --> 00:17:04,990
you do in your HTTP or transform

00:17:02,920 --> 00:17:08,770
component is write a single function

00:17:04,990 --> 00:17:11,679
which takes an object does the work on

00:17:08,770 --> 00:17:13,630
it and returns it where does that go

00:17:11,679 --> 00:17:15,910
where it comes from your transform

00:17:13,630 --> 00:17:18,550
controller doesn't care it's actually

00:17:15,910 --> 00:17:20,730
taken care by doing a CDF platform to do

00:17:18,550 --> 00:17:20,730
that

00:17:23,110 --> 00:17:30,169
so in a summary like I've covered most

00:17:26,779 --> 00:17:33,379
of these points but basically for

00:17:30,169 --> 00:17:35,149
physical host we have a very very it's a

00:17:33,379 --> 00:17:38,779
very very small subset of applications

00:17:35,149 --> 00:17:40,039
that now requires physical host if you

00:17:38,779 --> 00:17:41,690
have an application which is written

00:17:40,039 --> 00:17:42,860
written in Google and needs to be run on

00:17:41,690 --> 00:17:44,750
a mating mainframe

00:17:42,860 --> 00:17:48,500
yeah probably that's what it's going to

00:17:44,750 --> 00:17:50,269
be but for most of the use cases and

00:17:48,500 --> 00:17:53,090
anything that was written in let's let's

00:17:50,269 --> 00:17:54,950
say last twenty years or who regaled you

00:17:53,090 --> 00:17:58,929
can pretty much skip this and go to a

00:17:54,950 --> 00:17:58,929
virtual machine least at the very least

00:18:00,519 --> 00:18:07,940
virtual machines typically if you have

00:18:05,350 --> 00:18:09,769
vendor provided software's some sort of

00:18:07,940 --> 00:18:11,330
database servers of any sort of

00:18:09,769 --> 00:18:16,129
application that has been built

00:18:11,330 --> 00:18:17,899
you do get OVS or open vm format or OVAs

00:18:16,129 --> 00:18:20,899
or virtual appliances as they call them

00:18:17,899 --> 00:18:23,210
you get all of that right virtual

00:18:20,899 --> 00:18:25,929
machines are best abstraction for that

00:18:23,210 --> 00:18:25,929
kind of load

00:18:27,549 --> 00:18:32,299
containers which is on and up and up

00:18:30,649 --> 00:18:34,970
everybody loves containers everybody

00:18:32,299 --> 00:18:37,340
ships containers even like spring cloud

00:18:34,970 --> 00:18:39,500
dataflow you can actually run it using

00:18:37,340 --> 00:18:41,570
docker compose or even on kubernetes you

00:18:39,500 --> 00:18:44,149
can run it on top of abilities or docker

00:18:41,570 --> 00:18:46,370
compose and individual components inside

00:18:44,149 --> 00:18:51,919
that SCDF they can scale up and down

00:18:46,370 --> 00:18:53,720
based on the demand data services are

00:18:51,919 --> 00:18:55,429
great for containers so if you if you

00:18:53,720 --> 00:18:57,740
have if you want to host data services

00:18:55,429 --> 00:18:59,929
like elasticsearch you want to solar or

00:18:57,740 --> 00:19:01,730
some sort of even clÃ¡sica for that

00:18:59,929 --> 00:19:03,830
matter if you want to run you can

00:19:01,730 --> 00:19:08,210
actually containers on cuban at ease

00:19:03,830 --> 00:19:12,320
it quickly works if you want to re

00:19:08,210 --> 00:19:14,899
platform monoliths so not everybody is

00:19:12,320 --> 00:19:16,909
ready for 12 factor cloud native

00:19:14,899 --> 00:19:18,740
applications it requires a lot of

00:19:16,909 --> 00:19:20,269
investment if you have an application

00:19:18,740 --> 00:19:22,549
that has been running for like like

00:19:20,269 --> 00:19:25,279
probably a decade and a half it has so

00:19:22,549 --> 00:19:29,149
much of logic in it that decomposing it

00:19:25,279 --> 00:19:32,059
right away is impossible so first step

00:19:29,149 --> 00:19:33,920
is to move it to a containerized format

00:19:32,059 --> 00:19:35,600
so that you at least gain

00:19:33,920 --> 00:19:37,310
some level of operational benefit

00:19:35,600 --> 00:19:40,010
otherwise if you keep running it on

00:19:37,310 --> 00:19:40,580
virtual machines well it keeps going

00:19:40,010 --> 00:19:42,440
down

00:19:40,580 --> 00:19:46,340
somebody has to actually go walk up to

00:19:42,440 --> 00:19:47,300
the server put the USB in and start okay

00:19:46,340 --> 00:19:52,930
let's do it

00:19:47,300 --> 00:19:55,400
so that that's that's a use case

00:19:52,930 --> 00:19:57,860
applications are very specifically 12

00:19:55,400 --> 00:19:59,870
factor cloud native applications perhaps

00:19:57,860 --> 00:20:01,640
you should look at things like Google

00:19:59,870 --> 00:20:03,740
App Engine or even Cloud Foundry for

00:20:01,640 --> 00:20:07,190
that matter for running these kind of

00:20:03,740 --> 00:20:09,230
applications and they are best for like

00:20:07,190 --> 00:20:11,960
any sort of API that you are trying to

00:20:09,230 --> 00:20:13,580
build across your entire internal system

00:20:11,960 --> 00:20:18,400
or something like that it's really great

00:20:13,580 --> 00:20:20,570
for those kind of things service

00:20:18,400 --> 00:20:22,370
especially like if you have a very

00:20:20,570 --> 00:20:24,800
volatile workload that is coming in like

00:20:22,370 --> 00:20:27,590
it can go from say five requests per

00:20:24,800 --> 00:20:29,560
second to all the way up to 10,000

00:20:27,590 --> 00:20:31,880
requests per second within like minutes

00:20:29,560 --> 00:20:33,860
probably this is something that you

00:20:31,880 --> 00:20:35,900
should actually be looking at more of

00:20:33,860 --> 00:20:37,850
course it will require a significant

00:20:35,900 --> 00:20:41,410
tree architecture in your systems but

00:20:37,850 --> 00:20:46,460
that is probably the best run time time

00:20:41,410 --> 00:20:49,270
and if you want like a just run it kind

00:20:46,460 --> 00:20:52,490
of goodness right with some level of

00:20:49,270 --> 00:20:54,710
integration involved specialized

00:20:52,490 --> 00:20:58,400
runtimes like seda is actually a great

00:20:54,710 --> 00:21:01,280
place just to put everything in the

00:20:58,400 --> 00:21:03,520
picture this is perhaps the money shot

00:21:01,280 --> 00:21:06,490
so if you want to take a photo please do

00:21:03,520 --> 00:21:11,410
I'll definitely send out the day but

00:21:06,490 --> 00:21:15,050
yeah the key is you want to move as

00:21:11,410 --> 00:21:17,090
Center to this as possible without

00:21:15,050 --> 00:21:18,350
compromising on like the feature or

00:21:17,090 --> 00:21:20,960
compatibility or ability of an

00:21:18,350 --> 00:21:25,220
application you want to choose to move

00:21:20,960 --> 00:21:28,730
as inside as deep inside these circles

00:21:25,220 --> 00:21:31,280
as possible and the moment the more you

00:21:28,730 --> 00:21:33,800
move inside the less flexible the

00:21:31,280 --> 00:21:36,440
runtime is more standardization czar in

00:21:33,800 --> 00:21:38,330
place as you move out your solutions

00:21:36,440 --> 00:21:40,400
will keep getting a less less and less

00:21:38,330 --> 00:21:42,230
standardized so your complexity your

00:21:40,400 --> 00:21:44,620
snowflakes and your environment will be

00:21:42,230 --> 00:21:44,620
very large

00:21:45,520 --> 00:22:05,200
that's it so if you have any questions

00:21:48,740 --> 00:22:08,030
I'm sure you do that banner all right

00:22:05,200 --> 00:22:10,790
the deck would be there I'm reachable on

00:22:08,030 --> 00:22:12,380
Twitter with a Q Kendra thank you very

00:22:10,790 --> 00:22:13,550
much for staying back and listening

00:22:12,380 --> 00:22:16,750
thank you

00:22:13,550 --> 00:22:16,750

YouTube URL: https://www.youtube.com/watch?v=jGVm_-SYc5I


