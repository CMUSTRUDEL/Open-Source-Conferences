Title: Serverless with Knative by Mete Atamel
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	15 March 2019 15:40, Lecture Theatre

When you build a serverless app, you either tie yourself to a cloud provider, or you end up building your own serverless stack. Knative provides a better choice. Knative extends Kubernetes to provide a set of middleware components (build, serving, events) for modern, source-centric, and container-based apps that can run anywhere. In this talk, weâ€™ll see how we can use Knative primitives to build a serverless app that utilizes the Machine Learning magic of the cloud.
Captions: 
	00:00:23,520 --> 00:00:27,689
[Applause]

00:00:25,099 --> 00:00:33,750
it's always great to be in Singapore

00:00:27,689 --> 00:00:36,540
because I normally do this talk for one

00:00:33,750 --> 00:00:39,059
hour but I own 20 minutes now so

00:00:36,540 --> 00:00:40,890
basically I have 20 minutes which means

00:00:39,059 --> 00:00:43,050
that I have to speak really fast and

00:00:40,890 --> 00:00:45,420
have to skip some slides and some code

00:00:43,050 --> 00:00:47,460
but the good news is that if you go to

00:00:45,420 --> 00:00:50,190
my github page I have a cane a tutorial

00:00:47,460 --> 00:00:52,469
that has the these slides and it also

00:00:50,190 --> 00:00:54,390
has a lot of the demos while much more

00:00:52,469 --> 00:00:56,460
than what I'm gonna show today so if you

00:00:54,390 --> 00:00:58,410
find a native interesting you can just

00:00:56,460 --> 00:01:00,629
go there and and you'll find much more

00:00:58,410 --> 00:01:02,399
than what I'm going to show today I also

00:01:00,629 --> 00:01:05,040
this is my Twitter I usually tweet about

00:01:02,399 --> 00:01:07,470
sto K native Cuban this kind of stuff so

00:01:05,040 --> 00:01:08,119
if you're interested just feel free to

00:01:07,470 --> 00:01:12,570
follow me

00:01:08,119 --> 00:01:14,580
and also I'm doing a tour in Asia and as

00:01:12,570 --> 00:01:16,830
I go through it I ask people what they

00:01:14,580 --> 00:01:18,060
know what K Native what they are using

00:01:16,830 --> 00:01:19,830
for serverless whether they are running

00:01:18,060 --> 00:01:22,380
I'm keepin it is it's a five question

00:01:19,830 --> 00:01:24,479
survey so if you have time please fill

00:01:22,380 --> 00:01:27,270
it I also have bunch of t-shirts and

00:01:24,479 --> 00:01:29,780
things that I put here so after the talk

00:01:27,270 --> 00:01:32,640
feel free to come and grab some okay

00:01:29,780 --> 00:01:36,060
alright so let's do a quick intro to K

00:01:32,640 --> 00:01:39,000
native what is K native okay native it's

00:01:36,060 --> 00:01:41,400
a cubensis based open source building

00:01:39,000 --> 00:01:42,990
blocks for serverless right and this

00:01:41,400 --> 00:01:44,909
might sound a little bit weird because

00:01:42,990 --> 00:01:47,340
when you think about kubernetes you're

00:01:44,909 --> 00:01:50,159
thinking about containers so there's

00:01:47,340 --> 00:01:52,140
nothing service about it and then this K

00:01:50,159 --> 00:01:53,729
native thing is it's claiming to be

00:01:52,140 --> 00:01:56,090
serviced on kubernetes so how does that

00:01:53,729 --> 00:01:59,969
work so hopefully we'll be able to

00:01:56,090 --> 00:02:02,960
explore that today in 20 minutes so when

00:01:59,969 --> 00:02:06,270
you think an ideal serverless framework

00:02:02,960 --> 00:02:08,399
first there should be no servers I mean

00:02:06,270 --> 00:02:09,599
obviously there's always servers but you

00:02:08,399 --> 00:02:11,470
shouldn't care about them as an

00:02:09,599 --> 00:02:13,030
application developer

00:02:11,470 --> 00:02:15,040
you should be able to write your code in

00:02:13,030 --> 00:02:17,320
an idiomatic way so for example I'm a

00:02:15,040 --> 00:02:19,390
c-sharp developer so I should be able to

00:02:17,320 --> 00:02:21,340
write my code in asp.net core I

00:02:19,390 --> 00:02:23,170
shouldn't have to change my code I

00:02:21,340 --> 00:02:24,430
should be able to do or if you're a Java

00:02:23,170 --> 00:02:26,260
person you should be able to use the

00:02:24,430 --> 00:02:28,630
tools and the language frameworks that

00:02:26,260 --> 00:02:31,510
you're used to when you think about

00:02:28,630 --> 00:02:33,700
Cerberus we usually think about so

00:02:31,510 --> 00:02:36,400
functions that are driven by some kind

00:02:33,700 --> 00:02:38,650
of events these events can be HTTP base

00:02:36,400 --> 00:02:41,770
but they can also be like message base

00:02:38,650 --> 00:02:43,540
but they usually event-driven and last

00:02:41,770 --> 00:02:46,330
but not least is that you want your

00:02:43,540 --> 00:02:48,370
framework to probably be portable right

00:02:46,330 --> 00:02:50,380
so if you write your function and deploy

00:02:48,370 --> 00:02:52,510
it to one place you probably don't want

00:02:50,380 --> 00:02:53,740
to rewrite the whole thing just because

00:02:52,510 --> 00:02:57,250
you want to deploy it to some other

00:02:53,740 --> 00:02:59,950
place so when you look at the

00:02:57,250 --> 00:03:02,800
containerized world kubernetes kind of

00:02:59,950 --> 00:03:05,080
became the de facto standard for running

00:03:02,800 --> 00:03:06,520
containers in the cloud I won't get into

00:03:05,080 --> 00:03:08,140
details because we don't have time but

00:03:06,520 --> 00:03:09,730
basically when you run containers you

00:03:08,140 --> 00:03:14,530
probably run cube entities as well

00:03:09,730 --> 00:03:16,120
either directly or indirectly so when we

00:03:14,530 --> 00:03:18,370
think about serverless like developers

00:03:16,120 --> 00:03:20,500
love service because you know you are

00:03:18,370 --> 00:03:22,540
trying to solve a problem and serverless

00:03:20,500 --> 00:03:23,739
enables you to write the code and not

00:03:22,540 --> 00:03:25,360
really care about the underlying

00:03:23,739 --> 00:03:28,270
infrastructure is someone else's problem

00:03:25,360 --> 00:03:31,090
right and operator is the Electra burn

00:03:28,270 --> 00:03:33,100
it is because it gives them this common

00:03:31,090 --> 00:03:36,130
language and common framework to

00:03:33,100 --> 00:03:38,290
schedule and run containers right but

00:03:36,130 --> 00:03:40,180
developers they don't really care about

00:03:38,290 --> 00:03:42,310
those details so there's this tension

00:03:40,180 --> 00:03:44,709
between developers and service and

00:03:42,310 --> 00:03:46,570
operators and kubernetes so that's why

00:03:44,709 --> 00:03:49,600
Kay native exists it's an open source

00:03:46,570 --> 00:03:51,519
project that started with Google but now

00:03:49,600 --> 00:03:52,450
bunch of other companies like Red Hat

00:03:51,519 --> 00:03:54,400
and IBM

00:03:52,450 --> 00:03:55,570
they're supporting as well and it's an

00:03:54,400 --> 00:03:58,180
open source project so anyone can

00:03:55,570 --> 00:04:00,550
contribute it basically provides a set

00:03:58,180 --> 00:04:02,590
of components and these companies are

00:04:00,550 --> 00:04:04,660
serving inventing and built that we'll

00:04:02,590 --> 00:04:06,489
take a look you can think of this as the

00:04:04,660 --> 00:04:07,989
ingredients for server listed things

00:04:06,489 --> 00:04:10,660
that you need to build a service

00:04:07,989 --> 00:04:11,709
framework Kania tries to do that for you

00:04:10,660 --> 00:04:15,519
so you don't have to build them from

00:04:11,709 --> 00:04:17,470
scratch any the concepts in a native

00:04:15,519 --> 00:04:19,570
they came from our internal learning so

00:04:17,470 --> 00:04:20,410
the I'm gonna show you some of the

00:04:19,570 --> 00:04:22,479
things in eventing

00:04:20,410 --> 00:04:23,150
so all those concepts of configuration

00:04:22,479 --> 00:04:25,280
and

00:04:23,150 --> 00:04:27,889
visions and routing they all came from

00:04:25,280 --> 00:04:30,110
how we work at Google so we kind of

00:04:27,889 --> 00:04:32,590
learn from them then and we kind of open

00:04:30,110 --> 00:04:34,699
source it for for everyone else to use

00:04:32,590 --> 00:04:37,479
now the candidates that kind of looks

00:04:34,699 --> 00:04:41,690
like this so the platform is Cuban it is

00:04:37,479 --> 00:04:44,000
then on top of that there's Sto so SEO

00:04:41,690 --> 00:04:45,380
is also a dependency okay native is

00:04:44,000 --> 00:04:48,740
still for those of you who might not

00:04:45,380 --> 00:04:50,780
know it's it's another open source

00:04:48,740 --> 00:04:54,229
project from Google and other partners

00:04:50,780 --> 00:04:56,570
as well that you can think of as a way

00:04:54,229 --> 00:04:59,030
to manage your container traffic so so

00:04:56,570 --> 00:05:00,949
Cuban it is runs your containers and

00:04:59,030 --> 00:05:02,870
it's your kind of manages the traffic or

00:05:00,949 --> 00:05:04,340
your containers and on top of that we

00:05:02,870 --> 00:05:07,010
are creative with builds serving and

00:05:04,340 --> 00:05:09,080
inventing and on top of that we have the

00:05:07,010 --> 00:05:10,850
products that kind of use cognitive so

00:05:09,080 --> 00:05:12,979
for example there's something called

00:05:10,850 --> 00:05:15,949
cloud functions in Google cloud which is

00:05:12,979 --> 00:05:18,050
service offering from Google and include

00:05:15,949 --> 00:05:20,330
functions we announce that you will be

00:05:18,050 --> 00:05:22,580
able to run run containers with cloud

00:05:20,330 --> 00:05:24,620
functions so that container support on

00:05:22,580 --> 00:05:27,949
cloud functions is built on K native and

00:05:24,620 --> 00:05:30,560
then our partners they have like ASAP

00:05:27,949 --> 00:05:32,930
and pivotal they all gonna have their

00:05:30,560 --> 00:05:34,520
function service that are kind of built

00:05:32,930 --> 00:05:35,930
on K native so that's kind of like we

00:05:34,520 --> 00:05:38,389
hope with K native is that it's gonna be

00:05:35,930 --> 00:05:40,130
the base layer for most people where

00:05:38,389 --> 00:05:42,110
they will build more things on top of

00:05:40,130 --> 00:05:45,289
that that and the whole thing runs on

00:05:42,110 --> 00:05:46,490
communities so how do you use K native

00:05:45,289 --> 00:05:49,400
well first you need the kubernetes

00:05:46,490 --> 00:05:51,139
cluster this cluster doesn't have to be

00:05:49,400 --> 00:05:53,720
live in Google Club by the way it can be

00:05:51,139 --> 00:05:55,340
on any regular qns cluster but in this

00:05:53,720 --> 00:05:57,380
case I'm creating in Google cloud using

00:05:55,340 --> 00:05:59,570
g-cloud command line so once I have my

00:05:57,380 --> 00:06:02,150
cluster I cry deck I create a cluster

00:05:59,570 --> 00:06:04,550
role binding this is needed for is tio

00:06:02,150 --> 00:06:08,120
to manage my cluster so I do that and

00:06:04,550 --> 00:06:10,070
then I install this tier in Google cloud

00:06:08,120 --> 00:06:11,870
you can get a command s cluster with

00:06:10,070 --> 00:06:13,610
East your with a single command so if

00:06:11,870 --> 00:06:14,810
you want to do that you can do that but

00:06:13,610 --> 00:06:16,820
if you already have your cube it is

00:06:14,810 --> 00:06:19,669
faster running you can also install this

00:06:16,820 --> 00:06:23,750
your manual yourself and then once we

00:06:19,669 --> 00:06:25,070
have that you you install que native the

00:06:23,750 --> 00:06:26,360
serving built-in eventing there are

00:06:25,070 --> 00:06:28,010
separate things so you don't have to use

00:06:26,360 --> 00:06:30,050
them all at once you can install them

00:06:28,010 --> 00:06:31,490
one by one but if you want all of it

00:06:30,050 --> 00:06:33,620
then you can also install them all at

00:06:31,490 --> 00:06:35,779
once as well and this is gonna get much

00:06:33,620 --> 00:06:36,980
easier and Google cloud at some point

00:06:35,779 --> 00:06:39,890
you will be able to say

00:06:36,980 --> 00:06:41,240
Malthus cluster with East York a native

00:06:39,890 --> 00:06:43,700
and everything installed and it would

00:06:41,240 --> 00:06:45,980
just give you that but as of today K

00:06:43,700 --> 00:06:47,240
native is really new so you have to go

00:06:45,980 --> 00:06:50,660
through these steps to install it but

00:06:47,240 --> 00:06:52,190
it's very very quite simple so let's

00:06:50,660 --> 00:06:54,140
talk about the first part Oakland native

00:06:52,190 --> 00:06:55,930
clean native serving but before I do

00:06:54,140 --> 00:07:00,320
that let me just show you something so

00:06:55,930 --> 00:07:02,690
here I have first of all I already have

00:07:00,320 --> 00:07:04,340
a cluster that I set up before the talk

00:07:02,690 --> 00:07:07,820
so if you look at Google cloud platform

00:07:04,340 --> 00:07:09,340
and on kubernetes engine there's a clean

00:07:07,820 --> 00:07:11,960
NATO cluster that I already set up and

00:07:09,340 --> 00:07:13,670
let's just make sure that my key native

00:07:11,960 --> 00:07:16,090
things are working so if I do keep CTL

00:07:13,670 --> 00:07:19,010
get pods and I look at the key native

00:07:16,090 --> 00:07:20,480
serving namespace so everything gets

00:07:19,010 --> 00:07:22,250
installed under the different namespaces

00:07:20,480 --> 00:07:24,010
so I'm just making sure that the key

00:07:22,250 --> 00:07:26,090
native serving pods are working

00:07:24,010 --> 00:07:27,680
hopefully they work otherwise the rest

00:07:26,090 --> 00:07:31,870
of the talk will be kind of just slides

00:07:27,680 --> 00:07:36,560
and no code oh sorry I shouldn't laugh

00:07:31,870 --> 00:07:39,020
all right is Wi-Fi working yes all right

00:07:36,560 --> 00:07:41,870
so those are working and while we're

00:07:39,020 --> 00:07:43,880
here let's look at eventing that should

00:07:41,870 --> 00:07:46,520
be quicker yes those are running as well

00:07:43,880 --> 00:07:48,560
and the last one is built so these are

00:07:46,520 --> 00:07:49,880
different components ok native that's

00:07:48,560 --> 00:07:52,280
working as well and let me just move

00:07:49,880 --> 00:07:53,480
this a little bit down yep ok so

00:07:52,280 --> 00:07:55,040
everything seems to be working so let's

00:07:53,480 --> 00:07:58,670
just quickly talk about what serving is

00:07:55,040 --> 00:08:02,210
so serving basically enables you to

00:07:58,670 --> 00:08:04,940
deploy a container in a serverless way

00:08:02,210 --> 00:08:07,520
so what you do is you basically define a

00:08:04,940 --> 00:08:10,550
Yama file and you say this is my service

00:08:07,520 --> 00:08:12,860
this is my container image and this is

00:08:10,550 --> 00:08:14,650
the configuration on my container and

00:08:12,860 --> 00:08:17,570
you just tell cognitive can you please

00:08:14,650 --> 00:08:21,050
deploy this and it will deploy it and

00:08:17,570 --> 00:08:23,420
then by default it will be running on a

00:08:21,050 --> 00:08:25,340
single part but you get auto scaling for

00:08:23,420 --> 00:08:27,200
free so if more people start calling

00:08:25,340 --> 00:08:31,130
your service it will be scaled up to

00:08:27,200 --> 00:08:33,050
like maximum number of pods if no one is

00:08:31,130 --> 00:08:35,870
using it it will scale down to 0 so it

00:08:33,050 --> 00:08:40,010
scales down to 0-2 matically and all the

00:08:35,870 --> 00:08:41,840
details of getting people clients

00:08:40,010 --> 00:08:43,070
connected to your service is done

00:08:41,840 --> 00:08:45,680
automatically so once you deploy your

00:08:43,070 --> 00:08:48,710
service all those routing rules are done

00:08:45,680 --> 00:08:50,310
automatically and the integration with

00:08:48,710 --> 00:08:52,500
the underlying networking is also

00:08:50,310 --> 00:08:54,060
for you right so you just specify your

00:08:52,500 --> 00:08:55,860
service your container and then all the

00:08:54,060 --> 00:09:00,020
details oh how to run that service is

00:08:55,860 --> 00:09:02,640
done by a community serving there's some

00:09:00,020 --> 00:09:04,560
vocabulary that counts like a native so

00:09:02,640 --> 00:09:06,270
first you define the service by the way

00:09:04,560 --> 00:09:07,800
this service is not a Cuban native

00:09:06,270 --> 00:09:10,380
service it's a Canadian service as a

00:09:07,800 --> 00:09:11,970
separate construct and this service has

00:09:10,380 --> 00:09:15,510
a configuration that I'm going to show

00:09:11,970 --> 00:09:17,490
you and once you deploy the service with

00:09:15,510 --> 00:09:19,770
the configuration can either press

00:09:17,490 --> 00:09:22,410
what's called a revision so a revision

00:09:19,770 --> 00:09:24,140
is kind of like a snapshot of your

00:09:22,410 --> 00:09:27,900
service with that current configuration

00:09:24,140 --> 00:09:31,050
okay and then it will update the route

00:09:27,900 --> 00:09:33,029
the current route to that revision so

00:09:31,050 --> 00:09:35,520
meaning your service will be deployed

00:09:33,029 --> 00:09:37,770
and people getting to your service will

00:09:35,520 --> 00:09:39,750
basically immediately be routed to that

00:09:37,770 --> 00:09:42,060
revision now if you change anything

00:09:39,750 --> 00:09:43,770
about the configuration K NATO will

00:09:42,060 --> 00:09:46,140
create a new revision and it will update

00:09:43,770 --> 00:09:48,120
the route automatically right so it has

00:09:46,140 --> 00:09:50,220
this notion of revisions and you can

00:09:48,120 --> 00:09:52,110
update the route immediately to the

00:09:50,220 --> 00:09:54,600
latest revision or you can also split

00:09:52,110 --> 00:09:57,500
traffic and I'm going to show show that

00:09:54,600 --> 00:10:00,630
as well so that's what kkh a serving is

00:09:57,500 --> 00:10:04,820
in my tutorial I have many examples but

00:10:00,630 --> 00:10:04,820
I just look at a couple of them first

00:10:06,050 --> 00:10:10,980
let's look at service p1 llamo so this

00:10:09,150 --> 00:10:12,930
is my service definition for community

00:10:10,980 --> 00:10:15,540
service as you can see this is called a

00:10:12,930 --> 00:10:17,430
service but it's from K native API smoke

00:10:15,540 --> 00:10:20,520
kubernetes service and then I give it a

00:10:17,430 --> 00:10:22,650
name and then under here I'm saying run

00:10:20,520 --> 00:10:25,230
latest meaning when you deploy this

00:10:22,650 --> 00:10:27,120
service just immediately route traffic

00:10:25,230 --> 00:10:29,190
to it that's what it means always run

00:10:27,120 --> 00:10:30,900
the latest configuration and this is the

00:10:29,190 --> 00:10:32,730
configuration on my service where I

00:10:30,900 --> 00:10:34,680
specified the container and this

00:10:32,730 --> 00:10:36,540
container is pointing to a container

00:10:34,680 --> 00:10:38,760
that I already deployed on the on docker

00:10:36,540 --> 00:10:41,490
hub so it's HelloWorld c-sharp version 1

00:10:38,760 --> 00:10:43,440
and this is the environment variables

00:10:41,490 --> 00:10:45,570
that my application is using so I have

00:10:43,440 --> 00:10:48,150
an apparel called target that has a

00:10:45,570 --> 00:10:49,740
value called see chef sample v1 and it

00:10:48,150 --> 00:10:54,270
will use this to print that message

00:10:49,740 --> 00:10:56,940
right so if I want to deploy this what I

00:10:54,270 --> 00:10:58,380
can do is I can come here and say well

00:10:56,940 --> 00:11:00,990
before we do that let's just watch some

00:10:58,380 --> 00:11:03,760
things so I'm here I'm doing coop CTL

00:11:00,990 --> 00:11:05,560
get pot cake you get teenagers

00:11:03,760 --> 00:11:07,600
servus get configuration and get route

00:11:05,560 --> 00:11:08,830
right now I have have one pot running

00:11:07,600 --> 00:11:10,600
that's for something else let's not

00:11:08,830 --> 00:11:13,120
worry about it right now but if I do

00:11:10,600 --> 00:11:15,820
this cripsy to apply and say service v1

00:11:13,120 --> 00:11:17,320
now this will deploy the service okay

00:11:15,820 --> 00:11:19,030
native and then now this says the que

00:11:17,320 --> 00:11:22,930
native services deployed and if you look

00:11:19,030 --> 00:11:25,450
at it this created this crater that part

00:11:22,930 --> 00:11:26,530
is creating a part for my service it's

00:11:25,450 --> 00:11:28,750
created a service

00:11:26,530 --> 00:11:30,220
it created a configuration and you can't

00:11:28,750 --> 00:11:36,930
see it here but it also created a

00:11:30,220 --> 00:11:36,930
revision I think let's just watch again

00:11:39,589 --> 00:11:44,070
right so it also created a route and

00:11:42,690 --> 00:11:48,690
revision and configuration so everything

00:11:44,070 --> 00:11:56,190
is graded and if I do a curl let me find

00:11:48,690 --> 00:11:59,699
my curl command yes so if I do a curl so

00:11:56,190 --> 00:12:01,620
this this curl command hello world C

00:11:59,699 --> 00:12:03,870
sharp is the name of my service default

00:12:01,620 --> 00:12:07,380
is the name of my name space K native

00:12:03,870 --> 00:12:09,870
ingresses the IP of my K native ingress

00:12:07,380 --> 00:12:11,910
and I set it up with nip IO so I didn't

00:12:09,870 --> 00:12:13,560
set up a domain so I'm using this fake

00:12:11,910 --> 00:12:15,750
domain service called nip I also I'm

00:12:13,560 --> 00:12:17,550
basically pointing to to my service and

00:12:15,750 --> 00:12:20,430
then we get a response already that says

00:12:17,550 --> 00:12:22,110
hello hello C sharp v1 right so

00:12:20,430 --> 00:12:25,470
everything is working now if I want to

00:12:22,110 --> 00:12:27,300
update my service for example in here

00:12:25,470 --> 00:12:29,430
the only difference between service v1 a

00:12:27,300 --> 00:12:31,170
service v2 is that we are still using

00:12:29,430 --> 00:12:33,209
the same image but we change the message

00:12:31,170 --> 00:12:47,819
to v2 right so we change the

00:12:33,209 --> 00:12:52,230
configuration if I deploy this now this

00:12:47,819 --> 00:12:55,850
will create a new configuration and a

00:12:52,230 --> 00:13:00,449
new revision and a new part already and

00:12:55,850 --> 00:13:03,209
if we do curl to the same ingress you

00:13:00,449 --> 00:13:08,610
see that it's already v2 right so things

00:13:03,209 --> 00:13:11,040
are quite fast if I go to v3 in v3 I

00:13:08,610 --> 00:13:12,329
actually replace the image so if you

00:13:11,040 --> 00:13:14,639
change the image that's also a

00:13:12,329 --> 00:13:17,010
configuration change and I change the

00:13:14,639 --> 00:13:20,940
value again instead of V - I'm saying v3

00:13:17,010 --> 00:13:24,079
so now I'm pointing to different code so

00:13:20,940 --> 00:13:24,079
if we deploy this one

00:13:28,030 --> 00:13:35,020
now it's configured and you will see

00:13:31,030 --> 00:13:36,460
that a new configuration anew pod and a

00:13:35,020 --> 00:13:39,370
new route and everything will be created

00:13:36,460 --> 00:13:41,260
and if we curl again you see that now it

00:13:39,370 --> 00:13:42,730
will say by C sharp sample because we

00:13:41,260 --> 00:13:45,670
are changed our containers is running

00:13:42,730 --> 00:13:48,840
different code and lastly now we had

00:13:45,670 --> 00:13:52,090
three three revisions one two and three

00:13:48,840 --> 00:13:53,740
if you want to deploy a new revision but

00:13:52,090 --> 00:13:56,350
you don't want all the traffic to go to

00:13:53,740 --> 00:13:57,580
it you want to just test out like 20% of

00:13:56,350 --> 00:14:01,350
the traffic to go to that you can do

00:13:57,580 --> 00:14:01,350
that as well so if you take a look here

00:14:01,590 --> 00:14:07,360
should find a better way to switch Sonya

00:14:04,600 --> 00:14:09,730
here instead of saying run latest I'm

00:14:07,360 --> 00:14:11,770
saying release so that's a different

00:14:09,730 --> 00:14:13,150
mode instead of like deploying the

00:14:11,770 --> 00:14:15,190
latest version right away I'm just

00:14:13,150 --> 00:14:17,380
saying I want to do it release and these

00:14:15,190 --> 00:14:20,170
are my revisions so I'm using two

00:14:17,380 --> 00:14:22,990
revisions one is the first revision I

00:14:20,170 --> 00:14:25,390
deployed for is the next revision that

00:14:22,990 --> 00:14:27,790
I'm gonna deploy with the CMO file and

00:14:25,390 --> 00:14:31,720
then I'm saying role that person is 20

00:14:27,790 --> 00:14:34,270
meaning I want this new revision to get

00:14:31,720 --> 00:14:36,190
20% of the traffic right and then this

00:14:34,270 --> 00:14:39,400
new revision is pointing to the same

00:14:36,190 --> 00:14:41,170
image but it's gonna say v4 so before is

00:14:39,400 --> 00:14:43,570
the new one that will get 20% of the

00:14:41,170 --> 00:14:53,170
traffic the other one will get 80% so

00:14:43,570 --> 00:14:57,640
let's deploy this one service before and

00:14:53,170 --> 00:14:59,080
if you do curl then when there's a hang

00:14:57,640 --> 00:15:00,250
it means that is creating the pot so

00:14:59,080 --> 00:15:02,350
it's waiting for the pot to come up

00:15:00,250 --> 00:15:03,670
online and by the way as you can see

00:15:02,350 --> 00:15:05,410
some of the pods are tell me anything

00:15:03,670 --> 00:15:06,820
because I'm not using them I'm not using

00:15:05,410 --> 00:15:07,660
the version of the service so they go

00:15:06,820 --> 00:15:10,680
down to zero

00:15:07,660 --> 00:15:13,240
so now it says v4 but if I do curl again

00:15:10,680 --> 00:15:16,690
most of the time it will say v1 right

00:15:13,240 --> 00:15:18,130
and 20% of the time it will say v4 so

00:15:16,690 --> 00:15:20,670
that's the kind of stuff that you can do

00:15:18,130 --> 00:15:24,220
all right so that's Canada serving

00:15:20,670 --> 00:15:25,660
community eventing basically que native

00:15:24,220 --> 00:15:27,400
anything on there's a well here but I

00:15:25,660 --> 00:15:29,410
have to do it really quickly but

00:15:27,400 --> 00:15:32,140
basically what it enables you to do is

00:15:29,410 --> 00:15:34,930
it enables you to Knable x' you to

00:15:32,140 --> 00:15:37,000
connect event sources to event consumers

00:15:34,930 --> 00:15:39,130
using some kind of flow in the middle

00:15:37,000 --> 00:15:40,480
that's all there is to it there's a

00:15:39,130 --> 00:15:41,529
bunch of different event types already

00:15:40,480 --> 00:15:43,060
implemented so

00:15:41,529 --> 00:15:44,529
or if you want to listen for github

00:15:43,060 --> 00:15:46,720
events for example there's a github

00:15:44,529 --> 00:15:47,980
event source that you can use so

00:15:46,720 --> 00:15:50,740
anything that happens on github you can

00:15:47,980 --> 00:15:52,089
listen on google cloud there's something

00:15:50,740 --> 00:15:53,680
called Google cloud pub/sub

00:15:52,089 --> 00:15:55,959
which is a messaging framework you can

00:15:53,680 --> 00:15:57,519
listen for google pub/sub messages and

00:15:55,959 --> 00:15:59,980
there's a bunch of others and I'm sure

00:15:57,519 --> 00:16:01,329
you there will be more and more here but

00:15:59,980 --> 00:16:05,259
basically it enables you to connect

00:16:01,329 --> 00:16:07,029
event sources to event consumers so the

00:16:05,259 --> 00:16:08,529
way it works is that so there's two

00:16:07,029 --> 00:16:10,749
different modes there's like simple

00:16:08,529 --> 00:16:12,279
delivery and a more complicated one but

00:16:10,749 --> 00:16:14,910
to be honest I think the second one is

00:16:12,279 --> 00:16:17,649
more common so you have the event source

00:16:14,910 --> 00:16:19,870
this is the thing inclined ated that

00:16:17,649 --> 00:16:21,370
listens for the external events so if we

00:16:19,870 --> 00:16:23,470
are listening for google cloud pops up

00:16:21,370 --> 00:16:25,629
it will listen for google cloud pub/sub

00:16:23,470 --> 00:16:27,309
messages then once it gets the message

00:16:25,629 --> 00:16:29,439
it has to do something with that so it

00:16:27,309 --> 00:16:31,329
passes that to a channel channel can be

00:16:29,439 --> 00:16:33,790
in memory Channel it can be more durable

00:16:31,329 --> 00:16:36,790
channels and then from the channel you

00:16:33,790 --> 00:16:39,189
can go you can go to subscription so a

00:16:36,790 --> 00:16:40,959
service will have a subscription to the

00:16:39,189 --> 00:16:42,339
channel and then from the channel the

00:16:40,959 --> 00:16:44,350
message will go to the subscription from

00:16:42,339 --> 00:16:46,360
subscription will go to the service or

00:16:44,350 --> 00:16:49,269
you can change services so from Channel

00:16:46,360 --> 00:16:51,129
you can go to another channel and they

00:16:49,269 --> 00:16:53,110
can go to other services so you can do

00:16:51,129 --> 00:16:55,029
chaining as well so that's how it is in

00:16:53,110 --> 00:16:56,889
a nutshell there's much more detail on

00:16:55,029 --> 00:16:58,779
my tutorial about this that you can read

00:16:56,889 --> 00:17:01,959
about but what I want to show you here

00:16:58,779 --> 00:17:05,380
is that I I have this sample where I'm

00:17:01,959 --> 00:17:08,230
connecting Google Cloud Storage to

00:17:05,380 --> 00:17:10,329
Google cloud vision API using key native

00:17:08,230 --> 00:17:12,250
in the middle so Google Cloud Storage is

00:17:10,329 --> 00:17:14,500
a place where you can create a bucket

00:17:12,250 --> 00:17:16,689
and you can save any kind of files you

00:17:14,500 --> 00:17:18,610
want and the cool thing about storage is

00:17:16,689 --> 00:17:21,339
that you can enable pops-up services on

00:17:18,610 --> 00:17:24,339
it so you can say on this bucket I want

00:17:21,339 --> 00:17:26,380
you to send me a pop sub message when

00:17:24,339 --> 00:17:27,130
someone uploads a file right you can say

00:17:26,380 --> 00:17:31,720
things like that

00:17:27,130 --> 00:17:34,120
so when someone uploads a picture it

00:17:31,720 --> 00:17:35,980
goes to Google Cloud pops up Google

00:17:34,120 --> 00:17:38,980
color pops up will send a message to a

00:17:35,980 --> 00:17:41,620
topic and then you can have K native

00:17:38,980 --> 00:17:43,780
eventing listen for the topic get the

00:17:41,620 --> 00:17:46,750
message and then it will use this

00:17:43,780 --> 00:17:49,090
channel in memory channel to write it to

00:17:46,750 --> 00:17:51,399
a k native service and then clean it a

00:17:49,090 --> 00:17:54,190
service can do whatever it wants in this

00:17:51,399 --> 00:17:55,490
case it makes a call to vision API which

00:17:54,190 --> 00:17:58,309
is a machine learning API in

00:17:55,490 --> 00:18:02,270
Klout where you can pass in images and

00:17:58,309 --> 00:18:03,860
it uses machine learning to analyze the

00:18:02,270 --> 00:18:05,870
image to get the labels out of the image

00:18:03,860 --> 00:18:06,800
so as you can see storage and vision are

00:18:05,870 --> 00:18:08,210
two different things

00:18:06,800 --> 00:18:10,520
but you can kind of glue them together

00:18:08,210 --> 00:18:18,040
using key native so let me show you this

00:18:10,520 --> 00:18:23,809
quickly so if we go to where is it

00:18:18,040 --> 00:18:26,150
eventing vision so I already created the

00:18:23,809 --> 00:18:28,580
source so we are already listening GCT

00:18:26,150 --> 00:18:30,260
pops up messages I already created a

00:18:28,580 --> 00:18:31,700
channel in memory Channel so once that

00:18:30,260 --> 00:18:34,010
we get the message in cognitive we

00:18:31,700 --> 00:18:36,590
already save it to a in memory Channel

00:18:34,010 --> 00:18:39,200
and now I want to create the service

00:18:36,590 --> 00:18:41,690
that actually will get the message and

00:18:39,200 --> 00:18:42,980
also the subscription of that right so

00:18:41,690 --> 00:18:48,200
what I'm doing here is that when I say

00:18:42,980 --> 00:18:53,570
keep CTL apply subscriber and let me

00:18:48,200 --> 00:18:54,470
show you this quickly so the source is

00:18:53,570 --> 00:18:55,760
already created the challenge already

00:18:54,470 --> 00:18:57,050
created I'm not showing them to you

00:18:55,760 --> 00:18:59,870
because you don't have time but the

00:18:57,050 --> 00:19:01,400
subscriber first we define a key native

00:18:59,870 --> 00:19:05,150
service so this is a regular teenager

00:19:01,400 --> 00:19:07,910
service that points to some talker image

00:19:05,150 --> 00:19:09,440
that I already created one thing I did

00:19:07,910 --> 00:19:12,500
it here is that I set the auto scaling

00:19:09,440 --> 00:19:14,240
limit to 1 meaning I will always know

00:19:12,500 --> 00:19:15,830
one pod running it won't go down to 0

00:19:14,240 --> 00:19:17,720
because I don't want to wait so I always

00:19:15,830 --> 00:19:19,340
have one pole running and then I also

00:19:17,720 --> 00:19:21,710
create a subscription so this

00:19:19,340 --> 00:19:23,270
subscription is basically listening for

00:19:21,710 --> 00:19:26,000
messages from this channel that I

00:19:23,270 --> 00:19:27,080
already defined and and it's connecting

00:19:26,000 --> 00:19:28,520
to the service so it's making the

00:19:27,080 --> 00:19:30,200
connection between the beep in the

00:19:28,520 --> 00:19:36,070
channel and the service that we created

00:19:30,200 --> 00:19:42,440
right so if everything went well let me

00:19:36,070 --> 00:19:43,820
do this CTL get parts so as you can see

00:19:42,440 --> 00:19:45,320
I have my hello worlds they are

00:19:43,820 --> 00:19:48,200
terminating because no one is using them

00:19:45,320 --> 00:19:51,020
but the vision one is running that's

00:19:48,200 --> 00:19:56,920
good I want to look at the logs so when

00:19:51,020 --> 00:19:56,920
let me check my walks yeah let's do this

00:19:57,880 --> 00:20:06,630
and keeps if y'all get parts I need to I

00:20:01,160 --> 00:20:10,750
need to get the pot ID all right so

00:20:06,630 --> 00:20:12,250
get this so we are now looking at two

00:20:10,750 --> 00:20:14,830
logs on my service

00:20:12,250 --> 00:20:19,330
now it's listening on port 8080 alright

00:20:14,830 --> 00:20:22,780
now let's go to here and upload this

00:20:19,330 --> 00:20:23,350
image so anyone knows where this is and

00:20:22,780 --> 00:20:26,500
it guesses

00:20:23,350 --> 00:20:28,810
no one all right it's a it's a Panama

00:20:26,500 --> 00:20:29,590
beach in Rio which is about one of my

00:20:28,810 --> 00:20:32,470
favorite beaches

00:20:29,590 --> 00:20:37,120
so let's upload this image to cut

00:20:32,470 --> 00:20:41,170
storage so this is listening and if you

00:20:37,120 --> 00:20:43,240
go here cloud storage I have a bucket

00:20:41,170 --> 00:20:45,820
for mic a native so this is my clean 8 a

00:20:43,240 --> 00:20:47,770
bucket and I enabled pops up messages on

00:20:45,820 --> 00:20:49,630
this so anything I did upward here it

00:20:47,770 --> 00:20:54,010
will generate a pops up message so

00:20:49,630 --> 00:20:54,490
upload files choose the beach alright

00:20:54,010 --> 00:20:58,120
ready

00:20:54,490 --> 00:21:00,580
it's uploading hopefully it works come

00:20:58,120 --> 00:21:02,800
here boom you got the message and now

00:21:00,580 --> 00:21:05,020
it's making a call to vision API and

00:21:02,800 --> 00:21:06,910
then the vision API said this picture is

00:21:05,020 --> 00:21:09,430
labeled sky board over to see nature

00:21:06,910 --> 00:21:11,770
cause water sunset bah-bah-bah right so

00:21:09,430 --> 00:21:14,500
we made the connection from storage to

00:21:11,770 --> 00:21:17,590
vision API I have many more samples on

00:21:14,500 --> 00:21:20,890
the tutorial I have for example one from

00:21:17,590 --> 00:21:23,680
Twilio where you can send a message to a

00:21:20,890 --> 00:21:25,690
number and it can use K NATO to reply to

00:21:23,680 --> 00:21:27,070
that message in different ways so it's

00:21:25,690 --> 00:21:31,210
pretty cool if you have time to check it

00:21:27,070 --> 00:21:34,060
out alright and the last thing I wanna

00:21:31,210 --> 00:21:36,580
talk about this ki netic belt so k

00:21:34,060 --> 00:21:40,420
native built in a single sentence it

00:21:36,580 --> 00:21:44,470
basically allows you to go from your

00:21:40,420 --> 00:21:48,310
code to a container in a registry right

00:21:44,470 --> 00:21:50,110
so you can deploy you can build your

00:21:48,310 --> 00:21:53,290
code and you can create a container

00:21:50,110 --> 00:21:54,880
image and you can push it to google

00:21:53,290 --> 00:21:57,640
container registry or you can push it to

00:21:54,880 --> 00:21:59,770
docker hub things like that there are

00:21:57,640 --> 00:22:02,200
some primitives so build is basically

00:21:59,770 --> 00:22:05,410
the thing that it's basically the number

00:22:02,200 --> 00:22:06,970
of steps in your in your build

00:22:05,410 --> 00:22:08,260
you can use many templates so there's

00:22:06,970 --> 00:22:09,880
many templates that you can use or you

00:22:08,260 --> 00:22:11,260
can take your own build and make it a

00:22:09,880 --> 00:22:13,030
template and you can use it for multiple

00:22:11,260 --> 00:22:15,250
bills there are different kinds of

00:22:13,030 --> 00:22:17,320
builders that you can use and finally if

00:22:15,250 --> 00:22:19,530
you need total authenticate let's say

00:22:17,320 --> 00:22:20,850
with docker hub you need to have

00:22:19,530 --> 00:22:22,850
service accounts so there's a server

00:22:20,850 --> 00:22:26,040
second as well that you need to set up

00:22:22,850 --> 00:22:29,760
again I have examples of this but I want

00:22:26,040 --> 00:22:32,490
how much time I have zero okay just just

00:22:29,760 --> 00:22:34,200
the show just I just want to show you

00:22:32,490 --> 00:22:39,660
the mo file in here and then we can

00:22:34,200 --> 00:22:41,040
finish or maybe I won't show it okay

00:22:39,660 --> 00:22:44,490
well maybe I'll skip because it's just

00:22:41,040 --> 00:22:47,130
all here just one sec so this is docker

00:22:44,490 --> 00:22:48,270
this is a built that pushes docker so

00:22:47,130 --> 00:22:50,070
all we are doing here is that we are

00:22:48,270 --> 00:22:51,450
giving the name we are saying this is

00:22:50,070 --> 00:22:53,940
the service account that I use that I

00:22:51,450 --> 00:22:56,160
will define in Cuban it is then this is

00:22:53,940 --> 00:22:58,470
the source that I want to build and the

00:22:56,160 --> 00:23:00,600
path to the source and the steps is

00:22:58,470 --> 00:23:03,270
basically I'm using Kaneko which is an

00:23:00,600 --> 00:23:05,880
open source project to build my dog

00:23:03,270 --> 00:23:07,830
image and this is my local file and the

00:23:05,880 --> 00:23:09,630
destination is defined here so once you

00:23:07,830 --> 00:23:12,390
do that you just say keep CTO apply

00:23:09,630 --> 00:23:15,690
pointer llamo and this all happens okay

00:23:12,390 --> 00:23:17,760
and that's all I unfortunately have time

00:23:15,690 --> 00:23:19,770
for thank you very much

00:23:17,760 --> 00:23:21,660
yeah if you if you want to grab some

00:23:19,770 --> 00:23:22,430
t-shirts and everything feel free thank

00:23:21,660 --> 00:23:28,859
you

00:23:22,430 --> 00:23:28,859

YouTube URL: https://www.youtube.com/watch?v=9fgBngpSGxc


