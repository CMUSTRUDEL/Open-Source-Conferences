Title: Creating Ubuntu and Debian container base images, the old and simple way by Hamish Coleman
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	15 March 2019 15:00, Lecture Theatre

Containers are everywhere, but do you know how to create the root filesystems that they use?  There are simple tools available to create your own custom Ubuntu or Debian root filesystem.  By using these tools to build environments matching your needs, you will end up with a better understanding of how containers are built - and how to debug them - as well as gain access to more options that can speed up your own builds and testing.

In this presentation, I will show the debootstrap and multistrap tools and provide worked examples on how to avoid their gotchas and end up with a bootable root filesystem.
Captions: 
	00:00:00,000 --> 00:00:05,250
hamish common from dim sum it's gonna

00:00:02,040 --> 00:00:08,429
took us total about the old and simple

00:00:05,250 --> 00:00:14,940
way to create food - and Debian

00:00:08,429 --> 00:00:17,130
containing widgets I do hear a lot of

00:00:14,940 --> 00:00:20,279
people talking about building their own

00:00:17,130 --> 00:00:21,359
containers but they don't talk about how

00:00:20,279 --> 00:00:23,250
they actually get to the point where

00:00:21,359 --> 00:00:24,750
they start so that's what I want to talk

00:00:23,250 --> 00:00:28,830
to you about because I want to say it's

00:00:24,750 --> 00:00:30,240
simple the old ways do still work and it

00:00:28,830 --> 00:00:32,940
should be easy for people to actually

00:00:30,240 --> 00:00:34,469
use them to get a bit more comfortable

00:00:32,940 --> 00:00:37,290
and a little bit more ability to have

00:00:34,469 --> 00:00:38,550
control over their environment you might

00:00:37,290 --> 00:00:41,489
say okay what am I talking about when I

00:00:38,550 --> 00:00:43,710
say a base image base image is when

00:00:41,489 --> 00:00:46,850
somebody says hey just fire up a virtual

00:00:43,710 --> 00:00:49,260
machine I want to run a bundle in it

00:00:46,850 --> 00:00:51,030
you'll often have a menu you pick the

00:00:49,260 --> 00:00:52,920
bun - from where does that a Bunty come

00:00:51,030 --> 00:00:55,879
from who's a Bunty you were installing

00:00:52,920 --> 00:00:58,730
who compiled that who configured it who

00:00:55,879 --> 00:01:06,860
customized it for your own requirements

00:00:58,730 --> 00:01:09,150
or if you had or have you had your own

00:01:06,860 --> 00:01:13,530
custom program do you want to include in

00:01:09,150 --> 00:01:15,210
it then who put that in there so the

00:01:13,530 --> 00:01:17,159
answer is it can be you and there are

00:01:15,210 --> 00:01:20,340
simple tools to allow you to do this so

00:01:17,159 --> 00:01:22,549
I'm not going to talk about a single

00:01:20,340 --> 00:01:25,229
binary image system which is another

00:01:22,549 --> 00:01:27,119
different type of way of building

00:01:25,229 --> 00:01:30,360
containers I'm talking about building

00:01:27,119 --> 00:01:34,439
and a bun - template or a debian

00:01:30,360 --> 00:01:39,360
template so you start with a full

00:01:34,439 --> 00:01:41,280
operating system and once you know how

00:01:39,360 --> 00:01:43,560
to build them yourself you will know

00:01:41,280 --> 00:01:45,899
where your operating systems come from

00:01:43,560 --> 00:01:50,000
because you've built them you don't have

00:01:45,899 --> 00:01:52,799
to use them but if you can replicate

00:01:50,000 --> 00:01:55,020
what you end up with in the cloud then

00:01:52,799 --> 00:01:56,430
you can run tests locally to prove that

00:01:55,020 --> 00:01:58,950
what you're expecting to happen in the

00:01:56,430 --> 00:02:00,659
cloud is what's happening locally and it

00:01:58,950 --> 00:02:02,670
gives you another lever for debugging

00:02:00,659 --> 00:02:04,110
things especially what you're doing in

00:02:02,670 --> 00:02:07,049
the cloud is some kind of fully

00:02:04,110 --> 00:02:09,209
automated environment you don't know or

00:02:07,049 --> 00:02:11,050
necessarily have access to run the pools

00:02:09,209 --> 00:02:13,540
- deep debugging

00:02:11,050 --> 00:02:15,660
in the full production environment so

00:02:13,540 --> 00:02:19,510
you might want to build your own cloud

00:02:15,660 --> 00:02:21,430
images locally and run tests on them and

00:02:19,510 --> 00:02:27,400
then throw them away and use whatever is

00:02:21,430 --> 00:02:29,620
provided by your cloud provider because

00:02:27,400 --> 00:02:30,730
you don't really want to just grab them

00:02:29,620 --> 00:02:32,920
from somebody around the back of the pub

00:02:30,730 --> 00:02:35,080
he might be doing something bad with

00:02:32,920 --> 00:02:39,280
them so if you can prove that that's not

00:02:35,080 --> 00:02:41,050
the case you can end up we've been added

00:02:39,280 --> 00:02:45,730
repeatedly and reliably build your

00:02:41,050 --> 00:02:47,050
infrastructure and once you're building

00:02:45,730 --> 00:02:49,090
your own just up to yourself and have

00:02:47,050 --> 00:02:52,000
the capacity to do that it gives you

00:02:49,090 --> 00:02:53,680
other options like having the ability to

00:02:52,000 --> 00:02:55,450
coordinate between all your production

00:02:53,680 --> 00:02:58,240
environments and your test environments

00:02:55,450 --> 00:03:00,040
and your random throwaway experiments on

00:02:58,240 --> 00:03:01,990
some guy's laptop they can all use the

00:03:00,040 --> 00:03:03,910
same build process they can all use

00:03:01,990 --> 00:03:06,670
something that's verifiably the same

00:03:03,910 --> 00:03:14,650
thing so you can have less moving parts

00:03:06,670 --> 00:03:19,050
and less problems with change in that if

00:03:14,650 --> 00:03:21,490
you were building a base image for a

00:03:19,050 --> 00:03:23,650
small embedded system or a different

00:03:21,490 --> 00:03:24,970
architecture sometimes you might be

00:03:23,650 --> 00:03:27,310
starting with a system that doesn't

00:03:24,970 --> 00:03:29,500
actually exist so it's not like you can

00:03:27,310 --> 00:03:31,840
take the existing base image that exists

00:03:29,500 --> 00:03:35,860
from somewhere else you have to be able

00:03:31,840 --> 00:03:37,209
to build it from scratch so that is

00:03:35,860 --> 00:03:41,590
another reason why you might want to

00:03:37,209 --> 00:03:43,390
build them because they don't exist now

00:03:41,590 --> 00:03:46,110
with Debian and Ubuntu they're all based

00:03:43,390 --> 00:03:49,600
on the same kind of D package system and

00:03:46,110 --> 00:03:51,780
this all applies to other tools other

00:03:49,600 --> 00:03:55,420
distributions that are based on the same

00:03:51,780 --> 00:03:57,070
core D package system most of them have

00:03:55,420 --> 00:03:58,330
the same kind of built process but I'm

00:03:57,070 --> 00:04:01,810
not only going to focus on Debian

00:03:58,330 --> 00:04:03,040
advantage here there are lots of

00:04:01,810 --> 00:04:05,740
different tools included in the

00:04:03,040 --> 00:04:08,320
repository it's for doing this so many

00:04:05,740 --> 00:04:10,959
that I'm don't suggest you look at all

00:04:08,320 --> 00:04:12,850
of them there's the one basic one load D

00:04:10,959 --> 00:04:14,920
bootstrap is the tool that's actually

00:04:12,850 --> 00:04:16,570
used under the hood if you look at how

00:04:14,920 --> 00:04:19,690
the Debian and the bun two installers

00:04:16,570 --> 00:04:21,519
work if you could dig low enough down

00:04:19,690 --> 00:04:23,080
and pull away enough of the fancy

00:04:21,519 --> 00:04:24,759
frontend gue either they've put onto the

00:04:23,080 --> 00:04:26,919
install that these days underneath it's

00:04:24,759 --> 00:04:28,210
still running this debug step tool so

00:04:26,919 --> 00:04:32,800
you can use the same tool from the

00:04:28,210 --> 00:04:36,069
command line yourself and the other tool

00:04:32,800 --> 00:04:38,710
that I'm looking at is multi-strap and I

00:04:36,069 --> 00:04:40,930
use that myself in preference to D

00:04:38,710 --> 00:04:44,349
bootstrap because Multi bootstrap is the

00:04:40,930 --> 00:04:47,639
basic minimum function that all the

00:04:44,349 --> 00:04:51,039
installers need to use it is very basic

00:04:47,639 --> 00:04:52,720
multi-strap is slightly more compatible

00:04:51,039 --> 00:04:57,940
with the way that things work normally

00:04:52,720 --> 00:04:59,800
in an installer whereas the bootstrap

00:04:57,940 --> 00:05:02,130
does a whole lot of hacky things to make

00:04:59,800 --> 00:05:04,630
it work in any environment always

00:05:02,130 --> 00:05:09,699
multi-strap does an actual install of

00:05:04,630 --> 00:05:11,770
the apt package using the apt tools so

00:05:09,699 --> 00:05:13,300
it works in a slightly better way and it

00:05:11,770 --> 00:05:16,120
supports a couple of more features as a

00:05:13,300 --> 00:05:17,710
result of this and as you can see on the

00:05:16,120 --> 00:05:22,270
screen there there's at least a dozen

00:05:17,710 --> 00:05:24,699
different package installers that are in

00:05:22,270 --> 00:05:25,840
the package repositories already so you

00:05:24,699 --> 00:05:28,270
can go searching for these and find

00:05:25,840 --> 00:05:31,389
other ones and he's just a selection of

00:05:28,270 --> 00:05:34,300
ones that I have tried in the past but

00:05:31,389 --> 00:05:36,340
we're gonna look at the bootstrap once

00:05:34,300 --> 00:05:40,090
you've installed D boots go it's really

00:05:36,340 --> 00:05:42,460
simple to use it does just take these

00:05:40,090 --> 00:05:44,110
three command line parameters you

00:05:42,460 --> 00:05:45,940
probably want to give it this hard code

00:05:44,110 --> 00:05:47,710
of one as well as what architecture

00:05:45,940 --> 00:05:52,300
we're going to install but the rest of

00:05:47,710 --> 00:05:55,960
it is what what distribution am i

00:05:52,300 --> 00:05:58,000
installing the suite what target

00:05:55,960 --> 00:06:00,729
directory am i installing it into so

00:05:58,000 --> 00:06:03,969
that's my output directory and what URL

00:06:00,729 --> 00:06:06,009
am I using to install from and these are

00:06:03,969 --> 00:06:10,120
all the standard code names you expect

00:06:06,009 --> 00:06:13,150
from all the normal lab unto and Debian

00:06:10,120 --> 00:06:14,229
releases and the the mirror archive can

00:06:13,150 --> 00:06:17,440
be something you've got locally if you

00:06:14,229 --> 00:06:19,270
want to speed up or just some archive

00:06:17,440 --> 00:06:22,509
that you find on the internet that you

00:06:19,270 --> 00:06:24,250
trust there is actually a chain of trust

00:06:22,509 --> 00:06:25,330
in this so there are ways of proving

00:06:24,250 --> 00:06:29,560
that you're downloading the right

00:06:25,330 --> 00:06:32,440
packages but most of the time you just

00:06:29,560 --> 00:06:33,840
want to run it it is that if I run that

00:06:32,440 --> 00:06:38,040
I'll get a container

00:06:33,840 --> 00:06:42,060
I'll get a a starting point for being a

00:06:38,040 --> 00:06:45,480
to build my template if I was to use

00:06:42,060 --> 00:06:47,220
multi-strap what I get with multi-strap

00:06:45,480 --> 00:06:50,190
is the ability to have multiple

00:06:47,220 --> 00:06:52,889
different package repositories so if I

00:06:50,190 --> 00:06:55,950
had my own internal packages that I've

00:06:52,889 --> 00:06:57,360
built too for my application I could add

00:06:55,950 --> 00:07:00,060
that to the list of repositories to

00:06:57,360 --> 00:07:02,490
install so I'd have both the Debian

00:07:00,060 --> 00:07:04,350
repository and my internal package

00:07:02,490 --> 00:07:07,500
repository or you know a couple of other

00:07:04,350 --> 00:07:09,240
different non built into Debian

00:07:07,500 --> 00:07:10,860
repositories and I could add together

00:07:09,240 --> 00:07:13,710
all the packages I might need for my

00:07:10,860 --> 00:07:15,660
application the bootstrap doesn't let me

00:07:13,710 --> 00:07:17,790
do that so that's the main advantage I

00:07:15,660 --> 00:07:19,110
get a multi scrap but the problem is it

00:07:17,790 --> 00:07:21,750
does need a contrary part because it's a

00:07:19,110 --> 00:07:25,500
little bit more complicated it doesn't

00:07:21,750 --> 00:07:27,510
have a huge config file the concrete

00:07:25,500 --> 00:07:28,979
file does just have a section for each

00:07:27,510 --> 00:07:33,630
repository that you're trying to install

00:07:28,979 --> 00:07:35,010
from and extra sections for global

00:07:33,630 --> 00:07:40,260
things like what packages I want to

00:07:35,010 --> 00:07:42,510
install to prove my chain of trust I can

00:07:40,260 --> 00:07:46,410
install various security packages

00:07:42,510 --> 00:07:48,300
beforehand key files and I define each

00:07:46,410 --> 00:07:51,330
key file for each repository so I can

00:07:48,300 --> 00:07:53,190
actually have signed repositories and

00:07:51,330 --> 00:07:55,430
then prove where my packages come from

00:07:53,190 --> 00:07:57,360
so i know that i've got i'm not

00:07:55,430 --> 00:07:59,430
accidentally downloading something crazy

00:07:57,360 --> 00:08:01,080
from the internet given that's my point

00:07:59,430 --> 00:08:02,639
here is that i want to try and have the

00:08:01,080 --> 00:08:04,530
face that i am building something that's

00:08:02,639 --> 00:08:07,530
reproducible and i know where it comes

00:08:04,530 --> 00:08:11,490
from it is important to realize that you

00:08:07,530 --> 00:08:14,310
have got special named packages in both

00:08:11,490 --> 00:08:18,240
Debian and Ubuntu that contain the

00:08:14,310 --> 00:08:20,479
archive keyring public keys so you can

00:08:18,240 --> 00:08:23,940
see in my example file up there I've got

00:08:20,479 --> 00:08:27,360
the two packages names that you install

00:08:23,940 --> 00:08:30,320
to get these keys which means that I'll

00:08:27,360 --> 00:08:32,520
have all the chain of trust required

00:08:30,320 --> 00:08:35,070
once I've actually got my config file

00:08:32,520 --> 00:08:39,080
from multi-strap it is again it's a

00:08:35,070 --> 00:08:41,459
simple process of running two commands

00:08:39,080 --> 00:08:42,870
unfortunately two commands now and there

00:08:41,459 --> 00:08:45,740
are technical reasons for that but don't

00:08:42,870 --> 00:08:49,850
actually matter most of the time

00:08:45,740 --> 00:08:52,190
but it is a flexible advantage if you're

00:08:49,850 --> 00:08:54,080
running a different architecture or if

00:08:52,190 --> 00:08:57,140
you want to have partially installed

00:08:54,080 --> 00:09:00,110
systems so that you can reconfigure them

00:08:57,140 --> 00:09:02,050
there is two different phases the

00:09:00,110 --> 00:09:04,460
installed face and the configure phase

00:09:02,050 --> 00:09:07,490
most of the time you just run one after

00:09:04,460 --> 00:09:09,260
the other and sometimes you don't need

00:09:07,490 --> 00:09:12,230
to run the configure phase but it

00:09:09,260 --> 00:09:13,610
doesn't hurt to run it so you just run

00:09:12,230 --> 00:09:17,630
one after the other unless you know that

00:09:13,610 --> 00:09:20,420
you don't need to and given that I've

00:09:17,630 --> 00:09:22,190
looked at the two tools I want to say

00:09:20,420 --> 00:09:23,540
why I would choose one over the other

00:09:22,190 --> 00:09:25,940
you've heard some of the reasons already

00:09:23,540 --> 00:09:27,410
one of them is the default install you

00:09:25,940 --> 00:09:29,660
know that Deere boots that will work

00:09:27,410 --> 00:09:37,940
because it's how a lot of people install

00:09:29,660 --> 00:09:39,320
their distribution but the sometimes the

00:09:37,940 --> 00:09:41,420
config file means it's harder to run

00:09:39,320 --> 00:09:43,250
from a command line so D boot straps

00:09:41,420 --> 00:09:44,570
good in that way but sometimes you want

00:09:43,250 --> 00:09:47,140
to have the multiple packages as I've

00:09:44,570 --> 00:09:52,310
talked about so DB strips not so good

00:09:47,140 --> 00:09:56,320
but then what you've got is the other

00:09:52,310 --> 00:09:58,400
features here is that because

00:09:56,320 --> 00:10:00,710
multi-strap is installing its packaged

00:09:58,400 --> 00:10:02,930
is the normal way or closer to the

00:10:00,710 --> 00:10:05,960
normal way there are certain scripts

00:10:02,930 --> 00:10:08,120
that are automatically runs as part of

00:10:05,960 --> 00:10:10,640
the post install of your packages that

00:10:08,120 --> 00:10:15,080
may be important for your environment so

00:10:10,640 --> 00:10:16,310
it gives a cleaner set up and it's often

00:10:15,080 --> 00:10:18,110
more important with the multi of

00:10:16,310 --> 00:10:20,330
architecture things if you're building a

00:10:18,110 --> 00:10:22,250
base image for a different machine if

00:10:20,330 --> 00:10:25,120
your cross compiling or cross installing

00:10:22,250 --> 00:10:30,430
I suppose then you want to use your

00:10:25,120 --> 00:10:30,430
multi strap now the

00:10:30,930 --> 00:10:35,530
images the the directories that are you

00:10:34,150 --> 00:10:39,100
create with those two tools he's

00:10:35,530 --> 00:10:41,500
immediately useful it creates a

00:10:39,100 --> 00:10:43,720
subdirectory that looks like the root of

00:10:41,500 --> 00:10:46,510
a filesystem a root of a new installed

00:10:43,720 --> 00:10:48,430
computer so if you start with that you

00:10:46,510 --> 00:10:50,800
can use that straightaway you can

00:10:48,430 --> 00:10:54,490
actually jump into it and run commands

00:10:50,800 --> 00:10:57,250
ever it's a full install and this is

00:10:54,490 --> 00:10:59,740
useful if you want to do isolated

00:10:57,250 --> 00:11:01,090
sandbox for compiling something or if

00:10:59,740 --> 00:11:02,260
you just want to do a test to find out

00:11:01,090 --> 00:11:03,910
what happens when you install a package

00:11:02,260 --> 00:11:06,070
what files is installed how does it

00:11:03,910 --> 00:11:07,750
configure things you've got a template

00:11:06,070 --> 00:11:11,710
you can just jump straight into it user

00:11:07,750 --> 00:11:12,970
this is not a container the chroot that

00:11:11,710 --> 00:11:16,090
I'm running up there in the command line

00:11:12,970 --> 00:11:19,540
example does not containerize things in

00:11:16,090 --> 00:11:22,300
a very secure way these days but it is

00:11:19,540 --> 00:11:23,740
enough of an isolated environment that

00:11:22,300 --> 00:11:30,070
you can run your own tests if you want

00:11:23,740 --> 00:11:31,810
to do experiments of your own so it's

00:11:30,070 --> 00:11:35,920
useful for some things but it's not a

00:11:31,810 --> 00:11:37,990
complete template if you do run some

00:11:35,920 --> 00:11:41,230
commands you might expect to work

00:11:37,990 --> 00:11:43,090
normally they'll often give you crazy

00:11:41,230 --> 00:11:45,310
error messages because the environments

00:11:43,090 --> 00:11:46,900
not completely set up it doesn't look

00:11:45,310 --> 00:11:49,840
like it's a rooted system it doesn't

00:11:46,900 --> 00:11:52,000
have all of the part that needs and that

00:11:49,840 --> 00:11:53,920
works differently in multi-strap indeed

00:11:52,000 --> 00:11:56,820
bootstrap they've both got some little

00:11:53,920 --> 00:12:01,300
bits of things that aren't quite working

00:11:56,820 --> 00:12:02,680
they will do some things and other

00:12:01,300 --> 00:12:04,900
things will just completely fail because

00:12:02,680 --> 00:12:09,070
it's lacking an install step at some

00:12:04,900 --> 00:12:12,490
point so the improvements that I tend to

00:12:09,070 --> 00:12:14,470
do to make the outputs of these tools

00:12:12,490 --> 00:12:16,210
into something that I do want to use I

00:12:14,470 --> 00:12:20,080
separate into a couple of different

00:12:16,210 --> 00:12:22,480
phases to build my template I'll have a

00:12:20,080 --> 00:12:25,420
fix up to fix it the obvious problems

00:12:22,480 --> 00:12:27,580
that stop us from working I love a

00:12:25,420 --> 00:12:29,440
customized step where I install the

00:12:27,580 --> 00:12:31,870
config that I think I want from my

00:12:29,440 --> 00:12:33,880
template and then generally because I'm

00:12:31,870 --> 00:12:35,650
building a template to use to deploy

00:12:33,880 --> 00:12:37,960
lots of times or to give to lots of

00:12:35,650 --> 00:12:40,240
people I'll have a minimized step where

00:12:37,960 --> 00:12:42,550
I say what's the extra space being used

00:12:40,240 --> 00:12:43,570
for in this system delete as much extra

00:12:42,550 --> 00:12:44,830
space as I can

00:12:43,570 --> 00:12:48,040
and make the template as small as

00:12:44,830 --> 00:12:49,540
possible before deploying it and then

00:12:48,040 --> 00:12:53,080
when I actually go to deploy it to

00:12:49,540 --> 00:12:56,440
instantiate a real virtual machine from

00:12:53,080 --> 00:13:00,700
a template there's another step as well

00:12:56,440 --> 00:13:02,620
oh and I'll mention here there's some

00:13:00,700 --> 00:13:04,060
links in the slides I hooked the URL for

00:13:02,620 --> 00:13:05,520
the slides up at the end there's some

00:13:04,060 --> 00:13:09,460
links in the slides I've actually got

00:13:05,520 --> 00:13:13,750
scripts examples for all of the examples

00:13:09,460 --> 00:13:15,580
I've put on the screen so if I wanted to

00:13:13,750 --> 00:13:19,600
fix up the image there's three basic

00:13:15,580 --> 00:13:22,450
things I need to do but for I guess from

00:13:19,600 --> 00:13:25,510
that list to other things

00:13:22,450 --> 00:13:27,130
removing identifiable information there

00:13:25,510 --> 00:13:28,600
are a whole bunch of random numbers that

00:13:27,130 --> 00:13:31,030
are used to generate the key and the

00:13:28,600 --> 00:13:32,770
machine ID so they're not going to be

00:13:31,030 --> 00:13:34,360
useful in template because each instance

00:13:32,770 --> 00:13:37,210
of your template is going to be a whole

00:13:34,360 --> 00:13:39,460
new virtual machine so we delete the

00:13:37,210 --> 00:13:41,820
private key material we delete the

00:13:39,460 --> 00:13:44,830
random number that is the machine ID and

00:13:41,820 --> 00:13:47,950
then the host name itself when you build

00:13:44,830 --> 00:13:49,810
with the d-- bootstrap tool it'll often

00:13:47,950 --> 00:13:52,120
give it a host name that is a copy of

00:13:49,810 --> 00:13:55,330
the host that's running the installer

00:13:52,120 --> 00:13:58,300
which is not very useful either so we

00:13:55,330 --> 00:13:59,740
remove that in a modern system if you're

00:13:58,300 --> 00:14:02,050
using a system that actually starts with

00:13:59,740 --> 00:14:03,580
a system D init environment it'll

00:14:02,050 --> 00:14:05,050
automatically generate a host name if it

00:14:03,580 --> 00:14:08,080
doesn't have one so we can remove that

00:14:05,050 --> 00:14:10,540
or during the instantiation phase later

00:14:08,080 --> 00:14:12,850
we can put one in and then the final

00:14:10,540 --> 00:14:15,640
thing that I fix just for all default

00:14:12,850 --> 00:14:17,950
built is the reason why in the earlier

00:14:15,640 --> 00:14:21,070
slide I couldn't do an apt install was

00:14:17,950 --> 00:14:24,460
down to one one file missing in the

00:14:21,070 --> 00:14:26,140
resolver so I fixed that and these are

00:14:24,460 --> 00:14:28,300
just three basic things as you install

00:14:26,140 --> 00:14:29,920
more and more packages as you build your

00:14:28,300 --> 00:14:34,090
environment you might find you need to

00:14:29,920 --> 00:14:37,540
do more fix ups but with these three

00:14:34,090 --> 00:14:39,580
basic things to fix up what you end up

00:14:37,540 --> 00:14:43,050
with is a environment that doesn't

00:14:39,580 --> 00:14:45,670
immediately break when it's booted to

00:14:43,050 --> 00:14:47,440
customize it obviously you want to have

00:14:45,670 --> 00:14:49,540
your automation environment they are to

00:14:47,440 --> 00:14:51,100
log into your built image once it's

00:14:49,540 --> 00:14:53,560
actually instantiated so you'll need to

00:14:51,100 --> 00:14:55,540
set some passwords normally I wouldn't

00:14:53,560 --> 00:14:57,059
set a specific hard-coded password I

00:14:55,540 --> 00:14:59,879
configure a

00:14:57,059 --> 00:15:02,999
list of accounts that have the ability

00:14:59,879 --> 00:15:04,919
to do sudo on it so that means a couple

00:15:02,999 --> 00:15:08,519
of nother bits of automation and a

00:15:04,919 --> 00:15:11,219
couple of more files in there to

00:15:08,519 --> 00:15:13,469
configure sudo but if you just want to

00:15:11,219 --> 00:15:15,839
do tests you give it a password so you

00:15:13,469 --> 00:15:17,609
can log into it afterwards and you

00:15:15,839 --> 00:15:18,749
configure networking so that it'll work

00:15:17,609 --> 00:15:20,609
once it's actually booted into a

00:15:18,749 --> 00:15:22,859
container because the default image

00:15:20,609 --> 00:15:24,989
won't have DHCP clients or no and again

00:15:22,859 --> 00:15:28,769
I've used the modern system there with

00:15:24,989 --> 00:15:31,889
the system D install and I'm overwriting

00:15:28,769 --> 00:15:33,869
the result confer gain because this is

00:15:31,889 --> 00:15:36,289
the customized step I now know that I

00:15:33,869 --> 00:15:39,149
have a specific resolver that I can use

00:15:36,289 --> 00:15:42,749
so sometimes I'll fix things multiple

00:15:39,149 --> 00:15:45,599
times when I go on to minimize there's a

00:15:42,749 --> 00:15:48,329
whole lot of things in your basic image

00:15:45,599 --> 00:15:50,459
that aren't going to be used things like

00:15:48,329 --> 00:15:52,619
the documentation files or even the main

00:15:50,459 --> 00:15:55,109
pages if you're not logging your

00:15:52,619 --> 00:15:57,079
infrastructure if you're using a fully

00:15:55,109 --> 00:15:58,979
automated environment if you're

00:15:57,079 --> 00:16:00,509
dynamically scaling the number of

00:15:58,979 --> 00:16:02,549
virtual machines you've got running in

00:16:00,509 --> 00:16:03,989
some kind of cloud system you're not

00:16:02,549 --> 00:16:06,239
logging into each of your virtual

00:16:03,989 --> 00:16:09,899
machines you don't need to have the

00:16:06,239 --> 00:16:12,209
documentation installed there that's 8

00:16:09,899 --> 00:16:14,609
to 20 Meg of space that I can just

00:16:12,209 --> 00:16:20,059
delete same with the localization files

00:16:14,609 --> 00:16:24,929
if your application environment has a

00:16:20,059 --> 00:16:28,109
user facing translation layer you may

00:16:24,929 --> 00:16:30,779
require the locales information there

00:16:28,109 --> 00:16:33,509
but most of time your application will

00:16:30,779 --> 00:16:34,889
have its own translation layer so this

00:16:33,509 --> 00:16:37,379
is the operating system list of

00:16:34,889 --> 00:16:39,299
translated files there's another 20

00:16:37,379 --> 00:16:40,859
yards worth of space there you can just

00:16:39,299 --> 00:16:43,979
say right and this isn't a minimal

00:16:40,859 --> 00:16:45,209
system and then there's a couple other

00:16:43,979 --> 00:16:46,529
files that you can find if you go

00:16:45,209 --> 00:16:48,359
searching you'll find that there's a

00:16:46,529 --> 00:16:51,929
bunch of things a large and you can say

00:16:48,359 --> 00:16:54,539
for each one can I get rid of it but the

00:16:51,929 --> 00:16:56,519
basics are realize that you can make it

00:16:54,539 --> 00:16:59,789
smaller and that there are ways of

00:16:56,519 --> 00:17:01,529
saying it's a 200 big image now but I

00:16:59,789 --> 00:17:03,089
can make it a hundred mega image and if

00:17:01,529 --> 00:17:05,920
I'm deploying a thousand of them that

00:17:03,089 --> 00:17:07,929
adds up pretty quickly

00:17:05,920 --> 00:17:10,929
then if I'm going to instantiate a copy

00:17:07,929 --> 00:17:13,000
of this template normally if I've got a

00:17:10,929 --> 00:17:15,280
container orchestration system or some

00:17:13,000 --> 00:17:18,490
kind of cloud automation there will be a

00:17:15,280 --> 00:17:20,740
process for doing that that's done for

00:17:18,490 --> 00:17:22,750
me if I'm building it all myself or more

00:17:20,740 --> 00:17:24,150
to the point if I'm trying to understand

00:17:22,750 --> 00:17:26,079
how the system works

00:17:24,150 --> 00:17:27,699
which is what I'm trying to get you all

00:17:26,079 --> 00:17:30,400
to do to realize that this is actually

00:17:27,699 --> 00:17:33,460
simple under the process then you might

00:17:30,400 --> 00:17:34,570
want to know how to do it manually so

00:17:33,460 --> 00:17:36,730
there are a couple of things your

00:17:34,570 --> 00:17:40,240
instancing this hosts to a specific

00:17:36,730 --> 00:17:42,340
thing so we give it a host name we give

00:17:40,240 --> 00:17:44,770
it a couple of entries into the hosts

00:17:42,340 --> 00:17:48,460
file to make that hostname work and we

00:17:44,770 --> 00:17:49,990
do do a reconfiguration of the SSH keys

00:17:48,460 --> 00:17:52,120
we deleted them earlier when we did the

00:17:49,990 --> 00:17:54,370
fix ups to remove the private key

00:17:52,120 --> 00:17:56,590
material but now we need to instantiate

00:17:54,370 --> 00:17:58,390
it so we need to create them again so we

00:17:56,590 --> 00:18:02,290
just jump in and we tell like when SSH

00:17:58,390 --> 00:18:04,960
to rebuild its SSH keys and once I've

00:18:02,290 --> 00:18:07,929
done those four steps I now have a

00:18:04,960 --> 00:18:10,480
machine that I can really easily boot on

00:18:07,929 --> 00:18:12,610
my local system again I'm gonna use a

00:18:10,480 --> 00:18:17,260
modern system I've installed the system

00:18:12,610 --> 00:18:19,330
DNS born tool it's the simplest answer

00:18:17,260 --> 00:18:20,620
it's not always the right answer I'm not

00:18:19,330 --> 00:18:22,870
going to say not trying to say you

00:18:20,620 --> 00:18:25,150
should use system D but this is the

00:18:22,870 --> 00:18:26,590
simplest answer to get started with if

00:18:25,150 --> 00:18:28,690
you don't want to install an entire

00:18:26,590 --> 00:18:33,010
infrastructure or a tire cloud

00:18:28,690 --> 00:18:35,650
automation system system D n spawn can

00:18:33,010 --> 00:18:37,809
be told here this subdirectory booted up

00:18:35,650 --> 00:18:40,960
as if it is a containerized machine and

00:18:37,809 --> 00:18:42,370
it will and in this example that I've

00:18:40,960 --> 00:18:44,919
got on the screen there I've actually

00:18:42,370 --> 00:18:48,520
even said boot up this subdirectory and

00:18:44,919 --> 00:18:51,040
throw away all the changes I made when I

00:18:48,520 --> 00:18:53,919
closed down when I exit from the virtual

00:18:51,040 --> 00:18:56,110
machine which you can do by selling it

00:18:53,919 --> 00:18:57,460
to power off inside the machine or from

00:18:56,110 --> 00:19:01,150
outside the machine using the machine

00:18:57,460 --> 00:19:03,070
control command when I pair it off it'll

00:19:01,150 --> 00:19:07,000
actually throw away any changes I made

00:19:03,070 --> 00:19:08,710
during that boot of this machine so it's

00:19:07,000 --> 00:19:10,660
a good way of again testing things

00:19:08,710 --> 00:19:12,940
locally you fire up something looks like

00:19:10,660 --> 00:19:15,220
it's a full virtual machine you log into

00:19:12,940 --> 00:19:17,160
it and then you throw away the changes

00:19:15,220 --> 00:19:19,960
after you've done your experian

00:19:17,160 --> 00:19:23,230
now to move on from there if I was gonna

00:19:19,960 --> 00:19:26,790
build my own system I wouldn't be using

00:19:23,230 --> 00:19:30,550
just in the end spawn it's a little bit

00:19:26,790 --> 00:19:33,040
new I guess but what I could use is

00:19:30,550 --> 00:19:36,430
something like libvirt you may have

00:19:33,040 --> 00:19:38,170
encountered Libert before it is a system

00:19:36,430 --> 00:19:40,300
for managing virtual machines

00:19:38,170 --> 00:19:43,060
it has networked transparency so you can

00:19:40,300 --> 00:19:45,280
have people on their desktops with

00:19:43,060 --> 00:19:49,150
management tools logging into a cluster

00:19:45,280 --> 00:19:51,010
of virtual machine hosts and one of the

00:19:49,150 --> 00:19:53,700
features that isn't talked about a lot

00:19:51,010 --> 00:19:57,480
is it does actually have LXE

00:19:53,700 --> 00:19:59,860
compatibility so you can take the thin

00:19:57,480 --> 00:20:04,390
virtual machine disk image that we've

00:19:59,860 --> 00:20:07,870
got here and boot it up as an LXE image

00:20:04,390 --> 00:20:09,700
in live that again it requires a config

00:20:07,870 --> 00:20:11,230
file I've abbreviated here the config

00:20:09,700 --> 00:20:14,080
file because it's an XML file so it's

00:20:11,230 --> 00:20:16,390
quite long and there's two simple

00:20:14,080 --> 00:20:18,310
commands you can define it from XML and

00:20:16,390 --> 00:20:22,510
put it up and it will boot up that

00:20:18,310 --> 00:20:24,670
subdirectory as a full system image and

00:20:22,510 --> 00:20:26,770
you can give that to other people to

00:20:24,670 --> 00:20:31,870
manage and control using the normal

00:20:26,770 --> 00:20:33,460
liver and 32 other things I could do

00:20:31,870 --> 00:20:36,010
with this subdirectory that I've built

00:20:33,460 --> 00:20:37,780
I've built a template now in my

00:20:36,010 --> 00:20:39,820
subdirectory I could take that

00:20:37,780 --> 00:20:43,420
subdirectory and use tools like guest

00:20:39,820 --> 00:20:45,070
fish to packy jump that subdirectory

00:20:43,420 --> 00:20:47,440
that's just a normal unit subdirectory

00:20:45,070 --> 00:20:51,270
at this point guest fish is a tool that

00:20:47,440 --> 00:20:54,970
allows you to create file systems and

00:20:51,270 --> 00:20:57,280
partitions in a disk image for a full

00:20:54,970 --> 00:21:01,920
thick virtualization environment like

00:20:57,280 --> 00:21:04,600
VMware or qmu or uploading to Amazon so

00:21:01,920 --> 00:21:06,790
guest fish is a framework allows you to

00:21:04,600 --> 00:21:09,370
do that and it's got bindings for Python

00:21:06,790 --> 00:21:10,780
and other languages and shell scripting

00:21:09,370 --> 00:21:12,850
environment so you can actually more to

00:21:10,780 --> 00:21:16,870
make that as well and the end result of

00:21:12,850 --> 00:21:20,650
that would be a cue calfile or a VMDK or

00:21:16,870 --> 00:21:22,990
some other output virtualization disk

00:21:20,650 --> 00:21:25,480
image and then you have to install the

00:21:22,990 --> 00:21:27,280
boot loader like make it a ufi bootable

00:21:25,480 --> 00:21:28,450
system there are steps and I'm not going

00:21:27,280 --> 00:21:31,059
to go into for that

00:21:28,450 --> 00:21:35,020
and various things you can do to make it

00:21:31,059 --> 00:21:36,340
a little bit better for qmu and then

00:21:35,020 --> 00:21:39,250
there is end result of that is you've

00:21:36,340 --> 00:21:40,780
got a full workflow you can say at one

00:21:39,250 --> 00:21:43,299
end you've got a config file that gives

00:21:40,780 --> 00:21:45,010
you all the packages that I might want

00:21:43,299 --> 00:21:47,920
to install in my environment including

00:21:45,010 --> 00:21:50,710
all my custom tools and some default

00:21:47,920 --> 00:21:52,780
config for my custom tools and I can

00:21:50,710 --> 00:21:55,870
build a library of my templates that

00:21:52,780 --> 00:21:59,590
have my configuration in them using an

00:21:55,870 --> 00:22:02,290
automated pipeline that uploads the fire

00:21:59,590 --> 00:22:05,370
end result to a system image repository

00:22:02,290 --> 00:22:07,690
and I'll boot it up for me and do tests

00:22:05,370 --> 00:22:09,730
this is just the framework to allow you

00:22:07,690 --> 00:22:18,419
to do the understanding of how to do the

00:22:09,730 --> 00:22:18,419
kora that the building so any questions

00:22:24,320 --> 00:22:28,220
let's try once again with the throw mic

00:22:26,060 --> 00:22:31,970
any questions on has anyone done this

00:22:28,220 --> 00:22:46,270
before I actually built they would strap

00:22:31,970 --> 00:22:48,870
muscle things questions anyone know okay

00:22:46,270 --> 00:22:53,270
thank you very much

00:22:48,870 --> 00:22:53,270

YouTube URL: https://www.youtube.com/watch?v=PN1AcmMF3s8


