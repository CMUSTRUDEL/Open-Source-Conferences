Title: Scalable IT Workload Automation by Dieter Stubler
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Cloud, Containers, DevOps
Description: 
	15 March 2019 14:30, Lecture Theatre

Targeted audience are managers, system architects, system administrators and developers of Linux systems in small to enterprise sized environments. Networked Linux machines more and more take over tasks formerly executed by Mainframe systems. With those tasks also comes the workload which has to be managed and automated. New technologies like Business Intelligence, Data Warehousing and Big Data also require the execution of numerous programs interconnected by dependencies and synchronization needs. To manage those workloads, the use of Enterprise Job Scheduling or Workload Automation systems is self-evident in Mainframe environments for decades. In Linux environments this software class is not widely spread and automation is done using cron, built in scheduling functionality of systems like ETL tools and a bunch of scripts. This creates a numerous amount of problems regarding transparency, maintainability, stability and efficiency. One reason for this development was the lack of an Open Source Workload Automation System able to satisfy the demands. Since 2013 the schedulix Open Source Enterprise Job Scheduling System closes this gap and gives an extremely powerful and reliable tool into the hands of Linux system administrators and software developers. The other reason is the lack of knowledge on this software class and which huge benefits job scheduling systems can deliver. This talk is aimed to change this and to give the audience an introduction to what schedulix can do to establish an efficient, reliable and cost effective IT Workload Automation.
Captions: 
	00:00:00,000 --> 00:00:05,759
welcome to my talk I'm happy to see a

00:00:03,540 --> 00:00:09,809
few people here to be interested in

00:00:05,759 --> 00:00:13,340
workload automation before I start short

00:00:09,809 --> 00:00:16,320
question just raise your hand who did

00:00:13,340 --> 00:00:21,270
work with IT workload automation or

00:00:16,320 --> 00:00:25,410
enterprise shop scheduling before ok

00:00:21,270 --> 00:00:30,900
- that's good so there's two people here

00:00:25,410 --> 00:00:32,669
to learn something I hope ok about to

00:00:30,900 --> 00:00:36,360
talk up to speak about workload

00:00:32,669 --> 00:00:38,730
automation because thinking that right

00:00:36,360 --> 00:00:43,739
at the moment the demand is rising on

00:00:38,730 --> 00:00:46,950
that point and the intent of being here

00:00:43,739 --> 00:00:50,789
and talked to you about this topic is to

00:00:46,950 --> 00:00:53,399
motivate you to reflect on the way you

00:00:50,789 --> 00:00:57,930
are solving automation problems in your

00:00:53,399 --> 00:01:01,399
Linux environments and maybe to find out

00:00:57,930 --> 00:01:05,909
that there are better ways to do that ok

00:01:01,399 --> 00:01:09,090
first we will I will just do a short

00:01:05,909 --> 00:01:10,619
introduction upon me and my company my

00:01:09,090 --> 00:01:14,189
company it's called independent

00:01:10,619 --> 00:01:16,920
integrated technologies maybe I'll find

00:01:14,189 --> 00:01:20,460
some time to say something about the

00:01:16,920 --> 00:01:27,659
integrative in there because it's very

00:01:20,460 --> 00:01:31,560
important and yeah this is a quite small

00:01:27,659 --> 00:01:34,380
company there's a me and my co-founder

00:01:31,560 --> 00:01:36,930
of the company Inger he's a

00:01:34,380 --> 00:01:40,880
mathematician I'm a computer scientist

00:01:36,930 --> 00:01:43,590
so I'm not a business marketing guy and

00:01:40,880 --> 00:01:46,170
you will also see this talk will not be

00:01:43,590 --> 00:01:48,750
a very technical talk because it's not

00:01:46,170 --> 00:01:51,240
not possible to explain our system in a

00:01:48,750 --> 00:01:55,049
technical way in 20 minutes but it's

00:01:51,240 --> 00:02:00,299
more than a talk a general talk about

00:01:55,049 --> 00:02:02,790
the topic but I'm into nearly every line

00:02:00,299 --> 00:02:04,649
of code so if you're interested - - and

00:02:02,790 --> 00:02:07,770
have question how we did things just

00:02:04,649 --> 00:02:09,440
come to our booth and then answer every

00:02:07,770 --> 00:02:12,330
question

00:02:09,440 --> 00:02:17,220
just a little bit of history our company

00:02:12,330 --> 00:02:19,080
was founded about in 1997 as a

00:02:17,220 --> 00:02:21,780
consulting company for database project

00:02:19,080 --> 00:02:24,300
so we are did consulting jobs and data

00:02:21,780 --> 00:02:27,510
warehouse projects and telecom and

00:02:24,300 --> 00:02:32,010
banking area and during our work we

00:02:27,510 --> 00:02:34,080
found that doing automation of processes

00:02:32,010 --> 00:02:39,690
especially in data warehouses where it

00:02:34,080 --> 00:02:42,210
gets complicated is a big issue and to

00:02:39,690 --> 00:02:44,730
have a solid automation is important and

00:02:42,210 --> 00:02:48,180
that brought us to the idea to start

00:02:44,730 --> 00:02:50,100
developing and scheduling system to

00:02:48,180 --> 00:02:56,160
automate all those processes necessary

00:02:50,100 --> 00:02:59,630
to build up those systems and yeah so

00:02:56,160 --> 00:03:04,080
that was about 20 years ago and then

00:02:59,630 --> 00:03:06,180
german linux evangelist came to us and

00:03:04,080 --> 00:03:08,820
said what about bringing an open source

00:03:06,180 --> 00:03:10,890
release of your system because there's

00:03:08,820 --> 00:03:15,450
no open source enterprise job scheduling

00:03:10,890 --> 00:03:16,230
which is usable and we said okay let's

00:03:15,450 --> 00:03:19,650
do that

00:03:16,230 --> 00:03:23,070
and so we released scheduled --ax we

00:03:19,650 --> 00:03:24,930
will talk about that later as an open

00:03:23,070 --> 00:03:27,750
source enterprise scheduling system and

00:03:24,930 --> 00:03:30,510
i personally think it's yeah it's the

00:03:27,750 --> 00:03:32,550
best one available maybe the only one

00:03:30,510 --> 00:03:37,860
which is really capable to do a good

00:03:32,550 --> 00:03:41,489
automation okay so what is workload

00:03:37,860 --> 00:03:43,860
automation basically it C coordinated an

00:03:41,489 --> 00:03:45,840
automated execution of processes in an

00:03:43,860 --> 00:03:48,600
heterogeneous network so simple speaking

00:03:45,840 --> 00:03:51,560
just started starting of programs

00:03:48,600 --> 00:03:54,600
running programs monitoring programs and

00:03:51,560 --> 00:03:56,640
recording what's the result of those

00:03:54,600 --> 00:04:01,020
programs or whether they were successful

00:03:56,640 --> 00:04:02,400
or something else and around that

00:04:01,020 --> 00:04:04,620
there's a software class it's called

00:04:02,400 --> 00:04:10,170
enterprise shop scheduling systems or

00:04:04,620 --> 00:04:16,140
workload automation systems to support

00:04:10,170 --> 00:04:19,280
those automation tasks and processes so

00:04:16,140 --> 00:04:21,799
programs have to be started on demand or

00:04:19,280 --> 00:04:25,190
just timed like using

00:04:21,799 --> 00:04:27,590
cron or something or other events using

00:04:25,190 --> 00:04:31,490
dependencies or resource changes or

00:04:27,590 --> 00:04:33,860
other events in your IT which will just

00:04:31,490 --> 00:04:36,680
trigger the execution of programs or

00:04:33,860 --> 00:04:41,110
whole groups of programs or a whole

00:04:36,680 --> 00:04:43,819
batch chain or something like that and

00:04:41,110 --> 00:04:46,669
that's the first point where we will see

00:04:43,819 --> 00:04:49,900
that cron doesn't fulfill the needs

00:04:46,669 --> 00:04:54,979
because you need dependencies you cannot

00:04:49,900 --> 00:04:57,590
process or load the data before your FTP

00:04:54,979 --> 00:04:59,180
transfer of the source of the data has

00:04:57,590 --> 00:05:02,870
finished transferring the data to your

00:04:59,180 --> 00:05:05,500
system so you have change of chains of

00:05:02,870 --> 00:05:09,560
processing which have to be managed and

00:05:05,500 --> 00:05:12,110
maybe some of you already know that all

00:05:09,560 --> 00:05:14,479
this takes 15 minutes so let's schedule

00:05:12,110 --> 00:05:16,610
the next one just half an hour later

00:05:14,479 --> 00:05:19,789
then we all will be good and it will

00:05:16,610 --> 00:05:22,009
work most of the time but the first time

00:05:19,789 --> 00:05:24,770
it doesn't work it will maybe produce

00:05:22,009 --> 00:05:28,669
the catastrophic result and you lose a

00:05:24,770 --> 00:05:30,680
lot of time you have to have a look at

00:05:28,669 --> 00:05:33,830
resource usage you cannot just run a

00:05:30,680 --> 00:05:36,800
hundred processes at of something at

00:05:33,830 --> 00:05:40,849
once you cannot run on your database

00:05:36,800 --> 00:05:43,669
system 20 real huge queries producing

00:05:40,849 --> 00:05:48,349
loads of temp space usage and so on so

00:05:43,669 --> 00:05:52,520
you have to manage that to control the

00:05:48,349 --> 00:05:55,099
resource usage so you need to control

00:05:52,520 --> 00:05:58,400
the load and you maybe you need some

00:05:55,099 --> 00:06:01,310
load balancing to distribute the work to

00:05:58,400 --> 00:06:04,430
more than one machine to be to scale

00:06:01,310 --> 00:06:09,259
your system so a simple example if if

00:06:04,430 --> 00:06:13,490
you if you are rendering a CGI movie and

00:06:09,259 --> 00:06:15,919
you have to render a thousand frames you

00:06:13,490 --> 00:06:17,509
will need a system which is distributing

00:06:15,919 --> 00:06:20,360
the rendering process to your render

00:06:17,509 --> 00:06:24,800
form and do a workload balancing for

00:06:20,360 --> 00:06:28,180
each each frame and you need something

00:06:24,800 --> 00:06:31,940
which is which synchronizes your

00:06:28,180 --> 00:06:34,100
processes so things which are not really

00:06:31,940 --> 00:06:38,660
directly connect

00:06:34,100 --> 00:06:42,370
so you have some programs which creating

00:06:38,660 --> 00:06:45,950
reports and you have other programs or

00:06:42,370 --> 00:06:49,430
patches or scripts which are updating

00:06:45,950 --> 00:06:52,340
your tables so you shouldn't run a

00:06:49,430 --> 00:06:53,960
report during the updating of the table

00:06:52,340 --> 00:06:56,450
because your report might deliver

00:06:53,960 --> 00:07:00,830
inconsistent data so you have to

00:06:56,450 --> 00:07:03,350
synchronize that so let's look a little

00:07:00,830 --> 00:07:05,000
bit to the historical background this

00:07:03,350 --> 00:07:06,830
should be an image of a mainframe but

00:07:05,000 --> 00:07:09,470
it's blue genius a supercomputer sorry

00:07:06,830 --> 00:07:12,400
sir that but I want to talk a little bit

00:07:09,470 --> 00:07:14,390
about mainframes because that other

00:07:12,400 --> 00:07:18,470
mainframes and mid-range system where

00:07:14,390 --> 00:07:22,070
the root of IT before Windows and all

00:07:18,470 --> 00:07:26,120
those things and that was mainly batch

00:07:22,070 --> 00:07:27,980
processing systems and those systems job

00:07:26,120 --> 00:07:29,720
scheduling was just standard because

00:07:27,980 --> 00:07:33,530
they were just batch processing system

00:07:29,720 --> 00:07:35,420
so everyone had this so people which

00:07:33,530 --> 00:07:37,970
come in from those maintained a

00:07:35,420 --> 00:07:41,180
mainframe side of computing you don't

00:07:37,970 --> 00:07:44,270
have to explain then why you need a

00:07:41,180 --> 00:07:46,910
chopped scheduling system there are

00:07:44,270 --> 00:07:50,660
adaptions of such systems for Linux and

00:07:46,910 --> 00:07:53,020
Windows and UNIX environments but they

00:07:50,660 --> 00:07:54,500
are not widely accepted and that sort

00:07:53,020 --> 00:07:57,890
too easy

00:07:54,500 --> 00:08:00,530
reasons those systems were adapted from

00:07:57,890 --> 00:08:03,770
the mainframe philosophy so they are

00:08:00,530 --> 00:08:08,780
quite inflexible they're bureaucratic

00:08:03,770 --> 00:08:11,000
they are mostly railway schedule based

00:08:08,780 --> 00:08:14,690
systems which work fine if you have

00:08:11,000 --> 00:08:17,660
everyday the same load and you're quite

00:08:14,690 --> 00:08:20,510
safe that your processes will succeed so

00:08:17,660 --> 00:08:21,890
it's if it's all working smoothly you

00:08:20,510 --> 00:08:23,570
can live with that and you have a

00:08:21,890 --> 00:08:27,380
railway schedule and it will not break

00:08:23,570 --> 00:08:29,510
but in today's complex environments you

00:08:27,380 --> 00:08:32,870
have a lot of failures because of

00:08:29,510 --> 00:08:36,890
snapshot rolled in Oracle or out of ten

00:08:32,870 --> 00:08:39,260
space or file system full of what else

00:08:36,890 --> 00:08:41,210
so if you have a huge environment you

00:08:39,260 --> 00:08:44,030
will get very very quickly into

00:08:41,210 --> 00:08:46,279
different problems every day and you

00:08:44,030 --> 00:08:48,230
know you need a really flexible system

00:08:46,279 --> 00:08:51,170
which can deal with that and railway

00:08:48,230 --> 00:08:54,639
based schedule systems which have a

00:08:51,170 --> 00:08:59,290
daily planned planning everything at

00:08:54,639 --> 00:09:06,139
timing level are not able to do that

00:08:59,290 --> 00:09:07,639
on the other side we as a Linux users we

00:09:06,139 --> 00:09:11,499
are coming from a world where we have a

00:09:07,639 --> 00:09:14,240
very narrow view more interactive view

00:09:11,499 --> 00:09:17,089
development systems are just interactive

00:09:14,240 --> 00:09:22,670
systems and may be standalone server

00:09:17,089 --> 00:09:26,089
systems and in this systems scheduling

00:09:22,670 --> 00:09:28,970
is not really a topic because you don't

00:09:26,089 --> 00:09:31,579
have much better processing and it's

00:09:28,970 --> 00:09:33,319
even if you and that's also a problem I

00:09:31,579 --> 00:09:36,589
don't want to go into that because in a

00:09:33,319 --> 00:09:40,009
half an hour just about that is the

00:09:36,589 --> 00:09:42,199
thing that today's developers I think

00:09:40,009 --> 00:09:44,209
they're just looking at saying that they

00:09:42,199 --> 00:09:46,550
are building a software deployment

00:09:44,209 --> 00:09:48,230
system so they just look at that the

00:09:46,550 --> 00:09:50,420
other ones are building database systems

00:09:48,230 --> 00:09:52,309
they just look at that and they forget

00:09:50,420 --> 00:09:53,660
that if we want to make Linux great in

00:09:52,309 --> 00:09:56,809
corporate environments we have to

00:09:53,660 --> 00:09:59,420
integrate them all and to integrate them

00:09:56,809 --> 00:10:03,110
they have to play together and to play

00:09:59,420 --> 00:10:04,850
together you have to schedule them to

00:10:03,110 --> 00:10:07,639
make sure that the backup system doesn't

00:10:04,850 --> 00:10:10,519
start back up when the data the heavy

00:10:07,639 --> 00:10:12,980
data processing of your ETL loads is

00:10:10,519 --> 00:10:16,040
still running you shouldn't because it

00:10:12,980 --> 00:10:20,600
would waste a lot of resources and might

00:10:16,040 --> 00:10:24,800
cause problems ok and that for that most

00:10:20,600 --> 00:10:27,920
of the Linux users are not know anything

00:10:24,800 --> 00:10:31,370
about this kind of software and I also

00:10:27,920 --> 00:10:36,769
know don't know what this kind of

00:10:31,370 --> 00:10:39,170
software can do so why what has changed

00:10:36,769 --> 00:10:43,550
that we think that this is more

00:10:39,170 --> 00:10:45,379
important today than a few years ago the

00:10:43,550 --> 00:10:47,620
first thing is Linux systems are no

00:10:45,379 --> 00:10:51,620
longer islands in corporate IT systems

00:10:47,620 --> 00:10:54,709
the success of Linux came when yeah

00:10:51,620 --> 00:10:56,080
let's exchange those Microsoft file

00:10:54,709 --> 00:10:59,170
server with those nukes files

00:10:56,080 --> 00:11:01,750
or just use a Linux system for as a mail

00:10:59,170 --> 00:11:04,570
server or use a Linux system as a web

00:11:01,750 --> 00:11:06,880
server but always just island thinking

00:11:04,570 --> 00:11:10,420
so just have one system it has one

00:11:06,880 --> 00:11:13,810
function and it will do the job but if

00:11:10,420 --> 00:11:18,010
you think upon workloads from mainframe

00:11:13,810 --> 00:11:20,829
systems they will will get more and more

00:11:18,010 --> 00:11:24,279
transferred to our decentralized Linux

00:11:20,829 --> 00:11:28,120
computers more and more core processing

00:11:24,279 --> 00:11:30,670
of banks stay and processing of

00:11:28,120 --> 00:11:32,950
financial systems and big data

00:11:30,670 --> 00:11:35,890
warehousing and so is more and more

00:11:32,950 --> 00:11:38,560
moving away from mainframes to Linux

00:11:35,890 --> 00:11:40,660
systems and so you have get more and

00:11:38,560 --> 00:11:43,029
more interconnections you get more and

00:11:40,660 --> 00:11:46,180
more processes to automate there's more

00:11:43,029 --> 00:11:48,190
and more virtual or real machines to

00:11:46,180 --> 00:11:52,000
handle it's more and more processes to

00:11:48,190 --> 00:11:53,950
automate in other systems and we've got

00:11:52,000 --> 00:11:56,670
new technologies like yeah data

00:11:53,950 --> 00:12:00,010
warehousing Big Data artificial elegance

00:11:56,670 --> 00:12:04,510
intelligence which have to move loads of

00:12:00,010 --> 00:12:08,649
data around and - professing change - to

00:12:04,510 --> 00:12:12,399
get an result those systems can work on

00:12:08,649 --> 00:12:16,000
at the end so there is a raising demand

00:12:12,399 --> 00:12:19,570
for a solid IT workload automation we

00:12:16,000 --> 00:12:25,630
think in the Linux world but there is

00:12:19,570 --> 00:12:27,839
none so what do you do yeah you use the

00:12:25,630 --> 00:12:33,510
scripted or to make not approach so you

00:12:27,839 --> 00:12:37,060
use cron and the huge number of

00:12:33,510 --> 00:12:39,220
scheduling mechanism built-in software

00:12:37,060 --> 00:12:41,620
systems a backup system has an own

00:12:39,220 --> 00:12:46,930
scheduling system your ETL system has an

00:12:41,620 --> 00:12:50,339
own automation system your software into

00:12:46,930 --> 00:12:53,500
DevOps integration systems has an own

00:12:50,339 --> 00:12:58,470
propriety automation system to do that

00:12:53,500 --> 00:13:01,360
so you end up with many different

00:12:58,470 --> 00:13:04,510
automation systems and each one is just

00:13:01,360 --> 00:13:09,280
built to do this task it was built for

00:13:04,510 --> 00:13:12,420
and no one has built a scheduling system

00:13:09,280 --> 00:13:18,340
with the idea to be able to control

00:13:12,420 --> 00:13:22,720
anything yeah okay so I have to really

00:13:18,340 --> 00:13:28,150
speed up sorry this all will be do

00:13:22,720 --> 00:13:32,410
together by a lot of scripting and this

00:13:28,150 --> 00:13:34,950
has consequences and drawbacks highly

00:13:32,410 --> 00:13:38,410
relevant costs and maintenance efforts

00:13:34,950 --> 00:13:41,290
lack of documentation was already what

00:13:38,410 --> 00:13:43,150
we are talking about before and we have

00:13:41,290 --> 00:13:45,850
a complexity which is growing

00:13:43,150 --> 00:13:47,830
exponentially because the systems will

00:13:45,850 --> 00:13:49,960
rise in which every new process to

00:13:47,830 --> 00:13:51,910
integrate it gets future and there are

00:13:49,960 --> 00:13:55,450
more interconnections to take care of

00:13:51,910 --> 00:13:58,180
and so scripted automation just doesn't

00:13:55,450 --> 00:14:02,230
scale it if it reaches a certain point

00:13:58,180 --> 00:14:05,100
of complexity you're in a quite big

00:14:02,230 --> 00:14:10,030
danger that it will just break down and

00:14:05,100 --> 00:14:15,880
we have a small story about that our mr.

00:14:10,030 --> 00:14:19,600
or mrs. Nichols Oh looks like a mr. okay

00:14:15,880 --> 00:14:22,830
he has to manage his IT and he has a

00:14:19,600 --> 00:14:25,960
workload so our blues artists are just

00:14:22,830 --> 00:14:28,660
processes which have to be automated to

00:14:25,960 --> 00:14:31,120
run every day to transfer data to create

00:14:28,660 --> 00:14:32,020
reports to do data transformations to

00:14:31,120 --> 00:14:35,700
consolidation

00:14:32,020 --> 00:14:39,339
data warehousing and loads of things and

00:14:35,700 --> 00:14:40,960
yeah quite easily in you have in your

00:14:39,339 --> 00:14:43,750
company about a hundred thousands of

00:14:40,960 --> 00:14:47,140
those blue dots to have to be or much

00:14:43,750 --> 00:14:50,589
more to be executed every day so what is

00:14:47,140 --> 00:14:53,080
he doing yeah he uses Truong and

00:14:50,589 --> 00:14:55,750
building schedulers and a lot of

00:14:53,080 --> 00:15:00,010
scripting a metadata generated control

00:14:55,750 --> 00:15:03,400
data so you get a scripted automation

00:15:00,010 --> 00:15:08,010
which is woven into every production

00:15:03,400 --> 00:15:11,400
system and it's constantly growing and

00:15:08,010 --> 00:15:15,910
for the same problem you've end up with

00:15:11,400 --> 00:15:16,960
ten different solutions and it gets more

00:15:15,910 --> 00:15:19,720
and more complicated

00:15:16,960 --> 00:15:24,150
the bigger the load workload

00:15:19,720 --> 00:15:29,020
we'll become so what's his everyday

00:15:24,150 --> 00:15:30,940
problems report is out of date so he has

00:15:29,020 --> 00:15:32,830
to t control all his automation things

00:15:30,940 --> 00:15:34,900
in log files to find out what's going

00:15:32,830 --> 00:15:38,050
wrong what was the cause of the problem

00:15:34,900 --> 00:15:40,240
and at the end if at the point where he

00:15:38,050 --> 00:15:43,140
realized what the problem was he has to

00:15:40,240 --> 00:15:47,080
fix a problem but then he has to fix

00:15:43,140 --> 00:15:49,870
everything which was done after that so

00:15:47,080 --> 00:15:50,920
he has to repair his system and he has

00:15:49,870 --> 00:15:54,100
to do it by hand

00:15:50,920 --> 00:15:56,910
changing groups and commenting out lines

00:15:54,100 --> 00:16:00,190
of script and rerunning script and

00:15:56,910 --> 00:16:03,310
really trouble and in addition he has to

00:16:00,190 --> 00:16:05,500
integrate some ETL process which was

00:16:03,310 --> 00:16:09,220
newly developed here again he has to

00:16:05,500 --> 00:16:12,000
find remember and and review how the

00:16:09,220 --> 00:16:15,820
data warehouse is automated and again

00:16:12,000 --> 00:16:19,270
editing scripts and doing programming to

00:16:15,820 --> 00:16:21,430
to get everything right and because it's

00:16:19,270 --> 00:16:23,980
not his best day he gave her the crash

00:16:21,430 --> 00:16:27,640
database system causing problems and

00:16:23,980 --> 00:16:30,850
again he has to find out which programs

00:16:27,640 --> 00:16:33,070
failed and how to restart that and what

00:16:30,850 --> 00:16:36,700
can I restart without causing troubles

00:16:33,070 --> 00:16:39,910
on other points in nights my company so

00:16:36,700 --> 00:16:44,070
um you just got a lot of problems

00:16:39,910 --> 00:16:49,750
because he is in a time stress he has to

00:16:44,070 --> 00:16:53,230
fix things and to do that he needs all

00:16:49,750 --> 00:16:56,860
those deep knowledge upon this I call

00:16:53,230 --> 00:16:59,950
this red things automation hat he should

00:16:56,860 --> 00:17:04,900
not let to hold it but it doesn't fall

00:16:59,950 --> 00:17:07,060
off and that's a better way to do it so

00:17:04,900 --> 00:17:09,130
if you use a enterprise shop scheduling

00:17:07,060 --> 00:17:13,120
system with schedule iegs you've got a

00:17:09,130 --> 00:17:16,089
central server you model your jobs your

00:17:13,120 --> 00:17:18,400
processes to execute in the repository

00:17:16,089 --> 00:17:21,160
of the server you connect them you build

00:17:18,400 --> 00:17:22,959
up all dependencies all resource usage

00:17:21,160 --> 00:17:24,910
things and you have a central system

00:17:22,959 --> 00:17:28,900
controlling everything you get

00:17:24,910 --> 00:17:31,929
completely rid of those scripted

00:17:28,900 --> 00:17:32,860
automation hat you don't have local

00:17:31,929 --> 00:17:35,270
scripts

00:17:32,860 --> 00:17:37,370
interconnecting processes which is other

00:17:35,270 --> 00:17:39,560
and controlling the correct order of

00:17:37,370 --> 00:17:43,160
execution that's done by a central

00:17:39,560 --> 00:17:44,990
server you know there is an agent but

00:17:43,160 --> 00:17:47,510
that's a standard software installed at

00:17:44,990 --> 00:17:51,860
the remote systems which is executing

00:17:47,510 --> 00:17:55,210
the things as central servers thinking

00:17:51,860 --> 00:17:58,040
to execute but what do you get

00:17:55,210 --> 00:18:01,490
you have central monitoring operations

00:17:58,040 --> 00:18:04,490
you go into your office look at start

00:18:01,490 --> 00:18:07,250
your browser and check out the process

00:18:04,490 --> 00:18:08,660
state of your system in minutes so you

00:18:07,250 --> 00:18:10,730
open it everything is green you know

00:18:08,660 --> 00:18:12,260
it's fine if something failed you see

00:18:10,730 --> 00:18:14,210
over there something red line you go

00:18:12,260 --> 00:18:17,150
there look at the lock side from the

00:18:14,210 --> 00:18:19,100
from the web interface and say okay it

00:18:17,150 --> 00:18:20,900
was a snapshot to all just rerun and

00:18:19,100 --> 00:18:22,850
everything just continues you don't have

00:18:20,900 --> 00:18:24,950
to remote login and edit scripts and

00:18:22,850 --> 00:18:27,830
doing scripting and programming to solve

00:18:24,950 --> 00:18:30,590
the problem so you've got easy failure

00:18:27,830 --> 00:18:33,440
tracking you've got a very efficient

00:18:30,590 --> 00:18:37,360
restarting and continuing of batches and

00:18:33,440 --> 00:18:39,620
backlog handling after some problems

00:18:37,360 --> 00:18:42,860
changing and adding workloads

00:18:39,620 --> 00:18:47,710
is just a few clicks away if you think

00:18:42,860 --> 00:18:50,750
you have a script who is executing three

00:18:47,710 --> 00:18:53,480
subscripts so three commands in all in

00:18:50,750 --> 00:18:55,850
in row and someone tells you please

00:18:53,480 --> 00:18:58,490
paralyze it let's do a concurrent

00:18:55,850 --> 00:19:00,230
execution so you have to do start them

00:18:58,490 --> 00:19:05,270
in background in to the signal handling

00:19:00,230 --> 00:19:06,590
and traps in in shell and so taking if

00:19:05,270 --> 00:19:10,730
you're really good it takes you an hour

00:19:06,590 --> 00:19:13,610
but you have to be very special to do

00:19:10,730 --> 00:19:16,160
that to have a production proof and

00:19:13,610 --> 00:19:20,690
tested thing after an hour and schedule

00:19:16,160 --> 00:19:22,970
extra takes minutes to do that and so

00:19:20,690 --> 00:19:25,880
you've got drastically removed

00:19:22,970 --> 00:19:28,910
development costs because you don't have

00:19:25,880 --> 00:19:32,150
to script automation and you don't have

00:19:28,910 --> 00:19:36,470
to deploy all your automation scripts

00:19:32,150 --> 00:19:39,440
all around your system so at the end

00:19:36,470 --> 00:19:43,040
your system it's much more stable and it

00:19:39,440 --> 00:19:45,500
will be also more reliable because for

00:19:43,040 --> 00:19:49,039
example if if you find out that

00:19:45,500 --> 00:19:54,799
every now and then a job fails because

00:19:49,039 --> 00:19:56,270
of a file system full intent space and

00:19:54,799 --> 00:19:58,370
you find out that oh there's another

00:19:56,270 --> 00:20:00,710
process running at the same time and

00:19:58,370 --> 00:20:03,530
they flash it because they both need too

00:20:00,710 --> 00:20:05,320
much in space if you have a scripted

00:20:03,530 --> 00:20:08,690
automation it may take you hours to

00:20:05,320 --> 00:20:11,960
solve that problem within scheduling so

00:20:08,690 --> 00:20:13,909
we'll just create a resource and say to

00:20:11,960 --> 00:20:16,309
those things that they should

00:20:13,909 --> 00:20:18,320
synchronize on this resource and system

00:20:16,309 --> 00:20:21,110
we'll just make sure that they will not

00:20:18,320 --> 00:20:24,620
both run at the same time things like

00:20:21,110 --> 00:20:29,270
that um and anymore I could talk about

00:20:24,620 --> 00:20:33,350
us about that okay so schedule is open

00:20:29,270 --> 00:20:36,429
source is free to use and it can be used

00:20:33,350 --> 00:20:40,510
from the beginning with minimal costs

00:20:36,429 --> 00:20:45,049
it's always better than scripting any

00:20:40,510 --> 00:20:49,280
automation hat to say it's easy it's

00:20:45,049 --> 00:20:51,559
just let's do it quick and dirty and it

00:20:49,280 --> 00:20:56,150
will always will lead to problems later

00:20:51,559 --> 00:20:59,690
so it's a short step of installation of

00:20:56,150 --> 00:21:01,730
that system and a few days of training

00:20:59,690 --> 00:21:04,970
and reading but then you have a system

00:21:01,730 --> 00:21:08,090
which will guide you even if your system

00:21:04,970 --> 00:21:13,250
draws too many hundred thousands of

00:21:08,090 --> 00:21:15,380
processes to control and if if your

00:21:13,250 --> 00:21:19,460
project grows schedule leaks grows with

00:21:15,380 --> 00:21:22,039
it we have done benchmarking telling us

00:21:19,460 --> 00:21:25,580
on the smallest IBM power8 machine which

00:21:22,039 --> 00:21:28,400
exists without big tuning we simulated a

00:21:25,580 --> 00:21:32,390
thousand agents and controlled more than

00:21:28,400 --> 00:21:34,450
1 million processors in fact we had high

00:21:32,390 --> 00:21:36,860
marks of three or four millions but a

00:21:34,450 --> 00:21:39,770
defensive and saying more than 1 million

00:21:36,860 --> 00:21:42,320
but with a queuing system with because

00:21:39,770 --> 00:21:45,380
of the limit is just this guy off the

00:21:42,320 --> 00:21:49,909
underlying database system it can be

00:21:45,380 --> 00:21:53,030
stressed much further real load is our

00:21:49,909 --> 00:21:54,590
we have a lot of customer in Germany

00:21:53,030 --> 00:21:57,740
which does this data warehouse

00:21:54,590 --> 00:21:58,700
automation executing about 100,000

00:21:57,740 --> 00:22:00,650
process

00:21:58,700 --> 00:22:04,300
program every day to catch his daily

00:22:00,650 --> 00:22:10,460
daily data warehouse processing done and

00:22:04,300 --> 00:22:12,140
if you need higher functionality and if

00:22:10,460 --> 00:22:13,700
you're interested I can explain where

00:22:12,140 --> 00:22:15,890
the differences are schedule leaks is

00:22:13,700 --> 00:22:17,900
full-fledged in doing scheduling in

00:22:15,890 --> 00:22:20,870
doing scheduling it's not like a teaser

00:22:17,900 --> 00:22:23,180
where you start with it and then one day

00:22:20,870 --> 00:22:27,020
later you find out you have to go to a

00:22:23,180 --> 00:22:29,750
professional it's not that way so we'll

00:22:27,020 --> 00:22:33,710
just take a minute and then I'm done so

00:22:29,750 --> 00:22:37,880
it's open source and it's free it's 20

00:22:33,710 --> 00:22:40,700
years technology proven and reliability

00:22:37,880 --> 00:22:43,100
and customer satisfaction we haven't

00:22:40,700 --> 00:22:46,730
lost one customer in those 20 years who

00:22:43,100 --> 00:22:48,290
decided to use it it's always on the

00:22:46,730 --> 00:22:51,860
same page level than our commercial

00:22:48,290 --> 00:22:55,730
system there's a Google forum where you

00:22:51,860 --> 00:22:58,370
can get help and our mission is that we

00:22:55,730 --> 00:23:00,920
should implement schedule X as a

00:22:58,370 --> 00:23:02,960
standard thing like apache for web

00:23:00,920 --> 00:23:08,210
services schedule it should be the

00:23:02,960 --> 00:23:11,480
platform for automation so last thing

00:23:08,210 --> 00:23:14,990
just click it through here with it at

00:23:11,480 --> 00:23:18,610
our booth get information have a look at

00:23:14,990 --> 00:23:20,870
the website watch a few tutorial videos

00:23:18,610 --> 00:23:23,600
there are white papers with a lot of

00:23:20,870 --> 00:23:27,520
information on that you can contact us

00:23:23,600 --> 00:23:30,170
you can install it easily without cost

00:23:27,520 --> 00:23:33,770
register to a Google group to get help

00:23:30,170 --> 00:23:36,080
and just join the community and come to

00:23:33,770 --> 00:23:38,740
me at my booth if you have any questions

00:23:36,080 --> 00:23:44,060
that thank you very much

00:23:38,740 --> 00:23:46,670
whew I hope it was too fast at the end

00:23:44,060 --> 00:23:52,450
but landing right on the 25 minutes

00:23:46,670 --> 00:23:52,450
that's very impressive so questions

00:23:59,850 --> 00:24:11,049
so a is is scheduled excel on any Linux

00:24:07,659 --> 00:24:13,989
distribution and do you know of any

00:24:11,049 --> 00:24:16,980
interesting free software projects which

00:24:13,989 --> 00:24:19,119
are using scheduled exam thinking maybe

00:24:16,980 --> 00:24:25,929
projects like get lab it would be

00:24:19,119 --> 00:24:29,649
interesting ok we have RPM packages for

00:24:25,929 --> 00:24:32,559
Red Hat and centers we hadn't got the

00:24:29,649 --> 00:24:35,200
time to build other packaging but

00:24:32,559 --> 00:24:37,779
there's a let's say raw installation

00:24:35,200 --> 00:24:40,419
guide so you can download the software

00:24:37,779 --> 00:24:42,999
and compile it on any Linux system and

00:24:40,419 --> 00:24:45,159
follow this installation guide to to

00:24:42,999 --> 00:24:47,590
install it maybe if you know what you're

00:24:45,159 --> 00:24:51,279
doing takes you an hour or so but that's

00:24:47,590 --> 00:24:52,710
not so so much automated thing yet yeah

00:24:51,279 --> 00:24:55,840
we're still working on that

00:24:52,710 --> 00:24:56,769
let's take take that offline keep the

00:24:55,840 --> 00:24:58,570
questions quick please

00:24:56,769 --> 00:25:04,840
there was another one up there some I

00:24:58,570 --> 00:25:08,710
think no ok so we can't yep can you

00:25:04,840 --> 00:25:10,659
follow the modern DevOps process and

00:25:08,710 --> 00:25:12,429
configure it using code or does it

00:25:10,659 --> 00:25:15,999
configure using some kind of wave

00:25:12,429 --> 00:25:20,970
interface I'm not really in understand

00:25:15,999 --> 00:25:23,679
what you I can expand on that later yeah

00:25:20,970 --> 00:25:30,539
all right I think I'll cover there thank

00:25:23,679 --> 00:25:30,539

YouTube URL: https://www.youtube.com/watch?v=UZY-FmGPeM8


