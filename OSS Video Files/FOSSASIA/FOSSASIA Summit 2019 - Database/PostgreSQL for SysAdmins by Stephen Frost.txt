Title: PostgreSQL for SysAdmins by Stephen Frost
Publication date: 2019-03-22
Playlist: FOSSASIA Summit 2019 - Database
Description: 
	17 March 2019 14:30, Training Room 2-1

You're a SysAdmin, SRE, or anyone who needs to understand what running PostgreSQL involves from a system level. We're going to cover:  

OS-level configurations to support PG  
Tuning PG for your system  
Roles and Managing Authentication and integrating PG w/ enterprise   
Authentication systems (Kerberos, Certificates, LDAP, RADIUS, etc..)  
"Dos" and "Don'ts" (should you give non-SysAdmins "superuser" access...?) 
Clusters, Databases, and Schemas   - Connections and pooling
Captions: 
	00:00:02,689 --> 00:00:06,509
alright so I'm gonna cover this slide

00:00:05,220 --> 00:00:07,890
again but I've gotta make some

00:00:06,509 --> 00:00:11,010
corrections to it because apparently I'm

00:00:07,890 --> 00:00:14,490
wrong about about this slide which is

00:00:11,010 --> 00:00:16,830
great so I'm the CTO at crunchy data I'm

00:00:14,490 --> 00:00:21,470
a committer major contributor royal

00:00:16,830 --> 00:00:23,930
security was 95 common recruit is was 84

00:00:21,470 --> 00:00:27,060
but the role system was actually 8 1

00:00:23,930 --> 00:00:30,510
which Chris actually pointed out to me

00:00:27,060 --> 00:00:32,750
and I appeared on my other slide next

00:00:30,510 --> 00:00:35,070
but apparently not this one so oh well

00:00:32,750 --> 00:00:39,030
but yeah I've been hacking on host Chris

00:00:35,070 --> 00:00:43,530
for 15 years something like that for a

00:00:39,030 --> 00:00:45,870
long long long time so as we go through

00:00:43,530 --> 00:00:48,149
this feel free to reach out to me with

00:00:45,870 --> 00:00:51,300
with any questions or whatever I'm happy

00:00:48,149 --> 00:00:53,250
to take questions as we go but basically

00:00:51,300 --> 00:00:55,289
I'm just going to kind of run down kind

00:00:53,250 --> 00:00:59,640
of Postgres from a Systems Administrator

00:00:55,289 --> 00:01:01,140
kind of in a few point right so first

00:00:59,640 --> 00:01:03,449
off let's talk about some terms

00:01:01,140 --> 00:01:06,270
so in Postgres you have what are called

00:01:03,449 --> 00:01:08,430
clusters or instances right we kind of

00:01:06,270 --> 00:01:11,250
use them interchangeably in the post

00:01:08,430 --> 00:01:14,520
presence ecosystem even though they

00:01:11,250 --> 00:01:15,840
aren't really that in other systems but

00:01:14,520 --> 00:01:19,040
what we mean by that is it's one

00:01:15,840 --> 00:01:21,150
post-credit server listening on one port

00:01:19,040 --> 00:01:23,159
which by the way is a post as

00:01:21,150 --> 00:01:24,900
limitations kind of noxious I wish we

00:01:23,159 --> 00:01:27,299
would allow it to listen a multiple port

00:01:24,900 --> 00:01:29,970
we don't you can listen on multiple

00:01:27,299 --> 00:01:33,689
addresses though it's one set of data

00:01:29,970 --> 00:01:36,990
files including all table spaces and one

00:01:33,689 --> 00:01:39,900
stream of red water right so what this

00:01:36,990 --> 00:01:41,729
means is that if there's a crash we have

00:01:39,900 --> 00:01:44,070
one set of right ahead log to replay

00:01:41,729 --> 00:01:47,549
across all of the databases that were

00:01:44,070 --> 00:01:48,869
included in that cluster there are some

00:01:47,549 --> 00:01:50,970
different things that you can do at a

00:01:48,869 --> 00:01:51,330
cluster level there's just basic initial

00:01:50,970 --> 00:01:53,400
was a

00:01:51,330 --> 00:01:55,680
that's just creating it to begin with

00:01:53,400 --> 00:01:57,240
starting and stopping the cluster right

00:01:55,680 --> 00:01:58,950
that happens on a cluster level you

00:01:57,240 --> 00:02:00,330
can't like start or stop individual

00:01:58,950 --> 00:02:03,140
databases it's the whole thing or

00:02:00,330 --> 00:02:05,220
nothing the file level backup tools

00:02:03,140 --> 00:02:07,560
things like back press which I'll talk

00:02:05,220 --> 00:02:10,220
about later operate on a cluster level

00:02:07,560 --> 00:02:13,620
because they involve the right animal

00:02:10,220 --> 00:02:15,540
you have to save the right ahead log in

00:02:13,620 --> 00:02:17,400
order to have a consistent backup and

00:02:15,540 --> 00:02:19,320
because the redhead log operates at a

00:02:17,400 --> 00:02:21,180
cluster level it means that all your

00:02:19,320 --> 00:02:23,040
file backups end up being at a cluster

00:02:21,180 --> 00:02:25,470
level as well and the same thing goes

00:02:23,040 --> 00:02:27,150
for the disputing application so buskers

00:02:25,470 --> 00:02:29,490
has physical streaming replication

00:02:27,150 --> 00:02:31,230
support and that's done through the

00:02:29,490 --> 00:02:34,220
right hand log and what that means is

00:02:31,230 --> 00:02:36,780
that the read ahead log arrows that the

00:02:34,220 --> 00:02:39,780
system that you're doing the replication

00:02:36,780 --> 00:02:42,030
with has to be a complete copy of the

00:02:39,780 --> 00:02:44,580
entire cluster right we don't have the

00:02:42,030 --> 00:02:47,970
ability to do on a physical level like

00:02:44,580 --> 00:02:50,520
streaming application for individual

00:02:47,970 --> 00:02:52,560
databases that is something you can do

00:02:50,520 --> 00:02:54,750
with the logical replication that both

00:02:52,560 --> 00:02:56,820
Fred supports the post grants does have

00:02:54,750 --> 00:03:00,209
logical replications for today that you

00:02:56,820 --> 00:03:04,170
can replicate individual tables even or

00:03:00,209 --> 00:03:06,300
individual schemas you then have sets of

00:03:04,170 --> 00:03:09,540
objects that are defined at a cluster

00:03:06,300 --> 00:03:11,970
level tablespaces is a big one and then

00:03:09,540 --> 00:03:14,190
users and roles as well so what that

00:03:11,970 --> 00:03:15,660
means is that you have even though you

00:03:14,190 --> 00:03:17,430
might have multiple databases inside a

00:03:15,660 --> 00:03:21,269
post Chris they all have to have

00:03:17,430 --> 00:03:23,190
ownership of you know from the roles

00:03:21,269 --> 00:03:26,280
that exist in system all the roles are

00:03:23,190 --> 00:03:27,660
defined at a cluster level table spaces

00:03:26,280 --> 00:03:28,769
because they're defined in a cluster

00:03:27,660 --> 00:03:30,810
level mean that they can actually have

00:03:28,769 --> 00:03:33,930
objects from multiple independent

00:03:30,810 --> 00:03:35,120
databases in them which can be handy in

00:03:33,930 --> 00:03:36,739
time but can also be

00:03:35,120 --> 00:03:38,450
annoying because if you want to drop a

00:03:36,739 --> 00:03:40,640
tablespace you have to connect every

00:03:38,450 --> 00:03:42,680
database and make sure that that

00:03:40,640 --> 00:03:45,230
database doesn't have any objects in

00:03:42,680 --> 00:03:47,360
that tablespace if they do Postgres will

00:03:45,230 --> 00:03:48,920
complaining we won't make you drop it if

00:03:47,360 --> 00:03:50,060
there's any not any objects in there but

00:03:48,920 --> 00:03:52,970
it's a little bit of noxious having to

00:03:50,060 --> 00:03:55,099
do that what of this kind of boils down

00:03:52,970 --> 00:03:58,190
to is that I tend to recommend to people

00:03:55,099 --> 00:04:01,340
and gives me to hear your comments on

00:03:58,190 --> 00:04:03,440
this but I didn't tell people like treat

00:04:01,340 --> 00:04:06,860
post-grad says almost as if databases

00:04:03,440 --> 00:04:09,650
didn't exist right one cluster is like

00:04:06,860 --> 00:04:12,019
one database right I would tend to argue

00:04:09,650 --> 00:04:14,510
having multiple databases underneath of

00:04:12,019 --> 00:04:16,760
a single cluster is not something that I

00:04:14,510 --> 00:04:18,380
found typically end up being a good

00:04:16,760 --> 00:04:20,269
solution because you can't do things

00:04:18,380 --> 00:04:22,220
like joint across tables and different

00:04:20,269 --> 00:04:23,960
databases unless you use like the post

00:04:22,220 --> 00:04:26,990
because have two w or something and then

00:04:23,960 --> 00:04:28,250
the performance just sucks so I tend to

00:04:26,990 --> 00:04:30,350
encourage people to like be thinking

00:04:28,250 --> 00:04:33,320
about things in terms of databases and

00:04:30,350 --> 00:04:35,570
and having one or just a few databases

00:04:33,320 --> 00:04:40,030
on an individual cluster that way you

00:04:35,570 --> 00:04:44,270
can do replication right you can do

00:04:40,030 --> 00:04:46,280
things like file level backup and

00:04:44,270 --> 00:04:48,380
restore so you can restore just that one

00:04:46,280 --> 00:04:50,300
cluster right you don't have to end up

00:04:48,380 --> 00:04:51,770
doing a restore that restores you know

00:04:50,300 --> 00:04:54,680
50 different databases that you've got

00:04:51,770 --> 00:04:57,620
running the one big downside is that

00:04:54,680 --> 00:05:00,289
every individual cluster chews up shared

00:04:57,620 --> 00:05:02,419
buffers right it allocates however one

00:05:00,289 --> 00:05:05,449
shared buffers you set for that database

00:05:02,419 --> 00:05:07,130
or for that cluster right so that is one

00:05:05,449 --> 00:05:10,520
of the downsides as a trade-off if

00:05:07,130 --> 00:05:13,099
you've got a server that isn't hit very

00:05:10,520 --> 00:05:14,479
hard and you want to have one set of

00:05:13,099 --> 00:05:16,580
shared buffers and you don't care that

00:05:14,479 --> 00:05:19,400
stuff sometimes has to come off of disk

00:05:16,580 --> 00:05:21,500
because it's been pushed out then maybe

00:05:19,400 --> 00:05:23,780
you okay fine right I can see argue it's

00:05:21,500 --> 00:05:25,430
there where where maybe having them on

00:05:23,780 --> 00:05:25,930
the same databases or on the same

00:05:25,430 --> 00:05:29,530
clusters

00:05:25,930 --> 00:05:31,600
okay but a lot of times it just makes as

00:05:29,530 --> 00:05:33,820
much sense to reduce your share buffer

00:05:31,600 --> 00:05:35,830
size and that postgrads use them in

00:05:33,820 --> 00:05:37,389
external cash for throw a lot of it's

00:05:35,830 --> 00:05:40,919
buffering especially if it's a little

00:05:37,389 --> 00:05:40,919
relatively low performance system

00:05:41,070 --> 00:05:46,960
databases so Postgres does have

00:05:43,720 --> 00:05:49,419
databases and these are basically the

00:05:46,960 --> 00:05:51,720
container objects for all the schema who

00:05:49,419 --> 00:05:54,729
are called database level objects

00:05:51,720 --> 00:05:57,250
whenever you connect a Postgres you

00:05:54,729 --> 00:05:59,919
connect both to you really connect to a

00:05:57,250 --> 00:06:02,979
database right so you connect to the

00:05:59,919 --> 00:06:05,229
cluster right the listening process also

00:06:02,979 --> 00:06:07,509
called the postmaster but then you tell

00:06:05,229 --> 00:06:09,729
it I want to connect the database X and

00:06:07,509 --> 00:06:11,770
then the postmaster will go open

00:06:09,729 --> 00:06:14,500
database X make sure that you have to

00:06:11,770 --> 00:06:16,270
connect privileges on it and then start

00:06:14,500 --> 00:06:18,669
you up and once you're started you're

00:06:16,270 --> 00:06:20,860
working inside of database X if you want

00:06:18,669 --> 00:06:23,650
to go talk to another database you have

00:06:20,860 --> 00:06:26,320
to disconnect and reconnect or you use

00:06:23,650 --> 00:06:29,199
some kind of inter server thing like the

00:06:26,320 --> 00:06:31,449
post because ftw there are a number of

00:06:29,199 --> 00:06:33,220
permissions that exist on databases you

00:06:31,449 --> 00:06:34,690
have to connect privilege which allows

00:06:33,220 --> 00:06:36,669
you whether or not you can connect it

00:06:34,690 --> 00:06:38,169
all to the database create which

00:06:36,669 --> 00:06:40,330
basically means you can create schemas

00:06:38,169 --> 00:06:44,349
and then temporary which allows you to

00:06:40,330 --> 00:06:46,479
create temporary objects so inside of a

00:06:44,349 --> 00:06:48,639
database you have schema everything

00:06:46,479 --> 00:06:50,830
pretty much lives inside of a schema all

00:06:48,639 --> 00:06:53,710
the normal objects that you work with

00:06:50,830 --> 00:06:57,159
live inside of a schema so this includes

00:06:53,710 --> 00:07:00,639
tables indexes functions all of these

00:06:57,159 --> 00:07:03,849
things exist inside of it of a schema

00:07:00,639 --> 00:07:05,740
views and then we have a set of

00:07:03,849 --> 00:07:07,389
permissions right so do you think of

00:07:05,740 --> 00:07:10,720
schemas little ways kind of like a

00:07:07,389 --> 00:07:12,550
straight started kind of directories and

00:07:10,720 --> 00:07:14,470
then you have the option of either being

00:07:12,550 --> 00:07:26,970
allowed to create new objects inside of

00:07:14,470 --> 00:07:26,970
the schema or use granular permissions

00:07:56,520 --> 00:08:01,480
basically what goes on bases or tables

00:07:59,140 --> 00:08:21,880
and indexes things like don't actually

00:08:01,480 --> 00:08:25,300
have materialized but and we've had some

00:08:21,880 --> 00:08:29,470
changes right so prior to version 10 we

00:08:25,300 --> 00:08:31,990
call this rectory PGX law right in BG 10

00:08:29,470 --> 00:08:32,800
we changed it to PD wall because we

00:08:31,990 --> 00:08:35,740
found it

00:08:32,800 --> 00:08:39,460
sometimes people those laws could be

00:08:35,740 --> 00:08:42,130
deleted and that's very bad because we

00:08:39,460 --> 00:08:46,270
need those red head logs to do things

00:08:42,130 --> 00:08:48,880
like crash recovery so if pobres crashes

00:08:46,270 --> 00:08:51,190
what happens is that you come back up

00:08:48,880 --> 00:08:53,620
and we look at what the last checkpoint

00:08:51,190 --> 00:08:55,600
was in our control file and then we

00:08:53,620 --> 00:08:58,270
replay the red head loss from that last

00:08:55,600 --> 00:08:59,980
checkpoint up to the end of the red head

00:08:58,270 --> 00:09:02,320
Walker and that's how we reach a

00:08:59,980 --> 00:09:06,610
consistent state so if you delete it bad

00:09:02,320 --> 00:09:08,500
things happen don't do that every single

00:09:06,610 --> 00:09:11,430
query that comes into Postgres it does

00:09:08,500 --> 00:09:13,630
any kind of Rights is only going to be

00:09:11,430 --> 00:09:15,580
you know when you go to commit that

00:09:13,630 --> 00:09:18,009
query we will only acknowledge that

00:09:15,580 --> 00:09:20,859
query once we've written that

00:09:18,009 --> 00:09:23,470
data out to the right ahead log right

00:09:20,859 --> 00:09:25,899
and sync right this is how Postgres

00:09:23,470 --> 00:09:28,389
guarantees that we don't ever lose any

00:09:25,899 --> 00:09:29,980
of your data all of those changes are

00:09:28,389 --> 00:09:32,319
written to the right head blog with a

00:09:29,980 --> 00:09:36,029
CRC so that we can tell if we have a

00:09:32,319 --> 00:09:36,029
partial right into the right head lock

00:09:36,389 --> 00:09:39,939
one of the things that can happen is

00:09:38,679 --> 00:09:42,160
that the right of law can become a

00:09:39,939 --> 00:09:45,220
potential coin point of contention on

00:09:42,160 --> 00:09:47,679
high right volumes and this is why it

00:09:45,220 --> 00:09:49,629
makes sense a lot of times you split the

00:09:47,679 --> 00:09:52,149
right hand log off onto its own file

00:09:49,629 --> 00:09:55,839
system onto its own io channel on of its

00:09:52,149 --> 00:09:57,489
own disk or SSDs or MVPs or whatever

00:09:55,839 --> 00:10:00,129
you're running right have it be

00:09:57,489 --> 00:10:02,769
independent because it can become a

00:10:00,129 --> 00:10:04,509
contention point as we have lots and

00:10:02,769 --> 00:10:05,309
lots of data being written into write a

00:10:04,509 --> 00:10:07,809
head lock

00:10:05,309 --> 00:10:09,579
one of the things that be aware about is

00:10:07,809 --> 00:10:11,739
that it contains both what are called

00:10:09,579 --> 00:10:13,419
full page changes and incremental

00:10:11,739 --> 00:10:14,739
changes and we'll talk about those a

00:10:13,419 --> 00:10:17,489
little bit more next we talk about

00:10:14,739 --> 00:10:21,160
checkpoints but just realize a full page

00:10:17,489 --> 00:10:23,230
image is a full 8k page everything in

00:10:21,160 --> 00:10:25,959
posters operates based on these 8k pages

00:10:23,230 --> 00:10:28,540
right we read off the file system in 8k

00:10:25,959 --> 00:10:31,709
jumps we write out to the file system an

00:10:28,540 --> 00:10:34,360
8k jumped right everything happens in 8k

00:10:31,709 --> 00:10:36,579
periodically we will take an 8k page

00:10:34,360 --> 00:10:38,649
that's been modified and write it into

00:10:36,579 --> 00:10:42,369
the right head log once we have that

00:10:38,649 --> 00:10:44,230
written out subsequent changes will be

00:10:42,369 --> 00:10:46,839
written out in a potentially of binary

00:10:44,230 --> 00:10:49,989
diff method right where we track exactly

00:10:46,839 --> 00:10:52,779
what change was made to that page in a

00:10:49,989 --> 00:10:55,860
binary level and that's how physical

00:10:52,779 --> 00:10:58,900
replication in Postgres works

00:10:55,860 --> 00:11:02,100
checkpoints so

00:10:58,900 --> 00:11:05,500
we have this bunch of data in memory

00:11:02,100 --> 00:11:07,690
right in our shared buffers we go and

00:11:05,500 --> 00:11:11,080
make some update to that data in memory

00:11:07,690 --> 00:11:13,390
that modification that page Dirty's that

00:11:11,080 --> 00:11:16,570
page someone then wants to commit that

00:11:13,390 --> 00:11:18,940
change right what do we do we basically

00:11:16,570 --> 00:11:21,160
make sure that that page has been

00:11:18,940 --> 00:11:23,260
written into our right a headlock or

00:11:21,160 --> 00:11:25,089
that change whatever that changes has

00:11:23,260 --> 00:11:27,010
written into that right ahead long but

00:11:25,089 --> 00:11:30,130
we need to go make that change out to

00:11:27,010 --> 00:11:33,250
the heap at some point - right and that

00:11:30,130 --> 00:11:34,660
process is called checkpointing right

00:11:33,250 --> 00:11:36,610
we'll take waiting is the profits that

00:11:34,660 --> 00:11:38,020
make sure that page gets written out

00:11:36,610 --> 00:11:40,300
before our next checkpoint

00:11:38,020 --> 00:11:42,190
great why does this matter because

00:11:40,300 --> 00:11:44,350
during crash recovery you have to go

00:11:42,190 --> 00:11:48,370
back to the last checkpoint and replay

00:11:44,350 --> 00:11:49,930
all of the changes from there and make

00:11:48,370 --> 00:11:52,839
and that's how we can again reach a

00:11:49,930 --> 00:11:55,600
consistent state so this is a really

00:11:52,839 --> 00:12:00,430
important thing to be doing periodically

00:11:55,600 --> 00:12:03,730
so by default app ins every five minutes

00:12:00,430 --> 00:12:05,470
I know people who changed that right one

00:12:03,730 --> 00:12:11,290
of the reasons why people changes change

00:12:05,470 --> 00:12:14,230
that is because you may want to accept a

00:12:11,290 --> 00:12:16,720
longer recovery time in the event of a

00:12:14,230 --> 00:12:19,390
crash in order to reduce the redhead log

00:12:16,720 --> 00:12:21,220
volume right and how does this changing

00:12:19,390 --> 00:12:23,589
the checkpoint timeout reduce the right

00:12:21,220 --> 00:12:26,170
head log file because after each

00:12:23,589 --> 00:12:28,870
checkpoint the first modification of an

00:12:26,170 --> 00:12:31,060
8k page results in that full page image

00:12:28,870 --> 00:12:33,400
going into the right head log subsequent

00:12:31,060 --> 00:12:35,980
changes are only modifications to the

00:12:33,400 --> 00:12:36,810
page and those are much smaller right

00:12:35,980 --> 00:12:39,480
when those going to the

00:12:36,810 --> 00:12:41,490
headlock but if you have checkpoint I'm

00:12:39,480 --> 00:12:43,650
upset in five minutes then after five

00:12:41,490 --> 00:12:46,320
minutes we'll have check pointed and the

00:12:43,650 --> 00:12:49,950
next right to that page will again put

00:12:46,320 --> 00:12:51,690
an 8k page into the right analog so it's

00:12:49,950 --> 00:12:53,880
a trade-off right I mean I've seen

00:12:51,690 --> 00:12:57,839
people go as high as like half an hour

00:12:53,880 --> 00:13:00,120
on their on their redhead log check one

00:12:57,839 --> 00:13:01,920
time out right what that means is that

00:13:00,120 --> 00:13:06,060
you could potentially have as much as

00:13:01,920 --> 00:13:07,920
like half an hour of changes pending in

00:13:06,060 --> 00:13:10,770
the event of a crash that you then have

00:13:07,920 --> 00:13:12,510
to replay during crash recovery so it's

00:13:10,770 --> 00:13:14,610
it's a real real trade-off in so many

00:13:12,510 --> 00:13:18,080
consider I will talk more about those

00:13:14,610 --> 00:13:18,080
configuration options a little bit later

00:13:18,260 --> 00:13:21,630
all right

00:13:19,440 --> 00:13:25,200
so both goose has provides a lot of

00:13:21,630 --> 00:13:28,980
really great packages for various

00:13:25,200 --> 00:13:30,900
different distributions for postgrads so

00:13:28,980 --> 00:13:33,270
one of the really nice things is that

00:13:30,900 --> 00:13:36,960
the post has packages that are provided

00:13:33,270 --> 00:13:39,029
allow you to do concurrent major version

00:13:36,960 --> 00:13:41,070
installation which also means that you

00:13:39,029 --> 00:13:43,110
can have relatively smooth upgrade paths

00:13:41,070 --> 00:13:47,670
right so if you're doing a major version

00:13:43,110 --> 00:13:48,900
upgrade from 9.6 to 11 or from 10 to 12

00:13:47,670 --> 00:13:52,170
or what-have-you

00:13:48,900 --> 00:13:55,170
using the post press pg/vg packages

00:13:52,170 --> 00:13:56,970
makes that much easier those packages

00:13:55,170 --> 00:13:59,400
are also supported through the community

00:13:56,970 --> 00:14:01,110
mailing lists and all of the updates

00:13:59,400 --> 00:14:04,589
with those packages are coordinated by

00:14:01,110 --> 00:14:05,790
the Postgres release team for all the

00:14:04,589 --> 00:14:08,310
mining whatever

00:14:05,790 --> 00:14:10,560
does a minor or a major version update

00:14:08,310 --> 00:14:12,600
so you know those packages are always

00:14:10,560 --> 00:14:17,010
current with whatever the current

00:14:12,600 --> 00:14:19,680
post-credits releases so from looking at

00:14:17,010 --> 00:14:21,990
installing on a Debian or a bun to style

00:14:19,680 --> 00:14:25,640
system after post boost field

00:14:21,990 --> 00:14:29,520
org is the repository for those packages

00:14:25,640 --> 00:14:32,010
you can add a PG PG sources list D which

00:14:29,520 --> 00:14:34,080
is pretty straightforward you can see

00:14:32,010 --> 00:14:35,460
here this is all documented if you just

00:14:34,080 --> 00:14:37,440
go to have that post miss field that'll

00:14:35,460 --> 00:14:39,390
or you can see it there too and then you

00:14:37,440 --> 00:14:40,560
have to install the key for that

00:14:39,390 --> 00:14:42,360
repository which is pretty

00:14:40,560 --> 00:14:44,430
straightforward and then it's apt-get

00:14:42,360 --> 00:14:46,650
update or apt update and then have to

00:14:44,430 --> 00:14:48,420
install those creds and boom focus is

00:14:46,650 --> 00:14:51,600
installed that'll install both the the

00:14:48,420 --> 00:14:54,090
server and the client library the server

00:14:51,600 --> 00:14:57,750
the client libraries and the default

00:14:54,090 --> 00:15:01,110
clients those fezzes packages for Debian

00:14:57,750 --> 00:15:02,970
dudes split up the client into other

00:15:01,110 --> 00:15:06,570
packages so if you want to you can just

00:15:02,970 --> 00:15:08,790
install the psql client and the PQ and

00:15:06,570 --> 00:15:09,920
whatnot onto an individual system you

00:15:08,790 --> 00:15:11,760
don't have to install the server

00:15:09,920 --> 00:15:15,510
everywhere that you might want to access

00:15:11,760 --> 00:15:17,940
Postgres from when it comes to the

00:15:15,510 --> 00:15:19,920
configuration on a Debian system it's a

00:15:17,940 --> 00:15:21,900
little bit different between the two

00:15:19,920 --> 00:15:24,750
different systems in debian and bae

00:15:21,900 --> 00:15:27,180
systems in redhead debian follows the

00:15:24,750 --> 00:15:29,550
FHS filesystem hierarchy standard and

00:15:27,180 --> 00:15:33,300
that means in config files go and Etsy

00:15:29,550 --> 00:15:35,550
so in Postgres LAN the config files are

00:15:33,300 --> 00:15:37,140
in SC post goes well and that acts is

00:15:35,550 --> 00:15:40,800
whatever the major version is so that'd

00:15:37,140 --> 00:15:45,390
be like 9.6 or 10 or 11 and then main is

00:15:40,800 --> 00:15:48,660
the cluster name so one of the really

00:15:45,390 --> 00:15:51,270
cool things on debian is that it has a

00:15:48,660 --> 00:15:52,860
bunch of stuff for cluster management so

00:15:51,270 --> 00:15:54,870
you can have multiple independent

00:15:52,860 --> 00:15:57,150
clusters running different major

00:15:54,870 --> 00:16:00,270
versions the same major version whatever

00:15:57,150 --> 00:16:02,040
you want on one debian instance there

00:16:00,270 --> 00:16:04,350
are then a bunch of wrappers

00:16:02,040 --> 00:16:07,709
working with these different clusters

00:16:04,350 --> 00:16:09,839
easier so psql on a debian system is not

00:16:07,709 --> 00:16:12,540
actually binary psql when you run it

00:16:09,839 --> 00:16:14,220
it's a perl script it's a perl script

00:16:12,540 --> 00:16:17,550
that looks for a dash dash cluster

00:16:14,220 --> 00:16:19,290
option that you provide and then it will

00:16:17,550 --> 00:16:21,180
figure out what cluster you want to

00:16:19,290 --> 00:16:22,920
access what port it's running on and

00:16:21,180 --> 00:16:24,810
then it will actually set the

00:16:22,920 --> 00:16:27,209
appropriate environment variables so

00:16:24,810 --> 00:16:29,190
that when psql isn't executed by that

00:16:27,209 --> 00:16:34,199
script it will actually connect you to

00:16:29,190 --> 00:16:37,170
the correct postgrads instance it will

00:16:34,199 --> 00:16:39,240
also take the right psql because guess

00:16:37,170 --> 00:16:41,040
cocaine is made your version two and it

00:16:39,240 --> 00:16:45,240
will actually pick the psql version two

00:16:41,040 --> 00:16:48,300
matches which is kind of interesting the

00:16:45,240 --> 00:16:51,240
actual binaries live and user live

00:16:48,300 --> 00:16:53,069
PostgreSQL the logs all go into bar walk

00:16:51,240 --> 00:16:54,560
which is pretty straightforward there's

00:16:53,069 --> 00:16:56,399
also some startup blocks

00:16:54,560 --> 00:16:59,639
although some of that's now been changed

00:16:56,399 --> 00:17:02,819
with system deep magic and then we have

00:16:59,639 --> 00:17:04,290
one either an in script or now it's a

00:17:02,819 --> 00:17:06,569
system deep process that will actually

00:17:04,290 --> 00:17:10,589
start all the major versions and all the

00:17:06,569 --> 00:17:13,110
clusters for you automatically so these

00:17:10,589 --> 00:17:16,140
are those debian provided wrappers and

00:17:13,110 --> 00:17:18,750
helper scripts PT LS custards PD CTL

00:17:16,140 --> 00:17:20,610
cluster are the ones that you really

00:17:18,750 --> 00:17:22,949
might be thinking about that are not

00:17:20,610 --> 00:17:24,900
familiar to you and here you can see an

00:17:22,949 --> 00:17:27,600
example of running PG LS Buster's on my

00:17:24,900 --> 00:17:30,110
laptop error which shows all the

00:17:27,600 --> 00:17:32,870
different ports the things are running

00:17:30,110 --> 00:17:35,570
whether it's online or not what the name

00:17:32,870 --> 00:17:37,100
is but here you can see I have two

00:17:35,570 --> 00:17:39,920
different clusters that are running post

00:17:37,100 --> 00:17:42,230
goes 11 with different names they live

00:17:39,920 --> 00:17:43,730
in different directories right so this

00:17:42,230 --> 00:17:45,320
is the data directory for the app one

00:17:43,730 --> 00:17:48,679
clusters the new directory for the main

00:17:45,320 --> 00:17:53,059
cluster under 11 and then they've got

00:17:48,679 --> 00:17:56,809
different blog files and whatnot pretty

00:17:53,059 --> 00:18:01,330
straightforward so that's kind of things

00:17:56,809 --> 00:18:09,530
on the post goes on Debian kind of out

00:18:01,330 --> 00:18:12,309
and like is it you past that you left in

00:18:09,530 --> 00:18:16,429
slash name now we'll connect you to the

00:18:12,309 --> 00:18:21,140
post occurs 11 cluster named main on a

00:18:16,429 --> 00:18:25,100
Debian system alright now let's talk

00:18:21,140 --> 00:18:27,710
about Red Hat so for Red Hat CentOS rpm

00:18:25,100 --> 00:18:31,010
based environments we have young

00:18:27,710 --> 00:18:32,900
PostgreSQL that org it's got a script

00:18:31,010 --> 00:18:35,540
that initializes the cluster and sets

00:18:32,900 --> 00:18:38,840
things up for you you can run multiple

00:18:35,540 --> 00:18:40,850
major versions in parallel I will say

00:18:38,840 --> 00:18:42,320
that unfortunately the Red Hat packages

00:18:40,850 --> 00:18:44,570
don't have all of the nice cluster

00:18:42,320 --> 00:18:47,620
management stuff that nevian ones do but

00:18:44,570 --> 00:18:51,679
you can still install it and run it and

00:18:47,620 --> 00:18:53,510
that post Millis vol 11 setup script you

00:18:51,679 --> 00:18:55,940
can specify different data directories

00:18:53,510 --> 00:18:59,299
for it and that would allow you to have

00:18:55,940 --> 00:19:00,590
multiple different post president

00:18:59,299 --> 00:19:02,960
stances of the state major version

00:19:00,590 --> 00:19:05,990
running under a red hat or a young based

00:19:02,960 --> 00:19:07,790
environment and then you can enable

00:19:05,990 --> 00:19:13,309
starting post goes on boom using this

00:19:07,790 --> 00:19:14,650
system CTL so otherwise it's pretty much

00:19:13,309 --> 00:19:17,309
the same as in

00:19:14,650 --> 00:19:20,350
running post goes on on other systems

00:19:17,309 --> 00:19:22,300
one thing I will mention that if Jerry

00:19:20,350 --> 00:19:25,420
thinking about doing multiple clusters

00:19:22,300 --> 00:19:27,280
in a production environment it's my

00:19:25,420 --> 00:19:30,700
preference to run those independent

00:19:27,280 --> 00:19:34,320
clusters with different UNIX user IDs or

00:19:30,700 --> 00:19:36,880
run them in independent containers just

00:19:34,320 --> 00:19:38,680
to keep the separation there right

00:19:36,880 --> 00:19:41,980
containers provide C Group separation

00:19:38,680 --> 00:19:43,360
which is nice if you are running them

00:19:41,980 --> 00:19:46,000
set of one container or running them

00:19:43,360 --> 00:19:48,610
inside of one kind of Linux instance and

00:19:46,000 --> 00:19:52,260
having different users means that you

00:19:48,610 --> 00:19:56,440
don't have any chance of confusion about

00:19:52,260 --> 00:19:58,120
to write that can be bad if you mess it

00:19:56,440 --> 00:20:00,600
up most crews has some checks in place

00:19:58,120 --> 00:20:03,940
to try to avoid that happening anyway

00:20:00,600 --> 00:20:08,110
but I like to be extra paranoid and run

00:20:03,940 --> 00:20:10,809
them as independent UNIX users so write

00:20:08,110 --> 00:20:14,260
a configuration test by default dam

00:20:10,809 --> 00:20:15,940
directory is as Marlin PG SQL then all

00:20:14,260 --> 00:20:19,480
the configuration is in the data

00:20:15,940 --> 00:20:20,770
directory which I hate the reason I hate

00:20:19,480 --> 00:20:22,300
it is because it means that you're going

00:20:20,770 --> 00:20:24,910
into the data directory and be eyeing

00:20:22,300 --> 00:20:27,550
files and and potentially envying files

00:20:24,910 --> 00:20:30,640
and rmn files and doing other things

00:20:27,550 --> 00:20:34,660
they are very very risky to do inside of

00:20:30,640 --> 00:20:36,970
your post real data directory so I don't

00:20:34,660 --> 00:20:39,460
like that I mean different people do

00:20:36,970 --> 00:20:43,720
different things what-have-you but not

00:20:39,460 --> 00:20:46,870
my recommendation so you do have walks

00:20:43,720 --> 00:20:49,090
that are moved out and put so the logs

00:20:46,870 --> 00:20:51,010
are also inside of the data directory

00:20:49,090 --> 00:20:52,690
inside of this PG log directory

00:20:51,010 --> 00:20:54,080
I honestly think that's part of the

00:20:52,690 --> 00:20:56,450
reason why people went and remove

00:20:54,080 --> 00:20:58,340
things like PGX lock is because the log

00:20:56,450 --> 00:21:02,890
directory and read have a PD log and

00:20:58,340 --> 00:21:04,960
that's pretty freakin close to PDX log

00:21:02,890 --> 00:21:07,010
you do need to have an independent

00:21:04,960 --> 00:21:09,559
initialization script or any dependents

00:21:07,010 --> 00:21:11,210
in CTL setup in Red Hat

00:21:09,559 --> 00:21:13,820
it's not like that mean it doesn't have

00:21:11,210 --> 00:21:16,100
the nice one kind of sort of starts them

00:21:13,820 --> 00:21:19,390
all thing and it doesn't have any of the

00:21:16,100 --> 00:21:22,149
helper scripts that are on Debian so

00:21:19,390 --> 00:21:25,730
pick your poison

00:21:22,149 --> 00:21:27,559
that's a it alright I like Red Hat in

00:21:25,730 --> 00:21:30,440
general but I'm not a huge fan of how

00:21:27,559 --> 00:21:32,240
they do that installation alright so

00:21:30,440 --> 00:21:33,350
let's talk about the Postgres config

00:21:32,240 --> 00:21:35,389
files

00:21:33,350 --> 00:21:37,250
so both Goosby like comp is your general

00:21:35,389 --> 00:21:40,399
server configuration and colds things

00:21:37,250 --> 00:21:42,769
like what IP address to listen on what

00:21:40,399 --> 00:21:45,500
port to listen on how BIG's your buffers

00:21:42,769 --> 00:21:48,380
is going to be you then have the HBA

00:21:45,500 --> 00:21:51,740
file which configures how authentication

00:21:48,380 --> 00:21:53,659
is done to deserve I did allows you to

00:21:51,740 --> 00:21:56,960
do user mappings and then there's that

00:21:53,659 --> 00:21:58,639
PG log directory for Red Hat as

00:21:56,960 --> 00:22:03,909
mentioned on Debbie in the files little

00:21:58,639 --> 00:22:03,909
somewhere else and yeah

00:22:08,740 --> 00:22:13,370
all right on Debbie there are also some

00:22:11,330 --> 00:22:14,990
Debian specific config files for you

00:22:13,370 --> 00:22:17,120
which are kind of cute

00:22:14,990 --> 00:22:18,710
there's one called Starcom which allows

00:22:17,120 --> 00:22:20,509
you to configure whether or not the

00:22:18,710 --> 00:22:21,470
cluster is started automatically for you

00:22:20,509 --> 00:22:22,909
or not

00:22:21,470 --> 00:22:25,789
I think there's ways of doing this

00:22:22,909 --> 00:22:28,850
instead of systemctl now - since we're

00:22:25,789 --> 00:22:30,460
using system D there is also a PD CTL

00:22:28,850 --> 00:22:33,289
dot-com which allows you to configure

00:22:30,460 --> 00:22:36,759
different options to be passed to PG CTL

00:22:33,289 --> 00:22:40,039
when it's run out of the PD CTL cluster

00:22:36,759 --> 00:22:41,269
command and then there's some different

00:22:40,039 --> 00:22:43,460
environment settings that you can set

00:22:41,269 --> 00:22:47,119
you generally probably don't need to

00:22:43,460 --> 00:22:49,700
monkey with those though we do also have

00:22:47,119 --> 00:22:52,460
a post post field common package on

00:22:49,700 --> 00:22:55,070
Debian which is what gets used when

00:22:52,460 --> 00:22:57,769
things like new clusters are created so

00:22:55,070 --> 00:23:00,470
you can change what the defaults are

00:22:57,769 --> 00:23:02,690
forgiven cluster one of the things that

00:23:00,470 --> 00:23:06,019
you might want to do in particular is

00:23:02,690 --> 00:23:07,909
that you might want to specify some

00:23:06,019 --> 00:23:11,779
options to a knit BB when creating new

00:23:07,909 --> 00:23:19,419
clusters my favorite is - okay anybody

00:23:11,779 --> 00:23:19,419
know what - K does - an NDB which one

00:23:19,490 --> 00:23:24,720
it is not dancing cop to know you should

00:23:22,950 --> 00:23:27,529
know this you should care about your

00:23:24,720 --> 00:23:27,529
data enough to know this

00:23:28,559 --> 00:23:35,399
so the - K option to an MV b is enabling

00:23:32,520 --> 00:23:36,830
page double check something it is off by

00:23:35,399 --> 00:23:39,120
default

00:23:36,830 --> 00:23:40,350
Postgres support page double check

00:23:39,120 --> 00:23:42,630
something but you have to explicit

00:23:40,350 --> 00:23:46,500
enable it you have to enable it in the

00:23:42,630 --> 00:23:49,980
DB time which sucks it also means you

00:23:46,500 --> 00:23:52,380
can't PG upgrade from a non crc cluster

00:23:49,980 --> 00:23:54,870
into a c or c cluster not yet anyway

00:23:52,380 --> 00:23:56,399
there is work going on to improve that

00:23:54,870 --> 00:24:00,570
situation but i think you just got

00:23:56,399 --> 00:24:01,830
punted b12 unfortunately but hopefully

00:24:00,570 --> 00:24:03,750
at some point in the future we will have

00:24:01,830 --> 00:24:06,950
support for online enablement of

00:24:03,750 --> 00:24:06,950
checksums but it's not there today

00:24:07,909 --> 00:24:13,260
alright so but i did want to mention

00:24:10,289 --> 00:24:15,270
that - k is a great option to specify in

00:24:13,260 --> 00:24:17,399
your create cluster dot-com for any TV

00:24:15,270 --> 00:24:19,350
so that all of your new Buster's created

00:24:17,399 --> 00:24:22,559
automatically have check sums enabled

00:24:19,350 --> 00:24:24,960
because it's really good to have there's

00:24:22,559 --> 00:24:27,740
some other things you can do around user

00:24:24,960 --> 00:24:30,450
specific information and controls for

00:24:27,740 --> 00:24:33,419
clusters this is kind of cute because

00:24:30,450 --> 00:24:36,950
you can like set it up so that you know

00:24:33,419 --> 00:24:39,059
users like a through a for whatever

00:24:36,950 --> 00:24:40,380
connect automatically to this cluster

00:24:39,059 --> 00:24:41,840
whereas everybody else connect

00:24:40,380 --> 00:24:45,360
automatically to a different cluster

00:24:41,840 --> 00:24:48,120
which is kind of cute PD upgrade cluster

00:24:45,360 --> 00:24:50,340
is a directory for scripts to be

00:24:48,120 --> 00:24:51,720
executed during a PG upgrade so be the

00:24:50,340 --> 00:24:54,390
upgrade is happier you go from one major

00:24:51,720 --> 00:24:56,100
version of buffers to another and you

00:24:54,390 --> 00:25:01,070
can have like free mo script in there

00:24:56,100 --> 00:25:01,070
for doing whatever you need to have done

00:25:07,909 --> 00:25:12,179
they're having some changes to reduce

00:25:09,929 --> 00:25:13,550
need to modify them which is nice for

00:25:12,179 --> 00:25:15,290
example important is

00:25:13,550 --> 00:25:18,500
justify to the Indian script which is

00:25:15,290 --> 00:25:20,750
handy so that's a little bit nicer but

00:25:18,500 --> 00:25:22,910
otherwise I don't I don't think modify

00:25:20,750 --> 00:25:27,650
the Red Hat configuration file very much

00:25:22,910 --> 00:25:28,820
not the Red Hat did it once all right so

00:25:27,650 --> 00:25:31,580
let's talk a little bit about initial

00:25:28,820 --> 00:25:33,380
configuration of Postgres the first one

00:25:31,580 --> 00:25:36,050
is listen addresses you may need to

00:25:33,380 --> 00:25:37,820
configure to allow external access and

00:25:36,050 --> 00:25:40,190
then max wall size is something that you

00:25:37,820 --> 00:25:41,870
probably consider increasing if you have

00:25:40,190 --> 00:25:44,930
any expectation of there being any kind

00:25:41,870 --> 00:25:46,340
of write load on your environment what

00:25:44,930 --> 00:25:48,680
happens is that remember we talked about

00:25:46,340 --> 00:25:52,400
checkpoints and having to write these 8k

00:25:48,680 --> 00:25:55,460
pages out what not well you can you know

00:25:52,400 --> 00:25:57,230
how the checkpoint happened due to time

00:25:55,460 --> 00:25:58,820
which is typically what you want

00:25:57,230 --> 00:26:01,070
meaning that you check one every five

00:25:58,820 --> 00:26:03,770
minutes or so but you can also have

00:26:01,070 --> 00:26:06,680
checkpoint to be forced if we run out of

00:26:03,770 --> 00:26:08,420
right I had a log space so that max wall

00:26:06,680 --> 00:26:10,460
sides there we write more than that

00:26:08,420 --> 00:26:12,440
amount of data in five minutes we are

00:26:10,460 --> 00:26:15,620
going to checkpoint immediately right

00:26:12,440 --> 00:26:17,290
because we need to have we need to get

00:26:15,620 --> 00:26:21,140
back underneath of that Maxwell size

00:26:17,290 --> 00:26:22,790
right in order to kind of do what we're

00:26:21,140 --> 00:26:25,310
both be doing which is respecting the

00:26:22,790 --> 00:26:27,320
parameters here but that means that we

00:26:25,310 --> 00:26:29,030
have the checkpoint faster checkpointing

00:26:27,320 --> 00:26:31,820
faster increases the amount of flowing

00:26:29,030 --> 00:26:34,010
path right because we have to go to a

00:26:31,820 --> 00:26:35,990
new full page image after each one and

00:26:34,010 --> 00:26:37,940
just overall ends up slowing down the

00:26:35,990 --> 00:26:40,520
system right so you really want to

00:26:37,940 --> 00:26:42,920
increase your max wall size if you have

00:26:40,520 --> 00:26:45,610
a high write load the checkpoint

00:26:42,920 --> 00:26:47,570
completion target for reasons that still

00:26:45,610 --> 00:26:50,000
baffled me we have a ten-point

00:26:47,570 --> 00:26:52,430
completion target parameter that

00:26:50,000 --> 00:26:54,590
basically says well if you want you can

00:26:52,430 --> 00:26:55,890
make it make post-grad checkpoint even

00:26:54,590 --> 00:26:59,340
faster than

00:26:55,890 --> 00:27:01,260
you actually took the time out to be why

00:26:59,340 --> 00:27:02,790
we have these two things is unclear to

00:27:01,260 --> 00:27:04,230
me is if you wanted to make those

00:27:02,790 --> 00:27:06,810
repairs just checkpoint faster just

00:27:04,230 --> 00:27:07,620
decrease checkpoint time out and then we

00:27:06,810 --> 00:27:10,890
would do it more often

00:27:07,620 --> 00:27:11,790
but we also have a checkpoint completion

00:27:10,890 --> 00:27:14,730
target

00:27:11,790 --> 00:27:16,440
I didn't recommend up in this 2.9 that

00:27:14,730 --> 00:27:19,170
way we actually use the entire time

00:27:16,440 --> 00:27:21,240
between check ones due rights by default

00:27:19,170 --> 00:27:22,890
is set to 0.5 which means that we're

00:27:21,240 --> 00:27:25,230
actually we're doing a checkpoint every

00:27:22,890 --> 00:27:27,570
5 minutes but we're only gonna write the

00:27:25,230 --> 00:27:28,980
data out the first half of that right is

00:27:27,570 --> 00:27:30,960
when we're gonna try to write out lay it

00:27:28,980 --> 00:27:34,070
out and then we're gonna like do nothing

00:27:30,960 --> 00:27:37,260
for a while so it's a little bit

00:27:34,070 --> 00:27:39,180
interesting and it also means that you

00:27:37,260 --> 00:27:41,340
end up with discrepancies and latency

00:27:39,180 --> 00:27:42,630
and things like that because depending

00:27:41,340 --> 00:27:43,920
on when your right is happening it was

00:27:42,630 --> 00:27:45,750
in that the second half of the

00:27:43,920 --> 00:27:47,220
checkpoint time or the first half the

00:27:45,750 --> 00:27:48,450
checkpoint time can make a real

00:27:47,220 --> 00:27:52,590
difference and how long it took to

00:27:48,450 --> 00:27:53,850
actually get it out effective cache size

00:27:52,590 --> 00:27:55,980
is something else you may want to adjust

00:27:53,850 --> 00:27:57,630
along with Maxwell Center I think

00:27:55,980 --> 00:28:00,000
maximal sender is 11 maybe up that

00:27:57,630 --> 00:28:01,890
already but for a while there it was set

00:28:00,000 --> 00:28:03,510
very low so you may want to consider

00:28:01,890 --> 00:28:06,960
increasing that the reason that matters

00:28:03,510 --> 00:28:09,240
because of things like PD based backup

00:28:06,960 --> 00:28:13,530
used to the wall center replicas use

00:28:09,240 --> 00:28:14,910
wall centers PD received wall uses a

00:28:13,530 --> 00:28:16,950
little sender so there's different

00:28:14,910 --> 00:28:18,240
processes they conventionally want to be

00:28:16,950 --> 00:28:21,480
a wall sender and you want to up that

00:28:18,240 --> 00:28:23,310
done to cover all all right lock and

00:28:21,480 --> 00:28:24,600
configuration these are things you

00:28:23,310 --> 00:28:26,520
should enable the default boarding

00:28:24,600 --> 00:28:29,280
integration if those go sucks it's

00:28:26,520 --> 00:28:31,110
terrible we actually do will have a lot

00:28:29,280 --> 00:28:33,840
of good logging options in post fence

00:28:31,110 --> 00:28:35,340
but they're all disabled by default so

00:28:33,840 --> 00:28:36,090
things like blogging up connections and

00:28:35,340 --> 00:28:37,770
disconnections

00:28:36,090 --> 00:28:40,560
logging the block waits is really

00:28:37,770 --> 00:28:42,840
important logging PDL I always recommend

00:28:40,560 --> 00:28:43,740
logging all DDL unless you really can

00:28:42,840 --> 00:28:45,600
for some reason

00:28:43,740 --> 00:28:47,550
walk me through the region statement

00:28:45,600 --> 00:28:49,110
that's in milliseconds so that if you

00:28:47,550 --> 00:28:50,550
have a query over 100 milliseconds

00:28:49,110 --> 00:28:52,260
you may want to enable it if you were

00:28:50,550 --> 00:28:53,970
here for my last talk

00:28:52,260 --> 00:28:56,730
I've been probably going to update this

00:28:53,970 --> 00:28:59,010
for b12 to say set Walkman narration

00:28:56,730 --> 00:29:02,250
statement to zero and then set a walk

00:28:59,010 --> 00:29:04,350
sample rate instead because b12 will

00:29:02,250 --> 00:29:06,540
have the ability to have a vlog

00:29:04,350 --> 00:29:09,170
statement sample rate that will give you

00:29:06,540 --> 00:29:12,030
a sampling of queries rather MOG NOLA

00:29:09,170 --> 00:29:15,600
walk temp file 0 means vlog every temp

00:29:12,030 --> 00:29:18,180
file that's created 0 is the byte size

00:29:15,600 --> 00:29:20,310
so you could not walk really small ones

00:29:18,180 --> 00:29:21,810
if you wanted I find that temp files

00:29:20,310 --> 00:29:27,900
don't get great it also knows to be an

00:29:21,810 --> 00:29:30,330
issue auto vacuum in duration basically

00:29:27,900 --> 00:29:32,130
give you all the information about auto

00:29:30,330 --> 00:29:34,020
back to run whenever auto back to run

00:29:32,130 --> 00:29:52,980
whatever it does give me all that

00:29:34,020 --> 00:29:55,650
information this might be slightly

00:29:52,980 --> 00:29:58,680
different from that but it's based on

00:29:55,650 --> 00:30:01,650
that the people walk on three bits is

00:29:58,680 --> 00:30:03,120
nothing which is insane because it means

00:30:01,650 --> 00:30:07,020
that your log doesn't have things like

00:30:03,120 --> 00:30:08,040
time so if you're using the post-credits

00:30:07,020 --> 00:30:12,000
built-in logging

00:30:08,040 --> 00:30:15,240
go modify your logline prefix so here's

00:30:12,000 --> 00:30:17,700
the basics about PTH v8 configuration so

00:30:15,240 --> 00:30:19,140
you essentially you have what kind of

00:30:17,700 --> 00:30:22,290
connection it is whether it's a local

00:30:19,140 --> 00:30:24,390
connection or a TCP or a tcp over SSL or

00:30:22,290 --> 00:30:25,800
not over SSL and then what database

00:30:24,390 --> 00:30:27,870
you're connecting to what user you're

00:30:25,800 --> 00:30:30,180
connecting to where you're coming from

00:30:27,870 --> 00:30:32,400
in terms of address space and then what

00:30:30,180 --> 00:30:33,910
method to use for authentication talk

00:30:32,400 --> 00:30:36,010
about that in a minute

00:30:33,910 --> 00:30:38,080
the important thing here is that this is

00:30:36,010 --> 00:30:40,450
ran in order first one matches first

00:30:38,080 --> 00:30:42,940
match wins right so you're gonna have

00:30:40,450 --> 00:30:46,210
special database called Paul or same

00:30:42,940 --> 00:30:48,730
user you can put user couple you can

00:30:46,210 --> 00:30:51,370
also have the addresses being either be

00:30:48,730 --> 00:30:53,230
for or v6 and then there's a special

00:30:51,370 --> 00:30:55,990
method called reject which denies access

00:30:53,230 --> 00:30:57,850
so again this is top to bottom first

00:30:55,990 --> 00:31:00,840
match wins the first match is a reject

00:30:57,850 --> 00:31:02,560
mine then the connection is rejected

00:31:00,840 --> 00:31:04,330
otherwise it uses one of these

00:31:02,560 --> 00:31:06,060
authentication methods these are the

00:31:04,330 --> 00:31:08,980
ones that I would recommend that you use

00:31:06,060 --> 00:31:10,810
peer is a great authentication method it

00:31:08,980 --> 00:31:13,060
basically punched to the UNIX socket and

00:31:10,810 --> 00:31:16,120
says UNIX socket tell me who the user is

00:31:13,060 --> 00:31:17,290
whoever the user is is who that user

00:31:16,120 --> 00:31:19,930
will be considered to be authenticated

00:31:17,290 --> 00:31:21,420
as inside those credits and that's great

00:31:19,930 --> 00:31:26,230
that's very secure

00:31:21,420 --> 00:31:29,020
GSS also known as Kerberos or SSPI if

00:31:26,230 --> 00:31:31,920
you're on a Windows platform if you're

00:31:29,020 --> 00:31:34,180
coming from a Windows platform into

00:31:31,920 --> 00:31:36,550
postgrads on a length platform you can

00:31:34,180 --> 00:31:39,400
still use this right and actually

00:31:36,550 --> 00:31:44,080
vice-versa - but why would you run post

00:31:39,400 --> 00:31:46,330
custom windows I do recommend using GSS

00:31:44,080 --> 00:31:48,670
it is a really great authentication

00:31:46,330 --> 00:31:51,190
method integrates great with Active

00:31:48,670 --> 00:31:53,170
Directory I just wrote a blog post about

00:31:51,190 --> 00:31:55,900
how to do it so if you're not sure go

00:31:53,170 --> 00:31:59,500
read my blog post and it's just

00:31:55,900 --> 00:32:03,220
basically a good strong authentication

00:31:59,500 --> 00:32:04,840
method certificate-based is also

00:32:03,220 --> 00:32:07,600
acceptable but it means you have to

00:32:04,840 --> 00:32:09,400
maintain this whole certificate

00:32:07,600 --> 00:32:11,260
hierarchy thing right and you have to

00:32:09,400 --> 00:32:12,100
have a certificate authority in the

00:32:11,260 --> 00:32:13,570
whole bit

00:32:12,100 --> 00:32:14,350
you have to roll your certificate

00:32:13,570 --> 00:32:17,019
authorities

00:32:14,350 --> 00:32:19,779
it's a whole complicated mess but it's

00:32:17,019 --> 00:32:22,029
very secure so if you want to have care

00:32:19,779 --> 00:32:23,620
a lot about security using client-side

00:32:22,029 --> 00:32:25,720
certificates is definitely a good

00:32:23,620 --> 00:32:29,019
solution as well then there are the

00:32:25,720 --> 00:32:32,529
methods that are alright they're not as

00:32:29,019 --> 00:32:35,350
good as the first list but they can be

00:32:32,529 --> 00:32:37,630
okay the first one is scram

00:32:35,350 --> 00:32:42,580
so this is it scram is a new option that

00:32:37,630 --> 00:32:44,019
was added to post ghost 10 I think it's

00:32:42,580 --> 00:32:46,120
called the salted challenge of

00:32:44,019 --> 00:32:47,879
authentication method it's password

00:32:46,120 --> 00:32:50,320
based but otherwise is quite strong

00:32:47,879 --> 00:32:51,519
password based authentication methods

00:32:50,320 --> 00:32:54,250
suck

00:32:51,519 --> 00:32:57,399
they just do but at least this one's

00:32:54,250 --> 00:32:59,500
pretty strong so this one the server

00:32:57,399 --> 00:33:01,419
never knows the users actual password

00:32:59,500 --> 00:33:03,460
for one thing which is really really

00:33:01,419 --> 00:33:05,889
nice right because that means if your

00:33:03,460 --> 00:33:08,429
server gets popped the you know attacker

00:33:05,889 --> 00:33:13,929
does not automatically get your password

00:33:08,429 --> 00:33:16,149
right which is really nice so and the

00:33:13,929 --> 00:33:17,919
client never knows the server secret

00:33:16,149 --> 00:33:20,289
right the server has a secret as well

00:33:17,919 --> 00:33:22,690
and the client never knows about it so

00:33:20,289 --> 00:33:26,049
that's also really nice so there's some

00:33:22,690 --> 00:33:31,059
really good properties of scram Pam

00:33:26,049 --> 00:33:32,980
radius and password are all also ok all

00:33:31,059 --> 00:33:35,769
of them meaning that the user's password

00:33:32,980 --> 00:33:38,110
is sent to the Postgres server and in

00:33:35,769 --> 00:33:40,299
some way shape or form so you have to be

00:33:38,110 --> 00:33:41,200
using SSL and you have to trust that

00:33:40,299 --> 00:33:44,259
your Posca server

00:33:41,200 --> 00:33:47,049
never gets caught or the attacker can

00:33:44,259 --> 00:33:48,519
monitor that server and discover what

00:33:47,049 --> 00:33:51,879
your passwords are as you authenticate

00:33:48,519 --> 00:33:53,440
to the system radius is there's a caveat

00:33:51,879 --> 00:33:55,269
on that one right because typically with

00:33:53,440 --> 00:33:57,789
radius you have a one-time password

00:33:55,269 --> 00:34:00,010
token in which case they only get your

00:33:57,789 --> 00:34:02,679
pin they don't actually get the the one

00:34:00,010 --> 00:34:07,480
password code so that's a little bit

00:34:02,679 --> 00:34:11,379
better the ones that I really recommend

00:34:07,480 --> 00:34:14,070
you avoid are md5 that's old and is

00:34:11,379 --> 00:34:18,460
really deprecated now use scram instead

00:34:14,070 --> 00:34:21,730
LDAP which has the same problem of the

00:34:18,460 --> 00:34:23,409
password gets sent over the wire and yes

00:34:21,730 --> 00:34:25,990
you can encrypt it but it still is not

00:34:23,409 --> 00:34:27,730
ideal and now that happened if you're

00:34:25,990 --> 00:34:31,270
using LDAP it probably means that you

00:34:27,730 --> 00:34:33,040
have a single sign-on environment which

00:34:31,270 --> 00:34:36,250
means that if that post-grad server gets

00:34:33,040 --> 00:34:38,560
popped they get the password that is the

00:34:36,250 --> 00:34:41,590
authentication password to your account

00:34:38,560 --> 00:34:43,270
on the entire domain which means that

00:34:41,590 --> 00:34:45,879
they can access any other resources as

00:34:43,270 --> 00:34:47,109
you write at least with password or with

00:34:45,879 --> 00:34:49,389
Pam or something you could have a

00:34:47,109 --> 00:34:51,250
password that is specific to that server

00:34:49,389 --> 00:34:53,679
so that if that server gets broken into

00:34:51,250 --> 00:34:55,359
they don't get any farther right with

00:34:53,679 --> 00:34:57,520
LDAP you end up not doing that and

00:34:55,359 --> 00:34:58,720
you're typically running LDAP in an

00:34:57,520 --> 00:35:00,730
environment where you have active

00:34:58,720 --> 00:35:05,260
directory and Kerberos and you should

00:35:00,730 --> 00:35:07,180
just use that I doubt I think we

00:35:05,260 --> 00:35:09,520
actually rip that out finally but it's

00:35:07,180 --> 00:35:11,260
terrible don't use it and then Trust is

00:35:09,520 --> 00:35:13,750
just by passing all authentication

00:35:11,260 --> 00:35:16,330
there's some very difficuit instance for

00:35:13,750 --> 00:35:19,570
it but I'm not going to go into those PD

00:35:16,330 --> 00:35:22,000
ident so PD ident is a way of mapping

00:35:19,570 --> 00:35:24,880
from whatever you authenticate it as

00:35:22,000 --> 00:35:27,040
whatever user usne cated as to a

00:35:24,880 --> 00:35:29,440
post-grad user rain you can provide a

00:35:27,040 --> 00:35:31,900
map name you can configure in your PG

00:35:29,440 --> 00:35:33,250
hbo.com so this is basically if you're

00:35:31,900 --> 00:35:35,859
using some of these more advanced

00:35:33,250 --> 00:35:37,450
methods like GSS or certificate based

00:35:35,859 --> 00:35:39,430
authentication this is how you can

00:35:37,450 --> 00:35:41,590
create a user mapping from the

00:35:39,430 --> 00:35:45,119
authentication user to a simpler user

00:35:41,590 --> 00:35:45,119
names database which is nice

00:35:45,340 --> 00:35:48,970
all right so let's talk a little bit

00:35:47,200 --> 00:35:51,130
about running bellows breath so is

00:35:48,970 --> 00:35:53,920
Postgres up right you can just use a

00:35:51,130 --> 00:35:55,810
service most cuzco status and that gives

00:35:53,920 --> 00:35:58,210
you the status from system deep you can

00:35:55,810 --> 00:36:00,670
then also go binary called PG is ready

00:35:58,210 --> 00:36:02,680
and then again if you're on a Debian

00:36:00,670 --> 00:36:05,200
system you can pass in this cluster

00:36:02,680 --> 00:36:08,530
option to have PG as ready call for a

00:36:05,200 --> 00:36:10,420
specific cluster you can also connect to

00:36:08,530 --> 00:36:12,130
the database using psql to discover if

00:36:10,420 --> 00:36:14,380
it's up and on line this is what that

00:36:12,130 --> 00:36:17,050
looks like on a Debian based system

00:36:14,380 --> 00:36:20,260
where I passed in - - Buster where you

00:36:17,050 --> 00:36:22,330
straight forward the SQL is typically

00:36:20,260 --> 00:36:25,780
your user interface - Postgres it's

00:36:22,330 --> 00:36:28,450
really powerful it's really handy all

00:36:25,780 --> 00:36:30,810
the psql commands start with a backslash

00:36:28,450 --> 00:36:33,280
you do that back slash question mark

00:36:30,810 --> 00:36:36,150
anything else that you send into P SQL

00:36:33,280 --> 00:36:38,260
will be sent to the server as a query me

00:36:36,150 --> 00:36:40,150
back slash question mark gives you all

00:36:38,260 --> 00:36:43,060
the different bachelors commands if you

00:36:40,150 --> 00:36:46,240
want to get SQL syntax help backslash H

00:36:43,060 --> 00:36:48,880
will give you the SQL syntax for select

00:36:46,240 --> 00:36:51,520
create table create index whatever you

00:36:48,880 --> 00:36:54,490
want it's really really nice

00:36:51,520 --> 00:36:57,870
backslash Q or ctrl T won't quit

00:36:54,490 --> 00:37:01,690
I believe guy you can also type quit and

00:36:57,870 --> 00:37:03,880
PSP over quit if that's all it gets that

00:37:01,690 --> 00:37:08,680
was like some new addition into 11 to 10

00:37:03,880 --> 00:37:10,660
or something all queries return tables

00:37:08,680 --> 00:37:12,400
or command results and you can see

00:37:10,660 --> 00:37:14,110
expand that output by doing fax that

00:37:12,400 --> 00:37:16,290
checks so if you want to see who's

00:37:14,110 --> 00:37:18,790
connected to your post code server

00:37:16,290 --> 00:37:19,870
backslash X gives you the expanded view

00:37:18,790 --> 00:37:22,910
that means you

00:37:19,870 --> 00:37:25,100
Grover every column and then you can run

00:37:22,910 --> 00:37:27,500
this table command table is a sequel

00:37:25,100 --> 00:37:31,640
standard query by the way that's part of

00:37:27,500 --> 00:37:33,500
the sequel standard which one but table

00:37:31,640 --> 00:37:36,740
PDS add activity it's like a select star

00:37:33,500 --> 00:37:39,710
and then you can see a record for every

00:37:36,740 --> 00:37:42,080
user who is connected currently to the

00:37:39,710 --> 00:37:44,440
database and you may also see back-end

00:37:42,080 --> 00:37:47,390
different back-end processes that are

00:37:44,440 --> 00:37:49,850
operating inside a PD set activity which

00:37:47,390 --> 00:37:52,700
is nice you can see a list of what

00:37:49,850 --> 00:37:53,960
databases exist using backslash L then

00:37:52,700 --> 00:37:56,330
there's a whole bunch of other commands

00:37:53,960 --> 00:37:59,720
inside of P SQL that are really really

00:37:56,330 --> 00:38:00,830
handy here you can see I've got a post

00:37:59,720 --> 00:38:03,560
against database and then I have a

00:38:00,830 --> 00:38:05,990
template 0 database what are templates

00:38:03,560 --> 00:38:07,820
so whenever you want to create database

00:38:05,990 --> 00:38:10,910
command post Chris basically wants to

00:38:07,820 --> 00:38:13,100
copy an existing database and make it

00:38:10,910 --> 00:38:16,430
the new database whatever the new name

00:38:13,100 --> 00:38:18,830
is the source database is considered a

00:38:16,430 --> 00:38:21,110
template and by default we use something

00:38:18,830 --> 00:38:23,060
called template one and you can actually

00:38:21,110 --> 00:38:25,100
connect the template 1 and add new

00:38:23,060 --> 00:38:27,140
objects to it if you want right you can

00:38:25,100 --> 00:38:29,150
install extensions and then when you run

00:38:27,140 --> 00:38:32,060
create in a base will copy those Olive

00:38:29,150 --> 00:38:36,230
walk out of that template this can be

00:38:32,060 --> 00:38:37,820
pretty handy if you screw it up badly

00:38:36,230 --> 00:38:39,620
enough you might have a case where you

00:38:37,820 --> 00:38:43,910
can't run create enemies anymore but you

00:38:39,620 --> 00:38:45,290
do your results are garbage and this is

00:38:43,910 --> 00:38:48,680
why we have something called template 0

00:38:45,290 --> 00:38:51,260
which is basically a if you screwed up

00:38:48,680 --> 00:38:53,710
template 1 bad enough you can explicitly

00:38:51,260 --> 00:38:56,540
do it create database from template 0

00:38:53,710 --> 00:39:01,610
this does require you never modify

00:38:56,540 --> 00:39:03,230
template 0 don't do that it is a little

00:39:01,610 --> 00:39:05,750
bit hard to do but you can't do it you

00:39:03,230 --> 00:39:08,210
have to set it as allowing connections

00:39:05,750 --> 00:39:10,610
and then connect to it modify it but if

00:39:08,210 --> 00:39:12,620
you do that sorry

00:39:10,610 --> 00:39:13,930
good luck if you break it you get to

00:39:12,620 --> 00:39:17,230
keep both pieces

00:39:13,930 --> 00:39:18,520
alright those two main uses ways of

00:39:17,230 --> 00:39:21,300
creating users in Postgres

00:39:18,520 --> 00:39:24,490
there's this create user UNIX command

00:39:21,300 --> 00:39:26,710
and then if you actually connect to the

00:39:24,490 --> 00:39:29,980
database using psql you can also run

00:39:26,710 --> 00:39:32,800
create user which is pretty handy you

00:39:29,980 --> 00:39:35,110
can also run create role or create group

00:39:32,800 --> 00:39:38,440
I think office loaded still works create

00:39:35,110 --> 00:39:41,800
group is basically create role create

00:39:38,440 --> 00:39:44,830
role is like great group create user is

00:39:41,800 --> 00:39:46,540
create role with logging rights so the

00:39:44,830 --> 00:39:48,610
only real difference between users and

00:39:46,540 --> 00:39:50,890
groups in both cases which one is

00:39:48,610 --> 00:39:53,110
allowed to walk in or not

00:39:50,890 --> 00:39:57,640
otherwise they they act basically the

00:39:53,110 --> 00:39:59,530
same all right so here are different

00:39:57,640 --> 00:40:02,440
user privileges if you're standing up

00:39:59,530 --> 00:41:04,600
some residents don't give people super

00:40:02,440 --> 00:41:10,080
user access you should actually do a

00:41:04,600 --> 00:41:10,080
role change roles to different world

00:41:57,560 --> 00:42:06,840
and I've been to Joe right emori enjoys

00:42:04,560 --> 00:42:08,040
the rights of Joe having users with not

00:42:06,840 --> 00:42:11,550
the rights

00:42:08,040 --> 00:42:13,410
Joe control post press once that several

00:42:11,550 --> 00:42:16,680
happens Joe also becomes a superb user

00:42:13,410 --> 00:42:18,510
right kind of likes to go to the roof

00:42:16,680 --> 00:42:20,730
currently there isn't any way to require

00:42:18,510 --> 00:42:22,770
a password for set role though right

00:42:20,730 --> 00:42:26,880
unlike pseudo so something to be aware

00:42:22,770 --> 00:42:28,940
of all right so I'm not gonna cover all

00:42:26,880 --> 00:42:31,350
different permissions but they're here

00:42:28,940 --> 00:42:34,680
for all the different types of objects

00:42:31,350 --> 00:42:36,060
that exist inside of Postgres by default

00:42:34,680 --> 00:42:38,160
postings in Postgres

00:42:36,060 --> 00:42:39,570
are secure when you create a new object

00:42:38,160 --> 00:42:42,240
inside of those grounds it typically

00:42:39,570 --> 00:42:45,200
doesn't allow anyone else to access that

00:42:42,240 --> 00:42:48,090
the one exception to that are functions

00:42:45,200 --> 00:42:51,210
so functions by default when you created

00:42:48,090 --> 00:42:52,860
the execute privileges granted which is

00:42:51,210 --> 00:42:57,240
a little bit scary especially if you're

00:42:52,860 --> 00:42:59,250
playing around creating essentially sent

00:42:57,240 --> 00:43:00,810
UID functions which you can do in post

00:42:59,250 --> 00:43:02,040
credits are called security the finder

00:43:00,810 --> 00:43:04,740
functions

00:43:02,040 --> 00:43:07,260
the way around this is certain

00:43:04,740 --> 00:43:10,110
transaction create your function revoked

00:43:07,260 --> 00:43:12,300
execute from public right and before you

00:43:10,110 --> 00:43:13,800
commit that transaction that way no one

00:43:12,300 --> 00:43:16,760
else could have seen that function until

00:43:13,800 --> 00:43:18,810
after you've remote rights to it

00:43:16,760 --> 00:43:20,850
there's some other handy things that you

00:43:18,810 --> 00:43:23,790
can set default privileges and you can

00:43:20,850 --> 00:43:26,400
grant access on all objects in this EEMA

00:43:23,790 --> 00:43:27,200
so those are pretty nice as well to be

00:43:26,400 --> 00:43:29,490
aware of them

00:43:27,200 --> 00:43:32,400
there's database size information in

00:43:29,490 --> 00:43:34,230
both credits so you can query a database

00:43:32,400 --> 00:43:37,080
and say give me how big the database is

00:43:34,230 --> 00:43:40,110
you can also get this information using

00:43:37,080 --> 00:43:42,090
backslash ll plus which will give you

00:43:40,110 --> 00:43:43,650
the size of every database you can get

00:43:42,090 --> 00:43:46,080
the size of individual tables using this

00:43:43,650 --> 00:43:48,240
PG release total relation size that

00:43:46,080 --> 00:43:50,430
actually includes all of the components

00:43:48,240 --> 00:43:52,760
of the relation which is the table all

00:43:50,430 --> 00:43:55,380
the indexes the toast table everything

00:43:52,760 --> 00:43:56,910
there are ways of getting the

00:43:55,380 --> 00:43:59,670
information about the individual pieces

00:43:56,910 --> 00:44:03,080
too if you want it there's a PD relation

00:43:59,670 --> 00:44:03,080
size you can pass in what you want

00:44:03,920 --> 00:44:10,230
so if you wanted to get just the table

00:44:07,109 --> 00:44:12,150
data no indexes etc you can pass in a

00:44:10,230 --> 00:44:14,550
new PT relation size just the table name

00:44:12,150 --> 00:44:17,280
if you wanna get the size the total size

00:44:14,550 --> 00:44:19,500
of all tables in a given schema that's a

00:44:17,280 --> 00:44:22,010
query that'll do it right it's a little

00:44:19,500 --> 00:44:24,390
bit complicated but it's not too bad

00:44:22,010 --> 00:44:26,280
creating table spaces this is pretty

00:44:24,390 --> 00:44:28,140
straightforward so if you are running

00:44:26,280 --> 00:44:29,970
out of space on your main file system

00:44:28,140 --> 00:44:32,760
you want to create a tablespace you can

00:44:29,970 --> 00:44:36,000
basically run create tablespace command

00:44:32,760 --> 00:44:39,079
the directory should already exist be

00:44:36,000 --> 00:44:41,220
owned by Postgres and should be empty

00:44:39,079 --> 00:44:44,190
those are the things and should be said

00:44:41,220 --> 00:44:45,329
to 704 permissions and then you do need

00:44:44,190 --> 00:44:49,650
to specify the full path

00:44:45,329 --> 00:44:51,540
do not put tablespaces directly on mount

00:44:49,650 --> 00:44:53,960
points number one always create a

00:44:51,540 --> 00:44:56,520
directory underneath and number two

00:44:53,960 --> 00:44:58,859
please don't ever put a tablespace in

00:44:56,520 --> 00:45:01,079
your data directory I don't understand

00:44:58,859 --> 00:45:02,819
why people do that but they do don't do

00:45:01,079 --> 00:45:06,000
it it's complicated both cuz even tries

00:45:02,819 --> 00:45:07,410
to make you not able to do that for

00:45:06,000 --> 00:45:08,460
various reasons including things like

00:45:07,410 --> 00:45:11,940
what happens when you to backup some

00:45:08,460 --> 00:45:13,290
stuff but don't do that if you want to

00:45:11,940 --> 00:45:15,569
see the information about tablespace

00:45:13,290 --> 00:45:18,180
this backslash DB will give you all the

00:45:15,569 --> 00:45:19,589
information you need that you need you

00:45:18,180 --> 00:45:22,559
can best of you can also get the

00:45:19,589 --> 00:45:26,010
tablespace size using that tables mid

00:45:22,559 --> 00:45:27,540
size function which is pretty handy and

00:45:26,010 --> 00:45:28,740
if you want to drop table space that's

00:45:27,540 --> 00:45:30,420
pretty straightforward here just drop

00:45:28,740 --> 00:45:31,710
table base whatever but you might have

00:45:30,420 --> 00:45:34,140
to connect to all the different

00:45:31,710 --> 00:45:35,579
databases and issue drop command for all

00:45:34,140 --> 00:45:37,960
the objects in order to actually get

00:45:35,579 --> 00:45:39,280
them all drop from all of the

00:45:37,960 --> 00:45:41,380
all the objects dropped before you from

00:45:39,280 --> 00:45:43,120
coffee tables bits alright if you want

00:45:41,380 --> 00:45:45,520
to do backups with post-credit embrace

00:45:43,120 --> 00:45:47,470
you care about backups the first one is

00:45:45,520 --> 00:45:49,390
pretty good for using PG base backup

00:45:47,470 --> 00:45:51,370
it's actually a very good tool I

00:45:49,390 --> 00:45:53,350
recommend that if you're going to use it

00:45:51,370 --> 00:45:56,140
you should PG base back up into a

00:45:53,350 --> 00:45:58,390
tarball or into using the tar format

00:45:56,140 --> 00:46:01,240
that way they'll be compressed it checks

00:45:58,390 --> 00:46:03,280
out right because Zima automatically

00:46:01,240 --> 00:46:06,790
does that for you so you know if the

00:46:03,280 --> 00:46:09,160
backups any good or not if you do a PG

00:46:06,790 --> 00:46:11,410
based backup into a directory you don't

00:46:09,160 --> 00:46:13,900
actually know if that backup has been

00:46:11,410 --> 00:46:15,520
later modified or corrupted dudeism on

00:46:13,900 --> 00:46:17,470
disk corruption because there's no

00:46:15,520 --> 00:46:20,260
checks for that the only thing that you

00:46:17,470 --> 00:46:22,240
might have or page-level CRC's which is

00:46:20,260 --> 00:46:24,370
good another nothing but that involves

00:46:22,240 --> 00:46:26,380
restore the database and starting up

00:46:24,370 --> 00:46:28,750
those friends and then accessing that

00:46:26,380 --> 00:46:31,870
page to discover that which can be a

00:46:28,750 --> 00:46:34,810
little bit of noxious note that you have

00:46:31,870 --> 00:46:36,580
to have your wall files right so a PG

00:46:34,810 --> 00:46:38,410
base backup when you run it you can tell

00:46:36,580 --> 00:46:39,880
it give me the wall files for this you

00:46:38,410 --> 00:46:41,530
have to have the wall pause for a

00:46:39,880 --> 00:46:44,170
consistent backup you don't have the

00:46:41,530 --> 00:46:45,760
wall files it's not consistent so be

00:46:44,170 --> 00:46:48,850
aware of that

00:46:45,760 --> 00:46:51,190
it does nicely also include indexes it's

00:46:48,850 --> 00:46:52,870
not just tables so what it means is that

00:46:51,190 --> 00:46:55,300
you don't have to like rebuild your

00:46:52,870 --> 00:46:56,890
indexes that's different for logical

00:46:55,300 --> 00:46:58,960
based backups so there's a logical base

00:46:56,890 --> 00:47:00,940
backup tool called PG dump and pin you

00:46:58,960 --> 00:47:03,940
down ball which give you essentially

00:47:00,940 --> 00:47:05,410
logic over text based backups right this

00:47:03,940 --> 00:47:07,690
is kind of like exporting all the data

00:47:05,410 --> 00:47:10,450
but the indexes are not included the

00:47:07,690 --> 00:47:12,370
foreign keys are not included directly

00:47:10,450 --> 00:47:14,560
right there they're included us create

00:47:12,370 --> 00:47:16,030
foreign key commands what that means is

00:47:14,560 --> 00:47:18,130
that when you have to go to restore or a

00:47:16,030 --> 00:47:21,160
logical backup it ends up being very

00:47:18,130 --> 00:47:23,920
very slow right it's much slower than

00:47:21,160 --> 00:47:25,210
restoring a file-based backup so you

00:47:23,920 --> 00:47:27,820
have to be thinking about this in terms

00:47:25,210 --> 00:47:30,220
of your restore timeline right like if

00:47:27,820 --> 00:47:33,070
that deployment of the app

00:47:30,220 --> 00:47:35,170
ocation went south and you needed to go

00:47:33,070 --> 00:47:37,570
run to your latest backup and restore it

00:47:35,170 --> 00:47:39,460
what are you going to do right you

00:47:37,570 --> 00:47:41,980
probably don't want to reinforce all the

00:47:39,460 --> 00:47:43,630
data from your P genome recreate all of

00:47:41,980 --> 00:47:45,099
your indexes and revalidate all your

00:47:43,630 --> 00:47:47,140
foreign keys because it's going to take

00:47:45,099 --> 00:47:49,390
forever do you have a database of any

00:47:47,140 --> 00:47:52,480
size so instead you should be thinking

00:47:49,390 --> 00:47:53,560
about having file level backups and that

00:47:52,480 --> 00:47:56,109
also gives you the ability to have

00:47:53,560 --> 00:47:59,770
restore points and do plenty time

00:47:56,109 --> 00:48:01,510
recovery and be able to do things and

00:47:59,770 --> 00:48:03,730
have like all your indexes and whatnot

00:48:01,510 --> 00:48:07,540
so is that cycle becomes much much

00:48:03,730 --> 00:48:14,040
shorter when you're using a file base

00:48:07,540 --> 00:48:18,099
backup be sure to test your restores

00:48:14,040 --> 00:48:20,020
don't assume they work right I don't

00:48:18,099 --> 00:48:21,820
care what your backup methodology is if

00:48:20,020 --> 00:48:23,290
you are using PD dump you have to be

00:48:21,820 --> 00:48:25,990
testing that you can actually restore it

00:48:23,290 --> 00:48:27,520
you're not testing that your backups are

00:48:25,990 --> 00:48:30,160
actually good and that you can restore

00:48:27,520 --> 00:48:32,170
from them you don't have any all right

00:48:30,160 --> 00:48:34,960
that says what I tell people you have to

00:48:32,170 --> 00:48:36,609
be testing these things you should be

00:48:34,960 --> 00:48:38,950
thinking about things like restoring

00:48:36,609 --> 00:48:40,780
from off-site failed overfilled back and

00:48:38,950 --> 00:48:44,260
how much data loss and how much downtime

00:48:40,780 --> 00:48:46,300
are acceptable to restore a PD based

00:48:44,260 --> 00:48:47,530
backup that's pretty straightforward II

00:48:46,300 --> 00:48:48,849
basically just have to extract the

00:48:47,530 --> 00:48:53,859
tarball and do a directory and start

00:48:48,849 --> 00:48:56,050
postgrads right very straightforward PG

00:48:53,859 --> 00:48:58,000
backrests so this is a tool that I

00:48:56,050 --> 00:49:01,089
strongly recommend for anybody who wants

00:48:58,000 --> 00:49:03,010
to go run file based back up with

00:49:01,089 --> 00:49:05,290
post-credits it's got a lot of really

00:49:03,010 --> 00:49:07,390
cool features it's built to scale it

00:49:05,290 --> 00:49:11,170
handles petabytes size databases and

00:49:07,390 --> 00:49:13,540
it's actually very very fast right so

00:49:11,170 --> 00:49:14,619
you really want to be thinking about PG

00:49:13,540 --> 00:49:18,039
backrest

00:49:14,619 --> 00:49:19,240
your go-to tool in my opinion if you

00:49:18,039 --> 00:49:22,119
want it if you're doing file based

00:49:19,240 --> 00:49:24,400
backup so it has compression it does

00:49:22,119 --> 00:49:27,249
check something of all files it backs up

00:49:24,400 --> 00:49:28,749
it does actual validation of all the

00:49:27,249 --> 00:49:31,720
page level check so instead of both

00:49:28,749 --> 00:49:35,200
friends and it's it's just great

00:49:31,720 --> 00:49:37,539
so strongly recommended there are some

00:49:35,200 --> 00:49:40,599
changes you have to make to your focus

00:49:37,539 --> 00:49:47,109
pill comp in order to be able to utilize

00:49:40,599 --> 00:49:48,220
that not your done it 3:30 yeah all

00:49:47,109 --> 00:49:49,269
right I got eight minutes so I'm gonna

00:49:48,220 --> 00:49:51,460
go to the past here

00:49:49,269 --> 00:49:53,259
so this is what you have to do inside of

00:49:51,460 --> 00:49:54,970
your book is go comp to set this up

00:49:53,259 --> 00:49:58,599
basically the main thing is the archive

00:49:54,970 --> 00:50:00,279
command there's a couple steps for

00:49:58,599 --> 00:50:02,259
configuring PG back rest there's

00:50:00,279 --> 00:50:03,819
actually a whole user guide on PG

00:50:02,259 --> 00:50:05,769
backrest at work that you can go through

00:50:03,819 --> 00:50:07,390
this really straightforward there is an

00:50:05,769 --> 00:50:11,049
info command to see all the information

00:50:07,390 --> 00:50:12,460
about euro ADA's backups and also

00:50:11,049 --> 00:50:14,890
includes these days information about

00:50:12,460 --> 00:50:17,140
you're right ahead log what are you

00:50:14,890 --> 00:50:18,880
monitoring check post res if you're

00:50:17,140 --> 00:50:20,980
using Nagios I change mrtg

00:50:18,880 --> 00:50:24,339
the check post read package is really

00:50:20,980 --> 00:50:25,869
nice for getting you lots of things to

00:50:24,339 --> 00:50:28,569
check these are the things that I

00:50:25,869 --> 00:50:30,670
recommend checking there is also PG

00:50:28,569 --> 00:50:33,400
monitor which if you're running from

00:50:30,670 --> 00:50:36,009
atheist which is a great set of metrics

00:50:33,400 --> 00:50:38,680
collection tools PG monitor is really

00:50:36,009 --> 00:50:41,589
good for that if you want to powder your

00:50:38,680 --> 00:50:43,029
log files there is the Taylor Mail

00:50:41,589 --> 00:50:45,789
program which actually understands the

00:50:43,029 --> 00:50:47,739
Postgres block format is pretty nice you

00:50:45,789 --> 00:50:49,839
can also process your blog you can also

00:50:47,739 --> 00:50:52,210
have your log file as good as CSV and

00:50:49,839 --> 00:50:54,430
then do things like process those CSV

00:50:52,210 --> 00:50:57,210
files you can also configure postgrads

00:50:54,430 --> 00:50:59,280
to send blogs to syslog which can then

00:50:57,210 --> 00:51:03,990
Splunk or whatever your enterprise

00:50:59,280 --> 00:51:05,970
solution is for for walking on so I'm

00:51:03,990 --> 00:51:08,910
gonna cover these things really quickly

00:51:05,970 --> 00:51:11,059
increase shared buffers increase work

00:51:08,910 --> 00:51:15,270
mail increase maintenance work map

00:51:11,059 --> 00:51:17,940
increase effective gas sides make auto

00:51:15,270 --> 00:51:19,410
vacuum go faster is by default auto

00:51:17,940 --> 00:51:21,420
vacuum doesn't go fast enough those

00:51:19,410 --> 00:51:25,050
times if you see auto vacuum running

00:51:21,420 --> 00:51:27,690
you probably want that to happen number

00:51:25,050 --> 00:51:29,190
one and if you see it happening a lot it

00:51:27,690 --> 00:51:31,170
might be because it's not going fast

00:51:29,190 --> 00:51:33,420
enough you have a lot of rights you

00:51:31,170 --> 00:51:35,400
should be thinking about hey maybe I

00:51:33,420 --> 00:51:37,349
need to make auto vacuum more aggressive

00:51:35,400 --> 00:51:39,660
right because you don't want it to fall

00:51:37,349 --> 00:51:42,630
behind if it falls behind you can get

00:51:39,660 --> 00:51:44,520
into some really bad bad states so you

00:51:42,630 --> 00:51:48,300
can increase the number of max workers

00:51:44,520 --> 00:51:51,809
and you can decrease the cost of leg to

00:51:48,300 --> 00:51:53,309
make automatic even go faster the

00:51:51,809 --> 00:51:55,290
defaults are really only good for very

00:51:53,309 --> 00:52:01,230
low transaction rate systems so be aware

00:51:55,290 --> 00:52:03,750
of that managing connections so consider

00:52:01,230 --> 00:52:05,880
using a pool if you have to increase max

00:52:03,750 --> 00:52:08,280
connections over 100 you should be using

00:52:05,880 --> 00:52:11,069
their connection cooler like PG bouncer

00:52:08,280 --> 00:52:12,510
is my favorite it's fantastic you should

00:52:11,069 --> 00:52:15,420
be writing your applications if you can

00:52:12,510 --> 00:52:18,119
use PD bouncer in transaction mode which

00:52:15,420 --> 00:52:20,849
is fantastic and that also gives you

00:52:18,119 --> 00:52:24,059
things like the ability to do fail overs

00:52:20,849 --> 00:52:26,630
which are completely transparent to the

00:52:24,059 --> 00:52:29,790
application which is freaking awesome

00:52:26,630 --> 00:52:33,240
right so be looking at PG bouncer for

00:52:29,790 --> 00:52:34,950
doing that it's great PG pool was all

00:52:33,240 --> 00:52:37,170
right that I consider it to be too much

00:52:34,950 --> 00:52:40,829
of what it's doing it tries to do

00:52:37,170 --> 00:52:44,640
so I like my ptl's are a lot managing

00:52:40,829 --> 00:52:46,859
locks so focus has a limited set of

00:52:44,640 --> 00:52:49,140
locks called and those are configured

00:52:46,859 --> 00:52:50,339
through max lock for transaction you may

00:52:49,140 --> 00:52:53,730
want to increase them if you have a lot

00:52:50,339 --> 00:52:55,010
of objects in your database system we

00:52:53,730 --> 00:52:57,750
talked a lot about checkpoints already

00:52:55,010 --> 00:53:01,260
PG badger the PD badger is a really

00:52:57,750 --> 00:53:03,569
great log analysis tool it produces some

00:53:01,260 --> 00:53:05,880
really pretty reports so if you're doing

00:53:03,569 --> 00:53:08,640
a lot of walking with Postgres seriously

00:53:05,880 --> 00:53:10,049
consider installing PG badger and having

00:53:08,640 --> 00:53:11,490
you dinner rate your reports for you

00:53:10,049 --> 00:53:18,359
so you can check out what's going on

00:53:11,490 --> 00:53:24,420
questions god I got five minutes yes go

00:53:18,359 --> 00:53:28,190
for it Chris just kind of a question

00:53:24,420 --> 00:53:32,430
comment we mentioned that I'm using it

00:53:28,190 --> 00:53:34,230
to me that where people are using LDAP

00:53:32,430 --> 00:53:37,410
as a single sign-on but they're not

00:53:34,230 --> 00:53:40,380
using Active Directory would you

00:53:37,410 --> 00:53:42,660
particularly recommend like pushing them

00:53:40,380 --> 00:53:45,089
in the direction of using L that mimics

00:53:42,660 --> 00:53:50,039
a certificate authority and certain step

00:53:45,089 --> 00:53:50,819
or if it was me I would say install MIT

00:53:50,039 --> 00:53:53,250
KDC

00:53:50,819 --> 00:53:55,289
and run up run a Kerberos environment

00:53:53,250 --> 00:53:56,849
it's actually you know once you

00:53:55,289 --> 00:53:59,549
understand the basics of Kerberos it's

00:53:56,849 --> 00:54:01,019
not that hard it's actually if you want

00:53:59,549 --> 00:54:02,460
I use alone it's a heck of a lot simpler

00:54:01,019 --> 00:54:05,039
than Active Directory is to run it

00:54:02,460 --> 00:54:07,440
manually so that would be the direction

00:54:05,039 --> 00:54:09,630
I would go in yes you can also do a

00:54:07,440 --> 00:54:11,339
certificate authority and deploy science

00:54:09,630 --> 00:54:16,009
asserts and server-side search and all

00:54:11,339 --> 00:54:16,009
bit Carozza dear

00:54:20,410 --> 00:54:25,820
yes it also means the other nice thing

00:54:23,510 --> 00:54:26,510
about Kerberos for those that don't

00:54:25,820 --> 00:54:29,600
realize it

00:54:26,510 --> 00:54:34,420
connections to the Kerberos missions

00:54:29,600 --> 00:54:54,890
using the Kerberos do not pull the KDC

00:54:34,420 --> 00:54:58,960
right so the message is actually really

00:54:54,890 --> 00:55:01,610
fast it doesn't involve the the

00:54:58,960 --> 00:55:05,150
additional outside network connection

00:55:01,610 --> 00:55:08,480
garbage that the LDAP stuff does so it's

00:55:05,150 --> 00:55:10,870
much more reliable because of that other

00:55:08,480 --> 00:55:10,870
questions

00:55:13,790 --> 00:55:23,480
generally talk I want to discuss Iran

00:55:18,490 --> 00:55:27,710
running Postgres in Linux kernel servers

00:55:23,480 --> 00:55:29,720
and in states maintainer such as doctor

00:55:27,710 --> 00:55:31,460
because there are varying documents and

00:55:29,720 --> 00:55:34,180
people can see a problem about it

00:55:31,460 --> 00:55:37,520
because it needs maintenance easier some

00:55:34,180 --> 00:55:43,370
see performance problems but something

00:55:37,520 --> 00:55:46,070
say I like the reason sure sure I'm

00:55:43,370 --> 00:55:47,660
happy to talk about that so we actually

00:55:46,070 --> 00:55:49,910
crunchy actually has a whole container

00:55:47,660 --> 00:55:52,580
suite of containers for running

00:55:49,910 --> 00:55:54,500
postgrads in containers I don't

00:55:52,580 --> 00:55:57,290
recommend docker because I consider

00:55:54,500 --> 00:56:00,140
docker to be less than production ready

00:55:57,290 --> 00:56:01,730
if you want my two cents on it but in

00:56:00,140 --> 00:56:02,450
general I don't see a problem using

00:56:01,730 --> 00:56:05,750
cgroups

00:56:02,450 --> 00:56:07,910
in fact I was part of the people that

00:56:05,750 --> 00:56:09,980
were running Linux virtual servers way

00:56:07,910 --> 00:56:11,570
way back which we're essentially the

00:56:09,980 --> 00:56:13,010
precursor to see groups and I did it

00:56:11,570 --> 00:56:14,990
with close friends right

00:56:13,010 --> 00:56:16,340
the really big important thing that you

00:56:14,990 --> 00:56:18,290
need to be thinking about when you're

00:56:16,340 --> 00:56:20,000
running a container based environment is

00:56:18,290 --> 00:56:22,100
not typically the fact that you're

00:56:20,000 --> 00:56:24,590
running secrets right and I don't see

00:56:22,100 --> 00:56:26,360
performance issues with secrets where

00:56:24,590 --> 00:56:27,800
you run into issues is with the storage

00:56:26,360 --> 00:56:29,630
underneath because you're running

00:56:27,800 --> 00:56:30,730
containers often times you're running

00:56:29,630 --> 00:56:33,320
them looking at network file system

00:56:30,730 --> 00:56:35,660
right and that's where you end up having

00:56:33,320 --> 00:56:37,760
pain because those network file systems

00:56:35,660 --> 00:56:40,550
number one they may not be fully POSIX

00:56:37,760 --> 00:56:42,560
compliant or you may not you know have

00:56:40,550 --> 00:56:44,720
configured them to respect things like

00:56:42,560 --> 00:56:48,260
Epson ink and locking right in which

00:56:44,720 --> 00:56:50,840
case you end up with corruption and if

00:56:48,260 --> 00:56:52,490
you do configure them correctly with the

00:56:50,840 --> 00:56:55,010
appropriate locking make sure to respect

00:56:52,490 --> 00:56:57,410
eff sync all of that stuff it's slow

00:56:55,010 --> 00:56:58,530
right and people complain about it being

00:56:57,410 --> 00:57:01,200
slow

00:56:58,530 --> 00:57:03,180
but but yeah you're like sending a

00:57:01,200 --> 00:57:04,860
nesting call to a remote system waiting

00:57:03,180 --> 00:57:07,230
for it to come back there's going to be

00:57:04,860 --> 00:57:08,640
some latency involved right post goes

00:57:07,230 --> 00:57:11,010
does that a lot

00:57:08,640 --> 00:57:12,990
why because you are committing a lot of

00:57:11,010 --> 00:57:14,900
data and you want us to guarantee that

00:57:12,990 --> 00:57:17,510
data has been committed out to disk

00:57:14,900 --> 00:57:20,160
right to do that we have the coalescing

00:57:17,510 --> 00:57:23,760
right so that ends up being being

00:57:20,160 --> 00:57:25,470
expensive so I would say you know

00:57:23,760 --> 00:57:28,260
containers themselves are not the issue

00:57:25,470 --> 00:57:30,360
when it comes to post breads right and

00:57:28,260 --> 00:57:32,340
and you know certainly OpenShift or

00:57:30,360 --> 00:57:34,710
whatever I think is perfectly reasonable

00:57:32,340 --> 00:57:37,320
to run post-prison side up as long as

00:57:34,710 --> 00:57:40,710
you have an underlying file store that

00:57:37,320 --> 00:57:42,270
is you know that has that provides all

00:57:40,710 --> 00:57:47,450
the guarantees the post goes needs to

00:57:42,270 --> 00:57:47,450
operate properly yes

00:57:53,079 --> 00:57:59,500
just just to add to the conversation

00:57:55,660 --> 00:58:01,660
when when he said that docker is not

00:57:59,500 --> 00:58:04,569
production ratings so we run a couple of

00:58:01,660 --> 00:58:07,089
several docker containers and flow my

00:58:04,569 --> 00:58:09,789
clients and there's a script that moves

00:58:07,089 --> 00:58:12,250
data copies data around and checks the

00:58:09,789 --> 00:58:14,950
exit code of CP to make sure that

00:58:12,250 --> 00:58:17,349
there's no errors we ran into a problem

00:58:14,950 --> 00:58:20,559
where one of the clouds ended up at the

00:58:17,349 --> 00:58:25,079
destination with zero bytes and CP

00:58:20,559 --> 00:58:27,579
console and error that is Wow

00:58:25,079 --> 00:58:30,190
yeah well I'll tell you one of the other

00:58:27,579 --> 00:58:33,400
nice fun things about CP it doesn't

00:58:30,190 --> 00:58:35,230
epoch right right there's no there's no

00:58:33,400 --> 00:58:37,089
guarantee that data's on disk after you

00:58:35,230 --> 00:58:39,460
CP in which is probably what happened

00:58:37,089 --> 00:58:41,799
right it probably you know maybe the CP

00:58:39,460 --> 00:58:43,750
itself exited just fine but it never

00:58:41,799 --> 00:58:44,859
actually made the fast money that's a

00:58:43,750 --> 00:58:47,530
whole nother problem with the Linux

00:58:44,859 --> 00:58:50,109
kernel and F sync and that whole

00:58:47,530 --> 00:58:53,170
monstrosity of a mess that is the way

00:58:50,109 --> 00:58:55,420
the lanes kernel can yd by the programs

00:58:53,170 --> 00:58:59,309
about whether F support or not which is

00:58:55,420 --> 00:58:59,309
just ridiculous anyway other questions

00:59:10,700 --> 00:59:21,140
no no no those guys so PG upgrade

00:59:15,380 --> 00:59:23,540
supports in-place upgrades right we've

00:59:21,140 --> 00:59:26,210
supported for years years I mean you can

00:59:23,540 --> 00:59:28,190
actually whether we support back to

00:59:26,210 --> 00:59:31,870
right now in one there's some nine I

00:59:28,190 --> 00:59:34,130
think yeah is it no one I forget but

00:59:31,870 --> 00:59:37,460
yeah something like that I think it's

00:59:34,130 --> 00:59:39,710
maybe from 992 there is there if you go

00:59:37,460 --> 00:59:40,910
back far enough and I hope you don't

00:59:39,710 --> 00:59:43,730
have to deal with this but if you go

00:59:40,910 --> 00:59:46,010
back far enough there is a point where

00:59:43,730 --> 00:59:48,590
you have to do a stepwise PG upgrade

00:59:46,010 --> 00:59:51,140
like I think you if you want to go like

00:59:48,590 --> 00:59:56,000
you have to go from 992 and then you can

00:59:51,140 --> 00:59:57,500
go from 92 to like 11 right right there

00:59:56,000 --> 01:00:00,950
is a version somewhere in there but it's

00:59:57,500 --> 01:00:02,600
way back I think since 93 or 94 you can

01:00:00,950 --> 01:00:05,210
just beat the upgrade directly to

01:00:02,600 --> 01:00:07,340
whatever your target is and you can do

01:00:05,210 --> 01:00:11,510
it in place if you're interested in how

01:00:07,340 --> 01:00:14,210
for the link mode so there's basically a

01:00:11,510 --> 01:00:16,190
mode in PG upgrade where it will hard

01:00:14,210 --> 01:00:18,110
link all the files between the two major

01:00:16,190 --> 01:00:23,260
versions and that's how it does the

01:00:18,110 --> 01:00:23,260
in-place upgrade other questions

01:00:23,350 --> 01:00:27,570

YouTube URL: https://www.youtube.com/watch?v=o73I1w3EO4o


