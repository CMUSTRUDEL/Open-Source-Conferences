Title: The Secret of MySQL InnoDB Cluster Deployment - Ivan Ma
Publication date: 2019-10-19
Playlist: Open Tech Summit Bangkok 2019 - Databases and MySQL
Description: 
	Ivan Ma - MySQL

Deploying MySQL as Open Source Database with the #1 High Availability focus is critical to many applications today.    The session is to go after the latest MySQL InnoDB Cluster solution -  To automate the Provision in Cloning; To automate the Failover using MySQL Router; To automate the Data Recovery;  To simply the "Cluster" creation using MySQL Shell;  Come and Join us the session to explore the details with MySQL InnoDB Cluster
Captions: 
	00:00:00,030 --> 00:00:08,340
so the H a so the topic here is about

00:00:03,570 --> 00:00:10,880
the the myth of MySQL ok which is today

00:00:08,340 --> 00:00:15,299
energy because there is the number one

00:00:10,880 --> 00:00:18,210
topics in how we tackle the high

00:00:15,299 --> 00:00:24,600
availability and make sure it is always

00:00:18,210 --> 00:00:27,300
online in easy so H a hi everybody

00:00:24,600 --> 00:00:27,840
in MySQL it has been around for many

00:00:27,300 --> 00:00:32,360
years

00:00:27,840 --> 00:00:45,260
oh do you know what is the age of MySQL

00:00:32,360 --> 00:00:50,270
how many years 20 it's trendy very close

00:00:45,260 --> 00:00:57,360
ray grows very close

00:00:50,270 --> 00:01:04,619
25 but very close another number 27 far

00:00:57,360 --> 00:01:11,670
too much yes who said that

00:01:04,619 --> 00:01:14,100
oh you said that okay yes

00:01:11,670 --> 00:01:20,549
24 years old okay by the way yeah

00:01:14,100 --> 00:01:23,460
Oracle's the age is 42 42 and 22 24 so H

00:01:20,549 --> 00:01:26,250
a we have been actually doing very good

00:01:23,460 --> 00:01:29,040
over this so many years in how the

00:01:26,250 --> 00:01:32,280
redundancy we maintained so we do

00:01:29,040 --> 00:01:34,740
replication replications I have data I

00:01:32,280 --> 00:01:37,650
pass this to you I have the data I

00:01:34,740 --> 00:01:41,610
parties to you so this has really to be

00:01:37,650 --> 00:01:44,340
done a lot of time manually manually

00:01:41,610 --> 00:01:46,619
although this is like okay passing the

00:01:44,340 --> 00:01:51,570
data to the other one but what about I

00:01:46,619 --> 00:01:56,909
fail I'm the master I fail okay so I

00:01:51,570 --> 00:01:59,850
have two slaves master and slaves I fail

00:01:56,909 --> 00:02:02,060
I crushed and the replications will fail

00:01:59,850 --> 00:02:08,250
because I cannot send the data to the

00:02:02,060 --> 00:02:12,150
other two so very often in this case the

00:02:08,250 --> 00:02:13,780
other server has to be promoted becomes

00:02:12,150 --> 00:02:15,580
the master

00:02:13,780 --> 00:02:18,760
and then the other server okay you talk

00:02:15,580 --> 00:02:24,990
to this guy and grab the date data but

00:02:18,760 --> 00:02:29,740
who does this who does this somebody you

00:02:24,990 --> 00:02:33,700
program is not automatic this why we

00:02:29,740 --> 00:02:36,850
come up with this in ODB cluster to

00:02:33,700 --> 00:02:40,230
build this in and when I actually crash

00:02:36,850 --> 00:02:43,030
Oh someone will be promoted

00:02:40,230 --> 00:02:44,980
automatically and then this one will

00:02:43,030 --> 00:02:49,060
handshake to this to get the data

00:02:44,980 --> 00:02:53,410
directly automatically when I recover I

00:02:49,060 --> 00:02:56,050
join automatically and then you have

00:02:53,410 --> 00:02:59,410
more data than me because you're alive I

00:02:56,050 --> 00:03:03,040
was dead and then I come back I have

00:02:59,410 --> 00:03:06,190
less data less data I have to ask for

00:03:03,040 --> 00:03:09,340
more data to more online data and then

00:03:06,190 --> 00:03:13,420
once I got all the data I online I

00:03:09,340 --> 00:03:18,340
becomes online and I joined a cluster so

00:03:13,420 --> 00:03:22,750
this is automatic so they are all good

00:03:18,340 --> 00:03:26,620
so what I do okay so before going into

00:03:22,750 --> 00:03:31,180
this actually I show you one demo so

00:03:26,620 --> 00:03:34,570
basically in here this is a just a

00:03:31,180 --> 00:03:38,200
screen to show you I am accessing the

00:03:34,570 --> 00:03:41,440
database to access the database is I can

00:03:38,200 --> 00:03:44,260
select the data in here select one or

00:03:41,440 --> 00:03:48,160
whatever it doesn't matter just to

00:03:44,260 --> 00:03:51,700
select a value so when I do this select

00:03:48,160 --> 00:03:54,160
where you what I do is okay this is

00:03:51,700 --> 00:03:57,120
working this is working okay

00:03:54,160 --> 00:04:01,690
so when I actually select something else

00:03:57,120 --> 00:04:04,660
which is select where I connect to where

00:04:01,690 --> 00:04:09,459
I connect to I connect to a server which

00:04:04,660 --> 00:04:12,459
is the host name my notebook and the

00:04:09,459 --> 00:04:14,560
port number three three one no although

00:04:12,459 --> 00:04:17,919
this is small to you but I will read it

00:04:14,560 --> 00:04:20,650
to you the pot number is three three one

00:04:17,919 --> 00:04:22,990
oh but what happens if the server is

00:04:20,650 --> 00:04:26,980
crashed but instead of I instead of

00:04:22,990 --> 00:04:30,490
telling you I crash the server I try to

00:04:26,980 --> 00:04:33,940
server I need to offline two three three

00:04:30,490 --> 00:04:37,030
one oh I'm promoting another server

00:04:33,940 --> 00:04:40,360
called three three two oh to be the

00:04:37,030 --> 00:04:44,380
primary and what happened this I go back

00:04:40,360 --> 00:04:45,420
and then select this again okay where is

00:04:44,380 --> 00:04:48,420
it

00:04:45,420 --> 00:04:52,960
can you read your eyes is good I believe

00:04:48,420 --> 00:04:57,430
where's the port number in here that

00:04:52,960 --> 00:05:01,360
means what switched so when the server

00:04:57,430 --> 00:05:02,230
crash automatic you see that so that's

00:05:01,360 --> 00:05:05,080
the idea

00:05:02,230 --> 00:05:08,050
if this is your applications do you care

00:05:05,080 --> 00:05:13,000
about the database done seems like is

00:05:08,050 --> 00:05:16,480
all automatic so this is the way why we

00:05:13,000 --> 00:05:21,280
promote this as number one options and I

00:05:16,480 --> 00:05:23,320
can do this by switching it back to 100k

00:05:21,280 --> 00:05:26,140
instead of crashing it instead I can

00:05:23,320 --> 00:05:28,750
crash the server this is just I want to

00:05:26,140 --> 00:05:32,920
bring it back and I go back and select

00:05:28,750 --> 00:05:40,150
this again and the numbers returns here

00:05:32,920 --> 00:05:42,940
is back to 100 thanks my first so let's

00:05:40,150 --> 00:05:46,210
look at again so what I'm going to tell

00:05:42,940 --> 00:05:48,790
is what are those secret now it is a

00:05:46,210 --> 00:05:51,100
session - right so the beginning

00:05:48,790 --> 00:05:55,060
beginner sections we just talk about

00:05:51,100 --> 00:05:58,090
what it is and now into the X a morose

00:05:55,060 --> 00:06:02,170
how we can work it better and the next

00:05:58,090 --> 00:06:05,770
sections after my talk will be the trend

00:06:02,170 --> 00:06:08,020
about no SQL how my ass go is working on

00:06:05,770 --> 00:06:10,960
so it will be after me and the last

00:06:08,020 --> 00:06:14,950
section yes this thing is done we need

00:06:10,960 --> 00:06:18,340
to look at performance how we monitor

00:06:14,950 --> 00:06:21,130
how we troubleshoot so this will be the

00:06:18,340 --> 00:06:24,100
last section so - thanks to this one

00:06:21,130 --> 00:06:28,570
sections we look at the basic and how we

00:06:24,100 --> 00:06:31,120
deploy and what are those magic what are

00:06:28,570 --> 00:06:33,970
those the magic so we will go over the

00:06:31,120 --> 00:06:37,600
basic first example and things it's not

00:06:33,970 --> 00:06:40,390
just one single data center sometimes we

00:06:37,600 --> 00:06:44,680
need production

00:06:40,390 --> 00:06:48,220
and also the arm or because site they

00:06:44,680 --> 00:06:51,460
oversee failure in here or earthquake or

00:06:48,220 --> 00:06:54,850
the building crash on the room crash or

00:06:51,460 --> 00:06:58,900
the powers gone so maybe another site

00:06:54,850 --> 00:07:02,500
the de all has to come up so how did

00:06:58,900 --> 00:07:06,130
data so we've tell the data the other

00:07:02,500 --> 00:07:08,980
day our datacenter has no use data is a

00:07:06,130 --> 00:07:10,930
must without the data you know nothing

00:07:08,980 --> 00:07:15,130
about your customer without the data

00:07:10,930 --> 00:07:19,690
your bank your account has zero dollars

00:07:15,130 --> 00:07:22,630
we are all very poor or we are

00:07:19,690 --> 00:07:24,730
equivalent we are all equal no more rich

00:07:22,630 --> 00:07:29,350
and poor because everybody the same no

00:07:24,730 --> 00:07:32,130
money so this is actually an OD because

00:07:29,350 --> 00:07:36,400
to the recent years as a single product

00:07:32,130 --> 00:07:38,710
MySQL with H a and the scaling features

00:07:36,400 --> 00:07:42,010
which we can add more notes one two

00:07:38,710 --> 00:07:46,840
three at one where to f3 and they are

00:07:42,010 --> 00:07:51,330
all automatic as easy to use you see you

00:07:46,840 --> 00:07:54,510
saw my demo it is easy to use and

00:07:51,330 --> 00:07:58,090
include the components which for sure

00:07:54,510 --> 00:08:01,060
multiple servers one server cannot BHA

00:07:58,090 --> 00:08:06,760
one machine cannot be achieved so we

00:08:01,060 --> 00:08:10,140
have to use servers multiple redundant

00:08:06,760 --> 00:08:15,180
server and data has to be automatically

00:08:10,140 --> 00:08:19,060
transport and exchange we have to show

00:08:15,180 --> 00:08:22,180
which I did it I switch the primary I

00:08:19,060 --> 00:08:25,510
switched the server okay so that's the

00:08:22,180 --> 00:08:29,470
show and there is also the router which

00:08:25,510 --> 00:08:32,010
is the router and between all the server

00:08:29,470 --> 00:08:36,550
all the back ends and

00:08:32,010 --> 00:08:39,760
is like a proxy the applications is

00:08:36,550 --> 00:08:45,040
always connecting to this kind of router

00:08:39,760 --> 00:08:48,280
and it knows where it has to talk to so

00:08:45,040 --> 00:08:50,290
look at this as the basic we have been

00:08:48,280 --> 00:08:52,900
talking about master-slave replication

00:08:50,290 --> 00:08:53,920
at the beginning and we are talking

00:08:52,900 --> 00:08:58,589
about in

00:08:53,920 --> 00:09:02,829
DB cluster in this talk so what that

00:08:58,589 --> 00:09:07,359
replication is the replications by

00:09:02,829 --> 00:09:11,709
default people use a singleness is like

00:09:07,359 --> 00:09:15,910
posting a mail the data is written in

00:09:11,709 --> 00:09:19,389
its own server and there is binary lock

00:09:15,910 --> 00:09:22,419
it's like a data staging area which is

00:09:19,389 --> 00:09:26,439
supposed to be sending out so this is we

00:09:22,419 --> 00:09:29,019
call this binary law so data is

00:09:26,439 --> 00:09:33,069
committed only within a single server

00:09:29,019 --> 00:09:35,319
and the messenger will come in to pick

00:09:33,069 --> 00:09:38,709
up the data from the binary log and send

00:09:35,319 --> 00:09:41,769
it over to the emboss to the other

00:09:38,709 --> 00:09:45,129
office which we call this relay law and

00:09:41,769 --> 00:09:48,899
the villa is just kind of messages in

00:09:45,129 --> 00:09:53,619
the bus someone's to pick this up and

00:09:48,899 --> 00:09:56,499
has to transform this into SQL statement

00:09:53,619 --> 00:10:00,040
and apply the data back to the database

00:09:56,499 --> 00:10:02,860
and our applications when we use this

00:10:00,040 --> 00:10:05,379
slave server we can see the data that's

00:10:02,860 --> 00:10:08,829
why when we send the data to the server

00:10:05,379 --> 00:10:12,189
we call this master and then you want to

00:10:08,829 --> 00:10:14,619
read the data just right after I write

00:10:12,189 --> 00:10:17,739
the data on the server a the server B

00:10:14,619 --> 00:10:22,029
may not have the data and there's also a

00:10:17,739 --> 00:10:24,879
point when the server a is crash the

00:10:22,029 --> 00:10:27,610
last minute data may not getting there

00:10:24,879 --> 00:10:31,059
because the data is dude there the

00:10:27,610 --> 00:10:36,730
messenger hasn't come yet so there is a

00:10:31,059 --> 00:10:40,589
risk data is gone and lost and there is

00:10:36,730 --> 00:10:43,389
also the so-called half half semi sing

00:10:40,589 --> 00:10:46,629
meaning that when the data is written on

00:10:43,389 --> 00:10:50,769
my server and I pass through the binary

00:10:46,629 --> 00:10:54,789
log on my server and this also passed

00:10:50,769 --> 00:10:56,499
through the other side we later when

00:10:54,789 --> 00:10:59,139
this actually data passed from the

00:10:56,499 --> 00:11:02,319
binary log MV later the whole sections

00:10:59,139 --> 00:11:05,499
is at knowledge and committed so when we

00:11:02,319 --> 00:11:07,690
commit a data it has to be here in as

00:11:05,499 --> 00:11:09,970
well as there that means we

00:11:07,690 --> 00:11:11,710
do not have the data loss as what I

00:11:09,970 --> 00:11:14,770
described in the a synchronous

00:11:11,710 --> 00:11:16,120
replication this is called Sammy Singh

00:11:14,770 --> 00:11:19,300
Sammy

00:11:16,120 --> 00:11:22,570
half half Y half half because I

00:11:19,300 --> 00:11:25,540
delivered the data only just the edge on

00:11:22,570 --> 00:11:29,320
the other bus and the data has to be

00:11:25,540 --> 00:11:33,790
applied to the server later on that's

00:11:29,320 --> 00:11:37,300
why this is half and half so this is

00:11:33,790 --> 00:11:41,010
half and then another half which after

00:11:37,300 --> 00:11:42,970
apply people can see data on the server

00:11:41,010 --> 00:11:47,230
so as what I said

00:11:42,970 --> 00:11:49,990
the in ODB Casta is a magic to automate

00:11:47,230 --> 00:11:53,320
this like the process of sending the

00:11:49,990 --> 00:11:57,430
data getting better data and promoted

00:11:53,320 --> 00:12:01,030
the database when there is a crash so

00:11:57,430 --> 00:12:03,400
this we have the group replications to

00:12:01,030 --> 00:12:05,560
exchange data within the group and they

00:12:03,400 --> 00:12:08,260
are the members and there is also

00:12:05,560 --> 00:12:11,800
application connected router and sending

00:12:08,260 --> 00:12:14,500
to the backend which we do not need to

00:12:11,800 --> 00:12:17,470
care about which is online or done

00:12:14,500 --> 00:12:20,650
because it's all automatic and there is

00:12:17,470 --> 00:12:24,280
the show underneath here is to maintain

00:12:20,650 --> 00:12:26,470
how it works so all this actually within

00:12:24,280 --> 00:12:29,590
the Enterprise Edition we have the

00:12:26,470 --> 00:12:32,080
Guarico GUI and to monitor no matter

00:12:29,590 --> 00:12:36,280
what let's look at the prime and example

00:12:32,080 --> 00:12:39,340
how this actually may help a company to

00:12:36,280 --> 00:12:41,770
deploy this same models to make sure we

00:12:39,340 --> 00:12:46,090
are always getting online database and

00:12:41,770 --> 00:12:49,930
it has to be always be there so here's

00:12:46,090 --> 00:12:53,110
the example at least three server why we

00:12:49,930 --> 00:12:57,640
need three server one two three at least

00:12:53,110 --> 00:13:01,240
because look at just you and me if I

00:12:57,640 --> 00:13:04,120
crash okay for sure you have to be the

00:13:01,240 --> 00:13:07,390
one serve the data if you crash I have

00:13:04,120 --> 00:13:09,970
to serve the data but what if in the

00:13:07,390 --> 00:13:13,089
middle a crash I mean the language is

00:13:09,970 --> 00:13:15,820
crash so are you alive if I can talk to

00:13:13,089 --> 00:13:17,440
you this network is not done okay but

00:13:15,820 --> 00:13:19,420
the network is done I cannot talk to you

00:13:17,440 --> 00:13:21,020
but somebody can talk to you are you

00:13:19,420 --> 00:13:24,680
alive you say yes

00:13:21,020 --> 00:13:25,220
and then you ask me am i alive I would

00:13:24,680 --> 00:13:27,860
say yes

00:13:25,220 --> 00:13:30,080
so both alive you write partial data on

00:13:27,860 --> 00:13:31,570
me and you have read past data on the

00:13:30,080 --> 00:13:36,860
other okay

00:13:31,570 --> 00:13:40,910
there is crashed so this why to this

00:13:36,860 --> 00:13:43,580
split-brain evac is no good that's why

00:13:40,910 --> 00:13:47,990
within the three server when the network

00:13:43,580 --> 00:13:51,050
is really down so here one two and three

00:13:47,990 --> 00:13:52,630
so over the network between this and me

00:13:51,050 --> 00:13:56,060
it's done

00:13:52,630 --> 00:14:01,550
we have the majority two is bigger than

00:13:56,060 --> 00:14:05,600
one so we will tell we are alive this

00:14:01,550 --> 00:14:09,440
one s one the minority is going to tell

00:14:05,600 --> 00:14:12,200
you I'm gone so that's why this is

00:14:09,440 --> 00:14:14,029
actually very essential we have this

00:14:12,200 --> 00:14:16,190
slight majority and threes for

00:14:14,029 --> 00:14:18,890
deployment within one data center and

00:14:16,190 --> 00:14:21,860
the application we connect to it through

00:14:18,890 --> 00:14:24,260
so called the router as transparency to

00:14:21,860 --> 00:14:26,779
access when one is done this router will

00:14:24,260 --> 00:14:28,579
know okay this is done this is Scott it

00:14:26,779 --> 00:14:33,410
connects to the other server for data

00:14:28,579 --> 00:14:37,070
and more if we have some more data

00:14:33,410 --> 00:14:39,260
center one two three four so this is

00:14:37,070 --> 00:14:42,589
actually the way that we have the

00:14:39,260 --> 00:14:46,029
replication and connect them together so

00:14:42,589 --> 00:14:51,200
in here you see that we put a router in

00:14:46,029 --> 00:14:53,720
the bus like in the DL DC to in here so

00:14:51,200 --> 00:14:57,500
the router a is taking care about when

00:14:53,720 --> 00:15:00,140
the data database in here one is done

00:14:57,500 --> 00:15:02,390
when one is done the router knows okay

00:15:00,140 --> 00:15:06,110
one is done it will connect to the other

00:15:02,390 --> 00:15:09,230
and to get the data so it is intelligent

00:15:06,110 --> 00:15:11,390
to maintain the data stream from the

00:15:09,230 --> 00:15:14,810
production side to getting the data to

00:15:11,390 --> 00:15:17,420
the dr as always and without actually

00:15:14,810 --> 00:15:19,850
knowing okay all this is done i need to

00:15:17,420 --> 00:15:23,620
reconfigure another channel to pass the

00:15:19,850 --> 00:15:28,010
data into the dr so this is again

00:15:23,620 --> 00:15:30,860
automatic so look at this let's dip dive

00:15:28,010 --> 00:15:32,709
into a little bit more about what in

00:15:30,860 --> 00:15:34,160
fact the details about this

00:15:32,709 --> 00:15:37,470
configuration

00:15:34,160 --> 00:15:39,810
so in fact there are so many thing that

00:15:37,470 --> 00:15:42,870
we actually look at it is text but just

00:15:39,810 --> 00:15:45,360
to keep the idea there are things that

00:15:42,870 --> 00:15:47,550
we call consistency there are things

00:15:45,360 --> 00:15:51,170
that we talk about the network how we

00:15:47,550 --> 00:15:53,940
make sure we are they interconnect

00:15:51,170 --> 00:15:56,550
within the data exchange and there are

00:15:53,940 --> 00:15:59,940
people the application connect to me so

00:15:56,550 --> 00:16:02,370
in a box we may have to network our one

00:15:59,940 --> 00:16:05,910
network is internal now one is external

00:16:02,370 --> 00:16:08,640
this why there is so-called IP why these

00:16:05,910 --> 00:16:11,070
local address I will explain it later on

00:16:08,640 --> 00:16:13,380
the slide and there is also one thing

00:16:11,070 --> 00:16:15,959
called network reliability there are

00:16:13,380 --> 00:16:19,070
three options right here called expel

00:16:15,959 --> 00:16:20,760
time our auto edge on trials and

00:16:19,070 --> 00:16:24,750
majority timeout

00:16:20,760 --> 00:16:27,300
those three will tell how to manage the

00:16:24,750 --> 00:16:30,450
network reliability in the coming slide

00:16:27,300 --> 00:16:32,910
and there's also things like how do we

00:16:30,450 --> 00:16:36,540
take care the member priority week

00:16:32,910 --> 00:16:39,810
remember waiting so I'm the one server

00:16:36,540 --> 00:16:43,110
server tools of the three but how can we

00:16:39,810 --> 00:16:45,990
actually PI or ties I will always take

00:16:43,110 --> 00:16:49,200
up the work for ABC how can I do this

00:16:45,990 --> 00:16:52,770
this can be the priority oh I always to

00:16:49,200 --> 00:16:55,140
do the work for apps okay so people

00:16:52,770 --> 00:16:57,870
write data always write to me when I

00:16:55,140 --> 00:16:59,670
fail always why to the others so we have

00:16:57,870 --> 00:17:02,790
three server the third server can be

00:16:59,670 --> 00:17:07,199
very relaxed in fact sometimes when we

00:17:02,790 --> 00:17:10,079
do jobs some jobs is really heavy like

00:17:07,199 --> 00:17:14,010
be pouring will be heavy we never want

00:17:10,079 --> 00:17:17,250
this heavy job to actually concurrently

00:17:14,010 --> 00:17:21,150
to run with the OLTP so we can put this

00:17:17,250 --> 00:17:23,610
heavy duty job on the third server onto

00:17:21,150 --> 00:17:26,040
third server unless we know this is one

00:17:23,610 --> 00:17:28,470
two three then we can actually run on

00:17:26,040 --> 00:17:32,309
three server the search server that's

00:17:28,470 --> 00:17:35,040
why the priority we can assign priority

00:17:32,309 --> 00:17:38,010
which is the member waiting and we can

00:17:35,040 --> 00:17:40,670
actually put the workload on the LAN so

00:17:38,010 --> 00:17:43,650
called the PI or tries to the server and

00:17:40,670 --> 00:17:46,470
there's also how we call this exit

00:17:43,650 --> 00:17:47,300
condition what we do if somebody

00:17:46,470 --> 00:17:50,570
actually the

00:17:47,300 --> 00:17:53,810
was cut and the server is what I don't

00:17:50,570 --> 00:17:56,240
therefore what to still work or actually

00:17:53,810 --> 00:17:59,090
abort and then shut down or actually

00:17:56,240 --> 00:18:01,970
behave like offline this is actually in

00:17:59,090 --> 00:18:08,380
here we can actually sell it aboard we

00:18:01,970 --> 00:18:11,300
only or offline mode so here I said that

00:18:08,380 --> 00:18:13,670
Castille Network so within the three

00:18:11,300 --> 00:18:16,220
server those are the application the

00:18:13,670 --> 00:18:19,910
application connect if you knows MySQL

00:18:16,220 --> 00:18:22,540
it is like point number three 306 for

00:18:19,910 --> 00:18:26,180
example but there is actually underlying

00:18:22,540 --> 00:18:28,700
network we exchange data we don't want

00:18:26,180 --> 00:18:31,520
to expose the data okay in your network

00:18:28,700 --> 00:18:34,640
so we expose this data into a new

00:18:31,520 --> 00:18:37,070
network so we need to define what this

00:18:34,640 --> 00:18:39,680
network yes that's what we call local

00:18:37,070 --> 00:18:42,080
address and also the subnet week or IP

00:18:39,680 --> 00:18:44,930
right --less and then to tell this

00:18:42,080 --> 00:18:48,770
cluster is talking about interconnect

00:18:44,930 --> 00:18:52,220
where it talks to do not just to use

00:18:48,770 --> 00:18:55,600
autumn I mean the default values default

00:18:52,220 --> 00:18:59,330
value is some kind of everywhere and

00:18:55,600 --> 00:19:03,200
there's also I mentioned a Passover so a

00:18:59,330 --> 00:19:05,960
Passover the red box is the primary when

00:19:03,200 --> 00:19:09,050
actually this is actually one servers

00:19:05,960 --> 00:19:12,800
cut and this server is leaving the group

00:19:09,050 --> 00:19:16,280
and at the end is just high mall and

00:19:12,800 --> 00:19:18,170
shutdown a per server is to shut down so

00:19:16,280 --> 00:19:22,120
it is good or is it's not big

00:19:18,170 --> 00:19:25,070
I believe may not be always good because

00:19:22,120 --> 00:19:27,140
you see the silver is gone and then you

00:19:25,070 --> 00:19:30,110
may have problem to see should I

00:19:27,140 --> 00:19:33,320
restarted or is there any other issue

00:19:30,110 --> 00:19:36,110
why is shutdown if this actually just

00:19:33,320 --> 00:19:39,440
offline is just online and then you can

00:19:36,110 --> 00:19:41,450
look at the date the the warning and

00:19:39,440 --> 00:19:44,090
then you can tell what happened why it's

00:19:41,450 --> 00:19:47,510
offline so it is better than shutdown

00:19:44,090 --> 00:19:50,810
that's why we have the xyx day action

00:19:47,510 --> 00:19:53,810
what is the axis day when this kind of

00:19:50,810 --> 00:19:57,140
okay you are leaving this cluster what

00:19:53,810 --> 00:19:59,690
should wish to stay okay is going into

00:19:57,140 --> 00:20:02,269
and there is also

00:19:59,690 --> 00:20:06,759
the consistency when we talk about when

00:20:02,269 --> 00:20:10,909
Fay over automatic but how is this done

00:20:06,759 --> 00:20:14,120
so when this actually a server which is

00:20:10,909 --> 00:20:16,879
the red one we call the primary primary

00:20:14,120 --> 00:20:20,059
we write data on the primary but then

00:20:16,879 --> 00:20:22,789
read the data on the secondary so when

00:20:20,059 --> 00:20:25,309
we write the data on the primary so data

00:20:22,789 --> 00:20:29,179
will pass through the secondary the

00:20:25,309 --> 00:20:33,409
other two box there are some locks some

00:20:29,179 --> 00:20:36,679
data to be queuing up okay to write to

00:20:33,409 --> 00:20:38,840
the secondary server so I finished but I

00:20:36,679 --> 00:20:42,460
pass the data to you you have to write

00:20:38,840 --> 00:20:46,009
back to the database so what this means

00:20:42,460 --> 00:20:48,649
when this so-called apply stage when one

00:20:46,009 --> 00:20:52,580
is server the server is crash or primary

00:20:48,649 --> 00:20:54,950
is done and this one is promoted or when

00:20:52,580 --> 00:20:58,549
it is for murdered somebody will come

00:20:54,950 --> 00:21:00,950
and then see I read the data when I read

00:20:58,549 --> 00:21:03,679
the data the last two pieces you see the

00:21:00,950 --> 00:21:06,169
last piece two pieces data it was

00:21:03,679 --> 00:21:09,740
written on the primary but it is still

00:21:06,169 --> 00:21:12,320
in the queue when I read I may not be

00:21:09,740 --> 00:21:15,529
able to retail yellow and also the green

00:21:12,320 --> 00:21:19,759
I might not be able to read because it

00:21:15,529 --> 00:21:23,269
hasn't yet apart so what this means the

00:21:19,759 --> 00:21:23,899
data is not the updated data so how that

00:21:23,269 --> 00:21:26,690
works

00:21:23,899 --> 00:21:29,840
we actually what we do here is the

00:21:26,690 --> 00:21:32,720
stereo data this actually we want what

00:21:29,840 --> 00:21:35,960
we want is when this data apply and then

00:21:32,720 --> 00:21:39,529
we read them whenever is rich that's why

00:21:35,960 --> 00:21:43,639
it come ups with the so call before on

00:21:39,529 --> 00:21:46,909
primary fair over in the applications we

00:21:43,639 --> 00:21:50,899
create we can set the section when every

00:21:46,909 --> 00:21:54,889
day is something okay we fail over we

00:21:50,899 --> 00:21:56,899
need to wait it's automatic as long as

00:21:54,889 --> 00:22:00,200
there is tea for selling that we put it

00:21:56,899 --> 00:22:03,019
in and be for on primary way over

00:22:00,200 --> 00:22:06,950
meaning that I need to get the data okay

00:22:03,019 --> 00:22:09,080
with the consistency when I fail over so

00:22:06,950 --> 00:22:12,390
there is also the setting with the goal

00:22:09,080 --> 00:22:13,830
one is a section one is the goal okay

00:22:12,390 --> 00:22:16,890
just put into the golden section

00:22:13,830 --> 00:22:20,490
variables Goebbels meanings the default

00:22:16,890 --> 00:22:22,950
values set it up the default values when

00:22:20,490 --> 00:22:25,650
service stop every sections will take

00:22:22,950 --> 00:22:28,950
over this values the my escape router

00:22:25,650 --> 00:22:32,190
will take this as the default and when

00:22:28,950 --> 00:22:35,340
it's PHA over to another server it makes

00:22:32,190 --> 00:22:38,190
sure it connects to the server with all

00:22:35,340 --> 00:22:41,670
the data applied and then pass through

00:22:38,190 --> 00:22:46,320
the connection so this is actually quite

00:22:41,670 --> 00:22:51,840
important variables to before on primary

00:22:46,320 --> 00:22:55,200
fate over so in here we do have other

00:22:51,840 --> 00:22:57,360
options we have before after and also

00:22:55,200 --> 00:23:00,000
before and after waist before before

00:22:57,360 --> 00:23:02,910
means when I have the applications to

00:23:00,000 --> 00:23:05,570
carry the data I can cure the data for

00:23:02,910 --> 00:23:09,060
the actual data whatever is updated

00:23:05,570 --> 00:23:12,600
anywhere in this cluster it has to be

00:23:09,060 --> 00:23:15,900
applied before I read it that's why this

00:23:12,600 --> 00:23:19,350
we can set up the section with this

00:23:15,900 --> 00:23:23,100
consistency I need the actual data the

00:23:19,350 --> 00:23:25,980
consistent data to be cured selected and

00:23:23,100 --> 00:23:28,320
also when I apply the data when I write

00:23:25,980 --> 00:23:31,380
the data I can say this - after there's

00:23:28,320 --> 00:23:34,350
a before there's also after I write the

00:23:31,380 --> 00:23:37,020
data I will write to server a server P

00:23:34,350 --> 00:23:41,480
and server see and compare and commit so

00:23:37,020 --> 00:23:45,990
this is like synchronous replications

00:23:41,480 --> 00:23:49,230
okay so MySQL has all these options

00:23:45,990 --> 00:23:53,790
it is not so called a Singh or Singh

00:23:49,230 --> 00:23:59,270
it's very very flexible is by

00:23:53,790 --> 00:24:02,250
application you design what to do and

00:23:59,270 --> 00:24:06,360
there's also network reliability and the

00:24:02,250 --> 00:24:09,290
network reliability is they send some

00:24:06,360 --> 00:24:13,140
kind of habits are you here are you here

00:24:09,290 --> 00:24:15,350
five seconds you don't reply five

00:24:13,140 --> 00:24:19,020
seconds you don't reply I kick you out

00:24:15,350 --> 00:24:21,870
five second okay this is what the

00:24:19,020 --> 00:24:25,860
default so what that means five second

00:24:21,870 --> 00:24:30,720
is as long is it short or depends

00:24:25,860 --> 00:24:34,250
ready all depends sometimes there is

00:24:30,720 --> 00:24:38,730
applications or the network is so

00:24:34,250 --> 00:24:41,850
interrupted maybe even 30 seconds to

00:24:38,730 --> 00:24:45,360
resume and it's really Austin's to do

00:24:41,850 --> 00:24:49,980
that then I would say set this up for

00:24:45,360 --> 00:24:52,710
this expel all expel timeout to kick you

00:24:49,980 --> 00:24:55,679
out I set it to 30 second that means

00:24:52,710 --> 00:24:59,370
even there are interruptions with the

00:24:55,679 --> 00:25:02,100
network because within company our

00:24:59,370 --> 00:25:05,279
organization may say our network is not

00:25:02,100 --> 00:25:07,559
as stable as others we have some kind of

00:25:05,279 --> 00:25:11,130
interruption every we don't know when

00:25:07,559 --> 00:25:14,730
but we don't want disruption to our

00:25:11,130 --> 00:25:17,639
business but every week we have this so

00:25:14,730 --> 00:25:21,149
what we need to do is we may set this up

00:25:17,639 --> 00:25:23,250
like 30 second for example to set this

00:25:21,149 --> 00:25:26,429
up for a second then okay within the 30

00:25:23,250 --> 00:25:28,769
second is still hanging around because

00:25:26,429 --> 00:25:31,950
the happy I'm still waiting for it can

00:25:28,769 --> 00:25:37,350
this network time all to be set like one

00:25:31,950 --> 00:25:40,200
hour or one hour term in oh are you here

00:25:37,350 --> 00:25:42,929
I can wait forever like one hour until I

00:25:40,200 --> 00:25:46,679
know you are expelled one hour that

00:25:42,929 --> 00:25:51,360
means if you really fresh really really

00:25:46,679 --> 00:25:53,490
crash okay the system is done for one

00:25:51,360 --> 00:25:55,919
hour and you I know I kick you out and

00:25:53,490 --> 00:25:59,789
then okay with we do work continue so

00:25:55,919 --> 00:26:03,480
the experiment cannot be too long I have

00:25:59,789 --> 00:26:05,880
to recognize okay maybe two minutes um

00:26:03,480 --> 00:26:08,610
time is good or 30 seconds so there's

00:26:05,880 --> 00:26:11,190
maybe a judgement what the limit I

00:26:08,610 --> 00:26:15,179
believe 30 second to two minutes it's

00:26:11,190 --> 00:26:17,250
kind of good where use maybe some people

00:26:15,179 --> 00:26:19,710
actually five-second as actually to

00:26:17,250 --> 00:26:23,039
default I could now five seconds to be

00:26:19,710 --> 00:26:25,200
good enough five-second so five seconds

00:26:23,039 --> 00:26:27,809
you don't respond kick you out good but

00:26:25,200 --> 00:26:29,880
certain that what may not be right

00:26:27,809 --> 00:26:33,690
so I believe most likely it has to be

00:26:29,880 --> 00:26:35,639
less than I mean two minutes okay to

00:26:33,690 --> 00:26:37,139
make sure that you are okay if you are

00:26:35,639 --> 00:26:39,360
not response in two minutes

00:26:37,139 --> 00:26:41,520
go away

00:26:39,360 --> 00:26:45,320
so this is kind of the expelled time oh

00:26:41,520 --> 00:26:49,260
and there's also the auto rejoin

00:26:45,320 --> 00:26:52,350
consider when one server is done because

00:26:49,260 --> 00:26:55,170
to network so during the weekend during

00:26:52,350 --> 00:26:57,960
the weekend so in fact in fact during

00:26:55,170 --> 00:27:00,930
the weekend you don't care because still

00:26:57,960 --> 00:27:03,990
to to server is running okay one network

00:27:00,930 --> 00:27:06,030
is offline to is running but I don't

00:27:03,990 --> 00:27:08,520
want to come back to office to fix I

00:27:06,030 --> 00:27:12,030
need to wait until the Monday's to come

00:27:08,520 --> 00:27:14,130
so dealing this like the weekend I don't

00:27:12,030 --> 00:27:16,950
want to come back behind sometimes

00:27:14,130 --> 00:27:19,530
somebody will fix the network okay if

00:27:16,950 --> 00:27:23,280
that server is good and intelligence to

00:27:19,530 --> 00:27:25,170
reconnect is that week on lack then I

00:27:23,280 --> 00:27:28,230
don't need to do anything that's what we

00:27:25,170 --> 00:27:31,530
try this is like we connect we try so

00:27:28,230 --> 00:27:34,680
during this time actually the default is

00:27:31,530 --> 00:27:37,890
Cyril it never retried to be join so if

00:27:34,680 --> 00:27:41,370
we set it to like twelve one to trow it

00:27:37,890 --> 00:27:45,270
means that every five minutes every five

00:27:41,370 --> 00:27:47,370
minutes it comes to okay I come back I

00:27:45,270 --> 00:27:49,440
come back every five minute and try to

00:27:47,370 --> 00:27:52,170
rejoin if the Lambert we assume okay

00:27:49,440 --> 00:27:55,760
come back and then backs to the stick is

00:27:52,170 --> 00:27:58,620
the cluster strophe means one hour

00:27:55,760 --> 00:28:01,980
twelve means one hour so if we are

00:27:58,620 --> 00:28:03,810
talking about three days let's assume

00:28:01,980 --> 00:28:09,710
the weekend three days then what where

00:28:03,810 --> 00:28:13,740
is to reset this three times 24 times

00:28:09,710 --> 00:28:16,530
what right time trough every hour trough

00:28:13,740 --> 00:28:19,770
and then that's values set it to it and

00:28:16,530 --> 00:28:22,700
then three days you still the server

00:28:19,770 --> 00:28:26,490
still keep we try every five minutes so

00:28:22,700 --> 00:28:29,990
they are the values okay and there is

00:28:26,490 --> 00:28:34,020
also one called a majority timeout again

00:28:29,990 --> 00:28:37,230
Wow you automate them the part of the

00:28:34,020 --> 00:28:41,010
game you are responsible for all the

00:28:37,230 --> 00:28:44,370
data is creation when the transaction is

00:28:41,010 --> 00:28:47,730
coming to you at this point crashing

00:28:44,370 --> 00:28:49,890
commit data is trying to ask are you

00:28:47,730 --> 00:28:51,870
there and then are you agree and you

00:28:49,890 --> 00:28:55,140
agree okay do you

00:28:51,870 --> 00:28:57,630
the data you will network is done I can

00:28:55,140 --> 00:28:59,640
listen to you you cannot listen to the

00:28:57,630 --> 00:29:02,640
network's from from this location

00:28:59,640 --> 00:29:06,900
section so this actually majority is

00:29:02,640 --> 00:29:10,920
here your minority so what happens to

00:29:06,900 --> 00:29:14,480
this minority is by default this value

00:29:10,920 --> 00:29:19,290
by default this value is syrup means

00:29:14,480 --> 00:29:22,710
hand means you just hand there somebody

00:29:19,290 --> 00:29:25,740
to look at you hang in there okay assume

00:29:22,710 --> 00:29:29,490
means hang it is good somebody to look

00:29:25,740 --> 00:29:31,470
and then we do just all good we have

00:29:29,490 --> 00:29:33,660
expelled high now after five seconds

00:29:31,470 --> 00:29:36,420
kick you out we okay you take up the

00:29:33,660 --> 00:29:39,330
primary so the other one will we have

00:29:36,420 --> 00:29:41,970
the primary but you asked also as

00:29:39,330 --> 00:29:46,110
primary you have to prime it but this

00:29:41,970 --> 00:29:48,809
primary is that is hand so this is the

00:29:46,110 --> 00:29:54,210
majority timeout so what we do maybe

00:29:48,809 --> 00:29:55,890
said ok one two oh two minutes so I have

00:29:54,210 --> 00:29:59,780
two two minutes

00:29:55,890 --> 00:30:03,480
this hand will come back and then say

00:29:59,780 --> 00:30:05,640
hours and when this errors happen so

00:30:03,480 --> 00:30:07,020
this actually the data we row back and

00:30:05,640 --> 00:30:09,600
you know okay

00:30:07,020 --> 00:30:12,540
this one you are actually not coming

00:30:09,600 --> 00:30:15,360
back so you minority will turn the state

00:30:12,540 --> 00:30:18,420
to our state when turn this our state

00:30:15,360 --> 00:30:20,520
and then because oh error and then you

00:30:18,420 --> 00:30:22,800
retry you will try to see oh and my

00:30:20,520 --> 00:30:24,990
Able's to after five minutes am I good

00:30:22,800 --> 00:30:29,280
to go back so this is actually going

00:30:24,990 --> 00:30:33,179
back to the process so this way is a

00:30:29,280 --> 00:30:36,090
good child to look at how to protect the

00:30:33,179 --> 00:30:39,000
server and automate the process how to

00:30:36,090 --> 00:30:42,150
retry and make sure the network is still

00:30:39,000 --> 00:30:45,570
unstable or stable and still keep our

00:30:42,150 --> 00:30:48,570
servers to be reliable they are very

00:30:45,570 --> 00:30:51,990
good and important and in the MySQL

00:30:48,570 --> 00:30:55,140
class you know DB cluster we add new

00:30:51,990 --> 00:30:59,280
features from time to time in the just

00:30:55,140 --> 00:31:03,420
Begay just in july we add one more

00:30:59,280 --> 00:31:03,960
feature called clone clone it is quite

00:31:03,420 --> 00:31:06,510
easy

00:31:03,960 --> 00:31:09,690
and when we have one tool and the first

00:31:06,510 --> 00:31:12,870
server come in so it's just empty

00:31:09,690 --> 00:31:15,330
database nothing we have data always we

00:31:12,870 --> 00:31:17,970
have data one server or to server what

00:31:15,330 --> 00:31:19,320
it does call my data to you it's just

00:31:17,970 --> 00:31:22,890
like backup and recovery

00:31:19,320 --> 00:31:25,560
so this clone is just easy and in here

00:31:22,890 --> 00:31:28,440
the MySQL we add the instance and

00:31:25,560 --> 00:31:33,740
recovery method as chrome and the data

00:31:28,440 --> 00:31:36,150
will be just all data back or data back

00:31:33,740 --> 00:31:38,820
even the username all this

00:31:36,150 --> 00:31:40,860
by default your user root is empty

00:31:38,820 --> 00:31:46,380
password when I chrome my database to

00:31:40,860 --> 00:31:48,360
you my user password is yours I pass to

00:31:46,380 --> 00:31:53,460
yours and the empty password is no

00:31:48,360 --> 00:31:56,160
longer valid on their server so here

00:31:53,460 --> 00:31:58,380
this is kind of the demo but other

00:31:56,160 --> 00:32:00,960
things so this is like automation

00:31:58,380 --> 00:32:03,720
there's also performance wise how we

00:32:00,960 --> 00:32:07,620
tegu the database like when data is

00:32:03,720 --> 00:32:15,000
written back written back on to the

00:32:07,620 --> 00:32:18,240
slaves here we have the database as

00:32:15,000 --> 00:32:21,240
master data come here I pass to you I

00:32:18,240 --> 00:32:24,810
pass to you data has to go back recall

00:32:21,240 --> 00:32:29,940
this SQL apply apply the data back to

00:32:24,810 --> 00:32:33,000
database so we have the algorithm to

00:32:29,940 --> 00:32:37,350
make sure that we can work in parallel

00:32:33,000 --> 00:32:40,920
this is what the parallel type d4 is

00:32:37,350 --> 00:32:43,830
database and we can change by clock who

00:32:40,920 --> 00:32:47,490
can run first who can run the second is

00:32:43,830 --> 00:32:50,160
by like the timing by default who can

00:32:47,490 --> 00:32:54,720
actually impair else to run is by

00:32:50,160 --> 00:32:58,620
database MySQL the first line the first

00:32:54,720 --> 00:33:03,420
life from Ryan is talking about database

00:32:58,620 --> 00:33:07,950
equal to schema so basically each

00:33:03,420 --> 00:33:11,370
database we can run different threats so

00:33:07,950 --> 00:33:15,930
if we have more applications and writing

00:33:11,370 --> 00:33:17,480
to database DB 1 DP 2 DB 3 then DB 1 or

00:33:15,930 --> 00:33:19,610
this transaction

00:33:17,480 --> 00:33:20,690
they are dependent independent of db2

00:33:19,610 --> 00:33:23,930
and db3

00:33:20,690 --> 00:33:26,930
so those actually polarizations can

00:33:23,930 --> 00:33:29,960
concurrently execute that okay by

00:33:26,930 --> 00:33:34,010
databases by database this is the

00:33:29,960 --> 00:33:36,920
default but in many cases we do not run

00:33:34,010 --> 00:33:41,330
multiple database and then paralyzation

00:33:36,920 --> 00:33:44,420
in this way in many cases what MySQL or

00:33:41,330 --> 00:33:47,030
the application is written is one single

00:33:44,420 --> 00:33:50,630
database one single database or even

00:33:47,030 --> 00:33:53,030
multiple database they are they

00:33:50,630 --> 00:33:56,240
dependent they depends on each other's

00:33:53,030 --> 00:34:00,470
so what we do is we can change this

00:33:56,240 --> 00:34:03,620
parallel type to logical clock and then

00:34:00,470 --> 00:34:05,990
put in the parameters call workers how

00:34:03,620 --> 00:34:09,740
many workers do you wants to work and to

00:34:05,990 --> 00:34:13,250
apply the data two three four it depends

00:34:09,740 --> 00:34:15,440
on your IO and also the CPU you have

00:34:13,250 --> 00:34:17,630
more you put in more and data come in

00:34:15,440 --> 00:34:20,510
more and it actually executes at the

00:34:17,630 --> 00:34:23,210
same time at the same time and put it

00:34:20,510 --> 00:34:25,580
back through the database so this is how

00:34:23,210 --> 00:34:29,450
we actually make it okay we're faster

00:34:25,580 --> 00:34:34,510
logical clock and more threats and the

00:34:29,450 --> 00:34:38,540
commit order must be preserved preserved

00:34:34,510 --> 00:34:43,880
okay so this actually is handle nicely

00:34:38,540 --> 00:34:49,040
and in the end ODB cluster MySQL we have

00:34:43,880 --> 00:34:52,580
this so automated way of nodb cluster we

00:34:49,040 --> 00:34:55,340
have some kind of GT ID and we need a

00:34:52,580 --> 00:34:58,490
beam Knox to be in certain format and

00:34:55,340 --> 00:35:01,970
the criteria they are being a farmer

00:34:58,490 --> 00:35:04,280
checksum GT ID and how the data is

00:35:01,970 --> 00:35:07,280
actually sitting there in the repository

00:35:04,280 --> 00:35:10,370
during the table and also when we write

00:35:07,280 --> 00:35:13,520
how we put a hash number and then that's

00:35:10,370 --> 00:35:17,450
using what kind of algorithm we have to

00:35:13,520 --> 00:35:19,430
define in here so here I'm telling you

00:35:17,450 --> 00:35:23,240
there are a lot of things that make it

00:35:19,430 --> 00:35:28,430
more reliable and make it run to be

00:35:23,240 --> 00:35:31,220
better and faster right so it's so heavy

00:35:28,430 --> 00:35:33,920
we have this automatic MySQL in

00:35:31,220 --> 00:35:38,119
ODP Constance who gets a over automatic

00:35:33,920 --> 00:35:41,210
and to make it work and there is also

00:35:38,119 --> 00:35:44,810
router configuration we have the server

00:35:41,210 --> 00:35:46,910
we also have the router the router we

00:35:44,810 --> 00:35:50,810
need to take care how many connections

00:35:46,910 --> 00:35:54,560
to connect and where we put the data ok

00:35:50,810 --> 00:35:57,410
the law can be info and in on Windows we

00:35:54,560 --> 00:36:00,980
can put in the event Knox window events

00:35:57,410 --> 00:36:03,680
if you like the Windows applications you

00:36:00,980 --> 00:36:06,650
know there are places we put the locks

00:36:03,680 --> 00:36:09,290
on windows so people will see that the

00:36:06,650 --> 00:36:11,780
event locks maybe a place and there is

00:36:09,290 --> 00:36:14,840
also these notifications Wow

00:36:11,780 --> 00:36:17,810
the server ABC server we may have server

00:36:14,840 --> 00:36:22,190
down or someone to switch over because

00:36:17,810 --> 00:36:25,130
of menu operations so this is not a

00:36:22,190 --> 00:36:29,030
vacation things changes amount the

00:36:25,130 --> 00:36:32,180
server we need to proactively to notify

00:36:29,030 --> 00:36:34,760
the router I have changed next time you

00:36:32,180 --> 00:36:38,330
come to me talk to this talk to this

00:36:34,760 --> 00:36:39,619
total debt so this is proactive this is

00:36:38,330 --> 00:36:43,040
so-called Jews

00:36:39,619 --> 00:36:46,700
grr notifications and enables the

00:36:43,040 --> 00:36:49,339
notifications for what changes we make

00:36:46,700 --> 00:36:51,470
in the rug in the server set and then

00:36:49,339 --> 00:36:53,839
it's just apply and then there's router

00:36:51,470 --> 00:36:59,720
Reno's and the whatever connections come

00:36:53,839 --> 00:37:04,070
in will knows where to connect you so

00:36:59,720 --> 00:37:07,070
here is another myth so we somebody will

00:37:04,070 --> 00:37:10,400
try to put your application on from

00:37:07,070 --> 00:37:12,589
drive from drive application on from

00:37:10,400 --> 00:37:15,470
Jaipur table right everything's talked

00:37:12,589 --> 00:37:17,510
of portable apps so from jive most

00:37:15,470 --> 00:37:22,490
likely from Java is f80

00:37:17,510 --> 00:37:25,790
am I correct F 80 so FA T it has a

00:37:22,490 --> 00:37:28,630
characteristic the characteristic is it

00:37:25,790 --> 00:37:32,300
does not have liked the pillage is

00:37:28,630 --> 00:37:36,710
everyone can write and read a MySQL

00:37:32,300 --> 00:37:39,680
router there is a key files which is the

00:37:36,710 --> 00:37:42,500
key file it has to be run properly and

00:37:39,680 --> 00:37:44,800
keep properly so here is the error when

00:37:42,500 --> 00:37:48,710
I run this there is like our

00:37:44,800 --> 00:37:51,980
everyone has full access right errors

00:37:48,710 --> 00:37:56,170
because there is like password password

00:37:51,980 --> 00:38:00,710
and key is the key storage in the router

00:37:56,170 --> 00:38:04,610
we do not allow this key to be stored in

00:38:00,710 --> 00:38:08,690
this f80 volume if you put it there you

00:38:04,610 --> 00:38:12,020
never be able to start the router so

00:38:08,690 --> 00:38:13,970
this is like kind of tricks so portable

00:38:12,020 --> 00:38:16,220
app and then you put it there maybe you

00:38:13,970 --> 00:38:19,070
see issues okay

00:38:16,220 --> 00:38:22,270
so better when you do this like portable

00:38:19,070 --> 00:38:25,640
is still NTFS if there is a window or

00:38:22,270 --> 00:38:29,180
yeah on Linux is exe two or three

00:38:25,640 --> 00:38:36,590
doesn't matter of 400 it's the very

00:38:29,180 --> 00:38:41,120
common file system on Linux ext except

00:38:36,590 --> 00:38:43,910
this yeah by d4 correct but on the from

00:38:41,120 --> 00:38:50,990
josh people don't do it still F 80

00:38:43,910 --> 00:38:54,820
because window use it yes correct

00:38:50,990 --> 00:38:58,400
yeah so that's why portable else okay

00:38:54,820 --> 00:39:01,160
there's kind of tricks and there's also

00:38:58,400 --> 00:39:05,600
do you know way slot rotation lock

00:39:01,160 --> 00:39:09,440
rotation on Linux this is open right

00:39:05,600 --> 00:39:11,800
open source people use a lot of Linux so

00:39:09,440 --> 00:39:15,170
the locks has to be maintained and

00:39:11,800 --> 00:39:18,200
application has always be active and

00:39:15,170 --> 00:39:22,580
running application always active and

00:39:18,200 --> 00:39:23,480
running it always kind of writing to

00:39:22,580 --> 00:39:26,270
certain files

00:39:23,480 --> 00:39:29,540
it's the locks file it's being locked

00:39:26,270 --> 00:39:32,630
and you never be able it's grow grow

00:39:29,540 --> 00:39:35,120
grow grow and they're too big in run one

00:39:32,630 --> 00:39:38,300
month two months a year and non-stop you

00:39:35,120 --> 00:39:41,540
never be able to clean this up so we

00:39:38,300 --> 00:39:44,750
need to find a solution to stop it and

00:39:41,540 --> 00:39:47,990
then rotate and change it up so the

00:39:44,750 --> 00:39:52,520
rotation is the way how we trigger

00:39:47,990 --> 00:39:56,150
usually on Linux it is using signal to

00:39:52,520 --> 00:39:58,080
signal so call a hang up HUP

00:39:56,150 --> 00:40:00,720
so you say NSA Tokyo

00:39:58,080 --> 00:40:03,210
this one okay so this is open source

00:40:00,720 --> 00:40:06,090
your tentacle I tell you more detail

00:40:03,210 --> 00:40:09,780
send a signal q minus 1 to the process

00:40:06,090 --> 00:40:13,530
it tell the process to close the file

00:40:09,780 --> 00:40:16,080
and we open the foul so what we do is

00:40:13,530 --> 00:40:19,080
this is actually the tricks on linux

00:40:16,080 --> 00:40:21,900
u-men the lot wrote ape-men the lot will

00:40:19,080 --> 00:40:24,810
tell you see how you do things and we

00:40:21,900 --> 00:40:27,000
actually the router can do this not

00:40:24,810 --> 00:40:28,830
rotate at the same time work together

00:40:27,000 --> 00:40:32,520
we've not wrote a and the locks

00:40:28,830 --> 00:40:37,500
okay can actually be renamed and also

00:40:32,520 --> 00:40:40,560
can be closed and reopened so all this

00:40:37,500 --> 00:40:43,140
we have the shell we set the option we

00:40:40,560 --> 00:40:47,180
maintain the cluster and they are all

00:40:43,140 --> 00:40:51,030
being within the shell we call admin API

00:40:47,180 --> 00:40:53,220
admin API we have DPA command we have

00:40:51,030 --> 00:40:56,400
class the command we have all this

00:40:53,220 --> 00:40:59,310
working nicely and it is command-line

00:40:56,400 --> 00:41:03,360
why we have the command line because a

00:40:59,310 --> 00:41:07,290
lot of things we need to integrate this

00:41:03,360 --> 00:41:10,230
Amin to other tools to other tools and

00:41:07,290 --> 00:41:13,110
we use some other things too monitors

00:41:10,230 --> 00:41:15,870
and there's a graphical GUI or we use

00:41:13,110 --> 00:41:19,140
others but we still need that means your

00:41:15,870 --> 00:41:22,620
I to maintain the Interop with other

00:41:19,140 --> 00:41:25,860
products so a min API to get the things

00:41:22,620 --> 00:41:29,250
how it works we can set options we can

00:41:25,860 --> 00:41:33,540
see option we can set a specific server

00:41:29,250 --> 00:41:37,230
options consistency fail over and all

00:41:33,540 --> 00:41:40,680
this can be done within the show only

00:41:37,230 --> 00:41:44,520
four lines you can create the cluster

00:41:40,680 --> 00:41:48,660
four lines of this shall have been API

00:41:44,520 --> 00:41:51,810
you can create with the cluster up up up

00:41:48,660 --> 00:41:55,620
and then we bring this free into a

00:41:51,810 --> 00:41:57,150
cluster four lines of cook and then we

00:41:55,620 --> 00:42:00,750
can bring them into cluster

00:41:57,150 --> 00:42:04,470
it is very easy okay so there is also

00:42:00,750 --> 00:42:07,230
the way that we see backup recovery so

00:42:04,470 --> 00:42:10,680
the backup recovery is the way how we

00:42:07,230 --> 00:42:15,120
see the efficiency Oh

00:42:10,680 --> 00:42:18,830
we have the a server B and C where do we

00:42:15,120 --> 00:42:23,520
back up sometime we back up always the

00:42:18,830 --> 00:42:26,490
reactive server very PC server no we

00:42:23,520 --> 00:42:29,670
don't we may once D all the surf server

00:42:26,490 --> 00:42:32,430
which is quite a lot idle and we better

00:42:29,670 --> 00:42:33,030
from the very idle and relaxed server am

00:42:32,430 --> 00:42:35,910
I correct

00:42:33,030 --> 00:42:38,820
the busy server still keeping to run

00:42:35,910 --> 00:42:41,280
database on other activity we will

00:42:38,820 --> 00:42:44,250
separate the loading on different server

00:42:41,280 --> 00:42:49,050
so the backup may actually be execute on

00:42:44,250 --> 00:42:53,430
the lower priority server so the backup

00:42:49,050 --> 00:42:55,920
has to be also running fast and we have

00:42:53,430 --> 00:42:58,110
to write a pole server this is RIT right

00:42:55,920 --> 00:43:01,170
this is RIT oniy and this is read-only

00:42:58,110 --> 00:43:03,360
and when I bet up from the video knee so

00:43:01,170 --> 00:43:06,360
this actually the better we'll go to the

00:43:03,360 --> 00:43:09,630
RIT my server and write the data and

00:43:06,360 --> 00:43:12,770
telling you already backup and the free

00:43:09,630 --> 00:43:18,150
server will be consistent and it knows

00:43:12,770 --> 00:43:20,760
we have already finished the backup so

00:43:18,150 --> 00:43:23,460
this information is maintained in the

00:43:20,760 --> 00:43:26,610
database but this only server cannot be

00:43:23,460 --> 00:43:29,160
written so when I backups to this the

00:43:26,610 --> 00:43:32,280
backup software will automatically it

00:43:29,160 --> 00:43:35,430
news this is a cluster and it knows

00:43:32,280 --> 00:43:37,920
which server can be written it back up

00:43:35,430 --> 00:43:40,860
this it will come back all comes to the

00:43:37,920 --> 00:43:42,530
writable server and write the data there

00:43:40,860 --> 00:43:46,560
and you'll be transferred back to here

00:43:42,530 --> 00:43:48,420
it's all automatic it's all automatic so

00:43:46,560 --> 00:43:51,150
that's why this is like the backup and

00:43:48,420 --> 00:43:53,280
there's also we talked about the

00:43:51,150 --> 00:43:56,790
configurations there are three

00:43:53,280 --> 00:44:00,150
consecutive ow in the MySQL works and

00:43:56,790 --> 00:44:02,280
one is we generally we have the

00:44:00,150 --> 00:44:05,850
configuration and define all the values

00:44:02,280 --> 00:44:09,270
variables that's the my dose in half or

00:44:05,850 --> 00:44:12,210
my tour ini and there are the other two

00:44:09,270 --> 00:44:15,990
files one is does the server name server

00:44:12,210 --> 00:44:20,970
ID we call the server UUID it is stored

00:44:15,990 --> 00:44:22,440
in the octo doc CNF auto-doc CNF within

00:44:20,970 --> 00:44:27,420
the data directory

00:44:22,440 --> 00:44:30,920
and there is also in MySQL 8.0 and up we

00:44:27,420 --> 00:44:33,690
have to persistency valuables

00:44:30,920 --> 00:44:39,150
persistence variables it is stored

00:44:33,690 --> 00:44:42,930
within the my SQL D - auto da CNF mask

00:44:39,150 --> 00:44:48,050
LD - auto don't see enough so these two

00:44:42,930 --> 00:44:51,119
files it indicate the actual server

00:44:48,050 --> 00:44:53,700
identity okay

00:44:51,119 --> 00:44:55,950
so free configuration if I have the data

00:44:53,700 --> 00:44:58,589
you have the data I have the data so

00:44:55,950 --> 00:45:02,790
when I restore to there and then I put

00:44:58,589 --> 00:45:04,530
up the so called the 3-cnf Wow and the

00:45:02,790 --> 00:45:07,980
name they are the same and we just need

00:45:04,530 --> 00:45:09,540
to make sure the GG ID must be the same

00:45:07,980 --> 00:45:12,300
so from the backup

00:45:09,540 --> 00:45:15,420
when we backup using the Enterprise all

00:45:12,300 --> 00:45:18,930
this okay better for me and I know how

00:45:15,420 --> 00:45:21,119
to reprove vision another new instance

00:45:18,930 --> 00:45:23,760
and then bring it to like in Singh

00:45:21,119 --> 00:45:26,069
within the cluster as one new member I

00:45:23,760 --> 00:45:30,089
backup the data using Enterprise backup

00:45:26,069 --> 00:45:32,849
and then there is a GT ID informations

00:45:30,089 --> 00:45:35,819
about me about the server GT ID means

00:45:32,849 --> 00:45:38,790
like in all good Sen number it knows

00:45:35,819 --> 00:45:41,310
what actually stole within the database

00:45:38,790 --> 00:45:44,160
what actually I can bring back the data

00:45:41,310 --> 00:45:47,160
within the Sen Sen or we call the GT ID

00:45:44,160 --> 00:45:49,530
so this information is calm metadata GT

00:45:47,160 --> 00:45:51,859
item metadata this is within the

00:45:49,530 --> 00:45:54,990
inaudible within the enterprise backup

00:45:51,859 --> 00:45:57,599
when this actually information we have a

00:45:54,990 --> 00:45:59,670
backs to the new member and data is

00:45:57,599 --> 00:46:02,430
there GT ID is there and three

00:45:59,670 --> 00:46:04,859
configuration is that this is new server

00:46:02,430 --> 00:46:07,710
with the same set of data as the

00:46:04,859 --> 00:46:12,780
existing cluster members and they can

00:46:07,710 --> 00:46:15,660
form new custom ok so if you want this X

00:46:12,780 --> 00:46:19,290
the same name as the existing one pretty

00:46:15,660 --> 00:46:21,780
bad as vegans like if you do you think

00:46:19,290 --> 00:46:24,960
this actually server a new name ok we

00:46:21,780 --> 00:46:28,040
move the auto da CNF it will be another

00:46:24,960 --> 00:46:31,230
name because the auto CNF is the name

00:46:28,040 --> 00:46:33,540
UUID you just delete it it will come

00:46:31,230 --> 00:46:36,120
back or you are new member I don't know

00:46:33,540 --> 00:46:39,750
you because your name is ABC

00:46:36,120 --> 00:46:44,210
my previous name is XYZ so if you delete

00:46:39,750 --> 00:46:48,120
the auto CNF you got the new name so

00:46:44,210 --> 00:46:50,100
here this is kind of to tell you so they

00:46:48,120 --> 00:46:53,430
are the things that we need to protect

00:46:50,100 --> 00:46:58,200
the three configurations and also the GT

00:46:53,430 --> 00:47:02,670
ID sometimes when I work with customer

00:46:58,200 --> 00:47:05,720
people always try to use reset master

00:47:02,670 --> 00:47:11,010
have you heard reset master reset slave

00:47:05,720 --> 00:47:12,360
no just the tracking of all this

00:47:11,010 --> 00:47:15,750
transaction ID

00:47:12,360 --> 00:47:17,700
oh forget it everybody the same so clear

00:47:15,750 --> 00:47:19,890
your mind clear your mind your empty

00:47:17,700 --> 00:47:23,010
your empty your empty so when everybody

00:47:19,890 --> 00:47:24,780
is empty they are the same right empty

00:47:23,010 --> 00:47:27,150
database empty database empty database

00:47:24,780 --> 00:47:29,400
they are the same reset master it's just

00:47:27,150 --> 00:47:31,680
not agree to tell you you know nothing

00:47:29,400 --> 00:47:34,650
you know nothing you know nothing but in

00:47:31,680 --> 00:47:39,540
the database you store the data so

00:47:34,650 --> 00:47:43,220
sometimes when I go into I met customer

00:47:39,540 --> 00:47:46,860
they tell Oh quite a few weeks ago oh

00:47:43,220 --> 00:47:48,720
because some problem okay you have some

00:47:46,860 --> 00:47:50,370
problem and you have some problem okay

00:47:48,720 --> 00:47:52,860
they don't know the problem and then

00:47:50,370 --> 00:47:57,000
they want to fix the problem how they

00:47:52,860 --> 00:47:58,770
fix is clear your mind clear your mind

00:47:57,000 --> 00:48:01,440
clear your mind you know nothing you

00:47:58,770 --> 00:48:04,080
know nothing I know nothing and then we

00:48:01,440 --> 00:48:07,110
are all equal now because oh we know

00:48:04,080 --> 00:48:09,060
nothing then we can bring back yeah you

00:48:07,110 --> 00:48:10,950
see but in fact you still have the

00:48:09,060 --> 00:48:12,750
problem internally I still have the

00:48:10,950 --> 00:48:14,550
problem internally you still have the

00:48:12,750 --> 00:48:16,230
problem internally when we hit the

00:48:14,550 --> 00:48:22,650
problem again the problem is still there

00:48:16,230 --> 00:48:25,950
so superficially on the face surveys it

00:48:22,650 --> 00:48:30,540
is like clear we are eco but at the

00:48:25,950 --> 00:48:33,450
bottom they are not equal so this is

00:48:30,540 --> 00:48:37,670
kind of many times we go out we see

00:48:33,450 --> 00:48:41,460
customers just to fix the problem by

00:48:37,670 --> 00:48:44,730
covering all the facts by removing all

00:48:41,460 --> 00:48:46,640
the details we set and then you know

00:48:44,730 --> 00:48:49,430
nothing you know nothing I know nothing

00:48:46,640 --> 00:48:52,010
so just be aware don't

00:48:49,430 --> 00:48:54,920
do it because this is done the board run

00:48:52,010 --> 00:48:59,540
to the bottom it has the data and it has

00:48:54,920 --> 00:49:01,910
the ABC data it has ABCDE data so when

00:48:59,540 --> 00:49:04,309
the time somebody updated ye there and

00:49:01,910 --> 00:49:08,150
then coming back to here I have already

00:49:04,309 --> 00:49:11,690
data then what problem is this duplicate

00:49:08,150 --> 00:49:13,940
data and cannot apply because we are not

00:49:11,690 --> 00:49:18,069
the same but you are telling they are

00:49:13,940 --> 00:49:21,950
the same so this is kind of very popular

00:49:18,069 --> 00:49:26,690
ok people trying to fix it by covering

00:49:21,950 --> 00:49:29,030
the fact using resets so this is make

00:49:26,690 --> 00:49:33,260
sure that we understand correctly what

00:49:29,030 --> 00:49:35,900
it is doing and people always to back up

00:49:33,260 --> 00:49:39,500
by with the scheduled jobs in under

00:49:35,900 --> 00:49:42,500
Linux like cron job and thence to back

00:49:39,500 --> 00:49:45,050
up the data onto a separate folders not

00:49:42,500 --> 00:49:47,720
I mean the separate volume because

00:49:45,050 --> 00:49:50,119
better always grow and then you have

00:49:47,720 --> 00:49:53,000
never expect this somebody will come and

00:49:50,119 --> 00:49:56,510
then clean this up so this actually

00:49:53,000 --> 00:49:59,079
boredom should be untied to the data

00:49:56,510 --> 00:50:02,630
bottom or the data bonum should be a

00:49:59,079 --> 00:50:05,450
stain and low volume for data and people

00:50:02,630 --> 00:50:09,069
grow that locks grow something else

00:50:05,450 --> 00:50:12,980
cannot grow into the data volume

00:50:09,069 --> 00:50:15,520
otherwise the data cannot be written ok

00:50:12,980 --> 00:50:22,130
better fail but applications still

00:50:15,520 --> 00:50:24,369
running properly ok so I think this is

00:50:22,130 --> 00:50:27,790
the section about how we can maintain a

00:50:24,369 --> 00:50:34,210
reliable database and giving you the way

00:50:27,790 --> 00:50:34,210
always online so questions any questions

00:50:36,250 --> 00:50:49,150
actually I I have a question right

00:50:42,650 --> 00:50:54,160
Layton sees so how does the the various

00:50:49,150 --> 00:50:57,799
configurations or strategies affect

00:50:54,160 --> 00:51:00,770
right Layton sees so for example is it

00:50:57,799 --> 00:51:02,220
does it block the right or does it right

00:51:00,770 --> 00:51:06,150
but then it does not

00:51:02,220 --> 00:51:09,980
turn until until all the data is

00:51:06,150 --> 00:51:12,720
consistent how how does it work okay

00:51:09,980 --> 00:51:15,810
thanks for these questions so the

00:51:12,720 --> 00:51:18,090
latency means that when we have the

00:51:15,810 --> 00:51:20,790
applications to write so it depends on

00:51:18,090 --> 00:51:24,060
whether the operation is to write data

00:51:20,790 --> 00:51:26,490
whether this is like to read data so the

00:51:24,060 --> 00:51:29,220
question is about to write data to read

00:51:26,490 --> 00:51:32,790
data ok first to go the other side to

00:51:29,220 --> 00:51:35,790
read data the latency is about we read

00:51:32,790 --> 00:51:39,000
on server a server P and service C so

00:51:35,790 --> 00:51:41,280
they are independent it doesn't requires

00:51:39,000 --> 00:51:44,430
to read from me and I asked the other

00:51:41,280 --> 00:51:48,030
data from other servers so it is very

00:51:44,430 --> 00:51:51,090
fast read and very isolated environment

00:51:48,030 --> 00:51:54,650
good actually this is a good environment

00:51:51,090 --> 00:51:58,020
for scale written because all

00:51:54,650 --> 00:52:02,160
independent three not enough adding four

00:51:58,020 --> 00:52:05,730
five six and then more users can come to

00:52:02,160 --> 00:52:08,339
read independently and concurrently so

00:52:05,730 --> 00:52:11,910
this is rich and latency is to read bill

00:52:08,339 --> 00:52:13,800
in it's about IO and memory latency to

00:52:11,910 --> 00:52:19,380
write write to a server

00:52:13,800 --> 00:52:23,970
so basically MySQL in ODB cluster okay

00:52:19,380 --> 00:52:28,980
can be single primary single write can

00:52:23,970 --> 00:52:31,980
be multiple writer single writer or

00:52:28,980 --> 00:52:34,859
multiple writer so less backs to single

00:52:31,980 --> 00:52:37,470
writer first single writer first so

00:52:34,859 --> 00:52:40,050
single writer is to write on the one

00:52:37,470 --> 00:52:44,220
server the one server has to pass data

00:52:40,050 --> 00:52:47,310
to ABC server pass to me pass to the

00:52:44,220 --> 00:52:50,510
third so the latent is hi I have the

00:52:47,310 --> 00:52:53,040
data I have the day it requires the

00:52:50,510 --> 00:52:55,920
acknowledgement that's the latency so

00:52:53,040 --> 00:52:59,430
this first first if write the data to

00:52:55,920 --> 00:53:02,640
the server in the mem I mean in that in

00:52:59,430 --> 00:53:04,710
the chat in the memory and then pass the

00:53:02,640 --> 00:53:07,650
data in the memory to the other server

00:53:04,710 --> 00:53:08,310
so the latency is still memory not IO at

00:53:07,650 --> 00:53:12,180
this point

00:53:08,310 --> 00:53:15,309
no I oh this is important and this like

00:53:12,180 --> 00:53:18,429
we call this certification process

00:53:15,309 --> 00:53:21,659
it requires the majority rules

00:53:18,429 --> 00:53:27,309
it's about latency majority rules means

00:53:21,659 --> 00:53:31,529
if this is one two three majority is two

00:53:27,309 --> 00:53:36,309
so when any one of the server's say yes

00:53:31,529 --> 00:53:38,499
pass and you are ignored why this

00:53:36,309 --> 00:53:42,609
happened because when this is right and

00:53:38,499 --> 00:53:45,309
somebody to tell you okay that means the

00:53:42,609 --> 00:53:47,739
other one has to say okay otherwise this

00:53:45,309 --> 00:53:50,289
one just chopped off you have problem

00:53:47,739 --> 00:53:53,229
you just get off so that's why this is a

00:53:50,289 --> 00:53:56,199
majority route so when this happened

00:53:53,229 --> 00:53:59,650
this is latency is fast but to the point

00:53:56,199 --> 00:54:03,339
s can this be like always like two

00:53:59,650 --> 00:54:05,979
servers to run because I'm fast you are

00:54:03,339 --> 00:54:08,349
fast always I respond and this one it's

00:54:05,979 --> 00:54:11,829
like gone because it never catch up

00:54:08,349 --> 00:54:15,069
problem happened so no because there is

00:54:11,829 --> 00:54:17,229
a flow control just look at one

00:54:15,069 --> 00:54:20,679
individual statement one individual that

00:54:17,229 --> 00:54:25,479
can be fast but we look at like the

00:54:20,679 --> 00:54:27,939
overall lifetime of in our operation we

00:54:25,479 --> 00:54:30,519
cannot lift the other server behind and

00:54:27,939 --> 00:54:33,789
then we don't care so there is a flow

00:54:30,519 --> 00:54:36,789
control make sure we do not have too

00:54:33,789 --> 00:54:40,509
much gap when this actually concurrence

00:54:36,789 --> 00:54:43,239
we need we do stretches and this one the

00:54:40,509 --> 00:54:45,699
latency will try to hand you way this

00:54:43,239 --> 00:54:48,429
one lap left behind who much this is

00:54:45,699 --> 00:54:51,009
flow control so this is another deep

00:54:48,429 --> 00:54:55,209
dive parameters so to answer you is

00:54:51,009 --> 00:54:58,029
memory copy memory copy and to write bin

00:54:55,209 --> 00:55:00,479
not every Leila concurrently and send

00:54:58,029 --> 00:55:03,039
the data concurrently to a PC server

00:55:00,479 --> 00:55:05,529
concurrently so from the latency point

00:55:03,039 --> 00:55:08,259
is like network and then getting back

00:55:05,529 --> 00:55:10,839
and that this is independent okay

00:55:08,259 --> 00:55:13,419
so and also the major this is fast from

00:55:10,839 --> 00:55:16,949
single operation it is fast from the

00:55:13,419 --> 00:55:19,900
overall in an outflow must be the same

00:55:16,949 --> 00:55:22,509
so I hope you understand this is

00:55:19,900 --> 00:55:25,989
actually the best option and latency is

00:55:22,509 --> 00:55:27,650
more than just more than just soak or

00:55:25,989 --> 00:55:30,260
passing the data

00:55:27,650 --> 00:55:33,470
latency also talking about the bout of

00:55:30,260 --> 00:55:38,570
the data ice in a transaction a

00:55:33,470 --> 00:55:42,800
transaction can be K can be Mac if K 1 K

00:55:38,570 --> 00:55:45,890
2 K it is small but when men passing

00:55:42,800 --> 00:55:49,060
over the stream one man if we do not

00:55:45,890 --> 00:55:51,530
chunk chunk chunk a into trunk then

00:55:49,060 --> 00:55:53,470
things actually impeaching cannot pass

00:55:51,530 --> 00:55:56,930
through that's why there is also

00:55:53,470 --> 00:55:59,420
mechanism to break the big chunk into

00:55:56,930 --> 00:56:02,300
smaller chunk so there's some other

00:55:59,420 --> 00:56:05,330
happy in the network can flow through

00:56:02,300 --> 00:56:07,790
and acknowledgement is like a

00:56:05,330 --> 00:56:12,980
synchronous to acknowledge to backs to

00:56:07,790 --> 00:56:14,120
you so this is all built into the in ODB

00:56:12,980 --> 00:56:16,850
cluster already

00:56:14,120 --> 00:56:20,630
I hope this answer your question yes

00:56:16,850 --> 00:56:28,400
thank you very much any other questions

00:56:20,630 --> 00:56:31,580
any other questions ok so I think we can

00:56:28,400 --> 00:56:33,440
take it to break now so but if anyone

00:56:31,580 --> 00:56:37,760
has any questions please feel free to

00:56:33,440 --> 00:56:39,290
step up to Ivan and Ryan during the

00:56:37,760 --> 00:56:43,220
during the break and ask all the

00:56:39,290 --> 00:56:50,810
questions you want we will be back here

00:56:43,220 --> 00:56:52,940
at 4:00 p.m. sharp for more - QL it will

00:56:50,810 --> 00:56:54,950
be unleashing the problem no SQL using

00:56:52,940 --> 00:56:56,720
MySQL I'll be fascinating looking for

00:56:54,950 --> 00:56:59,590
watching looking forward to it

00:56:56,720 --> 00:56:59,590
thank you very much

00:57:01,120 --> 00:57:04,270

YouTube URL: https://www.youtube.com/watch?v=rtAWt_3nF4M


