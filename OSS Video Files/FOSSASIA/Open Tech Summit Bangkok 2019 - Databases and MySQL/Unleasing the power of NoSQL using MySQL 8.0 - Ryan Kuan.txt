Title: Unleasing the power of NoSQL using MySQL 8.0 - Ryan Kuan
Publication date: 2019-10-19
Playlist: Open Tech Summit Bangkok 2019 - Databases and MySQL
Description: 
	Ryan Kuan - MySQL

JavaScript Object Notation (JSON) is fast becoming the de-facto data exchange format for both modern web and mobile application development framework. Developers love the flexibility of JSON to allow them to modify data structure anyway they want without bothering their DBA. In this session, come discover the latest NoSQL capabilities in MySQL to store and manage JSON data seamlessly in MySQL as well as to integrate with existing structured data in MySQL.
Captions: 
	00:00:00,380 --> 00:00:15,630
okay so no SQL some say no SQL is not

00:00:11,219 --> 00:00:20,029
just SQL it is more than SQL I have a

00:00:15,630 --> 00:00:22,470
chance to talk to one of the developers

00:00:20,029 --> 00:00:27,060
well actually not developers their

00:00:22,470 --> 00:00:31,980
partners and I talked to him about our

00:00:27,060 --> 00:00:32,460
no SQL support in MySQL so he turned

00:00:31,980 --> 00:00:37,050
around

00:00:32,460 --> 00:00:40,620
as for his developers um can you do this

00:00:37,050 --> 00:00:44,940
in MongoDB already you're like you know

00:00:40,620 --> 00:00:49,829
storing there's no SQL data types in

00:00:44,940 --> 00:00:53,280
MongoDB so now let me this first start

00:00:49,829 --> 00:00:58,680
to say this talk is not about when or

00:00:53,280 --> 00:01:01,199
why you should use no SQL or SQL and why

00:00:58,680 --> 00:01:03,840
MySQL NoSQL is better than MongoDB or

00:01:01,199 --> 00:01:07,200
MongoDB is better than Maskell right but

00:01:03,840 --> 00:01:12,630
it won't tell you today is how we

00:01:07,200 --> 00:01:18,180
support no SQL native in MySQL and how

00:01:12,630 --> 00:01:22,049
can you combine the no SQL with SQL that

00:01:18,180 --> 00:01:25,590
we know in MySQL okay and then I'm gonna

00:01:22,049 --> 00:01:30,500
propose to you a few interesting use

00:01:25,590 --> 00:01:35,970
cases that I think is useful if you use

00:01:30,500 --> 00:01:39,810
MySQL to do no SQL okay so back to the

00:01:35,970 --> 00:01:44,430
story so the developers or the

00:01:39,810 --> 00:01:47,850
architects say well if you already know

00:01:44,430 --> 00:01:51,860
all the requirement and you know how to

00:01:47,850 --> 00:01:56,869
design the data using relational model

00:01:51,860 --> 00:02:00,210
then MySQL is the way to go but if you

00:01:56,869 --> 00:02:04,469
don't have to all the requirement but

00:02:00,210 --> 00:02:09,539
you want to get started right and no SQL

00:02:04,469 --> 00:02:14,250
is the right choice wiring

00:02:09,539 --> 00:02:19,290
so first of all definition right no SQL

00:02:14,250 --> 00:02:20,730
is more or less equivalent to JSON right

00:02:19,290 --> 00:02:23,340
Oh Jason

00:02:20,730 --> 00:02:23,870
I like to say Jason because I like Jason

00:02:23,340 --> 00:02:27,170
Bourne

00:02:23,870 --> 00:02:31,470
so I say Jason so you shunsui is a

00:02:27,170 --> 00:02:35,400
JavaScript object notation it's a

00:02:31,470 --> 00:02:38,939
mouthful it's similar to XML right

00:02:35,400 --> 00:02:42,420
extended markup language what it is it's

00:02:38,939 --> 00:02:47,659
just a text file where you surround the

00:02:42,420 --> 00:02:52,500
data with description and jason has been

00:02:47,659 --> 00:02:53,670
I'll say people dish XML because it's

00:02:52,500 --> 00:02:56,280
very very heavy

00:02:53,670 --> 00:02:59,700
now pelo is very high right so if you

00:02:56,280 --> 00:03:02,639
use XML to exchange data over the

00:02:59,700 --> 00:03:05,090
network the passing of the XML take time

00:03:02,639 --> 00:03:08,430
right and then that's why people use

00:03:05,090 --> 00:03:11,700
JSON because it's relatively simple and

00:03:08,430 --> 00:03:16,260
it's it's it's very easy to use if you

00:03:11,700 --> 00:03:20,669
use JavaScript or no js' right and yeah

00:03:16,260 --> 00:03:24,900
that's what it is right Jason and the

00:03:20,669 --> 00:03:27,750
power as Jason is really it's designed

00:03:24,900 --> 00:03:33,449
for developers it's in developers hand

00:03:27,750 --> 00:03:36,060
right they develop application using the

00:03:33,449 --> 00:03:42,349
language they want right whether it's

00:03:36,060 --> 00:03:48,419
PHP Python or JavaScript right they

00:03:42,349 --> 00:03:52,260
write data and install it into whichever

00:03:48,419 --> 00:03:53,909
write database or whatever and when they

00:03:52,260 --> 00:03:59,329
develop application if you don't have

00:03:53,909 --> 00:04:02,970
all the requirement for example a

00:03:59,329 --> 00:04:06,870
marketing tracking application where you

00:04:02,970 --> 00:04:10,680
want to promote create a promotion say I

00:04:06,870 --> 00:04:13,349
have a promotion on iPhone 10 and I want

00:04:10,680 --> 00:04:16,440
to publish on the website and you want

00:04:13,349 --> 00:04:19,579
to track visitor to the website you know

00:04:16,440 --> 00:04:22,980
the phone they're using the promotion

00:04:19,579 --> 00:04:25,590
that they're interested to click on the

00:04:22,980 --> 00:04:28,590
do you want to track all this perhaps

00:04:25,590 --> 00:04:30,600
you know in the initial release you will

00:04:28,590 --> 00:04:35,540
not track three four parameters and you

00:04:30,600 --> 00:04:37,980
store those in a JSON document and

00:04:35,540 --> 00:04:43,310
subsequently you've followed that hey I

00:04:37,980 --> 00:04:46,170
forgot I want to track where they refer

00:04:43,310 --> 00:04:50,970
from right where do they get this link

00:04:46,170 --> 00:04:54,000
from with it because if you promote that

00:04:50,970 --> 00:04:56,550
them they did the event to other website

00:04:54,000 --> 00:04:59,760
you want to also track that as well so

00:04:56,550 --> 00:05:03,420
that's when you would want to add more

00:04:59,760 --> 00:05:05,990
few into the JSON document and it's very

00:05:03,420 --> 00:05:10,230
flexible developer can just add that in

00:05:05,990 --> 00:05:13,880
the application without having DBA to

00:05:10,230 --> 00:05:17,600
add one more field into the database if

00:05:13,880 --> 00:05:20,760
you are using jason and that's why

00:05:17,600 --> 00:05:24,270
developer like Jason right they don't

00:05:20,760 --> 00:05:27,240
have to rely on DBA hey DBA can you add

00:05:24,270 --> 00:05:32,810
one more for you because I forgot right

00:05:27,240 --> 00:05:37,850
when I first designed the application so

00:05:32,810 --> 00:05:41,910
in summary this is how the different

00:05:37,850 --> 00:05:46,770
view from different people right so from

00:05:41,910 --> 00:05:51,600
DBA point of view I mean - and I Ivan at

00:05:46,770 --> 00:05:55,710
me look at data this way relationship a

00:05:51,600 --> 00:06:00,210
country would have many languages right

00:05:55,710 --> 00:06:06,390
they speak in Thai Thai language maybe

00:06:00,210 --> 00:06:08,430
English and then you have Indian so it's

00:06:06,390 --> 00:06:11,430
but the primary language is tied but you

00:06:08,430 --> 00:06:14,900
have one-to-many relationship and you

00:06:11,430 --> 00:06:18,090
also have many city so typically

00:06:14,900 --> 00:06:23,400
traditionally we design data based on

00:06:18,090 --> 00:06:26,970
using ER diagram by entity relationship

00:06:23,400 --> 00:06:29,040
diagram it's all about relationship so

00:06:26,970 --> 00:06:31,800
you gotta have all two requirement

00:06:29,040 --> 00:06:35,360
before you can design the whole data

00:06:31,800 --> 00:06:35,360
model right and

00:06:35,550 --> 00:06:39,389
but sometimes you don't really have that

00:06:36,930 --> 00:06:42,509
luxury especially now digital

00:06:39,389 --> 00:06:44,639
transformation requirement comes in very

00:06:42,509 --> 00:06:48,270
very fast right so the moment you roll

00:06:44,639 --> 00:06:50,669
out your first releases your competitor

00:06:48,270 --> 00:06:53,099
already oh this guy is doing this well

00:06:50,669 --> 00:06:57,740
let me have another new features that

00:06:53,099 --> 00:07:00,660
you are constantly trying to keep up

00:06:57,740 --> 00:07:04,110
adding features adding the requirement

00:07:00,660 --> 00:07:06,900
to application and you cannot you don't

00:07:04,110 --> 00:07:11,370
know what you need to add right so to be

00:07:06,900 --> 00:07:14,580
more flexible agile you use Jason right

00:07:11,370 --> 00:07:17,130
because you can you store anything that

00:07:14,580 --> 00:07:21,270
you want so no a ski also means no

00:07:17,130 --> 00:07:25,139
structure right no schema you store

00:07:21,270 --> 00:07:33,169
anything that you want it's in the hand

00:07:25,139 --> 00:07:36,690
of the developers so in other view is

00:07:33,169 --> 00:07:39,599
columns and rows in relational right

00:07:36,690 --> 00:07:47,330
traditionally MySQL allows you to do

00:07:39,599 --> 00:07:50,849
this but whereas in the Jason way is you

00:07:47,330 --> 00:07:52,860
design your Jason structure and then

00:07:50,849 --> 00:07:55,620
similar document will be grouped into

00:07:52,860 --> 00:07:59,750
collection so if you look at the

00:07:55,620 --> 00:08:03,240
database relational way and a no SQL way

00:07:59,750 --> 00:08:08,099
collection is similar to database right

00:08:03,240 --> 00:08:11,810
this document is similar to Rose like

00:08:08,099 --> 00:08:15,860
collections of many document tables of

00:08:11,810 --> 00:08:20,759
many rows all right so columns it just

00:08:15,860 --> 00:08:23,280
structure is a key you know key so each

00:08:20,759 --> 00:08:26,759
one of the JSON document is key and

00:08:23,280 --> 00:08:29,580
value so each key identify it has a

00:08:26,759 --> 00:08:32,430
value the identifier the document so

00:08:29,580 --> 00:08:35,399
there's a name key there's a day and so

00:08:32,430 --> 00:08:37,110
on and because you you you don't have

00:08:35,399 --> 00:08:44,959
structure you don't have schema you do

00:08:37,110 --> 00:08:49,120
whatever you want right and in MySQL we

00:08:44,959 --> 00:08:51,809
support JSON document

00:08:49,120 --> 00:08:55,720
natively as a data type called Jason

00:08:51,809 --> 00:08:59,470
alright so you have your application you

00:08:55,720 --> 00:09:03,339
use the API of your choice send a crud

00:08:59,470 --> 00:09:07,120
crud with the request q8 retrieve update

00:09:03,339 --> 00:09:09,970
delete and work with Jason document and

00:09:07,120 --> 00:09:14,170
then you know whichever function Phi

00:09:09,970 --> 00:09:17,529
delete update evil provide you send you

00:09:14,170 --> 00:09:23,259
the JSON document right and internally

00:09:17,529 --> 00:09:27,120
we actually have designed a new protocol

00:09:23,259 --> 00:09:30,040
called X protocol on top of the

00:09:27,120 --> 00:09:33,879
traditional client-server protocol to

00:09:30,040 --> 00:09:37,839
enable in adjacent support and a

00:09:33,879 --> 00:09:39,819
developer API is called X def API which

00:09:37,839 --> 00:09:43,779
allows you to support the multiple

00:09:39,819 --> 00:09:46,720
languages peyten Java and so on

00:09:43,779 --> 00:09:51,670
right and this is enabled by installing

00:09:46,720 --> 00:09:59,470
X plucking to masculine to enable you to

00:09:51,670 --> 00:10:02,319
work with JSON document natively okay so

00:09:59,470 --> 00:10:06,999
in summary these are all the component

00:10:02,319 --> 00:10:13,230
right X blocking exporter core which is

00:10:06,999 --> 00:10:15,730
based on Google proto buff technology

00:10:13,230 --> 00:10:18,670
the reason that we chose this because

00:10:15,730 --> 00:10:21,550
this is extensible allow us to add more

00:10:18,670 --> 00:10:24,699
new features into this protocol in the

00:10:21,550 --> 00:10:28,860
future and you know D because to be

00:10:24,699 --> 00:10:34,420
leveraged you know like what Ivan just

00:10:28,860 --> 00:10:37,649
explained that all this work with in ODB

00:10:34,420 --> 00:10:41,019
cluster so you can do a very robust in

00:10:37,649 --> 00:10:45,819
ODB clusters that serve your JSON

00:10:41,019 --> 00:10:49,589
document extra ABI Moscow shell is for

00:10:45,819 --> 00:10:53,199
you to interactively test out the JSON

00:10:49,589 --> 00:10:58,449
API or a JSON document with api of your

00:10:53,199 --> 00:11:04,139
choice peyten javascript or SQL and to

00:10:58,449 --> 00:11:04,139
connect to Hugh's hand in hand with the

00:11:04,410 --> 00:11:13,809
application right so let's take a look

00:11:11,049 --> 00:11:18,069
at how you could use Jason natively in

00:11:13,809 --> 00:11:22,419
Moscow so this is a create table we just

00:11:18,069 --> 00:11:27,579
have a column called Jason and that's it

00:11:22,419 --> 00:11:30,609
so you could store Jason into the

00:11:27,579 --> 00:11:34,720
employee table and this is how you would

00:11:30,609 --> 00:11:37,660
insert a JSON document into the table

00:11:34,720 --> 00:11:39,459
I'm going to do a select Astrid and

00:11:37,660 --> 00:11:42,069
you'll give you all the juice in

00:11:39,459 --> 00:11:49,029
document like this is how simple is it

00:11:42,069 --> 00:11:51,689
it is okay let me just give you quick

00:11:49,029 --> 00:11:51,689
demo

00:12:06,610 --> 00:12:16,519
so use the MySQL which I've shown you

00:12:10,160 --> 00:12:18,079
earlier in the first section okay I need

00:12:16,519 --> 00:12:20,569
to switch around here to look at the

00:12:18,079 --> 00:12:23,410
screen doesn't here it's not doesn't

00:12:20,569 --> 00:12:23,410
appearing on my screen

00:12:54,830 --> 00:13:06,470
so I select the database and just say

00:12:59,180 --> 00:13:17,480
use Ryan okay and then I have a few

00:13:06,470 --> 00:13:24,190
tables ok the table that contained JSON

00:13:17,480 --> 00:13:24,190
data type is t1 so I do a select a

00:13:24,550 --> 00:13:36,920
straight from t1

00:13:30,040 --> 00:13:42,350
okay so so that's calling one which has

00:13:36,920 --> 00:13:45,200
all the JSON document so that's the IDE

00:13:42,350 --> 00:13:48,709
and and as age and then it's my name I'm

00:13:45,200 --> 00:13:54,680
also saying HS the dolphin 24 year old

00:13:48,709 --> 00:13:57,560
and and then you could you can see some

00:13:54,680 --> 00:13:58,970
it doesn't care about you know the

00:13:57,560 --> 00:14:00,740
structure right so you can store

00:13:58,970 --> 00:14:02,750
anything that you want of course that

00:14:00,740 --> 00:14:06,260
gives you problem later on right because

00:14:02,750 --> 00:14:08,870
you you don't really yeah you don't you

00:14:06,260 --> 00:14:11,149
only have those views and but but anyhow

00:14:08,870 --> 00:14:13,820
that's that's why people use Jason

00:14:11,149 --> 00:14:16,600
because it's very flexible I'm gonna

00:14:13,820 --> 00:14:22,040
explain to you later on the ID and name

00:14:16,600 --> 00:14:24,140
you see okay let me just okay I'll talk

00:14:22,040 --> 00:14:29,390
to you I would explain the ID and name

00:14:24,140 --> 00:14:36,170
later on so this is essentially how we

00:14:29,390 --> 00:14:39,440
manage Jason in my SQL table right so

00:14:36,170 --> 00:14:41,470
I'll show you how you can insert a JSON

00:14:39,440 --> 00:14:41,470
document

00:15:28,170 --> 00:15:39,519
okay so I'll insert another JSON

00:15:32,709 --> 00:15:43,949
document key-value id8 name is ivan he's

00:15:39,519 --> 00:15:43,949
also 24 year old just like the dolphin

00:15:45,720 --> 00:15:59,980
okay so you can insert it and we do a

00:15:50,019 --> 00:16:04,869
select okay so you see the document get

00:15:59,980 --> 00:16:09,699
inserted now if you notice insert into

00:16:04,869 --> 00:16:13,139
t1 whatever just column c1 I didn't have

00:16:09,699 --> 00:16:18,279
anything on idea name but tell you how

00:16:13,139 --> 00:16:27,429
why this can be done and what what kind

00:16:18,279 --> 00:16:28,319
of usage of these two columns so far so

00:16:27,429 --> 00:16:33,990
good

00:16:28,319 --> 00:16:33,990
everybody stay with me okay good

00:16:45,089 --> 00:16:51,689
okay so I've shown you the example

00:16:52,619 --> 00:17:00,790
here's another similar example which I

00:16:57,779 --> 00:17:03,220
explained earlier related to the

00:17:00,790 --> 00:17:05,949
marketing you know the website tracking

00:17:03,220 --> 00:17:08,709
so this is one of the way that you can

00:17:05,949 --> 00:17:11,890
track and why people use this to track

00:17:08,709 --> 00:17:17,679
you Jason to be more flexible in their

00:17:11,890 --> 00:17:21,309
application okay so use case number one

00:17:17,679 --> 00:17:25,870
right so you can combine Jason with

00:17:21,309 --> 00:17:34,510
relational data type and this is the the

00:17:25,870 --> 00:17:36,850
power of using MySQL jason support one

00:17:34,510 --> 00:17:39,940
thing is that you can leverage on the

00:17:36,850 --> 00:17:43,779
indexing of you know being able to

00:17:39,940 --> 00:17:45,940
create index on a column to manage and

00:17:43,779 --> 00:17:52,169
to select to aggregate your Jason

00:17:45,940 --> 00:17:54,580
document okay

00:17:52,169 --> 00:17:57,730
you know the column that I shown you

00:17:54,580 --> 00:18:00,520
just now the ID and name it can be

00:17:57,730 --> 00:18:04,919
generated automatically by extracting

00:18:00,520 --> 00:18:08,830
data from the JSON document into a

00:18:04,919 --> 00:18:11,409
virtual column or a generator column

00:18:08,830 --> 00:18:14,590
automatically a reason for that is that

00:18:11,409 --> 00:18:21,330
you can leverage the SQL statement to

00:18:14,590 --> 00:18:24,070
curry that table instead of using API or

00:18:21,330 --> 00:18:28,059
functions to do that because JSON

00:18:24,070 --> 00:18:31,059
document is not a normal you know data

00:18:28,059 --> 00:18:34,960
type in relational right so it's Jason

00:18:31,059 --> 00:18:39,039
so you need to have function to deal

00:18:34,960 --> 00:18:42,820
with the data type so in MySQL we have a

00:18:39,039 --> 00:18:45,159
list of an inferred user-defined

00:18:42,820 --> 00:18:48,190
function which come together with Jason

00:18:45,159 --> 00:18:51,250
in order for you to work with the JSON

00:18:48,190 --> 00:18:57,159
data type so one of it is called jason

00:18:51,250 --> 00:18:57,400
extract to extract any key value from

00:18:57,159 --> 00:19:00,130
the

00:18:57,400 --> 00:19:03,220
Jason documen for you right to do

00:19:00,130 --> 00:19:10,870
comparison to do whatever and so on and

00:19:03,220 --> 00:19:14,950
so forth right so this is what happened

00:19:10,870 --> 00:19:20,850
when I insert the adjacent document and

00:19:14,950 --> 00:19:26,170
I have a column that extract from the

00:19:20,850 --> 00:19:30,180
JSON document the name and ID you could

00:19:26,170 --> 00:19:33,190
do it virtually or you can do as a store

00:19:30,180 --> 00:19:36,160
generate the column on the table and you

00:19:33,190 --> 00:19:39,880
can have index on those two you know

00:19:36,160 --> 00:19:43,000
access the data faster now once you have

00:19:39,880 --> 00:19:45,970
that you could do you know your

00:19:43,000 --> 00:19:48,540
aggregate your reporting and so on now

00:19:45,970 --> 00:19:51,550
the other advantage of using masks ul

00:19:48,540 --> 00:19:55,060
JSON data type is you can leverage on

00:19:51,550 --> 00:19:59,010
the transaction capability that we have

00:19:55,060 --> 00:20:01,600
so imagine you have a node.js

00:19:59,010 --> 00:20:06,430
application you could have a start

00:20:01,600 --> 00:20:10,810
transaction and commit to manage you

00:20:06,430 --> 00:20:13,270
know update or delete in your code when

00:20:10,810 --> 00:20:18,540
you write your JSON document so that can

00:20:13,270 --> 00:20:22,780
be transaction managed using the MySQL

00:20:18,540 --> 00:20:26,050
API so in here before you

00:20:22,780 --> 00:20:30,550
you know select or Phi or update

00:20:26,050 --> 00:20:33,610
whatever data adjacent you could have a

00:20:30,550 --> 00:20:38,080
start transaction block and data in your

00:20:33,610 --> 00:20:41,200
application so that you know you have

00:20:38,080 --> 00:20:46,500
this transaction control in your

00:20:41,200 --> 00:20:51,540
application the second use case I've

00:20:46,500 --> 00:20:54,670
explained this is that you could use

00:20:51,540 --> 00:20:58,810
MySQL with JSON data type to do

00:20:54,670 --> 00:21:01,780
reporting right if you don't if you

00:20:58,810 --> 00:21:04,690
don't do this in SQL you you could have

00:21:01,780 --> 00:21:07,240
probably export you know your JSON

00:21:04,690 --> 00:21:09,850
document into a CSV and you do your

00:21:07,240 --> 00:21:10,750
reporting whatever not all right so that

00:21:09,850 --> 00:21:12,880
that's a two

00:21:10,750 --> 00:21:15,700
I mean there's an additional process

00:21:12,880 --> 00:21:17,830
that you have to do if you don't you

00:21:15,700 --> 00:21:20,440
know if you don't leverage if you don't

00:21:17,830 --> 00:21:22,750
use you know relational that that's

00:21:20,440 --> 00:21:26,740
that's the one way that you could do for

00:21:22,750 --> 00:21:31,930
reporting no so you'll find it's very

00:21:26,740 --> 00:21:35,710
very useful right especially if you have

00:21:31,930 --> 00:21:38,500
lots of document and you know you could

00:21:35,710 --> 00:21:41,230
leverage this capability in database to

00:21:38,500 --> 00:21:43,300
do reporting for you right so every day

00:21:41,230 --> 00:21:45,150
you have many you know visitor to the

00:21:43,300 --> 00:21:47,590
website you know every time you run

00:21:45,150 --> 00:21:57,990
marketing campaigns this can be very

00:21:47,590 --> 00:22:02,170
very useful okay so um I have some

00:21:57,990 --> 00:22:06,820
reference on you know API and references

00:22:02,170 --> 00:22:09,880
which you can take a look essentially is

00:22:06,820 --> 00:22:13,630
in the AC now uh you know main website

00:22:09,880 --> 00:22:16,300
so document you can download it you can

00:22:13,630 --> 00:22:19,930
play with it the last thing I want to

00:22:16,300 --> 00:22:24,550
show you is MySQL shell which is a part

00:22:19,930 --> 00:22:26,250
of our Jason architecture that allows

00:22:24,550 --> 00:22:29,880
you to quickly test your Co

00:22:26,250 --> 00:22:29,880
interactively using the shell

00:22:53,900 --> 00:22:59,940
okay so you see a J s this is the

00:22:56,940 --> 00:23:03,690
JavaScript come on

00:22:59,940 --> 00:23:09,390
and you could do a slash SQL to change

00:23:03,690 --> 00:23:11,400
into SQL MO or if you are peyten you

00:23:09,390 --> 00:23:13,020
prefer Python you can do Python so

00:23:11,400 --> 00:23:16,860
currently you could do three different

00:23:13,020 --> 00:23:27,660
kind of commands using masks I'll show I

00:23:16,860 --> 00:23:32,720
mean just go to JavaScript so first I

00:23:27,660 --> 00:23:32,720
wanted to connect to the database right

00:23:40,850 --> 00:23:42,910
you

00:23:46,820 --> 00:23:57,660
okay so you see unconnected using the

00:23:50,940 --> 00:24:00,270
exit protocol and you see I've connected

00:23:57,660 --> 00:24:02,220
on this port number because

00:24:00,270 --> 00:24:06,720
traditionally we are running on three

00:24:02,220 --> 00:24:10,980
306 and this is SSL enable and

00:24:06,720 --> 00:24:26,930
JavaScript command so first I need to

00:24:10,980 --> 00:24:31,080
select database okay so you say I can

00:24:26,930 --> 00:24:35,240
access to the schema Ryan through this

00:24:31,080 --> 00:24:39,750
DB global variable right so you do a DB

00:24:35,240 --> 00:24:45,720
you say Ryan connected and then you do a

00:24:39,750 --> 00:24:48,480
DB tap it gives you a list of functions

00:24:45,720 --> 00:24:52,800
that you could use to work with this

00:24:48,480 --> 00:24:54,810
schema objects right so in here you see

00:24:52,800 --> 00:24:57,530
there's a out of the right hand corner

00:24:54,810 --> 00:25:09,650
t1 which is a table that I've shown you

00:24:57,530 --> 00:25:09,650
so t1 plus to fast let's do it again

00:25:12,080 --> 00:25:24,540
so tap to get a list of functions do a

00:25:16,110 --> 00:25:27,090
select okay so you see you can access

00:25:24,540 --> 00:25:29,840
the table that way or you can go to your

00:25:27,090 --> 00:25:29,840
SQL mode

00:25:36,060 --> 00:25:41,440
so same thing so we can switch back and

00:25:39,070 --> 00:25:42,880
forth and you could use it you can test

00:25:41,440 --> 00:25:59,790
those thing very very fast

00:25:42,880 --> 00:25:59,790
yeah oh okay okay let me try

00:26:49,530 --> 00:26:54,610
okay I'm keeping my finger crossed

00:26:51,940 --> 00:27:03,280
am I not working but that's the syntax

00:26:54,610 --> 00:27:07,810
right I think no I yeah yeah switch it

00:27:03,280 --> 00:27:09,070
like that and then my bed right yeah

00:27:07,810 --> 00:27:15,580
let's try it

00:27:09,070 --> 00:27:18,070
oh but you you get the yeah good idea

00:27:15,580 --> 00:27:24,420
right so let's get collection t1 and

00:27:18,070 --> 00:27:24,420
then flying and your argument yeah yeah

00:27:26,850 --> 00:27:35,160
fine double cool instead see okay yeah

00:27:30,370 --> 00:27:35,160
yeah I always get confused where this

00:27:35,760 --> 00:27:53,490
bracket

00:27:36,940 --> 00:27:53,490
I needed to clear bracket collection

00:27:55,080 --> 00:28:12,520
yeah yeah you just gotta sin taxes yeah

00:27:58,570 --> 00:28:15,130
yeah right okay that's why I need to

00:28:12,520 --> 00:28:20,050
also go back and read all this to be

00:28:15,130 --> 00:28:23,550
more familiar and yeah more you know if

00:28:20,050 --> 00:28:29,260
you you have these are all the different

00:28:23,550 --> 00:28:31,510
API and connectors so in summary it's

00:28:29,260 --> 00:28:33,940
it's great its extension in fact I I

00:28:31,510 --> 00:28:36,160
have call of fun playing with the mask

00:28:33,940 --> 00:28:42,840
I'll share because so flexible and you

00:28:36,160 --> 00:28:48,670
can really test out stuff quickly and

00:28:42,840 --> 00:28:52,540
yeah that's about all for my talk I do

00:28:48,670 --> 00:28:59,550
have a couple of questions and see

00:28:52,540 --> 00:28:59,550
whether you know anybody cashed in I

00:29:00,360 --> 00:29:08,940
actually mentioned it but if you anybody

00:29:09,240 --> 00:29:19,330
get collection collection that's a

00:29:14,680 --> 00:29:21,370
JavaScript I'm looking for SQL the one

00:29:19,330 --> 00:29:28,470
that you're using SQL sim and select

00:29:21,370 --> 00:29:28,470
whatever it always prefixed with Jason

00:29:29,010 --> 00:29:36,880
chain from my back so you know that some

00:29:32,380 --> 00:29:39,460
goodies coming I should show yeah I

00:29:36,880 --> 00:29:43,150
should sure he's a book it's a book so

00:29:39,460 --> 00:29:45,250
to the all right okay I have a

00:29:43,150 --> 00:29:48,610
simpler one

00:29:45,250 --> 00:29:51,700
I can you give a hint perhaps yeah it's

00:29:48,610 --> 00:29:55,300
Jason something Jason something yeah

00:29:51,700 --> 00:29:56,920
okay how many more syllables okay no

00:29:55,300 --> 00:30:00,130
Maurice no raise I don't want to stress

00:29:56,920 --> 00:30:04,030
you yeah Jason extract nice you know

00:30:00,130 --> 00:30:06,130
extract member just nice so extract IDE

00:30:04,030 --> 00:30:09,160
whatever okay

00:30:06,130 --> 00:30:18,140
this one is simple name one of the

00:30:09,160 --> 00:30:23,690
masculine store component yeah thank you

00:30:18,140 --> 00:30:26,210
thank you thank you you go it's by one

00:30:23,690 --> 00:30:27,650
of our community manager Dave stock but

00:30:26,210 --> 00:30:29,740
we don't have time for him to autograph

00:30:27,650 --> 00:30:34,059
maybe next time

00:30:29,740 --> 00:30:34,059
okay so I think that's all I have

00:30:34,520 --> 00:30:37,730
back to I'm sorry well thank you very

00:30:37,040 --> 00:30:41,620
much

00:30:37,730 --> 00:30:41,620

YouTube URL: https://www.youtube.com/watch?v=Xhs4CnbGZ34


