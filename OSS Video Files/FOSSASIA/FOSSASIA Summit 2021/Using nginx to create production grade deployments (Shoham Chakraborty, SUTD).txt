Title: Using nginx to create production grade deployments (Shoham Chakraborty, SUTD)
Publication date: 2021-03-25
Playlist: FOSSASIA Summit 2021
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:05,520
okay so uh before we start a few things

00:00:04,080 --> 00:00:08,080
you might wanna

00:00:05,520 --> 00:00:09,920
you should have but it's not necessary

00:00:08,080 --> 00:00:12,080
is you need to have a cloud pro

00:00:09,920 --> 00:00:13,200
up an account on a cloud provider it can

00:00:12,080 --> 00:00:16,320
be

00:00:13,200 --> 00:00:17,039
uh digital ocean aws anything doesn't

00:00:16,320 --> 00:00:20,240
matter but

00:00:17,039 --> 00:00:20,800
you need a vm and you need a domain but

00:00:20,240 --> 00:00:23,199
if you

00:00:20,800 --> 00:00:25,439
do not have any of these then it's okay

00:00:23,199 --> 00:00:28,560
you can just watch along and

00:00:25,439 --> 00:00:31,679
do it later in your own leisure

00:00:28,560 --> 00:00:32,320
um this is the reference material so

00:00:31,679 --> 00:00:35,440
these

00:00:32,320 --> 00:00:35,920
these um slides were originally meant

00:00:35,440 --> 00:00:40,000
for

00:00:35,920 --> 00:00:40,879
uh for a workshop held at sctd but it's

00:00:40,000 --> 00:00:44,559
been adapted

00:00:40,879 --> 00:00:45,760
for for seizure and disclaimer number

00:00:44,559 --> 00:00:47,280
two is that

00:00:45,760 --> 00:00:49,039
there's a lot of different tools that

00:00:47,280 --> 00:00:51,360
you can use to do

00:00:49,039 --> 00:00:52,320
what we are doing today but we are only

00:00:51,360 --> 00:00:55,360
gonna be

00:00:52,320 --> 00:00:57,520
covering a small set so uh what we're

00:00:55,360 --> 00:01:00,399
gonna be using

00:00:57,520 --> 00:01:01,760
first one is google cloud platform which

00:01:00,399 --> 00:01:04,799
will be used to

00:01:01,760 --> 00:01:07,600
using to create our vms and

00:01:04,799 --> 00:01:08,799
an ssh client which can be open ssh or

00:01:07,600 --> 00:01:11,840
party

00:01:08,799 --> 00:01:13,840
and a web browser to just check our web

00:01:11,840 --> 00:01:16,960
deployment

00:01:13,840 --> 00:01:19,439
all right so step one is

00:01:16,960 --> 00:01:21,360
create a vm and the first thing you will

00:01:19,439 --> 00:01:24,479
need to do is

00:01:21,360 --> 00:01:27,840
to create an ssh key so

00:01:24,479 --> 00:01:31,280
on on pro 6 platforms you can just use

00:01:27,840 --> 00:01:33,680
um ssh key gen

00:01:31,280 --> 00:01:35,040
it should be included in most if not all

00:01:33,680 --> 00:01:36,960
distros

00:01:35,040 --> 00:01:39,439
and you can just use this to create a

00:01:36,960 --> 00:01:42,720
pair key pair

00:01:39,439 --> 00:01:46,240
so if

00:01:42,720 --> 00:01:50,720
if you run this i'm using wsr here

00:01:46,240 --> 00:01:50,720
so you can run ssh key gen

00:01:51,680 --> 00:01:57,840
there's something wrong key

00:01:55,600 --> 00:01:57,840
gen

00:02:01,560 --> 00:02:04,739
[Music]

00:02:06,840 --> 00:02:23,920
mean and a username

00:02:22,400 --> 00:02:25,920
okay there seems to be something wrong

00:02:23,920 --> 00:02:28,640
with wf so but if you run these two

00:02:25,920 --> 00:02:30,560
commands then you should be able to get

00:02:28,640 --> 00:02:34,000
a public and private key

00:02:30,560 --> 00:02:34,480
then you can use this this command to

00:02:34,000 --> 00:02:38,160
actually

00:02:34,480 --> 00:02:41,519
ssh into your vm so um

00:02:38,160 --> 00:02:43,280
that is it for s for linux and and mac

00:02:41,519 --> 00:02:47,280
os but on windows

00:02:43,280 --> 00:02:50,000
we can use an app called party so

00:02:47,280 --> 00:02:51,840
if you install putty you should have

00:02:50,000 --> 00:02:55,840
another application called partygen

00:02:51,840 --> 00:02:59,200
included so it looks something like this

00:02:55,840 --> 00:03:02,480
and all you need to do is

00:02:59,200 --> 00:03:03,680
make sure the key type is rsa this you

00:03:02,480 --> 00:03:06,640
can leave it as b

00:03:03,680 --> 00:03:08,319
and click on generate move your mouse a

00:03:06,640 --> 00:03:11,840
bit

00:03:08,319 --> 00:03:13,599
and it will generate a key for you um

00:03:11,840 --> 00:03:15,920
in the comment you can put in the

00:03:13,599 --> 00:03:19,360
username so i'm going to use

00:03:15,920 --> 00:03:21,599
the first part of my email and

00:03:19,360 --> 00:03:23,200
that's it you can click on save private

00:03:21,599 --> 00:03:25,440
key and

00:03:23,200 --> 00:03:26,640
and save it to desktop because you will

00:03:25,440 --> 00:03:32,159
need it later

00:03:26,640 --> 00:03:34,319
and this one is your public key so yeah

00:03:32,159 --> 00:03:37,519
that's how you create an ssh key

00:03:34,319 --> 00:03:40,000
so i think we can start

00:03:37,519 --> 00:03:42,560
on our initial deployment so the first

00:03:40,000 --> 00:03:46,319
thing you need to do is

00:03:42,560 --> 00:03:48,319
is to create a vm so for

00:03:46,319 --> 00:03:49,519
for this workshop i'm going to be using

00:03:48,319 --> 00:03:51,760
google cloud

00:03:49,519 --> 00:03:54,080
but as i said earlier you can you can

00:03:51,760 --> 00:03:57,200
use any cloud provider

00:03:54,080 --> 00:03:57,760
it's all going to be mostly the same so

00:03:57,200 --> 00:04:00,959
on

00:03:57,760 --> 00:04:06,159
on dcp you can go to compute engine

00:04:00,959 --> 00:04:06,159
and click on virtual machines and

00:04:07,120 --> 00:04:11,840
once that loads you can just click

00:04:09,360 --> 00:04:11,840
create

00:04:12,840 --> 00:04:17,680
and

00:04:15,599 --> 00:04:19,440
once that loads you can give your vm a

00:04:17,680 --> 00:04:20,639
name i'm going to call it foresee here

00:04:19,440 --> 00:04:24,800
for now

00:04:20,639 --> 00:04:27,440
um leave these as it is

00:04:24,800 --> 00:04:29,520
if you want to save some money you can

00:04:27,440 --> 00:04:32,560
go to the smallest machine

00:04:29,520 --> 00:04:35,440
which is the f1 micro

00:04:32,560 --> 00:04:37,040
and everything else should be the same

00:04:35,440 --> 00:04:40,880
and for firewall you can allow

00:04:37,040 --> 00:04:44,080
http and https for now so

00:04:40,880 --> 00:04:45,600
once you click create you should be able

00:04:44,080 --> 00:04:48,880
to see

00:04:45,600 --> 00:04:48,880
the vm being created

00:04:52,160 --> 00:04:58,400
and it's gonna take a while

00:04:55,199 --> 00:05:01,680
so um well

00:04:58,400 --> 00:05:03,520
so once we get into our vm what what

00:05:01,680 --> 00:05:07,199
we'll be using is

00:05:03,520 --> 00:05:10,160
using workzerk which is uh which is

00:05:07,199 --> 00:05:10,960
an in-built uh server that comes bundled

00:05:10,160 --> 00:05:14,560
with flask

00:05:10,960 --> 00:05:15,840
so it's basically the server that runs

00:05:14,560 --> 00:05:17,759
when you

00:05:15,840 --> 00:05:19,280
when you type in flask one or something

00:05:17,759 --> 00:05:23,840
something like that

00:05:19,280 --> 00:05:26,160
um so yeah so here we have our external

00:05:23,840 --> 00:05:26,160
ip

00:05:30,800 --> 00:05:38,240
yeah hi yeah so

00:05:34,560 --> 00:05:40,400
uh we've just created our vm

00:05:38,240 --> 00:05:40,400
so

00:05:47,120 --> 00:05:54,479
oh yeah sure do you have

00:05:50,160 --> 00:05:54,479
an account on gcp or aws

00:05:55,680 --> 00:06:00,080
uh an account on gcp or aws

00:06:02,000 --> 00:06:05,680
it's okay aws is also fine so uh you

00:06:04,560 --> 00:06:11,520
need to create a

00:06:05,680 --> 00:06:11,520
virtual machine first on on aws

00:06:11,759 --> 00:06:21,840
i think you can go to easy to

00:06:15,440 --> 00:06:21,840
clear canon

00:06:46,840 --> 00:06:49,840
okay

00:14:48,480 --> 00:14:55,040
uh then you click on edit

00:14:52,639 --> 00:14:56,839
and you basically add your sshk to your

00:14:55,040 --> 00:15:00,320
vm

00:14:56,839 --> 00:15:03,279
so over here you can see there's

00:15:00,320 --> 00:15:05,360
there's a zero ssh keys you can click

00:15:03,279 --> 00:15:06,560
and paste it in

00:15:05,360 --> 00:15:08,480
then over here you should see your

00:15:06,560 --> 00:15:10,839
username popping up

00:15:08,480 --> 00:15:12,399
uh if it does then you can just click

00:15:10,839 --> 00:15:14,959
save and

00:15:12,399 --> 00:15:15,839
once it updates you should be able to

00:15:14,959 --> 00:15:21,360
use this

00:15:15,839 --> 00:15:21,360
ssh key to connect your vm

00:15:24,399 --> 00:15:28,959
for windows uh you can use this app

00:15:27,360 --> 00:15:32,639
called party

00:15:28,959 --> 00:15:35,040
so party is basically

00:15:32,639 --> 00:15:37,040
um an ssh client specifically for

00:15:35,040 --> 00:15:39,759
windows

00:15:37,040 --> 00:15:40,560
you can download it at party.org and it

00:15:39,759 --> 00:15:43,519
comes with

00:15:40,560 --> 00:15:45,519
two applications so one is patty which

00:15:43,519 --> 00:15:47,759
is the ssh client and it also comes with

00:15:45,519 --> 00:15:50,000
partygen

00:15:47,759 --> 00:15:50,959
it looks something like this then all

00:15:50,000 --> 00:15:55,199
you need to do is

00:15:50,959 --> 00:15:57,839
click on generate move your mouse a bit

00:15:55,199 --> 00:15:59,680
and it will create a key then uh to

00:15:57,839 --> 00:16:04,560
specify the username you can just

00:15:59,680 --> 00:16:04,560
change the comment to your username

00:16:04,720 --> 00:16:08,000
yeah then this is your your public key

00:16:06,800 --> 00:16:10,399
which you can just copy from

00:16:08,000 --> 00:16:13,120
here and your private key you can just

00:16:10,399 --> 00:16:15,040
click the save button

00:16:13,120 --> 00:16:18,480
yeah but i already have one so i'm not

00:16:15,040 --> 00:16:22,560
gonna save this particular one

00:16:18,480 --> 00:16:37,839
so yeah um let me add my other private

00:16:22,560 --> 00:16:37,839
key here

00:16:44,240 --> 00:16:48,320
okay so once once you have your ssh key

00:16:47,199 --> 00:16:51,920
in

00:16:48,320 --> 00:16:52,800
any of your vm uh you should be able to

00:16:51,920 --> 00:16:56,560
ssh

00:16:52,800 --> 00:16:59,759
into your vm so that is actually quite

00:16:56,560 --> 00:17:03,279
easy to do what you can do is run ssh

00:16:59,759 --> 00:17:05,919
and as you can see here dash i

00:17:03,279 --> 00:17:08,160
then your part to the private key

00:17:05,919 --> 00:17:10,720
another public key the private key

00:17:08,160 --> 00:17:12,400
and then your username and the external

00:17:10,720 --> 00:17:14,240
ip of your vm

00:17:12,400 --> 00:17:16,559
so the username is the same one that you

00:17:14,240 --> 00:17:19,039
use to create the key

00:17:16,559 --> 00:17:19,919
and in case you forget it you can always

00:17:19,039 --> 00:17:22,720
check the

00:17:19,919 --> 00:17:25,120
public key and it will be the last the

00:17:22,720 --> 00:17:29,280
last word basically

00:17:25,120 --> 00:17:33,440
so for me i will do ssh-i

00:17:29,280 --> 00:17:38,000
home directory main and

00:17:33,440 --> 00:17:42,240
my username is sshfshmchk

00:17:38,000 --> 00:17:44,240
and then i will find the the external ip

00:17:42,240 --> 00:17:45,280
which your cloud provider should tell

00:17:44,240 --> 00:17:48,960
you

00:17:45,280 --> 00:17:52,080
and paste that in and

00:17:48,960 --> 00:17:52,080
just say yes to this

00:17:52,640 --> 00:17:58,080
and that's it you have successfully

00:17:56,400 --> 00:18:01,200
connected

00:17:58,080 --> 00:18:04,720
to your your vm

00:18:01,200 --> 00:18:07,200
so one the easiest way to know if you've

00:18:04,720 --> 00:18:09,360
connected to your vm is if you type

00:18:07,200 --> 00:18:11,840
it takes a long time to show up because

00:18:09,360 --> 00:18:14,799
it's not as responsive because

00:18:11,840 --> 00:18:15,679
you type it sends the request to the

00:18:14,799 --> 00:18:17,520
server

00:18:15,679 --> 00:18:19,120
the server says yes i got that the

00:18:17,520 --> 00:18:20,480
character then it comes back

00:18:19,120 --> 00:18:22,160
and this happens for each and every

00:18:20,480 --> 00:18:24,880
character so it takes

00:18:22,160 --> 00:18:26,480
a long time so you can like noticeably

00:18:24,880 --> 00:18:27,520
like when you type you can notice the

00:18:26,480 --> 00:18:28,960
delay

00:18:27,520 --> 00:18:30,720
so yeah that's an easy way to know if

00:18:28,960 --> 00:18:32,720
you have actually ssh

00:18:30,720 --> 00:18:35,200
so you can check another thing you can

00:18:32,720 --> 00:18:39,440
check is lsb release dash a

00:18:35,200 --> 00:18:39,440
which will tell you you know the

00:18:39,600 --> 00:18:44,160
the distro that you're running so here i

00:18:42,240 --> 00:18:48,080
am running debian

00:18:44,160 --> 00:18:51,600
debian 10 yeah

00:18:48,080 --> 00:18:54,400
so a standard procedure to do

00:18:51,600 --> 00:18:54,799
when you first create a vm is to update

00:18:54,400 --> 00:18:58,000
so

00:18:54,799 --> 00:19:02,000
sudo apt update

00:18:58,000 --> 00:19:04,400
and sudo apt upgrade

00:19:02,000 --> 00:19:05,280
this will just you know update all the

00:19:04,400 --> 00:19:09,280
packages

00:19:05,280 --> 00:19:12,559
this is the same as ubuntu so

00:19:09,280 --> 00:19:16,080
yeah once once this is done

00:19:12,559 --> 00:19:18,799
we should be good to use our vm to

00:19:16,080 --> 00:19:18,799
deploy apps

00:19:19,280 --> 00:19:27,360
okay so for this um

00:19:24,160 --> 00:19:30,799
for this workshop we have a

00:19:27,360 --> 00:19:33,120
we have a website pre-built

00:19:30,799 --> 00:19:34,160
so it's available on this github

00:19:33,120 --> 00:19:37,120
repositories

00:19:34,160 --> 00:19:39,360
it's quite simple it is just just the

00:19:37,120 --> 00:19:43,200
flask app and it just returns this

00:19:39,360 --> 00:19:48,240
html file yeah it is quite simple

00:19:43,200 --> 00:19:53,840
so um once this is done

00:19:48,240 --> 00:19:53,840
let's just wait for it

00:20:01,760 --> 00:20:06,080
yeah so um what we're going to be using

00:20:04,240 --> 00:20:10,159
is boxer

00:20:06,080 --> 00:20:12,400
which is an an inbuilt uh web server

00:20:10,159 --> 00:20:14,240
which comes bundled with flask so flask

00:20:12,400 --> 00:20:17,360
is a

00:20:14,240 --> 00:20:20,480
it's a web framework that that's

00:20:17,360 --> 00:20:22,640
it's a web framework for python so it's

00:20:20,480 --> 00:20:26,159
a server that comes with

00:20:22,640 --> 00:20:28,799
with it and you can just plus run or

00:20:26,159 --> 00:20:29,280
you know python 3 your file and it will

00:20:28,799 --> 00:20:32,640
just

00:20:29,280 --> 00:20:36,559
run so

00:20:32,640 --> 00:20:40,559
once this is done we can do that

00:20:36,559 --> 00:20:40,559
it seems to be taking a long time

00:20:41,840 --> 00:20:45,280
but yeah in the meantime maybe i can

00:20:43,919 --> 00:20:48,320
show you how to use party

00:20:45,280 --> 00:20:51,919
so for party what you do

00:20:48,320 --> 00:20:54,640
is you go to ssh then you click on alt

00:20:51,919 --> 00:20:57,280
and click on the private key then you

00:20:54,640 --> 00:21:00,880
select the private key

00:20:57,280 --> 00:21:03,840
go back to session and paste your

00:21:00,880 --> 00:21:03,840
external ip

00:21:07,039 --> 00:21:11,520
once you do that you can just press yes

00:21:09,200 --> 00:21:15,120
type in your username

00:21:11,520 --> 00:21:18,799
and you should be in yeah

00:21:15,120 --> 00:21:18,799
this is taking a long time

00:21:24,799 --> 00:21:31,840
okay uh well that's

00:21:28,480 --> 00:21:31,840
going on

00:21:34,960 --> 00:21:45,840
it's almost done

00:21:56,840 --> 00:21:59,840
so

00:22:24,640 --> 00:22:30,640
yeah i think this is like uh

00:22:27,760 --> 00:22:32,080
i think the the package that that's

00:22:30,640 --> 00:22:35,360
installing is quite huge

00:22:32,080 --> 00:22:37,760
i think it's like 300 mb yeah

00:22:35,360 --> 00:22:37,760
so it's

00:22:38,559 --> 00:22:41,039
taking a

00:22:50,960 --> 00:22:55,360
yeah usually it doesn't take this long

00:22:52,840 --> 00:22:59,600
but

00:22:55,360 --> 00:22:59,600
okay uh in the meantime i'm gonna

00:23:00,159 --> 00:23:03,120
do what's over here

00:23:09,760 --> 00:23:13,600
yeah but no this is actually like a very

00:23:11,840 --> 00:23:16,960
weak machine it's only

00:23:13,600 --> 00:23:19,600
one core and like 600 mb of ram

00:23:16,960 --> 00:23:23,840
so like even a 10 year old computer is

00:23:19,600 --> 00:23:23,840
probably faster than this

00:23:24,480 --> 00:23:31,760
yeah actually yeah it shouldn't

00:23:28,080 --> 00:23:34,559
take this long i have no idea why it's

00:23:31,760 --> 00:23:34,559
taking this long

00:23:34,840 --> 00:23:42,640
but let me

00:23:37,039 --> 00:23:45,840
open another another one

00:23:42,640 --> 00:23:45,840
ssh back in

00:23:45,919 --> 00:23:50,320
and what i'm gonna do is just download

00:23:48,480 --> 00:23:52,559
these files

00:23:50,320 --> 00:23:52,559
so

00:23:58,159 --> 00:24:02,400
oh i actually need to install top

00:23:59,919 --> 00:24:02,400
viewcat

00:24:02,840 --> 00:24:05,840
oh

00:24:09,039 --> 00:24:11,919
why is it stuck

00:24:16,840 --> 00:24:19,840
okay

00:24:44,840 --> 00:24:47,840
so

00:24:57,039 --> 00:25:01,840
i think i'm just gonna restart

00:25:25,840 --> 00:25:28,960
well this is something that we

00:25:29,640 --> 00:25:32,880
[Music]

00:25:35,760 --> 00:25:44,240
so yeah i mean if you stay within that

00:25:40,159 --> 00:25:47,919
you should be okay 750 hours is

00:25:44,240 --> 00:25:47,919
a bit more than one month so yeah

00:25:48,080 --> 00:25:51,440
they have a free tier video

00:25:51,760 --> 00:25:57,840
i think you can go to i don't know a

00:25:54,840 --> 00:25:57,840
cloud

00:26:04,080 --> 00:26:08,320
yeah so if you go to compute engine

00:26:05,760 --> 00:26:09,360
there's one free micro instance per

00:26:08,320 --> 00:26:11,840
month

00:26:09,360 --> 00:26:13,919
and i believe aws and azure also have

00:26:11,840 --> 00:26:18,720
like the same offer

00:26:13,919 --> 00:26:22,400
so yeah i it is three yeah

00:26:18,720 --> 00:26:25,600
yeah it is

00:26:22,400 --> 00:26:28,000
i think this machine has some problem

00:26:25,600 --> 00:26:28,000
with it

00:26:30,080 --> 00:26:39,840
i'll create a new one

00:27:47,360 --> 00:27:52,480
okay let's try ssh into this one

00:27:58,640 --> 00:28:02,880
okay this one works so i'm gonna sudo

00:28:02,320 --> 00:28:06,640
app

00:28:02,880 --> 00:28:10,240
install wget and unzip

00:28:06,640 --> 00:28:10,240
just to get the files onto here

00:28:21,420 --> 00:28:28,470
[Music]

00:28:32,960 --> 00:28:37,760
and the files are all here so i'm gonna

00:28:37,120 --> 00:28:41,039
move

00:28:37,760 --> 00:28:41,039
this directory to home

00:28:41,760 --> 00:28:50,000
and cd doctor

00:28:45,360 --> 00:28:50,000
this rm master that's it

00:28:54,320 --> 00:28:58,480
okay now if you see the the files that

00:28:57,279 --> 00:29:01,919
we have we

00:28:58,480 --> 00:29:04,000
have a main.pi and requirements.txt

00:29:01,919 --> 00:29:05,760
so if you're familiar with flash

00:29:04,000 --> 00:29:08,159
development then

00:29:05,760 --> 00:29:09,760
main.pi is essentially your entry point

00:29:08,159 --> 00:29:13,520
to the web app

00:29:09,760 --> 00:29:17,440
and you can see the contents

00:29:13,520 --> 00:29:18,080
is is basically it just creates a flask

00:29:17,440 --> 00:29:21,600
app then

00:29:18,080 --> 00:29:24,799
says at the home at the root you just

00:29:21,600 --> 00:29:28,080
display this html file

00:29:24,799 --> 00:29:28,080
yeah and

00:29:29,600 --> 00:29:36,720
i'm sorry oh no no you can just

00:29:33,360 --> 00:29:40,480
just just look at it like this

00:29:36,720 --> 00:29:41,600
yeah it's just a simple web you can use

00:29:40,480 --> 00:29:46,240
anything really

00:29:41,600 --> 00:29:49,279
as long as it's flash for this one so um

00:29:46,240 --> 00:29:52,480
yeah so we have this

00:29:49,279 --> 00:29:54,559
web app and the easiest way to deploy it

00:29:52,480 --> 00:29:59,200
is just to run it locally

00:29:54,559 --> 00:30:03,039
so cd files python 3 main.pi

00:29:59,200 --> 00:30:07,440
and need to install flask so

00:30:03,039 --> 00:30:10,240
first you need to add install

00:30:07,440 --> 00:30:10,240
python 3

00:30:10,480 --> 00:30:16,559
python 3-pip

00:30:13,840 --> 00:30:16,559
press yes

00:30:16,960 --> 00:30:23,840
let it install

00:30:34,840 --> 00:30:37,840
so

00:30:54,320 --> 00:31:02,080
okay so you can just split three

00:30:57,360 --> 00:31:03,919
install flask and

00:31:02,080 --> 00:31:05,519
yeah that should be enough so you can

00:31:03,919 --> 00:31:09,120
just

00:31:05,519 --> 00:31:12,720
just run the main file and

00:31:09,120 --> 00:31:15,840
you have a working server basically so

00:31:12,720 --> 00:31:20,159
if you go to the external ip now

00:31:15,840 --> 00:31:20,159
you won't be able to access anything so

00:31:21,039 --> 00:31:26,159
if you see if i try to connect to port

00:31:24,480 --> 00:31:28,880
4000 which is where it's

00:31:26,159 --> 00:31:32,000
served oh it's 5 000 so if i go try to

00:31:28,880 --> 00:31:34,080
go to port 5000

00:31:32,000 --> 00:31:36,399
it won't let me connect basically

00:31:34,080 --> 00:31:36,399
because

00:31:36,480 --> 00:31:40,559
most of these cloud providers have a

00:31:39,120 --> 00:31:44,320
security feature

00:31:40,559 --> 00:31:47,760
so they will block all ports by default

00:31:44,320 --> 00:31:51,200
so what you can do for to fix that

00:31:47,760 --> 00:31:52,480
is manually allow port 5000 on the

00:31:51,200 --> 00:31:55,919
firewall

00:31:52,480 --> 00:32:00,080
so doing that is quite simple

00:31:55,919 --> 00:32:02,559
so in gcp you go

00:32:00,080 --> 00:32:04,320
down here vpc network and there's a

00:32:02,559 --> 00:32:07,519
firewall here

00:32:04,320 --> 00:32:11,279
so you create a new rule

00:32:07,519 --> 00:32:15,840
and call it something useful like

00:32:11,279 --> 00:32:15,840
allow flask and

00:32:16,240 --> 00:32:21,600
then you create a tag so tag is

00:32:18,960 --> 00:32:24,000
basically what gcp uses to

00:32:21,600 --> 00:32:25,120
apply this firewall rule to specific

00:32:24,000 --> 00:32:26,799
instances

00:32:25,120 --> 00:32:29,200
so what you will do is you create this

00:32:26,799 --> 00:32:32,480
tag here and you will use that tag

00:32:29,200 --> 00:32:34,320
on your vm to allow that firewall

00:32:32,480 --> 00:32:35,840
to make that firework applicable to that

00:32:34,320 --> 00:32:38,320
specific vm

00:32:35,840 --> 00:32:40,080
so the stack can be anything but to keep

00:32:38,320 --> 00:32:43,120
it descriptive uh

00:32:40,080 --> 00:32:46,799
let's call it 5000 oh

00:32:43,120 --> 00:32:49,519
okay so flask five thousand

00:32:46,799 --> 00:32:50,399
and source ip ranges so for here we

00:32:49,519 --> 00:32:52,640
wanna

00:32:50,399 --> 00:32:54,159
is basically restricting the ip

00:32:52,640 --> 00:32:56,080
addresses that

00:32:54,159 --> 00:32:57,200
uh that that can pass through the

00:32:56,080 --> 00:33:00,159
firewall so

00:32:57,200 --> 00:33:00,960
since our app is going to be public we

00:33:00,159 --> 00:33:03,919
want to allow

00:33:00,960 --> 00:33:08,320
all ip addresses so the shorthand for

00:33:03,919 --> 00:33:11,279
that is 0.0.0.0.0

00:33:08,320 --> 00:33:12,720
so what this means basically is allow

00:33:11,279 --> 00:33:15,919
all ip addresses from

00:33:12,720 --> 00:33:16,240
all subnets it just means that anyone

00:33:15,919 --> 00:33:19,679
can

00:33:16,240 --> 00:33:24,559
connect to it and we want to allow

00:33:19,679 --> 00:33:26,720
port 5000 and just create a rule

00:33:24,559 --> 00:33:27,679
while that's creating you can edit your

00:33:26,720 --> 00:33:30,960
instance

00:33:27,679 --> 00:33:34,640
and here you can see a network tag

00:33:30,960 --> 00:33:36,960
so i've i've already enabled http and

00:33:34,640 --> 00:33:40,320
https which is

00:33:36,960 --> 00:33:41,039
480 and 443 these are all very standard

00:33:40,320 --> 00:33:44,159
then

00:33:41,039 --> 00:33:44,960
here you can just add plus 5000 and this

00:33:44,159 --> 00:33:47,519
will

00:33:44,960 --> 00:33:50,080
this will allow 5000 port to be

00:33:47,519 --> 00:33:50,080
accessible

00:33:50,840 --> 00:33:54,960
so is it this one

00:33:55,679 --> 00:33:59,360
yeah so here you can see applicable to

00:33:57,440 --> 00:34:00,640
instances and you can see our instance

00:33:59,360 --> 00:34:05,200
one here

00:34:00,640 --> 00:34:05,200
so if i try refreshing this now

00:34:05,360 --> 00:34:09,440
it should show our

00:34:09,679 --> 00:34:21,839
our vm

00:34:26,639 --> 00:34:30,560
okay these things usually take a while

00:34:28,639 --> 00:34:35,839
to propagate so maybe

00:34:30,560 --> 00:34:35,839
this one's causing it to be so slow

00:34:44,720 --> 00:34:51,280
oh i think i know what's wrong i think

00:34:47,919 --> 00:34:51,280
the port is being blocked by the

00:34:51,440 --> 00:35:03,839
the network here so let me just

00:34:54,879 --> 00:35:03,839
try and vpn

00:35:26,480 --> 00:35:30,960
that's blocking it because there's like

00:35:29,680 --> 00:35:34,079
no requests here

00:35:30,960 --> 00:35:45,839
so i

00:35:34,079 --> 00:35:45,839
am not sure what's going on

00:35:59,680 --> 00:36:13,839
okay uh alright

00:36:04,560 --> 00:36:13,839
i'm gonna try running this on 40 key

00:36:21,520 --> 00:36:28,400
okay basically uh

00:36:25,119 --> 00:36:30,640
okay this

00:36:28,400 --> 00:36:32,720
is probably being blocked by the network

00:36:30,640 --> 00:36:36,240
but you should be able to see

00:36:32,720 --> 00:36:38,960
the python app on this url

00:36:36,240 --> 00:36:39,440
at this moment but the thing is that

00:36:38,960 --> 00:36:42,880
this

00:36:39,440 --> 00:36:43,839
the server we are running is is is not

00:36:42,880 --> 00:36:45,440
very

00:36:43,839 --> 00:36:47,200
it's not very optimized so as you can

00:36:45,440 --> 00:36:48,320
see here even though the environment is

00:36:47,200 --> 00:36:50,720
production

00:36:48,320 --> 00:36:52,160
it tells you here that this is not a

00:36:50,720 --> 00:36:54,240
development

00:36:52,160 --> 00:36:56,240
server and please use a production

00:36:54,240 --> 00:36:59,520
deployment because

00:36:56,240 --> 00:37:01,359
uh basically there's a lot of um this is

00:36:59,520 --> 00:37:03,280
this is more meant for development

00:37:01,359 --> 00:37:05,200
purposes so yes

00:37:03,280 --> 00:37:06,480
is more oriented to features like port

00:37:05,200 --> 00:37:08,160
reload so

00:37:06,480 --> 00:37:10,079
you know when you're like coding then

00:37:08,160 --> 00:37:11,599
you press you just save

00:37:10,079 --> 00:37:13,280
then the server will automatically

00:37:11,599 --> 00:37:16,320
reboot to

00:37:13,280 --> 00:37:19,839
show your your updated files

00:37:16,320 --> 00:37:21,359
yeah so um what we're gonna do is

00:37:19,839 --> 00:37:23,440
actually create this production

00:37:21,359 --> 00:37:26,400
deployment so

00:37:23,440 --> 00:37:27,839
for that let's introduce our

00:37:26,400 --> 00:37:30,400
architecture

00:37:27,839 --> 00:37:31,040
so our architecture will look something

00:37:30,400 --> 00:37:34,720
like this

00:37:31,040 --> 00:37:36,320
so this is taken from another website so

00:37:34,720 --> 00:37:38,000
instead of a rest client we will just

00:37:36,320 --> 00:37:41,280
have a normal

00:37:38,000 --> 00:37:42,000
web browser over here so what we will

00:37:41,280 --> 00:37:45,280
have is

00:37:42,000 --> 00:37:45,839
an ssl connection eventually that will

00:37:45,280 --> 00:37:49,119
go to

00:37:45,839 --> 00:37:51,680
our nginx reverse proxy

00:37:49,119 --> 00:37:54,320
and this will go to these three g

00:37:51,680 --> 00:37:54,320
unicorn

00:37:54,480 --> 00:38:00,360
worker instances so g

00:37:57,520 --> 00:38:01,680
unicorn is

00:38:00,360 --> 00:38:04,400
[Music]

00:38:01,680 --> 00:38:06,800
okay don't have it but g nikon is

00:38:04,400 --> 00:38:10,079
something that

00:38:06,800 --> 00:38:11,839
is a wsgi server so it's a web server

00:38:10,079 --> 00:38:15,520
gateway interface

00:38:11,839 --> 00:38:17,760
so um if you can see here

00:38:15,520 --> 00:38:19,520
what it does is the web browser tells

00:38:17,760 --> 00:38:22,079
the web server

00:38:19,520 --> 00:38:24,640
to get this specific url and then the

00:38:22,079 --> 00:38:28,000
web server interfaces with g unicorn

00:38:24,640 --> 00:38:30,560
and tells it's specifically what to do

00:38:28,000 --> 00:38:31,520
so what this is saying is i want this

00:38:30,560 --> 00:38:34,640
url

00:38:31,520 --> 00:38:36,240
then nginx tells g unicorn that i want

00:38:34,640 --> 00:38:41,040
this specific

00:38:36,240 --> 00:38:41,040
route so if you see our our

00:38:41,520 --> 00:38:45,760
main.pi what g unicorn says that i want

00:38:44,480 --> 00:38:49,200
to run hello

00:38:45,760 --> 00:38:53,440
this function so it is

00:38:49,200 --> 00:38:56,160
is um you know more more direct in a way

00:38:53,440 --> 00:38:59,520
so yeah so what we're going to do right

00:38:56,160 --> 00:39:01,920
now is set up the wsgi server

00:38:59,520 --> 00:39:04,079
before that i think we should go over

00:39:01,920 --> 00:39:07,440
what a reverse proxy is

00:39:04,079 --> 00:39:10,320
so if you're familiar then familiar with

00:39:07,440 --> 00:39:12,320
it then a forward proxy is basically

00:39:10,320 --> 00:39:14,240
someone running a machine somewhere then

00:39:12,320 --> 00:39:16,720
you tell that machine

00:39:14,240 --> 00:39:18,160
i want this website then the website

00:39:16,720 --> 00:39:20,240
then that machine goes and gets the

00:39:18,160 --> 00:39:23,440
website and it sends it back to you

00:39:20,240 --> 00:39:26,240
so it's in the early days it was it was

00:39:23,440 --> 00:39:29,359
the precursor to vpns basically because

00:39:26,240 --> 00:39:30,880
the website itself does not know your ip

00:39:29,359 --> 00:39:32,800
address but

00:39:30,880 --> 00:39:35,680
companies find their way around it so

00:39:32,800 --> 00:39:38,800
yeah so reverse proxy is the same thing

00:39:35,680 --> 00:39:39,280
in the reverse order so people come to

00:39:38,800 --> 00:39:42,400
you

00:39:39,280 --> 00:39:45,839
your web server and the web server

00:39:42,400 --> 00:39:47,440
uh tells you this is the ip address

00:39:45,839 --> 00:39:49,680
then it goes to the ip address gets the

00:39:47,440 --> 00:39:52,000
stuff and then passes it back to the

00:39:49,680 --> 00:39:52,000
client

00:39:53,680 --> 00:39:56,880
oh no it's not a firewall it's it's

00:39:55,520 --> 00:40:00,160
basically

00:39:56,880 --> 00:40:03,920
uh you can it's sort of like

00:40:00,160 --> 00:40:06,800
uh so say i wanna go somewhere

00:40:03,920 --> 00:40:08,960
say i wanna go to google.com so i go to

00:40:06,800 --> 00:40:10,720
google.com what my browser does is it

00:40:08,960 --> 00:40:12,880
goes to a reverse proxy

00:40:10,720 --> 00:40:13,839
then the reverse proxy tells me which

00:40:12,880 --> 00:40:16,640
which machine

00:40:13,839 --> 00:40:17,119
is google.com that will go get the files

00:40:16,640 --> 00:40:18,640
for me

00:40:17,119 --> 00:40:20,480
come back and then pass the files back

00:40:18,640 --> 00:40:24,079
to me

00:40:20,480 --> 00:40:26,000
yeah it's i don't know how to say this

00:40:24,079 --> 00:40:28,560
it basically

00:40:26,000 --> 00:40:29,599
goes to a place and gets the files for

00:40:28,560 --> 00:40:32,240
you

00:40:29,599 --> 00:40:34,480
similar to a forward proxy yeah but just

00:40:32,240 --> 00:40:38,000
it's all in reverse basically

00:40:34,480 --> 00:40:41,440
yeah so why do we need a reverse proxy

00:40:38,000 --> 00:40:43,599
if we need anything then g unicorn

00:40:41,440 --> 00:40:46,000
devs tell us it is strongly recommended

00:40:43,599 --> 00:40:47,839
to use it behind the proxy server

00:40:46,000 --> 00:40:49,200
the reason would be for performance

00:40:47,839 --> 00:40:52,560
reasons if you just run

00:40:49,200 --> 00:40:53,119
g-unicorn what happens is we use a

00:40:52,560 --> 00:40:55,920
socket

00:40:53,119 --> 00:40:56,319
a unique socket so it's used some it's

00:40:55,920 --> 00:40:57,440
for

00:40:56,319 --> 00:41:00,160
it's used for inter-process

00:40:57,440 --> 00:41:01,520
communication but if you just expose the

00:41:00,160 --> 00:41:03,359
socket there's a lot of

00:41:01,520 --> 00:41:04,800
overhead because every time you make a

00:41:03,359 --> 00:41:07,839
request

00:41:04,800 --> 00:41:09,280
it goes into uh it's it goes into corner

00:41:07,839 --> 00:41:12,480
mode basically so there's

00:41:09,280 --> 00:41:14,720
a lot overhead so using our proxy which

00:41:12,480 --> 00:41:17,760
runs in user mode is

00:41:14,720 --> 00:41:20,160
is much more efficient so

00:41:17,760 --> 00:41:22,560
what we are building versus what you

00:41:20,160 --> 00:41:25,280
know just running our app like this

00:41:22,560 --> 00:41:26,880
does is it will be able to handle way

00:41:25,280 --> 00:41:28,720
more concurrent traffic

00:41:26,880 --> 00:41:30,960
even with the smaller instant size we

00:41:28,720 --> 00:41:33,920
have it will be more stable

00:41:30,960 --> 00:41:34,800
so you know if the machine gets taken

00:41:33,920 --> 00:41:37,599
down

00:41:34,800 --> 00:41:39,040
or is rebooted it will automatically

00:41:37,599 --> 00:41:42,240
heal itself or

00:41:39,040 --> 00:41:43,680
just restart itself and it will be more

00:41:42,240 --> 00:41:47,040
secure because you're going to use

00:41:43,680 --> 00:41:50,240
ssl and easy to scale up

00:41:47,040 --> 00:41:53,440
here so setting up

00:41:50,240 --> 00:41:56,640
our wsgi server so

00:41:53,440 --> 00:41:58,720
we'll be using g unicorn so

00:41:56,640 --> 00:42:01,359
installing g unicorn is actually quite

00:41:58,720 --> 00:42:04,720
easy you can just pick three

00:42:01,359 --> 00:42:04,720
install g unicorn

00:42:05,839 --> 00:42:10,640
and this one is linux only so if you try

00:42:09,119 --> 00:42:13,520
to do it on windows or

00:42:10,640 --> 00:42:14,960
then on mac os it will just error out

00:42:13,520 --> 00:42:18,640
because

00:42:14,960 --> 00:42:21,920
i mean all all servers on

00:42:18,640 --> 00:42:24,880
uh also i was run on linux basically

00:42:21,920 --> 00:42:25,359
yeah so uh once you've installed g nikon

00:42:24,880 --> 00:42:28,800
just

00:42:25,359 --> 00:42:31,839
just to test you can run unicorn on

00:42:28,800 --> 00:42:34,880
on a port inside of a socket so

00:42:31,839 --> 00:42:36,240
for that you can use dash dashbind and

00:42:34,880 --> 00:42:40,960
then you can bind it to

00:42:36,240 --> 00:42:40,960
port 5000 and

00:42:41,040 --> 00:42:46,720
there's another important aspect here is

00:42:44,319 --> 00:42:48,800
where you need to point to the the flask

00:42:46,720 --> 00:42:53,760
callable object so

00:42:48,800 --> 00:42:56,319
um if you go to our main.pi

00:42:53,760 --> 00:42:58,319
here you can see we could we create a

00:42:56,319 --> 00:43:00,400
flask object here

00:42:58,319 --> 00:43:01,599
this is called a callable object

00:43:00,400 --> 00:43:04,160
basically

00:43:01,599 --> 00:43:06,000
so what g unicorn does is it calls this

00:43:04,160 --> 00:43:09,599
specific app object

00:43:06,000 --> 00:43:12,640
and then uses it to process requests so

00:43:09,599 --> 00:43:16,160
we need to point our unicorn

00:43:12,640 --> 00:43:19,359
workers to this specific instance

00:43:16,160 --> 00:43:23,040
or this specific object so what we do

00:43:19,359 --> 00:43:23,040
is genicorn

00:43:24,839 --> 00:43:27,839
unicorn

00:43:28,000 --> 00:43:32,480
which tells it which which port to run

00:43:31,280 --> 00:43:34,720
on

00:43:32,480 --> 00:43:36,160
uh i think i'm going to try 80 i don't

00:43:34,720 --> 00:43:40,079
know if it's going to work

00:43:36,160 --> 00:43:41,040
and then we need to point it to our last

00:43:40,079 --> 00:43:44,880
object

00:43:41,040 --> 00:43:48,560
so the the syntax is the file name

00:43:44,880 --> 00:43:50,000
hold on the object name so here our file

00:43:48,560 --> 00:43:53,359
name is main

00:43:50,000 --> 00:43:56,720
and our object name name is f

00:43:53,359 --> 00:43:59,760
oh no is this g

00:43:56,720 --> 00:44:02,400
unicorn okay okay i know why this is

00:43:59,760 --> 00:44:05,200
happening okay so what you need

00:44:02,400 --> 00:44:05,839
uh so what g unicorn needs is a virtual

00:44:05,200 --> 00:44:08,000
environment

00:44:05,839 --> 00:44:09,359
so virtual environment is basically

00:44:08,000 --> 00:44:12,640
something to

00:44:09,359 --> 00:44:15,280
isolate your instance or your

00:44:12,640 --> 00:44:17,280
code from the rest of the server so what

00:44:15,280 --> 00:44:20,560
you should do is sudo apt install

00:44:17,280 --> 00:44:24,079
python 3 dash virtual environment

00:44:20,560 --> 00:44:26,000
or van and then you can create a virtual

00:44:24,079 --> 00:44:29,680
environment by running

00:44:26,000 --> 00:44:31,920
python 3 m event

00:44:29,680 --> 00:44:34,720
and then your environment name which i

00:44:31,920 --> 00:44:34,720
just called enb

00:44:35,359 --> 00:44:39,119
and then you can activate your

00:44:37,839 --> 00:44:42,160
environment

00:44:39,119 --> 00:44:46,079
by running source and

00:44:42,160 --> 00:44:47,599
pin activate yeah so once you're inside

00:44:46,079 --> 00:44:48,640
your virtual environment you should see

00:44:47,599 --> 00:44:53,760
this

00:44:48,640 --> 00:44:53,760
env in brackets before your batch prompt

00:44:54,400 --> 00:44:57,760
so that way you know you're inside your

00:44:56,240 --> 00:45:01,760
virtual environment

00:44:57,760 --> 00:45:06,480
so you need to install

00:45:01,760 --> 00:45:06,480
flask again and unicorn

00:45:18,240 --> 00:45:20,720
okay okay

00:45:21,760 --> 00:45:28,960
so you can g unicorn run this

00:45:26,319 --> 00:45:28,960
we trying

00:45:30,079 --> 00:45:34,480
can't connect to it okay

00:45:38,160 --> 00:45:45,440
yeah basically you you bind it to a port

00:45:42,079 --> 00:45:46,000
and i mean usually if you go to your

00:45:45,440 --> 00:45:48,880
external

00:45:46,000 --> 00:45:49,920
ip at like port 5000 you you should be

00:45:48,880 --> 00:45:56,640
able to see it

00:45:49,920 --> 00:45:56,640
but does it matter if the case

00:45:59,119 --> 00:46:07,359
no it is matter oh you mean when you

00:46:03,200 --> 00:46:07,359
you when you're 15.

00:46:10,000 --> 00:46:14,720
yeah i think python 2 is like no longer

00:46:12,839 --> 00:46:16,640
supported

00:46:14,720 --> 00:46:19,359
yeah i think there is a difference

00:46:16,640 --> 00:46:22,960
between lowercase

00:46:19,359 --> 00:46:22,960
yeah i think it's kind of though

00:46:23,440 --> 00:46:29,839
i used this procedure

00:46:30,720 --> 00:46:43,839
i think when you use it in the file

00:46:34,480 --> 00:46:43,839
then you use

00:46:45,119 --> 00:46:51,920
yeah so i mean for some reason

00:46:48,960 --> 00:46:52,319
this doesn't work but uh yeah if you go

00:46:51,920 --> 00:46:54,800
to

00:46:52,319 --> 00:46:56,000
that ip address then you should be able

00:46:54,800 --> 00:46:59,119
to see it on any

00:46:56,000 --> 00:47:02,079
other network but yeah

00:46:59,119 --> 00:47:03,440
i'm thinking about that so uh running

00:47:02,079 --> 00:47:06,960
this is fine

00:47:03,440 --> 00:47:10,079
but the issue is running it like this is

00:47:06,960 --> 00:47:11,280
um if i close this prompt like if i if i

00:47:10,079 --> 00:47:13,760
terminate my ssh

00:47:11,280 --> 00:47:14,480
session then the server will stop

00:47:13,760 --> 00:47:17,680
running

00:47:14,480 --> 00:47:18,640
or even if i decide to keep this prompt

00:47:17,680 --> 00:47:22,400
open

00:47:18,640 --> 00:47:23,920
for for 24 7 it's still not good enough

00:47:22,400 --> 00:47:26,480
because

00:47:23,920 --> 00:47:28,960
sometimes gcp or aws will randomly

00:47:26,480 --> 00:47:32,079
decide to just restart your machine

00:47:28,960 --> 00:47:34,480
then then you have to do this again

00:47:32,079 --> 00:47:35,680
so an easy way to fix that is using

00:47:34,480 --> 00:47:39,280
systemd

00:47:35,680 --> 00:47:42,960
so i don't know if you if you know about

00:47:39,280 --> 00:47:44,559
systemd but it is basically

00:47:42,960 --> 00:47:46,160
something that runs every time at

00:47:44,559 --> 00:47:49,280
startup so you know

00:47:46,160 --> 00:47:50,880
when you boot nuts khanna loads in then

00:47:49,280 --> 00:47:53,280
the first thing that the linux kernel

00:47:50,880 --> 00:47:55,440
boots is systemd

00:47:53,280 --> 00:47:57,440
it basically just initializes everything

00:47:55,440 --> 00:48:00,160
else apart from the kernel

00:47:57,440 --> 00:48:02,240
so yeah if you if you check pid one it's

00:48:00,160 --> 00:48:07,839
probably gonna be system d

00:48:02,240 --> 00:48:07,839
so yeah you can use systemd to

00:48:15,760 --> 00:48:20,480
yeah i don't know there's a few

00:48:17,440 --> 00:48:24,000
alternatives like run it or

00:48:20,480 --> 00:48:26,160
something like that x x run it

00:48:24,000 --> 00:48:28,559
yeah but yeah most most digitals

00:48:26,160 --> 00:48:30,559
nowadays use system d so

00:48:28,559 --> 00:48:31,920
that's the standard so i think we can

00:48:30,559 --> 00:48:35,520
use systemd

00:48:31,920 --> 00:48:38,880
so what you can do is create services

00:48:35,520 --> 00:48:42,240
so system d services so

00:48:38,880 --> 00:48:44,880
uh i think that is

00:48:42,240 --> 00:48:46,400
quite simple so what you can do is sudo

00:48:44,880 --> 00:48:50,400
touch

00:48:46,400 --> 00:48:53,920
slash etc systemd

00:48:50,400 --> 00:48:55,920
system and then here you can create your

00:48:53,920 --> 00:48:57,760
service name you can call it anything

00:48:55,920 --> 00:48:59,440
but i'm going to call it plus

00:48:57,760 --> 00:49:02,559
and then it should end with a dot

00:48:59,440 --> 00:49:06,960
service fast service

00:49:02,559 --> 00:49:06,960
yeah then you can just edit it

00:49:07,000 --> 00:49:17,839
systemd system

00:49:10,160 --> 00:49:17,839
flux oh yeah

00:49:28,000 --> 00:49:32,480
i mean this is classic that w like this

00:49:30,400 --> 00:49:32,480
is

00:49:33,119 --> 00:49:39,440
already running i think

00:49:36,400 --> 00:49:40,800
like they've been using system d since

00:49:39,440 --> 00:49:42,960
like that the n7 or

00:49:40,800 --> 00:49:44,480
i'm not sure like as long as i've been

00:49:42,960 --> 00:49:46,800
using they've been they've been using

00:49:44,480 --> 00:49:46,800
systems

00:49:49,040 --> 00:49:59,839
yeah i mean but yeah

00:50:10,000 --> 00:50:17,440
i think like uh like 99

00:50:14,160 --> 00:50:19,680
of the distros run system d now but

00:50:17,440 --> 00:50:20,480
like the distros that don't use it their

00:50:19,680 --> 00:50:22,000
main like

00:50:20,480 --> 00:50:23,920
selling point is that they don't use

00:50:22,000 --> 00:50:25,599
system because like

00:50:23,920 --> 00:50:27,440
in the linux community there's a lot of

00:50:25,599 --> 00:50:28,800
people who don't like systemd because

00:50:27,440 --> 00:50:31,040
it's very

00:50:28,800 --> 00:50:32,640
slow basically yeah so there's like

00:50:31,040 --> 00:50:35,839
alternatives like

00:50:32,640 --> 00:50:39,280
i think it's called like run it

00:50:35,839 --> 00:50:42,240
yeah run it so like some

00:50:39,280 --> 00:50:42,960
use run it as a feature of the distro

00:50:42,240 --> 00:50:46,160
because

00:50:42,960 --> 00:50:49,200
it's supposedly a lot faster

00:50:46,160 --> 00:50:52,559
i've never used it so i don't know

00:50:49,200 --> 00:50:52,960
yeah but systemd is what most people use

00:50:52,559 --> 00:50:56,000
so

00:50:52,960 --> 00:50:56,960
yeah it's instantly is the default on

00:50:56,000 --> 00:51:00,000
bsd also

00:50:56,960 --> 00:51:03,040
so i guess it's good enough i guess if

00:51:00,000 --> 00:51:06,160
it's good enough for ps students

00:51:03,040 --> 00:51:09,440
good enough for everyone

00:51:06,160 --> 00:51:12,559
yeah so uh systemd

00:51:09,440 --> 00:51:16,160
it has its own unique configuration type

00:51:12,559 --> 00:51:18,640
so um first thing we want to describe is

00:51:16,160 --> 00:51:18,640
a unit

00:51:19,119 --> 00:51:25,760
this is a unit so this is just

00:51:22,480 --> 00:51:27,680
you know metadata about our service so

00:51:25,760 --> 00:51:29,520
we just want to put in like a

00:51:27,680 --> 00:51:32,160
description maybe

00:51:29,520 --> 00:51:33,920
or just just call it our unicorn

00:51:32,160 --> 00:51:36,559
instance

00:51:33,920 --> 00:51:38,079
and what we need is an another thing

00:51:36,559 --> 00:51:41,599
called after

00:51:38,079 --> 00:51:43,839
so for after is basically it is

00:51:41,599 --> 00:51:45,200
when the system starts up there's many

00:51:43,839 --> 00:51:47,760
checkpoints

00:51:45,200 --> 00:51:48,480
so what we want is basically our app to

00:51:47,760 --> 00:51:51,599
run

00:51:48,480 --> 00:51:53,920
after the network is available

00:51:51,599 --> 00:51:55,280
so that the tag for that is network dot

00:51:53,920 --> 00:51:58,720
after

00:51:55,280 --> 00:51:59,920
so network.target so what this says is

00:51:58,720 --> 00:52:02,319
basically

00:51:59,920 --> 00:52:05,280
only run the service once the network is

00:52:02,319 --> 00:52:07,599
active and running

00:52:05,280 --> 00:52:09,760
yeah so the next part is the main stuff

00:52:07,599 --> 00:52:13,200
which is service

00:52:09,760 --> 00:52:16,839
um here we will define

00:52:13,200 --> 00:52:18,000
what user we run yes the group we

00:52:16,839 --> 00:52:21,280
runners

00:52:18,000 --> 00:52:21,280
the working directory

00:52:25,040 --> 00:52:35,280
then the environment and

00:52:32,319 --> 00:52:35,280
an exact start

00:52:35,839 --> 00:52:41,440
yeah so for the user what you

00:52:39,280 --> 00:52:43,200
what i would suggest doing is just run

00:52:41,440 --> 00:52:46,040
as your own user

00:52:43,200 --> 00:52:47,760
and for the group you probably want

00:52:46,040 --> 00:52:51,040
www.theta

00:52:47,760 --> 00:52:53,040
so this group is it's a default group

00:52:51,040 --> 00:52:54,720
available in

00:52:53,040 --> 00:52:56,880
most of the mainline destroyers it's

00:52:54,720 --> 00:53:00,400
basically a group with you

00:52:56,880 --> 00:53:01,200
and your web server so in this case it

00:53:00,400 --> 00:53:06,000
will be

00:53:01,200 --> 00:53:06,000
my user and nginx yeah

00:53:06,079 --> 00:53:14,480
this is a security feature basically so

00:53:10,319 --> 00:53:17,760
if someone somehow gets access to our vm

00:53:14,480 --> 00:53:20,960
then if the group is just www dash data

00:53:17,760 --> 00:53:23,359
then they will only have access to our

00:53:20,960 --> 00:53:24,079
our web files rather than the whole

00:53:23,359 --> 00:53:26,400
machine

00:53:24,079 --> 00:53:30,000
i mean if they have access to web files

00:53:26,400 --> 00:53:31,920
as fast but not as bad as getting

00:53:30,000 --> 00:53:33,119
getting hold of the whole machine but

00:53:31,920 --> 00:53:36,800
yeah

00:53:33,119 --> 00:53:39,359
www dash data working directory is

00:53:36,800 --> 00:53:39,359
basically

00:53:39,440 --> 00:53:44,720
like where your cd into to run the rest

00:53:43,119 --> 00:53:48,240
of the stuff so

00:53:44,720 --> 00:53:52,880
for me it was home

00:53:48,240 --> 00:53:56,319
home sshm chk slash

00:53:52,880 --> 00:53:58,400
files i believe yeah

00:53:56,319 --> 00:54:00,160
uh okay the reason why you wanna you

00:53:58,400 --> 00:54:02,880
want to

00:54:00,160 --> 00:54:05,119
specify the user is because um systemd

00:54:02,880 --> 00:54:08,480
by default runs as rule

00:54:05,119 --> 00:54:10,720
so yeah i mean it comes like the same

00:54:08,480 --> 00:54:13,359
thing if someone gets access to your

00:54:10,720 --> 00:54:14,880
your web server if you give them good

00:54:13,359 --> 00:54:16,240
access they basically

00:54:14,880 --> 00:54:19,040
can do anything they want with your

00:54:16,240 --> 00:54:24,240
server so this is like soft like

00:54:19,040 --> 00:54:26,240
fencing and stuff for a hacker

00:54:24,240 --> 00:54:28,240
just want to delay them as long as

00:54:26,240 --> 00:54:32,640
possible

00:54:28,240 --> 00:54:34,480
right so the next thing is environment

00:54:32,640 --> 00:54:36,960
this one comes in quotes and you just

00:54:34,480 --> 00:54:40,160
want to specify a path

00:54:36,960 --> 00:54:43,680
so our part will be

00:54:40,160 --> 00:54:47,520
uh the environment directory so

00:54:43,680 --> 00:54:50,720
home sshm chk

00:54:47,520 --> 00:54:54,559
files and bin

00:54:50,720 --> 00:54:57,920
yeah so um the environment

00:54:54,559 --> 00:54:59,119
variable has it's basically this bin

00:54:57,920 --> 00:55:01,040
folder

00:54:59,119 --> 00:55:03,119
and the bin folder has like activated

00:55:01,040 --> 00:55:05,040
and a few other batch files

00:55:03,119 --> 00:55:06,880
they can just use to like activate the

00:55:05,040 --> 00:55:10,960
environment

00:55:06,880 --> 00:55:13,839
well yeah then the last one is the

00:55:10,960 --> 00:55:14,400
is the most most important one exact

00:55:13,839 --> 00:55:18,319
star

00:55:14,400 --> 00:55:22,480
it is is basically the command that

00:55:18,319 --> 00:55:26,960
is used to start up g unicorn so

00:55:22,480 --> 00:55:34,319
what you do is go sshm chk

00:55:26,960 --> 00:55:37,760
files and bin g unicorn

00:55:34,319 --> 00:55:39,520
and then basically we have the

00:55:37,760 --> 00:55:40,880
we will use the same command that we

00:55:39,520 --> 00:55:44,839
used earlier so

00:55:40,880 --> 00:55:47,760
if you remember it was dash dash vine

00:55:44,839 --> 00:55:50,799
0.0.0.0

00:55:47,760 --> 00:55:54,079
i mean yeah this should work

00:55:50,799 --> 00:55:55,440
so it's essentially doing the same thing

00:55:54,079 --> 00:55:58,559
we did on the terminal

00:55:55,440 --> 00:56:01,599
but as a service file

00:55:58,559 --> 00:56:06,079
and yeah and

00:56:01,599 --> 00:56:06,079
last thing we want is install

00:56:06,240 --> 00:56:13,680
and just wanted by equals

00:56:10,680 --> 00:56:13,680
multi-user.target

00:56:14,839 --> 00:56:19,119
yeah uh i won't go into too much detail

00:56:18,319 --> 00:56:22,240
about what uh

00:56:19,119 --> 00:56:24,480
wanted by this but it's basically

00:56:22,240 --> 00:56:24,480
um

00:56:25,520 --> 00:56:30,240
but what happens is there's like

00:56:28,079 --> 00:56:33,520
multiple run levels for system d

00:56:30,240 --> 00:56:35,599
so around level zero is like when the

00:56:33,520 --> 00:56:36,319
corner has just fought system d then run

00:56:35,599 --> 00:56:39,920
number one

00:56:36,319 --> 00:56:42,400
is not i don't remember but run level

00:56:39,920 --> 00:56:45,040
one is

00:56:42,400 --> 00:56:47,119
uh it's a rescue shell so like when you

00:56:45,040 --> 00:56:49,839
call a drug or something like that

00:56:47,119 --> 00:56:50,480
then two three four is all multi-user

00:56:49,839 --> 00:56:53,440
target

00:56:50,480 --> 00:56:54,240
so it's basically a non non-graphical

00:56:53,440 --> 00:56:57,839
shell

00:56:54,240 --> 00:57:00,559
and five is a graphical shell so

00:56:57,839 --> 00:57:01,920
if you use like gnome shell or console

00:57:00,559 --> 00:57:03,680
that is

00:57:01,920 --> 00:57:06,559
that is number five run level five and

00:57:03,680 --> 00:57:09,280
number six is reboot and shutdown

00:57:06,559 --> 00:57:12,079
so by saying is wanted by multi-user

00:57:09,280 --> 00:57:14,960
target is basically saying

00:57:12,079 --> 00:57:16,880
run this when you have actions available

00:57:14,960 --> 00:57:20,880
which is basically

00:57:16,880 --> 00:57:23,280
so to run this service there's two

00:57:20,880 --> 00:57:24,480
two things you need the first one is an

00:57:23,280 --> 00:57:28,160
active network

00:57:24,480 --> 00:57:28,559
so that is that is specified by line

00:57:28,160 --> 00:57:31,440
three

00:57:28,559 --> 00:57:32,240
and you must have a shell active which

00:57:31,440 --> 00:57:35,200
is

00:57:32,240 --> 00:57:36,400
determined by the last line if these two

00:57:35,200 --> 00:57:40,160
conditions are

00:57:36,400 --> 00:57:42,400
met then the the function google start

00:57:40,160 --> 00:57:42,400
running

00:57:48,400 --> 00:57:56,799
yeah uh so we actually gonna use

00:57:51,839 --> 00:57:56,799
something else thanks

00:58:01,680 --> 00:58:07,200
yeah so what we're going to change here

00:58:04,240 --> 00:58:11,040
is instead of bind

00:58:07,200 --> 00:58:13,280
we're gonna use a unique socket

00:58:11,040 --> 00:58:13,280
so

00:58:15,440 --> 00:58:20,079
okay um if you don't know what the

00:58:17,440 --> 00:58:23,599
unique socket is

00:58:20,079 --> 00:58:25,520
you can see the main file so creates an

00:58:23,599 --> 00:58:29,040
end point for communication

00:58:25,520 --> 00:58:33,359
so it is basically um

00:58:29,040 --> 00:58:35,280
a way for two processors in the same

00:58:33,359 --> 00:58:36,480
same machine to communicate with each

00:58:35,280 --> 00:58:39,119
other

00:58:36,480 --> 00:58:40,559
so using sockets creates less overhead

00:58:39,119 --> 00:58:43,920
than

00:58:40,559 --> 00:58:47,920
than a different sort of port

00:58:43,920 --> 00:58:51,839
so if you see the port port uses aside

00:58:47,920 --> 00:58:51,839
so it uses ip4

00:59:03,520 --> 00:59:08,400
yeah so we're going to use sockets

00:59:06,960 --> 00:59:10,880
because

00:59:08,400 --> 00:59:12,319
the only thing this unique instance is

00:59:10,880 --> 00:59:14,720
going to be talking to is

00:59:12,319 --> 00:59:16,960
the engineering server which is running

00:59:14,720 --> 00:59:20,079
on the same

00:59:16,960 --> 00:59:21,920
on the same machine so yeah we can just

00:59:20,079 --> 00:59:25,920
use local communication

00:59:21,920 --> 00:59:29,599
which is gonna be a lot less overhead so

00:59:25,920 --> 00:59:33,760
uh to use that what we're gonna do

00:59:29,599 --> 00:59:35,359
is we're gonna bind

00:59:33,760 --> 00:59:37,440
instead of binding to our port we're

00:59:35,359 --> 00:59:40,960
gonna bind to unique socket

00:59:37,440 --> 00:59:43,280
so for that we can just call unix colon

00:59:40,960 --> 00:59:46,240
and then name our socket so i'm just

00:59:43,280 --> 00:59:46,240
gonna call it flask

00:59:47,119 --> 00:59:54,240
yeah a few other things you can do is

00:59:51,119 --> 00:59:58,400
the workers parameter

00:59:54,240 --> 01:00:00,559
so what this will do is

00:59:58,400 --> 01:00:02,000
create three workers so if you go back

01:00:00,559 --> 01:00:03,599
to our slide here

01:00:02,000 --> 01:00:05,920
you can see that there's three workers

01:00:03,599 --> 01:00:09,680
here so

01:00:05,920 --> 01:00:10,799
say one of these if one of these workers

01:00:09,680 --> 01:00:13,040
is like very

01:00:10,799 --> 01:00:14,000
busy then the load balancer can

01:00:13,040 --> 01:00:18,480
automatically route

01:00:14,000 --> 01:00:21,920
it to number two or number three yeah

01:00:18,480 --> 01:00:24,160
so that's what workers three is for and

01:00:21,920 --> 01:00:27,280
another security feature we can do is

01:00:24,160 --> 01:00:31,440
dash m007

01:00:27,280 --> 01:00:34,480
so if you are familiar with how to use

01:00:31,440 --> 01:00:37,760
phone is basically telling us

01:00:34,480 --> 01:00:38,400
that no access to user no access to

01:00:37,760 --> 01:00:42,960
group

01:00:38,400 --> 01:00:45,119
and access to everyone else so

01:00:42,960 --> 01:00:47,200
what this does is you know i'll get back

01:00:45,119 --> 01:00:50,480
to the hectare scenario

01:00:47,200 --> 01:00:53,920
uh if they have access to

01:00:50,480 --> 01:00:55,280
to your user then they can see the files

01:00:53,920 --> 01:00:56,559
they can

01:00:55,280 --> 01:00:58,079
read the files but they can't do

01:00:56,559 --> 01:00:59,680
anything because they can't write they

01:00:58,079 --> 01:01:01,520
can't execute

01:00:59,680 --> 01:01:02,799
but the reason why we allow everyone

01:01:01,520 --> 01:01:05,920
else is

01:01:02,799 --> 01:01:09,040
for recovery so you know say

01:01:05,920 --> 01:01:11,280
say like you want to like recover the

01:01:09,040 --> 01:01:13,040
machine that the hacker has access to

01:01:11,280 --> 01:01:14,640
so then you can just create a new user

01:01:13,040 --> 01:01:17,040
then use that to

01:01:14,640 --> 01:01:19,280
delete the whole user and essentially

01:01:17,040 --> 01:01:21,599
recover the machine

01:01:19,280 --> 01:01:23,280
and it's faster that way because the

01:01:21,599 --> 01:01:26,079
only other option if we don't do

01:01:23,280 --> 01:01:28,400
this is to delete the entire machine and

01:01:26,079 --> 01:01:31,440
create it from scratch again which is

01:01:28,400 --> 01:01:31,440
quite time consuming

01:01:35,359 --> 01:01:44,400
oh no it's it's it's a access mask

01:01:40,240 --> 01:01:44,400
yeah yeah the same thing using control

01:01:44,480 --> 01:01:52,720
yeah so uh

01:01:47,680 --> 01:01:52,720
okay i don't know what it's called

01:01:54,640 --> 01:02:01,680
you know right shown new numbers

01:01:59,039 --> 01:02:02,400
yeah yeah yeah so execute is four then

01:02:01,680 --> 01:02:06,799
read is

01:02:02,400 --> 01:02:06,799
two no right is two and seven

01:02:07,280 --> 01:02:11,359
yeah yeah yeah yeah so the first one is

01:02:09,839 --> 01:02:13,920
user the second one is group and the

01:02:11,359 --> 01:02:16,240
third one is everyone else

01:02:13,920 --> 01:02:18,079
yeah so what we're doing is no access to

01:02:16,240 --> 01:02:21,839
the user no access to the group but

01:02:18,079 --> 01:02:21,839
access to everyone else

01:02:22,400 --> 01:02:26,880
no everyone else gets access basically

01:02:27,680 --> 01:02:31,599
so what happens is if the hacker has

01:02:29,920 --> 01:02:34,079
access to this

01:02:31,599 --> 01:02:34,880
this server they will only have access

01:02:34,079 --> 01:02:37,920
to

01:02:34,880 --> 01:02:41,039
this group on this line and

01:02:37,920 --> 01:02:44,240
this user on this line but since

01:02:41,039 --> 01:02:45,839
uh the way we have run this file is

01:02:44,240 --> 01:02:47,520
these two don't have access so

01:02:45,839 --> 01:02:48,400
essentially if the hacker enters the

01:02:47,520 --> 01:02:51,760
service

01:02:48,400 --> 01:02:54,000
he has access to nothing so it's kind of

01:02:51,760 --> 01:02:58,400
a lockout

01:02:54,000 --> 01:03:00,839
if that makes sense yeah

01:02:58,400 --> 01:03:02,480
it's basically a security feature oh

01:03:00,839 --> 01:03:07,039
yeah

01:03:02,480 --> 01:03:10,799
so once we have that we can

01:03:07,039 --> 01:03:13,920
sudo system ctl

01:03:10,799 --> 01:03:17,839
start flask

01:03:13,920 --> 01:03:17,839
and then we can check the status

01:03:19,359 --> 01:03:26,960
and yeah there we go we have our

01:03:22,480 --> 01:03:31,839
g unicorn whatever is running here pid

01:03:26,960 --> 01:03:31,839
these three pids

01:03:42,839 --> 01:03:45,839
oh

01:03:55,119 --> 01:03:59,839
so yeah maybe you've been using systemvp

01:04:14,079 --> 01:04:20,079
so what you can also do is system ctl

01:04:17,599 --> 01:04:20,079
enable

01:04:21,520 --> 01:04:27,680
yeah so enable will just

01:04:25,039 --> 01:04:29,680
you know allow me to run financial

01:04:27,680 --> 01:04:33,119
system

01:04:29,680 --> 01:04:35,839
yeah yeah

01:04:33,119 --> 01:04:35,839
that is

01:04:38,000 --> 01:04:43,680
there is whgi servers so

01:04:41,280 --> 01:04:44,880
at this point we have a wsgs server

01:04:43,680 --> 01:04:47,760
running

01:04:44,880 --> 01:04:48,559
in our unique socket so what we need is

01:04:47,760 --> 01:04:53,680
nginx

01:04:48,559 --> 01:04:55,280
which will expose the web app to

01:04:53,680 --> 01:04:57,760
to the rest of the world basically

01:04:55,280 --> 01:05:01,839
because right now

01:04:57,760 --> 01:05:03,760
if you if you go in to the external ip

01:05:01,839 --> 01:05:05,359
since the socket is constrained to the

01:05:03,760 --> 01:05:06,960
local machine

01:05:05,359 --> 01:05:09,200
you won't be able to access it so we

01:05:06,960 --> 01:05:12,880
need nginx to access it

01:05:09,200 --> 01:05:16,559
from outside to the outside world

01:05:12,880 --> 01:05:20,799
so first thing you need is sudo apt

01:05:16,559 --> 01:05:20,799
install nginx but

01:05:20,880 --> 01:05:23,839
it's straightforward

01:05:28,799 --> 01:05:31,039
yep

01:05:32,799 --> 01:05:40,960
okay so once you have installed nginx

01:05:36,880 --> 01:05:43,440
the configuration is somewhat similar to

01:05:40,960 --> 01:05:44,799
systemd so what you do first is you

01:05:43,440 --> 01:05:48,640
touch

01:05:44,799 --> 01:05:52,319
create a file and slash etc nginx

01:05:48,640 --> 01:05:55,359
sites available and here you create

01:05:52,319 --> 01:05:56,799
create a file so for consistency sake

01:05:55,359 --> 01:06:01,039
i'm gonna use the same

01:05:56,799 --> 01:06:04,799
name so flask and

01:06:01,039 --> 01:06:07,119
then one of i'm them going to edit that

01:06:04,799 --> 01:06:07,119
file

01:06:09,680 --> 01:06:12,559
yeah so um

01:06:12,880 --> 01:06:20,000
so the nginx configuration is

01:06:17,520 --> 01:06:22,319
it's something similar to json it's

01:06:20,000 --> 01:06:26,559
quite different from apache we use that

01:06:22,319 --> 01:06:30,480
but i i i prefer nginx a lot more

01:06:26,559 --> 01:06:31,280
so what you have basically is a server

01:06:30,480 --> 01:06:35,200
block

01:06:31,280 --> 01:06:38,960
so this is like one server configuration

01:06:35,200 --> 01:06:42,480
so you have a server then what you have

01:06:38,960 --> 01:06:47,520
is the next thing you need is a listen

01:06:42,480 --> 01:06:50,799
listen 80 so what this tells nginx is

01:06:47,520 --> 01:06:54,000
to listen to port 80 and

01:06:50,799 --> 01:07:00,160
next thing is server name so here you

01:06:54,000 --> 01:07:04,720
should put your external ip

01:07:00,160 --> 01:07:04,720
uh with no none of this

01:07:06,000 --> 01:07:09,440
yeah so what these two lines basically

01:07:07,839 --> 01:07:12,640
says that um

01:07:09,440 --> 01:07:17,599
when you get a request from that id and

01:07:12,640 --> 01:07:19,839
it's from port 80 then run this specific

01:07:17,599 --> 01:07:23,520
lines which i'm going to show next so

01:07:19,839 --> 01:07:23,520
next what you should what you need is

01:07:26,839 --> 01:07:31,359
location

01:07:28,400 --> 01:07:31,359
yeah so um

01:07:31,599 --> 01:07:35,920
this is where we're gonna tell nginx

01:07:34,400 --> 01:07:37,440
what to run when the first two

01:07:35,920 --> 01:07:43,839
conditions are met

01:07:37,440 --> 01:07:43,839
so we just need to run

01:07:52,000 --> 01:07:57,839
the domain

01:08:07,039 --> 01:08:11,839
the server is gonna run on

01:08:32,400 --> 01:08:39,839
yeah this yeah but there is your own

01:08:35,839 --> 01:08:39,839
network but this is gcp's

01:08:42,239 --> 01:08:47,839
yeah yeah yeah you can you can you can

01:08:45,759 --> 01:08:49,839
but this is like just a very convenient

01:08:47,839 --> 01:08:50,560
way to find it without having to run any

01:08:49,839 --> 01:08:53,839
commands

01:08:50,560 --> 01:08:53,839
this one

01:08:56,400 --> 01:09:00,400
yeah true i mean you don't need to know

01:08:58,080 --> 01:09:00,400
also

01:09:01,440 --> 01:09:09,279
yeah okay so uh

01:09:06,640 --> 01:09:11,759
yeah here we're just gonna include this

01:09:09,279 --> 01:09:14,799
thing called proxy params

01:09:11,759 --> 01:09:17,120
proxy params so like if you use c

01:09:14,799 --> 01:09:18,799
then i don't know it might be intuitive

01:09:17,120 --> 01:09:19,679
it's basically something like a tender

01:09:18,799 --> 01:09:21,440
file

01:09:19,679 --> 01:09:24,799
then you can like use a function that

01:09:21,440 --> 01:09:24,799
comes with it so the phone

01:09:25,440 --> 01:09:27,839
excuse me

01:09:30,000 --> 01:09:35,839
yeah parents like parameters

01:09:37,600 --> 01:09:40,960
is one of the functions so here we're

01:09:40,480 --> 01:09:44,000
gonna

01:09:40,960 --> 01:09:46,640
link our our unix socket

01:09:44,000 --> 01:09:48,480
so all right this this url is a bit

01:09:46,640 --> 01:09:51,839
confusing but it is

01:09:48,480 --> 01:09:55,679
http follow on slash slash

01:09:51,839 --> 01:09:55,679
unix colon

01:09:56,560 --> 01:10:02,800
yeah so it's proper then

01:10:00,320 --> 01:10:02,800
yeah so

01:10:03,679 --> 01:10:10,640
it's it's it it sort of makes sense

01:10:06,880 --> 01:10:12,719
because http is you know like you're

01:10:10,640 --> 01:10:15,280
running a web server so it's http but

01:10:12,719 --> 01:10:18,159
then it's a unique socket so that is the

01:10:15,280 --> 01:10:19,199
domain then the port is your unique

01:10:18,159 --> 01:10:23,040
socket name so

01:10:19,199 --> 01:10:26,880
it's gonna be slash home chk slash

01:10:23,040 --> 01:10:26,880
files slash flash cloud so

01:10:27,440 --> 01:10:32,480
and yeah so

01:10:32,560 --> 01:10:36,159
i don't know the first time i noticed it

01:10:34,000 --> 01:10:38,080
was quite confusing but

01:10:36,159 --> 01:10:39,199
i mean if you see it it is still a

01:10:38,080 --> 01:10:42,960
standard url

01:10:39,199 --> 01:10:45,199
it has it has a protocol it has the

01:10:42,960 --> 01:10:46,800
it has a domain name which is unix and

01:10:45,199 --> 01:10:49,840
then it has the port which is this

01:10:46,800 --> 01:10:55,040
this is the plus socket

01:10:49,840 --> 01:10:59,840
but yeah this is the nginx configuration

01:10:55,040 --> 01:10:59,840
uh yeah

01:11:00,080 --> 01:11:07,040
i think that there should be

01:11:03,920 --> 01:11:10,159
um this part the path here is the same

01:11:07,040 --> 01:11:10,159
as your working directory

01:11:11,360 --> 01:11:17,520
uh the slash homes like all that is the

01:11:14,239 --> 01:11:17,520
same as your working directory

01:11:23,840 --> 01:11:27,440
not not the watcher environment is if

01:11:26,080 --> 01:11:31,600
you go back

01:11:27,440 --> 01:11:31,600
if you go back to the system the config

01:11:33,040 --> 01:11:36,320
oh yeah you can see a working directory

01:11:34,880 --> 01:11:39,440
here it's the same

01:11:36,320 --> 01:11:39,440
same directory as that

01:11:44,880 --> 01:11:49,520
yeah so it creates the equation in the

01:11:47,280 --> 01:11:52,560
working directory

01:11:49,520 --> 01:11:54,880
yeah uh yeah

01:11:52,560 --> 01:11:56,960
this is this is fine for now but a

01:11:54,880 --> 01:12:00,239
common thing that people do is

01:11:56,960 --> 01:12:03,600
uh they will create a new they'll

01:12:00,239 --> 01:12:06,239
usually create a unique socket in cam

01:12:03,600 --> 01:12:08,719
so that you know once it reboots then

01:12:06,239 --> 01:12:11,840
the socket is empty basically but

01:12:08,719 --> 01:12:14,640
this is this is fine also because

01:12:11,840 --> 01:12:17,600
there is more for like a if you want to

01:12:14,640 --> 01:12:21,040
be crazy about it something

01:12:17,600 --> 01:12:23,840
yeah uh yeah this should work

01:12:21,040 --> 01:12:23,840
so

01:12:33,360 --> 01:12:40,719
alright so if you go to slash etc

01:12:37,040 --> 01:12:43,920
nginx here you can see

01:12:40,719 --> 01:12:45,280
two two folders here uh one's called

01:12:43,920 --> 01:12:48,480
sites available and

01:12:45,280 --> 01:12:50,080
second one is called size enabled so

01:12:48,480 --> 01:12:52,719
you can see we've created our

01:12:50,080 --> 01:12:56,320
configuration inside available

01:12:52,719 --> 01:12:59,280
but in order to

01:12:56,320 --> 01:13:00,880
for nginx to start using it we need to

01:12:59,280 --> 01:13:05,840
use size enable

01:13:00,880 --> 01:13:08,640
so instead of like copy pasting

01:13:05,840 --> 01:13:10,880
the the file over the easiest way to do

01:13:08,640 --> 01:13:15,600
it would be creating a soft link

01:13:10,880 --> 01:13:20,080
so ln dash s then you go to slide

01:13:15,600 --> 01:13:23,440
etc nginx sites available flask

01:13:20,080 --> 01:13:27,440
and you want to link it to

01:13:23,440 --> 01:13:33,199
sites enables yeah

01:13:27,440 --> 01:13:37,760
and run it as sudo

01:13:33,199 --> 01:13:40,400
yeah so now if you go to sites

01:13:37,760 --> 01:13:40,400
enable

01:13:40,960 --> 01:13:45,040
you should be able to see our plus

01:13:45,520 --> 01:13:50,880
plus config yeah uh then

01:13:49,040 --> 01:13:52,239
what you can do is check for errors so

01:13:50,880 --> 01:13:55,440
sudo nginx

01:13:52,239 --> 01:13:58,880
t and configuration

01:13:55,440 --> 01:14:01,520
file syntax is okay and

01:13:58,880 --> 01:14:03,440
now all you need to do is restart nginx

01:14:01,520 --> 01:14:07,520
so sudo system

01:14:03,440 --> 01:14:11,360
cta restart nginx

01:14:07,520 --> 01:14:11,360
once you've done that you can check the

01:14:12,840 --> 01:14:20,480
status

01:14:15,600 --> 01:14:24,480
uh invalid argument

01:14:20,480 --> 01:14:24,480
okay i ran into this yesterday

01:14:26,840 --> 01:14:29,840
hmm

01:14:32,880 --> 01:14:36,480
it is a debian issue

01:14:40,840 --> 01:14:43,840
and

01:14:54,840 --> 01:14:57,840
hmm

01:15:23,199 --> 01:15:27,440
give me a minute let me fix this

01:15:30,480 --> 01:15:33,840
oh the restroom is that way

01:15:34,719 --> 01:15:39,840
oh i don't know that one is closer i

01:15:37,440 --> 01:15:39,840
think

01:16:04,840 --> 01:16:07,840
so

01:16:18,840 --> 01:16:21,840
so

01:17:42,840 --> 01:17:45,840
okay

01:18:10,840 --> 01:18:13,840
hmm

01:18:38,840 --> 01:18:41,840
so

01:19:20,840 --> 01:19:23,840
so

01:20:16,480 --> 01:20:19,840
okay nice

01:20:20,719 --> 01:20:33,840
what is running

01:21:26,880 --> 01:21:29,040
he

01:21:35,040 --> 01:21:39,360
seems to be a a bug with

01:21:40,840 --> 01:21:43,840
nginx

01:22:08,840 --> 01:22:11,840
so

01:23:04,840 --> 01:23:07,840
so

01:23:15,040 --> 01:23:21,920
okay nice so

01:23:18,320 --> 01:23:26,080
nginx is working now so

01:23:21,920 --> 01:23:30,960
if we go to our external ip

01:23:26,080 --> 01:23:30,960
we should be able to see our

01:23:32,840 --> 01:23:35,840
website

01:23:38,400 --> 01:23:46,480
there you go there's our website run

01:23:42,080 --> 01:23:49,360
on nginx on g unicorn

01:23:46,480 --> 01:23:51,600
it goes through nginx through ga con and

01:23:49,360 --> 01:23:52,960
finally to our class app so

01:23:51,600 --> 01:23:55,840
if you want to see if it's really

01:23:52,960 --> 01:24:00,400
running on nginx you can

01:23:55,840 --> 01:24:03,760
go to network here and restart

01:24:00,400 --> 01:24:07,679
and there you can see our

01:24:03,760 --> 01:24:11,199
our headers so if you can see here

01:24:07,679 --> 01:24:14,639
our server is nginx

01:24:11,199 --> 01:24:16,400
yeah that is how you get your web server

01:24:14,639 --> 01:24:20,000
running with nginx on

01:24:16,400 --> 01:24:21,440
on flask but uh yeah there's a there's a

01:24:20,000 --> 01:24:23,760
few issues so

01:24:21,440 --> 01:24:24,639
say you just deployed a new shiny new

01:24:23,760 --> 01:24:26,880
app

01:24:24,639 --> 01:24:30,719
online but it's still running on like

01:24:26,880 --> 01:24:34,560
this weird iphone as it is not really

01:24:30,719 --> 01:24:36,560
you know shareable so the

01:24:34,560 --> 01:24:37,920
what you want to do is you know connect

01:24:36,560 --> 01:24:40,560
it to your domain

01:24:37,920 --> 01:24:41,920
so some services make this really easy

01:24:40,560 --> 01:24:43,520
but

01:24:41,920 --> 01:24:45,280
if you're running it on a vm it's

01:24:43,520 --> 01:24:49,440
usually not that straightforward

01:24:45,280 --> 01:24:51,920
so what you want to do is

01:24:49,440 --> 01:24:53,280
say you have a vm if you have a domain i

01:24:51,920 --> 01:24:57,280
mean if you don't it's okay

01:24:53,280 --> 01:25:00,719
so i'm just gonna use

01:24:57,280 --> 01:25:00,719
this website here so

01:25:01,360 --> 01:25:07,760
uh yeah yeah so what you

01:25:04,719 --> 01:25:08,560
basically want to do is connect your

01:25:07,760 --> 01:25:11,040
domain

01:25:08,560 --> 01:25:13,040
so that's the next thing we're gonna

01:25:11,040 --> 01:25:16,320
cover is connecting your domain to

01:25:13,040 --> 01:25:18,960
your your vm so

01:25:16,320 --> 01:25:21,840
um what we're going to be doing is

01:25:18,960 --> 01:25:24,880
creating a dns

01:25:21,840 --> 01:25:26,320
sort of a dns record so if you don't

01:25:24,880 --> 01:25:30,159
know what a dns is

01:25:26,320 --> 01:25:33,520
is it's sort of like a phone book so

01:25:30,159 --> 01:25:36,000
um your browser goes to the dns server

01:25:33,520 --> 01:25:37,920
so let's say like google.com so what

01:25:36,000 --> 01:25:41,040
your web browser does is

01:25:37,920 --> 01:25:44,800
it goes to google.com which has its

01:25:41,040 --> 01:25:47,520
dns record then google.com

01:25:44,800 --> 01:25:48,400
will use the dns and come back to the

01:25:47,520 --> 01:25:51,040
web server

01:25:48,400 --> 01:25:52,239
come back to your web browser with an ip

01:25:51,040 --> 01:25:55,120
address

01:25:52,239 --> 01:25:56,719
you can see it's like this i can rest in

01:25:55,120 --> 01:26:00,560
the web browser then goes to the ip

01:25:56,719 --> 01:26:00,560
address to get the actual information

01:26:07,440 --> 01:26:12,159
yeah yeah yeah so um yeah so that's a

01:26:10,560 --> 01:26:15,920
name so about so

01:26:12,159 --> 01:26:19,520
what the dns does is it has its own

01:26:15,920 --> 01:26:21,120
so um all these all these uh domain

01:26:19,520 --> 01:26:23,040
providers they have their own name

01:26:21,120 --> 01:26:26,880
servers so as you can see here

01:26:23,040 --> 01:26:30,880
there's ns1 name.com.com so what happens

01:26:26,880 --> 01:26:33,120
is um okay this is a big detail but what

01:26:30,880 --> 01:26:34,719
happens is when you go to a dns

01:26:33,120 --> 01:26:37,040
a resolver the first thing that gets

01:26:34,719 --> 01:26:39,679
resolved is is the tlb

01:26:37,040 --> 01:26:41,600
so that's the top level domain which is

01:26:39,679 --> 01:26:43,440
uh dot live

01:26:41,600 --> 01:26:45,920
once you're inside not live then it will

01:26:43,440 --> 01:26:48,159
try to find for this one

01:26:45,920 --> 01:26:49,280
then once that comes that usually points

01:26:48,159 --> 01:26:51,679
to one of these

01:26:49,280 --> 01:26:54,000
four name servers then they will just

01:26:51,679 --> 01:26:57,280
point to your

01:26:54,000 --> 01:26:59,760
your ip address yeah so

01:26:57,280 --> 01:27:00,960
um what you want to do is manage dns

01:26:59,760 --> 01:27:04,239
records

01:27:00,960 --> 01:27:07,920
and doing this is quite very simple is

01:27:04,239 --> 01:27:11,040
you just paste your ip address here

01:27:07,920 --> 01:27:14,239
yeah and you just add record

01:27:11,040 --> 01:27:16,960
and that's literally just like is that

01:27:14,239 --> 01:27:16,960
simple really

01:27:17,199 --> 01:27:20,880
just to go into a few more details

01:27:18,880 --> 01:27:24,880
there's a few dns types

01:27:20,880 --> 01:27:28,800
so a is an ipv4 address then

01:27:24,880 --> 01:27:34,719
four is is a ipv6 address

01:27:28,800 --> 01:27:34,719
so ipv6 is like newer version of ipv4

01:27:36,000 --> 01:27:41,120
yeah but when the world has run out of

01:27:39,400 --> 01:27:47,840
ipd5

01:27:41,120 --> 01:27:47,840
probably use ipod

01:27:59,600 --> 01:28:04,480
yeah then cname is also quite popular is

01:28:02,960 --> 01:28:08,400
this is

01:28:04,480 --> 01:28:12,239
cname is you point to another domain

01:28:08,400 --> 01:28:14,480
basically so um if you do static site

01:28:12,239 --> 01:28:15,360
posting cname is the most popular way to

01:28:14,480 --> 01:28:17,440
do it

01:28:15,360 --> 01:28:19,120
so if you do static site hosting you

01:28:17,440 --> 01:28:21,520
basically your files are in a bucket

01:28:19,120 --> 01:28:22,480
they just point to that bucket so it is

01:28:21,520 --> 01:28:25,040
it's done using a

01:28:22,480 --> 01:28:26,960
cname then the rest rest of them are

01:28:25,040 --> 01:28:30,080
usually just for

01:28:26,960 --> 01:28:31,679
identification purposes so if you want

01:28:30,080 --> 01:28:33,280
to verify your domain usually what

01:28:31,679 --> 01:28:34,239
people will do is tell you to create a

01:28:33,280 --> 01:28:37,280
text

01:28:34,239 --> 01:28:41,199
a txt record in your dns entry

01:28:37,280 --> 01:28:44,480
your dns records yeah but yeah

01:28:41,199 --> 01:28:47,600
to get your website hosted on your own

01:28:44,480 --> 01:28:50,800
on your own domain

01:28:47,600 --> 01:28:52,400
all you need to do is add an a record

01:28:50,800 --> 01:28:54,840
another thing you probably want to do is

01:28:52,400 --> 01:28:57,920
host it under www

01:28:54,840 --> 01:29:01,920
so just

01:28:57,920 --> 01:29:04,000
a record and that's it um

01:29:01,920 --> 01:29:05,440
if you're certain this usually takes a

01:29:04,000 --> 01:29:06,800
while to propagate

01:29:05,440 --> 01:29:10,480
so if you want to check if the

01:29:06,800 --> 01:29:13,120
propagation is done what you can do is

01:29:10,480 --> 01:29:13,120
oh my god

01:29:13,520 --> 01:29:22,159
yeah what you can do is use the yeah

01:29:16,719 --> 01:29:25,199
on the live and you can see 35.115

01:29:22,159 --> 01:29:27,360
yep so it's already updated

01:29:25,199 --> 01:29:27,360
so

01:29:31,760 --> 01:29:37,840
huh yeah so if you basically go to

01:29:35,000 --> 01:29:41,440
showmc1.live

01:29:37,840 --> 01:29:44,480
see this nginx country now

01:29:41,440 --> 01:29:49,040
this is not this is not our website and

01:29:44,480 --> 01:29:49,040
you might be thinking why i mean

01:29:49,360 --> 01:29:58,000
if if you've been seeing our

01:29:54,239 --> 01:30:00,719
nginx config then you can see our server

01:29:58,000 --> 01:30:03,679
name is still our excel id

01:30:00,719 --> 01:30:05,280
so what happens is when you can't come

01:30:03,679 --> 01:30:07,440
through the domain

01:30:05,280 --> 01:30:08,480
it will not match with the excel ideas

01:30:07,440 --> 01:30:11,600
the server name

01:30:08,480 --> 01:30:14,960
so it will just show the default one

01:30:11,600 --> 01:30:19,280
so if you want to show your your

01:30:14,960 --> 01:30:19,280
your website here what you'll do is

01:30:19,440 --> 01:30:26,960
you will delete this and put in your

01:30:23,920 --> 01:30:30,239
website name

01:30:26,960 --> 01:30:32,960
the complete domain here

01:30:30,239 --> 01:30:35,760
then you can just sudo system ctr

01:30:32,960 --> 01:30:40,480
restart nginx

01:30:35,760 --> 01:30:43,600
and check that is running

01:30:40,480 --> 01:30:45,520
and now if it's not cached

01:30:43,600 --> 01:30:48,320
you should be able to see a website on

01:30:45,520 --> 01:30:50,960
your own domain now

01:30:48,320 --> 01:30:52,800
yeah but now if you go back to this one

01:30:50,960 --> 01:30:55,199
then we'll show the default one

01:30:52,800 --> 01:30:57,840
yeah so what most most websites will do

01:30:55,199 --> 01:31:02,960
at the security measure is

01:30:57,840 --> 01:31:06,719
disable access via your

01:31:02,960 --> 01:31:08,960
address so uh this is very usually done

01:31:06,719 --> 01:31:10,719
at the dns level so

01:31:08,960 --> 01:31:13,840
if you if you use cloud player they will

01:31:10,719 --> 01:31:17,920
automatically disable direct ipss

01:31:13,840 --> 01:31:22,000
but there is um there's more

01:31:17,920 --> 01:31:24,480
optional and more advanced so yeah um

01:31:22,000 --> 01:31:26,000
you have your website here but you know

01:31:24,480 --> 01:31:27,360
if you're if you're handling user

01:31:26,000 --> 01:31:30,800
credentials any

01:31:27,360 --> 01:31:32,080
sort of authentication you probably want

01:31:30,800 --> 01:31:35,199
some sort of

01:31:32,080 --> 01:31:38,960
security so as you can see right now

01:31:35,199 --> 01:31:44,400
our connection is not secure

01:31:38,960 --> 01:31:47,760
so we probably want to fix that so

01:31:44,400 --> 01:31:51,600
we have two two ways to do this so

01:31:47,760 --> 01:31:54,000
the first way is one of them

01:31:51,600 --> 01:31:55,360
is going to be provided by your domain

01:31:54,000 --> 01:31:58,320
registrar

01:31:55,360 --> 01:32:00,000
so if i go back here you should be able

01:31:58,320 --> 01:32:04,159
to see this

01:32:00,000 --> 01:32:05,760
complete ssl certificate so

01:32:04,159 --> 01:32:08,320
when you buy a domain usually it comes

01:32:05,760 --> 01:32:10,080
with like one ssl certificate

01:32:08,320 --> 01:32:12,239
it usually costs like four dollars a

01:32:10,080 --> 01:32:14,960
year or something like that and

01:32:12,239 --> 01:32:17,679
what you do is you generate a

01:32:14,960 --> 01:32:19,360
certificate signing request or csr

01:32:17,679 --> 01:32:27,840
and then it will just give you back an

01:32:19,360 --> 01:32:27,840
ssl certificate

01:32:29,199 --> 01:32:35,040
yeah yeah csr but this is

01:32:32,239 --> 01:32:35,840
paid and we don't like that so what the

01:32:35,040 --> 01:32:38,400
eff

01:32:35,840 --> 01:32:40,239
did so eff came up with this thing

01:32:38,400 --> 01:32:43,840
called let's encrypt

01:32:40,239 --> 01:32:47,120
so let's encrypt these free

01:32:43,840 --> 01:32:48,560
tls certificates and

01:32:47,120 --> 01:32:50,800
while the ones that come from your

01:32:48,560 --> 01:32:54,320
domain registrar are usually

01:32:50,800 --> 01:32:55,600
usually expire in one year these expire

01:32:54,320 --> 01:33:01,679
in 60 days

01:32:55,600 --> 01:33:04,960
so the the validity is lower but

01:33:01,679 --> 01:33:07,760
yeah but it's free but you know

01:33:04,960 --> 01:33:08,159
it's all open source so people came up

01:33:07,760 --> 01:33:11,040
with

01:33:08,159 --> 01:33:12,960
a new thing called surfboard so what

01:33:11,040 --> 01:33:16,480
surprise

01:33:12,960 --> 01:33:18,320
yeah so support is basically is it's an

01:33:16,480 --> 01:33:21,440
automated service that will just

01:33:18,320 --> 01:33:22,960
renew your certificate after 60 days so

01:33:21,440 --> 01:33:26,000
you will get perpetual

01:33:22,960 --> 01:33:29,600
pls certificates for free

01:33:26,000 --> 01:33:31,679
yeah so it's is it's very useful for

01:33:29,600 --> 01:33:32,960
if you wanna host it on the on the chip

01:33:31,679 --> 01:33:36,880
so

01:33:32,960 --> 01:33:41,280
um so the first thing you want

01:33:36,880 --> 01:33:41,280
let me try ssl here

01:33:45,280 --> 01:33:51,440
okay i don't know oh okay so

01:33:48,960 --> 01:33:53,199
um to install that board you need snap

01:33:51,440 --> 01:34:05,840
so sudo

01:33:53,199 --> 01:34:05,840
apt install snap d

01:34:10,480 --> 01:34:18,719
yeah yeah

01:34:14,080 --> 01:34:20,480
yeah yeah so the new sudo snap installed

01:34:18,719 --> 01:34:24,400
yeah the only other option other than

01:34:20,480 --> 01:34:24,400
using sniper is building from source

01:34:24,639 --> 01:34:27,199
which i mean

01:34:27,679 --> 01:34:32,239
yeah you can just clone that git then

01:34:29,360 --> 01:34:32,239
you make me

01:34:36,960 --> 01:34:41,040
yeah that's the only two options they

01:34:44,840 --> 01:34:47,840
provided

01:35:12,840 --> 01:35:15,840
yes

01:35:17,679 --> 01:35:21,440
is really not used in servers because

01:35:19,679 --> 01:35:29,840
it's it's rolling

01:35:21,440 --> 01:35:29,840
with this so it's more unstable

01:35:35,679 --> 01:35:40,320
yeah so you just sudo snap install

01:35:38,080 --> 01:35:45,360
support classic

01:35:40,320 --> 01:35:45,360
and it's gonna download that

01:35:48,880 --> 01:35:51,760
it's quite slow

01:35:54,880 --> 01:35:57,040
oh

01:36:08,880 --> 01:36:11,840
is

01:36:22,840 --> 01:36:25,840
is

01:36:29,360 --> 01:36:39,840
well i've never heard of that

01:36:50,840 --> 01:36:53,840
is

01:37:45,280 --> 01:37:49,840
i don't know

01:37:51,280 --> 01:37:53,679
yeah yeah

01:37:54,480 --> 01:37:58,880
okay once you've installed satbot you

01:37:56,639 --> 01:38:02,400
can create a

01:37:58,880 --> 01:38:06,880
soft link from snap bin

01:38:02,400 --> 01:38:10,800
snap bin set board to user

01:38:06,880 --> 01:38:12,400
bin sweatbot once you've done that you

01:38:10,800 --> 01:38:17,520
can just sear

01:38:12,400 --> 01:38:20,960
sudo 3rd port

01:38:17,520 --> 01:38:22,639
nginx and

01:38:20,960 --> 01:38:25,199
they will just ask you to put your

01:38:22,639 --> 01:38:25,199
username

01:38:25,920 --> 01:38:32,320
yes yes press

01:38:29,040 --> 01:38:36,880
enter you will check

01:38:32,320 --> 01:38:36,880
verify and

01:38:38,000 --> 01:38:45,440
yeah that's it that's that's

01:38:41,600 --> 01:38:49,520
that's how you use ssl so

01:38:45,440 --> 01:38:49,520
it's going to make a few changes to our

01:38:49,679 --> 01:38:53,040
nginx config so

01:38:54,639 --> 01:38:58,159
if you can see so a few things that

01:38:57,280 --> 01:39:02,159
they've done here

01:38:58,159 --> 01:39:05,760
is the first thing they've done is

01:39:02,159 --> 01:39:08,080
um if it's

01:39:05,760 --> 01:39:09,760
if you're running on a hit on port 80

01:39:08,080 --> 01:39:12,280
which is http

01:39:09,760 --> 01:39:14,239
it will automatically redirect you to

01:39:12,280 --> 01:39:18,000
https

01:39:14,239 --> 01:39:21,360
and the other change is these four lines

01:39:18,000 --> 01:39:27,840
so it basically uses the ssl certificate

01:39:21,360 --> 01:39:27,840
key and basically is a config call

01:39:28,080 --> 01:39:31,840
um i wouldn't recommend making any

01:39:30,000 --> 01:39:34,880
changes since it's

01:39:31,840 --> 01:39:38,080
managed by support so yeah so

01:39:34,880 --> 01:39:43,040
um if you go to your website now

01:39:38,080 --> 01:39:43,040
and restart the connection is here

01:39:43,360 --> 01:39:47,440
yeah uh if you want to see the

01:39:45,440 --> 01:39:51,840
certificate then it's

01:39:47,440 --> 01:39:55,840
certified by some dst ca but yeah

01:39:51,840 --> 01:39:55,840
it's a valid certificate

01:40:02,560 --> 01:40:09,840
this one comes before

01:40:28,930 --> 01:40:31,999
[Music]

01:40:42,600 --> 01:40:45,719
[Music]

01:41:02,840 --> 01:41:05,840
javascript

01:41:11,840 --> 01:41:19,840
the problem is that some software they

01:41:14,480 --> 01:41:19,840
come all packaged together

01:42:13,119 --> 01:42:16,719
probably not the first person to ask for

01:42:14,880 --> 01:42:21,360
ph

01:42:16,719 --> 01:42:21,360
most of my experiences is in my learning

01:42:24,000 --> 01:42:29,840
this actually something that's pretty

01:42:26,840 --> 01:42:29,840
old

01:42:50,270 --> 01:42:53,329
[Music]

01:42:55,040 --> 01:42:58,639
yeah it was um easier to get get things

01:42:57,840 --> 01:43:01,040
done

01:42:58,639 --> 01:43:02,080
yeah yeah you are trying to just get

01:43:01,040 --> 01:43:11,840
things done

01:43:02,080 --> 01:43:11,840
hpc you know yeah multiple choice

01:43:22,840 --> 01:43:25,840
is

01:43:30,630 --> 01:43:33,699
[Music]

01:43:36,840 --> 01:43:39,840
script

01:44:11,360 --> 01:44:13,440

YouTube URL: https://www.youtube.com/watch?v=HPL_w45eUj0


