Title: A Design Methodology For Building Secure Android Apps (Joydeep Mitra)
Publication date: 2021-03-08
Playlist: FOSSASIA Summit 2021
Description: 
	About the speaker: Joydeep Mitra is an Assistant Professor of Practice at the State University of New York, Stony Brook. He is interested in exploring ways to build secure and robust software systems. He is currently focussed on Android application (app) security. In this context, his work involves developing benchmarks and measures to empirically evaluate solutions related to Android app security along with developing design methodologies that aid in building secure Android apps. His research in Android app security has led to the discovery of vulnerabilities in the Android platform which have been publicly acknowledged and fixed by Google

Apart from his primary interest in secure software engineering, he is also interested in developing tools, techniques, and algorithms that facilitate the use and analysis of data. Consequently, he has dabbled with Cheminformatics which deals with use of computers and informational techniques to solve problems related to Chemistry, specifically Crystallography.
Captions: 
	00:00:00,880 --> 00:00:06,000
hello everyone uh in this talk

00:00:03,520 --> 00:00:07,759
uh i'm going to introduce a design

00:00:06,000 --> 00:00:10,320
methodology that i've developed for

00:00:07,759 --> 00:00:12,320
building secure android apps

00:00:10,320 --> 00:00:14,320
so we all know that android apps have

00:00:12,320 --> 00:00:17,039
become an integral part of our lives

00:00:14,320 --> 00:00:18,880
we use them to manage our finances uh

00:00:17,039 --> 00:00:20,000
for communicating with others and for

00:00:18,880 --> 00:00:21,520
other security

00:00:20,000 --> 00:00:23,039
related things like two-factor

00:00:21,520 --> 00:00:24,960
authentication

00:00:23,039 --> 00:00:26,400
hence it's important that developers who

00:00:24,960 --> 00:00:28,800
build these apps

00:00:26,400 --> 00:00:30,720
make sure that that these apps are

00:00:28,800 --> 00:00:33,200
secure and do not have

00:00:30,720 --> 00:00:34,000
vulnerabilities that may cause the harm

00:00:33,200 --> 00:00:37,360
to the

00:00:34,000 --> 00:00:39,280
user in any way but even today we find

00:00:37,360 --> 00:00:42,000
that vulnerabilities are often

00:00:39,280 --> 00:00:43,760
discovered in apps for example we found

00:00:42,000 --> 00:00:46,160
a couple of vulnerabilities in the

00:00:43,760 --> 00:00:48,239
google camera app and the gmail app

00:00:46,160 --> 00:00:49,200
uh that allowed uh the leakage of

00:00:48,239 --> 00:00:52,160
information

00:00:49,200 --> 00:00:53,920
private uh in in information and it

00:00:52,160 --> 00:00:55,680
allowed a malicious app to

00:00:53,920 --> 00:00:58,719
exploit the vulnerabilities and carry

00:00:55,680 --> 00:01:02,239
out a denial of service attack a recent

00:00:58,719 --> 00:01:02,640
study by ibm shows that the average cost

00:01:02,239 --> 00:01:05,439
of

00:01:02,640 --> 00:01:06,000
a data breach is quite high which means

00:01:05,439 --> 00:01:07,760
that

00:01:06,000 --> 00:01:10,960
if vulnerabilities are found in apps

00:01:07,760 --> 00:01:13,520
they can be quite expensive to fix

00:01:10,960 --> 00:01:14,720
uh so this brings us to this question

00:01:13,520 --> 00:01:17,200
that how do we secure

00:01:14,720 --> 00:01:18,720
android apps well the current prevalent

00:01:17,200 --> 00:01:22,000
approach is to take a

00:01:18,720 --> 00:01:24,240
curative approach and detect

00:01:22,000 --> 00:01:25,680
vulnerabilities in an app after the app

00:01:24,240 --> 00:01:28,000
has been built

00:01:25,680 --> 00:01:29,680
now the problem with this is that after

00:01:28,000 --> 00:01:30,400
an app has been built and if you

00:01:29,680 --> 00:01:32,960
discover

00:01:30,400 --> 00:01:36,000
vulnerabilities that's going to raise

00:01:32,960 --> 00:01:38,079
development costs and maintenance costs

00:01:36,000 --> 00:01:40,400
so a an alternative is to take a more

00:01:38,079 --> 00:01:42,960
preventive approach and to consider

00:01:40,400 --> 00:01:44,399
and bake security into the app's design

00:01:42,960 --> 00:01:48,079
itself

00:01:44,399 --> 00:01:51,040
now this is not commonly used uh in app

00:01:48,079 --> 00:01:53,200
development which is why this is the

00:01:51,040 --> 00:01:57,439
focus of my

00:01:53,200 --> 00:02:00,799
research so my proposed solution here

00:01:57,439 --> 00:02:02,719
is to uh is to bake security into the

00:02:00,799 --> 00:02:04,000
storyboarding phase of an app

00:02:02,719 --> 00:02:06,399
development process

00:02:04,000 --> 00:02:09,039
uh so when an app is developed it begins

00:02:06,399 --> 00:02:12,000
with story reporting which

00:02:09,039 --> 00:02:14,160
briefly uh includes uh the first

00:02:12,000 --> 00:02:16,080
defining the screens of the app and then

00:02:14,160 --> 00:02:17,680
the flow of the app is defined in terms

00:02:16,080 --> 00:02:20,160
of the screens and then

00:02:17,680 --> 00:02:22,239
the designer will go and sort of define

00:02:20,160 --> 00:02:25,360
how the app will interact with the user

00:02:22,239 --> 00:02:28,959
and the underlying platform or other

00:02:25,360 --> 00:02:31,519
uh web services or databases

00:02:28,959 --> 00:02:33,440
for example but the problem with this is

00:02:31,519 --> 00:02:35,200
in this phase it is difficult to reason

00:02:33,440 --> 00:02:36,800
about security properties

00:02:35,200 --> 00:02:39,120
and what kind of vulnerabilities that

00:02:36,800 --> 00:02:39,920
may occur because there is no capability

00:02:39,120 --> 00:02:43,920
to express

00:02:39,920 --> 00:02:45,760
security features in an app's storyboard

00:02:43,920 --> 00:02:48,000
so the question is can we extend the

00:02:45,760 --> 00:02:50,000
traditional features of an app

00:02:48,000 --> 00:02:51,120
story board in a way that will allow the

00:02:50,000 --> 00:02:53,200
developer and the designer to

00:02:51,120 --> 00:02:54,959
collaborate and reason about security in

00:02:53,200 --> 00:02:57,200
a meaningful way

00:02:54,959 --> 00:02:58,400
so it turns out that we can which is

00:02:57,200 --> 00:03:01,120
what uh

00:02:58,400 --> 00:03:02,239
my methodology is is all about where the

00:03:01,120 --> 00:03:04,159
developer

00:03:02,239 --> 00:03:05,360
and the designer will collaborate and

00:03:04,159 --> 00:03:08,000
they'll start off with this

00:03:05,360 --> 00:03:08,640
uh stratore board which is no different

00:03:08,000 --> 00:03:12,000
from what

00:03:08,640 --> 00:03:13,360
uh existing storyboards are and we have

00:03:12,000 --> 00:03:15,200
sort of extended the

00:03:13,360 --> 00:03:17,599
traditional storyboards capability that

00:03:15,200 --> 00:03:20,480
will allow the developer to

00:03:17,599 --> 00:03:21,440
uh to specify the proper the security

00:03:20,480 --> 00:03:24,560
properties

00:03:21,440 --> 00:03:25,840
or of known vulnerabilities that can

00:03:24,560 --> 00:03:28,480
occur in an app

00:03:25,840 --> 00:03:29,599
and then the developer can go and verify

00:03:28,480 --> 00:03:32,159
those properties

00:03:29,599 --> 00:03:33,680
in the abstractory board if that if

00:03:32,159 --> 00:03:36,319
those properties are

00:03:33,680 --> 00:03:37,840
verified then it's fine otherwise the

00:03:36,319 --> 00:03:40,959
developer will be uh

00:03:37,840 --> 00:03:42,879
told where to fix them and once

00:03:40,959 --> 00:03:44,879
everything is good the developer can

00:03:42,879 --> 00:03:45,599
generate code and extend the generated

00:03:44,879 --> 00:03:48,720
code with

00:03:45,599 --> 00:03:50,720
business logic as well so a proof of

00:03:48,720 --> 00:03:52,959
concept of this methodology has been

00:03:50,720 --> 00:03:54,799
implemented using android jetpack's

00:03:52,959 --> 00:03:56,400
navigation graphs which help us build

00:03:54,799 --> 00:03:59,040
these storyboards

00:03:56,400 --> 00:03:59,599
at the back end there is an android lint

00:03:59,040 --> 00:04:03,120
uh

00:03:59,599 --> 00:04:06,319
which sort of analyzes the uh

00:04:03,120 --> 00:04:09,519
storyboard to look for violations of uh

00:04:06,319 --> 00:04:11,040
of security properties based on existing

00:04:09,519 --> 00:04:13,360
vulnerabilities and then there's a

00:04:11,040 --> 00:04:15,439
plug-in to generate code from the

00:04:13,360 --> 00:04:17,199
uh storyboard this is available in a bit

00:04:15,439 --> 00:04:18,479
bucket repository it's open source i

00:04:17,199 --> 00:04:20,400
encourage you to go and

00:04:18,479 --> 00:04:22,720
check it out and if you want you can

00:04:20,400 --> 00:04:23,199
also contribute to it you can contact me

00:04:22,720 --> 00:04:26,240
if you

00:04:23,199 --> 00:04:28,800
want to collaborate on this so

00:04:26,240 --> 00:04:30,000
uh there are a few uh issues with the

00:04:28,800 --> 00:04:32,400
existing uh

00:04:30,000 --> 00:04:34,080
realization we have is that when the

00:04:32,400 --> 00:04:35,759
generated when the code is

00:04:34,080 --> 00:04:37,759
generated the properties that have been

00:04:35,759 --> 00:04:39,199
verified at the storyboard stage may not

00:04:37,759 --> 00:04:40,960
be preserved in the

00:04:39,199 --> 00:04:43,360
generated business logic code because

00:04:40,960 --> 00:04:44,960
the developer can change it

00:04:43,360 --> 00:04:47,040
so we have to think about ways to sort

00:04:44,960 --> 00:04:50,320
of preserve that and one way is to use

00:04:47,040 --> 00:04:52,080
uh sandboxing uh techniques

00:04:50,320 --> 00:04:53,360
the other thing that i want to do is to

00:04:52,080 --> 00:04:55,440
integrate this

00:04:53,360 --> 00:04:56,720
approach with existing cross-platform

00:04:55,440 --> 00:04:59,919
app design tools like

00:04:56,720 --> 00:05:01,120
flutter and also to find out a way to

00:04:59,919 --> 00:05:03,039
express security

00:05:01,120 --> 00:05:04,720
properties that are based on privacy

00:05:03,039 --> 00:05:07,360
policies of apps

00:05:04,720 --> 00:05:08,000
so that brings me to the end of this

00:05:07,360 --> 00:05:10,000
talk

00:05:08,000 --> 00:05:11,120
i look forward to interacting with you

00:05:10,000 --> 00:05:19,440
in the live chat

00:05:11,120 --> 00:05:19,440

YouTube URL: https://www.youtube.com/watch?v=OyvuRqAKy50


