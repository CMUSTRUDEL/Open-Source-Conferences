Title: Web Development, Python, Flask & Javascript: Getting started with Open Event (eventyay), Areeb Jamal
Publication date: 2021-04-21
Playlist: FOSSASIA Summit 2021
Description: 
	Open Event is the software running eventyay.com. The two main components of the system are the frontend using Javascript and the backend using Python and Flask. 

In this workshop you will learn:
* the main features of the application
* different user groups and roles like anonymous, attendees, speakers, and organizers
about the admin system roles approach
* how to set up the Javascript frontend and Flask/Python backend on your local machine
* how to contribute and create tests
* the best practices to collaborate with the team
* We will also discuss the roadmap of the system and video extensions like BigBlueButton, Jitsi and Nextcloud Video.

At the end we will share opportunities to participate in FOSSASIA development programs like Codeheat and internships or and discuss how to become a freelancer or full-time developer with the project.

Please download the code before the workshop:
Open Event Frontend (Javascript/Ember): https://github.com/fossasia/open-event-frontend
Open Event Backend API Server (Flask/Python): https://github.com/fossasia/open-event-server
Captions: 
	00:00:14,080 --> 00:00:18,720
hey honey

00:00:15,440 --> 00:00:21,920
yes i guess has left the

00:00:18,720 --> 00:00:24,720
meeting by mistake and i hope he'll be

00:00:21,920 --> 00:00:24,720
joining soon

00:00:26,960 --> 00:00:35,840
okay yes yeah

00:00:31,679 --> 00:00:38,160
yes sorry folks uh don't know how i got

00:00:35,840 --> 00:00:41,200
disconnected let me just

00:00:38,160 --> 00:00:44,960
share my screen again so uh there are

00:00:41,200 --> 00:00:44,960
three components uh in

00:00:45,360 --> 00:00:49,760
one is the public section uh the as you

00:00:48,320 --> 00:00:50,559
can see the first asia summit and

00:00:49,760 --> 00:00:52,960
everything

00:00:50,559 --> 00:00:55,360
and then there's organizer section which

00:00:52,960 --> 00:00:56,079
only the person who created an event can

00:00:55,360 --> 00:00:59,359
access

00:00:56,079 --> 00:00:59,760
and then there's admin section that only

00:00:59,359 --> 00:01:03,120
the

00:00:59,760 --> 00:01:06,720
administrator of the platform can access

00:01:03,120 --> 00:01:09,200
so uh if whenever you create

00:01:06,720 --> 00:01:11,200
an event you can access the event

00:01:09,200 --> 00:01:14,560
section for example i can go to

00:01:11,200 --> 00:01:16,320
manage events and then i see uh the

00:01:14,560 --> 00:01:17,439
events i manage and i can go to the

00:01:16,320 --> 00:01:19,520
dashboard

00:01:17,439 --> 00:01:21,840
so this terminology is important because

00:01:19,520 --> 00:01:23,840
sometimes people see in issues

00:01:21,840 --> 00:01:25,200
that the issue is an organizer section

00:01:23,840 --> 00:01:28,479
and let's say i

00:01:25,200 --> 00:01:31,200
uh copy the url and

00:01:28,479 --> 00:01:33,119
share it in the issue description and

00:01:31,200 --> 00:01:33,439
they try to open that url and obviously

00:01:33,119 --> 00:01:34,960
they

00:01:33,439 --> 00:01:36,720
can't access because this is not a

00:01:34,960 --> 00:01:37,680
public section this is an organizer

00:01:36,720 --> 00:01:40,960
section

00:01:37,680 --> 00:01:42,880
and so thus you you would need to create

00:01:40,960 --> 00:01:44,640
your own event to access and organize

00:01:42,880 --> 00:01:46,000
the section of particular event

00:01:44,640 --> 00:01:47,920
and then there are some bugs in the

00:01:46,000 --> 00:01:50,720
admin section so uh

00:01:47,920 --> 00:01:52,000
then you cannot even access those by

00:01:50,720 --> 00:01:55,680
creating your own event

00:01:52,000 --> 00:01:59,439
you need to deploy your own server

00:01:55,680 --> 00:02:02,799
on uh locally to get to that section

00:01:59,439 --> 00:02:05,600
so this is a general uh

00:02:02,799 --> 00:02:06,240
outlook of the sections of even open

00:02:05,600 --> 00:02:08,879
event

00:02:06,240 --> 00:02:10,879
and then there are kinds of users so

00:02:08,879 --> 00:02:12,959
there's admin user which is at the top

00:02:10,879 --> 00:02:15,599
of the hierarchy then there are

00:02:12,959 --> 00:02:17,599
uh owner of the events so an owner of

00:02:15,599 --> 00:02:19,599
the event can do anything related to an

00:02:17,599 --> 00:02:21,840
event including deleting the event

00:02:19,599 --> 00:02:22,720
or transferring the event to another

00:02:21,840 --> 00:02:25,120
owner

00:02:22,720 --> 00:02:27,200
then there are organizers organizers can

00:02:25,120 --> 00:02:28,959
also do everything except

00:02:27,200 --> 00:02:31,599
deleting and transferring the ownership

00:02:28,959 --> 00:02:33,519
of an event then there are co-organizers

00:02:31,599 --> 00:02:34,800
and then there are also video moderators

00:02:33,519 --> 00:02:38,239
and things like that

00:02:34,800 --> 00:02:41,519
so basically this is the rundown of uh

00:02:38,239 --> 00:02:44,480
the the open event platform so

00:02:41,519 --> 00:02:45,519
the next thing we'll do is is set up uh

00:02:44,480 --> 00:02:48,800
the server

00:02:45,519 --> 00:02:49,599
so before that uh let's take you know a

00:02:48,800 --> 00:02:51,200
little bit of

00:02:49,599 --> 00:02:54,160
stop so it doesn't even have any

00:02:51,200 --> 00:02:54,160
question till now

00:02:57,540 --> 00:03:02,879
[Music]

00:03:00,400 --> 00:03:04,640
okay so i'll take that as people don't

00:03:02,879 --> 00:03:08,000
have a question yet

00:03:04,640 --> 00:03:11,360
so then next let's turn to installing uh

00:03:08,000 --> 00:03:14,159
the server so i have uh this

00:03:11,360 --> 00:03:15,840
repository open open event server so

00:03:14,159 --> 00:03:18,080
basically whenever you want to start

00:03:15,840 --> 00:03:20,239
setting up a project you go to the

00:03:18,080 --> 00:03:22,400
repository there's the readme

00:03:20,239 --> 00:03:23,280
and then you can see the storage

00:03:22,400 --> 00:03:25,760
instructions

00:03:23,280 --> 00:03:27,519
so we want a local installation

00:03:25,760 --> 00:03:28,400
instructions so i just go to that

00:03:27,519 --> 00:03:29,920
section

00:03:28,400 --> 00:03:32,640
and then start following the

00:03:29,920 --> 00:03:35,920
instructions so

00:03:32,640 --> 00:03:38,000
i have a terminal with me which i have

00:03:35,920 --> 00:03:39,599
which i've opened a fresh docker

00:03:38,000 --> 00:03:41,599
container it

00:03:39,599 --> 00:03:42,879
it is clean so i don't have anything

00:03:41,599 --> 00:03:46,560
pre-installed in it

00:03:42,879 --> 00:03:49,440
so that whatever we do uh we have

00:03:46,560 --> 00:03:51,440
to do same i assume that nothing is

00:03:49,440 --> 00:03:54,080
installed on your computer except

00:03:51,440 --> 00:03:54,799
you get i assume that git is already

00:03:54,080 --> 00:03:58,239
installed on

00:03:54,799 --> 00:04:00,480
on it and that your

00:03:58,239 --> 00:04:01,840
operating system is linux so if you

00:04:00,480 --> 00:04:03,840
don't use linux

00:04:01,840 --> 00:04:06,400
if you have windows i recommend that you

00:04:03,840 --> 00:04:09,040
use linux ubuntu or any of the

00:04:06,400 --> 00:04:10,640
linux distros but if you can't then i

00:04:09,040 --> 00:04:14,080
recommend that you use

00:04:10,640 --> 00:04:16,799
wsl2 so windows subsystem for linux

00:04:14,080 --> 00:04:17,919
allows you to run linux in a virtual

00:04:16,799 --> 00:04:21,199
environment in

00:04:17,919 --> 00:04:22,079
windows but anyway let's then let's get

00:04:21,199 --> 00:04:25,919
started

00:04:22,079 --> 00:04:28,639
so as you can see the first step is to

00:04:25,919 --> 00:04:29,199
get a copy of source code to clone clone

00:04:28,639 --> 00:04:33,040
it

00:04:29,199 --> 00:04:35,120
if you want to develop openmint

00:04:33,040 --> 00:04:36,400
it is recommended that you first fork

00:04:35,120 --> 00:04:38,400
the repository

00:04:36,400 --> 00:04:40,800
and then clone your own project but as

00:04:38,400 --> 00:04:41,600
i'm just demonstrating it here and my

00:04:40,800 --> 00:04:43,520
fork is

00:04:41,600 --> 00:04:45,759
a little bit diverged from the source

00:04:43,520 --> 00:04:48,960
project i'm going to just

00:04:45,759 --> 00:04:52,880
clone the original project itself

00:04:48,960 --> 00:04:52,880
so i have copied this command

00:04:54,240 --> 00:04:58,560
i've pasted it it's cloning here

00:05:01,520 --> 00:05:07,840
[Applause]

00:05:03,280 --> 00:05:11,840
then i cd into the repository

00:05:07,840 --> 00:05:11,840
after it has cloned

00:05:36,840 --> 00:05:40,720
oh

00:05:38,320 --> 00:05:43,039
so now we have cloned the repository and

00:05:40,720 --> 00:05:45,039
uh i am

00:05:43,039 --> 00:05:46,080
changing the directory to open event

00:05:45,039 --> 00:05:50,560
server

00:05:46,080 --> 00:05:50,560
so now the next step is

00:05:51,680 --> 00:05:55,680
that we install the dependencies so we

00:05:53,520 --> 00:05:58,319
have a section for mac os we have for

00:05:55,680 --> 00:06:00,720
domain ubuntu so i'm just going to

00:05:58,319 --> 00:06:01,759
copy the debian ubuntu installation

00:06:00,720 --> 00:06:04,800
instruction

00:06:01,759 --> 00:06:06,960
i'm going to paste this here and i have

00:06:04,800 --> 00:06:09,520
to enter my password

00:06:06,960 --> 00:06:11,280
and once i have entered the password i

00:06:09,520 --> 00:06:13,039
have to accept that i want to install

00:06:11,280 --> 00:06:16,080
these dependencies

00:06:13,039 --> 00:06:19,919
and now they are getting installed

00:06:16,080 --> 00:06:21,520
so anyone who is uh trying the system

00:06:19,919 --> 00:06:24,080
the installation instructions

00:06:21,520 --> 00:06:24,800
with me you can also do that and if they

00:06:24,080 --> 00:06:27,120
are stuck

00:06:24,800 --> 00:06:30,160
anywhere they can add the questions in

00:06:27,120 --> 00:06:32,000
chat and then whenever i'll take a break

00:06:30,160 --> 00:06:33,520
while something like the dependency

00:06:32,000 --> 00:06:49,840
installation is happening then

00:06:33,520 --> 00:06:49,840
i can answer your questions

00:07:00,840 --> 00:07:03,840
hey

00:07:08,160 --> 00:07:11,759
so now i have uh this command line

00:07:10,960 --> 00:07:13,680
prompt

00:07:11,759 --> 00:07:15,360
which is asking me that what is my

00:07:13,680 --> 00:07:17,919
geographical location if

00:07:15,360 --> 00:07:19,919
it is because there's no default

00:07:17,919 --> 00:07:21,360
location in the docker container but if

00:07:19,919 --> 00:07:23,919
you're installing it locally

00:07:21,360 --> 00:07:25,120
it most probably won't ask you this but

00:07:23,919 --> 00:07:28,080
anyway i'm going to

00:07:25,120 --> 00:07:29,440
enter asia and then kolkata as my

00:07:28,080 --> 00:07:32,880
timeline

00:07:29,440 --> 00:07:32,880
time sorry time zone

00:07:39,360 --> 00:07:45,520
so now this is now set up so

00:07:42,400 --> 00:07:46,960
if i go up there's this instruction that

00:07:45,520 --> 00:07:49,440
if you want to

00:07:46,960 --> 00:07:50,560
start post risk where you i want to run

00:07:49,440 --> 00:07:53,440
this command

00:07:50,560 --> 00:07:54,160
so let's run this command and i have an

00:07:53,440 --> 00:07:56,160
error that

00:07:54,160 --> 00:07:57,759
this must either run as the cluster

00:07:56,160 --> 00:08:00,720
owner or root

00:07:57,759 --> 00:08:01,759
so there are two options i can either

00:08:00,720 --> 00:08:06,080
run this

00:08:01,759 --> 00:08:08,319
by changing my user to postgres

00:08:06,080 --> 00:08:10,479
and then running this command i can just

00:08:08,319 --> 00:08:11,520
run it as root so i'm going to run it as

00:08:10,479 --> 00:08:14,800
root

00:08:11,520 --> 00:08:18,400
so now the cluster should have started

00:08:14,800 --> 00:08:21,599
so after you have installed postgres

00:08:18,400 --> 00:08:22,479
uh what you want to do is to you know

00:08:21,599 --> 00:08:25,520
just

00:08:22,479 --> 00:08:27,280
see if you can access it using the psql

00:08:25,520 --> 00:08:28,800
command which is the command line client

00:08:27,280 --> 00:08:31,919
for postgresql

00:08:28,800 --> 00:08:33,839
so it gives me an error that role docker

00:08:31,919 --> 00:08:37,279
does not exist that's because

00:08:33,839 --> 00:08:41,440
when i run psql it assumes that the

00:08:37,279 --> 00:08:44,800
the user is the same user as the

00:08:41,440 --> 00:08:46,000
uh you know the ubuntu user so my ubuntu

00:08:44,800 --> 00:08:48,399
user is docker

00:08:46,000 --> 00:08:50,160
so it assumes that i'm accessing as

00:08:48,399 --> 00:08:51,200
docker user but i don't want that so

00:08:50,160 --> 00:08:54,720
i'll just

00:08:51,200 --> 00:08:56,160
change to postgres user and try to

00:08:54,720 --> 00:08:57,920
access psql

00:08:56,160 --> 00:09:00,000
and i can do that so that that means

00:08:57,920 --> 00:09:02,560
that postgres is installed correctly

00:09:00,000 --> 00:09:06,399
i'll exit and then uh let's continue on

00:09:02,560 --> 00:09:06,399
the instructions given in the readme

00:09:06,480 --> 00:09:10,160
so the next instruction is to install

00:09:09,200 --> 00:09:13,760
poetry

00:09:10,160 --> 00:09:16,800
uh uh first of all i'll uh mention that

00:09:13,760 --> 00:09:19,600
the project only works on python 3.8 so

00:09:16,800 --> 00:09:22,160
if you do not have python 3.8 installed

00:09:19,600 --> 00:09:22,959
you have to install it if you can see

00:09:22,160 --> 00:09:27,360
this here

00:09:22,959 --> 00:09:30,480
that i have python 3.8.2 installed

00:09:27,360 --> 00:09:32,640
using this setup so it's

00:09:30,480 --> 00:09:34,240
by default if i installed using the

00:09:32,640 --> 00:09:35,760
dependencies it has installed the

00:09:34,240 --> 00:09:38,560
correct python version

00:09:35,760 --> 00:09:40,640
but it may happen that you do not have

00:09:38,560 --> 00:09:44,160
the correct version in your ubuntu

00:09:40,640 --> 00:09:46,080
and it may also happen that you have 3.9

00:09:44,160 --> 00:09:47,600
which is which is also not supported in

00:09:46,080 --> 00:09:50,320
the project

00:09:47,600 --> 00:09:51,200
so the project depends on python 3.8

00:09:50,320 --> 00:09:54,080
features

00:09:51,200 --> 00:09:55,600
and thus if you run it on python 3.7 or

00:09:54,080 --> 00:09:59,040
python 3.6

00:09:55,600 --> 00:10:00,160
that would mean that it will throw

00:09:59,040 --> 00:10:02,560
syntax error

00:10:00,160 --> 00:10:05,120
and we have some breaking changes in

00:10:02,560 --> 00:10:07,120
python 3.9 which are not supported yet

00:10:05,120 --> 00:10:09,200
in our project that's why we can't use

00:10:07,120 --> 00:10:10,000
python 3.9 so if you're in a situation

00:10:09,200 --> 00:10:12,959
like this

00:10:10,000 --> 00:10:13,680
you may need to use pi enb which allows

00:10:12,959 --> 00:10:16,800
you to

00:10:13,680 --> 00:10:18,240
install multiple versions of python so

00:10:16,800 --> 00:10:19,600
we are not going to go into that there

00:10:18,240 --> 00:10:20,399
are instructions in the linked

00:10:19,600 --> 00:10:22,560
repository

00:10:20,399 --> 00:10:25,360
if you get stuck there we can help you

00:10:22,560 --> 00:10:28,880
uh you can uh ask a question here or

00:10:25,360 --> 00:10:31,040
uh in the gita channel so let's then uh

00:10:28,880 --> 00:10:32,079
install poetry which is the next step so

00:10:31,040 --> 00:10:35,120
poetry

00:10:32,079 --> 00:10:37,360
is like pip in python pip is the

00:10:35,120 --> 00:10:40,320
dependency management solution but

00:10:37,360 --> 00:10:42,079
it has some uh you know disadvantages it

00:10:40,320 --> 00:10:44,720
does not have dependency locking

00:10:42,079 --> 00:10:46,720
and also the dependency the resolution

00:10:44,720 --> 00:10:48,320
depends on the order of dependency so

00:10:46,720 --> 00:10:51,680
poetry solves this

00:10:48,320 --> 00:10:54,560
issue so we use poetry instead

00:10:51,680 --> 00:10:55,279
so let's install it and it gives me an

00:10:54,560 --> 00:10:58,880
error that

00:10:55,279 --> 00:11:00,720
the command curl is not found so one

00:10:58,880 --> 00:11:02,320
general instruction is that if something

00:11:00,720 --> 00:11:04,880
is not found

00:11:02,320 --> 00:11:06,240
you just sudo apt install and that you

00:11:04,880 --> 00:11:08,160
know binary

00:11:06,240 --> 00:11:11,279
so i just install curl using this

00:11:08,160 --> 00:11:13,120
command and then i'll run the command

00:11:11,279 --> 00:11:14,399
again and now it's saying that python

00:11:13,120 --> 00:11:16,560
not found but how can

00:11:14,399 --> 00:11:18,720
it be possible i just installed python

00:11:16,560 --> 00:11:19,839
so in new ubuntu versions python is not

00:11:18,720 --> 00:11:23,120
installed by default

00:11:19,839 --> 00:11:26,160
or it may even point to python 2.2

00:11:23,120 --> 00:11:29,279
or 2.7 so but i want to use python 3.

00:11:26,160 --> 00:11:30,399
so if i write python 3 it works so what

00:11:29,279 --> 00:11:33,600
i'll do here

00:11:30,399 --> 00:11:36,320
is i'll only ask python to python

00:11:33,600 --> 00:11:38,959
3. it may so happen that you have to

00:11:36,320 --> 00:11:41,440
list it to python 3.8 because by default

00:11:38,959 --> 00:11:43,120
it may point to python 3.6 and you have

00:11:41,440 --> 00:11:46,160
installed python 3.8

00:11:43,120 --> 00:11:50,000
as the new version so you you can do any

00:11:46,160 --> 00:11:51,760
way you can even just uh use python 3.8

00:11:50,000 --> 00:11:53,360
instead of python anywhere

00:11:51,760 --> 00:11:55,600
when writing commands i'm going to use

00:11:53,360 --> 00:11:57,760
this because it's much easier

00:11:55,600 --> 00:11:58,800
to do it this way so i just run the

00:11:57,760 --> 00:12:01,920
command again

00:11:58,800 --> 00:12:05,920
and now it is installing poetry so

00:12:01,920 --> 00:12:07,680
uh one more important uh notice

00:12:05,920 --> 00:12:09,519
uh is that whenever you install

00:12:07,680 --> 00:12:12,000
something there are some instructions

00:12:09,519 --> 00:12:13,120
and something if it does not work after

00:12:12,000 --> 00:12:15,120
installation

00:12:13,120 --> 00:12:17,200
is that you should scroll up and read

00:12:15,120 --> 00:12:18,720
the instructions so similar to when we

00:12:17,200 --> 00:12:20,800
were installing postgres

00:12:18,720 --> 00:12:22,399
uh if you had installed postgres it

00:12:20,800 --> 00:12:26,639
would not it would have not

00:12:22,399 --> 00:12:28,560
worked right away so you have to install

00:12:26,639 --> 00:12:30,720
uh and read the instructions which are

00:12:28,560 --> 00:12:33,680
given in installation so now

00:12:30,720 --> 00:12:35,279
poetry is is installed but if i run

00:12:33,680 --> 00:12:37,120
poetry command

00:12:35,279 --> 00:12:39,279
you'll notice it's not working so i have

00:12:37,120 --> 00:12:41,920
to read the instructions and it says

00:12:39,279 --> 00:12:43,920
that it has already added the poetry bin

00:12:41,920 --> 00:12:47,040
directory to your path

00:12:43,920 --> 00:12:49,440
but you have to run this

00:12:47,040 --> 00:12:51,120
command if you want to use it right away

00:12:49,440 --> 00:12:52,560
so what happens

00:12:51,120 --> 00:12:54,320
is that whenever we install something

00:12:52,560 --> 00:12:56,399
without the sudo command it's

00:12:54,320 --> 00:12:58,240
not installed globally it's installed in

00:12:56,399 --> 00:12:58,880
the user's directory and it's not by

00:12:58,240 --> 00:13:01,360
default

00:12:58,880 --> 00:13:03,519
added to the bar so we can't use it uh

00:13:01,360 --> 00:13:06,959
you know

00:13:03,519 --> 00:13:09,279
without any additions in the path so

00:13:06,959 --> 00:13:10,320
that's why you need to add it in dot

00:13:09,279 --> 00:13:13,519
profile or dot

00:13:10,320 --> 00:13:16,480
rc or dot zs hrc but

00:13:13,519 --> 00:13:18,320
poetry does it by default however you

00:13:16,480 --> 00:13:20,800
need to close the terminal and

00:13:18,320 --> 00:13:23,600
and open it again so if you don't want

00:13:20,800 --> 00:13:26,560
to do that we have to run this current

00:13:23,600 --> 00:13:28,480
shell command and after i do that i can

00:13:26,560 --> 00:13:30,480
run poetry it it works

00:13:28,480 --> 00:13:31,519
so then let's see what's the next

00:13:30,480 --> 00:13:33,440
instruction

00:13:31,519 --> 00:13:34,800
the next instruction is to install the

00:13:33,440 --> 00:13:38,959
dependencies so

00:13:34,800 --> 00:13:42,320
i just run poetry install

00:13:38,959 --> 00:13:44,240
so it will throw an error saying that

00:13:42,320 --> 00:13:45,440
there is no compatible python version

00:13:44,240 --> 00:13:48,959
found and

00:13:45,440 --> 00:13:51,360
that python 3.8.5 is not supported

00:13:48,959 --> 00:13:53,519
and the project requires python 3.8.6

00:13:51,360 --> 00:13:54,399
which is very strict about its python

00:13:53,519 --> 00:13:57,040
version

00:13:54,399 --> 00:13:58,880
and if you use pi env it's very easy to

00:13:57,040 --> 00:14:01,360
install a new python version

00:13:58,880 --> 00:14:04,880
and it requires currently that we use

00:14:01,360 --> 00:14:07,120
python 3.8.6 but we have python 3.8.5

00:14:04,880 --> 00:14:08,560
so whenever i recommend that when you

00:14:07,120 --> 00:14:11,519
install this project

00:14:08,560 --> 00:14:13,040
correctly and locally you install the

00:14:11,519 --> 00:14:15,839
correct version

00:14:13,040 --> 00:14:17,920
but because i know that python 3.8.5 and

00:14:15,839 --> 00:14:20,399
python 3.8.6

00:14:17,920 --> 00:14:21,920
are not incompatible with each other i'm

00:14:20,399 --> 00:14:25,120
just going to use a trick

00:14:21,920 --> 00:14:28,240
and going to change the

00:14:25,120 --> 00:14:29,839
pi project.2ml and specify that

00:14:28,240 --> 00:14:34,000
the required version of python is not

00:14:29,839 --> 00:14:36,240
python 3.8.6 but python 3.8.5

00:14:34,000 --> 00:14:39,360
i do that and i don't have them so let's

00:14:36,240 --> 00:14:45,839
install it using the same command

00:14:39,360 --> 00:14:45,839
so do i have installed vm

00:14:49,199 --> 00:14:56,320
and now i can go here

00:14:52,880 --> 00:14:59,360
and i can say that python 3.8.5

00:14:56,320 --> 00:15:02,399
is required rather than python 3.8.6 and

00:14:59,360 --> 00:15:04,480
now if i run poetry install again

00:15:02,399 --> 00:15:07,120
it will automatically create a virtual

00:15:04,480 --> 00:15:07,680
environment and install my dependencies

00:15:07,120 --> 00:15:09,680
there

00:15:07,680 --> 00:15:10,800
so what is a virtual environment so you

00:15:09,680 --> 00:15:13,440
may have heard it

00:15:10,800 --> 00:15:15,120
heard of it before but a virtual

00:15:13,440 --> 00:15:16,000
environment is a separate folder for

00:15:15,120 --> 00:15:19,199
each

00:15:16,000 --> 00:15:20,720
project which installs which source its

00:15:19,199 --> 00:15:22,800
dependencies separately

00:15:20,720 --> 00:15:24,959
so if you use pip to install the

00:15:22,800 --> 00:15:28,320
dependencies installed globally

00:15:24,959 --> 00:15:28,639
and it may conflict with other projects

00:15:28,320 --> 00:15:31,680
so

00:15:28,639 --> 00:15:33,360
one project may require uh request 3.2

00:15:31,680 --> 00:15:36,560
other project may require

00:15:33,360 --> 00:15:38,079
requests 3.10 so it's very difficult so

00:15:36,560 --> 00:15:40,160
that's why we

00:15:38,079 --> 00:15:41,839
use per project virtual environments and

00:15:40,160 --> 00:15:45,040
install the dependencies

00:15:41,839 --> 00:15:48,720
there and also it's important

00:15:45,040 --> 00:15:50,800
that the virtual environments

00:15:48,720 --> 00:15:52,160
are activated before we try to use them

00:15:50,800 --> 00:15:55,680
in a project because

00:15:52,160 --> 00:15:58,000
if you have installed dependencies in a

00:15:55,680 --> 00:15:58,959
separate folder it won't automatically

00:15:58,000 --> 00:16:02,000
be picked up

00:15:58,959 --> 00:16:04,959
by the project and thus throw an error

00:16:02,000 --> 00:16:06,079
so that's why virtual numbers need to be

00:16:04,959 --> 00:16:09,199
activated

00:16:06,079 --> 00:16:12,639
before they can be used so there's the

00:16:09,199 --> 00:16:14,800
command in poetry for that we'll see see

00:16:12,639 --> 00:16:17,519
that shortly that how to activate

00:16:14,800 --> 00:16:19,279
uh virtual environment without poetry

00:16:17,519 --> 00:16:21,759
creating a virtual environment will

00:16:19,279 --> 00:16:23,920
would mean a lot of manual work but with

00:16:21,759 --> 00:16:26,480
poetry it it becomes

00:16:23,920 --> 00:16:27,279
very simple so now the dependencies are

00:16:26,480 --> 00:16:29,920
installed

00:16:27,279 --> 00:16:31,440
let's see what the next instruction is

00:16:29,920 --> 00:16:34,720
and the next instruction is

00:16:31,440 --> 00:16:37,360
poetry shell so what does this do

00:16:34,720 --> 00:16:38,720
this activates our virtual environment

00:16:37,360 --> 00:16:41,600
and as you can see i have

00:16:38,720 --> 00:16:43,600
this virtual environment activated here

00:16:41,600 --> 00:16:47,040
this is automatically managed by

00:16:43,600 --> 00:16:49,519
poetry then the next command is

00:16:47,040 --> 00:16:50,079
pre-commit install so what does it do is

00:16:49,519 --> 00:16:52,480
that

00:16:50,079 --> 00:16:54,079
it automatically whenever you commit

00:16:52,480 --> 00:16:56,639
your changes to the project

00:16:54,079 --> 00:16:58,399
for creating a pull request it

00:16:56,639 --> 00:17:01,519
automatically formats the

00:16:58,399 --> 00:17:02,399
files that it sorts the import order it

00:17:01,519 --> 00:17:05,360
removes any

00:17:02,399 --> 00:17:06,240
unused imports so it helps maintain us

00:17:05,360 --> 00:17:08,480
and you

00:17:06,240 --> 00:17:09,679
doing the work automatically otherwise

00:17:08,480 --> 00:17:11,439
you would have to say that

00:17:09,679 --> 00:17:12,720
you know do this before we can review

00:17:11,439 --> 00:17:15,679
the project so

00:17:12,720 --> 00:17:16,480
uh i just installed pre-commits like

00:17:15,679 --> 00:17:19,839
this

00:17:16,480 --> 00:17:23,839
and then next instruction is

00:17:19,839 --> 00:17:25,919
to create the database for the project

00:17:23,839 --> 00:17:27,360
so for linux users we are going to

00:17:25,919 --> 00:17:30,640
create the user

00:17:27,360 --> 00:17:32,000
first for the project so i'm just going

00:17:30,640 --> 00:17:35,039
to copy this command i'm going

00:17:32,000 --> 00:17:38,799
to make myself the super user and

00:17:35,039 --> 00:17:40,320
i have to enter my use password for that

00:17:38,799 --> 00:17:44,320
and once i do this

00:17:40,320 --> 00:17:46,960
now i can run the post psql commands

00:17:44,320 --> 00:17:48,480
without sudo so first we were using

00:17:46,960 --> 00:17:50,160
suitable issue postgres

00:17:48,480 --> 00:17:51,919
to switch to the postgres user and

00:17:50,160 --> 00:17:52,640
running the commands now i don't have to

00:17:51,919 --> 00:17:55,840
do that

00:17:52,640 --> 00:17:57,039
i can just run this command so i'm going

00:17:55,840 --> 00:18:00,480
to create this

00:17:57,039 --> 00:18:02,240
database for the project and

00:18:00,480 --> 00:18:04,240
make it make myself the owner of the

00:18:02,240 --> 00:18:07,280
database and similarly

00:18:04,240 --> 00:18:11,039
again for the test database as well

00:18:07,280 --> 00:18:13,039
and there is another instruction

00:18:11,039 --> 00:18:14,960
written just below that about this is a

00:18:13,039 --> 00:18:16,480
peer peer method it's very easy it does

00:18:14,960 --> 00:18:18,559
not require pass for

00:18:16,480 --> 00:18:20,799
password for authentication and then

00:18:18,559 --> 00:18:23,520
there are other instructions below

00:18:20,799 --> 00:18:25,120
for mac users and using postgresql shell

00:18:23,520 --> 00:18:25,919
and things like that so if you want to

00:18:25,120 --> 00:18:28,080
do that

00:18:25,919 --> 00:18:29,760
you can use those instructions as well

00:18:28,080 --> 00:18:31,440
then the next part comes where we

00:18:29,760 --> 00:18:33,919
generate the configuration

00:18:31,440 --> 00:18:36,320
and let's say we generate the

00:18:33,919 --> 00:18:38,960
configuration

00:18:36,320 --> 00:18:40,000
we copy the dot energy dot example file

00:18:38,960 --> 00:18:42,799
in dot env

00:18:40,000 --> 00:18:43,120
and let's see what's in dot env file and

00:18:42,799 --> 00:18:45,280
what

00:18:43,120 --> 00:18:47,440
is it so but basically as you can see

00:18:45,280 --> 00:18:49,679
this database url in here

00:18:47,440 --> 00:18:51,440
there's a app config here they suppose

00:18:49,679 --> 00:18:53,440
this user flask app so this these are

00:18:51,440 --> 00:18:56,320
basically configuration of the server

00:18:53,440 --> 00:18:56,720
and these are environment variables in a

00:18:56,320 --> 00:18:58,720
file

00:18:56,720 --> 00:19:00,320
so you can also you know create

00:18:58,720 --> 00:19:03,039
environment variables

00:19:00,320 --> 00:19:04,320
uh and you know just export them and it

00:19:03,039 --> 00:19:06,640
will work as well but

00:19:04,320 --> 00:19:07,360
after you reboot the pc they will go

00:19:06,640 --> 00:19:09,760
away

00:19:07,360 --> 00:19:11,600
and it's not very easy to do that in a

00:19:09,760 --> 00:19:13,280
local project on servers we recommend

00:19:11,600 --> 00:19:15,120
using environment variables but

00:19:13,280 --> 00:19:16,880
dot env is an easy way to configure

00:19:15,120 --> 00:19:20,160
environment variables locally

00:19:16,880 --> 00:19:23,520
per project so that's what we do then

00:19:20,160 --> 00:19:25,200
we read the next instruction

00:19:23,520 --> 00:19:26,880
this is something that most people

00:19:25,200 --> 00:19:28,559
forget to do but it's

00:19:26,880 --> 00:19:30,080
very important so we need to create a

00:19:28,559 --> 00:19:32,799
secret key for the server

00:19:30,080 --> 00:19:33,360
so secret key is used for cryptographic

00:19:32,799 --> 00:19:36,880
users

00:19:33,360 --> 00:19:40,320
so whenever we encrypt a file or we

00:19:36,880 --> 00:19:42,400
sign the login token we use this

00:19:40,320 --> 00:19:44,240
secret key so if you do not send the

00:19:42,400 --> 00:19:45,360
secret key or you share the secret key

00:19:44,240 --> 00:19:48,000
with someone else

00:19:45,360 --> 00:19:48,480
someone else can log into your server

00:19:48,000 --> 00:19:50,960
with

00:19:48,480 --> 00:19:51,520
local data so never do that every

00:19:50,960 --> 00:19:54,320
project

00:19:51,520 --> 00:19:55,120
should have a secure and separate server

00:19:54,320 --> 00:19:57,600
key

00:19:55,120 --> 00:19:59,360
that's what prevents uh anyone from

00:19:57,600 --> 00:20:02,640
logging in into your

00:19:59,360 --> 00:20:04,240
server as an admin right so we run this

00:20:02,640 --> 00:20:06,960
command which is specified here to

00:20:04,240 --> 00:20:10,720
generating a random server key

00:20:06,960 --> 00:20:16,080
secret key and then we use it

00:20:10,720 --> 00:20:16,080
to write the secret key in dot enb

00:20:16,960 --> 00:20:24,559
so i come here

00:20:21,280 --> 00:20:27,039
secret key

00:20:24,559 --> 00:20:27,039
and then

00:20:28,159 --> 00:20:33,840
let's say and then

00:20:31,360 --> 00:20:35,600
we create the database tables so we run

00:20:33,840 --> 00:20:38,000
these two commands to create the actual

00:20:35,600 --> 00:20:40,960
database tables in our database

00:20:38,000 --> 00:20:44,559
so it will run all the migrations or

00:20:40,960 --> 00:20:44,559
create all the required tables

00:20:46,480 --> 00:20:50,480
and now it's asking me for my email so

00:20:48,880 --> 00:20:52,880
this is important that you enter your

00:20:50,480 --> 00:20:53,840
actual email where you can receive

00:20:52,880 --> 00:20:56,640
emails if you

00:20:53,840 --> 00:20:57,360
enter dummy uh email you may not receive

00:20:56,640 --> 00:20:59,840
the

00:20:57,360 --> 00:21:00,559
confirmation emails and everything so

00:20:59,840 --> 00:21:03,600
enter that

00:21:00,559 --> 00:21:04,320
now i enter a password you can enter any

00:21:03,600 --> 00:21:07,440
password

00:21:04,320 --> 00:21:11,600
i repeat that password and now

00:21:07,440 --> 00:21:14,159
it will create all the required tables

00:21:11,600 --> 00:21:15,039
the next thing we want to do is to stamp

00:21:14,159 --> 00:21:17,919
the db head

00:21:15,039 --> 00:21:20,480
to notify that we have migrated the

00:21:17,919 --> 00:21:20,480
database

00:21:24,720 --> 00:21:30,559
cool so now it's done the next thing

00:21:27,760 --> 00:21:31,760
we have some notice that if you have

00:21:30,559 --> 00:21:34,640
used

00:21:31,760 --> 00:21:36,640
any other username and password for

00:21:34,640 --> 00:21:39,760
database you need to change the

00:21:36,640 --> 00:21:43,039
database url in v right then

00:21:39,760 --> 00:21:45,919
the next part is to run the application

00:21:43,039 --> 00:21:47,679
it's this instruction for mac os there's

00:21:45,919 --> 00:21:49,200
instruction for salary but if you just

00:21:47,679 --> 00:21:53,440
want to run the server

00:21:49,200 --> 00:21:59,840
you can do it just like that

00:21:53,440 --> 00:21:59,840
so i can run the server

00:22:00,799 --> 00:22:07,600
now it's running on localhost 5000

00:22:04,480 --> 00:22:08,720
so to verify that i go here in the next

00:22:07,600 --> 00:22:13,480
terminal

00:22:08,720 --> 00:22:18,480
i run call localhost

00:22:13,480 --> 00:22:21,760
5000 and i have a lot of information

00:22:18,480 --> 00:22:22,159
but this is not how we want to access

00:22:21,760 --> 00:22:25,360
the

00:22:22,159 --> 00:22:28,559
api so for accessing the api we have

00:22:25,360 --> 00:22:30,080
slash v1 and then api name so if i want

00:22:28,559 --> 00:22:32,159
to access events

00:22:30,080 --> 00:22:34,480
i run this and now as you can see i

00:22:32,159 --> 00:22:37,200
don't have any events because this is

00:22:34,480 --> 00:22:39,039
a new instance of the server but the

00:22:37,200 --> 00:22:42,080
hello world of the api is settings

00:22:39,039 --> 00:22:43,440
so i can see the settings in this

00:22:42,080 --> 00:22:46,960
particular

00:22:43,440 --> 00:22:55,840
you know server and also let's

00:22:46,960 --> 00:22:55,840
let me do this install jquery

00:22:57,120 --> 00:23:00,880
this is another tip that if you're

00:22:58,480 --> 00:23:03,600
dealing with json you can

00:23:00,880 --> 00:23:04,640
install jq and it will automatically

00:23:03,600 --> 00:23:08,080
format

00:23:04,640 --> 00:23:11,280
the json uh into very you know colorful

00:23:08,080 --> 00:23:13,840
and easily uh visible uh

00:23:11,280 --> 00:23:15,039
format in the terminal and it can also

00:23:13,840 --> 00:23:18,000
be used to

00:23:15,039 --> 00:23:18,880
pass and filter json so it's a very good

00:23:18,000 --> 00:23:21,280
utility

00:23:18,880 --> 00:23:22,159
so as you can see these are the settings

00:23:21,280 --> 00:23:24,880
and

00:23:22,159 --> 00:23:25,280
app name open event and every other

00:23:24,880 --> 00:23:27,840
thing

00:23:25,280 --> 00:23:28,720
are just you know null or false they're

00:23:27,840 --> 00:23:31,679
not initialized

00:23:28,720 --> 00:23:32,320
much so this as you can see now the

00:23:31,679 --> 00:23:35,440
server

00:23:32,320 --> 00:23:38,559
has uh set up now i also

00:23:35,440 --> 00:23:38,960
show you some other stuff how to um you

00:23:38,559 --> 00:23:40,720
know

00:23:38,960 --> 00:23:42,320
see the server in the browser but before

00:23:40,720 --> 00:23:46,320
that i need to

00:23:42,320 --> 00:23:49,440
make this on

00:23:46,320 --> 00:23:52,960
run on 0.0.0.0 because

00:23:49,440 --> 00:23:58,400
i'm running it in inside docker

00:23:52,960 --> 00:23:58,400
and localhost doesn't work that way

00:24:02,840 --> 00:24:05,840
so

00:24:16,840 --> 00:24:19,840
so

00:24:25,919 --> 00:24:33,039
okay so now it's running on the

00:24:29,760 --> 00:24:37,600
all access port so if i go here

00:24:33,039 --> 00:24:40,240
and access localhost 5000

00:24:37,600 --> 00:24:42,000
then now it's opening up and you can see

00:24:40,240 --> 00:24:43,919
the documentation in a bit

00:24:42,000 --> 00:24:45,520
it's it's quite large so it takes some

00:24:43,919 --> 00:24:48,880
time so there's

00:24:45,520 --> 00:24:52,080
how to log in and uh how to create a

00:24:48,880 --> 00:24:55,279
new user all the event uh

00:24:52,080 --> 00:24:56,799
information placeholder mic location

00:24:55,279 --> 00:24:58,840
sessions and speakers and

00:24:56,799 --> 00:25:00,159
something like that similarly as i you

00:24:58,840 --> 00:25:03,200
saw uh

00:25:00,159 --> 00:25:07,120
as you saw previously i can access

00:25:03,200 --> 00:25:09,919
settings like this and

00:25:07,120 --> 00:25:11,039
uh there's another little thing which is

00:25:09,919 --> 00:25:14,960
very cool we

00:25:11,039 --> 00:25:17,120
do not have a lot of uh

00:25:14,960 --> 00:25:18,799
graphql support but we have basic

00:25:17,120 --> 00:25:20,320
graphql support for

00:25:18,799 --> 00:25:23,440
things like settings so i can write

00:25:20,320 --> 00:25:26,960
query settings as you can see there

00:25:23,440 --> 00:25:29,520
this is autocompleting and i can query

00:25:26,960 --> 00:25:31,360
it like this so that's cool as well so

00:25:29,520 --> 00:25:34,799
as you can see now the server is set up

00:25:31,360 --> 00:25:38,000
and everything is working as expected so

00:25:34,799 --> 00:25:39,600
uh i'll take a break here and ask uh if

00:25:38,000 --> 00:25:41,039
if you have any questions do you want

00:25:39,600 --> 00:25:57,840
anything answered if

00:25:41,039 --> 00:25:57,840
are you stuck at any point

00:25:59,120 --> 00:26:02,240
so alvin were you able to solve your

00:26:01,679 --> 00:26:05,760
issue

00:26:02,240 --> 00:26:11,840
um or do you still have this

00:26:05,760 --> 00:26:11,840
python not found error

00:26:27,760 --> 00:26:30,799
you can also answer uh in the chat and

00:26:30,320 --> 00:26:34,400
then

00:26:30,799 --> 00:26:37,840
uh if anyone okay

00:26:34,400 --> 00:26:38,880
yeah so uh basically uh if anyone has

00:26:37,840 --> 00:26:41,600
any other question

00:26:38,880 --> 00:26:42,720
please uh write it in the chat pratik

00:26:41,600 --> 00:26:45,760
will be answering that

00:26:42,720 --> 00:26:48,960
or in the next break i will be so

00:26:45,760 --> 00:26:50,720
uh uh alvin is asking that is this

00:26:48,960 --> 00:26:52,080
instruction no is this the instruction

00:26:50,720 --> 00:26:53,679
for docker

00:26:52,080 --> 00:26:56,080
that's for deployment but not for

00:26:53,679 --> 00:27:00,240
development so you have to

00:26:56,080 --> 00:27:04,400
follow local installation instructions

00:27:00,240 --> 00:27:04,400
like let me share the screen again

00:27:05,360 --> 00:27:09,200
here this local.md these are the

00:27:08,320 --> 00:27:13,279
instructions

00:27:09,200 --> 00:27:14,400
and uh if you have another python

00:27:13,279 --> 00:27:17,120
version

00:27:14,400 --> 00:27:18,640
and uh the app version does not match

00:27:17,120 --> 00:27:19,520
python that you wanted you can use pi

00:27:18,640 --> 00:27:22,159
env

00:27:19,520 --> 00:27:24,640
so you can try that out and uh if you

00:27:22,159 --> 00:27:27,679
face any problem you can let me know

00:27:24,640 --> 00:27:30,399
uh as well so then i think

00:27:27,679 --> 00:27:31,679
uh if does anyone does not have any

00:27:30,399 --> 00:27:35,200
other question then

00:27:31,679 --> 00:27:38,240
let's move to the front end so

00:27:35,200 --> 00:27:39,200
front end is the uh well the ui part

00:27:38,240 --> 00:27:42,000
whatever you see

00:27:39,200 --> 00:27:42,399
on inventory.com is actually frontend uh

00:27:42,000 --> 00:27:45,440
and

00:27:42,399 --> 00:27:48,399
the backend is all the logic and the api

00:27:45,440 --> 00:27:49,200
and models and everything so validation

00:27:48,399 --> 00:27:50,960
and

00:27:49,200 --> 00:27:52,640
checking everything is working fine

00:27:50,960 --> 00:27:56,080
every logic is on

00:27:52,640 --> 00:27:56,960
server so now i go to the front-end

00:27:56,080 --> 00:28:00,840
repository

00:27:56,960 --> 00:28:02,159
then there are local installation

00:28:00,840 --> 00:28:04,960
instructions

00:28:02,159 --> 00:28:06,799
so now as you can see here uh i need

00:28:04,960 --> 00:28:10,480
these dependencies

00:28:06,799 --> 00:28:14,080
git which is already installed node.js14

00:28:10,480 --> 00:28:15,840
so if i go here it will show me

00:28:14,080 --> 00:28:17,600
that how i can install it you can

00:28:15,840 --> 00:28:21,279
download it

00:28:17,600 --> 00:28:24,480
but i am more of a command line person

00:28:21,279 --> 00:28:26,559
so i'll install it using command line

00:28:24,480 --> 00:28:28,080
so let's go to the next terminal we'll

00:28:26,559 --> 00:28:31,760
let server

00:28:28,080 --> 00:28:34,960
be open in one and let's uh

00:28:31,760 --> 00:28:38,240
do the front end part in this uh

00:28:34,960 --> 00:28:41,600
terminal so let me clear the terminal

00:28:38,240 --> 00:28:42,080
and now uh let's install node so as i

00:28:41,600 --> 00:28:44,799
said

00:28:42,080 --> 00:28:46,960
let's uh whenever we want to install

00:28:44,799 --> 00:28:49,440
something we write sudo apt install

00:28:46,960 --> 00:28:50,320
and then the dependency so there's

00:28:49,440 --> 00:28:53,120
nothing called

00:28:50,320 --> 00:28:54,080
node so if you search for a bit you'll

00:28:53,120 --> 00:28:56,640
get that

00:28:54,080 --> 00:28:57,840
the package is called node.js and linux

00:28:56,640 --> 00:29:00,480
so i'll just install it

00:28:57,840 --> 00:29:00,480
using this

00:29:01,679 --> 00:29:05,760
and now it's installed but now if i had

00:29:04,880 --> 00:29:10,159
a node

00:29:05,760 --> 00:29:13,039
version it's 10.19.0 but i need 14

00:29:10,159 --> 00:29:13,919
and we exactly need 14 because as i said

00:29:13,039 --> 00:29:15,600
we need

00:29:13,919 --> 00:29:17,200
the version specified in the project

00:29:15,600 --> 00:29:18,159
because that is tested in the project

00:29:17,200 --> 00:29:21,200
not others

00:29:18,159 --> 00:29:22,000
so how do i install node 14. so one way

00:29:21,200 --> 00:29:25,760
to do that

00:29:22,000 --> 00:29:28,880
is use nvm so like pi env and vm

00:29:25,760 --> 00:29:31,279
is node version manager it allows you

00:29:28,880 --> 00:29:32,799
to install multiple node versions

00:29:31,279 --> 00:29:38,000
simultaneously

00:29:32,799 --> 00:29:38,000
so i just write nvm

00:29:38,960 --> 00:29:43,840
and there it is

00:29:45,919 --> 00:29:52,159
so if i go here

00:29:48,960 --> 00:29:56,559
this is how you install

00:29:52,159 --> 00:29:56,559
sorry so i copy this

00:29:57,279 --> 00:30:00,000
and i paste

00:30:02,480 --> 00:30:06,960
now it's done again it's saying that uh

00:30:05,120 --> 00:30:10,559
it is already added

00:30:06,960 --> 00:30:13,279
the required changes for nvm to be used

00:30:10,559 --> 00:30:15,440
in the shell and you need to close and

00:30:13,279 --> 00:30:17,520
reopen your terminal to use it

00:30:15,440 --> 00:30:19,200
but if you want to use it in the same

00:30:17,520 --> 00:30:22,559
terminal as this one

00:30:19,200 --> 00:30:24,799
then you need to copy this thing and

00:30:22,559 --> 00:30:26,000
run it so i'm going to do that again

00:30:24,799 --> 00:30:28,159
this was uh

00:30:26,000 --> 00:30:30,640
not installed using sudo and thus we

00:30:28,159 --> 00:30:33,360
need to add it manually to path

00:30:30,640 --> 00:30:36,320
so so now i've done this then this so if

00:30:33,360 --> 00:30:37,440
i run nvm i have this instruction of how

00:30:36,320 --> 00:30:40,720
to do things

00:30:37,440 --> 00:30:43,919
so i want to use uh i want to install

00:30:40,720 --> 00:30:47,200
uh 14 version of node so i'll just say

00:30:43,919 --> 00:30:50,039
14 and i have searched that what version

00:30:47,200 --> 00:30:51,360
is the used with the project and it's

00:30:50,039 --> 00:30:53,919
14.15.0

00:30:51,360 --> 00:30:54,799
you can use any version latest most

00:30:53,919 --> 00:30:57,840
preferably

00:30:54,799 --> 00:30:59,440
preferably latest version is

00:30:57,840 --> 00:31:01,200
still in the 14th release so you can't

00:30:59,440 --> 00:31:03,679
use 15 point something

00:31:01,200 --> 00:31:05,039
but 14 point something is good so i am

00:31:03,679 --> 00:31:10,320
going to install

00:31:05,039 --> 00:31:10,320
uh node 14.15.0

00:31:15,360 --> 00:31:21,279
so now if i run node version

00:31:18,480 --> 00:31:23,120
you'll see that it has automatically

00:31:21,279 --> 00:31:24,799
changed it to 14.15. if you have

00:31:23,120 --> 00:31:25,440
multiple node versions it may not do

00:31:24,799 --> 00:31:27,440
that

00:31:25,440 --> 00:31:29,200
so you will need to use this command

00:31:27,440 --> 00:31:32,960
nvme as default

00:31:29,200 --> 00:31:35,600
and then the version like 14.15.0

00:31:32,960 --> 00:31:36,399
whenever we install node yarn is

00:31:35,600 --> 00:31:40,080
automatically

00:31:36,399 --> 00:31:43,360
sorry npm is automatically installed but

00:31:40,080 --> 00:31:45,360
we we want yarn to be installed so

00:31:43,360 --> 00:31:46,880
now we have this installation

00:31:45,360 --> 00:31:49,200
instruction

00:31:46,880 --> 00:31:50,320
of how to install yarn and just copy it

00:31:49,200 --> 00:31:53,360
again

00:31:50,320 --> 00:31:53,360
and run it

00:31:54,960 --> 00:31:59,039
and now it's installed as well then we

00:31:57,919 --> 00:32:01,919
need to

00:31:59,039 --> 00:32:03,039
get clone the repository and again you

00:32:01,919 --> 00:32:05,120
need to fork it

00:32:03,039 --> 00:32:06,559
if you want to develop it and clone your

00:32:05,120 --> 00:32:08,880
own repository

00:32:06,559 --> 00:32:09,600
but as i'm just showing the instructions

00:32:08,880 --> 00:32:15,840
here

00:32:09,600 --> 00:32:15,840
i'll just clone the original repository

00:32:26,840 --> 00:32:29,840
so

00:32:42,720 --> 00:32:47,200
okay now it is cloned so i'll go to open

00:32:45,600 --> 00:32:50,640
event front end

00:32:47,200 --> 00:32:53,919
and then the next instruction is

00:32:50,640 --> 00:32:56,159
that we run yarn

00:32:53,919 --> 00:32:58,559
so once i turn you on it will be

00:32:56,159 --> 00:33:00,960
installing all the dependencies

00:32:58,559 --> 00:33:01,679
so it will take some time so does anyone

00:33:00,960 --> 00:33:06,159
have any

00:33:01,679 --> 00:33:06,159
question any doubt do they want to ask

00:33:08,840 --> 00:33:11,840
anything

00:33:25,530 --> 00:33:28,650
[Music]

00:33:40,159 --> 00:33:44,399
and also like if uh you realize that if

00:33:43,200 --> 00:33:47,279
you run python

00:33:44,399 --> 00:33:47,679
version and it's not found then you can

00:33:47,279 --> 00:33:51,120
also

00:33:47,679 --> 00:33:54,640
try python 3 version so that works

00:33:51,120 --> 00:33:55,679
as well um front-end installation is a

00:33:54,640 --> 00:33:58,720
little bit

00:33:55,679 --> 00:34:02,720
uh much more easier

00:33:58,720 --> 00:34:06,240
than server but if someone is joining

00:34:02,720 --> 00:34:07,919
again in this workshop from the previous

00:34:06,240 --> 00:34:11,359
time you would have noticed that

00:34:07,919 --> 00:34:13,440
we have changed these commands

00:34:11,359 --> 00:34:14,480
in the server to require less

00:34:13,440 --> 00:34:19,200
installations

00:34:14,480 --> 00:34:19,200
less extra installations so we

00:34:19,280 --> 00:34:23,440
we installed lip gyro by default let

00:34:21,679 --> 00:34:24,079
pango by default so you don't have to do

00:34:23,440 --> 00:34:27,440
that

00:34:24,079 --> 00:34:29,919
so uh just the curl and get

00:34:27,440 --> 00:34:30,879
these are the two requirements currently

00:34:29,919 --> 00:34:35,200
that

00:34:30,879 --> 00:34:39,119
we assume that you have by default

00:34:35,200 --> 00:34:42,399
now the dependencies are installed

00:34:39,119 --> 00:34:45,679
the then the next step we see is

00:34:42,399 --> 00:34:48,480
that we want to copy dot emu dot example

00:34:45,679 --> 00:34:50,399
in dot env so the same as server project

00:34:48,480 --> 00:34:52,560
we have dot tm file here as well

00:34:50,399 --> 00:34:54,000
now let's see so we have configuration

00:34:52,560 --> 00:34:56,800
options of map box

00:34:54,000 --> 00:34:57,760
and api host and other stuff the

00:34:56,800 --> 00:35:00,560
important part

00:34:57,760 --> 00:35:01,520
of the project the configuration of the

00:35:00,560 --> 00:35:04,880
project is

00:35:01,520 --> 00:35:09,280
api host so we will see in a bit

00:35:04,880 --> 00:35:12,560
what it means to have the api host here

00:35:09,280 --> 00:35:16,480
so then let's go

00:35:12,560 --> 00:35:20,000
check the next instruction and it is

00:35:16,480 --> 00:35:20,000
to run this command

00:35:26,560 --> 00:35:30,720
now it throws in a get text not found so

00:35:29,599 --> 00:35:33,599
we need to install

00:35:30,720 --> 00:35:34,640
get text this is the problem with

00:35:33,599 --> 00:35:37,040
windows as well that

00:35:34,640 --> 00:35:37,760
people try to install this project in

00:35:37,040 --> 00:35:40,079
windows and

00:35:37,760 --> 00:35:43,680
windows does not have get text it's not

00:35:40,079 --> 00:35:47,599
as easy as sudo apt install

00:35:43,680 --> 00:35:49,680
get text on windows i don't know if the

00:35:47,599 --> 00:35:50,640
package managers like chocolatey on

00:35:49,680 --> 00:35:53,839
windows

00:35:50,640 --> 00:35:55,920
work with get text or not but i tried

00:35:53,839 --> 00:35:57,200
installing it for a couple of people and

00:35:55,920 --> 00:35:59,920
it was very difficult

00:35:57,200 --> 00:36:00,640
so i just recommend that you use wsl

00:35:59,920 --> 00:36:02,560
instead

00:36:00,640 --> 00:36:06,320
so i've installed get text now i run

00:36:02,560 --> 00:36:06,320
this command again and now it should

00:36:10,839 --> 00:36:13,839
work

00:36:20,079 --> 00:36:25,359
cool so now let's move on to the next

00:36:22,560 --> 00:36:27,280
construction there's some notes about

00:36:25,359 --> 00:36:29,599
how to install get text and what's the

00:36:27,280 --> 00:36:32,640
fast boot and things like that then

00:36:29,599 --> 00:36:35,760
after this we

00:36:32,640 --> 00:36:35,760
run yarn start

00:36:36,320 --> 00:36:40,400
so it takes a bit of time and it's in

00:36:38,640 --> 00:36:44,160
wall process

00:36:40,400 --> 00:36:47,680
it takes a huge amount of memory as well

00:36:44,160 --> 00:36:50,720
so babe with me a little bit

00:36:47,680 --> 00:36:55,839
till then again if you have any question

00:36:50,720 --> 00:36:55,839
you can ask now

00:37:04,720 --> 00:37:09,119
if you are facing any issues in the

00:37:08,160 --> 00:37:12,320
installation

00:37:09,119 --> 00:37:13,440
or anything then also you can ask aribi

00:37:12,320 --> 00:37:16,320
is very welcoming

00:37:13,440 --> 00:37:17,839
and need to solve the doubts and with

00:37:16,320 --> 00:37:19,440
this pratik is also

00:37:17,839 --> 00:37:23,839
parallelly solving the routes in the

00:37:19,440 --> 00:37:23,839
comment section

00:37:24,960 --> 00:37:31,040
definitely takes time though 30 minutes

00:37:28,160 --> 00:37:31,040
is a bit too much

00:37:35,520 --> 00:37:39,040
uh as you can see there's some

00:37:37,440 --> 00:37:42,640
duplication warnings and

00:37:39,040 --> 00:37:45,520
uh other issues errors uh in the

00:37:42,640 --> 00:37:46,720
the starting process unfortunately they

00:37:45,520 --> 00:37:49,760
are not part of

00:37:46,720 --> 00:37:50,960
our code so we can't do it can't do

00:37:49,760 --> 00:38:05,839
anything about it

00:37:50,960 --> 00:38:05,839
so yeah

00:38:40,720 --> 00:38:50,000
okay so now the project has started on

00:38:44,839 --> 00:38:50,000
this port so let's go here and see

00:38:52,560 --> 00:38:57,599
as you can see there's some loading

00:38:55,760 --> 00:38:59,359
issues because it requires a lot of

00:38:57,599 --> 00:39:02,800
memory and even if i have

00:38:59,359 --> 00:39:07,599
16 gb of memory it's quite filled up

00:39:02,800 --> 00:39:07,599
but anyway the project is loading up

00:39:09,440 --> 00:39:14,560
and you can see that it is similar to

00:39:12,480 --> 00:39:16,560
evented.com but

00:39:14,560 --> 00:39:18,640
like there's no upcoming events and

00:39:16,560 --> 00:39:21,680
there's no faucet summit so

00:39:18,640 --> 00:39:29,839
why is that so basically this is because

00:39:21,680 --> 00:39:29,839
we have dot env so let me show you here

00:39:41,200 --> 00:39:44,880
so in any we have written api host equal

00:39:44,079 --> 00:39:48,000
to

00:39:44,880 --> 00:39:51,040
openmn docu.for station.org right

00:39:48,000 --> 00:39:53,119
so what we can do instead is that we can

00:39:51,040 --> 00:39:56,240
write

00:39:53,119 --> 00:39:59,599
in here api

00:39:56,240 --> 00:40:03,040
host equals https

00:39:59,599 --> 00:40:06,079
api dot event ea

00:40:03,040 --> 00:40:08,240
dot com

00:40:06,079 --> 00:40:10,240
right and then we have to obviously

00:40:08,240 --> 00:40:13,680
comment this out

00:40:10,240 --> 00:40:16,960
and then if i run uh if i

00:40:13,680 --> 00:40:19,359
i i have to re start the the

00:40:16,960 --> 00:40:20,160
uh start command again and take some

00:40:19,359 --> 00:40:21,920
time

00:40:20,160 --> 00:40:24,160
so i'm not going to do that but if i do

00:40:21,920 --> 00:40:28,079
that then you will see

00:40:24,160 --> 00:40:30,319
uh the faucets submit and everything

00:40:28,079 --> 00:40:31,680
everything that's present on actual

00:40:30,319 --> 00:40:34,400
limited.com

00:40:31,680 --> 00:40:35,760
locally as well and then obviously

00:40:34,400 --> 00:40:39,520
there's an option

00:40:35,760 --> 00:40:43,200
for api host to be equal to

00:40:39,520 --> 00:40:46,400
your local server so

00:40:43,200 --> 00:40:47,520
localhost 5000. so we are going to do

00:40:46,400 --> 00:40:50,880
that so

00:40:47,520 --> 00:40:53,599
let's rerun the yarnstart command

00:40:50,880 --> 00:40:53,920
unfortunately there's no easy way to uh

00:40:53,599 --> 00:40:57,040
for

00:40:53,920 --> 00:41:00,319
for it to take up the new api host um

00:40:57,040 --> 00:41:05,040
you know without running it again

00:41:00,319 --> 00:41:08,160
and then it takes a little bit less time

00:41:05,040 --> 00:41:09,440
then the cold start of beyond start but

00:41:08,160 --> 00:41:12,560
still

00:41:09,440 --> 00:41:16,400
it is somewhat slower so

00:41:12,560 --> 00:41:20,000
uh this is how you configure the api

00:41:16,400 --> 00:41:20,400
host in in the project so now if you can

00:41:20,000 --> 00:41:35,599
see

00:41:20,400 --> 00:41:39,040
the api host is localhost 5000.

00:41:35,599 --> 00:41:40,800
so to for for you to see the change

00:41:39,040 --> 00:41:42,880
you can see that we have event here

00:41:40,800 --> 00:41:43,359
written here now and after the project

00:41:42,880 --> 00:41:49,839
builds

00:41:43,359 --> 00:41:49,839
uh you will notice a change here as well

00:42:14,839 --> 00:42:17,839
um

00:42:23,599 --> 00:42:30,560
now the project is built and

00:42:27,119 --> 00:42:33,599
the site has reload automatically

00:42:30,560 --> 00:42:35,839
and now you see this open eventually so

00:42:33,599 --> 00:42:38,640
event is not written anymore because by

00:42:35,839 --> 00:42:40,560
default we name the application

00:42:38,640 --> 00:42:41,760
in server as open event so i'm going to

00:42:40,560 --> 00:42:45,359
login

00:42:41,760 --> 00:42:48,319
and i'm going to use the

00:42:45,359 --> 00:42:49,280
email i registered when i was setting up

00:42:48,319 --> 00:42:50,960
the server

00:42:49,280 --> 00:42:52,560
so that i don't have to create a user

00:42:50,960 --> 00:42:55,680
again you can

00:42:52,560 --> 00:42:59,359
create a new user for that as well but

00:42:55,680 --> 00:43:01,119
i log in here and now

00:42:59,359 --> 00:43:03,920
what i can do is i can go to admin

00:43:01,119 --> 00:43:06,000
section because this is my local server

00:43:03,920 --> 00:43:07,599
as you can see there's no session no

00:43:06,000 --> 00:43:10,640
events and everything

00:43:07,599 --> 00:43:11,760
now if i go to settings section and i

00:43:10,640 --> 00:43:14,160
change the app name

00:43:11,760 --> 00:43:16,079
so for example let's say you are

00:43:14,160 --> 00:43:20,079
creating a college fixed

00:43:16,079 --> 00:43:20,079
like hack fest

00:43:20,720 --> 00:43:27,280
2.0 you can change the app name

00:43:24,000 --> 00:43:29,040
and you can add the api url localhost

00:43:27,280 --> 00:43:31,599
5000 and everything

00:43:29,040 --> 00:43:32,960
you can configure google capture and

00:43:31,599 --> 00:43:36,160
mail settings for

00:43:32,960 --> 00:43:37,599
set uh setting rocket chat that you also

00:43:36,160 --> 00:43:42,319
use is currently

00:43:37,599 --> 00:43:45,839
so tagline have fun

00:43:42,319 --> 00:43:47,760
and the api url is localhost 5000. this

00:43:45,839 --> 00:43:50,400
is obviously temporary

00:43:47,760 --> 00:43:52,960
if you deploy it you need to give it an

00:43:50,400 --> 00:43:54,000
actual url like api.eventual.com and

00:43:52,960 --> 00:43:56,720
things like that

00:43:54,000 --> 00:43:58,160
i'm going to disable email for now and

00:43:56,720 --> 00:44:00,400
click save

00:43:58,160 --> 00:44:00,400
this

00:44:01,200 --> 00:44:08,160
okay so from email let's say

00:44:04,560 --> 00:44:10,960
this and the front-end url is

00:44:08,160 --> 00:44:10,960
localhost

00:44:11,880 --> 00:44:18,319
00:44:14,640 --> 00:44:23,020
save and then

00:44:18,319 --> 00:44:26,199
i go here and reload

00:44:23,020 --> 00:44:26,199
[Music]

00:44:27,680 --> 00:44:31,280
okay so basically what happens is that

00:44:29,760 --> 00:44:34,480
settings is cached

00:44:31,280 --> 00:44:38,800
so let me go here and

00:44:34,480 --> 00:44:41,920
remove the cache of settings and

00:44:38,800 --> 00:44:41,920
reload the page

00:44:42,480 --> 00:44:46,640
and there you go access 2.0 and thus you

00:44:45,839 --> 00:44:49,359
can

00:44:46,640 --> 00:44:50,560
create events and things like that

00:44:49,359 --> 00:44:52,000
everything that you can do on

00:44:50,560 --> 00:44:54,560
umented.com

00:44:52,000 --> 00:44:55,760
or explore the other admin sessions

00:44:54,560 --> 00:44:59,040
settings because

00:44:55,760 --> 00:45:01,760
uh on eventu.com you can be an organizer

00:44:59,040 --> 00:45:03,280
uh so you can already access that but

00:45:01,760 --> 00:45:05,920
you cannot be an admin

00:45:03,280 --> 00:45:08,079
so if you need to debug anything in the

00:45:05,920 --> 00:45:10,560
admin section add any feature

00:45:08,079 --> 00:45:11,359
you need to deploy your own server

00:45:10,560 --> 00:45:14,480
locally

00:45:11,359 --> 00:45:15,200
so this is basically how you do how you

00:45:14,480 --> 00:45:18,240
deploy

00:45:15,200 --> 00:45:21,040
server how you deploy front-end and

00:45:18,240 --> 00:45:21,520
also how you link server and front-end

00:45:21,040 --> 00:45:23,920
so

00:45:21,520 --> 00:45:25,839
this is the kind of workshop part we

00:45:23,920 --> 00:45:28,880
will be discussing something more

00:45:25,839 --> 00:45:30,000
uh but uh basically till now do you have

00:45:28,880 --> 00:45:32,400
any questions

00:45:30,000 --> 00:45:34,319
are you stuck anywhere do you want

00:45:32,400 --> 00:45:35,280
something specific to see what would you

00:45:34,319 --> 00:45:47,839
like to do

00:45:35,280 --> 00:45:47,839
for the rest of the workshop

00:45:56,240 --> 00:45:59,440
so leslie says

00:45:57,740 --> 00:46:01,839
[Music]

00:45:59,440 --> 00:46:03,359
i tried to open event server last night

00:46:01,839 --> 00:46:04,880
in the final step the command today and

00:46:03,359 --> 00:46:07,760
salary and start app

00:46:04,880 --> 00:46:08,880
did not work but the unicorn one could

00:46:07,760 --> 00:46:10,480
start the server right

00:46:08,880 --> 00:46:12,000
silly could not start and return to

00:46:10,480 --> 00:46:15,599
command line correctly

00:46:12,000 --> 00:46:19,280
okay so uh that's a good um you know

00:46:15,599 --> 00:46:20,400
uh point to do as well let's see how to

00:46:19,280 --> 00:46:23,040
run salary

00:46:20,400 --> 00:46:24,480
so for here the salary command says that

00:46:23,040 --> 00:46:28,640
this is how you

00:46:24,480 --> 00:46:31,280
run it so let's see what happens

00:46:28,640 --> 00:46:32,240
i go here i'll open i've opened a new

00:46:31,280 --> 00:46:36,319
terminal

00:46:32,240 --> 00:46:40,839
i'll go to the server section

00:46:36,319 --> 00:46:44,400
server repository let me

00:46:40,839 --> 00:46:46,720
yeah again i have to run poetry shell so

00:46:44,400 --> 00:46:47,630
i don't have to run poetry install again

00:46:46,720 --> 00:46:50,709
and again

00:46:47,630 --> 00:46:50,709
[Music]

00:46:54,960 --> 00:47:01,520
haven't seen uh screen oh sorry

00:46:58,160 --> 00:47:01,520
sorry thank you

00:47:03,359 --> 00:47:11,839
yeah so

00:47:06,480 --> 00:47:11,839
uh uh can you see it now

00:47:12,800 --> 00:47:18,720
yeah okay so uh

00:47:16,160 --> 00:47:20,240
as you can see i am in my open event

00:47:18,720 --> 00:47:23,200
server section

00:47:20,240 --> 00:47:24,559
and this uh i run poetry shell you don't

00:47:23,200 --> 00:47:26,640
have to run

00:47:24,559 --> 00:47:28,000
poetry install again and again because

00:47:26,640 --> 00:47:30,160
once it's installed

00:47:28,000 --> 00:47:32,240
the dependencies are installed but when

00:47:30,160 --> 00:47:32,960
if there are changes in dependencies on

00:47:32,240 --> 00:47:35,200
server

00:47:32,960 --> 00:47:36,559
and you get no module found error then

00:47:35,200 --> 00:47:39,040
you have to run

00:47:36,559 --> 00:47:40,319
a installed but whenever you want to

00:47:39,040 --> 00:47:41,599
work on the project you have to run

00:47:40,319 --> 00:47:44,400
poetry

00:47:41,599 --> 00:47:46,160
uh the indicator should be that if you

00:47:44,400 --> 00:47:48,559
do not have poetry shell

00:47:46,160 --> 00:47:50,240
poetry shell active then you won't see

00:47:48,559 --> 00:47:52,640
this thing here and

00:47:50,240 --> 00:47:53,920
you may not have access to the

00:47:52,640 --> 00:47:57,200
dependencies so

00:47:53,920 --> 00:48:00,400
let's see we had this command

00:47:57,200 --> 00:48:07,839
on how to run salary uh

00:48:00,400 --> 00:48:07,839
let's copy it and run it

00:48:10,160 --> 00:48:16,559
so there's this error for redis

00:48:13,680 --> 00:48:18,319
so as we had postgres server we have

00:48:16,559 --> 00:48:22,800
ready server as well

00:48:18,319 --> 00:48:22,800
and let's start

00:48:23,200 --> 00:48:29,280
this as well so sudo service

00:48:26,240 --> 00:48:29,280
ready to start

00:48:29,440 --> 00:48:36,720
ready server start

00:48:33,520 --> 00:48:40,400
yeah now i'll run this command again so

00:48:36,720 --> 00:48:43,520
for salary we want this to be working

00:48:40,400 --> 00:48:47,359
so if you found get this error you can

00:48:43,520 --> 00:48:48,000
if you get this error cannot connect to

00:48:47,359 --> 00:48:49,680
redis

00:48:48,000 --> 00:48:51,040
that means that the radius server is not

00:48:49,680 --> 00:48:54,240
running and

00:48:51,040 --> 00:48:55,440
it's good thing that we um we can see

00:48:54,240 --> 00:48:57,920
the uh

00:48:55,440 --> 00:49:00,319
errors up front without the assumption

00:48:57,920 --> 00:49:02,880
that everything is working properly this

00:49:00,319 --> 00:49:03,680
error also happens to a lot of people so

00:49:02,880 --> 00:49:05,280
if you

00:49:03,680 --> 00:49:06,800
get this error you just transfer the

00:49:05,280 --> 00:49:09,200
service redis

00:49:06,800 --> 00:49:10,960
dash server start and it should start

00:49:09,200 --> 00:49:14,240
now when i run it

00:49:10,960 --> 00:49:16,800
then i get this message that salary

00:49:14,240 --> 00:49:17,920
this and that silly tasks are like there

00:49:16,800 --> 00:49:19,920
are some warnings

00:49:17,920 --> 00:49:21,440
unfortunately again these are

00:49:19,920 --> 00:49:23,280
third-party

00:49:21,440 --> 00:49:24,480
warnings so we cannot do anything about

00:49:23,280 --> 00:49:27,040
it but this

00:49:24,480 --> 00:49:28,640
is basically what you should see now it

00:49:27,040 --> 00:49:31,680
will not return

00:49:28,640 --> 00:49:34,960
to the uh you know terminal so

00:49:31,680 --> 00:49:34,960
like when we ran

00:49:35,119 --> 00:49:40,960
this server run server command or the

00:49:38,400 --> 00:49:44,480
yarn start command it did not return to

00:49:40,960 --> 00:49:46,400
to the terminal and um this should be

00:49:44,480 --> 00:49:49,200
more clear in the documentation

00:49:46,400 --> 00:49:50,319
because it just assumes you that once

00:49:49,200 --> 00:49:52,720
you run this

00:49:50,319 --> 00:49:54,880
and then you run this so it must happen

00:49:52,720 --> 00:49:56,400
in the same terminal but it won't we had

00:49:54,880 --> 00:49:58,880
previously written

00:49:56,400 --> 00:49:59,920
that you add ampersand after that so let

00:49:58,880 --> 00:50:03,599
me show you

00:49:59,920 --> 00:50:06,319
so if i uh kill salary and i run it with

00:50:03,599 --> 00:50:09,200
an ampersand command at the end

00:50:06,319 --> 00:50:10,240
it will just run the salary server and

00:50:09,200 --> 00:50:14,000
exit and i

00:50:10,240 --> 00:50:16,400
have my terminal with me again so

00:50:14,000 --> 00:50:19,680
celery is still running but it is

00:50:16,400 --> 00:50:22,800
detached so i can run anything in the

00:50:19,680 --> 00:50:24,480
terminal here but it is it is not

00:50:22,800 --> 00:50:28,400
recommended because

00:50:24,480 --> 00:50:30,640
now i can see that this is the

00:50:28,400 --> 00:50:32,960
process id of cell react i can kill it

00:50:30,640 --> 00:50:35,680
but i cannot kill it using ctrl

00:50:32,960 --> 00:50:36,559
c and i can forget about it so let's

00:50:35,680 --> 00:50:38,880
just recommend that

00:50:36,559 --> 00:50:40,160
that you run these two commands in two

00:50:38,880 --> 00:50:43,359
different terminals i'll

00:50:40,160 --> 00:50:46,079
i'll make note of uh changing this thing

00:50:43,359 --> 00:50:47,359
in the documentation also integrate

00:50:46,079 --> 00:50:49,760
socket io falls this

00:50:47,359 --> 00:50:50,960
this is redundant now so i'll also

00:50:49,760 --> 00:50:54,079
remove that but

00:50:50,960 --> 00:50:54,960
anyway this is how you run celery so

00:50:54,079 --> 00:50:58,000
hopefully

00:50:54,960 --> 00:50:59,119
once when you try it this is this is how

00:50:58,000 --> 00:51:01,920
it will work but

00:50:59,119 --> 00:51:02,640
again let's say you try with ampersand

00:51:01,920 --> 00:51:05,839
and now

00:51:02,640 --> 00:51:09,520
uh it is detached so how do you

00:51:05,839 --> 00:51:12,640
uh now turn celery off

00:51:09,520 --> 00:51:16,400
so you run kill command and you use

00:51:12,640 --> 00:51:19,440
sorry you run kill command

00:51:16,400 --> 00:51:22,400
and then you use the pid

00:51:19,440 --> 00:51:24,480
which was printed when you ran the

00:51:22,400 --> 00:51:27,760
ampersand one command

00:51:24,480 --> 00:51:31,119
so then now the salary

00:51:27,760 --> 00:51:33,119
will uh shut down automatically then

00:51:31,119 --> 00:51:34,880
so this is how you run sully so

00:51:33,119 --> 00:51:37,839
hopefully that answers

00:51:34,880 --> 00:51:37,839
your question

00:51:40,079 --> 00:51:48,079
thank you yes yeah

00:51:43,839 --> 00:51:48,079
then does anyone else have any other

00:51:48,839 --> 00:51:51,839
questions

00:52:03,280 --> 00:52:07,040
yeah so uh i just read something uh

00:52:06,079 --> 00:52:10,960
about uh

00:52:07,040 --> 00:52:13,040
uh alvin wrote in the chat so uh

00:52:10,960 --> 00:52:14,640
nginx and apache cannot work

00:52:13,040 --> 00:52:16,000
simultaneously on the same server

00:52:14,640 --> 00:52:19,440
because

00:52:16,000 --> 00:52:22,480
um uh basically both are

00:52:19,440 --> 00:52:23,520
uh services which bind on port 80 and

00:52:22,480 --> 00:52:27,440
00:52:23,520 --> 00:52:29,599
and only one can bind on uh 443 and 80.

00:52:27,440 --> 00:52:32,079
you can run either of them i recommend

00:52:29,599 --> 00:52:35,520
nginx it's much faster than apache

00:52:32,079 --> 00:52:39,760
it's not a process per request right

00:52:35,520 --> 00:52:41,760
and does um you know

00:52:39,760 --> 00:52:43,680
you just even if you want to run just

00:52:41,760 --> 00:52:46,960
apache then you can just

00:52:43,680 --> 00:52:49,119
add the reverse proxy definition and

00:52:46,960 --> 00:52:50,160
proxy audio requests to look uh

00:52:49,119 --> 00:52:52,640
localhost

00:52:50,160 --> 00:52:53,520
8080 or wherever wherever the unicorn

00:52:52,640 --> 00:52:57,359
processors are

00:52:53,520 --> 00:53:00,559
running because this

00:52:57,359 --> 00:53:03,839
workshop was about how to run it locally

00:53:00,559 --> 00:53:06,240
we just showed you how to run

00:53:03,839 --> 00:53:08,160
a run server using run server command if

00:53:06,240 --> 00:53:10,480
you want to deploy it in production

00:53:08,160 --> 00:53:12,960
as it is written in the command sorry

00:53:10,480 --> 00:53:18,000
the documentation that you want to

00:53:12,960 --> 00:53:18,000
use unicorn however if you're doing it

00:53:18,240 --> 00:53:21,760
running it in production then it's much

00:53:21,119 --> 00:53:24,640
better

00:53:21,760 --> 00:53:25,920
that you use docker compose so i'm just

00:53:24,640 --> 00:53:28,319
going to show you

00:53:25,920 --> 00:53:29,680
the documentation about compose and how

00:53:28,319 --> 00:53:33,760
easy it is

00:53:29,680 --> 00:53:33,760
to deploy it using docker compose

00:53:35,520 --> 00:53:43,839
so here it is written

00:53:39,680 --> 00:53:43,839
deployment with docker

00:53:44,079 --> 00:53:47,520
so what you have to do is to just clone

00:53:46,160 --> 00:53:51,599
the project

00:53:47,520 --> 00:53:55,200
cd into the project copy the command

00:53:51,599 --> 00:53:58,319
dot env again add the secret key

00:53:55,200 --> 00:54:00,480
this is extremely important this

00:53:58,319 --> 00:54:02,319
uh command is redundant but anyway you

00:54:00,480 --> 00:54:05,760
can do that it won't do anything

00:54:02,319 --> 00:54:08,160
and then you just do docker composer d

00:54:05,760 --> 00:54:08,960
and it will just do everything like you

00:54:08,160 --> 00:54:11,520
don't have to set

00:54:08,960 --> 00:54:12,559
post list you don't have to set up redis

00:54:11,520 --> 00:54:15,440
you don't have to

00:54:12,559 --> 00:54:17,119
install the dependencies poetry this and

00:54:15,440 --> 00:54:18,559
that you don't have to install poetry

00:54:17,119 --> 00:54:21,280
installations

00:54:18,559 --> 00:54:21,839
anything it will we already built the

00:54:21,280 --> 00:54:24,400
image

00:54:21,839 --> 00:54:25,200
on every commit on the development

00:54:24,400 --> 00:54:27,440
branch and

00:54:25,200 --> 00:54:28,880
even on master branch whenever we make

00:54:27,440 --> 00:54:31,760
release we tag them

00:54:28,880 --> 00:54:32,480
and docker compose has those pre-built

00:54:31,760 --> 00:54:34,640
images

00:54:32,480 --> 00:54:35,760
so it will just download those images

00:54:34,640 --> 00:54:38,640
and run those

00:54:35,760 --> 00:54:39,599
and if you go to localhost 880 you'll

00:54:38,640 --> 00:54:43,119
you know

00:54:39,599 --> 00:54:45,920
just see that so

00:54:43,119 --> 00:54:47,040
let's uh i'm showing i'll be showing you

00:54:45,920 --> 00:54:51,359
the

00:54:47,040 --> 00:54:54,720
doc compose file if you go here

00:54:51,359 --> 00:54:55,920
you will see that we use the event open

00:54:54,720 --> 00:54:59,200
event server

00:54:55,920 --> 00:55:01,520
image here and it will just run postgres

00:54:59,200 --> 00:55:03,760
redis everything is pre-configured you

00:55:01,520 --> 00:55:06,960
don't have to

00:55:03,760 --> 00:55:08,480
you know run the create db command or

00:55:06,960 --> 00:55:11,839
something else it's

00:55:08,480 --> 00:55:14,400
extremely easy it takes your

00:55:11,839 --> 00:55:15,839
settings from dot env file uh it also

00:55:14,400 --> 00:55:18,480
runs salary

00:55:15,839 --> 00:55:19,760
automatically so everything is extremely

00:55:18,480 --> 00:55:22,240
easy if you use

00:55:19,760 --> 00:55:23,119
docker compose however it's for a

00:55:22,240 --> 00:55:26,160
deployment

00:55:23,119 --> 00:55:28,000
you know introduction but if you want to

00:55:26,160 --> 00:55:30,160
develop locally there's no docker

00:55:28,000 --> 00:55:32,319
solution currently for that

00:55:30,160 --> 00:55:33,599
we may have that in future but currently

00:55:32,319 --> 00:55:36,640
we recommend that you

00:55:33,599 --> 00:55:40,559
install postgres and radius and

00:55:36,640 --> 00:55:43,839
things like that celery so this is

00:55:40,559 --> 00:55:43,839
about the deployment thing

00:55:47,680 --> 00:56:07,040
does anyone have any other questions

00:56:03,839 --> 00:56:10,640
yeah so 8 gb command i've seen people

00:56:07,040 --> 00:56:13,119
uh run uh you know

00:56:10,640 --> 00:56:13,920
so the front end with 4gb command as

00:56:13,119 --> 00:56:17,119
well

00:56:13,920 --> 00:56:20,400
30 minutes a bit too long but a

00:56:17,119 --> 00:56:23,280
person with 4gb ran

00:56:20,400 --> 00:56:25,680
i i helped him run the front end and it

00:56:23,280 --> 00:56:28,079
took him 10 minutes to run it

00:56:25,680 --> 00:56:28,960
but 30 minutes is too much i don't think

00:56:28,079 --> 00:56:31,760
it should take

00:56:28,960 --> 00:56:32,160
30 minutes it also depends on how much

00:56:31,760 --> 00:56:35,760
ram

00:56:32,160 --> 00:56:38,720
is free for it so i think at least 2gb

00:56:35,760 --> 00:56:38,720
ram should be free for it

00:56:41,440 --> 00:56:49,200
and also um the

00:56:44,799 --> 00:56:52,240
the yarn l10 engine rate command

00:56:49,200 --> 00:56:55,599
that should not take

00:56:52,240 --> 00:56:58,400
much more time than just one minute

00:56:55,599 --> 00:57:00,079
it may happen that it has already run

00:56:58,400 --> 00:57:00,720
but it does not show the terminal for

00:57:00,079 --> 00:57:03,359
you so

00:57:00,720 --> 00:57:04,640
using that it's still running so for

00:57:03,359 --> 00:57:07,359
that i recommend

00:57:04,640 --> 00:57:09,839
that you just press enter and see if

00:57:07,359 --> 00:57:13,839
terminal comes up so that

00:57:09,839 --> 00:57:13,839
that helps as well

00:57:17,280 --> 00:57:20,799
so i have this question are there any

00:57:19,760 --> 00:57:23,440
plans to add

00:57:20,799 --> 00:57:24,400
pwa feature to event ea to strengthen

00:57:23,440 --> 00:57:26,720
the

00:57:24,400 --> 00:57:28,480
offline capabilities so what we are

00:57:26,720 --> 00:57:31,680
going to do in future is

00:57:28,480 --> 00:57:33,359
we are uh evaluating if we want to shift

00:57:31,680 --> 00:57:36,480
to react or view

00:57:33,359 --> 00:57:38,160
so we will be developing a new site uh

00:57:36,480 --> 00:57:41,040
it will integrate first with the old

00:57:38,160 --> 00:57:43,520
site and then be completely changed

00:57:41,040 --> 00:57:44,319
to the new site so details are not final

00:57:43,520 --> 00:57:47,119
but

00:57:44,319 --> 00:57:48,720
uh when we are building it we will take

00:57:47,119 --> 00:57:51,520
in consideration

00:57:48,720 --> 00:57:52,799
that uh it should be very fast to load

00:57:51,520 --> 00:57:56,160
and yes as you said

00:57:52,799 --> 00:57:58,960
the pwa will be there as well however

00:57:56,160 --> 00:57:59,599
offline is uh you know we don't really

00:57:58,960 --> 00:58:02,640
know

00:57:59,599 --> 00:58:03,760
how we can add offline feature uh adding

00:58:02,640 --> 00:58:07,040
a local database

00:58:03,760 --> 00:58:10,079
would require a lot of effort so it will

00:58:07,040 --> 00:58:13,119
be much more friendly so for example if

00:58:10,079 --> 00:58:14,400
a person is offline then it will show an

00:58:13,119 --> 00:58:17,040
app shell and say that

00:58:14,400 --> 00:58:18,000
say that you are offline uh and in

00:58:17,040 --> 00:58:21,520
future yes

00:58:18,000 --> 00:58:24,640
uh we we can also think of

00:58:21,520 --> 00:58:27,839
adding uh the loaded events

00:58:24,640 --> 00:58:30,480
in a local database so that they can see

00:58:27,839 --> 00:58:32,240
uh the events they have already or may

00:58:30,480 --> 00:58:32,799
be adding a feature of downloading and

00:58:32,240 --> 00:58:35,680
event

00:58:32,799 --> 00:58:36,720
data and if that data is downloaded in

00:58:35,680 --> 00:58:38,960
the

00:58:36,720 --> 00:58:41,680
local database they can see it even when

00:58:38,960 --> 00:58:43,760
they are offline

00:58:41,680 --> 00:58:45,839
but this is obviously just speculation

00:58:43,760 --> 00:58:47,680
for now and we'll have to see

00:58:45,839 --> 00:58:51,839
what uh what's the priority of the

00:58:47,680 --> 00:58:51,839
project then

00:58:56,960 --> 00:59:01,920
then do we have any other question do we

00:59:00,079 --> 00:59:03,599
have any

00:59:01,920 --> 00:59:05,359
you know any request that what do you

00:59:03,599 --> 00:59:06,400
want to discuss next do you want to

00:59:05,359 --> 00:59:08,240
discuss

00:59:06,400 --> 00:59:11,119
architecture do you want to discuss a

00:59:08,240 --> 00:59:14,799
specific feature do you

00:59:11,119 --> 00:59:19,839
want to see how a specific

00:59:14,799 --> 00:59:19,839
component of the projects

00:59:31,760 --> 00:59:37,119
okay so now uh then let's move on to the

00:59:35,359 --> 00:59:40,480
code of the project so

00:59:37,119 --> 00:59:42,799
uh i'll be showing you components in

00:59:40,480 --> 00:59:44,960
uh different parts of the project so

00:59:42,799 --> 01:00:01,839
first let's open up

00:59:44,960 --> 01:00:01,839
front in

01:00:12,839 --> 01:00:15,839
so

01:00:26,839 --> 01:00:29,839
uh

01:00:34,079 --> 01:00:41,440
okay so this is the front end repository

01:00:38,000 --> 01:00:43,040
uh let me collapse everything and then

01:00:41,440 --> 01:00:44,400
let's

01:00:43,040 --> 01:00:46,720
let me explain that what are the

01:00:44,400 --> 01:00:48,960
different components parts of it

01:00:46,720 --> 01:00:48,960
so

01:00:51,839 --> 01:00:57,680
this is the root project folder

01:00:55,200 --> 01:01:00,640
and we have app config and things like

01:00:57,680 --> 01:01:02,319
that the most interesting part of the

01:01:00,640 --> 01:01:04,240
the all all the source code of the

01:01:02,319 --> 01:01:06,480
project is in the app folder

01:01:04,240 --> 01:01:07,839
and then we have adapters components

01:01:06,480 --> 01:01:11,200
controllers

01:01:07,839 --> 01:01:14,240
routes models so in models we have

01:01:11,200 --> 01:01:16,240
you know the data whatever we fetch with

01:01:14,240 --> 01:01:19,839
api so for example we have

01:01:16,240 --> 01:01:21,200
event model and event model contains the

01:01:19,839 --> 01:01:24,240
event title

01:01:21,200 --> 01:01:25,839
and the attendees of the event and other

01:01:24,240 --> 01:01:28,799
information like logo

01:01:25,839 --> 01:01:29,280
description things like that and then

01:01:28,799 --> 01:01:32,480
there are

01:01:29,280 --> 01:01:34,480
feedback groups video streams video

01:01:32,480 --> 01:01:37,280
channels so video channel has name

01:01:34,480 --> 01:01:38,880
provider like jitsi big blue button

01:01:37,280 --> 01:01:42,000
and and then there we do stream

01:01:38,880 --> 01:01:43,839
moderators so this this is all the data

01:01:42,000 --> 01:01:46,799
we load from the api

01:01:43,839 --> 01:01:47,680
and then there are routes so uh that's

01:01:46,799 --> 01:01:51,520
one

01:01:47,680 --> 01:01:53,040
uh the the important uh the

01:01:51,520 --> 01:01:56,640
starting point of the project i

01:01:53,040 --> 01:01:58,880
recommend is to visit router.js

01:01:56,640 --> 01:01:58,880
and

01:02:01,359 --> 01:02:05,359
then we have login register reset

01:02:04,160 --> 01:02:07,599
password

01:02:05,359 --> 01:02:09,280
and these are the routes so if someone

01:02:07,599 --> 01:02:12,960
accesses

01:02:09,280 --> 01:02:16,240
slash login it will redirect

01:02:12,960 --> 01:02:19,440
the person and run the code of

01:02:16,240 --> 01:02:20,400
login route so this is how you navigate

01:02:19,440 --> 01:02:22,960
to

01:02:20,400 --> 01:02:23,839
if you want to understand that what is

01:02:22,960 --> 01:02:26,799
the

01:02:23,839 --> 01:02:28,799
uh a particular component which is used

01:02:26,799 --> 01:02:30,400
in the part of the project

01:02:28,799 --> 01:02:32,079
this is how you navigate around it so

01:02:30,400 --> 01:02:35,520
let's take an example

01:02:32,079 --> 01:02:39,359
if you if you see the uh

01:02:35,520 --> 01:02:41,039
the url currently on your screen you'll

01:02:39,359 --> 01:02:42,240
notice it's the event here dot com slash

01:02:41,039 --> 01:02:45,039
e slash

01:02:42,240 --> 01:02:46,160
identifier slash video slash workshop

01:02:45,039 --> 01:02:49,280
slash

01:02:46,160 --> 01:02:53,039
299 uh something like that so

01:02:49,280 --> 01:02:55,920
let's then uh find out that which

01:02:53,039 --> 01:02:57,920
part which template handles at which

01:02:55,920 --> 01:02:59,119
javascript file handles this particular

01:02:57,920 --> 01:03:03,359
route

01:02:59,119 --> 01:03:06,960
so if i go back to router.js i found

01:03:03,359 --> 01:03:10,079
i start to find where where is e

01:03:06,960 --> 01:03:12,400
so this public but there's no e here but

01:03:10,079 --> 01:03:14,240
there's this path option which says

01:03:12,400 --> 01:03:17,440
slash e slash event id so

01:03:14,240 --> 01:03:18,559
this means that it overrides the public

01:03:17,440 --> 01:03:22,240
route

01:03:18,559 --> 01:03:23,280
and anything that loads slash e slash

01:03:22,240 --> 01:03:26,720
event id

01:03:23,280 --> 01:03:30,160
is handled by public route so

01:03:26,720 --> 01:03:32,960
when you go to the event home page

01:03:30,160 --> 01:03:35,599
the public route loads it so as you can

01:03:32,960 --> 01:03:39,359
see public route we have model function

01:03:35,599 --> 01:03:41,200
which loads the event so

01:03:39,359 --> 01:03:42,799
it refines the record event with the

01:03:41,200 --> 01:03:46,640
event id parameter

01:03:42,799 --> 01:03:48,319
and it also loads the uh required

01:03:46,640 --> 01:03:50,799
uh information about the event like

01:03:48,319 --> 01:03:54,640
social links speaker call tax

01:03:50,799 --> 01:03:58,240
on organizers and video stream so

01:03:54,640 --> 01:04:02,000
then i go again and i see

01:03:58,240 --> 01:04:04,559
slash e slash event id slash video

01:04:02,000 --> 01:04:05,760
but there's no video route as well but

01:04:04,559 --> 01:04:08,720
there's this

01:04:05,760 --> 01:04:10,079
stream route and then there's video

01:04:08,720 --> 01:04:13,520
slash video name

01:04:10,079 --> 01:04:18,400
and then there's stream id

01:04:13,520 --> 01:04:18,400
so if i go to this stream

01:04:19,839 --> 01:04:26,960
view so there's this

01:04:23,760 --> 01:04:28,079
route stream view and then there's this

01:04:26,960 --> 01:04:30,880
information about

01:04:28,079 --> 01:04:32,079
model where we load the event from the

01:04:30,880 --> 01:04:34,559
public model

01:04:32,079 --> 01:04:35,760
and then we find the stream so we have

01:04:34,559 --> 01:04:38,559
video stream

01:04:35,760 --> 01:04:39,359
we find the a particular video stream by

01:04:38,559 --> 01:04:41,920
its event

01:04:39,359 --> 01:04:43,839
uh the stream id and also include the

01:04:41,920 --> 01:04:47,039
channel and everything in here

01:04:43,839 --> 01:04:47,920
so this is how we load the video stream

01:04:47,039 --> 01:04:50,640
but

01:04:47,920 --> 01:04:53,039
what where's the template where's the

01:04:50,640 --> 01:04:55,839
logic of ui

01:04:53,039 --> 01:04:56,319
where's the ui of the logic sorry so if

01:04:55,839 --> 01:04:59,920
you see

01:04:56,319 --> 01:05:01,280
stream view there's this file in

01:04:59,920 --> 01:05:06,000
template

01:05:01,280 --> 01:05:09,280
and it loads this component so anything

01:05:06,000 --> 01:05:11,200
in template is either used as the

01:05:09,280 --> 01:05:12,319
template of the route or template of the

01:05:11,200 --> 01:05:15,520
component

01:05:12,319 --> 01:05:19,680
so i see that the view.tx file

01:05:15,520 --> 01:05:21,839
or js file uses this ui

01:05:19,680 --> 01:05:23,280
and this public stream video stream so i

01:05:21,839 --> 01:05:26,720
go in here

01:05:23,280 --> 01:05:29,200
template uh there's components

01:05:26,720 --> 01:05:31,280
so i go into components then there's

01:05:29,200 --> 01:05:34,319
public

01:05:31,280 --> 01:05:36,559
then there's a stream then there's video

01:05:34,319 --> 01:05:39,599
stream so this video stream

01:05:36,559 --> 01:05:41,920
this is the logic this is the ui that

01:05:39,599 --> 01:05:43,039
if it is loading we show the loader if

01:05:41,920 --> 01:05:45,680
we get an iframe

01:05:43,039 --> 01:05:47,039
we show the iframe if it is just c we

01:05:45,680 --> 01:05:49,760
use the jitsi stream

01:05:47,039 --> 01:05:50,240
component so now we are in jitsi so

01:05:49,760 --> 01:05:54,559
let's

01:05:50,240 --> 01:05:58,880
move to this jc stream component

01:05:54,559 --> 01:06:02,000
and here it is shown that this is how

01:05:58,880 --> 01:06:05,599
um this is loaded so once

01:06:02,000 --> 01:06:07,200
the uh this component is inserted we

01:06:05,599 --> 01:06:10,240
call jc setup

01:06:07,200 --> 01:06:12,400
in the jc stream component and

01:06:10,240 --> 01:06:14,079
this is the logic that okay this when

01:06:12,400 --> 01:06:16,240
setup jitsi is called

01:06:14,079 --> 01:06:17,520
then we pass the channel url and

01:06:16,240 --> 01:06:20,079
everything we

01:06:17,520 --> 01:06:22,000
set up the information we changed the

01:06:20,079 --> 01:06:22,640
moderator password and things like that

01:06:22,000 --> 01:06:25,599
so

01:06:22,640 --> 01:06:26,880
this is the kind of top-down approach

01:06:25,599 --> 01:06:30,160
you start at root

01:06:26,880 --> 01:06:32,079
and you follow the templates to find

01:06:30,160 --> 01:06:35,200
that which component is used

01:06:32,079 --> 01:06:36,079
and where the logic is found so this is

01:06:35,200 --> 01:06:39,440
how you do it

01:06:36,079 --> 01:06:42,559
another way of doing something like that

01:06:39,440 --> 01:06:45,760
is to you know just use

01:06:42,559 --> 01:06:46,960
ember administrator sorry amber

01:06:45,760 --> 01:06:49,520
inspector

01:06:46,960 --> 01:06:52,400
so there's this extension if you go to

01:06:49,520 --> 01:06:55,039
chrome store or firefox extension

01:06:52,400 --> 01:06:56,880
you can install ember inspector and then

01:06:55,039 --> 01:07:01,599
if you can click on

01:06:56,880 --> 01:07:04,160
inspect go to the ember tab

01:07:01,599 --> 01:07:05,520
and then you can click on a particular

01:07:04,160 --> 01:07:07,440
component and

01:07:05,520 --> 01:07:09,920
say inspect number component it will

01:07:07,440 --> 01:07:14,000
load a particular div

01:07:09,920 --> 01:07:17,359
and a particular card so this is how

01:07:14,000 --> 01:07:20,559
you do that so this is how you

01:07:17,359 --> 01:07:21,359
uh you can see which component it is and

01:07:20,559 --> 01:07:23,599
you can see

01:07:21,359 --> 01:07:24,720
the arguments passed in it the props

01:07:23,599 --> 01:07:27,119
passed in it

01:07:24,720 --> 01:07:28,640
you can see the function passed in it

01:07:27,119 --> 01:07:31,839
and things like that

01:07:28,640 --> 01:07:33,280
so this is how you debug and navigate

01:07:31,839 --> 01:07:36,319
the project

01:07:33,280 --> 01:07:43,839
so does anyone have any question

01:07:36,319 --> 01:07:43,839
for now

01:07:45,280 --> 01:07:53,359
does uh do you have any kind of

01:07:49,119 --> 01:07:55,920
project related uh questions or

01:07:53,359 --> 01:07:56,880
do you want or do you want any specific

01:07:55,920 --> 01:07:59,280
part of the

01:07:56,880 --> 01:08:01,119
project to be explained any component

01:07:59,280 --> 01:08:03,599
things like that if you have anything

01:08:01,119 --> 01:08:04,480
any problem setting it up then you can

01:08:03,599 --> 01:08:11,839
ask that

01:08:04,480 --> 01:08:11,839
that as well

01:08:14,720 --> 01:08:18,159
if not then pretty can you show the

01:08:17,600 --> 01:08:20,960
people

01:08:18,159 --> 01:08:21,679
uh how to uh you know navigate the issue

01:08:20,960 --> 01:08:23,839
board

01:08:21,679 --> 01:08:25,920
how to find issues things like that

01:08:23,839 --> 01:08:28,400
what's the criteria of selecting issues

01:08:25,920 --> 01:08:28,400
currently

01:08:28,799 --> 01:08:31,520
okay so

01:08:32,000 --> 01:08:39,839
uh i'll just share my screen

01:08:59,199 --> 01:09:02,799
okay can everyone see my screen

01:09:03,359 --> 01:09:09,359
yeah okay so first of all

01:09:07,359 --> 01:09:10,640
this is uh open events our main

01:09:09,359 --> 01:09:12,799
repository

01:09:10,640 --> 01:09:14,159
uh if you want to contribute the normal

01:09:12,799 --> 01:09:16,159
workflow is that

01:09:14,159 --> 01:09:17,920
first of all you will have to form the

01:09:16,159 --> 01:09:19,040
uh repository in which you are planning

01:09:17,920 --> 01:09:20,960
to contribute

01:09:19,040 --> 01:09:22,560
and these are general steps which you

01:09:20,960 --> 01:09:23,440
will follow in any open source

01:09:22,560 --> 01:09:25,199
repository

01:09:23,440 --> 01:09:27,520
in which you will contribute so the

01:09:25,199 --> 01:09:28,640
thing is that this is the main upstream

01:09:27,520 --> 01:09:30,719
repository

01:09:28,640 --> 01:09:33,679
and you won't have the rights to push a

01:09:30,719 --> 01:09:37,040
new branch or anything on this repo

01:09:33,679 --> 01:09:37,440
so forking is done so that you actually

01:09:37,040 --> 01:09:40,960
have

01:09:37,440 --> 01:09:44,400
a copy of that rapper on your personal

01:09:40,960 --> 01:09:44,880
uh account and forking also helps github

01:09:44,400 --> 01:09:47,839
to keep

01:09:44,880 --> 01:09:49,600
track uh that okay this repository is a

01:09:47,839 --> 01:09:52,480
fork of this repository

01:09:49,600 --> 01:09:53,359
and we know that so github actually

01:09:52,480 --> 01:09:56,480
detects

01:09:53,359 --> 01:09:58,239
uh if you maybe push push a new branch

01:09:56,480 --> 01:09:59,760
on your repo itself it will

01:09:58,239 --> 01:10:00,880
automatically detect that okay there is

01:09:59,760 --> 01:10:03,440
a new branch

01:10:00,880 --> 01:10:05,120
and maybe you want to make a pr and it

01:10:03,440 --> 01:10:09,280
will show options here

01:10:05,120 --> 01:10:11,920
so so for example in open event server

01:10:09,280 --> 01:10:11,920
you can see

01:10:12,320 --> 01:10:17,280
yeah in my personal repository there's

01:10:14,480 --> 01:10:18,880
open events over a repo

01:10:17,280 --> 01:10:20,719
and it is telling me that it is two

01:10:18,880 --> 01:10:22,159
comments behind from first asia

01:10:20,719 --> 01:10:24,080
development branch

01:10:22,159 --> 01:10:26,239
uh because that's the case i haven't

01:10:24,080 --> 01:10:28,000
updated it yet

01:10:26,239 --> 01:10:29,360
so that is how github also keeps track

01:10:28,000 --> 01:10:32,000
of these things

01:10:29,360 --> 01:10:33,679
so yeah you will first go to the local

01:10:32,000 --> 01:10:36,400
installation do the installation as

01:10:33,679 --> 01:10:37,679
deep just show after that you will go on

01:10:36,400 --> 01:10:41,280
to the issues

01:10:37,679 --> 01:10:43,280
tab now uh it depends that may be

01:10:41,280 --> 01:10:44,560
testing the system you got a new issue

01:10:43,280 --> 01:10:46,640
you can simply

01:10:44,560 --> 01:10:48,640
make a new issue here and there's a

01:10:46,640 --> 01:10:49,920
template available already uh in which

01:10:48,640 --> 01:10:53,040
you can tell what are the

01:10:49,920 --> 01:10:55,840
uh things you face in that is in the

01:10:53,040 --> 01:10:55,840
thing that you faced

01:10:56,400 --> 01:11:00,480
uh okay yeah so uh after that you can

01:11:00,000 --> 01:11:03,600
maybe

01:11:00,480 --> 01:11:06,159
also the the there are label mark uh

01:11:03,600 --> 01:11:07,840
uh if say you uh you are not so

01:11:06,159 --> 01:11:08,880
confident about the software software

01:11:07,840 --> 01:11:10,640
development skills

01:11:08,880 --> 01:11:12,480
and you just want to try out the

01:11:10,640 --> 01:11:14,239
workflow and maybe

01:11:12,480 --> 01:11:16,159
contribute to the documentation you can

01:11:14,239 --> 01:11:18,000
simply select docs

01:11:16,159 --> 01:11:19,840
and here are all the issues that are

01:11:18,000 --> 01:11:22,719
related to docs

01:11:19,840 --> 01:11:24,640
also maybe uh you want to uh this is

01:11:22,719 --> 01:11:26,640
going to be a safe first issue

01:11:24,640 --> 01:11:28,480
so there you can also find issues in

01:11:26,640 --> 01:11:29,280
most open source repositories and here

01:11:28,480 --> 01:11:32,480
as well

01:11:29,280 --> 01:11:37,040
uh which has attack of good first shoe

01:11:32,480 --> 01:11:39,679
uh so uh let's take this for example

01:11:37,040 --> 01:11:41,280
so first of all see if someone else has

01:11:39,679 --> 01:11:44,000
taken the issue or not

01:11:41,280 --> 01:11:44,320
so uh if uh someone else has said okay

01:11:44,000 --> 01:11:46,400
i'm

01:11:44,320 --> 01:11:47,760
working on this so in physicia we don't

01:11:46,400 --> 01:11:50,000
assign you issues

01:11:47,760 --> 01:11:51,520
you simply come and say okay i would be

01:11:50,000 --> 01:11:53,760
working on this issue

01:11:51,520 --> 01:11:55,360
but say someone took the issue but

01:11:53,760 --> 01:11:57,920
haven't been active on it for

01:11:55,360 --> 01:11:59,040
uh a week or two you can just ping them

01:11:57,920 --> 01:12:00,880
on github itself

01:11:59,040 --> 01:12:02,960
uh asking if they are still working on

01:12:00,880 --> 01:12:05,280
it and if they don't reply to

01:12:02,960 --> 01:12:06,560
uh that means that they are not working

01:12:05,280 --> 01:12:08,320
on it and you can simply

01:12:06,560 --> 01:12:10,480
take that issue up and start working on

01:12:08,320 --> 01:12:12,480
it

01:12:10,480 --> 01:12:13,679
uh so uh basically there is some

01:12:12,480 --> 01:12:16,560
discussion on this issue

01:12:13,679 --> 01:12:17,920
about uh a confusion that the other

01:12:16,560 --> 01:12:20,640
person might be having

01:12:17,920 --> 01:12:22,159
so you can do that as well uh say you

01:12:20,640 --> 01:12:24,000
see a issue you and

01:12:22,159 --> 01:12:25,360
you understand it and but you're not

01:12:24,000 --> 01:12:28,560
sure if that's the thing

01:12:25,360 --> 01:12:30,640
it is asking to do so you can just ping

01:12:28,560 --> 01:12:31,600
or me or anyone else or whoever opened

01:12:30,640 --> 01:12:33,840
the issue

01:12:31,600 --> 01:12:35,040
and you can ask okay i think this is

01:12:33,840 --> 01:12:37,920
what this is saying

01:12:35,040 --> 01:12:39,120
uh and i think this is the solution am i

01:12:37,920 --> 01:12:42,000
going the correct way

01:12:39,120 --> 01:12:45,199
and can i make a pr about it and we'll

01:12:42,000 --> 01:12:50,320
get back to you right away

01:12:45,199 --> 01:12:52,960
so yeah so here's a pr related to this

01:12:50,320 --> 01:12:54,880
uh for the pr like as i told that first

01:12:52,960 --> 01:12:57,520
of all you will the repository

01:12:54,880 --> 01:12:59,760
and after then you will clone it

01:12:57,520 --> 01:13:03,040
so what it will do is uh

01:12:59,760 --> 01:13:05,920
like i told that there are forks now

01:13:03,040 --> 01:13:06,560
how do you make sure that whenever you

01:13:05,920 --> 01:13:09,760
are pushing

01:13:06,560 --> 01:13:11,600
a branch say get push on which

01:13:09,760 --> 01:13:12,800
repository are you trying to push it is

01:13:11,600 --> 01:13:14,960
it for sasha slash

01:13:12,800 --> 01:13:16,880
open event server or is it username

01:13:14,960 --> 01:13:20,640
slash open event server

01:13:16,880 --> 01:13:22,400
so uh here comes get remotes

01:13:20,640 --> 01:13:24,000
get remotes are used to keep track of

01:13:22,400 --> 01:13:26,800
this only that

01:13:24,000 --> 01:13:28,239
uh uh in which repository you are trying

01:13:26,800 --> 01:13:31,280
to point it

01:13:28,239 --> 01:13:33,920
so the basic syntax of most get commands

01:13:31,280 --> 01:13:35,520
it is get secondly the action you are

01:13:33,920 --> 01:13:38,159
trying to do let it be pull

01:13:35,520 --> 01:13:40,080
push fetch anything uh third is

01:13:38,159 --> 01:13:42,800
basically the remote name

01:13:40,080 --> 01:13:44,080
so i can set up multiple reports for

01:13:42,800 --> 01:13:47,440
example uh remotes

01:13:44,080 --> 01:13:49,840
uh for example uh the repository

01:13:47,440 --> 01:13:51,840
from which you clone get automatically

01:13:49,840 --> 01:13:55,920
names it origin

01:13:51,840 --> 01:13:57,760
and uh it's more of a convention

01:13:55,920 --> 01:13:59,440
that mainly the repository that is your

01:13:57,760 --> 01:14:00,719
main repository it should be named as

01:13:59,440 --> 01:14:03,600
upstream

01:14:00,719 --> 01:14:04,239
so uh yeah you will simply get add

01:14:03,600 --> 01:14:07,120
remote

01:14:04,239 --> 01:14:08,080
upstream and the open event server url

01:14:07,120 --> 01:14:10,159
so that would

01:14:08,080 --> 01:14:11,679
not get that would set uh this

01:14:10,159 --> 01:14:14,239
repository at upstream

01:14:11,679 --> 01:14:15,600
and say now you want to make a pi uh

01:14:14,239 --> 01:14:19,920
like this person has

01:14:15,600 --> 01:14:22,000
a branch fix issue uh 7161

01:14:19,920 --> 01:14:23,280
and what he or she must have done is

01:14:22,000 --> 01:14:25,199
that they

01:14:23,280 --> 01:14:26,719
must have pushed it now if they will

01:14:25,199 --> 01:14:28,159
push in the upstream repo

01:14:26,719 --> 01:14:30,880
it will simply throw an error that you

01:14:28,159 --> 01:14:33,360
don't have the uh appropriate rights

01:14:30,880 --> 01:14:35,600
so uh what he she must have done is that

01:14:33,360 --> 01:14:38,640
they must have uh put the amount

01:14:35,600 --> 01:14:41,040
put the command get push origin

01:14:38,640 --> 01:14:42,000
and the branch name so that would have

01:14:41,040 --> 01:14:45,360
pushed it

01:14:42,000 --> 01:14:48,560
to uh the particular uh rapport which

01:14:45,360 --> 01:14:50,880
he or she must have fought and get

01:14:48,560 --> 01:14:52,640
uh and get up being intelligent about it

01:14:50,880 --> 01:14:53,920
simply detects it and will show you

01:14:52,640 --> 01:14:56,320
option here

01:14:53,920 --> 01:14:56,960
that okay you have pushed a new branch

01:14:56,320 --> 01:14:59,360
maybe

01:14:56,960 --> 01:15:00,000
you are you trying to make a pr about it

01:14:59,360 --> 01:15:11,280
so

01:15:00,000 --> 01:15:14,800
you can simply make a pr from here

01:15:11,280 --> 01:15:18,400
okay so uh thank you pratik uh i hope

01:15:14,800 --> 01:15:22,880
uh everyone has got uh an option to

01:15:18,400 --> 01:15:25,120
uh the to see the options that how to

01:15:22,880 --> 01:15:27,280
navigate issues how to find issues and

01:15:25,120 --> 01:15:30,400
how to contribute on

01:15:27,280 --> 01:15:33,199
github as well so does anyone else uh

01:15:30,400 --> 01:15:35,440
now have any question about the or any

01:15:33,199 --> 01:15:38,320
request that what should we do

01:15:35,440 --> 01:15:39,840
otherwise we also have you know other

01:15:38,320 --> 01:15:42,320
stuff we can go through

01:15:39,840 --> 01:15:43,840
but do you have any questions right now

01:15:42,320 --> 01:15:47,520
as mario said that

01:15:43,840 --> 01:15:48,320
we have some people from a lot of people

01:15:47,520 --> 01:15:50,880
from

01:15:48,320 --> 01:15:51,920
india so we can also take uh questions

01:15:50,880 --> 01:15:55,360
in hindi if

01:15:51,920 --> 01:15:55,360
you are not comfortable in other

01:16:04,840 --> 01:16:07,840
languages

01:16:08,560 --> 01:16:12,320
okay so uh then let me show you a couple

01:16:11,679 --> 01:16:15,440
of

01:16:12,320 --> 01:16:17,440
things as well this is some uh issue

01:16:15,440 --> 01:16:18,400
that people don't understand what we

01:16:17,440 --> 01:16:21,280
mean

01:16:18,400 --> 01:16:23,120
when we say that we want something to be

01:16:21,280 --> 01:16:26,080
translatable

01:16:23,120 --> 01:16:27,840
so what we have in the project is that

01:16:26,080 --> 01:16:28,320
the project supports multiple languages

01:16:27,840 --> 01:16:32,000
so

01:16:28,320 --> 01:16:36,480
you you can see the language uh switcher

01:16:32,000 --> 01:16:38,880
in the project below so if i come here

01:16:36,480 --> 01:16:40,719
you can see that there's english by

01:16:38,880 --> 01:16:42,800
default but there are a lot of languages

01:16:40,719 --> 01:16:46,000
like bangla in the

01:16:42,800 --> 01:16:49,520
french and vietnamese

01:16:46,000 --> 01:16:53,120
and spanish and german

01:16:49,520 --> 01:16:56,159
so we support multiple languages and how

01:16:53,120 --> 01:16:58,800
how it works is that we use gettext

01:16:56,159 --> 01:17:00,840
which is the open source uh in kind of

01:16:58,800 --> 01:17:03,679
de facto standard of

01:17:00,840 --> 01:17:04,960
extracting translatable things and we

01:17:03,679 --> 01:17:08,360
have these translation

01:17:04,960 --> 01:17:12,000
translations folder and we have

01:17:08,360 --> 01:17:12,560
messages.pot so what does messages.pod

01:17:12,000 --> 01:17:16,320
does

01:17:12,560 --> 01:17:19,520
it extracts all these strings

01:17:16,320 --> 01:17:21,360
uh in a particular kind of string

01:17:19,520 --> 01:17:24,320
translatable strings

01:17:21,360 --> 01:17:25,040
from the project and list them that

01:17:24,320 --> 01:17:27,679
they're these

01:17:25,040 --> 01:17:28,560
these project where these strings are

01:17:27,679 --> 01:17:32,480
present

01:17:28,560 --> 01:17:33,440
and uh this is used by uh softwares like

01:17:32,480 --> 01:17:35,840
weblet

01:17:33,440 --> 01:17:37,440
to show the translators that this

01:17:35,840 --> 01:17:39,440
message is present here

01:17:37,440 --> 01:17:40,560
so that they understand the context and

01:17:39,440 --> 01:17:44,239
also they can

01:17:40,560 --> 01:17:47,360
see where this particular string is used

01:17:44,239 --> 01:17:50,880
and then they create uh

01:17:47,360 --> 01:17:53,760
different files for different

01:17:50,880 --> 01:17:54,560
strings so for example this is the hindi

01:17:53,760 --> 01:17:58,000
file

01:17:54,560 --> 01:18:01,440
and this has the translations of

01:17:58,000 --> 01:18:04,480
these uh strings in here

01:18:01,440 --> 01:18:08,400
so we have french we have

01:18:04,480 --> 01:18:12,080
japanese korean polish and everything

01:18:08,400 --> 01:18:14,719
like that so when we say we want

01:18:12,080 --> 01:18:16,480
something to be translatable it does not

01:18:14,719 --> 01:18:17,360
mean that we want to add something in

01:18:16,480 --> 01:18:19,360
these files

01:18:17,360 --> 01:18:23,040
because these are automatically

01:18:19,360 --> 01:18:25,600
generated so if i go to package.json

01:18:23,040 --> 01:18:27,440
i can see that there are three commands

01:18:25,600 --> 01:18:30,560
l10 and extract

01:18:27,440 --> 01:18:34,000
l10 and update l10 and generate

01:18:30,560 --> 01:18:35,760
so when i we all ran elder and generate

01:18:34,000 --> 01:18:38,400
while

01:18:35,760 --> 01:18:40,080
installing the front end and what it

01:18:38,400 --> 01:18:42,880
does is that automatically

01:18:40,080 --> 01:18:44,000
creates json files from these

01:18:42,880 --> 01:18:46,320
translations

01:18:44,000 --> 01:18:47,360
so actually in the front end we do not

01:18:46,320 --> 01:18:51,360
consume

01:18:47,360 --> 01:18:54,960
these pure files but we consume this

01:18:51,360 --> 01:18:58,480
these json files for translations

01:18:54,960 --> 01:19:01,600
so if i come here uh assets

01:18:58,480 --> 01:19:02,400
locales now here you can see this json

01:19:01,600 --> 01:19:06,159
file switch

01:19:02,400 --> 01:19:09,199
was generated by the generate command so

01:19:06,159 --> 01:19:13,280
if for example someone loads

01:19:09,199 --> 01:19:15,920
uh selects bengali as uh their language

01:19:13,280 --> 01:19:17,040
this json file will be downloaded and

01:19:15,920 --> 01:19:21,600
whenever

01:19:17,040 --> 01:19:24,239
whenever in the entire site

01:19:21,600 --> 01:19:25,840
manage events is written it is it will

01:19:24,239 --> 01:19:29,360
be replaced by this

01:19:25,840 --> 01:19:29,920
phrase so that's why we ran the generate

01:19:29,360 --> 01:19:31,679
command

01:19:29,920 --> 01:19:33,120
otherwise the project would not have

01:19:31,679 --> 01:19:36,080
worked so

01:19:33,120 --> 01:19:37,360
when for example how to make something

01:19:36,080 --> 01:19:41,280
translatable

01:19:37,360 --> 01:19:43,600
so let's say i'm in this component event

01:19:41,280 --> 01:19:43,600
card

01:19:45,600 --> 01:19:53,760
event card

01:19:49,040 --> 01:19:53,760
and here

01:19:55,440 --> 01:19:58,159
is this

01:20:00,320 --> 01:20:06,320
there's no text in here okay let me go

01:20:04,159 --> 01:20:06,320
to

01:20:06,719 --> 01:20:12,719
site panel so here you can see

01:20:10,880 --> 01:20:13,920
that there are multiple texts written

01:20:12,719 --> 01:20:16,480
here let's say

01:20:13,920 --> 01:20:17,520
i add a new text i have to add a new

01:20:16,480 --> 01:20:21,120
item

01:20:17,520 --> 01:20:24,639
i add div item

01:20:21,120 --> 01:20:28,719
and i say support

01:20:24,639 --> 01:20:30,639
right so now it is not automatically

01:20:28,719 --> 01:20:34,000
translated

01:20:30,639 --> 01:20:37,600
if uh even if there is a translatable

01:20:34,000 --> 01:20:40,000
string in in the po files which

01:20:37,600 --> 01:20:41,600
automatically has uh the translations

01:20:40,000 --> 01:20:42,560
for different languages it won't be

01:20:41,600 --> 01:20:45,199
translated

01:20:42,560 --> 01:20:46,560
to make it translatable we wrap it in t

01:20:45,199 --> 01:20:51,760
helper

01:20:46,560 --> 01:20:54,960
okay so now it is translatable

01:20:51,760 --> 01:20:55,760
but if only if it has translations

01:20:54,960 --> 01:20:58,080
already

01:20:55,760 --> 01:20:59,440
if it does not have translations i have

01:20:58,080 --> 01:21:03,679
to

01:20:59,440 --> 01:21:08,080
wrap it in t and i have to then

01:21:03,679 --> 01:21:08,080
run this particular command

01:21:08,560 --> 01:21:12,639
yarn held in extract so now it will

01:21:11,679 --> 01:21:16,560
update the

01:21:12,639 --> 01:21:18,480
pod files and add this string there

01:21:16,560 --> 01:21:19,600
and then i have to run alternate update

01:21:18,480 --> 01:21:23,520
this will generate

01:21:19,600 --> 01:21:25,199
the po file for all the languages

01:21:23,520 --> 01:21:27,360
and once i've done that i'll push the

01:21:25,199 --> 01:21:29,199
code and viblate another

01:21:27,360 --> 01:21:30,400
translation projects will pick pick it

01:21:29,199 --> 01:21:33,360
up show that

01:21:30,400 --> 01:21:34,239
there's a new string to be translated

01:21:33,360 --> 01:21:36,719
support

01:21:34,239 --> 01:21:37,440
and thus make it transcribable now

01:21:36,719 --> 01:21:41,040
assume that

01:21:37,440 --> 01:21:42,639
i had to do the same thing in a js

01:21:41,040 --> 01:21:46,960
component okay

01:21:42,639 --> 01:21:50,560
so let's say i go to add to calendar

01:21:46,960 --> 01:21:52,320
and let's say i have this is organizer

01:21:50,560 --> 01:21:54,239
message now this is not translatable

01:21:52,320 --> 01:21:56,800
because this is a normal string

01:21:54,239 --> 01:21:59,360
let's say i want to make it translatable

01:21:56,800 --> 01:22:03,920
what i need to do

01:21:59,360 --> 01:22:03,920
is i need to make

01:22:04,560 --> 01:22:06,800
sorry

01:22:09,440 --> 01:22:12,480
i need to wrap this as well but i cannot

01:22:11,760 --> 01:22:15,520
wrap it in

01:22:12,480 --> 01:22:16,320
t because there's no uh t function in

01:22:15,520 --> 01:22:19,760
here

01:22:16,320 --> 01:22:22,960
but there's this uh l tenant service

01:22:19,760 --> 01:22:26,080
so i'll write this dot l 10 n dot

01:22:22,960 --> 01:22:28,239
t and then i'll

01:22:26,080 --> 01:22:29,360
pass in the string here by default

01:22:28,239 --> 01:22:32,960
there's no elton

01:22:29,360 --> 01:22:39,840
uh service here so i'll add this

01:22:32,960 --> 01:22:39,840
service and

01:22:40,080 --> 01:22:45,760
so now if i run the command which i

01:22:43,360 --> 01:22:47,760
showed you here

01:22:45,760 --> 01:22:49,920
that then and extract nl10 and update it

01:22:47,760 --> 01:22:53,120
will automatically be added

01:22:49,920 --> 01:22:56,159
to the uh you know

01:22:53,120 --> 01:22:57,360
the port files and be generated for

01:22:56,159 --> 01:23:00,960
translation

01:22:57,360 --> 01:23:01,760
so whenever you see an issue which says

01:23:00,960 --> 01:23:04,320
that

01:23:01,760 --> 01:23:05,440
make this thing translatable you have to

01:23:04,320 --> 01:23:09,120
wrap it

01:23:05,440 --> 01:23:12,239
in either t helper in the hbs file

01:23:09,120 --> 01:23:14,159
or like this here so this is

01:23:12,239 --> 01:23:17,840
what i wanted to share about how to make

01:23:14,159 --> 01:23:17,840
something translatable in the project

01:23:18,239 --> 01:23:23,920
so does anyone as uh have any question

01:23:25,120 --> 01:23:31,840
so russian uh cyrillic we don't have

01:23:28,480 --> 01:23:35,280
uh the uh support for that currently

01:23:31,840 --> 01:23:37,440
but if you want to contribute

01:23:35,280 --> 01:23:39,600
to the to add in translations for it you

01:23:37,440 --> 01:23:42,880
can do that definitely

01:23:39,600 --> 01:23:44,159
so uh for that you will need to create a

01:23:42,880 --> 01:23:47,199
new file

01:23:44,159 --> 01:23:50,239
for the translations and then run the

01:23:47,199 --> 01:23:54,000
both commands extract and generate

01:23:50,239 --> 01:24:03,040
and then you can use the blade for

01:23:54,000 --> 01:24:05,760
adding translations on that

01:24:03,040 --> 01:24:06,880
does anyone have any question or

01:24:05,760 --> 01:24:09,199
anything else

01:24:06,880 --> 01:24:17,840
any requests what what do they need to

01:24:09,199 --> 01:24:17,840
discuss next

01:24:27,520 --> 01:24:31,040
you can ask your questions in hindi too

01:24:29,840 --> 01:24:33,360
don't forget

01:24:31,040 --> 01:24:45,840
and and can even try to ask the question

01:24:33,360 --> 01:24:45,840
in hindi

01:25:00,159 --> 01:25:07,520
so then um i don't know what else

01:25:04,320 --> 01:25:09,840
to discuss on so uh

01:25:07,520 --> 01:25:11,760
if if anyone else have any other

01:25:09,840 --> 01:25:13,760
suggestion we can take that up

01:25:11,760 --> 01:25:14,800
otherwise we'll be wrapping up the

01:25:13,760 --> 01:25:19,120
workshop

01:25:14,800 --> 01:25:22,159
in a bit so now is the last chance to

01:25:19,120 --> 01:25:22,159
have any other question

01:25:24,639 --> 01:25:31,520
yes and just to make it for sure

01:25:28,239 --> 01:25:34,800
we also have one more workshop in our

01:25:31,520 --> 01:25:37,120
first summit about

01:25:34,800 --> 01:25:38,840
which which will also be taken by arip

01:25:37,120 --> 01:25:41,760
itself

01:25:38,840 --> 01:25:44,480
himself so also

01:25:41,760 --> 01:25:44,480
that chance too

01:25:45,040 --> 01:25:49,440
so can you show how sanitary is working

01:25:48,000 --> 01:25:52,560
at this project

01:25:49,440 --> 01:25:56,080
yeah so century is uh

01:25:52,560 --> 01:25:58,639
the error reporting platform we use so

01:25:56,080 --> 01:26:00,080
what we do uh for century is uh

01:25:58,639 --> 01:26:02,480
different in

01:26:00,080 --> 01:26:03,360
different projects so i'll be sharing my

01:26:02,480 --> 01:26:05,280
screen

01:26:03,360 --> 01:26:08,320
and showing that how it is how it's

01:26:05,280 --> 01:26:12,080
working in both projects

01:26:08,320 --> 01:26:15,760
so here it's it's front end

01:26:12,080 --> 01:26:19,120
so first we go to package.json

01:26:15,760 --> 01:26:21,280
and if you see we have added the three

01:26:19,120 --> 01:26:23,600
dependencies for century

01:26:21,280 --> 01:26:25,199
sentry browser sentry integrations and

01:26:23,600 --> 01:26:28,520
synthetic tracing

01:26:25,199 --> 01:26:32,239
and then we have this file

01:26:28,520 --> 01:26:33,120
sentry.ts where we have uh imported

01:26:32,239 --> 01:26:36,400
sentry

01:26:33,120 --> 01:26:39,280
right and then we first check that

01:26:36,400 --> 01:26:40,159
the sentry dsn does not include dummy

01:26:39,280 --> 01:26:44,080
why is that

01:26:40,159 --> 01:26:47,440
so let me first close the existing files

01:26:44,080 --> 01:26:50,560
so we have config

01:26:47,440 --> 01:26:53,040
sorry environment

01:26:50,560 --> 01:26:54,960
and here this this is the environment we

01:26:53,040 --> 01:26:56,000
use to configure the project like app

01:26:54,960 --> 01:26:58,880
name and

01:26:56,000 --> 01:27:00,800
other stuff so here there's sentry

01:26:58,880 --> 01:27:04,239
configuration options

01:27:00,800 --> 01:27:07,840
and this is the dsn default we

01:27:04,239 --> 01:27:10,960
we have added this dummy dsn here

01:27:07,840 --> 01:27:11,760
uh so first we check that there's no

01:27:10,960 --> 01:27:15,280
dummy

01:27:11,760 --> 01:27:18,080
in the dsn so if there's no dummy

01:27:15,280 --> 01:27:19,199
uh string in the dsn we initialize it

01:27:18,080 --> 01:27:21,760
and we initialize

01:27:19,199 --> 01:27:23,120
with integrations like ember reduce

01:27:21,760 --> 01:27:26,320
console

01:27:23,120 --> 01:27:30,800
and browser tracing we have also had

01:27:26,320 --> 01:27:33,360
some error checks uh to not

01:27:30,800 --> 01:27:34,880
send some very you know common errors

01:27:33,360 --> 01:27:38,080
like 404

01:27:34,880 --> 01:27:41,360
and then we have also added

01:27:38,080 --> 01:27:44,800
some extra enrichers uh

01:27:41,360 --> 01:27:46,960
and sentry uh to add some

01:27:44,800 --> 01:27:47,840
information about the json so if for

01:27:46,960 --> 01:27:50,400
example

01:27:47,840 --> 01:27:51,840
you're creating an order and the order

01:27:50,400 --> 01:27:54,880
creation fails

01:27:51,840 --> 01:27:55,440
so whatever json we are getting from the

01:27:54,880 --> 01:27:58,560
server

01:27:55,440 --> 01:27:58,560
is also sent

01:27:59,040 --> 01:28:05,440
sentry event so this is how we

01:28:02,320 --> 01:28:09,120
add uh sentry in front end

01:28:05,440 --> 01:28:12,840
and then there's server so i'll show

01:28:09,120 --> 01:28:15,920
that as well but

01:28:12,840 --> 01:28:19,600
sorry so

01:28:15,920 --> 01:28:22,239
this config dot pi and

01:28:19,600 --> 01:28:22,239
we have

01:28:22,719 --> 01:28:29,840
this is config.pi c73

01:28:31,679 --> 01:28:36,080
so we have century dsn uh here sentry

01:28:34,880 --> 01:28:39,360
release name

01:28:36,080 --> 01:28:42,800
and uh sentry traces sample rate this

01:28:39,360 --> 01:28:46,159
is enabled here and otherwise

01:28:42,800 --> 01:28:46,159
if i search sentry

01:28:46,239 --> 01:28:52,400
this is where we import century celery

01:28:49,679 --> 01:28:53,600
century flask century rarest sentry sql

01:28:52,400 --> 01:28:57,760
alchemy

01:28:53,600 --> 01:29:01,040
and here we configure that sentry

01:28:57,760 --> 01:29:02,000
sdk in it and then we install the

01:29:01,040 --> 01:29:05,679
integrations

01:29:02,000 --> 01:29:07,840
of flask gradius celery sql alchemy

01:29:05,679 --> 01:29:09,040
and then also set the release name and

01:29:07,840 --> 01:29:11,920
the trace

01:29:09,040 --> 01:29:13,600
for the performance monitoring so this

01:29:11,920 --> 01:29:16,639
is how we have configured

01:29:13,600 --> 01:29:17,600
sentry in the project i can also show

01:29:16,639 --> 01:29:21,040
you

01:29:17,600 --> 01:29:23,760
that how the errors are reported

01:29:21,040 --> 01:29:25,199
in century so we have our own hosted

01:29:23,760 --> 01:29:28,560
version of sentry

01:29:25,199 --> 01:29:30,800
for force asia projects and here

01:29:28,560 --> 01:29:31,760
you can see that what whenever there's

01:29:30,800 --> 01:29:35,760
an error

01:29:31,760 --> 01:29:38,719
we see what's the error and this is

01:29:35,760 --> 01:29:40,560
uh the interface where we can monitor

01:29:38,719 --> 01:29:42,880
that how many errors are

01:29:40,560 --> 01:29:44,480
uh being reported we can see which user

01:29:42,880 --> 01:29:48,000
experience that er

01:29:44,480 --> 01:29:51,040
which browser the user was using

01:29:48,000 --> 01:29:53,760
and how many users it has affected so

01:29:51,040 --> 01:29:54,560
this is generally how we do it so i hope

01:29:53,760 --> 01:29:57,520
that

01:29:54,560 --> 01:29:57,520
answered your question

01:29:57,920 --> 01:30:07,840
now do you have any other doubts any

01:30:00,800 --> 01:30:07,840
other questions

01:30:21,920 --> 01:30:27,520
so i guess for at the moment you don't

01:30:25,920 --> 01:30:31,120
have any more doubts

01:30:27,520 --> 01:30:33,520
so what do you think okay

01:30:31,120 --> 01:30:34,159
would also like to know about open event

01:30:33,520 --> 01:30:37,199
ws

01:30:34,159 --> 01:30:40,400
gen yeah so uh

01:30:37,199 --> 01:30:42,239
the ws gen is a project for generating a

01:30:40,400 --> 01:30:45,360
website so for example

01:30:42,239 --> 01:30:48,000
uh if you have an event on mta

01:30:45,360 --> 01:30:49,600
and uh you don't want you know

01:30:48,000 --> 01:30:51,760
authentication

01:30:49,600 --> 01:30:53,440
and other ticket management or anything

01:30:51,760 --> 01:30:54,239
like that but just want a static site

01:30:53,440 --> 01:30:56,960
listing

01:30:54,239 --> 01:30:58,159
all the speakers all the sessions and

01:30:56,960 --> 01:31:00,080
you want

01:30:58,159 --> 01:31:02,239
it to be fast so for example if you go

01:31:00,080 --> 01:31:05,120
to event here and you go to the

01:31:02,239 --> 01:31:06,400
session section we load only a few

01:31:05,120 --> 01:31:09,440
sessions at a time

01:31:06,400 --> 01:31:11,840
to not make it complicated so it

01:31:09,440 --> 01:31:14,000
uh whenever you scroll below there's

01:31:11,840 --> 01:31:16,239
some time loading more sessions but

01:31:14,000 --> 01:31:17,120
we can also generate a static site so

01:31:16,239 --> 01:31:20,400
that every

01:31:17,120 --> 01:31:23,040
uh session and every speaker is

01:31:20,400 --> 01:31:24,000
pre-loaded in the html pre-generated in

01:31:23,040 --> 01:31:26,880
the html

01:31:24,000 --> 01:31:28,800
and then we just show it on the page and

01:31:26,880 --> 01:31:29,440
you can filter and favorite session as

01:31:28,800 --> 01:31:32,239
well

01:31:29,440 --> 01:31:33,280
on the side so it is uh written in

01:31:32,239 --> 01:31:37,280
node.js

01:31:33,280 --> 01:31:39,199
and uh you whenever a request comes up

01:31:37,280 --> 01:31:42,480
we start a generation

01:31:39,199 --> 01:31:43,679
uh we load the speakers and sessions

01:31:42,480 --> 01:31:46,159
from the api

01:31:43,679 --> 01:31:49,520
event information from the api and then

01:31:46,159 --> 01:31:52,960
we pass them to the pre-generated

01:31:49,520 --> 01:31:55,520
templates and it generates a folder

01:31:52,960 --> 01:31:56,239
where it has several html files and css

01:31:55,520 --> 01:31:58,000
files

01:31:56,239 --> 01:32:00,239
we zip that folder and you can download

01:31:58,000 --> 01:32:03,679
that zip or you can also deploy it

01:32:00,239 --> 01:32:06,320
uh on the site itself to preview it so

01:32:03,679 --> 01:32:07,520
this is basically uh how you generate a

01:32:06,320 --> 01:32:11,040
static site

01:32:07,520 --> 01:32:12,080
using uh ws chain so previously we had

01:32:11,040 --> 01:32:14,480
uh drove

01:32:12,080 --> 01:32:15,280
jan who is now also working on rocket

01:32:14,480 --> 01:32:18,480
chat

01:32:15,280 --> 01:32:21,600
uh who made

01:32:18,480 --> 01:32:23,440
uh who solved a lot of issues in ws gen

01:32:21,600 --> 01:32:26,960
and made it possible for

01:32:23,440 --> 01:32:30,480
us to run modern

01:32:26,960 --> 01:32:33,360
apis on on the platform so i hope that

01:32:30,480 --> 01:32:33,360
answers your question

01:32:35,520 --> 01:32:40,480
yeah so uh

01:32:38,639 --> 01:32:42,080
if anyone else does not have any

01:32:40,480 --> 01:32:44,719
question then we

01:32:42,080 --> 01:32:55,840
we are reaching the end so now uh last

01:32:44,719 --> 01:32:55,840
chance for any question

01:33:17,760 --> 01:33:22,000
i guess we don't have any more questions

01:33:20,719 --> 01:33:25,760
are there any questions

01:33:22,000 --> 01:33:25,760
folks please come up

01:33:28,239 --> 01:33:32,000
or else we can move forward with our

01:33:30,560 --> 01:33:36,560
photo session

01:33:32,000 --> 01:33:40,239
is the okay fit

01:33:36,560 --> 01:33:41,199
lynette tricks sorry if i pronounce your

01:33:40,239 --> 01:33:45,440
name wrong

01:33:41,199 --> 01:33:45,440
is thanking for the kind presentation

01:33:45,600 --> 01:33:52,960
thank you fit for your appreciation

01:33:50,719 --> 01:33:54,320
so now what do you think should we move

01:33:52,960 --> 01:33:57,440
forward with a

01:33:54,320 --> 01:34:00,480
photo shoot i'll

01:33:57,440 --> 01:34:03,120
post it on my twitter and you can also

01:34:00,480 --> 01:34:03,120
retweet it

01:34:03,360 --> 01:34:07,280
come on show up your beautiful faces we

01:34:06,480 --> 01:34:09,679
all want to

01:34:07,280 --> 01:34:09,679
see you

01:34:11,199 --> 01:34:18,560
alvin gaurav sweet say

01:34:15,840 --> 01:34:18,560
leslie wong

01:34:23,600 --> 01:34:29,520
yes we have four four photos now some

01:34:26,800 --> 01:34:33,199
more some more come on

01:34:29,520 --> 01:34:36,080
yeah five yes

01:34:33,199 --> 01:34:36,800
can we have all faces as the last

01:34:36,080 --> 01:34:39,440
workshop of

01:34:36,800 --> 01:34:39,440
the day two

01:34:43,920 --> 01:34:47,840
leslie two

01:34:53,840 --> 01:34:59,040
okay after i say switch on for switching

01:34:57,679 --> 01:35:03,119
on the camera

01:34:59,040 --> 01:35:03,119
like people are leaving

01:35:04,000 --> 01:35:07,840
no problem so i guess we'll take

01:35:06,239 --> 01:35:15,840
screenshot with

01:35:07,840 --> 01:35:15,840
this much people

01:35:17,760 --> 01:35:21,679
yes so everyone can just wave their

01:35:20,000 --> 01:35:25,520
hands like that and then we can

01:35:21,679 --> 01:35:28,719
uh take a screenshot yeah yeah

01:35:25,520 --> 01:35:30,560
thank you everyone uh so uh for closing

01:35:28,719 --> 01:35:32,239
words i defer to shubham

01:35:30,560 --> 01:35:34,719
uh thank you everyone for joining this

01:35:32,239 --> 01:35:39,119
session shubham will uh now

01:35:34,719 --> 01:35:41,679
take it from here sure thank you ari for

01:35:39,119 --> 01:35:42,560
sharing the state so like day two was

01:35:41,679 --> 01:35:45,280
also

01:35:42,560 --> 01:35:46,400
so good like we we get to hear so many

01:35:45,280 --> 01:35:48,719
good talks

01:35:46,400 --> 01:35:50,800
so many lightning talks like today today

01:35:48,719 --> 01:35:53,360
was the first day of lightning talks

01:35:50,800 --> 01:35:55,520
and uh we we had to attend good

01:35:53,360 --> 01:35:57,840
workshops of ps lab

01:35:55,520 --> 01:35:58,560
got an introduction about pocket science

01:35:57,840 --> 01:36:01,840
labs

01:35:58,560 --> 01:36:04,400
device 2 which was really good so i hope

01:36:01,840 --> 01:36:05,520
you folks have enjoyed today's session

01:36:04,400 --> 01:36:07,119
and

01:36:05,520 --> 01:36:08,880
we have many more things to learn

01:36:07,119 --> 01:36:10,560
tomorrow and

01:36:08,880 --> 01:36:11,920
who knows like if you want to learn

01:36:10,560 --> 01:36:15,199
something

01:36:11,920 --> 01:36:17,600
eagerly from many days in the same

01:36:15,199 --> 01:36:19,440
topic shows up tomorrow and you'll be

01:36:17,600 --> 01:36:20,880
like wow i wanted to learn it from so

01:36:19,440 --> 01:36:22,960
many days and

01:36:20,880 --> 01:36:24,800
uh expert speaker in that particular

01:36:22,960 --> 01:36:28,320
section is giving a talk on it

01:36:24,800 --> 01:36:30,800
so opportunity yeah let's

01:36:28,320 --> 01:36:31,920
we'll take one more screenshot because

01:36:30,800 --> 01:36:39,840
we have one more

01:36:31,920 --> 01:36:39,840
new face

01:36:40,159 --> 01:36:42,400
yes

01:36:48,080 --> 01:36:52,880
so pratik arif do you wanna say

01:36:50,880 --> 01:36:54,639
something

01:36:52,880 --> 01:36:56,719
uh just uh thank you everyone for

01:36:54,639 --> 01:36:59,679
joining hope you learned something

01:36:56,719 --> 01:37:00,960
and then uh please uh stay for the rest

01:36:59,679 --> 01:37:03,440
of the

01:37:00,960 --> 01:37:04,159
week and hopefully when we have the next

01:37:03,440 --> 01:37:07,520
session

01:37:04,159 --> 01:37:08,560
uh then uh we will discuss uh i'll plan

01:37:07,520 --> 01:37:10,400
something more

01:37:08,560 --> 01:37:12,719
interesting and i've i'll plan something

01:37:10,400 --> 01:37:15,600
more uh an expansion of the session

01:37:12,719 --> 01:37:17,040
so thank you everyone yeah yeah thank

01:37:15,600 --> 01:37:19,199
you everyone for joining

01:37:17,040 --> 01:37:20,400
be healthy take breaks between the

01:37:19,199 --> 01:37:22,159
sessions and

01:37:20,400 --> 01:37:23,440
thank you for being such a good audience

01:37:22,159 --> 01:37:35,840
see you all tomorrow

01:37:23,440 --> 01:37:35,840
at day three

01:37:46,840 --> 01:37:49,840
oh

01:42:04,800 --> 01:42:06,880

YouTube URL: https://www.youtube.com/watch?v=-llduJQ7yQA


