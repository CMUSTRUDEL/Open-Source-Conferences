Title: Realtime Web Applications with WebSockets (Lowen & Daryll Wong, SUTD)
Publication date: 2021-03-25
Playlist: FOSSASIA Summit 2021
Description: 
	Looking to increase the interactivity of your web application? Always wanted to find out how to build multi-user applications like a chat room? Or just somewhat curious about WebSockets or WebRTC?

In this short workshop, we will be go through the following:

- Short introductions to Realtime applications, WebSockets, WebRTC and event-driven programming
- Tutorial: Building a realtime group chat room with WebSockets
- Fantastic Browser APIs and how to find (and use!) them
- Tutorial: Building a video call room with WebRTC
Captions: 
	00:00:00,320 --> 00:00:06,160
so yeah we're students from ist

00:00:03,280 --> 00:00:07,839
uh s-u-t-d-i-std pillar so we're seniors

00:00:06,160 --> 00:00:10,400
and we ran this workshop

00:00:07,839 --> 00:00:12,000
a couple months back as part of the

00:00:10,400 --> 00:00:13,759
independent activities program so we're

00:00:12,000 --> 00:00:16,240
you know very excited to bring it to a

00:00:13,759 --> 00:00:18,000
wider audience today

00:00:16,240 --> 00:00:19,840
first of all like let's have some settle

00:00:18,000 --> 00:00:21,199
some logistics right

00:00:19,840 --> 00:00:22,720
so just make sure on your computer you

00:00:21,199 --> 00:00:24,160
have the following right make sure you

00:00:22,720 --> 00:00:25,039
have git installed

00:00:24,160 --> 00:00:27,439
make sure you have a working

00:00:25,039 --> 00:00:29,199
installation of node.js along with

00:00:27,439 --> 00:00:31,039
npm or yarn and then lastly like just

00:00:29,199 --> 00:00:33,360
make sure you have a text editor you're

00:00:31,039 --> 00:00:34,960
comfortable with working with oh good

00:00:33,360 --> 00:00:36,880
it'd be great if you could like you know

00:00:34,960 --> 00:00:40,399
have some activity in chat

00:00:36,880 --> 00:00:43,680
very strange to talk to an empty room

00:00:40,399 --> 00:00:44,719
so for the course resources this is a

00:00:43,680 --> 00:00:46,879
course web page

00:00:44,719 --> 00:00:48,719
the github repository in this particular

00:00:46,879 --> 00:00:50,719
slide that you can find here

00:00:48,719 --> 00:00:53,120
the slider i'm using right now is on

00:00:50,719 --> 00:00:53,120
this link

00:00:54,160 --> 00:00:57,760
right so throughout this course um you

00:00:57,039 --> 00:00:59,760
know

00:00:57,760 --> 00:01:02,480
we references we reference a few other

00:00:59,760 --> 00:01:04,479
sources so like primarily it's the

00:01:02,480 --> 00:01:06,640
mozilla developer network mdn and then

00:01:04,479 --> 00:01:08,960
the firesheet bio youtube channel

00:01:06,640 --> 00:01:10,479
so to get out the agenda so today i'll

00:01:08,960 --> 00:01:12,159
roughly introduce the workshop

00:01:10,479 --> 00:01:13,680
then have a quick introduction to web

00:01:12,159 --> 00:01:15,439
sockets um

00:01:13,680 --> 00:01:16,960
and then we'll go through two tutorials

00:01:15,439 --> 00:01:18,479
so firstly

00:01:16,960 --> 00:01:20,640
building a simple websocket server and

00:01:18,479 --> 00:01:21,759
client just simply sends the receive

00:01:20,640 --> 00:01:23,360
messages

00:01:21,759 --> 00:01:24,400
and then moving on to a more complicated

00:01:23,360 --> 00:01:25,600
use case which is a group chat

00:01:24,400 --> 00:01:28,479
application

00:01:25,600 --> 00:01:29,439
moving on we'll have uh you know browser

00:01:28,479 --> 00:01:31,360
apis

00:01:29,439 --> 00:01:32,479
explore a bit of browser apis if we have

00:01:31,360 --> 00:01:34,000
time and then

00:01:32,479 --> 00:01:35,840
uh daryl will take over and he'll be

00:01:34,000 --> 00:01:39,759
talking about webrtc and then using

00:01:35,840 --> 00:01:42,720
webrtc in our video chat application

00:01:39,759 --> 00:01:44,159
so let's just get started right so this

00:01:42,720 --> 00:01:45,280
workshop is called the real-time web

00:01:44,159 --> 00:01:47,600
application workshop

00:01:45,280 --> 00:01:48,560
so you know what is a real-time

00:01:47,600 --> 00:01:50,079
application

00:01:48,560 --> 00:01:52,159
right broadly speaking it's not very

00:01:50,079 --> 00:01:56,479
it's not very well defined term right

00:01:52,159 --> 00:01:58,240
so it's uh according to the wikipedia

00:01:56,479 --> 00:01:59,840
article on it it's a network web using

00:01:58,240 --> 00:02:01,040
technologies and practices that enable

00:01:59,840 --> 00:02:03,119
users to receive

00:02:01,040 --> 00:02:04,240
information as soon as it is published

00:02:03,119 --> 00:02:05,920
by its authors

00:02:04,240 --> 00:02:07,360
rather than require that they or their

00:02:05,920 --> 00:02:08,080
software check the source periodically

00:02:07,360 --> 00:02:10,000
for updates

00:02:08,080 --> 00:02:12,560
so the important point here is that you

00:02:10,000 --> 00:02:14,640
know a real-time web application

00:02:12,560 --> 00:02:16,480
will enable users to receive the

00:02:14,640 --> 00:02:18,239
information as soon as it's

00:02:16,480 --> 00:02:19,840
updated or changed that's what we're

00:02:18,239 --> 00:02:21,680
going to get from here right

00:02:19,840 --> 00:02:23,200
and the you know the source from the

00:02:21,680 --> 00:02:24,160
bottom just tells us it's a very vague

00:02:23,200 --> 00:02:27,280
term

00:02:24,160 --> 00:02:28,160
um that the servers will push the data

00:02:27,280 --> 00:02:29,440
to the clients

00:02:28,160 --> 00:02:31,360
instead of the clients pulling it from

00:02:29,440 --> 00:02:33,120
the server

00:02:31,360 --> 00:02:35,360
so with that done let's move on to web

00:02:33,120 --> 00:02:37,519
sockets

00:02:35,360 --> 00:02:38,720
so websockets what is websockets right

00:02:37,519 --> 00:02:40,560
so websockets is

00:02:38,720 --> 00:02:41,840
an internet protocol so what is a

00:02:40,560 --> 00:02:45,120
protocol

00:02:41,840 --> 00:02:47,599
so a protocol roughly according to

00:02:45,120 --> 00:02:49,280
my computer networking textbook defines

00:02:47,599 --> 00:02:50,080
the format and order messages exchanged

00:02:49,280 --> 00:02:52,319
between two or more

00:02:50,080 --> 00:02:54,640
communicating entities as well as the

00:02:52,319 --> 00:02:57,519
actions taken on transmission or receipt

00:02:54,640 --> 00:02:58,239
or message so it's just some kind of

00:02:57,519 --> 00:03:02,080
structure

00:02:58,239 --> 00:03:02,080
that defines how two parties should

00:03:02,840 --> 00:03:08,000
communicate

00:03:04,480 --> 00:03:10,080
right so moving on to websockets

00:03:08,000 --> 00:03:12,080
http so websockets is an internet

00:03:10,080 --> 00:03:13,200
protocol but the other protocol that

00:03:12,080 --> 00:03:16,319
powers the internet

00:03:13,200 --> 00:03:18,640
is http right so http is

00:03:16,319 --> 00:03:19,920
uh what's responsible for the web today

00:03:18,640 --> 00:03:20,800
you go on your browser you know the

00:03:19,920 --> 00:03:21,840
website

00:03:20,800 --> 00:03:24,560
it's getting the information through

00:03:21,840 --> 00:03:26,640
http right so these are both actually

00:03:24,560 --> 00:03:29,120
client and server protocols

00:03:26,640 --> 00:03:30,239
that means um we're talking about

00:03:29,120 --> 00:03:31,360
different nodes

00:03:30,239 --> 00:03:32,959
some of them are clients some of them

00:03:31,360 --> 00:03:34,159
are servers so typically when you go on

00:03:32,959 --> 00:03:36,000
a browser

00:03:34,159 --> 00:03:37,680
your your browser is the client the

00:03:36,000 --> 00:03:38,799
server is somewhere in the cloud

00:03:37,680 --> 00:03:41,040
and then they communicate with each

00:03:38,799 --> 00:03:43,200
other and then they communicate

00:03:41,040 --> 00:03:45,599
uh through a request response pattern

00:03:43,200 --> 00:03:46,560
right so http is a request response

00:03:45,599 --> 00:03:48,319
protocol

00:03:46,560 --> 00:03:50,239
where the client sends a request message

00:03:48,319 --> 00:03:52,080
to the server and the server

00:03:50,239 --> 00:03:53,280
returns a response message this is the

00:03:52,080 --> 00:03:56,560
only way they communicate

00:03:53,280 --> 00:03:57,360
right requests and response requests and

00:03:56,560 --> 00:04:00,400
response

00:03:57,360 --> 00:04:01,200
no response requests the server cannot

00:04:00,400 --> 00:04:03,840
push

00:04:01,200 --> 00:04:05,200
things to the client any information

00:04:03,840 --> 00:04:07,040
sent to the client must be explicitly

00:04:05,200 --> 00:04:09,840
requested by the client right

00:04:07,040 --> 00:04:12,239
so with this in mind and our previous

00:04:09,840 --> 00:04:15,040
definition of real-time web applications

00:04:12,239 --> 00:04:17,199
which is um the user or the client

00:04:15,040 --> 00:04:21,120
getting updates as soon as the

00:04:17,199 --> 00:04:23,680
update occurs right how can we

00:04:21,120 --> 00:04:25,440
get real-time behavior using a request

00:04:23,680 --> 00:04:29,680
response protocol

00:04:25,440 --> 00:04:31,520
um yeah so you can think about it

00:04:29,680 --> 00:04:33,120
on the surface it seems like it's very

00:04:31,520 --> 00:04:34,720
hard to get this kind of behavior

00:04:33,120 --> 00:04:36,479
but you know in the early days of the

00:04:34,720 --> 00:04:38,639
web people have

00:04:36,479 --> 00:04:39,759
come up with a lot of different hacks

00:04:38,639 --> 00:04:41,440
around

00:04:39,759 --> 00:04:42,800
hacks and tricks to try and emulate this

00:04:41,440 --> 00:04:45,440
kind of behavior

00:04:42,800 --> 00:04:47,759
mainly like short and long polling or

00:04:45,440 --> 00:04:50,880
you know polling and long polling

00:04:47,759 --> 00:04:52,160
right so these are the two main methods

00:04:50,880 --> 00:04:54,479
used in the earlier

00:04:52,160 --> 00:04:56,080
earlier web applications and then

00:04:54,479 --> 00:04:56,639
nowadays you can still use them as a

00:04:56,080 --> 00:04:59,199
fallback

00:04:56,639 --> 00:05:01,039
because they're well supported um so

00:04:59,199 --> 00:05:03,039
short polling is essentially

00:05:01,039 --> 00:05:04,240
the client periodically polling the

00:05:03,039 --> 00:05:07,120
server five days

00:05:04,240 --> 00:05:07,440
so you still have to request response

00:05:07,120 --> 00:05:10,800
and

00:05:07,440 --> 00:05:11,759
uh yeah so request response if there is

00:05:10,800 --> 00:05:13,680
no updates

00:05:11,759 --> 00:05:14,960
then the response is empty they don't

00:05:13,680 --> 00:05:17,360
tell you there's not this

00:05:14,960 --> 00:05:18,720
if there's a update then the response

00:05:17,360 --> 00:05:21,280
will tell you there's not it

00:05:18,720 --> 00:05:22,400
it's you know the equivalent of uh the

00:05:21,280 --> 00:05:23,680
client telling server

00:05:22,400 --> 00:05:24,960
you have anything new for me you have

00:05:23,680 --> 00:05:25,840
anything new for me you have anything

00:05:24,960 --> 00:05:28,400
new for me

00:05:25,840 --> 00:05:29,199
right very annoying waste a lot of uh

00:05:28,400 --> 00:05:32,240
network

00:05:29,199 --> 00:05:33,440
traffic right because if you have um

00:05:32,240 --> 00:05:35,199
if you don't actually have anything to

00:05:33,440 --> 00:05:36,720
send then you're sending an empty

00:05:35,199 --> 00:05:39,199
response for nothing

00:05:36,720 --> 00:05:40,639
the other the more advanced hack is

00:05:39,199 --> 00:05:42,720
called long polling

00:05:40,639 --> 00:05:44,479
right so long polling takes advantage of

00:05:42,720 --> 00:05:48,000
the fact that a uh

00:05:44,479 --> 00:05:50,720
http request will wait

00:05:48,000 --> 00:05:52,000
for a specific amount of time before the

00:05:50,720 --> 00:05:55,280
response before actually giving

00:05:52,000 --> 00:05:57,039
up so what long polling does

00:05:55,280 --> 00:05:58,960
is the client makes the http request to

00:05:57,039 --> 00:06:00,960
the server and the server

00:05:58,960 --> 00:06:03,440
holds this request for as long as

00:06:00,960 --> 00:06:05,039
possible not releasing a response

00:06:03,440 --> 00:06:06,800
until either there's an update or the

00:06:05,039 --> 00:06:09,120
time is up

00:06:06,800 --> 00:06:11,280
so these are two you know hacks that

00:06:09,120 --> 00:06:15,039
people have used to really get

00:06:11,280 --> 00:06:15,919
um real-time behavior and it emulates it

00:06:15,039 --> 00:06:18,880
quite well

00:06:15,919 --> 00:06:21,039
but not perfectly which is where

00:06:18,880 --> 00:06:23,520
websockets comes in right

00:06:21,039 --> 00:06:24,720
so website connection is a full duplex

00:06:23,520 --> 00:06:26,000
connection

00:06:24,720 --> 00:06:27,440
which means that the client and the

00:06:26,000 --> 00:06:29,199
server can both send data along the

00:06:27,440 --> 00:06:31,520
connection at the same time

00:06:29,199 --> 00:06:32,960
uh without any you know without any

00:06:31,520 --> 00:06:34,560
requirements on the ordering

00:06:32,960 --> 00:06:36,880
right so you can see from the diagram

00:06:34,560 --> 00:06:37,759
here the client and server establish a

00:06:36,880 --> 00:06:39,680
connection

00:06:37,759 --> 00:06:41,199
and then they can send messages to one

00:06:39,680 --> 00:06:44,479
another

00:06:41,199 --> 00:06:46,000
no problem no ordering no nothing right

00:06:44,479 --> 00:06:48,720
so the important thing here is that

00:06:46,000 --> 00:06:51,919
websockets trades data

00:06:48,720 --> 00:06:54,479
trades sending data as discrete messages

00:06:51,919 --> 00:06:55,120
so message data is sent either as a

00:06:54,479 --> 00:06:58,960
string

00:06:55,120 --> 00:07:00,319
or some kind of binary data format so

00:06:58,960 --> 00:07:02,400
so strings are strings right and then

00:07:00,319 --> 00:07:03,520
binary data types are array buffer blobs

00:07:02,400 --> 00:07:06,000
array buffer views

00:07:03,520 --> 00:07:07,520
but for the purposes of today's uh

00:07:06,000 --> 00:07:08,639
workshop we'll primarily be talking

00:07:07,520 --> 00:07:12,000
about strings

00:07:08,639 --> 00:07:15,120
we're working with strings right so

00:07:12,000 --> 00:07:17,440
with that in mind let's just

00:07:15,120 --> 00:07:18,560
go jump into it let's get started with

00:07:17,440 --> 00:07:20,240
the simple

00:07:18,560 --> 00:07:22,080
our first tutorial a simple web software

00:07:20,240 --> 00:07:24,000
server in a client

00:07:22,080 --> 00:07:25,360
so the important thing to remember here

00:07:24,000 --> 00:07:28,400
is that

00:07:25,360 --> 00:07:29,840
uh we have a client with a server and

00:07:28,400 --> 00:07:30,560
they send discrete messages to one

00:07:29,840 --> 00:07:34,479
another

00:07:30,560 --> 00:07:36,560
right so let's crack open github

00:07:34,479 --> 00:07:45,840
follow the link in github and just clone

00:07:36,560 --> 00:07:45,840
the repository

00:07:56,840 --> 00:07:59,840
yes

00:08:08,720 --> 00:08:14,879
all right again in this workshop i hope

00:08:12,080 --> 00:08:15,919
um everyone has some familiarity with

00:08:14,879 --> 00:08:19,599
javascript

00:08:15,919 --> 00:08:20,000
and node.js specifically and how node.js

00:08:19,599 --> 00:08:21,840
you know

00:08:20,000 --> 00:08:23,280
creates modules and packages how to

00:08:21,840 --> 00:08:25,680
package node.js projects

00:08:23,280 --> 00:08:27,199
so this is a node.js project because we

00:08:25,680 --> 00:08:30,639
are running a server on the

00:08:27,199 --> 00:08:32,320
uh server side server side obviously um

00:08:30,639 --> 00:08:33,680
you know that's serving a static web

00:08:32,320 --> 00:08:34,240
page that is you know sent to the

00:08:33,680 --> 00:08:38,240
browser

00:08:34,240 --> 00:08:41,919
right and you can see

00:08:38,240 --> 00:08:44,560
in you can see our dependencies here

00:08:41,919 --> 00:08:45,839
we'll be using the express library to

00:08:44,560 --> 00:08:48,959
serve our static

00:08:45,839 --> 00:08:49,839
pages and using this uh websockets

00:08:48,959 --> 00:08:54,240
library

00:08:49,839 --> 00:08:57,440
to handle web sockets right

00:08:54,240 --> 00:09:01,519
so let's get to it uh let's roughly

00:08:57,440 --> 00:09:01,519
uh go through the code we have here

00:09:02,240 --> 00:09:09,839
and uh of course if you want more uh

00:09:06,560 --> 00:09:15,120
detailed notes we can

00:09:09,839 --> 00:09:15,120
let me see where is it what if it's here

00:09:20,839 --> 00:09:23,680
hmm

00:09:22,640 --> 00:09:26,240
it's a symbol it's pretty simple

00:09:23,680 --> 00:09:26,240
tutorial

00:09:26,320 --> 00:09:30,080
right so let's just go through uh what's

00:09:29,519 --> 00:09:33,519
run right

00:09:30,080 --> 00:09:35,440
so this is package.json uh the main the

00:09:33,519 --> 00:09:37,200
main function is index.js so this is our

00:09:35,440 --> 00:09:40,720
entry point to the application

00:09:37,200 --> 00:09:43,760
so we run this server by running um

00:09:40,720 --> 00:09:46,480
node index.js

00:09:43,760 --> 00:09:47,360
here all right i didn't initialize so

00:09:46,480 --> 00:09:49,279
always remember

00:09:47,360 --> 00:09:50,640
after cloning initialize your repository

00:09:49,279 --> 00:09:53,200
initialize

00:09:50,640 --> 00:09:56,399
your dependencies so i'm just gonna do

00:09:53,200 --> 00:10:01,360
that yarn we'll install the dependencies

00:09:56,399 --> 00:10:02,800
uh note index.js

00:10:01,360 --> 00:10:04,800
right now i started a server for

00:10:02,800 --> 00:10:07,920
localhost

00:10:04,800 --> 00:10:10,880
so here we've got we have our

00:10:07,920 --> 00:10:12,240
uh client-side page being served to our

00:10:10,880 --> 00:10:14,800
browser

00:10:12,240 --> 00:10:16,839
we have our server running on this thing

00:10:14,800 --> 00:10:19,600
right

00:10:16,839 --> 00:10:23,600
so what we want to do

00:10:19,600 --> 00:10:28,720
well rather what this particular

00:10:23,600 --> 00:10:32,000
code demonstrates is a simple websocket

00:10:28,720 --> 00:10:35,120
application using websockets where the

00:10:32,000 --> 00:10:39,120
client side will send a

00:10:35,120 --> 00:10:40,640
string to the server this

00:10:39,120 --> 00:10:43,040
and the server reverses it and then

00:10:40,640 --> 00:10:46,640
sends it back as a web socket

00:10:43,040 --> 00:10:47,279
message and then the client on receiving

00:10:46,640 --> 00:10:49,519
the message

00:10:47,279 --> 00:10:50,480
uh it will alert the reverse string

00:10:49,519 --> 00:10:53,360
right

00:10:50,480 --> 00:10:53,360
so it's the quick

00:10:57,680 --> 00:11:03,920
so now it's reversed so you can see here

00:11:00,720 --> 00:11:05,200
you can't see here but you see so let's

00:11:03,920 --> 00:11:06,959
just roughly go through the code see

00:11:05,200 --> 00:11:09,040
what's going on

00:11:06,959 --> 00:11:10,079
and uh have some you know understand

00:11:09,040 --> 00:11:10,399
some of the principles behind the whole

00:11:10,079 --> 00:11:13,600
thing

00:11:10,399 --> 00:11:15,360
right so over here this is our index.js

00:11:13,600 --> 00:11:17,600
file

00:11:15,360 --> 00:11:19,839
we're spinning up a uh hd we are

00:11:17,600 --> 00:11:22,399
importing the http module

00:11:19,839 --> 00:11:23,200
start http server this path module is

00:11:22,399 --> 00:11:24,880
for

00:11:23,200 --> 00:11:26,839
path resolution so just some standard

00:11:24,880 --> 00:11:28,240
stuff importing our external

00:11:26,839 --> 00:11:31,440
dependencies

00:11:28,240 --> 00:11:33,279
web sockets and express and then serve

00:11:31,440 --> 00:11:35,839
our static site with express

00:11:33,279 --> 00:11:38,079
so static site is only this index.html

00:11:35,839 --> 00:11:38,079
here

00:11:38,480 --> 00:11:44,959
and then start our websocket server so

00:11:42,160 --> 00:11:46,560
um at this point of time let's get a bit

00:11:44,959 --> 00:11:47,040
into you know event-driven programming

00:11:46,560 --> 00:11:51,519
right

00:11:47,040 --> 00:11:51,519
so broadly speaking

00:11:51,920 --> 00:11:55,440
event-driven driven programming is a

00:11:53,519 --> 00:11:56,639
programming paradigm

00:11:55,440 --> 00:11:58,480
where the flow of the program is

00:11:56,639 --> 00:12:00,000
determined by events so basically

00:11:58,480 --> 00:12:02,240
instead of the code executing

00:12:00,000 --> 00:12:04,240
sequentially your code will

00:12:02,240 --> 00:12:06,000
execute you know based on events right

00:12:04,240 --> 00:12:07,519
and javascript is a language that's

00:12:06,000 --> 00:12:09,200
particularly suited to the event driven

00:12:07,519 --> 00:12:10,880
paradigm because there's a whole

00:12:09,200 --> 00:12:12,399
event loop and it's doing all that good

00:12:10,880 --> 00:12:13,040
stuff behind the scenes so all you need

00:12:12,399 --> 00:12:16,320
to think about

00:12:13,040 --> 00:12:18,160
is you know uh emitting events listening

00:12:16,320 --> 00:12:20,639
to events and then handling those events

00:12:18,160 --> 00:12:21,839
along with you know event data right so

00:12:20,639 --> 00:12:24,720
over here

00:12:21,839 --> 00:12:27,120
uh we have websocket server with

00:12:24,720 --> 00:12:31,920
instantiated websocket server right

00:12:27,120 --> 00:12:36,839
so wss on websocket wss is on

00:12:31,920 --> 00:12:39,839
wss is our website server the on

00:12:36,839 --> 00:12:39,839
method

00:12:40,720 --> 00:12:46,160
sorry one sec

00:12:43,920 --> 00:12:47,680
nevermind the on

00:12:46,160 --> 00:12:50,800
[Music]

00:12:47,680 --> 00:12:53,920
the on method basically

00:12:50,800 --> 00:12:55,200
allows you to listen to a event so in

00:12:53,920 --> 00:12:58,399
this case a connection event

00:12:55,200 --> 00:13:01,680
the library will emit a connection event

00:12:58,399 --> 00:13:04,160
when a new uh when

00:13:01,680 --> 00:13:05,360
you know another client connects to the

00:13:04,160 --> 00:13:08,000
server right and then we

00:13:05,360 --> 00:13:09,760
handle the event using our callback

00:13:08,000 --> 00:13:11,279
function

00:13:09,760 --> 00:13:13,440
which takes our websocket object as a

00:13:11,279 --> 00:13:16,480
parameter

00:13:13,440 --> 00:13:20,560
and yeah so within this uh

00:13:16,480 --> 00:13:23,839
callback we'll will hook on

00:13:20,560 --> 00:13:25,519
now that we have our websocket object

00:13:23,839 --> 00:13:27,920
this individual websocket object

00:13:25,519 --> 00:13:30,560
represents the web socket between

00:13:27,920 --> 00:13:31,519
the server and a particular client right

00:13:30,560 --> 00:13:34,399
wws

00:13:31,519 --> 00:13:35,600
represents the websocket between one

00:13:34,399 --> 00:13:38,959
server one client

00:13:35,600 --> 00:13:41,839
wss represents the websocket object for

00:13:38,959 --> 00:13:41,839
the particular server

00:13:42,000 --> 00:13:45,440
uh yeah so

00:13:46,240 --> 00:13:50,800
in this uh ws so on this particular

00:13:49,920 --> 00:13:52,880
connection

00:13:50,800 --> 00:13:55,040
we want to listen for messages right and

00:13:52,880 --> 00:13:58,399
then we want to handle those messages

00:13:55,040 --> 00:14:01,279
so on message it gets called

00:13:58,399 --> 00:14:02,880
with the message of the message sent

00:14:01,279 --> 00:14:04,959
through the websocket

00:14:02,880 --> 00:14:07,040
so remember when we said just now um

00:14:04,959 --> 00:14:09,440
websocket messages are strings right

00:14:07,040 --> 00:14:11,199
so it's very simple so when we get the

00:14:09,440 --> 00:14:11,680
message we want to return the reverse

00:14:11,199 --> 00:14:15,279
version

00:14:11,680 --> 00:14:17,600
of the message right as easy as just

00:14:15,279 --> 00:14:18,320
calling this long chain of functions

00:14:17,600 --> 00:14:20,399
because

00:14:18,320 --> 00:14:21,920
javascript strings don't have a built in

00:14:20,399 --> 00:14:23,760
reverse method

00:14:21,920 --> 00:14:25,440
but now that we reverse the message we

00:14:23,760 --> 00:14:26,160
can send it back through that same web

00:14:25,440 --> 00:14:28,399
socket

00:14:26,160 --> 00:14:30,320
with the call websocket sent so very

00:14:28,399 --> 00:14:31,440
simple right uh

00:14:30,320 --> 00:14:33,839
only two things that we need to know

00:14:31,440 --> 00:14:36,160
here is that

00:14:33,839 --> 00:14:38,480
you know handle the connection event on

00:14:36,160 --> 00:14:41,519
the entire websocket server

00:14:38,480 --> 00:14:43,279
handle message events on a particular

00:14:41,519 --> 00:14:44,720
websocket connection

00:14:43,279 --> 00:14:48,160
and of course we'll be able to send

00:14:44,720 --> 00:14:51,040
messages on to the websocket through

00:14:48,160 --> 00:14:53,360
our ws.send and over here it's just

00:14:51,040 --> 00:14:59,360
listening to

00:14:53,360 --> 00:15:02,880
logos adid for requests

00:14:59,360 --> 00:15:05,199
yep so this roughly illustrates

00:15:02,880 --> 00:15:07,279
how uh you know client server

00:15:05,199 --> 00:15:10,480
application using web sockets

00:15:07,279 --> 00:15:10,880
uh is structured now that we understand

00:15:10,480 --> 00:15:12,560
this

00:15:10,880 --> 00:15:14,800
we can move on to a more complicated use

00:15:12,560 --> 00:15:17,279
case and the first big app we're gonna

00:15:14,800 --> 00:15:18,160
tackle with today which is a simple

00:15:17,279 --> 00:15:21,199
group chat room

00:15:18,160 --> 00:15:27,120
right so as a demonstration let me just

00:15:21,199 --> 00:15:30,560
show you the completed product

00:15:27,120 --> 00:15:33,920
here it takes a while to load

00:15:30,560 --> 00:15:33,920
i should have opened this just now

00:15:36,240 --> 00:15:44,639
that's in the link yeah

00:15:41,680 --> 00:15:45,040
great so someone else could join the

00:15:44,639 --> 00:15:48,880
room

00:15:45,040 --> 00:15:48,880
it'll be nice but

00:15:49,040 --> 00:15:54,720
right so now we have like multiple users

00:15:51,839 --> 00:15:56,959
right in the room so it's like hello

00:15:54,720 --> 00:15:58,079
you just type hello if you're observing

00:15:56,959 --> 00:16:01,519
right now right

00:15:58,079 --> 00:16:02,639
you're also yeah

00:16:01,519 --> 00:16:05,360
if you're looking at the chat right now

00:16:02,639 --> 00:16:05,360
you'll see um

00:16:07,040 --> 00:16:11,680
you see the message pushed instantly to

00:16:09,199 --> 00:16:14,560
your client

00:16:11,680 --> 00:16:14,560
or to your browser

00:16:18,639 --> 00:16:22,240
you can see that everyone has a unique

00:16:21,120 --> 00:16:24,720
identifier

00:16:22,240 --> 00:16:25,920
it's like a two word identifier and then

00:16:24,720 --> 00:16:29,279
everyone has a

00:16:25,920 --> 00:16:31,600
flag right beside their their name

00:16:29,279 --> 00:16:33,120
all right uh because we can find it out

00:16:31,600 --> 00:16:35,279
through the ip address

00:16:33,120 --> 00:16:36,800
right and then one last feature is i

00:16:35,279 --> 00:16:38,880
wonder this is profanity

00:16:36,800 --> 00:16:40,240
right honest feature is that there's a

00:16:38,880 --> 00:16:42,639
profanity blocker

00:16:40,240 --> 00:16:45,199
so if i send a message with some

00:16:42,639 --> 00:16:45,199
profanity

00:16:47,680 --> 00:16:52,320
yeah i get a message saying the message

00:16:50,240 --> 00:16:54,079
contain profanity and was not sent

00:16:52,320 --> 00:16:55,759
so these are the main features that we

00:16:54,079 --> 00:16:57,519
want for our application

00:16:55,759 --> 00:16:59,279
so let's just go through how we can

00:16:57,519 --> 00:17:01,759
build this very quickly

00:16:59,279 --> 00:17:05,120
so i've prepared a boilerplate

00:17:01,759 --> 00:17:10,319
application already

00:17:05,120 --> 00:17:10,319
over here you all can see the link

00:17:10,640 --> 00:17:13,760
let's send it to the group

00:17:16,959 --> 00:17:19,839
have a drink

00:17:33,520 --> 00:17:43,360
okay so now i've sent a link

00:17:37,919 --> 00:17:43,360
let's start by cloning the repository

00:17:44,840 --> 00:17:47,840
again

00:17:58,840 --> 00:18:01,840
oh

00:18:10,400 --> 00:18:14,000
we have a cat app starter on your

00:18:12,640 --> 00:18:16,559
repository with the boilerplate

00:18:14,000 --> 00:18:18,240
code i have had it i have most of the

00:18:16,559 --> 00:18:20,880
things already implemented

00:18:18,240 --> 00:18:22,080
um so all we need to do is to hook it up

00:18:20,880 --> 00:18:26,799
to web sockets

00:18:22,080 --> 00:18:29,440
send the appropriate messages right

00:18:26,799 --> 00:18:30,400
so just to briefly go through right we

00:18:29,440 --> 00:18:31,600
want to

00:18:30,400 --> 00:18:34,559
build a group chat room with this

00:18:31,600 --> 00:18:34,960
behavior uh when the user enters the

00:18:34,559 --> 00:18:37,120
room

00:18:34,960 --> 00:18:38,320
the user is assigned the random username

00:18:37,120 --> 00:18:39,600
the admin board will

00:18:38,320 --> 00:18:41,760
inform everyone that this user has

00:18:39,600 --> 00:18:43,520
joined the room the user is added to the

00:18:41,760 --> 00:18:46,480
display of online users

00:18:43,520 --> 00:18:48,320
when the user sends a message uh first

00:18:46,480 --> 00:18:49,200
since you know we think we want this to

00:18:48,320 --> 00:18:51,760
be a pg

00:18:49,200 --> 00:18:53,039
place we first run a profanity check on

00:18:51,760 --> 00:18:54,720
the send message

00:18:53,039 --> 00:18:56,480
if there's no profanity then we can send

00:18:54,720 --> 00:18:57,679
a message to the group every other user

00:18:56,480 --> 00:18:59,679
in the group can see it

00:18:57,679 --> 00:19:02,559
if there is profanity admin bot will

00:18:59,679 --> 00:19:04,640
send the message to the offending user

00:19:02,559 --> 00:19:05,679
telling them that oh no message of

00:19:04,640 --> 00:19:08,640
profanity

00:19:05,679 --> 00:19:09,280
so the message is not said when a user

00:19:08,640 --> 00:19:11,039
leaves the room

00:19:09,280 --> 00:19:12,880
their main bot sends a message to

00:19:11,039 --> 00:19:14,400
everyone in the group informing that the

00:19:12,880 --> 00:19:17,120
user has left the room

00:19:14,400 --> 00:19:19,360
and the user is removed from the display

00:19:17,120 --> 00:19:20,880
and lastly um

00:19:19,360 --> 00:19:23,039
we want to display the user's origin

00:19:20,880 --> 00:19:24,080
country which find out from their ip

00:19:23,039 --> 00:19:25,840
addresses

00:19:24,080 --> 00:19:27,760
and then to update the number of active

00:19:25,840 --> 00:19:32,960
users currently in the chat

00:19:27,760 --> 00:19:36,480
so this repository over here has the

00:19:32,960 --> 00:19:38,480
following directory structure as roughly

00:19:36,480 --> 00:19:42,559
this this structure

00:19:38,480 --> 00:19:45,120
so oh yeah i missed it huh

00:19:42,559 --> 00:19:46,960
the name's wrong but okay right there's

00:19:45,120 --> 00:19:50,720
no modules with the dependencies a

00:19:46,960 --> 00:19:50,720
public folder containing the front end

00:19:50,840 --> 00:19:53,600
code

00:19:52,000 --> 00:19:55,760
a source directory containing the

00:19:53,600 --> 00:19:58,960
backing code and app.js is

00:19:55,760 --> 00:19:58,960
the entry point to the app

00:20:03,600 --> 00:20:07,039
actually point to that here right okay

00:20:06,480 --> 00:20:08,720
right

00:20:07,039 --> 00:20:10,480
so i've already implemented most of the

00:20:08,720 --> 00:20:11,919
code but you can

00:20:10,480 --> 00:20:14,000
look around the repository to understand

00:20:11,919 --> 00:20:14,799
how the application works and today we

00:20:14,000 --> 00:20:16,559
only need to

00:20:14,799 --> 00:20:19,039
modify two files to get a full working

00:20:16,559 --> 00:20:22,720
application

00:20:19,039 --> 00:20:24,880
right so before we start let's

00:20:22,720 --> 00:20:26,240
install dependencies since i've just

00:20:24,880 --> 00:20:29,600
cloned it

00:20:26,240 --> 00:20:29,600
quickly inside the dependencies right

00:20:32,840 --> 00:20:35,840
now

00:20:36,720 --> 00:20:39,520
everything's installed

00:20:42,000 --> 00:20:45,280
i've installed oh dear

00:20:46,880 --> 00:20:52,640
oh boy i should have known this would

00:20:50,400 --> 00:20:52,640
happen

00:21:00,840 --> 00:21:03,840
hmm

00:21:14,960 --> 00:21:18,159
if you're having issues like me it's

00:21:16,799 --> 00:21:19,840
because i have a few dependencies in

00:21:18,159 --> 00:21:31,840
there that don't run very well

00:21:19,840 --> 00:21:31,840
i'm just gonna push and update right now

00:21:47,760 --> 00:21:59,840
all right so now let's just start over

00:22:06,559 --> 00:22:10,320
this is a very simple uh bare bones you

00:22:09,520 --> 00:22:12,559
know front end

00:22:10,320 --> 00:22:13,840
it's not it's connected as it's

00:22:12,559 --> 00:22:15,120
connected to the server

00:22:13,840 --> 00:22:16,960
it's not actually doing anything right

00:22:15,120 --> 00:22:18,400
now so you can see like things aren't

00:22:16,960 --> 00:22:21,440
updating

00:22:18,400 --> 00:22:21,440
if i open a new tab

00:22:21,600 --> 00:22:27,840
uh open new tab

00:22:24,799 --> 00:22:30,640
nothing really updates

00:22:27,840 --> 00:22:31,679
and if i open my dev tools it's not

00:22:30,640 --> 00:22:34,559
screaming at me

00:22:31,679 --> 00:22:37,840
okay that's pretty good but yeah it's

00:22:34,559 --> 00:22:37,840
not working it's not functioning

00:22:38,559 --> 00:22:42,080
typing a message doesn't do

00:22:43,280 --> 00:22:46,799
so this is the you know rough structure

00:22:45,039 --> 00:22:48,159
of that now let's go through what's

00:22:46,799 --> 00:22:52,480
going on

00:22:48,159 --> 00:22:52,480
uh what we have what we don't have right

00:22:52,840 --> 00:22:56,159
so to roughly go through we'll start

00:22:55,280 --> 00:22:58,640
from the server side

00:22:56,159 --> 00:22:59,840
right so our entry point to the

00:22:58,640 --> 00:23:02,080
application is fjs

00:22:59,840 --> 00:23:03,679
it's the same as the simple server that

00:23:02,080 --> 00:23:05,520
we had just now

00:23:03,679 --> 00:23:07,039
we have our internal dependencies of our

00:23:05,520 --> 00:23:10,080
external dependencies

00:23:07,039 --> 00:23:11,360
we have some uh additional packages a

00:23:10,080 --> 00:23:12,880
heartbeat

00:23:11,360 --> 00:23:15,520
is basically a mechanism for us to

00:23:12,880 --> 00:23:18,080
detect our disconnection

00:23:15,520 --> 00:23:19,360
yeah in involuntarily this involuntary

00:23:18,080 --> 00:23:22,720
disconnects

00:23:19,360 --> 00:23:27,200
messaging is the crux of today's

00:23:22,720 --> 00:23:30,080
uh course then we serve

00:23:27,200 --> 00:23:31,600
the static website the study web page in

00:23:30,080 --> 00:23:33,919
public with express

00:23:31,600 --> 00:23:35,200
we'll talk about it later and then our

00:23:33,919 --> 00:23:36,400
websocket will start our websocket

00:23:35,200 --> 00:23:38,240
server

00:23:36,400 --> 00:23:39,679
we will attach all our event handlers

00:23:38,240 --> 00:23:42,720
right

00:23:39,679 --> 00:23:45,120
so on the back end

00:23:42,720 --> 00:23:46,799
right we have some i've created some

00:23:45,120 --> 00:23:49,679
utility classes

00:23:46,799 --> 00:23:50,720
just for ease of programming so we have

00:23:49,679 --> 00:23:53,520
a user class

00:23:50,720 --> 00:23:56,480
with the associated web socket uh the

00:23:53,520 --> 00:23:59,919
user's username the ip and their country

00:23:56,480 --> 00:24:02,480
and then just for you know simplicity

00:23:59,919 --> 00:24:04,480
i have a getter on here that returns the

00:24:02,480 --> 00:24:06,880
visible attributes so you know things

00:24:04,480 --> 00:24:11,039
that aren't the

00:24:06,880 --> 00:24:11,039
sensitive information like the websocket

00:24:12,000 --> 00:24:14,240
right

00:24:15,440 --> 00:24:21,919
so utils is just utility functions

00:24:19,120 --> 00:24:22,799
so over here i have a simple utility

00:24:21,919 --> 00:24:24,640
function

00:24:22,799 --> 00:24:26,159
to get the country code from the ip

00:24:24,640 --> 00:24:29,279
address of the user

00:24:26,159 --> 00:24:32,480
uh i will not let's not i won't cover

00:24:29,279 --> 00:24:34,000
you know what it is how exactly it works

00:24:32,480 --> 00:24:36,480
but it's very simply just calling the

00:24:34,000 --> 00:24:39,200
geopark the jio plugin

00:24:36,480 --> 00:24:40,000
api contains profanity is the same

00:24:39,200 --> 00:24:41,600
similar

00:24:40,000 --> 00:24:44,159
it just calls an api that checks for

00:24:41,600 --> 00:24:44,159
profanity

00:24:44,559 --> 00:24:49,039
the heartbeat is just sending pong

00:24:47,600 --> 00:24:50,240
messages to make sure that

00:24:49,039 --> 00:24:52,640
the client on the other side is still

00:24:50,240 --> 00:24:55,600
alive if it's not live

00:24:52,640 --> 00:24:58,000
uh we'll admit the disconnection event

00:24:55,600 --> 00:25:00,640
this we will use later

00:24:58,000 --> 00:25:02,559
uh to detect when someone disconnects

00:25:00,640 --> 00:25:03,919
and then

00:25:02,559 --> 00:25:05,919
do the appropriate thing right tell

00:25:03,919 --> 00:25:08,720
everybody someone has left the

00:25:05,919 --> 00:25:11,520
chat room but the main part is the

00:25:08,720 --> 00:25:11,520
messaging.js

00:25:12,080 --> 00:25:16,799
so over here it's similar to our simple

00:25:15,520 --> 00:25:18,559
server just now but with a few

00:25:16,799 --> 00:25:21,120
additional additional

00:25:18,559 --> 00:25:23,279
things so we have niceware which which

00:25:21,120 --> 00:25:26,320
generates the random profit pass phrases

00:25:23,279 --> 00:25:28,240
which act as the user ids moment.js is

00:25:26,320 --> 00:25:31,360
just a library to handle

00:25:28,240 --> 00:25:33,039
timestamps our internal modules

00:25:31,360 --> 00:25:36,720
utilities and classes

00:25:33,039 --> 00:25:38,080
and here we have a large bind

00:25:36,720 --> 00:25:40,159
which will be called on the websocket

00:25:38,080 --> 00:25:41,520
server

00:25:40,159 --> 00:25:44,559
and then we will listen to the

00:25:41,520 --> 00:25:47,039
connection event but here

00:25:44,559 --> 00:25:48,159
we have a user's object the big fat uses

00:25:47,039 --> 00:25:51,039
object to manage

00:25:48,159 --> 00:25:52,640
the users in the room just to act as a

00:25:51,039 --> 00:25:55,440
sort of a dictionary to

00:25:52,640 --> 00:25:56,640
you know manage users and here we'll

00:25:55,440 --> 00:25:58,480
call

00:25:56,640 --> 00:26:01,200
the on connection and then we'll do all

00:25:58,480 --> 00:26:01,200
the good stuff here

00:26:01,760 --> 00:26:05,760
and uh here's a utility function called

00:26:04,720 --> 00:26:08,799
broadcast

00:26:05,760 --> 00:26:09,600
which just takes two values i'll send in

00:26:08,799 --> 00:26:13,919
a message

00:26:09,600 --> 00:26:16,400
so it will send uh via websockets

00:26:13,919 --> 00:26:17,600
a message to every user except for the

00:26:16,400 --> 00:26:19,120
sender

00:26:17,600 --> 00:26:20,799
and then if the sender is new it will

00:26:19,120 --> 00:26:21,120
send the message to every user right

00:26:20,799 --> 00:26:24,159
it's

00:26:21,120 --> 00:26:26,400
you know it broadcasts

00:26:24,159 --> 00:26:27,840
right so that's this back-end setup

00:26:26,400 --> 00:26:30,880
let's go look at the

00:26:27,840 --> 00:26:31,360
our front-end files it's pretty basic

00:26:30,880 --> 00:26:32,799
stuff

00:26:31,360 --> 00:26:35,840
actually it's not very basic so there's

00:26:32,799 --> 00:26:38,640
a lot of stuff but

00:26:35,840 --> 00:26:41,039
what we're concerned with will be the

00:26:38,640 --> 00:26:44,159
utils

00:26:41,039 --> 00:26:45,760
uh js here which just contains a bunch

00:26:44,159 --> 00:26:46,480
of bunch of utility functions that allow

00:26:45,760 --> 00:26:49,760
us to

00:26:46,480 --> 00:26:53,039
manipulate the dom which just

00:26:49,760 --> 00:26:54,480
you know helps us more quickly do up our

00:26:53,039 --> 00:26:55,840
ui interactions

00:26:54,480 --> 00:26:57,600
so you don't need to think about them

00:26:55,840 --> 00:27:00,720
doing uh we don't need to think about

00:26:57,600 --> 00:27:02,640
how to make certain things

00:27:00,720 --> 00:27:05,760
appear disappear we just need to call

00:27:02,640 --> 00:27:08,960
these methods so for example

00:27:05,760 --> 00:27:08,960
say if i wanted to add a user

00:27:10,320 --> 00:27:23,200
or add username

00:27:20,320 --> 00:27:25,679
so country is a country is a two letter

00:27:23,200 --> 00:27:30,080
country code

00:27:25,679 --> 00:27:35,840
so add user add the user to sidebar

00:27:30,080 --> 00:27:35,840
remove user does the reverse

00:27:37,520 --> 00:27:40,159
removes it

00:27:42,960 --> 00:27:48,240
it's like not really maintaining any

00:27:44,159 --> 00:27:51,200
state right here user

00:27:48,240 --> 00:27:51,200
here's everything here

00:27:51,520 --> 00:27:54,480
that user account

00:27:56,720 --> 00:28:05,600
changes the discount over here

00:28:02,799 --> 00:28:05,600
changes this here

00:28:06,240 --> 00:28:17,840
add a main message

00:28:28,840 --> 00:28:31,840
message

00:28:34,640 --> 00:28:37,919
add an ending message like this

00:28:38,720 --> 00:28:47,200
adding a user message just

00:28:43,520 --> 00:28:47,200
same thing all right user

00:28:52,960 --> 00:28:59,840
there's a text field

00:29:03,440 --> 00:29:09,600
now of course hazard is user field so

00:29:06,880 --> 00:29:12,240
this user just you know just tells it

00:29:09,600 --> 00:29:14,880
whether to

00:29:12,240 --> 00:29:14,880
i messed up

00:29:16,960 --> 00:29:20,320
or add user message sorry

00:29:22,000 --> 00:29:27,120
i use a message as a message here

00:29:25,120 --> 00:29:30,320
if we set this user to false it will

00:29:27,120 --> 00:29:33,919
show up on the left side instead

00:29:30,320 --> 00:29:37,440
that's all simple before

00:29:33,919 --> 00:29:37,440
so these utility messages

00:29:38,640 --> 00:29:45,120
utility functions rather uh

00:29:42,159 --> 00:29:46,000
we can now move on to you know building

00:29:45,120 --> 00:29:50,080
the application

00:29:46,000 --> 00:29:52,960
right so let's go ahead by step

00:29:50,080 --> 00:29:55,120
uh we've already illustrated what we

00:29:52,960 --> 00:29:58,320
have how we start

00:29:55,120 --> 00:29:59,760
in the code in fact a lot of today's

00:29:58,320 --> 00:30:00,880
workshop will be actually uncommenting

00:29:59,760 --> 00:30:02,320
things

00:30:00,880 --> 00:30:09,840
and just making sure we get things right

00:30:02,320 --> 00:30:09,840
right so let's go through the flow a bit

00:30:10,880 --> 00:30:16,000
so step one step one happens in

00:30:13,760 --> 00:30:20,080
messaging.js

00:30:16,000 --> 00:30:22,960
so um with our

00:30:20,080 --> 00:30:23,919
we're right now in the websocket server

00:30:22,960 --> 00:30:26,480
on connection

00:30:23,919 --> 00:30:28,720
so this function is called when uh

00:30:26,480 --> 00:30:32,480
connection a new connection is made

00:30:28,720 --> 00:30:37,520
to the websocket server right

00:30:32,480 --> 00:30:40,640
uh we generate a unique a passphrase

00:30:37,520 --> 00:30:42,720
and then with this request object we get

00:30:40,640 --> 00:30:46,880
the header

00:30:42,720 --> 00:30:49,919
the ip header the header of the client

00:30:46,880 --> 00:30:51,200
which just tells us the ip address and

00:30:49,919 --> 00:30:55,760
then we already call

00:30:51,200 --> 00:30:57,039
the um utility method to get the country

00:30:55,760 --> 00:30:59,519
code

00:30:57,039 --> 00:31:00,960
and we have the current timestamp and we

00:30:59,519 --> 00:31:04,159
create a new user

00:31:00,960 --> 00:31:05,519
since we user the on the user

00:31:04,159 --> 00:31:06,320
information stored on the server side

00:31:05,519 --> 00:31:07,760
will be

00:31:06,320 --> 00:31:08,960
the username the ip address and the

00:31:07,760 --> 00:31:09,919
country they'll be all so we can create

00:31:08,960 --> 00:31:11,600
a new user

00:31:09,919 --> 00:31:13,279
and then add this new user to our

00:31:11,600 --> 00:31:14,960
dictionary of users over here

00:31:13,279 --> 00:31:16,960
i say dictionary because you know it's a

00:31:14,960 --> 00:31:18,640
python term but um

00:31:16,960 --> 00:31:20,880
it's a javascript object object

00:31:18,640 --> 00:31:22,399
dictionary

00:31:20,880 --> 00:31:25,919
they're different but you know i'm using

00:31:22,399 --> 00:31:25,919
it like the python dictionary

00:31:26,320 --> 00:31:32,559
so what we first want to do right is

00:31:30,799 --> 00:31:35,279
when the user first connects to the

00:31:32,559 --> 00:31:37,039
websocket server

00:31:35,279 --> 00:31:39,360
we want to send the user the user

00:31:37,039 --> 00:31:40,399
details so how do we send these details

00:31:39,360 --> 00:31:42,559
right

00:31:40,399 --> 00:31:43,440
so um you know like i said just now

00:31:42,559 --> 00:31:46,320
right

00:31:43,440 --> 00:31:48,080
web sockets websocket messages are just

00:31:46,320 --> 00:31:50,480
plain strings or

00:31:48,080 --> 00:31:51,360
raw data right there is no type to these

00:31:50,480 --> 00:31:53,679
messages

00:31:51,360 --> 00:31:55,039
so how can we enforce a bit of typing to

00:31:53,679 --> 00:31:57,840
the type that you know

00:31:55,039 --> 00:32:00,080
how does the client tell that this

00:31:57,840 --> 00:32:02,159
message is a particular type of message

00:32:00,080 --> 00:32:03,919
there's only really one way which is to

00:32:02,159 --> 00:32:08,240
send a json

00:32:03,919 --> 00:32:11,360
string right so

00:32:08,240 --> 00:32:13,360
in the absence of the

00:32:11,360 --> 00:32:14,559
the framework or rather the protocol

00:32:13,360 --> 00:32:15,600
allowing us to send messages of

00:32:14,559 --> 00:32:17,519
different types

00:32:15,600 --> 00:32:19,360
we have to come up with our own message

00:32:17,519 --> 00:32:22,880
schemas

00:32:19,360 --> 00:32:25,039
so over here um we'll just define

00:32:22,880 --> 00:32:26,399
at the start some of the schemas used in

00:32:25,039 --> 00:32:28,240
this application

00:32:26,399 --> 00:32:30,320
and it's important that you know once we

00:32:28,240 --> 00:32:32,640
define these schemas we stick to them

00:32:30,320 --> 00:32:33,840
if not things get messy it's not very

00:32:32,640 --> 00:32:36,159
good right

00:32:33,840 --> 00:32:37,600
so for client server messages clients

00:32:36,159 --> 00:32:38,240
don't really need to do anything to the

00:32:37,600 --> 00:32:40,240
server

00:32:38,240 --> 00:32:41,679
they just need to send messages so

00:32:40,240 --> 00:32:42,000
there's a message from user with the

00:32:41,679 --> 00:32:43,840
text

00:32:42,000 --> 00:32:45,440
some text right based on the websocket

00:32:43,840 --> 00:32:46,640
connection the server already knows the

00:32:45,440 --> 00:32:49,120
identity of the user

00:32:46,640 --> 00:32:50,880
so it's fine all right but then for

00:32:49,120 --> 00:32:52,720
server to client messages we need to

00:32:50,880 --> 00:32:54,000
you know handle a lot of use cases so

00:32:52,720 --> 00:32:56,000
let's go through them one by one

00:32:54,000 --> 00:32:57,519
right so at the start when the first

00:32:56,000 --> 00:33:00,080
when the user first joins the

00:32:57,519 --> 00:33:01,600
chat room the user has not been assigned

00:33:00,080 --> 00:33:04,559
a username

00:33:01,600 --> 00:33:05,679
uh they you know they don't really know

00:33:04,559 --> 00:33:08,880
their

00:33:05,679 --> 00:33:11,600
country or yeah

00:33:08,880 --> 00:33:12,320
so the server needs to tell the client

00:33:11,600 --> 00:33:14,799
you know

00:33:12,320 --> 00:33:16,000
um this is your username this is the

00:33:14,799 --> 00:33:17,919
flag you should put on

00:33:16,000 --> 00:33:19,039
so you use that we use the welcome

00:33:17,919 --> 00:33:22,080
message for it

00:33:19,039 --> 00:33:24,240
we'll just call it a type welcome so how

00:33:22,080 --> 00:33:27,600
we distinguish between messages on the

00:33:24,240 --> 00:33:30,480
client side is that we will uh you know

00:33:27,600 --> 00:33:32,320
this will this json this will be a json

00:33:30,480 --> 00:33:36,080
string will be sent over

00:33:32,320 --> 00:33:38,080
we d0 we dc realize it we pass it

00:33:36,080 --> 00:33:39,600
deserialize it and then check the type

00:33:38,080 --> 00:33:40,799
of message and that's how we

00:33:39,600 --> 00:33:43,440
tell the type you know tell difference

00:33:40,799 --> 00:33:45,360
between different messages right so

00:33:43,440 --> 00:33:46,720
we'll just have a welcome message we

00:33:45,360 --> 00:33:48,640
have a timestamp

00:33:46,720 --> 00:33:50,840
and then this receiver field just tells

00:33:48,640 --> 00:33:52,000
the user uh this is your user

00:33:50,840 --> 00:33:54,559
information

00:33:52,000 --> 00:33:55,919
the update state message uh you know

00:33:54,559 --> 00:33:57,519
we'll use it

00:33:55,919 --> 00:33:58,559
by the server the server will use it to

00:33:57,519 --> 00:34:00,720
tell the client about the state or chat

00:33:58,559 --> 00:34:04,159
room so who's in the chat room who's not

00:34:00,720 --> 00:34:05,919
so this is time update state

00:34:04,159 --> 00:34:07,279
the state object it's a state object we

00:34:05,919 --> 00:34:10,480
have a user's object

00:34:07,279 --> 00:34:12,159
which is uh uses array which is an array

00:34:10,480 --> 00:34:15,839
of users

00:34:12,159 --> 00:34:18,399
so users to the client the user

00:34:15,839 --> 00:34:20,800
is you know comprises of two attributes

00:34:18,399 --> 00:34:23,839
a username and a country

00:34:20,800 --> 00:34:24,560
and then last error messages there we

00:34:23,839 --> 00:34:28,399
have a few more

00:34:24,560 --> 00:34:30,000
error messages the server we use

00:34:28,399 --> 00:34:31,440
the server uses it to tell the client

00:34:30,000 --> 00:34:33,760
that something went wrong

00:34:31,440 --> 00:34:34,720
type error with a message field and main

00:34:33,760 --> 00:34:38,320
message

00:34:34,720 --> 00:34:41,200
uh this is just the main announcement um

00:34:38,320 --> 00:34:43,200
same format as the admin message and

00:34:41,200 --> 00:34:46,560
lastly a user message

00:34:43,200 --> 00:34:48,639
the user message a user message should

00:34:46,560 --> 00:34:50,639
include another view sorry

00:34:48,639 --> 00:34:52,960
a user message has another an additional

00:34:50,639 --> 00:34:52,960
view

00:34:58,560 --> 00:35:01,760
the user message should have another

00:35:00,160 --> 00:35:05,200
field

00:35:01,760 --> 00:35:07,760
no ah you should have a username country

00:35:05,200 --> 00:35:07,760
and texture

00:35:10,320 --> 00:35:17,839
country next yeah

00:35:18,880 --> 00:35:23,520
name country text which i have a

00:35:21,359 --> 00:35:31,839
username and country view as well

00:35:23,520 --> 00:35:31,839
so if you have a username field

00:35:56,839 --> 00:35:59,839
and

00:36:00,320 --> 00:36:06,320
text oops sorry it's a center field

00:36:06,880 --> 00:36:09,359
extreme

00:36:10,800 --> 00:36:27,839
might maybe

00:36:32,640 --> 00:36:36,720
all right let's get back to this that

00:36:34,880 --> 00:36:41,440
was embarrassing

00:36:36,720 --> 00:36:43,520
let's send a few in the text view

00:36:41,440 --> 00:36:46,640
all right i'm just going to double check

00:36:43,520 --> 00:36:46,640
make sure i got everything right

00:36:47,359 --> 00:37:09,839
i'm in message admin message message

00:36:54,400 --> 00:37:09,839
move to text view another message field

00:37:20,839 --> 00:37:25,119
sorry all right it's a text view not a

00:37:22,560 --> 00:37:25,119
message field

00:37:25,359 --> 00:37:28,720
yeah but this is a user message the

00:37:27,359 --> 00:37:31,359
server tells the client

00:37:28,720 --> 00:37:32,880
okay this user sent the message to the

00:37:31,359 --> 00:37:34,800
chat room

00:37:32,880 --> 00:37:36,400
so they'll be all so that's the step

00:37:34,800 --> 00:37:40,960
step-by-step right from the users

00:37:36,400 --> 00:37:40,960
from the from the server side

00:37:44,640 --> 00:37:49,200
so step one when the user first connects

00:37:47,520 --> 00:37:50,480
to the websocket server so you see it's

00:37:49,200 --> 00:37:54,000
inside this

00:37:50,480 --> 00:37:55,359
connection event the user just connect a

00:37:54,000 --> 00:37:57,280
new user has connected the web socket

00:37:55,359 --> 00:37:59,040
server

00:37:57,280 --> 00:38:00,320
we've created a username for them we

00:37:59,040 --> 00:38:02,560
found out the ip

00:38:00,320 --> 00:38:04,400
founded the country we have a timestamp

00:38:02,560 --> 00:38:05,839
right so now we want to send the user

00:38:04,400 --> 00:38:09,920
their user details

00:38:05,839 --> 00:38:12,160
all right so how do we do that

00:38:09,920 --> 00:38:13,359
we just simply again like just now we

00:38:12,160 --> 00:38:14,480
learned that we can send messages

00:38:13,359 --> 00:38:17,599
through websocket

00:38:14,480 --> 00:38:18,800
using websocket.com ws.10 right

00:38:17,599 --> 00:38:21,440
so just calling the same method on

00:38:18,800 --> 00:38:24,720
webtalk object so now this will send

00:38:21,440 --> 00:38:24,720
about a welcome message

00:38:25,920 --> 00:38:29,040
and then it'll tell the user okay these

00:38:27,760 --> 00:38:32,400
are your details

00:38:29,040 --> 00:38:34,640
right next we need to update the

00:38:32,400 --> 00:38:37,440
users all users actually with a list of

00:38:34,640 --> 00:38:40,720
currently active users

00:38:37,440 --> 00:38:43,040
so called broadcast remember here

00:38:40,720 --> 00:38:45,200
broadcast what broadcast does

00:38:43,040 --> 00:38:46,960
is that broadcast now does is that it

00:38:45,200 --> 00:38:48,720
will send a

00:38:46,960 --> 00:38:52,240
message to every websocket other than

00:38:48,720 --> 00:38:52,240
the the user the sender

00:38:53,280 --> 00:39:00,400
so send everyone this updates a message

00:38:56,400 --> 00:39:03,599
with the state updated state

00:39:00,400 --> 00:39:06,400
and this extremely long statement here

00:39:03,599 --> 00:39:08,079
basically it returns an array of the all

00:39:06,400 --> 00:39:11,920
the user objects within the

00:39:08,079 --> 00:39:16,000
uh well here up here

00:39:11,920 --> 00:39:19,200
this user's object here then

00:39:16,000 --> 00:39:22,480
we'll send or rather broadcast

00:39:19,200 --> 00:39:25,680
the admin message to everyone let's say

00:39:22,480 --> 00:39:27,359
okay this username is a join chat

00:39:25,680 --> 00:39:29,760
easy peasy it's just a bunch of messages

00:39:27,359 --> 00:39:31,280
sending thanks

00:39:29,760 --> 00:39:33,599
what happens when the client sends a

00:39:31,280 --> 00:39:33,599
message

00:39:34,560 --> 00:39:39,839
first you need to check the message for

00:39:37,200 --> 00:39:39,839
profanity

00:39:40,839 --> 00:39:45,200
right

00:39:42,960 --> 00:39:45,200
so

00:39:46,560 --> 00:39:51,920
well first we need to get text right so

00:39:49,680 --> 00:39:51,920
this

00:39:53,119 --> 00:39:59,359
this payload here is a json string it's

00:39:56,160 --> 00:40:02,880
serialized so we need to deserialize it

00:39:59,359 --> 00:40:02,880
so we do that with json.pass

00:40:03,920 --> 00:40:12,800
and to get the actual text message

00:40:07,520 --> 00:40:15,839
we remember that it's on this

00:40:12,800 --> 00:40:18,960
text property attribute

00:40:15,839 --> 00:40:18,960
which is called text

00:40:20,160 --> 00:40:24,800
right then that's all right we have the

00:40:22,839 --> 00:40:26,400
text now i'm going to check if it

00:40:24,800 --> 00:40:29,440
contains profanity

00:40:26,400 --> 00:40:31,280
so to check if it contains profanity you

00:40:29,440 --> 00:40:34,480
just call utils

00:40:31,280 --> 00:40:38,079
dot contains profanity and

00:40:34,480 --> 00:40:40,960
with the text now remember over here

00:40:38,079 --> 00:40:42,319
utils dot check contains profanity is an

00:40:40,960 --> 00:40:45,680
async function

00:40:42,319 --> 00:40:48,000
so uh if you know to get this to work

00:40:45,680 --> 00:40:52,000
properly we need to use a weight

00:40:48,000 --> 00:40:53,440
here now if the a is profanity

00:40:52,000 --> 00:40:55,200
then we want to send a message only to

00:40:53,440 --> 00:41:07,839
the user

00:40:55,200 --> 00:41:07,839
so with things provided

00:41:17,760 --> 00:41:22,880
so we send them an error message with a

00:41:19,839 --> 00:41:24,240
timestamp see we have to type them here

00:41:22,880 --> 00:41:25,440
and you know let's figure out what

00:41:24,240 --> 00:41:28,480
texture we send right we have the

00:41:25,440 --> 00:41:31,920
message so we'll just inform them

00:41:28,480 --> 00:41:33,900
this message contains

00:41:31,920 --> 00:41:37,010
profanity

00:41:33,900 --> 00:41:37,010
[Music]

00:41:42,800 --> 00:41:46,560
if there is if there's no profanity okay

00:41:45,359 --> 00:41:48,640
if you're thinking it's profanity send a

00:41:46,560 --> 00:41:51,520
message and we'll just return it here

00:41:48,640 --> 00:41:53,920
if there's no profanity then we will

00:41:51,520 --> 00:41:58,720
broadcast it to everyone

00:41:53,920 --> 00:41:58,720
so the text will be next

00:41:59,680 --> 00:42:04,319
so next on disconnect

00:42:02,880 --> 00:42:06,400
when you use a disconnect from the

00:42:04,319 --> 00:42:09,119
websocket server we just want to tell

00:42:06,400 --> 00:42:09,119
everyone that

00:42:09,359 --> 00:42:14,400
just wanna tell anyone someone has left

00:42:11,280 --> 00:42:14,400
right so

00:42:15,200 --> 00:42:18,720
which is you know when someone

00:42:17,040 --> 00:42:20,480
disconnects

00:42:18,720 --> 00:42:22,480
uh we want to update everyone at the

00:42:20,480 --> 00:42:26,160
state so how do we get a state

00:42:22,480 --> 00:42:28,480
remember just now over here

00:42:26,160 --> 00:42:29,520
this is how we get a state from the uh

00:42:28,480 --> 00:42:32,960
users object

00:42:29,520 --> 00:42:34,960
over here right

00:42:32,960 --> 00:42:36,319
so we've already deleted the users from

00:42:34,960 --> 00:42:39,040
here

00:42:36,319 --> 00:42:40,400
we deleted the user the disconnected

00:42:39,040 --> 00:42:43,599
user from the

00:42:40,400 --> 00:42:47,520
this user's object over here

00:42:43,599 --> 00:42:47,520
i just need to convert it to a form

00:42:48,880 --> 00:42:53,280
convert it to an array instead of an

00:42:50,960 --> 00:42:59,839
object

00:42:53,280 --> 00:42:59,839
and then just tell everyone

00:43:02,560 --> 00:43:13,839
broadcast everyone this user has left

00:43:04,800 --> 00:43:13,839
the room

00:43:14,720 --> 00:43:18,480
and i think that's all that's all we

00:43:16,319 --> 00:43:20,800
need to do for the server side

00:43:18,480 --> 00:43:22,720
i mean it's a lot of uncommenting but

00:43:20,800 --> 00:43:24,160
the flow is very simple

00:43:22,720 --> 00:43:25,760
so now let's move on to the client side

00:43:24,160 --> 00:43:28,480
where we'll handle

00:43:25,760 --> 00:43:30,400
you know the messages coming in right so

00:43:28,480 --> 00:43:31,599
remember just now we have five different

00:43:30,400 --> 00:43:35,200
types of

00:43:31,599 --> 00:43:35,200
uh server client messages

00:43:36,560 --> 00:43:39,599
so now let's start to handle them one by

00:43:38,079 --> 00:43:42,880
one right

00:43:39,599 --> 00:43:44,560
so on the client side we store the

00:43:42,880 --> 00:43:46,880
the client's information in this myuser

00:43:44,560 --> 00:43:47,760
object which is initially empty at the

00:43:46,880 --> 00:43:50,720
start

00:43:47,760 --> 00:43:52,079
so a welcome when the client receives

00:43:50,720 --> 00:43:53,839
the

00:43:52,079 --> 00:43:57,119
this username and country will just set

00:43:53,839 --> 00:44:00,560
it as such

00:43:57,119 --> 00:44:05,839
on update we will

00:44:00,560 --> 00:44:05,839
what happens is we get the users

00:44:06,560 --> 00:44:13,280
we hear the users from the you know

00:44:09,760 --> 00:44:16,560
the new state right the new

00:44:13,280 --> 00:44:16,560
yeah the state from the server

00:44:17,200 --> 00:44:20,240
update the user account

00:44:20,720 --> 00:44:25,280
clear the sidebar and then you know

00:44:23,440 --> 00:44:28,640
insert the users one by one

00:44:25,280 --> 00:44:30,880
back into the sidebar when we have an

00:44:28,640 --> 00:44:33,920
error

00:44:30,880 --> 00:44:37,280
we just want to add an admin message

00:44:33,920 --> 00:44:41,839
and when we get a user message

00:44:37,280 --> 00:44:44,560
we'll call add user message over here

00:44:41,839 --> 00:44:46,319
so that'll be all the events that we

00:44:44,560 --> 00:44:48,880
need to handle

00:44:46,319 --> 00:44:50,160
now let's handle sending our information

00:44:48,880 --> 00:44:54,480
to the server

00:44:50,160 --> 00:44:58,240
right sending information to the server

00:44:54,480 --> 00:45:05,839
happens when you click on this form

00:44:58,240 --> 00:45:05,839
so over here let's start the server

00:45:10,000 --> 00:45:14,480
sending a message just happens when i

00:45:11,520 --> 00:45:14,480
enter this form right

00:45:16,079 --> 00:45:20,800
so what we want to do is that

00:45:20,880 --> 00:45:27,599
uh when we submit submit this form

00:45:25,040 --> 00:45:30,000
we will send the uh message through the

00:45:27,599 --> 00:45:31,599
websocket connection

00:45:30,000 --> 00:45:34,800
and then display displayed on our own

00:45:31,599 --> 00:45:34,800
cell on our site

00:45:40,960 --> 00:45:47,839
that will be all actually

00:45:54,079 --> 00:45:57,839
okay something has gone horribly wrong

00:45:58,319 --> 00:46:01,839
let's find out what happened

00:46:03,520 --> 00:46:07,010
hmm

00:46:03,890 --> 00:46:07,010
[Music]

00:46:09,839 --> 00:46:15,520
just use it oh right

00:46:14,319 --> 00:46:17,760
it's probably happening on the server

00:46:15,520 --> 00:46:17,760
side

00:46:19,119 --> 00:46:28,160
ah no user message

00:46:24,560 --> 00:46:30,560
over here we messed up so uh the the

00:46:28,160 --> 00:46:31,440
client is receiving all the clients

00:46:30,560 --> 00:46:34,480
because

00:46:31,440 --> 00:46:36,160
i broadcast now so this

00:46:34,480 --> 00:46:38,079
this message is being sent to all client

00:46:36,160 --> 00:46:40,960
web sockets so i just

00:46:38,079 --> 00:46:43,839
exclude the this particular user's one

00:46:40,960 --> 00:46:43,839
so uh

00:46:54,160 --> 00:46:57,599
this should be all fine and bendy

00:47:00,800 --> 00:47:03,280
hello

00:47:07,440 --> 00:47:11,839
all right

00:47:14,960 --> 00:47:18,000
let's put this to the side

00:47:19,839 --> 00:47:23,040
we have the behavior this user leaves

00:47:22,319 --> 00:47:26,240
the room

00:47:23,040 --> 00:47:28,960
it's updated sidebar is updated and

00:47:26,240 --> 00:47:29,839
yeah that's you know it's not a very

00:47:28,960 --> 00:47:31,440
complicated

00:47:29,839 --> 00:47:32,960
application we just need to figure out

00:47:31,440 --> 00:47:34,160
what we need to send send it

00:47:32,960 --> 00:47:37,280
appropriately

00:47:34,160 --> 00:47:38,559
that's all so this brings us to the end

00:47:37,280 --> 00:47:42,480
of the first part

00:47:38,559 --> 00:47:45,760
right so since we have

00:47:42,480 --> 00:47:46,559
uh since we're running out of time we

00:47:45,760 --> 00:47:48,800
might not go through

00:47:46,559 --> 00:47:49,599
browser apis we'll save it if you have

00:47:48,800 --> 00:47:52,079
time at the end

00:47:49,599 --> 00:47:53,040
i think daryl you ready yeah so there

00:47:52,079 --> 00:48:07,839
will now go through

00:47:53,040 --> 00:48:07,839
you know some basics bobby rtc

00:48:18,839 --> 00:48:21,839
yes

00:48:25,920 --> 00:48:32,240
okay so hi everybody so i'll go through

00:48:29,040 --> 00:48:33,920
introduction to webrtc

00:48:32,240 --> 00:48:35,839
which is another interesting technology

00:48:33,920 --> 00:48:38,000
right yeah

00:48:35,839 --> 00:48:38,000
so

00:48:39,920 --> 00:48:42,160
okay

00:48:46,839 --> 00:48:49,839
so

00:49:00,839 --> 00:49:03,839
um

00:49:13,680 --> 00:49:17,839
all right let's start

00:49:18,319 --> 00:49:23,200
okay i maybe some of y'all have heard of

00:49:21,359 --> 00:49:24,800
this web rtc before i mean you have

00:49:23,200 --> 00:49:25,200
helped if you have heard of web sockets

00:49:24,800 --> 00:49:30,880
maybe

00:49:25,200 --> 00:49:30,880
webrtc is familiar so what is webrtc

00:49:31,280 --> 00:49:34,480
from mozilla this is the definition that

00:49:33,280 --> 00:49:36,720
mozilla gave you know

00:49:34,480 --> 00:49:38,160
it's a open source project that provides

00:49:36,720 --> 00:49:38,720
web browsers with real-time

00:49:38,160 --> 00:49:42,160
communication

00:49:38,720 --> 00:49:43,680
via simple apis so it's really a html5

00:49:42,160 --> 00:49:47,520
specification same as

00:49:43,680 --> 00:49:50,079
web sockets and really right

00:49:47,520 --> 00:49:51,760
essentially oh it's an open source

00:49:50,079 --> 00:49:54,160
specification that you know

00:49:51,760 --> 00:49:56,800
developers follow and and there's a

00:49:54,160 --> 00:49:58,720
really a good set of apis to do this job

00:49:56,800 --> 00:50:01,200
and i think if you're wondering you know

00:49:58,720 --> 00:50:02,000
uh how different is web rtc from web

00:50:01,200 --> 00:50:03,359
sockets

00:50:02,000 --> 00:50:06,079
i think the key gis here is to

00:50:03,359 --> 00:50:08,960
understand what it is being utilized for

00:50:06,079 --> 00:50:10,880
right generally no web rtc is used for

00:50:08,960 --> 00:50:13,760
like real-time communications

00:50:10,880 --> 00:50:14,640
and and if you think about it right um

00:50:13,760 --> 00:50:18,000
technically

00:50:14,640 --> 00:50:18,960
you you it is feasible to try to do this

00:50:18,000 --> 00:50:21,040
job you know

00:50:18,960 --> 00:50:22,720
with just web sockets right to to do

00:50:21,040 --> 00:50:25,359
menial communication

00:50:22,720 --> 00:50:28,000
but uh if you remember what loan has

00:50:25,359 --> 00:50:29,920
changed right um

00:50:28,000 --> 00:50:32,400
communication like has to go through a

00:50:29,920 --> 00:50:34,000
central server and

00:50:32,400 --> 00:50:36,480
and this would kind of introduce some

00:50:34,000 --> 00:50:38,000
latency so it is not really the best

00:50:36,480 --> 00:50:41,040
product called to raise job but i will

00:50:38,000 --> 00:50:54,160
introduce more later afterwards

00:50:41,040 --> 00:50:56,480
yup so let's go

00:50:54,160 --> 00:50:58,559
yeah so let's see what we can do with

00:50:56,480 --> 00:51:01,119
rtc right um

00:50:58,559 --> 00:51:02,480
um we can have real-time video call

00:51:01,119 --> 00:51:04,480
communications you know

00:51:02,480 --> 00:51:06,079
as you may have you know interacted with

00:51:04,480 --> 00:51:07,920
before google meets

00:51:06,079 --> 00:51:09,119
stuff like google maps google hangouts

00:51:07,920 --> 00:51:12,319
your discord

00:51:09,119 --> 00:51:14,880
your audio and video you know um

00:51:12,319 --> 00:51:17,520
communication channels all this actually

00:51:14,880 --> 00:51:19,200
uh implement web rtc under the food

00:51:17,520 --> 00:51:21,119
so it's it's really interesting what

00:51:19,200 --> 00:51:22,400
this technology can do for you

00:51:21,119 --> 00:51:24,400
and you know if if you want to go

00:51:22,400 --> 00:51:26,480
further you can even have some

00:51:24,400 --> 00:51:27,920
multiplayer games like you know having

00:51:26,480 --> 00:51:29,760
some simple fs game

00:51:27,920 --> 00:51:32,319
or even web vr and all that kind of

00:51:29,760 --> 00:51:34,720
things so that's really

00:51:32,319 --> 00:51:36,640
quite quite quite a variety of things

00:51:34,720 --> 00:51:39,280
you could do with web rtc but

00:51:36,640 --> 00:51:39,680
if you look at all these applications

00:51:39,280 --> 00:51:42,480
right

00:51:39,680 --> 00:51:44,400
um there's there's some common themes

00:51:42,480 --> 00:51:47,280
right if you understand

00:51:44,400 --> 00:51:49,119
um it needs to be real-time you know and

00:51:47,280 --> 00:51:49,599
they are heavy on the audio and video

00:51:49,119 --> 00:51:53,440
side

00:51:49,599 --> 00:51:57,839
so this is really what makes um

00:51:53,440 --> 00:52:01,119
web artists special and needed right

00:51:57,839 --> 00:52:05,839
so i think you know before i go

00:52:01,119 --> 00:52:05,839
further into web rtc

00:52:06,240 --> 00:52:10,960
yep so i gotta say real time audio and

00:52:09,119 --> 00:52:13,520
video applications

00:52:10,960 --> 00:52:14,000
so yeah before i go further into our web

00:52:13,520 --> 00:52:16,000
uh

00:52:14,000 --> 00:52:17,040
web into web rtc i think it's good for

00:52:16,000 --> 00:52:20,079
me to give a

00:52:17,040 --> 00:52:20,720
comparison between websockets and webrtc

00:52:20,079 --> 00:52:22,160
because

00:52:20,720 --> 00:52:24,720
i think you might have some questions in

00:52:22,160 --> 00:52:26,880
your head right so so this is a good

00:52:24,720 --> 00:52:28,800
broad overview of the comparisons

00:52:26,880 --> 00:52:30,960
so for web sockets right the clients

00:52:28,800 --> 00:52:33,920
have a you know persistent

00:52:30,960 --> 00:52:35,280
um bi-directional tcp connection to the

00:52:33,920 --> 00:52:39,119
server

00:52:35,280 --> 00:52:42,960
um yeah so you can see

00:52:39,119 --> 00:52:44,480
persistent tcp connection and rtc it's a

00:52:42,960 --> 00:52:47,280
real-time communications and

00:52:44,480 --> 00:52:48,960
web sockets i think the key here is to

00:52:47,280 --> 00:52:50,559
understand that web sockets have low

00:52:48,960 --> 00:52:53,599
latency but web rtc

00:52:50,559 --> 00:52:55,200
even lower latency such as close to real

00:52:53,599 --> 00:52:56,800
time and

00:52:55,200 --> 00:52:58,559
why it is able to achieve this it's

00:52:56,800 --> 00:53:01,359
really because

00:52:58,559 --> 00:53:02,319
websockets uses tcp while web rtc uses

00:53:01,359 --> 00:53:05,040
udp

00:53:02,319 --> 00:53:05,680
which is essentially faster but there

00:53:05,040 --> 00:53:08,640
may be some

00:53:05,680 --> 00:53:11,440
um compromises right in terms of

00:53:08,640 --> 00:53:12,800
reliability of data transfer so

00:53:11,440 --> 00:53:15,359
so that is something that we have to

00:53:12,800 --> 00:53:16,480
consider so in terms of applications you

00:53:15,359 --> 00:53:18,400
can see

00:53:16,480 --> 00:53:20,640
um the kind of differences right so for

00:53:18,400 --> 00:53:22,880
web sockets it's more of

00:53:20,640 --> 00:53:24,480
you send something over like one shot

00:53:22,880 --> 00:53:25,520
one shot like chat rooms you send a

00:53:24,480 --> 00:53:28,240
message

00:53:25,520 --> 00:53:29,680
to the server and all that file transfer

00:53:28,240 --> 00:53:30,880
is a one-shot kind of thing

00:53:29,680 --> 00:53:33,599
but for webrtc you look at the

00:53:30,880 --> 00:53:35,760
applications it's a constant stream of

00:53:33,599 --> 00:53:36,480
data real-time stream of data streaming

00:53:35,760 --> 00:53:40,079
video calls

00:53:36,480 --> 00:53:43,520
multiplayer games and all that yeah

00:53:40,079 --> 00:53:45,599
so um yeah so let me just

00:53:43,520 --> 00:53:47,599
show you again know what what where rtc

00:53:45,599 --> 00:53:50,880
looks or websocket looks like

00:53:47,599 --> 00:53:53,040
um broadly so

00:53:50,880 --> 00:53:55,119
so for web sockets you know clients they

00:53:53,040 --> 00:53:57,760
have a persistent bi-directional

00:53:55,119 --> 00:53:58,559
bi-directional tcp connection with the

00:53:57,760 --> 00:54:00,000
server

00:53:58,559 --> 00:54:03,920
so everything has to really go through

00:54:00,000 --> 00:54:06,480
the server so for instance if client a

00:54:03,920 --> 00:54:08,720
wants to send something to client b

00:54:06,480 --> 00:54:10,400
client a has to send to the server first

00:54:08,720 --> 00:54:12,800
and the server will help to relay this

00:54:10,400 --> 00:54:14,640
down to client b so that's

00:54:12,800 --> 00:54:16,480
uh that's the server acting as the

00:54:14,640 --> 00:54:19,920
intermediary over here

00:54:16,480 --> 00:54:22,559
so so that is web sockets right

00:54:19,920 --> 00:54:22,960
so let us now look at web rtc this is

00:54:22,559 --> 00:54:27,200
what

00:54:22,960 --> 00:54:28,880
it would look like broadly right so

00:54:27,200 --> 00:54:31,200
the clients would still be linked to a

00:54:28,880 --> 00:54:31,920
central server but eventually right the

00:54:31,200 --> 00:54:34,720
clients could

00:54:31,920 --> 00:54:36,319
um send information to one another

00:54:34,720 --> 00:54:37,599
directly

00:54:36,319 --> 00:54:39,920
so but so this is how it looks like

00:54:37,599 --> 00:54:41,359
broadly but let's just deep dive and see

00:54:39,920 --> 00:54:43,520
how it actually works

00:54:41,359 --> 00:54:45,200
so you know in terms of step one right

00:54:43,520 --> 00:54:47,119
initially if a client

00:54:45,200 --> 00:54:49,119
wants to establish a peer-to-peer

00:54:47,119 --> 00:54:51,280
connection with another client

00:54:49,119 --> 00:54:52,319
right um there will be a signaling

00:54:51,280 --> 00:54:54,000
process

00:54:52,319 --> 00:54:56,000
would occur right and this and this is

00:54:54,000 --> 00:54:58,960
handled by a third-party server

00:54:56,000 --> 00:55:00,160
so um this third-party server will help

00:54:58,960 --> 00:55:02,319
to coordinate

00:55:00,160 --> 00:55:03,200
connection information between the

00:55:02,319 --> 00:55:05,599
clients

00:55:03,200 --> 00:55:07,359
and help the clients find each of each

00:55:05,599 --> 00:55:08,240
other through their ip addresses and all

00:55:07,359 --> 00:55:11,040
that

00:55:08,240 --> 00:55:12,799
and once the client knows how to connect

00:55:11,040 --> 00:55:15,440
to each other directly

00:55:12,799 --> 00:55:17,440
the clients can just establish a direct

00:55:15,440 --> 00:55:19,680
peer-to-peer connection and

00:55:17,440 --> 00:55:20,799
to exchange real-time media information

00:55:19,680 --> 00:55:24,400
with one another

00:55:20,799 --> 00:55:27,599
without the server but this is

00:55:24,400 --> 00:55:30,799
still kind of broad right so let me

00:55:27,599 --> 00:55:32,839
deep dive into the the technology used

00:55:30,799 --> 00:55:36,079
actually

00:55:32,839 --> 00:55:37,839
right so i mean previously that was just

00:55:36,079 --> 00:55:42,400
a good idea of the signaling process

00:55:37,839 --> 00:55:44,240
so um in practice right um in practice

00:55:42,400 --> 00:55:45,520
client applications actually need to

00:55:44,240 --> 00:55:48,480
traverse through you know

00:55:45,520 --> 00:55:50,319
the different nat gateways and firewalls

00:55:48,480 --> 00:55:51,680
to get to each other to find out the ip

00:55:50,319 --> 00:55:54,079
addresses and all that

00:55:51,680 --> 00:55:54,960
and to aid in this right there's

00:55:54,079 --> 00:55:56,000
something

00:55:54,960 --> 00:55:58,960
there's something called the ice

00:55:56,000 --> 00:56:01,760
protocol so i stands for the interactive

00:55:58,960 --> 00:56:04,319
connectivity establishment so and it

00:56:01,760 --> 00:56:07,680
defines a kind of like a systematic way

00:56:04,319 --> 00:56:09,359
to to find the optimal communication

00:56:07,680 --> 00:56:10,880
option between the two channels

00:56:09,359 --> 00:56:12,480
or endpoints right through the different

00:56:10,880 --> 00:56:14,839
entities and firewalls

00:56:12,480 --> 00:56:16,000
and including using or relays as

00:56:14,839 --> 00:56:19,520
necessary

00:56:16,000 --> 00:56:21,760
so yup so that is it and there here two

00:56:19,520 --> 00:56:24,960
options to help to establish this

00:56:21,760 --> 00:56:26,799
peer-to-peer connection one is stun

00:56:24,960 --> 00:56:28,079
and one is turn which you have seen over

00:56:26,799 --> 00:56:31,440
here right

00:56:28,079 --> 00:56:33,520
so first and primarily firstly right um

00:56:31,440 --> 00:56:35,040
stun will be used stan server will be

00:56:33,520 --> 00:56:38,319
used and stan

00:56:35,040 --> 00:56:38,640
refers to session traversal utilities

00:56:38,319 --> 00:56:41,839
for

00:56:38,640 --> 00:56:43,599
nat right so this

00:56:41,839 --> 00:56:45,200
so what happens is right the stand

00:56:43,599 --> 00:56:47,040
servers will try to get

00:56:45,200 --> 00:56:48,960
the public ip addresses of the different

00:56:47,040 --> 00:56:51,599
client browsers

00:56:48,960 --> 00:56:52,720
and if it is if it is able to do so

00:56:51,599 --> 00:56:53,920
that's good right

00:56:52,720 --> 00:56:56,400
so the clients can just take this

00:56:53,920 --> 00:56:58,160
information and connect

00:56:56,400 --> 00:56:59,599
and have a established appeal of one

00:56:58,160 --> 00:57:03,200
another but

00:56:59,599 --> 00:57:04,160
but it is no but the the issue comes

00:57:03,200 --> 00:57:06,319
when right um

00:57:04,160 --> 00:57:07,760
in some nit uh implementations right

00:57:06,319 --> 00:57:09,119
where there are so many layers and

00:57:07,760 --> 00:57:11,599
firewalls and all that

00:57:09,119 --> 00:57:12,319
this time process may not be that good

00:57:11,599 --> 00:57:14,559
enough

00:57:12,319 --> 00:57:16,559
right to do this job so for instance

00:57:14,559 --> 00:57:18,559
right some browsers

00:57:16,559 --> 00:57:20,640
using nat may employ a restriction

00:57:18,559 --> 00:57:23,920
called symmetric nat

00:57:20,640 --> 00:57:24,960
right so that's when if if the start

00:57:23,920 --> 00:57:26,799
servers

00:57:24,960 --> 00:57:29,040
can't do the job that's when we have to

00:57:26,799 --> 00:57:31,440
rely on on the turn servers

00:57:29,040 --> 00:57:33,440
right so turn reverse stands for

00:57:31,440 --> 00:57:36,559
traversal using relays

00:57:33,440 --> 00:57:40,480
around n80 okay

00:57:36,559 --> 00:57:42,720
so so you know

00:57:40,480 --> 00:57:44,079
um these turn servers essentially help

00:57:42,720 --> 00:57:47,119
us to bypass this

00:57:44,079 --> 00:57:48,480
uh symmetric energy restriction and it

00:57:47,119 --> 00:57:51,680
helps to facilitate

00:57:48,480 --> 00:57:53,599
conversations between the peers behind

00:57:51,680 --> 00:57:56,640
different nat firewalls

00:57:53,599 --> 00:57:58,480
and yeah so

00:57:56,640 --> 00:58:00,880
so what it does right is it acts as a

00:57:58,480 --> 00:58:02,079
relay uh intermediate or relay server

00:58:00,880 --> 00:58:04,880
between the client

00:58:02,079 --> 00:58:06,799
servers where it will help to receive

00:58:04,880 --> 00:58:08,640
information from one client

00:58:06,799 --> 00:58:10,319
and then help to forward this

00:58:08,640 --> 00:58:13,520
information i mean this media

00:58:10,319 --> 00:58:16,240
to the other client

00:58:13,520 --> 00:58:18,240
so let me repeat that again the turn

00:58:16,240 --> 00:58:20,640
servers will help to receive the

00:58:18,240 --> 00:58:22,799
media information the media data package

00:58:20,640 --> 00:58:25,599
from one client and help to forward this

00:58:22,799 --> 00:58:27,760
to the other client so this is what the

00:58:25,599 --> 00:58:28,720
the turn servers do and and if you

00:58:27,760 --> 00:58:31,920
realize right

00:58:28,720 --> 00:58:35,440
it is not really a true peer-to-peer

00:58:31,920 --> 00:58:37,599
um anymore connection anymore but yeah

00:58:35,440 --> 00:58:39,680
it is not a true peer to peer anymore

00:58:37,599 --> 00:58:42,240
but but this is just a backup kind of

00:58:39,680 --> 00:58:42,720
server if stun servers are unable to do

00:58:42,240 --> 00:58:45,359
the job

00:58:42,720 --> 00:58:46,799
right i mean so if you can imagine this

00:58:45,359 --> 00:58:48,799
right the turn servers have to receive

00:58:46,799 --> 00:58:50,400
the media packets and then send it over

00:58:48,799 --> 00:58:52,160
to the other client

00:58:50,400 --> 00:58:54,160
so if you can imagine there's a lot of

00:58:52,160 --> 00:58:56,640
server work for this turn server

00:58:54,160 --> 00:58:58,480
because a lot of data traffic flows

00:58:56,640 --> 00:59:01,920
through this relay server

00:58:58,480 --> 00:59:04,640
so what what it actually means is it is

00:59:01,920 --> 00:59:05,440
very expensive to and costly to try to

00:59:04,640 --> 00:59:07,200
have these

00:59:05,440 --> 00:59:08,720
uh turn servers running right in terms

00:59:07,200 --> 00:59:11,359
of server costs and all that

00:59:08,720 --> 00:59:11,760
so i think practically which is this is

00:59:11,359 --> 00:59:14,960
why

00:59:11,760 --> 00:59:15,599
uh many cloud providers um don't really

00:59:14,960 --> 00:59:17,680
offer

00:59:15,599 --> 00:59:19,440
a free turn service there's no like free

00:59:17,680 --> 00:59:20,000
tier for this so there's something to

00:59:19,440 --> 00:59:22,960
keep into

00:59:20,000 --> 00:59:24,559
or keep in mind right so this is why

00:59:22,960 --> 00:59:26,079
this is just a backup

00:59:24,559 --> 00:59:28,559
in case you know the start servers

00:59:26,079 --> 00:59:28,559
doesn't work

00:59:29,760 --> 00:59:36,640
so so that is how this this this whole

00:59:33,760 --> 00:59:37,119
whole thing uh all right rt rtc kind of

00:59:36,640 --> 00:59:40,559
works

00:59:37,119 --> 00:59:41,599
but no web rtc is not just whatever i've

00:59:40,559 --> 00:59:43,599
mentioned earlier there's

00:59:41,599 --> 00:59:46,319
actually a lot of other things in webrtc

00:59:43,599 --> 00:59:48,799
as well and why it's so beneficial right

00:59:46,319 --> 00:59:50,079
so there's stuff like signal processing

00:59:48,799 --> 00:59:52,319
to remove the

00:59:50,079 --> 00:59:54,480
computer noise from the audio video feed

00:59:52,319 --> 00:59:56,160
there's also codec handling to compress

00:59:54,480 --> 00:59:58,240
and decompress data

00:59:56,160 --> 01:00:01,040
um you know that's also routing to the

00:59:58,240 --> 01:00:02,960
ice protocol and

01:00:01,040 --> 01:00:05,119
the user data is also automatically

01:00:02,960 --> 01:00:06,720
encrypted before transmitting across the

01:00:05,119 --> 01:00:08,000
connections and

01:00:06,720 --> 01:00:09,920
and there's some kind of managing of

01:00:08,000 --> 01:00:12,480
bandwidth as well so there's a lot of

01:00:09,920 --> 01:00:15,760
other small features in webrtc

01:00:12,480 --> 01:00:17,280
right so now let us go through you know

01:00:15,760 --> 01:00:19,119
um what are the challenges right because

01:00:17,280 --> 01:00:20,640
i made red rtc sound like

01:00:19,119 --> 01:00:22,160
so good so what are some of the

01:00:20,640 --> 01:00:24,160
challenges

01:00:22,160 --> 01:00:27,440
i think the number one consideration is

01:00:24,160 --> 01:00:31,040
webrtc actually uses udp

01:00:27,440 --> 01:00:33,920
what what this means is uh it is not a

01:00:31,040 --> 01:00:36,240
reliable data transfer for the core and

01:00:33,920 --> 01:00:37,200
and if if it is important in your

01:00:36,240 --> 01:00:39,200
application right

01:00:37,200 --> 01:00:40,880
then you need to think twice right yeah

01:00:39,200 --> 01:00:45,200
about it

01:00:40,880 --> 01:00:46,400
and yeah so and there's also no standard

01:00:45,200 --> 01:00:49,520
signaling protocol

01:00:46,400 --> 01:00:51,359
right um as to how or which

01:00:49,520 --> 01:00:54,079
which server which ip address or is so

01:00:51,359 --> 01:00:56,319
all this has to be

01:00:54,079 --> 01:00:57,440
coded by yourself and which is why

01:00:56,319 --> 01:00:59,839
webrtc might

01:00:57,440 --> 01:01:01,200
may be a bit complicated to deal with on

01:00:59,839 --> 01:01:05,280
your own if you

01:01:01,200 --> 01:01:05,760
if you if you directly use the web rtc

01:01:05,280 --> 01:01:07,920
api

01:01:05,760 --> 01:01:09,119
it might be a bit complex which is why

01:01:07,920 --> 01:01:11,280
there are

01:01:09,119 --> 01:01:13,440
or that which is why there are companies

01:01:11,280 --> 01:01:16,799
and developers usually use

01:01:13,440 --> 01:01:20,000
a wrapper libraries uh like prj uh

01:01:16,799 --> 01:01:21,680
like pure js or like easy rpc all this

01:01:20,000 --> 01:01:23,280
so all these open source libraries make

01:01:21,680 --> 01:01:26,319
it you know slightly easier to

01:01:23,280 --> 01:01:29,440
deal with or wet rtc behind home

01:01:26,319 --> 01:01:31,119
so and another thing is it may not be

01:01:29,440 --> 01:01:32,720
fully compatible with all browsers as

01:01:31,119 --> 01:01:34,079
well you know for model versions of

01:01:32,720 --> 01:01:37,760
chrome and firefox

01:01:34,079 --> 01:01:38,559
it is okay but for you know other older

01:01:37,760 --> 01:01:40,640
browsers

01:01:38,559 --> 01:01:42,240
you know and if like age and you know

01:01:40,640 --> 01:01:45,119
suffering or not all that

01:01:42,240 --> 01:01:46,559
uh web rtc um may have some there may be

01:01:45,119 --> 01:01:49,599
some compatibility issues

01:01:46,559 --> 01:01:52,799
right so in that case you know like some

01:01:49,599 --> 01:01:55,760
extra plugins may be needed so

01:01:52,799 --> 01:01:56,960
which is also why you know um pure js is

01:01:55,760 --> 01:01:59,119
very popular because

01:01:56,960 --> 01:02:01,280
it kind of handles it kind of handles

01:01:59,119 --> 01:02:03,200
the

01:02:01,280 --> 01:02:04,839
this kind of browser complications of

01:02:03,200 --> 01:02:08,720
the other browsers

01:02:04,839 --> 01:02:11,280
okay so the key reason to understand is

01:02:08,720 --> 01:02:13,200
why why use webrtc right

01:02:11,280 --> 01:02:14,319
why should you use this application all

01:02:13,200 --> 01:02:16,880
right it is

01:02:14,319 --> 01:02:18,839
really i think the key is it's really

01:02:16,880 --> 01:02:21,359
great for services that need to be

01:02:18,839 --> 01:02:24,079
real-time and it needs to be fast

01:02:21,359 --> 01:02:25,920
right so so that is the most important

01:02:24,079 --> 01:02:27,839
key consideration and

01:02:25,920 --> 01:02:29,520
and it's good because there's no

01:02:27,839 --> 01:02:31,200
third-party apps involved no need to

01:02:29,520 --> 01:02:33,039
install additional software

01:02:31,200 --> 01:02:35,680
and it's really embedded in your web

01:02:33,039 --> 01:02:37,599
technologies it's a html5 specification

01:02:35,680 --> 01:02:39,280
no so all these applications can just

01:02:37,599 --> 01:02:41,520
run directly on the browser no

01:02:39,280 --> 01:02:43,200
nothing is needed to be installed right

01:02:41,520 --> 01:02:45,359
and generally is

01:02:43,200 --> 01:02:46,559
it is also secure right because it runs

01:02:45,359 --> 01:02:50,079
inside your browser without

01:02:46,559 --> 01:02:52,400
any additional processes and

01:02:50,079 --> 01:02:54,000
less chance for spyware malware all that

01:02:52,400 --> 01:02:55,520
and you know i mean

01:02:54,000 --> 01:02:57,119
right off the board there's also

01:02:55,520 --> 01:02:58,720
end-to-end encryption as well you know

01:02:57,119 --> 01:02:59,680
when you send a data package just so

01:02:58,720 --> 01:03:02,640
there's no

01:02:59,680 --> 01:03:03,599
there's no spying there's less chance of

01:03:02,640 --> 01:03:07,839
spying involved

01:03:03,599 --> 01:03:09,599
over here so i think that that's

01:03:07,839 --> 01:03:12,000
this is the gist of this this whole

01:03:09,599 --> 01:03:14,880
webrtc explanation i'll

01:03:12,000 --> 01:03:15,359
proceed on to show you a tutorial of a

01:03:14,880 --> 01:03:19,520
video

01:03:15,359 --> 01:03:24,640
application i've created right so

01:03:19,520 --> 01:03:24,640
let me show you over here

01:03:25,010 --> 01:03:29,280
[Music]

01:03:26,319 --> 01:03:30,079
so let us see how this this works right

01:03:29,280 --> 01:03:44,640
so i have a

01:03:30,079 --> 01:03:47,280
application deployed on heroku already

01:03:44,640 --> 01:03:50,000
so this is the application that i've

01:03:47,280 --> 01:03:52,319
deployed on heroku and it automatically

01:03:50,000 --> 01:03:53,119
redirects me to a room with the hashes

01:03:52,319 --> 01:03:56,480
behind

01:03:53,119 --> 01:03:58,000
the uuid no and as an alert tell me to

01:03:56,480 --> 01:04:13,839
copy paste this into another

01:03:58,000 --> 01:04:13,839
browser right

01:04:17,039 --> 01:04:27,839
sorry let me re-share the screen

01:04:30,880 --> 01:04:41,839
yeah sorry give me a minute let me share

01:04:32,400 --> 01:04:41,839
the screen uh

01:04:48,480 --> 01:05:09,000
okay i need to close this

01:04:53,680 --> 01:05:12,420
entire screen okay thanks

01:05:09,000 --> 01:05:12,420
[Music]

01:05:20,839 --> 01:05:23,839
um

01:05:28,880 --> 01:05:32,000
yeah so give me a moment let me just

01:05:30,880 --> 01:05:33,680
quickly

01:05:32,000 --> 01:05:36,960
just confirm that they are still

01:05:33,680 --> 01:05:36,960
connected to the hell i

01:05:48,839 --> 01:06:05,839
key um

01:06:17,039 --> 01:06:20,960
meanwhile you guys can go to the github

01:06:19,200 --> 01:06:24,000
okay all right that's good

01:06:20,960 --> 01:06:24,000
sorry for the delay

01:06:27,599 --> 01:06:30,400
yeah so

01:06:31,200 --> 01:06:37,039
let me show you the the application i've

01:06:33,599 --> 01:06:37,039
deployed on heroku

01:06:42,880 --> 01:06:46,400
yeah so this is is the application over

01:06:45,920 --> 01:06:50,079
here

01:06:46,400 --> 01:06:52,000
and let me off the mu

01:06:50,079 --> 01:06:53,200
let me mute this audio first if not

01:06:52,000 --> 01:06:55,520
there might be some

01:06:53,200 --> 01:06:56,400
echoes and all that so let me copy this

01:06:55,520 --> 01:07:01,839
room link and

01:06:56,400 --> 01:07:01,839
open it somewhere else

01:07:29,280 --> 01:07:33,599
yeah so you can see over here i have two

01:07:32,160 --> 01:07:35,680
uh different two client

01:07:33,599 --> 01:07:37,039
clients open up and they can see each

01:07:35,680 --> 01:07:40,960
other one another

01:07:37,039 --> 01:07:44,400
yeah so this is roughly what you will be

01:07:40,960 --> 01:07:48,640
developing right so

01:07:44,400 --> 01:07:53,200
let me close this and let's go to the

01:07:48,640 --> 01:07:53,920
um the github repository over here so

01:07:53,200 --> 01:07:57,599
it's

01:07:53,920 --> 01:08:01,039
realtime apps iap video call app okay

01:07:57,599 --> 01:08:01,039
let me push this to the site

01:08:05,280 --> 01:08:11,839
so let us clone this repository okay

01:08:35,040 --> 01:08:39,839
um okay

01:08:41,759 --> 01:08:44,159
all right

01:08:48,159 --> 01:08:53,759
let us open this up okay

01:08:51,279 --> 01:08:55,440
and we should see this repository with

01:08:53,759 --> 01:08:57,359
this code structure

01:08:55,440 --> 01:08:58,719
so if we were to take a quick look at

01:08:57,359 --> 01:09:01,520
the package.json

01:08:58,719 --> 01:09:03,440
it's very simple right this over here

01:09:01,520 --> 01:09:06,960
i'm just using a very simple templating

01:09:03,440 --> 01:09:10,880
engine ejs express server note mod

01:09:06,960 --> 01:09:14,000
pure prjs is what i'll be using

01:09:10,880 --> 01:09:14,560
it's a a webrtc wrapper library that

01:09:14,000 --> 01:09:17,279
makes things

01:09:14,560 --> 01:09:18,319
really simple just really really really

01:09:17,279 --> 01:09:20,400
simple and it's

01:09:18,319 --> 01:09:23,199
it kind of feels like our web sockets

01:09:20,400 --> 01:09:24,640
and over here i'm using socket.io io as

01:09:23,199 --> 01:09:26,799
well

01:09:24,640 --> 01:09:29,199
another wrapper library for websockets

01:09:26,799 --> 01:09:31,120
makes things very simple and uuid

01:09:29,199 --> 01:09:33,199
and there are two scripts start and

01:09:31,120 --> 01:09:36,960
death start just you know

01:09:33,199 --> 01:09:40,480
run server.js and dev is

01:09:36,960 --> 01:09:40,480
we'll be running on nodemon so

01:09:40,719 --> 01:09:45,759
i think for east i'll just run my

01:09:42,400 --> 01:09:45,759
terminal here as well

01:09:47,120 --> 01:09:51,120
let us install the dependencies john

01:09:59,440 --> 01:10:07,440
all right so i think

01:10:03,840 --> 01:10:07,440
so let's let us see

01:10:07,920 --> 01:10:13,199
what branches i actually have actually

01:10:10,640 --> 01:10:14,880
that means young start first

01:10:13,199 --> 01:10:16,960
that's just a very quick test on the

01:10:14,880 --> 01:10:20,480
server that we have

01:10:16,960 --> 01:10:20,480
this repository quick test

01:10:27,520 --> 01:10:31,840
yup so let me go local

01:10:36,159 --> 01:10:41,840
let's test that this works right now and

01:10:39,440 --> 01:10:41,840
allow

01:10:43,280 --> 01:10:45,840
you know

01:10:47,280 --> 01:10:53,920
yeah so this works let me copy this link

01:10:50,480 --> 01:10:53,920
and let me paste it elsewhere

01:10:56,560 --> 01:11:01,199
yeah so this works so if i close this

01:10:59,440 --> 01:11:02,320
right it should be gone so okay this

01:11:01,199 --> 01:11:05,360
works good

01:11:02,320 --> 01:11:08,640
so this is what we will be building but

01:11:05,360 --> 01:11:12,560
let us go back to the code

01:11:08,640 --> 01:11:16,159
okay let's stop this so let us go to the

01:11:12,560 --> 01:11:16,159
let's see the available branches

01:11:17,040 --> 01:11:20,159
oh i have a couple of branches over here

01:11:18,800 --> 01:11:22,800
and

01:11:20,159 --> 01:11:25,840
um let's go to the tutorial branch right

01:11:22,800 --> 01:11:29,440
which is what we will be using for today

01:11:25,840 --> 01:11:32,080
so let's go get checkout

01:11:29,440 --> 01:11:32,080
tutorial

01:11:34,400 --> 01:11:41,280
okay all right so i have

01:11:38,320 --> 01:11:44,320
over here with uh this tutorial branch

01:11:41,280 --> 01:11:48,800
i've made things really really simple

01:11:44,320 --> 01:11:48,800
it is just the original or main

01:11:48,880 --> 01:11:51,920
main branch repository but i've

01:11:50,400 --> 01:11:54,960
uncommented out

01:11:51,920 --> 01:11:56,560
parts of the code and then i just made

01:11:54,960 --> 01:11:56,800
it really simple you just have to follow

01:11:56,560 --> 01:12:00,880
and

01:11:56,800 --> 01:12:00,880
uncomment it up together okay

01:12:02,800 --> 01:12:06,640
all right so let's see what we have over

01:12:04,800 --> 01:12:09,840
here we have our main server code

01:12:06,640 --> 01:12:09,840
over here

01:12:11,679 --> 01:12:15,199
so this is our main server code it runs

01:12:13,520 --> 01:12:19,440
on

01:12:15,199 --> 01:12:19,440
5000 and it

01:12:21,679 --> 01:12:26,960
and it passes our public repository

01:12:24,800 --> 01:12:28,480
and and this is just a templating engine

01:12:26,960 --> 01:12:31,520
ejs right

01:12:28,480 --> 01:12:33,840
so and we also have a pure js

01:12:31,520 --> 01:12:35,040
server running right the pages is really

01:12:33,840 --> 01:12:36,640
our web rtc

01:12:35,040 --> 01:12:39,840
and he does all the signaling processes

01:12:36,640 --> 01:12:42,560
and all that so this runs at um

01:12:39,840 --> 01:12:45,360
at the path pure js so the rest is

01:12:42,560 --> 01:12:45,360
really just you know

01:12:45,600 --> 01:12:51,280
um if it's a root direct link it will

01:12:48,640 --> 01:12:54,560
just redirect to a random uuid

01:12:51,280 --> 01:12:54,560
over here and

01:12:54,719 --> 01:12:57,760
and then because we are using this

01:12:56,480 --> 01:12:58,640
templating engine right we can do

01:12:57,760 --> 01:13:01,280
something really

01:12:58,640 --> 01:13:01,840
really cool so we can just pass a

01:13:01,280 --> 01:13:03,760
variable

01:13:01,840 --> 01:13:05,840
room id so over here i passed the room

01:13:03,760 --> 01:13:08,159
id which is

01:13:05,840 --> 01:13:09,120
essentially this user id so i pass it to

01:13:08,159 --> 01:13:11,120
the

01:13:09,120 --> 01:13:12,880
to the web page so over at my webpage in

01:13:11,120 --> 01:13:16,640
my javascript i can just

01:13:12,880 --> 01:13:18,880
take out this room id variable and

01:13:16,640 --> 01:13:19,840
let us take a look at the rest right so

01:13:18,880 --> 01:13:24,320
this is the

01:13:19,840 --> 01:13:27,520
roommate room ejs over here

01:13:24,320 --> 01:13:29,199
it's quite simple right yeah so this is

01:13:27,520 --> 01:13:31,520
why man i can

01:13:29,199 --> 01:13:33,120
over here i can just take it out room id

01:13:31,520 --> 01:13:35,679
and it's named as room id

01:13:33,120 --> 01:13:37,280
room underscore id so this is okay let's

01:13:35,679 --> 01:13:40,719
now look at this

01:13:37,280 --> 01:13:42,800
so public uh all right

01:13:40,719 --> 01:13:43,760
this is the main js is what we want to

01:13:42,800 --> 01:13:45,920
look at as well

01:13:43,760 --> 01:13:47,280
so it's actually the two main files for

01:13:45,920 --> 01:13:51,280
this project is main

01:13:47,280 --> 01:13:54,320
dot js and server.js right so main.js

01:13:51,280 --> 01:13:56,320
runs on the client side okay main.js

01:13:54,320 --> 01:13:57,679
runs on client side and server.js runs

01:13:56,320 --> 01:14:02,320
on the server side

01:13:57,679 --> 01:14:05,600
okay let us follow the

01:14:02,320 --> 01:14:09,920
um let's follow the d2do's

01:14:05,600 --> 01:14:11,679
right so i've included the to-do's

01:14:09,920 --> 01:14:12,960
so let's follow one by one let's go to

01:14:11,679 --> 01:14:16,080
to-do one

01:14:12,960 --> 01:14:18,880
all right so this is this runs on the

01:14:16,080 --> 01:14:21,520
client side so what happens over here is

01:14:18,880 --> 01:14:22,239
um on a client side you initialize a new

01:14:21,520 --> 01:14:25,280
peer

01:14:22,239 --> 01:14:26,640
so this peer object just really helps us

01:14:25,280 --> 01:14:29,760
to

01:14:26,640 --> 01:14:32,960
interact with the peerjs server

01:14:29,760 --> 01:14:35,760
on the server side so uh

01:14:32,960 --> 01:14:38,080
if we don't input any parameters inside

01:14:35,760 --> 01:14:41,600
it will just run the

01:14:38,080 --> 01:14:44,960
um the original parameters

01:14:41,600 --> 01:14:47,120
like going to the pljs path and the

01:14:44,960 --> 01:14:48,400
normal host and automatically you'll

01:14:47,120 --> 01:14:51,920
find the port

01:14:48,400 --> 01:14:55,040
right so let us go to to do one

01:14:51,920 --> 01:14:56,719
all right so over here what happens is i

01:14:55,040 --> 01:14:59,760
would so i think

01:14:56,719 --> 01:15:01,920
no one has checked this this browser api

01:14:59,760 --> 01:15:04,400
uh just now so what this does is it

01:15:01,920 --> 01:15:07,120
would it will

01:15:04,400 --> 01:15:07,760
request for permission to on the browser

01:15:07,120 --> 01:15:10,400
to

01:15:07,760 --> 01:15:12,719
on the video and audio feed because i

01:15:10,400 --> 01:15:16,400
indicated both as true true and then

01:15:12,719 --> 01:15:17,199
in this stream and then i'll add this to

01:15:16,400 --> 01:15:19,040
my video stream

01:15:17,199 --> 01:15:20,400
let's just take a quick look at what is

01:15:19,040 --> 01:15:22,719
video stream right

01:15:20,400 --> 01:15:25,600
nvidia stream just you know takes this

01:15:22,719 --> 01:15:27,120
stream and then

01:15:25,600 --> 01:15:29,120
once it's fully loaded you'll play and

01:15:27,120 --> 01:15:30,880
then this and then just you append this

01:15:29,120 --> 01:15:33,760
to the website html

01:15:30,880 --> 01:15:36,840
so this is what it does so let's look at

01:15:33,760 --> 01:15:38,480
to-do one what we have to do now right

01:15:36,840 --> 01:15:41,679
we

01:15:38,480 --> 01:15:44,560
so so we have to connect

01:15:41,679 --> 01:15:44,960
to the new user who has joined the room

01:15:44,560 --> 01:15:46,480
right

01:15:44,960 --> 01:15:49,440
so before that let's take a look at

01:15:46,480 --> 01:15:51,040
server.js what happens

01:15:49,440 --> 01:15:52,880
so if you look at server.js right it

01:15:51,040 --> 01:15:57,120
actually has a socket right

01:15:52,880 --> 01:15:57,520
if if if someone connects to the server

01:15:57,120 --> 01:16:00,880
right

01:15:57,520 --> 01:16:03,199
um the socket would

01:16:00,880 --> 01:16:03,199
um

01:16:03,920 --> 01:16:09,679
request it to join the room and then

01:16:07,360 --> 01:16:10,960
you actually emit to all connected

01:16:09,679 --> 01:16:13,280
sockets that hey

01:16:10,960 --> 01:16:14,400
a user has connected and then on the

01:16:13,280 --> 01:16:20,719
client side

01:16:14,400 --> 01:16:22,159
if we see

01:16:20,719 --> 01:16:24,000
yeah so on the client side what we have

01:16:22,159 --> 01:16:25,360
to do is if a new

01:16:24,000 --> 01:16:27,280
user has joined the room what we're

01:16:25,360 --> 01:16:29,199
going to do is we want to

01:16:27,280 --> 01:16:30,400
connect to this new user so let us this

01:16:29,199 --> 01:16:35,840
is 2-1

01:16:30,400 --> 01:16:35,840
let us uncomment this

01:16:38,400 --> 01:16:43,840
alright so so let us run this

01:16:46,159 --> 01:16:49,840
let's run this okay

01:16:52,960 --> 01:17:00,480
okay let's just use the no more okay

01:16:56,480 --> 01:17:05,199
so if things are going on right right

01:17:00,480 --> 01:17:07,920
on the when okay so let's go to

01:17:05,199 --> 01:17:07,920
let's just open

01:17:14,880 --> 01:17:17,840
um

01:17:18,960 --> 01:17:22,880
okay let's just put it side by side over

01:17:20,880 --> 01:17:26,640
here

01:17:22,880 --> 01:17:31,840
so if if if it works right

01:17:26,640 --> 01:17:31,840
if i if another client joins right um

01:17:32,000 --> 01:17:37,040
can our cayenne join if client b joins

01:17:34,400 --> 01:17:37,040
right the room

01:17:37,280 --> 01:17:40,400
yes client a should get a console lock

01:17:39,840 --> 01:17:43,520
over here

01:17:40,400 --> 01:17:45,360
you know someone has joined the room

01:17:43,520 --> 01:17:46,719
okay so this is what we want to see

01:17:45,360 --> 01:17:49,679
because in the code

01:17:46,719 --> 01:17:51,120
this is what we did right it locks the

01:17:49,679 --> 01:17:53,280
user id of this user

01:17:51,120 --> 01:17:55,040
that has joined the room and that works

01:17:53,280 --> 01:18:00,640
fine okay

01:17:55,040 --> 01:18:00,640
so why isn't the video shown over here

01:18:01,199 --> 01:18:06,320
why isn't the video feed shown over here

01:18:04,080 --> 01:18:08,080
it's because we haven't

01:18:06,320 --> 01:18:09,840
connected to actually we haven't

01:18:08,080 --> 01:18:12,159
actually connected to this new user

01:18:09,840 --> 01:18:13,040
what we have done is only you know just

01:18:12,159 --> 01:18:15,679
to print out

01:18:13,040 --> 01:18:16,560
console.log the user id that's all so we

01:18:15,679 --> 01:18:19,040
have to connect

01:18:16,560 --> 01:18:21,199
the to-do tool is to connect to this new

01:18:19,040 --> 01:18:22,960
user actually and what is this function

01:18:21,199 --> 01:18:26,480
let's take a look at this

01:18:22,960 --> 01:18:30,080
right so what this does is

01:18:26,480 --> 01:18:32,480
it actually um

01:18:30,080 --> 01:18:33,120
tries to call this peer right because

01:18:32,480 --> 01:18:36,320
now with

01:18:33,120 --> 01:18:39,199
our with that peers uh client b's

01:18:36,320 --> 01:18:40,400
use id i can uh as kindly i can directly

01:18:39,199 --> 01:18:43,199
directly

01:18:40,400 --> 01:18:44,080
call and connect to client b and if you

01:18:43,199 --> 01:18:46,159
look at it

01:18:44,080 --> 01:18:47,679
if you see over here and pure js really

01:18:46,159 --> 01:18:48,960
makes everything really simple right if

01:18:47,679 --> 01:18:50,960
we just have to call

01:18:48,960 --> 01:18:52,800
any kind of kind of you know works like

01:18:50,960 --> 01:18:54,640
work web sockets right

01:18:52,800 --> 01:18:56,800
but of course it they're small under the

01:18:54,640 --> 01:18:57,520
hood right or the signaling process and

01:18:56,800 --> 01:18:59,199
all that so

01:18:57,520 --> 01:19:01,040
for us it makes things really simple we

01:18:59,199 --> 01:19:04,239
just have to call the user

01:19:01,040 --> 01:19:04,719
right and then pass him uh client b our

01:19:04,239 --> 01:19:09,520
stream

01:19:04,719 --> 01:19:12,080
right and then

01:19:09,520 --> 01:19:12,080
yeah so

01:19:13,120 --> 01:19:17,440
so this is connect to new user and let's

01:19:16,400 --> 01:19:20,719
look at to do

01:19:17,440 --> 01:19:24,640
three so because previously we passed

01:19:20,719 --> 01:19:26,320
our stream to cayenne the client b

01:19:24,640 --> 01:19:28,159
so what would client b have to do with

01:19:26,320 --> 01:19:31,520
this stream right

01:19:28,159 --> 01:19:31,520
is over here

01:19:35,040 --> 01:19:39,760
yeah so when client passes me the stream

01:19:37,840 --> 01:19:41,920
right when client calls me

01:19:39,760 --> 01:19:42,960
when client a calls client b client a

01:19:41,920 --> 01:19:46,000
client b

01:19:42,960 --> 01:19:48,719
would answer you know

01:19:46,000 --> 01:19:48,719
kind b would

01:19:49,360 --> 01:19:55,600
actually pass back uh kind b will pass

01:19:52,640 --> 01:19:56,880
his uh its own stream to kind a so this

01:19:55,600 --> 01:19:57,760
is what what happens over here you

01:19:56,880 --> 01:20:00,880
answer

01:19:57,760 --> 01:20:04,239
and pass the stream to client a right

01:20:00,880 --> 01:20:06,239
and then for of course when i take the

01:20:04,239 --> 01:20:07,280
stream uh when plan b takes the video

01:20:06,239 --> 01:20:10,480
stream from

01:20:07,280 --> 01:20:12,560
client a what kind b wants to do is

01:20:10,480 --> 01:20:14,000
i want to display this stream on my on

01:20:12,560 --> 01:20:17,440
my own client website

01:20:14,000 --> 01:20:20,480
right so this is to do four over here so

01:20:17,440 --> 01:20:23,120
when i receive the stream i want to um

01:20:20,480 --> 01:20:23,679
show it on my own feed which is why we

01:20:23,120 --> 01:20:27,920
have

01:20:23,679 --> 01:20:29,440
this add video stream over here and

01:20:27,920 --> 01:20:32,080
and this is the function that i've

01:20:29,440 --> 01:20:34,400
introduced earlier so this will actually

01:20:32,080 --> 01:20:35,360
add the video to appear on my browser

01:20:34,400 --> 01:20:39,120
okay

01:20:35,360 --> 01:20:42,000
so so let us save this

01:20:39,120 --> 01:20:43,280
all right command helps us to restart

01:20:42,000 --> 01:20:46,639
the server

01:20:43,280 --> 01:20:48,800
you know

01:20:46,639 --> 01:20:50,239
all right let's see if we have missed

01:20:48,800 --> 01:20:53,120
out anything

01:20:50,239 --> 01:20:53,120
to do five

01:20:53,360 --> 01:21:01,840
okay so i think let's try this again all

01:20:56,080 --> 01:21:01,840
right let's refresh this

01:21:12,840 --> 01:21:15,840
oops

01:21:24,960 --> 01:21:29,840
yep so this is client client a let's

01:21:27,760 --> 01:21:33,920
name it this is kind a

01:21:29,840 --> 01:21:34,480
okay i think there are some problems

01:21:33,920 --> 01:21:37,520
with the

01:21:34,480 --> 01:21:40,800
video uh webcam on this laptop but

01:21:37,520 --> 01:21:43,040
let us no it's okay yeah so let's

01:21:40,800 --> 01:21:44,000
imagine that this is already there okay

01:21:43,040 --> 01:21:46,960
um

01:21:44,000 --> 01:21:46,960
let me just try a clip

01:21:48,239 --> 01:21:52,239
yeah i'm quite sure this has no problem

01:21:50,239 --> 01:21:57,040
but i think it's just this uh this

01:21:52,239 --> 01:22:00,880
hardware component on this laptop yes

01:21:57,040 --> 01:22:04,400
just let's copy this and let us

01:22:00,880 --> 01:22:05,600
open client b right time b and let's see

01:22:04,400 --> 01:22:11,840
if the behavior is

01:22:05,600 --> 01:22:11,840
what we expect

01:22:22,840 --> 01:22:25,840
oh

01:22:28,320 --> 01:22:31,920
so it seems like it's not working as

01:22:30,719 --> 01:22:36,639
what we intended

01:22:31,920 --> 01:22:36,639
through let us see what's wrong okay

01:22:37,360 --> 01:22:42,239
okay so i see the problem here right so

01:22:40,239 --> 01:22:45,679
when we connect to the user

01:22:42,239 --> 01:22:49,600
right when client a calls client b

01:22:45,679 --> 01:22:51,440
okay and

01:22:49,600 --> 01:22:52,800
if client a receives a stream from

01:22:51,440 --> 01:22:55,600
client b

01:22:52,800 --> 01:22:57,280
i did not add this video to my own um to

01:22:55,600 --> 01:22:59,199
my own browser client-side browser so

01:22:57,280 --> 01:23:00,880
this is

01:22:59,199 --> 01:23:03,440
yeah so this is the part where we are

01:23:00,880 --> 01:23:05,280
missing right i want to show this on my

01:23:03,440 --> 01:23:06,480
how to add this video stream to my own

01:23:05,280 --> 01:23:10,239
browser

01:23:06,480 --> 01:23:10,239
so let us try again

01:23:11,679 --> 01:23:21,840
yeah that should be the missing part

01:23:24,960 --> 01:23:28,880
okay i'm not sure if this is a hardware

01:23:27,040 --> 01:23:35,840
problem or

01:23:28,880 --> 01:23:35,840
if not it should actually work okay

01:23:36,480 --> 01:23:40,159
yeah so this this works right i think

01:23:38,719 --> 01:23:42,800
it's a hardware problem just now

01:23:40,159 --> 01:23:43,520
because no one mentioned that uh webcam

01:23:42,800 --> 01:23:46,560
isn't that good

01:23:43,520 --> 01:23:48,880
okay so this is this actually works

01:23:46,560 --> 01:23:51,920
perfectly right this is what we want

01:23:48,880 --> 01:23:52,639
so let us try to let's say client b you

01:23:51,920 --> 01:23:54,960
know

01:23:52,639 --> 01:23:56,880
can be closest to browser and unlocks

01:23:54,960 --> 01:23:59,760
out of all of this

01:23:56,880 --> 01:24:01,679
and let's look at the behavior of this

01:23:59,760 --> 01:24:02,000
we see this is not what we want right nb

01:24:01,679 --> 01:24:05,120
has

01:24:02,000 --> 01:24:07,199
has exited you know but um

01:24:05,120 --> 01:24:09,679
somehow the video feed looks a bit weird

01:24:07,199 --> 01:24:10,320
okay so let's see if we have handled

01:24:09,679 --> 01:24:13,360
this

01:24:10,320 --> 01:24:15,360
well so

01:24:13,360 --> 01:24:18,159
we are done to do one two three four now

01:24:15,360 --> 01:24:20,320
we are to do five right

01:24:18,159 --> 01:24:21,440
which is what we have not handled yet so

01:24:20,320 --> 01:24:23,360
when this

01:24:21,440 --> 01:24:24,560
when the when the user disconnects right

01:24:23,360 --> 01:24:26,639
when

01:24:24,560 --> 01:24:28,159
when the user closes his browser or end

01:24:26,639 --> 01:24:31,280
the call or whatever

01:24:28,159 --> 01:24:34,639
right we want to handle that okay

01:24:31,280 --> 01:24:36,480
so and the second socket disconnects

01:24:34,639 --> 01:24:37,679
we want to do something we want to tell

01:24:36,480 --> 01:24:40,400
everyone that hey

01:24:37,679 --> 01:24:41,920
this this this client has exited hey

01:24:40,400 --> 01:24:43,280
everyone please do something so this is

01:24:41,920 --> 01:24:46,639
what we want to do

01:24:43,280 --> 01:24:48,159
right so it will so our server will

01:24:46,639 --> 01:24:50,000
broadcast this to everyone

01:24:48,159 --> 01:24:51,199
user disconnected this event user

01:24:50,000 --> 01:24:54,239
disconnected

01:24:51,199 --> 01:24:59,840
and let us take a look at um what is

01:24:54,239 --> 01:24:59,840
this right

01:25:02,880 --> 01:25:08,239
so user disconnected we want to be able

01:25:06,400 --> 01:25:12,400
to handle this user disconnected right

01:25:08,239 --> 01:25:14,000
so so this is uh

01:25:12,400 --> 01:25:15,920
where we handle this when the user

01:25:14,000 --> 01:25:18,239
disconnects when we

01:25:15,920 --> 01:25:19,679
when i know that so if i'm a client and

01:25:18,239 --> 01:25:22,000
i know that client

01:25:19,679 --> 01:25:23,199
z has a disconnected what i want to do

01:25:22,000 --> 01:25:25,440
is simply just

01:25:23,199 --> 01:25:26,719
close the connection to kind z as simple

01:25:25,440 --> 01:25:29,199
as that right

01:25:26,719 --> 01:25:30,159
so this is where it's being handled

01:25:29,199 --> 01:25:32,320
right

01:25:30,159 --> 01:25:33,520
so when the user is disconnected we want

01:25:32,320 --> 01:25:36,080
to close this

01:25:33,520 --> 01:25:38,159
um this call right we'll stop this call

01:25:36,080 --> 01:25:41,199
and this is where we handle this

01:25:38,159 --> 01:25:44,560
and essentially this is what we

01:25:41,199 --> 01:25:46,000
actually need to do right i think

01:25:44,560 --> 01:25:47,760
we have gone through everything and it

01:25:46,000 --> 01:25:51,120
should actually work very

01:25:47,760 --> 01:25:51,120
perfectly well i think

01:25:51,199 --> 01:25:56,960
hopefully right so let's try

01:25:55,440 --> 01:26:01,199
of course there are some no hardware

01:25:56,960 --> 01:26:01,199
problems with lauren's webcam so

01:26:04,480 --> 01:26:09,840
so let us look at this if it works

01:26:11,760 --> 01:26:16,800
yeah so this works well now right so

01:26:14,880 --> 01:26:20,000
there's two video feeds

01:26:16,800 --> 01:26:21,360
and let's see when declare b no exits

01:26:20,000 --> 01:26:23,600
right whenever b exits

01:26:21,360 --> 01:26:26,159
we want the video feed of plan a to stop

01:26:23,600 --> 01:26:26,159
and exit

01:26:34,840 --> 01:26:40,400
right

01:26:36,960 --> 01:26:40,400
let's try again okay

01:26:43,440 --> 01:26:46,800
it should honestly work

01:26:47,440 --> 01:26:51,440
okay so like i think there are some

01:26:49,920 --> 01:27:05,840
issues with the webcam right

01:26:51,440 --> 01:27:05,840
it's not really doing let's try again

01:27:10,080 --> 01:27:13,280
yeah i think there are some problems

01:27:11,280 --> 01:27:17,120
with the webcam right

01:27:13,280 --> 01:27:19,679
but but essentially what we

01:27:17,120 --> 01:27:21,120
should be able to see is yeah yeah

01:27:19,679 --> 01:27:21,920
there's some issues with webcam as you

01:27:21,120 --> 01:27:25,920
can see

01:27:21,920 --> 01:27:30,800
so what else again it's working right

01:27:25,920 --> 01:27:30,800
so if i close this right it should

01:27:30,840 --> 01:27:36,320
uh

01:27:33,280 --> 01:27:38,560
it should work well okay but yeah i

01:27:36,320 --> 01:27:47,840
think

01:27:38,560 --> 01:27:47,840
okay so

01:27:52,400 --> 01:27:56,560
yeah i think we have covered everything

01:27:53,920 --> 01:28:00,480
and it should actually work well

01:27:56,560 --> 01:28:02,080
so yeah so the user has disconnected

01:28:00,480 --> 01:28:04,080
each this should be gone actually

01:28:02,080 --> 01:28:05,920
okay just keep that in mind so i think

01:28:04,080 --> 01:28:08,239
we are actually done for today

01:28:05,920 --> 01:28:09,760
so let me actually go through you know

01:28:08,239 --> 01:28:11,760
some other functions

01:28:09,760 --> 01:28:14,800
uh that we have over here i mean these

01:28:11,760 --> 01:28:15,600
are just import um more of cosmetic

01:28:14,800 --> 01:28:18,239
functions right

01:28:15,600 --> 01:28:20,480
uh you know muting your audio feed you

01:28:18,239 --> 01:28:24,239
can see over here mute enamel you know

01:28:20,480 --> 01:28:25,840
set mute button um

01:28:24,239 --> 01:28:28,239
and stopping your video feed so these

01:28:25,840 --> 01:28:29,360
are more fun stuff right and there's

01:28:28,239 --> 01:28:33,040
also a n

01:28:29,360 --> 01:28:34,639
video feed button so yeah so i think

01:28:33,040 --> 01:28:37,280
we have actually gone through everything

01:28:34,639 --> 01:28:39,520
for today and

01:28:37,280 --> 01:28:42,080
thanks for today so let's go back to

01:28:39,520 --> 01:28:44,239
this slide

01:28:42,080 --> 01:28:45,760
so you can see right how webrtc can be

01:28:44,239 --> 01:28:46,800
quite pretty fun you can view your own

01:28:45,760 --> 01:28:50,400
zoom application

01:28:46,800 --> 01:28:53,840
video call application so and even um

01:28:50,400 --> 01:28:56,880
and even game application so

01:28:53,840 --> 01:28:57,360
yeah but let me go back to yeah let me

01:28:56,880 --> 01:29:00,719
show you

01:28:57,360 --> 01:29:04,880
very quickly first um

01:29:00,719 --> 01:29:04,880
um some game application that um

01:29:06,080 --> 01:29:10,800
that um when we conducted conducted this

01:29:08,880 --> 01:29:14,080
workshop previously right some of them

01:29:10,800 --> 01:29:14,080
some of our participants actually

01:29:14,320 --> 01:29:17,280
joined our competition and they actually

01:29:15,840 --> 01:29:17,760
created some really cool applications

01:29:17,280 --> 01:29:21,120
with

01:29:17,760 --> 01:29:21,920
websocket and webrtc so for instance

01:29:21,120 --> 01:29:25,679
this

01:29:21,920 --> 01:29:28,320
interactive real-time bot um

01:29:25,679 --> 01:29:30,639
someone created a this is a web socket

01:29:28,320 --> 01:29:31,760
implementation as well as a 17 so

01:29:30,639 --> 01:29:33,520
i think you guys can explore this

01:29:31,760 --> 01:29:33,920
yourself but so this is really cool just

01:29:33,520 --> 01:29:36,400
just

01:29:33,920 --> 01:29:39,199
to put it out there so yeah let us go

01:29:36,400 --> 01:29:44,239
back to the slides right

01:29:39,199 --> 01:29:44,239
so yes i'm done with the tutorial and

01:29:44,400 --> 01:29:48,560
yeah so i would like to we are done with

01:29:46,480 --> 01:29:50,320
the tutorial and yeah so

01:29:48,560 --> 01:29:51,600
so here's a word from our location

01:29:50,320 --> 01:29:53,360
sponsor who

01:29:51,600 --> 01:29:54,800
who so graciously sponsored this

01:29:53,360 --> 01:29:55,520
location that we are presenting over

01:29:54,800 --> 01:29:59,199
here

01:29:55,520 --> 01:30:02,560
so yeah so skills pretty

01:29:59,199 --> 01:30:05,040
yes okay skills training

01:30:02,560 --> 01:30:06,000
and yeah any feedback please give us

01:30:05,040 --> 01:30:08,000
your feedback as well

01:30:06,000 --> 01:30:09,360
for skill training workshop skills

01:30:08,000 --> 01:30:12,639
future

01:30:09,360 --> 01:30:15,600
okay and you're good for today

01:30:12,639 --> 01:30:17,440
okay so thank you very much everyone so

01:30:15,600 --> 01:30:19,280
i think we are good for today and really

01:30:17,440 --> 01:30:21,920
um lauren and i both appreciate your

01:30:19,280 --> 01:30:23,520
time and i think it's really good um

01:30:21,920 --> 01:30:25,199
we are really not happy to be here to

01:30:23,520 --> 01:30:25,920
present to you guys our knowledge and

01:30:25,199 --> 01:30:27,760
our passion

01:30:25,920 --> 01:30:29,520
so i think we would love to hear

01:30:27,760 --> 01:30:30,239
feedback as well so if you have any

01:30:29,520 --> 01:30:35,760
feedback

01:30:30,239 --> 01:30:37,600
just give us some feedback as well

01:30:35,760 --> 01:30:39,840
so yeah so i think this is the end for

01:30:37,600 --> 01:30:41,199
today um maybe we'll be hanging around

01:30:39,840 --> 01:30:42,719
for a couple minutes more if you have

01:30:41,199 --> 01:30:43,760
any other questions you anything you

01:30:42,719 --> 01:30:45,760
want to ask

01:30:43,760 --> 01:30:48,320
or get connected maybe just like us on

01:30:45,760 --> 01:30:48,320
chat right

01:30:54,350 --> 01:30:57,409
[Music]

01:31:00,840 --> 01:31:04,400
huh

01:31:02,320 --> 01:31:04,400

YouTube URL: https://www.youtube.com/watch?v=lJiHuxvg21Q


