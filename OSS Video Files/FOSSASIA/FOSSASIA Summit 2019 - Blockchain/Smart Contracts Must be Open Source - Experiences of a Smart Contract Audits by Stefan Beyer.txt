Title: Smart Contracts Must be Open Source - Experiences of a Smart Contract Audits by Stefan Beyer
Publication date: 2019-03-31
Playlist: FOSSASIA Summit 2019 - Blockchain
Description: 
	17 March 2019 13:45, Theatre Lounge

Smart Contracts are self-executing contracts, implemented in Computer code on a blockchain. They are immutable, tend to control asset flows and can be a major security risk.

Over the last 18 months, I have audited more than 20 complex smart contract systems. In this talk, I argue for smart contracts to be published as open source and their audits to be made public.

I highlight a number of high-profile security incidents, how they could have been prevented, and how open source significantly increases the security of smart contracts.

I also provide an insight into the auditing process and common mishaps.
Captions: 
	00:00:00,000 --> 00:00:07,700
good afternoon I'm Stefan buyer I'm the

00:00:05,009 --> 00:00:09,660
CEO and founder of Group Tronics we are

00:00:07,700 --> 00:00:11,849
spin-off of a large cybersecurity

00:00:09,660 --> 00:00:14,160
company and one of the many things we do

00:00:11,849 --> 00:00:17,130
is audit smart contracts and focus on

00:00:14,160 --> 00:00:19,680
cybersecurity in the blockchain space so

00:00:17,130 --> 00:00:22,380
in this talk I just want to go over our

00:00:19,680 --> 00:00:24,060
personal experience of auditing smart

00:00:22,380 --> 00:00:25,980
contracts and how it relates to open

00:00:24,060 --> 00:00:27,779
source and how we think open source can

00:00:25,980 --> 00:00:28,830
make smart contracts and blockchain in

00:00:27,779 --> 00:00:32,790
general much safer

00:00:28,830 --> 00:00:35,130
what secure so so one of the questions

00:00:32,790 --> 00:00:37,590
I'm often asked is a blockchain secure

00:00:35,130 --> 00:00:39,600
right so if you do move a lot of money

00:00:37,590 --> 00:00:42,059
around with blockchain sensible

00:00:39,600 --> 00:00:46,230
questions to ask and my answer usually

00:00:42,059 --> 00:00:49,079
is yes block chains are secure in in

00:00:46,230 --> 00:00:51,660
that the underlying cryptography has

00:00:49,079 --> 00:00:54,210
been sound you know it worked for a

00:00:51,660 --> 00:00:58,170
while the mathematics have not been

00:00:54,210 --> 00:01:00,989
broken so block chains themselves are

00:00:58,170 --> 00:01:03,629
secure but the digital assets we

00:01:00,989 --> 00:01:04,860
represent on them usually are not so so

00:01:03,629 --> 00:01:07,770
this may sound strange you know if the

00:01:04,860 --> 00:01:09,210
cryptography is secure why do we have a

00:01:07,770 --> 00:01:14,340
problem with securing these digital

00:01:09,210 --> 00:01:18,090
assets so just to prove my point that

00:01:14,340 --> 00:01:21,600
there's some facts so in 2018 there were

00:01:18,090 --> 00:01:22,890
1.7 billion of digital assets stolen or

00:01:21,600 --> 00:01:25,860
lost from blockchains

00:01:22,890 --> 00:01:27,420
and you know depending on which report

00:01:25,860 --> 00:01:29,700
you read you get different numbers but

00:01:27,420 --> 00:01:32,939
you know which can generally agree that

00:01:29,700 --> 00:01:35,460
there's an issue money it does disappear

00:01:32,939 --> 00:01:37,500
and another interesting fact is that the

00:01:35,460 --> 00:01:39,420
two groups that have recently been

00:01:37,500 --> 00:01:43,140
identified that are behind most of the

00:01:39,420 --> 00:01:45,270
attacks so this is interesting in that

00:01:43,140 --> 00:01:47,399
it just shows that it's a business model

00:01:45,270 --> 00:01:49,619
you know it's become very lucrative to

00:01:47,399 --> 00:01:53,189
break smart contracts and get digital

00:01:49,619 --> 00:01:57,060
assets and still you know Bitcoin tokens

00:01:53,189 --> 00:02:02,040
whatever so you know it's look at the

00:01:57,060 --> 00:02:02,820
fitnah for big groups to be set up so so

00:02:02,040 --> 00:02:05,369
why is this

00:02:02,820 --> 00:02:07,409
if the cryptography is secure why is it

00:02:05,369 --> 00:02:10,350
that smart contracts or well or digital

00:02:07,409 --> 00:02:13,330
assets are not so

00:02:10,350 --> 00:02:15,460
there's three things really first of all

00:02:13,330 --> 00:02:17,380
the district assets are usually

00:02:15,460 --> 00:02:20,380
represented in a smart contract somehow

00:02:17,380 --> 00:02:22,990
whether you tokenize art move around

00:02:20,380 --> 00:02:25,870
Bitcoin or move around aetherium or half

00:02:22,990 --> 00:02:28,570
a token that's usually smart contract

00:02:25,870 --> 00:02:31,120
involved at some point and these are

00:02:28,570 --> 00:02:32,440
incredibly difficult to get right so

00:02:31,120 --> 00:02:35,230
I'll talk a bit about this in a minute

00:02:32,440 --> 00:02:37,180
but other concerns are that there's a

00:02:35,230 --> 00:02:39,970
lot of off chain code involved you know

00:02:37,180 --> 00:02:42,760
smart contracts are only a small part of

00:02:39,970 --> 00:02:44,740
a typical proxy application you you need

00:02:42,760 --> 00:02:47,890
to interact with them through an API or

00:02:44,740 --> 00:02:50,230
through a website and that code shares

00:02:47,890 --> 00:02:54,940
the same security concerns with any

00:02:50,230 --> 00:02:57,310
other software and finally the humans

00:02:54,940 --> 00:02:58,720
involved right so every cyber security

00:02:57,310 --> 00:03:01,390
analyst will tell you that the weakest

00:02:58,720 --> 00:03:04,210
link in all cybersecurity is a human the

00:03:01,390 --> 00:03:06,010
user and this is because humans you know

00:03:04,210 --> 00:03:09,150
that they're they lose their password

00:03:06,010 --> 00:03:12,190
they have social engineering attacks

00:03:09,150 --> 00:03:14,290
they might lose the keys so they're

00:03:12,190 --> 00:03:17,140
generally really bad for for cyber

00:03:14,290 --> 00:03:19,420
security but you know these last two

00:03:17,140 --> 00:03:21,310
often code and humans that they are not

00:03:19,420 --> 00:03:24,100
unique to blockchain that that's in all

00:03:21,310 --> 00:03:29,489
software so let's focus on on the smart

00:03:24,100 --> 00:03:32,800
contract issue so so a smart contract is

00:03:29,489 --> 00:03:35,350
often described with this metaphor here

00:03:32,800 --> 00:03:39,010
of a drink machine and and I don't think

00:03:35,350 --> 00:03:40,269
it's a very bad metaphor but but

00:03:39,010 --> 00:03:42,130
basically it means you know there's a

00:03:40,269 --> 00:03:44,709
contract between myself and the company

00:03:42,130 --> 00:03:47,260
selling drinks and that contract says

00:03:44,709 --> 00:03:50,590
you know I pay $1 or whatever and out

00:03:47,260 --> 00:03:52,150
comes a con and this is automated by by

00:03:50,590 --> 00:03:54,610
the smart contract in the form of a

00:03:52,150 --> 00:03:57,760
drink machine so so really a smart

00:03:54,610 --> 00:04:01,480
contract is is an automation automation

00:03:57,760 --> 00:04:03,370
tool of some form of agreement possibly

00:04:01,480 --> 00:04:06,209
a legal agreement but you know it might

00:04:03,370 --> 00:04:06,209
just be an informal agreement

00:04:06,510 --> 00:04:13,930
so in blockchain context smart contracts

00:04:10,540 --> 00:04:16,870
are written in code there are just

00:04:13,930 --> 00:04:18,729
computer programs you know but I usually

00:04:16,870 --> 00:04:21,039
represent some form of agreement and

00:04:18,729 --> 00:04:22,510
with terms and conditions and and

00:04:21,039 --> 00:04:23,440
they're deployed and executed on the

00:04:22,510 --> 00:04:25,780
blockchain

00:04:23,440 --> 00:04:28,750
which makes em immutable it is an

00:04:25,780 --> 00:04:30,430
important property and the sort of

00:04:28,750 --> 00:04:31,840
autonomous in that you know we might

00:04:30,430 --> 00:04:35,920
have to interact with them through an

00:04:31,840 --> 00:04:37,660
API but usually the terms are programmed

00:04:35,920 --> 00:04:40,660
in there and and they're not modifiable

00:04:37,660 --> 00:04:42,940
from the outside and certain events that

00:04:40,660 --> 00:04:45,010
trigger the execution and you know it's

00:04:42,940 --> 00:04:46,930
just an interesting fact they usually in

00:04:45,010 --> 00:04:48,760
a public blockchain require some gas to

00:04:46,930 --> 00:04:50,680
execute which is just a small payment

00:04:48,760 --> 00:04:56,050
for for making sure there's no denial of

00:04:50,680 --> 00:04:57,820
service type scenario but but basically

00:04:56,050 --> 00:04:59,500
it's just code you know here's an

00:04:57,820 --> 00:05:02,140
example contract very simple smart

00:04:59,500 --> 00:05:06,880
contract for a cerium written in

00:05:02,140 --> 00:05:08,290
solidity all these structures are

00:05:06,880 --> 00:05:09,900
recognizable from other programming

00:05:08,290 --> 00:05:12,040
languages

00:05:09,900 --> 00:05:14,440
basically what this does it's just toss

00:05:12,040 --> 00:05:15,940
a hash value of some document or

00:05:14,440 --> 00:05:18,460
anything really on the blockchain

00:05:15,940 --> 00:05:21,430
together with a timestamp so this can be

00:05:18,460 --> 00:05:24,460
used to replace sort of a notary service

00:05:21,430 --> 00:05:27,220
in proof of existence of a contract or

00:05:24,460 --> 00:05:29,260
document it's very simple smart contract

00:05:27,220 --> 00:05:33,180
but but it's actually a sort of an easy

00:05:29,260 --> 00:05:33,180
but useful hello world example

00:05:33,570 --> 00:05:40,390
but anyway why a smart contracts the

00:05:37,300 --> 00:05:41,919
security issue well first of all if

00:05:40,390 --> 00:05:44,169
we're talking about a public blockchain

00:05:41,919 --> 00:05:45,610
they're publicly accessible you want the

00:05:44,169 --> 00:05:47,080
public to be able to interact with a

00:05:45,610 --> 00:05:50,590
smart contractor in which everyone can

00:05:47,080 --> 00:05:53,590
see the smart contract they they they

00:05:50,590 --> 00:05:55,630
usually hold somebody roxxon's are

00:05:53,590 --> 00:05:59,260
typically used to represent anything of

00:05:55,630 --> 00:06:00,970
value could be a cryptocurrency but it

00:05:59,260 --> 00:06:03,520
doesn't have to be it can be you know a

00:06:00,970 --> 00:06:05,140
property anything but but generally

00:06:03,520 --> 00:06:10,390
represents my brother you and it moves

00:06:05,140 --> 00:06:13,210
value around so next they're immutable

00:06:10,390 --> 00:06:14,950
which means well it's a very important

00:06:13,210 --> 00:06:16,750
property for the smart contract because

00:06:14,950 --> 00:06:19,120
the only reason I work is that they

00:06:16,750 --> 00:06:21,040
cannot the terms cannot be modified but

00:06:19,120 --> 00:06:22,600
it also means that once deployed a smart

00:06:21,040 --> 00:06:24,070
contract cannot be fixed so if you

00:06:22,600 --> 00:06:26,200
discover a park after it's been

00:06:24,070 --> 00:06:28,210
destroyed they deploy it you just cannot

00:06:26,200 --> 00:06:30,790
fix it in you know the only option you

00:06:28,210 --> 00:06:35,260
have is to redeploy the contract make a

00:06:30,790 --> 00:06:37,000
new one so these properties together are

00:06:35,260 --> 00:06:37,400
very useful but that sort of makes mark

00:06:37,000 --> 00:06:39,229
on

00:06:37,400 --> 00:06:40,639
an ideal target for cyber criminals you

00:06:39,229 --> 00:06:44,270
know something that is publicly

00:06:40,639 --> 00:06:47,979
accessible it's valuable and and cannot

00:06:44,270 --> 00:06:47,979
be fixed that that's a very good target

00:06:48,490 --> 00:06:54,530
so there's a list of some well-known

00:06:51,889 --> 00:07:00,350
incidents and there many more but these

00:06:54,530 --> 00:07:03,460
are just sort of important events back

00:07:00,350 --> 00:07:05,900
in 2016 there was a tower attack

00:07:03,460 --> 00:07:08,180
interesting to read up on if you're

00:07:05,900 --> 00:07:11,449
interested its if you've not heard of it

00:07:08,180 --> 00:07:13,699
but but it sort of showed us made us

00:07:11,449 --> 00:07:15,229
rethink what smart contracts can do and

00:07:13,699 --> 00:07:17,389
how they should be used because there

00:07:15,229 --> 00:07:20,419
was a very obvious vulnerability that

00:07:17,389 --> 00:07:24,500
lost a lot of money then at the end of

00:07:20,419 --> 00:07:29,120
2017 there was a parity multi-sig hack

00:07:24,500 --> 00:07:30,590
or buk whatever you want to call it and

00:07:29,120 --> 00:07:32,150
it basically meant that a lot of money

00:07:30,590 --> 00:07:34,490
was frozen on the blockchain and cannot

00:07:32,150 --> 00:07:36,680
be retrieved and that's interesting

00:07:34,490 --> 00:07:39,349
because it was a very important company

00:07:36,680 --> 00:07:40,759
parity that provided this code and had

00:07:39,349 --> 00:07:43,370
this happened so it's not you know it's

00:07:40,759 --> 00:07:45,410
not just small smart contracts someone

00:07:43,370 --> 00:07:48,380
written at home and got it wrong this is

00:07:45,410 --> 00:07:50,990
a big incident and and at the end of

00:07:48,380 --> 00:07:53,300
2013 a project called spanked chain lost

00:07:50,990 --> 00:07:56,840
40k which is not a lot of money but I

00:07:53,300 --> 00:07:59,000
put this up here because it's exactly

00:07:56,840 --> 00:08:01,639
the same vulnerability as a two thousand

00:07:59,000 --> 00:08:03,710
sixteen dollar attack so this just shows

00:08:01,639 --> 00:08:05,419
that in two and a half years since the

00:08:03,710 --> 00:08:07,010
first big incident we've not really

00:08:05,419 --> 00:08:09,349
learned much the reason there was less

00:08:07,010 --> 00:08:13,520
money lost was because there was less

00:08:09,349 --> 00:08:16,270
money to be stolen but then just

00:08:13,520 --> 00:08:18,370
recently there was a very another

00:08:16,270 --> 00:08:21,000
very interesting incident and we

00:08:18,370 --> 00:08:23,350
actually had to postpone the etherium

00:08:21,000 --> 00:08:25,840
Constantinople update because of an

00:08:23,350 --> 00:08:28,360
issue with how that would affect already

00:08:25,840 --> 00:08:29,710
deployed smart contracts so there were a

00:08:28,360 --> 00:08:32,200
number of smart contracts that were

00:08:29,710 --> 00:08:35,020
considered safe but there would not have

00:08:32,200 --> 00:08:37,510
been after the update well that's

00:08:35,020 --> 00:08:39,430
interesting because you may deploy a

00:08:37,510 --> 00:08:42,250
contract that you think is secure but

00:08:39,430 --> 00:08:44,649
then the actual protocol has a change or

00:08:42,250 --> 00:08:50,170
is updated and and then it's not so

00:08:44,649 --> 00:08:52,420
that's that's very boring so this is our

00:08:50,170 --> 00:08:54,940
experience of one year of auditing smart

00:08:52,420 --> 00:08:57,279
contracts in the last year so with with

00:08:54,940 --> 00:08:59,110
auditor 22 projects there are fairly

00:08:57,279 --> 00:09:02,200
large projects including a lot of smart

00:08:59,110 --> 00:09:04,660
contracts they included simple tokens

00:09:02,200 --> 00:09:08,560
and ICS but also bigger projects such as

00:09:04,660 --> 00:09:13,630
investment funds we did a big sto

00:09:08,560 --> 00:09:15,810
platform prediction market and there's a

00:09:13,630 --> 00:09:18,310
huge variety of contracts but anyway

00:09:15,810 --> 00:09:21,370
these are the number that the statistics

00:09:18,310 --> 00:09:23,350
that came out of these audits minor

00:09:21,370 --> 00:09:25,329
issues here these are really small

00:09:23,350 --> 00:09:27,070
mistakes we don't follow best practices

00:09:25,329 --> 00:09:28,390
you know that they probably not a

00:09:27,070 --> 00:09:31,630
security issue but there might be in the

00:09:28,390 --> 00:09:33,130
future of the protocol changes like the

00:09:31,630 --> 00:09:36,790
type of thing that would have been

00:09:33,130 --> 00:09:39,520
affected by the 2019 Constantinople

00:09:36,790 --> 00:09:41,050
update if it's gone ahead as planned you

00:09:39,520 --> 00:09:43,720
know would have probably been identified

00:09:41,050 --> 00:09:46,089
as a minor minor issue major issues are

00:09:43,720 --> 00:09:47,500
big mistakes that are exploitable but we

00:09:46,089 --> 00:09:50,680
probably haven't figured out a way how

00:09:47,500 --> 00:09:53,890
to exploit it yet and critical mistakes

00:09:50,680 --> 00:09:55,120
are definitely exploitable someone will

00:09:53,890 --> 00:09:58,180
lose money and and we usually

00:09:55,120 --> 00:10:02,320
demonstrate this how we can exploit this

00:09:58,180 --> 00:10:04,450
type of issue so these numbers what do

00:10:02,320 --> 00:10:05,890
they show us well I'd like to think that

00:10:04,450 --> 00:10:09,160
show that we were pretty good at finding

00:10:05,890 --> 00:10:12,370
these issues but but apart from this it

00:10:09,160 --> 00:10:13,810
also shows us that contracts are smart

00:10:12,370 --> 00:10:16,899
contracts are incredibly difficult to

00:10:13,810 --> 00:10:19,240
get right so these these were important

00:10:16,899 --> 00:10:21,459
projects some of them were you know of

00:10:19,240 --> 00:10:25,300
less quality some of our good quality

00:10:21,459 --> 00:10:27,880
but within the 22 projects audited in

00:10:25,300 --> 00:10:29,400
2018 there was not a single flawless

00:10:27,880 --> 00:10:31,140
project so that's not

00:10:29,400 --> 00:10:36,270
good project but he didn't find at least

00:10:31,140 --> 00:10:40,110
minor issues so that's very important to

00:10:36,270 --> 00:10:44,100
consider so what's the solution to this

00:10:40,110 --> 00:10:46,110
well first of all it's essential to get

00:10:44,100 --> 00:10:47,250
the smart contract audit and and I'm not

00:10:46,110 --> 00:10:49,770
just saying is because I'm a smart

00:10:47,250 --> 00:10:53,430
contract auditor and and I live from

00:10:49,770 --> 00:10:56,760
this but but it's really essential you

00:10:53,430 --> 00:11:00,150
need some external entity which is

00:10:56,760 --> 00:11:03,390
independent to look at your code in this

00:11:00,150 --> 00:11:04,860
space and it needs to be probably

00:11:03,390 --> 00:11:07,080
probably need to get two or three

00:11:04,860 --> 00:11:08,550
different audits and it needs to be

00:11:07,080 --> 00:11:10,890
someone that doesn't know the code paths

00:11:08,550 --> 00:11:14,880
yet and has a certain procedure and and

00:11:10,890 --> 00:11:17,040
and methodology to it so this is not

00:11:14,880 --> 00:11:18,900
cheap but compared to the marketing

00:11:17,040 --> 00:11:20,880
budget of a lot of blockchain projects

00:11:18,900 --> 00:11:22,440
it's actually minor and and it's it's

00:11:20,880 --> 00:11:23,970
you know it's very good marketing to get

00:11:22,440 --> 00:11:28,680
a good audit report as well

00:11:23,970 --> 00:11:32,190
so highly recommendable but then

00:11:28,680 --> 00:11:37,200
obviously the next solution and this

00:11:32,190 --> 00:11:42,150
being force here is to get community

00:11:37,200 --> 00:11:45,360
support and you do that by using free

00:11:42,150 --> 00:11:49,800
open source software and and following

00:11:45,360 --> 00:11:53,250
the whole model so the first thing you

00:11:49,800 --> 00:11:55,680
can do is you know you can as in legal

00:11:53,250 --> 00:11:57,000
contracts there's no point writing smart

00:11:55,680 --> 00:11:59,370
contracts from scratch so that's

00:11:57,000 --> 00:12:02,160
templates out the template libraries

00:11:59,370 --> 00:12:03,630
that you can reuse in you know the same

00:12:02,160 --> 00:12:05,310
way lawyers work they don't as I hardly

00:12:03,630 --> 00:12:08,040
ever provide their the contracts from

00:12:05,310 --> 00:12:13,440
scratch why should smart contract

00:12:08,040 --> 00:12:15,600
program must do that so so you get a lot

00:12:13,440 --> 00:12:18,390
of community audited code for free which

00:12:15,600 --> 00:12:21,240
is already out there which you know it's

00:12:18,390 --> 00:12:23,640
been audited by a very large active

00:12:21,240 --> 00:12:25,770
community and and you will find most

00:12:23,640 --> 00:12:28,830
common functionality already covered so

00:12:25,770 --> 00:12:30,660
for typical project nowadays you might

00:12:28,830 --> 00:12:32,520
only have to write 10% of the code and

00:12:30,660 --> 00:12:35,130
the rest is just using a big library a

00:12:32,520 --> 00:12:37,740
good example of this is open Zeppelin

00:12:35,130 --> 00:12:41,310
very good project just listed up here

00:12:37,740 --> 00:12:43,320
with the link and and then the next step

00:12:41,310 --> 00:12:43,680
of course is to open-source your own

00:12:43,320 --> 00:12:48,569
code

00:12:43,680 --> 00:12:50,249
now this is you know being here we were

00:12:48,569 --> 00:12:53,550
all in favor of open source code I

00:12:50,249 --> 00:12:55,980
suppose but in in in in blockchain space

00:12:53,550 --> 00:12:58,170
it's really a no-brainer because we are

00:12:55,980 --> 00:13:01,949
placing trust into protocols and smart

00:12:58,170 --> 00:13:06,839
contracts removing trusted third parties

00:13:01,949 --> 00:13:09,319
so we obviously want that that protocol

00:13:06,839 --> 00:13:11,699
or that smart contract to be open and

00:13:09,319 --> 00:13:13,800
it's the only way to prove the correct

00:13:11,699 --> 00:13:19,199
behavior of a contract and get community

00:13:13,800 --> 00:13:20,939
validation and and you know if you take

00:13:19,199 --> 00:13:22,920
this step further you can actually offer

00:13:20,939 --> 00:13:25,350
bounties and that's a common way of

00:13:22,920 --> 00:13:27,749
finding bugs in smart contracts your

00:13:25,350 --> 00:13:29,670
offer bounty program where you get the

00:13:27,749 --> 00:13:32,009
community to audit your code and to do

00:13:29,670 --> 00:13:34,019
that you know you incentivize them and

00:13:32,009 --> 00:13:35,790
you actually pay them for bugs

00:13:34,019 --> 00:13:38,040
discovered and and there are ways to do

00:13:35,790 --> 00:13:40,559
that on the blockchain through smart

00:13:38,040 --> 00:13:43,170
contracts as well in a transparent way

00:13:40,559 --> 00:13:45,329
for example solidified which is one

00:13:43,170 --> 00:13:46,829
platform to do that and so a bit of a

00:13:45,329 --> 00:13:49,429
disclaimer I do a lot of work for them

00:13:46,829 --> 00:13:52,610
so that's why I list them here but but I

00:13:49,429 --> 00:13:59,249
generally believe they're good platform

00:13:52,610 --> 00:14:03,839
so so as I already said it's not just a

00:13:59,249 --> 00:14:05,670
good idea to open smart contracts if we

00:14:03,839 --> 00:14:08,459
are working on a public blockchain I

00:14:05,670 --> 00:14:10,800
think it should be imperative smart

00:14:08,459 --> 00:14:12,839
contracts must be open source not just

00:14:10,800 --> 00:14:15,089
for the security but you know if you

00:14:12,839 --> 00:14:17,129
want users to interact with your smart

00:14:15,089 --> 00:14:18,959
contract on a public blockchain you must

00:14:17,129 --> 00:14:21,959
they must be able to verify the terms of

00:14:18,959 --> 00:14:23,459
the contract it would be like having a

00:14:21,959 --> 00:14:25,259
legal contract with someone who hasn't

00:14:23,459 --> 00:14:30,029
read the contract that doesn't make

00:14:25,259 --> 00:14:32,189
sense at all and going a step further I

00:14:30,029 --> 00:14:35,490
also think audit reports must be made

00:14:32,189 --> 00:14:37,499
public why well because not everyone is

00:14:35,490 --> 00:14:40,799
a smart contract expert and knows how to

00:14:37,499 --> 00:14:42,360
program and you know you want the

00:14:40,799 --> 00:14:44,249
security validation that you get of a

00:14:42,360 --> 00:14:46,199
third party want that to be transparent

00:14:44,249 --> 00:14:47,369
and you want to demonstrate the

00:14:46,199 --> 00:14:52,309
correctness of the contract to

00:14:47,369 --> 00:14:52,309
non-expert users so

00:14:53,410 --> 00:14:59,920
yeah I was just shown the ten-minute

00:14:55,760 --> 00:14:59,920
sign but a mom ha I'm actually finished

00:15:00,430 --> 00:15:16,790
yeah

00:15:01,640 --> 00:15:20,570
questions yeah well we yeah the question

00:15:16,790 --> 00:15:24,080
is what was about tools that that we use

00:15:20,570 --> 00:15:26,839
for for smart contract auditing and what

00:15:24,080 --> 00:15:29,120
we mainly were all these 22 projects

00:15:26,839 --> 00:15:31,730
were done for a cerium based smart

00:15:29,120 --> 00:15:33,890
contracts which is where we find most

00:15:31,730 --> 00:15:37,570
work you know we try to do others but

00:15:33,890 --> 00:15:42,050
it's mainly a theorem that comes in and

00:15:37,570 --> 00:15:43,730
there's a mythology to it a process so

00:15:42,050 --> 00:15:45,170
so first of all you know we just try to

00:15:43,730 --> 00:15:47,060
get a hang of the code read through it

00:15:45,170 --> 00:15:51,380
but then we actually run a number of

00:15:47,060 --> 00:15:53,690
tools there's there's static code

00:15:51,380 --> 00:15:55,970
analysis you know this tool calls Lita

00:15:53,690 --> 00:15:59,950
which which open source and and we use

00:15:55,970 --> 00:16:03,430
there that's my through which is also

00:15:59,950 --> 00:16:06,560
commonly used tool we use both of them

00:16:03,430 --> 00:16:10,930
and we are sometimes experimenting with

00:16:06,560 --> 00:16:14,510
more complex tools like fast testing but

00:16:10,930 --> 00:16:18,140
I'm not sure of the usefulness in this

00:16:14,510 --> 00:16:19,550
space yet mmm and then obviously going

00:16:18,140 --> 00:16:21,200
to the next step where we have to sort

00:16:19,550 --> 00:16:23,360
of a checklist of things will it be look

00:16:21,200 --> 00:16:26,839
for and look for

00:16:23,360 --> 00:16:32,210
a list of known security vulnerabilities

00:16:26,839 --> 00:16:35,709
and and the final step is to to you know

00:16:32,210 --> 00:16:40,459
to actually run exploits and then we

00:16:35,709 --> 00:16:42,740
generally get up a test network and

00:16:40,459 --> 00:16:45,380
deploy the contracts and then we are

00:16:42,740 --> 00:16:48,080
just using the tools if it's a traffic

00:16:45,380 --> 00:16:50,570
project which is a way which is a

00:16:48,080 --> 00:16:53,990
framework often used then you know it's

00:16:50,570 --> 00:16:57,380
very easy to use that tool chain to to

00:16:53,990 --> 00:17:01,060
get a test network up locally and and

00:16:57,380 --> 00:17:01,060
and run some tests

00:17:22,900 --> 00:17:26,960
yeah

00:17:24,230 --> 00:17:29,750
okay so the question is what what's my

00:17:26,960 --> 00:17:33,110
view on on making smart contracts easier

00:17:29,750 --> 00:17:34,820
to develop and and yeah you're right

00:17:33,110 --> 00:17:35,330
obviously that that might put me out of

00:17:34,820 --> 00:17:40,070
business

00:17:35,330 --> 00:17:42,290
but yeah joking aside I think it's that

00:17:40,070 --> 00:17:46,070
there is a lot of scope for improving

00:17:42,290 --> 00:17:48,170
smart contract development and right now

00:17:46,070 --> 00:17:50,240
you have to be a programmer and you have

00:17:48,170 --> 00:17:53,000
to be a fairly good programmer at a

00:17:50,240 --> 00:17:54,350
relatively low level and there are a

00:17:53,000 --> 00:17:58,750
number of projects working on things

00:17:54,350 --> 00:18:03,290
like this but but there's no way yet of

00:17:58,750 --> 00:18:05,780
sort of illegal contract to be

00:18:03,290 --> 00:18:09,410
translated into a smart contract easily

00:18:05,780 --> 00:18:12,340
and there's also no way of of writing

00:18:09,410 --> 00:18:17,710
smart contracts at a very high level

00:18:12,340 --> 00:18:19,790
simple script language and so yeah

00:18:17,710 --> 00:18:21,200
obviously that would be very important

00:18:19,790 --> 00:18:24,280
and and I know there are a number of

00:18:21,200 --> 00:18:24,280
projects working on this

00:18:33,010 --> 00:18:35,760
okay

00:18:35,910 --> 00:18:42,860
your questions any other nope well thank

00:18:40,230 --> 00:18:46,480
you very much Stefan okay thank you

00:18:42,860 --> 00:18:46,480

YouTube URL: https://www.youtube.com/watch?v=udoVEPTQsek


