Title: How to Succeed with Your Software Project - Mishari Muqbil
Publication date: 2019-10-18
Playlist: Open Tech Summit Bangkok 2019 - Open Tech
Description: 
	Mishari Muqbil, CEO Zymple and OpenTechSummit Organizer

Humans have been building bridges for thousands of years, we know how to conceive, design, plan and build them well. Computing is on the other hand is a new and relatively
immature field, having existed for less than a century only. At the same time its practitioners have to take up tremendous responsibilities. In this talk I will discuss why some software projects succeed and others don't and how to increase the likelihood of your project's success. An important part in every project is communication and collaboration among team members. Therefore, I will focus spefically on communication
strategies with different team members in a project and the question how to communicate challenges effectively to non-technical people, such as your boss.
Captions: 
	00:00:00,030 --> 00:00:08,309
hello everyone I am sorry bill I have a

00:00:05,910 --> 00:00:10,170
consultancy company called simple we

00:00:08,309 --> 00:00:13,559
help companies with digital

00:00:10,170 --> 00:00:14,910
transformation what does that mean

00:00:13,559 --> 00:00:17,609
that means if you do not using a

00:00:14,910 --> 00:00:20,580
calculator it's probably about time you

00:00:17,609 --> 00:00:26,490
have one like our bodies in the election

00:00:20,580 --> 00:00:30,900
commission so when when I go through

00:00:26,490 --> 00:00:34,559
these projects with my clients quite

00:00:30,900 --> 00:00:37,920
often it is after the fact that their

00:00:34,559 --> 00:00:42,390
software or IT project has failed

00:00:37,920 --> 00:00:45,629
spectacularly and many people ask me why

00:00:42,390 --> 00:00:49,050
why is our software projects why are our

00:00:45,629 --> 00:00:52,230
software projects failing so I had

00:00:49,050 --> 00:00:57,539
prepared this slide initially to show

00:00:52,230 --> 00:00:59,070
these people decision-makers why it is

00:00:57,539 --> 00:01:05,040
that they are in the condition that they

00:00:59,070 --> 00:01:06,630
are so as geeks I hope that also you get

00:01:05,040 --> 00:01:10,070
to learn a thing or two about how to

00:01:06,630 --> 00:01:15,780
communicate effectively to stakeholders

00:01:10,070 --> 00:01:20,130
so computers right in the span of two or

00:01:15,780 --> 00:01:22,890
three generations we went from this this

00:01:20,130 --> 00:01:28,290
kind of set up to something very very

00:01:22,890 --> 00:01:30,900
small and the amount of CPU power in in

00:01:28,290 --> 00:01:33,990
the computers has increased a billion

00:01:30,900 --> 00:01:39,119
times right I mean there's nothing else

00:01:33,990 --> 00:01:41,970
that we have that has evolved so rapidly

00:01:39,119 --> 00:01:43,560
for example building a bridge we have

00:01:41,970 --> 00:01:45,619
essentially been building bridges the

00:01:43,560 --> 00:01:50,250
same way for the last few thousand

00:01:45,619 --> 00:01:54,630
thousand years can you imagine building

00:01:50,250 --> 00:01:57,000
software like that it's it's as if all

00:01:54,630 --> 00:02:01,200
of a sudden within three generations we

00:01:57,000 --> 00:02:06,270
went from bricks to carbon nanotubes

00:02:01,200 --> 00:02:09,000
right so here's a quote as you probably

00:02:06,270 --> 00:02:11,400
know about the US sanctions on Huawei

00:02:09,000 --> 00:02:13,360
right look at this part the company's

00:02:11,400 --> 00:02:18,150
software engineering is like

00:02:13,360 --> 00:02:22,810
something from 20 years ago 20 years ago

00:02:18,150 --> 00:02:25,810
if I told we're still building bridges

00:02:22,810 --> 00:02:28,090
like we did 20 years ago right but then

00:02:25,810 --> 00:02:32,850
if you build software like you did 20

00:02:28,090 --> 00:02:36,280
years ago it is a major major flaw right

00:02:32,850 --> 00:02:38,440
what else when I went to university my

00:02:36,280 --> 00:02:44,800
university had a 47 million dollar

00:02:38,440 --> 00:02:47,320
software project that failed Hertz as

00:02:44,800 --> 00:02:49,090
well has their own Horror Story 32

00:02:47,320 --> 00:02:56,489
million dollars in a software project

00:02:49,090 --> 00:03:03,459
that failed 440 million dollars lost in

00:02:56,489 --> 00:03:06,610
30 minutes and of course there is the

00:03:03,459 --> 00:03:10,780
Ariana 5 rocket disaster also because of

00:03:06,610 --> 00:03:14,760
defective software and of course our

00:03:10,780 --> 00:03:17,110
favorite blue screen in in Microsoft

00:03:14,760 --> 00:03:18,850
they make great products these days by

00:03:17,110 --> 00:03:23,500
the way since they support open source

00:03:18,850 --> 00:03:25,420
software so so so there's been a lot of

00:03:23,500 --> 00:03:27,370
soul-searching right we really don't

00:03:25,420 --> 00:03:29,739
know how to do software or very well

00:03:27,370 --> 00:03:31,780
because there's no there's no built up

00:03:29,739 --> 00:03:33,190
knowledge there's no lore that passes on

00:03:31,780 --> 00:03:35,049
from one generation to the other

00:03:33,190 --> 00:03:37,360
because it's only been three generations

00:03:35,049 --> 00:03:39,310
and with every generation the

00:03:37,360 --> 00:03:39,820
technological leap has been lightyears

00:03:39,310 --> 00:03:42,489
ahead

00:03:39,820 --> 00:03:48,580
however we are starting to see some

00:03:42,489 --> 00:03:51,040
truths which are which seemed to hold so

00:03:48,580 --> 00:03:53,950
this is the mythical man-month I

00:03:51,040 --> 00:03:56,560
recommend it to anyone who is about to

00:03:53,950 --> 00:04:00,160
embark on a software project it was

00:03:56,560 --> 00:04:03,489
written in 1975 and much that is written

00:04:00,160 --> 00:04:06,940
in that book still holds true today so

00:04:03,489 --> 00:04:09,250
if it has held true for 25 25 years it's

00:04:06,940 --> 00:04:13,780
like the old testament or the works of

00:04:09,250 --> 00:04:16,329
Plato it will it in about sorry not 25

00:04:13,780 --> 00:04:18,790
years third over 30 years it will

00:04:16,329 --> 00:04:21,520
probably continue to hold true in

00:04:18,790 --> 00:04:24,700
another 30 years so here are some

00:04:21,520 --> 00:04:26,510
highlights adding manpower to a late

00:04:24,700 --> 00:04:35,120
software project make

00:04:26,510 --> 00:04:36,650
it later alright as time passes the

00:04:35,120 --> 00:04:38,840
system becomes less and less well

00:04:36,650 --> 00:04:41,720
ordered sooner or later fixing ceases to

00:04:38,840 --> 00:04:44,420
gain any ground each forward step is

00:04:41,720 --> 00:04:46,790
matched by backward one and at the end a

00:04:44,420 --> 00:04:50,080
brand new from the ground our redesign

00:04:46,790 --> 00:04:53,510
is necessary so who's had to face this

00:04:50,080 --> 00:04:57,020
who has had to rewrite your software yes

00:04:53,510 --> 00:05:00,350
don't be shy it happens to the best of

00:04:57,020 --> 00:05:02,330
us this was in 1990s 1975 you're not

00:05:00,350 --> 00:05:07,250
doing anything wrong this is the very

00:05:02,330 --> 00:05:09,260
nature of writing software software's

00:05:07,250 --> 00:05:10,520
tend the software architecture the way

00:05:09,260 --> 00:05:11,930
that the software design and put

00:05:10,520 --> 00:05:16,970
together tends to reflect the

00:05:11,930 --> 00:05:21,200
organization that wrote it so how do we

00:05:16,970 --> 00:05:23,180
solve some of these problems the first

00:05:21,200 --> 00:05:24,740
thing that I always like to say is that

00:05:23,180 --> 00:05:30,970
when you embark on a software project is

00:05:24,740 --> 00:05:33,860
to focus on value what do I mean so in

00:05:30,970 --> 00:05:36,110
company when you design software there's

00:05:33,860 --> 00:05:40,190
probably a whole bunch of considerations

00:05:36,110 --> 00:05:46,700
about what features you need to work on

00:05:40,190 --> 00:05:49,250
first and ultimately I say it's very the

00:05:46,700 --> 00:05:50,660
decisions become much easier if you

00:05:49,250 --> 00:05:53,240
start from the perspective of the

00:05:50,660 --> 00:05:55,580
customer and/or the final end-user and

00:05:53,240 --> 00:05:58,360
work your way back and that is why I

00:05:55,580 --> 00:06:03,140
absolutely love open source software

00:05:58,360 --> 00:06:06,670
because as a customer or as an end user

00:06:03,140 --> 00:06:09,140
you can participate in the process of

00:06:06,670 --> 00:06:16,700
developing the software and making it

00:06:09,140 --> 00:06:19,310
work for you another thing that I always

00:06:16,700 --> 00:06:20,120
say that people should do is see it

00:06:19,310 --> 00:06:24,950
touch it

00:06:20,120 --> 00:06:27,800
and do an MVP this is a project that I

00:06:24,950 --> 00:06:29,840
worked on earlier elect that I end or th

00:06:27,800 --> 00:06:32,210
from conception to finish the project

00:06:29,840 --> 00:06:34,160
took nine days one of the first things

00:06:32,210 --> 00:06:36,800
that we did in elect was to come up with

00:06:34,160 --> 00:06:40,370
a mock-up of the GUI we put it out there

00:06:36,800 --> 00:06:43,310
and we and we try to understand

00:06:40,370 --> 00:06:47,389
how using this product was like at the

00:06:43,310 --> 00:06:48,919
from the perspective the users recently

00:06:47,389 --> 00:06:51,050
I look I was looking at a software

00:06:48,919 --> 00:06:55,669
project where it has been three years

00:06:51,050 --> 00:06:57,260
and there and the end-user has has no

00:06:55,669 --> 00:07:00,440
idea of what the final product is going

00:06:57,260 --> 00:07:05,330
to look like this should be up from day

00:07:00,440 --> 00:07:07,520
one right so an MVP is basically an

00:07:05,330 --> 00:07:09,889
incremental process like this so you

00:07:07,520 --> 00:07:12,440
start from a basic beginning to see

00:07:09,889 --> 00:07:14,350
whether the concept works and you work

00:07:12,440 --> 00:07:18,919
your way up

00:07:14,350 --> 00:07:20,449
frequent direct feedback this is also

00:07:18,919 --> 00:07:23,690
very important there's a bunch of ways

00:07:20,449 --> 00:07:26,300
people people do it before software

00:07:23,690 --> 00:07:28,190
engineering used to be used to work in a

00:07:26,300 --> 00:07:31,539
waterfall process where the requirements

00:07:28,190 --> 00:07:34,130
came at the beginning and the

00:07:31,539 --> 00:07:37,550
verification came all the way at the end

00:07:34,130 --> 00:07:40,250
that is a recipe for a failing software

00:07:37,550 --> 00:07:42,350
project so there's a bunch of systems

00:07:40,250 --> 00:07:46,520
that that people have talked about over

00:07:42,350 --> 00:07:54,169
the time there is observe orient decide

00:07:46,520 --> 00:07:59,150
act there is I kind of my which way this

00:07:54,169 --> 00:08:01,580
went check act plan check to sorry so

00:07:59,150 --> 00:08:05,389
but anyways so there's gonna be a few

00:08:01,580 --> 00:08:07,760
feedback loops the entire idea is that

00:08:05,389 --> 00:08:10,130
each iteration is very fast it's one

00:08:07,760 --> 00:08:13,760
week it's two weeks but people need

00:08:10,130 --> 00:08:15,020
feedback about how the developers need

00:08:13,760 --> 00:08:16,729
feedback about how the software is

00:08:15,020 --> 00:08:19,760
working because at every cycle of the

00:08:16,729 --> 00:08:21,050
feedback loop new ideas come out about

00:08:19,760 --> 00:08:23,720
how the software is used and then

00:08:21,050 --> 00:08:25,940
priorities will change as you as you

00:08:23,720 --> 00:08:26,210
learn about what then tools can do for

00:08:25,940 --> 00:08:29,180
you

00:08:26,210 --> 00:08:30,860
right ultimately it should feel the

00:08:29,180 --> 00:08:34,219
feedback loop should feel a little like

00:08:30,860 --> 00:08:36,440
a bicycle where where the input comes in

00:08:34,219 --> 00:08:38,029
and that in terms develops the software

00:08:36,440 --> 00:08:39,560
and which ultimately will take you

00:08:38,029 --> 00:08:43,039
towards the the direction

00:08:39,560 --> 00:08:45,950
so a really good software project really

00:08:43,039 --> 00:08:50,870
does feel a lot like like riding a

00:08:45,950 --> 00:08:55,370
bicycle this is important write code to

00:08:50,870 --> 00:08:57,170
test code I barely ever see this done so

00:08:55,370 --> 00:08:59,510
when you have your codes written when

00:08:57,170 --> 00:09:00,100
you have your clothes code up and

00:08:59,510 --> 00:09:03,680
running

00:09:00,100 --> 00:09:04,040
you basically have no idea how it's

00:09:03,680 --> 00:09:07,010
doing

00:09:04,040 --> 00:09:09,140
there's no metrics no system to actually

00:09:07,010 --> 00:09:11,450
tell you about the health of your of

00:09:09,140 --> 00:09:13,190
your code right when you have

00:09:11,450 --> 00:09:15,860
machineries in factory there's always

00:09:13,190 --> 00:09:20,180
some sort of gauge a mechanical system

00:09:15,860 --> 00:09:23,120
that tests mechanical system but then in

00:09:20,180 --> 00:09:26,660
code it's getting more popular but then

00:09:23,120 --> 00:09:29,270
in the overall scheme of things it's

00:09:26,660 --> 00:09:32,620
still pretty rare and when you write

00:09:29,270 --> 00:09:36,470
code without any any form of

00:09:32,620 --> 00:09:38,690
instrumentation then it feels it is very

00:09:36,470 --> 00:09:40,910
much like playing Jenga you don't know

00:09:38,690 --> 00:09:43,070
which change in the code is going to

00:09:40,910 --> 00:09:44,680
bring your entire system crashing down

00:09:43,070 --> 00:09:47,510
right

00:09:44,680 --> 00:09:50,810
embrace change the reason I say this is

00:09:47,510 --> 00:09:53,230
because it's whenever a code is written

00:09:50,810 --> 00:09:56,600
whenever you have a software product

00:09:53,230 --> 00:09:58,820
it's like the discovery of of something

00:09:56,600 --> 00:10:00,620
like iron you discover iron you discover

00:09:58,820 --> 00:10:02,720
how to smelt it then all of a sudden you

00:10:00,620 --> 00:10:06,650
have a hammer you can use that hammer to

00:10:02,720 --> 00:10:09,110
then develop other things and so after

00:10:06,650 --> 00:10:11,000
so you may embark on a software projects

00:10:09,110 --> 00:10:13,459
and then suddenly you just realize that

00:10:11,000 --> 00:10:16,970
you have the equivalent of a hammer that

00:10:13,459 --> 00:10:20,650
you can use which you can then apply to

00:10:16,970 --> 00:10:24,620
many other parts of your organization so

00:10:20,650 --> 00:10:27,890
priorities are always changing when

00:10:24,620 --> 00:10:30,800
people see what good software can do for

00:10:27,890 --> 00:10:33,079
their teams and their organization so

00:10:30,800 --> 00:10:38,320
which is why I always say be ready to

00:10:33,079 --> 00:10:42,350
change as after you start seeing the MVP

00:10:38,320 --> 00:10:49,339
design for operations who here does

00:10:42,350 --> 00:10:51,410
operations sk i know you do yeh so the

00:10:49,339 --> 00:10:53,620
poor operations people are in charge of

00:10:51,410 --> 00:10:57,500
keeping everything up and running and

00:10:53,620 --> 00:10:59,910
often this the software developers and

00:10:57,500 --> 00:11:02,730
the operation people

00:10:59,910 --> 00:11:05,130
I have not talked to each other the RMIT

00:11:02,730 --> 00:11:06,690
system for example earlier the software

00:11:05,130 --> 00:11:09,600
was written everything is fine they

00:11:06,690 --> 00:11:11,070
deployed it which means that the

00:11:09,600 --> 00:11:13,800
operations people took it and start

00:11:11,070 --> 00:11:16,620
running it then they realized that the

00:11:13,800 --> 00:11:19,290
entire system could only support seven

00:11:16,620 --> 00:11:21,000
simultaneous users in a university with

00:11:19,290 --> 00:11:27,030
several thousands they've deployed it

00:11:21,000 --> 00:11:29,250
everything came crashing down and they

00:11:27,030 --> 00:11:31,290
could never recover it for it so if

00:11:29,250 --> 00:11:32,750
you're actually designed from with

00:11:31,290 --> 00:11:36,300
operations in mind from the beginning

00:11:32,750 --> 00:11:38,760
you can avoid that kind of failure also

00:11:36,300 --> 00:11:40,970
I think that the night capital example

00:11:38,760 --> 00:11:47,160
is also an example of failure in

00:11:40,970 --> 00:11:50,250
operations as well and lastly I what I

00:11:47,160 --> 00:11:53,370
always say is as much as possible open

00:11:50,250 --> 00:11:55,710
all the sources right the reason for

00:11:53,370 --> 00:11:58,260
this is because when you build software

00:11:55,710 --> 00:12:00,180
and you make it open source two things

00:11:58,260 --> 00:12:02,250
happens first of all you think about

00:12:00,180 --> 00:12:03,530
abstractions you think about the things

00:12:02,250 --> 00:12:06,300
that are important for your organization

00:12:03,530 --> 00:12:09,150
and you think about the things that are

00:12:06,300 --> 00:12:11,670
just important in general so what you

00:12:09,150 --> 00:12:13,860
get are these generic pieces of software

00:12:11,670 --> 00:12:15,900
which you can then release and you can

00:12:13,860 --> 00:12:18,240
attract other people to come in and help

00:12:15,900 --> 00:12:21,390
you develop your software help you check

00:12:18,240 --> 00:12:23,220
it for for bugs and perhaps give you

00:12:21,390 --> 00:12:25,350
valuable feedback about how your

00:12:23,220 --> 00:12:28,830
third-party contractor contractors

00:12:25,350 --> 00:12:31,170
writing the software are are doing it

00:12:28,830 --> 00:12:34,410
makes a it makes it secure yes it's

00:12:31,170 --> 00:12:36,390
harder but I think that the payoffs for

00:12:34,410 --> 00:12:39,660
what you get when you open your source

00:12:36,390 --> 00:12:42,960
code is huge and which is why I

00:12:39,660 --> 00:12:46,530
absolutely love force Asia right because

00:12:42,960 --> 00:12:48,420
it's just this environment of a of

00:12:46,530 --> 00:12:50,610
people who are get together getting

00:12:48,420 --> 00:12:52,380
together to write software who are

00:12:50,610 --> 00:12:54,060
contributing so far to the public we're

00:12:52,380 --> 00:12:56,640
talking about software and who are

00:12:54,060 --> 00:13:00,690
really pushing the boundaries of what

00:12:56,640 --> 00:13:04,200
software can do and what is all about so

00:13:00,690 --> 00:13:08,190
lastly so it is not all doom and gloom

00:13:04,200 --> 00:13:10,200
right you see in this room there are

00:13:08,190 --> 00:13:12,720
probably a hundred pieces of software

00:13:10,200 --> 00:13:13,290
running from your watches from the to

00:13:12,720 --> 00:13:14,670
the laptop

00:13:13,290 --> 00:13:18,360
to the projector screen to the

00:13:14,670 --> 00:13:20,850
audio-video room so gradually Mark

00:13:18,360 --> 00:13:23,730
Anderson says software is eating the

00:13:20,850 --> 00:13:26,730
world and we have had many many examples

00:13:23,730 --> 00:13:29,550
of successes in in software projects as

00:13:26,730 --> 00:13:32,130
you can see before you so let's learn

00:13:29,550 --> 00:13:34,259
from it and let's create some great

00:13:32,130 --> 00:13:37,220
software let's release it so everyone

00:13:34,259 --> 00:13:39,690
can can benefit for and learn from it so

00:13:37,220 --> 00:13:44,430
with that I conclude my talk thank you

00:13:39,690 --> 00:13:46,850
very much thank you Charlie thank you

00:13:44,430 --> 00:13:46,850

YouTube URL: https://www.youtube.com/watch?v=0ClHFccM7Kw


