Title: Modularity & Dependency Injection at Scale on Android - Saud Khan
Publication date: 2020-03-27
Playlist: FOSSASIA Summit 2020 - Kernel & Platform
Description: 
	How do we break down a large JVM monolith without incurring runtime costs? How do we scale dependency injection in such an application running in a constrained environment like mobile? Does it play well with a modularized Android app? How do you visualize and navigate the graph as complexity grows?

In this session we will describe the mechanisms that we use at Twitter to facilitate modularization and decoupling utilizing dependency injection. We will also cover why Dagger is our tool of choice along with the shortcomings we encountered, and share some practical advice on how to address them. Finally, weâ€™ll offer a sneak peek of the extensions that we built on top of Dagger to facilitate dependency injection that we plan to open source in 2020.

FOSSASIA Summit 2020 - Kernel & Platform

Speaker: Saud Khan, Software Engineer Twitter
Captions: 
	00:00:02,149 --> 00:00:07,440
there you go okay

00:00:05,700 --> 00:00:10,620
today I'm talking about modularity and

00:00:07,440 --> 00:00:12,559
dependency injection at scale so this is

00:00:10,620 --> 00:00:16,230
mostly based on the Twitter Android app

00:00:12,559 --> 00:00:18,240
like I I'll try to elaborate anything

00:00:16,230 --> 00:00:20,550
that goes into detail about Android but

00:00:18,240 --> 00:00:21,630
mostly it's about dependency injection

00:00:20,550 --> 00:00:25,769
and the things that we've dealt with

00:00:21,630 --> 00:00:27,330
over the years so to start off this is a

00:00:25,769 --> 00:00:28,800
mean this is like nacho and scissor

00:00:27,330 --> 00:00:30,240
who's been working on it for the last

00:00:28,800 --> 00:00:33,870
few years

00:00:30,240 --> 00:00:36,630
I'm Saud I'm a software engineer at

00:00:33,870 --> 00:00:38,910
Twitter working on Android mostly

00:00:36,630 --> 00:00:41,280
focused on performance right now so I

00:00:38,910 --> 00:00:44,910
work closely with Sarah nacho for any

00:00:41,280 --> 00:00:47,340
architectural changes ok so to start off

00:00:44,910 --> 00:00:49,620
let's dive in a little bit and like see

00:00:47,340 --> 00:00:52,230
like what we were doing over the last

00:00:49,620 --> 00:00:55,739
few years so Twitter is a really old app

00:00:52,230 --> 00:00:57,570
so because there isn't that many

00:00:55,739 --> 00:00:59,730
audience and so of guessing let me just

00:00:57,570 --> 00:01:01,170
show you this is our first commit so as

00:00:59,730 --> 00:01:03,930
you can see we've been at it for about a

00:01:01,170 --> 00:01:06,840
decade this is just the Android app and

00:01:03,930 --> 00:01:09,180
we've started before this happy first

00:01:06,840 --> 00:01:11,430
initial commit obviously so during that

00:01:09,180 --> 00:01:14,189
time a lot of the things were different

00:01:11,430 --> 00:01:15,990
I believe Android Froyo was out

00:01:14,189 --> 00:01:19,470
everybody was using Eclipse for Android

00:01:15,990 --> 00:01:22,140
it was an hand build platform usually

00:01:19,470 --> 00:01:23,640
everybody had one module so did we it

00:01:22,140 --> 00:01:27,180
was a simpler app it wasn't that many

00:01:23,640 --> 00:01:29,220
features but as we went forward we

00:01:27,180 --> 00:01:31,860
extended we you know switched to great

00:01:29,220 --> 00:01:34,829
oh we started dividing up the UI and the

00:01:31,860 --> 00:01:36,900
business logic and the more we work on

00:01:34,829 --> 00:01:38,490
it the more we realized that it provided

00:01:36,900 --> 00:01:42,180
more benefits so we started splitting it

00:01:38,490 --> 00:01:44,790
up even further so we split up the UI

00:01:42,180 --> 00:01:46,500
from the features it's all frankly so we

00:01:44,790 --> 00:01:48,780
went feature wise then we even started

00:01:46,500 --> 00:01:50,430
splitting up what we had under the

00:01:48,780 --> 00:01:52,200
covers for the business logic to be more

00:01:50,430 --> 00:01:55,170
generic versus anything that was Twitter

00:01:52,200 --> 00:01:56,520
related we went even further and that

00:01:55,170 --> 00:01:59,070
started splitting up each one of the

00:01:56,520 --> 00:02:00,810
features he says we as new teams

00:01:59,070 --> 00:02:02,130
on-boarded we were getting more and more

00:02:00,810 --> 00:02:03,899
engineers working on different features

00:02:02,130 --> 00:02:06,020
they wanted to maintain their own module

00:02:03,899 --> 00:02:08,700
they didn't want to go forward right

00:02:06,020 --> 00:02:10,259
then we realized the benefits of that

00:02:08,700 --> 00:02:13,319
and we started splitting up all the

00:02:10,259 --> 00:02:13,900
lower-level business logic I'm going by

00:02:13,319 --> 00:02:16,349
this fan

00:02:13,900 --> 00:02:20,650
just to because it's a brief history but

00:02:16,349 --> 00:02:22,780
stop me if you guys have questions we

00:02:20,650 --> 00:02:24,549
split up even further we decided to

00:02:22,780 --> 00:02:26,470
split up our business logic that Twitter

00:02:24,549 --> 00:02:29,250
related into like sub systems that make

00:02:26,470 --> 00:02:31,599
sense and like the infrastructure and

00:02:29,250 --> 00:02:33,400
essentially we ended up with an app that

00:02:31,599 --> 00:02:35,439
was a lot of different modules that

00:02:33,400 --> 00:02:37,329
support each other to build the inter

00:02:35,439 --> 00:02:39,700
app at the very top we had the big

00:02:37,329 --> 00:02:41,140
module which was the app itself and then

00:02:39,700 --> 00:02:44,500
the features then the infrastructure

00:02:41,140 --> 00:02:46,870
subsystems and finally the core logic as

00:02:44,500 --> 00:02:49,329
although this was happening we acquired

00:02:46,870 --> 00:02:50,980
periscope and as we welcomed the

00:02:49,329 --> 00:02:53,139
periscope team we wanted to give them

00:02:50,980 --> 00:02:56,109
what we have learned over the years and

00:02:53,139 --> 00:02:58,090
we wanted to build helped them build

00:02:56,109 --> 00:03:00,700
their Android app with the same features

00:02:58,090 --> 00:03:02,680
that we had so let's see what happens so

00:03:00,700 --> 00:03:04,239
we started off with an Android app which

00:03:02,680 --> 00:03:06,700
was this very modular as app at this

00:03:04,239 --> 00:03:09,129
point of time and we found that it's

00:03:06,700 --> 00:03:10,599
actually rather easy at this point right

00:03:09,129 --> 00:03:13,540
because we could share some of the core

00:03:10,599 --> 00:03:16,840
logic that wasn't Twitter related and we

00:03:13,540 --> 00:03:19,650
can build periscope on top of that we

00:03:16,840 --> 00:03:22,030
actually took it a slightly further and

00:03:19,650 --> 00:03:23,680
our team started building basically

00:03:22,030 --> 00:03:24,879
their sandbox so they can only work on

00:03:23,680 --> 00:03:26,859
the feature that they want and they

00:03:24,879 --> 00:03:29,109
don't have to build the entire app so

00:03:26,859 --> 00:03:30,970
this drastically helped them with build

00:03:29,109 --> 00:03:32,349
times right like because you don't have

00:03:30,970 --> 00:03:34,870
to build every different feature of the

00:03:32,349 --> 00:03:36,519
app and all that and it actually lets

00:03:34,870 --> 00:03:41,109
you iterate very quickly and like test

00:03:36,519 --> 00:03:43,299
internally so I know a lot but

00:03:41,109 --> 00:03:44,470
essentially the core information right

00:03:43,299 --> 00:03:46,659
here is that we split it up into

00:03:44,470 --> 00:03:48,400
multiple modules that can be

00:03:46,659 --> 00:03:51,069
individually tested and all of that and

00:03:48,400 --> 00:03:53,500
we essentially built all of this on top

00:03:51,069 --> 00:03:55,780
of dependency injection right so the

00:03:53,500 --> 00:03:58,000
dependency injection that we used for

00:03:55,780 --> 00:04:01,359
this which was dagger dagger is a very

00:03:58,000 --> 00:04:03,430
common one but before we go down that

00:04:01,359 --> 00:04:04,989
path let's just quickly go over why

00:04:03,430 --> 00:04:07,180
dependency injection really helped us on

00:04:04,989 --> 00:04:09,340
this right so it's important it helped

00:04:07,180 --> 00:04:10,870
us we usability a lot as you saw like

00:04:09,340 --> 00:04:12,129
that we can use between periscope and

00:04:10,870 --> 00:04:14,769
and Twitter

00:04:12,129 --> 00:04:16,449
it helped us with testability it helped

00:04:14,769 --> 00:04:18,789
us with like correctness because we

00:04:16,449 --> 00:04:20,979
don't have to share like copy code and

00:04:18,789 --> 00:04:23,469
like could they stick to it and they

00:04:20,979 --> 00:04:25,150
also helped us a lot with refactoring we

00:04:23,469 --> 00:04:25,659
did a lot of refactoring over the years

00:04:25,150 --> 00:04:27,550
right

00:04:25,659 --> 00:04:29,259
so it's

00:04:27,550 --> 00:04:30,970
important to have different is injection

00:04:29,259 --> 00:04:32,830
for us like and it's actually important

00:04:30,970 --> 00:04:35,710
for anybody no matter the size of the

00:04:32,830 --> 00:04:37,539
project that you're working on for us

00:04:35,710 --> 00:04:39,789
like I mentioned before we use dagger

00:04:37,539 --> 00:04:41,500
and like it's one of the common ones

00:04:39,789 --> 00:04:44,080
that's used in android world for any

00:04:41,500 --> 00:04:45,490
mid-sized to large size apps we started

00:04:44,080 --> 00:04:49,690
using it and we learned a few things

00:04:45,490 --> 00:04:51,099
along the way right and that's kind of

00:04:49,690 --> 00:04:52,810
what I want to share today is like what

00:04:51,099 --> 00:04:55,569
we learned um how do we handle some of

00:04:52,810 --> 00:04:57,550
these things so in general it helped us

00:04:55,569 --> 00:04:59,620
a lot with static checks right anything

00:04:57,550 --> 00:05:02,740
that airs at compile time is way better

00:04:59,620 --> 00:05:04,719
than seeing it at user level so we want

00:05:02,740 --> 00:05:06,879
to see something like this more often

00:05:04,719 --> 00:05:08,860
than like a user complaining to us and

00:05:06,879 --> 00:05:11,979
even though this is annoying it's much

00:05:08,860 --> 00:05:13,659
better it helps us with code generation

00:05:11,979 --> 00:05:15,069
it takes care of a lot of the boring

00:05:13,659 --> 00:05:19,150
code that we're doing right like here's

00:05:15,069 --> 00:05:21,669
a walkthrough so we can have something

00:05:19,150 --> 00:05:23,080
like this so ignore the code it really

00:05:21,669 --> 00:05:24,759
doesn't matter but these are modules

00:05:23,080 --> 00:05:26,139
that depend on each other so each one of

00:05:24,759 --> 00:05:27,340
them have their own constructor and as

00:05:26,139 --> 00:05:28,800
the constructor changes we have to

00:05:27,340 --> 00:05:30,879
update every page that's being used

00:05:28,800 --> 00:05:32,259
instead if we could use dependency

00:05:30,879 --> 00:05:34,599
injection we could have something like

00:05:32,259 --> 00:05:36,099
this which essentially just adds this

00:05:34,599 --> 00:05:37,810
annotation that says hey this is the

00:05:36,099 --> 00:05:39,219
constructor that needs to get injected

00:05:37,810 --> 00:05:40,300
and then we if we change it we don't

00:05:39,219 --> 00:05:42,400
have to worry about it

00:05:40,300 --> 00:05:45,039
the generated code kind of takes care of

00:05:42,400 --> 00:05:49,270
it right it also gives us a graph

00:05:45,039 --> 00:05:50,949
architecture right so and this graph

00:05:49,270 --> 00:05:54,330
architecture allowed us to really scope

00:05:50,949 --> 00:05:56,680
out and like figure out like how can we

00:05:54,330 --> 00:05:57,909
split up the object graphs themselves

00:05:56,680 --> 00:06:00,219
right between the features between all

00:05:57,909 --> 00:06:01,719
of that one thing that I want to note is

00:06:00,219 --> 00:06:03,310
that every time I talk about object

00:06:01,719 --> 00:06:05,560
graph if anybody's familiar with dagger

00:06:03,310 --> 00:06:08,949
we're basically talking about components

00:06:05,560 --> 00:06:10,990
and subcomponents there's there's

00:06:08,949 --> 00:06:12,699
differences between them and I wouldn't

00:06:10,990 --> 00:06:17,229
go into the details of it but in general

00:06:12,699 --> 00:06:19,210
they act similarly so let's see what we

00:06:17,229 --> 00:06:21,819
had like so I talked a little bit about

00:06:19,210 --> 00:06:23,770
object graph that we built so in terms

00:06:21,819 --> 00:06:25,360
of the Android app so we wanted to start

00:06:23,770 --> 00:06:27,639
at the very top level and like scope out

00:06:25,360 --> 00:06:29,620
the different graphs that we have so the

00:06:27,639 --> 00:06:31,120
first one that comes that's the most

00:06:29,620 --> 00:06:33,639
obvious case is that whole application

00:06:31,120 --> 00:06:36,339
scope so this is basically Singleton's

00:06:33,639 --> 00:06:38,050
that we have in their app that spans

00:06:36,339 --> 00:06:38,650
across the whole lifetime of what happen

00:06:38,050 --> 00:06:41,620
as long as

00:06:38,650 --> 00:06:45,430
life following that we have user scope

00:06:41,620 --> 00:06:47,650
so these are essentially you can think

00:06:45,430 --> 00:06:49,449
of like like user level databases and

00:06:47,650 --> 00:06:52,060
like user level logging like stuff like

00:06:49,449 --> 00:06:53,919
that so these are scoped by the user as

00:06:52,060 --> 00:06:55,930
a user logs in and logs out and or

00:06:53,919 --> 00:06:59,110
switches accounts like we want to go to

00:06:55,930 --> 00:07:01,360
the correct one from that from there we

00:06:59,110 --> 00:07:04,150
move forward to like these things that

00:07:01,360 --> 00:07:05,500
we call retain scopes so in Android what

00:07:04,150 --> 00:07:07,630
happens is that every screen that you

00:07:05,500 --> 00:07:10,930
see is essentially an activity and this

00:07:07,630 --> 00:07:13,330
activity can be destroyed and recreated

00:07:10,930 --> 00:07:14,800
as configuration of your phone changes

00:07:13,330 --> 00:07:18,100
and this could be simple thing as like

00:07:14,800 --> 00:07:19,660
rotating your screen right so we wanted

00:07:18,100 --> 00:07:20,860
to have some things that as you're

00:07:19,660 --> 00:07:23,020
seeing the screen there are things that

00:07:20,860 --> 00:07:26,110
we need to maintain so we put that in

00:07:23,020 --> 00:07:27,880
the retain scope and then the activities

00:07:26,110 --> 00:07:30,220
themselves we actually type them to the

00:07:27,880 --> 00:07:33,160
view scope so this allowed us to have

00:07:30,220 --> 00:07:35,199
some some things that can outlive the

00:07:33,160 --> 00:07:38,860
activities themselves but as long as the

00:07:35,199 --> 00:07:41,110
screen zone on view they were provided

00:07:38,860 --> 00:07:44,500
and like shared under the retain scope

00:07:41,110 --> 00:07:45,729
so this basically Maps you these four

00:07:44,500 --> 00:07:47,800
different scopes that we have throughout

00:07:45,729 --> 00:07:50,340
our app so we have application we have

00:07:47,800 --> 00:07:52,900
user we have retained and we have view

00:07:50,340 --> 00:07:58,479
let's dive into it a little bit more

00:07:52,900 --> 00:08:01,330
right so if we see without going full

00:07:58,479 --> 00:08:03,039
detail obviously the application scope

00:08:01,330 --> 00:08:06,130
and dagger we would define something

00:08:03,039 --> 00:08:07,690
like this right so we this is in complan

00:08:06,130 --> 00:08:09,159
like we defined that at this inter

00:08:07,690 --> 00:08:12,880
interface for our object graph we say

00:08:09,159 --> 00:08:14,530
this is application scope and the module

00:08:12,880 --> 00:08:16,539
that it relates to that will provide the

00:08:14,530 --> 00:08:19,060
bindings and then from there we

00:08:16,539 --> 00:08:21,520
basically say that these are the user

00:08:19,060 --> 00:08:23,800
level objects that we want to build

00:08:21,520 --> 00:08:25,389
right the user graph and that user graph

00:08:23,800 --> 00:08:28,270
we do the same thing we said this is a

00:08:25,389 --> 00:08:28,870
user scope and from there we say hey

00:08:28,270 --> 00:08:31,000
okay

00:08:28,870 --> 00:08:32,890
like from here we can build anything

00:08:31,000 --> 00:08:35,860
that's retain scope related right

00:08:32,890 --> 00:08:38,680
so from here like this will be feature

00:08:35,860 --> 00:08:41,529
level things that we're calling and then

00:08:38,680 --> 00:08:47,320
same thing in the reading scope as we

00:08:41,529 --> 00:08:49,480
build it out we have we build out the

00:08:47,320 --> 00:08:51,250
view the view graph underneath the

00:08:49,480 --> 00:08:51,760
covers and then like the view graph is

00:08:51,250 --> 00:08:53,080
the final

00:08:51,760 --> 00:08:54,820
one that we have for our four different

00:08:53,080 --> 00:08:56,770
scopes so these are the four scopes that

00:08:54,820 --> 00:08:58,600
we had right like the application retain

00:08:56,770 --> 00:09:00,310
and view scope one thing that you'll

00:08:58,600 --> 00:09:03,910
notice that we ended up going with

00:09:00,310 --> 00:09:06,100
component for the top code for the the

00:09:03,910 --> 00:09:08,770
top-level scope and then sub components

00:09:06,100 --> 00:09:09,790
for the hundred level scope I mentioned

00:09:08,770 --> 00:09:11,650
previously there are subtle differences

00:09:09,790 --> 00:09:13,630
and like one of the reasons for going

00:09:11,650 --> 00:09:14,710
down this path was essentially the

00:09:13,630 --> 00:09:17,470
subgraphs

00:09:14,710 --> 00:09:19,780
need needs access to the the top-level

00:09:17,470 --> 00:09:21,370
graphs right leg because it's everything

00:09:19,780 --> 00:09:22,870
that the application holds even though

00:09:21,370 --> 00:09:24,730
you're looking at the activity or the

00:09:22,870 --> 00:09:26,620
view you might need something that's an

00:09:24,730 --> 00:09:29,380
application level so we decided to go

00:09:26,620 --> 00:09:31,390
with sub components these are things

00:09:29,380 --> 00:09:34,240
that a lot of the large companies deal

00:09:31,390 --> 00:09:38,080
with and they'll build their own set of

00:09:34,240 --> 00:09:41,020
like tooling around it to deal with we

00:09:38,080 --> 00:09:44,080
just decided to use it this way all

00:09:41,020 --> 00:09:46,960
right so I've dumped a lot of

00:09:44,080 --> 00:09:50,680
information about how we're scoping

00:09:46,960 --> 00:09:52,390
things and all of that this wasn't the

00:09:50,680 --> 00:09:54,190
main part of it the reason I went

00:09:52,390 --> 00:09:55,720
through it very quickly is because these

00:09:54,190 --> 00:09:57,810
are things that you have to deal with as

00:09:55,720 --> 00:10:00,670
you introduce dagger into your system

00:09:57,810 --> 00:10:01,840
you have to decide all of these now

00:10:00,670 --> 00:10:04,150
there are certain things that we ran

00:10:01,840 --> 00:10:06,730
into and like over time like we decided

00:10:04,150 --> 00:10:09,940
like we had to like adjust and find

00:10:06,730 --> 00:10:11,650
things to fix or not necessarily fixed

00:10:09,940 --> 00:10:15,310
to basically work around and like get a

00:10:11,650 --> 00:10:17,740
better at it so I'll start off with a

00:10:15,310 --> 00:10:19,390
really easy one right so we have a lot

00:10:17,740 --> 00:10:20,830
of engineers who works on our code base

00:10:19,390 --> 00:10:23,590
and one of the common problems that we

00:10:20,830 --> 00:10:25,890
have is how dagger like how you

00:10:23,590 --> 00:10:28,060
instantiate the dagger graph so

00:10:25,890 --> 00:10:31,150
typically it looks something like this

00:10:28,060 --> 00:10:32,320
so in this particular case you'll in

00:10:31,150 --> 00:10:34,630
your application level you're gonna

00:10:32,320 --> 00:10:37,390
create the main graph right and this

00:10:34,630 --> 00:10:40,540
particular command is actually the

00:10:37,390 --> 00:10:42,460
generated code so anybody who's building

00:10:40,540 --> 00:10:45,130
the application for the very first time

00:10:42,460 --> 00:10:47,560
runs into this problem where it doesn't

00:10:45,130 --> 00:10:49,210
know what this class is because you have

00:10:47,560 --> 00:10:54,370
to first generate the classes and then

00:10:49,210 --> 00:10:56,830
the you can you can reference it in like

00:10:54,370 --> 00:10:58,840
your application so we built a very

00:10:56,830 --> 00:11:00,640
small helper function and we change to

00:10:58,840 --> 00:11:02,860
do something like this right so in this

00:11:00,640 --> 00:11:04,339
case all we're doing we're just with the

00:11:02,860 --> 00:11:05,839
helper function that we have for dag

00:11:04,339 --> 00:11:07,220
we're just saying hey this is the

00:11:05,839 --> 00:11:09,079
application grab that we're generating

00:11:07,220 --> 00:11:11,540
let's look into it let's see what it

00:11:09,079 --> 00:11:13,730
looks like so essentially the helper

00:11:11,540 --> 00:11:16,610
function has the ability to build this

00:11:13,730 --> 00:11:18,920
graph right and you may be thinking

00:11:16,610 --> 00:11:20,540
about hey like if you do it this way

00:11:18,920 --> 00:11:23,720
it's still fine you're still gonna end

00:11:20,540 --> 00:11:26,300
up using it so we we use a little bit of

00:11:23,720 --> 00:11:28,819
reflection I know it's a little costly

00:11:26,300 --> 00:11:30,680
but we're doing it only once right so we

00:11:28,819 --> 00:11:32,540
decided to just like use the reflection

00:11:30,680 --> 00:11:34,149
only in this one method and then the

00:11:32,540 --> 00:11:36,379
whole graphs are presented to us right

00:11:34,149 --> 00:11:38,209
don't worry about it this is mostly just

00:11:36,379 --> 00:11:40,999
checks around reflection and making sure

00:11:38,209 --> 00:11:43,490
we're doing things right the TLDR is

00:11:40,999 --> 00:11:45,290
essentially like we use a little bit of

00:11:43,490 --> 00:11:46,879
reflection then we get the graph and

00:11:45,290 --> 00:11:49,490
once the graphs there we have access to

00:11:46,879 --> 00:11:51,920
all the objects in the graph just to

00:11:49,490 --> 00:11:55,449
note like we will post this so don't

00:11:51,920 --> 00:11:58,759
worry about pictures it's coming and

00:11:55,449 --> 00:12:00,319
shameless plug fellas on github we have

00:11:58,759 --> 00:12:02,300
a lot of our open source projects right

00:12:00,319 --> 00:12:04,670
there anyway

00:12:02,300 --> 00:12:06,110
so we basically decided that you know

00:12:04,670 --> 00:12:07,879
instead of using this generated a

00:12:06,110 --> 00:12:09,679
reference right like that we have to

00:12:07,879 --> 00:12:12,379
generate first before we can go forward

00:12:09,679 --> 00:12:13,730
as new people are onboarding to not have

00:12:12,379 --> 00:12:15,800
them deal with it we just you know

00:12:13,730 --> 00:12:17,779
created this little helper so this was a

00:12:15,800 --> 00:12:22,220
very easy one I'm like you really didn't

00:12:17,779 --> 00:12:24,889
make much of a difference right what

00:12:22,220 --> 00:12:27,709
else so this is this was a big problem

00:12:24,889 --> 00:12:28,910
for us so we have we've decided on all

00:12:27,709 --> 00:12:31,339
these graphs and we want to really

00:12:28,910 --> 00:12:33,679
figure out where should we place them so

00:12:31,339 --> 00:12:36,529
we started off with like this not we're

00:12:33,679 --> 00:12:37,759
like okay we have this modular app and

00:12:36,529 --> 00:12:39,499
we have these scopes that we have

00:12:37,759 --> 00:12:41,870
defined and what makes sense and we said

00:12:39,499 --> 00:12:43,910
okay well you know it makes sense for

00:12:41,870 --> 00:12:45,439
the user and application scopes to be at

00:12:43,910 --> 00:12:47,839
the very low level possible because

00:12:45,439 --> 00:12:49,569
these are not really tied to anything

00:12:47,839 --> 00:12:52,459
and everybody should have access to it

00:12:49,569 --> 00:12:54,439
because you from the top you have access

00:12:52,459 --> 00:12:56,720
to any module that's below you right

00:12:54,439 --> 00:12:59,569
like you don't have the other way around

00:12:56,720 --> 00:13:01,399
and similarly for because the retain

00:12:59,569 --> 00:13:03,889
graphs and the the reading scope and the

00:13:01,399 --> 00:13:05,509
view scope is related to the activities

00:13:03,889 --> 00:13:08,660
it made more sense to be in the future

00:13:05,509 --> 00:13:13,160
modules let's see how it works does it

00:13:08,660 --> 00:13:15,049
all up right so let's take an example of

00:13:13,160 --> 00:13:18,180
tweeting right we're going to tweet out

00:13:15,049 --> 00:13:19,770
this with an image and you know

00:13:18,180 --> 00:13:22,680
and life let's walk through what all is

00:13:19,770 --> 00:13:24,690
involved so essentially to start off our

00:13:22,680 --> 00:13:27,120
feature is the composer the composer is

00:13:24,690 --> 00:13:29,070
the one that's gonna take and let you

00:13:27,120 --> 00:13:32,580
compose the street so that you can post

00:13:29,070 --> 00:13:34,320
it so in a very basic sense without

00:13:32,580 --> 00:13:36,570
diving into a lot of crazy things that's

00:13:34,320 --> 00:13:39,360
going on we can say that hey at the very

00:13:36,570 --> 00:13:42,149
least it has an activity which is the

00:13:39,360 --> 00:13:45,209
screen it has a view model which defines

00:13:42,149 --> 00:13:47,459
the logic on the UI logic that we have

00:13:45,209 --> 00:13:51,480
over there and the delegate is something

00:13:47,459 --> 00:13:53,040
that we we do which basically links to

00:13:51,480 --> 00:13:54,420
the activity so instead of using the

00:13:53,040 --> 00:13:56,550
activity directly we use this view

00:13:54,420 --> 00:13:58,350
delegate so that we can unit test that

00:13:56,550 --> 00:14:01,320
without requiring any of the Android

00:13:58,350 --> 00:14:03,120
specifics so it makes sense that hey

00:14:01,320 --> 00:14:06,060
these are the feature level components

00:14:03,120 --> 00:14:08,070
so it goes to a future module what next

00:14:06,060 --> 00:14:09,420
so then we would need the tweet

00:14:08,070 --> 00:14:11,130
repository because we're basically

00:14:09,420 --> 00:14:13,649
generating a tweet and we want to put it

00:14:11,130 --> 00:14:15,240
in the repository it makes sense that

00:14:13,649 --> 00:14:16,649
the tweet repository is a user scope

00:14:15,240 --> 00:14:18,360
write it like so as long as the users

00:14:16,649 --> 00:14:20,459
logged in in any of the activities

00:14:18,360 --> 00:14:22,260
you'll get access to it so that this is

00:14:20,459 --> 00:14:24,839
a subsystem that gets added here and we

00:14:22,260 --> 00:14:26,910
run into our first problem which is we

00:14:24,839 --> 00:14:29,220
wanted the user scope to be at the

00:14:26,910 --> 00:14:33,450
bottom so that everybody have access to

00:14:29,220 --> 00:14:37,200
it but the thing is if you define it

00:14:33,450 --> 00:14:39,690
that far down you can't define the

00:14:37,200 --> 00:14:42,180
objects at the top right like so all

00:14:39,690 --> 00:14:43,830
right let's move on let's see what else

00:14:42,180 --> 00:14:45,300
we run into right so the user scope

00:14:43,830 --> 00:14:48,959
needs to be at least in the sub

00:14:45,300 --> 00:14:50,790
subsystems level next we have the image

00:14:48,959 --> 00:14:52,140
right like so we we're adding an image

00:14:50,790 --> 00:14:54,029
to the street so there's an image

00:14:52,140 --> 00:14:55,830
uploader now this is just a Twitter

00:14:54,029 --> 00:14:57,330
infrastructure thing right like so it's

00:14:55,830 --> 00:14:59,040
not really tied to the user this is like

00:14:57,330 --> 00:15:00,779
something that gets kicked off so it's

00:14:59,040 --> 00:15:03,209
an application scope thing that runs as

00:15:00,779 --> 00:15:07,920
the image is being uploaded so now it's

00:15:03,209 --> 00:15:11,070
not really a generic subsystem so once

00:15:07,920 --> 00:15:12,870
again we're in this case where we wanted

00:15:11,070 --> 00:15:14,339
it to be at the very bottom but the

00:15:12,870 --> 00:15:16,500
application scope kind of needs to be a

00:15:14,339 --> 00:15:18,570
little bit up so one thing that we're

00:15:16,500 --> 00:15:20,850
noticing is that my application scope

00:15:18,570 --> 00:15:22,050
needs like to be at the very top right

00:15:20,850 --> 00:15:23,850
even though like this is something

00:15:22,050 --> 00:15:26,700
generic that we can have with okay HTTP

00:15:23,850 --> 00:15:29,910
which goes at the bottom but the Twitter

00:15:26,700 --> 00:15:32,160
media image uploader module that we had

00:15:29,910 --> 00:15:36,710
is like one level up

00:15:32,160 --> 00:15:39,810
so let's go to even more crazy right

00:15:36,710 --> 00:15:41,580
so if you tweet out a mandroid you'll

00:15:39,810 --> 00:15:43,650
notice that while the tweets being

00:15:41,580 --> 00:15:46,170
posted there's like a notification that

00:15:43,650 --> 00:15:49,410
shows up right so this notification

00:15:46,170 --> 00:15:50,730
handler is essentially tied to the

00:15:49,410 --> 00:15:52,530
application like it's it's not really

00:15:50,730 --> 00:15:54,480
related to the activity it's not really

00:15:52,530 --> 00:15:58,610
happening on the activity it's is just

00:15:54,480 --> 00:16:00,870
on the app and it's contained there so

00:15:58,610 --> 00:16:02,790
we want but we want to put it with the

00:16:00,870 --> 00:16:06,720
features because it's related to the

00:16:02,790 --> 00:16:08,280
composer so if we add it there what we

00:16:06,720 --> 00:16:10,410
also ended up doing at that point is

00:16:08,280 --> 00:16:11,960
like we just move the application scope

00:16:10,410 --> 00:16:14,610
and the user scope at the very top

00:16:11,960 --> 00:16:16,350
because it seems like there's like at

00:16:14,610 --> 00:16:18,830
any different level like we can have

00:16:16,350 --> 00:16:20,640
these scopes even though we were really

00:16:18,830 --> 00:16:24,960
originally wanting to do it at the

00:16:20,640 --> 00:16:27,180
bottom okay so you know so one thing

00:16:24,960 --> 00:16:29,670
over here like you know like all the the

00:16:27,180 --> 00:16:31,170
pentagon's right here that i have are

00:16:29,670 --> 00:16:33,660
just the different bindings that we were

00:16:31,170 --> 00:16:35,700
we're having and then like the circles

00:16:33,660 --> 00:16:37,080
are like the scopes that i've defined so

00:16:35,700 --> 00:16:38,880
you know these are the modules that we

00:16:37,080 --> 00:16:40,770
we talked about so we'll add them right

00:16:38,880 --> 00:16:42,780
there right like so so these that make

00:16:40,770 --> 00:16:45,120
sense like whatever modules we created

00:16:42,780 --> 00:16:46,890
for the dagger bindings they can stay

00:16:45,120 --> 00:16:50,520
with the features that that we want

00:16:46,890 --> 00:16:51,720
right so we kind of had to shuffle

00:16:50,520 --> 00:16:54,270
around a little bit of the ideal

00:16:51,720 --> 00:16:55,800
location but you know we can try to deal

00:16:54,270 --> 00:16:58,950
with it as we go forward let's see what

00:16:55,800 --> 00:17:00,590
else we can do one of the things that we

00:16:58,950 --> 00:17:03,630
want to look into at this point is like

00:17:00,590 --> 00:17:05,400
how does how do these graphs then access

00:17:03,630 --> 00:17:07,680
like from intermediate modules right

00:17:05,400 --> 00:17:10,080
like so even though originally we said

00:17:07,680 --> 00:17:13,320
that we wanted one the application scope

00:17:10,080 --> 00:17:15,210
and the user scope at the bottom and the

00:17:13,320 --> 00:17:18,330
retains covering the beauty scope like

00:17:15,210 --> 00:17:19,740
further up at the features level but

00:17:18,330 --> 00:17:21,060
then like you know now that the

00:17:19,740 --> 00:17:24,810
application scope and the graphs are

00:17:21,060 --> 00:17:26,910
defined at the top which makes sense but

00:17:24,810 --> 00:17:29,310
we have run into this case so imagine

00:17:26,910 --> 00:17:30,720
this like legacy activity that uploads

00:17:29,310 --> 00:17:32,600
image I don't know what it does but

00:17:30,720 --> 00:17:36,810
let's just assume that it's one of those

00:17:32,600 --> 00:17:38,700
now it needs to access the application

00:17:36,810 --> 00:17:41,910
object right graph that's defined at the

00:17:38,700 --> 00:17:44,580
top to basically get access to this

00:17:41,910 --> 00:17:45,270
image uploader and that was one of the

00:17:44,580 --> 00:17:46,770
reasons we're

00:17:45,270 --> 00:17:48,660
where we originally was saying that hey

00:17:46,770 --> 00:17:50,310
it makes sense to have the application

00:17:48,660 --> 00:17:52,830
scope defying the appellation grab

00:17:50,310 --> 00:17:54,690
defined at the very bottom but we were

00:17:52,830 --> 00:17:58,050
running into this case so let's see how

00:17:54,690 --> 00:17:59,220
we can walk around it because the module

00:17:58,050 --> 00:18:02,340
is going to be right there with the

00:17:59,220 --> 00:18:05,340
feature like as we were talking about so

00:18:02,340 --> 00:18:08,460
we wrote this another helper

00:18:05,340 --> 00:18:09,960
we love helper classes by the way so we

00:18:08,460 --> 00:18:11,100
wrote this helper class that essentially

00:18:09,960 --> 00:18:13,920
could be the provider for the

00:18:11,100 --> 00:18:16,530
application graph and then we said that

00:18:13,920 --> 00:18:20,280
instead of doing this where we were

00:18:16,530 --> 00:18:21,720
storing the application graph at in the

00:18:20,280 --> 00:18:24,300
application level in like a member

00:18:21,720 --> 00:18:27,720
variable when we instead we changed this

00:18:24,300 --> 00:18:29,520
to basically be assigning it to the

00:18:27,720 --> 00:18:31,440
provider so instead of storing it in the

00:18:29,520 --> 00:18:32,880
application itself we probably just

00:18:31,440 --> 00:18:35,820
store it in the provider and the

00:18:32,880 --> 00:18:38,340
provider knows how to then get access to

00:18:35,820 --> 00:18:39,870
the graph the magic part of it is like

00:18:38,340 --> 00:18:42,000
then we can move the provider all the

00:18:39,870 --> 00:18:43,560
way to the bottom like there's no reason

00:18:42,000 --> 00:18:44,850
for the provider to be at the top even

00:18:43,560 --> 00:18:46,980
though the graphs get defined at the

00:18:44,850 --> 00:18:51,090
very top the provider can sit at the

00:18:46,980 --> 00:18:54,480
very bottom of the of the of the modules

00:18:51,090 --> 00:18:56,430
right so in this particular case then

00:18:54,480 --> 00:18:58,230
like going back to what we had where the

00:18:56,430 --> 00:19:01,320
legacy application needs access to this

00:18:58,230 --> 00:19:03,210
media sub graph if if we have the

00:19:01,320 --> 00:19:04,800
provider then we can just do something

00:19:03,210 --> 00:19:07,740
like this right like so the provider

00:19:04,800 --> 00:19:09,090
will give you the graph we know that we

00:19:07,740 --> 00:19:11,370
are looking at the media sub graph so we

00:19:09,090 --> 00:19:13,740
can just cast it and access the image

00:19:11,370 --> 00:19:16,950
uploader let's clean it up a little bit

00:19:13,740 --> 00:19:18,480
right we can just move it into with a

00:19:16,950 --> 00:19:21,210
helper method right and the helper

00:19:18,480 --> 00:19:24,270
method can just cast it and just give

00:19:21,210 --> 00:19:25,500
you this I'll give you the sub graph we

00:19:24,270 --> 00:19:27,210
can actually clean it up a little bit

00:19:25,500 --> 00:19:29,100
more like so you don't even have to

00:19:27,210 --> 00:19:30,360
think about the provider we can just do

00:19:29,100 --> 00:19:32,730
it in the graph itself in the graph

00:19:30,360 --> 00:19:35,130
definition we can write a companion get

00:19:32,730 --> 00:19:37,050
getter that essentially does the same

00:19:35,130 --> 00:19:41,100
thing for you like it will access the

00:19:37,050 --> 00:19:43,230
provider and like cast it and then the

00:19:41,100 --> 00:19:44,730
use of it in the legacy module ends up

00:19:43,230 --> 00:19:46,530
being something very simple you know you

00:19:44,730 --> 00:19:48,510
want to access the media graph you can

00:19:46,530 --> 00:19:51,810
just get it and access whatever you need

00:19:48,510 --> 00:19:53,790
from that graph so this simplicity

00:19:51,810 --> 00:19:55,440
essentially takes care of this case

00:19:53,790 --> 00:19:57,990
where we were reaching up and down at

00:19:55,440 --> 00:19:58,770
this to basically get down to the lower

00:19:57,990 --> 00:20:00,660
levels

00:19:58,770 --> 00:20:02,070
now we can just reach down like so we

00:20:00,660 --> 00:20:03,840
can just go to the media subgroup and

00:20:02,070 --> 00:20:06,920
the media subgraph can reach out to the

00:20:03,840 --> 00:20:10,410
provider as needed what else did we have

00:20:06,920 --> 00:20:13,679
so one thing that you might have noticed

00:20:10,410 --> 00:20:15,150
from that example is that the grafts can

00:20:13,679 --> 00:20:17,040
grow like we were just talking about

00:20:15,150 --> 00:20:21,030
composers so if we look at just the

00:20:17,040 --> 00:20:23,580
composer we had at least like the the

00:20:21,030 --> 00:20:25,200
compose launcher the the notification

00:20:23,580 --> 00:20:27,000
handler and then like you know with the

00:20:25,200 --> 00:20:29,340
tweet repositories whatever related to

00:20:27,000 --> 00:20:30,840
that and it can keep on growing and

00:20:29,340 --> 00:20:33,179
that's just like one feature we'd like a

00:20:30,840 --> 00:20:35,760
few things at it right like and then we

00:20:33,179 --> 00:20:40,230
if we add all the other once it grows it

00:20:35,760 --> 00:20:42,090
becomes big so we thought around them to

00:20:40,230 --> 00:20:44,100
figure out okay how can we deal with it

00:20:42,090 --> 00:20:48,080
and one of the thoughts that came about

00:20:44,100 --> 00:20:50,550
is that we can introduce sub-graphs so

00:20:48,080 --> 00:20:52,170
we'd subgraphs you can clean it up and

00:20:50,550 --> 00:20:53,370
we can actually define it so we were

00:20:52,170 --> 00:20:55,679
already saying that there's the media

00:20:53,370 --> 00:20:57,630
sub graph but like what if the

00:20:55,679 --> 00:21:00,600
definitions completely could be used

00:20:57,630 --> 00:21:02,850
like this way right so just using a very

00:21:00,600 --> 00:21:05,190
short version of the application graph

00:21:02,850 --> 00:21:07,020
so we had composer on all of these

00:21:05,190 --> 00:21:08,760
weekends we can just split it up right

00:21:07,020 --> 00:21:10,559
so we can say hey the composer related

00:21:08,760 --> 00:21:12,960
it goes to the composer subgraph and we

00:21:10,559 --> 00:21:15,929
can just basically extend the interface

00:21:12,960 --> 00:21:17,309
as we need so we can do that for the

00:21:15,929 --> 00:21:20,700
other one so we can do it for the tweet

00:21:17,309 --> 00:21:22,770
repository the images and like whatever

00:21:20,700 --> 00:21:24,750
granularity that makes sense right and

00:21:22,770 --> 00:21:28,080
we can build all these sub graphs and

00:21:24,750 --> 00:21:29,760
make this very simple object graph

00:21:28,080 --> 00:21:31,650
definition where you don't have to worry

00:21:29,760 --> 00:21:33,270
about what all bindings are there right

00:21:31,650 --> 00:21:36,059
like they're all defining their own sub

00:21:33,270 --> 00:21:39,840
graphs and then like like we were saying

00:21:36,059 --> 00:21:41,460
before where the media component modules

00:21:39,840 --> 00:21:42,870
were right there right but now we can

00:21:41,460 --> 00:21:45,960
actually move the sub graphs to that

00:21:42,870 --> 00:21:48,900
level right and we can actually put them

00:21:45,960 --> 00:21:50,670
right where they're defined so wherever

00:21:48,900 --> 00:21:53,280
the bindings are we can put the graphs

00:21:50,670 --> 00:21:55,590
right next to it kind of like helps us

00:21:53,280 --> 00:21:57,570
get rid of this very big graph and

00:21:55,590 --> 00:22:01,650
distribute it do with all the features

00:21:57,570 --> 00:22:03,630
that we have all right

00:22:01,650 --> 00:22:06,780
question comes up immediately from that

00:22:03,630 --> 00:22:08,400
is what about testing right we have all

00:22:06,780 --> 00:22:11,850
these sub graphs the sub graphs knows

00:22:08,400 --> 00:22:13,140
how to pull things on their own and the

00:22:11,850 --> 00:22:15,630
sub graphs is looking at the provider

00:22:13,140 --> 00:22:16,860
directly so how do I actually take

00:22:15,630 --> 00:22:19,110
advantage of the testability of

00:22:16,860 --> 00:22:22,470
dependency injection and like replace it

00:22:19,110 --> 00:22:25,020
so what we did was we added this little

00:22:22,470 --> 00:22:27,690
thing for the provider so the provider

00:22:25,020 --> 00:22:29,790
we added a map where it can basically

00:22:27,690 --> 00:22:31,890
store some of these overrides that you

00:22:29,790 --> 00:22:35,070
have and then ability to override it and

00:22:31,890 --> 00:22:36,660
then in the gutter we essentially look

00:22:35,070 --> 00:22:38,160
at it and see if there was any overrides

00:22:36,660 --> 00:22:39,870
if there is any overrides will return

00:22:38,160 --> 00:22:41,310
you that or we can just return you the

00:22:39,870 --> 00:22:45,000
real implementation that was already

00:22:41,310 --> 00:22:49,800
there so then like you know that's taken

00:22:45,000 --> 00:22:51,240
care of now we as we started using this

00:22:49,800 --> 00:22:54,030
more and more we ran into this problem

00:22:51,240 --> 00:22:55,440
of decoupling features so that so I want

00:22:54,030 --> 00:22:58,290
to dive through it a little bit more and

00:22:55,440 --> 00:23:02,040
give you a little more detail because

00:22:58,290 --> 00:23:05,670
this was a doozy so let me use the

00:23:02,040 --> 00:23:08,280
example of the app navigation so

00:23:05,670 --> 00:23:09,750
essentially if we have a very simple

00:23:08,280 --> 00:23:11,880
Twitter app imagine it has only four

00:23:09,750 --> 00:23:13,650
modules imagine it only has the main

00:23:11,880 --> 00:23:16,170
activity it has the ability to show

00:23:13,650 --> 00:23:18,840
tweet details it can do a compose and

00:23:16,170 --> 00:23:22,560
they have DM for direct messaging right

00:23:18,840 --> 00:23:24,390
now you can get a tweet link via a DM

00:23:22,560 --> 00:23:27,000
and if you tap on it you want to be able

00:23:24,390 --> 00:23:29,970
to open it so now in Android how

00:23:27,000 --> 00:23:32,010
activities work is that you four to

00:23:29,970 --> 00:23:34,380
launch that screen you need the activity

00:23:32,010 --> 00:23:37,080
to create an intent around it and then

00:23:34,380 --> 00:23:38,970
you basically launch that intent so for

00:23:37,080 --> 00:23:40,380
in this particular case the DM activity

00:23:38,970 --> 00:23:42,030
will have to know about the two detail

00:23:40,380 --> 00:23:43,860
activity so that it can launch the

00:23:42,030 --> 00:23:46,260
intent related to that and then you can

00:23:43,860 --> 00:23:48,030
go from DM to tweet activity however

00:23:46,260 --> 00:23:51,360
there's a feature where you can share a

00:23:48,030 --> 00:23:53,130
tweet through DMS right so then the

00:23:51,360 --> 00:23:55,590
tweet detail activity also has to know

00:23:53,130 --> 00:23:58,230
about the TM activity so this means that

00:23:55,590 --> 00:24:01,380
we have this circular dependency and you

00:23:58,230 --> 00:24:03,600
know that obviously doesn't work so we

00:24:01,380 --> 00:24:05,820
thought about it and we basically ended

00:24:03,600 --> 00:24:08,100
up introducing subsystem called

00:24:05,820 --> 00:24:09,510
navigation and then so this is how the

00:24:08,100 --> 00:24:11,940
navigation subsystem essentially works

00:24:09,510 --> 00:24:13,470
so we created these intent factories

00:24:11,940 --> 00:24:16,200
essentially for each one of the features

00:24:13,470 --> 00:24:17,520
right we call them activity our

00:24:16,200 --> 00:24:19,380
they are related to the features

00:24:17,520 --> 00:24:21,060
directly and then we moved these

00:24:19,380 --> 00:24:23,610
activity args into the navigation

00:24:21,060 --> 00:24:25,440
subsystem so that way like every

00:24:23,610 --> 00:24:27,450
activity as you need to do all you need

00:24:25,440 --> 00:24:29,640
to have access to is to the navigation

00:24:27,450 --> 00:24:32,160
subsystem and you kind of like take care

00:24:29,640 --> 00:24:33,600
of this circular dependency let's dive

00:24:32,160 --> 00:24:35,640
into a little bit on like what the

00:24:33,600 --> 00:24:36,990
activity arts look like so I mentioned

00:24:35,640 --> 00:24:39,090
before that they are basically in ten

00:24:36,990 --> 00:24:41,730
factories so essentially the interface

00:24:39,090 --> 00:24:43,710
looks something simple like this and

00:24:41,730 --> 00:24:45,690
from there what we want to do is

00:24:43,710 --> 00:24:48,720
essentially just generate bintang that's

00:24:45,690 --> 00:24:50,550
required to launch the activity one of

00:24:48,720 --> 00:24:52,440
the immediate bonuses that we got out of

00:24:50,550 --> 00:24:54,120
it is we actually had type safety of the

00:24:52,440 --> 00:24:57,180
arguments because they're just like

00:24:54,120 --> 00:24:58,980
bundles that's defined in Android so

00:24:57,180 --> 00:25:00,690
that was a big bonus but like it's kind

00:24:58,980 --> 00:25:03,780
of like something that we just got out

00:25:00,690 --> 00:25:06,390
of it now it as I mentioned it creates

00:25:03,780 --> 00:25:08,310
the internet cavity right and then for

00:25:06,390 --> 00:25:10,050
all of these different ones so now we

00:25:08,310 --> 00:25:13,080
have these activities and all these like

00:25:10,050 --> 00:25:15,090
intent factories spread all around we

00:25:13,080 --> 00:25:17,040
wanted a easy way to collect them all

00:25:15,090 --> 00:25:18,900
together so we built the service

00:25:17,040 --> 00:25:21,420
discovery the service discovery what it

00:25:18,900 --> 00:25:24,540
does is essentially uses the multi

00:25:21,420 --> 00:25:26,310
bindings feature for dagger and pulls in

00:25:24,540 --> 00:25:30,050
all of these intent factories that we've

00:25:26,310 --> 00:25:32,490
defined let's dive into a little bit so

00:25:30,050 --> 00:25:33,960
even smaller example here but

00:25:32,490 --> 00:25:35,790
essentially like we have these engine

00:25:33,960 --> 00:25:37,500
factories defined right and we want to

00:25:35,790 --> 00:25:38,880
basically have them in the object graph

00:25:37,500 --> 00:25:41,400
somewhere so that we can easily

00:25:38,880 --> 00:25:43,650
reference to it so we use multi bindings

00:25:41,400 --> 00:25:45,090
from dagger which will just essentially

00:25:43,650 --> 00:25:47,310
collect all of these definitions because

00:25:45,090 --> 00:25:49,770
they're defined and then put it in for

00:25:47,310 --> 00:25:51,540
us it dagger can put it in as a set or a

00:25:49,770 --> 00:25:53,490
map we've decided to use a map and

00:25:51,540 --> 00:25:55,260
essentially what we said is that for

00:25:53,490 --> 00:25:57,480
each one of these activity arguments

00:25:55,260 --> 00:25:59,280
like map it the values the activity

00:25:57,480 --> 00:26:01,380
arguments and the key is that the

00:25:59,280 --> 00:26:02,940
activity class so then we have access to

00:26:01,380 --> 00:26:05,910
activity class and we can generate the

00:26:02,940 --> 00:26:08,490
intent let's dive into like what we did

00:26:05,910 --> 00:26:12,120
so taking composer module as an example

00:26:08,490 --> 00:26:13,530
so we added this tag into map which

00:26:12,120 --> 00:26:15,630
comes from dagger which basically says

00:26:13,530 --> 00:26:18,300
that pull this binding into a map and

00:26:15,630 --> 00:26:20,790
then we said use activity arguments as a

00:26:18,300 --> 00:26:23,370
key and then the value would be the

00:26:20,790 --> 00:26:25,350
activity class itself this essentially

00:26:23,370 --> 00:26:28,320
generates this map right that we store

00:26:25,350 --> 00:26:29,400
in the another helper function called

00:26:28,320 --> 00:26:32,610
activity starter

00:26:29,400 --> 00:26:34,500
the navigation subsystem so this map is

00:26:32,610 --> 00:26:36,570
then later access so when we want to

00:26:34,500 --> 00:26:38,850
create something we have this map and we

00:26:36,570 --> 00:26:40,500
have this helper method now that can

00:26:38,850 --> 00:26:41,640
kick out the activity so all you need to

00:26:40,500 --> 00:26:43,980
know is that this is the activity

00:26:41,640 --> 00:26:45,330
argument that's required now Android do

00:26:43,980 --> 00:26:47,100
requires context for a lot of these

00:26:45,330 --> 00:26:50,010
things so we take in context for this

00:26:47,100 --> 00:26:52,020
case but then all it does essentially is

00:26:50,010 --> 00:26:54,800
that it generates the intent like we

00:26:52,020 --> 00:26:57,300
said right and nothing more to it

00:26:54,800 --> 00:26:59,700
essentially getting rid of this circular

00:26:57,300 --> 00:27:02,160
dependency that we had and now we

00:26:59,700 --> 00:27:04,200
essentially have this module like thanks

00:27:02,160 --> 00:27:06,240
G dagger we have this map and we can

00:27:04,200 --> 00:27:11,490
actually relate the different intent

00:27:06,240 --> 00:27:15,179
factories to activities themselves all

00:27:11,490 --> 00:27:17,220
right so we learned a lot about dagger

00:27:15,179 --> 00:27:19,290
using dagger over the times and over the

00:27:17,220 --> 00:27:20,820
years and as more and more engineers

00:27:19,290 --> 00:27:22,920
we're onboarding and more and more

00:27:20,820 --> 00:27:25,350
features that we were writing we started

00:27:22,920 --> 00:27:28,670
seeing some of these even like start

00:27:25,350 --> 00:27:33,809
streaming so I want to go into even more

00:27:28,670 --> 00:27:35,640
details that we ran into so we used it

00:27:33,809 --> 00:27:37,200
for initializers like is the same

00:27:35,640 --> 00:27:39,150
features like with the service discovery

00:27:37,200 --> 00:27:40,890
we used it for all the initializers we

00:27:39,150 --> 00:27:42,450
used it for like notification handlers

00:27:40,890 --> 00:27:45,059
and we also use them for deep link

00:27:42,450 --> 00:27:47,510
handlers like that way we just spread it

00:27:45,059 --> 00:27:50,520
out wherever they're related right and

00:27:47,510 --> 00:27:52,429
like this particular thing like we

00:27:50,520 --> 00:27:55,860
basically ended up building this thing

00:27:52,429 --> 00:28:00,540
right that's on top of dagger so that we

00:27:55,860 --> 00:28:04,500
can like help distribute the graph like

00:28:00,540 --> 00:28:05,220
into the modules themselves right so the

00:28:04,500 --> 00:28:09,120
sub graphs

00:28:05,220 --> 00:28:10,980
however ran into a problem so we found

00:28:09,120 --> 00:28:16,559
out that the sub graphs themselves are

00:28:10,980 --> 00:28:17,820
not atomic so let me let me explain so

00:28:16,559 --> 00:28:19,200
we have these graph definition that I

00:28:17,820 --> 00:28:20,670
mentioned right so there's a top-level

00:28:19,200 --> 00:28:22,230
graph and then all the sub graphs

00:28:20,670 --> 00:28:24,420
defined in the modules that they have

00:28:22,230 --> 00:28:26,160
but then to use dagger we essentially

00:28:24,420 --> 00:28:28,230
have to actually define a module next to

00:28:26,160 --> 00:28:32,370
everything which defines where the

00:28:28,230 --> 00:28:34,020
bindings are so you do build a graph at

00:28:32,370 --> 00:28:35,910
the very top level you have to point it

00:28:34,020 --> 00:28:37,110
to the modules and then you also have to

00:28:35,910 --> 00:28:38,380
point it to the sub graphs because of

00:28:37,110 --> 00:28:42,070
the definition that we have

00:28:38,380 --> 00:28:44,500
and then it gets worse because we share

00:28:42,070 --> 00:28:45,970
code with periscope and we would like to

00:28:44,500 --> 00:28:48,820
keep on doing it when you have a new

00:28:45,970 --> 00:28:50,440
definition on that's a shared module you

00:28:48,820 --> 00:28:52,900
essentially have to define both of them

00:28:50,440 --> 00:28:54,760
in both the apps and this will just keep

00:28:52,900 --> 00:28:56,080
on growing right like now we have sand

00:28:54,760 --> 00:28:57,970
boxes that everybody's using so

00:28:56,080 --> 00:29:03,190
everywhere you have to remember to do

00:28:57,970 --> 00:29:05,380
both of them so what can we do so to

00:29:03,190 --> 00:29:07,510
start off like so using this broadcast

00:29:05,380 --> 00:29:08,680
example so that's the subgraph

00:29:07,510 --> 00:29:10,390
definition which says this is the

00:29:08,680 --> 00:29:11,770
binding that we're having and then the

00:29:10,390 --> 00:29:14,710
dagger definition which actually

00:29:11,770 --> 00:29:16,780
provides the binding so we started by

00:29:14,710 --> 00:29:18,460
basically annotating that hey this is

00:29:16,780 --> 00:29:19,990
our subgraph so we know what a subgraph

00:29:18,460 --> 00:29:22,360
is and then we're saying that hey this

00:29:19,990 --> 00:29:25,750
is the scope for the subgraph and from

00:29:22,360 --> 00:29:27,640
there we said hey we can actually say

00:29:25,750 --> 00:29:29,020
that hey this is what's tied to the

00:29:27,640 --> 00:29:31,330
subgraph right like this is a module

00:29:29,020 --> 00:29:34,140
that you need for the subgraph and then

00:29:31,330 --> 00:29:36,580
for the the big graph at the very top

00:29:34,140 --> 00:29:38,890
instead of saying that hey this is this

00:29:36,580 --> 00:29:41,440
like component with all these modules we

00:29:38,890 --> 00:29:43,030
can essentially say that hey this part

00:29:41,440 --> 00:29:45,100
can be replaced with that this is an

00:29:43,030 --> 00:29:46,960
object graph that's all like that's all

00:29:45,100 --> 00:29:49,630
we need to know right we can do the same

00:29:46,960 --> 00:29:51,160
thing for the user level stuff because

00:29:49,630 --> 00:29:52,570
it's a sub component but essentially

00:29:51,160 --> 00:29:54,490
that's also an object graph that's

00:29:52,570 --> 00:29:56,050
defining everything so the big

00:29:54,490 --> 00:29:58,030
difference between the sub graphs like

00:29:56,050 --> 00:29:59,500
we said before was just a pieces of the

00:29:58,030 --> 00:30:03,220
object graph the object graph is like

00:29:59,500 --> 00:30:04,840
the full definition so this annotations

00:30:03,220 --> 00:30:06,220
then like we basically send it through

00:30:04,840 --> 00:30:10,960
the annotation processor that we wrote

00:30:06,220 --> 00:30:13,180
and it can crunch and generate the

00:30:10,960 --> 00:30:15,370
dagger compatible components and

00:30:13,180 --> 00:30:16,990
subcomponents so we defined the sub

00:30:15,370 --> 00:30:19,870
graphs and like just let it generate

00:30:16,990 --> 00:30:23,110
whatever is dagger really this is like

00:30:19,870 --> 00:30:25,000
fully dagger compatible right because we

00:30:23,110 --> 00:30:26,890
are definitely using dagger under the

00:30:25,000 --> 00:30:29,770
covers it's just like like simplifying

00:30:26,890 --> 00:30:33,660
the one of the things we rather do what

00:30:29,770 --> 00:30:36,550
else let's see so sub graphs are not

00:30:33,660 --> 00:30:40,270
encapsulated right now right let me let

00:30:36,550 --> 00:30:42,250
me explain that with this example right

00:30:40,270 --> 00:30:43,780
so what what I mean is that when you

00:30:42,250 --> 00:30:45,460
have all these different sub graphs like

00:30:43,780 --> 00:30:47,890
youyou actually don't know how they

00:30:45,460 --> 00:30:49,930
relate to each other you don't know who

00:30:47,890 --> 00:30:51,860
needs what it's only when you add it to

00:30:49,930 --> 00:30:54,670
the object graph that you realize that

00:30:51,860 --> 00:30:57,260
I have everything that I mean right

00:30:54,670 --> 00:31:00,170
where we would like is that at a

00:30:57,260 --> 00:31:02,390
subgraph at the subgraph level we know

00:31:00,170 --> 00:31:05,929
that it actually has all the bindings

00:31:02,390 --> 00:31:08,000
that it requires so where we did is that

00:31:05,929 --> 00:31:10,549
you know we took this definition of the

00:31:08,000 --> 00:31:14,540
modules and like sorry of the subgraph

00:31:10,549 --> 00:31:16,130
and we added the dependencies so we know

00:31:14,540 --> 00:31:19,220
that this subgraphs has other sub

00:31:16,130 --> 00:31:20,960
grabbed event dependencies and then you

00:31:19,220 --> 00:31:22,670
know instead of having this issue with

00:31:20,960 --> 00:31:24,650
at compile time at the very top level in

00:31:22,670 --> 00:31:27,440
the graph we say hey there's a binding

00:31:24,650 --> 00:31:29,210
missing we can actually get the error at

00:31:27,440 --> 00:31:31,640
a very lower level so we know that this

00:31:29,210 --> 00:31:33,740
particular subsystem is actually missing

00:31:31,640 --> 00:31:39,200
a binding and then fixing that will just

00:31:33,740 --> 00:31:41,030
fix the entire graph right and the bonus

00:31:39,200 --> 00:31:43,700
from that is that now sub graphs are

00:31:41,030 --> 00:31:46,160
fully documented right like we have from

00:31:43,700 --> 00:31:47,690
this definition alone we have what what

00:31:46,160 --> 00:31:49,070
are the modules that's related to this

00:31:47,690 --> 00:31:50,780
sub graph we know what are the

00:31:49,070 --> 00:31:52,309
dependencies of the sub graphs and we

00:31:50,780 --> 00:31:54,320
also know what bindings it's being

00:31:52,309 --> 00:31:58,130
provided so looking at a sub graph you

00:31:54,320 --> 00:32:00,169
know what all it needs what else we ran

00:31:58,130 --> 00:32:04,160
into so we ran into the case that sub

00:32:00,169 --> 00:32:05,780
graphs are not reusable and you're gonna

00:32:04,160 --> 00:32:07,250
say South I thought that's the whole

00:32:05,780 --> 00:32:09,500
process of doing it that's why you're

00:32:07,250 --> 00:32:11,570
doing it but like there's a little bit

00:32:09,500 --> 00:32:13,970
that what I mean is a little bit nuanced

00:32:11,570 --> 00:32:16,309
so we can use this network sub graph

00:32:13,970 --> 00:32:18,320
right for example in any app that we

00:32:16,309 --> 00:32:20,150
want but then when periscope came along

00:32:18,320 --> 00:32:22,669
they said hey you know this doesn't work

00:32:20,150 --> 00:32:25,580
for us we need to use a special cache

00:32:22,669 --> 00:32:27,200
and since it's defined in the sub graph

00:32:25,580 --> 00:32:31,400
there's no way for us to reuse it

00:32:27,200 --> 00:32:33,650
without copying the whole thing so we

00:32:31,400 --> 00:32:36,950
thought about it and we are like this is

00:32:33,650 --> 00:32:39,679
a big fail what if we think about it in

00:32:36,950 --> 00:32:41,150
terms of just what we would do with the

00:32:39,679 --> 00:32:43,820
class right so if you if you were a

00:32:41,150 --> 00:32:45,980
class we would say that hey this is not

00:32:43,820 --> 00:32:47,840
a final class it's an open class so you

00:32:45,980 --> 00:32:49,970
can extend it and then we could say that

00:32:47,840 --> 00:32:51,830
hey the cache is also an open function

00:32:49,970 --> 00:32:54,710
and you can overwrite it then for

00:32:51,830 --> 00:32:56,960
periscope you can actually like override

00:32:54,710 --> 00:32:58,610
that binding even just by extending this

00:32:56,960 --> 00:33:00,320
and just overriding the special cache

00:32:58,610 --> 00:33:01,640
right like just saying that it replaced

00:33:00,320 --> 00:33:03,570
the cache with this special cache and

00:33:01,640 --> 00:33:07,970
then

00:33:03,570 --> 00:33:10,710
something like so what at work and so we

00:33:07,970 --> 00:33:12,960
basically added annotations that

00:33:10,710 --> 00:33:14,730
basically references the same idea right

00:33:12,960 --> 00:33:16,500
so we're saying that this particular sub

00:33:14,730 --> 00:33:18,570
graph is open which means if you can

00:33:16,500 --> 00:33:20,010
extend it and then we're saying that

00:33:18,570 --> 00:33:22,410
this particular bindings are open which

00:33:20,010 --> 00:33:25,080
means you can replace it we didn't do it

00:33:22,410 --> 00:33:26,820
for all we left the power so that in

00:33:25,080 --> 00:33:28,380
some cases as you're building the module

00:33:26,820 --> 00:33:30,330
you know that you cannot replace it so

00:33:28,380 --> 00:33:32,730
you don't want to do that for everything

00:33:30,330 --> 00:33:35,370
right you want to limit it so we built

00:33:32,730 --> 00:33:37,380
it in instead of having everything be

00:33:35,370 --> 00:33:40,230
overwritten we we allowed it to be

00:33:37,380 --> 00:33:41,880
defined right and then like when the

00:33:40,230 --> 00:33:43,890
periscope comes in it can define its

00:33:41,880 --> 00:33:45,980
special cache and like said that hey

00:33:43,890 --> 00:33:48,330
this is a sub graph this is the override

00:33:45,980 --> 00:33:51,560
so we can reuse the override annotation

00:33:48,330 --> 00:33:55,860
and say that it binds to a cache right

00:33:51,560 --> 00:33:57,240
final thing that we ran into is that sub

00:33:55,860 --> 00:33:59,400
graphs don't support inversion of

00:33:57,240 --> 00:34:02,340
dependencies so this is this was very

00:33:59,400 --> 00:34:04,080
tricky as we started doing more and more

00:34:02,340 --> 00:34:06,270
things into the sub graph we ran into

00:34:04,080 --> 00:34:08,490
this case where we wanted to define this

00:34:06,270 --> 00:34:10,770
database sub graph and the database sub

00:34:08,490 --> 00:34:12,240
graph in general like you know we we

00:34:10,770 --> 00:34:14,940
have this definition of the schema of

00:34:12,240 --> 00:34:17,580
like what this database holds but a

00:34:14,940 --> 00:34:19,440
database sub graph is more like an

00:34:17,580 --> 00:34:21,000
abstract thought right like we have

00:34:19,440 --> 00:34:23,340
multiple databases and each database

00:34:21,000 --> 00:34:25,760
will have its own schema and we want to

00:34:23,340 --> 00:34:28,280
invert this dependency so that we can

00:34:25,760 --> 00:34:31,110
provide the schema for different

00:34:28,280 --> 00:34:32,460
databases but also have like the modules

00:34:31,110 --> 00:34:34,200
themselves like anything that uses

00:34:32,460 --> 00:34:38,820
databases take advantage of this sub

00:34:34,200 --> 00:34:41,280
graph so just like before just like open

00:34:38,820 --> 00:34:43,470
before we we added abstract annotations

00:34:41,280 --> 00:34:45,899
so the abstract annotation says that you

00:34:43,470 --> 00:34:48,060
cannot instantiate this graph you can

00:34:45,899 --> 00:34:50,040
extend it you can build something like

00:34:48,060 --> 00:34:53,730
this for Twitter for example like we and

00:34:50,040 --> 00:34:55,710
and you if it completes all the bindings

00:34:53,730 --> 00:34:57,420
then it's a complete graph right and

00:34:55,710 --> 00:34:59,640
it's not going to be an abstract and

00:34:57,420 --> 00:35:01,080
then you can invert it and you can say

00:34:59,640 --> 00:35:03,420
that this is the schema that the Twitter

00:35:01,080 --> 00:35:07,110
databases requires and everything else

00:35:03,420 --> 00:35:09,090
is provided from the database and so

00:35:07,110 --> 00:35:10,950
that was all the subgraph stuff and

00:35:09,090 --> 00:35:14,220
finally for the graphs we ran into this

00:35:10,950 --> 00:35:15,120
big one is that they're hard to maintain

00:35:14,220 --> 00:35:17,610
so

00:35:15,120 --> 00:35:19,500
just like dagger where you have to

00:35:17,610 --> 00:35:21,750
define all the modules at the top now we

00:35:19,500 --> 00:35:26,160
have to define all the sub graphs so

00:35:21,750 --> 00:35:28,230
something like this happens even though

00:35:26,160 --> 00:35:29,460
we're putting all the bindings in their

00:35:28,230 --> 00:35:32,490
own level graphs you still have to

00:35:29,460 --> 00:35:34,230
define the graphs and it gets really

00:35:32,490 --> 00:35:37,140
insane when you have a lot of features

00:35:34,230 --> 00:35:41,130
if you haven't seen it trust us we've

00:35:37,140 --> 00:35:43,890
run into this and so what we decided is

00:35:41,130 --> 00:35:45,780
like all of these information is

00:35:43,890 --> 00:35:47,730
available to us so can we build an

00:35:45,780 --> 00:35:50,400
annotation processor that can crunch it

00:35:47,730 --> 00:35:53,310
right and then essentially does

00:35:50,400 --> 00:35:54,810
automatic discovery and essentially all

00:35:53,310 --> 00:35:56,370
you have to do is say hey this is

00:35:54,810 --> 00:35:58,020
there's this object graph it can find

00:35:56,370 --> 00:36:03,360
the sub graph that's required and pulled

00:35:58,020 --> 00:36:06,630
it in so essentially you know at runtime

00:36:03,360 --> 00:36:08,130
at when you're writing code you don't

00:36:06,630 --> 00:36:10,890
have the types available so you don't

00:36:08,130 --> 00:36:12,510
really know but at compile time these

00:36:10,890 --> 00:36:16,740
are all there because of the automatic

00:36:12,510 --> 00:36:18,990
discovery right and we did more from

00:36:16,740 --> 00:36:22,710
there right so once we solve that we

00:36:18,990 --> 00:36:24,300
added support for factories like in

00:36:22,710 --> 00:36:27,030
general like just first-class support

00:36:24,300 --> 00:36:29,100
yeah it improved our build times a lot

00:36:27,030 --> 00:36:31,590
because of the distribution of the

00:36:29,100 --> 00:36:34,800
graphs and we are working on an ID

00:36:31,590 --> 00:36:36,720
integration right now this annotation

00:36:34,800 --> 00:36:39,210
processor that we created we call it

00:36:36,720 --> 00:36:40,320
site and you know it has all these

00:36:39,210 --> 00:36:44,550
features that I've been talking about

00:36:40,320 --> 00:36:48,800
for the past 30 or so minutes and we are

00:36:44,550 --> 00:36:52,970
planning to open source it this year

00:36:48,800 --> 00:36:56,820
okay thank you very much

00:36:52,970 --> 00:36:56,820

YouTube URL: https://www.youtube.com/watch?v=wI5jLaMvMNg


