Title: Exploring ARM Development Boards by Carsten Haitzler
Publication date: 2019-03-28
Playlist: FOSSASIA Summit 2019 - Hardware & Design
Description: 
	16 March 2019 13:50, Training Room 2-2

There are a host of ARM based development boards, possibly the most famous of them being the Raspberry Pi series. There are also many others that very few people may know about. Some boards are more or less costly than others and offer different levels of performance, connectivity and levels of software support.

Have you considered getting such a dev board? Have specific use cases for them? Perhaps considered developing one of your own and want to see what else is out there?

This presentation will go over some boards, demo some of them, show how to use or install them, what is and is not well supported and how.
Captions: 
	00:00:00,030 --> 00:00:06,230
hi my name is Carsten some people may

00:00:04,049 --> 00:00:10,740
have heard of me before you may not I

00:00:06,230 --> 00:00:13,820
work at arm arm of these people who

00:00:10,740 --> 00:00:16,440
design CPUs we also design GPUs and

00:00:13,820 --> 00:00:20,699
we're basically everywhere

00:00:16,440 --> 00:00:23,279
so I live in the UK I actually recently

00:00:20,699 --> 00:00:25,080
moved there about six months ago and I'm

00:00:23,279 --> 00:00:28,890
in Cambridge so no one else from

00:00:25,080 --> 00:00:30,660
Cambridge it no no okay so I'm gonna

00:00:28,890 --> 00:00:32,550
talk about arm dev boards I've been

00:00:30,660 --> 00:00:36,300
using these for a long time the first

00:00:32,550 --> 00:00:40,950
one I had was a beagle board this was

00:00:36,300 --> 00:00:42,989
back in 2008 I think that was really

00:00:40,950 --> 00:00:45,690
cool that opened my eyes up to a lot of

00:00:42,989 --> 00:00:47,520
what these newer ARM chips could

00:00:45,690 --> 00:00:49,469
actually really do they no longer just

00:00:47,520 --> 00:00:52,170
power a phone you could power in five

00:00:49,469 --> 00:00:52,969
screens a decent resolutions and getting

00:00:52,170 --> 00:00:55,590
quite fast

00:00:52,969 --> 00:00:57,870
unfortunately that board died after my

00:00:55,590 --> 00:01:00,750
cat decided to us sleep on it and drool

00:00:57,870 --> 00:01:03,449
and I learned the lesson never get a

00:01:00,750 --> 00:01:05,280
board without a case so my hint first

00:01:03,449 --> 00:01:08,490
you get these and get a case yes it cost

00:01:05,280 --> 00:01:09,780
more save it your cat will destroy so

00:01:08,490 --> 00:01:11,250
I'm gonna talk about these things I've

00:01:09,780 --> 00:01:14,340
got some of my newer ones here one of

00:01:11,250 --> 00:01:15,689
them is on the blink it's not doing too

00:01:14,340 --> 00:01:21,330
well at the moment it's one of my oldest

00:01:15,689 --> 00:01:21,659
ones so let's get on with that there we

00:01:21,330 --> 00:01:25,380
go

00:01:21,659 --> 00:01:27,990
um so i'm karsten some people know me as

00:01:25,380 --> 00:01:32,970
raster or a sermon I have been doing

00:01:27,990 --> 00:01:35,060
open source for market 20 years now more

00:01:32,970 --> 00:01:37,439
than 20 years sorry

00:01:35,060 --> 00:01:40,350
23 I don't know I lost count um

00:01:37,439 --> 00:01:42,960
somewhere along the way I am director a

00:01:40,350 --> 00:01:44,369
Tom so to some extent I'm actually

00:01:42,960 --> 00:01:48,420
allowed to tell you things if I feel

00:01:44,369 --> 00:01:49,770
like it I may not feel like it I have

00:01:48,420 --> 00:01:52,500
lived in many countries around the world

00:01:49,770 --> 00:01:56,790
I was actually born in Nigeria as you

00:01:52,500 --> 00:01:59,869
can tell I'm totally Africanist yo I've

00:01:56,790 --> 00:02:04,049
also lived in Australia Japan Taiwan

00:01:59,869 --> 00:02:06,270
South Korea and I'm now in the UK I have

00:02:04,049 --> 00:02:11,069
written a fair amount of open source

00:02:06,270 --> 00:02:12,629
software currently the main projects

00:02:11,069 --> 00:02:13,500
which I work on enlighten the Apella

00:02:12,629 --> 00:02:16,500
Latins about

00:02:13,500 --> 00:02:19,410
and 300,000 on the lines of code and EFL

00:02:16,500 --> 00:02:22,620
is like 1.3 million so they're fairly

00:02:19,410 --> 00:02:24,420
big exercises and see I've also written

00:02:22,620 --> 00:02:26,280
video players I wrote a terminal

00:02:24,420 --> 00:02:27,000
emulator terminology it's about 20,000

00:02:26,280 --> 00:02:28,320
lines of code

00:02:27,000 --> 00:02:30,540
decide to do that on a holiday in

00:02:28,320 --> 00:02:33,030
Thailand that's what holidays in

00:02:30,540 --> 00:02:36,930
Thailand for writing timely emulators um

00:02:33,030 --> 00:02:38,880
I have worked on gtk before I worked on

00:02:36,930 --> 00:02:42,690
Tizen I worked at Samsung for ten years

00:02:38,880 --> 00:02:45,570
and basically pretty much every Smart TV

00:02:42,690 --> 00:02:48,630
they've shipped since what 2015 all

00:02:45,570 --> 00:02:51,450
their watches I'm actually a bunch of

00:02:48,630 --> 00:02:53,840
phones in India I think Indonesia - and

00:02:51,450 --> 00:02:55,200
other places washing jeans fridges I

00:02:53,840 --> 00:02:58,709
lost count

00:02:55,200 --> 00:03:01,230
um either way I think about two years

00:02:58,709 --> 00:03:04,080
ago the count was 130 million devices

00:03:01,230 --> 00:03:06,000
shipped that and I wrote the software

00:03:04,080 --> 00:03:08,100
stack for basically the whole graphics

00:03:06,000 --> 00:03:09,930
thing the window manager compositor UI

00:03:08,100 --> 00:03:12,840
toolkit rendering layers blah blah blah

00:03:09,930 --> 00:03:14,160
blah blah all that kind of thing so I've

00:03:12,840 --> 00:03:16,440
done a bit of this stuff I've got a

00:03:14,160 --> 00:03:19,260
little bit of experience in building

00:03:16,440 --> 00:03:21,750
devices at big scale before this I

00:03:19,260 --> 00:03:23,640
worked at open moko we were once one of

00:03:21,750 --> 00:03:25,080
the first people to release a Linux

00:03:23,640 --> 00:03:27,239
phone in fact we released the first

00:03:25,080 --> 00:03:30,870
Linux phone that actually ran a proper

00:03:27,239 --> 00:03:33,690
Linux tax it was openembedded had - like

00:03:30,870 --> 00:03:36,720
a busy box you could add bash um it ran

00:03:33,690 --> 00:03:38,700
X etc etc so that was small-scale that

00:03:36,720 --> 00:03:41,070
was about 10k who actually did a 10k

00:03:38,700 --> 00:03:42,750
unit run so I've done it a small end and

00:03:41,070 --> 00:03:45,810
that's where I know about problems of

00:03:42,750 --> 00:03:47,239
sourcing and those things then and I

00:03:45,810 --> 00:03:50,910
know on the large end as well

00:03:47,239 --> 00:03:52,739
so I've done a fair bit here I and I've

00:03:50,910 --> 00:03:54,840
found these arm boards to be very very

00:03:52,739 --> 00:03:58,049
useful for many things so I'm gonna talk

00:03:54,840 --> 00:03:59,640
a bit about this when I get it there so

00:03:58,049 --> 00:04:01,650
first of all some people get very

00:03:59,640 --> 00:04:04,739
confused about who arm is arm is not

00:04:01,650 --> 00:04:06,810
another Intel we are not the same we are

00:04:04,739 --> 00:04:09,959
very very fundamentally doing massively

00:04:06,810 --> 00:04:12,269
smaller we have massively less revenue

00:04:09,959 --> 00:04:14,940
because we are for all intents and

00:04:12,269 --> 00:04:18,720
purposes the best description I have is

00:04:14,940 --> 00:04:20,400
imagine you took the design and a bit of

00:04:18,720 --> 00:04:22,590
the support to partner of someone like

00:04:20,400 --> 00:04:24,360
Intel the engineering department and you

00:04:22,590 --> 00:04:25,410
put them in a separate company that's

00:04:24,360 --> 00:04:26,690
basically who we are

00:04:25,410 --> 00:04:29,220
so

00:04:26,690 --> 00:04:30,900
there is that restricts us in certain

00:04:29,220 --> 00:04:33,449
ways we can work and what we can do

00:04:30,900 --> 00:04:34,800
often we can't answer questions like we

00:04:33,449 --> 00:04:36,150
didn't make it we just sold them a

00:04:34,800 --> 00:04:41,280
design and then you're modified and add

00:04:36,150 --> 00:04:44,610
other things up there so we don't do

00:04:41,280 --> 00:04:49,310
everything we do a small subset so our

00:04:44,610 --> 00:04:57,060
partners for example Qualcomm Apple

00:04:49,310 --> 00:04:58,770
Samsung LG Huawei Rockchip all winner am

00:04:57,060 --> 00:05:01,770
logic and there's a whole bunch more

00:04:58,770 --> 00:05:04,949
they actually make the chips they also

00:05:01,770 --> 00:05:07,139
add a whole bunch of IP into it I are

00:05:04,949 --> 00:05:10,380
the cause and bits of circuitry and

00:05:07,139 --> 00:05:11,849
things that do other stuff and sometimes

00:05:10,380 --> 00:05:13,500
they don't use everything we have they

00:05:11,849 --> 00:05:15,479
use one or two things and they add a lot

00:05:13,500 --> 00:05:17,340
of their own so that's why you almost

00:05:15,479 --> 00:05:18,449
always have to talk to them because

00:05:17,340 --> 00:05:21,870
they're the ones we're making the chip

00:05:18,449 --> 00:05:23,970
we just need to put on Twitter what arm

00:05:21,870 --> 00:05:25,470
really is is we create the designs we

00:05:23,970 --> 00:05:28,380
also define the instruction set

00:05:25,470 --> 00:05:31,970
architecture and there is a really big

00:05:28,380 --> 00:05:34,830
document it's called the arm arm the arm

00:05:31,970 --> 00:05:38,159
architecture reference manual so

00:05:34,830 --> 00:05:41,009
wonderful we are mu double Ullman and we

00:05:38,159 --> 00:05:43,530
currently do chips what we actually we

00:05:41,009 --> 00:05:46,320
have a 16-bit instruction set but with

00:05:43,530 --> 00:05:48,360
the 32-bit address space but mostly its

00:05:46,320 --> 00:05:50,400
32-bit which is how to cook up the old

00:05:48,360 --> 00:05:53,789
stuff now and the new stuff which is all

00:05:50,400 --> 00:05:55,820
64-bit arch 64 that's where we actually

00:05:53,789 --> 00:06:07,949
got to do some really clean neat stuff

00:05:55,820 --> 00:06:10,020
so doing that go oh wait so yep so the

00:06:07,949 --> 00:06:12,030
64-bit instructions are new stuff

00:06:10,020 --> 00:06:13,740
believe it or not we actually have

00:06:12,030 --> 00:06:16,289
microcontrollers coming up they use a

00:06:13,740 --> 00:06:21,690
64-bit instruction set and 64-bit memory

00:06:16,289 --> 00:06:24,060
address space so we have some cortex-m

00:06:21,690 --> 00:06:27,419
things that do that yes it sounds insane

00:06:24,060 --> 00:06:30,479
but we're there it is a bit cleaner and

00:06:27,419 --> 00:06:33,630
nicer if you do that though um we also

00:06:30,479 --> 00:06:37,070
happen to design GPUs please don't ask

00:06:33,630 --> 00:06:37,070
me questions about our GPUs please

00:06:37,450 --> 00:06:43,900
please stay there that's a topical in

00:06:40,540 --> 00:06:46,000
its own and just remember that the chips

00:06:43,900 --> 00:06:47,680
do use lots of other components are not

00:06:46,000 --> 00:06:51,340
from us they may not even use our GPUs

00:06:47,680 --> 00:06:53,680
so but they may use other components we

00:06:51,340 --> 00:06:56,080
do and most of its invisible except for

00:06:53,680 --> 00:06:59,110
pretty much the CPU sometimes a GPU

00:06:56,080 --> 00:07:02,110
ignoring that and the fact that there is

00:06:59,110 --> 00:07:04,570
good compiler support the there is good

00:07:02,110 --> 00:07:06,760
other being utils and other support is

00:07:04,570 --> 00:07:07,660
these days largely due to the fact that

00:07:06,760 --> 00:07:10,540
we work on it

00:07:07,660 --> 00:07:12,010
so we in fact work on it to the point

00:07:10,540 --> 00:07:14,260
where we announce a new feature

00:07:12,010 --> 00:07:16,960
the feature will be coming out in

00:07:14,260 --> 00:07:19,870
silicon maybe in one to three years time

00:07:16,960 --> 00:07:21,790
and the patch goes in today

00:07:19,870 --> 00:07:23,950
so we're relatively ahead of the curve

00:07:21,790 --> 00:07:25,690
these days in providing support so you

00:07:23,950 --> 00:07:32,560
get to see things coming before they

00:07:25,690 --> 00:07:35,020
actually come so most of the same behind

00:07:32,560 --> 00:07:37,600
arm CPUs is in fact that they very very

00:07:35,020 --> 00:07:39,970
low power given the kind of performance

00:07:37,600 --> 00:07:41,590
you get we scale it all the way down to

00:07:39,970 --> 00:07:43,030
small microcontrollers which I'm kind of

00:07:41,590 --> 00:07:45,070
ignoring here other talks here are

00:07:43,030 --> 00:07:47,500
covering a lot of that kind of space I'm

00:07:45,070 --> 00:07:49,840
moving next level up so we kind of the M

00:07:47,500 --> 00:07:52,060
cortex-m things are the embedded space

00:07:49,840 --> 00:07:55,090
like microcontrollers and the a-level

00:07:52,060 --> 00:07:57,400
processors are the more powerful ones so

00:07:55,090 --> 00:07:59,550
I'll be talking about those and the

00:07:57,400 --> 00:08:01,780
interesting thing where people really

00:07:59,550 --> 00:08:03,790
began to discover how good the design

00:08:01,780 --> 00:08:06,220
was in terms of power consumption the

00:08:03,790 --> 00:08:08,170
very first ARM chip worked and they

00:08:06,220 --> 00:08:09,850
didn't connect the power they literally

00:08:08,170 --> 00:08:12,550
had it not connected they forgot about

00:08:09,850 --> 00:08:16,240
it and it worked was working through

00:08:12,550 --> 00:08:18,580
leakage from the debug circuitry so that

00:08:16,240 --> 00:08:21,010
was actually pretty impressive um and so

00:08:18,580 --> 00:08:22,240
it's one of the reasons why people like

00:08:21,010 --> 00:08:25,060
to use arm because know you have a

00:08:22,240 --> 00:08:28,870
battery power consumption matters it

00:08:25,060 --> 00:08:31,060
really matters so not only that we don't

00:08:28,870 --> 00:08:33,820
it's so if you buy a chip from Intel or

00:08:31,060 --> 00:08:35,350
AMD or the big names you know you get

00:08:33,820 --> 00:08:38,140
that chip you get everything with it to

00:08:35,350 --> 00:08:40,180
that we don't do that we license the

00:08:38,140 --> 00:08:41,890
intellectual property and then someone

00:08:40,180 --> 00:08:43,540
can make a chip a custom chip that does

00:08:41,890 --> 00:08:46,510
all sorts of weird things and they don't

00:08:43,540 --> 00:08:47,860
have to go design a CPU themselves some

00:08:46,510 --> 00:08:49,930
of our customers had actually done this

00:08:47,860 --> 00:08:51,160
they built their own CPUs they did their

00:08:49,930 --> 00:08:53,050
own instruction sets and even do

00:08:51,160 --> 00:08:55,360
their own being utils and GGC and other

00:08:53,050 --> 00:08:56,949
support and the one at summer I've heard

00:08:55,360 --> 00:08:58,959
of swear off it were doing it again

00:08:56,949 --> 00:09:01,120
because it cost them so much engineering

00:08:58,959 --> 00:09:03,069
time and effort and the performance was

00:09:01,120 --> 00:09:04,569
actually much lower than they could get

00:09:03,069 --> 00:09:07,829
so that's why they come to us

00:09:04,569 --> 00:09:10,149
unfortunately there's not open source I

00:09:07,829 --> 00:09:12,610
there are good business reasons for that

00:09:10,149 --> 00:09:13,810
because if we did make it open source we

00:09:12,610 --> 00:09:16,149
wouldn't exist as the company in the

00:09:13,810 --> 00:09:17,860
ecosystem would not exist because the

00:09:16,149 --> 00:09:19,420
kinds of customers we have a big enough

00:09:17,860 --> 00:09:19,930
they would just take it and build it

00:09:19,420 --> 00:09:24,339
themselves

00:09:19,930 --> 00:09:26,620
um it's a different area if the average

00:09:24,339 --> 00:09:28,540
person here was a chip designer who

00:09:26,620 --> 00:09:30,610
could sab chips it'll be different

00:09:28,540 --> 00:09:32,230
because the barrier of inter is very low

00:09:30,610 --> 00:09:35,100
the thing is the barrier of entry to

00:09:32,230 --> 00:09:37,839
build chips is Jay all chips that are

00:09:35,100 --> 00:09:41,620
modern and competitive with other things

00:09:37,839 --> 00:09:43,149
out there at that same level is tens or

00:09:41,620 --> 00:09:46,029
hundreds of millions or billions of

00:09:43,149 --> 00:09:48,430
dollars to do a chip run and most people

00:09:46,029 --> 00:09:50,560
don't have it so that's our customer

00:09:48,430 --> 00:09:52,870
base for that it's different but a lot

00:09:50,560 --> 00:09:54,970
of the users of this architecture open

00:09:52,870 --> 00:09:56,350
source in fact we pretty much exists the

00:09:54,970 --> 00:09:59,649
course of open source so it's very

00:09:56,350 --> 00:10:01,180
important to us now our customers like

00:09:59,649 --> 00:10:02,680
this because they can go and take just

00:10:01,180 --> 00:10:04,360
one piece and do everything else they

00:10:02,680 --> 00:10:06,519
want they can build the things they care

00:10:04,360 --> 00:10:07,810
about things are important to them and

00:10:06,519 --> 00:10:09,279
they just have a controlling unit

00:10:07,810 --> 00:10:11,829
attached to it it makes your lives

00:10:09,279 --> 00:10:14,050
really easy and they generally tend to

00:10:11,829 --> 00:10:15,459
have much lower costs as a result of

00:10:14,050 --> 00:10:18,910
this so they're all really happy about

00:10:15,459 --> 00:10:21,040
that so one of the boards everyone knows

00:10:18,910 --> 00:10:24,339
about raspberry pie who he is not heard

00:10:21,040 --> 00:10:28,209
about the raspberry pie Oh Shh shut up

00:10:24,339 --> 00:10:31,509
Amy okay you've all heard about that the

00:10:28,209 --> 00:10:34,540
latest one is Roger 4 pi 3 or 3 B+ I

00:10:31,509 --> 00:10:37,509
think now um the one I have which is bit

00:10:34,540 --> 00:10:41,259
old raspberry 3 is it's not a bad device

00:10:37,509 --> 00:10:44,589
not exactly fast but it's not bad you

00:10:41,259 --> 00:10:46,720
get like a quad-core 1.2 gigahertz a

00:10:44,589 --> 00:10:50,620
these a 53 now a lot of people get

00:10:46,720 --> 00:10:53,259
mystified by this a 53 a 71 a 9 a 11 a

00:10:50,620 --> 00:10:55,509
15 a 7 trust me I do too

00:10:53,259 --> 00:10:58,779
no one really totally understands it

00:10:55,509 --> 00:11:00,370
properly but the a 53 is a relatively

00:10:58,779 --> 00:11:03,220
old core which means the number

00:11:00,370 --> 00:11:04,660
instructions per CPU cycle is not as

00:11:03,220 --> 00:11:06,580
high as a new one so the ACE

00:11:04,660 --> 00:11:09,520
to his nearest 80 70 trees we'll get a

00:11:06,580 --> 00:11:12,400
thermal instructions per clock so it's

00:11:09,520 --> 00:11:16,990
an older slower design but still not bad

00:11:12,400 --> 00:11:18,550
it's fairly decent so you get that you

00:11:16,990 --> 00:11:20,890
get now Bluetooth and Wi-Fi on board

00:11:18,550 --> 00:11:22,750
with the Raspberry Pi threes etc it for

00:11:20,890 --> 00:11:24,360
a bunch of GPIO so you get an Ethernet

00:11:22,750 --> 00:11:27,490
port that claims to be gigabit

00:11:24,360 --> 00:11:29,980
theoretically but it's hooked up by USB

00:11:27,490 --> 00:11:32,500
2 so that was a really great idea but no

00:11:29,980 --> 00:11:34,060
you might get gigabit out of it but it's

00:11:32,500 --> 00:11:36,670
better than hundred megabits so you

00:11:34,060 --> 00:11:40,870
might get 200 maybe 300 megabit

00:11:36,670 --> 00:11:43,330
so but all of it not bad for 35 bucks

00:11:40,870 --> 00:11:55,060
oh that's US dollars sorry not Singapore

00:11:43,330 --> 00:11:56,320
dollars um-hmm 60 Wow Wow God you can

00:11:55,060 --> 00:11:58,780
actually get it for less than that

00:11:56,320 --> 00:12:00,940
outside of so you know less than 35

00:11:58,780 --> 00:12:03,070
bucks outside I feel sorry for you guys

00:12:00,940 --> 00:12:05,980
um but it's still the cheapest the

00:12:03,070 --> 00:12:08,410
others are gonna cost more um this is

00:12:05,980 --> 00:12:11,410
actually one of the real cheap ones it's

00:12:08,410 --> 00:12:13,510
13 bucks now realistically when you get

00:12:11,410 --> 00:12:16,600
down to this level you can go and get

00:12:13,510 --> 00:12:17,980
yourself an MCU and a board with a micro

00:12:16,600 --> 00:12:19,360
controller on it's gonna cost you about

00:12:17,980 --> 00:12:21,340
the same at the end of the day when you

00:12:19,360 --> 00:12:23,320
get to this level the question is do you

00:12:21,340 --> 00:12:25,720
really want to have incredibly low power

00:12:23,320 --> 00:12:26,140
and you have no compute requirements MCU

00:12:25,720 --> 00:12:28,210
is good

00:12:26,140 --> 00:12:29,560
that's exactly what you want the moment

00:12:28,210 --> 00:12:30,940
you start having a pretty reasonable

00:12:29,560 --> 00:12:33,370
amount of compute requirements you've

00:12:30,940 --> 00:12:41,500
got to go up what the hell wow I know

00:12:33,370 --> 00:12:42,940
what I did there we go huh no it's no

00:12:41,500 --> 00:12:44,140
it's my um I'm using my mouse and the

00:12:42,940 --> 00:12:49,900
mouse went on to the edge of my screen

00:12:44,140 --> 00:12:52,060
which might aid screen flip or so so

00:12:49,900 --> 00:12:54,340
this would be probably one of those

00:12:52,060 --> 00:12:57,190
boards is a few in the same ballpark as

00:12:54,340 --> 00:13:00,040
this where you can get and what we call

00:12:57,190 --> 00:13:02,710
an a class level of processor so it's

00:13:00,040 --> 00:13:04,810
reasonable it can actually it's kind of

00:13:02,710 --> 00:13:07,180
maybe a PC from 10 years ago kind of

00:13:04,810 --> 00:13:09,130
thing and it can do a fair bit of stuff

00:13:07,180 --> 00:13:12,370
and it's like 13 bucks and it's small

00:13:09,130 --> 00:13:14,050
that's pretty cool you could get like

00:13:12,370 --> 00:13:17,740
something like Raspberry Pi 0 5 bucks

00:13:14,050 --> 00:13:18,590
this is actually not realistic it's 5

00:13:17,740 --> 00:13:21,890
bucks

00:13:18,590 --> 00:13:24,080
to get a lot of components for free and

00:13:21,890 --> 00:13:26,029
that is why it's so cheap but if you

00:13:24,080 --> 00:13:28,310
want to build something and you don't

00:13:26,029 --> 00:13:32,570
need a lot of compute it's also a

00:13:28,310 --> 00:13:34,310
single-core um compute is okay it's

00:13:32,570 --> 00:13:36,380
still armed v6 which is not as good as

00:13:34,310 --> 00:13:37,850
an p7 there was a big leap from version

00:13:36,380 --> 00:13:40,880
six of our instruction sets of version

00:13:37,850 --> 00:13:45,830
seven especially with things like a fuse

00:13:40,880 --> 00:13:49,010
and neon which is the Cindy MMX sse kind

00:13:45,830 --> 00:13:50,330
of thing and this is pretty good so five

00:13:49,010 --> 00:13:53,779
bucks you can't go wrong if you're

00:13:50,330 --> 00:13:55,550
trying to build robots or random stuff

00:13:53,779 --> 00:13:56,690
where you just need a computing and not

00:13:55,550 --> 00:13:57,800
a lot of it and you want to stuff

00:13:56,690 --> 00:13:59,270
something in something like that for

00:13:57,800 --> 00:14:01,430
five bucks it's pretty good you can make

00:13:59,270 --> 00:14:06,080
commercial products in small volumes

00:14:01,430 --> 00:14:09,070
with this so yeah the low-end this is

00:14:06,080 --> 00:14:11,300
all low power or relatively low power

00:14:09,070 --> 00:14:14,650
relative low compute you can get a

00:14:11,300 --> 00:14:17,360
decent number of deployments out of it

00:14:14,650 --> 00:14:20,750
and they generally physically fairly

00:14:17,360 --> 00:14:22,970
small from credit card size down so not

00:14:20,750 --> 00:14:25,430
too bad now we can get up to the

00:14:22,970 --> 00:14:27,950
slightly higher rate at about five

00:14:25,430 --> 00:14:30,740
hundred dollars which is about a PC you

00:14:27,950 --> 00:14:33,500
can get one of these babies one of these

00:14:30,740 --> 00:14:35,240
babies has in fact actually I think

00:14:33,500 --> 00:14:36,589
that's not gigabit it's not it's

00:14:35,240 --> 00:14:39,680
actually two-and-a-half gigabit and

00:14:36,589 --> 00:14:42,410
several ten gigabit ports we're gonna do

00:14:39,680 --> 00:14:47,240
networking stuff this is the baby these

00:14:42,410 --> 00:14:48,890
are key things there are fiber fiber

00:14:47,240 --> 00:14:50,570
port things so if you want to have

00:14:48,890 --> 00:14:52,130
something really powerful that's pretty

00:14:50,570 --> 00:14:54,350
good and that's a quad core a seventy

00:14:52,130 --> 00:14:56,240
three that would be drastically more

00:14:54,350 --> 00:14:58,490
powerful in the Raspberry Pi quad quad

00:14:56,240 --> 00:15:02,750
core and it is clocked much higher you

00:14:58,490 --> 00:15:05,600
can stick normal PC Ram into it by dim

00:15:02,750 --> 00:15:07,010
put it in ddr4 just stick it in so I

00:15:05,600 --> 00:15:09,080
have one of these at my desk at work

00:15:07,010 --> 00:15:13,040
it's got 16 gigabytes of memory in it um

00:15:09,080 --> 00:15:14,990
you just buy a mini ITX case a normal

00:15:13,040 --> 00:15:17,300
ATX power supply or whatever comes with

00:15:14,990 --> 00:15:19,310
that plug it in go ahead and you have

00:15:17,300 --> 00:15:21,560
one of these devices the cool thing is

00:15:19,310 --> 00:15:23,180
you can lock it away a cabinet and it

00:15:21,560 --> 00:15:25,339
actually doesn't consume that much power

00:15:23,180 --> 00:15:27,650
and you could do a lot of fun stuff

00:15:25,339 --> 00:15:29,870
that's got some it's got three sacker

00:15:27,650 --> 00:15:31,449
ports on it so you can make a big fat

00:15:29,870 --> 00:15:34,660
file server out of it

00:15:31,449 --> 00:15:36,429
it's not too bad and performance is

00:15:34,660 --> 00:15:39,100
pretty reasonable in this kind of ball

00:15:36,429 --> 00:15:41,470
pockets it's probably getting around the

00:15:39,100 --> 00:15:43,989
same performances Intel for a similar

00:15:41,470 --> 00:15:45,639
price considering you bought CPU board

00:15:43,989 --> 00:15:47,999
and all that networking stuff on board

00:15:45,639 --> 00:15:50,350
try and get anything it like a PCI

00:15:47,999 --> 00:15:52,059
Ethernet card with all those features on

00:15:50,350 --> 00:15:53,919
it for an Intel box and you probably end

00:15:52,059 --> 00:15:55,119
up paying more by the time you get the

00:15:53,919 --> 00:15:57,790
motherboard and CPU and all the other

00:15:55,119 --> 00:16:00,279
bits and pieces so that's pretty good

00:15:57,790 --> 00:16:01,629
that's something to the high-end with

00:16:00,279 --> 00:16:03,759
really really really really really

00:16:01,629 --> 00:16:05,739
high-end I've got one of these at my

00:16:03,759 --> 00:16:09,160
desk to it work you're terrific six

00:16:05,739 --> 00:16:10,869
cores in it you will get the one I have

00:16:09,160 --> 00:16:14,439
has 32 gigabytes I know other people

00:16:10,869 --> 00:16:16,989
have it with like 128 256 512 gigabytes

00:16:14,439 --> 00:16:18,869
of memory etc etc in fact one of the top

00:16:16,989 --> 00:16:21,040
500 supercomputers is built out of these

00:16:18,869 --> 00:16:24,609
they are not bad they're pretty path

00:16:21,040 --> 00:16:28,720
they have addiction umber of PCIe ports

00:16:24,609 --> 00:16:31,449
and lanes it is a full on like top in

00:16:28,720 --> 00:16:32,829
xeon level server chip and it's arm

00:16:31,449 --> 00:16:34,779
architecture but it's the same thing

00:16:32,829 --> 00:16:37,299
that runs on your phone architecture

00:16:34,779 --> 00:16:39,339
wise the same software can run and even

00:16:37,299 --> 00:16:43,539
below that even to little small babies

00:16:39,339 --> 00:16:45,489
that cost 13 bucks or less or so it's

00:16:43,539 --> 00:16:46,839
like not sure with this doesn't run

00:16:45,489 --> 00:16:50,709
through two-bit out my instructions it's

00:16:46,839 --> 00:16:53,949
only 64-bit so you can't run the old

00:16:50,709 --> 00:16:56,679
package to recompile so that's pretty

00:16:53,949 --> 00:16:58,299
good but generally the range I'm gonna

00:16:56,679 --> 00:17:00,609
be looking at is the 32 hundred dollar

00:16:58,299 --> 00:17:03,750
range approximately where you can get

00:17:00,609 --> 00:17:06,429
something that is relatively speedy so

00:17:03,750 --> 00:17:07,839
unless you have a very demanding task

00:17:06,429 --> 00:17:10,240
you don't have to ever worry about

00:17:07,839 --> 00:17:16,059
having enough computer or memory and

00:17:10,240 --> 00:17:17,919
separate etc there are low-end pcs which

00:17:16,059 --> 00:17:20,500
are in fact slower than a lot of these

00:17:17,919 --> 00:17:22,569
boards and it more expensive and use

00:17:20,500 --> 00:17:24,939
more memory you can get RAM most of

00:17:22,569 --> 00:17:27,389
those chips at these levels are limited

00:17:24,939 --> 00:17:29,769
to 4 gig of memory it's by design

00:17:27,389 --> 00:17:32,200
because just adding more memory lanes

00:17:29,769 --> 00:17:34,000
like lines literally just costs more

00:17:32,200 --> 00:17:37,779
money in terms of more transistors more

00:17:34,000 --> 00:17:41,640
complexity or more money more die space

00:17:37,779 --> 00:17:43,710
to build the thing etc etc

00:17:41,640 --> 00:17:45,720
most of them support some form of fast

00:17:43,710 --> 00:17:48,929
storage except the Raspberry Pi it's

00:17:45,720 --> 00:17:50,790
only got the SD card the of many of them

00:17:48,929 --> 00:17:52,350
support emmc chips they've got a little

00:17:50,790 --> 00:17:59,640
plug on ones or even come with one on

00:17:52,350 --> 00:18:00,780
board what else so yeah oh and you can

00:17:59,640 --> 00:18:03,090
get the pine book we're talking about

00:18:00,780 --> 00:18:05,340
this early just really started which is

00:18:03,090 --> 00:18:06,780
a full laptop with this in the old pine

00:18:05,340 --> 00:18:10,110
book which has a two gig of ram respond

00:18:06,780 --> 00:18:12,740
all winner 64 is $99 was last time I

00:18:10,110 --> 00:18:17,040
looked so for under a hundred US dollars

00:18:12,740 --> 00:18:18,570
outside of Singapore and there's a new

00:18:17,040 --> 00:18:21,510
one coming which is fine book pro which

00:18:18,570 --> 00:18:23,340
will be $1.99 and that'll have the an

00:18:21,510 --> 00:18:25,890
upgraded chip basically with four gig of

00:18:23,340 --> 00:18:30,570
ram so interesting and some of them even

00:18:25,890 --> 00:18:33,270
have PCIe so my thunder x server at work

00:18:30,570 --> 00:18:36,240
has a Radeon card stuck in it like I use

00:18:33,270 --> 00:18:39,630
it just like a desk on it Latrese is the

00:18:36,240 --> 00:18:42,150
open source drivers so for a little bit

00:18:39,630 --> 00:18:43,590
more than the baseline you get like the

00:18:42,150 --> 00:18:45,720
really low end you get a bit more and

00:18:43,590 --> 00:18:47,190
the more you pay the more you get so you

00:18:45,720 --> 00:18:49,410
just have to look around and see what

00:18:47,190 --> 00:18:51,450
you want so these are the three boards

00:18:49,410 --> 00:18:54,000
I'm mostly gonna be looking at here the

00:18:51,450 --> 00:18:55,950
Raspberry Pi 3 which everyone knows so

00:18:54,000 --> 00:18:57,929
it's a base line which you can be

00:18:55,950 --> 00:19:00,330
familiar with the Odroid xu 4 which is

00:18:57,929 --> 00:19:03,120
actually almost pretty much dead they're

00:19:00,330 --> 00:19:05,419
kind of finished factually Odroid Xu 3

00:19:03,120 --> 00:19:07,590
here which is that it's exactly the same

00:19:05,419 --> 00:19:09,030
chip and everything else it just has

00:19:07,590 --> 00:19:12,030
less ports attached it was a more

00:19:09,030 --> 00:19:14,940
expensive version of it which came out

00:19:12,030 --> 00:19:16,470
before the x4 and the rock pro 64 which

00:19:14,940 --> 00:19:18,570
is an interesting one there are an

00:19:16,470 --> 00:19:22,440
absolute ton of boards coming out right

00:19:18,570 --> 00:19:24,870
now which have the rockchip $33.99 which

00:19:22,440 --> 00:19:27,000
is their top-level chip this actually

00:19:24,870 --> 00:19:30,990
shipped in a bunch of Chromebooks last

00:19:27,000 --> 00:19:34,110
year and I think year before too so this

00:19:30,990 --> 00:19:36,480
is actually pretty decent and that one

00:19:34,110 --> 00:19:38,010
is six cores you can do up to four gig

00:19:36,480 --> 00:19:39,480
of ram that board actually has four

00:19:38,010 --> 00:19:43,049
there's a two gig version available yes

00:19:39,480 --> 00:19:47,610
for the MMC and usual micro SD the usual

00:19:43,049 --> 00:19:50,669
GPIO is you know it'll do 4k the other

00:19:47,610 --> 00:19:53,049
two boards above will only do 1080p so

00:19:50,669 --> 00:19:56,789
you can do 4k on that I don't actual

00:19:53,049 --> 00:20:00,009
for KI run at a time 1440p at home and

00:19:56,789 --> 00:20:03,220
it has a PCIe slow which I have it to

00:20:00,009 --> 00:20:06,730
use but I have used them on other

00:20:03,220 --> 00:20:09,190
devices and it's got a Mali GPU which we

00:20:06,730 --> 00:20:11,110
will not talk about much and a whole

00:20:09,190 --> 00:20:13,419
bunch of i/o lots of USB stuff on it

00:20:11,110 --> 00:20:15,129
it's got a USB C and another three USB

00:20:13,419 --> 00:20:16,779
ports as well I think one of the USB

00:20:15,129 --> 00:20:20,889
ports is USB 3 you of course you species

00:20:16,779 --> 00:20:23,200
must be free but whatever and to have to

00:20:20,889 --> 00:20:24,700
be 2 ports and it's got Gigabit Ethernet

00:20:23,200 --> 00:20:27,269
that actually works as Gigabit Ethernet

00:20:24,700 --> 00:20:27,269
yay

00:20:27,369 --> 00:20:32,019
so in terms of performance these are

00:20:30,549 --> 00:20:33,999
some numbers from some of the systems I

00:20:32,019 --> 00:20:36,730
have I was using suspension here it's a

00:20:33,999 --> 00:20:38,889
simple thing um it just really sees how

00:20:36,730 --> 00:20:41,889
you CPU goes and of course Raspberry Pi

00:20:38,889 --> 00:20:43,210
3 is at the bottom there with 93 but

00:20:41,889 --> 00:20:46,539
these are some we have an intel atoms

00:20:43,210 --> 00:20:49,960
getting 874 there mind you the internet

00:20:46,539 --> 00:20:51,909
that's a quad core and radical so the

00:20:49,960 --> 00:20:54,039
Intel Atom that's one of the top end

00:20:51,909 --> 00:20:56,109
items in fact it's the same one I'm

00:20:54,039 --> 00:20:58,899
Isha's in your little box there that you

00:20:56,109 --> 00:21:03,190
have in front of you so it gets about

00:20:58,899 --> 00:21:07,269
874 and of course you've got the higher

00:21:03,190 --> 00:21:08,980
in details and i7 and 850 850 and a 770

00:21:07,269 --> 00:21:10,600
came in to the desktop and of course

00:21:08,980 --> 00:21:13,869
they do better you start looking at the

00:21:10,600 --> 00:21:16,389
boards the Odroid xu4 yes a lot faster

00:21:13,869 --> 00:21:18,759
than the the Raspberry Pi 3

00:21:16,389 --> 00:21:22,419
interestingly enough the CPU on that is

00:21:18,759 --> 00:21:24,879
older much older design it's an a 7 plus

00:21:22,419 --> 00:21:28,330
8 15 but it has eight cores instead of

00:21:24,879 --> 00:21:31,269
four so it's got four a 15 for a a

00:21:28,330 --> 00:21:32,080
seventh the raspberry people show you

00:21:31,269 --> 00:21:35,559
the Odroid

00:21:32,080 --> 00:21:37,600
is using the Samsung Exynos chip and one

00:21:35,559 --> 00:21:39,460
of the reasons is faster Samsung simply

00:21:37,600 --> 00:21:41,859
just does a better job of integrating it

00:21:39,460 --> 00:21:43,779
with memory bus and everything else if

00:21:41,859 --> 00:21:48,249
you didn't know the Raspberry Pi 3 is

00:21:43,779 --> 00:21:50,679
Broadcom chip was not designed to be a

00:21:48,249 --> 00:21:52,389
chip to go and put into products or even

00:21:50,679 --> 00:21:55,480
phones or anything like that it was a

00:21:52,389 --> 00:21:58,539
test chip it started life as a test chip

00:21:55,480 --> 00:22:00,129
for their GPU so they it has had a lot

00:21:58,539 --> 00:22:01,419
less effort put into it that's one of

00:22:00,129 --> 00:22:03,330
the reasons why it doesn't perform as

00:22:01,419 --> 00:22:05,580
well

00:22:03,330 --> 00:22:11,040
in the Rockford 64 is action that's

00:22:05,580 --> 00:22:13,980
actually a head of like that atom the

00:22:11,040 --> 00:22:16,890
highest end at a mental chip is by now

00:22:13,980 --> 00:22:19,890
in terms of our CPU growth and of course

00:22:16,890 --> 00:22:21,390
the founder x2 is the head of all curve

00:22:19,890 --> 00:22:23,280
because it's a full workstation thing

00:22:21,390 --> 00:22:25,800
but the range of performance can vary

00:22:23,280 --> 00:22:27,060
quite wildly depend on what you pick so

00:22:25,800 --> 00:22:28,380
of course the less you pay the less you

00:22:27,060 --> 00:22:31,860
get the more you pay the more you get

00:22:28,380 --> 00:22:34,110
okay but they are getting comparable to

00:22:31,860 --> 00:22:36,180
Intel systems low to mid range Intel

00:22:34,110 --> 00:22:43,080
systems they're about the same and you

00:22:36,180 --> 00:22:45,060
don't so that hay will just give you

00:22:43,080 --> 00:22:46,680
that so they're about the same bullpup

00:22:45,060 --> 00:22:49,950
it's low to mid range Intel system so if

00:22:46,680 --> 00:22:51,990
you can do what you do on maybe a laptop

00:22:49,950 --> 00:22:53,670
that's a year or two old or three old

00:22:51,990 --> 00:22:55,560
it's not a top of line thing like a

00:22:53,670 --> 00:23:00,360
mid-range thing you'd probably get that

00:22:55,560 --> 00:23:03,390
out of the boards these days so yeah I'm

00:23:00,360 --> 00:23:05,970
so much further ahead um one thing you

00:23:03,390 --> 00:23:08,160
need to remember about this arm tend to

00:23:05,970 --> 00:23:10,440
be heavier in core count traditionally

00:23:08,160 --> 00:23:11,730
asterisks until it finally started

00:23:10,440 --> 00:23:14,610
changing their ways and adding a lot

00:23:11,730 --> 00:23:16,920
more cause these days that's a new trend

00:23:14,610 --> 00:23:19,380
for them but if you're gonna write any

00:23:16,920 --> 00:23:20,760
code definitely consider making it

00:23:19,380 --> 00:23:21,630
heavily multi-threaded because that's

00:23:20,760 --> 00:23:23,700
the way you're gonna get the most

00:23:21,630 --> 00:23:26,190
performance out of it and the thinking

00:23:23,700 --> 00:23:27,420
that the 256 cores of my Condor x2 is

00:23:26,190 --> 00:23:29,100
the kind of thing that makes you

00:23:27,420 --> 00:23:31,710
reconsider this very heavily you know

00:23:29,100 --> 00:23:34,890
how am I going to use that you start

00:23:31,710 --> 00:23:36,360
wondering it's very odd um some of these

00:23:34,890 --> 00:23:38,250
actually you can use as a full desktop

00:23:36,360 --> 00:23:38,730
um they are fast enough for day-to-day

00:23:38,250 --> 00:23:42,120
use

00:23:38,730 --> 00:23:44,180
so the the rock pro 64 probably could be

00:23:42,120 --> 00:23:46,770
used as a desktop um

00:23:44,180 --> 00:23:48,840
the others is really low in minimal ones

00:23:46,770 --> 00:23:52,500
it definitely can can work and you can

00:23:48,840 --> 00:23:54,270
drive 4k screens as said before um you

00:23:52,500 --> 00:23:56,070
can run all the normal debug tools you

00:23:54,270 --> 00:24:00,020
can use Val grinds if you're doing

00:23:56,070 --> 00:24:03,210
native stuff Python it doesn't matter

00:24:00,020 --> 00:24:08,640
gdb compilers and everything run so

00:24:03,210 --> 00:24:11,160
treat it just like any other machine so

00:24:08,640 --> 00:24:13,260
yeah you can you can use these for

00:24:11,160 --> 00:24:15,990
pretty much anything in life anything

00:24:13,260 --> 00:24:18,570
from a workstation or server smokes

00:24:15,990 --> 00:24:20,310
running home through to running some

00:24:18,570 --> 00:24:22,920
little project of yours robots or

00:24:20,310 --> 00:24:26,940
whatever they run regular links

00:24:22,920 --> 00:24:27,660
distributions so as long as you're happy

00:24:26,940 --> 00:24:30,390
with Linux

00:24:27,660 --> 00:24:31,620
you're good if you want FreeBSD or

00:24:30,390 --> 00:24:33,240
something like that you might have a

00:24:31,620 --> 00:24:36,300
much little more limited choice I didn't

00:24:33,240 --> 00:24:38,670
even bother looking because it's really

00:24:36,300 --> 00:24:40,230
that limited so I wouldn't be surprised

00:24:38,670 --> 00:24:43,530
that there was a FreeBSD for off the

00:24:40,230 --> 00:24:45,060
Raspberry Pi by now but yet all the

00:24:43,530 --> 00:24:47,580
regular stuff is there you want to add

00:24:45,060 --> 00:24:52,440
software to it cooker apt-get install or

00:24:47,580 --> 00:24:54,390
man minus s whatever all yum

00:24:52,440 --> 00:24:58,220
no no you replaced by something else now

00:24:54,390 --> 00:25:00,450
whatever it is hmm Dean if that was it

00:24:58,220 --> 00:25:06,150
they keep you keeps changing all the

00:25:00,450 --> 00:25:08,190
time um can't keep up so use a compiled

00:25:06,150 --> 00:25:11,790
stuff on these devices for them it's

00:25:08,190 --> 00:25:13,380
really really easy just be aware there

00:25:11,790 --> 00:25:15,870
are certain projects so if you sit there

00:25:13,380 --> 00:25:17,280
and go again let's run gen 2 on this let

00:25:15,870 --> 00:25:19,020
me build a workstation out of it that

00:25:17,280 --> 00:25:22,020
will eventually at some point go ooh

00:25:19,020 --> 00:25:25,500
let me build WebKit slash Chrome which

00:25:22,020 --> 00:25:26,820
will then fail of course at best you

00:25:25,500 --> 00:25:28,710
probably only have 4 gigabytes of memory

00:25:26,820 --> 00:25:30,630
on your board and these things need a

00:25:28,710 --> 00:25:34,590
lot more than 4 gigabytes just to link

00:25:30,630 --> 00:25:36,240
something be very very careful the one

00:25:34,590 --> 00:25:38,730
you really run into even if it's a

00:25:36,240 --> 00:25:40,980
normal project that can compile is you

00:25:38,730 --> 00:25:43,590
have four or six or eight cores and it

00:25:40,980 --> 00:25:45,540
goes especially if you do make - J's or

00:25:43,590 --> 00:25:47,280
you use ninja so using me Sahn where

00:25:45,540 --> 00:25:48,900
ninja Auto looks at the number of cores

00:25:47,280 --> 00:25:51,870
you have and does that parallel the

00:25:48,900 --> 00:25:54,330
problem with that is then it uses that

00:25:51,870 --> 00:25:55,500
much more memory so it's in time so if

00:25:54,330 --> 00:25:56,660
it's eight equals the same times as much

00:25:55,500 --> 00:25:59,550
memory to do the same compile

00:25:56,660 --> 00:26:02,100
theoretically eight times fast but

00:25:59,550 --> 00:26:05,010
that's when you run out of RAM so be

00:26:02,100 --> 00:26:07,950
careful about that you can force it to

00:26:05,010 --> 00:26:09,540
use less cores so if you builds

00:26:07,950 --> 00:26:11,790
mysteriously fail in the middle just go

00:26:09,540 --> 00:26:16,530
build fail with no error message at all

00:26:11,790 --> 00:26:18,240
it's probably cause of that or you can

00:26:16,530 --> 00:26:20,280
use the higher end devices we can stick

00:26:18,240 --> 00:26:22,680
much more memory on how to do that as

00:26:20,280 --> 00:26:26,490
well Oh what are we going that was

00:26:22,680 --> 00:26:28,500
backwards there we go so in terms of OS

00:26:26,490 --> 00:26:29,430
support the Raspberry Pi is by far the

00:26:28,500 --> 00:26:32,640
best he gets fine

00:26:29,430 --> 00:26:34,500
all stars that's very well the Odroid

00:26:32,640 --> 00:26:37,260
because it's relatively old like the

00:26:34,500 --> 00:26:39,420
Raspberry Pi as well but it was quite

00:26:37,260 --> 00:26:41,790
popular as one much more powerful boards

00:26:39,420 --> 00:26:44,220
at the time it actually had a pretty

00:26:41,790 --> 00:26:46,410
good support and the rock for 64 is not

00:26:44,220 --> 00:26:48,480
as good these day in res the others I'd

00:26:46,410 --> 00:26:50,430
also much newer but it does have a

00:26:48,480 --> 00:26:52,500
reasonable number so there's Debian

00:26:50,430 --> 00:26:55,230
other there's at least Debian there was

00:26:52,500 --> 00:26:57,450
I think a table unto almost the same

00:26:55,230 --> 00:26:59,070
thing um the arch guys are working on

00:26:57,450 --> 00:27:00,750
something working on a port at the

00:26:59,070 --> 00:27:02,640
moment and there's a few others

00:27:00,750 --> 00:27:05,490
but there's a list on the page if you

00:27:02,640 --> 00:27:07,350
google for it so it's pretty good in

00:27:05,490 --> 00:27:09,060
terms of hardware support that means all

00:27:07,350 --> 00:27:10,620
of the hardware the drivers are there

00:27:09,060 --> 00:27:12,560
and everything works the Raspberry Pi is

00:27:10,620 --> 00:27:16,710
generally streets ahead of everyone

00:27:12,560 --> 00:27:21,270
everything works the GPU works because

00:27:16,710 --> 00:27:23,430
they finally made it work they didn't

00:27:21,270 --> 00:27:25,710
actually really release specs on how to

00:27:23,430 --> 00:27:27,510
power the GPU that's what really happens

00:27:25,710 --> 00:27:29,640
is you have four CPU cores in the

00:27:27,510 --> 00:27:31,110
Raspberry Pi you have another arm core

00:27:29,640 --> 00:27:33,540
sitting it to the GPU which you never

00:27:31,110 --> 00:27:35,610
see in you can access and that's running

00:27:33,540 --> 00:27:38,460
a bunch of firmware which is then

00:27:35,610 --> 00:27:40,140
driving with GPU on that side so really

00:27:38,460 --> 00:27:42,780
it's your forearm core thing that runs

00:27:40,140 --> 00:27:44,640
your Linux system talking I'd be seeing

00:27:42,780 --> 00:27:47,930
over to another arm core which controls

00:27:44,640 --> 00:27:51,720
the UM the GPU cluster over there so

00:27:47,930 --> 00:27:53,460
from the point of view of Linux and user

00:27:51,720 --> 00:27:55,440
space and the kernels basically it looks

00:27:53,460 --> 00:27:56,910
like you're driving a GPU but you're

00:27:55,440 --> 00:28:00,690
actually not you're just driving another

00:27:56,910 --> 00:28:05,160
machine over there but it works that

00:28:00,690 --> 00:28:07,500
works really well um the Odroid is not

00:28:05,160 --> 00:28:09,720
as good a lot of hardware does work but

00:28:07,500 --> 00:28:12,390
the GPU does not unless you get the

00:28:09,720 --> 00:28:14,280
binary drivers and i'll come over this

00:28:12,390 --> 00:28:18,180
wall or you start looking at pan frost

00:28:14,280 --> 00:28:21,180
pan frost is the new reverse engineer

00:28:18,180 --> 00:28:25,110
driver for moly things above the 400 so

00:28:21,180 --> 00:28:27,150
400s so the 600 700 800 range they call

00:28:25,110 --> 00:28:29,160
Midgard and then beyond that's actually

00:28:27,150 --> 00:28:32,520
Bifrost yes we have all these weird code

00:28:29,160 --> 00:28:37,380
names of GPUs don't ask they come from

00:28:32,520 --> 00:28:39,210
Norse mythology and that's reverse

00:28:37,380 --> 00:28:41,730
engineering it and it's not ready for

00:28:39,210 --> 00:28:42,270
primetime yet but it is beginning to

00:28:41,730 --> 00:28:43,330
work

00:28:42,270 --> 00:28:45,070
so if you

00:28:43,330 --> 00:28:47,560
sure there may actually be open source

00:28:45,070 --> 00:28:49,570
driver support for that and the rock

00:28:47,560 --> 00:28:51,580
core 64 is actually not dissimilar to

00:28:49,570 --> 00:28:53,590
the Odroid in this regard the GPU also

00:28:51,580 --> 00:28:55,780
you need binary blobs Rockchip have

00:28:53,590 --> 00:28:57,310
released some the Odroid hard kernel

00:28:55,780 --> 00:29:00,730
people have released some binary blobs

00:28:57,310 --> 00:29:04,180
too but it limits you in your kernel

00:29:00,730 --> 00:29:05,560
upgrades and it kind of makes your

00:29:04,180 --> 00:29:09,130
system a bit of a mess to make sure

00:29:05,560 --> 00:29:11,430
they're there and work but most of the

00:29:09,130 --> 00:29:14,290
other i/o so network

00:29:11,430 --> 00:29:16,690
MMC blah blah blah a lot of that

00:29:14,290 --> 00:29:18,490
actually does work so they pretty good

00:29:16,690 --> 00:29:19,660
so depending how much of the peripherals

00:29:18,490 --> 00:29:27,160
you want working how much performance

00:29:19,660 --> 00:29:29,410
you want figure it out so the question

00:29:27,160 --> 00:29:30,250
that we get asked a lot is about GPUs

00:29:29,410 --> 00:29:31,360
and that's why I don't want to talk

00:29:30,250 --> 00:29:37,090
about earlier because I just want to

00:29:31,360 --> 00:29:39,870
cover here we license the GPU to this

00:29:37,090 --> 00:29:44,350
SOC vendor and the SOC vendor actually

00:29:39,870 --> 00:29:46,120
then needs the software support from us

00:29:44,350 --> 00:29:48,610
which we also license to them they

00:29:46,120 --> 00:29:51,190
actually may make changes to it and it's

00:29:48,610 --> 00:29:53,980
the SOC vendors job to release those

00:29:51,190 --> 00:29:55,540
drivers not us they have to do it as if

00:29:53,980 --> 00:29:58,060
the SOC vendor the person who makes the

00:29:55,540 --> 00:30:00,580
CPU the chip on there doesn't do that

00:29:58,060 --> 00:30:01,630
then we can't go release drivers for you

00:30:00,580 --> 00:30:04,600
they have to do it because that's

00:30:01,630 --> 00:30:08,920
integrate to two bits of their

00:30:04,600 --> 00:30:12,640
associated yes they are closed drivers

00:30:08,920 --> 00:30:15,160
um that's primarily a result of history

00:30:12,640 --> 00:30:19,360
because that's just how it is and the

00:30:15,160 --> 00:30:21,250
fact that 99.999999% of our customer

00:30:19,360 --> 00:30:23,550
base are happy with binary drivers I

00:30:21,250 --> 00:30:25,840
basically do phones tablets etc etc

00:30:23,550 --> 00:30:26,320
they're not screaming for something

00:30:25,840 --> 00:30:32,830
different

00:30:26,320 --> 00:30:35,050
so that's why we do it but some SOC

00:30:32,830 --> 00:30:38,170
vendors will actually use different GPUs

00:30:35,050 --> 00:30:41,020
so the Raspberry Pi uses a different one

00:30:38,170 --> 00:30:43,720
there are those things like the IMX uses

00:30:41,020 --> 00:30:45,430
a Vivante GPU and there are reverse

00:30:43,720 --> 00:30:46,570
engineer drivers for that now that

00:30:45,430 --> 00:30:50,290
worked pretty well the eight 'native

00:30:46,570 --> 00:30:55,120
things there used to be ones with image

00:30:50,290 --> 00:30:56,909
tech GPUs they're basically no drivers

00:30:55,120 --> 00:30:59,320
for those effectively zero

00:30:56,909 --> 00:31:01,210
unless it's already on Android somewhere

00:30:59,320 --> 00:31:04,750
and that's all you'll get so you'll have

00:31:01,210 --> 00:31:06,309
to use that there's also the Qualcomm

00:31:04,750 --> 00:31:08,559
thinks they build their own GPU

00:31:06,309 --> 00:31:11,860
themselves its Snapdragon on the

00:31:08,559 --> 00:31:13,990
Snapdragon and it's the Adreno GPU and

00:31:11,860 --> 00:31:17,230
there are in fact open-source drivers

00:31:13,990 --> 00:31:19,330
freed Reno that work on that and in fact

00:31:17,230 --> 00:31:21,549
actually the latest pixel 3 and 3 phones

00:31:19,330 --> 00:31:23,350
are using the kernel portions of the

00:31:21,549 --> 00:31:25,690
open-source driver not the proprietary

00:31:23,350 --> 00:31:27,220
stuff so products actually shipped with

00:31:25,690 --> 00:31:29,200
it so it's getting to the point where

00:31:27,220 --> 00:31:33,130
they comfortable with it enough to to do

00:31:29,200 --> 00:31:36,870
that yep so I think it covered all that

00:31:33,130 --> 00:31:39,399
um now for GPU performance this is

00:31:36,870 --> 00:31:40,600
measuring the binary blobs in this case

00:31:39,399 --> 00:31:43,090
because and frost isn't really

00:31:40,600 --> 00:31:46,210
measurable yet with GL mark tails and

00:31:43,090 --> 00:31:48,669
doesn't do things correctly um the

00:31:46,210 --> 00:31:51,130
performance here is not quite as good as

00:31:48,669 --> 00:31:53,679
your decent graphics card admittedly I'm

00:31:51,130 --> 00:31:56,110
comparing that to at least on the

00:31:53,679 --> 00:31:58,120
Thunder X that's a discreet card and on

00:31:56,110 --> 00:32:00,730
the i-70 that's a discreet card there

00:31:58,120 --> 00:32:03,880
but even the Intel graphics on the i7

00:32:00,730 --> 00:32:06,070
850 fee-fi 8 550 that's embedded that

00:32:03,880 --> 00:32:07,659
was actually pretty well um at least in

00:32:06,070 --> 00:32:09,490
geomap performance

00:32:07,659 --> 00:32:10,929
this isn't necessarily dead game

00:32:09,490 --> 00:32:12,809
performance which might be much more

00:32:10,929 --> 00:32:15,669
complicated Jill that's pretty simple

00:32:12,809 --> 00:32:18,730
but the GPU is not bad for day-to-day

00:32:15,669 --> 00:32:21,120
stuff you can run a desktop and do all

00:32:18,730 --> 00:32:24,210
those things and simple games can work

00:32:21,120 --> 00:32:27,370
so it's not too bad

00:32:24,210 --> 00:32:29,770
um so how to do development the normal

00:32:27,370 --> 00:32:31,029
way is across compile environment you

00:32:29,770 --> 00:32:33,309
were talking about this in many ways you

00:32:31,029 --> 00:32:35,620
have to install the SDK compile thing

00:32:33,309 --> 00:32:37,809
and go and flash it and get it across

00:32:35,620 --> 00:32:40,890
there use your PC then go use a special

00:32:37,809 --> 00:32:45,039
ID they give you entered studio-x code

00:32:40,890 --> 00:32:46,299
etc etc and some of the IDs hide this

00:32:45,039 --> 00:32:47,620
for you they do a little bits and pieces

00:32:46,299 --> 00:32:50,320
and the operators on the other end

00:32:47,620 --> 00:32:52,029
that's the standard workflow don't do

00:32:50,320 --> 00:32:53,470
that that's just waste your time it

00:32:52,029 --> 00:32:56,169
takes much more time to do it that way

00:32:53,470 --> 00:32:58,000
then just use it as if it's another PC

00:32:56,169 --> 00:32:59,470
install all your development tools on a

00:32:58,000 --> 00:33:01,059
distance all your compiles on it's all

00:32:59,470 --> 00:33:04,029
your debug tools on it I have to get

00:33:01,059 --> 00:33:06,669
install or whatever you want to use you

00:33:04,029 --> 00:33:07,990
can share files with the PC you have NFS

00:33:06,669 --> 00:33:08,710
is a good thing I actually end up using

00:33:07,990 --> 00:33:10,690
rsync

00:33:08,710 --> 00:33:12,190
so what I do if I start doing some stuff

00:33:10,690 --> 00:33:14,500
reward I ask think everything to the

00:33:12,190 --> 00:33:17,470
board now I work there I'm done I think

00:33:14,500 --> 00:33:19,870
it back so I have in my results I think

00:33:17,470 --> 00:33:21,550
is an awesome tool look at it learn it

00:33:19,870 --> 00:33:23,410
there are other file systems network

00:33:21,550 --> 00:33:27,190
settings you can use I'm covering really

00:33:23,410 --> 00:33:30,160
big fat common ones here yeah it's

00:33:27,190 --> 00:33:31,660
pretty good and original made arcing is

00:33:30,160 --> 00:33:33,370
good man

00:33:31,660 --> 00:33:35,290
so I think is really awesome if you're

00:33:33,370 --> 00:33:37,210
not using it use it it's a great way

00:33:35,290 --> 00:33:39,820
also if you have multiple laptops

00:33:37,210 --> 00:33:42,520
multiple pcs work desktop go to work

00:33:39,820 --> 00:33:44,050
come back you just send all your work to

00:33:42,520 --> 00:33:45,460
and from everything you do just a sync

00:33:44,050 --> 00:33:46,930
it all it just follows you wherever you

00:33:45,460 --> 00:33:48,400
go and you can disconnect from the

00:33:46,930 --> 00:33:50,620
network sit on are playing still work

00:33:48,400 --> 00:33:51,180
you don't need it that's the awesome bit

00:33:50,620 --> 00:33:53,530
about it

00:33:51,180 --> 00:33:55,930
so the creative board the same way

00:33:53,530 --> 00:33:57,610
compiled on the dev board are merely

00:33:55,930 --> 00:33:58,870
produce you native umpiring is running

00:33:57,610 --> 00:34:00,340
you just it's just as if it's an

00:33:58,870 --> 00:34:02,590
internal machine it just happens to be a

00:34:00,340 --> 00:34:05,050
different architecture that all the

00:34:02,590 --> 00:34:08,740
faster boards and not that dissimilar to

00:34:05,050 --> 00:34:11,260
slower pcs to compile bill Ron debugger

00:34:08,740 --> 00:34:14,080
etc so it's pretty good but be careful

00:34:11,260 --> 00:34:15,700
with C++ C fuss fuss is bad for one

00:34:14,080 --> 00:34:18,010
reason it tends to use a lot of memory

00:34:15,700 --> 00:34:20,080
compiling and the make - J thing becomes

00:34:18,010 --> 00:34:22,120
really really bad we see flash bus stuff

00:34:20,080 --> 00:34:24,010
so you might have to be careful of that

00:34:22,120 --> 00:34:25,240
that's all just remember that and there

00:34:24,010 --> 00:34:27,220
are standard things and creativity

00:34:25,240 --> 00:34:30,160
buggins to worse as we all know our

00:34:27,220 --> 00:34:33,130
favorite form of the debug so the point

00:34:30,160 --> 00:34:39,010
just treat it like a regular thing do a

00:34:33,130 --> 00:34:42,520
regular boss dear boss so why I use them

00:34:39,010 --> 00:34:44,050
this spec chief is small you know from

00:34:42,520 --> 00:34:45,250
credit card size up to slightly bigger

00:34:44,050 --> 00:34:47,890
or maybe even smaller

00:34:45,250 --> 00:34:48,910
they've got relatively good i/o a lot of

00:34:47,890 --> 00:34:51,820
them have a really good IO

00:34:48,910 --> 00:34:54,550
so from SATA ports through to a lot of

00:34:51,820 --> 00:34:56,980
us B etcetera um they tend to use a

00:34:54,550 --> 00:34:58,810
fairly low amount of power between one

00:34:56,980 --> 00:35:00,840
to 10 watts at least these boards I'm

00:34:58,810 --> 00:35:04,980
talking about a set of three here and

00:35:00,840 --> 00:35:07,600
it's just lots of fun to play with

00:35:04,980 --> 00:35:08,860
they're really good for prototyping I

00:35:07,600 --> 00:35:10,720
was actually having a discussion last

00:35:08,860 --> 00:35:14,290
night where some people were thinking

00:35:10,720 --> 00:35:15,670
about doing custom hardware and one way

00:35:14,290 --> 00:35:17,350
of doing this instead of doing making

00:35:15,670 --> 00:35:20,050
you hardware first to see if it works go

00:35:17,350 --> 00:35:22,750
buy a board for less than 100 bucks with

00:35:20,050 --> 00:35:24,880
everything included all the bits of

00:35:22,750 --> 00:35:26,680
pieces of peripherals in case and so on

00:35:24,880 --> 00:35:28,240
then you can actually see does what you

00:35:26,680 --> 00:35:30,069
want to do perform reasonably well on

00:35:28,240 --> 00:35:33,519
that class or chip or reaching on that

00:35:30,069 --> 00:35:35,500
SOC some people have actually been doing

00:35:33,519 --> 00:35:36,430
things like using raspberry pies in

00:35:35,500 --> 00:35:37,599
their products

00:35:36,430 --> 00:35:40,029
they literally sell products with the

00:35:37,599 --> 00:35:41,740
Raspberry Pi internet and they just add

00:35:40,029 --> 00:35:43,269
something around it add let's say a

00:35:41,740 --> 00:35:45,730
daughter board like something attached

00:35:43,269 --> 00:35:47,799
the GPIO s or even just to the USB stick

00:35:45,730 --> 00:35:49,720
it in a plastic box and sell that with

00:35:47,799 --> 00:35:52,960
the software pre-done so you can use it

00:35:49,720 --> 00:35:54,819
for like building small run products or

00:35:52,960 --> 00:35:56,109
kind of calling prototypes products

00:35:54,819 --> 00:35:57,970
where you might actually make several

00:35:56,109 --> 00:36:00,190
hundred or several thousand but it's not

00:35:57,970 --> 00:36:01,900
full in production yet they're great for

00:36:00,190 --> 00:36:04,720
media centers people do this all the

00:36:01,900 --> 00:36:06,339
time they're on Cody raspberry pi's and

00:36:04,720 --> 00:36:09,599
the find them higher in things we'll do

00:36:06,339 --> 00:36:13,089
it all at 4k they'll work pretty well

00:36:09,599 --> 00:36:15,339
sometimes the video decode encode a

00:36:13,089 --> 00:36:17,619
mostly decode units may or may not be

00:36:15,339 --> 00:36:19,210
supported very well on the rock pro 64

00:36:17,619 --> 00:36:20,829
they not supported variable as I

00:36:19,210 --> 00:36:25,480
discovered about three frames a second

00:36:20,829 --> 00:36:26,859
the CPU can decode at about thirty the

00:36:25,480 --> 00:36:27,940
hardware does three someone's done

00:36:26,859 --> 00:36:29,529
something wrong and hacker figured out

00:36:27,940 --> 00:36:32,380
what it is um you can use them as

00:36:29,529 --> 00:36:33,670
workstations yeah Nazz boxes you stick

00:36:32,380 --> 00:36:35,349
in a cupboard never have to know about a

00:36:33,670 --> 00:36:37,450
carry game so that's what a lot of

00:36:35,349 --> 00:36:42,130
people use it for so well yes I'll wait

00:36:37,450 --> 00:36:43,539
um so we'll do Q&A in a bit I haven't

00:36:42,130 --> 00:36:45,369
have brought three of my boards here I'm

00:36:43,539 --> 00:36:50,250
gonna just go and have a look at one I

00:36:45,369 --> 00:36:50,250
plugged in a little bit earlier yep

00:36:51,720 --> 00:36:57,579
so what I've done here is I have

00:36:55,630 --> 00:37:02,430
actually no that's me you don't look at

00:36:57,579 --> 00:37:02,430
me you want to look at

00:37:06,339 --> 00:37:13,269
this so what we have here is we actually

00:37:10,660 --> 00:37:19,599
have a budaya board I booted a board I

00:37:13,269 --> 00:37:20,709
booted a bit earlier that's good and all

00:37:19,599 --> 00:37:24,689
it is it just looks like your average

00:37:20,709 --> 00:37:24,689
piecing this is the rock pro 64 so

00:37:28,380 --> 00:37:37,209
that's had that Romney yes I did there

00:37:36,759 --> 00:37:39,729
we go

00:37:37,209 --> 00:37:41,859
and you just get your regular prompt so

00:37:39,729 --> 00:37:43,689
everything works as normal my favorite

00:37:41,859 --> 00:37:46,559
test is to just run a day run a

00:37:43,689 --> 00:37:50,049
compositor why are there Waylon thing

00:37:46,559 --> 00:37:55,689
since getting a desktop to work is nice

00:37:50,049 --> 00:37:57,339
you just run it and presto that is it

00:37:55,689 --> 00:37:59,619
happily running a regular desktop that's

00:37:57,339 --> 00:38:06,009
a Wayland one in this case and it does

00:37:59,619 --> 00:38:12,999
all work as long so wow this cloth is

00:38:06,009 --> 00:38:13,479
there we go so all the regular things

00:38:12,999 --> 00:38:18,099
work

00:38:13,479 --> 00:38:19,420
oops oh wait hey I'm looking up there I

00:38:18,099 --> 00:38:23,789
can look at my screen here isn't it

00:38:19,420 --> 00:38:30,880
smearing by default um oh wait no and

00:38:23,789 --> 00:38:34,089
the usual stuff works are by the way I'm

00:38:30,880 --> 00:38:37,599
looking at this using a HDMI capture USB

00:38:34,089 --> 00:38:39,099
thing on my PC and he's there insanely

00:38:37,599 --> 00:38:40,569
useful because having a monitor and

00:38:39,099 --> 00:38:44,439
having just switch inputs all the time

00:38:40,569 --> 00:38:46,509
really really sucks this slow and yeah

00:38:44,439 --> 00:38:47,979
it's just a pain so dig yourself one of

00:38:46,509 --> 00:38:48,999
these if you're gonna use these boards

00:38:47,979 --> 00:38:51,130
because then you can go and look at a

00:38:48,999 --> 00:38:54,989
board in a window and just use one of

00:38:51,130 --> 00:38:54,989
the your normal video viewing things um

00:38:55,799 --> 00:39:01,060
let me change fonts something much

00:38:59,049 --> 00:39:07,000
bigger

00:39:01,060 --> 00:39:09,240
I know that'll do oh oh look at that the

00:39:07,000 --> 00:39:14,440
drivers of bourbon huh

00:39:09,240 --> 00:39:22,930
there we go there we go now you guys

00:39:14,440 --> 00:39:26,860
should be able to see that what alrighty

00:39:22,930 --> 00:39:28,750
then so crashed actually so there

00:39:26,860 --> 00:39:30,910
everything working and that's that's

00:39:28,750 --> 00:39:33,970
actually using the proprietary drivers I

00:39:30,910 --> 00:39:35,680
think it may have crashed because we use

00:39:33,970 --> 00:39:39,760
the propriety of the OpenGL to render

00:39:35,680 --> 00:39:42,160
the actual terminal itself so that's why

00:39:39,760 --> 00:39:43,630
but anyway it all works the other boards

00:39:42,160 --> 00:39:45,070
work basically the same you turn a boot

00:39:43,630 --> 00:39:46,360
them up you can get a prompt you can

00:39:45,070 --> 00:39:49,420
have a boot straight in X if you want

00:39:46,360 --> 00:39:50,950
you know booting something else they all

00:39:49,420 --> 00:39:53,860
pretty much look exactly the same in

00:39:50,950 --> 00:40:06,520
this regard so yeah they work same

00:39:53,860 --> 00:40:08,470
weight question is now back so the

00:40:06,520 --> 00:40:10,780
question was are people using these dev

00:40:08,470 --> 00:40:13,180
boards if they're targeting the arm

00:40:10,780 --> 00:40:16,210
cloud instances I do not know because

00:40:13,180 --> 00:40:18,100
I'm cloud stuff is so new ok I will roll

00:40:16,210 --> 00:40:20,380
that back skate away which is a French

00:40:18,100 --> 00:40:24,880
cloud outfit have been offering arm VMs

00:40:20,380 --> 00:40:26,860
for 2-3 years now um for several years

00:40:24,880 --> 00:40:29,170
no one knows about that never goes in

00:40:26,860 --> 00:40:34,750
the press no one knows the moment Amazon

00:40:29,170 --> 00:40:36,280
do it's like ah so it's so new no one's

00:40:34,750 --> 00:40:38,140
really doing it I don't know of people

00:40:36,280 --> 00:40:39,730
doing it at the moment but it is

00:40:38,140 --> 00:40:42,010
actually a valid way of doing this if

00:40:39,730 --> 00:40:43,990
you run a 64-bit distribution on this it

00:40:42,010 --> 00:40:46,540
will be the same as the things in the

00:40:43,990 --> 00:40:48,610
cloud it might be a bit slower because

00:40:46,540 --> 00:40:50,950
they Amazon is specifically designed

00:40:48,610 --> 00:40:52,480
their own chips themselves they bought a

00:40:50,950 --> 00:40:54,220
company that was designing stuff and

00:40:52,480 --> 00:40:55,420
they built them themselves they fab

00:40:54,220 --> 00:40:57,400
their own ships because they have the

00:40:55,420 --> 00:40:59,350
money to do it and it makes it very very

00:40:57,400 --> 00:41:05,640
cheap for them compared to buying Intel

00:40:59,350 --> 00:41:05,640
or AMD hardware so gets more oh oh next

00:41:09,580 --> 00:41:14,980
[Music]

00:42:02,230 --> 00:42:13,730
the last one we're not going to talk

00:42:04,310 --> 00:42:16,820
about this with the first one I'll take

00:42:13,730 --> 00:42:20,450
up you lost something okay this is the

00:42:16,820 --> 00:42:22,190
foot the first one that was on of course

00:42:20,450 --> 00:42:23,660
I simply don't have any of those boards

00:42:22,190 --> 00:42:25,460
to show you I just don't have them I

00:42:23,660 --> 00:42:28,070
have no personal experience with them

00:42:25,460 --> 00:42:31,160
can't say so I'm neutral on that the

00:42:28,070 --> 00:42:32,750
middle one I have run various

00:42:31,160 --> 00:42:34,580
distributions on my boards I've never

00:42:32,750 --> 00:42:36,050
had to compile something for a package

00:42:34,580 --> 00:42:38,570
it's already precompiled prepackaged

00:42:36,050 --> 00:42:40,280
Debbie and unstable maintain an exact

00:42:38,570 --> 00:42:43,250
copy of the Intel unstable they

00:42:40,280 --> 00:42:44,960
recompile it for arm and it's just there

00:42:43,250 --> 00:42:46,820
when they update something until it's

00:42:44,960 --> 00:42:47,900
updated arm - it gets rebuilt so

00:42:46,820 --> 00:42:49,340
everything is there everything is

00:42:47,900 --> 00:42:52,190
up-to-date you don't have to do these

00:42:49,340 --> 00:42:54,109
things now in principle could you

00:42:52,190 --> 00:42:56,000
compile some like cute I bet you could I

00:42:54,109 --> 00:42:57,320
haven't had personally tried it is C++

00:42:56,000 --> 00:42:59,690
tape I was going to use a lot more I

00:42:57,320 --> 00:43:01,490
actually compiled EFL and on something

00:42:59,690 --> 00:43:03,619
like The Rock / 64 here with 4 gig of

00:43:01,490 --> 00:43:06,260
ram I never run out of RAM I can use all

00:43:03,619 --> 00:43:09,350
the cause because it and it takes I

00:43:06,260 --> 00:43:11,000
think about 15-20 minutes and has

00:43:09,350 --> 00:43:13,369
compiled all of it I'd have to recompile

00:43:11,000 --> 00:43:14,510
a system from scratch if I had to

00:43:13,369 --> 00:43:16,700
recompile system from scratch like

00:43:14,510 --> 00:43:18,320
openembedded I would generally argue

00:43:16,700 --> 00:43:20,030
you're doing something really weird or

00:43:18,320 --> 00:43:21,770
wrong which you don't generally have to

00:43:20,030 --> 00:43:24,069
go rebuild everything yourself there's

00:43:21,770 --> 00:43:26,109
already pre-built so it's a rare day

00:43:24,069 --> 00:43:27,759
to do that if you did there are lots of

00:43:26,109 --> 00:43:29,499
higher-end armed systems like a PC or

00:43:27,759 --> 00:43:31,299
higher anything you can get to do the

00:43:29,499 --> 00:43:33,069
same in native compile as well and so or

00:43:31,299 --> 00:43:34,809
you can do the crossing part you can do

00:43:33,069 --> 00:43:40,329
that too it's just a bit more painful so

00:43:34,809 --> 00:43:42,279
yes with a question of it oh you're all

00:43:40,329 --> 00:43:44,440
net okay I do not know about that I know

00:43:42,279 --> 00:43:47,319
that we are doing in a neural net

00:43:44,440 --> 00:43:48,819
processor and NP you think a Tom ah we

00:43:47,319 --> 00:43:49,930
have a specific thing for that we have a

00:43:48,819 --> 00:43:51,969
whole group of people who are

00:43:49,930 --> 00:43:56,140
continuously optimizing algorithms and

00:43:51,969 --> 00:43:57,670
things for that + CQ + GPU um I do not

00:43:56,140 --> 00:43:59,829
know any of the details I'm sorry it's

00:43:57,670 --> 00:44:09,099
not a field which is my thing I've I do

00:43:59,829 --> 00:44:09,759
know it exists newer ones do all the

00:44:09,099 --> 00:44:15,039
ones don't

00:44:09,759 --> 00:44:16,869
so I if you get one of the older not out

00:44:15,039 --> 00:44:18,789
of order things it doesn't suffer from

00:44:16,869 --> 00:44:20,829
it at all um I can't remember now

00:44:18,789 --> 00:44:25,029
exactly which thing it was it may have

00:44:20,829 --> 00:44:27,459
been a 53 doesn't suffer or earlier but

00:44:25,029 --> 00:44:29,709
it also partly might depend on the SOC

00:44:27,459 --> 00:44:33,279
maker so Qualcomm should in the past

00:44:29,709 --> 00:44:35,289
sometimes design a license to our RTL

00:44:33,279 --> 00:44:37,329
the design of the actual circuitry

00:44:35,289 --> 00:44:38,650
inside the chip other times they

00:44:37,329 --> 00:44:41,440
designed their own and they just are

00:44:38,650 --> 00:44:43,779
unlicensed the art of the eisah the icer

00:44:41,440 --> 00:44:45,459
itself doesn't have this ability it's

00:44:43,779 --> 00:44:48,069
the implementation that's the problem

00:44:45,459 --> 00:44:49,449
and so some of our new implementations

00:44:48,069 --> 00:44:51,999
actually does do have the problem and

00:44:49,449 --> 00:44:54,699
I'll happily admit for asked it was like

00:44:51,999 --> 00:44:56,890
a shock like oh my god no one even

00:44:54,699 --> 00:44:58,539
thought about this and no one did until

00:44:56,890 --> 00:45:00,579
didn't no one thought this was the thing

00:44:58,539 --> 00:45:02,140
and everyone got a shocked out of an all

00:45:00,579 --> 00:45:04,539
the time well we're never making that

00:45:02,140 --> 00:45:05,499
mistake again and we literally no one is

00:45:04,539 --> 00:45:08,130
going to do it they've you're being

00:45:05,499 --> 00:45:10,900
really careful about anything that is

00:45:08,130 --> 00:45:12,640
not delay basically straightforward

00:45:10,900 --> 00:45:14,170
anything that's tricky like speculative

00:45:12,640 --> 00:45:16,059
execution or anything like that we're

00:45:14,170 --> 00:45:18,729
being very very careful about in fact

00:45:16,059 --> 00:45:20,799
we're really really obsessed by security

00:45:18,729 --> 00:45:22,959
these days we've been adding features to

00:45:20,799 --> 00:45:24,670
our chip so P auth is a new one for

00:45:22,959 --> 00:45:26,619
authenticating pointers built into

00:45:24,670 --> 00:45:27,880
Hardware the idea is to stop a buffer

00:45:26,619 --> 00:45:29,319
overflows in the stack so we

00:45:27,880 --> 00:45:30,670
authenticate the return pointer the

00:45:29,319 --> 00:45:32,829
compiler just automatically does this

00:45:30,670 --> 00:45:34,539
for you you build for it and it means

00:45:32,829 --> 00:45:36,069
you basically can't do the buffer

00:45:34,539 --> 00:45:37,740
overflow is honest and have it jump

00:45:36,069 --> 00:45:39,780
somewhere else anymore

00:45:37,740 --> 00:45:41,970
it okay you could there are a certain

00:45:39,780 --> 00:45:44,070
number of bits of basically hashing of

00:45:41,970 --> 00:45:45,450
that thing you fear it it could little

00:45:44,070 --> 00:45:47,010
be incredibly hard to do because they'll

00:45:45,450 --> 00:45:49,760
be based on address and state in memory

00:45:47,010 --> 00:45:53,700
we are actually adding new stuff as well

00:45:49,760 --> 00:45:57,540
that makes it even more paranoid when it

00:45:53,700 --> 00:45:59,160
comes to um checking on memory you'll

00:45:57,540 --> 00:46:00,270
hear about on future unfortunately be a

00:45:59,160 --> 00:46:03,210
couple years away before they hit

00:46:00,270 --> 00:46:04,650
silicon so but we do take security and

00:46:03,210 --> 00:46:07,320
these things very seriously especially

00:46:04,650 --> 00:46:08,700
these days um so we think about it so we

00:46:07,320 --> 00:46:23,369
hope that we don't make the same

00:46:08,700 --> 00:46:25,740
mistakes game yes I have especially on

00:46:23,369 --> 00:46:27,330
my hunger x2 it's made REM a very poor

00:46:25,740 --> 00:46:28,859
scheduling decisions to the point where

00:46:27,330 --> 00:46:32,280
my desk got really freeze for half a

00:46:28,859 --> 00:46:34,260
second at a time like if I do a compile

00:46:32,280 --> 00:46:37,410
and a compile and hammer all might see

00:46:34,260 --> 00:46:39,119
how 256 cause with a compiler yes things

00:46:37,410 --> 00:46:42,030
get slow the kernel was doing bad thing

00:46:39,119 --> 00:46:44,820
but he's the big but I noticed recently

00:46:42,030 --> 00:46:46,260
on even my i7 with eight cores it's

00:46:44,820 --> 00:47:03,150
doing the same thing it's beginning to

00:46:46,260 --> 00:47:04,410
look really bad in triggers every time

00:47:03,150 --> 00:47:06,780
that question comes up the answer is

00:47:04,410 --> 00:47:08,099
always see groups wait then you can do

00:47:06,780 --> 00:47:10,740
it you can have a secret which literally

00:47:08,099 --> 00:47:12,420
pin so and even Intel now doing a big

00:47:10,740 --> 00:47:13,560
little thing they literally have

00:47:12,420 --> 00:47:16,770
recently announced they're gonna be

00:47:13,560 --> 00:47:18,780
releasing a big Intel call with a little

00:47:16,770 --> 00:47:21,060
Assam thing built into it I don't know

00:47:18,780 --> 00:47:22,859
how many and they down after years of

00:47:21,060 --> 00:47:24,510
saying arm is bad this is horrible you

00:47:22,859 --> 00:47:26,280
don't do that they're not copying us and

00:47:24,510 --> 00:47:28,140
it's it's a rare day which sitting in

00:47:26,280 --> 00:47:31,680
wait we're ahead they're copying us now

00:47:28,140 --> 00:47:33,300
yes uh-huh so they're doing that and

00:47:31,680 --> 00:47:35,339
they will need in fact interesting

00:47:33,300 --> 00:47:36,869
enough they now are using the

00:47:35,339 --> 00:47:38,520
infrastructure we put in for power

00:47:36,869 --> 00:47:41,160
management support into the kernel for

00:47:38,520 --> 00:47:42,990
arm for their thing so we're actually

00:47:41,160 --> 00:47:44,700
converging to be in the same space which

00:47:42,990 --> 00:47:45,690
is actually good then we won't be

00:47:44,700 --> 00:47:47,760
fighting with each other might be

00:47:45,690 --> 00:47:49,530
working with each other to achieve the

00:47:47,760 --> 00:47:50,880
same goal of better power management

00:47:49,530 --> 00:47:53,089
running on the right floor at the right

00:47:50,880 --> 00:47:53,089
time

00:48:16,140 --> 00:48:20,880
you're right because the the IO would be

00:48:18,480 --> 00:48:23,460
by USB then and it's only used to be to

00:48:20,880 --> 00:48:25,530
on the Raspberry Pi and that bandwidth

00:48:23,460 --> 00:48:27,600
is shared between the network and the

00:48:25,530 --> 00:48:30,540
disk so you end up having pretty bad

00:48:27,600 --> 00:48:32,550
results so yes the raspberry PI's in the

00:48:30,540 --> 00:48:33,210
low end but it's cheap so you get what

00:48:32,550 --> 00:48:35,960
you pay for

00:48:33,210 --> 00:48:35,960
yes

00:49:01,480 --> 00:49:14,380
oh okay I usually rock per 64 but but

00:49:11,290 --> 00:49:16,450
what I did is I took their Debian they

00:49:14,380 --> 00:49:18,040
divvy in seven dot whatever arm stretch

00:49:16,450 --> 00:49:20,650
thing and I just changed the apps

00:49:18,040 --> 00:49:23,619
whatever source things to go to unstable

00:49:20,650 --> 00:49:25,750
and just get just upgrade and done and

00:49:23,619 --> 00:49:27,550
now I'm in latest and greatest so that's

00:49:25,750 --> 00:49:29,830
all it was needed it didn't come as an

00:49:27,550 --> 00:49:32,440
image already I had to go and Swizzle

00:49:29,830 --> 00:49:34,810
the apps stuff to point instead of to

00:49:32,440 --> 00:49:35,800
what they had set up to testing the

00:49:34,810 --> 00:49:45,600
press so it just worked

00:49:35,800 --> 00:49:45,600

YouTube URL: https://www.youtube.com/watch?v=qnWuvWHWU0Q


