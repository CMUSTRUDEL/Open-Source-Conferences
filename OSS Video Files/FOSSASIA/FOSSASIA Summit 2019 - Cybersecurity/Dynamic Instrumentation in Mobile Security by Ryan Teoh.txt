Title: Dynamic Instrumentation in Mobile Security by Ryan Teoh
Publication date: 2019-03-24
Playlist: FOSSASIA Summit 2019 - Cybersecurity
Description: 
	16 March 2019 10:30, Training Room 9-2/9-3

As mobile applications are becoming more complicated, we often find it difficult to understand the application thru static analysis. With Dynamic Instrumentation - a dynamic analysis technique, it enables the analysis of application behaviour at runtime, by injecting the instrumentation code into the process. This talk aims to discuss the use case of Dynamic Instrumentation in the context of Mobile security on various mobile operating system platforms and how you can embed this technique into your bug hunting toolkit.
Captions: 
	00:00:00,030 --> 00:00:03,870
as I was saying I basically briefed

00:00:02,730 --> 00:00:08,550
everybody what is the dynamic

00:00:03,870 --> 00:00:10,860
instrumentation and then how how do you

00:00:08,550 --> 00:00:13,230
do it on a mobile and what does it has

00:00:10,860 --> 00:00:15,480
to do with mobile security and such and

00:00:13,230 --> 00:00:17,670
such so before I start I would like to

00:00:15,480 --> 00:00:20,970
do a survey what we like to know if

00:00:17,670 --> 00:00:25,490
anybody does any of this on the

00:00:20,970 --> 00:00:31,250
presentation okay maybe want

00:00:25,490 --> 00:00:33,440
ok that's often yeah exactly so

00:00:31,250 --> 00:00:36,390
basically that's how I started as well

00:00:33,440 --> 00:00:39,390
so I mean um on my security engineering

00:00:36,390 --> 00:00:41,550
lab and basically I was really into

00:00:39,390 --> 00:00:43,469
hacking games and then a flashing my PSP

00:00:41,550 --> 00:00:45,300
firmware that's how I got into this

00:00:43,469 --> 00:00:51,120
eventually the hacking is more

00:00:45,300 --> 00:00:52,590
interesting than the game so part of the

00:00:51,120 --> 00:00:53,879
motivation for this dynamic the

00:00:52,590 --> 00:00:55,770
instrumentation is basically to

00:00:53,879 --> 00:00:58,199
understand how a course or system works

00:00:55,770 --> 00:00:59,789
I know this is a open source talk but

00:00:58,199 --> 00:01:00,960
sometimes we need to integrate our open

00:00:59,789 --> 00:01:02,969
source software with some closed source

00:01:00,960 --> 00:01:05,430
system and they might not necessarily

00:01:02,969 --> 00:01:07,020
share the API or the documentation so

00:01:05,430 --> 00:01:09,630
reverse engineer will come in to face

00:01:07,020 --> 00:01:11,700
and dynamic instrumentation is one of

00:01:09,630 --> 00:01:13,530
the tool that you could use and also if

00:01:11,700 --> 00:01:15,509
you want to ascetically analyze the

00:01:13,530 --> 00:01:17,610
obfuscated binary in the context of

00:01:15,509 --> 00:01:21,119
malware reversing or whatever yeah this

00:01:17,610 --> 00:01:22,770
could be used for so all right so when

00:01:21,119 --> 00:01:26,150
you talk about dynamic instrumentation

00:01:22,770 --> 00:01:28,530
what is it instrumentation is basically

00:01:26,150 --> 00:01:32,820
monitoring a binary behavior or

00:01:28,530 --> 00:01:35,729
basically adding extra additional

00:01:32,820 --> 00:01:37,290
instruction on to the binary so and

00:01:35,729 --> 00:01:39,270
dynamic instrumentation is basically

00:01:37,290 --> 00:01:42,299
doing that while the binary is being

00:01:39,270 --> 00:01:45,720
executed it is also known as punctured

00:01:42,299 --> 00:01:47,850
hooking post reasoning and basically in

00:01:45,720 --> 00:01:53,040
one sentence it's executing your own

00:01:47,850 --> 00:01:55,200
debug script inside another process so

00:01:53,040 --> 00:01:58,439
to illustrate this better basically on

00:01:55,200 --> 00:02:01,229
your left is on your on your right on

00:01:58,439 --> 00:02:03,000
your right is basically the instruction

00:02:01,229 --> 00:02:05,490
that you will see when you are running

00:02:03,000 --> 00:02:07,049
the application on a CPU there's one two

00:02:05,490 --> 00:02:08,899
three four and if you does some

00:02:07,049 --> 00:02:11,640
instrumentation you would be able to

00:02:08,899 --> 00:02:13,870
modify the application behavior by

00:02:11,640 --> 00:02:16,319
adding additional instruction before

00:02:13,870 --> 00:02:22,090
and after and even removing certain

00:02:16,319 --> 00:02:23,650
instruction so why how does it how can

00:02:22,090 --> 00:02:26,319
you use it you can basically use it to

00:02:23,650 --> 00:02:28,090
access process my memory to overwrite

00:02:26,319 --> 00:02:30,970
functions when some application is

00:02:28,090 --> 00:02:33,069
running you can basically yeah there's a

00:02:30,970 --> 00:02:35,040
lot of stuff that you can do you could

00:02:33,069 --> 00:02:37,599
basically change the course of the

00:02:35,040 --> 00:02:40,900
application instruction set and do

00:02:37,599 --> 00:02:43,540
whatever things that you wanted to do so

00:02:40,900 --> 00:02:45,099
why why why why do I care because to me

00:02:43,540 --> 00:02:47,860
as a security engineer unfortunately

00:02:45,099 --> 00:02:49,420
this is one of the qualification a lot

00:02:47,860 --> 00:02:51,970
of times we have to reverse engineer

00:02:49,420 --> 00:02:53,560
stuff and sometimes even malware so and

00:02:51,970 --> 00:02:56,260
dynamic instrumentation is a very

00:02:53,560 --> 00:03:03,010
efficient way to to understand how a

00:02:56,260 --> 00:03:05,290
binary I works so this is the site that

00:03:03,010 --> 00:03:09,250
I had to fall for a bunch of security

00:03:05,290 --> 00:03:11,200
students in NTU and so this is something

00:03:09,250 --> 00:03:13,030
that our most students is in Wapping

00:03:11,200 --> 00:03:14,530
doing one of the key research and

00:03:13,030 --> 00:03:16,660
malware reversing and even hacking as

00:03:14,530 --> 00:03:20,889
well and it's just some points that are

00:03:16,660 --> 00:03:24,160
why why they should care so enough of

00:03:20,889 --> 00:03:25,420
abstract enough of abstract concept

00:03:24,160 --> 00:03:27,220
there are some tools that you could use

00:03:25,420 --> 00:03:28,930
to basically try it out mobile

00:03:27,220 --> 00:03:31,209
instrumentation like read are exposed

00:03:28,930 --> 00:03:32,380
and see script does anybody have anybody

00:03:31,209 --> 00:03:37,239
you have any experience with any of

00:03:32,380 --> 00:03:38,680
those maybe one of who I suppose so

00:03:37,239 --> 00:03:40,269
freida is something that I use a lot

00:03:38,680 --> 00:03:43,180
right now I suppose this I guess is what

00:03:40,269 --> 00:03:46,239
everybody is familiar with and also

00:03:43,180 --> 00:03:48,519
secrecy scrip is basically a mobile

00:03:46,239 --> 00:03:55,900
instrumentation that's very popular on

00:03:48,519 --> 00:03:58,299
iOS it was built by yeah sorry and the

00:03:55,900 --> 00:04:01,650
two that I use a lot its feeder have

00:03:58,299 --> 00:04:06,120
anyone heard of Peter oh that's actually

00:04:01,650 --> 00:04:08,560
not the Mexican painter okay thatÃ­s all

00:04:06,120 --> 00:04:12,609
so one of the reason why video is

00:04:08,560 --> 00:04:14,290
properly use and also why our team or or

00:04:12,609 --> 00:04:16,030
anybody that I know in security engineer

00:04:14,290 --> 00:04:17,530
is using this a lot it's because it

00:04:16,030 --> 00:04:20,349
basically supports a lot of different

00:04:17,530 --> 00:04:22,000
operating system and what it does

00:04:20,349 --> 00:04:24,090
especially what it does very

00:04:22,000 --> 00:04:27,400
interestingly is that are unlike

00:04:24,090 --> 00:04:29,830
attaching your debugger on to process

00:04:27,400 --> 00:04:31,900
freida basically injects a JIT a

00:04:29,830 --> 00:04:34,540
JavaScript engine like duct tape or even

00:04:31,900 --> 00:04:36,850
who was v8 and basically at the the box

00:04:34,540 --> 00:04:38,770
script that writ in that you wrote can

00:04:36,850 --> 00:04:41,350
be a JavaScript and I know that recently

00:04:38,770 --> 00:04:42,880
they even support a better web assembly

00:04:41,350 --> 00:04:46,509
yourself so there's even mobile that for

00:04:42,880 --> 00:04:47,800
the stuff that you could do so back then

00:04:46,509 --> 00:04:49,449
there's a lot of instrumentation

00:04:47,800 --> 00:04:52,449
framework that has very limited support

00:04:49,449 --> 00:04:56,350
maybe only let some money on Windows or

00:04:52,449 --> 00:04:58,960
Intel x86 architecture but in this case

00:04:56,350 --> 00:05:00,970
freedom based be they a pull-off it kept

00:04:58,960 --> 00:05:07,570
it create different bindings on to a

00:05:00,970 --> 00:05:10,150
different object system so in this

00:05:07,570 --> 00:05:11,740
example basically the debugger which is

00:05:10,150 --> 00:05:15,130
the process that we try to debug

00:05:11,740 --> 00:05:18,160
Peter will inject a shet library on to

00:05:15,130 --> 00:05:20,620
the application and the chat like they

00:05:18,160 --> 00:05:23,289
wait for the debugger to to send

00:05:20,620 --> 00:05:25,479
instruction to it basically to see what

00:05:23,289 --> 00:05:27,039
your box scripts has to wrote though

00:05:25,479 --> 00:05:30,220
communication channel is basically

00:05:27,039 --> 00:05:32,400
d-bus over tcp and i will show a little

00:05:30,220 --> 00:05:35,229
bit more about this later

00:05:32,400 --> 00:05:37,599
so peter there's a lot of ways to do it

00:05:35,229 --> 00:05:39,310
in mobile security or there's two ways

00:05:37,599 --> 00:05:41,470
that it meant this first one is embedded

00:05:39,310 --> 00:05:43,300
and another one is injection injection

00:05:41,470 --> 00:05:45,550
is really useful if you have two rooted

00:05:43,300 --> 00:05:47,620
android device but in the case of iOS

00:05:45,550 --> 00:05:49,090
you might not have fun joke broken

00:05:47,620 --> 00:05:51,159
device all the time and it's getting

00:05:49,090 --> 00:05:52,990
harder and harder to get to get one so

00:05:51,159 --> 00:05:55,539
basically what you could do is you could

00:05:52,990 --> 00:05:57,760
basically a met the the feeder agent as

00:05:55,539 --> 00:06:00,039
part of the ad lib onto the application

00:05:57,760 --> 00:06:01,810
and then you know and this will work in

00:06:00,039 --> 00:06:04,810
a job break agile environment there's

00:06:01,810 --> 00:06:06,580
some restriction but for normal

00:06:04,810 --> 00:06:09,669
debugging or instrumentation it would

00:06:06,580 --> 00:06:14,409
work all right

00:06:09,669 --> 00:06:16,570
um there's a very detailed PETA EP ice

00:06:14,409 --> 00:06:19,060
not that detail actually there's still a

00:06:16,570 --> 00:06:21,010
lot of stuff that happens but it gives

00:06:19,060 --> 00:06:23,229
you a good idea of what you can do but

00:06:21,010 --> 00:06:25,000
basically for normal mobile security

00:06:23,229 --> 00:06:27,130
instrumentation there is two things that

00:06:25,000 --> 00:06:29,380
we care about how do you instantiate an

00:06:27,130 --> 00:06:31,199
object and also how can you hook onto

00:06:29,380 --> 00:06:36,010
the function the second one is basically

00:06:31,199 --> 00:06:37,510
using feed our readers api's to hook on

00:06:36,010 --> 00:06:39,250
the stringbuilder function so when

00:06:37,510 --> 00:06:41,100
stringbuilder function is being called i

00:06:39,250 --> 00:06:43,740
could basically use this

00:06:41,100 --> 00:06:45,900
to pass whatever argument that is as

00:06:43,740 --> 00:06:48,360
husky and who come to it and over here

00:06:45,900 --> 00:06:49,890
it's basically when the stringbuilder

00:06:48,360 --> 00:06:52,410
function is being called it will be just

00:06:49,890 --> 00:06:53,580
console off

00:06:52,410 --> 00:06:57,030
and the first one is for you to

00:06:53,580 --> 00:06:58,620
instantiate a Java object and this could

00:06:57,030 --> 00:07:00,360
be useful because sometimes some

00:06:58,620 --> 00:07:05,790
function that you're hooking requires an

00:07:00,360 --> 00:07:09,000
object and so so to give you a quick

00:07:05,790 --> 00:07:11,160
example of a very very common case that

00:07:09,000 --> 00:07:13,860
we would use in dynamic instrumentation

00:07:11,160 --> 00:07:15,450
is when when you're running any

00:07:13,860 --> 00:07:17,460
application I think some of the popular

00:07:15,450 --> 00:07:18,960
banking apps or whatever apps they

00:07:17,460 --> 00:07:22,110
usually will check whether if the

00:07:18,960 --> 00:07:24,900
Android device is rooted which is very

00:07:22,110 --> 00:07:26,370
common and the the highlighted one are

00:07:24,900 --> 00:07:28,050
some of the patterns that they would

00:07:26,370 --> 00:07:30,870
look for I checked whether if the SU

00:07:28,050 --> 00:07:33,570
binary Apanui is on whatever path and if

00:07:30,870 --> 00:07:35,100
it is and you return true and there's

00:07:33,570 --> 00:07:37,680
more other conditions as well so there's

00:07:35,100 --> 00:07:39,840
some multiple with checks to bypass it

00:07:37,680 --> 00:07:41,640
basically like the API that we show

00:07:39,840 --> 00:07:46,890
before you were able to hook on to

00:07:41,640 --> 00:07:48,660
function so over here basically I hook

00:07:46,890 --> 00:07:50,640
on to this function as you thought

00:07:48,660 --> 00:07:53,550
vantage point on a tour see the reason

00:07:50,640 --> 00:07:55,320
why it is this is because the the the

00:07:53,550 --> 00:07:56,100
the APK that are most

00:07:55,320 --> 00:07:59,220
reverse-engineering

00:07:56,100 --> 00:08:02,180
it has pro got and it was optimized and

00:07:59,220 --> 00:08:06,140
so you could see over here that when

00:08:02,180 --> 00:08:06,140
this function

00:08:08,780 --> 00:08:14,250
so the first one is that when when a

00:08:12,180 --> 00:08:15,870
function is first function was hit it's

00:08:14,250 --> 00:08:17,580
basically just return zero so it means

00:08:15,870 --> 00:08:19,439
that this pause so in a way we kind of

00:08:17,580 --> 00:08:20,789
hooked the function and return false no

00:08:19,439 --> 00:08:22,169
matter whether if the application

00:08:20,789 --> 00:08:23,879
discovered Allister

00:08:22,169 --> 00:08:27,210
so it's a very basic way of doing kind

00:08:23,879 --> 00:08:29,490
of a experimentation and then there's

00:08:27,210 --> 00:08:34,289
some other alternative way to do dynamic

00:08:29,490 --> 00:08:35,789
instrumentation as well because for for

00:08:34,289 --> 00:08:37,409
the method that we showed before you

00:08:35,789 --> 00:08:39,180
have to customize your the bug script

00:08:37,409 --> 00:08:40,860
every single time when you want to we

00:08:39,180 --> 00:08:42,510
wish our youyou want an instrument you

00:08:40,860 --> 00:08:44,339
want to bypass the root detection so

00:08:42,510 --> 00:08:48,180
this method basically it will hook on

00:08:44,339 --> 00:08:50,279
some enjoy function such as activity or

00:08:48,180 --> 00:08:53,160
exit cost when the root detection has

00:08:50,279 --> 00:08:53,700
been detected it will usually exit the

00:08:53,160 --> 00:08:56,970
application

00:08:53,700 --> 00:09:01,040
so we basically hook on those activity

00:08:56,970 --> 00:09:01,040
and preventing it from exiting himself

00:09:02,120 --> 00:09:09,839
so some some application may have

00:09:07,050 --> 00:09:12,480
secrets and they store it and for if you

00:09:09,839 --> 00:09:16,290
wanted to know print out the secret you

00:09:12,480 --> 00:09:17,490
could able to hook on some if you could

00:09:16,290 --> 00:09:19,230
able to hook on the function that we're

00:09:17,490 --> 00:09:21,180
using and print out the argument or

00:09:19,230 --> 00:09:27,180
maybe the result so that you could see

00:09:21,180 --> 00:09:33,320
the secret yeah so basically this is a

00:09:27,180 --> 00:09:33,320
script that I have so I have a

00:09:36,420 --> 00:09:42,869
I think there was some missing slides

00:09:38,279 --> 00:09:45,269
but basically my friend and I we but we

00:09:42,869 --> 00:09:47,249
created some hacking challenges for you

00:09:45,269 --> 00:09:49,980
to practice our dynamic instrumentation

00:09:47,249 --> 00:09:51,299
it's called box and cracked me mobile

00:09:49,980 --> 00:09:59,089
currently so if you're interested you

00:09:51,299 --> 00:10:05,129
can check out I think it's um okay I

00:09:59,089 --> 00:10:07,139
could basically just show you guys so on

00:10:05,129 --> 00:10:09,540
my on the on the on my right it's

00:10:07,139 --> 00:10:11,759
basically a emulator that already has a

00:10:09,540 --> 00:10:13,739
meter on e and then on my left is

00:10:11,759 --> 00:10:18,569
basically I'm trying to run a feeder

00:10:13,739 --> 00:10:20,129
scripts so you can see that when I when

00:10:18,569 --> 00:10:22,499
I execute the application might correct

00:10:20,129 --> 00:10:24,089
me though that we created it would tell

00:10:22,499 --> 00:10:31,649
me that there was writ detected on the

00:10:24,089 --> 00:10:34,139
device and so on the terminal it

00:10:31,649 --> 00:10:35,879
basically modified the on click function

00:10:34,139 --> 00:10:38,040
so when I click on it it will usually

00:10:35,879 --> 00:10:40,110
triggered a function to exit the

00:10:38,040 --> 00:10:42,179
application but right now I click on to

00:10:40,110 --> 00:10:44,279
I hook on to the function and preventing

00:10:42,179 --> 00:10:46,049
it from doing anything so even if I do

00:10:44,279 --> 00:10:48,660
one click it doesn't do anything and

00:10:46,049 --> 00:10:54,480
right now basically I'm demonstrating

00:10:48,660 --> 00:10:55,559
hooking a decryption function so even

00:10:54,480 --> 00:10:57,929
though on the terminal you don't see

00:10:55,559 --> 00:11:00,089
anything but at the the box scrip I

00:10:57,929 --> 00:11:02,459
basically hook on to the decryption and

00:11:00,089 --> 00:11:11,270
print out the argument and also the

00:11:02,459 --> 00:11:13,760
return value of the so

00:11:11,270 --> 00:11:15,980
this is fun but uh things like this can

00:11:13,760 --> 00:11:19,339
be this is just a crack minion like it's

00:11:15,980 --> 00:11:23,240
a great but human for human so some it

00:11:19,339 --> 00:11:26,510
could be unreal 'van to what we're doing

00:11:23,240 --> 00:11:29,300
so for example this is something that I

00:11:26,510 --> 00:11:32,480
just added this morning so maybe maybe

00:11:29,300 --> 00:11:34,940
there's some error so recently out three

00:11:32,480 --> 00:11:37,399
in two in malware so because I think

00:11:34,940 --> 00:11:38,899
that it's fun it's also like another

00:11:37,399 --> 00:11:44,060
challenge that was created by human for

00:11:38,899 --> 00:11:45,500
human yeah so we're following Android

00:11:44,060 --> 00:11:47,540
malware there's this very popular

00:11:45,500 --> 00:11:49,610
because I know beasts and under this

00:11:47,540 --> 00:11:51,950
they made some changes recently they

00:11:49,610 --> 00:11:53,690
basically have a loader so that when you

00:11:51,950 --> 00:11:57,680
were doing static a reverse engineering

00:11:53,690 --> 00:11:59,990
on the mod been able to the actual it

00:11:57,680 --> 00:12:04,550
that will be executed when you are

00:11:59,990 --> 00:12:06,140
running the application and the the

00:12:04,550 --> 00:12:08,089
victim to know that there is actually a

00:12:06,140 --> 00:12:10,790
new payload that is replacing the actual

00:12:08,089 --> 00:12:13,459
application the file will be deleted

00:12:10,790 --> 00:12:17,209
immediately or the whole process cannot

00:12:13,459 --> 00:12:21,550
be on Android so that they need to write

00:12:17,209 --> 00:12:25,130
about dog for reverse engineer skated

00:12:21,550 --> 00:12:33,380
application doesn't mean Steve actual

00:12:25,130 --> 00:12:37,579
payload so like earlier one I would

00:12:33,380 --> 00:12:43,450
write that debug scrip customize it all

00:12:37,579 --> 00:12:46,700
the time so only which is a deep sea

00:12:43,450 --> 00:12:51,490
which is a low-level enjoy Lipsy

00:12:46,700 --> 00:12:51,490
function and I basically hawk on this I

00:12:51,550 --> 00:12:56,440
love all function that they use

00:13:03,020 --> 00:13:08,660
and yeah so over here you can see that i

00:13:05,570 --> 00:13:12,170
intercepted it by just printing a

00:13:08,660 --> 00:13:18,110
console on bring the power you know a

00:13:12,170 --> 00:13:21,980
message so it doesn't do anything so do

00:13:18,110 --> 00:13:24,410
note that the the not the resolution but

00:13:21,980 --> 00:13:26,180
just that the the color of the emulator

00:13:24,410 --> 00:13:27,560
is very different because this is one of

00:13:26,180 --> 00:13:30,620
the pattern that the new uh new base

00:13:27,560 --> 00:13:32,959
malware did so to inform the victim that

00:13:30,620 --> 00:13:36,500
the bone has been compromised they tried

00:13:32,959 --> 00:13:38,180
to change the the color or recorded the

00:13:36,500 --> 00:13:42,080
color of the whole devices are not the

00:13:38,180 --> 00:13:45,399
whole device yeah basically you see that

00:13:42,080 --> 00:13:45,399
it's it's very different

00:13:46,630 --> 00:13:53,380
so flash player is the malware that they

00:13:49,490 --> 00:13:53,380
are trying to fit out esta esta malware

00:13:56,560 --> 00:14:03,320
so basically I adb into I basically

00:14:00,649 --> 00:14:07,279
locking ssession to my android emulator

00:14:03,320 --> 00:14:11,240
and I try to watch the data directory of

00:14:07,279 --> 00:14:13,700
the application and basically try to see

00:14:11,240 --> 00:14:15,920
whether if there is any payload that was

00:14:13,700 --> 00:14:19,550
created do note that the watch function

00:14:15,920 --> 00:14:22,760
there's a two second it's a two second

00:14:19,550 --> 00:14:24,829
frequency so the DD function should be

00:14:22,760 --> 00:14:27,310
executed even faster than me so if you

00:14:24,829 --> 00:14:27,310
note this

00:14:33,890 --> 00:14:40,070
so do not be a flash player application

00:14:37,040 --> 00:14:43,190
once the malware has been executed the

00:14:40,070 --> 00:14:49,160
icon is no longer there which i think is

00:14:43,190 --> 00:14:50,480
pretty interesting so there's a lot of

00:14:49,160 --> 00:14:51,920
thing it will basically mess up with

00:14:50,480 --> 00:14:53,930
your accessibility so that on your

00:14:51,920 --> 00:14:56,240
device the whole thing will be different

00:14:53,930 --> 00:15:00,529
and yeah you can see that flash player

00:14:56,240 --> 00:15:02,930
is no longer there and even only to me

00:15:00,529 --> 00:15:06,110
Noah so we were not able to see any

00:15:02,930 --> 00:15:07,970
meaningful payload because once the a

00:15:06,110 --> 00:15:10,100
binary once the payload was done I want

00:15:07,970 --> 00:15:12,829
once the pillar was created it will be

00:15:10,100 --> 00:15:14,720
removed by the way and so right now what

00:15:12,829 --> 00:15:17,570
I did is basically I removed the Android

00:15:14,720 --> 00:15:19,630
malware and had I reinstall again this

00:15:17,570 --> 00:15:21,320
is a bad idea

00:15:19,630 --> 00:15:23,529
yeah exactly

00:15:21,320 --> 00:15:27,110
so certain malware they are really smart

00:15:23,529 --> 00:15:31,459
the only package the say the native

00:15:27,110 --> 00:15:33,170
library into arm on binary and and

00:15:31,459 --> 00:15:34,970
support ARM architecture but just that

00:15:33,170 --> 00:15:38,690
it would be really really slow and they

00:15:34,970 --> 00:15:40,519
will they were sort of encouraged user

00:15:38,690 --> 00:15:44,470
or reverse engineer to do it on their

00:15:40,519 --> 00:15:44,470
real point which is a bad thing but yeah

00:15:45,970 --> 00:15:51,290
right now I'm reinstalling the malware

00:15:48,620 --> 00:15:53,630
not learning my lesson and you can see

00:15:51,290 --> 00:15:55,690
that flash figure there is there so the

00:15:53,630 --> 00:15:59,870
difference this time is that I will be

00:15:55,690 --> 00:16:01,579
initializing the the application with

00:15:59,870 --> 00:16:04,339
Frida to perform what

00:16:01,579 --> 00:16:06,709
Frida call a early instrumentation so

00:16:04,339 --> 00:16:09,320
when the application was being loaded it

00:16:06,709 --> 00:16:11,510
is stopped it basically prevented from

00:16:09,320 --> 00:16:14,209
executing any instruction that her have

00:16:11,510 --> 00:16:15,829
in the app binary and they tried to hook

00:16:14,209 --> 00:16:18,260
onto the function before the actual

00:16:15,829 --> 00:16:20,029
function was executed and the function

00:16:18,260 --> 00:16:23,540
that we hope this time is basically a

00:16:20,029 --> 00:16:25,870
low-level function okay they start my

00:16:23,540 --> 00:16:25,870
Venus

00:16:30,590 --> 00:16:34,160
so when I resume it you can see that

00:16:32,360 --> 00:16:36,080
there's a lot unlink function that was

00:16:34,160 --> 00:16:37,430
being triggered and then the pedo will

00:16:36,080 --> 00:16:39,890
basically try to hook on to every single

00:16:37,430 --> 00:16:44,390
one of them and replace it with this

00:16:39,890 --> 00:16:46,010
error message that we know and then you

00:16:44,390 --> 00:16:50,750
can see that the malware will be

00:16:46,010 --> 00:16:53,450
executed right now or basically SSH into

00:16:50,750 --> 00:16:56,560
the emulator again and you will be able

00:16:53,450 --> 00:16:56,560
to see some differences

00:17:03,730 --> 00:17:08,919
so know if you can see the jump out here

00:17:07,209 --> 00:17:12,730
and also the next ball is basically the

00:17:08,919 --> 00:17:14,829
payload that the binary are executed to

00:17:12,730 --> 00:17:18,250
give you an idea of when you download

00:17:14,829 --> 00:17:26,079
the malware and and this dump payload

00:17:18,250 --> 00:17:27,970
what is the difference basically so it's

00:17:26,079 --> 00:17:30,760
all gibberish and then if you compare to

00:17:27,970 --> 00:17:33,549
the dump malware you can start seeing

00:17:30,760 --> 00:17:35,500
that it is cutting in ten and also they

00:17:33,549 --> 00:17:37,779
are registering register and do even

00:17:35,500 --> 00:17:39,519
more stuff so this is the echo pedal and

00:17:37,779 --> 00:17:41,799
if anybody would try to reverse engineer

00:17:39,519 --> 00:17:44,169
you static application not running them

00:17:41,799 --> 00:17:50,679
oh it so will not be able to see

00:17:44,169 --> 00:17:52,029
anything just an example and over here

00:17:50,679 --> 00:17:54,190
you can see that they basically use a

00:17:52,029 --> 00:17:58,659
lot of Java reflection to confuse the

00:17:54,190 --> 00:18:01,059
reverse engineer and over here most of

00:17:58,659 --> 00:18:02,559
the functions and stuff you will be able

00:18:01,059 --> 00:18:05,850
to follow them and you could start

00:18:02,559 --> 00:18:08,769
seeing even more Android native ignorant

00:18:05,850 --> 00:18:11,289
so this is just a small example PETA has

00:18:08,769 --> 00:18:14,139
been a open source project since this

00:18:11,289 --> 00:18:16,240
time and it has been here came a long

00:18:14,139 --> 00:18:17,769
way and if anybody wanted to get into

00:18:16,240 --> 00:18:26,470
the dinery instrumentation I would

00:18:17,769 --> 00:18:30,610
recommend you guys to try it so summer

00:18:26,470 --> 00:18:34,149
recommendation for Banting occurs for

00:18:30,610 --> 00:18:35,139
application developer this means a

00:18:34,149 --> 00:18:36,850
different thing to you if you're

00:18:35,139 --> 00:18:43,059
creating a game anybody could able to

00:18:36,850 --> 00:18:45,700
hook on to fight the the airport you go

00:18:43,059 --> 00:18:47,440
what oh it's very important to for you

00:18:45,700 --> 00:18:49,539
to understand as an app developer or

00:18:47,440 --> 00:18:50,590
whatever unless to consider what portion

00:18:49,539 --> 00:18:52,059
of the logic should be on the

00:18:50,590 --> 00:18:54,250
client-side and what portion of the

00:18:52,059 --> 00:18:55,539
logic should be on the server side even

00:18:54,250 --> 00:18:58,510
in grab a saw is a very hard thing

00:18:55,539 --> 00:19:00,760
because sometimes the developer wanted

00:18:58,510 --> 00:19:02,080
something to be optimized further so

00:19:00,760 --> 00:19:04,720
they wanted the logic to be on the

00:19:02,080 --> 00:19:06,639
client side which is something that we

00:19:04,720 --> 00:19:08,909
always try to check with them okay this

00:19:06,639 --> 00:19:11,710
this instrumentation thing happens and

00:19:08,909 --> 00:19:13,629
the environment that the most of the

00:19:11,710 --> 00:19:15,840
hacker or whoever so you have no control

00:19:13,629 --> 00:19:15,840
with that

00:19:17,380 --> 00:19:24,050
all right I think that that's it I mean

00:19:20,330 --> 00:19:26,840
we sing mobile engine vacation TV go so

00:19:24,050 --> 00:19:29,930
do not do it there is some practical use

00:19:26,840 --> 00:19:31,370
cases oh there was this guy who built in

00:19:29,930 --> 00:19:33,200
iOS application and he tried to

00:19:31,370 --> 00:19:36,950
reverse-engineer uber app and all other

00:19:33,200 --> 00:19:38,690
application and couple all year

00:19:36,950 --> 00:19:40,970
deepening that all other application

00:19:38,690 --> 00:19:43,460
registered in his application so you

00:19:40,970 --> 00:19:45,830
could able to automate so then flock

00:19:43,460 --> 00:19:49,250
said that every nine o'clock you order a

00:19:45,830 --> 00:19:50,570
grab car from or uber car from Lifelong

00:19:49,250 --> 00:19:53,240
Learning Institute through the airport

00:19:50,570 --> 00:19:54,530
so he was engineering and he built a

00:19:53,240 --> 00:19:56,150
application all of it and Apple

00:19:54,530 --> 00:20:00,260
eventually appointment I can't remember

00:19:56,150 --> 00:20:03,650
the name so there's all my contact

00:20:00,260 --> 00:20:06,530
emails if anything you could ask me and

00:20:03,650 --> 00:20:08,420
yeah not surprised grab is hiring hiring

00:20:06,530 --> 00:20:14,920
software engineers agree guys and also

00:20:08,420 --> 00:20:14,920
drivers alright any questions

00:20:22,230 --> 00:20:25,349
[Music]

00:20:33,039 --> 00:20:36,039
setup

00:20:36,480 --> 00:20:39,480
yeah

00:20:46,140 --> 00:20:51,580
did anyone have any questions so it was

00:20:49,900 --> 00:20:53,560
this guy called Aldi I think he's from

00:20:51,580 --> 00:20:57,750
Norway and then it was partially

00:20:53,560 --> 00:20:57,750

YouTube URL: https://www.youtube.com/watch?v=-RHIVcg8GfM


