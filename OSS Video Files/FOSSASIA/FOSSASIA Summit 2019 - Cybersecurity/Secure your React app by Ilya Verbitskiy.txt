Title: Secure your React app by Ilya Verbitskiy
Publication date: 2019-03-25
Playlist: FOSSASIA Summit 2019 - Cybersecurity
Description: 
	16 March 2019 15:40, Training Room 9-2/9-3

One of the application security golden rules is you should never build security system from scratch if possible. In the following session the audience will learn about a boilerplate solution for a React applications that includes preconfigured SSO via open source IdentityServer4 and a set of authentication and authorization React components, including secure routing for react-router, shared claims storage, refresh tokens, etc.
Captions: 
	00:00:00,000 --> 00:00:05,069
particular when you think about security

00:00:02,700 --> 00:00:07,830
it's mostly server-side firewalls or

00:00:05,069 --> 00:00:10,769
some injection of the server but usually

00:00:07,830 --> 00:00:13,679
when people develop apps especially cuz

00:00:10,769 --> 00:00:15,420
they do it SPS and they're doing all the

00:00:13,679 --> 00:00:18,170
front had work we usually don't think

00:00:15,420 --> 00:00:20,760
about security and that's that okay

00:00:18,170 --> 00:00:22,650
first look nervous myself I am read

00:00:20,760 --> 00:00:26,070
every bit Sookie I'm a co-founder of a

00:00:22,650 --> 00:00:28,289
company called episode Estero and our

00:00:26,070 --> 00:00:31,399
company helps people to bring the

00:00:28,289 --> 00:00:35,390
security but the ecommerce startups and

00:00:31,399 --> 00:00:35,390
they working mostly in e-commerce field

00:00:36,380 --> 00:00:43,530
react so this is survey Monica

00:00:40,530 --> 00:00:45,360
JavaScript work from 2018 and ie as you

00:00:43,530 --> 00:00:48,360
can see that react is the most adaptive

00:00:45,360 --> 00:00:50,700
framework nowadays and like if you go to

00:00:48,360 --> 00:00:52,440
medium or like other web sources you'll

00:00:50,700 --> 00:00:54,719
find out that people talking about the

00:00:52,440 --> 00:00:56,460
act a lot but unfortunately not talking

00:00:54,719 --> 00:01:01,109
too much about security in react how to

00:00:56,460 --> 00:01:04,769
build secure apps that's the two of us

00:01:01,109 --> 00:01:08,119
so I was purser rating like a most

00:01:04,769 --> 00:01:10,860
popular security issues and is recently

00:01:08,119 --> 00:01:14,670
clearly new list so as you can see

00:01:10,860 --> 00:01:18,150
they're more or less the same and if you

00:01:14,670 --> 00:01:20,759
pick up two front and side those are the

00:01:18,150 --> 00:01:24,110
two common issues like process shifting

00:01:20,759 --> 00:01:28,220
it's like a common one in that world and

00:01:24,110 --> 00:01:30,990
thanks God in 2017 it's less popular and

00:01:28,220 --> 00:01:36,750
you know we still use vulnerable

00:01:30,990 --> 00:01:40,170
components and I think that if the

00:01:36,750 --> 00:01:42,390
issues came from raising my number three

00:01:40,170 --> 00:01:44,579
to number seven because we have a lot of

00:01:42,390 --> 00:01:46,159
automated tools like even some machine

00:01:44,579 --> 00:01:49,979
learning practices how to prevent

00:01:46,159 --> 00:01:52,560
developers writing bad code but we have

00:01:49,979 --> 00:01:54,600
another issue and like broken

00:01:52,560 --> 00:01:57,509
applications or sensitive data exposure

00:01:54,600 --> 00:01:58,880
this is not about technology it's more

00:01:57,509 --> 00:02:02,700
about people and it's more about

00:01:58,880 --> 00:02:04,710
developers how good your code quality is

00:02:02,700 --> 00:02:08,789
and if you think about security in

00:02:04,710 --> 00:02:11,069
advance so let's go through this and see

00:02:08,789 --> 00:02:13,470
how the tissues can appear in your

00:02:11,069 --> 00:02:16,920
front-end SPS and react

00:02:13,470 --> 00:02:18,480
how we can avoid them so let start is

00:02:16,920 --> 00:02:22,350
broken notification this is a very very

00:02:18,480 --> 00:02:24,540
common issue because think on in any

00:02:22,350 --> 00:02:27,690
application you have to login you have

00:02:24,540 --> 00:02:29,790
taught authorized users and sometimes

00:02:27,690 --> 00:02:33,240
don't think about how to drop rain and

00:02:29,790 --> 00:02:35,190
especially in single page applications

00:02:33,240 --> 00:02:37,440
you first of all you have to think how

00:02:35,190 --> 00:02:39,180
you can measure your like how you're

00:02:37,440 --> 00:02:41,940
going to store your sessions and there

00:02:39,180 --> 00:02:44,690
are not so many ways of doing this the

00:02:41,940 --> 00:02:49,590
most common one is use serious cookies

00:02:44,690 --> 00:02:52,290
so basically out to rise your user and

00:02:49,590 --> 00:02:55,140
he gets a cookie and then you just pass

00:02:52,290 --> 00:02:58,020
it this cookie all the time but it's

00:02:55,140 --> 00:03:00,180
okay if you we have a care one

00:02:58,020 --> 00:03:01,680
standalone multiplication but if you're

00:03:00,180 --> 00:03:03,840
talking about micro services world when

00:03:01,680 --> 00:03:05,610
you have all bunch of different services

00:03:03,840 --> 00:03:13,290
talking to each other it's not that

00:03:05,610 --> 00:03:15,630
useful so that's why that's one like ggw

00:03:13,290 --> 00:03:19,290
top and select other the tokens came on

00:03:15,630 --> 00:03:23,239
board and you can store your tokens in

00:03:19,290 --> 00:03:26,790
web browser local storage in this case

00:03:23,239 --> 00:03:28,680
you you in your JavaScript code god know

00:03:26,790 --> 00:03:30,120
what it is and you have some pale some

00:03:28,680 --> 00:03:34,530
data and you can pass it to different

00:03:30,120 --> 00:03:36,510
micro services but web storage is not

00:03:34,530 --> 00:03:38,760
that good from performance point of view

00:03:36,510 --> 00:03:41,160
is like synchronized calls and it's a

00:03:38,760 --> 00:03:43,280
bit slow sometimes another option is you

00:03:41,160 --> 00:03:46,890
can use indexeddb that's a more modern

00:03:43,280 --> 00:03:49,530
thinking about web world so it's kind of

00:03:46,890 --> 00:03:51,450
built in database for any web browser it

00:03:49,530 --> 00:03:53,190
synchronous so it works faster but it

00:03:51,450 --> 00:03:54,540
has a really horrible interface so

00:03:53,190 --> 00:03:56,340
usually have some wrappers on top of

00:03:54,540 --> 00:04:04,739
that to make a contact more less

00:03:56,340 --> 00:04:06,390
readable so insecure cookies just a fool

00:04:04,739 --> 00:04:09,810
like when you get a cookie from a server

00:04:06,390 --> 00:04:12,690
it has some parameters and first you

00:04:09,810 --> 00:04:14,670
must set your flag to be true and it

00:04:12,690 --> 00:04:19,140
means that your cookie will be passed

00:04:14,670 --> 00:04:24,110
only over HTTP protocol so you cannot

00:04:19,140 --> 00:04:26,790
see that a code snippet then you use

00:04:24,110 --> 00:04:28,320
HTTP only flag for the cookie it me

00:04:26,790 --> 00:04:31,230
your browser from Joseph it doesn't have

00:04:28,320 --> 00:04:34,650
access to it and in this way you protect

00:04:31,230 --> 00:04:36,090
from excessive attacks the problem is if

00:04:34,650 --> 00:04:38,010
you have some payload in this cookie

00:04:36,090 --> 00:04:40,790
that you want to use in your sba then

00:04:38,010 --> 00:04:45,330
this approach is not going to work

00:04:40,790 --> 00:04:47,520
this is a new file called same side

00:04:45,330 --> 00:04:50,570
chick it means if you have a cookie and

00:04:47,520 --> 00:04:54,270
if you're passing it to your security

00:04:50,570 --> 00:04:55,590
endpoint the cookie will be passed to

00:04:54,270 --> 00:04:58,410
the brought by browser only to a

00:04:55,590 --> 00:05:02,820
particular domain and in this case you

00:04:58,410 --> 00:05:04,170
avoid CSRF attack so and all modern

00:05:02,820 --> 00:05:07,680
browsers support it and it's highly

00:05:04,170 --> 00:05:12,750
recommended to start using and then you

00:05:07,680 --> 00:05:14,610
could stop expression expression date

00:05:12,750 --> 00:05:17,430
and time for your cookies as well so

00:05:14,610 --> 00:05:18,930
please don't create like a long like one

00:05:17,430 --> 00:05:25,860
year leaving to life cookies because

00:05:18,930 --> 00:05:28,190
then the nested approach s session

00:05:25,860 --> 00:05:30,630
management we adjacent that tokens I

00:05:28,190 --> 00:05:33,240
have to say that's probably the most

00:05:30,630 --> 00:05:36,270
popular way how you do authentication or

00:05:33,240 --> 00:05:38,430
session management nowadays especially

00:05:36,270 --> 00:05:40,710
in single page applications so this is

00:05:38,430 --> 00:05:42,750
the open standard and it's a stateless

00:05:40,710 --> 00:05:44,580
token that he uses with most of

00:05:42,750 --> 00:05:48,870
authorization and information exchange

00:05:44,580 --> 00:05:50,730
if you have a multiple rest endpoint and

00:05:48,870 --> 00:05:52,980
you want to pass some information about

00:05:50,730 --> 00:06:00,050
user roles or something else you can

00:05:52,980 --> 00:06:02,210
keep it in the document so it has three

00:06:00,050 --> 00:06:04,710
three sections the first section is

00:06:02,210 --> 00:06:06,300
information about what algorithm using

00:06:04,710 --> 00:06:08,280
equity signature algorithm for that

00:06:06,300 --> 00:06:11,430
because they're signed with a priority

00:06:08,280 --> 00:06:13,610
or with your public and private key

00:06:11,430 --> 00:06:16,590
depending on the only configuration so

00:06:13,610 --> 00:06:18,900
header its encryption

00:06:16,590 --> 00:06:21,660
information then you have payload this

00:06:18,900 --> 00:06:22,080
is a great one and then you have us in

00:06:21,660 --> 00:06:24,540
nature

00:06:22,080 --> 00:06:27,210
you have different options how you can

00:06:24,540 --> 00:06:30,390
sign the sign your tokens you can use h

00:06:27,210 --> 00:06:33,540
Mac and in this case you use one private

00:06:30,390 --> 00:06:38,389
key is it might be shared between all

00:06:33,540 --> 00:06:40,550
your micro services or you can use RSA

00:06:38,389 --> 00:06:48,050
no you just have to you know just have

00:06:40,550 --> 00:06:51,069
to share your public key to be in it so

00:06:48,050 --> 00:06:53,330
injustice if you use it a full library

00:06:51,069 --> 00:06:55,280
if you want to work with Jada which is

00:06:53,330 --> 00:07:01,039
Dawkins and you most probably will use

00:06:55,280 --> 00:07:04,370
JSON web token and NPM package and in

00:07:01,039 --> 00:07:08,419
case you want to create a talk and where

00:07:04,370 --> 00:07:11,930
your payload is encrypted that protein

00:07:08,419 --> 00:07:13,370
arises when you wanna do that because in

00:07:11,930 --> 00:07:16,159
this case you have to deliver your

00:07:13,370 --> 00:07:19,699
secret key to the client it's not secure

00:07:16,159 --> 00:07:22,490
so this is a standard called gwe

00:07:19,699 --> 00:07:24,139
and Jade of the ass in this case and

00:07:22,490 --> 00:07:27,710
this library to work with that

00:07:24,139 --> 00:07:30,020
it's called no JoJo's yeah if you need

00:07:27,710 --> 00:07:41,569
some encryption inside Jada was tokens

00:07:30,020 --> 00:07:44,719
and you can place it so in 2017 we have

00:07:41,569 --> 00:07:47,690
another vulnerability in security

00:07:44,719 --> 00:07:51,139
civilization it means that let's say you

00:07:47,690 --> 00:07:52,639
have a token and you you can put some

00:07:51,139 --> 00:07:55,729
information a payload for example user

00:07:52,639 --> 00:07:58,279
ID and then what happens on the on the

00:07:55,729 --> 00:08:00,740
server side you send this token and you

00:07:58,279 --> 00:08:02,599
don't check your example your signature

00:08:00,740 --> 00:08:06,139
that is like white out there is most

00:08:02,599 --> 00:08:08,960
used and it means that malicious guy can

00:08:06,139 --> 00:08:10,729
just go and change you know the user ID

00:08:08,960 --> 00:08:13,460
and authenticate a different user

00:08:10,729 --> 00:08:17,770
and I once to have seen it a few times

00:08:13,460 --> 00:08:23,770
to very bad and see token

00:08:17,770 --> 00:08:27,800
patient is vulnerable to this thing so

00:08:23,770 --> 00:08:31,039
is a standard they have different

00:08:27,800 --> 00:08:32,390
headers we can specify your algorithm

00:08:31,039 --> 00:08:35,390
algorithm you can specify your

00:08:32,390 --> 00:08:41,949
expression expression or you can specify

00:08:35,390 --> 00:08:44,560
like who creates the token so other and

00:08:41,949 --> 00:08:47,720
it could be asymmetrical isometric and

00:08:44,560 --> 00:08:50,810
then in your payload you can specify the

00:08:47,720 --> 00:08:52,310
expression time who you know like domain

00:08:50,810 --> 00:08:55,550
name who creates the token

00:08:52,310 --> 00:09:05,180
and you can do like please use talking

00:08:55,550 --> 00:09:07,220
like in 15 minutes or so so the ruse for

00:09:05,180 --> 00:09:09,080
validation is first of all whenever

00:09:07,220 --> 00:09:12,770
jitterbugging comes to you make sure

00:09:09,080 --> 00:09:14,810
that but other it misused for example

00:09:12,770 --> 00:09:18,320
you can create a token this algorithm

00:09:14,810 --> 00:09:21,440
because done it means it's not signed

00:09:18,320 --> 00:09:23,630
and you like few years ago it was a

00:09:21,440 --> 00:09:26,570
common security issue

00:09:23,630 --> 00:09:28,370
so even like a libraries like whitey you

00:09:26,570 --> 00:09:29,930
snipers they didn't check algorithm out

00:09:28,370 --> 00:09:33,770
of the box so you can create a token

00:09:29,930 --> 00:09:35,690
with others none and then you the

00:09:33,770 --> 00:09:40,870
libraries pass the validation even if

00:09:35,690 --> 00:09:42,920
they request in nature you must specify

00:09:40,870 --> 00:09:45,470
obviously like expression point

00:09:42,920 --> 00:09:47,270
expression time and it should be I in

00:09:45,470 --> 00:09:55,000
case JWT should be as short as possible

00:09:47,270 --> 00:09:59,180
like 10-15 minutes maximum so and

00:09:55,000 --> 00:10:01,700
finally this is a table you can see like

00:09:59,180 --> 00:10:05,420
different vulnerabilities and maker how

00:10:01,700 --> 00:10:06,860
to protect against them so I think since

00:10:05,420 --> 00:10:08,990
the same side

00:10:06,860 --> 00:10:11,300
cookie flag is widely adopted I'll

00:10:08,990 --> 00:10:13,580
probably recommend to use cookies

00:10:11,300 --> 00:10:15,710
nowadays if you don't need to do

00:10:13,580 --> 00:10:17,510
something on the client-side but make

00:10:15,710 --> 00:10:21,700
sure you use this same side flag because

00:10:17,510 --> 00:10:21,700
then you immune to its ref as well

00:10:26,470 --> 00:10:34,990
another common family of security issues

00:10:31,430 --> 00:10:38,540
when developers just don't think about

00:10:34,990 --> 00:10:41,420
don't check all their permissions on the

00:10:38,540 --> 00:10:45,170
pants tight on the server side in terms

00:10:41,420 --> 00:10:48,920
of react if you check any like a

00:10:45,170 --> 00:10:51,440
enterprise mole as big enterprise

00:10:48,920 --> 00:10:54,260
application you will see like spaghetti

00:10:51,440 --> 00:10:57,890
code like this if your role is equals

00:10:54,260 --> 00:10:59,480
ease and render something and it's like

00:10:57,890 --> 00:11:02,420
if you have put like this it's really

00:10:59,480 --> 00:11:04,250
hard to maintain it let's say you I got

00:11:02,420 --> 00:11:05,720
a new security role and you have to

00:11:04,250 --> 00:11:07,370
change you

00:11:05,720 --> 00:11:08,509
interface based on that it means you

00:11:07,370 --> 00:11:11,689
have to go through all the code and

00:11:08,509 --> 00:11:15,740
apply the fix there's the solution for

00:11:11,689 --> 00:11:18,800
that there's a library called Castle so

00:11:15,740 --> 00:11:20,959
Castle is a component where you have a

00:11:18,800 --> 00:11:23,810
one data store for your authorization

00:11:20,959 --> 00:11:26,120
policy whenever you open to get user you

00:11:23,810 --> 00:11:27,860
get all his permissions and then you

00:11:26,120 --> 00:11:31,490
have like one datastore and then you can

00:11:27,860 --> 00:11:35,500
have react component that would render

00:11:31,490 --> 00:11:40,339
your application based on your role so

00:11:35,500 --> 00:11:44,420
you installed after have the after you

00:11:40,339 --> 00:11:48,379
install a package you define your policy

00:11:44,420 --> 00:11:51,050
so if you look like this so you can view

00:11:48,379 --> 00:11:52,720
all it means the current user has

00:11:51,050 --> 00:11:57,470
read-only access to the system and

00:11:52,720 --> 00:12:02,959
nothing more after has the policy you

00:11:57,470 --> 00:12:07,009
get as it called can't can component can

00:12:02,959 --> 00:12:09,439
component will look like this so you

00:12:07,009 --> 00:12:12,559
just wrap your code we are literally can

00:12:09,439 --> 00:12:16,970
and you specify here what action and

00:12:12,559 --> 00:12:20,509
what is your subject so here we check if

00:12:16,970 --> 00:12:26,269
I can update a page then we render

00:12:20,509 --> 00:12:30,529
updating another problem is react as

00:12:26,269 --> 00:12:33,949
always any SP that we reuse client-side

00:12:30,529 --> 00:12:39,230
routing means that like we manage all

00:12:33,949 --> 00:12:43,639
the URLs in the browser and in case of

00:12:39,230 --> 00:12:46,309
react the probably go to solution is is

00:12:43,639 --> 00:12:48,230
the router but reactor also doesn't

00:12:46,309 --> 00:12:51,319
support your authorization features

00:12:48,230 --> 00:12:55,339
out-of-the-box this is the code how you

00:12:51,319 --> 00:13:00,910
can wrap your router with this canvas

00:12:55,339 --> 00:13:03,500
castle and check your permissions and

00:13:00,910 --> 00:13:06,860
after that you put your routing would

00:13:03,500 --> 00:13:09,439
look like this so if I can update a page

00:13:06,860 --> 00:13:11,660
then I can go to update URL otherwise

00:13:09,439 --> 00:13:15,040
your user will be rejected to a login

00:13:11,660 --> 00:13:15,040
page or access denied

00:13:16,880 --> 00:13:23,820
so that's the date exposure if that's

00:13:21,240 --> 00:13:27,920
another new family or vulnerabilities

00:13:23,820 --> 00:13:29,880
and the reason is developers don't

00:13:27,920 --> 00:13:32,010
usually don't think about how they're

00:13:29,880 --> 00:13:34,410
managing and encryption of the workers

00:13:32,010 --> 00:13:36,540
encryption or for example as we saw in

00:13:34,410 --> 00:13:39,360
the previous talk what data you're going

00:13:36,540 --> 00:13:42,480
to exposed to public okay

00:13:39,360 --> 00:13:44,930
so in case of hacker any web development

00:13:42,480 --> 00:13:49,140
please make sure that you use the

00:13:44,930 --> 00:13:50,580
encryption nowadays and it now you don't

00:13:49,140 --> 00:13:52,140
need even to pay for that your

00:13:50,580 --> 00:13:55,950
certificate just go and use let's

00:13:52,140 --> 00:13:58,260
encrypt and if you talking about

00:13:55,950 --> 00:14:01,200
client-side modern browsers are smart

00:13:58,260 --> 00:14:07,410
enough to encrypt the data on the client

00:14:01,200 --> 00:14:09,570
so this w g CC c standard called back to

00:14:07,410 --> 00:14:11,880
play api so it provides you the

00:14:09,570 --> 00:14:17,190
symmetric and asymmetric encryption so

00:14:11,880 --> 00:14:23,220
like you can do our sage elliptic curves

00:14:17,190 --> 00:14:25,680
or is encryption on the play and if you

00:14:23,220 --> 00:14:30,030
have to do this other browsers you can

00:14:25,680 --> 00:14:32,280
use standard library and i didn't

00:14:30,030 --> 00:14:34,500
perform a testing it's it's quite quite

00:14:32,280 --> 00:14:37,440
for me especially if your anger done not

00:14:34,500 --> 00:14:39,870
yes it provides you almost same

00:14:37,440 --> 00:14:47,040
performance as open itself built-in

00:14:39,870 --> 00:14:49,410
encryption other okay process teaching

00:14:47,040 --> 00:14:53,610
lovely one that is still alive

00:14:49,410 --> 00:14:55,530
unfortunately let's a be like warm to up

00:14:53,610 --> 00:15:00,170
a pan you can talk a few hours how you

00:14:55,530 --> 00:15:05,160
can hack react because it's not that

00:15:00,170 --> 00:15:08,040
secure as you may think of but let's

00:15:05,160 --> 00:15:10,050
concentrate on what how we can prevent

00:15:08,040 --> 00:15:15,630
our developers writing bad code and

00:15:10,050 --> 00:15:20,160
preventing exercise you if you create

00:15:15,630 --> 00:15:21,779
your application using create react app

00:15:20,160 --> 00:15:24,980
this like a go-to solution for react

00:15:21,779 --> 00:15:27,890
then it will bring yes lien by default

00:15:24,980 --> 00:15:31,120
this is the plugin that you can help you

00:15:27,890 --> 00:15:32,860
this plugin for exercise

00:15:31,120 --> 00:15:36,390
there's a plugin that will check to

00:15:32,860 --> 00:15:42,040
secure some common security issues and

00:15:36,390 --> 00:15:44,740
mock them down here because you know

00:15:42,040 --> 00:15:46,510
like sometimes developers think ok I'm

00:15:44,740 --> 00:15:49,360
not going to write any like JavaScript

00:15:46,510 --> 00:15:51,190
code or HTML code on my front end I was

00:15:49,360 --> 00:15:54,300
just getting markdown file markdown is

00:15:51,190 --> 00:15:56,649
just text it's on HTML so I'm secure

00:15:54,300 --> 00:15:59,170
unfortunately that's not the case and I

00:15:56,649 --> 00:16:02,200
saw some examples my just markdown is

00:15:59,170 --> 00:16:06,089
converted to your HTML anyway and

00:16:02,200 --> 00:16:10,350
whenever markdown standard in react

00:16:06,089 --> 00:16:12,790
usually yeah it does not apply HTML

00:16:10,350 --> 00:16:16,000
inputting so it means whatever is

00:16:12,790 --> 00:16:17,470
rendered as a markdown out mark on

00:16:16,000 --> 00:16:21,100
rendered output will go to your browser

00:16:17,470 --> 00:16:22,450
and in you can add your like some

00:16:21,100 --> 00:16:24,310
malicious JavaScript malicious brought

00:16:22,450 --> 00:16:26,950
into markdown as well and this is

00:16:24,310 --> 00:16:29,620
another sample that I've seen in real

00:16:26,950 --> 00:16:33,180
life projects when is called coming from

00:16:29,620 --> 00:16:33,180
markdown and rendered in the browser

00:16:36,690 --> 00:16:46,600
using components with known

00:16:38,589 --> 00:16:50,890
vulnerabilities okay so it's 2019 so the

00:16:46,600 --> 00:16:54,300
good news are we have tools that can now

00:16:50,890 --> 00:16:57,700
eat other systems and after recent

00:16:54,300 --> 00:17:02,080
security problems in NPM and some

00:16:57,700 --> 00:17:05,339
modules warp well act like act and

00:17:02,080 --> 00:17:09,850
there's some bad code was added to them

00:17:05,339 --> 00:17:13,569
NPM came with this tool and be molded so

00:17:09,850 --> 00:17:15,880
whenever you do npm install NPM itself

00:17:13,569 --> 00:17:19,780
will check all your dependencies against

00:17:15,880 --> 00:17:23,319
security database and let you know if

00:17:19,780 --> 00:17:26,290
something is broken or not well and they

00:17:23,319 --> 00:17:29,230
also are trying to fix that um all these

00:17:26,290 --> 00:17:31,809
fix if it's possible to fix if like

00:17:29,230 --> 00:17:33,520
fixed version is just a minor change or

00:17:31,809 --> 00:17:35,740
the library you're using then should

00:17:33,520 --> 00:17:39,250
apply the changes otherwise you have to

00:17:35,740 --> 00:17:44,049
do it manually and there's there's not a

00:17:39,250 --> 00:17:45,879
protocol sneaked it's also quite popular

00:17:44,049 --> 00:17:48,309
it's not just about Joseph it's also I

00:17:45,879 --> 00:17:50,499
think is they do at Ruby and PHP as well

00:17:48,309 --> 00:18:00,009
so it's a big giant database of

00:17:50,499 --> 00:18:01,960
vulnerable components you can so it was

00:18:00,009 --> 00:18:05,409
like a really short brief introduction

00:18:01,960 --> 00:18:09,639
about what you can do right now to make

00:18:05,409 --> 00:18:12,639
your applications here as a summary I

00:18:09,639 --> 00:18:14,230
would adjust the first of all think

00:18:12,639 --> 00:18:15,879
about risk management because security

00:18:14,230 --> 00:18:19,509
is all about all about risk management

00:18:15,879 --> 00:18:22,450
if you're if you have a your website we

00:18:19,509 --> 00:18:24,249
just post your cat photos then probably

00:18:22,450 --> 00:18:26,859
not going to spend like a few hundred

00:18:24,249 --> 00:18:30,639
thousand dollars on security but if

00:18:26,859 --> 00:18:33,129
you're building a big ecommerce portal

00:18:30,639 --> 00:18:34,960
then you have to think about security a

00:18:33,129 --> 00:18:42,730
lot of time you have to have a budget

00:18:34,960 --> 00:18:46,600
for that also developers because as you

00:18:42,730 --> 00:18:48,340
can see the common issues are not

00:18:46,600 --> 00:18:50,409
because of tools but because of

00:18:48,340 --> 00:18:52,570
developers because the opposite don't

00:18:50,409 --> 00:18:53,739
think you know I don't think about how

00:18:52,570 --> 00:18:55,720
the application might be hacked and

00:18:53,739 --> 00:18:58,539
probably even don't know how the

00:18:55,720 --> 00:19:02,369
application might be hacked so education

00:18:58,539 --> 00:19:06,100
I think is like it's very important also

00:19:02,369 --> 00:19:07,720
if you can avoid writing code related

00:19:06,100 --> 00:19:11,649
security please do it if there is

00:19:07,720 --> 00:19:14,350
component just do that because most of

00:19:11,649 --> 00:19:16,029
those components a came from security

00:19:14,350 --> 00:19:19,269
companies and they all just at the end

00:19:16,029 --> 00:19:21,820
probably good companies know what

00:19:19,269 --> 00:19:25,119
they're writing and yeah don't trust in

00:19:21,820 --> 00:19:26,529
yet input it I'm talking here I'm

00:19:25,119 --> 00:19:29,559
talking no just talking about the user

00:19:26,529 --> 00:19:34,840
into the toaster from database for

00:19:29,559 --> 00:19:38,320
example there wasn't the case when so a

00:19:34,840 --> 00:19:39,909
markdown came from a third-party system

00:19:38,320 --> 00:19:42,509
and they came to the database and then

00:19:39,909 --> 00:19:45,720
was rendered on the website and in the

00:19:42,509 --> 00:19:51,309
data stream was some measures god

00:19:45,720 --> 00:19:54,789
basically yeah you you know no we have

00:19:51,309 --> 00:19:57,840
where you can get measurable and yeah

00:19:54,789 --> 00:19:59,760
automate yeah

00:19:57,840 --> 00:20:04,020
doctor made us watch that you can like

00:19:59,760 --> 00:20:07,309
use those automation yeah thank you

00:20:04,020 --> 00:20:07,309

YouTube URL: https://www.youtube.com/watch?v=iHYHcPwfwfk


