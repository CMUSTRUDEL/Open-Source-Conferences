Title: Open Vision Computer - An open source ROS based vision system - Luca Della Vedova
Publication date: 2020-04-02
Playlist: FOSSASIA Summit 2020 - Hardware & Firmware
Description: 
	The Open Vision Computer is a fully open source smart camera especially tailored for UAV applications and used in the past in the DARPA FLA program. The OVC 3 is the newest revision and includes three global shutter image sensors, two monochrome for stereo and one RGB for recognition, as well as an IMU and expansion capabilities for up to 11 cameras in parallel. It also runs Ubuntu 18.04 and ROS natively. The talk will introduce the architecture and capabilities of OVC for people who might want to use it and customize it for their application.

FOSSASIA Summit 2020 - Open Tech

Speaker: Luca Della Vedova, Embedded Systems Engineer Open Robotics
Captions: 
	00:00:04,879 --> 00:00:11,130
okay okay yeah

00:00:07,670 --> 00:00:13,620
okay so hello everyone hope you guys are

00:00:11,130 --> 00:00:15,150
all doing all right so I'm yeah I'm Luca

00:00:13,620 --> 00:00:17,430
and working in open robotics here in

00:00:15,150 --> 00:00:18,840
Singapore and I'm going to present about

00:00:17,430 --> 00:00:21,090
this project that we've been doing which

00:00:18,840 --> 00:00:22,350
is a hardware project which is called

00:00:21,090 --> 00:00:25,710
the open vision computer which is a

00:00:22,350 --> 00:00:28,230
fully open source Ross based vision

00:00:25,710 --> 00:00:30,599
system so first of all okay you know the

00:00:28,230 --> 00:00:32,340
usual runs of introductions so that's me

00:00:30,599 --> 00:00:36,480
and some teachers sometimes some time

00:00:32,340 --> 00:00:37,920
ago and I'm Luca and I'm working and you

00:00:36,480 --> 00:00:40,710
know doing embedded system stuff at

00:00:37,920 --> 00:00:42,000
opera robotics and other stuff also I've

00:00:40,710 --> 00:00:43,920
been doing you know embed this himself

00:00:42,000 --> 00:00:46,829
for like quite a few years by now about

00:00:43,920 --> 00:00:50,250
six years and like four years for our

00:00:46,829 --> 00:00:51,960
like robotics related stuff like mostly

00:00:50,250 --> 00:00:54,000
in drones before in an us and like

00:00:51,960 --> 00:00:58,559
recently in Opa robotics we like cameras

00:00:54,000 --> 00:01:00,180
and robotic arms and who we are if you

00:00:58,559 --> 00:01:02,039
guys work with robotic stuff before

00:01:00,180 --> 00:01:04,379
probably you heard of us but if you

00:01:02,039 --> 00:01:06,210
haven't and you know we do we do like

00:01:04,379 --> 00:01:10,979
open-source software and hardware for

00:01:06,210 --> 00:01:13,409
robotics and and yeah you know we we

00:01:10,979 --> 00:01:16,140
like that's our motto no we we use them

00:01:13,409 --> 00:01:18,540
to to solve important problems and

00:01:16,140 --> 00:01:20,640
helping other people to do as well and

00:01:18,540 --> 00:01:23,670
you know a bit of you know intro like

00:01:20,640 --> 00:01:25,320
our HQ is in Mountain View in California

00:01:23,670 --> 00:01:28,259
but we are a bit all over the place our

00:01:25,320 --> 00:01:31,020
second largest offices here in the US

00:01:28,259 --> 00:01:34,950
where we move about two and a half years

00:01:31,020 --> 00:01:36,110
ago by now and by then we have a bunch

00:01:34,950 --> 00:01:38,820
of people like scattered all over

00:01:36,110 --> 00:01:43,560
America and some but people also in

00:01:38,820 --> 00:01:47,670
Spain in Europe anyway so down to actual

00:01:43,560 --> 00:01:50,100
the actual presentations so I'm going to

00:01:47,670 --> 00:01:52,200
present about this open vision computer

00:01:50,100 --> 00:01:53,939
and this is a bit of the outline so

00:01:52,200 --> 00:01:56,640
first of all about the motivation why we

00:01:53,939 --> 00:01:59,250
why we built this project and then a bit

00:01:56,640 --> 00:02:00,840
of the the path that brought us to where

00:01:59,250 --> 00:02:02,729
we are today which we are the third

00:02:00,840 --> 00:02:05,280
iteration of this harder project and

00:02:02,729 --> 00:02:07,740
then you know a bit of talking about the

00:02:05,280 --> 00:02:10,050
architecture and how to actually cut you

00:02:07,740 --> 00:02:12,300
can customize and build your own future

00:02:10,050 --> 00:02:14,010
development and then not quite demos but

00:02:12,300 --> 00:02:15,360
like videos of like you know

00:02:14,010 --> 00:02:19,670
some simple applications that you can

00:02:15,360 --> 00:02:22,409
you can do with it so first of all why

00:02:19,670 --> 00:02:24,989
if so if some of you people work in

00:02:22,409 --> 00:02:28,860
robotics before there is generally need

00:02:24,989 --> 00:02:31,440
for as much cameras built like for smart

00:02:28,860 --> 00:02:33,090
for robotic applications and like some

00:02:31,440 --> 00:02:36,810
some popular examples are you know the

00:02:33,090 --> 00:02:39,450
interview sense or the Zed and the

00:02:36,810 --> 00:02:46,950
reason why those are useful is that they

00:02:39,450 --> 00:02:49,530
they help robot assist in in like in off

00:02:46,950 --> 00:02:52,560
sourcing some of the computation like to

00:02:49,530 --> 00:02:54,090
to the cameras and there is a lot of

00:02:52,560 --> 00:02:55,799
solutions out there but the problem is

00:02:54,090 --> 00:02:57,540
that none of the solutions existing

00:02:55,799 --> 00:02:59,519
right now are open source so they cannot

00:02:57,540 --> 00:03:01,109
be customized you just buy this black

00:02:59,519 --> 00:03:03,470
box you plug it to your computer then

00:03:01,109 --> 00:03:06,090
you hope it does what you want it to do

00:03:03,470 --> 00:03:09,000
and then also some of them like for

00:03:06,090 --> 00:03:10,829
example this said they actually use the

00:03:09,000 --> 00:03:12,569
host machine to do all the processing so

00:03:10,829 --> 00:03:17,069
they wouldn't like a powerful GPU for

00:03:12,569 --> 00:03:18,930
example so we decided to build the ovc

00:03:17,069 --> 00:03:20,699
which is fully open source both from a

00:03:18,930 --> 00:03:22,109
harder and from a software point of view

00:03:20,699 --> 00:03:25,590
and from a formal point of view of

00:03:22,109 --> 00:03:28,500
course and you also includes an FPGA so

00:03:25,590 --> 00:03:31,410
you can offload some of the most

00:03:28,500 --> 00:03:32,849
computationally intensive tasks from

00:03:31,410 --> 00:03:36,120
your machine you can offload them to the

00:03:32,849 --> 00:03:37,859
FPGA like semi computational power which

00:03:36,120 --> 00:03:39,829
is very very important for the complex

00:03:37,859 --> 00:03:42,530
robotics application where your

00:03:39,829 --> 00:03:45,299
computational power is somewhat limited

00:03:42,530 --> 00:03:47,129
and then you know but apart from you

00:03:45,299 --> 00:03:50,310
know all the customizations you can do

00:03:47,129 --> 00:03:54,569
in FPGA he offers what people need most

00:03:50,310 --> 00:03:56,549
commonly just out of the box so what

00:03:54,569 --> 00:04:00,299
people in robotics need most common is

00:03:56,549 --> 00:04:03,319
just sync images that are synchronized

00:04:00,299 --> 00:04:05,849
with a new data to the sensor fusion

00:04:03,319 --> 00:04:07,440
then then you know they will exterior

00:04:05,849 --> 00:04:10,500
images also synchronize with each other

00:04:07,440 --> 00:04:12,470
to do stiva matching and detect like the

00:04:10,500 --> 00:04:14,790
distance and depth of objects and

00:04:12,470 --> 00:04:16,440
features to do localization so all of

00:04:14,790 --> 00:04:18,479
those features are just offer out of the

00:04:16,440 --> 00:04:22,919
box without needing to do any sort of

00:04:18,479 --> 00:04:25,740
development by yourself so a brief

00:04:22,919 --> 00:04:27,780
history about the journey so the the

00:04:25,740 --> 00:04:30,500
journey started a few years ago we

00:04:27,780 --> 00:04:35,040
was called the open vision computer one

00:04:30,500 --> 00:04:37,139
which is like 2017 and it included so

00:04:35,040 --> 00:04:39,030
that the module you see in the middle is

00:04:37,139 --> 00:04:43,200
actually okay I would not move the mouse

00:04:39,030 --> 00:04:45,810
much anymore he's actually an Nvidia tx2

00:04:43,200 --> 00:04:48,060
so it was a fully embedded it was quite

00:04:45,810 --> 00:04:53,340
large he was here fully embedded that he

00:04:48,060 --> 00:04:56,910
was tailored for unimpeded tx2 and it

00:04:53,340 --> 00:04:59,310
was actually a text to another FPGA and

00:04:56,910 --> 00:05:01,860
he was actually used in the DARPA fella

00:04:59,310 --> 00:05:04,430
program which is one of the drones the

00:05:01,860 --> 00:05:07,500
drone you see over there in the picture

00:05:04,430 --> 00:05:11,210
but again so both this one and saw the

00:05:07,500 --> 00:05:13,770
second the second iteration was similar

00:05:11,210 --> 00:05:16,740
but it was it was more modular because

00:05:13,770 --> 00:05:19,650
now the D was a two part system so you

00:05:16,740 --> 00:05:21,360
could it was still designed for the tx2

00:05:19,650 --> 00:05:23,460
but was somewhat more modular because

00:05:21,360 --> 00:05:26,010
you have the imager module and then you

00:05:23,460 --> 00:05:29,280
have your computing module but it was

00:05:26,010 --> 00:05:33,000
still tailored for Nvidia tx2 and it was

00:05:29,280 --> 00:05:35,820
designed like one year later and so what

00:05:33,000 --> 00:05:40,260
what we learned quite quite quickly is

00:05:35,820 --> 00:05:45,200
that you know immediately x2 was amazing

00:05:40,260 --> 00:05:47,640
and great a few years ago but recently

00:05:45,200 --> 00:05:51,690
invidious as you know release a bunch of

00:05:47,640 --> 00:05:54,479
new modules which are great you know

00:05:51,690 --> 00:05:56,070
like orders of magnitude better I mean

00:05:54,479 --> 00:05:57,150
more probably not orders of mind is do

00:05:56,070 --> 00:05:58,830
but you know are they are much better

00:05:57,150 --> 00:05:59,990
with the latest and most amazing

00:05:58,830 --> 00:06:03,060
system-on-a-chip

00:05:59,990 --> 00:06:06,390
but they are completely incompatible

00:06:03,060 --> 00:06:08,190
with the tx2 alike you know with

00:06:06,390 --> 00:06:11,880
basically with whatever we developed

00:06:08,190 --> 00:06:14,720
before making it basically obsolete so

00:06:11,880 --> 00:06:17,370
what we decided to do is we decided to

00:06:14,720 --> 00:06:19,950
to do a completely different approach

00:06:17,370 --> 00:06:22,530
where now our camera is just a USB

00:06:19,950 --> 00:06:26,970
device which can be plugged to whatever

00:06:22,530 --> 00:06:28,350
is your computer of choice and then also

00:06:26,970 --> 00:06:30,330
know that there was also a bunch of

00:06:28,350 --> 00:06:32,010
other issues before that with the sensor

00:06:30,330 --> 00:06:34,350
we are using were very expensive so this

00:06:32,010 --> 00:06:36,060
is the the previous obvious were like

00:06:34,350 --> 00:06:38,220
very very expensive also because of that

00:06:36,060 --> 00:06:41,190
reason so now we simplified it a bit

00:06:38,220 --> 00:06:41,850
made it a just a USB camera and this is

00:06:41,190 --> 00:06:45,570
what brought

00:06:41,850 --> 00:06:48,720
to obviously three which is you know you

00:06:45,570 --> 00:06:50,840
know cheaper sensors and it's and it's

00:06:48,720 --> 00:06:53,670
you know much more much more flexible

00:06:50,840 --> 00:06:56,130
which is you know the the module that

00:06:53,670 --> 00:06:59,790
you see over here so just a brief

00:06:56,130 --> 00:07:03,090
overview so there is two monochrome

00:06:59,790 --> 00:07:04,920
sensors which is which are the one which

00:07:03,090 --> 00:07:06,600
are great for stereo matching because

00:07:04,920 --> 00:07:09,090
they have like greater spatial

00:07:06,600 --> 00:07:11,610
resolution and then there is a RGB

00:07:09,090 --> 00:07:13,380
sensor as well which can be used for

00:07:11,610 --> 00:07:15,680
object recognition for example if you

00:07:13,380 --> 00:07:20,160
want to like track or follow objects

00:07:15,680 --> 00:07:22,980
with your robot and then we have this we

00:07:20,160 --> 00:07:26,100
have our one of those modules that

00:07:22,980 --> 00:07:29,100
includes a system on a chip which has

00:07:26,100 --> 00:07:31,740
both quad core ARM processor and an FPGA

00:07:29,100 --> 00:07:34,050
fabric it's from Xilinx is called sync

00:07:31,740 --> 00:07:39,510
and then we rock them plenty of memory

00:07:34,050 --> 00:07:44,340
both RAM and non non-volatile memory to

00:07:39,510 --> 00:07:46,860
store your data and then also you know

00:07:44,340 --> 00:07:49,710
we have our chip a cell phone grid IMU

00:07:46,860 --> 00:07:51,870
that we use you know in case in case you

00:07:49,710 --> 00:07:53,610
know your application you know a simple

00:07:51,870 --> 00:07:55,770
mu is good enough for your application

00:07:53,610 --> 00:07:59,490
which is the case in many robotics

00:07:55,770 --> 00:08:02,190
applications and then you know that they

00:07:59,490 --> 00:08:05,460
may need the main interface which is USB

00:08:02,190 --> 00:08:07,920
3 type C so we have about five gigabit

00:08:05,460 --> 00:08:10,650
of bandwidth to the host machine through

00:08:07,920 --> 00:08:13,230
USB 3 that we use for both power and

00:08:10,650 --> 00:08:15,120
data and then you know a bunch of extra

00:08:13,230 --> 00:08:17,790
interfaces which can be useful if you

00:08:15,120 --> 00:08:19,350
want to interview want to let's say if

00:08:17,790 --> 00:08:21,750
you want additional storage you can use

00:08:19,350 --> 00:08:23,640
an SD card the interface or if you want

00:08:21,750 --> 00:08:26,370
to connect to external peripherals you

00:08:23,640 --> 00:08:28,260
also have an Ethernet interface which is

00:08:26,370 --> 00:08:31,980
great a thing for lighters because a lot

00:08:28,260 --> 00:08:33,510
of lighters run other Ethernet and then

00:08:31,980 --> 00:08:35,880
of course we design it to be quite

00:08:33,510 --> 00:08:38,969
modular so it can be expanded quite

00:08:35,880 --> 00:08:41,070
dramatically so we have like 4 core up

00:08:38,969 --> 00:08:43,440
to four additional stereo pairs that you

00:08:41,070 --> 00:08:46,260
can add so you can have up to 11 cameras

00:08:43,440 --> 00:08:47,760
in parallel so the the version I have

00:08:46,260 --> 00:08:50,250
here and we also have at the booth is

00:08:47,760 --> 00:08:53,310
having seven cameras in parallel so it's

00:08:50,250 --> 00:08:55,830
a bit downsized for simplicity and then

00:08:53,310 --> 00:08:58,490
we have an additional GPIO where you can

00:08:55,830 --> 00:09:00,420
put where you can add whatever

00:08:58,490 --> 00:09:03,660
peripheral we need that we use for

00:09:00,420 --> 00:09:06,060
example for additional cereal for this

00:09:03,660 --> 00:09:11,670
your interfaces or for additional I am

00:09:06,060 --> 00:09:14,339
use and sensors and this is this is an

00:09:11,670 --> 00:09:17,970
example of a board that you can build

00:09:14,339 --> 00:09:20,310
and use with your with your own like

00:09:17,970 --> 00:09:22,320
custom needs so the idea is that the

00:09:20,310 --> 00:09:24,000
main module is quite a complex module so

00:09:22,320 --> 00:09:28,110
you wouldn't really want to change it

00:09:24,000 --> 00:09:30,510
but because we offer this this GPIO that

00:09:28,110 --> 00:09:32,279
you can you can connect to and because

00:09:30,510 --> 00:09:34,680
it's an FPGA so everything can be

00:09:32,279 --> 00:09:37,050
reconfigured then you can you can

00:09:34,680 --> 00:09:39,930
actually build a very simple a lot much

00:09:37,050 --> 00:09:41,339
simpler board with whatever peripherals

00:09:39,930 --> 00:09:44,160
you need and you can just plug it so in

00:09:41,339 --> 00:09:45,890
this case we added a vector nav a bunch

00:09:44,160 --> 00:09:49,279
of serial interfaces and a bunch of

00:09:45,890 --> 00:09:51,779
debugging port which is great no mix

00:09:49,279 --> 00:09:55,649
customizing makes customizing the

00:09:51,779 --> 00:09:56,760
project like much much easier and then

00:09:55,649 --> 00:09:59,250
of course as I mentioned like the

00:09:56,760 --> 00:10:03,360
external cameras so also like a very

00:09:59,250 --> 00:10:04,680
like a much much simpler board compared

00:10:03,360 --> 00:10:08,910
to the main module that then you just

00:10:04,680 --> 00:10:11,279
connect through FFC connectors to to

00:10:08,910 --> 00:10:15,930
your camera and you can have up to four

00:10:11,279 --> 00:10:17,940
of those and then of course this was

00:10:15,930 --> 00:10:20,850
from the hardware point of view but then

00:10:17,940 --> 00:10:22,709
if you if you look into this software of

00:10:20,850 --> 00:10:24,120
course you can push algorithms to the

00:10:22,709 --> 00:10:29,070
fpga as i mentioned you know we do

00:10:24,120 --> 00:10:30,480
corner detection and then in because we

00:10:29,070 --> 00:10:33,149
also have a quad core and processor

00:10:30,480 --> 00:10:35,370
which is quite a powerful like 1.5

00:10:33,149 --> 00:10:37,589
gigahertz quad-core processor which runs

00:10:35,370 --> 00:10:40,890
up full Ubuntu distribution you can

00:10:37,589 --> 00:10:42,510
actually run whatever like whatever

00:10:40,890 --> 00:10:46,470
software you have that can be compiled

00:10:42,510 --> 00:10:49,470
on an embedded arm can be run on the on

00:10:46,470 --> 00:10:51,089
the see on this processor itself which

00:10:49,470 --> 00:10:55,980
again you know has quite a lot of power

00:10:51,089 --> 00:10:58,110
to it which is great you know just just

00:10:55,980 --> 00:11:00,750
a bit of info on architecture so this

00:10:58,110 --> 00:11:04,980
this camera was designed to be raus

00:11:00,750 --> 00:11:09,180
compatible and what it does is that on

00:11:04,980 --> 00:11:12,180
connection iran's you know IE runs us

00:11:09,180 --> 00:11:14,370
Ethernet over USB and then it tries to

00:11:12,180 --> 00:11:17,700
communicate to our Ross master running

00:11:14,370 --> 00:11:19,530
on on your machine and if you have a

00:11:17,700 --> 00:11:21,600
Roscoe a roastmaster running of your new

00:11:19,530 --> 00:11:23,040
machine then it's just literally plug

00:11:21,600 --> 00:11:27,060
and play like you connect it and then

00:11:23,040 --> 00:11:28,530
you get all your data streams and then

00:11:27,060 --> 00:11:30,240
you of course because it's very

00:11:28,530 --> 00:11:33,870
important a very synchronized data for

00:11:30,240 --> 00:11:35,910
robotics applications we have we

00:11:33,870 --> 00:11:38,460
synchronized the IMU and images together

00:11:35,910 --> 00:11:43,650
and we stand back we'd stab them with

00:11:38,460 --> 00:11:46,590
the Ross with the system time and then

00:11:43,650 --> 00:11:48,660
yes we you know fully fully integrated

00:11:46,590 --> 00:11:50,610
and fully reckon figure about content

00:11:48,660 --> 00:11:54,750
detection which is again also a great

00:11:50,610 --> 00:11:56,430
feature and of course like you know we

00:11:54,750 --> 00:12:00,300
wouldn't be here if the whole thing

00:11:56,430 --> 00:12:02,130
wasn't open-source so everything about

00:12:00,300 --> 00:12:04,530
it is open source so we have a

00:12:02,130 --> 00:12:07,650
repository called obviously or yeah

00:12:04,530 --> 00:12:10,380
there is over during get up so part of

00:12:07,650 --> 00:12:12,120
starting from the hardware files which

00:12:10,380 --> 00:12:16,110
are design we click Add and set the kick

00:12:12,120 --> 00:12:17,460
kick at speaker couldn't make it but

00:12:16,110 --> 00:12:21,630
yeah so with kick hell which is a great

00:12:17,460 --> 00:12:23,220
software by the way and the firmware is

00:12:21,630 --> 00:12:24,690
done with the stylings tools but it's

00:12:23,220 --> 00:12:27,270
done with a free version of the stylings

00:12:24,690 --> 00:12:28,860
tools so there is no need to like pinyin

00:12:27,270 --> 00:12:31,800
any license for that and we also

00:12:28,860 --> 00:12:34,410
released that released the project and

00:12:31,800 --> 00:12:36,170
the software itself is also like you

00:12:34,410 --> 00:12:40,140
know included in the in the repository

00:12:36,170 --> 00:12:42,750
but you know because to make it somewhat

00:12:40,140 --> 00:12:44,010
simpler for people we don't only provide

00:12:42,750 --> 00:12:47,160
the source but we only provide like

00:12:44,010 --> 00:12:48,870
binary files so if you don't want to you

00:12:47,160 --> 00:12:50,400
know build the whole thing from scratch

00:12:48,870 --> 00:12:52,800
by yourself and go through all the

00:12:50,400 --> 00:12:54,210
process of learning how the whole

00:12:52,800 --> 00:12:56,070
pipeline works because it's a very

00:12:54,210 --> 00:12:58,500
complex system we provide you know

00:12:56,070 --> 00:13:00,570
binary images that you can just you know

00:12:58,500 --> 00:13:04,290
upload to your module and then it just

00:13:00,570 --> 00:13:07,770
it just works and you know automatic

00:13:04,290 --> 00:13:10,350
update features which are also great so

00:13:07,770 --> 00:13:13,320
this is an example of you know the what

00:13:10,350 --> 00:13:14,940
what the project looks like in high card

00:13:13,320 --> 00:13:17,640
and you know also like you need some

00:13:14,940 --> 00:13:19,470
spirit like custom symbols that we also

00:13:17,640 --> 00:13:22,100
have a separate open source repository

00:13:19,470 --> 00:13:22,100
for

00:13:22,520 --> 00:13:30,200
and and then the the the actual firmware

00:13:27,950 --> 00:13:33,530
itself was designed in a very modular

00:13:30,200 --> 00:13:35,510
block design way so you can you can

00:13:33,530 --> 00:13:36,860
integrate your own pieces of code by

00:13:35,510 --> 00:13:38,240
just designing a block and like

00:13:36,860 --> 00:13:41,240
integrating it with the rest of the

00:13:38,240 --> 00:13:44,300
block design which is again as I

00:13:41,240 --> 00:13:46,970
mentioned just now we give all the

00:13:44,300 --> 00:13:48,230
project files available open source and

00:13:46,970 --> 00:13:52,610
like everything is done with a free

00:13:48,230 --> 00:13:54,050
version of the tools and again you know

00:13:52,610 --> 00:13:55,550
because we're because at the end of the

00:13:54,050 --> 00:13:59,230
day what we are doing is just running an

00:13:55,550 --> 00:14:02,180
Ubuntu on the on the obviously itself

00:13:59,230 --> 00:14:05,330
you can literally just SSH through it

00:14:02,180 --> 00:14:08,150
and like treat it as your normal BUN too

00:14:05,330 --> 00:14:10,540
so you know you can run OpenCV you can

00:14:08,150 --> 00:14:12,980
run raw so you can run whatever

00:14:10,540 --> 00:14:14,300
interface you might you will have a

00:14:12,980 --> 00:14:16,730
piece of software you would run on your

00:14:14,300 --> 00:14:18,560
normal boot and access it through the

00:14:16,730 --> 00:14:23,840
network interface which is also very

00:14:18,560 --> 00:14:25,520
convenient which brings us to like this

00:14:23,840 --> 00:14:27,710
was like the obviously three so we have

00:14:25,520 --> 00:14:29,780
we have just a second revision which

00:14:27,710 --> 00:14:32,900
which just fixes a bunch of the issues

00:14:29,780 --> 00:14:35,420
which is currently under fabrication and

00:14:32,900 --> 00:14:38,360
the design files for these are are

00:14:35,420 --> 00:14:42,550
already online so what we found out

00:14:38,360 --> 00:14:44,930
during development is that many people

00:14:42,550 --> 00:14:47,180
especially for robotics and drone

00:14:44,930 --> 00:14:50,600
applications which was the main

00:14:47,180 --> 00:14:53,150
application for this project many people

00:14:50,600 --> 00:14:55,310
don't need a very complex board with a

00:14:53,150 --> 00:14:57,950
lot of additional features but they just

00:14:55,310 --> 00:15:01,340
want for example a good IMU and access

00:14:57,950 --> 00:15:03,830
to a few debugging ports so we designed

00:15:01,340 --> 00:15:05,690
a much smaller much simpler we call it

00:15:03,830 --> 00:15:08,780
like a fanny pack board so it's a front

00:15:05,690 --> 00:15:10,760
of a forward mounted expression board

00:15:08,780 --> 00:15:12,440
which you can see over here which you

00:15:10,760 --> 00:15:15,590
know has up for in this case of vector

00:15:12,440 --> 00:15:17,840
net IMU and some debug interfaces and

00:15:15,590 --> 00:15:20,510
then we also fix some of the minor

00:15:17,840 --> 00:15:25,340
issues and here it's in a it's in

00:15:20,510 --> 00:15:27,050
another rendering which we think this is

00:15:25,340 --> 00:15:28,930
this you know one of the lesson I

00:15:27,050 --> 00:15:31,190
learned is that this is a much more

00:15:28,930 --> 00:15:33,170
likely application of just wanting to

00:15:31,190 --> 00:15:35,750
expand with a few additional features

00:15:33,170 --> 00:15:37,990
and not wanting like a huge set of new

00:15:35,750 --> 00:15:37,990
features

00:15:38,560 --> 00:15:43,930
and then of course the the most

00:15:40,880 --> 00:15:46,460
interesting part is that we were we are

00:15:43,930 --> 00:15:49,130
looking into and probably designing and

00:15:46,460 --> 00:15:51,950
releasing the the next version which is

00:15:49,130 --> 00:15:53,810
an obvious e4 which will be a similar

00:15:51,950 --> 00:15:58,370
concept but it will be even more modular

00:15:53,810 --> 00:16:00,430
so now that won't be any sensors on the

00:15:58,370 --> 00:16:02,990
computing module itself but it will just

00:16:00,430 --> 00:16:05,360
be a module with a lot of connectors and

00:16:02,990 --> 00:16:07,730
then you can connect whichever camera

00:16:05,360 --> 00:16:09,980
you want or whichever additional sense

00:16:07,730 --> 00:16:13,220
or piece of hardware you want so you can

00:16:09,980 --> 00:16:18,550
be like fully customized basically and

00:16:13,220 --> 00:16:21,080
the idea is not to restrict anyone to a

00:16:18,550 --> 00:16:24,890
specific like sensor configuration or

00:16:21,080 --> 00:16:26,330
other configuration and you know this is

00:16:24,890 --> 00:16:30,170
different all stay tuned in the coming

00:16:26,330 --> 00:16:33,380
months to see how it's going okay which

00:16:30,170 --> 00:16:36,200
is great so now we only have you know

00:16:33,380 --> 00:16:39,740
this is what you see over here is

00:16:36,200 --> 00:16:40,970
actually an example of a stream from the

00:16:39,740 --> 00:16:43,130
camera with the corner detection

00:16:40,970 --> 00:16:44,900
happening in the FPGA so you know you

00:16:43,130 --> 00:16:46,820
can see like this the circles are like

00:16:44,900 --> 00:16:49,880
the car the corner features detected by

00:16:46,820 --> 00:16:52,490
the FPT algorithm which we learn are

00:16:49,880 --> 00:16:56,720
always like very useful for localization

00:16:52,490 --> 00:16:59,300
and mapping applications so here there

00:16:56,720 --> 00:17:01,430
will just be a bunch of videos which

00:16:59,300 --> 00:17:07,430
show both the OVC and in a sense like

00:17:01,430 --> 00:17:08,930
the the Ross ecosystem so the the most

00:17:07,430 --> 00:17:12,110
simple application you can do with a CVO

00:17:08,930 --> 00:17:14,480
camera you know it's just like get depth

00:17:12,110 --> 00:17:16,610
of objects so this was you know our

00:17:14,480 --> 00:17:20,870
intern Brandon some like a few months

00:17:16,610 --> 00:17:23,270
ago and he's also using this stereo like

00:17:20,870 --> 00:17:25,340
steve-o disparity package which is of

00:17:23,270 --> 00:17:27,710
again a fully open source Ross based

00:17:25,340 --> 00:17:29,780
package which is a compatible

00:17:27,710 --> 00:17:31,460
out-of-the-box with a camera so now you

00:17:29,780 --> 00:17:33,380
plug our camera you download this

00:17:31,460 --> 00:17:35,750
package you run this package and you

00:17:33,380 --> 00:17:37,880
know in like 10 minutes you have like

00:17:35,750 --> 00:17:41,420
disparity images and you know you have

00:17:37,880 --> 00:17:43,100
like object depth which is very

00:17:41,420 --> 00:17:44,180
convenient because it's it's like you

00:17:43,100 --> 00:17:45,710
know if you had to implement it by

00:17:44,180 --> 00:17:48,200
yourself it will be quite I've quite a

00:17:45,710 --> 00:17:52,029
fair bit of work

00:17:48,200 --> 00:17:54,409
oh you know something guys there is also

00:17:52,029 --> 00:17:56,720
mapping is also very common applications

00:17:54,409 --> 00:17:59,389
if you want to like have your robot move

00:17:56,720 --> 00:18:01,609
around so we had this this example in

00:17:59,389 --> 00:18:04,850
which you use this library called our

00:18:01,609 --> 00:18:07,100
tab map to move around the camera and

00:18:04,850 --> 00:18:11,210
then build a map of our previous office

00:18:07,100 --> 00:18:13,009
in one North and again because you know

00:18:11,210 --> 00:18:15,230
the our tab map is an open source

00:18:13,009 --> 00:18:17,450
package our camera is compatible with it

00:18:15,230 --> 00:18:20,389
out of the boxes is a very it's like

00:18:17,450 --> 00:18:26,720
very simple and fast to get this up and

00:18:20,389 --> 00:18:29,450
running and finally another another

00:18:26,720 --> 00:18:32,749
interesting another interesting

00:18:29,450 --> 00:18:36,230
application was to detect objects so in

00:18:32,749 --> 00:18:39,470
this case we wanted to detect water

00:18:36,230 --> 00:18:42,220
bottle and again we know we have point

00:18:39,470 --> 00:18:46,580
cloud processing libraries which do

00:18:42,220 --> 00:18:49,460
cylinder segmentation so they try they

00:18:46,580 --> 00:18:51,559
try to detect the de try to detect

00:18:49,460 --> 00:18:55,190
cylinder and to detect the post of the

00:18:51,559 --> 00:18:58,309
cylinder in this case you know is like

00:18:55,190 --> 00:19:03,320
you can black yeah moving the cylinder

00:18:58,309 --> 00:19:07,899
around and again you know the usual the

00:19:03,320 --> 00:19:07,899
usual you know compatible out of the box

00:19:08,679 --> 00:19:13,700
and it was the final demo which is the

00:19:11,269 --> 00:19:15,350
most interesting one actually so we we

00:19:13,700 --> 00:19:17,840
had this this project also with a

00:19:15,350 --> 00:19:18,980
robotic arm so we decided well why don't

00:19:17,840 --> 00:19:20,720
we put together this cylinder

00:19:18,980 --> 00:19:23,149
segmentation which you can see happening

00:19:20,720 --> 00:19:25,460
in the top left where the camera is

00:19:23,149 --> 00:19:30,200
detecting the cylinder why don't we when

00:19:25,460 --> 00:19:33,080
do we do some sort of like I arm system

00:19:30,200 --> 00:19:36,230
where we have a camera that detects a

00:19:33,080 --> 00:19:39,350
cylinder and then it tells the robot the

00:19:36,230 --> 00:19:42,220
coordinates of the cylinder and then the

00:19:39,350 --> 00:19:45,710
robot will do the robotic arm will do

00:19:42,220 --> 00:19:48,049
will plan a path to pick up the cylinder

00:19:45,710 --> 00:19:52,789
pick it up and put it into a different

00:19:48,049 --> 00:19:57,679
place and this was a bit more of custom

00:19:52,789 --> 00:20:00,230
development but again no because the the

00:19:57,679 --> 00:20:01,940
so this is the cylinder detection is

00:20:00,230 --> 00:20:05,539
open source but even the hole

00:20:01,940 --> 00:20:07,850
library that is used to do the planning

00:20:05,539 --> 00:20:13,039
and motion for and control of the

00:20:07,850 --> 00:20:14,990
robotic arm is also fully open source so

00:20:13,039 --> 00:20:17,379
in a sense it's it's not only about the

00:20:14,990 --> 00:20:20,539
camera but it's about like the whole

00:20:17,379 --> 00:20:23,029
ecosystem and like how you know how it

00:20:20,539 --> 00:20:25,580
makes it easier to to develop I was a

00:20:23,029 --> 00:20:26,960
robotics application by leveraging work

00:20:25,580 --> 00:20:30,850
done by other people and not you know

00:20:26,960 --> 00:20:30,850
not reinventing the wheel all the time

00:20:31,210 --> 00:20:37,429
so now now he's doing this experiment

00:20:33,620 --> 00:20:39,259
where he tries to keep the keep the

00:20:37,429 --> 00:20:41,210
bottle actually not a nun in unknown

00:20:39,259 --> 00:20:43,730
knife pose you know not like straight up

00:20:41,210 --> 00:20:45,740
but actually keeps it tilted and then

00:20:43,730 --> 00:20:47,840
you should see the robot that it tries

00:20:45,740 --> 00:20:50,149
to plan accordingly and then it tries to

00:20:47,840 --> 00:21:03,470
play pick up the tilt that bottle that I

00:20:50,149 --> 00:21:06,470
just detected and move forward it's a

00:21:03,470 --> 00:21:13,059
very shy army takes its own time to do

00:21:06,470 --> 00:21:13,059
things yeah almost yeah pretty close

00:21:13,509 --> 00:21:21,080
yeah so this user like they move it Ross

00:21:16,820 --> 00:21:25,429
library too late to the planning and

00:21:21,080 --> 00:21:27,460
there's some more and then finally you

00:21:25,429 --> 00:21:32,750
know we we also looked at like different

00:21:27,460 --> 00:21:33,769
algorithms for you know the like in Ross

00:21:32,750 --> 00:21:36,289
there is also like a lot of different

00:21:33,769 --> 00:21:38,809
algorithms that are implemented to do

00:21:36,289 --> 00:21:40,669
Steve you're matching alike disparity

00:21:38,809 --> 00:21:43,159
disparity maps they know then you know

00:21:40,669 --> 00:21:45,230
we can like compare the two of them so

00:21:43,159 --> 00:21:47,809
for example you see that one of them the

00:21:45,230 --> 00:21:50,409
one on top uses global data so it's more

00:21:47,809 --> 00:21:53,120
you said like do data more globalist

00:21:50,409 --> 00:21:56,570
optimization so it's more dense in the

00:21:53,120 --> 00:21:57,860
up to apples for dance maps okay and

00:21:56,570 --> 00:22:00,590
then you know it wouldn't be of course

00:21:57,860 --> 00:22:02,120
it wouldn't be a good conference talk

00:22:00,590 --> 00:22:03,409
without the use of slide at the end of

00:22:02,120 --> 00:22:05,179
every company saying you know we are

00:22:03,409 --> 00:22:07,159
hiring but you know of course we are

00:22:05,179 --> 00:22:08,840
hiring so you know if anyone is

00:22:07,159 --> 00:22:11,869
interested to do cool robotic stuff

00:22:08,840 --> 00:22:13,639
that's us and I think Morgan is down

00:22:11,869 --> 00:22:15,210
there Aaron is there Aaron is there

00:22:13,639 --> 00:22:18,789
hi Aaron

00:22:15,210 --> 00:22:19,720
yeah so that's all from my side so if

00:22:18,789 --> 00:22:22,179
you have any questions you know feel

00:22:19,720 --> 00:22:23,380
free to like ping me on my email or like

00:22:22,179 --> 00:22:27,710
you know find me at their booth later

00:22:23,380 --> 00:22:31,059
around and stuff yeah thanks thanks

00:22:27,710 --> 00:22:31,059

YouTube URL: https://www.youtube.com/watch?v=ZUPbpC7P1G4


