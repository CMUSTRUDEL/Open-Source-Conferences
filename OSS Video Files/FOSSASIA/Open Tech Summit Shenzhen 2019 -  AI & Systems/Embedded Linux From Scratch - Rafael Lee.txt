Title: Embedded Linux From Scratch - Rafael Lee
Publication date: 2019-12-18
Playlist: Open Tech Summit Shenzhen 2019 -  AI & Systems
Description: 
	Rafael Lee - Robotics Engineer (China)
Captions: 
	00:00:00,000 --> 00:00:04,770
and so for projects there we are open on

00:00:02,730 --> 00:00:08,059
Thursday evening and welcome to join us

00:00:04,770 --> 00:00:12,960
we have the address below

00:00:08,059 --> 00:00:20,820
it's besides changing University metro

00:00:12,960 --> 00:00:25,730
station so LFS has a lot of variations

00:00:20,820 --> 00:00:31,699
the first is LFS itself it is compiled

00:00:25,730 --> 00:00:31,699
so it will build an extra bution on the

00:00:32,059 --> 00:00:40,800
x86 architecture to the x86 architecture

00:00:36,829 --> 00:00:44,340
so with this with this variation you

00:00:40,800 --> 00:00:47,879
will now know there were no chance you

00:00:44,340 --> 00:00:50,850
have the cross-compile and there are

00:00:47,879 --> 00:00:55,079
other variations the first is embedded

00:00:50,850 --> 00:00:59,699
LFS it means you build embed Linux

00:00:55,079 --> 00:01:03,600
distribution from arm to arm for example

00:00:59,699 --> 00:01:07,590
and you will not not include the

00:01:03,600 --> 00:01:10,110
cross-compile - very well be much slower

00:01:07,590 --> 00:01:13,890
since army now the high performance at

00:01:10,110 --> 00:01:16,229
intel cpu the other the third is what i

00:01:13,890 --> 00:01:20,369
am going to talk about it's say LFS

00:01:16,229 --> 00:01:24,000
which is cross meanings from L meanings

00:01:20,369 --> 00:01:28,200
from scratch and we have some websites

00:01:24,000 --> 00:01:30,600
and URLs listed here and why I choose

00:01:28,200 --> 00:01:33,770
this is because I have a high

00:01:30,600 --> 00:01:39,740
performance laptop so I can build a

00:01:33,770 --> 00:01:39,740
kernel another other binaries more quick

00:01:45,010 --> 00:01:50,960
[Music]

00:01:47,149 --> 00:01:54,210
why I want to have my clifs project

00:01:50,960 --> 00:01:57,869
since it I can build my own distribution

00:01:54,210 --> 00:02:01,439
so I can control everything I can have

00:01:57,869 --> 00:02:03,210
all of the source code and comparing

00:02:01,439 --> 00:02:06,810
them into been erased

00:02:03,210 --> 00:02:09,750
including the kernel the kernel drivers

00:02:06,810 --> 00:02:13,350
and device tray and

00:02:09,750 --> 00:02:18,360
they're executables and it's pretty

00:02:13,350 --> 00:02:24,180
small it's only 65 megabytes and it can

00:02:18,360 --> 00:02:28,170
be even smaller LCFS see a website it

00:02:24,180 --> 00:02:30,959
can be as small as 8 megabytes you can

00:02:28,170 --> 00:02:34,680
use busybox instead of a 4 function

00:02:30,959 --> 00:02:40,530
instead of truth so it can you can make

00:02:34,680 --> 00:02:45,690
it customized for your own PCB any by

00:02:40,530 --> 00:02:49,590
doing CFS you can get idea of how

00:02:45,690 --> 00:02:53,959
opening system puts itself and you can

00:02:49,590 --> 00:02:57,420
use the try the CFS with 4 emulated

00:02:53,959 --> 00:03:01,050
environment without any hardware so that

00:02:57,420 --> 00:03:03,660
make it more easy to access instead of

00:03:01,050 --> 00:03:07,620
buying a lot of hardware's

00:03:03,660 --> 00:03:12,510
powered a month and burn the SD cards

00:03:07,620 --> 00:03:15,570
further images into a C card hmm so

00:03:12,510 --> 00:03:19,220
that's the reason why I want to build a

00:03:15,570 --> 00:03:25,049
say I have asked myself I choose

00:03:19,220 --> 00:03:28,440
Raspberry Pi to build since there are q

00:03:25,049 --> 00:03:30,810
emulator system arm which provide the

00:03:28,440 --> 00:03:35,580
which provided Raspberry Pi and

00:03:30,810 --> 00:03:37,890
Raspberry Pi 3 for emulation so the

00:03:35,580 --> 00:03:47,610
recipe berry pie to itself in the cortex

00:03:37,890 --> 00:03:51,890
a7 32-bit arm with the link you can find

00:03:47,610 --> 00:03:51,890
more informations about the arm itself

00:03:52,880 --> 00:03:59,820
before before CFS you need to know the

00:03:56,880 --> 00:04:03,709
architecture of the processor itself it

00:03:59,820 --> 00:04:07,230
must be accurate if you give em IPS

00:04:03,709 --> 00:04:13,049
architecture binary for our arm CPU it

00:04:07,230 --> 00:04:14,760
will not run for sure after we get the

00:04:13,049 --> 00:04:18,359
information of the architecture itself

00:04:14,760 --> 00:04:21,630
the second is build big hotels it

00:04:18,359 --> 00:04:22,949
includes assembler and object copy of

00:04:21,630 --> 00:04:25,409
the account

00:04:22,949 --> 00:04:31,219
and some other executive bills which we

00:04:25,409 --> 00:04:34,860
will use them to make other binary files

00:04:31,219 --> 00:04:38,310
these the being utils are compiled and

00:04:34,860 --> 00:04:41,400
info down host PC and the second is we

00:04:38,310 --> 00:04:44,370
will build a code compile to chain which

00:04:41,400 --> 00:04:48,060
is our meaning smooth muscle

00:04:44,370 --> 00:04:50,879
ABI GCC in other variations you can see

00:04:48,060 --> 00:04:52,650
that there are armed Linux none are

00:04:50,879 --> 00:04:56,759
meaning C abig disease

00:04:52,650 --> 00:05:01,580
these are variations of the is a

00:04:56,759 --> 00:05:07,639
variation of the standard C libraries

00:05:01,580 --> 00:05:13,289
these compile the install down host PC

00:05:07,639 --> 00:05:21,719
and the second is to get in Linux Linux

00:05:13,289 --> 00:05:25,560
headers you need to download the kernel

00:05:21,719 --> 00:05:32,729
the kernel source itself and then unzip

00:05:25,560 --> 00:05:35,009
it to unzip it to a folder and make the

00:05:32,729 --> 00:05:37,279
default config and then compel the

00:05:35,009 --> 00:05:41,899
folder using the

00:05:37,279 --> 00:05:41,899
cross compile to change which

00:05:54,980 --> 00:06:01,740
see lofs clifs arch means the the arm

00:06:01,139 --> 00:06:08,430
meanings

00:06:01,740 --> 00:06:11,550
muscle ABI - so with this configured you

00:06:08,430 --> 00:06:14,820
can use the cross-compiled to change to

00:06:11,550 --> 00:06:17,730
compile the source files it means that

00:06:14,820 --> 00:06:20,490
you will compile the source code on x86

00:06:17,730 --> 00:06:24,750
architect and builder binaries into ARM

00:06:20,490 --> 00:06:29,070
architecture with these steps you will

00:06:24,750 --> 00:06:40,979
have the header and the ninnies config

00:06:29,070 --> 00:06:43,830
itself installed these are some this is

00:06:40,979 --> 00:06:47,840
how I built the meanings

00:06:43,830 --> 00:06:50,970
Mousavi ittc with this orchid with this

00:06:47,840 --> 00:07:08,370
with these lines you can get attackable

00:06:50,970 --> 00:07:11,820
on on your host pc these are export and

00:07:08,370 --> 00:07:17,850
default cross compile cross compilers

00:07:11,820 --> 00:07:23,510
into the variables so when you log in at

00:07:17,850 --> 00:07:32,820
the CL user of CI MF s you will have the

00:07:23,510 --> 00:07:35,700
environment variables preset here is

00:07:32,820 --> 00:07:39,320
another step you can create the

00:07:35,700 --> 00:07:43,340
directory structure well create a lot of

00:07:39,320 --> 00:07:58,860
directories for example the bean booty

00:07:43,340 --> 00:08:05,849
device etc Linux file system and you

00:07:58,860 --> 00:08:09,080
will start to set flags here for

00:08:05,849 --> 00:08:09,080
different user process

00:08:13,850 --> 00:08:21,090
and the next step is to create a

00:08:16,920 --> 00:08:27,990
password to the group and by last log

00:08:21,090 --> 00:08:32,310
files the it is a password file has a

00:08:27,990 --> 00:08:35,880
record for different users you can see

00:08:32,310 --> 00:08:38,490
the usernames here and it's a group

00:08:35,880 --> 00:08:41,840
group number and some other information

00:08:38,490 --> 00:08:45,150
and this is the default before shell

00:08:41,840 --> 00:08:47,730
pinfalls means he cannot login mm-hmm

00:08:45,150 --> 00:08:49,530
so it is a password is the important

00:08:47,730 --> 00:08:52,110
file which means Colonel use it to

00:08:49,530 --> 00:08:56,070
manage the different users and the other

00:08:52,110 --> 00:08:58,950
file is the EDC group which is similar

00:08:56,070 --> 00:09:04,100
to a password sorry there is the key

00:08:58,950 --> 00:09:08,340
missing it has a it has a group names

00:09:04,100 --> 00:09:20,790
inside and the number is group number

00:09:08,340 --> 00:09:27,660
and this step you will build and install

00:09:20,790 --> 00:09:32,300
the lab GCC into your target system and

00:09:27,660 --> 00:09:35,700
this is important for other other

00:09:32,300 --> 00:09:40,860
executable binaries and other executable

00:09:35,700 --> 00:09:51,180
binaries will well call this dynamic

00:09:40,860 --> 00:09:56,640
link file to exec you execute and the

00:09:51,180 --> 00:09:58,650
next I will create a well download sound

00:09:56,640 --> 00:10:01,350
file from the internet to again the

00:09:58,650 --> 00:10:06,330
default port and the service name

00:10:01,350 --> 00:10:11,790
related informations and with that you

00:10:06,330 --> 00:10:17,580
can see the 22:44 SSH login default and

00:10:11,790 --> 00:10:19,110
the 80 is for HPV service only list and

00:10:17,580 --> 00:10:21,720
the part of the

00:10:19,110 --> 00:10:25,970
the fellow itself it has a lot of other

00:10:21,720 --> 00:10:25,970
information and other services inside

00:10:26,660 --> 00:10:32,760
and here comes through the very

00:10:31,620 --> 00:10:39,840
important step

00:10:32,760 --> 00:10:42,870
Buda Colonel yourself you have already

00:10:39,840 --> 00:10:46,040
downloaded the corner so spell yet and

00:10:42,870 --> 00:10:50,010
now it's time to build a kernel itself

00:10:46,040 --> 00:10:53,580
the first the first line is to make the

00:10:50,010 --> 00:10:59,570
directory clean and the second and the

00:10:53,580 --> 00:11:05,940
second and the third here is here make

00:10:59,570 --> 00:11:10,490
PCM our to 7:09 is for config use the

00:11:05,940 --> 00:11:10,490
default config files for raspberry pi 2

00:11:10,850 --> 00:11:18,780
you can find this information on the on

00:11:14,730 --> 00:11:22,410
the link here and this the second is

00:11:18,780 --> 00:11:27,380
build the source file with seven threads

00:11:22,410 --> 00:11:31,190
and the third is to build the image and

00:11:27,380 --> 00:11:34,800
modules and the device race these are

00:11:31,190 --> 00:11:39,300
the image is the kernel kernel image and

00:11:34,800 --> 00:11:44,610
modules are for our drivers and the EPS

00:11:39,300 --> 00:11:47,070
are for which kernel used to configure

00:11:44,610 --> 00:11:50,970
the different hardware this will take

00:11:47,070 --> 00:11:54,210
about half an hour and then you will

00:11:50,970 --> 00:11:59,190
have your Z image ready which you will

00:11:54,210 --> 00:12:04,110
use it later and the last line is to

00:11:59,190 --> 00:12:08,970
install the compiled files into the

00:12:04,110 --> 00:12:12,720
target system then your target file

00:12:08,970 --> 00:12:18,450
system will have the kernel module and

00:12:12,720 --> 00:12:26,370
the kernel installed and here are a list

00:12:18,450 --> 00:12:29,810
of very useful useful boot loaders you

00:12:26,370 --> 00:12:29,810
can choose one of them to

00:12:40,710 --> 00:12:48,210
and now you already have a kernel and

00:12:43,800 --> 00:12:55,350
the file system you can try the to run

00:12:48,210 --> 00:12:58,940
it qme emulator which I have the link

00:12:55,350 --> 00:13:05,070
here about try it later

00:12:58,940 --> 00:13:08,850
we don't you can run armed you can run

00:13:05,070 --> 00:13:18,510
our arm operating system on your Intel

00:13:08,850 --> 00:13:19,820
PC here are my some some of my future

00:13:18,510 --> 00:13:23,399
plans

00:13:19,820 --> 00:13:25,830
although the talk is about CFS but I

00:13:23,399 --> 00:13:28,529
haven't finished the say of it as yet

00:13:25,830 --> 00:13:33,540
the opening the file system has some

00:13:28,529 --> 00:13:39,000
some error I will try to figure them out

00:13:33,540 --> 00:13:43,320
later in several days and the second is

00:13:39,000 --> 00:13:47,730
there are there is no package manager in

00:13:43,320 --> 00:13:51,060
our FS which which is quite important to

00:13:47,730 --> 00:13:58,380
a distribution in terbium variations we

00:13:51,060 --> 00:14:04,709
used a BT and ND bkgd fur or pacman

00:13:58,380 --> 00:14:06,959
these are very important to to any

00:14:04,709 --> 00:14:12,480
distribution we have but we haven't

00:14:06,959 --> 00:14:18,900
mentioned it here and here are some of

00:14:12,480 --> 00:14:23,040
my potential errors compile link was

00:14:18,900 --> 00:14:26,850
compiled LT to see if the if the binary

00:14:23,040 --> 00:14:30,360
compelled is is right but you see it

00:14:26,850 --> 00:14:32,850
says cannot find entry singles chart so

00:14:30,360 --> 00:14:37,230
I may have gone something wrong with the

00:14:32,850 --> 00:14:40,680
compiling method and I want to mention

00:14:37,230 --> 00:14:43,980
that queue emulator is a very good tool

00:14:40,680 --> 00:14:46,320
for Elva OFS you can save you a lot of

00:14:43,980 --> 00:14:48,770
time without dealing with the hardware

00:14:46,320 --> 00:14:48,770
errors

00:14:51,450 --> 00:14:56,010
okay I will show something here

00:15:13,880 --> 00:15:21,270
we'll have you will print all the

00:15:17,220 --> 00:15:25,080
information out here you can see the

00:15:21,270 --> 00:15:28,170
raspbian kanoon Enix loaded it means

00:15:25,080 --> 00:15:31,640
that the file system goes well and the

00:15:28,170 --> 00:15:37,590
green ok showed that the system D is

00:15:31,640 --> 00:15:41,490
setting up different services but it's

00:15:37,590 --> 00:15:45,750
not my it's not using my file system

00:15:41,490 --> 00:15:48,900
it's using existing system by using the

00:15:45,750 --> 00:15:52,430
hardware but using the kernel and the

00:15:48,900 --> 00:15:52,430
kernel modules I have built

00:16:01,420 --> 00:16:15,380
well takes on minute welcome welcome to

00:16:12,410 --> 00:16:17,960
visit engine DIY we have open thing

00:16:15,380 --> 00:16:20,750
every Thursday evening you can find more

00:16:17,960 --> 00:16:24,860
information on our website Shin at the

00:16:20,750 --> 00:16:30,680
DIY tour o RG so do you have any

00:16:24,860 --> 00:16:33,190
questions using Linux for me is very

00:16:30,680 --> 00:16:36,590
important so I want to know how the

00:16:33,190 --> 00:16:39,620
operating system works and there's a

00:16:36,590 --> 00:16:42,320
friend told me that LFS is a good start

00:16:39,620 --> 00:16:44,870
to know the detail of Linux kernel and

00:16:42,320 --> 00:16:48,940
all the process which it will invoke

00:16:44,870 --> 00:16:53,290
when booting and it's a challenge to

00:16:48,940 --> 00:16:57,880
manage the a lot of source code and

00:16:53,290 --> 00:17:02,200
memories on your existing file system

00:16:57,880 --> 00:17:02,200
and it's quite good

00:17:13,230 --> 00:17:19,329
yeah

00:17:15,110 --> 00:17:19,329
reduce the size right

00:17:22,600 --> 00:17:27,610
it's not important to this distribution

00:17:24,400 --> 00:17:31,410
so the striped means remove the debug

00:17:27,610 --> 00:17:34,390
symbols from the binary so the so the

00:17:31,410 --> 00:17:39,340
program says can be much much smaller

00:17:34,390 --> 00:17:42,010
and the side-effect known know the

00:17:39,340 --> 00:17:45,910
effect is that you cannot use gdb to log

00:17:42,010 --> 00:17:49,150
the debugger the program with its

00:17:45,910 --> 00:17:51,010
symbols you cannot see the functions

00:17:49,150 --> 00:17:56,260
name and all the detailed information

00:17:51,010 --> 00:17:59,050
inside in other ways you can make the

00:17:56,260 --> 00:18:02,590
debug information into another file and

00:17:59,050 --> 00:18:08,460
you can load it to your gdb using some

00:18:02,590 --> 00:18:11,350
other way so after the strip the the

00:18:08,460 --> 00:18:21,220
dynamic link file will be pretty much

00:18:11,350 --> 00:18:31,360
smaller you can see here that it can

00:18:21,220 --> 00:18:33,510
login now okay that's all of it thank

00:18:31,360 --> 00:18:33,510

YouTube URL: https://www.youtube.com/watch?v=MdkeWRc-GqU


