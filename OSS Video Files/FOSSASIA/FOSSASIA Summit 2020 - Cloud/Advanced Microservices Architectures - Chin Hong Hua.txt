Title: Advanced Microservices Architectures - Chin Hong Hua
Publication date: 2020-03-28
Playlist: FOSSASIA Summit 2020 - Cloud
Description: 
	The microservices architecture, as part of a cloud solution design, is increasingly popular with application developers, because of it facilitates rapid, efficient design and deployment of a business service. Such an architecture involves the aggregation of individual microservices developed by small teams, who are further empowered with a flexible tooling and highly efficient coding languages. New architectures have evolved in the recent years, since microservices were invented. This talk will advocate the use of advanced microservices architectures, which will serve to address many issues the typical microservice project faces, including security, availability, manageability and scalability in large scale production environments.The audience will appreciate the adoption of open-source technologies, like Istio, VertX, SpringBoot, Quarkus and Kubernetes, in achieving the ambitious objectives of any successful microservices project.

FOSSASIA Summit 2020 - Cloud

Speaker: Chin Hong Hua, Principal Solution Architect Red Hat
Captions: 
	00:00:04,160 --> 00:00:10,320
okay hi my name is Hong I'm the next

00:00:08,370 --> 00:00:12,450
speaker from Red Hat first off rather

00:00:10,320 --> 00:00:14,670
give a shout out to the whole force Asia

00:00:12,450 --> 00:00:20,400
Summit team thank you for doing this

00:00:14,670 --> 00:00:24,600
guys thank you for sticking standing by

00:00:20,400 --> 00:00:26,609
us the open source community thank you

00:00:24,600 --> 00:00:28,890
for the audience no matter where you are

00:00:26,609 --> 00:00:33,090
the folks in the room you know who we

00:00:28,890 --> 00:00:39,300
are the two of you so unprecedented

00:00:33,090 --> 00:00:45,390
times so the I guess this leads to

00:00:39,300 --> 00:00:47,010
unprecedented technology topic up NYX so

00:00:45,390 --> 00:00:48,420
let's begin we're going to talk about

00:00:47,010 --> 00:00:51,149
micro services we're going to talk about

00:00:48,420 --> 00:00:52,350
not how you should be developing micro

00:00:51,149 --> 00:00:54,480
services about how you should be

00:00:52,350 --> 00:00:58,980
actually be deploying it securing it

00:00:54,480 --> 00:01:02,910
using stay or data stay of the free open

00:00:58,980 --> 00:01:08,060
source project cut is still to help you

00:01:02,910 --> 00:01:11,250
in achieving that so yes

00:01:08,060 --> 00:01:15,210
shameless advertising courtesy a red hat

00:01:11,250 --> 00:01:17,220
we have a technology which has stiopa

00:01:15,210 --> 00:01:19,770
underneath we call openshift service

00:01:17,220 --> 00:01:23,700
mesh so BAM I will be talking a whole

00:01:19,770 --> 00:01:26,159
lot of about open source technologies

00:01:23,700 --> 00:01:28,020
and next few minutes rather than a

00:01:26,159 --> 00:01:30,090
product but we need to talk about the

00:01:28,020 --> 00:01:32,909
concept of a micro service mesh

00:01:30,090 --> 00:01:34,829
otherwise known as a service mesh why is

00:01:32,909 --> 00:01:39,420
this important why can't we just run a

00:01:34,829 --> 00:01:41,689
micro service as it is maybe that will

00:01:39,420 --> 00:01:45,540
bring to mind the complexity of a

00:01:41,689 --> 00:01:48,509
business application nowadays when you

00:01:45,540 --> 00:01:52,380
develop it based on my standard micro

00:01:48,509 --> 00:01:56,119
service frameworks can you make it

00:01:52,380 --> 00:01:58,649
easier to consume by business users

00:01:56,119 --> 00:01:59,780
Allah this is what sto is supposed to do

00:01:58,649 --> 00:02:02,250
right

00:01:59,780 --> 00:02:04,640
so we'll talk about all the various

00:02:02,250 --> 00:02:07,020
implementations of sto across the

00:02:04,640 --> 00:02:09,690
competitive landscape a red hat

00:02:07,020 --> 00:02:11,760
openshift service mesh is not alone in

00:02:09,690 --> 00:02:16,709
that landscape

00:02:11,760 --> 00:02:19,230
we have a cool topology so as to speak

00:02:16,709 --> 00:02:21,659
where we separate two levels of concern

00:02:19,230 --> 00:02:24,030
one is a data plane the other is the

00:02:21,659 --> 00:02:25,769
control plane what are they why do we

00:02:24,030 --> 00:02:29,099
did why do we do that why do we want to

00:02:25,769 --> 00:02:31,769
split them up into two tiers what is in

00:02:29,099 --> 00:02:33,150
steel specifically and very importantly

00:02:31,769 --> 00:02:35,970
in the control plane because that's

00:02:33,150 --> 00:02:38,909
where all that meat the juicy meat is in

00:02:35,970 --> 00:02:42,000
right and finally of course best

00:02:38,909 --> 00:02:44,430
practices of deploying micro-services we

00:02:42,000 --> 00:02:46,290
taking into consideration north-south

00:02:44,430 --> 00:02:47,430
traffic as well as east-west traffic

00:02:46,290 --> 00:02:50,870
where am I talking about

00:02:47,430 --> 00:02:53,940
is it traffic on the Singapore map

00:02:50,870 --> 00:02:56,489
north-south being Central Expressway and

00:02:53,940 --> 00:02:57,769
east-west being a Penn Island Expressway

00:02:56,489 --> 00:03:01,109
we'll get to that

00:02:57,769 --> 00:03:03,450
so what is an open standards-based

00:03:01,109 --> 00:03:09,480
micro-service mesh otherwise known as a

00:03:03,450 --> 00:03:11,459
service mesh it's men to enforce a set

00:03:09,480 --> 00:03:14,519
of business as well as technical

00:03:11,459 --> 00:03:16,799
policies yes its policy enforcement

00:03:14,519 --> 00:03:19,500
number one the whole idea here is it

00:03:16,799 --> 00:03:21,349
enforces policies on behalf of the

00:03:19,500 --> 00:03:24,049
stakeholders the business stakeholders

00:03:21,349 --> 00:03:27,269
today one set of micro services to

00:03:24,049 --> 00:03:31,379
consume in this fashion do they want to

00:03:27,269 --> 00:03:35,239
have certain a pattern of consumption or

00:03:31,379 --> 00:03:38,400
do they one to have certain kinds of

00:03:35,239 --> 00:03:40,919
consumption modes to be to be banned

00:03:38,400 --> 00:03:42,540
altogether certain micro services should

00:03:40,919 --> 00:03:44,489
not be caught in such a way you're

00:03:42,540 --> 00:03:47,459
supposed to have to write certificates

00:03:44,489 --> 00:03:50,069
before you start making requests to my

00:03:47,459 --> 00:03:53,010
micro service so it takes about I talked

00:03:50,069 --> 00:03:56,720
about connectivity it is a very

00:03:53,010 --> 00:03:59,129
interesting topic connectivity tissue

00:03:56,720 --> 00:04:02,099
otherwise known as the fabric of

00:03:59,129 --> 00:04:04,949
connectivity between micro services in a

00:04:02,099 --> 00:04:11,459
certain environment the mesh is supposed

00:04:04,949 --> 00:04:13,319
to safe God that sort of connectivity at

00:04:11,459 --> 00:04:16,669
the same time it adds on top of those

00:04:13,319 --> 00:04:21,570
policies I mentioned traffic control up

00:04:16,669 --> 00:04:24,840
about that traffic control low balancing

00:04:21,570 --> 00:04:25,620
resiliency observability security very

00:04:24,840 --> 00:04:29,940
important yes

00:04:25,620 --> 00:04:32,490
is offloading the what you used to do as

00:04:29,940 --> 00:04:34,770
a full-stack developer or maybe some of

00:04:32,490 --> 00:04:37,260
us an awful stack that's fine micro

00:04:34,770 --> 00:04:40,830
service developer where you try to pick

00:04:37,260 --> 00:04:45,990
everything into that it those concerns

00:04:40,830 --> 00:04:49,650
regarding network connectivity traffic

00:04:45,990 --> 00:04:51,330
policy management off off the app onto

00:04:49,650 --> 00:04:57,020
the infrastructure very importantly as

00:04:51,330 --> 00:05:00,750
well it also enhances the capabilities

00:04:57,020 --> 00:05:02,699
of the underlying container platform

00:05:00,750 --> 00:05:06,000
that's right in Red Hat what we do with

00:05:02,699 --> 00:05:08,870
this new is we built a product called

00:05:06,000 --> 00:05:15,960
open chef service mesh underlying it is

00:05:08,870 --> 00:05:17,970
our product eyes containerized

00:05:15,960 --> 00:05:20,010
environment called kubernetes it product

00:05:17,970 --> 00:05:22,340
i stand there for opens your container

00:05:20,010 --> 00:05:30,050
platform so the for various use cases

00:05:22,340 --> 00:05:30,050
typically their adoption models for sto

00:05:30,500 --> 00:05:34,770
consumption for a steel consumption

00:05:32,610 --> 00:05:49,580
would be connect control security and

00:05:34,770 --> 00:05:52,260
observability and that would be the four

00:05:49,580 --> 00:05:54,180
usual concerns whenever you deploy a

00:05:52,260 --> 00:05:56,400
micro service whenever you define a web

00:05:54,180 --> 00:05:59,580
app right so let's go back to the

00:05:56,400 --> 00:06:02,729
traditional application server back then

00:05:59,580 --> 00:06:05,310
when there was no micro service there

00:06:02,729 --> 00:06:06,930
was no console ver micro service mesh

00:06:05,310 --> 00:06:08,430
you could just run your app on the

00:06:06,930 --> 00:06:08,760
applications over the war was simple

00:06:08,430 --> 00:06:11,190
right

00:06:08,760 --> 00:06:12,930
well it wasn't it was just complex but

00:06:11,190 --> 00:06:15,960
we picked everything into a complex

00:06:12,930 --> 00:06:19,440
stack so we call this the application

00:06:15,960 --> 00:06:21,590
stack the danger here is that you have

00:06:19,440 --> 00:06:26,280
the overly

00:06:21,590 --> 00:06:28,560
thing over the complex monolith app thus

00:06:26,280 --> 00:06:31,150
eventually it came to the point where

00:06:28,560 --> 00:06:34,250
the micro service

00:06:31,150 --> 00:06:36,380
industry evolved into open

00:06:34,250 --> 00:06:39,560
standards-based frameworks the likes you

00:06:36,380 --> 00:06:43,100
may have heard of axe caucus spring boot

00:06:39,560 --> 00:06:45,410
right and now might be even talking

00:06:43,100 --> 00:06:48,170
about a mesh because there are way too

00:06:45,410 --> 00:06:51,490
many services out there in your

00:06:48,170 --> 00:06:56,210
operating environment that you want to

00:06:51,490 --> 00:06:58,670
save got access to at the same time

00:06:56,210 --> 00:07:01,220
having some visibility into the traffic

00:06:58,670 --> 00:07:05,600
the data packets which is why makes

00:07:01,220 --> 00:07:07,880
sense in this operating environment

00:07:05,600 --> 00:07:11,330
full-on micro-services wrap a mesh

00:07:07,880 --> 00:07:13,310
around it right that's probably what

00:07:11,330 --> 00:07:15,470
your micro service to micro service

00:07:13,310 --> 00:07:20,060
interaction looks like today we call

00:07:15,470 --> 00:07:23,500
this sort of traffic east-west panel and

00:07:20,060 --> 00:07:27,920
expressways folks that live in Singapore

00:07:23,500 --> 00:07:29,750
so where micro services are interacting

00:07:27,920 --> 00:07:34,850
with other micro services that happens a

00:07:29,750 --> 00:07:37,010
lot now this visits north-south I will

00:07:34,850 --> 00:07:40,600
have a probably a diagram data on where

00:07:37,010 --> 00:07:43,490
its incoming traffic to ingress proxy

00:07:40,600 --> 00:07:45,410
I'm using terms familiar to the

00:07:43,490 --> 00:07:47,270
kubernetes wall as you know kubernetes

00:07:45,410 --> 00:07:49,490
is one of the hottest open source

00:07:47,270 --> 00:07:54,200
movement right now and yes open chef

00:07:49,490 --> 00:07:57,140
service mesh is baked on top of that and

00:07:54,200 --> 00:08:00,550
we also have a tool which are introduced

00:07:57,140 --> 00:08:04,550
shortly in the API management front that

00:08:00,550 --> 00:08:07,400
save guts and secure Sykes not soft

00:08:04,550 --> 00:08:11,750
traffic access so all these are

00:08:07,400 --> 00:08:14,180
fallacies all these are fallacies right

00:08:11,750 --> 00:08:17,540
remember that child the child was

00:08:14,180 --> 00:08:19,850
flipped to us you 45 seconds ago the

00:08:17,540 --> 00:08:23,570
applications have a full stack so

00:08:19,850 --> 00:08:25,070
fallacy it's a fallacy you cannot rely

00:08:23,570 --> 00:08:30,800
on the network to do the heavy lifting

00:08:25,070 --> 00:08:34,250
off forwarding messages to all the micro

00:08:30,800 --> 00:08:36,560
services you cannot take it for granted

00:08:34,250 --> 00:08:38,990
that the backend network topology does

00:08:36,560 --> 00:08:41,930
not ever change you cannot even think

00:08:38,990 --> 00:08:44,440
that transport cost of your UDP or TCP

00:08:41,930 --> 00:08:46,690
packets are zero costs

00:08:44,440 --> 00:08:49,650
at the same time you cannot assume that

00:08:46,690 --> 00:08:51,520
the network is homogeneous that one

00:08:49,650 --> 00:08:53,560
something that is the same as another

00:08:51,520 --> 00:08:56,350
the underlying infrastructure will

00:08:53,560 --> 00:08:59,020
change which is why there must be some

00:08:56,350 --> 00:09:01,150
layer of traffic management on top of

00:08:59,020 --> 00:09:03,310
the underlying tcp/ip infrastructure

00:09:01,150 --> 00:09:04,360
that has been in place we take it for

00:09:03,310 --> 00:09:06,610
granted that it's been in place for

00:09:04,360 --> 00:09:09,580
decades now it's changing it's always

00:09:06,610 --> 00:09:12,220
changing underneath it does not have an

00:09:09,580 --> 00:09:15,700
SLA tied to it which allows you to save

00:09:12,220 --> 00:09:19,560
that access to certain micro services

00:09:15,700 --> 00:09:22,240
that your stakeholders demand that that

00:09:19,560 --> 00:09:26,620
those service level agreements

00:09:22,240 --> 00:09:29,170
pertaining to a micro services will be a

00:09:26,620 --> 00:09:31,210
short day after day hour after hour

00:09:29,170 --> 00:09:33,310
become you can't just delegate it to the

00:09:31,210 --> 00:09:36,460
internet you need to have the service

00:09:33,310 --> 00:09:39,040
mesh layer so what the Red Hat think off

00:09:36,460 --> 00:09:41,500
they think about number one what is the

00:09:39,040 --> 00:09:43,720
hottest service mesh technology out

00:09:41,500 --> 00:09:47,800
there is steel sto dot IO go to your

00:09:43,720 --> 00:09:49,750
website and right now after this at the

00:09:47,800 --> 00:09:51,970
same time what is the hottest container

00:09:49,750 --> 00:09:53,830
platform out there kuba noddies so you

00:09:51,970 --> 00:09:56,200
take the to meet in the middle you have

00:09:53,830 --> 00:09:58,660
open ships of this mesh it's basically

00:09:56,200 --> 00:10:00,810
containerized service mesh on top of a

00:09:58,660 --> 00:10:03,820
platform container platform

00:10:00,810 --> 00:10:06,280
so how do you deal with complexity once

00:10:03,820 --> 00:10:08,670
we containerize your micro service which

00:10:06,280 --> 00:10:12,880
should be the way because you can always

00:10:08,670 --> 00:10:15,160
if you are DevOps fan be rolling out

00:10:12,880 --> 00:10:17,380
generating new versions of micro

00:10:15,160 --> 00:10:20,830
services that rolls out onto a container

00:10:17,380 --> 00:10:23,410
platform in the containerized format at

00:10:20,830 --> 00:10:24,970
the same time because the sto the

00:10:23,410 --> 00:10:26,980
service mesh technology is also

00:10:24,970 --> 00:10:29,470
containerized it makes perfect sense to

00:10:26,980 --> 00:10:32,620
share one container container platform

00:10:29,470 --> 00:10:35,770
and of course this brings to mind the

00:10:32,620 --> 00:10:37,810
hybrid cloud model they do all micro

00:10:35,770 --> 00:10:39,610
services need to be containerized can we

00:10:37,810 --> 00:10:41,380
just run it on physical can be running

00:10:39,610 --> 00:10:43,360
on a different cloud yeah it's

00:10:41,380 --> 00:10:44,830
definitely of course yes thanks to a

00:10:43,360 --> 00:10:47,500
concept while micro services framework

00:10:44,830 --> 00:10:48,850
it doesn't care what's micro service it

00:10:47,500 --> 00:10:50,440
doesn't care what micro service B is

00:10:48,850 --> 00:10:52,540
running on that's why there is a

00:10:50,440 --> 00:10:54,370
framework that allows it to connect do

00:10:52,540 --> 00:10:56,320
they even care what service mesh is

00:10:54,370 --> 00:10:58,270
governing it not they probably will be

00:10:56,320 --> 00:10:59,560
oblivious to them

00:10:58,270 --> 00:11:01,990
which is why you steal is helpful

00:10:59,560 --> 00:11:04,750
because it is a evolving project there's

00:11:01,990 --> 00:11:06,490
always new contributions on the weekly I

00:11:04,750 --> 00:11:09,010
dare not say daily but it seems to be

00:11:06,490 --> 00:11:11,230
the case daily basis that mix is still

00:11:09,010 --> 00:11:13,750
stronger and more enhanced as time goes

00:11:11,230 --> 00:11:17,399
by with all these features I'm going to

00:11:13,750 --> 00:11:20,320
start talking about in greater detail

00:11:17,399 --> 00:11:21,730
now for instance configuration one of

00:11:20,320 --> 00:11:23,890
the key thinks this deal could do is you

00:11:21,730 --> 00:11:26,110
can actually help convict multiple

00:11:23,890 --> 00:11:28,029
services the way that you your

00:11:26,110 --> 00:11:30,010
stakeholders one those services to be

00:11:28,029 --> 00:11:32,170
consumed so say for instance now you

00:11:30,010 --> 00:11:33,880
have spring cloud config server we're

00:11:32,170 --> 00:11:36,430
not shy to talk about other technologies

00:11:33,880 --> 00:11:39,459
apart from Red Hat because we don't live

00:11:36,430 --> 00:11:41,500
on the island it's it's it's definitely

00:11:39,459 --> 00:11:44,740
a huge ecosystem and spring cloud

00:11:41,500 --> 00:11:47,020
conflicts of its popular in configuring

00:11:44,740 --> 00:11:51,160
multiple spring boot micro-services you

00:11:47,020 --> 00:11:53,800
could use that concept to at the same

00:11:51,160 --> 00:11:55,899
time whenever you want to deploy a micro

00:11:53,800 --> 00:11:59,980
service project we'll be using Netflix

00:11:55,899 --> 00:12:01,570
Eureka and ribbon Netflix OSS was one of

00:11:59,980 --> 00:12:03,700
the firsts out in the market with a

00:12:01,570 --> 00:12:06,310
concept of a service mesh and different

00:12:03,700 --> 00:12:08,529
kind of service mesh patterns right now

00:12:06,310 --> 00:12:11,230
I believe the many many players in this

00:12:08,529 --> 00:12:13,540
industry and at the same time also you

00:12:11,230 --> 00:12:15,640
could see service discovery is what Yuri

00:12:13,540 --> 00:12:18,730
kind ribbon does very very well

00:12:15,640 --> 00:12:22,410
every time you a DevOps back to DevOps

00:12:18,730 --> 00:12:25,510
again start deploying apps on their a

00:12:22,410 --> 00:12:28,000
repetitive basis who knows every few

00:12:25,510 --> 00:12:29,950
hours in a day a new app is born and is

00:12:28,000 --> 00:12:33,940
deploying to operating environment it's

00:12:29,950 --> 00:12:36,450
discovered using Eureka ribbon Zul which

00:12:33,940 --> 00:12:40,990
you may have heard of if you have been a

00:12:36,450 --> 00:12:44,050
Netflix OSS adopter I've seen the

00:12:40,990 --> 00:12:46,480
complexity in all the various routing

00:12:44,050 --> 00:12:49,240
permutations between micro services you

00:12:46,480 --> 00:12:51,910
only Izu server to help you make sense

00:12:49,240 --> 00:12:54,130
of that circuit breaking was what Zul

00:12:51,910 --> 00:12:58,380
does do to it all plays a big part of

00:12:54,130 --> 00:13:02,350
this whenever there is a SLA that says

00:12:58,380 --> 00:13:04,540
you know particular micro service is

00:13:02,350 --> 00:13:06,550
down you need to stop failing over sub

00:13:04,540 --> 00:13:08,470
circuit breaking please

00:13:06,550 --> 00:13:10,570
kicks in and plays a pot here another

00:13:08,470 --> 00:13:11,910
reason you use circuit braking would be

00:13:10,570 --> 00:13:14,400
because of security

00:13:11,910 --> 00:13:15,750
you know that there has been an attack

00:13:14,400 --> 00:13:17,310
ddos attack

00:13:15,750 --> 00:13:20,010
malware attack on a particular

00:13:17,310 --> 00:13:21,780
microservice time - circuit break

00:13:20,010 --> 00:13:24,090
what circuit break means is that cuts

00:13:21,780 --> 00:13:26,430
the transmission channel to debt

00:13:24,090 --> 00:13:30,150
particular service that is impacted

00:13:26,430 --> 00:13:33,630
Zipkin who's been using Zipkin tracing

00:13:30,150 --> 00:13:35,460
which now has gave birth to a community

00:13:33,630 --> 00:13:37,290
that con service gave birth for their

00:13:35,460 --> 00:13:40,260
need for tracing as gave birth to a

00:13:37,290 --> 00:13:42,780
community called open tracing and we

00:13:40,260 --> 00:13:46,410
have technologies in rare hat that does

00:13:42,780 --> 00:13:50,280
precisely that Jagr we use a open source

00:13:46,410 --> 00:13:54,180
community project Jagr which is one half

00:13:50,280 --> 00:13:56,490
of jägermeister always a good without

00:13:54,180 --> 00:13:59,580
beverage I don't mind saying that I

00:13:56,490 --> 00:14:02,490
haven't had one for a while so Jaeger

00:13:59,580 --> 00:14:05,430
has been baked into quite a lot of

00:14:02,490 --> 00:14:08,310
products including our own so in open

00:14:05,430 --> 00:14:12,570
chef service mesh it is really that

00:14:08,310 --> 00:14:14,190
go-to technology that is already in open

00:14:12,570 --> 00:14:19,140
show service master allows you to look

00:14:14,190 --> 00:14:21,570
at the traffic data that goes into any

00:14:19,140 --> 00:14:24,360
portion of the operating environment

00:14:21,570 --> 00:14:25,800
where micro service that has been that

00:14:24,360 --> 00:14:29,580
is currently being governed by open

00:14:25,800 --> 00:14:32,370
share service mesh what is the traffic

00:14:29,580 --> 00:14:33,080
light that's what you're going to do and

00:14:32,370 --> 00:14:35,340
that's what

00:14:33,080 --> 00:14:37,670
and another thing Knology of is the

00:14:35,340 --> 00:14:40,770
Zipkin which i mentioned very briefly

00:14:37,670 --> 00:14:43,050
that as you know it's very complex very

00:14:40,770 --> 00:14:46,080
complex in a micro service what we think

00:14:43,050 --> 00:14:47,850
it's good standardized as much as you

00:14:46,080 --> 00:14:50,210
can we standardize on the frameworks of

00:14:47,850 --> 00:14:53,270
micro services you standardize on the

00:14:50,210 --> 00:14:55,650
format of operating a micro service

00:14:53,270 --> 00:14:57,810
containers containers containers that's

00:14:55,650 --> 00:14:59,480
I'm not the first person to use all

00:14:57,810 --> 00:15:02,790
three words which is the same word

00:14:59,480 --> 00:15:06,870
repetition but it's hot and that is the

00:15:02,790 --> 00:15:09,750
way you standardize the format of a

00:15:06,870 --> 00:15:11,130
application being developed when it's

00:15:09,750 --> 00:15:12,930
being tested when it's being developed

00:15:11,130 --> 00:15:15,180
and everyone is finally deployed very

00:15:12,930 --> 00:15:16,620
importantly as well the platform the

00:15:15,180 --> 00:15:18,630
container platform the container

00:15:16,620 --> 00:15:21,420
platform the container platform where

00:15:18,630 --> 00:15:23,970
you have the containers you need to have

00:15:21,420 --> 00:15:24,470
a platform do to govern it to host it to

00:15:23,970 --> 00:15:27,649
make

00:15:24,470 --> 00:15:29,240
highly accessible so why we do in Red

00:15:27,649 --> 00:15:34,639
Hat open ship is that we provide a whole

00:15:29,240 --> 00:15:35,930
lot of developer tooling not just a

00:15:34,639 --> 00:15:39,139
runtime tooling here we talking about

00:15:35,930 --> 00:15:40,940
CIC deep pipelines config management

00:15:39,139 --> 00:15:41,449
which I mentioned earlier on very modern

00:15:40,940 --> 00:15:45,560
Lee as well

00:15:41,449 --> 00:15:48,800
how is sto enjoy the good benefits of

00:15:45,560 --> 00:15:50,810
open ship again containerization you

00:15:48,800 --> 00:15:52,430
liver is just also not just from the

00:15:50,810 --> 00:15:54,079
containerization technologies but

00:15:52,430 --> 00:15:56,209
security technologies the config

00:15:54,079 --> 00:15:58,160
management technologies the automation

00:15:56,209 --> 00:15:59,540
technology that you automate the way

00:15:58,160 --> 00:16:02,569
micro services the deeper you can

00:15:59,540 --> 00:16:04,339
automate the way a steer is reconfigured

00:16:02,569 --> 00:16:05,810
and you might have to reconfigure every

00:16:04,339 --> 00:16:07,610
time there is a new operating

00:16:05,810 --> 00:16:10,310
environment that new stakeholder would

00:16:07,610 --> 00:16:13,759
need well there have been changes in the

00:16:10,310 --> 00:16:15,589
scope of work right sorry the number of

00:16:13,759 --> 00:16:18,199
the population of micro services just

00:16:15,589 --> 00:16:19,880
went up 25% and you need to secure it

00:16:18,199 --> 00:16:21,980
and this is how you will start securing

00:16:19,880 --> 00:16:24,860
it from this day on different from the

00:16:21,980 --> 00:16:26,930
other days I came back to Yaeger tracing

00:16:24,860 --> 00:16:29,209
circuit breaking routing service config

00:16:26,930 --> 00:16:30,680
now instead of getting all these

00:16:29,209 --> 00:16:32,569
different open source technologies

00:16:30,680 --> 00:16:36,639
explained boot config server spring

00:16:32,569 --> 00:16:41,149
cloud config server all the Netflix OSS

00:16:36,639 --> 00:16:42,769
goodies Zoo ribbon hystrix

00:16:41,149 --> 00:16:46,579
that's for circuit breaking yes

00:16:42,769 --> 00:16:49,519
definitely zip kin as well and we we now

00:16:46,579 --> 00:16:52,670
have the equivalent all-in-one product

00:16:49,519 --> 00:16:54,709
serves to speak and thanks to Sto thanks

00:16:52,670 --> 00:16:58,519
to Yeager or baked into OpenShift

00:16:54,709 --> 00:17:01,880
service mesh so lots of vendors are

00:16:58,519 --> 00:17:03,050
providing this and here's a brief view

00:17:01,880 --> 00:17:07,250
of the landscape

00:17:03,050 --> 00:17:10,159
note that sto has a huge contributor in

00:17:07,250 --> 00:17:13,010
the formal Red Hat that's right we had

00:17:10,159 --> 00:17:15,559
as a big contributor is still project so

00:17:13,010 --> 00:17:20,059
what is is still really all about is

00:17:15,559 --> 00:17:23,569
control command and control command

00:17:20,059 --> 00:17:26,150
control using a control plane and the

00:17:23,569 --> 00:17:28,100
bottom layer so think about two tiers

00:17:26,150 --> 00:17:30,080
there's probably going to be at least

00:17:28,100 --> 00:17:33,020
one more architecture diagram that shows

00:17:30,080 --> 00:17:35,510
these two tiers that upper tier the

00:17:33,020 --> 00:17:36,990
control plane controls it has the

00:17:35,510 --> 00:17:39,660
ability for you to

00:17:36,990 --> 00:17:41,670
issue commands issued new configuration

00:17:39,660 --> 00:17:43,980
changes endeavour control the second

00:17:41,670 --> 00:17:48,929
year was the second year the date top

00:17:43,980 --> 00:17:51,000
plane we're at all right under steel we

00:17:48,929 --> 00:17:54,179
call this the envoi project probably of

00:17:51,000 --> 00:17:56,580
her envoy just like what a misery or

00:17:54,179 --> 00:18:01,050
ambassador is supposed to do as the term

00:17:56,580 --> 00:18:03,390
envoi it's a Ambassador or a Ambassador

00:18:01,050 --> 00:18:05,640
like proxy to an existing micro service

00:18:03,390 --> 00:18:09,110
every single micro service once stos

00:18:05,640 --> 00:18:11,730
install has a proxy that listens to it

00:18:09,110 --> 00:18:12,570
how else would you get on a good juicy

00:18:11,730 --> 00:18:15,300
Jaeger

00:18:12,570 --> 00:18:20,120
I mean tracing data for Jaeger right so

00:18:15,300 --> 00:18:24,000
you need to have a proxy the issues the

00:18:20,120 --> 00:18:27,540
configuration change requests as what

00:18:24,000 --> 00:18:29,640
the sto command and control team or the

00:18:27,540 --> 00:18:34,380
administrator of Sto and the control

00:18:29,640 --> 00:18:36,929
plane layer will be issuing to the data

00:18:34,380 --> 00:18:41,250
plane the envoi proxies this to the

00:18:36,929 --> 00:18:44,160
existing micro services right of course

00:18:41,250 --> 00:18:46,230
their options in the industry I'm not

00:18:44,160 --> 00:18:48,720
saying this is specific to red hair open

00:18:46,230 --> 00:18:49,440
sure you could switch for instance the

00:18:48,720 --> 00:18:53,190
data plane

00:18:49,440 --> 00:18:54,900
we recommend envoy from Red Hat certain

00:18:53,190 --> 00:18:56,820
customer implementations who knows in

00:18:54,900 --> 00:18:58,350
the industry is huge is evolving is so

00:18:56,820 --> 00:19:02,490
exciting they might want to switch out

00:18:58,350 --> 00:19:05,790
and boy for the fastest web server out

00:19:02,490 --> 00:19:08,190
there in the market nginx and even here

00:19:05,790 --> 00:19:09,390
in Red Hat we use nginx to build

00:19:08,190 --> 00:19:13,220
somewhat more technology

00:19:09,390 --> 00:19:15,720
remember the north-south traffic whoo

00:19:13,220 --> 00:19:18,860
rather than whoo what do you think

00:19:15,720 --> 00:19:21,809
manages that we believe a API management

00:19:18,860 --> 00:19:23,280
platform should be should do the trick

00:19:21,809 --> 00:19:25,770
it should be the right candidate to

00:19:23,280 --> 00:19:27,570
manage that and you know what three

00:19:25,770 --> 00:19:33,830
skill API management which is from Red

00:19:27,570 --> 00:19:37,590
Hat is baked with an engine X engine

00:19:33,830 --> 00:19:40,350
underneath so this is the architecture

00:19:37,590 --> 00:19:43,050
you could get it from sto dot IO and you

00:19:40,350 --> 00:19:46,410
can see what I just described from the

00:19:43,050 --> 00:19:48,929
ambassadorial point of view the proxy is

00:19:46,410 --> 00:19:50,220
sits next to these services and the

00:19:48,929 --> 00:19:52,289
whole idea here is that

00:19:50,220 --> 00:19:55,350
propagates any configuration changes

00:19:52,289 --> 00:19:57,659
that the control plane team might be

00:19:55,350 --> 00:19:59,539
issuing and there might be so many that

00:19:57,659 --> 00:20:02,159
is always being check are issued to

00:19:59,539 --> 00:20:03,659
underlying I know I've slipped it right

00:20:02,159 --> 00:20:05,340
unless your team like to flip there they

00:20:03,659 --> 00:20:06,960
put a control plane underneath should

00:20:05,340 --> 00:20:08,820
just put the control plane up on top

00:20:06,960 --> 00:20:10,620
that's why I just said a few minutes ago

00:20:08,820 --> 00:20:12,450
entropion sits on top of the data plane

00:20:10,620 --> 00:20:15,299
but it's flipped a little bit to

00:20:12,450 --> 00:20:17,669
emphasize that we care about the micro

00:20:15,299 --> 00:20:19,679
service first that's right microservice

00:20:17,669 --> 00:20:22,020
first that's what the steel community

00:20:19,679 --> 00:20:24,330
cares about it ain't just about the

00:20:22,020 --> 00:20:26,429
control plane its flipped upside down

00:20:24,330 --> 00:20:27,090
because the health of the micro-service

00:20:26,429 --> 00:20:29,520
comes first

00:20:27,090 --> 00:20:32,070
so therefore whenever there is any

00:20:29,520 --> 00:20:34,860
configuration management change request

00:20:32,070 --> 00:20:36,419
goes true number one obviously the

00:20:34,860 --> 00:20:38,669
different parts of the control plane

00:20:36,419 --> 00:20:41,460
here we have different cool sounding

00:20:38,669 --> 00:20:43,080
names that what's the sound like the

00:20:41,460 --> 00:20:45,510
naval you know

00:20:43,080 --> 00:20:48,840
enthusiasts or some kind of sailing

00:20:45,510 --> 00:20:53,159
enthusiasts pilot galley and mixer and

00:20:48,840 --> 00:20:53,640
it goes eventually up into the data

00:20:53,159 --> 00:20:58,860
layer

00:20:53,640 --> 00:21:01,140
alright so data layer data plane it is a

00:20:58,860 --> 00:21:03,990
collection of service proxies it is men

00:21:01,140 --> 00:21:06,059
for you to implement these policies and

00:21:03,990 --> 00:21:10,770
communicate directly one two one one

00:21:06,059 --> 00:21:12,690
envoi entity to one micro service so and

00:21:10,770 --> 00:21:16,409
voice default service proxy like as it

00:21:12,690 --> 00:21:19,919
can be always be swapped out but very

00:21:16,409 --> 00:21:21,240
importantly why envoy fizzes the rest on

00:21:19,919 --> 00:21:27,990
the market C++

00:21:21,240 --> 00:21:30,360
it is one of the highly performing proxy

00:21:27,990 --> 00:21:34,320
entities out there because they have

00:21:30,360 --> 00:21:36,570
support for HTTP 2 and G RPC makes it

00:21:34,320 --> 00:21:39,210
very suitable it has very fast

00:21:36,570 --> 00:21:40,710
communication with the service endpoints

00:21:39,210 --> 00:21:43,380
now let's talk about the control plane

00:21:40,710 --> 00:21:45,440
all those cool sounding naval terms or

00:21:43,380 --> 00:21:48,150
sailing terms right

00:21:45,440 --> 00:21:51,390
it is the single point of administration

00:21:48,150 --> 00:21:54,120
whenever a minister administrator wants

00:21:51,390 --> 00:21:55,559
to affect changes they don't go straight

00:21:54,120 --> 00:22:00,190
to any other plane not data plane

00:21:55,559 --> 00:22:03,580
definitely the control plane and

00:22:00,190 --> 00:22:07,059
it is meant to do is that the service

00:22:03,580 --> 00:22:09,279
proxies require all these change

00:22:07,059 --> 00:22:12,460
requests sent by the control plane to be

00:22:09,279 --> 00:22:16,269
updated right and very importantly it

00:22:12,460 --> 00:22:18,940
combines all the isolated stateless

00:22:16,269 --> 00:22:21,159
citecar proxies into a single serviceman

00:22:18,940 --> 00:22:25,029
that's a secret history very importantly

00:22:21,159 --> 00:22:27,759
as well you keep talking about the

00:22:25,029 --> 00:22:31,210
traffic that is collected by the control

00:22:27,759 --> 00:22:32,950
plane on behalf of individual services

00:22:31,210 --> 00:22:37,090
when it's aggregated these are known as

00:22:32,950 --> 00:22:41,440
telemetry data telemetry data okay so

00:22:37,090 --> 00:22:43,830
individual control plane entities pilot

00:22:41,440 --> 00:22:47,590
what does it do well I basically

00:22:43,830 --> 00:22:50,519
configures the underlying data plane it

00:22:47,590 --> 00:22:53,529
converts the higher-level routing rules

00:22:50,519 --> 00:22:56,769
controls the traffic behavior just like

00:22:53,529 --> 00:22:59,289
this so it has the technology to

00:22:56,769 --> 00:23:01,860
propagate any of the configuration

00:22:59,289 --> 00:23:05,470
change requests down to the day earlier

00:23:01,860 --> 00:23:07,509
Citadel as the term might indicate is a

00:23:05,470 --> 00:23:10,509
bastion of sorts so it's meant to

00:23:07,509 --> 00:23:13,809
safeguard against intrusion so it is the

00:23:10,509 --> 00:23:17,320
security entity in steel and it is meant

00:23:13,809 --> 00:23:20,590
to enforce based on microservice

00:23:17,320 --> 00:23:22,690
identity rather than you know network

00:23:20,590 --> 00:23:25,480
identities what's a typical net worth at

00:23:22,690 --> 00:23:27,759
the IP address hostname know talking

00:23:25,480 --> 00:23:30,610
about service identities so there would

00:23:27,759 --> 00:23:35,799
be a set of security policies associated

00:23:30,610 --> 00:23:39,159
to one service steal effects set and

00:23:35,799 --> 00:23:44,860
forces that policy Kelly it sounds like

00:23:39,159 --> 00:23:46,799
a ship so somewhere would be the

00:23:44,860 --> 00:23:50,200
repository of oil configuration policies

00:23:46,799 --> 00:23:51,909
somewhere will be the ingestion engine

00:23:50,200 --> 00:23:56,409
for all the telemetry data that's Kelly

00:23:51,909 --> 00:23:59,769
and somewhere you need to insulate in in

00:23:56,409 --> 00:24:02,559
some sense a buffer right that insulates

00:23:59,769 --> 00:24:06,070
all the other in steel components like

00:24:02,559 --> 00:24:08,230
Citadel and pilot away from the

00:24:06,070 --> 00:24:10,389
underlying platform guess what it is all

00:24:08,230 --> 00:24:13,450
CP open ship container platform and

00:24:10,389 --> 00:24:15,280
that's the galleys job I'm a mixer

00:24:13,450 --> 00:24:18,370
you know something sounds like a drink

00:24:15,280 --> 00:24:21,190
again right so it's a Friday afternoon

00:24:18,370 --> 00:24:24,790
and keep talking about and dropping all

00:24:21,190 --> 00:24:27,880
these hints about beverages

00:24:24,790 --> 00:24:31,360
well mixer is a very important bridge

00:24:27,880 --> 00:24:36,010
between the data plane and a control

00:24:31,360 --> 00:24:38,950
plane it's an abstraction layer oh it's

00:24:36,010 --> 00:24:42,040
a traction entity I won't call a belongs

00:24:38,950 --> 00:24:44,470
in a control plane the idea is that all

00:24:42,040 --> 00:24:47,010
your fare is backends and voi which

00:24:44,470 --> 00:24:53,380
right now we standardize on the Envoy

00:24:47,010 --> 00:24:55,180
would have some means of oh is devoid

00:24:53,380 --> 00:24:57,360
actually the the back end is devoid of

00:24:55,180 --> 00:25:01,330
some means of precondition checking

00:24:57,360 --> 00:25:03,940
example quota checks example how you

00:25:01,330 --> 00:25:07,540
would retrieve an aggregate elementary

00:25:03,940 --> 00:25:10,210
data and prepare it for a reporting

00:25:07,540 --> 00:25:13,720
framework to consume it the likes of

00:25:10,210 --> 00:25:16,900
maybe Cali have you clearly ki a Li

00:25:13,720 --> 00:25:18,520
likes of a cabana dashboard we like Jia

00:25:16,900 --> 00:25:20,260
Li we like keep on our - but this

00:25:18,520 --> 00:25:21,730
probably be more on the open show

00:25:20,260 --> 00:25:24,460
container platform layer and clearly is

00:25:21,730 --> 00:25:27,460
more on the service mesh I talk about

00:25:24,460 --> 00:25:30,940
that often line if - boring is really

00:25:27,460 --> 00:25:33,010
interesting to you the important thing

00:25:30,940 --> 00:25:35,140
here is there must be some form of all

00:25:33,010 --> 00:25:35,790
these precondition checking quarter

00:25:35,140 --> 00:25:38,140
checks

00:25:35,790 --> 00:25:40,330
data preparation that's what makes our

00:25:38,140 --> 00:25:43,450
das mixer is really the abstraction

00:25:40,330 --> 00:25:45,940
interface mixers also available entry

00:25:43,450 --> 00:25:51,040
skill API management which I mentioned

00:25:45,940 --> 00:25:54,010
was the go-to solution for safeguarding

00:25:51,040 --> 00:25:57,570
north-south ingress egress and ingress

00:25:54,010 --> 00:26:00,370
traffic into a operating environment

00:25:57,570 --> 00:26:06,190
why because you need to have some sort

00:26:00,370 --> 00:26:09,640
of a abstraction layer a adapter going

00:26:06,190 --> 00:26:12,460
into the data plane so you can see here

00:26:09,640 --> 00:26:15,160
at the bottom one I wrote is that the

00:26:12,460 --> 00:26:20,320
use often adapters this there's at least

00:26:15,160 --> 00:26:24,040
one from the mm mixer community as a

00:26:20,320 --> 00:26:25,930
form of an integration bridge here you

00:26:24,040 --> 00:26:27,460
can see where makes a place of each role

00:26:25,930 --> 00:26:29,770
with all the rich

00:26:27,460 --> 00:26:32,169
Peter talked about logging Kodambakkam

00:26:29,770 --> 00:26:34,779
checks authorization yes authorization

00:26:32,169 --> 00:26:38,230
is what makes it does as well it serves

00:26:34,779 --> 00:26:41,830
as a bridge from control plane to the

00:26:38,230 --> 00:26:43,659
airplane so a few version numbers just

00:26:41,830 --> 00:26:48,070
toss out open ship service mesh

00:26:43,659 --> 00:26:51,640
currently supports is still upstream 1.1

00:26:48,070 --> 00:26:53,950
dot X as we speak it is supported on

00:26:51,640 --> 00:26:56,620
open ship container platform for all

00:26:53,950 --> 00:27:00,490
right here very importantly also you

00:26:56,620 --> 00:27:02,770
have the multi tendency highlight of

00:27:00,490 --> 00:27:05,380
open shift service mesh highlight of of

00:27:02,770 --> 00:27:07,870
course sto implementations on top cuban

00:27:05,380 --> 00:27:09,490
at ease I'm not saying that there is no

00:27:07,870 --> 00:27:12,279
one out there in the market trying to do

00:27:09,490 --> 00:27:14,559
the same forget is still to run on top

00:27:12,279 --> 00:27:16,659
of a container platform but why would I

00:27:14,559 --> 00:27:18,340
want to do that why goodness sakes why

00:27:16,659 --> 00:27:21,340
would they want to go through all that

00:27:18,340 --> 00:27:23,919
hard work when Red Hat has done it now

00:27:21,340 --> 00:27:25,690
the reason multi-tenancy the cheat much

00:27:23,919 --> 00:27:27,820
at least at the top of the list of

00:27:25,690 --> 00:27:30,520
priorities of them doing it achieve

00:27:27,820 --> 00:27:32,500
multi-tenancy imagine yahoo have ulti

00:27:30,520 --> 00:27:36,149
tendency bought both control plane and

00:27:32,500 --> 00:27:38,860
data plane well you could be I getting

00:27:36,149 --> 00:27:40,179
for instance your services provider I'm

00:27:38,860 --> 00:27:41,649
not saying that telecommunication

00:27:40,179 --> 00:27:44,679
service provider but maybe they should

00:27:41,649 --> 00:27:48,580
be considering this and you allow say

00:27:44,679 --> 00:27:51,909
your other corporate clients clientele

00:27:48,580 --> 00:27:54,220
to get onboard say a containerized sto

00:27:51,909 --> 00:27:56,919
environment could be open ship service

00:27:54,220 --> 00:27:59,320
mesh and then each of them being a

00:27:56,919 --> 00:28:02,140
tenant play a role in safeguarding

00:27:59,320 --> 00:28:04,240
excess or affecting configuration

00:28:02,140 --> 00:28:06,720
changes putting in all these policies on

00:28:04,240 --> 00:28:09,279
behalf of their own clientele their own

00:28:06,720 --> 00:28:12,190
customers what do we have we have the

00:28:09,279 --> 00:28:14,500
makings of an ecosystem right for which

00:28:12,190 --> 00:28:15,700
I have a telecommunications industry may

00:28:14,500 --> 00:28:17,289
be financial

00:28:15,700 --> 00:28:19,539
it becomes the ecosystem may you go

00:28:17,289 --> 00:28:22,090
system where anyone with great ideas

00:28:19,539 --> 00:28:25,899
wanna get on top of say a micro service

00:28:22,090 --> 00:28:27,730
framework on on top of a say kubernetes

00:28:25,899 --> 00:28:30,909
platform because start deploying it

00:28:27,730 --> 00:28:32,890
really really quickly well bad I would

00:28:30,909 --> 00:28:37,000
not want you to bear with me with some

00:28:32,890 --> 00:28:38,919
of the kubernetes related terminologies

00:28:37,000 --> 00:28:40,840
are moving really quick almost to the

00:28:38,919 --> 00:28:44,590
end almost there

00:28:40,840 --> 00:28:46,330
not sauce in the east-west so what's so

00:28:44,590 --> 00:28:48,789
cool by API management playing a big

00:28:46,330 --> 00:28:50,679
role in on south traffic management

00:28:48,789 --> 00:28:52,480
now think about egress and ingress and

00:28:50,679 --> 00:28:53,710
you probably have different kinds of

00:28:52,480 --> 00:28:55,750
architectures in your mind a most

00:28:53,710 --> 00:28:57,250
popular one is on the left hand side

00:28:55,750 --> 00:28:58,630
there's traffic coming in and the right

00:28:57,250 --> 00:29:01,570
hand side that's traffic going out all

00:28:58,630 --> 00:29:04,450
right it's that's typical north-south

00:29:01,570 --> 00:29:06,850
now the question here is question here

00:29:04,450 --> 00:29:09,820
is who are we dealing with we're dealing

00:29:06,850 --> 00:29:10,960
with the humble microservice a single

00:29:09,820 --> 00:29:13,059
technical operation of business

00:29:10,960 --> 00:29:16,690
operation baked into a piece of code

00:29:13,059 --> 00:29:19,630
like spring boot question now you have a

00:29:16,690 --> 00:29:21,960
million micro services not just one so

00:29:19,630 --> 00:29:28,440
why are we dealing with it sounds like a

00:29:21,960 --> 00:29:30,580
whole lot of operational interfacing

00:29:28,440 --> 00:29:35,799
every single micro service even though

00:29:30,580 --> 00:29:39,880
it's a single business op has a has they

00:29:35,799 --> 00:29:42,130
expose interface operational interface

00:29:39,880 --> 00:29:44,159
does that sound like an API that

00:29:42,130 --> 00:29:46,149
typically is an API the best form of

00:29:44,159 --> 00:29:47,770
communication with that sort of a

00:29:46,149 --> 00:29:50,830
service and micro service is through an

00:29:47,770 --> 00:29:52,779
API now you have a million of it so that

00:29:50,830 --> 00:29:55,059
means you have a million entries in your

00:29:52,779 --> 00:29:57,840
swagger document ever so I got a comment

00:29:55,059 --> 00:30:01,990
right it is among the most popular

00:29:57,840 --> 00:30:06,490
format for describing services a holla

00:30:01,990 --> 00:30:08,649
API s-- so now that was just a million

00:30:06,490 --> 00:30:12,279
definitions or the million definitions

00:30:08,649 --> 00:30:15,370
on the interface site and how about

00:30:12,279 --> 00:30:17,260
runtime so in real time run time you

00:30:15,370 --> 00:30:20,049
might be depending on popularity of

00:30:17,260 --> 00:30:23,679
these services looking at times two

00:30:20,049 --> 00:30:28,270
times three times for a mound of traffic

00:30:23,679 --> 00:30:30,190
going in to the service layer so chances

00:30:28,270 --> 00:30:32,770
are this is getting more complex than

00:30:30,190 --> 00:30:35,169
issue it time to introduce API

00:30:32,770 --> 00:30:36,880
management layer so the Red Hat has a

00:30:35,169 --> 00:30:39,549
recommendation for that it's called

00:30:36,880 --> 00:30:41,880
three scale API management so it's

00:30:39,549 --> 00:30:44,649
concerning no soft ingress and egress

00:30:41,880 --> 00:30:48,179
traffic about east-west

00:30:44,649 --> 00:30:52,090
parallel pipe and Island Expressway

00:30:48,179 --> 00:30:54,310
simple between each microservice and

00:30:52,090 --> 00:30:58,540
there's a million of it still as my

00:30:54,310 --> 00:31:01,480
still at my analogy imagine an amount

00:30:58,540 --> 00:31:02,260
number of permutations between of these

00:31:01,480 --> 00:31:04,690
micro-services

00:31:02,260 --> 00:31:08,740
micro-service do make micro service

00:31:04,690 --> 00:31:11,140
calls so rephrase that micro-service do

00:31:08,740 --> 00:31:14,260
make calls do I'm the microservices so

00:31:11,140 --> 00:31:16,900
you need to be concerned about intra an

00:31:14,260 --> 00:31:20,020
operating environment traffic there will

00:31:16,900 --> 00:31:22,120
be either s intra not just inter all

00:31:20,020 --> 00:31:24,550
right now just egress ingress so we have

00:31:22,120 --> 00:31:26,500
the capabilities over we believe a mix

00:31:24,550 --> 00:31:28,600
of the service mesh as well as the API

00:31:26,500 --> 00:31:30,850
management platform will do the trick

00:31:28,600 --> 00:31:34,750
both of which would have the means of

00:31:30,850 --> 00:31:37,060
observability security right resiliency

00:31:34,750 --> 00:31:39,520
as well oh then I'm not mentioned chaos

00:31:37,060 --> 00:31:41,860
testing so Netflix that's one tool that

00:31:39,520 --> 00:31:44,830
quite chaos monkey what a name is really

00:31:41,860 --> 00:31:46,660
cool all right so we believe there's

00:31:44,830 --> 00:31:49,300
also other tools out there that does

00:31:46,660 --> 00:31:50,770
chaos testing right will keep the

00:31:49,300 --> 00:31:53,950
presentation sure but that is a great

00:31:50,770 --> 00:31:56,500
topic we could length so chaos testing

00:31:53,950 --> 00:31:59,050
against your targeted micro service

00:31:56,500 --> 00:32:02,440
back-end should be a very important

00:31:59,050 --> 00:32:05,020
phase of your micro service development

00:32:02,440 --> 00:32:07,120
lifecycle they are said it sdlc wise

00:32:05,020 --> 00:32:08,950
testing is important test test test

00:32:07,120 --> 00:32:11,380
and not just any test shake it all up

00:32:08,950 --> 00:32:13,690
see if any of those service inter

00:32:11,380 --> 00:32:15,730
service connections or interests of his

00:32:13,690 --> 00:32:16,900
connections break because if they do

00:32:15,730 --> 00:32:19,330
that's good

00:32:16,900 --> 00:32:21,460
the next thing is if they break do they

00:32:19,330 --> 00:32:22,930
survive the failure it's not good a

00:32:21,460 --> 00:32:26,590
another say it's good it's break it's

00:32:22,930 --> 00:32:28,360
broken you you you must have a means of

00:32:26,590 --> 00:32:32,500
surviving a failure so service mesh is

00:32:28,360 --> 00:32:35,710
supposed to pick in a pattern cut

00:32:32,500 --> 00:32:38,380
circuit breaker Allah Netflix OSS right

00:32:35,710 --> 00:32:40,450
hystrix so you must have a means of

00:32:38,380 --> 00:32:42,730
kicking equivalent of a circuit breaker

00:32:40,450 --> 00:32:46,500
in which means there will be a failover

00:32:42,730 --> 00:32:49,710
target for the broken inter-service

00:32:46,500 --> 00:32:52,690
connectivity channel dedicated in time

00:32:49,710 --> 00:32:55,120
did it affect any of the SL days that

00:32:52,690 --> 00:32:58,980
put in place on behalf of the

00:32:55,120 --> 00:33:03,960
stakeholders so talk about stakeholders

00:32:58,980 --> 00:33:05,890
they are not born equal it depends on

00:33:03,960 --> 00:33:10,260
depends on

00:33:05,890 --> 00:33:12,790
simply or what do they want out of the

00:33:10,260 --> 00:33:14,500
engagement experience do they want

00:33:12,790 --> 00:33:16,059
higher salaries do what they want though

00:33:14,500 --> 00:33:17,200
did you just okay with

00:33:16,059 --> 00:33:19,690
middle-of-the-road

00:33:17,200 --> 00:33:22,150
so there comes in my tearing of

00:33:19,690 --> 00:33:25,929
customers and users remember the telco

00:33:22,150 --> 00:33:28,030
example I gave great example create an

00:33:25,929 --> 00:33:29,710
implementation get them all in two

00:33:28,030 --> 00:33:32,650
different tiers gold platinum silver

00:33:29,710 --> 00:33:34,750
bronze something tree skills familiar

00:33:32,650 --> 00:33:37,000
with the API management product I just

00:33:34,750 --> 00:33:40,480
talked about and it's also something

00:33:37,000 --> 00:33:42,370
that the service mesh wall is beginning

00:33:40,480 --> 00:33:44,410
to get get a hang off which you know

00:33:42,370 --> 00:33:47,830
what's getting different hearing in

00:33:44,410 --> 00:33:50,290
place Allah if you won the highest

00:33:47,830 --> 00:33:52,990
availability for your own million micro

00:33:50,290 --> 00:33:54,880
service at operating environment not

00:33:52,990 --> 00:33:55,929
only how much I know money is gonna be

00:33:54,880 --> 00:33:58,990
the next topic how much are you willing

00:33:55,929 --> 00:34:00,790
to pay for the next thing would be how

00:33:58,990 --> 00:34:05,970
you want to do it how would you want to

00:34:00,790 --> 00:34:08,379
get that 99.9% availability SLA up

00:34:05,970 --> 00:34:11,080
southern current configuration changes

00:34:08,379 --> 00:34:13,570
you want to make through the mix they're

00:34:11,080 --> 00:34:17,109
just up the ball using pilot and mixer

00:34:13,570 --> 00:34:20,800
how about security what kind of level of

00:34:17,109 --> 00:34:25,859
security do you want so they my

00:34:20,800 --> 00:34:33,730
different tiers sauce the sauce the

00:34:25,859 --> 00:34:35,669
issue of having different SLA s right it

00:34:33,730 --> 00:34:39,490
put that in place so that's it

00:34:35,669 --> 00:34:41,010
any questions otherwise feel free to

00:34:39,490 --> 00:34:45,550
contact me through any of these channels

00:34:41,010 --> 00:34:46,869
that's it I actually have nothing else

00:34:45,550 --> 00:34:50,530
and this is actually my last

00:34:46,869 --> 00:34:53,369
presentation for Red Hat this month so

00:34:50,530 --> 00:34:53,369

YouTube URL: https://www.youtube.com/watch?v=d-6K-5PTkjU


