Title: Kubernetes at the Edge - Isham Mohamed Iqbal & Musthafa Naja
Publication date: 2020-03-19
Playlist: FOSSASIA Summit 2020 - Cloud
Description: 
	FOSSASIA Summit 2020 - Cloud Track
Captions: 
	00:00:00,179 --> 00:00:04,799
hi this is Nigel Mustapha from Sri Lanka

00:00:02,879 --> 00:00:07,859
and a how mr. Ishii Muhammad with me

00:00:04,799 --> 00:00:09,570
today to present today's topic which we

00:00:07,859 --> 00:00:11,340
hope will be interesting for you as

00:00:09,570 --> 00:00:13,590
we'll be talking about a more

00:00:11,340 --> 00:00:16,320
interesting topic about its computing

00:00:13,590 --> 00:00:19,350
and should be specific its Cuban it is

00:00:16,320 --> 00:00:22,850
that age and we're very happy to be a

00:00:19,350 --> 00:00:26,609
part of speakers at the physician 2020

00:00:22,850 --> 00:00:28,650
at the first glance let me introduce the

00:00:26,609 --> 00:00:31,560
concept of edge computing before driving

00:00:28,650 --> 00:00:33,180
tragically the edge today discuss here

00:00:31,560 --> 00:00:36,180
refers to the geographical distribution

00:00:33,180 --> 00:00:38,190
of computing resources closer to the

00:00:36,180 --> 00:00:41,390
device and further away from the

00:00:38,190 --> 00:00:44,579
resource nodes of the cloud datacenter

00:00:41,390 --> 00:00:46,860
the real world as computing cannot exist

00:00:44,579 --> 00:00:50,010
alone and it must be connected to of any

00:00:46,860 --> 00:00:52,579
remote data centers how clouds and it

00:00:50,010 --> 00:00:55,949
resides on a distributed architecture

00:00:52,579 --> 00:00:58,020
wall the chief IOT as an example in

00:00:55,949 --> 00:01:01,230
addition to sensors that collect data

00:00:58,020 --> 00:01:03,329
and the surrounding environment as

00:01:01,230 --> 00:01:06,479
dividers will also receive control

00:01:03,329 --> 00:01:08,909
instructions from the cloud there are

00:01:06,479 --> 00:01:11,369
generally two modes for each devices to

00:01:08,909 --> 00:01:13,350
connect to the cloud one is direct

00:01:11,369 --> 00:01:16,439
connection and the other is connection

00:01:13,350 --> 00:01:19,979
through relay H nodes as shown in the

00:01:16,439 --> 00:01:21,750
friggin weather edge devices can

00:01:19,979 --> 00:01:22,439
directly connect to the cloud or data

00:01:21,750 --> 00:01:24,869
center

00:01:22,439 --> 00:01:27,420
depends on whether there is only

00:01:24,869 --> 00:01:31,290
routable IP in the world such as mobile

00:01:27,420 --> 00:01:33,840
phones and tablets power most devices

00:01:31,290 --> 00:01:36,390
communicate with edge nodes by hanya for

00:01:33,840 --> 00:01:40,200
communication protocol which it should

00:01:36,390 --> 00:01:42,420
connect the cloud of these essential the

00:01:40,200 --> 00:01:45,270
edge node is the convergence point of

00:01:42,420 --> 00:01:48,420
the device there are two types of edge

00:01:45,270 --> 00:01:52,079
nodes namely infrastructure edge and the

00:01:48,420 --> 00:01:52,770
device or sensor H compared with device

00:01:52,079 --> 00:01:54,630
age

00:01:52,770 --> 00:01:56,909
infrastructure edge has a stronger

00:01:54,630 --> 00:01:59,460
computing and storage capabilities and

00:01:56,909 --> 00:02:02,219
is usually connected to the edge Center

00:01:59,460 --> 00:02:04,200
through the backbone network so it has

00:02:02,219 --> 00:02:07,020
greater network bandwidth and more

00:02:04,200 --> 00:02:10,530
reliable network connections such as CDN

00:02:07,020 --> 00:02:11,970
game servers and so on in addition to

00:02:10,530 --> 00:02:13,920
running containers at

00:02:11,970 --> 00:02:16,890
each of the infrastructure some even

00:02:13,920 --> 00:02:21,480
have enough resources to run the full

00:02:16,890 --> 00:02:24,090
cuban ities and the next subtopic I will

00:02:21,480 --> 00:02:25,970
introduce under the main topic is what

00:02:24,090 --> 00:02:28,440
is Cuban it is

00:02:25,970 --> 00:02:31,080
Cuban it is is the container of the

00:02:28,440 --> 00:02:33,270
straight chain structure which is

00:02:31,080 --> 00:02:35,760
suitable for light applications with

00:02:33,270 --> 00:02:38,240
higher availability and what we talk

00:02:35,760 --> 00:02:41,070
about the advantages of communities the

00:02:38,240 --> 00:02:43,800
first thing that we can talk about is

00:02:41,070 --> 00:02:48,240
the agile application creation and

00:02:43,800 --> 00:02:51,060
deployment and ability of its to

00:02:48,240 --> 00:02:54,600
continuous deployment and the

00:02:51,060 --> 00:02:58,560
portability of operating system and the

00:02:54,600 --> 00:03:04,950
cloud and also we can say many more

00:02:58,560 --> 00:03:06,750
about advantages of Cuba natives and the

00:03:04,950 --> 00:03:10,280
next subtopic that we are going to talk

00:03:06,750 --> 00:03:13,110
about is why Cuban it is at the edge

00:03:10,280 --> 00:03:16,320
Cuban it is has become a cloud nature

00:03:13,110 --> 00:03:18,540
standard and is capable of providing a

00:03:16,320 --> 00:03:21,180
consistent cloud experience on any

00:03:18,540 --> 00:03:24,120
infrastructure we can often see the

00:03:21,180 --> 00:03:27,440
combination of container and Cuban ities

00:03:24,120 --> 00:03:30,150
play in 10 chance efficiency in divorce

00:03:27,440 --> 00:03:33,500
recently more and more communities are

00:03:30,150 --> 00:03:35,670
running outside the data center edges

00:03:33,500 --> 00:03:38,459
different deploy more complex

00:03:35,670 --> 00:03:42,239
applications at the edge Cuba needles is

00:03:38,459 --> 00:03:46,410
an ideal choice the fridges that support

00:03:42,239 --> 00:03:48,150
the reason for the best choice there the

00:03:46,410 --> 00:03:50,580
lightweight and portability of

00:03:48,150 --> 00:03:52,410
containers which is very suitable for

00:03:50,580 --> 00:03:55,410
edge computing scenarios

00:03:52,410 --> 00:03:58,560
Cuban it is and Cuba latest has proven

00:03:55,410 --> 00:04:00,269
to be a very scalable and also the

00:03:58,560 --> 00:04:03,049
ability to provide a consistent

00:04:00,269 --> 00:04:06,930
experience about the underlying

00:04:03,049 --> 00:04:09,450
infrastructure the supportiveness

00:04:06,930 --> 00:04:12,480
of both cluster and standalone

00:04:09,450 --> 00:04:14,610
operations and maintenance mode and the

00:04:12,480 --> 00:04:17,600
other one is the workload abstraction

00:04:14,610 --> 00:04:20,400
such as deployment and jobs and

00:04:17,600 --> 00:04:23,190
application rolling upgrade in role bags

00:04:20,400 --> 00:04:24,200
and also a strong ground native

00:04:23,190 --> 00:04:26,390
technology occurs

00:04:24,200 --> 00:04:29,900
Steph has been formed around cabinetry

00:04:26,390 --> 00:04:33,110
status monitoring logging CI storage

00:04:29,900 --> 00:04:37,400
network can find many readily truth

00:04:33,110 --> 00:04:39,140
chains and the other one is which is

00:04:37,400 --> 00:04:42,610
listed here is the support of

00:04:39,140 --> 00:04:49,910
heterogeneous hardware configuration and

00:04:42,610 --> 00:04:52,520
usage of family a cue bacterial or hand

00:04:49,910 --> 00:04:55,220
charts which means the users can use

00:04:52,520 --> 00:04:57,530
family air Quebec fuel or found shards

00:04:55,220 --> 00:05:00,290
to push IOT applications from the town

00:04:57,530 --> 00:05:02,150
to the edge and also its nodes can be

00:05:00,290 --> 00:05:05,600
directly map to the Kuban it is not

00:05:02,150 --> 00:05:10,720
resources and cuban extended api can

00:05:05,600 --> 00:05:13,730
implement abstraction of h devices and

00:05:10,720 --> 00:05:17,030
that is about what cuban it is at the

00:05:13,730 --> 00:05:19,340
edge and the other subtopics about the

00:05:17,030 --> 00:05:21,650
problems in deploying cuban etics at the

00:05:19,340 --> 00:05:24,020
edge and how we are going to deploy

00:05:21,650 --> 00:05:26,810
communities at the edge would be

00:05:24,020 --> 00:05:29,690
conducted by my fellow meet Michelle

00:05:26,810 --> 00:05:32,050
muhammad's thank you so much Nyjah for

00:05:29,690 --> 00:05:36,920
your great introduction about

00:05:32,050 --> 00:05:39,320
communities in H and y equipo natives

00:05:36,920 --> 00:05:41,990
can be used at the edge so now let's

00:05:39,320 --> 00:05:44,750
have a look at like what other problems

00:05:41,990 --> 00:05:46,580
that that are the potential problems

00:05:44,750 --> 00:05:48,470
that we may face when we deploy

00:05:46,580 --> 00:05:53,600
kubernetes at the edge I mean kubernetes

00:05:48,470 --> 00:05:56,480
as it is I did so as I just said

00:05:53,600 --> 00:05:58,220
previously deploying kubernetes at the

00:05:56,480 --> 00:06:02,390
edge will be really beneficial but

00:05:58,220 --> 00:06:04,640
however kubernetes is designed for cloud

00:06:02,390 --> 00:06:08,060
data centers so to use kubernetes

00:06:04,640 --> 00:06:10,460
capabilities at th cope nad so its

00:06:08,060 --> 00:06:14,440
extensions need to solve some problems

00:06:10,460 --> 00:06:16,010
such as I mean erm erm slow power

00:06:14,440 --> 00:06:17,570
consumption and multi-core

00:06:16,010 --> 00:06:22,910
characteristics makes

00:06:17,570 --> 00:06:24,860
eren eren related CPUs widely used in

00:06:22,910 --> 00:06:27,230
the IOT or edge field

00:06:24,860 --> 00:06:28,220
however most kubernetes distributions

00:06:27,230 --> 00:06:31,880
don't support

00:06:28,220 --> 00:06:35,060
erm architecture hmm and many device

00:06:31,880 --> 00:06:36,830
edge resources specifications are

00:06:35,060 --> 00:06:38,030
limited specially the CP processing

00:06:36,830 --> 00:06:41,170
power is weak

00:06:38,030 --> 00:06:46,070
so full kubernetes cannot be deployed

00:06:41,170 --> 00:06:47,180
and also kubernetes relies on on the

00:06:46,070 --> 00:06:50,030
list

00:06:47,180 --> 00:06:54,680
Oh watch mechanism it doesn't support

00:06:50,030 --> 00:06:57,200
offline operation and offline of of of

00:06:54,680 --> 00:07:01,070
an H node is quite normal such as device

00:06:57,200 --> 00:07:02,990
leap restart and so on and kubernetes

00:07:01,070 --> 00:07:05,450
operations and maintenance are still too

00:07:02,990 --> 00:07:08,200
complicated compared to the subset of

00:07:05,450 --> 00:07:11,270
functions used in the eight scenarios

00:07:08,200 --> 00:07:14,270
and also special network protocols and

00:07:11,270 --> 00:07:17,300
topologies requirements that are there

00:07:14,270 --> 00:07:20,390
for the H because like device access

00:07:17,300 --> 00:07:23,210
protocols of one are not tcp/ip

00:07:20,390 --> 00:07:26,780
protocols and they are such as Modbus or

00:07:23,210 --> 00:07:30,440
PC you aim for the industrial Internet

00:07:26,780 --> 00:07:33,740
of Things and Bluetooth ZigBee for the

00:07:30,440 --> 00:07:37,100
consumer Internet of Things so regarding

00:07:33,740 --> 00:07:40,880
how to use go Panetta set a survey by

00:07:37,100 --> 00:07:43,160
the kubernetes aut or h WG organization

00:07:40,880 --> 00:07:45,560
source that 30% of the users watch

00:07:43,160 --> 00:07:48,380
deploy a complete kubernetes cluster at

00:07:45,560 --> 00:07:50,750
the edge widens 30% of the users go to

00:07:48,380 --> 00:07:55,700
deploy kubernetes management plan in the

00:07:50,750 --> 00:08:04,220
cloud and only at the edge node agent to

00:07:55,700 --> 00:08:07,760
deploy communities so as we have seen

00:08:04,220 --> 00:08:10,520
the potential problems of deploying

00:08:07,760 --> 00:08:12,500
kubernetes as it is in the edge let's

00:08:10,520 --> 00:08:15,410
see how what are the solutions that are

00:08:12,500 --> 00:08:19,730
there to to to overcome these

00:08:15,410 --> 00:08:22,580
limitations cube H is one of the

00:08:19,730 --> 00:08:24,950
solutions which is a which is one of the

00:08:22,580 --> 00:08:27,320
first open intelligent edge platform

00:08:24,950 --> 00:08:28,940
based on kubernetes extensions to

00:08:27,320 --> 00:08:29,540
provide cloud side collaboration

00:08:28,940 --> 00:08:32,890
capabilities

00:08:29,540 --> 00:08:36,980
it is also CN CF s-- fest normal project

00:08:32,890 --> 00:08:37,550
fest formal project in the intelligent

00:08:36,980 --> 00:08:40,730
Edgefield

00:08:37,550 --> 00:08:44,900
cube h focus on the issues to be

00:08:40,730 --> 00:08:47,420
addressed like like what you can see in

00:08:44,900 --> 00:08:49,220
the slide in the screen cloud as

00:08:47,420 --> 00:08:51,700
collaboration heterogeneous resources

00:08:49,220 --> 00:08:55,030
large scale deployment lightweight and

00:08:51,700 --> 00:08:59,890
low footprint and also consistent device

00:08:55,030 --> 00:09:02,620
management and exists experience so this

00:08:59,890 --> 00:09:04,510
is how Kubek cube edges architecture

00:09:02,620 --> 00:09:08,770
looks like and it is clearly divided

00:09:04,510 --> 00:09:11,130
into three layers cloud edge and the

00:09:08,770 --> 00:09:15,160
device layer so this is a complete open

00:09:11,130 --> 00:09:17,230
source edge cloud platform from cloud to

00:09:15,160 --> 00:09:22,780
each device eliminating the concerns of

00:09:17,230 --> 00:09:25,560
user vendors cube is open source Cuba

00:09:22,780 --> 00:09:29,890
this process consists of the following

00:09:25,560 --> 00:09:33,190
five components it has a HD which is a

00:09:29,890 --> 00:09:35,320
newly developed lightweight cubelet that

00:09:33,190 --> 00:09:38,140
implements the lifecycle management of a

00:09:35,320 --> 00:09:41,290
cube kubernetes resource object such as

00:09:38,140 --> 00:09:43,240
port volume or no direct cetera meta

00:09:41,290 --> 00:09:46,300
management is responsible for the

00:09:43,240 --> 00:09:50,410
persistence of metadata which is the key

00:09:46,300 --> 00:09:54,400
to automatically it yeah which is a key

00:09:50,410 --> 00:09:58,150
to the autonomy of edge nodes each hub

00:09:54,400 --> 00:10:00,550
is a multiplexed message channel that

00:09:58,150 --> 00:10:02,800
provides reliable and efficient cloud

00:10:00,550 --> 00:10:06,310
edge information synchronization and

00:10:02,800 --> 00:10:08,530
device stream is used to abstract

00:10:06,310 --> 00:10:11,380
physical devices and generate a mapping

00:10:08,530 --> 00:10:16,090
of device states in the cloud and

00:10:11,380 --> 00:10:21,670
finally event bus subscribes to a device

00:10:16,090 --> 00:10:23,230
data from MQTT program so nobody's cloud

00:10:21,670 --> 00:10:26,650
process that includes two following

00:10:23,230 --> 00:10:28,450
components one of them is cloud hub

00:10:26,650 --> 00:10:31,120
which is deployed in the cloud and

00:10:28,450 --> 00:10:33,220
receives information that h-helped syncs

00:10:31,120 --> 00:10:35,350
to the cloud and then the other one is

00:10:33,220 --> 00:10:37,690
the edge controller which is deployed in

00:10:35,350 --> 00:10:40,150
the cloud to control the state

00:10:37,690 --> 00:10:42,760
synchronization of kubernetes api server

00:10:40,150 --> 00:10:44,460
and nodes applications and

00:10:42,760 --> 00:10:47,590
configurations at the edge

00:10:44,460 --> 00:10:51,010
finally kubernetes master ramps in the

00:10:47,590 --> 00:10:52,930
cloud user can directly manage h nose

00:10:51,010 --> 00:10:56,620
devices and application in the cloud to

00:10:52,930 --> 00:11:00,250
cube CTL command line the usage habits

00:10:56,620 --> 00:11:03,400
are exactly the same as the native

00:11:00,250 --> 00:11:04,810
kubernetes and there's no no need to

00:11:03,400 --> 00:11:08,800
read up to a new

00:11:04,810 --> 00:11:11,320
technology so this this image or the

00:11:08,800 --> 00:11:19,090
architecture diagram I have taken from

00:11:11,320 --> 00:11:20,800
cloud H dot IO and cloud H has the

00:11:19,090 --> 00:11:22,360
following capabilities I think most of

00:11:20,800 --> 00:11:24,850
the capabilities that we have already

00:11:22,360 --> 00:11:26,500
mentioned one of them is it's it's a

00:11:24,850 --> 00:11:29,560
paucity of line mode which is a very

00:11:26,500 --> 00:11:32,470
critical of Russia and functionality

00:11:29,560 --> 00:11:34,120
that is there in edge in order to

00:11:32,470 --> 00:11:36,430
support node cluster application and

00:11:34,120 --> 00:11:38,680
device management and this can run on

00:11:36,430 --> 00:11:40,420
low resources such as some home devices

00:11:38,680 --> 00:11:42,730
and this is platform independent which

00:11:40,420 --> 00:11:46,270
means it can depth can run on any cloud

00:11:42,730 --> 00:11:50,100
any noise and also this reduce support

00:11:46,270 --> 00:11:53,890
would person qtt and all other industry

00:11:50,100 --> 00:11:57,900
specific protocols and also this is

00:11:53,890 --> 00:12:03,520
extensible let's have a look at the

00:11:57,900 --> 00:12:06,070
cloud energy deployment model cloud it

00:12:03,520 --> 00:12:08,110
is a completely decentralized deployment

00:12:06,070 --> 00:12:10,060
model and the management plan is

00:12:08,110 --> 00:12:11,650
deployed in the cloud that we have

00:12:10,060 --> 00:12:15,250
already seen in the architecture diagram

00:12:11,650 --> 00:12:17,230
and H nodes can't run kubernetes agent

00:12:15,250 --> 00:12:19,480
without much resources from the

00:12:17,230 --> 00:12:21,460
kubernetes perspective when H naught

00:12:19,480 --> 00:12:24,790
plus cloud is complete a complete

00:12:21,460 --> 00:12:27,460
kubernetes cluster this deployment model

00:12:24,790 --> 00:12:30,250
can meet the deployment requirements of

00:12:27,460 --> 00:12:33,160
both device edge and infrastructure edge

00:12:30,250 --> 00:12:37,240
scenarios so this is how qu bench is

00:12:33,160 --> 00:12:40,360
being deployed so next let's have a look

00:12:37,240 --> 00:12:46,030
at the another option which can be an

00:12:40,360 --> 00:12:47,890
alternative for cupich which also solves

00:12:46,030 --> 00:12:50,800
the problem of deployed deploying

00:12:47,890 --> 00:12:55,900
kubernetes at the cloud which is on SK 3

00:12:50,800 --> 00:12:58,180
s so k 3 s is in official communities

00:12:55,900 --> 00:13:03,880
distribution certified by CN CF again

00:12:58,180 --> 00:13:07,000
and the open source when it comes to the

00:13:03,880 --> 00:13:09,130
open source time this is a little bit it

00:13:07,000 --> 00:13:12,160
came bit later than Q batch and this

00:13:09,130 --> 00:13:14,709
this has been designed specifically for

00:13:12,160 --> 00:13:16,870
the research and development operations

00:13:14,709 --> 00:13:18,220
and maintenance personnel who run

00:13:16,870 --> 00:13:22,120
kubernetes on the tree so

00:13:18,220 --> 00:13:25,300
constrained environment the purpose of

00:13:22,120 --> 00:13:28,270
Gately is to is to run small kubernetes

00:13:25,300 --> 00:13:35,650
clusters on the edge nodes of any cpu

00:13:28,270 --> 00:13:38,590
such a 686 armed 64 etc in fact k3s is

00:13:35,650 --> 00:13:41,440
based on a usually it comes with a

00:13:38,590 --> 00:13:44,860
specific version of kubernetes and

00:13:41,440 --> 00:13:49,270
directly made out of the code changes

00:13:44,860 --> 00:13:51,400
and kiiiers is divided into two things

00:13:49,270 --> 00:13:53,770
one is a server and one is the agent

00:13:51,400 --> 00:13:56,580
that you can like something like what

00:13:53,770 --> 00:13:59,710
you can already see in the screen so

00:13:56,580 --> 00:14:02,170
basically a server is a company's

00:13:59,710 --> 00:14:05,980
management plan component plus it has

00:14:02,170 --> 00:14:08,380
sequel light and tunnel proxy agent is

00:14:05,980 --> 00:14:10,870
basically another company's data plane

00:14:08,380 --> 00:14:15,730
plus a tunnel proxy so both these tunnel

00:14:10,870 --> 00:14:18,160
proxies communicate so in order to

00:14:15,730 --> 00:14:20,950
reduce the resources required to run

00:14:18,160 --> 00:14:24,490
communities k3 is made the following

00:14:20,950 --> 00:14:28,150
changes to the native kubernetes code so

00:14:24,490 --> 00:14:30,430
this has been actually I mean if you

00:14:28,150 --> 00:14:34,440
have a look at the k3s code they have

00:14:30,430 --> 00:14:40,120
just removed earlier some older and

00:14:34,440 --> 00:14:43,870
non-essential code so k3 it doesn't

00:14:40,120 --> 00:14:47,590
include any non default alpha our data

00:14:43,870 --> 00:14:51,670
kubernetes features in addition to that

00:14:47,590 --> 00:14:54,820
it also removes all non default and mini

00:14:51,670 --> 00:14:59,620
admission controls entry cloud providers

00:14:54,820 --> 00:15:02,589
and storage plugins integrated packaging

00:14:59,620 --> 00:15:06,100
process is coming with k3s in order to

00:15:02,589 --> 00:15:09,460
save memory and also using container de

00:15:06,100 --> 00:15:15,040
to be placed docker significantly kgs

00:15:09,460 --> 00:15:17,260
reduces the runtime footprint and also

00:15:15,040 --> 00:15:20,020
this comes with sequel Lite instead of

00:15:17,260 --> 00:15:24,520
etcd as the management client data store

00:15:20,020 --> 00:15:27,880
and also this is simple I mean like the

00:15:24,520 --> 00:15:31,150
the developers of k3s has added a very

00:15:27,880 --> 00:15:31,960
simple installer so anybody can easily

00:15:31,150 --> 00:15:36,940
install k3

00:15:31,960 --> 00:15:39,910
yes easily and all components of k3 is

00:15:36,940 --> 00:15:42,280
including both server and agent Ranson

00:15:39,910 --> 00:15:45,850
deity this is not like previously

00:15:42,280 --> 00:15:48,370
demonstrated cupich so both these things

00:15:45,850 --> 00:15:49,930
can run idiot so there's no cloud side

00:15:48,370 --> 00:15:53,830
collaboration in board so you can

00:15:49,930 --> 00:15:56,290
totally decoupled cloud with the help of

00:15:53,830 --> 00:15:59,320
Gately as if you are not willing to run

00:15:56,290 --> 00:16:00,820
and if Kay trees to fall and fall into

00:15:59,320 --> 00:16:03,550
the production there should be a cluster

00:16:00,820 --> 00:16:06,450
management solution on top of k3 s that

00:16:03,550 --> 00:16:08,500
is responsible for cross cluster

00:16:06,450 --> 00:16:16,960
application management monitoring

00:16:08,500 --> 00:16:20,170
locking alarms policies security yeah so

00:16:16,960 --> 00:16:23,170
if we have a look at k3 s s capabilities

00:16:20,170 --> 00:16:24,760
it has integrated packaging process

00:16:23,170 --> 00:16:27,220
reduce footprint as we also this

00:16:24,760 --> 00:16:29,800
invention sequin light instead of edct

00:16:27,220 --> 00:16:34,630
and it it supports the it comes with a

00:16:29,800 --> 00:16:37,540
simple installer so this is how the

00:16:34,630 --> 00:16:40,000
deployment model of k3 s looks like and

00:16:37,540 --> 00:16:43,350
this runs a full kubernetes cluster ath

00:16:40,000 --> 00:16:45,460
which means that k3 s is not a

00:16:43,350 --> 00:16:47,980
decentralized approach and model and

00:16:45,460 --> 00:16:50,560
each edge requires an additional

00:16:47,980 --> 00:16:51,700
kubernetes management plan the problem

00:16:50,560 --> 00:16:54,130
with this deployment model are

00:16:51,700 --> 00:16:56,430
installing cabinets management plan at

00:16:54,130 --> 00:16:58,840
the edge will consume more resources so

00:16:56,430 --> 00:17:01,300
this deployment model is only suitable

00:16:58,840 --> 00:17:03,760
for infrastructure edge scenarios with

00:17:01,300 --> 00:17:06,580
sufficient resource not for the very

00:17:03,760 --> 00:17:08,410
same scenarios with fewer resources the

00:17:06,580 --> 00:17:11,830
network between clusters need to be

00:17:08,410 --> 00:17:14,680
connected and in order to manage each

00:17:11,830 --> 00:17:16,540
kubernetes cluster a multi cluster

00:17:14,680 --> 00:17:20,140
management component needs to be

00:17:16,540 --> 00:17:24,970
superimposed further on cloud H

00:17:20,140 --> 00:17:28,050
collaboration when it comes to Q bridge

00:17:24,970 --> 00:17:32,080
it enables offline or turn autonomy of

00:17:28,050 --> 00:17:34,270
nodes through a message bus and metadata

00:17:32,080 --> 00:17:36,640
local storage the control plane

00:17:34,270 --> 00:17:38,590
configuration in real-time status

00:17:36,640 --> 00:17:40,450
updates that users expect are

00:17:38,590 --> 00:17:41,890
synchronized to the local storage

00:17:40,450 --> 00:17:44,080
through

00:17:41,890 --> 00:17:46,660
through the message so that note will

00:17:44,080 --> 00:17:48,580
not lose management metadata even if

00:17:46,660 --> 00:17:50,530
even if it is restarted when it is

00:17:48,580 --> 00:17:53,020
offline and maintain the ability to

00:17:50,530 --> 00:17:55,750
manage the device and applications of

00:17:53,020 --> 00:18:01,480
the note but unfortunately k3s doesn't

00:17:55,750 --> 00:18:05,080
involve this capability so when it comes

00:18:01,480 --> 00:18:07,090
to IOT 8 scenarios using microsoft asia

00:18:05,080 --> 00:18:13,060
there are some other options other than

00:18:07,090 --> 00:18:17,620
k3s and cuba as well which is called as

00:18:13,060 --> 00:18:23,730
a oth virtual couplet so this is

00:18:17,620 --> 00:18:26,110
basically a part of Asian edge computing

00:18:23,730 --> 00:18:28,200
which works well with any kubernetes

00:18:26,110 --> 00:18:31,390
master which means that can be either a

00:18:28,200 --> 00:18:35,980
security service or any of the managed

00:18:31,390 --> 00:18:44,800
coburn IT services and this also can be

00:18:35,980 --> 00:18:50,050
used to run a and edge kubernetes SDH in

00:18:44,800 --> 00:18:54,010
Asia specifically so these are the three

00:18:50,050 --> 00:18:57,160
options when it comes to age when it

00:18:54,010 --> 00:18:59,950
comes to kubernetes at the edge so when

00:18:57,160 --> 00:19:03,160
it comes to the summary what we have

00:18:59,950 --> 00:19:07,840
seen is that we have extensive look at

00:19:03,160 --> 00:19:12,640
what Q batch and k3 s also we had a very

00:19:07,840 --> 00:19:15,760
brief information about Asia oth virtual

00:19:12,640 --> 00:19:17,830
couplet so we can bring capab I mean it

00:19:15,760 --> 00:19:20,370
seems like we can definitely bring

00:19:17,830 --> 00:19:23,500
kubernetes capabilities to the edge and

00:19:20,370 --> 00:19:31,360
definitely with some trade-offs on the

00:19:23,500 --> 00:19:34,810
other hand like like some of the some of

00:19:31,360 --> 00:19:37,030
the default configurations and things

00:19:34,810 --> 00:19:39,640
that are already dying kubernetes is not

00:19:37,030 --> 00:19:41,560
there for these two platforms exception

00:19:39,640 --> 00:19:44,020
both creepage and k3

00:19:41,560 --> 00:19:46,990
are very young in excellent open source

00:19:44,020 --> 00:19:49,660
projects so we believe in the future

00:19:46,990 --> 00:19:51,310
they will progress together in the

00:19:49,660 --> 00:19:53,110
process of learning from each other and

00:19:51,310 --> 00:19:54,700
better address the need of each

00:19:53,110 --> 00:19:58,210
computing users

00:19:54,700 --> 00:19:58,210

YouTube URL: https://www.youtube.com/watch?v=DPUBJntzYFA


