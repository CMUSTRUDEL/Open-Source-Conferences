Title: A quick tour of Knative - Hairizuan Noorazman
Publication date: 2020-03-28
Playlist: FOSSASIA Summit 2020 - Cloud
Description: 
	Serverless has been garnering great attention and the various cloud platforms have started to provide them as services that anyone can use in order to build services that can scale to handle large amounts of traffic but also scale back to zero if its not zero.In this workshop, we would explore the technologies that power one such service: Google Cloud Run. We would be trying to deploy a Kubernetes cluster and add istio support on to it. After which, we would then install Knative on said cluster and deploy several serverless applications onto it and see how the cluster handles such traffic.

FOSSASIA Summit 2020 - Cloud

Speaker: Hairizuan Noorazman, Software Engineer Acronis
Captions: 
	00:00:00,060 --> 00:00:04,529
I'm gonna go quickly go through this

00:00:02,129 --> 00:00:09,389
quick talk a native essentially this is

00:00:04,529 --> 00:00:12,330
kind of Suburbia workshop so the first

00:00:09,389 --> 00:00:15,120
part essentially some briefing about

00:00:12,330 --> 00:00:19,529
what can a tip is all about know that I

00:00:15,120 --> 00:00:23,460
will keep it quite short okay so this is

00:00:19,529 --> 00:00:25,560
kind of a must like when come to two

00:00:23,460 --> 00:00:28,140
talking about tentative site what can a

00:00:25,560 --> 00:00:30,420
tip is exactly about so if you take a

00:00:28,140 --> 00:00:33,030
look at the website

00:00:30,420 --> 00:00:35,280
what they say is community's tentative

00:00:33,030 --> 00:00:37,079
it's a kubernetes based platform to

00:00:35,280 --> 00:00:37,800
deploy a managed modern services

00:00:37,079 --> 00:00:39,840
platform

00:00:37,800 --> 00:00:42,719
what loads so essentially what this

00:00:39,840 --> 00:00:46,200
means is essentially you have this que

00:00:42,719 --> 00:00:47,570
native components being deployed on

00:00:46,200 --> 00:00:54,120
kubernetes

00:00:47,570 --> 00:00:58,829
is its deployed on and dependent on the

00:00:54,120 --> 00:01:01,530
kubernetes platform and if you go going

00:00:58,829 --> 00:01:03,120
further right you you find out that this

00:01:01,530 --> 00:01:05,900
can a tip is essentially trying to

00:01:03,120 --> 00:01:11,790
provide a platform on top of kubernetes

00:01:05,900 --> 00:01:15,299
so why take a why do we want to take a

00:01:11,790 --> 00:01:17,549
look at this creative so one things one

00:01:15,299 --> 00:01:19,830
thing's for sure is if you think about

00:01:17,549 --> 00:01:23,189
it right for developer trying to deploy

00:01:19,830 --> 00:01:24,540
an application on kubernetes just using

00:01:23,189 --> 00:01:27,659
communities manifest files and

00:01:24,540 --> 00:01:30,689
everything and let's say if the DevOps

00:01:27,659 --> 00:01:34,140
team don't partically helped out in that

00:01:30,689 --> 00:01:35,460
aspect so for the developer they kind of

00:01:34,140 --> 00:01:37,439
have to not only know about the

00:01:35,460 --> 00:01:40,200
application but as well as all the

00:01:37,439 --> 00:01:44,040
community from primitives and how this

00:01:40,200 --> 00:01:45,960
whole kubernetes thing operate so for a

00:01:44,040 --> 00:01:48,329
developer is kind of overwhelming at

00:01:45,960 --> 00:01:49,770
first glance and then on top of that

00:01:48,329 --> 00:01:53,310
idea to learn a whole bunch of tooling

00:01:49,770 --> 00:01:56,969
just to get something deployed like helm

00:01:53,310 --> 00:01:58,560
keeps ETL tools so this kinetic is a ter

00:01:56,969 --> 00:02:00,750
it's an attempt to create a layer of

00:01:58,560 --> 00:02:02,969
abstraction on top of this whole

00:02:00,750 --> 00:02:08,759
kubernetes in order to simplify the

00:02:02,969 --> 00:02:10,950
interface where developers use to deploy

00:02:08,759 --> 00:02:15,390
workloads on top vanities

00:02:10,950 --> 00:02:18,239
so I mean these kind of almost like a

00:02:15,390 --> 00:02:20,310
marketing slave sauce but yeah so the

00:02:18,239 --> 00:02:21,840
thing is right now there are like one or

00:02:20,310 --> 00:02:23,700
two platforms they're currently

00:02:21,840 --> 00:02:28,140
deploying connait if on on production

00:02:23,700 --> 00:02:30,420
and you can use those services so once

00:02:28,140 --> 00:02:33,630
of is one potential service you can try

00:02:30,420 --> 00:02:35,790
to use this club run-run is based on top

00:02:33,630 --> 00:02:38,250
of K native so under the hood is running

00:02:35,790 --> 00:02:42,840
to native you just don't know it and

00:02:38,250 --> 00:02:44,760
then if you take a look at what you will

00:02:42,840 --> 00:02:46,709
need to fill in if you developer

00:02:44,760 --> 00:02:51,360
developing a talk unit if all you need

00:02:46,709 --> 00:02:55,170
to do is provide service name container

00:02:51,360 --> 00:02:58,019
image URL as well as which port your

00:02:55,170 --> 00:03:00,720
applications operating on number maximum

00:02:58,019 --> 00:03:02,760
number of concurrency that in your your

00:03:00,720 --> 00:03:04,830
application can handle those kind of

00:03:02,760 --> 00:03:06,840
stuff so it's way more simplified as

00:03:04,830 --> 00:03:08,610
compared to what you traditionally need

00:03:06,840 --> 00:03:11,780
to do on communities which is great

00:03:08,610 --> 00:03:14,160
deployment object Diploma manifest file

00:03:11,780 --> 00:03:18,450
service manifest file etcetera etcetera

00:03:14,160 --> 00:03:21,060
so this is kind of a more simplified

00:03:18,450 --> 00:03:22,950
model for and this is generally more for

00:03:21,060 --> 00:03:27,900
the simple apps so if you want more

00:03:22,950 --> 00:03:33,510
complex apps right now I mean Kennedy

00:03:27,900 --> 00:03:35,090
doesn't exactly support it yeah so there

00:03:33,510 --> 00:03:38,070
are two components for K native so

00:03:35,090 --> 00:03:40,230
though one of them is serving and the

00:03:38,070 --> 00:03:43,950
rnc venting so something is essentially

00:03:40,230 --> 00:03:47,160
trying to handle workloads they are

00:03:43,950 --> 00:03:50,609
meant for HTTP base them meant to handle

00:03:47,160 --> 00:03:53,489
HTTP requests and for implanting is

00:03:50,609 --> 00:03:57,690
essentially trying to manage event base

00:03:53,489 --> 00:03:59,299
what loads so for this time because this

00:03:57,690 --> 00:04:02,880
is kind of one and half hours so

00:03:59,299 --> 00:04:05,280
inventing is way beyond event inventing

00:04:02,880 --> 00:04:06,930
it's like a pretty broad topic so for

00:04:05,280 --> 00:04:10,530
this time we'll be just focusing on

00:04:06,930 --> 00:04:13,170
serving so what's needed to run Kennedy

00:04:10,530 --> 00:04:15,840
so as mentioned in the second slide

00:04:13,170 --> 00:04:18,000
earlier Kennedy kind of runs on

00:04:15,840 --> 00:04:20,700
kubernetes but in order to get finally

00:04:18,000 --> 00:04:22,250
the port a native tentative is actually

00:04:20,700 --> 00:04:27,740
dependent on

00:04:22,250 --> 00:04:30,110
some sort of service mesh kind of

00:04:27,740 --> 00:04:35,020
constructs so examples of that is a

00:04:30,110 --> 00:04:40,400
steel glue ambassador career so this

00:04:35,020 --> 00:04:42,680
list of components like continue to grow

00:04:40,400 --> 00:04:44,510
every day so each new release

00:04:42,680 --> 00:04:47,990
alternative like a new component could

00:04:44,510 --> 00:04:51,050
be added here so these are all so you

00:04:47,990 --> 00:04:53,660
can install like kubernetes they're on

00:04:51,050 --> 00:04:56,360
top of amenities you get it still in and

00:04:53,660 --> 00:05:02,900
then after that then you can run Kennedy

00:04:56,360 --> 00:05:06,050
front of them so so to get started so we

00:05:02,900 --> 00:05:07,580
want to get our hands a bit wet to find

00:05:06,050 --> 00:05:10,460
out what these Kennedy think is all

00:05:07,580 --> 00:05:14,180
about so first things first is we want

00:05:10,460 --> 00:05:19,790
to get quick laps account so these quick

00:05:14,180 --> 00:05:21,890
leprechaun provides a free one one

00:05:19,790 --> 00:05:25,790
access to Google cloud so that you can

00:05:21,890 --> 00:05:27,560
try things out and then from there we

00:05:25,790 --> 00:05:29,870
were because this is for a fourth day

00:05:27,560 --> 00:05:32,900
here right so we want to do the whole

00:05:29,870 --> 00:05:34,580
thing from scratch so we all try to spin

00:05:32,900 --> 00:05:37,910
up our whole when it is cluster without

00:05:34,580 --> 00:05:39,680
relying on a GK or anything then install

00:05:37,910 --> 00:05:42,080
a steel install Kennedy went out then

00:05:39,680 --> 00:05:48,290
and then finally we can experiment with

00:05:42,080 --> 00:05:52,220
creative serving so to get the one-man

00:05:48,290 --> 00:05:54,730
access to quick laps so I just need to

00:05:52,220 --> 00:05:54,730
follow these steps

00:06:11,200 --> 00:06:14,800
ok in

00:06:12,910 --> 00:06:17,350
case then I'll just go straight to a

00:06:14,800 --> 00:06:19,930
demo I mean I would take you through the

00:06:17,350 --> 00:06:22,600
whole experience without waiting for

00:06:19,930 --> 00:06:26,710
this getting one man access and

00:06:22,600 --> 00:06:28,360
everything so yeah the the process you

00:06:26,710 --> 00:06:32,350
get is a bit more complex and a bit

00:06:28,360 --> 00:06:33,730
wonky this time so yeah so at the end of

00:06:32,350 --> 00:06:35,110
the day if you go through the quick laps

00:06:33,730 --> 00:06:37,390
you'll get the one advantage

00:06:35,110 --> 00:06:41,320
subscription you see it a slide that

00:06:37,390 --> 00:06:42,910
will mean that you have your one-man x1

00:06:41,320 --> 00:06:44,560
man free access to quick laps so that

00:06:42,910 --> 00:06:48,720
allows you to go through the laps and

00:06:44,560 --> 00:06:55,570
give you some time to play around if

00:06:48,720 --> 00:07:01,110
Google cloud platform so so let's begin

00:06:55,570 --> 00:07:01,110
I'm gonna go and show the demo for this

00:07:02,640 --> 00:07:19,090
first things first is to have a Google

00:07:07,750 --> 00:07:21,190
Cloud console so what we'll be doing is

00:07:19,090 --> 00:07:24,340
creating VMs on top of this and then

00:07:21,190 --> 00:07:28,300
after that creating our cluster

00:07:24,340 --> 00:07:30,490
installing steel and then installing it

00:07:28,300 --> 00:07:35,410
in a different order so let's start

00:07:30,490 --> 00:07:41,710
we've going to the link here from the

00:07:35,410 --> 00:07:43,390
slider from the slides so for the first

00:07:41,710 --> 00:07:45,100
step which is the deploying the kinetics

00:07:43,390 --> 00:07:46,750
after the first things that we need to

00:07:45,100 --> 00:07:50,650
do on Google cloud would be to create

00:07:46,750 --> 00:07:52,120
our firewall rules so the three things

00:07:50,650 --> 00:07:53,950
that we need to say there are two

00:07:52,120 --> 00:07:56,830
firewall rules that we can say we need

00:07:53,950 --> 00:08:00,610
to set up then then after that we can

00:07:56,830 --> 00:08:02,260
then create our VMs so for the first

00:08:00,610 --> 00:08:04,960
firewall rule that we need to set up

00:08:02,260 --> 00:08:06,490
would be the note pot which is

00:08:04,960 --> 00:08:08,950
essentially refers to the community snow

00:08:06,490 --> 00:08:11,230
point so come in and when it is no

00:08:08,950 --> 00:08:14,650
process essentially one of the ways you

00:08:11,230 --> 00:08:18,910
can access the services from the outside

00:08:14,650 --> 00:08:21,780
world so let me create the firewall rule

00:08:18,910 --> 00:08:21,780
for no ports vez

00:08:42,079 --> 00:08:47,790
so over here is where you will specify

00:08:45,810 --> 00:08:49,860
like no pots so essentially any VM that

00:08:47,790 --> 00:08:52,740
is stacked with these no pots will

00:08:49,860 --> 00:08:56,069
essentially have this firewall rule

00:08:52,740 --> 00:08:59,339
activated for it then the next part we

00:08:56,069 --> 00:09:02,009
will do is to set source IP range to

00:08:59,339 --> 00:09:04,769
zero zero two zero two zero zero which

00:09:02,009 --> 00:09:07,410
refers to allowing the whole world to

00:09:04,769 --> 00:09:10,470
access it but this essentially it is not

00:09:07,410 --> 00:09:14,430
meant to be a production ready cluster

00:09:10,470 --> 00:09:16,579
and so I think this is fine for now so

00:09:14,430 --> 00:09:24,269
the next part would be to copy our

00:09:16,579 --> 00:09:32,480
ranges port range copy here and then

00:09:24,269 --> 00:09:32,480
then we create our first firewall rule

00:09:36,290 --> 00:09:42,600
then the next part the next firewall

00:09:40,319 --> 00:09:43,980
rule that we need to add is 6 4 4 3 so

00:09:42,600 --> 00:09:46,470
let's say if you want to access these

00:09:43,980 --> 00:09:48,240
communities cluster from outside then we

00:09:46,470 --> 00:09:54,259
will need to add this firewall rule to

00:09:48,240 --> 00:09:54,259
access this pot so hold on

00:10:08,390 --> 00:10:17,430
we do keep API as the network target and

00:10:14,250 --> 00:10:20,670
then fiber range we set it to 0 dot 0

00:10:17,430 --> 00:10:23,240
dot 0 0 slash 0 which refers to the

00:10:20,670 --> 00:10:27,810
whole wall and then last part is to

00:10:23,240 --> 00:10:31,320
which pot so this that will be it for

00:10:27,810 --> 00:10:35,310
this so with that the two firewall rules

00:10:31,320 --> 00:10:39,170
are created then the next step is to

00:10:35,310 --> 00:10:42,090
create the VM with the firewalls

00:10:39,170 --> 00:10:44,340
firewall rules configured and as well as

00:10:42,090 --> 00:10:45,120
set it such that it has access to all

00:10:44,340 --> 00:10:47,370
Google APs

00:10:45,120 --> 00:10:49,410
so the access to all Google API is a

00:10:47,370 --> 00:10:53,850
particularly important part because

00:10:49,410 --> 00:10:56,040
essentially when we are trying to create

00:10:53,850 --> 00:10:59,880
our cluster we want our cluster to

00:10:56,040 --> 00:11:04,890
actually access the network capabilities

00:10:59,880 --> 00:11:08,130
of this platform and in its the API

00:11:04,890 --> 00:11:09,750
access to create that and like things

00:11:08,130 --> 00:11:18,080
like load balancer that those kind of

00:11:09,750 --> 00:11:22,530
stuff so this that's the name of this

00:11:18,080 --> 00:11:25,920
instance to be test instance one in our

00:11:22,530 --> 00:11:28,680
case let's set this to four core 15

00:11:25,920 --> 00:11:36,990
gigabyte memory for this instance allow

00:11:28,680 --> 00:11:43,490
full access and then for networking put

00:11:36,990 --> 00:11:43,490
cube API as well as not pots

00:11:46,540 --> 00:11:58,540
okay they've that you can create this so

00:11:57,190 --> 00:12:02,130
I just want to check that the firewall

00:11:58,540 --> 00:12:02,130
rule is really called no ports

00:12:05,370 --> 00:12:09,480
okay try not once

00:12:10,690 --> 00:12:17,730
then we need to repeat this two more

00:12:13,480 --> 00:12:17,730
times to create three instances

00:12:45,890 --> 00:12:48,450
usually for

00:12:47,130 --> 00:12:50,760
these kind of things like people you

00:12:48,450 --> 00:12:54,660
generally just use ansible or terraform

00:12:50,760 --> 00:12:57,540
to do this but doing it manually this

00:12:54,660 --> 00:13:00,450
way you kind of get to know and feel

00:12:57,540 --> 00:13:02,490
like what exactly is happening there for

00:13:00,450 --> 00:13:05,750
me if I just run the tell from script

00:13:02,490 --> 00:13:08,250
from here just magic just happens and

00:13:05,750 --> 00:13:11,450
instances are created without anybody

00:13:08,250 --> 00:13:11,450
understanding what just happened

00:13:33,860 --> 00:13:38,480
okay that's a third one so one more

00:13:36,950 --> 00:13:42,050
double check for each of the instances

00:13:38,480 --> 00:13:45,829
to make sure that they have the full

00:13:42,050 --> 00:13:47,959
full access to all cloud api's so this

00:13:45,829 --> 00:13:49,279
is generally not recommended but since

00:13:47,959 --> 00:13:53,810
this is not meant to be a production

00:13:49,279 --> 00:13:55,760
ready cluster anyway like even even if

00:13:53,810 --> 00:13:57,470
you want to do it this way like the

00:13:55,760 --> 00:14:01,399
better way is actually to just create

00:13:57,470 --> 00:14:07,040
gke but yeah this bit there's not in the

00:14:01,399 --> 00:14:09,410
scope of for this demo so for testing

00:14:07,040 --> 00:14:15,769
this one is okay tents assistance to is

00:14:09,410 --> 00:14:18,350
okay then test instance three okay so we

00:14:15,769 --> 00:14:23,240
have our three VMS and all of them

00:14:18,350 --> 00:14:28,700
already so the next step is to install

00:14:23,240 --> 00:14:35,600
docker so what we want to do is to

00:14:28,700 --> 00:14:38,680
associate it to each of the instances so

00:14:35,600 --> 00:14:41,839
conveniently Google Cloud has a

00:14:38,680 --> 00:14:43,760
capability to allow you to SSH via the

00:14:41,839 --> 00:14:56,149
browser so we just need to wait for you

00:14:43,760 --> 00:14:59,630
to transfer our keys over okay

00:14:56,149 --> 00:15:04,310
so the next step will be to install

00:14:59,630 --> 00:15:08,149
docker and we have instance tool that is

00:15:04,310 --> 00:15:16,510
also ready and then instance three also

00:15:08,149 --> 00:15:29,200
ready okay first we'll do update

00:15:16,510 --> 00:15:33,850
I can't exactly copy this whole chunk

00:15:29,200 --> 00:15:35,530
because apparently after try after

00:15:33,850 --> 00:15:38,860
running through the command right you

00:15:35,530 --> 00:15:44,230
only run the update for some odd reason

00:15:38,860 --> 00:15:47,110
so doing one by one for some of them so

00:15:44,230 --> 00:15:49,600
the next step will be to install a whole

00:15:47,110 --> 00:16:00,250
bunch of packages then we need to run it

00:15:49,600 --> 00:16:04,650
for all of them then the next step is to

00:16:00,250 --> 00:16:04,650
add our docker repo

00:16:17,720 --> 00:16:33,860
update in order to make it ready for

00:16:21,230 --> 00:16:36,129
installation okay with that then go on

00:16:33,860 --> 00:16:38,720
to the final step for installing the

00:16:36,129 --> 00:16:40,790
container and time which is to actually

00:16:38,720 --> 00:16:52,670
install docker so this one will take a

00:16:40,790 --> 00:16:55,029
while yep so with that we are installing

00:16:52,670 --> 00:16:57,350
docker so insanity at this stage you can

00:16:55,029 --> 00:17:01,189
alternatively install other container

00:16:57,350 --> 00:17:02,810
runtimes like CRI or rocket or something

00:17:01,189 --> 00:17:05,140
not sure what the rocket still exists

00:17:02,810 --> 00:17:07,640
but yeah

00:17:05,140 --> 00:17:11,809
so for the next step after con

00:17:07,640 --> 00:17:14,809
installing container runtimes then we

00:17:11,809 --> 00:17:17,390
want to install kubernetes and in this

00:17:14,809 --> 00:17:19,699
case there are several options that we

00:17:17,390 --> 00:17:22,909
can use to install to minetti's in this

00:17:19,699 --> 00:17:27,169
case the example the demo here will be

00:17:22,909 --> 00:17:29,570
taking you to cube EDM state so for

00:17:27,169 --> 00:17:32,470
queue at the end this is a whole chunk

00:17:29,570 --> 00:17:35,900
of code that we can use to install it

00:17:32,470 --> 00:17:37,280
let's see what is ready okay so instance

00:17:35,900 --> 00:17:42,400
one is ready - ready

00:17:37,280 --> 00:17:46,159
tree ready then proceed on to install

00:17:42,400 --> 00:17:50,330
communities so for the for this step

00:17:46,159 --> 00:17:52,490
this step we can actually skip it

00:17:50,330 --> 00:17:55,730
because it's actually done in the

00:17:52,490 --> 00:17:58,429
previous doctor step and this whole

00:17:55,730 --> 00:18:01,100
bunch can be skipped because for our

00:17:58,429 --> 00:18:03,640
instance here is actually tv9 so we can

00:18:01,100 --> 00:18:09,289
skip this but if you are in debian 10

00:18:03,640 --> 00:18:12,650
there are some some parts that are kind

00:18:09,289 --> 00:18:14,659
of depreciated so this is kind of a way

00:18:12,650 --> 00:18:18,590
to patch up to make sure that the whole

00:18:14,659 --> 00:18:22,659
thing still works with kubernetes so for

00:18:18,590 --> 00:18:22,659
this step we'll just proceed on to

00:18:23,530 --> 00:18:36,750
get our app packages in turn off that

00:18:34,000 --> 00:18:36,750
running update

00:18:41,300 --> 00:18:47,220
then the next step after that would be

00:18:43,920 --> 00:18:52,380
to actually install cubelet keep EDM and

00:18:47,220 --> 00:18:54,570
keep CTL so the qibla is the actual like

00:18:52,380 --> 00:18:58,740
process that actually runs communities

00:18:54,570 --> 00:19:01,350
keep EDM is your tooling to help

00:18:58,740 --> 00:19:03,960
administrate a kubernetes cluster and

00:19:01,350 --> 00:19:06,210
keeps ETL in cue EDM is the one that

00:19:03,960 --> 00:19:07,590
helped administrate the communities

00:19:06,210 --> 00:19:14,520
faster and keep still the one that you

00:19:07,590 --> 00:19:19,860
used to talk to the cluster so that our

00:19:14,520 --> 00:19:25,260
keep EDM cubelet and what's the other

00:19:19,860 --> 00:19:28,230
one keep EDM cubelet and chips ETL yeah

00:19:25,260 --> 00:19:34,580
all install and if you try to check on

00:19:28,230 --> 00:19:38,540
our cubelet you will see that it kind of

00:19:34,580 --> 00:19:40,650
is in a state where it's failing

00:19:38,540 --> 00:19:43,410
continuously all the time so essentially

00:19:40,650 --> 00:19:49,340
right now it's in a crash crash bag look

00:19:43,410 --> 00:19:51,300
so we can so if you if we check that

00:19:49,340 --> 00:19:53,690
just to make sure this is stopped

00:19:51,300 --> 00:19:53,690
properly

00:19:59,860 --> 00:20:04,880
so in this case you see that feeling

00:20:02,540 --> 00:20:06,470
it's not that a cabinet is not working

00:20:04,880 --> 00:20:09,200
or anything it's just that the whole

00:20:06,470 --> 00:20:10,340
thing is not configured properly yet so

00:20:09,200 --> 00:20:12,380
there are a whole bunch of things that

00:20:10,340 --> 00:20:14,620
you know we need to still do in order to

00:20:12,380 --> 00:20:17,930
get it whole thing set up properly so

00:20:14,620 --> 00:20:20,470
the next step is to actually freeze

00:20:17,930 --> 00:20:32,360
divisions on of it on the machine so

00:20:20,470 --> 00:20:35,900
let's run that and then the next step is

00:20:32,360 --> 00:20:38,750
to set some sort of configuration to in

00:20:35,900 --> 00:20:45,380
order for it to work properly with the

00:20:38,750 --> 00:20:47,410
network plugins so this whole bunch of

00:20:45,380 --> 00:20:51,080
instructions are actually available on

00:20:47,410 --> 00:20:53,060
on the QPD end page so if you want

00:20:51,080 --> 00:20:54,980
further details on that you can it's

00:20:53,060 --> 00:20:59,090
best to go there so they're actually

00:20:54,980 --> 00:21:01,850
like described in full detail what the

00:20:59,090 --> 00:21:07,850
actual steps they do why they're doing

00:21:01,850 --> 00:21:09,410
it so for this for this is needed for

00:21:07,850 --> 00:21:13,030
one of the network plugins that we are

00:21:09,410 --> 00:21:13,030
going to use today which is we've met

00:21:15,220 --> 00:21:23,030
okay so with that we finished running a

00:21:21,860 --> 00:21:24,590
whole bunch of commands to install

00:21:23,030 --> 00:21:26,660
communities the next step is actually to

00:21:24,590 --> 00:21:28,490
set up all our configuration in order to

00:21:26,660 --> 00:21:32,060
get the community is running

00:21:28,490 --> 00:21:35,170
specifically for GC so this first thing

00:21:32,060 --> 00:21:40,820
is to actually set our configuration to

00:21:35,170 --> 00:21:42,380
4 which is needed in order to run the

00:21:40,820 --> 00:21:48,650
configuration that's needed in order to

00:21:42,380 --> 00:21:51,340
use it for on GC environment so we need

00:21:48,650 --> 00:21:51,340
to edit fall in

00:22:18,190 --> 00:22:25,330
so the only thing that we need to fill

00:22:22,100 --> 00:22:28,670
up here would be the project ID which is

00:22:25,330 --> 00:22:38,780
in this case is healthy rather rarity

00:22:28,670 --> 00:22:43,990
rarity you can actually get it from the

00:22:38,780 --> 00:22:47,960
URL here so with that that is for

00:22:43,990 --> 00:22:51,740
configuring the properties for GC

00:22:47,960 --> 00:22:54,790
environment so we need to copy this over

00:22:51,740 --> 00:22:54,790
to the other two machines

00:23:30,919 --> 00:23:38,609
okay so with that the configurations are

00:23:34,769 --> 00:23:43,619
done then the next bit is the cue EDM

00:23:38,609 --> 00:23:46,529
configurations so these configurations

00:23:43,619 --> 00:23:49,409
specifically meant to run communities on

00:23:46,529 --> 00:23:51,479
a GC environment if you go out in the in

00:23:49,409 --> 00:23:54,539
the world there are actually other keep

00:23:51,479 --> 00:23:57,269
EDM configurations meant to run on other

00:23:54,539 --> 00:23:59,789
cloud providers so I think there is a

00:23:57,269 --> 00:24:05,070
blog post that mention about how you can

00:23:59,789 --> 00:24:08,700
run kubernetes on digital ocean creating

00:24:05,070 --> 00:24:11,789
digital ocean VMS and then like hooking

00:24:08,700 --> 00:24:15,149
up such that you run a digital ocean

00:24:11,789 --> 00:24:19,349
load balancer know so for this case this

00:24:15,149 --> 00:24:26,190
is a EDM configuration to run a

00:24:19,349 --> 00:24:27,509
kubernetes cluster on GC environment the

00:24:26,190 --> 00:24:31,099
reason why we need this whole bunch of

00:24:27,509 --> 00:24:35,909
configuration so that you can access

00:24:31,099 --> 00:24:38,210
Google cloud platform load balancer and

00:24:35,909 --> 00:24:38,210
all

00:24:56,520 --> 00:25:04,780
so the only thing that we need to fill

00:25:00,370 --> 00:25:09,400
up for this configuration is the sub

00:25:04,780 --> 00:25:14,130
sense so we need to add our IP addresses

00:25:09,400 --> 00:25:16,630
for our machine for the s-mint VR master

00:25:14,130 --> 00:25:20,230
so this in this case it will be our

00:25:16,630 --> 00:25:23,320
instance ones private and i--i public IP

00:25:20,230 --> 00:25:28,540
addresses so we just need to copy this

00:25:23,320 --> 00:25:39,870
and copy it here and then the next bit

00:25:28,540 --> 00:25:46,350
is copy our public address copied here

00:25:39,870 --> 00:25:48,390
then we then the EDM configuration ready

00:25:46,350 --> 00:25:50,110
so there's a whole bunch of them

00:25:48,390 --> 00:25:54,790
essentially all of them are all

00:25:50,110 --> 00:25:57,730
referring to our cloud configuration the

00:25:54,790 --> 00:25:59,320
file that we edit earlier and then the

00:25:57,730 --> 00:26:02,140
one thing that's kind of important is

00:25:59,320 --> 00:26:04,000
the I want extra arguments which is the

00:26:02,140 --> 00:26:07,200
cloud provider and the club provider in

00:26:04,000 --> 00:26:10,240
this case is GC so this kind of refers

00:26:07,200 --> 00:26:14,560
so that within communities could be the

00:26:10,240 --> 00:26:18,940
existing about about a whole bunch of

00:26:14,560 --> 00:26:22,150
controllers that's meant to how do we

00:26:18,940 --> 00:26:24,850
say there is meant to contact Google

00:26:22,150 --> 00:26:27,310
your cloud providers API is to create

00:26:24,850 --> 00:26:29,650
your resources so in this case let's say

00:26:27,310 --> 00:26:31,120
if we put this in right and then if we

00:26:29,650 --> 00:26:33,130
create a network resource side load

00:26:31,120 --> 00:26:35,320
balancer it will contact Google clock

00:26:33,130 --> 00:26:37,930
that forms API to create that load

00:26:35,320 --> 00:26:40,450
balancer on our behalf so if you don't

00:26:37,930 --> 00:26:42,460
do this essentially you certain certain

00:26:40,450 --> 00:26:45,190
resources will be restricted from us so

00:26:42,460 --> 00:26:47,350
the early example that I mentioned load

00:26:45,190 --> 00:26:48,850
balancer if we don't at this

00:26:47,350 --> 00:26:54,070
configuration the load balancer will

00:26:48,850 --> 00:26:56,050
always be stuck at pending so yep later

00:26:54,070 --> 00:27:00,150
I'll show you some logs on how that

00:26:56,050 --> 00:27:02,680
happens so we did

00:27:00,150 --> 00:27:05,670
that is for the master node then we need

00:27:02,680 --> 00:27:26,530
to configure our join cube EDM

00:27:05,670 --> 00:27:29,410
configuration so the joint configuration

00:27:26,530 --> 00:27:31,690
is way shorter so all you need to do is

00:27:29,410 --> 00:27:47,200
just to tell it where to connect to and

00:27:31,690 --> 00:27:50,920
whether master node is got here here and

00:27:47,200 --> 00:27:55,050
this in this case will be contacting our

00:27:50,920 --> 00:27:57,370
our master nodes internal IP addresses

00:27:55,050 --> 00:28:01,830
so that you don't have to go through the

00:27:57,370 --> 00:28:06,550
internet just to access it okay that

00:28:01,830 --> 00:28:10,200
that's done let's all join a Damini

00:28:06,550 --> 00:28:10,200
copied over to the top machine

00:28:44,960 --> 00:28:50,910
okay with that all the configuration is

00:28:48,450 --> 00:28:52,590
done the key PDM configuration so the

00:28:50,910 --> 00:28:55,860
next part is the next part is actually

00:28:52,590 --> 00:28:58,440
to actually start the communities

00:28:55,860 --> 00:29:00,330
cluster so the command that we are to

00:28:58,440 --> 00:29:04,049
run on the master node will be this

00:29:00,330 --> 00:29:06,780
command which is to initialize it and

00:29:04,049 --> 00:29:10,740
use the earlier configuration that we

00:29:06,780 --> 00:29:14,820
think rating so that then it does a

00:29:10,740 --> 00:29:18,990
whole bunch of valid validation warnings

00:29:14,820 --> 00:29:24,900
we can generally skip so we just need to

00:29:18,990 --> 00:29:27,470
wait for this to set up so you see that

00:29:24,900 --> 00:29:30,540
it does a whole bunch of stuff as well

00:29:27,470 --> 00:29:33,030
so in the meantime while this is running

00:29:30,540 --> 00:29:38,570
we can copy the next command for the

00:29:33,030 --> 00:29:38,570
other two machines so let me check

00:30:01,580 --> 00:30:31,039
this done still waiting oh I didn't copy

00:30:12,090 --> 00:30:31,039
properly hey hold on

00:30:45,900 --> 00:30:56,669
yeah sorry technical error let me take a

00:30:51,520 --> 00:30:56,669
while to to debug this

00:31:18,170 --> 00:31:22,460
so with that we are we trying again

00:31:22,760 --> 00:31:25,859
[Music]

00:31:31,490 --> 00:31:35,090
let's wait for this

00:31:57,539 --> 00:32:02,570
/ and get it ready

00:32:05,640 --> 00:32:45,280
okay so I'm having this error again look

00:32:10,630 --> 00:32:49,090
the whole self see okay so in this case

00:32:45,280 --> 00:32:50,950
seems like I am having like issues we're

00:32:49,090 --> 00:32:55,780
trying to set up the communities cluster

00:32:50,950 --> 00:33:06,550
from scratch so no exactly sure whether

00:32:55,780 --> 00:33:09,610
I copied something wrongly okay but in

00:33:06,550 --> 00:33:12,400
this case I'm gonna skip on the step on

00:33:09,610 --> 00:33:14,590
creating the communities cluster from

00:33:12,400 --> 00:33:18,250
scratch because like it seems I have an

00:33:14,590 --> 00:33:21,400
issue with I have issue with these

00:33:18,250 --> 00:33:25,060
scripts so in this case I'm gonna just

00:33:21,400 --> 00:33:27,700
keep over the kubernetes and still

00:33:25,060 --> 00:33:31,270
installation from scratch and instead

00:33:27,700 --> 00:33:36,430
I'm going to go directly to creative

00:33:31,270 --> 00:33:38,200
instead so in the meantime I mean I will

00:33:36,430 --> 00:33:45,310
probably review the scripts again and

00:33:38,200 --> 00:33:46,990
then I will update their block so state

00:33:45,310 --> 00:33:49,480
we're just gonna try to do this instead

00:33:46,990 --> 00:33:52,470
so we can go straight to the kinetic fun

00:33:49,480 --> 00:33:52,470
and focus on that

00:33:55,690 --> 00:34:02,270
so in our case in order to get our

00:34:00,559 --> 00:34:06,500
kidney tip up we need to install a skill

00:34:02,270 --> 00:34:13,520
so we just go test cluster one static

00:34:06,500 --> 00:34:24,760
position 1.15 then we need to set our

00:34:13,520 --> 00:34:28,429
our notes to have a bigger CPU and then

00:34:24,760 --> 00:34:34,899
for the next part we need to do is to

00:34:28,429 --> 00:34:39,520
find is steel and it will still

00:34:34,899 --> 00:34:39,520
permissive then that's fine

00:34:57,460 --> 00:35:08,290
yeah we're closing the ssh windows here

00:35:03,040 --> 00:35:15,099
goes the demo fail for this so I'm going

00:35:08,290 --> 00:35:17,230
to jump straight to the Kennedy bin so

00:35:15,099 --> 00:35:24,819
just need to wait for the clusters to

00:35:17,230 --> 00:35:26,349
set up so um while waiting for the

00:35:24,819 --> 00:35:28,809
classes set up so I essentially I will

00:35:26,349 --> 00:35:30,760
go through the rest of the steps I am

00:35:28,809 --> 00:35:35,020
like I apologize for not being able to

00:35:30,760 --> 00:35:38,260
to show this I'll probably go back and

00:35:35,020 --> 00:35:40,180
debug on what's the issue and why the

00:35:38,260 --> 00:35:43,770
local host for that particular button is

00:35:40,180 --> 00:35:46,300
not accessible so the next steps after

00:35:43,770 --> 00:35:49,690
doing that whole cube idiom would be

00:35:46,300 --> 00:35:52,270
actually to to run the command to

00:35:49,690 --> 00:35:54,579
install the network plugin and then with

00:35:52,270 --> 00:35:56,170
that you can actually we will need to

00:35:54,579 --> 00:35:58,540
run a whole bunch of commands in order

00:35:56,170 --> 00:36:01,599
to debug and make sure that the cluster

00:35:58,540 --> 00:36:04,329
is working as expected such as if you

00:36:01,599 --> 00:36:06,130
try to run an engines container it needs

00:36:04,329 --> 00:36:08,470
to be able to run at least app update

00:36:06,130 --> 00:36:10,180
because if it can't that means that the

00:36:08,470 --> 00:36:13,319
addressed DNS issues and maybe the

00:36:10,180 --> 00:36:17,079
network plugins not meant to run on that

00:36:13,319 --> 00:36:18,309
clock platform and then another thing

00:36:17,079 --> 00:36:22,180
that we need to check and make sure that

00:36:18,309 --> 00:36:23,559
it works is the load balancer so if all

00:36:22,180 --> 00:36:25,690
the configuration above it's done

00:36:23,559 --> 00:36:28,089
properly it should create an external

00:36:25,690 --> 00:36:33,849
load balancer that we can contact from

00:36:28,089 --> 00:36:35,380
the from even up from our laptop and

00:36:33,849 --> 00:36:38,109
then the one of the other steps is to

00:36:35,380 --> 00:36:43,049
actually configure to make sure the

00:36:38,109 --> 00:36:46,630
g-cloud that we can the VMS is able to

00:36:43,049 --> 00:36:48,849
pull images from our own project stocker

00:36:46,630 --> 00:36:51,730
registry so this in the case that we

00:36:48,849 --> 00:36:56,380
want to create we want to run services

00:36:51,730 --> 00:36:59,200
from our private dock or registry so we

00:36:56,380 --> 00:37:02,079
can skip all these steps can skip its

00:36:59,200 --> 00:37:05,859
tio as well it still is essentially just

00:37:02,079 --> 00:37:07,839
installing our service mesh that key

00:37:05,859 --> 00:37:08,650
native is dependent on by because we are

00:37:07,839 --> 00:37:13,750
not

00:37:08,650 --> 00:37:15,369
and not we don't have quantities that we

00:37:13,750 --> 00:37:18,789
created from scratch so we can skip the

00:37:15,369 --> 00:37:20,950
steps essentially these commands cannot

00:37:18,789 --> 00:37:26,049
be run if you run if you create a

00:37:20,950 --> 00:37:28,420
communities cluster using GK because if

00:37:26,049 --> 00:37:31,809
you try to if you try to do it you will

00:37:28,420 --> 00:37:37,630
complain that it's unable to access

00:37:31,809 --> 00:37:40,000
certain roles that the car the class

00:37:37,630 --> 00:37:42,670
that the that is needed to apply the

00:37:40,000 --> 00:37:45,130
home channel so you skip all this step

00:37:42,670 --> 00:37:48,369
because we'll be getting a coitus

00:37:45,130 --> 00:37:51,039
cluster with helm installed so with this

00:37:48,369 --> 00:37:55,869
we have a cluster which is still

00:37:51,039 --> 00:37:58,240
installed you can connect to it and

00:37:55,869 --> 00:38:00,900
we'll just proceed on to Kennedy the

00:37:58,240 --> 00:38:00,900
Kennedy bit

00:38:13,720 --> 00:38:20,240
all right so this is big enough so the

00:38:18,710 --> 00:38:23,080
first thing to do is to check what's

00:38:20,240 --> 00:38:23,080
inside the cluster

00:38:33,240 --> 00:38:46,360
no it's not connected to the cluster yet

00:38:36,610 --> 00:38:48,040
so we need to run this command first so

00:38:46,360 --> 00:38:52,390
these commands essentially copies over

00:38:48,040 --> 00:38:55,660
the the configuration for keep CTR to

00:38:52,390 --> 00:38:58,590
connect to the cluster so we did we can

00:38:55,660 --> 00:38:58,590
finally run this command

00:39:07,510 --> 00:39:12,020
so you should list a whole bunch of

00:39:09,830 --> 00:39:17,210
parts which includes all our steel

00:39:12,020 --> 00:39:19,190
components so if you run the the steps

00:39:17,210 --> 00:39:22,390
on the block up to the in steel it

00:39:19,190 --> 00:39:25,760
should come up with something like this

00:39:22,390 --> 00:39:29,420
assuming all the security bits so you

00:39:25,760 --> 00:39:31,760
will see that every most of the stuff

00:39:29,420 --> 00:39:32,420
that we need is running so it's they'll

00:39:31,760 --> 00:39:38,290
be okay

00:39:32,420 --> 00:39:38,290
so the next bit is to install creative

00:39:41,050 --> 00:39:45,430
so we'll just need to copy this command

00:39:43,220 --> 00:39:51,260
so the first step it does is it's

00:39:45,430 --> 00:39:58,700
installing the the custom resource

00:39:51,260 --> 00:40:03,350
definitions on the cluster so in this

00:39:58,700 --> 00:40:09,470
case we'll be installing the CR DS for

00:40:03,350 --> 00:40:13,100
serving as well as monitoring so that's

00:40:09,470 --> 00:40:15,050
done if you try to check the cluster

00:40:13,100 --> 00:40:15,410
right now you look as though nothing

00:40:15,050 --> 00:40:17,480
happened

00:40:15,410 --> 00:40:20,210
because like essentially all it does is

00:40:17,480 --> 00:40:23,720
installing CRT so essentially it creates

00:40:20,210 --> 00:40:27,530
new types of resources on the cluster so

00:40:23,720 --> 00:40:31,790
I previously if you try to type get

00:40:27,530 --> 00:40:37,220
revisions or something it won't exist

00:40:31,790 --> 00:40:40,490
but then if we try try this keeps ETL

00:40:37,220 --> 00:40:42,740
revisions now you say no resources found

00:40:40,490 --> 00:40:46,970
so it's a new type of resources actually

00:40:42,740 --> 00:40:51,440
available on the cluster now then the

00:40:46,970 --> 00:40:56,260
next bit is the actual running of the

00:40:51,440 --> 00:40:56,260
cluster of the Trinity bits components

00:40:56,620 --> 00:41:01,690
so go back shell just apply this

00:41:04,359 --> 00:41:16,779
and now you'll see like a whole bunch of

00:41:06,730 --> 00:41:20,079
components being applied right now you

00:41:16,779 --> 00:41:22,930
so you'll see like how there are various

00:41:20,079 --> 00:41:32,470
components on 4k native so you can see

00:41:22,930 --> 00:41:34,269
like the list just goes on and on so the

00:41:32,470 --> 00:41:36,249
next next bit is actually to make sure

00:41:34,269 --> 00:41:37,299
that everything we will want to ship

00:41:36,249 --> 00:41:41,289
make sure that everything is working

00:41:37,299 --> 00:41:43,619
before we proceed on with our kinetic

00:41:41,289 --> 00:41:43,619
experiments

00:42:08,540 --> 00:42:14,520
okay so with that we can run the command

00:42:12,600 --> 00:42:28,770
to to make sure that everything is

00:42:14,520 --> 00:42:30,720
working fine so we just want to make

00:42:28,770 --> 00:42:34,380
sure that everything is in the running

00:42:30,720 --> 00:42:36,510
State at least everything that's in the

00:42:34,380 --> 00:42:42,210
Kennett observing namespace is in the

00:42:36,510 --> 00:42:45,300
running State so that's done let's run

00:42:42,210 --> 00:42:47,820
again to make sure so it's taking a

00:42:45,300 --> 00:42:50,180
while for the Prometheus spots as well

00:42:47,820 --> 00:42:54,230
as the graph on our ports to create I

00:42:50,180 --> 00:42:56,610
suppose lasting no elasticsearch is fine

00:42:54,230 --> 00:43:00,480
okay but in this case we can still

00:42:56,610 --> 00:43:03,630
proceed on because those would take a

00:43:00,480 --> 00:43:06,330
while to continue to continue setting up

00:43:03,630 --> 00:43:11,340
so the next bit is actually to configure

00:43:06,330 --> 00:43:12,960
our our IP addresses and domains so in

00:43:11,340 --> 00:43:18,030
this case we are kind of doing some sort

00:43:12,960 --> 00:43:21,380
of hack this is we are relying on this

00:43:18,030 --> 00:43:25,110
thing called xip the i/o so we can just

00:43:21,380 --> 00:43:27,120
it provides us a temporary domain for us

00:43:25,110 --> 00:43:30,810
to use in order to play with this

00:43:27,120 --> 00:43:33,510
example so first we need to edit our

00:43:30,810 --> 00:43:39,390
configuration but before that we need to

00:43:33,510 --> 00:43:42,260
get our our IP address form for our sto

00:43:39,390 --> 00:43:42,260
ingress gateway

00:43:53,010 --> 00:43:59,380
so for Easter ingress Skateway the

00:43:56,920 --> 00:44:01,869
external IP is this so we want to copy

00:43:59,380 --> 00:44:05,740
this this is essentially a load balancer

00:44:01,869 --> 00:44:07,540
service that connects this cluster to

00:44:05,740 --> 00:44:17,619
the outside wall so we'll want to copy

00:44:07,540 --> 00:44:21,030
this then we want to edit our this

00:44:17,619 --> 00:44:21,030
config McCaul config domain

00:44:40,380 --> 00:44:46,420
so we can just remove all the data here

00:44:43,590 --> 00:44:50,110
I mean these are example configurations

00:44:46,420 --> 00:44:54,180
that I mean for now it doesn't apply to

00:44:50,110 --> 00:44:54,180
our example so yeah let's delete that

00:44:55,740 --> 00:45:15,360
and then we'll just add our IP address

00:44:59,070 --> 00:45:24,450
with the ex IP so similar to what these

00:45:15,360 --> 00:45:30,310
blog posts mention then with that we can

00:45:24,450 --> 00:45:32,770
save this so let's compute and then now

00:45:30,310 --> 00:45:34,000
we can proceed to experiment a bit so

00:45:32,770 --> 00:45:36,370
usually when it comes to a gal

00:45:34,000 --> 00:45:39,520
kubernetes stuff right so the first

00:45:36,370 --> 00:45:42,070
thing usually people just try the first

00:45:39,520 --> 00:45:46,240
container that comes to mind to try out

00:45:42,070 --> 00:45:49,630
with kubernetes engines container but in

00:45:46,240 --> 00:45:51,460
this case because of certain issues the

00:45:49,630 --> 00:45:54,400
engine container can be used here

00:45:51,460 --> 00:45:55,990
because of the way certain volumes are

00:45:54,400 --> 00:45:59,080
mounted in order to extract locks from

00:45:55,990 --> 00:46:04,330
it so we kind of have to depend on

00:45:59,080 --> 00:46:08,470
another example service application

00:46:04,330 --> 00:46:13,320
state so fortunately they provide hello

00:46:08,470 --> 00:46:17,380
world example so this is our key native

00:46:13,320 --> 00:46:20,020
llamo found that we that we expect the

00:46:17,380 --> 00:46:21,520
developers create so instead of going

00:46:20,020 --> 00:46:25,150
through the whole hassle of trying to

00:46:21,520 --> 00:46:28,120
create deployment objects services all

00:46:25,150 --> 00:46:30,010
those kind of stuff so we just what we

00:46:28,120 --> 00:46:33,430
expected just like developers just

00:46:30,010 --> 00:46:37,210
create this Kennedy from Yamaha and all

00:46:33,430 --> 00:46:41,860
you need to provide is image for the

00:46:37,210 --> 00:46:45,240
simplest case so let's copy this config

00:46:41,860 --> 00:46:45,240
this configuration over

00:47:07,240 --> 00:47:13,819
yep so with that that is in and then we

00:47:11,450 --> 00:47:27,829
can just do our normal command of keep

00:47:13,819 --> 00:47:29,720
CTL just apply yep so with that the

00:47:27,829 --> 00:47:32,089
Trinity services cannot create it so

00:47:29,720 --> 00:47:35,420
what you want to do is to check certain

00:47:32,089 --> 00:47:36,829
kind of a certain resources here so the

00:47:35,420 --> 00:47:39,710
first thing that we will want to check

00:47:36,829 --> 00:47:41,869
is this thing this thing called Kay Kay

00:47:39,710 --> 00:47:46,400
Kay service which is kind of different

00:47:41,869 --> 00:47:48,710
from the community's service object

00:47:46,400 --> 00:47:51,589
so this skinny-dip creates this thing

00:47:48,710 --> 00:48:01,190
called case Kay service object so we

00:47:51,589 --> 00:48:04,940
just check that and then okay okay so

00:48:01,190 --> 00:48:06,049
yeah so we did that it's kind of know if

00:48:04,940 --> 00:48:09,079
this is ready okay

00:48:06,049 --> 00:48:16,309
so certain other thing that we can check

00:48:09,079 --> 00:48:20,450
and take a look at would be to see the

00:48:16,309 --> 00:48:28,489
list of revisions so now we have one

00:48:20,450 --> 00:48:32,200
hello world go application yep so then

00:48:28,489 --> 00:48:34,609
we'll go back to our case service and

00:48:32,200 --> 00:48:38,200
essentially all these does this all

00:48:34,609 --> 00:48:42,650
these application does is to return

00:48:38,200 --> 00:48:45,769
hello world text on a website so with

00:48:42,650 --> 00:48:50,380
that you just copy this link just paste

00:48:45,769 --> 00:48:50,380
it here then just enter

00:49:00,650 --> 00:49:04,040
hold on okay

00:49:06,370 --> 00:49:09,730
[Music]

00:49:31,640 --> 00:49:39,810
so I'm not getting the address the DNS

00:49:36,750 --> 00:49:44,730
resolve so hold on let me check

00:49:39,810 --> 00:49:47,060
certain things pasa fine so let me try

00:49:44,730 --> 00:49:47,060
again

00:49:52,640 --> 00:50:03,630
okay copy is this yeah if you try to

00:50:02,250 --> 00:50:07,470
resolve okay that's fine

00:50:03,630 --> 00:50:09,420
oh okay so with that it's finally

00:50:07,470 --> 00:50:12,810
connected if I mean resolve the DNS and

00:50:09,420 --> 00:50:15,480
this is the what applications going to

00:50:12,810 --> 00:50:19,950
return so it's actually this kid native

00:50:15,480 --> 00:50:23,010
thing is essentially what we create are

00:50:19,950 --> 00:50:25,290
what we create is the key native yam on

00:50:23,010 --> 00:50:26,520
file and then from that it creates a

00:50:25,290 --> 00:50:30,420
whole bunch of resources like routes

00:50:26,520 --> 00:50:33,020
revisions and all that and all those

00:50:30,420 --> 00:50:36,090
routes revisions are immutable immutable

00:50:33,020 --> 00:50:40,260
configurations so if you try to go to

00:50:36,090 --> 00:50:42,450
cube if you try to edit those resources

00:50:40,260 --> 00:50:47,640
those resources will get reset back to

00:50:42,450 --> 00:50:52,650
the original version so let's go back to

00:50:47,640 --> 00:50:54,870
the block so this is just a simple

00:50:52,650 --> 00:50:58,400
example or trying to deploy a simple

00:50:54,870 --> 00:51:01,800
service but let's say in our case where

00:50:58,400 --> 00:51:03,720
we want to have a service and we want to

00:51:01,800 --> 00:51:06,390
traffic split the service between

00:51:03,720 --> 00:51:11,460
multiple versions of the application so

00:51:06,390 --> 00:51:14,070
let's say we have this like hello world

00:51:11,460 --> 00:51:16,230
service and then we deploy like multiple

00:51:14,070 --> 00:51:18,030
versions of it by version 2 version 3

00:51:16,230 --> 00:51:21,240
and then we want to load balance it

00:51:18,030 --> 00:51:24,330
between 50 50 percent between version to

00:51:21,240 --> 00:51:28,470
a virgin tree like how do we do that

00:51:24,330 --> 00:51:30,990
so fork a native will just need to add

00:51:28,470 --> 00:51:35,430
attack in native file and then cook kena

00:51:30,990 --> 00:51:38,810
t4 will make that happen so let's go to

00:51:35,430 --> 00:51:38,810
the hello world example

00:51:47,530 --> 00:51:52,670
so in this case we want to create the

00:51:51,290 --> 00:51:59,120
the first thing that we want to create

00:51:52,670 --> 00:52:00,710
is our next two versions so so we just

00:51:59,120 --> 00:52:03,140
change this configuration to version two

00:52:00,710 --> 00:52:18,890
and then with that you just reapply

00:52:03,140 --> 00:52:21,680
again they'll create another revision

00:52:18,890 --> 00:52:23,660
for our key native service and then if

00:52:21,680 --> 00:52:31,610
we edit once more and then change that

00:52:23,660 --> 00:52:33,740
to number three you can then apply again

00:52:31,610 --> 00:52:37,310
and then it will create a new revision

00:52:33,740 --> 00:52:40,810
so if we try to access the site now it

00:52:37,310 --> 00:52:44,770
should go up to version 3 soon region 3

00:52:40,810 --> 00:52:52,430
so what's happening under the hood is

00:52:44,770 --> 00:52:56,300
like this cube native if we run this

00:52:52,430 --> 00:52:58,070
cube CD I'll get revision you list all

00:52:56,300 --> 00:53:01,160
the revisions is actually available for

00:52:58,070 --> 00:53:03,020
our apps so in our case since we

00:53:01,160 --> 00:53:04,430
deployed the hello world example three

00:53:03,020 --> 00:53:06,980
times now we have like three different

00:53:04,430 --> 00:53:10,240
revisions so let's say now we want to

00:53:06,980 --> 00:53:13,310
look at instance load balance between

00:53:10,240 --> 00:53:17,180
version 2 and version 3 so how do we do

00:53:13,310 --> 00:53:24,880
that you just go here then the next part

00:53:17,180 --> 00:53:24,880
is to edit it with this traffic portion

00:53:46,700 --> 00:53:54,600
then we need to get revision name so

00:53:52,290 --> 00:53:58,410
revision name can be obtained from the

00:53:54,600 --> 00:54:03,080
cube CTL get revisions so I need to get

00:53:58,410 --> 00:54:03,080
back to the shell in order to get it

00:54:10,950 --> 00:54:22,150
so revision name is this a copy then

00:54:17,260 --> 00:54:26,670
this is generation tree so we want to

00:54:22,150 --> 00:54:26,670
load balancers a lot balance to n tree

00:54:45,460 --> 00:54:50,200
and next we to get

00:55:06,799 --> 00:55:13,819
so with that computer the comp

00:55:09,720 --> 00:55:13,819
regression is done we can reapply this

00:55:25,970 --> 00:55:28,619
okay

00:55:27,150 --> 00:55:30,809
so there's it mean reapply so

00:55:28,619 --> 00:55:34,380
essentially what happens is now if we

00:55:30,809 --> 00:55:39,150
try to get revisions you'll see that

00:55:34,380 --> 00:55:44,039
there's a 4/4 okay yeah sorry about that

00:55:39,150 --> 00:55:46,109
I expected this for but yeah so now if

00:55:44,039 --> 00:55:46,650
you try to access that link over and

00:55:46,109 --> 00:55:50,579
over again

00:55:46,650 --> 00:56:05,489
we should toggle between version 2 and

00:55:50,579 --> 00:56:10,559
version 3 so if we do a few times yeah

00:56:05,489 --> 00:56:12,450
to tree to tree so with that I mean if

00:56:10,559 --> 00:56:15,769
you if you proceed on to experiment

00:56:12,450 --> 00:56:20,130
video you can like have different very

00:56:15,769 --> 00:56:22,469
varying examples yeah and then you can

00:56:20,130 --> 00:56:24,809
actually ensure and check that make sure

00:56:22,469 --> 00:56:27,239
to make sure that they are both truly

00:56:24,809 --> 00:56:29,489
low balances low balance 50% of the time

00:56:27,239 --> 00:56:32,880
going to version 2 and 50% time we're

00:56:29,489 --> 00:56:35,549
going to poison tree but let's say in

00:56:32,880 --> 00:56:38,099
our case where we have a development

00:56:35,549 --> 00:56:39,660
version and we still want our

00:56:38,099 --> 00:56:41,579
application to still go to purge into a

00:56:39,660 --> 00:56:44,460
virgin tree but we only want our

00:56:41,579 --> 00:56:47,509
developers or our testers to go try

00:56:44,460 --> 00:56:50,400
version 4 instead so how do you do that

00:56:47,509 --> 00:56:59,849
so if you go back to here

00:56:50,400 --> 00:57:05,309
oh hello world example then is just add

00:56:59,849 --> 00:57:07,089
one more thing which is tag so we'll

00:57:05,309 --> 00:57:09,890
just

00:57:07,089 --> 00:57:12,800
so essentially take essentially labels

00:57:09,890 --> 00:57:15,440
or traffic so it provides a and a

00:57:12,800 --> 00:57:19,400
special URL we can access that version

00:57:15,440 --> 00:57:28,970
that revision B so let's call this

00:57:19,400 --> 00:57:39,680
lettuce and then it does revision let us

00:57:28,970 --> 00:57:42,020
revision as true then we put % for the 0

00:57:39,680 --> 00:57:47,510
and then in order to make sure that they

00:57:42,020 --> 00:57:52,520
are different we want to set this to

00:57:47,510 --> 00:57:54,560
maybe 6 or something so that the

00:57:52,520 --> 00:57:56,680
configuration is done so we can reapply

00:57:54,560 --> 00:57:56,680
this

00:57:59,440 --> 00:58:05,839
so that's reapplied so if we try to we

00:58:03,740 --> 00:58:07,880
try to access this link over and over

00:58:05,839 --> 00:58:09,800
again this link will essentially still

00:58:07,880 --> 00:58:13,940
low balances low balances of between

00:58:09,800 --> 00:58:18,980
version 2 and version 3 yep version 2

00:58:13,940 --> 00:58:21,440
version 3 but then regarding the thing

00:58:18,980 --> 00:58:23,030
about latest the the latest tech that I

00:58:21,440 --> 00:58:25,820
was mentioned just now which is suppose

00:58:23,030 --> 00:58:29,420
a which we want developers to maybe

00:58:25,820 --> 00:58:31,190
access or something so a special URL is

00:58:29,420 --> 00:58:36,530
actually provided so what we can do it

00:58:31,190 --> 00:58:38,810
just and a pen letters and - and then we

00:58:36,530 --> 00:58:44,930
can enter this and then that you come up

00:58:38,810 --> 00:58:47,420
with version 6 so yeah so yeah those are

00:58:44,930 --> 00:58:51,680
the few features that are kind of

00:58:47,420 --> 00:58:53,990
interesting from Kennedy where it allows

00:58:51,680 --> 00:58:56,750
you to load balance between versions of

00:58:53,990 --> 00:58:58,609
application and let's say if you have

00:58:56,750 --> 00:59:00,410
like special development versions or

00:58:58,609 --> 00:59:02,450
special test versions and you want

00:59:00,410 --> 00:59:05,420
certain people to access you can provide

00:59:02,450 --> 00:59:08,240
them in special URLs but and another

00:59:05,420 --> 00:59:11,240
interesting aspect of this K native is

00:59:08,240 --> 00:59:15,200
the capability for it to actually scale

00:59:11,240 --> 00:59:17,900
down to zero so if we've been looking

00:59:15,200 --> 00:59:22,140
just now we've been accessing this

00:59:17,900 --> 00:59:24,660
these parts this service right so this

00:59:22,140 --> 00:59:29,599
service actually spins up new parts

00:59:24,660 --> 00:59:29,599
under the hood so if we do a watch here

00:59:35,420 --> 00:59:40,470
yep

00:59:36,630 --> 00:59:42,630
so if we let this run long enough

00:59:40,470 --> 00:59:45,750
anything not written long enough it

00:59:42,630 --> 00:59:48,450
start to disappear so as you see like

00:59:45,750 --> 00:59:53,369
now the status is being it's going to

00:59:48,450 --> 00:59:56,910
terminating so if there are no requests

00:59:53,369 --> 00:59:58,470
coming in your detail like hey actually

00:59:56,910 --> 01:00:00,809
this part is no longer required so it

00:59:58,470 --> 01:00:04,260
will clean up remove them so basically

01:00:00,809 --> 01:00:05,940
if you have a cluster and you are kind

01:00:04,260 --> 01:00:07,619
of shown resources and you have these

01:00:05,940 --> 01:00:09,809
applications that only run once in a

01:00:07,619 --> 01:00:17,750
while so basically this is one way you

01:00:09,809 --> 01:00:21,089
can you can ever cluster that you can

01:00:17,750 --> 01:00:24,750
use less of yeah save resources on it

01:00:21,089 --> 01:00:27,980
yeah you don't have to have one specific

01:00:24,750 --> 01:00:36,779
part running all the time

01:00:27,980 --> 01:00:40,640
so we've then yeah kind of yeah kind of

01:00:36,779 --> 01:00:43,740
done yeah because I am guessing that the

01:00:40,640 --> 01:00:46,440
next demo down will be particularly hard

01:00:43,740 --> 01:00:50,549
to demonstrate from here yeah because

01:00:46,440 --> 01:00:52,680
then requires so but that requires I

01:00:50,549 --> 01:00:55,170
trying to stress out these communities

01:00:52,680 --> 01:00:57,839
cluster I trying to see how many Posse

01:00:55,170 --> 01:01:00,299
can spawn in order to see the scaling

01:00:57,839 --> 01:01:03,680
effects of Kennedy but yeah from here

01:01:00,299 --> 01:01:08,490
it's a bit difficult so yeah that's it

01:01:03,680 --> 01:01:12,769
so if you want additional links this is

01:01:08,490 --> 01:01:15,660
a XM talk by met at ml that one of the

01:01:12,769 --> 01:01:18,329
developer advocates so Google cloud

01:01:15,660 --> 01:01:21,630
developer ok so here actually has a more

01:01:18,329 --> 01:01:23,819
excellent presentation about all this

01:01:21,630 --> 01:01:27,779
Kennedy when he actually go into details

01:01:23,819 --> 01:01:30,990
about this serving and also about

01:01:27,779 --> 01:01:35,040
inventing as well so yeah

01:01:30,990 --> 01:01:38,770
sit all right thank you very much

01:01:35,040 --> 01:01:38,770

YouTube URL: https://www.youtube.com/watch?v=F71rvTQ8unA


