Title: 5 Aspects of your Container Strategy - Shaun Norris
Publication date: 2020-03-22
Playlist: FOSSASIA Summit 2020 - Cloud
Description: 
	FOSSASIA Summit 2020 - Cloud Track
Captions: 
	00:00:00,829 --> 00:00:05,490
good afternoon my name's Shawn Norris

00:00:03,510 --> 00:00:07,230
I'm the director of platform

00:00:05,490 --> 00:00:09,360
architecture for vmware covering

00:00:07,230 --> 00:00:11,280
asia-pacific and japan and it's my

00:00:09,360 --> 00:00:14,040
pleasure to come to you virtually and

00:00:11,280 --> 00:00:16,379
remotely today from my home office and

00:00:14,040 --> 00:00:19,199
talk to you about five aspects of

00:00:16,379 --> 00:00:21,270
container strategy now Before we jump in

00:00:19,199 --> 00:00:23,699
I just want to acknowledge that these

00:00:21,270 --> 00:00:26,010
are interesting times and I'm sure like

00:00:23,699 --> 00:00:29,400
me you may be working from your home

00:00:26,010 --> 00:00:32,099
office but I trust that what we're

00:00:29,400 --> 00:00:34,320
seeing across industry even in these

00:00:32,099 --> 00:00:36,120
interesting and challenging times you'll

00:00:34,320 --> 00:00:37,649
find useful and you might find a few

00:00:36,120 --> 00:00:44,910
things you can take back and apply in

00:00:37,649 --> 00:00:47,070
your organization so with that let's

00:00:44,910 --> 00:00:51,539
jump straight in and let's look at five

00:00:47,070 --> 00:00:54,059
aspects of your container strategy so

00:00:51,539 --> 00:00:56,160
first off just a few seconds about me

00:00:54,059 --> 00:00:58,199
these are some of the organizations that

00:00:56,160 --> 00:01:01,710
I've been with in the past prior to

00:00:58,199 --> 00:01:03,480
joining VMware and notably JPMorgan

00:01:01,710 --> 00:01:06,570
Chase and Standard Chartered Bank here

00:01:03,480 --> 00:01:07,770
in Singapore if you like what I have to

00:01:06,570 --> 00:01:10,650
say or want to have a conversation

00:01:07,770 --> 00:01:12,380
further about anything shared today feel

00:01:10,650 --> 00:01:16,110
free to interact with me on Twitter

00:01:12,380 --> 00:01:17,729
where my handle is at Shawn Norris now

00:01:16,110 --> 00:01:19,920
Before we jump in and talk about

00:01:17,729 --> 00:01:23,549
container strategy you might be thinking

00:01:19,920 --> 00:01:26,610
to yourself well what is VMware here

00:01:23,549 --> 00:01:28,710
today talking about kubernetes so why

00:01:26,610 --> 00:01:31,140
why is VM we're talking about kubernetes

00:01:28,710 --> 00:01:33,930
well you know we've recently launched

00:01:31,140 --> 00:01:36,570
VMware tenzou and tenzou is two coming

00:01:33,930 --> 00:01:40,110
together of three really interesting

00:01:36,570 --> 00:01:42,150
companies and and groups of teams we've

00:01:40,110 --> 00:01:44,369
got hefty o which includes two of the

00:01:42,150 --> 00:01:47,490
three founders of kubernetes we've got

00:01:44,369 --> 00:01:49,619
pivotal where I've come into VMware from

00:01:47,490 --> 00:01:51,540
where we have years of experience

00:01:49,619 --> 00:01:53,700
running containers in production at

00:01:51,540 --> 00:01:55,259
scale and we have a bid nominee who for

00:01:53,700 --> 00:01:57,270
years have run the most successful

00:01:55,259 --> 00:01:59,219
library of open-source package projects

00:01:57,270 --> 00:02:03,030
and so the combination of these things

00:01:59,219 --> 00:02:04,380
together gives us VMware tanzy and very

00:02:03,030 --> 00:02:06,750
shortly this is going to be the only

00:02:04,380 --> 00:02:10,369
thing remotely resembling in a sales

00:02:06,750 --> 00:02:10,369
pitch in this presentation and

00:02:12,580 --> 00:02:17,690
VMware ten zoos gonna allow you to build

00:02:15,080 --> 00:02:19,700
run and manage modern applications and

00:02:17,690 --> 00:02:22,040
so the build part of that is going to be

00:02:19,700 --> 00:02:24,890
modern software supply chain how you get

00:02:22,040 --> 00:02:26,570
code into production easily we expect

00:02:24,890 --> 00:02:29,000
tenzou to help you run kubernetes

00:02:26,570 --> 00:02:31,700
everywhere and we want you to be able to

00:02:29,000 --> 00:02:33,680
manage multiple clusters of multiple

00:02:31,700 --> 00:02:35,900
flavors maybe with multiple teams in

00:02:33,680 --> 00:02:38,030
Vault as well and so all of this is

00:02:35,900 --> 00:02:39,290
coming together in VMware tenzou if you

00:02:38,030 --> 00:02:40,790
haven't heard of it already you're going

00:02:39,290 --> 00:02:43,640
to hear a lot about this in the future

00:02:40,790 --> 00:02:48,860
so enough sales pitch let's jump in and

00:02:43,640 --> 00:02:51,320
talk about container strategy so first

00:02:48,860 --> 00:02:53,090
off let's cover quickly where what we're

00:02:51,320 --> 00:02:54,830
actually going to look at today we're

00:02:53,090 --> 00:02:57,110
gonna have a brief history of how as an

00:02:54,830 --> 00:03:00,680
industry we got to this point we're

00:02:57,110 --> 00:03:02,390
going to have a look at why I think

00:03:00,680 --> 00:03:04,280
containers are a big deal and why I

00:03:02,390 --> 00:03:06,200
would suggest you ought to think so as

00:03:04,280 --> 00:03:09,860
well we're gonna look at these five

00:03:06,200 --> 00:03:11,300
specific aspects very briefly really

00:03:09,860 --> 00:03:13,010
when we talk about containers we're

00:03:11,300 --> 00:03:16,280
really now talking about kubernetes and

00:03:13,010 --> 00:03:18,860
kubernetes is both a platform and a

00:03:16,280 --> 00:03:20,870
chance to reorganize and it's really

00:03:18,860 --> 00:03:22,460
designed for new ways of working and

00:03:20,870 --> 00:03:25,820
then we're gonna finish off by looking

00:03:22,460 --> 00:03:29,480
at is kubernetes a strategic goal in

00:03:25,820 --> 00:03:30,980
itself then if you're interested in

00:03:29,480 --> 00:03:32,780
embarking on this journey or

00:03:30,980 --> 00:03:35,210
accelerating your journey towards

00:03:32,780 --> 00:03:37,460
containers with kubernetes how can you

00:03:35,210 --> 00:03:40,600
get started and maybe how can VMware

00:03:37,460 --> 00:03:44,540
time to help so let's jump straight in

00:03:40,600 --> 00:03:46,310
you know if we think of the last five

00:03:44,540 --> 00:03:48,200
decades of computers and we're not going

00:03:46,310 --> 00:03:50,840
to spend much time on this the

00:03:48,200 --> 00:03:53,720
overwhelming thing I want you to take

00:03:50,840 --> 00:03:56,510
away from this introduction is that the

00:03:53,720 --> 00:03:58,550
minimum unit of compute and the minimum

00:03:56,510 --> 00:04:00,830
cost to get started computing has

00:03:58,550 --> 00:04:04,010
steadily dropped over the last five

00:04:00,830 --> 00:04:06,860
decades if you asked folks in the 1980s

00:04:04,010 --> 00:04:09,440
is something going to come in displace

00:04:06,860 --> 00:04:11,680
the bunch of companies that was you know

00:04:09,440 --> 00:04:15,230
Burroughs UNIVAC NCR control data and

00:04:11,680 --> 00:04:17,930
Honeywell well really none of those are

00:04:15,230 --> 00:04:20,459
household names anymore for anything to

00:04:17,930 --> 00:04:24,630
do with computing

00:04:20,459 --> 00:04:27,570
if we move on a decade in the 1990s

00:04:24,630 --> 00:04:30,780
where I kind of started my career was

00:04:27,570 --> 00:04:33,539
really the rise of x86 computing Intel

00:04:30,780 --> 00:04:36,900
microprocessors became the norm the

00:04:33,539 --> 00:04:39,210
internet began or at least began to be

00:04:36,900 --> 00:04:42,240
used in full we really saw the version

00:04:39,210 --> 00:04:45,660
1.0 of the dot-com boom if we roll

00:04:42,240 --> 00:04:47,580
forward to the 2000s well here we saw

00:04:45,660 --> 00:04:49,590
people taking physical servers and

00:04:47,580 --> 00:04:51,539
slicing them up into virtual ones and

00:04:49,590 --> 00:04:54,900
that's probably how you best know VMware

00:04:51,539 --> 00:04:57,810
and you know that really became

00:04:54,900 --> 00:05:00,150
mainstream through the 2000s we also saw

00:04:57,810 --> 00:05:02,150
the emergence of this idea of public

00:05:00,150 --> 00:05:04,710
cloud of running API driven

00:05:02,150 --> 00:05:08,370
infrastructure on someone else's

00:05:04,710 --> 00:05:12,539
premises and also the first generation

00:05:08,370 --> 00:05:15,509
of systems management automation tools

00:05:12,539 --> 00:05:17,340
for for infrastructure if we roll

00:05:15,509 --> 00:05:19,229
forward to the decade we've just

00:05:17,340 --> 00:05:22,349
finished with the 2010s

00:05:19,229 --> 00:05:24,900
we saw cloud computing go from up an

00:05:22,349 --> 00:05:27,030
edge niche that maybe a few startups and

00:05:24,900 --> 00:05:28,470
really leading edge or bleeding edge

00:05:27,030 --> 00:05:31,139
companies we're using to something that

00:05:28,470 --> 00:05:32,729
is really mainstream now we see this as

00:05:31,139 --> 00:05:35,190
billions of dollars a year of business

00:05:32,729 --> 00:05:38,159
of folks spending money in the hyper

00:05:35,190 --> 00:05:39,750
scale public clouds we also though in

00:05:38,159 --> 00:05:42,479
the middle of the decade saw the

00:05:39,750 --> 00:05:45,510
emergence of this idea of docker and

00:05:42,479 --> 00:05:47,400
then kubernetes so now as we look

00:05:45,510 --> 00:05:49,530
forward like what is going to defy in

00:05:47,400 --> 00:05:53,400
the 2020s the decade that we're just

00:05:49,530 --> 00:05:56,669
starting well beyond some massive

00:05:53,400 --> 00:05:58,949
changes to our lifestyle as a result of

00:05:56,669 --> 00:06:02,400
the current buyer situation that we're

00:05:58,949 --> 00:06:05,820
all anxious about if from a computing

00:06:02,400 --> 00:06:08,400
point of view the widespread migration

00:06:05,820 --> 00:06:10,680
to containers looks as likely about as I

00:06:08,400 --> 00:06:12,960
can see and when I talk to customers

00:06:10,680 --> 00:06:15,840
across our region and hear from my

00:06:12,960 --> 00:06:18,800
colleagues globally many companies are

00:06:15,840 --> 00:06:21,570
thinking about how they can move away or

00:06:18,800 --> 00:06:26,310
augment their existing infrastructure

00:06:21,570 --> 00:06:29,070
with containers so with that background

00:06:26,310 --> 00:06:33,240
in context why do containers matter at

00:06:29,070 --> 00:06:34,220
all why are they a big deal well from

00:06:33,240 --> 00:06:36,560
the pivotal

00:06:34,220 --> 00:06:39,320
that I was part of previously and now at

00:06:36,560 --> 00:06:41,720
VMware we think of infrastructure

00:06:39,320 --> 00:06:44,240
particularly in terms of five s's the

00:06:41,720 --> 00:06:47,060
things that when we talked to CTOs and

00:06:44,240 --> 00:06:49,520
CIOs these are the things that matter to

00:06:47,060 --> 00:06:51,620
them in terms of their technology

00:06:49,520 --> 00:06:53,990
capability you know speed can you go

00:06:51,620 --> 00:06:55,820
faster can you provide things faster to

00:06:53,990 --> 00:06:57,470
developers when you need them and when

00:06:55,820 --> 00:07:00,530
you look at things starting up in a

00:06:57,470 --> 00:07:02,690
container well it can start off in in

00:07:00,530 --> 00:07:05,120
some second time sometimes only a few

00:07:02,690 --> 00:07:06,920
seconds whereas virtual machines are

00:07:05,120 --> 00:07:09,140
still more like starting a traditional

00:07:06,920 --> 00:07:12,500
server often takes minutes to start them

00:07:09,140 --> 00:07:15,560
off and then if we look at scale one of

00:07:12,500 --> 00:07:17,480
the ideas that really caught on as

00:07:15,560 --> 00:07:20,210
public cloud started to become

00:07:17,480 --> 00:07:22,510
widespread was this idea of having auto

00:07:20,210 --> 00:07:25,160
scaling applications rather than

00:07:22,510 --> 00:07:27,650
provisioning for your peak load you

00:07:25,160 --> 00:07:29,870
provision for a lower base load but then

00:07:27,650 --> 00:07:32,180
you have the application and respond to

00:07:29,870 --> 00:07:34,490
demand and add more compute

00:07:32,180 --> 00:07:38,480
infrastructure to handle that load as

00:07:34,490 --> 00:07:40,880
you go and so kubernetes and containers

00:07:38,480 --> 00:07:43,070
allow ops teams to easily auto scale

00:07:40,880 --> 00:07:43,940
apps that have been written to take

00:07:43,070 --> 00:07:45,980
advantage of that

00:07:43,940 --> 00:07:47,510
whereas with virtual machines auto

00:07:45,980 --> 00:07:50,300
scaling was something that came later

00:07:47,510 --> 00:07:52,780
and there's still a lot of traditional

00:07:50,300 --> 00:07:55,130
installations of virtual machines and

00:07:52,780 --> 00:07:57,169
traditional applications running on

00:07:55,130 --> 00:08:00,350
those virtual machine farms that don't

00:07:57,169 --> 00:08:02,660
have that capability yet and so you know

00:08:00,350 --> 00:08:05,240
if we're keeping score we really would

00:08:02,660 --> 00:08:07,419
really score speed and scale on the side

00:08:05,240 --> 00:08:09,800
of kubernetes and containers now

00:08:07,419 --> 00:08:13,430
stability what are containers give us

00:08:09,800 --> 00:08:16,010
with stability well kubernetes has

00:08:13,430 --> 00:08:17,780
self-healing built in as a core

00:08:16,010 --> 00:08:20,180
component it has these control loops

00:08:17,780 --> 00:08:22,729
that if you expect two containers to be

00:08:20,180 --> 00:08:25,490
running for your deployment pods in

00:08:22,729 --> 00:08:27,320
kubernetes language it will always make

00:08:25,490 --> 00:08:29,990
sure you've got two running if one of

00:08:27,320 --> 00:08:32,060
them dies if the underlying node that

00:08:29,990 --> 00:08:34,580
your poet is running on disappears it

00:08:32,060 --> 00:08:37,039
will try and schedule another pod to

00:08:34,580 --> 00:08:39,229
replace it and this is just a built-in

00:08:37,039 --> 00:08:42,760
first order characteristic of kubernetes

00:08:39,229 --> 00:08:45,920
that you get self-healing baked in now

00:08:42,760 --> 00:08:47,930
these capabilities are really powerful

00:08:45,920 --> 00:08:50,360
but they're also quite new and they

00:08:47,930 --> 00:08:53,000
two new skills from people so there is a

00:08:50,360 --> 00:08:55,100
tinge of caution to this whereas we look

00:08:53,000 --> 00:08:57,320
at virtual machines and these have

00:08:55,100 --> 00:09:01,510
evolved over the last 20 years to be

00:08:57,320 --> 00:09:06,020
really tried and true and you know

00:09:01,510 --> 00:09:08,089
capabilities like V motion and such like

00:09:06,020 --> 00:09:11,120
for high availability are you know

00:09:08,089 --> 00:09:12,860
multiple generations of upgrades and

00:09:11,120 --> 00:09:16,060
improvements having been applied to them

00:09:12,860 --> 00:09:18,290
and they work really well the

00:09:16,060 --> 00:09:20,570
interesting thing about that is though

00:09:18,290 --> 00:09:23,750
that that often requires manual

00:09:20,570 --> 00:09:26,540
intervention to fail over to a different

00:09:23,750 --> 00:09:29,149
host not always but and it really

00:09:26,540 --> 00:09:31,580
depends on the operator the the ability

00:09:29,149 --> 00:09:34,070
to have stability baked-in is certainly

00:09:31,580 --> 00:09:35,870
there as a possibility but it's not

00:09:34,070 --> 00:09:38,240
guaranteed in the same way that

00:09:35,870 --> 00:09:41,570
self-healing is in a kubernetes cluster

00:09:38,240 --> 00:09:44,540
so you know if I kind of score stability

00:09:41,570 --> 00:09:47,209
I'd say I think eventually kubernetes

00:09:44,540 --> 00:09:49,550
will surpass what's available on virtual

00:09:47,209 --> 00:09:50,920
machines but today certainly a lot more

00:09:49,550 --> 00:09:53,390
of the world's revenue-generating

00:09:50,920 --> 00:09:56,720
mission-critical applications are still

00:09:53,390 --> 00:09:59,930
running on virtual machines and so I

00:09:56,720 --> 00:10:01,670
would score that one a tie between sort

00:09:59,930 --> 00:10:04,520
of the new world and virtual machines

00:10:01,670 --> 00:10:08,300
then if we look at sustainability or the

00:10:04,520 --> 00:10:10,790
ability to offer a well kubernetes

00:10:08,300 --> 00:10:13,640
because it deals with containers as it's

00:10:10,790 --> 00:10:16,640
gonna first-order way of deploying

00:10:13,640 --> 00:10:18,589
applications you you need to use an

00:10:16,640 --> 00:10:20,060
infrastructure as code approach when

00:10:18,589 --> 00:10:22,459
you're deploying your application to

00:10:20,060 --> 00:10:24,260
Cooper net it needs that that docker

00:10:22,459 --> 00:10:26,930
file are equivalent there's going to be

00:10:24,260 --> 00:10:28,760
a llamo manifest of essentially

00:10:26,930 --> 00:10:30,980
infrastructure code describing the

00:10:28,760 --> 00:10:32,870
kubernetes what you expect it to have

00:10:30,980 --> 00:10:34,820
deployed you know defining those

00:10:32,870 --> 00:10:36,680
infrastructure objects getting them

00:10:34,820 --> 00:10:39,589
running we hear a lot of people talking

00:10:36,680 --> 00:10:41,900
about get ops this is where no longer

00:10:39,589 --> 00:10:44,089
are you using a version control I get

00:10:41,900 --> 00:10:46,130
just to store your software source code

00:10:44,089 --> 00:10:48,110
for your application but you're actually

00:10:46,130 --> 00:10:50,540
storing your infrastructure source code

00:10:48,110 --> 00:10:54,920
all of your kubernetes deployments and

00:10:50,540 --> 00:10:57,980
ingresses and pods and all of the other

00:10:54,920 --> 00:10:59,870
aspects of deploying it you're storing

00:10:57,980 --> 00:11:01,430
that in a version control like git and

00:10:59,870 --> 00:11:03,680
so you're actually making it

00:11:01,430 --> 00:11:06,589
structure changes by doing a pull

00:11:03,680 --> 00:11:09,470
request or doing a version change in get

00:11:06,589 --> 00:11:12,110
which will automatically flow through to

00:11:09,470 --> 00:11:14,149
your infrastructure well if we think of

00:11:12,110 --> 00:11:16,970
that in comparison to the VM world

00:11:14,149 --> 00:11:19,160
themes are often susceptible to you know

00:11:16,970 --> 00:11:24,980
configuration drift lots of manual

00:11:19,160 --> 00:11:27,820
activity when I was working for you know

00:11:24,980 --> 00:11:30,440
a large financial services institution

00:11:27,820 --> 00:11:32,149
these were major concerns are the things

00:11:30,440 --> 00:11:33,920
running in production what we expect

00:11:32,149 --> 00:11:36,890
them to be and how do we know well

00:11:33,920 --> 00:11:38,810
because you you can trace and kubernetes

00:11:36,890 --> 00:11:40,520
straight back to code I expect over time

00:11:38,810 --> 00:11:44,779
more and more people are going to go to

00:11:40,520 --> 00:11:46,610
this because of the reduced capacity to

00:11:44,779 --> 00:11:49,040
have configuration drift and the

00:11:46,610 --> 00:11:50,959
reduction in requiring people to go in

00:11:49,040 --> 00:11:52,730
and do things manually we know that if

00:11:50,959 --> 00:11:54,860
manual tasks had done enough times

00:11:52,730 --> 00:11:57,140
eventually there will be mistakes in the

00:11:54,860 --> 00:11:58,790
past I think we maybe took the view of

00:11:57,140 --> 00:12:01,370
blaming the operator and calling that

00:11:58,790 --> 00:12:03,050
human error I think a lot of teams are

00:12:01,370 --> 00:12:04,670
more enlightened these days and realize

00:12:03,050 --> 00:12:07,820
that it's actually the system we need to

00:12:04,670 --> 00:12:09,860
blame it's actually the allowance for

00:12:07,820 --> 00:12:12,080
manual activity in the first place that

00:12:09,860 --> 00:12:14,720
we need to eliminate kubernetes has a

00:12:12,080 --> 00:12:17,360
lot of promise in helping us do this and

00:12:14,720 --> 00:12:19,520
so you know if I look at sustainability

00:12:17,360 --> 00:12:21,380
or the ability to operate in a modern

00:12:19,520 --> 00:12:24,500
way I think containers and kubernetes

00:12:21,380 --> 00:12:26,630
are winning in that column as well now

00:12:24,500 --> 00:12:28,029
security is an interesting one as we hit

00:12:26,630 --> 00:12:32,180
point five here

00:12:28,029 --> 00:12:35,150
the isolation boundaries between virtual

00:12:32,180 --> 00:12:37,580
machines are really tried and true and

00:12:35,150 --> 00:12:42,680
have been tested over multiple

00:12:37,580 --> 00:12:45,350
generations and so the isolation between

00:12:42,680 --> 00:12:48,350
running containers on a machine is just

00:12:45,350 --> 00:12:50,329
not the same level of security this is

00:12:48,350 --> 00:12:52,550
one of the things that's causing teams

00:12:50,329 --> 00:12:54,380
to have to run multiple clusters because

00:12:52,550 --> 00:12:57,370
even though you can set up a virtual

00:12:54,380 --> 00:12:59,839
cluster in kubernetes called a namespace

00:12:57,370 --> 00:13:04,339
you don't necessarily have the same

00:12:59,839 --> 00:13:06,380
guarantees of full isolation and

00:13:04,339 --> 00:13:08,779
segregation between namespaces that you

00:13:06,380 --> 00:13:11,680
would between for example between

00:13:08,779 --> 00:13:15,230
different virtual machines running on

00:13:11,680 --> 00:13:17,120
VMware vSphere so you know really

00:13:15,230 --> 00:13:19,220
at this point there's a lot of work to

00:13:17,120 --> 00:13:22,540
do around the kubernetes and container

00:13:19,220 --> 00:13:25,430
space insecurity you know not

00:13:22,540 --> 00:13:27,470
insurmountable tasks but I think if

00:13:25,430 --> 00:13:30,320
we're if we're scoring honestly here I

00:13:27,470 --> 00:13:34,280
think BM is for truly mission-critical

00:13:30,320 --> 00:13:36,290
applications still win in the Security

00:13:34,280 --> 00:13:39,700
baked-in particularly around the

00:13:36,290 --> 00:13:41,750
isolation between virtual machines well

00:13:39,700 --> 00:13:44,180
you know hopefully this gives you a bit

00:13:41,750 --> 00:13:45,770
of an overview of why containers and

00:13:44,180 --> 00:13:49,070
kubernetes are getting so much attention

00:13:45,770 --> 00:13:52,070
in the industry and you know this brings

00:13:49,070 --> 00:13:54,080
me to kind of my first aspect of as you

00:13:52,070 --> 00:13:56,780
think about designing a container

00:13:54,080 --> 00:13:59,590
strategy or a kubernetes strategy well

00:13:56,780 --> 00:14:02,030
you know what is it

00:13:59,590 --> 00:14:03,950
kubernetes has sprung out from an

00:14:02,030 --> 00:14:05,990
internal project at Google which was

00:14:03,950 --> 00:14:07,780
then open sourced and this really

00:14:05,990 --> 00:14:09,770
represents the way Google ran

00:14:07,780 --> 00:14:13,100
infrastructure for a number of years

00:14:09,770 --> 00:14:15,620
internally and by open sourcing at a

00:14:13,100 --> 00:14:17,960
vibrant open source community has sprung

00:14:15,620 --> 00:14:20,720
up around this project and so because

00:14:17,960 --> 00:14:22,280
it's owned by the whole community if you

00:14:20,720 --> 00:14:23,390
feel comfortable in using it because

00:14:22,280 --> 00:14:26,240
they don't feel they're going to be

00:14:23,390 --> 00:14:29,540
locked into a single vendor um we've

00:14:26,240 --> 00:14:32,090
also seen a number of other competing

00:14:29,540 --> 00:14:34,910
container scheduling competitors like

00:14:32,090 --> 00:14:36,560
mesosphere docker themselves they've all

00:14:34,910 --> 00:14:39,350
essentially given up and have now

00:14:36,560 --> 00:14:41,210
admitted that kubernetes is is the

00:14:39,350 --> 00:14:43,160
winner in this space and there are all

00:14:41,210 --> 00:14:46,610
supporting kubernetes to some extent or

00:14:43,160 --> 00:14:47,930
another we're quite confident that

00:14:46,610 --> 00:14:50,720
kubernetes is the future of

00:14:47,930 --> 00:14:53,060
infrastructure as a way to schedule

00:14:50,720 --> 00:14:54,380
workloads and for some of the benefits

00:14:53,060 --> 00:14:57,230
we just talked about on the previous

00:14:54,380 --> 00:14:59,540
slide we think it's you know the

00:14:57,230 --> 00:15:02,360
argument over which container scheduler

00:14:59,540 --> 00:15:06,830
is going to win we think is over and we

00:15:02,360 --> 00:15:08,960
think that kubernetes is the future

00:15:06,830 --> 00:15:14,180
direction of containers and container

00:15:08,960 --> 00:15:16,430
scheduling so on to our second aspect

00:15:14,180 --> 00:15:20,920
you know if containers is a platform and

00:15:16,430 --> 00:15:23,900
as I share these aspects one of the

00:15:20,920 --> 00:15:25,880
things I want to do is also share some

00:15:23,900 --> 00:15:29,000
further reading material you can go have

00:15:25,880 --> 00:15:31,430
a look at that I think explain

00:15:29,000 --> 00:15:34,640
in much more detail in depth than I can

00:15:31,430 --> 00:15:37,810
do in a 20-minute talk so one of the

00:15:34,640 --> 00:15:42,170
interesting aspects is that kubernetes

00:15:37,810 --> 00:15:44,330
is an API now why are platforms

00:15:42,170 --> 00:15:47,390
important why our API is important if

00:15:44,330 --> 00:15:49,060
you want to understand the impact they

00:15:47,390 --> 00:15:51,080
can have on your organization I

00:15:49,060 --> 00:15:53,510
recommend you have a look at this book

00:15:51,080 --> 00:15:56,420
called accelerate by dr. Niccole for

00:15:53,510 --> 00:15:59,210
Grand Jazz humble and gee Kim I'm three

00:15:56,420 --> 00:16:01,970
of the smartest folks in the industry

00:15:59,210 --> 00:16:03,890
when it comes to DevOps and new modern

00:16:01,970 --> 00:16:07,040
ways of working and in this book they go

00:16:03,890 --> 00:16:09,620
through really extensive detail backed

00:16:07,040 --> 00:16:12,410
up with real real world data and metrics

00:16:09,620 --> 00:16:13,930
around how these new ways of working can

00:16:12,410 --> 00:16:16,100
help you build and scale a

00:16:13,930 --> 00:16:18,200
high-performing world-class technology

00:16:16,100 --> 00:16:19,430
organization so one of the things that

00:16:18,200 --> 00:16:21,430
come out of that comes out of this

00:16:19,430 --> 00:16:24,080
research in this book is this idea of

00:16:21,430 --> 00:16:27,440
four big metrics or a high-level

00:16:24,080 --> 00:16:29,390
scorecard on the way to assess your

00:16:27,440 --> 00:16:31,880
team's performance and rather than these

00:16:29,390 --> 00:16:33,680
things being technically related is

00:16:31,880 --> 00:16:36,260
really mapped back to your business and

00:16:33,680 --> 00:16:38,600
the capabilities your business so in a

00:16:36,260 --> 00:16:41,600
nutshell these are related to throughput

00:16:38,600 --> 00:16:43,580
and stability and so you really need

00:16:41,600 --> 00:16:46,700
both if you're operating a modern

00:16:43,580 --> 00:16:50,210
environment and let's look at throughput

00:16:46,700 --> 00:16:52,520
for a moment if if you're the the

00:16:50,210 --> 00:16:54,560
accelerate book suggests two metrics to

00:16:52,520 --> 00:16:56,930
look at for throughput one is the

00:16:54,560 --> 00:16:58,580
frequency of changes to production so

00:16:56,930 --> 00:17:01,250
how often do you ship code to production

00:16:58,580 --> 00:17:04,010
and then you know how long does it take

00:17:01,250 --> 00:17:06,350
each change to production to go from the

00:17:04,010 --> 00:17:08,449
developer checking it in to being used

00:17:06,350 --> 00:17:11,270
by a customer in a production capacity

00:17:08,449 --> 00:17:14,270
so you know how what's your lead time

00:17:11,270 --> 00:17:16,100
and then what's your frequency and you

00:17:14,270 --> 00:17:18,020
know we've worked with teams that have

00:17:16,100 --> 00:17:20,240
gone for example from once a month

00:17:18,020 --> 00:17:22,910
deployments down to many times a day and

00:17:20,240 --> 00:17:27,110
the impact that has on their business

00:17:22,910 --> 00:17:29,120
can be profound but going fast is not

00:17:27,110 --> 00:17:30,890
enough on its own you must do that with

00:17:29,120 --> 00:17:33,170
safety and stability and so the

00:17:30,890 --> 00:17:35,660
stability side of the big four metrics

00:17:33,170 --> 00:17:37,490
is really around what is your failure

00:17:35,660 --> 00:17:39,140
rate how often when you change

00:17:37,490 --> 00:17:41,030
production does it break something or do

00:17:39,140 --> 00:17:43,610
you have an interruption in service

00:17:41,030 --> 00:17:46,460
then in those events which hopefully are

00:17:43,610 --> 00:17:48,740
rare how fast do you recover what is

00:17:46,460 --> 00:17:52,340
your time to recover from a failure and

00:17:48,740 --> 00:17:53,840
so put together these high-level metrics

00:17:52,340 --> 00:17:55,670
are actually things that your business

00:17:53,840 --> 00:17:57,710
will care about the non-technical people

00:17:55,670 --> 00:17:59,810
in your organization will actually go

00:17:57,710 --> 00:18:02,840
yes I'd like you to deploy a new value

00:17:59,810 --> 00:18:06,440
faster and I'd like it to take less time

00:18:02,840 --> 00:18:08,960
every time you do and I would really

00:18:06,440 --> 00:18:11,090
hope that as you deploy a new value for

00:18:08,960 --> 00:18:13,760
our customers that things break less and

00:18:11,090 --> 00:18:16,250
less and that in the rare event it

00:18:13,760 --> 00:18:18,200
breaks that you recover quickly so I'm

00:18:16,250 --> 00:18:19,670
really sold on these big four metrics

00:18:18,200 --> 00:18:21,970
I'd recommend them and I'd recommend

00:18:19,670 --> 00:18:25,490
this book for you to have a look at um

00:18:21,970 --> 00:18:27,530
on this topic of DevOps a lot of people

00:18:25,490 --> 00:18:31,310
talk about DevOps wanting to adopt it

00:18:27,530 --> 00:18:33,530
and I'm convinced that DevOps or working

00:18:31,310 --> 00:18:36,680
together better if you like is really an

00:18:33,530 --> 00:18:39,950
output of some inputs you could rather

00:18:36,680 --> 00:18:41,720
focus on so you know DevOps is not

00:18:39,950 --> 00:18:44,930
something you can wave a magic wand and

00:18:41,720 --> 00:18:47,120
say we're all DevOps now really what

00:18:44,930 --> 00:18:49,960
they dive into in the book is areas like

00:18:47,120 --> 00:18:53,030
effective use of cloud you know

00:18:49,960 --> 00:18:54,860
continuous delivery what do the specific

00:18:53,030 --> 00:18:57,170
practices of continuous delivery look

00:18:54,860 --> 00:18:59,180
like I'm using infrastructure as code

00:18:57,170 --> 00:19:01,880
which pulls us back to kubernetes and

00:18:59,180 --> 00:19:05,180
then cross-functional teams rather than

00:19:01,880 --> 00:19:07,430
having teams that are siloed and doing

00:19:05,180 --> 00:19:09,800
just one job you need teams that have an

00:19:07,430 --> 00:19:14,000
end and view of how value gets delivered

00:19:09,800 --> 00:19:16,220
and so kubernetes is specifically

00:19:14,000 --> 00:19:18,170
architected in a way that I think it can

00:19:16,220 --> 00:19:22,250
help with all of these areas so that

00:19:18,170 --> 00:19:25,640
takes us nicely to our third aspect you

00:19:22,250 --> 00:19:29,780
know in more traditional organizations

00:19:25,640 --> 00:19:33,380
um there's usually a separate team for

00:19:29,780 --> 00:19:35,330
each different type of technology I can

00:19:33,380 --> 00:19:37,190
remember in a large organization I was

00:19:35,330 --> 00:19:40,480
working for we had a production incident

00:19:37,190 --> 00:19:43,730
and in order to solve it we spun up a

00:19:40,480 --> 00:19:46,850
conference call bridge we had to page 13

00:19:43,730 --> 00:19:49,120
different team leaders in to help

00:19:46,850 --> 00:19:51,640
troubleshoot and figure out

00:19:49,120 --> 00:19:54,040
where the fault lay if you like what

00:19:51,640 --> 00:19:56,590
what part of the stack was not working

00:19:54,040 --> 00:19:58,270
and that was siloed into 13 different

00:19:56,590 --> 00:20:01,720
teams and that's not particularly

00:19:58,270 --> 00:20:03,550
unusual when we go and look at you know

00:20:01,720 --> 00:20:06,160
traditional organizations still in

00:20:03,550 --> 00:20:09,309
industry and so if we just take compute

00:20:06,160 --> 00:20:10,720
storage networking insecurity as you

00:20:09,309 --> 00:20:13,780
know you'll find these teams in most

00:20:10,720 --> 00:20:17,170
large orcs well kubernetes if you're

00:20:13,780 --> 00:20:19,840
deploying an application you're going to

00:20:17,170 --> 00:20:21,429
be choosing what computer you'd like you

00:20:19,840 --> 00:20:23,679
you know a docker image you're going to

00:20:21,429 --> 00:20:26,020
be choosing what storage to use maybe a

00:20:23,679 --> 00:20:28,480
persistent volume and what flavor of

00:20:26,020 --> 00:20:30,610
persistent volume that is you're going

00:20:28,480 --> 00:20:32,470
to be making networking decisions around

00:20:30,610 --> 00:20:35,020
well how am I going to control my

00:20:32,470 --> 00:20:37,800
ingress what sort of overlay networking

00:20:35,020 --> 00:20:42,940
am I going to choose between my pods um

00:20:37,800 --> 00:20:45,760
you know have I designed it so that am I

00:20:42,940 --> 00:20:47,350
going to use external load balancers am

00:20:45,760 --> 00:20:48,910
I going to use cloud load balancers

00:20:47,350 --> 00:20:50,320
there's lots of networking decisions you

00:20:48,910 --> 00:20:52,750
need to make kubernetes and they're not

00:20:50,320 --> 00:20:54,400
all straightforward and then security

00:20:52,750 --> 00:20:57,150
how am I going to decide how many

00:20:54,400 --> 00:21:00,340
clusters to have how am I going to

00:20:57,150 --> 00:21:02,309
decide what namespaces to put things in

00:21:00,340 --> 00:21:04,450
there's there's a number of different

00:21:02,309 --> 00:21:07,750
aspects to security that you need to

00:21:04,450 --> 00:21:10,059
take in and often all four of these

00:21:07,750 --> 00:21:12,940
areas and more come together in one

00:21:10,059 --> 00:21:16,360
single Gemmell manifest file for a

00:21:12,940 --> 00:21:18,970
deployment and so if you're still

00:21:16,360 --> 00:21:21,010
organized in a way where you need four

00:21:18,970 --> 00:21:22,830
separate teams to commit to come

00:21:21,010 --> 00:21:27,460
together and write that file together

00:21:22,830 --> 00:21:29,710
you're going to struggle to to actually

00:21:27,460 --> 00:21:33,010
see the speed-up and the moving fast

00:21:29,710 --> 00:21:34,750
that might be possible so you know I

00:21:33,010 --> 00:21:36,640
want to introduce the second book that I

00:21:34,750 --> 00:21:39,790
think you'll find interesting this is a

00:21:36,640 --> 00:21:42,280
book called team topologies by two folks

00:21:39,790 --> 00:21:46,120
in the EU Mathew Skelton and manual a

00:21:42,280 --> 00:21:47,740
and this is probably the most impactful

00:21:46,120 --> 00:21:52,210
book I've read in the last one to two

00:21:47,740 --> 00:21:53,860
years and one of the highlights I want

00:21:52,210 --> 00:21:57,040
to share from the book is this idea of

00:21:53,860 --> 00:21:59,770
the reverse conwy maneuver now Conway's

00:21:57,040 --> 00:22:02,620
law which you've probably heard of it's

00:21:59,770 --> 00:22:04,900
more it's more a social officer

00:22:02,620 --> 00:22:08,290
raishin than a hard-and-fast law like

00:22:04,900 --> 00:22:09,100
you know Newton's law of gravity or

00:22:08,290 --> 00:22:12,040
something like this

00:22:09,100 --> 00:22:15,760
but it makes the observation that if

00:22:12,040 --> 00:22:18,340
we're designing software and we have a

00:22:15,760 --> 00:22:21,430
particular organizational structure the

00:22:18,340 --> 00:22:24,760
software we design will most often

00:22:21,430 --> 00:22:28,120
reflect our organizational structure now

00:22:24,760 --> 00:22:30,880
the example that often gets shared is

00:22:28,120 --> 00:22:33,340
that there was apparently a time when

00:22:30,880 --> 00:22:34,900
four separate teams were asked to

00:22:33,340 --> 00:22:37,330
collaborate together and build a

00:22:34,900 --> 00:22:40,650
compiler and they came back with a four

00:22:37,330 --> 00:22:43,179
pass compiler so that gives you an idea

00:22:40,650 --> 00:22:45,460
kind of back to these siloed teams

00:22:43,179 --> 00:22:48,040
working on kubernetes together it is

00:22:45,460 --> 00:22:50,170
going to be a challenge and so the idea

00:22:48,040 --> 00:22:53,140
of the reverse Conway maneuver is if you

00:22:50,170 --> 00:22:54,580
want a particular outcome with your

00:22:53,140 --> 00:22:56,080
software architecture and you want to

00:22:54,580 --> 00:22:58,600
build modern infrastructure and

00:22:56,080 --> 00:23:01,059
applications considered actually

00:22:58,600 --> 00:23:03,190
changing your organization in advance

00:23:01,059 --> 00:23:05,140
maybe bringing people from these

00:23:03,190 --> 00:23:07,679
separate teams to work together in a new

00:23:05,140 --> 00:23:11,320
platform team do that in advance and

00:23:07,679 --> 00:23:13,150
then things like building deployments

00:23:11,320 --> 00:23:14,830
and building mo files together for

00:23:13,150 --> 00:23:17,200
kubernetes will be much more

00:23:14,830 --> 00:23:18,370
straightforward so highly recommend this

00:23:17,200 --> 00:23:22,630
book I think you'll find it really

00:23:18,370 --> 00:23:27,540
interesting and it was a great read but

00:23:22,630 --> 00:23:27,540
on top of that you know kubernetes is

00:23:29,940 --> 00:23:35,290
also best if you adopt some new ways of

00:23:33,220 --> 00:23:37,690
working so I want to introduce making

00:23:35,290 --> 00:23:39,460
work visible and this is by a woman

00:23:37,690 --> 00:23:42,100
named Dominica de grandness I've had the

00:23:39,460 --> 00:23:45,160
pleasure of meeting her at a couple of

00:23:42,100 --> 00:23:48,820
conferences and she's really a

00:23:45,160 --> 00:23:51,130
world-class expert in modern ways of

00:23:48,820 --> 00:23:55,059
working and she goes through and talks

00:23:51,130 --> 00:23:58,000
about the traditional time thieves in

00:23:55,059 --> 00:24:01,750
organization things like unplanned work

00:23:58,000 --> 00:24:04,900
and repetitive work and so you know

00:24:01,750 --> 00:24:10,270
we've already talked about how silos and

00:24:04,900 --> 00:24:11,980
kubernetes don't mix well we've you know

00:24:10,270 --> 00:24:14,140
had a look at that but even if you bring

00:24:11,980 --> 00:24:15,490
the team together you're going to want

00:24:14,140 --> 00:24:18,309
to look at new

00:24:15,490 --> 00:24:20,710
ways of working and this kind of brings

00:24:18,309 --> 00:24:22,960
us to this point of talking about why

00:24:20,710 --> 00:24:26,230
declarative work may be better than

00:24:22,960 --> 00:24:28,420
imperative and so particularly in

00:24:26,230 --> 00:24:31,210
programming languages in the past we

00:24:28,420 --> 00:24:33,370
would often specify all the individual

00:24:31,210 --> 00:24:36,460
mechanics and directions of how to

00:24:33,370 --> 00:24:39,280
perform a task whereas new declarative

00:24:36,460 --> 00:24:41,800
models say here is the end state that

00:24:39,280 --> 00:24:42,190
I'd like something to be keep it that

00:24:41,800 --> 00:24:45,220
way

00:24:42,190 --> 00:24:47,020
and so kubernetes is really interesting

00:24:45,220 --> 00:24:49,780
in this regard because it uses a

00:24:47,020 --> 00:24:52,660
declarative model or at least it prefers

00:24:49,780 --> 00:24:55,480
that you can make some imperative

00:24:52,660 --> 00:24:58,120
commands but the idea behind kubernetes

00:24:55,480 --> 00:25:00,460
is that you're you're making declarative

00:24:58,120 --> 00:25:02,470
calls to an API and saying my deployment

00:25:00,460 --> 00:25:04,090
my application in its running state

00:25:02,470 --> 00:25:06,700
should look this way please keep it that

00:25:04,090 --> 00:25:08,559
way and so for that reason I'm excited

00:25:06,700 --> 00:25:10,900
about kubernetes trees I think it's

00:25:08,559 --> 00:25:13,630
gonna be able to help you eliminate

00:25:10,900 --> 00:25:16,240
manual work it's going to help you

00:25:13,630 --> 00:25:17,770
eliminate repetitive toil in your teams

00:25:16,240 --> 00:25:21,850
and these are the things that make

00:25:17,770 --> 00:25:24,010
people enjoy their jobs less and if if

00:25:21,850 --> 00:25:26,620
folks get to spend their time solving

00:25:24,010 --> 00:25:30,309
hard problems and really having their

00:25:26,620 --> 00:25:31,660
minds stretched and challenged work

00:25:30,309 --> 00:25:33,309
tends to be more interesting and

00:25:31,660 --> 00:25:35,920
exciting if you're doing the same

00:25:33,309 --> 00:25:38,380
drudgery over and over again just you

00:25:35,920 --> 00:25:41,679
know toil and work that doesn't really

00:25:38,380 --> 00:25:43,390
engage your mind your your level of

00:25:41,679 --> 00:25:46,510
engagement your level of productivity

00:25:43,390 --> 00:25:49,600
tends to suffer over time so on top of

00:25:46,510 --> 00:25:52,300
the aspects we've looked at I like this

00:25:49,600 --> 00:25:56,170
idea that as you're maybe adopting a new

00:25:52,300 --> 00:25:58,540
organizational style or or even

00:25:56,170 --> 00:26:00,580
structure that you also think of

00:25:58,540 --> 00:26:01,840
adopting some new ways of working and I

00:26:00,580 --> 00:26:04,120
think if you're looking in this

00:26:01,840 --> 00:26:05,710
direction this book here from Dominica

00:26:04,120 --> 00:26:10,510
de grande is called making work visible

00:26:05,710 --> 00:26:13,140
is an excellent place to start so let's

00:26:10,510 --> 00:26:16,270
look at our fifth aspect which is really

00:26:13,140 --> 00:26:20,490
is kubernetes strategic in itself are

00:26:16,270 --> 00:26:23,020
you going to achieve business outcomes

00:26:20,490 --> 00:26:24,880
simply by adopting kubernetes I would

00:26:23,020 --> 00:26:28,330
argue no

00:26:24,880 --> 00:26:29,620
why not well your customers likely won't

00:26:28,330 --> 00:26:33,340
or don't care that you're running

00:26:29,620 --> 00:26:34,990
kubernetes they are customers of your

00:26:33,340 --> 00:26:37,750
organization because of the value you

00:26:34,990 --> 00:26:38,980
add for them they may interact with that

00:26:37,750 --> 00:26:40,900
value through a mobile application

00:26:38,980 --> 00:26:44,430
through a website through a call center

00:26:40,900 --> 00:26:47,080
through in-person shops or branches but

00:26:44,430 --> 00:26:48,730
they interact with you because of the

00:26:47,080 --> 00:26:50,470
value you add for them because of the

00:26:48,730 --> 00:26:53,140
products and services that they enjoy

00:26:50,470 --> 00:26:54,880
from you not because of what's running

00:26:53,140 --> 00:26:56,710
in your data center unless you are a

00:26:54,880 --> 00:26:58,720
native center company or a kubernetes

00:26:56,710 --> 00:27:00,790
company selling kubernetes itself and

00:26:58,720 --> 00:27:03,250
that's your product kubernetes is

00:27:00,790 --> 00:27:06,040
probably not in itself a strategic

00:27:03,250 --> 00:27:08,440
outcome for your organization and so my

00:27:06,040 --> 00:27:12,520
colleague James waters who's our tenzou

00:27:08,440 --> 00:27:15,220
CTO in Palo Alto he talked about this

00:27:12,520 --> 00:27:17,170
concept of the value line and you know

00:27:15,220 --> 00:27:19,270
above the value line are things in your

00:27:17,170 --> 00:27:22,270
organization that your customers

00:27:19,270 --> 00:27:24,820
actually interact with see use care

00:27:22,270 --> 00:27:27,400
about below the value line are things

00:27:24,820 --> 00:27:29,470
that are not as important to the

00:27:27,400 --> 00:27:31,270
customer in terms of visibility but

00:27:29,470 --> 00:27:33,220
still very important to make sure that

00:27:31,270 --> 00:27:37,690
things above the value line actually

00:27:33,220 --> 00:27:41,140
work so the strategic play around things

00:27:37,690 --> 00:27:43,660
like infrastructure and things like

00:27:41,140 --> 00:27:46,000
kubernetes even though kubernetes is so

00:27:43,660 --> 00:27:48,820
important to improving the efficiency

00:27:46,000 --> 00:27:52,830
and the ability to deliver faster

00:27:48,820 --> 00:27:55,750
technology better safer happier um it is

00:27:52,830 --> 00:27:57,730
not a strategic outcome on its own I

00:27:55,750 --> 00:28:00,010
would argue so because it won't

00:27:57,730 --> 00:28:03,040
differentiate you against your peers

00:28:00,010 --> 00:28:04,510
simply to be running kubernetes my

00:28:03,040 --> 00:28:07,360
suggestion is you consider buying

00:28:04,510 --> 00:28:10,660
kubernetes from a trusted partner rather

00:28:07,360 --> 00:28:12,700
than building it you know at VMware

00:28:10,660 --> 00:28:14,080
we're biased in that we would like you

00:28:12,700 --> 00:28:16,630
to come and have a conversation with us

00:28:14,080 --> 00:28:18,160
and buy it from us if you decide to if

00:28:16,630 --> 00:28:19,750
you decide you want to build it we have

00:28:18,160 --> 00:28:21,490
some interesting consulting services as

00:28:19,750 --> 00:28:24,340
well but this is not particularly a

00:28:21,490 --> 00:28:25,720
sales pitch this would be advice I'd

00:28:24,340 --> 00:28:27,880
give anyone in the industry whether

00:28:25,720 --> 00:28:31,540
they're our customer or not that I think

00:28:27,880 --> 00:28:33,580
building DIY infrastructure stacks

00:28:31,540 --> 00:28:37,660
yourself the long-term costs of running

00:28:33,580 --> 00:28:38,300
it away the upfront costs of buying a

00:28:37,660 --> 00:28:41,090
well can

00:28:38,300 --> 00:28:43,730
structured curated platform from a

00:28:41,090 --> 00:28:47,930
trusted partner so that kind of wraps up

00:28:43,730 --> 00:28:49,430
our our five aspects let's let's look at

00:28:47,930 --> 00:28:52,000
some ways that you can get started by

00:28:49,430 --> 00:28:54,980
way of kind of wrapping this talk of um

00:28:52,000 --> 00:28:58,460
you know I would say you want to start

00:28:54,980 --> 00:28:59,810
small and iterate the days of Big Bang

00:28:58,460 --> 00:29:02,180
approaches where you say we're gonna

00:28:59,810 --> 00:29:03,980
spend a year building an all-singing

00:29:02,180 --> 00:29:06,470
all-dancing platform but no one's gonna

00:29:03,980 --> 00:29:08,930
get any value or any access to the

00:29:06,470 --> 00:29:10,700
platform for a year don't do that so you

00:29:08,930 --> 00:29:13,300
can build in a month get some feedback

00:29:10,700 --> 00:29:16,370
as you build from your developers and

00:29:13,300 --> 00:29:18,080
see what you can build and iterate on to

00:29:16,370 --> 00:29:20,630
build a working platform that's

00:29:18,080 --> 00:29:22,820
delivering value sooner and then as you

00:29:20,630 --> 00:29:25,970
look at your organization consider

00:29:22,820 --> 00:29:28,220
seeding a small kubernetes platform team

00:29:25,970 --> 00:29:30,020
maybe go read the team topologies book

00:29:28,220 --> 00:29:32,150
have a few people in your organization

00:29:30,020 --> 00:29:34,370
read it and really look at the value

00:29:32,150 --> 00:29:36,080
that the world's best companies these

00:29:34,370 --> 00:29:38,060
days are getting from this idea of

00:29:36,080 --> 00:29:39,980
platform engineering and bringing

00:29:38,060 --> 00:29:41,480
cross-functional people together from

00:29:39,980 --> 00:29:44,960
various parts of your technology

00:29:41,480 --> 00:29:47,450
organization and then I would say read

00:29:44,960 --> 00:29:50,540
accelerate read doctor for Sprint and

00:29:47,450 --> 00:29:52,250
her collaborators work and look at the

00:29:50,540 --> 00:29:55,120
big four metrics as your high-level

00:29:52,250 --> 00:29:55,120
scorecard

00:29:55,330 --> 00:30:03,110
if you agree that kubernetes while it's

00:30:00,920 --> 00:30:04,820
really important to improving efficiency

00:30:03,110 --> 00:30:07,490
in your organization it's probably not a

00:30:04,820 --> 00:30:09,140
strategic outcome on its own it's not

00:30:07,490 --> 00:30:10,760
something that is going to differentiate

00:30:09,140 --> 00:30:12,860
you in the marketplace because you're

00:30:10,760 --> 00:30:15,880
running it then go choose an enterprise

00:30:12,860 --> 00:30:18,380
partner who can help you get to running

00:30:15,880 --> 00:30:21,290
meaningful apps in production faster and

00:30:18,380 --> 00:30:24,410
then the other thing I'd say is consider

00:30:21,290 --> 00:30:27,440
multi cloud from day one cloud you know

00:30:24,410 --> 00:30:30,560
we think of now as everywhere from your

00:30:27,440 --> 00:30:32,270
data center to a public cloud all the

00:30:30,560 --> 00:30:34,220
way to the edge and with the emergence

00:30:32,270 --> 00:30:36,260
of 5g we think there's going to be a lot

00:30:34,220 --> 00:30:38,660
more interesting applications that the

00:30:36,260 --> 00:30:39,650
huge bandwidth increase of 5g is going

00:30:38,660 --> 00:30:41,270
to run and there's going to be a lot

00:30:39,650 --> 00:30:43,670
more applications that need to run a

00:30:41,270 --> 00:30:45,290
process data right at the edge who any

00:30:43,670 --> 00:30:46,700
says an interesting part to play there

00:30:45,290 --> 00:30:50,180
as well

00:30:46,700 --> 00:30:52,970
and so as I wrap up I want to leave you

00:30:50,180 --> 00:30:55,040
with this quote from someone I really

00:30:52,970 --> 00:30:56,630
look up to John smart at Deloitte in the

00:30:55,040 --> 00:30:59,690
UK said if you want to be an agile

00:30:56,630 --> 00:31:02,360
transformation don't focus on better

00:30:59,690 --> 00:31:05,630
value sooner safer and happier you will

00:31:02,360 --> 00:31:08,900
end up transforming to have agility so

00:31:05,630 --> 00:31:10,550
with that I thank you very much thanks

00:31:08,900 --> 00:31:13,840
to the organizers for inviting me and

00:31:10,550 --> 00:31:13,840

YouTube URL: https://www.youtube.com/watch?v=Ur65X6NLVKk


