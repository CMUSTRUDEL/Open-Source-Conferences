Title: ko - zero-config tool for deploying Go app on k8s - Stanley Nguyen
Publication date: 2020-03-25
Playlist: FOSSASIA Summit 2020 - Cloud
Description: 
	ko - zero-config tool for deploying Go app on k8s.ko leverages on opinionated import-path approach of Go to simplify the whole process of building binary + building container image + publishing image + apply to k8s into a one-liner command

FOSSASIA Summit 2020 - Cloud

Speaker: Stanley Nguyen, Software Engineer Xendit
Captions: 
	00:00:01,129 --> 00:00:09,179
cool oh yeah oh hey hi so I'm here today

00:00:07,109 --> 00:00:11,190
to present about one of the hidden gem

00:00:09,179 --> 00:00:17,220
that I found out during Oktoberfest is

00:00:11,190 --> 00:00:19,560
called co2 so before we begin just a

00:00:17,220 --> 00:00:21,510
little bit about myself I'm Stanley I'm

00:00:19,560 --> 00:00:23,160
currently working for Sandy we're

00:00:21,510 --> 00:00:26,760
building pavement infrastructure for

00:00:23,160 --> 00:00:29,400
Southeast Asia in my freedom I helped

00:00:26,760 --> 00:00:32,669
organize go Singapore so and I deliver

00:00:29,400 --> 00:00:36,329
my application to with go and not using

00:00:32,669 --> 00:00:39,390
a doctor and communities yep so logistic

00:00:36,329 --> 00:00:41,670
of the way ah what is Co exactly Co is

00:00:39,390 --> 00:00:44,700
two for building and deploying go

00:00:41,670 --> 00:00:46,860
application to communities it's built

00:00:44,700 --> 00:00:50,190
around go important path Convention

00:00:46,860 --> 00:00:52,800
which I will explain later how is how is

00:00:50,190 --> 00:00:54,930
mirror that but before that let's take a

00:00:52,800 --> 00:00:58,079
deep dive into the problem that is made

00:00:54,930 --> 00:01:00,199
for so I'm assuming that most of us in

00:00:58,079 --> 00:01:03,239
the audience would be familiar with with

00:01:00,199 --> 00:01:05,430
containerization and doctor for those

00:01:03,239 --> 00:01:07,439
who don't know what containerization is

00:01:05,430 --> 00:01:09,479
is basically a technique of bundling or

00:01:07,439 --> 00:01:11,820
your application components with these

00:01:09,479 --> 00:01:16,439
dependencies and configuration and

00:01:11,820 --> 00:01:19,380
runtime etc in a self content modules to

00:01:16,439 --> 00:01:21,780
be run in a host machine so the basic

00:01:19,380 --> 00:01:25,500
process of docker izing a go application

00:01:21,780 --> 00:01:29,759
is to deploy on into communities first

00:01:25,500 --> 00:01:31,049
to B go B then go then dr. B and then

00:01:29,759 --> 00:01:33,180
you push the docker image to a

00:01:31,049 --> 00:01:36,930
reposition to a doctor repository and

00:01:33,180 --> 00:01:41,460
then you can finally keep control apply

00:01:36,930 --> 00:01:43,979
into your community clusters so fast

00:01:41,460 --> 00:01:46,110
forward to the edge of micro services we

00:01:43,979 --> 00:01:48,630
have to manage like tons and tons of

00:01:46,110 --> 00:01:50,970
different views each one each one has

00:01:48,630 --> 00:01:52,979
its own sets of doctor files things

00:01:50,970 --> 00:01:55,290
starts to grow out of control and with

00:01:52,979 --> 00:01:59,250
lots and lots of configurations in forms

00:01:55,290 --> 00:02:00,899
of doctor thousand Yama files now some

00:01:59,250 --> 00:02:02,540
of you might be thinking that tools like

00:02:00,899 --> 00:02:06,630
scuffle or

00:02:02,540 --> 00:02:08,879
McFaul can rep this process of four

00:02:06,630 --> 00:02:10,440
different languages and doctor files to

00:02:08,879 --> 00:02:13,740
make process this process more

00:02:10,440 --> 00:02:15,540
manageable and faster but as application

00:02:13,740 --> 00:02:19,650
developers we would still need to write

00:02:15,540 --> 00:02:23,540
a lot of doctor files and tip licky more

00:02:19,650 --> 00:02:27,030
JAMA fail to describe the orchestration

00:02:23,540 --> 00:02:28,710
they say patterns here that I have

00:02:27,030 --> 00:02:31,710
observed for optimization and

00:02:28,710 --> 00:02:34,980
development effort is a major pinpoint

00:02:31,710 --> 00:02:37,500
that localization is too invasive in my

00:02:34,980 --> 00:02:40,500
development environment requiring lot of

00:02:37,500 --> 00:02:42,360
effort for configuration I'm not saying

00:02:40,500 --> 00:02:44,520
that this is not necessary though

00:02:42,360 --> 00:02:46,890
because at times we need to carefully

00:02:44,520 --> 00:02:49,950
handcraft our talk of house for like

00:02:46,890 --> 00:02:53,990
customization for business requirements

00:02:49,950 --> 00:02:58,260
but at other times mostly my XRD will

00:02:53,990 --> 00:03:02,190
deliver in the same configurations for

00:02:58,260 --> 00:03:05,040
majority of the micro services so code

00:03:02,190 --> 00:03:07,290
is targeting to solve problems for this

00:03:05,040 --> 00:03:10,350
group of users by providing a way to

00:03:07,290 --> 00:03:12,510
eliminate needs for view and deploys

00:03:10,350 --> 00:03:14,400
configuration to eventually make

00:03:12,510 --> 00:03:16,470
containers invents invisible

00:03:14,400 --> 00:03:19,860
infrastructures and one less thing that

00:03:16,470 --> 00:03:24,960
application developers like us worry

00:03:19,860 --> 00:03:26,610
about so this is a new model of our

00:03:24,960 --> 00:03:28,620
deployment process that Co is

00:03:26,610 --> 00:03:31,290
constructing instead of having multiple

00:03:28,620 --> 00:03:32,910
doctor Faust building images from each

00:03:31,290 --> 00:03:34,890
one of them and pulling from the

00:03:32,910 --> 00:03:36,750
published repo and deploy to Cuba

00:03:34,890 --> 00:03:38,970
Nettie's cluster we just need a

00:03:36,750 --> 00:03:41,490
one-liner that will handle everything to

00:03:38,970 --> 00:03:45,210
get our micro services up and running in

00:03:41,490 --> 00:03:48,120
the clusters this is particularly useful

00:03:45,210 --> 00:03:50,520
for K native because you have like a

00:03:48,120 --> 00:03:53,370
very large number of containerized

00:03:50,520 --> 00:03:57,210
images and as a matter of fact Co was

00:03:53,370 --> 00:03:59,400
actually made for K native but and it

00:03:57,210 --> 00:04:01,650
used to live inside one of the creatives

00:03:59,400 --> 00:04:04,470
repositories before being extracted out

00:04:01,650 --> 00:04:08,550
into a separate repo as a standalone

00:04:04,470 --> 00:04:10,320
tools okay cool so that is the problem

00:04:08,550 --> 00:04:12,360
that Co is trying to solve so how does

00:04:10,320 --> 00:04:14,640
cough achieve this zero conflict

00:04:12,360 --> 00:04:17,070
deployment workflow so it's links into

00:04:14,640 --> 00:04:19,830
the NGO idioms of to simplify the whole

00:04:17,070 --> 00:04:23,100
process and eliminate configurations in

00:04:19,830 --> 00:04:25,260
the same way that go get comment install

00:04:23,100 --> 00:04:27,600
binaries into your local machine using

00:04:25,260 --> 00:04:29,640
import path Co use

00:04:27,600 --> 00:04:32,820
go import past to refer to the comment

00:04:29,640 --> 00:04:35,420
that would start your containers so our

00:04:32,820 --> 00:04:40,350
concerns are now simplified from dr. B

00:04:35,420 --> 00:04:45,060
Locker push plus dr. publish Q Bonetti

00:04:40,350 --> 00:04:48,210
applies into chesco so I'm gonna go into

00:04:45,060 --> 00:04:52,350
some of the components that make Co

00:04:48,210 --> 00:04:55,260
possible and also its features Co

00:04:52,350 --> 00:04:57,890
publishes co-published simply boots and

00:04:55,260 --> 00:05:00,930
publishes images for each important past

00:04:57,890 --> 00:05:03,120
passed as an argument the main function

00:05:00,930 --> 00:05:05,340
of the program has been a path for code

00:05:03,120 --> 00:05:08,220
to billion publisher in gold local

00:05:05,340 --> 00:05:10,440
containers that contain the binaries no

00:05:08,220 --> 00:05:16,050
publish also support relatives import

00:05:10,440 --> 00:05:19,680
path in the context of a go path repo so

00:05:16,050 --> 00:05:21,960
where does Co publishes image to it will

00:05:19,680 --> 00:05:24,450
publish to a local doctor repo by

00:05:21,960 --> 00:05:27,060
default but we can we can set that by

00:05:24,450 --> 00:05:30,210
using this environment variable Kodaka

00:05:27,060 --> 00:05:32,490
repo so the reason that it's being

00:05:30,210 --> 00:05:35,160
extracted into a environment variable is

00:05:32,490 --> 00:05:36,660
because for different developers or like

00:05:35,160 --> 00:05:39,420
different built environment we want to

00:05:36,660 --> 00:05:41,430
publish into different local

00:05:39,420 --> 00:05:44,790
repositories so this should be an

00:05:41,430 --> 00:05:47,610
environment variable for that reason so

00:05:44,790 --> 00:05:49,800
the next component is Co resolve so it

00:05:47,610 --> 00:05:54,510
will basically take a Cuban at East Java

00:05:49,800 --> 00:05:56,720
file in the same way as que apply and

00:05:54,510 --> 00:05:59,490
then determines the go path to be

00:05:56,720 --> 00:06:02,190
localized and publish so the output of

00:05:59,490 --> 00:06:06,110
this is not to apply on a Cuban at east

00:06:02,190 --> 00:06:07,800
cluster but to output a string of

00:06:06,110 --> 00:06:11,010
Konkani Tiamo

00:06:07,800 --> 00:06:15,960
with past go past replaced by the

00:06:11,010 --> 00:06:18,690
published image hash digests sorry yeah

00:06:15,960 --> 00:06:21,960
so the final piece of the puzzle is Co

00:06:18,690 --> 00:06:25,530
apply so it's basically parallel to K

00:06:21,960 --> 00:06:28,050
apply if you use Cuban it is acting on

00:06:25,530 --> 00:06:30,810
the same output from Korres quarries of

00:06:28,050 --> 00:06:33,000
so as developer make changes in the Clos

00:06:30,810 --> 00:06:36,570
application they can just do a CO apply

00:06:33,000 --> 00:06:40,599
to to rapidly reboot and reboot and

00:06:36,570 --> 00:06:42,819
redeploy into their development clusters

00:06:40,599 --> 00:06:45,279
and last but not least we have Cody Lee

00:06:42,819 --> 00:06:46,979
which is a convenient rapper for kdd

00:06:45,279 --> 00:06:50,499
yeah

00:06:46,979 --> 00:06:51,909
okay so welcomes to be to have zero

00:06:50,499 --> 00:06:53,740
conflict there are times where we would

00:06:51,909 --> 00:06:56,619
still want to overwrite some of the

00:06:53,740 --> 00:07:01,300
default behaviors so this is this where

00:06:56,619 --> 00:07:04,629
cochamo comes in handy in cochamo

00:07:01,300 --> 00:07:06,879
we have two options just to yeah we try

00:07:04,629 --> 00:07:08,499
to have the least configuration as

00:07:06,879 --> 00:07:11,339
possible so the first one is the four

00:07:08,499 --> 00:07:15,699
based image by default code would be

00:07:11,339 --> 00:07:18,719
image just from a nice flawless image

00:07:15,699 --> 00:07:22,119
and but then we can replace that with a

00:07:18,719 --> 00:07:24,159
base image of our choice or we can even

00:07:22,119 --> 00:07:28,869
overwrite for each of the import paths

00:07:24,159 --> 00:07:31,599
individually so now some of you might be

00:07:28,869 --> 00:07:33,729
wondering that we how do we include

00:07:31,599 --> 00:07:37,269
static assets into our application

00:07:33,729 --> 00:07:39,550
because that's important isn't it code

00:07:37,269 --> 00:07:42,629
data path environment variable is the

00:07:39,550 --> 00:07:45,849
answer to this or content inside this

00:07:42,629 --> 00:07:47,439
path will be copy into your images and

00:07:45,849 --> 00:07:51,580
make available under the same

00:07:47,439 --> 00:07:54,189
environment variable so this is actually

00:07:51,580 --> 00:07:58,689
another go idiom it draws from the same

00:07:54,189 --> 00:08:00,579
idiom as growth path data so we're test

00:07:58,689 --> 00:08:03,639
data will be included and made available

00:08:00,579 --> 00:08:05,979
for go test code data is included and

00:08:03,639 --> 00:08:10,569
made available for Co deploy

00:08:05,979 --> 00:08:12,839
applications so let's go into the cool

00:08:10,569 --> 00:08:12,839
stuff

00:08:50,779 --> 00:09:04,050
right so okay so I'm gonna okay so what

00:08:58,410 --> 00:09:06,389
my I have five application in my faster

00:09:04,050 --> 00:09:13,620
than what I decoded using doctor first

00:09:06,389 --> 00:09:18,720
not going cube a control issue of my

00:09:13,620 --> 00:09:23,880
services issue my services head has a

00:09:18,720 --> 00:09:26,209
deployment from from these are with this

00:09:23,880 --> 00:09:32,750
go application and then expose through a

00:09:26,209 --> 00:09:41,569
service so to deploy this application

00:09:32,750 --> 00:09:41,569
first okay I will need to do a oh oh

00:09:42,079 --> 00:09:49,730
he's only I need to do a dr. B and tag

00:09:46,440 --> 00:09:49,730
it with my

00:09:52,440 --> 00:10:05,550
the image that I want to publish s is it

00:09:57,010 --> 00:10:10,680
clear the text I think if I change it to

00:10:05,550 --> 00:10:10,680
hang on let me just change it to my

00:10:17,820 --> 00:10:35,850
oh B blu-ray oh sure okay

00:10:28,050 --> 00:10:38,970
is it better now nice alright okay so

00:10:35,850 --> 00:10:44,010
basically it's building the halo Earth

00:10:38,970 --> 00:10:45,780
image and then okay so let me just go

00:10:44,010 --> 00:10:47,910
through each of the doctor file so these

00:10:45,780 --> 00:10:51,600
these like my handcrafted doctor file

00:10:47,910 --> 00:10:55,440
that I normally used to deploy my non my

00:10:51,600 --> 00:10:59,460
conventional no doctor image for go

00:10:55,440 --> 00:11:00,990
application yeah so why is publishing

00:10:59,460 --> 00:11:01,860
I'm just gonna quickly go through the

00:11:00,990 --> 00:11:06,540
application

00:11:01,860 --> 00:11:11,580
so this basically serve a HTML string

00:11:06,540 --> 00:11:16,490
and an image so even in my dog opee

00:11:11,580 --> 00:11:18,840
I'm trying to mirror the code data path

00:11:16,490 --> 00:11:23,040
it's just because I'm lazy and I don't

00:11:18,840 --> 00:11:26,910
want to write so different two different

00:11:23,040 --> 00:11:35,720
static conflict for each okay so now we

00:11:26,910 --> 00:11:47,070
can doc a publish oh

00:11:35,720 --> 00:11:53,730
it okay push sorry then because these

00:11:47,070 --> 00:11:56,430
are very Diaz I'm just gonna run a mix

00:11:53,730 --> 00:11:58,940
out that will be when push all these

00:11:56,430 --> 00:11:58,940
images

00:12:17,900 --> 00:12:24,830
so yeah eating

00:12:31,300 --> 00:12:42,640
I think I can start singing as these

00:12:34,330 --> 00:12:51,850
taking forever ha ha so uh just showing

00:12:42,640 --> 00:12:55,360
your that let me just open my let me

00:12:51,850 --> 00:13:08,800
just open my doctor up and show you how

00:12:55,360 --> 00:13:12,190
the publish image so all my images are

00:13:08,800 --> 00:13:16,690
being published oh I think they're ugly

00:13:12,190 --> 00:13:25,600
I think I do publish mostly what one

00:13:16,690 --> 00:13:29,880
more thing come on come on sorry I

00:13:25,600 --> 00:13:29,880
should have reduced it to tree services

00:13:50,510 --> 00:14:03,560
you publishing yeah so just showing you

00:14:00,170 --> 00:14:07,240
that there's no free push images so I'm

00:14:03,560 --> 00:14:07,240
actually doing everything from scratch

00:14:07,630 --> 00:14:10,630
yeah

00:14:14,590 --> 00:14:24,400
lucky that my images are liked so you

00:14:20,210 --> 00:14:24,400
don't have to live with another hour

00:14:25,270 --> 00:14:33,320
okay cool so all the images have been

00:14:28,700 --> 00:14:38,150
published now I can do a me a que apply

00:14:33,320 --> 00:14:40,310
oh I'm using mini coop behind the scene

00:14:38,150 --> 00:14:41,960
by the way yeah but I just started like

00:14:40,310 --> 00:14:45,500
before the top because it takes forever

00:14:41,960 --> 00:14:47,800
to start cool so I have all my services

00:14:45,500 --> 00:14:52,910
up and running now I'm gonna show you

00:14:47,800 --> 00:14:59,300
okay oh shoot sorry

00:14:52,910 --> 00:15:01,660
Oh my services are running so I will

00:14:59,300 --> 00:15:05,529
open one of them

00:15:01,660 --> 00:15:07,120
that's probably let's travel to Earth oh

00:15:05,529 --> 00:15:20,540


00:15:07,120 --> 00:15:24,290
why is it not oh yes it was so but that

00:15:20,540 --> 00:15:26,470
was lots and lots of a of it right okay

00:15:24,290 --> 00:15:29,030
now I'm gonna bring down everything and

00:15:26,470 --> 00:15:31,540
show you how I can I could do that with

00:15:29,030 --> 00:15:31,540
coal

00:15:31,930 --> 00:15:41,180
so all of those of those handcrafted

00:15:36,980 --> 00:15:47,450
doctor image and hard work in publishing

00:15:41,180 --> 00:15:51,760
can be safe with coal okay and I don't

00:15:47,450 --> 00:15:54,200
even need my dog demons to be running

00:15:51,760 --> 00:15:59,510
and fine

00:15:54,200 --> 00:16:03,950
yeah I'm gonna do it go apply oh yeah so

00:15:59,510 --> 00:16:07,910
I'm showing you my coal coal power Cuban

00:16:03,950 --> 00:16:15,700
it is llamo so I'm using my import path

00:16:07,910 --> 00:16:15,700
here yeah let's go oh sorry

00:16:24,720 --> 00:16:30,390
so is right now is running co-published

00:16:28,260 --> 00:16:34,140
so if you run co publish you would get

00:16:30,390 --> 00:16:36,630
these same messages publishing to these

00:16:34,140 --> 00:16:46,190
and then these images are being

00:16:36,630 --> 00:16:58,310
published here oh yeah sorry

00:16:46,190 --> 00:16:58,310
hey what happened Oh No

00:17:13,350 --> 00:17:16,819
sorry Murphy's Law

00:17:35,730 --> 00:17:38,360
what

00:17:46,140 --> 00:17:50,730
am I being blocked by the way fasten

00:17:55,440 --> 00:17:59,640
yeah but somehow

00:18:07,620 --> 00:18:10,370
oh man

00:18:16,609 --> 00:18:22,179
our deal lock in a yeah

00:18:34,690 --> 00:18:43,960
okay alright maybe I need this money now

00:18:40,730 --> 00:18:48,640
that I'm trying to publish to docker hub

00:18:43,960 --> 00:18:48,640
can run for me after all maybe

00:19:00,720 --> 00:19:07,239
but yeah bass coders and new doctor

00:19:04,570 --> 00:19:11,289
demons to be running to be its image

00:19:07,239 --> 00:19:15,299
because it's basically compressing the

00:19:11,289 --> 00:19:21,239
image by itself without using any darker

00:19:15,299 --> 00:19:21,239
functionalities yeah hopefully it works

00:19:32,960 --> 00:19:40,950
sure okay I'm gonna publish to my local

00:19:37,970 --> 00:19:48,500
local doctor a for instead now that it's

00:19:40,950 --> 00:19:48,500
not working with the three more one oh

00:19:52,070 --> 00:19:56,100
no I'm a is okay

00:19:54,330 --> 00:19:58,760
I was just demonstrate using my local

00:19:56,100 --> 00:19:58,760
doctor Abel

00:20:30,660 --> 00:20:38,100
okay cool so everything is all the

00:20:34,590 --> 00:20:43,220
deployment has been created if I get

00:20:38,100 --> 00:20:51,000
service of my application are being run

00:20:43,220 --> 00:20:55,410
and I can I would get the same nice

00:20:51,000 --> 00:20:59,520
travel to Venus yep

00:20:55,410 --> 00:21:03,630
so with Co it's just so a one-liner okay

00:20:59,520 --> 00:21:07,560
I had some trouble but if you count from

00:21:03,630 --> 00:21:09,540
where I when I publish to local

00:21:07,560 --> 00:21:13,070
reporting yeah it's just a one-liner in

00:21:09,540 --> 00:21:16,620
the end your you have your you have your

00:21:13,070 --> 00:21:19,410
cluster up and running so I think this

00:21:16,620 --> 00:21:22,200
is quite useful for me if I'm trying to

00:21:19,410 --> 00:21:25,770
like mirror the behavior of my remote

00:21:22,200 --> 00:21:28,710
clusters in my local so like I can

00:21:25,770 --> 00:21:32,450
quickly like reboot and and get

00:21:28,710 --> 00:21:37,560
everything running in without like much

00:21:32,450 --> 00:21:42,780
be pushing all that yeah so it can make

00:21:37,560 --> 00:21:44,460
make my development fastest I I would

00:21:42,780 --> 00:21:47,100
use this for my development but for

00:21:44,460 --> 00:21:49,530
actually deployment I I don't know about

00:21:47,100 --> 00:21:56,160
your technical requirements to recommend

00:21:49,530 --> 00:21:59,090
yeah but yeah that's cool so any

00:21:56,160 --> 00:21:59,090
questions

00:22:03,110 --> 00:22:12,090
all right oh oh actually oh

00:22:09,480 --> 00:22:15,780
you can just install it using go get and

00:22:12,090 --> 00:22:17,850
then yeah I must show you is I is

00:22:15,780 --> 00:22:22,080
written in go so it's pretty

00:22:17,850 --> 00:22:24,240
straightforward too so just go get to

00:22:22,080 --> 00:22:25,920
install the comment and you have

00:22:24,240 --> 00:22:30,990
everything yeah

00:22:25,920 --> 00:22:33,150
is a go application I mean go comment

00:22:30,990 --> 00:22:35,160
like application yeah but yeah you just

00:22:33,150 --> 00:22:39,600
need to do this and you're done

00:22:35,160 --> 00:22:43,380
No so like yeah they try to make it as

00:22:39,600 --> 00:22:47,160
simple as possible alright to get it up

00:22:43,380 --> 00:22:48,390
and running in everything so for the

00:22:47,160 --> 00:22:50,430
benefit of the online audience who might

00:22:48,390 --> 00:22:52,290
not be reading the chat we do have half

00:22:50,430 --> 00:22:55,670
a dozen watches any questions so Stanley

00:22:52,290 --> 00:22:55,670
you can put it directly into the chat

00:23:00,950 --> 00:23:06,800
all right okay cool

00:23:04,070 --> 00:23:09,390
brilliant and no questions in the room

00:23:06,800 --> 00:23:13,320
silence it's so awesome there's nothing

00:23:09,390 --> 00:23:16,160
left to ask Thank You Stanley

00:23:13,320 --> 00:23:16,160

YouTube URL: https://www.youtube.com/watch?v=UrDAZuW3OTs


