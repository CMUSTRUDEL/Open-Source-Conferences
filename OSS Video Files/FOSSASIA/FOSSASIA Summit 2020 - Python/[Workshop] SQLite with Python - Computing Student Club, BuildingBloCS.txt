Title: [Workshop] SQLite with Python - Computing Student Club, BuildingBloCS
Publication date: 2020-04-03
Playlist: FOSSASIA Summit 2020 - Python
Description: 
	FOSSASIA Summit 2020 - Python

Speaker: Computing Student Club, BuildingBloCS

BuildingBloCS is a coalition of high school Computing students
Captions: 
	00:00:02,570 --> 00:00:09,170
I'm amber my name is yang yeah so um

00:00:06,470 --> 00:00:13,820
before we begin can you go to the link

00:00:09,170 --> 00:00:15,380
at the bottom left of the screen yeah so

00:00:13,820 --> 00:00:17,029
that's what we'll be putting all the

00:00:15,380 --> 00:00:26,390
resources that we'll be using for the

00:00:17,029 --> 00:00:28,630
following workshop yes and you can place

00:00:26,390 --> 00:00:28,630
like

00:00:49,140 --> 00:00:54,989
okay - give us a minute will give you

00:00:51,280 --> 00:00:54,989
the tenure or shortly

00:01:12,729 --> 00:01:17,450
okay y'all will be able to access the

00:01:15,320 --> 00:01:20,150
Google Drive through the link that we

00:01:17,450 --> 00:01:24,680
have just sent yes it's tinyurl.com

00:01:20,150 --> 00:01:27,110
slash SQLite for Asia yeah so um moving

00:01:24,680 --> 00:01:30,560
on I go and do a quick introduction okay

00:01:27,110 --> 00:01:32,720
so I shall introduce myself my name is

00:01:30,560 --> 00:01:38,060
Jung and I have just recently graduated

00:01:32,720 --> 00:01:40,040
from drunken EJC and in a week's time

00:01:38,060 --> 00:01:43,520
I'm going to suffer national service so

00:01:40,040 --> 00:01:46,550
that's one why doing my free time is um

00:01:43,520 --> 00:01:48,020
I mean I have other hobbies too but then

00:01:46,550 --> 00:01:50,899
one of my interest is in computer

00:01:48,020 --> 00:01:52,909
science and because of this interest I

00:01:50,899 --> 00:01:56,659
have actually taken computing in my all

00:01:52,909 --> 00:01:58,880
levels in JCCC and aside from that I've

00:01:56,659 --> 00:02:01,069
also participated in multiple other

00:01:58,880 --> 00:02:05,080
events one of it being building blocks

00:02:01,069 --> 00:02:08,810
last year and I've also joined other

00:02:05,080 --> 00:02:12,319
competitions and stuff last last year I

00:02:08,810 --> 00:02:13,640
was doing a junior college and yeah

00:02:12,319 --> 00:02:17,000
these are some of the pictures of the

00:02:13,640 --> 00:02:19,250
events that I've attended last year yeah

00:02:17,000 --> 00:02:23,150
I shall pass over a burner to introduce

00:02:19,250 --> 00:02:25,220
yourself as well yes so hi I'm amber so

00:02:23,150 --> 00:02:28,519
I'm currently studying in diamond high

00:02:25,220 --> 00:02:33,530
as a j2 student so I'm taking a that was

00:02:28,519 --> 00:02:35,000
this year yay so I might also be a

00:02:33,530 --> 00:02:38,660
computer science degree just notice

00:02:35,000 --> 00:02:40,370
intensive program yeah and here's to

00:02:38,660 --> 00:02:43,730
computing is probably my best subject in

00:02:40,370 --> 00:02:46,100
school yes and I'll be involved in

00:02:43,730 --> 00:02:49,370
building blocks for this year as well

00:02:46,100 --> 00:02:51,290
yeah so here are some pictures so as you

00:02:49,370 --> 00:02:55,130
can see from the top picture that was me

00:02:51,290 --> 00:02:58,100
in the computing exam last week yes so

00:02:55,130 --> 00:02:59,840
I'll now be starting with our content so

00:02:58,100 --> 00:03:02,780
firstly please I'll show you how the

00:02:59,840 --> 00:03:05,269
following install on your laptop python

00:03:02,780 --> 00:03:08,060
version tree or leta and DB browser for

00:03:05,269 --> 00:03:10,250
SQLite so the download links for are

00:03:08,060 --> 00:03:12,140
these two software can be found in the

00:03:10,250 --> 00:03:15,230
Google Drive folder that we share

00:03:12,140 --> 00:03:16,720
earlier yeah so be covering databases

00:03:15,230 --> 00:03:20,780
and how they work

00:03:16,720 --> 00:03:21,599
SQLite Sri in Python and hands-on

00:03:20,780 --> 00:03:26,730
exercise

00:03:21,599 --> 00:03:28,829
and finally the dangers of SQL sofas are

00:03:26,730 --> 00:03:33,269
we talking about databases and how they

00:03:28,829 --> 00:03:35,219
work so firstly what is a database so

00:03:33,269 --> 00:03:38,150
usually a database is used to store

00:03:35,219 --> 00:03:41,519
critical data for an organization like

00:03:38,150 --> 00:03:44,159
private companies or the government so

00:03:41,519 --> 00:03:46,889
for example you can take the example of

00:03:44,159 --> 00:03:49,069
an e-commerce store so they will have a

00:03:46,889 --> 00:03:53,810
database to store the employee details

00:03:49,069 --> 00:03:56,459
product details as urls purchase details

00:03:53,810 --> 00:03:58,260
so basically in a database

00:03:56,459 --> 00:04:01,379
especially for a relational database

00:03:58,260 --> 00:04:03,199
model there'll be multiple tables such

00:04:01,379 --> 00:04:05,760
as the following

00:04:03,199 --> 00:04:08,400
yeah and that's how the data is stored

00:04:05,760 --> 00:04:11,280
so in actually in a relational database

00:04:08,400 --> 00:04:14,389
model which will be using for SQL like

00:04:11,280 --> 00:04:16,919
the tables will actually be linked by

00:04:14,389 --> 00:04:22,349
this thing called foreign keys which I

00:04:16,919 --> 00:04:24,030
will explain more later yeah so yeah

00:04:22,349 --> 00:04:26,400
each database will consist of one or

00:04:24,030 --> 00:04:29,370
more tables and each table will contain

00:04:26,400 --> 00:04:33,419
data for one type of information so

00:04:29,370 --> 00:04:34,800
basically one entity so on the ecommerce

00:04:33,419 --> 00:04:37,080
store database should contain the

00:04:34,800 --> 00:04:40,740
employee table which starts the

00:04:37,080 --> 00:04:42,960
information about employees such as yeah

00:04:40,740 --> 00:04:45,690
they put their roles their names all the

00:04:42,960 --> 00:04:47,610
accounting the product table which

00:04:45,690 --> 00:04:49,590
stores information for the products and

00:04:47,610 --> 00:04:53,220
the purchase table which stores

00:04:49,590 --> 00:04:56,039
information for the purchases so one

00:04:53,220 --> 00:04:58,590
very important concept in databases is

00:04:56,039 --> 00:05:01,380
normalization so we won't be going into

00:04:58,590 --> 00:05:03,930
this during our workshop but in the

00:05:01,380 --> 00:05:06,270
Google Drive their buildings to further

00:05:03,930 --> 00:05:08,550
explain what normalization is so

00:05:06,270 --> 00:05:11,099
basically the main function of it is to

00:05:08,550 --> 00:05:13,830
reduce data redundancy and improve data

00:05:11,099 --> 00:05:18,389
integrity to make the database more

00:05:13,830 --> 00:05:21,270
efficient so in a database there's this

00:05:18,389 --> 00:05:23,130
thing called keys so keys consists of

00:05:21,270 --> 00:05:24,690
one or more fields and basically if when

00:05:23,130 --> 00:05:27,750
you have the key you kind of unlock

00:05:24,690 --> 00:05:30,750
access to the table the first key is the

00:05:27,750 --> 00:05:33,270
primary key so this will be a unique key

00:05:30,750 --> 00:05:34,710
and is used to identify specific records

00:05:33,270 --> 00:05:38,490
or data in a table

00:05:34,710 --> 00:05:41,010
and this should not change over time the

00:05:38,490 --> 00:05:44,670
next key is called the secondary key so

00:05:41,010 --> 00:05:46,740
it's basically non primary fuse and then

00:05:44,670 --> 00:05:49,890
that's the composite key so this is

00:05:46,740 --> 00:05:52,410
basically when one a singular view is

00:05:49,890 --> 00:05:55,410
not sufficient to provide a primary key

00:05:52,410 --> 00:06:01,380
so this combines two or more fields in a

00:05:55,410 --> 00:06:03,540
table to form a primary key and the last

00:06:01,380 --> 00:06:05,970
one is called a foreign key which is

00:06:03,540 --> 00:06:09,570
basically a key a few in one table that

00:06:05,970 --> 00:06:14,100
links to another few in another table

00:06:09,570 --> 00:06:16,620
yes so basically there are two ways to

00:06:14,100 --> 00:06:19,730
access the database the first one is

00:06:16,620 --> 00:06:22,530
using a premade software like DB browser

00:06:19,730 --> 00:06:25,170
so it's actually a graphic interface to

00:06:22,530 --> 00:06:27,270
work with database and tables so now I'm

00:06:25,170 --> 00:06:30,510
will be opening it up to show you all

00:06:27,270 --> 00:06:35,090
more so for Windows users you can just

00:06:30,510 --> 00:06:35,090
search it in the search bar here

00:06:58,700 --> 00:07:03,410
oh yes so and while we're doing that in

00:07:01,010 --> 00:07:05,210
the meantime I'll for Apple users you

00:07:03,410 --> 00:07:08,240
think basically go to your Applications

00:07:05,210 --> 00:07:10,520
folder and yeah such debe browser there

00:07:08,240 --> 00:07:13,340
and it should pop up so this is risky

00:07:10,520 --> 00:07:14,720
how the interface looks like so the

00:07:13,340 --> 00:07:17,240
first thing you want to do when you open

00:07:14,720 --> 00:07:18,890
up DV browser is you want to create a

00:07:17,240 --> 00:07:21,050
new database if you don't have one

00:07:18,890 --> 00:07:24,470
existing if you have one ready you can

00:07:21,050 --> 00:07:25,730
just open it using this button here yeah

00:07:24,470 --> 00:07:33,470
so we're going to create a new database

00:07:25,730 --> 00:07:36,080
and we're going to name it store yeah so

00:07:33,470 --> 00:07:38,120
um after you create a new database this

00:07:36,080 --> 00:07:40,760
edit table definition window immediately

00:07:38,120 --> 00:07:42,770
pop-up so this is for you to create your

00:07:40,760 --> 00:07:45,620
first table since every database needs

00:07:42,770 --> 00:07:54,200
to have at least one table so let's

00:07:45,620 --> 00:07:56,960
start with the product table and now

00:07:54,200 --> 00:07:58,640
we're gonna add our fields so the first

00:07:56,960 --> 00:08:01,910
year we'll be adding is the product

00:07:58,640 --> 00:08:05,860
index view we should be shortening to

00:08:01,910 --> 00:08:05,860
product prot ID yeah

00:08:10,210 --> 00:08:16,000
so since our this'll be the unique feel

00:08:14,350 --> 00:08:19,270
for each of our products we're gonna

00:08:16,000 --> 00:08:21,910
click the primary key function so as you

00:08:19,270 --> 00:08:25,180
can see there are some few constraints

00:08:21,910 --> 00:08:28,449
here the first one being not now primary

00:08:25,180 --> 00:08:30,759
key Auto increment and unique so

00:08:28,449 --> 00:08:34,440
basically not now means that the few

00:08:30,759 --> 00:08:37,479
cannot be empty for every record and

00:08:34,440 --> 00:08:41,200
yeah primary key is primary key then

00:08:37,479 --> 00:08:44,529
auto increment is for like indexes where

00:08:41,200 --> 00:08:48,279
with every record it automatically goes

00:08:44,529 --> 00:08:52,029
up by one number so like 1 2 3 like that

00:08:48,279 --> 00:08:54,370
yeah so you don't need to enter on your

00:08:52,029 --> 00:08:58,890
like manually yeah then the last one is

00:08:54,370 --> 00:09:02,500
unique so it's like every like no two

00:08:58,890 --> 00:09:04,779
record should have the same entry for

00:09:02,500 --> 00:09:07,779
that whew yeah so when I click primary

00:09:04,779 --> 00:09:11,320
key actually and capture this not now

00:09:07,779 --> 00:09:13,660
and unique so yeah we don't need to

00:09:11,320 --> 00:09:16,150
click those two for our primary key and

00:09:13,660 --> 00:09:21,430
then there's this thing called fuel type

00:09:16,150 --> 00:09:24,430
so you can see there are few types here

00:09:21,430 --> 00:09:27,550
so basically the most commonly used one

00:09:24,430 --> 00:09:30,040
is integer text and real so integers

00:09:27,550 --> 00:09:34,060
basically for whole numbers all text is

00:09:30,040 --> 00:09:36,100
for like strings and real is for numbers

00:09:34,060 --> 00:09:39,550
with decimal points yeah

00:09:36,100 --> 00:09:42,010
as for blob and numeric block basically

00:09:39,550 --> 00:09:44,290
means binary large objects which can

00:09:42,010 --> 00:09:49,810
store like images and video files and

00:09:44,290 --> 00:09:51,760
numeric is for like either but you

00:09:49,810 --> 00:09:54,700
basically can store either integers or

00:09:51,760 --> 00:09:57,190
real in there yeah so we're just gonna

00:09:54,700 --> 00:10:00,930
use integer for product ID and we're

00:09:57,190 --> 00:10:00,930
gonna add a few more views

00:10:26,510 --> 00:10:32,550
so for product price we actually want to

00:10:28,860 --> 00:10:35,640
click the real button because like it

00:10:32,550 --> 00:10:37,080
can cost like 250 on something like that

00:10:35,640 --> 00:10:46,160
so you don't want it to be a whole

00:10:37,080 --> 00:10:50,520
number so the last one will be

00:10:46,160 --> 00:10:54,480
availability of the product so um you

00:10:50,520 --> 00:10:58,700
can see like for every name of the few

00:10:54,480 --> 00:11:01,020
I've actually done put prod and then

00:10:58,700 --> 00:11:05,250
Biscay something else after that right

00:11:01,020 --> 00:11:07,440
so actually this is a good this is a

00:11:05,250 --> 00:11:11,310
good practice because if you have a lot

00:11:07,440 --> 00:11:13,170
of tables like some of these views may

00:11:11,310 --> 00:11:16,320
come up again so it'd be good to specify

00:11:13,170 --> 00:11:19,410
like which table it's from yeah so for

00:11:16,320 --> 00:11:24,930
avail if we go to change it to point of

00:11:19,410 --> 00:11:29,579
view so now we're done creating our

00:11:24,930 --> 00:11:33,690
table so you click OK yeah and they see

00:11:29,579 --> 00:11:36,630
how you in like data into the table is

00:11:33,690 --> 00:11:39,899
you you wanna click browse data tap here

00:11:36,630 --> 00:11:43,140
and then you click new record so you can

00:11:39,899 --> 00:11:47,100
see that the first line immediately pops

00:11:43,140 --> 00:11:50,820
up so in order to add data into the new

00:11:47,100 --> 00:11:52,920
rule right we see you click the box but

00:11:50,820 --> 00:11:56,640
you want to add it in and then there'll

00:11:52,920 --> 00:11:59,459
be this other box on the right so you

00:11:56,640 --> 00:12:02,070
click here and then you type in what you

00:11:59,459 --> 00:12:08,610
want to type in so let's say we're doing

00:12:02,070 --> 00:12:09,540
one for a pause now yeah and then you

00:12:08,610 --> 00:12:11,399
just click

00:12:09,540 --> 00:12:16,079
and then you can see it means that he

00:12:11,399 --> 00:12:18,680
pops up here so let's just do this for

00:12:16,079 --> 00:12:18,680
the other views

00:12:29,190 --> 00:12:34,259
so now that I've covered how to like

00:12:31,800 --> 00:12:36,420
create a new record right the next thing

00:12:34,259 --> 00:12:38,699
I can cover is how to edit an existing

00:12:36,420 --> 00:12:40,529
record so you see I've already filled in

00:12:38,699 --> 00:12:42,810
everything here right if you want to

00:12:40,529 --> 00:12:46,649
update any information you can just

00:12:42,810 --> 00:12:53,759
click on it again and then yeah you just

00:12:46,649 --> 00:12:55,560
edited in this text box here and then

00:12:53,759 --> 00:12:59,399
you just click apply then your update

00:12:55,560 --> 00:13:01,230
automatically yeah so if you want to

00:12:59,399 --> 00:13:04,439
delete a record all you need to do is

00:13:01,230 --> 00:13:06,959
you press any few you click any view on

00:13:04,439 --> 00:13:09,389
that specific record and then you and

00:13:06,959 --> 00:13:10,470
then you click delete record and then

00:13:09,389 --> 00:13:15,269
it'll disappear

00:13:10,470 --> 00:13:18,689
yes so I'm actually one function of the

00:13:15,269 --> 00:13:21,740
DB browser is that you can actually type

00:13:18,689 --> 00:13:34,290
in your own SQL code here to execute it

00:13:21,740 --> 00:13:36,509
yeah so um let's say we open up let's

00:13:34,290 --> 00:13:42,839
open up an existing database that we

00:13:36,509 --> 00:13:46,380
have yeah so you can see there's a lot

00:13:42,839 --> 00:13:48,449
of data here right so actually if you

00:13:46,380 --> 00:13:53,250
already know some SQL code you can type

00:13:48,449 --> 00:13:57,930
it into the SQL execute SQL tap here so

00:13:53,250 --> 00:14:01,519
let's say we want to find everyone who

00:13:57,930 --> 00:14:01,519
lives in Brazil

00:14:10,200 --> 00:14:21,900
so humans is the table name yeah so

00:14:21,000 --> 00:14:23,910
after you're done

00:14:21,900 --> 00:14:27,570
typing it you just click the Run button

00:14:23,910 --> 00:14:31,680
here and then the data are pop up yeah

00:14:27,570 --> 00:14:39,570
so basically that's how you use DB

00:14:31,680 --> 00:14:42,720
browser for SQLite uh yeah so for those

00:14:39,570 --> 00:14:46,020
people who just came right basically we

00:14:42,720 --> 00:14:49,260
have this link here tinyurl.com slash

00:14:46,020 --> 00:14:51,420
SQLite for Asia so that's where we have

00:14:49,260 --> 00:15:00,600
all our resources including the download

00:14:51,420 --> 00:15:02,670
links to Python 3 + DB browser yeah yeah

00:15:00,600 --> 00:15:05,430
so actually I scanned all the advantages

00:15:02,670 --> 00:15:08,340
of DB browser for SQLite is that it's

00:15:05,430 --> 00:15:09,660
quite intuitive so like if when you play

00:15:08,340 --> 00:15:12,180
around with it you can kind of figure

00:15:09,660 --> 00:15:14,100
out on your own how to use it but one

00:15:12,180 --> 00:15:17,610
disadvantage is that it's not very

00:15:14,100 --> 00:15:22,110
flexible in comparison to like typing

00:15:17,610 --> 00:15:24,110
out Python code to access SQL yeah so

00:15:22,110 --> 00:15:28,080
the next option will be to use

00:15:24,110 --> 00:15:29,910
structured query language or SQL so on

00:15:28,080 --> 00:15:32,820
this is a form of programming language

00:15:29,910 --> 00:15:37,680
and it's used solely to manipulate table

00:15:32,820 --> 00:15:39,780
and databases so yeah an advantage in

00:15:37,680 --> 00:15:42,630
comparison to using the DB browser is

00:15:39,780 --> 00:15:45,210
that it's very flexible but one

00:15:42,630 --> 00:15:47,490
disadvantage is is that it's a bit

00:15:45,210 --> 00:15:50,520
harder to learner so you need to know

00:15:47,490 --> 00:15:52,380
like how the lengths how to use the

00:15:50,520 --> 00:15:57,030
language is that learning a new computer

00:15:52,380 --> 00:15:59,720
programming language risky yeah so any

00:15:57,030 --> 00:16:01,980
questions so far

00:15:59,720 --> 00:16:04,130
yeah learning the structured query

00:16:01,980 --> 00:16:04,130
language

00:16:04,310 --> 00:16:09,210
so um in order to use the structured

00:16:07,710 --> 00:16:11,510
query language which will be going

00:16:09,210 --> 00:16:14,070
through today we'll be using Python tree

00:16:11,510 --> 00:16:16,350
so it's a general-purpose programming

00:16:14,070 --> 00:16:18,180
language and it's considered one of the

00:16:16,350 --> 00:16:21,030
easiest programming languages to start

00:16:18,180 --> 00:16:23,620
with so it's used in data science and AI

00:16:21,030 --> 00:16:26,770
and it's also useful like stuff like

00:16:23,620 --> 00:16:29,980
Makena so there are few basic commands

00:16:26,770 --> 00:16:32,290
in Python trees such as print the usage

00:16:29,980 --> 00:16:36,130
of variable names and importing

00:16:32,290 --> 00:16:38,140
libraries so there are few ways to use

00:16:36,130 --> 00:16:41,860
Python so the first being the

00:16:38,140 --> 00:16:57,640
interactive shell which I will

00:16:41,860 --> 00:17:00,970
demonstrate now yes yeah so this is the

00:16:57,640 --> 00:17:02,800
interactive shell one disadvantage of

00:17:00,970 --> 00:17:06,189
the shell is that you can only run one

00:17:02,800 --> 00:17:15,850
line at a time so like for example if I

00:17:06,189 --> 00:17:18,790
type print hi the moment I click enter

00:17:15,850 --> 00:17:21,250
right you'll just automatically run the

00:17:18,790 --> 00:17:25,319
code like I can do any other lines of

00:17:21,250 --> 00:17:28,960
code so another way to use Python is

00:17:25,319 --> 00:17:32,260
basically in the script mode so this way

00:17:28,960 --> 00:17:34,980
you open up a new file and then you can

00:17:32,260 --> 00:17:34,980
do things like

00:17:55,809 --> 00:18:01,450
yes obviously the first line of code I

00:17:57,849 --> 00:18:05,200
typed out is to get response from the

00:18:01,450 --> 00:18:10,539
user and then the second line of code is

00:18:05,200 --> 00:18:17,109
to print what the user has typed in so

00:18:10,539 --> 00:18:18,580
when I run this ill Fritton enter

00:18:17,109 --> 00:18:24,249
something and then you just enter

00:18:18,580 --> 00:18:26,950
something like hello world yeah and then

00:18:24,249 --> 00:18:28,929
you can return it yeah so this is

00:18:26,950 --> 00:18:33,509
generally the preferred form of using

00:18:28,929 --> 00:18:37,210
Python so the aim for the day is to

00:18:33,509 --> 00:18:41,019
create a database for like a store like

00:18:37,210 --> 00:18:44,889
Amazon and mess with it to like explore

00:18:41,019 --> 00:18:46,960
what SQL can do and yeah now we're

00:18:44,889 --> 00:18:51,789
moving to the hands-on exercise portion

00:18:46,960 --> 00:18:52,330
do you have any questions so far no okay

00:18:51,789 --> 00:18:54,039
great

00:18:52,330 --> 00:18:58,139
let's move on I'll let Coakley on take

00:18:54,039 --> 00:18:58,139
over okay do give us a minute

00:19:55,250 --> 00:20:03,620
this okay so I'll be moving you through

00:20:00,270 --> 00:20:08,670
the hands-on exercise of this workshop

00:20:03,620 --> 00:20:11,160
okay so we move on to our first part of

00:20:08,670 --> 00:20:14,040
our okay know before we start I just

00:20:11,160 --> 00:20:15,630
want to quickly mention that ya do

00:20:14,040 --> 00:20:18,450
follow closely to what I'm about to show

00:20:15,630 --> 00:20:21,150
you because basically when it comes to

00:20:18,450 --> 00:20:23,910
programming the things that you type can

00:20:21,150 --> 00:20:25,620
be very sensitive meaning if you miss a

00:20:23,910 --> 00:20:27,780
semicolon or like you misspelled a

00:20:25,620 --> 00:20:30,960
certain word it could make your program

00:20:27,780 --> 00:20:33,660
do things that it's not supposed to or

00:20:30,960 --> 00:20:35,100
either it just shouldn't work so it is

00:20:33,660 --> 00:20:39,270
important that you know what you're

00:20:35,100 --> 00:20:40,350
doing yeah I don't follow closely or if

00:20:39,270 --> 00:20:43,200
you have experience with this before

00:20:40,350 --> 00:20:45,750
then yeah you you just make sure you

00:20:43,200 --> 00:20:51,030
know what you're doing okay so now to

00:20:45,750 --> 00:20:56,040
start out I will be using I'll be using

00:20:51,030 --> 00:20:56,730
a script of the Python which member I

00:20:56,040 --> 00:21:00,300
showed you earlier

00:20:56,730 --> 00:21:02,250
so do create a new file and then right

00:21:00,300 --> 00:21:05,220
before we start I would like to save

00:21:02,250 --> 00:21:06,720
that into this folder which have created

00:21:05,220 --> 00:21:10,760
previously

00:21:06,720 --> 00:21:14,640
it doesn't matter which folder that you

00:21:10,760 --> 00:21:18,150
insert your Python file into as long as

00:21:14,640 --> 00:21:19,980
it's a photo as long as or you do

00:21:18,150 --> 00:21:24,320
everything in one folder you'll be fine

00:21:19,980 --> 00:21:33,030
so over here I'm going to name my coat

00:21:24,320 --> 00:21:36,160
SQLite with Python 3 okay

00:21:33,030 --> 00:21:40,930
so now you can see that I have this

00:21:36,160 --> 00:21:45,730
Python file inside this folder and this

00:21:40,930 --> 00:21:48,370
is my script okay so yeah I'll be

00:21:45,730 --> 00:21:53,500
starting off with the first part which

00:21:48,370 --> 00:21:56,020
is to import SQLite tree now the reason

00:21:53,500 --> 00:21:58,030
behind this command is that python on

00:21:56,020 --> 00:22:01,840
its own actually doesn't really have the

00:21:58,030 --> 00:22:03,880
capability to mess with databases so by

00:22:01,840 --> 00:22:05,290
importing this library what you are

00:22:03,880 --> 00:22:09,670
doing is basically importing new

00:22:05,290 --> 00:22:12,040
commands into into Python which will

00:22:09,670 --> 00:22:15,190
allow you to which will give you the

00:22:12,040 --> 00:22:20,890
capabilities that you will need to to

00:22:15,190 --> 00:22:22,420
add or delete records in your in your

00:22:20,890 --> 00:22:24,700
database yeah

00:22:22,420 --> 00:22:27,309
so with that we can actually move on to

00:22:24,700 --> 00:22:29,260
the first part of our the to the actual

00:22:27,309 --> 00:22:34,900
first commands that we gotta run first

00:22:29,260 --> 00:22:37,929
of it being Khan go so SQ like tree from

00:22:34,900 --> 00:22:39,490
net so now what this command is going to

00:22:37,929 --> 00:22:43,059
do is that it's going to create a

00:22:39,490 --> 00:22:44,110
variable which is called Khan and what

00:22:43,059 --> 00:22:47,860
its gonna do is that it's going to

00:22:44,110 --> 00:22:48,910
assign this into into this variable and

00:22:47,860 --> 00:22:50,230
basically what it's going to do

00:22:48,910 --> 00:22:54,309
basically what it's going to do is that

00:22:50,230 --> 00:22:58,290
it's going to allow you to connect to

00:22:54,309 --> 00:23:01,120
the database using this variable and

00:22:58,290 --> 00:23:02,980
basically you do need to include

00:23:01,120 --> 00:23:05,110
something inside the brackets and that

00:23:02,980 --> 00:23:06,640
is actually the name of a database now

00:23:05,110 --> 00:23:09,040
the thing is we don't actually have a

00:23:06,640 --> 00:23:11,890
database yet because I mean it is a new

00:23:09,040 --> 00:23:14,050
file it is a new folder and we don't

00:23:11,890 --> 00:23:16,000
have a database that's created for this

00:23:14,050 --> 00:23:19,679
workshop so we're going to create one

00:23:16,000 --> 00:23:22,390
from scratch right now and the deal is

00:23:19,679 --> 00:23:23,950
if you don't have a database yet you can

00:23:22,390 --> 00:23:30,970
just add a name here like let's say for

00:23:23,950 --> 00:23:33,340
example I just one company dot DB ok so

00:23:30,970 --> 00:23:37,660
basically let's say if I want the name

00:23:33,340 --> 00:23:40,179
of my database to be company ok company

00:23:37,660 --> 00:23:44,650
dot DB this will be what I type in as my

00:23:40,179 --> 00:23:46,720
first command okay so if I run this what

00:23:44,650 --> 00:23:50,240
you'll see is that

00:23:46,720 --> 00:23:51,890
okay nothing is printed on the idol but

00:23:50,240 --> 00:23:53,899
that's okay we didn't ask you to put in

00:23:51,890 --> 00:23:57,799
anything but then what your see is that

00:23:53,899 --> 00:24:00,230
company DB now actually shows up in the

00:23:57,799 --> 00:24:05,899
same folder as your SQLite with my

00:24:00,230 --> 00:24:08,450
country script now yeah so basically

00:24:05,899 --> 00:24:10,970
what what this what this command does is

00:24:08,450 --> 00:24:14,090
that if you have a database already in

00:24:10,970 --> 00:24:16,309
the same folder as your SQLite if you're

00:24:14,090 --> 00:24:18,440
with your Python script then it will

00:24:16,309 --> 00:24:21,919
directly access that database but then

00:24:18,440 --> 00:24:23,720
if none none with this name exists then

00:24:21,919 --> 00:24:26,000
you will just create it on the spot for

00:24:23,720 --> 00:24:27,169
you now of course because it's just

00:24:26,000 --> 00:24:29,419
created that's nothing inside this

00:24:27,169 --> 00:24:32,690
database yeah but we we will be

00:24:29,419 --> 00:24:38,690
including records into it shortly okay

00:24:32,690 --> 00:24:40,789
so now yes no this okay

00:24:38,690 --> 00:24:42,380
basically how SQLite works is that it

00:24:40,789 --> 00:24:45,649
doesn't connect to any server anything I

00:24:42,380 --> 00:24:47,990
think my SQL is the one that connects

00:24:45,649 --> 00:24:50,899
what's up and server yeah but then for

00:24:47,990 --> 00:24:52,850
SQLite it just it works directly in your

00:24:50,899 --> 00:24:54,710
computer so you don't even need internet

00:24:52,850 --> 00:24:58,880
access you can just run this on the spot

00:24:54,710 --> 00:25:02,059
yeah so yeah we will be moving on to the

00:24:58,880 --> 00:25:05,299
next part of this work - next part of

00:25:02,059 --> 00:25:08,299
this exercise which is to create okay

00:25:05,299 --> 00:25:10,429
before we can even we can even run any

00:25:08,299 --> 00:25:14,720
SQL statements one of the things that we

00:25:10,429 --> 00:25:16,779
need for for SQLite tree is this thing

00:25:14,720 --> 00:25:22,340
called custom okay

00:25:16,779 --> 00:25:26,000
so now basically I'll type out a full

00:25:22,340 --> 00:25:27,830
command first so now this what this

00:25:26,000 --> 00:25:31,279
command does is that once again it

00:25:27,830 --> 00:25:34,669
creates a variable in this case is Casa

00:25:31,279 --> 00:25:37,429
and what it does is that it assigns this

00:25:34,669 --> 00:25:39,700
into Casa and basically what this

00:25:37,429 --> 00:25:44,240
command does is that it creates a cursor

00:25:39,700 --> 00:25:46,760
it creates okay Kristen Carosa which

00:25:44,240 --> 00:25:51,799
will allow you to control your database

00:25:46,760 --> 00:25:53,720
using SQL commands yeah and in this case

00:25:51,799 --> 00:25:55,220
you will control the database that you

00:25:53,720 --> 00:25:58,630
have connected to previously which is

00:25:55,220 --> 00:26:00,610
company DB so in this case cuz

00:25:58,630 --> 00:26:04,690
yeah cuz I'll allow you to control the

00:26:00,610 --> 00:26:06,340
database okay so now these are the these

00:26:04,690 --> 00:26:08,919
are the introductory commands they'll

00:26:06,340 --> 00:26:17,140
allow you to start using SQL statements

00:26:08,919 --> 00:26:18,160
for your database yes okay so yeah just

00:26:17,140 --> 00:26:19,480
to quickly show you some of the

00:26:18,160 --> 00:26:24,280
important Python commands that you'll

00:26:19,480 --> 00:26:27,539
need for this for this portion first of

00:26:24,280 --> 00:26:27,539
it is okay

00:26:28,169 --> 00:26:34,559
sorry for the dish actually because I

00:26:30,940 --> 00:26:37,270
just pointed out but yeah kisara execute

00:26:34,559 --> 00:26:39,070
the inside SQL command here basically

00:26:37,270 --> 00:26:41,590
this is used to execute your comments

00:26:39,070 --> 00:26:44,980
basically let's say if I do create

00:26:41,590 --> 00:26:47,169
create table SQL command in here then

00:26:44,980 --> 00:26:51,309
when you run this when you run this

00:26:47,169 --> 00:26:57,039
command this this this Python command

00:26:51,309 --> 00:26:59,679
will run the SQL command and then yeah

00:26:57,039 --> 00:27:02,440
yeah biscuit is used to run run your SQL

00:26:59,679 --> 00:27:04,990
commands and then conduct commit in this

00:27:02,440 --> 00:27:07,690
context it is used to save the changes

00:27:04,990 --> 00:27:10,169
that you have made to your database so

00:27:07,690 --> 00:27:15,179
let's say after I ran a seed or execute

00:27:10,169 --> 00:27:17,530
to to create a table and then I run this

00:27:15,179 --> 00:27:19,510
basically the new create a table will

00:27:17,530 --> 00:27:21,610
actually be saved into the database it

00:27:19,510 --> 00:27:23,440
won't automatically do that so let's say

00:27:21,610 --> 00:27:25,320
if you actually just do a create table

00:27:23,440 --> 00:27:27,789
and then you forget to do conduct commit

00:27:25,320 --> 00:27:29,230
actually the new create new table that

00:27:27,789 --> 00:27:31,900
you created will actually not be safe

00:27:29,230 --> 00:27:34,539
inside the database so yeah it is

00:27:31,900 --> 00:27:37,690
important that you remember do this okay

00:27:34,539 --> 00:27:46,809
so now we'll start off with our first

00:27:37,690 --> 00:27:52,000
secure command and okay so right now

00:27:46,809 --> 00:27:57,299
what I am going to do is run my first

00:27:52,000 --> 00:28:00,610
execute statement okay

00:27:57,299 --> 00:28:02,230
so yeah where you are type in your SQL

00:28:00,610 --> 00:28:05,860
commands will be in here and now you

00:28:02,230 --> 00:28:09,330
have to surround your command with these

00:28:05,860 --> 00:28:12,000
double quotations - sure it is a command

00:28:09,330 --> 00:28:13,860
now the thing is um

00:28:12,000 --> 00:28:16,800
yes what you will use is this double

00:28:13,860 --> 00:28:18,030
quotation marks because you know you

00:28:16,800 --> 00:28:22,070
will allow you to type in your common

00:28:18,030 --> 00:28:24,270
whatever is right but the thing is if

00:28:22,070 --> 00:28:26,160
the thing about some here this is that

00:28:24,270 --> 00:28:30,690
let's say if your command happens to

00:28:26,160 --> 00:28:33,330
extend to a second line like this you'll

00:28:30,690 --> 00:28:37,140
see that Python starts to realize okay I

00:28:33,330 --> 00:28:38,880
don't think these are the same command

00:28:37,140 --> 00:28:43,320
or rather they are part of the same

00:28:38,880 --> 00:28:45,150
command so the thing is how they python

00:28:43,320 --> 00:28:47,730
won't be able to tolerate okay this

00:28:45,150 --> 00:28:49,650
thing is a line so what what's gonna

00:28:47,730 --> 00:28:52,830
happen is when Python runs it this is an

00:28:49,650 --> 00:28:55,110
error which is not what you want the way

00:28:52,830 --> 00:29:01,290
that you want to walk around it is to

00:28:55,110 --> 00:29:03,930
use either triple quotation marks either

00:29:01,290 --> 00:29:07,200
or you can use double quotation ok

00:29:03,930 --> 00:29:12,170
triple single quotation marks or double

00:29:07,200 --> 00:29:14,310
or triple double quotation marks so yeah

00:29:12,170 --> 00:29:17,970
that's one way to make sure that you can

00:29:14,310 --> 00:29:21,180
key in multiple lines in your command

00:29:17,970 --> 00:29:24,360
okay so in this case you'll be using our

00:29:21,180 --> 00:29:26,400
triple quotation cause the the command

00:29:24,360 --> 00:29:28,350
for create table can be quite long so

00:29:26,400 --> 00:29:35,640
we'll be extending it into multiple

00:29:28,350 --> 00:29:37,710
lines to make it neater okay so so our

00:29:35,640 --> 00:29:41,700
command for creating a table or we

00:29:37,710 --> 00:29:44,730
create table and then this is where you

00:29:41,700 --> 00:29:47,780
include in the name of your table so in

00:29:44,730 --> 00:29:56,880
this case I'll be naming my table

00:29:47,780 --> 00:30:01,070
employees okay

00:29:56,880 --> 00:30:04,170
and then and after this you want to

00:30:01,070 --> 00:30:05,880
start a bracket and then basically in

00:30:04,170 --> 00:30:09,090
this bracket we are going to key in all

00:30:05,880 --> 00:30:11,940
the names of our columns okay so

00:30:09,090 --> 00:30:16,230
basically in a table what you need to

00:30:11,940 --> 00:30:19,680
what you need to tell the the SQL is the

00:30:16,230 --> 00:30:22,350
name of your table and all of and the

00:30:19,680 --> 00:30:24,780
the name of Oliver columns and what data

00:30:22,350 --> 00:30:31,770
type they are going to be okay so in

00:30:24,780 --> 00:30:35,970
this case they're gonna have okay sorry

00:30:31,770 --> 00:30:41,240
I shall make this bigger so you'll be

00:30:35,970 --> 00:30:46,650
easier for your to see but yes okay so

00:30:41,240 --> 00:30:50,600
okay yeah I'll be continuing so the

00:30:46,650 --> 00:30:50,600
first the first

00:30:50,990 --> 00:30:55,680
yeah the first table the first column

00:30:53,730 --> 00:31:00,180
the I'm going to create is actually the

00:30:55,680 --> 00:31:04,200
primary key and that would be a MP ID

00:31:00,180 --> 00:31:10,280
and because his idea we're going to be

00:31:04,200 --> 00:31:13,410
using an integer datatype and of course

00:31:10,280 --> 00:31:16,410
yeah so so to make something a primary

00:31:13,410 --> 00:31:23,750
key which also auto increments you just

00:31:16,410 --> 00:31:28,200
type in the words primary key auto

00:31:23,750 --> 00:31:29,940
increment okay and then you follow if a

00:31:28,200 --> 00:31:32,100
comma because we're going to insert

00:31:29,940 --> 00:31:34,890
additional tables sorry

00:31:32,100 --> 00:31:37,020
additional columns into it yeah so

00:31:34,890 --> 00:31:39,780
that's going to be our first column the

00:31:37,020 --> 00:31:42,120
next column shall be let's say I want to

00:31:39,780 --> 00:31:44,550
include the name of the employee ID I'm

00:31:42,120 --> 00:31:48,870
going to add in so you will be named and

00:31:44,550 --> 00:31:55,560
then of course if it's his name is going

00:31:48,870 --> 00:32:00,260
to be of text text data type okay just

00:31:55,560 --> 00:32:03,260
to quickly run along here H will be

00:32:00,260 --> 00:32:03,260
sorry

00:32:24,790 --> 00:32:33,230
okay so as you have seen I have created

00:32:28,730 --> 00:32:34,880
a tree for the columns and these yeah

00:32:33,230 --> 00:32:37,490
these are just informations that let's

00:32:34,880 --> 00:32:40,340
say I want to keep off my employee so I

00:32:37,490 --> 00:32:42,650
have h which is of integer datatype

00:32:40,340 --> 00:32:44,929
hand phone number which is over text

00:32:42,650 --> 00:32:47,540
data type and birthday which i'll be

00:32:44,929 --> 00:32:49,880
keeping in a text data type as well okay

00:32:47,540 --> 00:32:52,520
so after all of this are very important

00:32:49,880 --> 00:32:53,480
your last your last column should not

00:32:52,520 --> 00:32:55,940
have a comma

00:32:53,480 --> 00:32:58,010
Kazakhstan caused an error and then in

00:32:55,940 --> 00:32:59,330
the final line you can just close off

00:32:58,010 --> 00:33:02,570
the bracket that you have started off

00:32:59,330 --> 00:33:08,500
over here okay so now with that you have

00:33:02,570 --> 00:33:13,520
this whole command and then yeah this

00:33:08,500 --> 00:33:15,260
this command is complete and then as as

00:33:13,520 --> 00:33:20,870
I've said earlier you will need to make

00:33:15,260 --> 00:33:24,679
sure that you do Khan don't commit to

00:33:20,870 --> 00:33:26,179
make sure that you know that your new

00:33:24,679 --> 00:33:30,110
create the table is actually saved into

00:33:26,179 --> 00:33:34,549
the into the database and then of course

00:33:30,110 --> 00:33:38,210
a very good a good yeah good habit to

00:33:34,549 --> 00:33:40,820
have is to close the file is to close

00:33:38,210 --> 00:33:42,860
this connection once you're done with it

00:33:40,820 --> 00:33:45,049
to make sure that it doesn't take up

00:33:42,860 --> 00:33:47,720
more resources than it needs to

00:33:45,049 --> 00:33:51,110
yeah so after this once you have this

00:33:47,720 --> 00:33:53,690
starting command you can actually start

00:33:51,110 --> 00:33:55,220
running it and to run it yeah you click

00:33:53,690 --> 00:33:56,990
on run and click on run more do or you

00:33:55,220 --> 00:34:01,540
can just press f5 for me I preferred

00:33:56,990 --> 00:34:05,000
pressing f5 forces much easier and yeah

00:34:01,540 --> 00:34:07,100
once you get into this then you see yeah

00:34:05,000 --> 00:34:09,350
of course nothing fits printed but

00:34:07,100 --> 00:34:12,800
that's actually changes that's bring me

00:34:09,350 --> 00:34:15,139
into my my company no DB you can see

00:34:12,800 --> 00:34:16,320
because you know there's no easy way to

00:34:15,139 --> 00:34:19,500
access it through Python

00:34:16,320 --> 00:34:21,330
at least not yet but if I open up my DB

00:34:19,500 --> 00:34:28,440
browser and I actually open up my

00:34:21,330 --> 00:34:29,970
database from here you'll see that oh

00:34:28,440 --> 00:34:33,419
sorry

00:34:29,970 --> 00:34:35,160
you'll see that the table is actually

00:34:33,419 --> 00:34:37,830
been created over here so this is my

00:34:35,160 --> 00:34:41,760
company DB the table employees is

00:34:37,830 --> 00:34:43,230
actually create that and then yeah of

00:34:41,760 --> 00:34:44,550
course because we have just created this

00:34:43,230 --> 00:34:48,600
table that's not right cause in sight

00:34:44,550 --> 00:34:50,160
yet but yeah you can see that the the

00:34:48,600 --> 00:34:53,280
columns that we have created are here

00:34:50,160 --> 00:34:55,410
mie named hhp birthday so you can tell

00:34:53,280 --> 00:34:58,140
that a command ran smoothly and yeah we

00:34:55,410 --> 00:35:00,470
can move on to the next part

00:34:58,140 --> 00:35:02,790
no before that I want to quickly show

00:35:00,470 --> 00:35:05,130
something with this create table which

00:35:02,790 --> 00:35:08,490
is that this command should really only

00:35:05,130 --> 00:35:10,620
be ran once because let's say if I try

00:35:08,490 --> 00:35:12,780
to run this command again right no okay

00:35:10,620 --> 00:35:16,070
right now company DB already has a table

00:35:12,780 --> 00:35:18,480
employees if you run this command again

00:35:16,070 --> 00:35:19,710
you'll see the ahe caused an error even

00:35:18,480 --> 00:35:21,930
though the first time when you ran it

00:35:19,710 --> 00:35:23,970
that wasn't an error and in this case I

00:35:21,930 --> 00:35:26,190
tell you that a bump or a DX is this

00:35:23,970 --> 00:35:30,930
because you are trying to create a table

00:35:26,190 --> 00:35:33,810
which already exists so with that right

00:35:30,930 --> 00:35:35,810
there Stewie's can go around this one

00:35:33,810 --> 00:35:38,970
way is you can use this thing called

00:35:35,810 --> 00:35:43,200
comment so basically what a comment is

00:35:38,970 --> 00:35:44,790
is if you put a hashtag a if you put a

00:35:43,200 --> 00:35:47,730
hashtag followed by anything after that

00:35:44,790 --> 00:35:49,830
what you'll do is that Python will

00:35:47,730 --> 00:35:52,560
recognize this and be okay I won't run

00:35:49,830 --> 00:35:57,000
this part of I won't run this for my

00:35:52,560 --> 00:36:00,630
program okay so you can comment oh ok

00:35:57,000 --> 00:36:02,010
comment out this part of your you can

00:36:00,630 --> 00:36:04,170
comment out this part of our program and

00:36:02,010 --> 00:36:05,460
when I run again you'll see that ok it

00:36:04,170 --> 00:36:10,830
doesn't it doesn't cause an error this

00:36:05,460 --> 00:36:13,530
time around sorry you'll see that it

00:36:10,830 --> 00:36:18,480
doesn't cause an error this time around

00:36:13,530 --> 00:36:22,050
anymore okay but this is only one way to

00:36:18,480 --> 00:36:28,160
work around it another way you can walk

00:36:22,050 --> 00:36:28,160
around is to but in this this keyword

00:36:30,180 --> 00:36:35,500
yeah

00:36:31,390 --> 00:36:37,329
so SQL has this ability to check first

00:36:35,500 --> 00:36:39,579
whether this table exists before it

00:36:37,329 --> 00:36:42,190
creates it so if you type in this

00:36:39,579 --> 00:36:43,809
command here you are actually checked

00:36:42,190 --> 00:36:47,140
before this table exists first before it

00:36:43,809 --> 00:36:50,049
tries to create it so if you run this

00:36:47,140 --> 00:36:55,059
you will see that yeah once again no

00:36:50,049 --> 00:36:57,069
error okay so yeah I think it's good

00:36:55,059 --> 00:36:58,750
that you include this whenever you do a

00:36:57,069 --> 00:37:01,660
create table command just in case you

00:36:58,750 --> 00:37:03,250
know any errors occur but then yeah I

00:37:01,660 --> 00:37:08,079
guess it's up to who is a bit up to

00:37:03,250 --> 00:37:11,109
personal preference so yeah okay so now

00:37:08,079 --> 00:37:15,700
if that I will move on to the next part

00:37:11,109 --> 00:37:18,760
of our hands-on which is to work on how

00:37:15,700 --> 00:37:21,250
to do in such statements so basically

00:37:18,760 --> 00:37:25,180
let's say now I have my table I have my

00:37:21,250 --> 00:37:29,049
employee table now I need to add in

00:37:25,180 --> 00:37:30,849
names or I knew in records for our

00:37:29,049 --> 00:37:32,890
employees so let's say I have let's say

00:37:30,849 --> 00:37:35,260
I have 10 employees I need to add off

00:37:32,890 --> 00:37:37,990
their details into this into this

00:37:35,260 --> 00:37:40,320
database into the table so this is

00:37:37,990 --> 00:37:41,640
exactly what we're going to do now okay

00:37:40,320 --> 00:37:46,450
[Music]

00:37:41,640 --> 00:37:49,440
yeah okay tell you what I'm going a

00:37:46,450 --> 00:37:49,440
common for so it's easier

00:37:55,300 --> 00:38:01,330
okay in this case I'll be using single

00:37:57,740 --> 00:38:05,290
double quotation marks since this

00:38:01,330 --> 00:38:05,290
command can be run in one line

00:39:02,520 --> 00:39:06,630
okay so

00:39:19,060 --> 00:39:26,620
okay so this will be the SQL command I'm

00:39:23,440 --> 00:39:29,680
running so yeah okay let me just quickly

00:39:26,620 --> 00:39:32,380
go through this statement with you so

00:39:29,680 --> 00:39:36,310
firstly there's this insight into part

00:39:32,380 --> 00:39:38,590
of the statement

00:39:36,310 --> 00:39:41,560
so this to tell SK okay we're going to

00:39:38,590 --> 00:39:43,720
do an insert we got inside record into

00:39:41,560 --> 00:39:47,350
the database okay the next part will be

00:39:43,720 --> 00:39:49,120
employees this is the name of your table

00:39:47,350 --> 00:39:51,520
so whatever table you want to insert a

00:39:49,120 --> 00:39:56,880
record into you put it here and then

00:39:51,520 --> 00:39:59,410
this is where you write the columns of

00:39:56,880 --> 00:40:07,720
the but they party you're going to

00:39:59,410 --> 00:40:10,960
insert into the table okay yeah so the

00:40:07,720 --> 00:40:12,550
thing about an ID is that because this

00:40:10,960 --> 00:40:14,380
is a primary key and it's already auto

00:40:12,550 --> 00:40:17,380
increment but every time you include a

00:40:14,380 --> 00:40:20,740
record the database will be able to

00:40:17,380 --> 00:40:21,100
automatically keep track that okay this

00:40:20,740 --> 00:40:22,930
okay

00:40:21,100 --> 00:40:24,340
let's say for example write this since

00:40:22,930 --> 00:40:28,450
this is the first record am inserting

00:40:24,340 --> 00:40:30,880
into the into the table the table came

00:40:28,450 --> 00:40:33,940
down okay this is my first record so

00:40:30,880 --> 00:40:35,470
it's gonna be one the ID for this record

00:40:33,940 --> 00:40:37,270
is going to be one I'll show you in a

00:40:35,470 --> 00:40:41,640
bit but basically you know is that

00:40:37,270 --> 00:40:45,270
because M ID is auto incremental you're

00:40:41,640 --> 00:40:49,770
you just need to indeed before name each

00:40:45,270 --> 00:40:54,100
hand phone number and birthday yeah so

00:40:49,770 --> 00:40:57,460
yeah once again inside these inside

00:40:54,100 --> 00:40:59,380
these brackets you include in the the

00:40:57,460 --> 00:41:01,720
name of the columns that you're going to

00:40:59,380 --> 00:41:03,760
insert into okay then after that you

00:41:01,720 --> 00:41:05,830
followed that by the word values so

00:41:03,760 --> 00:41:06,790
you're telling as chaotic okay these are

00:41:05,830 --> 00:41:09,400
the values that I'm going to be

00:41:06,790 --> 00:41:11,590
inserting into the table okay and then

00:41:09,400 --> 00:41:13,360
yeah you just follow it by whatever you

00:41:11,590 --> 00:41:16,270
want to insert into the table in this

00:41:13,360 --> 00:41:22,420
case it's supposedly my part my

00:41:16,270 --> 00:41:24,790
particulars so yeah Jung in my fake hand

00:41:22,420 --> 00:41:30,310
phone number and my maybe fake birthday

00:41:24,790 --> 00:41:31,520
okay so yeah so this will be my insert

00:41:30,310 --> 00:41:35,660
statement and then

00:41:31,520 --> 00:41:39,530
let's see if I try to run it okay

00:41:35,660 --> 00:41:42,170
works and I can check my database true

00:41:39,530 --> 00:41:44,750
DB browser again and you'll see that

00:41:42,170 --> 00:41:47,960
yeah the record is actually inserted

00:41:44,750 --> 00:41:49,970
into the table and yeah because you can

00:41:47,960 --> 00:41:53,360
doubt that this the first record it will

00:41:49,970 --> 00:41:56,690
directly assign one into an ID for this

00:41:53,360 --> 00:41:58,940
record and then you can see the rest of

00:41:56,690 --> 00:42:02,300
the information works out just fine as

00:41:58,940 --> 00:42:06,890
well and also just just to quickly

00:42:02,300 --> 00:42:09,980
mention whatever columns that you assign

00:42:06,890 --> 00:42:13,520
as a text when you type in the data you

00:42:09,980 --> 00:42:15,080
do have to wrap your data around with

00:42:13,520 --> 00:42:18,410
single quotation marks these to show

00:42:15,080 --> 00:42:21,350
that it is a text data when you insert

00:42:18,410 --> 00:42:26,900
it into the when is that the internal

00:42:21,350 --> 00:42:30,860
table so yeah so after running this

00:42:26,900 --> 00:42:32,960
command evil yeah you are insert the

00:42:30,860 --> 00:42:37,730
record over here into your table and

00:42:32,960 --> 00:42:41,390
yeah you can see that so okay now if

00:42:37,730 --> 00:42:43,550
that we have one inside we have one

00:42:41,390 --> 00:42:47,360
record inside our table which is good

00:42:43,550 --> 00:42:50,090
but we're going to insert about nine or

00:42:47,360 --> 00:42:56,530
ten more and of course I'm not happy now

00:42:50,090 --> 00:43:00,110
so why do have is a previously pre-made

00:42:56,530 --> 00:43:03,580
is a preemie file which is actually

00:43:00,110 --> 00:43:08,870
inside our folder which we have shown

00:43:03,580 --> 00:43:11,960
you earlier so this so inside this

00:43:08,870 --> 00:43:15,500
folder go to hands-on exercise and then

00:43:11,960 --> 00:43:17,840
you'll see this file code data do go

00:43:15,500 --> 00:43:23,030
into that and then you'll see these sets

00:43:17,840 --> 00:43:25,760
of pre-made premier insert commands that

00:43:23,030 --> 00:43:28,490
we're going to run now if you want one

00:43:25,760 --> 00:43:30,620
way you can do this is you use 0 execute

00:43:28,490 --> 00:43:35,270
and then you run each command separately

00:43:30,620 --> 00:43:39,080
but then instead that is a better way to

00:43:35,270 --> 00:43:41,290
do this and I'll be showing you very

00:43:39,080 --> 00:43:41,290
quickly

00:43:42,930 --> 00:43:50,890
okay I'm so yeah we will be using this

00:43:47,640 --> 00:43:54,760
this common over here which is a cassava

00:43:50,890 --> 00:43:56,619
execute script so these so basically

00:43:54,760 --> 00:44:00,609
what this how different this is from

00:43:56,619 --> 00:44:03,220
your normal execute is um okay let let's

00:44:00,609 --> 00:44:15,930
see I I quickly show you okay give me a

00:44:03,220 --> 00:44:20,740
minute okay I'll now be pasting the

00:44:15,930 --> 00:44:32,770
commands on the previous into my Python

00:44:20,740 --> 00:44:44,710
script okay so now let's say I try to

00:44:32,770 --> 00:44:49,890
run all of my let's say I try to run all

00:44:44,710 --> 00:44:52,060
these insert commands or I want okay

00:44:49,890 --> 00:44:53,560
yeah the thing yeah so the thing about

00:44:52,060 --> 00:44:55,300
execute is that you can when you run

00:44:53,560 --> 00:44:57,790
from one comment one so if I try to run

00:44:55,300 --> 00:44:59,530
it like this you'll see that okay yeah

00:44:57,790 --> 00:45:00,900
you I tell you okay only one I can only

00:44:59,530 --> 00:45:04,750
execute one statement at a time

00:45:00,900 --> 00:45:07,240
yeah so the way to work around that is

00:45:04,750 --> 00:45:11,170
to actually type in execute strip

00:45:07,240 --> 00:45:12,700
instead and yeah one important thing

00:45:11,170 --> 00:45:15,520
that you should know is that if you try

00:45:12,700 --> 00:45:18,010
to run multiple SQL commands in one

00:45:15,520 --> 00:45:22,390
execute script you have to separate them

00:45:18,010 --> 00:45:25,089
using semicolons so yeah that's that and

00:45:22,390 --> 00:45:29,980
if I try running this now okay you'll

00:45:25,089 --> 00:45:34,510
see that um yeah this this works and if

00:45:29,980 --> 00:45:36,790
I go into the database again then you

00:45:34,510 --> 00:45:38,680
can see yeah all the records are

00:45:36,790 --> 00:45:40,900
actually in sub that nicely for you and

00:45:38,680 --> 00:45:43,200
yeah once again you can see that for M

00:45:40,900 --> 00:45:47,740
PI D it just automatically increases

00:45:43,200 --> 00:45:51,940
each records m ID by one for each for

00:45:47,740 --> 00:45:54,820
each record so that you know each each

00:45:51,940 --> 00:45:55,760
record will have a unique employee ID to

00:45:54,820 --> 00:45:57,320
it

00:45:55,760 --> 00:46:00,080
and yeah you can see all the day pass

00:45:57,320 --> 00:46:03,290
inserted in just quickly you mentioned

00:46:00,080 --> 00:46:06,050
all these people are fake I created them

00:46:03,290 --> 00:46:09,530
from online generator so yeah

00:46:06,050 --> 00:46:11,150
just put it out there but yeah you can

00:46:09,530 --> 00:46:14,780
see all that they does inside the Ebola

00:46:11,150 --> 00:46:19,820
and it's yeah we'll be able to use this

00:46:14,780 --> 00:46:23,270
data later on okay one thing you want to

00:46:19,820 --> 00:46:24,620
do when it comes to insert insert into

00:46:23,270 --> 00:46:26,510
statements is that they are similar to

00:46:24,620 --> 00:46:28,460
create tables in that sense that if you

00:46:26,510 --> 00:46:29,720
try to in let's say if I try to run this

00:46:28,460 --> 00:46:32,890
script again right actually what you'll

00:46:29,720 --> 00:46:37,130
see is that it will just insert these

00:46:32,890 --> 00:46:40,550
records again into your database or your

00:46:37,130 --> 00:46:42,650
table rather because because it doesn't

00:46:40,550 --> 00:46:44,720
care whether is ready inside a table or

00:46:42,650 --> 00:46:47,890
not so if you do run this command again

00:46:44,720 --> 00:46:53,000
you have duplicates inside our table but

00:46:47,890 --> 00:46:55,400
yeah so the way that you want to not do

00:46:53,000 --> 00:46:57,680
that is to yeah once again just comment

00:46:55,400 --> 00:46:59,180
out your quote inside into statements

00:46:57,680 --> 00:47:02,390
actually doesn't really have a if not

00:46:59,180 --> 00:47:04,610
exist clause so you can use that when it

00:47:02,390 --> 00:47:06,560
comes to insert into statements so yeah

00:47:04,610 --> 00:47:10,250
just come in it out you won't have a

00:47:06,560 --> 00:47:11,660
problem with it later on okay so now

00:47:10,250 --> 00:47:14,990
that we've gone through how to insert

00:47:11,660 --> 00:47:20,000
all records into your table this is

00:47:14,990 --> 00:47:22,580
where most of what you use with SQL will

00:47:20,000 --> 00:47:23,930
be at which is your Select statement so

00:47:22,580 --> 00:47:26,660
basically what this select statement

00:47:23,930 --> 00:47:30,350
does is that allows you to show certain

00:47:26,660 --> 00:47:32,600
parts of a table depending on what it do

00:47:30,350 --> 00:47:34,160
yeah you are surely different parts of a

00:47:32,600 --> 00:47:38,630
table depending on what you tell it to

00:47:34,160 --> 00:47:45,430
so okay I shall start off with the most

00:47:38,630 --> 00:47:45,430
simple most simple of select statements

00:47:57,279 --> 00:48:05,420
okay so um yeah so this is um one of our

00:48:03,220 --> 00:48:06,829
one of the ways you can type in a select

00:48:05,420 --> 00:48:09,529
statement is the most important which is

00:48:06,829 --> 00:48:13,220
a select star from employees

00:48:09,529 --> 00:48:18,769
so this basically the format of a select

00:48:13,220 --> 00:48:21,769
statement is it's like this okay

00:48:18,769 --> 00:48:25,010
so first you type in the select and then

00:48:21,769 --> 00:48:29,359
the name of your the name of the columns

00:48:25,010 --> 00:48:33,289
you want to show and then from and then

00:48:29,359 --> 00:48:35,240
the name of your table now if you want

00:48:33,289 --> 00:48:38,839
to show all columns you can just easily

00:48:35,240 --> 00:48:42,710
use asterisk I don't know about or

00:48:38,839 --> 00:48:45,589
rather SQL be but that this is um this

00:48:42,710 --> 00:48:48,049
is you want to show all the tables so

00:48:45,589 --> 00:48:50,150
now if I okay now the thing about the

00:48:48,049 --> 00:48:53,589
Select statement is that you can't just

00:48:50,150 --> 00:48:56,539
select okay

00:48:53,589 --> 00:48:58,190
Python won't be able to show you what

00:48:56,539 --> 00:49:00,170
you select straight away you have to

00:48:58,190 --> 00:49:03,140
print it out yourself so basically what

00:49:00,170 --> 00:49:05,299
it does is that cursor will be able to

00:49:03,140 --> 00:49:07,279
keep the data that you have collected

00:49:05,299 --> 00:49:11,150
but then it won't be able to show it

00:49:07,279 --> 00:49:14,029
really so to be able to print out the

00:49:11,150 --> 00:49:16,599
data that you select but okay do just

00:49:14,029 --> 00:49:16,599
follow along

00:49:24,469 --> 00:49:30,749
okay so for this command why it does is

00:49:29,430 --> 00:49:33,599
that it creates a variable called data

00:49:30,749 --> 00:49:36,390
and then it's going to assign whatever

00:49:33,599 --> 00:49:39,869
data you can fetch from this cursor into

00:49:36,390 --> 00:49:41,339
the data variable so now all your

00:49:39,869 --> 00:49:44,099
information is thought inside data you

00:49:41,339 --> 00:49:45,779
can actually use okay this is not part

00:49:44,099 --> 00:49:49,049
in this workshop because it does get a

00:49:45,779 --> 00:49:54,809
bit technical but you can copy this

00:49:49,049 --> 00:49:57,170
command and it should work on your in

00:49:54,809 --> 00:50:12,059
your Python as well

00:49:57,170 --> 00:50:14,430
okay for ruined it okay so so yeah

00:50:12,059 --> 00:50:16,019
basically you do roughly go through

00:50:14,430 --> 00:50:18,769
write basically what this does is it

00:50:16,019 --> 00:50:22,529
just takes every row every record in

00:50:18,769 --> 00:50:24,299
whatever has whatever record is inside

00:50:22,529 --> 00:50:27,630
data and then you are printing out each

00:50:24,299 --> 00:50:30,450
record row by row so if let's say I try

00:50:27,630 --> 00:50:33,109
to run this statement you'll see that

00:50:30,450 --> 00:50:35,940
yeah it prints out all the records from

00:50:33,109 --> 00:50:37,559
your table

00:50:35,940 --> 00:50:38,969
yeah you just bring out all the records

00:50:37,559 --> 00:50:42,960
for the table and it will show you every

00:50:38,969 --> 00:50:46,979
single column as well yeah it's actually

00:50:42,960 --> 00:50:48,269
yeah is actually pretty simple and you

00:50:46,979 --> 00:50:49,979
realize that yeah

00:50:48,269 --> 00:50:51,869
by doing this right you don't even need

00:50:49,979 --> 00:50:53,339
to use the B browser to check you know

00:50:51,869 --> 00:50:55,529
what's inside your table anymore because

00:50:53,339 --> 00:50:57,059
you can you can simply use the Select

00:50:55,529 --> 00:51:00,079
statement along with the printing to

00:50:57,059 --> 00:51:03,960
show you what's inside a table okay so

00:51:00,079 --> 00:51:05,640
we can achieve change our select

00:51:03,960 --> 00:51:07,739
statements to from it to do something

00:51:05,640 --> 00:51:11,430
things so like for example let's say if

00:51:07,739 --> 00:51:14,099
I just want each employees name and

00:51:11,430 --> 00:51:15,989
birthday I can t just specify that right

00:51:14,099 --> 00:51:17,700
if I don't want any other redundant

00:51:15,989 --> 00:51:19,979
information I can actually just type in

00:51:17,700 --> 00:51:21,900
select name birthday from employees you

00:51:19,979 --> 00:51:25,589
run that and you actually just show you

00:51:21,900 --> 00:51:27,359
all of the employees names and birthdays

00:51:25,589 --> 00:51:32,729
yeah and without all the other

00:51:27,359 --> 00:51:34,890
information yeah and you can type in

00:51:32,729 --> 00:51:35,780
other column names as well let's say if

00:51:34,890 --> 00:51:38,090
you want each

00:51:35,780 --> 00:51:40,700
person's name with that age I like the

00:51:38,090 --> 00:51:45,500
agent your birthday you can do that as

00:51:40,700 --> 00:51:48,190
well but yeah that that's one thing in

00:51:45,500 --> 00:51:50,300
catch it do with a select statement

00:51:48,190 --> 00:51:58,190
other things you can do if a select

00:51:50,300 --> 00:52:08,690
statement is actually over here I'm

00:51:58,190 --> 00:52:11,270
sorry okay yeah so this is the next oh

00:52:08,690 --> 00:52:13,250
this is the next part of the selecting

00:52:11,270 --> 00:52:15,740
okay the thing about selection is that

00:52:13,250 --> 00:52:17,390
it can be very there's a lot of things

00:52:15,740 --> 00:52:19,910
you can do you can change with a select

00:52:17,390 --> 00:52:23,330
statement so one of the things catchy

00:52:19,910 --> 00:52:25,100
change is or rather one of the one of

00:52:23,330 --> 00:52:27,500
the things you can include with a select

00:52:25,100 --> 00:52:29,690
statement is a where clause so basically

00:52:27,500 --> 00:52:32,510
what I wear cross is is that it allows

00:52:29,690 --> 00:52:36,050
you to filter out the table or rather it

00:52:32,510 --> 00:52:38,300
allows you filter out certain for you to

00:52:36,050 --> 00:52:40,880
pin up only certain records what I mean

00:52:38,300 --> 00:52:45,230
by that is let's say if I just want all

00:52:40,880 --> 00:52:47,600
the records of people's names who start

00:52:45,230 --> 00:52:51,410
with an L or the other records I do not

00:52:47,600 --> 00:52:53,720
want so this this way across will be

00:52:51,410 --> 00:52:58,390
what allows you to do something I did

00:52:53,720 --> 00:53:04,340
okay so give you a quick demonstration I

00:52:58,390 --> 00:53:08,150
shall start with okay now let's say I

00:53:04,340 --> 00:53:13,100
just want all the records whose H start

00:53:08,150 --> 00:53:18,010
with 42 okay so let's do we're okay and

00:53:13,100 --> 00:53:24,470
the way you type this is H sorry H

00:53:18,010 --> 00:53:28,370
equals to 42 okay so yeah when you run

00:53:24,470 --> 00:53:30,170
this command what you're going to see is

00:53:28,370 --> 00:53:32,090
that is only going to print out these

00:53:30,170 --> 00:53:35,900
two rather than print out the whole

00:53:32,090 --> 00:53:38,030
table and yeah you'll see that yeah

00:53:35,900 --> 00:53:40,040
these two records both of them have h 42

00:53:38,030 --> 00:53:44,270
on them and then the rest they don't get

00:53:40,040 --> 00:53:45,530
printed okay so yeah that's one of the

00:53:44,270 --> 00:53:47,900
ways you can use the where clause

00:53:45,530 --> 00:53:49,430
another way you can use this actually is

00:53:47,900 --> 00:53:57,290
there's actually multiple

00:53:49,430 --> 00:54:00,710
different ways you can yeah good

00:53:57,290 --> 00:54:03,950
question okay in in a normal or pipe

00:54:00,710 --> 00:54:05,569
okay when you use the double when you

00:54:03,950 --> 00:54:07,190
use a conditioner in Python right it's

00:54:05,569 --> 00:54:09,770
always in double equal signs by then in

00:54:07,190 --> 00:54:11,380
sq alright they don't really assign

00:54:09,770 --> 00:54:14,690
anything to anything so they just use

00:54:11,380 --> 00:54:18,079
they use the equal sign as comparison

00:54:14,690 --> 00:54:20,450
rather than just assignment so in this

00:54:18,079 --> 00:54:23,450
case actually I'm not sure whether using

00:54:20,450 --> 00:54:25,430
double equals work okay yeah using

00:54:23,450 --> 00:54:27,710
double equals over as well if you want

00:54:25,430 --> 00:54:29,960
to but I think it's safer to just keep

00:54:27,710 --> 00:54:35,200
it to equals just one equal sign to make

00:54:29,960 --> 00:54:35,200
it more readable as well yeah so okay

00:54:35,260 --> 00:54:41,599
yeah so the thing is they're actually

00:54:40,010 --> 00:54:44,059
multiple different kinds of conditionals

00:54:41,599 --> 00:54:47,630
that you can use one of it is actually

00:54:44,059 --> 00:54:52,730
equals two yeah this is the one that we

00:54:47,630 --> 00:54:56,690
have just used earlier and then the next

00:54:52,730 --> 00:54:58,549
one is a does not equal two yeah this

00:54:56,690 --> 00:55:00,260
key just does exactly what you think it

00:54:58,549 --> 00:55:04,640
does right like let's see if I just

00:55:00,260 --> 00:55:07,730
replace this with not equal to statement

00:55:04,640 --> 00:55:10,010
you just print out everything that whose

00:55:07,730 --> 00:55:11,960
H is not equal to 42 so instead these

00:55:10,010 --> 00:55:18,020
two records are the ones which are

00:55:11,960 --> 00:55:20,569
omitted in your in your printing okay

00:55:18,020 --> 00:55:22,309
and then there's also different other

00:55:20,569 --> 00:55:24,349
different kinds of conditionals like

00:55:22,309 --> 00:55:28,190
that's less than more than so let's see

00:55:24,349 --> 00:55:30,890
if I try to use you know more than then

00:55:28,190 --> 00:55:32,950
you get you know all of the records

00:55:30,890 --> 00:55:35,690
which are more than 42 and then if you

00:55:32,950 --> 00:55:41,109
do less than then you get ones which are

00:55:35,690 --> 00:55:43,940
less than 42 if you do actually also to

00:55:41,109 --> 00:55:47,809
you know less than or it goes to more

00:55:43,940 --> 00:55:50,150
than or equals to ya those will be yeah

00:55:47,809 --> 00:55:53,720
the different kinds you can use and then

00:55:50,150 --> 00:55:55,579
yeah one important thing one important

00:55:53,720 --> 00:55:57,799
thing to take note about these

00:55:55,579 --> 00:55:59,569
conditioners is that you should really

00:55:57,799 --> 00:56:02,030
only be using them for numerical data

00:55:59,569 --> 00:56:03,170
types like integer or view because I

00:56:02,030 --> 00:56:04,849
mean it

00:56:03,170 --> 00:56:06,829
kinda doesn't make sense for you to

00:56:04,849 --> 00:56:08,780
check whether the name is more than a

00:56:06,829 --> 00:56:10,579
certain name or less than a certain name

00:56:08,780 --> 00:56:12,049
so yeah

00:56:10,579 --> 00:56:16,089
this really only be used for numerical

00:56:12,049 --> 00:56:16,089
datatypes yeah

00:56:18,280 --> 00:56:22,780
in case you skip right through this

00:56:21,230 --> 00:56:27,109
cause we have went through this already

00:56:22,780 --> 00:56:28,940
okay so yeah this is um so now we'll be

00:56:27,109 --> 00:56:32,540
going on into the next conditional which

00:56:28,940 --> 00:56:33,980
is called a like conditional so

00:56:32,540 --> 00:56:36,349
basically yeah it works similarly to

00:56:33,980 --> 00:56:38,359
other conditionals like the ones that we

00:56:36,349 --> 00:56:40,760
have went through earlier but then the

00:56:38,359 --> 00:56:42,950
thing is is basically used for columns

00:56:40,760 --> 00:56:47,119
containing text data instead of integer

00:56:42,950 --> 00:56:48,950
data so yeah the thing about this like

00:56:47,119 --> 00:56:50,599
conditional is that yeah it just checks

00:56:48,950 --> 00:56:55,549
whether a text is similar to another

00:56:50,599 --> 00:56:58,460
text so an example of SQL command for

00:56:55,549 --> 00:57:00,559
Sambia that would be this where you can

00:56:58,460 --> 00:57:04,220
see the name sorry

00:57:00,559 --> 00:57:05,630
where like or rather the equals or

00:57:04,220 --> 00:57:09,079
whatever is actually replaced by the

00:57:05,630 --> 00:57:10,880
word like and yeah you can see that yeah

00:57:09,079 --> 00:57:14,440
if I let's see if I try to run this

00:57:10,880 --> 00:57:14,440
statement in my SQL

00:57:28,280 --> 00:57:34,980
okay yeah um so we run a command where

00:57:32,190 --> 00:57:37,500
name is like Jack bombers you're just

00:57:34,980 --> 00:57:42,630
bring out the one record where you know

00:57:37,500 --> 00:57:45,480
it's is Jack Thomas's name yeah so yeah

00:57:42,630 --> 00:57:47,250
right now it seems like okay okay only

00:57:45,480 --> 00:57:51,300
you can like basically is like a

00:57:47,250 --> 00:57:55,440
one-to-one match yeah yeah I'll be going

00:57:51,300 --> 00:57:57,060
on internet charlie yeah so yeah right

00:57:55,440 --> 00:58:00,660
now it's just a one-to-one match where

00:57:57,060 --> 00:58:04,170
name is like maybe so it has to be

00:58:00,660 --> 00:58:06,810
exactly the same text but then the thing

00:58:04,170 --> 00:58:09,180
is when you move on to the next part

00:58:06,810 --> 00:58:11,880
right let's say if we just have an

00:58:09,180 --> 00:58:12,960
employee's just part of an employee's

00:58:11,880 --> 00:58:15,540
name you don't know the person's full

00:58:12,960 --> 00:58:18,120
name right you can at least do get a

00:58:15,540 --> 00:58:19,830
scale to return the record and the way

00:58:18,120 --> 00:58:23,960
to do that is actually using this thing

00:58:19,830 --> 00:58:27,000
characters so these were characters are

00:58:23,960 --> 00:58:35,160
basically they allow you to replace

00:58:27,000 --> 00:58:37,530
certain certain parts of okay I'll show

00:58:35,160 --> 00:58:38,820
you what I mean by that now let's say if

00:58:37,530 --> 00:58:40,170
we try to take out this question okay

00:58:38,820 --> 00:58:42,300
given just part of an employee's name

00:58:40,170 --> 00:58:45,330
kena how can I get a scale to still

00:58:42,300 --> 00:58:49,590
return a record the way that you all do

00:58:45,330 --> 00:58:52,710
that is let's see okay so I have kena

00:58:49,590 --> 00:58:54,060
but um now the thing is I want to check

00:58:52,710 --> 00:58:57,240
for all the names that start with Tina

00:58:54,060 --> 00:58:59,070
and whatever after that it doesn't

00:58:57,240 --> 00:59:01,110
matter as long as it starts with Tina

00:58:59,070 --> 00:59:03,810
I wanna print it out so the way you can

00:59:01,110 --> 00:59:06,060
do that is to use our character which is

00:59:03,810 --> 00:59:08,970
the percentage sign so this percentage

00:59:06,060 --> 00:59:11,010
sign allows you basically it can be

00:59:08,970 --> 00:59:13,500
placed one it can be please zero or more

00:59:11,010 --> 00:59:19,440
characters so if let's say in this case

00:59:13,500 --> 00:59:22,880
I use the percentage sign here it will

00:59:19,440 --> 00:59:26,160
eat what let's say if this checks with

00:59:22,880 --> 00:59:28,260
my first my first record which is Lim

00:59:26,160 --> 00:59:30,480
Jeong you'll see okay complete zero

00:59:28,260 --> 00:59:32,730
match you know because static unites us

00:59:30,480 --> 00:59:34,230
if Lee okay then you go through okay

00:59:32,730 --> 00:59:35,700
this doesn't match this as a message

00:59:34,230 --> 00:59:38,040
doesn't match and then you'll come here

00:59:35,700 --> 00:59:41,010
and then you see that okay Tina matches

00:59:38,040 --> 00:59:43,859
the first part of my string let's see

00:59:41,010 --> 00:59:46,530
what about this oh okay zero or more

00:59:43,859 --> 00:59:50,850
characters after that right for my diss

00:59:46,530 --> 00:59:52,230
record I have six crackers after Tina it

00:59:50,850 --> 00:59:54,470
doesn't matter what characters those are

00:59:52,230 --> 00:59:57,869
as long as it's any number of characters

00:59:54,470 --> 01:00:00,780
it can be taken up by this percentage

00:59:57,869 --> 01:00:03,030
sign so you'll be so this string and

01:00:00,780 --> 01:00:04,350
this string will have a perfect match

01:00:03,030 --> 01:00:08,460
okay

01:00:04,350 --> 01:00:10,710
so when you try to run this command what

01:00:08,460 --> 01:00:14,030
you'll see is that actually yeah it does

01:00:10,710 --> 01:00:20,220
print out the record for Tina fools yeah

01:00:14,030 --> 01:00:22,680
now okay so yeah this is one of the work

01:00:20,220 --> 01:00:26,460
characters that you can use another one

01:00:22,680 --> 01:00:28,050
you can use is uh okay kind of unlikely

01:00:26,460 --> 01:00:30,420
situation by let's see if you forget

01:00:28,050 --> 01:00:32,070
what's the first letter of of this

01:00:30,420 --> 01:00:34,350
person's name okay let's say you think

01:00:32,070 --> 01:00:35,730
is Gina foods instead of something but

01:00:34,350 --> 01:00:39,090
you're not sure okay

01:00:35,730 --> 01:00:42,320
another way another in this situation

01:00:39,090 --> 01:00:44,880
you can use another Walker correct call

01:00:42,320 --> 01:00:46,410
the underscore so basically this

01:00:44,880 --> 01:00:49,880
underscore will only allow you to

01:00:46,410 --> 01:00:52,500
represent one character only okay so

01:00:49,880 --> 01:00:54,630
yeah let's see in this case I know that

01:00:52,500 --> 01:00:56,490
the person's name starts with some

01:00:54,630 --> 01:01:08,710
letter and then ena

01:00:56,490 --> 01:01:11,539
FUS G minute okay

01:01:08,710 --> 01:01:14,480
okay so if I use the underscore the fuss

01:01:11,539 --> 01:01:19,539
then you'll see that yeah once again it

01:01:14,480 --> 01:01:19,539
just brings up you just bring up the

01:01:19,930 --> 01:01:26,450
yeah you're just pretty not the one

01:01:22,490 --> 01:01:27,980
record which fits this string and the

01:01:26,450 --> 01:01:30,289
thing is this can only represent one

01:01:27,980 --> 01:01:35,869
character so let's say if I represent

01:01:30,289 --> 01:01:39,589
the I this running this command will no

01:01:35,869 --> 01:01:42,079
longer print anything because yeah it

01:01:39,589 --> 01:01:46,309
doesn't fit the Select statement anymore

01:01:42,079 --> 01:01:51,200
yeah so okay a very interesting way you

01:01:46,309 --> 01:01:55,390
can use this this underscore as well is

01:01:51,200 --> 01:01:58,940
let's say if you want to find someone's

01:01:55,390 --> 01:02:01,160
first part of the name which is for

01:01:58,940 --> 01:02:05,210
crack that's long okay so if I want to

01:02:01,160 --> 01:02:06,740
find other than first okay yeah if their

01:02:05,210 --> 01:02:09,289
first word in their name starts with

01:02:06,740 --> 01:02:13,010
four characters I can do four

01:02:09,289 --> 01:02:15,740
underscores followed by a space and then

01:02:13,010 --> 01:02:17,059
a percentage sign okay so you can

01:02:15,740 --> 01:02:19,099
actually use this what characters in

01:02:17,059 --> 01:02:21,650
very special ways to find exactly what

01:02:19,099 --> 01:02:24,470
you're looking for so if you run this

01:02:21,650 --> 01:02:27,200
command you'll see that yeah you'll just

01:02:24,470 --> 01:02:29,630
bring out all the records where you know

01:02:27,200 --> 01:02:33,170
the first word of your name for four

01:02:29,630 --> 01:02:34,700
characters long yeah so you have a lot

01:02:33,170 --> 01:02:37,670
of flexibility with how use this what

01:02:34,700 --> 01:02:43,000
characters and that's what makes the

01:02:37,670 --> 01:02:46,309
like cross very very versatile yeah

01:02:43,000 --> 01:02:49,849
so we move on to our next next other

01:02:46,309 --> 01:02:52,819
conditionals okay the first one being

01:02:49,849 --> 01:02:55,490
the end conditional so basically this is

01:02:52,819 --> 01:03:01,609
like how you use and in English right

01:02:55,490 --> 01:03:03,799
you know something and something yeah so

01:03:01,609 --> 01:03:06,349
I'll just quickly run through this

01:03:03,799 --> 01:03:10,579
explanation now let's say if we try to

01:03:06,349 --> 01:03:12,440
do a check on on the SQL table and then

01:03:10,579 --> 01:03:14,420
we want something to be eCos or

01:03:12,440 --> 01:03:17,210
something okay so we do a check off is

01:03:14,420 --> 01:03:19,760
one is equal to two and if a equals

01:03:17,210 --> 01:03:21,770
affair okay in this case

01:03:19,760 --> 01:03:25,340
both one is equal to two is force a

01:03:21,770 --> 01:03:27,710
equals to face false so when he when he

01:03:25,340 --> 01:03:29,420
runs through this you would just give

01:03:27,710 --> 01:03:31,340
you a you just give you a false result

01:03:29,420 --> 01:03:33,170
it means that let's say for that record

01:03:31,340 --> 01:03:35,660
right if the name is equals to 1 or

01:03:33,170 --> 01:03:39,650
rather if the H is equals to 1 and the

01:03:35,660 --> 01:03:43,280
name is equals to a this check will just

01:03:39,650 --> 01:03:45,350
not go through at all okay then in this

01:03:43,280 --> 01:03:47,030
case only one of it is true 1 is equals

01:03:45,350 --> 01:03:50,270
to 1 and s equals affair one of it is

01:03:47,030 --> 01:03:51,860
true another one is false once again the

01:03:50,270 --> 01:03:53,870
record was do not be pinned up because

01:03:51,860 --> 01:03:57,710
both conditioners need to be true which

01:03:53,870 --> 01:04:01,000
is what I show in the next example so in

01:03:57,710 --> 01:04:03,440
this case true and true only when both

01:04:01,000 --> 01:04:05,660
conditionals are true then it will

01:04:03,440 --> 01:04:09,080
actually give you you actually print out

01:04:05,660 --> 01:04:12,530
the record for you ok so to show you

01:04:09,080 --> 01:04:15,950
that in action let's see if I still have

01:04:12,530 --> 01:04:19,310
this name like so you know that this one

01:04:15,950 --> 01:04:21,230
will already print out three records for

01:04:19,310 --> 01:04:25,010
you right so now let's say I add in an

01:04:21,230 --> 01:04:33,800
additional an additional condition which

01:04:25,010 --> 01:04:37,310
is let's say if I want to get only all

01:04:33,800 --> 01:04:42,500
of the records where the name starts

01:04:37,310 --> 01:04:48,370
with four characters and da and then H

01:04:42,500 --> 01:04:51,410
is greater or rather is less than 45 ok

01:04:48,370 --> 01:04:56,210
so if I try to run this you'll see that

01:04:51,410 --> 01:04:58,910
um only two records I type in but this

01:04:56,210 --> 01:05:00,230
time wrong because of the tree right

01:04:58,910 --> 01:05:07,400
cause here

01:05:00,230 --> 01:05:10,400
only 46 it's not it's not less than 45

01:05:07,400 --> 01:05:13,250
so you see that ok you pin these two

01:05:10,400 --> 01:05:16,760
records and these two records are the

01:05:13,250 --> 01:05:22,270
only ones that satisfy both this and

01:05:16,760 --> 01:05:22,270
this in the table yeah

01:05:24,109 --> 01:05:31,799
okay so we'll move on to our or

01:05:28,470 --> 01:05:34,049
conditioner so basically what this or

01:05:31,799 --> 01:05:36,390
conditioner does is that it's kind of

01:05:34,049 --> 01:05:42,289
similar to your end as well

01:05:36,390 --> 01:05:45,269
and yeah basically instead of gel of

01:05:42,289 --> 01:05:48,480
just bringing our record when only one

01:05:45,269 --> 01:05:53,640
when both are true all conditional pins

01:05:48,480 --> 01:05:55,829
are when both when either one is are

01:05:53,640 --> 01:05:58,980
true as well so let's say when you look

01:05:55,829 --> 01:06:00,660
at this yeah instead of okay you compare

01:05:58,980 --> 01:06:03,809
this to your previous and conditional

01:06:00,660 --> 01:06:07,559
right where where even if only one is

01:06:03,809 --> 01:06:10,559
true it still won't print for all

01:06:07,559 --> 01:06:13,829
conditional it will print even if one of

01:06:10,559 --> 01:06:16,230
it is false so let's see if we translate

01:06:13,829 --> 01:06:19,980
that to this situation over here okay

01:06:16,230 --> 01:06:22,319
now if I replace this with a statement

01:06:19,980 --> 01:06:27,180
what is going to do is that is going to

01:06:22,319 --> 01:06:31,140
print out all the names whose first word

01:06:27,180 --> 01:06:35,549
start with four characters oh you're

01:06:31,140 --> 01:06:39,960
print out or or if the record has H less

01:06:35,549 --> 01:06:44,130
than forty five or it can be both okay

01:06:39,960 --> 01:06:45,900
so if I try to run this command you'll

01:06:44,130 --> 01:06:49,519
see that yeah

01:06:45,900 --> 01:06:54,109
this has more records than your previous

01:06:49,519 --> 01:06:59,279
and your previous end statement and

01:06:54,109 --> 01:07:01,700
other and like when you only select the

01:06:59,279 --> 01:07:04,799
records which that before fall at us so

01:07:01,700 --> 01:07:06,569
yeah for any of these records here the

01:07:04,799 --> 01:07:16,270
idols that we for work four characters

01:07:06,569 --> 01:07:18,930
or ages less than 45 yeah okay

01:07:16,270 --> 01:07:22,120
then the thing about these and all

01:07:18,930 --> 01:07:23,860
conditionals is that you actually you

01:07:22,120 --> 01:07:27,220
can actually achieve them one after

01:07:23,860 --> 01:07:28,660
another and yeah you could result in

01:07:27,220 --> 01:07:31,300
commands which are very complicated as

01:07:28,660 --> 01:07:34,930
you can see on the screen

01:07:31,300 --> 01:07:37,090
so these conditionals that become a bit

01:07:34,930 --> 01:07:40,060
more hard to wrap your head around

01:07:37,090 --> 01:07:42,460
because I mean yeah you don't you know

01:07:40,060 --> 01:07:46,930
exactly know what record this is going

01:07:42,460 --> 01:07:49,690
to return you okay so I think it is

01:07:46,930 --> 01:07:53,230
important to take note that um Python

01:07:49,690 --> 01:07:55,540
actually run or rather SQL actually runs

01:07:53,230 --> 01:07:58,660
this actually checks through this

01:07:55,540 --> 01:08:01,330
conditionals from left to right okay so

01:07:58,660 --> 01:08:03,430
let's say yeah you have this kind of SQL

01:08:01,330 --> 01:08:08,050
command basically what you actually do

01:08:03,430 --> 01:08:09,700
is that you're actually check your check

01:08:08,050 --> 01:08:12,220
for this condition of us and this

01:08:09,700 --> 01:08:16,560
conditioner and then it will evaluate

01:08:12,220 --> 01:08:19,150
though you'll evaluate this whole thing

01:08:16,560 --> 01:08:20,529
okay so whiskey your check whether it is

01:08:19,150 --> 01:08:22,569
true check whether it is true and then

01:08:20,529 --> 01:08:26,230
yo check whether this is true or false

01:08:22,569 --> 01:08:27,580
okay and then if let's say yeah and then

01:08:26,230 --> 01:08:30,010
so let's say you have a value here

01:08:27,580 --> 01:08:33,220
already and then you will check this one

01:08:30,010 --> 01:08:36,460
and then you will check this against

01:08:33,220 --> 01:08:41,799
this with the all with all conditional

01:08:36,460 --> 01:08:47,950
yeah so we can actually try this in our

01:08:41,799 --> 01:08:50,710
in our Python script as well let's say

01:08:47,950 --> 01:08:57,000
if we do this command over here where we

01:08:50,710 --> 01:08:57,000
do name like centage

01:09:05,239 --> 01:09:12,659
okay so basically if I try to run this

01:09:09,329 --> 01:09:15,900
command here sorry

01:09:12,659 --> 01:09:18,539
okay okay this table isn't exactly the

01:09:15,900 --> 01:09:21,779
best example you can use to show this

01:09:18,539 --> 01:09:23,659
because right now we only have we only

01:09:21,779 --> 01:09:26,639
have two conditionals and you only

01:09:23,659 --> 01:09:29,489
filters at one record but the main idea

01:09:26,639 --> 01:09:31,349
here is basically you while you were

01:09:29,489 --> 01:09:35,880
check whether this is true for us and

01:09:31,349 --> 01:09:37,739
whether this is true and then and then

01:09:35,880 --> 01:09:39,089
depending on okay let's say for example

01:09:37,739 --> 01:09:43,369
we check this against the first red card

01:09:39,089 --> 01:09:48,150
okay the first red card is is this one

01:09:43,369 --> 01:09:49,529
if so when name is like L basically this

01:09:48,150 --> 01:09:52,380
is basically if there's a capital L

01:09:49,529 --> 01:09:56,969
anywhere inside your inside your string

01:09:52,380 --> 01:09:59,909
it will it will it will be true so this

01:09:56,969 --> 01:10:01,889
will be considered true this will be

01:09:59,909 --> 01:10:03,659
considered true for the first record as

01:10:01,889 --> 01:10:09,739
well so true and true or it a new true

01:10:03,659 --> 01:10:15,090
okay now if I follow that up with all H

01:10:09,739 --> 01:10:18,239
is more than 20 for example okay you'll

01:10:15,090 --> 01:10:35,369
see that okay oh no sorry this this is

01:10:18,239 --> 01:10:39,479
our this is not work HP ok so if you see

01:10:35,369 --> 01:10:40,860
this where HP is like nine so basically

01:10:39,479 --> 01:10:43,699
this will return you other hand phone

01:10:40,860 --> 01:10:46,739
numbers or we start with nine and then

01:10:43,699 --> 01:10:48,630
yeah wait you don't know if you place an

01:10:46,739 --> 01:10:49,440
event it so now you know that this for

01:10:48,630 --> 01:10:51,690
sure would be false

01:10:49,440 --> 01:10:54,749
okay we have previously said that this

01:10:51,690 --> 01:10:57,150
would be true right so a true or false

01:10:54,749 --> 01:10:59,880
in this case you might think that okay

01:10:57,150 --> 01:11:02,489
um the first record my still not be

01:10:59,880 --> 01:11:06,769
printed but in this case energy will be

01:11:02,489 --> 01:11:10,349
okay so let's see if we try run this

01:11:06,769 --> 01:11:12,790
okay not only do you have this extra

01:11:10,349 --> 01:11:16,540
other records here you also have the

01:11:12,790 --> 01:11:21,160
called record as well because it is true

01:11:16,540 --> 01:11:23,620
for the first part of your select

01:11:21,160 --> 01:11:25,330
statement yeah this is where things get

01:11:23,620 --> 01:11:27,240
a bit more complicated because you know

01:11:25,330 --> 01:11:29,260
like you kind of have to do a bit of

01:11:27,240 --> 01:11:30,790
like calculation and see whether

01:11:29,260 --> 01:11:32,290
something is true or false and then like

01:11:30,790 --> 01:11:34,480
check whether something is true and true

01:11:32,290 --> 01:11:38,020
or true and false or things like that

01:11:34,480 --> 01:11:40,120
but yeah this this takes a bit of

01:11:38,020 --> 01:11:42,520
practice to get down but this is the

01:11:40,120 --> 01:11:46,960
main idea behind how to use this order

01:11:42,520 --> 01:11:48,910
of condition oza yeah okay we move on to

01:11:46,960 --> 01:11:51,430
something which is slightly more easy

01:11:48,910 --> 01:11:55,870
which is let's say if you want to sort

01:11:51,430 --> 01:11:59,080
out certain tables okay so now let's say

01:11:55,870 --> 01:12:01,600
I have this select statement and it

01:11:59,080 --> 01:12:04,300
prints out this number of records okay

01:12:01,600 --> 01:12:07,450
cool I okay sorry I've no idea why I

01:12:04,300 --> 01:12:13,510
just did that let me try to render again

01:12:07,450 --> 01:12:15,730
oh wait no nevermind okay so so yeah

01:12:13,510 --> 01:12:20,920
you'll see that the record prints out

01:12:15,730 --> 01:12:24,730
these view records and now let's say I

01:12:20,920 --> 01:12:25,750
want to order them by something not

01:12:24,730 --> 01:12:28,630
right now you can see that they're all

01:12:25,750 --> 01:12:31,660
being sorted by the employee ID because

01:12:28,630 --> 01:12:34,390
you know one to eleven right but let's

01:12:31,660 --> 01:12:37,420
see if I want to sort the records by

01:12:34,390 --> 01:12:45,040
each for example okay the way to do that

01:12:37,420 --> 01:12:47,740
is to use auto PI and then the name of

01:12:45,040 --> 01:12:50,530
your column yeah so you're four you'll

01:12:47,740 --> 01:12:54,460
be following this you'll be following

01:12:50,530 --> 01:12:58,360
this syntax in your yeah you'll be

01:12:54,460 --> 01:13:01,810
following this syntax in your command so

01:12:58,360 --> 01:13:05,410
you use order by and then you use the

01:13:01,810 --> 01:13:07,060
name of your column which is um let's

01:13:05,410 --> 01:13:12,190
see yeah so in this case we are using we

01:13:07,060 --> 01:13:15,300
are ordering by H so yeah and then after

01:13:12,190 --> 01:13:19,630
that you follow it up with either

01:13:15,300 --> 01:13:20,920
ascending or descending yeah so it's

01:13:19,630 --> 01:13:23,970
only one or the other you don't include

01:13:20,920 --> 01:13:26,770
both or else the program gets confused

01:13:23,970 --> 01:13:28,930
so if you try to run this

01:13:26,770 --> 01:13:31,870
come and you'll see that instead of

01:13:28,930 --> 01:13:33,730
printing out everything by employee ID

01:13:31,870 --> 01:13:34,540
you'll see that you know the author is

01:13:33,730 --> 01:13:38,170
actually different now

01:13:34,540 --> 01:13:41,770
you spin that out by yeah it's print out

01:13:38,170 --> 01:13:49,560
in um in ascending age and then if you

01:13:41,770 --> 01:13:52,930
replace this with descending age then

01:13:49,560 --> 01:13:57,550
yeah it does the opposite order

01:13:52,930 --> 01:13:59,950
yeah so this one's pretty simple but

01:13:57,550 --> 01:14:02,800
yeah it can be pretty useful sometimes

01:13:59,950 --> 01:14:05,260
if you want to find a specific like

01:14:02,800 --> 01:14:07,300
house a if you want to arrange other if

01:14:05,260 --> 01:14:12,360
you want to change the order of the way

01:14:07,300 --> 01:14:12,360
that your table prints up values yeah

01:14:13,260 --> 01:14:21,940
okay so yeah we quickly run through the

01:14:17,200 --> 01:14:28,719
last two parts of our yeah the last two

01:14:21,940 --> 01:14:30,390
parts of our of our workshop yeah okay

01:14:28,719 --> 01:14:34,030
that works

01:14:30,390 --> 01:14:36,040
so yeah the last two parts will be about

01:14:34,030 --> 01:14:38,260
how to update the current records which

01:14:36,040 --> 01:14:44,640
are inside a table and how to delete

01:14:38,260 --> 01:14:48,880
records or delete the table okay so um

01:14:44,640 --> 01:14:50,110
yeah we all start another actually what

01:14:48,880 --> 01:14:50,800
we don't need the Select statement

01:14:50,110 --> 01:14:55,570
anymore

01:14:50,800 --> 01:15:00,670
we can okay so our next part will be on

01:14:55,570 --> 01:15:02,050
how to update so now let's say I want to

01:15:00,670 --> 01:15:04,920
change my home phone number okay I

01:15:02,050 --> 01:15:07,660
changed my name phone number into

01:15:04,920 --> 01:15:09,489
something like nine one two three four

01:15:07,660 --> 01:15:16,630
five six seven okay

01:15:09,489 --> 01:15:21,060
the way that you use this is to give me

01:15:16,630 --> 01:15:23,440
me okay so that's the format for this um

01:15:21,060 --> 01:15:26,590
yeah for this record is actually like

01:15:23,440 --> 01:15:29,380
this but in this workshop we're only

01:15:26,590 --> 01:15:32,950
just we'll just change one of the

01:15:29,380 --> 01:15:36,190
columns just to make it simple so you

01:15:32,950 --> 01:15:38,770
see that yeah so

01:15:36,190 --> 01:15:44,230
okay I'll show you this in the context

01:15:38,770 --> 01:15:48,420
of this table so update in this case

01:15:44,230 --> 01:15:53,560
your table name so you'll be M ploidies

01:15:48,420 --> 01:15:54,670
set okay then from here you type in the

01:15:53,560 --> 01:16:00,550
name of the column that you want to

01:15:54,670 --> 01:16:02,790
change so let's say okay hold on give me

01:16:00,550 --> 01:16:02,790
a minute

01:16:12,060 --> 01:16:17,650
actually sorry let's using another

01:16:14,050 --> 01:16:21,280
example here let's see if you want to

01:16:17,650 --> 01:16:24,130
change the age of all of the employees

01:16:21,280 --> 01:16:27,690
inside our record okay so now the thing

01:16:24,130 --> 01:16:29,920
is right um okay

01:16:27,690 --> 01:16:35,260
conventionally actually H is not a slot

01:16:29,920 --> 01:16:39,100
inside the database of yeah not inside

01:16:35,260 --> 01:16:40,690
the base because let's say if you store

01:16:39,100 --> 01:16:42,850
this information and then next year

01:16:40,690 --> 01:16:44,530
comes you realize that actually all the

01:16:42,850 --> 01:16:46,900
ages have to be increased by one because

01:16:44,530 --> 01:16:50,380
you know people get older their ages

01:16:46,900 --> 01:16:53,380
change over time so the way to do that

01:16:50,380 --> 01:16:54,760
is that actually lets say yeah so most

01:16:53,380 --> 01:16:57,490
of the time people don't store it just a

01:16:54,760 --> 01:16:59,680
stop of this so that they can just

01:16:57,490 --> 01:17:01,840
calculate the age from the current year

01:16:59,680 --> 01:17:05,260
and the above days but then the thing is

01:17:01,840 --> 01:17:06,930
in this case you're using H so yeah

01:17:05,260 --> 01:17:09,970
let's say just for example we want to

01:17:06,930 --> 01:17:11,140
you still want to start H right we the

01:17:09,970 --> 01:17:12,850
way we can walk around this is let's say

01:17:11,140 --> 01:17:15,280
next here comes we can actually just

01:17:12,850 --> 01:17:16,920
increase all the ages by one and that's

01:17:15,280 --> 01:17:19,750
actually a very easy way you can do that

01:17:16,920 --> 01:17:21,550
which is we still start off with the

01:17:19,750 --> 01:17:24,340
same starting command which is at the

01:17:21,550 --> 01:17:27,840
employee set but then in this case you

01:17:24,340 --> 01:17:27,840
actually use H

01:17:32,710 --> 01:17:39,860
okay so this one is a bit more house a

01:17:37,610 --> 01:17:41,870
it gets a bit more technical because I

01:17:39,860 --> 01:17:45,860
mean this this Damon doesn't seem to

01:17:41,870 --> 01:17:48,350
make much sense now yet because you know

01:17:45,860 --> 01:17:52,040
he's trying to tell you okay H equals h

01:17:48,350 --> 01:17:55,250
plus 1 but okay the thing is in this

01:17:52,040 --> 01:17:56,840
case how they in this case right because

01:17:55,250 --> 01:17:58,280
you are using a set clothes over here

01:17:56,840 --> 01:17:59,840
right this is the one of the special

01:17:58,280 --> 01:18:03,280
cases where you actually do use

01:17:59,840 --> 01:18:05,660
assignments in SQL so in this case right

01:18:03,280 --> 01:18:07,760
these kinds of assignments actually work

01:18:05,660 --> 01:18:09,949
very similarly to Hardy to in Python so

01:18:07,760 --> 01:18:13,730
the one on the Left will actually be

01:18:09,949 --> 01:18:15,920
what you insert into and then one on the

01:18:13,730 --> 01:18:19,910
right is what you're going to insert

01:18:15,920 --> 01:18:21,920
into the left so in this case the H in

01:18:19,910 --> 01:18:23,929
the left is the column is the name of

01:18:21,920 --> 01:18:27,170
the column they inserting into and then

01:18:23,929 --> 01:18:29,120
this is the yeah this is the information

01:18:27,170 --> 01:18:32,120
that you're going to insert inside but

01:18:29,120 --> 01:18:34,370
the thing is basically what this H

01:18:32,120 --> 01:18:36,590
represents in the right side of the

01:18:34,370 --> 01:18:39,080
assignment is actually represents the

01:18:36,590 --> 01:18:43,280
current age of the record so in this

01:18:39,080 --> 01:18:44,810
case right if let's say for example we

01:18:43,280 --> 01:18:47,870
run called run this command for the

01:18:44,810 --> 01:18:51,469
first for the first part of the table

01:18:47,870 --> 01:18:53,600
right if yeah so we run this for first

01:18:51,469 --> 01:18:56,840
part of the table the H my current age

01:18:53,600 --> 01:18:58,580
18 okay what SQL actually do is that you

01:18:56,840 --> 01:19:03,080
will take this 18 you'll put this here

01:18:58,580 --> 01:19:06,350
so 18 plus 1 is 19 and then you assign

01:19:03,080 --> 01:19:10,520
this 19 back into H so this will be

01:19:06,350 --> 01:19:12,640
updated with 19 okay now let's say if we

01:19:10,520 --> 01:19:16,940
try to run this command and then we do

01:19:12,640 --> 01:19:19,580
and then we try to print out and then we

01:19:16,940 --> 01:19:25,760
try to see what happens the table after

01:19:19,580 --> 01:19:31,929
this okay we will be using TV browser

01:19:25,760 --> 01:19:35,380
making more convenience but uh okay so

01:19:31,929 --> 01:19:38,090
you'll see that um

01:19:35,380 --> 01:19:41,840
yeah from the previous information that

01:19:38,090 --> 01:19:43,140
you have inserted inside a table don't

01:19:41,840 --> 01:19:45,520
give me a minute

01:19:43,140 --> 01:19:54,100
yeah from the previous information they

01:19:45,520 --> 01:19:56,410
have insert that you can she see the

01:19:54,100 --> 01:20:00,610
difference in the edge over here

01:19:56,410 --> 01:20:03,970
it didn't has been updated to 1945 has

01:20:00,610 --> 01:20:06,340
been a beta 4635 has been updated 36 and

01:20:03,970 --> 01:20:08,380
then so on and so forth and the thing is

01:20:06,340 --> 01:20:09,790
if you run this command again let's say

01:20:08,380 --> 01:20:11,710
the next year comes and then like you

01:20:09,790 --> 01:20:15,700
new update the ages again you can

01:20:11,710 --> 01:20:17,350
actually whoops you can actually run the

01:20:15,700 --> 01:20:19,960
command again and yeah you'll just keep

01:20:17,350 --> 01:20:21,730
increasing so each time you run a

01:20:19,960 --> 01:20:23,980
command or the issue increased by one

01:20:21,730 --> 01:20:28,930
and that's roughly how you use the

01:20:23,980 --> 01:20:32,170
update update command in in SQLite we

01:20:28,930 --> 01:20:35,650
don't have enough time to run for

01:20:32,170 --> 01:20:37,510
everything but uh okay yeah we don't

01:20:35,650 --> 01:20:41,350
have enough time to run for everything

01:20:37,510 --> 01:20:48,070
but yeah this is the rough roughly you

01:20:41,350 --> 01:20:49,660
can use update okay so we'll just

01:20:48,070 --> 01:20:55,810
quickly run through in the last part of

01:20:49,660 --> 01:20:57,460
our our SQLite shop which is using a

01:20:55,810 --> 01:21:00,550
drop tables function so now let's say we

01:20:57,460 --> 01:21:02,500
have created this table but I don't know

01:21:00,550 --> 01:21:03,850
maybe your company goes bankrupt or

01:21:02,500 --> 01:21:07,210
something anyway I don't need this table

01:21:03,850 --> 01:21:08,560
anymore I can just drop this table yeah

01:21:07,210 --> 01:21:12,600
you can use this command called drop

01:21:08,560 --> 01:21:15,040
tables employees and what you'll do is

01:21:12,600 --> 01:21:17,340
you'll just remove the table from a

01:21:15,040 --> 01:21:20,650
database and if you run this in your

01:21:17,340 --> 01:21:22,210
company DB you can see that your table

01:21:20,650 --> 01:21:27,070
is gone forever

01:21:22,210 --> 01:21:32,290
so yeah this this wraps up the hands-on

01:21:27,070 --> 01:21:37,210
exercise of our workshop but um yeah see

01:21:32,290 --> 01:21:40,810
what else okay yeah we have a challenge

01:21:37,210 --> 01:21:43,420
over here actually but yeah the okay we

01:21:40,810 --> 01:21:45,390
won't have time to do this but this will

01:21:43,420 --> 01:21:48,670
be uploaded on to the Google Drive

01:21:45,390 --> 01:21:49,390
folder that we have shot you guys so if

01:21:48,670 --> 01:21:53,969
you guys want to try out this

01:21:49,390 --> 01:22:02,760
challengers yeah it's on the it's on the

01:21:53,969 --> 01:22:05,400
Google Drive folder yeah okay yeah yeah

01:22:02,760 --> 01:22:06,929
it's on the yeah it's you can access it

01:22:05,400 --> 01:22:08,909
true this for this URL just as a

01:22:06,929 --> 01:22:11,309
reminder and yeah you can find it on the

01:22:08,909 --> 01:22:12,689
challenge and the database that you're

01:22:11,309 --> 01:22:14,760
supposed to connect to is here as well

01:22:12,689 --> 01:22:18,840
with the answers if you want to check

01:22:14,760 --> 01:22:23,400
them and yeah it's a good it's good to

01:22:18,840 --> 01:22:25,099
let yourself practice and see how yeah

01:22:23,400 --> 01:22:27,900
see how this goes

01:22:25,099 --> 01:22:29,699
unfortunately we won't have time to go

01:22:27,900 --> 01:22:34,260
through these this part of the

01:22:29,699 --> 01:22:36,150
presentation sorry for overrun but yeah

01:22:34,260 --> 01:22:39,239
if you like - that's actually a YouTube

01:22:36,150 --> 01:22:42,300
video online that you can see to learn

01:22:39,239 --> 01:22:44,309
more about what this specific issue is

01:22:42,300 --> 01:22:46,349
but basically if I have to wrap things

01:22:44,309 --> 01:22:47,849
up in about a minute all I can say is

01:22:46,349 --> 01:22:50,159
basically the way that you write a SQL

01:22:47,849 --> 01:22:52,199
statement is very important sometimes it

01:22:50,159 --> 01:22:55,050
can be written in a way where it can be

01:22:52,199 --> 01:22:57,780
very easy for hackers to to get access

01:22:55,050 --> 01:23:02,489
to your database just simply by how you

01:22:57,780 --> 01:23:04,949
type out your SQL codes yeah so if you

01:23:02,489 --> 01:23:06,510
only can watch this video online find

01:23:04,949 --> 01:23:10,909
out more it's by computer for a very

01:23:06,510 --> 01:23:13,169
good computing YouTube channel but yeah

01:23:10,909 --> 01:23:15,150
so to wrap up the learning points that

01:23:13,169 --> 01:23:17,519
we have gone through today basically

01:23:15,150 --> 01:23:20,249
yeah we control basics of controlling a

01:23:17,519 --> 01:23:21,959
database with SQL and then we've also

01:23:20,249 --> 01:23:24,150
gone through the basics of potentially

01:23:21,959 --> 01:23:27,300
programming using print statements or

01:23:24,150 --> 01:23:30,479
how to how to use variables and things

01:23:27,300 --> 01:23:31,829
like that and yeah this part we didn't

01:23:30,479 --> 01:23:34,079
really go through but if you want to

01:23:31,829 --> 01:23:35,869
find out more you can go and I search it

01:23:34,079 --> 01:23:38,760
out it's actually very interesting but

01:23:35,869 --> 01:23:41,159
yeah with that we have come to the end

01:23:38,760 --> 01:23:45,829
of our workshop thank you for your time

01:23:41,159 --> 01:23:45,829

YouTube URL: https://www.youtube.com/watch?v=eQTQkqUQzXc


