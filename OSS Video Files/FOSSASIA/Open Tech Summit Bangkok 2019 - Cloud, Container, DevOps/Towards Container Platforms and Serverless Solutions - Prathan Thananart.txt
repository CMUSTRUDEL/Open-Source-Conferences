Title: Towards Container Platforms and Serverless Solutions - Prathan Thananart
Publication date: 2019-10-20
Playlist: Open Tech Summit Bangkok 2019 - Cloud, Container, DevOps
Description: 
	Prathan Thananart

Docker and Kubernetes have ushered in an era of container Platform as a Service solutions. This talk compares homegrown cluster deployments against various offerings from cloud providers including ECS, EKS, GKE, and GCR.
Captions: 
	00:00:00,030 --> 00:00:04,589
a bit of introduction about myself I run

00:00:02,490 --> 00:00:07,200
a software company we are called Patriot

00:00:04,589 --> 00:00:10,590
5 and we do a kind of chat application

00:00:07,200 --> 00:00:14,790
for a lot of social platforms like

00:00:10,590 --> 00:00:17,190
Facebook and line so in in in real terms

00:00:14,790 --> 00:00:19,890
that translate to a lot of workload and

00:00:17,190 --> 00:00:22,199
you know that's over the past seven

00:00:19,890 --> 00:00:24,150
years I've been experimenting with a lot

00:00:22,199 --> 00:00:27,029
of of deployment solutions and

00:00:24,150 --> 00:00:31,439
operations operational stacks that can

00:00:27,029 --> 00:00:33,450
disable to serve this kind of quite high

00:00:31,439 --> 00:00:36,149
requirement in terms of you know when we

00:00:33,450 --> 00:00:39,960
started off we were doing it all pre

00:00:36,149 --> 00:00:41,910
manually and you know with a $5 a month

00:00:39,960 --> 00:00:44,250
VPS hosted on digital ocean and

00:00:41,910 --> 00:00:47,430
gradually that became insufficient and

00:00:44,250 --> 00:00:49,890
we had to grow the server farm kind of

00:00:47,430 --> 00:00:52,469
organically and so we adopted a lot of

00:00:49,890 --> 00:00:54,270
open source technologies so I'm going to

00:00:52,469 --> 00:00:56,730
be talking about some of them and you

00:00:54,270 --> 00:00:58,379
know some of the solutions here some of

00:00:56,730 --> 00:01:00,510
them are the things that you can

00:00:58,379 --> 00:01:02,489
experiment I saw them a platform or as a

00:01:00,510 --> 00:01:04,860
services that we also have been

00:01:02,489 --> 00:01:09,180
fortunate enough to be to be working

00:01:04,860 --> 00:01:11,299
with so these are what the resident

00:01:09,180 --> 00:01:14,580
requirements look like we have like 600

00:01:11,299 --> 00:01:16,320
requests per second incoming and all

00:01:14,580 --> 00:01:16,770
this is hammering at the servers all the

00:01:16,320 --> 00:01:20,220
time

00:01:16,770 --> 00:01:22,439
so the requirement is also that we need

00:01:20,220 --> 00:01:24,299
to deploy constantly new versions of all

00:01:22,439 --> 00:01:26,700
software and they need to be updated

00:01:24,299 --> 00:01:28,860
about once a day which translates to

00:01:26,700 --> 00:01:31,680
about five times a week deploy with no

00:01:28,860 --> 00:01:33,380
with zero downtime and requirements is

00:01:31,680 --> 00:01:37,520
also that the cluster needs to be

00:01:33,380 --> 00:01:40,829
basically fault tolerance so if you know

00:01:37,520 --> 00:01:43,439
then if any one particular server goes

00:01:40,829 --> 00:01:45,720
down that the entire cluster must keep

00:01:43,439 --> 00:01:48,780
operating and the Lord must be shifted

00:01:45,720 --> 00:01:50,939
to other servers instead so those are

00:01:48,780 --> 00:01:53,009
the key challenges that we face the

00:01:50,939 --> 00:01:56,490
first one being that the deployment has

00:01:53,009 --> 00:01:58,500
to be repeatable so you know exactly the

00:01:56,490 --> 00:02:01,140
configuration the dependency that leads

00:01:58,500 --> 00:02:04,110
to that kind of setup you know back

00:02:01,140 --> 00:02:05,610
before we started it use deployment used

00:02:04,110 --> 00:02:08,310
to be you know if you go back 10 years

00:02:05,610 --> 00:02:10,619
it used to be that deployment is you

00:02:08,310 --> 00:02:12,450
install whatever software and library on

00:02:10,619 --> 00:02:13,780
the server machine that matches your

00:02:12,450 --> 00:02:16,210
deployed development machine

00:02:13,780 --> 00:02:19,150
so that means if your software requires

00:02:16,210 --> 00:02:20,530
a certain library the exact version of

00:02:19,150 --> 00:02:23,010
the library needs to be installed as

00:02:20,530 --> 00:02:25,660
well on a production machine so that

00:02:23,010 --> 00:02:30,520
once the application code requires it

00:02:25,660 --> 00:02:33,160
it also loads the scalable one is also a

00:02:30,520 --> 00:02:36,070
very used to be a very fancy of climbing

00:02:33,160 --> 00:02:38,260
it used to be that so suppose you have a

00:02:36,070 --> 00:02:39,790
load that looks like this during peak

00:02:38,260 --> 00:02:42,160
load you want to be able to scale up

00:02:39,790 --> 00:02:45,550
your server farm to accommodate more

00:02:42,160 --> 00:02:47,350
traffic during either loads you want to

00:02:45,550 --> 00:02:49,239
scale down the server to be able to take

00:02:47,350 --> 00:02:52,239
advantage of the cost-saving with the

00:02:49,239 --> 00:02:54,970
primary one of the primary reason for

00:02:52,239 --> 00:02:56,890
adopting the cloud at first place all

00:02:54,970 --> 00:03:00,459
right and finally the third challenge is

00:02:56,890 --> 00:03:04,360
how to engineer a cluster that is robust

00:03:00,459 --> 00:03:06,430
and fault tolerance so to degree that it

00:03:04,360 --> 00:03:08,709
kind of detects the failure in the

00:03:06,430 --> 00:03:13,690
system in any part in the system and it

00:03:08,709 --> 00:03:16,090
shift the traffic to somewhere else so

00:03:13,690 --> 00:03:18,190
what's happened it lasts in yes doctor

00:03:16,090 --> 00:03:20,530
is kind of a revolution when it comes to

00:03:18,190 --> 00:03:22,450
this space before doctor we used to have

00:03:20,530 --> 00:03:25,120
something called chef or puppet or

00:03:22,450 --> 00:03:27,340
ansible which is kind of a configuration

00:03:25,120 --> 00:03:30,310
management stack on a machine so

00:03:27,340 --> 00:03:33,630
basically instead of this is a movement

00:03:30,310 --> 00:03:35,739
that's also called configuration as code

00:03:33,630 --> 00:03:38,640
basically instead of installing software

00:03:35,739 --> 00:03:41,140
and libraries one by one until your

00:03:38,640 --> 00:03:43,120
server is capable of serving order

00:03:41,140 --> 00:03:45,959
libraries and dependencies you are

00:03:43,120 --> 00:03:48,700
instead listing the exact configuration

00:03:45,959 --> 00:03:50,620
their dependencies and the versions that

00:03:48,700 --> 00:03:53,530
is required in order to bring the server

00:03:50,620 --> 00:04:00,040
up to a repeatable state that is optimal

00:03:53,530 --> 00:04:02,320
for your software and this leads to a

00:04:00,040 --> 00:04:04,630
second philosophy that's never happened

00:04:02,320 --> 00:04:05,920
before which is we are treating servers

00:04:04,630 --> 00:04:07,540
as cat or not pets

00:04:05,920 --> 00:04:09,760
so what's the difference between peasant

00:04:07,540 --> 00:04:12,040
carry out the difference is that when

00:04:09,760 --> 00:04:14,350
your pet is sick you take them to a vet

00:04:12,040 --> 00:04:16,630
when you're kind of sick basically you

00:04:14,350 --> 00:04:19,269
you shoot them and you move on so that's

00:04:16,630 --> 00:04:21,340
how we do with service nowadays once you

00:04:19,269 --> 00:04:24,400
have a repeatable configuration if a

00:04:21,340 --> 00:04:26,560
service is starting to misbehave the

00:04:24,400 --> 00:04:27,669
internal state has gone wrong the file

00:04:26,560 --> 00:04:31,120
system has become full

00:04:27,669 --> 00:04:33,099
or with any other particular reason that

00:04:31,120 --> 00:04:35,020
you haven't anticipated in advance what

00:04:33,099 --> 00:04:37,270
happens is you just shut down the server

00:04:35,020 --> 00:04:39,009
you terminate the configuration and you

00:04:37,270 --> 00:04:43,990
reboot a new server from scratch to

00:04:39,009 --> 00:04:45,849
replace the ones you just lost we so

00:04:43,990 --> 00:04:48,099
with dr. this kind of this contract

00:04:45,849 --> 00:04:51,129
become well-defined and become the

00:04:48,099 --> 00:04:53,979
boundary in which in between the

00:04:51,129 --> 00:04:56,050
developers and the ops team can work so

00:04:53,979 --> 00:04:58,360
developers are working with stuff inside

00:04:56,050 --> 00:05:03,120
the containers and ops team responsible

00:04:58,360 --> 00:05:10,270
for Lord for for for maintaining the

00:05:03,120 --> 00:05:12,969
time of this container so recently dr.

00:05:10,270 --> 00:05:15,699
is good usually good for the very small

00:05:12,969 --> 00:05:18,879
scale kind of operation but once you

00:05:15,699 --> 00:05:21,610
expand to more than one machine to a

00:05:18,879 --> 00:05:23,199
cluster of like 510 maybe a thousand

00:05:21,610 --> 00:05:26,289
machines then you need something more

00:05:23,199 --> 00:05:27,699
advanced actually a lot of people would

00:05:26,289 --> 00:05:30,610
be saying that this hall is kind of

00:05:27,699 --> 00:05:32,680
unnecessary because in 2019 we have the

00:05:30,610 --> 00:05:35,469
enterprise will have standardized on

00:05:32,680 --> 00:05:38,379
kubernetes which is a deployment manager

00:05:35,469 --> 00:05:41,139
like an orchestration for docker so

00:05:38,379 --> 00:05:44,289
basically if doctor tells you define it

00:05:41,139 --> 00:05:49,089
doctor define the boundary between F and

00:05:44,289 --> 00:05:51,750
ops the company's is the tool that

00:05:49,089 --> 00:05:55,569
exists exclusively in the ops room and

00:05:51,750 --> 00:05:58,419
kind of takes care that of making sure

00:05:55,569 --> 00:06:01,569
that your deployment is running smoothly

00:05:58,419 --> 00:06:05,289
it has a plug in for everything so you

00:06:01,569 --> 00:06:07,360
can you can make it do large cluster

00:06:05,289 --> 00:06:09,849
stuff you can make it all the skills you

00:06:07,360 --> 00:06:11,439
can integrate it with kind of any kind

00:06:09,849 --> 00:06:16,330
of software and service and stack that

00:06:11,439 --> 00:06:18,849
you have but - I think in my opinion

00:06:16,330 --> 00:06:21,099
it's kind of a no Q - if you are

00:06:18,849 --> 00:06:22,629
anything short of a large enterprise to

00:06:21,099 --> 00:06:27,310
be adopting companies just as a first

00:06:22,629 --> 00:06:29,080
choice because then because then it

00:06:27,310 --> 00:06:33,639
creates the more problem that you then

00:06:29,080 --> 00:06:35,620
then you previously had so in this talk

00:06:33,639 --> 00:06:37,930
I'm trying to explore the middle ground

00:06:35,620 --> 00:06:39,849
between you know having a homegrown

00:06:37,930 --> 00:06:40,750
solution and having enterprises

00:06:39,849 --> 00:06:41,350
kubernetes

00:06:40,750 --> 00:06:42,940
so

00:06:41,350 --> 00:06:47,400
to see if there's something in between

00:06:42,940 --> 00:06:50,580
that kind of fits most small-scale

00:06:47,400 --> 00:06:53,050
companies and teams that don't require

00:06:50,580 --> 00:06:57,840
you know they don't have full-time ops

00:06:53,050 --> 00:07:00,130
people to me running complicated cluster

00:06:57,840 --> 00:07:01,930
that's yeah that's that's what

00:07:00,130 --> 00:07:03,000
kubernetes feels like sometimes if some

00:07:01,930 --> 00:07:05,800
of you have played through this before

00:07:03,000 --> 00:07:10,000
we totally understand the configuration

00:07:05,800 --> 00:07:11,860
is really taking the concept of

00:07:10,000 --> 00:07:13,870
configuration as code it's really taken

00:07:11,860 --> 00:07:16,680
to an extreme here in which you have

00:07:13,870 --> 00:07:19,960
llamó files define for everything and

00:07:16,680 --> 00:07:22,270
but it's worth noting that kubernetes

00:07:19,960 --> 00:07:25,540
well it takes care of the orchestration

00:07:22,270 --> 00:07:28,300
of containers it doesn't actually do

00:07:25,540 --> 00:07:30,400
auto scaling in the sense that you know

00:07:28,300 --> 00:07:32,410
it's although so basically you need to

00:07:30,400 --> 00:07:36,280
need to manually tinker with the scaling

00:07:32,410 --> 00:07:39,100
parameters if you tell them at a certain

00:07:36,280 --> 00:07:41,680
point at a certain level where the CPU

00:07:39,100 --> 00:07:43,810
gets high enough load you want to add

00:07:41,680 --> 00:07:45,360
more instances to the cluster and you

00:07:43,810 --> 00:07:48,280
still need to interface with the

00:07:45,360 --> 00:07:50,020
underlying infrastructure API like if

00:07:48,280 --> 00:07:54,010
you're on a device you want to be

00:07:50,020 --> 00:07:57,070
talking to the Amazon API to turn to to

00:07:54,010 --> 00:07:58,930
add new instances to the cluster if

00:07:57,070 --> 00:08:00,670
you're on the ocean of your own Google

00:07:58,930 --> 00:08:02,530
Cloud and it's similar you need to be

00:08:00,670 --> 00:08:05,410
talking to the cloud providers so it

00:08:02,530 --> 00:08:09,730
doesn't automatically abstract that away

00:08:05,410 --> 00:08:11,890
from you so on the opposite end of the

00:08:09,730 --> 00:08:15,400
spectrum there's also another movement

00:08:11,890 --> 00:08:17,230
that's the color service and which kind

00:08:15,400 --> 00:08:21,190
of a misnomer because it everybody knows

00:08:17,230 --> 00:08:22,960
that the Soviet system we're but the

00:08:21,190 --> 00:08:24,730
idea is that you don't need to think

00:08:22,960 --> 00:08:26,980
about servers so if you come from a

00:08:24,730 --> 00:08:28,900
programming background all mostly all

00:08:26,980 --> 00:08:31,530
you think about mostly all you do is is

00:08:28,900 --> 00:08:34,510
its code and not the configuration part

00:08:31,530 --> 00:08:37,060
so so let's kind of fulfills that demand

00:08:34,510 --> 00:08:39,099
in a way that you only think about your

00:08:37,060 --> 00:08:41,020
code and the function the parameters

00:08:39,099 --> 00:08:44,620
that it receives the output that it

00:08:41,020 --> 00:08:47,260
gives and not not how it runs not how it

00:08:44,620 --> 00:08:50,200
scales up and scales down so if you look

00:08:47,260 --> 00:08:53,950
at if you think about how the cloud

00:08:50,200 --> 00:08:55,150
computing movement has commoditized the

00:08:53,950 --> 00:08:56,950
physical infrastructure

00:08:55,150 --> 00:08:59,830
to the degree that you don't need to

00:08:56,950 --> 00:09:01,420
think about when you're spinning up a

00:08:59,830 --> 00:09:03,520
car instance you don't think about where

00:09:01,420 --> 00:09:06,130
in the world is happening right now with

00:09:03,520 --> 00:09:07,810
silver liz is the virtual infrastructure

00:09:06,130 --> 00:09:10,120
the cloud platform that's being

00:09:07,810 --> 00:09:11,770
commoditized so if you want to run a

00:09:10,120 --> 00:09:14,560
piece of code you don't think about

00:09:11,770 --> 00:09:18,100
where in the world oh we're in the

00:09:14,560 --> 00:09:21,760
logical cluster that this Court is going

00:09:18,100 --> 00:09:23,440
to be executed if the provider or the

00:09:21,760 --> 00:09:25,030
platform current is that this Court is

00:09:23,440 --> 00:09:27,280
going to be executed with a well-defined

00:09:25,030 --> 00:09:29,440
contract like within a reasonable time

00:09:27,280 --> 00:09:31,690
frame and it's they're going to build

00:09:29,440 --> 00:09:34,330
they are going to build you at the end

00:09:31,690 --> 00:09:36,790
of the month exactly for for how exactly

00:09:34,330 --> 00:09:40,000
seconds did you consume in order to run

00:09:36,790 --> 00:09:43,720
the code some of the most popular

00:09:40,000 --> 00:09:46,180
service platforms right now anyways

00:09:43,720 --> 00:09:48,310
lambda and Google cloud functions so

00:09:46,180 --> 00:09:49,780
they kind of fulfill this promise in a

00:09:48,310 --> 00:09:51,940
way and I believe this movement is going

00:09:49,780 --> 00:09:53,700
to be become very important because as

00:09:51,940 --> 00:09:56,500
small as more as more and more people

00:09:53,700 --> 00:09:59,320
realize that the virtual infrastructure

00:09:56,500 --> 00:10:02,560
also can be commoditized this is going

00:09:59,320 --> 00:10:05,080
to scale down really well towards solo

00:10:02,560 --> 00:10:06,940
or solo developers or really small team

00:10:05,080 --> 00:10:09,820
that don't need to be managing their own

00:10:06,940 --> 00:10:11,340
infrastructure so I have deployed some

00:10:09,820 --> 00:10:15,340
some surveillance applications before

00:10:11,340 --> 00:10:17,560
that kind of run they have been ongoing

00:10:15,340 --> 00:10:20,530
for three or four years with zero

00:10:17,560 --> 00:10:22,990
essentially zero maintenance so if you

00:10:20,530 --> 00:10:26,740
run any kind of infrastructure before

00:10:22,990 --> 00:10:30,640
even either physical or virtual you'll

00:10:26,740 --> 00:10:32,970
find that this is kind of difficult to

00:10:30,640 --> 00:10:35,290
accomplish in practice because what

00:10:32,970 --> 00:10:36,520
happening in in the practical world is

00:10:35,290 --> 00:10:39,040
that there are things that you need to

00:10:36,520 --> 00:10:40,810
do to avoid platform rot there are

00:10:39,040 --> 00:10:42,250
things like you need to keep updating

00:10:40,810 --> 00:10:44,620
your OS you need to make in your

00:10:42,250 --> 00:10:47,620
firewall configuration you need to make

00:10:44,620 --> 00:10:50,080
sure that the disk isn't full and the

00:10:47,620 --> 00:10:52,390
server doesn't deteriorate to a state

00:10:50,080 --> 00:10:54,400
where it's incapable of running the app

00:10:52,390 --> 00:10:57,190
anymore but we serve will is all that is

00:10:54,400 --> 00:10:59,200
abstracted away and you can write a code

00:10:57,190 --> 00:11:00,430
once and you can leave it running on the

00:10:59,200 --> 00:11:03,700
server and forget about its existence

00:11:00,430 --> 00:11:05,020
for for for many years and you and at

00:11:03,700 --> 00:11:07,680
some point you need to touch that

00:11:05,020 --> 00:11:07,680
software again

00:11:08,910 --> 00:11:18,100
so in between the into between both

00:11:15,730 --> 00:11:20,500
extremes this is something that's kind

00:11:18,100 --> 00:11:22,930
of up and coming as recently as last

00:11:20,500 --> 00:11:25,390
year called Soviets container platforms

00:11:22,930 --> 00:11:29,530
so there's not a very fine name yet but

00:11:25,390 --> 00:11:31,600
it's basically like if you marry the

00:11:29,530 --> 00:11:33,070
Ovilus platforms and the content of

00:11:31,600 --> 00:11:37,750
platforms like who veneer this together

00:11:33,070 --> 00:11:38,470
you get something kind of like edibles

00:11:37,750 --> 00:11:43,270
for kids

00:11:38,470 --> 00:11:48,280
oh cool cloud run that is they ship the

00:11:43,270 --> 00:11:50,530
boundary so that you can also the

00:11:48,280 --> 00:11:52,330
limitations of server layers is you need

00:11:50,530 --> 00:11:54,310
to be running you need to be writing

00:11:52,330 --> 00:11:55,930
code in the exact configuration that the

00:11:54,310 --> 00:11:58,960
platform has been written to support

00:11:55,930 --> 00:12:00,820
like for example it usually needs to be

00:11:58,960 --> 00:12:02,980
Java Script it usually needs to be no

00:12:00,820 --> 00:12:05,530
J's and it needs to be running the

00:12:02,980 --> 00:12:08,830
versions that the platform providers are

00:12:05,530 --> 00:12:10,960
providing on the other hand with docker

00:12:08,830 --> 00:12:13,720
you get the freedom and flexibility to

00:12:10,960 --> 00:12:16,420
choose their version of the software

00:12:13,720 --> 00:12:18,280
that you want so you know as we said and

00:12:16,420 --> 00:12:25,530
as we talked about in beginning the

00:12:18,280 --> 00:12:28,870
exact stack of of PHP or Python or the

00:12:25,530 --> 00:12:30,460
library that your software requires it's

00:12:28,870 --> 00:12:31,810
going to be installed in your document

00:12:30,460 --> 00:12:34,930
header because you write the code just

00:12:31,810 --> 00:12:37,150
so which SS container platforms you get

00:12:34,930 --> 00:12:42,580
that kind of freedom and flexibility but

00:12:37,150 --> 00:12:46,360
you also don't need to worry about how

00:12:42,580 --> 00:12:49,270
that container is going to be operating

00:12:46,360 --> 00:12:52,030
in their virtual infrastructure it's you

00:12:49,270 --> 00:12:53,890
up once you point the platform to the

00:12:52,030 --> 00:12:56,590
container the platform is going to be

00:12:53,890 --> 00:12:59,170
responsible for scaling this up and down

00:12:56,590 --> 00:13:01,780
for terminating instances that are

00:12:59,170 --> 00:13:04,300
misbehaving and for billing you for

00:13:01,780 --> 00:13:07,540
exact container second that your

00:13:04,300 --> 00:13:11,530
containers are spending so this is kind

00:13:07,540 --> 00:13:13,260
of I think this is kind of a very good

00:13:11,530 --> 00:13:16,540
middle ground between both worlds and

00:13:13,260 --> 00:13:19,180
when you need to have some control over

00:13:16,540 --> 00:13:21,880
your deployment platform but also you

00:13:19,180 --> 00:13:26,440
don't want to be micromanaging

00:13:21,880 --> 00:13:32,110
the other scaling parameters yeah

00:13:26,440 --> 00:13:36,600
so essentially are we to to conclude we

00:13:32,110 --> 00:13:39,340
covered different paradigms of managing

00:13:36,600 --> 00:13:42,010
deployments on the different kind on a

00:13:39,340 --> 00:13:47,050
whole spectrum so on one name you can do

00:13:42,010 --> 00:13:48,910
at least if you don't one thing that

00:13:47,050 --> 00:13:51,430
people don't do anymore is they spin up

00:13:48,910 --> 00:13:52,660
a server and they treat them as pets so

00:13:51,430 --> 00:13:56,080
that's one thing that needs to go away

00:13:52,660 --> 00:13:58,660
but if you move on to the spectrum of

00:13:56,080 --> 00:14:01,150
cattle there's one end you would want to

00:13:58,660 --> 00:14:02,950
be micromanaging and defining the

00:14:01,150 --> 00:14:05,260
parameters manually you want to use

00:14:02,950 --> 00:14:08,050
things like docker or once you scale up

00:14:05,260 --> 00:14:09,550
you use kubernetes on the other end you

00:14:08,050 --> 00:14:13,720
know you want to be using something that

00:14:09,550 --> 00:14:15,400
only exists about all only exits to

00:14:13,720 --> 00:14:17,200
manage your code you don't need to think

00:14:15,400 --> 00:14:19,360
about anything else you'd be running or

00:14:17,200 --> 00:14:22,650
surveillance and in the middle you want

00:14:19,360 --> 00:14:25,840
to be meeting somewhere with containers

00:14:22,650 --> 00:14:28,660
where you can you have the flexibility

00:14:25,840 --> 00:14:30,640
to define the kind of stack that your

00:14:28,660 --> 00:14:32,560
application requires but you don't need

00:14:30,640 --> 00:14:34,600
to be thinking about how to scale up and

00:14:32,560 --> 00:14:36,910
down a for tolerance you want to use

00:14:34,600 --> 00:14:41,620
container platforms like and

00:14:36,910 --> 00:14:43,690
Google run so that's that's it for my

00:14:41,620 --> 00:14:45,160
talk today so thank you for coming and

00:14:43,690 --> 00:14:48,060
if you have any questions I'll be happy

00:14:45,160 --> 00:14:48,060
to talk about them

00:15:00,510 --> 00:15:06,660
so what is the events here of container

00:15:04,230 --> 00:15:09,720
had formed so well it was as no more

00:15:06,660 --> 00:15:13,500
civil is what is the use case I mean Leo

00:15:09,720 --> 00:15:15,570
use case so with no more surveillance

00:15:13,500 --> 00:15:17,579
platforms yeah

00:15:15,570 --> 00:15:20,730
especially if you look at some of the

00:15:17,579 --> 00:15:22,529
newer ones like I sure I show functions

00:15:20,730 --> 00:15:24,720
and cook functions they can be very

00:15:22,529 --> 00:15:28,290
limited in the terms in the terms of run

00:15:24,720 --> 00:15:30,420
quantity for why you are stuck with the

00:15:28,290 --> 00:15:33,769
nodejs versions that they require and

00:15:30,420 --> 00:15:36,089
you can it can be tricky to install I

00:15:33,769 --> 00:15:38,190
mean if you have libraries there are no

00:15:36,089 --> 00:15:40,760
libraries they can execute but if you

00:15:38,190 --> 00:15:43,529
have dependencies that are compiled

00:15:40,760 --> 00:15:50,000
executables like like dot s or they can

00:15:43,529 --> 00:15:50,000
be tricky to install yeah okay

00:15:51,269 --> 00:15:58,440
and what is the billing method of

00:15:56,010 --> 00:16:00,149
service I mean in the civil its

00:15:58,440 --> 00:16:03,750
container is beautiful circular light

00:16:00,149 --> 00:16:07,470
possible is how how does it cause how is

00:16:03,750 --> 00:16:09,389
the bill how callate it it's also per

00:16:07,470 --> 00:16:14,069
second of runtime I mean usually they

00:16:09,389 --> 00:16:18,720
build up to small fractions of seconds

00:16:14,069 --> 00:16:21,569
like microseconds but but it's a bit

00:16:18,720 --> 00:16:25,019
different in that with which service

00:16:21,569 --> 00:16:27,449
usually they build per second of the of

00:16:25,019 --> 00:16:29,970
the runtime but we containers sometimes

00:16:27,449 --> 00:16:33,389
one container is usually going to be

00:16:29,970 --> 00:16:35,880
executing some web application web

00:16:33,389 --> 00:16:37,829
serving platform like nginx and with

00:16:35,880 --> 00:16:40,290
with engineers you can already serve

00:16:37,829 --> 00:16:43,589
more than one client one request at once

00:16:40,290 --> 00:16:47,130
so if your engine X is capable of

00:16:43,589 --> 00:16:50,970
serving say if it is serving five

00:16:47,130 --> 00:16:52,860
requests at once you are built for the

00:16:50,970 --> 00:16:57,209
container time between the first request

00:16:52,860 --> 00:16:59,220
and until the last request ends yeah but

00:16:57,209 --> 00:17:01,019
if they scale up from you know if you

00:16:59,220 --> 00:17:03,120
could get to the point where it decides

00:17:01,019 --> 00:17:06,959
that it needs to scale up then you build

00:17:03,120 --> 00:17:08,490
for in do building should be multiplied

00:17:06,959 --> 00:17:11,160
by the normal containers that it needs

00:17:08,490 --> 00:17:16,170
to run to so if your application as well

00:17:11,160 --> 00:17:18,540
so so well it's one instance and like

00:17:16,170 --> 00:17:22,470
Google's how long's he can learn many in

00:17:18,540 --> 00:17:24,209
Spain is the ones light also well it's

00:17:22,470 --> 00:17:26,490
no more servers can learn minis then to

00:17:24,209 --> 00:17:28,680
it yeah I definitely it can serve many

00:17:26,490 --> 00:17:33,780
instances and you'd be I think with

00:17:28,680 --> 00:17:37,770
civil is you are built or exile you were

00:17:33,780 --> 00:17:39,780
built or request so I mean if if to if

00:17:37,770 --> 00:17:42,180
three requests can be served with one

00:17:39,780 --> 00:17:44,460
container the platform doesn't care it's

00:17:42,180 --> 00:17:46,500
gonna be useful for three requests but

00:17:44,460 --> 00:17:48,480
with several is container platforms if

00:17:46,500 --> 00:17:50,280
three requests can be served by the same

00:17:48,480 --> 00:17:51,900
container then the platform is going to

00:17:50,280 --> 00:17:55,850
Bill you for that container time

00:17:51,900 --> 00:17:55,850
oh yeah thank you

00:18:05,110 --> 00:18:11,740
couple

00:18:07,700 --> 00:18:11,740
has anybody got any questions

00:18:23,000 --> 00:18:29,900
from your experience as a CTO what

00:18:27,169 --> 00:18:33,380
parameters did you did you use to

00:18:29,900 --> 00:18:38,809
consider this is small scale medium

00:18:33,380 --> 00:18:41,090
scale or last skill that is a very deep

00:18:38,809 --> 00:18:43,480
question you know actually yeah of

00:18:41,090 --> 00:18:47,840
course deeper than this talk but general

00:18:43,480 --> 00:18:49,390
I would think of it as in terms of

00:18:47,840 --> 00:18:52,520
people who need to manage that

00:18:49,390 --> 00:18:55,010
infrastructure so it all needs to be you

00:18:52,520 --> 00:18:56,480
know if it all can be managed by one

00:18:55,010 --> 00:18:58,250
person then you don't need a lot of

00:18:56,480 --> 00:19:00,140
explicit configuration it can be inside

00:18:58,250 --> 00:19:02,419
your head but if it gets to the point

00:19:00,140 --> 00:19:04,190
where you need to have a team you need

00:19:02,419 --> 00:19:06,080
to have night shift and morning shift

00:19:04,190 --> 00:19:08,419
did you want some configuration to be

00:19:06,080 --> 00:19:13,220
visible or you want to abstract that

00:19:08,419 --> 00:19:20,480
configuration away entirely yeah thank

00:19:13,220 --> 00:19:23,440
you thank you very much for we stopped

00:19:20,480 --> 00:19:23,440

YouTube URL: https://www.youtube.com/watch?v=XFgV6lyQ2so


