Title: Anatomy of a KVM Guest - Prasad Pandit- FOSSASIA 2018
Publication date: 2018-03-24
Playlist: FOSSASIA Summit 2018
Description: 
	Speaker: Prasad Pandit, Developer Red Hat
Info: https://2018.fossasia.org/event/speakers.html#prasad-pandit3244

KVM, kernel based virtualization, turns the Linux kernel into an

hypervisor to provide full virtualization services. There is great deal

of work that happens in the background to create a guest environment

and provide various services securely.In this session we'll peek into the background to understand

how a KVM x86 guest environment comes to be, how/where do various

emulated peripherals fit in and how do they interacts with each-other,

the hypervisor and the hardware.

We'll also see examples of the the KVM Virtualization deployments

and the value it has brought to businesses.

Room: Training room 4-3
Track: Kernel & Platform
Date: Friday, 23rd March, 2018

Event Page: http://2018.fossasia.org
Follow FOSSASIA on Twitter: https://twitter.com/fossasia/
Like FOSSASIA on Facebook: https://www.facebook.com/fossasia/

Produced by Engineers.SG
Captions: 
	00:00:00,000 --> 00:00:05,339
express that I work for the product

00:00:02,610 --> 00:00:06,980
security team at Red Hat and today I'm

00:00:05,339 --> 00:00:10,200
going to talk about a little bit about

00:00:06,980 --> 00:00:12,450
how the KVM virtualization stack looked

00:00:10,200 --> 00:00:14,340
like at after that I have looked at I

00:00:12,450 --> 00:00:17,640
look after the security issues in the

00:00:14,340 --> 00:00:20,580
virtualization and the kernel projects

00:00:17,640 --> 00:00:22,170
and in the process I have I've looked

00:00:20,580 --> 00:00:23,820
into certain details of the

00:00:22,170 --> 00:00:25,890
virtualization stacks and I've tried to

00:00:23,820 --> 00:00:29,070
fix certain issues as well and today

00:00:25,890 --> 00:00:31,560
I'll share what I've learned over the

00:00:29,070 --> 00:00:35,100
course of time about how a KVM guest

00:00:31,560 --> 00:00:37,950
works in the stack okay so for the

00:00:35,100 --> 00:00:39,480
overview we'll look at the x86 execution

00:00:37,950 --> 00:00:41,579
environment then we look at the

00:00:39,480 --> 00:00:43,800
virtualization technology which is there

00:00:41,579 --> 00:00:46,469
which is used by the KVM module we'll

00:00:43,800 --> 00:00:47,789
look look at the kernel virtual machine

00:00:46,469 --> 00:00:49,680
how it uses the virtualization

00:00:47,789 --> 00:00:52,140
technology to provide services to the

00:00:49,680 --> 00:00:54,750
guest and in the end we'll look at the

00:00:52,140 --> 00:00:56,910
user space emulator which is the q mu

00:00:54,750 --> 00:01:00,870
which is used to create the guest

00:00:56,910 --> 00:01:03,420
environment for the users right so if we

00:01:00,870 --> 00:01:05,729
if you look at the x86 work execution

00:01:03,420 --> 00:01:09,360
environment we we have a processor and

00:01:05,729 --> 00:01:11,760
in the end processor we have lot of sub

00:01:09,360 --> 00:01:13,590
components like there is a execution

00:01:11,760 --> 00:01:15,000
there is an instruction execution module

00:01:13,590 --> 00:01:17,490
then there is a there are certain

00:01:15,000 --> 00:01:21,390
control registers there is memory there

00:01:17,490 --> 00:01:25,140
is a higher unit which works to mission

00:01:21,390 --> 00:01:26,640
to the disk and and and on top of all

00:01:25,140 --> 00:01:28,439
this Hardware layer there is an

00:01:26,640 --> 00:01:31,380
operating system right this operating

00:01:28,439 --> 00:01:35,970
system uses the processor instructions

00:01:31,380 --> 00:01:37,829
to execute if user programs right so

00:01:35,970 --> 00:01:40,200
let's take an example of a simple

00:01:37,829 --> 00:01:42,210
program so when you say you want to

00:01:40,200 --> 00:01:45,030
print something on the console so there

00:01:42,210 --> 00:01:47,490
are many things in word so the this this

00:01:45,030 --> 00:01:49,439
program will be converted into a process

00:01:47,490 --> 00:01:52,740
and instructions like this and then

00:01:49,439 --> 00:01:54,390
there is a console which is which is to

00:01:52,740 --> 00:01:57,390
read and write to that console you need

00:01:54,390 --> 00:02:00,600
a hardware driver which is used by the

00:01:57,390 --> 00:02:02,850
operating system so just to print a

00:02:00,600 --> 00:02:05,159
print a certain message on the console a

00:02:02,850 --> 00:02:07,229
user programs rights of statement like

00:02:05,159 --> 00:02:09,629
say printf which is converted into a

00:02:07,229 --> 00:02:12,750
operating system kernel operating system

00:02:09,629 --> 00:02:13,260
call which is say right and that right

00:02:12,750 --> 00:02:15,120
will

00:02:13,260 --> 00:02:16,739
communicate with the hardware driver

00:02:15,120 --> 00:02:19,530
which will eventually put that

00:02:16,739 --> 00:02:22,170
information on the console right so this

00:02:19,530 --> 00:02:25,019
is just a basic basic execution

00:02:22,170 --> 00:02:26,940
environment on the x86 system now let's

00:02:25,019 --> 00:02:29,550
imagine instead of this simple program

00:02:26,940 --> 00:02:31,860
we want to virtualize or create an

00:02:29,550 --> 00:02:34,560
environment where you execute an

00:02:31,860 --> 00:02:37,260
operating system as it is in a virtual

00:02:34,560 --> 00:02:39,720
environment okay as we saw operating

00:02:37,260 --> 00:02:41,640
system uses the hardware which is like a

00:02:39,720 --> 00:02:44,370
processor which has registers which has

00:02:41,640 --> 00:02:46,440
memory it has i/o unit so if we want to

00:02:44,370 --> 00:02:48,330
execute an operating system in a virtual

00:02:46,440 --> 00:02:50,640
environment we'll have to create the

00:02:48,330 --> 00:02:53,160
same environment which is provided by

00:02:50,640 --> 00:02:54,950
the hardware right so that's that's

00:02:53,160 --> 00:02:58,530
where the virtualization technology

00:02:54,950 --> 00:03:00,900
comes into picture so Intel introduced

00:02:58,530 --> 00:03:03,980
virtualization extensions on AMD they

00:03:00,900 --> 00:03:07,829
call it secure virtual machines on arm

00:03:03,980 --> 00:03:10,019
this well samode so what basically these

00:03:07,829 --> 00:03:12,780
technologies do is they they introduce

00:03:10,019 --> 00:03:15,390
more instructions in the processor which

00:03:12,780 --> 00:03:19,019
is used by the kernel kernel or the

00:03:15,390 --> 00:03:20,940
virtual machine monitor right to provide

00:03:19,019 --> 00:03:22,440
services to the guest environment so

00:03:20,940 --> 00:03:24,600
these instructions are called the

00:03:22,440 --> 00:03:27,959
virtualization extensions and there are

00:03:24,600 --> 00:03:30,209
instructions like vmx on vm x off and vm

00:03:27,959 --> 00:03:32,400
read/write and these are used by the KVM

00:03:30,209 --> 00:03:34,950
or internal virtual machine module to

00:03:32,400 --> 00:03:37,709
create a virtual environment which is

00:03:34,950 --> 00:03:42,090
used by the logical processor which is

00:03:37,709 --> 00:03:43,650
in turn used by the JVM guest right so

00:03:42,090 --> 00:03:45,720
there are two modes of operation like we

00:03:43,650 --> 00:03:47,780
saw on the host environment in the

00:03:45,720 --> 00:03:50,400
operating system you have a user space

00:03:47,780 --> 00:03:52,170
instructions or user space functions and

00:03:50,400 --> 00:03:54,569
in the kernel you have kernel space

00:03:52,170 --> 00:03:57,329
function right kind of a kernel space

00:03:54,569 --> 00:03:59,220
functions work in the supervisor mode or

00:03:57,329 --> 00:04:01,769
the route mode whereas user space

00:03:59,220 --> 00:04:03,989
functions are at user level privileges

00:04:01,769 --> 00:04:06,060
right similarly in the virtualization

00:04:03,989 --> 00:04:09,209
instructions this set of instructions

00:04:06,060 --> 00:04:13,950
are divided into two modes one is a VM X

00:04:09,209 --> 00:04:16,229
non-root operation so when guest wants

00:04:13,950 --> 00:04:18,720
to execute certain instructions they are

00:04:16,229 --> 00:04:21,060
executed at the non route operation mode

00:04:18,720 --> 00:04:22,950
ok and then there are vm x route

00:04:21,060 --> 00:04:24,930
operations which are used by the kv

00:04:22,950 --> 00:04:26,380
module or the virtual machine monitor

00:04:24,930 --> 00:04:29,080
module or

00:04:26,380 --> 00:04:31,720
vizor which is which is like privileged

00:04:29,080 --> 00:04:33,790
instructions they are used by kV Amada

00:04:31,720 --> 00:04:36,220
to give services to be thousands of

00:04:33,790 --> 00:04:39,730
guests that it is running and this

00:04:36,220 --> 00:04:42,340
separation is there because at in at any

00:04:39,730 --> 00:04:44,560
point you don't want a guest environment

00:04:42,340 --> 00:04:48,190
or a guest operating system to use or

00:04:44,560 --> 00:04:51,460
access Hardware directly other cut you

00:04:48,190 --> 00:04:54,010
want to we want kind of multiplex the

00:04:51,460 --> 00:04:55,570
hardware across different guests right

00:04:54,010 --> 00:04:59,710
so that that's why there are two modes

00:04:55,570 --> 00:05:02,020
of operation now let's say there are

00:04:59,710 --> 00:05:04,060
certain instructions provided by the

00:05:02,020 --> 00:05:06,340
server or provided by the processor or

00:05:04,060 --> 00:05:08,410
the hardware but still to create the

00:05:06,340 --> 00:05:10,960
logical environment of the virtual

00:05:08,410 --> 00:05:13,390
environment we need to store data which

00:05:10,960 --> 00:05:15,130
is used by the logical process as we saw

00:05:13,390 --> 00:05:17,410
in the host system or the bare metal

00:05:15,130 --> 00:05:22,000
system it has a lot of control registers

00:05:17,410 --> 00:05:24,250
it has I all that information when it's

00:05:22,000 --> 00:05:25,570
executing instructions it stores and

00:05:24,250 --> 00:05:27,490
reads information from this control

00:05:25,570 --> 00:05:30,310
structures our control registers right

00:05:27,490 --> 00:05:33,190
so similar control structure or similar

00:05:30,310 --> 00:05:35,320
environment is created in the memory

00:05:33,190 --> 00:05:37,120
which is called a control structure or

00:05:35,320 --> 00:05:39,940
virtual machine control structures it's

00:05:37,120 --> 00:05:40,960
like a 4 kilobyte memory area allocated

00:05:39,940 --> 00:05:43,750
by the k vm module

00:05:40,960 --> 00:05:46,720
it stores lot of control information

00:05:43,750 --> 00:05:50,290
which is used to execute a guest

00:05:46,720 --> 00:05:52,540
environment so it involves when when

00:05:50,290 --> 00:05:55,360
does while executing a guest operating

00:05:52,540 --> 00:05:57,760
system vendors at which instruction does

00:05:55,360 --> 00:06:00,430
a guest control moved from guest

00:05:57,760 --> 00:06:02,980
non-root operation mode to the root

00:06:00,430 --> 00:06:04,750
operation like in in in the bare metal

00:06:02,980 --> 00:06:07,210
host environment piece so when when a

00:06:04,750 --> 00:06:09,040
program calls a system call it goes from

00:06:07,210 --> 00:06:11,980
user space to kernel space right

00:06:09,040 --> 00:06:14,430
similarly in the virtualized virtualized

00:06:11,980 --> 00:06:18,400
guest environment at which point does

00:06:14,430 --> 00:06:21,660
guest exits from the VM and enters the

00:06:18,400 --> 00:06:24,420
root operation mode right

00:06:21,660 --> 00:06:26,220
so that is that is called the when when

00:06:24,420 --> 00:06:28,410
the control moves from guest

00:06:26,220 --> 00:06:30,600
operating-system to the VM which is kV

00:06:28,410 --> 00:06:32,940
module ok virtual machine monitor model

00:06:30,600 --> 00:06:35,010
that is called VM exit and similarly

00:06:32,940 --> 00:06:36,930
when we a kV module performs an

00:06:35,010 --> 00:06:40,140
operation on behalf of the guest and

00:06:36,930 --> 00:06:41,670
then returns control back to the guest

00:06:40,140 --> 00:06:44,250
environment or a guest operating system

00:06:41,670 --> 00:06:47,550
that is called VM entry and to do this

00:06:44,250 --> 00:06:49,710
VM exit and VM entry it stores a lot of

00:06:47,550 --> 00:06:52,410
control information in the control

00:06:49,710 --> 00:06:57,720
fields of this control structure right

00:06:52,410 --> 00:07:00,420
it has it has in it has like a 32-bit

00:06:57,720 --> 00:07:04,140
vector or 32-bit register which stores

00:07:00,420 --> 00:07:05,760
information about at which point the

00:07:04,140 --> 00:07:07,710
guest environment or guest operating

00:07:05,760 --> 00:07:10,470
system exits to the virtual machine

00:07:07,710 --> 00:07:12,240
monitor and why does it exit for example

00:07:10,470 --> 00:07:14,250
it can it can exit when there is an

00:07:12,240 --> 00:07:17,870
interrupt or it can exit when it is

00:07:14,250 --> 00:07:21,030
trying to access it when there is say

00:07:17,870 --> 00:07:23,730
memory fault or some sort so at that

00:07:21,030 --> 00:07:26,010
point control shifts to the K via module

00:07:23,730 --> 00:07:28,830
which is a virtual machine monitor and

00:07:26,010 --> 00:07:31,740
KB model will look at the exit reason

00:07:28,830 --> 00:07:34,110
why did the guest exit from the

00:07:31,740 --> 00:07:35,820
virtualized mode and then perform that

00:07:34,110 --> 00:07:38,870
operation is shift control back to the

00:07:35,820 --> 00:07:38,870
guest operating system

00:07:40,240 --> 00:07:45,070
so now you have any hardware you have a

00:07:42,940 --> 00:07:47,380
lot of these instructions available now

00:07:45,070 --> 00:07:49,240
we want to use that hardware

00:07:47,380 --> 00:07:51,340
infrastructure and provide services and

00:07:49,240 --> 00:07:53,590
that's where the loadable kernel module

00:07:51,340 --> 00:07:56,110
comes into picture so this KVM module

00:07:53,590 --> 00:07:58,660
converts the normal Linux kernel into a

00:07:56,110 --> 00:08:00,729
hypervisor which creates a hypervisor

00:07:58,660 --> 00:08:02,919
mode our guest mode or it introduces a

00:08:00,729 --> 00:08:05,110
guest mode which is used by the guest

00:08:02,919 --> 00:08:08,020
operating system it creates it it

00:08:05,110 --> 00:08:10,479
creates a device like the /fk beam which

00:08:08,020 --> 00:08:13,120
is used by the user space program which

00:08:10,479 --> 00:08:14,440
is kqm you to create this virtual

00:08:13,120 --> 00:08:18,880
environment for the guest operating

00:08:14,440 --> 00:08:22,180
system like it it's it introduces the it

00:08:18,880 --> 00:08:22,900
or it offers the services to the qmu

00:08:22,180 --> 00:08:26,590
emulator

00:08:22,900 --> 00:08:28,330
where Colonel I tells calls it it allows

00:08:26,590 --> 00:08:32,140
you to create a virtual CPU it allows

00:08:28,330 --> 00:08:34,450
you to create virtual in interrupt chips

00:08:32,140 --> 00:08:36,430
and it allows you to kind of synchronize

00:08:34,450 --> 00:08:42,010
the operation between the guest

00:08:36,430 --> 00:08:44,920
operating system and the KVM what is

00:08:42,010 --> 00:08:47,010
Qumu now in the kernel model and order

00:08:44,920 --> 00:08:49,360
in the kernel side you have the kernel

00:08:47,010 --> 00:08:51,610
model which converts the kernel into a

00:08:49,360 --> 00:08:54,040
hypervisor but now you want to create

00:08:51,610 --> 00:08:56,589
multiple guests so how do you create

00:08:54,040 --> 00:08:58,630
that that's where the qmu emulator comes

00:08:56,589 --> 00:08:59,980
into picture which is at the end the

00:08:58,630 --> 00:09:02,170
hardware or the in the operating system

00:08:59,980 --> 00:09:04,900
side you have a virtual processor

00:09:02,170 --> 00:09:07,330
hardware or processor infrastructure but

00:09:04,900 --> 00:09:09,339
you still need a PC hardware to run an

00:09:07,330 --> 00:09:11,380
operating system right you still need a

00:09:09,339 --> 00:09:13,029
console you'll still need a keyboard

00:09:11,380 --> 00:09:15,400
you'll still need a mouse or you'll

00:09:13,029 --> 00:09:17,260
still need many other hardware devices

00:09:15,400 --> 00:09:20,020
which are available in a normal system

00:09:17,260 --> 00:09:23,079
and that infrastructure is provided by

00:09:20,020 --> 00:09:25,120
the accumulator so it a liqu AIT's a

00:09:23,079 --> 00:09:27,370
memory bunch of memory on in the system

00:09:25,120 --> 00:09:30,160
memory in the in the RAM and it creates

00:09:27,370 --> 00:09:32,110
a guest environment in that allocated

00:09:30,160 --> 00:09:34,270
memory right

00:09:32,110 --> 00:09:36,970
and then on top of that it costs the

00:09:34,270 --> 00:09:39,280
services offered by the KVM module or

00:09:36,970 --> 00:09:44,260
the kernel virtual machine model to

00:09:39,280 --> 00:09:47,290
interact with the processor or use use

00:09:44,260 --> 00:09:49,960
the press to execute the guest

00:09:47,290 --> 00:09:52,120
environment ok so how does it all look

00:09:49,960 --> 00:09:55,480
like so you have in the bare metal

00:09:52,120 --> 00:09:57,700
system you have the say hardware or the

00:09:55,480 --> 00:10:00,040
processor which gives you the control

00:09:57,700 --> 00:10:02,140
registers and hardware infrastructure on

00:10:00,040 --> 00:10:04,090
top of that you have a colonel in KBM

00:10:02,140 --> 00:10:06,730
which uses that hardware infrastructure

00:10:04,090 --> 00:10:09,070
to create a logical processor or a

00:10:06,730 --> 00:10:11,440
virtual guest environment and that

00:10:09,070 --> 00:10:14,020
virtual guest environment is in turn

00:10:11,440 --> 00:10:16,690
used by the qmu to actually create the

00:10:14,020 --> 00:10:18,430
guest operating system and that is that

00:10:16,690 --> 00:10:20,340
and in that operating system in that

00:10:18,430 --> 00:10:22,990
guest environment it can eventually

00:10:20,340 --> 00:10:27,130
execute the guest operating system right

00:10:22,990 --> 00:10:31,760
so but a cute anatomy of the KBM yes

00:10:27,130 --> 00:10:36,610
this is how it functions or looks like

00:10:31,760 --> 00:10:36,610
yeah that's that's about it

00:10:38,280 --> 00:10:49,550
so are there any questions I guess we it

00:10:45,330 --> 00:10:49,550
was like quite quick introduction area

00:10:52,210 --> 00:10:54,779
yeah

00:11:07,460 --> 00:11:11,089
is there a lot of like differences

00:11:09,260 --> 00:11:14,740
between the Intel and Indiana you said

00:11:11,089 --> 00:11:14,740
are but it wasn't mentioned like yeah

00:11:15,910 --> 00:11:22,550
but not much of a difference it's in the

00:11:19,850 --> 00:11:26,240
as in at the at the very superficial

00:11:22,550 --> 00:11:28,610
level it's all these in coprocessors had

00:11:26,240 --> 00:11:31,160
multiple instructions which work at a

00:11:28,610 --> 00:11:32,149
different kernel mode and user space

00:11:31,160 --> 00:11:34,310
mode like

00:11:32,149 --> 00:11:37,550
different privileges and they sort of

00:11:34,310 --> 00:11:39,980
provide the similar services to create

00:11:37,550 --> 00:11:43,459
the guest environment bra plus there are

00:11:39,980 --> 00:11:45,950
different features as in in terms of KVM

00:11:43,459 --> 00:11:48,410
it uses the basic Linux kernel

00:11:45,950 --> 00:11:50,450
infrastructure to provide the services

00:11:48,410 --> 00:11:52,820
so if you look at the k vm code it's

00:11:50,450 --> 00:11:54,800
very small as in the footprint of the k

00:11:52,820 --> 00:11:56,720
vm code is very small because it uses a

00:11:54,800 --> 00:11:58,730
lot of kernel features like it doesn't

00:11:56,720 --> 00:12:00,560
do shadowing it doesn't do memory memory

00:11:58,730 --> 00:12:02,060
management all those things right for

00:12:00,560 --> 00:12:04,520
that it will it depends on the linux

00:12:02,060 --> 00:12:07,070
kernel and because it's it's part of the

00:12:04,520 --> 00:12:09,230
kernel you can use or manipulate the

00:12:07,070 --> 00:12:12,589
guest environment using in normal system

00:12:09,230 --> 00:12:16,610
commands like shell commands it which is

00:12:12,589 --> 00:12:20,300
which is different in say Zen or VMware

00:12:16,610 --> 00:12:22,900
or other virtualization technology

00:12:20,300 --> 00:12:22,900
right

00:12:24,040 --> 00:12:26,640
yes

00:12:28,300 --> 00:12:32,860
well I haven't used the arm 64 so I

00:12:31,569 --> 00:12:42,240
don't I don't have the first and

00:12:32,860 --> 00:12:42,240
knowledge about ARM processors yeah yeah

00:12:48,490 --> 00:12:51,780
yeah there

00:12:52,040 --> 00:12:56,050
operating supervisor

00:12:57,430 --> 00:13:02,380
yeah wait each table sparks a little bit

00:13:00,200 --> 00:13:02,380
similar

00:13:05,829 --> 00:13:11,960
this give you anything

00:13:08,510 --> 00:13:14,960
how is it's it's difficult to say it's

00:13:11,960 --> 00:13:17,540
better or not but better in terms of it

00:13:14,960 --> 00:13:19,370
has a very small footprint memory

00:13:17,540 --> 00:13:22,670
footprint so it's very flexible in that

00:13:19,370 --> 00:13:23,390
way and it's available by default in the

00:13:22,670 --> 00:13:25,580
linux kernel

00:13:23,390 --> 00:13:31,640
whereas Zen works very different then

00:13:25,580 --> 00:13:33,800
does then has a C guest zero mode which

00:13:31,640 --> 00:13:36,050
is which which replaces the operating

00:13:33,800 --> 00:13:37,970
system in this in this pack which works

00:13:36,050 --> 00:13:40,160
on D so it doesn't have a operating

00:13:37,970 --> 00:13:42,860
system layer but Zen has something

00:13:40,160 --> 00:13:44,180
called guest zero which is which works

00:13:42,860 --> 00:13:46,610
as the operating system here which

00:13:44,180 --> 00:13:49,670
directly interacts with the hardware and

00:13:46,610 --> 00:13:51,710
then guest 1 and onwards which they are

00:13:49,670 --> 00:13:55,130
called the virtual yes they they use the

00:13:51,710 --> 00:13:56,510
guest 0 mode services to work as the

00:13:55,130 --> 00:13:59,270
operating system work as the guest

00:13:56,510 --> 00:14:00,860
environment so guest 0 is the first

00:13:59,270 --> 00:14:04,300
guest which creates the virtual

00:14:00,860 --> 00:14:04,300
environment for the rest of the guests

00:14:10,100 --> 00:14:17,060
no no no so it's not no no it's not much

00:14:13,009 --> 00:14:20,019
in the Linux kernel message it's a very

00:14:17,060 --> 00:14:22,670
different architecture that way yeah

00:14:20,019 --> 00:14:25,130
another advantage for KVM is there is

00:14:22,670 --> 00:14:27,610
lot of active community which is a very

00:14:25,130 --> 00:14:29,540
actively developing and fixing bugs and

00:14:27,610 --> 00:14:33,100
troubleshooting ever and debugging

00:14:29,540 --> 00:14:35,480
things in KVM so that which it's very

00:14:33,100 --> 00:14:42,009
well maintained and well developed as

00:14:35,480 --> 00:14:42,009
well yep

00:14:44,750 --> 00:14:49,180
you have a CD with

00:14:47,110 --> 00:14:50,730
right

00:14:49,180 --> 00:14:53,360
yes

00:14:50,730 --> 00:14:53,360
yeah

00:14:53,690 --> 00:15:00,020
sorry what's that to course yes

00:15:01,770 --> 00:15:04,700
okay

00:15:06,370 --> 00:15:11,589
yes those source will be the virtual

00:15:09,040 --> 00:15:14,379
virtual course yes yes no those will

00:15:11,589 --> 00:15:18,930
with the virtual processors as well yeah

00:15:14,379 --> 00:15:18,930
yeah that that should be possible yes

00:15:20,550 --> 00:15:26,639
yeah it they might but that should be

00:15:23,829 --> 00:15:26,639
possible yeah

00:15:55,220 --> 00:16:01,089
are you running lady yeah yeah yes

00:16:02,420 --> 00:16:08,300
I would say let's take care

00:16:06,050 --> 00:16:11,960
yeah so next walking sheds will start at

00:16:08,300 --> 00:16:14,220
1430 yes we have ten minutes to thank

00:16:11,960 --> 00:16:18,779
you so much for coming

00:16:14,220 --> 00:16:18,779

YouTube URL: https://www.youtube.com/watch?v=6tSa51H1sPk


