Title: Convention over Configuration: Open Event and JSON API - Shubham Padia- FOSSASIA 2018
Publication date: 2018-03-24
Playlist: FOSSASIA Summit 2018
Description: 
	Speaker: Shubham Padia, Developer FOSSASIA
Info: https://2018.fossasia.org/event/speakers.html#shubham-padia3290

Learn more about how the open event project uses JSON API, a specification for building APIs. JSON API follows the ‘Convention over Configuration’ philosophy. Aside from a brief introduction to the revamped architecture of the open event project, the talk will also discuss best practices followed for building APIs and URI conventions followed throughout the project. The talk will also shed some light on the challenges faced while implementing JSON API with Flask.

Track: Open Event Solutions
Room: Training room 2-2
Date: Saturday, 24th March, 2018

Event Page: http://2018.fossasia.org
Follow FOSSASIA on Twitter: https://twitter.com/fossasia/
Like FOSSASIA on Facebook: https://www.facebook.com/fossasia/ 

Produced by Engineers.SG
Captions: 
	00:00:00,030 --> 00:00:07,230
it's awesome good so our next speaker is

00:00:03,480 --> 00:00:10,230
super Katya who has been a great

00:00:07,230 --> 00:00:12,120
supporter and of the project form of

00:00:10,230 --> 00:00:14,009
time involved as a developer both on

00:00:12,120 --> 00:00:17,160
many different layers also like he

00:00:14,009 --> 00:00:19,590
helped just like subtag to deploy the

00:00:17,160 --> 00:00:21,900
project here and run eventually so we

00:00:19,590 --> 00:00:24,359
have a great sense of you to use at the

00:00:21,900 --> 00:00:25,710
prestigious summit and maybe know before

00:00:24,359 --> 00:00:29,699
you start what's your background where

00:00:25,710 --> 00:00:32,309
you are from and welcome from India

00:00:29,699 --> 00:00:33,719
apparently by the way about in India the

00:00:32,309 --> 00:00:34,320
University and so on what what's the

00:00:33,719 --> 00:00:38,640
background

00:00:34,320 --> 00:00:42,780
I'm from rajput Gujarat in India and I

00:00:38,640 --> 00:00:45,510
study at travellightly al-abaad that in

00:00:42,780 --> 00:00:48,539
the in the east of India actually

00:00:45,510 --> 00:00:50,640
microphone yourself so yeah thank you

00:00:48,539 --> 00:00:53,370
very much and you talk about can't

00:00:50,640 --> 00:00:57,440
convention over configuration or event

00:00:53,370 --> 00:00:57,440
and Jason avi thank you very much and

00:01:00,320 --> 00:01:10,680
good morning everybody

00:01:02,399 --> 00:01:13,310
I'll be mainly talking about test

00:01:10,680 --> 00:01:13,310
first

00:01:24,600 --> 00:01:27,600
test

00:01:34,290 --> 00:01:44,040
yeah so I'll be mainly talking about why

00:01:37,650 --> 00:01:47,580
we use the JSON API spec myself Sivan I

00:01:44,040 --> 00:01:50,370
did the sock last summer with Farsi Xie

00:01:47,580 --> 00:01:53,970
under the open even project I was also a

00:01:50,370 --> 00:01:56,160
GCM endure for fossa last year and I was

00:01:53,970 --> 00:01:59,540
one of the grand prize winner of code

00:01:56,160 --> 00:01:59,540
heat conducted last year

00:02:02,190 --> 00:02:10,840
so as subtag described the api we had in

00:02:07,360 --> 00:02:12,970
the Oh in the old system had some basic

00:02:10,840 --> 00:02:16,570
functionalities like the basic

00:02:12,970 --> 00:02:19,300
authentication release control rule base

00:02:16,570 --> 00:02:23,530
control like admins organizer

00:02:19,300 --> 00:02:24,340
co-organizers and the basic root

00:02:23,530 --> 00:02:29,320
operations

00:02:24,340 --> 00:02:31,540
so although we had API we we weren't

00:02:29,320 --> 00:02:34,180
using it in the front end to make

00:02:31,540 --> 00:02:38,560
requests and retrieve data the API was

00:02:34,180 --> 00:02:42,760
actually built separately as a way for

00:02:38,560 --> 00:02:46,510
third party applications to plug in into

00:02:42,760 --> 00:02:48,700
open event and fresh T theta so as it

00:02:46,510 --> 00:02:51,910
was not well used in the first iteration

00:02:48,700 --> 00:02:54,430
the API was not very well developed only

00:02:51,910 --> 00:02:56,140
a few crude operations were there and

00:02:54,430 --> 00:02:59,770
all the information was not available

00:02:56,140 --> 00:03:03,250
we used the swagger Docs for displaying

00:02:59,770 --> 00:03:04,540
the documentation all those rugged rocks

00:03:03,250 --> 00:03:08,709
generally follow the open API

00:03:04,540 --> 00:03:12,540
specification we didn't eat air to any

00:03:08,709 --> 00:03:17,610
structure at all so it was just some

00:03:12,540 --> 00:03:17,610
decent structured responses at that time

00:03:18,120 --> 00:03:25,299
so what we first needed was a proper

00:03:22,840 --> 00:03:28,980
relationship definitions we started

00:03:25,299 --> 00:03:32,230
looking out for API specification and

00:03:28,980 --> 00:03:35,049
the first thing was probably because we

00:03:32,230 --> 00:03:35,830
have a lot of rules like you have an

00:03:35,049 --> 00:03:41,280
organizer

00:03:35,830 --> 00:03:44,200
organizer track moderator registra and

00:03:41,280 --> 00:03:46,780
each each track has multiple sessions

00:03:44,200 --> 00:03:49,600
each room has multiple sessions so that

00:03:46,780 --> 00:03:52,709
sort of relationship and it becomes

00:03:49,600 --> 00:03:56,640
quite convoluted to code it in

00:03:52,709 --> 00:03:59,320
why a regular JSON framework

00:03:56,640 --> 00:04:04,420
another thing another thing we wanted

00:03:59,320 --> 00:04:08,280
built-in was sorting sorting filtering

00:04:04,420 --> 00:04:08,280
and pagination

00:04:12,510 --> 00:04:19,510
so Jason EPA so Jason EPA is a

00:04:16,500 --> 00:04:22,900
specification for how the client should

00:04:19,510 --> 00:04:29,020
request the resources and how the server

00:04:22,900 --> 00:04:34,050
should respond it mainly minimizes the

00:04:29,020 --> 00:04:38,350
number of requests and gives focus on

00:04:34,050 --> 00:04:41,020
caching the data so that you don't have

00:04:38,350 --> 00:04:43,050
to regularly keep making requests to the

00:04:41,020 --> 00:04:43,050
server

00:04:46,470 --> 00:04:55,500
why is this an EPA six NEPA follows the

00:04:49,780 --> 00:04:57,790
convention over configuration ideology a

00:04:55,500 --> 00:05:00,220
conventional configuration means that

00:04:57,790 --> 00:05:01,750
there's a convention at place which you

00:05:00,220 --> 00:05:06,100
have to follow this there's no other

00:05:01,750 --> 00:05:08,340
option you cannot configure things but

00:05:06,100 --> 00:05:16,360
that doesn't mean that you lose the

00:05:08,340 --> 00:05:17,950
flexibility of a of the API it reduces

00:05:16,360 --> 00:05:20,380
the number of choices the developer has

00:05:17,950 --> 00:05:22,479
to make and eases the car is the easiest

00:05:20,380 --> 00:05:25,660
calibration at unity see a

00:05:22,479 --> 00:05:28,930
false-positive products have usually

00:05:25,660 --> 00:05:31,870
have a large number of contributors we

00:05:28,930 --> 00:05:33,910
participate in GC IG sock and students

00:05:31,870 --> 00:05:39,250
come a contribute for a month or two

00:05:33,910 --> 00:05:44,400
sometimes maybe more and they go back so

00:05:39,250 --> 00:05:46,390
we need to make sure that all the API

00:05:44,400 --> 00:05:50,260
written have follows a certain

00:05:46,390 --> 00:05:54,390
specification it's hard to collaborate

00:05:50,260 --> 00:05:59,070
if we're following a random structure

00:05:54,390 --> 00:05:59,070
without adhering to any specification

00:06:00,430 --> 00:06:10,009
are one of the major advantages of

00:06:04,819 --> 00:06:14,240
decently PA compound documents so it

00:06:10,009 --> 00:06:17,449
allows related resources to be included

00:06:14,240 --> 00:06:19,789
alongside the HTTP requests so in a

00:06:17,449 --> 00:06:22,909
normal a P i if you are requesting a

00:06:19,789 --> 00:06:27,969
track data so you only get that track

00:06:22,909 --> 00:06:32,080
only but with JSON API you can include

00:06:27,969 --> 00:06:36,139
these sessions related to the track and

00:06:32,080 --> 00:06:38,419
you can also page in at that so only on

00:06:36,139 --> 00:06:40,900
number a number of say first five

00:06:38,419 --> 00:06:43,430
sessions will be included in the track

00:06:40,900 --> 00:06:47,870
it could decrease the number of

00:06:43,430 --> 00:06:51,550
necessary HTTP requests for example if

00:06:47,870 --> 00:06:54,590
you have a post management system so

00:06:51,550 --> 00:06:57,500
your posts can include the author object

00:06:54,590 --> 00:07:03,529
so the authors user profile will be

00:06:57,500 --> 00:07:08,719
included along with the post as fast

00:07:03,529 --> 00:07:13,270
fields field sets so we have actually we

00:07:08,719 --> 00:07:16,250
for foreign for any normal event we have

00:07:13,270 --> 00:07:19,009
25 to drain authority fields for for a

00:07:16,250 --> 00:07:21,349
single event if you fill out the whole

00:07:19,009 --> 00:07:25,509
form you we have to devise the refused

00:07:21,349 --> 00:07:31,990
and the front-end may not need them all

00:07:25,509 --> 00:07:31,990
at some point of time so you can

00:07:35,060 --> 00:07:41,910
sure

00:07:37,290 --> 00:07:47,100
you can specify which which fields to

00:07:41,910 --> 00:07:50,250
include by by that type you like fields

00:07:47,100 --> 00:07:52,920
are diverse across all title so only the

00:07:50,250 --> 00:07:59,150
the title will come in the body will

00:07:52,920 --> 00:08:05,190
come nothing else pika this is a normal

00:07:59,150 --> 00:08:10,470
decent pio response this every every

00:08:05,190 --> 00:08:14,010
Jason EPA response has a data object

00:08:10,470 --> 00:08:16,500
data JSON object in the root and this

00:08:14,010 --> 00:08:19,290
one is when we include an object so

00:08:16,500 --> 00:08:21,900
there's this article and the included

00:08:19,290 --> 00:08:26,040
author who has the type people the ID

00:08:21,900 --> 00:08:29,070
and their attributes so what with a

00:08:26,040 --> 00:08:33,080
single request I can face the author and

00:08:29,070 --> 00:08:33,080
there's much less requests over

00:08:36,930 --> 00:08:45,790
this is the example of Venetian so there

00:08:43,300 --> 00:08:50,199
are a lots of articles in the event

00:08:45,790 --> 00:08:53,410
management system there then the links

00:08:50,199 --> 00:08:56,290
of the current article that you are

00:08:53,410 --> 00:08:58,899
retrieving the first of that colleague

00:08:56,290 --> 00:09:04,990
collection and the previous in the next

00:08:58,899 --> 00:09:08,230
will be displayed along with that the

00:09:04,990 --> 00:09:13,089
document must contain one of these three

00:09:08,230 --> 00:09:18,870
the the data if errors if any present

00:09:13,089 --> 00:09:18,870
and the meta part if

00:09:28,790 --> 00:09:35,400
this one

00:09:31,180 --> 00:09:35,400
we have any hand phone back now

00:10:50,790 --> 00:10:54,420
yeah oh geez

00:11:07,830 --> 00:11:13,050
but then he got here

00:11:10,330 --> 00:11:13,050
the corner

00:11:27,130 --> 00:11:33,200
doesn't overlap the cable looking

00:11:30,390 --> 00:11:33,200
I understand

00:11:36,339 --> 00:11:41,620
come on you just got this out of you

00:11:41,819 --> 00:11:45,920
so

00:11:43,080 --> 00:11:45,920
you should somebody

00:11:52,050 --> 00:11:56,720
it shouldn't overlap the cables because

00:11:53,759 --> 00:11:56,720
they're different receivers

00:11:59,430 --> 00:12:02,089
this

00:12:04,050 --> 00:12:11,200
so I'll be continuing with the document

00:12:06,910 --> 00:12:17,170
structure if if there's any error the

00:12:11,200 --> 00:12:19,660
error is also a JSON object and an error

00:12:17,170 --> 00:12:25,480
response should not have a data root in

00:12:19,660 --> 00:12:29,020
that response the document may contain

00:12:25,480 --> 00:12:31,930
one of the following G's an API root

00:12:29,020 --> 00:12:35,530
that describes of which version of the

00:12:31,930 --> 00:12:39,280
API using like v1 v2 v3 you can define

00:12:35,530 --> 00:12:41,370
it on your own the links the links that

00:12:39,280 --> 00:12:45,580
are used in Federation's the self

00:12:41,370 --> 00:12:50,260
previous/next last and first included

00:12:45,580 --> 00:12:54,490
included mentions the included related

00:12:50,260 --> 00:12:57,970
object that you've used this is one

00:12:54,490 --> 00:13:03,640
other example of this and if your

00:12:57,970 --> 00:13:08,100
response so what what do we use to

00:13:03,640 --> 00:13:14,490
display this JSON API into the

00:13:08,100 --> 00:13:18,720
documentation so API blueprint is a API

00:13:14,490 --> 00:13:22,920
API description language for JSON API

00:13:18,720 --> 00:13:27,510
specifically this is an example of our

00:13:22,920 --> 00:13:32,230
generated documentation we use AG Li o

00:13:27,510 --> 00:13:35,950
AG li o for rendering the API blueprint

00:13:32,230 --> 00:13:40,360
file it's a single file and you mention

00:13:35,950 --> 00:13:44,020
all the fields and the type of the data

00:13:40,360 --> 00:13:49,810
that that they should have like integer

00:13:44,020 --> 00:13:54,130
string and you here is the description

00:13:49,810 --> 00:13:58,150
of the users API so we first mentioned

00:13:54,130 --> 00:14:02,290
the what the API does what all fields

00:13:58,150 --> 00:14:04,990
are there and then you as you can see

00:14:02,290 --> 00:14:08,370
here all the methods of that API will be

00:14:04,990 --> 00:14:11,709
listed like list all users create users

00:14:08,370 --> 00:14:16,200
get delays all this is auto-generated on

00:14:11,709 --> 00:14:16,200
every Travis bill that we make

00:14:23,950 --> 00:14:33,019
you can also check the and check a

00:14:29,779 --> 00:14:35,870
sample request and a response via the

00:14:33,019 --> 00:14:41,180
show/hide button that agli of provides

00:14:35,870 --> 00:14:43,779
with itself so an API is only good at

00:14:41,180 --> 00:14:46,970
just as its documentation if you don't

00:14:43,779 --> 00:14:50,180
document what your API is doing it's

00:14:46,970 --> 00:14:54,250
it's often no use because our API is a

00:14:50,180 --> 00:14:58,459
public one it's mainly dependent on des

00:14:54,250 --> 00:15:02,740
so how do we check if the API follows

00:14:58,459 --> 00:15:06,620
the standard that that we have mentioned

00:15:02,740 --> 00:15:09,709
to check if the API follows the standard

00:15:06,620 --> 00:15:13,070
and the API is updated with every pull

00:15:09,709 --> 00:15:14,750
request so if if you make a new folder

00:15:13,070 --> 00:15:18,410
quest and if you don't include the

00:15:14,750 --> 00:15:21,200
documentation the build will fail and it

00:15:18,410 --> 00:15:24,110
will tell you to add the documentation

00:15:21,200 --> 00:15:28,070
for that if you you change anything in

00:15:24,110 --> 00:15:32,029
an existing API in the response

00:15:28,070 --> 00:15:34,520
structure the build for that pull

00:15:32,029 --> 00:15:37,420
request will also fail and it will it

00:15:34,520 --> 00:15:41,620
will tell you are to include the change

00:15:37,420 --> 00:15:45,640
in your documentation so our document is

00:15:41,620 --> 00:15:45,640
documentation is always updated

00:15:47,960 --> 00:15:55,470
so bread is a command-line tool for

00:15:52,020 --> 00:15:59,790
validating the API blueprint document

00:15:55,470 --> 00:16:04,490
against our back-end implementation so

00:15:59,790 --> 00:16:08,280
how does the bread work so Dredd

00:16:04,490 --> 00:16:09,420
basically runs the application as is a

00:16:08,280 --> 00:16:13,110
flask application

00:16:09,420 --> 00:16:15,630
it runs the application and it starts

00:16:13,110 --> 00:16:19,430
making the request mentioned in the API

00:16:15,630 --> 00:16:23,570
blueprint file one by one to the server

00:16:19,430 --> 00:16:28,140
whatever response it gets it checks the

00:16:23,570 --> 00:16:31,740
validation whether it's compliant to the

00:16:28,140 --> 00:16:33,090
gcn API specification or not if it's

00:16:31,740 --> 00:16:35,970
compliant with the JSON API

00:16:33,090 --> 00:16:38,700
specification the next step it checks

00:16:35,970 --> 00:16:45,750
whether it complies with the existing

00:16:38,700 --> 00:16:50,060
written documentation so they pull the

00:16:45,750 --> 00:16:50,060
pull request for that feature

00:16:51,170 --> 00:17:01,170
we reviews fast restoration epi - as a

00:16:57,870 --> 00:17:06,900
framework for the different API

00:17:01,170 --> 00:17:11,310
specification so what we wanted one of

00:17:06,900 --> 00:17:14,430
the thing that was there that our dinner

00:17:11,310 --> 00:17:19,650
table architecture and the response that

00:17:14,430 --> 00:17:25,470
we give me already a great deal

00:17:19,650 --> 00:17:31,200
we wanted a framework which with the

00:17:25,470 --> 00:17:33,840
need to be coded that much in a sense

00:17:31,200 --> 00:17:37,500
that you mentioned the fields matching

00:17:33,840 --> 00:17:41,970
the table and you can have havenít get

00:17:37,500 --> 00:17:45,090
API ready a post API ready and all the

00:17:41,970 --> 00:17:50,210
appear ready for that after you

00:17:45,090 --> 00:17:53,490
mentioned the specific that post and get

00:17:50,210 --> 00:17:57,500
specification you can link it to the

00:17:53,490 --> 00:18:01,350
existing function we already had for

00:17:57,500 --> 00:18:06,210
working on the post data or the delete

00:18:01,350 --> 00:18:09,480
request and the loss we didn't want to

00:18:06,210 --> 00:18:13,110
expose all attributes of table some

00:18:09,480 --> 00:18:16,710
attributes were internal we wanted to

00:18:13,110 --> 00:18:19,430
compute additional attributes like non

00:18:16,710 --> 00:18:22,650
existing attributes - we have a

00:18:19,430 --> 00:18:24,680
statistics API which lets you how many

00:18:22,650 --> 00:18:29,880
events are in the whole system

00:18:24,680 --> 00:18:33,240
how many Triad tracks are there how many

00:18:29,880 --> 00:18:40,170
tracks have her sorry sessions have been

00:18:33,240 --> 00:18:42,780
accepted rejected and how many speakers

00:18:40,170 --> 00:18:45,180
have been accepted rejected all of these

00:18:42,780 --> 00:18:47,690
all of that which is public can be

00:18:45,180 --> 00:18:52,710
available and other can be available via

00:18:47,690 --> 00:18:55,070
the GWT - authentication for the admin

00:18:52,710 --> 00:18:55,070
users

00:18:57,120 --> 00:19:02,049
it also enables us to create a resource

00:19:00,520 --> 00:19:05,440
that uses data from multiple data

00:19:02,049 --> 00:19:12,159
storage so right now we do have a single

00:19:05,440 --> 00:19:15,460
DB with but we may in future yeah we may

00:19:12,159 --> 00:19:19,020
be using multiple database and moving to

00:19:15,460 --> 00:19:28,630
a more service-oriented architecture so

00:19:19,020 --> 00:19:32,950
this helps in complying with that flask

00:19:28,630 --> 00:19:35,980
rest JSON API as a sub tag explained in

00:19:32,950 --> 00:19:39,880
the in the diagram in the previous

00:19:35,980 --> 00:19:42,700
presentation it it's a crude interface

00:19:39,880 --> 00:19:46,270
between the resource manager and your

00:19:42,700 --> 00:19:49,240
data so the basic functionality like

00:19:46,270 --> 00:19:51,159
deleting a resource I don't need to

00:19:49,240 --> 00:19:54,880
would write any code for that if I'm not

00:19:51,159 --> 00:19:58,120
doing anything additional then deleting

00:19:54,880 --> 00:20:01,360
the resource I just only need to mention

00:19:58,120 --> 00:20:04,750
the fields that I require and based on

00:20:01,360 --> 00:20:10,860
the those that ID the field will be

00:20:04,750 --> 00:20:13,059
deleted we have some permission unless

00:20:10,860 --> 00:20:19,440
which we specify along with the

00:20:13,059 --> 00:20:23,080
specification to make sure that

00:20:19,440 --> 00:20:26,320
non-authorized the user doesn't delete

00:20:23,080 --> 00:20:30,090
any data or doesn't get any data he/she

00:20:26,320 --> 00:20:30,090
is not supposed to access

00:20:31,850 --> 00:20:40,010
so that's all for our photos if any be a

00:20:35,910 --> 00:20:40,010
specification any questions

00:20:41,179 --> 00:20:49,340
yeah

00:20:42,930 --> 00:20:49,340
how many I thought it would be how many

00:20:50,739 --> 00:21:01,129
most of 50 to 60% of APA our basic

00:20:57,759 --> 00:21:04,639
cooled application and the application

00:21:01,129 --> 00:21:05,869
logic in them in a crude application and

00:21:04,639 --> 00:21:09,799
thing that the application logic means

00:21:05,869 --> 00:21:13,850
in them is common like if you delete our

00:21:09,799 --> 00:21:16,999
track or if you delete a session all the

00:21:13,850 --> 00:21:21,739
related resource with it will be unlike

00:21:16,999 --> 00:21:23,899
the in-app Postgres database and it just

00:21:21,739 --> 00:21:27,409
believed we also have another option

00:21:23,899 --> 00:21:30,679
called soft delete which we modified the

00:21:27,409 --> 00:21:33,349
floral JSON API we made a fork of it and

00:21:30,679 --> 00:21:36,320
we modified it to include that so soft

00:21:33,349 --> 00:21:40,309
delete just includes deleted at

00:21:36,320 --> 00:21:42,710
timestamp if the timestamp is there the

00:21:40,309 --> 00:21:45,289
object has been soft deleted otherwise

00:21:42,710 --> 00:21:49,509
it has been also printed you can mention

00:21:45,289 --> 00:21:54,590
it yryr query param sub unit equals to

00:21:49,509 --> 00:21:59,570
know if some bilities know then the

00:21:54,590 --> 00:22:02,109
record will be permanently deleted any

00:21:59,570 --> 00:22:02,109
other questions

00:22:04,010 --> 00:22:08,500
we make

00:22:05,870 --> 00:22:08,500
you know

00:22:13,740 --> 00:22:16,950
sorry Oh

00:22:18,419 --> 00:22:22,039
I don't have any idea

00:22:35,419 --> 00:22:44,399
the main thing the Indonesian making for

00:22:40,710 --> 00:22:47,690
the juice anyway process that we decided

00:22:44,399 --> 00:22:53,130
to actually use amber for different in

00:22:47,690 --> 00:22:54,000
an Amber has a great support for my data

00:22:53,130 --> 00:22:57,090
amber data

00:22:54,000 --> 00:23:02,549
it's a Gisela PA adapter so the real

00:22:57,090 --> 00:23:04,679
reason for initial reason for using an

00:23:02,549 --> 00:23:09,679
EPA specification was that we are going

00:23:04,679 --> 00:23:09,679
to use amber on the function and we need

00:23:10,429 --> 00:23:13,429
yeah

00:23:16,360 --> 00:23:20,730
here

00:23:18,150 --> 00:23:26,630
thank you

00:23:20,730 --> 00:23:26,630

YouTube URL: https://www.youtube.com/watch?v=Uh7nrncvpvE


