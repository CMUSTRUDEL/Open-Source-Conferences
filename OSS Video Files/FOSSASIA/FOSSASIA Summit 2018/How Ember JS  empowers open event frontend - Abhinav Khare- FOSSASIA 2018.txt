Title: How Ember JS  empowers open event frontend - Abhinav Khare- FOSSASIA 2018
Publication date: 2018-03-24
Playlist: FOSSASIA Summit 2018
Description: 
	Speaker: Abhinav Khare, Developer FOSSASIA
Info: https://2018.fossasia.org/event/speakers.html#abhinav-khare3314

With the development of the API server for the Open Event project we needed to decide which framework to choose for the new Open Event front-end. With the plethora of javascript frameworks available it got really difficult to decide which one is actually the right choice. Every month a new framework arrives and the existing ones keep actively updating themselves often. We decided to go with Ember.js. This talk will cover the emberJS framework and highlight its advantages over others and  demonstrate its usefulness with some code snippets and UI screenshots  as well as  show the hands on advantage by comparing it with the way the previous frontend was structured and the extremely efficient usage of resources using json api. 

Track: Open Event Solutions
Room: Training room 2-2
Date: Saturday, 24th March, 2018

Event Page: http://2018.fossasia.org
Follow FOSSASIA on Twitter: https://twitter.com/fossasia/
Like FOSSASIA on Facebook: https://www.facebook.com/fossasia/ 

Produced by Engineers.SG
Captions: 
	00:00:00,030 --> 00:00:08,670
oh yeah good so we have the next speaker

00:00:05,490 --> 00:00:11,519
here it's a benign fear also like a

00:00:08,670 --> 00:00:14,839
logjam member already off the project he

00:00:11,519 --> 00:00:16,650
has been a Google support student and

00:00:14,839 --> 00:00:20,340
what's your background

00:00:16,650 --> 00:00:23,490
so basically uh I'm all computer science

00:00:20,340 --> 00:00:26,039
undergraduate right now and I'm really

00:00:23,490 --> 00:00:28,650
into web development and I'm currently

00:00:26,039 --> 00:00:29,820
I'm exploring back-end like I've worked

00:00:28,650 --> 00:00:32,969
on for in time for the past two years

00:00:29,820 --> 00:00:35,760
and now I'm dabbing into using flowers

00:00:32,969 --> 00:00:40,290
and the backend Django and other

00:00:35,760 --> 00:00:40,950
frameworks so for the front end Watchers

00:00:40,290 --> 00:00:46,940
yeah

00:00:40,950 --> 00:00:49,590
mentoring students coming soon event and

00:00:46,940 --> 00:00:50,160
we are you from which city at witch

00:00:49,590 --> 00:00:52,170
University

00:00:50,160 --> 00:00:53,489
okay I'm from India Institute of

00:00:52,170 --> 00:00:56,250
information technology

00:00:53,489 --> 00:00:59,520
elaborate and originally I like I live

00:00:56,250 --> 00:01:01,020
in purple but in India but currently

00:00:59,520 --> 00:01:03,390
since I'm in the University I'm staying

00:01:01,020 --> 00:01:05,729
in a la one okay thank you very much

00:01:03,390 --> 00:01:12,229
you're talking about energy is found in

00:01:05,729 --> 00:01:15,630
powers over again front and applause so

00:01:12,229 --> 00:01:18,180
del prete and Shubham they discussed

00:01:15,630 --> 00:01:20,850
like they you guys are aware by now that

00:01:18,180 --> 00:01:23,490
we are using amber juice I'm going to

00:01:20,850 --> 00:01:26,610
dwell into a little deeper into why

00:01:23,490 --> 00:01:27,930
exactly we chose ambergris and how it is

00:01:26,610 --> 00:01:31,470
benefiting the project in the long term

00:01:27,930 --> 00:01:34,530
and what short-term compromises we made

00:01:31,470 --> 00:01:36,390
but which will ultimately result in a

00:01:34,530 --> 00:01:42,329
better better open source environment

00:01:36,390 --> 00:01:45,990
for the users so like as he said

00:01:42,329 --> 00:01:47,490
ambergris is basically a normal MVC

00:01:45,990 --> 00:01:50,729
framework model-view-controller

00:01:47,490 --> 00:01:54,479
but there are certain aspects which sort

00:01:50,729 --> 00:01:57,270
of differentiated from the other MVC

00:01:54,479 --> 00:01:59,460
frameworks and as he said the major

00:01:57,270 --> 00:02:02,270
reason we chose to go play it was its

00:01:59,460 --> 00:02:05,130
compatibility with JSON APIs schema and

00:02:02,270 --> 00:02:08,849
how like how is it serving a purpose

00:02:05,130 --> 00:02:11,160
that we'll see so the whole idea behind

00:02:08,849 --> 00:02:13,000
amber is a convention over configuration

00:02:11,160 --> 00:02:15,280
and that is

00:02:13,000 --> 00:02:17,110
commonly used so but people don't really

00:02:15,280 --> 00:02:18,640
get exactly what they are getting out of

00:02:17,110 --> 00:02:20,740
using those conventions conventions

00:02:18,640 --> 00:02:23,140
means more time to do what you could

00:02:20,740 --> 00:02:25,810
have done but are we getting the output

00:02:23,140 --> 00:02:29,650
we expected but by delving into these

00:02:25,810 --> 00:02:34,480
conventions so this is a minimal

00:02:29,650 --> 00:02:38,140
representation of how exactly things

00:02:34,480 --> 00:02:39,790
work around a number and this is this is

00:02:38,140 --> 00:02:46,000
true for mostly all of the MVC

00:02:39,790 --> 00:02:48,070
frameworks right so in amber the key

00:02:46,000 --> 00:02:51,730
point is data demand action so this also

00:02:48,070 --> 00:02:53,920
I was discussed by del prete and he has

00:02:51,730 --> 00:02:56,920
already discussed the data the things

00:02:53,920 --> 00:02:57,760
regarding data in detail so as to why we

00:02:56,920 --> 00:03:01,660
should be following this approach

00:02:57,760 --> 00:03:04,959
actions of what does it get like what it

00:03:01,660 --> 00:03:06,310
means to us the general idea is that you

00:03:04,959 --> 00:03:08,170
don't want the data to be stored in a

00:03:06,310 --> 00:03:11,440
central place so that each time you have

00:03:08,170 --> 00:03:14,470
to like if at a lower level in your code

00:03:11,440 --> 00:03:16,240
you want to use that data you don't want

00:03:14,470 --> 00:03:18,760
to make separate calls for that each

00:03:16,240 --> 00:03:20,860
time it is being loaded on the other

00:03:18,760 --> 00:03:22,600
hand the actions you want the logic to

00:03:20,860 --> 00:03:24,300
be in a single place so if there are

00:03:22,600 --> 00:03:26,500
four components in a single template and

00:03:24,300 --> 00:03:28,209
they each of them have four actions

00:03:26,500 --> 00:03:29,200
instead of having four files in which

00:03:28,209 --> 00:03:30,700
you will write those four actions you

00:03:29,200 --> 00:03:32,530
want them to be in a single logical

00:03:30,700 --> 00:03:34,300
place where you are controlling the and

00:03:32,530 --> 00:03:40,019
dialogic of the application hence the

00:03:34,300 --> 00:03:42,519
actual support so he included or almost

00:03:40,019 --> 00:03:45,100
all the components present inside amber

00:03:42,519 --> 00:03:47,860
and like Services is actually a major

00:03:45,100 --> 00:03:52,560
part of it or it was not in this list so

00:03:47,860 --> 00:03:56,769
I added it so service is basically

00:03:52,560 --> 00:03:58,510
services a long-term amber object it it

00:03:56,769 --> 00:03:59,950
is active as long as you are running the

00:03:58,510 --> 00:04:02,320
application it doesn't matter which page

00:03:59,950 --> 00:04:04,510
which route you are on once you are into

00:04:02,320 --> 00:04:07,000
the session the service object like the

00:04:04,510 --> 00:04:09,010
service will exist and the login part

00:04:07,000 --> 00:04:10,870
the form validation sparked all of these

00:04:09,010 --> 00:04:12,580
are being handled by the services now

00:04:10,870 --> 00:04:15,989
the biggest advantage of doing it this

00:04:12,580 --> 00:04:18,070
way is that let's say I want some like

00:04:15,989 --> 00:04:20,799
let's say there are 50 forms in the

00:04:18,070 --> 00:04:23,430
entire project and each of them I will

00:04:20,799 --> 00:04:25,599
have several validations and I need that

00:04:23,430 --> 00:04:26,500
okay are the validations can be

00:04:25,599 --> 00:04:29,860
different like the

00:04:26,500 --> 00:04:32,050
is a email field and there might be a

00:04:29,860 --> 00:04:33,970
passel field so we'll decide the logic

00:04:32,050 --> 00:04:36,910
according to them but the basic

00:04:33,970 --> 00:04:37,960
functioning that the vanu are not

00:04:36,910 --> 00:04:39,370
satisfying the requirement of the

00:04:37,960 --> 00:04:42,700
validation how the text field should

00:04:39,370 --> 00:04:44,530
turn read how the form should stop how a

00:04:42,700 --> 00:04:46,270
model should pop up to stop you from

00:04:44,530 --> 00:04:49,180
submitting the form citing the error

00:04:46,270 --> 00:04:51,370
these are common like the code for this

00:04:49,180 --> 00:04:54,250
is common the general idea is common

00:04:51,370 --> 00:04:55,900
what we do when our validation fails so

00:04:54,250 --> 00:04:56,200
services take care of those kind of

00:04:55,900 --> 00:04:58,090
things

00:04:56,200 --> 00:05:04,750
so there is a form servicer number which

00:04:58,090 --> 00:05:06,669
manages it pretty well so the output

00:05:04,750 --> 00:05:09,100
like open event was working fine is

00:05:06,669 --> 00:05:12,040
working fine this event event here like

00:05:09,100 --> 00:05:14,290
the entire force issue submit is being

00:05:12,040 --> 00:05:16,419
hosted on the legacy code but the thing

00:05:14,290 --> 00:05:18,430
is that legacy code was made on the go

00:05:16,419 --> 00:05:21,010
and different people contributed to it

00:05:18,430 --> 00:05:23,950
and the end as of this moment the code

00:05:21,010 --> 00:05:25,540
got very scattered like the back end is

00:05:23,950 --> 00:05:27,160
mixed like completely coupled with the

00:05:25,540 --> 00:05:28,960
front end and there is a lot of inline

00:05:27,160 --> 00:05:30,880
CSS lot of styling flaws a lot of design

00:05:28,960 --> 00:05:32,590
flaws in in that how the code is

00:05:30,880 --> 00:05:34,750
structured and for a new beginner it's

00:05:32,590 --> 00:05:37,120
really difficult to just start

00:05:34,750 --> 00:05:39,490
contributing to it and that's when this

00:05:37,120 --> 00:05:41,770
idea was born as sceptic tolian is talk

00:05:39,490 --> 00:05:44,110
how why we need to decouple the record

00:05:41,770 --> 00:05:46,000
and front end so the end like after

00:05:44,110 --> 00:05:47,860
following all those conventions this is

00:05:46,000 --> 00:05:50,620
the kind of reference we achieved like

00:05:47,860 --> 00:05:53,140
these are these this code is for the

00:05:50,620 --> 00:05:54,310
same file the same exact file and look

00:05:53,140 --> 00:05:57,340
at the difference in the clarity of the

00:05:54,310 --> 00:05:59,770
two on the on the front end the template

00:05:57,340 --> 00:06:01,780
is a template and on the back end the

00:05:59,770 --> 00:06:05,310
JavaScript code is there the handlebar

00:06:01,780 --> 00:06:07,740
tags are there the styling is there and

00:06:05,310 --> 00:06:10,660
as I'll cover later

00:06:07,740 --> 00:06:13,470
along with using emojis for the UI part

00:06:10,660 --> 00:06:16,750
open even front-end uses semantic UI and

00:06:13,470 --> 00:06:19,630
that is a like really robust framework

00:06:16,750 --> 00:06:22,260
for for UI things and the best part is

00:06:19,630 --> 00:06:22,260
that

00:06:23,440 --> 00:06:28,630
I'll come back to it I'm a semantic way

00:06:26,389 --> 00:06:28,630
port

00:06:30,550 --> 00:06:39,439
so take this for example how conventions

00:06:35,569 --> 00:06:40,879
benefit us in the project as we like we

00:06:39,439 --> 00:06:43,370
define a Moodle as he covered in the

00:06:40,879 --> 00:06:45,590
talk so in the Moodle you this is a

00:06:43,370 --> 00:06:47,419
Moodle for an event and an event is

00:06:45,590 --> 00:06:50,000
related to a session so our event has

00:06:47,419 --> 00:06:52,729
many sessions and a session has a

00:06:50,000 --> 00:06:54,650
belongs to an event so the only thing I

00:06:52,729 --> 00:06:58,189
did was mentioned these two things and

00:06:54,650 --> 00:07:01,009
this get request that the URLs will be

00:06:58,189 --> 00:07:06,039
event slash event ID / sessions I didn't

00:07:01,009 --> 00:07:09,740
have to manually specify and this is

00:07:06,039 --> 00:07:12,110
this was the key thing responsible for

00:07:09,740 --> 00:07:14,629
us choosing emerges it was the entire

00:07:12,110 --> 00:07:17,150
open event is based on routes there are

00:07:14,629 --> 00:07:19,370
a lot of routes and the complexity of

00:07:17,150 --> 00:07:21,710
the routes is not that much because like

00:07:19,370 --> 00:07:24,229
their logical relationships that event

00:07:21,710 --> 00:07:27,469
will have many sessions sessions will

00:07:24,229 --> 00:07:29,659
have a venue so the logical initiative

00:07:27,469 --> 00:07:31,759
was there and by using ember we were

00:07:29,659 --> 00:07:33,349
able to skip the manual labor of good

00:07:31,759 --> 00:07:35,120
actually coding high coding those routes

00:07:33,349 --> 00:07:37,279
like I don't need to specify these

00:07:35,120 --> 00:07:41,419
routes because the ETA follows a JSON

00:07:37,279 --> 00:07:43,909
API schema and amber has a JSON EP

00:07:41,419 --> 00:07:46,069
adapter so all I have to do is specify

00:07:43,909 --> 00:07:47,839
the relationships like section has met

00:07:46,069 --> 00:07:50,210
or like any event has many sections or

00:07:47,839 --> 00:07:51,589
section belongs to an event and it will

00:07:50,210 --> 00:07:54,860
automatically generate the URL according

00:07:51,589 --> 00:07:57,379
to the just one a pear schema and like

00:07:54,860 --> 00:07:59,479
this code is stable for long terms as in

00:07:57,379 --> 00:08:01,669
even if the API specification changes

00:07:59,479 --> 00:08:05,569
all we will have to do is change the

00:08:01,669 --> 00:08:07,699
adapter not the entire front end or like

00:08:05,569 --> 00:08:10,669
in the templates there's not a single

00:08:07,699 --> 00:08:13,479
line which correlates to how the backend

00:08:10,669 --> 00:08:13,479
is supposed to work

00:08:14,270 --> 00:08:21,199
and then like the best part about JSON

00:08:18,440 --> 00:08:24,229
API was that it is highly efficient for

00:08:21,199 --> 00:08:25,940
instance I want a list of events with

00:08:24,229 --> 00:08:28,669
several filters let's say they should

00:08:25,940 --> 00:08:30,139
belong to a particular track and on top

00:08:28,669 --> 00:08:32,779
of that they should be within this

00:08:30,139 --> 00:08:34,250
location so the filtering is being

00:08:32,779 --> 00:08:37,099
handled on the backend and not on the

00:08:34,250 --> 00:08:38,810
front end like it's not like I fetch a

00:08:37,099 --> 00:08:40,669
list of 100 events then filter them

00:08:38,810 --> 00:08:42,110
according to my needs and then display

00:08:40,669 --> 00:08:45,620
them like it is then for most of the

00:08:42,110 --> 00:08:48,080
angular and other frameworks in like how

00:08:45,620 --> 00:08:50,029
it's done over here and what amber makes

00:08:48,080 --> 00:08:52,360
it easy is specifying those filter

00:08:50,029 --> 00:08:56,180
queries like if you look at them closely

00:08:52,360 --> 00:08:58,880
while the filter is like I this is a

00:08:56,180 --> 00:09:01,580
request for events so I request that I

00:08:58,880 --> 00:09:03,140
want to query events and then I include

00:09:01,580 --> 00:09:03,980
these things like they won't be included

00:09:03,140 --> 00:09:05,690
by default

00:09:03,980 --> 00:09:07,850
whatever including the include close

00:09:05,690 --> 00:09:09,800
they get included and they are first

00:09:07,850 --> 00:09:12,200
along with the event so you can use them

00:09:09,800 --> 00:09:14,360
like if I import events as the event

00:09:12,200 --> 00:09:15,980
then I can just use this use event dot

00:09:14,360 --> 00:09:17,630
tickets and I will get the list of the

00:09:15,980 --> 00:09:19,040
events tickets and if I don't use this

00:09:17,630 --> 00:09:19,670
include clause that tickets won't be

00:09:19,040 --> 00:09:22,790
fast at all

00:09:19,670 --> 00:09:24,200
so the scalability is there like when

00:09:22,790 --> 00:09:26,029
the app scale and then there are instead

00:09:24,200 --> 00:09:29,300
of hundreds of 10,000 events this will

00:09:26,029 --> 00:09:33,500
actually matter in terms of how long the

00:09:29,300 --> 00:09:35,930
network requests take similarly are like

00:09:33,500 --> 00:09:37,190
there is page size the pagination is

00:09:35,930 --> 00:09:40,279
handled on the backend side as well we

00:09:37,190 --> 00:09:43,040
don't have to worry about it and like

00:09:40,279 --> 00:09:45,680
that's that was the whole point like the

00:09:43,040 --> 00:09:48,709
fetching how we are able to fetch the

00:09:45,680 --> 00:09:52,360
data without actually hi putting the

00:09:48,709 --> 00:09:55,540
URLs and the efficient data usage that

00:09:52,360 --> 00:09:58,010
makes my worthwhile for this project

00:09:55,540 --> 00:09:59,720
then the simplest thing is semantic UI

00:09:58,010 --> 00:10:02,890
is that it's an independent robot

00:09:59,720 --> 00:10:06,410
independent robust to UI framework but

00:10:02,890 --> 00:10:07,910
for certain JavaScript frameworks it's

00:10:06,410 --> 00:10:09,470
all for special integrations for

00:10:07,910 --> 00:10:12,079
instance for meteor there is semantic UI

00:10:09,470 --> 00:10:15,770
meteor falls amber there is semantic my

00:10:12,079 --> 00:10:17,360
amber and that reduces the like that

00:10:15,770 --> 00:10:19,940
increases the coding efficiency even

00:10:17,360 --> 00:10:22,430
more because when we are using an

00:10:19,940 --> 00:10:24,650
integration with like it's integration

00:10:22,430 --> 00:10:26,690
with semantic UI I don't have to worry

00:10:24,650 --> 00:10:28,010
about driving the JavaScript side of the

00:10:26,690 --> 00:10:29,510
semantic UI components

00:10:28,010 --> 00:10:31,400
if there's a pop-up there will be

00:10:29,510 --> 00:10:32,450
definitely some JavaScript code if I'm

00:10:31,400 --> 00:10:34,430
using the integration I don't have to

00:10:32,450 --> 00:10:36,710
worry about it these braces are enough

00:10:34,430 --> 00:10:39,080
for that like I just opened up I'll

00:10:36,710 --> 00:10:40,520
erase its pop-up I specify what should

00:10:39,080 --> 00:10:42,830
what option should be there and that is

00:10:40,520 --> 00:10:45,340
done and the next day there will be

00:10:42,830 --> 00:10:45,340
comparison

00:10:53,600 --> 00:11:01,680
yes I like that code that is three

00:10:59,460 --> 00:11:02,940
pop-ups right there and all three

00:11:01,680 --> 00:11:06,300
pop-ups are doing three different things

00:11:02,940 --> 00:11:07,890
and if I were not using with it with its

00:11:06,300 --> 00:11:10,110
Amber integration I was using the normal

00:11:07,890 --> 00:11:13,680
semantically way these two combined will

00:11:10,110 --> 00:11:16,320
make the code for a single pop-up so so

00:11:13,680 --> 00:11:19,290
like it was really really well it's

00:11:16,320 --> 00:11:21,420
pretty compatible with ember and in

00:11:19,290 --> 00:11:23,460
general also it's very responsive and

00:11:21,420 --> 00:11:25,920
the it has gotten great community

00:11:23,460 --> 00:11:30,270
support recently semantic UI and that's

00:11:25,920 --> 00:11:32,550
why we went ahead with semantic UI so

00:11:30,270 --> 00:11:34,590
like this seems like a good pitch it's

00:11:32,550 --> 00:11:36,450
looking pretty good

00:11:34,590 --> 00:11:39,060
it's completely responsive that's my

00:11:36,450 --> 00:11:41,930
stream short there are colors everything

00:11:39,060 --> 00:11:44,100
is padded and the best part like

00:11:41,930 --> 00:11:46,770
generating this page didn't require a

00:11:44,100 --> 00:11:49,070
single line of CSS from our part there's

00:11:46,770 --> 00:11:51,600
not a single honest cases in this course

00:11:49,070 --> 00:11:53,160
it's completely being handled by its

00:11:51,600 --> 00:11:56,580
that default class is available in

00:11:53,160 --> 00:11:58,400
semantic UI and like that is really

00:11:56,580 --> 00:12:00,360
efficient if you are able to generate

00:11:58,400 --> 00:12:03,150
something like this without actually

00:12:00,360 --> 00:12:05,040
diving into CSS at all and that's and

00:12:03,150 --> 00:12:06,510
the code look looks much cleaner because

00:12:05,040 --> 00:12:08,640
of that you can make any adjustments you

00:12:06,510 --> 00:12:09,930
want and what we have like other

00:12:08,640 --> 00:12:11,400
perspectives what we have tried to

00:12:09,930 --> 00:12:14,310
incorporate is that in the open even

00:12:11,400 --> 00:12:17,130
foreign project we usually don't prefer

00:12:14,310 --> 00:12:18,630
any styling like any extra styling to be

00:12:17,130 --> 00:12:21,590
applied the default glasses are enough

00:12:18,630 --> 00:12:21,590
for our needs

00:12:24,810 --> 00:12:32,140
then since amber uses components there

00:12:29,380 --> 00:12:35,740
is a potential for like extreme cases of

00:12:32,140 --> 00:12:38,380
code you reusability this these cards

00:12:35,740 --> 00:12:40,930
like this is the landing page of open

00:12:38,380 --> 00:12:45,190
event and the events have been

00:12:40,930 --> 00:12:47,589
experienced this other page is on the

00:12:45,190 --> 00:12:49,089
explore route it helps you search events

00:12:47,589 --> 00:12:51,760
according to your categories or search

00:12:49,089 --> 00:12:53,740
query and this is the session route and

00:12:51,760 --> 00:12:55,420
they use three different variations on

00:12:53,740 --> 00:12:57,100
the same component and the code is

00:12:55,420 --> 00:12:58,390
entirely same like all I'm doing is

00:12:57,100 --> 00:13:01,110
changing what I am passing into the

00:12:58,390 --> 00:13:04,300
component and some afl's manipulations

00:13:01,110 --> 00:13:06,310
so the size of the code base has been

00:13:04,300 --> 00:13:08,850
reduced exponentially in terms from

00:13:06,310 --> 00:13:11,200
migrating from other previous an

00:13:08,850 --> 00:13:13,720
implementation like this is no good for

00:13:11,200 --> 00:13:15,730
the entire three pages I only change

00:13:13,720 --> 00:13:19,510
what I pass in the model and it adjusts

00:13:15,730 --> 00:13:21,089
accordingly then amber has a powerful

00:13:19,510 --> 00:13:24,220
CLI so you don't have to worry about

00:13:21,089 --> 00:13:25,450
boilerplate codes like if you want to

00:13:24,220 --> 00:13:27,250
generate a component while you write as

00:13:25,450 --> 00:13:29,380
M by Z component and the component name

00:13:27,250 --> 00:13:31,480
and the one branch can generate it along

00:13:29,380 --> 00:13:36,070
with its test files so you just have to

00:13:31,480 --> 00:13:38,320
edit it testing on the Amber's testing

00:13:36,070 --> 00:13:41,740
or number is really easy like I saw a

00:13:38,320 --> 00:13:46,360
booth of UI leashes down in the event

00:13:41,740 --> 00:13:48,850
hall and amber sort of involvements by

00:13:46,360 --> 00:13:51,160
that logic only like if you see it says

00:13:48,850 --> 00:13:54,279
with it this URL and then you visit

00:13:51,160 --> 00:13:56,890
their own URL you can assault if the

00:13:54,279 --> 00:13:59,830
current URL is like this it's a very

00:13:56,890 --> 00:14:02,200
simple test which which checks that if

00:13:59,830 --> 00:14:03,580
the users login logged in then which URL

00:14:02,200 --> 00:14:06,100
should be there if the user is not

00:14:03,580 --> 00:14:07,690
logged in what should happen and this

00:14:06,100 --> 00:14:09,430
test sort of confirms it so there are

00:14:07,690 --> 00:14:11,560
acceptance tests there are unit tests

00:14:09,430 --> 00:14:13,240
you can write them custom boilerplate

00:14:11,560 --> 00:14:16,180
code is there for the unit test so

00:14:13,240 --> 00:14:17,740
testing is very easy so right from the

00:14:16,180 --> 00:14:19,420
day one when we started coding on this

00:14:17,740 --> 00:14:21,100
project we were encouraged to write

00:14:19,420 --> 00:14:26,230
tests and we did write tests for all the

00:14:21,100 --> 00:14:28,779
components the documentation for amber

00:14:26,230 --> 00:14:31,270
is excellent because if you all you have

00:14:28,779 --> 00:14:33,160
to do to get started with amber is go to

00:14:31,270 --> 00:14:35,380
the official amber website there's an

00:14:33,160 --> 00:14:36,880
app which you can make and that pretty

00:14:35,380 --> 00:14:38,730
much covers everything related to amber

00:14:36,880 --> 00:14:41,559
including a monitor

00:14:38,730 --> 00:14:44,319
the the community of M where is the

00:14:41,559 --> 00:14:46,629
reactive for instance anything we needed

00:14:44,319 --> 00:14:51,249
which was not available by default in

00:14:46,629 --> 00:14:52,779
amber the ID one for it did exist like

00:14:51,249 --> 00:14:55,239
all we had to do was a simple Google

00:14:52,779 --> 00:14:56,619
search state our requirements and there

00:14:55,239 --> 00:14:58,089
are thousands of open-source developers

00:14:56,619 --> 00:15:01,179
who have readily made components for us

00:14:58,089 --> 00:15:02,709
for instance like scheduler is still

00:15:01,179 --> 00:15:05,230
pending to be implemented on the front

00:15:02,709 --> 00:15:07,029
end and she'll dealer is something which

00:15:05,230 --> 00:15:09,069
requires extensive code coverage and

00:15:07,029 --> 00:15:11,139
combined with the complexity of writing

00:15:09,069 --> 00:15:14,439
in writing attending Amber conventions

00:15:11,139 --> 00:15:16,689
it it might become a project of it o of

00:15:14,439 --> 00:15:19,299
its own if some over to write is from

00:15:16,689 --> 00:15:20,410
stretch and hence the mentors and it was

00:15:19,299 --> 00:15:22,179
decided that we are going to use an

00:15:20,410 --> 00:15:24,489
add-on and it was readily available in

00:15:22,179 --> 00:15:26,199
an open source I am sure I should you

00:15:24,489 --> 00:15:27,519
know there are thousands of add-ons for

00:15:26,199 --> 00:15:32,589
ember and they are being actively

00:15:27,519 --> 00:15:34,989
maintained so are lastly I'll conclude

00:15:32,589 --> 00:15:37,839
by specifying some areas that you that

00:15:34,989 --> 00:15:39,879
you can work on right now like if you

00:15:37,839 --> 00:15:41,230
are writing a proposal for g-shock or if

00:15:39,879 --> 00:15:44,829
you're just interested in contributing

00:15:41,230 --> 00:15:47,110
in general these are the areas which are

00:15:44,829 --> 00:15:51,670
in active development as of this moment

00:15:47,110 --> 00:15:55,629
all of this fact API integration is a

00:15:51,670 --> 00:15:56,589
great beginning point for anyone who

00:15:55,629 --> 00:15:59,619
wants to contribute to the project

00:15:56,589 --> 00:16:02,559
because there are all the API sort of

00:15:59,619 --> 00:16:09,279
follow the same well they same structure

00:16:02,559 --> 00:16:11,339
that is implemented so thank you many

00:16:09,279 --> 00:16:11,339
questions

00:16:20,720 --> 00:16:25,800
[Applause]

00:16:22,440 --> 00:16:25,800

YouTube URL: https://www.youtube.com/watch?v=77VUfYXNiW4


