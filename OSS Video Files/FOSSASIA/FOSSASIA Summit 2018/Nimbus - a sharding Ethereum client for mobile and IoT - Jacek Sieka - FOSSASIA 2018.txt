Title: Nimbus - a sharding Ethereum client for mobile and IoT - Jacek Sieka - FOSSASIA 2018
Publication date: 2018-03-23
Playlist: FOSSASIA Summit 2018
Description: 
	Speaker: Jacek Sieka, Head of Research Development Status.im
Info: https://2018.fossasia.org/event/speakers.html#jacek-sieka3384

Nimbus is an exciting and experimental lightweight client for the Ethereum network that focuses on next-generation Ethereum technologies and running on resource-constrained devices, such as mobiles. During the talk, we’ll go over a number of topics:

Anatomy of an Ethereum client

Sharding, and what it means for the implementation

A little bit about Nim, the language it’s implemented in

Status Open bounty - get rewarded for your OSS contributions

Room: Event Hall 2-1
Track: Blockchain
Date: Friday, 23rd March, 2018

Event Page: http://2018.fossasia.org
Follow FOSSASIA on Twitter: https://twitter.com/fossasia/
Like FOSSASIA on Facebook: https://www.facebook.com/fossasia/

Produced by Engineers.SG
Captions: 
	00:00:02,240 --> 00:00:08,670
so we're sort of getting everything in

00:00:04,470 --> 00:00:11,309
order here I'm yeah tech I recently

00:00:08,670 --> 00:00:13,679
joined the company called status which

00:00:11,309 --> 00:00:16,410
works with aetherium

00:00:13,679 --> 00:00:17,520
for mobile devices right so they're

00:00:16,410 --> 00:00:20,760
trying to bring aetherium

00:00:17,520 --> 00:00:26,099
to mobile phones IOT whatever that might

00:00:20,760 --> 00:00:28,980
be today is gonna be a slightly

00:00:26,099 --> 00:00:31,230
technical talk I'm gonna go like I'm

00:00:28,980 --> 00:00:34,410
gonna go over what what it takes to

00:00:31,230 --> 00:00:36,960
build an aetherium client because this

00:00:34,410 --> 00:00:43,590
is a project that we just just embarked

00:00:36,960 --> 00:00:49,770
upon not long ago see if we can get some

00:00:43,590 --> 00:00:52,890
slides up a little bit about my

00:00:49,770 --> 00:00:57,809
background I'm head of the research

00:00:52,890 --> 00:01:02,280
department parent status I cut my teeth

00:00:57,809 --> 00:01:05,159
in the early 2000s and this was an

00:01:02,280 --> 00:01:07,490
absolutely amazing time to do computer

00:01:05,159 --> 00:01:09,830
science right it was the time when

00:01:07,490 --> 00:01:13,530
distributed systems were coming around

00:01:09,830 --> 00:01:16,200
was a lot of talk about how to start

00:01:13,530 --> 00:01:20,460
using the Internet in a more interesting

00:01:16,200 --> 00:01:23,490
way you know you name it like if it was

00:01:20,460 --> 00:01:25,320
BitTorrent or emule or all these

00:01:23,490 --> 00:01:26,939
technologies that that that's about the

00:01:25,320 --> 00:01:29,729
time when these things came about right

00:01:26,939 --> 00:01:33,750
and at the time I was studying I was

00:01:29,729 --> 00:01:35,670
studying distributed networking and I

00:01:33,750 --> 00:01:38,340
remember the day when when I read the

00:01:35,670 --> 00:01:41,220
cord paper now cord is one an

00:01:38,340 --> 00:01:44,100
interesting early distributed hash table

00:01:41,220 --> 00:01:47,299
and just struck me how amazingly simple

00:01:44,100 --> 00:01:49,890
that design was right

00:01:47,299 --> 00:01:54,479
basically you build a ring of nodes and

00:01:49,890 --> 00:01:56,070
and and by doing a binary search on

00:01:54,479 --> 00:02:00,930
those nodes you can essentially pass a

00:01:56,070 --> 00:02:03,450
message to anyone on that ring from in

00:02:00,930 --> 00:02:04,920
like logarithmic time and this was

00:02:03,450 --> 00:02:06,810
fantastic right because on the internet

00:02:04,920 --> 00:02:09,300
we had all these computers connected and

00:02:06,810 --> 00:02:13,650
suddenly there was a way to reach any of

00:02:09,300 --> 00:02:17,939
them in a fairly scalable way right

00:02:13,650 --> 00:02:20,430
instead of trying to spam the network or

00:02:17,939 --> 00:02:28,200
using a centralized service you could

00:02:20,430 --> 00:02:31,079
suddenly go fully decentralized other

00:02:28,200 --> 00:02:32,819
stuff that that that that came about in

00:02:31,079 --> 00:02:34,920
this time and again with BitTorrent and

00:02:32,819 --> 00:02:36,239
email and those protocols was something

00:02:34,920 --> 00:02:42,030
called Merkel trees now they were

00:02:36,239 --> 00:02:44,069
researched and in 70s much earlier but a

00:02:42,030 --> 00:02:48,389
lot of new cases were being brought up

00:02:44,069 --> 00:02:50,609
right you would take a file you would

00:02:48,389 --> 00:02:52,950
hash the individual pieces and from

00:02:50,609 --> 00:02:57,480
those pieces you could build up a tree

00:02:52,950 --> 00:02:59,670
of hashes and gain either a very

00:02:57,480 --> 00:03:02,790
granular view of the correctness of the

00:02:59,670 --> 00:03:04,379
file or or a very much more compressed

00:03:02,790 --> 00:03:06,599
one which would cover the whole file at

00:03:04,379 --> 00:03:10,220
the same time right so you could zoom in

00:03:06,599 --> 00:03:12,989
and zoom out of this correctness and

00:03:10,220 --> 00:03:15,359
this technology being a tree means that

00:03:12,989 --> 00:03:18,359
you could also build on it right so once

00:03:15,359 --> 00:03:22,139
you had one the hash of one file you

00:03:18,359 --> 00:03:24,180
could join several files together in in

00:03:22,139 --> 00:03:25,730
yet another hash so with a single hash

00:03:24,180 --> 00:03:32,010
you can sort of represent the whole

00:03:25,730 --> 00:03:33,870
myriad of files right and finally a

00:03:32,010 --> 00:03:39,739
technology that I've always been very

00:03:33,870 --> 00:03:41,699
very interested in is is compilers and

00:03:39,739 --> 00:03:43,440
specifically virtual machine based

00:03:41,699 --> 00:03:48,709
compilers so I used to work on a little

00:03:43,440 --> 00:03:48,709
language called Lua for a while was yeah

00:03:48,760 --> 00:03:52,500
yeah I think it's something hopefully

00:03:55,319 --> 00:04:04,810
let's see where we are now scream oh yay

00:04:01,110 --> 00:04:08,170
alright so we've got a I yeah we have

00:04:04,810 --> 00:04:12,690
the ring a bit of crypto right Merkle

00:04:08,170 --> 00:04:15,280
trees that's where we are excellent so

00:04:12,690 --> 00:04:18,790
virtual machines was was like a big

00:04:15,280 --> 00:04:20,290
interest of mine because with them you

00:04:18,790 --> 00:04:22,030
could build programming languages and as

00:04:20,290 --> 00:04:23,919
any computer scientist knows like

00:04:22,030 --> 00:04:25,540
building a programming language that's

00:04:23,919 --> 00:04:32,440
like one of the most fun things you can

00:04:25,540 --> 00:04:35,830
do and a recent development in this area

00:04:32,440 --> 00:04:39,310
is obviously LLVM which is like compiler

00:04:35,830 --> 00:04:43,660
builders toolkit you can you can just

00:04:39,310 --> 00:04:45,250
take a little vm add a parser or an AST

00:04:43,660 --> 00:04:47,680
to it and basically you can build your

00:04:45,250 --> 00:04:51,669
own language in like a very short time

00:04:47,680 --> 00:04:54,030
very very cool putting all these things

00:04:51,669 --> 00:04:56,470
together right you have the DHT for

00:04:54,030 --> 00:04:59,620
distributed systems you have crypto with

00:04:56,470 --> 00:05:03,580
Merkel trees and and an encryption and

00:04:59,620 --> 00:05:05,169
so on you you have LLVM which provides a

00:05:03,580 --> 00:05:07,630
virtual machine where you can execute

00:05:05,169 --> 00:05:12,340
basically any kind of code right and

00:05:07,630 --> 00:05:16,979
suddenly we arrive at the theorem where

00:05:12,340 --> 00:05:16,979
we are today and where I am today so

00:05:20,070 --> 00:05:24,400
today we're gonna be talking a little

00:05:22,479 --> 00:05:27,190
bit about actually no we're going to

00:05:24,400 --> 00:05:30,520
talk a lot about the client how to build

00:05:27,190 --> 00:05:34,690
sort of a or what the components really

00:05:30,520 --> 00:05:36,100
of an aetherium client are so if you

00:05:34,690 --> 00:05:39,310
want to build your own one this is like

00:05:36,100 --> 00:05:41,470
a road map for it or if you want to join

00:05:39,310 --> 00:05:47,139
us in building ours that's great as well

00:05:41,470 --> 00:05:48,340
we're open source we're on github we're

00:05:47,139 --> 00:05:53,680
going to be talking a little bit about

00:05:48,340 --> 00:05:56,919
charting which is one of the techniques

00:05:53,680 --> 00:05:59,140
that the etherium foundation is coming

00:05:56,919 --> 00:06:01,100
up with in order to deal with some of

00:05:59,140 --> 00:06:06,680
the scalability problems of

00:06:01,100 --> 00:06:08,390
if theorem we're gonna very briefly

00:06:06,680 --> 00:06:10,340
touch upon nib which is a nice little

00:06:08,390 --> 00:06:13,520
programming language very expressive

00:06:10,340 --> 00:06:17,600
very moldable and finally I'm just gonna

00:06:13,520 --> 00:06:20,270
mention status open bounty which is an

00:06:17,600 --> 00:06:23,240
approach to developing open source

00:06:20,270 --> 00:06:24,740
software where people that have a

00:06:23,240 --> 00:06:28,040
problem to solve can sort of post

00:06:24,740 --> 00:06:30,230
bounties people that want to solve these

00:06:28,040 --> 00:06:32,810
problems receive the boundaries when

00:06:30,230 --> 00:06:35,470
when they finish them and it's all done

00:06:32,810 --> 00:06:40,670
in a trust Lucinda sterilized

00:06:35,470 --> 00:06:45,410
decentralized way through crypto

00:06:40,670 --> 00:06:49,910
currencies now who might talk about this

00:06:45,410 --> 00:06:52,220
well I started just recently looking

00:06:49,910 --> 00:06:54,110
into this very problem but I have a

00:06:52,220 --> 00:06:55,630
great team of people that that there

00:06:54,110 --> 00:06:59,600
I've been looking at this and we met

00:06:55,630 --> 00:07:01,280
maybe a month ago to go over it and this

00:06:59,600 --> 00:07:04,400
was sort of the grand plan we came up

00:07:01,280 --> 00:07:08,090
with right now building in the theorem

00:07:04,400 --> 00:07:09,470
client seems like like a big problem but

00:07:08,090 --> 00:07:13,940
then you can start sort of breaking it

00:07:09,470 --> 00:07:17,650
down into little pieces and I'm gonna go

00:07:13,940 --> 00:07:19,940
over these little pieces as far as here

00:07:17,650 --> 00:07:21,410
because this is sort of what you need to

00:07:19,940 --> 00:07:22,790
do in order to build in if they're in

00:07:21,410 --> 00:07:27,680
one client that's sort of your base

00:07:22,790 --> 00:07:28,790
right the idea however for status is

00:07:27,680 --> 00:07:35,000
that we're gonna use this base to

00:07:28,790 --> 00:07:37,070
develop sharding proof of stake all

00:07:35,000 --> 00:07:40,040
kinds of other technologies that are

00:07:37,070 --> 00:07:47,330
upcoming on the etherium sort of horizon

00:07:40,040 --> 00:07:49,960
right so you start out with a set of

00:07:47,330 --> 00:07:53,890
core services like things that every

00:07:49,960 --> 00:07:57,440
really blockchain client has to cover

00:07:53,890 --> 00:08:04,870
obviously you need your cryptography in

00:07:57,440 --> 00:08:08,120
place in aetherium they use a lot of AAS

00:08:04,870 --> 00:08:09,740
elliptic curve cryptography and

00:08:08,120 --> 00:08:12,370
obviously a lot of hashes for all those

00:08:09,740 --> 00:08:12,370
Merkle trees

00:08:13,939 --> 00:08:22,650
we use a technique called bloom filters

00:08:16,729 --> 00:08:26,939
this is sort of a way to compress there

00:08:22,650 --> 00:08:30,449
and optimistically determine whether an

00:08:26,939 --> 00:08:33,409
item is present in a particular set and

00:08:30,449 --> 00:08:35,940
this is basically an optimization to

00:08:33,409 --> 00:08:38,659
allow you to tell whether you need to

00:08:35,940 --> 00:08:41,219
download something in particular you

00:08:38,659 --> 00:08:43,139
need to figure out something for storage

00:08:41,219 --> 00:08:46,889
right if you look at it's here in

00:08:43,139 --> 00:08:51,089
blockchain today I think it's about 60

00:08:46,889 --> 00:08:54,779
or 70 gigabytes of data roughly this is

00:08:51,089 --> 00:08:56,639
growing and obviously shouting is is one

00:08:54,779 --> 00:09:00,199
of the ideas that the foundation has to

00:08:56,639 --> 00:09:00,199
sort of solve this growth problem

00:09:01,250 --> 00:09:10,350
finally every client like there are

00:09:07,079 --> 00:09:12,000
currently three or four clients in in

00:09:10,350 --> 00:09:13,800
production in any theer and they have

00:09:12,000 --> 00:09:15,269
this RPC interface that you use to

00:09:13,800 --> 00:09:19,920
communicate with the outside world a

00:09:15,269 --> 00:09:26,579
little bit those are sort of core layer

00:09:19,920 --> 00:09:29,310
techniques that you need to go into once

00:09:26,579 --> 00:09:32,910
you've passed that you need to start

00:09:29,310 --> 00:09:35,250
talking to the world and funny enough

00:09:32,910 --> 00:09:37,709
this is where the distributed hash

00:09:35,250 --> 00:09:40,079
tables from from likes from my

00:09:37,709 --> 00:09:42,149
background and from the early 2000s come

00:09:40,079 --> 00:09:45,050
in because they're basically using a

00:09:42,149 --> 00:09:49,889
network called CAD amilia which is an

00:09:45,050 --> 00:09:52,649
development of cord which allows you to

00:09:49,889 --> 00:09:56,430
do no discovery so basically you connect

00:09:52,649 --> 00:09:58,800
to a single node that node tells you a

00:09:56,430 --> 00:10:01,019
little bit about what the rest of the

00:09:58,800 --> 00:10:03,079
network looks like and you can start

00:10:01,019 --> 00:10:09,800
connecting to all these other nodes and

00:10:03,079 --> 00:10:09,800
figure out where to get your data from

00:10:11,570 --> 00:10:21,590
trees or tries very fundamental data

00:10:17,150 --> 00:10:23,750
structure used in in in aetherium just

00:10:21,590 --> 00:10:27,770
just these are sort of the basic things

00:10:23,750 --> 00:10:32,960
that you need to build a fully

00:10:27,770 --> 00:10:40,160
functional client UPnP this is this

00:10:32,960 --> 00:10:41,780
technology that allows you to bypass get

00:10:40,160 --> 00:10:43,010
out on the network when you're when

00:10:41,780 --> 00:10:46,760
you're in the private network right

00:10:43,010 --> 00:10:48,770
there's a router somewhere and and if

00:10:46,760 --> 00:10:51,590
you're running on a local network you

00:10:48,770 --> 00:10:54,130
probably need a you PNP client to get

00:10:51,590 --> 00:10:56,210
out to the Internet

00:10:54,130 --> 00:11:01,400
when you've done all that right all

00:10:56,210 --> 00:11:05,050
those basic services you move on to the

00:11:01,400 --> 00:11:08,660
sort of the protocol layer of material

00:11:05,050 --> 00:11:10,190
like you've set up your cryptography

00:11:08,660 --> 00:11:11,570
you've discovered a couple of nodes now

00:11:10,190 --> 00:11:15,320
you need to start talking to them right

00:11:11,570 --> 00:11:18,050
so you so the first thing you do you

00:11:15,320 --> 00:11:23,380
need to generate keys which is a tricky

00:11:18,050 --> 00:11:23,380
problem in itself better with this one

00:11:26,180 --> 00:11:31,490
I'm fine with either is it needed is

00:11:30,510 --> 00:11:38,820
this better

00:11:31,490 --> 00:11:40,470
yeah much better okay all right so the

00:11:38,820 --> 00:11:44,040
part of the cryptography we're using

00:11:40,470 --> 00:11:45,840
right is public key cryptography so you

00:11:44,040 --> 00:11:49,710
need to generate keys you need to be

00:11:45,840 --> 00:11:53,760
able to sign messages you need to be

00:11:49,710 --> 00:11:56,370
able to generate key variants as well

00:11:53,760 --> 00:11:58,410
because you don't want to be using a

00:11:56,370 --> 00:12:00,600
single key there's a lot of these little

00:11:58,410 --> 00:12:08,070
details that that you need to dig into

00:12:00,600 --> 00:12:09,540
right handshaking you've discovered the

00:12:08,070 --> 00:12:12,630
notes through this Academy abased

00:12:09,540 --> 00:12:15,420
protocol and you initiate a handshake

00:12:12,630 --> 00:12:17,900
process which which is signed using

00:12:15,420 --> 00:12:23,430
elliptic curve cryptography

00:12:17,900 --> 00:12:27,210
easy-easy IES and you start talking to

00:12:23,430 --> 00:12:30,390
the other nodes and and and because this

00:12:27,210 --> 00:12:31,470
is a distributed service the nodes on

00:12:30,390 --> 00:12:33,030
the internet they might be running

00:12:31,470 --> 00:12:36,690
different versions of things they might

00:12:33,030 --> 00:12:38,610
be older newer there might be

00:12:36,690 --> 00:12:41,640
implemented by somebody else so there's

00:12:38,610 --> 00:12:44,430
this protocol that they use called def

00:12:41,640 --> 00:12:47,180
p2p which allows you to discover

00:12:44,430 --> 00:12:51,840
features that the other clients have

00:12:47,180 --> 00:12:53,970
okay finally there is this piece called

00:12:51,840 --> 00:12:57,630
our LP / cursive length prefix which is

00:12:53,970 --> 00:13:01,740
an encoding it's basically this kind of

00:12:57,630 --> 00:13:04,410
length prefix data structure that you

00:13:01,740 --> 00:13:06,360
can send to the other client and it's

00:13:04,410 --> 00:13:08,420
recursive because what we will be

00:13:06,360 --> 00:13:10,890
building with this our LP structure is

00:13:08,420 --> 00:13:12,000
trees of various forms right they're

00:13:10,890 --> 00:13:14,820
going to be Merkle trees but they're

00:13:12,000 --> 00:13:17,900
also going to be structures that are

00:13:14,820 --> 00:13:17,900
recursive in nature

00:13:18,050 --> 00:13:25,620
all right you've connected to the

00:13:21,870 --> 00:13:27,720
clients you've established what protocol

00:13:25,620 --> 00:13:29,910
exactly you're going to be talking which

00:13:27,720 --> 00:13:32,280
version it is whether it's an old client

00:13:29,910 --> 00:13:36,380
a new client and now finally can start

00:13:32,280 --> 00:13:38,520
developing the blockchain and again

00:13:36,380 --> 00:13:41,640
blockchain comes back to these earlier

00:13:38,520 --> 00:13:46,490
techniques that we mentioned before that

00:13:41,640 --> 00:13:49,710
were developed long long ago it's

00:13:46,490 --> 00:13:54,030
basically a merc a huge Merkel tree that

00:13:49,710 --> 00:13:56,580
keeps getting added on to so when you

00:13:54,030 --> 00:14:00,090
take some pieces of data the

00:13:56,580 --> 00:14:02,670
transactions that that form blocks kind

00:14:00,090 --> 00:14:04,230
of like a file right and you create a

00:14:02,670 --> 00:14:07,530
new file which is a new set of blocks

00:14:04,230 --> 00:14:10,290
you can join these two together using

00:14:07,530 --> 00:14:14,100
Merkel trees and form a chain that goes

00:14:10,290 --> 00:14:20,100
back all the way to the first node in

00:14:14,100 --> 00:14:22,170
that tree this is a cute chain I

00:14:20,100 --> 00:14:26,490
mentioned it was about a hundred gig

00:14:22,170 --> 00:14:28,710
right and the next thing you'll be up

00:14:26,490 --> 00:14:31,200
against is a synchronization mechanism

00:14:28,710 --> 00:14:33,390
to sort of download these 100 gigabytes

00:14:31,200 --> 00:14:35,400
of data that you need in order to follow

00:14:33,390 --> 00:14:41,040
the chain all the way to the beginning

00:14:35,400 --> 00:14:42,990
in what 2014/15 I think right so sync

00:14:41,040 --> 00:14:47,310
mechanisms there are a couple of out

00:14:42,990 --> 00:14:48,870
there they get optimized over time

00:14:47,310 --> 00:14:52,140
there's something called light sing

00:14:48,870 --> 00:14:54,060
there's something called full sync

00:14:52,140 --> 00:14:55,740
there's something called warp sing every

00:14:54,060 --> 00:14:59,910
client has a little bit of their own way

00:14:55,740 --> 00:15:04,410
of doing this and you need to be aware

00:14:59,910 --> 00:15:06,690
that you're going to be downloading a

00:15:04,410 --> 00:15:12,600
lot of data which obviously for a mobile

00:15:06,690 --> 00:15:14,060
client is tricky the last piece in the

00:15:12,600 --> 00:15:17,070
feature

00:15:14,060 --> 00:15:20,790
sort of area of things is is something

00:15:17,070 --> 00:15:22,950
called web tree usually as it turns out

00:15:20,790 --> 00:15:24,540
I mentioned that aetherium is made up of

00:15:22,950 --> 00:15:26,400
the blockchain like the economy part of

00:15:24,540 --> 00:15:27,880
it but there's also code running there

00:15:26,400 --> 00:15:30,700
and

00:15:27,880 --> 00:15:35,920
as soon as you have code you end up with

00:15:30,700 --> 00:15:41,080
functions these functions can be reused

00:15:35,920 --> 00:15:44,160
by other people and web 3 is basically a

00:15:41,080 --> 00:15:46,810
layer that allows easy access to

00:15:44,160 --> 00:15:50,040
well-known features that are already

00:15:46,810 --> 00:15:50,040
deployed on the blockchain

00:15:50,880 --> 00:15:57,820
alright so far so good I'm going pretty

00:15:54,550 --> 00:15:59,500
fast here right this this is a 20 minute

00:15:57,820 --> 00:16:01,300
presentation so I'll be happy to talk to

00:15:59,500 --> 00:16:05,500
you about all of this later right

00:16:01,300 --> 00:16:11,280
any questions so far cool

00:16:05,500 --> 00:16:13,450
keep going yeah all right shouting

00:16:11,280 --> 00:16:16,000
shouting and here I can actually cheat a

00:16:13,450 --> 00:16:19,630
little bit but about that in a minute

00:16:16,000 --> 00:16:21,040
so shouting what's shouting well we

00:16:19,630 --> 00:16:23,920
mentioned that we have a hundred

00:16:21,040 --> 00:16:28,480
gigabytes of data right and that's a lot

00:16:23,920 --> 00:16:30,250
of things to process especially if you

00:16:28,480 --> 00:16:32,410
want to put a theorem on a mobile device

00:16:30,250 --> 00:16:35,790
which were we're 100 gigs all right mine

00:16:32,410 --> 00:16:38,050
has 128 which is pretty cool right but

00:16:35,790 --> 00:16:43,240
not all devices have that kind of

00:16:38,050 --> 00:16:45,730
storage and this is after four years of

00:16:43,240 --> 00:16:47,800
material imagine what it's going to look

00:16:45,730 --> 00:16:49,960
like in one year five years ten years

00:16:47,800 --> 00:16:53,860
twenty years right all that data it

00:16:49,960 --> 00:16:55,270
stays there forever so one of the like

00:16:53,860 --> 00:17:00,640
there are many approaches to solve this

00:16:55,270 --> 00:17:02,260
because there are obviously many ideas

00:17:00,640 --> 00:17:04,860
out to write the current one for

00:17:02,260 --> 00:17:06,760
aetherium it's called the layer one

00:17:04,860 --> 00:17:09,459
solution which means that we're going to

00:17:06,760 --> 00:17:12,160
modify the protocol itself a little bit

00:17:09,459 --> 00:17:16,060
and we're going to create something

00:17:12,160 --> 00:17:19,660
called sub chains which which are kind

00:17:16,060 --> 00:17:23,620
of like new it's Arian block chains

00:17:19,660 --> 00:17:25,839
starting over except that they're tied

00:17:23,620 --> 00:17:30,220
to the main chain in a particular way

00:17:25,839 --> 00:17:32,890
right so imagine like if you look at the

00:17:30,220 --> 00:17:35,080
security of a blockchain it depends on

00:17:32,890 --> 00:17:37,660
miners and and and there being lots of

00:17:35,080 --> 00:17:39,730
miners verifying that the blockchain is

00:17:37,660 --> 00:17:41,919
formed in a particular way and that

00:17:39,730 --> 00:17:43,360
the transactions are signed and that

00:17:41,919 --> 00:17:46,149
there is no double spending on this

00:17:43,360 --> 00:17:49,750
thing and the more miners there are the

00:17:46,149 --> 00:17:51,820
more secure it becomes if you were to

00:17:49,750 --> 00:17:54,059
take a theorem as it is today and simply

00:17:51,820 --> 00:17:56,980
split it up into a hundred pieces say

00:17:54,059 --> 00:17:58,419
you would also split up the security of

00:17:56,980 --> 00:18:03,429
it into a hundred pieces right you would

00:17:58,419 --> 00:18:06,639
have to put all that mining power into

00:18:03,429 --> 00:18:11,080
many small chains and and each of these

00:18:06,639 --> 00:18:13,200
would be much less secure this is kind

00:18:11,080 --> 00:18:17,769
of like a fundamental principle because

00:18:13,200 --> 00:18:20,710
this is where like the idea of using

00:18:17,769 --> 00:18:22,299
many different coins to provide security

00:18:20,710 --> 00:18:24,789
in a system like this breaks down

00:18:22,299 --> 00:18:26,169
because there's only so many miners out

00:18:24,789 --> 00:18:28,840
there that are willing to do all this

00:18:26,169 --> 00:18:31,299
work so what charting does is that it

00:18:28,840 --> 00:18:34,210
does create like sub chains which are

00:18:31,299 --> 00:18:40,769
separate chains that run practically

00:18:34,210 --> 00:18:43,960
like in a separate address space but

00:18:40,769 --> 00:18:47,019
periodically they also report their

00:18:43,960 --> 00:18:51,250
state back to the main chain and it's

00:18:47,019 --> 00:18:53,940
the main chain via proof of stake that

00:18:51,250 --> 00:18:58,510
provides security for these sub chains

00:18:53,940 --> 00:19:05,860
so the way it works in in at large is

00:18:58,510 --> 00:19:09,789
that you post a bond to the main chain

00:19:05,860 --> 00:19:12,639
if you want to create blocks on one of

00:19:09,789 --> 00:19:15,909
the sub chains and then you work the

00:19:12,639 --> 00:19:17,620
SubGenius just as if as if they were

00:19:15,909 --> 00:19:24,970
separate chains right and this bond can

00:19:17,620 --> 00:19:27,820
later be used by others to detect any

00:19:24,970 --> 00:19:33,100
fraudulent behavior and the idea is here

00:19:27,820 --> 00:19:36,789
that you have a set of set of collectors

00:19:33,100 --> 00:19:39,250
that all together provide security for

00:19:36,789 --> 00:19:41,320
these sub chains and anybody can detect

00:19:39,250 --> 00:19:43,870
that some of them have been fraudulent

00:19:41,320 --> 00:19:46,170
and use that bond to sort of motivate

00:19:43,870 --> 00:19:52,410
them to do the right thing

00:19:46,170 --> 00:19:58,020
okay good for me is that there's a whole

00:19:52,410 --> 00:20:01,410
talk on this subject by my son Kevin

00:19:58,020 --> 00:20:02,820
also I met him a few days ago I really

00:20:01,410 --> 00:20:04,950
encourage you to go there if you want to

00:20:02,820 --> 00:20:07,140
find out more about shouting he's one of

00:20:04,950 --> 00:20:10,890
the researchers developing this solution

00:20:07,140 --> 00:20:18,180
for the etherium foundation so I'm not

00:20:10,890 --> 00:20:22,190
really gonna go any more into that you

00:20:18,180 --> 00:20:22,190
still with me all right

00:20:22,880 --> 00:20:28,200
NIM now the project is called Nimbus and

00:20:26,460 --> 00:20:30,420
and part of that it comes from their

00:20:28,200 --> 00:20:32,520
writings not only is Nimbus a type of

00:20:30,420 --> 00:20:35,600
flood but it's also a programming

00:20:32,520 --> 00:20:38,250
language and we picked this little nice

00:20:35,600 --> 00:20:41,970
programming language because we like it

00:20:38,250 --> 00:20:43,680
they're like no like at the end of the

00:20:41,970 --> 00:20:46,620
day there are so many good programming

00:20:43,680 --> 00:20:48,060
languages out there but this one is

00:20:46,620 --> 00:20:49,830
really nice for researching things

00:20:48,060 --> 00:20:52,200
because it's very pythonic but at the

00:20:49,830 --> 00:20:55,050
same time it compiles down to machine

00:20:52,200 --> 00:20:58,050
code it's very fast to write code but

00:20:55,050 --> 00:21:01,590
but it it also has very good performance

00:20:58,050 --> 00:21:03,270
at the same time and again short

00:21:01,590 --> 00:21:06,120
presentation I'm not going to go too

00:21:03,270 --> 00:21:10,340
deeply into this but other features that

00:21:06,120 --> 00:21:12,420
interest us might be that that the

00:21:10,340 --> 00:21:15,800
language has very strong meta

00:21:12,420 --> 00:21:18,900
programming capabilities capabilities

00:21:15,800 --> 00:21:22,440
it's very easy to create little DSL

00:21:18,900 --> 00:21:25,950
scenes inside it so our hope is that we

00:21:22,440 --> 00:21:29,760
can sort of leverage on that to create

00:21:25,950 --> 00:21:31,590
nice descriptive implementations of

00:21:29,760 --> 00:21:34,350
various things that we want to research

00:21:31,590 --> 00:21:39,860
in the future which will hopefully be as

00:21:34,350 --> 00:21:39,860
legible as as this little snippet here

00:21:40,130 --> 00:21:54,900
last topic open bounty yeah so there's a

00:21:53,280 --> 00:21:59,910
big world of developers out there and a

00:21:54,900 --> 00:22:03,000
big world of companies or people wanting

00:21:59,910 --> 00:22:04,200
to get stuff done and and and they don't

00:22:03,000 --> 00:22:09,090
always know each other and trust each

00:22:04,200 --> 00:22:12,710
other so the blockchain is like this

00:22:09,090 --> 00:22:15,390
perfect fit for this if you can somehow

00:22:12,710 --> 00:22:18,360
post your project online and when it's

00:22:15,390 --> 00:22:21,570
done you sort of get rewarded in in

00:22:18,360 --> 00:22:23,370
crypto currency that's great so one of

00:22:21,570 --> 00:22:28,650
the things that status is doing is sort

00:22:23,370 --> 00:22:31,710
of using open bounty as a process to get

00:22:28,650 --> 00:22:33,900
stuff done more quickly right and and

00:22:31,710 --> 00:22:35,340
and in the development of nimbus this is

00:22:33,900 --> 00:22:39,570
one of the things that we're going to be

00:22:35,340 --> 00:22:43,170
using right so as parting words for

00:22:39,570 --> 00:22:45,900
today I'm gonna invite you to come to us

00:22:43,170 --> 00:22:48,180
and look at the different things that

00:22:45,900 --> 00:22:52,170
we're developing it's not only Nimbus

00:22:48,180 --> 00:22:55,470
itself we're also developing a iOS and

00:22:52,170 --> 00:22:57,450
Android client for it Syria and and this

00:22:55,470 --> 00:22:59,370
is sort of a great way to join the

00:22:57,450 --> 00:23:03,720
organization and at the same time get

00:22:59,370 --> 00:23:06,120
rewarded for it we have a booth out

00:23:03,720 --> 00:23:08,610
there if you want to find out more about

00:23:06,120 --> 00:23:10,920
the project there's an URL up there I'll

00:23:08,610 --> 00:23:13,500
be happy to write it down for you after

00:23:10,920 --> 00:23:16,070
this presentation and that'll be all for

00:23:13,500 --> 00:23:16,070
me for today

00:23:16,850 --> 00:23:24,350
[Applause]

00:23:22,180 --> 00:23:39,140
I'm also gonna stick around for a while

00:23:24,350 --> 00:23:40,790
for questions come on sorry yeah we

00:23:39,140 --> 00:23:42,830
started development about two months ago

00:23:40,790 --> 00:23:46,400
which means that we made that road map

00:23:42,830 --> 00:23:48,710
we got some of the cryptography done who

00:23:46,400 --> 00:23:54,230
worked a little bit on the VM but other

00:23:48,710 --> 00:23:58,220
than that it's like an open field the

00:23:54,230 --> 00:23:58,670
demonstration no it's not working it not

00:23:58,220 --> 00:24:03,260
at all

00:23:58,670 --> 00:24:06,920
like our plan is to get a sort of an a

00:24:03,260 --> 00:24:10,850
theorem one working client done by the

00:24:06,920 --> 00:24:12,080
end of q2 roughly that might you know

00:24:10,850 --> 00:24:14,930
take a little bit longer a little bit

00:24:12,080 --> 00:24:17,330
shorter give or take there's an

00:24:14,930 --> 00:24:21,230
excellent team of five people working on

00:24:17,330 --> 00:24:24,140
it already and as I mentioned before

00:24:21,230 --> 00:24:28,250
like everybody's welcome to join the

00:24:24,140 --> 00:24:32,420
project as well it's all on github it's

00:24:28,250 --> 00:24:36,080
all under a permissive license Apache

00:24:32,420 --> 00:24:37,790
and the idea with Nimbus as well is to

00:24:36,080 --> 00:24:40,070
build it in a very modular fashion so

00:24:37,790 --> 00:24:43,220
that we can pick pieces out of it and

00:24:40,070 --> 00:24:45,590
maybe bring it to even more resource

00:24:43,220 --> 00:24:47,840
restricted devices such as I don't know

00:24:45,590 --> 00:24:53,960
IO T's and you know imagine a turnstile

00:24:47,840 --> 00:24:55,250
and the MRT right and shouting and a

00:24:53,960 --> 00:24:56,720
couple of other technologies that the

00:24:55,250 --> 00:25:00,070
etherion foundation is developing is

00:24:56,720 --> 00:25:04,520
going to be very helpful in that because

00:25:00,070 --> 00:25:06,950
part of that solution is bringing in a

00:25:04,520 --> 00:25:08,720
way to avoid downloading that whole

00:25:06,950 --> 00:25:11,410
state and doing everything a little bit

00:25:08,720 --> 00:25:11,410
more on the fly

00:25:13,690 --> 00:25:25,809
other questions yeah how does your your

00:25:19,580 --> 00:25:25,809
identic project video is which one sorry

00:25:26,920 --> 00:25:34,970
I'll think that there is a project for

00:25:30,050 --> 00:25:38,440
developing identities on the etherium in

00:25:34,970 --> 00:25:41,150
the theorem world that's more like a dap

00:25:38,440 --> 00:25:44,390
which is a distributed application right

00:25:41,150 --> 00:25:46,730
and it's a specification and it's

00:25:44,390 --> 00:25:49,040
completely separate from all this right

00:25:46,730 --> 00:25:53,900
this is this is infrastructure for

00:25:49,040 --> 00:25:56,390
running the network identica is like an

00:25:53,900 --> 00:25:59,660
application right so so so might come

00:25:56,390 --> 00:26:03,290
there is imagine a RC 20 right that's

00:25:59,660 --> 00:26:04,940
like a standard for building tokens but

00:26:03,290 --> 00:26:07,750
the etherion foundation has essentially

00:26:04,940 --> 00:26:07,750
nothing to do with that

00:26:16,520 --> 00:26:26,280
anything else how much money you guys

00:26:20,130 --> 00:26:29,340
raise your idea I wouldn't know I guess

00:26:26,280 --> 00:26:31,790
you can make I think it's in the bounty

00:26:29,340 --> 00:26:34,140
document whatever now the in the in

00:26:31,790 --> 00:26:49,290
fundraising document how many they

00:26:34,140 --> 00:26:51,120
finally gathered you can do the math so

00:26:49,290 --> 00:26:53,660
right now the status I'm client is using

00:26:51,120 --> 00:26:56,130
guess which is the NGO implementation

00:26:53,660 --> 00:27:01,110
the long-term plan is for Nimbus to

00:26:56,130 --> 00:27:04,350
replace that so so NIM so so status I am

00:27:01,110 --> 00:27:07,500
is sort of the UI the wallet all that

00:27:04,350 --> 00:27:11,540
stuff but underneath it's running all on

00:27:07,500 --> 00:27:14,570
these decentralized technologies using

00:27:11,540 --> 00:27:17,040
the protocols that make up this

00:27:14,570 --> 00:27:18,150
decentralized web web 3 if you want to

00:27:17,040 --> 00:27:20,340
call it that way right so there's

00:27:18,150 --> 00:27:21,870
there's the blockchain right now we're

00:27:20,340 --> 00:27:25,860
using a protocol called whisper for

00:27:21,870 --> 00:27:27,480
communication the final piece in that

00:27:25,860 --> 00:27:29,760
puzzle is swarm which is kind of like a

00:27:27,480 --> 00:27:32,040
storage layer so you sort of get

00:27:29,760 --> 00:27:36,750
decentralized execution decentralized

00:27:32,040 --> 00:27:39,600
storage and and messaging right so these

00:27:36,750 --> 00:27:43,220
are the this is the under the the stuff

00:27:39,600 --> 00:27:43,220
underneath Nimbus itself

00:27:52,160 --> 00:27:58,920
alright so I'm gonna finish there you're

00:27:56,340 --> 00:28:01,260
very welcome to apply the status open

00:27:58,920 --> 00:28:04,580
bounty booth it's somewhere down there I

00:28:01,260 --> 00:28:06,570
have haven't had time to look at it yet

00:28:04,580 --> 00:28:08,130
I'm gonna hang around there for a while

00:28:06,570 --> 00:28:09,360
I'm gonna know I you're gonna hang

00:28:08,130 --> 00:28:12,870
around here for a while if you just want

00:28:09,360 --> 00:28:14,350
to chat about anything otherwise thanks

00:28:12,870 --> 00:28:20,790
for coming

00:28:14,350 --> 00:28:20,790

YouTube URL: https://www.youtube.com/watch?v=7LwA21-UQWs


