Title: Vishesh Handa - File Search Across the Board - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	All modern desktop environments offer file searching, and often key workflows revolve around it. This talk takes a look at how all major platforms tackle this problem; their technical implementations, architecture, and deployment.

Speaker: Vishesh Handa
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:08,610 --> 00:00:18,200
vicious has been amazing work of turning

00:00:12,809 --> 00:00:25,079
the university my little walk into a

00:00:18,200 --> 00:00:27,270
very practical part but so I choose to

00:00:25,079 --> 00:00:42,090
see what we get to learn about them

00:00:27,270 --> 00:00:44,160
today thank you ya dingus works alright

00:00:42,090 --> 00:00:47,700
so I'm not actually going to be talking

00:00:44,160 --> 00:00:49,590
that much about Balu but what about file

00:00:47,700 --> 00:00:51,960
search in general and how different we

00:00:49,590 --> 00:00:53,700
could approach it previously during the

00:00:51,960 --> 00:00:56,160
Kitty and I we had an epilogue which was

00:00:53,700 --> 00:00:58,140
kind of like a unique snowflake so it

00:00:56,160 --> 00:00:59,970
did all these different things so you

00:00:58,140 --> 00:01:03,570
couldn't exactly compare it with other

00:00:59,970 --> 00:01:06,630
systems because it was unique but

00:01:03,570 --> 00:01:08,520
nowadays we're basically trying to do

00:01:06,630 --> 00:01:11,759
file search there's no more RDF there's

00:01:08,520 --> 00:01:14,010
no more fancy stuff it's just trying to

00:01:11,759 --> 00:01:16,140
get the basics done and how to plasma

00:01:14,010 --> 00:01:18,780
where it is also going shed get

00:01:16,140 --> 00:01:21,180
done so we I'm mostly going to be

00:01:18,780 --> 00:01:23,190
looking at how Microsoft and OS X and

00:01:21,180 --> 00:01:25,860
maybe even some other applications in

00:01:23,190 --> 00:01:27,930
limbs to it and how we compare and what

00:01:25,860 --> 00:01:30,960
we can learn from them while designing

00:01:27,930 --> 00:01:34,760
Ballou and I've been researching quite a

00:01:30,960 --> 00:01:39,390
bit on all these other options so yeah

00:01:34,760 --> 00:01:40,890
okay so basics of searching just to get

00:01:39,390 --> 00:01:42,780
you started in case of any of you don't

00:01:40,890 --> 00:01:45,000
know you have a file it has some words

00:01:42,780 --> 00:01:47,970
David runs funny he jumps funny he also

00:01:45,000 --> 00:01:50,970
tries to be funny as a URL simple enough

00:01:47,970 --> 00:01:52,710
you take the words you remove all the

00:01:50,970 --> 00:01:55,770
duplicates and you remove the small

00:01:52,710 --> 00:01:57,000
punctuation marks and whatnot actually

00:01:55,770 --> 00:01:59,400
you do a lot more stuff but I'm

00:01:57,000 --> 00:02:02,850
simplifying it and then you put it into

00:01:59,400 --> 00:02:04,350
a kind of a hashmap and be funny jumps

00:02:02,850 --> 00:02:06,090
you have all the words each of the files

00:02:04,350 --> 00:02:08,429
pushed were you were so when you need to

00:02:06,090 --> 00:02:11,730
look up any word funny go check it up

00:02:08,429 --> 00:02:13,980
gives you the URL the first problem we

00:02:11,730 --> 00:02:16,260
come across is URLs are long and they

00:02:13,980 --> 00:02:16,720
change and you don't really want to

00:02:16,260 --> 00:02:20,410
store

00:02:16,720 --> 00:02:23,950
URLs so problem number one you need a

00:02:20,410 --> 00:02:25,930
unique way to identify a file which kind

00:02:23,950 --> 00:02:28,060
of can be stored efficiently instead of

00:02:25,930 --> 00:02:31,510
a really really long string and it's

00:02:28,060 --> 00:02:33,940
resilient to changes and that is kind of

00:02:31,510 --> 00:02:36,070
a hard problem it's a problem which we

00:02:33,940 --> 00:02:37,870
aren't the only want to face because

00:02:36,070 --> 00:02:40,510
this isn't unique to the file indexing

00:02:37,870 --> 00:02:42,160
word it's also there whenever you write

00:02:40,510 --> 00:02:44,260
any application which has a database

00:02:42,160 --> 00:02:47,530
which is accessing files Key activities

00:02:44,260 --> 00:02:49,360
has this problem any kind of music

00:02:47,530 --> 00:02:53,230
application has this problem they need

00:02:49,360 --> 00:02:56,709
to rescan regularly oh yeah that's a

00:02:53,230 --> 00:03:00,970
book so the way it's typically done in

00:02:56,709 --> 00:03:03,340
Windows is ntfs windows only supports

00:03:00,970 --> 00:03:05,380
more or less one file format or this is

00:03:03,340 --> 00:03:08,380
the de facto standard every five has a

00:03:05,380 --> 00:03:10,900
unique identifier they use that it's a

00:03:08,380 --> 00:03:13,330
12 it's a one-way mapping so you have

00:03:10,900 --> 00:03:15,970
the URL you can get the identifier the

00:03:13,330 --> 00:03:18,040
other way around also exists for Windows

00:03:15,970 --> 00:03:20,410
but it slightly complex and is only used

00:03:18,040 --> 00:03:22,450
internally so applications don't get to

00:03:20,410 --> 00:03:25,330
use it which I don't understand why they

00:03:22,450 --> 00:03:26,980
won't expose it but that's them but

00:03:25,330 --> 00:03:29,590
they're such thing does use it in a way

00:03:26,980 --> 00:03:31,870
but it's quite efficient OSX has

00:03:29,590 --> 00:03:34,090
something similar and earlier on the you

00:03:31,870 --> 00:03:35,920
did expose it but now they don't and

00:03:34,090 --> 00:03:38,080
they use a combination of actually only

00:03:35,920 --> 00:03:40,239
one way mapping and having a really

00:03:38,080 --> 00:03:42,340
kick-ass file system monitor which

00:03:40,239 --> 00:03:44,320
regularly informs and so that they can

00:03:42,340 --> 00:03:47,230
keep the two-way map inconsistent the

00:03:44,320 --> 00:03:50,200
two-way mapping is only in spotlight but

00:03:47,230 --> 00:03:55,510
it works out for them and then we have

00:03:50,200 --> 00:03:57,519
Linux it's complicated what we used to

00:03:55,510 --> 00:03:59,590
do during the netbook word is used to

00:03:57,519 --> 00:04:01,480
use unique identifiers this was a really

00:03:59,590 --> 00:04:03,519
really long randomly generated string

00:04:01,480 --> 00:04:06,730
which you use to identify every single

00:04:03,519 --> 00:04:09,010
file this wasn't great because we had

00:04:06,730 --> 00:04:10,989
use two-way mapping Zi to have one map

00:04:09,010 --> 00:04:14,409
of all the unique identifiers and the

00:04:10,989 --> 00:04:16,090
other side is 5 euros and you need to do

00:04:14,409 --> 00:04:18,639
the mapping both ways always so you need

00:04:16,090 --> 00:04:20,229
two big tables and those tables need to

00:04:18,639 --> 00:04:23,250
be kept up to date which means

00:04:20,229 --> 00:04:25,600
monitoring the entire file system and

00:04:23,250 --> 00:04:28,150
when you rename a folder you need to

00:04:25,600 --> 00:04:30,370
rename all of its children and if you

00:04:28,150 --> 00:04:34,570
implement the table in a slightly naive

00:04:30,370 --> 00:04:36,490
male you get a lots and lots of CP

00:04:34,570 --> 00:04:39,010
operations when you're doing a move so

00:04:36,490 --> 00:04:40,690
it's slightly problematic during the

00:04:39,010 --> 00:04:42,699
balut time when I was just starting out

00:04:40,690 --> 00:04:46,660
we use integers which is basically the

00:04:42,699 --> 00:04:48,820
same thing but now what we're doing is

00:04:46,660 --> 00:04:50,710
using the file system and we're

00:04:48,820 --> 00:04:53,080
basically using the inode number and the

00:04:50,710 --> 00:04:55,750
device number and that gives us a more

00:04:53,080 --> 00:04:58,449
or less unique enough identifier for

00:04:55,750 --> 00:05:00,340
every single file and we only have to

00:04:58,449 --> 00:05:02,139
store a one-way mapping because we take

00:05:00,340 --> 00:05:05,229
the files file system to actually

00:05:02,139 --> 00:05:07,240
resolve the URL give us the inode and it

00:05:05,229 --> 00:05:10,360
kind of works out well it doesn't work

00:05:07,240 --> 00:05:12,039
out work across multiple / double block

00:05:10,360 --> 00:05:14,650
devices because then the device number

00:05:12,039 --> 00:05:17,139
is different and then you have to do a

00:05:14,650 --> 00:05:18,729
lot of work but more or less for the

00:05:17,139 --> 00:05:21,310
most common use case it works out really

00:05:18,729 --> 00:05:23,380
well and the end result is you can kind

00:05:21,310 --> 00:05:24,520
of use balloon as a find replacement

00:05:23,380 --> 00:05:26,349
when you're searching for a file and

00:05:24,520 --> 00:05:28,289
based on the inode number because we

00:05:26,349 --> 00:05:31,690
actually have it and it works out well

00:05:28,289 --> 00:05:33,490
but yeah more or less works out we're

00:05:31,690 --> 00:05:36,039
not quite there in the windows world but

00:05:33,490 --> 00:05:38,470
given our limitations we're doing a

00:05:36,039 --> 00:05:40,270
decent job and nowadays in blue we don't

00:05:38,470 --> 00:05:42,520
really store a full table we store a

00:05:40,270 --> 00:05:44,830
full file system tree kind of a

00:05:42,520 --> 00:05:46,930
structure so doing updates is really

00:05:44,830 --> 00:05:49,000
really fast and it's typically an atomic

00:05:46,930 --> 00:05:52,599
operation because only that one folder

00:05:49,000 --> 00:05:54,970
needs to be changed all right second

00:05:52,599 --> 00:05:56,530
problem initial indexing you need to go

00:05:54,970 --> 00:05:59,800
through all your files and it makes them

00:05:56,530 --> 00:06:01,690
this sucks can't be avoided everyone

00:05:59,800 --> 00:06:03,639
 about it doesn't matter which

00:06:01,690 --> 00:06:06,669
system you are on you can do a search

00:06:03,639 --> 00:06:10,930
for windows searching taking up all your

00:06:06,669 --> 00:06:14,020
CPU OSX tracker we call below epilogue

00:06:10,930 --> 00:06:16,150
it's there can't help it you have to go

00:06:14,020 --> 00:06:17,040
through this different systems mitigate

00:06:16,150 --> 00:06:19,410
this in a better way

00:06:17,040 --> 00:06:21,420
windows actually has a lot of research

00:06:19,410 --> 00:06:23,460
into trying to analyze what processes

00:06:21,420 --> 00:06:25,050
are running how much CPUs the you so

00:06:23,460 --> 00:06:27,420
much hard disk is being used and then

00:06:25,050 --> 00:06:29,040
accordingly throttling it and they

00:06:27,420 --> 00:06:30,900
actually have create talking mechanisms

00:06:29,040 --> 00:06:34,170
so they actually to decrease the CPU

00:06:30,900 --> 00:06:37,550
given to that process and whatnot we

00:06:34,170 --> 00:06:42,450
don't have any of those things yet but

00:06:37,550 --> 00:06:43,770
we do okay the second problem once

00:06:42,450 --> 00:06:46,170
you've actually done the whole initial

00:06:43,770 --> 00:06:48,300
indexing when you start up again you

00:06:46,170 --> 00:06:50,670
don't know if I have changed you kind of

00:06:48,300 --> 00:06:52,920
need to do a scan again except doing a

00:06:50,670 --> 00:06:54,510
full file system scan is slow and will

00:06:52,920 --> 00:06:56,940
invalidate your entire I not cash

00:06:54,510 --> 00:07:01,670
because the entire file system is doing

00:06:56,940 --> 00:07:04,740
scan this gets hard for people to do

00:07:01,670 --> 00:07:06,180
ntfs you don't use it but it's actually

00:07:04,740 --> 00:07:08,010
a kind of an awesome file system

00:07:06,180 --> 00:07:09,990
specifically for Windows the way they've

00:07:08,010 --> 00:07:12,000
designed it it has something called a

00:07:09,990 --> 00:07:14,370
u.s. in journal which is a higher level

00:07:12,000 --> 00:07:16,860
journal of every single file operation

00:07:14,370 --> 00:07:19,950
that is there for metadata so any

00:07:16,860 --> 00:07:23,370
application can just record which is the

00:07:19,950 --> 00:07:25,290
last place I was in the journal how far

00:07:23,370 --> 00:07:26,820
I've gone and when it starts up it can

00:07:25,290 --> 00:07:29,430
just say hey give me all the records

00:07:26,820 --> 00:07:31,200
since this point and it will get all the

00:07:29,430 --> 00:07:33,210
records of which files and where which

00:07:31,200 --> 00:07:35,220
file has been renamed and this is

00:07:33,210 --> 00:07:36,750
essentially what applications use and

00:07:35,220 --> 00:07:38,640
this is essentially what any backup

00:07:36,750 --> 00:07:41,010
application uses to track what's

00:07:38,640 --> 00:07:43,350
happened since the last backup and this

00:07:41,010 --> 00:07:45,780
is what their windows search system uses

00:07:43,350 --> 00:07:49,860
to get updates since last one and it

00:07:45,780 --> 00:07:52,440
works out really well for them in Linux

00:07:49,860 --> 00:07:54,100
we have finally a slightly more than

00:07:52,440 --> 00:07:57,130
well quite modern files

00:07:54,100 --> 00:08:02,470
but Rufus so I try to emulate doing this

00:07:57,130 --> 00:08:04,330
with but Rufus it's complicated but

00:08:02,470 --> 00:08:06,010
Rufus has snapshots so you can

00:08:04,330 --> 00:08:07,540
technically take a snapshot and then

00:08:06,010 --> 00:08:09,040
later on when you want to know the

00:08:07,540 --> 00:08:12,100
difference you can take another snapshot

00:08:09,040 --> 00:08:13,720
and do a diff but you get the

00:08:12,100 --> 00:08:16,030
combination of both the data and the

00:08:13,720 --> 00:08:19,330
metadata which is not something you want

00:08:16,030 --> 00:08:21,250
but people have been in talks with the

00:08:19,330 --> 00:08:23,410
button Rufus developers to kind of only

00:08:21,250 --> 00:08:26,890
give the metadata so maybe we'll see

00:08:23,410 --> 00:08:28,360
this in the future but it still seems

00:08:26,890 --> 00:08:30,160
like abusing the system instead of

00:08:28,360 --> 00:08:34,570
really integrating with it to get the

00:08:30,160 --> 00:08:39,700
default things we require it is what it

00:08:34,570 --> 00:08:42,760
is indexing plugins this is the simple

00:08:39,700 --> 00:08:44,620
part everyone seems to be nude stuff

00:08:42,760 --> 00:08:48,250
really similar both OS X and Windows

00:08:44,620 --> 00:08:50,080
have a single plug in 45 so do you have

00:08:48,250 --> 00:08:51,700
what you have a list of mime types or

00:08:50,080 --> 00:08:53,910
some unique way of identifying a file

00:08:51,700 --> 00:08:56,850
type and you have one plug-in for that

00:08:53,910 --> 00:08:59,860
we have multiple plugins for file type

00:08:56,850 --> 00:09:01,690
maybe this was a bad decision maybe it

00:08:59,860 --> 00:09:03,040
was good we won't know until maybe a

00:09:01,690 --> 00:09:05,380
couple of years down the line when I

00:09:03,040 --> 00:09:09,850
start regretting it but it works out

00:09:05,380 --> 00:09:11,290
well it's fairly simple you get the you

00:09:09,850 --> 00:09:13,120
open the file you have a specialized

00:09:11,290 --> 00:09:16,270
reader for it and you get the metadata

00:09:13,120 --> 00:09:19,120
out and it gets saved windows does this

00:09:16,270 --> 00:09:21,040
really well Windows has two separate

00:09:19,120 --> 00:09:23,380
indexing forms it has something called

00:09:21,040 --> 00:09:25,150
protocol handlers which is which are

00:09:23,380 --> 00:09:28,090
responsible for getting the text out of

00:09:25,150 --> 00:09:29,590
the file only the text and they have a

00:09:28,090 --> 00:09:30,940
separate property handler system

00:09:29,590 --> 00:09:33,880
altogether which is for writing the

00:09:30,940 --> 00:09:35,710
artist of a file or whatnot but they're

00:09:33,880 --> 00:09:37,480
completely independent and the property

00:09:35,710 --> 00:09:40,390
address actually go both ways so

00:09:37,480 --> 00:09:42,430
therefore reading and writing so they

00:09:40,390 --> 00:09:45,580
can actually you can just right click on

00:09:42,430 --> 00:09:50,080
a file theoretically and modify the pdfs

00:09:45,580 --> 00:09:51,370
titled the image tags whatnot and it's

00:09:50,080 --> 00:09:52,810
kind of really well done and you can

00:09:51,370 --> 00:09:56,980
expose this one application

00:09:52,810 --> 00:09:58,900
view except that they don't so they have

00:09:56,980 --> 00:10:01,720
awesome technology but something went

00:09:58,900 --> 00:10:03,670
from in latter part but it works out

00:10:01,720 --> 00:10:05,110
really well and they actually run every

00:10:03,670 --> 00:10:06,730
single extractor in a completely

00:10:05,110 --> 00:10:08,260
isolated environment where the only

00:10:06,730 --> 00:10:11,860
access is given is to the file

00:10:08,260 --> 00:10:17,290
information so there's a whole model of

00:10:11,860 --> 00:10:19,680
security as well we have a to b

00:10:17,290 --> 00:10:22,480
framework called k file metadata which

00:10:19,680 --> 00:10:24,550
it has a list of properties and

00:10:22,480 --> 00:10:27,910
extractor is going from the files and

00:10:24,550 --> 00:10:29,860
spew those properties so both the text

00:10:27,910 --> 00:10:32,980
extraction and the property extraction

00:10:29,860 --> 00:10:36,279
is combined and this is only one way OSX

00:10:32,980 --> 00:10:38,350
has the nearly similar thing given

00:10:36,279 --> 00:10:40,510
different languages and they have an

00:10:38,350 --> 00:10:42,279
extensible property system which people

00:10:40,510 --> 00:10:45,160
can define custom things we just assume

00:10:42,279 --> 00:10:46,630
people will contribute upstream it's

00:10:45,160 --> 00:10:49,510
fairly similar and it works out

00:10:46,630 --> 00:10:51,550
hopefully in the future maybe if I have

00:10:49,510 --> 00:10:53,589
plans to making a file metadata more for

00:10:51,550 --> 00:10:56,200
output system as well so maybe we'll get

00:10:53,589 --> 00:10:58,480
property handling and then finally we'll

00:10:56,200 --> 00:11:03,040
be able to modify properties better but

00:10:58,480 --> 00:11:04,900
my dreams but doable next problem we

00:11:03,040 --> 00:11:08,860
have file monitoring a bit about

00:11:04,900 --> 00:11:10,900
disallowed windows has a really nice by

00:11:08,860 --> 00:11:14,680
monitoring API since they've always had

00:11:10,900 --> 00:11:16,810
searched for quite a while now and you

00:11:14,680 --> 00:11:19,720
can say hey I one wanted to this folder

00:11:16,810 --> 00:11:23,010
give me on the events and I want it done

00:11:19,720 --> 00:11:25,960
recursively OSX has the exact same thing

00:11:23,010 --> 00:11:27,670
actually OS X is even better OS X has

00:11:25,960 --> 00:11:31,450
their own version of a file alteration

00:11:27,670 --> 00:11:33,820
in 15 alteration monitor something we

00:11:31,450 --> 00:11:36,010
used to have like fam except everything

00:11:33,820 --> 00:11:37,420
goes through spotlight and it goes to

00:11:36,010 --> 00:11:39,820
that other things so spotlight has

00:11:37,420 --> 00:11:41,160
special privileged access to the events

00:11:39,820 --> 00:11:43,870
and then you have another special

00:11:41,160 --> 00:11:45,830
database which files which applications

00:11:43,870 --> 00:11:47,870
can use to get information

00:11:45,830 --> 00:11:50,300
which files are moved similar to what

00:11:47,870 --> 00:11:52,910
ntfs does with the UDS and journal but

00:11:50,300 --> 00:11:54,890
they do it not on the file system level

00:11:52,910 --> 00:11:59,360
they do it on the user space level but

00:11:54,890 --> 00:12:01,660
it works out for them we have I notify I

00:11:59,360 --> 00:12:04,550
could really what I notify

00:12:01,660 --> 00:12:05,930
recently someone as in recent years in

00:12:04,550 --> 00:12:08,270
six months ago or maybe a year ago

00:12:05,930 --> 00:12:10,070
someone actually submitted a patch on

00:12:08,270 --> 00:12:12,020
the colonel mailing list saying things I

00:12:10,070 --> 00:12:14,300
wish I knew about I notify and added

00:12:12,020 --> 00:12:18,110
that to the documentation it's hilarious

00:12:14,300 --> 00:12:21,200
in a very sad way but still we have

00:12:18,110 --> 00:12:22,430
identified it works kind of the problem

00:12:21,200 --> 00:12:24,770
is it doesn't do recursive file

00:12:22,430 --> 00:12:26,540
notifications so you need to iterate

00:12:24,770 --> 00:12:28,910
through the entire file system tree and

00:12:26,540 --> 00:12:31,280
you need to install a watch per folder

00:12:28,910 --> 00:12:34,550
each watch is approximately about a

00:12:31,280 --> 00:12:37,550
kilobyte of kernel memory so when you

00:12:34,550 --> 00:12:39,440
have about 50 to 100,000 folders you get

00:12:37,550 --> 00:12:41,780
about a couple of hundred megabytes of

00:12:39,440 --> 00:12:45,470
kernel memory being used to maintain the

00:12:41,780 --> 00:12:48,170
watch's non swappable Aram is getting

00:12:45,470 --> 00:12:49,850
used up it's not perfect and then you

00:12:48,170 --> 00:12:53,810
have the mapping on the news ER side so

00:12:49,850 --> 00:12:56,090
it gets to be messy but this is kind of

00:12:53,810 --> 00:13:01,220
the best thing we have and everyone uses

00:12:56,090 --> 00:13:03,290
it we clearly don't have a real focus on

00:13:01,220 --> 00:13:06,560
from the colonel side on file system

00:13:03,290 --> 00:13:08,960
notifications purely for the context of

00:13:06,560 --> 00:13:10,580
file indexing but that's okay that's how

00:13:08,960 --> 00:13:12,890
it works if someone needs that they have

00:13:10,580 --> 00:13:15,500
to add it we have something cooler

00:13:12,890 --> 00:13:17,240
called FA notify which was added a

00:13:15,500 --> 00:13:19,640
couple of years ago it was added for the

00:13:17,240 --> 00:13:23,660
sole purpose of it seemed like the sole

00:13:19,640 --> 00:13:26,720
purpose of wireless scanners it's good

00:13:23,660 --> 00:13:28,250
we can do global notifications and we

00:13:26,720 --> 00:13:32,840
can say we don't want to monitor these

00:13:28,250 --> 00:13:35,900
and it's recursive and it works and it

00:13:32,840 --> 00:13:38,270
doesn't have five moon notifications it

00:13:35,900 --> 00:13:40,880
doesn't give us anything but it's still

00:13:38,270 --> 00:13:42,650
usable for us because as long as you

00:13:40,880 --> 00:13:46,520
have a unique identifier for a file if

00:13:42,650 --> 00:13:49,120
you do somewhat periodic checks you can

00:13:46,520 --> 00:13:51,260
kind of see which mile is mode where you

00:13:49,120 --> 00:13:53,630
experimented with that but it's an

00:13:51,260 --> 00:13:55,280
and trying to work around the particular

00:13:53,630 --> 00:13:58,340
system and not really intimidating a bit

00:13:55,280 --> 00:14:00,740
well also it requires good access but

00:13:58,340 --> 00:14:04,700
I've been trying to change that maybe it

00:14:00,740 --> 00:14:07,670
will go in the colonel maybe not all

00:14:04,700 --> 00:14:11,450
right very interesting but we have how

00:14:07,670 --> 00:14:13,970
you actually store the the index windows

00:14:11,450 --> 00:14:15,710
uses some kind of sequel store they have

00:14:13,970 --> 00:14:18,410
it running on every single system and

00:14:15,710 --> 00:14:20,990
it's exposed in the table called system

00:14:18,410 --> 00:14:22,730
index and that table is actually shared

00:14:20,990 --> 00:14:24,590
across your workgroup so when you're

00:14:22,730 --> 00:14:26,270
connecting to a network Windows lets you

00:14:24,590 --> 00:14:29,090
say how you want to share stuff and if

00:14:26,270 --> 00:14:30,890
it's a private network some strange

00:14:29,090 --> 00:14:32,750
stuff the entire system index is

00:14:30,890 --> 00:14:34,400
exported so you can run sequel queries

00:14:32,750 --> 00:14:38,240
giving the machine name and the system

00:14:34,400 --> 00:14:40,220
index from another system useful for

00:14:38,240 --> 00:14:42,560
fender for distributed searching but you

00:14:40,220 --> 00:14:44,810
don't really expose that in our UI so

00:14:42,560 --> 00:14:47,590
again it's having food technology but

00:14:44,810 --> 00:14:49,820
not really promoting it in a perfect way

00:14:47,590 --> 00:14:51,620
they store all the text there and they

00:14:49,820 --> 00:14:53,210
store all the properties separately so

00:14:51,620 --> 00:14:57,310
you can actually build fairly complex

00:14:53,210 --> 00:15:00,200
applications dealing with properties and

00:14:57,310 --> 00:15:02,360
they actually do quite a bit for more

00:15:00,200 --> 00:15:04,340
distributed searching they have the open

00:15:02,360 --> 00:15:07,220
search protocol which is used by web

00:15:04,340 --> 00:15:09,320
browsers and whatnot and they support

00:15:07,220 --> 00:15:11,900
that as well you can hypothetically if

00:15:09,320 --> 00:15:13,790
linux supported this protocol you can

00:15:11,900 --> 00:15:16,610
search through windows explorer on

00:15:13,790 --> 00:15:22,250
another machine they're trying and it's

00:15:16,610 --> 00:15:24,710
impressive OSX has a sea bass full text

00:15:22,250 --> 00:15:27,080
English indexing library called search

00:15:24,710 --> 00:15:29,060
kit which is also used for indexing

00:15:27,080 --> 00:15:31,370
their emails and a few other places it's

00:15:29,060 --> 00:15:33,260
purely for full-text indexing so that

00:15:31,370 --> 00:15:34,910
initial image which I showed you where

00:15:33,260 --> 00:15:36,710
you build the table and you do the

00:15:34,910 --> 00:15:38,780
organizing that's basically all it does

00:15:36,710 --> 00:15:41,300
it's not a full relational stores or

00:15:38,780 --> 00:15:44,810
doing property comparisons and rain

00:15:41,300 --> 00:15:46,940
check ups is slower and harder but

00:15:44,810 --> 00:15:48,440
that's not that common use case the most

00:15:46,940 --> 00:15:51,050
common use case he was doing word

00:15:48,440 --> 00:15:55,370
lookups and it's specifically built for

00:15:51,050 --> 00:15:57,170
that and this is blazingly fast search

00:15:55,370 --> 00:15:58,790
kid they wasn't that much information

00:15:57,170 --> 00:16:01,280
available about it of its implementation

00:15:58,790 --> 00:16:04,460
but trying to reverse engineer it seems

00:16:01,280 --> 00:16:06,760
straightforward and it's actually being

00:16:04,460 --> 00:16:09,590
used across a lot of places and they

00:16:06,760 --> 00:16:11,960
promote using it in other applications

00:16:09,590 --> 00:16:14,720
as well and it has special handling for

00:16:11,960 --> 00:16:17,210
files so it's not only a full-text

00:16:14,720 --> 00:16:19,430
indexing engine it has a way to store

00:16:17,210 --> 00:16:23,060
file URLs in a special way as well so

00:16:19,430 --> 00:16:25,430
it's doing quite a good job we have

00:16:23,060 --> 00:16:28,340
Baloo we used to use something called

00:16:25,430 --> 00:16:30,050
shacking which is one of the more

00:16:28,340 --> 00:16:32,510
popular for text indexing solutions and

00:16:30,050 --> 00:16:35,060
lyrics it's no you see which is the de

00:16:32,510 --> 00:16:36,770
facto standard as of today but lucena

00:16:35,060 --> 00:16:38,060
java-based and then you have clones of

00:16:36,770 --> 00:16:40,220
new scene which are in different

00:16:38,060 --> 00:16:42,040
languages and then you have Chaplin

00:16:40,220 --> 00:16:44,270
which is a pure c++ implementation

00:16:42,040 --> 00:16:45,860
champions awesome it works out really

00:16:44,270 --> 00:16:49,340
well and the first couple of versions

00:16:45,860 --> 00:16:51,470
Ballou used it we had problems with it

00:16:49,340 --> 00:16:53,420
as I typically land up exploring with

00:16:51,470 --> 00:16:55,430
different things and it wasn't as

00:16:53,420 --> 00:16:57,890
resilient to corruption as i would have

00:16:55,430 --> 00:17:01,670
liked but typically software design for

00:16:57,890 --> 00:17:03,590
the server i find it's more of a if it

00:17:01,670 --> 00:17:06,020
gets corrupted someone will go in and

00:17:03,590 --> 00:17:10,070
try to fix it and we can't really do

00:17:06,020 --> 00:17:12,740
that with users plus we had quite a

00:17:10,070 --> 00:17:14,330
force to problems with it so I decided a

00:17:12,740 --> 00:17:17,210
couple of months back to stop using chef

00:17:14,330 --> 00:17:20,360
Ian and I wrote we basically wrote our

00:17:17,210 --> 00:17:21,770
world full-text indexing solution it was

00:17:20,360 --> 00:17:23,300
actually much smaller than Shapland

00:17:21,770 --> 00:17:23,890
because when you're writing a full-text

00:17:23,300 --> 00:17:28,180
indexing

00:17:23,890 --> 00:17:32,080
you need all kind of priorities and you

00:17:28,180 --> 00:17:34,240
need all kind of you need a way to say

00:17:32,080 --> 00:17:36,040
that this term is important this is not

00:17:34,240 --> 00:17:37,770
and developer score and relevance

00:17:36,040 --> 00:17:40,360
ranking and these are really complicated

00:17:37,770 --> 00:17:42,820
probabilistic algorithms which drank

00:17:40,360 --> 00:17:44,350
every single document I mean Google had

00:17:42,820 --> 00:17:47,110
the same thing the whole page rank thing

00:17:44,350 --> 00:17:48,790
but when you're doing search on desktop

00:17:47,110 --> 00:17:50,460
it's not really the same case you aren't

00:17:48,790 --> 00:17:52,750
really doing searching based on

00:17:50,460 --> 00:17:55,690
relevance that much you're doing this

00:17:52,750 --> 00:17:57,730
searching based on filtering and then

00:17:55,690 --> 00:18:00,040
the relevance is typically when is the

00:17:57,730 --> 00:18:02,230
last time i modified this so if you have

00:18:00,040 --> 00:18:04,630
your clear use kiss very well defined

00:18:02,230 --> 00:18:06,310
it's easier to target the problem and

00:18:04,630 --> 00:18:08,860
just build a customized solution for

00:18:06,310 --> 00:18:12,310
that it means you're more brittle and

00:18:08,860 --> 00:18:14,950
less specialized and less adaptable but

00:18:12,310 --> 00:18:17,530
I don't really think these requirements

00:18:14,950 --> 00:18:20,410
are going to change that much so it

00:18:17,530 --> 00:18:22,720
works out for us really long this is a

00:18:20,410 --> 00:18:24,310
part of the loop and it doesn't have a

00:18:22,720 --> 00:18:26,740
separate name so it's just an internal

00:18:24,310 --> 00:18:28,450
engine which we are using hopefully

00:18:26,740 --> 00:18:30,880
maybe in the future we'll export it as a

00:18:28,450 --> 00:18:34,690
custom cute really lightweight keep pace

00:18:30,880 --> 00:18:37,660
for texting in the full text in indexing

00:18:34,690 --> 00:18:40,030
engine and maybe other people can use it

00:18:37,660 --> 00:18:41,860
there are plans for economic to use it

00:18:40,030 --> 00:18:45,310
as well because we have built on top of

00:18:41,860 --> 00:18:49,000
a kind of a really cool key value based

00:18:45,310 --> 00:18:52,960
store called LM DB which memory maps the

00:18:49,000 --> 00:18:54,940
entire files so it's always be using the

00:18:52,960 --> 00:18:57,040
colonel caches instead of having any

00:18:54,940 --> 00:18:58,930
caches on the user level so it's really

00:18:57,040 --> 00:19:01,600
really blazingly fast to do searches on

00:18:58,930 --> 00:19:04,810
and to do lookups and this is in cross

00:19:01,600 --> 00:19:06,310
process so it doesn't matter if the same

00:19:04,810 --> 00:19:08,680
process have been crashed or whatever

00:19:06,310 --> 00:19:10,000
the caches are still valid so when you

00:19:08,680 --> 00:19:12,310
start doing so which is in caivano

00:19:10,000 --> 00:19:14,560
really works out well because it's just

00:19:12,310 --> 00:19:16,450
the caches once they're populated even

00:19:14,560 --> 00:19:18,480
without the cash and incorporated would

00:19:16,450 --> 00:19:21,070
typically get an agency for about 10

00:19:18,480 --> 00:19:24,090
milliseconds per search and that's

00:19:21,070 --> 00:19:24,090
really fast

00:19:26,090 --> 00:19:29,510
then we have presentation how you

00:19:27,740 --> 00:19:31,279
actually instead of going into the

00:19:29,510 --> 00:19:36,470
internals how you actually present all

00:19:31,279 --> 00:19:40,000
the data and windows does an okay job

00:19:36,470 --> 00:19:43,850
but there's scope for improvement and

00:19:40,000 --> 00:19:49,039
they do okay but they're not these guys

00:19:43,850 --> 00:19:51,350
and that's understandable OSX typically

00:19:49,039 --> 00:19:53,029
really really tries to work on the

00:19:51,350 --> 00:19:54,830
presentation layer so why windows

00:19:53,029 --> 00:19:56,900
actually has more superior back-end

00:19:54,830 --> 00:19:59,720
technology they've really put in a lot

00:19:56,900 --> 00:20:01,190
of effort to index stuff quietly and all

00:19:59,720 --> 00:20:03,950
of the API is exposed and the

00:20:01,190 --> 00:20:06,049
documentation whatnot is superb on the

00:20:03,950 --> 00:20:08,090
presentation front it's not as glamorous

00:20:06,049 --> 00:20:10,490
even though they have the technology to

00:20:08,090 --> 00:20:14,179
make it to be while OS X is using a

00:20:10,490 --> 00:20:15,919
smaller sea bass API a smaller for text

00:20:14,179 --> 00:20:17,440
indexing engine their api is and the

00:20:15,919 --> 00:20:21,770
whole framework aren't that elaborate

00:20:17,440 --> 00:20:29,350
but they display a really really nice ey

00:20:21,770 --> 00:20:32,480
and it kind of works out in KDE I've

00:20:29,350 --> 00:20:34,990
tried to do something similar so you can

00:20:32,480 --> 00:20:38,450
clearly see and how there's a similarity

00:20:34,990 --> 00:20:43,610
it wasn't completely intentional but it

00:20:38,450 --> 00:20:46,159
kind of was so we love good kind of and

00:20:43,610 --> 00:20:48,529
the plus point is that's what night no

00:20:46,159 --> 00:20:51,559
longer really looks like this so we are

00:20:48,529 --> 00:20:54,020
kind of doing well plus since the whole

00:20:51,559 --> 00:20:56,840
qml revolution we kind of really

00:20:54,020 --> 00:20:58,549
separated the outer layers hopefully in

00:20:56,840 --> 00:21:00,500
future versions you'll have more

00:20:58,549 --> 00:21:02,809
different device of k runner and maybe

00:21:00,500 --> 00:21:05,950
even something similar to the newer

00:21:02,809 --> 00:21:08,600
spotlight we do have custom ui's in

00:21:05,950 --> 00:21:10,279
plasma which aren't yet exposed you get

00:21:08,600 --> 00:21:12,980
the old quedan on you I or you get the

00:21:10,279 --> 00:21:15,679
new one you know we're all about

00:21:12,980 --> 00:21:20,779
customizability so it's going to get

00:21:15,679 --> 00:21:24,049
better we have a lot of work to do in

00:21:20,779 --> 00:21:27,830
terms of file management of searching in

00:21:24,049 --> 00:21:29,600
a file browser OS X does that really

00:21:27,830 --> 00:21:31,389
well the whole finder thing and allowing

00:21:29,600 --> 00:21:34,119
people to save custom search

00:21:31,389 --> 00:21:36,789
windows does a decent job as well we

00:21:34,119 --> 00:21:41,679
have smoked improve but it's always the

00:21:36,789 --> 00:21:44,079
case with us we'll get there and that's

00:21:41,679 --> 00:21:45,399
mostly Microsoft has great back in

00:21:44,079 --> 00:21:49,509
technology but they aren't really

00:21:45,399 --> 00:21:51,429
promoting it as a unified product OS X

00:21:49,509 --> 00:21:52,989
really market spotlight a lot so they

00:21:51,429 --> 00:21:55,599
have it as a separate product and they

00:21:52,989 --> 00:21:57,579
really show that media attention to it

00:21:55,599 --> 00:21:59,320
so people have a catchy brand name which

00:21:57,579 --> 00:22:00,999
they use to really like a pile of

00:21:59,320 --> 00:22:02,769
spotlights its most amazing thing I

00:22:00,999 --> 00:22:04,629
think this is going to change in the

00:22:02,769 --> 00:22:06,759
future Microsoft's really promoting

00:22:04,629 --> 00:22:08,889
something called Cortana if you don't

00:22:06,759 --> 00:22:11,589
know what Cortana is there is a halo

00:22:08,889 --> 00:22:13,209
game which apparently really popular and

00:22:11,589 --> 00:22:16,059
there was an AI or their look at

00:22:13,209 --> 00:22:18,789
heart so she was put in the desktop and

00:22:16,059 --> 00:22:20,349
she's now something akin to cv but it's

00:22:18,789 --> 00:22:22,059
also on the desktop which is kind of

00:22:20,349 --> 00:22:24,909
unique and they're really promoting that

00:22:22,059 --> 00:22:27,879
for Windows 10 so the whole desktop file

00:22:24,909 --> 00:22:29,200
search is one part of the whole Cortana

00:22:27,879 --> 00:22:31,509
thing but they're trying to move away

00:22:29,200 --> 00:22:33,339
from it or sex is also slowly doing this

00:22:31,509 --> 00:22:35,169
but they're still on the desktop they

00:22:33,339 --> 00:22:37,389
still use in the spotlight brand while

00:22:35,169 --> 00:22:40,779
on the mobile stuff they have CV but

00:22:37,389 --> 00:22:45,759
then file searching isn't that relevant

00:22:40,779 --> 00:22:47,679
typically on on a mobile and one Linux

00:22:45,759 --> 00:22:51,190
you guys can derive the conclusions of

00:22:47,679 --> 00:22:53,679
how we're doing your losses so I don't

00:22:51,190 --> 00:22:56,909
really need to go there and that's it

00:22:53,679 --> 00:22:56,909
questions thank you

00:23:15,289 --> 00:23:28,019
so how publicly difference the bone

00:23:22,250 --> 00:23:34,409
augmentation how much will be for us to

00:23:28,019 --> 00:23:37,980
is Dave item day maybe I've hacking less

00:23:34,409 --> 00:23:41,190
actually maybe we can do it today but

00:23:37,980 --> 00:23:42,840
the thing is shepton we'd already

00:23:41,190 --> 00:23:44,370
started replacing large parts of

00:23:42,840 --> 00:23:47,120
champion because they weren't doing what

00:23:44,370 --> 00:23:49,259
revolted so that's why we created

00:23:47,120 --> 00:23:51,389
chaplain cute library which we

00:23:49,259 --> 00:23:53,370
implemented large pots and all of that

00:23:51,389 --> 00:23:55,500
went into the new engine so we're

00:23:53,370 --> 00:23:57,799
already halfway there it's it's gonna be

00:23:55,500 --> 00:23:57,799
trivial

00:24:12,430 --> 00:24:16,340
they're aware of it and they've been

00:24:14,810 --> 00:24:19,610
discussions on the colonel mailing list

00:24:16,340 --> 00:24:21,530
but it's typically of this form of Scott

00:24:19,610 --> 00:24:23,270
your own age provide patches will do it

00:24:21,530 --> 00:24:25,100
and I've been trying to get more

00:24:23,270 --> 00:24:27,530
involved in that but that's not really

00:24:25,100 --> 00:24:30,290
my forte and understandably in an open

00:24:27,530 --> 00:24:32,390
source were we typically don't expect

00:24:30,290 --> 00:24:33,860
other people to be doing the work and

00:24:32,390 --> 00:24:35,750
then we hire someone or we do it

00:24:33,860 --> 00:24:37,870
ourselves that's typically how it works

00:24:35,750 --> 00:24:40,850
I do know they're opposed to having a

00:24:37,870 --> 00:24:44,000
fourth file system notification API base

00:24:40,850 --> 00:24:45,620
d notify I modify and FA notify so when

00:24:44,000 --> 00:24:47,960
I proposed new changes of adding a new

00:24:45,620 --> 00:24:50,060
one day said explicitly please just

00:24:47,960 --> 00:24:53,300
modify fa notified to what you need and

00:24:50,060 --> 00:24:55,340
let's not have a fourth one I have some

00:24:53,300 --> 00:24:57,410
patches on fa notify which are kind of

00:24:55,340 --> 00:24:59,210
working but the kernel development is

00:24:57,410 --> 00:25:01,310
hard for me so maybe we'll see the

00:24:59,210 --> 00:25:03,140
situation improve but the moment it does

00:25:01,310 --> 00:25:06,320
improve it improves for everyone because

00:25:03,140 --> 00:25:09,140
tracker is essentially the same as the

00:25:06,320 --> 00:25:11,540
same problems and this is one of the

00:25:09,140 --> 00:25:13,460
longest time standing bugs in network

00:25:11,540 --> 00:25:17,200
which is in there in that we trash them

00:25:13,460 --> 00:25:17,200
this constructor for installing watches

00:25:45,769 --> 00:26:03,480
yeah what's the busy okay so during the

00:26:01,200 --> 00:26:11,309
netbook days we used to monitor every

00:26:03,480 --> 00:26:12,750
single thing become the virtual file

00:26:11,309 --> 00:26:14,940
system is slightly strange I don't

00:26:12,750 --> 00:26:16,769
understand all of it I can steal a code

00:26:14,940 --> 00:26:21,679
and it looks really strange but I don't

00:26:16,769 --> 00:26:21,679
get all of this that's it

00:26:25,500 --> 00:26:42,090
we don't ever have 20 minutes and 14

00:26:30,280 --> 00:26:42,090
more seconds yeah Oh

00:27:16,090 --> 00:27:31,220
they are I actually hacked on this and

00:27:28,700 --> 00:27:33,440
shipped this naively during the windows

00:27:31,220 --> 00:27:36,320
time during the never work days so I

00:27:33,440 --> 00:27:38,590
landed up enabling or shavon analyzer of

00:27:36,320 --> 00:27:41,450
every single file and trying to use this

00:27:38,590 --> 00:27:44,360
the UI UI degenerated for a unique

00:27:41,450 --> 00:27:46,730
identifier for a file but the disk usage

00:27:44,360 --> 00:27:49,280
blows up because then you really need to

00:27:46,730 --> 00:27:51,290
read every single part of the file and

00:27:49,280 --> 00:27:52,760
right now even for full-text indexing we

00:27:51,290 --> 00:27:55,040
don't need to read every part of the

00:27:52,760 --> 00:27:57,710
files actually for video files just go

00:27:55,040 --> 00:27:59,480
to the methylated get it out and the

00:27:57,710 --> 00:28:02,660
moment if I changes the sword breaks and

00:27:59,480 --> 00:28:05,840
files to change plus I really think that

00:28:02,660 --> 00:28:08,210
this is not job of the user land to be

00:28:05,840 --> 00:28:10,309
doing this but Rufus does a great job in

00:28:08,210 --> 00:28:12,260
terms of identifying which blocks are

00:28:10,309 --> 00:28:13,940
common and there's a d duplicator for

00:28:12,260 --> 00:28:16,190
butter FS because it's a copy and write

00:28:13,940 --> 00:28:18,740
file system is so all it actually really

00:28:16,190 --> 00:28:20,840
stores multiple copies of the file once

00:28:18,740 --> 00:28:22,700
I really think this exists in the file

00:28:20,840 --> 00:28:26,000
system layer and New Zealand and work

00:28:22,700 --> 00:28:28,610
around it but we're trying to do file

00:28:26,000 --> 00:28:31,640
search and it's better to just focus on

00:28:28,610 --> 00:28:33,200
that and do it well and I don't really

00:28:31,640 --> 00:28:37,059
see this in the scope plus file change a

00:28:33,200 --> 00:28:37,059
lot so it really didn't work out for us

00:28:38,990 --> 00:28:54,929
Thanks any more questions otherwise

00:28:45,710 --> 00:28:56,670
thank you anyone interested I'm still

00:28:54,929 --> 00:28:58,290
around here some people find it a dry

00:28:56,670 --> 00:29:02,360
topic I've clearly been working on it

00:28:58,290 --> 00:29:02,360
for a very long time so I'm jumping

00:29:11,030 --> 00:29:13,090

YouTube URL: https://www.youtube.com/watch?v=kUB62wSE9Ks


