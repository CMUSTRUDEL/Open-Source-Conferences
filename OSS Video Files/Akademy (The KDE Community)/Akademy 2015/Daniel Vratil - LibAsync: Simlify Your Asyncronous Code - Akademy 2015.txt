Title: Daniel Vratil - LibAsync: Simlify Your Asyncronous Code - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	LibAsync is a small generic library I wrote to simplify chaining of asynchronous jobs and make it possible to do small asynchronous tasks easily without having to use KJob API. In this talk I will briefly introduce the library, show a few use cases and compare them with the standard KJob API.

LibAsync was originally created as part of the Akonadi Next effort, but it's generic enough to be used by any Qt-based project.

It allows to chain multiple asynchronous jobs in one place, making it easier to follow what's happening in the code and debug it. The jobs can be passed in as KJobs, simple functions or even lambda functions.

This talk is targeted at all developers who use KJobs in their applications and are interested in simplifying their codebase. 

Speaker: Daniel VrÃ¡til
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:10,050 --> 00:00:14,900
so I want to briefly introduce you to a

00:00:13,000 --> 00:00:17,360
library that

00:00:14,900 --> 00:00:19,849
working on originally I started working

00:00:17,360 --> 00:00:21,650
on it as part of the Act nadia next for

00:00:19,849 --> 00:00:25,340
death krystian bala cook at talk about

00:00:21,650 --> 00:00:27,050
lost yesterday and eventually be

00:00:25,340 --> 00:00:29,779
realized it can I useful even outside

00:00:27,050 --> 00:00:31,670
acknowledge so we split it out now it's

00:00:29,779 --> 00:00:35,780
both ki sing it's in a playground right

00:00:31,670 --> 00:00:40,100
now my presentation is basically not

00:00:35,780 --> 00:00:42,559
working it's basically 0 points ok

00:00:40,100 --> 00:00:44,210
there's a sequence post 11 library lots

00:00:42,559 --> 00:00:46,610
of templates basically just one huge

00:00:44,210 --> 00:00:48,500
header file the idea is to describe

00:00:46,610 --> 00:00:50,989
chain of synchronous operations that you

00:00:48,500 --> 00:00:53,780
have any obligation on a single place

00:00:50,989 --> 00:00:55,909
and then you can execute in from

00:00:53,780 --> 00:00:59,059
different places implement the actual

00:00:55,909 --> 00:01:01,070
steps in different places but the actual

00:00:59,059 --> 00:01:05,330
execution is described in a single place

00:01:01,070 --> 00:01:08,630
so you can open the file if you open the

00:01:05,330 --> 00:01:12,049
file the sort of the source code and

00:01:08,630 --> 00:01:15,049
just look into the main function you see

00:01:12,049 --> 00:01:16,700
how the syncros task will be executed

00:01:15,049 --> 00:01:20,720
and you don't need to read the entire

00:01:16,700 --> 00:01:23,600
code to get the idea what the flow is so

00:01:20,720 --> 00:01:26,150
yeah basically my presentation is just a

00:01:23,600 --> 00:01:28,610
source code so this is what we do now in

00:01:26,150 --> 00:01:30,680
this is sort of issue example of how I'm

00:01:28,610 --> 00:01:36,440
up thinking can work so it looks into

00:01:30,680 --> 00:01:38,540
observer little AC speed it lists the at

00:01:36,440 --> 00:01:42,770
least folders that are available there

00:01:38,540 --> 00:01:44,600
and then it

00:01:42,770 --> 00:01:49,509
at least the folder that are available

00:01:44,600 --> 00:01:49,509
there and sorry

00:01:59,800 --> 00:02:09,210
there was anyway so what do you what you

00:02:04,270 --> 00:02:11,620
see now is that it starts job and

00:02:09,210 --> 00:02:14,140
logging job and then when it finishes

00:02:11,620 --> 00:02:15,850
the call goes here and then finishes and

00:02:14,140 --> 00:02:19,090
goes here then it does something and

00:02:15,850 --> 00:02:22,060
it's actually it actually iterate over

00:02:19,090 --> 00:02:25,510
the results of the first job of the

00:02:22,060 --> 00:02:27,460
first job and creates a bunch of new

00:02:25,510 --> 00:02:29,170
jobs so please keep the stage or

00:02:27,460 --> 00:02:31,330
remember all the jobs this is error

00:02:29,170 --> 00:02:32,920
prone because if this didn't return any

00:02:31,330 --> 00:02:34,990
files the job you'll never finish and

00:02:32,920 --> 00:02:38,260
when all the jobs finished you actually

00:02:34,990 --> 00:02:40,000
get the results here and if all these

00:02:38,260 --> 00:02:42,250
jobs are finished um it results from the

00:02:40,000 --> 00:02:43,570
entire job this is solely because you

00:02:42,250 --> 00:02:45,100
need to read the entire code to

00:02:43,570 --> 00:02:47,560
understand what the hell is going on and

00:02:45,100 --> 00:02:49,480
you also need to keep these states which

00:02:47,560 --> 00:02:53,190
is very dangerous at some point we just

00:02:49,480 --> 00:02:57,070
break so this is an example is chaos Inc

00:02:53,190 --> 00:02:59,290
shortened kara this is where the entire

00:02:57,070 --> 00:03:03,610
thing is described these couple lines

00:02:59,290 --> 00:03:06,280
you start logging job then you execute

00:03:03,610 --> 00:03:08,430
the latest job and for each result of

00:03:06,280 --> 00:03:11,140
this job you execute a fetch that's job

00:03:08,430 --> 00:03:12,670
right that's it I know exactly what is

00:03:11,140 --> 00:03:14,380
happening in the Centaur class just by

00:03:12,670 --> 00:03:16,239
looking in three months of the codes and

00:03:14,380 --> 00:03:19,450
I don't really care how eternally these

00:03:16,239 --> 00:03:22,600
things are implemented yet here I just

00:03:19,450 --> 00:03:24,430
wait exactly the job wait for get some

00:03:22,600 --> 00:03:28,030
future promise basically it wait for it

00:03:24,430 --> 00:03:30,070
to finish and when it finishes I can

00:03:28,030 --> 00:03:34,980
just get the result and the results will

00:03:30,070 --> 00:03:38,260
be available in the future already then

00:03:34,980 --> 00:03:40,620
the this is our example how the

00:03:38,260 --> 00:03:43,510
individual parts can be done implemented

00:03:40,620 --> 00:03:45,760
basically just you start the job and you

00:03:43,510 --> 00:03:47,890
soon alarm down to call future says

00:03:45,760 --> 00:03:50,140
finished which tells you that which base

00:03:47,890 --> 00:03:53,140
personnel tells the chaos of librarian

00:03:50,140 --> 00:03:56,739
death the execution is over and it can

00:03:53,140 --> 00:03:57,700
execute the next ask one of the idea we

00:03:56,739 --> 00:03:59,739
also supports like

00:03:57,700 --> 00:04:02,080
chaining gets a lot of stuff so one of

00:03:59,739 --> 00:04:05,890
the ideas is that you can have the

00:04:02,080 --> 00:04:08,590
header file we would have get logging

00:04:05,890 --> 00:04:10,569
job get list mailbox jobs get veg tart

00:04:08,590 --> 00:04:12,400
shell and or not and each would return

00:04:10,569 --> 00:04:14,500
just a single subject that does one

00:04:12,400 --> 00:04:17,079
thing and then you can use que hace to

00:04:14,500 --> 00:04:20,320
compose those jobs in a nice way on a

00:04:17,079 --> 00:04:22,300
single place do you may decode it much

00:04:20,320 --> 00:04:23,530
easier to read and understand this is

00:04:22,300 --> 00:04:25,600
what we would like to do for instance

00:04:23,530 --> 00:04:27,729
they did current ki but library because

00:04:25,600 --> 00:04:31,479
currently just a complicated chain of

00:04:27,729 --> 00:04:34,090
things being cold and are it worked in

00:04:31,479 --> 00:04:35,530
random random for older so it's

00:04:34,090 --> 00:04:37,780
difficult to get a grasp of what is

00:04:35,530 --> 00:04:40,570
going on this makes it much easier to to

00:04:37,780 --> 00:04:43,210
read so if you're interested in using

00:04:40,570 --> 00:04:45,280
the library you can clue it if you're

00:04:43,210 --> 00:04:47,080
not afraid of templates you can bring me

00:04:45,280 --> 00:04:49,770
an NRC you consider your manual focus on

00:04:47,080 --> 00:04:49,770
me that gives bar

00:04:54,960 --> 00:04:57,020
you

00:05:04,910 --> 00:05:06,970

YouTube URL: https://www.youtube.com/watch?v=qa5epsRzUeo


