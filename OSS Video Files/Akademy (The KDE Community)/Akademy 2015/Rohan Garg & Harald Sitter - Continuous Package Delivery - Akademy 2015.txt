Title: Rohan Garg & Harald Sitter - Continuous Package Delivery - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	We'll be talking about how we've built tooling and QA measures to provide KDE packages from git using Jenkins.

In order to have tighter feedback loops amongst Kubuntu & Debian users and packagers and KDE developers , Harald and I started working on writing tools and setting up infrastructure so that we could continuously provide Plasma 5 and Frameworks 5 packages from git along with a few QA measures that were to be implemented on the distribution side of things.

Our work over the past 6 months has culminated into Debian KDE CI and Kubuntu CI that provide QA'd packages across multiple architechtures.

We'll be talking about how both of these work and go into details about some of the tooling we've written that enables us to match the pace of KDE developers, commit for commit ;)

Speakers: Rohan Garg & Harald Sitter
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:07,930 --> 00:00:15,250
hello everyone so this really started

00:00:12,129 --> 00:00:17,020
out at last Academy sameen hard on sat

00:00:15,250 --> 00:00:18,340
down and try to figure out what you're

00:00:17,020 --> 00:00:19,779
going to do over the next year in terms

00:00:18,340 --> 00:00:22,869
of continuous integration and

00:00:19,779 --> 00:00:24,940
integrating master the get master

00:00:22,869 --> 00:00:27,369
branches of KD frameworks and plasma

00:00:24,940 --> 00:00:30,580
five and this is where we are off here

00:00:27,369 --> 00:00:35,260
and you can prevent the work oh you guys

00:00:30,580 --> 00:00:38,649
like it next somebody should keyboard

00:00:35,260 --> 00:00:41,680
handling man well I just did oh you did

00:00:38,649 --> 00:00:43,870
it all right so cool a couple of years

00:00:41,680 --> 00:00:46,690
ago when I software with KD SC packaging

00:00:43,870 --> 00:00:48,579
and I got in whirling KD s packaging it

00:00:46,690 --> 00:00:52,600
was more or less 60 social send

00:00:48,579 --> 00:00:55,059
resources and the way Katie Reese's used

00:00:52,600 --> 00:00:56,620
to work was you the packages would get

00:00:55,059 --> 00:01:00,000
the saw Star Wars a week before the

00:00:56,620 --> 00:01:02,500
release repair all binary packages and

00:01:00,000 --> 00:01:04,299
being the optimistic person that I am I

00:01:02,500 --> 00:01:07,360
just thought hey that's good enough time

00:01:04,299 --> 00:01:10,659
to get the binary packages up and that's

00:01:07,360 --> 00:01:12,670
it well enough turns out not so much it

00:01:10,659 --> 00:01:14,560
took about four days to actually get

00:01:12,670 --> 00:01:17,650
through all of the packaging which left

00:01:14,560 --> 00:01:19,420
about two days for testing and we

00:01:17,650 --> 00:01:23,530
couldn't do enough key way to catch all

00:01:19,420 --> 00:01:26,040
of the problems at times and this got me

00:01:23,530 --> 00:01:31,479
thinking about two points first of all

00:01:26,040 --> 00:01:33,700
that is that there is a lot of work to

00:01:31,479 --> 00:01:36,070
be done in terms of KD s in packaging

00:01:33,700 --> 00:01:39,880
that their muscle so doubles that are

00:01:36,070 --> 00:01:42,580
released and that it doesn't scale it

00:01:39,880 --> 00:01:45,130
wastes time and lots of energy and this

00:01:42,580 --> 00:01:47,799
was when we had five or six people

00:01:45,130 --> 00:01:50,229
working on KESC Reese's income untrue

00:01:47,799 --> 00:01:52,420
the second thing I realized was there

00:01:50,229 --> 00:01:55,979
was a lot of improvement to be made in

00:01:52,420 --> 00:01:58,780
terms of automation so it was mostly a

00:01:55,979 --> 00:02:01,090
serialized work that could be automated

00:01:58,780 --> 00:02:05,710
away so that all of us could go to beach

00:02:01,090 --> 00:02:08,679
and enjoy mojito so things kind of had

00:02:05,710 --> 00:02:10,030
to change right so Felix square and

00:02:08,679 --> 00:02:11,620
Phillip came up with these scripts

00:02:10,030 --> 00:02:14,560
called coupon to automation tools that

00:02:11,620 --> 00:02:16,569
popped up on launch pad which massively

00:02:14,560 --> 00:02:19,659
paralyzed all our work and what these

00:02:16,569 --> 00:02:20,380
scripts to do was or prepare the source

00:02:19,659 --> 00:02:22,750
packages up low

00:02:20,380 --> 00:02:23,800
the launch pad let them build and then a

00:02:22,750 --> 00:02:25,690
human would actually look at the

00:02:23,800 --> 00:02:28,740
failures and go and go through them fix

00:02:25,690 --> 00:02:30,910
them this had a little bit but still

00:02:28,740 --> 00:02:34,570
there was a lot of work to be done in

00:02:30,910 --> 00:02:35,620
terms of in terms of the idea that you

00:02:34,570 --> 00:02:37,660
could just go to the beach and have a

00:02:35,620 --> 00:02:40,450
mojito and just press the button cover

00:02:37,660 --> 00:02:44,530
release and go to the beach and alimony

00:02:40,450 --> 00:02:46,230
tow ready so that's that the process had

00:02:44,530 --> 00:02:55,830
really had to change and that's where

00:02:46,230 --> 00:02:59,860
our CI ruling comes in X so enter banga

00:02:55,830 --> 00:03:04,840
banga is about 49,000 lines of Ruby code

00:02:59,860 --> 00:03:07,870
and it has 44 unit tests it is spread

00:03:04,840 --> 00:03:10,930
across 13 servers which which is

00:03:07,870 --> 00:03:13,750
basically three Jenkins servers nine

00:03:10,930 --> 00:03:15,130
slips and one mobile imaging server for

00:03:13,750 --> 00:03:20,980
the plasma phone stuff that you saw

00:03:15,130 --> 00:03:23,320
yesterday whoo-hoo right so the way it

00:03:20,980 --> 00:03:26,200
works it is that we distribute packages

00:03:23,320 --> 00:03:28,330
for debian and ubuntu and for debian

00:03:26,200 --> 00:03:30,580
since that mean does not have a DBA like

00:03:28,330 --> 00:03:32,410
structure we use amazon st st to

00:03:30,580 --> 00:03:38,170
actually distribute the packages

00:03:32,410 --> 00:03:44,410
themselves so how it works we have mojo

00:03:38,170 --> 00:03:50,470
jobs in can you open KCI perhaps it's a

00:03:44,410 --> 00:03:52,750
figure out all right wait i won right

00:03:50,470 --> 00:03:56,800
which one is it and it's easier is this

00:03:52,750 --> 00:04:00,910
one yes so we have more jobs basically

00:03:56,800 --> 00:04:03,310
what they do is take the we have a get

00:04:00,910 --> 00:04:05,560
back we have the backing sword on debian

00:04:03,310 --> 00:04:07,450
org so and we have multiple branches

00:04:05,560 --> 00:04:10,120
over there so we have one branch is like

00:04:07,450 --> 00:04:13,420
kubuntu unstable which track get master

00:04:10,120 --> 00:04:17,350
from KD frameworks and plasma and we

00:04:13,420 --> 00:04:19,510
have coupon to pivot archive and coupon

00:04:17,350 --> 00:04:21,430
to philip IV archive and all these

00:04:19,510 --> 00:04:24,980
changes need to be merged properly and

00:04:21,430 --> 00:04:29,360
we have mojo jobs like merger unless

00:04:24,980 --> 00:04:32,090
and litter and what these jobs do is

00:04:29,360 --> 00:04:34,820
most appropriate branches amongst each

00:04:32,090 --> 00:04:37,550
other so things like things that go into

00:04:34,820 --> 00:04:39,320
the archive I go into the coupon to

00:04:37,550 --> 00:04:40,700
Wiley branch on get Burke Devlin and

00:04:39,320 --> 00:04:44,150
they get merged into coupon too unstable

00:04:40,700 --> 00:04:45,980
automatically by these jobs we have the

00:04:44,150 --> 00:04:48,920
Builder jobs which prepare the source

00:04:45,980 --> 00:04:51,500
packages and by preparing source

00:04:48,920 --> 00:04:54,680
packages I mean they grab the get master

00:04:51,500 --> 00:04:56,600
or whatever branch you want of KD

00:04:54,680 --> 00:04:58,610
frameworks and merge the packaging in

00:04:56,600 --> 00:05:00,410
and prepare the initial source packages

00:04:58,610 --> 00:05:03,280
no boundaries are produced at this time

00:05:00,410 --> 00:05:05,840
it's just purely the source packaging

00:05:03,280 --> 00:05:09,590
then depending on which CR you are

00:05:05,840 --> 00:05:11,840
looking at we have the binary jobs for

00:05:09,590 --> 00:05:13,880
coupon do see I we upload them to launch

00:05:11,840 --> 00:05:17,270
pad to build them for the debian CI we

00:05:13,880 --> 00:05:20,210
have a slaves are actually build out the

00:05:17,270 --> 00:05:24,020
binaries then we have publishing jobs

00:05:20,210 --> 00:05:26,780
which publish them to amazon s3 or in

00:05:24,020 --> 00:05:28,640
the case of the coupon you see I there r

00:05:26,780 --> 00:05:31,430
QA jobs which makes which run through

00:05:28,640 --> 00:05:35,140
some tests to make sure the packages are

00:05:31,430 --> 00:05:42,740
actually semi usable at the very least

00:05:35,140 --> 00:05:49,820
can you looks like these oh wait no that

00:05:42,740 --> 00:05:51,610
is fine right so right so what so I'm

00:05:49,820 --> 00:05:54,140
going to talk about DC a little bit now

00:05:51,610 --> 00:05:56,210
so DC I currently targets there be an

00:05:54,140 --> 00:06:00,200
unstable it does not target anything

00:05:56,210 --> 00:06:05,210
else it builds for two architectures

00:06:00,200 --> 00:06:09,620
amd64 an arm hf it has a bpa like see i

00:06:05,210 --> 00:06:12,860
sat up or can you what do you want these

00:06:09,620 --> 00:06:15,200
are we watch you see I this yeah that's

00:06:12,860 --> 00:06:17,590
this one right so it has BB like

00:06:15,200 --> 00:06:21,140
structure set up so each of these

00:06:17,590 --> 00:06:24,290
folders so to speak has a separate

00:06:21,140 --> 00:06:26,720
repository map to it spit out will you

00:06:24,290 --> 00:06:29,270
can only use the cube files we cannot be

00:06:26,720 --> 00:06:32,600
25 from get as well as we build the 5.4

00:06:29,270 --> 00:06:35,540
branch so for example if you just want

00:06:32,600 --> 00:06:37,520
to use by the 5.4 branch from cute you

00:06:35,540 --> 00:06:38,810
can just add the cute repository you

00:06:37,520 --> 00:06:40,670
don't need to add any of the other ones

00:06:38,810 --> 00:06:42,320
if you want to use the frameworks

00:06:40,670 --> 00:06:44,750
repository you can use the you have to

00:06:42,320 --> 00:06:47,510
use the frameworks are also free and the

00:06:44,750 --> 00:06:49,010
unified poultry so on and so forth so

00:06:47,510 --> 00:06:58,220
each of these is actually a separate

00:06:49,010 --> 00:07:04,280
repository on amazon s3 let's go to the

00:06:58,220 --> 00:07:06,500
next slide I can't find my mouse right

00:07:04,280 --> 00:07:10,040
so the object has explained before for

00:07:06,500 --> 00:07:11,930
DC I was source binary published for cup

00:07:10,040 --> 00:07:15,290
of the binary stage and so stage we

00:07:11,930 --> 00:07:20,690
currently use SCH roots to fill out

00:07:15,290 --> 00:07:23,169
packages plan is to synergize with Casey

00:07:20,690 --> 00:07:26,690
I and have docker build or packages

00:07:23,169 --> 00:07:28,730
primarily because a talker has an epi

00:07:26,690 --> 00:07:31,220
instead of me calling commands by a ruby

00:07:28,730 --> 00:07:35,290
to accede shoot and atheists are just

00:07:31,220 --> 00:07:40,640
nice and way to interact with the system

00:07:35,290 --> 00:07:46,220
let's see right so some statistics we

00:07:40,640 --> 00:07:48,440
have 780 Jenkins jobs on DCI out of

00:07:46,220 --> 00:07:52,780
which 257 our sources so those are like

00:07:48,440 --> 00:07:56,560
source packages that DCI builds out and

00:07:52,780 --> 00:07:59,390
that's about that's about all could be

00:07:56,560 --> 00:08:04,630
you can take over not know I don't want

00:07:59,390 --> 00:08:04,630
to ah but you have to be unfortunate

00:08:11,220 --> 00:08:19,360
hey can you go so wrong talked about

00:08:17,050 --> 00:08:22,419
Debbie unsere part of things are going

00:08:19,360 --> 00:08:24,280
to talk about the voter stuff so we have

00:08:22,419 --> 00:08:26,290
grown to see I and the kubota so I was

00:08:24,280 --> 00:08:28,630
the first to that built therefore its

00:08:26,290 --> 00:08:33,310
architecture is very wicked and mighty

00:08:28,630 --> 00:08:34,539
and complicated and the world but it

00:08:33,310 --> 00:08:36,460
shouldn't be a surprise that sensor was

00:08:34,539 --> 00:08:38,950
the first thing that we built it runs

00:08:36,460 --> 00:08:41,020
most of the core services as we have

00:08:38,950 --> 00:08:43,659
seen the motors are on on the burn to

00:08:41,020 --> 00:08:44,830
see iron oh the QA is run on the current

00:08:43,659 --> 00:08:46,720
is here and a lot of additional

00:08:44,830 --> 00:08:49,080
management stuff that is happening in

00:08:46,720 --> 00:08:53,040
the background in order to facilitate

00:08:49,080 --> 00:08:55,690
see I work is those are happening though

00:08:53,040 --> 00:08:58,390
so in a way it is the heart of the

00:08:55,690 --> 00:09:00,910
operation and right now it is using

00:08:58,390 --> 00:09:03,010
multiplet as Rowan has mentioned it is

00:09:00,910 --> 00:09:04,990
using the launch pad for bills and it is

00:09:03,010 --> 00:09:09,280
using it excessively so launch pad has

00:09:04,990 --> 00:09:12,160
like 50 build servers i believe and at

00:09:09,280 --> 00:09:14,620
peak hours we would allocate 30 we would

00:09:12,160 --> 00:09:18,010
try to get 36 of those just for going to

00:09:14,620 --> 00:09:21,760
see on it is a massive thing in fact it

00:09:18,010 --> 00:09:24,360
is so massive we have 600 distinct build

00:09:21,760 --> 00:09:28,920
jobs for 200 sources all of the design

00:09:24,360 --> 00:09:33,640
katie of course this 600 jobs would be

00:09:28,920 --> 00:09:35,470
separated in Rowan also as mentioned two

00:09:33,640 --> 00:09:37,540
versions of Clinton we always integrate

00:09:35,470 --> 00:09:40,510
against the latest stable version and

00:09:37,540 --> 00:09:42,310
which in currently would be 1504 and the

00:09:40,510 --> 00:09:44,620
upcoming version which currently is 15

00:09:42,310 --> 00:09:48,670
challenge additionally we integrate both

00:09:44,620 --> 00:09:50,860
get master and if applicable a stable

00:09:48,670 --> 00:09:53,500
repository so for Katie applications we

00:09:50,860 --> 00:09:55,960
right now would implement master and

00:09:53,500 --> 00:10:04,240
applications 1508 which is going to be

00:09:55,960 --> 00:10:06,040
the next stable thing royal explains the

00:10:04,240 --> 00:10:07,900
mobile given to see are now as you

00:10:06,040 --> 00:10:10,630
thought yesterday and blue systems has

00:10:07,900 --> 00:10:13,180
been working on making a

00:10:10,630 --> 00:10:15,790
kind of software Finney and obviously

00:10:13,180 --> 00:10:18,790
cincy I systems are very obvious a very

00:10:15,790 --> 00:10:21,610
very happy occasions and very awesome as

00:10:18,790 --> 00:10:24,310
you should have heard in Alex Viesturs

00:10:21,610 --> 00:10:26,230
talk yesterday feedback is very

00:10:24,310 --> 00:10:27,670
important in fact Fitbit is so important

00:10:26,230 --> 00:10:30,550
that I think we could not have pulled

00:10:27,670 --> 00:10:34,060
off the plasma phone stuff had we not

00:10:30,550 --> 00:10:39,070
had this particular CI that is

00:10:34,060 --> 00:10:41,380
particular see I had a bit of a rush

00:10:39,070 --> 00:10:43,300
development in a way originally we

00:10:41,380 --> 00:10:45,340
wanted to use the regular Covington CR

00:10:43,300 --> 00:10:48,700
and since launch perros you can do on

00:10:45,340 --> 00:10:50,200
those except they didn't work so what we

00:10:48,700 --> 00:10:53,230
did is what we always do when we run

00:10:50,200 --> 00:10:54,850
into a problem we sit down and just run

00:10:53,230 --> 00:10:59,080
our heading heads against a wall and

00:10:54,850 --> 00:11:00,460
come up with a new solution so yeah

00:10:59,080 --> 00:11:03,490
white boards were touched

00:11:00,460 --> 00:11:05,410
inappropriately arguments were head flow

00:11:03,490 --> 00:11:07,300
charts were drawn and at the end of the

00:11:05,410 --> 00:11:09,640
day we had a completely new delivery

00:11:07,300 --> 00:11:12,510
pipeline that is sort of based at one on

00:11:09,640 --> 00:11:15,070
what's debian CI does so you create a

00:11:12,510 --> 00:11:17,200
source package then you build it on

00:11:15,070 --> 00:11:18,310
multiple architectures and once the

00:11:17,200 --> 00:11:21,610
amount of architectures are done

00:11:18,310 --> 00:11:24,190
additional QA jobs would run I will talk

00:11:21,610 --> 00:11:25,870
more about the Cure later and basically

00:11:24,190 --> 00:11:28,300
would have different QA depending on the

00:11:25,870 --> 00:11:30,610
architecture relevance they're all so on

00:11:28,300 --> 00:11:34,480
a phone you might want to do different

00:11:30,610 --> 00:11:35,800
cure than on the desktop so this is very

00:11:34,480 --> 00:11:37,800
much the future i'm not going to show

00:11:35,800 --> 00:11:40,270
you these jenkins this because i think

00:11:37,800 --> 00:11:42,730
some very interesting to look at it's

00:11:40,270 --> 00:11:43,550
just a bunch of mostly red things we

00:11:42,730 --> 00:11:52,370
have

00:11:43,550 --> 00:11:54,980
oh no we didn't know I think we don't

00:11:52,370 --> 00:11:58,910
David simple enough build to finish in

00:11:54,980 --> 00:12:00,950
time unfortunately so what we're doing

00:11:58,910 --> 00:12:03,620
is with the moment see how we have all

00:12:00,950 --> 00:12:06,380
in all eight build host for thurs built

00:12:03,620 --> 00:12:08,000
for 64 bits and forth those built for

00:12:06,380 --> 00:12:09,829
arm and the arm ones are ridiculously

00:12:08,000 --> 00:12:12,920
slow because they are on that's why it

00:12:09,829 --> 00:12:14,540
takes so long the 64-bit ones usually

00:12:12,920 --> 00:12:17,029
finish in two minutes for most

00:12:14,540 --> 00:12:20,630
frameworks and just raw built ton and

00:12:17,029 --> 00:12:23,000
the arm 102 take like 20 minutes to half

00:12:20,630 --> 00:12:24,529
an hour Quinn knife I believe takes one

00:12:23,000 --> 00:12:27,260
hour it's one of the biggest things

00:12:24,529 --> 00:12:33,260
along with KO and plasma frame are

00:12:27,260 --> 00:12:35,029
gradually is so if you're interested in

00:12:33,260 --> 00:12:38,510
this stuff then go take a look at all

00:12:35,029 --> 00:12:40,850
the CIS on Pangaea dock pop it's all

00:12:38,510 --> 00:12:42,200
domain will be host all this stuff and

00:12:40,850 --> 00:12:44,779
if you have questions you can ask us

00:12:42,200 --> 00:12:47,000
about it the architecture so we put a

00:12:44,779 --> 00:12:48,980
lot of falls into how the architecture

00:12:47,000 --> 00:12:57,110
of the jobs Alliance and how it all

00:12:48,980 --> 00:13:01,399
comes together into actual packages so

00:12:57,110 --> 00:13:03,050
how is this old relevant to assess ke

00:13:01,399 --> 00:13:06,339
and those are how is it relevant to a

00:13:03,050 --> 00:13:09,230
distribution to have a CR after all

00:13:06,339 --> 00:13:11,209
topic of this talk is continued package

00:13:09,230 --> 00:13:13,160
delivery this is also something that

00:13:11,209 --> 00:13:15,020
Alex yes this talked about yesterday so

00:13:13,160 --> 00:13:17,660
if you have not seen this talk I would

00:13:15,020 --> 00:13:20,529
encourage you to watch the video

00:13:17,660 --> 00:13:24,829
recording of it later on when you return

00:13:20,529 --> 00:13:26,209
so there's CIO which is continuous

00:13:24,829 --> 00:13:27,709
integration what you're doing is

00:13:26,209 --> 00:13:29,870
essentially you take a piece of software

00:13:27,709 --> 00:13:32,480
you build it and you might perform a

00:13:29,870 --> 00:13:36,709
series of tests on it to see is it good

00:13:32,480 --> 00:13:39,680
enough right but then it'll that in of

00:13:36,709 --> 00:13:42,829
itself is just a very automated thing

00:13:39,680 --> 00:13:45,680
you have done automated tests there's of

00:13:42,829 --> 00:13:47,000
course it was a manual testing in order

00:13:45,680 --> 00:13:48,510
to do many of testing you need to

00:13:47,000 --> 00:13:51,600
continuous delivery

00:13:48,510 --> 00:13:53,730
in various ways so there's two ways to

00:13:51,600 --> 00:13:54,990
go do continuous delivery there is this

00:13:53,730 --> 00:13:57,660
sort of testing delivery and then

00:13:54,990 --> 00:13:59,940
there's the recent delivery ideally they

00:13:57,660 --> 00:14:02,690
would be the same thing and that is

00:13:59,940 --> 00:14:05,810
where we are ultimately wanted to be

00:14:02,690 --> 00:14:10,380
right now we are now but they'll plans

00:14:05,810 --> 00:14:12,090
discussions start assembling so how is

00:14:10,380 --> 00:14:13,500
it relevant right now so we're doing

00:14:12,090 --> 00:14:16,380
continuous delivery where those are

00:14:13,500 --> 00:14:21,060
doing CI for for the packaging aspect

00:14:16,380 --> 00:14:24,660
there d of this film or perhaps not so

00:14:21,060 --> 00:14:28,080
obvious fingers we have built that carry

00:14:24,660 --> 00:14:30,320
which is our general kezi and it is

00:14:28,080 --> 00:14:32,430
integrating in a very liberal

00:14:30,320 --> 00:14:34,080
environment right we want to have our

00:14:32,430 --> 00:14:35,970
build succeeded not fail for weird

00:14:34,080 --> 00:14:38,460
reasons like missing dependencies of

00:14:35,970 --> 00:14:40,920
some obscure library and then we have to

00:14:38,460 --> 00:14:43,500
 the sysadmin to install the piece

00:14:40,920 --> 00:14:45,890
of software and whatnot and so it isn't

00:14:43,500 --> 00:14:48,090
generally very liberal and brand where's

00:14:45,890 --> 00:14:50,340
distribution package building happens in

00:14:48,090 --> 00:14:51,840
burien restrict environments most

00:14:50,340 --> 00:14:53,730
distributions in the packaging would

00:14:51,840 --> 00:14:55,020
have a very concise list of which

00:14:53,730 --> 00:14:57,540
dependencies are needed in order to

00:14:55,020 --> 00:14:59,040
build this package so there's a

00:14:57,540 --> 00:15:02,190
distribution level integration

00:14:59,040 --> 00:15:04,380
inspectors integrating prints on the

00:15:02,190 --> 00:15:06,720
distribution in a packaging sort of

00:15:04,380 --> 00:15:09,090
environment edits additional value as

00:15:06,720 --> 00:15:12,990
you have a tighter checks on things so

00:15:09,090 --> 00:15:15,000
you would detect things like if you use

00:15:12,990 --> 00:15:16,580
a new header and you're not looking for

00:15:15,000 --> 00:15:19,470
what everything provides that adam and

00:15:16,580 --> 00:15:21,330
most of the time one of our CIS is going

00:15:19,470 --> 00:15:23,280
to trip over it because the dependency

00:15:21,330 --> 00:15:26,330
for that header has not explicitly been

00:15:23,280 --> 00:15:28,470
declared I so that is one advantage

00:15:26,330 --> 00:15:31,040
arguably not the biggest one but it is a

00:15:28,470 --> 00:15:34,670
haunted nonetheless I think Martin

00:15:31,040 --> 00:15:37,740
highlighted this a couple of weeks here

00:15:34,670 --> 00:15:39,330
that Quinn in particular is currently

00:15:37,740 --> 00:15:41,340
having a lot of development with regards

00:15:39,330 --> 00:15:43,710
to Wayland and sometimes dependencies I

00:15:41,340 --> 00:15:45,510
get forgotten to be look for in seeming

00:15:43,710 --> 00:15:50,730
and distribution integration then

00:15:45,510 --> 00:15:52,980
highlights this and can enable must much

00:15:50,730 --> 00:15:57,510
faster faster integration

00:15:52,980 --> 00:16:00,870
an iteration on this issue right the

00:15:57,510 --> 00:16:03,720
bigger and in my opinion biggest

00:16:00,870 --> 00:16:07,529
advantage right now is that debian and

00:16:03,720 --> 00:16:11,540
to that extent ubuntu is doing ABI

00:16:07,529 --> 00:16:14,459
checks on the library's unlike katie

00:16:11,540 --> 00:16:17,130
unfortunately so what that means is when

00:16:14,459 --> 00:16:18,660
any one of you breaks a library breaks

00:16:17,130 --> 00:16:20,220
the binary interface of the library i

00:16:18,660 --> 00:16:22,079
will know i will know because my CI

00:16:20,220 --> 00:16:24,600
turns red and i get screamed at by my

00:16:22,079 --> 00:16:26,160
own tooling because library is not

00:16:24,600 --> 00:16:27,870
broken and then you will get an angry

00:16:26,160 --> 00:16:29,220
mail from me saying that your library is

00:16:27,870 --> 00:16:31,139
broken and it will tell you the commits

00:16:29,220 --> 00:16:33,930
that broke it and we tell you to fix it

00:16:31,139 --> 00:16:35,550
and so far i think there have been three

00:16:33,930 --> 00:16:38,130
instances where we actually were able to

00:16:35,550 --> 00:16:40,709
prevent binary incompatibility between

00:16:38,130 --> 00:16:43,709
frameworks releases thanks to that stuff

00:16:40,709 --> 00:16:45,120
so ideally I want to have this go into

00:16:43,709 --> 00:16:46,769
built up kitty because it's really

00:16:45,120 --> 00:16:48,420
awesome and it's pretty much

00:16:46,769 --> 00:16:49,980
quintessential and particularly this

00:16:48,420 --> 00:16:52,620
month monthly releases that we do

00:16:49,980 --> 00:16:54,510
frameworks that we have then we have

00:16:52,620 --> 00:16:58,589
tighter control and type verification of

00:16:54,510 --> 00:17:00,360
our avi I think it's one of them the key

00:16:58,589 --> 00:17:03,180
offerings of the framework is that we do

00:17:00,360 --> 00:17:05,520
not break comfortability so that is very

00:17:03,180 --> 00:17:07,679
important as very awesome and hope to

00:17:05,520 --> 00:17:12,299
talk with scholars she scholars about

00:17:07,679 --> 00:17:15,990
this in the book another thing and

00:17:12,299 --> 00:17:19,020
that's again it's good to have her it's

00:17:15,990 --> 00:17:21,780
not quintessential is verification of

00:17:19,020 --> 00:17:24,270
installation pops so for those of you

00:17:21,780 --> 00:17:26,429
don't know how complicated packaging

00:17:24,270 --> 00:17:30,059
works and we would have a number of

00:17:26,429 --> 00:17:31,830
packages generated by one source the way

00:17:30,059 --> 00:17:33,360
we know which files go into inch

00:17:31,830 --> 00:17:36,299
packages we would have a list of all the

00:17:33,360 --> 00:17:40,650
files that come out at compile time and

00:17:36,299 --> 00:17:44,429
allocate it to one packet or another if

00:17:40,650 --> 00:17:47,429
this list of files is strict enough then

00:17:44,429 --> 00:17:50,190
our integration will fail if you change

00:17:47,429 --> 00:17:51,780
the file path there's two reasons I want

00:17:50,190 --> 00:17:53,220
to have their happen first of all we

00:17:51,780 --> 00:17:56,220
want to know when you move file from one

00:17:53,220 --> 00:17:59,070
repository to another the other and

00:17:56,220 --> 00:18:01,410
perhaps more valuable Phineas we know

00:17:59,070 --> 00:18:04,670
when you accidentally break something

00:18:01,410 --> 00:18:07,650
has been a case with lose cute I believe

00:18:04,670 --> 00:18:11,040
recently where the installation

00:18:07,650 --> 00:18:13,200
destination was changed and some diverse

00:18:11,040 --> 00:18:15,540
file i believe was instantly to

00:18:13,200 --> 00:18:16,860
incorrect path and our say turned red

00:18:15,540 --> 00:18:19,860
because now the file is not here anymore

00:18:16,860 --> 00:18:21,750
haha so looks at it and yeah but then

00:18:19,860 --> 00:18:26,100
the destination was incorrect and that

00:18:21,750 --> 00:18:29,580
got resolved pretty good kitty any

00:18:26,100 --> 00:18:36,050
questions to the KDE advanced it alters

00:18:29,580 --> 00:18:38,820
the keys getting from this ok then

00:18:36,050 --> 00:18:40,170
there's a QA advantage for the

00:18:38,820 --> 00:18:45,330
distribution and there's a development

00:18:40,170 --> 00:18:47,640
advantage for the distribution so the

00:18:45,330 --> 00:18:50,250
problem with packaging is its if if you

00:18:47,640 --> 00:18:51,870
if it's like with kitty and we have 50

00:18:50,250 --> 00:18:53,280
frameworks each of these frameworks

00:18:51,870 --> 00:18:55,860
would have minimal changes that would

00:18:53,280 --> 00:18:57,390
have to be done to them right you would

00:18:55,860 --> 00:18:59,190
have to do that everyone so you would

00:18:57,390 --> 00:19:01,710
have to spend at least a day every month

00:18:59,190 --> 00:19:03,660
doing these changes I don't know about

00:19:01,710 --> 00:19:06,510
you but I don't really fancy spending a

00:19:03,660 --> 00:19:11,700
day doing weird packaging stuff for

00:19:06,510 --> 00:19:14,130
intelius and so continuous integration

00:19:11,700 --> 00:19:17,070
of stuff against our packaging enables

00:19:14,130 --> 00:19:18,780
us to do atomic changes right something

00:19:17,070 --> 00:19:20,250
would change in a KD repository the

00:19:18,780 --> 00:19:23,940
packaging gets adjusted the next day

00:19:20,250 --> 00:19:25,410
everything's green again ray and in

00:19:23,940 --> 00:19:27,930
addition to that we can of course do

00:19:25,410 --> 00:19:29,910
automated QA an excessive amount about

00:19:27,930 --> 00:19:31,350
you make you late if you introduce your

00:19:29,910 --> 00:19:33,480
new Simic dependency we will know about

00:19:31,350 --> 00:19:34,860
it because I have written a nice tool

00:19:33,480 --> 00:19:37,590
that complains if there's a missing

00:19:34,860 --> 00:19:41,190
similar dependency if it's optional cos

00:19:37,590 --> 00:19:43,620
it's required would fail anyway i also

00:19:41,190 --> 00:19:45,030
have a tooling that would check if i

00:19:43,620 --> 00:19:48,510
will cure my runtime dependencies are

00:19:45,030 --> 00:19:50,520
good there's a tooling then checks that

00:19:48,510 --> 00:19:53,250
all the files are actually installed

00:19:50,520 --> 00:19:55,890
into a package right as I was explaining

00:19:53,250 --> 00:19:58,350
we have these lists of files explain

00:19:55,890 --> 00:20:01,260
work where install files should go in

00:19:58,350 --> 00:20:03,360
the packaging we have checks for that

00:20:01,260 --> 00:20:05,430
and perhaps the most important one for

00:20:03,360 --> 00:20:06,860
us is actually the check that everything

00:20:05,430 --> 00:20:08,420
installs and

00:20:06,860 --> 00:20:11,450
can be upgraded and everything can be

00:20:08,420 --> 00:20:14,750
removed it and this a test that takes

00:20:11,450 --> 00:20:18,020
about one hour to complete and it's

00:20:14,750 --> 00:20:20,929
literally installing I think 600

00:20:18,020 --> 00:20:23,900
packages it's upgrading 600 packages and

00:20:20,929 --> 00:20:39,919
removing them again and yeah so that's

00:20:23,900 --> 00:20:43,220
cool stuff among buttons so you have

00:20:39,919 --> 00:20:46,160
testing of the builds checking that the

00:20:43,220 --> 00:20:47,960
packages contain what's your psycho well

00:20:46,160 --> 00:20:50,480
should be there what degree are you

00:20:47,960 --> 00:20:52,640
testing we have tests also check the

00:20:50,480 --> 00:20:53,780
functionality of solving your package

00:20:52,640 --> 00:20:58,370
like actually running the application

00:20:53,780 --> 00:21:00,530
checker yes where we currently don't I

00:20:58,370 --> 00:21:02,360
have been wanting to do it for the last

00:21:00,530 --> 00:21:06,830
six months but I haven't found the time

00:21:02,360 --> 00:21:09,470
that there's some provisioning for that

00:21:06,830 --> 00:21:11,780
so we can in theory do it and so the

00:21:09,470 --> 00:21:14,900
bills are all separated in in docker

00:21:11,780 --> 00:21:16,460
container so we can easily try to run an

00:21:14,900 --> 00:21:18,590
application right it's just a matter of

00:21:16,460 --> 00:21:21,679
a sort of setting up the environment

00:21:18,590 --> 00:21:23,600
like getting a minimum lady session as

00:21:21,679 --> 00:21:26,299
it were to rather than have to education

00:21:23,600 --> 00:21:29,150
start and see does it exit with zero for

00:21:26,299 --> 00:21:32,020
example so it's on that it's on the list

00:21:29,150 --> 00:21:32,020
but it's not currently

00:21:33,940 --> 00:21:38,950
initiating Alice just mentioned that

00:21:36,970 --> 00:21:41,440
coming are so I need to go in talk to

00:21:38,950 --> 00:21:44,440
the opensuse guys and see what's going

00:21:41,440 --> 00:21:46,450
on over there China was using the

00:21:44,440 --> 00:21:48,070
automated acceptance testing of the full

00:21:46,450 --> 00:21:57,789
of the sedation's all the graphical

00:21:48,070 --> 00:22:00,370
things and so on so this is pretty yeah

00:21:57,789 --> 00:22:03,059
yes so one thing that we definitely want

00:22:00,370 --> 00:22:05,350
to do long term is do testing of

00:22:03,059 --> 00:22:08,080
applications so what they I actually

00:22:05,350 --> 00:22:10,149
want to happen is to have someone figure

00:22:08,080 --> 00:22:11,620
out how to do application testing

00:22:10,149 --> 00:22:15,539
through the accessibility layers that we

00:22:11,620 --> 00:22:18,370
already have and then edit actual

00:22:15,539 --> 00:22:21,399
functional testing to the software right

00:22:18,370 --> 00:22:23,289
so we could have a cumulative be tested

00:22:21,399 --> 00:22:25,769
as basically and yeah so definitely

00:22:23,289 --> 00:22:25,769
something

00:22:36,249 --> 00:22:53,690
this arrow and never seen before and

00:22:43,940 --> 00:22:57,559
after earth because you don't let

00:22:53,690 --> 00:23:00,619
anything they actually like so and as we

00:22:57,559 --> 00:23:04,519
will perform on everything it makes us

00:23:00,619 --> 00:23:08,179
some students for some it's just

00:23:04,519 --> 00:23:15,619
pointless beautiful oh gee how far does

00:23:08,179 --> 00:23:18,799
this beautiful dreamer and just as

00:23:15,619 --> 00:23:22,650
beautiful as the richest and implemented

00:23:18,799 --> 00:23:31,950
and bail out on the Empire

00:23:22,650 --> 00:23:37,410
access video network issue sir yeah

00:23:31,950 --> 00:23:42,440
great n0 value but doesn't ever actually

00:23:37,410 --> 00:23:42,440
open to a candle real up wear sweats off

00:23:43,040 --> 00:24:01,230
because apparently at birth and the

00:23:47,270 --> 00:24:04,650
issue 5 I was very concerned that group

00:24:01,230 --> 00:24:07,260
I think that in general this sort of

00:24:04,650 --> 00:24:08,910
problems they shouldn't they are

00:24:07,260 --> 00:24:10,640
blockers but I don't think we should

00:24:08,910 --> 00:24:13,560
just give up because of them because

00:24:10,640 --> 00:24:15,450
testing is just so important this again

00:24:13,560 --> 00:24:33,240
Alex was saying yesterday feedback is

00:24:15,450 --> 00:24:35,570
incredibly important plan who shares the

00:24:33,240 --> 00:24:35,570
world

00:24:38,590 --> 00:24:47,300
there is not much to be shared to be

00:24:42,110 --> 00:24:49,450
honest so distribution packaging would

00:24:47,300 --> 00:24:52,340
always implement their own bill

00:24:49,450 --> 00:24:54,230
directive sort of right so they would

00:24:52,340 --> 00:24:58,400
call Simic somehow and they would call

00:24:54,230 --> 00:25:02,780
making so somehow so there isn't much to

00:24:58,400 --> 00:25:05,300
be shared their other than that QA wise

00:25:02,780 --> 00:25:08,540
I would like not to have a lot of

00:25:05,300 --> 00:25:10,640
overlap between a distributions here and

00:25:08,540 --> 00:25:12,620
the kiddies ideally a lot of the things

00:25:10,640 --> 00:25:14,120
that we are currently doing on the

00:25:12,620 --> 00:25:17,030
kubuntu see I for example should really

00:25:14,120 --> 00:25:18,590
be done on filtered heavy and so there

00:25:17,030 --> 00:25:21,170
isn't much that can be shared mapping

00:25:18,590 --> 00:25:23,840
but there's a continuous integration of

00:25:21,170 --> 00:25:26,230
some time and we will definitely talk

00:25:23,840 --> 00:25:26,230
about it

00:25:42,150 --> 00:25:46,780
it's all very well you say this I think

00:25:45,400 --> 00:25:50,740
it's maintained by the Linux Foundation

00:25:46,780 --> 00:25:55,470
it's called a bi compliance check ur a

00:25:50,740 --> 00:25:57,430
CC basalt and it does exactly that

00:25:55,470 --> 00:25:59,170
currently we are not actually using that

00:25:57,430 --> 00:26:02,410
we're using a debian specific solution

00:25:59,170 --> 00:26:04,120
it literally does pump all this old

00:26:02,410 --> 00:26:06,310
signatures of all the functions in the

00:26:04,120 --> 00:26:25,180
library into a file and then compare the

00:26:06,310 --> 00:26:34,630
route to the new version what do you

00:26:25,180 --> 00:26:38,310
mean by that that we here hex you all

00:26:34,630 --> 00:26:38,310
next week and you

00:26:38,549 --> 00:26:48,880
finally if you compile again Tuesday can

00:26:45,789 --> 00:27:03,010
be done i am not sure there's much point

00:26:48,880 --> 00:27:07,510
in it oh yes okay i don't see how that

00:27:03,010 --> 00:27:09,309
could happen but should someone

00:27:07,510 --> 00:27:11,020
preventively a present a reasonable

00:27:09,309 --> 00:27:24,460
argument for why we would want to have

00:27:11,020 --> 00:27:28,419
that done on the CI system then oh yes

00:27:24,460 --> 00:27:29,830
in a way no so the thing is the

00:27:28,419 --> 00:27:31,149
packaging of the sea air system is

00:27:29,830 --> 00:27:33,370
always ahead of what would be in the

00:27:31,149 --> 00:27:35,620
distribution right that's sort of the

00:27:33,370 --> 00:27:38,100
idea that you continuously integrate the

00:27:35,620 --> 00:27:40,149
packaging against what is in KD upstream

00:27:38,100 --> 00:27:44,380
so the packaging would always be

00:27:40,149 --> 00:27:46,090
different in the head of what is in the

00:27:44,380 --> 00:27:49,020
distribution actually we have three more

00:27:46,090 --> 00:27:49,020
minutes of questions

00:27:53,540 --> 00:28:03,180
is the status of window analysis

00:27:59,570 --> 00:28:07,050
platform that are coming there sorry for

00:28:03,180 --> 00:28:10,740
see shamu stickers into the air filters

00:28:07,050 --> 00:28:14,150
kitty I believe and so what we're doing

00:28:10,740 --> 00:28:16,410
is exclusive to linux packaging in a way

00:28:14,150 --> 00:28:17,820
and technically you could do the

00:28:16,410 --> 00:28:21,450
software do and you could technically do

00:28:17,820 --> 00:28:24,300
with any operating system and any unix

00:28:21,450 --> 00:28:26,960
distribution it's just windows pills for

00:28:24,300 --> 00:28:29,790
example since katie is essentially the

00:28:26,960 --> 00:28:34,340
distributor for windows it would make

00:28:29,790 --> 00:28:34,340
sense to have this done on filter Katie

00:28:34,850 --> 00:28:41,760
yeah same same for mobile for that

00:28:37,890 --> 00:29:05,940
matter um and be actual mobile stuff is

00:28:41,760 --> 00:29:08,100
a bit tricky anyway very short to create

00:29:05,940 --> 00:29:11,250
rules check our packages have to be

00:29:08,100 --> 00:29:13,500
officiant say we assume either said you

00:29:11,250 --> 00:29:17,460
first check for installation integration

00:29:13,500 --> 00:29:22,530
and we r is equal to Sigma operating in

00:29:17,460 --> 00:29:24,270
Africa we can wait currently integrating

00:29:22,530 --> 00:29:26,490
Linton we're not integrating the other

00:29:24,270 --> 00:29:28,230
ones for various reason but your soul

00:29:26,490 --> 00:29:33,330
Indian actually is also also adding

00:29:28,230 --> 00:29:35,520
value to KDE software it's essentially a

00:29:33,330 --> 00:29:37,440
static analyzer watched the packages and

00:29:35,520 --> 00:29:39,570
it also catches a lot of the issues that

00:29:37,440 --> 00:29:41,880
you would have in August rip software

00:29:39,570 --> 00:29:45,650
like your desktop file is incorrect or

00:29:41,880 --> 00:29:45,650
some stuff like that so

00:29:46,270 --> 00:29:50,540
it is so we have our own tooling for

00:29:49,130 --> 00:29:53,540
that which has mostly traditional

00:29:50,540 --> 00:29:57,470
reasons because of how long 30 days work

00:29:53,540 --> 00:30:00,980
our deal is with our way yes we are

00:29:57,470 --> 00:30:04,960
aware of it and we'll open it into okay

00:30:00,980 --> 00:30:04,960
we're out of time to thank you

00:30:13,059 --> 00:30:15,120

YouTube URL: https://www.youtube.com/watch?v=YX5Ekvm39VQ


