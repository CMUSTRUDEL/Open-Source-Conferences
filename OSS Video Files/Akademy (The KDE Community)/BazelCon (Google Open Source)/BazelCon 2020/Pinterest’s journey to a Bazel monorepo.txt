Title: Pinterest’s journey to a Bazel monorepo
Publication date: 2020-11-13
Playlist: BazelCon 2020
Description: 
	Pinterest started it's journey to Bazelization three years ago with our Cpp monorepo. Currently, we have separate Go and Cpp monorepos using Bazel. We are still migrating our Java repo to Bazel and will be starting on our Python/NodeJS repo soon. 
We are converging on a plan to have a multi language monorepo building with Bazel. Along the way to this goal we've identified a lot of open questions that need solving. How can you continually build deployment artifacts at scale using Bazel? How can you manage a single version for third party dependencies across hundreds of projects in the same WORKSPACE? How do you release versioned artifacts for Bazel in a language independent way? How much Bazel do repo contributors need to know? In this presentation, we discuss how Pinterest has answered these questions and more. 

Speaker: Eden JnBaptiste

Watch more:
BazelCon 2020 playlist → http://goo.gle/BazelCon2020

Subscribe to Google Open Source → http://goo.gle/GOpenSource

#bazelcon #bazel event: Bazelcon 2020; re_ty: Publish; product: Open Source - General; fullname: Eden JnBaptiste;
Captions: 
	00:00:01,040 --> 00:00:06,640
[Music]

00:00:05,839 --> 00:00:09,280
hello

00:00:06,640 --> 00:00:11,120
my name is eden john baptiste i work for

00:00:09,280 --> 00:00:12,480
the engineering productivity team at

00:00:11,120 --> 00:00:14,639
pinterest

00:00:12,480 --> 00:00:16,240
engineering productivity is a team

00:00:14,639 --> 00:00:16,880
responsible for making a developer

00:00:16,240 --> 00:00:19,279
platform

00:00:16,880 --> 00:00:20,560
that inspires developers to do their

00:00:19,279 --> 00:00:23,119
best work

00:00:20,560 --> 00:00:24,960
we do that through providing a fast safe

00:00:23,119 --> 00:00:25,680
and delightful path from an idea to

00:00:24,960 --> 00:00:28,320
production

00:00:25,680 --> 00:00:29,279
without worrying about infrastructure i

00:00:28,320 --> 00:00:30,720
specifically work

00:00:29,279 --> 00:00:32,960
on the build group of engineering

00:00:30,720 --> 00:00:35,360
productivity our charter is to release

00:00:32,960 --> 00:00:37,440
deployable artifacts

00:00:35,360 --> 00:00:40,480
today we're going to talk about the past

00:00:37,440 --> 00:00:42,480
present and future of basil at pinterest

00:00:40,480 --> 00:00:44,239
we will start with how we got to where

00:00:42,480 --> 00:00:46,559
we are with basil

00:00:44,239 --> 00:00:48,719
where we are with basil the specific

00:00:46,559 --> 00:00:49,920
challenges faced along the way

00:00:48,719 --> 00:00:51,760
and where we would like to go in the

00:00:49,920 --> 00:00:53,440
future

00:00:51,760 --> 00:00:55,600
i want to start by talking about the

00:00:53,440 --> 00:00:57,520
landscape that got us thinking about the

00:00:55,600 --> 00:00:59,199
switch to basil

00:00:57,520 --> 00:01:01,680
pinterest's engineering productivity

00:00:59,199 --> 00:01:02,320
team manages all repositories at the

00:01:01,680 --> 00:01:04,159
company

00:01:02,320 --> 00:01:06,240
and are responsible for the success of

00:01:04,159 --> 00:01:10,400
all artifact builds

00:01:06,240 --> 00:01:12,960
currently we have over 1365

00:01:10,400 --> 00:01:14,320
active repositories with an average of

00:01:12,960 --> 00:01:16,799
20 repositories

00:01:14,320 --> 00:01:17,759
being created a month by moving to a

00:01:16,799 --> 00:01:19,600
monorepo

00:01:17,759 --> 00:01:21,119
we can reduce the maintenance burden of

00:01:19,600 --> 00:01:23,439
managing such a large number of

00:01:21,119 --> 00:01:25,920
repositories

00:01:23,439 --> 00:01:26,960
of those repositories we have four

00:01:25,920 --> 00:01:29,920
high-priority

00:01:26,960 --> 00:01:31,040
language-based monorepos each of these

00:01:29,920 --> 00:01:33,040
repos contain

00:01:31,040 --> 00:01:34,159
many hundreds of projects and will

00:01:33,040 --> 00:01:37,200
produce from one

00:01:34,159 --> 00:01:37,600
to over 100 build artifacts with each

00:01:37,200 --> 00:01:40,799
run

00:01:37,600 --> 00:01:42,479
of the build pipeline before bazel each

00:01:40,799 --> 00:01:43,520
of these was running a different build

00:01:42,479 --> 00:01:45,920
system

00:01:43,520 --> 00:01:47,680
with bazel we can reduce the expertise

00:01:45,920 --> 00:01:51,600
needed by a build team

00:01:47,680 --> 00:01:53,200
to a single build system our java and

00:01:51,600 --> 00:01:55,119
python repositories

00:01:53,200 --> 00:01:57,040
are also producing a large number of

00:01:55,119 --> 00:01:59,439
mono artifacts

00:01:57,040 --> 00:02:01,119
mono artifacts are large executables

00:01:59,439 --> 00:02:02,079
that contain the code of multiple

00:02:01,119 --> 00:02:03,840
projects

00:02:02,079 --> 00:02:05,680
that are not necessarily related to each

00:02:03,840 --> 00:02:08,399
other the maintenance of these

00:02:05,680 --> 00:02:09,840
artifacts are shared by multiple teams

00:02:08,399 --> 00:02:12,879
making code migrations

00:02:09,840 --> 00:02:14,720
a large undertaking additionally unused

00:02:12,879 --> 00:02:17,440
code is getting deployed to hosts

00:02:14,720 --> 00:02:19,440
and creating a security risk with bazel

00:02:17,440 --> 00:02:20,319
we can produce much smaller artifacts

00:02:19,440 --> 00:02:22,160
easily

00:02:20,319 --> 00:02:24,480
we're also dealing with a lot of

00:02:22,160 --> 00:02:26,239
repository interdependencies

00:02:24,480 --> 00:02:28,640
the biggest challenge has been keeping

00:02:26,239 --> 00:02:30,800
our apache thrift service definitions

00:02:28,640 --> 00:02:32,160
in sync with our four language-based

00:02:30,800 --> 00:02:34,560
monorepos

00:02:32,160 --> 00:02:36,720
when a new thrift schema change comes in

00:02:34,560 --> 00:02:39,120
we must generate new artifacts

00:02:36,720 --> 00:02:42,239
in each language these artifacts are

00:02:39,120 --> 00:02:43,920
then incorporated into each repository

00:02:42,239 --> 00:02:45,680
the feedback loop for finding out that

00:02:43,920 --> 00:02:46,720
there is a problem with an artifact

00:02:45,680 --> 00:02:49,519
generated

00:02:46,720 --> 00:02:51,120
from the thrift schema change is long

00:02:49,519 --> 00:02:53,120
having all of our code in a single

00:02:51,120 --> 00:02:54,080
repository would help to reduce that

00:02:53,120 --> 00:02:57,040
time

00:02:54,080 --> 00:02:58,720
so in summary the four main reasons for

00:02:57,040 --> 00:03:02,000
our switch to a bazel model repo

00:02:58,720 --> 00:03:04,640
are one the large number of small

00:03:02,000 --> 00:03:06,400
repositories we needed to manage

00:03:04,640 --> 00:03:08,560
moving to a monorepo would allow us to

00:03:06,400 --> 00:03:11,040
reduce the maintenance burden

00:03:08,560 --> 00:03:13,280
two the various different build systems

00:03:11,040 --> 00:03:15,120
we needed to have expertise in

00:03:13,280 --> 00:03:17,280
moving to bazel reduces the number of

00:03:15,120 --> 00:03:20,080
technologies we need to learn

00:03:17,280 --> 00:03:22,640
three the prevalence of mono artifacts

00:03:20,080 --> 00:03:24,640
making code isolation difficult

00:03:22,640 --> 00:03:26,239
moving to bazel will allow us to produce

00:03:24,640 --> 00:03:28,959
smaller artifacts

00:03:26,239 --> 00:03:30,080
and four the large number of cross repo

00:03:28,959 --> 00:03:32,959
dependencies

00:03:30,080 --> 00:03:34,080
this adds code synchronicity challenges

00:03:32,959 --> 00:03:36,560
with a mono repo

00:03:34,080 --> 00:03:39,040
the feedback loop for dependency changes

00:03:36,560 --> 00:03:41,200
is reduced

00:03:39,040 --> 00:03:42,400
at the moment we have fully migrated our

00:03:41,200 --> 00:03:45,280
go and c

00:03:42,400 --> 00:03:46,400
repositories our go repository is

00:03:45,280 --> 00:03:48,959
averaging

00:03:46,400 --> 00:03:50,319
32 daily commits from 80 monthly

00:03:48,959 --> 00:03:53,120
contributors

00:03:50,319 --> 00:03:55,439
and our c plus repository is averaging

00:03:53,120 --> 00:03:57,200
16 daily commits from 60 monthly

00:03:55,439 --> 00:03:59,280
contributors

00:03:57,200 --> 00:04:00,879
we've almost completely migrated our

00:03:59,280 --> 00:04:03,599
java repository

00:04:00,879 --> 00:04:06,000
this mixed repository is averaging 80

00:04:03,599 --> 00:04:07,280
daily commits from 250 monthly

00:04:06,000 --> 00:04:08,640
contributors

00:04:07,280 --> 00:04:10,720
it is one of our most active

00:04:08,640 --> 00:04:11,519
repositories and has been a challenge to

00:04:10,720 --> 00:04:14,239
migrate

00:04:11,519 --> 00:04:15,760
because of the amount of activity we

00:04:14,239 --> 00:04:19,519
plan to start migrating

00:04:15,760 --> 00:04:21,840
our python repository sometime next year

00:04:19,519 --> 00:04:22,639
this repository is by far our most

00:04:21,840 --> 00:04:26,840
active

00:04:22,639 --> 00:04:28,000
with 250 daily commits from 500 monthly

00:04:26,840 --> 00:04:29,919
contributors

00:04:28,000 --> 00:04:31,919
all of our repositories are currently

00:04:29,919 --> 00:04:33,759
running different versions of bazel

00:04:31,919 --> 00:04:35,199
so one of our next challenges will be

00:04:33,759 --> 00:04:37,040
keeping the bazel version

00:04:35,199 --> 00:04:38,639
up to date and in sync on these

00:04:37,040 --> 00:04:40,000
repositories

00:04:38,639 --> 00:04:42,160
now i'd like to talk about the

00:04:40,000 --> 00:04:42,880
challenges we faced on the way to this

00:04:42,160 --> 00:04:45,280
point

00:04:42,880 --> 00:04:46,880
and the challenges we are still facing

00:04:45,280 --> 00:04:49,280
i'll be focusing on challenges

00:04:46,880 --> 00:04:51,440
transitioning our java repository

00:04:49,280 --> 00:04:53,280
because it is still in transition and

00:04:51,440 --> 00:04:56,800
was our most difficult to migrate

00:04:53,280 --> 00:04:59,120
to date our java repository

00:04:56,800 --> 00:05:00,160
was by far our most active repo to

00:04:59,120 --> 00:05:02,320
migrate

00:05:00,160 --> 00:05:03,600
we started this migration in september

00:05:02,320 --> 00:05:05,520
00:05:03,600 --> 00:05:06,960
and we're about 90 done with this

00:05:05,520 --> 00:05:08,560
migration

00:05:06,960 --> 00:05:10,720
this repository contains some of our

00:05:08,560 --> 00:05:12,479
most important projects at pinterest

00:05:10,720 --> 00:05:14,720
and with a lot of future work happening

00:05:12,479 --> 00:05:16,160
on these projects we could not get on

00:05:14,720 --> 00:05:19,199
the roadmap for every team

00:05:16,160 --> 00:05:21,120
to do an all at once migration in order

00:05:19,199 --> 00:05:21,759
to accomplish this we needed to migrate

00:05:21,120 --> 00:05:25,199
to bazel

00:05:21,759 --> 00:05:26,320
in phases in order to migrate in a

00:05:25,199 --> 00:05:28,320
phased way

00:05:26,320 --> 00:05:30,639
we needed to be able to run two build

00:05:28,320 --> 00:05:32,639
systems at a time

00:05:30,639 --> 00:05:33,840
we took advantage of bazel's ability to

00:05:32,639 --> 00:05:37,120
coexist with maven

00:05:33,840 --> 00:05:39,039
to accomplish this as you can see here

00:05:37,120 --> 00:05:41,440
we're able to keep our build files and

00:05:39,039 --> 00:05:43,440
palm files together

00:05:41,440 --> 00:05:45,360
since we could not get on the roadmap of

00:05:43,440 --> 00:05:47,520
a lot of teams to do this transition

00:05:45,360 --> 00:05:49,120
with them we had to either do this

00:05:47,520 --> 00:05:50,840
transition for them

00:05:49,120 --> 00:05:52,160
or make it easier for them to do

00:05:50,840 --> 00:05:55,039
themselves

00:05:52,160 --> 00:05:57,120
to that end my co-worker arun prasad

00:05:55,039 --> 00:05:58,160
created a script to automatically create

00:05:57,120 --> 00:06:00,240
build files

00:05:58,160 --> 00:06:01,680
and generate dependencies for a java

00:06:00,240 --> 00:06:04,080
project

00:06:01,680 --> 00:06:05,360
this script combined the best features

00:06:04,080 --> 00:06:08,240
of buildafire

00:06:05,360 --> 00:06:10,639
bulldozer and unused depths into our

00:06:08,240 --> 00:06:12,960
script called bazelize

00:06:10,639 --> 00:06:14,880
this script can either generate build

00:06:12,960 --> 00:06:17,680
files for each java package

00:06:14,880 --> 00:06:20,319
or one large top-level build file for

00:06:17,680 --> 00:06:22,960
all of the packages

00:06:20,319 --> 00:06:24,720
bazel eyes helped our users get up and

00:06:22,960 --> 00:06:26,400
running with bazel

00:06:24,720 --> 00:06:27,840
but most were not sure what to do from

00:06:26,400 --> 00:06:29,680
this point

00:06:27,840 --> 00:06:31,680
when they needed to make a change they

00:06:29,680 --> 00:06:34,160
needed to understand too much of the

00:06:31,680 --> 00:06:36,080
build infrastructure and bazel

00:06:34,160 --> 00:06:37,680
as i said before some of pinterest's

00:06:36,080 --> 00:06:39,919
most important projects

00:06:37,680 --> 00:06:40,960
are in our java repository and these

00:06:39,919 --> 00:06:42,720
contributors

00:06:40,960 --> 00:06:44,960
have little time to understand the

00:06:42,720 --> 00:06:46,720
intricacies of a build system

00:06:44,960 --> 00:06:49,039
they needed a much simpler way to

00:06:46,720 --> 00:06:50,960
interact with our system

00:06:49,039 --> 00:06:53,280
to simplify the boundary between

00:06:50,960 --> 00:06:54,319
repository contributor and repository

00:06:53,280 --> 00:06:57,120
maintainer

00:06:54,319 --> 00:06:58,479
we created a developer contract my

00:06:57,120 --> 00:06:59,840
colleague urbashi reddy

00:06:58,479 --> 00:07:02,080
is also giving a talk this year at

00:06:59,840 --> 00:07:04,560
bazacon and we'll dive deeper into

00:07:02,080 --> 00:07:06,000
this topic for now i'll give a brief

00:07:04,560 --> 00:07:08,960
summary

00:07:06,000 --> 00:07:10,960
we created custom bazel rules and macros

00:07:08,960 --> 00:07:13,360
along with existing rules to define

00:07:10,960 --> 00:07:14,800
artifacts users would like to produce

00:07:13,360 --> 00:07:16,240
and where they would like to deploy

00:07:14,800 --> 00:07:19,120
those artifacts

00:07:16,240 --> 00:07:20,400
for example we have specific rules that

00:07:19,120 --> 00:07:22,800
allow you to create

00:07:20,400 --> 00:07:23,440
a docker image that will be registered

00:07:22,800 --> 00:07:26,240
with either

00:07:23,440 --> 00:07:28,800
our kubernetes deploy system or our

00:07:26,240 --> 00:07:31,919
virtual machine deploy system

00:07:28,800 --> 00:07:34,479
here we are creating a container image

00:07:31,919 --> 00:07:36,880
and our custom container release rule

00:07:34,479 --> 00:07:39,680
can register this image with both our

00:07:36,880 --> 00:07:41,039
kubernetes deploy system and our virtual

00:07:39,680 --> 00:07:45,199
machine deploy system

00:07:41,039 --> 00:07:46,639
called teletrain we are also able to

00:07:45,199 --> 00:07:48,560
create a debian package

00:07:46,639 --> 00:07:50,720
that can be distributed to configured

00:07:48,560 --> 00:07:53,120
hosts through puppet

00:07:50,720 --> 00:07:54,560
in this example we are packaging the

00:07:53,120 --> 00:07:57,759
code using the package

00:07:54,560 --> 00:07:59,440
dev role our custom release rule

00:07:57,759 --> 00:08:01,120
will make this package available for

00:07:59,440 --> 00:08:04,960
distribution to hosts

00:08:01,120 --> 00:08:07,199
using puppet lastly

00:08:04,960 --> 00:08:09,840
we can package a data job that will be

00:08:07,199 --> 00:08:12,879
registered with our workflow system

00:08:09,840 --> 00:08:14,800
the job is a simple deploy jar and our

00:08:12,879 --> 00:08:16,960
custom hadoop release rule

00:08:14,800 --> 00:08:18,960
will make it available for consumption

00:08:16,960 --> 00:08:21,199
by the workflow system

00:08:18,960 --> 00:08:23,680
we created a new build pipeline to

00:08:21,199 --> 00:08:26,160
support these new release roles

00:08:23,680 --> 00:08:26,879
here you can see that when a new commit

00:08:26,160 --> 00:08:29,120
comes in

00:08:26,879 --> 00:08:30,319
we will first calculate which files were

00:08:29,120 --> 00:08:32,560
changed

00:08:30,319 --> 00:08:35,279
then figure out which rules need to be

00:08:32,560 --> 00:08:37,519
rerun based on the files changed

00:08:35,279 --> 00:08:39,120
we will run the appropriate test rules

00:08:37,519 --> 00:08:41,360
for the changed files

00:08:39,120 --> 00:08:42,399
and then we will do a test run of the

00:08:41,360 --> 00:08:45,680
release rules

00:08:42,399 --> 00:08:47,440
before running our release roles these

00:08:45,680 --> 00:08:48,240
release roles create the deployable

00:08:47,440 --> 00:08:49,839
artifacts

00:08:48,240 --> 00:08:51,680
and save them to the appropriate

00:08:49,839 --> 00:08:53,760
locations and notify

00:08:51,680 --> 00:08:56,640
the appropriate deployment systems of

00:08:53,760 --> 00:08:58,959
the availability of new artifacts

00:08:56,640 --> 00:09:00,399
the simplification has made it easier

00:08:58,959 --> 00:09:02,480
for repro contributors

00:09:00,399 --> 00:09:04,800
to only be minimally concerned with the

00:09:02,480 --> 00:09:07,360
build architecture of their code

00:09:04,800 --> 00:09:09,120
it also allows them to only need to know

00:09:07,360 --> 00:09:10,160
how to interact with the build system in

00:09:09,120 --> 00:09:12,240
one way

00:09:10,160 --> 00:09:14,080
from their perspective they only need to

00:09:12,240 --> 00:09:14,959
know what they want to do with their

00:09:14,080 --> 00:09:16,800
code

00:09:14,959 --> 00:09:18,320
from our perspective there was a lot of

00:09:16,800 --> 00:09:18,959
infrastructure involved in pulling this

00:09:18,320 --> 00:09:20,800
off

00:09:18,959 --> 00:09:22,399
i advise you to go and watch irvashi's

00:09:20,800 --> 00:09:24,080
talk to learn more about the

00:09:22,399 --> 00:09:26,320
implementation of the system

00:09:24,080 --> 00:09:28,080
and how we plan on integrating this in

00:09:26,320 --> 00:09:29,279
all four of our language-based model

00:09:28,080 --> 00:09:31,600
repos

00:09:29,279 --> 00:09:33,760
the repo contributors were used to a lot

00:09:31,600 --> 00:09:36,080
of isolation afforded to them

00:09:33,760 --> 00:09:37,519
through their maven palm files they were

00:09:36,080 --> 00:09:38,640
previously allowed to define their

00:09:37,519 --> 00:09:40,399
dependencies

00:09:38,640 --> 00:09:42,480
independent of what everyone else was

00:09:40,399 --> 00:09:43,440
doing with the switch to bazel we

00:09:42,480 --> 00:09:45,440
decided to go

00:09:43,440 --> 00:09:47,920
to one workspace to simplify version

00:09:45,440 --> 00:09:49,920
conflicts and runtime errors

00:09:47,920 --> 00:09:51,839
unfortunately with the phase approach

00:09:49,920 --> 00:09:53,920
came an unforeseen challenge

00:09:51,839 --> 00:09:56,080
those who migrated first were able to

00:09:53,920 --> 00:09:59,279
define the third party dependencies

00:09:56,080 --> 00:10:01,200
used in the workspace for most projects

00:09:59,279 --> 00:10:02,959
this involved minor code changes to get

00:10:01,200 --> 00:10:04,320
it working with whatever version was in

00:10:02,959 --> 00:10:06,560
the repository

00:10:04,320 --> 00:10:08,160
but for others this meant large blockers

00:10:06,560 --> 00:10:09,760
for the project

00:10:08,160 --> 00:10:11,920
we have allowed our users to create

00:10:09,760 --> 00:10:13,279
dependency version exceptions

00:10:11,920 --> 00:10:15,279
when they need to use a different

00:10:13,279 --> 00:10:17,440
version of a dependency due to a

00:10:15,279 --> 00:10:19,040
critical blocker

00:10:17,440 --> 00:10:21,040
you can see here that the main

00:10:19,040 --> 00:10:24,079
repository version of guava

00:10:21,040 --> 00:10:26,000
is 20.0 but a team needed to use an

00:10:24,079 --> 00:10:27,279
older version for a short time

00:10:26,000 --> 00:10:29,200
as they made changes to their

00:10:27,279 --> 00:10:30,160
infrastructure to support the newer

00:10:29,200 --> 00:10:34,480
version

00:10:30,160 --> 00:10:36,640
so an exception was made for 16.0.1

00:10:34,480 --> 00:10:37,519
we do recognize that this should be used

00:10:36,640 --> 00:10:39,200
with caution

00:10:37,519 --> 00:10:40,720
as it could lead to runtime conflicts

00:10:39,200 --> 00:10:43,200
independent code

00:10:40,720 --> 00:10:44,959
because of this owners of dependent code

00:10:43,200 --> 00:10:46,240
work together with everyone in the

00:10:44,959 --> 00:10:48,720
dependency graph

00:10:46,240 --> 00:10:49,360
to use the same version and these code

00:10:48,720 --> 00:10:51,680
exceptions

00:10:49,360 --> 00:10:53,680
are meant to be short-lived one of the

00:10:51,680 --> 00:10:55,360
biggest requests we get from users is

00:10:53,680 --> 00:10:56,640
the ability to support provided

00:10:55,360 --> 00:10:58,880
dependencies

00:10:56,640 --> 00:11:00,160
this was particularly requested by our

00:10:58,880 --> 00:11:03,040
hadoop infrastructure

00:11:00,160 --> 00:11:03,760
team where the jobs in the java repo

00:11:03,040 --> 00:11:05,519
would be run

00:11:03,760 --> 00:11:08,240
on the platform where the hadoop

00:11:05,519 --> 00:11:10,399
dependency would be provided

00:11:08,240 --> 00:11:12,079
we do discourage our repo contributors

00:11:10,399 --> 00:11:13,760
from creating an environment

00:11:12,079 --> 00:11:15,920
where the code is built with one set of

00:11:13,760 --> 00:11:17,519
dependencies and run on a different set

00:11:15,920 --> 00:11:19,519
of dependencies

00:11:17,519 --> 00:11:22,320
for this reason we have not built in

00:11:19,519 --> 00:11:24,880
support for provided dependencies

00:11:22,320 --> 00:11:25,760
however because there are dependencies

00:11:24,880 --> 00:11:27,920
that may exist

00:11:25,760 --> 00:11:29,680
on the host that could collide with the

00:11:27,920 --> 00:11:32,000
dependencies in the jar

00:11:29,680 --> 00:11:34,000
we have created a custom rule to create

00:11:32,000 --> 00:11:36,320
a shaded jar

00:11:34,000 --> 00:11:38,880
in this example we'll package all of

00:11:36,320 --> 00:11:41,360
these dependencies into the same jar

00:11:38,880 --> 00:11:42,000
we will then rename all classes in sub

00:11:41,360 --> 00:11:45,519
packages

00:11:42,000 --> 00:11:48,160
under com.google.auto.comman

00:11:45,519 --> 00:11:48,160
to start with

00:11:48,920 --> 00:11:54,160
com.pinterest.shaded.auto.common instead

00:11:51,920 --> 00:11:56,160
if there is a collision on the host this

00:11:54,160 --> 00:11:56,800
is a workaround that will help resolve

00:11:56,160 --> 00:11:58,399
the issue

00:11:56,800 --> 00:11:59,839
until the host environment can be

00:11:58,399 --> 00:12:02,160
corrected

00:11:59,839 --> 00:12:04,560
one challenge we are still facing is

00:12:02,160 --> 00:12:06,639
upgrading third-party dependencies

00:12:04,560 --> 00:12:08,560
right now when a user needs to use a

00:12:06,639 --> 00:12:10,079
newer version of a dependency or if

00:12:08,560 --> 00:12:12,480
security requires us

00:12:10,079 --> 00:12:13,839
to upgrade a dependency the process is

00:12:12,480 --> 00:12:16,320
quite manual

00:12:13,839 --> 00:12:17,920
we will need to create an exception for

00:12:16,320 --> 00:12:20,160
the new dependency

00:12:17,920 --> 00:12:22,000
identify all targets that are using the

00:12:20,160 --> 00:12:24,000
old dependency

00:12:22,000 --> 00:12:26,639
move projects in the same dependency

00:12:24,000 --> 00:12:29,200
graph to the new dependency

00:12:26,639 --> 00:12:30,720
build the artifact and test that the

00:12:29,200 --> 00:12:32,320
artifact is running properly in

00:12:30,720 --> 00:12:34,480
production

00:12:32,320 --> 00:12:36,560
this process is extremely manual and

00:12:34,480 --> 00:12:38,639
requires a lot of coordination

00:12:36,560 --> 00:12:39,600
and puts our repository into a very

00:12:38,639 --> 00:12:42,240
fragile state

00:12:39,600 --> 00:12:43,120
until it is complete for our next

00:12:42,240 --> 00:12:45,200
project

00:12:43,120 --> 00:12:47,040
we'll be building a solution to make

00:12:45,200 --> 00:12:47,920
upgrading dependency version simpler for

00:12:47,040 --> 00:12:51,360
ourselves

00:12:47,920 --> 00:12:53,360
and our users i mentioned briefly before

00:12:51,360 --> 00:12:54,800
that we have a number of artifacts that

00:12:53,360 --> 00:12:55,839
are produced from our java build

00:12:54,800 --> 00:12:57,920
pipeline

00:12:55,839 --> 00:12:59,279
including debian packages and docker

00:12:57,920 --> 00:13:01,440
images

00:12:59,279 --> 00:13:03,200
right now we have different solutions

00:13:01,440 --> 00:13:04,560
based on what type of artifact we are

00:13:03,200 --> 00:13:07,519
storing

00:13:04,560 --> 00:13:08,880
our container images are stored in ecr

00:13:07,519 --> 00:13:11,600
and our debian packages

00:13:08,880 --> 00:13:13,200
are stored in artifactory in our java

00:13:11,600 --> 00:13:15,680
repository however

00:13:13,200 --> 00:13:17,360
switching from maven as our build system

00:13:15,680 --> 00:13:20,079
meant we needed a way to produce

00:13:17,360 --> 00:13:21,440
jars that could be downloaded for use in

00:13:20,079 --> 00:13:23,120
other applications

00:13:21,440 --> 00:13:24,959
without storing them in the maven

00:13:23,120 --> 00:13:26,800
central repository

00:13:24,959 --> 00:13:29,519
the use case where this is most

00:13:26,800 --> 00:13:31,279
prevalent is our hadoop jobs

00:13:29,519 --> 00:13:33,760
these jobs are produced without palm

00:13:31,279 --> 00:13:35,680
files and need to be stored in a place

00:13:33,760 --> 00:13:37,600
that can be retrieved by our workflow

00:13:35,680 --> 00:13:39,760
platform

00:13:37,600 --> 00:13:41,440
to accomplish this we are storing these

00:13:39,760 --> 00:13:44,480
artifacts in s3

00:13:41,440 --> 00:13:45,279
with a custom versioning schema as you

00:13:44,480 --> 00:13:47,360
can see here

00:13:45,279 --> 00:13:50,480
artifacts produced by the hadoop release

00:13:47,360 --> 00:13:53,600
rule are stored in a special s3 bucket

00:13:50,480 --> 00:13:55,920
under the commit sha that generated it

00:13:53,600 --> 00:13:57,279
with a generated version number and the

00:13:55,920 --> 00:13:58,880
jar name

00:13:57,279 --> 00:14:00,959
in the future we would like to store

00:13:58,880 --> 00:14:03,040
most artifacts in a single place

00:14:00,959 --> 00:14:04,880
and we are looking into artifactory as

00:14:03,040 --> 00:14:06,880
our storage solution to take advantage

00:14:04,880 --> 00:14:08,959
of their burgeoning features

00:14:06,880 --> 00:14:10,560
now i'd like to discuss where we hope to

00:14:08,959 --> 00:14:12,480
go in the future

00:14:10,560 --> 00:14:14,720
we are only in the middle of our journey

00:14:12,480 --> 00:14:16,560
as we refine how we will use bazel to

00:14:14,720 --> 00:14:18,000
help us manage our build and release

00:14:16,560 --> 00:14:19,839
infrastructure

00:14:18,000 --> 00:14:21,279
we've learned a lot and have identified

00:14:19,839 --> 00:14:23,839
a lot of things we could be doing

00:14:21,279 --> 00:14:26,079
differently in the future

00:14:23,839 --> 00:14:28,399
our next big migration will be moving

00:14:26,079 --> 00:14:30,000
our python monorepo to basil

00:14:28,399 --> 00:14:32,399
this is by far our most active

00:14:30,000 --> 00:14:34,240
repository and we will want to have our

00:14:32,399 --> 00:14:35,600
migration strategy refined before we

00:14:34,240 --> 00:14:37,760
begin

00:14:35,600 --> 00:14:39,440
first we'll need to make sure we move

00:14:37,760 --> 00:14:42,079
faster with this migration

00:14:39,440 --> 00:14:44,160
to that end we'll need to build in more

00:14:42,079 --> 00:14:45,440
tools for automatically migrating to the

00:14:44,160 --> 00:14:47,360
new build system

00:14:45,440 --> 00:14:49,360
so it's a seamless experience for our

00:14:47,360 --> 00:14:51,120
contributors

00:14:49,360 --> 00:14:52,959
we'll also look into the best ways for

00:14:51,120 --> 00:14:56,880
keeping our python development

00:14:52,959 --> 00:14:59,440
and runtime environments hermetic

00:14:56,880 --> 00:15:01,600
in addition to our python migration we

00:14:59,440 --> 00:15:02,800
want to experiment with multi-workspace

00:15:01,600 --> 00:15:05,360
configurations

00:15:02,800 --> 00:15:07,120
to give our users more flexibility and

00:15:05,360 --> 00:15:08,560
isolation with their third-party

00:15:07,120 --> 00:15:10,560
dependencies

00:15:08,560 --> 00:15:13,279
they can own these dependency versions

00:15:10,560 --> 00:15:15,680
and resolve conflicts on their own

00:15:13,279 --> 00:15:18,240
we also theorize that this will make our

00:15:15,680 --> 00:15:21,120
third-party dependency upgrades faster

00:15:18,240 --> 00:15:23,519
by upgrading smaller related code groups

00:15:21,120 --> 00:15:25,440
together

00:15:23,519 --> 00:15:28,399
we will also be automating our bazel

00:15:25,440 --> 00:15:30,240
version upgrades on our repositories

00:15:28,399 --> 00:15:31,839
we'll be building in new automatic

00:15:30,240 --> 00:15:33,680
repository validation

00:15:31,839 --> 00:15:35,040
to ensure that version upgrades don't

00:15:33,680 --> 00:15:38,000
break our code or

00:15:35,040 --> 00:15:38,399
our pipelines to keep our version up to

00:15:38,000 --> 00:15:40,160
date

00:15:38,399 --> 00:15:43,120
we'll also be looking into incorporating

00:15:40,160 --> 00:15:45,519
basilisk into our infrastructure

00:15:43,120 --> 00:15:48,480
lastly we'll be working towards our end

00:15:45,519 --> 00:15:50,320
goal of moving to a single mono repo

00:15:48,480 --> 00:15:51,759
we have already started moving our own

00:15:50,320 --> 00:15:54,480
team's internal code

00:15:51,759 --> 00:15:56,480
into a multi-language monorepo and we

00:15:54,480 --> 00:15:57,440
will be expanding this to other teams as

00:15:56,480 --> 00:16:00,320
we nail down

00:15:57,440 --> 00:16:01,759
our repository configuration strategy

00:16:00,320 --> 00:16:03,600
i'd like to thank you all for taking the

00:16:01,759 --> 00:16:05,440
time to listen to my presentation

00:16:03,600 --> 00:16:07,600
and i'd also like to thank all the bazel

00:16:05,440 --> 00:16:09,759
con organizers for putting this on

00:16:07,600 --> 00:16:12,000
if you have any questions please feel

00:16:09,759 --> 00:16:23,839
free to reach out to me at pinterest

00:16:12,000 --> 00:16:23,839

YouTube URL: https://www.youtube.com/watch?v=r5KHQnS6uP8


