Title: BazelCon 2018 Day 1: Fork, PR and Merge
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	Lessons from 2+ years of Bazel hacking
George Gensure (Uber) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: George Gensure;
Captions: 
	00:00:03,109 --> 00:00:09,240
so last year I I started pret I think I

00:00:08,189 --> 00:00:12,150
might have been the only remote

00:00:09,240 --> 00:00:14,370
execution presentation so this year I

00:00:12,150 --> 00:00:15,929
had and you know obviously we have a ton

00:00:14,370 --> 00:00:19,260
of remote execution presentations all

00:00:15,929 --> 00:00:21,180
day going on including both Google

00:00:19,260 --> 00:00:24,150
internal and third-party so I decided to

00:00:21,180 --> 00:00:25,530
buck the trend and give you an

00:00:24,150 --> 00:00:27,410
opportunity to hear a little bit about a

00:00:25,530 --> 00:00:31,470
war story associated with how we

00:00:27,410 --> 00:00:34,440
uber specifically at the ATG moved from

00:00:31,470 --> 00:00:37,170
an existing build system into Basel and

00:00:34,440 --> 00:00:38,879
to give you some impression of what the

00:00:37,170 --> 00:00:42,179
challenges and what the costs were

00:00:38,879 --> 00:00:43,649
associated with doing that this is also

00:00:42,179 --> 00:00:45,839
gonna have a little bit of a community

00:00:43,649 --> 00:00:47,730
slant what I want to preface the whole

00:00:45,839 --> 00:00:50,239
thing with is that the basel community

00:00:47,730 --> 00:00:52,050
at large including david and including

00:00:50,239 --> 00:00:53,339
specifically members of the remote

00:00:52,050 --> 00:00:54,989
execution team because they've been

00:00:53,339 --> 00:00:56,550
working with me for over the past year

00:00:54,989 --> 00:00:58,289
to develop build farm and to develop

00:00:56,550 --> 00:01:02,100
other tools they have all been immensely

00:00:58,289 --> 00:01:05,670
helpful in terms of both weeding out

00:01:02,100 --> 00:01:07,590
problems dealing with issues getting my

00:01:05,670 --> 00:01:09,630
code accepted into the basel core repo

00:01:07,590 --> 00:01:11,549
and obviously reviewing things inside of

00:01:09,630 --> 00:01:12,740
build forums so number one i want to

00:01:11,549 --> 00:01:21,180
give them a round of applause because

00:01:12,740 --> 00:01:24,240
they're they're great so our objective

00:01:21,180 --> 00:01:27,149
here in this talk is to try to give you

00:01:24,240 --> 00:01:30,750
some sense of what we went through to

00:01:27,149 --> 00:01:32,159
get basel adopted sort of the the

00:01:30,750 --> 00:01:34,680
hammers and chisels that we applied to

00:01:32,159 --> 00:01:38,000
that situation and essentially what we

00:01:34,680 --> 00:01:40,710
came up with in terms of cost for

00:01:38,000 --> 00:01:43,049
maintaining that going forward and we

00:01:40,710 --> 00:01:46,159
have an ongoing cost we have a maintain

00:01:43,049 --> 00:01:48,060
we have the duty of maintaining our

00:01:46,159 --> 00:01:49,380
significant number of developers with

00:01:48,060 --> 00:01:52,740
their significant number of builds on a

00:01:49,380 --> 00:01:54,240
daily basis and specifically we wanted

00:01:52,740 --> 00:01:56,640
to contribute that stuff back to basel

00:01:54,240 --> 00:01:58,649
because we utilize this tool we want

00:01:56,640 --> 00:02:00,539
that stuff to be persistent and we also

00:01:58,649 --> 00:02:02,369
would like to reduce that burden over

00:02:00,539 --> 00:02:04,890
time in terms of maintaining that

00:02:02,369 --> 00:02:06,600
software so we're gonna go through a

00:02:04,890 --> 00:02:08,970
little bit of discussion today i

00:02:06,600 --> 00:02:11,640
apologize my slides aren't nearly it's

00:02:08,970 --> 00:02:14,209
nicely formatted or as as as brightly

00:02:11,640 --> 00:02:16,270
essentially it is everybody else's but

00:02:14,209 --> 00:02:18,160
we'll cover a couple

00:02:16,270 --> 00:02:21,010
these topics I'm gonna read them off the

00:02:18,160 --> 00:02:23,140
first is our use case at the ATG we have

00:02:21,010 --> 00:02:25,540
a large build with a comparable large

00:02:23,140 --> 00:02:27,850
set of third-party input dependencies

00:02:25,540 --> 00:02:30,190
and this presented its own problems most

00:02:27,850 --> 00:02:32,140
notably from the start we utilized local

00:02:30,190 --> 00:02:35,680
repository if anybody is using local

00:02:32,140 --> 00:02:37,570
repository today it just means to pull

00:02:35,680 --> 00:02:41,820
things from your local environment on

00:02:37,570 --> 00:02:43,600
your box we were subject to the

00:02:41,820 --> 00:02:46,090
installation rules of our distribution

00:02:43,600 --> 00:02:49,210
and that meant that all of those things

00:02:46,090 --> 00:02:51,070
were contributing into our our action

00:02:49,210 --> 00:02:52,720
definitions we change a whole lot of our

00:02:51,070 --> 00:02:54,400
code base every day a lot of this

00:02:52,720 --> 00:02:55,990
hopefully sounds similar to your project

00:02:54,400 --> 00:03:00,630
it certainly is similar to the situation

00:02:55,990 --> 00:03:03,640
at Google we use C++ we use a lot of C++

00:03:00,630 --> 00:03:05,140
there are several specific permutations

00:03:03,640 --> 00:03:08,140
that we want to support in terms of

00:03:05,140 --> 00:03:11,440
configuration of our compiler and our

00:03:08,140 --> 00:03:13,720
linker and we want to be able to specify

00:03:11,440 --> 00:03:16,450
them at will we want to be able to add

00:03:13,720 --> 00:03:17,800
debug flags to specific places we want

00:03:16,450 --> 00:03:20,320
to be able to add profiling and code

00:03:17,800 --> 00:03:21,640
coverage and static analysis and dynamic

00:03:20,320 --> 00:03:23,920
analysis and that sort of thing to our

00:03:21,640 --> 00:03:27,600
build other instrumentation and utilize

00:03:23,920 --> 00:03:30,310
aspects and other tools to discover our

00:03:27,600 --> 00:03:32,500
action graph in different ways on an

00:03:30,310 --> 00:03:36,340
ongoing basis we have a desire to make

00:03:32,500 --> 00:03:37,840
our build faster the tacit understanding

00:03:36,340 --> 00:03:40,990
there is that we have an addiction to

00:03:37,840 --> 00:03:42,040
building all if you don't have an

00:03:40,990 --> 00:03:43,660
addiction to building all

00:03:42,040 --> 00:03:46,480
congratulations you've broken yourself

00:03:43,660 --> 00:03:49,300
of a great or a terrible habit very

00:03:46,480 --> 00:03:50,670
early on in your process we also wanted

00:03:49,300 --> 00:03:53,500
to make our build more self-contained

00:03:50,670 --> 00:03:55,870
using those local repositories we were

00:03:53,500 --> 00:03:58,840
subject to constant changes associated

00:03:55,870 --> 00:04:01,180
with even well natured upgrades

00:03:58,840 --> 00:04:03,280
associated with our users if our CI

00:04:01,180 --> 00:04:05,470
machines fell out of compliance with our

00:04:03,280 --> 00:04:07,930
local development machines there was the

00:04:05,470 --> 00:04:10,690
immediate capacity for us to suddenly

00:04:07,930 --> 00:04:13,150
generate an entirely new build if an SSL

00:04:10,690 --> 00:04:17,260
header changed if a curl implementation

00:04:13,150 --> 00:04:19,030
changed oh sorry

00:04:17,260 --> 00:04:21,459
and the last thing is we wanted our

00:04:19,030 --> 00:04:24,970
tests to be cashable our test results to

00:04:21,459 --> 00:04:27,880
be cacheable this is a big thing for us

00:04:24,970 --> 00:04:28,930
not just because we want to take our

00:04:27,880 --> 00:04:30,789
tests and not

00:04:28,930 --> 00:04:32,740
have to rerun them again but we want

00:04:30,789 --> 00:04:34,840
nothing but to add more and more and

00:04:32,740 --> 00:04:38,050
more tests to our system we want to make

00:04:34,840 --> 00:04:39,850
sure that we are safe in every regard to

00:04:38,050 --> 00:04:42,190
what we're developing and the only way

00:04:39,850 --> 00:04:43,900
to do that is to add testing layers at

00:04:42,190 --> 00:04:45,729
each individual level and to be able to

00:04:43,900 --> 00:04:46,720
prove that that system works and the

00:04:45,729 --> 00:04:49,300
only way that we're going to be able to

00:04:46,720 --> 00:04:52,120
trust a caching system for tests is if

00:04:49,300 --> 00:04:56,320
we can prove that they change when the

00:04:52,120 --> 00:04:58,660
code changes so our prior art looks like

00:04:56,320 --> 00:05:01,330
a terrible set of tools we utilize see

00:04:58,660 --> 00:05:05,050
make and ninja that means that we were

00:05:01,330 --> 00:05:07,419
generating ninja files from our see make

00:05:05,050 --> 00:05:10,840
bill definitions we were only building

00:05:07,419 --> 00:05:12,460
all there was very little support baked

00:05:10,840 --> 00:05:14,020
in for building individual targets in

00:05:12,460 --> 00:05:15,520
fact I asked some of the senior

00:05:14,020 --> 00:05:17,650
engineers whenever I first came onto the

00:05:15,520 --> 00:05:21,130
project over 2 and a half years ago how

00:05:17,650 --> 00:05:25,389
to build just one thing and nobody had

00:05:21,130 --> 00:05:28,389
any idea we implemented several distinct

00:05:25,389 --> 00:05:30,099
rules for a custom IDL we had rules for

00:05:28,389 --> 00:05:32,979
build sequencing which means that we

00:05:30,099 --> 00:05:34,960
were putting together rules that staged

00:05:32,979 --> 00:05:37,120
our build in different phases and

00:05:34,960 --> 00:05:40,840
nothing was able to cross in between

00:05:37,120 --> 00:05:42,310
those two different phases I also we

00:05:40,840 --> 00:05:43,840
also had a whole bunch of rule type glob

00:05:42,310 --> 00:05:46,990
dependencies and if that doesn't mean

00:05:43,840 --> 00:05:50,919
anything to you think I need to generate

00:05:46,990 --> 00:05:53,050
every single proto definition across my

00:05:50,919 --> 00:05:55,389
entire build tree and I now want to make

00:05:53,050 --> 00:05:57,940
a rule that can depend on that having

00:05:55,389 --> 00:05:59,860
occurred very similar activities it

00:05:57,940 --> 00:06:02,590
happened here and these are obvious

00:05:59,860 --> 00:06:06,550
bottlenecks not just to local execution

00:06:02,590 --> 00:06:08,440
but the idea that we now have to have a

00:06:06,550 --> 00:06:10,090
full manifest of everything and every

00:06:08,440 --> 00:06:12,159
build has to be completed with an all

00:06:10,090 --> 00:06:13,840
target because you can't correctly

00:06:12,159 --> 00:06:16,479
identify the glob set without having

00:06:13,840 --> 00:06:20,530
identified all of the targets in the

00:06:16,479 --> 00:06:22,630
system we utilize C C cache this if

00:06:20,530 --> 00:06:25,360
you're not familiar with it is a tool

00:06:22,630 --> 00:06:29,590
for caching on the local file system for

00:06:25,360 --> 00:06:32,229
compiles only compilation results and

00:06:29,590 --> 00:06:34,030
they also happen to cache make file

00:06:32,229 --> 00:06:35,889
dependency outputs and this is

00:06:34,030 --> 00:06:38,469
preprocessor based which means that you

00:06:35,889 --> 00:06:41,139
have to perform the pre process which is

00:06:38,469 --> 00:06:42,040
a very I Oh intensive operation it means

00:06:41,139 --> 00:06:43,930
that you have to scale

00:06:42,040 --> 00:06:47,170
and everything in your system in order

00:06:43,930 --> 00:06:49,660
to calculate a key that this system uses

00:06:47,170 --> 00:06:52,120
to pull your outputs out of and keep

00:06:49,660 --> 00:06:54,520
track of similarly we also used ice

00:06:52,120 --> 00:06:58,060
cream which is a preprocessor based

00:06:54,520 --> 00:06:59,650
remote transport system and executed in

00:06:58,060 --> 00:07:01,780
a pool of machines that were highly

00:06:59,650 --> 00:07:03,550
available we actually used a shared pool

00:07:01,780 --> 00:07:05,710
amongst our developers and that caused a

00:07:03,550 --> 00:07:08,590
great bit of consternation when suddenly

00:07:05,710 --> 00:07:11,500
my usage spiked on your desktop because

00:07:08,590 --> 00:07:17,050
we were compiling something unique or

00:07:11,500 --> 00:07:19,930
interesting so I joined up in May 2016

00:07:17,050 --> 00:07:24,190
when basil was at the head of Eurovision

00:07:19,930 --> 00:07:25,660
I believe of oh three two and said let's

00:07:24,190 --> 00:07:29,770
get it working

00:07:25,660 --> 00:07:32,230
ice cream is utilizing something that is

00:07:29,770 --> 00:07:34,030
over the network it happened to be in

00:07:32,230 --> 00:07:36,970
the lucky case that it was communicating

00:07:34,030 --> 00:07:38,860
over a FIFO which meant that needed

00:07:36,970 --> 00:07:42,240
access to a particular file on the file

00:07:38,860 --> 00:07:44,500
system to discuss its operations with a

00:07:42,240 --> 00:07:47,110
daemon to distribute out to the system

00:07:44,500 --> 00:07:48,880
and we had to break through sandboxing

00:07:47,110 --> 00:07:51,010
so that was actually my first basil

00:07:48,880 --> 00:07:54,160
change was publishing and execution

00:07:51,010 --> 00:07:57,550
requirements for networking these local

00:07:54,160 --> 00:07:59,320
resources won't work for estimation does

00:07:57,550 --> 00:08:01,180
anyone has anyone does anyone remember

00:07:59,320 --> 00:08:03,760
the local resources estimation system

00:08:01,180 --> 00:08:07,690
inside of basil where it said no you

00:08:03,760 --> 00:08:10,390
you've definitely only got you know 250

00:08:07,690 --> 00:08:13,480
of CPU I don't know what 250 was but I

00:08:10,390 --> 00:08:15,160
certainly had more than it especially

00:08:13,480 --> 00:08:17,950
add more.that more than it whenever I

00:08:15,160 --> 00:08:21,250
split out and did my remote execution so

00:08:17,950 --> 00:08:22,720
that stuff had to go the you'll notice

00:08:21,250 --> 00:08:24,520
throughout my presentation that I've got

00:08:22,720 --> 00:08:25,780
a lot of lot of links here I really

00:08:24,520 --> 00:08:27,490
encourage you to download these slides

00:08:25,780 --> 00:08:29,950
because almost everything points off to

00:08:27,490 --> 00:08:31,510
either an issue or a change or something

00:08:29,950 --> 00:08:34,330
that's come up as a result of doing this

00:08:31,510 --> 00:08:38,380
transition but our linking is completely

00:08:34,330 --> 00:08:41,440
different we needed to utilize controls

00:08:38,380 --> 00:08:44,530
for the file names themselves so that we

00:08:41,440 --> 00:08:46,210
could output food on SO that somebody

00:08:44,530 --> 00:08:49,480
else could depend upon without the Lib

00:08:46,210 --> 00:08:51,340
prefix or we needed to ensure that so

00:08:49,480 --> 00:08:53,620
names got injected into our dynamic

00:08:51,340 --> 00:08:55,240
libraries or we needed to make sure that

00:08:53,620 --> 00:08:55,480
our transitive libraries got loaded up

00:08:55,240 --> 00:08:57,570
in

00:08:55,480 --> 00:09:00,100
you are done SOS and so on and so forth

00:08:57,570 --> 00:09:02,699
wait a minute wait a minute wait a

00:09:00,100 --> 00:09:05,500
minute the header discovery system

00:09:02,699 --> 00:09:07,420
include pruning doesn't work out of the

00:09:05,500 --> 00:09:09,940
box from basil so we had to go fix that

00:09:07,420 --> 00:09:12,519
and then the last thing is that our

00:09:09,940 --> 00:09:16,060
users really really wanted to produce a

00:09:12,519 --> 00:09:17,709
manifest list of compiled commands JSON

00:09:16,060 --> 00:09:20,350
so that they could plug that into their

00:09:17,709 --> 00:09:23,199
IDs so we got to put that into the

00:09:20,350 --> 00:09:24,670
internals of basil itself if you're

00:09:23,199 --> 00:09:26,649
thinking that these represent a whole

00:09:24,670 --> 00:09:28,089
bunch of different changes that we

00:09:26,649 --> 00:09:31,839
wanted to contribute back to the system

00:09:28,089 --> 00:09:34,540
you are correct so it's worth looking at

00:09:31,839 --> 00:09:36,820
the current contribution process and

00:09:34,540 --> 00:09:39,339
what it what it was before so I got a

00:09:36,820 --> 00:09:40,720
link here for the process itself the

00:09:39,339 --> 00:09:43,000
last modification for this was back in

00:09:40,720 --> 00:09:46,720
July so at least we're tweaking this

00:09:43,000 --> 00:09:48,730
over time we've switched over as a

00:09:46,720 --> 00:09:50,829
community from Gerrit to github for

00:09:48,730 --> 00:09:53,500
reviews I'm really happy with that

00:09:50,829 --> 00:09:54,940
Garrett was a little bit out of sync

00:09:53,500 --> 00:09:58,720
especially with the other projects that

00:09:54,940 --> 00:10:01,540
I was working on and on this system a

00:09:58,720 --> 00:10:03,760
basil team member which is identified in

00:10:01,540 --> 00:10:05,350
the documentation and then I've sort of

00:10:03,760 --> 00:10:08,399
associated that this has to be a core

00:10:05,350 --> 00:10:11,260
contributor performs a review and

00:10:08,399 --> 00:10:13,420
there's a sort of blurb there that came

00:10:11,260 --> 00:10:15,850
Zout from this thing that describes the

00:10:13,420 --> 00:10:17,620
way in which things go into the basil

00:10:15,850 --> 00:10:20,170
system which means you put up the github

00:10:17,620 --> 00:10:22,720
pull request that gets accepted by

00:10:20,170 --> 00:10:24,040
someone it gets merged into something

00:10:22,720 --> 00:10:25,870
internal that I don't know anything

00:10:24,040 --> 00:10:30,519
about and then it pops out with a pipe a

00:10:25,870 --> 00:10:32,889
rev ID I don't know what that is and is

00:10:30,519 --> 00:10:35,769
emitted by a system called capybara and

00:10:32,889 --> 00:10:39,040
put into the public github repo and your

00:10:35,769 --> 00:10:41,199
code is available this contribution

00:10:39,040 --> 00:10:43,329
process also includes a whole bunch of

00:10:41,199 --> 00:10:46,180
really good stuff which we sort of

00:10:43,329 --> 00:10:47,589
ignored on our first pass and I don't

00:10:46,180 --> 00:10:49,360
even know if it was available but for

00:10:47,589 --> 00:10:50,769
now if you're looking to go and try and

00:10:49,360 --> 00:10:53,139
build your own basil and make your own

00:10:50,769 --> 00:10:55,269
fork this is the best way to get started

00:10:53,139 --> 00:10:57,940
doing it it describes setting up your

00:10:55,269 --> 00:11:00,490
coding environment being able to build

00:10:57,940 --> 00:11:03,040
your basil trying to debug your basil

00:11:00,490 --> 00:11:04,510
and then how to find the code that that

00:11:03,040 --> 00:11:07,480
means something to you

00:11:04,510 --> 00:11:09,310
I got pinged by one of my colleagues

00:11:07,480 --> 00:11:13,690
Jacob the other day

00:11:09,310 --> 00:11:16,720
he sort of asked me how I seemed to know

00:11:13,690 --> 00:11:18,100
everything about where to find something

00:11:16,720 --> 00:11:20,350
he gets stuck in five different

00:11:18,100 --> 00:11:23,260
directions inside of Basel trying to

00:11:20,350 --> 00:11:26,529
understand where something came from and

00:11:23,260 --> 00:11:28,240
I said that it's it's become second

00:11:26,529 --> 00:11:30,580
nature to me that these layouts and

00:11:28,240 --> 00:11:33,100
these these these descriptions are very

00:11:30,580 --> 00:11:37,450
intuitive and tend to lead from me at

00:11:33,100 --> 00:11:39,370
least to the ability to properly deduce

00:11:37,450 --> 00:11:40,960
at least where something could be coming

00:11:39,370 --> 00:11:45,730
from I've also gotten really good at

00:11:40,960 --> 00:11:48,580
reading stack traces the other side of

00:11:45,730 --> 00:11:50,950
the contributor contribution policy is

00:11:48,580 --> 00:11:52,930
this governance policy which has fallen

00:11:50,950 --> 00:11:55,660
a little bit further out of date hasn't

00:11:52,930 --> 00:11:58,150
been updated since 2016 so at least it's

00:11:55,660 --> 00:12:00,040
since I've been at Ober but it's a

00:11:58,150 --> 00:12:03,790
restatement of a lot of what goes into

00:12:00,040 --> 00:12:06,400
the contribution guidelines but it also

00:12:03,790 --> 00:12:09,390
makes some other clarifications that I

00:12:06,400 --> 00:12:12,100
don't really understand even to this day

00:12:09,390 --> 00:12:14,770
all core contributors work for Google

00:12:12,100 --> 00:12:16,930
and the hope is that that changed over

00:12:14,770 --> 00:12:19,960
time when this was written

00:12:16,930 --> 00:12:21,790
I don't know I'm certain that everybody

00:12:19,960 --> 00:12:23,410
worked for Google I don't exactly know

00:12:21,790 --> 00:12:25,480
what the state is today because we have

00:12:23,410 --> 00:12:28,150
the core contributors list I'll put it

00:12:25,480 --> 00:12:30,190
to david is anybody working for off

00:12:28,150 --> 00:12:34,480
there's anybody on the core contributor

00:12:30,190 --> 00:12:36,270
list not working for Google okay cool

00:12:34,480 --> 00:12:38,410
sorry I didn't mean to make this a

00:12:36,270 --> 00:12:42,040
audience-participation thing but I want

00:12:38,410 --> 00:12:43,300
want to check my facts but there's an a

00:12:42,040 --> 00:12:44,890
mission statement at the bottom that

00:12:43,300 --> 00:12:46,510
says that we will move towards an open

00:12:44,890 --> 00:12:48,880
governance model where multiple parties

00:12:46,510 --> 00:12:50,620
have commit access rollback rights and

00:12:48,880 --> 00:12:54,070
can provide explicit support for our

00:12:50,620 --> 00:12:55,630
features or rules I'm not going to offer

00:12:54,070 --> 00:12:57,370
any commentary on that these are all

00:12:55,630 --> 00:13:00,940
sort of stated facts and this is what we

00:12:57,370 --> 00:13:03,010
were using to guide our behavior

00:13:00,940 --> 00:13:04,450
associated with how we interacted with

00:13:03,010 --> 00:13:06,790
the Basel community and what we hoped

00:13:04,450 --> 00:13:08,680
that we'd be able to get out of them the

00:13:06,790 --> 00:13:11,250
release process itself just says we

00:13:08,680 --> 00:13:13,330
regularly publish releases of Basel

00:13:11,250 --> 00:13:14,980
aside from that there's a new policy

00:13:13,330 --> 00:13:17,320
that was adopted last year if you're not

00:13:14,980 --> 00:13:19,020
familiar with it which is that our the

00:13:17,320 --> 00:13:21,400
releases come out every single month

00:13:19,020 --> 00:13:23,080
honor about the start of the first month

00:13:21,400 --> 00:13:25,290
and that patch releases

00:13:23,080 --> 00:13:27,790
I'm out as a result of bug fixes or

00:13:25,290 --> 00:13:34,000
minor problems that occur as a result of

00:13:27,790 --> 00:13:38,140
that release so how we got our PRS

00:13:34,000 --> 00:13:40,270
accepted we want to give everyone who

00:13:38,140 --> 00:13:42,640
wants to contribute to basil advice and

00:13:40,270 --> 00:13:44,710
or anyone who wants to maintain their

00:13:42,640 --> 00:13:46,650
own fork advice associated with how to

00:13:44,710 --> 00:13:48,670
get this stuff out of your

00:13:46,650 --> 00:13:51,640
responsibility and back up into the

00:13:48,670 --> 00:13:53,880
basil ecosystem we want to follow the

00:13:51,640 --> 00:13:57,400
policy for the most part when the policy

00:13:53,880 --> 00:13:58,540
was available there were a little bit of

00:13:57,400 --> 00:14:00,880
tweaks there were a little bit of odd

00:13:58,540 --> 00:14:02,380
things essentially I would I would

00:14:00,880 --> 00:14:04,060
recommend to you that any part of the

00:14:02,380 --> 00:14:07,630
policy or any part of the procedure that

00:14:04,060 --> 00:14:08,950
becomes cumbersome that you take the

00:14:07,630 --> 00:14:13,090
opportunity to talk with the basil team

00:14:08,950 --> 00:14:15,220
about this is how as far as I know the

00:14:13,090 --> 00:14:17,830
reviews on github started this is how as

00:14:15,220 --> 00:14:22,510
far as I know we got into discussions

00:14:17,830 --> 00:14:24,430
about community contributions in at

00:14:22,510 --> 00:14:27,460
large in terms of opinion and in terms

00:14:24,430 --> 00:14:30,640
of proposals that sort of thing we also

00:14:27,460 --> 00:14:34,120
kept things small and that had some good

00:14:30,640 --> 00:14:36,400
results we filed issues to keep track of

00:14:34,120 --> 00:14:39,490
what we were encountering which meant

00:14:36,400 --> 00:14:41,860
that we had a public record of exactly

00:14:39,490 --> 00:14:43,930
what went wrong hopefully as close to

00:14:41,860 --> 00:14:45,100
the master revision as we got it and

00:14:43,930 --> 00:14:47,920
these might seem like sort of trivial

00:14:45,100 --> 00:14:51,790
things but when you're sort of swamped

00:14:47,920 --> 00:14:53,620
and subsumed by the idea of migrating a

00:14:51,790 --> 00:14:55,930
very large code base a lot of these

00:14:53,620 --> 00:14:59,380
these good procedures were hard to

00:14:55,930 --> 00:15:01,270
discover or at least hard to hard to

00:14:59,380 --> 00:15:03,580
execute the rigorously good practices

00:15:01,270 --> 00:15:05,350
associated with this so some of the

00:15:03,580 --> 00:15:07,300
other things that we tried that may not

00:15:05,350 --> 00:15:09,220
be detailed in the governance or the

00:15:07,300 --> 00:15:11,950
contribution policy were that we tried

00:15:09,220 --> 00:15:15,250
explicitly communicating with the team

00:15:11,950 --> 00:15:17,530
members or the stakeholders associated

00:15:15,250 --> 00:15:19,240
with each of these projects and tried to

00:15:17,530 --> 00:15:22,600
let them know you know I'm having this

00:15:19,240 --> 00:15:25,260
issue I filed this particular thing on

00:15:22,600 --> 00:15:27,340
github I want to see some results about

00:15:25,260 --> 00:15:29,140
something about this I want to feel some

00:15:27,340 --> 00:15:31,000
comfort associated with that you know

00:15:29,140 --> 00:15:32,710
that the problem exists that we got that

00:15:31,000 --> 00:15:34,420
we're getting somewhere on it or that

00:15:32,710 --> 00:15:37,120
it's in or out of scope for a particular

00:15:34,420 --> 00:15:39,639
release typically I think this

00:15:37,120 --> 00:15:41,589
or PRS after about a week of silence and

00:15:39,639 --> 00:15:44,139
got some nice results as a result of

00:15:41,589 --> 00:15:45,550
that I'm gonna breeze through a couple

00:15:44,139 --> 00:15:49,660
of these case studies they're kind of

00:15:45,550 --> 00:15:53,019
silly the last change that I made to the

00:15:49,660 --> 00:15:56,050
Basel repo is I improved a request ID

00:15:53,019 --> 00:16:01,980
error message this thing was saying that

00:15:56,050 --> 00:16:03,939
a build request ID was a valid UUID and

00:16:01,980 --> 00:16:07,180
that was the error printed when it

00:16:03,939 --> 00:16:08,769
wasn't a valid UUID I pushed that out

00:16:07,180 --> 00:16:10,360
locally on September 19th

00:16:08,769 --> 00:16:12,790
I got a looks good to me to review and

00:16:10,360 --> 00:16:16,110
then I had the entire thing closed out

00:16:12,790 --> 00:16:19,870
within hours it was closed the same day

00:16:16,110 --> 00:16:22,180
the next thing that I did or rather

00:16:19,870 --> 00:16:25,389
another another nice discussion that we

00:16:22,180 --> 00:16:28,509
had here was a repository cache issue

00:16:25,389 --> 00:16:33,370
where whenever you had your download

00:16:28,509 --> 00:16:35,110
interrupted associated with your with a

00:16:33,370 --> 00:16:40,029
remote cash with a repository cache

00:16:35,110 --> 00:16:43,389
asset it broke for in perpetuity until

00:16:40,029 --> 00:16:44,889
your repository cache was deleted it

00:16:43,389 --> 00:16:46,629
broke operations and wasn't able to

00:16:44,889 --> 00:16:49,089
continue on from that we filed an issue

00:16:46,629 --> 00:16:52,149
we got some results everything sort of

00:16:49,089 --> 00:16:54,399
got in there but these case studies are

00:16:52,149 --> 00:16:56,110
sort of progressing down a path of well

00:16:54,399 --> 00:16:57,759
we didn't really get a response but we

00:16:56,110 --> 00:17:00,370
tried to do some things out-of-band

00:16:57,759 --> 00:17:05,399
here's what I recommend make sure that

00:17:00,370 --> 00:17:07,779
you stay on top of these things the

00:17:05,399 --> 00:17:10,329
other issue that we can't we encountered

00:17:07,779 --> 00:17:14,649
in terms of an action cache shut down

00:17:10,329 --> 00:17:16,659
regression test let's see we got a fix

00:17:14,649 --> 00:17:20,230
for this put in we we insisted that we

00:17:16,659 --> 00:17:23,589
have include pruning work this was a

00:17:20,230 --> 00:17:25,270
larger effort for the problem that I

00:17:23,589 --> 00:17:26,890
discussed earlier where we couldn't

00:17:25,270 --> 00:17:33,179
successfully get include pruning out of

00:17:26,890 --> 00:17:37,659
C++ we eventually got the entire

00:17:33,179 --> 00:17:39,669
response to from the basil team to

00:17:37,659 --> 00:17:40,750
Center on the right issues if you take a

00:17:39,669 --> 00:17:42,190
look at any of these issues and

00:17:40,750 --> 00:17:44,230
descriptions we go through a whole bunch

00:17:42,190 --> 00:17:45,880
of different scenarios where we describe

00:17:44,230 --> 00:17:48,970
well is this a problem is this not a

00:17:45,880 --> 00:17:50,710
problem have we found a major breaking

00:17:48,970 --> 00:17:52,299
bug inside a basil

00:17:50,710 --> 00:17:55,210
got fixed eventually please take a look

00:17:52,299 --> 00:17:57,070
at the the summaries there so that was

00:17:55,210 --> 00:17:59,950
how we successfully got our stuff

00:17:57,070 --> 00:18:02,890
applied here's how we failed to do this

00:17:59,950 --> 00:18:05,140
and the the trends here are essentially

00:18:02,890 --> 00:18:09,850
we didn't document our process we did

00:18:05,140 --> 00:18:11,799
not work on the head of master we did

00:18:09,850 --> 00:18:15,520
not verify our changes associated with

00:18:11,799 --> 00:18:17,799
master we provided sort of partial

00:18:15,520 --> 00:18:19,990
solutions to problems and now I sort of

00:18:17,799 --> 00:18:23,140
get into areas where I don't necessarily

00:18:19,990 --> 00:18:24,669
think that failure was good or bad but

00:18:23,140 --> 00:18:27,159
it probably could have been avoided if

00:18:24,669 --> 00:18:29,740
we had had more collaboration in terms

00:18:27,159 --> 00:18:32,440
of getting acceptance from the bail team

00:18:29,740 --> 00:18:35,950
getting some involvement from them we

00:18:32,440 --> 00:18:37,809
wanted to provide either our own

00:18:35,950 --> 00:18:40,149
proposals for a problem that we

00:18:37,809 --> 00:18:44,429
encountered and have some sentiment of

00:18:40,149 --> 00:18:48,520
contribution in that manner or we had

00:18:44,429 --> 00:18:50,590
problems that sort of that we prefer

00:18:48,520 --> 00:18:52,950
which we propose things and they just

00:18:50,590 --> 00:18:54,820
sort of fell out of date

00:18:52,950 --> 00:18:57,789
hopefully we'll we'll get through this

00:18:54,820 --> 00:19:00,640
on the case study quick CC ink library

00:18:57,789 --> 00:19:02,890
so that dates this this submission

00:19:00,640 --> 00:19:04,899
itself we ended up with a stale stale

00:19:02,890 --> 00:19:06,490
situation here where we couldn't

00:19:04,899 --> 00:19:08,710
properly get this determined essentially

00:19:06,490 --> 00:19:10,720
we filed an issue where a CC and

00:19:08,710 --> 00:19:13,659
collaborate could leave things around

00:19:10,720 --> 00:19:16,539
and we went back and forth on what

00:19:13,659 --> 00:19:18,580
happened here we got some core members

00:19:16,539 --> 00:19:23,409
of the Basel team involved and we

00:19:18,580 --> 00:19:24,640
eventually decided that sorry the basel

00:19:23,409 --> 00:19:26,590
team eventually decided that the

00:19:24,640 --> 00:19:27,909
desirable solution would be a slightly

00:19:26,590 --> 00:19:30,250
different one that was provided

00:19:27,909 --> 00:19:32,230
internally we also had a garrett code

00:19:30,250 --> 00:19:34,570
review on here so again we're going back

00:19:32,230 --> 00:19:36,580
in terms of what we're doing but

00:19:34,570 --> 00:19:38,740
essentially the time spent on the pull

00:19:36,580 --> 00:19:40,029
request where I made a little it made it

00:19:38,740 --> 00:19:42,279
a little bit more complicated than it

00:19:40,029 --> 00:19:46,000
needed to be was wasted because an

00:19:42,279 --> 00:19:49,870
upstream provided solution was adopted

00:19:46,000 --> 00:19:51,820
and but maybe the pull request was only

00:19:49,870 --> 00:19:53,350
accepted because or maybe sorry maybe

00:19:51,820 --> 00:19:55,539
the upstream solution was only provided

00:19:53,350 --> 00:19:55,960
because I had something up there ready

00:19:55,539 --> 00:20:00,490
to go

00:19:55,960 --> 00:20:02,679
I had another situation where we wanted

00:20:00,490 --> 00:20:03,940
to add a parameter we got no issue

00:20:02,679 --> 00:20:05,230
presented as

00:20:03,940 --> 00:20:07,179
to say we didn't present an issue

00:20:05,230 --> 00:20:09,340
associated with this we didn't properly

00:20:07,179 --> 00:20:11,169
provide our use case the best advice

00:20:09,340 --> 00:20:14,289
that I can give anyone for this stuff is

00:20:11,169 --> 00:20:15,850
define your use case define exactly how

00:20:14,289 --> 00:20:19,090
it's going to work provide a minimal

00:20:15,850 --> 00:20:21,730
description of why it's vital to your

00:20:19,090 --> 00:20:24,129
operation and hopefully you'll be able

00:20:21,730 --> 00:20:25,690
to get the help associated with your

00:20:24,129 --> 00:20:27,820
issue and the acceptance associated with

00:20:25,690 --> 00:20:31,600
it and the last thing I'm going to be

00:20:27,820 --> 00:20:34,750
talking about is our perp our only

00:20:31,600 --> 00:20:37,179
proposed change to now well I'll say

00:20:34,750 --> 00:20:43,110
it's Skylark because at the time it was

00:20:37,179 --> 00:20:43,110
sky like we made a request to take

00:20:43,470 --> 00:20:49,240
parameters through rule definitions and

00:20:45,970 --> 00:20:51,159
transform them into multiple things that

00:20:49,240 --> 00:20:52,480
were expanded in rural implementations

00:20:51,159 --> 00:20:55,149
if that doesn't mean anything to you

00:20:52,480 --> 00:21:00,039
don't worry about it but there were some

00:20:55,149 --> 00:21:01,750
pretty vehement there was some pretty

00:21:00,039 --> 00:21:05,860
vehement opposition to this a couple

00:21:01,750 --> 00:21:07,409
times having posted the proposal and we

00:21:05,860 --> 00:21:11,409
eventually came down to something where

00:21:07,409 --> 00:21:13,480
the we were referred to an output Maps

00:21:11,409 --> 00:21:16,679
madness document that was originally

00:21:13,480 --> 00:21:20,080
written by Demetri so thanks Dimitri and

00:21:16,679 --> 00:21:21,519
my only concern here is that sometimes

00:21:20,080 --> 00:21:24,129
there seems to be a dissonance

00:21:21,519 --> 00:21:26,830
associated with a request validity and

00:21:24,129 --> 00:21:30,070
the fact that well we've got crashing

00:21:26,830 --> 00:21:32,830
behavior or we've got behavior that you

00:21:30,070 --> 00:21:36,669
insist is bad but can't be moved in or

00:21:32,830 --> 00:21:38,289
out of the the basil ecosystem so the

00:21:36,669 --> 00:21:40,899
last part about this is the fact that we

00:21:38,289 --> 00:21:42,639
got remote execution and remote caching

00:21:40,899 --> 00:21:47,019
changes and I won't talk too much about

00:21:42,639 --> 00:21:53,470
like how or why that went in except for

00:21:47,019 --> 00:21:55,960
the fact that we represented something

00:21:53,470 --> 00:21:58,480
that was we were building a tool in

00:21:55,960 --> 00:22:00,340
terms of build farm that represented the

00:21:58,480 --> 00:22:03,340
only endpoint that was testing a very

00:22:00,340 --> 00:22:05,440
fresh set of code inside of basil and we

00:22:03,340 --> 00:22:09,009
had the opportunity to rapidly iterate

00:22:05,440 --> 00:22:11,649
talking with the remote api's team

00:22:09,009 --> 00:22:13,899
inside of Google and the the basil team

00:22:11,649 --> 00:22:16,790
itself to try to improve the situation

00:22:13,899 --> 00:22:18,290
in a world where the bill farm

00:22:16,790 --> 00:22:22,250
sorry the remote execution endpoint

00:22:18,290 --> 00:22:23,780
wasn't as reliable my endpoint we had

00:22:22,250 --> 00:22:25,340
several patch releases associated with

00:22:23,780 --> 00:22:27,200
this and we got these accepted fairly

00:22:25,340 --> 00:22:29,690
easily most of this was through

00:22:27,200 --> 00:22:31,130
discussions with out of bandwidth with

00:22:29,690 --> 00:22:32,840
other engineers we had a couple of

00:22:31,130 --> 00:22:34,640
issues posted but in general we were

00:22:32,840 --> 00:22:39,580
starting to follow really good practices

00:22:34,640 --> 00:22:41,870
as we went along with this all right so

00:22:39,580 --> 00:22:44,480
back in our office we were doing a whole

00:22:41,870 --> 00:22:45,920
bunch of changes all on our own

00:22:44,480 --> 00:22:48,050
we were gearing up for remote cache

00:22:45,920 --> 00:22:50,000
internally we did a whole bunch of

00:22:48,050 --> 00:22:52,040
changes associated with keeping track of

00:22:50,000 --> 00:22:54,650
those different ecosystems in terms of C

00:22:52,040 --> 00:22:56,360
cache and ice cream for executions we

00:22:54,650 --> 00:22:58,940
put together some internal stuff for the

00:22:56,360 --> 00:23:00,770
command compile commands we removed our

00:22:58,940 --> 00:23:02,870
sandbox module because it was

00:23:00,770 --> 00:23:06,140
representing hang in terms of NFS and

00:23:02,870 --> 00:23:08,360
what I feel about these patches is

00:23:06,140 --> 00:23:10,400
number one I wanted to make them

00:23:08,360 --> 00:23:14,480
available publicly so we put them up on

00:23:10,400 --> 00:23:16,550
a github page which o is referred to at

00:23:14,480 --> 00:23:18,320
the end of this this process but in

00:23:16,550 --> 00:23:20,060
general we didn't know whether we could

00:23:18,320 --> 00:23:24,080
get them accepted they seem to be sort

00:23:20,060 --> 00:23:26,720
of anathema to fixing tools and fixing

00:23:24,080 --> 00:23:28,600
the the environments but they had to be

00:23:26,720 --> 00:23:31,220
made so that we could get them to work

00:23:28,600 --> 00:23:33,140
we tried to ride the release wave here

00:23:31,220 --> 00:23:34,820
meaning we took all of these custom

00:23:33,140 --> 00:23:37,640
patches that we were maintaining and we

00:23:34,820 --> 00:23:40,370
had about 64 or 65 of them at a time and

00:23:37,640 --> 00:23:43,670
we tried to ride each one of the

00:23:40,370 --> 00:23:46,400
independent releases now to put this

00:23:43,670 --> 00:23:48,740
into perspective I'm developing build

00:23:46,400 --> 00:23:51,530
farm full-time as this is going on and

00:23:48,740 --> 00:23:52,670
we're trying to improve the build

00:23:51,530 --> 00:23:56,450
performance of a whole bunch of

00:23:52,670 --> 00:23:58,160
different teams inside of the ATG and at

00:23:56,450 --> 00:24:00,620
the same time we've also got monthly

00:23:58,160 --> 00:24:02,060
release cycles coming in so what we

00:24:00,620 --> 00:24:03,620
ended up doing was splitting our

00:24:02,060 --> 00:24:05,210
independent splitting our independent

00:24:03,620 --> 00:24:06,890
changes into several different branches

00:24:05,210 --> 00:24:08,930
we rebased

00:24:06,890 --> 00:24:11,500
each one of these these branch sets on a

00:24:08,930 --> 00:24:14,810
minor release and then we took all of

00:24:11,500 --> 00:24:19,010
the build results after we had properly

00:24:14,810 --> 00:24:21,080
done the rebase and we ensured that all

00:24:19,010 --> 00:24:22,640
of our action cache keys mapped so that

00:24:21,080 --> 00:24:25,520
when we transition from one side to the

00:24:22,640 --> 00:24:27,500
other we knew that we didn't break at or

00:24:25,520 --> 00:24:30,460
rather we could we could test in

00:24:27,500 --> 00:24:32,470
isolation all of the

00:24:30,460 --> 00:24:34,900
unique behavior changes that we had in

00:24:32,470 --> 00:24:37,180
addition to all the changes that are

00:24:34,900 --> 00:24:38,620
coming from upstream and we did the

00:24:37,180 --> 00:24:40,840
performance equivalence for the same

00:24:38,620 --> 00:24:43,300
stuff we made sure that our builds were

00:24:40,840 --> 00:24:47,040
not taking significantly longer than the

00:24:43,300 --> 00:24:50,950
previously implemented versions builds

00:24:47,040 --> 00:24:53,500
along the way these these these numbers

00:24:50,950 --> 00:24:56,260
reflect essentially where we went where

00:24:53,500 --> 00:25:01,270
we started out zero three one two our

00:24:56,260 --> 00:25:04,060
adoption build wide at the AEG with O

00:25:01,270 --> 00:25:06,370
for two all the way through o 16 we've

00:25:04,060 --> 00:25:09,100
done one incremental release after

00:25:06,370 --> 00:25:13,630
another to successfully adopt everything

00:25:09,100 --> 00:25:16,510
that has been accepted through 16 we've

00:25:13,630 --> 00:25:17,980
done a we've dealt with a lot of C++

00:25:16,510 --> 00:25:20,350
restructuring that's coming from

00:25:17,980 --> 00:25:22,330
upstream and we also switch completely

00:25:20,350 --> 00:25:24,580
to executing with build farm internally

00:25:22,330 --> 00:25:28,180
and using a tool called basal cache to

00:25:24,580 --> 00:25:32,380
offer a local copy local effect simile

00:25:28,180 --> 00:25:34,660
of the the C cache behavior things that

00:25:32,380 --> 00:25:37,600
we're interested in coming up with is

00:25:34,660 --> 00:25:41,350
that we need some parity associated with

00:25:37,600 --> 00:25:43,060
the I'm sorry we need a CI system that

00:25:41,350 --> 00:25:44,470
ensures that this happens and we want to

00:25:43,060 --> 00:25:49,360
try and automate this as much as

00:25:44,470 --> 00:25:51,220
possible because we've taken probably

00:25:49,360 --> 00:25:54,790
two weeks of every single developer on

00:25:51,220 --> 00:25:58,150
our team's time up in trying to make

00:25:54,790 --> 00:26:00,490
these things work so where are we now we

00:25:58,150 --> 00:26:03,460
have we have only extremely custom

00:26:00,490 --> 00:26:04,870
changes we have back ports from master

00:26:03,460 --> 00:26:06,940
we've managed to throw away all the C

00:26:04,870 --> 00:26:09,670
cache stuff as much linking as we

00:26:06,940 --> 00:26:11,350
possibly could we've about 39 individual

00:26:09,670 --> 00:26:13,900
patches by a thousand lines of different

00:26:11,350 --> 00:26:16,960
xed really is a small number in terms of

00:26:13,900 --> 00:26:18,880
the basil ecosystem and we're anxious

00:26:16,960 --> 00:26:21,130
for c++ changes associated with

00:26:18,880 --> 00:26:22,780
sandwiches and doing other cool things

00:26:21,130 --> 00:26:24,550
hopefully we can get rid of some of our

00:26:22,780 --> 00:26:27,310
linking changes we really want to get to

00:26:24,550 --> 00:26:29,650
to a vanilla system that that allows us

00:26:27,310 --> 00:26:32,230
to interact and follow along with for

00:26:29,650 --> 00:26:35,650
instance the RB SLA of two minor

00:26:32,230 --> 00:26:37,780
versions and other documentation pieces

00:26:35,650 --> 00:26:39,790
that are available not having fresh

00:26:37,780 --> 00:26:42,130
documentation or having issues with that

00:26:39,790 --> 00:26:43,570
sort of thing tends to lead to unhappy

00:26:42,130 --> 00:26:45,880
developers who can't use a

00:26:43,570 --> 00:26:51,670
good reference point to describe what

00:26:45,880 --> 00:26:55,180
they're doing so what did it cost it

00:26:51,670 --> 00:26:57,790
costs every single I shouldn't say every

00:26:55,180 --> 00:26:59,050
single a single developer two weeks to

00:26:57,790 --> 00:27:03,700
do almost every single one of our

00:26:59,050 --> 00:27:05,920
upgrades we are now slightly out of spec

00:27:03,700 --> 00:27:08,920
with basil build for the things and

00:27:05,920 --> 00:27:10,570
points at which this mattered I have

00:27:08,920 --> 00:27:12,340
been contacted I've been asked about why

00:27:10,570 --> 00:27:15,430
doesn't this happen why doesn't this

00:27:12,340 --> 00:27:17,140
match the documentation and the worst

00:27:15,430 --> 00:27:19,600
part about this I think is at the bottom

00:27:17,140 --> 00:27:22,690
where the yield on the proposals and the

00:27:19,600 --> 00:27:24,940
PRS and the issues got lower like it

00:27:22,690 --> 00:27:26,830
dramatically dropped off as we were

00:27:24,940 --> 00:27:29,290
unable to keep up with that scenario

00:27:26,830 --> 00:27:30,790
where upstream was changing or there was

00:27:29,290 --> 00:27:33,460
an entire module that was thrown away

00:27:30,790 --> 00:27:35,320
with upstream where where we had applied

00:27:33,460 --> 00:27:40,150
effort before we weren't able to capture

00:27:35,320 --> 00:27:42,160
it later and since I don't necessarily

00:27:40,150 --> 00:27:44,110
want to be in the business of you know

00:27:42,160 --> 00:27:45,670
maintaining a fork of Basel publicly in

00:27:44,110 --> 00:27:48,910
trying to compete with the entire Google

00:27:45,670 --> 00:27:52,300
infrastructure I want to leverage that

00:27:48,910 --> 00:27:54,310
and I want my efforts to count so the

00:27:52,300 --> 00:27:57,010
only way to do that is to prevent mice

00:27:54,310 --> 00:27:58,450
is to save myself effort from having put

00:27:57,010 --> 00:27:59,950
something out in the first place save

00:27:58,450 --> 00:28:02,080
myself effort I'm writing the proposal

00:27:59,950 --> 00:28:04,180
it isn't going to get accepted or the PR

00:28:02,080 --> 00:28:05,910
that isn't going to get adopted or the

00:28:04,180 --> 00:28:09,760
issue that isn't gonna get kept track of

00:28:05,910 --> 00:28:12,100
so that's my last slide or my last

00:28:09,760 --> 00:28:14,710
couple of slides and I hope that again

00:28:12,100 --> 00:28:17,770
the community and the basel team can can

00:28:14,710 --> 00:28:21,790
look on this as what I want the rest of

00:28:17,770 --> 00:28:25,480
people using basel to know that we took

00:28:21,790 --> 00:28:27,160
on as well as what it is probably going

00:28:25,480 --> 00:28:30,520
to cost if you try to maintain your own

00:28:27,160 --> 00:28:32,500
fork the the community and the basel

00:28:30,520 --> 00:28:35,020
team are doing great at leveraging all

00:28:32,500 --> 00:28:36,790
of the water wheels at Google you guys

00:28:35,020 --> 00:28:40,980
are phenomenal you produce a phenomenal

00:28:36,790 --> 00:28:43,600
code I can't even come close to

00:28:40,980 --> 00:28:46,210
providing the same level of support that

00:28:43,600 --> 00:28:49,300
your tech writers and your language

00:28:46,210 --> 00:28:51,910
specialists and the performance

00:28:49,300 --> 00:28:56,860
implications associated with Basel

00:28:51,910 --> 00:28:58,720
changes provide the

00:28:56,860 --> 00:29:01,419
advice that we've gotten on proposals

00:28:58,720 --> 00:29:03,399
and the PR and the responses to PRS and

00:29:01,419 --> 00:29:06,429
the chats that they've had everyone

00:29:03,399 --> 00:29:08,769
comes to me with something after I bring

00:29:06,429 --> 00:29:11,140
up the slightest topic I got mauled by

00:29:08,769 --> 00:29:13,299
talking about action keys for about 15

00:29:11,140 --> 00:29:14,830
minutes after I brought it up before

00:29:13,299 --> 00:29:16,299
because they want to help and they want

00:29:14,830 --> 00:29:19,809
to know and they want to provide all of

00:29:16,299 --> 00:29:21,340
that that ability there is very low

00:29:19,809 --> 00:29:23,080
friction associated with communicating

00:29:21,340 --> 00:29:25,559
with the team with the basel group at

00:29:23,080 --> 00:29:27,940
large and I hope that that continues

00:29:25,559 --> 00:29:30,669
what can we do better what can the

00:29:27,940 --> 00:29:32,950
community do better to work with one

00:29:30,669 --> 00:29:36,130
another to either get these things

00:29:32,950 --> 00:29:38,019
adopted to reduce the need to to support

00:29:36,130 --> 00:29:41,169
this to reduce the cost associated with

00:29:38,019 --> 00:29:44,799
forking these things I think that we can

00:29:41,169 --> 00:29:47,250
move towards the diversity and

00:29:44,799 --> 00:29:49,919
specifically inclusion goals of

00:29:47,250 --> 00:29:52,690
including the rest of the community on

00:29:49,919 --> 00:29:55,330
the open governance model I think that

00:29:52,690 --> 00:29:59,260
we can probably make some steps towards

00:29:55,330 --> 00:30:01,899
that within the year meaning set a goal

00:29:59,260 --> 00:30:05,309
set a mile post associated with we have

00:30:01,899 --> 00:30:08,139
one core contributor from not Google or

00:30:05,309 --> 00:30:12,850
we meet the goal associated with what

00:30:08,139 --> 00:30:14,350
was specified there and that the gold

00:30:12,850 --> 00:30:16,090
standard from this and this wasn't

00:30:14,350 --> 00:30:17,860
actually my quote I'm not even gonna

00:30:16,090 --> 00:30:20,350
bother saying who it was but somebody

00:30:17,860 --> 00:30:22,029
said to me the gold standard for how

00:30:20,350 --> 00:30:23,710
this is should be measured is you don't

00:30:22,029 --> 00:30:28,360
get any advantages from working on

00:30:23,710 --> 00:30:29,860
Google for contributing to Basel so the

00:30:28,360 --> 00:30:31,419
last couple of principles yeah we want

00:30:29,860 --> 00:30:32,830
attribution for all changes Dimitri has

00:30:31,419 --> 00:30:34,419
done a great job and told me that we're

00:30:32,830 --> 00:30:36,250
gonna have issues for every single thing

00:30:34,419 --> 00:30:38,799
that comes in I'm looking forward to

00:30:36,250 --> 00:30:41,169
that I'm also looking forward to some

00:30:38,799 --> 00:30:43,269
collaborative community project planning

00:30:41,169 --> 00:30:45,039
associated with what we do I'm already

00:30:43,269 --> 00:30:48,399
participating in that in terms of some

00:30:45,039 --> 00:30:50,980
proposals for the Basel client I like

00:30:48,399 --> 00:30:53,019
this group I love this tool I love

00:30:50,980 --> 00:30:56,429
interacting with it and I can't wait to

00:30:53,019 --> 00:30:56,429
see what we're gonna do in the next year

00:30:57,400 --> 00:31:01,069

YouTube URL: https://www.youtube.com/watch?v=uZ84sV2MoGw


