Title: BazelCon 2018 Day 2: Building Apache Heron
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Josh Fischer (1904labs) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Josh Fischer;
Captions: 
	00:00:05,170 --> 00:00:12,230
okay hi my name is Josh Fischer I am an

00:00:10,219 --> 00:00:15,469
engineer with 1904 labs in st. Louis

00:00:12,230 --> 00:00:18,890
Missouri we over the past few years I've

00:00:15,469 --> 00:00:22,399
dealt with moving a lot of data I can't

00:00:18,890 --> 00:00:24,050
send her div to save my life but some of

00:00:22,399 --> 00:00:25,960
the problems I've come across is moving

00:00:24,050 --> 00:00:29,779
requests across a network that could be

00:00:25,960 --> 00:00:31,910
up to 900,000 lines of JSON or something

00:00:29,779 --> 00:00:35,810
that has to process 60,000 transactions

00:00:31,910 --> 00:00:37,940
per second with a 20 second SLA I mean

00:00:35,810 --> 00:00:39,560
in this and in my last in the last year

00:00:37,940 --> 00:00:41,990
I was working on that project with who

00:00:39,560 --> 00:00:44,150
was a high velocity transactions had to

00:00:41,990 --> 00:00:45,500
handle a load and I had to have

00:00:44,150 --> 00:00:47,810
responded quickly for anywhere in the

00:00:45,500 --> 00:00:51,010
world and this kind of got me into this

00:00:47,810 --> 00:00:51,010
whole streaming framework architecture

00:00:52,360 --> 00:00:58,690
so in this talk we're going to talk

00:00:54,230 --> 00:01:01,040
about what actually Apache here on is my

00:00:58,690 --> 00:01:03,410
my experience of bringing in a component

00:01:01,040 --> 00:01:05,630
of the Huron system and then actually

00:01:03,410 --> 00:01:07,100
building a hair on a workstation file

00:01:05,630 --> 00:01:09,110
and I'm gonna finish up with some

00:01:07,100 --> 00:01:11,990
thoughts about the whole my whole

00:01:09,110 --> 00:01:13,490
process of trying to integrate basil and

00:01:11,990 --> 00:01:15,170
understand open source projects all

00:01:13,490 --> 00:01:21,440
within a certain time period and produce

00:01:15,170 --> 00:01:23,900
something workable for client so here on

00:01:21,440 --> 00:01:25,850
by text definition is a fault tolerant

00:01:23,900 --> 00:01:28,820
distributed stream processing system it

00:01:25,850 --> 00:01:29,659
is a successor to patchy storm or from

00:01:28,820 --> 00:01:32,869
apache storm

00:01:29,659 --> 00:01:36,320
it was developed in-house at Twitter it

00:01:32,869 --> 00:01:37,700
was there there was a point in time when

00:01:36,320 --> 00:01:39,860
Twitter had their entire infrastructure

00:01:37,700 --> 00:01:43,070
running on storm and they experienced

00:01:39,860 --> 00:01:45,350
some issues with with running systems

00:01:43,070 --> 00:01:47,240
when high load with hit and they found

00:01:45,350 --> 00:01:49,610
that when super bowl's would happen or

00:01:47,240 --> 00:01:51,860
high high-traction events that happened

00:01:49,610 --> 00:01:53,990
that eventually storm would drop

00:01:51,860 --> 00:01:55,939
transactions in this led to inconsistent

00:01:53,990 --> 00:01:58,340
metric reporting inconsistent ad

00:01:55,939 --> 00:02:01,250
impressions and caused quite a lot of

00:01:58,340 --> 00:02:03,409
issues for their clients so the team got

00:02:01,250 --> 00:02:05,119
together they decided to build the

00:02:03,409 --> 00:02:10,369
successor to this which is compatible

00:02:05,119 --> 00:02:12,769
with all of storms topologies so I spent

00:02:10,369 --> 00:02:14,329
some time looking into you know trying

00:02:12,769 --> 00:02:17,240
to find some you know cool stuff to talk

00:02:14,329 --> 00:02:19,190
about and I reached out

00:02:17,240 --> 00:02:21,110
people at Twitter and I say no it was a

00:02:19,190 --> 00:02:24,080
reason for the hair on name has you know

00:02:21,110 --> 00:02:25,670
apparently it's a thing at Twitter to

00:02:24,080 --> 00:02:28,970
name all their projects after birds I

00:02:25,670 --> 00:02:30,650
had no idea and I said well what was the

00:02:28,970 --> 00:02:31,820
significance of Heron he's got to be

00:02:30,650 --> 00:02:33,830
something because I figured out these

00:02:31,820 --> 00:02:35,450
birds can be five foot tall with a seven

00:02:33,830 --> 00:02:37,070
and a half foot wingspan so I'm like

00:02:35,450 --> 00:02:39,920
it's got to be related and the answer I

00:02:37,070 --> 00:02:41,480
got was I like long-legged birds and

00:02:39,920 --> 00:02:47,180
something like crane was already taken

00:02:41,480 --> 00:02:48,520
so this is what we got so use cases for

00:02:47,180 --> 00:02:50,630
heron or any streaming system

00:02:48,520 --> 00:02:53,510
specifically heron in this case will be

00:02:50,630 --> 00:02:56,210
a real-time ETL Twitter uses it for spam

00:02:53,510 --> 00:02:58,070
detection and real-time trends whenever

00:02:56,210 --> 00:02:59,990
there are you know high velocity events

00:02:58,070 --> 00:03:01,730
going on if you wanted to you could do

00:02:59,990 --> 00:03:04,100
real-time business intelligence there's

00:03:01,730 --> 00:03:06,320
also some research going on right now

00:03:04,100 --> 00:03:08,270
with real-time machine learning I've

00:03:06,320 --> 00:03:10,550
said into a couple to talks it's not

00:03:08,270 --> 00:03:12,050
really my thing so but I I know it's in

00:03:10,550 --> 00:03:14,570
progress I don't know where they stand

00:03:12,050 --> 00:03:16,250
right now and you know I've said

00:03:14,570 --> 00:03:18,110
real-time enough so you know if it has a

00:03:16,250 --> 00:03:20,860
real-time need I'm most likely Heron is

00:03:18,110 --> 00:03:23,180
what you can use

00:03:20,860 --> 00:03:25,040
so some sample are some simple

00:03:23,180 --> 00:03:26,630
terminology to go to go over before we

00:03:25,040 --> 00:03:29,750
get into the what the system is and how

00:03:26,630 --> 00:03:31,670
it works when you load jobs in the hair

00:03:29,750 --> 00:03:35,150
on you run topologies topologies are

00:03:31,670 --> 00:03:37,250
nothing but DAGs DAGs as a abbreviation

00:03:35,150 --> 00:03:39,140
for a directed acyclic graph which is a

00:03:37,250 --> 00:03:41,540
really fancy word for circles with lines

00:03:39,140 --> 00:03:43,250
pointing to other circles it's just a

00:03:41,540 --> 00:03:46,790
way to show how data can logically flow

00:03:43,250 --> 00:03:49,010
through a topology spouts will be your

00:03:46,790 --> 00:03:50,990
your source for data from the outside

00:03:49,010 --> 00:03:53,600
world so spouse can read from my sequel

00:03:50,990 --> 00:03:55,670
tables Cassandra tables Patchi Kafka

00:03:53,600 --> 00:03:57,920
queues up pulsar cues and so forth and

00:03:55,670 --> 00:03:59,330
then bolts will be doing all the

00:03:57,920 --> 00:04:00,650
downstream processing and making

00:03:59,330 --> 00:04:02,720
decisions based on the data that's

00:04:00,650 --> 00:04:04,310
passed through the topology and then to

00:04:02,720 --> 00:04:05,570
connect those spouts and bolts will be

00:04:04,310 --> 00:04:07,730
edges which would be your streams of

00:04:05,570 --> 00:04:12,170
data which which is wrapped by a data

00:04:07,730 --> 00:04:15,230
tuple object so this is a an example of

00:04:12,170 --> 00:04:18,290
a simple deck very simple so in this

00:04:15,230 --> 00:04:22,220
case you got once about four bolts about

00:04:18,290 --> 00:04:25,010
one can then emit data to b1 b2 b1 can

00:04:22,220 --> 00:04:28,070
then emit data to b1 b3 and then B to go

00:04:25,010 --> 00:04:29,540
straight to b4 they've they actually

00:04:28,070 --> 00:04:30,009
have some generated topologies that are

00:04:29,540 --> 00:04:31,659
run across

00:04:30,009 --> 00:04:33,219
a thousand nodes that'll have hundreds

00:04:31,659 --> 00:04:37,150
and hundreds of these this is just very

00:04:33,219 --> 00:04:39,129
simple for you to kind of digest and if

00:04:37,150 --> 00:04:41,619
you get into what actually makes up a

00:04:39,129 --> 00:04:44,529
topology this is kind of the low-level

00:04:41,619 --> 00:04:46,539
view in a way a high level low level

00:04:44,529 --> 00:04:47,589
view of what it's apology is Haren is

00:04:46,539 --> 00:04:49,119
nothing but a bunch of running

00:04:47,589 --> 00:04:51,309
topologies or a bunch of hair on jobs

00:04:49,119 --> 00:04:53,710
and every topologies gonna have its own

00:04:51,309 --> 00:04:54,999
topology master and then down below

00:04:53,710 --> 00:04:56,800
you'll see these data containers which

00:04:54,999 --> 00:04:58,869
these dotted lines within those you'll

00:04:56,800 --> 00:05:02,589
see a stream manager a metrics manager

00:04:58,869 --> 00:05:06,159
in these boxes i1 to i4 stream manager

00:05:02,589 --> 00:05:07,719
is used to for for inter community for

00:05:06,159 --> 00:05:10,059
inter container communication and the

00:05:07,719 --> 00:05:13,449
register itself topology master metrics

00:05:10,059 --> 00:05:15,580
managers use for debugging purposes for

00:05:13,449 --> 00:05:17,559
developers and then I wants to write for

00:05:15,580 --> 00:05:18,849
those individual instances of the spouts

00:05:17,559 --> 00:05:21,580
and bolts that you've declaring your

00:05:18,849 --> 00:05:22,749
topologies and then I'm not a fan of

00:05:21,580 --> 00:05:24,419
this image but it's the best I could

00:05:22,749 --> 00:05:26,589
find in the short time I had to do this

00:05:24,419 --> 00:05:28,869
there's a zookeeper cluster that is

00:05:26,589 --> 00:05:31,809
shared between a topology a hair on

00:05:28,869 --> 00:05:33,309
clusters not a topology so you can have

00:05:31,809 --> 00:05:35,080
a hot you can have a thousand

00:05:33,309 --> 00:05:36,969
hang on topologies running all running

00:05:35,080 --> 00:05:39,099
off one Zurich in one zookeeper cluster

00:05:36,969 --> 00:05:41,439
and within a zookeeper cluster you'll

00:05:39,099 --> 00:05:42,909
keep logical plan which is the dag your

00:05:41,439 --> 00:05:44,680
physical plan which can be your IP

00:05:42,909 --> 00:05:46,389
addresses in your ports and then occur

00:05:44,680 --> 00:05:51,399
in execution state of the policies that

00:05:46,389 --> 00:05:54,550
are running so the tech composition is

00:05:51,399 --> 00:05:57,879
mainly Java then it has probably behind

00:05:54,550 --> 00:06:00,129
that of C++ than Python so Java would be

00:05:57,879 --> 00:06:02,349
those hair and instances and this is not

00:06:00,129 --> 00:06:04,419
exclusive this is limited to this is

00:06:02,349 --> 00:06:06,129
just a short list I put together so

00:06:04,419 --> 00:06:10,569
those I ones to write for is those or

00:06:06,129 --> 00:06:12,809
montt those are a JVM process C++ will

00:06:10,569 --> 00:06:15,339
be your topology master stream manager

00:06:12,809 --> 00:06:16,899
Python will be your CLI and in your UI

00:06:15,339 --> 00:06:19,149
and then we have shell to kind of smooth

00:06:16,899 --> 00:06:21,639
out the rocks in between so an issue we

00:06:19,149 --> 00:06:23,349
had is our issue they had and then I

00:06:21,639 --> 00:06:24,789
came across as I started working on this

00:06:23,349 --> 00:06:25,870
project is that you know how do you

00:06:24,789 --> 00:06:28,240
handle all these different languages

00:06:25,870 --> 00:06:33,189
with one tool and basil was what stepped

00:06:28,240 --> 00:06:34,990
up to the job for us the oh and it's

00:06:33,189 --> 00:06:37,839
also possible to write the apologies in

00:06:34,990 --> 00:06:39,759
Java C++ and Python but no matter what

00:06:37,839 --> 00:06:42,699
type of topology right it's going to be

00:06:39,759 --> 00:06:43,450
managed by a JVM process for now there

00:06:42,699 --> 00:06:44,950
is

00:06:43,450 --> 00:06:49,300
something in the roadmap to take that

00:06:44,950 --> 00:06:53,050
away but that's what it is for now so

00:06:49,300 --> 00:06:54,250
when the time came to design hair on you

00:06:53,050 --> 00:06:55,330
know the team got together and they

00:06:54,250 --> 00:06:56,800
thought about could we want to write a

00:06:55,330 --> 00:06:59,920
scheduler do we want to write a state

00:06:56,800 --> 00:07:01,300
management what about metrics and with

00:06:59,920 --> 00:07:03,010
the time they had allotted to get this

00:07:01,300 --> 00:07:04,750
project done they decided that it was

00:07:03,010 --> 00:07:08,290
best to focus on what Heron was going to

00:07:04,750 --> 00:07:09,880
do and they were stream data so hearing

00:07:08,290 --> 00:07:12,550
has implementations for running on top

00:07:09,880 --> 00:07:14,020
of kubernetes Apache Meadows it runs in

00:07:12,550 --> 00:07:16,600
production at Twitter right now on

00:07:14,020 --> 00:07:18,100
Apache Aurora state management is

00:07:16,600 --> 00:07:19,780
zookeeper and then you can plug in

00:07:18,100 --> 00:07:21,400
metric metrics things such as Prometheus

00:07:19,780 --> 00:07:24,790
and refiner and then visualize those

00:07:21,400 --> 00:07:26,320
would Prometheus ingre fauna medius and

00:07:24,790 --> 00:07:31,210
graphite and then visualize those with

00:07:26,320 --> 00:07:33,970
Pro fauna so I had this project I was

00:07:31,210 --> 00:07:36,520
working on had a high had a high need

00:07:33,970 --> 00:07:39,910
for real-time transactions like with

00:07:36,520 --> 00:07:41,560
within 20 milliseconds and we there was

00:07:39,910 --> 00:07:44,290
this homegrown streaming framework that

00:07:41,560 --> 00:07:46,030
had kind of gone out of control hard to

00:07:44,290 --> 00:07:47,770
manage it was you know as developers

00:07:46,030 --> 00:07:49,210
left there was patches put on top of

00:07:47,770 --> 00:07:51,820
code that was already there and you know

00:07:49,210 --> 00:07:55,500
as your typical project that had silo

00:07:51,820 --> 00:07:57,820
teams working on stuff so we came in and

00:07:55,500 --> 00:07:59,820
he had to design a new system from

00:07:57,820 --> 00:08:02,890
scratch but a requirement we had is that

00:07:59,820 --> 00:08:06,070
topologies had to be designed in a way

00:08:02,890 --> 00:08:10,120
that they weren't written in code fun

00:08:06,070 --> 00:08:11,710
right so how did the out of the gate at

00:08:10,120 --> 00:08:13,420
that point in time a patchy storm had

00:08:11,710 --> 00:08:17,230
something called flux which allowed for

00:08:13,420 --> 00:08:18,250
a camel's back to define topology and

00:08:17,230 --> 00:08:22,540
how data can flow through those

00:08:18,250 --> 00:08:24,400
topologies and in my own selfish meat

00:08:22,540 --> 00:08:26,410
way you know we decided to go a storm

00:08:24,400 --> 00:08:28,060
for the project because it had flux but

00:08:26,410 --> 00:08:30,400
I decided to go off on my own and write

00:08:28,060 --> 00:08:32,110
eco so that when storm didn't work we

00:08:30,400 --> 00:08:34,120
could bring eco up and run all of our

00:08:32,110 --> 00:08:35,229
existing topologies and flux and bring

00:08:34,120 --> 00:08:41,290
them over into eco and it would just

00:08:35,229 --> 00:08:43,180
work so right away you know your your

00:08:41,290 --> 00:08:47,080
Apache here on projects is a monolith

00:08:43,180 --> 00:08:48,430
repo so you'll have a bunch of top-level

00:08:47,080 --> 00:08:52,240
directories here rounds can be where

00:08:48,430 --> 00:08:54,790
most of the code is and then for more of

00:08:52,240 --> 00:08:56,260
the third party or the external code

00:08:54,790 --> 00:08:57,190
you'll have your storm compatibility

00:08:56,260 --> 00:08:59,200
which offers all

00:08:57,190 --> 00:09:01,120
your storm files and then you'll have

00:08:59,200 --> 00:09:02,230
eco which is all your eco files and

00:09:01,120 --> 00:09:04,000
you'll have docker and you'll have

00:09:02,230 --> 00:09:07,810
scripts for you know building the

00:09:04,000 --> 00:09:08,350
project so forth so while bringing this

00:09:07,810 --> 00:09:12,400
in

00:09:08,350 --> 00:09:14,890
I had to Apache here on has has three

00:09:12,400 --> 00:09:17,500
outputs right now has an install script

00:09:14,890 --> 00:09:20,740
it has a hair on maven artifact and has

00:09:17,500 --> 00:09:22,390
a storm compatibility artifact and the

00:09:20,740 --> 00:09:23,980
challenge I had while drinking from the

00:09:22,390 --> 00:09:25,240
fire hose trying to understand how Heron

00:09:23,980 --> 00:09:27,130
worked and how Bay isn't work was

00:09:25,240 --> 00:09:28,480
trained to include eco into the storm

00:09:27,130 --> 00:09:30,640
compatibility artifact

00:09:28,480 --> 00:09:32,470
even though eco was dependent on storm

00:09:30,640 --> 00:09:36,360
compatibility which caused that cyclical

00:09:32,470 --> 00:09:40,390
recursion and it caused a lot of issues

00:09:36,360 --> 00:09:41,290
so the way way I had to structure eco is

00:09:40,390 --> 00:09:43,180
we have a you know I have a couple

00:09:41,290 --> 00:09:45,550
packages well we have a top-level

00:09:43,180 --> 00:09:48,490
package and then within each package we

00:09:45,550 --> 00:09:51,460
have you know different blocked off

00:09:48,490 --> 00:09:52,480
paces places of functionality and each

00:09:51,460 --> 00:09:54,790
one of those is going to be a Java

00:09:52,480 --> 00:09:57,100
library that are all rolled up into a

00:09:54,790 --> 00:10:01,150
final output which includes that

00:09:57,100 --> 00:10:02,890
top-level eco class in the and in the

00:10:01,150 --> 00:10:07,300
final library so if you see here we have

00:10:02,890 --> 00:10:08,710
some some dependencies for eco and it's

00:10:07,300 --> 00:10:10,720
a very abbreviated list but I got a

00:10:08,710 --> 00:10:13,000
snaky ammo and then I have this link

00:10:10,720 --> 00:10:16,930
here to storm compatibility never link

00:10:13,000 --> 00:10:18,220
this is the key to causing basil not to

00:10:16,930 --> 00:10:19,660
blow up when you try to include a

00:10:18,220 --> 00:10:22,090
dependency that's dependent on another

00:10:19,660 --> 00:10:23,590
dependency and then within each one of

00:10:22,090 --> 00:10:25,600
these packages will have a jive alive

00:10:23,590 --> 00:10:27,820
Java library specific to that package

00:10:25,600 --> 00:10:30,970
which creates an artifact which you hear

00:10:27,820 --> 00:10:33,100
at the bottom you'll see our final final

00:10:30,970 --> 00:10:35,380
output is eco Java which references that

00:10:33,100 --> 00:10:38,500
top-level eco file and then references

00:10:35,380 --> 00:10:40,780
all of the other dependent libraries

00:10:38,500 --> 00:10:43,800
that were left out for brevity there

00:10:40,780 --> 00:10:46,930
wasn't enough room to show on the slide

00:10:43,800 --> 00:10:50,530
so then over in storm compatibility I

00:10:46,930 --> 00:10:52,360
had to add a separate library that was a

00:10:50,530 --> 00:10:54,310
complete copy of what the storm what the

00:10:52,360 --> 00:10:56,980
Java library was but I had to add that

00:10:54,310 --> 00:10:58,540
never link flag equal to one so that it

00:10:56,980 --> 00:11:00,880
wouldn't cause that issue when I tried

00:10:58,540 --> 00:11:04,720
to build eco but then you'll see down

00:11:00,880 --> 00:11:07,120
below we have this unshaded java binary

00:11:04,720 --> 00:11:08,950
that includes eco which is then uploaded

00:11:07,120 --> 00:11:10,510
in the maven with discharger our binary

00:11:08,950 --> 00:11:12,100
rolled and does some

00:11:10,510 --> 00:11:18,550
moving a class pass and makes a

00:11:12,100 --> 00:11:19,870
production-ready bill so I got eco

00:11:18,550 --> 00:11:21,340
figured out and then it was time we

00:11:19,870 --> 00:11:25,900
actually build the whole project and

00:11:21,340 --> 00:11:31,090
bring this into a whole and we have we

00:11:25,900 --> 00:11:32,710
we reused a lot of package stars and the

00:11:31,090 --> 00:11:35,380
script I'm going to focus on is this

00:11:32,710 --> 00:11:38,200
basal build - - config equals Darwin

00:11:35,380 --> 00:11:40,330
scripts / baggages bin packages right

00:11:38,200 --> 00:11:43,420
now we support hair on for scent OS

00:11:40,330 --> 00:11:45,100
Ubuntu and Darwin building for platforms

00:11:43,420 --> 00:11:46,720
fairly simply just pass the config flag

00:11:45,100 --> 00:11:48,880
and then we just know how to take care

00:11:46,720 --> 00:11:53,470
of you know how executables be placed in

00:11:48,880 --> 00:11:55,860
your path okay you guys cut over to my

00:11:53,470 --> 00:11:55,860
computer

00:12:01,850 --> 00:12:05,259
oh that's not good

00:12:09,690 --> 00:12:13,050
here we go

00:12:16,420 --> 00:12:21,580
so I want to show you is we have a

00:12:18,850 --> 00:12:22,330
install script that is generated and

00:12:21,580 --> 00:12:24,370
actually I

00:12:22,330 --> 00:12:25,900
I also upgrade a Basel about a week are

00:12:24,370 --> 00:12:28,960
going to broke my entire build so that's

00:12:25,900 --> 00:12:30,940
another thing to work through it's going

00:12:28,960 --> 00:12:32,230
to show you what the artifact is so

00:12:30,940 --> 00:12:33,820
basically you run this hair and install

00:12:32,230 --> 00:12:35,500
script and it's going to install this

00:12:33,820 --> 00:12:38,380
stuff in your path it's going to

00:12:35,500 --> 00:12:41,410
uncompress at rgz file or a couple of

00:12:38,380 --> 00:12:43,630
them print out some versions and some

00:12:41,410 --> 00:12:45,070
generated times that are you know from

00:12:43,630 --> 00:12:46,780
when the build was completed and then

00:12:45,070 --> 00:12:49,240
you have hair on in your path for a

00:12:46,780 --> 00:12:55,450
workstation can you cut back over to the

00:12:49,240 --> 00:12:57,790
slides please so the output of that

00:12:55,450 --> 00:12:59,890
comes from this so we have a file group

00:12:57,790 --> 00:13:01,630
that references the self extract binary

00:12:59,890 --> 00:13:03,450
which goes to this package tar which

00:13:01,630 --> 00:13:05,680
loops around to this other package tar

00:13:03,450 --> 00:13:07,450
drops down here this other package tar

00:13:05,680 --> 00:13:09,460
squiggles over to another one and then

00:13:07,450 --> 00:13:12,000
loops around up here to a macro that

00:13:09,460 --> 00:13:18,400
references some Python and C++ files

00:13:12,000 --> 00:13:19,870
there so stepping in I'm so what I plan

00:13:18,400 --> 00:13:21,190
to do is I'm gonna take that command I'm

00:13:19,870 --> 00:13:24,100
gonna roll back all the way down to some

00:13:21,190 --> 00:13:25,960
source code I'm gonna step through the

00:13:24,100 --> 00:13:27,670
tar packages or the package stars just

00:13:25,960 --> 00:13:29,710
so you can see how we can hook up one

00:13:27,670 --> 00:13:31,750
path of them but then I'm gonna go

00:13:29,710 --> 00:13:34,800
in-depth into this custom rule that does

00:13:31,750 --> 00:13:37,840
all the work to generate in the script

00:13:34,800 --> 00:13:40,090
so our binge package target our bin

00:13:37,840 --> 00:13:41,620
packages target is just a file group

00:13:40,090 --> 00:13:45,760
that references us hair and install

00:13:41,620 --> 00:13:46,900
script which is output from this custom

00:13:45,760 --> 00:13:49,840
rule and I'll come back to the

00:13:46,900 --> 00:13:51,700
implementation front of this but for

00:13:49,840 --> 00:13:53,110
right now we have a couple attributes we

00:13:51,700 --> 00:13:56,200
have the name which will be the output

00:13:53,110 --> 00:14:00,400
file flatten resources which is it takes

00:13:56,200 --> 00:14:01,690
a package tar which will it'll basically

00:14:00,400 --> 00:14:04,030
pull the files out and put them in an

00:14:01,690 --> 00:14:05,440
expected directory structure and then we

00:14:04,030 --> 00:14:06,880
have the launcher script which actually

00:14:05,440 --> 00:14:09,160
does all the work which move stuff

00:14:06,880 --> 00:14:11,710
around install stuff checks Java checks

00:14:09,160 --> 00:14:13,210
Python and so forth so I'm going to kind

00:14:11,710 --> 00:14:14,860
of branch off and come back to this

00:14:13,210 --> 00:14:20,110
moment step down to the package star

00:14:14,860 --> 00:14:23,010
path for now so this package start

00:14:20,110 --> 00:14:25,510
reference is a Heron tar.gz and it has

00:14:23,010 --> 00:14:27,740
some sources which are a release that

00:14:25,510 --> 00:14:29,660
you Amal it's just your

00:14:27,740 --> 00:14:32,510
you saw you saw it up on the council was

00:14:29,660 --> 00:14:34,010
when the bill was generated what server

00:14:32,510 --> 00:14:36,350
its had and so forth and then it's got

00:14:34,010 --> 00:14:38,810
some dependencies which are all tar.gz

00:14:36,350 --> 00:14:40,640
files so I'm gonna step into the hair on

00:14:38,810 --> 00:14:43,550
disk which is a package tar which cut

00:14:40,640 --> 00:14:46,310
some sources that it packages up in the

00:14:43,550 --> 00:14:48,110
disk folder from another tar.gz file

00:14:46,310 --> 00:14:50,570
which we'll go through which is

00:14:48,110 --> 00:14:52,730
dependent on other tar.gz files as well

00:14:50,570 --> 00:14:54,680
as that release that IMO and then

00:14:52,730 --> 00:14:57,880
finally you get this last package tar

00:14:54,680 --> 00:15:00,350
which is which is there's only one path

00:14:57,880 --> 00:15:02,660
gets its sources from a macro which

00:15:00,350 --> 00:15:06,920
references a bunch of Python and C++

00:15:02,660 --> 00:15:08,510
targets so if you step back we have this

00:15:06,920 --> 00:15:10,370
self extract binary and we just went

00:15:08,510 --> 00:15:11,630
through that whole mind-numbing thing of

00:15:10,370 --> 00:15:14,180
you know going through all the package

00:15:11,630 --> 00:15:16,760
stars now let's step into what the

00:15:14,180 --> 00:15:19,670
launcher is the launcher is an output

00:15:16,760 --> 00:15:22,310
from a general and it takes some sources

00:15:19,670 --> 00:15:24,530
which is template been template

00:15:22,310 --> 00:15:26,750
underscore been been underscore common

00:15:24,530 --> 00:15:28,400
and then that handy generated release

00:15:26,750 --> 00:15:30,950
file which is a release diamo

00:15:28,400 --> 00:15:33,200
and what this what this general does is

00:15:30,950 --> 00:15:35,120
it cats out all of the contents of those

00:15:33,200 --> 00:15:37,490
files into some bash variables and then

00:15:35,120 --> 00:15:41,300
echoes them out into this final output

00:15:37,490 --> 00:15:43,730
which has launcher underscore been in

00:15:41,300 --> 00:15:44,870
case I didn't say been got could been

00:15:43,730 --> 00:15:47,150
underscore common will do some

00:15:44,870 --> 00:15:48,680
environment checks for Java Python so

00:15:47,150 --> 00:15:54,410
forth and then launcher benda or

00:15:48,680 --> 00:15:58,070
template Ben does all the work so if we

00:15:54,410 --> 00:15:59,990
get into the definition of the rule or

00:15:58,070 --> 00:16:01,640
the declaration of the rule we have some

00:15:59,990 --> 00:16:03,080
attributes the only ones we're going to

00:16:01,640 --> 00:16:07,040
worry about is the launcher and the

00:16:03,080 --> 00:16:08,330
flatten resources so specifically here

00:16:07,040 --> 00:16:10,430
if you look at flattened resource is

00:16:08,330 --> 00:16:12,440
going to go through and the this is the

00:16:10,430 --> 00:16:13,940
definition of the rule by the way it's

00:16:12,440 --> 00:16:16,640
going to go through and it's going to

00:16:13,940 --> 00:16:19,760
copy these all these files into a temp

00:16:16,640 --> 00:16:21,920
directory and then finally in the second

00:16:19,760 --> 00:16:23,540
action or in this first action it's

00:16:21,920 --> 00:16:25,280
going to output all these files after

00:16:23,540 --> 00:16:26,840
goes through does a bunch of bash and

00:16:25,280 --> 00:16:30,320
it's going to output this into a zip

00:16:26,840 --> 00:16:32,240
artifact target or zip zip underscore

00:16:30,320 --> 00:16:34,970
artifact output which can then be

00:16:32,240 --> 00:16:37,580
referenced from another action which

00:16:34,970 --> 00:16:39,590
then cats all those contents out of the

00:16:37,580 --> 00:16:41,180
launcher script and then all the binary

00:16:39,590 --> 00:16:47,140
from that tar.gz file

00:16:41,180 --> 00:16:47,140
to one self extractable install script

00:16:50,890 --> 00:16:55,880
so I took some time and I was trying to

00:16:54,500 --> 00:16:57,170
you know think of something to kind of

00:16:55,880 --> 00:16:59,750
come up and show something really cool

00:16:57,170 --> 00:17:01,280
with basil and hair on and I I found out

00:16:59,750 --> 00:17:02,990
about you know the whole action graph

00:17:01,280 --> 00:17:06,710
and you know the dependency graph you

00:17:02,990 --> 00:17:07,910
can generate with with basil and so this

00:17:06,710 --> 00:17:09,530
is you know a very simple one I

00:17:07,910 --> 00:17:11,420
generated you know I found this online

00:17:09,530 --> 00:17:13,730
and a copy and paste it into a tool

00:17:11,420 --> 00:17:16,550
which i think is called visual graph Wiz

00:17:13,730 --> 00:17:21,560
and I said I'm gonna do this with Heron

00:17:16,550 --> 00:17:23,180
this is what I got and this is actually

00:17:21,560 --> 00:17:24,680
a screenshot of the actual image because

00:17:23,180 --> 00:17:28,940
the image was so big I couldn't load it

00:17:24,680 --> 00:17:31,940
into Google slides so I found a way to

00:17:28,940 --> 00:17:33,140
generate an SVG and the image was so big

00:17:31,940 --> 00:17:35,030
there was no way I could've shown you

00:17:33,140 --> 00:17:38,600
anything of value so I decided to focus

00:17:35,030 --> 00:17:40,040
in on just one target and you see all

00:17:38,600 --> 00:17:41,810
those dark in that dark line that's all

00:17:40,040 --> 00:17:50,000
several lines crossing over each other

00:17:41,810 --> 00:17:53,810
but it's it's a very complex system so

00:17:50,000 --> 00:17:56,390
overall you know I've I took the time to

00:17:53,810 --> 00:17:58,640
transition from this whole you know

00:17:56,390 --> 00:18:00,920
Apache hair on basil way of thinking

00:17:58,640 --> 00:18:02,390
from you know traditional maven mindset

00:18:00,920 --> 00:18:03,950
I think one of the first things I came

00:18:02,390 --> 00:18:07,040
up with was like where's my m2 directory

00:18:03,950 --> 00:18:10,490
I couldn't find and I've come to really

00:18:07,040 --> 00:18:13,160
appreciate what basil has to offer I

00:18:10,490 --> 00:18:15,530
like the the notion of hermetic builds I

00:18:13,160 --> 00:18:18,710
found out that I don't think Heron is

00:18:15,530 --> 00:18:20,510
actually a very hermetic this week but I

00:18:18,710 --> 00:18:22,730
think I found some ways to improve that

00:18:20,510 --> 00:18:25,520
while sitting here I like that you can

00:18:22,730 --> 00:18:28,490
build multiple languages as one tool and

00:18:25,520 --> 00:18:30,050
then I love remote caching you know I

00:18:28,490 --> 00:18:36,740
think cutting a release for Heron will

00:18:30,050 --> 00:18:38,060
take 45 minutes to an hour you know

00:18:36,740 --> 00:18:39,800
being able to cut that down to 5 minutes

00:18:38,060 --> 00:18:41,270
was pretty cool cuz you know I am the

00:18:39,800 --> 00:18:42,920
king of messing something up you know I

00:18:41,270 --> 00:18:45,550
you know I mistyped something and blow

00:18:42,920 --> 00:18:49,070
off the whole project that's terrible

00:18:45,550 --> 00:18:51,380
some of the issues I found so far this

00:18:49,070 --> 00:18:53,150
is basil version compatibility sometimes

00:18:51,380 --> 00:18:54,830
you know and maybe this is just my

00:18:53,150 --> 00:18:56,030
knowledge of the tool you

00:18:54,830 --> 00:18:57,950
enough is that you know I'll upgrade

00:18:56,030 --> 00:19:00,860
basil and it totally break my entire

00:18:57,950 --> 00:19:03,680
build and sometimes I can work through

00:19:00,860 --> 00:19:06,230
it sometimes I can't and as a developer

00:19:03,680 --> 00:19:08,870
I'm really lazy oh I love that I can

00:19:06,230 --> 00:19:10,820
search for search for an answer and get

00:19:08,870 --> 00:19:13,190
500 results right now I think community

00:19:10,820 --> 00:19:14,450
use is a little thin but I think over

00:19:13,190 --> 00:19:15,860
the years as you know people aren't

00:19:14,450 --> 00:19:20,180
start to understand how great this tool

00:19:15,860 --> 00:19:22,490
is it'll pick up a lot over the years so

00:19:20,180 --> 00:19:25,670
you went through what the process was a

00:19:22,490 --> 00:19:27,980
building here on we went through you

00:19:25,670 --> 00:19:29,570
know some experience I had with working

00:19:27,980 --> 00:19:31,370
with eco and actually creating this

00:19:29,570 --> 00:19:35,420
whole entire build install script and

00:19:31,370 --> 00:19:37,340
then you ended up here so you know I

00:19:35,420 --> 00:19:39,550
really appreciate your time thank you so

00:19:37,340 --> 00:19:39,550
much

00:19:39,950 --> 00:19:47,140

YouTube URL: https://www.youtube.com/watch?v=yBTSfA4YDtY


