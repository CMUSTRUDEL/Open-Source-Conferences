Title: BazelCon 2018 Day 2: Generating BUILD Files
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	Benjamin Peterson (Dropbox) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Benjamin Peterson;
Captions: 
	00:00:04,250 --> 00:00:09,600
all right uh hello everyone thank you

00:00:07,410 --> 00:00:11,400
very much for coming I'm I'm very

00:00:09,600 --> 00:00:14,520
pleased that you came to my talk even

00:00:11,400 --> 00:00:16,260
though that was your only option I'm

00:00:14,520 --> 00:00:18,720
really happy to be here I'm really happy

00:00:16,260 --> 00:00:20,100
to be in New York so last year we were

00:00:18,720 --> 00:00:22,440
in Sunnyvale of course which really

00:00:20,100 --> 00:00:25,620
really pales in comparison as a as a

00:00:22,440 --> 00:00:27,960
conference location you know you can you

00:00:25,620 --> 00:00:29,640
can construe it all expenses trade paid

00:00:27,960 --> 00:00:32,039
trip to New York as some sort of

00:00:29,640 --> 00:00:33,930
boondoggle whereas getting an all

00:00:32,039 --> 00:00:38,790
expenses paid trip to Sunnyvale is a bit

00:00:33,930 --> 00:00:43,200
like receiving a free a free all month

00:00:38,790 --> 00:00:45,030
long supply of cabbage or something but

00:00:43,200 --> 00:00:46,500
maybe I shouldn't be so done on down on

00:00:45,030 --> 00:00:47,730
selling your Sunnyvale I mean it's a

00:00:46,500 --> 00:00:50,160
great place to be if you want to be a

00:00:47,730 --> 00:00:54,120
defense contractor not that it would

00:00:50,160 --> 00:00:58,890
interest anyone in this room all right

00:00:54,120 --> 00:01:00,690
so I'm here from Dropbox I'm here to

00:00:58,890 --> 00:01:03,809
talk about some of the tooling we've

00:01:00,690 --> 00:01:05,850
developed around Basel at Dropbox and so

00:01:03,809 --> 00:01:08,969
we're pretty big users of Basel we were

00:01:05,850 --> 00:01:11,189
kind of early adopters we started using

00:01:08,969 --> 00:01:12,659
it in 2015 when it when it was first

00:01:11,189 --> 00:01:14,999
released and we've been using

00:01:12,659 --> 00:01:18,780
intensively for a few years now since

00:01:14,999 --> 00:01:20,579
then to give you some sense of how into

00:01:18,780 --> 00:01:22,020
we've got we've gotten into Basel last

00:01:20,579 --> 00:01:24,090
just last week someone was telling me

00:01:22,020 --> 00:01:28,380
about how great it is to configure their

00:01:24,090 --> 00:01:29,759
their C++ actions with cross tools and

00:01:28,380 --> 00:01:32,310
so if you know I think about cross tools

00:01:29,759 --> 00:01:37,490
you know that we have really drugged the

00:01:32,310 --> 00:01:42,599
basil kool-aid or we're just twisted but

00:01:37,490 --> 00:01:49,380
we we really like what basil has has

00:01:42,599 --> 00:01:51,869
given us and we like one of the reasons

00:01:49,380 --> 00:01:53,819
is we force everyone all of our server

00:01:51,869 --> 00:01:54,959
software to be built with basil everyone

00:01:53,819 --> 00:01:58,229
has to use it whether they like it or

00:01:54,959 --> 00:02:00,149
not most of them do like it so recent

00:01:58,229 --> 00:02:02,849
survey we asked developers what their

00:02:00,149 --> 00:02:04,369
favorite developer tools were and basil

00:02:02,849 --> 00:02:07,590
turned out to be the second most loved

00:02:04,369 --> 00:02:09,750
developer tool sometimes I think the

00:02:07,590 --> 00:02:11,790
correct order or a correct title here

00:02:09,750 --> 00:02:13,950
would be a second least hated developer

00:02:11,790 --> 00:02:15,950
tool especially since number one was

00:02:13,950 --> 00:02:21,270
hard liquor

00:02:15,950 --> 00:02:22,800
but you know it it's a it's a it's a

00:02:21,270 --> 00:02:24,750
philosophy of mind that if you can't

00:02:22,800 --> 00:02:26,069
give developers tools that they love you

00:02:24,750 --> 00:02:29,190
should at least give developers tools

00:02:26,069 --> 00:02:30,930
they find pretty okay or allow them to

00:02:29,190 --> 00:02:33,360
reach dissociative States and where they

00:02:30,930 --> 00:02:37,459
find everything pretty okay so we'll

00:02:33,360 --> 00:02:43,410
take what we'll get and when we were

00:02:37,459 --> 00:02:44,700
converting our code base to to Basel we

00:02:43,410 --> 00:02:47,700
started writing in a huge amount of

00:02:44,700 --> 00:02:49,860
build files and so currently we have 52

00:02:47,700 --> 00:02:52,799
megabytes of build files in our main

00:02:49,860 --> 00:02:55,019
repository which is kind of a lot and we

00:02:52,799 --> 00:02:59,040
had a lot of code even when we were

00:02:55,019 --> 00:03:00,390
started our conversion and when we were

00:02:59,040 --> 00:03:01,980
doing the converter we found writing

00:03:00,390 --> 00:03:03,690
manually writing bill clouds to be

00:03:01,980 --> 00:03:06,209
error-prone and time-consuming and

00:03:03,690 --> 00:03:08,580
boring work for humans to do so one of

00:03:06,209 --> 00:03:13,440
our engineers wrote a build file

00:03:08,580 --> 00:03:14,910
generator which it was enormous ly

00:03:13,440 --> 00:03:17,640
useful in doing our initial migration

00:03:14,910 --> 00:03:20,970
into Basel and such that we integrated

00:03:17,640 --> 00:03:23,489
it into our build workflow so this talk

00:03:20,970 --> 00:03:26,400
is about our build file generator but

00:03:23,489 --> 00:03:27,750
before I introduce you to especially our

00:03:26,400 --> 00:03:30,230
build file January I need to tell you a

00:03:27,750 --> 00:03:34,680
little bit more about our tooling around

00:03:30,230 --> 00:03:36,900
Basel so most of our tooling build

00:03:34,680 --> 00:03:39,780
tooling goes through a tool called bzl

00:03:36,900 --> 00:03:41,579
so we're not very creative at naming so

00:03:39,780 --> 00:03:43,430
we just took basil and drop the vowels

00:03:41,579 --> 00:03:46,709
from it to create a new name

00:03:43,430 --> 00:03:49,079
most people say bzl to refer this tool

00:03:46,709 --> 00:03:53,400
if you're not an American you're allowed

00:03:49,079 --> 00:03:55,709
to say bzl some people try to pronounce

00:03:53,400 --> 00:03:57,000
the entire word by saying bizzle but i

00:03:55,709 --> 00:04:00,750
think it sounds like an infectious

00:03:57,000 --> 00:04:05,130
disease or some sort of stinging insect

00:04:00,750 --> 00:04:06,720
so I'm going to stick with bzl and bzl

00:04:05,130 --> 00:04:09,600
has a bunch of functionality and

00:04:06,720 --> 00:04:11,880
subcommands probably the most basic is

00:04:09,600 --> 00:04:13,859
that it wraps basil so if you call bzl

00:04:11,880 --> 00:04:16,470
with a sub command out as the same as a

00:04:13,859 --> 00:04:19,079
basil command like build or test or run

00:04:16,470 --> 00:04:21,269
that we just shell out two basil and

00:04:19,079 --> 00:04:23,880
execute that and let basil handle it

00:04:21,269 --> 00:04:25,530
and the reason for this is that it

00:04:23,880 --> 00:04:27,270
provides consistency to our developers

00:04:25,530 --> 00:04:29,790
developers don't have to know whether

00:04:27,270 --> 00:04:33,120
bzl or basil in poets

00:04:29,790 --> 00:04:34,620
functionality they're looking for and it

00:04:33,120 --> 00:04:36,270
allows us to do some light wrapping a

00:04:34,620 --> 00:04:37,590
bail so we can do system checking to

00:04:36,270 --> 00:04:39,720
make sure the development environment is

00:04:37,590 --> 00:04:41,640
set up correctly and also some blogging

00:04:39,720 --> 00:04:43,950
so we can keep track of whatever

00:04:41,640 --> 00:04:47,160
developers are doing something more

00:04:43,950 --> 00:04:51,510
interesting that bzl does is sub command

00:04:47,160 --> 00:04:54,180
called I test so I test looks is capable

00:04:51,510 --> 00:04:55,950
of setting up a complex integration

00:04:54,180 --> 00:04:57,420
environment full of services which have

00:04:55,950 --> 00:05:00,210
various dependencies between themselves

00:04:57,420 --> 00:05:02,340
I'm bringing up reliably and so this is

00:05:00,210 --> 00:05:04,020
how our developer is a write complicated

00:05:02,340 --> 00:05:06,900
integration test and also do a

00:05:04,020 --> 00:05:08,760
development and in fact this is a talk

00:05:06,900 --> 00:05:11,520
of its own which we gave last year at

00:05:08,760 --> 00:05:14,580
basil con so I refer you to that talk if

00:05:11,520 --> 00:05:17,430
you want to learn more about bzl I test

00:05:14,580 --> 00:05:20,580
what we're interested in today is a sub

00:05:17,430 --> 00:05:23,610
command called gen so PCL gen is a

00:05:20,580 --> 00:05:27,180
multi-purpose build file generator it

00:05:23,610 --> 00:05:30,390
supports generating build files for all

00:05:27,180 --> 00:05:33,090
of our most commonly used languages and

00:05:30,390 --> 00:05:35,600
I'm gonna show it show it show it to you

00:05:33,090 --> 00:05:38,280
how it works with over a series of

00:05:35,600 --> 00:05:40,110
examples so the first language I want to

00:05:38,280 --> 00:05:44,940
talk about generating build files for is

00:05:40,110 --> 00:05:47,220
go and of course there's there's prior

00:05:44,940 --> 00:05:50,700
and open source art about this including

00:05:47,220 --> 00:05:53,370
gazelle but we have a a little bit of a

00:05:50,700 --> 00:05:55,500
different take on this as you'll see but

00:05:53,370 --> 00:05:58,740
the first thing to say about generative

00:05:55,500 --> 00:06:02,220
build files for go is that the goat

00:05:58,740 --> 00:06:04,470
built in native language tooling of go

00:06:02,220 --> 00:06:06,930
is pretty good already so most of it is

00:06:04,470 --> 00:06:08,640
mediated through a tool called go which

00:06:06,930 --> 00:06:11,310
has build and test commence of commands

00:06:08,640 --> 00:06:13,410
like like basil and actually works quite

00:06:11,310 --> 00:06:17,010
a bit like like basil out of the box and

00:06:13,410 --> 00:06:19,590
a lot of this is happens because basil

00:06:17,010 --> 00:06:23,130
has earth go has very strong conventions

00:06:19,590 --> 00:06:26,190
about how code should be laid out so the

00:06:23,130 --> 00:06:29,160
basic unit of organization in go is a go

00:06:26,190 --> 00:06:31,260
package which is simply a set of go

00:06:29,160 --> 00:06:32,940
files in a directory and if you want one

00:06:31,260 --> 00:06:34,650
package to depend on another you just

00:06:32,940 --> 00:06:36,930
write an import statement which imports

00:06:34,650 --> 00:06:38,940
that package the directories file system

00:06:36,930 --> 00:06:41,100
path and because of these very strong

00:06:38,940 --> 00:06:43,630
and simple conventions of the go tool is

00:06:41,100 --> 00:06:46,240
able to do its work building and testing

00:06:43,630 --> 00:06:49,420
without any extra metadata like a build

00:06:46,240 --> 00:06:50,950
file so because of the simplicity if you

00:06:49,420 --> 00:06:52,180
take a person who's been developing go

00:06:50,950 --> 00:06:53,560
for a while they're gonna be pretty

00:06:52,180 --> 00:06:56,440
resistant to having to write a build

00:06:53,560 --> 00:06:58,330
file because they're used to just having

00:06:56,440 --> 00:07:00,030
this all inferred by the go tool some

00:06:58,330 --> 00:07:01,990
people will tell you that they're

00:07:00,030 --> 00:07:04,900
writing a build file interferes with

00:07:01,990 --> 00:07:08,140
their go routine so we don't want to do

00:07:04,900 --> 00:07:10,390
that so generating build files for go is

00:07:08,140 --> 00:07:12,700
a very attractive target both because of

00:07:10,390 --> 00:07:14,740
the simplicity and because of the the

00:07:12,700 --> 00:07:17,650
ability to ease the migration to DES

00:07:14,740 --> 00:07:21,240
basil for four go programmers so I have

00:07:17,650 --> 00:07:24,460
a little example of how to generate go

00:07:21,240 --> 00:07:26,410
and since all the cool kids these days

00:07:24,460 --> 00:07:28,600
are writing their mission-critical

00:07:26,410 --> 00:07:31,750
applications and go I decided to write a

00:07:28,600 --> 00:07:35,020
nuclear missile launcher and go so here

00:07:31,750 --> 00:07:37,210
it is we're not actually too interested

00:07:35,020 --> 00:07:40,420
in the imperative part of my nuclear

00:07:37,210 --> 00:07:42,670
button basically it opens a target's

00:07:40,420 --> 00:07:44,950
file which has a bunch of target cities

00:07:42,670 --> 00:07:47,590
in it it reads it and then it opens a

00:07:44,950 --> 00:07:51,280
missile silo and and and sends them to

00:07:47,590 --> 00:07:54,400
their death what we're interested in I

00:07:51,280 --> 00:07:56,230
and so is the build file generator is

00:07:54,400 --> 00:07:58,840
the import statement at the top of this

00:07:56,230 --> 00:08:00,490
file so there's four imports three of

00:07:58,840 --> 00:08:02,460
them are from the ghost standard library

00:08:00,490 --> 00:08:04,300
and one of them is of a missile silo

00:08:02,460 --> 00:08:07,210
which we're assuming there's another

00:08:04,300 --> 00:08:11,830
package that I wrote to store to store

00:08:07,210 --> 00:08:15,940
my weapons so let's generate a build

00:08:11,830 --> 00:08:18,220
file for this to do that I use bzl gen

00:08:15,940 --> 00:08:20,350
and I just pass it the package they want

00:08:18,220 --> 00:08:22,750
to generate a build file for so the

00:08:20,350 --> 00:08:25,300
thing you'll notice is that bzl gen is a

00:08:22,750 --> 00:08:28,990
well-behaved unix tool and does not emit

00:08:25,300 --> 00:08:31,560
any output when it is successful and but

00:08:28,990 --> 00:08:31,560
if we

00:08:33,219 --> 00:08:40,729
but if we go look at a nuclear button

00:08:37,400 --> 00:08:42,650
slash build will see that this rule has

00:08:40,729 --> 00:08:44,990
been produced so throughout I'm going to

00:08:42,650 --> 00:08:47,330
be using the drop box version of rolls

00:08:44,990 --> 00:08:49,580
so ones which are prefixed with dbx

00:08:47,330 --> 00:08:52,250
simply because that's what our tool

00:08:49,580 --> 00:08:54,830
works with but the there they're very

00:08:52,250 --> 00:08:57,320
similar to the open source versions of

00:08:54,830 --> 00:08:59,270
rules and also the general basil

00:08:57,320 --> 00:09:01,339
principle so sources and depths do not

00:08:59,270 --> 00:09:05,600
do strange strange unexpected things

00:09:01,339 --> 00:09:07,279
here but you can see that the build file

00:09:05,600 --> 00:09:09,440
generator has figured out this is a a

00:09:07,279 --> 00:09:11,660
binary target so we need to generate a

00:09:09,440 --> 00:09:13,600
binary because its main it's put the

00:09:11,660 --> 00:09:16,430
sources in the right place and it's

00:09:13,600 --> 00:09:18,290
collected the dependencies out of the

00:09:16,430 --> 00:09:22,279
import statement and and turned them

00:09:18,290 --> 00:09:24,950
into basil basil dependencies so you can

00:09:22,279 --> 00:09:26,870
see that like at literally everything in

00:09:24,950 --> 00:09:28,730
this build file is inferable from the

00:09:26,870 --> 00:09:31,220
source which gives you some idea why

00:09:28,730 --> 00:09:32,870
some go primaries are are frustrated

00:09:31,220 --> 00:09:35,570
with with having to write these things

00:09:32,870 --> 00:09:39,529
manually so now we need to check that

00:09:35,570 --> 00:09:42,290
this works right so I'm gonna press my

00:09:39,529 --> 00:09:43,760
nuclear button here with basil Run and I

00:09:42,290 --> 00:09:47,089
prepared a targets list I'm not going to

00:09:43,760 --> 00:09:48,589
tell you what's in there but let's let's

00:09:47,089 --> 00:09:54,860
let's fire this thing up and hit enter

00:09:48,589 --> 00:09:57,560
ah a sky frame of Bel Air Caramba okay

00:09:54,860 --> 00:10:00,529
well well well I mean you know basil

00:09:57,560 --> 00:10:02,420
like certain world leads is is is knows

00:10:00,529 --> 00:10:07,910
it's alpha status and sometimes acts

00:10:02,420 --> 00:10:09,470
unstable but maybe we can try to figure

00:10:07,910 --> 00:10:11,570
out what's going on here at least okay

00:10:09,470 --> 00:10:13,850
so I have some sort of like nested cause

00:10:11,570 --> 00:10:16,010
a legal argument state exception and

00:10:13,850 --> 00:10:21,200
actually you know it's a job a traceback

00:10:16,010 --> 00:10:22,209
so this this goes on and on oh it's

00:10:21,200 --> 00:10:26,720
there

00:10:22,209 --> 00:10:29,150
but then then finally we find that the

00:10:26,720 --> 00:10:32,410
JVM can apparently raise a nuclear

00:10:29,150 --> 00:10:35,089
holocaust illegal state exception but I

00:10:32,410 --> 00:10:38,930
guess it's kind of saved us from our our

00:10:35,089 --> 00:10:40,550
worst impulses yet again alright so we

00:10:38,930 --> 00:10:43,130
didn't actually met me rent managed to

00:10:40,550 --> 00:10:45,620
run my NGO program but we did generate a

00:10:43,130 --> 00:10:46,320
build file for it and it built no it did

00:10:45,620 --> 00:10:49,130
but

00:10:46,320 --> 00:10:54,840
so I'm gonna check that off our list

00:10:49,130 --> 00:10:57,240
let's talk about Python so I did not

00:10:54,840 --> 00:11:00,660
want to write more components of the

00:10:57,240 --> 00:11:02,430
National Defense in Python I to me

00:11:00,660 --> 00:11:06,300
Python is a much more irenic language

00:11:02,430 --> 00:11:09,480
you know then so I fell back on a

00:11:06,300 --> 00:11:14,070
computer science mainstay namely hello

00:11:09,480 --> 00:11:15,330
world for example purposes but I didn't

00:11:14,070 --> 00:11:17,580
want you to think I was too much of a

00:11:15,330 --> 00:11:23,160
horrid promotion so so I implemented

00:11:17,580 --> 00:11:24,630
using tensor flow so so here we go I say

00:11:23,160 --> 00:11:26,580
say hello I so once again we're not

00:11:24,630 --> 00:11:28,140
we're not really so interested in what

00:11:26,580 --> 00:11:30,450
it's actually being executed here

00:11:28,140 --> 00:11:34,560
basically it takes your name in as a

00:11:30,450 --> 00:11:38,460
first argument and then it runs my

00:11:34,560 --> 00:11:39,990
sophisticated neural model and then you

00:11:38,460 --> 00:11:42,090
can even print things and tensorflow so

00:11:39,990 --> 00:11:44,160
I took care of that with with with

00:11:42,090 --> 00:11:46,050
tensor flow but once again what we're

00:11:44,160 --> 00:11:48,450
interested in and what the build file

00:11:46,050 --> 00:11:50,460
generated interested in is these imports

00:11:48,450 --> 00:11:53,460
at the top so you can see there is a

00:11:50,460 --> 00:11:55,260
standard library import sis and then

00:11:53,460 --> 00:11:56,820
there is an import of a global constants

00:11:55,260 --> 00:11:59,070
module which we're going to assume is

00:11:56,820 --> 00:12:02,220
kind of in a different package and a

00:11:59,070 --> 00:12:04,140
local relative import of a model dot PI

00:12:02,220 --> 00:12:06,630
file which is which is in the same

00:12:04,140 --> 00:12:09,090
packages as say hello and then finally

00:12:06,630 --> 00:12:13,110
there's a couple third-party I imports

00:12:09,090 --> 00:12:14,760
to run run my model so python is a

00:12:13,110 --> 00:12:17,520
little more tricky to generate build

00:12:14,760 --> 00:12:21,480
file for than go there's not really the

00:12:17,520 --> 00:12:23,580
same kind of strong convention as as go

00:12:21,480 --> 00:12:24,900
in terms of source code layout so we

00:12:23,580 --> 00:12:26,820
need to provide some hints to the

00:12:24,900 --> 00:12:29,310
generator as to what kind of build file

00:12:26,820 --> 00:12:31,290
we're expecting to get and the way we do

00:12:29,310 --> 00:12:33,780
that is we write a kind of template

00:12:31,290 --> 00:12:36,120
build file which for our build file

00:12:33,780 --> 00:12:38,280
gender is called build that bzl

00:12:36,120 --> 00:12:41,340
so if I want to make a build file for

00:12:38,280 --> 00:12:42,720
this first I have to write a build up

00:12:41,340 --> 00:12:44,850
bzl file with a little bit of

00:12:42,720 --> 00:12:47,430
information about what I'm expecting to

00:12:44,850 --> 00:12:49,830
get so I want to have a binary which

00:12:47,430 --> 00:12:51,750
actually is my program and then I also

00:12:49,830 --> 00:12:53,400
had my model if you'll remember so

00:12:51,750 --> 00:12:56,460
that's going to be in in a separate

00:12:53,400 --> 00:12:58,740
library so I write the rules that I'm

00:12:56,460 --> 00:13:00,000
expecting to get their names and their

00:12:58,740 --> 00:13:01,200
source files but I'm not

00:13:00,000 --> 00:13:03,030
gonna write any of the dependencies

00:13:01,200 --> 00:13:05,190
because that's what I'm gonna let bzl

00:13:03,030 --> 00:13:08,550
Jen actually generate for me so if I go

00:13:05,190 --> 00:13:11,130
and run bzl Jen on slash koel it'll go

00:13:08,550 --> 00:13:13,440
look at this build file and then it will

00:13:11,130 --> 00:13:16,560
go and generate the dependencies and

00:13:13,440 --> 00:13:19,290
fill them in in my in my build file of

00:13:16,560 --> 00:13:21,180
the template so you can see the the

00:13:19,290 --> 00:13:24,120
local model import has been turned into

00:13:21,180 --> 00:13:25,890
a a : import of this library down here

00:13:24,120 --> 00:13:27,650
and we have a correct dependency on

00:13:25,890 --> 00:13:30,870
slash slash global constants and

00:13:27,650 --> 00:13:32,730
furthermore the the third-party imports

00:13:30,870 --> 00:13:34,980
have been handled by redirecting them

00:13:32,730 --> 00:13:37,020
into this slash slash pip namespace so

00:13:34,980 --> 00:13:38,940
we have a convention at Dropbox that all

00:13:37,020 --> 00:13:41,940
of our third-party pipeline code goes in

00:13:38,940 --> 00:13:43,800
a slash slash pip and our our build file

00:13:41,940 --> 00:13:46,080
generator is aware of it and can handle

00:13:43,800 --> 00:13:48,420
third-party code by by redirecting

00:13:46,080 --> 00:13:49,770
imports in that way okay so now we have

00:13:48,420 --> 00:13:53,430
a build file so we need to test whether

00:13:49,770 --> 00:13:54,650
it works or not so let's let's say hello

00:13:53,430 --> 00:13:58,140
to you

00:13:54,650 --> 00:13:59,670
Faizal Khan alright let's hit enter ok

00:13:58,140 --> 00:14:02,670
well this this is a pretty sophisticated

00:13:59,670 --> 00:14:04,620
hello world so so we're gonna have to

00:14:02,670 --> 00:14:09,180
wait a little while my my neural net

00:14:04,620 --> 00:14:10,950
runs just think now as we're speaking

00:14:09,180 --> 00:14:13,589
the computations being farmed over

00:14:10,950 --> 00:14:16,290
thousands and thousands of TP use before

00:14:13,589 --> 00:14:19,320
coming back to us and saying hello stop

00:14:16,290 --> 00:14:23,760
sign you know so luckily my neural net

00:14:19,320 --> 00:14:25,680
is not driving yet but but you know I'm

00:14:23,760 --> 00:14:27,750
gonna check Python off our list because

00:14:25,680 --> 00:14:29,490
once again we managed to actually make a

00:14:27,750 --> 00:14:33,600
build file they'd build something even

00:14:29,490 --> 00:14:37,740
if it didn't run anything and the Python

00:14:33,600 --> 00:14:40,140
brought up a larger idea in bzl gen that

00:14:37,740 --> 00:14:41,790
we can write template build files where

00:14:40,140 --> 00:14:44,910
we only write the non monotonous stuff

00:14:41,790 --> 00:14:47,370
so you saw that with the Python build

00:14:44,910 --> 00:14:50,040
file but this works for basically any

00:14:47,370 --> 00:14:51,240
attribute in your rule so sometimes

00:14:50,040 --> 00:14:54,260
there's metadata what you want to

00:14:51,240 --> 00:14:57,210
include in the build graph which isn't

00:14:54,260 --> 00:14:58,680
derived from the source code so a common

00:14:57,210 --> 00:15:01,530
examples of that in basil are things

00:14:58,680 --> 00:15:04,080
like test sizes or tags so here's an

00:15:01,530 --> 00:15:06,360
example of a of a Python test so it's a

00:15:04,080 --> 00:15:08,130
test of a pie crust on the pie crust is

00:15:06,360 --> 00:15:10,670
really high quality so I need to tag it

00:15:08,130 --> 00:15:10,670
with flaky

00:15:10,730 --> 00:15:14,900
and so I but I've still want my

00:15:13,700 --> 00:15:17,930
dependencies to be automatically

00:15:14,900 --> 00:15:19,580
generated from my pie crust so I in my

00:15:17,930 --> 00:15:22,130
build that bzl file I put the name in

00:15:19,580 --> 00:15:23,750
the main and then also the tags and size

00:15:22,130 --> 00:15:26,060
that I want and then when I generate

00:15:23,750 --> 00:15:29,030
this build file I will get all the

00:15:26,060 --> 00:15:31,490
attributes that I that I manually

00:15:29,030 --> 00:15:34,250
specified copied over as well as the

00:15:31,490 --> 00:15:38,050
dependencies automatically generated we

00:15:34,250 --> 00:15:40,580
sometimes you even need to tweak

00:15:38,050 --> 00:15:41,870
automatically generated dependencies so

00:15:40,580 --> 00:15:43,400
sometimes there's dependencies which

00:15:41,870 --> 00:15:44,930
aren't statically inferable so this

00:15:43,400 --> 00:15:48,080
often happens when people write cute

00:15:44,930 --> 00:15:49,400
plug-in systems which like concatenate

00:15:48,080 --> 00:15:52,600
together strings and then and then

00:15:49,400 --> 00:15:54,410
import import that so we support

00:15:52,600 --> 00:15:56,270
tweaking the automatically generated

00:15:54,410 --> 00:15:57,980
stuff Oh mostly getting the benefit of

00:15:56,270 --> 00:16:00,560
the statically inferable depths and the

00:15:57,980 --> 00:16:02,540
way you do that is by specifying an

00:16:00,560 --> 00:16:05,210
additional underscore name of an

00:16:02,540 --> 00:16:07,280
attribute so the build file generator

00:16:05,210 --> 00:16:10,310
takes that it does its normal generation

00:16:07,280 --> 00:16:15,830
step and then it concatenates what we

00:16:10,310 --> 00:16:17,840
originally had on to the end so so you

00:16:15,830 --> 00:16:19,130
can see in the example of my lib here we

00:16:17,840 --> 00:16:21,710
have the normal depth which are

00:16:19,130 --> 00:16:26,360
presumably just imports in my lib and

00:16:21,710 --> 00:16:28,040
then finally my magic plug-in is gets

00:16:26,360 --> 00:16:32,270
put on because of my additional depth

00:16:28,040 --> 00:16:34,550
specification there so we've covered go

00:16:32,270 --> 00:16:36,110
and and Python and actually that covers

00:16:34,550 --> 00:16:38,480
most of the the interesting cases

00:16:36,110 --> 00:16:40,520
because basically I feel the ability to

00:16:38,480 --> 00:16:42,980
specify a little template in your build

00:16:40,520 --> 00:16:44,840
bzl file I and you have the some tool

00:16:42,980 --> 00:16:46,970
which can parse imports or dependencies

00:16:44,840 --> 00:16:49,460
out of your source code you're all set

00:16:46,970 --> 00:16:50,930
to to generate build files so what our

00:16:49,460 --> 00:16:53,110
build file generator also has support

00:16:50,930 --> 00:16:57,260
for other language we use like rust

00:16:53,110 --> 00:16:59,630
typescript sass and Java and can also

00:16:57,260 --> 00:17:01,130
follow maven depths so I want to be very

00:16:59,630 --> 00:17:04,250
clear here the maven here I'm referring

00:17:01,130 --> 00:17:07,250
to is the the Java package manager not

00:17:04,250 --> 00:17:09,620
the lucrative defense drone contract you

00:17:07,250 --> 00:17:12,170
know the notion of generating targets

00:17:09,620 --> 00:17:14,360
for it for the latter one is quite a bit

00:17:12,170 --> 00:17:18,980
more sinister than than then what I mean

00:17:14,360 --> 00:17:21,470
here right so now that we've seen a few

00:17:18,980 --> 00:17:23,420
examples we can we can we can discuss

00:17:21,470 --> 00:17:24,140
some of the general reasons that you

00:17:23,420 --> 00:17:26,660
would be you

00:17:24,140 --> 00:17:28,190
interested in engineering build files so

00:17:26,660 --> 00:17:30,050
one I've been alluding to a while is

00:17:28,190 --> 00:17:33,410
that we don't want to be forcing people

00:17:30,050 --> 00:17:35,270
to learn new things so the basal build

00:17:33,410 --> 00:17:37,070
definition language is a higher level

00:17:35,270 --> 00:17:39,350
than a lot more than a lot of others

00:17:37,070 --> 00:17:42,500
like like make or something I was pretty

00:17:39,350 --> 00:17:44,510
easy to pick up but you have to remember

00:17:42,500 --> 00:17:46,550
that like you and I are build engineers

00:17:44,510 --> 00:17:48,680
we spend all our time dreaming about

00:17:46,550 --> 00:17:50,540
build files and like experimental basal

00:17:48,680 --> 00:17:52,370
flags and and all sorts of wonderful

00:17:50,540 --> 00:17:55,490
things like that but the average

00:17:52,370 --> 00:17:57,170
engineer could not care less they just

00:17:55,490 --> 00:18:00,680
want their code to compile and start seg

00:17:57,170 --> 00:18:03,050
faulting as soon as possible so we

00:18:00,680 --> 00:18:05,240
cannot get in their way right but you

00:18:03,050 --> 00:18:07,430
know the larger point is you know the

00:18:05,240 --> 00:18:09,350
build system the build system is

00:18:07,430 --> 00:18:10,640
supposed to be serving the code not not

00:18:09,350 --> 00:18:12,290
the other way around right so we

00:18:10,640 --> 00:18:14,720
shouldn't we shouldn't really inflate

00:18:12,290 --> 00:18:18,170
our self-importance too much even though

00:18:14,720 --> 00:18:20,000
we're important so the generative build

00:18:18,170 --> 00:18:22,010
files really helps with like not with

00:18:20,000 --> 00:18:23,710
helping people adopt basil without

00:18:22,010 --> 00:18:27,230
actually having to know anything at all

00:18:23,710 --> 00:18:31,280
and so which which unfortunately is a

00:18:27,230 --> 00:18:33,380
positive thing all right another good

00:18:31,280 --> 00:18:34,880
thing about generating build files is

00:18:33,380 --> 00:18:36,830
that it's much more likely that your

00:18:34,880 --> 00:18:39,140
build dependency graph will actually

00:18:36,830 --> 00:18:42,610
reflect what's in your source code so if

00:18:39,140 --> 00:18:44,440
you're manually maintaining build files

00:18:42,610 --> 00:18:46,640
what tends to happen is that

00:18:44,440 --> 00:18:48,710
dependencies are ever-growing right

00:18:46,640 --> 00:18:49,790
anytime someone has a compile error

00:18:48,710 --> 00:18:51,920
because they don't have a dependency

00:18:49,790 --> 00:18:53,690
they added a pendency but people very

00:18:51,920 --> 00:18:55,160
rarely remove dependencies when they

00:18:53,690 --> 00:18:57,500
remove a dependency from the source code

00:18:55,160 --> 00:18:59,210
but with a build file generator it's

00:18:57,500 --> 00:19:03,440
very easy to immediately make the build

00:18:59,210 --> 00:19:05,980
file of always reflective of the the

00:19:03,440 --> 00:19:08,500
source code which is very useful for

00:19:05,980 --> 00:19:12,970
speeding up builds because there's less

00:19:08,500 --> 00:19:16,340
crud on necessary crud and things like

00:19:12,970 --> 00:19:18,200
doing Basel queries to understand how

00:19:16,340 --> 00:19:23,660
your codebase is structured and makes

00:19:18,200 --> 00:19:26,930
that more much more accurate a sort of

00:19:23,660 --> 00:19:29,540
related reason is that refactoring large

00:19:26,930 --> 00:19:32,690
amounts of code is eased by not having

00:19:29,540 --> 00:19:34,790
to manually edit build files and there's

00:19:32,690 --> 00:19:36,890
already tools which are good at

00:19:34,790 --> 00:19:37,560
refactoring build files like bulldozer

00:19:36,890 --> 00:19:40,980
is

00:19:37,560 --> 00:19:45,120
example but I'd like to point out that

00:19:40,980 --> 00:19:46,680
the using bulldozer to do over factoring

00:19:45,120 --> 00:19:48,180
that involves build files is a little

00:19:46,680 --> 00:19:50,430
bit of a different workflow than than

00:19:48,180 --> 00:19:52,110
using something like bzl gen so if I'm

00:19:50,430 --> 00:19:54,390
using bulldozer I have to make my riff

00:19:52,110 --> 00:19:56,520
factory then kind of figure out in my

00:19:54,390 --> 00:19:58,320
head how am I your factory needs to be

00:19:56,520 --> 00:19:59,970
represented or mutate the build graph

00:19:58,320 --> 00:20:02,550
and then come of the build those or

00:19:59,970 --> 00:20:04,290
commands to actually execute that

00:20:02,550 --> 00:20:07,200
refactoring across the build files

00:20:04,290 --> 00:20:09,540
whereas with bgl gen I just move my code

00:20:07,200 --> 00:20:12,600
around maybe change a few build bzl

00:20:09,540 --> 00:20:15,780
templates and then you can use a special

00:20:12,600 --> 00:20:18,390
option we have for bzl gen called

00:20:15,780 --> 00:20:19,830
reverse depths gen and what that does is

00:20:18,390 --> 00:20:22,500
you pass it a bunch of packages which

00:20:19,830 --> 00:20:24,390
you've refactored it generates those and

00:20:22,500 --> 00:20:26,610
then it finds all the packages in the

00:20:24,390 --> 00:20:28,620
workspace which depend on those packages

00:20:26,610 --> 00:20:30,980
and regenerates them too and that

00:20:28,620 --> 00:20:33,210
usually almost always takes care of

00:20:30,980 --> 00:20:36,050
fixing all the damage from from

00:20:33,210 --> 00:20:38,610
refactoring in the in the build graph

00:20:36,050 --> 00:20:41,160
alright now that we've discussed all the

00:20:38,610 --> 00:20:42,120
delightful things that build file

00:20:41,160 --> 00:20:44,160
generation gives us

00:20:42,120 --> 00:20:47,190
I'd like to append to this talk a

00:20:44,160 --> 00:20:49,950
asterisk and a very large purple one at

00:20:47,190 --> 00:20:52,110
that and and and kind of tell you some

00:20:49,950 --> 00:20:54,780
of the ways that this can this can go

00:20:52,110 --> 00:20:57,210
wrong so the first thing I'd like to say

00:20:54,780 --> 00:20:59,120
is that strong conventions are very much

00:20:57,210 --> 00:21:01,530
required in order to make this work so

00:20:59,120 --> 00:21:05,700
conventions are the reason that go is so

00:21:01,530 --> 00:21:07,740
easy to generate for and even than other

00:21:05,700 --> 00:21:10,740
languages where we kind of have to

00:21:07,740 --> 00:21:14,070
provide little crushes for for bzl gen

00:21:10,740 --> 00:21:18,230
in the form of build file templates we

00:21:14,070 --> 00:21:21,000
all we often is still is necessary to to

00:21:18,230 --> 00:21:22,710
refactor your code and move it around in

00:21:21,000 --> 00:21:25,590
order to make it conform to a more

00:21:22,710 --> 00:21:28,140
standard interface so we rather than

00:21:25,590 --> 00:21:29,670
adding special cases to pzl gen we tried

00:21:28,140 --> 00:21:32,670
to as much as possible to make our code

00:21:29,670 --> 00:21:34,320
base standardized in and conformed so

00:21:32,670 --> 00:21:37,680
this was obviously that's kind of a

00:21:34,320 --> 00:21:39,030
general good thing to do but this was

00:21:37,680 --> 00:21:41,520
really an impetus to do that because it

00:21:39,030 --> 00:21:44,520
gave us much better much better tooling

00:21:41,520 --> 00:21:46,350
support another subtle thing is so

00:21:44,520 --> 00:21:51,000
actually implementing this thing can get

00:21:46,350 --> 00:21:52,950
a bit tricky so for example two two

00:21:51,000 --> 00:21:55,530
add the dependency corresponding to a

00:21:52,950 --> 00:21:57,900
Python import I have to go find what

00:21:55,530 --> 00:22:00,059
that file that import corresponds to and

00:21:57,900 --> 00:22:02,820
then I have to find what target that

00:22:00,059 --> 00:22:04,650
file that dependency file is contained

00:22:02,820 --> 00:22:06,900
in and so in order to do that I actually

00:22:04,650 --> 00:22:08,940
have to go and par as a build file in my

00:22:06,900 --> 00:22:10,860
build file generator and so this means

00:22:08,940 --> 00:22:13,799
you are kind of re-implementing some of

00:22:10,860 --> 00:22:16,049
the logic that that basil does and

00:22:13,799 --> 00:22:17,460
things can get extra complicated when

00:22:16,049 --> 00:22:19,679
you are generating many different kinds

00:22:17,460 --> 00:22:21,510
of rules and some rules are just popped

00:22:19,679 --> 00:22:23,460
into existence without templates like go

00:22:21,510 --> 00:22:25,679
rules while others have templates and

00:22:23,460 --> 00:22:27,840
there's various stages of generation and

00:22:25,679 --> 00:22:30,720
it can it can get and you get quite

00:22:27,840 --> 00:22:33,750
tricky to make sure that everything is

00:22:30,720 --> 00:22:36,659
sort of deterministic and ends in ends

00:22:33,750 --> 00:22:38,340
out in the right place so we've we've

00:22:36,659 --> 00:22:40,440
had strange situations where like

00:22:38,340 --> 00:22:42,270
various parts of the tree have loops and

00:22:40,440 --> 00:22:43,770
and resonances where like if you

00:22:42,270 --> 00:22:46,500
generate one part of the tree it makes

00:22:43,770 --> 00:22:47,760
the other part of the tree like need to

00:22:46,500 --> 00:22:49,409
be generated and if you generate that

00:22:47,760 --> 00:22:52,559
part then the original part needs to be

00:22:49,409 --> 00:22:55,110
generated and it can be and to some

00:22:52,559 --> 00:22:56,640
extent you're having to reinvent a lot

00:22:55,110 --> 00:23:00,539
of what basil is good at which is which

00:22:56,640 --> 00:23:03,390
is incremental understanding of very

00:23:00,539 --> 00:23:05,159
large dependency graphs so it's it's

00:23:03,390 --> 00:23:11,010
something which you you have to keep in

00:23:05,159 --> 00:23:14,370
mind another false path I'd like to tell

00:23:11,010 --> 00:23:16,200
you about is generating files which

00:23:14,370 --> 00:23:26,460
aren't build files in a build file

00:23:16,200 --> 00:23:29,039
generator yes so the thing about bzl gen

00:23:26,460 --> 00:23:30,809
is that it's essentially a command which

00:23:29,039 --> 00:23:32,880
can do arbitrary non hermetic things

00:23:30,809 --> 00:23:35,580
which is run by all of engineering

00:23:32,880 --> 00:23:39,120
constantly which is a very very

00:23:35,580 --> 00:23:42,240
dangerous thing so we're we're totally

00:23:39,120 --> 00:23:44,130
outside the the the basil world here and

00:23:42,240 --> 00:23:46,590
we're not we're not restrained by punny

00:23:44,130 --> 00:23:48,659
things like sandboxes or property

00:23:46,590 --> 00:23:50,520
dependencies and so we can do whatever I

00:23:48,659 --> 00:23:53,789
want and so obviously people do whatever

00:23:50,520 --> 00:23:55,799
they want and one of the things people

00:23:53,789 --> 00:23:59,880
really want to do is hook up their code

00:23:55,799 --> 00:24:03,059
generation into bzl gen and I'm going to

00:23:59,880 --> 00:24:04,500
discuss what one example of a of a of a

00:24:03,059 --> 00:24:11,100
proposal to do this

00:24:04,500 --> 00:24:14,550
and it revolves around go generics yes

00:24:11,100 --> 00:24:16,320
so so if you know anything about go your

00:24:14,550 --> 00:24:18,570
programming go or you read hacker news

00:24:16,320 --> 00:24:23,370
you'll know that go does not have a

00:24:18,570 --> 00:24:24,930
generics and so this means if you want

00:24:23,370 --> 00:24:26,400
to implement a container type which can

00:24:24,930 --> 00:24:29,040
hold several different kinds of values

00:24:26,400 --> 00:24:33,300
you're generally faced with one of two

00:24:29,040 --> 00:24:34,680
bad options number one you can copy your

00:24:33,300 --> 00:24:36,150
code every time you want to change the

00:24:34,680 --> 00:24:38,580
type in it and sort of like to search

00:24:36,150 --> 00:24:41,670
for place or number two you can make

00:24:38,580 --> 00:24:44,630
your container type use a a special kind

00:24:41,670 --> 00:24:47,280
of a universal untie puny thing called

00:24:44,630 --> 00:24:49,440
the empty interface and the empty

00:24:47,280 --> 00:24:51,480
interface is like emits toxic fumes and

00:24:49,440 --> 00:24:53,340
is a type safe and like is flammable and

00:24:51,480 --> 00:24:55,280
sort of subjects you to the most

00:24:53,340 --> 00:24:57,630
stringent kind of government regulation

00:24:55,280 --> 00:25:00,900
although I hear the EPA is working as

00:24:57,630 --> 00:25:02,370
fast as they possibly can to provide

00:25:00,900 --> 00:25:06,750
relief there but anyway people don't

00:25:02,370 --> 00:25:09,900
really like to do it and so we had a

00:25:06,750 --> 00:25:13,070
proposal at Dropbox to solve finally the

00:25:09,900 --> 00:25:15,240
problem of go generics with bzl gen and

00:25:13,070 --> 00:25:19,140
so let me give you example of how this

00:25:15,240 --> 00:25:20,880
this this scheme would work so let's

00:25:19,140 --> 00:25:22,590
talk about silos so we all read a

00:25:20,880 --> 00:25:24,630
missile silo but sometimes you want to

00:25:22,590 --> 00:25:27,900
put other things in silos like like I

00:25:24,630 --> 00:25:30,960
want to put corn in a silo other things

00:25:27,900 --> 00:25:34,620
you may want to put in silos include app

00:25:30,960 --> 00:25:38,700
ecosystems people's newsfeeds but I got

00:25:34,620 --> 00:25:40,560
to put corn in so the proposal that we

00:25:38,700 --> 00:25:42,210
were looking at involved doing something

00:25:40,560 --> 00:25:45,420
like this so if you want to have a corn

00:25:42,210 --> 00:25:48,920
silo you would go and write a build up

00:25:45,420 --> 00:25:51,320
bzl file in your corn silo package and

00:25:48,920 --> 00:25:55,470
it would have this special dictionary

00:25:51,320 --> 00:25:58,320
called go generic instantiations and you

00:25:55,470 --> 00:26:00,120
see it has a corn silo key and that has

00:25:58,320 --> 00:26:02,610
a template source so maybe you can see

00:26:00,120 --> 00:26:03,690
where this is going and the template

00:26:02,610 --> 00:26:06,120
source is something called generic

00:26:03,690 --> 00:26:09,630
siloed that slash silo that go and then

00:26:06,120 --> 00:26:12,090
there are some type parameters so value

00:26:09,630 --> 00:26:13,860
is going to be corn instead so what

00:26:12,090 --> 00:26:17,700
would happen is you've went and you ran

00:26:13,860 --> 00:26:18,330
bzl gen corn silo then if we looked at

00:26:17,700 --> 00:26:20,700
the content of

00:26:18,330 --> 00:26:24,720
Erichs silo we'd see that the what ended

00:26:20,700 --> 00:26:27,630
up in corn silo was just filled the the

00:26:24,720 --> 00:26:29,399
value was replaced with corn as we had

00:26:27,630 --> 00:26:33,929
specified in the bill file

00:26:29,399 --> 00:26:36,029
great so go generics are solved so I

00:26:33,929 --> 00:26:39,149
bring this point up not to make fun of

00:26:36,029 --> 00:26:44,159
go well I bring this point up not only

00:26:39,149 --> 00:26:46,440
to make fun of go but to say that from a

00:26:44,159 --> 00:26:48,929
build systems perspective what you

00:26:46,440 --> 00:26:53,730
should be doing is writing a rule to

00:26:48,929 --> 00:26:56,250
generate your go generics right so it's

00:26:53,730 --> 00:26:59,070
an eminently possible and rather easy to

00:26:56,250 --> 00:27:01,169
write a rule that takes an input file a

00:26:59,070 --> 00:27:03,360
template apply some substitutions to it

00:27:01,169 --> 00:27:05,190
and it emits an output file so I I

00:27:03,360 --> 00:27:07,889
sketched up an advanced example of how

00:27:05,190 --> 00:27:10,350
you do this I you'd have your dbx go

00:27:07,889 --> 00:27:12,179
generics rule which the template the

00:27:10,350 --> 00:27:13,889
generic silo emitted an output and then

00:27:12,179 --> 00:27:16,350
the substitution dictionary has just

00:27:13,889 --> 00:27:18,539
didn't move to the skylark right so you

00:27:16,350 --> 00:27:20,190
know for a build systems perspective

00:27:18,539 --> 00:27:22,799
this is a okay you know hermetic du goes

00:27:20,190 --> 00:27:24,330
in something happens hermetic goo comes

00:27:22,799 --> 00:27:26,760
out which is a deterministic function of

00:27:24,330 --> 00:27:29,970
the input goo so we're all set from is a

00:27:26,760 --> 00:27:31,380
build systems perspective and we don't

00:27:29,970 --> 00:27:33,809
have to like make our build file

00:27:31,380 --> 00:27:35,399
generator figure this out and we can

00:27:33,809 --> 00:27:38,630
leave it to the go people to like debate

00:27:35,399 --> 00:27:41,909
the ethics and morality of this thing

00:27:38,630 --> 00:27:44,909
but I'm afraid we did not accept the go

00:27:41,909 --> 00:27:47,880
generics thing but we did kind of go

00:27:44,909 --> 00:27:49,289
down this road hard so we currently are

00:27:47,880 --> 00:27:52,260
generating all sorts of things with

00:27:49,289 --> 00:27:55,980
mesial gen proto seed RPC stubs database

00:27:52,260 --> 00:27:58,289
schemas test metrics and like more RPC

00:27:55,980 --> 00:28:00,419
stuff and like build files which are

00:27:58,289 --> 00:28:02,460
roll-ups of other build files and so

00:28:00,419 --> 00:28:06,059
it's it's it's kind of it's kind of

00:28:02,460 --> 00:28:10,350
nasty so don't do that one last word of

00:28:06,059 --> 00:28:13,110
advice do not use your build file

00:28:10,350 --> 00:28:15,690
generator to override Basil's default

00:28:13,110 --> 00:28:21,179
and perfectly reasonable private

00:28:15,690 --> 00:28:24,419
visibility so as you may know targets in

00:28:21,179 --> 00:28:27,809
basil are private by default which makes

00:28:24,419 --> 00:28:30,149
sense and early in our basil migration

00:28:27,809 --> 00:28:32,100
we decided to expedite the process by

00:28:30,149 --> 00:28:34,049
having our build file generate slappa

00:28:32,100 --> 00:28:35,850
package default visibility equals

00:28:34,049 --> 00:28:38,840
visibility public at the top of every

00:28:35,850 --> 00:28:40,799
generated built file and that that

00:28:38,840 --> 00:28:43,530
eventually if we realize that this was

00:28:40,799 --> 00:28:45,450
not a good plan but but but fixing this

00:28:43,530 --> 00:28:47,549
was just a ginormous tragedy a tragedy

00:28:45,450 --> 00:28:49,440
worthy of like Sophocles or Shakespeare

00:28:47,549 --> 00:28:51,990
so we ended up having to do is

00:28:49,440 --> 00:28:55,289
grandfather all existing build files

00:28:51,990 --> 00:28:56,669
into public visibility and putting a

00:28:55,289 --> 00:28:58,169
common which says this file is

00:28:56,669 --> 00:28:59,520
grandfathered into public visibility

00:28:58,169 --> 00:29:03,360
because it built-in for team is idiots

00:28:59,520 --> 00:29:05,429
please do not copy this and and and you

00:29:03,360 --> 00:29:07,080
maybe you can imagine what happened so

00:29:05,429 --> 00:29:09,419
now everyone's time someone creates a

00:29:07,080 --> 00:29:11,970
build file they carefully comment copy

00:29:09,419 --> 00:29:14,280
the public visibility thing along with

00:29:11,970 --> 00:29:17,580
the comment which says do not copy build

00:29:14,280 --> 00:29:21,299
in for his idiots and like it just it

00:29:17,580 --> 00:29:23,549
just makes me so sad the the only thing

00:29:21,299 --> 00:29:26,190
which makes me feel slightly bitter is

00:29:23,549 --> 00:29:29,220
being in company with misery so if you

00:29:26,190 --> 00:29:33,659
the back of 2016 google published this

00:29:29,220 --> 00:29:35,700
paper about how they have exhibits in

00:29:33,659 --> 00:29:36,780
there a lesson learned from Google's

00:29:35,700 --> 00:29:39,750
experience with large monolithic

00:29:36,780 --> 00:29:40,860
repositories is that privacy by default

00:29:39,750 --> 00:29:42,270
should be put in place as soon as

00:29:40,860 --> 00:29:44,280
possible encourage more hygenic

00:29:42,270 --> 00:29:47,510
dependency structures I interpret

00:29:44,280 --> 00:29:47,510
doesn't mean Google had the same problem

00:29:48,110 --> 00:29:53,940
and with that final note I'd like to

00:29:51,990 --> 00:29:56,850
want briefly Frank's and the people who

00:29:53,940 --> 00:29:58,350
made this possible so mesial Jen was

00:29:56,850 --> 00:30:00,630
originally written by an engineer called

00:29:58,350 --> 00:30:03,600
Patrick Lee he came up with many of

00:30:00,630 --> 00:30:05,549
foundational ideas pzl jen and it's now

00:30:03,600 --> 00:30:07,409
maintained by Dropbox to vulvar

00:30:05,549 --> 00:30:09,780
infrastructure of which I am only one

00:30:07,409 --> 00:30:10,530
member and with that I will yield the

00:30:09,780 --> 00:30:14,480
floor

00:30:10,530 --> 00:30:14,480
to your inquiry

00:30:16,230 --> 00:30:18,290

YouTube URL: https://www.youtube.com/watch?v=3Kx51Swt-Yk


