Title: BazelCon 2018 Day 2: Knowledge Transfer by Source Code
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	“Secret” techniques used at Google
Ofer Bartal (Google) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Ofer Bartal;
Captions: 
	00:00:04,690 --> 00:00:12,650
okay so hello everyone I'm affair I'm a

00:00:09,680 --> 00:00:14,570
software engineer at Google and I work

00:00:12,650 --> 00:00:17,259
on helping companies become more

00:00:14,570 --> 00:00:20,960
productive using Google's open source

00:00:17,259 --> 00:00:23,510
ecosystem so today we're going to talk

00:00:20,960 --> 00:00:26,660
about knowledge transfer by source code

00:00:23,510 --> 00:00:28,789
and that is about how you transfer

00:00:26,660 --> 00:00:31,910
knowledge so things you know about the

00:00:28,789 --> 00:00:34,670
code base about your project to other

00:00:31,910 --> 00:00:37,790
people across your company on your team

00:00:34,670 --> 00:00:40,460
now these techniques that I'm going to

00:00:37,790 --> 00:00:43,640
show you today they're secret techniques

00:00:40,460 --> 00:00:46,339
used inside Google and I say secret like

00:00:43,640 --> 00:00:49,100
this because it's all open source and

00:00:46,339 --> 00:00:51,830
it's based on Google's open source tools

00:00:49,100 --> 00:00:54,769
and you can actually go and head and do

00:00:51,830 --> 00:00:57,500
the same things right after you get out

00:00:54,769 --> 00:01:03,070
of the conference those of you with the

00:00:57,500 --> 00:01:05,659
laptops even as we speak so let's start

00:01:03,070 --> 00:01:10,730
ok but actually before we start I added

00:01:05,659 --> 00:01:12,250
a few slides to this deck today because

00:01:10,730 --> 00:01:16,630
they wanted to talk a little bit about

00:01:12,250 --> 00:01:20,350
Basel speed so we've talked a lot about

00:01:16,630 --> 00:01:24,320
how Basel is fast and it can actually

00:01:20,350 --> 00:01:26,780
compile much much faster this is a an

00:01:24,320 --> 00:01:30,200
evaluation done by Wix where they found

00:01:26,780 --> 00:01:33,850
that basil is decreases the build time

00:01:30,200 --> 00:01:37,430
from 45 minutes to just 5 minutes and

00:01:33,850 --> 00:01:40,100
and you know it seems like a good thing

00:01:37,430 --> 00:01:42,560
but you need to think about this when

00:01:40,100 --> 00:01:44,500
you think about using basil because if

00:01:42,560 --> 00:01:47,000
you think about those 45 minutes and

00:01:44,500 --> 00:01:49,550
maybe you're used to doing things in

00:01:47,000 --> 00:01:52,850
that time like maybe staring at the

00:01:49,550 --> 00:01:54,800
screen and you know and now that you're

00:01:52,850 --> 00:01:57,080
using basil you don't have that time and

00:01:54,800 --> 00:01:59,570
you know some of you have been telling

00:01:57,080 --> 00:02:03,049
us that staring at the compiler makes it

00:01:59,570 --> 00:02:06,310
go faster so basil doesn't work that way

00:02:03,049 --> 00:02:08,780
and so I you won't be able to do that

00:02:06,310 --> 00:02:12,170
there's no time for knitting while the

00:02:08,780 --> 00:02:14,420
compilation is going on and if you are

00:02:12,170 --> 00:02:17,180
waiting for the build and you're used to

00:02:14,420 --> 00:02:18,950
doing some other stuff in the meanwhile

00:02:17,180 --> 00:02:21,620
you won't have that chance with basil

00:02:18,950 --> 00:02:23,750
and if you love multitasking and doing

00:02:21,620 --> 00:02:26,390
like five tasks the same sat at the same

00:02:23,750 --> 00:02:28,370
time then unfortunately it doesn't work

00:02:26,390 --> 00:02:32,569
so well because basil is just too fast

00:02:28,370 --> 00:02:35,299
for that so besides being fast and

00:02:32,569 --> 00:02:38,150
correct what what conveys will help you

00:02:35,299 --> 00:02:42,290
do along with Google's other open-source

00:02:38,150 --> 00:02:44,239
technologies so we're going to give I'm

00:02:42,290 --> 00:02:45,439
going to give several examples but the

00:02:44,239 --> 00:02:47,480
focus is going to be about knowledge

00:02:45,439 --> 00:02:49,189
transfer which is a problem of

00:02:47,480 --> 00:02:52,310
transferring knowledge across your

00:02:49,189 --> 00:02:54,139
organization now when you think about

00:02:52,310 --> 00:02:56,120
knowledge transfer there's two basic

00:02:54,139 --> 00:02:59,349
types and it's like a scale between them

00:02:56,120 --> 00:03:02,450
there's personalization which is

00:02:59,349 --> 00:03:04,310
one-on-ones and chats and it's basically

00:03:02,450 --> 00:03:06,739
a synchronous way of transferring

00:03:04,310 --> 00:03:09,560
knowledge and there's qualification

00:03:06,739 --> 00:03:13,450
which is about code comments and wiki's

00:03:09,560 --> 00:03:14,900
and Docs and that is async in its nature

00:03:13,450 --> 00:03:17,659
now

00:03:14,900 --> 00:03:20,150
personalization it doesn't scale because

00:03:17,659 --> 00:03:22,489
you can talk to one person you can talk

00:03:20,150 --> 00:03:24,049
to two three maybe ten people but many

00:03:22,489 --> 00:03:27,440
more than that it's not going to scale

00:03:24,049 --> 00:03:29,359
well and it requires you to be present

00:03:27,440 --> 00:03:32,479
now codification writing comments

00:03:29,359 --> 00:03:34,430
writing wiki's that scales well to a lot

00:03:32,479 --> 00:03:36,680
of people but it takes a lot of effort

00:03:34,430 --> 00:03:40,129
and it's not an inherited part of the

00:03:36,680 --> 00:03:41,840
code and now that way it can become you

00:03:40,129 --> 00:03:43,340
know not up to date and it's always

00:03:41,840 --> 00:03:44,989
confusing to make sure that the

00:03:43,340 --> 00:03:48,829
documentation is really connected to the

00:03:44,989 --> 00:03:51,909
code so at Google the way we tackle not

00:03:48,829 --> 00:03:54,650
a transfer is basically with two basic

00:03:51,909 --> 00:03:58,609
strategies so first of all we try to

00:03:54,650 --> 00:04:01,849
simplify where we can our systems and we

00:03:58,609 --> 00:04:05,479
try to codify not only using wiki's and

00:04:01,849 --> 00:04:06,859
Docs also through source code and that's

00:04:05,479 --> 00:04:10,459
gonna be the main part of the talk and

00:04:06,859 --> 00:04:13,340
I'm gonna give some examples on that so

00:04:10,459 --> 00:04:16,669
first of all about simplification so at

00:04:13,340 --> 00:04:18,739
Google we have one style guide one

00:04:16,669 --> 00:04:21,859
operating system for developers one

00:04:18,739 --> 00:04:24,169
repository one data format one server

00:04:21,859 --> 00:04:25,940
communication protocol and that one

00:04:24,169 --> 00:04:28,900
build tool I don't know if you've heard

00:04:25,940 --> 00:04:31,670
of it it's called basil

00:04:28,900 --> 00:04:36,260
okay this is a simplification but for

00:04:31,670 --> 00:04:39,140
the most part it's correct now when you

00:04:36,260 --> 00:04:40,630
think about now focusing on codifying by

00:04:39,140 --> 00:04:43,670
source code I'm going to talk about

00:04:40,630 --> 00:04:46,340
three main technologies protocol buffers

00:04:43,670 --> 00:04:49,700
G RPC and basil and they're basically

00:04:46,340 --> 00:04:52,520
the equivalent of json HTTP and make

00:04:49,700 --> 00:04:54,880
files now who here works with protocol

00:04:52,520 --> 00:04:54,880
buffers

00:04:55,000 --> 00:05:04,160
okay I'd say about half who works with a

00:04:57,890 --> 00:05:07,220
RPC okay maybe a third okay so and who's

00:05:04,160 --> 00:05:10,430
who's thinking about working with basil

00:05:07,220 --> 00:05:13,100
not yet working with basil okay

00:05:10,430 --> 00:05:14,390
actually most of you are so these

00:05:13,100 --> 00:05:15,950
technologies are very mature

00:05:14,390 --> 00:05:18,170
there have been used inside Google for

00:05:15,950 --> 00:05:20,930
more than 10 years and they're used on a

00:05:18,170 --> 00:05:22,460
day to day basis by Googlers now I just

00:05:20,930 --> 00:05:25,310
want to say that there's other options

00:05:22,460 --> 00:05:27,200
that exist to do the same concepts that

00:05:25,310 --> 00:05:28,610
I'm going to talk about I'm gonna

00:05:27,200 --> 00:05:30,530
explain with these ones but other

00:05:28,610 --> 00:05:31,970
obviously there's other libraries out

00:05:30,530 --> 00:05:36,500
there and you can do the same things or

00:05:31,970 --> 00:05:39,440
similar things with other libraries so

00:05:36,500 --> 00:05:43,880
protocol buffers you have a proto def

00:05:39,440 --> 00:05:45,250
file with the structure of your data the

00:05:43,880 --> 00:05:48,080
data that's going to be passed around

00:05:45,250 --> 00:05:51,640
and that can be passed around with

00:05:48,080 --> 00:05:55,400
various formats you have JSON standard

00:05:51,640 --> 00:05:57,920
proteic ste which is a textual format

00:05:55,400 --> 00:06:00,920
and proto ban which is the binary format

00:05:57,920 --> 00:06:02,420
it's compact it's efficient and also

00:06:00,920 --> 00:06:04,910
when the data gets transferred there it

00:06:02,420 --> 00:06:08,060
gets transferred without the field names

00:06:04,910 --> 00:06:11,300
it for example in this example there's

00:06:08,060 --> 00:06:13,370
title with the ID 1 so in the data that

00:06:11,300 --> 00:06:18,080
gets transferred the the string title

00:06:13,370 --> 00:06:21,530
never gets transferred it's always it's

00:06:18,080 --> 00:06:23,420
always the IDS that get transferred and

00:06:21,530 --> 00:06:26,680
this is an important point that I'm

00:06:23,420 --> 00:06:31,640
gonna talk about later so remember that

00:06:26,680 --> 00:06:33,460
now the proto txt format anyone ever

00:06:31,640 --> 00:06:38,450
seen it before

00:06:33,460 --> 00:06:39,080
ok so I marked the annoying characters

00:06:38,450 --> 00:06:41,960
in red

00:06:39,080 --> 00:06:42,590
ok annoying characters or the characters

00:06:41,960 --> 00:06:44,060
you don't want to do

00:06:42,590 --> 00:06:46,310
because you just want to deal with the

00:06:44,060 --> 00:06:48,500
actual data now if you're compared to

00:06:46,310 --> 00:06:50,420
JSON there's actually many many more

00:06:48,500 --> 00:06:53,270
annoying characters and there's more

00:06:50,420 --> 00:06:55,790
types of them for example those commas

00:06:53,270 --> 00:06:57,230
and there's a parentheses which you

00:06:55,790 --> 00:06:59,450
don't have there's two types of

00:06:57,230 --> 00:07:01,850
parentheses instead of just one so it's

00:06:59,450 --> 00:07:04,310
just built kind of confused is just just

00:07:01,850 --> 00:07:05,230
enough to to not be able to parse it

00:07:04,310 --> 00:07:09,050
later

00:07:05,230 --> 00:07:11,090
so that's portal txt and also for the

00:07:09,050 --> 00:07:13,910
call buffer generates code for you so

00:07:11,090 --> 00:07:15,470
you get for every language that is

00:07:13,910 --> 00:07:18,140
supported and there's many language that

00:07:15,470 --> 00:07:20,120
are supported you get cogeneration for

00:07:18,140 --> 00:07:22,460
example with Java you get these objects

00:07:20,120 --> 00:07:25,030
for free what which have getter setters

00:07:22,460 --> 00:07:29,090
and a lot of functions related functions

00:07:25,030 --> 00:07:30,650
that come with them now you can think of

00:07:29,090 --> 00:07:34,610
protocol buffers as a strongly typed

00:07:30,650 --> 00:07:36,110
JSON so when the message changes the

00:07:34,610 --> 00:07:37,430
code that's using the message it's

00:07:36,110 --> 00:07:39,920
reading the message won't compile

00:07:37,430 --> 00:07:41,540
anymore and in a mono repo you can

00:07:39,920 --> 00:07:43,460
actually change the front end you can

00:07:41,540 --> 00:07:45,110
add a set up where the fun and in the

00:07:43,460 --> 00:07:48,050
back end both use the same protocol

00:07:45,110 --> 00:07:49,880
buffer and once you change that the

00:07:48,050 --> 00:07:51,890
other side stops compiling and you have

00:07:49,880 --> 00:07:56,780
to update it too so you never forget and

00:07:51,890 --> 00:07:58,970
you never break the other side so now

00:07:56,780 --> 00:08:01,040
we're going to go to the fun part of the

00:07:58,970 --> 00:08:04,340
talk there's gonna be a lot of examples

00:08:01,040 --> 00:08:06,590
of day to day scenarios which you may

00:08:04,340 --> 00:08:11,020
have incarnate encountered as part of

00:08:06,590 --> 00:08:15,770
your work and it's kind of like Seinfeld

00:08:11,020 --> 00:08:18,830
but for developers so think of this

00:08:15,770 --> 00:08:21,800
scenario there's Neuman he's the new guy

00:08:18,830 --> 00:08:25,400
on the team and he's working with the

00:08:21,800 --> 00:08:28,220
book class and the book les has two

00:08:25,400 --> 00:08:31,190
fields that he's worried about there's

00:08:28,220 --> 00:08:33,830
title and there's actual title and he

00:08:31,190 --> 00:08:38,840
recently moved from the show business to

00:08:33,830 --> 00:08:40,790
being a developer and now he has to work

00:08:38,840 --> 00:08:42,860
on this new task and he can't figure out

00:08:40,790 --> 00:08:46,550
like what's the deal with this title an

00:08:42,860 --> 00:08:48,080
actual title so he asks Debbie and

00:08:46,550 --> 00:08:50,080
Debbie's an a senior developer on the

00:08:48,080 --> 00:08:53,180
team and and what she says is that

00:08:50,080 --> 00:08:55,700
everybody gets confused so initially we

00:08:53,180 --> 00:08:56,180
had title and then it was just for

00:08:55,700 --> 00:08:58,130
despite

00:08:56,180 --> 00:09:00,140
purposes and it was truncated and then

00:08:58,130 --> 00:09:02,450
we needed to add another field which is

00:09:00,140 --> 00:09:04,430
the real title but we couldn't change

00:09:02,450 --> 00:09:06,350
the name of the old title because we

00:09:04,430 --> 00:09:08,089
already have released apps that people

00:09:06,350 --> 00:09:11,140
have and they need to continue working

00:09:08,089 --> 00:09:13,310
so we had we just made another name and

00:09:11,140 --> 00:09:17,149
that's how we named it because title was

00:09:13,310 --> 00:09:20,779
already taken so newman sends back this

00:09:17,149 --> 00:09:22,839
emoji it's not a smiling emoji because

00:09:20,779 --> 00:09:25,010
you know it's a little bit confusing so

00:09:22,839 --> 00:09:28,370
with protocol buffers you can actually

00:09:25,010 --> 00:09:31,820
rename stuff you want to add a new field

00:09:28,370 --> 00:09:34,670
so you can add this you can add a field

00:09:31,820 --> 00:09:37,820
by you can rename the existing field and

00:09:34,670 --> 00:09:40,430
add a new field with the old name and

00:09:37,820 --> 00:09:44,209
that still works that's a green check

00:09:40,430 --> 00:09:46,430
there and the reason it works is that

00:09:44,209 --> 00:09:48,560
the data being transferred in binary

00:09:46,430 --> 00:09:50,959
format never includes the title string

00:09:48,560 --> 00:09:52,370
it always includes just the ID one and

00:09:50,959 --> 00:09:57,290
that's gonna continue on transferring

00:09:52,370 --> 00:09:59,660
even if you change that name now for

00:09:57,290 --> 00:10:01,459
free you also get enums across all the

00:09:59,660 --> 00:10:04,070
languages so you don't have to

00:10:01,459 --> 00:10:05,839
communicate changes and transfer this

00:10:04,070 --> 00:10:08,180
knowledge of from the back end to the

00:10:05,839 --> 00:10:12,860
front and for between teams about enum

00:10:08,180 --> 00:10:16,820
changes so you'll get these for free now

00:10:12,860 --> 00:10:19,610
let's look at Fred fred is a fred is

00:10:16,820 --> 00:10:22,520
working on a new field called ISSN he's

00:10:19,610 --> 00:10:26,060
not sure what is a sane is anybody know

00:10:22,520 --> 00:10:27,709
what Isis is okay I checked when I made

00:10:26,060 --> 00:10:29,360
the slides but I kind of forgot since

00:10:27,709 --> 00:10:31,700
then it's something like international

00:10:29,360 --> 00:10:34,670
number for something something with

00:10:31,700 --> 00:10:37,310
books I don't know Fred does know either

00:10:34,670 --> 00:10:40,400
fred is gonna ask Becky what is Isis Sam

00:10:37,310 --> 00:10:44,120
and Becky is happens to be in a meeting

00:10:40,400 --> 00:10:47,829
maybe she's on vacation maybe she's in

00:10:44,120 --> 00:10:51,050
the Bahamas and on extended vacation and

00:10:47,829 --> 00:10:53,510
now Fred can't actually continue because

00:10:51,050 --> 00:10:55,520
he doesn't know what Isis in is now he

00:10:53,510 --> 00:10:58,190
can dive to the server code but he's a

00:10:55,520 --> 00:11:00,110
front-end developer and maybe it's in

00:10:58,190 --> 00:11:02,120
another repo and he's not sure which

00:11:00,110 --> 00:11:04,370
branch it is and he kind of finds the

00:11:02,120 --> 00:11:06,290
code and maybe it's documented maybe

00:11:04,370 --> 00:11:08,839
it's not really very good documented

00:11:06,290 --> 00:11:10,130
very well so with protocol buffers is

00:11:08,839 --> 00:11:12,260
just one file and everybody

00:11:10,130 --> 00:11:15,110
looking at the same file and there's

00:11:12,260 --> 00:11:20,000
clear a good way to a good place to put

00:11:15,110 --> 00:11:27,700
this documentation now the next scenario

00:11:20,000 --> 00:11:29,960
is with about G RPC so G RPC is like a

00:11:27,700 --> 00:11:32,780
communication protocol between servers

00:11:29,960 --> 00:11:35,600
kind of like HTTP but based on protocol

00:11:32,780 --> 00:11:37,820
buffers so Becky has this new endpoint

00:11:35,600 --> 00:11:42,380
for this new feature it's called a cool

00:11:37,820 --> 00:11:45,920
server pizza order and Fred no needs to

00:11:42,380 --> 00:11:49,280
work on it and for Fred to work on it he

00:11:45,920 --> 00:11:52,100
needs a lot of stuff he needs a running

00:11:49,280 --> 00:11:55,400
dev server so he can check what this

00:11:52,100 --> 00:11:57,470
endpoint looks like and this running

00:11:55,400 --> 00:11:59,560
death server may be Becky forgot to

00:11:57,470 --> 00:12:02,030
bring it up maybe she went on vacation

00:11:59,560 --> 00:12:03,740
maybe she brought it up but there was an

00:12:02,030 --> 00:12:06,020
electricity shortage and now it's down

00:12:03,740 --> 00:12:07,100
again maybe it's up but he's not sure

00:12:06,020 --> 00:12:10,730
it's the same it's a correct version

00:12:07,100 --> 00:12:12,560
that he's looking at with the code and

00:12:10,730 --> 00:12:14,960
maybe he does know what the end point is

00:12:12,560 --> 00:12:16,700
what the address is but that's assume he

00:12:14,960 --> 00:12:18,890
has all that so all this is like

00:12:16,700 --> 00:12:20,750
knowledge transfer he needs needing make

00:12:18,890 --> 00:12:23,840
his help to do his job but let's assume

00:12:20,750 --> 00:12:26,330
he has a server up and running so he

00:12:23,840 --> 00:12:28,390
still needs to kind of query the server

00:12:26,330 --> 00:12:31,040
to see what the response looks like and

00:12:28,390 --> 00:12:32,480
it's returning this JSON and he needs to

00:12:31,040 --> 00:12:34,820
kind of figure out and kind of reverse

00:12:32,480 --> 00:12:36,980
engineer and things that Becky already

00:12:34,820 --> 00:12:39,290
knows knowledge that she already has is

00:12:36,980 --> 00:12:41,960
not probably encoded in the code base so

00:12:39,290 --> 00:12:44,470
he needs the server up and kind of to

00:12:41,960 --> 00:12:47,150
query it and he can actually make some

00:12:44,470 --> 00:12:49,910
mistakes because he's querying with

00:12:47,150 --> 00:12:52,040
certain requests but maybe there's other

00:12:49,910 --> 00:12:53,930
requests that will bring more fields in

00:12:52,040 --> 00:12:56,410
and he's not taking that into account

00:12:53,930 --> 00:13:01,010
when he's doing his front-end work

00:12:56,410 --> 00:13:03,920
so with GRP see what you can get is

00:13:01,010 --> 00:13:06,470
basically a definition of what the

00:13:03,920 --> 00:13:08,270
server what the observer endpoint looks

00:13:06,470 --> 00:13:11,930
like and what its requests and response

00:13:08,270 --> 00:13:13,670
looks like look like and this is part of

00:13:11,930 --> 00:13:16,700
the this is built on protocol buffers

00:13:13,670 --> 00:13:18,980
and it's part of the ARP see it's part

00:13:16,700 --> 00:13:21,320
of the definition file and you also get

00:13:18,980 --> 00:13:23,690
a client code generated for free and

00:13:21,320 --> 00:13:24,980
server code generated for free so that

00:13:23,690 --> 00:13:29,540
through the convenient and it takes care

00:13:24,980 --> 00:13:34,070
a lot of stuff for you now let's talk

00:13:29,540 --> 00:13:37,060
about basil so basil basically a

00:13:34,070 --> 00:13:40,220
democracies is builds across the company

00:13:37,060 --> 00:13:44,000
so now everyone can build everything and

00:13:40,220 --> 00:13:48,170
see everything buildable in this example

00:13:44,000 --> 00:13:50,510
Jared is working on his tool and he's

00:13:48,170 --> 00:13:52,460
kind of stuck he's a junior developer on

00:13:50,510 --> 00:13:54,590
the team and he's kind of stuck he's

00:13:52,460 --> 00:13:56,510
getting this weird compilation error and

00:13:54,590 --> 00:13:58,310
he's not sure what to do and he's asking

00:13:56,510 --> 00:14:00,970
Jeffy Jeff is an experienced developer

00:13:58,310 --> 00:14:04,510
she's a couple of years on the team and

00:14:00,970 --> 00:14:07,610
she actually can't reproduce the issue

00:14:04,510 --> 00:14:10,370
because it's it's not based on basil and

00:14:07,610 --> 00:14:11,720
she has a different environment and so

00:14:10,370 --> 00:14:13,430
she can't help him and she can't

00:14:11,720 --> 00:14:14,560
transfer her knowledge to him in an

00:14:13,430 --> 00:14:18,860
effective way

00:14:14,560 --> 00:14:21,920
so with basil everything you have this

00:14:18,860 --> 00:14:28,630
reproducibility and it makes helping

00:14:21,920 --> 00:14:31,040
other people in your company easier now

00:14:28,630 --> 00:14:33,380
now Jared actually successfully built

00:14:31,040 --> 00:14:35,090
his tool and now he's built a stool and

00:14:33,380 --> 00:14:37,760
he's telling everyone listen this this

00:14:35,090 --> 00:14:40,340
great tool at Google we have this great

00:14:37,760 --> 00:14:42,230
tooling culture where people can build

00:14:40,340 --> 00:14:44,570
tools and share them with with a company

00:14:42,230 --> 00:14:46,640
and its really easy and the reason is

00:14:44,570 --> 00:14:50,270
that it's easy it's because we are using

00:14:46,640 --> 00:14:52,430
basil and so in this example Jared has

00:14:50,270 --> 00:14:53,930
made this tool and he just shared it

00:14:52,430 --> 00:14:56,270
shares it with Patti and Patti's a

00:14:53,930 --> 00:14:58,400
Python developer in Gordon and Gordon is

00:14:56,270 --> 00:14:59,360
a go developer and they can all use it

00:14:58,400 --> 00:15:02,780
for different purposes

00:14:59,360 --> 00:15:07,670
now without basil what Jared would have

00:15:02,780 --> 00:15:11,540
had to do is tell Patti about this tool

00:15:07,670 --> 00:15:13,310
cool tool and then build an executable

00:15:11,540 --> 00:15:15,770
for her and maybe email it to her and

00:15:13,310 --> 00:15:18,260
she's excited and she shares it around

00:15:15,770 --> 00:15:20,660
and and people ask him about it so he

00:15:18,260 --> 00:15:22,460
puts it in a shared folder and then

00:15:20,660 --> 00:15:24,230
people can get it from there and they

00:15:22,460 --> 00:15:26,950
use it and it's popular and they copy it

00:15:24,230 --> 00:15:30,500
to different places and now jared has

00:15:26,950 --> 00:15:32,089
some requests to make changes so he

00:15:30,500 --> 00:15:34,100
makes changes and he makes another

00:15:32,089 --> 00:15:36,589
version but then there's all these

00:15:34,100 --> 00:15:37,310
versions like traversed across the

00:15:36,589 --> 00:15:38,899
company

00:15:37,310 --> 00:15:41,749
and now there's different versions and

00:15:38,899 --> 00:15:44,420
people say there's some issues and any

00:15:41,749 --> 00:15:45,860
figures that is this old version so now

00:15:44,420 --> 00:15:48,350
he has multiple versions he's kind of

00:15:45,860 --> 00:15:49,910
supporting and they might want to make

00:15:48,350 --> 00:15:51,350
changes and they don't know exactly how

00:15:49,910 --> 00:15:52,730
because they're not Java developers and

00:15:51,350 --> 00:15:55,370
it's hard for them they don't even have

00:15:52,730 --> 00:15:57,889
the bill tools to do that and now he

00:15:55,370 --> 00:15:59,959
ends up kind of as part of this job is

00:15:57,889 --> 00:16:02,689
to support this tool that he doesn't

00:15:59,959 --> 00:16:07,730
really want to be in like a big role of

00:16:02,689 --> 00:16:10,040
support for and and with with basil you

00:16:07,730 --> 00:16:11,449
don't have to compile it you just tell

00:16:10,040 --> 00:16:12,769
people how to build it and they build it

00:16:11,449 --> 00:16:14,720
themselves they don't need the tooling

00:16:12,769 --> 00:16:17,389
to be installed and stuff like that you

00:16:14,720 --> 00:16:19,189
don't need to manage executables so it's

00:16:17,389 --> 00:16:24,740
much much more easy to share to share

00:16:19,189 --> 00:16:29,660
tooling across the company so it basil

00:16:24,740 --> 00:16:31,879
makes tools tool sharing easy now let's

00:16:29,660 --> 00:16:36,139
talk about this other scenario where

00:16:31,879 --> 00:16:38,800
Becky and Fred are at the same company

00:16:36,139 --> 00:16:40,939
but at different teams all right and

00:16:38,800 --> 00:16:44,329
Fred's team has been doing some awesome

00:16:40,939 --> 00:16:47,180
work and they build these cool libraries

00:16:44,329 --> 00:16:50,149
and Becky just found one of them and she

00:16:47,180 --> 00:16:52,040
wants to use him and it's basically it's

00:16:50,149 --> 00:16:56,149
saved her like a week of work and she's

00:16:52,040 --> 00:16:59,149
really happy about it and she starts

00:16:56,149 --> 00:17:00,800
using it and maybe she tells Fred maybe

00:16:59,149 --> 00:17:04,699
maybe she forgot maybe she's not sure

00:17:00,800 --> 00:17:06,770
she should and now fred is going to

00:17:04,699 --> 00:17:08,510
change that code maybe even has a branch

00:17:06,770 --> 00:17:11,270
waiting to be merged to change that code

00:17:08,510 --> 00:17:13,280
and he breaks Becky's code and he breaks

00:17:11,270 --> 00:17:16,189
it and at a time where it's not

00:17:13,280 --> 00:17:17,390
convenient for her maybe she's going to

00:17:16,189 --> 00:17:19,880
release now she needs to update

00:17:17,390 --> 00:17:23,750
dependency and it's not a convenient

00:17:19,880 --> 00:17:26,839
time and what you have with basil is

00:17:23,750 --> 00:17:30,289
that you have the visibility attribute

00:17:26,839 --> 00:17:32,450
for folders and for targets and that way

00:17:30,289 --> 00:17:34,970
you can actually control who can use

00:17:32,450 --> 00:17:37,100
which code and different teams can say

00:17:34,970 --> 00:17:38,570
alright this folder this is our folder

00:17:37,100 --> 00:17:40,669
this is our team's folder and you can't

00:17:38,570 --> 00:17:43,250
use it unless you explicitly ask for

00:17:40,669 --> 00:17:45,710
permission and that is a conversation

00:17:43,250 --> 00:17:47,649
you want to be having because that's the

00:17:45,710 --> 00:17:50,210
point in time where you can talk about

00:17:47,649 --> 00:17:51,169
what it means to use that code and how

00:17:50,210 --> 00:17:53,539
we collaborate

00:17:51,169 --> 00:17:55,369
that code and what owner what about

00:17:53,539 --> 00:17:57,710
ownership what about changes to that

00:17:55,369 --> 00:17:59,629
code what about the time span of how

00:17:57,710 --> 00:18:02,359
long that code is going to be living and

00:17:59,629 --> 00:18:07,659
the release process and timing for that

00:18:02,359 --> 00:18:10,519
that releasing that code so Basel helps

00:18:07,659 --> 00:18:13,399
sharing code across the company easier

00:18:10,519 --> 00:18:15,799
and what many companies do to solve this

00:18:13,399 --> 00:18:17,210
is actually silo up different teams and

00:18:15,799 --> 00:18:19,549
different teams are working on different

00:18:17,210 --> 00:18:22,759
repositories so you don't have that kind

00:18:19,549 --> 00:18:25,249
of dependencies that might break things

00:18:22,759 --> 00:18:30,109
but then you can't share code as easily

00:18:25,249 --> 00:18:33,950
right the next example I want to show

00:18:30,109 --> 00:18:35,539
you is about Patti who just wants to

00:18:33,950 --> 00:18:39,919
make a small change in a web app and

00:18:35,539 --> 00:18:42,559
she's a Python developer now Jess who

00:18:39,919 --> 00:18:44,899
was a j/s developer he's like yeah sure

00:18:42,559 --> 00:18:46,759
like he's optimistically Patti what

00:18:44,899 --> 00:18:50,210
experience you have with web development

00:18:46,759 --> 00:18:52,309
and she is yeah I built this HTML

00:18:50,210 --> 00:18:55,009
website for my parents once in high

00:18:52,309 --> 00:18:57,619
school and he's optimistic and he's like

00:18:55,009 --> 00:19:00,019
alright so you can go ahead just install

00:18:57,619 --> 00:19:02,629
our gulp in CSS and then p.m. and go up

00:19:00,019 --> 00:19:06,470
the fire and ng and web pack and you're

00:19:02,629 --> 00:19:09,529
ready to go and yeah you can see that

00:19:06,470 --> 00:19:12,710
this generates some friction for Patti

00:19:09,529 --> 00:19:14,450
and making these small changes so Basel

00:19:12,710 --> 00:19:16,909
actually lowers barriers between teams

00:19:14,450 --> 00:19:20,029
in a way that if you want to make a

00:19:16,909 --> 00:19:22,299
change in a another team's code that is

00:19:20,029 --> 00:19:25,850
not on your like proficiency language

00:19:22,299 --> 00:19:27,679
you can do that and you don't have to

00:19:25,850 --> 00:19:29,720
wait for them to actually do that on

00:19:27,679 --> 00:19:31,549
their cycles you can do that on your

00:19:29,720 --> 00:19:34,999
cycles and it's if it's important to you

00:19:31,549 --> 00:19:37,239
can prioritize it and that makes that

00:19:34,999 --> 00:19:39,799
lowers the barriers for cooperation and

00:19:37,239 --> 00:19:45,559
removes friction between between teams

00:19:39,799 --> 00:19:48,070
across platforms and languages so some

00:19:45,559 --> 00:19:52,909
key points I want you to take from this

00:19:48,070 --> 00:19:56,869
from this deck is think about how you

00:19:52,909 --> 00:20:01,820
and your team in your company encode

00:19:56,869 --> 00:20:04,580
knowledge okay in your code and how easy

00:20:01,820 --> 00:20:07,410
is it for others to understand and use

00:20:04,580 --> 00:20:10,950
think about how others can build test

00:20:07,410 --> 00:20:14,070
and run code across teams how they can

00:20:10,950 --> 00:20:18,180
use the API that other teams are opening

00:20:14,070 --> 00:20:23,820
up and how easy is it to share code and

00:20:18,180 --> 00:20:27,270
tools across the company now if you have

00:20:23,820 --> 00:20:29,910
questions you can you can ask me of

00:20:27,270 --> 00:20:33,030
course and there's also have a little

00:20:29,910 --> 00:20:34,890
bit more time so we'll keep questions in

00:20:33,030 --> 00:20:38,550
to the end of something else I want to

00:20:34,890 --> 00:20:41,010
talk about you can look at this repo

00:20:38,550 --> 00:20:45,390
called the startup OS which is a

00:20:41,010 --> 00:20:48,000
template for our repository for a

00:20:45,390 --> 00:20:49,980
company which is what your repository

00:20:48,000 --> 00:20:52,860
for your company could look like using

00:20:49,980 --> 00:20:55,410
basil G RPC and protocol buffers and it

00:20:52,860 --> 00:20:58,140
has several best practices on how to use

00:20:55,410 --> 00:21:03,180
these technologies as well as some

00:20:58,140 --> 00:21:04,950
others and also if for startups there's

00:21:03,180 --> 00:21:08,400
this cloud credits program you're

00:21:04,950 --> 00:21:10,530
welcome to sign up and now I want to

00:21:08,400 --> 00:21:12,600
talk about at this kind of mini

00:21:10,530 --> 00:21:16,350
lightning talk instead of this talk okay

00:21:12,600 --> 00:21:18,660
so I want to talk about a code review

00:21:16,350 --> 00:21:20,580
tool that's related to Google's

00:21:18,660 --> 00:21:24,030
technologies and makes it easier to use

00:21:20,580 --> 00:21:25,470
Google's technologies but not only

00:21:24,030 --> 00:21:28,290
Google's technologies it's called

00:21:25,470 --> 00:21:33,930
reviewer and it's a multi repository

00:21:28,290 --> 00:21:35,220
code review so why why is it important

00:21:33,930 --> 00:21:36,950
what do you need a code review tool

00:21:35,220 --> 00:21:40,380
especially a multi repo code review tool

00:21:36,950 --> 00:21:42,540
so you think about profiles where do you

00:21:40,380 --> 00:21:45,270
put these profiles we've had a lightning

00:21:42,540 --> 00:21:48,050
talk yesterday about how managing

00:21:45,270 --> 00:21:52,260
profiles across dependencies is

00:21:48,050 --> 00:21:56,250
challenging and how you have the multi

00:21:52,260 --> 00:21:59,460
multi repo and mono repo workflows and

00:21:56,250 --> 00:22:04,230
how that is different and dependency

00:21:59,460 --> 00:22:08,400
hail which is you know it can make dents

00:22:04,230 --> 00:22:11,700
in your flow and actually break you in

00:22:08,400 --> 00:22:16,430
production so how do you how can you

00:22:11,700 --> 00:22:16,430
make all of these easier so

00:22:17,430 --> 00:22:23,430
so this tool can help you so basically

00:22:20,700 --> 00:22:25,380
it's a code review tool and it's multi

00:22:23,430 --> 00:22:27,180
repo so this basically it looks like a

00:22:25,380 --> 00:22:30,330
standard code review tool it's it's

00:22:27,180 --> 00:22:33,930
built it's inspired by Google's internal

00:22:30,330 --> 00:22:38,460
code review tool and these are just

00:22:33,930 --> 00:22:41,670
pictures or what it looks like okay just

00:22:38,460 --> 00:22:44,360
a standard tool now it's what is

00:22:41,670 --> 00:22:46,470
interesting about it it's multi repo

00:22:44,360 --> 00:22:49,020
multi repo means that you can actually

00:22:46,470 --> 00:22:55,280
have one PR that makes changes across

00:22:49,020 --> 00:22:57,690
multiple repos okay and these these PRS

00:22:55,280 --> 00:23:02,310
this tool can actually do atomic comas

00:22:57,690 --> 00:23:04,650
across these repos and it is hosting

00:23:02,310 --> 00:23:06,870
agnostic which means that you can

00:23:04,650 --> 00:23:11,000
actually work with repositories hosted

00:23:06,870 --> 00:23:16,130
on github get lab on Prem bitbucket

00:23:11,000 --> 00:23:19,620
Google Cloud repositories and others and

00:23:16,130 --> 00:23:22,500
it's currently it's supporting it but

00:23:19,620 --> 00:23:26,400
it's built to be extensible to mercurial

00:23:22,500 --> 00:23:29,100
and Piper and others and it supports

00:23:26,400 --> 00:23:31,350
private repos in an interesting way

00:23:29,100 --> 00:23:33,600
where you can actually have like two

00:23:31,350 --> 00:23:35,640
repos right it's multi repositories you

00:23:33,600 --> 00:23:39,330
can have two repos one private and one

00:23:35,640 --> 00:23:40,560
public and the private repo when you do

00:23:39,330 --> 00:23:43,500
code review when you look at the tool

00:23:40,560 --> 00:23:45,810
you see changes from both repos and you

00:23:43,500 --> 00:23:47,610
can collaborate on your public repo

00:23:45,810 --> 00:23:51,060
which is open source for someone outside

00:23:47,610 --> 00:23:52,500
your company and they can only see the

00:23:51,060 --> 00:23:55,650
public code and not your private code

00:23:52,500 --> 00:23:57,300
and it's secure innocent and in that way

00:23:55,650 --> 00:24:01,590
and I'll talk about why it's secure in

00:23:57,300 --> 00:24:04,770
that way and you can view local changes

00:24:01,590 --> 00:24:09,690
without pushing the code to github or to

00:24:04,770 --> 00:24:12,060
whatever host provider now how does all

00:24:09,690 --> 00:24:14,400
that is this is the architecture so we

00:24:12,060 --> 00:24:16,290
have the angular app in the middle there

00:24:14,400 --> 00:24:18,330
and it's good

00:24:16,290 --> 00:24:21,000
it gets submitted it metadata from fire

00:24:18,330 --> 00:24:23,640
store and it actually gets two files the

00:24:21,000 --> 00:24:28,740
code and this from a locally running

00:24:23,640 --> 00:24:31,200
server so no code actually gets off of

00:24:28,740 --> 00:24:32,640
your machine at any given time

00:24:31,200 --> 00:24:36,600
which is why you can actually work with

00:24:32,640 --> 00:24:39,660
private and public repos and stay secure

00:24:36,600 --> 00:24:42,300
and then it gets the the data from yet

00:24:39,660 --> 00:24:43,830
and that is why basically it basically

00:24:42,300 --> 00:24:45,720
he worked with a good protocol that's

00:24:43,830 --> 00:24:49,650
why it can work with various host

00:24:45,720 --> 00:24:53,700
hosting providing providers and that's

00:24:49,650 --> 00:24:57,270
basically like the architecture yeah and

00:24:53,700 --> 00:24:59,430
that's it I see the star is removed from

00:24:57,270 --> 00:25:03,030
where it should be but that that should

00:24:59,430 --> 00:25:07,670
mean that you can start a repo yeah so

00:25:03,030 --> 00:25:07,670
that's it happy to take any questions

00:25:09,230 --> 00:25:15,480

YouTube URL: https://www.youtube.com/watch?v=2W6hOGFQE-0


