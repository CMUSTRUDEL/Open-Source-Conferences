Title: BazelCon 2018 Day 1: Fusing Bazel
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	A quest for faster incremental builds
Petros Eskinder (Two Sigma Investments) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Petros Eskinder;
Captions: 
	00:00:02,020 --> 00:00:07,260
okay all right everyone so my name is

00:00:05,200 --> 00:00:09,309
Petrus I'm an engineer at 2 2 Sigma

00:00:07,260 --> 00:00:11,650
today I'm gonna be talking about fusing

00:00:09,309 --> 00:00:13,900
basil and it's not necessarily about

00:00:11,650 --> 00:00:15,910
making basil itself faster it was making

00:00:13,900 --> 00:00:16,539
incremental builds faster to Sigma and

00:00:15,910 --> 00:00:19,480
then maybe

00:00:16,539 --> 00:00:25,029
additionally making a small optimization

00:00:19,480 --> 00:00:27,189
to basil so the contents of the talk

00:00:25,029 --> 00:00:29,320
right and during the first part we'll

00:00:27,189 --> 00:00:30,609
kind of discuss how and why we're using

00:00:29,320 --> 00:00:33,820
basil and this will kind of be a

00:00:30,609 --> 00:00:36,610
testimonial from us effectively the

00:00:33,820 --> 00:00:38,200
short of it is that it's faster than

00:00:36,610 --> 00:00:40,060
what we have right now and we're kind of

00:00:38,200 --> 00:00:42,070
optimizing for incremental builds right

00:00:40,060 --> 00:00:44,230
the second part of this talk will be

00:00:42,070 --> 00:00:46,000
about one performance optimization that

00:00:44,230 --> 00:00:47,800
we kind of like saw the low-hanging

00:00:46,000 --> 00:00:51,220
fruit it was a small little change to

00:00:47,800 --> 00:00:54,160
basil that improved potentially improved

00:00:51,220 --> 00:00:56,730
our incremental built right and that was

00:00:54,160 --> 00:01:00,610
just modifying how basil computes its

00:00:56,730 --> 00:01:02,790
file digests right so before we get any

00:01:00,610 --> 00:01:02,790
further

00:01:03,530 --> 00:01:07,860
so we have to give a disclaimer that

00:01:06,030 --> 00:01:09,240
this is not any sort of look investment

00:01:07,860 --> 00:01:13,290
advice this has nothing to do with

00:01:09,240 --> 00:01:15,300
securities all right so that's that's a

00:01:13,290 --> 00:01:18,600
huge disclaimer right and you might be

00:01:15,300 --> 00:01:20,340
asking yourself why we had to do this

00:01:18,600 --> 00:01:24,420
right so let's kind of take a step back

00:01:20,340 --> 00:01:27,240
and get a sense of who we are right so

00:01:24,420 --> 00:01:29,280
I'll be talking first and then during

00:01:27,240 --> 00:01:30,870
the second part Gabe will be talking the

00:01:29,280 --> 00:01:32,910
two pictures that have been chosen were

00:01:30,870 --> 00:01:34,140
the ones that we use on github so if we

00:01:32,910 --> 00:01:36,090
make any sort of pull request you have

00:01:34,140 --> 00:01:38,600
something to kind of associate name to

00:01:36,090 --> 00:01:40,650
face name to picture thing going right

00:01:38,600 --> 00:01:42,840
so I work on the SPLC

00:01:40,650 --> 00:01:44,580
artifacts team and what we do is we just

00:01:42,840 --> 00:01:46,800
basically manage the build and test form

00:01:44,580 --> 00:01:48,530
at two Sigma and all sorts of source

00:01:46,800 --> 00:01:51,600
control ones and things of that nature

00:01:48,530 --> 00:01:53,790
Gabe will join us later on and he was

00:01:51,600 --> 00:01:56,880
our intern this summer he worked on the

00:01:53,790 --> 00:02:00,540
actual work to optimize basal right and

00:01:56,880 --> 00:02:01,860
he's going into June year does majoring

00:02:00,540 --> 00:02:05,940
in CS in stats

00:02:01,860 --> 00:02:08,640
smart kid so what guy so who we are as a

00:02:05,940 --> 00:02:11,160
company we're in plans some may prefer

00:02:08,640 --> 00:02:14,460
to us as a hedge fund we do a variety of

00:02:11,160 --> 00:02:16,590
like financial things so that's a crux

00:02:14,460 --> 00:02:19,680
of who we are right so let's get into

00:02:16,590 --> 00:02:21,870
the interesting stuff right we commented

00:02:19,680 --> 00:02:24,709
on like how the this first part is about

00:02:21,870 --> 00:02:26,910
how and why we're using basil right so

00:02:24,709 --> 00:02:28,590
let's get a sense of what our

00:02:26,910 --> 00:02:31,800
development environment is like right

00:02:28,590 --> 00:02:34,280
now and why we want to switch so right

00:02:31,800 --> 00:02:37,580
now we have a very large mono repo and

00:02:34,280 --> 00:02:41,610
we maintain multiple different languages

00:02:37,580 --> 00:02:43,350
we primarily use Java and Python we

00:02:41,610 --> 00:02:46,709
maintain our own dependency management

00:02:43,350 --> 00:02:47,490
system and we have a notion of a project

00:02:46,709 --> 00:02:50,160
which can have multiple different

00:02:47,490 --> 00:02:51,780
languages we have about 9,000 of these

00:02:50,160 --> 00:02:53,790
modules or projects

00:02:51,780 --> 00:02:56,580
4,000 of which are external dependencies

00:02:53,790 --> 00:02:58,500
some of which are pre compiled some are

00:02:56,580 --> 00:02:59,849
built from source right so you have some

00:02:58,500 --> 00:03:02,819
sense of what the source control is like

00:02:59,849 --> 00:03:05,010
right what about building tests what is

00:03:02,819 --> 00:03:08,160
the scale in terms of how many builds

00:03:05,010 --> 00:03:10,260
and tests that we do each day each day

00:03:08,160 --> 00:03:12,390
we do roughly about fifteen thousand

00:03:10,260 --> 00:03:14,730
gold indications so like builds of the

00:03:12,390 --> 00:03:16,640
entire mono repo and then that kind of

00:03:14,730 --> 00:03:20,400
breaks down to about

00:03:16,640 --> 00:03:21,960
275,000 build actions and overall over

00:03:20,400 --> 00:03:24,330
the entire company we do about 7.5

00:03:21,960 --> 00:03:26,160
million tests and then this is spread

00:03:24,330 --> 00:03:28,500
across remote build and test farm

00:03:26,160 --> 00:03:30,810
weights about six thousand course so in

00:03:28,500 --> 00:03:32,520
this I've commented about this thing

00:03:30,810 --> 00:03:34,410
called build actions it's not the same

00:03:32,520 --> 00:03:37,050
build actions that it's typically

00:03:34,410 --> 00:03:39,210
associated with basal so this kind of

00:03:37,050 --> 00:03:41,430
leads to the next part so right now

00:03:39,210 --> 00:03:43,680
we're not officially using basil for

00:03:41,430 --> 00:03:46,500
everything we're still migrating over so

00:03:43,680 --> 00:03:49,230
what is our existing build system it's

00:03:46,500 --> 00:03:51,570
based on make and what it does is that

00:03:49,230 --> 00:03:52,680
it has a different build script for each

00:03:51,570 --> 00:03:57,030
of the different languages that we use

00:03:52,680 --> 00:03:58,770
so all the jvm languages use and for C++

00:03:57,030 --> 00:04:00,270
for use GC and then we have various

00:03:58,770 --> 00:04:03,090
interpreters and transpilers for Java

00:04:00,270 --> 00:04:05,010
scripting and buy them right and one

00:04:03,090 --> 00:04:09,360
huge problem that we face on this front

00:04:05,010 --> 00:04:11,550
is that it's quite slow and it's also

00:04:09,360 --> 00:04:14,400
really hard to maintain the the second

00:04:11,550 --> 00:04:17,940
part it's it's much smaller in writing

00:04:14,400 --> 00:04:19,769
but it's a huge pain point and so

00:04:17,940 --> 00:04:22,020
because of the slowness what we ended up

00:04:19,769 --> 00:04:25,980
doing a few years ago was create a

00:04:22,020 --> 00:04:27,480
building test form right and as I said

00:04:25,980 --> 00:04:28,710
before there's about 6,000 cores and

00:04:27,480 --> 00:04:31,620
this was supposed to make things faster

00:04:28,710 --> 00:04:33,840
and we additionally maintained a content

00:04:31,620 --> 00:04:36,270
addressable store with all of our build

00:04:33,840 --> 00:04:39,720
artifacts and that we maintain some sort

00:04:36,270 --> 00:04:43,730
of like mapping between version of the

00:04:39,720 --> 00:04:46,830
mono repo and content trust before right

00:04:43,730 --> 00:04:50,250
but again we come into the same issue

00:04:46,830 --> 00:04:51,360
where it's still slow and it's harder to

00:04:50,250 --> 00:04:54,000
maintain because you have more things

00:04:51,360 --> 00:04:56,970
that chefs maintain and so basically

00:04:54,000 --> 00:04:58,980
kind of fits in for us here where what

00:04:56,970 --> 00:05:01,740
we want to do is basically kind of throw

00:04:58,980 --> 00:05:06,960
away the existing build system and move

00:05:01,740 --> 00:05:10,260
on to using basil entirely right there

00:05:06,960 --> 00:05:12,000
is one complication now we have as we

00:05:10,260 --> 00:05:16,620
make this migration we want to ensure

00:05:12,000 --> 00:05:19,050
that we're not disrupting anyone we so

00:05:16,620 --> 00:05:22,110
what we've done so far is that we just

00:05:19,050 --> 00:05:23,700
migrated just the Java code to built

00:05:22,110 --> 00:05:24,900
with basil and it's kind of

00:05:23,700 --> 00:05:29,110
counterintuitive because we're having

00:05:24,900 --> 00:05:30,700
make invoke basil but it is

00:05:29,110 --> 00:05:33,670
what we're doing right now and we've

00:05:30,700 --> 00:05:35,410
kind of predicated migration where teams

00:05:33,670 --> 00:05:37,300
have to opt in and we do not forcibly up

00:05:35,410 --> 00:05:39,310
migrate them over and we're trying to

00:05:37,300 --> 00:05:41,350
get it to where where it's the builds

00:05:39,310 --> 00:05:45,820
are so fast that they are incentivized

00:05:41,350 --> 00:05:47,470
to migrate over and so I've come to

00:05:45,820 --> 00:05:49,390
about our goal of getting it so fast

00:05:47,470 --> 00:05:51,610
people voluntarily migrate over how have

00:05:49,390 --> 00:05:54,790
we done on as far as maintainability and

00:05:51,610 --> 00:05:56,650
speed as far as maintainability all you

00:05:54,790 --> 00:05:59,500
guys here have made it significantly

00:05:56,650 --> 00:06:01,540
easier job we previously had a team of

00:05:59,500 --> 00:06:03,940
maybe eight or ten engineers at this

00:06:01,540 --> 00:06:06,250
point with Basel at least you have

00:06:03,940 --> 00:06:08,670
engineers across the world working on

00:06:06,250 --> 00:06:12,420
this constantly and ensuring that it's

00:06:08,670 --> 00:06:17,260
performant reproducible correct right

00:06:12,420 --> 00:06:19,150
now as far as speed the the slides

00:06:17,260 --> 00:06:20,950
demonstrate one critical service that we

00:06:19,150 --> 00:06:22,600
that we maintain that our team maintains

00:06:20,950 --> 00:06:24,640
and you can notice from the incremental

00:06:22,600 --> 00:06:26,380
builds how much faster it is to build

00:06:24,640 --> 00:06:28,720
with Basel rather than to build with

00:06:26,380 --> 00:06:31,650
what we're doing to make its obscenely

00:06:28,720 --> 00:06:33,820
faster right and that's exciting and

00:06:31,650 --> 00:06:36,330
we're hoping that more people will see

00:06:33,820 --> 00:06:38,740
this internally and then from there just

00:06:36,330 --> 00:06:40,510
voluntarily migrated over with our

00:06:38,740 --> 00:06:42,150
assistance of course and as far as our

00:06:40,510 --> 00:06:45,600
general progress in terms of migration

00:06:42,150 --> 00:06:48,160
from our what we're about like 3,500

00:06:45,600 --> 00:06:50,290
modules that use Java code we have about

00:06:48,160 --> 00:06:51,700
275 that have been migrated over and

00:06:50,290 --> 00:06:55,210
most of those are things that we've

00:06:51,700 --> 00:06:58,170
owned as well as one other team okay so

00:06:55,210 --> 00:07:01,390
I discussed how we've seen some great

00:06:58,170 --> 00:07:04,510
speed gains and specifically incremental

00:07:01,390 --> 00:07:06,910
build game build speed games for things

00:07:04,510 --> 00:07:10,200
that we've migrated earlier this summer

00:07:06,910 --> 00:07:14,110
we noticed that we could get more

00:07:10,200 --> 00:07:17,260
improvements and so we thought let's

00:07:14,110 --> 00:07:20,170
look at how basil identifies whether a

00:07:17,260 --> 00:07:23,160
file has changed can we modify that in

00:07:20,170 --> 00:07:26,160
any sort of way to make it faster so

00:07:23,160 --> 00:07:29,020
taking a step back

00:07:26,160 --> 00:07:30,970
currently what basil does is that

00:07:29,020 --> 00:07:32,410
whenever to determine whether a file has

00:07:30,970 --> 00:07:35,110
changed or not it just goes in it

00:07:32,410 --> 00:07:37,000
fetches the files contents and then it

00:07:35,110 --> 00:07:39,460
computes a digester hash of the file and

00:07:37,000 --> 00:07:41,700
this differs from other build systems

00:07:39,460 --> 00:07:43,380
like make which kind of maintain a time

00:07:41,700 --> 00:07:46,980
stamp and check if the time stamp has

00:07:43,380 --> 00:07:49,740
changed or whatever and then after it

00:07:46,980 --> 00:07:52,140
computes this digest it then diffs

00:07:49,740 --> 00:07:53,910
against what it the existing digester

00:07:52,140 --> 00:07:56,280
knows of and if there's a difference

00:07:53,910 --> 00:07:57,750
then clearly it's changed right and this

00:07:56,280 --> 00:07:59,880
is fun

00:07:57,750 --> 00:08:02,250
in general but there's one problem for

00:07:59,880 --> 00:08:04,050
us and the problem is that most of our

00:08:02,250 --> 00:08:05,490
files are not actually on disk we

00:08:04,050 --> 00:08:07,980
actually mount them over the network

00:08:05,490 --> 00:08:13,650
through a fuse mount now you might ask

00:08:07,980 --> 00:08:15,750
why they aren't done disk write this the

00:08:13,650 --> 00:08:18,000
reason we have it the reason what we

00:08:15,750 --> 00:08:20,150
mount most of our files over the network

00:08:18,000 --> 00:08:23,070
is that again we have a huge mono repo

00:08:20,150 --> 00:08:25,890
developers may only work on a small

00:08:23,070 --> 00:08:28,320
subset of that mono repo and they don't

00:08:25,890 --> 00:08:32,010
necessarily need write access to the

00:08:28,320 --> 00:08:34,229
entirety of the mono repo right so

00:08:32,010 --> 00:08:36,120
there's source control issues in terms

00:08:34,229 --> 00:08:39,630
of having to check out everything so

00:08:36,120 --> 00:08:40,020
what we do is they access just a subset

00:08:39,630 --> 00:08:42,390
of that

00:08:40,020 --> 00:08:44,580
additionally alongside the source code

00:08:42,390 --> 00:08:46,620
there the build artifacts this is a

00:08:44,580 --> 00:08:49,290
general problem for any sort of say

00:08:46,620 --> 00:08:52,050
remote caching or remote build right if

00:08:49,290 --> 00:08:53,910
you build something there's gonna be a

00:08:52,050 --> 00:08:55,590
lot of intermediate output if you're

00:08:53,910 --> 00:08:57,990
gonna go in and set all of that

00:08:55,590 --> 00:09:00,390
intermediate output that has a network

00:08:57,990 --> 00:09:03,060
cost right and it'd be ideal if we

00:09:00,390 --> 00:09:05,370
didn't necessarily do that and so in

00:09:03,060 --> 00:09:07,500
addition to exposing the source files

00:09:05,370 --> 00:09:11,160
over excuse mount we also expose build

00:09:07,500 --> 00:09:13,830
artifacts so those are our motivations

00:09:11,160 --> 00:09:15,720
for why we're doing things on fuse now

00:09:13,830 --> 00:09:18,420
stepping back why is it not ideal that

00:09:15,720 --> 00:09:21,060
basil is fetching the entire file

00:09:18,420 --> 00:09:24,140
content and computing a hash on that so

00:09:21,060 --> 00:09:27,230
if you look at the diagram above right

00:09:24,140 --> 00:09:29,160
all basil is doing is just kind of

00:09:27,230 --> 00:09:30,810
wanting to identify whether a file has

00:09:29,160 --> 00:09:35,040
changed and it's stretching all that

00:09:30,810 --> 00:09:37,560
content it'd be nice if it just fetched

00:09:35,040 --> 00:09:39,150
the digest which would just be a hash of

00:09:37,560 --> 00:09:42,000
the file rather than get everything in

00:09:39,150 --> 00:09:45,060
the file and for large files this is an

00:09:42,000 --> 00:09:49,590
issue and basil wants to do this for all

00:09:45,060 --> 00:09:52,290
sorts of files so we so we thought okay

00:09:49,590 --> 00:09:54,130
let's figure out a way to kind of expose

00:09:52,290 --> 00:09:55,990
the file digest the basil and

00:09:54,130 --> 00:09:58,690
telogen Manor and this is the work that

00:09:55,990 --> 00:10:01,180
Gabe did this summer and I'm gonna pass

00:09:58,690 --> 00:10:08,290
it off to him to discuss what how he

00:10:01,180 --> 00:10:10,390
implemented this hi everyone

00:10:08,290 --> 00:10:12,400
yeah so one thing that we thought was

00:10:10,390 --> 00:10:14,230
really important is to not just expose

00:10:12,400 --> 00:10:14,890
this Val digest can kind of like an ad

00:10:14,230 --> 00:10:17,140
hoc manner

00:10:14,890 --> 00:10:19,120
so not just like add some random API - I

00:10:17,140 --> 00:10:21,880
refuse but I do this and kind of like a

00:10:19,120 --> 00:10:26,470
standardized format and ideally like

00:10:21,880 --> 00:10:29,110
POSIX compliant as well so yeah so our

00:10:26,470 --> 00:10:31,180
proposed solution is to expose this file

00:10:29,110 --> 00:10:33,430
digest via a user-defined extended

00:10:31,180 --> 00:10:36,040
attribute so Google actually does this

00:10:33,430 --> 00:10:37,420
internally with plays and source FS this

00:10:36,040 --> 00:10:39,310
is a bitly link that you guys can go to

00:10:37,420 --> 00:10:40,900
and see a whole blog post about how

00:10:39,310 --> 00:10:43,630
Google does their build system in the

00:10:40,900 --> 00:10:45,760
cloud it's a bit dated but so yeah so so

00:10:43,630 --> 00:10:47,200
our goal is to expose the via and

00:10:45,760 --> 00:10:49,270
extended attribute so so what actually

00:10:47,200 --> 00:10:50,710
is an extended attribute it's basically

00:10:49,270 --> 00:10:52,810
kind of like a key value store you can

00:10:50,710 --> 00:10:55,900
associate with an inode in a file system

00:10:52,810 --> 00:10:57,760
that allows you to kind of just

00:10:55,900 --> 00:10:59,860
associate metadata that the file system

00:10:57,760 --> 00:11:01,840
doesn't actually interpret so POSIX

00:10:59,860 --> 00:11:04,300
access control lists are implemented via

00:11:01,840 --> 00:11:08,650
extended attributes on some Sun some

00:11:04,300 --> 00:11:10,200
file systems for example yeah so so what

00:11:08,650 --> 00:11:12,250
modifications we actually need to make

00:11:10,200 --> 00:11:15,070
what gluco do we need to write to

00:11:12,250 --> 00:11:16,780
connect basil and the fuse system so

00:11:15,070 --> 00:11:19,750
first you got one if I basil and the

00:11:16,780 --> 00:11:20,800
fuse so let's take a step back and kind

00:11:19,750 --> 00:11:22,570
of talk about what's kind of going on

00:11:20,800 --> 00:11:25,960
behind the scenes when we try to get

00:11:22,570 --> 00:11:27,520
information off of Hughes note so say we

00:11:25,960 --> 00:11:30,600
want to either cat or get an extended

00:11:27,520 --> 00:11:32,890
attribute from from some file so the

00:11:30,600 --> 00:11:34,450
basil and user space is going to make a

00:11:32,890 --> 00:11:36,460
call out to the the virtual file system

00:11:34,450 --> 00:11:38,380
in the kernel and the kernel will decide

00:11:36,460 --> 00:11:40,330
whether to talk to the few driver or

00:11:38,380 --> 00:11:44,110
talk to the kernel based filesystem for

00:11:40,330 --> 00:11:45,430
the file contents and then if it's on

00:11:44,110 --> 00:11:47,050
the fuse the fuse driver will then they

00:11:45,430 --> 00:11:49,420
could call out to the the fuse daemon

00:11:47,050 --> 00:11:51,460
that's running in user space which will

00:11:49,420 --> 00:11:55,000
then communicate over G RPC to our

00:11:51,460 --> 00:11:56,620
content-addressable store and then that

00:11:55,000 --> 00:11:58,450
either the digest or the contents get

00:11:56,620 --> 00:12:00,280
transferred all the way back to the

00:11:58,450 --> 00:12:03,640
daemon to the huge driver do the kernel

00:12:00,280 --> 00:12:06,010
and then to basil so let's talk about

00:12:03,640 --> 00:12:07,660
the fuse fortunately for us all files

00:12:06,010 --> 00:12:09,220
are immutable

00:12:07,660 --> 00:12:11,920
our content addressable store so it's

00:12:09,220 --> 00:12:14,650
it's right and read but the right only

00:12:11,920 --> 00:12:16,630
happens by the build farm who's

00:12:14,650 --> 00:12:20,410
uploading the build results and the

00:12:16,630 --> 00:12:21,880
source files so to a developer they only

00:12:20,410 --> 00:12:22,930
read these files so the only part that

00:12:21,880 --> 00:12:25,540
we actually have to implement the

00:12:22,930 --> 00:12:28,150
extended attributes for our reading and

00:12:25,540 --> 00:12:30,130
listing so nono setting and dealing with

00:12:28,150 --> 00:12:33,250
state inside the file system which is

00:12:30,130 --> 00:12:34,840
fortunate so yeah so we kind of expose

00:12:33,250 --> 00:12:38,500
this just as a as a user as a

00:12:34,840 --> 00:12:41,050
user-defined checksum and then to Basel

00:12:38,500 --> 00:12:44,710
the changes we we needed to make was

00:12:41,050 --> 00:12:47,170
basically kind of write a new virtual

00:12:44,710 --> 00:12:49,810
file system layer or class that would

00:12:47,170 --> 00:12:51,610
that would instead of you know patching

00:12:49,810 --> 00:12:53,350
out natively to get this extended there

00:12:51,610 --> 00:12:55,570
to get the the the contents of the file

00:12:53,350 --> 00:12:57,070
and then compute a hash it would just

00:12:55,570 --> 00:12:59,740
recognize that it was that it was that

00:12:57,070 --> 00:13:02,080
the file path is working on the fuse and

00:12:59,740 --> 00:13:03,420
make a call to the extended option to

00:13:02,080 --> 00:13:07,630
the to the native extended attribute

00:13:03,420 --> 00:13:12,040
code yeah so let's look at some some

00:13:07,630 --> 00:13:15,850
brief results so if so if we set up a

00:13:12,040 --> 00:13:17,650
test and we we look at kind of 1500

00:13:15,850 --> 00:13:20,080
files that basil ends up trying to get

00:13:17,650 --> 00:13:22,450
the digest for for a specific build so

00:13:20,080 --> 00:13:23,860
we kind of took one java code base and

00:13:22,450 --> 00:13:26,830
look at all the files that basil would

00:13:23,860 --> 00:13:28,930
ever get the digest for right and if we

00:13:26,830 --> 00:13:30,880
look at the time that it takes to get

00:13:28,930 --> 00:13:32,410
those there's hashes just downloading

00:13:30,880 --> 00:13:34,300
and then computing a hash be like

00:13:32,410 --> 00:13:36,280
command-line tools versus reading the

00:13:34,300 --> 00:13:38,280
digest off of an extended attribute is

00:13:36,280 --> 00:13:40,510
this is the kind of distribution we see

00:13:38,280 --> 00:13:42,520
so this is like a distribution plot and

00:13:40,510 --> 00:13:44,320
this is a bar plot of kind of the same

00:13:42,520 --> 00:13:47,830
thing so you see that when we're

00:13:44,320 --> 00:13:50,920
downloading the the file the the times

00:13:47,830 --> 00:13:52,990
are actually really like much much with

00:13:50,920 --> 00:13:55,030
a much higher variance which makes sense

00:13:52,990 --> 00:13:56,620
because it takes longer to download a

00:13:55,030 --> 00:13:58,690
file of a higher megabytes versus a file

00:13:56,620 --> 00:14:00,220
of one kilobyte right but for extended

00:13:58,690 --> 00:14:01,480
attributes it should all be the same the

00:14:00,220 --> 00:14:05,110
same because we're just sending over a

00:14:01,480 --> 00:14:07,330
fixed size hash yes it's much much less

00:14:05,110 --> 00:14:09,370
affected by how much network bandwidth

00:14:07,330 --> 00:14:10,720
we have access to but if we look at

00:14:09,370 --> 00:14:12,400
builds we see a much different story

00:14:10,720 --> 00:14:14,410
we actually don't see much of a

00:14:12,400 --> 00:14:19,660
difference except maybe up on the upper

00:14:14,410 --> 00:14:21,250
percentiles so so why is this right so

00:14:19,660 --> 00:14:23,950
why do we see much

00:14:21,250 --> 00:14:25,630
suave build improvements when we know

00:14:23,950 --> 00:14:31,480
we're actually downloading all like much

00:14:25,630 --> 00:14:32,920
less data so possible cause is that this

00:14:31,480 --> 00:14:36,280
actually isn't a throughput issue at all

00:14:32,920 --> 00:14:38,050
it's a latency issue so the time that we

00:14:36,280 --> 00:14:39,670
spend getting these getting these file

00:14:38,050 --> 00:14:41,800
digests is not actually spent in

00:14:39,670 --> 00:14:43,270
downloading the like downloading files

00:14:41,800 --> 00:14:44,890
over and over again it's bent just

00:14:43,270 --> 00:14:46,630
making community like making calls to

00:14:44,890 --> 00:14:47,590
the kernel and then to the daemon and

00:14:46,630 --> 00:14:48,220
then out to our content addressable

00:14:47,590 --> 00:14:50,880
store

00:14:48,220 --> 00:14:54,100
so maybe the cause is just is just

00:14:50,880 --> 00:14:56,320
making those connections at all and

00:14:54,100 --> 00:14:57,490
another issue is that our fused daemon

00:14:56,320 --> 00:14:59,110
might be a little bit chatty so to

00:14:57,490 --> 00:15:01,000
actually get the digest of a specific

00:14:59,110 --> 00:15:02,950
file as to make several round trips to

00:15:01,000 --> 00:15:07,420
our content-addressable store it's not

00:15:02,950 --> 00:15:09,520
just not just one call another cause is

00:15:07,420 --> 00:15:11,560
that right now the way that the way that

00:15:09,520 --> 00:15:13,960
we develop at T Sigma all of the

00:15:11,560 --> 00:15:15,730
developers work on remote machines there

00:15:13,960 --> 00:15:17,020
there there's an ax like an existent

00:15:15,730 --> 00:15:17,920
there's no like local development

00:15:17,020 --> 00:15:21,100
machines

00:15:17,920 --> 00:15:22,660
so those developer remote machines are

00:15:21,100 --> 00:15:25,780
actually co-located with our build and

00:15:22,660 --> 00:15:27,370
test farm so it's possible that the

00:15:25,780 --> 00:15:29,890
there's no like latency or throughput

00:15:27,370 --> 00:15:32,020
issue at all because it's it's just like

00:15:29,890 --> 00:15:33,339
it's co-located and we have like you

00:15:32,020 --> 00:15:35,530
know really fast interconnects between

00:15:33,339 --> 00:15:37,839
the machines so the speed just really

00:15:35,530 --> 00:15:40,050
isn't a problem for us but it could be a

00:15:37,839 --> 00:15:44,050
problem for our people who have you know

00:15:40,050 --> 00:15:46,740
separate separate build farms and

00:15:44,050 --> 00:15:49,990
developer machines

00:15:46,740 --> 00:15:51,100
yeah so then I'll invite Petrus back up

00:15:49,990 --> 00:15:55,000
and kind of talk about the community

00:15:51,100 --> 00:15:57,160
impactive of our work so in general this

00:15:55,000 --> 00:16:00,370
was supposed to be a testimonial swords

00:15:57,160 --> 00:16:03,700
we have been working on basil for

00:16:00,370 --> 00:16:06,100
roughly one to two years kind of like

00:16:03,700 --> 00:16:07,570
off and on we've had different with our

00:16:06,100 --> 00:16:10,780
existing build system is pretty

00:16:07,570 --> 00:16:11,710
intricate and pretty bespoke and this

00:16:10,780 --> 00:16:14,080
migration has been one of the more

00:16:11,710 --> 00:16:16,120
challenging ones and so we thought it

00:16:14,080 --> 00:16:18,070
was useful to kind of give a sense of

00:16:16,120 --> 00:16:20,860
where we're coming from why we were

00:16:18,070 --> 00:16:24,339
interested in what was attracting us to

00:16:20,860 --> 00:16:25,600
basil the second thing is for remote

00:16:24,339 --> 00:16:28,060
execution so as you guys probably

00:16:25,600 --> 00:16:29,980
noticed there's been what two talks

00:16:28,060 --> 00:16:31,570
already today about remote execution

00:16:29,980 --> 00:16:33,670
there's gonna be more today neck

00:16:31,570 --> 00:16:37,990
tomorrow

00:16:33,670 --> 00:16:40,540
so over maybe a six to seven year period

00:16:37,990 --> 00:16:42,850
we built up our own remote build farm as

00:16:40,540 --> 00:16:45,670
well as our own remote cache and content

00:16:42,850 --> 00:16:47,350
Driscoll store and so eventually we kind

00:16:45,670 --> 00:16:48,790
of let ourselves down the route of going

00:16:47,350 --> 00:16:50,500
this queues not round

00:16:48,790 --> 00:16:54,190
other approaches have also been

00:16:50,500 --> 00:16:57,010
introduced or proposed such as like a

00:16:54,190 --> 00:16:58,750
remote file action system there's a

00:16:57,010 --> 00:17:01,600
general problem as I mentioned before

00:16:58,750 --> 00:17:03,730
that there's a lot of basil has a lot of

00:17:01,600 --> 00:17:07,180
intermediary outputs especially we do a

00:17:03,730 --> 00:17:08,860
remote build what and having that be

00:17:07,180 --> 00:17:10,780
fetched over a network all of that

00:17:08,860 --> 00:17:12,520
that's a problem

00:17:10,780 --> 00:17:15,940
there's network costs on that front and

00:17:12,520 --> 00:17:17,920
so we presented one solution there are

00:17:15,940 --> 00:17:19,860
other solutions and hopefully if we

00:17:17,920 --> 00:17:23,350
could kind of you could use this as

00:17:19,860 --> 00:17:25,990
inspiration there so it's the changes

00:17:23,350 --> 00:17:28,150
have not been up streamed the reasoning

00:17:25,990 --> 00:17:30,160
being that at the time of writing this

00:17:28,150 --> 00:17:33,190
there was a considerable considerable

00:17:30,160 --> 00:17:37,030
amount of flux what the whole blaze

00:17:33,190 --> 00:17:40,870
module system but we've learned recently

00:17:37,030 --> 00:17:42,730
that it is stabilized you know in some

00:17:40,870 --> 00:17:46,420
respects and that it's more pluggable

00:17:42,730 --> 00:17:48,610
and so there is more interest we are

00:17:46,420 --> 00:17:49,600
interested in kind of upstream our

00:17:48,610 --> 00:17:52,180
changes because then we don't have to

00:17:49,600 --> 00:17:54,340
maintain it and we can bounce off of

00:17:52,180 --> 00:18:01,000
what George was saying and give it PR

00:17:54,340 --> 00:18:03,400
and merge our changes so that's the

00:18:01,000 --> 00:18:07,240
extent of our talk if anyone has any

00:18:03,400 --> 00:18:10,420
general questions say with our migration

00:18:07,240 --> 00:18:12,430
experiences or with fuse feel free to

00:18:10,420 --> 00:18:14,670
reach out to us we're all entire teams

00:18:12,430 --> 00:18:14,670
here

00:18:16,050 --> 00:18:18,110

YouTube URL: https://www.youtube.com/watch?v=rQd9Zd1ONOw


