Title: BazelCon 2018 Day 1: Migrating From Maven to Bazel at Salesforce
Publication date: 2018-11-01
Playlist: BazelCon 2018
Description: 
	Blaine Buxton, Peter Laird, & Simon Toens (Salesforce.com) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Blaine Buxton, Peter Laird, Simon Toens;
Captions: 
	00:00:02,540 --> 00:00:06,000
[Applause]

00:00:04,340 --> 00:00:08,849
good

00:00:06,000 --> 00:00:11,760
so I'm Peter Blaine and Simon are here

00:00:08,849 --> 00:00:14,220
they will be following me but we're here

00:00:11,760 --> 00:00:17,630
to talk about our journey in the Basel

00:00:14,220 --> 00:00:20,789
world we started with our maven

00:00:17,630 --> 00:00:22,739
conversion for a small set of assets

00:00:20,789 --> 00:00:25,019
inside of Salesforce about a year ago

00:00:22,739 --> 00:00:27,810
it's a part-time job for us so we don't

00:00:25,019 --> 00:00:30,659
work on it all the time but we're gonna

00:00:27,810 --> 00:00:31,890
be talking about specific we're gonna be

00:00:30,659 --> 00:00:33,480
talking about a number of things but the

00:00:31,890 --> 00:00:35,640
biggest thing we had to deal with was

00:00:33,480 --> 00:00:37,430
how to coexist with maven and so that's

00:00:35,640 --> 00:00:39,809
gonna be the main focus of our talk

00:00:37,430 --> 00:00:43,109
another company red fin did a great

00:00:39,809 --> 00:00:44,789
presentation about the same topic a

00:00:43,109 --> 00:00:47,219
little while ago and that's also out

00:00:44,789 --> 00:00:49,019
there and they took a different approach

00:00:47,219 --> 00:00:50,460
and they had different requirements and

00:00:49,019 --> 00:00:52,289
so they had to do things differently

00:00:50,460 --> 00:00:54,809
than us but that's a really good if

00:00:52,289 --> 00:00:58,980
you're if this topic applies to you to

00:00:54,809 --> 00:01:08,700
you be sure to catch that as well and so

00:00:58,980 --> 00:01:10,200
let's get started so Salesforce is I

00:01:08,700 --> 00:01:13,260
would consider a big company now we have

00:01:10,200 --> 00:01:14,900
about 30,000 employees not all of us are

00:01:13,260 --> 00:01:18,030
developers so we don't beat Google

00:01:14,900 --> 00:01:19,950
Google as 30,000 developers we have a

00:01:18,030 --> 00:01:23,010
lot of sales people and such but we have

00:01:19,950 --> 00:01:24,950
thousands of developers we have you know

00:01:23,010 --> 00:01:27,090
of course hundreds of development teams

00:01:24,950 --> 00:01:30,360
hundreds if not thousands of products

00:01:27,090 --> 00:01:32,130
that go out there across the company we

00:01:30,360 --> 00:01:34,980
use a number of different programming

00:01:32,130 --> 00:01:37,410
languages different architectures some

00:01:34,980 --> 00:01:38,910
are monolith based architectures some

00:01:37,410 --> 00:01:42,270
products are built with micro services

00:01:38,910 --> 00:01:44,480
based architectures but the team that

00:01:42,270 --> 00:01:47,250
we're on is really focused on

00:01:44,480 --> 00:01:49,620
accelerating the development of Java

00:01:47,250 --> 00:01:51,240
based micro services and so our talk and

00:01:49,620 --> 00:01:54,030
really after the focus of our migration

00:01:51,240 --> 00:01:55,860
was really focused on that although some

00:01:54,030 --> 00:01:59,340
of the things that we do do get consumed

00:01:55,860 --> 00:02:05,880
by some monolith products and so it's

00:01:59,340 --> 00:02:08,729
not entirely set on just micro services

00:02:05,880 --> 00:02:11,840
but that is our focus and so when we

00:02:08,729 --> 00:02:15,610
started our basil journey we had

00:02:11,840 --> 00:02:18,160
as a team we were supporting a number of

00:02:15,610 --> 00:02:21,890
libraries written in Java numbers

00:02:18,160 --> 00:02:24,680
microservices written in Java and but

00:02:21,890 --> 00:02:28,310
they were all in isolated get

00:02:24,680 --> 00:02:31,489
repositories for our libraries maven

00:02:28,310 --> 00:02:33,950
would would build them and ship my ship

00:02:31,489 --> 00:02:37,400
them up to Nexus which is our maven

00:02:33,950 --> 00:02:39,379
repository and then for services we just

00:02:37,400 --> 00:02:41,980
had hand rolled scripts that would you

00:02:39,379 --> 00:02:45,079
know create docker images and ship those

00:02:41,980 --> 00:02:48,260
and melody covered a lot of these topics

00:02:45,079 --> 00:02:51,319
this morning in the in the keynote but

00:02:48,260 --> 00:02:53,660
we had issues with just continuous

00:02:51,319 --> 00:02:55,430
integration so somebody up updates a

00:02:53,660 --> 00:02:58,370
library and then we find out six months

00:02:55,430 --> 00:03:01,250
later that that broke a service etc we

00:02:58,370 --> 00:03:04,040
had dependency how we had just basic

00:03:01,250 --> 00:03:06,079
questions that we do you know get get

00:03:04,040 --> 00:03:07,879
repository searches looking for users of

00:03:06,079 --> 00:03:10,579
particular libraries to find out who's

00:03:07,879 --> 00:03:12,620
actually using the thing and as melody

00:03:10,579 --> 00:03:16,400
said emergency security patches were an

00:03:12,620 --> 00:03:17,840
issue also when we upgraded a JDK across

00:03:16,400 --> 00:03:21,680
the company it was it was kind of hard

00:03:17,840 --> 00:03:27,880
to go and go and test all the impacts to

00:03:21,680 --> 00:03:31,099
that so we started on the mono repo

00:03:27,880 --> 00:03:33,230
solution to this about a year ago we've

00:03:31,099 --> 00:03:39,170
been working on it off and on we started

00:03:33,230 --> 00:03:41,690
with basil 0.5 and so the the goals were

00:03:39,170 --> 00:03:43,790
to have all these libraries and services

00:03:41,690 --> 00:03:46,250
in the same repositories to make one

00:03:43,790 --> 00:03:47,780
change and you see the impacts right

00:03:46,250 --> 00:03:51,169
away

00:03:47,780 --> 00:03:53,180
and as Dimitri is saying you know one of

00:03:51,169 --> 00:03:54,620
the goals of basil now is to do you know

00:03:53,180 --> 00:03:56,650
kind of support the the gradual rollout

00:03:54,620 --> 00:04:00,650
use case which is really important to us

00:03:56,650 --> 00:04:03,889
because for for Salesforce we cannot

00:04:00,650 --> 00:04:06,139
switch out basil or switch out maven

00:04:03,889 --> 00:04:10,060
overnight and drop in a new build system

00:04:06,139 --> 00:04:11,840
this has to be a coexistence strategy so

00:04:10,060 --> 00:04:15,470
Simon's going to talk a little bit about

00:04:11,840 --> 00:04:18,160
how we support maven projects consuming

00:04:15,470 --> 00:04:21,380
artifacts out of our basil repository

00:04:18,160 --> 00:04:24,260
and so and then of course we want to

00:04:21,380 --> 00:04:26,560
have a positive experience for our end

00:04:24,260 --> 00:04:26,560
users

00:04:27,600 --> 00:04:33,090
so we had a number of challenges I came

00:04:29,940 --> 00:04:35,970
to cover the first couple and then he's

00:04:33,090 --> 00:04:37,590
got to take over so the first thing we

00:04:35,970 --> 00:04:39,920
had a year ago out of the gate we used

00:04:37,590 --> 00:04:43,800
something called spring boot which is a

00:04:39,920 --> 00:04:48,180
it's a it's a java container system for

00:04:43,800 --> 00:04:51,540
building runtimes in java and so we

00:04:48,180 --> 00:04:53,070
started out of the gate with not having

00:04:51,540 --> 00:04:55,230
support for that and then so spring boot

00:04:53,070 --> 00:04:58,320
requires a custom executable jar format

00:04:55,230 --> 00:05:01,830
and so a year ago I opened up basil and

00:04:58,320 --> 00:05:04,580
saw that there was a java binary rule in

00:05:01,830 --> 00:05:07,500
written and Java and so I took that and

00:05:04,580 --> 00:05:09,330
forked it and and wrote my own for

00:05:07,500 --> 00:05:10,980
spring boot and that was a bad solution

00:05:09,330 --> 00:05:14,220
because we ended up having a fork of

00:05:10,980 --> 00:05:18,030
basil so we then I then had to port it

00:05:14,220 --> 00:05:20,100
to skylark now star lark so that's been

00:05:18,030 --> 00:05:22,650
a it was a pretty good experience the

00:05:20,100 --> 00:05:25,830
documentation back a year ago was not as

00:05:22,650 --> 00:05:28,170
good as it was today as it is today but

00:05:25,830 --> 00:05:30,270
in general at that's that's worked for

00:05:28,170 --> 00:05:32,190
well for us so if you have spring boot

00:05:30,270 --> 00:05:34,680
apps we do have an open source solution

00:05:32,190 --> 00:05:42,330
for this that's out you can find out on

00:05:34,680 --> 00:05:44,850
our get account and then we another

00:05:42,330 --> 00:05:47,580
thing we have is at Salesforce we have a

00:05:44,850 --> 00:05:49,800
centralized team for doing all CI and so

00:05:47,580 --> 00:05:53,520
it's been an interesting dance with them

00:05:49,800 --> 00:05:56,940
to get support for basil and so what we

00:05:53,520 --> 00:06:00,180
had to do so we have Jenkins with

00:05:56,940 --> 00:06:02,210
kubernetes deployed for build nodes and

00:06:00,180 --> 00:06:05,970
so we had to roll a custom docker image

00:06:02,210 --> 00:06:09,540
that we that we send into the system and

00:06:05,970 --> 00:06:11,430
then that runs our entire build today

00:06:09,540 --> 00:06:13,350
right now what happens is when when it

00:06:11,430 --> 00:06:15,660
starts up it runs the entire build for

00:06:13,350 --> 00:06:20,460
the entire repository but our build

00:06:15,660 --> 00:06:23,820
times are getting way too slow and so

00:06:20,460 --> 00:06:26,220
we're we're coming here to find out some

00:06:23,820 --> 00:06:29,490
better solutions to do that one thing we

00:06:26,220 --> 00:06:32,220
want to do is have team scope jobs once

00:06:29,490 --> 00:06:33,810
again right now when when someone makes

00:06:32,220 --> 00:06:36,300
any change anywhere in the amount of

00:06:33,810 --> 00:06:38,350
repo our CI system builds builds the

00:06:36,300 --> 00:06:50,740
world which is not ideal

00:06:38,350 --> 00:06:52,870
I think Blaine you're next so the next

00:06:50,740 --> 00:06:55,060
thing we had to do is we have docker

00:06:52,870 --> 00:06:57,040
support so we have a lot of like docker

00:06:55,060 --> 00:06:59,440
files because we're trying to do micro

00:06:57,040 --> 00:07:01,450
services but they're like a free-for-all

00:06:59,440 --> 00:07:03,430
so a lot of the early issues we had with

00:07:01,450 --> 00:07:07,090
the dock rules and Basil's because of

00:07:03,430 --> 00:07:09,910
the dock rules assume they they want to

00:07:07,090 --> 00:07:11,890
be simple you can't do run commands you

00:07:09,910 --> 00:07:13,570
can't change like ownership of files

00:07:11,890 --> 00:07:15,820
inside the docker file we had a lot of

00:07:13,570 --> 00:07:17,770
things like that and just recently we

00:07:15,820 --> 00:07:20,590
went through and we picked a service and

00:07:17,770 --> 00:07:23,680
when all doc rules on it and what we

00:07:20,590 --> 00:07:25,270
wind up doing is our security forces us

00:07:23,680 --> 00:07:27,490
to run with certain users with certain

00:07:25,270 --> 00:07:30,220
permissions when they start up the

00:07:27,490 --> 00:07:32,650
docker image so what we had to do is we

00:07:30,220 --> 00:07:36,190
created like a parent docker rule and

00:07:32,650 --> 00:07:38,110
then a docker file in that we do

00:07:36,190 --> 00:07:40,150
manually but it's up there it's cached

00:07:38,110 --> 00:07:42,100
and then we pull that one down for all

00:07:40,150 --> 00:07:45,100
the docker rules that we're using inside

00:07:42,100 --> 00:07:46,450
of basil and so far that's working out

00:07:45,100 --> 00:07:48,190
pretty good we I think right now we're

00:07:46,450 --> 00:07:53,290
at two or three services we just got

00:07:48,190 --> 00:07:56,470
that finished so like I said before the

00:07:53,290 --> 00:07:57,580
the dock rules were we're all free for

00:07:56,470 --> 00:07:59,650
all so we're just trying to get those

00:07:57,580 --> 00:08:03,580
kind of like to be simpler because the

00:07:59,650 --> 00:08:08,410
docker the docker rule expects things to

00:08:03,580 --> 00:08:10,510
be a lot simpler so and for other custom

00:08:08,410 --> 00:08:12,580
tooling we've had to do is the we came

00:08:10,510 --> 00:08:15,370
up with a flaky test framework right now

00:08:12,580 --> 00:08:19,090
everything in basil if you use the flaky

00:08:15,370 --> 00:08:21,070
tag it it runs everything at a class

00:08:19,090 --> 00:08:24,910
level and we need things at a method

00:08:21,070 --> 00:08:26,470
level to tag so what we did is a very

00:08:24,910 --> 00:08:30,610
simple algorithm as we run our tests

00:08:26,470 --> 00:08:32,650
normally and from the BEP output we find

00:08:30,610 --> 00:08:36,969
out which ones are wrong fine which

00:08:32,650 --> 00:08:39,789
methods and then once we do that we do

00:08:36,969 --> 00:08:42,340
an addict noir which basically takes a

00:08:39,789 --> 00:08:45,780
you know a flat flapping or flaky tests

00:08:42,340 --> 00:08:49,240
and just ignores it for the entire build

00:08:45,780 --> 00:08:52,390
which is not ideal because at some point

00:08:49,240 --> 00:08:55,990
we're gonna want to run those flaky and

00:08:52,390 --> 00:08:57,190
flat flapping tests back into our put

00:08:55,990 --> 00:08:59,850
them back into our bill but once they're

00:08:57,190 --> 00:09:01,660
more deterministic so basically this was

00:08:59,850 --> 00:09:03,520
done to stop

00:09:01,660 --> 00:09:06,100
from when they would make a branch

00:09:03,520 --> 00:09:07,090
they'd get a do the pool request and all

00:09:06,100 --> 00:09:08,710
sudden they've got all these tests

00:09:07,090 --> 00:09:10,540
failing but it's nowhere inside their

00:09:08,710 --> 00:09:12,670
code because right now it's part of our

00:09:10,540 --> 00:09:17,770
continuous integration that runs

00:09:12,670 --> 00:09:20,080
everything and so right now it's when it

00:09:17,770 --> 00:09:22,690
we can actually just do a simple grep

00:09:20,080 --> 00:09:24,430
you can find out which are the the flaky

00:09:22,690 --> 00:09:26,770
tests and then the developer who's

00:09:24,430 --> 00:09:28,780
owning it can then go to fix it and put

00:09:26,770 --> 00:09:35,770
it back into the build and if it fails -

00:09:28,780 --> 00:09:37,450
can we mark it again as as flaky so the

00:09:35,770 --> 00:09:39,310
things we'd like to do in the future is

00:09:37,450 --> 00:09:41,440
we would want like to have a custom

00:09:39,310 --> 00:09:43,600
annotation since we need to go down to

00:09:41,440 --> 00:09:46,180
the method level and that way we could

00:09:43,600 --> 00:09:49,120
actually as part of our build run the

00:09:46,180 --> 00:09:50,710
flaky tests either at the end or as part

00:09:49,120 --> 00:09:52,420
of a part of a build so we at least know

00:09:50,710 --> 00:09:55,150
if they're you know getting better and

00:09:52,420 --> 00:09:57,790
we could run reports right now that's

00:09:55,150 --> 00:09:59,980
all pretty much a manual process another

00:09:57,790 --> 00:10:02,020
thing is is getting the failure stack

00:09:59,980 --> 00:10:04,690
trace like with the BEP we can get to

00:10:02,020 --> 00:10:07,420
the file but the way our continuous

00:10:04,690 --> 00:10:09,730
integration works we can't get to those

00:10:07,420 --> 00:10:12,130
files unless we save them off while the

00:10:09,730 --> 00:10:16,660
build is running but that's that's

00:10:12,130 --> 00:10:18,730
pretty much just for our environment and

00:10:16,660 --> 00:10:20,440
then the next thing that we want to work

00:10:18,730 --> 00:10:23,140
on is getting the caching and remote

00:10:20,440 --> 00:10:24,490
execution the remote caching we need

00:10:23,140 --> 00:10:26,740
because one will be faster for

00:10:24,490 --> 00:10:28,300
developers it'll also help with our

00:10:26,740 --> 00:10:29,530
continuous integration and that our

00:10:28,300 --> 00:10:32,140
continuous integration could use the

00:10:29,530 --> 00:10:35,560
cache some of the issues were running

00:10:32,140 --> 00:10:37,600
into now is that the Java targets don't

00:10:35,560 --> 00:10:40,810
share cache entries between build

00:10:37,600 --> 00:10:43,480
platforms so we have our builds run on

00:10:40,810 --> 00:10:46,920
Linux platform but most developers are

00:10:43,480 --> 00:10:49,480
running Mac so they really can't share

00:10:46,920 --> 00:10:51,390
so we've been looking at the basil build

00:10:49,480 --> 00:10:55,090
form project for remote execution

00:10:51,390 --> 00:10:57,580
because one of the reasons one of the

00:10:55,090 --> 00:10:59,800
problems with our caching is it's

00:10:57,580 --> 00:11:01,510
implemented within giant ix but the

00:10:59,800 --> 00:11:03,880
problem is we have security saying they

00:11:01,510 --> 00:11:05,710
don't want anything in the cache that

00:11:03,880 --> 00:11:09,250
comes from a developer machine or not

00:11:05,710 --> 00:11:12,220
from outside of our build servers so

00:11:09,250 --> 00:11:13,210
that's a constraint that we have so

00:11:12,220 --> 00:11:15,280
we're hoping that with a remote

00:11:13,210 --> 00:11:15,520
execution that can be run on the build

00:11:15,280 --> 00:11:18,130
so

00:11:15,520 --> 00:11:20,440
we can run those and then the continuous

00:11:18,130 --> 00:11:22,300
integration can then use those caches

00:11:20,440 --> 00:11:23,500
to help build to relieve some of that

00:11:22,300 --> 00:11:25,840
pressure so everything doesn't have to

00:11:23,500 --> 00:11:28,630
be built all the time I'm some of our

00:11:25,840 --> 00:11:30,790
issue so far is running with the bill

00:11:28,630 --> 00:11:32,620
form is the bill fails there's for the

00:11:30,790 --> 00:11:38,020
no indication it just says hey exit 34

00:11:32,620 --> 00:11:39,430
try again and though the logs don't

00:11:38,020 --> 00:11:41,200
really point you to where the problem

00:11:39,430 --> 00:11:43,320
could potentially be even though

00:11:41,200 --> 00:11:46,060
everything seems to be running locally

00:11:43,320 --> 00:11:48,130
so we're hoping that that gets fixed

00:11:46,060 --> 00:11:49,930
soon

00:11:48,130 --> 00:11:58,270
the next assignments gonna be able to

00:11:49,930 --> 00:12:01,590
talk about our maven integration hi so

00:11:58,270 --> 00:12:05,080
as Peter mentioned we are doing this

00:12:01,590 --> 00:12:06,580
this very gradual transition to Basel so

00:12:05,080 --> 00:12:10,270
we still have a lot of builds out there

00:12:06,580 --> 00:12:13,390
that use maven and so when we are

00:12:10,270 --> 00:12:16,510
considering code to move into the

00:12:13,390 --> 00:12:18,490
basement mono repo we copy all the Java

00:12:16,510 --> 00:12:20,860
over and we did little maven files and

00:12:18,490 --> 00:12:24,100
we delete the maven automation and

00:12:20,860 --> 00:12:26,470
that's great if this is a service it

00:12:24,100 --> 00:12:29,200
just gets built and then deployed using

00:12:26,470 --> 00:12:31,390
docker and we're done but if the thing

00:12:29,200 --> 00:12:34,090
we're moving is a library we have a

00:12:31,390 --> 00:12:36,550
problem because most likely existing

00:12:34,090 --> 00:12:40,960
maven build still reference that library

00:12:36,550 --> 00:12:42,970
through the palm as an artifact and so

00:12:40,960 --> 00:12:46,420
what we need to do in the mono repo is

00:12:42,970 --> 00:12:48,970
to be able to publish libraries as may

00:12:46,420 --> 00:12:50,950
have not effects so that the maven

00:12:48,970 --> 00:12:55,030
builds outside can still consume them

00:12:50,950 --> 00:12:57,190
and so we went through a few iterations

00:12:55,030 --> 00:13:01,060
on this we're still kind of playing

00:12:57,190 --> 00:13:03,520
around with it initially we had custom

00:13:01,060 --> 00:13:07,000
rules in the build files to generate

00:13:03,520 --> 00:13:09,940
poems to generate Java source jars Javed

00:13:07,000 --> 00:13:12,700
Akhtar's install into the local maven

00:13:09,940 --> 00:13:16,990
repository for testing and also for

00:13:12,700 --> 00:13:20,530
uploading to our public repository we

00:13:16,990 --> 00:13:22,600
didn't like that so much it kind of made

00:13:20,530 --> 00:13:25,540
the build files more complicated and

00:13:22,600 --> 00:13:27,880
we'd like and we also realized that the

00:13:25,540 --> 00:13:28,690
the maven command line actually provides

00:13:27,880 --> 00:13:32,010
a lot of this function

00:13:28,690 --> 00:13:36,400
now given that we have a valid pump file

00:13:32,010 --> 00:13:38,500
so the current solution we have is for a

00:13:36,400 --> 00:13:40,270
library in the mana repo that's built

00:13:38,500 --> 00:13:43,240
using Basel that needs to be shared with

00:13:40,270 --> 00:13:45,190
maven builds we have a single build file

00:13:43,240 --> 00:13:48,790
a single Java library target and that

00:13:45,190 --> 00:13:52,240
build file and an additional file that

00:13:48,790 --> 00:13:55,750
we made up that marks this library as

00:13:52,240 --> 00:13:58,840
being exportable that file tracks the

00:13:55,750 --> 00:14:00,910
maven specific metadata so we want to be

00:13:58,840 --> 00:14:03,340
we want to make sure that the mono repo

00:14:00,910 --> 00:14:05,770
is the single source of truth for all

00:14:03,340 --> 00:14:07,810
metadata so this this file truly only

00:14:05,770 --> 00:14:09,970
has data that is specific to maven and

00:14:07,810 --> 00:14:14,200
we only have group ID and artifact ID

00:14:09,970 --> 00:14:16,090
right now in there we use basil query to

00:14:14,200 --> 00:14:17,710
look at the dependencies the Java

00:14:16,090 --> 00:14:22,870
library target in the build file

00:14:17,710 --> 00:14:25,630
references and if the dependency is a

00:14:22,870 --> 00:14:27,940
maven jar from the workspace file then

00:14:25,630 --> 00:14:30,760
we just put it in and generated pom yeah

00:14:27,940 --> 00:14:33,520
it feels right at home where if it's a

00:14:30,760 --> 00:14:36,490
and a source level dependency another

00:14:33,520 --> 00:14:37,950
basil package then we look at that

00:14:36,490 --> 00:14:42,310
packages bill.com

00:14:37,950 --> 00:14:44,620
to find the group ID and artifact ID so

00:14:42,310 --> 00:14:47,350
so that means obviously that any source

00:14:44,620 --> 00:14:49,390
level dependency the driver library has

00:14:47,350 --> 00:14:53,560
needs to also be exportable as i maven

00:14:49,390 --> 00:14:56,590
artifact we then have a script an

00:14:53,560 --> 00:14:58,540
external Python script that takes the

00:14:56,590 --> 00:15:00,910
output of basil query with the

00:14:58,540 --> 00:15:03,940
dependencies it takes the content of the

00:15:00,910 --> 00:15:08,380
build pom file and it generates a very

00:15:03,940 --> 00:15:11,770
simple but functional pom.xml that's for

00:15:08,380 --> 00:15:13,780
the that's for jar artifacts in maven we

00:15:11,770 --> 00:15:18,370
also support comm artifacts we typically

00:15:13,780 --> 00:15:21,100
have these as parent palms they provide

00:15:18,370 --> 00:15:24,400
dependency management and those are

00:15:21,100 --> 00:15:25,960
generated using a template file so

00:15:24,400 --> 00:15:29,200
there's no there's no build file here

00:15:25,960 --> 00:15:30,970
but in the mono repo we still keep this

00:15:29,200 --> 00:15:35,560
information so that's all in one place

00:15:30,970 --> 00:15:37,570
and the template file the only non

00:15:35,560 --> 00:15:40,450
static content in there is typically

00:15:37,570 --> 00:15:42,160
library version information and we get

00:15:40,450 --> 00:15:44,649
that out of the workspace file

00:15:42,160 --> 00:15:47,440
with a special syntax so again to have a

00:15:44,649 --> 00:15:53,110
single source of truth we don't

00:15:47,440 --> 00:15:55,240
duplicate that and with this sorry okay

00:15:53,110 --> 00:15:57,130
and then for the rest now we have a

00:15:55,240 --> 00:15:59,230
valid pom for everything else we

00:15:57,130 --> 00:16:02,410
delegate to the the maven command line

00:15:59,230 --> 00:16:05,350
this there's a simple shell wrapper so

00:16:02,410 --> 00:16:07,600
to generate Java dr. oz jars install

00:16:05,350 --> 00:16:11,730
into local repository and upload to the

00:16:07,600 --> 00:16:14,170
public repository and that works okay

00:16:11,730 --> 00:16:15,610
another very important part is actually

00:16:14,170 --> 00:16:19,180
testing that all these generated

00:16:15,610 --> 00:16:21,160
artifacts are consumable by maven builds

00:16:19,180 --> 00:16:23,649
so we have Auto we have continuous

00:16:21,160 --> 00:16:26,860
integration for that we picked a subset

00:16:23,649 --> 00:16:29,319
of all of our services the most

00:16:26,860 --> 00:16:32,620
important ones and we build those in our

00:16:29,319 --> 00:16:34,899
CI system and they continuously use the

00:16:32,620 --> 00:16:37,149
latest artifacts produced by the mono

00:16:34,899 --> 00:16:41,470
repo and then that way we make sure that

00:16:37,149 --> 00:16:43,690
they're consumable so with this set up

00:16:41,470 --> 00:16:46,209
we have currently around 60 maven

00:16:43,690 --> 00:16:49,589
artifacts in the mono repo and we've

00:16:46,209 --> 00:16:52,360
pushed a few successful releases to the

00:16:49,589 --> 00:16:54,790
maven repository and by successful I

00:16:52,360 --> 00:16:57,819
mean that the consumers of the artifacts

00:16:54,790 --> 00:16:59,829
have noticed any difference so the the

00:16:57,819 --> 00:17:03,069
move they move to the mono repo has

00:16:59,829 --> 00:17:05,919
changed a pom structure but not too much

00:17:03,069 --> 00:17:13,530
so the that the artifacts were still

00:17:05,919 --> 00:17:15,939
consumable next steps in our migration

00:17:13,530 --> 00:17:19,419
first I should say that the migration to

00:17:15,939 --> 00:17:21,120
Basel has been quite smooth we thought

00:17:19,419 --> 00:17:23,230
we would run into a lot more issues but

00:17:21,120 --> 00:17:26,079
everything has been going pretty well

00:17:23,230 --> 00:17:30,760
the big thing for us now is IDE support

00:17:26,079 --> 00:17:33,820
the IntelliJ Basel plugin works but it's

00:17:30,760 --> 00:17:35,559
it's not it's as smooth as AI IntelliJ

00:17:33,820 --> 00:17:38,200
is for a maven based project and we

00:17:35,559 --> 00:17:41,049
would really like accept support because

00:17:38,200 --> 00:17:43,419
Salesforce is a big Eclipse shop so if

00:17:41,049 --> 00:17:45,640
any of you are working on eclipse apart

00:17:43,419 --> 00:17:48,640
or interested in a clip support please

00:17:45,640 --> 00:17:50,620
come and talk to us we want to open the

00:17:48,640 --> 00:17:53,290
mono repo up to more teams right now

00:17:50,620 --> 00:17:55,030
it's only us and IDE support will be a

00:17:53,290 --> 00:17:56,650
big issue that

00:17:55,030 --> 00:17:58,720
because people you know they want to

00:17:56,650 --> 00:18:02,200
they want the same experience that they

00:17:58,720 --> 00:18:03,700
used to like Blaine said we're gonna

00:18:02,200 --> 00:18:08,530
turn and remote caching and remote

00:18:03,700 --> 00:18:10,630
execution so if you are also using both

00:18:08,530 --> 00:18:12,010
farm yeah the base of the build from

00:18:10,630 --> 00:18:13,420
project please come and talk to us

00:18:12,010 --> 00:18:16,300
because we are trying to get that to

00:18:13,420 --> 00:18:21,030
work and we are trying to move in more

00:18:16,300 --> 00:18:21,030
non Java languages into the mono repo

00:18:21,390 --> 00:18:27,530
that's all we had so we have time for

00:18:24,790 --> 00:18:32,440
questions or early lunch

00:18:27,530 --> 00:18:32,440

YouTube URL: https://www.youtube.com/watch?v=V8HayK90PI4


