Title: BazelCon 2018 Day 2: A Dash of Bazel
Publication date: 2018-11-02
Playlist: BazelCon 2018
Description: 
	With a Sprinkle of Containers, and a Side of Kubernetes

Chris Love (CNM Consulting) event: Bazelcon 2018; re_ty: Publish; product: Open Source - General; fullname: Chris Love;
Captions: 
	00:00:04,450 --> 00:00:08,539
thanks for having me today my name is

00:00:07,189 --> 00:00:10,459
Chris love I'm with a company by the

00:00:08,539 --> 00:00:12,080
name of CNM consulting but you notice

00:00:10,459 --> 00:00:15,490
that Google's pasted it all over my

00:00:12,080 --> 00:00:15,490
slide deck and I don't have the clicker

00:00:17,980 --> 00:00:24,110
the big one the big green button alright

00:00:21,680 --> 00:00:26,150
so as I was mentioning my name is Chris

00:00:24,110 --> 00:00:29,360
I'm with a company by the name of CNM

00:00:26,150 --> 00:00:31,970
consulting we do work with Google we've

00:00:29,360 --> 00:00:34,609
been on a project called helmsmen which

00:00:31,970 --> 00:00:37,609
is focusing on the hosted version of

00:00:34,609 --> 00:00:40,039
kubernetes which is called gke and today

00:00:37,609 --> 00:00:44,960
we're going to talk about using basil

00:00:40,039 --> 00:00:48,050
with containers with go and deploying it

00:00:44,960 --> 00:00:51,170
out to kubernetes and I have a demo so

00:00:48,050 --> 00:00:55,010
let's see how this goes so we're gonna

00:00:51,170 --> 00:00:58,579
talk about how using basil to maintain

00:00:55,010 --> 00:01:00,409
build and test your code as well as

00:00:58,579 --> 00:01:02,929
deploying out containers and kubernetes

00:01:00,409 --> 00:01:06,460
and really why the kubernetes in my mind

00:01:02,929 --> 00:01:09,380
at least is becoming the standard for

00:01:06,460 --> 00:01:12,650
container automation on top of that

00:01:09,380 --> 00:01:14,360
basil we're at basil conference we want

00:01:12,650 --> 00:01:18,190
to look at both building containers as

00:01:14,360 --> 00:01:20,750
well as deploying all the way out

00:01:18,190 --> 00:01:22,250
containers so a quick temperature check

00:01:20,750 --> 00:01:27,680
who's using containers in production

00:01:22,250 --> 00:01:31,520
here good Google's been using them for

00:01:27,680 --> 00:01:34,100
about 12 years now and everything inside

00:01:31,520 --> 00:01:36,440
of Google or a lot of stuff inside of

00:01:34,100 --> 00:01:39,080
Google's running in containers Google

00:01:36,440 --> 00:01:41,630
Maps just about anything that you hit

00:01:39,080 --> 00:01:45,710
it's running containers and really

00:01:41,630 --> 00:01:48,740
containers are about two things they're

00:01:45,710 --> 00:01:51,050
about the image or so you've got an

00:01:48,740 --> 00:01:53,870
image that you can maintain you don't

00:01:51,050 --> 00:01:55,550
have to maintain the whole thing right

00:01:53,870 --> 00:01:58,670
and what I mean by the whole thing is

00:01:55,550 --> 00:02:00,680
you have a node so or a compute unit

00:01:58,670 --> 00:02:02,420
you've got security patches to put in

00:02:00,680 --> 00:02:04,100
that compute unit the security patches

00:02:02,420 --> 00:02:07,550
theoretically are gonna be a lot more

00:02:04,100 --> 00:02:08,659
smaller on a container and then you've

00:02:07,550 --> 00:02:12,230
got your runtime which is your

00:02:08,659 --> 00:02:14,599
executable and that is you know an

00:02:12,230 --> 00:02:15,950
isolated process of course with cgroups

00:02:14,599 --> 00:02:17,450
and everything else within the Linux

00:02:15,950 --> 00:02:19,250
kernel

00:02:17,450 --> 00:02:22,160
we've got a bunch of buzzwords out there

00:02:19,250 --> 00:02:24,500
we've got lightweight like you said it's

00:02:22,160 --> 00:02:26,270
not our node it's just a process or a

00:02:24,500 --> 00:02:27,319
couple processes that you're running

00:02:26,270 --> 00:02:29,959
within the container

00:02:27,319 --> 00:02:31,970
you've got portability you know I can

00:02:29,959 --> 00:02:35,330
run the same container that I'm building

00:02:31,970 --> 00:02:37,459
today on my Mac that I can run up on a

00:02:35,330 --> 00:02:39,650
Linux node and theoretically maybe some

00:02:37,459 --> 00:02:42,470
time we can run on Windows they're all

00:02:39,650 --> 00:02:43,970
so fast you know virtual machine in the

00:02:42,470 --> 00:02:45,800
cloud takes a while to deploy and then

00:02:43,970 --> 00:02:47,510
it takes a little bit longer to boot if

00:02:45,800 --> 00:02:50,000
you're on bare metal you run in the same

00:02:47,510 --> 00:02:51,680
issue container is a plane you said it's

00:02:50,000 --> 00:02:54,220
a process or a couple processes that

00:02:51,680 --> 00:02:56,630
you're running within your image and

00:02:54,220 --> 00:02:59,330
it's a lot faster boot so if you're

00:02:56,630 --> 00:03:02,450
talking about scaling out from for you

00:02:59,330 --> 00:03:04,130
know 40 pods on kubernetes to 900 you're

00:03:02,450 --> 00:03:06,620
waiting on the scheduler it makes our

00:03:04,130 --> 00:03:08,780
life really different you're looking at

00:03:06,620 --> 00:03:11,450
deployments are now handled differently

00:03:08,780 --> 00:03:14,450
you're looking at management monitoring

00:03:11,450 --> 00:03:17,260
you're looking at isolation process very

00:03:14,450 --> 00:03:22,130
complicated you're looking at updating

00:03:17,260 --> 00:03:24,230
discovery scaling sets h.a our playing

00:03:22,130 --> 00:03:27,890
fields been totally changed because of

00:03:24,230 --> 00:03:31,370
containers in a good way I'd say but we

00:03:27,890 --> 00:03:33,500
now have to deal with that stuff storage

00:03:31,370 --> 00:03:36,140
big challenge with containers load

00:03:33,500 --> 00:03:38,450
balancing discovery running multiple

00:03:36,140 --> 00:03:40,600
applications on the same node because

00:03:38,450 --> 00:03:43,640
you're looking at different ports now

00:03:40,600 --> 00:03:46,609
security yeah wins win is security not a

00:03:43,640 --> 00:03:49,010
challenge failed over and of course QoS

00:03:46,609 --> 00:03:50,690
let's prevent race conditions inside of

00:03:49,010 --> 00:03:54,799
our containers that takes downs another

00:03:50,690 --> 00:03:56,150
container that's on the same note so now

00:03:54,799 --> 00:03:58,430
we've got this great topic it's called

00:03:56,150 --> 00:03:59,930
kubernetes and really what's all the

00:03:58,430 --> 00:04:01,640
buzz about and let me let me tell you a

00:03:59,930 --> 00:04:03,650
quick story I didn't understand

00:04:01,640 --> 00:04:06,319
containers I was a puppet guy I'm sorry

00:04:03,650 --> 00:04:09,790
at least I can unit test it so

00:04:06,319 --> 00:04:14,120
containers came along and like really

00:04:09,790 --> 00:04:14,930
you know I need this now why okay well

00:04:14,120 --> 00:04:18,350
let me try it out

00:04:14,930 --> 00:04:22,120
did a demo a while back thankfully to

00:04:18,350 --> 00:04:25,010
Google and I was able to deploy out

00:04:22,120 --> 00:04:28,010
thousand nodes of Cassandra running on a

00:04:25,010 --> 00:04:29,570
cluster of kubernetes and I had a job

00:04:28,010 --> 00:04:31,430
application that was the front-end for

00:04:29,570 --> 00:04:34,160
it so

00:04:31,430 --> 00:04:35,660
fired up well and then I put an ingress

00:04:34,160 --> 00:04:36,980
in front of it and if anybody here is

00:04:35,660 --> 00:04:37,880
familiar with an ingress there's a

00:04:36,980 --> 00:04:41,810
health check on it

00:04:37,880 --> 00:04:44,450
and all of a sudden my deployment of 30

00:04:41,810 --> 00:04:48,320
pods which are 30 containers got a

00:04:44,450 --> 00:04:50,150
thousand ingress health checks sure

00:04:48,320 --> 00:04:53,540
people can go okay what happened to my

00:04:50,150 --> 00:04:56,960
heap yeah pods were crashing all hell

00:04:53,540 --> 00:05:00,830
was breaking out so I hit a button and I

00:04:56,960 --> 00:05:03,530
went from 30 pods to 900 and suddenly as

00:05:00,830 --> 00:05:05,840
the volume of pods came up it was

00:05:03,530 --> 00:05:08,030
actually able to handle my ingress check

00:05:05,840 --> 00:05:10,550
that's when I got the understanding okay

00:05:08,030 --> 00:05:12,470
this is why I need containers this is

00:05:10,550 --> 00:05:14,300
why I need an orchestration system that

00:05:12,470 --> 00:05:16,730
allows me to manage those containers in

00:05:14,300 --> 00:05:22,700
a reasonable way where I can do this and

00:05:16,730 --> 00:05:24,650
now I scale Google introduced containers

00:05:22,700 --> 00:05:26,930
or kubernetes as an open-source project

00:05:24,650 --> 00:05:30,110
as I said it manages containers within

00:05:26,930 --> 00:05:32,270
your cluster Brian grant really hates it

00:05:30,110 --> 00:05:33,950
when we say that it orchestrates

00:05:32,270 --> 00:05:34,340
containers but in a way that's what it's

00:05:33,950 --> 00:05:36,670
for

00:05:34,340 --> 00:05:40,220
it was inspired by the internal tools

00:05:36,670 --> 00:05:43,400
that Google has including bork supports

00:05:40,220 --> 00:05:45,530
multiple clouds including bare metal so

00:05:43,400 --> 00:05:48,140
we can run it on Google you can run on

00:05:45,530 --> 00:05:49,550
AWS you can run it on digital ocean you

00:05:48,140 --> 00:05:51,070
can run it on Alibaba

00:05:49,550 --> 00:05:53,780
you can run it on bare metal

00:05:51,070 --> 00:05:57,080
theoretically those deployments are

00:05:53,780 --> 00:05:59,930
Trant or you can use a lot of the same

00:05:57,080 --> 00:06:01,460
yeah Mille to deploy from one source to

00:05:59,930 --> 00:06:02,780
another bare metal gets kind of

00:06:01,460 --> 00:06:04,790
interesting and there's other

00:06:02,780 --> 00:06:07,250
differences within for instance storage

00:06:04,790 --> 00:06:08,810
or load balancing but still you're able

00:06:07,250 --> 00:06:10,690
to reuse a lot of your deployment

00:06:08,810 --> 00:06:13,760
technology across different platforms

00:06:10,690 --> 00:06:16,700
for instance github runs primarily on

00:06:13,760 --> 00:06:18,350
bare metal and today have a whole

00:06:16,700 --> 00:06:21,950
infrastructure with kubernetes for bare

00:06:18,350 --> 00:06:25,220
metal but their development all occurs

00:06:21,950 --> 00:06:27,410
on AWS so the developers spin up their

00:06:25,220 --> 00:06:30,170
own AWS cluster or development team has

00:06:27,410 --> 00:06:32,270
a kubernetes AWS cluster but when we're

00:06:30,170 --> 00:06:36,560
ready to go to production it moves back

00:06:32,270 --> 00:06:39,260
to bare metal and really you want to

00:06:36,560 --> 00:06:42,410
think of kubernetes as your operating

00:06:39,260 --> 00:06:44,110
system for your compute fleet it's a lot

00:06:42,410 --> 00:06:46,090
of different nice words

00:06:44,110 --> 00:06:47,860
but in essence you're gonna have

00:06:46,090 --> 00:06:50,350
multiple notes you're gonna have a

00:06:47,860 --> 00:06:51,760
control plane and an API layer if you

00:06:50,350 --> 00:06:53,290
have 300 nodes

00:06:51,760 --> 00:06:56,590
I'm not sure we talked about carrying

00:06:53,290 --> 00:06:58,960
pagers but having to worry about 300

00:06:56,590 --> 00:07:02,320
nodes or a couple thousand nodes while

00:06:58,960 --> 00:07:04,450
you're on call stinks now you're able to

00:07:02,320 --> 00:07:07,240
do such nice things as cordoning

00:07:04,450 --> 00:07:11,320
draining basically say okay I don't want

00:07:07,240 --> 00:07:13,480
this node replace at times if you're

00:07:11,320 --> 00:07:15,520
talking about failover you can if your

00:07:13,480 --> 00:07:17,800
applications are developed properly you

00:07:15,520 --> 00:07:19,570
can lose certain amount of percentage of

00:07:17,800 --> 00:07:21,520
your nodes and you and you don't even

00:07:19,570 --> 00:07:23,470
get paged tonight well we're also

00:07:21,520 --> 00:07:26,050
talking about self-healing so if I kill

00:07:23,470 --> 00:07:28,420
a node pods move over if a node fails

00:07:26,050 --> 00:07:30,310
you know that never happens

00:07:28,420 --> 00:07:34,480
pods will move over and containers will

00:07:30,310 --> 00:07:37,090
move over and redeploy for you know

00:07:34,480 --> 00:07:38,400
basil so I'll put in a caveat here the

00:07:37,090 --> 00:07:40,540
gentleman from Etsy that did

00:07:38,400 --> 00:07:43,480
presentation yesterday did a really good

00:07:40,540 --> 00:07:46,630
job on the basil kubernetes rules my

00:07:43,480 --> 00:07:48,970
slides do not compare so just go rewatch

00:07:46,630 --> 00:07:51,090
that and you can catch up on exactly

00:07:48,970 --> 00:07:55,330
what the what good basil rules look like

00:07:51,090 --> 00:07:58,660
but I do have a demo so but we'll see

00:07:55,330 --> 00:08:00,580
we'll see how that fares so we're

00:07:58,660 --> 00:08:02,260
talking about go today you can talk

00:08:00,580 --> 00:08:03,850
about Python you can talk about Java you

00:08:02,260 --> 00:08:06,040
exact about any other supported language

00:08:03,850 --> 00:08:08,290
but within the build rules you're able

00:08:06,040 --> 00:08:10,270
to run you know this is basic basil 101

00:08:08,290 --> 00:08:12,100
right you're able to run building you're

00:08:10,270 --> 00:08:15,580
able to run unit tests you're able to do

00:08:12,100 --> 00:08:17,290
dependency management with go and you're

00:08:15,580 --> 00:08:19,000
able to run ghazal we notice we had a

00:08:17,290 --> 00:08:21,220
demo yesterday about Otto gazelle where

00:08:19,000 --> 00:08:22,660
you're able to generate not only the

00:08:21,220 --> 00:08:24,940
build files but you're when you spike a

00:08:22,660 --> 00:08:29,100
project you're able to use gazelle to

00:08:24,940 --> 00:08:32,470
generate the initial build files for go

00:08:29,100 --> 00:08:34,510
we've got docker it's basically it

00:08:32,470 --> 00:08:36,910
allows it's a set of rules that allow

00:08:34,510 --> 00:08:39,640
you for pulling for pushing for building

00:08:36,910 --> 00:08:42,880
and doing all kinds of things within

00:08:39,640 --> 00:08:44,530
them you're actually able to chain rules

00:08:42,880 --> 00:08:46,960
together and you're able to build your

00:08:44,530 --> 00:08:48,220
own based images or if you in our

00:08:46,960 --> 00:08:50,920
example today we're going to be using

00:08:48,220 --> 00:08:54,580
the go base image and you're able to

00:08:50,920 --> 00:08:56,680
make it very thin small container that

00:08:54,580 --> 00:08:57,920
just has your application in it and then

00:08:56,680 --> 00:08:59,930
you're able to push it up

00:08:57,920 --> 00:09:04,730
to your registry so that you've staged

00:08:59,930 --> 00:09:07,730
it within the kubernetes rules

00:09:04,730 --> 00:09:09,829
it handles fen occation which is super

00:09:07,730 --> 00:09:12,560
important and challenging within most

00:09:09,829 --> 00:09:14,240
build systems publishing the containers

00:09:12,560 --> 00:09:17,029
so we'll push up the registry and does

00:09:14,240 --> 00:09:20,060
some fun stuff with managing container

00:09:17,029 --> 00:09:21,800
digests instead of typically using and

00:09:20,060 --> 00:09:24,230
we've got some work to do with this

00:09:21,800 --> 00:09:26,600
because I know there's folks that want

00:09:24,230 --> 00:09:28,579
to use tagged versions but within a

00:09:26,600 --> 00:09:30,740
within the container repository you can

00:09:28,579 --> 00:09:32,420
also typically have two different

00:09:30,740 --> 00:09:33,920
developers and because they're

00:09:32,420 --> 00:09:36,260
theoretically working on the same

00:09:33,920 --> 00:09:38,870
container version they can clash with

00:09:36,260 --> 00:09:40,850
each other you can also do a sub level

00:09:38,870 --> 00:09:42,529
with docker v2 so that not only do I

00:09:40,850 --> 00:09:44,779
have my registry but now I have the

00:09:42,529 --> 00:09:48,620
developer name and the container version

00:09:44,779 --> 00:09:50,810
all on the URL of your registry we've

00:09:48,620 --> 00:09:53,329
got some capability with manifest

00:09:50,810 --> 00:09:55,639
templating with tools like case on it

00:09:53,329 --> 00:09:57,980
we're able to not only write your

00:09:55,639 --> 00:10:00,170
manifests in gamal or you're able to

00:09:57,980 --> 00:10:02,019
choose a tool such as case on it to

00:10:00,170 --> 00:10:04,130
develop the manifest with it

00:10:02,019 --> 00:10:05,600
also full crud really for your

00:10:04,130 --> 00:10:07,100
application we're able to deploy the

00:10:05,600 --> 00:10:11,029
manifest you're able to delete you're

00:10:07,100 --> 00:10:13,970
able to deploy etc etc so from a build

00:10:11,029 --> 00:10:16,040
standpoint you have a cluster you have

00:10:13,970 --> 00:10:17,690
your code you're able to build your code

00:10:16,040 --> 00:10:19,990
you're able to build your container

00:10:17,690 --> 00:10:24,500
you're able to deploy that container out

00:10:19,990 --> 00:10:26,959
for yourself want to give a couple

00:10:24,500 --> 00:10:29,570
people thanks for this project

00:10:26,959 --> 00:10:31,220
Eric hole as well as traveling both on

00:10:29,570 --> 00:10:34,130
the helmsman team helped me out

00:10:31,220 --> 00:10:36,050
immensely with this so let's talk about

00:10:34,130 --> 00:10:38,060
the demo a bit it's actually a little

00:10:36,050 --> 00:10:40,070
bit complicated because I call this our

00:10:38,060 --> 00:10:42,680
kitchen sink demo because basically we

00:10:40,070 --> 00:10:44,390
threw the kitchen sink at it we've got

00:10:42,680 --> 00:10:46,240
about 17 different demos running around

00:10:44,390 --> 00:10:48,709
right now it's just more like 20 and

00:10:46,240 --> 00:10:51,019
this one incorporates two different

00:10:48,709 --> 00:10:53,390
clusters what we're looking at is we

00:10:51,019 --> 00:10:56,000
have a on-prem cluster which is actually

00:10:53,390 --> 00:10:58,069
running the cloud that is networked envy

00:10:56,000 --> 00:10:59,540
of VPN the on-prem cluster is running

00:10:58,069 --> 00:11:00,800
elasticsearch we're not going to mess

00:10:59,540 --> 00:11:03,079
with that at all today but that's our

00:11:00,800 --> 00:11:05,930
data store and that would be say you've

00:11:03,079 --> 00:11:07,940
got data issues where you don't want to

00:11:05,930 --> 00:11:09,560
take all of your data move it off cloud

00:11:07,940 --> 00:11:11,329
and then on to cloud and you've got an

00:11:09,560 --> 00:11:11,870
elastic search which Vlasic search is

00:11:11,329 --> 00:11:15,200
really good

00:11:11,870 --> 00:11:16,910
for doing HTTP communication say from

00:11:15,200 --> 00:11:18,230
on-premise o'clock then we've got a

00:11:16,910 --> 00:11:19,370
couple different Pyrus pods and I

00:11:18,230 --> 00:11:21,890
noticed that there's a typo in here

00:11:19,370 --> 00:11:24,410
because I actually have two pods or two

00:11:21,890 --> 00:11:27,620
deployments not just one we've got a

00:11:24,410 --> 00:11:30,470
golang pod that's actually a just a

00:11:27,620 --> 00:11:34,310
proxy into elasticsearch and then we

00:11:30,470 --> 00:11:39,860
have a UI pod which also crates you know

00:11:34,310 --> 00:11:51,380
nice pretty HTML all right if we can get

00:11:39,860 --> 00:11:55,180
back over to here we get switched over

00:11:51,380 --> 00:11:55,180
to my laptop great

00:11:59,950 --> 00:12:07,940
so let's take a real quick walk through

00:12:03,370 --> 00:12:09,470
through our bill file as I mentioned see

00:12:07,940 --> 00:12:13,460
if I get all the way at the top there we

00:12:09,470 --> 00:12:15,530
go so as mentioned and these this demo

00:12:13,460 --> 00:12:17,300
is out on github it's a little rough

00:12:15,530 --> 00:12:18,920
right now I'll be cleaning it up over

00:12:17,300 --> 00:12:21,140
the next few days but it really goes

00:12:18,920 --> 00:12:22,610
from soup to nuts so we've got terraform

00:12:21,140 --> 00:12:26,860
that will create your clusters basically

00:12:22,610 --> 00:12:31,760
what you need is terraform G G cloud and

00:12:26,860 --> 00:12:33,950
Google count it'll spin up to different

00:12:31,760 --> 00:12:36,440
clusters for you it'll network in the

00:12:33,950 --> 00:12:38,480
VPN it'll create the VCC correctly for

00:12:36,440 --> 00:12:39,560
you it'll create subnets it'll install

00:12:38,480 --> 00:12:42,140
everything for you including

00:12:39,560 --> 00:12:45,170
elasticsearch any coop control as well

00:12:42,140 --> 00:12:47,990
of course installed locally so looking

00:12:45,170 --> 00:12:50,900
at the rules you've got you know we set

00:12:47,990 --> 00:12:53,180
up our goal rules first and then we're

00:12:50,900 --> 00:12:54,860
looking at the kubernetes rules actually

00:12:53,180 --> 00:12:57,470
let's talk about the container rules as

00:12:54,860 --> 00:12:59,210
well set up the docker rules load

00:12:57,470 --> 00:13:01,130
everything here and then we're loading

00:12:59,210 --> 00:13:02,540
our container rules and then you'll

00:13:01,130 --> 00:13:03,980
notice that we've got a bunch of

00:13:02,540 --> 00:13:05,660
different kubernetes rules we've got

00:13:03,980 --> 00:13:07,400
rules for services we've got rules for

00:13:05,660 --> 00:13:08,750
deployment and then we've got rules for

00:13:07,400 --> 00:13:11,330
objects that's kind of nice because

00:13:08,750 --> 00:13:14,480
within kubernetes one of the challenging

00:13:11,330 --> 00:13:15,890
things is yeah mohel and what i mean by

00:13:14,480 --> 00:13:17,570
that is you get a lot of different yamo

00:13:15,890 --> 00:13:20,150
a lot of different gamma files within

00:13:17,570 --> 00:13:21,410
basil you're able to chain together I'm

00:13:20,150 --> 00:13:23,150
not sure if chains the right word but

00:13:21,410 --> 00:13:24,950
you're able to group together

00:13:23,150 --> 00:13:29,390
okay this application takes this

00:13:24,950 --> 00:13:31,760
deployment this service etc etc we're

00:13:29,390 --> 00:13:35,600
building the go binary which is a Pyrus

00:13:31,760 --> 00:13:37,720
UI we're not gonna we're going to mess

00:13:35,600 --> 00:13:41,480
with logging within the go Pyrus UI to

00:13:37,720 --> 00:13:44,210
see if it works here I'm doing

00:13:41,480 --> 00:13:46,700
dependency management and VGO is kind of

00:13:44,210 --> 00:13:48,140
taking over ish you know we have depth

00:13:46,700 --> 00:13:49,880
we have glide we have VGO

00:13:48,140 --> 00:13:51,770
we've got a lot of different dependency

00:13:49,880 --> 00:13:54,440
management and going on in the NGO

00:13:51,770 --> 00:13:56,870
ecosystem and we'll see exactly where

00:13:54,440 --> 00:13:58,340
this leads but for this demo and since

00:13:56,870 --> 00:14:01,810
I'm at the basil conference I chose to

00:13:58,340 --> 00:14:04,910
do dependency management right and basil

00:14:01,810 --> 00:14:07,460
then we've got the image we're embedding

00:14:04,910 --> 00:14:11,210
the library that we built as well as we

00:14:07,460 --> 00:14:12,980
talked about architecture here then

00:14:11,210 --> 00:14:15,230
we've got the container image

00:14:12,980 --> 00:14:17,780
so we're setting up the work directory

00:14:15,230 --> 00:14:20,120
and theoretically are not theoretically

00:14:17,780 --> 00:14:21,830
but my project currently contains our

00:14:20,120 --> 00:14:24,110
docker file because when we started this

00:14:21,830 --> 00:14:25,880
project it didn't have basel built into

00:14:24,110 --> 00:14:27,410
it so we're actually gonna remove the

00:14:25,880 --> 00:14:29,980
docker file we're gonna remove the make

00:14:27,410 --> 00:14:32,570
file we're gonna remove a couple other

00:14:29,980 --> 00:14:36,280
building components out of it and just

00:14:32,570 --> 00:14:40,040
use basil for deployment for this demo

00:14:36,280 --> 00:14:43,730
now here's the interesting thing is you

00:14:40,040 --> 00:14:47,270
now have a deployment manifest within

00:14:43,730 --> 00:14:50,270
your build structure and talking about a

00:14:47,270 --> 00:14:52,400
lot of things in terms of keeping you

00:14:50,270 --> 00:14:54,050
know deterministic and heuristic and all

00:14:52,400 --> 00:14:57,410
those wonderful words within your build

00:14:54,050 --> 00:15:00,200
infrastructure but including gamal that

00:14:57,410 --> 00:15:04,300
is the source of truth for deployment

00:15:00,200 --> 00:15:06,830
within kubernetes is is essential to

00:15:04,300 --> 00:15:09,290
creating good testing as well as

00:15:06,830 --> 00:15:11,810
standardized deployments you'll also

00:15:09,290 --> 00:15:16,010
notice that we have cluster and context

00:15:11,810 --> 00:15:18,590
and repo that are set up to be passed in

00:15:16,010 --> 00:15:20,600
to this to this demo so theoretically

00:15:18,590 --> 00:15:22,700
you could deploy it to a different

00:15:20,600 --> 00:15:24,260
docker registry as well as you could

00:15:22,700 --> 00:15:26,270
deploy it out to different kubernetes

00:15:24,260 --> 00:15:27,800
clusters depending on what environment

00:15:26,270 --> 00:15:29,720
you're in if you're in development

00:15:27,800 --> 00:15:35,090
you're able to do the same build as well

00:15:29,720 --> 00:15:36,800
as test as well as dev or production

00:15:35,090 --> 00:15:38,810
actually is what I meant to say and then

00:15:36,800 --> 00:15:40,430
you notice the kubernetes objects you

00:15:38,810 --> 00:15:43,720
can add multiple objects which are

00:15:40,430 --> 00:15:45,590
basically multiple different kubernetes

00:15:43,720 --> 00:15:47,690
manifests which of course are the yam

00:15:45,590 --> 00:15:52,300
all objects that are used against the

00:15:47,690 --> 00:15:52,300
API to create and deploy your containers

00:15:53,650 --> 00:16:02,450
all right so I'm gonna run a expose

00:16:00,500 --> 00:16:04,160
command here which is cout control and

00:16:02,450 --> 00:16:06,770
I'm basically I don't have a load

00:16:04,160 --> 00:16:09,050
balancer set in front of my you I what I

00:16:06,770 --> 00:16:15,310
had what I just now did was I proxied

00:16:09,050 --> 00:16:19,310
that container to this localhost and

00:16:15,310 --> 00:16:21,680
let's see if this works excellent so now

00:16:19,310 --> 00:16:23,210
we can see that the Shakespeare data is

00:16:21,680 --> 00:16:26,390
there it's connecting in with

00:16:23,210 --> 00:16:31,220
elasticsearch we're getting

00:16:26,390 --> 00:16:32,690
multiple results for Leonato what we

00:16:31,220 --> 00:16:34,970
have is we have all of Shakespeare

00:16:32,690 --> 00:16:37,700
loaded up in elasticsearch complete work

00:16:34,970 --> 00:16:40,220
and we're do running a query against the

00:16:37,700 --> 00:16:45,770
cluster and it's coming back with that

00:16:40,220 --> 00:16:47,120
data take a quick peek inside the pods

00:16:45,770 --> 00:16:50,960
and I'm actually within the Google

00:16:47,120 --> 00:16:52,670
platform UI here and you can see CPU

00:16:50,960 --> 00:16:55,970
usage and all that good stuff

00:16:52,670 --> 00:16:57,290
great and if we go back here we've got

00:16:55,970 --> 00:17:01,490
the workloads coming up so we're gonna

00:16:57,290 --> 00:17:04,730
pick play with Pyrus UI here and let's

00:17:01,490 --> 00:17:09,010
bounce out of the UI real quick and get

00:17:04,730 --> 00:17:12,650
back to where I usually live which is I

00:17:09,010 --> 00:17:15,680
have que alias to coop control because

00:17:12,650 --> 00:17:17,420
I'm really lazy so if you notice I just

00:17:15,680 --> 00:17:18,709
did a call against that cluster and

00:17:17,420 --> 00:17:21,320
we've got two different pods up and

00:17:18,709 --> 00:17:23,390
running and of course I left my cluster

00:17:21,320 --> 00:17:26,030
up and running overnight because I want

00:17:23,390 --> 00:17:29,450
to reduce the amount of risk for my demo

00:17:26,030 --> 00:17:33,130
and I've already run this once so we've

00:17:29,450 --> 00:17:37,070
got a pod that's up that's two hours old

00:17:33,130 --> 00:17:38,510
so let's go into our source code I'm

00:17:37,070 --> 00:17:42,010
gonna cancel out of this because that

00:17:38,510 --> 00:17:42,010
hopefully that pod is about to go away

00:17:47,690 --> 00:17:52,120
see if I can change the directory

00:17:49,640 --> 00:17:52,120
correctly

00:17:57,980 --> 00:18:10,290
all right so we're just gonna add in

00:18:03,210 --> 00:18:14,460
another log statement bounce back up

00:18:10,290 --> 00:18:15,990
here what I've got is a couple different

00:18:14,460 --> 00:18:19,290
commands here that I'm about to run

00:18:15,990 --> 00:18:22,290
first one is the basal bill command for

00:18:19,290 --> 00:18:25,140
the target of the Kade's

00:18:22,290 --> 00:18:27,060
apply and I showed you guys the the

00:18:25,140 --> 00:18:29,340
rules and at the end of the day

00:18:27,060 --> 00:18:32,700
everything chains together and we're

00:18:29,340 --> 00:18:35,460
gonna run coupe control apply on that

00:18:32,700 --> 00:18:37,770
kubernetes object so again we're gonna

00:18:35,460 --> 00:18:39,990
build the go we're going to push the

00:18:37,770 --> 00:18:42,750
container up to the registry and then

00:18:39,990 --> 00:18:45,120
we're gonna run the apply I'm actually

00:18:42,750 --> 00:18:48,120
running both the applies for Pyro's as

00:18:45,120 --> 00:18:50,220
well as PI R SDY so theoretically I

00:18:48,120 --> 00:18:52,500
didn't change the container for Pyro's

00:18:50,220 --> 00:18:54,990
but I did can change the container for

00:18:52,500 --> 00:18:57,030
piracy Y so theoretically one of the

00:18:54,990 --> 00:18:59,630
Basil's or one of the applies should not

00:18:57,030 --> 00:18:59,630
have to run

00:19:08,200 --> 00:19:13,659
all right Bill's successful there and

00:19:11,460 --> 00:19:20,440
this is all building locally on my

00:19:13,659 --> 00:19:23,669
machine so Kairos is unchanged and we

00:19:20,440 --> 00:19:27,850
found the target and we applied

00:19:23,669 --> 00:19:33,070
theoretically pie or Sui so if we go

00:19:27,850 --> 00:19:34,690
back to the UI here see if we catch it

00:19:33,070 --> 00:19:36,129
while it's actually deploying or it's

00:19:34,690 --> 00:19:37,499
gonna deploy incredibly fast which it

00:19:36,129 --> 00:19:42,989
did awesome

00:19:37,499 --> 00:19:42,989
hey this will tell us if it worked right

00:19:44,100 --> 00:19:52,059
yes excellent so we've got a pod that's

00:19:48,129 --> 00:19:54,999
coming up now and it started so let's go

00:19:52,059 --> 00:20:00,039
hit the proxy again set that up because

00:19:54,999 --> 00:20:06,389
we're proxying the exact pod all right

00:20:00,039 --> 00:20:10,389
it found the pod hit the webpage again

00:20:06,389 --> 00:20:19,359
excellent came back up but really the

00:20:10,389 --> 00:20:22,690
real thing is if we do a get logs on

00:20:19,359 --> 00:20:25,859
this let me know I get the logs there

00:20:22,690 --> 00:20:25,859
let me get the logs to the right pod

00:20:31,590 --> 00:20:35,609
helps if I type the right command

00:20:36,749 --> 00:20:52,570
excellent so there's our change my demo

00:20:43,899 --> 00:20:54,429
actually worked today thank you so we've

00:20:52,570 --> 00:20:58,769
got 15 minutes left how about some live

00:20:54,429 --> 00:21:00,389
debugging and actually I need help I

00:20:58,769 --> 00:21:03,639
know right

00:21:00,389 --> 00:21:05,139
crazy so I've got actually an issue

00:21:03,639 --> 00:21:06,970
right now and somebody can hop up to the

00:21:05,139 --> 00:21:09,879
microphone for me and help me out if

00:21:06,970 --> 00:21:14,169
somebody feels brave enough I'm making a

00:21:09,879 --> 00:21:16,090
change to the HTML under static and I

00:21:14,169 --> 00:21:18,399
think I need a build file I'm not

00:21:16,090 --> 00:21:22,659
certain but it's not updating in the

00:21:18,399 --> 00:21:24,519
container so you'll notice that we've

00:21:22,659 --> 00:21:27,009
got Enterprise best practices up on the

00:21:24,519 --> 00:21:32,279
HTML if nobody's up for this hey we

00:21:27,009 --> 00:21:32,279
don't have to do this no no no pressure

00:21:34,830 --> 00:21:43,679
but you'll notice that this morning I

00:21:37,809 --> 00:21:50,739
went in and I made the change or did I

00:21:43,679 --> 00:21:53,340
well let's do this again here and let's

00:21:50,739 --> 00:21:53,340
see if I can spell

00:21:59,930 --> 00:22:04,790
it'll go through and I'll run the build

00:22:05,090 --> 00:22:16,770
and now maybe it is working nope it said

00:22:12,420 --> 00:22:20,340
the papyrus UI is unchanged so I am

00:22:16,770 --> 00:22:25,200
listing the static as a component within

00:22:20,340 --> 00:22:31,650
my container so it is being built

00:22:25,200 --> 00:22:33,680
properly but anybody have any ideas let

00:22:31,650 --> 00:22:36,810
me get back to the bill basil and Adam

00:22:33,680 --> 00:22:38,010
because I'm listing the files and the

00:22:36,810 --> 00:22:42,420
work directory within the container

00:22:38,010 --> 00:22:44,820
image but I'd love to know why my demo

00:22:42,420 --> 00:22:49,830
wouldn't work in the manner that I had

00:22:44,820 --> 00:22:51,320
assumed it would any ideas no yeah all

00:22:49,830 --> 00:22:56,820
right excellent

00:22:51,320 --> 00:23:01,770
we tried if I could have the slide back

00:22:56,820 --> 00:23:03,630
deck back up I'd be awesome so as I was

00:23:01,770 --> 00:23:05,190
mentioning worked with Google

00:23:03,630 --> 00:23:08,010
professional services on project

00:23:05,190 --> 00:23:11,190
helmsman what that consists of is some

00:23:08,010 --> 00:23:13,140
base level best practices okay I want

00:23:11,190 --> 00:23:15,600
security within my GK cluster great

00:23:13,140 --> 00:23:18,450
here's about five different examples of

00:23:15,600 --> 00:23:19,830
how to do different security whether

00:23:18,450 --> 00:23:24,780
you're looking at networking or you're

00:23:19,830 --> 00:23:26,670
looking at our back etc we're gonna if

00:23:24,780 --> 00:23:28,980
you're actually a Google partner you

00:23:26,670 --> 00:23:31,260
also have access to about ten different

00:23:28,980 --> 00:23:33,720
decks that we built for example security

00:23:31,260 --> 00:23:35,400
is actually two decks about 50 slides

00:23:33,720 --> 00:23:37,740
each and you're able to pull out of that

00:23:35,400 --> 00:23:40,440
content to help out your customers with

00:23:37,740 --> 00:23:42,330
that there's a short link to the

00:23:40,440 --> 00:23:43,590
different github projects that are open

00:23:42,330 --> 00:23:45,660
up so I'll leave this slide up for a

00:23:43,590 --> 00:23:47,340
moment if you folks want to take a look

00:23:45,660 --> 00:23:50,880
at that they're up on github

00:23:47,340 --> 00:23:53,610
we love contributions we open source at

00:23:50,880 --> 00:23:55,590
next so we haven't had the contributions

00:23:53,610 --> 00:24:02,610
that we're looking for quite next quite

00:23:55,590 --> 00:24:06,000
as well and if you want to contact me

00:24:02,610 --> 00:24:09,330
I'm pretty much crystal of CMM CMM

00:24:06,000 --> 00:24:11,280
everywhere github Twitter etc etc so

00:24:09,330 --> 00:24:13,810
please reach out if you have any

00:24:11,280 --> 00:24:15,850
questions as I mentioned

00:24:13,810 --> 00:24:17,770
love to help you and love to have you

00:24:15,850 --> 00:24:21,550
anybody here contribute towards the

00:24:17,770 --> 00:24:26,220
helmsman projects thank you

00:24:21,550 --> 00:24:26,220

YouTube URL: https://www.youtube.com/watch?v=KGOvL9e7r1U


