Title: Scala with Bazel w  Wix, Stripe, Databricks
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Ittai Zeidman (Wix), Oscar Boykin (Stripe), and Ahir Reddy (DataBricks)
Captions: 
	00:00:00,030 --> 00:00:08,420
thank you thank you all for coming we'll

00:00:04,040 --> 00:00:10,800
talk a bit about skyline basil using and

00:00:08,420 --> 00:00:13,710
developing rules Scala through three

00:00:10,800 --> 00:00:17,250
different user stories we start off with

00:00:13,710 --> 00:00:19,470
Wix calm so my name is Thais Eichmann

00:00:17,250 --> 00:00:21,779
I'm one of the back and engineering

00:00:19,470 --> 00:00:23,369
leads at wicks and I'm currently

00:00:21,779 --> 00:00:26,960
building wix's next generation build

00:00:23,369 --> 00:00:30,330
system of course heavily based on basil

00:00:26,960 --> 00:00:33,719
so just stay tuned to the context of

00:00:30,330 --> 00:00:35,550
XCOM we have around 500 rappers our

00:00:33,719 --> 00:00:37,800
back-end is mainly Java and Scala and

00:00:35,550 --> 00:00:40,829
our front-end is mainly react in angular

00:00:37,800 --> 00:00:44,820
and we have around 4,000 build jobs

00:00:40,829 --> 00:00:51,420
which translates to roughly 25,000 build

00:00:44,820 --> 00:00:54,890
runs a day now our problem was we

00:00:51,420 --> 00:00:58,010
started out by frustrated developers

00:00:54,890 --> 00:01:01,440
with local build times so we had a few

00:00:58,010 --> 00:01:03,899
repositories with medium-sized medium to

00:01:01,440 --> 00:01:06,119
large size few hundred million modules a

00:01:03,899 --> 00:01:10,020
few hundred thousand lines of code and

00:01:06,119 --> 00:01:12,630
ever-increasing build times but we

00:01:10,020 --> 00:01:17,880
quickly realized that CI is much worse

00:01:12,630 --> 00:01:20,880
off so we are using Bezos paradigm in

00:01:17,880 --> 00:01:24,090
dependency at head but using it with

00:01:20,880 --> 00:01:26,369
maven and binary dependency and snapshot

00:01:24,090 --> 00:01:29,040
and teamcity and we'll being a whole

00:01:26,369 --> 00:01:31,590
kind of you know tooling to try and

00:01:29,040 --> 00:01:35,340
stitch things together and try and keep

00:01:31,590 --> 00:01:39,750
it up at scale and that's not a really

00:01:35,340 --> 00:01:41,790
good experience so we very quickly

00:01:39,750 --> 00:01:43,979
understood that what we need is to see

00:01:41,790 --> 00:01:47,340
how this story evolves throughout the

00:01:43,979 --> 00:01:49,140
whole layers where we now we

00:01:47,340 --> 00:01:52,310
automatically migrated our first

00:01:49,140 --> 00:01:55,439
back-end project now this is completely

00:01:52,310 --> 00:01:59,280
automatically ok to animate and modules

00:01:55,439 --> 00:02:02,790
around 1,000 lines of code migrated to

00:01:59,280 --> 00:02:06,149
1500 basil targets this is almost

00:02:02,790 --> 00:02:10,379
source package granularity completely

00:02:06,149 --> 00:02:12,870
automatically using an internal tool

00:02:10,379 --> 00:02:15,209
that will touch in a second

00:02:12,870 --> 00:02:19,680
we saw an average on developer machines

00:02:15,209 --> 00:02:21,750
a savings of 90% of bill time this is

00:02:19,680 --> 00:02:24,540
actually by the way without paralyzing

00:02:21,750 --> 00:02:26,250
our end-to-end tests because of some

00:02:24,540 --> 00:02:28,530
sandboxing issues and mac OS

00:02:26,250 --> 00:02:31,849
virtualization so and so on if you're

00:02:28,530 --> 00:02:36,750
familiar with the tickets but we're also

00:02:31,849 --> 00:02:38,430
hoping to save that and we're just now

00:02:36,750 --> 00:02:39,900
migrating a few more projects and

00:02:38,430 --> 00:02:42,019
hopefully in the very near future we'll

00:02:39,900 --> 00:02:45,090
be migrating all of all of the projects

00:02:42,019 --> 00:02:48,690
so how does this magical unicorn

00:02:45,090 --> 00:02:50,970
migration work so we start off getting a

00:02:48,690 --> 00:02:52,739
sum repository and we analyze what

00:02:50,970 --> 00:02:56,160
modules it has and what dependencies it

00:02:52,739 --> 00:02:57,930
has using ether we then try to take

00:02:56,160 --> 00:03:00,329
understand the external dependencies so

00:02:57,930 --> 00:03:02,519
we go to the organization's source of

00:03:00,329 --> 00:03:04,709
truth right usually because they should

00:03:02,519 --> 00:03:06,569
have that place that says guava is 19

00:03:04,709 --> 00:03:10,140
and net is 4 and whatever and whatever

00:03:06,569 --> 00:03:14,609
and we understand that

00:03:10,140 --> 00:03:17,370
transitive graph and we take those two

00:03:14,609 --> 00:03:19,650
realizations and we output third-party

00:03:17,370 --> 00:03:22,829
build files and update the workspace

00:03:19,650 --> 00:03:25,709
file in parallel we understand the

00:03:22,829 --> 00:03:26,700
eternal build graph so we work with a

00:03:25,709 --> 00:03:28,650
company called kalota

00:03:26,700 --> 00:03:31,349
and they get our source code and our

00:03:28,650 --> 00:03:34,109
bytecode from an existing maven a build

00:03:31,349 --> 00:03:38,220
and we create that API to get the code

00:03:34,109 --> 00:03:40,470
graph we do a whole transformation to

00:03:38,220 --> 00:03:42,799
convert it into a target graph so we

00:03:40,470 --> 00:03:45,419
basically take the files and we

00:03:42,799 --> 00:03:48,419
aggregate them into packages and then we

00:03:45,419 --> 00:03:50,280
get that cyclic graph and get all the

00:03:48,419 --> 00:03:52,500
shiny connected components and we get

00:03:50,280 --> 00:03:55,040
the dag because of course packages have

00:03:52,500 --> 00:03:59,849
technique dependencies that won't

00:03:55,040 --> 00:04:01,980
surprise any of you by the way the label

00:03:59,849 --> 00:04:04,829
syntax in basil is pretty loose so we

00:04:01,980 --> 00:04:05,879
were able to denote such such a case

00:04:04,829 --> 00:04:10,290
we're just saying

00:04:05,879 --> 00:04:12,900
name equals AGG so aggregator equals

00:04:10,290 --> 00:04:14,730
something plus something something so

00:04:12,900 --> 00:04:16,739
it's very easy for developer to know hey

00:04:14,730 --> 00:04:21,000
okay there is a smell here this is a

00:04:16,739 --> 00:04:23,940
cyclic so we transform that into Italian

00:04:21,000 --> 00:04:26,840
craft and then we of course output all

00:04:23,940 --> 00:04:26,840
of the relevant build files

00:04:26,950 --> 00:04:35,010
so this is what to say this supports all

00:04:30,670 --> 00:04:39,790
scopes so maybe it scopes Tesco provided

00:04:35,010 --> 00:04:41,380
and you know whatever is needed another

00:04:39,790 --> 00:04:45,190
another thing that that we've built

00:04:41,380 --> 00:04:48,070
which I think has been talked recently

00:04:45,190 --> 00:04:51,100
in the community is our synchronizer so

00:04:48,070 --> 00:04:52,540
let's say that you have an update in the

00:04:51,100 --> 00:04:54,250
sort of troops of the organization

00:04:52,540 --> 00:04:56,140
someone upgraded the guava version now

00:04:54,250 --> 00:04:58,210
you want this to propagate to all of the

00:04:56,140 --> 00:05:01,570
base repositories went to the maven

00:04:58,210 --> 00:05:03,280
repository that took to be the basil

00:05:01,570 --> 00:05:05,290
repository to be synced with the maven

00:05:03,280 --> 00:05:07,330
ones if you're in migration period so

00:05:05,290 --> 00:05:09,730
have a service that listens to the

00:05:07,330 --> 00:05:12,210
change understand the transitive graph

00:05:09,730 --> 00:05:14,560
diff using the resolver from before

00:05:12,210 --> 00:05:17,860
checks out all of the organization's

00:05:14,560 --> 00:05:19,270
repositories and outputs to the

00:05:17,860 --> 00:05:22,060
workspace and the third-party build

00:05:19,270 --> 00:05:26,170
files that the diff so that way they are

00:05:22,060 --> 00:05:29,560
all kept in sync what we don't have now

00:05:26,170 --> 00:05:31,600
and we need to add is a way to add

00:05:29,560 --> 00:05:34,510
overwrite oh I forgot to add actually

00:05:31,600 --> 00:05:37,330
that in the migration migrator has a lot

00:05:34,510 --> 00:05:39,640
of overrides capabilities so that if you

00:05:37,330 --> 00:05:41,620
have false negatives or false positives

00:05:39,640 --> 00:05:45,940
about testing and so and so on then

00:05:41,620 --> 00:05:47,590
users can tweak the the migrator we need

00:05:45,940 --> 00:05:49,210
to add some tweaking to a synchronizer

00:05:47,590 --> 00:05:51,790
because like many of you have already

00:05:49,210 --> 00:05:54,510
been feeling the one version policy is

00:05:51,790 --> 00:05:58,720
really really good to strive at but

00:05:54,510 --> 00:06:00,610
there are rough edges so this is a bit

00:05:58,720 --> 00:06:03,910
about our user story I'd like to take

00:06:00,610 --> 00:06:06,700
you now into a few of my favorite room

00:06:03,910 --> 00:06:09,070
skeleton bits and we start with the JVM

00:06:06,700 --> 00:06:12,220
interoperability now it might be

00:06:09,070 --> 00:06:14,400
surprising for some of you but this

00:06:12,220 --> 00:06:17,410
snippet of its of a Java library

00:06:14,400 --> 00:06:19,630
depending on a scholar library wasn't

00:06:17,410 --> 00:06:23,500
really an option up until a few months

00:06:19,630 --> 00:06:26,200
ago so mainly because Java library is a

00:06:23,500 --> 00:06:29,500
native rule and there wasn't a good

00:06:26,200 --> 00:06:31,870
protocol to say what outputs what inputs

00:06:29,500 --> 00:06:34,060
does it expect from other rules and so

00:06:31,870 --> 00:06:36,780
it just had a very strict subset of

00:06:34,060 --> 00:06:39,780
rules that it could depend on

00:06:36,780 --> 00:06:42,690
and what we did was to have a deployed

00:06:39,780 --> 00:06:44,280
jaw is generated from sky library which

00:06:42,690 --> 00:06:48,750
meant class but pollution and so on and

00:06:44,280 --> 00:06:51,060
so on so the main parts were of course

00:06:48,750 --> 00:06:53,700
providers declawed providers and in this

00:06:51,060 --> 00:06:56,190
case Java Java come on and I really want

00:06:53,700 --> 00:06:58,139
to take this opportunity to give props

00:06:56,190 --> 00:07:01,370
to the Basel team for identifying this

00:06:58,139 --> 00:07:04,860
gap designing it and it's rating with us

00:07:01,370 --> 00:07:08,310
until you know we've closed the loop so

00:07:04,860 --> 00:07:08,610
really thank you very much you know who

00:07:08,310 --> 00:07:13,940
you are

00:07:08,610 --> 00:07:16,440
so thank you if you want to implement

00:07:13,940 --> 00:07:18,450
such an integration in your own rules

00:07:16,440 --> 00:07:21,900
the the important parts were also of

00:07:18,450 --> 00:07:24,419
course Java info that is to grab the

00:07:21,900 --> 00:07:29,340
provider from your dependencies so that

00:07:24,419 --> 00:07:31,380
you know what what they expose to create

00:07:29,340 --> 00:07:33,540
a provider so that others can depend on

00:07:31,380 --> 00:07:35,490
you you know what are your compile time

00:07:33,540 --> 00:07:37,470
dependencies transitive compile

00:07:35,490 --> 00:07:43,530
dependencies run the dependents so on

00:07:37,470 --> 00:07:45,360
and also might take advantage of Java

00:07:43,530 --> 00:07:48,510
common compiled this was very important

00:07:45,360 --> 00:07:50,430
for us because for us it wakes we have

00:07:48,510 --> 00:07:52,530
some packages that have cyclic

00:07:50,430 --> 00:07:54,780
dependency inside of them between the

00:07:52,530 --> 00:07:56,310
Java and the scala sources and that

00:07:54,780 --> 00:07:59,430
meant that we need scholarly way to be

00:07:56,310 --> 00:08:01,080
able to compile both Java and Scala we

00:07:59,430 --> 00:08:04,530
used to do that just by spinning up Java

00:08:01,080 --> 00:08:07,169
C and that didn't respect Java toolchain

00:08:04,530 --> 00:08:10,560
and a whole kind of a thing so again

00:08:07,169 --> 00:08:12,150
this is thanks to the basil team we Java

00:08:10,560 --> 00:08:13,760
command compile and are very very happy

00:08:12,150 --> 00:08:17,010
with it

00:08:13,760 --> 00:08:18,750
next up testing support so we are we

00:08:17,010 --> 00:08:21,330
have to extort comma really big fans of

00:08:18,750 --> 00:08:23,310
testing and I'm glad to say that guru

00:08:21,330 --> 00:08:26,250
Scala supports the big three libraries

00:08:23,310 --> 00:08:30,030
Scala test JUnit and specs - via

00:08:26,250 --> 00:08:32,700
geminate and we're thinking about adding

00:08:30,030 --> 00:08:34,289
support for specs to native also and the

00:08:32,700 --> 00:08:37,110
cherry on the top for me at least is the

00:08:34,289 --> 00:08:39,780
maven like test discovery feature so if

00:08:37,110 --> 00:08:43,979
you can see you can specify prefixes or

00:08:39,780 --> 00:08:46,860
suffixes on the target and that will

00:08:43,979 --> 00:08:49,290
discover like in maven all the classes

00:08:46,860 --> 00:08:50,680
note not the files but the classes

00:08:49,290 --> 00:08:52,300
because it's collet there is

00:08:50,680 --> 00:08:55,180
you can have many classes in the same

00:08:52,300 --> 00:08:58,420
file which end or begin with these

00:08:55,180 --> 00:09:00,220
prefixes first this was a really big

00:08:58,420 --> 00:09:02,649
blocker because we often have packages

00:09:00,220 --> 00:09:07,540
with let's say 10 files about 15 classes

00:09:02,649 --> 00:09:10,270
and Oscar Tony that Scalla test just

00:09:07,540 --> 00:09:15,640
automatically discovers them so in JUnit

00:09:10,270 --> 00:09:17,080
inspects - this does not happen last but

00:09:15,640 --> 00:09:20,050
not least streak dips

00:09:17,080 --> 00:09:22,060
so I'm guessing many of you know what

00:09:20,050 --> 00:09:24,040
strict EPS is but just for those of you

00:09:22,060 --> 00:09:27,610
who don't know strict apps is about

00:09:24,040 --> 00:09:32,920
prohibiting transitive compile time axis

00:09:27,610 --> 00:09:35,910
ok so let's say in maven if you have a

00:09:32,920 --> 00:09:40,080
which depends on B which depends on C

00:09:35,910 --> 00:09:43,480
then in the code a can also depend on C

00:09:40,080 --> 00:09:45,820
now this can really really come to hair

00:09:43,480 --> 00:09:49,089
places when B doesn't refractor stop

00:09:45,820 --> 00:09:50,980
using C and then pushes and a breaks and

00:09:49,089 --> 00:09:54,990
no what are you doing revert we've heard

00:09:50,980 --> 00:09:59,620
you both my build so fortunately basil

00:09:54,990 --> 00:10:02,830
really tries to push you off that path

00:09:59,620 --> 00:10:06,310
now what we had in Ross Geller up until

00:10:02,830 --> 00:10:08,970
or even in master still is that just

00:10:06,310 --> 00:10:11,620
there is no cryptic errors okay if a

00:10:08,970 --> 00:10:15,040
depends on C there is some cryptic error

00:10:11,620 --> 00:10:15,820
by Scala see and you you're now left to

00:10:15,040 --> 00:10:17,830
handle it

00:10:15,820 --> 00:10:20,589
Shrek devs tries to give you this

00:10:17,830 --> 00:10:24,940
premise but with a higher level action

00:10:20,589 --> 00:10:27,910
how does this look so you specify - -

00:10:24,940 --> 00:10:29,920
trick tips equals error or warned you

00:10:27,910 --> 00:10:32,260
build of course your target let's say a

00:10:29,920 --> 00:10:36,040
in our case and then you get an error

00:10:32,260 --> 00:10:38,860
that says C is used but isn't explicitly

00:10:36,040 --> 00:10:42,520
cleared so you actually have a warning

00:10:38,860 --> 00:10:44,500
that you can understand and the bonus is

00:10:42,520 --> 00:10:46,750
if you have what those are installed you

00:10:44,500 --> 00:10:49,649
can just apply this you can just copy

00:10:46,750 --> 00:10:53,709
paste this line and it will just add

00:10:49,649 --> 00:10:56,079
this dependency and the bill files so by

00:10:53,709 --> 00:10:57,790
the way there is also an open ticket for

00:10:56,079 --> 00:11:00,610
basil watcher if you're familiar with it

00:10:57,790 --> 00:11:02,260
I basil to automatically apply this so

00:11:00,610 --> 00:11:04,960
parse those billdozer and just

00:11:02,260 --> 00:11:07,450
automatically apply those so in

00:11:04,960 --> 00:11:10,630
so basically in development mode you can

00:11:07,450 --> 00:11:14,080
work with Warren and have rapid feedback

00:11:10,630 --> 00:11:19,150
and on CI you can have error and you can

00:11:14,080 --> 00:11:20,560
have that checked out now getting

00:11:19,150 --> 00:11:23,770
getting this work

00:11:20,560 --> 00:11:26,010
it could there quite a few details we

00:11:23,770 --> 00:11:29,410
need to write the Scala compiler plugin

00:11:26,010 --> 00:11:32,890
we needed to propagate the labels so you

00:11:29,410 --> 00:11:35,410
see that it says that there is C as a

00:11:32,890 --> 00:11:38,230
label dependency but this is a part of

00:11:35,410 --> 00:11:41,710
Java info I hope to get it in Java info

00:11:38,230 --> 00:11:46,360
soon but we needed to collect those and

00:11:41,710 --> 00:11:47,860
pass them on as as as attribute this is

00:11:46,360 --> 00:11:50,050
why by the way this won't work with a

00:11:47,860 --> 00:11:52,270
lot of the existing rules but it does

00:11:50,050 --> 00:11:55,540
work with Scala rules and Scala import

00:11:52,270 --> 00:11:57,300
so you get you get the it by the way if

00:11:55,540 --> 00:11:59,290
you use the other rules you just get

00:11:57,300 --> 00:12:03,370
incoherent labels it will still work but

00:11:59,290 --> 00:12:05,080
the console action will be less valuable

00:12:03,370 --> 00:12:07,480
we need to propagate transitive compile

00:12:05,080 --> 00:12:10,360
jars which did get into Java info and

00:12:07,480 --> 00:12:13,510
saved us a lot of code exposed strict

00:12:10,360 --> 00:12:16,600
EPS flag for a to skylark and do the

00:12:13,510 --> 00:12:17,950
bullosa integration so this again cross

00:12:16,600 --> 00:12:20,710
the law situations with the base of team

00:12:17,950 --> 00:12:23,010
and they were really really helpful

00:12:20,710 --> 00:12:27,370
especially arena so thank you very much

00:12:23,010 --> 00:12:39,070
and stage two here now

00:12:27,370 --> 00:12:40,450
thank you can you hear me so yeah my

00:12:39,070 --> 00:12:42,400
name is a here already

00:12:40,450 --> 00:12:45,010
I am the tech lead of the developer

00:12:42,400 --> 00:12:47,200
tooling team at data bricks we're a team

00:12:45,010 --> 00:12:49,870
of about four engineers and I've sort of

00:12:47,200 --> 00:12:51,850
been at data Rex for about four years

00:12:49,870 --> 00:12:53,770
so about data bricks were about 80

00:12:51,850 --> 00:12:55,660
engineers based in San Francisco the

00:12:53,770 --> 00:12:57,730
short version is we do spark so we're

00:12:55,660 --> 00:12:59,500
created by we were founded by the team

00:12:57,730 --> 00:13:01,120
that started spark at the amp lab at

00:12:59,500 --> 00:13:05,830
Berkeley and what we work on now is

00:13:01,120 --> 00:13:08,470
delivering spark in the cloud cool

00:13:05,830 --> 00:13:11,040
so a little bit about the build at data

00:13:08,470 --> 00:13:15,540
bricks we from the beginning have

00:13:11,040 --> 00:13:17,620
settled on a mono repo a lot of former

00:13:15,540 --> 00:13:18,730
Googlers were around at the beginning

00:13:17,620 --> 00:13:20,620
and they showed us at this

00:13:18,730 --> 00:13:23,500
the one true way and it's sort of this

00:13:20,620 --> 00:13:25,510
worked out quite well and today

00:13:23,500 --> 00:13:27,160
everything is so everything's built with

00:13:25,510 --> 00:13:29,410
basil so about five hundred thousand

00:13:27,160 --> 00:13:32,680
lines of Scala 150 thousand lines of

00:13:29,410 --> 00:13:35,139
JavaScript you'll see there Java we

00:13:32,680 --> 00:13:37,240
build all of our services using into

00:13:35,139 --> 00:13:41,139
docker containers and many more

00:13:37,240 --> 00:13:44,860
languages python go JSON net and we even

00:13:41,139 --> 00:13:48,910
use basil to manage our deployments and

00:13:44,860 --> 00:13:50,800
configuration so kind of a turn i don't

00:13:48,910 --> 00:13:54,190
know how easily readable this is but you

00:13:50,800 --> 00:14:00,970
can just see over time code growth so

00:13:54,190 --> 00:14:03,220
the green is build files and skylark so

00:14:00,970 --> 00:14:05,589
you'll see that's when that p are merged

00:14:03,220 --> 00:14:09,550
that month and it's sort of this grown

00:14:05,589 --> 00:14:11,110
over time so all right so where were we

00:14:09,550 --> 00:14:13,209
before basil so we've been around for

00:14:11,110 --> 00:14:15,190
four years and basil wasn't an option

00:14:13,209 --> 00:14:17,860
when we started so we previously used

00:14:15,190 --> 00:14:20,680
SBT or the simple build tool for those

00:14:17,860 --> 00:14:22,870
of you who aren't familiar it's the sort

00:14:20,680 --> 00:14:25,810
of standard in the scala community it's

00:14:22,870 --> 00:14:29,529
designed to compile Scala and Java and

00:14:25,810 --> 00:14:32,500
we extended it with custom tasks for

00:14:29,529 --> 00:14:36,040
JavaScript docker and Python compilation

00:14:32,500 --> 00:14:38,589
so while SBT is a nice enough tool for

00:14:36,040 --> 00:14:41,620
small projects it's not exactly designed

00:14:38,589 --> 00:14:44,260
to handle a mono repository so what we

00:14:41,620 --> 00:14:47,889
observed as we scaled base as we scaled

00:14:44,260 --> 00:14:50,290
SBT was about 20 seconds of overhead so

00:14:47,889 --> 00:14:51,940
when I say no op compiles I mean SPG

00:14:50,290 --> 00:14:54,250
decides it has nothing to do that takes

00:14:51,940 --> 00:14:59,079
about 20 seconds and that really wasn't

00:14:54,250 --> 00:15:01,029
acceptable and what was actually as big

00:14:59,079 --> 00:15:03,790
of a problem was the fact that it was

00:15:01,029 --> 00:15:05,980
completely unmaintainable in terms of

00:15:03,790 --> 00:15:07,839
the complexity so other than a couple of

00:15:05,980 --> 00:15:10,389
folks who enjoyed working with the build

00:15:07,839 --> 00:15:12,339
and sort of became in-house SBT experts

00:15:10,389 --> 00:15:17,079
no one else could really touch it it was

00:15:12,339 --> 00:15:19,000
pretty impenetrable and around testing

00:15:17,079 --> 00:15:23,610
it didn't really have great guarantees

00:15:19,000 --> 00:15:23,610
so it was slow and unsanded

00:15:23,889 --> 00:15:31,240
writing files temporary directories all

00:15:26,290 --> 00:15:32,230
that all that sad stuff so in the summer

00:15:31,240 --> 00:15:32,499
of 2016

00:15:32,230 --> 00:15:34,839
we

00:15:32,499 --> 00:15:37,239
decided to make the transition we

00:15:34,839 --> 00:15:40,419
experimented with basil sort of towards

00:15:37,239 --> 00:15:45,339
the end of 2015 and sort of realized it

00:15:40,419 --> 00:15:46,749
was viable and we sort of waited

00:15:45,339 --> 00:15:48,849
see if like there was a community

00:15:46,749 --> 00:15:52,419
growing around it and there was so we

00:15:48,849 --> 00:15:56,969
kicked off the the migration so at the

00:15:52,419 --> 00:16:00,129
time we had about 90 sub projects in SBT

00:15:56,969 --> 00:16:02,049
for some context projects and SBT tend

00:16:00,129 --> 00:16:04,389
to be quite large because it's there's a

00:16:02,049 --> 00:16:07,569
high cost adding a new one so this

00:16:04,389 --> 00:16:10,899
amounted to about roughly like three

00:16:07,569 --> 00:16:13,779
hundred thousand lines of Scala and of

00:16:10,899 --> 00:16:17,949
that 15 thousand lines was just SBT

00:16:13,779 --> 00:16:19,389
build definition and so one thing we

00:16:17,949 --> 00:16:21,489
determined early on it was that it was

00:16:19,389 --> 00:16:25,089
too large and too risky to convert this

00:16:21,489 --> 00:16:27,459
in a single pass so what we did was we

00:16:25,089 --> 00:16:29,049
maintained a parallel SBT and basil

00:16:27,459 --> 00:16:33,099
build for the duration of this migration

00:16:29,049 --> 00:16:34,449
and that wasn't very fun development and

00:16:33,099 --> 00:16:36,129
projects were moving quite quickly

00:16:34,449 --> 00:16:38,679
during that time so it was really

00:16:36,129 --> 00:16:42,789
difficult to keep up with changes in the

00:16:38,679 --> 00:16:45,279
SBT build so what did we do well we we

00:16:42,789 --> 00:16:49,149
automated it so we wrote an SPT plug-in

00:16:45,279 --> 00:16:51,489
that would convert the project into into

00:16:49,149 --> 00:16:53,649
basil so what would it do well it would

00:16:51,489 --> 00:16:56,649
traverse the SBT project graft and

00:16:53,649 --> 00:16:59,589
convert it into a Scala graph so we used

00:16:56,649 --> 00:17:02,439
the wonderful open source Scala build

00:16:59,589 --> 00:17:04,539
rules and we just emitted the various

00:17:02,439 --> 00:17:07,360
targets that we needed so we'd traverse

00:17:04,539 --> 00:17:09,159
the graph emit library targets in order

00:17:07,360 --> 00:17:11,829
to find tests we would perform

00:17:09,159 --> 00:17:14,139
compilation do test discovery and emit

00:17:11,829 --> 00:17:17,319
Scala test targets and we also had to

00:17:14,139 --> 00:17:20,129
handle maven dependency resolution that

00:17:17,319 --> 00:17:22,959
SBT like mate like maven takes care of

00:17:20,129 --> 00:17:24,669
so we had two modes for this initially

00:17:22,959 --> 00:17:28,000
we would directly resolve dependencies

00:17:24,669 --> 00:17:30,429
and just check them in later on we

00:17:28,000 --> 00:17:32,950
emitted a JSON representation of the

00:17:30,429 --> 00:17:35,350
maven coordinates and built a tool to

00:17:32,950 --> 00:17:39,669
take those that representation and

00:17:35,350 --> 00:17:42,190
convert it into a set of build files so

00:17:39,669 --> 00:17:44,860
what did this let us do we could

00:17:42,190 --> 00:17:45,980
maintain the parallel builds without too

00:17:44,860 --> 00:17:47,690
much overhead

00:17:45,980 --> 00:17:50,390
we told people hey there's this new

00:17:47,690 --> 00:17:51,740
Basel thing go ahead and try it we we

00:17:50,390 --> 00:17:54,170
think it'll give you a lot of speed up

00:17:51,740 --> 00:17:56,930
and you'll get much better error

00:17:54,170 --> 00:18:00,050
messages so when things didn't work

00:17:56,930 --> 00:18:01,670
people would fall back to SVT and over

00:18:00,050 --> 00:18:03,200
the course of the next four months we

00:18:01,670 --> 00:18:05,510
incrementally added the features that we

00:18:03,200 --> 00:18:09,260
needed squash bugs in our basil build

00:18:05,510 --> 00:18:11,690
and all while keeping SBT is the source

00:18:09,260 --> 00:18:13,790
of truth and once we were very confident

00:18:11,690 --> 00:18:15,620
we would remove one sub project at a

00:18:13,790 --> 00:18:16,970
time I think around this point we had

00:18:15,620 --> 00:18:19,670
grown to about a hundred and ten sub

00:18:16,970 --> 00:18:21,380
projects and one at a time we remove

00:18:19,670 --> 00:18:23,450
them until nothing was left

00:18:21,380 --> 00:18:27,560
so one note if people are interested in

00:18:23,450 --> 00:18:29,030
this SBT plug-in feel free to just reach

00:18:27,560 --> 00:18:30,710
out to me or I'll just be hanging out

00:18:29,030 --> 00:18:33,470
after and we can we'll open source that

00:18:30,710 --> 00:18:36,290
if there's interest so that sort of

00:18:33,470 --> 00:18:39,820
brings us to today what do we have now

00:18:36,290 --> 00:18:43,490
we have about 900 Scala targets in basil

00:18:39,820 --> 00:18:47,930
they actually come they target multiple

00:18:43,490 --> 00:18:49,550
scale versions 210 211 and 212 in some

00:18:47,930 --> 00:18:51,490
cases there's the same set of code

00:18:49,550 --> 00:18:54,560
compiled across all of these versions

00:18:51,490 --> 00:18:57,860
and we also have about 2,000 Scala test

00:18:54,560 --> 00:19:00,110
targets and here the sandboxing and

00:18:57,860 --> 00:19:03,020
parallel execution has greatly improved

00:19:00,110 --> 00:19:06,560
both the test speed and the stability of

00:19:03,020 --> 00:19:09,500
tests so our CI has been much more green

00:19:06,560 --> 00:19:11,450
than before and like I mentioned before

00:19:09,500 --> 00:19:14,120
we now have a dependency management tool

00:19:11,450 --> 00:19:17,750
to take a set of maven coordinates and

00:19:14,120 --> 00:19:20,330
map it into a graph of build files so

00:19:17,750 --> 00:19:22,940
this way we've sort of baked in our

00:19:20,330 --> 00:19:25,040
snapshot our dependencies and just check

00:19:22,940 --> 00:19:27,500
them in so source control is the source

00:19:25,040 --> 00:19:30,140
of truth there's there are no external

00:19:27,500 --> 00:19:32,930
dependencies at Build time and lastly

00:19:30,140 --> 00:19:34,310
some recent work we've had we've

00:19:32,930 --> 00:19:36,380
developed a little bit of automated

00:19:34,310 --> 00:19:38,570
tooling to split up large projects so

00:19:36,380 --> 00:19:40,880
one sort of artifact of the migration

00:19:38,570 --> 00:19:43,940
from SBT is we had very large individual

00:19:40,880 --> 00:19:46,040
projects sometimes some projects are

00:19:43,940 --> 00:19:49,070
like 20 to 30 thousand lines of code

00:19:46,040 --> 00:19:50,780
these compile as one artifact so when

00:19:49,070 --> 00:19:52,970
you're doing iterative development a 30

00:19:50,780 --> 00:19:55,810
second compile cycle isn't that Pleasant

00:19:52,970 --> 00:19:59,090
so we built a little bit of tooling to

00:19:55,810 --> 00:19:59,789
break down targets describe them as a

00:19:59,090 --> 00:20:05,609
sort

00:19:59,789 --> 00:20:09,239
as a graph of related classes and writed

00:20:05,609 --> 00:20:11,460
wrote a module to consume that graph run

00:20:09,239 --> 00:20:13,499
some billdozer commands and generate a

00:20:11,460 --> 00:20:16,619
bunch of small targets so we could

00:20:13,499 --> 00:20:20,100
automatically ish break up large

00:20:16,619 --> 00:20:22,679
projects into smaller ones so to

00:20:20,100 --> 00:20:25,200
conclude at data bricks we love basil

00:20:22,679 --> 00:20:27,479
we've been very happy with the migration

00:20:25,200 --> 00:20:29,399
I think the key thing besides

00:20:27,479 --> 00:20:31,529
performance and stability is that it's

00:20:29,399 --> 00:20:33,869
gone a long way in democratizing our

00:20:31,529 --> 00:20:35,639
build so many engineers feel comfortable

00:20:33,869 --> 00:20:37,549
writing their own rules in macros in

00:20:35,639 --> 00:20:41,669
addition to being able to debug issues

00:20:37,549 --> 00:20:44,909
with the rules or with rules that they

00:20:41,669 --> 00:20:47,639
used today and basil has provided us

00:20:44,909 --> 00:20:51,090
with a lot of other test benefits basil

00:20:47,639 --> 00:20:52,590
strong caching and isolation model has

00:20:51,090 --> 00:20:54,539
let us do things like selective tests

00:20:52,590 --> 00:20:57,149
running so it's very easy for us via

00:20:54,539 --> 00:21:00,659
basil query to do things like only run

00:20:57,149 --> 00:21:02,999
the set of tests that a patch CL pull

00:21:00,659 --> 00:21:04,590
request whatever you call them to only

00:21:02,999 --> 00:21:06,809
run the set of tests that they affect

00:21:04,590 --> 00:21:09,539
this is greatly sped up test times and

00:21:06,809 --> 00:21:11,399
stability so this is something that we

00:21:09,539 --> 00:21:12,749
think is pretty important in a mono repo

00:21:11,399 --> 00:21:15,389
you probably don't want to run that

00:21:12,749 --> 00:21:20,190
guy's tests that are flaky and broken if

00:21:15,389 --> 00:21:21,720
your change doesn't affect it and in and

00:21:20,190 --> 00:21:23,639
lastly we've done a lot of work around

00:21:21,720 --> 00:21:26,759
integrating our build with docker and

00:21:23,639 --> 00:21:28,710
kubernetes so from our perspective code

00:21:26,759 --> 00:21:32,039
is just a sorry configuration is just

00:21:28,710 --> 00:21:34,229
code with dependencies so pushing a new

00:21:32,039 --> 00:21:35,789
configuration amount you building that

00:21:34,229 --> 00:21:38,970
configuration which compiles all the

00:21:35,789 --> 00:21:41,879
necessary artifacts and lets us sort of

00:21:38,970 --> 00:21:45,419
in one step build and push that

00:21:41,879 --> 00:21:46,979
configuration to kubernetes so basil

00:21:45,419 --> 00:21:49,200
made this super easy

00:21:46,979 --> 00:21:52,470
check out my colleague miles talk

00:21:49,200 --> 00:21:53,909
tomorrow and Matthews talk tomorrow will

00:21:52,470 --> 00:21:56,700
they'll sort of dive into this a bit

00:21:53,909 --> 00:21:58,650
more and yeah and I'll hand it off to

00:21:56,700 --> 00:22:04,330
Oscar now thank you very much

00:21:58,650 --> 00:22:11,450
[Applause]

00:22:04,330 --> 00:22:14,000
hello okay let's see I'm Oscar wicked

00:22:11,450 --> 00:22:16,310
I'm it's straight I'm an engineer unlike

00:22:14,000 --> 00:22:18,260
these guys here they're pros I'm just

00:22:16,310 --> 00:22:20,000
some kind of like you know amateur in

00:22:18,260 --> 00:22:21,320
this whole like building software thing

00:22:20,000 --> 00:22:23,360
I'm on the machine learning

00:22:21,320 --> 00:22:25,970
infrastructure team we mostly work with

00:22:23,360 --> 00:22:28,160
Scala we build infrastructure for

00:22:25,970 --> 00:22:32,120
surveying and scoring and training

00:22:28,160 --> 00:22:34,220
machine learning models and so you know

00:22:32,120 --> 00:22:34,910
a little bit of what build looks like

00:22:34,220 --> 00:22:38,060
it's stripe

00:22:34,910 --> 00:22:41,900
ruby is we mostly use three languages at

00:22:38,060 --> 00:22:46,160
stripe Ruby Scala and go Ruby's used for

00:22:41,900 --> 00:22:47,780
the front end which is great if you

00:22:46,160 --> 00:22:50,450
don't know we do we process payments for

00:22:47,780 --> 00:22:53,300
make an API for people who want to

00:22:50,450 --> 00:22:55,670
process payments so our front-end is

00:22:53,300 --> 00:22:58,340
like not only just like UI but also like

00:22:55,670 --> 00:23:01,970
the API for an end of Skype most of that

00:22:58,340 --> 00:23:03,620
is handled by Ruby Scala and Java are

00:23:01,970 --> 00:23:07,460
used by pretty much like the whole data

00:23:03,620 --> 00:23:09,350
org so I guess you know like this is the

00:23:07,460 --> 00:23:12,200
AVI Brian school of thought from Etsy

00:23:09,350 --> 00:23:14,720
right so like you know anyway so you

00:23:12,200 --> 00:23:18,650
know Jam as much Scala line JVM as you

00:23:14,720 --> 00:23:20,210
can when you're analyzing data pretty

00:23:18,650 --> 00:23:21,800
much that kind of got a toehold at

00:23:20,210 --> 00:23:23,630
stripe so that's kind of basically true

00:23:21,800 --> 00:23:27,050
we don't do a mono repo at stripe we

00:23:23,630 --> 00:23:29,060
have a number of repose even in the data

00:23:27,050 --> 00:23:32,060
org there's probably around ten main

00:23:29,060 --> 00:23:34,310
repos most of those currently use basil

00:23:32,060 --> 00:23:37,220
now some of them still use SPT which you

00:23:34,310 --> 00:23:40,070
heard about a little bit our largest

00:23:37,220 --> 00:23:41,150
scholar repo is about two hundred you

00:23:40,070 --> 00:23:44,360
know two hundred thousand lines of code

00:23:41,150 --> 00:23:48,110
it's not a giant repo takes about six

00:23:44,360 --> 00:23:50,600
minutes now in basil for for it to build

00:23:48,110 --> 00:23:52,040
in CI which you know we're happy with

00:23:50,600 --> 00:23:54,200
it's a considerable improvement over

00:23:52,040 --> 00:23:56,930
where it was with maven we also use go

00:23:54,200 --> 00:23:58,820
they the go folks do you know sure

00:23:56,930 --> 00:24:00,410
indigo you're like the one true way of

00:23:58,820 --> 00:24:02,390
doing things and like the one true way

00:24:00,410 --> 00:24:04,100
you know you've got to do it is the

00:24:02,390 --> 00:24:05,780
miner ethos the go folks are into that

00:24:04,100 --> 00:24:07,940
like a Scala people they don't

00:24:05,780 --> 00:24:09,620
tell us what to do you want you know I

00:24:07,940 --> 00:24:13,490
knew a mono repo and I'm gonna do one

00:24:09,620 --> 00:24:14,870
man so anyways the

00:24:13,490 --> 00:24:16,669
here's that little bit of the skyline

00:24:14,870 --> 00:24:21,140
beetle history I used to work in Twitter

00:24:16,669 --> 00:24:23,090
and you know we we had our own blaze

00:24:21,140 --> 00:24:23,960
clone their pants which you might have

00:24:23,090 --> 00:24:27,559
heard of some people might have

00:24:23,960 --> 00:24:29,210
mentioned it and like actually I really

00:24:27,559 --> 00:24:31,580
kind of did I mean you know like you

00:24:29,210 --> 00:24:33,860
know I got a lot dear friends on the

00:24:31,580 --> 00:24:35,510
pants to you even like God love them but

00:24:33,860 --> 00:24:37,130
I really didn't like using pants so

00:24:35,510 --> 00:24:39,020
towards the end of my time at Twitter we

00:24:37,130 --> 00:24:40,370
evaluated basil we took a look at it and

00:24:39,020 --> 00:24:42,020
I was really impressed with it some

00:24:40,370 --> 00:24:44,690
people at Twitter I think really liked

00:24:42,020 --> 00:24:47,659
it it's it's it's it's interesting a lot

00:24:44,690 --> 00:24:51,679
of people and so I took a look and I

00:24:47,659 --> 00:24:54,380
found this blog post by I always say

00:24:51,679 --> 00:24:56,059
your name wrong Kushina not Catriona see

00:24:54,380 --> 00:24:58,010
Katrina it's great Christina and she

00:24:56,059 --> 00:25:00,620
happened to use as an example of how

00:24:58,010 --> 00:25:04,850
programmable visa was this is like 2015

00:25:00,620 --> 00:25:06,799
like 2015 making a scholar rule as an

00:25:04,850 --> 00:25:09,500
example of how you could use Skylar to

00:25:06,799 --> 00:25:11,270
program basil and so I was like hey this

00:25:09,500 --> 00:25:13,010
doesn't seem so hard I could probably

00:25:11,270 --> 00:25:13,909
hack this thing up so we could like make

00:25:13,010 --> 00:25:15,710
it like a real thing

00:25:13,909 --> 00:25:18,350
I started I spent some simple requests

00:25:15,710 --> 00:25:21,020
over to basil and they got merged and it

00:25:18,350 --> 00:25:22,520
got better and better and we just we

00:25:21,020 --> 00:25:23,990
started playing with it in early 2016

00:25:22,520 --> 00:25:25,190
when I moved to stripe and we were

00:25:23,990 --> 00:25:27,200
pretty happy with it works a lot better

00:25:25,190 --> 00:25:28,909
than made and even like two almost two

00:25:27,200 --> 00:25:29,870
years ago and it's been just getting

00:25:28,909 --> 00:25:32,630
better and better as you've heard some

00:25:29,870 --> 00:25:34,850
people say so I'm going to basically

00:25:32,630 --> 00:25:36,950
tell you about like three kind of like

00:25:34,850 --> 00:25:40,190
some good parts and bad parts and some

00:25:36,950 --> 00:25:44,059
like you know really bad parts so let's

00:25:40,190 --> 00:25:47,210
see the good parts actually this whole

00:25:44,059 --> 00:25:49,549
reproducibility thing like like like

00:25:47,210 --> 00:25:51,169
most things you know like it's like I

00:25:49,549 --> 00:25:53,720
guess it's like a lie because like half

00:25:51,169 --> 00:25:55,340
the people who give talks like well we

00:25:53,720 --> 00:25:58,549
didn't do that reproducibly and we

00:25:55,340 --> 00:25:59,960
didn't do that but like I'm naive Noble

00:25:58,549 --> 00:26:01,340
so I was like oh this is going to be

00:25:59,960 --> 00:26:04,070
amazing everything's to be reproducible

00:26:01,340 --> 00:26:06,260
and actually for us because like the

00:26:04,070 --> 00:26:08,090
Scala rules are somewhat uptight like it

00:26:06,260 --> 00:26:10,220
has been we've actually only had two

00:26:08,090 --> 00:26:11,690
cases where like something was non

00:26:10,220 --> 00:26:14,000
reproducible where we built it and I

00:26:11,690 --> 00:26:15,320
made some change in like or didn't make

00:26:14,000 --> 00:26:17,570
a change and rebuilt it we got something

00:26:15,320 --> 00:26:20,029
different and in both cases those were

00:26:17,570 --> 00:26:21,950
like like bugs either with Scala C with

00:26:20,029 --> 00:26:23,840
workers as people mentioned on workers

00:26:21,950 --> 00:26:25,549
since they're strictly their staple

00:26:23,840 --> 00:26:27,559
like something could be swirling some

00:26:25,549 --> 00:26:29,120
stand away Skol it to 12

00:26:27,559 --> 00:26:32,149
turns out it was squirreling some state

00:26:29,120 --> 00:26:34,039
away so like problem solved

00:26:32,149 --> 00:26:36,200
the other one was just a bug in our

00:26:34,039 --> 00:26:38,629
implementation of the skylark rules and

00:26:36,200 --> 00:26:40,700
they when they were not completely um we

00:26:38,629 --> 00:26:43,100
didn't have Sam boxing on so it's been

00:26:40,700 --> 00:26:44,990
work it works like it is reproducible we

00:26:43,100 --> 00:26:47,990
have tests it does its thing

00:26:44,990 --> 00:26:49,639
the prolyl ism is like impressive like

00:26:47,990 --> 00:26:51,289
so impressive it basically like with

00:26:49,639 --> 00:26:53,690
Scott like and like totally destroy your

00:26:51,289 --> 00:26:55,580
laptop right so you got a big repo you

00:26:53,690 --> 00:26:58,100
like Bill don't like let it go nuts like

00:26:55,580 --> 00:26:59,840
like you like you're not gonna use that

00:26:58,100 --> 00:27:02,720
machine for a good a while so that's

00:26:59,840 --> 00:27:05,240
pretty cool the Basel workers that

00:27:02,720 --> 00:27:06,499
in-memory workers huge huge impact so

00:27:05,240 --> 00:27:08,779
here's the thing with Scala is that it

00:27:06,499 --> 00:27:10,460
compiles somewhat slowly which is cool

00:27:08,779 --> 00:27:12,470
because it's got an awesome type system

00:27:10,460 --> 00:27:14,029
and it's like doing a lot for you so

00:27:12,470 --> 00:27:15,139
it's like you know you you pay more you

00:27:14,029 --> 00:27:17,269
get one

00:27:15,139 --> 00:27:19,009
the downside is in order to make this

00:27:17,269 --> 00:27:21,769
tolerable you probably want small

00:27:19,009 --> 00:27:23,690
targets so we often operate with a

00:27:21,769 --> 00:27:26,840
single file targets so you have a lot of

00:27:23,690 --> 00:27:29,720
targets so you compiled you combine that

00:27:26,840 --> 00:27:32,029
with spinning up a JVM every time you

00:27:29,720 --> 00:27:33,919
wanted to compile file now you're you're

00:27:32,029 --> 00:27:35,179
you're you know several seconds have

00:27:33,919 --> 00:27:37,279
started up on all these files that's

00:27:35,179 --> 00:27:39,470
really really disastrous so the workers

00:27:37,279 --> 00:27:41,480
for us made a much bigger impact I think

00:27:39,470 --> 00:27:43,309
even then they make for Java because

00:27:41,480 --> 00:27:44,960
then you could have these small targets

00:27:43,309 --> 00:27:46,399
and you get them hot and they're jaded

00:27:44,960 --> 00:27:47,389
and everything's great so that's been

00:27:46,399 --> 00:27:50,360
amazing

00:27:47,389 --> 00:27:52,820
we've been migrated over for like over a

00:27:50,360 --> 00:27:54,529
year like still we ask like surveys of

00:27:52,820 --> 00:27:56,179
like people like what's going what's

00:27:54,529 --> 00:27:59,330
good what's bad about like our Scala

00:27:56,179 --> 00:28:00,799
environment um like people are like well

00:27:59,330 --> 00:28:03,379
like you know everybody can complain

00:28:00,799 --> 00:28:05,149
right says plenty things wrong but that

00:28:03,379 --> 00:28:07,759
whole Basel thing is way better than

00:28:05,149 --> 00:28:09,440
maven just FYI so so that was a very

00:28:07,759 --> 00:28:11,240
clear signal that still came through

00:28:09,440 --> 00:28:13,999
even a year later so that's pretty

00:28:11,240 --> 00:28:16,610
amazing it also helped us fix them like

00:28:13,999 --> 00:28:18,559
unsafe thing like once I should probably

00:28:16,610 --> 00:28:20,720
seek help for this but like this whole

00:28:18,559 --> 00:28:23,240
like a reproducibility thing like it's

00:28:20,720 --> 00:28:25,669
like it's like a siren call like the

00:28:23,240 --> 00:28:27,619
whole world could be made reproducible

00:28:25,669 --> 00:28:30,559
and we could like achieve this

00:28:27,619 --> 00:28:31,879
impossible dream and like there's some

00:28:30,559 --> 00:28:33,169
part of me just wants like give that up

00:28:31,879 --> 00:28:34,369
because it's like we're just like never

00:28:33,169 --> 00:28:36,559
gonna get there but then I'm like but

00:28:34,369 --> 00:28:38,149
maybe we can maybe do that but like at

00:28:36,559 --> 00:28:39,500
least some of it we actually fixed we

00:28:38,149 --> 00:28:40,820
are like all the way dependencies have

00:28:39,500 --> 00:28:42,289
shot and they're they're all

00:28:40,820 --> 00:28:44,389
checked in it's like no now

00:28:42,289 --> 00:28:46,429
where's we used to have like snapshot

00:28:44,389 --> 00:28:48,200
and like someone pushes some code over

00:28:46,429 --> 00:28:50,210
here and then all the sudden production

00:28:48,200 --> 00:28:51,919
breaks in like that that's that's like

00:28:50,210 --> 00:28:52,840
how can you live your life that way it's

00:28:51,919 --> 00:28:56,600
like a bad idea

00:28:52,840 --> 00:28:58,549
so so what are the bad parts so the bad

00:28:56,600 --> 00:29:00,440
parts is in reality like users don't

00:28:58,549 --> 00:29:03,019
really want to read the basel manual so

00:29:00,440 --> 00:29:05,840
a lot of bills are carbon halted so what

00:29:03,019 --> 00:29:07,580
that generally means is because we want

00:29:05,840 --> 00:29:09,590
small targets that means it's a lot of

00:29:07,580 --> 00:29:12,259
work still so I hear

00:29:09,590 --> 00:29:14,029
I'm I was thrilled to hear of all the

00:29:12,259 --> 00:29:15,830
amazing tooling he's got a bit of bricks

00:29:14,029 --> 00:29:17,389
that he's going to be an open source

00:29:15,830 --> 00:29:19,159
saying that uh and I know Greg and

00:29:17,389 --> 00:29:19,970
people that's here working on this to to

00:29:19,159 --> 00:29:21,409
auto-generate

00:29:19,970 --> 00:29:22,820
bill targets that's something we don't

00:29:21,409 --> 00:29:24,679
have we would love to have that that

00:29:22,820 --> 00:29:26,269
would be amazing

00:29:24,679 --> 00:29:28,759
the next thing it's kind of very related

00:29:26,269 --> 00:29:30,470
to that Scala is a slow compiler to get

00:29:28,759 --> 00:29:32,059
good performance we have to have really

00:29:30,470 --> 00:29:33,289
small targets so that means again it's a

00:29:32,059 --> 00:29:35,629
lot of work it's like you write your

00:29:33,289 --> 00:29:36,980
code twice you define your imports in

00:29:35,629 --> 00:29:38,539
your file and you have to go and then

00:29:36,980 --> 00:29:40,429
write this manual thing over here of

00:29:38,539 --> 00:29:41,809
course you don't have to do that if you

00:29:40,429 --> 00:29:43,580
just throw everything in a giant built

00:29:41,809 --> 00:29:45,049
target and then the build performance

00:29:43,580 --> 00:29:47,299
goes to but you're kind of

00:29:45,049 --> 00:29:49,460
incentivizing our users to do that

00:29:47,299 --> 00:29:52,490
because it's so manual so that's not

00:29:49,460 --> 00:29:54,590
very good then the next thing that's

00:29:52,490 --> 00:29:56,509
painful for us we haven't turned on what

00:29:54,590 --> 00:29:58,580
Wix has been working on with the script

00:29:56,509 --> 00:30:00,470
dependencies if you don't have stricter

00:29:58,580 --> 00:30:02,600
penalties you have a tendency to add

00:30:00,470 --> 00:30:04,129
dependencies but never delete them like

00:30:02,600 --> 00:30:06,049
you can't compile your code if you don't

00:30:04,129 --> 00:30:07,879
have the property tendencies but if you

00:30:06,049 --> 00:30:10,309
have extra dependencies you can just

00:30:07,879 --> 00:30:11,659
have those all day at the end of the day

00:30:10,309 --> 00:30:13,519
if you keep doing that you linearize

00:30:11,659 --> 00:30:15,259
your build and you like or killing your

00:30:13,519 --> 00:30:17,629
parallelism so that we see in a little

00:30:15,259 --> 00:30:18,820
of that so left to its own devices the

00:30:17,629 --> 00:30:20,570
bill tends to just slow down

00:30:18,820 --> 00:30:25,159
automatically because it gets more and

00:30:20,570 --> 00:30:27,169
more linear let's see there's a the main

00:30:25,159 --> 00:30:28,940
compiler for scholars zinc compiler we

00:30:27,169 --> 00:30:30,769
don't use it well I wouldn't say the

00:30:28,940 --> 00:30:33,769
main compiler the main compiler back in

00:30:30,769 --> 00:30:35,899
used in SBT is the zinc compiler we

00:30:33,769 --> 00:30:38,059
don't use that one because it is super

00:30:35,899 --> 00:30:41,000
stateful so it's like keeping all this

00:30:38,059 --> 00:30:43,490
state till I try to minimize rebuilds

00:30:41,000 --> 00:30:45,500
and interact like fusing that with

00:30:43,490 --> 00:30:47,690
Basil's model hasn't really worked very

00:30:45,500 --> 00:30:49,399
well so we just use Scala C allocated a

00:30:47,690 --> 00:30:51,830
new one which is just like some JVM

00:30:49,399 --> 00:30:53,269
program we ran it on the code and then

00:30:51,830 --> 00:30:54,920
throw it away and garbage collected and

00:30:53,269 --> 00:30:56,600
as long as they're not mutating any

00:30:54,920 --> 00:30:58,640
static variable somewhere that should be

00:30:56,600 --> 00:31:00,680
safe spoiler alert

00:30:58,640 --> 00:31:05,810
212 they started meeting some static

00:31:00,680 --> 00:31:07,070
variable somewhere but anyways um so the

00:31:05,810 --> 00:31:09,740
last pay point is that we can't publish

00:31:07,070 --> 00:31:11,390
to maven central we haven't tried to

00:31:09,740 --> 00:31:13,460
salt and shave that yak we shaved a

00:31:11,390 --> 00:31:16,220
bunch of other yaks and like only some

00:31:13,460 --> 00:31:18,320
of the yaks deep that we can go and so

00:31:16,220 --> 00:31:20,210
as a result of that we still use SBT in

00:31:18,320 --> 00:31:22,490
places where we open source code or word

00:31:20,210 --> 00:31:24,470
plan to open source it unless it's like

00:31:22,490 --> 00:31:27,530
totally basil related we do have a basil

00:31:24,470 --> 00:31:29,330
tooling project it generates is some of

00:31:27,530 --> 00:31:32,180
the third-party generation that it's I

00:31:29,330 --> 00:31:33,440
mentioned site known I don't know if

00:31:32,180 --> 00:31:35,600
you've noticed this like everybody

00:31:33,440 --> 00:31:37,220
working in the Scala basil space seems

00:31:35,600 --> 00:31:39,470
to be solving the exact same set of like

00:31:37,220 --> 00:31:41,240
five problems which is kind of sad but

00:31:39,470 --> 00:31:45,110
like I guess you've all solved them

00:31:41,240 --> 00:31:46,970
differently so what are like the really

00:31:45,110 --> 00:31:49,040
painful parts I just got to give you

00:31:46,970 --> 00:31:50,390
some some headlines like what were the

00:31:49,040 --> 00:31:52,700
things that we didn't really like so

00:31:50,390 --> 00:31:54,920
external repositories and dependencies

00:31:52,700 --> 00:31:56,420
like it's kind of a bummer because it's

00:31:54,920 --> 00:31:58,760
kind of like it's really hard to like

00:31:56,420 --> 00:32:00,170
sell this thing to like a Googler like

00:31:58,760 --> 00:32:01,730
they have to like basically have not

00:32:00,170 --> 00:32:03,080
been at Google for very long because

00:32:01,730 --> 00:32:05,540
their usual answer is like just like

00:32:03,080 --> 00:32:06,950
don't do that like don't don't have like

00:32:05,540 --> 00:32:08,900
why don't you just like I don't know

00:32:06,950 --> 00:32:10,970
rewrite everything or like vendor

00:32:08,900 --> 00:32:13,040
everything I don't know don't do that so

00:32:10,970 --> 00:32:14,570
even if you try to like tell them why

00:32:13,040 --> 00:32:18,260
it's like it's really it's really hard

00:32:14,570 --> 00:32:20,720
conversation so we do have a tool that

00:32:18,260 --> 00:32:23,780
works that's relatively happy with it um

00:32:20,720 --> 00:32:25,760
it's there's a link there um you like

00:32:23,780 --> 00:32:27,710
specify your top level divinities and

00:32:25,760 --> 00:32:30,140
then it generates the transitive

00:32:27,710 --> 00:32:32,750
dependencies we check those in is built

00:32:30,140 --> 00:32:34,550
files and Shaw's that like the Shaw's of

00:32:32,750 --> 00:32:36,410
the jars and that's worked pretty well

00:32:34,550 --> 00:32:38,810
some other people are contributing to it

00:32:36,410 --> 00:32:41,240
it seems to be good um hopefully we can

00:32:38,810 --> 00:32:43,970
kind of take that or other tools and

00:32:41,240 --> 00:32:45,500
like make the one true like JVM like

00:32:43,970 --> 00:32:46,730
transitive dependency generator that

00:32:45,500 --> 00:32:49,940
would be pretty cool and not keep

00:32:46,730 --> 00:32:51,590
rebuilding Scala I don't know if I

00:32:49,940 --> 00:32:54,620
mentioned this but this compiler is a

00:32:51,590 --> 00:32:56,720
little slow so we really hope that like

00:32:54,620 --> 00:32:58,670
this build farm like story would be like

00:32:56,720 --> 00:33:00,740
really reliable and it would work with

00:32:58,670 --> 00:33:03,590
like skylark rules by now and it really

00:33:00,740 --> 00:33:05,570
isn't quite there like we we have we're

00:33:03,590 --> 00:33:08,000
still having some bugs when we use that

00:33:05,570 --> 00:33:11,170
the worker API with remote

00:33:08,000 --> 00:33:14,060
so hopefully we'll get this figured out

00:33:11,170 --> 00:33:15,800
this guy like api's are pretty unstable

00:33:14,060 --> 00:33:17,180
like they change like quite a lot and

00:33:15,800 --> 00:33:18,770
it's like a little bit difficult like

00:33:17,180 --> 00:33:20,780
opaque communication is the wind they

00:33:18,770 --> 00:33:22,880
might change and how they change so and

00:33:20,780 --> 00:33:25,160
we're starting to get some hacks in the

00:33:22,880 --> 00:33:27,890
scholar rules it does the kind of like

00:33:25,160 --> 00:33:29,660
like you know dynamic typing thing of

00:33:27,890 --> 00:33:32,030
checking to see if a method exists and

00:33:29,660 --> 00:33:34,040
if it does we like we go this path and

00:33:32,030 --> 00:33:35,600
if it doesn't we go another path because

00:33:34,040 --> 00:33:37,940
we want to be able to support something

00:33:35,600 --> 00:33:40,400
other than the very latest basel because

00:33:37,940 --> 00:33:41,780
not all orgs like can drop what they're

00:33:40,400 --> 00:33:44,090
doing and like port their whole build

00:33:41,780 --> 00:33:46,190
over to like you know basil zero seven

00:33:44,090 --> 00:33:47,780
zero eight immediately and so especially

00:33:46,190 --> 00:33:49,970
for a rule that is now being used by

00:33:47,780 --> 00:33:51,200
many people all I feel Scala is we need

00:33:49,970 --> 00:33:53,630
to be out of support a little bit of a

00:33:51,200 --> 00:33:55,430
window of things so like it would be

00:33:53,630 --> 00:33:56,870
nice I mean it is good to get things in

00:33:55,430 --> 00:33:59,450
it would be cool if we can make sure to

00:33:56,870 --> 00:34:01,430
add API is in a way that's like I'm easy

00:33:59,450 --> 00:34:03,910
to make sure that we have some backwards

00:34:01,430 --> 00:34:07,490
compatibility story for a little while

00:34:03,910 --> 00:34:10,700
last thing one one real bummer about

00:34:07,490 --> 00:34:13,490
about about basil is that it has this

00:34:10,700 --> 00:34:15,290
notion of like interface and then code

00:34:13,490 --> 00:34:17,480
right which is like pretty cool like it

00:34:15,290 --> 00:34:18,890
makes sense but not all compiler authors

00:34:17,480 --> 00:34:20,810
were like yeah I should write my tool

00:34:18,890 --> 00:34:22,160
that way and this cause he doesn't work

00:34:20,810 --> 00:34:25,130
that way like Java doesn't have

00:34:22,160 --> 00:34:26,960
interface files like basil solves this

00:34:25,130 --> 00:34:28,700
in Java by this little tool called a jar

00:34:26,960 --> 00:34:30,650
which is pretty cool it sucks all the

00:34:28,700 --> 00:34:33,170
code out of a jar and it just gives you

00:34:30,650 --> 00:34:35,150
a jar with the type signatures intact

00:34:33,170 --> 00:34:37,880
and it kind of makes you have almost

00:34:35,150 --> 00:34:40,220
like an interface file in Java which

00:34:37,880 --> 00:34:42,050
sounds pretty cool but the problem is it

00:34:40,220 --> 00:34:44,270
doesn't have anything like this and we

00:34:42,050 --> 00:34:45,920
can use our jar but because Scala has a

00:34:44,270 --> 00:34:48,410
much more powerful type system than Java

00:34:45,920 --> 00:34:51,560
it does that by embedding annotations in

00:34:48,410 --> 00:34:53,420
the jars that will describe those extra

00:34:51,560 --> 00:34:56,570
type that extra type information

00:34:53,420 --> 00:34:58,610
now I jar doesn't strip those out it

00:34:56,570 --> 00:35:01,190
leaves them in but a lot of those type

00:34:58,610 --> 00:35:02,840
system changes are not public API things

00:35:01,190 --> 00:35:04,730
so this means when you're working in

00:35:02,840 --> 00:35:07,250
Scala and you make some change to

00:35:04,730 --> 00:35:08,990
private API that has some fancy type or

00:35:07,250 --> 00:35:10,790
not even that fancy type like basically

00:35:08,990 --> 00:35:12,800
I mean any Scala fans anything Scott

00:35:10,790 --> 00:35:14,960
type um you could trigger a

00:35:12,800 --> 00:35:17,150
recompilation that you really shouldn't

00:35:14,960 --> 00:35:18,499
be doing and the only way

00:35:17,150 --> 00:35:20,420
we see that we can deal with this is

00:35:18,499 --> 00:35:22,789
basically either totally reengineer the

00:35:20,420 --> 00:35:25,039
I jar tool totally understand it skal

00:35:22,789 --> 00:35:26,450
see which is a total like like that is

00:35:25,039 --> 00:35:31,249
not fun like that's going to be a lot of

00:35:26,450 --> 00:35:34,660
work or if we could possibly like allow

00:35:31,249 --> 00:35:37,220
like buck does away possibly for for

00:35:34,660 --> 00:35:39,200
basil to have configurable ways of

00:35:37,220 --> 00:35:42,430
computing these hash keys I'll talk

00:35:39,200 --> 00:35:44,690
about more that later lightning thoughts

00:35:42,430 --> 00:35:46,220
which I think we have a session on it

00:35:44,690 --> 00:35:48,499
doesn't work kind of as great as

00:35:46,220 --> 00:35:51,589
everybody talks about because like the

00:35:48,499 --> 00:35:54,109
problem is yeah like you can tell you

00:35:51,589 --> 00:35:57,170
can cache tests but you have to go find

00:35:54,109 --> 00:35:58,549
the exact CI that ran your thing to do

00:35:57,170 --> 00:35:59,839
it if you're like sitting at home on

00:35:58,549 --> 00:36:02,240
your one machine and there's only one

00:35:59,839 --> 00:36:04,700
like yeah cache was gonna work great but

00:36:02,240 --> 00:36:07,160
we'd have to build some system to like I

00:36:04,700 --> 00:36:09,289
don't know like hash the the branch name

00:36:07,160 --> 00:36:10,700
and the author and like dispatch it to

00:36:09,289 --> 00:36:12,380
the right and like I don't you know

00:36:10,700 --> 00:36:17,829
ain't nobody got time for that

00:36:12,380 --> 00:36:20,150
so we didn't do that anyway yeah

00:36:17,829 --> 00:36:21,769
hopefully we will hopefully we'll get

00:36:20,150 --> 00:36:23,180
there and that'll be great so I don't

00:36:21,769 --> 00:36:24,380
know we're really optimistic about like

00:36:23,180 --> 00:36:26,509
basil we're still kind pretty much all

00:36:24,380 --> 00:36:28,249
in it's pretty much like the the the

00:36:26,509 --> 00:36:30,200
main candidate for a one true build

00:36:28,249 --> 00:36:31,970
system at stripe we haven't sold the

00:36:30,200 --> 00:36:33,589
Ruby folks that they need a built system

00:36:31,970 --> 00:36:34,519
though we heard some talks earlier today

00:36:33,589 --> 00:36:35,720
that you have like that

00:36:34,519 --> 00:36:39,079
and hopefully that's going to happen

00:36:35,720 --> 00:36:41,359
like we we did sell them amazing one of

00:36:39,079 --> 00:36:43,009
my colleagues in the back there John who

00:36:41,359 --> 00:36:44,569
apparently we've sold them on it so

00:36:43,009 --> 00:36:46,369
that's going to be great so there's

00:36:44,569 --> 00:36:48,349
gonna be one one big thing we um we use

00:36:46,369 --> 00:36:50,859
a lot of Python machinery because like

00:36:48,349 --> 00:36:54,200
data scientists just love the Python and

00:36:50,859 --> 00:36:55,849
we're starting to basil defy that we're

00:36:54,200 --> 00:36:58,400
still seeing some pain just want to like

00:36:55,849 --> 00:37:00,589
plug for anybody at Google or elsewhere

00:36:58,400 --> 00:37:02,539
who is like wants to make like like the

00:37:00,589 --> 00:37:04,609
Python stuff reproducible that would be

00:37:02,539 --> 00:37:06,410
amazing because like like a a for

00:37:04,609 --> 00:37:07,910
mentioned OCD about reproducibility I

00:37:06,410 --> 00:37:10,130
just like don't even want to like check

00:37:07,910 --> 00:37:12,019
in royal Python until we can get them

00:37:10,130 --> 00:37:13,460
reproducible like I don't know if I'll

00:37:12,019 --> 00:37:17,619
sleep at night so we're just not doing

00:37:13,460 --> 00:37:17,619

YouTube URL: https://www.youtube.com/watch?v=wCkqtM44BvU


