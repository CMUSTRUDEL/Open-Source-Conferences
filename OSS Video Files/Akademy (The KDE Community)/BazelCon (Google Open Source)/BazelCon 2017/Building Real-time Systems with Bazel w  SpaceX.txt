Title: Building Real-time Systems with Bazel w  SpaceX
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Matt Sachtler and Patrick Conrad (SpaceX)
Captions: 
	00:00:01,010 --> 00:00:05,730
so my name is Patrick Conrad I'm a

00:00:03,840 --> 00:00:07,950
flight software engineer at SpaceX I've

00:00:05,730 --> 00:00:11,010
been at SpaceX for two years and I'm a

00:00:07,950 --> 00:00:12,960
member of the simulation team my name is

00:00:11,010 --> 00:00:14,610
Matt Sackler I'm also a flight software

00:00:12,960 --> 00:00:16,710
engineer at SpaceX coming from the

00:00:14,610 --> 00:00:18,779
vehicle side so I've worked on Falcon

00:00:16,710 --> 00:00:21,240
and Dragon most of my career at SpaceX

00:00:18,779 --> 00:00:24,180
has been spent as the the lead technical

00:00:21,240 --> 00:00:26,070
person on the Falcon software team until

00:00:24,180 --> 00:00:28,590
recently when kind of moved over to go

00:00:26,070 --> 00:00:30,210
work on Basel stuff but yeah I'm gonna

00:00:28,590 --> 00:00:31,679
let Patrick give the overview and then

00:00:30,210 --> 00:00:33,719
I'll hop in a little bit later on yeah

00:00:31,679 --> 00:00:37,230
so over the last year we have been

00:00:33,719 --> 00:00:39,899
converting two of our major build

00:00:37,230 --> 00:00:41,910
systems over to be done with Basel

00:00:39,899 --> 00:00:44,309
instead and essentially what we're gonna

00:00:41,910 --> 00:00:47,340
do today is tell the story of that work

00:00:44,309 --> 00:00:49,530
so I'm gonna start off by giving an

00:00:47,340 --> 00:00:52,020
overview of SpaceX and software at

00:00:49,530 --> 00:00:56,100
SpaceX with a lot of gratuitous pictures

00:00:52,020 --> 00:00:57,780
of rockets and then we're gonna talk a

00:00:56,100 --> 00:00:59,489
little bit about why we found ourselves

00:00:57,780 --> 00:01:01,109
wanting to make the conversion toupees

00:00:59,489 --> 00:01:02,550
all right and I'm gonna hand it over to

00:01:01,109 --> 00:01:04,589
Matt and he's gonna give you details

00:01:02,550 --> 00:01:06,180
about some of what that process looked

00:01:04,589 --> 00:01:07,710
like for us some of what we learned

00:01:06,180 --> 00:01:11,310
along the way and some what we're trying

00:01:07,710 --> 00:01:13,500
to go do with this in the future so most

00:01:11,310 --> 00:01:15,390
of you probably know who SpaceX is we

00:01:13,500 --> 00:01:17,670
are a rocket company we were founded in

00:01:15,390 --> 00:01:21,000
2002 it actually lines up fairly nicely

00:01:17,670 --> 00:01:23,640
with the history of the basil and our

00:01:21,000 --> 00:01:25,619
goal is to revolutionize the access to

00:01:23,640 --> 00:01:27,659
space and to bring rocket cost down

00:01:25,619 --> 00:01:30,150
dramatically and ultimately to make

00:01:27,659 --> 00:01:31,710
humans and interplanetary species since

00:01:30,150 --> 00:01:33,000
then the company has grown a lot and

00:01:31,710 --> 00:01:36,420
that's going to be an important part of

00:01:33,000 --> 00:01:38,430
our story the fleet that we fly today is

00:01:36,420 --> 00:01:40,110
principally the Falcon 9 rocket which we

00:01:38,430 --> 00:01:42,360
use for all of our launches and the

00:01:40,110 --> 00:01:44,369
dragon space capsule which flies cargo

00:01:42,360 --> 00:01:46,049
food supplies and science equipment to

00:01:44,369 --> 00:01:47,970
the International Space Station all

00:01:46,049 --> 00:01:50,009
that's done under contract to NASA and

00:01:47,970 --> 00:01:51,450
one of the really interesting parts

00:01:50,009 --> 00:01:53,369
about Dragon is that it can not only

00:01:51,450 --> 00:01:55,380
take stuff up but it can bring science

00:01:53,369 --> 00:01:57,420
equipment back down for later study on

00:01:55,380 --> 00:01:59,159
the ground and from NASA's perspective

00:01:57,420 --> 00:02:01,649
that's a really important capability I

00:01:59,159 --> 00:02:04,079
also have a picture here of Falcon Heavy

00:02:01,649 --> 00:02:05,790
which is should soon become the newest

00:02:04,079 --> 00:02:07,110
addition to our fleet so instead of

00:02:05,790 --> 00:02:09,200
having a single first stage you have

00:02:07,110 --> 00:02:11,970
three first stages which dramatically

00:02:09,200 --> 00:02:13,750
increases the amount of cargo that you

00:02:11,970 --> 00:02:16,150
can lift the

00:02:13,750 --> 00:02:18,130
should scale or should fly fairly soon

00:02:16,150 --> 00:02:20,200
and the scale of this thing is

00:02:18,130 --> 00:02:22,480
incredible and we are really excited to

00:02:20,200 --> 00:02:24,760
see this thing fly it's been a long time

00:02:22,480 --> 00:02:26,800
coming as anybody who follows SpaceX

00:02:24,760 --> 00:02:28,600
knows from a software perspective

00:02:26,800 --> 00:02:31,300
something is very interesting is that

00:02:28,600 --> 00:02:32,860
the Falcon and Dragon vehicles are very

00:02:31,300 --> 00:02:35,680
different one is a rocket one is a

00:02:32,860 --> 00:02:37,750
spacecraft but they from a software

00:02:35,680 --> 00:02:39,310
standpoint they share an enormous amount

00:02:37,750 --> 00:02:42,190
of common infrastructure and they are

00:02:39,310 --> 00:02:44,680
built from a common code base so the

00:02:42,190 --> 00:02:47,260
next thing I want to do is put up a

00:02:44,680 --> 00:02:49,510
recap of one of the most recent dragon

00:02:47,260 --> 00:02:51,700
missions but the thing I want you to

00:02:49,510 --> 00:02:54,610
watch for as you as we go through the

00:02:51,700 --> 00:02:57,280
video is that everything that you see

00:02:54,610 --> 00:02:59,080
everything that the rocket does there

00:02:57,280 --> 00:03:00,810
was software involved in making that

00:02:59,080 --> 00:03:04,930
happen

00:03:00,810 --> 00:03:06,760
so during launch and power descent the

00:03:04,930 --> 00:03:08,410
vehicle is processing a very large

00:03:06,760 --> 00:03:11,290
amount of data in order to make control

00:03:08,410 --> 00:03:13,030
decisions to steer the the vehicle to

00:03:11,290 --> 00:03:14,470
look for faults and otherwise do

00:03:13,030 --> 00:03:17,230
everything required to maintain stable

00:03:14,470 --> 00:03:19,180
flight you have the moment of separation

00:03:17,230 --> 00:03:20,650
of the first stage in the second stage

00:03:19,180 --> 00:03:22,330
which is this really interesting moment

00:03:20,650 --> 00:03:24,850
because you go from having one vehicle

00:03:22,330 --> 00:03:26,920
to having two distinct vehicles the

00:03:24,850 --> 00:03:29,500
first stage executed a flip to head back

00:03:26,920 --> 00:03:31,810
towards the launch site and execute a

00:03:29,500 --> 00:03:34,150
reentry burn to slow the descent through

00:03:31,810 --> 00:03:35,680
the atmosphere enters most of the

00:03:34,150 --> 00:03:37,840
atmosphere under control of the grid

00:03:35,680 --> 00:03:41,049
fins which are up at the top establishes

00:03:37,840 --> 00:03:43,510
itself over the landing pad executes the

00:03:41,049 --> 00:03:45,430
landing Byrne deploys the legs and comes

00:03:43,510 --> 00:03:47,709
down for a soft touchdown and our entire

00:03:45,430 --> 00:03:49,810
building Cheers when this happens still

00:03:47,709 --> 00:03:53,200
to this day and then you have the

00:03:49,810 --> 00:03:55,000
deployment of Dragon and so now dragon

00:03:53,200 --> 00:03:57,190
is is in free flight deploys these solar

00:03:55,000 --> 00:03:58,329
panels has power generation and is now

00:03:57,190 --> 00:04:04,810
well on its way to the International

00:03:58,329 --> 00:04:06,820
Space Station looking or the biggest

00:04:04,810 --> 00:04:09,610
story for the company this year has been

00:04:06,820 --> 00:04:11,829
scale and reusability to date we've had

00:04:09,610 --> 00:04:14,829
19 missions where the first stage

00:04:11,829 --> 00:04:16,900
successfully landed on land and I'm sure

00:04:14,829 --> 00:04:18,459
everybody has probably seen some of the

00:04:16,900 --> 00:04:21,549
footage that we've gotten from that and

00:04:18,459 --> 00:04:23,410
then three of those missions were

00:04:21,549 --> 00:04:25,720
actually ones where the first stage had

00:04:23,410 --> 00:04:26,510
already flown previously and all of

00:04:25,720 --> 00:04:28,960
those were

00:04:26,510 --> 00:04:31,220
again successfully for the second time

00:04:28,960 --> 00:04:33,110
probably the lesser-known story about

00:04:31,220 --> 00:04:35,450
reusability for us is that we've also

00:04:33,110 --> 00:04:37,340
reflow gnat dragon capsule for the first

00:04:35,450 --> 00:04:40,850
time that happened earlier this year and

00:04:37,340 --> 00:04:42,500
so one of the founding missions of the

00:04:40,850 --> 00:04:44,750
company was that if you don't have to

00:04:42,500 --> 00:04:46,430
build a new rocket every time space

00:04:44,750 --> 00:04:49,550
travel would be a whole lot cheaper and

00:04:46,430 --> 00:04:53,050
this year has really started to show the

00:04:49,550 --> 00:04:56,000
reality of that vision looking forward

00:04:53,050 --> 00:04:58,580
one of our the major development efforts

00:04:56,000 --> 00:05:00,700
at SpaceX is the dragon to space capsule

00:04:58,580 --> 00:05:02,930
this is being developed under the

00:05:00,700 --> 00:05:05,150
Commercial Crew program under contract

00:05:02,930 --> 00:05:07,010
to NASA so this is going to return to

00:05:05,150 --> 00:05:09,560
the United States the ability to launch

00:05:07,010 --> 00:05:11,480
our own astronauts into space from a

00:05:09,560 --> 00:05:13,070
software perspective there are a whole

00:05:11,480 --> 00:05:14,620
bunch of interesting challenges that

00:05:13,070 --> 00:05:19,940
come when you actually have to fly

00:05:14,620 --> 00:05:22,040
people inside the vehicle and it's clear

00:05:19,940 --> 00:05:23,330
that when you watch videos of our

00:05:22,040 --> 00:05:25,220
launches we have a Mission Control

00:05:23,330 --> 00:05:26,960
there's a lot of user interfaces that we

00:05:25,220 --> 00:05:29,420
have to build to support the ground side

00:05:26,960 --> 00:05:30,770
operations and all the operators but

00:05:29,420 --> 00:05:31,190
when you have astronauts inside the

00:05:30,770 --> 00:05:34,070
capsule

00:05:31,190 --> 00:05:36,440
they have interfaces that they will need

00:05:34,070 --> 00:05:38,270
and so we have an entirely new team

00:05:36,440 --> 00:05:40,040
that's building the kinds of interfaces

00:05:38,270 --> 00:05:42,800
the astronauts will need and you have to

00:05:40,040 --> 00:05:44,810
deal with things like having interfaces

00:05:42,800 --> 00:05:46,550
that work when you're in gloves for a

00:05:44,810 --> 00:05:50,000
spacesuit and other kinds of related

00:05:46,550 --> 00:05:51,140
problems that that are very different

00:05:50,000 --> 00:05:52,880
than what happens when you have people

00:05:51,140 --> 00:05:55,760
like consoles in a Mission Control

00:05:52,880 --> 00:05:57,110
setting looking further forward the

00:05:55,760 --> 00:05:58,670
company has begun talking about our

00:05:57,110 --> 00:06:00,440
plans for Mars and this is something

00:05:58,670 --> 00:06:04,070
also that the software organization is

00:06:00,440 --> 00:06:05,600
is beginning to think about so if this

00:06:04,070 --> 00:06:07,280
is all the really cool stuff we get to

00:06:05,600 --> 00:06:10,460
do at SpaceX I have to give the

00:06:07,280 --> 00:06:12,110
disclaimer that unfortunately the kind

00:06:10,460 --> 00:06:13,370
of technology that we work on is heavily

00:06:12,110 --> 00:06:15,590
regulated by the United States

00:06:13,370 --> 00:06:16,970
government so contributions to an

00:06:15,590 --> 00:06:19,400
open-source project like this are

00:06:16,970 --> 00:06:21,470
difficult for us we have to do a lot of

00:06:19,400 --> 00:06:23,960
legal vetting that we're not revealing

00:06:21,470 --> 00:06:25,970
things that are that are regulated but

00:06:23,960 --> 00:06:27,950
we are here we are trying to participate

00:06:25,970 --> 00:06:29,450
in this community as best we can we do

00:06:27,950 --> 00:06:31,280
have a github page and that has been

00:06:29,450 --> 00:06:33,920
posting to the Basel project using the

00:06:31,280 --> 00:06:35,150
handle that I have here it also means

00:06:33,920 --> 00:06:37,550
that today we're not going to be taking

00:06:35,150 --> 00:06:39,110
any questions from the stage but we will

00:06:37,550 --> 00:06:40,280
be here and we would welcome questions

00:06:39,110 --> 00:06:44,240
we'll do our best to

00:06:40,280 --> 00:06:45,889
tell you as much as we can so SpaceX I

00:06:44,240 --> 00:06:48,639
think is right is best known for our

00:06:45,889 --> 00:06:51,350
rockets but as I mentioned earlier

00:06:48,639 --> 00:06:54,500
everything that happens on the vehicle

00:06:51,350 --> 00:06:56,990
is has software that's involved with it

00:06:54,500 --> 00:06:59,240
and so we actually have a significant

00:06:56,990 --> 00:07:01,250
software organization that builds the

00:06:59,240 --> 00:07:04,669
tools that we need to design and operate

00:07:01,250 --> 00:07:06,020
and run these vehicles and so I want to

00:07:04,669 --> 00:07:08,080
give a little bit of a picture of what

00:07:06,020 --> 00:07:10,460
that's like so

00:07:08,080 --> 00:07:13,100
aerospace systems modern aerospace

00:07:10,460 --> 00:07:14,990
systems are very complicated and they

00:07:13,100 --> 00:07:16,970
have a lot of very very highly

00:07:14,990 --> 00:07:18,410
integrated systems so that not only

00:07:16,970 --> 00:07:22,460
means that you have the structure you

00:07:18,410 --> 00:07:24,050
have the the metal of the vehicle and

00:07:22,460 --> 00:07:26,390
you have integration with the propulsion

00:07:24,050 --> 00:07:28,550
systems and with the avionics but also

00:07:26,390 --> 00:07:31,010
the hardware is built to be controlled

00:07:28,550 --> 00:07:33,770
by our software and our software has

00:07:31,010 --> 00:07:35,479
architectural decisions that go with the

00:07:33,770 --> 00:07:37,340
hardware that it's intended to fly on

00:07:35,479 --> 00:07:39,889
and that means that our flight software

00:07:37,340 --> 00:07:42,050
engineers have to understand in great

00:07:39,889 --> 00:07:43,970
detail the physics of the problem and

00:07:42,050 --> 00:07:46,970
how the vehicle is actually built and

00:07:43,970 --> 00:07:49,760
how the the hardware will respond to the

00:07:46,970 --> 00:07:51,740
actual actual situations these systems

00:07:49,760 --> 00:07:53,479
are incredibly expensive not only in

00:07:51,740 --> 00:07:55,580
terms of the financial aspect that the

00:07:53,479 --> 00:07:56,990
that the rockets themselves are

00:07:55,580 --> 00:07:59,150
expensive and the payloads that we fly

00:07:56,990 --> 00:08:01,010
for customers are expensive but whenever

00:07:59,150 --> 00:08:02,960
we have astronauts involved these are

00:08:01,010 --> 00:08:04,610
life safety critical systems and that

00:08:02,960 --> 00:08:06,680
adds a lot of challenges and a lot of

00:08:04,610 --> 00:08:10,760
rigor to our process that we always have

00:08:06,680 --> 00:08:12,860
to be concerned about the basic idea

00:08:10,760 --> 00:08:14,810
then is that you have to understand as

00:08:12,860 --> 00:08:17,000
much of these systems as you possibly

00:08:14,810 --> 00:08:19,580
can and then that is the only way to

00:08:17,000 --> 00:08:23,270
design and build them safely and to

00:08:19,580 --> 00:08:25,190
operate them as as intended now in the

00:08:23,270 --> 00:08:27,410
software world everyone knows that you

00:08:25,190 --> 00:08:29,120
have to have staging environments to

00:08:27,410 --> 00:08:31,000
test your software in that are as much

00:08:29,120 --> 00:08:33,500
like your production system as you can

00:08:31,000 --> 00:08:36,890
but when your production environment is

00:08:33,500 --> 00:08:38,990
being a rocket flying at thousands of

00:08:36,890 --> 00:08:41,810
meters per second that adds a whole

00:08:38,990 --> 00:08:44,089
bunch of interesting challenges so the

00:08:41,810 --> 00:08:45,770
aerospace world in general has a phrase

00:08:44,089 --> 00:08:48,830
for this is that you have to test like

00:08:45,770 --> 00:08:50,990
you fly and a huge portion of the

00:08:48,830 --> 00:08:52,610
company is based around in all of the

00:08:50,990 --> 00:08:54,180
different aspects of the rocket that we

00:08:52,610 --> 00:08:56,700
build and the software that we fly

00:08:54,180 --> 00:08:58,740
of executing the idea that you have to

00:08:56,700 --> 00:09:00,510
test like you fly and again that means

00:08:58,740 --> 00:09:03,300
you have to understand the system very

00:09:00,510 --> 00:09:05,430
very well so we have a significant test

00:09:03,300 --> 00:09:06,990
organization that again has to

00:09:05,430 --> 00:09:08,850
understand not only the software but

00:09:06,990 --> 00:09:10,860
also all of the hardware that it goes on

00:09:08,850 --> 00:09:12,750
to understand all of the couplings

00:09:10,860 --> 00:09:14,610
between those systems that they need to

00:09:12,750 --> 00:09:16,500
go test for so they're not just looking

00:09:14,610 --> 00:09:18,570
for software bugs they're looking for

00:09:16,500 --> 00:09:21,570
problems that will cause the mission to

00:09:18,570 --> 00:09:23,190
fail it also means that some of our test

00:09:21,570 --> 00:09:24,480
environments have to include Hardware

00:09:23,190 --> 00:09:26,279
because the hardware and the software

00:09:24,480 --> 00:09:28,459
are highly coupled you have to see that

00:09:26,279 --> 00:09:33,180
the joint system works correctly

00:09:28,459 --> 00:09:35,160
and then that also yeah so there's just

00:09:33,180 --> 00:09:37,230
an enormous amount of energy trying to

00:09:35,160 --> 00:09:39,959
have flight like environments on the

00:09:37,230 --> 00:09:42,029
ground and so that actually brings me to

00:09:39,959 --> 00:09:44,370
the two repositories that we've actually

00:09:42,029 --> 00:09:45,600
been working on the build systems for so

00:09:44,370 --> 00:09:47,730
the first is the one that my team

00:09:45,600 --> 00:09:49,860
produces which is the simulators we have

00:09:47,730 --> 00:09:52,020
high fidelity physics simulations of all

00:09:49,860 --> 00:09:55,140
of our vehicles that we use to analyze

00:09:52,020 --> 00:09:56,790
and design and test the rockets that we

00:09:55,140 --> 00:09:59,220
build and then we have the rocket

00:09:56,790 --> 00:10:01,230
repository which has all the control

00:09:59,220 --> 00:10:02,550
software for Falcon and for Dragon a

00:10:01,230 --> 00:10:04,920
whole bunch of the ground support

00:10:02,550 --> 00:10:08,220
equipment so the basic workflow then is

00:10:04,920 --> 00:10:10,110
that we do analysis in the simulation

00:10:08,220 --> 00:10:12,150
environment we use that to figure out

00:10:10,110 --> 00:10:13,500
what software we should write we go over

00:10:12,150 --> 00:10:15,540
to the rocket side you write the

00:10:13,500 --> 00:10:17,520
production flight software and then you

00:10:15,540 --> 00:10:18,810
play the two against each other in a

00:10:17,520 --> 00:10:20,040
test environment to make sure that

00:10:18,810 --> 00:10:22,350
you've actually written software that

00:10:20,040 --> 00:10:24,270
you wanted these repositories are fairly

00:10:22,350 --> 00:10:26,820
significant they are each a million

00:10:24,270 --> 00:10:29,370
lines of C++ and then of course they

00:10:26,820 --> 00:10:31,589
have the collection of scripts and tests

00:10:29,370 --> 00:10:34,050
and shell scripts and a bunch of Python

00:10:31,589 --> 00:10:36,690
that you need to pull together large

00:10:34,050 --> 00:10:38,870
functioning repositories like this the

00:10:36,690 --> 00:10:41,250
simulators run on commodity linux

00:10:38,870 --> 00:10:42,690
desktops and servers and so from a build

00:10:41,250 --> 00:10:45,209
environment they're relatively

00:10:42,690 --> 00:10:46,860
straightforward but the rocket side of

00:10:45,209 --> 00:10:49,230
things is more complicated because this

00:10:46,860 --> 00:10:51,300
is embedded software it has to run on be

00:10:49,230 --> 00:10:53,370
compiled for and then run on the

00:10:51,300 --> 00:10:55,529
collection of environments that we fly

00:10:53,370 --> 00:10:57,570
so I've got this little box here that

00:10:55,529 --> 00:10:59,190
says we have lots of platforms but it

00:10:57,570 --> 00:11:02,279
turns out we have a team of people whose

00:10:59,190 --> 00:11:04,770
job is to create the Linux flavor that

00:11:02,279 --> 00:11:06,720
we fly on our vehicles to make sure that

00:11:04,770 --> 00:11:08,010
it's configured correctly and to provide

00:11:06,720 --> 00:11:09,570
us libraries and tool

00:11:08,010 --> 00:11:11,790
chains and everything that we need to

00:11:09,570 --> 00:11:14,100
have a stable really well understood

00:11:11,790 --> 00:11:17,310
environment to run the rocket software

00:11:14,100 --> 00:11:19,170
on and so when you take all of this

00:11:17,310 --> 00:11:20,970
together the size of the repositories

00:11:19,170 --> 00:11:23,010
the complexity of the test suites and

00:11:20,970 --> 00:11:25,680
all of the complexity of the run

00:11:23,010 --> 00:11:27,840
platforms the build systems for these

00:11:25,680 --> 00:11:31,530
two repositories end up being fairly

00:11:27,840 --> 00:11:33,870
complicated so when you look back at the

00:11:31,530 --> 00:11:36,090
history of the company the build systems

00:11:33,870 --> 00:11:37,290
for these two repositories go back to

00:11:36,090 --> 00:11:38,700
the very beginning and these are

00:11:37,290 --> 00:11:41,910
actually two of the very oldest

00:11:38,700 --> 00:11:44,190
repositories in the entire company the

00:11:41,910 --> 00:11:46,200
build systems have grown and evolved

00:11:44,190 --> 00:11:48,600
with us over the years through enormous

00:11:46,200 --> 00:11:50,670
increases in the number of developers in

00:11:48,600 --> 00:11:53,490
the size and complexity of our code base

00:11:50,670 --> 00:11:56,820
and also in the scale of our continuous

00:11:53,490 --> 00:11:59,070
integration systems which by the way got

00:11:56,820 --> 00:12:01,230
forked from just somebody wrote a script

00:11:59,070 --> 00:12:03,600
to run the build to now we have an

00:12:01,230 --> 00:12:05,670
entire team that manages our continuous

00:12:03,600 --> 00:12:07,590
integration our data analysis systems

00:12:05,670 --> 00:12:09,120
all of our deployment tools all that

00:12:07,590 --> 00:12:11,040
kind of stuff there's again there's a

00:12:09,120 --> 00:12:12,900
lot of complexity that has built built

00:12:11,040 --> 00:12:15,150
up over the years but we were still

00:12:12,900 --> 00:12:17,190
finding that the the make system that we

00:12:15,150 --> 00:12:19,890
had built was letting us down and in

00:12:17,190 --> 00:12:21,300
particular you have users who were

00:12:19,890 --> 00:12:22,590
finding themselves just needing to get

00:12:21,300 --> 00:12:23,910
their daily work done in their

00:12:22,590 --> 00:12:26,400
development tasks and they're fighting

00:12:23,910 --> 00:12:29,600
the system or working around it and so

00:12:26,400 --> 00:12:32,220
we needed something to to do better so

00:12:29,600 --> 00:12:35,070
we started looking around fairly widely

00:12:32,220 --> 00:12:36,900
at what we might do to go improve the

00:12:35,070 --> 00:12:39,150
situation and it it pretty quickly

00:12:36,900 --> 00:12:43,140
became apparent that we were not looking

00:12:39,150 --> 00:12:45,150
at at a small bug fix we at least needed

00:12:43,140 --> 00:12:47,760
to think about maybe doing a big rewrite

00:12:45,150 --> 00:12:49,500
or rewrite from scratch we looked at a

00:12:47,760 --> 00:12:50,850
whole bunch of technology platforms that

00:12:49,500 --> 00:12:52,650
we could use to try to build the

00:12:50,850 --> 00:12:54,810
solution and obviously because we're

00:12:52,650 --> 00:12:56,250
here today we ended up choosing basil as

00:12:54,810 --> 00:12:59,310
the platform that we were going to use

00:12:56,250 --> 00:13:01,500
and the key for us here was the quality

00:12:59,310 --> 00:13:03,690
of the dependency tracking that basil

00:13:01,500 --> 00:13:06,300
provides because when we look at our

00:13:03,690 --> 00:13:08,730
ecosystems they are absolutely full of

00:13:06,300 --> 00:13:10,620
dependency tracking problems far beyond

00:13:08,730 --> 00:13:12,630
just the need to take your your source

00:13:10,620 --> 00:13:14,730
code and compile it into executables

00:13:12,630 --> 00:13:16,920
because you have tests that examine

00:13:14,730 --> 00:13:19,500
certain parts of the of the code you

00:13:16,920 --> 00:13:21,150
have data that that that are ingested by

00:13:19,500 --> 00:13:21,900
those tests you have to take

00:13:21,150 --> 00:13:23,850
configuration

00:13:21,900 --> 00:13:25,800
and binaries and package them up into

00:13:23,850 --> 00:13:28,470
artifacts to be deployed onto targets

00:13:25,800 --> 00:13:31,410
and then the list goes on and on so as

00:13:28,470 --> 00:13:32,820
we look forward there's a whole bunch of

00:13:31,410 --> 00:13:35,130
problems that we were hoping to solve

00:13:32,820 --> 00:13:37,110
with basil and to our mind there are two

00:13:35,130 --> 00:13:39,120
really key things about Basil's approach

00:13:37,110 --> 00:13:41,760
dependency tracking the first is

00:13:39,120 --> 00:13:44,040
sandboxing because it's really hard to

00:13:41,760 --> 00:13:46,440
replace being the active enforcement

00:13:44,040 --> 00:13:48,330
mechanism they each of the build steps

00:13:46,440 --> 00:13:50,370
that you have described are what you

00:13:48,330 --> 00:13:52,500
have said they will be because the

00:13:50,370 --> 00:13:54,560
sandboxing ensures that it just won't

00:13:52,500 --> 00:13:57,060
work if you haven't done that correctly

00:13:54,560 --> 00:13:58,650
the second part is that you can get all

00:13:57,060 --> 00:14:00,660
the way towards full reproducibility

00:13:58,650 --> 00:14:02,670
which is very hard to do in a lot of

00:14:00,660 --> 00:14:05,040
other systems but that gives you an

00:14:02,670 --> 00:14:07,110
actual property of your build that you

00:14:05,040 --> 00:14:09,660
can check at the end and when you put

00:14:07,110 --> 00:14:12,770
those two things together to our mind it

00:14:09,660 --> 00:14:15,480
gives you an unparalleled ability to

00:14:12,770 --> 00:14:18,000
trust the foundation of the build that

00:14:15,480 --> 00:14:21,720
it is what you said and to use that to

00:14:18,000 --> 00:14:22,890
go provide a reliable platform that you

00:14:21,720 --> 00:14:24,720
can go build a bunch of really cool

00:14:22,890 --> 00:14:26,340
things like the incremental and

00:14:24,720 --> 00:14:29,940
networked builds that we heard about

00:14:26,340 --> 00:14:32,010
earlier and so looking forward we are

00:14:29,940 --> 00:14:34,140
hoping to use basil as a platform to go

00:14:32,010 --> 00:14:36,330
solve a bunch of these problems and to

00:14:34,140 --> 00:14:39,030
take advantage of this the strength of

00:14:36,330 --> 00:14:42,210
this platform also to provide a common

00:14:39,030 --> 00:14:44,370
tool architecture now that's getting

00:14:42,210 --> 00:14:46,680
ahead of ourselves a little bit so at

00:14:44,370 --> 00:14:49,260
this point we've now decided that we're

00:14:46,680 --> 00:14:50,850
going to make this conversion to basil

00:14:49,260 --> 00:14:52,290
we haven't actually done any of that yet

00:14:50,850 --> 00:14:54,000
and so this is where I'm going to hand

00:14:52,290 --> 00:14:57,600
things over to Matt and he's gonna tell

00:14:54,000 --> 00:15:01,160
you more about the story from here okay

00:14:57,600 --> 00:15:04,440
you guys hear me okay all right cool so

00:15:01,160 --> 00:15:06,060
we started this whole effort in 2016

00:15:04,440 --> 00:15:08,820
there's just about a year ago a little

00:15:06,060 --> 00:15:10,350
over a year ago and as we were realizing

00:15:08,820 --> 00:15:12,000
that we had this sort of big dependency

00:15:10,350 --> 00:15:14,760
tracking problem that we wanted to make

00:15:12,000 --> 00:15:16,710
some big changes we were discussing this

00:15:14,760 --> 00:15:18,450
amongst a bunch of us and and we had a

00:15:16,710 --> 00:15:20,340
someone on our team at the time who is

00:15:18,450 --> 00:15:22,290
the next Google employee who is advice

00:15:20,340 --> 00:15:23,490
to us was basically if you're gonna go

00:15:22,290 --> 00:15:24,960
through all this work to go build

00:15:23,490 --> 00:15:26,550
something you know replace the build

00:15:24,960 --> 00:15:27,720
system whenever you choose you should

00:15:26,550 --> 00:15:28,710
take a serious look at basil because

00:15:27,720 --> 00:15:29,670
they've thought about all the things

00:15:28,710 --> 00:15:31,530
that you're gonna end up thinking about

00:15:29,670 --> 00:15:33,360
and they've made a lot of good decisions

00:15:31,530 --> 00:15:34,860
so make sure you at least understand

00:15:33,360 --> 00:15:35,550
what basil did before you go and do

00:15:34,860 --> 00:15:39,029
anything else

00:15:35,550 --> 00:15:40,589
look looking at it he was right and we

00:15:39,029 --> 00:15:42,420
we spent a little time doing some hello

00:15:40,589 --> 00:15:44,270
world sort of get our hands dirty with

00:15:42,420 --> 00:15:46,380
it understand what the tool was about

00:15:44,270 --> 00:15:47,730
and about a month later we made the

00:15:46,380 --> 00:15:48,839
first pitch to the rest of the team that

00:15:47,730 --> 00:15:49,980
hey we think this is probably a good

00:15:48,839 --> 00:15:53,220
idea we think it's worth spending some

00:15:49,980 --> 00:15:55,680
time doing a port of these of our built

00:15:53,220 --> 00:15:58,020
systems over so the conversation at that

00:15:55,680 --> 00:15:59,520
point was really about how are we gonna

00:15:58,020 --> 00:16:00,660
show that we did a good job at the end

00:15:59,520 --> 00:16:01,920
of it and how are we gonna maintain the

00:16:00,660 --> 00:16:03,990
system later on that was the primary

00:16:01,920 --> 00:16:04,980
thing people were interested in so it

00:16:03,990 --> 00:16:06,720
was a conversation were having very

00:16:04,980 --> 00:16:08,760
early on and I'll talk a bit more about

00:16:06,720 --> 00:16:10,770
that later so spent a couple months

00:16:08,760 --> 00:16:12,480
doing some sort of demo ports of both

00:16:10,770 --> 00:16:14,010
the repositories so Patrick started in

00:16:12,480 --> 00:16:15,690
Sim repo did a little bit of work to

00:16:14,010 --> 00:16:16,800
show hey I did a thing I took that took

00:16:15,690 --> 00:16:18,089
a little bit further we kind of went

00:16:16,800 --> 00:16:20,339
back and forth across the two

00:16:18,089 --> 00:16:21,660
repositories sharing what we learned and

00:16:20,339 --> 00:16:23,250
taking the fidelity further and further

00:16:21,660 --> 00:16:25,290
until we got to the point where pretty

00:16:23,250 --> 00:16:26,760
much everything worked there was a

00:16:25,290 --> 00:16:28,260
notable exception to that that we sort

00:16:26,760 --> 00:16:30,420
of miss estimated which I'll mention in

00:16:28,260 --> 00:16:31,680
a couple slides but we got we felt

00:16:30,420 --> 00:16:34,920
confident that yeah okay we think we can

00:16:31,680 --> 00:16:37,529
commit to this so in March of this year

00:16:34,920 --> 00:16:38,700
was when we kind of set the demos aside

00:16:37,529 --> 00:16:40,050
and said okay we're going to do this for

00:16:38,700 --> 00:16:42,540
real we're gonna record everything go

00:16:40,050 --> 00:16:44,279
through testing and get it committed and

00:16:42,540 --> 00:16:46,649
finally just about a month ago is when

00:16:44,279 --> 00:16:49,370
we did the real cut over production of

00:16:46,649 --> 00:16:52,170
using basil as the primary build system

00:16:49,370 --> 00:16:53,220
so a bunch of aspects of this a lot of

00:16:52,170 --> 00:16:54,329
the things I'm gonna talk about are

00:16:53,220 --> 00:16:56,579
gonna sound very familiar from what we

00:16:54,329 --> 00:16:59,430
heard this morning which is actually

00:16:56,579 --> 00:17:00,000
really encouraging to me so let's let's

00:16:59,430 --> 00:17:01,800
get into it

00:17:00,000 --> 00:17:02,880
it's our first party code all the

00:17:01,800 --> 00:17:05,850
application code across both

00:17:02,880 --> 00:17:07,410
repositories the the overall philosophy

00:17:05,850 --> 00:17:09,240
heroes we're building the system out in

00:17:07,410 --> 00:17:10,860
parallel and we want to do that as fast

00:17:09,240 --> 00:17:12,660
as we can so we can get rid of the old

00:17:10,860 --> 00:17:15,569
one and go take advantage of all the

00:17:12,660 --> 00:17:17,189
benefits of Basil's brought us so we

00:17:15,569 --> 00:17:18,300
were trying not to get bogged down and

00:17:17,189 --> 00:17:20,309
making improvements along the way just

00:17:18,300 --> 00:17:22,199
get get to the point where it works and

00:17:20,309 --> 00:17:25,079
it's done and then we can go start using

00:17:22,199 --> 00:17:26,910
all the great tools at our disposal so

00:17:25,079 --> 00:17:28,710
all the application code it was really

00:17:26,910 --> 00:17:30,240
the core basic workflow we've got a

00:17:28,710 --> 00:17:31,770
bunch of files that were laid out in a

00:17:30,240 --> 00:17:33,540
fairly regular pattern collect those up

00:17:31,770 --> 00:17:35,100
pick your flags define your libraries

00:17:33,540 --> 00:17:37,679
and your tests map to the data all that

00:17:35,100 --> 00:17:39,809
stuff was pretty straightforward the key

00:17:37,679 --> 00:17:41,250
thing here though was relearning all of

00:17:39,809 --> 00:17:43,559
the little things that our old system

00:17:41,250 --> 00:17:44,309
had had grown over 15 plus years of

00:17:43,559 --> 00:17:45,809
existence

00:17:44,309 --> 00:17:47,550
turns out you accumulate a lot of little

00:17:45,809 --> 00:17:48,940
features and things that way we had to

00:17:47,550 --> 00:17:50,890
go find all of those and go find

00:17:48,940 --> 00:17:54,430
three implemented in Basel but this is

00:17:50,890 --> 00:17:55,780
relatively successful and as Patrick

00:17:54,430 --> 00:17:58,000
mentioned we have a lot of different

00:17:55,780 --> 00:17:59,050
targets that we build for we have an

00:17:58,000 --> 00:18:00,460
entire team of people working on

00:17:59,050 --> 00:18:02,050
maintaining those compilers and the

00:18:00,460 --> 00:18:04,210
sister routes and headers and all that

00:18:02,050 --> 00:18:06,910
stuff and that changes fairly frequently

00:18:04,210 --> 00:18:08,560
we also control the whole thing and we

00:18:06,910 --> 00:18:10,210
build our own compilers and manage them

00:18:08,560 --> 00:18:14,230
all the way to the the OS that we were

00:18:10,210 --> 00:18:15,820
on on the hardware so at Build time we

00:18:14,230 --> 00:18:18,070
need to know what which compiler am I

00:18:15,820 --> 00:18:19,860
using right now where does it live and

00:18:18,070 --> 00:18:22,180
how do I actually invoke that compiler

00:18:19,860 --> 00:18:23,320
we had this problem before moving to

00:18:22,180 --> 00:18:24,580
Basel though so we had a lot of

00:18:23,320 --> 00:18:26,620
infrastructure that was built up around

00:18:24,580 --> 00:18:28,450
the old system to let us answer these

00:18:26,620 --> 00:18:30,790
questions and going and kick off builds

00:18:28,450 --> 00:18:32,560
so the problem for our tool chance was

00:18:30,790 --> 00:18:33,790
really about teaching Basel about that

00:18:32,560 --> 00:18:36,400
existing infrastructure and sort of

00:18:33,790 --> 00:18:38,440
extending it out into Basel which took

00:18:36,400 --> 00:18:41,290
the form of two things first the cross

00:18:38,440 --> 00:18:42,610
tool files which was as we did our first

00:18:41,290 --> 00:18:44,260
demo of this and we're trying to figure

00:18:42,610 --> 00:18:45,250
out how cross compilation worked ran

00:18:44,260 --> 00:18:48,370
very quickly into the end of the

00:18:45,250 --> 00:18:50,860
documentation about this and got to go

00:18:48,370 --> 00:18:52,240
do some spelunking learned a lot in the

00:18:50,860 --> 00:18:53,350
process and the cool thing was that

00:18:52,240 --> 00:18:54,550
everything we wanted to do we could

00:18:53,350 --> 00:18:55,740
actually express with the cross to a

00:18:54,550 --> 00:18:57,430
file it was a really good

00:18:55,740 --> 00:18:58,960
confidence-building step they're like oh

00:18:57,430 --> 00:19:00,370
hey they actually thought about all the

00:18:58,960 --> 00:19:02,790
things that are important here then

00:19:00,370 --> 00:19:04,960
write it down but they thought about it

00:19:02,790 --> 00:19:06,400
the other piece then is the command line

00:19:04,960 --> 00:19:08,080
flags to go and choose which of the tool

00:19:06,400 --> 00:19:09,640
caves were building with so relatively

00:19:08,080 --> 00:19:10,780
straightforward story once you kind of

00:19:09,640 --> 00:19:14,200
wrap your head around the cross little

00:19:10,780 --> 00:19:15,430
files then the last big piece of this

00:19:14,200 --> 00:19:16,330
was the third-party code and there's a

00:19:15,430 --> 00:19:19,000
little bit of discussion about this

00:19:16,330 --> 00:19:20,500
earlier so there are there are at most

00:19:19,000 --> 00:19:22,900
maybe two and a half of us working on

00:19:20,500 --> 00:19:25,180
this effort at any given time sort of on

00:19:22,900 --> 00:19:26,800
a good week so we didn't have a ton of

00:19:25,180 --> 00:19:29,800
staff to go and write build files for

00:19:26,800 --> 00:19:30,910
all of our third-party libraries and we

00:19:29,800 --> 00:19:32,770
don't have a ton of them there's maybe

00:19:30,910 --> 00:19:34,360
you know a handful that that range from

00:19:32,770 --> 00:19:36,490
fairly simple we're it's actually

00:19:34,360 --> 00:19:38,260
feasible to do that to some a couple of

00:19:36,490 --> 00:19:40,240
very complicated third-party libraries

00:19:38,260 --> 00:19:41,830
so we didn't think it was feasible for

00:19:40,240 --> 00:19:44,650
us to maintain build files for

00:19:41,830 --> 00:19:46,240
everything we also considered maybe we

00:19:44,650 --> 00:19:48,870
just build them once commit the results

00:19:46,240 --> 00:19:50,860
and just wrap that with UC libraries

00:19:48,870 --> 00:19:52,450
problem is that our tool chains are

00:19:50,860 --> 00:19:54,520
evolving and moving so quickly that we

00:19:52,450 --> 00:19:56,710
thought we'd end up recompiling these

00:19:54,520 --> 00:19:58,840
things pretty frequently so we went the

00:19:56,710 --> 00:20:00,670
route of implementing a scholar accrual

00:19:58,840 --> 00:20:02,159
that wrapped a shell script that invoked

00:20:00,670 --> 00:20:04,169
that build

00:20:02,159 --> 00:20:05,940
the the simple version of this is pretty

00:20:04,169 --> 00:20:07,649
easy to get working early on you can

00:20:05,940 --> 00:20:09,000
almost you just use a general to do that

00:20:07,649 --> 00:20:10,919
we ended up going a little bit more

00:20:09,000 --> 00:20:12,240
fancy than that but most of the work

00:20:10,919 --> 00:20:13,289
here was earlier around trying to get it

00:20:12,240 --> 00:20:15,990
to the point where it's actually fully

00:20:13,289 --> 00:20:17,519
reproducible we see all the advantages

00:20:15,990 --> 00:20:19,260
that that come if we get to the point

00:20:17,519 --> 00:20:20,610
where we get completely reproducible

00:20:19,260 --> 00:20:23,370
builds and and so it really wanted to

00:20:20,610 --> 00:20:25,110
get there with this approach so the

00:20:23,370 --> 00:20:26,700
challenge here was really about learning

00:20:25,110 --> 00:20:28,500
all of the little things that basil has

00:20:26,700 --> 00:20:31,580
accumulated over it's it's long history

00:20:28,500 --> 00:20:33,840
to do this job well for C++ compilation

00:20:31,580 --> 00:20:36,870
and weari implemented a lot of that

00:20:33,840 --> 00:20:38,549
logic ourselves which it was a bit

00:20:36,870 --> 00:20:39,960
challenging at times but we got to the

00:20:38,549 --> 00:20:41,070
point where it works all the libraries

00:20:39,960 --> 00:20:43,470
are building right now are fully

00:20:41,070 --> 00:20:45,539
reproducible which is great at the end

00:20:43,470 --> 00:20:46,950
of that process we get like a dot a file

00:20:45,539 --> 00:20:51,149
on a couple headers we can pull those

00:20:46,950 --> 00:20:52,740
out and then pass those downstream so

00:20:51,149 --> 00:20:53,970
that leads to the validation story as I

00:20:52,740 --> 00:20:55,260
mentioned we were talking about this

00:20:53,970 --> 00:20:56,340
early on with the rest of the team and

00:20:55,260 --> 00:20:59,159
how we're gonna show that everything is

00:20:56,340 --> 00:21:00,659
good and correct most of this process

00:20:59,159 --> 00:21:02,399
takes kind of the form you'd expect to

00:21:00,659 --> 00:21:04,110
build everything we're on all the tests

00:21:02,399 --> 00:21:07,289
run in the staging environment get happy

00:21:04,110 --> 00:21:08,429
with it we tried to get that part of it

00:21:07,289 --> 00:21:10,500
working as soon as we could so we could

00:21:08,429 --> 00:21:11,580
get it running in CI once we had gotten

00:21:10,500 --> 00:21:12,419
to the point where at a mature enough

00:21:11,580 --> 00:21:14,610
build that we can get it running

00:21:12,419 --> 00:21:16,320
continuously then we could watch to see

00:21:14,610 --> 00:21:18,330
that it's you know the new build is

00:21:16,320 --> 00:21:19,769
passing when the old bill passes the new

00:21:18,330 --> 00:21:21,299
build fails whenever the old build fails

00:21:19,769 --> 00:21:23,639
we had a case where that actually wasn't

00:21:21,299 --> 00:21:26,429
true I'll talk about the specifics of

00:21:23,639 --> 00:21:28,200
that in a couple slides here but that

00:21:26,429 --> 00:21:30,210
was a big like oh wow this is actually a

00:21:28,200 --> 00:21:32,159
really important thing I'm glad we got

00:21:30,210 --> 00:21:33,720
to this point as early as we did so

00:21:32,159 --> 00:21:35,700
pushing to the point we had CI running

00:21:33,720 --> 00:21:38,490
was was a big part of the the focus and

00:21:35,700 --> 00:21:39,960
the planning of this for Sims that was

00:21:38,490 --> 00:21:41,549
about as far as we took it you know once

00:21:39,960 --> 00:21:42,870
we got it in CIL the tests are passing

00:21:41,549 --> 00:21:44,549
it's a pretty good place but for the

00:21:42,870 --> 00:21:46,409
rocket repository because this is the

00:21:44,549 --> 00:21:48,029
code that were putting onto our rockets

00:21:46,409 --> 00:21:50,159
and spacecraft we wanted to go to

00:21:48,029 --> 00:21:51,720
another level of showing that what we

00:21:50,159 --> 00:21:54,899
had done was correct and equivalent to

00:21:51,720 --> 00:21:58,559
the system we had before so we realized

00:21:54,899 --> 00:22:00,000
that okay we had or we have the tooling

00:21:58,559 --> 00:22:01,080
at our disposal to build all the

00:22:00,000 --> 00:22:03,389
different configurations we care about

00:22:01,080 --> 00:22:05,159
let's go pull all the flags out of every

00:22:03,389 --> 00:22:06,899
command line that got invoked in both

00:22:05,159 --> 00:22:08,760
systems and try to figure out if they

00:22:06,899 --> 00:22:10,440
were doing the same thing a million

00:22:08,760 --> 00:22:11,760
lines of code pretty big repository

00:22:10,440 --> 00:22:13,710
there's a lot of flags involved with

00:22:11,760 --> 00:22:15,750
this I don't have the number of build

00:22:13,710 --> 00:22:18,540
steps off the top of my head but pretty

00:22:15,750 --> 00:22:19,830
big pile of command lines so there's

00:22:18,540 --> 00:22:21,540
some scripting involved with doing this

00:22:19,830 --> 00:22:23,220
it was relatively awful but we got to

00:22:21,540 --> 00:22:24,930
the point eventually where we were able

00:22:23,220 --> 00:22:27,390
to convincingly say that ok we've looked

00:22:24,930 --> 00:22:28,650
at all of the the flags used in the make

00:22:27,390 --> 00:22:30,120
system and all the flags use in the

00:22:28,650 --> 00:22:32,940
basal system we understand all the

00:22:30,120 --> 00:22:34,440
differences from there we're building

00:22:32,940 --> 00:22:36,270
the same set of files with equivalent

00:22:34,440 --> 00:22:37,830
sets of flags we would expect at least

00:22:36,270 --> 00:22:39,240
that the compilation level that all the

00:22:37,830 --> 00:22:41,490
object files produced would be the same

00:22:39,240 --> 00:22:43,740
maybe - debug symbols so it stripped

00:22:41,490 --> 00:22:45,030
those out and we tried this and we were

00:22:43,740 --> 00:22:47,700
actually pretty close on the first try

00:22:45,030 --> 00:22:49,770
to getting fully matching object files

00:22:47,700 --> 00:22:50,880
across the two repositories the couple

00:22:49,770 --> 00:22:52,410
places where we weren't and we found

00:22:50,880 --> 00:22:53,520
more issues there under fix those and

00:22:52,410 --> 00:22:55,500
got to the point where every single

00:22:53,520 --> 00:22:57,780
object file across the board lined up

00:22:55,500 --> 00:22:58,890
between the two systems from validation

00:22:57,780 --> 00:23:00,720
story that feels pretty good

00:22:58,890 --> 00:23:01,860
we know that Basel is now compiling the

00:23:00,720 --> 00:23:05,700
code the exact same way that our

00:23:01,860 --> 00:23:06,960
previous system was a couple of things

00:23:05,700 --> 00:23:07,860
that were new for us in the validation

00:23:06,960 --> 00:23:10,410
process

00:23:07,860 --> 00:23:11,670
first off determinism of the build is

00:23:10,410 --> 00:23:13,830
something that we hadn't really thought

00:23:11,670 --> 00:23:15,180
about previously we're excited that we

00:23:13,830 --> 00:23:17,010
now have this property that the build

00:23:15,180 --> 00:23:19,080
will continue to be identical but how do

00:23:17,010 --> 00:23:20,100
we show it that's the case this is an

00:23:19,080 --> 00:23:22,680
area where we'd love to hear best

00:23:20,100 --> 00:23:24,450
practices of how to do this in CI going

00:23:22,680 --> 00:23:25,770
forward having spent a year with a tool

00:23:24,450 --> 00:23:27,570
we think we have some ideas on how to do

00:23:25,770 --> 00:23:28,470
this but it's a sort of thing that we'd

00:23:27,570 --> 00:23:29,490
love to hear from people who have

00:23:28,470 --> 00:23:31,620
thought about this problem for a lot

00:23:29,490 --> 00:23:35,190
longer than we have

00:23:31,620 --> 00:23:37,140
finally the Basel query is an awesome

00:23:35,190 --> 00:23:38,940
tool having structured access to the

00:23:37,140 --> 00:23:40,440
dependency graph is really cool for not

00:23:38,940 --> 00:23:42,360
only doing things like we're factoring

00:23:40,440 --> 00:23:44,250
in the future and like I said we were

00:23:42,360 --> 00:23:45,690
trying to hold off on doing as much the

00:23:44,250 --> 00:23:47,160
improvements of the codebase as we could

00:23:45,690 --> 00:23:48,600
until we had poured it over to Basel

00:23:47,160 --> 00:23:50,250
this is one of those reasons why so if

00:23:48,600 --> 00:23:52,110
we want to go break up the codebase and

00:23:50,250 --> 00:23:54,960
rearrange it and things like that having

00:23:52,110 --> 00:23:56,640
the query give us structured access to

00:23:54,960 --> 00:23:57,200
that dependency graph is really really

00:23:56,640 --> 00:24:00,390
great

00:23:57,200 --> 00:24:01,650
the other aspect of this that we had a

00:24:00,390 --> 00:24:03,300
lot of conversations about is how do we

00:24:01,650 --> 00:24:04,950
have comfortable upgrading basil itself

00:24:03,300 --> 00:24:06,840
we know the tool is going through a huge

00:24:04,950 --> 00:24:08,280
amount of development while we're going

00:24:06,840 --> 00:24:10,140
through the supporting process how do we

00:24:08,280 --> 00:24:11,570
get comfortable that basil is doing the

00:24:10,140 --> 00:24:14,100
same thing as it was doing previously

00:24:11,570 --> 00:24:16,230
and this is one piece that that would be

00:24:14,100 --> 00:24:17,970
able to see that okay it has read all of

00:24:16,230 --> 00:24:19,650
our files and it's gonna do it it's at

00:24:17,970 --> 00:24:23,880
least expressing the same dependency

00:24:19,650 --> 00:24:25,170
graph as it was before okay so once

00:24:23,880 --> 00:24:27,000
we've gotten to the point where the

00:24:25,170 --> 00:24:28,470
validation finish line was like starting

00:24:27,000 --> 00:24:29,670
to materialize on the horizon and we're

00:24:28,470 --> 00:24:31,350
getting pretty far

00:24:29,670 --> 00:24:35,490
we started a rollout to the rest of our

00:24:31,350 --> 00:24:36,630
our co-workers so this was a phased

00:24:35,490 --> 00:24:37,830
rollout where we found a couple people

00:24:36,630 --> 00:24:39,360
who are willing to put up with the fact

00:24:37,830 --> 00:24:40,290
that it's probably broken and we haven't

00:24:39,360 --> 00:24:42,120
thought about some things and the

00:24:40,290 --> 00:24:43,410
documentation is not very good yet got

00:24:42,120 --> 00:24:44,880
them to the point where they were using

00:24:43,410 --> 00:24:47,490
an on daily basis and kind of spread

00:24:44,880 --> 00:24:48,750
that group out an ad now and our

00:24:47,490 --> 00:24:50,730
takeaway from this now that we've had

00:24:48,750 --> 00:24:53,190
people using it quite a few people using

00:24:50,730 --> 00:24:55,980
it for a couple months now is primarily

00:24:53,190 --> 00:24:59,310
that the fast correct choose to tag Lyon

00:24:55,980 --> 00:25:01,320
is is very real we've seen that over and

00:24:59,310 --> 00:25:03,150
over again that it has it really has

00:25:01,320 --> 00:25:04,920
paid off but there are some expectations

00:25:03,150 --> 00:25:06,750
need to change you know we came from

00:25:04,920 --> 00:25:09,000
make pretty much everyone on our team

00:25:06,750 --> 00:25:10,530
had no either nose make well or has

00:25:09,000 --> 00:25:12,900
expectations about the way that make

00:25:10,530 --> 00:25:15,810
works a couple examples of this

00:25:12,900 --> 00:25:18,120
if you tell make to build with 50 jobs

00:25:15,810 --> 00:25:20,160
it will happily try to go and run 50 50

00:25:18,120 --> 00:25:22,710
jobs all the time whereas basil has a

00:25:20,160 --> 00:25:24,630
more sophisticated assessment of how

00:25:22,710 --> 00:25:26,850
much CPU and RAM and IO do you have in

00:25:24,630 --> 00:25:28,440
schedule tests accordingly the result of

00:25:26,850 --> 00:25:30,180
that is if you ask both systems were on

00:25:28,440 --> 00:25:31,710
all of your tests it may take a little

00:25:30,180 --> 00:25:32,970
bit longer in Basel but you can keep

00:25:31,710 --> 00:25:35,460
using your workstation in the mean time

00:25:32,970 --> 00:25:37,070
in general whereas that definitely

00:25:35,460 --> 00:25:39,270
wasn't the case in the in the old system

00:25:37,070 --> 00:25:40,860
so people would say hey it took longer

00:25:39,270 --> 00:25:42,390
to run the bill it's like well but it

00:25:40,860 --> 00:25:43,980
you know you can use your machine and

00:25:42,390 --> 00:25:45,270
also you don't have to run all the tests

00:25:43,980 --> 00:25:46,830
all the time now you can trust that you

00:25:45,270 --> 00:25:49,230
can only rebuild the tests that you care

00:25:46,830 --> 00:25:52,380
about and this the time savings that are

00:25:49,230 --> 00:25:55,830
huge another example of this that that

00:25:52,380 --> 00:25:58,470
came up was removal of a header file in

00:25:55,830 --> 00:26:00,360
the system we had built around make we

00:25:58,470 --> 00:26:01,920
were not nearly as careful as basil is

00:26:00,360 --> 00:26:03,420
about tracking all the potential

00:26:01,920 --> 00:26:04,950
theoretical ways that that header file

00:26:03,420 --> 00:26:07,320
might have impacted some piece of code

00:26:04,950 --> 00:26:08,520
which meant that if you did something

00:26:07,320 --> 00:26:10,530
like that it's the type of scenario we

00:26:08,520 --> 00:26:12,420
can end up with an invalid build for

00:26:10,530 --> 00:26:14,010
whatever reason that can manifest itself

00:26:12,420 --> 00:26:15,960
in a lot of ways that results in make

00:26:14,010 --> 00:26:18,060
clean blow it away it rebuild everything

00:26:15,960 --> 00:26:19,890
people were very used to doing that in a

00:26:18,060 --> 00:26:21,270
number of different scenarios and that

00:26:19,890 --> 00:26:22,620
has just disappeared from people's

00:26:21,270 --> 00:26:24,750
workflow now that we've poured it over

00:26:22,620 --> 00:26:26,700
to basil which is just really great

00:26:24,750 --> 00:26:28,470
can't understate how happy we are the

00:26:26,700 --> 00:26:31,410
hit that that part of the workflow is

00:26:28,470 --> 00:26:33,330
basically gone disk space you should

00:26:31,410 --> 00:26:36,990
being the one that remains what that is

00:26:33,330 --> 00:26:39,090
what it is okay a couple miscellaneous

00:26:36,990 --> 00:26:40,230
challenges so the the feature that we

00:26:39,090 --> 00:26:41,910
thought was going to be okay after we

00:26:40,230 --> 00:26:43,200
did our demo but was very much not done

00:26:41,910 --> 00:26:46,590
at all was C++ code

00:26:43,200 --> 00:26:48,990
Everage we ran headfirst into that the

00:26:46,590 --> 00:26:50,340
unbought sit looked like had done a

00:26:48,990 --> 00:26:51,690
similar journey that we ended up going

00:26:50,340 --> 00:26:53,730
through and posted that on the the

00:26:51,690 --> 00:26:55,440
github issue about this we didn't really

00:26:53,730 --> 00:26:57,120
realize until we were almost done that

00:26:55,440 --> 00:26:58,289
we were doing exactly the same thing but

00:26:57,120 --> 00:27:00,090
it turns out that it was pretty well

00:26:58,289 --> 00:27:01,889
documented there so we spend a lot of

00:27:00,090 --> 00:27:03,299
time getting something working here but

00:27:01,889 --> 00:27:04,710
it was a lot of climbing into basil

00:27:03,299 --> 00:27:07,889
itself and making some local

00:27:04,710 --> 00:27:10,070
modifications so that was that was quite

00:27:07,889 --> 00:27:13,470
a bit of effort expended on that

00:27:10,070 --> 00:27:16,620
additionally include PES for our C++

00:27:13,470 --> 00:27:17,970
rules caused us a lot of pain a lot of

00:27:16,620 --> 00:27:20,490
this was self inflicted because of the

00:27:17,970 --> 00:27:22,559
way we've laid our repositories out but

00:27:20,490 --> 00:27:24,510
also the CC library includes attribute

00:27:22,559 --> 00:27:26,490
didn't I think when we started out

00:27:24,510 --> 00:27:28,649
wasn't documented as well as it is now

00:27:26,490 --> 00:27:30,649
we misunderstood what it was doing and

00:27:28,649 --> 00:27:33,210
in using I system instead of - capital I

00:27:30,649 --> 00:27:35,630
that was the root cause of the the CI

00:27:33,210 --> 00:27:37,740
bill that didn't break in both systems

00:27:35,630 --> 00:27:39,210
because it was using our system it paved

00:27:37,740 --> 00:27:40,620
over some warnings and a header file and

00:27:39,210 --> 00:27:43,049
passed the bill when it failed in the

00:27:40,620 --> 00:27:44,370
old system things like that have

00:27:43,049 --> 00:27:46,830
resulted in quite a bit of wasted time

00:27:44,370 --> 00:27:49,260
on our side so that was like I said

00:27:46,830 --> 00:27:51,049
mostly self-inflicted but it was

00:27:49,260 --> 00:27:54,360
actually a pretty recurring challenge

00:27:51,049 --> 00:27:55,590
Python support is one where we don't

00:27:54,360 --> 00:27:57,029
have a ton of Python in these two

00:27:55,590 --> 00:27:58,950
repositories we do have a lot of Python

00:27:57,029 --> 00:28:01,529
elsewhere on our team and around the

00:27:58,950 --> 00:28:03,960
company migrating from the very standard

00:28:01,529 --> 00:28:05,760
virtual environments and pip into basil

00:28:03,960 --> 00:28:07,740
the story there is not super clear we're

00:28:05,760 --> 00:28:10,919
hoping to learn more about that here at

00:28:07,740 --> 00:28:13,860
the conference and then unit tests is

00:28:10,919 --> 00:28:15,539
another one where we had built up a

00:28:13,860 --> 00:28:17,370
fairly sophisticated test runner but

00:28:15,539 --> 00:28:18,990
basil actually had much better tools in

00:28:17,370 --> 00:28:20,340
general for managing tests the flaky

00:28:18,990 --> 00:28:23,370
tests in particular is a thing that we

00:28:20,340 --> 00:28:25,440
hadn't built that is really awesome but

00:28:23,370 --> 00:28:27,600
we had never been in a situation where

00:28:25,440 --> 00:28:29,490
we needed to very carefully Express the

00:28:27,600 --> 00:28:31,200
dependency between which tests needed

00:28:29,490 --> 00:28:32,820
which data so we have all of the data

00:28:31,200 --> 00:28:34,139
and all the tests and they the

00:28:32,820 --> 00:28:35,669
dependencies are not really a more

00:28:34,139 --> 00:28:37,230
fine-grained than that it's going to

00:28:35,669 --> 00:28:38,850
take us a lot of effort to go and get to

00:28:37,230 --> 00:28:41,100
the point where we've then specified all

00:28:38,850 --> 00:28:42,570
those dependencies very carefully which

00:28:41,100 --> 00:28:45,090
is a good problem to have but it's going

00:28:42,570 --> 00:28:47,880
to be a lot of work for us and finally

00:28:45,090 --> 00:28:49,950
both basil and our own codebase were

00:28:47,880 --> 00:28:51,659
moving targets during this entire effort

00:28:49,950 --> 00:28:53,610
I had the version numbers on the the

00:28:51,659 --> 00:28:57,059
sort of timeline slide we started around

00:28:53,610 --> 00:29:00,690
the point for their point for rain

00:28:57,059 --> 00:29:02,879
and now being 0.7 it's changed a lot in

00:29:00,690 --> 00:29:04,110
that in that interim time so there's a

00:29:02,879 --> 00:29:05,909
lot of effort that went into keeping up

00:29:04,110 --> 00:29:07,169
to date and reading about issues a lot

00:29:05,909 --> 00:29:08,549
of the time we had like oh we found a

00:29:07,169 --> 00:29:10,139
bug oh wait they fixed it two days ago

00:29:08,549 --> 00:29:13,169
and it's in the next release okay just

00:29:10,139 --> 00:29:15,480
hold off happens several times but also

00:29:13,169 --> 00:29:17,370
our internal code bases we're changing a

00:29:15,480 --> 00:29:18,659
lot during this time we've had a lot of

00:29:17,370 --> 00:29:20,700
launches a lot of new features being

00:29:18,659 --> 00:29:22,259
built and a number of different features

00:29:20,700 --> 00:29:26,610
of the build that were introduced that

00:29:22,259 --> 00:29:29,340
we had to then go and chase so each set

00:29:26,610 --> 00:29:30,990
of this was a huge learning opportunity

00:29:29,340 --> 00:29:32,970
for us we both about our own system

00:29:30,990 --> 00:29:35,159
about how basil works occasionally about

00:29:32,970 --> 00:29:37,159
how C++ compilation and linking actually

00:29:35,159 --> 00:29:40,110
really works down in the nitty gritties

00:29:37,159 --> 00:29:41,490
but we think it's likely that anyone

00:29:40,110 --> 00:29:45,029
who's going through a similar sort of

00:29:41,490 --> 00:29:46,169
porting process a lot of C++ code moving

00:29:45,029 --> 00:29:48,539
into basil is going to go through a

00:29:46,169 --> 00:29:49,980
pretty similar set of phases we've

00:29:48,539 --> 00:29:55,139
already heard this morning about similar

00:29:49,980 --> 00:29:56,639
sorts of challenges and we led this

00:29:55,139 --> 00:29:57,809
entire effort with that question like

00:29:56,639 --> 00:29:59,820
how are we gonna show this is correct

00:29:57,809 --> 00:30:01,590
that's for us we have a pretty high bar

00:29:59,820 --> 00:30:03,409
for that because we're building rockets

00:30:01,590 --> 00:30:06,269
and we would take testing very seriously

00:30:03,409 --> 00:30:07,740
but answering that question early on if

00:30:06,269 --> 00:30:09,299
like what is our validation story around

00:30:07,740 --> 00:30:11,100
this was was the first thing we talked

00:30:09,299 --> 00:30:12,960
about and a constant question that we

00:30:11,100 --> 00:30:15,029
were discussing as we went and that was

00:30:12,960 --> 00:30:19,980
a really key part of our success in

00:30:15,029 --> 00:30:21,269
doing this port so looking forward like

00:30:19,980 --> 00:30:23,070
we said we've ported two repositories

00:30:21,269 --> 00:30:25,769
over we have a lot more code to go

00:30:23,070 --> 00:30:28,950
import elsewhere in the company we also

00:30:25,769 --> 00:30:31,590
had giving given that approach of go and

00:30:28,950 --> 00:30:33,990
replicate the old system in basil we now

00:30:31,590 --> 00:30:35,669
have to go and take advantage of all

00:30:33,990 --> 00:30:37,049
that hard work we held off on a lot of

00:30:35,669 --> 00:30:39,389
improvements that we wanted to make and

00:30:37,049 --> 00:30:40,649
that is now available to us we can do

00:30:39,389 --> 00:30:43,470
that freely without having to make

00:30:40,649 --> 00:30:45,210
updates into system simultaneously so a

00:30:43,470 --> 00:30:47,070
couple things that would that are on our

00:30:45,210 --> 00:30:48,629
minds particularly about what would help

00:30:47,070 --> 00:30:50,220
us first two things straight off the

00:30:48,629 --> 00:30:52,409
roadmap straight off the the conference

00:30:50,220 --> 00:30:55,230
agenda here cross-platform multi-tool

00:30:52,409 --> 00:30:56,639
chain support we're definitely a big use

00:30:55,230 --> 00:30:58,190
case there we have a lot of different

00:30:56,639 --> 00:31:00,779
tool chains a lot of different platforms

00:30:58,190 --> 00:31:03,119
luckily not worrying about mobile

00:31:00,779 --> 00:31:04,470
devices or Windows or Mac it's all Linux

00:31:03,119 --> 00:31:07,379
but we do have a lot of CPU

00:31:04,470 --> 00:31:09,269
architectures remote caching and

00:31:07,379 --> 00:31:10,470
execution is going to be awesome when we

00:31:09,269 --> 00:31:11,880
are able to go

00:31:10,470 --> 00:31:14,210
right that so we're really excited to

00:31:11,880 --> 00:31:16,679
learn more about that but furthermore

00:31:14,210 --> 00:31:18,630
the general problem of building great CI

00:31:16,679 --> 00:31:20,309
that's really the part of the

00:31:18,630 --> 00:31:22,650
conversation that got us started in this

00:31:20,309 --> 00:31:24,150
whole thing to begin with and the

00:31:22,650 --> 00:31:26,159
problems we have here are definitely not

00:31:24,150 --> 00:31:27,659
unique and so sharing of tools and and

00:31:26,159 --> 00:31:29,460
methodology is not how to go and build

00:31:27,659 --> 00:31:31,260
CI that takes advantage of all the great

00:31:29,460 --> 00:31:33,750
things that basil provides and something

00:31:31,260 --> 00:31:36,240
we're really interested in furthermore

00:31:33,750 --> 00:31:37,770
just general sharing of best practices

00:31:36,240 --> 00:31:39,570
you know the documentation that exists

00:31:37,770 --> 00:31:41,429
is great for how to go do specific

00:31:39,570 --> 00:31:42,870
things with basil but we have questions

00:31:41,429 --> 00:31:44,909
like hey we have a huge loss plus

00:31:42,870 --> 00:31:47,100
repository that was built and make that

00:31:44,909 --> 00:31:48,900
had its own quirks and things basil has

00:31:47,100 --> 00:31:51,000
opinions about how to do this really

00:31:48,900 --> 00:31:52,289
well and learning those and sort of

00:31:51,000 --> 00:31:53,700
teasing those out are the sort of things

00:31:52,289 --> 00:31:55,250
that we'd love to hear more from people

00:31:53,700 --> 00:31:57,210
who have a lot of experience doing this

00:31:55,250 --> 00:31:58,409
third-party libraries we talked about

00:31:57,210 --> 00:31:59,669
the thing we did it sounds like there's

00:31:58,409 --> 00:32:01,140
a number of different approaches you can

00:31:59,669 --> 00:32:02,789
take there in general we don't know if

00:32:01,140 --> 00:32:05,159
the thing we did is was a good idea or

00:32:02,789 --> 00:32:06,510
not seems to be working okay but we

00:32:05,159 --> 00:32:08,909
definitely want to hear more about that

00:32:06,510 --> 00:32:10,710
problem space Python rules has been

00:32:08,909 --> 00:32:12,450
mentioned a couple times already but

00:32:10,710 --> 00:32:13,890
what the story is there we have a pretty

00:32:12,450 --> 00:32:15,990
big pile of Python I'd like to go and

00:32:13,890 --> 00:32:18,690
pour it over into basil knowing what to

00:32:15,990 --> 00:32:19,919
expect there around reproducibility and

00:32:18,690 --> 00:32:23,130
packaging and they're pretty lot raised

00:32:19,919 --> 00:32:24,720
all that stuff and finally just stories

00:32:23,130 --> 00:32:26,190
from all the rest of you we spent a

00:32:24,720 --> 00:32:28,860
tremendous amount of time on basil

00:32:26,190 --> 00:32:30,659
discuss and github issues and and stack

00:32:28,860 --> 00:32:32,789
overflow during this entire effort and

00:32:30,659 --> 00:32:34,679
it's incredibly useful to hear what

00:32:32,789 --> 00:32:35,850
people are doing what problems people

00:32:34,679 --> 00:32:37,440
are learning into approaches that are

00:32:35,850 --> 00:32:39,330
being taken things like that we really

00:32:37,440 --> 00:32:40,679
appreciate all of those stories have

00:32:39,330 --> 00:32:42,710
been shared already and will continue to

00:32:40,679 --> 00:32:46,169
be in the future

00:32:42,710 --> 00:32:48,000
so we're you're in we've ported to

00:32:46,169 --> 00:32:49,710
repositories over at this point we're

00:32:48,000 --> 00:32:52,350
very much invested and committed in the

00:32:49,710 --> 00:32:55,110
tool every feature that is being built

00:32:52,350 --> 00:32:57,720
helps us write code faster writes the

00:32:55,110 --> 00:33:00,120
right code safer and ultimately build

00:32:57,720 --> 00:33:02,490
more reliable systems and that gets back

00:33:00,120 --> 00:33:04,380
to why we're here we're not you know we

00:33:02,490 --> 00:33:05,580
didn't start this effort just for the

00:33:04,380 --> 00:33:06,900
sake of building a build system we're

00:33:05,580 --> 00:33:10,830
trying to build rockets in spacecraft

00:33:06,900 --> 00:33:12,750
and SpaceX is mission is to dramatically

00:33:10,830 --> 00:33:15,539
accelerate and revolutionize humanity's

00:33:12,750 --> 00:33:17,100
access to space and basil is helping us

00:33:15,539 --> 00:33:19,429
do that all of you are helping us do

00:33:17,100 --> 00:33:22,490
that and I think that's really great

00:33:19,429 --> 00:33:22,490
thank you

00:33:23,270 --> 00:33:31,190

YouTube URL: https://www.youtube.com/watch?v=t_3bckhV_YI


