Title: Front End Development with Bazel: Angular TypeScript and Persistent Workers w  Asana
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Mike Morearty (Asana) and Alex Eagle (Google Angular team)
Captions: 
	00:00:00,089 --> 00:00:04,859
my name is Alex Eagle I work on the

00:00:01,860 --> 00:00:06,509
angular team here at Google and I've

00:00:04,859 --> 00:00:08,340
spent the last couple of years making

00:00:06,509 --> 00:00:09,360
both angular and the programming

00:00:08,340 --> 00:00:11,639
language that we use for angular which

00:00:09,360 --> 00:00:14,099
is typescript work well internally at

00:00:11,639 --> 00:00:16,260
Google with basil and so I've spent the

00:00:14,099 --> 00:00:17,340
last nine months or so working to

00:00:16,260 --> 00:00:18,990
externalize that and make it possible

00:00:17,340 --> 00:00:21,359
for the angular developers outside to

00:00:18,990 --> 00:00:22,949
use that same tool chain and I'm Mike

00:00:21,359 --> 00:00:28,439
Moriarty I'm a software engineer at

00:00:22,949 --> 00:00:30,560
asana and after Alex talks about about

00:00:28,439 --> 00:00:33,059
front-ends and typescript and angular

00:00:30,560 --> 00:00:36,840
I'm gonna be talking a little more about

00:00:33,059 --> 00:00:42,660
our use of typescript at asana and basil

00:00:36,840 --> 00:00:44,550
persistent workers in general okay

00:00:42,660 --> 00:00:47,430
so to get started there's nothing for us

00:00:44,550 --> 00:00:50,730
to talk about it turns out that web

00:00:47,430 --> 00:00:53,579
development is sorry Mike yeah what web

00:00:50,730 --> 00:00:54,930
development is you know unlike backends

00:00:53,579 --> 00:00:58,050
well we don't really have any problems

00:00:54,930 --> 00:00:58,829
that require basil right so raising

00:00:58,050 --> 00:01:00,539
hands by the way if you're working

00:00:58,829 --> 00:01:01,559
backends that should be basically

00:01:00,539 --> 00:01:04,470
everybody cuz what else would you be the

00:01:01,559 --> 00:01:07,320
basil conference anybody work is anybody

00:01:04,470 --> 00:01:08,939
working in JavaScript a couple people Oh

00:01:07,320 --> 00:01:10,049
actually okay and how many of those are

00:01:08,939 --> 00:01:13,140
you keep your hand up if that's for

00:01:10,049 --> 00:01:14,299
node.js okay only a little bit okay so

00:01:13,140 --> 00:01:17,070
there are a few people using javascript

00:01:14,299 --> 00:01:19,320
with basil why would you do that

00:01:17,070 --> 00:01:21,030
so it's not actually true so you would

00:01:19,320 --> 00:01:22,979
think that the backends have the problem

00:01:21,030 --> 00:01:24,630
of being large-scale that you require

00:01:22,979 --> 00:01:25,560
compilers that you have a set of

00:01:24,630 --> 00:01:27,869
dependencies that you need to build

00:01:25,560 --> 00:01:28,979
before you can build your app and in the

00:01:27,869 --> 00:01:31,259
past maybe that wasn't true for most

00:01:28,979 --> 00:01:33,119
JavaScript apps but if we look at what

00:01:31,259 --> 00:01:36,900
we do at Google Google Cloud console for

00:01:33,119 --> 00:01:38,610
example has I believe 6500 JavaScript

00:01:36,900 --> 00:01:42,570
files extra their typescript files so

00:01:38,610 --> 00:01:44,009
it's a pretty big project and this is

00:01:42,570 --> 00:01:46,530
known externally as well so we just

00:01:44,009 --> 00:01:48,090
launched version 5 of angular and the

00:01:46,530 --> 00:01:50,130
the highlight I like from this blog post

00:01:48,090 --> 00:01:51,930
is that there are known speed issues

00:01:50,130 --> 00:01:53,820
running the build with projects with

00:01:51,930 --> 00:01:56,130
more than a thousand components and we

00:01:53,820 --> 00:01:58,380
on the angular team you know internally

00:01:56,130 --> 00:02:00,060
we have projects of that size and

00:01:58,380 --> 00:02:03,899
externally people with projects of that

00:02:00,060 --> 00:02:06,450
size have problems it's not all

00:02:03,899 --> 00:02:08,429
interpreted we've kind of we don't have

00:02:06,450 --> 00:02:11,069
we have compilers now for things like

00:02:08,429 --> 00:02:12,840
JavaScript HTML and CSS so angular has a

00:02:11,069 --> 00:02:13,959
compiler that takes HTML and turns into

00:02:12,840 --> 00:02:15,220
JavaScript

00:02:13,959 --> 00:02:16,269
the typescript compiler which will talk

00:02:15,220 --> 00:02:17,890
a little bit more about in this talk

00:02:16,269 --> 00:02:19,420
turns time trip in the JavaScript

00:02:17,890 --> 00:02:22,180
there's a compiler or extra several of

00:02:19,420 --> 00:02:25,989
them to take CSS pre-processed language

00:02:22,180 --> 00:02:28,060
and compile them into CSS and it's not

00:02:25,989 --> 00:02:29,650
monolithic web components is actually a

00:02:28,060 --> 00:02:32,890
standard now so you can actually publish

00:02:29,650 --> 00:02:34,480
a component that is used as used in

00:02:32,890 --> 00:02:36,760
somebody else's app and you can hang

00:02:34,480 --> 00:02:37,989
yourself has its own component system so

00:02:36,760 --> 00:02:40,659
we have basically all the same problems

00:02:37,989 --> 00:02:43,390
so the celebration is we brought Java to

00:02:40,659 --> 00:02:47,200
the web finally after so much promise we

00:02:43,390 --> 00:02:48,459
have all of this complexity but we broke

00:02:47,200 --> 00:02:50,170
it because web developers weren't

00:02:48,459 --> 00:02:52,269
expecting us to bring Java to the web

00:02:50,170 --> 00:02:53,590
right there they're expecting the change

00:02:52,269 --> 00:02:55,780
of J's file and hit refresh on the

00:02:53,590 --> 00:02:58,120
browser there's zero latency there so

00:02:55,780 --> 00:03:00,430
the the deb refresh cycle should be near

00:02:58,120 --> 00:03:01,659
instant or else there's a regression and

00:03:00,430 --> 00:03:03,310
like the pinterest guy said you can't

00:03:01,659 --> 00:03:04,150
sell somebody on a new development tool

00:03:03,310 --> 00:03:05,790
if there's a regression in their

00:03:04,150 --> 00:03:08,200
experience even if you think it's great

00:03:05,790 --> 00:03:09,579
and so ten seconds for build not

00:03:08,200 --> 00:03:10,720
acceptable at least for an incremental

00:03:09,579 --> 00:03:13,439
build right if I make a change I need to

00:03:10,720 --> 00:03:16,120
see it show up in the browser right away

00:03:13,439 --> 00:03:18,849
and you can ask developers what they

00:03:16,120 --> 00:03:20,019
want you know you could have if you had

00:03:18,849 --> 00:03:21,519
to choose do you want the different

00:03:20,019 --> 00:03:23,349
developer refresh or do you want to have

00:03:21,519 --> 00:03:25,000
compiled languages that help you not

00:03:23,349 --> 00:03:27,430
make mistakes and help you scale and

00:03:25,000 --> 00:03:28,870
they want both things and so this is

00:03:27,430 --> 00:03:30,310
this is I think well this is one of the

00:03:28,870 --> 00:03:31,690
two challenges in web development the

00:03:30,310 --> 00:03:33,190
other one is that web users want the

00:03:31,690 --> 00:03:34,659
same thing right they won't have a full

00:03:33,190 --> 00:03:35,889
application but not wait to download

00:03:34,659 --> 00:03:38,019
anything this when I click a link and go

00:03:35,889 --> 00:03:39,280
straight there so I think this is what's

00:03:38,019 --> 00:03:42,220
interesting and working in web

00:03:39,280 --> 00:03:45,459
front-ends so let's talk specifically

00:03:42,220 --> 00:03:46,930
about typescript a lot of this applies

00:03:45,459 --> 00:03:49,030
to angular as well but we'll talk about

00:03:46,930 --> 00:03:50,859
typescript specifically does anybody

00:03:49,030 --> 00:03:54,459
already know anything about site like

00:03:50,859 --> 00:03:57,340
use typescript before almost as many as

00:03:54,459 --> 00:03:59,319
have used javascript that's cool I will

00:03:57,340 --> 00:04:02,799
go through this quickly it's a it's a

00:03:59,319 --> 00:04:04,389
compiled language but it tries to be as

00:04:02,799 --> 00:04:06,099
much like JavaScript as possible so you

00:04:04,389 --> 00:04:07,180
take today's JavaScript do you add

00:04:06,099 --> 00:04:09,400
features that aren't available in all

00:04:07,180 --> 00:04:10,900
the browsers yet because you know sadly

00:04:09,400 --> 00:04:12,069
we have this this problem in the

00:04:10,900 --> 00:04:14,859
JavaScript world that our target

00:04:12,069 --> 00:04:16,930
platform is very amorphous and if it's

00:04:14,859 --> 00:04:19,389
ie6 then it's much different than if

00:04:16,930 --> 00:04:20,889
it's a different modern browser then we

00:04:19,389 --> 00:04:23,349
take parts of the future syntax of

00:04:20,889 --> 00:04:24,370
JavaScript and we add types and then we

00:04:23,349 --> 00:04:26,080
just compile that all down to today's

00:04:24,370 --> 00:04:27,800
JavaScript basically the compiler erases

00:04:26,080 --> 00:04:28,970
the types and downlevel some

00:04:27,800 --> 00:04:31,819
these new language features into

00:04:28,970 --> 00:04:33,979
something that's that's compatible

00:04:31,819 --> 00:04:35,870
today's browsers so for example this is

00:04:33,979 --> 00:04:37,210
ECMO script 5 which is basically today's

00:04:35,870 --> 00:04:40,370
JavaScript that's in all the browsers

00:04:37,210 --> 00:04:42,199
looks like that if we had this arrow

00:04:40,370 --> 00:04:43,879
this fat arrow and we have this back

00:04:42,199 --> 00:04:46,340
tick syntax for interpolating strings

00:04:43,879 --> 00:04:47,900
that's in yes 2015 most browsers have

00:04:46,340 --> 00:04:49,580
that now

00:04:47,900 --> 00:04:52,550
but then types people out of syntax were

00:04:49,580 --> 00:04:55,400
the types and that looks like this

00:04:52,550 --> 00:04:57,830
what's a colon you put a type there and

00:04:55,400 --> 00:04:59,389
of course we now have a type checker so

00:04:57,830 --> 00:05:00,379
this is part of the compiler you can

00:04:59,389 --> 00:05:01,490
imagine the compiler is really two

00:05:00,379 --> 00:05:03,560
separate things there's a type checker

00:05:01,490 --> 00:05:05,930
and then there's the code emitter type

00:05:03,560 --> 00:05:07,430
script tries to be very convenient for

00:05:05,930 --> 00:05:09,139
incremental adoption so one thing you

00:05:07,430 --> 00:05:10,789
can do is say oh I'm gonna treat all the

00:05:09,139 --> 00:05:13,219
type checks as warnings omit my code

00:05:10,789 --> 00:05:15,379
anyway and I keep going which we don't

00:05:13,219 --> 00:05:16,729
do in Basel but if you're moving your

00:05:15,379 --> 00:05:19,610
project over from JavaScript that's a

00:05:16,729 --> 00:05:21,139
very useful intermediate step to take so

00:05:19,610 --> 00:05:24,500
here we see that we can't call hello to

00:05:21,139 --> 00:05:25,490
with with a numeric argument but my

00:05:24,500 --> 00:05:27,949
favorite thing to stream at the type

00:05:25,490 --> 00:05:29,780
system is that you can you can imagine a

00:05:27,949 --> 00:05:32,210
lot of different type systems for

00:05:29,780 --> 00:05:33,560
JavaScript because you know that it's

00:05:32,210 --> 00:05:34,969
unconstrained right there's no existing

00:05:33,560 --> 00:05:36,409
type checker I'll know the programs have

00:05:34,969 --> 00:05:37,789
types in them so you have a lot of

00:05:36,409 --> 00:05:40,580
abilities to choose what kind of types

00:05:37,789 --> 00:05:42,020
you want to add the types of the

00:05:40,580 --> 00:05:44,330
typescript type system is specifically

00:05:42,020 --> 00:05:46,039
designed to match what is already

00:05:44,330 --> 00:05:48,169
happening in the browser or in the

00:05:46,039 --> 00:05:50,029
JavaScript runtime so for example the

00:05:48,169 --> 00:05:51,440
create element API on documents one of

00:05:50,029 --> 00:05:53,300
the basic Dom API is you'd use at the

00:05:51,440 --> 00:05:54,349
very beginning depending on what string

00:05:53,300 --> 00:05:55,940
literal you pass to it you get a

00:05:54,349 --> 00:05:57,289
different return type and that's pretty

00:05:55,940 --> 00:05:58,310
weird most languages I don't I don't

00:05:57,289 --> 00:06:01,729
know of another language that has that

00:05:58,310 --> 00:06:04,250
I'm sure somebody does I'm not going to

00:06:01,729 --> 00:06:05,659
make any guesses so you can call this a

00:06:04,250 --> 00:06:06,590
giraffe property on this thing because

00:06:05,659 --> 00:06:08,509
you know that gives you the right type

00:06:06,590 --> 00:06:09,919
and then as I said at the end it just

00:06:08,509 --> 00:06:11,479
erases the types and on levels the

00:06:09,919 --> 00:06:13,069
language features you get today's

00:06:11,479 --> 00:06:15,379
JavaScript part of the reason that I'm

00:06:13,069 --> 00:06:16,460
talking about this at the Basel

00:06:15,379 --> 00:06:17,840
conference even though you may be you

00:06:16,460 --> 00:06:18,949
don't use JavaScript you might know

00:06:17,840 --> 00:06:20,719
people at your company who do use

00:06:18,949 --> 00:06:21,830
JavaScript and you might sometimes

00:06:20,719 --> 00:06:23,330
scratch your head like what are those

00:06:21,830 --> 00:06:23,990
people doing and how does their code

00:06:23,330 --> 00:06:25,669
ever work

00:06:23,990 --> 00:06:28,129
you should really recommend that they

00:06:25,669 --> 00:06:29,990
try typescript it's very practical very

00:06:28,129 --> 00:06:31,310
easy to get on board and it and you know

00:06:29,990 --> 00:06:35,839
all the advantages of a type check

00:06:31,310 --> 00:06:38,270
language so before we dive into how we

00:06:35,839 --> 00:06:39,649
build it let's think about like so okay

00:06:38,270 --> 00:06:41,149
it's just one more compiler right like

00:06:39,649 --> 00:06:41,400
we're all running compilers under basil

00:06:41,149 --> 00:06:43,470
why

00:06:41,400 --> 00:06:44,970
different and I thought of a couple

00:06:43,470 --> 00:06:47,160
things in these slides probably we could

00:06:44,970 --> 00:06:49,580
talk about more so one of them is that

00:06:47,160 --> 00:06:52,050
we have different target language levels

00:06:49,580 --> 00:06:54,810
so for development mode we want to be

00:06:52,050 --> 00:06:56,039
able to produce one language level which

00:06:54,810 --> 00:06:57,810
is something that runs directly in the

00:06:56,039 --> 00:07:00,389
browser this is like the - - target flag

00:06:57,810 --> 00:07:02,520
for Java for example and for when we're

00:07:00,389 --> 00:07:03,750
doing an optimization we want to hand at

00:07:02,520 --> 00:07:05,070
the higher level language syntax because

00:07:03,750 --> 00:07:06,270
the optimizers can do more if you

00:07:05,070 --> 00:07:09,960
haven't already down leveled all the

00:07:06,270 --> 00:07:12,780
syntax so this is one place where I

00:07:09,960 --> 00:07:14,490
think basil can do something that no

00:07:12,780 --> 00:07:16,770
other make like build tool can do which

00:07:14,490 --> 00:07:18,389
is that if I want my individual

00:07:16,770 --> 00:07:20,010
libraries in this in this example to be

00:07:18,389 --> 00:07:21,720
producing one of these two different

00:07:20,010 --> 00:07:25,260
outputs depending on what rule depends

00:07:21,720 --> 00:07:26,430
on it you can actually have the like

00:07:25,260 --> 00:07:27,690
library one in this example would

00:07:26,430 --> 00:07:29,520
produce different outputs depending

00:07:27,690 --> 00:07:31,229
whether the dev mode is requesting it

00:07:29,520 --> 00:07:35,460
versus whether the production bundlers

00:07:31,229 --> 00:07:37,800
is requesting it the other thing about

00:07:35,460 --> 00:07:39,690
Java Script is that it's a crazy world

00:07:37,800 --> 00:07:41,699
it's not it's the flavor of the month

00:07:39,690 --> 00:07:43,770
very diverse tool chain is a nice way of

00:07:41,699 --> 00:07:44,759
saying flavor of the month so

00:07:43,770 --> 00:07:46,590
everybody's always making a new

00:07:44,759 --> 00:07:49,169
optimizer or a new compiler or a new

00:07:46,590 --> 00:07:50,310
language or a new syntax it's very like

00:07:49,169 --> 00:07:52,110
all you've to do is publish to NPM

00:07:50,310 --> 00:07:54,780
doesn't you don't to pay anything to

00:07:52,110 --> 00:07:56,990
publish to NPM so everybody does it some

00:07:54,780 --> 00:07:59,310
people do it multiple times a day so

00:07:56,990 --> 00:08:00,810
unfortunately those things are they're

00:07:59,310 --> 00:08:04,080
not really well engineered they're kind

00:08:00,810 --> 00:08:05,460
of developed very rapidly so in

00:08:04,080 --> 00:08:06,720
particular like we're not looking down

00:08:05,460 --> 00:08:08,250
that anybody who's developing this stuff

00:08:06,720 --> 00:08:09,360
but the real problem we end up with is

00:08:08,250 --> 00:08:12,090
that you end up with these layering

00:08:09,360 --> 00:08:13,470
violations so for example in angular we

00:08:12,090 --> 00:08:15,030
have to produce syntax in the output

00:08:13,470 --> 00:08:16,560
that exactly happens to correlate with

00:08:15,030 --> 00:08:18,419
some feature in the bundler in order to

00:08:16,560 --> 00:08:21,000
not MIT have a deoptimization happen and

00:08:18,419 --> 00:08:22,530
so a lot of these tools will have just

00:08:21,000 --> 00:08:24,750
some expectation about the inputs and

00:08:22,530 --> 00:08:28,740
then other tools have to have to work

00:08:24,750 --> 00:08:30,060
around that or or conform so let me hand

00:08:28,740 --> 00:08:43,169
it over to Mike to talk a little bit

00:08:30,060 --> 00:08:44,850
about what he's built okay yeah so we've

00:08:43,169 --> 00:08:47,160
been using typescript at asana for

00:08:44,850 --> 00:08:50,490
several years now our codebase initially

00:08:47,160 --> 00:08:52,740
used to be all JavaScript now we have

00:08:50,490 --> 00:08:54,840
mostly tight grip for the front end and

00:08:52,740 --> 00:08:58,380
an Scala for the back end

00:08:54,840 --> 00:09:00,180
and we decided to use basil as our build

00:08:58,380 --> 00:09:03,120
tool we've been using it for at least a

00:09:00,180 --> 00:09:05,660
year and a half maybe two years now asan

00:09:03,120 --> 00:09:09,890
is a pretty pretty large sophisticated

00:09:05,660 --> 00:09:12,990
application for doing work tracking and

00:09:09,890 --> 00:09:15,420
so this is there's a lot of jobs a lot

00:09:12,990 --> 00:09:18,330
of JavaScript downloaded to the browser

00:09:15,420 --> 00:09:21,050
in the in the main bundle in our touch

00:09:18,330 --> 00:09:24,029
script source code we have about 150

00:09:21,050 --> 00:09:27,170
basil packages and each file each

00:09:24,029 --> 00:09:34,500
package has about roughly 20 files or so

00:09:27,170 --> 00:09:37,470
so big not huge but big and the and the

00:09:34,500 --> 00:09:40,890
typescript compiler is actually pretty

00:09:37,470 --> 00:09:44,010
fast but we found that our wall clock

00:09:40,890 --> 00:09:46,650
time for a clean compile was about is

00:09:44,010 --> 00:09:48,480
about five minutes quite a lot longer

00:09:46,650 --> 00:09:51,120
than we want obviously you're not doing

00:09:48,480 --> 00:09:53,910
clean compiles that often you know

00:09:51,120 --> 00:09:55,830
because it caused basil and because it's

00:09:53,910 --> 00:09:58,589
we're also using the remote cache

00:09:55,830 --> 00:10:00,960
capabilities of basil but sometimes you

00:09:58,589 --> 00:10:03,240
are if you're modifying in our case if

00:10:00,960 --> 00:10:06,600
you're modifying a file that's part of

00:10:03,240 --> 00:10:08,520
our our data model that'll touch some

00:10:06,600 --> 00:10:11,880
higher-up files in the tree in the in

00:10:08,520 --> 00:10:14,490
the hierarchy of dependencies so two

00:10:11,880 --> 00:10:17,610
seconds to compile a type script package

00:10:14,490 --> 00:10:22,170
is is quite good but there are a hundred

00:10:17,610 --> 00:10:24,300
and fifty of them so it adds up so we

00:10:22,170 --> 00:10:26,339
wanted to see if we could improve the

00:10:24,300 --> 00:10:29,250
compile time overall and you know there

00:10:26,339 --> 00:10:30,780
are certain parallels to to what the

00:10:29,250 --> 00:10:33,270
Pinterest guys were talking about

00:10:30,780 --> 00:10:34,860
earlier in terms of you know certain

00:10:33,270 --> 00:10:37,709
roadblocks you run into and you know try

00:10:34,860 --> 00:10:41,100
varies at various strategies to to

00:10:37,709 --> 00:10:44,190
address them persistent workers is a are

00:10:41,100 --> 00:10:48,089
a feature of basil that worked out

00:10:44,190 --> 00:10:51,690
really well for us basil you can if you

00:10:48,089 --> 00:10:53,839
have a tool that understands how how to

00:10:51,690 --> 00:10:56,220
how to act as a persistent worker

00:10:53,839 --> 00:11:00,660
basically it launches once and it stays

00:10:56,220 --> 00:11:04,530
in memory after that accepting jobs from

00:11:00,660 --> 00:11:06,180
basil and and then returning results

00:11:04,530 --> 00:11:08,610
without so you know if you have a

00:11:06,180 --> 00:11:11,100
compiler you can you can launch it once

00:11:08,610 --> 00:11:14,399
and then it can read standard in in a

00:11:11,100 --> 00:11:16,860
protobuf format do it's compilation and

00:11:14,399 --> 00:11:18,390
then write any error messages or other

00:11:16,860 --> 00:11:21,690
output to standard out also in a

00:11:18,390 --> 00:11:24,420
protobuf format so basil launches your

00:11:21,690 --> 00:11:26,760
tool with this - - persistent work or

00:11:24,420 --> 00:11:27,990
argument and by the way the reason I'm

00:11:26,760 --> 00:11:30,990
part of the reason I'm telling you all

00:11:27,990 --> 00:11:32,820
this is we we did this for time script

00:11:30,990 --> 00:11:35,970
you can do it yourself if you have other

00:11:32,820 --> 00:11:41,040
tools in your tool chain that are that

00:11:35,970 --> 00:11:44,130
are adaptable to this to this process so

00:11:41,040 --> 00:11:46,950
and by the way Java's I mean Basil's

00:11:44,130 --> 00:11:49,649
built-in Java compiler is a persistent

00:11:46,950 --> 00:11:54,839
worker and they got a big speed-up from

00:11:49,649 --> 00:11:58,170
doing that so TSC is the typescript

00:11:54,839 --> 00:12:00,750
compiler so if you have a one-line es

00:11:58,170 --> 00:12:04,800
file it compiles one line of typescript

00:12:00,750 --> 00:12:08,850
and nineteen thousand lines of Lib des

00:12:04,800 --> 00:12:10,050
DTS files are there declaration files

00:12:08,850 --> 00:12:11,880
they're sort of like the transcript

00:12:10,050 --> 00:12:14,459
equivalent of a dot H file they have

00:12:11,880 --> 00:12:17,490
they list you know because type scripts

00:12:14,459 --> 00:12:20,610
main point is to give you type checking

00:12:17,490 --> 00:12:22,440
it has to it has to read this file to to

00:12:20,610 --> 00:12:26,760
find all the type declarations for the

00:12:22,440 --> 00:12:28,500
standard library and even again in

00:12:26,760 --> 00:12:31,620
nineteen thousand is a lot but it's only

00:12:28,500 --> 00:12:33,120
two seconds but if you can do that if

00:12:31,620 --> 00:12:34,980
you can read that once and keep it in

00:12:33,120 --> 00:12:38,850
memory you can save quite a bit of time

00:12:34,980 --> 00:12:41,310
in the case of asana we also have some

00:12:38,850 --> 00:12:43,610
other large DTS files so we'll have a

00:12:41,310 --> 00:12:45,899
tree of dependencies you know we'll have

00:12:43,610 --> 00:12:47,760
some core packages and then we'll have

00:12:45,899 --> 00:12:50,160
other packages that depend on those so

00:12:47,760 --> 00:12:52,500
like if we compile a core if we compile

00:12:50,160 --> 00:12:55,890
one basil package its output is a

00:12:52,500 --> 00:12:59,699
JavaScript file and a DTS file so that

00:12:55,890 --> 00:13:02,430
other packages can can you know see the

00:12:59,699 --> 00:13:06,149
type declarations so one typical

00:13:02,430 --> 00:13:09,149
asana package had only neck 894 lines of

00:13:06,149 --> 00:13:12,329
typescript and 81 thousand lines of DTS

00:13:09,149 --> 00:13:13,470
files you don't want to be reap arcing

00:13:12,329 --> 00:13:16,260
that all the time

00:13:13,470 --> 00:13:20,040
TSC is the typescript compiler and for

00:13:16,260 --> 00:13:22,560
this package in a test I ran it took 2.3

00:13:20,040 --> 00:13:24,660
seconds with basil TS

00:13:22,560 --> 00:13:28,769
which is the little tool we wrote it

00:13:24,660 --> 00:13:30,509
took 400 milliseconds so this cut our

00:13:28,769 --> 00:13:32,930
total build time from five minutes down

00:13:30,509 --> 00:13:35,939
to about a minute and a half

00:13:32,930 --> 00:13:37,499
initially by the way a Basel TSE is the

00:13:35,939 --> 00:13:41,999
name of the tool I initially called it

00:13:37,499 --> 00:13:44,370
Basel TSE but with a - basil - TFC and I

00:13:41,999 --> 00:13:47,100
was getting weird mysterious errors and

00:13:44,370 --> 00:13:50,610
it's because anything basil - you don't

00:13:47,100 --> 00:13:52,980
basil - Dan basil - there was something

00:13:50,610 --> 00:14:00,689
somewhere that was just deleting it so I

00:13:52,980 --> 00:14:04,829
changed the name so we wrote basil TSC

00:14:00,689 --> 00:14:06,480
about six months ago and and then in

00:14:04,829 --> 00:14:08,639
parallel to that we didn't realize that

00:14:06,480 --> 00:14:12,420
Google was actually working on their

00:14:08,639 --> 00:14:15,149
typescript tools so so ours is in github

00:14:12,420 --> 00:14:17,699
and NPM as basil TSC and they have

00:14:15,149 --> 00:14:20,279
another package called rules underscore

00:14:17,699 --> 00:14:22,949
typescript and I'll talk a little about

00:14:20,279 --> 00:14:24,449
just a very high-level overview of yeah

00:14:22,949 --> 00:14:25,379
oh here we go okay oh the next slide

00:14:24,449 --> 00:14:28,199
I'll do that

00:14:25,379 --> 00:14:30,809
rules time script is sort of a complete

00:14:28,199 --> 00:14:31,319
drop in solution for for using

00:14:30,809 --> 00:14:34,379
typescript

00:14:31,319 --> 00:14:36,660
and it's probably a little easier to get

00:14:34,379 --> 00:14:39,569
started with and it also by the way has

00:14:36,660 --> 00:14:42,120
a persistent worker which is implemented

00:14:39,569 --> 00:14:44,009
a little differently from ours basil TSC

00:14:42,120 --> 00:14:46,829
was really focused on the speed issue

00:14:44,009 --> 00:14:49,559
and and was initially created for our

00:14:46,829 --> 00:14:50,730
own internal use so so there will be a

00:14:49,559 --> 00:14:54,389
little more messing around you have to

00:14:50,730 --> 00:14:56,399
do with with the skylark rules getting

00:14:54,389 --> 00:14:58,199
them just right but we've been very

00:14:56,399 --> 00:15:01,829
happy with that we've been using it like

00:14:58,199 --> 00:15:03,540
I said for six months and the it's the

00:15:01,829 --> 00:15:05,189
performance has been great and the

00:15:03,540 --> 00:15:08,279
incremental compilation by the way has

00:15:05,189 --> 00:15:09,929
been rock solid which I think the

00:15:08,279 --> 00:15:11,279
typescript open source product gets some

00:15:09,929 --> 00:15:13,350
of the credit for that in the sense that

00:15:11,279 --> 00:15:17,329
when you give it an incremental change

00:15:13,350 --> 00:15:22,339
it I've never once seen an error from it

00:15:17,329 --> 00:15:26,910
so how do you make a persistent worker

00:15:22,339 --> 00:15:28,019
basil has build strategies I think there

00:15:26,910 --> 00:15:30,569
was a little bit of talk about that

00:15:28,019 --> 00:15:34,110
earlier but in some of the earlier talks

00:15:30,569 --> 00:15:36,300
you know there's the standalone which is

00:15:34,110 --> 00:15:37,830
a regular local build

00:15:36,300 --> 00:15:39,750
and box which is always better than

00:15:37,830 --> 00:15:43,650
standalone that's a but that's also a

00:15:39,750 --> 00:15:46,320
local build on or a remote build and one

00:15:43,650 --> 00:15:48,240
of the strategies is worker and that's

00:15:46,320 --> 00:15:51,120
and that's what you pass if you if you

00:15:48,240 --> 00:15:53,910
want basil to to invoke your tool with

00:15:51,120 --> 00:15:59,340
the - - persistent worker flag you also

00:15:53,910 --> 00:16:01,860
in the skylark file you need to say this

00:15:59,340 --> 00:16:08,400
execution requirements equals supports

00:16:01,860 --> 00:16:13,500
workers : one one other point I want to

00:16:08,400 --> 00:16:15,210
mention about build strategies so when

00:16:13,500 --> 00:16:17,970
we were doing this work a few months ago

00:16:15,210 --> 00:16:21,210
the you could build us with the worker

00:16:17,970 --> 00:16:24,060
strategy or you could build using a

00:16:21,210 --> 00:16:27,270
remote cache but you couldn't do both

00:16:24,060 --> 00:16:29,490
now I think there is a flag experimental

00:16:27,270 --> 00:16:32,280
remote spawn cache I think that's the

00:16:29,490 --> 00:16:35,520
name of the flag okay which will which

00:16:32,280 --> 00:16:36,620
will let you use both together so that's

00:16:35,520 --> 00:16:41,190
definitely helpful

00:16:36,620 --> 00:16:43,290
so a typical build file so this is all

00:16:41,190 --> 00:16:44,760
this is all the implementation gory

00:16:43,290 --> 00:16:46,410
details that are in this guy like file

00:16:44,760 --> 00:16:48,240
and you won't have to worry about this

00:16:46,410 --> 00:16:51,810
very often most of the time you'll just

00:16:48,240 --> 00:16:54,180
be writing a build file and TSC is the

00:16:51,810 --> 00:16:57,390
name of our rule name equals my package

00:16:54,180 --> 00:17:01,520
sources equals list of sources and then

00:16:57,390 --> 00:17:08,940
outputs a J's file the source map and

00:17:01,520 --> 00:17:10,650
the DTS file it's pretty simple and like

00:17:08,940 --> 00:17:16,680
I said I touched on this a little bit

00:17:10,650 --> 00:17:18,420
but the the compiler API gives us it's

00:17:16,680 --> 00:17:21,720
it's a it's a it's a very well

00:17:18,420 --> 00:17:23,520
architected modular piece of code in the

00:17:21,720 --> 00:17:25,550
typescript compiler it was designed in

00:17:23,520 --> 00:17:27,810
fact from the beginning to be that way

00:17:25,550 --> 00:17:31,590
so that I DES

00:17:27,810 --> 00:17:34,740
any IDE not just once a Microsoft sort

00:17:31,590 --> 00:17:36,840
you know sort of created type script in

00:17:34,740 --> 00:17:39,060
the same way that Google created basale

00:17:36,840 --> 00:17:41,670
typescript is open source but Microsoft

00:17:39,060 --> 00:17:45,300
sort of drives the project and they

00:17:41,670 --> 00:17:48,600
created it to be you know so you could

00:17:45,300 --> 00:17:50,820
get a autocomplete and go to definition

00:17:48,600 --> 00:17:52,590
and things like that from any ID

00:17:50,820 --> 00:17:55,950
so even you know there are BIM

00:17:52,590 --> 00:17:58,560
extensions or IntelliJ up you know

00:17:55,950 --> 00:18:03,000
extensions that all use the same type

00:17:58,560 --> 00:18:05,070
script back-end and and so they wanted

00:18:03,000 --> 00:18:07,800
to make it rich enough to support things

00:18:05,070 --> 00:18:10,170
like you know if the user is typing in a

00:18:07,800 --> 00:18:12,330
file it doesn't want to recompile the

00:18:10,170 --> 00:18:16,620
whole file every time every time he

00:18:12,330 --> 00:18:20,310
types a line of code so so it can it can

00:18:16,620 --> 00:18:24,060
cache the full ast or abstract syntax

00:18:20,310 --> 00:18:26,340
tree of a file and it can also cache the

00:18:24,060 --> 00:18:30,390
the symbol table bindings if you prefer

00:18:26,340 --> 00:18:33,510
to you know a variable foo it will once

00:18:30,390 --> 00:18:40,980
find the right food to bind that to for

00:18:33,510 --> 00:18:45,450
for type checking and let's see okay so

00:18:40,980 --> 00:18:49,110
our tool is at github calm slash asana

00:18:45,450 --> 00:18:50,430
slash basil TSC if you want to try it if

00:18:49,110 --> 00:18:52,860
you want to if you want to use it you

00:18:50,430 --> 00:18:57,120
just use NPM with the command line shown

00:18:52,860 --> 00:19:04,680
here and and I think we have time to do

00:18:57,120 --> 00:19:11,670
a quick demo so a prompt is too long so

00:19:04,680 --> 00:19:19,260
I'm going to shorten it yay old school

00:19:11,670 --> 00:19:22,050
okay so I'm going to there's nothing

00:19:19,260 --> 00:19:26,910
here I'm going to create a a dummy node

00:19:22,050 --> 00:19:29,840
project okay so now I just have a

00:19:26,910 --> 00:19:32,970
package.json then I'm going to install

00:19:29,840 --> 00:19:35,160
basil TSC if you've done node before

00:19:32,970 --> 00:19:36,600
there are regular dependencies in there

00:19:35,160 --> 00:19:38,790
or dev dependencies the dev dependencies

00:19:36,600 --> 00:19:42,870
are only needed at Build time so I'm

00:19:38,790 --> 00:19:51,900
going to say npm install saved of basil

00:19:42,870 --> 00:19:54,540
TSC okay and it did print a warning here

00:19:51,900 --> 00:19:55,920
basil TSC requires a peer of typescript

00:19:54,540 --> 00:19:58,560
greater than or equal to two point oh

00:19:55,920 --> 00:20:00,210
point two but none is installed so peter

00:19:58,560 --> 00:20:04,110
dependencies if you haven't used those

00:20:00,210 --> 00:20:06,059
are you know it's like you install yours

00:20:04,110 --> 00:20:08,280
self you decide which version you want

00:20:06,059 --> 00:20:10,290
and install it but this tool is going to

00:20:08,280 --> 00:20:15,809
be looking for typescript so we'll just

00:20:10,290 --> 00:20:18,540
install that NPM install save dev type

00:20:15,809 --> 00:20:22,200
script you're not seeing me do any basil

00:20:18,540 --> 00:20:26,520
here this is more just a demo of this of

00:20:22,200 --> 00:20:29,100
this tool okay so now if I let's create

00:20:26,520 --> 00:20:34,760
a one-line type script file it's gonna

00:20:29,100 --> 00:20:40,500
be exciting console.log hello is a

00:20:34,760 --> 00:20:43,950
conference okay so to compile it

00:20:40,500 --> 00:20:46,110
so things up CSE has three ways it can

00:20:43,950 --> 00:20:50,070
run the way it'll run most of the time

00:20:46,110 --> 00:20:52,500
is with - - persistent worker and like I

00:20:50,070 --> 00:20:55,710
said it's accepting protobuf on standard

00:20:52,500 --> 00:20:56,910
en I don't know how to type protobuf

00:20:55,710 --> 00:21:00,780
from the keyboard maybe you're better

00:20:56,910 --> 00:21:03,090
than I am but but it has a - - debug

00:21:00,780 --> 00:21:06,480
flag which lets you just type commands

00:21:03,090 --> 00:21:11,460
in and use it in the same way so if I do

00:21:06,480 --> 00:21:14,070
mode modules dot B and slash basil TSC -

00:21:11,460 --> 00:21:15,809
dash debug okay so now I have a prompt

00:21:14,070 --> 00:21:19,650
and I can basically give it a fall

00:21:15,809 --> 00:21:22,140
TSC build line with any flags or or

00:21:19,650 --> 00:21:26,040
arguments so I can just say X dot TS

00:21:22,140 --> 00:21:28,590
it's and it compiles it and it says

00:21:26,040 --> 00:21:29,850
compilation took 1050 two milliseconds

00:21:28,590 --> 00:21:33,780
and now let's try it again

00:21:29,850 --> 00:21:36,540
X dot TS and it took 471 milliseconds

00:21:33,780 --> 00:21:39,000
that time again the difference is

00:21:36,540 --> 00:21:42,150
because of the Lib DTS which was already

00:21:39,000 --> 00:21:44,610
cached before and obviously this is also

00:21:42,150 --> 00:21:50,179
not showing the difference in startup

00:21:44,610 --> 00:21:50,179
time of the of the compiler okay thanks

00:21:51,530 --> 00:21:57,510
alright so yeah that's the the ability

00:21:55,950 --> 00:21:59,100
to do this with persistent workers is

00:21:57,510 --> 00:22:01,500
something that we take advantage of

00:21:59,100 --> 00:22:03,960
within Google also and the rules

00:22:01,500 --> 00:22:05,580
typescript package does the same thing I

00:22:03,960 --> 00:22:06,900
want to talk about a couple other

00:22:05,580 --> 00:22:08,850
additional things that we do to make

00:22:06,900 --> 00:22:11,340
things fast in typescript not exhaustive

00:22:08,850 --> 00:22:13,020
list at all so as Mike mentioned before

00:22:11,340 --> 00:22:14,880
we have these DTS files that are like

00:22:13,020 --> 00:22:16,230
header files and if you're familiar with

00:22:14,880 --> 00:22:17,490
the way basil does incremental

00:22:16,230 --> 00:22:20,010
compilation

00:22:17,490 --> 00:22:21,570
those are going to be the inputs to an

00:22:20,010 --> 00:22:22,860
action that depends on some library so

00:22:21,570 --> 00:22:24,450
if the library hey is compiled and it

00:22:22,860 --> 00:22:26,000
reduces the DTS file that's the input to

00:22:24,450 --> 00:22:29,100
the next library be that depends on it

00:22:26,000 --> 00:22:30,210
and so of course as long as we keep our

00:22:29,100 --> 00:22:31,410
compilations in these packages

00:22:30,210 --> 00:22:32,820
independent then we don't have to do a

00:22:31,410 --> 00:22:34,950
cascading rebuild if you make a change

00:22:32,820 --> 00:22:36,270
it should only rebuild the thing that's

00:22:34,950 --> 00:22:37,260
the things that are affected so the time

00:22:36,270 --> 00:22:40,230
there is proportional to what you

00:22:37,260 --> 00:22:41,910
changed not surprising to any of you but

00:22:40,230 --> 00:22:42,780
if you go to a JavaScript conference and

00:22:41,910 --> 00:22:45,120
you say hey our build tool is

00:22:42,780 --> 00:22:46,800
incremental people are surprised and

00:22:45,120 --> 00:22:48,470
that and as you know that the build is

00:22:46,800 --> 00:22:51,929
not always clean and surprising to them

00:22:48,470 --> 00:22:53,100
and of course it's parallelizable so one

00:22:51,929 --> 00:22:54,630
of the things you get with workers is

00:22:53,100 --> 00:22:56,010
that you parallelize over as many cores

00:22:54,630 --> 00:22:57,660
as you have on the machine I think by

00:22:56,010 --> 00:22:59,130
default you get one core left over for

00:22:57,660 --> 00:23:00,809
the user to use so I took this

00:22:59,130 --> 00:23:02,100
screenshot over with the team that's

00:23:00,809 --> 00:23:04,710
using angular while they're compiling

00:23:02,100 --> 00:23:05,790
compilation was going on and all 12 CPUs

00:23:04,710 --> 00:23:07,470
were maxed out during typescript

00:23:05,790 --> 00:23:08,550
compilation to you guys that might seem

00:23:07,470 --> 00:23:09,720
like hah why do you have so much time

00:23:08,550 --> 00:23:12,809
feel good to me this is very exciting

00:23:09,720 --> 00:23:15,990
that this works faster than if it was

00:23:12,809 --> 00:23:17,250
one CPU but of course of course we have

00:23:15,990 --> 00:23:18,809
the busy basil build farm we're all

00:23:17,250 --> 00:23:20,570
interested in the remote action

00:23:18,809 --> 00:23:22,620
execution this is something that I think

00:23:20,570 --> 00:23:24,720
angular users are gonna benefit a lot

00:23:22,620 --> 00:23:26,460
from I was exciting to hear from off

00:23:24,720 --> 00:23:27,570
this morning that that were there's

00:23:26,460 --> 00:23:30,240
gonna be experimental one offered by

00:23:27,570 --> 00:23:33,500
Google I think this is going to be a big

00:23:30,240 --> 00:23:35,550
deal for test parallelization as well

00:23:33,500 --> 00:23:37,650
and then there's one last thing I wanted

00:23:35,550 --> 00:23:38,910
to bring up which is kind of my pet

00:23:37,650 --> 00:23:40,200
project and we just launched at the end

00:23:38,910 --> 00:23:42,570
of last week so this is my first chance

00:23:40,200 --> 00:23:44,550
to talk about it so this is actually

00:23:42,570 --> 00:23:46,350
Java which I used to work in Java before

00:23:44,550 --> 00:23:47,520
I moved to angular team at the bottom of

00:23:46,350 --> 00:23:50,970
this log there's a link to error-prone

00:23:47,520 --> 00:23:52,320
info so this was my 20% project we were

00:23:50,970 --> 00:23:53,820
doing static analysis and we said hey

00:23:52,320 --> 00:23:55,950
this is wasting the developers time and

00:23:53,820 --> 00:23:57,570
if you think about the the the latency

00:23:55,950 --> 00:23:59,280
of the compiler what the user cares

00:23:57,570 --> 00:24:00,600
about is partly they care how quickly

00:23:59,280 --> 00:24:01,530
you can produce the output but then they

00:24:00,600 --> 00:24:03,210
also care about how quickly their

00:24:01,530 --> 00:24:04,350
program works and so if we look at it

00:24:03,210 --> 00:24:06,120
holistically what's the real user

00:24:04,350 --> 00:24:08,580
perceived latency it includes finding

00:24:06,120 --> 00:24:09,750
their mistakes and so this is a cool way

00:24:08,580 --> 00:24:10,980
to say hey like this this basically

00:24:09,750 --> 00:24:12,210
there's a bug in the java code up here

00:24:10,980 --> 00:24:14,280
it's too small for you all to find it

00:24:12,210 --> 00:24:15,960
I'm sure you would very quickly and we

00:24:14,280 --> 00:24:17,130
can point it out in the compilation so

00:24:15,960 --> 00:24:19,920
what we just did is the same thing for

00:24:17,130 --> 00:24:22,830
typescript maybe called CT which is a

00:24:19,920 --> 00:24:24,480
bug starts with TS so this code on the

00:24:22,830 --> 00:24:26,550
top we call this values dot filter

00:24:24,480 --> 00:24:27,840
filter has no side effects so it's

00:24:26,550 --> 00:24:30,179
always wrong to throw away the return

00:24:27,840 --> 00:24:31,380
value and now our typescript compiler

00:24:30,179 --> 00:24:32,610
tells you that

00:24:31,380 --> 00:24:34,500
and the reason I'm mentioning it in this

00:24:32,610 --> 00:24:36,390
talk is that one of the advantages for

00:24:34,500 --> 00:24:38,039
us hosting a typescript compiler inside

00:24:36,390 --> 00:24:39,510
of Basel is that we can also do more

00:24:38,039 --> 00:24:42,150
things that basil is good at like static

00:24:39,510 --> 00:24:44,610
analysis and tooling for being able to

00:24:42,150 --> 00:24:46,110
for example everywhere inside of Google

00:24:44,610 --> 00:24:47,490
we had to fix this before we could turn

00:24:46,110 --> 00:24:48,990
this on and so we can use things like

00:24:47,490 --> 00:24:51,270
extra actions to automatically apply

00:24:48,990 --> 00:24:52,710
fixes across the whole repository so

00:24:51,270 --> 00:24:53,429
that stuff is cool and I'm very excited

00:24:52,710 --> 00:24:54,510
that we're starting to do that in

00:24:53,429 --> 00:24:55,919
typescript I think there are a lot more

00:24:54,510 --> 00:24:57,720
examples like this of a program that's

00:24:55,919 --> 00:24:59,490
obviously wrong you can tell a compile

00:24:57,720 --> 00:25:01,020
time and the developers should always

00:24:59,490 --> 00:25:02,520
say but the compiler could have caught

00:25:01,020 --> 00:25:04,020
that and is the compiler and people we

00:25:02,520 --> 00:25:05,880
should take it take pay attention to

00:25:04,020 --> 00:25:09,409
that

00:25:05,880 --> 00:25:11,250
so we're wrapping up so first of all

00:25:09,409 --> 00:25:13,350
they'll be linked to the slides at the

00:25:11,250 --> 00:25:16,080
end so here are a bunch of links to the

00:25:13,350 --> 00:25:19,110
various rules so the ones I work on at

00:25:16,080 --> 00:25:20,429
Google so we have the node.js rules to

00:25:19,110 --> 00:25:22,260
give you the node runtime to run

00:25:20,429 --> 00:25:23,370
JavaScript then there's at basil slash

00:25:22,260 --> 00:25:25,350
typescript which is where you can get

00:25:23,370 --> 00:25:26,909
the rules typescript package there's at

00:25:25,350 --> 00:25:28,559
angular slash basil which is where you

00:25:26,909 --> 00:25:30,390
get the angular rules to compile run the

00:25:28,559 --> 00:25:32,039
angular compiler in basil and then I

00:25:30,390 --> 00:25:34,409
have this example repo angular basil

00:25:32,039 --> 00:25:35,909
example that ties it all together at

00:25:34,409 --> 00:25:38,070
least whichever bits are currently live

00:25:35,909 --> 00:25:40,890
which is not the whole thing yet here's

00:25:38,070 --> 00:25:43,200
a link to the asana rules and also some

00:25:40,890 --> 00:25:44,820
this is open source is great right all

00:25:43,200 --> 00:25:46,679
of us are writing this stuff at the same

00:25:44,820 --> 00:25:48,450
time I know Paul Johnson is here who

00:25:46,679 --> 00:25:49,590
wrote the pub ref one of these a couple

00:25:48,450 --> 00:25:54,240
other companies already wrote their own

00:25:49,590 --> 00:25:56,730
node rules so you know please please be

00:25:54,240 --> 00:25:57,780
open-source savvy and and contribute to

00:25:56,730 --> 00:26:01,289
these or open source the rules you have

00:25:57,780 --> 00:26:02,909
and let's all learn from each other the

00:26:01,289 --> 00:26:04,260
current state of these things so as Mike

00:26:02,909 --> 00:26:07,440
said you can use this stuff now for

00:26:04,260 --> 00:26:09,600
clabe script code we are missing a level

00:26:07,440 --> 00:26:10,799
of interoperability which has been on my

00:26:09,600 --> 00:26:13,080
plate for a while something we need to

00:26:10,799 --> 00:26:14,490
do so the idea is if you use let's say

00:26:13,080 --> 00:26:15,390
use the TSC rule that makes sure and

00:26:14,490 --> 00:26:17,039
then later you want to swap it out for

00:26:15,390 --> 00:26:18,809
TS library the outputs don't look

00:26:17,039 --> 00:26:20,940
exactly the same and so rules downstream

00:26:18,809 --> 00:26:22,590
that have a dependency on those may or

00:26:20,940 --> 00:26:24,690
may not still work and depends of course

00:26:22,590 --> 00:26:26,580
in basil there are an explicit output

00:26:24,690 --> 00:26:27,780
files so dodgiest files but then there

00:26:26,580 --> 00:26:28,940
are implicit outputs and there are

00:26:27,780 --> 00:26:31,440
things that could be accessed through

00:26:28,940 --> 00:26:33,419
skylark aspects like the providers and

00:26:31,440 --> 00:26:34,409
so the API is not exactly the same so we

00:26:33,419 --> 00:26:36,510
need to figure what the interoperability

00:26:34,409 --> 00:26:38,730
there should be and that's also a

00:26:36,510 --> 00:26:40,409
prerequisite for using other JavaScript

00:26:38,730 --> 00:26:42,059
or where rules in the ecosystem so for

00:26:40,409 --> 00:26:44,010
example rules closure runs Google's

00:26:42,059 --> 00:26:45,040
closure compiler as an optimizer that

00:26:44,010 --> 00:26:47,260
doesn't work yet

00:26:45,040 --> 00:26:50,050
with with my typescript rules I don't

00:26:47,260 --> 00:26:51,070
know if it works with yours yet other

00:26:50,050 --> 00:26:52,720
things that are going on the angular

00:26:51,070 --> 00:26:54,070
team is switching or switching our own

00:26:52,720 --> 00:26:55,300
build over to Basel because we have a

00:26:54,070 --> 00:26:57,240
gigantic build it's been a shell script

00:26:55,300 --> 00:27:00,100
for a couple of years it's pretty bad

00:26:57,240 --> 00:27:03,730
and at the same time as soon as we can

00:27:00,100 --> 00:27:04,960
compile angular itself then we will have

00:27:03,730 --> 00:27:08,830
all the rules needed for our users to

00:27:04,960 --> 00:27:11,020
switch and my long-term vision work I'm

00:27:08,830 --> 00:27:11,740
doing is that eventually everybody uses

00:27:11,020 --> 00:27:13,500
the angular CLI

00:27:11,740 --> 00:27:15,490
which is mostly the angular developers

00:27:13,500 --> 00:27:16,840
the build system is hidden from them

00:27:15,490 --> 00:27:18,220
it's currently webpack but they don't

00:27:16,840 --> 00:27:19,660
there's no visibility of it and so we

00:27:18,220 --> 00:27:21,490
could change the build system to Basel

00:27:19,660 --> 00:27:22,630
once we get this stuff mature which

00:27:21,490 --> 00:27:27,690
would be cool there's like a million of

00:27:22,630 --> 00:27:29,920
those people ok so last thing next steps

00:27:27,690 --> 00:27:31,090
slides link is here make sure you take a

00:27:29,920 --> 00:27:33,460
picture if you want before this light

00:27:31,090 --> 00:27:34,780
goes away so if you if you happen to use

00:27:33,460 --> 00:27:36,880
both angular and Basel I talked to one

00:27:34,780 --> 00:27:37,930
team today that does that please talk to

00:27:36,880 --> 00:27:40,960
me because I'm interested in finding

00:27:37,930 --> 00:27:41,800
early adopters for the angular rules and

00:27:40,960 --> 00:27:43,120
if you want to implement your own

00:27:41,800 --> 00:27:44,680
persistent workers or you want to know

00:27:43,120 --> 00:27:47,830
more about how they work come talk to

00:27:44,680 --> 00:27:49,270
Mike and and lastly if you use

00:27:47,830 --> 00:27:51,430
JavaScript which probably a lot of your

00:27:49,270 --> 00:27:53,200
companies do somewhere definitely think

00:27:51,430 --> 00:27:56,040
about using typescript and Basel is a

00:27:53,200 --> 00:27:56,040

YouTube URL: https://www.youtube.com/watch?v=0pgERydGyqo


