Title: Integration testing with Bazel w Dropbox
Publication date: 2017-12-08
Playlist: BazelCon 2017
Description: 
	by Benjamin Peterson (Dropbox)

Image credits:

“Fresh Pesto.jpeg” by David Johnson CC BY-SA 3.0
https://commons.wikimedia.org/wiki/File:Fresh_Pesto.jpeg

Lockheed's "Blue Cube".jpg by Erik Charlton CC BY-SA 2.0
https://commons.wikimedia.org/wiki/File:Lockheed%27s_%22Blue_Cube%22.jpg

“Elderly shed 269720.jpg” by Bob Harvey CC BY-SA 2.0
http://www.geograph.org.uk/photo/269720

“Snowflake Detail.jpg” by Charles Schmitt
https://upload.wikimedia.org/wikipedia/commons/a/a2/Snowflake_Detail.jpg

Testing pyramid illustrated by Alister Scott

“Basil dying” by aaronlk CC BY-NC-SA 2.0
https://www.flickr.com/photos/akreider/8137336764
Captions: 
	00:00:00,060 --> 00:00:05,100
all right everyone uh thank you thank

00:00:03,330 --> 00:00:06,960
you very much for coming to my talk um

00:00:05,100 --> 00:00:08,940
good afternoon I'm particularly

00:00:06,960 --> 00:00:10,469
flattered that you all showed up when

00:00:08,940 --> 00:00:12,269
it's the last talk of the conference you

00:00:10,469 --> 00:00:14,070
could be out enjoying all the many

00:00:12,269 --> 00:00:17,430
cultural experiences that Sunnyvale has

00:00:14,070 --> 00:00:18,900
to offer I mean like Sunnyvale is the

00:00:17,430 --> 00:00:22,859
home of the one and only Haunted

00:00:18,900 --> 00:00:25,859
toys-r-us supposedly haunted by the

00:00:22,859 --> 00:00:28,619
ghost of a farmhand who died in the

00:00:25,859 --> 00:00:30,050
orchard that became the toys-r-us though

00:00:28,619 --> 00:00:31,980
it's not too late to get your late

00:00:30,050 --> 00:00:35,040
Halloween thrills in your early

00:00:31,980 --> 00:00:41,219
Christmas shopping in also in Sunnyvale

00:00:35,040 --> 00:00:43,950
was blue cube full of four military Air

00:00:41,219 --> 00:00:46,190
Force installation full of people

00:00:43,950 --> 00:00:48,270
probably tapping datacentre links

00:00:46,190 --> 00:00:50,100
actually there's demolish a few years

00:00:48,270 --> 00:00:52,320
ago but you can go look at the empty

00:00:50,100 --> 00:00:54,270
space and use your imagination but the

00:00:52,320 --> 00:00:58,309
thing that people really come to

00:00:54,270 --> 00:01:01,109
Sunnyvale for are things like this yes

00:00:58,309 --> 00:01:02,760
yes the only the only housing four

00:01:01,109 --> 00:01:05,460
kilometers in any direction is less than

00:01:02,760 --> 00:01:07,140
billion dollars this is a particularly a

00:01:05,460 --> 00:01:09,619
progressive instance you can see because

00:01:07,140 --> 00:01:12,479
it's literally in someone's backyard

00:01:09,619 --> 00:01:14,189
alright so presumably you actually want

00:01:12,479 --> 00:01:16,770
to hear of integration testing so let's

00:01:14,189 --> 00:01:18,869
move on to that part so I work at

00:01:16,770 --> 00:01:22,080
Dropbox and our developer infrastructure

00:01:18,869 --> 00:01:27,380
group so that means we're responsible

00:01:22,080 --> 00:01:30,540
for everything that our engineers use to

00:01:27,380 --> 00:01:33,270
build Dropbox so everything from version

00:01:30,540 --> 00:01:36,329
control build system CI systems and the

00:01:33,270 --> 00:01:38,759
processes are those used for so to use a

00:01:36,329 --> 00:01:40,650
terrible mixed metaphor we produce the

00:01:38,759 --> 00:01:42,930
box cutters and the glue that our

00:01:40,650 --> 00:01:45,360
engineers used to make premium cloud

00:01:42,930 --> 00:01:48,380
storage solutions we're all hoping the

00:01:45,360 --> 00:01:52,170
card stock price will be high

00:01:48,380 --> 00:01:54,149
of course they either use the box

00:01:52,170 --> 00:01:55,500
cutters to make premium cloud storage

00:01:54,149 --> 00:01:57,479
solutions or they cut off their pinky

00:01:55,500 --> 00:02:00,990
fingers and are unable to use Emacs ever

00:01:57,479 --> 00:02:02,399
again so we're gonna talk about

00:02:00,990 --> 00:02:04,259
integration testing and it would behoove

00:02:02,399 --> 00:02:06,750
me do actually define what I'm going to

00:02:04,259 --> 00:02:08,190
talk about so for the purpose of this

00:02:06,750 --> 00:02:10,259
talking to define an integration test

00:02:08,190 --> 00:02:11,879
mean a test that requires more than one

00:02:10,259 --> 00:02:13,770
process running in order for the test to

00:02:11,879 --> 00:02:15,500
work so many people would disagree

00:02:13,770 --> 00:02:19,050
this definition they would be correct

00:02:15,500 --> 00:02:20,940
but I'm gonna adopt this definition for

00:02:19,050 --> 00:02:26,550
this talk because that's gonna be the

00:02:20,940 --> 00:02:28,650
focus of it so our story starts back in

00:02:26,550 --> 00:02:33,510
the medieval ages in the year to zero

00:02:28,650 --> 00:02:35,940
one six so back in those days if you

00:02:33,510 --> 00:02:37,860
were a Dropbox engineer and you wanted

00:02:35,940 --> 00:02:39,560
to run something on our CI system all

00:02:37,860 --> 00:02:42,750
you do is you would write a shell script

00:02:39,560 --> 00:02:45,300
and then our CI system would run that in

00:02:42,750 --> 00:02:48,390
a container somewhere so that was very

00:02:45,300 --> 00:02:49,680
flexible but it did mean that everyone

00:02:48,390 --> 00:02:52,200
had to do everything by hand from

00:02:49,680 --> 00:02:56,550
building to testing to collecting

00:02:52,200 --> 00:02:58,980
collecting results and so people adopted

00:02:56,550 --> 00:03:02,280
many terrible ways to do this such as

00:02:58,980 --> 00:03:03,930
using shell job control the native init

00:03:02,280 --> 00:03:06,180
systems of the underlying systems like

00:03:03,930 --> 00:03:08,310
upstart and Layton system D and

00:03:06,180 --> 00:03:11,670
configuration management systems like

00:03:08,310 --> 00:03:14,190
puppet and partially and resolve this

00:03:11,670 --> 00:03:15,900
but also the separate issues all are

00:03:14,190 --> 00:03:19,770
many of our tests were just wildly non

00:03:15,900 --> 00:03:22,050
hermetic we had tests running against

00:03:19,770 --> 00:03:23,190
our production servers test downloading

00:03:22,050 --> 00:03:26,790
random code from the internet and

00:03:23,190 --> 00:03:28,260
executing it and all this building to

00:03:26,790 --> 00:03:33,050
our development environments some of

00:03:28,260 --> 00:03:35,970
which which used some of the same CI

00:03:33,050 --> 00:03:37,440
shell script so to give you a taste of

00:03:35,970 --> 00:03:39,210
the things we're doing with here is our

00:03:37,440 --> 00:03:40,950
puppet module for setting up my sequel

00:03:39,210 --> 00:03:44,070
so as you can see there's a service

00:03:40,950 --> 00:03:49,020
definition for my sequel which you know

00:03:44,070 --> 00:03:54,120
handles my sequel being in Baltimore

00:03:49,020 --> 00:03:55,590
places maybe and but you know this is I

00:03:54,120 --> 00:03:58,640
literally pull this code out before

00:03:55,590 --> 00:04:01,950
deleting it it was actually there and

00:03:58,640 --> 00:04:03,030
and but you know just starting my sequel

00:04:01,950 --> 00:04:03,990
isn't enough because you know I might

00:04:03,030 --> 00:04:05,220
not be able to serve requests

00:04:03,990 --> 00:04:06,810
immediately so you also have the my

00:04:05,220 --> 00:04:08,940
single health check which is the crappy

00:04:06,810 --> 00:04:11,220
shell script which puppet retries up to

00:04:08,940 --> 00:04:12,390
50 times in order to see whether my

00:04:11,220 --> 00:04:14,880
sequel is actually running or not

00:04:12,390 --> 00:04:17,280
so puppet is very very good at you know

00:04:14,880 --> 00:04:19,380
making sure a file somewhere on disk is

00:04:17,280 --> 00:04:21,600
has some particular contents but it's

00:04:19,380 --> 00:04:23,610
not a very good service manager but we

00:04:21,600 --> 00:04:25,530
had hundreds and hundreds of these these

00:04:23,610 --> 00:04:27,960
kinds of things in our puppet codebase

00:04:25,530 --> 00:04:31,710
setting up and running services

00:04:27,960 --> 00:04:33,780
so in 2016 we had all this stuff on the

00:04:31,710 --> 00:04:35,760
meantime we had a lot we're growing

00:04:33,780 --> 00:04:39,090
company lots more engineers a lot more

00:04:35,760 --> 00:04:40,710
code a lot more tests a lot more

00:04:39,090 --> 00:04:43,350
services so we're getting more and more

00:04:40,710 --> 00:04:45,810
of the shell scripts puppet modules I

00:04:43,350 --> 00:04:48,300
was becoming incur Slee in tenable on

00:04:45,810 --> 00:04:51,270
the meantime we were happily migrating

00:04:48,300 --> 00:04:53,550
all of our server-side builds to Basel

00:04:51,270 --> 00:04:57,270
and we were wondering how can we get all

00:04:53,550 --> 00:05:01,170
these integration tests into Basel and

00:04:57,270 --> 00:05:02,850
so this talk is a story of the the

00:05:01,170 --> 00:05:05,310
framework that we ended up coming up

00:05:02,850 --> 00:05:08,430
with to run our integration tests within

00:05:05,310 --> 00:05:11,880
Basel to present that we call it the

00:05:08,430 --> 00:05:14,490
services framework I have a series of

00:05:11,880 --> 00:05:18,390
examples which shows how you might run

00:05:14,490 --> 00:05:20,700
an integration test at Dropbox so you

00:05:18,390 --> 00:05:23,310
may be familiar with the echo server so

00:05:20,700 --> 00:05:26,910
the echo server is a classic example its

00:05:23,310 --> 00:05:28,800
system design of a server where you send

00:05:26,910 --> 00:05:31,710
it some requests and then it sends you

00:05:28,800 --> 00:05:34,290
back the request for what you sent to it

00:05:31,710 --> 00:05:37,830
verbatim so it's a very democratic

00:05:34,290 --> 00:05:39,960
egalitarian kind of service you only get

00:05:37,830 --> 00:05:41,610
back which exactly you put in so we're

00:05:39,960 --> 00:05:43,770
gonna be considering a modern

00:05:41,610 --> 00:05:45,930
reincarnation of the echo server which

00:05:43,770 --> 00:05:47,220
has been adapted for for our modern

00:05:45,930 --> 00:05:52,620
times it's called the echo chamber

00:05:47,220 --> 00:05:55,710
server so here's the implementation of

00:05:52,620 --> 00:05:57,150
the echo chamber server so we're not

00:05:55,710 --> 00:06:00,050
going to be worried about too much of

00:05:57,150 --> 00:06:02,340
the the details here it's mostly just

00:06:00,050 --> 00:06:06,030
boilerplate for setting up a tornado

00:06:02,340 --> 00:06:08,880
server so the echo chamber server echoes

00:06:06,030 --> 00:06:13,140
back once you send to it but in all caps

00:06:08,880 --> 00:06:14,790
and with a hashtag so here's here's the

00:06:13,140 --> 00:06:16,740
endpoint which which actually does that

00:06:14,790 --> 00:06:19,680
and then there's also a health check

00:06:16,740 --> 00:06:22,230
which we're gonna use which can tell us

00:06:19,680 --> 00:06:26,310
that the server is actually up and able

00:06:22,230 --> 00:06:28,020
to to send requests now so if we fire

00:06:26,310 --> 00:06:29,790
this this thing up on a terminal

00:06:28,020 --> 00:06:34,710
somewhere are they looking curl up to

00:06:29,790 --> 00:06:36,840
see what it does so you can see the the

00:06:34,710 --> 00:06:39,510
the under the underlying neural network

00:06:36,840 --> 00:06:41,360
might need some more training but but

00:06:39,510 --> 00:06:45,650
otherwise it seems to be serving server

00:06:41,360 --> 00:06:47,689
to hundreds so we've seen that it works

00:06:45,650 --> 00:06:49,310
out by curling it manually but being

00:06:47,689 --> 00:06:51,500
responsible software engineers we want

00:06:49,310 --> 00:06:54,020
to write a test to make sure that it

00:06:51,500 --> 00:06:56,659
continues to work so here's something

00:06:54,020 --> 00:06:59,710
which we might write so here's the

00:06:56,659 --> 00:07:02,840
echo-chamber server test and so

00:06:59,710 --> 00:07:05,330
basically this is posting to the server

00:07:02,840 --> 00:07:08,919
scene with responses and then asserting

00:07:05,330 --> 00:07:12,830
something some property of the response

00:07:08,919 --> 00:07:16,340
and you can see one part about this test

00:07:12,830 --> 00:07:18,770
is that it requires the server to

00:07:16,340 --> 00:07:20,779
already be running before the test is

00:07:18,770 --> 00:07:22,279
run because it just assumes that it sits

00:07:20,779 --> 00:07:25,189
there in the background so it can post

00:07:22,279 --> 00:07:26,689
to it so our testing framework would

00:07:25,189 --> 00:07:29,779
need to make sure that the service is

00:07:26,689 --> 00:07:33,379
running before we're actually able to

00:07:29,779 --> 00:07:35,449
use it so let's see how we would go

00:07:33,379 --> 00:07:38,210
about encoding that in our services

00:07:35,449 --> 00:07:41,569
framework so the first thing to do is

00:07:38,210 --> 00:07:44,750
actually just make a binary target for

00:07:41,569 --> 00:07:46,580
the echo-chamber server so this we can

00:07:44,750 --> 00:07:48,289
just use a straight built-in PI binary

00:07:46,580 --> 00:07:52,490
role even though it's terrible it's

00:07:48,289 --> 00:07:54,199
efficient for our purposes here so

00:07:52,490 --> 00:07:56,270
that's just straight straight built-in

00:07:54,199 --> 00:07:57,500
basil and this is even the same thing

00:07:56,270 --> 00:08:00,440
that we could we could deploy to

00:07:57,500 --> 00:08:02,930
production if we wanted to where our

00:08:00,440 --> 00:08:05,690
stuff starts coming in is this role down

00:08:02,930 --> 00:08:09,440
here the service daemon role so this

00:08:05,690 --> 00:08:11,449
declares a service which is run by

00:08:09,440 --> 00:08:13,099
starting this executable given by

00:08:11,449 --> 00:08:16,009
another target so that's the exe

00:08:13,099 --> 00:08:17,569
attribute here and then the service

00:08:16,009 --> 00:08:20,180
framework will know that the service is

00:08:17,569 --> 00:08:21,650
healthy once it responds to this HTTP

00:08:20,180 --> 00:08:23,180
health check so that health check is

00:08:21,650 --> 00:08:24,919
very important you would never go to

00:08:23,180 --> 00:08:29,330
work sick so don't let your services do

00:08:24,919 --> 00:08:31,580
so either and so now we have the the

00:08:29,330 --> 00:08:33,169
service binder itself and a service

00:08:31,580 --> 00:08:36,800
definition of it which describes how to

00:08:33,169 --> 00:08:38,779
run it in it in a test and so now we can

00:08:36,800 --> 00:08:44,149
actually write a test which uses a

00:08:38,779 --> 00:08:48,769
service so to write a to put our test

00:08:44,149 --> 00:08:50,930
class class into basil with this service

00:08:48,769 --> 00:08:52,670
we use a rule called PI test with

00:08:50,930 --> 00:08:53,950
services so I can't use the built-in

00:08:52,670 --> 00:08:56,190
service

00:08:53,950 --> 00:08:58,870
or the built-in test rule because we

00:08:56,190 --> 00:09:00,670
need our test driver to actually start

00:08:58,870 --> 00:09:04,480
up a service do some extra work which a

00:09:00,670 --> 00:09:06,850
built-in one can't do for us but once

00:09:04,480 --> 00:09:08,800
again its tries to follow its closely

00:09:06,850 --> 00:09:11,170
the built-in rule so these are all

00:09:08,800 --> 00:09:13,180
built-in attributes of Pi test role

00:09:11,170 --> 00:09:15,339
which and our rule has the exact same

00:09:13,180 --> 00:09:16,899
semantics where it gets interesting here

00:09:15,339 --> 00:09:19,269
is now we also have a services edge

00:09:16,899 --> 00:09:21,820
group which declares the dependency on

00:09:19,269 --> 00:09:25,120
the service rule which we defined

00:09:21,820 --> 00:09:26,680
earlier and so now the test driver will

00:09:25,120 --> 00:09:28,269
know that it has to start up the service

00:09:26,680 --> 00:09:30,970
and make sure it's healthy and then

00:09:28,269 --> 00:09:33,670
finally execute the test so this is the

00:09:30,970 --> 00:09:36,730
most basic example of our services

00:09:33,670 --> 00:09:38,800
framer of course one of the most more

00:09:36,730 --> 00:09:41,050
powerful things you would be able to do

00:09:38,800 --> 00:09:43,720
a services have services which depend on

00:09:41,050 --> 00:09:46,089
on other ones so we can also Express

00:09:43,720 --> 00:09:47,620
that with our framework and that way

00:09:46,089 --> 00:09:51,579
we're the way that works is you simply

00:09:47,620 --> 00:09:53,470
add a depth attribute to the services

00:09:51,579 --> 00:09:54,639
role so suppose we had a variant of our

00:09:53,470 --> 00:09:57,910
echo-chamber server called the

00:09:54,639 --> 00:10:00,760
enterprise echo server so obviously that

00:09:57,910 --> 00:10:03,120
needs a lot of dependencies so in my

00:10:00,760 --> 00:10:05,680
case i mention it has the xml spigot and

00:10:03,120 --> 00:10:08,320
of course services can recursively

00:10:05,680 --> 00:10:11,910
depend on more service so no doubt xml

00:10:08,320 --> 00:10:15,310
spigot depends on JBoss or something and

00:10:11,910 --> 00:10:16,899
the test driver now arranges to make

00:10:15,310 --> 00:10:19,680
sure all these dependent services are

00:10:16,899 --> 00:10:21,850
started up before actually starting our

00:10:19,680 --> 00:10:23,260
enterprise echo service so we're

00:10:21,850 --> 00:10:28,570
encoding the dependency graph of

00:10:23,260 --> 00:10:30,850
services within basil ah another thing

00:10:28,570 --> 00:10:33,850
that we have which is kind of a variant

00:10:30,850 --> 00:10:36,339
of services is just one shot services or

00:10:33,850 --> 00:10:38,410
what we call service tasks so it's very

00:10:36,339 --> 00:10:39,910
common in the ten the set up of tests

00:10:38,410 --> 00:10:42,579
that you just need to execute some

00:10:39,910 --> 00:10:44,890
script to create some part of the test

00:10:42,579 --> 00:10:47,529
environment like add fixtures to a

00:10:44,890 --> 00:10:49,889
database or run migrations of some sort

00:10:47,529 --> 00:10:52,959
so we support a one shot service

00:10:49,889 --> 00:10:54,490
services which are not actually Damons

00:10:52,959 --> 00:10:56,850
which need to run to during the course

00:10:54,490 --> 00:11:01,690
of a test but rather scripts that run

00:10:56,850 --> 00:11:04,300
and and I initialize something so the

00:11:01,690 --> 00:11:06,339
service framework just runs these and

00:11:04,300 --> 00:11:06,980
then wait for them to finish rather than

00:11:06,339 --> 00:11:10,430
running

00:11:06,980 --> 00:11:13,760
I'll check or anything for more advanced

00:11:10,430 --> 00:11:16,760
use cases we support dynamic control of

00:11:13,760 --> 00:11:19,250
services within tests so this is very

00:11:16,760 --> 00:11:21,139
useful for a test I want to check what

00:11:19,250 --> 00:11:24,860
happens when a particular service goes

00:11:21,139 --> 00:11:27,110
down that they depend on so here's a

00:11:24,860 --> 00:11:28,880
piece of code which are a test that I

00:11:27,110 --> 00:11:31,880
pulled from one of some of our NGO

00:11:28,880 --> 00:11:33,769
infrastructure so this is this test

00:11:31,880 --> 00:11:38,389
wants to check what happens when a new

00:11:33,769 --> 00:11:42,560
keeper goes down under - the code under

00:11:38,389 --> 00:11:45,440
test so for all of our server supported

00:11:42,560 --> 00:11:47,630
languages we provide a special library

00:11:45,440 --> 00:11:52,100
called SVC Lib which allows you to

00:11:47,630 --> 00:11:53,810
control services during the test run so

00:11:52,100 --> 00:11:58,490
you can create them restart them and

00:11:53,810 --> 00:12:00,440
stop them so this is an example down

00:11:58,490 --> 00:12:03,170
here you can see an SVC Lib it calls

00:12:00,440 --> 00:12:04,790
create service and it passes a service

00:12:03,170 --> 00:12:06,529
deaf so this is actually a proto buff

00:12:04,790 --> 00:12:09,019
which is a representation of what is

00:12:06,529 --> 00:12:12,620
what is in the service role in skylark

00:12:09,019 --> 00:12:14,510
and service limp takes care of talking

00:12:12,620 --> 00:12:16,250
to the the daemon that's actually

00:12:14,510 --> 00:12:17,959
running all these services creating the

00:12:16,250 --> 00:12:20,029
service and making sure it's healthy

00:12:17,959 --> 00:12:22,459
before returning and then with the

00:12:20,029 --> 00:12:24,260
object that's returned from that the

00:12:22,459 --> 00:12:30,050
test is able to start and stop the

00:12:24,260 --> 00:12:33,769
service that is it has created so Emma

00:12:30,050 --> 00:12:35,209
as I've alluded to this is all all the

00:12:33,769 --> 00:12:37,100
magic is kind of mediated through a

00:12:35,209 --> 00:12:39,319
special daemon which is running during

00:12:37,100 --> 00:12:42,709
the test called the service control or

00:12:39,319 --> 00:12:45,019
service cutoff for short and this is a

00:12:42,709 --> 00:12:47,690
tool which takes a protobuf description

00:12:45,019 --> 00:12:50,600
of all the services needs to start so

00:12:47,690 --> 00:12:52,600
that's basically directly see realized

00:12:50,600 --> 00:12:55,880
from the skylark just distribute

00:12:52,600 --> 00:12:58,670
descriptions and then starts up all the

00:12:55,880 --> 00:13:01,940
services I in topological dependency

00:12:58,670 --> 00:13:03,440
order in parallel if possible and also

00:13:01,940 --> 00:13:05,720
takes care of some other administrative

00:13:03,440 --> 00:13:07,910
tasks like service logging so making

00:13:05,720 --> 00:13:09,940
sure the standard error of services is

00:13:07,910 --> 00:13:15,740
prefixed with their name so it's their

00:13:09,940 --> 00:13:17,750
disambiguated within test logs so what

00:13:15,740 --> 00:13:19,100
have we gained from all this well we now

00:13:17,750 --> 00:13:20,540
have a standardised declarative

00:13:19,100 --> 00:13:23,930
configuration of

00:13:20,540 --> 00:13:25,280
our tests and it's its encoding the

00:13:23,930 --> 00:13:26,690
skylark and the great thing about

00:13:25,280 --> 00:13:31,670
Skylark is that it doesn't let you do

00:13:26,690 --> 00:13:33,670
anything so it's not like puppet where

00:13:31,670 --> 00:13:37,370
people can execute random shell commands

00:13:33,670 --> 00:13:39,080
and so now our service environment is is

00:13:37,370 --> 00:13:40,850
reproducible anywhere because you can

00:13:39,080 --> 00:13:44,870
just run basil to set it up so it's the

00:13:40,850 --> 00:13:47,180
same on CI as in a local development

00:13:44,870 --> 00:13:48,800
environment which means there's no more

00:13:47,180 --> 00:13:50,570
of this like oh well I can't reproduce

00:13:48,800 --> 00:13:53,060
this test sailor locally because CI is

00:13:50,570 --> 00:13:54,950
slightly different than me that doesn't

00:13:53,060 --> 00:13:56,840
happen anymore and since the declared

00:13:54,950 --> 00:13:58,250
configuration it's basic wearable so

00:13:56,840 --> 00:14:00,110
it's very easy to answer a question like

00:13:58,250 --> 00:14:02,990
what service depends on mine in tests

00:14:00,110 --> 00:14:05,060
that's just a basil query away and it's

00:14:02,990 --> 00:14:09,350
also queryable by machines

00:14:05,060 --> 00:14:11,900
so we implement selective testing where

00:14:09,350 --> 00:14:13,640
when a change is being tested we only

00:14:11,900 --> 00:14:16,010
run the tests which can possibly be

00:14:13,640 --> 00:14:18,170
affected by the the files that have been

00:14:16,010 --> 00:14:21,970
changed and that's all implemented

00:14:18,170 --> 00:14:24,770
through through basil query but also

00:14:21,970 --> 00:14:26,180
dramatically reduces our support that we

00:14:24,770 --> 00:14:28,460
have to do for customers of developer

00:14:26,180 --> 00:14:30,230
infrastructure because the answer is

00:14:28,460 --> 00:14:31,790
almost always the same so if someone

00:14:30,230 --> 00:14:34,750
comes to us and says how do I run my

00:14:31,790 --> 00:14:37,250
gilead test we say basic test

00:14:34,750 --> 00:14:39,050
similarly if someone says how do I test

00:14:37,250 --> 00:14:41,090
my Python service it depends on 5go

00:14:39,050 --> 00:14:43,040
services we say well make sure there's

00:14:41,090 --> 00:14:46,640
service definitions for all the ghost

00:14:43,040 --> 00:14:49,310
services and then use basil test and

00:14:46,640 --> 00:14:51,470
this extends quite logically to things

00:14:49,310 --> 00:14:53,330
like how do I run my Frankenstein MLF

00:14:51,470 --> 00:14:55,550
that's in arises a JVM go tend to fill

00:14:53,330 --> 00:14:58,670
uber your office and a blockchain you

00:14:55,550 --> 00:15:00,770
think I'm exaggerating but it turns out

00:14:58,670 --> 00:15:03,500
all it takes is like a goat sacrifice

00:15:00,770 --> 00:15:05,210
and a vision a subsequent vision to tell

00:15:03,500 --> 00:15:08,150
you what linker flags to use to create

00:15:05,210 --> 00:15:13,430
this thing so but regardless regardless

00:15:08,150 --> 00:15:15,050
what we say is is is basil test you know

00:15:13,430 --> 00:15:20,900
it's good to keep Frankenstein in the

00:15:15,050 --> 00:15:22,550
sandbox all right so you might think

00:15:20,900 --> 00:15:26,000
that we were just like a broken record

00:15:22,550 --> 00:15:28,250
stuck on the the ode to basil track but

00:15:26,000 --> 00:15:30,410
sometimes we have to very answer like if

00:15:28,250 --> 00:15:32,450
someone says how do I run my ping script

00:15:30,410 --> 00:15:34,550
against production Dropbox to come in

00:15:32,450 --> 00:15:38,269
see I

00:15:34,550 --> 00:15:41,450
then we say no no no no no no a thousand

00:15:38,269 --> 00:15:43,670
24 times know if there's one thing we've

00:15:41,450 --> 00:15:46,160
learned in his team it's just say no to

00:15:43,670 --> 00:15:48,680
non hermetic test we spent a huge amount

00:15:46,160 --> 00:15:51,110
of time plenty of all the non Hermit

00:15:48,680 --> 00:15:53,990
hermiticity and our test suite and

00:15:51,110 --> 00:15:56,420
builds and we really like being having

00:15:53,990 --> 00:15:58,579
our test be deterministic and isolated

00:15:56,420 --> 00:16:00,320
from the environment and repeatable and

00:15:58,579 --> 00:16:07,490
we never want to go back to our dirty

00:16:00,320 --> 00:16:11,740
old ways okay so another thing we've

00:16:07,490 --> 00:16:14,649
been able to do with the service

00:16:11,740 --> 00:16:16,970
services framework as a leverage it to

00:16:14,649 --> 00:16:21,140
describe an environment for interactive

00:16:16,970 --> 00:16:23,209
development so this is not something you

00:16:21,140 --> 00:16:26,149
can really do with Basel out of the box

00:16:23,209 --> 00:16:28,760
because Basel is kind of a traditional

00:16:26,149 --> 00:16:30,740
command line thing where you run a

00:16:28,760 --> 00:16:34,100
command and then it returns you an error

00:16:30,740 --> 00:16:37,820
or a a success so we have a tool called

00:16:34,100 --> 00:16:40,610
I test which lets us run services and

00:16:37,820 --> 00:16:42,170
service based tests so if I have a

00:16:40,610 --> 00:16:46,430
service based test like the echo chamber

00:16:42,170 --> 00:16:50,050
service test and I use the command I

00:16:46,430 --> 00:16:53,930
test run this will build the the test

00:16:50,050 --> 00:16:56,209
for basil start all the services in a

00:16:53,930 --> 00:16:58,640
container and then run the test in that

00:16:56,209 --> 00:17:01,160
same container and then finally pop me

00:16:58,640 --> 00:17:03,470
into a shell in that container with all

00:17:01,160 --> 00:17:04,520
the services running so this would be

00:17:03,470 --> 00:17:06,439
more interesting if the test had

00:17:04,520 --> 00:17:08,660
actually failed then I could poke around

00:17:06,439 --> 00:17:11,839
in the container hit the services by

00:17:08,660 --> 00:17:13,550
self manual if I wanted restart them we

00:17:11,839 --> 00:17:15,230
provide a little command called service

00:17:13,550 --> 00:17:18,199
cuddle which actually talks to the the

00:17:15,230 --> 00:17:20,329
service controller as necessary and and

00:17:18,199 --> 00:17:21,949
and rerun the test in order to debug it

00:17:20,329 --> 00:17:23,780
and then when I'm done looking at that

00:17:21,949 --> 00:17:26,000
in the container I just exit out of that

00:17:23,780 --> 00:17:28,370
she'll and I'm popped back to my normal

00:17:26,000 --> 00:17:30,650
shell and the the temporary container is

00:17:28,370 --> 00:17:32,900
cleaned up so that's a way to

00:17:30,650 --> 00:17:35,330
interactively debug these service based

00:17:32,900 --> 00:17:38,960
tests we also use it just for normal

00:17:35,330 --> 00:17:41,419
application development so we have if

00:17:38,960 --> 00:17:44,830
using the I test us start command you

00:17:41,419 --> 00:17:48,860
can actually just start a tree of

00:17:44,830 --> 00:17:53,270
services in a background container

00:17:48,860 --> 00:17:55,460
and then continue to hit it with

00:17:53,270 --> 00:17:57,350
whatever you however you want so when

00:17:55,460 --> 00:18:00,650
people are actually developing a web app

00:17:57,350 --> 00:18:02,870
at Dropbox they run I test start of like

00:18:00,650 --> 00:18:04,419
my web app target and that starts with

00:18:02,870 --> 00:18:08,510
the web app and all the necessary

00:18:04,419 --> 00:18:10,820
services which are needed to run the web

00:18:08,510 --> 00:18:11,900
app and development like a database and

00:18:10,820 --> 00:18:16,340
then people hit it with their web

00:18:11,900 --> 00:18:18,830
browser and and and and can see what

00:18:16,340 --> 00:18:21,950
they're working on so in order to

00:18:18,830 --> 00:18:25,130
facilitate rapid development with these

00:18:21,950 --> 00:18:26,870
service trees once a background service

00:18:25,130 --> 00:18:29,360
container has been created we also

00:18:26,870 --> 00:18:30,980
provide every load command which looks

00:18:29,360 --> 00:18:35,450
at all the files that have been changed

00:18:30,980 --> 00:18:37,460
and only restarts the services rebuilds

00:18:35,450 --> 00:18:39,679
and restarts the services that have

00:18:37,460 --> 00:18:41,750
actually been affected by whatever the

00:18:39,679 --> 00:18:43,760
change the user has been changing and

00:18:41,750 --> 00:18:45,260
then finally the user's done with the

00:18:43,760 --> 00:18:47,240
background services that can they can

00:18:45,260 --> 00:18:51,190
shut down the background container and

00:18:47,240 --> 00:18:53,900
clean up any dirty State they may have

00:18:51,190 --> 00:18:55,700
so this would be a sleazy marketing talk

00:18:53,900 --> 00:18:57,470
and not an engineering talk if I didn't

00:18:55,700 --> 00:19:01,280
tell you about all the bad things that

00:18:57,470 --> 00:19:03,890
this causes so to start us off I have a

00:19:01,280 --> 00:19:07,460
picture of a basal process caught in the

00:19:03,890 --> 00:19:13,630
wild using 87 gigabytes of RAM on a 64

00:19:07,460 --> 00:19:18,350
gigabyte machine so one thing is this

00:19:13,630 --> 00:19:21,980
services scheme relies on greatly on the

00:19:18,350 --> 00:19:23,840
Basel sandbox Basel sandbox was probably

00:19:21,980 --> 00:19:27,500
mostly intended to keep your like nasty

00:19:23,840 --> 00:19:29,990
gen rules being well behaved but we

00:19:27,500 --> 00:19:33,530
fully utilize the fact that it uses the

00:19:29,990 --> 00:19:37,610
networking containers and mounts

00:19:33,530 --> 00:19:39,620
everything in that the test requires we

00:19:37,610 --> 00:19:41,120
but there's also a bunch of flags which

00:19:39,620 --> 00:19:42,830
you can use to configure the the

00:19:41,120 --> 00:19:45,910
behavior of Basel sandbox we pretty much

00:19:42,830 --> 00:19:48,740
pass them all multiple times if possible

00:19:45,910 --> 00:19:51,950
and we use features like requires fake

00:19:48,740 --> 00:19:53,419
root which allows the that content the

00:19:51,950 --> 00:19:55,760
process in the container the test

00:19:53,419 --> 00:20:00,590
process to assume I think it's assuming

00:19:55,760 --> 00:20:02,150
UID 0 and because the the sandbox is

00:20:00,590 --> 00:20:05,840
supposed to be kind of like a simple

00:20:02,150 --> 00:20:07,340
general general wrapper it lacks some

00:20:05,840 --> 00:20:09,620
features like debug ability which you

00:20:07,340 --> 00:20:13,130
would need in a more feature full

00:20:09,620 --> 00:20:16,520
container system luckily this is mostly

00:20:13,130 --> 00:20:18,200
addressed by our eye test system but it

00:20:16,520 --> 00:20:20,570
also causes problems for things like

00:20:18,200 --> 00:20:21,950
nested containerization because the the

00:20:20,570 --> 00:20:24,350
basal container basically takes your

00:20:21,950 --> 00:20:26,750
only level of possible containerization

00:20:24,350 --> 00:20:30,050
and so we can't we can't test any of our

00:20:26,750 --> 00:20:32,510
tools which which require nested

00:20:30,050 --> 00:20:35,990
containers of their own within the basal

00:20:32,510 --> 00:20:41,060
sandbox another limitation we run into

00:20:35,990 --> 00:20:43,940
with this is since all the services that

00:20:41,060 --> 00:20:47,990
you end up having in your tests are in

00:20:43,940 --> 00:20:51,950
the same build you can't pass different

00:20:47,990 --> 00:20:55,280
basel flags to any of the different

00:20:51,950 --> 00:20:57,020
targets in your services tree so if you

00:20:55,280 --> 00:20:59,240
want to have some service with compiler

00:20:57,020 --> 00:21:01,880
flags why and another service with

00:20:59,240 --> 00:21:04,610
compiler flight Z you can't really do

00:21:01,880 --> 00:21:06,200
that with fatal so the gods of dynamic

00:21:04,610 --> 00:21:08,480
configuration upstream may may

00:21:06,200 --> 00:21:10,340
eventually fix this problem for us but

00:21:08,480 --> 00:21:11,980
for for right now there's there's a

00:21:10,340 --> 00:21:15,280
number of workarounds you can do like

00:21:11,980 --> 00:21:17,840
well you you build one service in a

00:21:15,280 --> 00:21:19,300
first build and then you kindly inject

00:21:17,840 --> 00:21:23,270
that into the later build as a binary

00:21:19,300 --> 00:21:25,600
blob or if you control your own rules

00:21:23,270 --> 00:21:27,980
you can do things like generating

00:21:25,600 --> 00:21:30,280
multiple outputs for all the possible

00:21:27,980 --> 00:21:33,170
flag configurations you're interested

00:21:30,280 --> 00:21:35,210
none of those are quite as good as as

00:21:33,170 --> 00:21:37,970
true multi configuration build build

00:21:35,210 --> 00:21:42,100
support would have so those are kind of

00:21:37,970 --> 00:21:44,990
the the primary technical problems with

00:21:42,100 --> 00:21:47,090
with the services framework but the

00:21:44,990 --> 00:21:49,610
thing that really hangs over our heads i

00:21:47,090 --> 00:21:52,360
keeps us up as nite ize the question did

00:21:49,610 --> 00:21:57,470
we make integration testing too easy

00:21:52,360 --> 00:21:59,510
well so we sort of we sort of took this

00:21:57,470 --> 00:22:01,520
this problem which was like service

00:21:59,510 --> 00:22:04,070
starting up services in CI and running

00:22:01,520 --> 00:22:05,930
tests against them is not reliable we

00:22:04,070 --> 00:22:09,500
made it very reliable but it turns out

00:22:05,930 --> 00:22:14,030
that's only one segment of what makes

00:22:09,500 --> 00:22:15,660
integration tests unreliable and sort of

00:22:14,030 --> 00:22:18,300
now that we've made the activation

00:22:15,660 --> 00:22:20,760
of creating an integration test much

00:22:18,300 --> 00:22:22,740
lower you know you just like add some

00:22:20,760 --> 00:22:25,500
services to your test role it's very

00:22:22,740 --> 00:22:27,780
easy some people to create integration

00:22:25,500 --> 00:22:31,110
tests before they read a lot realize

00:22:27,780 --> 00:22:33,390
their total total cost so with it

00:22:31,110 --> 00:22:35,430
because of the power of the declarative

00:22:33,390 --> 00:22:38,850
service configuration people can like

00:22:35,430 --> 00:22:40,830
reparent trees of services and like

00:22:38,850 --> 00:22:43,200
cause thousands of tests which which

00:22:40,830 --> 00:22:45,710
depend on them to to become slower or

00:22:43,200 --> 00:22:48,180
faster or use more memory and stuff so

00:22:45,710 --> 00:22:50,310
some some funds statistics so a

00:22:48,180 --> 00:22:51,630
following basil we have our service

00:22:50,310 --> 00:22:55,440
controller actually compute the critical

00:22:51,630 --> 00:22:58,080
path of service startup so here's an

00:22:55,440 --> 00:23:00,030
example of a particularly large service

00:22:58,080 --> 00:23:02,820
target that we have so you can see I

00:23:00,030 --> 00:23:05,640
took 58 seconds to start up all the

00:23:02,820 --> 00:23:07,290
services for this target oh so that's 58

00:23:05,640 --> 00:23:09,290
seconds before like a test would even

00:23:07,290 --> 00:23:12,570
begin doing anything useful whatsoever

00:23:09,290 --> 00:23:14,880
so you can see there's may there's many

00:23:12,570 --> 00:23:16,890
targets which are using more than one

00:23:14,880 --> 00:23:19,350
second to to become healthy on this

00:23:16,890 --> 00:23:25,020
critical path and we ended up starting

00:23:19,350 --> 00:23:28,260
107 services up up 107 services in this

00:23:25,020 --> 00:23:31,560
this entire process and a lot of some of

00:23:28,260 --> 00:23:33,450
this is just because these services are

00:23:31,560 --> 00:23:34,860
there like because they're literally the

00:23:33,450 --> 00:23:37,020
production ones they're like not

00:23:34,860 --> 00:23:39,300
optimized to start up fast in CI and

00:23:37,020 --> 00:23:41,990
they like go and verify some property or

00:23:39,300 --> 00:23:44,430
or allocate a lot of memory in

00:23:41,990 --> 00:23:46,530
anticipation of receiving production

00:23:44,430 --> 00:23:48,240
traffic but there is a fundamental a

00:23:46,530 --> 00:23:50,250
growth problem which is that if you keep

00:23:48,240 --> 00:23:55,350
cramming services into a container it's

00:23:50,250 --> 00:23:57,330
gonna get too big at some point so these

00:23:55,350 --> 00:24:02,750
things you know attributes have started

00:23:57,330 --> 00:24:05,310
appearing all over our codebase us so so

00:24:02,750 --> 00:24:11,490
basil is very cute and it believes that

00:24:05,310 --> 00:24:13,950
eternity is one hour I'm I'm sorry to

00:24:11,490 --> 00:24:20,610
say we know that there's also flag to

00:24:13,950 --> 00:24:22,770
change that and and so like if and

00:24:20,610 --> 00:24:24,570
there's there's there certain workloads

00:24:22,770 --> 00:24:26,250
which are incredibly problematic

00:24:24,570 --> 00:24:27,780
especially for memory so if you have

00:24:26,250 --> 00:24:29,159
anything which is using like thread

00:24:27,780 --> 00:24:32,669
sanitizer

00:24:29,159 --> 00:24:35,759
it's it's a incantation and gogo race

00:24:32,669 --> 00:24:37,710
that that instantly like quadruples your

00:24:35,759 --> 00:24:40,889
memory uses that process so even if you

00:24:37,710 --> 00:24:42,359
have 60 or so leanness go processes if

00:24:40,889 --> 00:24:46,429
they're all using go race that's that's

00:24:42,359 --> 00:24:46,429
that's gonna earn you an enormous size

00:24:47,210 --> 00:24:55,999
so then we went about the literature on

00:24:52,200 --> 00:24:58,529
on integration test so perhaps the most

00:24:55,999 --> 00:25:00,779
ideological of these is this Rheinsberg

00:24:58,529 --> 00:25:04,619
article called integrated tests are a

00:25:00,779 --> 00:25:07,279
scam but there's there's also this this

00:25:04,619 --> 00:25:11,309
article from from about places the googs

00:25:07,279 --> 00:25:14,609
so on the Google testing blog they also

00:25:11,309 --> 00:25:16,409
want us to say no to something and the

00:25:14,609 --> 00:25:18,419
the Google testing blog post about

00:25:16,409 --> 00:25:20,970
saying no to more end-to-end tests

00:25:18,419 --> 00:25:24,359
brings a lot of data to their that on

00:25:20,970 --> 00:25:26,999
the problem that actually they're not so

00:25:24,359 --> 00:25:28,679
helpful for detecting problems and they

00:25:26,999 --> 00:25:31,830
do cause a lot of Dilber pain and

00:25:28,679 --> 00:25:35,279
certainly the the the experience in this

00:25:31,830 --> 00:25:36,989
blog post dives a lot with ours so that

00:25:35,279 --> 00:25:41,369
means our next project is getting people

00:25:36,989 --> 00:25:45,950
to not use our services framework by by

00:25:41,369 --> 00:25:48,330
writing unit test writing unit tests so

00:25:45,950 --> 00:25:49,859
this could be a whole talk in its own

00:25:48,330 --> 00:25:51,479
and we're just getting into it maybe

00:25:49,859 --> 00:25:55,409
I'll write a check for my memoirs about

00:25:51,479 --> 00:25:57,629
it but but I can discuss for a few

00:25:55,409 --> 00:26:00,710
minutes some of the the prongs were

00:25:57,629 --> 00:26:05,789
we're looking at so one is just

00:26:00,710 --> 00:26:09,239
education so this is a diagram which was

00:26:05,789 --> 00:26:10,950
conceived by Mike Cohn called the

00:26:09,239 --> 00:26:12,899
testing pyramid which is supposed to

00:26:10,950 --> 00:26:14,429
indicate how many of each kind of test

00:26:12,899 --> 00:26:16,739
you're supposed to have so up here the

00:26:14,429 --> 00:26:18,509
creepy all-seeing eye is manual testing

00:26:16,739 --> 00:26:20,789
so you don't wanna have very much of

00:26:18,509 --> 00:26:22,320
that it's bomb you have unit tests which

00:26:20,789 --> 00:26:24,179
are supposed to be the core of your

00:26:22,320 --> 00:26:26,279
testing fabric which from which you do

00:26:24,179 --> 00:26:28,609
most of your development on and achieve

00:26:26,279 --> 00:26:31,889
most of your coverage and then

00:26:28,609 --> 00:26:34,320
integration tests of various sorts are

00:26:31,889 --> 00:26:36,509
kind of a middle so right now we base we

00:26:34,320 --> 00:26:39,450
show this this diagram to our engineer

00:26:36,509 --> 00:26:41,650
as once an onboarding I like 45 minutes

00:26:39,450 --> 00:26:45,070
into it half an hour and a half talk so

00:26:41,650 --> 00:26:47,020
no one ever remembers it at all but

00:26:45,070 --> 00:26:49,030
we're thinking of doing some more

00:26:47,020 --> 00:26:54,700
repeated you know spaced repetition

00:26:49,030 --> 00:26:57,280
learning by repeating constantly and we

00:26:54,700 --> 00:26:59,710
also want to do things like requiring as

00:26:57,280 --> 00:27:01,600
part of only a surface drop box that you

00:26:59,710 --> 00:27:05,380
have a structure you have to make it so

00:27:01,600 --> 00:27:06,700
people contest with your service or test

00:27:05,380 --> 00:27:08,320
things that depend on your service would

00:27:06,700 --> 00:27:11,010
act actually out actually using your

00:27:08,320 --> 00:27:14,140
service so provide things like like face

00:27:11,010 --> 00:27:16,780
we also want to provide incentives in

00:27:14,140 --> 00:27:20,080
our inner processes where if you work on

00:27:16,780 --> 00:27:23,340
a a code base that has good tests or

00:27:20,080 --> 00:27:25,590
good test is defined as be unit tests

00:27:23,340 --> 00:27:29,590
then we'll make it easier for you to

00:27:25,590 --> 00:27:30,850
land your code and faster and kind of

00:27:29,590 --> 00:27:32,770
the stick part of that incentive is that

00:27:30,850 --> 00:27:34,660
we'll carefully track everyone's CI

00:27:32,770 --> 00:27:37,179
resources and and people is a

00:27:34,660 --> 00:27:42,570
particularly egregious CI bills will

00:27:37,179 --> 00:27:42,570
we'll hear it from someone in management

00:27:43,200 --> 00:27:55,900
so that's all I have

00:27:48,030 --> 00:27:55,900

YouTube URL: https://www.youtube.com/watch?v=muvU1DYrY0w


