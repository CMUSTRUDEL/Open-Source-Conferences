Title: Python Logging: Getting the most from it - Julian Orbach
Publication date: 2010-10-27
Playlist: Open Source Google Tech Talks
Description: 
	SyPy - June 4th.
Talk presented at Sydney Python User Group - http://groups.google.com/group/sydneypython/web/sypy-home
Captions: 
	00:00:01,129 --> 00:00:07,500
so yes my name is Julian and I'm going

00:00:03,870 --> 00:00:09,090
to be talking about Python logging which

00:00:07,500 --> 00:00:10,290
isn't as high-tech as some of the

00:00:09,090 --> 00:00:12,000
earlier talks we've had it's one of the

00:00:10,290 --> 00:00:14,700
fundamental things and I know that

00:00:12,000 --> 00:00:16,350
there's a large range of different

00:00:14,700 --> 00:00:17,730
levels of people in the room having

00:00:16,350 --> 00:00:18,960
spoken to a few other you at a pub

00:00:17,730 --> 00:00:20,640
there's some beginners some quite

00:00:18,960 --> 00:00:22,920
experienced people so what I've tried to

00:00:20,640 --> 00:00:25,500
do is make sure that all of you are

00:00:22,920 --> 00:00:27,660
equally bored so I'm going to start with

00:00:25,500 --> 00:00:29,640
some stuff just making sure the first

00:00:27,660 --> 00:00:32,279
time is introducing what the platform

00:00:29,640 --> 00:00:34,020
logging is if you've got some basic

00:00:32,279 --> 00:00:36,630
understanding show you what the next

00:00:34,020 --> 00:00:38,820
steps are if you're in the middle there

00:00:36,630 --> 00:00:40,140
talk about some style and optimizations

00:00:38,820 --> 00:00:41,790
to make sure you're doing it right and

00:00:40,140 --> 00:00:43,469
then start talking about what's behind

00:00:41,790 --> 00:00:45,180
the scenes for the advanced people and

00:00:43,469 --> 00:00:47,640
finally I'm going to try and get a plug

00:00:45,180 --> 00:00:49,079
in for a customization I've just made

00:00:47,640 --> 00:00:51,149
that I want a few beta testers to give a

00:00:49,079 --> 00:00:55,110
go so that would be what I'll do it

00:00:51,149 --> 00:00:57,600
there at the end so the question of why

00:00:55,110 --> 00:00:59,280
you should listen to me I'm not an

00:00:57,600 --> 00:01:01,079
expert at Python logging I've really

00:00:59,280 --> 00:01:02,520
only used it on the current project I've

00:01:01,079 --> 00:01:05,640
been doing at the moment for a few

00:01:02,520 --> 00:01:07,260
months I mean I've used it before just

00:01:05,640 --> 00:01:11,130
the basic staff but it's at its full

00:01:07,260 --> 00:01:13,470
strength and I have made some pretty bad

00:01:11,130 --> 00:01:14,760
mistakes so probably the best reason to

00:01:13,470 --> 00:01:17,840
listen to me is to find out what I did

00:01:14,760 --> 00:01:20,490
wrong and try and avoid that yourselves

00:01:17,840 --> 00:01:22,770
so what are we talking about the problem

00:01:20,490 --> 00:01:25,920
we're trying to solve here for logging

00:01:22,770 --> 00:01:27,570
is when our program runs we want to

00:01:25,920 --> 00:01:29,939
record the events that are happening and

00:01:27,570 --> 00:01:31,770
we want to record what happened we want

00:01:29,939 --> 00:01:34,470
to record whereabouts in the code have

00:01:31,770 --> 00:01:36,720
happened what line what file what time

00:01:34,470 --> 00:01:38,280
it happened maybe some parameters that

00:01:36,720 --> 00:01:39,720
have been passed in some various

00:01:38,280 --> 00:01:42,899
variables and that sort of stuff and

00:01:39,720 --> 00:01:44,399
maybe how critical we think that is and

00:01:42,899 --> 00:01:47,090
we need to put that in a format that our

00:01:44,399 --> 00:01:50,189
users can find and also can understand

00:01:47,090 --> 00:01:52,549
now one of the tricky parts is is there

00:01:50,189 --> 00:01:55,649
is a large number of different users of

00:01:52,549 --> 00:01:57,200
logging the first and obvious one is the

00:01:55,649 --> 00:01:59,310
developer who's just trying to

00:01:57,200 --> 00:02:00,810
illuminate what's going on the black box

00:01:59,310 --> 00:02:02,430
that is their code so some trace

00:02:00,810 --> 00:02:04,380
statements and some debug statements to

00:02:02,430 --> 00:02:07,590
see what's going on in there but there's

00:02:04,380 --> 00:02:08,800
also your operations people your your

00:02:07,590 --> 00:02:10,300
system administrator

00:02:08,800 --> 00:02:12,160
who want to know that the system is

00:02:10,300 --> 00:02:13,239
running okay I want to know that the

00:02:12,160 --> 00:02:15,340
resources are all being used properly

00:02:13,239 --> 00:02:16,420
and and basically just want to be

00:02:15,340 --> 00:02:18,930
reassured that everything is humming

00:02:16,420 --> 00:02:21,870
fine and when it's not find out why

00:02:18,930 --> 00:02:24,640
there's also your helpdesk people and

00:02:21,870 --> 00:02:26,470
maybe also your expert end-users who

00:02:24,640 --> 00:02:28,030
when things go wrong want to see what

00:02:26,470 --> 00:02:30,700
happened when people call up the

00:02:28,030 --> 00:02:32,610
helpdesk they want to be able to say we

00:02:30,700 --> 00:02:34,690
see what the problem you had here is or

00:02:32,610 --> 00:02:36,489
we can see you're suffering from this

00:02:34,690 --> 00:02:39,040
bargain there's a workaround for a patch

00:02:36,489 --> 00:02:40,690
or whatever is involved and finally

00:02:39,040 --> 00:02:42,280
another use for the log file which I've

00:02:40,690 --> 00:02:46,209
certainly been finding very useful is

00:02:42,280 --> 00:02:49,390
for an audit trail I'm not talking so

00:02:46,209 --> 00:02:51,849
much about like financial proving that

00:02:49,390 --> 00:02:53,560
there hasn't been any fraud but more

00:02:51,849 --> 00:02:54,849
making sure that the program has been

00:02:53,560 --> 00:02:59,829
running for as long as it's supposed to

00:02:54,849 --> 00:03:03,519
have been running like how many users

00:02:59,829 --> 00:03:04,660
have been using in the past few days did

00:03:03,519 --> 00:03:06,040
it actually did the backup actually

00:03:04,660 --> 00:03:09,010
happen last night that sort of stuff

00:03:06,040 --> 00:03:09,640
just making sure that you can say at the

00:03:09,010 --> 00:03:12,069
end of the month

00:03:09,640 --> 00:03:13,560
yes the program was running for this

00:03:12,069 --> 00:03:16,650
many hours and

00:03:13,560 --> 00:03:19,440
dealt with this may transactions so with

00:03:16,650 --> 00:03:22,319
this many diverse users you need a

00:03:19,440 --> 00:03:24,090
fairly flexible system and Python

00:03:22,319 --> 00:03:26,580
actually comes with a feeling a very

00:03:24,090 --> 00:03:29,190
good system already so the Python

00:03:26,580 --> 00:03:31,080
logging module is a solution to this

00:03:29,190 --> 00:03:33,930
problem it's been around for a while

00:03:31,080 --> 00:03:37,080
since 2002 it's bundled in free for

00:03:33,930 --> 00:03:38,310
Python 2.3 and later if you stuck on any

00:03:37,080 --> 00:03:40,440
earlier versions you have my

00:03:38,310 --> 00:03:42,630
commiserations but you can download some

00:03:40,440 --> 00:03:44,370
locking modules for that as well it's

00:03:42,630 --> 00:03:47,190
highly customizable what we're talking

00:03:44,370 --> 00:03:48,480
quite a bit about this customization but

00:03:47,190 --> 00:03:50,069
to begin with there's some really easy

00:03:48,480 --> 00:03:53,760
convenience functions to get you started

00:03:50,069 --> 00:03:56,130
so all you really need to do import the

00:03:53,760 --> 00:03:57,720
logging module obviously you configure

00:03:56,130 --> 00:03:59,819
how the logging is going to work and

00:03:57,720 --> 00:04:02,459
there's a basic config method you can

00:03:59,819 --> 00:04:05,010
call to do that in this particular

00:04:02,459 --> 00:04:07,080
example I've said what a long to this

00:04:05,010 --> 00:04:09,110
particular file name and know what along

00:04:07,080 --> 00:04:11,730
everything above a certain level so

00:04:09,110 --> 00:04:14,430
debug I'll explain what that means later

00:04:11,730 --> 00:04:16,320
but for now debug means I want to get

00:04:14,430 --> 00:04:18,750
all the error messages or all the log

00:04:16,320 --> 00:04:21,780
messages I should say and finally then

00:04:18,750 --> 00:04:23,430
you can just call the locking warning or

00:04:21,780 --> 00:04:26,160
error or debug there's a number of

00:04:23,430 --> 00:04:28,350
different methods there and it doesn't

00:04:26,160 --> 00:04:30,960
write straight to your log file so

00:04:28,350 --> 00:04:32,580
there's three simple statements and the

00:04:30,960 --> 00:04:34,320
second one there basic configure is

00:04:32,580 --> 00:04:36,479
actually optional if you drop it out

00:04:34,320 --> 00:04:38,940
it'll send your log faster standard

00:04:36,479 --> 00:04:40,500
error and it will give you warnings and

00:04:38,940 --> 00:04:41,490
above so it will cut out all your

00:04:40,500 --> 00:04:44,150
debugging

00:04:41,490 --> 00:04:49,310
messages would just give you the warning

00:04:44,150 --> 00:04:49,310
stuff so it's pretty easy to use

00:04:49,790 --> 00:04:53,030
so is the print statement the print

00:04:52,010 --> 00:04:54,650
statement is the way you're probably

00:04:53,030 --> 00:04:56,630
doing it anyway if you don't use the

00:04:54,650 --> 00:04:58,850
logging module so I wanted to talk about

00:04:56,630 --> 00:05:00,770
what I see is the benefits to going to

00:04:58,850 --> 00:05:02,600
use of logging and I see there are three

00:05:00,770 --> 00:05:04,040
minor benefits and one really

00:05:02,600 --> 00:05:07,820
significant benefit so I'll go to the

00:05:04,040 --> 00:05:09,950
minor ones first if you've used the

00:05:07,820 --> 00:05:12,680
print statement in a multi-threaded

00:05:09,950 --> 00:05:14,210
application you'll see that these the

00:05:12,680 --> 00:05:15,320
output keeps overlapping each other

00:05:14,210 --> 00:05:17,150
you're going to spend your entire time

00:05:15,320 --> 00:05:18,560
going wait that's the first letter of

00:05:17,150 --> 00:05:20,450
the previous word there's the rest of

00:05:18,560 --> 00:05:22,820
the word now sort of stuff so the first

00:05:20,450 --> 00:05:26,170
benefit is that the logging module odds

00:05:22,820 --> 00:05:29,750
of logging and module adds thread safety

00:05:26,170 --> 00:05:33,230
and each message comes out as one atomic

00:05:29,750 --> 00:05:35,810
title another one I find when I don't

00:05:33,230 --> 00:05:37,970
use the logging module I go to remove

00:05:35,810 --> 00:05:39,380
the debug statements I've added I'm

00:05:37,970 --> 00:05:40,820
searching through all my crit statements

00:05:39,380 --> 00:05:42,080
try to work out weight and this print

00:05:40,820 --> 00:05:43,910
statement is actually meant to go out to

00:05:42,080 --> 00:05:46,160
the console and this print statement was

00:05:43,910 --> 00:05:48,080
something I just added temporarily so

00:05:46,160 --> 00:05:50,150
the intention is clear this is that

00:05:48,080 --> 00:05:52,430
maintainability of your code you can go

00:05:50,150 --> 00:05:55,300
in and see is this is something that's

00:05:52,430 --> 00:05:57,460
meant to stay and this is debug out

00:05:55,300 --> 00:05:59,259
or even better just filtered out so you

00:05:57,460 --> 00:06:02,050
just turn it off so you don't think if I

00:05:59,259 --> 00:06:04,419
have to see it and the other minor

00:06:02,050 --> 00:06:07,000
advantage is the optional freebies you

00:06:04,419 --> 00:06:09,819
get so your log file can automatically

00:06:07,000 --> 00:06:12,419
include the severity which again I'll

00:06:09,819 --> 00:06:14,830
talk about in a minute time stamps

00:06:12,419 --> 00:06:16,720
whereabouts on the Codel occurred if

00:06:14,830 --> 00:06:18,729
you're doing multi-threaded code you can

00:06:16,720 --> 00:06:20,229
throw in the thread name there if you're

00:06:18,729 --> 00:06:22,150
doing if you have an exception you can

00:06:20,229 --> 00:06:23,380
get a stack trace so all this can be

00:06:22,150 --> 00:06:24,639
done with the print statement it was

00:06:23,380 --> 00:06:27,430
just so much easier with the locking

00:06:24,639 --> 00:06:29,860
command because it's there for free but

00:06:27,430 --> 00:06:32,560
I think the real major benefit of using

00:06:29,860 --> 00:06:35,139
the logging module is the decoupling

00:06:32,560 --> 00:06:36,849
from your code which has a job to do

00:06:35,139 --> 00:06:38,530
it's not that processing wants to do and

00:06:36,849 --> 00:06:40,750
it just needs to send off some event and

00:06:38,530 --> 00:06:42,729
then the actual handling that says are

00:06:40,750 --> 00:06:45,009
this event is important enough to be

00:06:42,729 --> 00:06:49,030
written to two long files and email to a

00:06:45,009 --> 00:06:50,800
customer or whatever that is so being

00:06:49,030 --> 00:06:52,509
able to separate that and say I'm gonna

00:06:50,800 --> 00:06:54,520
worry about that later or my operations

00:06:52,509 --> 00:06:57,130
manager can worry about that and I

00:06:54,520 --> 00:06:59,380
instead I'm going to just say hey the

00:06:57,130 --> 00:07:01,000
event happened deal with it I think that

00:06:59,380 --> 00:07:03,070
is the biggest advantage of the logging

00:07:01,000 --> 00:07:05,699
module so that that is the reason which

00:07:03,070 --> 00:07:05,699
I ended up using

00:07:07,990 --> 00:07:11,680
it's also highly configurable I don't

00:07:10,120 --> 00:07:12,820
know what more to say about that because

00:07:11,680 --> 00:07:17,080
I've got to hold it on the slides to

00:07:12,820 --> 00:07:19,300
cover it I guess what I was my point

00:07:17,080 --> 00:07:20,680
there was if you decide later on that

00:07:19,300 --> 00:07:23,259
you're only going to long to one file

00:07:20,680 --> 00:07:25,270
you can log to three files or you want

00:07:23,259 --> 00:07:26,620
to register on a web server your events

00:07:25,270 --> 00:07:30,690
you can do all that without actually

00:07:26,620 --> 00:07:30,690
touching the code that raised the event

00:07:31,889 --> 00:07:37,389
severity x' or this is what I'll call

00:07:34,180 --> 00:07:38,979
severity what they call levels I just

00:07:37,389 --> 00:07:40,900
want to go a little bit deeper in there

00:07:38,979 --> 00:07:43,900
inside the logging module it's

00:07:40,900 --> 00:07:46,479
represented as an integer but there's a

00:07:43,900 --> 00:07:48,699
whole lot of symbols which defined which

00:07:46,479 --> 00:07:50,830
you can use instead for convenience so

00:07:48,699 --> 00:07:52,389
there's debug warning error and

00:07:50,830 --> 00:07:53,740
exception of both of the same level of

00:07:52,389 --> 00:07:54,880
severity they've just got a slightly

00:07:53,740 --> 00:07:58,870
different behavior about whether they

00:07:54,880 --> 00:08:02,860
bother to log a stack trace or not by

00:07:58,870 --> 00:08:05,169
default I and critical you can add your

00:08:02,860 --> 00:08:07,419
own so you can add more levels in there

00:08:05,169 --> 00:08:11,770
if you want to super double critical you

00:08:07,419 --> 00:08:13,990
can add that there's a common problem

00:08:11,770 --> 00:08:16,419
which occurs with bug reports as well

00:08:13,990 --> 00:08:18,610
with as well as logging the developer

00:08:16,419 --> 00:08:20,050
who's writing this code thinks the fact

00:08:18,610 --> 00:08:21,820
that they can't write their data out to

00:08:20,050 --> 00:08:24,099
the disk there's a critical problem

00:08:21,820 --> 00:08:26,020
because their code can't do anything

00:08:24,099 --> 00:08:27,430
else that's what their codes for that's

00:08:26,020 --> 00:08:30,220
what they spend all this time developing

00:08:27,430 --> 00:08:32,409
that's a critical problem but your

00:08:30,220 --> 00:08:34,150
operations manager in your data center

00:08:32,409 --> 00:08:35,770
probably doesn't care much than a single

00:08:34,150 --> 00:08:37,360
hard drivers file it seems critical to

00:08:35,770 --> 00:08:38,710
you but to them it's something that's

00:08:37,360 --> 00:08:40,360
going to be dealt with at the end of the

00:08:38,710 --> 00:08:42,160
when they do this sweep and replace all

00:08:40,360 --> 00:08:45,790
the broken hard drives they know there's

00:08:42,160 --> 00:08:48,160
redundant service taking over here so I

00:08:45,790 --> 00:08:50,620
guess I don't have a real solution here

00:08:48,160 --> 00:08:52,420
except to say give it some thought about

00:08:50,620 --> 00:08:54,070
whether on your particular project you

00:08:52,420 --> 00:08:56,650
need to go ahead and define these in

00:08:54,070 --> 00:08:58,420
more detail so you developers know which

00:08:56,650 --> 00:09:00,450
levels of areas appropriate for which

00:08:58,420 --> 00:09:00,450
situation

00:09:04,380 --> 00:09:08,940
so moving into the second part where I

00:09:06,510 --> 00:09:11,550
talk about what you're missing out on if

00:09:08,940 --> 00:09:14,250
you're only using the very basic logging

00:09:11,550 --> 00:09:16,290
is the configurability and there is a

00:09:14,250 --> 00:09:18,330
large amount of configurability now I'm

00:09:16,290 --> 00:09:20,490
breaking it up in two parts the first is

00:09:18,330 --> 00:09:22,350
the filtering which error messages are

00:09:20,490 --> 00:09:23,400
you going to bother to write to the log

00:09:22,350 --> 00:09:25,500
file and which ones you're going to

00:09:23,400 --> 00:09:27,720
throw away so built in straight away

00:09:25,500 --> 00:09:29,960
you'd have it by severity you can

00:09:27,720 --> 00:09:32,340
commonly say I don't want to hear about

00:09:29,960 --> 00:09:33,660
debug messages I don't hear about info

00:09:32,340 --> 00:09:36,930
messages in fact only one hear about

00:09:33,660 --> 00:09:39,180
errors and above so that's throwing you

00:09:36,930 --> 00:09:41,490
can filter by component so you can say I

00:09:39,180 --> 00:09:43,410
do not want to hear about the database

00:09:41,490 --> 00:09:44,850
it just logs errors all day and just

00:09:43,410 --> 00:09:47,640
bothers me I want to ignore everything

00:09:44,850 --> 00:09:50,760
from the database you can write your own

00:09:47,640 --> 00:09:53,520
custom filtering where you say I don't

00:09:50,760 --> 00:09:55,350
know the DBA isn't on Wednesdays so on

00:09:53,520 --> 00:09:58,290
Wednesdays I want the database to filter

00:09:55,350 --> 00:10:00,330
and the boss is in on Friday so turn off

00:09:58,290 --> 00:10:01,410
all filtering on Fridays filter out

00:10:00,330 --> 00:10:03,780
everything on Friday so it looks like

00:10:01,410 --> 00:10:05,820
everything's going fine you can come up

00:10:03,780 --> 00:10:11,399
with your own story there

00:10:05,820 --> 00:10:13,540
the actual handling of the log messages

00:10:11,399 --> 00:10:15,190
built-in for free there's a large number

00:10:13,540 --> 00:10:17,920
of ways of doing it probably the obvious

00:10:15,190 --> 00:10:20,140
way is writing to a file or right into a

00:10:17,920 --> 00:10:23,130
stream such as standard error there's

00:10:20,140 --> 00:10:25,120
also the concept of rotating files

00:10:23,130 --> 00:10:28,360
there's several different variants of

00:10:25,120 --> 00:10:31,300
this you can say I don't want any one

00:10:28,360 --> 00:10:32,770
log file to get bigger than 100k because

00:10:31,300 --> 00:10:34,510
my editor can't handle it it's just a

00:10:32,770 --> 00:10:36,670
bit slow so it will break it up to

00:10:34,510 --> 00:10:38,440
generations you can say I want to throw

00:10:36,670 --> 00:10:42,029
away and you want to keep three of those

00:10:38,440 --> 00:10:44,589
so all up I've only got a 300k of logs

00:10:42,029 --> 00:10:46,330
you can say oh what a Monday logger

00:10:44,589 --> 00:10:47,649
Tuesday longer Wednesday log this is

00:10:46,330 --> 00:10:50,459
just different ways of breaking it up to

00:10:47,649 --> 00:10:50,459
make the fast more

00:10:51,040 --> 00:10:55,180
perhaps your system is just one of the

00:10:53,020 --> 00:10:57,850
larger system and you want to integrate

00:10:55,180 --> 00:10:59,950
it so that all of the different parts of

00:10:57,850 --> 00:11:01,360
your applications all of your

00:10:59,950 --> 00:11:03,520
applications are looking to the same

00:11:01,360 --> 00:11:06,820
place so the operating systems offer a

00:11:03,520 --> 00:11:09,580
couple of solutions there on unix the

00:11:06,820 --> 00:11:13,720
default the the de facto standard is

00:11:09,580 --> 00:11:16,000
syslog but on Windows it's empty events

00:11:13,720 --> 00:11:18,220
both of those can be integrated in quite

00:11:16,000 --> 00:11:19,810
easily so your events go and get pushed

00:11:18,220 --> 00:11:22,230
off to that system where they'll get

00:11:19,810 --> 00:11:22,230
handled

00:11:22,590 --> 00:11:28,980
events you can have events emailed to

00:11:27,930 --> 00:11:30,780
you this is something that I've been

00:11:28,980 --> 00:11:32,880
using so that when a critical event

00:11:30,780 --> 00:11:34,440
happens I get something in my inbox do

00:11:32,880 --> 00:11:36,270
you know what's going on so I can fix it

00:11:34,440 --> 00:11:38,250
quickly he can have it register on a

00:11:36,270 --> 00:11:40,140
website you can have your own socket so

00:11:38,250 --> 00:11:43,200
go to whatever system you got on another

00:11:40,140 --> 00:11:46,680
machine you can cache stuff to memory so

00:11:43,200 --> 00:11:48,900
it doesn't go anywhere you can write

00:11:46,680 --> 00:11:51,360
your own custom ones so if you feel that

00:11:48,900 --> 00:11:53,220
you really want your debug messages to

00:11:51,360 --> 00:11:56,340
appear in your Twitter stream you can

00:11:53,220 --> 00:11:58,530
write your own and more importantly you

00:11:56,340 --> 00:12:01,200
can combine these things so that you can

00:11:58,530 --> 00:12:03,510
say as I have done I want critical

00:12:01,200 --> 00:12:06,150
messages to be emailed to me I want

00:12:03,510 --> 00:12:08,190
errors and above to go into one log file

00:12:06,150 --> 00:12:09,990
which just has you know the juicy

00:12:08,190 --> 00:12:11,880
goodness and then I want all the debug

00:12:09,990 --> 00:12:13,830
stuff to go into another log file so

00:12:11,880 --> 00:12:15,390
when I really need to see it I can go

00:12:13,830 --> 00:12:17,820
and have a look at it and maybe I can

00:12:15,390 --> 00:12:19,380
put a title restriction on that so that

00:12:17,820 --> 00:12:22,020
that only lasts for a couple of days

00:12:19,380 --> 00:12:24,110
whereas the error logs last for weeks

00:12:22,020 --> 00:12:25,760
weeks

00:12:24,110 --> 00:12:28,370
so you do need to do a little bit of

00:12:25,760 --> 00:12:30,500
configure hi mister formatting you can

00:12:28,370 --> 00:12:32,060
adjust the formatting which goes from

00:12:30,500 --> 00:12:34,960
the level of saying I want to use

00:12:32,060 --> 00:12:38,630
American dates versus ISO dates versus

00:12:34,960 --> 00:12:40,310
Australian dates or I wanted to look

00:12:38,630 --> 00:12:42,320
I've done this I want the output to

00:12:40,310 --> 00:12:43,790
being comma separated values sort of

00:12:42,320 --> 00:12:45,710
formats of this commerce between a

00:12:43,790 --> 00:12:47,390
rather than columns that's the stuff you

00:12:45,710 --> 00:12:48,890
could you can change the formatting you

00:12:47,390 --> 00:12:52,190
want to be HTML you can make it with

00:12:48,890 --> 00:12:54,560
HTML the place that you can configure

00:12:52,190 --> 00:12:56,870
all this is during your application

00:12:54,560 --> 00:13:00,320
startup so typically will be in your

00:12:56,870 --> 00:13:02,480
main program or somewhere similar you

00:13:00,320 --> 00:13:05,030
can use the defaults there's either

00:13:02,480 --> 00:13:06,920
leave it leave it alone in which case

00:13:05,030 --> 00:13:09,320
goes to standard error warning it above

00:13:06,920 --> 00:13:11,720
or you can use basic config to put out

00:13:09,320 --> 00:13:13,490
some files a file where you want the

00:13:11,720 --> 00:13:14,810
output to go or you can do it

00:13:13,490 --> 00:13:16,880
programmatically I'll be talking later

00:13:14,810 --> 00:13:19,100
about a number of components that can be

00:13:16,880 --> 00:13:21,600
plugged together so you can put these

00:13:19,100 --> 00:13:25,079
handlers together as Python code

00:13:21,600 --> 00:13:27,750
or you can during your startup point to

00:13:25,079 --> 00:13:30,870
a config file and the config file is a

00:13:27,750 --> 00:13:33,930
text file that your system administrator

00:13:30,870 --> 00:13:35,639
can go and change on the fly so the next

00:13:33,930 --> 00:13:37,110
time your program starts up it can they

00:13:35,639 --> 00:13:39,269
can change it so that's quite powerful

00:13:37,110 --> 00:13:41,610
there's something I was using for a

00:13:39,269 --> 00:13:42,959
while and another feature which sounds

00:13:41,610 --> 00:13:45,720
cool to me but I've never actually tried

00:13:42,959 --> 00:13:48,690
it is you can defer to say I want my

00:13:45,720 --> 00:13:50,339
program listening to a socket and when a

00:13:48,690 --> 00:13:52,050
message comes to the socket explaining

00:13:50,339 --> 00:13:53,250
how to change the logging it'll change

00:13:52,050 --> 00:13:55,860
the logging so you can change the

00:13:53,250 --> 00:13:59,430
logging while your application is

00:13:55,860 --> 00:14:01,110
running from a remote server so that

00:13:59,430 --> 00:14:04,279
sounds pretty swish and I'm sure one day

00:14:01,110 --> 00:14:04,279
I'm gonna fight II was free

00:14:04,930 --> 00:14:08,940
I'm hoping there's no password on this

00:14:06,610 --> 00:14:08,940
good

00:14:09,880 --> 00:14:15,850
next I wanted to talk about improving

00:14:13,300 --> 00:14:18,130
the way you do so if you had a print

00:14:15,850 --> 00:14:20,650
statement before that just said here's

00:14:18,130 --> 00:14:23,950
the name of my object and it has a

00:14:20,650 --> 00:14:26,500
balance this you might want to instantly

00:14:23,950 --> 00:14:28,090
go and just replace the print statement

00:14:26,500 --> 00:14:30,400
with logging not in focus and practice

00:14:28,090 --> 00:14:33,840
about it and be done that doesn't work

00:14:30,400 --> 00:14:37,270
you have to use the string formatting

00:14:33,840 --> 00:14:38,950
functionality of Python so that you pass

00:14:37,270 --> 00:14:41,920
in here assume people are familiar with

00:14:38,950 --> 00:14:44,500
the idea of you pass two parameters

00:14:41,920 --> 00:14:47,620
making subtool in where the percentages

00:14:44,500 --> 00:14:49,180
are if those things are objects that it

00:14:47,620 --> 00:14:51,490
goes and calls the store function of

00:14:49,180 --> 00:14:53,860
that object to go and do that

00:14:51,490 --> 00:14:56,380
substitution so you can do it that way

00:14:53,860 --> 00:14:59,440
so you're really only passing a string

00:14:56,380 --> 00:15:01,420
in that will then get sent out but if

00:14:59,440 --> 00:15:04,180
you and that works but if you run it

00:15:01,420 --> 00:15:07,570
through pilot it will complain it will

00:15:04,180 --> 00:15:09,580
recommend instead that you break that up

00:15:07,570 --> 00:15:11,500
that you pass the first parameter is

00:15:09,580 --> 00:15:13,960
your formatting string and then you pass

00:15:11,500 --> 00:15:15,790
the other parameters in afterwards now

00:15:13,960 --> 00:15:16,960
the reasons for doing that I think

00:15:15,790 --> 00:15:20,920
they're fairly minor but there's a

00:15:16,960 --> 00:15:22,900
couple of them the first is that if you

00:15:20,920 --> 00:15:25,600
do go and customize your filters and

00:15:22,900 --> 00:15:26,740
handlers and formatters they can

00:15:25,600 --> 00:15:28,810
actually go and have a look at the

00:15:26,740 --> 00:15:31,240
contents of those objects before it gets

00:15:28,810 --> 00:15:32,470
substituted in the string so they might

00:15:31,240 --> 00:15:33,310
be able to see something else in those

00:15:32,470 --> 00:15:34,660
you look at some

00:15:33,310 --> 00:15:37,029
as inside that object some other

00:15:34,660 --> 00:15:39,130
attributes of that object and and decide

00:15:37,029 --> 00:15:41,350
how to deal with it so flexibility is

00:15:39,130 --> 00:15:46,510
one reason you probably won't ever do

00:15:41,350 --> 00:15:49,839
that if you do ever want to do that the

00:15:46,510 --> 00:15:51,430
other is performance the actual act of

00:15:49,839 --> 00:15:53,890
drinking is a substitution in the stream

00:15:51,430 --> 00:15:57,130
will only be done if it passes all the

00:15:53,890 --> 00:15:59,040
filters so if your do if your filtered

00:15:57,130 --> 00:16:01,480
out logging dot info the act of

00:15:59,040 --> 00:16:03,880
substituting those are the name and the

00:16:01,480 --> 00:16:05,740
value of into the percentage esters can

00:16:03,880 --> 00:16:08,410
be thrown away because it doesn't need

00:16:05,740 --> 00:16:10,150
to be done and if they are objects that

00:16:08,410 --> 00:16:11,830
could be calling a stir function so in

00:16:10,150 --> 00:16:13,360
theory that could be quite expensive so

00:16:11,830 --> 00:16:16,089
in theory that could be saving quite a

00:16:13,360 --> 00:16:19,240
bit I said both of those is fairly minor

00:16:16,089 --> 00:16:21,870
reasons but pilot seems to think it's

00:16:19,240 --> 00:16:21,870
worth award

00:16:23,769 --> 00:16:28,899
I wanted to talk also about Heisenberg's

00:16:26,470 --> 00:16:31,119
so Heisenberg's are ones where when you

00:16:28,899 --> 00:16:33,040
add the debugging information it causes

00:16:31,119 --> 00:16:37,899
the problem to go away or it causes the

00:16:33,040 --> 00:16:39,910
problem to appear so to avoid that make

00:16:37,899 --> 00:16:42,100
sure that when you pass those parameters

00:16:39,910 --> 00:16:43,299
in if they are expressions that you're

00:16:42,100 --> 00:16:45,009
not passing in something that's

00:16:43,299 --> 00:16:46,689
particularly expensive which might

00:16:45,009 --> 00:16:49,600
change the behavior of you if it's a

00:16:46,689 --> 00:16:51,459
real-time system stuff that has side

00:16:49,600 --> 00:16:53,799
effects so whether or not it gets

00:16:51,459 --> 00:16:55,689
executed will affect how the rest of

00:16:53,799 --> 00:16:57,879
your application will behave and

00:16:55,689 --> 00:16:58,959
anything that raises exceptions because

00:16:57,879 --> 00:17:01,119
it's just really confusing

00:16:58,959 --> 00:17:02,439
when you're in the middle of an

00:17:01,119 --> 00:17:03,519
exception handler you're trying to log

00:17:02,439 --> 00:17:08,649
out what's going on and another

00:17:03,519 --> 00:17:10,929
exception gets raised there is a helper

00:17:08,649 --> 00:17:14,799
function to try and assist you with the

00:17:10,929 --> 00:17:16,659
expensive operations because if if we

00:17:14,799 --> 00:17:18,939
were writing this in C would be using

00:17:16,659 --> 00:17:21,819
macros and if we got rid of the debug

00:17:18,939 --> 00:17:23,620
statements they could be optimized out

00:17:21,819 --> 00:17:25,689
by the preprocessor so there's no code

00:17:23,620 --> 00:17:29,020
there and if we were using a lazy

00:17:25,689 --> 00:17:30,309
evaluation language like say Miranda it

00:17:29,020 --> 00:17:31,950
wouldn't bother to evaluate those

00:17:30,309 --> 00:17:35,700
parameters until it

00:17:31,950 --> 00:17:37,260
but in Python as along with number of

00:17:35,700 --> 00:17:38,330
other languages it will evaluate the

00:17:37,260 --> 00:17:40,980
parameters being passed to a function

00:17:38,330 --> 00:17:44,430
every time before the function is caught

00:17:40,980 --> 00:17:46,440
so logger dot is in there before you can

00:17:44,430 --> 00:17:47,850
put an if statement checking for that to

00:17:46,440 --> 00:17:51,050
decide whether or not you're going to

00:17:47,850 --> 00:17:54,060
call the expensive logging operation I

00:17:51,050 --> 00:17:55,830
haven't found that I needed this because

00:17:54,060 --> 00:17:58,230
I've made sure that all the stuff that I

00:17:55,830 --> 00:18:00,120
know this isn't sheep but if you do have

00:17:58,230 --> 00:18:02,340
an expensive operation this is one way

00:18:00,120 --> 00:18:04,740
of making sure that it doesn't weigh

00:18:02,340 --> 00:18:06,980
down the system when you've turned off

00:18:04,740 --> 00:18:06,980
that

00:18:09,900 --> 00:18:12,960
I wanted to bring up the issue of

00:18:11,460 --> 00:18:15,030
whether locking should be tested because

00:18:12,960 --> 00:18:16,950
it's something that I struggled with to

00:18:15,030 --> 00:18:18,930
begin with and I think I made a mistake

00:18:16,950 --> 00:18:22,980
and I changed my mind so I thought I'd

00:18:18,930 --> 00:18:24,390
share what I think it is now I think a

00:18:22,980 --> 00:18:26,310
question you need to ask yourself is

00:18:24,390 --> 00:18:28,110
whether your help desk staff and your

00:18:26,310 --> 00:18:29,940
operations or systems administration

00:18:28,110 --> 00:18:32,640
people are considered users of your

00:18:29,940 --> 00:18:34,230
system if they are considered users of

00:18:32,640 --> 00:18:36,660
your system then logging is part of your

00:18:34,230 --> 00:18:38,250
user interface it doesn't it's not

00:18:36,660 --> 00:18:39,840
obvious at first that that's the case

00:18:38,250 --> 00:18:41,700
but it's a way that your users are

00:18:39,840 --> 00:18:43,860
interacting with your system so in that

00:18:41,700 --> 00:18:46,320
case you should be unit testing and if

00:18:43,860 --> 00:18:47,640
your project has requirements in the UI

00:18:46,320 --> 00:18:49,020
spec it's probably something that should

00:18:47,640 --> 00:18:51,300
be mentioned in your requirements in the

00:18:49,020 --> 00:18:54,410
UI spec what log messages you're raising

00:18:51,300 --> 00:18:58,470
may be what format they are if you have

00:18:54,410 --> 00:18:59,610
user experience staff members they might

00:18:58,470 --> 00:19:02,700
be the people who write your log

00:18:59,610 --> 00:19:04,890
messages something to think about

00:19:02,700 --> 00:19:06,750
on the other hand there's the more

00:19:04,890 --> 00:19:08,910
typical debug messages which are just

00:19:06,750 --> 00:19:11,550
being used by the developer to output

00:19:08,910 --> 00:19:14,370
you know the contents of X and that

00:19:11,550 --> 00:19:15,960
particular part of the code and I would

00:19:14,370 --> 00:19:19,560
argue that you shouldn't be you know

00:19:15,960 --> 00:19:21,150
testing that it kind of depends on

00:19:19,560 --> 00:19:22,650
whether you consider your to unit test

00:19:21,150 --> 00:19:24,870
to be blackbox tests we don't know

00:19:22,650 --> 00:19:26,430
what's going on inside a white box test

00:19:24,870 --> 00:19:28,500
where you're trying to follow a path

00:19:26,430 --> 00:19:30,150
through them and you could use debug

00:19:28,500 --> 00:19:32,210
messages to prove to yourself that you

00:19:30,150 --> 00:19:34,950
are executing certain parts of your code

00:19:32,210 --> 00:19:38,340
but there are other ways of doing that

00:19:34,950 --> 00:19:41,670
such as coverage tools which I'd

00:19:38,340 --> 00:19:43,920
probably recommend over logging if you

00:19:41,670 --> 00:19:47,370
do go ahead and say yes we are going to

00:19:43,920 --> 00:19:48,930
unit test the the debug output it means

00:19:47,370 --> 00:19:51,420
that your unit tests become very fragile

00:19:48,930 --> 00:19:52,710
when you refactor which is something I

00:19:51,420 --> 00:19:55,050
was suffering from when I was making

00:19:52,710 --> 00:19:56,760
this mistake and it means that if you

00:19:55,050 --> 00:19:58,890
just go ahead while you're debugging and

00:19:56,760 --> 00:20:01,620
add a new debug message all your unit

00:19:58,890 --> 00:20:03,450
tests start failing one thing to

00:20:01,620 --> 00:20:04,830
consider is whether you with if you've

00:20:03,450 --> 00:20:06,240
worked with people like I've worked with

00:20:04,830 --> 00:20:08,610
that you come up with some sort of

00:20:06,240 --> 00:20:11,130
policy that says you I can add debug you

00:20:08,610 --> 00:20:12,570
test debug messages in your project are

00:20:11,130 --> 00:20:15,300
they going to then come up with another

00:20:12,570 --> 00:20:17,620
way of logging in order to avoid the

00:20:15,300 --> 00:20:18,909
unit tests

00:20:17,620 --> 00:20:20,650
and the final thing which is probably

00:20:18,909 --> 00:20:22,539
the most important thing there if you

00:20:20,650 --> 00:20:24,520
are going to be running your code

00:20:22,539 --> 00:20:26,169
without the debug messages turned on

00:20:24,520 --> 00:20:27,730
then you should make sure that at least

00:20:26,169 --> 00:20:29,890
some of your tests are testing that code

00:20:27,730 --> 00:20:31,510
because you may have heisenbugs we're

00:20:29,890 --> 00:20:33,850
turning on the logging changes the

00:20:31,510 --> 00:20:35,169
behavior the opposite kind of applies as

00:20:33,850 --> 00:20:37,990
well if you're going to allow the

00:20:35,169 --> 00:20:40,480
flexibility for your sis ops system

00:20:37,990 --> 00:20:42,970
administrators to go and turn on more

00:20:40,480 --> 00:20:45,390
logging you should be testing that that

00:20:42,970 --> 00:20:45,390
works too

00:20:47,140 --> 00:20:53,320
so now I wanted to take an aside to have

00:20:50,260 --> 00:20:57,480
a look at some code that I had that had

00:20:53,320 --> 00:21:00,790
a problem fairly simple it was logging

00:20:57,480 --> 00:21:02,170
I'm gonna sleep for two seconds and then

00:21:00,790 --> 00:21:03,940
it was sleeping for two seconds

00:21:02,170 --> 00:21:06,040
and then it was never waking up I'm

00:21:03,940 --> 00:21:09,160
checking my log file and it's not waking

00:21:06,040 --> 00:21:10,660
up and that had me worried about what

00:21:09,160 --> 00:21:12,040
was going on with a sleep statement I

00:21:10,660 --> 00:21:15,370
stared at the sleep statement for awhile

00:21:12,040 --> 00:21:17,440
saying well this duration got a huge

00:21:15,370 --> 00:21:20,200
value but no duration was only two

00:21:17,440 --> 00:21:21,820
seconds is to meant to be two days am i

00:21:20,200 --> 00:21:22,870
reading the sleep statement wrong is

00:21:21,820 --> 00:21:24,820
there something wrong with my system

00:21:22,870 --> 00:21:27,880
clock which is causing it to sleep for a

00:21:24,820 --> 00:21:29,890
long time but obviously it because of

00:21:27,880 --> 00:21:31,600
the subject of this talk it was the

00:21:29,890 --> 00:21:34,000
logging the second logging statement was

00:21:31,600 --> 00:21:35,470
freezing up and that had me even more

00:21:34,000 --> 00:21:36,970
confused what changed between the first

00:21:35,470 --> 00:21:39,460
logging statement and the second logic

00:21:36,970 --> 00:21:41,049
statement well it turns out the second

00:21:39,460 --> 00:21:43,720
logging logging statement was starting

00:21:41,049 --> 00:21:47,100
up decided it was going to print out the

00:21:43,720 --> 00:21:49,960
word awake went to grab the lock and

00:21:47,100 --> 00:21:53,169
found that it was blocked on another

00:21:49,960 --> 00:21:55,600
logging statement this looking statement

00:21:53,169 --> 00:21:56,950
here in this was being run by a number

00:21:55,600 --> 00:21:57,700
of really important threads the ones

00:21:56,950 --> 00:21:59,549
that make me money

00:21:57,700 --> 00:22:02,440
and this was some inconsequential

00:21:59,549 --> 00:22:05,260
background thread and what it was doing

00:22:02,440 --> 00:22:08,080
was computing in the example here the

00:22:05,260 --> 00:22:10,390
airspeed velocity of a swallow and of

00:22:08,080 --> 00:22:11,559
course it's been called by number of

00:22:10,390 --> 00:22:13,150
different threads so I'm starting out by

00:22:11,559 --> 00:22:14,390
grabbing its own lock to make sure it's

00:22:13,150 --> 00:22:15,980
not being

00:22:14,390 --> 00:22:18,530
called several times by different

00:22:15,980 --> 00:22:19,820
threads and it's checking to see whether

00:22:18,530 --> 00:22:21,830
it knows whether it's an African or

00:22:19,820 --> 00:22:24,380
European swallow when it doesn't know

00:22:21,830 --> 00:22:25,970
that it was sending out a warning saying

00:22:24,380 --> 00:22:30,830
this particular swallow has an unknown

00:22:25,970 --> 00:22:32,480
origin so this logging statement the

00:22:30,830 --> 00:22:34,370
info statement was waiting for the

00:22:32,480 --> 00:22:35,900
warning statement to complete but the

00:22:34,370 --> 00:22:36,790
warning statement was taking a very long

00:22:35,900 --> 00:22:39,140
time

00:22:36,790 --> 00:22:41,810
why was the warning statement taking a

00:22:39,140 --> 00:22:44,300
very long time well it was substituting

00:22:41,810 --> 00:22:46,160
the value of self into the string and

00:22:44,300 --> 00:22:48,170
order to do that it called the

00:22:46,160 --> 00:22:50,120
underscore underscore stir underscore

00:22:48,170 --> 00:22:52,400
underscore function on that object and

00:22:50,120 --> 00:22:55,580
that was fairly simple it was grabbing

00:22:52,400 --> 00:22:58,160
the lock which is the same lock that I'd

00:22:55,580 --> 00:23:02,420
grabbed here and it wasn't a reentrant

00:22:58,160 --> 00:23:04,430
lock it is now but it wasn't there so a

00:23:02,420 --> 00:23:06,320
deadlock was occurring in a really minor

00:23:04,430 --> 00:23:09,260
thread and that was causing this locking

00:23:06,320 --> 00:23:10,910
door info statement to fail so there are

00:23:09,260 --> 00:23:14,510
really two messages you can take out of

00:23:10,910 --> 00:23:16,460
this the first is that despite the fact

00:23:14,510 --> 00:23:19,280
that I've had many years experience in

00:23:16,460 --> 00:23:21,260
developing real-time systems I'm still a

00:23:19,280 --> 00:23:23,020
deadlock causing Pelican so that's one

00:23:21,260 --> 00:23:24,760
thing to learn from this

00:23:23,020 --> 00:23:26,950
but the other two learn from this I

00:23:24,760 --> 00:23:29,710
think is that the locking system our

00:23:26,950 --> 00:23:32,650
arguer locking system has two basic

00:23:29,710 --> 00:23:34,030
tenets the first is do no harm and yet

00:23:32,650 --> 00:23:36,490
the locking system was taken down by

00:23:34,030 --> 00:23:38,200
threads my important threads because of

00:23:36,490 --> 00:23:40,960
some minor into consequential deadlock

00:23:38,200 --> 00:23:43,230
in another thread and the second thing I

00:23:40,960 --> 00:23:45,610
think a locking system has to do is

00:23:43,230 --> 00:23:47,290
illuminate it needs to shed light on

00:23:45,610 --> 00:23:48,610
what's going on and I think this was

00:23:47,290 --> 00:23:50,920
doing the exact opposite it was

00:23:48,610 --> 00:23:52,600
distracting me be worried about exactly

00:23:50,920 --> 00:23:55,930
the wrong thread - the one that was in

00:23:52,600 --> 00:23:57,280
there now I not really complaining about

00:23:55,930 --> 00:23:58,450
the locking system here I don't think

00:23:57,280 --> 00:24:01,420
there was a better way that they could

00:23:58,450 --> 00:24:03,850
have done this but I just think it's

00:24:01,420 --> 00:24:07,180
worth noticing that the locking system

00:24:03,850 --> 00:24:09,400
is a complex thing when you add it to

00:24:07,180 --> 00:24:11,770
your code sometimes you get bitten on

00:24:09,400 --> 00:24:13,450
the bum by it so just be aware that this

00:24:11,770 --> 00:24:16,080
sort of thing can happen and the logging

00:24:13,450 --> 00:24:16,080
system can be

00:24:17,970 --> 00:24:24,299
all right so so far I've been only using

00:24:21,419 --> 00:24:26,429
examples from the convenience functions

00:24:24,299 --> 00:24:28,259
the very basic stuff but what I wanted

00:24:26,429 --> 00:24:29,820
and that stuff is good it's good for

00:24:28,259 --> 00:24:31,080
your small applications where you don't

00:24:29,820 --> 00:24:33,000
really need you know your requirements

00:24:31,080 --> 00:24:34,500
on that big it's also good for getting

00:24:33,000 --> 00:24:36,929
your feet wet if you've never used the

00:24:34,500 --> 00:24:38,639
logging system before I'd probably even

00:24:36,929 --> 00:24:40,139
recommend doing it while you're first

00:24:38,639 --> 00:24:41,399
writing the beginning of your large

00:24:40,139 --> 00:24:42,690
system until you understand the

00:24:41,399 --> 00:24:45,929
architecture and how you want to set up

00:24:42,690 --> 00:24:47,720
a logging but anyway so they're good but

00:24:45,929 --> 00:24:50,909
let's see what this baby can really do

00:24:47,720 --> 00:24:53,009
I've divided it up into the front-end

00:24:50,909 --> 00:24:56,159
components of the backend components so

00:24:53,009 --> 00:24:57,659
the next few slides about that the

00:24:56,159 --> 00:24:58,830
front-end the first one is your client

00:24:57,659 --> 00:25:01,669
your code that's actually try and do

00:24:58,830 --> 00:25:04,080
something its responsibilities are to

00:25:01,669 --> 00:25:05,909
configure the logging configure it all

00:25:04,080 --> 00:25:07,679
the handling of the logging however you

00:25:05,909 --> 00:25:09,389
need it and that's done normally in your

00:25:07,679 --> 00:25:12,029
main program or somewhere similar to

00:25:09,389 --> 00:25:14,399
startup then it goes and fetches a

00:25:12,029 --> 00:25:15,899
logger by name so goes for the logging

00:25:14,399 --> 00:25:17,909
module and says I want this particular

00:25:15,899 --> 00:25:20,759
logger and I'll talking about the name

00:25:17,909 --> 00:25:22,830
of the next slide typically you can have

00:25:20,759 --> 00:25:24,090
lots of different loggers each module

00:25:22,830 --> 00:25:26,399
could have its own longer each method

00:25:24,090 --> 00:25:29,940
can have its own longer but they are all

00:25:26,399 --> 00:25:31,139
linked up in a hierarchy and so that's

00:25:29,940 --> 00:25:34,700
what the clients do and then once

00:25:31,139 --> 00:25:34,700
they've got that they can go and call me

00:25:34,870 --> 00:25:42,830
the logger object offers the methods

00:25:38,480 --> 00:25:45,110
that actually admit the messages they

00:25:42,830 --> 00:25:47,780
infer the warning the critical the debug

00:25:45,110 --> 00:25:49,010
vessel stuff they have a hierarchy so

00:25:47,780 --> 00:25:51,920
there's a whole lot of different loggers

00:25:49,010 --> 00:25:54,500
in your system in a tree shape and the

00:25:51,920 --> 00:25:58,400
tree is represented by its name which

00:25:54,500 --> 00:26:00,050
uses a dots in an inverted I guess it's

00:25:58,400 --> 00:26:03,170
pretty obvious that my F dot database

00:26:00,050 --> 00:26:05,510
dot backup is a child logger of my app

00:26:03,170 --> 00:26:08,650
dot database which is a child logger of

00:26:05,510 --> 00:26:11,540
my ax which itself is a child logger of

00:26:08,650 --> 00:26:13,010
the logger that's just has an empty

00:26:11,540 --> 00:26:16,160
string as its name which is the root

00:26:13,010 --> 00:26:18,920
loader so there's a whole lot of logins

00:26:16,160 --> 00:26:20,510
each logger has an associate associated

00:26:18,920 --> 00:26:23,420
filters with it if it likes it doesn't

00:26:20,510 --> 00:26:25,400
have to they can filter by level or they

00:26:23,420 --> 00:26:28,310
can put by some other rules you can also

00:26:25,400 --> 00:26:31,010
have a number of handlers associated

00:26:28,310 --> 00:26:32,270
with it optionally and they actually do

00:26:31,010 --> 00:26:34,940
stuff I'll be talking about the handlers

00:26:32,270 --> 00:26:40,280
in a second but by default a new logger

00:26:34,940 --> 00:26:43,880
won't have a filter or a handler so what

00:26:40,280 --> 00:26:45,500
that means is you can go and if you go

00:26:43,880 --> 00:26:47,420
and come up with a new logger name but

00:26:45,500 --> 00:26:49,280
the system hasn't heard of it will give

00:26:47,420 --> 00:26:52,730
you a new logger and all that will do is

00:26:49,280 --> 00:26:54,620
pass the buck upwards it will just give

00:26:52,730 --> 00:26:56,360
the message it won't output it white

00:26:54,620 --> 00:26:57,770
filter will just give the message to its

00:26:56,360 --> 00:26:59,150
parent and give the message to its

00:26:57,770 --> 00:27:00,830
parent all the way up until it gets to

00:26:59,150 --> 00:27:03,440
the root logger and the root logger has

00:27:00,830 --> 00:27:06,320
some default behavior so the consequence

00:27:03,440 --> 00:27:08,600
of this is the cost of coming up with a

00:27:06,320 --> 00:27:11,000
new logger a new sub logger one for your

00:27:08,600 --> 00:27:12,800
module one for your method one for the

00:27:11,000 --> 00:27:15,200
part of your method however you want to

00:27:12,800 --> 00:27:17,250
do it is fairly cheap so just go ahead

00:27:15,200 --> 00:27:18,930
and add more granularity you

00:27:17,250 --> 00:27:20,970
takes the lead later to filter based on

00:27:18,930 --> 00:27:24,480
it or change the behavior based on what

00:27:20,970 --> 00:27:28,170
the level is so I've talked about the

00:27:24,480 --> 00:27:30,450
two front end things the your your code

00:27:28,170 --> 00:27:34,830
and the logger object which is the most

00:27:30,450 --> 00:27:38,760
visible part of behind the scenes is the

00:27:34,830 --> 00:27:40,470
handlers so the handlers are the things

00:27:38,760 --> 00:27:42,920
that actually do the work whether that's

00:27:40,470 --> 00:27:45,270
writing to a file or sending an email or

00:27:42,920 --> 00:27:49,140
pre get on your Facebook page whatever

00:27:45,270 --> 00:27:51,330
it is that is they also had filters this

00:27:49,140 --> 00:27:54,690
surprised me the first time I saw it the

00:27:51,330 --> 00:27:56,640
idea that you have a filter on your

00:27:54,690 --> 00:27:57,840
logger that decides whether it's going

00:27:56,640 --> 00:27:59,820
to propagate all up and whether it's

00:27:57,840 --> 00:28:01,380
going to send it to the handle and now

00:27:59,820 --> 00:28:02,400
that filter on the handle and decides

00:28:01,380 --> 00:28:06,680
whether it's going to do anything with

00:28:02,400 --> 00:28:06,680
it so

00:28:07,160 --> 00:28:11,300
the terms of the logging module both of

00:28:09,770 --> 00:28:14,470
these are called filters which i think

00:28:11,300 --> 00:28:17,900
is a great day the handler is one what

00:28:14,470 --> 00:28:21,230
does the locking to make sure that no

00:28:17,900 --> 00:28:23,180
two messages are emitted by the same

00:28:21,230 --> 00:28:26,270
handle at the same time and this is

00:28:23,180 --> 00:28:28,220
where a number of different subclasses

00:28:26,270 --> 00:28:30,290
are offered by the logging module that

00:28:28,220 --> 00:28:31,790
you can come and pick up and use as

00:28:30,290 --> 00:28:33,890
building blocks of Lego don't click

00:28:31,790 --> 00:28:35,990
together so there's a file handler of a

00:28:33,890 --> 00:28:39,380
stream handler and the rotating file

00:28:35,990 --> 00:28:41,810
handler and all that sort of stuff or

00:28:39,380 --> 00:28:43,910
you can write your own which I suspect

00:28:41,810 --> 00:28:44,660
most people won't do I have done this

00:28:43,910 --> 00:28:48,700
and that's what I'm gonna be talking

00:28:44,660 --> 00:28:48,700
about in the last section

00:28:48,950 --> 00:28:53,540
finally there's a couple of smaller less

00:28:51,050 --> 00:28:54,650
important objects one is a filter we've

00:28:53,540 --> 00:28:57,440
already seen this being used by the

00:28:54,650 --> 00:28:59,680
handlers and the loggers just returns

00:28:57,440 --> 00:29:02,170
whether or not a particular message

00:28:59,680 --> 00:29:06,080
should be propagated or emitted and

00:29:02,170 --> 00:29:10,040
there's the formatter which decides how

00:29:06,080 --> 00:29:12,200
you want the string to come out it is

00:29:10,040 --> 00:29:14,690
passed a dictionary of fields so it's

00:29:12,200 --> 00:29:15,740
passed the message text it's passed all

00:29:14,690 --> 00:29:18,620
those parameters you passed on the

00:29:15,740 --> 00:29:21,260
command line and also all these freebies

00:29:18,620 --> 00:29:25,010
such as what class was raising the

00:29:21,260 --> 00:29:26,840
problem so what file what line what the

00:29:25,010 --> 00:29:29,060
level was what the thread name was that

00:29:26,840 --> 00:29:30,740
sort of stuff you can add your own

00:29:29,060 --> 00:29:37,950
custom fields and pass those on the

00:29:30,740 --> 00:29:39,930
command line project

00:29:37,950 --> 00:29:42,330
the basic for matter there's a class

00:29:39,930 --> 00:29:45,350
offered there that you can use it

00:29:42,330 --> 00:29:48,200
accepts a string that

00:29:45,350 --> 00:29:50,899
then it'll substitute all those fields

00:29:48,200 --> 00:29:52,549
into it it also accepts a date format

00:29:50,899 --> 00:29:54,409
it's not really important you can

00:29:52,549 --> 00:29:56,269
subclass your own so there'd be there's

00:29:54,409 --> 00:29:59,330
the trivial things let me put it all

00:29:56,269 --> 00:30:03,200
together to recap and show you the flow

00:29:59,330 --> 00:30:06,769
here your client goes and grabs a logger

00:30:03,200 --> 00:30:09,710
from the logging module it calls a

00:30:06,769 --> 00:30:12,620
method on that to emit a message such as

00:30:09,710 --> 00:30:13,970
warning the logger then ghost applies

00:30:12,620 --> 00:30:15,470
any filter system so whether it's going

00:30:13,970 --> 00:30:17,929
to continue it if it decides it is going

00:30:15,470 --> 00:30:19,610
to continue it goes and talks to all of

00:30:17,929 --> 00:30:22,340
its handlers and tells them about the

00:30:19,610 --> 00:30:25,850
message they go ahead and apply their

00:30:22,340 --> 00:30:29,419
own filters then they do mocking the

00:30:25,850 --> 00:30:32,779
thread safety they apply the four manner

00:30:29,419 --> 00:30:35,840
and finally at last they do the work of

00:30:32,779 --> 00:30:38,809
sending that message out once all the

00:30:35,840 --> 00:30:41,450
messages on a particular logger

00:30:38,809 --> 00:30:43,909
are done it optionally passes up to its

00:30:41,450 --> 00:30:45,169
parent which does the same thing decides

00:30:43,909 --> 00:30:47,809
whether it needs to do and you feel

00:30:45,169 --> 00:30:51,080
trained to do any handling and then it

00:30:47,809 --> 00:30:55,700
passes up to its parent so this is I

00:30:51,080 --> 00:30:56,750
guess the the key flow that shows all

00:30:55,700 --> 00:30:58,879
the different things that can be

00:30:56,750 --> 00:31:02,830
adjusted which is what makes the logging

00:30:58,879 --> 00:31:02,830
module so flexible so customizable

00:31:05,380 --> 00:31:11,169
when you your application starts getting

00:31:07,779 --> 00:31:12,399
too large it's time to break up the

00:31:11,169 --> 00:31:14,590
files I've talked about breaking up the

00:31:12,399 --> 00:31:17,230
files by date but there are I think

00:31:14,590 --> 00:31:19,990
another two ways of doing it one is by

00:31:17,230 --> 00:31:21,159
module and the other is by session by

00:31:19,990 --> 00:31:23,799
session it depends on your application

00:31:21,159 --> 00:31:28,529
I'm talking about and use a session or a

00:31:23,799 --> 00:31:28,529
transaction or as thread

00:31:31,260 --> 00:31:37,299
let me explain these in excruciating

00:31:33,640 --> 00:31:38,890
detail first you've got by module you

00:31:37,299 --> 00:31:40,900
break it up so if you've got three

00:31:38,890 --> 00:31:44,140
layers in your code a database layer

00:31:40,900 --> 00:31:45,880
business logic layer and your web server

00:31:44,140 --> 00:31:48,570
whatever your front-end is you could put

00:31:45,880 --> 00:31:51,340
all the output into different one files

00:31:48,570 --> 00:31:53,110
this is should be familiar if you're

00:31:51,340 --> 00:31:54,760
using an Apache server it's probably

00:31:53,110 --> 00:31:57,039
running its Apache log out into one

00:31:54,760 --> 00:31:58,690
directory and one log file if you've got

00:31:57,039 --> 00:31:59,770
MySQL on the back end and it's probably

00:31:58,690 --> 00:32:01,480
already doing that so you're familiar

00:31:59,770 --> 00:32:03,940
with the idea of different parts of your

00:32:01,480 --> 00:32:07,120
application logging to different files

00:32:03,940 --> 00:32:10,210
and there's a benefit here that your DBA

00:32:07,120 --> 00:32:13,690
only needed to know about transaction

00:32:10,210 --> 00:32:15,580
type problems and your web administrator

00:32:13,690 --> 00:32:19,120
only needs to know about webby type

00:32:15,580 --> 00:32:21,820
stuff and it gives a good example of

00:32:19,120 --> 00:32:23,770
general trends if your database is

00:32:21,820 --> 00:32:25,720
failing if you if your email

00:32:23,770 --> 00:32:27,970
notifications are down you'll see that

00:32:25,720 --> 00:32:29,830
one log file all of the different users

00:32:27,970 --> 00:32:32,290
are having problems with their emails

00:32:29,830 --> 00:32:36,020
but it doesn't give you a good storyline

00:32:32,290 --> 00:32:38,030
in that if you deviate might be able to

00:32:36,020 --> 00:32:40,370
say I can explain why our database is

00:32:38,030 --> 00:32:41,990
running so slowly all these people are

00:32:40,370 --> 00:32:44,390
making calls on me with all these slow

00:32:41,990 --> 00:32:46,490
transactions which you can't see what

00:32:44,390 --> 00:32:47,900
those transactions are and why you were

00:32:46,490 --> 00:32:50,600
to go and find it another fire what's

00:32:47,900 --> 00:32:55,430
going on there so another way of doing

00:32:50,600 --> 00:32:59,870
it is by session so if you're writing a

00:32:55,430 --> 00:33:01,970
backup server to do backups rather than

00:32:59,870 --> 00:33:03,950
putting the file copying logs at one

00:33:01,970 --> 00:33:05,900
directory and then the compression of

00:33:03,950 --> 00:33:06,970
all that to a tar file in another

00:33:05,900 --> 00:33:09,280
directory and

00:33:06,970 --> 00:33:10,659
then details about the FTP in another

00:33:09,280 --> 00:33:12,669
directory you can put all that

00:33:10,659 --> 00:33:15,130
information about one particular backup

00:33:12,669 --> 00:33:17,100
in one file so someone can actually see

00:33:15,130 --> 00:33:19,210
whether the backup happened in one place

00:33:17,100 --> 00:33:21,549
all right and this gives a good

00:33:19,210 --> 00:33:24,520
storyline so someone can we have the

00:33:21,549 --> 00:33:26,830
help desk and complain what about you

00:33:24,520 --> 00:33:28,630
know the truth the credit card purchase

00:33:26,830 --> 00:33:32,039
didn't go through they can look it up

00:33:28,630 --> 00:33:34,480
and they can see what that user did

00:33:32,039 --> 00:33:36,100
where the transaction started and why

00:33:34,480 --> 00:33:39,110
the transaction failed we'll see whether

00:33:36,100 --> 00:33:40,519
there's a bug here or some user error or

00:33:39,110 --> 00:33:42,980
whether error messages need to be

00:33:40,519 --> 00:33:45,019
improved that's what's tough on the

00:33:42,980 --> 00:33:48,679
other hand I've certainly had a problem

00:33:45,019 --> 00:33:50,149
where I rang up a helpdesk saying my

00:33:48,679 --> 00:33:53,409
connection to this particular web server

00:33:50,149 --> 00:33:55,669
is down and they've taken me through

00:33:53,409 --> 00:33:57,260
details of how the proxies and

00:33:55,669 --> 00:33:59,330
properties are set up on my machine and

00:33:57,260 --> 00:34:01,370
what's wrong with my browser before

00:33:59,330 --> 00:34:04,279
finally finding out that oh yeah my

00:34:01,370 --> 00:34:06,500
entire suburb has no network

00:34:04,279 --> 00:34:08,270
connectivity so you miss out that's sort

00:34:06,500 --> 00:34:09,230
of the the forest for the trees when

00:34:08,270 --> 00:34:13,190
you're just looking at your session

00:34:09,230 --> 00:34:15,109
information the reason I bring this up

00:34:13,190 --> 00:34:16,460
is because the way it's done in logging

00:34:15,109 --> 00:34:18,260
is quite different than the logging

00:34:16,460 --> 00:34:19,820
module is quite different so if you want

00:34:18,260 --> 00:34:22,450
to split by module which is the first

00:34:19,820 --> 00:34:25,369
one I described it's really quite easy

00:34:22,450 --> 00:34:27,740
when your program starts up for each of

00:34:25,369 --> 00:34:30,470
your different handlers for each of your

00:34:27,740 --> 00:34:32,659
different parts of your code you can

00:34:30,470 --> 00:34:35,540
point them to the various files so you

00:34:32,659 --> 00:34:36,649
can say am i database class classes

00:34:35,540 --> 00:34:39,379
they're going to go to the database

00:34:36,649 --> 00:34:40,879
built log you then turn off propagation

00:34:39,379 --> 00:34:43,190
so they don't all go up the top once

00:34:40,879 --> 00:34:45,530
it's been logged it can stop alternately

00:34:43,190 --> 00:34:47,960
you propagate up and make sure you

00:34:45,530 --> 00:34:51,530
and you can do all this in a config file

00:34:47,960 --> 00:34:53,090
which really is quite impressive that

00:34:51,530 --> 00:34:55,370
you can defer this sort of issue of

00:34:53,090 --> 00:34:59,780
where this logging is going to happen to

00:34:55,370 --> 00:35:02,540
an Operations Manager out the field each

00:34:59,780 --> 00:35:05,240
class has a fairly simple task to do it

00:35:02,540 --> 00:35:08,980
goes and gets its own Locker by name it

00:35:05,240 --> 00:35:11,120
knows what that name is it's based on

00:35:08,980 --> 00:35:13,130
the file it's either more subdirectory

00:35:11,120 --> 00:35:18,650
of sin so if you're going and writing

00:35:13,130 --> 00:35:21,500
the I don't know the upload staff it's

00:35:18,650 --> 00:35:23,300
that was a bad example I'm gonna just

00:35:21,500 --> 00:35:26,900
skip out on this example the exception

00:35:23,300 --> 00:35:28,280
handling here and say it's easy it's

00:35:26,900 --> 00:35:30,530
based on the file babe it's based on

00:35:28,280 --> 00:35:32,300
where about some encoders so this offers

00:35:30,530 --> 00:35:34,100
really good decoupling as I was talking

00:35:32,300 --> 00:35:36,230
about before between the client raising

00:35:34,100 --> 00:35:39,590
the problem and the code that actually

00:35:36,230 --> 00:35:41,150
deals with the handle it if on the other

00:35:39,590 --> 00:35:42,350
hand you want to do it by session and I

00:35:41,150 --> 00:35:44,630
think there's some really good reasons

00:35:42,350 --> 00:35:47,600
for doing it by session it logging

00:35:44,630 --> 00:35:49,460
module doesn't make it easy for each

00:35:47,600 --> 00:35:51,320
individual session you need to go and

00:35:49,460 --> 00:35:53,600
create your own handler just for that

00:35:51,320 --> 00:35:56,690
session your own logger and then attach

00:35:53,600 --> 00:35:58,550
your own handlers so somewhere in the

00:35:56,690 --> 00:36:01,670
middle of your code that is starting up

00:35:58,550 --> 00:36:03,890
a new user you have to know that I and I

00:36:01,670 --> 00:36:07,910
want all this to go into this users log

00:36:03,890 --> 00:36:10,339
file which I found a bit messy

00:36:07,910 --> 00:36:13,099
you can't do it in a config file because

00:36:10,339 --> 00:36:15,230
the config file can't know the user IDs

00:36:13,099 --> 00:36:16,250
that you're gonna have so it can't have

00:36:15,230 --> 00:36:18,230
a full list of all the different

00:36:16,250 --> 00:36:22,220
handlers it's going to require is one

00:36:18,230 --> 00:36:24,289
handler for every user logging and once

00:36:22,220 --> 00:36:26,030
you've created this special logger with

00:36:24,289 --> 00:36:28,160
this special handler you then need to

00:36:26,030 --> 00:36:30,260
pass it around as a parameter to all

00:36:28,160 --> 00:36:33,020
your different methods so I've got all

00:36:30,260 --> 00:36:35,180
this code now that has you know go and

00:36:33,020 --> 00:36:36,859
do this stuff on and if you have any

00:36:35,180 --> 00:36:38,809
problems here's the model I want you to

00:36:36,859 --> 00:36:41,210
write the output to so that's really

00:36:38,809 --> 00:36:43,880
kind of messy and the other way I could

00:36:41,210 --> 00:36:45,650
have done it is to haven't agreed

00:36:43,880 --> 00:36:47,900
algorithm of how you generate a logger

00:36:45,650 --> 00:36:49,579
name based on the user ID so then I just

00:36:47,900 --> 00:36:50,480
need to pass the user ID around it's

00:36:49,579 --> 00:36:50,930
probably something I was gonna pass

00:36:50,480 --> 00:36:53,510
anyway

00:36:50,930 --> 00:36:56,299
a third way which I'll probably do next

00:36:53,510 --> 00:36:59,839
time is to use the thread local storage

00:36:56,299 --> 00:37:02,690
so kind of put a logger in because I've

00:36:59,839 --> 00:37:06,530
got a thread per session I can get away

00:37:02,690 --> 00:37:11,420
with this put a global per thread that

00:37:06,530 --> 00:37:13,910
is the logger so this isn't such a good

00:37:11,420 --> 00:37:16,250
example of the decoupling this is quite

00:37:13,910 --> 00:37:18,680
tight coupling between your code and the

00:37:16,250 --> 00:37:20,450
logging system and it means it doesn't

00:37:18,680 --> 00:37:22,579
play well with others if you go and

00:37:20,450 --> 00:37:24,440
download a third party component you can

00:37:22,579 --> 00:37:25,849
be pretty sure it's not going to log to

00:37:24,440 --> 00:37:31,069
the derivative the father you were no

00:37:25,849 --> 00:37:32,510
longer to the config file is an area of

00:37:31,069 --> 00:37:34,220
active development at the moment I

00:37:32,510 --> 00:37:36,349
haven't been following closely enough

00:37:34,220 --> 00:37:37,910
I've kind of got a vague hope that it

00:37:36,349 --> 00:37:41,170
might address some of this stuff but

00:37:37,910 --> 00:37:41,170
it's really just a vague hope

00:37:43,980 --> 00:37:49,020
so I guess in summary there are a number

00:37:47,339 --> 00:37:53,490
of advantages to split by session on

00:37:49,020 --> 00:37:55,140
some projects it is more work I think my

00:37:53,490 --> 00:37:56,640
project is being worthwhile doing that

00:37:55,140 --> 00:37:59,190
but something to think about

00:37:56,640 --> 00:38:01,109
because all of the documentation for the

00:37:59,190 --> 00:38:03,060
logging module tends to drag you over

00:38:01,109 --> 00:38:10,859
towards the side splitting by module

00:38:03,060 --> 00:38:12,599
because it's easy so now coming up to

00:38:10,859 --> 00:38:13,980
the last part of the talk and just a

00:38:12,599 --> 00:38:18,089
couple more slides

00:38:13,980 --> 00:38:22,609
it's another war story I have an

00:38:18,089 --> 00:38:24,810
operation that sometimes runs slowly and

00:38:22,609 --> 00:38:27,480
discovered it runs slowly for reasons

00:38:24,810 --> 00:38:29,520
outside my control the virtual private

00:38:27,480 --> 00:38:31,619
server I'm on sometimes some of the

00:38:29,520 --> 00:38:34,109
other users of the same machine start

00:38:31,619 --> 00:38:38,190
using up all the resources and my system

00:38:34,109 --> 00:38:39,450
runs slowly as a result so I need to go

00:38:38,190 --> 00:38:44,609
and ring up and complain about that when

00:38:39,450 --> 00:38:46,920
that happens I put some code in there to

00:38:44,609 --> 00:38:49,140
handle this to let me know so what it

00:38:46,920 --> 00:38:50,609
does is it notes the start time long

00:38:49,140 --> 00:38:52,890
saying I'm about to start

00:38:50,609 --> 00:38:55,079
it does this operation and then measures

00:38:52,890 --> 00:38:56,400
the elapsed time if the elapsed time is

00:38:55,079 --> 00:38:57,480
greater than some threshold of what I

00:38:56,400 --> 00:39:00,839
think a reasonable amount of time for

00:38:57,480 --> 00:39:03,599
this operation is it sends a critical

00:39:00,839 --> 00:39:07,079
message now this is a very pressing

00:39:03,599 --> 00:39:09,150
version of of the actual code and you

00:39:07,079 --> 00:39:11,730
may notice the logging dot info is

00:39:09,150 --> 00:39:15,060
occurring inside the section that's been

00:39:11,730 --> 00:39:17,490
timed so how long does logging your info

00:39:15,060 --> 00:39:18,839
take well it's just writing to afar or

00:39:17,490 --> 00:39:21,750
actually ducts and performance tests

00:39:18,839 --> 00:39:25,740
it's about 100 microseconds to log a

00:39:21,750 --> 00:39:27,420
simple wire to the file and in the grand

00:39:25,740 --> 00:39:30,119
scheme of things that's nothing a

00:39:27,420 --> 00:39:34,109
hundred microseconds is a small fraction

00:39:30,119 --> 00:39:37,050
of the value of threshold I don't need

00:39:34,109 --> 00:39:39,569
to optimize that away how long does

00:39:37,050 --> 00:39:41,460
logging got critical take well actually

00:39:39,569 --> 00:39:43,410
like not critical sends me an email so

00:39:41,460 --> 00:39:45,420
it's hella was an email take and I

00:39:43,410 --> 00:39:47,550
figured half a second to a second was

00:39:45,420 --> 00:39:52,800
about I wasn't really sure something

00:39:47,550 --> 00:39:54,630
like that but that's outside of the

00:39:52,800 --> 00:39:56,490
performance critical part so I didn't

00:39:54,630 --> 00:39:58,040
care it could take five seconds for all

00:39:56,490 --> 00:40:01,020
I care it doesn't matter

00:39:58,040 --> 00:40:04,800
so I deployed that code and it ran well

00:40:01,020 --> 00:40:08,819
for weeks until one day it blew up at my

00:40:04,800 --> 00:40:10,680
face what happened was something

00:40:08,819 --> 00:40:13,230
somewhere caused a critical message to

00:40:10,680 --> 00:40:15,630
occur and this is this code has been run

00:40:13,230 --> 00:40:19,349
by a number of threads a pool of threads

00:40:15,630 --> 00:40:20,460
and a couple of them came in or so a

00:40:19,349 --> 00:40:22,859
critical message is being sent off

00:40:20,460 --> 00:40:24,390
somewhere and it took I think it was 900

00:40:22,859 --> 00:40:27,400
milliseconds to send that email so with

00:40:24,390 --> 00:40:30,339
him within my guesstimate

00:40:27,400 --> 00:40:32,950
it got to this locking dot info I went

00:40:30,339 --> 00:40:34,599
to log to a file but it grabbed the lock

00:40:32,950 --> 00:40:37,299
of the handler and apparently it was

00:40:34,599 --> 00:40:40,559
sharing a lock of the handler and it got

00:40:37,299 --> 00:40:44,470
blocked waiting for the email to go out

00:40:40,559 --> 00:40:45,670
so two threads got blocked there finally

00:40:44,470 --> 00:40:47,319
they get released after might have

00:40:45,670 --> 00:40:49,150
milliseconds they come down here and

00:40:47,319 --> 00:40:53,589
that is enough to push them over the

00:40:49,150 --> 00:40:56,650
threshold so now two threads go to log

00:40:53,589 --> 00:40:58,900
and email out which takes 1.8

00:40:56,650 --> 00:41:01,240
milliseconds at 1.8 seconds I should say

00:40:58,900 --> 00:41:04,750
which was enough to get four more

00:41:01,240 --> 00:41:07,510
threads block there and so it's mobile

00:41:04,750 --> 00:41:08,859
so before long this logging message

00:41:07,510 --> 00:41:12,029
which I thought would take a hundred

00:41:08,859 --> 00:41:15,069
microseconds was taking over 90 seconds

00:41:12,029 --> 00:41:20,170
and kind of ruining my performance

00:41:15,069 --> 00:41:21,430
targets so I made some quick changes the

00:41:20,170 --> 00:41:23,740
first thing is I turned off the email

00:41:21,430 --> 00:41:27,039
handling I had moved the logging

00:41:23,740 --> 00:41:29,950
statement outside and I complained about

00:41:27,039 --> 00:41:32,500
it on my blog and a couple of people

00:41:29,950 --> 00:41:35,650
posted that on to Reddit and I got about

00:41:32,500 --> 00:41:39,160
a thousand views and quite a few

00:41:35,650 --> 00:41:42,130
comments including one from Vinay who is

00:41:39,160 --> 00:41:44,200
the maintainer of the logging module and

00:41:42,130 --> 00:41:47,380
he came back with some comic like my

00:41:44,200 --> 00:41:48,789
point is when I start thinking about how

00:41:47,380 --> 00:41:51,069
long these operations are going to take

00:41:48,789 --> 00:41:53,200
I'm breaking that decoupling if the

00:41:51,069 --> 00:41:54,970
abstraction is leaking and I'm caring oh

00:41:53,200 --> 00:41:55,240
this one's an email it may take some

00:41:54,970 --> 00:41:57,530
time

00:41:55,240 --> 00:41:58,670
this one is info

00:41:57,530 --> 00:42:00,470
and then it turned out even that

00:41:58,670 --> 00:42:02,599
abstraction was wrong because info could

00:42:00,470 --> 00:42:04,549
take one of the critical really I think

00:42:02,599 --> 00:42:07,730
that should be hidden from people the

00:42:04,549 --> 00:42:09,819
locking module should put it off to

00:42:07,730 --> 00:42:12,589
another thread and return quickly

00:42:09,819 --> 00:42:16,790
something that came back and said the

00:42:12,589 --> 00:42:20,210
maintainer of the module said email the

00:42:16,790 --> 00:42:22,520
SMTP library doesn't do that and that's

00:42:20,210 --> 00:42:26,920
that's true and he pointed out it wasn't

00:42:22,520 --> 00:42:31,250
just email but anything that requires IO

00:42:26,920 --> 00:42:32,599
could block for a while and even so if

00:42:31,250 --> 00:42:34,520
you're sending it to syslog and you're

00:42:32,599 --> 00:42:36,740
sending it through HTTP even if you're

00:42:34,520 --> 00:42:38,630
sending it to a file if it's network

00:42:36,740 --> 00:42:45,260
attached storage that could take a long

00:42:38,630 --> 00:42:48,049
time so I agreed and he pointed out that

00:42:45,260 --> 00:42:50,930
the system is very customizable and I

00:42:48,049 --> 00:42:52,220
absolutely agree and he said if I if I

00:42:50,930 --> 00:42:53,510
have a particular problem that no one

00:42:52,220 --> 00:42:56,210
else has I can go and customize a

00:42:53,510 --> 00:42:59,030
solution and that's where I thought I

00:42:56,210 --> 00:43:01,549
don't think I'm alone here I think

00:42:59,030 --> 00:43:04,540
anyone who's doing real-time programming

00:43:01,549 --> 00:43:08,170
in Python will use a lot logging module

00:43:04,540 --> 00:43:15,490
they're going to encounter this problem

00:43:08,170 --> 00:43:16,060
so so I decided the smiles back but not

00:43:15,490 --> 00:43:19,810
on that one

00:43:16,060 --> 00:43:23,080
sneaking so I decided to make the best

00:43:19,810 --> 00:43:27,780
of it and I've written a module to do

00:43:23,080 --> 00:43:31,900
this generically so the way it works is

00:43:27,780 --> 00:43:33,670
you report it obviously this code

00:43:31,900 --> 00:43:37,660
slightly in green is the code that you

00:43:33,670 --> 00:43:40,570
use to create an email Handler and SMTP

00:43:37,660 --> 00:43:42,070
handler all I've done is passed that to

00:43:40,570 --> 00:43:44,920
the constructor of non-blocking log

00:43:42,070 --> 00:43:48,100
handler and that just wraps it the code

00:43:44,920 --> 00:43:49,450
below is grabbing the route logger and

00:43:48,100 --> 00:43:50,980
adding the handler which is something

00:43:49,450 --> 00:43:52,870
you would have done with the SMTP hand

00:43:50,980 --> 00:43:54,550
anyway so instead of adding the original

00:43:52,870 --> 00:43:56,860
handler you add the wrapped version of

00:43:54,550 --> 00:44:00,550
it now when you call logger doc critical

00:43:56,860 --> 00:44:03,190
what happens is it posts that to a queue

00:44:00,550 --> 00:44:05,020
and then returns immediately and in the

00:44:03,190 --> 00:44:08,290
background and a separate thread it goes

00:44:05,020 --> 00:44:12,310
and deals with that so I've made this

00:44:08,290 --> 00:44:14,950
module available on pi PI the the Chi

00:44:12,310 --> 00:44:16,059
shop so that's it's in beta at the

00:44:14,950 --> 00:44:18,219
moment

00:44:16,059 --> 00:44:22,089
what I'm hoping for some feedback on

00:44:18,219 --> 00:44:23,349
this in terms of if people think that

00:44:22,089 --> 00:44:25,239
they've had this problem before and

00:44:23,349 --> 00:44:30,549
they're happy to see a component that

00:44:25,239 --> 00:44:32,410
handles this if people think they didn't

00:44:30,549 --> 00:44:33,759
realize they had the problem but but now

00:44:32,410 --> 00:44:36,099
they do and they'll be happy to try

00:44:33,759 --> 00:44:37,509
something where people think that maybe

00:44:36,099 --> 00:44:39,430
other people have it but they don't

00:44:37,509 --> 00:44:41,289
people think I'm crazy I'm the only

00:44:39,430 --> 00:44:42,549
person who has this problem people think

00:44:41,289 --> 00:44:45,099
I'm crazy because I missed the obvious

00:44:42,549 --> 00:44:46,689
easy solution I'll be in the pub

00:44:45,099 --> 00:44:49,059
afterwards for people coming to give me

00:44:46,689 --> 00:44:50,920
their feedback if you do want to try it

00:44:49,059 --> 00:44:56,049
it's available for beating down on

00:44:50,920 --> 00:44:58,390
pipeline so that's the end of my talk

00:44:56,049 --> 00:45:00,789
I'll have some Q&A afterwards what I'm

00:44:58,390 --> 00:45:02,380
hoping that I've achieved is that you're

00:45:00,789 --> 00:45:04,359
familiar with the locking module now if

00:45:02,380 --> 00:45:06,729
you hadn't seen it before on your small

00:45:04,359 --> 00:45:08,559
projects you came to stop using that old

00:45:06,729 --> 00:45:11,619
fashioned print statement and start

00:45:08,559 --> 00:45:13,569
using the logging module if you're on a

00:45:11,619 --> 00:45:15,430
larger project you can see ways that you

00:45:13,569 --> 00:45:19,150
can prove the way you're using logging

00:45:15,430 --> 00:45:23,259
modules and also if you are a real-time

00:45:19,150 --> 00:45:26,360
developer in Python you give give

00:45:23,259 --> 00:45:28,640
non-blocking will handle a try

00:45:26,360 --> 00:45:30,860
if you want more information the Python

00:45:28,640 --> 00:45:33,380
help files have all the details I

00:45:30,860 --> 00:45:35,840
haven't gone a lot into individual

00:45:33,380 --> 00:45:37,360
methods of available because PowerPoint

00:45:35,840 --> 00:45:41,140
slides aren't the best way to do that

00:45:37,360 --> 00:45:43,070
pep 282 was the original introduction

00:45:41,140 --> 00:45:44,510
proposal to come up with a locking

00:45:43,070 --> 00:45:46,160
system I think they've updated it with

00:45:44,510 --> 00:45:49,480
details of what actually happened so

00:45:46,160 --> 00:45:52,190
that's another way the module maintainer

00:45:49,480 --> 00:45:54,460
I've never heard his name pronounced

00:45:52,190 --> 00:45:57,680
Schubert's have been a surgeon but

00:45:54,460 --> 00:46:03,260
almost certainly getting it wrong he has

00:45:57,680 --> 00:46:04,820
a blog where he talks about a number of

00:46:03,260 --> 00:46:07,150
issues whether to the locking module

00:46:04,820 --> 00:46:10,760
called plumber jack

00:46:07,150 --> 00:46:13,460
and if you want to try the non-blocking

00:46:10,760 --> 00:46:15,890
log handler easy installs probably the

00:46:13,460 --> 00:46:17,780
quickest way to get it and I have to say

00:46:15,890 --> 00:46:20,300
it's a better it's a better its invader

00:46:17,780 --> 00:46:25,130
don't forget it's a better and I'd love

00:46:20,300 --> 00:46:27,950
to hear feedback on my code I'm

00:46:25,130 --> 00:46:29,300
thick-skinned I can take it or whether

00:46:27,950 --> 00:46:33,350
you found it useful or what needs to

00:46:29,300 --> 00:46:35,800
change there so now I will throw it open

00:46:33,350 --> 00:46:35,800
to questions

00:46:38,720 --> 00:46:41,870
go ahead

00:46:45,569 --> 00:46:55,200
the non-blocking lock handle Oh 2.6 I I

00:46:53,190 --> 00:46:56,609
was just working through that today

00:46:55,200 --> 00:47:00,750
trying to work out which versions would

00:46:56,609 --> 00:47:03,930
work on I think it will work from 2.4

00:47:00,750 --> 00:47:08,180
onwards I haven't tried it on Python 3

00:47:03,930 --> 00:47:10,349
dot X yet there's nothing particularly

00:47:08,180 --> 00:47:14,849
specific about it so it should be fairly

00:47:10,349 --> 00:47:17,900
portable but 3x is going to catch me in

00:47:14,849 --> 00:47:17,900
surprising ways I'm sure

00:47:22,030 --> 00:47:26,110
sorry you know arise

00:47:29,270 --> 00:47:34,050
right so that

00:47:32,020 --> 00:47:36,330
right so I I do need to run it through

00:47:34,050 --> 00:47:40,800
the two to three converter and

00:47:36,330 --> 00:47:40,800
intestinal sorry I haven't done that yet

00:47:40,810 --> 00:47:44,940
this question here first yet

00:47:52,500 --> 00:48:03,520
so the question is whereabouts in a

00:47:55,599 --> 00:48:06,190
whiskey application would you log and I

00:48:03,520 --> 00:48:07,480
I don't have enough knowledge of that

00:48:06,190 --> 00:48:09,940
particular area I don't know if anyone

00:48:07,480 --> 00:48:16,180
else could jump in I assume that you

00:48:09,940 --> 00:48:18,280
would even consider logging with you're

00:48:16,180 --> 00:48:20,170
looking into syslog okay that seems like

00:48:18,280 --> 00:48:20,880
a good solution today is that has that

00:48:20,170 --> 00:48:30,370
been a problem

00:48:20,880 --> 00:48:33,580
not better solution yes

00:48:30,370 --> 00:48:33,580
versions where

00:48:35,930 --> 00:48:40,930
so in whiskey you're saying watch out

00:48:38,960 --> 00:48:43,700
for permissions

00:48:40,930 --> 00:48:47,230
no no I'm not writing a web application

00:48:43,700 --> 00:48:47,230
so I've managed to avoid

00:48:54,370 --> 00:48:56,970
yes

00:48:57,110 --> 00:49:04,130
not yet so with it I've actually started

00:49:01,310 --> 00:49:05,270
writing the page when you submit

00:49:04,130 --> 00:49:06,740
something to apply PI you have a home

00:49:05,270 --> 00:49:09,910
page and I've started writing the text

00:49:06,740 --> 00:49:09,910
of that page but has been uploaded yet

00:49:24,450 --> 00:49:29,820
so the question is if the logging system

00:49:27,720 --> 00:49:33,650
gets behind when you quit do you lose

00:49:29,820 --> 00:49:39,170
stuff and that was a major concern that

00:49:33,650 --> 00:49:41,700
took me a couple tries to get right so I

00:49:39,170 --> 00:49:44,190
had a number of different theories and I

00:49:41,700 --> 00:49:45,150
had a number of different ideas there at

00:49:44,190 --> 00:49:47,100
the moment

00:49:45,150 --> 00:49:49,680
it won't quit your application until the

00:49:47,100 --> 00:49:51,450
last long message goes out unless the

00:49:49,680 --> 00:49:54,360
logging system itself with the hammer

00:49:51,450 --> 00:49:56,070
that you depend on gives up which I

00:49:54,360 --> 00:50:00,210
think it will after a while with even

00:49:56,070 --> 00:50:02,700
within email so that can be a concern

00:50:00,210 --> 00:50:05,369
if you user type hits quit and it

00:50:02,700 --> 00:50:07,349
doesn't quit quickly I don't like the

00:50:05,369 --> 00:50:09,750
fact that it hangs around but I consider

00:50:07,349 --> 00:50:12,059
that more important that you know when

00:50:09,750 --> 00:50:14,460
an application is dying and it's got one

00:50:12,059 --> 00:50:17,309
last thing to say about who killed it

00:50:14,460 --> 00:50:18,990
before it dies that message does go out

00:50:17,309 --> 00:50:20,819
we don't just say I'll never mind it's

00:50:18,990 --> 00:50:25,190
only the logging thread will come back

00:50:20,819 --> 00:50:25,190
oh there's another question over here

00:50:35,529 --> 00:50:48,859
so okay the question is why is the

00:50:38,569 --> 00:50:50,569
logging module today right so I I guess

00:50:48,859 --> 00:50:53,720
what you're doing is you're validating

00:50:50,569 --> 00:50:55,789
the position that I'm taking that the

00:50:53,720 --> 00:50:58,490
logging module should support non

00:50:55,789 --> 00:51:00,109
blocking volume out of the box because

00:50:58,490 --> 00:51:01,279
it's a fairly common operation and

00:51:00,109 --> 00:51:04,430
there's certainly that's the position

00:51:01,279 --> 00:51:06,829
I'm in now I was hoping this is a vague

00:51:04,430 --> 00:51:08,900
hope but if this module proves to be

00:51:06,829 --> 00:51:10,519
popular and useful that we could then

00:51:08,900 --> 00:51:13,250
use that as ammunition to go back to the

00:51:10,519 --> 00:51:15,099
logging container and say or something

00:51:13,250 --> 00:51:20,799
like this should be in the base looking

00:51:15,099 --> 00:51:20,799
at this stage is unconvinced but it's

00:51:29,950 --> 00:51:33,119
that's right in fact you

00:51:38,310 --> 00:51:43,570
so the the question is really about the

00:51:41,410 --> 00:51:46,320
architecture of how that component works

00:51:43,570 --> 00:51:48,640
we should it's almost a talk in itself

00:51:46,320 --> 00:51:50,470
it's one of those bits of code where

00:51:48,640 --> 00:51:52,480
there's really only fifty or hundred

00:51:50,470 --> 00:51:54,040
lines of code that's not a lot there but

00:51:52,480 --> 00:51:56,130
every single lines got through three

00:51:54,040 --> 00:51:59,530
iterations before I got it right

00:51:56,130 --> 00:52:02,740
it not only starts another thread in the

00:51:59,530 --> 00:52:04,780
background but it also has to start

00:52:02,740 --> 00:52:07,990
other threads to keep that thread of

00:52:04,780 --> 00:52:12,700
life because it's a daemon --thread I

00:52:07,990 --> 00:52:15,400
have the problem that to close up

00:52:12,700 --> 00:52:17,680
cleanly I need people to call the close

00:52:15,400 --> 00:52:19,869
method and if I could be sure people

00:52:17,680 --> 00:52:22,210
going to call the close method it would

00:52:19,869 --> 00:52:23,850
have been easy to write but people don't

00:52:22,210 --> 00:52:26,020
want to do that especially when the

00:52:23,850 --> 00:52:28,660
exception handling that sort of stuff so

00:52:26,020 --> 00:52:30,700
I had to do some fancy tricks to try and

00:52:28,660 --> 00:52:35,770
keep the thread open but then to die

00:52:30,700 --> 00:52:41,950
when it had nothing else to do so there

00:52:35,770 --> 00:52:44,230
is calling it non blocking it does like

00:52:41,950 --> 00:52:45,820
when you push to a queue which is what

00:52:44,230 --> 00:52:48,250
it's using cued or cue at one stage

00:52:45,820 --> 00:52:51,220
there is a very short amount of blocking

00:52:48,250 --> 00:52:53,500
there but it's short it doesn't have

00:52:51,220 --> 00:52:56,310
much to do so maybe it's a bit of a lie

00:52:53,500 --> 00:52:56,310
in the title but

00:52:59,330 --> 00:53:09,420
yes ah good good point so that is

00:53:07,890 --> 00:53:12,090
another that was a very early design

00:53:09,420 --> 00:53:15,800
decision I had to make quite clear if

00:53:12,090 --> 00:53:17,400
you are passing an object that should be

00:53:15,800 --> 00:53:20,430
logged out

00:53:17,400 --> 00:53:22,920
you can't defer the evaluation of that

00:53:20,430 --> 00:53:25,620
string until later because by the time

00:53:22,920 --> 00:53:27,690
you go to log it 30 seconds later that

00:53:25,620 --> 00:53:30,450
object may have changed value and it

00:53:27,690 --> 00:53:34,050
might not be thread safe so reloading

00:53:30,450 --> 00:53:38,550
module actually are being targeted by

00:53:34,050 --> 00:53:43,650
something the logging module will

00:53:38,550 --> 00:53:46,290
actually work out the value of the

00:53:43,650 --> 00:53:48,720
string the message that you pass in in

00:53:46,290 --> 00:53:50,400
the client thread before passes it off

00:53:48,720 --> 00:53:53,370
to the back back to it so there aren't

00:53:50,400 --> 00:53:56,670
any of those thread safety or my object

00:53:53,370 --> 00:53:58,770
changed in the meantime issues that does

00:53:56,670 --> 00:54:01,110
have a very slight performance cost of

00:53:58,770 --> 00:54:03,000
if your handle later on decided it

00:54:01,110 --> 00:54:04,980
wasn't going to actually output it it's

00:54:03,000 --> 00:54:06,720
still being evaluated early on but I

00:54:04,980 --> 00:54:09,450
thought that was well worth and compared

00:54:06,720 --> 00:54:13,200
to the nightmare of you don't want the

00:54:09,450 --> 00:54:16,610
logging system making your system worse

00:54:13,200 --> 00:54:16,610
so I was trying hard to do with that

00:54:26,710 --> 00:54:34,790
yes all right I'm just being careful

00:54:30,770 --> 00:54:38,620
here the formatter is passed a

00:54:34,790 --> 00:54:42,260
dictionary of a whole of information the

00:54:38,620 --> 00:54:45,440
file and the line number I get there is

00:54:42,260 --> 00:54:54,770
the function in there I I would have to

00:54:45,440 --> 00:54:56,450
go yes that'd be one way of doing it you

00:54:54,770 --> 00:54:57,230
could pass that information as a

00:54:56,450 --> 00:54:59,000
parameter

00:54:57,230 --> 00:55:01,570
but that means making sure your

00:54:59,000 --> 00:55:01,570
developers doing

00:55:05,600 --> 00:55:17,960
I yes it would be better so what's the

00:55:11,210 --> 00:55:19,100
question right so it would be good if

00:55:17,960 --> 00:55:22,070
the name of the function could be

00:55:19,100 --> 00:55:23,270
implicit in it at a Greek I couldn't

00:55:22,070 --> 00:55:34,160
tell you off the top of my head

00:55:23,270 --> 00:55:36,920
certainly the line number this was

00:55:34,160 --> 00:55:41,720
sending to the local mail queue I don't

00:55:36,920 --> 00:55:43,970
know why it was so slow I I wasn't

00:55:41,720 --> 00:55:49,300
expecting it I certainly got bitten hard

00:55:43,970 --> 00:55:49,300
by that one so there's a question back

00:56:00,400 --> 00:56:07,190
so the question is so the question is

00:56:05,210 --> 00:56:09,500
whether you can encrypt the log file I

00:56:07,190 --> 00:56:11,690
haven't seen any functionality that does

00:56:09,500 --> 00:56:15,980
that it wouldn't be hard to customize it

00:56:11,690 --> 00:56:18,440
to do whatever encryption UI clear I'm

00:56:15,980 --> 00:56:20,150
not going to try and work out security

00:56:18,440 --> 00:56:23,350
implications while standing up that's

00:56:20,150 --> 00:56:25,580
that's a bad way of creative but

00:56:23,350 --> 00:56:27,260
certainly if you wanted your log files

00:56:25,580 --> 00:56:32,150
encrypted as they get passed across the

00:56:27,260 --> 00:56:34,510
network sure there's an HTTP handler and

00:56:32,150 --> 00:56:37,610
you could make that HTTP handler

00:56:34,510 --> 00:56:38,720
probably don't set already so that that

00:56:37,610 --> 00:56:42,460
would make sure no one's sniffing

00:56:38,720 --> 00:56:42,460
conceal a lot of messages that way

00:56:49,800 --> 00:56:56,180
I don't know how you would authenticate

00:56:53,010 --> 00:56:58,760
some Python code Python doesn't seem to

00:56:56,180 --> 00:57:03,240
because Python you can go insert code

00:56:58,760 --> 00:57:04,440
from other bits of code I'm not sure how

00:57:03,240 --> 00:57:06,600
you would ever prove that what bit of

00:57:04,440 --> 00:57:10,520
code raised to something I don't know if

00:57:06,600 --> 00:57:13,560
anyone has any opinions on that I

00:57:10,520 --> 00:57:15,930
mentioned how you would stop another

00:57:13,560 --> 00:57:18,320
piece of code faking then it it was this

00:57:15,930 --> 00:57:18,320
bit of code

00:57:19,840 --> 00:57:28,650
definitely it's a security and security

00:57:25,720 --> 00:57:28,650
experts of a question

00:57:28,810 --> 00:57:36,100
any other questions I will be in the pub

00:57:32,200 --> 00:57:44,170
if you want to ask me more there okay so

00:57:36,100 --> 00:57:45,340
I had you back to doing so I'll just

00:57:44,170 --> 00:57:47,700
kind of run through my lightning tour

00:57:45,340 --> 00:57:47,700

YouTube URL: https://www.youtube.com/watch?v=MN7vxKZH6EI


