Title: Open Source Speaker Series: Release Management in Large...
Publication date: 2010-10-27
Playlist: Open Source Google Tech Talks
Description: 
	Google Tech Talks
April 19, 2007

ABSTRACT

Release management can be quite challenging in free software projects since the work of many distributed developers needs to be finished at the same time so it can be integrated and tested for the next release. It is particularly challenging in free software projects which mainly consist of volunteers because there is little control over the work performed by contributors. This talk will discuss what kind of problems free software projects face during release preparations and investigate how large volunteer teams can make releases on time and with high levels of quality. In particular, the focus will be on the time based release strategy. Instead of...
Captions: 
	00:00:26,350 --> 00:00:31,920
next speaker is Martin Michael Meyer

00:00:28,980 --> 00:00:35,410
previous debian project leader

00:00:31,920 --> 00:00:37,690
contributed to the debian QA effort he's

00:00:35,410 --> 00:00:40,150
recently finishing ba he's now finishing

00:00:37,690 --> 00:00:42,489
up a research into release management in

00:00:40,150 --> 00:00:44,830
large free software projects and today

00:00:42,489 --> 00:00:51,610
is going to give a presentation on his

00:00:44,830 --> 00:00:55,540
research findings please welcome on ok

00:00:51,610 --> 00:00:59,260
thanks Andrew the research of I've been

00:00:55,540 --> 00:01:03,519
doing about the last three and a half

00:00:59,260 --> 00:01:05,370
years is about quality issues in free

00:01:03,519 --> 00:01:07,450
and open source software projects and

00:01:05,370 --> 00:01:13,320
specifically I've been focusing on

00:01:07,450 --> 00:01:15,909
release management I should say that

00:01:13,320 --> 00:01:17,590
that work has kindly been funded by

00:01:15,909 --> 00:01:19,930
Google the last three years I'm very

00:01:17,590 --> 00:01:23,680
happy about that and I'm really happy to

00:01:19,930 --> 00:01:25,120
be here to now present the results of

00:01:23,680 --> 00:01:27,340
that work which I think really

00:01:25,120 --> 00:01:29,830
interesting for the community also I

00:01:27,340 --> 00:01:32,350
have to apologize that my voice is a

00:01:29,830 --> 00:01:34,990
little bit strange because I've had a

00:01:32,350 --> 00:01:40,200
cold for a few days and yesterday my

00:01:34,990 --> 00:01:40,200
voice got lost so I'm sorry about that

00:01:40,229 --> 00:01:46,240
I'm just looking at the channel of their

00:01:43,479 --> 00:01:48,359
talk first of all I would briefly talk

00:01:46,240 --> 00:01:51,939
about the background of the research

00:01:48,359 --> 00:01:54,729
where I come from and how I was looking

00:01:51,939 --> 00:01:57,100
at things then I will introduce the

00:01:54,729 --> 00:02:00,280
projects which have studied doing my

00:01:57,100 --> 00:02:02,350
research as Andrew mentioned I've been

00:02:00,280 --> 00:02:05,679
involved in in debian for a number of

00:02:02,350 --> 00:02:07,780
years and debian is known for its

00:02:05,679 --> 00:02:10,450
problems with release management but i

00:02:07,780 --> 00:02:11,740
didn't focus specifically on debian i

00:02:10,450 --> 00:02:13,930
looked at the number of different

00:02:11,740 --> 00:02:17,020
projects and believe me many of them

00:02:13,930 --> 00:02:20,110
have problems with release management so

00:02:17,020 --> 00:02:23,020
i will look at the ED problems which

00:02:20,110 --> 00:02:26,440
those projects have had and what kind of

00:02:23,020 --> 00:02:28,980
solutions they implement it for those

00:02:26,440 --> 00:02:28,980
problems

00:02:29,080 --> 00:02:35,440
specifically what I have studied is is a

00:02:32,380 --> 00:02:37,810
relatively new release mechanism and

00:02:35,440 --> 00:02:40,240
known as time-based releases in the past

00:02:37,810 --> 00:02:43,330
usually you would release when a certain

00:02:40,240 --> 00:02:45,580
set of features has been achieved or

00:02:43,330 --> 00:02:49,150
implemented but nowadays a couple of

00:02:45,580 --> 00:02:51,520
projects most prominent our norm are

00:02:49,150 --> 00:02:54,370
releasing according to time so they

00:02:51,520 --> 00:02:56,800
don't have any specific features which

00:02:54,370 --> 00:02:58,930
determine where the release is done but

00:02:56,800 --> 00:03:01,180
they they say we are going to make

00:02:58,930 --> 00:03:03,880
release every six months and that's

00:03:01,180 --> 00:03:05,950
their release strategy and I think

00:03:03,880 --> 00:03:07,900
that's very unique and very new approach

00:03:05,950 --> 00:03:09,520
and I've decided to study that

00:03:07,900 --> 00:03:11,470
specifically because there's loads of

00:03:09,520 --> 00:03:14,920
interest within the community in time

00:03:11,470 --> 00:03:17,709
based release management so after

00:03:14,920 --> 00:03:19,600
introducing the project and their

00:03:17,709 --> 00:03:21,430
problems and solutions I will

00:03:19,600 --> 00:03:25,450
specifically look at time-based release

00:03:21,430 --> 00:03:28,510
management I will I will say why it

00:03:25,450 --> 00:03:30,640
works or why I believe it works and I've

00:03:28,510 --> 00:03:32,470
looked at different projects and I have

00:03:30,640 --> 00:03:37,750
evidence for that and then I will look

00:03:32,470 --> 00:03:39,970
at some implementation some specific

00:03:37,750 --> 00:03:41,530
implementation details that projects

00:03:39,970 --> 00:03:43,540
need to consider which interested in

00:03:41,530 --> 00:03:47,860
moving to time-based releases and then

00:03:43,540 --> 00:03:51,310
our wrap-up and and answer questions so

00:03:47,860 --> 00:03:53,500
the background I started with the idea

00:03:51,310 --> 00:03:55,900
of investigating quality in free

00:03:53,500 --> 00:03:57,730
software and free software and open

00:03:55,900 --> 00:04:00,070
source is being used everywhere I mean

00:03:57,730 --> 00:04:03,010
it has been so successful in the last

00:04:00,070 --> 00:04:06,390
few years I'm sure you know that Google

00:04:03,010 --> 00:04:08,350
I mean it's being used everywhere and

00:04:06,390 --> 00:04:11,110
even though it has been so successful

00:04:08,350 --> 00:04:13,660
and people are talking about world

00:04:11,110 --> 00:04:16,540
domination and things like that I like

00:04:13,660 --> 00:04:18,489
to look at the glass of water and for me

00:04:16,540 --> 00:04:20,709
it's usually half empty so even though

00:04:18,489 --> 00:04:22,720
it has been successful I see there are

00:04:20,709 --> 00:04:25,270
still lots of problems and I'm wondering

00:04:22,720 --> 00:04:28,240
what can we as a community do about

00:04:25,270 --> 00:04:33,130
those problems how can we still make

00:04:28,240 --> 00:04:36,430
open source even more better and my

00:04:33,130 --> 00:04:38,340
approach is different too many people I

00:04:36,430 --> 00:04:41,440
haven't looked the technical details

00:04:38,340 --> 00:04:42,120
like how can you improve quality by I

00:04:41,440 --> 00:04:43,770
don't know

00:04:42,120 --> 00:04:46,560
aggression testing or things like that

00:04:43,770 --> 00:04:49,680
I've looked at more the the process side

00:04:46,560 --> 00:04:52,710
so how can you improve the development

00:04:49,680 --> 00:04:54,300
process how can you and specifically

00:04:52,710 --> 00:04:56,460
with release management of looked at

00:04:54,300 --> 00:05:00,020
coordination and management it's really

00:04:56,460 --> 00:05:01,979
interesting question how can you with

00:05:00,020 --> 00:05:03,750
projects large projects which are

00:05:01,979 --> 00:05:05,370
hundreds of people all around the world

00:05:03,750 --> 00:05:07,800
they don't even know each other in

00:05:05,370 --> 00:05:10,080
person how can they work together and

00:05:07,800 --> 00:05:12,180
actually produce something that doesn't

00:05:10,080 --> 00:05:14,580
only work but it's of high quality and

00:05:12,180 --> 00:05:16,800
and another question which is gaining

00:05:14,580 --> 00:05:18,720
importance as free software and open

00:05:16,800 --> 00:05:22,530
source is being increasingly used by

00:05:18,720 --> 00:05:25,139
enterprise by companies how can a team

00:05:22,530 --> 00:05:27,289
of volunteers are ensure that the

00:05:25,139 --> 00:05:30,900
quality will be high all the time and

00:05:27,289 --> 00:05:32,880
that there will be new releases how can

00:05:30,900 --> 00:05:34,800
they make sure that companies feel

00:05:32,880 --> 00:05:38,729
comfortable relying on on its software

00:05:34,800 --> 00:05:40,740
it's as a very big question so I've

00:05:38,729 --> 00:05:43,310
looked at at process improvement how can

00:05:40,740 --> 00:05:46,860
you improve the development process and

00:05:43,310 --> 00:05:49,139
when I started my PhD I looked at

00:05:46,860 --> 00:05:51,300
different areas I talked to various open

00:05:49,139 --> 00:05:53,880
source developers to see what kind of

00:05:51,300 --> 00:05:56,389
quality problems are there and there are

00:05:53,880 --> 00:05:58,710
many problems in the end I found

00:05:56,389 --> 00:06:00,780
different problems different areas of

00:05:58,710 --> 00:06:02,789
interest and I decided to focus on

00:06:00,780 --> 00:06:05,360
release management because that seems to

00:06:02,789 --> 00:06:11,729
be one of the the most critical areas

00:06:05,360 --> 00:06:14,039
where problems are cure the next thing

00:06:11,729 --> 00:06:16,860
open source free software there are so

00:06:14,039 --> 00:06:20,099
many projects there are large projects

00:06:16,860 --> 00:06:23,010
very small projects that many projects

00:06:20,099 --> 00:06:25,050
which don't lead anywhere just need to

00:06:23,010 --> 00:06:27,000
look at sourceforge which have over a

00:06:25,050 --> 00:06:29,490
hundred thousand projects but you

00:06:27,000 --> 00:06:31,620
actually see that ninety percent of them

00:06:29,490 --> 00:06:33,720
haven't actually produced any code the

00:06:31,620 --> 00:06:36,449
question is what kind of projects do you

00:06:33,720 --> 00:06:38,900
want to look at specifically and in my

00:06:36,449 --> 00:06:41,970
initial research at the beginning I

00:06:38,900 --> 00:06:44,430
looked at all kinds of projects to see

00:06:41,970 --> 00:06:47,340
what different problems are there and I

00:06:44,430 --> 00:06:48,720
found that small projects phase very

00:06:47,340 --> 00:06:51,090
different problems with release

00:06:48,720 --> 00:06:54,599
management too large projects so in

00:06:51,090 --> 00:06:55,980
small projects the problem is usually a

00:06:54,599 --> 00:06:57,990
resource problem

00:06:55,980 --> 00:06:59,850
not having enough people whether the

00:06:57,990 --> 00:07:03,830
problem is not knowing how to make

00:06:59,850 --> 00:07:06,660
releases where is in large project

00:07:03,830 --> 00:07:09,240
projects the the problem is much more

00:07:06,660 --> 00:07:11,850
about coordination how do you get with

00:07:09,240 --> 00:07:14,790
like hundreds or thousands of developers

00:07:11,850 --> 00:07:17,130
working on the same code base how can

00:07:14,790 --> 00:07:19,170
you get those people to finish all that

00:07:17,130 --> 00:07:21,870
work at the same time and to get

00:07:19,170 --> 00:07:25,760
something out which which is of high

00:07:21,870 --> 00:07:28,400
quality and which is on time so for me

00:07:25,760 --> 00:07:31,980
from the the coordination and management

00:07:28,400 --> 00:07:34,230
perspective this question is more

00:07:31,980 --> 00:07:39,090
interesting so I've decided to look at

00:07:34,230 --> 00:07:41,370
large and complex projects I'm looking

00:07:39,090 --> 00:07:43,650
at projects which are mainly voluntary

00:07:41,370 --> 00:07:48,840
and there is a question where how do you

00:07:43,650 --> 00:07:50,730
define a volunteer and I have so you

00:07:48,840 --> 00:07:53,940
could simply say someone who is not paid

00:07:50,730 --> 00:07:58,470
is a volunteer that's one definition but

00:07:53,940 --> 00:08:01,200
I think even paint people are often seen

00:07:58,470 --> 00:08:06,030
as voluntary because for me it's a

00:08:01,200 --> 00:08:09,420
matter of control if the project can say

00:08:06,030 --> 00:08:11,940
you have to work on this then you have

00:08:09,420 --> 00:08:13,470
control over someone then during release

00:08:11,940 --> 00:08:14,730
preparations you can say well you have

00:08:13,470 --> 00:08:17,850
to work on this you have to work on that

00:08:14,730 --> 00:08:21,410
but with with many contributors who are

00:08:17,850 --> 00:08:24,420
paid by a by companies IBM HP Google

00:08:21,410 --> 00:08:26,790
they have their own interests so as a

00:08:24,420 --> 00:08:28,830
project you can tell them we need to do

00:08:26,790 --> 00:08:30,030
this even though they are paid to work

00:08:28,830 --> 00:08:33,599
on a project they have their own

00:08:30,030 --> 00:08:35,310
interests so they're their voluntary you

00:08:33,599 --> 00:08:39,120
can't you don't have any control and

00:08:35,310 --> 00:08:41,190
that's the main issue I'm looking at

00:08:39,120 --> 00:08:42,930
projects which are distributed because

00:08:41,190 --> 00:08:45,600
that's where you see those those big

00:08:42,930 --> 00:08:47,970
coordination problems if you can put all

00:08:45,600 --> 00:08:49,860
the people into a room and then say you

00:08:47,970 --> 00:08:52,290
will do this task you will do that it's

00:08:49,860 --> 00:08:55,200
much easier but how do you coordinate if

00:08:52,290 --> 00:08:57,240
it's distributed and then I've as I said

00:08:55,200 --> 00:08:59,970
before I've looked at projects which are

00:08:57,240 --> 00:09:02,570
currently moving or which have moved to

00:08:59,970 --> 00:09:05,850
a time-based release management strategy

00:09:02,570 --> 00:09:08,940
so those are the the projects which I

00:09:05,850 --> 00:09:12,570
looked at some projects all of the

00:09:08,940 --> 00:09:15,420
very large very popular you would think

00:09:12,570 --> 00:09:16,980
of high quality and without problems

00:09:15,420 --> 00:09:18,750
whereas in fact there are loads of

00:09:16,980 --> 00:09:21,570
problems which which each of with each

00:09:18,750 --> 00:09:24,240
of them and what I've listed here as

00:09:21,570 --> 00:09:26,220
well is the current release strategy

00:09:24,240 --> 00:09:28,290
that time based release strategy and

00:09:26,220 --> 00:09:31,650
when they decided to move to time-based

00:09:28,290 --> 00:09:35,310
releases so what is listed here is the

00:09:31,650 --> 00:09:36,690
the ideal view so what they are trying

00:09:35,310 --> 00:09:40,590
to do I'm not saying that they're

00:09:36,690 --> 00:09:43,200
actually doing this so people can say we

00:09:40,590 --> 00:09:46,110
we have a six monthly cycle but in

00:09:43,200 --> 00:09:48,960
reality takes 12 months but that's

00:09:46,110 --> 00:09:51,960
basically what their strategy is so you

00:09:48,960 --> 00:09:55,470
can see that quite a few projects have a

00:09:51,960 --> 00:09:57,210
six-month release cycle and then there

00:09:55,470 --> 00:09:59,280
is the the Linux kernel which I

00:09:57,210 --> 00:10:01,800
classifies time-based because there is a

00:09:59,280 --> 00:10:03,840
two-week merge window in which new

00:10:01,800 --> 00:10:07,290
features are accepted and the rest is

00:10:03,840 --> 00:10:09,120
just two for getting that code the new

00:10:07,290 --> 00:10:11,820
code stable and getting the release out

00:10:09,120 --> 00:10:14,520
which can can take variable time

00:10:11,820 --> 00:10:16,290
sometimes two months free mums but still

00:10:14,520 --> 00:10:20,250
it's time based because of that much we

00:10:16,290 --> 00:10:24,570
know debian is currently moving to

00:10:20,250 --> 00:10:27,570
time-based and all of clone is currently

00:10:24,570 --> 00:10:31,800
moving you know extra work is recently

00:10:27,570 --> 00:10:34,680
moved to you can see that so now I would

00:10:31,800 --> 00:10:37,710
go into detail or give a brief summary

00:10:34,680 --> 00:10:41,010
of all of these projects for each I will

00:10:37,710 --> 00:10:44,060
show that the past release is to show

00:10:41,010 --> 00:10:46,560
how often they actually make releases

00:10:44,060 --> 00:10:48,060
how much time there is between releases

00:10:46,560 --> 00:10:50,640
and then i will look at their past

00:10:48,060 --> 00:10:53,850
problems solutions and outstanding

00:10:50,640 --> 00:10:56,600
problems so debian you can see that

00:10:53,850 --> 00:11:00,450
early on there were quite a few releases

00:10:56,600 --> 00:11:04,080
six months seven months but then things

00:11:00,450 --> 00:11:06,120
started to slow down and the big problem

00:11:04,080 --> 00:11:09,000
really happened with free that one which

00:11:06,120 --> 00:11:12,210
was 35 months which was it was delayed

00:11:09,000 --> 00:11:13,920
by over over a year and loads of people

00:11:12,210 --> 00:11:16,830
complained because the software was out

00:11:13,920 --> 00:11:20,510
of date the previous release it wouldn't

00:11:16,830 --> 00:11:20,510
install a modern hardware anymore

00:11:21,420 --> 00:11:28,649
so what are the the past problems of

00:11:23,800 --> 00:11:31,120
Debian I think a big problem was that

00:11:28,649 --> 00:11:36,540
the whole release management wasn't

00:11:31,120 --> 00:11:38,529
organized if you look at free dot one

00:11:36,540 --> 00:11:40,870
there was an announcement from the

00:11:38,529 --> 00:11:42,540
release manager saying oh I think we

00:11:40,870 --> 00:11:45,040
should do a release in two months and

00:11:42,540 --> 00:11:47,050
that's just crazy because people weren't

00:11:45,040 --> 00:11:50,920
prepared for that and obviously that

00:11:47,050 --> 00:11:52,839
target was met another thing was the

00:11:50,920 --> 00:11:54,759
blockers were found very late in the

00:11:52,839 --> 00:11:56,769
release cycle and it's again partly

00:11:54,759 --> 00:11:59,500
because people weren't prepared and

00:11:56,769 --> 00:12:04,740
partly because the release targets and

00:11:59,500 --> 00:12:04,740
and weren't really defined very well

00:12:04,829 --> 00:12:09,940
because of those delays we had

00:12:07,420 --> 00:12:13,269
out-of-date software and because of

00:12:09,940 --> 00:12:15,550
repeated delays the the project really

00:12:13,269 --> 00:12:18,190
got a very bad image about being slow

00:12:15,550 --> 00:12:21,370
but not being able to release and that's

00:12:18,190 --> 00:12:23,949
a big problem because users are moving

00:12:21,370 --> 00:12:26,680
away so what are the solutions so in

00:12:23,949 --> 00:12:29,470
particular during the the release cycle

00:12:26,680 --> 00:12:34,480
of followed zero which was recently

00:12:29,470 --> 00:12:37,180
released much better release management

00:12:34,480 --> 00:12:38,829
structures could implement it so the

00:12:37,180 --> 00:12:42,279
project moved from a single release

00:12:38,829 --> 00:12:44,410
manager to having a release manager plus

00:12:42,279 --> 00:12:47,440
assistance and now having to release

00:12:44,410 --> 00:12:50,589
managers and in assistance there was

00:12:47,440 --> 00:12:52,990
better infrastructure like a debian

00:12:50,589 --> 00:12:54,490
release meaning list and IRC channels so

00:12:52,990 --> 00:12:58,120
you could actually talk to the people

00:12:54,490 --> 00:13:01,000
and know what's going on for the first

00:12:58,120 --> 00:13:03,579
time ever in Devlin's history for photog

00:13:01,000 --> 00:13:06,250
warm air follows 0 a release date was

00:13:03,579 --> 00:13:08,980
set well in advance so when freedom one

00:13:06,250 --> 00:13:11,769
came out the release people said we will

00:13:08,980 --> 00:13:14,079
we want to make a release in december

00:13:11,769 --> 00:13:16,750
two thousand and six so the project

00:13:14,079 --> 00:13:18,970
didn't meet that target but still i

00:13:16,750 --> 00:13:22,439
think the whole release process was much

00:13:18,970 --> 00:13:22,439
smoother than in previous releases

00:13:22,860 --> 00:13:28,120
another thing is that release updates

00:13:25,870 --> 00:13:30,040
were sent much more regularly so people

00:13:28,120 --> 00:13:32,710
actually knew what was going on which

00:13:30,040 --> 00:13:37,150
again wasn't the case in the past and

00:13:32,710 --> 00:13:39,910
the project defined released targets so

00:13:37,150 --> 00:13:41,740
and they made a division between things

00:13:39,910 --> 00:13:44,070
which really had to be implemented

00:13:41,740 --> 00:13:47,590
before the release and things which were

00:13:44,070 --> 00:13:50,530
goals which were nice to have but we

00:13:47,590 --> 00:13:53,950
wouldn't wait for them there was also a

00:13:50,530 --> 00:13:55,360
clarification of responsibilities in the

00:13:53,950 --> 00:13:58,290
past it wasn't clear who was responsible

00:13:55,360 --> 00:14:00,010
for getting work done I for example

00:13:58,290 --> 00:14:01,780
porting Debian two different

00:14:00,010 --> 00:14:03,640
architectures if there were problems it

00:14:01,780 --> 00:14:05,530
was usually up to the release manager to

00:14:03,640 --> 00:14:08,050
fix them or to find people to fix them

00:14:05,530 --> 00:14:11,110
but now it's clear that the the porters

00:14:08,050 --> 00:14:13,330
of that architecture are responsible I

00:14:11,110 --> 00:14:16,270
think the biggest outstanding problem is

00:14:13,330 --> 00:14:20,680
to to make a cultural shift and to show

00:14:16,270 --> 00:14:22,330
that yes deadlines are real and and that

00:14:20,680 --> 00:14:27,970
targets can be met and that the project

00:14:22,330 --> 00:14:30,520
can release on time so GCC has had a

00:14:27,970 --> 00:14:32,230
couple of releases as well in theory

00:14:30,520 --> 00:14:34,930
they should make release every six

00:14:32,230 --> 00:14:40,270
months in practice it's slower than that

00:14:34,930 --> 00:14:41,740
as you can see there should be a release

00:14:40,270 --> 00:14:44,170
that should have been a reset the end of

00:14:41,740 --> 00:14:46,810
the last year and there were

00:14:44,170 --> 00:14:52,890
preparations for that but it it's still

00:14:46,810 --> 00:14:55,570
in preparation even so it's quite late

00:14:52,890 --> 00:14:57,990
the problem in the past with cheeses

00:14:55,570 --> 00:15:01,930
years what was a long time ago was a

00:14:57,990 --> 00:15:05,560
development was very closed so that was

00:15:01,930 --> 00:15:10,900
in in the days before the e cheese es s

00:15:05,560 --> 00:15:13,600
e-g as a port a fork there was a very

00:15:10,900 --> 00:15:18,640
long time between releases and there

00:15:13,600 --> 00:15:22,360
weren't any public snapshots so when

00:15:18,640 --> 00:15:25,380
when a project forked and then took over

00:15:22,360 --> 00:15:27,880
the official development development are

00:15:25,380 --> 00:15:29,590
there was lots of speed up with

00:15:27,880 --> 00:15:31,780
development but one problem was that

00:15:29,590 --> 00:15:33,820
people were committing changes and a

00:15:31,780 --> 00:15:37,360
development trevose was broken quite

00:15:33,820 --> 00:15:41,980
often which is obviously a problem so

00:15:37,360 --> 00:15:43,930
the solution was to that rigid and stale

00:15:41,980 --> 00:15:46,510
development a more open development

00:15:43,930 --> 00:15:49,540
style having it a steering committee

00:15:46,510 --> 00:15:51,790
which can appoint maintain us and do a

00:15:49,540 --> 00:15:55,180
very sort of things and then they

00:15:51,790 --> 00:15:57,940
divided the development phase into three

00:15:55,180 --> 00:16:00,100
different stages in the first stage

00:15:57,940 --> 00:16:03,160
you're allowed to make major changes in

00:16:00,100 --> 00:16:05,320
the second stage you can still make big

00:16:03,160 --> 00:16:07,720
changes but they're smaller and the

00:16:05,320 --> 00:16:11,050
third stage is for bug fixing and

00:16:07,720 --> 00:16:13,900
documentation changes and patches are

00:16:11,050 --> 00:16:15,700
actually reviewed which which means that

00:16:13,900 --> 00:16:18,220
the development tree is broken less

00:16:15,700 --> 00:16:20,500
often than it used to be some of the

00:16:18,220 --> 00:16:22,540
outstanding problems are that the

00:16:20,500 --> 00:16:24,580
release manager is very busy so he

00:16:22,540 --> 00:16:27,790
hasn't been forcing the release as much

00:16:24,580 --> 00:16:30,760
as he should have been which means for

00:16:27,790 --> 00:16:32,350
the the next release for the two which

00:16:30,760 --> 00:16:35,860
should have happened at the end of last

00:16:32,350 --> 00:16:39,160
year it's still it's still not happening

00:16:35,860 --> 00:16:42,460
and the momentum has focused on photo

00:16:39,160 --> 00:16:45,430
free but but the release manager I

00:16:42,460 --> 00:16:49,350
really need to start pushing put 42 42

00:16:45,430 --> 00:16:52,000
again and here's started doing that

00:16:49,350 --> 00:16:54,010
another thing is the branch criteria for

00:16:52,000 --> 00:16:56,290
making a new release might need an

00:16:54,010 --> 00:16:59,500
update because it's too strict it's very

00:16:56,290 --> 00:17:02,640
hard to actually go into the process of

00:16:59,500 --> 00:17:02,640
making releases yeah

00:17:12,500 --> 00:17:18,179
GCC is a great example of a very large

00:17:14,939 --> 00:17:20,670
project like the colonel or like canola

00:17:18,179 --> 00:17:22,100
or any of these things and I see the

00:17:20,670 --> 00:17:25,920
same thing happening in the colonel tree

00:17:22,100 --> 00:17:28,980
and is that that correct assessment is

00:17:25,920 --> 00:17:32,850
that what you also seem so the question

00:17:28,980 --> 00:17:35,610
is basically that changes broke the

00:17:32,850 --> 00:17:38,490
development and that's you can find that

00:17:35,610 --> 00:17:41,490
in different projects and it's like a

00:17:38,490 --> 00:17:44,400
normal part of development it's true

00:17:41,490 --> 00:17:46,470
that you can find I mean breakage

00:17:44,400 --> 00:17:49,140
breakage is normally it happens from

00:17:46,470 --> 00:17:52,080
time to time but obviously you you have

00:17:49,140 --> 00:17:53,670
to try to avoid it especially if you

00:17:52,080 --> 00:17:55,440
want to do a time-based release if you

00:17:53,670 --> 00:17:57,780
say we have to release on the date well

00:17:55,440 --> 00:18:00,000
if the development tree is broken you

00:17:57,780 --> 00:18:01,920
can't do that the other problem is the

00:18:00,000 --> 00:18:05,900
development if the development tree is

00:18:01,920 --> 00:18:08,010
broken you can't do any testing so

00:18:05,900 --> 00:18:09,450
obviously development breaks sometimes

00:18:08,010 --> 00:18:11,970
but there is a big difference between

00:18:09,450 --> 00:18:14,220
breaking sometimes and being broke all

00:18:11,970 --> 00:18:17,520
of the time which which happens in some

00:18:14,220 --> 00:18:19,679
projects I think main basically most

00:18:17,520 --> 00:18:22,740
large free software projects are pretty

00:18:19,679 --> 00:18:26,429
good if something is broken it gets

00:18:22,740 --> 00:18:28,260
reverted there are some tests packages

00:18:26,429 --> 00:18:31,440
like tinder box to make sure that things

00:18:28,260 --> 00:18:34,530
really you know you you can work on the

00:18:31,440 --> 00:18:36,809
tree but I think their loads of projects

00:18:34,530 --> 00:18:39,030
or I hear lots of stories for commercial

00:18:36,809 --> 00:18:41,340
projects where basically the development

00:18:39,030 --> 00:18:42,960
tree is broken all the time and it's

00:18:41,340 --> 00:18:44,880
something which which need to be avoided

00:18:42,960 --> 00:18:48,390
but obviously sometimes it breaks

00:18:44,880 --> 00:18:52,920
especially during stage one but it

00:18:48,390 --> 00:18:56,160
shouldn't be broken all the time so

00:18:52,920 --> 00:19:00,960
going to Nome you can see that in the

00:18:56,160 --> 00:19:04,530
past they had some releases and the big

00:19:00,960 --> 00:19:07,440
problem was with with two dot zero which

00:19:04,530 --> 00:19:09,750
which was delayed and after two dot zero

00:19:07,440 --> 00:19:13,020
they moved to time-based releases and

00:19:09,750 --> 00:19:15,420
gnome is really the example of a

00:19:13,020 --> 00:19:18,090
successful time based project I mean you

00:19:15,420 --> 00:19:19,860
just need to look at this they say they

00:19:18,090 --> 00:19:22,530
will release every six months and they

00:19:19,860 --> 00:19:24,390
do and they are volunteer project

00:19:22,530 --> 00:19:26,250
so if you compare that to Debian we're

00:19:24,390 --> 00:19:28,830
all we're volunteers we can't meet

00:19:26,250 --> 00:19:32,280
deadlines we don't need to define

00:19:28,830 --> 00:19:35,340
targets yes it can be done it just needs

00:19:32,280 --> 00:19:38,430
to you need to change the whole

00:19:35,340 --> 00:19:41,400
development process and your perspective

00:19:38,430 --> 00:19:44,430
of development I think gnome is a

00:19:41,400 --> 00:19:46,410
wonderful example but again no one had

00:19:44,430 --> 00:19:48,990
problems to people don't believe it but

00:19:46,410 --> 00:19:52,740
in the past blom had very similar

00:19:48,990 --> 00:19:57,470
problems toward Debian had in the last

00:19:52,740 --> 00:19:59,730
few years so that version tool at all

00:19:57,470 --> 00:20:02,430
the original idea was to basically

00:19:59,730 --> 00:20:05,940
change internal interfaces but not make

00:20:02,430 --> 00:20:07,860
many changes the problem was it took

00:20:05,940 --> 00:20:10,650
much longer than it should have taking

00:20:07,860 --> 00:20:12,410
people got really frustrated and the

00:20:10,650 --> 00:20:15,210
next problem was because it took so long

00:20:12,410 --> 00:20:18,360
developer said well if we ship to the

00:20:15,210 --> 00:20:20,430
all now and we only changed internal

00:20:18,360 --> 00:20:22,530
interfaces what I use is going to think

00:20:20,430 --> 00:20:24,030
of the such a delay so they said well we

00:20:22,530 --> 00:20:27,780
obviously need to implement something

00:20:24,030 --> 00:20:32,160
which users see and that again leads to

00:20:27,780 --> 00:20:36,030
delays it was basically not clear what's

00:20:32,160 --> 00:20:38,940
going on no release updates freezes were

00:20:36,030 --> 00:20:41,580
announced but then the release never

00:20:38,940 --> 00:20:44,330
happened and that's very frustrating if

00:20:41,580 --> 00:20:46,620
yeah we are freezing we make her release

00:20:44,330 --> 00:20:48,450
nothing happens and then again two

00:20:46,620 --> 00:20:50,310
months later let's freeze let's make

00:20:48,450 --> 00:20:52,950
release and again nothing happens so

00:20:50,310 --> 00:20:54,900
developers really got frustrated it was

00:20:52,950 --> 00:20:58,410
a big problem for vendors as well they

00:20:54,900 --> 00:21:00,120
wanted to ship gnome but when would the

00:20:58,410 --> 00:21:02,400
next words will be out no one really

00:21:00,120 --> 00:21:04,920
knew what happened was loads of

00:21:02,400 --> 00:21:07,830
fragmentation when does all did their

00:21:04,920 --> 00:21:10,050
own thing which means taking development

00:21:07,830 --> 00:21:14,430
resources away from making that new

00:21:10,050 --> 00:21:16,410
release so gnome moved to time-based

00:21:14,430 --> 00:21:19,620
releases very successfully they

00:21:16,410 --> 00:21:23,160
introduced very rigorous processes and

00:21:19,620 --> 00:21:25,560
policies they had the idea of reverting

00:21:23,160 --> 00:21:27,840
if something is not finished where we

00:21:25,560 --> 00:21:31,530
take it out again and it's a really good

00:21:27,840 --> 00:21:34,260
incentive for people to actually finish

00:21:31,530 --> 00:21:37,230
and the project really gained lots of

00:21:34,260 --> 00:21:39,660
credibility after those two days when

00:21:37,230 --> 00:21:41,870
they actually released on time they

00:21:39,660 --> 00:21:46,620
managed to do it and not only once but

00:21:41,870 --> 00:21:48,000
several times the outstanding problem I

00:21:46,620 --> 00:21:49,800
don't know if it's a real problem but

00:21:48,000 --> 00:21:52,140
it's sometimes raised as a concern is

00:21:49,800 --> 00:21:54,030
it's interesting to look at it people

00:21:52,140 --> 00:21:56,340
say that time based release is making a

00:21:54,030 --> 00:21:59,700
raise every six months as is the case in

00:21:56,340 --> 00:22:02,340
norm is very good for for upgrades for

00:21:59,700 --> 00:22:04,530
updates like incremental updates but

00:22:02,340 --> 00:22:07,050
some people are worried that it's it

00:22:04,530 --> 00:22:09,990
stops innovation people ask but where is

00:22:07,050 --> 00:22:13,200
Nome free at all with that revolutionary

00:22:09,990 --> 00:22:15,240
change and anything there are some

00:22:13,200 --> 00:22:17,580
counter arguments first of all many of

00:22:15,240 --> 00:22:19,380
those changes which have been proposed

00:22:17,580 --> 00:22:22,170
for free at all have in fact been

00:22:19,380 --> 00:22:24,450
implemented already you don't have to

00:22:22,170 --> 00:22:26,820
make a feature already within one

00:22:24,450 --> 00:22:28,650
interval you can simply do in a branch

00:22:26,820 --> 00:22:31,530
and then take one year and then

00:22:28,650 --> 00:22:33,420
integrate it back the other thing is no

00:22:31,530 --> 00:22:35,790
one really knows what known freezer door

00:22:33,420 --> 00:22:37,830
would actually be so it seems that every

00:22:35,790 --> 00:22:40,100
strategy is working pretty well but

00:22:37,830 --> 00:22:44,220
there is the question of whether those

00:22:40,100 --> 00:22:46,500
frequent regular updates stop stop make

00:22:44,220 --> 00:22:48,810
you know those innovation and big

00:22:46,500 --> 00:22:50,600
changes I think it's possible just do it

00:22:48,810 --> 00:22:56,550
on a branch and and when it's ready

00:22:50,600 --> 00:22:59,250
switch to that so the Linux kernel is

00:22:56,550 --> 00:23:02,580
well known for having changed its

00:22:59,250 --> 00:23:06,000
release strategy completely with all we

00:23:02,580 --> 00:23:08,430
don't need stable releases anymore or we

00:23:06,000 --> 00:23:11,070
don't need a development tree which

00:23:08,430 --> 00:23:12,990
happened after 26 so here you can see

00:23:11,070 --> 00:23:16,050
the the stable releases from the past

00:23:12,990 --> 00:23:18,870
loading including the new 26 releases

00:23:16,050 --> 00:23:21,710
and that was really long time between

00:23:18,870 --> 00:23:21,710
releases

00:23:23,110 --> 00:23:29,350
so the parts problem because of the long

00:23:26,520 --> 00:23:32,410
release cycle there was so many changes

00:23:29,350 --> 00:23:33,790
and Linux is such a big project and you

00:23:32,410 --> 00:23:35,500
could just imagine how many changes

00:23:33,790 --> 00:23:38,860
there are and it's really hard to test

00:23:35,500 --> 00:23:40,900
and uses very few users actually test

00:23:38,860 --> 00:23:42,910
developing the versions so what happens

00:23:40,900 --> 00:23:45,730
is that they were trying to release a

00:23:42,910 --> 00:23:48,670
new version after I don't know three

00:23:45,730 --> 00:23:51,340
years and there were so many changes and

00:23:48,670 --> 00:23:53,679
it was very hard to test and to get that

00:23:51,340 --> 00:23:56,350
out another problem was that features

00:23:53,679 --> 00:23:58,179
cut out very slowly you would you would

00:23:56,350 --> 00:23:59,620
make you would implement a feature and

00:23:58,179 --> 00:24:04,049
then you would have to wait three years

00:23:59,620 --> 00:24:08,440
to actually make that available to users

00:24:04,049 --> 00:24:12,010
again vendors had to backport loads of

00:24:08,440 --> 00:24:15,880
features or loads of bug fixes so those

00:24:12,010 --> 00:24:18,820
loads of fragmentation going on so the

00:24:15,880 --> 00:24:23,620
new release strategy has has reduced

00:24:18,820 --> 00:24:25,090
them people can actually work on the

00:24:23,620 --> 00:24:29,740
current release and together with the

00:24:25,090 --> 00:24:33,190
community you have new versions coming

00:24:29,740 --> 00:24:35,160
out every two or three months which

00:24:33,190 --> 00:24:37,450
means that there is a steady flow

00:24:35,160 --> 00:24:40,500
interpret production so things actually

00:24:37,450 --> 00:24:43,299
tested very quickly if something breaks

00:24:40,500 --> 00:24:46,870
uses we will see they will report it and

00:24:43,299 --> 00:24:48,669
it can be fixed and again features get

00:24:46,870 --> 00:24:52,450
out much more quickly you implement

00:24:48,669 --> 00:24:55,630
something and and three months later you

00:24:52,450 --> 00:24:58,840
can ship it to users it's great but

00:24:55,630 --> 00:25:01,120
there are lots of problems there isn't

00:24:58,840 --> 00:25:03,669
really a long-term stable tree so I know

00:25:01,120 --> 00:25:07,210
Adrian punk has implemented one based on

00:25:03,669 --> 00:25:10,360
26 16 but it still needs to be seen how

00:25:07,210 --> 00:25:12,100
successful it will really be and it

00:25:10,360 --> 00:25:14,679
might be a problem for for companies

00:25:12,100 --> 00:25:17,140
that it's basically the effort of one

00:25:14,679 --> 00:25:21,570
person and not what really something

00:25:17,140 --> 00:25:21,570
that's officially supported by everyone

00:25:24,520 --> 00:25:31,130
like Danny n equal to or red hat susake

00:25:28,670 --> 00:25:33,890
those are the companies that provide the

00:25:31,130 --> 00:25:36,920
commercial stable version whom versus a

00:25:33,890 --> 00:25:38,270
open-source stable version and there

00:25:36,920 --> 00:25:41,660
were attempts to make stable versions of

00:25:38,270 --> 00:25:43,910
the colonel like a 26 81 they have

00:25:41,660 --> 00:25:46,490
numbers that surround the enemy but

00:25:43,910 --> 00:25:48,500
those really aren't the same as what the

00:25:46,490 --> 00:25:49,549
commercial vendors do in really paying

00:25:48,500 --> 00:25:52,070
attention with the commercial vendors

00:25:49,549 --> 00:25:55,669
hmm that's right so there were two

00:25:52,070 --> 00:25:57,919
issues the first is that the long-term

00:25:55,669 --> 00:26:00,860
stable release is already provided by

00:25:57,919 --> 00:26:03,740
vendors by a linux distribution and yes

00:26:00,860 --> 00:26:05,390
that's that's how things work and the

00:26:03,740 --> 00:26:09,080
other point was that there are stable

00:26:05,390 --> 00:26:11,660
updates to two releases but that's

00:26:09,080 --> 00:26:14,270
really only for the current stable and

00:26:11,660 --> 00:26:17,299
maybe for the last one but they are not

00:26:14,270 --> 00:26:19,400
supported a long time yes so it's true

00:26:17,299 --> 00:26:23,120
that but the model is basically that

00:26:19,400 --> 00:26:25,580
that the project ships something and

00:26:23,120 --> 00:26:28,490
then it's up to the vendors to make a

00:26:25,580 --> 00:26:30,169
long-term stable product out of it the

00:26:28,490 --> 00:26:32,570
question is whether that's the ideal

00:26:30,169 --> 00:26:35,179
solution because again there is some

00:26:32,570 --> 00:26:38,929
fragmentation on the other hand there is

00:26:35,179 --> 00:26:43,429
no agreement let's say we make a stable

00:26:38,929 --> 00:26:45,380
release should we go with 26 18 26 16

00:26:43,429 --> 00:26:48,350
because when does have different

00:26:45,380 --> 00:26:50,510
schedules different release cycles there

00:26:48,350 --> 00:26:52,700
isn't really agreement so maybe that's

00:26:50,510 --> 00:26:53,990
just the way it is and has to be but

00:26:52,700 --> 00:26:55,610
it's still an interesting question

00:26:53,990 --> 00:26:57,679
whether we could do something about it

00:26:55,610 --> 00:27:01,640
and there is the more fundamental

00:26:57,679 --> 00:27:04,130
question whether so who are the users of

00:27:01,640 --> 00:27:06,470
the Linux kernel of like the kernel of

00:27:04,130 --> 00:27:08,690
all colonel are the users people will

00:27:06,470 --> 00:27:11,840
actually run the colonel like end users

00:27:08,690 --> 00:27:13,850
or are the users or customers the vendor

00:27:11,840 --> 00:27:16,790
and at the moment it's it's mostly

00:27:13,850 --> 00:27:19,150
focused for vendors and and it's a

00:27:16,790 --> 00:27:21,650
question whether it's a good thing

00:27:19,150 --> 00:27:23,809
because you might lose feedback from

00:27:21,650 --> 00:27:27,020
users it always has to go through the

00:27:23,809 --> 00:27:29,510
vendor and it slows things down so it's

00:27:27,020 --> 00:27:33,440
a question whether it's a good thing but

00:27:29,510 --> 00:27:35,929
yes that's way it currently works did a

00:27:33,440 --> 00:27:37,850
problem with that fast development so

00:27:35,929 --> 00:27:40,039
you get release is more quickly features

00:27:37,850 --> 00:27:42,049
get out but there's so many changes and

00:27:40,039 --> 00:27:43,879
there are so many regressions so there

00:27:42,049 --> 00:27:46,639
are lots of people who are quite unhappy

00:27:43,879 --> 00:27:50,869
with that but again yes they can use and

00:27:46,639 --> 00:27:53,629
probably should use a vendor Colonel so

00:27:50,869 --> 00:27:56,740
open office of office is an interesting

00:27:53,629 --> 00:28:00,049
example because it's a very commercial

00:27:56,740 --> 00:28:02,240
open source project and it has some

00:28:00,049 --> 00:28:05,690
community involvement nowadays but it's

00:28:02,240 --> 00:28:09,259
still very much let and financed by some

00:28:05,690 --> 00:28:11,659
they pay the release manager and the

00:28:09,259 --> 00:28:15,259
release cycle used to be 18 months

00:28:11,659 --> 00:28:19,039
because of the commercial product star

00:28:15,259 --> 00:28:20,809
office and many open-source vendors like

00:28:19,039 --> 00:28:23,450
novela weren't very happy with that they

00:28:20,809 --> 00:28:27,679
wanted to see more frequent releases and

00:28:23,450 --> 00:28:30,350
in the end the project decided to move

00:28:27,679 --> 00:28:38,210
to more frequent releases making a

00:28:30,350 --> 00:28:41,059
release every three months so because of

00:28:38,210 --> 00:28:44,360
those that long release cycle many many

00:28:41,059 --> 00:28:46,759
very little testing or cured many

00:28:44,360 --> 00:28:48,919
changes accumulated you can see there

00:28:46,759 --> 00:28:53,480
are many very similar problems in those

00:28:48,919 --> 00:28:55,759
projects and features cut in very late

00:28:53,480 --> 00:28:58,429
because it was such a long time and and

00:28:55,759 --> 00:29:00,679
you you realized or we need that feature

00:28:58,429 --> 00:29:03,730
in order to I don't know react to

00:29:00,679 --> 00:29:08,029
Microsoft Word or some other development

00:29:03,730 --> 00:29:09,980
and and again the problem with vendors

00:29:08,029 --> 00:29:11,929
well what kind of version should we ship

00:29:09,980 --> 00:29:16,059
should we wait when is it going to be

00:29:11,929 --> 00:29:21,110
out and now there was a major delay with

00:29:16,059 --> 00:29:23,929
with 200 which should have been 18

00:29:21,110 --> 00:29:27,590
months but it was actually 26 so that

00:29:23,929 --> 00:29:29,480
was a major really delaying so in the

00:29:27,590 --> 00:29:33,889
end the project moved to three-month

00:29:29,480 --> 00:29:35,960
monthly releases which means that there

00:29:33,889 --> 00:29:38,570
was a much better feedback loop with

00:29:35,960 --> 00:29:41,570
users it also means that that features

00:29:38,570 --> 00:29:47,210
actually get out which which increased

00:29:41,570 --> 00:29:49,249
developer motivation and the the better

00:29:47,210 --> 00:29:49,760
planning you know every three months

00:29:49,249 --> 00:29:52,340
early

00:29:49,760 --> 00:29:56,780
is allowed vendors to be involved much

00:29:52,340 --> 00:29:59,900
much more in the development and another

00:29:56,780 --> 00:30:01,460
thing which which son has done is to

00:29:59,900 --> 00:30:04,070
make the release process more or more

00:30:01,460 --> 00:30:09,080
transparent so other people can actually

00:30:04,070 --> 00:30:12,050
get involved one of the big problems is

00:30:09,080 --> 00:30:15,050
that a project found that three months

00:30:12,050 --> 00:30:16,940
is actually too quick for them they

00:30:15,050 --> 00:30:19,340
found that it's really hard to do

00:30:16,940 --> 00:30:22,010
quality assurance if you have a release

00:30:19,340 --> 00:30:23,630
every three months and they found that

00:30:22,010 --> 00:30:25,790
some of the users didn't actually want

00:30:23,630 --> 00:30:28,040
to have new releases with new features

00:30:25,790 --> 00:30:31,190
every three months so they're currently

00:30:28,040 --> 00:30:34,370
moving to a new schedule with major

00:30:31,190 --> 00:30:36,350
releases every six months and in between

00:30:34,370 --> 00:30:43,100
every free month they have smaller

00:30:36,350 --> 00:30:47,840
updates with bug fixes plone the history

00:30:43,100 --> 00:30:49,490
he is very it's still very young you can

00:30:47,840 --> 00:30:51,500
see with two dot one that was a major

00:30:49,490 --> 00:30:56,390
delay and that really prompted the

00:30:51,500 --> 00:30:58,760
change in the release policy so releases

00:30:56,390 --> 00:31:00,950
in particular to the one took a long

00:30:58,760 --> 00:31:05,350
time to get out because of those many

00:31:00,950 --> 00:31:09,170
changes users faced upgrade problems and

00:31:05,350 --> 00:31:11,480
many pallone developers actually working

00:31:09,170 --> 00:31:14,270
as web developers and for them it was

00:31:11,480 --> 00:31:15,920
very hard to make a decision should we

00:31:14,270 --> 00:31:18,530
use the current version of clone or

00:31:15,920 --> 00:31:22,610
should I wait for the next version is it

00:31:18,530 --> 00:31:24,830
going to be ready for my project so the

00:31:22,610 --> 00:31:26,810
project decided to move to time-based

00:31:24,830 --> 00:31:29,180
releases but I really don't know how

00:31:26,810 --> 00:31:34,280
well it's working it they only decided

00:31:29,180 --> 00:31:36,020
very recently end so far they have been

00:31:34,280 --> 00:31:37,970
delays so I don't know whether they can

00:31:36,020 --> 00:31:40,490
pull it off but what they have managed

00:31:37,970 --> 00:31:42,920
so far is to implement much better

00:31:40,490 --> 00:31:46,220
development structures it's much more

00:31:42,920 --> 00:31:49,640
disciplined development process nowadays

00:31:46,220 --> 00:31:53,480
which means that they can release on

00:31:49,640 --> 00:31:56,270
time and we go back you can see that 25

00:31:53,480 --> 00:31:58,490
was released nine months after the the

00:31:56,270 --> 00:32:01,450
previous release so obviously there were

00:31:58,490 --> 00:32:04,120
improvements in

00:32:01,450 --> 00:32:06,190
and and they also say that those

00:32:04,120 --> 00:32:08,380
deadlines have motivated developers to

00:32:06,190 --> 00:32:13,870
actually work on on the code and finish

00:32:08,380 --> 00:32:16,419
their features so extra dog is not

00:32:13,870 --> 00:32:19,690
example which which basically forked

00:32:16,419 --> 00:32:21,580
from X 386 and they moved to time-based

00:32:19,690 --> 00:32:24,549
releases with if there's 70 release

00:32:21,580 --> 00:32:27,070
again six months for the first release

00:32:24,549 --> 00:32:31,559
they manage to do it in five but then

00:32:27,070 --> 00:32:37,149
there was a delay for the next 19 months

00:32:31,559 --> 00:32:39,549
so X free was a fork of X 3 X or it was

00:32:37,149 --> 00:32:41,380
a fork of X 386 which had lots of

00:32:39,549 --> 00:32:44,440
problems that were very infrequent

00:32:41,380 --> 00:32:47,019
updates the development process was just

00:32:44,440 --> 00:32:51,399
very richest you couldn't do any major

00:32:47,019 --> 00:32:54,669
innovation and there wasn't any plan hmm

00:32:51,399 --> 00:32:57,220
another problem is or was that but the

00:32:54,669 --> 00:32:59,830
code base is huge and it's monolithic

00:32:57,220 --> 00:33:02,320
it's like one big thing and it's a very

00:32:59,830 --> 00:33:06,340
complicated build system so what they

00:33:02,320 --> 00:33:10,330
have decided to do is to to split it up

00:33:06,340 --> 00:33:14,230
and make a modular system and also to

00:33:10,330 --> 00:33:16,059
change to build system what that split

00:33:14,230 --> 00:33:18,279
into the modular system allowed the

00:33:16,059 --> 00:33:20,950
project to do is to have two different

00:33:18,279 --> 00:33:23,710
release mechanisms so those individual

00:33:20,950 --> 00:33:26,409
projects can make their own releases

00:33:23,710 --> 00:33:29,289
whenever they want to and then there is

00:33:26,409 --> 00:33:31,269
the official a roll-up release of all

00:33:29,289 --> 00:33:34,000
those individual components into a

00:33:31,269 --> 00:33:35,889
official extra-long release and that's

00:33:34,000 --> 00:33:39,159
quite interesting and if you think about

00:33:35,889 --> 00:33:42,399
it you see oh that's actually how lots

00:33:39,159 --> 00:33:43,929
of projects work like gnome it's not one

00:33:42,399 --> 00:33:46,360
project there are so many different

00:33:43,929 --> 00:33:48,340
applications debian there are so many

00:33:46,360 --> 00:33:50,889
different packages you can see that in

00:33:48,340 --> 00:33:54,070
every large project that really there

00:33:50,889 --> 00:33:56,350
are sub systems or different components

00:33:54,070 --> 00:33:58,750
and ideally if you can can get them to

00:33:56,350 --> 00:34:02,260
release independently and then have a

00:33:58,750 --> 00:34:05,559
big release for everything and it's good

00:34:02,260 --> 00:34:08,829
because that's a fallback mechanism if a

00:34:05,559 --> 00:34:11,649
single component is not ready you can

00:34:08,829 --> 00:34:13,359
usually simply take the previous one the

00:34:11,649 --> 00:34:14,659
interface is in extra dog are pretty

00:34:13,359 --> 00:34:16,490
stable so you

00:34:14,659 --> 00:34:18,049
actually do that and it's really good

00:34:16,490 --> 00:34:21,530
because you don't need to wait for all

00:34:18,049 --> 00:34:23,990
those components to be ready out sending

00:34:21,530 --> 00:34:27,289
problem they need to clarify the

00:34:23,990 --> 00:34:32,210
interfaces so they can update their

00:34:27,289 --> 00:34:34,549
drivers more often so those are the the

00:34:32,210 --> 00:34:37,280
seven projects and I think what you have

00:34:34,549 --> 00:34:41,929
seen is there are very similar problems

00:34:37,280 --> 00:34:45,770
delays loads of development or curing

00:34:41,929 --> 00:34:47,809
accumulating making it hard to test when

00:34:45,770 --> 00:34:49,789
does not being able to work on a main

00:34:47,809 --> 00:34:52,970
development because it's so

00:34:49,789 --> 00:34:55,460
unpredictable it very similar problems

00:34:52,970 --> 00:34:57,619
and those delays lead to loads of

00:34:55,460 --> 00:35:01,490
problems and I think the fundamental

00:34:57,619 --> 00:35:06,349
problem is that the way open source

00:35:01,490 --> 00:35:08,930
works is simply very hard to integrate

00:35:06,349 --> 00:35:11,539
with release management because the way

00:35:08,930 --> 00:35:14,359
it works is that people to their own

00:35:11,539 --> 00:35:16,039
work very independently there hundreds

00:35:14,359 --> 00:35:18,770
of people just doing whatever they

00:35:16,039 --> 00:35:21,380
interested in and some of them might be

00:35:18,770 --> 00:35:23,180
just nearing the completion of a feature

00:35:21,380 --> 00:35:25,520
whereas some of them might just be

00:35:23,180 --> 00:35:27,410
beginning and it's a problem if you want

00:35:25,520 --> 00:35:30,410
to do a release because if you if you

00:35:27,410 --> 00:35:32,750
just say today let's release then you

00:35:30,410 --> 00:35:37,809
see where some projects are finished but

00:35:32,750 --> 00:35:40,700
some of them are very unstable and

00:35:37,809 --> 00:35:44,299
that's that basically what happened in

00:35:40,700 --> 00:35:46,490
those projects releases were announced

00:35:44,299 --> 00:35:48,890
out of the blue there was no plan it was

00:35:46,490 --> 00:35:51,740
simply the realist manager well I think

00:35:48,890 --> 00:35:54,230
it's time to make a lot of release let's

00:35:51,740 --> 00:35:56,720
do it and then people said well but I'm

00:35:54,230 --> 00:35:59,119
not ready I need another five months and

00:35:56,720 --> 00:36:01,760
there were delays everyone tried to get

00:35:59,119 --> 00:36:04,039
their fridge in because of those delays

00:36:01,760 --> 00:36:05,900
people weren't sure when the next

00:36:04,039 --> 00:36:08,359
release would be might be three years

00:36:05,900 --> 00:36:12,020
away so I really need to get my feature

00:36:08,359 --> 00:36:13,279
now you've seen that in in debian you've

00:36:12,020 --> 00:36:16,579
seen that in the lunas currently

00:36:13,279 --> 00:36:18,920
considered everywhere so what's the

00:36:16,579 --> 00:36:21,559
solution for that problem how do you get

00:36:18,920 --> 00:36:26,410
all of those individual developers to be

00:36:21,559 --> 00:36:28,859
ready at the same time automatically and

00:36:26,410 --> 00:36:31,930
the answer is time-based releases

00:36:28,859 --> 00:36:33,789
instead of of saying we will release

00:36:31,930 --> 00:36:35,920
when those features have been

00:36:33,789 --> 00:36:39,280
implemented or when everything is ready

00:36:35,920 --> 00:36:42,520
I mean that just doesn't work if you

00:36:39,280 --> 00:36:45,549
have hundreds of people with different

00:36:42,520 --> 00:36:47,770
features they want to get in you just

00:36:45,549 --> 00:36:49,930
need so instead of saying we release

00:36:47,770 --> 00:36:53,190
when those features already you simply

00:36:49,930 --> 00:36:56,380
say we release on this particular date

00:36:53,190 --> 00:36:58,539
everything that is finished two months

00:36:56,380 --> 00:37:00,579
before that date will be included

00:36:58,539 --> 00:37:04,329
everything else you have to wait for the

00:37:00,579 --> 00:37:07,510
next release and and that basically

00:37:04,329 --> 00:37:10,089
allows people to work on their own

00:37:07,510 --> 00:37:12,039
features very independently and then if

00:37:10,089 --> 00:37:14,140
they are ready they can simply come back

00:37:12,039 --> 00:37:16,960
integrate it in time if they're not

00:37:14,140 --> 00:37:20,970
ready they know the next release is only

00:37:16,960 --> 00:37:23,500
going to be so far away so there are two

00:37:20,970 --> 00:37:27,369
misconceptions about about time-based

00:37:23,500 --> 00:37:29,770
releases first of all time based

00:37:27,369 --> 00:37:32,470
releases doesn't mean you have to

00:37:29,770 --> 00:37:34,869
release on that date no matter what I

00:37:32,470 --> 00:37:37,539
mean if the development is broken if

00:37:34,869 --> 00:37:40,299
there are security issues please wait

00:37:37,539 --> 00:37:42,670
and fix those issues it's just about

00:37:40,299 --> 00:37:48,760
what is your guideline for making

00:37:42,670 --> 00:37:51,430
releases the other thing is you still

00:37:48,760 --> 00:37:53,140
should plan for features planning for

00:37:51,430 --> 00:37:55,539
features is good because it means more

00:37:53,140 --> 00:37:57,579
work gets done if you just say well

00:37:55,539 --> 00:37:59,670
there will be a release so i can i can

00:37:57,579 --> 00:38:03,130
sit back and relax nothing will happen

00:37:59,670 --> 00:38:05,410
so you should plan for features but just

00:38:03,130 --> 00:38:10,510
don't delay the release if those

00:38:05,410 --> 00:38:12,760
features are not ready so what kind of

00:38:10,510 --> 00:38:15,339
conditions are necessary for project to

00:38:12,760 --> 00:38:17,619
implement time-based releases time-based

00:38:15,339 --> 00:38:20,799
releases I think it's great but it's

00:38:17,619 --> 00:38:24,099
definitely not for for every project in

00:38:20,799 --> 00:38:26,589
fact it's only for a minority of

00:38:24,099 --> 00:38:29,470
projects I think for example it only

00:38:26,589 --> 00:38:33,539
works for large projects and the reason

00:38:29,470 --> 00:38:37,990
is the first point here you really need

00:38:33,539 --> 00:38:39,790
enough work during one interval if you

00:38:37,990 --> 00:38:42,370
have a very small project

00:38:39,790 --> 00:38:43,900
nothing gets done in six months well why

00:38:42,370 --> 00:38:46,870
should you make you release every six

00:38:43,900 --> 00:38:48,910
months there is no reason but if you

00:38:46,870 --> 00:38:51,160
have a large project with hundreds of

00:38:48,910 --> 00:38:53,910
people there is so much stuff going on

00:38:51,160 --> 00:38:56,830
so many new features so many bug fixes

00:38:53,910 --> 00:39:01,060
that yes it makes sense to do regular

00:38:56,830 --> 00:39:04,690
releases another thing is distribution

00:39:01,060 --> 00:39:06,940
has to be cheap because if you if you

00:39:04,690 --> 00:39:09,400
release regular releases United you need

00:39:06,940 --> 00:39:12,460
to get them to users so if you would

00:39:09,400 --> 00:39:14,440
rely on publishing CDs in a shop you

00:39:12,460 --> 00:39:17,230
couldn't do a release every six months

00:39:14,440 --> 00:39:19,270
fortunately free software we have the

00:39:17,230 --> 00:39:22,090
internet distribution is cheap that's

00:39:19,270 --> 00:39:26,950
not a problem the other thing is that

00:39:22,090 --> 00:39:29,350
releases don't require any specific

00:39:26,950 --> 00:39:32,860
functionality which again is true in

00:39:29,350 --> 00:39:34,690
most free software projects but it can

00:39:32,860 --> 00:39:37,180
be a problem in commercial open source

00:39:34,690 --> 00:39:39,130
where you actually promised the customer

00:39:37,180 --> 00:39:44,380
that that release will have those

00:39:39,130 --> 00:39:47,230
features and the last point is that the

00:39:44,380 --> 00:39:52,000
project has to be modular and that's

00:39:47,230 --> 00:39:54,480
because if everything is is is tied

00:39:52,000 --> 00:39:57,850
together then if you have one problem

00:39:54,480 --> 00:40:00,580
you can't release anything but if it's

00:39:57,850 --> 00:40:02,080
modular you can simply ignore some

00:40:00,580 --> 00:40:06,240
things which are not ready on that

00:40:02,080 --> 00:40:06,240
release date or you can revert them back

00:40:08,400 --> 00:40:16,000
so basically my argument of why

00:40:12,760 --> 00:40:20,740
time-based releases work is that they

00:40:16,000 --> 00:40:22,150
act as a coordination mechanism they

00:40:20,740 --> 00:40:24,880
have two things which act as

00:40:22,150 --> 00:40:28,570
coordination mechanisms regularity and

00:40:24,880 --> 00:40:32,590
the use of a schedule so regularity has

00:40:28,570 --> 00:40:37,870
free positive aspects it creates a

00:40:32,590 --> 00:40:39,460
reference point so essentially what I

00:40:37,870 --> 00:40:41,980
said before is you have all those

00:40:39,460 --> 00:40:44,770
developers doing their own work very

00:40:41,980 --> 00:40:47,970
independently without necessarily having

00:40:44,770 --> 00:40:47,970
to talk with each other

00:40:49,890 --> 00:40:56,080
and that's good but there are always

00:40:53,500 --> 00:40:58,810
changes which are related to your

00:40:56,080 --> 00:41:01,390
changes so you need to go back from time

00:40:58,810 --> 00:41:03,580
to time and and say okay so here are the

00:41:01,390 --> 00:41:05,740
changes I made World War what's going on

00:41:03,580 --> 00:41:07,990
in the rest of the project you need to

00:41:05,740 --> 00:41:10,360
know what's going on and and having a

00:41:07,990 --> 00:41:13,030
regular releases creates that reference

00:41:10,360 --> 00:41:15,820
point so you create a reference point

00:41:13,030 --> 00:41:18,220
everyone knows that's the official tree

00:41:15,820 --> 00:41:21,100
that's where we are and then everyone

00:41:18,220 --> 00:41:23,500
else everyone again goes off does her

00:41:21,100 --> 00:41:25,990
own little thing and then six months or

00:41:23,500 --> 00:41:28,240
nine months or whatever later they come

00:41:25,990 --> 00:41:30,670
back and say well what world what has

00:41:28,240 --> 00:41:33,130
happened the other thing is that

00:41:30,670 --> 00:41:35,830
regularity creates discipline and self

00:41:33,130 --> 00:41:37,960
restraint as I said before because of

00:41:35,830 --> 00:41:40,450
those long release cycles and those

00:41:37,960 --> 00:41:43,000
delays people really wanted to get their

00:41:40,450 --> 00:41:44,920
features in if I don't get it in now it

00:41:43,000 --> 00:41:48,190
might be three years I need to get it in

00:41:44,920 --> 00:41:50,830
and that causes delays but if you have a

00:41:48,190 --> 00:41:54,040
regular release cycle people know there

00:41:50,830 --> 00:41:57,130
will be a release again if I don't make

00:41:54,040 --> 00:42:01,060
this one it's only going to be 6 9 12

00:41:57,130 --> 00:42:04,540
months whatever then people can say well

00:42:01,060 --> 00:42:06,370
ok I will really get it done properly I

00:42:04,540 --> 00:42:10,030
will test it and then just make it for

00:42:06,370 --> 00:42:12,610
the next release and the next thing last

00:42:10,030 --> 00:42:14,830
thing is familiarity one problem with

00:42:12,610 --> 00:42:17,530
doing release is only free every three

00:42:14,830 --> 00:42:19,390
years is that people just unfamiliar

00:42:17,530 --> 00:42:21,430
with it it's not part of their

00:42:19,390 --> 00:42:23,020
development process it's something you

00:42:21,430 --> 00:42:25,240
you do sometimes you don't have

00:42:23,020 --> 00:42:27,610
experience with maybe you don't like it

00:42:25,240 --> 00:42:29,650
but if you do it every six months it's

00:42:27,610 --> 00:42:33,280
just a standard practice lie like you

00:42:29,650 --> 00:42:36,280
know brushing your teeth before going to

00:42:33,280 --> 00:42:39,430
sleep you use simply integrated it's

00:42:36,280 --> 00:42:41,320
normal and you get experience with it

00:42:39,430 --> 00:42:44,620
the other thing is that the use of a

00:42:41,320 --> 00:42:47,020
schedule as i said before allows people

00:42:44,620 --> 00:42:49,600
to do that work independently so what

00:42:47,020 --> 00:42:52,000
happened before when no one really knew

00:42:49,600 --> 00:42:55,030
what was going on there are always

00:42:52,000 --> 00:42:57,460
dependencies a translator can only do

00:42:55,030 --> 00:42:59,170
their work when the documentation is

00:42:57,460 --> 00:43:01,210
done you can only write an application

00:42:59,170 --> 00:43:02,930
when the libraries are stable when

00:43:01,210 --> 00:43:04,910
interfaces are stable

00:43:02,930 --> 00:43:06,589
what happened when no one knew what was

00:43:04,910 --> 00:43:08,960
going on is that people always had to

00:43:06,589 --> 00:43:10,970
talk to each other and there to talk to

00:43:08,960 --> 00:43:13,700
release manager so how long is it going

00:43:10,970 --> 00:43:16,849
to take when can I start and and that's

00:43:13,700 --> 00:43:20,599
coordination and that's expensive on the

00:43:16,849 --> 00:43:22,819
internet but what the schedule allows

00:43:20,599 --> 00:43:25,579
you to do it allows you to put that

00:43:22,819 --> 00:43:27,980
information into the schedule give

00:43:25,579 --> 00:43:30,829
people that schedule they can take it

00:43:27,980 --> 00:43:33,020
and work independently and no oh ho on

00:43:30,829 --> 00:43:35,119
this date I have to be done and ideally

00:43:33,020 --> 00:43:37,670
they will come back on this date and

00:43:35,119 --> 00:43:40,809
it's done and then the next person can

00:43:37,670 --> 00:43:43,309
can simply do their work so it reduces

00:43:40,809 --> 00:43:47,329
that active coordination which is

00:43:43,309 --> 00:43:49,069
expensive so what are the incentives for

00:43:47,329 --> 00:43:51,880
time-based releases and again that's

00:43:49,069 --> 00:43:54,589
beautiful because it's good for everyone

00:43:51,880 --> 00:43:57,290
I've listed for different stakeholders

00:43:54,589 --> 00:44:01,040
there are organizations what Google if

00:43:57,290 --> 00:44:03,170
you have to upgrade 10,000 machines you

00:44:01,040 --> 00:44:04,550
really need to know you need to plan you

00:44:03,170 --> 00:44:06,950
need to know when the release will be

00:44:04,550 --> 00:44:09,680
out and and time-based releases gives

00:44:06,950 --> 00:44:14,510
that predictability for users it's great

00:44:09,680 --> 00:44:16,160
because they get periodical fixes they

00:44:14,510 --> 00:44:19,220
don't have to wait three years for that

00:44:16,160 --> 00:44:23,390
the issue to be fixed ideally they will

00:44:19,220 --> 00:44:25,549
get it after six months and it means

00:44:23,390 --> 00:44:27,589
that the upgrades are much easier you

00:44:25,549 --> 00:44:29,690
don't have that big bang release which

00:44:27,589 --> 00:44:32,589
changes everything you just have smooth

00:44:29,690 --> 00:44:35,150
upgrades every once in a while for

00:44:32,589 --> 00:44:37,309
developers it's good because they know

00:44:35,150 --> 00:44:43,160
when they have to cut the coding in

00:44:37,309 --> 00:44:44,839
order to make the release end the other

00:44:43,160 --> 00:44:46,670
thing is that their work actually gets

00:44:44,839 --> 00:44:49,849
to people they don't have to wait three

00:44:46,670 --> 00:44:51,680
years and for when does it's good

00:44:49,849 --> 00:44:53,510
because they can plan and it can

00:44:51,680 --> 00:44:56,510
actually work with the community they

00:44:53,510 --> 00:45:02,119
can work on one code base instead of

00:44:56,510 --> 00:45:04,790
everyone doing their own thing so some

00:45:02,119 --> 00:45:07,309
specific advantages for developers and I

00:45:04,790 --> 00:45:09,799
think those only some of them so it

00:45:07,309 --> 00:45:12,890
creates discipline but not discipline in

00:45:09,799 --> 00:45:15,020
like that- bureaucratic way that oh god

00:45:12,890 --> 00:45:16,460
I have to fill out ten pages of papers

00:45:15,020 --> 00:45:17,510
before I can do anything

00:45:16,460 --> 00:45:20,960
it just makes the whole development

00:45:17,510 --> 00:45:23,150
process more structured and people know

00:45:20,960 --> 00:45:25,250
what's going on it allows better

00:45:23,150 --> 00:45:28,310
planning you know when you have to get

00:45:25,250 --> 00:45:31,970
your features in it creates better

00:45:28,310 --> 00:45:33,830
feedback because you your users you have

00:45:31,970 --> 00:45:37,099
a much tighter feedback loop with your

00:45:33,830 --> 00:45:40,490
users and that makes users happy they

00:45:37,099 --> 00:45:42,080
see oh yes we're getting fixes so they

00:45:40,490 --> 00:45:44,330
might send you really good bug report

00:45:42,080 --> 00:45:46,760
and the other thing is that it really

00:45:44,330 --> 00:45:49,640
increases developer motivation yes you

00:45:46,760 --> 00:45:54,230
get your coat out if you look at the sum

00:45:49,640 --> 00:45:56,450
of code and if a student is involved in

00:45:54,230 --> 00:45:59,150
a project which really is only only

00:45:56,450 --> 00:46:01,790
three years and they make something this

00:45:59,150 --> 00:46:04,070
summer they contributed and then they

00:46:01,790 --> 00:46:06,320
can only tell you know their friends

00:46:04,070 --> 00:46:09,890
after three years or and here's the CD

00:46:06,320 --> 00:46:11,900
here is my contribution but with with

00:46:09,890 --> 00:46:14,390
regular releases they can do it in in

00:46:11,900 --> 00:46:22,010
three or six months and say here is what

00:46:14,390 --> 00:46:24,200
I did it's cool I won't do it again so

00:46:22,010 --> 00:46:26,420
if if projects want to move to

00:46:24,200 --> 00:46:28,400
time-based releases you need to decide

00:46:26,420 --> 00:46:30,440
what kind of release interval is good

00:46:28,400 --> 00:46:32,200
for me should I release every six months

00:46:30,440 --> 00:46:38,839
every three months every nine months

00:46:32,200 --> 00:46:40,880
every year and there are a couple of

00:46:38,839 --> 00:46:43,700
things which should be considered one of

00:46:40,880 --> 00:46:45,890
them is regularity and predictability if

00:46:43,700 --> 00:46:47,990
you look at time-based the definition

00:46:45,890 --> 00:46:51,230
you don't have to have the same interval

00:46:47,990 --> 00:46:54,080
all the time you could say now we make

00:46:51,230 --> 00:46:56,210
release in six months and then we make

00:46:54,080 --> 00:46:58,160
release in nine months and then maybe in

00:46:56,210 --> 00:47:05,720
green three months but I think it's very

00:46:58,160 --> 00:47:07,490
good to have dead regularity then there

00:47:05,720 --> 00:47:10,339
are user requirements and it might

00:47:07,490 --> 00:47:13,490
depend on your software is it mostly for

00:47:10,339 --> 00:47:14,930
servers is it mostly for desktop users

00:47:13,490 --> 00:47:18,890
on servers you might have a slower

00:47:14,930 --> 00:47:22,460
release cycle then then desktop software

00:47:18,890 --> 00:47:23,839
or maybe not there are some commercial

00:47:22,460 --> 00:47:26,780
interests which are really important

00:47:23,839 --> 00:47:29,720
like one issue when openoffice moved to

00:47:26,780 --> 00:47:30,350
three months was book offers they want

00:47:29,720 --> 00:47:32,900
to write books

00:47:30,350 --> 00:47:35,270
about amor phase but if there is a new

00:47:32,900 --> 00:47:37,070
release every three months your book

00:47:35,270 --> 00:47:39,770
will be out of date before it actually

00:47:37,070 --> 00:47:42,410
gets to the market and and book or

00:47:39,770 --> 00:47:45,080
offers actually reemployed because they

00:47:42,410 --> 00:47:47,120
build bridges between the user community

00:47:45,080 --> 00:47:49,070
and the development community and that

00:47:47,120 --> 00:47:50,930
there are many commercial interests

00:47:49,070 --> 00:47:52,430
which really benefit your development

00:47:50,930 --> 00:47:55,600
and which you should take into

00:47:52,430 --> 00:47:58,100
consideration another thing is that

00:47:55,600 --> 00:48:02,540
there are various cost factors with

00:47:58,100 --> 00:48:06,440
making releases releases cost time they

00:48:02,540 --> 00:48:07,940
cause they they take resources for

00:48:06,440 --> 00:48:10,370
example you need to support all the

00:48:07,940 --> 00:48:12,800
releases so if you have frequent

00:48:10,370 --> 00:48:15,800
releases you have more older releases

00:48:12,800 --> 00:48:17,780
which you may have to support I know

00:48:15,800 --> 00:48:20,810
open source projects are pretty bad with

00:48:17,780 --> 00:48:22,810
doing that and more frequent releases

00:48:20,810 --> 00:48:26,390
probably make the situation even worse

00:48:22,810 --> 00:48:28,610
and then you have some fixed costs you

00:48:26,390 --> 00:48:30,440
need to test your software you need to

00:48:28,610 --> 00:48:33,920
actually prepare it you need to write

00:48:30,440 --> 00:48:37,070
announcements and things like that there

00:48:33,920 --> 00:48:39,920
might be confusion among users oh I just

00:48:37,070 --> 00:48:42,020
upgraded to that new version but I see

00:48:39,920 --> 00:48:43,810
that I went to the website and I saw

00:48:42,020 --> 00:48:46,430
that there is a new version out already

00:48:43,810 --> 00:48:49,460
sorry it takes a while to get into

00:48:46,430 --> 00:48:51,680
distribution so by the time it reaches

00:48:49,460 --> 00:48:54,800
users there might be a new upstream

00:48:51,680 --> 00:48:57,200
release already it might cause

00:48:54,800 --> 00:48:58,850
fragmentation of users if everyone's

00:48:57,200 --> 00:49:01,160
using the same thing is really easy to

00:48:58,850 --> 00:49:02,870
track box but if people are using many

00:49:01,160 --> 00:49:05,200
different versions it's much harder and

00:49:02,870 --> 00:49:08,420
there are upgrade costs as well

00:49:05,200 --> 00:49:11,030
upgrading you can't upgrade every day it

00:49:08,420 --> 00:49:12,530
takes time you have to download it and

00:49:11,030 --> 00:49:15,200
you have to look at it if something

00:49:12,530 --> 00:49:18,110
breaks and then a really important

00:49:15,200 --> 00:49:22,400
network effects working with other

00:49:18,110 --> 00:49:26,030
projects so one reason why soap moved to

00:49:22,400 --> 00:49:29,660
six month leases or trying to emplome

00:49:26,030 --> 00:49:32,540
sorry the plum project one reason was

00:49:29,660 --> 00:49:35,570
because they want to to have the same

00:49:32,540 --> 00:49:38,270
release cycle as soap so that they build

00:49:35,570 --> 00:49:40,850
upon soap and they said well if we have

00:49:38,270 --> 00:49:44,369
the same release cycle we can use all of

00:49:40,850 --> 00:49:47,700
those new features from soap in plum

00:49:44,369 --> 00:49:50,039
and it's really interesting it's a good

00:49:47,700 --> 00:49:53,099
point there are also many dangers

00:49:50,039 --> 00:49:55,619
because if soap is delayed and plone

00:49:53,099 --> 00:49:57,930
uses all of those new features you can't

00:49:55,619 --> 00:49:59,359
ship the new version of clone either so

00:49:57,930 --> 00:50:03,180
that's something you have to consider

00:49:59,359 --> 00:50:04,920
the other finger distributions open

00:50:03,180 --> 00:50:07,410
source projects really benefit from

00:50:04,920 --> 00:50:10,410
being in a distro because that's what

00:50:07,410 --> 00:50:12,480
users use and if you if you have a

00:50:10,410 --> 00:50:14,940
similar release cycle the distro it

00:50:12,480 --> 00:50:18,480
means that your latest software gets out

00:50:14,940 --> 00:50:20,249
to users much more quickly so when I

00:50:18,480 --> 00:50:22,319
show the picture before about the

00:50:20,249 --> 00:50:23,849
projects and their release cycles you

00:50:22,319 --> 00:50:26,249
saw that many of them are doing six

00:50:23,849 --> 00:50:29,999
months and I think there is a good

00:50:26,249 --> 00:50:32,730
reason for that first of all it's it's a

00:50:29,999 --> 00:50:36,690
reason of regularity if you have seven

00:50:32,730 --> 00:50:39,749
months what happens if is that your

00:50:36,690 --> 00:50:41,960
schedule own or always slips on the year

00:50:39,749 --> 00:50:45,569
sometimes you might have a release

00:50:41,960 --> 00:50:48,029
during Christmas and it's bad thing

00:50:45,569 --> 00:50:50,069
because your people aren't there to

00:50:48,029 --> 00:50:52,559
actually do the work and having six

00:50:50,069 --> 00:50:56,730
months means it's always the same it's

00:50:52,559 --> 00:50:58,920
always a little march in September you

00:50:56,730 --> 00:51:01,079
just know it's always going to be the

00:50:58,920 --> 00:51:04,650
same and it makes life so much simpler

00:51:01,079 --> 00:51:07,769
the other thing is having all those

00:51:04,650 --> 00:51:11,009
projects having the same release cycle

00:51:07,769 --> 00:51:15,630
so six months promotes those Network

00:51:11,009 --> 00:51:17,599
effects which I mentioned so the

00:51:15,630 --> 00:51:20,339
question is where we are a large project

00:51:17,599 --> 00:51:22,410
how do I actually move to a new release

00:51:20,339 --> 00:51:25,829
strategy it's not easy to do that it's

00:51:22,410 --> 00:51:27,809
very hard and and as you can see in the

00:51:25,829 --> 00:51:30,569
projects which are discussed not all of

00:51:27,809 --> 00:51:34,980
them are successful with the

00:51:30,569 --> 00:51:37,109
implementation I still working on it so

00:51:34,980 --> 00:51:40,200
there must be there must be really good

00:51:37,109 --> 00:51:42,119
incentives to actually change you must

00:51:40,200 --> 00:51:44,730
have real problems with your current

00:51:42,119 --> 00:51:47,099
release strategy and the projects which

00:51:44,730 --> 00:51:49,859
I which I looked at all had those

00:51:47,099 --> 00:51:52,200
problems and then it's it's also a

00:51:49,859 --> 00:51:54,900
matter of control and Trust in some

00:51:52,200 --> 00:51:58,030
projects it's basically the leader says

00:51:54,900 --> 00:51:59,950
we will do this and it's okay it will

00:51:58,030 --> 00:52:02,230
done there are other projects where you

00:51:59,950 --> 00:52:06,010
need agreement from many people to make

00:52:02,230 --> 00:52:08,560
those changes and you need to really

00:52:06,010 --> 00:52:10,350
introduce policies like I said before

00:52:08,560 --> 00:52:13,210
you need you need to make sure that the

00:52:10,350 --> 00:52:15,250
that the development is tree stable

00:52:13,210 --> 00:52:19,650
because if it's not stable you can't

00:52:15,250 --> 00:52:24,130
make time-based releases you you can

00:52:19,650 --> 00:52:26,110
implement structures or policies to make

00:52:24,130 --> 00:52:28,060
your development more structured like

00:52:26,110 --> 00:52:31,840
some projects have feature proposals

00:52:28,060 --> 00:52:35,770
where before committing a feature you

00:52:31,840 --> 00:52:37,930
have to break it up and have a plan GCC

00:52:35,770 --> 00:52:39,520
does that plone does that number of

00:52:37,930 --> 00:52:42,190
projects do that and it's not

00:52:39,520 --> 00:52:44,710
bureaucratic it's actually many people

00:52:42,190 --> 00:52:47,470
see it as good because you know what's

00:52:44,710 --> 00:52:50,860
what's going to happen and you have some

00:52:47,470 --> 00:52:53,890
some kind of target and yeah defining my

00:52:50,860 --> 00:52:55,600
stones and deadlines is a good thing the

00:52:53,890 --> 00:52:59,740
other thing is coordination and

00:52:55,600 --> 00:53:02,380
collaboration you really need to talk

00:52:59,740 --> 00:53:04,420
about the release not sending release

00:53:02,380 --> 00:53:06,430
updates is really horrible you need to

00:53:04,420 --> 00:53:08,830
send updates you need to be available as

00:53:06,430 --> 00:53:10,960
release manager and that's the last

00:53:08,830 --> 00:53:13,510
point that you really need to actively

00:53:10,960 --> 00:53:15,700
coordinate as a release manager you

00:53:13,510 --> 00:53:18,250
can't just say oh let's publish that

00:53:15,700 --> 00:53:20,530
that schedule and we will assume

00:53:18,250 --> 00:53:23,230
everyone will follow it and which is do

00:53:20,530 --> 00:53:25,690
their work you still need to actively

00:53:23,230 --> 00:53:32,590
tell people and now the deadline is

00:53:25,690 --> 00:53:35,650
approaching please be ready so coming to

00:53:32,590 --> 00:53:39,790
the end what are the conclusions of that

00:53:35,650 --> 00:53:43,150
work so i think what about i've shown is

00:53:39,790 --> 00:53:46,540
that some of those projects have reacted

00:53:43,150 --> 00:53:50,620
to those problems and to other changes

00:53:46,540 --> 00:53:52,690
mmm so I think what happens in many

00:53:50,620 --> 00:53:55,240
projects is they start off very small

00:53:52,690 --> 00:53:58,090
and and if you're very small if you have

00:53:55,240 --> 00:54:00,220
two people you don't need a big release

00:53:58,090 --> 00:54:02,350
process you just talk to each other make

00:54:00,220 --> 00:54:05,080
the release but if you suddenly have a

00:54:02,350 --> 00:54:07,570
thousand of people the same thing

00:54:05,080 --> 00:54:09,970
doesn't happen doesn't work you need you

00:54:07,570 --> 00:54:11,030
need a different release strategy and I

00:54:09,970 --> 00:54:14,570
think it

00:54:11,030 --> 00:54:16,790
it's it's sort of natural s project

00:54:14,570 --> 00:54:20,480
become large to move to time-based

00:54:16,790 --> 00:54:23,870
releases something they have adapted to

00:54:20,480 --> 00:54:26,050
their growth and the other thing is that

00:54:23,870 --> 00:54:28,670
they might have adapted to the users

00:54:26,050 --> 00:54:30,680
because now open source is used much

00:54:28,670 --> 00:54:34,100
more by companies which need that

00:54:30,680 --> 00:54:38,210
predictability something time-based

00:54:34,100 --> 00:54:43,130
really releases are good solution to to

00:54:38,210 --> 00:54:45,050
adapt to grove and and those users as i

00:54:43,130 --> 00:54:47,900
argued i believe that time based

00:54:45,050 --> 00:54:51,200
releases work because they write rely on

00:54:47,900 --> 00:54:53,150
to coordination mechanisms which which

00:54:51,200 --> 00:54:56,450
make life so much easier than having to

00:54:53,150 --> 00:55:00,040
actively coordinate everything as i said

00:54:56,450 --> 00:55:03,710
regularity and the use of schedules and

00:55:00,040 --> 00:55:06,640
as i said initially i defined volunteers

00:55:03,710 --> 00:55:09,830
as whether you have control over them

00:55:06,640 --> 00:55:12,080
and it's that's important because in a

00:55:09,830 --> 00:55:15,440
volunteer project you can't tell people

00:55:12,080 --> 00:55:17,270
what to do so you can't be sure that any

00:55:15,440 --> 00:55:20,090
feature will actually be done on time

00:55:17,270 --> 00:55:23,690
the only thing you can do is you can set

00:55:20,090 --> 00:55:25,910
a deadline a time a target date and and

00:55:23,690 --> 00:55:27,970
include everything that's ready so what

00:55:25,910 --> 00:55:30,800
I have shown in that research is that

00:55:27,970 --> 00:55:33,410
using time rather than features is a

00:55:30,800 --> 00:55:35,060
really good way to coordinate volunteer

00:55:33,410 --> 00:55:39,080
project in which you have little control

00:55:35,060 --> 00:55:40,700
and the next question is well what kind

00:55:39,080 --> 00:55:44,600
of other volunteer projects are there

00:55:40,700 --> 00:55:47,060
and do similar things apply to them I I

00:55:44,600 --> 00:55:49,880
strongly believe that free software open

00:55:47,060 --> 00:55:52,310
source what we are learning here about

00:55:49,880 --> 00:55:55,490
the methodology about how to work

00:55:52,310 --> 00:55:58,040
together how to to collaborate over the

00:55:55,490 --> 00:56:00,560
internet with volunteers is something

00:55:58,040 --> 00:56:03,050
which will see which we will see in many

00:56:00,560 --> 00:56:05,510
other different areas as well I mean

00:56:03,050 --> 00:56:07,940
there are people sharing cooking recipes

00:56:05,510 --> 00:56:11,360
and stuff like that but there are lots

00:56:07,940 --> 00:56:14,360
of people who want to you know modify

00:56:11,360 --> 00:56:16,250
their cars and the only reason they they

00:56:14,360 --> 00:56:18,440
can't do that as much as we can do with

00:56:16,250 --> 00:56:21,860
free software is because our production

00:56:18,440 --> 00:56:24,750
machinery is like a PC it's very very

00:56:21,860 --> 00:56:26,490
cheap but with building a car

00:56:24,750 --> 00:56:28,980
you need is really expensive you can't

00:56:26,490 --> 00:56:31,350
just do that in you know at home but I

00:56:28,980 --> 00:56:35,370
think in the future that's going to be

00:56:31,350 --> 00:56:37,590
much much more easily available and much

00:56:35,370 --> 00:56:39,270
much more cheaper so I think we will see

00:56:37,590 --> 00:56:40,830
much more collaboration over the

00:56:39,270 --> 00:56:42,980
internet and I think what we're learning

00:56:40,830 --> 00:56:45,720
here is really important for them and

00:56:42,980 --> 00:56:49,740
release management time-based releases

00:56:45,720 --> 00:56:54,330
are is really important so for people

00:56:49,740 --> 00:56:57,390
who are interested I I have my whole PhD

00:56:54,330 --> 00:57:00,180
theses on the web and I recently started

00:56:57,390 --> 00:57:02,190
blogging about some of the results so

00:57:00,180 --> 00:57:04,440
you don't have to read the whole 200

00:57:02,190 --> 00:57:06,930
pages so that's a way to blow on my

00:57:04,440 --> 00:57:10,560
website I can also be contacted and

00:57:06,930 --> 00:57:17,310
obviously now I'm happy to answer any

00:57:10,560 --> 00:57:20,190
questions you might have yeah so again

00:57:17,310 --> 00:57:22,760
using the Venus example and a lot of the

00:57:20,190 --> 00:57:25,920
problems i saw that release slipping was

00:57:22,760 --> 00:57:30,090
small but very important segments of the

00:57:25,920 --> 00:57:32,550
project were delayed and i'm just

00:57:30,090 --> 00:57:33,990
wondering if that's a common like if

00:57:32,550 --> 00:57:35,610
there are common if it's common to other

00:57:33,990 --> 00:57:38,220
projects where there's a small but like

00:57:35,610 --> 00:57:40,110
very small but extremely important part

00:57:38,220 --> 00:57:42,450
of the project is blocking the entire

00:57:40,110 --> 00:57:44,070
the rest of the release mm-hmm and what

00:57:42,450 --> 00:57:46,230
kind of things and maybe can be done

00:57:44,070 --> 00:57:49,770
about that celebration so the question

00:57:46,230 --> 00:57:52,260
is in debian universe release it seemed

00:57:49,770 --> 00:57:53,880
that there were very small but very

00:57:52,260 --> 00:57:55,770
important areas that were blocking the

00:57:53,880 --> 00:57:59,550
release and whether that's the same in

00:57:55,770 --> 00:58:01,440
other projects i think it does happen

00:57:59,550 --> 00:58:03,960
but i don't think it's such a big

00:58:01,440 --> 00:58:07,710
problem in other projects so if you look

00:58:03,960 --> 00:58:09,960
at GCC well maybe yes it depends on how

00:58:07,710 --> 00:58:12,870
you see it on cheesy see the problem is

00:58:09,960 --> 00:58:14,340
that there are a number of pretty I mean

00:58:12,870 --> 00:58:16,620
there aren't many but there are a number

00:58:14,340 --> 00:58:18,630
of regressions and basically no one does

00:58:16,620 --> 00:58:21,060
anything about them I guess the

00:58:18,630 --> 00:58:23,760
difference with GCC is that it's not so

00:58:21,060 --> 00:58:27,180
clear who should fix those bugs whereas

00:58:23,760 --> 00:58:30,090
in debian it was very clear i think who

00:58:27,180 --> 00:58:35,990
was responsible for those areas or at

00:58:30,090 --> 00:58:37,839
work didn't get done so i i i think that

00:58:35,990 --> 00:58:41,170
debian

00:58:37,839 --> 00:58:43,569
even though it defined targets it tried

00:58:41,170 --> 00:58:46,180
to look at the blockers I think that the

00:58:43,569 --> 00:58:48,519
release team wasn't strong enough we're

00:58:46,180 --> 00:58:50,349
following up with those people to make

00:58:48,519 --> 00:58:53,890
sure that those brokers actually get

00:58:50,349 --> 00:58:55,569
resolved so for me it was pretty clear

00:58:53,890 --> 00:58:57,880
that we would have to wait for the

00:58:55,569 --> 00:59:01,739
colonel but no one did anything about it

00:58:57,880 --> 00:59:05,140
I think you could really see it coming

00:59:01,739 --> 00:59:06,819
so I think that something an example of

00:59:05,140 --> 00:59:08,950
where the the release team has to be

00:59:06,819 --> 00:59:17,410
more active where you really need to

00:59:08,950 --> 00:59:19,739
tell people you have to be done anything

00:59:17,410 --> 00:59:19,739
else

00:59:21,580 --> 00:59:26,710
okay thanks for coming and if you do

00:59:24,670 --> 00:59:29,530
have any questions I'll be around today

00:59:26,710 --> 00:59:33,180
and you can email me my email address is

00:59:29,530 --> 00:59:33,180

YouTube URL: https://www.youtube.com/watch?v=RwpOxX_2Shw


