Title: Massively Multiplayer Open Source Game Development
Publication date: 2010-10-27
Playlist: Open Source Google Tech Talks
Description: 
	Google Tech Talks
October 16, 2008

ABSTRACT

An MMORPG project is challenging for any development team, let alone a distributed team of "amateur" volunteers. This talk will explore the internal design of the FOSS MMO project called PlaneShift, and how that design was influenced by the strengths and weaknesses of the team structure and the community. Topics will include server design, network topology, NPC AI and management and player security, among others.

Speaker: Keith Fulton
Keith Fulton is the CTO at ChoicePay, Inc. in Tulsa, Oklahoma which is an electronic payments company. In his spare time, he has been the principal architect on the PlaneShift project since 2001, along with dozens of other contributors. PlaneShift has over 500,000 registered accounts and maintains a small, tight-knit community of players, fans and developers. The game is entirely written in C++ under the GPL.
Captions: 
	00:00:22,840 --> 00:00:24,210
>> Welcome to the Tech Talk.

00:00:24,210 --> 00:00:31,390
Today, Keith is going to talk about Multiplayer Open Source Online Role-Playing Game or [INDISTINCT]

00:00:31,390 --> 00:00:32,540
called PlaneShift.

00:00:32,540 --> 00:00:38,940
Keith has been with the project since 2001 and he's currently--he's the CTO of ChoicePay

00:00:38,940 --> 00:00:39,940
as well.

00:00:39,940 --> 00:00:41,290
So, [INDISTINCT] Keith.

00:00:41,290 --> 00:00:42,700
>> FULTON: Thanks, Andrew.

00:00:42,700 --> 00:00:43,700
Hi everybody.

00:00:43,700 --> 00:00:45,420
I'm glad to be here today.

00:00:45,420 --> 00:00:48,640
I'll first talk about--and I'll just try to introduce PlaneShift for those of you.

00:00:48,640 --> 00:00:52,420
How many in here have heard of PlaneShift before or have seen it?

00:00:52,420 --> 00:00:54,550
Okay, a few of you.

00:00:54,550 --> 00:00:55,829
Well, that's good.

00:00:55,829 --> 00:01:02,030
You know, PlaneShift has been around for a long time and has been a very ambitious project.

00:01:02,030 --> 00:01:07,790
We're trying to build an MMO in the--in the same type of [INDISTINCT] as World of Warcraft,

00:01:07,790 --> 00:01:11,540
or EverQuest, or Age of Conan, or a million of those games.

00:01:11,540 --> 00:01:16,710
Back when we first started, EverQuest and Ultima Online were kind of our competition.

00:01:16,710 --> 00:01:21,370
But considering that we're, like, four guys in garages around the world.

00:01:21,370 --> 00:01:25,670
It's hard to say we are competitors of theirs.

00:01:25,670 --> 00:01:29,670
The game is free to play and the source code of the game is completely free.

00:01:29,670 --> 00:01:32,119
So it's all GPL, it's all in SourceForge.

00:01:32,119 --> 00:01:34,480
Anybody here can go out there and pull it down and build it.

00:01:34,480 --> 00:01:37,150
It might take you a couple of days to get it to build the first time.

00:01:37,150 --> 00:01:41,190
But after that, that is pretty easy to keep it going once it's going.

00:01:41,190 --> 00:01:46,110
All the content though, we have kind of a dual license system and the content, the artwork,

00:01:46,110 --> 00:01:51,979
the quest, the puzzles, the maps, those things are all under--come by more a proprietary

00:01:51,979 --> 00:01:56,330
license and that's how we keep the game from forking and people creating all their own

00:01:56,330 --> 00:01:59,680
shard servers and having 1,000 different, you know, versions of the game.

00:01:59,680 --> 00:02:03,910
We like to say it's a way we prevent porn shift.

00:02:03,910 --> 00:02:09,319
So if you think about naked mods and things like that, we'll talk about some of that in

00:02:09,319 --> 00:02:10,479
a little bit.

00:02:10,479 --> 00:02:12,600
The project started in 2000.

00:02:12,600 --> 00:02:15,180
This is when the 3d project started.

00:02:15,180 --> 00:02:21,310
There actually was a 2d version of the project that started in 1992 with Luca in Italy and

00:02:21,310 --> 00:02:24,739
a few of his friends who are into role-playing games because they wanted to take what they

00:02:24,739 --> 00:02:29,250
were doing on the desktop and move it to just--you know, make a computer game out of it.

00:02:29,250 --> 00:02:32,439
But the modern generation game started in 2000.

00:02:32,439 --> 00:02:35,510
It got going and [INDISTINCT] in the summer of 2001.

00:02:35,510 --> 00:02:40,769
I joined the project in I think November of that year.

00:02:40,769 --> 00:02:45,630
The--I was talking to Andrew about this a little while ago and I think the 62 coders,

00:02:45,630 --> 00:02:50,549
the named people that have committed code, that's actually since our subversion conversion.

00:02:50,549 --> 00:02:52,850
We first started in CVS.

00:02:52,850 --> 00:02:55,569
And so--that number probably is totally wrong.

00:02:55,569 --> 00:02:58,220
We converted the subversion in I think summer of 2006.

00:02:58,220 --> 00:02:59,830
So that was a couple of years ago.

00:02:59,830 --> 00:03:05,800
So we've had 62 committers since then just in the last two years.

00:03:05,800 --> 00:03:10,969
So it's probably more like 150 or so overall.

00:03:10,969 --> 00:03:12,420
And then--and that's just with the code.

00:03:12,420 --> 00:03:18,280
You know, we've had dozens and dozens of contributors across the artwork, and the writers, and the

00:03:18,280 --> 00:03:21,159
various other people that have supported the game.

00:03:21,159 --> 00:03:25,060
It's relatively large, you know, for an Open Source project.

00:03:25,060 --> 00:03:27,760
We got--we use Crystal Space which itself is a very large project.

00:03:27,760 --> 00:03:30,040
So that's over a million lines of code.

00:03:30,040 --> 00:03:35,189
And then our code is about 400,000 lines divided up into about 1,200 classes.

00:03:35,189 --> 00:03:40,739
So this creates a lot of learning curve issues for us as people want to volunteer, and then

00:03:40,739 --> 00:03:43,629
they get into it, and they see what's there, and then they can't--they don't know where

00:03:43,629 --> 00:03:45,400
to start or how to do anything.

00:03:45,400 --> 00:03:49,700
So supporting those people and figuring out how to enable them to be successful and give

00:03:49,700 --> 00:03:57,189
us patches is a big part of my challenge in term--in terms of making the team more productive.

00:03:57,189 --> 00:04:00,780
We have over the past three years on the current release.

00:04:00,780 --> 00:04:04,250
You know, we've had over half a million of people who successfully registered accounts

00:04:04,250 --> 00:04:05,640
and tried the game.

00:04:05,640 --> 00:04:06,870
Most of those people login.

00:04:06,870 --> 00:04:09,150
They--you know, they create a character.

00:04:09,150 --> 00:04:10,150
They run around for a while.

00:04:10,150 --> 00:04:11,430
They want to see what it is.

00:04:11,430 --> 00:04:14,530
And then they quit and they go on their way.

00:04:14,530 --> 00:04:20,590
We only have about 100 to 200 players that play in any given day or at any given moment.

00:04:20,590 --> 00:04:26,780
And there are probably about five or 6,000 that will login in any given month.

00:04:26,780 --> 00:04:30,060
And we can talk about why some of that is related, too.

00:04:30,060 --> 00:04:36,450
You know, probably no news to anybody in here but MMOs are very complex pieces of software.

00:04:36,450 --> 00:04:41,490
Typical Open Source structure is that you have a coding team and that's it.

00:04:41,490 --> 00:04:46,060
And what you're building is you're building a better version VI or whatever your project

00:04:46,060 --> 00:04:48,250
is and that code is all there is.

00:04:48,250 --> 00:04:53,720
You might have a QA team if you're a very formal, larger Open Source project.

00:04:53,720 --> 00:04:58,770
We have a much more structured concept and we have a much larger complicated team.

00:04:58,770 --> 00:05:03,830
So the teams that we have today include the 2d team, which is doing concept art; they're

00:05:03,830 --> 00:05:08,449
doing pencil sketches and charcoal drawings and things of that nature to be grist for

00:05:08,449 --> 00:05:10,310
the mill for the 3d modelers.

00:05:10,310 --> 00:05:14,910
The 3d guys are actually doing the modeling and then they're doing animation.

00:05:14,910 --> 00:05:20,330
And generally, their specialties were the--the more beginner modelers are building items

00:05:20,330 --> 00:05:21,330
or they're building terrain.

00:05:21,330 --> 00:05:27,740
Then you have more advanced modelers are building monsters and creatures.

00:05:27,740 --> 00:05:31,740
And then the most advanced modelers are the ones building the player characters because

00:05:31,740 --> 00:05:36,110
those are the ones people are really picky about.

00:05:36,110 --> 00:05:42,270
The sound team does sound effects; every swoosh of the sword, every dramatic trumpet fanfare

00:05:42,270 --> 00:05:44,120
when you get a level or something.

00:05:44,120 --> 00:05:48,940
All of that stuff has to be built on keyboards and, you know, rendered.

00:05:48,940 --> 00:05:53,030
The rules team is figuring out how to make it into an RPG; what is the progression?

00:05:53,030 --> 00:05:54,509
How are we balancing things?

00:05:54,509 --> 00:05:57,629
What are the 200 different spells that we're going to have?

00:05:57,629 --> 00:05:59,139
Somebody has to decide all that.

00:05:59,139 --> 00:06:00,449
That's what this team does.

00:06:00,449 --> 00:06:02,169
They basically work in Excel.

00:06:02,169 --> 00:06:04,960
That's--their number one tool is Excel.

00:06:04,960 --> 00:06:07,170
Then we have a web development--oh, settings.

00:06:07,170 --> 00:06:08,520
I forgot settings.

00:06:08,520 --> 00:06:09,840
Settings are the writers.

00:06:09,840 --> 00:06:11,600
They're the poets and the dreamers, I call them.

00:06:11,600 --> 00:06:17,100
They're the kind of the prima donnas on our team where they are wanting to write these

00:06:17,100 --> 00:06:22,060
long descriptive background stories of--you know, in order for this quest to be relevant

00:06:22,060 --> 00:06:26,509
to this player, now you have to understand 1,000 years worth of history that leads up

00:06:26,509 --> 00:06:30,560
to this blacksmith who wants a sandwich from the sandwich shop.

00:06:30,560 --> 00:06:34,699
So--but those guys really enjoy doing that.

00:06:34,699 --> 00:06:39,110
The wed development team is built--really is managing the content.

00:06:39,110 --> 00:06:44,270
We have a--you know, a large data model that supports all the reference data in the system.

00:06:44,270 --> 00:06:47,570
And so when they add a new item, or they add a new quest, or they do something like that,

00:06:47,570 --> 00:06:50,449
they use web tools to do all that rather than doing it within--in-game.

00:06:50,449 --> 00:06:55,960
And then, of course, we have the traditional Open Source project teams, which are the coding

00:06:55,960 --> 00:06:58,729
team and the QA team.

00:06:58,729 --> 00:07:04,349
The key learning point for me at this point was that the content is much harder than the

00:07:04,349 --> 00:07:05,980
actual engine building.

00:07:05,980 --> 00:07:11,050
So typically, I guess most of you in this audience are probably coders.

00:07:11,050 --> 00:07:12,490
You know, I come from that background.

00:07:12,490 --> 00:07:14,340
I'm used to thinking the code is the hard part.

00:07:14,340 --> 00:07:20,250
But in this, I can write a feature in a night that will--maybe I'll build something one

00:07:20,250 --> 00:07:25,259
night, I'll build a feature to allow our combat so that your--the animations that were played

00:07:25,259 --> 00:07:30,660
in your combat depended on the level--the skill level you are using the weapon you had.

00:07:30,660 --> 00:07:34,889
And when I did that, that method now, I can link the skill level to the animation name

00:07:34,889 --> 00:07:36,400
and it was all kind of really elegant.

00:07:36,400 --> 00:07:39,069
It was like 20 lines of code to get that all going.

00:07:39,069 --> 00:07:44,639
And now that turns into 1,000 hours of animation time for the animation team to create dozens

00:07:44,639 --> 00:07:49,530
of new combat moves and to get all those rolled into the game.

00:07:49,530 --> 00:07:56,580
So that's where the cost of these things is and the effort and the hard part.

00:07:56,580 --> 00:08:02,169
You know, the two most obvious constraints that we have on this team are no money and

00:08:02,169 --> 00:08:03,960
no money.

00:08:03,960 --> 00:08:07,539
And so we run a dedicated hardware--a donated hardware.

00:08:07,539 --> 00:08:14,620
We're lucky that--because we have a relatively high profile, you know, I think the last time

00:08:14,620 --> 00:08:18,139
we needed another server, Luca sent a request out.

00:08:18,139 --> 00:08:21,479
He put a notice on the website saying, you know, we need a server.

00:08:21,479 --> 00:08:24,830
Can somebody donate us a dedicated server and all the bandwidth, et cetera.

00:08:24,830 --> 00:08:30,729
And I think in 24 hours, we had 22 responses of companies that were offering to provide

00:08:30,729 --> 00:08:31,930
that for us.

00:08:31,930 --> 00:08:34,220
So the amount of hardware hasn't been a problem.

00:08:34,220 --> 00:08:38,710
But even once we have it, we don't have a lot of advanced tools for deploying this stuff

00:08:38,710 --> 00:08:40,500
and managing on our mass basis.

00:08:40,500 --> 00:08:43,849
So for us, one server is already a lot of work to maintain.

00:08:43,849 --> 00:08:48,710
And to have dozens of them, you know, we don't have the tools to do that.

00:08:48,710 --> 00:08:52,480
And if we do that, I said they wouldn't be colocated either.

00:08:52,480 --> 00:08:56,270
So as we spread this around, we need to be thinking about a high-latency network.

00:08:56,270 --> 00:08:59,520
It's not all in one rack on a gigabit switch.

00:08:59,520 --> 00:09:02,640
No money also means it's a volunteer development team.

00:09:02,640 --> 00:09:04,820
Andrew and I are kind of long timers on that team.

00:09:04,820 --> 00:09:07,410
But a lot of people come and go.

00:09:07,410 --> 00:09:09,140
It's a revolving there.

00:09:09,140 --> 00:09:13,070
We have a lot of people that have done one patch and have disappeared.

00:09:13,070 --> 00:09:16,530
And some people are there for a year and then their--they graduate from college or they

00:09:16,530 --> 00:09:18,110
change jobs or whatever.

00:09:18,110 --> 00:09:21,150
And so there are situation changes.

00:09:21,150 --> 00:09:26,170
And so as a result, the learning curve issues as I touched on earlier are our big issue.

00:09:26,170 --> 00:09:30,390
And so we want to enable people to get comfortable with a certain area and then to branch out

00:09:30,390 --> 00:09:34,770
from there or to move on and somebody else takes over their area.

00:09:34,770 --> 00:09:36,450
Okay.

00:09:36,450 --> 00:09:40,000
So now I though at this point I would show you guys a YouTube video.

00:09:40,000 --> 00:09:43,760
For those of you who haven't scene PlaneShift just to get an idea of what it's like.

00:09:43,760 --> 00:09:50,560
So if we're flipping settings on video, now is the time to do it.

00:09:50,560 --> 00:10:27,960
And I'll maximize this.

00:10:27,960 --> 00:13:18,160
This takes about five minutes.

00:13:18,160 --> 00:13:52,200
Okay.

00:13:52,200 --> 00:14:26,240
Okay.

00:14:26,240 --> 00:15:03,160
I 

00:15:03,160 --> 00:15:06,010
think the worst part of that video is that it makes the game look better than it actually

00:15:06,010 --> 00:15:07,010
is.

00:15:07,010 --> 00:15:08,950
That was--that was produced by a fan.

00:15:08,950 --> 00:15:13,380
We have a--there's a lot of fan-generated video stuff out there.

00:15:13,380 --> 00:15:16,770
And so I just kind of--when I was getting ready for this the other day, I just went

00:15:16,770 --> 00:15:20,320
out there and try to find one that look good and that's what I found.

00:15:20,320 --> 00:15:22,760
So the team can't really take credit for the--for the trailer.

00:15:22,760 --> 00:15:28,310
I think they did a nice job on that.

00:15:28,310 --> 00:15:29,510
Okay.

00:15:29,510 --> 00:15:33,800
So that's gives you--it should give you some flavor for what the game is like.

00:15:33,800 --> 00:15:35,400
You can see that it's a pretty ambitious project.

00:15:35,400 --> 00:15:39,610
And I think for a bunch of people working an hour a day and--here and there in their

00:15:39,610 --> 00:15:41,340
spare time when they're not sleeping.

00:15:41,340 --> 00:15:45,490
I do most of my coding after my wife goes to bed and--you know.

00:15:45,490 --> 00:15:50,310
So my day on this doesn't even start until usually 11:00 or 12:00 at night.

00:15:50,310 --> 00:15:56,070
So I think it's been--it's taken us years of years to do but we've come a long way with

00:15:56,070 --> 00:15:57,070
it.

00:15:57,070 --> 00:15:58,070
Okay.

00:15:58,070 --> 00:16:02,600
So now I'm going to dig into how this thing is actually designed and some of the key pieces

00:16:02,600 --> 00:16:06,360
of it that I think people here might find interesting.

00:16:06,360 --> 00:16:14,870
At a high level, you know, the server is basically doing nothing more than trying to handle thousands

00:16:14,870 --> 00:16:17,070
and thousands of events that are coming in.

00:16:17,070 --> 00:16:19,420
Events can be network messages.

00:16:19,420 --> 00:16:23,910
They can be time-triggered activities or they can be, you know, intra-server messages or

00:16:23,910 --> 00:16:27,250
sort of broadcast internally in the server.

00:16:27,250 --> 00:16:32,050
No distinction is made between these once they're in the system.

00:16:32,050 --> 00:16:36,110
So, a lot of times a network message will turn into the intra-server broadcast if it's

00:16:36,110 --> 00:16:37,830
of a certain type.

00:16:37,830 --> 00:16:43,380
The threading model, you know, is basically just one worker thread doing 90% of the work.

00:16:43,380 --> 00:16:47,100
And Andrew has got a whole bunch of thoughts on multi-core servers that we'll get to at

00:16:47,100 --> 00:16:48,110
some point.

00:16:48,110 --> 00:16:50,020
But right know that's the way it works.

00:16:50,020 --> 00:16:54,340
There's a pub/sub architecture who allows for what we call "managers" to then subscribe

00:16:54,340 --> 00:16:56,250
to these events and handle them.

00:16:56,250 --> 00:17:02,060
So add in new managers in or to specialize and only learn a certain manager is real easy

00:17:02,060 --> 00:17:04,220
to do.

00:17:04,220 --> 00:17:08,919
So the classes--these managers are basically defined along functional lines.

00:17:08,919 --> 00:17:10,030
So we have a spell manager.

00:17:10,030 --> 00:17:16,329
We have a GM command manager for the kind of police that are out there policing the

00:17:16,329 --> 00:17:17,329
players.

00:17:17,329 --> 00:17:22,339
Combat, chat, login, authentication, et cetera are all different managers in the system.

00:17:22,339 --> 00:17:25,870
And so it becomes--it's easy to find the code that you're looking for if you're trying to

00:17:25,870 --> 00:17:26,870
drill in on a specific feature.

00:17:26,870 --> 00:17:32,320
It's either fix it or enhance it or to find--to find a bug.

00:17:32,320 --> 00:17:36,110
That lowers the learning curve which means that the volunteers can get started sooner

00:17:36,110 --> 00:17:40,409
and, you know, make progress and feel like they're contributing something quicker.

00:17:40,409 --> 00:17:45,340
And it also means that it's easy to bolt in new functionality because you can add a new

00:17:45,340 --> 00:17:50,720
manager and subscribe to a new message type and then you're good to go, and the rest of

00:17:50,720 --> 00:17:55,140
the server doesn't really need to know about it.

00:17:55,140 --> 00:17:59,759
This diagram is a little bit old so there might be more managers--there might be a couple

00:17:59,759 --> 00:18:01,480
more managers at this point.

00:18:01,480 --> 00:18:07,780
But what you'll see here is that, you know, weather handles all the random rainfall, lighting,

00:18:07,780 --> 00:18:12,690
and snow, and the light and dark cycles of the day/night and so forth.

00:18:12,690 --> 00:18:16,500
The spawn manager is handling an NPC spawning, monster respawning.

00:18:16,500 --> 00:18:21,419
Those things die and we replenish throughout the map.

00:18:21,419 --> 00:18:26,519
Progression manager and NPC manager, exchange manager is handling item exchange and inventory

00:18:26,519 --> 00:18:28,559
management between the players.

00:18:28,559 --> 00:18:32,649
That's a big source of exploits and cheese by the players.

00:18:32,649 --> 00:18:37,190
So it's probably one of the most sensitive areas of our system.

00:18:37,190 --> 00:18:41,130
Entity management, I'm going to talk about it in a little bit.

00:18:41,130 --> 00:18:42,130
What else?

00:18:42,130 --> 00:18:43,130
You know, there are just a whole bunch of those.

00:18:43,130 --> 00:18:44,720
They go down the line.

00:18:44,720 --> 00:18:48,620
And so whenever we add a new functional area, we'll add a new manager.

00:18:48,620 --> 00:18:52,789
You'll also notice over on the right, the client has a very similar structure with what

00:18:52,789 --> 00:18:56,919
we call handlers where it's doing the same kind of subscription model either to network

00:18:56,919 --> 00:19:02,759
messages from the server--you know, kind of events signaled by the server or by commands

00:19:02,759 --> 00:19:04,289
issued by the player.

00:19:04,289 --> 00:19:05,289
Okay.

00:19:05,289 --> 00:19:09,500
So now I'm going to dig in to the network and entity.

00:19:09,500 --> 00:19:10,919
I'm going fast on this.

00:19:10,919 --> 00:19:13,600
I have a lot of slides and I'm kind of trying to get through them all.

00:19:13,600 --> 00:19:18,799
You know, we can spend an hour just talking about entity management or just talking about

00:19:18,799 --> 00:19:20,279
how we do our UDP implementation.

00:19:20,279 --> 00:19:24,770
But I'm trying to just skim over the top on a bunch of different subjects.

00:19:24,770 --> 00:19:31,220
And if we--if we want to drill on any of those, I'm happy to do that in the Q and A session.

00:19:31,220 --> 00:19:33,769
The base networking, it's all UDP-based.

00:19:33,769 --> 00:19:40,549
It's kind of a subset of TCP that we built because the TCP--because it guarantees ordering

00:19:40,549 --> 00:19:42,269
of packets than on one held-up packet.

00:19:42,269 --> 00:19:44,510
It can hold up every other packet behind it.

00:19:44,510 --> 00:19:47,960
And that's really not a good thing in a--in a game where you're trying to have real time

00:19:47,960 --> 00:19:50,380
synchronization across the clients.

00:19:50,380 --> 00:19:53,669
We have two priority levels of messages which are guaranteed and non-guaranteed.

00:19:53,669 --> 00:19:58,309
We need to have guaranteed ordering for some messages but not for all messages.

00:19:58,309 --> 00:20:03,799
And so I think at some point soon we'll be adding that on a pretty fine-grained level.

00:20:03,799 --> 00:20:08,710
We pack it all really tightly and we spend a lot of time on packing those network messages

00:20:08,710 --> 00:20:13,809
together because bandwidth really is our number one bottleneck in terms of how far we can

00:20:13,809 --> 00:20:16,629
scale a single server.

00:20:16,629 --> 00:20:19,570
A lot of people would think that it would be the CPU where they would think we'd run

00:20:19,570 --> 00:20:22,100
out of memory or something along those lines.

00:20:22,100 --> 00:20:29,740
But the game is efficient enough to where really bandwidth is our issue.

00:20:29,740 --> 00:20:33,110
The server is obviously--it's all running on one server today.

00:20:33,110 --> 00:20:35,169
So the entire world is all on one server.

00:20:35,169 --> 00:20:37,940
At some point we'll probably zone it out and partition it off.

00:20:37,940 --> 00:20:40,070
But we haven't had to do that yet.

00:20:40,070 --> 00:20:42,090
And so we haven't done it.

00:20:42,090 --> 00:20:47,519
An entity is something we define as any object that's added after the fact to the map.

00:20:47,519 --> 00:20:52,129
So that could be characters and monsters or it could be if somebody drops a book on the

00:20:52,129 --> 00:20:53,129
floor.

00:20:53,129 --> 00:20:54,129
Not that book is an entity.

00:20:54,129 --> 00:20:58,480
So the maps are loaded and then the entities are overlaid on top of that.

00:20:58,480 --> 00:21:03,700
Each client then gets a subset of those based on the relevance and proximity that they have

00:21:03,700 --> 00:21:04,700
to that.

00:21:04,700 --> 00:21:11,500
So there are maybe, let's say, 5,000 entities in the world that the server is managing but

00:21:11,500 --> 00:21:15,780
each client only sees their subset of those entities.

00:21:15,780 --> 00:21:19,539
And so this is my attempt--a simple diagram around that.

00:21:19,539 --> 00:21:24,770
So player F--so the server sees all of these entities in its model.

00:21:24,770 --> 00:21:30,360
But player F has a proximity list where he can only see himself and five other characters.

00:21:30,360 --> 00:21:34,490
Then player H can see himself and six other characters.

00:21:34,490 --> 00:21:38,100
And they only have that character G in common between them.

00:21:38,100 --> 00:21:43,370
So the other entities in terms of player F's client machine, any entity outside of that

00:21:43,370 --> 00:21:46,210
circle does not exist in his clan.

00:21:46,210 --> 00:21:50,029
That's really important for performance reasons and kind of network bandwidth reasons.

00:21:50,029 --> 00:21:58,999
It's also really important for cheat protection and kind of map exploits and visibility exploits.

00:21:58,999 --> 00:22:03,929
Relevance is first and foremost determined just by a threshold distance to the player.

00:22:03,929 --> 00:22:07,130
That threshold distance depends on the type of identity.

00:22:07,130 --> 00:22:12,399
So a player character or a monster could be 100 meters but a special gem stone could be

00:22:12,399 --> 00:22:13,620
one meter.

00:22:13,620 --> 00:22:17,510
And so you have to physically be within one meter of it before it exists on your client.

00:22:17,510 --> 00:22:20,330
That's another thing we do to try to prevent cheating.

00:22:20,330 --> 00:22:21,790
It has to be visible to the player.

00:22:21,790 --> 00:22:26,490
And by saying that I don't mean that it's visible on the screen to the player in terms

00:22:26,490 --> 00:22:28,450
of it's not included by a door or something.

00:22:28,450 --> 00:22:32,370
I mean that it's logically visible that if a player turns a certain way they could go

00:22:32,370 --> 00:22:33,370
see it.

00:22:33,370 --> 00:22:38,270
So this really has to do with GMs that are invisible or a player that's cast a spell

00:22:38,270 --> 00:22:39,700
of invisibility or something.

00:22:39,700 --> 00:22:44,759
If he's invisible, then other clients around him don't ever have that identity on their

00:22:44,759 --> 00:22:45,820
machines at all.

00:22:45,820 --> 00:22:48,299
So it's not hackable.

00:22:48,299 --> 00:22:52,370
And then within the same instance, the game also supports instance dungeons and instancing

00:22:52,370 --> 00:22:53,809
for various reasons.

00:22:53,809 --> 00:22:57,010
And so the instant for us is a fourth coordinate.

00:22:57,010 --> 00:23:01,629
So every entity in the system has an XYZ coordinate and then they have a W coordinate, which is

00:23:01,629 --> 00:23:02,920
their instance.

00:23:02,920 --> 00:23:08,210
And only players--players can only see other players that share the same W coordinate basically.

00:23:08,210 --> 00:23:09,210
>> Question.

00:23:09,210 --> 00:23:10,660
>> FULTON: Yes.

00:23:10,660 --> 00:23:12,299
>> [INDISTINCT] cheating.

00:23:12,299 --> 00:23:13,930
>> FULTON: Yes.

00:23:13,930 --> 00:23:15,569
>> [INDISTINCT] cheating.

00:23:15,569 --> 00:23:18,509
>> FULTON: Because it means that you have to be within a meter to see it.

00:23:18,509 --> 00:23:24,289
So if the--if the point of--if the game is to, like, find the hiding place of the gemstone,

00:23:24,289 --> 00:23:25,730
then you've got to get to within a meter.

00:23:25,730 --> 00:23:29,639
You can't just hack your client and get a print of all the entities that get propagated

00:23:29,639 --> 00:23:34,029
to your server, from the server down to you and then know the XYZ coordinates you need

00:23:34,029 --> 00:23:37,549
to go to until you're near it.

00:23:37,549 --> 00:23:43,039
>> [INDISTINCT] >> FULTON: Right.

00:23:43,039 --> 00:23:44,070
So the benefits.

00:23:44,070 --> 00:23:48,029
I mentioned the security benefits a little bit and I'm going to talk about that more

00:23:48,029 --> 00:23:50,770
in a little bit at the end.

00:23:50,770 --> 00:23:53,009
And also it's very important for minimizing bandwidth.

00:23:53,009 --> 00:23:59,010
We're sending a lot of position and velocity updates about all of these entities, you know,

00:23:59,010 --> 00:24:00,890
every second or every half second.

00:24:00,890 --> 00:24:05,740
And so the fewer entities we're sending that--the fewer client machines that we're sending that

00:24:05,740 --> 00:24:08,080
to, the less bandwidth we're using.

00:24:08,080 --> 00:24:14,009
So it makes it a much closer to kind of a linear scaling network bandwidth consumption

00:24:14,009 --> 00:24:17,389
as opposed to kind of an order and squared update model.

00:24:17,389 --> 00:24:23,390
And then it's very easy construct to use for the managers when they're broadcasting because

00:24:23,390 --> 00:24:29,909
then--like, if I'm chatting and I want to shout a message, I might shout that to everybody

00:24:29,909 --> 00:24:31,440
within 100 meters.

00:24:31,440 --> 00:24:33,799
Well, that's my--that's my entity list.

00:24:33,799 --> 00:24:38,830
And if I wanted to do everybody within 10 meters or two meters for a whisper or something,

00:24:38,830 --> 00:24:42,730
I can look down at the proximity list and look at the radius of each one of those and

00:24:42,730 --> 00:24:47,190
quickly and efficiently just broadcast to the people within that radius without looking

00:24:47,190 --> 00:24:50,679
at all 5,000 entities.

00:24:50,679 --> 00:24:54,590
So the cost of it is that the server does spend a lot time maintaining and updating

00:24:54,590 --> 00:24:55,899
the prox lists.

00:24:55,899 --> 00:24:59,220
And so there's a lot work on that.

00:24:59,220 --> 00:25:04,470
And pounding out all the bugs on that was a multi-year process I would say.

00:25:04,470 --> 00:25:05,470
Right, [INDISTINCT]?

00:25:05,470 --> 00:25:07,629
So this is what it actually looks like.

00:25:07,629 --> 00:25:08,629
It's a mess.

00:25:08,629 --> 00:25:13,259
You know, every entity has its own prox lists around it and they all are these overlapping

00:25:13,259 --> 00:25:14,259
lists.

00:25:14,259 --> 00:25:19,070
And they're all being maintained in real time as one updates or another updates.

00:25:19,070 --> 00:25:21,539
Okay.

00:25:21,539 --> 00:25:24,799
So now I'm going to shift over to scripting.

00:25:24,799 --> 00:25:29,869
We use several different types of home-made scripting languages in the tool.

00:25:29,869 --> 00:25:36,570
There are these mini--miniature languages for solving a particular purpose in the game.

00:25:36,570 --> 00:25:41,190
Generally, the benefits of these things are that they're possible for non-programmers

00:25:41,190 --> 00:25:42,190
to produce.

00:25:42,190 --> 00:25:45,110
And I'm going to show you examples that other teams are using.

00:25:45,110 --> 00:25:49,169
So the engine team will build a mini language and then we'll give that.

00:25:49,169 --> 00:25:53,649
And then the web guys will build an area of their content management tool that allows

00:25:53,649 --> 00:25:56,960
people to put those scripts under the tool and then the engine team gets out of it.

00:25:56,960 --> 00:25:59,460
So if they want 200 spells or 300 spells, we don't care.

00:25:59,460 --> 00:26:00,590
We don't have to code them all.

00:26:00,590 --> 00:26:03,970
They're just data.

00:26:03,970 --> 00:26:08,740
That also means once we put it into the database, it's proprietary content and so it keeps us

00:26:08,740 --> 00:26:10,730
from having a GPL of that data.

00:26:10,730 --> 00:26:13,159
So we have test data out there.

00:26:13,159 --> 00:26:17,029
So we have example scripts and we have a running server that spells that work but they're just

00:26:17,029 --> 00:26:21,629
demo spells to show you how the scripting language works and the they're kind of be

00:26:21,629 --> 00:26:22,629
test cases.

00:26:22,629 --> 00:26:27,450
But they're not the actual in-game scripts of the--of the--of the real game--official

00:26:27,450 --> 00:26:29,490
game.

00:26:29,490 --> 00:26:32,929
But what it does, it makes the engine team a lot more productive because we spend our

00:26:32,929 --> 00:26:37,539
time really at the meta level mostly adding new commands and capabilities to the scripting

00:26:37,539 --> 00:26:42,789
languages and then that becomes a whole new tool set for the other teams to use as they

00:26:42,789 --> 00:26:44,610
go forward.

00:26:44,610 --> 00:26:52,789
Did somebody talk or there's somebody out there?

00:26:52,789 --> 00:26:53,789
Is it you?

00:26:53,789 --> 00:26:57,929
>> [INDISTINCT] that you have the people writing scripts, worked around bugs in the underlying

00:26:57,929 --> 00:26:58,929
engine instead of reporting them?

00:26:58,929 --> 00:26:59,929
>> FULTON: Yes, yes.

00:26:59,929 --> 00:27:00,929
They do or they just don't think that it's possible.

00:27:00,929 --> 00:27:03,409
And so they don't think we ever intended it for it to be there when actually it's just

00:27:03,409 --> 00:27:04,640
a bug.

00:27:04,640 --> 00:27:07,200
And so--then they'll ask for a feature that they want.

00:27:07,200 --> 00:27:08,831
They're like, "Is it possible that we can do this?"

00:27:08,831 --> 00:27:11,340
And we'll say, "Yes, that's been in there for two years."

00:27:11,340 --> 00:27:13,240
And they're like, "Well, we tried it and it just doesn't work.

00:27:13,240 --> 00:27:14,669
We didn't think you did it."

00:27:14,669 --> 00:27:16,759
So there are some of that that goes on.

00:27:16,759 --> 00:27:21,230
And so, periodically, we try to go through and update the documentation and clean up

00:27:21,230 --> 00:27:22,500
those scripting languages.

00:27:22,500 --> 00:27:26,309
So, yes, that's a--that's an interesting problem.

00:27:26,309 --> 00:27:28,630
But I really like that meta programming stuff.

00:27:28,630 --> 00:27:31,980
We're building the tools for the other people to be productive on it.

00:27:31,980 --> 00:27:36,269
And that's a much kind of higher multiplier activity for us to be involved in.

00:27:36,269 --> 00:27:42,509
So, the first one of these that I was going to talk about was math script.

00:27:42,509 --> 00:27:46,860
This is basically what we use for the RPG rules or anywhere where there's a calculation

00:27:46,860 --> 00:27:47,860
involved.

00:27:47,860 --> 00:27:54,950
So if I am a character and I swing a sword and hit another character, what is the resulting

00:27:54,950 --> 00:27:56,489
damage of that hit?

00:27:56,489 --> 00:27:59,230
Well, there's some sort of a randomization factor.

00:27:59,230 --> 00:28:04,919
It's based on my skill or their skill, their armor, my weapon, a lot of different function,

00:28:04,919 --> 00:28:09,080
you know, features about that particular situation that leads to that result.

00:28:09,080 --> 00:28:11,460
That's all done within Math Script.

00:28:11,460 --> 00:28:15,789
So I have a couple of here that I just threw out there just to show you an illustration

00:28:15,789 --> 00:28:16,789
of it.

00:28:16,789 --> 00:28:20,340
And these are just from our subversion examples.

00:28:20,340 --> 00:28:24,281
But the idea is that you can--there's lay binding to the objects.

00:28:24,281 --> 00:28:27,470
Any object in the game as long as it implements those interface called iScriptable can be

00:28:27,470 --> 00:28:28,730
linked in to math script.

00:28:28,730 --> 00:28:34,269
I mean it can get at it's attributes with the [INDISTINCT] operator there.

00:28:34,269 --> 00:28:35,869
You can also call functions on those objects.

00:28:35,869 --> 00:28:44,519
So a worker right here has a function called get skill value that's implemented by iScriptable.

00:28:44,519 --> 00:28:46,489
And so those can be added to the engine, too.

00:28:46,489 --> 00:28:52,390
So the people that are in the non-technical ones or the none C++ people are writing this

00:28:52,390 --> 00:28:56,639
stuff and using engine features without really knowing that they're doing that.

00:28:56,639 --> 00:29:00,210
And if they need a feature, we can add it in without changing the underlying scripting

00:29:00,210 --> 00:29:03,820
language too much and get there.

00:29:03,820 --> 00:29:06,749
So it's precompiled to p-code on server startup.

00:29:06,749 --> 00:29:08,659
All of these are loaded in at the beginning.

00:29:08,659 --> 00:29:13,460
It takes the server about a minute to two minutes to startup whenever it starts because

00:29:13,460 --> 00:29:19,710
it's loading in absolutely everything and caching absolutely everything.

00:29:19,710 --> 00:29:21,649
Dynamic binding, I just mentioned.

00:29:21,649 --> 00:29:26,220
And as long as they implement iScriptable, we can bind those objects at the time that--you

00:29:26,220 --> 00:29:30,100
know, right before the math script is called.

00:29:30,100 --> 00:29:33,240
Another example is what we call progression scripts.

00:29:33,240 --> 00:29:38,250
And this is where--this is kind of how spells are done or other things like that where you

00:29:38,250 --> 00:29:44,570
want to describe the effect that a certain event has on a player or on a couple--on a

00:29:44,570 --> 00:29:45,649
set of players.

00:29:45,649 --> 00:29:49,610
And so in this case, damage--you know, there's an operator here.

00:29:49,610 --> 00:29:53,739
We use XML just because it's easy to parse.

00:29:53,739 --> 00:29:55,799
So the hit points go down by this.

00:29:55,799 --> 00:30:00,740
This value here is any math script--any single line math script.

00:30:00,740 --> 00:30:05,179
So that can be--I just put a negative sign in front of a variable there but you can also--in

00:30:05,179 --> 00:30:08,799
some cases, this is a long complicated formula.

00:30:08,799 --> 00:30:12,600
And so depending on how crazy the rules guys want with their spread sheets, you know, that's

00:30:12,600 --> 00:30:13,809
what they end up putting in there.

00:30:13,809 --> 00:30:18,350
And then they can do some messaging where system messages show up on the screen and,

00:30:18,350 --> 00:30:22,850
you know, notify players of things that have happened as well from within the scripting

00:30:22,850 --> 00:30:24,080
languages.

00:30:24,080 --> 00:30:26,159
These are compiled down to virtual function calls.

00:30:26,159 --> 00:30:31,770
You know, each of these objects here--each of these tags turns into an object and then

00:30:31,770 --> 00:30:35,129
the script runs by just calling the same virtual function across each one.

00:30:35,129 --> 00:30:39,649
And so it's again very efficient way to run the scripts.

00:30:39,649 --> 00:30:44,269
And they're preloaded and parsed at the time on startup.

00:30:44,269 --> 00:30:48,139
And then the value actually can be any single math script.

00:30:48,139 --> 00:30:49,139
Okay.

00:30:49,139 --> 00:30:54,429
This is the one that--that's near and dear to my heart because it's the least scriptish.

00:30:54,429 --> 00:30:59,990
What this is a script for how a quest is done in the game.

00:30:59,990 --> 00:31:04,809
And quest for us is a generic term that means any kind of task that an NPC would give to

00:31:04,809 --> 00:31:09,179
a player to help them get a reward or progression points.

00:31:09,179 --> 00:31:13,769
They're not all grand quests like in a novel or something.

00:31:13,769 --> 00:31:19,679
But what we found was with the XML structure--we have a similar XML structure for dialogue

00:31:19,679 --> 00:31:23,269
and a kind of action response scripting with the our NPCs.

00:31:23,269 --> 00:31:24,370
There was XML base.

00:31:24,370 --> 00:31:26,379
It looks a lot like this production script.

00:31:26,379 --> 00:31:29,190
But it was too technical for our poets.

00:31:29,190 --> 00:31:33,440
And so what we did instead was after two years of struggling with them trying to use that

00:31:33,440 --> 00:31:35,940
XML structure was we went to this.

00:31:35,940 --> 00:31:38,629
And this is designed to look like a screenplay.

00:31:38,629 --> 00:31:42,249
So it's much more like writing a dialogue back and forth.

00:31:42,249 --> 00:31:45,629
And they can kind of just free-associate and think of how they want to do it.

00:31:45,629 --> 00:31:49,269
And then with a little bit of syntactic sugar to give some hints to the engine about how

00:31:49,269 --> 00:31:51,509
to pull this all apart.

00:31:51,509 --> 00:31:54,679
We can--we can make it comprehensible to them.

00:31:54,679 --> 00:31:58,659
So you'll see that P up here stands for player.

00:31:58,659 --> 00:32:01,750
So the player initiates this quest by saying greetings.

00:32:01,750 --> 00:32:03,360
And then there's a whole [INDISTINCT] architecture around.

00:32:03,360 --> 00:32:08,080
There are a million things they can say that all equate to greetings behind the scenes.

00:32:08,080 --> 00:32:12,480
Then we have this character named Marth who responds back to that and says, "Hail," you

00:32:12,480 --> 00:32:13,989
know, "would you like to earn a little money?"

00:32:13,989 --> 00:32:16,919
The player then can say either no or yes.

00:32:16,919 --> 00:32:18,869
I can get my mouse going.

00:32:18,869 --> 00:32:21,350
So they can say no or yes.

00:32:21,350 --> 00:32:25,070
And then Marth's response are down here.

00:32:25,070 --> 00:32:31,341
And so if he says no, the first response correlates to the first player statement there and the

00:32:31,341 --> 00:32:34,210
second response correlates to the second player statement.

00:32:34,210 --> 00:32:36,499
And only the second one progresses the script.

00:32:36,499 --> 00:32:39,590
If he--if he does the first one, it says, "Well, okay.

00:32:39,590 --> 00:32:42,999
Then have a good day," and the script stops right there.

00:32:42,999 --> 00:32:44,809
And so this to our writers is understandable.

00:32:44,809 --> 00:32:46,899
This is how they have to do it.

00:32:46,899 --> 00:32:50,840
So the positive thing that advances the quest forward is always at the end and then that

00:32:50,840 --> 00:32:53,399
chains on to later in the--in the quest.

00:32:53,399 --> 00:32:54,399
There are other things.

00:32:54,399 --> 00:32:56,710
I try to put in kind of a simple example here.

00:32:56,710 --> 00:33:00,840
But there are lots of prerequisite scripting that only people of certain levels can get

00:33:00,840 --> 00:33:04,480
certain quest or if they have a certain item and so forth.

00:33:04,480 --> 00:33:08,130
You can also link these scripts together and chain them and make subroutines out of them

00:33:08,130 --> 00:33:09,130
and stuff.

00:33:09,130 --> 00:33:12,639
So--but that's all done in a sneaky way to where the settings people don't realize that

00:33:12,639 --> 00:33:15,419
they're coding subroutines, but that's what they're really doing.

00:33:15,419 --> 00:33:21,619
This is all done essentially through a preprocessor that loads in these big text blobs and kind

00:33:21,619 --> 00:33:23,129
of parses them out line by line.

00:33:23,129 --> 00:33:27,629
It creates the XML that I tried for two years to get them to use, and then it creates that

00:33:27,629 --> 00:33:31,470
from this, and then it runs that through the XML loader and it's running that through the

00:33:31,470 --> 00:33:34,940
rest of the game.

00:33:34,940 --> 00:33:36,070
Okay.

00:33:36,070 --> 00:33:40,519
So that's an overview of three of the mini-scripting things that we have.

00:33:40,519 --> 00:33:43,350
We have some others on the client as well.

00:33:43,350 --> 00:33:47,580
For effects, you saw the sparkly things going on and lots of different spell visual things.

00:33:47,580 --> 00:33:52,249
That's all done through XML structures, too, that our art team uses.

00:33:52,249 --> 00:33:53,870
So anyway there are lots of those.

00:33:53,870 --> 00:33:58,690
Let's talk about NPCs for a minute because this is the other topic that is near and dear

00:33:58,690 --> 00:34:02,149
to my heart.

00:34:02,149 --> 00:34:06,720
The basic fact of the matter is that NPC AI is hard to scale.

00:34:06,720 --> 00:34:13,290
You know, it's very CPU intensive to do true AI and to really make things intelligent.

00:34:13,290 --> 00:34:18,179
And in a world where we're trying to have one server who lasts as long as possible and

00:34:18,179 --> 00:34:23,450
to potentially support thousands of players, to have thousands of NPCs all managed by one

00:34:23,450 --> 00:34:29,169
process on one machine would really limit us in terms of what we could do with it.

00:34:29,169 --> 00:34:34,730
But today in our monolithic server, you know, that 100 players take us less than five percent

00:34:34,730 --> 00:34:36,090
CPU on that machine.

00:34:36,090 --> 00:34:42,660
And so that means on 30, we could scale that to 2,000 players on that machine.

00:34:42,660 --> 00:34:47,840
But at that point, we're using something, like, 20 megabits of bandwidth, you know,

00:34:47,840 --> 00:34:49,040
to support those players.

00:34:49,040 --> 00:34:54,760
And so that's why bandwidth is our big issue rather than CPU.

00:34:54,760 --> 00:34:56,540
But AI is computationally intensive.

00:34:56,540 --> 00:35:00,570
The smarter the monsters are, the more expensive it is to make them that smart.

00:35:00,570 --> 00:35:02,970
And the AI techniques are constantly evolving.

00:35:02,970 --> 00:35:08,330
And I wanted to put together an architecture that would allow new AI experts to show up.

00:35:08,330 --> 00:35:12,540
You know, my dream idea is that Andrew is going to be an AI expert soon.

00:35:12,540 --> 00:35:16,010
And he's going to come back and he's going to want to make the world's smartest dragon

00:35:16,010 --> 00:35:20,570
and he's going to have an eight-way box that is dedicated to make one dragon incredibly

00:35:20,570 --> 00:35:21,720
smart, okay?

00:35:21,720 --> 00:35:24,500
And so I want to be able to support that rather than to say, "No.

00:35:24,500 --> 00:35:26,930
You've exceeded your one percent budget for that dragon.

00:35:26,930 --> 00:35:29,470
That's all you can do."

00:35:29,470 --> 00:35:35,690
So what we do is we pull the AI out into its own process.

00:35:35,690 --> 00:35:37,990
And so that's what these NPC clients here are.

00:35:37,990 --> 00:35:39,920
They have their own process.

00:35:39,920 --> 00:35:46,630
They connect through the same networking layer that our clients do.

00:35:46,630 --> 00:35:49,530
And so they can attach and we can have multiple of those attached.

00:35:49,530 --> 00:35:55,720
And so the NPC client is kind of our default implementation that we ship with is very efficient

00:35:55,720 --> 00:35:57,820
and very basic NPC client.

00:35:57,820 --> 00:36:00,110
And I'm going to describe to you how we do that.

00:36:00,110 --> 00:36:03,920
But if somebody were to create the world's smartest dragon, as long as they implement

00:36:03,920 --> 00:36:08,910
the protocol that we already use for NPC client, they can snap in there and that whole server

00:36:08,910 --> 00:36:10,990
farm can be dedicated to one NPC.

00:36:10,990 --> 00:36:15,270
You're going to ask a question?

00:36:15,270 --> 00:36:20,040
>> [INDISTINCT] >> FULTON: I can barely hear you.

00:36:20,040 --> 00:36:21,040
What?

00:36:21,040 --> 00:36:27,230
>> Can you give me an example of [INDISTINCT] or what--what's the scenario where a [INDISTINCT]?

00:36:27,230 --> 00:36:30,220
>> FULTON: Well, I mean--and the--and the most basic case would be things like path

00:36:30,220 --> 00:36:31,220
finding.

00:36:31,220 --> 00:36:37,490
In a big world, if you train a monster and you chase him over three maps away, you know,

00:36:37,490 --> 00:36:41,190
and then he needs to finally get back to his home area, that would be a very expensive

00:36:41,190 --> 00:36:44,160
calculation and I don't want to hold up the server on that.

00:36:44,160 --> 00:36:49,250
It could also be that when--you know, in the high-end games, in the commercial games it's

00:36:49,250 --> 00:36:54,000
not unusual to have, you know, kind of 60 players all attacking one monster.

00:36:54,000 --> 00:36:59,350
And so in those mass raid types of environments you could imagine that you would have a very

00:36:59,350 --> 00:37:04,820
smart set of monsters that we're teaming up and, you know, kind of working as a wolf pact

00:37:04,820 --> 00:37:08,550
to attack from different sides and to optimize how they were going to do it.

00:37:08,550 --> 00:37:11,880
And so I don't want--you know, I don't know what all those scenarios might be but I want

00:37:11,880 --> 00:37:17,050
to be sure that our framework supports that if somebody thinks of something cool to do

00:37:17,050 --> 00:37:19,530
we can do it.

00:37:19,530 --> 00:37:21,620
Okay.

00:37:21,620 --> 00:37:27,550
So the key clients--in what I call the super client is that the NPC client is our default

00:37:27,550 --> 00:37:28,870
super client.

00:37:28,870 --> 00:37:35,070
But it handles today--I think it handles about 300 NPCs.

00:37:35,070 --> 00:37:40,250
And so it is one process acting like a client on behalf of 300 entities.

00:37:40,250 --> 00:37:44,070
And that's why I call it a super client because most of our regular clients are handling one

00:37:44,070 --> 00:37:47,480
entity which the player and just respond in the keyboard or what have you.

00:37:47,480 --> 00:37:49,450
It connects to the server of the network.

00:37:49,450 --> 00:37:51,350
It uses the same protocol from most things.

00:37:51,350 --> 00:37:56,080
So things like login and authentication and [INDISTINCT] propagation are all used in the

00:37:56,080 --> 00:37:57,190
same protocol.

00:37:57,190 --> 00:38:01,040
But it has a special messaging layer for bulk activity.

00:38:01,040 --> 00:38:05,990
So if you're managing 300 monsters, you're probably--like right now, it's handling all

00:38:05,990 --> 00:38:06,990
the monsters in the world.

00:38:06,990 --> 00:38:09,890
So it actually needs to know about all of the entities in the world.

00:38:09,890 --> 00:38:13,410
And it's a waste of my time and a waste of the server's time to have 300 independent

00:38:13,410 --> 00:38:18,830
proximity lists for those 300 entities when at the end of the day it's all one big activity.

00:38:18,830 --> 00:38:23,970
So there's a lot of bulk updating that's going on between the NPC clients that isn't happening

00:38:23,970 --> 00:38:27,220
with the player clients.

00:38:27,220 --> 00:38:31,470
The NPC manager class on the server is yet another manager.

00:38:31,470 --> 00:38:35,990
And it handles all of the NPC-specific protocols.

00:38:35,990 --> 00:38:41,030
And so what it does, it packs up and unpacks the things that it needs to and then the bulk

00:38:41,030 --> 00:38:42,030
updates.

00:38:42,030 --> 00:38:47,010
It unrolls those individual updates and then republishes those internally into the server.

00:38:47,010 --> 00:38:54,720
So to the rest of the server, a movement update of a player, or of a monster, or an identical

00:38:54,720 --> 00:38:56,210
in the server.

00:38:56,210 --> 00:39:03,650
And so the fact that the bulk update was done at the beginning, it doesn't matter.

00:39:03,650 --> 00:39:05,570
So, yes.

00:39:05,570 --> 00:39:09,241
So the emulation layer means that there's no distinction between player--human players

00:39:09,241 --> 00:39:14,670
and automated players almost anywhere in the game.

00:39:14,670 --> 00:39:21,460
And on the client machine there is no distinction between a monster and a remote player.

00:39:21,460 --> 00:39:23,990
So you know about yourself and that's special.

00:39:23,990 --> 00:39:28,621
But if there are five players here and five monsters on the other side, you know, to you

00:39:28,621 --> 00:39:32,210
you're getting the same network updates and that you have the same information, same stat,

00:39:32,210 --> 00:39:35,690
same everything about all of those.

00:39:35,690 --> 00:39:40,490
From a scalability standpoint, you know, the next place when we hit a bandwidth limit or

00:39:40,490 --> 00:39:46,750
a scalability limit on here, we'll pull NPC client off into its own machine and then that

00:39:46,750 --> 00:39:48,150
will connect remotely.

00:39:48,150 --> 00:39:53,140
And now instead of two really heavy processes of our game server and our NPC super client

00:39:53,140 --> 00:39:57,470
both running on the same box, as soon as we pull those apart, now we just kind of doubled

00:39:57,470 --> 00:40:01,960
our capacity without really doubling our complexity.

00:40:01,960 --> 00:40:06,510
The other thing we can do obviously is to pull [INDISTINCT] database off on its own

00:40:06,510 --> 00:40:07,510
server.

00:40:07,510 --> 00:40:12,580
So I think as we start to hit scaling problems--if we ever do--that will be the most obvious

00:40:12,580 --> 00:40:18,070
thing to do before we ever go to zoning or other things like that.

00:40:18,070 --> 00:40:22,960
So then we've already kind of talked about no limitations on AI techniques as long as

00:40:22,960 --> 00:40:24,930
we use the same net protocol.

00:40:24,930 --> 00:40:30,590
And again because it's Open Source, we can change the net protocol, too, if we need to.

00:40:30,590 --> 00:40:33,190
So, how we do NPC AI?

00:40:33,190 --> 00:40:34,880
What is the default superclient doing?

00:40:34,880 --> 00:40:35,880
Okay.

00:40:35,880 --> 00:40:41,010
And this is what I like to call "artificial stupidity" rather than artificial intelligence.

00:40:41,010 --> 00:40:45,810
My big example is Pac-Man where the ghost in Pac-Man has probably no intelligence to

00:40:45,810 --> 00:40:46,810
it.

00:40:46,810 --> 00:40:50,510
And if you think about the CPU cycle budget that the guys had [INDISTINCT] Pac-Man, you

00:40:50,510 --> 00:40:52,310
know that that thing is doing probably nothing.

00:40:52,310 --> 00:40:55,390
And, you know, that's still a pretty challenging game for most people.

00:40:55,390 --> 00:41:01,630
And so for the average case in the--you know, the most common used case of these things,

00:41:01,630 --> 00:41:08,090
the mobs don't have to be very intelligent to be fun to play against.

00:41:08,090 --> 00:41:13,730
So we really emphasize CPU efficiency and flexibility of the scripting because we didn't

00:41:13,730 --> 00:41:16,100
know what we would want.

00:41:16,100 --> 00:41:17,300
So we have a--yes.

00:41:17,300 --> 00:41:24,040
So, our superclient today controls about 300 mobile NPCs and takes generally less than

00:41:24,040 --> 00:41:26,150
10 percent of the CPU on the machine.

00:41:26,150 --> 00:41:33,410
So when--it's not unusual the when we're--we'll--I'll look at the top on the server at a--maybe

00:41:33,410 --> 00:41:40,000
a slow time and top will be the busiest command on our--the busiest demon running on our machine

00:41:40,000 --> 00:41:43,260
compared to the server of the NPC client.

00:41:43,260 --> 00:41:47,150
So, how we do it?

00:41:47,150 --> 00:41:52,010
The first thing we do is the scripting language for the NPC--there's another one of these

00:41:52,010 --> 00:41:56,380
many scripting languages and it supports this concept of NPC types, which are basically

00:41:56,380 --> 00:41:59,010
mapped to kind of C++ classes.

00:41:59,010 --> 00:42:05,300
So they define the overall methods and behaviors of that--of that particular class of monsters.

00:42:05,300 --> 00:42:11,520
Each NPC then is assigned to that type and gets all of those capabilities.

00:42:11,520 --> 00:42:14,220
So a type consists of a set of behaviors.

00:42:14,220 --> 00:42:21,790
So walking around randomly, attacking, chasing, fighting; those are different behaviors and

00:42:21,790 --> 00:42:25,250
the monster will switch between those behaviors depending on what else is happening.

00:42:25,250 --> 00:42:29,490
The way that they switch is through reactions to perceptions, which is that second bullet

00:42:29,490 --> 00:42:31,170
there.

00:42:31,170 --> 00:42:32,580
Perceptions are either sent by the game server.

00:42:32,580 --> 00:42:35,050
Hey, somebody just hit you with a sword.

00:42:35,050 --> 00:42:39,770
Or there are perceptions generated internally like, hey, that monster is out of range or

00:42:39,770 --> 00:42:44,350
that player is out of range you need to chase him, that kind of stuff.

00:42:44,350 --> 00:42:48,360
There's an inheritance structure for the NPC types as well.

00:42:48,360 --> 00:42:52,260
So you can define a bunch of behaviors and then you can have a special monster like the

00:42:52,260 --> 00:42:58,160
boss who has all of the original behaviors plus two other behaviors real easily in the

00:42:58,160 --> 00:42:59,600
structure.

00:42:59,600 --> 00:43:04,830
The loose structure does give us a lot of flexibility and power, but I will tell you

00:43:04,830 --> 00:43:09,550
it's very hard to debug because it's hard to tell a bug in the script from a bug in

00:43:09,550 --> 00:43:15,310
the--in the client--in the superclient.

00:43:15,310 --> 00:43:20,590
So then the NPCs themselves are kind of like instances of those classes now.

00:43:20,590 --> 00:43:26,530
So, they're assigned to a certain NPC type and then they maintain their--each one maintains

00:43:26,530 --> 00:43:32,300
its own individual priority queue of the behaviors that were listed for that NPC type and then

00:43:32,300 --> 00:43:36,010
executes the behavior that is the highest priority.

00:43:36,010 --> 00:43:38,260
That priority we call the need.

00:43:38,260 --> 00:43:46,470
So the NPC doesn't have a lot of needs but then when--you know, if it--it doesn't have

00:43:46,470 --> 00:43:47,470
a lot of need to fight.

00:43:47,470 --> 00:43:48,700
It's just wandering around.

00:43:48,700 --> 00:43:49,700
It's happy.

00:43:49,700 --> 00:43:53,600
When you attack it, that--the reaction is to boost up the need to fight.

00:43:53,600 --> 00:43:57,850
The need to fight takes precedence over the need to wander around and then it starts attacking--it

00:43:57,850 --> 00:43:59,690
starts fighting back.

00:43:59,690 --> 00:44:03,210
So that's how the behaviors run.

00:44:03,210 --> 00:44:08,470
The other thing that the NPCs maintain is what we call hate list and that's the list

00:44:08,470 --> 00:44:15,760
of all the players that that monster knows about and kind of is a way for it to determine

00:44:15,760 --> 00:44:17,950
who does it hate the most and who is it going to fight.

00:44:17,950 --> 00:44:22,190
So if it has five people pounding on it, which one is it going to attack?

00:44:22,190 --> 00:44:28,780
And so that's another sort of little priority queue in the priority list in there that it

00:44:28,780 --> 00:44:29,780
uses.

00:44:29,780 --> 00:44:36,690
So the reactions only affect needs and hate and then everything else is done by just running

00:44:36,690 --> 00:44:40,150
the highest need activity.

00:44:40,150 --> 00:44:45,050
So this is an example of what NPC type looks like.

00:44:45,050 --> 00:44:48,490
In this example, it's called fighter.

00:44:48,490 --> 00:44:51,410
There's a "do nothing", which is just to stand there.

00:44:51,410 --> 00:44:55,660
And so that could loop around and just play the animation that stands and breathes and

00:44:55,660 --> 00:44:58,640
kind of sways from side to side and that's about all it does.

00:44:58,640 --> 00:45:02,310
It also has one for turning that I don't think is used by the script.

00:45:02,310 --> 00:45:08,990
Then fighting finds the target, turns to face the target and then melees with the target.

00:45:08,990 --> 00:45:13,630
And it has a range there that it has to be within three meters of that target or else

00:45:13,630 --> 00:45:16,100
it's going to be out of range.

00:45:16,100 --> 00:45:20,350
And then I have a chase one there, too, that chases the target if the target's running

00:45:20,350 --> 00:45:21,770
around.

00:45:21,770 --> 00:45:28,120
So if you look below you'll see in the--the third reaction down there.

00:45:28,120 --> 00:45:32,330
If the--if it gets an events from the server or perception that's called--that's called

00:45:32,330 --> 00:45:36,350
attack, then it knows that it's been attacked.

00:45:36,350 --> 00:45:40,790
And so it's going to override whatever behavior it currently has and immediately implement

00:45:40,790 --> 00:45:42,010
the fight behavior.

00:45:42,010 --> 00:45:45,712
And so, fight then is going to turn to face the--it's going to locate the target and turn

00:45:45,712 --> 00:45:50,490
to face it and then melee it.

00:45:50,490 --> 00:45:53,030
Damage is the fourth one down there.

00:45:53,030 --> 00:45:59,220
It adds to the fight, but then the weight factor here means that the hate list is getting

00:45:59,220 --> 00:46:05,600
updated proportionally to the amount of damage that was being done by that particular--the

00:46:05,600 --> 00:46:07,180
person who's attacking it.

00:46:07,180 --> 00:46:13,450
We have more sophisticated things in mind for that where some mobs may hate the use

00:46:13,450 --> 00:46:19,210
of magic against them more than they hate, you know, melee attacks or they may hate slashing

00:46:19,210 --> 00:46:22,590
damage more than they hate blunt damage or something like that.

00:46:22,590 --> 00:46:24,850
So we'll just have to see how that goes.

00:46:24,850 --> 00:46:27,190
But then you'll notice the second to last reaction there.

00:46:27,190 --> 00:46:31,710
So it's target out of range and it switches to the chase behavior.

00:46:31,710 --> 00:46:34,060
So, you know, it stops fighting and it starts chasing.

00:46:34,060 --> 00:46:40,030
And then when it gets back in range it starts--you know, it automatically--the need to chase

00:46:40,030 --> 00:46:44,800
drops down when it catches the guy and then fight now again becomes the highest priority

00:46:44,800 --> 00:46:48,400
one and it falls back to fighting.

00:46:48,400 --> 00:46:52,950
And then death basically tells it to stop fighting after--you know, when the player

00:46:52,950 --> 00:46:54,480
dies, it's time to stop fighting.

00:46:54,480 --> 00:46:59,300
You don't want to sit there and keep hacking.

00:46:59,300 --> 00:47:00,300
Okay.

00:47:00,300 --> 00:47:03,050
How am I doing with time?

00:47:03,050 --> 00:47:04,050
Okay.

00:47:04,050 --> 00:47:08,570
Game Security in Open Source is almost an oxymoron because the whole idea is that we're

00:47:08,570 --> 00:47:09,920
giving people the keys of the kingdom.

00:47:09,920 --> 00:47:13,900
They can build their own executables and connect to our server with them.

00:47:13,900 --> 00:47:19,410
And so it's a never-ending kind of battle and a thought process that we're always in

00:47:19,410 --> 00:47:24,430
to see what are the cheats that are possible by adding a certain feature and then do we

00:47:24,430 --> 00:47:25,910
care about those treats or not.

00:47:25,910 --> 00:47:30,220
So I put up these pictures to show you that modifying textures is a favorite pass time

00:47:30,220 --> 00:47:32,340
of the fans.

00:47:32,340 --> 00:47:35,050
And so somebody made a Simpsons mod for the game.

00:47:35,050 --> 00:47:38,990
And they have zip files up there and you can download this and overlay it on your PlaneShift

00:47:38,990 --> 00:47:44,440
install and make all your characters look like people out of The Simpsons.

00:47:44,440 --> 00:47:46,690
So, anyway.

00:47:46,690 --> 00:47:47,810
Okay.

00:47:47,810 --> 00:47:50,300
So, hacked clients are trivial.

00:47:50,300 --> 00:47:54,770
And I listed out a bunch of different ways that the stuff can be hacked.

00:47:54,770 --> 00:47:56,340
So, speed hacks.

00:47:56,340 --> 00:48:00,400
You know, everybody--anybody who's played one of these games knows that it is a giant

00:48:00,400 --> 00:48:01,400
pain.

00:48:01,400 --> 00:48:04,330
You have to run from one end of a zone to the other.

00:48:04,330 --> 00:48:08,972
And so you could have a 20-minute run to get somewhere if you--if you don't have the right

00:48:08,972 --> 00:48:11,060
teleport spell or what have you.

00:48:11,060 --> 00:48:14,620
So people will just hack their client and now they can run 10 times as fast if they

00:48:14,620 --> 00:48:15,820
press another button.

00:48:15,820 --> 00:48:19,930
Well, we need to detect that and do something about that.

00:48:19,930 --> 00:48:23,300
Same with teleportation and anti-gravity, things like that.

00:48:23,300 --> 00:48:26,180
Those are all kind of fall under the movement hack thing.

00:48:26,180 --> 00:48:29,760
Visibility mods are another one.

00:48:29,760 --> 00:48:34,480
We had a--in the case of the one meter gemstone.

00:48:34,480 --> 00:48:39,360
We had a guy who modified his client and made the gemstone 1,000 times as big.

00:48:39,360 --> 00:48:43,080
So when it was propagated it was the size of a city and he could--he could see it immediately

00:48:43,080 --> 00:48:47,030
and that's why we actually implemented that one meter range so that he couldn't see us

00:48:47,030 --> 00:48:48,300
just by modifying his mesh.

00:48:48,300 --> 00:48:50,830
You know, just the 3d model on his--on his desktop though.

00:48:50,830 --> 00:48:53,750
It was--there would be no way for us to detect that.

00:48:53,750 --> 00:48:57,750
So we have to make it inherently secure from things that we can't detect.

00:48:57,750 --> 00:49:02,960
Bots and macroing are another big problem for things--this normally applies with the

00:49:02,960 --> 00:49:07,600
trades more so than with things like combat where we have smithing, we have mining, we

00:49:07,600 --> 00:49:10,300
have wood carving and things like that.

00:49:10,300 --> 00:49:13,120
These are very repetitive activities where you're sitting there and you're just trying

00:49:13,120 --> 00:49:19,100
to get ore so that you can, you know, smelt it down and make gold bars or what have you.

00:49:19,100 --> 00:49:25,940
And so there somebody can write a macro and then, you know, dig and then move a meter

00:49:25,940 --> 00:49:29,540
over, and then dig again, and move a meter over, and make a big box and just keep doing

00:49:29,540 --> 00:49:30,540
it.

00:49:30,540 --> 00:49:32,250
It turns out to be really hard to detect.

00:49:32,250 --> 00:49:36,890
So--and we put in some to detect it and then they get around their detection because they

00:49:36,890 --> 00:49:39,620
can download our code and see what we're doing to detect it.

00:49:39,620 --> 00:49:40,620
Okay.

00:49:40,620 --> 00:49:45,000
So collision detection hacks are another one; running through walls.

00:49:45,000 --> 00:49:49,370
You know, we try to set up a maze and they just run all the way through to the end by

00:49:49,370 --> 00:49:52,520
turning off collision detection.

00:49:52,520 --> 00:49:54,530
Map hacks are another one.

00:49:54,530 --> 00:49:55,890
Don't remove the collision detection.

00:49:55,890 --> 00:49:59,390
Just take out all the walls and run to the target in the maze, okay?

00:49:59,390 --> 00:50:03,810
So there are things like that that, you know, we have a problem with that most commercial

00:50:03,810 --> 00:50:04,810
games don't.

00:50:04,810 --> 00:50:05,950
Item art hacks.

00:50:05,950 --> 00:50:08,150
I kind of talked about that with the gemstones.

00:50:08,150 --> 00:50:12,880
And then texture mods was kind of that Simpsons thing that people do for fun just to--well

00:50:12,880 --> 00:50:15,390
I've seen the Simpsons one.

00:50:15,390 --> 00:50:20,070
My personal favorite is ninja shift where they made everybody look like ninjas.

00:50:20,070 --> 00:50:24,860
And so there are bunch of those out there.

00:50:24,860 --> 00:50:28,080
So I kind of group these into three basic areas.

00:50:28,080 --> 00:50:32,150
There's kind of low impact things that there's really no defense against.

00:50:32,150 --> 00:50:35,980
Texture mods are really the first one--or kind of the main one there.

00:50:35,980 --> 00:50:38,090
But there's also really not a lot of impact to that.

00:50:38,090 --> 00:50:39,090
People do it.

00:50:39,090 --> 00:50:40,090
They think it's fun.

00:50:40,090 --> 00:50:41,090
It's harmless.

00:50:41,090 --> 00:50:42,090
It's not messing up anybody else's gameplay.

00:50:42,090 --> 00:50:45,510
It doesn't make anybody look like The Simpsons on their machine.

00:50:45,510 --> 00:50:49,490
It's only on the machine that has The Simpsons mod installed on it.

00:50:49,490 --> 00:50:51,130
So they're really kind of only affecting themselves.

00:50:51,130 --> 00:50:54,960
It's not that big of a deal.

00:50:54,960 --> 00:50:59,410
The high impact ones that are easy to defend are things like visibility mods.

00:50:59,410 --> 00:51:04,350
And this is where our proximity list come into play where we really use those to where

00:51:04,350 --> 00:51:11,370
the client simply doesn't have the information to ever show it or display it in a way that's--will

00:51:11,370 --> 00:51:14,310
give the player an advantage.

00:51:14,310 --> 00:51:16,300
And then the speed and teleport ones.

00:51:16,300 --> 00:51:22,200
Well, we can have the server not just blindly accept any dead reckoning update from the--from

00:51:22,200 --> 00:51:23,200
the clients.

00:51:23,200 --> 00:51:25,760
They can actually compare it before and after positions and make sure that that's authorized.

00:51:25,760 --> 00:51:31,540
For speed and teleporting, you can kind of just do a distance and a time interval and

00:51:31,540 --> 00:51:32,730
[INDISTINCT] and it's really straightforward.

00:51:32,730 --> 00:51:38,680
There are some--because of latency on the network and kind of jitter in that latency,

00:51:38,680 --> 00:51:40,410
in the UDP.

00:51:40,410 --> 00:51:45,750
It's harder than it sounds to be perfect but you can make it a lot better to where it's

00:51:45,750 --> 00:51:48,940
not just open season on whatever you want.

00:51:48,940 --> 00:51:50,270
Okay.

00:51:50,270 --> 00:51:56,690
So, then bots and macroing I was describing.

00:51:56,690 --> 00:51:59,930
These are the high impact ones that are hard to defend against.

00:51:59,930 --> 00:52:04,960
And these are the ones that Andrew and I have spent months and months on with very little

00:52:04,960 --> 00:52:07,740
success of [INDISTINCT].

00:52:07,740 --> 00:52:12,020
It's extremely hard to detect automatically because, again, the code that we're using

00:52:12,020 --> 00:52:16,080
to detect it is in the--is out there for everybody to see.

00:52:16,080 --> 00:52:21,220
So smart players download that and see how we're doing it and modify their macros to

00:52:21,220 --> 00:52:23,890
evade our detection.

00:52:23,890 --> 00:52:27,820
So what we're trying to do is we're trying to focus on the law of diminishing returns

00:52:27,820 --> 00:52:34,381
so that if you, you know, mine for gold or dig for gold in the same--you know, over and

00:52:34,381 --> 00:52:37,770
over and over, maybe that's valuable the first 50 times you do it.

00:52:37,770 --> 00:52:42,190
But if you do it 1,000 times, it's not 20 times more valuable and if you do it 50 times.

00:52:42,190 --> 00:52:44,950
Eventually you'll get to where you just never find it.

00:52:44,950 --> 00:52:49,440
And so by doing that--an average human player isn't going to have the endurance to do that.

00:52:49,440 --> 00:52:52,360
They need to go often and do other activities and then come back.

00:52:52,360 --> 00:52:56,280
And that's how we're going to basically try to make botting harder to do and not worry

00:52:56,280 --> 00:52:57,650
about whether we detect it or not.

00:52:57,650 --> 00:52:59,440
We'll just not make it valuable.

00:52:59,440 --> 00:53:03,250
So we're trying to reduce the impact rather than improve the detection.

00:53:03,250 --> 00:53:04,250
Yes.

00:53:04,250 --> 00:53:10,110
>> [INDISTINCT] the problem with [INDISTINCT] like watching different repetitive tasks or...

00:53:10,110 --> 00:53:11,820
>> FULTON: Yes, yes.

00:53:11,820 --> 00:53:12,820
Absolutely.

00:53:12,820 --> 00:53:13,820
Yes.

00:53:13,820 --> 00:53:15,980
So, they could dig for gold and then they could farm and then they could go back to

00:53:15,980 --> 00:53:16,980
dig for gold.

00:53:16,980 --> 00:53:17,980
Yes.

00:53:17,980 --> 00:53:19,900
So, I mean, it's a big problem.

00:53:19,900 --> 00:53:25,370
So, the other--the other thing that we do is we try to engender a player culture where

00:53:25,370 --> 00:53:27,860
they basically read each other out.

00:53:27,860 --> 00:53:32,980
And the game masters can be alerted that somebody's botting and then the game masters will kick

00:53:32,980 --> 00:53:36,080
those people out or ban them from the game.

00:53:36,080 --> 00:53:37,080
Yes.

00:53:37,080 --> 00:53:46,860
>> [INDISTINCT] macro and then--so that everybody [INDISTINCT].

00:53:46,860 --> 00:53:51,461
>> FULTON: Could we give them--you mean could we do that?

00:53:51,461 --> 00:53:52,860
Is that what you're asking?

00:53:52,860 --> 00:53:53,860
>> Well, yes.

00:53:53,860 --> 00:53:57,490
Instead of trying to [INDISTINCT] part of the game.

00:53:57,490 --> 00:53:58,940
>> Yes, we could do that.

00:53:58,940 --> 00:54:02,990
Star Wars Galaxy did a lot of that where you could set up automated--kind of repetitive

00:54:02,990 --> 00:54:04,830
activities and then log off.

00:54:04,830 --> 00:54:09,170
And when you log back in, you have 1,000 gold pieces from your repetitive activity.

00:54:09,170 --> 00:54:10,280
Yes.

00:54:10,280 --> 00:54:13,710
I mean those are all options and I think they kind of have to just be on a case by case

00:54:13,710 --> 00:54:18,370
basis as we figure out what people are tempted to do as to how we want to address it.

00:54:18,370 --> 00:54:22,890
But if you want to have any kind of economy in the game, you can't make everything easily

00:54:22,890 --> 00:54:23,890
automatable.

00:54:23,890 --> 00:54:24,890
Yes.

00:54:24,890 --> 00:54:26,820
>> [INDISTINCT] id you let them do that, you know.

00:54:26,820 --> 00:54:31,240
[INDISTINCT] tags along and, you know, killed [INDISTINCT].

00:54:31,240 --> 00:54:32,340
>> FULTON: Yes.

00:54:32,340 --> 00:54:39,410
>> That's going to be a bigger [INDISTINCT] than anything else.

00:54:39,410 --> 00:54:41,350
>> FULTON: Yes.

00:54:41,350 --> 00:54:47,390
PVP in our games has been a big controversy from the beginning because some people really

00:54:47,390 --> 00:54:50,230
like PVP and they want kind of free-for-all.

00:54:50,230 --> 00:54:54,520
They want to kill anybody and gank anybody that they want at any time and they think

00:54:54,520 --> 00:54:58,470
that's the most realistic way to structure the world.

00:54:58,470 --> 00:55:02,950
Other people really are kind of the care bears out there and they don't like any of that

00:55:02,950 --> 00:55:03,950
at all.

00:55:03,950 --> 00:55:09,600
And so what we have in PlaneShift is we basically have an opt-in system to free-for-all PVP.

00:55:09,600 --> 00:55:14,560
And so we have a system called duels where players can challenge each other to duels.

00:55:14,560 --> 00:55:19,890
And then if you don't have kind of auto accept turned on, then a box will pop up of "Do you

00:55:19,890 --> 00:55:21,790
want to accept the duel or not?"

00:55:21,790 --> 00:55:26,720
If you--and then you can kind of set that to either pop up a box, auto decline, or auto

00:55:26,720 --> 00:55:27,780
accept.

00:55:27,780 --> 00:55:32,110
And so the people that are out there that like free-for-all PVPing set their thing to

00:55:32,110 --> 00:55:34,430
auto accept and they just attack each other.

00:55:34,430 --> 00:55:35,430
Yes.

00:55:35,430 --> 00:55:37,550
Andrew, is it time?

00:55:37,550 --> 00:55:39,860
I think I'm done.

00:55:39,860 --> 00:55:42,780
So the--just my last slide here.

00:55:42,780 --> 00:55:44,030
The website is planeshift.it.

00:55:44,030 --> 00:55:46,690
Luca is in Italy.

00:55:46,690 --> 00:55:48,490
He lives Terni.

00:55:48,490 --> 00:55:52,540
And so he started the project and this is his website so everything ends in .it.

00:55:52,540 --> 00:55:53,800
He's reachable there.

00:55:53,800 --> 00:55:57,060
And then my email address is there as well if you want to follow-up.

00:55:57,060 --> 00:56:01,540
And if you any of you would like to contribute to the game, we'd love to have you in--on

00:56:01,540 --> 00:56:05,730
any of those teams depending on what you're interested in contributing.

00:56:05,730 --> 00:56:13,010
>> Does anyone have a question?

00:56:13,010 --> 00:56:18,070
>> Could you explain a bit more about [INDISTINCT] close source media and why you decide to go

00:56:18,070 --> 00:56:19,070
down that route?

00:56:19,070 --> 00:56:20,070
>> FULTON: Sure.

00:56:20,070 --> 00:56:25,130
>> Because it's been one of the major factors why I personally haven't contributed to PlaneShift,

00:56:25,130 --> 00:56:31,410
contributed to some of the other [INDISTINCT] MMORPGs because I can't then reuse the [INDISTINCT]

00:56:31,410 --> 00:56:34,609
like that that's there in my own type of stuff.

00:56:34,609 --> 00:56:36,390
>> FULTON: Right.

00:56:36,390 --> 00:56:37,390
Yes.

00:56:37,390 --> 00:56:41,770
You know, there are a lot of schools of--you know, a couple different schools of thought

00:56:41,770 --> 00:56:45,470
on it and people who feel strongly about it and I've had this argument online with people

00:56:45,470 --> 00:56:46,470
a million times.

00:56:46,470 --> 00:56:50,970
But, I mean, it basically comes down to that our philosophy is that we want PlaneShift

00:56:50,970 --> 00:56:55,090
to be PlaneShift and we want the artist who are contributing to the game to know that

00:56:55,090 --> 00:56:59,550
they're contributing to our game and not to somebody else's game that is going to misuse

00:56:59,550 --> 00:57:02,840
their characters or misuse their art in a way that they don't want it used.

00:57:02,840 --> 00:57:08,740
And so I think the perception of a--some people on the team just don't care but the--but a

00:57:08,740 --> 00:57:13,270
lot of the perception is that the people out there who are rabidly Open Source and want--not

00:57:13,270 --> 00:57:17,780
only the code to be Open Source but they also want the content and all the music and everything

00:57:17,780 --> 00:57:23,190
to be reusable is basically they want--they basically want that to benefit themselves

00:57:23,190 --> 00:57:25,180
and not to benefit the rest of the community.

00:57:25,180 --> 00:57:26,690
They just want to be able to play with it.

00:57:26,690 --> 00:57:31,130
And so we're trying to keep the game to have as much integrity as possible and to kind

00:57:31,130 --> 00:57:32,800
of have its own identity.

00:57:32,800 --> 00:57:34,120
The engine's out there and it's reusable.

00:57:34,120 --> 00:57:39,670
And it's actually been reused by at least one other project or maybe two that have used

00:57:39,670 --> 00:57:44,450
the--to use the engine with their own content to create entirely different concepts from

00:57:44,450 --> 00:57:47,180
even the MMO concept.

00:57:47,180 --> 00:57:50,700
So it's been really fascinating watching them do that and we totally support that.

00:57:50,700 --> 00:57:56,130
But using--reusing the artwork and reusing the models and the music and all other stuff,

00:57:56,130 --> 00:58:01,120
I mean it's--I think the current download is somewhere around 330 meg to install the

00:58:01,120 --> 00:58:07,310
game and so there's an awful lot of RS that's out there that if somebody were to take those

00:58:07,310 --> 00:58:10,650
and use them in a million different things, then all of a sudden PlaneShift wouldn't be

00:58:10,650 --> 00:58:14,470
as unique and as special anymore as it is today.

00:58:14,470 --> 00:58:21,310
And that's something that our artists like about contributing to the game as well.

00:58:21,310 --> 00:58:24,840
Anybody else?

00:58:24,840 --> 00:58:26,600
Okay.

00:58:26,600 --> 00:58:33,400

YouTube URL: https://www.youtube.com/watch?v=tKSYJYV_RGs


