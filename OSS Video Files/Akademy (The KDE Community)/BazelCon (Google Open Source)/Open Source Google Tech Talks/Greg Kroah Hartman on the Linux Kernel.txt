Title: Greg Kroah Hartman on the Linux Kernel
Publication date: 2010-10-27
Playlist: Open Source Google Tech Talks
Description: 
	Google Tech Talks
June,  5 2008

ABSTRACT

The Linux Kernel, who is developing it, how they are doing it,
 and why you should care.

 This talk describes the rate of development for the Linux
 kernel, and how the development model is set up to handle such a
 large and diverse developer population and huge rate of change.
 It will detail who is doing the work, and what companies, if
 any, are sponsering it. Finally, it will go into why companies
 like Google, and any other that uses or depends on Linux, should
 care about this development. Lots of numbers and pretty graphs
 will be shown to keep the audience awake.

Speaker: Greg Kroah Hartman
 Greg Kroah-Hartman is a Linux kernel maintainer for the USB,
 driver core, sysfs, and debugfs portions of the kernel as well
 as being one half of the -stable kernel release team. He
 currently works for Novell as a Fellow doing various kernel
 related things and has written a few books from O'Reilly about
 Linux development in the past.
Captions: 
	00:00:16,390 --> 00:00:17,390
>> Hi everybody.

00:00:17,390 --> 00:00:21,300
Since we started a little bit late, Iím going to keep this nice and short unlike our guest,

00:00:21,300 --> 00:00:24,109
Greg, who is quite tall.

00:00:24,109 --> 00:00:25,109
And--yeah.

00:00:25,109 --> 00:00:30,340
This actually--it rose out of a discussion we were having between some Kernel folks that

00:00:30,340 --> 00:00:35,320
I know, and Bryan [INDISTINCT] and right over here, about sort of the nature of the embedded

00:00:35,320 --> 00:00:36,510
system--what's that?

00:00:36,510 --> 00:00:39,190
>> It might not [INDISTINCT] >> Well, no, I mean, like from outside the

00:00:39,190 --> 00:00:42,121
company, inside the company like--donít--I'm speaking here.

00:00:42,121 --> 00:00:43,121
All right?

00:00:43,121 --> 00:00:44,121
>> Go ahead.

00:00:44,121 --> 00:00:47,000
>> Anyway, and so, you know, at the end of this today, I want you to come out and speak.

00:00:47,000 --> 00:00:50,120
It would be fun for us and fun for you and stuff.

00:00:50,120 --> 00:00:51,680
So, here we are, Greg.

00:00:51,680 --> 00:00:52,680
>> HARTMAN: Thanks.

00:00:52,680 --> 00:00:54,010
Is this working?

00:00:54,010 --> 00:00:55,010
All right.

00:00:55,010 --> 00:00:59,150
I'm Greg Kroah Hartman, Iím a Linux Kernel developer.

00:00:59,150 --> 00:01:05,400
Iím a sub-system maintainer of the Kernel for USB, driver Core, I used to do PCI, I

00:01:05,400 --> 00:01:07,210
like to see all the weird things.

00:01:07,210 --> 00:01:11,130
I'm one half of the stable Kernel maintainer group which I'll talk about later.

00:01:11,130 --> 00:01:15,830
So here, we're going to talk about the Kernel, the process, who's doing it, how itís being

00:01:15,830 --> 00:01:21,590
done, why you should care and why Google should care and things like that.

00:01:21,590 --> 00:01:24,930
Please tackle--ask questions in the middle, I like it.

00:01:24,930 --> 00:01:26,020
Make fun of me.

00:01:26,020 --> 00:01:27,020
I'm going to make fun of you.

00:01:27,020 --> 00:01:28,020
So, beat them.

00:01:28,020 --> 00:01:29,080
So, first thing.

00:01:29,080 --> 00:01:31,590
This is the most important thing, donít get anything.

00:01:31,590 --> 00:01:32,590
Realize this.

00:01:32,590 --> 00:01:37,920
This is what the Linux Kernel do for the past year and a half from the 2.6.20 to 2.6.25

00:01:37,920 --> 00:01:39,060
Kernel.

00:01:39,060 --> 00:01:43,480
This is what was changed per day in the Kernel.

00:01:43,480 --> 00:01:45,980
This is a stable Kernel.

00:01:45,980 --> 00:01:48,729
This is a stable development process.

00:01:48,729 --> 00:01:50,420
This is freaking insane.

00:01:50,420 --> 00:01:58,369
It is the fastest moving so--project--so--software project known to anybody.

00:01:58,369 --> 00:02:04,150
Largest project of its kind known to anybody but it's also created a result thatís never

00:02:04,150 --> 00:02:07,640
been done before and we have an operating system that supports more devices than any

00:02:07,640 --> 00:02:09,590
of our operating system ever has.

00:02:09,590 --> 00:02:13,570
We support more processors than any other operating system ever has in the history of

00:02:13,570 --> 00:02:14,570
computing.

00:02:14,570 --> 00:02:18,470
And we're doing it in an open manner, in a very chaotic manner.

00:02:18,470 --> 00:02:22,760
Moving at a rate, that fast; shipping something thatís stable, that everybody, including

00:02:22,760 --> 00:02:26,200
yourself, uses everyday.

00:02:26,200 --> 00:02:30,000
We broke all the software development rules and we're continuing to break it.

00:02:30,000 --> 00:02:34,680
If that doesnít make you guys scared, it should.

00:02:34,680 --> 00:02:38,620
The biggest thing to that make you guys--should make you guys scared is, if you keep your

00:02:38,620 --> 00:02:41,989
code outside the Kernel, thatís going to pass you by.

00:02:41,989 --> 00:02:46,370
Do you think you can keep up with that kind of rate of change, figure out what's going

00:02:46,370 --> 00:02:48,010
on with that rate of change?

00:02:48,010 --> 00:02:51,160
If you get your code into the Kernel, that rate of change will happen to you automatically.

00:02:51,160 --> 00:02:53,470
If you donít, it will blow you by.

00:02:53,470 --> 00:02:55,000
So, get your code in the Kernel.

00:02:55,000 --> 00:02:56,569
It's the main thing I want to talk about.

00:02:56,569 --> 00:02:57,950
So, thatís it.

00:02:57,950 --> 00:02:58,950
Thatís crazy.

00:02:58,950 --> 00:03:04,330
And also, this is the first question people ask like, "Oh, thatís jus drivers, right?

00:03:04,330 --> 00:03:06,450
Drivers are changing that fast.î No.

00:03:06,450 --> 00:03:07,480
It's the whole Kernel.

00:03:07,480 --> 00:03:12,890
I looked at it, Iíve broke it down by the proportion of the code--size of the Kernel.

00:03:12,890 --> 00:03:15,470
The Kernel is about nine million lines of code.

00:03:15,470 --> 00:03:19,299
The Core--the Kernelís five percent, driverís a little over 50%, 25%.

00:03:19,299 --> 00:03:25,200
If you look at the rate of change at each individual portion, it's exactly proportion--itís

00:03:25,200 --> 00:03:28,739
exactly proportional to the amount of code thatís in the Kernel for that section.

00:03:28,739 --> 00:03:32,620
So, the Core of the Kernel is changing at 5% of that rate.

00:03:32,620 --> 00:03:35,549
The driver section is changing at 55% of that rate.

00:03:35,549 --> 00:03:39,489
The architecture specific spot is going up--what is that?

00:03:39,489 --> 00:03:41,659
I donít know, it's going at 30% of that rate.

00:03:41,659 --> 00:03:42,659
So, it's uniform.

00:03:42,659 --> 00:03:43,659
It's flat across the whole thing.

00:03:43,659 --> 00:03:48,670
So, donít think that just--that the drivers are changing, it's the whole thing; it's everything.

00:03:48,670 --> 00:03:53,880
So, and along with that rate of change, it breaks down to this.

00:03:53,880 --> 00:03:56,200
It's going really fast.

00:03:56,200 --> 00:03:59,730
Three point sixty nine changes an hour, 24 hours a day, seven days a week.

00:03:59,730 --> 00:04:05,269
During the 2.5, the 2.6 development cycle, we're running about 2.5 changes an hour.

00:04:05,269 --> 00:04:08,239
And that was unheard of; no way that Iíd ever thought we could do that.

00:04:08,239 --> 00:04:10,390
Since then, we've been going up.

00:04:10,390 --> 00:04:12,930
I donít know why.

00:04:12,930 --> 00:04:14,640
We're getting faster.

00:04:14,640 --> 00:04:15,640
We're getting faster.

00:04:15,640 --> 00:04:18,280
We're doing more rate of change and it's getting bigger.

00:04:18,280 --> 00:04:21,299
So, this is some of itís staple.

00:04:21,299 --> 00:04:23,530
So, here's our graph.

00:04:23,530 --> 00:04:27,159
If you want to see all the--that lines of code that are added and modified, diluted

00:04:27,159 --> 00:04:29,140
over time, I just did for the 26 [INDISTINCT] and long.

00:04:29,140 --> 00:04:33,100
If you look--if you used that, it was a little bit less.

00:04:33,100 --> 00:04:36,849
So, it's--itís really--itís kind of staying around the same but at lines out, it keeps

00:04:36,849 --> 00:04:37,849
going up.

00:04:37,849 --> 00:04:38,979
Thatís interesting.

00:04:38,979 --> 00:04:42,960
Thatís not really trend worthy but it is continuously going up.

00:04:42,960 --> 00:04:45,750
But itís trend worthy is the changes per hour.

00:04:45,750 --> 00:04:48,080
It's continuing to go up.

00:04:48,080 --> 00:04:53,289
2.6.25 changes per hour is amazing . Well, that rate of change does not included moving

00:04:53,289 --> 00:04:54,289
files around.

00:04:54,289 --> 00:04:56,720
Moving files around the Kernel doesnít affect it at all.

00:04:56,720 --> 00:04:58,410
It does not change at all.

00:04:58,410 --> 00:05:03,380
So, we're going faster, doing more rate of change per hour per release.

00:05:03,380 --> 00:05:04,720
Everybody happy?

00:05:04,720 --> 00:05:06,720
Nobodyís questioning that?

00:05:06,720 --> 00:05:08,720
Oh, come on.

00:05:08,720 --> 00:05:10,060
All right.

00:05:10,060 --> 00:05:11,540
So, how we do this?

00:05:11,540 --> 00:05:12,940
Hereís how we do this.

00:05:12,940 --> 00:05:16,640
Extensively, it starts off at the developer on the bottom to make a change to a file,

00:05:16,640 --> 00:05:20,089
to--they find a bug, they want to add a new driver, do something.

00:05:20,089 --> 00:05:23,451
Then it takes that change, the path, should they send it off to the maintainer or the

00:05:23,451 --> 00:05:24,740
driver of the file.

00:05:24,740 --> 00:05:30,640
In the Kernel, we have about 600 unique maintainers that are listed on who owns what.

00:05:30,640 --> 00:05:34,800
You canít find what--who owns what, you can look in the file using git and see who modified

00:05:34,800 --> 00:05:35,800
it last.

00:05:35,800 --> 00:05:38,260
Whoever touched the floppy driver last is the maintainer.

00:05:38,260 --> 00:05:40,110
Never touch the floppy driver.

00:05:40,110 --> 00:05:45,320
So, that personís responsible for looking at it and then they see it, they review it

00:05:45,320 --> 00:05:46,800
and then they sign off by it.

00:05:46,800 --> 00:05:48,390
They say, ìThis looks good to me.

00:05:48,390 --> 00:05:51,159
I think itís okay.î And they add their signature called Sign Off.

00:05:51,159 --> 00:05:52,909
And Iíll talk a little bit more about that later.

00:05:52,909 --> 00:05:55,060
So, the developer says, the sign off, itís good.

00:05:55,060 --> 00:05:56,060
They say itís good.

00:05:56,060 --> 00:05:58,720
They send it off on to the subsystem maintainer.

00:05:58,720 --> 00:06:04,810
Subsystem maintainer like USB, PCI, BFS, security, Core, things like that.

00:06:04,810 --> 00:06:08,950
They consolidate all the patches from all data people and then they hold on to them.

00:06:08,950 --> 00:06:10,730
They create this little mini trees everywhere.

00:06:10,730 --> 00:06:15,470
These little mini trees are either in gits, using quilt, somebody--I think thatís all

00:06:15,470 --> 00:06:17,140
everybody uses, some tarballs maybe.

00:06:17,140 --> 00:06:21,200
And then all that, every night gets pulled into the Linux-next Tree.

00:06:21,200 --> 00:06:24,339
Itís from Steven Rothwell in Australia.

00:06:24,339 --> 00:06:27,779
Which--for IBM, the Aus labs.

00:06:27,779 --> 00:06:33,520
He pulls it in every night, the Linux-next Tree merges them all together and sees if

00:06:33,520 --> 00:06:34,520
it builds or not.

00:06:34,520 --> 00:06:37,409
Sends you angry emails or you break the bill or you break the merge, itís great.

00:06:37,409 --> 00:06:38,409
Itís awesome.

00:06:38,409 --> 00:06:42,430
Itís testing all the subsystem maintainer stuff for all our development things.

00:06:42,430 --> 00:06:47,090
Andrew at the same is creating--is now relying on Linux next and sucking everything in the

00:06:47,090 --> 00:06:50,330
host tree, about once a week or so.

00:06:50,330 --> 00:06:54,580
And then also, he pulls things from the Linux Kernel Mailing List, a sort of mailing list

00:06:54,580 --> 00:06:58,430
that happen to get drop by subsystem maintainers or whatnot, he gets--he sucks those under

00:06:58,430 --> 00:07:01,530
his tree and everybody--and then he does a release every couple of weeks.

00:07:01,530 --> 00:07:03,890
So thatís testing, this is the developmental stuff.

00:07:03,890 --> 00:07:07,240
So all the crazy stuff the subsystem maintainers are holding on to, all the stuff thatís coming

00:07:07,240 --> 00:07:12,050
across the mailing list but Andrew picks it up, gets pulled to these releases.

00:07:12,050 --> 00:07:15,040
Then when Linus says itís the merge tree--windows open.

00:07:15,040 --> 00:07:17,070
Iíll talk more about that later.

00:07:17,070 --> 00:07:18,550
All the subsystem maintainers hit Linus.

00:07:18,550 --> 00:07:22,209
We got two weeks to hit Linus with all the changes you want.

00:07:22,209 --> 00:07:23,880
We all go to Linus.

00:07:23,880 --> 00:07:27,391
Andrew sends a bunch of stuff to Linus after the subsystem maintainers get there and then

00:07:27,391 --> 00:07:28,700
we go on, the cycle releases.

00:07:28,700 --> 00:07:30,580
Iíll talk more about releases later.

00:07:30,580 --> 00:07:32,599
So, nice little tree structure.

00:07:32,599 --> 00:07:36,900
So, Linus and Andrew and the next tree.

00:07:36,900 --> 00:07:38,240
Does that make sense?

00:07:38,240 --> 00:07:39,350
Nice hierarchy, right?

00:07:39,350 --> 00:07:40,360
Nice and pretty.

00:07:40,360 --> 00:07:41,880
So, Iíd try to graph this.

00:07:41,880 --> 00:07:45,380
Looking at the relationship between people and the work--way patches flow to the tree.

00:07:45,380 --> 00:07:47,229
I think itíd be a nice pyramid or whatnot.

00:07:47,229 --> 00:07:48,229
It turned out, it isnít.

00:07:48,229 --> 00:07:52,940
I made a graph that was about 40 feet long and 4 feet tall, of one Kernel release.

00:07:52,940 --> 00:07:54,160
It was a mess.

00:07:54,160 --> 00:07:56,210
Itís a big giant spaghetti mess.

00:07:56,210 --> 00:07:58,349
It looks like an internet routing system.

00:07:58,349 --> 00:08:02,590
And which is good because it means that, if this person doesnít pay attention, we route

00:08:02,590 --> 00:08:05,960
the packets around them, Andrew picks it up and then sends it to subsystem maintainer,

00:08:05,960 --> 00:08:09,452
it sends it to Linus or this person sends it directly to there and goes around the maintainer

00:08:09,452 --> 00:08:11,150
or this person disappears for a week.

00:08:11,150 --> 00:08:12,150
So, itís very good.

00:08:12,150 --> 00:08:13,150
Itís lossy.

00:08:13,150 --> 00:08:15,959
We can handle people disappearing, handle people come--reappearing and it works out

00:08:15,959 --> 00:08:16,959
really well.

00:08:16,959 --> 00:08:21,409
It isnít a strict hierarchical development system which is good and it shows how we can

00:08:21,409 --> 00:08:24,200
keep up this massive rate of change so fast.

00:08:24,200 --> 00:08:25,830
Itís kind of scary.

00:08:25,830 --> 00:08:29,630
If you own a file or a driver, you need to accept the fact that other people are going

00:08:29,630 --> 00:08:33,070
to be changing it, extensively, without you knowing it but hopefully you should be paying

00:08:33,070 --> 00:08:36,469
attention and you just have to accept that so other people can do that.

00:08:36,469 --> 00:08:38,240
You can always change it back if you didnít like it.

00:08:38,240 --> 00:08:40,070
But thatís the way we get things done.

00:08:40,070 --> 00:08:43,800
Thatís how we can work so fast.

00:08:43,800 --> 00:08:45,149
Make sense?

00:08:45,149 --> 00:08:46,149
Cool.

00:08:46,149 --> 00:08:47,880
So, hereís a release cycle.

00:08:47,880 --> 00:08:50,660
So, Linus does the release based on something.

00:08:50,660 --> 00:08:52,130
We say itís good.

00:08:52,130 --> 00:08:53,970
So then, we have two weeks.

00:08:53,970 --> 00:08:55,953
We can throw anything we want at Linus.

00:08:55,953 --> 00:08:58,370
All the subsystem maintainers throw everything we want.

00:08:58,370 --> 00:09:02,420
Extensively, itís been tested in the Linux-next Tree, before that I have been testing the

00:09:02,420 --> 00:09:03,420
MM3 from Andrew.

00:09:03,420 --> 00:09:09,840
So, we hopefully expect that the code has been tested, it builds, it hopefully compiles

00:09:09,840 --> 00:09:11,560
sometimes and all merges.

00:09:11,560 --> 00:09:15,370
So, thatís when the hundreds of thousands of patches go in at once, two weeks.

00:09:15,370 --> 00:09:17,240
Linux releases an RC1 Kernel.

00:09:17,240 --> 00:09:20,840
Then the subsystem maintainers that--were on vacation or forgot about the merge window

00:09:20,840 --> 00:09:22,680
being open, wake up and say, ìOh, no.

00:09:22,680 --> 00:09:26,050
I forgot my stuff.î They send it to Linus again so, then goes an rc2 a couple of weeks

00:09:26,050 --> 00:09:27,050
later.

00:09:27,050 --> 00:09:28,050
Hopefully, thatís getting better.

00:09:28,050 --> 00:09:29,050
People are slowing down.

00:09:29,050 --> 00:09:31,360
Everything happens between rc1 and rc2.

00:09:31,360 --> 00:09:32,720
Then, its bug fixes.

00:09:32,720 --> 00:09:38,070
We start doing bug fixes, we track bug fixes, regressions, we do RC1, 3, 4, 5, whatever.

00:09:38,070 --> 00:09:42,120
Until we think things are slowing down and good enough and boom when it says, ìOkay.

00:09:42,120 --> 00:09:43,120
This oneís good.

00:09:43,120 --> 00:09:45,830
Out the door.î And then we start the whole cycle over again.

00:09:45,830 --> 00:09:48,590
There is no stable and unstable development trees anymore.

00:09:48,590 --> 00:09:53,670
You step odd was unstable and development even was stable, not anymore.

00:09:53,670 --> 00:09:56,870
For the past four years, weíve been doing this model.

00:09:56,870 --> 00:10:00,800
When we finally realize that this model really worked good, we said, we should try and do

00:10:00,800 --> 00:10:03,840
release every two to three months, right?

00:10:03,840 --> 00:10:07,650
If you look, weíre releasing on an average of every two and three quarter months, for

00:10:07,650 --> 00:10:12,470
the past three to four years, like Clockwork, you can trust that a new Kernel will come

00:10:12,470 --> 00:10:14,180
out between two and three months.

00:10:14,180 --> 00:10:15,630
This is a really, really good thing.

00:10:15,630 --> 00:10:19,950
Unless the up stream just rose, figure out in their schedules when things are going to

00:10:19,950 --> 00:10:24,210
be done within a--within a reasonable time frame that can plan when things are going

00:10:24,210 --> 00:10:25,210
to come out.

00:10:25,210 --> 00:10:28,680
The [INDISTINCT] can figure that out, developers can figure that out, ìI miss this merge window,

00:10:28,680 --> 00:10:31,910
whenís the next one going to come around?î You don't have to worry that their selves

00:10:31,910 --> 00:10:33,030
are going to get drop for forever.

00:10:33,030 --> 00:10:35,550
It works really, really well.

00:10:35,550 --> 00:10:39,730
One thing that happened though is we realized during these two to three month time, what's

00:10:39,730 --> 00:10:40,840
happens about security bugs?

00:10:40,840 --> 00:10:43,890
These are people that actually use the Kernel.org--Kernel.

00:10:43,890 --> 00:10:44,890
What happens then?

00:10:44,890 --> 00:10:47,230
Thereís bugs, security problems happen, what are we going to do?

00:10:47,230 --> 00:10:52,150
So, we formed--two people formed the stable tree which is me and Chris Wright who works

00:10:52,150 --> 00:10:59,270
for Red Hat and we do security updates or bug fixes; 0.1, 0.2, 0.3, 0.4, 0.5 and we

00:10:59,270 --> 00:11:02,550
have a real strict list of rules of what we will accept, what we won't accept.

00:11:02,550 --> 00:11:03,550
It's pretty easy.

00:11:03,550 --> 00:11:06,860
It has to be bug fixes only and security fixes.

00:11:06,860 --> 00:11:11,400
The patches have to be in the upstream tree already, unless thereís some really, really

00:11:11,400 --> 00:11:12,850
odd thing, things like that.

00:11:12,850 --> 00:11:14,200
It must be small, obvious.

00:11:14,200 --> 00:11:17,570
We do those releases every couple of weeks, whenever we get around to it.

00:11:17,570 --> 00:11:20,080
Sometimes we're slacking, sometimes we're not.

00:11:20,080 --> 00:11:22,210
Security updates, we can do it usually if we got an inbox.

00:11:22,210 --> 00:11:23,650
We can do it in couple of hours.

00:11:23,650 --> 00:11:26,410
So, we release things as soon as possible if we can.

00:11:26,410 --> 00:11:28,190
And that's working out really, really good.

00:11:28,190 --> 00:11:33,230
The fun things is, after the--we drop them, after 2.6.20 comes out, it might be one more

00:11:33,230 --> 00:11:36,180
2.6.1.9 stable and then we stop.

00:11:36,180 --> 00:11:37,180
We don't have to do it.

00:11:37,180 --> 00:11:38,910
Weíll have to maintain that for forever.

00:11:38,910 --> 00:11:41,240
You can maintain it for forever if you want to.

00:11:41,240 --> 00:11:45,520
Somebody picked up the 2.6.1.6 Kernel, decided to maintain it on his own for a long, long

00:11:45,520 --> 00:11:46,520
time.

00:11:46,520 --> 00:11:48,630
We all thought he was crazy.

00:11:48,630 --> 00:11:49,810
He got a job out of it.

00:11:49,810 --> 00:11:51,290
So, maybe he wasnít so crazy at all.

00:11:51,290 --> 00:11:53,380
So that he could do things over time.

00:11:53,380 --> 00:11:54,760
So, it worked out really well.

00:11:54,760 --> 00:11:58,950
If you want--if anybody wants the 2.6.2.4 Kernel to maintain it for a while, let me

00:11:58,950 --> 00:11:59,950
know.

00:11:59,950 --> 00:12:00,950
Weíll give it to you.

00:12:00,950 --> 00:12:01,950
We don't care.

00:12:01,950 --> 00:12:02,950
So, that's how it works.

00:12:02,950 --> 00:12:05,860
If itís stable, releases happen, development and releases happen and then we drop stable

00:12:05,860 --> 00:12:06,860
trees.

00:12:06,860 --> 00:12:10,060
So, we don't have to maintain them for forever, which given our rated change previously is

00:12:10,060 --> 00:12:11,490
a good thing to do.

00:12:11,490 --> 00:12:12,490
Makes sense?

00:12:12,490 --> 00:12:13,920
Everybody happy with that?

00:12:13,920 --> 00:12:15,140
Is it working?

00:12:15,140 --> 00:12:16,140
All right.

00:12:16,140 --> 00:12:21,210
>> So, you guys don't have an open analysis [INDISTINCT] every blogger really preferred

00:12:21,210 --> 00:12:24,340
at least [INDISTINCT] >> HARTMAN: We don't have a notion of a preferred

00:12:24,340 --> 00:12:25,340
release anymore, no.

00:12:25,340 --> 00:12:28,750
Every release is a preferred one, the latest one.

00:12:28,750 --> 00:12:32,800
Based on the rate of change, if you report a bug--a bug problem on 0.2--on 0.2 Kernels

00:12:32,800 --> 00:12:36,160
ago, it's given how fast Kernelís often changing.

00:12:36,160 --> 00:12:38,600
We're going to ask you, can you reproduce this on the current version?

00:12:38,600 --> 00:12:40,280
It's the first thing we're going to ask you.

00:12:40,280 --> 00:12:41,280
So, yeah.

00:12:41,280 --> 00:12:42,550
So, everythingís preferred.

00:12:42,550 --> 00:12:44,800
The last one is preferred.

00:12:44,800 --> 00:12:49,550
Now, note when the distros do releases, we know what Kernels are going to release.

00:12:49,550 --> 00:12:52,770
So, sometimes those Kernels hang around a little bit longer.

00:12:52,770 --> 00:12:56,100
Fedora and OpenSUSE are based on 2.6.2.5 right now.

00:12:56,100 --> 00:12:58,970
Odds are that Kernelís going to hang around for a little while because Chris Wright works

00:12:58,970 --> 00:13:00,420
Red Hat and I work for SUSE.

00:13:00,420 --> 00:13:04,260
So, weíll probably want to hold on to that Kernel for a little while longer, make sure

00:13:04,260 --> 00:13:05,810
bug fixes get in there and it's good.

00:13:05,810 --> 00:13:09,120
But, if you want the new features and things like that, you should go to the latest one.

00:13:09,120 --> 00:13:10,120
[INDISTINCT] Yeah.

00:13:10,120 --> 00:13:13,740
>> Why use the two-week merge window, why not the [INDISTINCT]

00:13:13,740 --> 00:13:18,420
>> HARTMAN: Why two-week window, merge [INDISTINCT] what?

00:13:18,420 --> 00:13:20,230
>> Why accept merges all the time?

00:13:20,230 --> 00:13:21,230
>> HARTMAN: Why Linus accepts merges all the time?

00:13:21,230 --> 00:13:23,250
Because we want to be able to throw a bunch of things and we wanted to shake things out

00:13:23,250 --> 00:13:24,250
and stabilize them.

00:13:24,250 --> 00:13:27,810
We want you to test and feel good that we can--at the very end, we don't want to accept

00:13:27,810 --> 00:13:32,160
the massive bunch of USB changes that nobody has really tested or run for the past three

00:13:32,160 --> 00:13:37,970
months--three weeks or so, you know, we want to at least some kind of software--good engineering

00:13:37,970 --> 00:13:38,970
practices.

00:13:38,970 --> 00:13:40,557
It looks like it something, we know what weíre doing here.

00:13:40,557 --> 00:13:41,557
Yeah.

00:13:41,557 --> 00:13:42,557
>> Thereís never a period of where thereís no merging or [INDISTINCT] their merging over

00:13:42,557 --> 00:13:50,850
to something newer and then the RC what windows, youíre shutting off with, is that correct?

00:13:50,850 --> 00:13:52,149
>> HARTMAN: So thereís no...

00:13:52,149 --> 00:13:53,149
>> [INDISTINCT] gaps where...

00:13:53,149 --> 00:13:56,420
>> HARTMAN: Thereís no gaps where were not accepting any merges, yes.

00:13:56,420 --> 00:13:58,529
Well, we think of, yeah.

00:13:58,529 --> 00:14:01,250
When we--we use gits to send things to Linus.

00:14:01,250 --> 00:14:05,420
So, he pulls from the--the subsystem maintainers trees and put--merges them in.

00:14:05,420 --> 00:14:08,660
So, that's where we merge things but it should be bug fixes only.

00:14:08,660 --> 00:14:11,710
From RC2 on, unless it's a really odd thing.

00:14:11,710 --> 00:14:15,620
We should have bug fixes only are going in, into the merges.

00:14:15,620 --> 00:14:17,590
I think of merging as a new feature, I'm sorry.

00:14:17,590 --> 00:14:18,910
Itís a wrong terminology.

00:14:18,910 --> 00:14:21,560
I use--you can use git to send this stuff to Linus.

00:14:21,560 --> 00:14:23,130
Linus came here and talked about git.

00:14:23,130 --> 00:14:24,130
I use quilt.

00:14:24,130 --> 00:14:25,130
Quiltís really good too.

00:14:25,130 --> 00:14:26,130
So, yes.

00:14:26,130 --> 00:14:27,130
>> So, how do we test them?

00:14:27,130 --> 00:14:29,740
>> HARTMAN: How do we test?

00:14:29,740 --> 00:14:30,740
>> Yes.

00:14:30,740 --> 00:14:35,790
>> HARTMAN: One thing about the Kernel is, there is no good way to test it except running

00:14:35,790 --> 00:14:36,790
it.

00:14:36,790 --> 00:14:41,090
You canít run like unit test--you can write unit test that extensively test some of the

00:14:41,090 --> 00:14:46,900
external features, such as the system call interface, it hasn't broken some odd things.

00:14:46,900 --> 00:14:50,760
But really it is testing--the operating system is running on your machine.

00:14:50,760 --> 00:14:54,350
There are so many hundreds of thousands of permutations or devices and interactions with

00:14:54,350 --> 00:14:57,460
timing and everything else that we wanted to run on all your machines.

00:14:57,460 --> 00:14:59,390
So, we rely on you to test.

00:14:59,390 --> 00:15:03,570
We rely on the developers to test and that's the only way we can obviously test.

00:15:03,570 --> 00:15:07,380
Like--classic example is, I had a problem when you were--you were plugging in two USB

00:15:07,380 --> 00:15:10,640
devices at once and yanking one out, the data was being streamed out too.

00:15:10,640 --> 00:15:14,840
You canít unit test that unless I want to put--I have a big box of USB devices that

00:15:14,840 --> 00:15:18,820
I do test a lot, but it doesn't make for an automated system.

00:15:18,820 --> 00:15:20,650
So, we ask you to test it yourself.

00:15:20,650 --> 00:15:22,970
We rely on the development community to test.

00:15:22,970 --> 00:15:24,040
That's all we can do.

00:15:24,040 --> 00:15:28,050
There isn't a same way to write a unit test for an [INDISTINCT] it just doesn't work because

00:15:28,050 --> 00:15:31,110
we're relying on so many external inputs.

00:15:31,110 --> 00:15:33,470
People keep trying and that's great and we want as many test.

00:15:33,470 --> 00:15:35,850
We want as many functional tests as we can get.

00:15:35,850 --> 00:15:37,740
But like performance--and we performance test also.

00:15:37,740 --> 00:16:01,870
People are trying to test it but it's a real hard thing to do that.

00:16:01,870 --> 00:16:02,870
>> So there is no formal--letís say, we have between--like, demos in the 2.6.25 and the

00:16:02,870 --> 00:16:03,870
last one out, [INDISTINCT] they were waiting for someone to do something for it.

00:16:03,870 --> 00:16:04,870
Is this a formal procedure or does somebody does [INDISTINCT] and what is something that

00:16:04,870 --> 00:16:05,870
you [INDISTINCT] >> HARTMAN: What if--so, what was holding

00:16:05,870 --> 00:16:06,870
it up and what was the formal procedure?

00:16:06,870 --> 00:16:07,870
We do track regressions.

00:16:07,870 --> 00:16:13,080
So, like people record a regression, ìHey, this worked on 2620 and 2.6.21 RC whatever,

00:16:13,080 --> 00:16:15,090
itís broken.î Regressions retract.

00:16:15,090 --> 00:16:19,560
So, towards the end of the release cycle we say, have we fixed all the regressions?

00:16:19,560 --> 00:16:22,030
Have we fixed all the bugs that have been reported?

00:16:22,030 --> 00:16:24,680
Some people are trying to track the bugs that have been reported.

00:16:24,680 --> 00:16:28,700
If it isnít a regression and it's just as a bug that always been there or something

00:16:28,700 --> 00:16:33,149
that new happens or for something that's been added that's brand new and newer support [INDISTINCT].

00:16:33,149 --> 00:16:37,760
We don't really treat that as important as a regression from the--actually machines working.

00:16:37,760 --> 00:16:40,860
We want to make sure we never break a machine that was working previously.

00:16:40,860 --> 00:16:45,279
We ripped whole features out because we broke the machine that was working properly.

00:16:45,279 --> 00:16:49,950
Which is tough, ACPI and some interaction and some low level platform code is nasty.

00:16:49,950 --> 00:16:55,300
So, we change that and it breaks whole models of laptop, thereís the IBM series of laptops

00:16:55,300 --> 00:16:59,120
that was notorious for breaking whenever we change anything in ACPI.

00:16:59,120 --> 00:17:00,120
Itís tough.

00:17:00,120 --> 00:17:04,290
So, we try and track those and that's what's keeping us, ìLook, we know that thereís

00:17:04,290 --> 00:17:07,600
this one class of bugs that a bunch of people are hitting, letís try and fix that up before

00:17:07,600 --> 00:17:10,169
we do get between RC 7 and the final release.

00:17:10,169 --> 00:17:13,220
So, we do keep track of that.

00:17:13,220 --> 00:17:15,390
So, if you have a problem, let us know.

00:17:15,390 --> 00:17:20,740
So, as a developer and as a user, if you want to help Linus out, test these RC releases.

00:17:20,740 --> 00:17:25,350
Test them and let us know if there's problem, you have regressions or not and they're good.

00:17:25,350 --> 00:17:27,760
I mean, all these are run on everybody's machines.

00:17:27,760 --> 00:17:30,110
You don't have to worry too much about these--these things.

00:17:30,110 --> 00:17:34,220
I wouldnít run it on something thatís production wise but definitely run it on your local machines--around

00:17:34,220 --> 00:17:36,110
on my laptop, all the other ones.

00:17:36,110 --> 00:17:40,250
If you want to test what's--if you want to help us test what's going to happen next,

00:17:40,250 --> 00:17:42,700
test the Linux-next Tree, test Andrew Mortonís tree.

00:17:42,700 --> 00:17:46,510
That shows that crazy developmental stuff thatís still under heavy development that

00:17:46,510 --> 00:17:50,860
were trying to merge in and figure out what is good enough to go into the next merge window.

00:17:50,860 --> 00:17:52,830
We got features in there that aren't really good enough to go.

00:17:52,830 --> 00:17:57,030
There might be a couple releases away, things like that.

00:17:57,030 --> 00:17:58,980
What's the question?

00:17:58,980 --> 00:17:59,980
Okay.

00:17:59,980 --> 00:18:00,980
All right.

00:18:00,980 --> 00:18:02,240
Move on.

00:18:02,240 --> 00:18:07,490
Like I said, we're doing this every two and three quarter months.

00:18:07,490 --> 00:18:11,921
So, we're actually doing what we said we were going to do and that's a good thing, that's

00:18:11,921 --> 00:18:14,660
a time-base release cycle; itís turned out to be a really nice thing.

00:18:14,660 --> 00:18:15,660
It works really well.

00:18:15,660 --> 00:18:18,550
A lot of Open Source projects are kind of switching towards it, it works.

00:18:18,550 --> 00:18:21,940
You know that all of [INDISTINCT] this feature--this window.

00:18:21,940 --> 00:18:24,510
Two and three quarter--three months later, itíll get in.

00:18:24,510 --> 00:18:26,679
It's a good thing to do.

00:18:26,679 --> 00:18:33,830
9.2 million lines, we've been growing at a rate of 10% increase in code size per year

00:18:33,830 --> 00:18:37,260
since I started tracking it back to 260.

00:18:37,260 --> 00:18:38,260
It's a linear graph.

00:18:38,260 --> 00:18:41,010
Itís just pretty much straight which is amazing.

00:18:41,010 --> 00:18:42,010
We're still growing.

00:18:42,010 --> 00:18:43,790
We're still getting bigger.

00:18:43,790 --> 00:18:45,429
That's a pretty big chunk of code.

00:18:45,429 --> 00:18:48,870
Now, not all machines run at 9.2 million lines of code, that's funding.

00:18:48,870 --> 00:18:53,490
You write in the Core and a few drivers around it, not working and things like that.

00:18:53,490 --> 00:18:54,490
So, that's everything.

00:18:54,490 --> 00:18:58,160
That's all the different platforms, everything else.

00:18:58,160 --> 00:19:02,280
And in the last year and a half, this is the number that I find the most impressive.

00:19:02,280 --> 00:19:06,860
We had 2,399 unique contributors to the Kernel and that's amazing.

00:19:06,860 --> 00:19:09,770
That's showing we're doing really, really well.

00:19:09,770 --> 00:19:13,160
Now, half of these contributors only contributed one patch.

00:19:13,160 --> 00:19:16,830
Half the half contributed two, half the half the half contributed three; well, exponential

00:19:16,830 --> 00:19:18,080
curve there.

00:19:18,080 --> 00:19:20,740
But the top of the curve is getting flatter.

00:19:20,740 --> 00:19:28,060
When we did the 2.6, the 2.5 or 2.6, the top 20 people did 80--8%--80% of the work.

00:19:28,060 --> 00:19:31,770
Now, the top 30 people did 30% of the work.

00:19:31,770 --> 00:19:34,020
Just by quantity of patches.

00:19:34,020 --> 00:19:37,550
So, we are flattening out and weíre spreading the load out a lot more evenly.

00:19:37,550 --> 00:19:40,374
I looked--it was 200 people--the top 200 people, do they--no.

00:19:40,374 --> 00:19:45,330
Two hundred people did 8%?

00:19:45,330 --> 00:19:49,731
Something--I was thinking of the top 200 people that did a lot of work.

00:19:49,731 --> 00:19:50,731
I was spreading a lot better.

00:19:50,731 --> 00:19:51,731
So, that's good.

00:19:51,731 --> 00:19:52,731
I mean, here's the--the backgroundís graph.

00:19:52,731 --> 00:19:53,750
I did the crazy graph.

00:19:53,750 --> 00:19:56,870
It's on kernel.org, you can try and load it in your browser.

00:19:56,870 --> 00:19:58,370
It's a good SVG test.

00:19:58,370 --> 00:20:05,300
It broke [INDISTINCT] machine, crashed Mackintosh, it only--I got somebody from HP to print it

00:20:05,300 --> 00:20:08,000
out, he had printers in his barn.

00:20:08,000 --> 00:20:12,500
Big roller printers in his barn, he printed out that.

00:20:12,500 --> 00:20:13,920
You can go through him.

00:20:13,920 --> 00:20:15,480
So, thatís our number of developers, thatís good.

00:20:15,480 --> 00:20:19,350
And our number of individual developers, per Kernel release is going up also.

00:20:19,350 --> 00:20:24,260
A number of companies that are actually sponsoring developers is also going up which is a really

00:20:24,260 --> 00:20:28,929
good thing, showing more companies are getting involved as a spread of Linux goes bigger.

00:20:28,929 --> 00:20:33,049
So, letís talk about people, quantity.

00:20:33,049 --> 00:20:35,850
We can track people like quantity, this is just quantity not quality.

00:20:35,850 --> 00:20:37,549
I'm not going to talk about quality.

00:20:37,549 --> 00:20:40,180
So, this is the number of changes that got into the Kernel.

00:20:40,180 --> 00:20:44,491
Top 10 people for the past year and half; number one, Adrian Bunk, there's a lot of

00:20:44,491 --> 00:20:45,610
janitorial patches.

00:20:45,610 --> 00:20:47,020
Al Viro of BFS.

00:20:47,020 --> 00:20:54,220
Thomas Gleixner, the X86--no, i386 next 86 arch maintainer along with Ingo Molnar.

00:20:54,220 --> 00:20:55,830
David Miller networking Core.

00:20:55,830 --> 00:20:58,300
Bart, IDE. Paul Mundt is SH.

00:20:58,300 --> 00:21:00,809
Ralf Baechle is MIPS maintainer.

00:21:00,809 --> 00:21:07,210
Ingo again, Patrick McHardy is net filter and Tejun is Lab ATA, disk drive stuff.

00:21:07,210 --> 00:21:09,000
So, two of these drive guys are top 10.

00:21:09,000 --> 00:21:10,000
Thatís quantity.

00:21:10,000 --> 00:21:13,120
Thatís a number of changes that they got in the Kernel.

00:21:13,120 --> 00:21:15,340
Yes, [INDISTINCT] So, signed off by.

00:21:15,340 --> 00:21:19,380
Remember how I mentioned every person along the hierarchal tree signed off on it actually

00:21:19,380 --> 00:21:20,380
reviewed it.

00:21:20,380 --> 00:21:24,130
Here's the top signed-off, this shows who are the gate keepers and how--who's doing

00:21:24,130 --> 00:21:25,400
what.

00:21:25,400 --> 00:21:26,610
Andrew is the top.

00:21:26,610 --> 00:21:28,190
Linus is next.

00:21:28,190 --> 00:21:32,280
Now, the funny thing is, Andrew has more than Linus, so that everything goes to Linus.

00:21:32,280 --> 00:21:37,860
Linus doesnít sign off on patches he pulls from sub-maintainers, we're using git because

00:21:37,860 --> 00:21:38,860
he isnít looking at them.

00:21:38,860 --> 00:21:40,390
Heís trusting those maintainers to do the thing.

00:21:40,390 --> 00:21:42,440
So, I make up a git tree for Linus to it pull from.

00:21:42,440 --> 00:21:46,700
He says, ìGreat.î He pull from it and he doesnít sign off on those.

00:21:46,700 --> 00:21:48,809
That's why his number is lower than Andrew's.

00:21:48,809 --> 00:21:53,660
So actual the real number patches that got in is less than the sum of those two, itís

00:21:53,660 --> 00:21:54,710
kind of funny.

00:21:54,710 --> 00:21:55,710
So again, David Miller in networking.

00:21:55,710 --> 00:21:57,290
Jeff Grazik is in network drivers.

00:21:57,290 --> 00:21:59,650
Ingo, architecture for Intel.

00:21:59,650 --> 00:22:02,460
Me, Thomas are in Intel.

00:22:02,460 --> 00:22:06,240
Mauro does video for Linux, little webcam stuff.

00:22:06,240 --> 00:22:08,900
He does that in his own spare time.

00:22:08,900 --> 00:22:11,910
Works for a telecom company in Brazil, awesome stuff.

00:22:11,910 --> 00:22:13,620
Paul Mackerras is Power PC.

00:22:13,620 --> 00:22:15,600
John Linville is wireless drivers.

00:22:15,600 --> 00:22:20,110
So, you can kind of see what areas are the code, Kernel is doing a lot of activity.

00:22:20,110 --> 00:22:25,270
So again, video for Linux is a very active area, wireless is a very active area.

00:22:25,270 --> 00:22:26,410
Interesting.

00:22:26,410 --> 00:22:30,250
So, let's see who is funding these companies.

00:22:30,250 --> 00:22:33,820
So, we can see the people, receive the number of changes it does.

00:22:33,820 --> 00:22:35,450
So, who's doing this work?

00:22:35,450 --> 00:22:40,650
So again, for the past year and half, Red Hat, IBM, Novell, Intel, Oracle, Consultants,

00:22:40,650 --> 00:22:45,070
these are individuals working for consultancy, they are being paid by other companies or

00:22:45,070 --> 00:22:46,990
working for consulting companies themselves.

00:22:46,990 --> 00:22:51,760
Academia, I'm very happy to see Academiaís actually going up, at numbers going up.

00:22:51,760 --> 00:22:53,150
And Renesas, Renesas?

00:22:53,150 --> 00:22:56,670
I think there an SH maintainer--developer.

00:22:56,670 --> 00:22:59,650
Which is really interesting, they just pop in the top 10.

00:22:59,650 --> 00:23:02,540
So, you might want to guess what's number one to five?

00:23:02,540 --> 00:23:03,640
Come on.

00:23:03,640 --> 00:23:04,640
Canonical?

00:23:04,640 --> 00:23:08,030
I'll tell you where Canonical is later.

00:23:08,030 --> 00:23:11,890
Well, I'll tell you where they are now.

00:23:11,890 --> 00:23:15,670
They're about 300th, I think.

00:23:15,670 --> 00:23:18,760
Canonical had six changes in the past five years.

00:23:18,760 --> 00:23:24,120
Canonical does not give back to the community, that's what they do.

00:23:24,120 --> 00:23:25,120
>> Linux foundation.

00:23:25,120 --> 00:23:26,120
>> HARTMAN: Linux Foundation, no.

00:23:26,120 --> 00:23:30,620
Linux Foundation is not on the list anymore because they only have one developer.

00:23:30,620 --> 00:23:33,539
>> They [INDISTINCT] dock book.

00:23:33,539 --> 00:23:36,230
>> HARTMAN: They log to--I'm sorry log what?

00:23:36,230 --> 00:23:37,230
Dock book?

00:23:37,230 --> 00:23:39,290
Docks has to do with others and that goes in the Kernel.

00:23:39,290 --> 00:23:40,519
Anyway, come on.

00:23:40,519 --> 00:23:41,519
>> SUSE?

00:23:41,519 --> 00:23:42,760
>> HARTMAN: SUSE is Novell.

00:23:42,760 --> 00:23:45,440
So, Novell, SUSE same to go.

00:23:45,440 --> 00:23:46,440
HP, no.

00:23:46,440 --> 00:23:48,860
HP [INDISTINCT] all right, Iíll just go.

00:23:48,860 --> 00:23:49,860
You guess.

00:23:49,860 --> 00:23:50,860
Amateurs, number one.

00:23:50,860 --> 00:23:51,990
These are people working for themselves.

00:23:51,990 --> 00:23:55,990
We have asked them who they work for and say I'm a hobbyist and doing something on time.

00:23:55,990 --> 00:23:57,820
And the number five is, unknown.

00:23:57,820 --> 00:24:03,929
They are either, we have no idea who they're working for or that they wish to remain unknown.

00:24:03,929 --> 00:24:07,430
Some people say, ìIím not allowed to say who I work for.î Hereís my [INDISTINCT]

00:24:07,430 --> 00:24:09,210
So, we track this stuff.

00:24:09,210 --> 00:24:12,710
So, between the--some of those two, itís almost 25, almost one quarter of the number

00:24:12,710 --> 00:24:14,100
of changes that go into the Kernel.

00:24:14,100 --> 00:24:17,120
Who's being done by people that are not being sponsored to do it.

00:24:17,120 --> 00:24:22,270
And another thing about these unknown individuals, none of them--well, I think--I think about

00:24:22,270 --> 00:24:25,970
five of them are contributing more than 10 patches.

00:24:25,970 --> 00:24:29,640
So, there are lots and lots of people in the tail that we donít know who theyíre working

00:24:29,640 --> 00:24:30,640
for.

00:24:30,640 --> 00:24:33,070
So, itís not a large--they're not large contributors.

00:24:33,070 --> 00:24:39,280
So--or you can look at the other way, 75% of the development thatís on the Kernel is

00:24:39,280 --> 00:24:40,799
paid for, is sponsored.

00:24:40,799 --> 00:24:42,929
Because these companies care about what happens to Linux.

00:24:42,929 --> 00:24:46,071
If you want to see what's going to happen to the Kernel, what's going to work for you,

00:24:46,071 --> 00:24:50,500
you need to influence it and realize what's going to be coming in Kernel?

00:24:50,500 --> 00:24:51,500
What's next?

00:24:51,500 --> 00:24:52,610
It's whatever you make it to be.

00:24:52,610 --> 00:24:56,820
Whatever you want it to be lots and lots of companies are working to--are relying on Linux.

00:24:56,820 --> 00:24:58,280
You guys rely on Linux.

00:24:58,280 --> 00:25:01,280
Lots of other companies, Iíve given this talk to a number of companies.

00:25:01,280 --> 00:25:05,170
Only one company Iíve ever given this talk to is actually on this list.

00:25:05,170 --> 00:25:06,340
What?

00:25:06,340 --> 00:25:09,850
Google's not here.

00:25:09,850 --> 00:25:15,690
>> [INDISTINCT] >> HARTMAN: Where is Google?

00:25:15,690 --> 00:25:18,030
Googleís 13th.

00:25:18,030 --> 00:25:30,289
If you don't count Andrew; so, without Andrew...

00:25:30,289 --> 00:25:31,289
>> We count Andrew.

00:25:31,289 --> 00:25:32,289
>> HARTMAN: You count Andrew.

00:25:32,289 --> 00:25:33,289
I count Andrew too.

00:25:33,289 --> 00:25:34,710
Andrew does great work.

00:25:34,710 --> 00:25:39,540
But--so, I was trying to think of a metric, do you--do you do the mean of a company's

00:25:39,540 --> 00:25:43,669
developers, you know, the look of a massive body or do you count the net quantity but

00:25:43,669 --> 00:25:46,460
in smaller companies of computer developers, how do you rank them?

00:25:46,460 --> 00:25:47,460
I don't know how.

00:25:47,460 --> 00:25:48,650
I'm trying to figure out some fun stuff with statistics.

00:25:48,650 --> 00:25:51,370
My wifeís in Graduate School, she happens to be taking statistics class right now.

00:25:51,370 --> 00:25:54,420
Since she has lots of ideas, I can use her.

00:25:54,420 --> 00:25:55,420
So, yes.

00:25:55,420 --> 00:25:57,520
Without Andrew, you guys are 40th.

00:25:57,520 --> 00:25:59,780
You guys rely on Linux.

00:25:59,780 --> 00:26:05,700
This either means one or two things; that the way Linux is going and the Kernelís going--and

00:26:05,700 --> 00:26:07,460
working, itís just fine for you.

00:26:07,460 --> 00:26:09,620
And youíll like it and youíll love it and you're happy.

00:26:09,620 --> 00:26:10,620
That's great.

00:26:10,620 --> 00:26:20,030
Lots of people are that way but the other thing is, do you trust these companies to

00:26:20,030 --> 00:26:23,030
develop the Kernel in a way that matters to you.

00:26:23,030 --> 00:26:25,230
I would say no.

00:26:25,230 --> 00:26:26,230
>> Why?

00:26:26,230 --> 00:26:27,460
>> HARTMAN: You trust these guys?

00:26:27,460 --> 00:26:30,400
They don't know your business as well as you do.

00:26:30,400 --> 00:26:34,549
You only know the loads that you do as well as you do, so if it's going as well then fine,

00:26:34,549 --> 00:26:36,230
I'm happy and I'm not going to complain about it.

00:26:36,230 --> 00:26:45,790
Yes, [INDISTINCT] >> No, I mean, one thing that happened to

00:26:45,790 --> 00:27:00,169
us on the Andrew type thing is, they will move support for--I know a trial [INDISTINCT]

00:27:00,169 --> 00:27:01,169
this is [INDISTINCT] >> HARTMAN: Yes.

00:27:01,169 --> 00:27:02,169
>> If we invented more active earlier on, something might be, you know, and check it.

00:27:02,169 --> 00:27:03,169
I think they mention only one thing in the Kernel that uses this and is just not working.

00:27:03,169 --> 00:27:04,169
>> HARTMAN: Yes.

00:27:04,169 --> 00:27:05,169
>> Maybe if we were in there, we might have been involved in this setting.

00:27:05,169 --> 00:27:06,169
They might has still been removed but...

00:27:06,169 --> 00:27:07,169
>> HARTMAN: At least you should know.

00:27:07,169 --> 00:27:08,169
I mean, if there's things you care about, that's fine.

00:27:08,169 --> 00:27:09,169
And that's fine.

00:27:09,169 --> 00:27:10,169
If you care about--talk about this thing, that's great.

00:27:10,169 --> 00:27:11,169
When I come is I'll talk to you and say, ìWell, company ranking so and so is doing our work

00:27:11,169 --> 00:27:12,169
for us,î which is great too.

00:27:12,169 --> 00:27:13,620
All these companies, I know IBM or Red Hat and Novell.

00:27:13,620 --> 00:27:16,880
We both do consulting for other companies and do work for them.

00:27:16,880 --> 00:27:20,350
But again, their overworked companies and there's no reason why the individual company

00:27:20,350 --> 00:27:22,130
yourself can't get involved.

00:27:22,130 --> 00:27:25,670
We make it very easy to get involved in the Kernel element process based on our--number

00:27:25,670 --> 00:27:30,669
of people who are contributing, it's kind of working so there's no excuse for you guys

00:27:30,669 --> 00:27:32,049
not to contribute.

00:27:32,049 --> 00:27:33,890
So, that's my reason.

00:27:33,890 --> 00:27:39,240
So, let's pick-out some and then weíll [INDISTINCT] so, 27 people are in the list.

00:27:39,240 --> 00:27:44,990
Twenty-seven of you guys contributed a code [INDISTINCT] and here you are.

00:27:44,990 --> 00:27:47,440
So, Andrew number 11, awesome.

00:27:47,440 --> 00:27:48,440
Great.

00:27:48,440 --> 00:27:49,440
Very happy.

00:27:49,440 --> 00:27:52,820
David, number 149th, see here, that's almost coming.

00:27:52,820 --> 00:28:00,420
So, he is a perfect example of what I like to say is a great person to have.

00:28:00,420 --> 00:28:02,980
He started of working at [INDISTINCT] University doing janitorial Kernel work.

00:28:02,980 --> 00:28:07,580
He looked at the Kernel, here's a fix, I can do, start running into it, got hired by you

00:28:07,580 --> 00:28:12,070
guys, I don't know what he does, and has contributed now to the Core Kernel, the, BF--to the--what

00:28:12,070 --> 00:28:13,460
does he do?

00:28:13,460 --> 00:28:19,660
NM stuff, out of memory stuff, Core Kernel guy, he's contributing pretty well, 67.

00:28:19,660 --> 00:28:24,789
That's in the top 8% of all Kernel developers like quantity out there right now, great job.

00:28:24,789 --> 00:28:26,450
Paul, what does Paul do?

00:28:26,450 --> 00:28:29,160
I looked at CPU scheduling, that's good.

00:28:29,160 --> 00:28:30,680
Ken does what?

00:28:30,680 --> 00:28:32,820
He used TLB and other sort of stuff.

00:28:32,820 --> 00:28:34,700
Nice Core Kernel work, really good.

00:28:34,700 --> 00:28:37,539
Then there's Matt, is Matt here?

00:28:37,539 --> 00:28:39,140
Okay.

00:28:39,140 --> 00:28:42,710
Matt puts everybody else in this company to shame.

00:28:42,710 --> 00:28:49,260
Matt contributed spelling fixes to the Kernel, which is awesome, and I will not say--and

00:28:49,260 --> 00:28:53,980
I love him and that's a really good to have but Matt beat out all your other Kernel guys,

00:28:53,980 --> 00:29:00,570
he's number five out of the whole company contributing changes that fix spelling.

00:29:00,570 --> 00:29:09,299
So if you're a developer, I donít--you should feel a little ashamed about that.

00:29:09,299 --> 00:29:11,549
I mean, I gladly take the spelling change.

00:29:11,549 --> 00:29:14,041
I hope they contribute to more in the future but come on.

00:29:14,041 --> 00:29:15,041
All right, guys.

00:29:15,041 --> 00:29:16,041
And then I didnít--I gave up on looking at [INDISTINCT] what you guys do.

00:29:16,041 --> 00:29:17,120
>> How does the 27 compare to the other companies?

00:29:17,120 --> 00:29:18,400
>> HARTMAN: On quantity?

00:29:18,400 --> 00:29:24,110
Number of developers?

00:29:24,110 --> 00:29:25,409
>> Number of developers.

00:29:25,409 --> 00:29:26,970
>> HARTMAN: It's pretty good.

00:29:26,970 --> 00:29:30,980
There's some companies with like 90 some, which is amazing like that--but then there's

00:29:30,980 --> 00:29:35,150
smaller companies with like five developers that are very high in the list too.

00:29:35,150 --> 00:29:38,450
So it's like I can't look at pure quantity of unique contributor.

00:29:38,450 --> 00:29:39,980
I just can't figure out a number.

00:29:39,980 --> 00:29:41,590
Do I look at the mean, the contributing one?

00:29:41,590 --> 00:29:44,020
I look at the mean here, you're way down to seven, you know.

00:29:44,020 --> 00:29:46,940
I think you guys want me to do that.

00:29:46,940 --> 00:29:47,970
So Martin, where is Martin?

00:29:47,970 --> 00:29:49,500
Martin disappeared.

00:29:49,500 --> 00:29:52,470
So the joke is when anybody ever goes to work for Google, they enter the black hole.

00:29:52,470 --> 00:29:54,370
Never to be seen from again, Martin, you still actually contribute to the Kernel.

00:29:54,370 --> 00:29:57,420
I know Martin, so I can make fun of him.

00:29:57,420 --> 00:30:03,450
Here's some more, two with patches, two patches, two patches and we start getting to one.

00:30:03,450 --> 00:30:05,320
Al, thatís cool to see Al works here.

00:30:05,320 --> 00:30:11,030
He used to contribute a lot; used to and then there's the rest.

00:30:11,030 --> 00:30:12,679
>> Just that there are so many interesting things.

00:30:12,679 --> 00:30:16,600
>> HARTMAN: There are so many interesting--and thatís great and thatís awesome and I have

00:30:16,600 --> 00:30:17,750
nothing against that.

00:30:17,750 --> 00:30:21,421
But if you can--if you--and I know you guys do a lot of development in-house and have

00:30:21,421 --> 00:30:25,120
your own custom set-up and certain things like that, which is great and fine.

00:30:25,120 --> 00:30:28,309
But if you think you can keep your changes outside the main Kernel tree and keep up with

00:30:28,309 --> 00:30:31,000
that rate of change, I think you're going to have a problem.

00:30:31,000 --> 00:30:35,179
It's really, really hard to do even with our good tools that handle merging, git and things

00:30:35,179 --> 00:30:36,179
like that.

00:30:36,179 --> 00:30:39,271
I know this really doesnít show and none of that Android stuff has landed, hopefully

00:30:39,271 --> 00:30:40,600
there's Android shuffled in.

00:30:40,600 --> 00:30:43,290
>> [INDISTINCT] know, your work is passion able.

00:30:43,290 --> 00:30:44,290
>> HARTMAN: Okay.

00:30:44,290 --> 00:30:46,740
Four [INDISTINCT] already, I can handle it.

00:30:46,740 --> 00:30:47,740
>> Do we have a locker room?

00:30:47,740 --> 00:30:48,740
I'm hoping to get that [INDISTINCT] >> HARTMAN: Hopefully, yeah.

00:30:48,740 --> 00:30:49,740
I've heard--I've heard that before.

00:30:49,740 --> 00:30:50,740
But yes, I trust you guys.

00:30:50,740 --> 00:30:53,260
I trust you guys will gather the stuff but, so.

00:30:53,260 --> 00:30:56,950
>> [INDISTINCT] trust yourself this [INDISTINCT] >> HARTMAN: Trust yourself just to maintain

00:30:56,950 --> 00:30:57,950
it.

00:30:57,950 --> 00:31:00,882
>> There's a lot of talk about how easy it is to contribute and your mileage can vary

00:31:00,882 --> 00:31:01,882
sometimes.

00:31:01,882 --> 00:31:04,890
>> HARTMAN: Your mileage varies sometimes and how--yes, and how easy it is.

00:31:04,890 --> 00:31:09,970
If you ever have a problem with getting things in, talk to me, talk to Andrew, talk to the

00:31:09,970 --> 00:31:10,970
other people.

00:31:10,970 --> 00:31:11,970
We will help make this happen.

00:31:11,970 --> 00:31:16,760
I have developers that are willing to help out with cleaning stuff up, we've take--we

00:31:16,760 --> 00:31:21,140
take code from other companies that are not the proper coding style, we'll clean it up

00:31:21,140 --> 00:31:22,140
for you.

00:31:22,140 --> 00:31:23,140
We'll maintain and we'll get it in the Kernel.

00:31:23,140 --> 00:31:26,950
We do this kind of stuff all the time so it shouldnít be here.

00:31:26,950 --> 00:31:32,039
So, my main point here, you guys rely on Linux, there's no reason why you guys can't get involved.

00:31:32,039 --> 00:31:35,630
You guys should contribute and help and drive it in a way that you feel is going to work

00:31:35,630 --> 00:31:36,990
best for you.

00:31:36,990 --> 00:31:41,640
Otherwise, it's going to work--good then I hope--and I hope it still works, so.

00:31:41,640 --> 00:31:43,340
Everybody asks what's new.

00:31:43,340 --> 00:31:47,280
Here are some of the things that happened in 2.6.26.

00:31:47,280 --> 00:31:49,780
It's a joke to tell you everything that happened new.

00:31:49,780 --> 00:31:53,500
It's a lot of stuff happened, a lot, a lot of the stuff.

00:31:53,500 --> 00:31:54,800
So any questions?

00:31:54,800 --> 00:31:56,100
That was fast.

00:31:56,100 --> 00:31:57,830
In the back, yeah.

00:31:57,830 --> 00:32:11,450
>> When you talk about the growth of the number of lines imposed with the Linux, I think they

00:32:11,450 --> 00:32:12,620
probably have 95% of that is device drivers orÖ

00:32:12,620 --> 00:32:13,620
>> HARTMAN: Well, maybe the talk of the code--95% of these drivers, no.

00:32:13,620 --> 00:32:16,200
I think you missed in the beginning, 50% of the code in the Kernels is drivers--55% of

00:32:16,200 --> 00:32:18,280
codes in the Kernels are drivers.

00:32:18,280 --> 00:32:22,559
The rate of change is proport--is exactly proportional to the amount of code that is

00:32:22,559 --> 00:32:23,559
in the Kernel.

00:32:23,559 --> 00:32:29,450
So those 4,000 some lines added, 55% of that is in the driver's subsystem.

00:32:29,450 --> 00:32:31,429
So 5% of that is in the core Kernel.

00:32:31,429 --> 00:32:33,409
It's proportional across the way.

00:32:33,409 --> 00:32:38,720
So the majority is drivers by a small bit, after driver's is architecture specific stuff

00:32:38,720 --> 00:32:43,250
then networking but that's it, so it isnít all drivers.

00:32:43,250 --> 00:32:47,870
But it's scary in a way, that means your Core of the Kernel is changing that fast.

00:32:47,870 --> 00:32:53,740
The Core of the Kernel is changing at a rate that blows all other operating systems away

00:32:53,740 --> 00:32:57,659
just by looking at the map or just touching the core or the whole subsystem, think about

00:32:57,659 --> 00:32:58,659
that slurs.

00:32:58,659 --> 00:32:59,659
Yes?

00:32:59,659 --> 00:33:00,659
>> So what would you say is driving the change to the Core Kernel?

00:33:00,659 --> 00:33:01,659
Is it because people just keep getting up better ways of doing things or because the

00:33:01,659 --> 00:33:07,179
requirements are constantly changing?

00:33:07,179 --> 00:33:13,220
>> HARTMAN: So, what's driving the change--the thing in the--what's driving the real change

00:33:13,220 --> 00:33:14,220
in the core?

00:33:14,220 --> 00:33:21,080
It is the fact that Linux is--I mean, Linux always jokes--Linux is not--is not intelligent

00:33:21,080 --> 00:33:26,280
design, it's evolution which means we react to stimuli thatís happening in the world.

00:33:26,280 --> 00:33:28,970
Just like, "No, we have to support this new architecture which means we have to change

00:33:28,970 --> 00:33:30,310
the core to do this now."

00:33:30,310 --> 00:33:31,330
We donít over plan things.

00:33:31,330 --> 00:33:32,880
We take what's happening right now.

00:33:32,880 --> 00:33:36,830
So, yes, new features happen and we add and we figure out how to change the core again

00:33:36,830 --> 00:33:37,830
to work.

00:33:37,830 --> 00:33:40,720
There's people who come up with, "Hey, I have good idea that we can get this--if we rewrite

00:33:40,720 --> 00:33:44,560
these--we rewrite them--this locks to new [INDISTINCT] instead of spin locks, we can

00:33:44,560 --> 00:33:46,830
get the RT stuff in there and get real-time in the core.

00:33:46,830 --> 00:33:50,870
The real-time stuff shows that you can take these crazy out of the tree patches and merge

00:33:50,870 --> 00:33:56,140
them into the Core Kernel and now we have a real-time where Kernel of Linux--some of

00:33:56,140 --> 00:33:59,900
the people said that it can never be done, which is pretty amazing from the [INDISTINCT]

00:33:59,900 --> 00:34:00,900
so, it's everything.

00:34:00,900 --> 00:34:02,610
Itís just responding to external stimuli.

00:34:02,610 --> 00:34:07,280
So we're not over planning, we're reacting at the time that it needs to be done.

00:34:07,280 --> 00:34:11,050
[INDISTINCT] a lag a little bit, so some hardware companies would come up with a new device

00:34:11,050 --> 00:34:12,720
and like, "Oh, crap, we you rewrite this."

00:34:12,720 --> 00:34:16,780
Luckily we're getting better and these hardware companies are getting involved in the process.

00:34:16,780 --> 00:34:17,980
Look at Intel in that list.

00:34:17,980 --> 00:34:18,980
Intel's very high.

00:34:18,980 --> 00:34:22,780
They're very big and Linux because Linux runs on all those chips they want to sell chips

00:34:22,780 --> 00:34:26,609
they make sure work's really good on their chips.

00:34:26,609 --> 00:34:29,169
[INDISTINCT] penguin picture.

00:34:29,169 --> 00:34:30,169
Yeah.

00:34:30,169 --> 00:34:41,109
>> MALE: So why donít you guys don't we pay more attention to consistency?

00:34:41,109 --> 00:34:44,099
>> HARTMAN: Why don't we pay more attention to consistency...

00:34:44,099 --> 00:35:10,400
>> MALE: [INDISTINCT] >> HARTMAN: Something's starting to change

00:35:10,400 --> 00:35:11,989
rapidly and our interface would do change rapidly.

00:35:11,989 --> 00:35:14,579
Hopefully, we never change the user space interface.

00:35:14,579 --> 00:35:17,400
So, we have the boot line changing for them to do stuff.

00:35:17,400 --> 00:35:20,839
I don't know maybe they had a really good reason to do that.

00:35:20,839 --> 00:35:23,609
Hopefully they did and that sounds like a foolish thing to do.

00:35:23,609 --> 00:35:27,790
We hopefully never change--we change the internal Kernel API all the time.

00:35:27,790 --> 00:35:31,970
Everybody was like, "You have to have a frozen.

00:35:31,970 --> 00:35:32,970
You have to have a state API."

00:35:32,970 --> 00:35:34,390
Then you say, "What API?"

00:35:34,390 --> 00:35:37,310
We have 8--9,000 symbols, we have 12,000 different structures.

00:35:37,310 --> 00:35:39,670
I mean that are passed around inside of the Kernel.

00:35:39,670 --> 00:35:43,180
You can't freeze that because it doesnít let's you ever change anything.

00:35:43,180 --> 00:35:46,390
So inside the Kernel we change all the time, we change rapidly, we have really good reasons

00:35:46,390 --> 00:35:47,390
for doing that.

00:35:47,390 --> 00:35:50,019
But outside the Kernel user space API's, we should never change.

00:35:50,019 --> 00:35:56,690
I can run binaries ever built for 0.696 just flowing today on the Kernel, 2.6 Kernel today,

00:35:56,690 --> 00:35:58,049
cisco interfaces don't change.

00:35:58,049 --> 00:36:02,320
For the most part, there's a little gray area of some interfaces that were on the Kernel

00:36:02,320 --> 00:36:07,079
and user space like the proc file system that--end up changing every once in a while but hopefully

00:36:07,079 --> 00:36:10,059
we catch all the--the users around that.

00:36:10,059 --> 00:36:11,059
But we're trying to document that.

00:36:11,059 --> 00:36:13,009
We're documenting that user space API now.

00:36:13,009 --> 00:36:16,059
There's documentary [INDISTINCT] ABI, that we document that.

00:36:16,059 --> 00:36:19,950
The command line stuff--we do document that although change was odd, I don't know why.

00:36:19,950 --> 00:36:20,950
It shouldn't have.

00:36:20,950 --> 00:36:21,950
You should complain to developers.

00:36:21,950 --> 00:36:23,490
Maybe they didn't realize the broke it.

00:36:23,490 --> 00:36:25,401
Sometimes that--like, "Oh, I didn't realize I broke that."

00:36:25,401 --> 00:36:26,401
You know, like, "That's a book.

00:36:26,401 --> 00:36:27,680
I need to go fix it."

00:36:27,680 --> 00:36:33,980
Regressions are always going to happen and hopefully we fix this.

00:36:33,980 --> 00:36:41,060
In the back.

00:36:41,060 --> 00:37:00,071
>> MALE: Once a upon a time, you advocated the distribution [INDISTINCT]

00:37:00,071 --> 00:37:01,071
>> HARTMAN: Yes.

00:37:01,071 --> 00:37:02,071
>> MALE: [INDISTINCT] >> HARTMAN: Yes.

00:37:02,071 --> 00:37:03,071
>> MALE: [INDISTINCT] >> HARTMAN: So the question is awhile ago,

00:37:03,071 --> 00:37:05,440
I said that enterprise Kernel should just grab the Kernel all the time for there's enterprise

00:37:05,440 --> 00:37:06,440
Kernels.

00:37:06,440 --> 00:37:10,450
While Andrew keeps complaining that the user space that are quality going down the reporting.

00:37:10,450 --> 00:37:13,059
I think Andrew's wrong.

00:37:13,059 --> 00:37:19,569
I see every single Kernel bug that comes in the three different districts or to Kernel.org

00:37:19,569 --> 00:37:21,779
and to two districts, gen2 and [INDISTINCT].

00:37:21,779 --> 00:37:25,529
And over time that number reported is flat.

00:37:25,529 --> 00:37:28,890
Red Hats bugs, their bugs require for the Kernel--is actually going down.

00:37:28,890 --> 00:37:33,640
Now, either that means we have a fixed number of testers and people reporting problems,

00:37:33,640 --> 00:37:34,819
this can be true.

00:37:34,819 --> 00:37:39,229
But we're increasing our size of our code; we're increasing a number of users on our

00:37:39,229 --> 00:37:40,229
code.

00:37:40,229 --> 00:37:44,239
So, obstensively, I'd like to think that we are doing better because our code size is

00:37:44,239 --> 00:37:47,029
going in a number of bugs reported is flat.

00:37:47,029 --> 00:37:48,749
Andrew sees a lot of--a lot of bugger reports.

00:37:48,749 --> 00:37:51,200
He sees a lot of stuff and a lot of stuff all the time.

00:37:51,200 --> 00:37:53,140
I see a lot of stuff all the time too.

00:37:53,140 --> 00:37:57,960
But if you look at our rate of change for what's happening I would argue that we are

00:37:57,960 --> 00:37:59,599
doing better or doing good.

00:37:59,599 --> 00:38:02,960
If we break the user space API, let us know and we'll fix it.

00:38:02,960 --> 00:38:04,520
I mean, regressions always happen.

00:38:04,520 --> 00:38:05,859
I can say that.

00:38:05,859 --> 00:38:09,400
So as far as the enterprise version, I've said it before publicly I still think the

00:38:09,400 --> 00:38:11,109
enterprise Kernel model is wrong.

00:38:11,109 --> 00:38:13,369
I get paid by enterprise Kernel Company.

00:38:13,369 --> 00:38:15,329
I think it's wrong.

00:38:15,329 --> 00:38:20,660
Because if you look at what they do so, take SUSE or their [INDISTINCT] SLED 10--SUSE or

00:38:20,660 --> 00:38:21,789
enterprise ten.

00:38:21,789 --> 00:38:26,049
You take 2616 Kernel froze it in time and so, okay, here's what we're going to do.

00:38:26,049 --> 00:38:28,900
And they're fixing bugs and make sure they pass all regression test and ship it.

00:38:28,900 --> 00:38:32,359
A year later companies come along and sort of say, "We're going to do a service pack

00:38:32,359 --> 00:38:34,700
up date because we need to support new hardware."

00:38:34,700 --> 00:38:38,550
Problem is new hardware comes out that changes the guts of the Kernel based on the fact that

00:38:38,550 --> 00:38:40,009
we didn't know those things are going to happen.

00:38:40,009 --> 00:38:41,539
We didn't know that ATA was going to happen.

00:38:41,539 --> 00:38:43,540
We didn't know these new devices were going to happen.

00:38:43,540 --> 00:38:45,470
We know the wireless stack, what was going to happen there.

00:38:45,470 --> 00:38:48,440
So you go back and you kind of shoehorn all these stuff into there.

00:38:48,440 --> 00:38:54,700
If you look at what we have--we have I think 3000, maybe 4000 patches to 2616.

00:38:54,700 --> 00:38:56,589
It's not a 20616 Kernel anymore.

00:38:56,589 --> 00:39:01,349
It's 2616 with a bunch of bug fixes that we know were reported to it.

00:39:01,349 --> 00:39:05,880
And that's scary because we know a lot of bugs have been fixed between 2616 and what

00:39:05,880 --> 00:39:10,119
we have today, 26.5 that werenít reported, that werenít fix or that we didnít know

00:39:10,119 --> 00:39:16,099
about it and we didnít [INDISTINCT] so, extensively the Kernel, the user interface should be stable

00:39:16,099 --> 00:39:17,860
and stay the same.

00:39:17,860 --> 00:39:21,289
We donít change our version number to make people feel good that are used to the old

00:39:21,289 --> 00:39:23,830
Unix Model, things moving very slowly.

00:39:23,830 --> 00:39:28,200
The windows model things move very slowly that I think, "Theyíll stay with API." no,

00:39:28,200 --> 00:39:30,109
they just kind of slow API.

00:39:30,109 --> 00:39:33,640
All those Kernels--all the other operating system, they change, they break their API,

00:39:33,640 --> 00:39:34,640
they break their driver API.

00:39:34,640 --> 00:39:36,989
I'm on the windows driver development mail list.

00:39:36,989 --> 00:39:38,719
It's the best mailing and stuff.

00:39:38,719 --> 00:39:41,779
You just see the quotes for the Microsoft developers.

00:39:41,779 --> 00:39:45,589
Oh, yeah, we did something change there so we donít remember what change are we going

00:39:45,589 --> 00:39:48,640
to have to test, a lot of angry developers all the time.

00:39:48,640 --> 00:39:50,229
So, just like users, it's just like Linux.

00:39:50,229 --> 00:39:51,839
We change our APIs all the time.

00:39:51,839 --> 00:39:53,739
They donít have any fixed API.

00:39:53,739 --> 00:39:57,369
So, for inside the Kernel, outside the Kernel they do, hopefully.

00:39:57,369 --> 00:39:58,690
Outside of our Kernel we do.

00:39:58,690 --> 00:40:01,440
So, I still think that you should move forward.

00:40:01,440 --> 00:40:05,520
Now there's a model people that take a box, an enterprise box, put it on it and throw

00:40:05,520 --> 00:40:07,119
in the corner and donít touch it for five years.

00:40:07,119 --> 00:40:11,309
And then enterprise model that only gets security fixes and backwards to that that's great but

00:40:11,309 --> 00:40:15,619
only about 20% of the market out there because if you buy a box to shove in the corner and

00:40:15,619 --> 00:40:18,890
you're like a year from now you want to buy a new box, the new box is new hardware, and

00:40:18,890 --> 00:40:22,800
yet this [INDISTINCT] a new hardware on that old version of Kernel and that doesnít work,

00:40:22,800 --> 00:40:24,579
for desktop it just doesn't work.

00:40:24,579 --> 00:40:28,390
So, I still think the model isnít going to move faster.

00:40:28,390 --> 00:40:34,329
So, inside I'm trying to argue that, [INDISTINCT] is trying to argue that, see what works, you

00:40:34,329 --> 00:40:35,970
know, it's an interesting dilemma.

00:40:35,970 --> 00:40:40,619
So, now we're still making money so I'm happy.

00:40:40,619 --> 00:40:43,650
That's it?

00:40:43,650 --> 00:40:44,650
You guys are easy.

00:40:44,650 --> 00:40:46,599
>> MALE: So, where are you going to go next, let take...

00:40:46,599 --> 00:40:47,729
>> HARTMAN: Where are we next?

00:40:47,729 --> 00:40:48,729
Well, what's next?

00:40:48,729 --> 00:40:51,770
Yes, well, like I say is whatever you wanted to be.

00:40:51,770 --> 00:40:53,750
Things that I think are cool, KVM.

00:40:53,750 --> 00:40:55,410
KVM, is really, really cool.

00:40:55,410 --> 00:40:58,890
It's a running a virtual machine it's a hyper visor, turns Linux into a hyper visor.

00:40:58,890 --> 00:41:03,420
I think it's going to win other of this and model, two different or the VMware model.

00:41:03,420 --> 00:41:06,219
Like, what VMware does it's actually Linux running there.

00:41:06,219 --> 00:41:10,249
So all the big embedded or big hyper visor guys are really running Linux--cant find a

00:41:10,249 --> 00:41:12,229
watch.

00:41:12,229 --> 00:41:18,930
But so KVM School, KVM can afford the S390 main frames, port IO 64 for the arms coming

00:41:18,930 --> 00:41:21,130
and there're some other accessory on port too.

00:41:21,130 --> 00:41:22,589
So KVM is really cool.

00:41:22,589 --> 00:41:25,559
It's a really neat technology, just new virtual machines.

00:41:25,559 --> 00:41:29,609
So there's another way, if you have an enterprise [INDISTINCT] did you want to run fixed, you

00:41:29,609 --> 00:41:34,880
can run on top of KVM or a virtualized machine, you would change the hardware, you get the

00:41:34,880 --> 00:41:38,859
new drivers for your virtualized machine for your low level stuff than your virtualized

00:41:38,859 --> 00:41:42,339
machine and you can still render old version window just fine because at API between the

00:41:42,339 --> 00:41:43,339
two is fixed.

00:41:43,339 --> 00:41:44,410
And that's a new idea.

00:41:44,410 --> 00:41:48,390
So, you can run your applications to run your old app--the old things, they're running on

00:41:48,390 --> 00:41:53,079
this old API especially you're C++ libraries enterprise have a certain C++ library and

00:41:53,079 --> 00:41:55,019
it never want to change that--things like that.

00:41:55,019 --> 00:41:58,089
I know of some big shops, Linux shops, they're stuck using [INDISTINCT] and [INDISTINCT]

00:41:58,089 --> 00:42:01,420
three because the C++ developers do not want to ever change the compiler.

00:42:01,420 --> 00:42:04,860
It's what those guys do as they strip out the Kernel underneath and replace he Kernel

00:42:04,860 --> 00:42:09,239
with the latest enterprise for the latest Kernel--old kernel and then usually above

00:42:09,239 --> 00:42:14,269
that now even knows it happens to use them, they just know a raw metal stuff.

00:42:14,269 --> 00:42:15,800
I give [INDISTINCT].

00:42:15,800 --> 00:42:32,510
PSP3 is coming hopefully sometime in the future and of all without, that should be good [INDISTINCT].

00:42:32,510 --> 00:42:34,829
Yeah.

00:42:34,829 --> 00:42:49,579
>> MALE: So, I'm wondering [INDISTINCT] has a great [INDISTINCT] pretty dynamic thing.

00:42:49,579 --> 00:42:52,059
I was, kind of, curious, you know, like the [INDISTINCT] on the particular subsystem they

00:42:52,059 --> 00:42:54,180
[INDISTINCT] with that and it comes to like on particular individual.

00:42:54,180 --> 00:42:55,180
And what's your plan at certain [INDISTINCT]?

00:42:55,180 --> 00:42:56,180
>> HARTMAN: So, as the load as we...

00:42:56,180 --> 00:42:57,180
>> MALE: Or clients want to settle down.

00:42:57,180 --> 00:42:58,180
>> MALE: [INDISTINCT].

00:42:58,180 --> 00:42:59,180
>> MALE: You know what I mean?

00:42:59,180 --> 00:43:00,180
>> HARTMAN: Yes, [INDISTINCT], resettle down.

00:43:00,180 --> 00:43:01,180
>> MALE: Settle more.

00:43:01,180 --> 00:43:02,180
>> HARTMAN: Settle more.

00:43:02,180 --> 00:43:03,180
The substance and maintenance what's our load and as originally the--our load has gone out.

00:43:03,180 --> 00:43:04,180
I know my personal load I dropped, I donít maintain the PCI, I mean, [INDISTINCT] more

00:43:04,180 --> 00:43:05,180
because I wasnít paying enough attention to it.

00:43:05,180 --> 00:43:08,450
I know some of this is going to get more attention is now taking over.

00:43:08,450 --> 00:43:13,170
So, hopefully we can or smart enough to recognize among ourselves that when things are going

00:43:13,170 --> 00:43:14,409
wrong and we can change.

00:43:14,409 --> 00:43:17,299
We are nothing but introspective--I love talking about this.

00:43:17,299 --> 00:43:19,960
Every Kernel, someway we always talk about the process.

00:43:19,960 --> 00:43:21,809
On the middle is we argue about the process.

00:43:21,809 --> 00:43:24,529
As our process good or not and we changed things all the time, we have this table tree

00:43:24,529 --> 00:43:27,230
because people like our process really isnít covering up.

00:43:27,230 --> 00:43:29,049
Let's see how that works.

00:43:29,049 --> 00:43:33,109
The Linux next off, hey this process isnít working some system maintainers are burning

00:43:33,109 --> 00:43:34,109
out.

00:43:34,109 --> 00:43:35,109
Let's try this.

00:43:35,109 --> 00:43:37,539
So, we're nothing if not keep trying things.

00:43:37,539 --> 00:43:41,519
So, hopefully we just keep trying things and as soon as you're working really, really well,

00:43:41,519 --> 00:43:43,440
well better than we ever thought it would be.

00:43:43,440 --> 00:43:45,710
We havenít hitting max limits yet so far.

00:43:45,710 --> 00:43:48,170
Every time we do a Kernel is like I was the fastest ever.

00:43:48,170 --> 00:43:52,049
The 2625 Kernel blows away all those--those are average number.

00:43:52,049 --> 00:43:56,849
She's a 25 as the fastest, most amazing rated change, most developers, most individual companies

00:43:56,849 --> 00:43:58,380
and anything we've ever done.

00:43:58,380 --> 00:44:01,319
It's crazy and now, probably the next one will be more faster.

00:44:01,319 --> 00:44:03,680
So I don't know.

00:44:03,680 --> 00:44:05,499
Hopefully--I don't know where we're going top stop.

00:44:05,499 --> 00:44:06,890
We've already broken all the records so I don't know.

00:44:06,890 --> 00:44:07,890
We're making up as we go.

00:44:07,890 --> 00:44:08,890
Don't feel good about Linux now.

00:44:08,890 --> 00:44:09,890
Here.

00:44:09,890 --> 00:44:10,890
Here.

00:44:10,890 --> 00:44:14,069
>> So I have a sort of strange question--I mean, the set of layers kind of suck right

00:44:14,069 --> 00:44:15,069
now.

00:44:15,069 --> 00:44:18,869
How is it going with that?

00:44:18,869 --> 00:44:20,269
>> Set of layers of suck you, that's news.

00:44:20,269 --> 00:44:22,470
>> [INDISTINCT] >> HARTMAN: They use more suits, then let

00:44:22,470 --> 00:44:23,470
the developers know.

00:44:23,470 --> 00:44:24,470
>> Okay.

00:44:24,470 --> 00:44:27,349
>> HARTMAN: I mean that--that's, you know, new to me so let them know.

00:44:27,349 --> 00:44:29,329
If they don't know these problems then that's a big thing.

00:44:29,329 --> 00:44:32,680
If you find the problem let us know that's the best thing about our development model.

00:44:32,680 --> 00:44:35,019
You can find the person responsible for the code and make fun of him.

00:44:35,019 --> 00:44:36,019
>> Or give me a patch.

00:44:36,019 --> 00:44:37,019
>> HARTMAN Or give me a patch.

00:44:37,019 --> 00:44:38,549
Well, that's sign off by everything.

00:44:38,549 --> 00:44:41,569
So that's really--we like it--call it the path of blame.

00:44:41,569 --> 00:44:44,839
So you see a bug, "Hey look, all you guys miss this, fix it."

00:44:44,839 --> 00:44:47,729
So, yes if it's using too much CPU let us know.

00:44:47,729 --> 00:44:48,729
We'll work on it.

00:44:48,729 --> 00:44:51,450
Tashion is really good, really responsive [INDISTINCT] really good at that.

00:44:51,450 --> 00:44:52,959
So, they're good at this stuff.

00:44:52,959 --> 00:44:55,059
All the stuff has really weird hardware.

00:44:55,059 --> 00:44:58,602
Some of the hardwares written so that it's requiring more CPU power to do some of these

00:44:58,602 --> 00:45:01,729
things just because some of those manufacturers are also CPU manufacturers.

00:45:01,729 --> 00:45:03,510
So, they want you to buy new CPU.

00:45:03,510 --> 00:45:04,549
I don't know.

00:45:04,549 --> 00:45:10,480
One thing about KBM it doesn't make you buy a new CPU that's why AMD and Intel.

00:45:10,480 --> 00:45:15,369
I think itís a virtualization stuff.

00:45:15,369 --> 00:45:21,369
>> Does KBM [INDISTINCT] to [INDISTINCT] >> HARTMAN: KBM is the--or KBM makes Linux

00:45:21,369 --> 00:45:22,900
be the hyper visor.

00:45:22,900 --> 00:45:26,099
The way it has a Kernel developer it is the hyper visor.

00:45:26,099 --> 00:45:28,789
If you look at the way Zen model is, they have to have to their own scheduling, their

00:45:28,789 --> 00:45:32,380
own memory management or their power management so and then have Linux running on the side

00:45:32,380 --> 00:45:35,859
to handle the drivers because nobody wants to write drivers.

00:45:35,859 --> 00:45:37,859
Linux is always used for drivers.

00:45:37,859 --> 00:45:41,349
Herd uses Linux for drivers.

00:45:41,349 --> 00:45:44,019
Yeah, I'll take that.

00:45:44,019 --> 00:45:48,329
So, Linux--so why not do--so Zen is having a duplicate all the numerous stuff, all the

00:45:48,329 --> 00:45:51,539
power management never run in--on the laptop, it will suck your power dry.

00:45:51,539 --> 00:45:56,589
So, why not just use Linux as the core, because the core of the Linux is equal the size of

00:45:56,589 --> 00:45:57,589
the core of Zen.

00:45:57,589 --> 00:46:00,880
Actually--Linux Kernel is actually developed by more people.

00:46:00,880 --> 00:46:02,670
Maybe they know more things.

00:46:02,670 --> 00:46:08,029
They can do more things faster so use--so KBM models reuse Linux and then instance of

00:46:08,029 --> 00:46:11,220
the--the guest operating system runs in there's a little driver.

00:46:11,220 --> 00:46:14,630
There's KBM driver and just runs up there as a--it runs as a process.

00:46:14,630 --> 00:46:16,930
So, the really cool thing about that is real time.

00:46:16,930 --> 00:46:21,190
You can now real time schedule these guest operating systems and the real time is a real

00:46:21,190 --> 00:46:22,190
new thing.

00:46:22,190 --> 00:46:29,079
Some people can measure network latency and latency of processes in dollars.

00:46:29,079 --> 00:46:31,839
And they can do that in Dollars and then--so, if they can reduce that.

00:46:31,839 --> 00:46:32,839
They can make it predictable.

00:46:32,839 --> 00:46:36,489
They can throw some really, really big machines at it and make their cost go down and make

00:46:36,489 --> 00:46:37,489
more money.

00:46:37,489 --> 00:46:39,390
So real time really matters for those guys.

00:46:39,390 --> 00:46:41,799
Real time might matter for you guys for network latency.

00:46:41,799 --> 00:46:45,760
Other big companies would do a lot of web services really care about the network latency

00:46:45,760 --> 00:46:46,799
they want to be able to schedule.

00:46:46,799 --> 00:46:49,930
They donít want to be waiting for another process to come in and finish thing.

00:46:49,930 --> 00:46:54,749
They want to be able to know what's going to happen to determine it holistically.

00:46:54,749 --> 00:46:56,490
So, anyway--so KBM can handle that.

00:46:56,490 --> 00:47:02,299
KBM can then real time schedule your guest operating systems Zen can't do that.

00:47:02,299 --> 00:47:06,020
Zen also did their development often in the side of the corner and never played nice with

00:47:06,020 --> 00:47:07,020
the Kernel developers.

00:47:07,020 --> 00:47:08,059
They're trying to catch up now.

00:47:08,059 --> 00:47:10,519
I don't know if they're ever going to catch up which is sad.

00:47:10,519 --> 00:47:11,519
That's it.

00:47:11,519 --> 00:47:12,519
You guys are easy.

00:47:12,519 --> 00:47:14,690
>> Will there be a 2.7 Kernel?

00:47:14,690 --> 00:47:22,550
>> HARTMAN: Will there be a 2.7 Kernel?

00:47:22,550 --> 00:47:30,400
We said a long time ago, "Oh, if we ever do four little page tables or if we ever replace

00:47:30,400 --> 00:47:34,279
the timers of the systems, maybe we'll need a development branch that we're here to do

00:47:34,279 --> 00:47:35,279
this."

00:47:35,279 --> 00:47:36,279
We've done those things.

00:47:36,279 --> 00:47:39,119
The really cool thing about that development model and the one problem of the developed

00:47:39,119 --> 00:47:40,949
models we burn engineer's time.

00:47:40,949 --> 00:47:42,339
We waste engineers.

00:47:42,339 --> 00:47:47,519
We make you break your changes up into tiny discrete units that can be tested and obviously

00:47:47,519 --> 00:47:49,589
fit--obviously reviewed.

00:47:49,589 --> 00:47:52,620
So we make you take your, "Oh, I'm going to rewrite the timer sub system into a lot of

00:47:52,620 --> 00:47:56,019
individuals steps over time so which you'll never know if things go in."

00:47:56,019 --> 00:47:59,289
So, we've done these major things we thought we're going to have to happen already and

00:47:59,289 --> 00:48:00,289
people didn't notice.

00:48:00,289 --> 00:48:02,979
Well, some of the performance guy notice four label page tables [INDISTINCT].

00:48:02,979 --> 00:48:04,799
[INDISTINCT] reformats some place.

00:48:04,799 --> 00:48:06,279
They fix that since then.

00:48:06,279 --> 00:48:07,579
So, I don't know.

00:48:07,579 --> 00:48:08,849
We don't need a two set.

00:48:08,849 --> 00:48:10,130
I mean, the numbers are marketing.

00:48:10,130 --> 00:48:12,059
You know, so I don't think so.

00:48:12,059 --> 00:48:14,269
Anyway I think we're running out of time.

00:48:14,269 --> 00:48:18,989
>> I just want to--let me--put the mic here.

00:48:18,989 --> 00:48:19,989
Is this mic active?

00:48:19,989 --> 00:48:20,989
Good.

00:48:20,989 --> 00:48:24,589
I just want to remind all of you that our outgoing open source patch process is very,

00:48:24,589 --> 00:48:25,589
very low ceremony.

00:48:25,589 --> 00:48:28,319
If you got a patch right now you can ship it out within the hour.

00:48:28,319 --> 00:48:30,689
So we're not holding you back as a company, so...

00:48:30,689 --> 00:48:31,689
>> HARTMAN: Spelling fixes this all.

00:48:31,689 --> 00:48:33,440
>> Consider spelling fix.

00:48:33,440 --> 00:48:37,949
Anyone in this crowd can do a spelling fix so I'll encourage you to make Linux the best

00:48:37,949 --> 00:48:42,249
spelled happening system in the world.

00:48:42,249 --> 00:48:43,249
Oh, yeah.

00:48:43,249 --> 00:48:44,599
Now, we're certainly fast when it comes to shipping out patches.

00:48:44,599 --> 00:48:47,432
We only ask--will you look at your first couple and that's mostly to make sure that you're

00:48:47,432 --> 00:48:51,410
not insane and not from a--not from a technology stand point but actually from a craziness

00:48:51,410 --> 00:48:52,900
stand point, so.

00:48:52,900 --> 00:48:56,789
And after that we ended up trusting you and that's how it works so please do it.

00:48:56,789 --> 00:48:57,789
>> Okay.

00:48:57,789 --> 00:48:59,049
Well, thank you all for having me talk.

00:48:59,049 --> 00:49:00,979
>> Not that I think that 13 is bad.

00:49:00,979 --> 00:49:03,189
I think it's pretty good for a company of our type.

00:49:03,189 --> 00:49:04,189
>> HARTMAN: It is so.

00:49:04,189 --> 00:49:05,690
>> It's a decent place to start.

00:49:05,690 --> 00:49:06,690
>> HARTMAN: It's okay.

00:49:06,690 --> 00:49:07,690
>> But it'd be great if we were nine.

00:49:07,690 --> 00:49:08,690
>> HARTMAN: Yes.

00:49:08,690 --> 00:49:10,799
>> I could make that first slide.

00:49:10,799 --> 00:49:15,289
>> HARTMAN: Yes, everyone wants to be on that first slide.

00:49:15,289 --> 00:49:16,289
>> Great.

00:49:16,289 --> 00:49:17,289
>> HARTMAN: Great.

00:49:17,289 --> 00:49:18,880

YouTube URL: https://www.youtube.com/watch?v=L2SED6sewRw


