Title: Google Open Source Live "The new open source" | 5 simple things you can do to improve OSS docs
Publication date: 2020-10-05
Playlist: Google Open Source Live
Description: 
	Everyone knows documentation is important! Here are some simple things you (YES YOU!) can do to improve open source documentation!
Captions: 
	00:00:10,900 --> 00:00:14,200
Hey, folks, thanks so much for having me here today.

00:00:14,200 --> 00:00:18,860
I'm very much looking forward to talking with you all about things that you can do

00:00:18,860 --> 00:00:21,900
in open source documentation.

00:00:21,900 --> 00:00:24,340
So I'm Erin McKean and I work

00:00:24,340 --> 00:00:27,550
on docks advocacy in Google's Open Source Programs Office.

00:00:27,550 --> 00:00:35,300
So my job, and it's a very fun one, is to help open source projects have better docs.

00:00:35,300 --> 00:00:39,620
If you haven't heard the term "docs advocacy" before, well, it's still pretty new.

00:00:39,620 --> 00:00:44,699
Basically, docs advocacy is all about bringing better documentation practices

00:00:44,699 --> 00:00:50,690
to the folks who often have the most power to make change: developers.

00:00:50,690 --> 00:00:57,710
So docs advocacy is the developer-focused practice of encouraging better software docs

00:00:57,710 --> 00:01:02,580
whether that's through making docs yourself or helping others make docs

00:01:02,580 --> 00:01:09,750
or by creating a culture that places more importance on documentation.

00:01:09,750 --> 00:01:13,299
And we all know that docs are important

00:01:13,299 --> 00:01:15,080
but sometimes people are surprised by just

00:01:15,080 --> 00:01:19,140
how important docs actually are to developers.

00:01:19,140 --> 00:01:25,110
So in fact, 72% of developers who were surveyed by Tidelift in 2019

00:01:25,110 --> 00:01:28,290
cited established policies and documentation as

00:01:28,290 --> 00:01:32,930
a key decision factor that they used in choosing open source.

00:01:32,930 --> 00:01:38,200
And 93% of developers surveyed in 2017 by GitHub

00:01:38,200 --> 00:01:41,110
said that incomplete or outdated documentation

00:01:41,110 --> 00:01:44,370
was a pervasive problem in open source.

00:01:44,370 --> 00:01:48,070
Now I'm focused here on open source because that's what I work on

00:01:48,070 --> 00:01:50,430
but I can't imagine that closed...

00:01:50,430 --> 00:01:56,409
I can't imagine that closed source software has less of a need for good docs.

00:01:56,409 --> 00:01:59,780
And lack of documentation was the top reason

00:01:59,780 --> 00:02:03,760
that developers surveyed by DigitalOcean in 2018 gave

00:02:03,760 --> 00:02:07,350
for deciding against using an open source project.

00:02:07,350 --> 00:02:10,950
So survey after survey shows that developers care about docs

00:02:10,950 --> 00:02:15,040
and that they make choices based on documentation.

00:02:15,040 --> 00:02:20,959
So if your code is awesome but you have no docs or incomplete docs or outdated docs

00:02:20,959 --> 00:02:24,480
you're actually falling behind less technically adept

00:02:24,480 --> 00:02:27,450
or useful projects that have better docs.

00:02:27,450 --> 00:02:31,459
So when I tell people that I work on making open source docs better

00:02:31,459 --> 00:02:33,870
they often tell me, "Great, we need better docs."

00:02:33,870 --> 00:02:39,680
So then I ask, "OK, what are you doing to help your projects have better docs?"

00:02:39,680 --> 00:02:42,560
In open source docs have to be everyone's responsibility.

00:02:42,560 --> 00:02:48,930
And so in this talk, I want to give you five ways that you can help make open source

00:02:48,930 --> 00:02:50,450
documentation better.

00:02:50,450 --> 00:02:53,200
And yes, definitely there's work ahead.

00:02:53,200 --> 00:02:54,810
And you might be thinking,

00:02:54,810 --> 00:02:57,930
"I would have to be an amazing expert to really make

00:02:57,930 --> 00:03:00,200
"a difference in open source documentation."

00:03:00,200 --> 00:03:02,439
But actually, that's not true.

00:03:02,439 --> 00:03:08,400
In fact, even if you're a complete beginner, completely new to open source

00:03:08,400 --> 00:03:12,430
there are lots of ways in which you could help make open source documentation better.

00:03:12,430 --> 00:03:16,919
And in fact, in some ways, being a beginner is an asset

00:03:16,919 --> 00:03:24,400
because it turns out that ignorance is a constantly shrinking resource.

00:03:24,400 --> 00:03:27,389
You will never know less than you know today.

00:03:27,389 --> 00:03:29,930
Now, this might sound like I'm joking

00:03:29,930 --> 00:03:32,269
but one of the problems in writing documentation

00:03:32,269 --> 00:03:34,769
is that once you understand something

00:03:34,769 --> 00:03:37,010
it can be really difficult to put yourself in

00:03:37,010 --> 00:03:40,379
the mindset of someone who's new to it.

00:03:40,379 --> 00:03:43,580
Beginner's mind is actually a precious resource.

00:03:43,580 --> 00:03:48,939
So one of the ways in which you can turn your current ignorance into actual knowledge

00:03:48,939 --> 00:03:53,799
and something of value is by creating friction logs.

00:03:53,799 --> 00:03:59,599
So friction logging is basically just doing stuff while paying attention.

00:03:59,599 --> 00:04:04,529
So find a project you'd like to try, and follow the instructions

00:04:04,529 --> 00:04:06,880
whether that's for a tutorial or a quickstart

00:04:06,880 --> 00:04:13,059
just find something that you can do, and then write everything down.

00:04:13,059 --> 00:04:16,560
Write down what you tried, write down what you expected

00:04:16,560 --> 00:04:20,430
write down what worked, and especially write down what didn't work

00:04:20,430 --> 00:04:26,870
and what you did to get past that little broken step and onto the next thing.

00:04:26,870 --> 00:04:31,550
I find that even writing down whatever search terms I use to try to diagnose

00:04:31,550 --> 00:04:35,560
the problem helps me a lot when I go back to my fiction logs to figure out

00:04:35,560 --> 00:04:37,240
how the heck something worked.

00:04:37,240 --> 00:04:38,800
Then keep going.

00:04:38,800 --> 00:04:41,759
Keep going until you've either finished the tutorial or the QuickStart

00:04:41,759 --> 00:04:45,270
or it's so broken that you just can't get any farther.

00:04:45,270 --> 00:04:47,870
And then share your friction log.

00:04:47,870 --> 00:04:52,590
You can raise an issue in the project repo and add a link to your friction log

00:04:52,590 --> 00:04:56,680
Or if you can't find anybody to share it with in the project

00:04:56,680 --> 00:04:59,530
a friction log makes a great blog post.

00:04:59,530 --> 00:05:06,430
Another thing that you can do to help open source documentation is to go spelunking

00:05:06,430 --> 00:05:07,780
in the closed issues.

00:05:07,780 --> 00:05:13,750
A lot of times, there are closed issues in a project

00:05:13,750 --> 00:05:16,419
where the answer was missing from the docs

00:05:16,419 --> 00:05:20,439
but somebody shared it in the issue to help the person who was having the problem.

00:05:20,439 --> 00:05:25,350
And a lot of the time, that help never gets put back into the docs.

00:05:25,350 --> 00:05:29,659
So looking for closed issues, especially ones that mention docs

00:05:29,659 --> 00:05:32,819
and finding the information that was missing from the docs

00:05:32,819 --> 00:05:37,569
and then putting it where it belongs in the docs can be a huge help.

00:05:37,569 --> 00:05:41,099
By matching the solutions in the issues to the gaps in the docs

00:05:41,099 --> 00:05:42,639
you can help a lot of users.

00:05:42,639 --> 00:05:44,259
So how do you do this?

00:05:44,259 --> 00:05:46,780
How do you play match the issue to the docs?

00:05:46,780 --> 00:05:50,500
First, check out a project's closed issues.

00:05:50,500 --> 00:05:55,460
Then look for solutions in the closed issues that aren't reflected in the docs

00:05:55,460 --> 00:06:00,710
and write the solutions that are shown in the issues in a way that they fit into

00:06:00,710 --> 00:06:04,190
the docs and open a pull request.

00:06:04,190 --> 00:06:06,180
It's pretty straightforward.

00:06:06,180 --> 00:06:09,639
Another thing that you can use your incredibly valuable

00:06:09,639 --> 00:06:13,320
rapidly diminishing ignorance for is replicating bugs.

00:06:13,320 --> 00:06:15,840
Again, go back to the issues of a project

00:06:15,840 --> 00:06:20,729
especially the ones that have been closed because the submitter hasn't responded

00:06:20,729 --> 00:06:23,110
and then look for patterns.

00:06:23,110 --> 00:06:29,370
See if you can replicate the bug, and if you can, add your steps to the issue.

00:06:29,370 --> 00:06:36,069
So replicating bugs in issues might not actually seem like documentation work

00:06:36,069 --> 00:06:38,389
but it's really important.

00:06:38,389 --> 00:06:42,120
A project with a lot of open issues can be seen by developers

00:06:42,120 --> 00:06:46,719
as having incomplete documentation or being not very well maintained

00:06:46,719 --> 00:06:51,330
and by helping to replicate issues

00:06:51,330 --> 00:06:55,479
replicate bugs in issues that are just kind of lying around or stagnant

00:06:55,479 --> 00:06:59,360
you can really help maintainers with their burden.

00:06:59,360 --> 00:07:05,120
And by replicating issues, you give other people a step-up to improve

00:07:05,120 --> 00:07:08,070
the documentation around those issues

00:07:08,070 --> 00:07:11,960
Now, especially issues where the original person isn't responding

00:07:11,960 --> 00:07:14,850
it's probably not because they fixed the problem.

00:07:14,850 --> 00:07:17,800
It's probably because they moved on to something else.

00:07:17,800 --> 00:07:20,689
And for every person who bothers to file an issue

00:07:20,689 --> 00:07:24,800
there are a lot more who just went straight on to the find-something-else part.

00:07:24,800 --> 00:07:28,830
Now, once you've worked on friction logs for a little while

00:07:28,830 --> 00:07:33,849
and on adding documentation from issues and replicating bugs and issues

00:07:33,849 --> 00:07:37,699
the next logical step is to start working on tutorials.

00:07:37,699 --> 00:07:39,919
Not all tutorials have to be fancy.

00:07:39,919 --> 00:07:43,419
Some of the most useful tutorials are the most basic

00:07:43,419 --> 00:07:45,770
and tutorials really help you grow as a developer

00:07:45,770 --> 00:07:51,060
because you can never really know something until you've explained it to somebody else.

00:07:51,060 --> 00:07:53,340
So to write a tutorial

00:07:53,340 --> 00:07:57,620
I think the first place to start is to think about what did you get excited about lately?

00:07:57,620 --> 00:08:00,180
What were you happy that you learned?

00:08:00,180 --> 00:08:04,180
And then think about how would I explain this to somebody else?

00:08:04,180 --> 00:08:06,050
And if you've kept a friction log

00:08:06,050 --> 00:08:08,900
this is great for writing tutorials because you could go back

00:08:08,900 --> 00:08:13,129
and look at every step that you did and everything that did and didn't work.

00:08:13,129 --> 00:08:15,020
Now, then think about

00:08:15,020 --> 00:08:18,940
OK, you're excited about this thing and you know how to do it.

00:08:18,940 --> 00:08:20,979
But why would somebody else want to do it?

00:08:20,979 --> 00:08:22,069
What makes it cool?

00:08:22,069 --> 00:08:24,120
What problem will it solve?

00:08:24,120 --> 00:08:28,949
How will it help someone else to know how to do this thing?

00:08:28,949 --> 00:08:33,310
If you need a little extra motivation, find a friend.

00:08:33,310 --> 00:08:36,870
Each of you write a tutorial and then pair up and swap tutorials.

00:08:36,870 --> 00:08:40,270
Try to work through the other person's tutorial and make sure that it works.

00:08:40,270 --> 00:08:44,080
Also, having a friend to do this with adds a little bit of accountability

00:08:44,080 --> 00:08:50,470
just in the same way as having a friend keep you accountable for exercise does.

00:08:50,470 --> 00:08:51,960
Even if you never publish a tutorial

00:08:51,960 --> 00:08:53,900
writing one is excellent practice.

00:08:53,900 --> 00:08:58,440
As time goes on, almost everyone ends up spending more time explaining things

00:08:58,440 --> 00:09:01,190
and less time being explained to.

00:09:01,190 --> 00:09:07,690
So having good, clear, concise explanation skills is really helpful.

00:09:07,690 --> 00:09:12,670
Now, if you can't think of something to do, copy.

00:09:12,670 --> 00:09:15,390
Now look around at projects that have good docs

00:09:15,390 --> 00:09:18,720
think about what makes those docs good.

00:09:18,720 --> 00:09:20,200
Then find a project that you like

00:09:20,200 --> 00:09:24,630
or that you want to use that could use some docs love.

00:09:24,630 --> 00:09:28,280
What could you copy over in terms of types or the structure of docs

00:09:28,280 --> 00:09:30,460
not the actual content obviously

00:09:30,460 --> 00:09:34,760
from the project that has good docs to the project that needs a little bit of docs help?

00:09:34,760 --> 00:09:40,830
It is 100% OK to look at other projects' documentation as a model for your own docs.

00:09:40,830 --> 00:09:43,480
You can just treat them like a coloring book.

00:09:43,480 --> 00:09:45,710
The headings and the structure are the lines

00:09:45,710 --> 00:09:48,570
that you fill in with your own content crayons.

00:09:48,570 --> 00:09:55,350
So when you're trying to copy docs from one project to another project

00:09:55,350 --> 00:09:57,140
first pick a project that you like.

00:09:57,140 --> 00:10:00,700
You won't be motivated to do docs for a project that you don't like.

00:10:00,700 --> 00:10:04,843
And then make a list of what kinds of documentation it has or it needs.

00:10:04,843 --> 00:10:07,440
Does it have a readme but it needs a quickstart?

00:10:07,440 --> 00:10:11,580
Does it have good concept documentation but no tutorials?

00:10:11,580 --> 00:10:13,310
Does it need help with governance docs

00:10:13,310 --> 00:10:17,080
or documentation about participating in the community?

00:10:17,080 --> 00:10:19,960
Look for a list of document templates

00:10:19,960 --> 00:10:24,100
The Good Docs Project and Write the Docs are great resources for this

00:10:24,100 --> 00:10:27,270
or choose a similar project with more comprehensive docs

00:10:27,270 --> 00:10:29,380
that you can use as a model.

00:10:29,380 --> 00:10:31,510
You can also use docsy.dev

00:10:31,510 --> 00:10:37,020
which is the documentation template for the Hugo static site generator.

00:10:37,020 --> 00:10:40,340
And then use the templates you found to help create better docs for

00:10:40,340 --> 00:10:42,520
the project you've chosen.

00:10:42,520 --> 00:10:46,020
Now, I know I said I was going to give you five ways

00:10:46,020 --> 00:10:48,380
that you could help make better open source documentation

00:10:48,380 --> 00:10:50,840
but I'm kind of going to give you a bonus round.

00:10:50,840 --> 00:10:54,740
So this is from a wonderful series of comics by Julia Evans

00:10:54,740 --> 00:10:57,870
who goes by the name @b0rk on Twitter.

00:10:57,870 --> 00:10:59,810
I highly recommend her work.

00:10:59,810 --> 00:11:02,460
It's always entertaining and super explanatory.

00:11:02,460 --> 00:11:07,190
So one way that you can add a lot of value to documentation

00:11:07,190 --> 00:11:11,250
in open source is by creating a concepts doc.

00:11:11,250 --> 00:11:13,930
Have you ever found a library or a project and been like

00:11:13,930 --> 00:11:15,490
"I don't even know why I would use this?

00:11:15,490 --> 00:11:17,250
What is this even for?

00:11:17,250 --> 00:11:20,180
"I don't understand what's going on here."

00:11:20,180 --> 00:11:23,430
That's a project that could really use a concepts doc.

00:11:23,430 --> 00:11:27,430
Now, writing a concepts doc does take more time and more work

00:11:27,430 --> 00:11:30,760
which is why I kind of have it as a bonus round.

00:11:30,760 --> 00:11:34,700
But if you want to write a concepts doc, here's how you do it.

00:11:34,700 --> 00:11:38,290
find a project where it's unclear why you would want to use it.

00:11:38,290 --> 00:11:39,320
What does it do?

00:11:39,320 --> 00:11:41,910
Make a list of the concepts involved.

00:11:41,910 --> 00:11:45,640
Write a one-sentence explanation of each concept.

00:11:45,640 --> 00:11:49,950
Now, this is a lot easier to say than it is to do, but give it your best shot.

00:11:49,950 --> 00:11:53,290
You just want to have something that's short and clear.

00:11:53,290 --> 00:11:57,480
Now, when you're writing one-sentence explanations of some concepts

00:11:57,480 --> 00:12:00,980
you might find that there are other concepts involved in those sentences

00:12:00,980 --> 00:12:03,260
that need more explanation.

00:12:03,260 --> 00:12:06,250
So go ahead and expand your list.

00:12:06,250 --> 00:12:10,480
Keep going until you run out of concepts and then write a story.

00:12:10,480 --> 00:12:13,240
Write a use case for the project.

00:12:13,240 --> 00:12:20,290
What would someone need to know in order to decide whether or not to use the project?

00:12:20,290 --> 00:12:23,700
And then include your explanations in there.

00:12:23,700 --> 00:12:27,360
So this is really hard to explain in the abstract

00:12:27,360 --> 00:12:30,110
so I'm going to give you a concrete example.

00:12:30,110 --> 00:12:34,810
I'm working on a project to demonstrate documentation templates.

00:12:34,810 --> 00:12:36,700
The project is called Chronolog,

00:12:36,700 --> 00:12:40,350
and it helps time travelers convert between different calendars

00:12:40,350 --> 00:12:42,150
for more precise time travel.

00:12:42,150 --> 00:12:43,740
Yes, this is a joke project.

00:12:43,740 --> 00:12:44,980
It does not work.

00:12:44,980 --> 00:12:49,640
So a concept doc for Chronolog would involve explaining

00:12:49,640 --> 00:12:52,720
Why would a time traveler want to use this?

00:12:52,720 --> 00:12:56,140
What is meant by the phrase calendrical system?

00:12:56,140 --> 00:13:01,000
What a calendrical system conversion program does and so forth.

00:13:01,000 --> 00:13:03,860
And at the end of that concept doc, someone would be able to say

00:13:03,860 --> 00:13:05,610
"Oh yeah, I time travel all the time

00:13:05,610 --> 00:13:10,080
"and boy, I would really like to be able to convert between the Mayan and

00:13:10,080 --> 00:13:11,730
"the Julian calendar more easily."

00:13:11,730 --> 00:13:13,130
Or they say, "Oh, you know what?

00:13:13,130 --> 00:13:14,870
I hardly ever time travel.

00:13:14,870 --> 00:13:17,570
"I don't need this project"

00:13:17,570 --> 00:13:21,860
So, I believe that everyone can contribute to open source docs

00:13:21,860 --> 00:13:27,750
if they are sufficiently motivated and they have some of these places to start.

00:13:27,750 --> 00:13:30,430
Everyone is a beginner at something.

00:13:30,430 --> 00:13:33,700
If you've been holding back from contributing to open source documentation

00:13:33,700 --> 00:13:37,860
there is no better time to start than today.

00:13:37,860 --> 00:13:39,610
And now, there's one other thing that I wanted to mention.

00:13:39,610 --> 00:13:44,110
Some of the pushback I get from people about why they're not contributing to open source

00:13:44,110 --> 00:13:47,090
docs is, they say, "Oh, I'm not a writer."

00:13:47,090 --> 00:13:48,600
Now, I totally understand.

00:13:48,600 --> 00:13:50,440
It is scary to work on things

00:13:50,440 --> 00:13:54,960
and to do things that you feel like you might not be very good at.

00:13:54,960 --> 00:13:59,420
But almost everyone working in software development has spent more time

00:13:59,420 --> 00:14:02,540
writing non-code than they have spent writing code.

00:14:02,540 --> 00:14:06,920
They've spent more time talking than they have writing code.

00:14:06,920 --> 00:14:12,070
And as long as you can reasonably express yourself

00:14:12,070 --> 00:14:14,640
you could help with software documentation.

00:14:14,640 --> 00:14:20,250
In my non-Google time, I ran a very large online dictionary in API called Wordnik

00:14:20,250 --> 00:14:23,200
and I used to run, before I started working in tech

00:14:23,200 --> 00:14:25,461
American Dictionaries for Oxford University Press.

00:14:25,461 --> 00:14:29,800
And I also run the Semicolon Appreciation Society.

00:14:29,800 --> 00:14:34,810
So if you want a semi-authority figure to tell you not to worry about your writing

00:14:34,810 --> 00:14:37,430
or if you're writing in English and it's not your first language

00:14:37,430 --> 00:14:41,160
I'm here to say, in my professional language person opinion

00:14:41,160 --> 00:14:44,360
you are going to be fine.

00:14:44,360 --> 00:14:46,010
Use templates.

00:14:46,010 --> 00:14:48,930
Look up words when you're unsure of their meaning.

00:14:48,930 --> 00:14:53,410
Ask your trusted friends to give what you've written a quick once over.

00:14:53,410 --> 00:14:58,820
And most of all, accept corrections gracefully and with appreciation

00:14:58,820 --> 00:15:03,530
and most people reading your documentation will overlook a few misspellings or a typo

00:15:03,530 --> 00:15:08,850
or two or subjects that are disagreeing with their verbs.

00:15:08,850 --> 00:15:12,810
If you really want to increase the impact of your work

00:15:12,810 --> 00:15:17,300
if you really want to increase your skills as a developer

00:15:17,300 --> 00:15:21,030
creating better documentation is an incredibly effective way to do that.

00:15:21,030 --> 00:15:28,700
I think being able to create good documentation is a superpower.

00:15:28,700 --> 00:15:31,690
Please feel free to ask me questions in the live chat

00:15:31,690 --> 00:15:37,370
I'm always happy to answer when I can and to try to find links to what I don't know.

00:15:37,370 --> 00:15:40,570
And speaking of links, I have some links for you.

00:15:40,570 --> 00:15:45,200
So first of all, there's a really good blog post on friction logging that

00:15:45,200 --> 00:15:46,960
I recommend that you read.

00:15:46,960 --> 00:15:48,380
It's more from a product point of view

00:15:48,380 --> 00:15:53,600
but it has a lot of helpful tips for people who are friction logging in open source.

00:15:53,600 --> 00:15:58,450
Again, I cannot recommend Wizard Docs by Julia Evans highly enough.

00:15:58,450 --> 00:16:00,910
The comics are great.

00:16:00,910 --> 00:16:04,660
docsy.dev is the documentation-focused template for

00:16:04,660 --> 00:16:07,240
the Hugo static site generator that I mentioned.

00:16:07,240 --> 00:16:13,340
It is set up from the perspective of someone who's trying to create docs for developers.

00:16:13,340 --> 00:16:15,500
The Good Docs Project on GitHub is trying to

00:16:15,500 --> 00:16:19,160
make documentation templates for open source.

00:16:19,160 --> 00:16:21,690
It's still very early days as an open source project

00:16:21,690 --> 00:16:26,360
so enthusiastic participation is welcome.

00:16:26,360 --> 00:16:30,470
And if you can't think of your question right now for the live chat,

00:16:30,470 --> 00:16:32,360
you can always reach out to me on Twitter.

00:16:32,360 --> 00:16:33,360
I'm just @emckean.

00:16:33,360 --> 00:16:35,150
I'm a pink robot on Twitter.

00:16:35,150 --> 00:16:39,130
So if you don't see the pink robot, that's not me.

00:16:39,130 --> 00:16:41,300
And thank you so much for spending time with me today

00:16:41,300 --> 00:16:44,420

YouTube URL: https://www.youtube.com/watch?v=32_5ytpE91s


