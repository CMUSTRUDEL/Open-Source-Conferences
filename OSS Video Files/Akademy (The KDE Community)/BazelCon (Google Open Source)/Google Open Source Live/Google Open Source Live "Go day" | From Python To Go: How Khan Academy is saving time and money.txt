Title: Google Open Source Live "Go day" | From Python To Go: How Khan Academy is saving time and money
Publication date: 2020-12-03
Playlist: Google Open Source Live
Description: 
	
Captions: 
	00:00:10,590 --> 00:00:14,060
Hi, I'm Steve Coffman, and I work at Khan Academy.

00:00:14,060 --> 00:00:15,470
And today, I'd like to tell you

00:00:15,470 --> 00:00:19,040
how Khan Academy is saving both time and money

00:00:19,040 --> 00:00:22,450
by transitioning from Python to Go.

00:00:22,450 --> 00:00:27,400
First, what is Khan Academy?

00:00:27,400 --> 00:00:31,070
At Khan Academy we believe it doesn't matter where you start.

00:00:31,070 --> 00:00:32,980
What matters is where you go.

00:00:32,980 --> 00:00:37,390
By offering a free, world-class education for anyone, anywhere

00:00:37,390 --> 00:00:41,520
we're leveling the playing field one learner at a time.

00:00:41,520 --> 00:00:42,520
Just last year

00:00:42,520 --> 00:00:49,630
millions of people spent 8.7 billion minutes actively learning at Khan Academy.

00:00:49,630 --> 00:00:52,200
Now, who am I?

00:00:52,200 --> 00:00:55,879
If you'll pardon the brief digression.

00:00:55,879 --> 00:00:58,129
I've been a software engineer for 20 years

00:00:58,129 --> 00:01:01,110
and I've worked at Khan Academy for the past year.

00:01:01,110 --> 00:01:04,280
In my career, I've found that I've grown the most professionally

00:01:04,280 --> 00:01:07,150
when I work with people with diverse experiences.

00:01:07,150 --> 00:01:09,970
I love the diversity of experience that I've seen at Khan

00:01:09,970 --> 00:01:15,680
and I'm proud that Khan is committed to further increasing that diversity.

00:01:15,680 --> 00:01:19,700
One other thing I love about Khan is on the anniversary of our first day

00:01:19,700 --> 00:01:22,490
it's a tradition for us to give back.

00:01:22,490 --> 00:01:27,280
This year, I collected information on all the best remote home office setups

00:01:27,280 --> 00:01:30,430
for all those who are newly working from home.

00:01:30,430 --> 00:01:32,680
I always enjoy these kind of quirky, personal gifts

00:01:32,680 --> 00:01:35,500
that we give to show our appreciation to one another.

00:01:35,500 --> 00:01:40,850
And now, I want to show you how Khan Academy engineers are shepherding

00:01:40,850 --> 00:01:41,850
us

00:01:41,850 --> 00:01:43,479
through a remarkable transformation

00:01:43,479 --> 00:01:46,300
which will hopefully be invisible externally

00:01:46,300 --> 00:01:52,050
just to show how much I appreciate the work of the rest of their organization.

00:01:52,050 --> 00:01:55,450
First, where did we start?

00:01:55,450 --> 00:01:58,119
We started on GCP App Engine

00:01:58,119 --> 00:02:02,190
and we started with a Python 2 monolith

00:02:02,190 --> 00:02:05,340
and this served us well for much of the company's history.

00:02:05,340 --> 00:02:10,259
Where are we going?

00:02:10,259 --> 00:02:13,920
Well, we're going to GCP app engine still

00:02:13,920 --> 00:02:18,040
but we're also going to multiple Go servicesâ€”27!

00:02:18,040 --> 00:02:23,500
And we're going to use GraphQL in between the services.

00:02:23,500 --> 00:02:26,599
So, as you may have heard

00:02:26,599 --> 00:02:29,099
there's been an end-of-life announcement for Python 2

00:02:29,099 --> 00:02:35,409
and when that came out, it forced us to make some choices.

00:02:35,409 --> 00:02:37,519
We chose Go.

00:02:37,519 --> 00:02:40,299
It was fast, which translates to cheaper.

00:02:40,299 --> 00:02:44,689
It's got a rich ecosystem and a rich standard library.

00:02:44,689 --> 00:02:46,879
It's simple and productive

00:02:46,879 --> 00:02:51,420
and maintaining someone else's code is a pleasure in Golang.

00:02:51,420 --> 00:02:54,209
I've maintained code and I've written my own code

00:02:54,209 --> 00:02:56,629
in many different languages over my career.

00:02:56,629 --> 00:02:59,180
I love the expressivity of writing code.

00:02:59,180 --> 00:03:03,530
I love doing some clever little trick and doing all these other kinds of things

00:03:03,530 --> 00:03:04,950
switching from one paradigm to another

00:03:04,950 --> 00:03:07,730
experimenting with things and playing with them.

00:03:07,730 --> 00:03:09,290
It's a true joy.

00:03:09,290 --> 00:03:13,269
But the problem is that when I'm maintaining somebody else's code

00:03:13,269 --> 00:03:15,680
the cleverness that they put into their code

00:03:15,680 --> 00:03:18,260
sometimes makes my head hurt.

00:03:18,260 --> 00:03:23,209
Sometimes, I look at their code and I have no idea what this is doing

00:03:23,209 --> 00:03:25,670
and what the context of the original decision was

00:03:25,670 --> 00:03:29,480
especially as it's shifted over time.

00:03:29,480 --> 00:03:32,159
People switch from one paradigm to another

00:03:32,159 --> 00:03:33,769
back and forth.

00:03:33,769 --> 00:03:37,219
When I maintain somebody else's code in Golang

00:03:37,219 --> 00:03:41,209
it's a pleasure because it looks just like my code.

00:03:41,209 --> 00:03:42,510
I love that.

00:03:42,510 --> 00:03:44,069
It may be grumpy at first

00:03:44,069 --> 00:03:47,859
but I really love the maintainability of Go.

00:03:47,859 --> 00:03:49,209
It's so simple.

00:03:49,209 --> 00:03:52,110
It's so easy for anybody to jump into a code base

00:03:52,110 --> 00:03:54,480
and it makes perfect sense to them.

00:03:54,480 --> 00:03:58,519
We also had to choose what platform we should run on.

00:03:58,519 --> 00:04:00,930
We chose AppEngine again.

00:04:00,930 --> 00:04:04,420
We wanted to avoid undifferentiated heavy lifting.

00:04:04,420 --> 00:04:08,180
Many organizations get a little too caught up in their own creations

00:04:08,180 --> 00:04:12,790
and their own creations end up owning them

00:04:12,790 --> 00:04:16,810
as they have to have a burden for maintaining something unique

00:04:16,810 --> 00:04:20,610
that the rest of the ecosystem doesn't know anything about.

00:04:20,610 --> 00:04:24,100
If there are common problems with common solutions

00:04:24,100 --> 00:04:28,550
it's easier for us to focus on our own business value

00:04:28,550 --> 00:04:33,990
than to try to actually have to make some other unique solution.

00:04:33,990 --> 00:04:38,220
The other thing about AppEngine is that it scales great.

00:04:38,220 --> 00:04:42,169
When COVID-19 forced school closures across the world

00:04:42,169 --> 00:04:45,460
we really had almost nothing to talk about

00:04:45,460 --> 00:04:49,630
because everything just scaled pretty much amazingly.

00:04:49,630 --> 00:04:52,310
We had a few secondary systems that weren't user-visible

00:04:52,310 --> 00:04:53,889
that we had to make some tweaks to

00:04:53,889 --> 00:04:57,580
but no real problems to speak of

00:04:57,580 --> 00:05:01,830
which I think speaks volumes to the reliability of AppEngine.

00:05:01,830 --> 00:05:06,210
I should actually say even more about that.

00:05:06,210 --> 00:05:08,849
Our pager duty is all volunteer.

00:05:08,849 --> 00:05:12,789
And the reason why we can choose to let everybody opt out of that

00:05:12,789 --> 00:05:18,650
and have to opt in is because it goes off so rarely after hours.

00:05:18,650 --> 00:05:23,120
It's only going off less than once a month

00:05:23,120 --> 00:05:24,720
for the past year and a half

00:05:24,720 --> 00:05:29,539
and it's continuing to go off increasingly rarely in the off hours

00:05:29,539 --> 00:05:32,419
and every time it has gone off, it's been our fault.

00:05:32,419 --> 00:05:33,669
It's not been Google's

00:05:33,669 --> 00:05:36,090
so AppEngine's pretty great.

00:05:36,090 --> 00:05:39,190
I highly recommend it.

00:05:39,190 --> 00:05:40,379
The other choice we had was

00:05:40,379 --> 00:05:44,539
should we stick with the monolith or switch to services?

00:05:44,539 --> 00:05:46,490
We chose services.

00:05:46,490 --> 00:05:49,919
Try to imagine an entire family all living, working, and going to school

00:05:49,919 --> 00:05:51,580
in the same small living space.

00:05:51,580 --> 00:05:53,930
I know, it's so far-fetched.

00:05:53,930 --> 00:05:55,540
But bear with me.

00:05:55,540 --> 00:05:57,419
We have 86 engineers at Khan Academy

00:05:57,419 --> 00:06:01,139
and in our monolith, it's started to feel similarly cramped.

00:06:01,139 --> 00:06:03,900
Borderless engineering required intense thoughtfulness

00:06:03,900 --> 00:06:07,810
discipline, and coordination to avoid bumping into one another.

00:06:07,810 --> 00:06:10,009
Our deploy queues got longer and longer

00:06:10,009 --> 00:06:13,979
as we needed to test all the things for even a small change.

00:06:13,979 --> 00:06:14,979
We also couldn't isolate

00:06:14,979 --> 00:06:18,830
how much specific efforts cost compared to the benefit they brought

00:06:18,830 --> 00:06:22,669
to know whether we were spending our resources wisely

00:06:22,669 --> 00:06:27,599
or whether we should choose another path.

00:06:27,599 --> 00:06:33,270
We also needed to choose how should services communicate between one another?

00:06:33,270 --> 00:06:35,150
We chose GraphQL for this.

00:06:35,150 --> 00:06:40,830
We had great success previously with react and GraphQL on the frontend.

00:06:40,830 --> 00:06:43,169
AppEngine, as awesome as it is

00:06:43,169 --> 00:06:48,770
unfortunately does not support HTTP/2 (gRPC) yet.

00:06:48,770 --> 00:06:53,400
But GraphQL provided a ubiquitous language across Go and JavaScript divide

00:06:53,400 --> 00:06:56,080
and across the backend/frontend divide

00:06:56,080 --> 00:06:59,949
so that all of our engineers could actually have a very similar experience

00:06:59,949 --> 00:07:03,759
when they were at least talking about those contracts.

00:07:03,759 --> 00:07:05,509
Speaking of those contracts

00:07:05,509 --> 00:07:10,030
by having our GraphQL be schema driven and then generate the code

00:07:10,030 --> 00:07:11,479
from those schemas

00:07:11,479 --> 00:07:14,669
we didn't have to get tangled up in expensive contract testing

00:07:14,669 --> 00:07:19,570
because we knew that those were exactly what we had written.

00:07:19,570 --> 00:07:22,250
We wrote the spec first as the contract

00:07:22,250 --> 00:07:27,460
and then the code just got generated from that.

00:07:27,460 --> 00:07:28,460
We also had to decide

00:07:28,460 --> 00:07:31,030
how should we divide up into services from our monolith?

00:07:31,030 --> 00:07:34,879
It's a little messy to put them all in here

00:07:34,879 --> 00:07:36,740
but I wanted to illustrate the point

00:07:36,740 --> 00:07:40,410
that we chose not to make our services very microsized.

00:07:40,410 --> 00:07:43,639
Wherever there seemed to be a good conceptual or technical scene

00:07:43,639 --> 00:07:45,129
that's where we drew a line.

00:07:45,129 --> 00:07:48,680
A few are not directly user-facing.

00:07:48,680 --> 00:07:52,050
For instance, we have an email service.

00:07:52,050 --> 00:07:53,419
That's not pictured here.

00:07:53,419 --> 00:07:56,409
But some, like the static assets request

00:07:56,409 --> 00:08:01,760
go through quickly and then straight to Google Cloud storage.

00:08:01,760 --> 00:08:05,500
What have we learned when we transitioned to Go?

00:08:05,500 --> 00:08:09,860
And how did we learn those things?

00:08:09,860 --> 00:08:11,849
A lot of our developers, most of our developers

00:08:11,849 --> 00:08:14,370
were not familiar with Go in the beginning

00:08:14,370 --> 00:08:19,400
so we collaborated and created a tiny little command line app

00:08:19,400 --> 00:08:21,639
that was all test driven

00:08:21,639 --> 00:08:25,219
and then we deleted all the code, leaving only the tests.

00:08:25,219 --> 00:08:28,550
We had developers who had never seen Go before

00:08:28,550 --> 00:08:32,960
be able to actually, one by one, enable the tests and make them pass

00:08:32,960 --> 00:08:36,080
and move on until they had a fully functional application

00:08:36,080 --> 00:08:37,659
that would forecast the weather.

00:08:37,659 --> 00:08:41,680
Not exactly trivial but not exactly complicated.

00:08:41,680 --> 00:08:43,840
It was enough to give them a taste for the language

00:08:43,840 --> 00:08:48,230
and it was enough that they, in true Khan style, were able to take those

00:08:48,230 --> 00:08:52,540
and try to get hints if they had any sort of issues

00:08:52,540 --> 00:08:55,500
and it would actually work out pretty well.

00:08:55,500 --> 00:08:57,710
We also had encouraged our developers to read

00:08:57,710 --> 00:09:02,800
and to practice using Learn Go with Tests, which is an excellent resource.

00:09:02,800 --> 00:09:05,000
After that, we engaged with Ardan Labs

00:09:05,000 --> 00:09:07,950
to have them provide training on site to our engineers

00:09:07,950 --> 00:09:11,930
and remote for all those people who are remote.

00:09:11,930 --> 00:09:15,690
One of the big lessons we learned is to create a cookbook

00:09:15,690 --> 00:09:18,030
for everything that's confusing

00:09:18,030 --> 00:09:20,520
when somebody asks the same question more than once

00:09:20,520 --> 00:09:22,420
to listen to that as a signal.

00:09:22,420 --> 00:09:26,630
And we've written how to do different things in Go

00:09:26,630 --> 00:09:28,590
how to do different things in GraphQL

00:09:28,590 --> 00:09:32,270
how to translate certain paradigms from Python into Go

00:09:32,270 --> 00:09:34,590
and we maintained that over time.

00:09:34,590 --> 00:09:37,200
Whenever somebody is new

00:09:37,200 --> 00:09:40,870
they are the most valuable resource in looking at that

00:09:40,870 --> 00:09:44,830
because any confusion that they find, that's a signal that we use

00:09:44,830 --> 00:09:47,570
to help to improve that resource and make that a living resource

00:09:47,570 --> 00:09:49,850
as we move on.

00:09:49,850 --> 00:09:51,420
The other thing that we're doing

00:09:51,420 --> 00:09:55,550
is we're actually open-sourcing some of our ongoing onboarding.

00:09:55,550 --> 00:09:58,480
We have an open-source repository â€”the Web-workshop

00:09:58,480 --> 00:10:03,260
that we're trying to develop in order to allow ongoing education

00:10:03,260 --> 00:10:05,110
for any new developer that comes in

00:10:05,110 --> 00:10:08,880
to be able to come up to speed reasonably quickly.

00:10:08,880 --> 00:10:11,460
When you're making a drastic shift

00:10:11,460 --> 00:10:14,540
such as from a Python service to a Go service

00:10:14,540 --> 00:10:17,870
or from a monolith to services

00:10:17,870 --> 00:10:23,000
you need to make sure that that transition can happen in a safe manner.

00:10:23,000 --> 00:10:25,150
The way that that has traditionally been done

00:10:25,150 --> 00:10:28,530
is using a technique such as traffic shadowing

00:10:28,530 --> 00:10:32,880
where requests go to the new version and the old version

00:10:32,880 --> 00:10:38,120
but only the response from the old version is given to end users

00:10:38,120 --> 00:10:42,230
and you only compare those once you feel confident.

00:10:42,230 --> 00:10:46,900
Then you can shift over to being able to provide the end user

00:10:46,900 --> 00:10:51,160
with the response from the new version.

00:10:51,160 --> 00:10:55,560
Github pioneered a similar technique using the library Scientist

00:10:55,560 --> 00:11:01,160
to be able to make those sorts of transitions inside of a code base.

00:11:01,160 --> 00:11:05,640
That same technique has been ported to many other languages and other frameworks.

00:11:05,640 --> 00:11:07,490
We were inspired by that

00:11:07,490 --> 00:11:11,480
but we at Khan Academy chose to do side-by-side testing

00:11:11,480 --> 00:11:15,980
where we're using GraphQL Federation to allow us to transition

00:11:15,980 --> 00:11:25,100
at the granularity of even a single field at a time within our GraphQL.

00:11:25,100 --> 00:11:28,580
This is what our side-by-side transition looks like at Khan.

00:11:28,580 --> 00:11:30,990
We develop in the Python monolith first.

00:11:30,990 --> 00:11:33,930
We make sure that we're actually using the GraphQL endpoint

00:11:33,930 --> 00:11:37,110
and not taking advantage of the fact that we're in the Python monolith

00:11:37,110 --> 00:11:39,980
to make a library call.

00:11:39,980 --> 00:11:44,640
Then we start to develop a Go service.

00:11:44,640 --> 00:11:49,110
After we deploy that Go service, we end up actually making a request

00:11:49,110 --> 00:11:52,660
that goes both to Python and to Go.

00:11:52,660 --> 00:11:57,670
But the Python response is the only one that goes back to the end user.

00:11:57,670 --> 00:11:59,980
The Go is secondary here

00:11:59,980 --> 00:12:04,100
and its response is only used to record discrepancies

00:12:04,100 --> 00:12:07,320
and then it's discarded.

00:12:07,320 --> 00:12:12,480
After we're confident that that has no more discrepancies in it

00:12:12,480 --> 00:12:14,700
we then make Go primary

00:12:14,700 --> 00:12:18,050
and its response is the one that the end user sees.

00:12:18,050 --> 00:12:22,050
Python's response is now discarded.

00:12:22,050 --> 00:12:27,660
And then we transition to Go only and delete the Python code.

00:12:27,660 --> 00:12:34,110
So, in our side-by-side, we start out with the Python monolith.

00:12:34,110 --> 00:12:37,450
Then we develop in a Go service.

00:12:37,450 --> 00:12:39,260
Then we have Python as primary

00:12:39,260 --> 00:12:42,440
where Go's responses are secondary and discarded

00:12:42,440 --> 00:12:47,580
only used for comparison's sake to warn us if there's a discrepancy.

00:12:47,580 --> 00:12:51,980
Then we switch to having Go be primary and Python as secondary

00:12:51,980 --> 00:12:55,780
where the Python's responses are now the ones that are discarded.

00:12:55,780 --> 00:13:01,480
Then we can delete the Python code and have Go only serving us.

00:13:01,480 --> 00:13:03,400
It's code time!

00:13:03,400 --> 00:13:09,560
So, the GraphQL schema that we end up changingâ€¦

00:13:09,560 --> 00:13:14,120
Here we have this "create a date" field that's already defined in Python

00:13:14,120 --> 00:13:15,120
and we'll hit an error

00:13:15,120 --> 00:13:18,690
if we also try to define it in the assignments' Go service

00:13:18,690 --> 00:13:23,250
but until we define this field, we can't generate a gqlgen model

00:13:23,250 --> 00:13:25,020
or write any tests.

00:13:25,020 --> 00:13:28,790
To get around this issue, we add the migrate directive to our field

00:13:28,790 --> 00:13:30,380
with the state set to manual.

00:13:30,380 --> 00:13:34,470
This will allow assignment servers to define the "create a date"

00:13:34,470 --> 00:13:37,460
but will hide the field from the normal schema.

00:13:37,460 --> 00:13:39,360
If an end user requests this field

00:13:39,360 --> 00:13:41,490
the gateway will continue to fetch it from Python

00:13:41,490 --> 00:13:44,690
but will not make any requests for it from Go.

00:13:44,690 --> 00:13:48,510
Once the implementation of this field is done

00:13:48,510 --> 00:13:51,860
we can enable side-by-side testing

00:13:51,860 --> 00:13:54,350
by setting the migrate directive state to side-by-side.

00:13:54,350 --> 00:14:04,440
Here, now both Python and Go are getting the request for that field.

00:14:04,440 --> 00:14:06,310
When they're both providing it

00:14:06,310 --> 00:14:08,930
every request will be examined for differences

00:14:08,930 --> 00:14:11,340
both locally and in production.

00:14:11,340 --> 00:14:14,550
A developer locally will receive instant feedback

00:14:14,550 --> 00:14:16,200
that there's a discrepancy

00:14:16,200 --> 00:14:18,990
as they go through unit tests, integration tests

00:14:18,990 --> 00:14:22,830
or just click around on the site locally.

00:14:22,830 --> 00:14:25,490
In production, we can see over millions of requests

00:14:25,490 --> 00:14:28,670
if there are corner cases where the fields might differ.

00:14:28,670 --> 00:14:32,330
Remembering to first make a Python set deterministically ordered

00:14:32,330 --> 00:14:34,360
is probably our most common mistake

00:14:34,360 --> 00:14:38,680
even if it's not really apparent to a user.

00:14:38,680 --> 00:14:42,690
In production, we can also look for patterns in the discrepancies in many ways

00:14:42,690 --> 00:14:44,260
in case there's an edge case

00:14:44,260 --> 00:14:46,810
that, for instance, only occurs at a particular time of day.

00:14:46,810 --> 00:14:48,560
I won't go through all the different ways

00:14:48,560 --> 00:14:53,690
that our SREs are able to slice and dice this to identify unusual patterns.

00:14:53,690 --> 00:14:57,880
But just suffice it to say that we have a lot of great metrics

00:14:57,880 --> 00:15:01,550
and they bring it to the developers' attention.

00:15:01,550 --> 00:15:04,950
So, now our schema changes

00:15:04,950 --> 00:15:07,830
and we can now ignore the Python value of the field

00:15:07,830 --> 00:15:09,890
and pass the one from Go.

00:15:09,890 --> 00:15:12,470
We support this state to make it easier to stage deploys

00:15:12,470 --> 00:15:14,950
and then reduce the risk of rollbacks.

00:15:14,950 --> 00:15:17,660
We also use this state as we are transitioning

00:15:17,660 --> 00:15:21,130
to having all the GraphQL traffic move through the gateway.

00:15:21,130 --> 00:15:24,050
And maybe some clients, Mobile Native for example

00:15:24,050 --> 00:15:26,620
may not yet be able to query through the gateway

00:15:26,620 --> 00:15:28,970
and so we may need to keep a field defining Python

00:15:28,970 --> 00:15:32,940
to satisfy those requests.

00:15:32,940 --> 00:15:36,550
Once we're happy with the Go service serving traffic for this field in production

00:15:36,550 --> 00:15:41,190
we can remove the definition and the related code from Python.

00:15:41,190 --> 00:15:45,120
Once we do that step, we can remove the migrate directive entirely.

00:15:45,120 --> 00:15:51,350
This field is now just a normal GraphQL field like any other.

00:15:51,350 --> 00:15:54,230
Now engineers are happy and productive in Go

00:15:54,230 --> 00:16:00,720
our efficiency went up, our costs are bending down.

00:16:00,720 --> 00:16:01,720
What's next?

00:16:01,720 --> 00:16:06,790
Right now, we have 34.5% of production traffic served by Go

00:16:06,790 --> 00:16:11,950
and as we kind of expected, it's been sort of following a normal curve

00:16:11,950 --> 00:16:14,080
and right now, we're seeing an acceleration

00:16:14,080 --> 00:16:19,530
in the code that's being transitioned to be solely served by Go.

00:16:19,530 --> 00:16:25,510
We've also adopted a new policy where we're trying to share as much as we can

00:16:25,510 --> 00:16:27,320
Open Source by default.

00:16:27,320 --> 00:16:32,170
Before, we were much more concerned with only putting out Open Source code

00:16:32,170 --> 00:16:34,320
that we were committed to maintaining

00:16:34,320 --> 00:16:37,130
but we realized that there's a missed opportunity.

00:16:37,130 --> 00:16:40,410
Sometimes the community could benefit from some of the choices that we've made

00:16:40,410 --> 00:16:43,200
without necessarily having us

00:16:43,200 --> 00:16:47,410
to devote a large percentage of our engineering staff

00:16:47,410 --> 00:16:49,120
to be able to maintain that

00:16:49,120 --> 00:16:52,250
to meet all the possible end user use cases.

00:16:52,250 --> 00:16:53,680
We're still open to collaborating

00:16:53,680 --> 00:17:00,140
but we might not, in all cases, pursue all the different use cases

00:17:00,140 --> 00:17:02,130
that the community is interested in.

00:17:02,130 --> 00:17:05,990
We're also going to try to share our onboarding process.

00:17:05,990 --> 00:17:08,780
We're developing some of our individual tools

00:17:08,780 --> 00:17:11,020
like The Web Workshop and the Forecast app

00:17:11,020 --> 00:17:12,020
as Open Source

00:17:12,020 --> 00:17:16,889
and we hope that as we onboard new developers who are unfamiliar with Go or our environment

00:17:16,889 --> 00:17:21,500
that that will be beneficial to them as well as other members of the community.

00:17:21,500 --> 00:17:26,339
So, I hope that this was useful to you

00:17:26,339 --> 00:17:29,429
and I hope that you found this story to be compelling.

00:17:29,429 --> 00:17:34,830
I certainly can highly recommend Khan Academy as an excellent place to work

00:17:34,830 --> 00:17:38,470
and if you're in the market, feel free to drop us a line.

00:17:38,470 --> 00:17:39,870
Thanks!

00:17:39,870 --> 00:17:40,519

YouTube URL: https://www.youtube.com/watch?v=je9bC3DZ6tg


