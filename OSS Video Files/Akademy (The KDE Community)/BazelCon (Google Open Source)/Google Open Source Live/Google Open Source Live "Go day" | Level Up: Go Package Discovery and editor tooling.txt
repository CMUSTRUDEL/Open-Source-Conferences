Title: Google Open Source Live "Go day" | Level Up: Go Package Discovery and editor tooling
Publication date: 2020-12-03
Playlist: Google Open Source Live
Description: 
	
Captions: 
	00:00:11,190 --> 00:00:13,250
Hi everyone, I'm Julie.

00:00:13,250 --> 00:00:15,349
I worked on the Go team with Rebecca

00:00:15,349 --> 00:00:18,420
and today we're going to show you how to build a Go web application

00:00:18,420 --> 00:00:20,610
with the help of the Go package discovery site

00:00:20,610 --> 00:00:23,570
and your Go editor tools.

00:00:23,570 --> 00:00:25,730
If you don't already have Go installed on your computer

00:00:25,730 --> 00:00:28,330
you can do so at the link shown on the screen.

00:00:28,330 --> 00:00:29,330
If you need help

00:00:29,330 --> 00:00:31,800
you can check out the video of Steve's "Getting Started with Go" session

00:00:31,800 --> 00:00:33,809
from earlier today.

00:00:33,809 --> 00:00:35,790
In this session we're going to start by showing you

00:00:35,790 --> 00:00:38,050
how to set up your editor for Go development.

00:00:38,050 --> 00:00:39,340
Thanks, Julie.

00:00:39,340 --> 00:00:43,710
Hi everyone, I'm Rebecca and I work on the Go team.

00:00:43,710 --> 00:00:45,070
One of the great things about Go

00:00:45,070 --> 00:00:47,239
is that the Go team provides backend tooling

00:00:47,239 --> 00:00:49,609
that plugs into many of the popular text editors

00:00:49,609 --> 00:00:51,950
like VS Code, Vim, Emacs and Sublime.

00:00:51,950 --> 00:00:57,350
For today's tutorial, we'll use VS Code.

00:00:57,350 --> 00:00:59,199
However, all the features that we show you today

00:00:59,199 --> 00:01:02,449
are available on those other editors too.

00:01:02,449 --> 00:01:07,610
So, we'll begin by creating our project.

00:01:07,610 --> 00:01:10,960
You can find this code on GitHub at the URL in the demo.

00:01:10,960 --> 00:01:13,670
We're going to run Go.mod in it to create a module

00:01:13,670 --> 00:01:15,930
as you saw earlier in Steve's presentation.

00:01:15,930 --> 00:01:19,780
Now let's open our module in VS Code.

00:01:19,780 --> 00:01:24,820
Here is the Go.mod file that is created by running Go mod in it.

00:01:24,820 --> 00:01:26,660
You'll see here.

00:01:26,660 --> 00:01:29,140
And you can see that I've already installed the Go extension

00:01:29,140 --> 00:01:31,500
which you'll need for coding with Go.

00:01:31,500 --> 00:01:35,020
And you can install it by searching for Go in the extensions pane.

00:01:35,020 --> 00:01:37,740
Next, we'll create our Go program

00:01:37,740 --> 00:01:40,560
by creating a main .Go file.

00:01:40,560 --> 00:01:42,250
And since we're using modules

00:01:42,250 --> 00:01:45,470
the extension will prompt us to install the language server, Gopls.

00:01:45,470 --> 00:01:49,770
This is the editor backend that I mentioned earlier.

00:01:49,770 --> 00:01:54,080
Gopls works in all editors to provide an IDE-like experience for Go.

00:01:54,080 --> 00:01:56,160
Especially with Go modules.

00:01:56,160 --> 00:01:57,460
So, once we install it

00:01:57,460 --> 00:02:00,570
we'll be able to use the various IDE-like features like completion

00:02:00,570 --> 00:02:03,190
to create our package and our main program.

00:02:03,190 --> 00:02:07,050
Once we're done with that, we'll be ready to start coding.

00:02:07,050 --> 00:02:12,760
So, now that our editors are set up, let's go ahead and build something.

00:02:12,760 --> 00:02:15,390
As Steve mentioned in the "intro to Go" session this morning

00:02:15,390 --> 00:02:17,709
web applications are one of the most popular things

00:02:17,709 --> 00:02:19,230
that developers like to build in Go.

00:02:19,230 --> 00:02:21,370
So, we're going to do that today.

00:02:21,370 --> 00:02:24,770
I'll start by sharing with you one of my favorite things

00:02:24,770 --> 00:02:26,890
which is this turkey chili recipe.

00:02:26,890 --> 00:02:28,590
I've been making this recipe all year

00:02:28,590 --> 00:02:31,760
and I have it saved on my computer, in a markdown file.

00:02:31,760 --> 00:02:33,030
But what I'd really like to have

00:02:33,030 --> 00:02:38,660
is a nicer UI to read this recipe and other recipes in my collection.

00:02:38,660 --> 00:02:40,910
So, today we're going to build a web app

00:02:40,910 --> 00:02:42,630
which reads this markdown file

00:02:42,630 --> 00:02:46,459
converts it into HTML, and renders it in our browser.

00:02:46,459 --> 00:02:50,100
That way we'll have an easy way to browse all of our favorite recipes.

00:02:50,100 --> 00:02:52,620
And as a first step to building your web app

00:02:52,620 --> 00:02:53,620
let's read the markdown file

00:02:53,620 --> 00:02:56,910
and print the contents of that file to our terminal.

00:02:56,910 --> 00:03:00,490
So, in the module that Rebecca just created

00:03:00,490 --> 00:03:02,850
I'm going to create a directory called "static"

00:03:02,850 --> 00:03:07,490
and I'll copy the markdown file and image for that recipe into this folder.

00:03:07,490 --> 00:03:10,010
There are tons of packages that are part of the Go standard library

00:03:10,010 --> 00:03:12,459
and included when you install Go.

00:03:12,459 --> 00:03:14,819
In Steve's "Getting Started with Go" session earlier

00:03:14,819 --> 00:03:17,180
he showed us how to use the fonts package.

00:03:17,180 --> 00:03:23,880
I'm going to use another package in the standard library called "ioutil."

00:03:23,880 --> 00:03:26,170
Let's check out this package on the Go Discovery site

00:03:26,170 --> 00:03:32,319
which lives at pkg.go.dev.

00:03:32,319 --> 00:03:36,120
The Go Discovery site is a website with information about Go packages

00:03:36,120 --> 00:03:40,180
that you might want to discover, evaluate, and integrate into your modules.

00:03:40,180 --> 00:03:43,180
I want to give you a preview of some features that will be coming soon.

00:03:43,180 --> 00:03:44,420
So, in this tutorial

00:03:44,420 --> 00:03:48,040
I'm actually going to be working on the new version of the site

00:03:48,040 --> 00:03:50,130
that will we live in the next few weeks.

00:03:50,130 --> 00:03:53,810
I'm going to start by going to our search bar over here

00:03:53,810 --> 00:03:59,680
and looking up the ioutil package.

00:03:59,680 --> 00:04:02,349
And as you can see from the package documentation

00:04:02,349 --> 00:04:06,320
ioutil implements some I/O utility functions.

00:04:06,320 --> 00:04:09,031
In this tutorial we're going to use the "read file" function

00:04:09,031 --> 00:04:13,989
to read our markdown file from disk and then print it into the terminal.

00:04:13,989 --> 00:04:17,470
Let's go ahead and look for the "read file" function in this index

00:04:17,470 --> 00:04:19,220
and click on it.

00:04:19,220 --> 00:04:21,060
This will take us straight to the function

00:04:21,060 --> 00:04:23,900
and from here I can see the function signature

00:04:23,900 --> 00:04:26,220
a description of how to use the function

00:04:26,220 --> 00:04:27,910
and an example.

00:04:27,910 --> 00:04:31,220
Let's open up the example and go ahead and copy it

00:04:31,220 --> 00:04:36,090
so that we can then build off of it in our editor.

00:04:36,090 --> 00:04:37,990
Let's start writing some code.

00:04:37,990 --> 00:04:43,630
Let's create a web server to present our turkey chili recipe.

00:04:43,630 --> 00:04:45,900
In the same module that we created earlier

00:04:45,900 --> 00:04:47,340
we're going to add a helper function

00:04:47,340 --> 00:04:51,520
to load a page by reading this turkey chili recipe file from disk.

00:04:51,520 --> 00:04:52,690
I'll just paste in the code

00:04:52,690 --> 00:04:55,690
that Julie copied from the ioutil package earlier

00:04:55,690 --> 00:04:57,580
and I'll put it into our load page helper.

00:04:57,580 --> 00:05:02,050
You'll remember Steve manually updated import statements in the earlier talk.

00:05:02,050 --> 00:05:03,780
But when I save the file

00:05:03,780 --> 00:05:06,000
the editor will automatically format my code

00:05:06,000 --> 00:05:10,190
and it will add all the necessary imports to the top of my file.

00:05:10,190 --> 00:05:12,960
Finally, we'll just clean up the code a little bit

00:05:12,960 --> 00:05:16,310
to match our helper function signature.

00:05:16,310 --> 00:05:20,160
So, now that we've read the file

00:05:20,160 --> 00:05:22,830
we can actually begin building out the web app.

00:05:22,830 --> 00:05:25,900
You can build a web server in Go using only the standard library

00:05:25,900 --> 00:05:27,660
with the net HTTP package.

00:05:27,660 --> 00:05:30,600
We're going to start by exploring that package.

00:05:30,600 --> 00:05:33,310
I'm not necessarily sure of which function I'll need to use

00:05:33,310 --> 00:05:36,890
but I know that I want to register code to run in HTTP handler.

00:05:36,890 --> 00:05:40,800
I can just start off by typing auto in the HTTP package

00:05:40,800 --> 00:05:42,370
and triggering autocomplete.

00:05:42,370 --> 00:05:45,199
I'll immediately see a bunch of symbols related to handlers

00:05:45,199 --> 00:05:46,979
and I can figure out which one to choose

00:05:46,979 --> 00:05:50,590
by reading the documentation that pops up on the side here.

00:05:50,590 --> 00:05:52,880
I think the HandleFunc is the one that I want

00:05:52,880 --> 00:05:55,419
because it lets me create a handler with a single function.

00:05:55,419 --> 00:05:57,060
So, that's the one I'm going to pick.

00:05:57,060 --> 00:06:01,520
But I still want a bit more information about how to use HandleFunc.

00:06:01,520 --> 00:06:03,790
Fortunately, when I hover over the function

00:06:03,790 --> 00:06:07,290
I see a link to the Discovery site, pkg.go.dev.

00:06:07,290 --> 00:06:08,850
When I click on it

00:06:08,850 --> 00:06:14,130
I get taken to the documentation for HandleFunc in the net HTTP package.

00:06:14,130 --> 00:06:16,440
And here we have not just documentation

00:06:16,440 --> 00:06:18,110
but another example.

00:06:18,110 --> 00:06:19,630
We can open up this example

00:06:19,630 --> 00:06:21,520
and we can use our same trick from earlier

00:06:21,520 --> 00:06:26,770
and just copy and paste this code directly into our editor.

00:06:26,770 --> 00:06:30,580
This is all the code that it takes to write a basic Web server in Go.

00:06:30,580 --> 00:06:33,020
Let's modify it to use our load page helper function

00:06:33,020 --> 00:06:36,770
that will read our recipe file.

00:06:36,770 --> 00:06:39,460
We'll start off by validating the user inputs in the URL.

00:06:39,460 --> 00:06:41,530
Make sure they typed in the right thing.

00:06:41,530 --> 00:06:44,520
You're looking for the turkey chili recipe.

00:06:44,520 --> 00:06:46,979
And then we're going to call the loadpage function

00:06:46,979 --> 00:06:49,300
to print out the file content.

00:06:49,300 --> 00:06:53,130
Next, we'll add some logic to handle any errors

00:06:53,130 --> 00:06:55,080
that may occur while reading the file

00:06:55,080 --> 00:06:57,070
and you'll notice that the completion is designed

00:06:57,070 --> 00:06:59,180
to search all the available symbols in the workspace.

00:06:59,180 --> 00:07:03,289
So, you don't even have to type "HTTP." to get that internal server error completion.

00:07:03,289 --> 00:07:06,340
You can just start writing out the word "internal"

00:07:06,340 --> 00:07:10,669
because that's what you know you're looking for.

00:07:10,669 --> 00:07:13,630
And then finally, we'll just format the content as HTML templates

00:07:13,630 --> 00:07:15,460
that we can actually render on the webpage.

00:07:15,460 --> 00:07:18,720
Now, let's run the server and see how it looks.

00:07:18,720 --> 00:07:20,330
Not too bad!

00:07:20,330 --> 00:07:21,889
We got something going.

00:07:21,889 --> 00:07:25,310
But the formatting isn't very readable.

00:07:25,310 --> 00:07:28,210
It would be really nice if we could actually render that markdown as HTML.

00:07:28,210 --> 00:07:31,370
So, the standard library has gotten us really far.

00:07:31,370 --> 00:07:32,919
You've made an entire web app.

00:07:32,919 --> 00:07:36,550
But, unfortunately, the standard library doesn't have a markdown parser.

00:07:36,550 --> 00:07:39,490
So, Julie, how can I go find one?

00:07:39,490 --> 00:07:41,560
We can use the Go Package Discovery site

00:07:41,560 --> 00:07:45,210
to search for third-party packages that we might want to use.

00:07:45,210 --> 00:07:48,150
So, I'm going to go to the Discovery site

00:07:48,150 --> 00:07:51,389
and type "markdown" into the search box.

00:07:51,389 --> 00:07:53,200
And look, there are a lot of results.

00:07:53,200 --> 00:07:54,740
This first one here is Blackfriday

00:07:54,740 --> 00:07:58,350
and if we take a look at it, it seems to be pretty popular

00:07:58,350 --> 00:08:01,150
based off the "imported by" count.

00:08:01,150 --> 00:08:05,710
Let's go ahead and click into that one and take a look.

00:08:05,710 --> 00:08:08,730
On this page I see a banner that tells me there is a newer V2 version.

00:08:08,730 --> 00:08:13,390
I'm going to go ahead and use this V2 package instead.

00:08:13,390 --> 00:08:15,660
And I can see on this page

00:08:15,660 --> 00:08:19,880
that the V2 version seems to have less importers than V1

00:08:19,880 --> 00:08:22,069
which is likely why it went lower in search.

00:08:22,069 --> 00:08:24,680
I'm going to figure out how to use Blackfriday.

00:08:24,680 --> 00:08:26,780
So, let's take a look at the readme.

00:08:26,780 --> 00:08:29,949
From the readme, I see this installation section.

00:08:29,949 --> 00:08:35,130
I'm going to click expand, which is right underneath it.

00:08:35,130 --> 00:08:39,729
There are instructions here on how to go get and import this package.

00:08:39,729 --> 00:08:42,269
And if I look through the readme a little bit more

00:08:42,269 --> 00:08:45,660
and go ahead and scroll down on this page

00:08:45,660 --> 00:08:48,000
I see that Blackfriday is currently maintained

00:08:48,000 --> 00:08:49,610
and the recommended version is V2.

00:08:49,610 --> 00:08:52,080
So, we are looking at the right version now.

00:08:52,080 --> 00:08:56,230
The package documentation is also a useful place to look for information.

00:08:56,230 --> 00:08:59,510
And we can access it from the left side now.

00:08:59,510 --> 00:09:03,430
This overview tells me that Blackfriday is a markdown processor

00:09:03,430 --> 00:09:05,459
and the other description here is that it tells me

00:09:05,459 --> 00:09:11,050
the simplest way to invoke Blackfriday is to go ahead and call the "run" function.

00:09:11,050 --> 00:09:13,910
I'm going to go to this "jump to identifier" box here

00:09:13,910 --> 00:09:17,180
and search for "run."

00:09:17,180 --> 00:09:18,390
This brings up the "run" function

00:09:18,390 --> 00:09:19,390
and I can click on it

00:09:19,390 --> 00:09:22,130
which will take me straight to that identifier.

00:09:22,130 --> 00:09:25,279
I can see the function signature, the description…

00:09:25,279 --> 00:09:30,020
And this description here tells me that all I need to do to use Blackfriday

00:09:30,020 --> 00:09:31,620
is to pass in an input

00:09:31,620 --> 00:09:35,830
and then I'll get back an HTML output.

00:09:35,830 --> 00:09:38,630
I think this package is worth trying out

00:09:38,630 --> 00:09:40,750
so I'm going to go to my header and click this copy button

00:09:40,750 --> 00:09:42,940
to get the import path onto my clipboard.

00:09:42,940 --> 00:09:47,220
Rebecca, how about we go ahead and give Blackfriday a try in our editor?

00:09:47,220 --> 00:09:50,000
Thanks for finding a markdown parser, Julie.

00:09:50,000 --> 00:09:55,260
Now, let's go ahead and use it.

00:09:55,260 --> 00:09:57,500
We're going to run a Go get command

00:09:57,500 --> 00:10:00,700
to add Blackfriday to our module and to our local module cache.

00:10:00,700 --> 00:10:04,630
Immediately, you will see that my projects Go.mod file is modified

00:10:04,630 --> 00:10:06,510
to add new dependencies.

00:10:06,510 --> 00:10:09,410
And also, immediately, the editor will show me that these dependencies

00:10:09,410 --> 00:10:11,380
are not yet used in our module

00:10:11,380 --> 00:10:12,380
which is expected.

00:10:12,380 --> 00:10:14,330
We haven't used the Blackfriday package yet.

00:10:14,330 --> 00:10:17,290
But now that the package is in our module cache

00:10:17,290 --> 00:10:20,250
the editor can provide autocompletion and other support for it.

00:10:20,250 --> 00:10:23,139
So, let's go ahead and use Blackfriday in our module.

00:10:23,139 --> 00:10:26,730
When I type out "Blackfriday," the editor will offer me multiple options

00:10:26,730 --> 00:10:29,610
since there are multiple versions available.

00:10:29,610 --> 00:10:31,269
But Julie suggested that we should use V2

00:10:31,269 --> 00:10:33,550
so let's pick that one.

00:10:33,550 --> 00:10:35,931
And Julie also suggested we should use the "run" function

00:10:35,931 --> 00:10:37,230
to parse the markdown.

00:10:37,230 --> 00:10:40,000
So, we'll use that one as well.

00:10:40,000 --> 00:10:42,769
And finally, we'll just make some minor modifications to the code

00:10:42,769 --> 00:10:44,589
to return an HTML template

00:10:44,589 --> 00:10:48,270
since that's what's we need to render the markdown as HTML.

00:10:48,270 --> 00:10:57,350
And now it's time to try running our code once again.

00:10:57,350 --> 00:10:59,190
Awesome!

00:10:59,190 --> 00:11:00,830
The turkey chili recipe showed up.

00:11:00,830 --> 00:11:03,290
But I'm not sure if it's rendering totally correctly.

00:11:03,290 --> 00:11:06,300
There is still something off about those emojis at the top

00:11:06,300 --> 00:11:08,880
and also our table doesn't look much like a table.

00:11:08,880 --> 00:11:13,120
Julie, do you think there is an issue with this markdown file?

00:11:13,120 --> 00:11:14,120
Let's take a closer look

00:11:14,120 --> 00:11:18,209
and see how to evaluate a third-party Go package.

00:11:18,209 --> 00:11:20,050
It seems like the things that are broken on this page

00:11:20,050 --> 00:11:22,769
are the table and the emojis.

00:11:22,769 --> 00:11:25,430
And I know I followed the spec for github_flavored_markdown

00:11:25,430 --> 00:11:30,050
but maybe there's an issue with how Blackfriday is parsing my markdown file.

00:11:30,050 --> 00:11:33,200
Let's go ahead and look at the documentation for Blackfriday again.

00:11:33,200 --> 00:11:35,720
I'm going to search for github_flavored_ markdown on this page

00:11:35,720 --> 00:11:37,490
and let's see if anything comes up.

00:11:37,490 --> 00:11:39,529
Look, it takes me right to the section

00:11:39,529 --> 00:11:42,120
and it tells me that Blackfriday is structured

00:11:42,120 --> 00:11:44,690
to allow alternative rendering engines

00:11:44,690 --> 00:11:48,010
but github_flavored_markdown isn't supported right out of the box.

00:11:48,010 --> 00:11:49,860
What about emojis?

00:11:49,860 --> 00:11:50,950
Let's search for that on the page.

00:11:50,950 --> 00:11:53,430
It looks like nothing is coming up

00:11:53,430 --> 00:11:58,160
but if I go and click this repository link to go and look at the project

00:11:58,160 --> 00:12:00,019
I can browse around on the issue tracker

00:12:00,019 --> 00:12:01,260
and see if anything comes up there.

00:12:01,260 --> 00:12:03,899
So, let's go to the issue tracker

00:12:03,899 --> 00:12:06,089
search for the word "emoji"

00:12:06,089 --> 00:12:11,320
and see if anything comes up related to emoji support.

00:12:11,320 --> 00:12:13,890
There's this closed issue here

00:12:13,890 --> 00:12:19,110
and if I click on it and click through this issue

00:12:19,110 --> 00:12:23,060
and look through the top and maybe I'm going to scroll to the bottom

00:12:23,060 --> 00:12:26,560
and see if there's a resolution.

00:12:26,560 --> 00:12:28,250
It seems like what this is telling me

00:12:28,250 --> 00:12:32,760
is that Blackfriday is compatible with this other third-party package

00:12:32,760 --> 00:12:34,560
that provides emoji support

00:12:34,560 --> 00:12:37,079
but it doesn't have it integrated directly.

00:12:37,079 --> 00:12:40,630
So, Blackfriday could still be a great package to use

00:12:40,630 --> 00:12:42,209
but I'm kind of curious to know

00:12:42,209 --> 00:12:44,990
if there's something else that would fit my use case better.

00:12:44,990 --> 00:12:46,370
So, how about we go ahead

00:12:46,370 --> 00:12:51,310
and revisit the search results that we had for markdown before?

00:12:51,310 --> 00:12:54,470
On this page I see that the second result in this list

00:12:54,470 --> 00:12:56,550
is something called Go markdown.

00:12:56,550 --> 00:13:00,399
In this case, this package doesn't have a tagged V1 version

00:13:00,399 --> 00:13:02,820
and so it might not necessarily be stable.

00:13:02,820 --> 00:13:06,839
I don't really want to pull this package into my project just yet

00:13:06,839 --> 00:13:09,570
in case this breaks something later on.

00:13:09,570 --> 00:13:12,000
There's another project here, Goldmark, that looks promising.

00:13:12,000 --> 00:13:16,240
It has over 100 importers and there's a V1 release.

00:13:16,240 --> 00:13:19,839
Let's click through it and see what this project is like.

00:13:19,839 --> 00:13:22,750
From this page I can immediately see

00:13:22,750 --> 00:13:26,250
that the latest version of Goldmark was published pretty recently.

00:13:26,250 --> 00:13:29,120
And if I go and click on the version history

00:13:29,120 --> 00:13:34,540
I see that there is a pretty consistent history of maintenance for this project.

00:13:34,540 --> 00:13:37,550
Going back to the main page, let's look through the readme

00:13:37,550 --> 00:13:39,180
and see what that says.

00:13:39,180 --> 00:13:42,959
I'm going to look for github_flavored_markdown support again

00:13:42,959 --> 00:13:47,100
and right at the top here it tells me that Goldmark is easy to extend

00:13:47,100 --> 00:13:49,430
and their extension is provided for github_flavored_markdown.

00:13:49,430 --> 00:13:52,639
If I scroll through this readme a little bit more

00:13:52,639 --> 00:13:54,839
I see the other features here.

00:13:54,839 --> 00:13:59,540
One of which being that it's really easily extensible

00:13:59,540 --> 00:14:01,329
and if I look through the "Usage" section

00:14:01,329 --> 00:14:04,540
it provides me examples of how to use that code

00:14:04,540 --> 00:14:07,820
and code snippets that I can use to pull stuff into my code.

00:14:07,820 --> 00:14:11,410
Okay Rebecca, I think we have enough information here.

00:14:11,410 --> 00:14:13,760
Do you want to go and give Goldmark a try?

00:14:13,760 --> 00:14:14,760
Sounds good!

00:14:14,760 --> 00:14:16,550
Let's switch out Blackfriday for Goldmark.

00:14:16,550 --> 00:14:22,180
We're going to start off by downloading the Goldmark package

00:14:22,180 --> 00:14:25,959
but it might be easier if I extracted a helper function

00:14:25,959 --> 00:14:28,241
to do the markdown rendering and then I modified that.

00:14:28,241 --> 00:14:31,230
I'm going to highlight the area that I want to extract

00:14:31,230 --> 00:14:33,420
and click "extract to function."

00:14:33,420 --> 00:14:34,959
The editor will re-factor the code for me

00:14:34,959 --> 00:14:39,070
and all I have to do is rename the function to something a little bit more useful

00:14:39,070 --> 00:14:41,610
maybe something like "render markdown."

00:14:41,610 --> 00:14:44,839
And finally, I'll replace all the code in the render markdown function

00:14:44,839 --> 00:14:46,399
to be the code that uses Goldmark.

00:14:46,399 --> 00:14:50,310
I'll just paste that in and then we're ready to go.

00:14:50,310 --> 00:14:53,120
Let's try running our server one last time.

00:14:53,120 --> 00:14:54,700
Awesome!

00:14:54,700 --> 00:14:57,210
Looks exactly as we expected.

00:14:57,210 --> 00:15:01,790
We have our turkey emojis at the top and we have our formatted table.

00:15:01,790 --> 00:15:04,079
Well, our package is ready for use

00:15:04,079 --> 00:15:08,570
and we had pushed it to GitHub and the code is open source.

00:15:08,570 --> 00:15:11,380
I would really love to see this package on the Go Discovery site.

00:15:11,380 --> 00:15:14,240
Let's go ahead and add it.

00:15:14,240 --> 00:15:16,000
While we're on our project's GitHub page

00:15:16,000 --> 00:15:19,940
let's add a pkg.go.dev prefix to the URL

00:15:19,940 --> 00:15:23,660
so we can see this package on the Discovery site.

00:15:23,660 --> 00:15:25,070
You'll notice our package isn't here yet

00:15:25,070 --> 00:15:28,360
but I can go ahead and click this "request" button

00:15:28,360 --> 00:15:30,750
and that will request for the package to be downloaded.

00:15:30,750 --> 00:15:31,990
And there it is!

00:15:31,990 --> 00:15:36,230
We can see our readme, we can see the documentation

00:15:36,230 --> 00:15:40,339
and then if we look in the header here, we can see an "imports" link

00:15:40,339 --> 00:15:42,279
and clicking on that shows us all the packages

00:15:42,279 --> 00:15:44,570
that we've been importing into our package.

00:15:44,570 --> 00:15:48,329
If we then click on "source files" on the left-hand side

00:15:48,329 --> 00:15:50,310
this takes us to the bottom of the page

00:15:50,310 --> 00:15:52,529
and here is the file that Rebecca has been editing

00:15:52,529 --> 00:15:54,170
this whole time in VS Code.

00:15:54,170 --> 00:15:59,810
We can click on it and it will take us to the actual code repository.

00:15:59,810 --> 00:16:01,600
And here is all the code that we've been working on

00:16:01,600 --> 00:16:02,790
during today's tutorial.

00:16:02,790 --> 00:16:05,279
But it would be really nice though

00:16:05,279 --> 00:16:08,730
if when users stumble upon our package on GitHub

00:16:08,730 --> 00:16:11,130
they knew they could also look at our package documentation

00:16:11,130 --> 00:16:13,810
on the Go Discovery site.

00:16:13,810 --> 00:16:16,310
The Go Discovery site actually provides a badge

00:16:16,310 --> 00:16:18,130
exactly for this use case.

00:16:18,130 --> 00:16:21,040
We can generate a badge and then put it in our readme

00:16:21,040 --> 00:16:22,389
and then when people see our readme

00:16:22,389 --> 00:16:24,139
they'll know to click on it.

00:16:24,139 --> 00:16:28,470
So, let's look at pkg.go.dev/badge

00:16:28,470 --> 00:16:32,029
and we can put the module path into this input box.

00:16:32,029 --> 00:16:35,889
I'll go back to the project page and copy the URL

00:16:35,889 --> 00:16:38,269
and then paste it right here.

00:16:38,269 --> 00:16:41,019
This will then generate code snippets for me.

00:16:41,019 --> 00:16:43,660
There's one for HTML and one for markdown.

00:16:43,660 --> 00:16:46,980
I'm going to click to copy the one for markdown

00:16:46,980 --> 00:16:48,730
and add that to my clipboard

00:16:48,730 --> 00:16:53,220
and then I'll go back to our repository and go and edit the readme file

00:16:53,220 --> 00:16:56,820
and put this code snippet into the top of our readme file.

00:16:56,820 --> 00:16:59,520
And if I click the "preview changes" button

00:16:59,520 --> 00:17:02,470
I'll see that there's a badge now at the top of our readme file.

00:17:02,470 --> 00:17:04,819
And anybody who comes across it and clicks on this badge

00:17:04,819 --> 00:17:07,649
they will be taken straight to our project page

00:17:07,649 --> 00:17:08,839
on the Go Discovery site.

00:17:08,839 --> 00:17:10,510
So, our demo code is public.

00:17:10,510 --> 00:17:13,189
But so are the tools that we used today.

00:17:13,189 --> 00:17:15,539
The code bases for the Go Package Discovery site

00:17:15,539 --> 00:17:19,779
and the Go editor tools are also open source.

00:17:19,779 --> 00:17:23,309
If you want to contribute to these Go projects

00:17:23,309 --> 00:17:25,939
you can find them at the links on the screen.

00:17:25,939 --> 00:17:29,059
You can also find the package we've been working on in this tutorial

00:17:29,059 --> 00:17:31,919
right on the Go Discovery site

00:17:31,919 --> 00:17:35,059
at this URL.

00:17:35,059 --> 00:17:36,059
Thank you for joining us today.

00:17:36,059 --> 00:17:38,839

YouTube URL: https://www.youtube.com/watch?v=n7ayE29b7QA


