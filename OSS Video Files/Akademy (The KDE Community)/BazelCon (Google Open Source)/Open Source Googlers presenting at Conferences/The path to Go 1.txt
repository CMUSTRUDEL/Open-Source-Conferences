Title: The path to Go 1
Publication date: 2013-03-14
Playlist: Open Source Googlers presenting at Conferences
Description: 
	Rob Pike and Andrew Gerrand discuss Go 1 at OSCON 2012.  
The slide deck is available at http://talks.golang.org/2012/go1.slide#1
Captions: 
	00:00:01,140 --> 00:00:06,839
hi everyone my name is Rob Pike and

00:00:04,040 --> 00:00:08,760
injured rand and i are going to talk to

00:00:06,839 --> 00:00:11,070
you today about what we're calling the

00:00:08,760 --> 00:00:12,810
path to go 1 the the published a track

00:00:11,070 --> 00:00:14,820
was about more about the environment

00:00:12,810 --> 00:00:17,039
that today given that this is AA scone

00:00:14,820 --> 00:00:18,419
and open source conference we decided to

00:00:17,039 --> 00:00:20,699
talk about something they haven't talked

00:00:18,419 --> 00:00:23,160
much about before which is the sort of

00:00:20,699 --> 00:00:26,249
open source process by how gall happened

00:00:23,160 --> 00:00:27,539
and how go one happened most of you

00:00:26,249 --> 00:00:30,029
probably know that for those of you who

00:00:27,539 --> 00:00:32,610
don't go as a programming language that

00:00:30,029 --> 00:00:34,949
was designed as a concurrent language to

00:00:32,610 --> 00:00:36,510
solve the problems that we found develop

00:00:34,949 --> 00:00:37,949
writing software at google for the big

00:00:36,510 --> 00:00:39,600
machines in the back office

00:00:37,949 --> 00:00:41,460
it's concurrent language it has

00:00:39,600 --> 00:00:42,899
interesting properties we're not going

00:00:41,460 --> 00:00:46,170
to talk too much about the language

00:00:42,899 --> 00:00:48,059
today but its its main sort of buzz

00:00:46,170 --> 00:00:50,940
already feel is that although it's a

00:00:48,059 --> 00:00:52,859
statically compiled language statically

00:00:50,940 --> 00:00:54,719
typed and compiled language when you use

00:00:52,859 --> 00:00:56,879
it it feels much more like a dynamic

00:00:54,719 --> 00:00:58,050
sort of interpreted language like we say

00:00:56,879 --> 00:01:00,690
Python or JavaScript

00:00:58,050 --> 00:01:01,980
and in fact it turns out its to be a

00:01:00,690 --> 00:01:04,489
really good fun productive

00:01:01,980 --> 00:01:06,930
general-purpose programming language

00:01:04,489 --> 00:01:08,250
what's in it well it's as I said it's a

00:01:06,930 --> 00:01:09,720
compiled language which is to say

00:01:08,250 --> 00:01:11,820
there's a compiler and generates native

00:01:09,720 --> 00:01:15,150
code typically statically linked binary

00:01:11,820 --> 00:01:17,220
so there's two compiler suites there

00:01:15,150 --> 00:01:18,840
it's statically typed it has this very

00:01:17,220 --> 00:01:21,540
strong idea of you composing your

00:01:18,840 --> 00:01:23,040
program using interfaces to join things

00:01:21,540 --> 00:01:26,040
together as opposed to the sort of

00:01:23,040 --> 00:01:28,740
standard object-oriented model it has

00:01:26,040 --> 00:01:30,450
it's essentially memory safe its garbage

00:01:28,740 --> 00:01:33,000
collected as opposed to you know

00:01:30,450 --> 00:01:34,290
managing your own memory it's got this

00:01:33,000 --> 00:01:37,259
very interesting powerful native

00:01:34,290 --> 00:01:38,579
concurrency support it's got a lot of

00:01:37,259 --> 00:01:40,049
people think one of its best features is

00:01:38,579 --> 00:01:42,329
actually the standard library which is

00:01:40,049 --> 00:01:44,399
really complete and makes it very easy

00:01:42,329 --> 00:01:46,200
using this compositional technique to

00:01:44,399 --> 00:01:48,000
construct interesting programs and the

00:01:46,200 --> 00:01:51,920
tools which we will talk about today are

00:01:48,000 --> 00:01:57,740
actually pretty amazing so a little bit

00:01:51,920 --> 00:02:00,840
I didn't do that today it began as a

00:01:57,740 --> 00:02:02,490
project at Google in late 2007 and was

00:02:00,840 --> 00:02:04,890
originally conceived to be an open

00:02:02,490 --> 00:02:06,210
source project we were just dealing with

00:02:04,890 --> 00:02:09,420
some of the problems of writing large

00:02:06,210 --> 00:02:11,459
server software and programs written by

00:02:09,420 --> 00:02:12,750
a lot of people and we had troubles with

00:02:11,459 --> 00:02:14,850
the languages we were using which were

00:02:12,750 --> 00:02:16,800
primarily C++ and Java

00:02:14,850 --> 00:02:18,840
it was always intended to be an

00:02:16,800 --> 00:02:21,480
open-source project and in November 2009

00:02:18,840 --> 00:02:22,980
we announced it as such and then this

00:02:21,480 --> 00:02:26,940
goal one which is the first stable

00:02:22,980 --> 00:02:29,940
release came out in 2000 2012 is

00:02:26,940 --> 00:02:31,530
released under BSD license we've got a

00:02:29,940 --> 00:02:33,750
lot of people who are working as

00:02:31,530 --> 00:02:36,720
committers with you know commit rights

00:02:33,750 --> 00:02:38,250
of the repo and at this point we've got

00:02:36,720 --> 00:02:41,100
200 other people have cleared the

00:02:38,250 --> 00:02:42,480
project and are almost 10,000 changes

00:02:41,100 --> 00:02:44,640
have been committed to the repo since

00:02:42,480 --> 00:02:48,150
the release in 2009 so it's a very

00:02:44,640 --> 00:02:50,070
active project the development process

00:02:48,150 --> 00:02:51,570
is a little different from the way a lot

00:02:50,070 --> 00:02:54,120
of open source projects work and we're

00:02:51,570 --> 00:02:56,610
going to talk a lot about that today its

00:02:54,120 --> 00:02:58,170
uses mercurial for version control not

00:02:56,610 --> 00:03:00,150
because that's necessarily the the

00:02:58,170 --> 00:03:02,070
choice you make today but it's a time

00:03:00,150 --> 00:03:04,500
that we launch the project it was either

00:03:02,070 --> 00:03:06,900
mercurial or subversion if we were going

00:03:04,500 --> 00:03:08,880
to run on code.google.com and so we

00:03:06,900 --> 00:03:11,520
chose mercurial because it let us write

00:03:08,880 --> 00:03:13,710
a plugin that we could use to run the

00:03:11,520 --> 00:03:15,390
code review process which is a critical

00:03:13,710 --> 00:03:17,730
part of the way we do code development

00:03:15,390 --> 00:03:20,880
on in the NGO project all changes are

00:03:17,730 --> 00:03:23,670
code reviewed on this site code review

00:03:20,880 --> 00:03:25,050
dot-com a system called Rietveld which

00:03:23,670 --> 00:03:25,830
was developed by actually I think by

00:03:25,050 --> 00:03:29,610
guido van rossum

00:03:25,830 --> 00:03:31,170
and there's this plug-in that makes the

00:03:29,610 --> 00:03:33,600
process of doing the code of view and

00:03:31,170 --> 00:03:35,550
interacting with the mercurial repo a

00:03:33,600 --> 00:03:36,900
really pleasant process and this whole

00:03:35,550 --> 00:03:39,590
code review idea is really really

00:03:36,900 --> 00:03:41,880
important to the way this works we use

00:03:39,590 --> 00:03:43,860
we use the repo in a different way there

00:03:41,880 --> 00:03:46,590
are no branches it is a totally linear

00:03:43,860 --> 00:03:47,910
history and we we like this way because

00:03:46,590 --> 00:03:49,020
it means everyone understands the state

00:03:47,910 --> 00:03:51,390
of the project we're always talking

00:03:49,020 --> 00:03:52,620
about the same thing we don't have

00:03:51,390 --> 00:03:54,150
multiple versions that we're fighting

00:03:52,620 --> 00:03:56,100
over and that's actually important we'll

00:03:54,150 --> 00:03:58,050
talk about that a lot more we have this

00:03:56,100 --> 00:03:59,010
continuous build system that makes sure

00:03:58,050 --> 00:04:02,130
everything's working on all the

00:03:59,010 --> 00:04:03,360
platforms that we support and another

00:04:02,130 --> 00:04:05,400
difference from the way a lot of

00:04:03,360 --> 00:04:07,320
projects work is we tend to discourage

00:04:05,400 --> 00:04:09,390
people just sending in code out of the

00:04:07,320 --> 00:04:11,490
blue we like to talk about what's going

00:04:09,390 --> 00:04:13,770
on first through large-scale design and

00:04:11,490 --> 00:04:15,600
do the design element before we start

00:04:13,770 --> 00:04:16,830
talking about code so that people aren't

00:04:15,600 --> 00:04:18,510
sort of married to the code they've

00:04:16,830 --> 00:04:20,340
written and want to fight major changes

00:04:18,510 --> 00:04:22,350
that we might want to make and I think

00:04:20,340 --> 00:04:23,880
that idea is one of the reasons that the

00:04:22,350 --> 00:04:25,590
standard library is so clean and

00:04:23,880 --> 00:04:28,350
coherent because we really try to think

00:04:25,590 --> 00:04:31,050
about design before

00:04:28,350 --> 00:04:33,060
so after the this is a graph on the left

00:04:31,050 --> 00:04:35,870
there it's basically the day it launched

00:04:33,060 --> 00:04:39,360
up to today in six-month intervals and

00:04:35,870 --> 00:04:40,770
you can see there's initial burst right

00:04:39,360 --> 00:04:41,850
after release but but then it sort of

00:04:40,770 --> 00:04:43,800
died down a little bit but there's just

00:04:41,850 --> 00:04:46,380
fairly large growth and the blue is the

00:04:43,800 --> 00:04:48,420
core team most of them are Google and

00:04:46,380 --> 00:04:49,950
then the others is the external

00:04:48,420 --> 00:04:53,460
community's contribution you can see

00:04:49,950 --> 00:04:55,770
that both are growing quickly maybe even

00:04:53,460 --> 00:04:57,900
exponentially there's a tremendous

00:04:55,770 --> 00:05:00,000
amount of activity on the project and

00:04:57,900 --> 00:05:02,100
one of the key points of the process is

00:05:00,000 --> 00:05:05,730
that although we have initially launched

00:05:02,100 --> 00:05:07,500
it on Linux and Mac there's been a lot

00:05:05,730 --> 00:05:09,210
of external community work to develop

00:05:07,500 --> 00:05:11,520
for a number of other operating systems

00:05:09,210 --> 00:05:14,720
and in particular the Windows work was

00:05:11,520 --> 00:05:17,670
done entirely by outside contributors so

00:05:14,720 --> 00:05:19,440
how do we done this project there's this

00:05:17,670 --> 00:05:21,660
continuous project running all the time

00:05:19,440 --> 00:05:22,890
is there's no sort of as originally

00:05:21,660 --> 00:05:25,470
conceived at least it was just a

00:05:22,890 --> 00:05:26,850
continuous sequence of changes and of

00:05:25,470 --> 00:05:29,160
course things break and they get fixed

00:05:26,850 --> 00:05:30,540
and then the the builders help us figure

00:05:29,160 --> 00:05:32,640
that out by seeing when things break and

00:05:30,540 --> 00:05:36,060
how to fix it we have good days we have

00:05:32,640 --> 00:05:37,950
bad days but this is very sort of

00:05:36,060 --> 00:05:39,930
chaotic and noisy even though we're

00:05:37,950 --> 00:05:42,180
trying to sort of control the process by

00:05:39,930 --> 00:05:44,490
discussing changes and change changes

00:05:42,180 --> 00:05:47,330
just coming in so fast the things to

00:05:44,490 --> 00:05:50,370
tend to break too often so at some point

00:05:47,330 --> 00:05:53,070
fairly like maybe six months or so after

00:05:50,370 --> 00:05:54,900
the open source announcement we brought

00:05:53,070 --> 00:05:56,340
in this idea of what we call weekly

00:05:54,900 --> 00:05:56,760
snapshots which are just what they sound

00:05:56,340 --> 00:05:59,160
like

00:05:56,760 --> 00:06:01,170
and we pick up version from the a few

00:05:59,160 --> 00:06:03,240
days earlier that the builders say is

00:06:01,170 --> 00:06:05,100
stable it seems really solid we tagged

00:06:03,240 --> 00:06:06,660
that in mercurial and we send out a

00:06:05,100 --> 00:06:09,000
detailed change log to the mailing list

00:06:06,660 --> 00:06:11,640
saying these this is what's in this this

00:06:09,000 --> 00:06:12,810
weekly and this was actually a big step

00:06:11,640 --> 00:06:14,610
forward because people who didn't want

00:06:12,810 --> 00:06:16,620
to stay at tip and have their stuff

00:06:14,610 --> 00:06:18,210
breaking all the time could sort of once

00:06:16,620 --> 00:06:21,300
a week update their code and it was a

00:06:18,210 --> 00:06:23,070
really it was a big step forward but it

00:06:21,300 --> 00:06:25,080
didn't solve all that much in the end

00:06:23,070 --> 00:06:27,630
because the contributors always want to

00:06:25,080 --> 00:06:29,190
work at the tip and the users tend to

00:06:27,630 --> 00:06:30,990
sink to the weeklies and so the the

00:06:29,190 --> 00:06:33,780
mailing lists were confused about

00:06:30,990 --> 00:06:36,419
whether you're talking about today's tip

00:06:33,780 --> 00:06:39,150
or last week's weekly there's a real

00:06:36,419 --> 00:06:39,690
burden that these regular releases put

00:06:39,150 --> 00:06:43,320
on user

00:06:39,690 --> 00:06:45,090
because it's sort of annoying to have to

00:06:43,320 --> 00:06:46,320
once a week make sure your code still

00:06:45,090 --> 00:06:48,450
works with all these changes that have

00:06:46,320 --> 00:06:50,520
gone in the past week so you tend to

00:06:48,450 --> 00:06:51,840
sort of let it slide for a few weeks but

00:06:50,520 --> 00:06:52,950
then you have this massive set of

00:06:51,840 --> 00:06:54,960
changes you've got to make and that's

00:06:52,950 --> 00:06:57,540
annoying too and it's just it's just not

00:06:54,960 --> 00:06:59,220
user friendly to do it this way

00:06:57,540 --> 00:07:00,660
and so as a result all these people

00:06:59,220 --> 00:07:02,100
ended up being at different versions of

00:07:00,660 --> 00:07:05,070
the code even though we deliberately had

00:07:02,100 --> 00:07:07,410
a linear sequence of changes and this

00:07:05,070 --> 00:07:10,950
leads to version skew and version skew

00:07:07,410 --> 00:07:13,620
is a really really bad problem not it's

00:07:10,950 --> 00:07:15,210
it's actually worse for for languages

00:07:13,620 --> 00:07:17,790
than for most projects because it's sort

00:07:15,210 --> 00:07:19,410
of at the bottom of the tree so we

00:07:17,790 --> 00:07:24,000
instituted this notion of a formal

00:07:19,410 --> 00:07:28,650
release process it was a middle of early

00:07:24,000 --> 00:07:31,260
2011 and here the idea was instead of of

00:07:28,650 --> 00:07:33,390
sort of genuine weekly things we pick a

00:07:31,260 --> 00:07:35,520
weekly from a while back that seemed to

00:07:33,390 --> 00:07:37,680
work out really well in practice and we

00:07:35,520 --> 00:07:40,230
give that an official release number and

00:07:37,680 --> 00:07:42,900
say this is a release and this is what

00:07:40,230 --> 00:07:46,470
users should use only the contributors

00:07:42,900 --> 00:07:48,570
should be not using a release and we

00:07:46,470 --> 00:07:50,460
tagged this very well we had this very

00:07:48,570 --> 00:07:52,800
concise release notes about what you had

00:07:50,460 --> 00:07:55,230
to do to get up to date and that seemed

00:07:52,800 --> 00:07:56,850
to help a lot the amount of churn was

00:07:55,230 --> 00:07:59,220
much less that users had a much more

00:07:56,850 --> 00:08:01,169
stable base and there it was a big step

00:07:59,220 --> 00:08:03,870
forward users really liked it but even

00:08:01,169 --> 00:08:06,120
that didn't really work because the

00:08:03,870 --> 00:08:08,100
releases being a month or two apart

00:08:06,120 --> 00:08:10,050
tended to span an enormous number of

00:08:08,100 --> 00:08:12,090
changes sometimes pretty fundamental

00:08:10,050 --> 00:08:14,760
ones and user code is very difficult to

00:08:12,090 --> 00:08:17,250
fix and users had trouble staying up to

00:08:14,760 --> 00:08:18,960
date and so anyone who was sort of

00:08:17,250 --> 00:08:20,640
adventurous or working in the core of

00:08:18,960 --> 00:08:23,250
the project still tend to live and

00:08:20,640 --> 00:08:24,930
weeklies are even at tip and so although

00:08:23,250 --> 00:08:27,169
releases helps some users it really

00:08:24,930 --> 00:08:29,820
didn't address the problem in the large

00:08:27,169 --> 00:08:33,660
as a result we rolled out this tool

00:08:29,820 --> 00:08:36,960
called go fix and go fix is kind of an

00:08:33,660 --> 00:08:40,140
amazing program what it does is it

00:08:36,960 --> 00:08:42,960
parses go code it actually constructs a

00:08:40,140 --> 00:08:45,330
parse tree and does dynamic rewriting

00:08:42,960 --> 00:08:47,730
according to various plug-in modules for

00:08:45,330 --> 00:08:49,410
various API adjustments and and then

00:08:47,730 --> 00:08:52,639
spits out again an up

00:08:49,410 --> 00:08:55,529
a properly formatted modified program

00:08:52,639 --> 00:08:57,959
that applies whatever those changes

00:08:55,529 --> 00:08:59,579
represent so in in other words what this

00:08:57,959 --> 00:09:02,009
does is lets you pick up a program and

00:08:59,579 --> 00:09:05,370
update it to the latest version of the

00:09:02,009 --> 00:09:07,620
of the standard language and then write

00:09:05,370 --> 00:09:08,879
on an updated version automatically so

00:09:07,620 --> 00:09:10,740
it's a lot like just having an editor

00:09:08,879 --> 00:09:12,389
script except it's actually semantically

00:09:10,740 --> 00:09:14,129
aware and dealing with full parse tree

00:09:12,389 --> 00:09:16,199
information so it's much much more

00:09:14,129 --> 00:09:18,990
powerful than say an editor script and

00:09:16,199 --> 00:09:21,990
this dramatically reduced the burden on

00:09:18,990 --> 00:09:24,149
users for updating to releases because

00:09:21,990 --> 00:09:25,860
we could just say here's a new release

00:09:24,149 --> 00:09:28,199
run go fix and your code will be up to

00:09:25,860 --> 00:09:30,740
date and this was a fantastic enabler

00:09:28,199 --> 00:09:34,680
for change it was an amazing thing to do

00:09:30,740 --> 00:09:37,259
and it led us it had sort of a good

00:09:34,680 --> 00:09:39,689
points bad points the good points were

00:09:37,259 --> 00:09:41,220
that you could easily update anyone's

00:09:39,689 --> 00:09:42,329
code including code you didn't own if

00:09:41,220 --> 00:09:44,189
you were importing a package from

00:09:42,329 --> 00:09:46,139
another repo you just run go fix on it

00:09:44,189 --> 00:09:48,480
and you'll be up to date it also made it

00:09:46,139 --> 00:09:51,180
very easy for us to make changes because

00:09:48,480 --> 00:09:52,379
we the cost of the users were so small

00:09:51,180 --> 00:09:54,630
if we wanted to make some interesting

00:09:52,379 --> 00:09:57,810
even experimental change it was easy to

00:09:54,630 --> 00:09:59,310
roll it out and let users try it but in

00:09:57,810 --> 00:10:01,620
some sense it made it too easy because

00:09:59,310 --> 00:10:03,420
it was just it was just you know we've

00:10:01,620 --> 00:10:05,759
made it massive changes to the tree

00:10:03,420 --> 00:10:07,139
we're now trivial to handle and so the

00:10:05,759 --> 00:10:08,850
amount of churn actually went up as a

00:10:07,139 --> 00:10:12,750
consequence of having a good tool to do

00:10:08,850 --> 00:10:15,660
this so you win some you lose some and

00:10:12,750 --> 00:10:18,779
in any case it's not really a panacea as

00:10:15,660 --> 00:10:20,339
I mentioned if if the version skew is

00:10:18,779 --> 00:10:22,259
still going to be there not every change

00:10:20,339 --> 00:10:24,360
we make is go fixable sometimes you have

00:10:22,259 --> 00:10:25,860
to actually understand the code at a

00:10:24,360 --> 00:10:28,800
sort of human level in order to fix it

00:10:25,860 --> 00:10:30,209
and different users are also living are

00:10:28,800 --> 00:10:31,829
still living at different points in the

00:10:30,209 --> 00:10:34,290
release cycle go fix doesn't address

00:10:31,829 --> 00:10:36,089
that fundamental problem and so the

00:10:34,290 --> 00:10:38,730
version the versioning issues persisted

00:10:36,089 --> 00:10:41,370
and it's there's just this fundamental

00:10:38,730 --> 00:10:43,199
problem that code from different repos

00:10:41,370 --> 00:10:45,540
would be a different release points and

00:10:43,199 --> 00:10:48,149
it was a pain in the ass and because of

00:10:45,540 --> 00:10:50,279
this sort of general problem we found

00:10:48,149 --> 00:10:53,129
this was a barrier to having people

00:10:50,279 --> 00:10:55,529
adopt go and a lot of companies in

00:10:53,129 --> 00:10:57,389
particular refused to consider go for

00:10:55,529 --> 00:10:59,009
for their work even though it might be a

00:10:57,389 --> 00:11:01,139
really good choice for them simply

00:10:59,009 --> 00:11:02,570
because they perceived it as an unstable

00:11:01,139 --> 00:11:04,960
language

00:11:02,570 --> 00:11:07,430
so we had to do something about this now

00:11:04,960 --> 00:11:09,230
as I said go fix makes it very easy to

00:11:07,430 --> 00:11:10,370
make changes and very easy to expand

00:11:09,230 --> 00:11:12,320
what changes but it doesn't help you

00:11:10,370 --> 00:11:13,700
decide whether change is good or not we

00:11:12,320 --> 00:11:16,370
still haven't needed a lot of judgment

00:11:13,700 --> 00:11:19,880
on that and so we decided at some point

00:11:16,370 --> 00:11:21,050
early last year that it was important

00:11:19,880 --> 00:11:22,280
actually was towards the middle last

00:11:21,050 --> 00:11:24,620
year that it was important to start

00:11:22,280 --> 00:11:26,990
thinking about making something stable a

00:11:24,620 --> 00:11:29,020
version of NGO that we believe was a

00:11:26,990 --> 00:11:31,400
good version for everyone to depend on

00:11:29,020 --> 00:11:35,000
we could use go fix to help us make that

00:11:31,400 --> 00:11:36,410
transition to that stable release we

00:11:35,000 --> 00:11:37,820
could do a lot of work to the libraries

00:11:36,410 --> 00:11:41,150
we could fix them outstanding issues in

00:11:37,820 --> 00:11:42,980
the language and so we decided also to

00:11:41,150 --> 00:11:44,420
deal with the tools issue which had

00:11:42,980 --> 00:11:45,890
never really been faced with with the

00:11:44,420 --> 00:11:47,750
work we were doing having so much fun

00:11:45,890 --> 00:11:49,370
hacking the libraries and language we

00:11:47,750 --> 00:11:51,560
never built the ecosystem that we really

00:11:49,370 --> 00:11:53,930
need it and so around the middle to the

00:11:51,560 --> 00:11:56,600
end of last year we decided to build a

00:11:53,930 --> 00:11:58,910
new stable release of go that would be

00:11:56,600 --> 00:12:01,760
the official version for some time to

00:11:58,910 --> 00:12:05,170
come and so with that I'll hand it off

00:12:01,760 --> 00:12:05,170
to Andrea to explain what that is

00:12:08,440 --> 00:12:16,190
hello so go on is basically our means of

00:12:14,510 --> 00:12:18,950
addressing all these concerns that Rob

00:12:16,190 --> 00:12:21,050
just raised its the specification of a

00:12:18,950 --> 00:12:22,730
language and the goal libraries which is

00:12:21,050 --> 00:12:25,310
intended to be supported on the order of

00:12:22,730 --> 00:12:27,650
years and so go code that compiles with

00:12:25,310 --> 00:12:30,290
go version one today will continue to

00:12:27,650 --> 00:12:34,940
compile with go version one point X up

00:12:30,290 --> 00:12:37,580
to any point to the future and the one

00:12:34,940 --> 00:12:39,260
of the key some of the key reasons to do

00:12:37,580 --> 00:12:41,960
it were it gave us an opportunity to

00:12:39,260 --> 00:12:43,010
first package go in binary distributions

00:12:41,960 --> 00:12:45,620
which is something that we'd always

00:12:43,010 --> 00:12:48,620
intended to do it but never done across

00:12:45,620 --> 00:12:50,810
all the supported platforms it gave us

00:12:48,620 --> 00:12:53,660
the opportunity to fix a bunch of minor

00:12:50,810 --> 00:12:55,700
irritations like small things or in

00:12:53,660 --> 00:12:57,440
sometimes larger things that have been

00:12:55,700 --> 00:12:59,390
bothering us about the language and

00:12:57,440 --> 00:13:00,980
about the standard library things that

00:12:59,390 --> 00:13:03,110
didn't feel consistent things that felt

00:13:00,980 --> 00:13:06,230
a bit clumsy and really tighten them up

00:13:03,110 --> 00:13:07,820
and we also had on the order of

00:13:06,230 --> 00:13:11,390
thousands of issues on the issue tracker

00:13:07,820 --> 00:13:12,470
which were all kind of small but we took

00:13:11,390 --> 00:13:14,840
this as an opportunity to really focus

00:13:12,470 --> 00:13:19,640
and double down and work on those and

00:13:14,840 --> 00:13:23,560
- duze in the codebase and we also built

00:13:19,640 --> 00:13:26,270
a new NGO specific build toolset and

00:13:23,560 --> 00:13:28,580
perhaps most importantly to widespread

00:13:26,270 --> 00:13:30,920
adoption we took it as an opportunity to

00:13:28,580 --> 00:13:33,560
say go one will not be released until

00:13:30,920 --> 00:13:35,780
Windows support is fully available and

00:13:33,560 --> 00:13:38,120
that really gave the community the

00:13:35,780 --> 00:13:39,950
impetus to get started on that but the

00:13:38,120 --> 00:13:42,080
key point is that go one wasn't an

00:13:39,950 --> 00:13:46,010
opportunity to sort of reinvent things

00:13:42,080 --> 00:13:48,670
it was a way of polishing and refining

00:13:46,010 --> 00:13:52,030
what we already had and sort of

00:13:48,670 --> 00:13:54,290
extracting give giving the best go

00:13:52,030 --> 00:13:58,310
version that we could based on what we

00:13:54,290 --> 00:14:01,400
had at the time so to plan the go one

00:13:58,310 --> 00:14:04,340
process the core team met in October

00:14:01,400 --> 00:14:06,920
2011 for a week to discuss everything we

00:14:04,340 --> 00:14:09,950
produced a big plans for several

00:14:06,920 --> 00:14:11,090
meetings across a few days and addressed

00:14:09,950 --> 00:14:12,710
basically all of a little niggling

00:14:11,090 --> 00:14:15,620
concerns that we had and produced a

00:14:12,710 --> 00:14:17,810
detailed proposal plan and at the end of

00:14:15,620 --> 00:14:20,090
that week we had everything written up

00:14:17,810 --> 00:14:23,720
and we presented that plan to the

00:14:20,090 --> 00:14:25,400
community as a whole and that after that

00:14:23,720 --> 00:14:30,830
a huge amount of discussion ensued on

00:14:25,400 --> 00:14:32,210
our public mailing lists and we it was

00:14:30,830 --> 00:14:33,770
quite you know quite heated discussion

00:14:32,210 --> 00:14:35,090
there were there was a lot of contention

00:14:33,770 --> 00:14:37,480
about certain decisions that have been

00:14:35,090 --> 00:14:39,620
made and as a result of that discussion

00:14:37,480 --> 00:14:41,330
taking on all that feedback we actually

00:14:39,620 --> 00:14:43,730
changed significant portions of the plan

00:14:41,330 --> 00:14:45,500
and there were really major changes that

00:14:43,730 --> 00:14:48,050
change quite dramatically as a result of

00:14:45,500 --> 00:14:50,990
community feedback which I think the

00:14:48,050 --> 00:14:53,840
process worked really well and so once

00:14:50,990 --> 00:14:56,390
we decided what we would go we'd done we

00:14:53,840 --> 00:14:58,730
said we finalized the proposal we sent

00:14:56,390 --> 00:15:01,280
it out and then we set about preparing

00:14:58,730 --> 00:15:02,810
to do it so we created issues on the

00:15:01,280 --> 00:15:05,210
issue tracker for all of the things that

00:15:02,810 --> 00:15:08,090
we wanted to address and then we did a

00:15:05,210 --> 00:15:11,450
big triage of all the issues markings

00:15:08,090 --> 00:15:13,160
those as must be done for go one would

00:15:11,450 --> 00:15:15,640
like to be done for go on and things

00:15:13,160 --> 00:15:18,380
that can be left until after go one and

00:15:15,640 --> 00:15:20,570
then once we had the work sort of laid

00:15:18,380 --> 00:15:23,990
out people just nominated themselves to

00:15:20,570 --> 00:15:25,970
do certain things and we got a huge

00:15:23,990 --> 00:15:27,920
engagement with all of our developers in

00:15:25,970 --> 00:15:28,670
the open source community and a large

00:15:27,920 --> 00:15:30,140
part of the

00:15:28,670 --> 00:15:33,110
particularly in windows was driven by

00:15:30,140 --> 00:15:35,210
them and we put a sort of moratorium on

00:15:33,110 --> 00:15:38,090
new features people wanting to add

00:15:35,210 --> 00:15:40,640
things to standard libraries or or add

00:15:38,090 --> 00:15:45,020
new libraries and so on were told to

00:15:40,640 --> 00:15:47,810
just sit on that until after go one so

00:15:45,020 --> 00:15:50,390
once we started working on the on the

00:15:47,810 --> 00:15:52,880
changes we really cranked it out this is

00:15:50,390 --> 00:15:54,950
a graph of the sort of four months

00:15:52,880 --> 00:15:58,520
leading up till go version one just

00:15:54,950 --> 00:16:00,140
after that last spike is is when go one

00:15:58,520 --> 00:16:03,920
was released and you can see the

00:16:00,140 --> 00:16:05,570
magnitude of the changes the the tide of

00:16:03,920 --> 00:16:08,180
this graph is seventy-five thousand

00:16:05,570 --> 00:16:10,910
lines changed in a day and so there are

00:16:08,180 --> 00:16:12,830
a couple of days where we changed like

00:16:10,910 --> 00:16:15,800
nearly half lines in the codebase which

00:16:12,830 --> 00:16:18,590
is pretty substantial but you know you

00:16:15,800 --> 00:16:22,190
obviously we didn't do all this by hand

00:16:18,590 --> 00:16:25,580
we at go fix played a large part in the

00:16:22,190 --> 00:16:27,110
development process for go on because we

00:16:25,580 --> 00:16:28,940
had these really large wide sweeping

00:16:27,110 --> 00:16:32,120
changes that some of which affected

00:16:28,940 --> 00:16:36,020
nearly every line in the codebase and so

00:16:32,120 --> 00:16:37,700
go fix allowed us to try out changes and

00:16:36,020 --> 00:16:41,480
then see how they looked and then refine

00:16:37,700 --> 00:16:43,910
them incrementally and as a result some

00:16:41,480 --> 00:16:45,140
of the most significant changes and that

00:16:43,910 --> 00:16:46,880
we planned for go one were actually

00:16:45,140 --> 00:16:49,520
tried out and then later abandoned

00:16:46,880 --> 00:16:52,250
because the costs of actually trying

00:16:49,520 --> 00:16:53,930
them out was so small we didn't have to

00:16:52,250 --> 00:16:55,550
manually go and change thousands of

00:16:53,930 --> 00:16:56,900
lines of code if it was since it was

00:16:55,550 --> 00:16:59,000
done mechanically it was easy for us to

00:16:56,900 --> 00:17:01,370
say you know actually this doesn't feel

00:16:59,000 --> 00:17:05,410
right or we should change it or we

00:17:01,370 --> 00:17:07,579
should just not do it at all but the a

00:17:05,410 --> 00:17:10,160
little bit more detail on that the

00:17:07,579 --> 00:17:11,870
workflow for doing writing these go

00:17:10,160 --> 00:17:13,699
fixed modules and making these wide

00:17:11,870 --> 00:17:17,000
sweeping changes was really interesting

00:17:13,699 --> 00:17:18,589
and kind of unusual I think yeah but

00:17:17,000 --> 00:17:23,270
this is this sort of pseudo code of how

00:17:18,589 --> 00:17:25,670
the process worked so say you're making

00:17:23,270 --> 00:17:27,680
a language change you would have to go

00:17:25,670 --> 00:17:29,720
trees setup and in one of them you would

00:17:27,680 --> 00:17:31,850
work on the go fix module that makes the

00:17:29,720 --> 00:17:33,770
change and then in the other tree which

00:17:31,850 --> 00:17:35,480
you would have synced to the tip you

00:17:33,770 --> 00:17:38,450
would apply those changes using your

00:17:35,480 --> 00:17:40,430
version of go fix and then you would

00:17:38,450 --> 00:17:42,410
build and test and see how it looked

00:17:40,430 --> 00:17:44,060
maybe even send it out for review

00:17:42,410 --> 00:17:46,400
and then you make refinements to the

00:17:44,060 --> 00:17:50,480
original go fix program and repeat the

00:17:46,400 --> 00:17:52,370
process until you're satisfied and then

00:17:50,480 --> 00:17:54,830
once you've got the go fix module you

00:17:52,370 --> 00:17:58,760
commit that and then you send out the

00:17:54,830 --> 00:18:02,150
change for the tree - and commit that

00:17:58,760 --> 00:18:05,030
and the the interesting the really

00:18:02,150 --> 00:18:06,980
interesting part is that sometimes

00:18:05,030 --> 00:18:09,080
several of these massive changes we're

00:18:06,980 --> 00:18:10,730
all being done simultaneously by

00:18:09,080 --> 00:18:13,160
different or even by the same people and

00:18:10,730 --> 00:18:15,350
it meant that we could actually make

00:18:13,160 --> 00:18:17,960
these huge wide sweeping changes and not

00:18:15,350 --> 00:18:20,090
have to worry about branching or skew

00:18:17,960 --> 00:18:22,340
because you never had to merge you would

00:18:20,090 --> 00:18:26,870
just sink and then reapply your go fix

00:18:22,340 --> 00:18:28,970
to the tree and just to give an example

00:18:26,870 --> 00:18:32,030
of what some of these changes look like

00:18:28,970 --> 00:18:33,620
this is a couple of dips from the era

00:18:32,030 --> 00:18:36,770
change you can see that we changed this

00:18:33,620 --> 00:18:40,360
OS dot arrow type to just a built-in

00:18:36,770 --> 00:18:43,580
arrow type and we also moved some

00:18:40,360 --> 00:18:44,690
built-in error values from one part of

00:18:43,580 --> 00:18:46,760
the standard library the other and here

00:18:44,690 --> 00:18:50,720
you can see a very subtle change using

00:18:46,760 --> 00:18:53,630
the EOF error value from the i/o package

00:18:50,720 --> 00:18:57,650
instead of the OS package and trying to

00:18:53,630 --> 00:18:59,300
do this without a language aware tool to

00:18:57,650 --> 00:19:01,190
do so like we just tried to use set or

00:18:59,300 --> 00:19:06,200
really regular expressions it would be

00:19:01,190 --> 00:19:11,840
much more complicated so while go one

00:19:06,200 --> 00:19:13,640
was being rolled out or worked on we

00:19:11,840 --> 00:19:16,300
actually paused the release process

00:19:13,640 --> 00:19:19,310
because we knew that we wouldn't have a

00:19:16,300 --> 00:19:21,740
stable point during this what ended up

00:19:19,310 --> 00:19:23,720
being about a six-month process where we

00:19:21,740 --> 00:19:25,600
could define a new release and so we

00:19:23,720 --> 00:19:27,860
continued issuing weekly snapshots

00:19:25,600 --> 00:19:30,050
mainly just so that we could keep track

00:19:27,860 --> 00:19:31,580
of everything that was going on but the

00:19:30,050 --> 00:19:33,320
release is paused and that actually

00:19:31,580 --> 00:19:35,840
meant that we ended up with this version

00:19:33,320 --> 00:19:38,480
r60 of go that people started to kind of

00:19:35,840 --> 00:19:41,060
hate and you would see like the r60 code

00:19:38,480 --> 00:19:42,620
and for a time during the go one process

00:19:41,060 --> 00:19:45,350
the community we got the community

00:19:42,620 --> 00:19:47,270
fragmentation got worse because we had

00:19:45,350 --> 00:19:48,410
people who wanted stability on our sixty

00:19:47,270 --> 00:19:49,610
and then people who were on the tip

00:19:48,410 --> 00:19:51,670
because they wanted all these great new

00:19:49,610 --> 00:19:54,200
changes that we're making and it really

00:19:51,670 --> 00:19:56,909
it started to get quite painful in the

00:19:54,200 --> 00:19:59,379
weeks leading up to two

00:19:56,909 --> 00:20:02,110
but in the lead up to the launch we

00:19:59,379 --> 00:20:04,779
issued release candidates based on

00:20:02,110 --> 00:20:07,509
weeklies leading up to to the the date

00:20:04,779 --> 00:20:09,129
that we sort of had penciled in and

00:20:07,509 --> 00:20:12,399
these release candidates included the

00:20:09,129 --> 00:20:13,960
distributions for the binary

00:20:12,399 --> 00:20:18,370
distributions for the platforms that we

00:20:13,960 --> 00:20:19,809
supported and those those packaging the

00:20:18,370 --> 00:20:21,700
packaging for those was all driven by

00:20:19,809 --> 00:20:23,740
the community and which worked really

00:20:21,700 --> 00:20:26,080
well in the end but it was great to go

00:20:23,740 --> 00:20:27,789
through that debugging process so now I

00:20:26,080 --> 00:20:32,200
just talked a little bit about what is

00:20:27,789 --> 00:20:33,850
actually in go on as mentioned it's the

00:20:32,200 --> 00:20:36,789
specification of the language and the

00:20:33,850 --> 00:20:39,460
libraries with the promise of being

00:20:36,789 --> 00:20:41,200
compatible in the long term Windows

00:20:39,460 --> 00:20:44,830
support was first class and so you

00:20:41,200 --> 00:20:46,690
weren't in any way worse off using

00:20:44,830 --> 00:20:50,470
Windows as far as go is concerned and

00:20:46,690 --> 00:20:53,259
the we had this new tool chain centered

00:20:50,470 --> 00:20:55,090
around a tool called go the go tool but

00:20:53,259 --> 00:20:57,070
most importantly go one sort of

00:20:55,090 --> 00:20:58,600
signified a phase change in the way the

00:20:57,070 --> 00:21:01,600
project was being run instead of

00:20:58,600 --> 00:21:03,940
cranking continuously on putting out new

00:21:01,600 --> 00:21:07,750
features and making small changes we had

00:21:03,940 --> 00:21:09,580
a much more measured sort of long-term

00:21:07,750 --> 00:21:11,250
view of development which I'll talk

00:21:09,580 --> 00:21:13,870
about in a moment

00:21:11,250 --> 00:21:17,019
as far as language changes go the two

00:21:13,870 --> 00:21:19,509
most significant the introduction of a

00:21:17,019 --> 00:21:22,750
new ruin type for representing Unicode

00:21:19,509 --> 00:21:26,919
code points and this is really a step in

00:21:22,750 --> 00:21:28,360
making the built-in n type different

00:21:26,919 --> 00:21:29,830
sizes on different platforms that's

00:21:28,360 --> 00:21:32,230
something that we'd always intended but

00:21:29,830 --> 00:21:34,179
because previously an int and a rune

00:21:32,230 --> 00:21:38,259
were the same thing we couldn't divorce

00:21:34,179 --> 00:21:41,470
them and also the new built-in arrow

00:21:38,259 --> 00:21:43,029
type to replace OS dot error so we took

00:21:41,470 --> 00:21:45,009
something that was in the standard light

00:21:43,029 --> 00:21:46,419
a standard library feature and actually

00:21:45,009 --> 00:21:47,759
made it part of the language because it

00:21:46,419 --> 00:21:52,029
was a convention that was being used

00:21:47,759 --> 00:21:53,950
throughout pretty much all go code we

00:21:52,029 --> 00:21:56,799
also defined equality on structs and

00:21:53,950 --> 00:21:58,720
also did probably more than a dozen

00:21:56,799 --> 00:22:00,460
other changes to language just cleaning

00:21:58,720 --> 00:22:02,289
up small little clumsiness azure

00:22:00,460 --> 00:22:05,259
inconsistencies or things that we hadn't

00:22:02,289 --> 00:22:08,529
been happy with before and we also

00:22:05,259 --> 00:22:09,490
significantly overhauled a bunch of

00:22:08,529 --> 00:22:12,460
api's

00:22:09,490 --> 00:22:13,510
ranging from just changing functions

00:22:12,460 --> 00:22:16,090
function signatures to be more

00:22:13,510 --> 00:22:18,010
consistent across packages or even

00:22:16,090 --> 00:22:20,440
changing fully changing the interface of

00:22:18,010 --> 00:22:23,080
some packages for example and there's a

00:22:20,440 --> 00:22:24,640
redesigned time package with a much

00:22:23,080 --> 00:22:25,960
cleaner simpler interface and I know

00:22:24,640 --> 00:22:27,850
that kind of goes against what I was

00:22:25,960 --> 00:22:29,980
saying about polishing the old instead

00:22:27,850 --> 00:22:31,360
of writing new but it was a such a

00:22:29,980 --> 00:22:34,420
significant improvement we deemed it

00:22:31,360 --> 00:22:36,580
worthy and we also regularized this to a

00:22:34,420 --> 00:22:40,210
Compaq egde when we'd previously had a

00:22:36,580 --> 00:22:41,440
very C style API for that and we it was

00:22:40,210 --> 00:22:43,030
one of the earliest packages that have

00:22:41,440 --> 00:22:44,530
been written in go and so we took it as

00:22:43,030 --> 00:22:47,110
an opportunity to apply everything that

00:22:44,530 --> 00:22:50,140
we learned to redesign a better stick on

00:22:47,110 --> 00:22:52,390
string conversion package we also did a

00:22:50,140 --> 00:22:54,370
wide spread package reorg to put things

00:22:52,390 --> 00:22:57,580
in better places and made many many or

00:22:54,370 --> 00:23:00,700
more more other changes so just briefly

00:22:57,580 --> 00:23:03,160
on the time package changes previously a

00:23:00,700 --> 00:23:06,880
time value in go was just a unix time in

00:23:03,160 --> 00:23:11,320
nanoseconds but that has accuracy issues

00:23:06,880 --> 00:23:18,070
so and it was generally error-prone in

00:23:11,320 --> 00:23:21,010
use so now we have custom separate types

00:23:18,070 --> 00:23:24,700
for x that is specific instances in time

00:23:21,010 --> 00:23:27,100
and durations as in periods of time and

00:23:24,700 --> 00:23:31,570
so now we can represent a huge range of

00:23:27,100 --> 00:23:33,400
times with nanosecond precision to give

00:23:31,570 --> 00:23:38,260
you an example if the old API versus the

00:23:33,400 --> 00:23:39,730
new just sleep for for a time you would

00:23:38,260 --> 00:23:41,559
previously say time but sleep and then

00:23:39,730 --> 00:23:43,660
the time in nanoseconds so this this

00:23:41,559 --> 00:23:46,240
call actually might look correct you

00:23:43,660 --> 00:23:49,200
might assume it's in seconds but it's

00:23:46,240 --> 00:23:52,750
actually 20 nanoseconds whereas now

00:23:49,200 --> 00:23:56,260
because the duration is statically typed

00:23:52,750 --> 00:23:59,170
you need to either say this is you need

00:23:56,260 --> 00:24:01,750
to you can specify the units by using

00:23:59,170 --> 00:24:03,220
this time but second constant and also

00:24:01,750 --> 00:24:05,950
we have a more expressive API for

00:24:03,220 --> 00:24:12,490
working with x this will print the the

00:24:05,950 --> 00:24:14,220
current time plus a million hours all

00:24:12,490 --> 00:24:16,050
right

00:24:14,220 --> 00:24:17,820
and another nice thing that rolled out

00:24:16,050 --> 00:24:19,680
of this is that we added a new flag type

00:24:17,820 --> 00:24:21,810
to the command line flag parsing package

00:24:19,680 --> 00:24:24,360
so you could just say you could specify

00:24:21,810 --> 00:24:25,890
a time in kind of a comprehensible

00:24:24,360 --> 00:24:30,510
format and have it come out as a time

00:24:25,890 --> 00:24:32,910
time value and the package

00:24:30,510 --> 00:24:34,890
reorganization was a really big deal our

00:24:32,910 --> 00:24:37,770
standard library had grown dramatically

00:24:34,890 --> 00:24:39,870
since since we launched but it had grown

00:24:37,770 --> 00:24:41,520
in this really ad-hoc kind of organic

00:24:39,870 --> 00:24:44,010
way and so we had a lot of these

00:24:41,520 --> 00:24:45,300
packages at the top level that were

00:24:44,010 --> 00:24:46,380
related but there was no way you could

00:24:45,300 --> 00:24:48,270
see that they're related so

00:24:46,380 --> 00:24:49,410
discoverability was bad it was really

00:24:48,270 --> 00:24:50,580
hard to find things and you were looking

00:24:49,410 --> 00:24:53,040
for

00:24:50,580 --> 00:24:54,810
and so we shoved all the encoding stuff

00:24:53,040 --> 00:24:56,730
under encoding or the encryption stuff

00:24:54,810 --> 00:24:58,710
under crypto all the Unicode under

00:24:56,730 --> 00:25:00,570
Unicode and so on and so now we have a

00:24:58,710 --> 00:25:04,110
more more hierarchical still very

00:25:00,570 --> 00:25:08,460
shallow but a more hierarchical package

00:25:04,110 --> 00:25:14,760
tree and all of these changes were able

00:25:08,460 --> 00:25:17,460
to be made by go fix of course the parts

00:25:14,760 --> 00:25:23,280
of go that that were not complete or

00:25:17,460 --> 00:25:27,150
were or old were not included and go on

00:25:23,280 --> 00:25:29,340
so we with the stuff that we knew was

00:25:27,150 --> 00:25:32,970
going to get mature and become useful we

00:25:29,340 --> 00:25:34,560
put that in external sub repositories of

00:25:32,970 --> 00:25:36,570
the go repository so that you could

00:25:34,560 --> 00:25:39,030
install them later if you wanted to and

00:25:36,570 --> 00:25:41,940
we could exclude them from our

00:25:39,030 --> 00:25:45,270
standardized API and the old stuff we

00:25:41,940 --> 00:25:51,690
just we just cut out entirely and I have

00:25:45,270 --> 00:25:53,850
now deleted from the tree so the the one

00:25:51,690 --> 00:25:56,610
of the major changes to development

00:25:53,850 --> 00:25:59,460
workflow for users of go in go one was

00:25:56,610 --> 00:26:02,880
the introduction of a new go tool so

00:25:59,460 --> 00:26:04,650
previously to build go programs you

00:26:02,880 --> 00:26:06,350
would write make files or to build

00:26:04,650 --> 00:26:08,700
libraries you would write make files and

00:26:06,350 --> 00:26:11,670
that was really a convenience that we

00:26:08,700 --> 00:26:13,890
took early on because make was a tool

00:26:11,670 --> 00:26:17,370
that was there we understood it but

00:26:13,890 --> 00:26:19,350
ultimately for go it was kind of

00:26:17,370 --> 00:26:21,420
annoying because we knew that we didn't

00:26:19,350 --> 00:26:22,950
actually need make files because from

00:26:21,420 --> 00:26:25,380
the beginning the language was designed

00:26:22,950 --> 00:26:27,720
such that it would support good

00:26:25,380 --> 00:26:29,730
dependency management and that all

00:26:27,720 --> 00:26:31,500
go source files should contain all the

00:26:29,730 --> 00:26:35,429
information that's required to know how

00:26:31,500 --> 00:26:36,990
to build go programs and so in go one we

00:26:35,429 --> 00:26:38,850
included this new go tool which

00:26:36,990 --> 00:26:41,179
eliminates the need for make make files

00:26:38,850 --> 00:26:44,100
and any other kind of build scripts and

00:26:41,179 --> 00:26:46,259
it's able to just look at a go tree and

00:26:44,100 --> 00:26:49,289
build and install the packages in that

00:26:46,259 --> 00:26:54,120
tree directly just by saying go build

00:26:49,289 --> 00:26:56,850
and so the go tool itself is a complete

00:26:54,120 --> 00:26:59,429
build tests installation and package

00:26:56,850 --> 00:27:01,769
fetching tool for go programs and some

00:26:59,429 --> 00:27:03,419
these are realistic examples of how you

00:27:01,769 --> 00:27:05,759
might use it you can just run a go

00:27:03,419 --> 00:27:08,789
program on the command line or you can

00:27:05,759 --> 00:27:12,240
build a specific package or install from

00:27:08,789 --> 00:27:14,700
the current directory or even run the

00:27:12,240 --> 00:27:16,620
test suite for a specific package we

00:27:14,700 --> 00:27:18,750
also hooked in some of our existing

00:27:16,620 --> 00:27:22,289
tools like go from to the pretty

00:27:18,750 --> 00:27:25,559
printing program for go and go fix into

00:27:22,289 --> 00:27:26,940
the go tool for convenience providing a

00:27:25,559 --> 00:27:30,450
kind of standard interface across all

00:27:26,940 --> 00:27:32,490
these tools but perhaps the biggest win

00:27:30,450 --> 00:27:35,159
of the go tool is its ability to

00:27:32,490 --> 00:27:38,820
automatically install remote packages

00:27:35,159 --> 00:27:42,360
and so this was a result of the design

00:27:38,820 --> 00:27:44,850
of making packages addressable by their

00:27:42,360 --> 00:27:46,799
import strings and so the the import

00:27:44,850 --> 00:27:50,700
string how do you refer to a package in

00:27:46,799 --> 00:27:54,389
a piece of go code is actually the the

00:27:50,700 --> 00:27:56,730
URL of that packages source repository

00:27:54,389 --> 00:27:58,500
and so the go call can download and

00:27:56,730 --> 00:28:01,019
install all of a particular packages

00:27:58,500 --> 00:28:02,929
dependencies transitively just by

00:28:01,019 --> 00:28:06,809
looking at the import paths in the code

00:28:02,929 --> 00:28:09,779
and so as an example of this you can say

00:28:06,809 --> 00:28:11,730
go get and then the path to some some

00:28:09,779 --> 00:28:13,740
package and some repository and that

00:28:11,730 --> 00:28:15,809
will inspect that package install it in

00:28:13,740 --> 00:28:17,490
any of its dependencies and then to use

00:28:15,809 --> 00:28:21,360
it in code you just say import and then

00:28:17,490 --> 00:28:23,490
that path and one nice thing when people

00:28:21,360 --> 00:28:25,919
were migrating is that you can say go

00:28:23,490 --> 00:28:28,320
get - fix and the go tool will

00:28:25,919 --> 00:28:30,090
automatically run go fix across any code

00:28:28,320 --> 00:28:32,159
that it fetches from remote repositories

00:28:30,090 --> 00:28:33,840
and so this actually really ease the

00:28:32,159 --> 00:28:38,039
migration from people using previous

00:28:33,840 --> 00:28:40,200
versions of go to using go one another

00:28:38,039 --> 00:28:41,040
really major part of the work leading up

00:28:40,200 --> 00:28:44,750
to go on

00:28:41,040 --> 00:28:46,890
was the Overhaulin goes documentation

00:28:44,750 --> 00:28:49,190
documentation has always been a really

00:28:46,890 --> 00:28:52,130
core part of the NGO project and

00:28:49,190 --> 00:28:54,570
documentation bugs are actually seen as

00:28:52,130 --> 00:28:58,440
just as important as any other kind of

00:28:54,570 --> 00:29:00,330
code bugs but documentation that grows

00:28:58,440 --> 00:29:01,770
organically is like code that grows

00:29:00,330 --> 00:29:06,380
organically it's not necessarily

00:29:01,770 --> 00:29:09,030
organized as best as it could be and so

00:29:06,380 --> 00:29:10,800
this go one gave us an opportunity to

00:29:09,030 --> 00:29:12,330
reassess the way people engaged with the

00:29:10,800 --> 00:29:15,330
goal angler dog website which we

00:29:12,330 --> 00:29:17,070
completely redesigned we looked at how

00:29:15,330 --> 00:29:19,440
people were getting into go and wrote

00:29:17,070 --> 00:29:21,330
totally new installation instructions we

00:29:19,440 --> 00:29:23,160
cut out a lot of documentation that we'd

00:29:21,330 --> 00:29:24,990
had which was more suitable to like

00:29:23,160 --> 00:29:27,270
early adopters and sort of gave a

00:29:24,990 --> 00:29:28,190
streamlined approach for people to get

00:29:27,270 --> 00:29:30,900
into go

00:29:28,190 --> 00:29:33,000
we also documented a lot of areas of the

00:29:30,900 --> 00:29:36,090
tools and libraries that had been a bit

00:29:33,000 --> 00:29:38,940
sparse before and a big part of this was

00:29:36,090 --> 00:29:42,360
adding support for executable example

00:29:38,940 --> 00:29:45,380
code so we were able to write examples

00:29:42,360 --> 00:29:48,390
that demonstrated our packages in use

00:29:45,380 --> 00:29:50,220
that also had the expected output as

00:29:48,390 --> 00:29:52,560
part of the example and so they actually

00:29:50,220 --> 00:29:56,760
became part of our test suite and run by

00:29:52,560 --> 00:29:58,920
the go test tool and so we actually

00:29:56,760 --> 00:30:01,560
added a whole lot more testing to our

00:29:58,920 --> 00:30:05,880
packages in the same in the same breath

00:30:01,560 --> 00:30:09,660
as adding more examples to the

00:30:05,880 --> 00:30:11,130
documentation so overall I think this

00:30:09,660 --> 00:30:15,210
was a major step forward for the

00:30:11,130 --> 00:30:17,190
projector and finally as part of the

00:30:15,210 --> 00:30:19,560
development process we implemented the

00:30:17,190 --> 00:30:22,410
API compatibility tool which is just a

00:30:19,560 --> 00:30:24,270
tool that checks the entire standard

00:30:22,410 --> 00:30:27,420
libraries interfaces against a master

00:30:24,270 --> 00:30:30,060
list of those interfaces and we we cut

00:30:27,420 --> 00:30:32,280
that master list in the in the days

00:30:30,060 --> 00:30:34,590
leading up to the go one launch and it

00:30:32,280 --> 00:30:36,600
meant that with our stable release

00:30:34,590 --> 00:30:38,250
candidates we were able to make sure

00:30:36,600 --> 00:30:40,760
that no changes to the tree would

00:30:38,250 --> 00:30:44,910
actually break people's existing code

00:30:40,760 --> 00:30:46,410
and we continue to use that and so the

00:30:44,910 --> 00:30:47,280
continuous build system will notify us

00:30:46,410 --> 00:30:50,760
if a change

00:30:47,280 --> 00:30:53,810
breaks the brakes the guarantees that

00:30:50,760 --> 00:30:53,810
we've made with go on

00:30:54,650 --> 00:31:01,200
so a bit about the where we are now and

00:30:57,750 --> 00:31:03,840
about the future of the project so the

00:31:01,200 --> 00:31:06,140
go for go what go one was to provide

00:31:03,840 --> 00:31:10,130
something that was stable and productive

00:31:06,140 --> 00:31:12,030
predictable and consistent as a

00:31:10,130 --> 00:31:14,549
environment that people can use and rely

00:31:12,030 --> 00:31:17,309
on for years to come but now that go one

00:31:14,549 --> 00:31:20,490
is out we're now shifting our focus to

00:31:17,309 --> 00:31:24,080
using go ourselves like as as a team and

00:31:20,490 --> 00:31:27,919
as a community because we recognize that

00:31:24,080 --> 00:31:30,360
only through spending some considered

00:31:27,919 --> 00:31:32,640
reflective time using what we've created

00:31:30,360 --> 00:31:34,200
will we be able to decide what is

00:31:32,640 --> 00:31:37,380
appropriate for the next version of go

00:31:34,200 --> 00:31:41,760
what might be needed in say a go version

00:31:37,380 --> 00:31:44,039
to but with that said there's still a

00:31:41,760 --> 00:31:47,220
lot of active development on the go core

00:31:44,039 --> 00:31:49,080
but it's not on the interfaces the

00:31:47,220 --> 00:31:52,409
design is locked down but now we're

00:31:49,080 --> 00:31:55,370
working on things like stability making

00:31:52,409 --> 00:31:59,520
many bug fixes to all areas of the tree

00:31:55,370 --> 00:32:01,110
and particularly improving efficiency so

00:31:59,520 --> 00:32:03,539
in the last couple of months we've seen

00:32:01,110 --> 00:32:06,480
major improvements to the compilers code

00:32:03,539 --> 00:32:09,630
generation the garbage collector is now

00:32:06,480 --> 00:32:13,650
as in some cases in order faster or

00:32:09,630 --> 00:32:17,730
close to that we're looking at changes

00:32:13,650 --> 00:32:20,330
for the scheduler and and fixing in

00:32:17,730 --> 00:32:22,740
inefficiencies in the standard libraries

00:32:20,330 --> 00:32:25,409
another focus is on portability there

00:32:22,740 --> 00:32:28,020
are net BSC OpenBSD and plan nine ports

00:32:25,409 --> 00:32:30,299
that are in progress by people in the

00:32:28,020 --> 00:32:33,030
community and we're always looking to

00:32:30,299 --> 00:32:36,539
sort of broaden the the supported base

00:32:33,030 --> 00:32:39,870
of installed go programs and we're also

00:32:36,539 --> 00:32:42,030
working on some new libraries that for

00:32:39,870 --> 00:32:44,760
example an html5 parser which is nearly

00:32:42,030 --> 00:32:48,960
complete Unicode collation packages and

00:32:44,760 --> 00:32:50,940
some other bits and pieces I'm since go

00:32:48,960 --> 00:32:54,090
one we've done a couple of minor point

00:32:50,940 --> 00:32:57,419
releases 1.01 and 1.02 and they were all

00:32:54,090 --> 00:32:59,159
just driven by bug fixes we had in I

00:32:57,419 --> 00:33:02,540
think in both cases there was security

00:32:59,159 --> 00:33:05,040
look related but they triggered

00:33:02,540 --> 00:33:06,250
gathering up all of the thing the fixes

00:33:05,040 --> 00:33:08,140
that we deemed were essential

00:33:06,250 --> 00:33:13,150
and applying them to a separate branch

00:33:08,140 --> 00:33:18,120
and issuing 1.01 1.02 without any any

00:33:13,150 --> 00:33:20,980
any non non fix patch is applied and

00:33:18,120 --> 00:33:24,730
we're planning a major point release of

00:33:20,980 --> 00:33:27,100
go 1.1 which will be cut from tip at the

00:33:24,730 --> 00:33:29,890
end of at the end of this year and it'll

00:33:27,100 --> 00:33:34,330
include the aforementioned cogeneration

00:33:29,890 --> 00:33:36,580
improvements and some performance and

00:33:34,330 --> 00:33:37,870
act and in most importantly accuracy

00:33:36,580 --> 00:33:39,640
improvements of the garbage collector

00:33:37,870 --> 00:33:42,520
resolving some issues we had on 386

00:33:39,640 --> 00:33:43,870
systems we hope to also include an

00:33:42,520 --> 00:33:47,410
improved scheduler although it's still

00:33:43,870 --> 00:33:48,970
in its design phase and of course the

00:33:47,410 --> 00:33:52,270
slew of bug fixes but as I mentioned

00:33:48,970 --> 00:33:54,700
earlier goto is kind of a theoretical

00:33:52,270 --> 00:33:59,980
idea at this point and it's likely it'll

00:33:54,700 --> 00:34:01,900
be years before we see release so yeah

00:33:59,980 --> 00:34:03,190
that's that's the story of go one and if

00:34:01,900 --> 00:34:06,040
you're interested in learning more about

00:34:03,190 --> 00:34:07,510
go I've encouraged you to visit

00:34:06,040 --> 00:34:09,490
golang.org we have a huge amount of

00:34:07,510 --> 00:34:11,409
documentation there and indeed you can

00:34:09,490 --> 00:34:14,139
learn go itself from your web browser at

00:34:11,409 --> 00:34:15,909
toward a girl angered org if you're

00:34:14,139 --> 00:34:17,260
interested in the project and also in

00:34:15,909 --> 00:34:18,940
goes origins and the sort of the

00:34:17,260 --> 00:34:20,530
philosophy of go I would really

00:34:18,940 --> 00:34:22,780
encourage you to watch the meet the go

00:34:20,530 --> 00:34:25,510
team panel that we hosted at Google IO a

00:34:22,780 --> 00:34:27,970
couple of weeks ago and finally if you

00:34:25,510 --> 00:34:31,149
want to follow the project you should

00:34:27,970 --> 00:34:33,100
visit the Google Code project of of our

00:34:31,149 --> 00:34:35,230
go project and I'll just leave this

00:34:33,100 --> 00:34:36,730
slide up but I think Rob and I are happy

00:34:35,230 --> 00:35:11,500
to take questions from anyone that's

00:34:36,730 --> 00:35:13,780
interested so it's a really good

00:35:11,500 --> 00:35:16,320
question I'll try and recap it as best I

00:35:13,780 --> 00:35:18,880
can so it's really the question is

00:35:16,320 --> 00:35:20,980
before go one we had a lot of people

00:35:18,880 --> 00:35:23,020
working hard on pushing on new things in

00:35:20,980 --> 00:35:25,390
the core and then after go one with this

00:35:23,020 --> 00:35:26,710
kind of freeze on the interfaces what

00:35:25,390 --> 00:35:29,890
happened to those people did they get

00:35:26,710 --> 00:35:31,030
frustrated and leave and the answer is

00:35:29,890 --> 00:35:33,670
that we were actually really concerned

00:35:31,030 --> 00:35:34,750
about this in the lead-up to release and

00:35:33,670 --> 00:35:39,280
go one so we didn't want to say look

00:35:34,750 --> 00:35:41,500
stop but what we found is that people

00:35:39,280 --> 00:35:44,050
have really well redirected their

00:35:41,500 --> 00:35:46,210
efforts into things that are you know

00:35:44,050 --> 00:35:48,160
under the covers changes improving

00:35:46,210 --> 00:35:50,080
performance improving stability bug

00:35:48,160 --> 00:35:51,880
fixing and so on and people are working

00:35:50,080 --> 00:35:53,470
most gratifyingly people are working

00:35:51,880 --> 00:35:56,290
more on the periphery of the project now

00:35:53,470 --> 00:35:59,050
so we have this kind of kernel the solid

00:35:56,290 --> 00:36:01,150
kernel of the core and now people are

00:35:59,050 --> 00:36:02,770
working more on tools and libraries that

00:36:01,150 --> 00:36:05,020
surround that core which is kind of one

00:36:02,770 --> 00:36:06,760
of the intended consequences of that I'd

00:36:05,020 --> 00:36:09,010
also like to add that the whole goal one

00:36:06,760 --> 00:36:11,260
process gave those pushers an

00:36:09,010 --> 00:36:13,300
opportunity to decide what really needed

00:36:11,260 --> 00:36:15,310
to change what was what was fundamental

00:36:13,300 --> 00:36:16,950
and what we need to think about more and

00:36:15,310 --> 00:36:19,210
so including them in the conversation

00:36:16,950 --> 00:36:22,060
pretty much made everybody happy by the

00:36:19,210 --> 00:36:23,380
end I can't speak for them but I believe

00:36:22,060 --> 00:36:25,950
that the community's pretty happy with

00:36:23,380 --> 00:36:25,950
where we ended up

00:36:35,060 --> 00:36:38,660
the question is whether there's any

00:36:36,680 --> 00:36:42,560
specific problems in Java and C++ that

00:36:38,660 --> 00:36:45,380
we solved and go and the answer is yes I

00:36:42,560 --> 00:36:47,810
think pretty importantly I actually gave

00:36:45,380 --> 00:36:50,330
a talk at a meeting couple of weeks ago

00:36:47,810 --> 00:36:52,730
which you can find on my blog which is a

00:36:50,330 --> 00:36:55,940
summary of basically that position I

00:36:52,730 --> 00:36:57,140
think the most important thing there's a

00:36:55,940 --> 00:36:59,450
sort of philosophical approach to

00:36:57,140 --> 00:37:01,670
programming going from sub type

00:36:59,450 --> 00:37:02,840
inheritance to composition you can argue

00:37:01,670 --> 00:37:04,730
whether or not that's solving a problem

00:37:02,840 --> 00:37:07,870
or not the thing that really matters

00:37:04,730 --> 00:37:11,060
though is that goes incredibly clean and

00:37:07,870 --> 00:37:13,940
rigorous dependency management makes

00:37:11,060 --> 00:37:18,260
large go program still able to be worked

00:37:13,940 --> 00:37:20,210
on and compiled efficiently and the

00:37:18,260 --> 00:37:22,520
triggering event for doing go was

00:37:20,210 --> 00:37:25,250
struggling with a very large C++ code

00:37:22,520 --> 00:37:27,380
base that takes literally hours to build

00:37:25,250 --> 00:37:30,290
because of all the dependency heartache

00:37:27,380 --> 00:37:32,270
and just putting a firm control over the

00:37:30,290 --> 00:37:33,680
dependency management having a language

00:37:32,270 --> 00:37:35,660
that understands that problem and

00:37:33,680 --> 00:37:38,780
addresses it you build have tools that

00:37:35,660 --> 00:37:40,580
understand how to deal with that it's

00:37:38,780 --> 00:37:43,310
hard to explain how different life is

00:37:40,580 --> 00:37:45,530
when my old world a build would take an

00:37:43,310 --> 00:37:48,470
hour and now typical build is less than

00:37:45,530 --> 00:37:49,970
a second that's not just a quantitative

00:37:48,470 --> 00:37:52,520
change that's that's a way of life

00:37:49,970 --> 00:37:53,960
change and that's really fixed so I

00:37:52,520 --> 00:37:55,310
think that's the biggest deal there's a

00:37:53,960 --> 00:37:58,730
lot of other stuff too but if you're in

00:37:55,310 --> 00:38:00,680
should go read my blog post I'm are we

00:37:58,730 --> 00:38:05,150
out of time or can we take a couple more

00:38:00,680 --> 00:38:08,320
it's got told to hurry up so I'll take

00:38:05,150 --> 00:38:08,320
yeah take one or two more please

00:38:16,310 --> 00:38:20,570
binary eligibility is not an issue for

00:38:18,530 --> 00:38:22,520
us we don't consider it and we're

00:38:20,570 --> 00:38:24,440
actually explicit in the compatibility

00:38:22,520 --> 00:38:25,850
guidelines for the language that we

00:38:24,440 --> 00:38:27,830
don't guarantee anything about binary

00:38:25,850 --> 00:38:29,630
compatibility for the standard go

00:38:27,830 --> 00:38:32,420
compiler everything statically linked

00:38:29,630 --> 00:38:34,370
anyway so it's a non-issue for the the

00:38:32,420 --> 00:38:36,260
other compiler which which is exactly

00:38:34,370 --> 00:38:37,460
the same language it still uses dynamic

00:38:36,260 --> 00:38:38,870
libraries and there issues there but

00:38:37,460 --> 00:38:42,050
that's a different a different

00:38:38,870 --> 00:38:42,640
consideration yeah it's not it's not an

00:38:42,050 --> 00:38:46,810
issue

00:38:42,640 --> 00:38:46,810
one more question in the red

00:38:54,900 --> 00:38:59,350
so the question was I believe what talks

00:38:58,390 --> 00:39:02,860
have we given that have been most

00:38:59,350 --> 00:39:06,640
effective in building a community around

00:39:02,860 --> 00:39:09,730
go so we've given a really broad range

00:39:06,640 --> 00:39:11,770
of talks from sort of a bunch of all

00:39:09,730 --> 00:39:15,520
like intro style talks and sort of

00:39:11,770 --> 00:39:17,290
longer tutorials to to more in-depth

00:39:15,520 --> 00:39:19,960
talks like Rob's concurrency talk from

00:39:17,290 --> 00:39:22,060
i/o this year and I think that all of

00:39:19,960 --> 00:39:23,530
them have have different kinds of

00:39:22,060 --> 00:39:25,210
benefits and I think the diversity is

00:39:23,530 --> 00:39:28,480
probably the best thing we did there but

00:39:25,210 --> 00:39:30,160
certainly I've done a lot of user groups

00:39:28,480 --> 00:39:32,620
that have been starting up in various

00:39:30,160 --> 00:39:34,180
cities around the world and doing

00:39:32,620 --> 00:39:36,670
tutorials like the one that I did at

00:39:34,180 --> 00:39:38,770
ASEAN yesterday I think that these these

00:39:36,670 --> 00:39:40,060
kind of ones where you're engaging

00:39:38,770 --> 00:39:43,150
directly with a small group of people

00:39:40,060 --> 00:39:45,300
you actually create go programmers like

00:39:43,150 --> 00:39:47,650
right there and then and I've had

00:39:45,300 --> 00:39:49,750
instances where I've given a tutorial in

00:39:47,650 --> 00:39:51,100
one city come back a year later and

00:39:49,750 --> 00:39:52,720
there have been people who said oh yeah

00:39:51,100 --> 00:39:56,260
we now use go at my company because I

00:39:52,720 --> 00:39:59,110
learned go you know in your tutorial and

00:39:56,260 --> 00:40:01,990
so you can't really underestimate the

00:39:59,110 --> 00:40:04,270
value of reaching people directly online

00:40:01,990 --> 00:40:06,160
stuff is great as well but I think

00:40:04,270 --> 00:40:07,840
that's really effective yeah Andrew

00:40:06,160 --> 00:40:10,930
mentioned a concurrency talk I gave a

00:40:07,840 --> 00:40:12,670
couple of weeks ago at i/o and I think

00:40:10,930 --> 00:40:15,310
we should probably do more of those

00:40:12,670 --> 00:40:17,470
because the response to a talk that was

00:40:15,310 --> 00:40:19,000
about a very sort of narrowly defined

00:40:17,470 --> 00:40:21,580
part of how the language is different

00:40:19,000 --> 00:40:24,100
from other languages generate a lot of

00:40:21,580 --> 00:40:25,900
positive response and go is definitely a

00:40:24,100 --> 00:40:27,730
different way of thinking from the way a

00:40:25,900 --> 00:40:29,200
lot of sort of standard programming

00:40:27,730 --> 00:40:31,150
environments work but it's a very

00:40:29,200 --> 00:40:33,220
productive one and we need to do more of

00:40:31,150 --> 00:40:34,300
a job of getting that message out and

00:40:33,220 --> 00:40:36,460
that's something that we're still trying

00:40:34,300 --> 00:40:37,630
to figure out how to do so Andrews right

00:40:36,460 --> 00:40:39,100
we've done a lot and there's been a lot

00:40:37,630 --> 00:40:42,310
there but there's there's always more to

00:40:39,100 --> 00:40:45,480
do so I think we're out of time so we've

00:40:42,310 --> 00:40:45,480
probably stop there thank you

00:40:51,940 --> 00:40:54,000

YouTube URL: https://www.youtube.com/watch?v=bj9T2c2Xk_s


