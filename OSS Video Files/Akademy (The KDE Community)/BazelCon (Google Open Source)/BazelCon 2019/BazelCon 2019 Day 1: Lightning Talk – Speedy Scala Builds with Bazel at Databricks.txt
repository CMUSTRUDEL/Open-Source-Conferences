Title: BazelCon 2019 Day 1: Lightning Talk â€“ Speedy Scala Builds with Bazel at Databricks
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Ahir Reddy, Databricks event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Ahir Reddy;
Captions: 
	00:00:01,070 --> 00:00:06,089
hello everyone welcome to the last

00:00:03,629 --> 00:00:07,350
session of lightning talk so today we

00:00:06,089 --> 00:00:09,900
have four Talk's today we have a little

00:00:07,350 --> 00:00:14,160
bit more time so I will allow like two

00:00:09,900 --> 00:00:17,340
questions Sarah one and the first talk

00:00:14,160 --> 00:00:21,539
is a hear from dinner breaks and it will

00:00:17,340 --> 00:00:23,670
be about it's a different title here

00:00:21,539 --> 00:00:25,590
sorry this title here says four years of

00:00:23,670 --> 00:00:27,930
wages which is about the time about the

00:00:25,590 --> 00:00:30,470
time I was on the project as well so

00:00:27,930 --> 00:00:33,510
sprinkle oh thank you very much

00:00:30,470 --> 00:00:36,030
hi so my name is here I'll be talking

00:00:33,510 --> 00:00:39,510
about basil at data bricks specifically

00:00:36,030 --> 00:00:41,460
how we manage our mono repo and our and

00:00:39,510 --> 00:00:43,800
how we integrate that with kubernetes so

00:00:41,460 --> 00:00:45,239
I guess we can just get started oh sorry

00:00:43,800 --> 00:00:47,250
so yeah just a little bit about

00:00:45,239 --> 00:00:49,530
ourselves so who are we

00:00:47,250 --> 00:00:51,480
we're the Apache or were the spark

00:00:49,530 --> 00:00:54,420
people or so I'm legally obligated to

00:00:51,480 --> 00:00:56,820
say Apache spark trademark people so

00:00:54,420 --> 00:01:00,510
what do we do we do data only like in a

00:00:56,820 --> 00:01:03,120
cloud so all of the buzz words AI ml Big

00:01:00,510 --> 00:01:05,760
Data distributed systems that's us

00:01:03,120 --> 00:01:08,070
so who are we the developer tools team

00:01:05,760 --> 00:01:10,350
well we're the people who make sure that

00:01:08,070 --> 00:01:11,850
every engineer at data bricks is having

00:01:10,350 --> 00:01:15,390
the best development experience of their

00:01:11,850 --> 00:01:17,310
career so what do we own concretely the

00:01:15,390 --> 00:01:21,390
different language tool chains Scala

00:01:17,310 --> 00:01:21,960
Python JavaScript JSON net C++ the list

00:01:21,390 --> 00:01:24,420
goes on

00:01:21,960 --> 00:01:25,860
never ends really and a lot of the

00:01:24,420 --> 00:01:30,689
tooling that we integrate this with

00:01:25,860 --> 00:01:36,299
github docker IntelliJ the code search

00:01:30,689 --> 00:01:38,640
CI systems etc so what does basil look

00:01:36,299 --> 00:01:40,560
like at data bricks well like I said

00:01:38,640 --> 00:01:43,409
everything lives in a mono repository

00:01:40,560 --> 00:01:46,079
it's multi-language this was one of the

00:01:43,409 --> 00:01:47,729
huge reasons for us adopting basil we've

00:01:46,079 --> 00:01:49,740
been a multi-language company from the

00:01:47,729 --> 00:01:51,210
beginning and we've been a mono repo

00:01:49,740 --> 00:01:53,700
company from the beginning for about six

00:01:51,210 --> 00:01:57,020
years now so we have 50,000 plus basil

00:01:53,700 --> 00:01:59,280
targets across Scala Java JavaScript

00:01:57,020 --> 00:02:02,009
JSON net which I'll talk a bit about

00:01:59,280 --> 00:02:04,409
later go Python in C++ and all of these

00:02:02,009 --> 00:02:06,210
are just about all of these are packaged

00:02:04,409 --> 00:02:09,000
into reproducible docker containers

00:02:06,210 --> 00:02:11,879
rules docker and that sort of represents

00:02:09,000 --> 00:02:13,250
the let's say the narrow waist between

00:02:11,879 --> 00:02:17,540
basil and

00:02:13,250 --> 00:02:20,840
kubernetes so kubernetes so a data

00:02:17,540 --> 00:02:22,520
breaks we manage about 1500 kubernetes

00:02:20,840 --> 00:02:24,980
clusters and these are running globally

00:02:22,520 --> 00:02:28,270
so for a variety of reasons we can't

00:02:24,980 --> 00:02:31,580
have one kubernetes cluster we have tons

00:02:28,270 --> 00:02:32,300
some for specific customers for various

00:02:31,580 --> 00:02:35,480
gos

00:02:32,300 --> 00:02:36,860
just have fault isolation so we've got a

00:02:35,480 --> 00:02:41,810
bunch of these and we managed them

00:02:36,860 --> 00:02:43,520
across both AWS and Azure so what I'm

00:02:41,810 --> 00:02:46,940
gonna talk a bit about today is how we

00:02:43,520 --> 00:02:49,100
sort of moved how we integrate basil and

00:02:46,940 --> 00:02:50,330
kubernetes to provide a nice developer

00:02:49,100 --> 00:02:53,290
experience and hopefully this is

00:02:50,330 --> 00:02:55,430
something it's a couple of pretty easy

00:02:53,290 --> 00:02:58,850
steps you can make to get here yourself

00:02:55,430 --> 00:03:01,340
so the traditional sort of deployment

00:02:58,850 --> 00:03:04,130
let's say to kubernetes involves

00:03:01,340 --> 00:03:07,490
building a docker image we do so with

00:03:04,130 --> 00:03:09,560
basil tagging the docker image pushing

00:03:07,490 --> 00:03:11,630
the docker image editing the json

00:03:09,560 --> 00:03:12,920
template and then finally applying the

00:03:11,630 --> 00:03:16,610
template and waiting for your change to

00:03:12,920 --> 00:03:18,380
take effect so this isn't so bad it's

00:03:16,610 --> 00:03:20,360
much better than the pre kubernetes

00:03:18,380 --> 00:03:22,489
world but it's still not the most

00:03:20,360 --> 00:03:25,340
seamless developer experience so really

00:03:22,489 --> 00:03:26,810
quickly after we rolled out basil and we

00:03:25,340 --> 00:03:29,000
started we on boarded everything to

00:03:26,810 --> 00:03:30,680
kubernetes we got requests like hey can

00:03:29,000 --> 00:03:33,440
this just be better why do I have to do

00:03:30,680 --> 00:03:35,750
all of this so what do we do well we

00:03:33,440 --> 00:03:37,150
made a really simple wrapper around coop

00:03:35,750 --> 00:03:40,700
CTL so if you're familiar with

00:03:37,150 --> 00:03:42,110
kubernetes coop CTL is basically the CLI

00:03:40,700 --> 00:03:44,140
that lets you do all of your

00:03:42,110 --> 00:03:46,310
interactions with kubernetes this is

00:03:44,140 --> 00:03:48,980
looking at the state of your services

00:03:46,310 --> 00:03:52,610
deployments pods editing them pushing

00:03:48,980 --> 00:03:54,350
new templates etc so what is coop CFG

00:03:52,610 --> 00:03:56,480
well it's a simple wrapper that just

00:03:54,350 --> 00:03:58,640
gives you everything coop CTL does plus

00:03:56,480 --> 00:04:00,680
a little bit of pre-processing so what

00:03:58,640 --> 00:04:04,880
we do is we just point coop CFG at a

00:04:00,680 --> 00:04:06,410
JSON or in our case a JSON net file I'll

00:04:04,880 --> 00:04:09,080
explain that in a moment and it

00:04:06,410 --> 00:04:11,090
basically automates this workflow it'll

00:04:09,080 --> 00:04:13,519
build the docker image it'll tag it

00:04:11,090 --> 00:04:15,530
it'll push it it'll inject it into your

00:04:13,519 --> 00:04:16,250
JSON @ template and it will apply it for

00:04:15,530 --> 00:04:19,130
you

00:04:16,250 --> 00:04:22,430
so the flow you end up with is I make a

00:04:19,130 --> 00:04:25,430
change to a line of code I either I can

00:04:22,430 --> 00:04:26,320
run coop CFG or I can have basil watch

00:04:25,430 --> 00:04:28,120
trigger it

00:04:26,320 --> 00:04:30,010
or a watcher trigger it and I make a

00:04:28,120 --> 00:04:33,040
change a line of code and it'll just

00:04:30,010 --> 00:04:34,570
appear in kubernetes basically you're

00:04:33,040 --> 00:04:37,870
just bounded by your compile and network

00:04:34,570 --> 00:04:40,900
speed at that point and that's

00:04:37,870 --> 00:04:43,120
essentially the entire thing so what is

00:04:40,900 --> 00:04:45,400
the net change that we have to do well

00:04:43,120 --> 00:04:47,530
this is like a traditional coop CTL

00:04:45,400 --> 00:04:49,960
template I really left out almost all of

00:04:47,530 --> 00:04:51,730
it the important piece is the image that

00:04:49,960 --> 00:04:54,400
you're pointing at so this just points

00:04:51,730 --> 00:04:56,620
to like the data bricks registry for our

00:04:54,400 --> 00:05:00,160
front-end web application so it's tagged

00:04:56,620 --> 00:05:02,320
to pull the latest the change is we just

00:05:00,160 --> 00:05:04,660
introduced this we replace that with a

00:05:02,320 --> 00:05:05,860
basil target this just points to a

00:05:04,660 --> 00:05:07,960
docker image that lives in our

00:05:05,860 --> 00:05:11,080
repository so I make a change of line of

00:05:07,960 --> 00:05:14,140
code I apply this template coupe CFG

00:05:11,080 --> 00:05:15,790
we'll look at it it'll find this basil

00:05:14,140 --> 00:05:21,730
target it'll build it push it and

00:05:15,790 --> 00:05:24,550
replace it with this for us and send it

00:05:21,730 --> 00:05:26,770
on its way so the workflow basically

00:05:24,550 --> 00:05:28,630
looks like edit source file coop CFG

00:05:26,770 --> 00:05:32,320
apply start playing with the service and

00:05:28,630 --> 00:05:34,900
pod and iterate from there and yeah

00:05:32,320 --> 00:05:37,600
that's basically entire workflow so

00:05:34,900 --> 00:05:39,130
maybe to take a step back just sort of

00:05:37,600 --> 00:05:40,900
this has just been part of data bricks

00:05:39,130 --> 00:05:45,510
larger journey with basil we've been

00:05:40,900 --> 00:05:48,880
using basil since the end of 2015 so

00:05:45,510 --> 00:05:51,370
it's been it's greatly improved our sort

00:05:48,880 --> 00:05:52,720
of developer productivity not just in

00:05:51,370 --> 00:05:55,840
workflows that involve docker and

00:05:52,720 --> 00:05:57,460
kubernetes but in pull requests in CI

00:05:55,840 --> 00:05:59,710
and it's really done a great job of

00:05:57,460 --> 00:06:02,310
basically democratizing our build so a

00:05:59,710 --> 00:06:04,750
lot of what I've described was built by

00:06:02,310 --> 00:06:05,920
engineers outside of the developer tools

00:06:04,750 --> 00:06:08,250
team it's something we eventually took

00:06:05,920 --> 00:06:10,630
ownership of but it's an example of

00:06:08,250 --> 00:06:12,070
democratizing our build and basically

00:06:10,630 --> 00:06:14,050
making it more accessible to more

00:06:12,070 --> 00:06:16,270
engineers to iterate on to build their

00:06:14,050 --> 00:06:20,260
own workflows and to eventually get

00:06:16,270 --> 00:06:23,860
those spread to the entire company so

00:06:20,260 --> 00:06:25,570
yeah that's basically everything I don't

00:06:23,860 --> 00:06:27,490
know in what format this will be sent

00:06:25,570 --> 00:06:29,830
out but we've written and talked about

00:06:27,490 --> 00:06:31,810
basil and kubernetes at length about

00:06:29,830 --> 00:06:33,400
different things I'm really into

00:06:31,810 --> 00:06:34,810
kubernetes and Scala things so if you

00:06:33,400 --> 00:06:36,580
have questions about that I'm more than

00:06:34,810 --> 00:06:39,780
happy to chat after but with that I

00:06:36,580 --> 00:06:39,780
guess we can go into QA

00:06:40,889 --> 00:06:46,650
cool any questions sure you're close by

00:06:51,060 --> 00:06:55,810
yes so the question is is is there

00:06:54,220 --> 00:06:57,759
versioning or are we just using the

00:06:55,810 --> 00:06:59,650
latest tagging image

00:06:57,759 --> 00:07:02,860
yeah I actually skipped over that part

00:06:59,650 --> 00:07:05,199
so what we do is we actually on the

00:07:02,860 --> 00:07:07,300
client side generate the content address

00:07:05,199 --> 00:07:09,850
of the image or about to push and we

00:07:07,300 --> 00:07:12,849
injected that so it's always guaranteed

00:07:09,850 --> 00:07:14,590
to be the source code that you've that

00:07:12,849 --> 00:07:17,410
you've compiled and built into the image

00:07:14,590 --> 00:07:19,150
so we just inject the shock to 256 so

00:07:17,410 --> 00:07:34,900
there's no collisions and kubernetes

00:07:19,150 --> 00:07:36,039
will pick it up yeah I actually think I

00:07:34,900 --> 00:07:38,259
do think it's quite similar to

00:07:36,039 --> 00:07:42,539
roller-skate AKA a tas i just i think

00:07:38,259 --> 00:07:44,590
the the if i understand those rules I

00:07:42,539 --> 00:07:47,169
think if I were to contrast I think

00:07:44,590 --> 00:07:50,080
where we approach it in a different way

00:07:47,169 --> 00:07:52,539
in that we take we basically said let's

00:07:50,080 --> 00:07:55,449
make one minor change to the AP the

00:07:52,539 --> 00:07:58,539
kubernetes api to inject basil whereas i

00:07:55,449 --> 00:08:01,150
believe in rules career Nettie's you are

00:07:58,539 --> 00:08:03,550
in full basil and to describe your

00:08:01,150 --> 00:08:05,260
kubernetes objects so in that you might

00:08:03,550 --> 00:08:08,139
have a basil target that represents a

00:08:05,260 --> 00:08:10,419
deployment a service a pod or as in our

00:08:08,139 --> 00:08:12,789
case all of that still lives in in json

00:08:10,419 --> 00:08:14,080
or yeah Mille and forms out to basil for

00:08:12,789 --> 00:08:15,030
this one image so that's the main

00:08:14,080 --> 00:08:18,250
difference

00:08:15,030 --> 00:08:24,319
cool all right thank you very much

00:08:18,250 --> 00:08:24,319

YouTube URL: https://www.youtube.com/watch?v=rq5CRMaqbq0


