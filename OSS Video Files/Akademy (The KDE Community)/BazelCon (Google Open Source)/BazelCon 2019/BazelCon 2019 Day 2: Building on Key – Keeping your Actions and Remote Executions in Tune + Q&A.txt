Title: BazelCon 2019 Day 2: Building on Key â€“ Keeping your Actions and Remote Executions in Tune + Q&A
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	George Gensure, Uber ATG event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: George Gensure;
Captions: 
	00:00:01,399 --> 00:00:08,280
so next up I just want to introduce

00:00:03,600 --> 00:00:11,160
George Genscher from uber AEG he's gonna

00:00:08,280 --> 00:00:13,049
be talking about building on key keeping

00:00:11,160 --> 00:00:17,719
your actions and remote executions in

00:00:13,049 --> 00:00:17,719
tune come on out George thank you I

00:00:18,170 --> 00:00:22,910
[Music]

00:00:20,630 --> 00:00:24,810
how's it going

00:00:22,910 --> 00:00:28,949
you're welcome to the remote execution

00:00:24,810 --> 00:00:32,340
block let's see

00:00:28,949 --> 00:00:35,280
are we moving on good the quickest slide

00:00:32,340 --> 00:00:37,829
ever about me I work at over 80 G I am

00:00:35,280 --> 00:00:40,649
the build team lead we're hiring of

00:00:37,829 --> 00:00:42,989
course and always looking to have more

00:00:40,649 --> 00:00:45,719
contributors to basil more contributes

00:00:42,989 --> 00:00:51,360
to build farm which I'm an author of and

00:00:45,719 --> 00:00:54,149
I'm a contributing member to the remote

00:00:51,360 --> 00:00:55,800
execution api's group as well we meet on

00:00:54,149 --> 00:00:58,289
a regular basis and try to discuss ways

00:00:55,800 --> 00:01:01,050
in which we can make these tools and

00:00:58,289 --> 00:01:03,830
make this protocol better for all of our

00:01:01,050 --> 00:01:06,930
users and for all of our use cases so

00:01:03,830 --> 00:01:07,950
I'm gonna take you on a I'm gonna tell

00:01:06,930 --> 00:01:10,140
you a story and then hopefully we're

00:01:07,950 --> 00:01:12,869
gonna take a little little trip together

00:01:10,140 --> 00:01:16,770
down the rabbit hole of how these things

00:01:12,869 --> 00:01:19,439
can happen so to set the stage I'm

00:01:16,770 --> 00:01:22,189
working in the morning and I open up my

00:01:19,439 --> 00:01:25,500
cool source C++ file and I make a really

00:01:22,189 --> 00:01:28,560
great addition and pop back into my

00:01:25,500 --> 00:01:30,270
shell and invoke my remote build because

00:01:28,560 --> 00:01:35,579
I have remote resources available to me

00:01:30,270 --> 00:01:37,170
and it starts up and I sit for the next

00:01:35,579 --> 00:01:39,329
seven hundred fifty seconds watching

00:01:37,170 --> 00:01:41,880
this thing tick maddeningly up and up

00:01:39,329 --> 00:01:44,189
and up and up trying to build the docker

00:01:41,880 --> 00:01:47,579
image that is to be produced and real

00:01:44,189 --> 00:01:51,180
and released into a remote system for

00:01:47,579 --> 00:01:53,159
the following day I've gotten tired of

00:01:51,180 --> 00:01:55,229
this I've I've finished my coffee I

00:01:53,159 --> 00:01:57,329
finished my breakfast so I have

00:01:55,229 --> 00:02:00,659
cancelled this operation and decided

00:01:57,329 --> 00:02:02,670
that there's no way that this remote

00:02:00,659 --> 00:02:05,610
action can be doing the right thing so

00:02:02,670 --> 00:02:07,259
this is a my relatively quizzical face I

00:02:05,610 --> 00:02:10,800
don't know why the the font came up a

00:02:07,259 --> 00:02:12,740
little bit different but the hypocrisy

00:02:10,800 --> 00:02:15,230
of this is that

00:02:12,740 --> 00:02:18,200
when I gave up on remote and whenever I

00:02:15,230 --> 00:02:20,540
just ran this action locally skipping my

00:02:18,200 --> 00:02:22,040
my remote my expensive remote

00:02:20,540 --> 00:02:23,990
infrastructure I was able to complete

00:02:22,040 --> 00:02:27,710
this thing with its one remaining

00:02:23,990 --> 00:02:29,900
process to finish in point zero three

00:02:27,710 --> 00:02:32,840
seconds total and the entire action

00:02:29,900 --> 00:02:36,680
itself only took about a hundredth of a

00:02:32,840 --> 00:02:39,770
second to complete why why why did this

00:02:36,680 --> 00:02:41,930
happen what was any of this information

00:02:39,770 --> 00:02:45,950
helpful for me and telling me what was

00:02:41,930 --> 00:02:48,440
going on if I can go when I look at an

00:02:45,950 --> 00:02:50,240
action or a counter ticking up on a

00:02:48,440 --> 00:02:51,470
remote I assume that there's meaningful

00:02:50,240 --> 00:02:53,750
work being performed I assume that

00:02:51,470 --> 00:02:58,880
there's some execution that's taking up

00:02:53,750 --> 00:03:00,830
all our time or that everything should

00:02:58,880 --> 00:03:02,240
just work the remote resources are much

00:03:00,830 --> 00:03:06,770
more powerful than my own what could

00:03:02,240 --> 00:03:11,120
possibly be the problem who's to blame

00:03:06,770 --> 00:03:13,250
is it the remote infrastructure is it my

00:03:11,120 --> 00:03:15,710
action is it possible that I have

00:03:13,250 --> 00:03:19,130
defined the incorrect action to use with

00:03:15,710 --> 00:03:21,890
my route and more generally are there

00:03:19,130 --> 00:03:23,930
characteristics of actions that mean

00:03:21,890 --> 00:03:26,060
that you don't want to execute them

00:03:23,930 --> 00:03:28,730
remotely is there a situation in which

00:03:26,060 --> 00:03:30,350
you don't ever need to call the remote

00:03:28,730 --> 00:03:33,080
system for your action because it's

00:03:30,350 --> 00:03:34,580
wrong to do so it's going to cost you

00:03:33,080 --> 00:03:36,170
more it's going to cost the company more

00:03:34,580 --> 00:03:38,270
it's going to cost the infrastructure

00:03:36,170 --> 00:03:43,930
more and in general it's going to take

00:03:38,270 --> 00:03:48,770
you longer to get back to work so the

00:03:43,930 --> 00:03:52,280
the the go-to phrase around my team is

00:03:48,770 --> 00:03:54,140
that the fact that the build is fast or

00:03:52,280 --> 00:03:55,850
the idea that the build is fast is the

00:03:54,140 --> 00:03:58,940
only thing that grants you the freedom

00:03:55,850 --> 00:04:01,040
to explore the only thing that grants

00:03:58,940 --> 00:04:03,290
you the freedom to look into what you

00:04:01,040 --> 00:04:05,900
want to look into the converse of that

00:04:03,290 --> 00:04:07,610
is when the build is slow that's a p0

00:04:05,900 --> 00:04:09,170
you don't get to spend any time on

00:04:07,610 --> 00:04:13,370
anything else except making the build

00:04:09,170 --> 00:04:14,810
faster so what we say to most of our

00:04:13,370 --> 00:04:16,790
engineers is you get to do anything you

00:04:14,810 --> 00:04:21,830
want as long as you don't make the build

00:04:16,790 --> 00:04:23,510
slower so a long in order to solve this

00:04:21,830 --> 00:04:26,240
riddle the riddle of the remote

00:04:23,510 --> 00:04:30,130
execution action that takes forever

00:04:26,240 --> 00:04:36,050
we're going to take a little trip into

00:04:30,130 --> 00:04:37,490
what the remote system has to do and how

00:04:36,050 --> 00:04:39,080
those things function and what basil is

00:04:37,490 --> 00:04:42,860
doing on your behalf this will be

00:04:39,080 --> 00:04:44,150
specific to basil I know a lot about how

00:04:42,860 --> 00:04:47,509
basil works mostly because I've worked

00:04:44,150 --> 00:04:51,199
in the remote execution client

00:04:47,509 --> 00:04:53,389
sequencing and I also know a little bit

00:04:51,199 --> 00:04:54,830
about how build farm works so I'll

00:04:53,389 --> 00:04:56,120
mostly be doing this from the

00:04:54,830 --> 00:04:59,570
perspective of that but it'll hopefully

00:04:56,120 --> 00:05:01,400
be all about sequencing and what events

00:04:59,570 --> 00:05:04,300
are emitted and what things are told to

00:05:01,400 --> 00:05:06,889
the client and then we're gonna try and

00:05:04,300 --> 00:05:11,090
distill those pieces of information into

00:05:06,889 --> 00:05:13,669
good and bad actions meaning what what

00:05:11,090 --> 00:05:15,289
can we characterize as something that

00:05:13,669 --> 00:05:17,300
would fall prey to these systems and

00:05:15,289 --> 00:05:19,639
then hopefully give you a little bit of

00:05:17,300 --> 00:05:21,830
tool it you know some tools for figuring

00:05:19,639 --> 00:05:24,770
out what we're doing something about

00:05:21,830 --> 00:05:26,389
this poor performance and hopefully

00:05:24,770 --> 00:05:28,789
explore a little bit of the roadmap down

00:05:26,389 --> 00:05:32,409
there down the road in terms of

00:05:28,789 --> 00:05:36,680
improving that tool lifecycle and

00:05:32,409 --> 00:05:39,400
exposing the ability for basil or other

00:05:36,680 --> 00:05:42,949
clients to react differently to

00:05:39,400 --> 00:05:44,659
scenarios like my individual action is

00:05:42,949 --> 00:05:49,220
taking too long my build is taking too

00:05:44,659 --> 00:05:52,270
long etc so a remote built invocation

00:05:49,220 --> 00:05:54,770
very simply looks like a basil build

00:05:52,270 --> 00:05:57,470
specifying a remote executor Thank You

00:05:54,770 --> 00:05:58,699
basil team for not making me specify my

00:05:57,470 --> 00:06:03,199
sixteen flags

00:05:58,699 --> 00:06:05,870
to do spawn strategies and the spawn

00:06:03,199 --> 00:06:09,020
strategy of remote comes in by default a

00:06:05,870 --> 00:06:11,840
spawn strategy means as a way in which

00:06:09,020 --> 00:06:15,770
we're going to call exec for all you

00:06:11,840 --> 00:06:18,110
Linux heads we define the remote spawn

00:06:15,770 --> 00:06:23,120
strategy as a procedure that is required

00:06:18,110 --> 00:06:25,039
for all actions by default that means

00:06:23,120 --> 00:06:26,300
that anytime you're going to end up with

00:06:25,039 --> 00:06:28,820
a spawn you're going to end up with a

00:06:26,300 --> 00:06:31,120
shell out from basil you're going to go

00:06:28,820 --> 00:06:35,990
through the remote execution strategy

00:06:31,120 --> 00:06:38,450
unless you do something different so

00:06:35,990 --> 00:06:39,860
I'll hopefully run through or I'll run

00:06:38,450 --> 00:06:42,919
through the remote cache

00:06:39,860 --> 00:06:45,759
execution basics very quickly the point

00:06:42,919 --> 00:06:49,340
of this is to compose an action that

00:06:45,759 --> 00:06:54,169
represents a unit of work that you want

00:06:49,340 --> 00:06:56,599
the remote system to do to try to map

00:06:54,169 --> 00:06:59,930
that action to work that has already

00:06:56,599 --> 00:07:02,060
been done via the action cache so

00:06:59,930 --> 00:07:05,330
retrieving a result that comes down out

00:07:02,060 --> 00:07:09,229
of that and then with that result that

00:07:05,330 --> 00:07:11,150
has individual files of outputs that are

00:07:09,229 --> 00:07:13,099
referenceable via the caste the content

00:07:11,150 --> 00:07:17,090
addressable storage download those

00:07:13,099 --> 00:07:20,469
results so we go action digest that

00:07:17,090 --> 00:07:24,139
action to make a key get a result and

00:07:20,469 --> 00:07:26,629
then take the result files the result

00:07:24,139 --> 00:07:29,210
content and download and basil will

00:07:26,629 --> 00:07:30,979
repeat this as often as it can as

00:07:29,210 --> 00:07:33,979
quickly as it can in order to get the

00:07:30,979 --> 00:07:37,250
entire set of action outputs for your

00:07:33,979 --> 00:07:40,639
entire bill graph so what happens

00:07:37,250 --> 00:07:43,580
whenever we miss the cache in remote

00:07:40,639 --> 00:07:46,879
execution a secondary system kicks in

00:07:43,580 --> 00:07:48,529
that says we are going to go through the

00:07:46,879 --> 00:07:49,909
procedure of actually executing this

00:07:48,529 --> 00:07:51,440
action and because we have remote

00:07:49,909 --> 00:07:56,150
resources available to us we're going to

00:07:51,440 --> 00:07:57,919
try and execute that remotely the fort

00:07:56,150 --> 00:07:59,509
for having composed the action we knew

00:07:57,919 --> 00:08:01,550
about all of our inputs we knew about

00:07:59,509 --> 00:08:04,099
all of the individual files that went

00:08:01,550 --> 00:08:06,500
into our piece of work that needed to be

00:08:04,099 --> 00:08:08,210
done so we then asked the remote system

00:08:06,500 --> 00:08:09,650
do you have all of this so that you can

00:08:08,210 --> 00:08:12,560
then perform my work for me

00:08:09,650 --> 00:08:15,349
it tells you that it does or does not

00:08:12,560 --> 00:08:18,199
for some mapping of digests and then you

00:08:15,349 --> 00:08:20,360
upload those results after you've

00:08:18,199 --> 00:08:22,729
successfully ensured that the remote

00:08:20,360 --> 00:08:25,279
system has those inputs you then execute

00:08:22,729 --> 00:08:27,139
the action and I've got little fancy

00:08:25,279 --> 00:08:29,150
diagrams here associated with we're

00:08:27,139 --> 00:08:31,009
sending an execute request and then we

00:08:29,150 --> 00:08:34,579
eventually get an execute response back

00:08:31,009 --> 00:08:37,370
from that remote system then we download

00:08:34,579 --> 00:08:39,409
the results that we retrieved from that

00:08:37,370 --> 00:08:42,199
act that execute response which contains

00:08:39,409 --> 00:08:43,729
an action result and put them on to the

00:08:42,199 --> 00:08:45,620
local file system and continue on the

00:08:43,729 --> 00:08:47,690
same way that we did before hopefully

00:08:45,620 --> 00:08:51,680
those results have also been cached on

00:08:47,690 --> 00:08:54,740
the remote side so

00:08:51,680 --> 00:08:57,880
that means that we're going through a

00:08:54,740 --> 00:09:01,100
fairly fancy Rube Goldberg machine

00:08:57,880 --> 00:09:04,460
associated with one actions execution

00:09:01,100 --> 00:09:10,339
and I've got a lot of actions inside of

00:09:04,460 --> 00:09:12,640
my build so understanding that from end

00:09:10,339 --> 00:09:16,010
to end the single action has to perform

00:09:12,640 --> 00:09:20,600
composition of those those units of work

00:09:16,010 --> 00:09:21,950
that takes some cost we have to go fetch

00:09:20,600 --> 00:09:25,820
them or try to fetch them from the

00:09:21,950 --> 00:09:28,220
action cache we then need to possibly go

00:09:25,820 --> 00:09:32,480
and check the upload missing blobs or

00:09:28,220 --> 00:09:35,839
check for missing blobs perform some

00:09:32,480 --> 00:09:38,800
number of uploads then perform an

00:09:35,839 --> 00:09:41,089
execute and then perform the downloads

00:09:38,800 --> 00:09:44,000
each one of these things having been

00:09:41,089 --> 00:09:47,930
broken up serially by the workers inside

00:09:44,000 --> 00:09:49,760
of Basel to perform your action this is

00:09:47,930 --> 00:09:52,580
in comparison to the default console

00:09:49,760 --> 00:09:58,550
output doesn't it look a little bit

00:09:52,580 --> 00:10:00,620
sparse now I've got 30 270 seconds that

00:09:58,550 --> 00:10:02,690
have been executed on this action and I

00:10:00,620 --> 00:10:05,720
don't know which one of these phases

00:10:02,690 --> 00:10:07,370
he's stuck in he is definitely stuck in

00:10:05,720 --> 00:10:08,930
one of them but there's no clear

00:10:07,370 --> 00:10:09,770
indication from the command line as to

00:10:08,930 --> 00:10:13,100
what's going on here

00:10:09,770 --> 00:10:17,950
are we downloading are we queued do we

00:10:13,100 --> 00:10:21,589
not have network link what's going on

00:10:17,950 --> 00:10:23,870
so there's a great keynote discussion

00:10:21,589 --> 00:10:26,570
yesterday about embracing your failures

00:10:23,870 --> 00:10:29,150
and I don't want to say that I don't

00:10:26,570 --> 00:10:30,290
have enough failures but sometimes I'd

00:10:29,150 --> 00:10:32,180
like to go looking for trouble

00:10:30,290 --> 00:10:33,589
so I like to translate these things that

00:10:32,180 --> 00:10:35,240
are successes these things that are

00:10:33,589 --> 00:10:37,370
eventual downloads these things that are

00:10:35,240 --> 00:10:39,589
slow actions they're you know they're

00:10:37,370 --> 00:10:40,880
completing but they're slow I want to

00:10:39,589 --> 00:10:46,279
make them my failures I want to make

00:10:40,880 --> 00:10:48,880
them my target so each component of that

00:10:46,279 --> 00:10:53,180
execution process that remote execution

00:10:48,880 --> 00:10:55,790
procedure for that action represents a

00:10:53,180 --> 00:10:58,810
unique resource consumption point either

00:10:55,790 --> 00:11:02,180
it's consuming RAM or it's consuming CPU

00:10:58,810 --> 00:11:04,970
or it's consuming remote CPU or it's

00:11:02,180 --> 00:11:06,770
consuming bandwidth or it's consuming

00:11:04,970 --> 00:11:08,330
the ability to write out to the file

00:11:06,770 --> 00:11:10,400
system every single one of these things

00:11:08,330 --> 00:11:14,140
layers in and you're all engineers so

00:11:10,400 --> 00:11:16,610
you know where to look for problems but

00:11:14,140 --> 00:11:18,890
in terms of giving you introspection

00:11:16,610 --> 00:11:21,410
into what these things are doing without

00:11:18,890 --> 00:11:24,020
necessarily providing you the perfect

00:11:21,410 --> 00:11:25,940
tool to to to slice and dice up your

00:11:24,020 --> 00:11:28,370
actions as they're running moreover

00:11:25,940 --> 00:11:30,380
you're supporting other engineers they

00:11:28,370 --> 00:11:32,210
don't always have this stuff turned on

00:11:30,380 --> 00:11:33,440
they don't always have the right logging

00:11:32,210 --> 00:11:37,270
they don't always have the right

00:11:33,440 --> 00:11:39,350
information either available to them or

00:11:37,270 --> 00:11:40,880
enabled in their in their environment

00:11:39,350 --> 00:11:43,940
maybe it's too noisy maybe they didn't

00:11:40,880 --> 00:11:47,120
really want it to begin with resources

00:11:43,940 --> 00:11:49,420
in this situation our exhaustible this

00:11:47,120 --> 00:11:54,500
is why I play Starcraft this is why I

00:11:49,420 --> 00:11:56,030
enjoy running through electronics and

00:11:54,500 --> 00:11:57,770
figuring out how I can how I can

00:11:56,030 --> 00:11:58,730
transfer things from one machine to

00:11:57,770 --> 00:12:01,340
another very fast

00:11:58,730 --> 00:12:03,380
I will exhaust the resources that are

00:12:01,340 --> 00:12:05,240
being consumed eventually associated

00:12:03,380 --> 00:12:07,160
with each one of these builds whether

00:12:05,240 --> 00:12:10,250
it's my bandwidth or my CPU or the

00:12:07,160 --> 00:12:11,810
remote machines or the remote queue they

00:12:10,250 --> 00:12:15,860
will run out or rather they will

00:12:11,810 --> 00:12:18,200
suddenly not be available to me and for

00:12:15,860 --> 00:12:20,570
each one of these items the inputs or

00:12:18,200 --> 00:12:24,740
rather the size of the inputs scale the

00:12:20,570 --> 00:12:27,380
resource consumption add to with a

00:12:24,740 --> 00:12:33,860
degree to what you do in most cases

00:12:27,380 --> 00:12:36,110
either or I should say this whether it

00:12:33,860 --> 00:12:38,090
is a literal translation of an input

00:12:36,110 --> 00:12:42,560
size whether you've got a 10 gig tar

00:12:38,090 --> 00:12:46,120
input for a 10 gig tar.gz output or

00:12:42,560 --> 00:12:50,600
you've got a 10 gig tar input for a

00:12:46,120 --> 00:12:54,800
sha-1 output or if you've got a 1

00:12:50,600 --> 00:12:56,630
kilobyte input for a 10 gig output

00:12:54,800 --> 00:12:57,950
you've still got inputs in between even

00:12:56,630 --> 00:12:59,420
if you've just got a program that's

00:12:57,950 --> 00:13:02,570
generating random bytes to fill up with

00:12:59,420 --> 00:13:04,700
those 10 gigs those inputs always scale

00:13:02,570 --> 00:13:07,430
the resource consumption at each one of

00:13:04,700 --> 00:13:09,290
those levels so they are the determining

00:13:07,430 --> 00:13:12,080
factor you can make actions that run

00:13:09,290 --> 00:13:14,030
very quickly everyone is capable of this

00:13:12,080 --> 00:13:15,589
but it's possible that the action

00:13:14,030 --> 00:13:17,960
workload that you're requesting just

00:13:15,589 --> 00:13:18,680
isn't well suited to the particular

00:13:17,960 --> 00:13:20,300
resource

00:13:18,680 --> 00:13:22,279
or the particular resource exhaustion

00:13:20,300 --> 00:13:25,460
that you're gonna experience at each one

00:13:22,279 --> 00:13:28,100
of these levels and then beyond your

00:13:25,460 --> 00:13:30,620
control or not necessarily beyond your

00:13:28,100 --> 00:13:32,899
control but certainly making you subject

00:13:30,620 --> 00:13:34,670
to what the current situation is there

00:13:32,899 --> 00:13:35,870
are environmental factors that limit the

00:13:34,670 --> 00:13:37,940
throughput of each component

00:13:35,870 --> 00:13:43,459
who here builds while watching videos on

00:13:37,940 --> 00:13:45,649
YouTube guess what that consumes your

00:13:43,459 --> 00:13:49,600
bandwidth your memory your resources its

00:13:45,649 --> 00:13:52,839
Chrome so it's like five gigs right the

00:13:49,600 --> 00:13:55,730
at each layer of this thing there are

00:13:52,839 --> 00:13:57,110
competitive factors either competitive

00:13:55,730 --> 00:14:01,190
or environmental factors that are gonna

00:13:57,110 --> 00:14:05,930
limit what you're doing my uplink to AWS

00:14:01,190 --> 00:14:08,440
is degraded my neighbor is attached to

00:14:05,930 --> 00:14:10,580
my same switch and he's bottlenecking me

00:14:08,440 --> 00:14:13,550
these are sort of the noise in the

00:14:10,580 --> 00:14:15,800
system and you can take them or leave

00:14:13,550 --> 00:14:17,390
them in terms of trying to make

00:14:15,800 --> 00:14:19,700
decisions about them but I would say

00:14:17,390 --> 00:14:22,040
that the decisions are not endemic to

00:14:19,700 --> 00:14:24,080
your actions they might be the they

00:14:22,040 --> 00:14:25,820
might change the decision for the moment

00:14:24,080 --> 00:14:29,660
but they don't necessarily change the

00:14:25,820 --> 00:14:32,330
decision for your definition so we're

00:14:29,660 --> 00:14:35,140
going to put it to a decision this is a

00:14:32,330 --> 00:14:38,060
thought exercise as well as a lesson in

00:14:35,140 --> 00:14:40,459
how we're gonna do this when arch when

00:14:38,060 --> 00:14:42,440
once we know our choice has to occur

00:14:40,459 --> 00:14:45,560
once we know at what point along that

00:14:42,440 --> 00:14:47,930
procedure we have to do something to

00:14:45,560 --> 00:14:50,990
make the choice to execute remotely or

00:14:47,930 --> 00:14:53,450
locally and that may include giving up

00:14:50,990 --> 00:14:55,490
on the process and flipping back to

00:14:53,450 --> 00:14:57,260
local or giving up on the process of

00:14:55,490 --> 00:14:59,450
restarting it or giving up on the

00:14:57,260 --> 00:15:01,550
process and failing the build

00:14:59,450 --> 00:15:03,110
maybe there's a bad circumstance here

00:15:01,550 --> 00:15:07,100
that the user doesn't want to be

00:15:03,110 --> 00:15:10,730
subjected to are there any guaranteed

00:15:07,100 --> 00:15:14,450
scenarios that cut out the possibility

00:15:10,730 --> 00:15:16,190
of continuing on or making the remote

00:15:14,450 --> 00:15:18,350
execution and there's an additional

00:15:16,190 --> 00:15:21,620
thing here which is you can make this

00:15:18,350 --> 00:15:24,649
decision in design you can make it far

00:15:21,620 --> 00:15:26,480
before that component phase even starts

00:15:24,649 --> 00:15:29,060
if you have a priori knowledge of how

00:15:26,480 --> 00:15:31,550
each one of them has performed in the

00:15:29,060 --> 00:15:32,410
past I know that this action takes

00:15:31,550 --> 00:15:33,579
forever

00:15:32,410 --> 00:15:36,279
therefore I want to make a decision

00:15:33,579 --> 00:15:39,579
about executing a remotely and I want to

00:15:36,279 --> 00:15:40,779
say now at least for the time being at

00:15:39,579 --> 00:15:42,639
least based on the current conditions

00:15:40,779 --> 00:15:47,199
these things are always subject to time

00:15:42,639 --> 00:15:50,680
but do we have to come up with a generic

00:15:47,199 --> 00:15:52,839
perfect answer and I say no and can this

00:15:50,680 --> 00:15:54,129
thing be automated and I say yes

00:15:52,839 --> 00:15:57,310
big fan of automation in general

00:15:54,129 --> 00:16:00,040
especially when it pertains to making

00:15:57,310 --> 00:16:04,060
split decisions about whether or not to

00:16:00,040 --> 00:16:06,220
subject your users to more pain so I've

00:16:04,060 --> 00:16:08,410
got a whole series of slides here that's

00:16:06,220 --> 00:16:11,410
going to break down what contributes to

00:16:08,410 --> 00:16:13,329
basal pain or what contributes to remote

00:16:11,410 --> 00:16:14,889
action execution pain and I'm gonna try

00:16:13,329 --> 00:16:16,410
and breeze through them because I want

00:16:14,889 --> 00:16:21,040
to get to the end where this neat stuff

00:16:16,410 --> 00:16:23,410
the the basic concurrent execution model

00:16:21,040 --> 00:16:25,569
works by starting up based on your

00:16:23,410 --> 00:16:27,939
command line your job specification and

00:16:25,569 --> 00:16:29,500
Basel starts any of these workers to

00:16:27,939 --> 00:16:31,060
produce the concurrency that means that

00:16:29,500 --> 00:16:32,259
there are n worker slots we have one

00:16:31,060 --> 00:16:34,959
thread per worker we have many

00:16:32,259 --> 00:16:36,670
concurrent uploads and downloads inside

00:16:34,959 --> 00:16:38,800
of that action sequence per thread and

00:16:36,670 --> 00:16:40,240
we have one blocking execution that is

00:16:38,800 --> 00:16:41,740
the sequence of operations that we're

00:16:40,240 --> 00:16:43,720
going to perform and whether that's

00:16:41,740 --> 00:16:45,610
remote or local execution that happens

00:16:43,720 --> 00:16:47,939
per thread there is no concurrency

00:16:45,610 --> 00:16:49,959
beyond this when you talk about basil

00:16:47,939 --> 00:16:53,380
there's only upload or download

00:16:49,959 --> 00:16:58,930
concurrency and blocking execution or

00:16:53,380 --> 00:17:00,370
rather end job concurrency the

00:16:58,930 --> 00:17:03,120
composition cost is influenced by a

00:17:00,370 --> 00:17:07,839
number of factors basil takes all of the

00:17:03,120 --> 00:17:11,199
stated source and intermediate output

00:17:07,839 --> 00:17:14,199
artifacts and has to compose a Merkel

00:17:11,199 --> 00:17:15,789
tree on the behalf of the action to be

00:17:14,199 --> 00:17:18,189
performed locally or sorry to be

00:17:15,789 --> 00:17:19,900
performed remotely or even be fetched

00:17:18,189 --> 00:17:22,179
from the cache you pay this penalty

00:17:19,900 --> 00:17:24,939
every single time you execute whether

00:17:22,179 --> 00:17:28,530
you are doing a remote execution or a

00:17:24,939 --> 00:17:31,000
remote cache hit these cache misses

00:17:28,530 --> 00:17:32,980
pertain to file system interactions they

00:17:31,000 --> 00:17:34,900
have to be static they have to be read

00:17:32,980 --> 00:17:36,250
and they have to be digested if we don't

00:17:34,900 --> 00:17:39,120
have all the information that goes along

00:17:36,250 --> 00:17:41,320
with them those trees are composed

00:17:39,120 --> 00:17:43,720
individually for each worker remember I

00:17:41,320 --> 00:17:45,420
said the concurrency doesn't doesn't

00:17:43,720 --> 00:17:48,210
shift and doesn't does

00:17:45,420 --> 00:17:50,480
go off in different directions for for

00:17:48,210 --> 00:17:52,680
different purposes for the most part the

00:17:50,480 --> 00:17:55,200
Merkel tree has to be composed in

00:17:52,680 --> 00:17:56,700
sequence and is usually not shared

00:17:55,200 --> 00:17:58,260
between any other workers because the

00:17:56,700 --> 00:18:01,140
synchronization primitives for that are

00:17:58,260 --> 00:18:03,780
fairly difficult you're essentially

00:18:01,140 --> 00:18:06,540
maintaining a very large shared tree of

00:18:03,780 --> 00:18:08,850
file contents of input input contents

00:18:06,540 --> 00:18:10,320
and there's it's a difficult problem to

00:18:08,850 --> 00:18:13,200
try to keep those things synchronized

00:18:10,320 --> 00:18:15,810
such that we don't overuse memory and we

00:18:13,200 --> 00:18:18,330
can safely evict some of those at some

00:18:15,810 --> 00:18:19,560
point the actions and the commands and

00:18:18,330 --> 00:18:21,660
the collections of digests are all

00:18:19,560 --> 00:18:24,240
retained per worker that means they're

00:18:21,660 --> 00:18:26,220
in RAM they're sitting in RAM in the

00:18:24,240 --> 00:18:28,470
worker for each one of your end jobs

00:18:26,220 --> 00:18:31,680
that you execute suddenly that you know

00:18:28,470 --> 00:18:35,310
- - job's 3000 is looking a little bit

00:18:31,680 --> 00:18:37,350
thin in terms of resources the find

00:18:35,310 --> 00:18:38,850
missing blobs request is the sort of the

00:18:37,350 --> 00:18:41,190
nail in the coffin here it's the last

00:18:38,850 --> 00:18:42,990
request that you have to make after

00:18:41,190 --> 00:18:45,420
missing a cache where you have to

00:18:42,990 --> 00:18:46,860
compose a gigantic list and I'm talking

00:18:45,420 --> 00:18:49,350
gigantic because I've got tens of

00:18:46,860 --> 00:18:51,750
thousands of inputs in in some of my

00:18:49,350 --> 00:18:54,560
actions most of them are repeated but I

00:18:51,750 --> 00:18:56,820
have to ask about this every single time

00:18:54,560 --> 00:18:59,880
to the remote system to determine

00:18:56,820 --> 00:19:02,790
whether or not we can execute and again

00:18:59,880 --> 00:19:06,090
memory so I put together a special slide

00:19:02,790 --> 00:19:08,970
on memory this is the nature of memory

00:19:06,090 --> 00:19:12,030
in Java Java is what basil is written in

00:19:08,970 --> 00:19:14,970
if you hadn't guessed that already heap

00:19:12,030 --> 00:19:16,290
is all of Java's useful memory there's

00:19:14,970 --> 00:19:17,820
almost nothing stored on the stack you

00:19:16,290 --> 00:19:19,610
wouldn't want store a store anything on

00:19:17,820 --> 00:19:22,860
the stack the stack looks like you know

00:19:19,610 --> 00:19:24,960
128 or and you know n concurrent jobs

00:19:22,860 --> 00:19:28,680
worth of storage so that we can call

00:19:24,960 --> 00:19:31,800
into different functions all of remote

00:19:28,680 --> 00:19:34,050
executions content is retained in memory

00:19:31,800 --> 00:19:36,180
for each one of these workers that means

00:19:34,050 --> 00:19:38,280
if you want to do more remote stuff or

00:19:36,180 --> 00:19:40,860
you have more inputs or you have more

00:19:38,280 --> 00:19:42,570
outputs excluding the output content

00:19:40,860 --> 00:19:43,680
most of that's just written straight the

00:19:42,570 --> 00:19:46,560
disk

00:19:43,680 --> 00:19:50,520
you are going to consume memory and in

00:19:46,560 --> 00:19:51,960
Java memory at the top of the heap when

00:19:50,520 --> 00:19:55,070
you've exhausted all your size and

00:19:51,960 --> 00:19:57,720
everybody here has run the the the - MX

00:19:55,070 --> 00:19:59,070
option to increase the the available

00:19:57,720 --> 00:20:01,830
basal memory

00:19:59,070 --> 00:20:04,530
for their JVM at the top of the heap

00:20:01,830 --> 00:20:07,290
that memory translates into CPU because

00:20:04,530 --> 00:20:09,690
the GC starts kicking in and starts

00:20:07,290 --> 00:20:11,850
spitting out things from Eden and starts

00:20:09,690 --> 00:20:13,140
spitting out things from the the old

00:20:11,850 --> 00:20:17,100
collections of things that I don't

00:20:13,140 --> 00:20:19,800
really know about for GC and the you can

00:20:17,100 --> 00:20:21,900
you can roughly say that memory is CPU

00:20:19,800 --> 00:20:25,260
in Java as you reach the top of that

00:20:21,900 --> 00:20:27,390
heat and a very unequal ratio when I get

00:20:25,260 --> 00:20:30,240
to the end of builds in fact we've we've

00:20:27,390 --> 00:20:32,040
added a special option to record this

00:20:30,240 --> 00:20:34,470
information from Java and parse it out

00:20:32,040 --> 00:20:37,200
and print it out for our users we tell

00:20:34,470 --> 00:20:39,330
them at the end of our build your 300

00:20:37,200 --> 00:20:46,740
second build spent about 40 seconds in

00:20:39,330 --> 00:20:48,930
g1 GC full GC these next couple of

00:20:46,740 --> 00:20:52,380
slides are more about how the remote

00:20:48,930 --> 00:20:55,110
execution system itself wants to see

00:20:52,380 --> 00:20:57,570
data this is not an exhaustive list of

00:20:55,110 --> 00:21:00,510
what the preconditions must be satisfied

00:20:57,570 --> 00:21:03,440
for on the road side but hopefully this

00:21:00,510 --> 00:21:07,500
is a view into something that we can

00:21:03,440 --> 00:21:11,190
perform useful experiments with in terms

00:21:07,500 --> 00:21:13,950
of making your build faster from an

00:21:11,190 --> 00:21:16,890
interception standpoint and I'll explain

00:21:13,950 --> 00:21:19,500
what that means I promise the basically

00:21:16,890 --> 00:21:21,750
the remote basil side wants to see all

00:21:19,500 --> 00:21:24,210
of your inputs available to it at the

00:21:21,750 --> 00:21:27,330
time that you start your execution this

00:21:24,210 --> 00:21:29,250
is sort of hard to get around right we

00:21:27,330 --> 00:21:30,900
need to know about all of those files we

00:21:29,250 --> 00:21:32,160
need to know about that entire tree of

00:21:30,900 --> 00:21:35,540
inputs we need to know about that

00:21:32,160 --> 00:21:38,160
command before you start your execution

00:21:35,540 --> 00:21:39,930
the the missing contests have to be

00:21:38,160 --> 00:21:42,540
uploaded which means they have to be

00:21:39,930 --> 00:21:45,390
read completely I see another resource

00:21:42,540 --> 00:21:47,400
possible here I see in the two resources

00:21:45,390 --> 00:21:49,440
possible depending on how bad your

00:21:47,400 --> 00:21:51,270
readers implemented but my guess is that

00:21:49,440 --> 00:21:53,640
it's implemented pretty well and we're

00:21:51,270 --> 00:21:56,040
gonna suck in all of the content for all

00:21:53,640 --> 00:21:59,520
of the inputs that we had missing on the

00:21:56,040 --> 00:22:01,830
system completely for an upload we're

00:21:59,520 --> 00:22:03,270
gonna consume and number of I ops based

00:22:01,830 --> 00:22:08,100
off of your source file system which

00:22:03,270 --> 00:22:11,210
might not be too fast so let's get into

00:22:08,100 --> 00:22:13,950
what that cost means

00:22:11,210 --> 00:22:15,840
obviously or I hope obviously the upload

00:22:13,950 --> 00:22:17,700
cost is going to consume bandwidth to

00:22:15,840 --> 00:22:19,940
your ammonia M point in addition to

00:22:17,700 --> 00:22:22,590
consuming the i/o on your local disk

00:22:19,940 --> 00:22:25,320
hopefully those are being consumed in

00:22:22,590 --> 00:22:27,240
some sort of a streaming fashion so that

00:22:25,320 --> 00:22:28,760
we're either we either have these these

00:22:27,240 --> 00:22:31,950
pieces of content ready to be uploaded

00:22:28,760 --> 00:22:33,270
or we're performing them in a way that

00:22:31,950 --> 00:22:35,520
isn't going to put a lot of stress on

00:22:33,270 --> 00:22:37,740
memory but these are subjects

00:22:35,520 --> 00:22:39,030
individually to the remote timeout and

00:22:37,740 --> 00:22:41,100
if you haven't played with the remote

00:22:39,030 --> 00:22:43,860
timeout play with the remote timeout

00:22:41,100 --> 00:22:45,780
make sure that you make these requests

00:22:43,860 --> 00:22:47,520
come in to you as fast as possible the

00:22:45,780 --> 00:22:50,070
default rote remote timeout inside the

00:22:47,520 --> 00:22:52,440
basil is 60 seconds does anybody know

00:22:50,070 --> 00:22:57,780
what the recommended default remote

00:22:52,440 --> 00:23:01,350
timeout is for RBE instances 30 seconds

00:22:57,780 --> 00:23:02,640
anybody else all right this might be

00:23:01,350 --> 00:23:05,610
going back aways and I might be wrong

00:23:02,640 --> 00:23:09,450
about this but the number is 3600

00:23:05,610 --> 00:23:12,539
seconds each action execution is

00:23:09,450 --> 00:23:13,950
guaranteed based on the default config

00:23:12,539 --> 00:23:17,190
that was distributed with RBE as a

00:23:13,950 --> 00:23:19,590
recommended environment to take up to an

00:23:17,190 --> 00:23:24,080
hour in order to accomplish its goals

00:23:19,590 --> 00:23:30,090
that means that it was dealing with

00:23:24,080 --> 00:23:34,020
possibly N and by M in terms of n

00:23:30,090 --> 00:23:36,289
concurrent actions by M missing inputs

00:23:34,020 --> 00:23:39,480
because these things are uploaded in

00:23:36,289 --> 00:23:41,100
parallel the basil client tries to

00:23:39,480 --> 00:23:42,809
upload these things in parallel if you

00:23:41,100 --> 00:23:44,850
have 10 inputs that are missing on an

00:23:42,809 --> 00:23:48,630
action it initiates 10 requests

00:23:44,850 --> 00:23:52,320
immediately that worker excuse me is

00:23:48,630 --> 00:23:54,000
performing 10 uploads concurrently does

00:23:52,320 --> 00:23:55,909
your bandwidth look like it's thinning

00:23:54,000 --> 00:24:00,030
out a little bit more as well

00:23:55,909 --> 00:24:02,850
specifically excuse me in the case of

00:24:00,030 --> 00:24:08,039
extremely large builds you can very

00:24:02,850 --> 00:24:10,230
quickly exhaust the ability to to

00:24:08,039 --> 00:24:14,070
complete your upload within these

00:24:10,230 --> 00:24:15,390
individual remote timeouts the the

00:24:14,070 --> 00:24:17,970
uploads themselves actually happen in

00:24:15,390 --> 00:24:20,940
very small chunks you don't spend a lot

00:24:17,970 --> 00:24:22,530
of time waiting on network i/o in order

00:24:20,940 --> 00:24:23,680
to just perform one particular action

00:24:22,530 --> 00:24:27,280
but

00:24:23,680 --> 00:24:29,380
hmm excuse me there are a whole lot of

00:24:27,280 --> 00:24:31,540
iOS happening here a whole lot of

00:24:29,380 --> 00:24:33,820
individual communications there are a

00:24:31,540 --> 00:24:36,400
whole lot the Grace Hopper likes to use

00:24:33,820 --> 00:24:37,840
the the how many milliseconds in terms

00:24:36,400 --> 00:24:38,830
of distance there are from here to the

00:24:37,840 --> 00:24:42,220
satellite that you want to communicate

00:24:38,830 --> 00:24:45,760
with the 16k is is my is my lingua

00:24:42,220 --> 00:24:47,440
franca and your 3 gig dockerfile is the

00:24:45,760 --> 00:24:49,090
communication that I want to make to the

00:24:47,440 --> 00:24:50,800
satellite there are a whole lot of

00:24:49,090 --> 00:24:52,390
transfers that need to happen here and

00:24:50,800 --> 00:24:56,170
they're gonna be happening at the same

00:24:52,390 --> 00:24:57,670
time as all of the other uploads I

00:24:56,170 --> 00:25:01,930
apologize I thought I had my cold done

00:24:57,670 --> 00:25:03,610
last week so as I said play with remote

00:25:01,930 --> 00:25:04,930
deadlines you play with remote deadlines

00:25:03,610 --> 00:25:07,720
and you can't get your uploads done

00:25:04,930 --> 00:25:10,180
completely I want to know about it I'm

00:25:07,720 --> 00:25:11,860
very curious to see you know when you

00:25:10,180 --> 00:25:13,900
tweak these things when you stop making

00:25:11,860 --> 00:25:15,490
them when you stop making yourself

00:25:13,900 --> 00:25:19,150
subject to them and you start making

00:25:15,490 --> 00:25:22,390
yourself in control of what the remote

00:25:19,150 --> 00:25:24,160
is really capable of doing inside of

00:25:22,390 --> 00:25:25,360
reasonable time frames you might get

00:25:24,160 --> 00:25:26,950
some different answers you might get

00:25:25,360 --> 00:25:29,020
some loud seg faults you might get some

00:25:26,950 --> 00:25:35,770
stack traces hopefully I can improve

00:25:29,020 --> 00:25:37,180
that as well so the upload cost so I've

00:25:35,770 --> 00:25:39,940
given you a lot of bad information about

00:25:37,180 --> 00:25:41,890
the upload but the good on the upload

00:25:39,940 --> 00:25:43,950
side is that basale eliminates all

00:25:41,890 --> 00:25:48,370
redundant uploads

00:25:43,950 --> 00:25:51,490
for an entire invocation with the

00:25:48,370 --> 00:25:53,650
exception of an entry that you tried to

00:25:51,490 --> 00:25:57,400
put into the cast disappearing very

00:25:53,650 --> 00:26:00,610
quickly after you uploaded it basil will

00:25:57,400 --> 00:26:02,790
not try to upload the same thing across

00:26:00,610 --> 00:26:07,030
all the instances at the same time

00:26:02,790 --> 00:26:08,740
progressive uploads helps this and I'm

00:26:07,030 --> 00:26:12,190
happy to say that I was the contributor

00:26:08,740 --> 00:26:14,380
on progressive uploads as well that we

00:26:12,190 --> 00:26:16,600
will restart requests restart uploads

00:26:14,380 --> 00:26:18,070
and restart writes if that deadline is

00:26:16,600 --> 00:26:19,900
exhausted that's the reason I want to

00:26:18,070 --> 00:26:20,890
know if your deadline actually changes

00:26:19,900 --> 00:26:23,320
whether you can actually upload

00:26:20,890 --> 00:26:25,330
something progressive applause just says

00:26:23,320 --> 00:26:28,180
that if you're making progress along

00:26:25,330 --> 00:26:29,920
your your upload and you just happen to

00:26:28,180 --> 00:26:31,510
have exhausted bandwidth or exhausted

00:26:29,920 --> 00:26:34,110
the ability to time slice into your

00:26:31,510 --> 00:26:36,550
network card you won't be charged with

00:26:34,110 --> 00:26:37,340
the destruction of your build and the

00:26:36,550 --> 00:26:41,360
the end

00:26:37,340 --> 00:26:44,420
life is all as we know it the upload set

00:26:41,360 --> 00:26:46,790
is non-id Appetit and I might be using

00:26:44,420 --> 00:26:51,320
that word incorrectly but I'm pretty

00:26:46,790 --> 00:26:53,540
sure that what happens as you accrue

00:26:51,320 --> 00:26:56,690
inputs on the remote side is the

00:26:53,540 --> 00:26:59,630
amortizes down to zero time or a zero

00:26:56,690 --> 00:27:01,790
uploads required the only likely upload

00:26:59,630 --> 00:27:04,010
that you've got to do as a part of a

00:27:01,790 --> 00:27:05,780
novel execution or a novel action

00:27:04,010 --> 00:27:08,090
something that you've changed is

00:27:05,780 --> 00:27:10,070
literally what you've changed and maybe

00:27:08,090 --> 00:27:14,090
the action definition and a couple of

00:27:10,070 --> 00:27:16,010
directories and the command and then the

00:27:14,090 --> 00:27:17,450
last part of this is and this is

00:27:16,010 --> 00:27:18,890
specific to build farm because I don't

00:27:17,450 --> 00:27:21,770
know whether this is present on any

00:27:18,890 --> 00:27:23,960
other build system or remote system is

00:27:21,770 --> 00:27:25,790
that competitive uploads meaning me

00:27:23,960 --> 00:27:27,710
uploading my three gig file and you

00:27:25,790 --> 00:27:29,420
uploading the same three gig file and

00:27:27,710 --> 00:27:31,460
three other guys love playing the same

00:27:29,420 --> 00:27:32,990
three gig file they'll actually signal

00:27:31,460 --> 00:27:34,340
one another when one of them wins the

00:27:32,990 --> 00:27:36,860
race because he had the better network

00:27:34,340 --> 00:27:38,630
card and will know that the remote

00:27:36,860 --> 00:27:39,980
system just has that content and we

00:27:38,630 --> 00:27:45,380
don't need to continue uploading it and

00:27:39,980 --> 00:27:50,120
they any regard similar to this and I

00:27:45,380 --> 00:27:52,220
almost left this slide out because well

00:27:50,120 --> 00:27:54,980
we'll get into reasons so the same

00:27:52,220 --> 00:27:57,640
problem occurs on download and this is

00:27:54,980 --> 00:28:01,730
where I spend most of my time because

00:27:57,640 --> 00:28:03,140
action caches or action cache hits don't

00:28:01,730 --> 00:28:05,540
consume any uploads for the most part

00:28:03,140 --> 00:28:06,680
they're a single request to determine

00:28:05,540 --> 00:28:08,720
whether or not you've actually got your

00:28:06,680 --> 00:28:10,250
output if you've got your output then

00:28:08,720 --> 00:28:13,970
you immediately start getting into

00:28:10,250 --> 00:28:15,680
downloads and these downloads again

00:28:13,970 --> 00:28:17,150
consume bandwidth to your remote

00:28:15,680 --> 00:28:21,050
endpoint I should say from your remote

00:28:17,150 --> 00:28:23,510
endpoint again the same situation with

00:28:21,050 --> 00:28:25,760
uploads happens with downloads but their

00:28:23,510 --> 00:28:27,740
outputs so they're like almost

00:28:25,760 --> 00:28:30,340
necessarily bigger if they're not bigger

00:28:27,740 --> 00:28:32,300
there's something wrong with your action

00:28:30,340 --> 00:28:34,430
because those output files are

00:28:32,300 --> 00:28:36,650
downloaded in parallel they're consuming

00:28:34,430 --> 00:28:39,140
all of the bandwidth and that literally

00:28:36,650 --> 00:28:41,090
means if you have ten files that you

00:28:39,140 --> 00:28:44,020
produce on a single action those ten

00:28:41,090 --> 00:28:47,300
files are all downloaded there is no

00:28:44,020 --> 00:28:50,120
throttled scaling factor on the client

00:28:47,300 --> 00:28:50,840
itself to prevent you from exhausting

00:28:50,120 --> 00:28:52,820
your network

00:28:50,840 --> 00:28:55,460
sources the standard out and standard

00:28:52,820 --> 00:28:57,050
error that the the action produces if it

00:28:55,460 --> 00:28:58,250
produces standard out in standard area

00:28:57,050 --> 00:29:02,840
and I'm looking at you wicks with your

00:28:58,250 --> 00:29:04,700
six hundred megabyte outputs they also

00:29:02,840 --> 00:29:07,220
have to be downloaded because they have

00:29:04,700 --> 00:29:09,500
to be printed out to the console there's

00:29:07,220 --> 00:29:11,390
no way around this the the the literal

00:29:09,500 --> 00:29:13,250
output of those processes if they're not

00:29:11,390 --> 00:29:15,200
printed out to the console it doesn't

00:29:13,250 --> 00:29:16,520
make it look as though it was magic it

00:29:15,200 --> 00:29:18,830
doesn't make it look as though the

00:29:16,520 --> 00:29:20,630
action actually executed if you don't

00:29:18,830 --> 00:29:24,710
see the output from your fancy process

00:29:20,630 --> 00:29:31,190
why would you ever think that it ran so

00:29:24,710 --> 00:29:35,240
basil delays the oh how do I want to

00:29:31,190 --> 00:29:38,390
describe this basil delays right basil

00:29:35,240 --> 00:29:40,910
delays successive action evaluation by

00:29:38,390 --> 00:29:42,650
default and my by default here is

00:29:40,910 --> 00:29:44,690
obviously bills without the bytes does

00:29:42,650 --> 00:29:46,550
not factor into this but builds without

00:29:44,690 --> 00:29:48,980
the bytes does not solve all of this

00:29:46,550 --> 00:29:50,980
either so what I mean by successive

00:29:48,980 --> 00:29:55,210
action evaluation is that worker is

00:29:50,980 --> 00:29:57,050
blocked until your download completes

00:29:55,210 --> 00:29:58,280
maybe you're not going to use the

00:29:57,050 --> 00:29:59,840
download maybe you're gonna turn around

00:29:58,280 --> 00:30:01,280
and perform an execution that's

00:29:59,840 --> 00:30:04,550
literally what builds without the bytes

00:30:01,280 --> 00:30:06,170
is supposed to perform but sometimes you

00:30:04,550 --> 00:30:08,540
actually need those outputs locally you

00:30:06,170 --> 00:30:12,620
might be you might have have those

00:30:08,540 --> 00:30:14,660
systems used as remote mechanisms or

00:30:12,620 --> 00:30:16,640
sorry remote out remotely produced

00:30:14,660 --> 00:30:19,700
outputs for locally executed actions

00:30:16,640 --> 00:30:21,230
after the fact and in those cases you're

00:30:19,700 --> 00:30:23,570
still going to pay the penalty and you

00:30:21,230 --> 00:30:26,090
can't pay the penalty not in the action

00:30:23,570 --> 00:30:27,740
that produced it not in the within the

00:30:26,090 --> 00:30:29,270
the scope of the action that produced it

00:30:27,740 --> 00:30:30,590
but didn't within the scope of the

00:30:29,270 --> 00:30:32,720
action that consumed it you're just

00:30:30,590 --> 00:30:33,800
shifting work around assuming that

00:30:32,720 --> 00:30:36,380
you're actually gonna use these things

00:30:33,800 --> 00:30:37,970
locally now I know that the the other

00:30:36,380 --> 00:30:41,300
case is that you know you don't produce

00:30:37,970 --> 00:30:42,740
anything locally or remotely rather you

00:30:41,300 --> 00:30:45,320
don't produce anything remotely that you

00:30:42,740 --> 00:30:47,840
use locally but sometimes I just want to

00:30:45,320 --> 00:30:49,550
produce an actual artifact sometimes I

00:30:47,840 --> 00:30:51,920
just want to see that artifact on the

00:30:49,550 --> 00:30:53,240
filesystem after I'm done sometimes I

00:30:51,920 --> 00:30:55,300
want to be able to run that may be

00:30:53,240 --> 00:30:58,130
outside of Basel or transported into a

00:30:55,300 --> 00:30:59,750
package manager sometimes people need to

00:30:58,130 --> 00:31:02,960
do things with their outputs and this is

00:30:59,750 --> 00:31:06,250
where you pay the cost obviously

00:31:02,960 --> 00:31:10,700
progressive downloads

00:31:06,250 --> 00:31:13,340
require the or rather progressive up

00:31:10,700 --> 00:31:15,800
downloads are required to get past the

00:31:13,340 --> 00:31:17,750
remote timeout again this was part of

00:31:15,800 --> 00:31:19,490
the reason why RB he had a 3600 timeout

00:31:17,750 --> 00:31:21,530
because we didn't have progressive

00:31:19,490 --> 00:31:28,430
downloads in the the version of basil

00:31:21,530 --> 00:31:30,590
they shipped with so this is the end of

00:31:28,430 --> 00:31:32,090
the discussion about what the client is

00:31:30,590 --> 00:31:34,310
doing we know about its resource

00:31:32,090 --> 00:31:37,220
consumption right it's using RAM it's

00:31:34,310 --> 00:31:42,860
using memory it's using CPU and it's

00:31:37,220 --> 00:31:45,590
using bandwidth we want to now focus on

00:31:42,860 --> 00:31:47,570
what information is being reported

00:31:45,590 --> 00:31:50,240
during the actual execution during the

00:31:47,570 --> 00:31:51,530
execution the client is bored during the

00:31:50,240 --> 00:31:53,360
execution the client doesn't have

00:31:51,530 --> 00:31:54,980
anything else to do because he's

00:31:53,360 --> 00:31:57,830
literally sitting there waiting for the

00:31:54,980 --> 00:32:02,900
remote side to do something so along

00:31:57,830 --> 00:32:06,650
that path of performing those executions

00:32:02,900 --> 00:32:08,390
we have some typical and these are not

00:32:06,650 --> 00:32:09,760
required you don't actually require any

00:32:08,390 --> 00:32:12,320
of these except for the completion

00:32:09,760 --> 00:32:13,550
status emissions from the remote system

00:32:12,320 --> 00:32:15,350
and these are example fighting build

00:32:13,550 --> 00:32:16,700
farm you can go check out their code the

00:32:15,350 --> 00:32:18,950
other thing about this is that we try to

00:32:16,700 --> 00:32:21,800
only omit these statuses once so that

00:32:18,950 --> 00:32:24,550
you can use them as a phase sequencer as

00:32:21,800 --> 00:32:28,160
a client you will only ever get one

00:32:24,550 --> 00:32:30,770
initial unknown representation that's

00:32:28,160 --> 00:32:32,450
literally an empty operation that just

00:32:30,770 --> 00:32:33,530
has an identifier so that if you want to

00:32:32,450 --> 00:32:35,930
reconnect with it later

00:32:33,530 --> 00:32:38,210
you can do so that's hopefully the

00:32:35,930 --> 00:32:42,430
fastest thing that's returned to you and

00:32:38,210 --> 00:32:44,690
that facilitates connection loss weird

00:32:42,430 --> 00:32:48,080
situations where the client decides that

00:32:44,690 --> 00:32:51,640
he can't actually access your operation

00:32:48,080 --> 00:32:51,640
and needs to be needs to resume that

00:32:52,300 --> 00:32:58,610
next step is cash check there is any

00:32:55,430 --> 00:33:01,340
number of points at which the operation

00:32:58,610 --> 00:33:02,720
might have been stalled and some other

00:33:01,340 --> 00:33:05,030
operation might have completed that

00:33:02,720 --> 00:33:06,890
action we want to we want to know about

00:33:05,030 --> 00:33:09,890
that message and figure out whether or

00:33:06,890 --> 00:33:11,750
not he's he's preceded the queued action

00:33:09,890 --> 00:33:14,000
says that the action is validated it's

00:33:11,750 --> 00:33:15,530
ready to go it's in a state where our

00:33:14,000 --> 00:33:18,450
workers are gonna pick it up and we're

00:33:15,530 --> 00:33:21,090
just waiting on them to do so

00:33:18,450 --> 00:33:24,149
the then workers end up reporting that

00:33:21,090 --> 00:33:26,460
they are executing an action this is a

00:33:24,149 --> 00:33:28,500
do-or-die moment for the most part once

00:33:26,460 --> 00:33:31,620
you start an execution you will either

00:33:28,500 --> 00:33:38,399
fail with a timeout or fail on the

00:33:31,620 --> 00:33:40,980
worker or complete that situation will

00:33:38,399 --> 00:33:43,380
only be resolved with a completed status

00:33:40,980 --> 00:33:45,090
change the action results they're rather

00:33:43,380 --> 00:33:47,100
the action at that point has results

00:33:45,090 --> 00:33:49,110
available and they're cashed in the

00:33:47,100 --> 00:33:51,360
system if they don't there are two

00:33:49,110 --> 00:33:52,559
fields in there that are of slight

00:33:51,360 --> 00:33:57,179
interest to you

00:33:52,559 --> 00:33:59,039
the queued operation or the queued state

00:33:57,179 --> 00:34:01,860
doesn't include input fetch time so

00:33:59,039 --> 00:34:03,750
there might be some time that a for a

00:34:01,860 --> 00:34:06,750
piece of work to have arrived on a

00:34:03,750 --> 00:34:08,629
worker but it hasn't yet begun execution

00:34:06,750 --> 00:34:11,339
because it's trying to download inputs

00:34:08,629 --> 00:34:13,649
fortunately the action executed metadata

00:34:11,339 --> 00:34:15,839
which is tagged along with every single

00:34:13,649 --> 00:34:19,040
action results again for build farm

00:34:15,839 --> 00:34:21,750
can't speak to any other systems and

00:34:19,040 --> 00:34:24,300
identifies profiling information for

00:34:21,750 --> 00:34:26,490
when how long that operation sat in the

00:34:24,300 --> 00:34:29,429
queue how long that operation took to

00:34:26,490 --> 00:34:30,720
execute etc and this is neat because

00:34:29,429 --> 00:34:32,069
this is retained as accounting

00:34:30,720 --> 00:34:34,139
information so you can actually get this

00:34:32,069 --> 00:34:35,790
even on a cache hit you can know how

00:34:34,139 --> 00:34:39,750
much time you saved and that's going to

00:34:35,790 --> 00:34:44,250
become important so what have we done

00:34:39,750 --> 00:34:45,450
here we've said that we've we've

00:34:44,250 --> 00:34:48,899
presented a whole bunch of information

00:34:45,450 --> 00:34:51,750
about how this action has to execute so

00:34:48,899 --> 00:34:54,619
we are now armed with if we had the

00:34:51,750 --> 00:34:56,909
right tools to measure these systems

00:34:54,619 --> 00:34:58,560
armed with all the resources and all the

00:34:56,909 --> 00:35:00,089
knowledge required to make the right

00:34:58,560 --> 00:35:02,220
decision about whether or not we should

00:35:00,089 --> 00:35:04,710
be executing remotely hopefully at every

00:35:02,220 --> 00:35:06,240
single stage here so a simple

00:35:04,710 --> 00:35:10,079
characterization of a good action

00:35:06,240 --> 00:35:13,079
regardless of the the state of the

00:35:10,079 --> 00:35:16,349
system is that it has a a one meaning a

00:35:13,079 --> 00:35:20,160
novel one the end of one ratio of time

00:35:16,349 --> 00:35:23,190
for upload meaning it's a fixed cost or

00:35:20,160 --> 00:35:26,310
a relatively small cost pursuant to the

00:35:23,190 --> 00:35:28,770
novel inputs that you have an end cost

00:35:26,310 --> 00:35:31,260
meaning an arbitrarily long time for

00:35:28,770 --> 00:35:31,930
execution because you want to save

00:35:31,260 --> 00:35:33,940
something

00:35:31,930 --> 00:35:36,730
terms of the remote action execution and

00:35:33,940 --> 00:35:39,460
then a relatively small or a small

00:35:36,730 --> 00:35:41,109
considering considering the size of the

00:35:39,460 --> 00:35:45,849
upload or the size of the novel changes

00:35:41,109 --> 00:35:49,030
with the action download time because

00:35:45,849 --> 00:35:51,670
when we shrink out and destroy the

00:35:49,030 --> 00:35:54,280
upload and execute time we end up with a

00:35:51,670 --> 00:35:56,109
nice fixed constant or fixed low value

00:35:54,280 --> 00:35:57,609
download size if we have a high

00:35:56,109 --> 00:36:00,220
percentage of change for novel inputs

00:35:57,609 --> 00:36:01,869
what that means is that if I change one

00:36:00,220 --> 00:36:03,880
line I probably get a whole bunch of

00:36:01,869 --> 00:36:05,470
other pieces of content changed and

00:36:03,880 --> 00:36:07,270
there's nothing that's out of bounds in

00:36:05,470 --> 00:36:09,510
terms of the output that can produce

00:36:07,270 --> 00:36:12,670
this and the examples in this case are

00:36:09,510 --> 00:36:15,130
code generators compiles unit tests aim

00:36:12,670 --> 00:36:17,290
anybody who runs succinctly and does and

00:36:15,130 --> 00:36:20,260
benefits from remote execution so what's

00:36:17,290 --> 00:36:24,160
a characterization of a bad action now

00:36:20,260 --> 00:36:30,520
that we know that if we change a whole

00:36:24,160 --> 00:36:33,609
bunch of inputs we want to reflect that

00:36:30,520 --> 00:36:37,119
change in in in large swaths of the

00:36:33,609 --> 00:36:38,740
output set we end up with a couple of

00:36:37,119 --> 00:36:40,690
different ratios and we can just sort of

00:36:38,740 --> 00:36:42,760
permeate what we had before we always

00:36:40,690 --> 00:36:44,380
end up with an N execution right well it

00:36:42,760 --> 00:36:47,710
always takes some amount of time

00:36:44,380 --> 00:36:49,990
probably pursuant to the the input size

00:36:47,710 --> 00:36:52,720
a really bad action might take very

00:36:49,990 --> 00:36:54,640
small time and might not vary in the

00:36:52,720 --> 00:36:55,839
execution size but I'm gonna forget

00:36:54,640 --> 00:36:57,369
about those things those are basically

00:36:55,839 --> 00:37:01,030
random number generators with tons of

00:36:57,369 --> 00:37:04,299
input files and no output files the

00:37:01,030 --> 00:37:07,630
those ratios look like and to end and

00:37:04,299 --> 00:37:08,950
one the end and and then one in terms of

00:37:07,630 --> 00:37:12,700
upload and execute in downloads

00:37:08,950 --> 00:37:14,319
essentially anything that the the

00:37:12,700 --> 00:37:17,619
prototypical example or at least what

00:37:14,319 --> 00:37:20,589
what provided us with our Fuhrer at the

00:37:17,619 --> 00:37:23,109
beginning of the the presentation was an

00:37:20,589 --> 00:37:25,780
archiver being done on behalf of rules

00:37:23,109 --> 00:37:27,670
docker who was taking my one source file

00:37:25,780 --> 00:37:30,880
that got regenerated and he's changing a

00:37:27,670 --> 00:37:34,030
very small sliver of the the input file

00:37:30,880 --> 00:37:36,099
and he's got the entire Ubuntu 1804

00:37:34,030 --> 00:37:37,540
image underneath him there is no way

00:37:36,099 --> 00:37:40,150
that my input file could ever change

00:37:37,540 --> 00:37:41,740
this other thing but I'm gonna be

00:37:40,150 --> 00:37:43,720
saddled with the burden of how that how

00:37:41,740 --> 00:37:45,040
much that costs and I'd like to pick on

00:37:43,720 --> 00:37:45,550
rules docker and I actually put up a

00:37:45,040 --> 00:37:47,830
nice change

00:37:45,550 --> 00:37:49,180
request to help deal with this the the

00:37:47,830 --> 00:37:51,760
last couple of things I'm going to go

00:37:49,180 --> 00:37:53,440
through our remote scenarios meaning you

00:37:51,760 --> 00:37:57,130
are literally performing slower spotty

00:37:53,440 --> 00:38:00,640
downloads or uploads your link status is

00:37:57,130 --> 00:38:01,960
probably bad your queue depth at the

00:38:00,640 --> 00:38:04,840
time that you wanted to perform an

00:38:01,960 --> 00:38:06,970
execution might be bad there is no way

00:38:04,840 --> 00:38:12,460
right now three Rises the remote

00:38:06,970 --> 00:38:15,430
execution API or the or any other

00:38:12,460 --> 00:38:16,780
subsidiary out-of-band API to convey

00:38:15,430 --> 00:38:20,350
that information to the client and say

00:38:16,780 --> 00:38:22,210
that was a bad time I just went through

00:38:20,350 --> 00:38:24,330
a really bad breakup don't don't talk to

00:38:22,210 --> 00:38:26,440
me don't try and execute anything on me

00:38:24,330 --> 00:38:28,720
the other things that we could see

00:38:26,440 --> 00:38:30,160
include memory contention and CPU

00:38:28,720 --> 00:38:31,690
contention on the workers themselves

00:38:30,160 --> 00:38:33,460
these things are a little bit weird

00:38:31,690 --> 00:38:36,190
they're sort of out of out of our

00:38:33,460 --> 00:38:39,700
control they relate to sharing these

00:38:36,190 --> 00:38:42,670
things in keeping more work than can

00:38:39,700 --> 00:38:44,980
possibly be executed or rather more work

00:38:42,670 --> 00:38:47,470
than is traditionally a good exercise in

00:38:44,980 --> 00:38:49,060
doing the remote on remote and then

00:38:47,470 --> 00:38:51,910
obviously there's remote bandwidth

00:38:49,060 --> 00:38:54,130
exhaustion maybe that's maybe either the

00:38:51,910 --> 00:38:57,630
the links that are degraded or they have

00:38:54,130 --> 00:39:00,460
not yet scaled up to what they need so

00:38:57,630 --> 00:39:02,920
I'm running really quickly through the

00:39:00,460 --> 00:39:04,630
tools that we've got to choose this and

00:39:02,920 --> 00:39:05,860
this is how this relates to a couple of

00:39:04,630 --> 00:39:08,080
pull requests that I just put out

00:39:05,860 --> 00:39:10,210
recently the action interface for

00:39:08,080 --> 00:39:12,400
dealing with this for making this

00:39:10,210 --> 00:39:14,350
decision beforehand for knowing that

00:39:12,400 --> 00:39:16,930
your action is bad beforehand and making

00:39:14,350 --> 00:39:18,940
a decision not to use remote is to

00:39:16,930 --> 00:39:21,160
specify execution requirements no remote

00:39:18,940 --> 00:39:23,590
this is documented in the conventional

00:39:21,160 --> 00:39:26,980
rule tagging in comment tags on the

00:39:23,590 --> 00:39:29,620
generals page of Basel documentation

00:39:26,980 --> 00:39:32,460
where it has local and no remote and a

00:39:29,620 --> 00:39:37,060
couple of other common tag definitions

00:39:32,460 --> 00:39:39,160
where the spawn strategy takes takes

00:39:37,060 --> 00:39:40,690
this information and then immediately

00:39:39,160 --> 00:39:44,380
changes its behavior whenever it

00:39:40,690 --> 00:39:46,410
performs an execution these tools are

00:39:44,380 --> 00:39:49,030
the worst because the tags attribute is

00:39:46,410 --> 00:39:51,790
available without specifying it on every

00:39:49,030 --> 00:39:54,010
rule that means that when you make a

00:39:51,790 --> 00:39:56,770
rule whether you knew this or not you

00:39:54,010 --> 00:39:59,200
had a tag argument your a tags argument

00:39:56,770 --> 00:40:01,210
that tags argument is an arbitrary or

00:39:59,200 --> 00:40:03,880
a containing an arbitrary set of strings

00:40:01,210 --> 00:40:06,130
with no validation and no documentation

00:40:03,880 --> 00:40:08,920
associated with whatever else is in

00:40:06,130 --> 00:40:11,050
there but they do reference local and no

00:40:08,920 --> 00:40:12,790
remote but these things aren't

00:40:11,050 --> 00:40:14,890
automatically enforce the rule

00:40:12,790 --> 00:40:17,170
consumption of these tags is not

00:40:14,890 --> 00:40:19,420
consistent across things and guess what

00:40:17,170 --> 00:40:22,690
for every star lark rule that you've

00:40:19,420 --> 00:40:25,000
ever made if you didn't take the tag and

00:40:22,690 --> 00:40:27,460
look at it and see if it contained the

00:40:25,000 --> 00:40:29,770
word local and transfer that into an

00:40:27,460 --> 00:40:31,810
execution requirement that you did CTX

00:40:29,770 --> 00:40:34,930
actions not run or run shell or run

00:40:31,810 --> 00:40:37,660
whatever you're not conveying that

00:40:34,930 --> 00:40:39,670
information my tag specification is

00:40:37,660 --> 00:40:45,609
useless and I can't actually control

00:40:39,670 --> 00:40:46,990
what you're doing so I've got very

00:40:45,609 --> 00:40:50,109
little time left now I've got tons of

00:40:46,990 --> 00:40:52,000
slides left so what I want to do is run

00:40:50,109 --> 00:40:53,770
straight to the end I want to say that

00:40:52,000 --> 00:40:56,349
we can locate bad actions by looking at

00:40:53,770 --> 00:40:58,210
the critical path that we that we

00:40:56,349 --> 00:40:59,890
perform for our bill but that's not the

00:40:58,210 --> 00:41:02,560
end of the story because we've got so

00:40:59,890 --> 00:41:04,119
much concurrency going on that we're

00:41:02,560 --> 00:41:07,329
probably going to be fighting with other

00:41:04,119 --> 00:41:09,430
processes you can use basil profiling to

00:41:07,329 --> 00:41:10,599
do this my documentation is a little bit

00:41:09,430 --> 00:41:12,130
out of date because I didn't realize

00:41:10,599 --> 00:41:13,569
that basically analyze profile is broken

00:41:12,130 --> 00:41:15,640
in the current build you can't actually

00:41:13,569 --> 00:41:17,470
switch back into the old really cool

00:41:15,640 --> 00:41:20,470
static web page that I got so I put up a

00:41:17,470 --> 00:41:23,619
chrome trace of a fairly large build

00:41:20,470 --> 00:41:25,300
that we have that I have here that's got

00:41:23,619 --> 00:41:26,800
a nice flame graph associated with the

00:41:25,300 --> 00:41:28,960
actual action execution with its

00:41:26,800 --> 00:41:30,760
mnemonic an action completion which

00:41:28,960 --> 00:41:35,260
added a layer and didn't really add any

00:41:30,760 --> 00:41:37,450
information and a specification of what

00:41:35,260 --> 00:41:39,339
it was doing in remote I don't know how

00:41:37,450 --> 00:41:40,450
to zoom in on this view I couldn't

00:41:39,339 --> 00:41:42,460
figure out how to do it before the

00:41:40,450 --> 00:41:44,170
presentation so you guys get to do that

00:41:42,460 --> 00:41:44,800
and take a look at how much time is

00:41:44,170 --> 00:41:49,119
being spent

00:41:44,800 --> 00:41:51,520
downloading outputs or fetching action

00:41:49,119 --> 00:41:52,869
results or pulling in anything else that

00:41:51,520 --> 00:41:54,670
you need associated with remote because

00:41:52,869 --> 00:41:57,280
that's all documented in the lower phase

00:41:54,670 --> 00:41:59,589
of this this is extremely noisy it has

00:41:57,280 --> 00:42:01,329
terrible sorting it had terrible sorting

00:41:59,589 --> 00:42:03,910
in the old interface and there's no real

00:42:01,329 --> 00:42:07,060
way to say here's an action from start

00:42:03,910 --> 00:42:10,750
to finish what did we get in terms of a

00:42:07,060 --> 00:42:12,250
breakdown in time you can also use the

00:42:10,750 --> 00:42:13,119
remote logging err face this dumps a

00:42:12,250 --> 00:42:14,769
gigantic part of

00:42:13,119 --> 00:42:19,450
file for every single request that was

00:42:14,769 --> 00:42:20,859
made either over BES or over G RPC Ola

00:42:19,450 --> 00:42:23,529
hates it whenever I remind her of this

00:42:20,859 --> 00:42:25,779
tool because it's sort of fallen a date

00:42:23,529 --> 00:42:29,140
it's a predecessor it's a thing that

00:42:25,779 --> 00:42:30,960
came from v1 but there is a Basel repo

00:42:29,140 --> 00:42:33,339
baby will build repo to provide

00:42:30,960 --> 00:42:37,059
information on how to get information

00:42:33,339 --> 00:42:38,650
out of it when you go to that go into

00:42:37,059 --> 00:42:40,420
this this is something that I'm building

00:42:38,650 --> 00:42:43,180
that I'm going to throw away because I

00:42:40,420 --> 00:42:46,089
saw Paul Johnson's talk the other day on

00:42:43,180 --> 00:42:47,470
his UI and it looks fantastic hopefully

00:42:46,089 --> 00:42:48,999
we're gonna get ourselves integrated

00:42:47,470 --> 00:42:50,829
hopefully we're gonna get I'm gonna get

00:42:48,999 --> 00:42:52,420
the the the data points that I want

00:42:50,829 --> 00:42:54,809
because he's also intercepting remote

00:42:52,420 --> 00:42:58,480
execution requests and he is able to

00:42:54,809 --> 00:43:00,759
present a much better view than I ever

00:42:58,480 --> 00:43:02,529
could in terms of log playback and in

00:43:00,759 --> 00:43:04,720
terms of actual action definition with

00:43:02,529 --> 00:43:06,490
durations on those things and individual

00:43:04,720 --> 00:43:08,980
counts of the requests that went in and

00:43:06,490 --> 00:43:10,539
how many and you know based on a log

00:43:08,980 --> 00:43:12,099
view in a timeline view how much

00:43:10,539 --> 00:43:14,950
bandwidth was being consumed at a

00:43:12,099 --> 00:43:16,269
particular point in time the interceptor

00:43:14,950 --> 00:43:17,890
in this in this case that I'm looking

00:43:16,269 --> 00:43:20,799
for has features like an action

00:43:17,890 --> 00:43:23,829
blacklist I want to be able to say what

00:43:20,799 --> 00:43:26,650
happens in this case where I want to

00:43:23,829 --> 00:43:28,660
delete or where I want to forget about

00:43:26,650 --> 00:43:30,670
trying to execute this action remotely

00:43:28,660 --> 00:43:32,289
where I want to throttle bandwidth where

00:43:30,670 --> 00:43:33,789
I want to limit the blob sizes that way

00:43:32,289 --> 00:43:36,309
that you can upload where I want to

00:43:33,789 --> 00:43:38,190
limit the total action time and cut that

00:43:36,309 --> 00:43:40,599
out of the mix and prevent you from

00:43:38,190 --> 00:43:43,599
actually waiting for an action that's

00:43:40,599 --> 00:43:47,499
going to be beyond some point point in

00:43:43,599 --> 00:43:50,319
time so I had some adaptations to rules

00:43:47,499 --> 00:43:52,450
docker and here's a call to arms to all

00:43:50,319 --> 00:43:53,829
the the tools developers I hope the

00:43:52,450 --> 00:43:55,690
federation guys in the room because

00:43:53,829 --> 00:43:58,029
maybe we can enforce this in terms of a

00:43:55,690 --> 00:44:01,029
standard everybody should be

00:43:58,029 --> 00:44:02,470
transferring tags content into execution

00:44:01,029 --> 00:44:04,420
requirements if you're not doing that

00:44:02,470 --> 00:44:06,609
you're giving me rules that I have no

00:44:04,420 --> 00:44:08,680
control over you're giving me the

00:44:06,609 --> 00:44:10,269
ability to exhaust my Road endpoint

00:44:08,680 --> 00:44:12,849
without the ability without patching

00:44:10,269 --> 00:44:18,869
your code and I've done I'm docker and

00:44:12,849 --> 00:44:22,329
now I'll do it on other other repos to

00:44:18,869 --> 00:44:24,489
transport those things into controllable

00:44:22,329 --> 00:44:26,050
entities to decide whether or not they

00:44:24,489 --> 00:44:28,630
want to execute remotely or not

00:44:26,050 --> 00:44:30,700
so rules maintainer please do that basel

00:44:28,630 --> 00:44:32,140
team please make it automatically happen

00:44:30,700 --> 00:44:34,600
under a context i don't think there's

00:44:32,140 --> 00:44:37,540
any reason why we can't take the actions

00:44:34,600 --> 00:44:40,780
object and have that coming for this

00:44:37,540 --> 00:44:42,970
automatically injected feature and just

00:44:40,780 --> 00:44:45,510
specify at least by default at least

00:44:42,970 --> 00:44:49,240
without an override at least without

00:44:45,510 --> 00:44:54,730
further munching the data that you get

00:44:49,240 --> 00:44:57,070
local executions if you want them 30

00:44:54,730 --> 00:44:58,990
seconds great so tangential discoveries

00:44:57,070 --> 00:45:00,790
critical path has been broken it's been

00:44:58,990 --> 00:45:03,400
broken since we released a remote

00:45:00,790 --> 00:45:08,290
metrics piece of information that goes

00:45:03,400 --> 00:45:10,420
along with uploads inside of google the

00:45:08,290 --> 00:45:13,090
the particular event to present all this

00:45:10,420 --> 00:45:15,520
information was never emitted and it was

00:45:13,090 --> 00:45:18,280
never told to the the logging subsystem

00:45:15,520 --> 00:45:19,960
I fixed this I put up a PR I'm anxious

00:45:18,280 --> 00:45:21,850
I'm excited to have it have it updated

00:45:19,960 --> 00:45:25,270
the only reason that I noticed this was

00:45:21,850 --> 00:45:27,430
because the BES content managed to not

00:45:25,270 --> 00:45:29,440
be turned off and I found all whole

00:45:27,430 --> 00:45:33,520
bunch of zeros associated with my my

00:45:29,440 --> 00:45:34,990
remote attribution information and the

00:45:33,520 --> 00:45:36,220
whole world will change because we have

00:45:34,990 --> 00:45:37,870
bills without the bytes and we have

00:45:36,220 --> 00:45:41,370
raced the remote and we have an

00:45:37,870 --> 00:45:44,230
execution graph API that might work and

00:45:41,370 --> 00:45:46,650
that's it there's lots of future work I

00:45:44,230 --> 00:45:50,650
want a better hint from the the remote

00:45:46,650 --> 00:45:52,420
system to the client to tell them not to

00:45:50,650 --> 00:45:54,220
perform an execution right now we're

00:45:52,420 --> 00:45:55,750
doing this in very roundabout ways I'll

00:45:54,220 --> 00:45:57,040
fail a whole bunch of requests that I

00:45:55,750 --> 00:45:59,620
know are going to be interpreted or

00:45:57,040 --> 00:46:00,970
expected to be interpreted as transient

00:45:59,620 --> 00:46:03,340
failures and then I'll kick into the

00:46:00,970 --> 00:46:05,590
retry so all of my clients have to fail

00:46:03,340 --> 00:46:07,270
to retry I want real associations

00:46:05,590 --> 00:46:09,640
between the monix and action IDs and I

00:46:07,270 --> 00:46:12,070
think I can do it based on the BES input

00:46:09,640 --> 00:46:13,600
and based on intercepting all of the

00:46:12,070 --> 00:46:15,880
action messages that get transmitted to

00:46:13,600 --> 00:46:17,890
me so that in my tool I can have a

00:46:15,880 --> 00:46:20,380
critical path list that I can just click

00:46:17,890 --> 00:46:22,330
through and see here the remote requests

00:46:20,380 --> 00:46:25,090
that were performed as a result of this

00:46:22,330 --> 00:46:28,510
this is why it was blocked and then I

00:46:25,090 --> 00:46:31,480
want real transparency by default on the

00:46:28,510 --> 00:46:35,860
basil command line into what an action

00:46:31,480 --> 00:46:37,540
is doing on that line why is it running

00:46:35,860 --> 00:46:39,220
for seek six hundred and twelve hundred

00:46:37,540 --> 00:46:41,800
and thirty six hundred seconds

00:46:39,220 --> 00:46:44,829
remote how do we convey that information

00:46:41,800 --> 00:46:46,569
so that's my rant in my my talk and I

00:46:44,829 --> 00:46:48,520
hope you learned something and hope it

00:46:46,569 --> 00:46:55,930
was good for for everybody at least a

00:46:48,520 --> 00:46:57,400
little bit thanks George that was great

00:46:55,930 --> 00:46:58,900
I actually heard somebody in the

00:46:57,400 --> 00:47:00,160
audience say oh that's good to hear

00:46:58,900 --> 00:47:01,869
we're gonna break in a second but we're

00:47:00,160 --> 00:47:03,910
gonna give a chance for some questions I

00:47:01,869 --> 00:47:05,500
know that the people from the base of

00:47:03,910 --> 00:47:07,240
team and the road execution team we're

00:47:05,500 --> 00:47:08,829
in the audience so things is pretty

00:47:07,240 --> 00:47:12,640
powerful so we got about two and half

00:47:08,829 --> 00:47:15,819
minutes you ten a ton from Google hey

00:47:12,640 --> 00:47:17,770
ten um did you talk about dynamic

00:47:15,819 --> 00:47:20,170
response patent strategy I mean it's not

00:47:17,770 --> 00:47:22,119
the best way to solve the problem but it

00:47:20,170 --> 00:47:23,500
is a mitigation so I don't have control

00:47:22,119 --> 00:47:25,180
over my backroom up but I'm pretty sure

00:47:23,500 --> 00:47:27,339
that's what I called race the remote

00:47:25,180 --> 00:47:29,109
right that's where you kick off a local

00:47:27,339 --> 00:47:32,050
execution and you kick off a remote

00:47:29,109 --> 00:47:35,109
execution and whichever one wins wins

00:47:32,050 --> 00:47:37,900
except if I did that for my 3,000

00:47:35,109 --> 00:47:40,720
concurrent local executions I think my

00:47:37,900 --> 00:47:42,220
computer would melt or at least the Java

00:47:40,720 --> 00:47:45,010
process would almost definitely crash

00:47:42,220 --> 00:47:47,740
yeah you know I I like it I like the

00:47:45,010 --> 00:47:51,640
idea what I wanted is to adapt that into

00:47:47,740 --> 00:47:54,700
a condition where I say no the remote

00:47:51,640 --> 00:47:56,500
time has taken way too long and I'm just

00:47:54,700 --> 00:47:58,060
downloading outputs and I've already

00:47:56,500 --> 00:48:00,099
seen that the execution on the remote

00:47:58,060 --> 00:48:02,290
side only takes a hundredth of a second

00:48:00,099 --> 00:48:04,270
why don't I just do the remote because

00:48:02,290 --> 00:48:07,569
that execution included ingrained

00:48:04,270 --> 00:48:10,359
embedded IO time that already did the

00:48:07,569 --> 00:48:13,240
output I want to kick that system in

00:48:10,359 --> 00:48:15,310
after after a time I want to I want to

00:48:13,240 --> 00:48:17,380
make that system a little bit better in

00:48:15,310 --> 00:48:20,140
terms of making the decision of when to

00:48:17,380 --> 00:48:22,450
do that George we had just one minute

00:48:20,140 --> 00:48:24,400
for one last question though and we can

00:48:22,450 --> 00:48:27,430
also talk in the right after this I'll

00:48:24,400 --> 00:48:30,130
talk repeatedly and at length hi I'm

00:48:27,430 --> 00:48:32,800
Sergio from this is software I just want

00:48:30,130 --> 00:48:34,000
to clarify I believe there was a default

00:48:32,800 --> 00:48:37,690
tag propagations

00:48:34,000 --> 00:48:40,569
thing for Starling star lark rules that

00:48:37,690 --> 00:48:42,970
was merged recently and I don't think it

00:48:40,569 --> 00:48:44,020
applies to like native rules yet but for

00:48:42,970 --> 00:48:46,030
Starling rules it should be automatic

00:48:44,020 --> 00:48:47,740
now the good news is that most of the

00:48:46,030 --> 00:48:51,700
native rules already support this yeah

00:48:47,740 --> 00:48:53,319
thank you very much the I wanted

00:48:51,700 --> 00:48:55,599
essentially to make sure

00:48:53,319 --> 00:48:59,170
or that not only do rules maintainer ZnO

00:48:55,599 --> 00:49:01,059
that they don't get to omit these things

00:48:59,170 --> 00:49:03,249
and this might like sort of provide a

00:49:01,059 --> 00:49:04,449
tacit response but the other thing is

00:49:03,249 --> 00:49:06,819
that a lot of people provide

00:49:04,449 --> 00:49:09,940
implementations in the form of existing

00:49:06,819 --> 00:49:12,579
imple calls right they make a whole

00:49:09,940 --> 00:49:14,709
bunch of different Suites of and I can

00:49:12,579 --> 00:49:18,249
think of a couple examples in the Basel

00:49:14,709 --> 00:49:20,880
tools repo sha-256 sha-256 is a great

00:49:18,249 --> 00:49:27,430
action that got to do guys on a remote

00:49:20,880 --> 00:49:30,489
the those actions like are just sort of

00:49:27,430 --> 00:49:37,539
utilities so it's a skylib thing more

00:49:30,489 --> 00:49:39,999
than a default thing meaning the action

00:49:37,539 --> 00:49:41,739
may not inherit all of the right

00:49:39,999 --> 00:49:44,259
properties and even better than that

00:49:41,739 --> 00:49:45,699
some options some some implementations

00:49:44,259 --> 00:49:49,539
including rules docker allow you to

00:49:45,699 --> 00:49:51,759
specify tags to override past in with

00:49:49,539 --> 00:49:54,459
with the worker and if you were to omit

00:49:51,759 --> 00:49:56,890
any of the local tags in that case you

00:49:54,459 --> 00:49:58,779
wouldn't get the benefit of turning off

00:49:56,890 --> 00:50:01,359
the execution local but I'm excited that

00:49:58,779 --> 00:50:02,709
that's incorporated my one to one

00:50:01,359 --> 00:50:04,749
version doesn't have it maybe the two L

00:50:02,709 --> 00:50:06,549
release will will cut with it well this

00:50:04,749 --> 00:50:09,369
is great choice thanks so much that

00:50:06,549 --> 00:50:10,959
you're much thank you we'll talk a

00:50:09,369 --> 00:50:13,289
little bit later on there's lots going

00:50:10,959 --> 00:50:13,289

YouTube URL: https://www.youtube.com/watch?v=xP6BIEUZh9Y


