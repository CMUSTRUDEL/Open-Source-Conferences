Title: BazelCon 2019 Day 2: Half-Day Bazel Bootcamp (Part 1)
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Kyle Cordes, Oasis Digital event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Kyle Cordes;
Captions: 
	00:00:01,429 --> 00:00:09,719
okay hello everybody welcome to basil

00:00:05,730 --> 00:00:15,630
bootcamp at Basel Conn 2019 I am Kyle

00:00:09,719 --> 00:00:18,090
cordis I work at Oasis digital I am

00:00:15,630 --> 00:00:21,840
supported and assisted today by several

00:00:18,090 --> 00:00:24,029
people who wears his Lance in here

00:00:21,840 --> 00:00:27,480
there's a lance there's a Chris there

00:00:24,029 --> 00:00:28,619
Chris in here okay great so there are a

00:00:27,480 --> 00:00:30,119
couple of people have step in later

00:00:28,619 --> 00:00:31,920
there are a couple of points here today

00:00:30,119 --> 00:00:34,620
where we're gonna have a chance to do

00:00:31,920 --> 00:00:37,370
some hands-on and there are a couple of

00:00:34,620 --> 00:00:39,180
extra people to help if anyone is stuck

00:00:37,370 --> 00:00:40,620
this is who we are

00:00:39,180 --> 00:00:42,899
everyone loved these slides but I hate

00:00:40,620 --> 00:00:45,629
them so I move on we're gonna do a very

00:00:42,899 --> 00:00:47,430
short intro then we're gonna just repeat

00:00:45,629 --> 00:00:49,260
looking at code explaining the code and

00:00:47,430 --> 00:00:50,940
discussing the code so you can sort of

00:00:49,260 --> 00:00:52,500
think of this bootcamp session as a

00:00:50,940 --> 00:00:54,360
counterpoint to what's going on in the

00:00:52,500 --> 00:00:56,070
main room where everything in the main

00:00:54,360 --> 00:00:58,710
room assumes that you basically already

00:00:56,070 --> 00:01:01,230
know like all the subtext all the

00:00:58,710 --> 00:01:02,579
context and in here we're gonna just

00:01:01,230 --> 00:01:04,799
assume even though it's probably false

00:01:02,579 --> 00:01:06,390
because we're at Basel kind that people

00:01:04,799 --> 00:01:07,619
don't know the context and meaning we're

00:01:06,390 --> 00:01:10,549
gonna go to the meeting of specific

00:01:07,619 --> 00:01:12,960
files and lines and why they're there so

00:01:10,549 --> 00:01:14,630
briefly reminder of why all this matters

00:01:12,960 --> 00:01:17,340
the problem that we're solving at Basel

00:01:14,630 --> 00:01:21,810
building big things is slow and building

00:01:17,340 --> 00:01:24,930
slow is expensive I have some slides

00:01:21,810 --> 00:01:26,610
left over from when when a much longer

00:01:24,930 --> 00:01:28,290
version of today's session will be

00:01:26,610 --> 00:01:30,990
offered as an actual like commercial

00:01:28,290 --> 00:01:32,340
class and in that context there may be

00:01:30,990 --> 00:01:34,290
people in the room who don't even know

00:01:32,340 --> 00:01:35,850
if they want to Basel but I'm going to

00:01:34,290 --> 00:01:38,400
assume that everyone in the room knows

00:01:35,850 --> 00:01:40,049
they want to Basel and knows why and so

00:01:38,400 --> 00:01:41,460
I may touch on some of these points

00:01:40,049 --> 00:01:43,619
along the way and you can certainly ask

00:01:41,460 --> 00:01:46,020
questions but I'm not going to waste any

00:01:43,619 --> 00:01:47,579
minutes saying why you should care about

00:01:46,020 --> 00:01:48,899
a thing that you literally got in a

00:01:47,579 --> 00:01:53,700
plane or a car to come to a conference

00:01:48,899 --> 00:01:57,210
about reminder of the context though is

00:01:53,700 --> 00:01:59,880
that a Basel is aimed at technologically

00:01:57,210 --> 00:02:01,890
demanding problems and so many of the

00:01:59,880 --> 00:02:04,649
details of why things are the way they

00:02:01,890 --> 00:02:07,610
are end up tying back to the context in

00:02:04,649 --> 00:02:10,590
which this tool is intended to be used

00:02:07,610 --> 00:02:12,599
so that there are things where for a

00:02:10,590 --> 00:02:13,470
small project you might wonder what why

00:02:12,599 --> 00:02:15,330
is this

00:02:13,470 --> 00:02:17,010
durable complexity here and the answer

00:02:15,330 --> 00:02:22,080
is it's not for small projects it's for

00:02:17,010 --> 00:02:23,400
big complex things ever

00:02:22,080 --> 00:02:26,970
can anyone raise your hand if you're

00:02:23,400 --> 00:02:30,080
familiar that have a build pipeline okay

00:02:26,970 --> 00:02:32,400
so I will not spend time on that

00:02:30,080 --> 00:02:36,180
everyone who does an introduction to

00:02:32,400 --> 00:02:39,240
Basel has a slide listing some subset of

00:02:36,180 --> 00:02:40,800
these approximately ten points the one I

00:02:39,240 --> 00:02:45,120
like to bring up on this is the word

00:02:40,800 --> 00:02:48,150
functional I don't see that word listed

00:02:45,120 --> 00:02:49,830
very often on Basel pitch slides but I

00:02:48,150 --> 00:02:52,440
think that's a really good word to get

00:02:49,830 --> 00:02:54,090
an understanding that a build step and a

00:02:52,440 --> 00:02:56,610
build process should be functional in

00:02:54,090 --> 00:02:59,370
the sense of the output the output is a

00:02:56,610 --> 00:03:01,170
pure function of its inputs I have found

00:02:59,370 --> 00:03:03,420
that using the word functional often

00:03:01,170 --> 00:03:05,610
helps people understand why we're

00:03:03,420 --> 00:03:08,459
dealing with certain kinds of details in

00:03:05,610 --> 00:03:10,470
a Basel build process so I would suggest

00:03:08,459 --> 00:03:12,120
that to anyone who's has to be a

00:03:10,470 --> 00:03:16,170
champion of this in their organization

00:03:12,120 --> 00:03:19,470
use the word functional a lot okay there

00:03:16,170 --> 00:03:21,570
is a happy path with Basel I don't think

00:03:19,470 --> 00:03:24,090
any of the talks that we've seen are

00:03:21,570 --> 00:03:25,800
about anyone on the happy path because

00:03:24,090 --> 00:03:28,050
they're all the sort of people who come

00:03:25,800 --> 00:03:29,910
here and offer expert level talks are

00:03:28,050 --> 00:03:31,500
people who have done things like build a

00:03:29,910 --> 00:03:34,980
bunch of custom tooling and that sort of

00:03:31,500 --> 00:03:36,570
thing but there is a not too narrow but

00:03:34,980 --> 00:03:40,320
reasonably good happy path for Basel

00:03:36,570 --> 00:03:43,260
where you are using a language typically

00:03:40,320 --> 00:03:45,420
Java go whatever where someone else is

00:03:43,260 --> 00:03:49,980
doing a great job maintaining a bunch of

00:03:45,420 --> 00:03:51,690
rules and you maybe have done it before

00:03:49,980 --> 00:03:55,350
I think I think a lot of people in the

00:03:51,690 --> 00:03:56,700
Google like the eggs ooh the eggs ooblar

00:03:55,350 --> 00:04:00,420
group I don't know how to say that word

00:03:56,700 --> 00:04:02,070
I feel like Basel is often driven to

00:04:00,420 --> 00:04:03,900
adoption by people who experienced

00:04:02,070 --> 00:04:05,850
Google's internal internal version of

00:04:03,900 --> 00:04:07,830
the tool so it really helps a lot if

00:04:05,850 --> 00:04:10,140
you've lived in that ecosystem that's

00:04:07,830 --> 00:04:12,170
part of the happy path and if you're

00:04:10,140 --> 00:04:14,760
using a set of tools where somebody else

00:04:12,170 --> 00:04:16,620
some automated machinery is creating

00:04:14,760 --> 00:04:18,720
build files for you so that's the happy

00:04:16,620 --> 00:04:20,310
path we're gonna start by looking at a

00:04:18,720 --> 00:04:22,140
happy path you know but but

00:04:20,310 --> 00:04:24,240
realistically people that are working at

00:04:22,140 --> 00:04:26,160
a scale of problem where they need basel

00:04:24,240 --> 00:04:26,940
probably are not on the narrow happy

00:04:26,160 --> 00:04:28,500
path

00:04:26,940 --> 00:04:30,150
and that's the idea here so start with a

00:04:28,500 --> 00:04:31,680
happy path and broaden out a little bit

00:04:30,150 --> 00:04:35,160
from there to the things that are

00:04:31,680 --> 00:04:36,270
somewhat less happy and lastly that I

00:04:35,160 --> 00:04:40,350
think this is my last slide with

00:04:36,270 --> 00:04:42,960
significant words on it again the point

00:04:40,350 --> 00:04:44,190
of Basel is to handle big things so you

00:04:42,960 --> 00:04:46,020
have to be able to do things like split

00:04:44,190 --> 00:04:49,200
your compiler load across many machines

00:04:46,020 --> 00:04:50,910
and cache interims share that cache

00:04:49,200 --> 00:04:54,150
between a CI and a bunch of developers

00:04:50,910 --> 00:04:56,760
and so on other people are talking about

00:04:54,150 --> 00:04:59,160
that but underlying all of that is the

00:04:56,760 --> 00:05:00,840
notion that your individual steps have

00:04:59,160 --> 00:05:03,060
to have these well-defined inputs and

00:05:00,840 --> 00:05:04,920
outputs all right so all of the great

00:05:03,060 --> 00:05:07,560
things that can be done with basal-like

00:05:04,920 --> 00:05:10,410
at the macro level depend on getting

00:05:07,560 --> 00:05:12,900
rules done right at the micro level and

00:05:10,410 --> 00:05:14,550
so for bootcamp we're gonna be working

00:05:12,900 --> 00:05:16,350
at the macro level we're not going to

00:05:14,550 --> 00:05:18,300
set up splitting compiled loads across

00:05:16,350 --> 00:05:21,950
machines but we're gonna look at the

00:05:18,300 --> 00:05:21,950
details that make it possible to do that

00:05:22,910 --> 00:05:30,810
most of those details live in these

00:05:25,410 --> 00:05:33,240
three types of files a Basel workspace

00:05:30,810 --> 00:05:34,800
is a you know nested group of

00:05:33,240 --> 00:05:37,410
directories with a workspace file at the

00:05:34,800 --> 00:05:39,660
top right now that file is usually named

00:05:37,410 --> 00:05:43,110
workspace it will soon usually be named

00:05:39,660 --> 00:05:45,870
workspace Basel there's typically a

00:05:43,110 --> 00:05:51,240
build that basel file many of those

00:05:45,870 --> 00:05:54,450
scattered through a project those used

00:05:51,240 --> 00:05:57,090
to be called build but then as as basil

00:05:54,450 --> 00:05:59,940
escaped from google it was discovered

00:05:57,090 --> 00:06:02,580
that many many many projects and tools

00:05:59,940 --> 00:06:05,460
out there like having a directory laying

00:06:02,580 --> 00:06:09,120
around named build and especially if you

00:06:05,460 --> 00:06:12,270
go touch Windows or Mac with a

00:06:09,120 --> 00:06:13,530
case-insensitive file system if anywhere

00:06:12,270 --> 00:06:15,600
in your entire system you're using

00:06:13,530 --> 00:06:17,310
something with the name build in lower

00:06:15,600 --> 00:06:19,830
case and you go try to put in a file

00:06:17,310 --> 00:06:22,560
called build an upper case you get this

00:06:19,830 --> 00:06:23,970
collision and so already I think a lot

00:06:22,560 --> 00:06:25,740
of the ecosystem to switch to using

00:06:23,970 --> 00:06:27,240
build that basil as the name of the

00:06:25,740 --> 00:06:30,210
build file and it's a convention that

00:06:27,240 --> 00:06:32,700
will follow here lastly as soon as you

00:06:30,210 --> 00:06:34,169
get past just using what's there off the

00:06:32,700 --> 00:06:37,169
shelf you have to start writing your own

00:06:34,169 --> 00:06:39,210
bzl files it's basically the top things

00:06:37,169 --> 00:06:40,830
are about using basil things and the

00:06:39,210 --> 00:06:43,140
Visio files about May

00:06:40,830 --> 00:06:45,330
Vasil things and that is like that's the

00:06:43,140 --> 00:06:47,040
level of depth we will reach by the end

00:06:45,330 --> 00:06:52,050
of this morning is just starting to

00:06:47,040 --> 00:06:57,240
touch running your own bzl files any

00:06:52,050 --> 00:06:59,420
questions Before we jump into code so I

00:06:57,240 --> 00:07:02,130
like to ask a couple of questions myself

00:06:59,420 --> 00:07:03,750
so raise your hand if you're working in

00:07:02,130 --> 00:07:08,070
a project right now that's using Basel

00:07:03,750 --> 00:07:09,990
the building with Basel it's about 30 40

00:07:08,070 --> 00:07:11,850
% of the room raise your hand if you are

00:07:09,990 --> 00:07:13,320
currently responsible for the Basel on a

00:07:11,850 --> 00:07:15,720
project so basically if you're an expert

00:07:13,320 --> 00:07:19,400
in the room so experts in the room feel

00:07:15,720 --> 00:07:21,840
free to heckle it's an open invitation

00:07:19,400 --> 00:07:23,460
okay so I don't like talks with a lot of

00:07:21,840 --> 00:07:27,390
slides I like talks with a lot of code

00:07:23,460 --> 00:07:29,130
so we will jump into that I'm using V s

00:07:27,390 --> 00:07:30,720
code for my IDE there's nothing

00:07:29,130 --> 00:07:32,490
particularly basally about that it's

00:07:30,720 --> 00:07:34,530
just what I use because a lot of my work

00:07:32,490 --> 00:07:37,350
is front-end and full stack JavaScript

00:07:34,530 --> 00:07:40,800
JavaScript e stuff and that is where V s

00:07:37,350 --> 00:07:43,710
code is most popular can I get a font

00:07:40,800 --> 00:07:46,440
size check somebody in the back of the

00:07:43,710 --> 00:07:54,740
back of the room tell me how's my font

00:07:46,440 --> 00:07:56,970
size but I need to go up back row okay

00:07:54,740 --> 00:08:02,190
okay so the way I like to start is by

00:07:56,970 --> 00:08:04,380
talking through a working example if you

00:08:02,190 --> 00:08:07,620
want to follow along if you want to run

00:08:04,380 --> 00:08:09,660
this code locally it's published here so

00:08:07,620 --> 00:08:11,550
I don't know it's a unfortunately I

00:08:09,660 --> 00:08:13,740
guess the the URL part is hard to read

00:08:11,550 --> 00:08:15,990
how can I make that big does anybody

00:08:13,740 --> 00:08:18,630
know the the magic keystrokes to make

00:08:15,990 --> 00:08:21,090
that big I mean I have a hacky

00:08:18,630 --> 00:08:23,130
workaround there we go that's that's a

00:08:21,090 --> 00:08:27,230
little bigger now so if you want to

00:08:23,130 --> 00:08:27,230
follow along go clone this repo

00:08:29,870 --> 00:08:37,849
I'll give it a minute for people to type

00:08:31,550 --> 00:08:38,870
it in before I take it next question

00:08:37,849 --> 00:08:41,330
raise your hand if you have basal

00:08:38,870 --> 00:08:42,919
installed in your computer raise your

00:08:41,330 --> 00:08:44,560
hand if you don't have basal installed

00:08:42,919 --> 00:08:50,120
on your computer

00:08:44,560 --> 00:08:55,340
Wow only one fantastic with only one not

00:08:50,120 --> 00:08:57,050
having and installed we will will skip

00:08:55,340 --> 00:08:58,970
past spending a lot of time on that and

00:08:57,050 --> 00:09:01,100
instead I will point you to go to basal

00:08:58,970 --> 00:09:03,140
dot build the website go to the

00:09:01,100 --> 00:09:06,560
documentation go to the part about

00:09:03,140 --> 00:09:08,900
installation and follow the

00:09:06,560 --> 00:09:12,560
recommendations for whatever OS you are

00:09:08,900 --> 00:09:14,270
on so again this is a condensed version

00:09:12,560 --> 00:09:16,339
of something we're looking to offer is a

00:09:14,270 --> 00:09:17,930
full-length commercial training endeavor

00:09:16,339 --> 00:09:19,460
and in that one there will be a very

00:09:17,930 --> 00:09:21,320
long amount of time making sure everyone

00:09:19,460 --> 00:09:28,490
is set up but we're at basil con so I'm

00:09:21,320 --> 00:09:35,240
assuming everybody's up and running okay

00:09:28,490 --> 00:09:39,589
so once you have checked that out let me

00:09:35,240 --> 00:09:42,110
see here you'll be able to follow along

00:09:39,589 --> 00:09:45,550
so that this thing you're checking out

00:09:42,110 --> 00:09:48,260
it's it's an unusually shaped repository

00:09:45,550 --> 00:09:51,140
because instead of having one project in

00:09:48,260 --> 00:09:53,710
it it has well it potentially has eight

00:09:51,140 --> 00:09:57,710
project in it only the first five are

00:09:53,710 --> 00:10:00,070
populated and only if things go very

00:09:57,710 --> 00:10:02,480
well today will we get to the fifth so

00:10:00,070 --> 00:10:04,160
one through four or one through five for

00:10:02,480 --> 00:10:07,100
each of these is a fully working

00:10:04,160 --> 00:10:09,920
standalone basil example and so our our

00:10:07,100 --> 00:10:11,630
path here will be to review them discuss

00:10:09,920 --> 00:10:15,200
them get them running and make a little

00:10:11,630 --> 00:10:17,720
edit to them in order trying to spot

00:10:15,200 --> 00:10:19,339
yeah there's a couple of seats open back

00:10:17,720 --> 00:10:23,870
there there's a couple up in the front

00:10:19,339 --> 00:10:25,520
row no one ever wants the front row okay

00:10:23,870 --> 00:10:28,580
so for context if you're following along

00:10:25,520 --> 00:10:30,770
whatever IDE or editor you're using we

00:10:28,580 --> 00:10:32,540
are looking at this repository and we're

00:10:30,770 --> 00:10:34,640
going to start in this directory I've

00:10:32,540 --> 00:10:36,920
numbered I put a number at the beginning

00:10:34,640 --> 00:10:39,020
the number is nothing basically about

00:10:36,920 --> 00:10:40,550
the number the number is so that they

00:10:39,020 --> 00:10:42,890
sort in the order we're gonna look at

00:10:40,550 --> 00:10:43,640
them so we're gonna look at what's

00:10:42,890 --> 00:10:48,650
inside this

00:10:43,640 --> 00:10:52,990
up and running this is to me to my mind

00:10:48,650 --> 00:11:00,950
anyway the smallest reasonably correct a

00:10:52,990 --> 00:11:02,240
complete Basel project okay so can I get

00:11:00,950 --> 00:11:13,160
a show of hands that people have a code

00:11:02,240 --> 00:11:14,870
down if they're going to okay good so

00:11:13,160 --> 00:11:17,300
unfortunately we have to start the

00:11:14,870 --> 00:11:19,730
discussion of basel by going back a step

00:11:17,300 --> 00:11:21,680
before basel of how does the right

00:11:19,730 --> 00:11:22,730
version how does the intended version of

00:11:21,680 --> 00:11:23,330
basel get up and running on your

00:11:22,730 --> 00:11:26,150
computer

00:11:23,330 --> 00:11:27,940
so while the my first-line advice is

00:11:26,150 --> 00:11:31,490
always go to the documentation and

00:11:27,940 --> 00:11:32,750
follow what it says to install i would

00:11:31,490 --> 00:11:35,150
then follow it up and say if you're not

00:11:32,750 --> 00:11:39,140
using basilisk you should be using

00:11:35,150 --> 00:11:43,070
basilisk so basilisk is the basil analog

00:11:39,140 --> 00:11:45,620
of Oh like a RVM ruby version manager

00:11:43,070 --> 00:11:48,410
and vm node version manager and that

00:11:45,620 --> 00:11:51,080
that same idea that 100 different

00:11:48,410 --> 00:11:53,630
projects have reinvented basically you

00:11:51,080 --> 00:11:56,120
put a little file in your project and

00:11:53,630 --> 00:11:58,970
you use this layer of indirection tool

00:11:56,120 --> 00:12:00,820
that make sure that you are running the

00:11:58,970 --> 00:12:04,190
version of the tool that that file says

00:12:00,820 --> 00:12:07,850
so the first thing i always look for in

00:12:04,190 --> 00:12:10,840
any basel project is the presence of a

00:12:07,850 --> 00:12:10,840
basel version file

00:12:11,530 --> 00:12:17,660
there's work i believe just went in in

00:12:14,930 --> 00:12:21,980
the last couple of weeks that will make

00:12:17,660 --> 00:12:23,690
the Debian package also respect the

00:12:21,980 --> 00:12:26,900
basel version file even without using

00:12:23,690 --> 00:12:27,920
bezel esc' which is great I see someone

00:12:26,900 --> 00:12:31,220
nodding is that because you were

00:12:27,920 --> 00:12:33,110
involved in it or because ok I'm running

00:12:31,220 --> 00:12:34,310
at one point I'll say something that's

00:12:33,110 --> 00:12:39,700
something in this will raise our hand

00:12:34,310 --> 00:12:39,700
and say I wrote that and you're wrong so

00:12:40,090 --> 00:12:45,680
Basil's pretty serious has gotten very

00:12:42,740 --> 00:12:49,760
serious this year about semantic

00:12:45,680 --> 00:12:51,470
versioning and so I have taken the bold

00:12:49,760 --> 00:12:53,540
step of running on a 2.0 release

00:12:51,470 --> 00:12:55,880
candidate knowing that there's breaking

00:12:53,540 --> 00:12:57,230
changes but I've looked at what those

00:12:55,880 --> 00:13:00,260
breaking changes are and they

00:12:57,230 --> 00:13:01,940
have no effect whatever on uh on

00:13:00,260 --> 00:13:04,820
anything we're gonna see at the level of

00:13:01,940 --> 00:13:06,440
material today and so I feel like it's

00:13:04,820 --> 00:13:09,380
safe to go ahead and use a 2.0 release

00:13:06,440 --> 00:13:10,400
candidate my impression from talking

00:13:09,380 --> 00:13:13,220
with folks here is there's actually

00:13:10,400 --> 00:13:17,750
quite a lot of substantial projects that

00:13:13,220 --> 00:13:20,170
are that are not yet on 1.0 so very

00:13:17,750 --> 00:13:22,160
little of what we see today is is like

00:13:20,170 --> 00:13:24,230
significantly or structurally different

00:13:22,160 --> 00:13:26,150
from older versions but I like to always

00:13:24,230 --> 00:13:28,160
demonstrate or teach on the very latest

00:13:26,150 --> 00:13:31,160
thing I possibly can because that's

00:13:28,160 --> 00:13:33,110
closer to what someone will be using if

00:13:31,160 --> 00:13:34,250
they start trying to use this like three

00:13:33,110 --> 00:13:36,710
months from now like three months from

00:13:34,250 --> 00:13:38,120
now 2.0 will have long shipped and like

00:13:36,710 --> 00:13:42,380
it'll be the standard version everyone

00:13:38,120 --> 00:13:45,140
is using so we're on - ok so if I were

00:13:42,380 --> 00:13:46,730
to type the command basil on my computer

00:13:45,140 --> 00:13:50,000
the command basil actually runs the

00:13:46,730 --> 00:13:52,520
basilisk program it will look at this

00:13:50,000 --> 00:13:54,590
basil version file it will download the

00:13:52,520 --> 00:13:57,050
actual basil executable if needed and

00:13:54,590 --> 00:13:58,870
then redirect to it so when I type a

00:13:57,050 --> 00:14:03,220
basil cran which I haven't done yet I

00:13:58,870 --> 00:14:05,960
will be running basil version 200 rc3

00:14:03,220 --> 00:14:08,480
without me having to go make sure that I

00:14:05,960 --> 00:14:10,880
downloaded that exact version this is a

00:14:08,480 --> 00:14:12,590
great idea to do because you really want

00:14:10,880 --> 00:14:14,960
to make sure that everybody on the team

00:14:12,590 --> 00:14:19,670
is just using the the basil version that

00:14:14,960 --> 00:14:20,480
you want them to be using the next thing

00:14:19,670 --> 00:14:23,030
that will happen

00:14:20,480 --> 00:14:24,890
so once basil starts running so again

00:14:23,030 --> 00:14:26,570
any basil command basil to build just

00:14:24,890 --> 00:14:29,030
basil to ask what version it is doesn't

00:14:26,570 --> 00:14:30,440
matter they the basil command will look

00:14:29,030 --> 00:14:32,210
at this basil RC file

00:14:30,440 --> 00:14:34,700
this basil RC file contains sort of

00:14:32,210 --> 00:14:40,220
top-level configuration for the basil

00:14:34,700 --> 00:14:41,810
program now I have seen example programs

00:14:40,220 --> 00:14:44,270
published that don't have a basil RC

00:14:41,810 --> 00:14:46,820
file and that that's totally legit but

00:14:44,270 --> 00:14:49,010
as far as I can tell every significantly

00:14:46,820 --> 00:14:51,890
complex use of basil in the real world

00:14:49,010 --> 00:14:54,110
involves a fairly complex basil RC file

00:14:51,890 --> 00:14:56,600
so I would recommend getting to know the

00:14:54,110 --> 00:14:59,630
basil RC file very well I've included

00:14:56,600 --> 00:15:01,400
one here because in my tiny set of

00:14:59,630 --> 00:15:04,430
example programs I'm getting benefit

00:15:01,400 --> 00:15:06,320
from this basil RC file and just to skip

00:15:04,430 --> 00:15:07,970
ahead slightly if you look at one of the

00:15:06,320 --> 00:15:10,790
examples you'll see that it has the same

00:15:07,970 --> 00:15:14,060
set of cache settings in it so

00:15:10,790 --> 00:15:17,750
what these cache settings do is they

00:15:14,060 --> 00:15:19,790
establish a place on my local disk where

00:15:17,750 --> 00:15:21,320
basil can put two of its types of caches

00:15:19,790 --> 00:15:26,330
or posit ori caches and it's more

00:15:21,320 --> 00:15:28,220
general disk cache by doing this if i'm

00:15:26,330 --> 00:15:30,110
if i'm running more if i'm building more

00:15:28,220 --> 00:15:33,740
than one project with basil they will

00:15:30,110 --> 00:15:35,420
share a cache whereas by default if you

00:15:33,740 --> 00:15:36,860
have say six projects on your system

00:15:35,420 --> 00:15:38,930
that are that are building with basil

00:15:36,860 --> 00:15:40,790
they will each make their own cache

00:15:38,930 --> 00:15:43,580
directory inside your home directory and

00:15:40,790 --> 00:15:45,560
so if you have to download a bunch of

00:15:43,580 --> 00:15:47,840
stuff for an upgrade on one of them

00:15:45,560 --> 00:15:50,150
you'll have to do it again on the next

00:15:47,840 --> 00:15:52,310
project as you switch so if you work on

00:15:50,150 --> 00:15:54,230
more than one project this is kind of

00:15:52,310 --> 00:15:55,370
the minimum I would do in a basil or see

00:15:54,230 --> 00:15:57,410
there's a lot more you can do with

00:15:55,370 --> 00:15:59,870
caching there'll be other advanced talks

00:15:57,410 --> 00:16:01,880
in the main room about I think isn't

00:15:59,870 --> 00:16:04,820
there one about like shared caching I

00:16:01,880 --> 00:16:07,370
don't remember the exact schedule but

00:16:04,820 --> 00:16:08,540
the minimum that I would do is if I'm

00:16:07,370 --> 00:16:09,980
ever going to work on more than one

00:16:08,540 --> 00:16:13,850
project I would decide to share the

00:16:09,980 --> 00:16:15,080
cache actually I want to as it's awesome

00:16:13,850 --> 00:16:16,550
taking a picture I'm going to point out

00:16:15,080 --> 00:16:19,340
all the files I'm showing you are in the

00:16:16,550 --> 00:16:22,300
repository so every single thing I show

00:16:19,340 --> 00:16:22,300
you you have yeah go ahead

00:16:27,380 --> 00:16:37,050
it so it could but these caches I

00:16:34,770 --> 00:16:38,430
believe they're based on the content

00:16:37,050 --> 00:16:40,380
hashes so you'd have to get pretty

00:16:38,430 --> 00:16:43,860
unlucky I think you'd have to be pretty

00:16:40,380 --> 00:16:46,290
unlucky wouldn't you to have a cache

00:16:43,860 --> 00:16:47,850
collision yeah yeah it's a it's a it's a

00:16:46,290 --> 00:16:50,400
it's a content-addressable cache like

00:16:47,850 --> 00:16:52,260
the cache key is like a secure hash of

00:16:50,400 --> 00:16:54,780
the contents of what it's caching so

00:16:52,260 --> 00:16:56,820
you'd have to get quite unlucky to have

00:16:54,780 --> 00:17:02,100
a cache conflict I mean this place

00:16:56,820 --> 00:17:04,170
possible ok so again I'm talking you

00:17:02,100 --> 00:17:07,500
through just the first time someone runs

00:17:04,170 --> 00:17:08,970
basil at all the next thing that happens

00:17:07,500 --> 00:17:11,880
once this kind of general configuration

00:17:08,970 --> 00:17:14,970
is happened is basil is now looking at

00:17:11,880 --> 00:17:16,980
your workspace so this is where we jump

00:17:14,970 --> 00:17:18,260
into the jump into the middle of it this

00:17:16,980 --> 00:17:23,580
is where it gets deep

00:17:18,260 --> 00:17:25,290
so the workspace defines ok I saw this

00:17:23,580 --> 00:17:27,120
expressed really well online recently

00:17:25,290 --> 00:17:29,700
the workspace is about getting stuff

00:17:27,120 --> 00:17:31,800
from the outside world into your basil

00:17:29,700 --> 00:17:34,020
project and the build files are about

00:17:31,800 --> 00:17:38,010
what's going to happen inside your basil

00:17:34,020 --> 00:17:39,390
project so if you just look around the

00:17:38,010 --> 00:17:42,690
source code here you'll see that I have

00:17:39,390 --> 00:17:46,500
a tremendously complex program here it

00:17:42,690 --> 00:17:47,790
is 39 lines of go code so this is what

00:17:46,500 --> 00:17:51,690
we're building in this first up and

00:17:47,790 --> 00:17:53,370
running example of course in any real

00:17:51,690 --> 00:17:55,530
project the source code is going to be a

00:17:53,370 --> 00:17:58,500
thousand times bigger than all the build

00:17:55,530 --> 00:18:00,510
machinery but in my tiny project I do

00:17:58,500 --> 00:18:02,310
apologize that my workspace setup file

00:18:00,510 --> 00:18:04,230
is longer than all the source code that

00:18:02,310 --> 00:18:06,750
that's just one of the things that

00:18:04,230 --> 00:18:08,670
happens you build a tiny example ok so

00:18:06,750 --> 00:18:11,660
uh I'm gonna get a show hands

00:18:08,670 --> 00:18:17,040
you know go rager and if you know go

00:18:11,660 --> 00:18:20,400
that is what I expected one of the big

00:18:17,040 --> 00:18:23,550
challenges when when picking up basil

00:18:20,400 --> 00:18:28,410
things to learn or to teach to others is

00:18:23,550 --> 00:18:31,890
what language to use first I chose go to

00:18:28,410 --> 00:18:33,150
use first even guessing that a bevy that

00:18:31,890 --> 00:18:36,030
would be the show of hands for people

00:18:33,150 --> 00:18:39,470
that know go because the go rules in in

00:18:36,030 --> 00:18:41,159
basil are especially like they're

00:18:39,470 --> 00:18:43,739
expecially full I

00:18:41,159 --> 00:18:45,720
realization of the vision of what Basel

00:18:43,739 --> 00:18:49,289
should be like the NGO rules are really

00:18:45,720 --> 00:18:50,549
good and so even though hardly anybody

00:18:49,289 --> 00:18:52,499
knows go we're just going to gloss over

00:18:50,549 --> 00:18:54,690
that you'll have to have to trust me

00:18:52,499 --> 00:18:56,039
that if you look at this it shows a list

00:18:54,690 --> 00:18:58,289
of if you run this it shows a list of

00:18:56,039 --> 00:18:59,669
groceries on the screen so hopefully

00:18:58,289 --> 00:19:01,440
everybody familiar enough at least some

00:18:59,669 --> 00:19:06,809
programming language to to kind of guess

00:19:01,440 --> 00:19:08,879
what this code does a little bit okay so

00:19:06,809 --> 00:19:10,200
we're now looking back at our workspace

00:19:08,879 --> 00:19:12,330
file so this is where we're going to go

00:19:10,200 --> 00:19:14,099
retrieve stuff from the outside world to

00:19:12,330 --> 00:19:17,970
make it possible to compile and run this

00:19:14,099 --> 00:19:19,769
go program I have found it most helpful

00:19:17,970 --> 00:19:21,659
to just go through line by line please

00:19:19,769 --> 00:19:26,609
interrupt me with questions at any

00:19:21,659 --> 00:19:28,080
moment okay this is a goal workspace we

00:19:26,609 --> 00:19:30,989
usually start by giving that workspace a

00:19:28,080 --> 00:19:32,460
name you don't have to give a workspace

00:19:30,989 --> 00:19:35,789
a name it's okay to have kind of an

00:19:32,460 --> 00:19:37,499
anonymous workspace but I have found it

00:19:35,789 --> 00:19:39,539
to be a good practice to give a

00:19:37,499 --> 00:19:42,659
workspace a name there are certain cases

00:19:39,539 --> 00:19:45,119
where deep inside your build files that

00:19:42,659 --> 00:19:48,389
workspace name will have to appear so I

00:19:45,119 --> 00:19:50,070
suggest giving it a name that will be at

00:19:48,389 --> 00:19:51,989
least somewhat unique in case you have

00:19:50,070 --> 00:19:54,210
to grep your entire source code for it

00:19:51,989 --> 00:19:56,340
so I have tried to give these names that

00:19:54,210 --> 00:19:59,849
are unlikely to show up is like a

00:19:56,340 --> 00:20:01,649
language identifier um definitely don't

00:19:59,849 --> 00:20:03,739
give it a name like workspace or a name

00:20:01,649 --> 00:20:06,269
like basil or something like that

00:20:03,739 --> 00:20:08,340
because trust me you will eventually

00:20:06,269 --> 00:20:10,979
have to grep your entire code base for

00:20:08,340 --> 00:20:11,700
the name of your workspace and so make

00:20:10,979 --> 00:20:15,389
it something unique

00:20:11,700 --> 00:20:17,220
hmm okay so now we have a workspace and

00:20:15,389 --> 00:20:18,239
it has a name so has anyone thought what

00:20:17,220 --> 00:20:20,309
is a workspace yet

00:20:18,239 --> 00:20:23,279
well the workspace is like basically

00:20:20,309 --> 00:20:26,849
some files in a somewhat virtual file

00:20:23,279 --> 00:20:30,059
system so become more clear later this

00:20:26,849 --> 00:20:32,039
workspace starts with theoretically

00:20:30,059 --> 00:20:33,989
nothing in it I'm gonna say a workspace

00:20:32,039 --> 00:20:35,789
has nothing in it you should think of a

00:20:33,989 --> 00:20:41,549
workspace as starting with nothing in it

00:20:35,789 --> 00:20:44,940
as of line two now in reality basil is a

00:20:41,549 --> 00:20:47,070
very path dependent feature set because

00:20:44,940 --> 00:20:49,559
it emerged from an internal Google tool

00:20:47,070 --> 00:20:51,779
so in fact there's a bunch of stuff in

00:20:49,559 --> 00:20:55,129
this workspace there's a bunch of

00:20:51,779 --> 00:20:55,129
built-in stuff in this workspace

00:20:55,240 --> 00:21:00,340
that's so that old legacy things at

00:20:58,450 --> 00:21:01,450
Google that rely on there being a bunch

00:21:00,340 --> 00:21:03,760
of stuff in the workspace by default

00:21:01,450 --> 00:21:05,169
don't break but we're gonna think of it

00:21:03,760 --> 00:21:05,710
as though this workspace is currently

00:21:05,169 --> 00:21:09,760
empty

00:21:05,710 --> 00:21:11,380
so I would like to load stuff into this

00:21:09,760 --> 00:21:12,820
workspace now where am I gonna load that

00:21:11,380 --> 00:21:15,070
from well what I've actually liked it is

00:21:12,820 --> 00:21:15,990
I'd like to load it just from somewhere

00:21:15,070 --> 00:21:20,500
on the web

00:21:15,990 --> 00:21:22,809
well loading code into this workspace

00:21:20,500 --> 00:21:24,490
from somewhere on the web is not a

00:21:22,809 --> 00:21:25,929
built-in it's not something built-in

00:21:24,490 --> 00:21:27,640
because that's not something that they

00:21:25,929 --> 00:21:29,260
that they did historically at Google

00:21:27,640 --> 00:21:30,789
sort of via Google they had all of the

00:21:29,260 --> 00:21:34,210
source code checked into it the world's

00:21:30,789 --> 00:21:35,679
largest mono repository most of us and

00:21:34,210 --> 00:21:38,529
the rest of the world fetch at least

00:21:35,679 --> 00:21:40,690
some dependencies from outside so I need

00:21:38,529 --> 00:21:44,620
some way to fetch those well the tool to

00:21:40,690 --> 00:21:46,990
fetch those is called HTTP archive on

00:21:44,620 --> 00:21:48,760
line three we are loading it and on line

00:21:46,990 --> 00:21:50,350
seven we're using it and there's a lot

00:21:48,760 --> 00:21:54,100
of interesting stuff going on on lines

00:21:50,350 --> 00:21:55,809
three and seven firstly this syntax will

00:21:54,100 --> 00:21:57,899
will be more or less weird to you

00:21:55,809 --> 00:22:01,690
depending on languages you've used in

00:21:57,899 --> 00:22:04,510
almost so I've probably used 20

00:22:01,690 --> 00:22:07,230
programming languages and almost all of

00:22:04,510 --> 00:22:10,090
them there's a fairly big divide between

00:22:07,230 --> 00:22:12,789
strings and language identifiers

00:22:10,090 --> 00:22:15,010
there are a few languages where there is

00:22:12,789 --> 00:22:16,809
not such a divide and this is one of

00:22:15,010 --> 00:22:17,980
them this language is called star lark

00:22:16,809 --> 00:22:22,299
by the way I will say that word a lot

00:22:17,980 --> 00:22:23,740
more later but in this language this may

00:22:22,299 --> 00:22:26,740
be alien to you if you haven't used let

00:22:23,740 --> 00:22:29,380
go or Python but the word HTTP archive

00:22:26,740 --> 00:22:31,330
in here becomes a language identifier by

00:22:29,380 --> 00:22:33,700
line 7 so you could sort of think of

00:22:31,330 --> 00:22:36,399
this line is equivalent to a I could

00:22:33,700 --> 00:22:37,720
hear a JavaScript sort of person sort of

00:22:36,399 --> 00:22:40,090
think of it as you know some sort of

00:22:37,720 --> 00:22:43,360
path like that or if you're a Java kind

00:22:40,090 --> 00:22:45,640
of person import you know calm dot

00:22:43,360 --> 00:22:46,960
whatever that star so you can sort of

00:22:45,640 --> 00:22:47,980
think of it as being something like that

00:22:46,960 --> 00:22:50,320
depending on what languages you're

00:22:47,980 --> 00:22:52,000
familiar with but what you should read

00:22:50,320 --> 00:22:55,960
this load as if it's an import statement

00:22:52,000 --> 00:22:59,169
so it's saying from somewhere go import

00:22:55,960 --> 00:23:02,110
this thing now this summer this here is

00:22:59,169 --> 00:23:04,779
this this thing is called a label it

00:23:02,110 --> 00:23:07,059
looks like a string to me the way basil

00:23:04,779 --> 00:23:09,110
works labels are sitting inside a string

00:23:07,059 --> 00:23:11,150
syntax so that's a label

00:23:09,110 --> 00:23:14,060
we'll have to talk a lot about what

00:23:11,150 --> 00:23:17,170
these labels mean over time but this is

00:23:14,060 --> 00:23:20,230
a key word you should be looking for

00:23:17,170 --> 00:23:24,860
Basel tools Basel tools is the name of

00:23:20,230 --> 00:23:28,940
the pile of built-in tools that just

00:23:24,860 --> 00:23:30,920
ship with Basel so at Basel tools

00:23:28,940 --> 00:23:33,110
actually means reach into another

00:23:30,920 --> 00:23:35,930
workspace or another repository called

00:23:33,110 --> 00:23:39,650
Basel tools but you sort of just have to

00:23:35,930 --> 00:23:42,140
know that Basel tools is the name of the

00:23:39,650 --> 00:23:44,000
built in kit you can actually look in

00:23:42,140 --> 00:23:46,160
this if you look in the source code for

00:23:44,000 --> 00:23:48,800
basel there's literally a directory in

00:23:46,160 --> 00:23:51,500
it basel tools and has a subdirectory

00:23:48,800 --> 00:23:53,300
tools and a subdirectory build that so

00:23:51,500 --> 00:23:55,220
you could go read the exact meaning of

00:23:53,300 --> 00:23:57,080
this thing that doesn't matter but just

00:23:55,220 --> 00:23:59,120
know whenever you see basel tools i'm

00:23:57,080 --> 00:24:00,680
reaching into the built in tool box

00:23:59,120 --> 00:24:01,550
inside basel and grabbing something and

00:24:00,680 --> 00:24:05,750
making available to use in this

00:24:01,550 --> 00:24:07,340
workspace so at this place inside the

00:24:05,750 --> 00:24:09,410
built in kit there's a thing called HTTP

00:24:07,340 --> 00:24:14,740
archive we're gonna go get it now we

00:24:09,410 --> 00:24:14,740
have it since we have it let's use it

00:24:18,220 --> 00:24:24,380
so you should think of this as being

00:24:20,900 --> 00:24:26,810
equivalent to some lines of a maven pom

00:24:24,380 --> 00:24:28,280
or some lines of a package.json file

00:24:26,810 --> 00:24:30,130
actually I want to get some from a raise

00:24:28,280 --> 00:24:32,350
your hand if you know Java and maven

00:24:30,130 --> 00:24:35,030
raise your hand if you know Python

00:24:32,350 --> 00:24:38,510
how about JavaScript ecosystem people

00:24:35,030 --> 00:24:39,740
who the smallest number bummer okay try

00:24:38,510 --> 00:24:46,070
not to use too many JavaScript because

00:24:39,740 --> 00:24:50,950
it's not Sagan how do I do that command

00:24:46,070 --> 00:24:50,950
I want to kill the thing on the right

00:24:51,960 --> 00:25:06,270
you I can turn appearance where is it

00:25:00,000 --> 00:25:11,280
that there we go okay see most of the

00:25:06,270 --> 00:25:13,530
time I present code in languages where I

00:25:11,280 --> 00:25:15,900
can do pretty tight word wrapping to

00:25:13,530 --> 00:25:18,750
deal with the inevitable problem of big

00:25:15,900 --> 00:25:20,520
fonts in the back row but unfortunately

00:25:18,750 --> 00:25:22,260
there are just some really long strings

00:25:20,520 --> 00:25:24,090
in here so yeah I guess I can just go

00:25:22,260 --> 00:25:25,860
back and forth with this I I hate doing

00:25:24,090 --> 00:25:28,140
that because I hate losing the context

00:25:25,860 --> 00:25:30,540
right I really don't like to be showing

00:25:28,140 --> 00:25:32,220
code where people can't tell where that

00:25:30,540 --> 00:25:34,350
code is but I guess I'll have to because

00:25:32,220 --> 00:25:35,570
of the constraints and the size and so

00:25:34,350 --> 00:25:40,230
on

00:25:35,570 --> 00:25:43,080
okay so HTTP archive this is a use of

00:25:40,230 --> 00:25:44,550
the HTTP archive tool that we just call

00:25:43,080 --> 00:25:46,460
or to be that we just import this we

00:25:44,550 --> 00:25:50,580
import a tool now we're gonna use it

00:25:46,460 --> 00:25:52,560
there's a general pattern whenever in a

00:25:50,580 --> 00:25:55,920
workspace you call something and you

00:25:52,560 --> 00:25:58,290
state a name this is the name under

00:25:55,920 --> 00:26:00,800
which the thing that you are invoking

00:25:58,290 --> 00:26:04,410
will become available in the workspace

00:26:00,800 --> 00:26:06,360
so we're gonna go grab some stuff and

00:26:04,410 --> 00:26:07,800
this describes how to grab it and then

00:26:06,360 --> 00:26:10,050
once we've grabbed it we're gonna refer

00:26:07,800 --> 00:26:13,110
to it by this name I could edit this

00:26:10,050 --> 00:26:15,570
name if I wanted now if you go to the

00:26:13,110 --> 00:26:18,540
projects where these various tools come

00:26:15,570 --> 00:26:20,370
from they always suggest a way to import

00:26:18,540 --> 00:26:22,110
their tool and use it I have found it a

00:26:20,370 --> 00:26:24,030
good practice to always import it under

00:26:22,110 --> 00:26:25,680
the name they suggests so that when your

00:26:24,030 --> 00:26:27,630
so your code looks like everybody else's

00:26:25,680 --> 00:26:30,030
code but if I really wanted to you know

00:26:27,630 --> 00:26:35,430
I could name it after myself or

00:26:30,030 --> 00:26:38,790
something so I'm gonna fetch things with

00:26:35,430 --> 00:26:42,000
HTTP in this this this example nicely

00:26:38,790 --> 00:26:44,790
gives two alternate URLs here a question

00:26:42,000 --> 00:26:46,830
that always comes up but always ask in

00:26:44,790 --> 00:26:49,320
my org they'd like us to fetch stuff

00:26:46,830 --> 00:26:51,660
locally yeah like you can just go

00:26:49,320 --> 00:26:53,820
retrieve that file and you could like

00:26:51,660 --> 00:26:55,410
audited or review it however you wanted

00:26:53,820 --> 00:26:56,850
you could store it on a server wherever

00:26:55,410 --> 00:26:59,190
you wanted and you can put in a URL to

00:26:56,850 --> 00:27:02,130
it so there's no requirement that these

00:26:59,190 --> 00:27:03,330
be HTTP versus HTTPS there's no

00:27:02,130 --> 00:27:05,610
requirement that they be reaching

00:27:03,330 --> 00:27:07,350
outside world you put into your URL you

00:27:05,610 --> 00:27:09,179
this is just like the default if I go

00:27:07,350 --> 00:27:12,299
look at the documentation for the NGO

00:27:09,179 --> 00:27:15,330
rules this is where they are sitting on

00:27:12,299 --> 00:27:16,740
the Internet to go grab and then a lot

00:27:15,330 --> 00:27:21,320
of these you'll see them they mention

00:27:16,740 --> 00:27:27,029
this this basil mirror as I understand

00:27:21,320 --> 00:27:29,879
this is an artifact of how the CI is

00:27:27,029 --> 00:27:32,129
performed so the the basil team runs a

00:27:29,879 --> 00:27:33,749
CI of like making sure a whole bunch of

00:27:32,129 --> 00:27:34,950
these rules will all work on the current

00:27:33,749 --> 00:27:37,649
version of basil as it gets developed

00:27:34,950 --> 00:27:39,659
that's as I understand that CIA machine

00:27:37,649 --> 00:27:43,049
is not allowed to go fetch stuff off the

00:27:39,659 --> 00:27:45,389
internet and so they go pre fetch the

00:27:43,049 --> 00:27:47,909
rules and put them into the basil mirror

00:27:45,389 --> 00:27:49,710
so that their own CI can always be like

00:27:47,909 --> 00:27:51,149
you know fetching from a machine down

00:27:49,710 --> 00:27:53,490
you know in the same rack or whatever

00:27:51,149 --> 00:28:05,539
that's not really it's on Google storage

00:27:53,490 --> 00:28:10,019
yeah there's definitely a Basel thing

00:28:05,539 --> 00:28:11,669
and it's not the only way to do it but

00:28:10,019 --> 00:28:13,740
it's the way that all the documentation

00:28:11,669 --> 00:28:15,899
shows it so it's the way I show first I

00:28:13,740 --> 00:28:24,600
will we will see a couple other ways

00:28:15,899 --> 00:28:26,249
over time yeah I believe that is what it

00:28:24,600 --> 00:28:33,769
does my hope I got the AV you guys

00:28:26,249 --> 00:28:36,419
looking at me am I good yeah actually uh

00:28:33,769 --> 00:28:45,960
can someone who works with me volunteer

00:28:36,419 --> 00:28:47,580
to run a microphone around you have to

00:28:45,960 --> 00:28:49,889
ask him what you have to do to make it

00:28:47,580 --> 00:28:52,559
actually work okay the question was are

00:28:49,889 --> 00:28:54,869
they tried in order to my knowledge they

00:28:52,559 --> 00:28:57,539
are tried in order that I have not

00:28:54,869 --> 00:28:59,129
experimented with monitoring my machines

00:28:57,539 --> 00:28:59,940
network traffic to verify that but I

00:28:59,129 --> 00:29:07,399
believe that's the case

00:28:59,940 --> 00:29:09,809
okay any more questions on this okay so

00:29:07,399 --> 00:29:12,950
why are we starting with just like

00:29:09,809 --> 00:29:15,480
grabbing something by HTTP right so that

00:29:12,950 --> 00:29:17,070
the literal answer is well that's what

00:29:15,480 --> 00:29:19,220
all the examples show but like the the

00:29:17,070 --> 00:29:21,530
semantic answer behind the scenes is

00:29:19,220 --> 00:29:24,260
we haven't even loaded tooling for any

00:29:21,530 --> 00:29:27,500
particular programming language

00:29:24,260 --> 00:29:30,650
ecosystem right so like we can't use

00:29:27,500 --> 00:29:32,630
like goes package management we can't

00:29:30,650 --> 00:29:34,610
use maven package meant like like we

00:29:32,630 --> 00:29:36,350
can't use some some package management

00:29:34,610 --> 00:29:38,390
system to retrieve the rules for these

00:29:36,350 --> 00:29:40,310
because we haven't loaded that and basil

00:29:38,390 --> 00:29:42,470
arrives is just the sort of blank slate

00:29:40,310 --> 00:29:44,000
ready for you to pour support into

00:29:42,470 --> 00:29:45,470
whatever language you're using and so

00:29:44,000 --> 00:29:47,930
you should think of these first few as

00:29:45,470 --> 00:29:49,550
as like bootstrapping your workspace and

00:29:47,930 --> 00:29:52,130
then once you've bootstraps your

00:29:49,550 --> 00:29:54,080
workspace then we'll do more like more

00:29:52,130 --> 00:29:58,580
specific things that don't feel quite as

00:29:54,080 --> 00:30:00,620
generic to do later work ok so we've

00:29:58,580 --> 00:30:02,060
learned how HTTP archive works it goes

00:30:00,620 --> 00:30:04,580
and gets some stuff and makes it

00:30:02,060 --> 00:30:06,800
available under this name we're not

00:30:04,580 --> 00:30:08,660
going to go into what ghazal is for

00:30:06,800 --> 00:30:10,430
other than to point out gazelle is an

00:30:08,660 --> 00:30:11,900
example of a tool that writes your build

00:30:10,430 --> 00:30:13,580
files for you so I've members head on

00:30:11,900 --> 00:30:14,930
the happy path you don't really have to

00:30:13,580 --> 00:30:16,220
mess with the build files yet because

00:30:14,930 --> 00:30:17,870
there's a tool that does it for you if

00:30:16,220 --> 00:30:19,700
you're working with go and if you're

00:30:17,870 --> 00:30:24,080
following the sort of standard practices

00:30:19,700 --> 00:30:25,910
for NGO directory layouts it does most

00:30:24,080 --> 00:30:27,530
of the work for you Ike if your program

00:30:25,910 --> 00:30:29,540
works off-the-shelf with the go command

00:30:27,530 --> 00:30:32,210
line tool in a straightforward way it'll

00:30:29,540 --> 00:30:33,560
probably just work with gazelle making

00:30:32,210 --> 00:30:36,920
it you know kind of bringing it to the

00:30:33,560 --> 00:30:38,390
basil word for you so I wanted this for

00:30:36,920 --> 00:30:40,220
some bit that we'll see a little later

00:30:38,390 --> 00:30:43,820
and I wanted to demonstrate another use

00:30:40,220 --> 00:30:46,250
of HTTP archive so there it is you'll

00:30:43,820 --> 00:30:48,440
see that these are all protected by a I

00:30:46,250 --> 00:30:50,360
guess I guess a sha-256 is still

00:30:48,440 --> 00:30:54,080
considered a cryptographically secure

00:30:50,360 --> 00:30:56,150
hash those quantum computers don't make

00:30:54,080 --> 00:30:58,850
it out it should be good for a number of

00:30:56,150 --> 00:31:01,400
more years so even fetching this from

00:30:58,850 --> 00:31:02,900
the outside world it's it's pretty

00:31:01,400 --> 00:31:05,480
unlikely somebody could use this as a

00:31:02,900 --> 00:31:07,160
can attack injection vector if you're at

00:31:05,480 --> 00:31:08,480
all concerned you could you could go

00:31:07,160 --> 00:31:16,180
store the file locally and use that

00:31:08,480 --> 00:31:19,870
instead yes yes yeah

00:31:16,180 --> 00:31:21,970
it throws an error as it loads it yep it

00:31:19,870 --> 00:31:26,800
stops it stops progressing at that point

00:31:21,970 --> 00:31:28,270
oh oh sorry your question was what

00:31:26,800 --> 00:31:30,970
happens if the shot doesn't match and it

00:31:28,270 --> 00:31:33,100
pulls the file to my knowledge it will

00:31:30,970 --> 00:31:34,360
stop as I recall last time I edit it to

00:31:33,100 --> 00:31:36,910
see what would happen it just stopped at

00:31:34,360 --> 00:31:41,170
that point more typically if you leave

00:31:36,910 --> 00:31:43,240
it out it'll say hey here's the shawl

00:31:41,170 --> 00:31:53,980
you need to put in to verify it doesn't

00:31:43,240 --> 00:31:55,840
change in the future yeah no no no

00:31:53,980 --> 00:31:59,920
that's what I was getting at is if I

00:31:55,840 --> 00:32:02,470
were to if I didn't have this line and I

00:31:59,920 --> 00:32:04,870
run the basel tool as it resolves the

00:32:02,470 --> 00:32:07,360
dependencies it would say hey you didn't

00:32:04,870 --> 00:32:10,120
put in a shaw you should have this is

00:32:07,360 --> 00:32:11,920
what the actual shaw was so i've never

00:32:10,120 --> 00:32:14,530
had to do any work to go generate a shot

00:32:11,920 --> 00:32:17,800
with any other tool and actually more

00:32:14,530 --> 00:32:21,070
typically when people publish rules they

00:32:17,800 --> 00:32:23,020
will publish this whole thing so here in

00:32:21,070 --> 00:32:29,080
fact typically if you just take this

00:32:23,020 --> 00:32:31,660
name up wrong selected too much so if

00:32:29,080 --> 00:32:35,260
you take this name and then you search

00:32:31,660 --> 00:32:38,020
for it you typically will find some

00:32:35,260 --> 00:32:43,440
documentation you'll typically look at

00:32:38,020 --> 00:32:47,440
releases oh I chose poorly

00:32:43,440 --> 00:32:49,090
on most most of the projects maintained

00:32:47,440 --> 00:32:52,300
by the core team or any teams at Google

00:32:49,090 --> 00:32:53,980
in the release notes will be something

00:32:52,300 --> 00:32:56,890
you can copy and paste which is more or

00:32:53,980 --> 00:32:58,920
less exactly this so I have never had to

00:32:56,890 --> 00:33:02,140
do anything to go retrieve these shots

00:32:58,920 --> 00:33:04,300
by the way to point out just how how

00:33:02,140 --> 00:33:05,950
little you could do this load command

00:33:04,300 --> 00:33:08,350
there's a way to make this point at a

00:33:05,950 --> 00:33:11,740
local file I could actually check those

00:33:08,350 --> 00:33:13,030
things into my projects repository and I

00:33:11,740 --> 00:33:15,340
could just load them out of my source

00:33:13,030 --> 00:33:20,830
code so I could really get rid of all

00:33:15,340 --> 00:33:24,660
the remote fetching if I wanted to I did

00:33:20,830 --> 00:33:24,660
I clicked wrong okay so

00:33:25,560 --> 00:33:32,200
yeah there we go

00:33:29,050 --> 00:33:33,700
undo I need to I need to get rid of this

00:33:32,200 --> 00:33:42,340
file so I stopped getting prompted to

00:33:33,700 --> 00:33:44,080
save it okay so next there is an oddity

00:33:42,340 --> 00:33:45,820
which I think you heard mentioned

00:33:44,080 --> 00:33:50,470
several times from the mainstage

00:33:45,820 --> 00:33:52,570
yesterday someone said something along

00:33:50,470 --> 00:33:53,770
the lines of they thought really hard

00:33:52,570 --> 00:33:57,250
and they tried really hard to make

00:33:53,770 --> 00:33:58,780
recursive work space loading work and

00:33:57,250 --> 00:34:00,820
there are big obstacles there are

00:33:58,780 --> 00:34:02,650
reasons why that's an that's a bad idea

00:34:00,820 --> 00:34:05,680
I will not dig into the reasons by the

00:34:02,650 --> 00:34:07,540
bad Tibet idea but the consequence of

00:34:05,680 --> 00:34:09,640
that being a bad idea is that when I

00:34:07,540 --> 00:34:12,070
load code into my workspace in the

00:34:09,640 --> 00:34:15,970
outside world there's no way for that

00:34:12,070 --> 00:34:18,610
act of loading to cause that code to go

00:34:15,970 --> 00:34:22,270
load further dependencies of its own and

00:34:18,610 --> 00:34:23,530
so almost every set of rules you'll

00:34:22,270 --> 00:34:26,409
bring and what was everything you bring

00:34:23,530 --> 00:34:28,810
in from the outside world you as the

00:34:26,409 --> 00:34:31,330
workspace author and although in this

00:34:28,810 --> 00:34:33,970
case you as the copy and paste er from

00:34:31,330 --> 00:34:37,929
the Gazelle release notes if it had

00:34:33,970 --> 00:34:39,909
better release notes you have to go

00:34:37,929 --> 00:34:41,770
basically give that thing permission to

00:34:39,909 --> 00:34:45,760
go grab it so it's own dependencies and

00:34:41,770 --> 00:34:48,850
so that's what's going on here so I

00:34:45,760 --> 00:34:50,230
mentioned before when you use HTTP

00:34:48,850 --> 00:34:51,730
archive to go bring something into your

00:34:50,230 --> 00:34:53,860
workspace that becomes available in your

00:34:51,730 --> 00:34:55,330
workspace under this name so if you look

00:34:53,860 --> 00:34:59,320
at this name and see where it appears

00:34:55,330 --> 00:35:01,180
again it appeared right here right so I

00:34:59,320 --> 00:35:03,730
said go get some stuff now it's

00:35:01,180 --> 00:35:05,860
available in my workspace now go load

00:35:03,730 --> 00:35:08,080
something from inside what I brought

00:35:05,860 --> 00:35:10,960
into my workspace and go get some

00:35:08,080 --> 00:35:12,940
identifiers from it now this is another

00:35:10,960 --> 00:35:16,930
syntactic oddity so I said a load is

00:35:12,940 --> 00:35:20,530
really an import well it has a Python

00:35:16,930 --> 00:35:22,600
flavored syntax and so you should think

00:35:20,530 --> 00:35:28,630
of it semantically as something more

00:35:22,600 --> 00:35:30,640
like that it's very common in Python

00:35:28,630 --> 00:35:33,190
based things to accept the variable

00:35:30,640 --> 00:35:35,950
number of arguments so the first

00:35:33,190 --> 00:35:38,200
argument is from where I am importing

00:35:35,950 --> 00:35:39,060
and then all the other arguments are the

00:35:38,200 --> 00:35:45,270
identify

00:35:39,060 --> 00:35:51,900
that I'm importing from there so did

00:35:45,270 --> 00:35:56,310
that make sense I'm selecting that this

00:35:51,900 --> 00:35:58,770
is equivalent to import two different

00:35:56,310 --> 00:36:06,240
identifiers I guess I you can guess what

00:35:58,770 --> 00:36:08,430
the syntax means from somewhere as far

00:36:06,240 --> 00:36:14,130
as I know there is no import everything

00:36:08,430 --> 00:36:16,740
syntax Basel really like things to be

00:36:14,130 --> 00:36:17,970
statically resolvable it doesn't like

00:36:16,740 --> 00:36:19,620
not being able to figure out by looking

00:36:17,970 --> 00:36:22,320
at a file exactly what's going to be

00:36:19,620 --> 00:36:24,270
available so I'm not sure if that's an

00:36:22,320 --> 00:36:26,220
obstacle to it but in any event as far

00:36:24,270 --> 00:36:29,580
as I know that does not exist you have

00:36:26,220 --> 00:36:32,100
to import the identifiers you want okay

00:36:29,580 --> 00:36:34,380
so we're importing two identifiers from

00:36:32,100 --> 00:36:37,530
this code that code itself we brought in

00:36:34,380 --> 00:36:42,270
a couple lines up and now I'm going to

00:36:37,530 --> 00:36:45,060
invoke both of those things now remember

00:36:42,270 --> 00:36:48,090
I mentioned that the the act of loading

00:36:45,060 --> 00:36:51,690
a workspace does not allow it to go load

00:36:48,090 --> 00:36:53,220
things it needs transitively you have to

00:36:51,690 --> 00:36:55,560
give it permission well the way you give

00:36:53,220 --> 00:36:56,730
a permission is you have to invoke the

00:36:55,560 --> 00:37:00,590
thing that does that loading of

00:36:56,730 --> 00:37:00,590
dependencies so that's what line 33 does

00:37:02,060 --> 00:37:05,970
there's a concept called the tool chain

00:37:04,260 --> 00:37:07,920
I don't I don't think we're getting deep

00:37:05,970 --> 00:37:09,030
enough to go over tool chains I think

00:37:07,920 --> 00:37:11,460
there is actually a talk either

00:37:09,030 --> 00:37:15,210
yesterday or today about tool chains for

00:37:11,460 --> 00:37:19,760
sure the important thing of the meaning

00:37:15,210 --> 00:37:23,010
here is that these rules for go

00:37:19,760 --> 00:37:24,720
they contain not only the way of

00:37:23,010 --> 00:37:25,950
building go with basil they contain

00:37:24,720 --> 00:37:31,040
machinery that let you go

00:37:25,950 --> 00:37:34,440
obtain go itself like the compiler so

00:37:31,040 --> 00:37:36,630
the rule exposed register tool chains

00:37:34,440 --> 00:37:39,750
that can be stick that can be used to go

00:37:36,630 --> 00:37:42,150
make not just the build rules but the

00:37:39,750 --> 00:37:43,740
tool itself available so I mentioned

00:37:42,150 --> 00:37:45,600
that like one of the key things is like

00:37:43,740 --> 00:37:49,380
this hermiticity this functionality idea

00:37:45,600 --> 00:37:52,710
well to be hermetic to be functional you

00:37:49,380 --> 00:37:54,330
really want your compiler to be

00:37:52,710 --> 00:37:55,830
specified in your build process also

00:37:54,330 --> 00:38:01,050
like the exact version of your compiler

00:37:55,830 --> 00:38:03,780
and so line 36 lines 35 to 37 mean go

00:38:01,050 --> 00:38:04,619
retrieve go itself so I have I

00:38:03,780 --> 00:38:07,170
intentionally

00:38:04,619 --> 00:38:09,630
deleted my local installation from go at

00:38:07,170 --> 00:38:12,660
one point to verify this really worked I

00:38:09,630 --> 00:38:16,430
put it back for reasons um I ended up

00:38:12,660 --> 00:38:20,490
having to put it back because right now

00:38:16,430 --> 00:38:22,589
the copy of go that basil gets to do my

00:38:20,490 --> 00:38:26,369
build with is not available to my IDE

00:38:22,589 --> 00:38:30,180
and I wanted IDE support for go so I had

00:38:26,369 --> 00:38:34,170
to install go like humanly by myself so

00:38:30,180 --> 00:38:36,180
my IDE would work but nonetheless like

00:38:34,170 --> 00:38:37,859
even if I had version skew or my version

00:38:36,180 --> 00:38:40,830
was somehow broken or contaminated I'm

00:38:37,859 --> 00:38:43,560
telling and I'm configuring basil to use

00:38:40,830 --> 00:38:45,570
its copy of the go compiler nailed down

00:38:43,560 --> 00:38:47,130
to this version so this is this is

00:38:45,570 --> 00:38:49,950
really great this means that you're not

00:38:47,130 --> 00:38:52,380
gonna like login to a CI machine and

00:38:49,950 --> 00:38:53,580
make sure by hand it has the right

00:38:52,380 --> 00:38:56,130
version of go on it

00:38:53,580 --> 00:38:57,450
you're gonna nail it down because we

00:38:56,130 --> 00:39:01,050
have a question up here with a

00:38:57,450 --> 00:39:13,050
microphone very okay I'll try to repeat

00:39:01,050 --> 00:39:20,280
it that's a question worth getting on

00:39:13,050 --> 00:39:23,369
the recording my voice is little today

00:39:20,280 --> 00:39:25,349
mine too yes I'm saying when you're

00:39:23,369 --> 00:39:28,080
specifying these these dependencies and

00:39:25,349 --> 00:39:30,390
they're going and fetching resources are

00:39:28,080 --> 00:39:31,980
you able to specify where they're

00:39:30,390 --> 00:39:33,630
pulling those resources from that is a

00:39:31,980 --> 00:39:35,940
great question this has been under

00:39:33,630 --> 00:39:37,710
discussion on the basil mailing list as

00:39:35,940 --> 00:39:41,640
recently as the last few weeks and I'd

00:39:37,710 --> 00:39:44,430
recommend you subscribe to it the most

00:39:41,640 --> 00:39:45,869
naive answer is no it just it's just in

00:39:44,430 --> 00:39:51,119
there but of course there's a lot more

00:39:45,869 --> 00:39:53,130
to it than that so you could fork that

00:39:51,119 --> 00:39:55,260
repository if you wanted if you wanted

00:39:53,130 --> 00:40:01,109
to edit where it loaded its dependencies

00:39:55,260 --> 00:40:03,480
from you could interpose a cache or a

00:40:01,109 --> 00:40:05,640
proxy of some kind between it and the

00:40:03,480 --> 00:40:06,119
outside world to intercept how it loads

00:40:05,640 --> 00:40:08,670
it depends

00:40:06,119 --> 00:40:10,589
so there are ways to do it but that is

00:40:08,670 --> 00:40:12,930
one of the current things that people

00:40:10,589 --> 00:40:15,630
stumble across is there is not as of

00:40:12,930 --> 00:40:18,930
right now a trivial straightforward way

00:40:15,630 --> 00:40:21,299
to redirect all the dependency loading

00:40:18,930 --> 00:40:24,059
to somewhere local as you load rules

00:40:21,299 --> 00:40:25,440
right now they typically statically

00:40:24,059 --> 00:40:27,690
contain where they're going to retrieve

00:40:25,440 --> 00:40:29,700
their dependencies from um basel

00:40:27,690 --> 00:40:31,920
federation will fix that yeah I can see

00:40:29,700 --> 00:40:36,450
that as a security and also an issue

00:40:31,920 --> 00:40:39,170
yeah performance as well so at the at

00:40:36,450 --> 00:40:41,730
the bootcamp level yes it definitely is

00:40:39,170 --> 00:40:43,109
companies doing this at scale like all

00:40:41,730 --> 00:40:46,529
the people giving talks about their

00:40:43,109 --> 00:40:48,720
experiences with giant projects all have

00:40:46,529 --> 00:40:50,369
you know these are willing to do or

00:40:48,720 --> 00:40:53,130
endure a little more complexity to make

00:40:50,369 --> 00:40:54,869
it go away it's not hard if you want to

00:40:53,130 --> 00:41:02,849
make it go away but it's not trivial

00:40:54,869 --> 00:41:04,880
either okay thanks yeah go ahead yeah so

00:41:02,849 --> 00:41:07,980
going back to that previous question

00:41:04,880 --> 00:41:11,069
when you say cache do you mean like in

00:41:07,980 --> 00:41:13,920
network like you you you you make it

00:41:11,069 --> 00:41:17,130
point to like a local like repository or

00:41:13,920 --> 00:41:18,900
do you mean like using this Basile cache

00:41:17,130 --> 00:41:21,059
that you mentioned in the basil RC file

00:41:18,900 --> 00:41:24,749
like injecting these dependencies by

00:41:21,059 --> 00:41:28,410
hash so one of the ways you could do it

00:41:24,749 --> 00:41:30,150
if you could ensure that your cache was

00:41:28,410 --> 00:41:32,279
pre populated with something that had

00:41:30,150 --> 00:41:35,579
that sha it's a content addressable

00:41:32,279 --> 00:41:38,549
cache then it would never actually fetch

00:41:35,579 --> 00:41:40,980
anything from any of the URLs so if you

00:41:38,549 --> 00:41:42,720
can ensure that your basal cache has all

00:41:40,980 --> 00:41:43,920
the things that get fetched then you

00:41:42,720 --> 00:41:45,119
could actually turn off network access

00:41:43,920 --> 00:41:46,529
to the machine and it wouldn't matter

00:41:45,119 --> 00:41:48,180
because everything that goes to fetch

00:41:46,529 --> 00:41:49,289
its gonna part of its own cache first so

00:41:48,180 --> 00:41:56,210
that's one of the answers to the

00:41:49,289 --> 00:41:59,730
question cool yeah okay um next I

00:41:56,210 --> 00:42:01,499
mentioned that gazelle gazella so I'm

00:41:59,730 --> 00:42:03,650
not gonna run gazelle I just brought it

00:42:01,499 --> 00:42:07,470
in so you see a reasonably complete

00:42:03,650 --> 00:42:11,460
workspace forgo use in basil but gazelle

00:42:07,470 --> 00:42:12,900
also needs some dependencies so it says

00:42:11,460 --> 00:42:18,359
this is a pattern you see this pattern

00:42:12,900 --> 00:42:19,680
repeatedly so I I brought gazelle into

00:42:18,359 --> 00:42:21,540
my workspace now I'm

00:42:19,680 --> 00:42:23,220
to reach inside it and import a couple

00:42:21,540 --> 00:42:25,410
of identifiers x' one of those will be

00:42:23,220 --> 00:42:27,510
the means by which it can fetch its own

00:42:25,410 --> 00:42:30,119
dependencies and then i as the consumer

00:42:27,510 --> 00:42:33,990
are i'm kind of giving it permission to

00:42:30,119 --> 00:42:36,210
fetch its own dependencies i would have

00:42:33,990 --> 00:42:40,079
maybe skipped gazelle except for reasons

00:42:36,210 --> 00:42:43,290
unclear to me the tooling to go fetch

00:42:40,079 --> 00:42:45,150
external go code like external libraries

00:42:43,290 --> 00:42:48,450
published on the web in the repository

00:42:45,150 --> 00:42:53,250
that machinery is inside gazelle it's

00:42:48,450 --> 00:42:54,240
not inside the core go rules and so that

00:42:53,250 --> 00:42:57,359
bit right there

00:42:54,240 --> 00:43:01,589
is why i really needed to bring in

00:42:57,359 --> 00:43:02,970
gazelle in this example so again we're a

00:43:01,589 --> 00:43:04,890
couple layers deep now i want to go

00:43:02,970 --> 00:43:08,730
another layer deep that brought in a

00:43:04,890 --> 00:43:10,530
rule called go repository go repository

00:43:08,730 --> 00:43:12,690
is a way of fetching go code from the

00:43:10,530 --> 00:43:14,910
outside world according to how go code

00:43:12,690 --> 00:43:17,069
is published african go has been through

00:43:14,910 --> 00:43:18,390
like three or four variations of package

00:43:17,069 --> 00:43:19,950
management and i have not been keeping

00:43:18,390 --> 00:43:24,150
up with it closely because i only do

00:43:19,950 --> 00:43:28,470
about that much NGO development but

00:43:24,150 --> 00:43:31,849
fundamentally this import path says go

00:43:28,470 --> 00:43:35,790
fetch this thing off of github and then

00:43:31,849 --> 00:43:39,240
this version ensures it's nailed down to

00:43:35,790 --> 00:43:40,530
a specific commit tag branch whatever so

00:43:39,240 --> 00:43:43,079
it's getting the exact code you know it

00:43:40,530 --> 00:43:45,059
is then the checksum verifies that it's

00:43:43,079 --> 00:43:49,349
right now you might ask why does this

00:43:45,059 --> 00:43:50,790
one say sha-256 and this one say some so

00:43:49,349 --> 00:43:52,349
there's there's not like a like this

00:43:50,790 --> 00:43:54,960
just one of those path dependent things

00:43:52,349 --> 00:43:56,730
right like this has emerged this is a

00:43:54,960 --> 00:43:58,740
thing that has emerged into the open

00:43:56,730 --> 00:44:00,720
source world so there is some you know

00:43:58,740 --> 00:44:02,700
loss to the outside world internal

00:44:00,720 --> 00:44:04,589
reason why someone gave this a different

00:44:02,700 --> 00:44:06,359
name but it's the exact same concept and

00:44:04,589 --> 00:44:10,829
you kind of only deal with it one so

00:44:06,359 --> 00:44:12,329
it's not a big deal okay so only a few

00:44:10,829 --> 00:44:14,579
people raised their hands on go but this

00:44:12,329 --> 00:44:16,049
is equivalent to the invocation i would

00:44:14,579 --> 00:44:17,460
use like in a package.json and a

00:44:16,049 --> 00:44:19,890
javascript project to pull

00:44:17,460 --> 00:44:22,140
interdependency or in a maven pom if i

00:44:19,890 --> 00:44:23,460
mention an external dependency being

00:44:22,140 --> 00:44:25,500
brought in it's the same idea

00:44:23,460 --> 00:44:29,869
it just says make this thing available

00:44:25,500 --> 00:44:32,010
to what i compile here okay so that's it

00:44:29,869 --> 00:44:33,040
one thing you know DeLonge the way is

00:44:32,010 --> 00:44:36,370
that most

00:44:33,040 --> 00:44:38,530
rules in a workspace end up adding some

00:44:36,370 --> 00:44:40,120
additional named thing available in that

00:44:38,530 --> 00:44:42,130
workspace that's why they're called

00:44:40,120 --> 00:44:44,320
workspace rules so rules using the

00:44:42,130 --> 00:44:46,780
workspace are as a group generally

00:44:44,320 --> 00:44:49,950
workspace rules if you hear that excited

00:44:46,780 --> 00:44:52,480
at expression that's what it means okay

00:44:49,950 --> 00:44:55,960
any more questions about the meaning of

00:44:52,480 --> 00:45:00,490
any of this before I move on to try to

00:44:55,960 --> 00:45:01,990
actually build my go program yeah I I

00:45:00,490 --> 00:45:06,820
can imagine workspace files getting

00:45:01,990 --> 00:45:09,310
rather large sorry is it possible to

00:45:06,820 --> 00:45:14,710
modularize it and import other workspace

00:45:09,310 --> 00:45:17,170
files into that or so they get large in

00:45:14,710 --> 00:45:19,350
proportion to the number of different

00:45:17,170 --> 00:45:23,220
outside things you're using and

00:45:19,350 --> 00:45:25,720
typically that grows kind of

00:45:23,220 --> 00:45:27,790
logarithmically by the size of your

00:45:25,720 --> 00:45:30,070
project so I'm trying to take trying to

00:45:27,790 --> 00:45:32,290
keep an eye on the time here is it it's

00:45:30,070 --> 00:45:34,800
right about 10 so we're right about at

00:45:32,290 --> 00:45:38,260
the time of the talk changing next-door

00:45:34,800 --> 00:45:40,570
so I will I will pause from if anyone

00:45:38,260 --> 00:45:42,400
wants to escape we can take a break and

00:45:40,570 --> 00:45:43,690
and then if somebody could push the door

00:45:42,400 --> 00:45:45,910
open for a minute and see if anybody's

00:45:43,690 --> 00:45:46,900
looking to walk in maybe you could go

00:45:45,910 --> 00:45:53,620
push the door up and just see if those

00:45:46,900 --> 00:45:54,970
people waiting out there to be

00:45:53,620 --> 00:45:59,410
respectful that there is an overall

00:45:54,970 --> 00:46:01,870
conference going on okay nobody seemed

00:45:59,410 --> 00:46:03,730
eager to flee so we will feel good we'll

00:46:01,870 --> 00:46:05,500
carry on we will take a full break when

00:46:03,730 --> 00:46:11,620
we get to where the like the the break

00:46:05,500 --> 00:46:18,510
on the everybody else's that is in um so

00:46:11,620 --> 00:46:18,510
this is an important bit go build yeah

00:46:22,730 --> 00:46:26,369
so one of the Lightning talks yesterday

00:46:25,080 --> 00:46:29,010
talked about the idea of keeping your

00:46:26,369 --> 00:46:31,650
workspace file thin so the idea of

00:46:29,010 --> 00:46:32,700
loading these other external rules does

00:46:31,650 --> 00:46:35,130
it have to be done at the workspace

00:46:32,700 --> 00:46:38,430
level or could it be done at a smaller

00:46:35,130 --> 00:46:40,440
level within Basel build files say you

00:46:38,430 --> 00:46:42,359
have multiple different languages that

00:46:40,440 --> 00:46:44,730
you're compiling within a repository or

00:46:42,359 --> 00:46:47,339
within a workspace they you going to

00:46:44,730 --> 00:46:49,980
necessarily need to load go rules to

00:46:47,339 --> 00:46:52,260
compile JavaScript and vice versa so

00:46:49,980 --> 00:46:54,359
could isolate those two being built

00:46:52,260 --> 00:46:56,970
scoped to specific modules not at the

00:46:54,359 --> 00:46:58,830
workspace there is discussion you heard

00:46:56,970 --> 00:47:00,240
discussion on the mainstage yesterday

00:46:58,830 --> 00:47:02,580
about the idea of could we have like

00:47:00,240 --> 00:47:04,380
recursive workspaces you like put

00:47:02,580 --> 00:47:06,119
another workspace file down inside your

00:47:04,380 --> 00:47:08,609
workspace and load the extra rules you

00:47:06,119 --> 00:47:10,470
need for just that portion and the

00:47:08,609 --> 00:47:15,720
answer that was actually no for really

00:47:10,470 --> 00:47:18,720
good reasons yeah the the the general

00:47:15,720 --> 00:47:20,880
answer is no the as of right now you

00:47:18,720 --> 00:47:22,349
typically all the stuff that comes in

00:47:20,880 --> 00:47:25,020
from the outside world is in your

00:47:22,349 --> 00:47:29,450
workspace and all your build files about

00:47:25,020 --> 00:47:29,450
what happens inside your workspace

00:47:30,080 --> 00:47:36,000
actually can put groups or repositories

00:47:33,530 --> 00:47:39,540
individual files and load them from the

00:47:36,000 --> 00:47:44,460
workspace I I could not quite make it

00:47:39,540 --> 00:47:48,119
out I lost your first few words try

00:47:44,460 --> 00:47:51,119
again it is still possible to logically

00:47:48,119 --> 00:47:53,400
group some of the repositories

00:47:51,119 --> 00:47:55,800
individual files and load them from the

00:47:53,400 --> 00:47:58,740
workspace yes so it's gets more

00:47:55,800 --> 00:48:01,050
manageable yeah I have not done that as

00:47:58,740 --> 00:48:02,849
I understand there are sort of practices

00:48:01,050 --> 00:48:04,950
that are considered somewhat iffy around

00:48:02,849 --> 00:48:07,109
that about loading additional stuff

00:48:04,950 --> 00:48:09,300
inside in it an individual build file

00:48:07,109 --> 00:48:12,180
there are limitations of where you can

00:48:09,300 --> 00:48:15,300
call load bill files are working at

00:48:12,180 --> 00:48:20,310
other stage yeah from the workspace yeah

00:48:15,300 --> 00:48:23,520
I think the question was about rather

00:48:20,310 --> 00:48:26,640
about the organization of yeah but you

00:48:23,520 --> 00:48:28,320
could absolutely cut some of this stuff

00:48:26,640 --> 00:48:29,880
put it another file and use a load file

00:48:28,320 --> 00:48:31,260
to run it so you could absolutely if

00:48:29,880 --> 00:48:33,869
this file gets big you could break it

00:48:31,260 --> 00:48:35,640
into ten files with names and bring them

00:48:33,869 --> 00:48:38,880
in yeah yeah

00:48:35,640 --> 00:48:40,110
but logically they're all still in the

00:48:38,880 --> 00:48:42,320
workspace that that's what I was trying

00:48:40,110 --> 00:48:45,530
to answer there's another one over here

00:48:42,320 --> 00:48:48,360
that that was correct right yeah okay

00:48:45,530 --> 00:48:52,080
actually you could separate workspaces

00:48:48,360 --> 00:48:55,350
using a local repository so if you want

00:48:52,080 --> 00:48:58,770
illogically separate like you're go

00:48:55,350 --> 00:49:01,230
build with like JavaScript build within

00:48:58,770 --> 00:49:04,050
one mana repo you could separate using

00:49:01,230 --> 00:49:06,510
global repository and that would be that

00:49:04,050 --> 00:49:09,150
would work just fine there are cross

00:49:06,510 --> 00:49:11,820
workspace features which I intentionally

00:49:09,150 --> 00:49:13,920
do not address at the introductory level

00:49:11,820 --> 00:49:15,750
but yeah it actually is possible to make

00:49:13,920 --> 00:49:19,350
yourself several workspaces and wire

00:49:15,750 --> 00:49:21,510
them up together one of the questions

00:49:19,350 --> 00:49:25,800
I've not seen any real clear guidance on

00:49:21,510 --> 00:49:28,020
is how big a workspace should be I mean

00:49:25,800 --> 00:49:30,120
at the starting point is to try to get

00:49:28,020 --> 00:49:32,670
by you know kind of build stuff up and

00:49:30,120 --> 00:49:34,290
work one workspace until it hurts but

00:49:32,670 --> 00:49:36,470
that's actually one of the questions is

00:49:34,290 --> 00:49:39,030
that there's an open question to me of

00:49:36,470 --> 00:49:40,800
under what conditions would I start

00:49:39,030 --> 00:49:42,930
breaking my project into more than one

00:49:40,800 --> 00:49:44,880
workspace or might break let's say I

00:49:42,930 --> 00:49:46,710
have a a mono repo of a thousand

00:49:44,880 --> 00:49:48,540
projects in it do I try to put all

00:49:46,710 --> 00:49:50,370
thousand in the same workspace or do I

00:49:48,540 --> 00:49:52,680
pick some other layer of granularity and

00:49:50,370 --> 00:49:57,240
I don't have a clear answer to that at

00:49:52,680 --> 00:50:01,890
this point okay so this bit I

00:49:57,240 --> 00:50:04,530
highlighted yeah oh sorry I have one

00:50:01,890 --> 00:50:08,960
question you have a tip comment right

00:50:04,530 --> 00:50:10,560
above this line tell me a line number

00:50:08,960 --> 00:50:15,630
right there

00:50:10,560 --> 00:50:17,880
51 ah so out of curiosity what does that

00:50:15,630 --> 00:50:20,040
do and is that a common Basel convention

00:50:17,880 --> 00:50:23,520
does that update the actual workspace

00:50:20,040 --> 00:50:26,070
file with a new summon version or what

00:50:23,520 --> 00:50:29,100
is that tip suggesting yeah that's how

00:50:26,070 --> 00:50:31,560
that is the line you can use to make

00:50:29,100 --> 00:50:35,330
this happen without you having to type

00:50:31,560 --> 00:50:35,330
this up by hand yeah

00:50:38,920 --> 00:50:43,060
does it actually modify the workspace

00:50:40,660 --> 00:50:44,920
file or yeah I don't remember what some

00:50:43,060 --> 00:50:46,300
of them have a way of running them

00:50:44,920 --> 00:50:48,700
imperative Li but they make and edit

00:50:46,300 --> 00:50:50,110
others like printout a section that

00:50:48,700 --> 00:50:52,000
you're supposed to go put where you want

00:50:50,110 --> 00:50:53,620
it I just don't remember again I'm not a

00:50:52,000 --> 00:50:57,570
go programmer so I'm not an expert on

00:50:53,620 --> 00:50:57,570
this thing yeah someone back here okay

00:50:59,010 --> 00:51:03,250
in this case it will update your

00:51:01,510 --> 00:51:05,830
workspace file it will read yoga motor

00:51:03,250 --> 00:51:09,570
and try to update dependencies and

00:51:05,830 --> 00:51:12,400
update those if you see go repository

00:51:09,570 --> 00:51:14,170
dependents operations it will update the

00:51:12,400 --> 00:51:16,690
parents event versions and it will

00:51:14,170 --> 00:51:18,580
update the workspace file excellent the

00:51:16,690 --> 00:51:22,120
benefit of asking when there are experts

00:51:18,580 --> 00:51:24,940
in the room ok so this this bit was just

00:51:22,120 --> 00:51:26,710
to be aware of typically in your tooling

00:51:24,940 --> 00:51:28,780
that won't make it available like to

00:51:26,710 --> 00:51:30,670
your local IDE development environment

00:51:28,780 --> 00:51:33,850
and so I ended up having to go do this

00:51:30,670 --> 00:51:35,410
to make my IDE realize that I was using

00:51:33,850 --> 00:51:37,270
this and that's kind of a rough edge

00:51:35,410 --> 00:51:38,980
that there's probably some good solution

00:51:37,270 --> 00:51:42,300
for for people doing it at scale but

00:51:38,980 --> 00:51:48,280
it's not like readily in the box

00:51:42,300 --> 00:51:50,920
ok so we've seen there is one source

00:51:48,280 --> 00:51:51,730
file and there's a couple more files we

00:51:50,920 --> 00:51:53,890
have some we have not looked at the

00:51:51,730 --> 00:51:56,680
build file or the other build file okay

00:51:53,890 --> 00:51:58,540
so this top-level build file this build

00:51:56,680 --> 00:52:00,280
file is simply generated for me by a

00:51:58,540 --> 00:52:02,770
gazelle and gazelle needs this build

00:52:00,280 --> 00:52:04,330
file to run but since I'm trying real

00:52:02,770 --> 00:52:06,610
hard to not dig into gazelle here we're

00:52:04,330 --> 00:52:10,450
gonna skip over that one and here is the

00:52:06,610 --> 00:52:13,570
important one so this is our first real

00:52:10,450 --> 00:52:14,770
build file we're looking at so you see

00:52:13,570 --> 00:52:16,690
the load you already know what the load

00:52:14,770 --> 00:52:18,040
means right so load means go get some

00:52:16,690 --> 00:52:19,590
code from somewhere and make it

00:52:18,040 --> 00:52:23,410
available here it's an import statement

00:52:19,590 --> 00:52:25,720
so if I wondered what on earth this is I

00:52:23,410 --> 00:52:27,880
would take the name of it and I would go

00:52:25,720 --> 00:52:30,520
look in my workspace to find out what it

00:52:27,880 --> 00:52:32,350
is right and again if I have followed

00:52:30,520 --> 00:52:34,780
the convention of naming these the way

00:52:32,350 --> 00:52:36,370
the documentation suggests if I do a

00:52:34,780 --> 00:52:38,470
search on the internet I'm very likely

00:52:36,370 --> 00:52:41,500
to find the documentation for it so here

00:52:38,470 --> 00:52:44,560
I am going out and saying import that to

00:52:41,500 --> 00:52:46,780
use in this build file and then I've

00:52:44,560 --> 00:52:48,610
made this this is the simplest

00:52:46,780 --> 00:52:51,190
non-trivial example I can come up with

00:52:48,610 --> 00:52:51,970
because it has two targets one of which

00:52:51,190 --> 00:52:58,000
depends on the

00:52:51,970 --> 00:53:00,910
so um we're gonna define a library and

00:52:58,000 --> 00:53:02,890
then wrap a binary around it so library

00:53:00,910 --> 00:53:05,349
means some compile some code and make it

00:53:02,890 --> 00:53:06,730
usable it as a group of things compiled

00:53:05,349 --> 00:53:09,160
together although in this case it's a

00:53:06,730 --> 00:53:11,380
group of one thing and then binary this

00:53:09,160 --> 00:53:12,609
is the naming convention for delivering

00:53:11,380 --> 00:53:16,119
an executable like make something

00:53:12,609 --> 00:53:21,040
someone could actually execute so my

00:53:16,119 --> 00:53:22,240
binary embeds my library so remember I

00:53:21,040 --> 00:53:25,900
mentioned that often when you see a

00:53:22,240 --> 00:53:28,690
string in a basil file it's actually a

00:53:25,900 --> 00:53:31,630
target so this is this is an example of

00:53:28,690 --> 00:53:33,340
a target so you you've seen targets like

00:53:31,630 --> 00:53:35,349
this one right you've seen targets like

00:53:33,340 --> 00:53:37,000
this one so this is a good time as any

00:53:35,349 --> 00:53:39,430
just to go through the syntax of a

00:53:37,000 --> 00:53:41,140
target so a target can point at a

00:53:39,430 --> 00:53:43,930
certain workspace or a certain

00:53:41,140 --> 00:53:45,730
repository that's what that part is but

00:53:43,930 --> 00:53:47,619
you can leave that off if you're just

00:53:45,730 --> 00:53:51,340
talking about something in your project

00:53:47,619 --> 00:53:53,170
and then if you want to like orient

00:53:51,340 --> 00:53:54,760
yourself from the top of your workspace

00:53:53,170 --> 00:53:56,980
so if you want to reach somewhere else

00:53:54,760 --> 00:53:58,869
in your sprawling project other than the

00:53:56,980 --> 00:54:00,940
directory you're in then you have to use

00:53:58,869 --> 00:54:02,680
this section it starts with two slashes

00:54:00,940 --> 00:54:05,560
but if you just want to refer to

00:54:02,680 --> 00:54:08,920
something inside of where you are you

00:54:05,560 --> 00:54:10,690
can just give it a name or the colon is

00:54:08,920 --> 00:54:12,609
optional to make it more clear this is a

00:54:10,690 --> 00:54:16,359
target and not merely a file name and so

00:54:12,609 --> 00:54:18,300
this super simple target is like maybe

00:54:16,359 --> 00:54:22,390
the simplest variation of a target means

00:54:18,300 --> 00:54:25,720
the target named go default library in

00:54:22,390 --> 00:54:27,609
the same module that's a basal word in

00:54:25,720 --> 00:54:29,260
the same module where I am and a module

00:54:27,609 --> 00:54:33,390
is simply a directory that has a build

00:54:29,260 --> 00:54:39,040
file in it so this is a reference to

00:54:33,390 --> 00:54:42,010
this guy so again in a workspace the

00:54:39,040 --> 00:54:43,630
name is the name under which the sort of

00:54:42,010 --> 00:54:47,080
output of this thing is made available

00:54:43,630 --> 00:54:49,660
that applies here also so this go

00:54:47,080 --> 00:54:52,660
library this this compiles some go code

00:54:49,660 --> 00:54:54,460
into executable go code and it makes it

00:54:52,660 --> 00:54:56,859
available make the output available

00:54:54,460 --> 00:54:59,230
under the name go default library and

00:54:56,859 --> 00:55:00,550
then this binary embeds that into

00:54:59,230 --> 00:55:01,060
something ready to execute at the

00:55:00,550 --> 00:55:05,619
command line

00:55:01,060 --> 00:55:08,650
and it refers to it so this this this

00:55:05,619 --> 00:55:09,099
is a dependency from this rule to this

00:55:08,650 --> 00:55:11,470
rule

00:55:09,099 --> 00:55:13,599
now the detail most of the details here

00:55:11,470 --> 00:55:15,279
are actually kind of go isms and I don't

00:55:13,599 --> 00:55:17,499
want to spend too much of our time on go

00:55:15,279 --> 00:55:19,029
isms because again I use go you know

00:55:17,499 --> 00:55:20,799
like like this much when I really need

00:55:19,029 --> 00:55:21,369
certain go shape things I'm not a go

00:55:20,799 --> 00:55:22,660
expert

00:55:21,369 --> 00:55:23,799
there's probably everyone who raised

00:55:22,660 --> 00:55:27,039
their hand knows a lot more ago than I

00:55:23,799 --> 00:55:30,819
do but I will point out the basil isms

00:55:27,039 --> 00:55:32,410
here so the import that's kind of a go

00:55:30,819 --> 00:55:33,880
ISM some become at that from it so the

00:55:32,410 --> 00:55:37,930
rest of these are basil isms that one's

00:55:33,880 --> 00:55:40,539
a go ISM almost every rule will have a

00:55:37,930 --> 00:55:44,200
name that is the name under which the

00:55:40,539 --> 00:55:46,329
output of that rule can be referred SRC

00:55:44,200 --> 00:55:49,450
s that's that's one of those

00:55:46,329 --> 00:55:50,740
path-dependent naming things probably if

00:55:49,450 --> 00:55:53,829
this was created today it would have

00:55:50,740 --> 00:55:56,349
been named like source or sources but

00:55:53,829 --> 00:55:58,779
it's named SRC s it means sources so

00:55:56,349 --> 00:56:00,519
this is a list of what I'm going to

00:55:58,779 --> 00:56:01,869
compile and we'll see a lot more complex

00:56:00,519 --> 00:56:03,670
variations of that but this is the

00:56:01,869 --> 00:56:08,470
shortest form it's an array with one

00:56:03,670 --> 00:56:16,019
string in it and so that refers to this

00:56:08,470 --> 00:56:20,049
file import path yeah that's a go ism

00:56:16,019 --> 00:56:22,509
visibility this is a basil ism this says

00:56:20,049 --> 00:56:24,249
from where could this rule be referred

00:56:22,509 --> 00:56:25,720
and there's this notion of trying to

00:56:24,249 --> 00:56:28,269
make your build files expose the

00:56:25,720 --> 00:56:30,640
smallest reasonable surface to the rest

00:56:28,269 --> 00:56:32,200
of your project my project only has one

00:56:30,640 --> 00:56:33,999
source file so it doesn't matter at all

00:56:32,200 --> 00:56:36,549
what I do with visibility but this is a

00:56:33,999 --> 00:56:38,710
good practice until I have a reason that

00:56:36,549 --> 00:56:41,259
I would want to want to refer to just

00:56:38,710 --> 00:56:44,349
this library from the rest of my project

00:56:41,259 --> 00:56:47,650
then I just don't worry about that and I

00:56:44,349 --> 00:56:49,569
make it private and then actually

00:56:47,650 --> 00:56:51,400
generating the binary cuz you've also me

00:56:49,569 --> 00:56:54,880
run this in a moment actually generating

00:56:51,400 --> 00:56:56,739
that binary well I probably want to do

00:56:54,880 --> 00:56:58,420
that from the outside world from from

00:56:56,739 --> 00:57:01,359
other files and so I make that one

00:56:58,420 --> 00:57:02,739
public and that that's a good starting

00:57:01,359 --> 00:57:05,619
point practice if you make everything

00:57:02,739 --> 00:57:07,299
public by default you'll go to edit

00:57:05,619 --> 00:57:09,910
something later and then you'll discover

00:57:07,299 --> 00:57:12,940
that somebody you know 37 links away

00:57:09,910 --> 00:57:14,890
took a dependency on it and you'd rather

00:57:12,940 --> 00:57:16,509
have to have a conversation and

00:57:14,890 --> 00:57:19,310
explicitly make something public if

00:57:16,509 --> 00:57:22,400
somebody's gonna take a dependency on it

00:57:19,310 --> 00:57:32,420
okay so questions on the meaning of this

00:57:22,400 --> 00:57:35,240
file what's what's the granularity on

00:57:32,420 --> 00:57:37,640
you know visibility it's just public

00:57:35,240 --> 00:57:39,560
private that's it there is a there are

00:57:37,640 --> 00:57:40,820
several more variations there's one that

00:57:39,560 --> 00:57:42,830
basically makes it available in this

00:57:40,820 --> 00:57:44,240
sort of subtree is that is actually the

00:57:42,830 --> 00:57:45,920
most commonly use them we'll see that

00:57:44,240 --> 00:57:47,420
come up if you search through the docs

00:57:45,920 --> 00:57:49,370
you can go into it that seems way beyond

00:57:47,420 --> 00:57:56,600
the scope of intro so I don't want to

00:57:49,370 --> 00:57:58,670
dig into visibility in depth in the load

00:57:56,600 --> 00:58:02,630
command where it says slash go that

00:57:58,670 --> 00:58:06,500
means just one directory up in the load

00:58:02,630 --> 00:58:09,530
oh this right here okay so slash slash

00:58:06,500 --> 00:58:11,420
means the root of a workspace if it was

00:58:09,530 --> 00:58:14,150
if it was my if I start up a slash slash

00:58:11,420 --> 00:58:15,980
I mean the root of my workspace if I

00:58:14,150 --> 00:58:21,440
have the name of a workspace before I

00:58:15,980 --> 00:58:22,400
mean the root of that workspace okay any

00:58:21,440 --> 00:58:25,910
other questions on this because I'm

00:58:22,400 --> 00:58:28,370
about to run it okay I would like

00:58:25,910 --> 00:58:30,650
everyone else to try running it so I

00:58:28,370 --> 00:58:33,550
learned the hard lesson that if you show

00:58:30,650 --> 00:58:36,770
people code that code will not execute

00:58:33,550 --> 00:58:41,740
unless you have verified it execute so I

00:58:36,770 --> 00:58:44,720
actually CI this example material on I

00:58:41,740 --> 00:58:47,570
develop it on a Mac and I see I it on

00:58:44,720 --> 00:58:49,550
Linux and Windows so regardless of your

00:58:47,570 --> 00:58:52,700
platform you should find this exact

00:58:49,550 --> 00:58:56,330
thing works but still yet still there

00:58:52,700 --> 00:59:00,980
are little nuances so who has Catalina

00:58:56,330 --> 00:59:02,720
on their Mac the timidness of those

00:59:00,980 --> 00:59:04,760
suggest that maybe people aren't as

00:59:02,720 --> 00:59:07,070
eager or they would have thought so in

00:59:04,760 --> 00:59:10,190
Catalina Apple thought hey let's change

00:59:07,070 --> 00:59:12,710
the shell the default shell the shell

00:59:10,190 --> 00:59:15,410
that they changed it to thinks it's

00:59:12,710 --> 00:59:17,930
great to consider three dots to be a

00:59:15,410 --> 00:59:20,240
shortcut to dot dot slash dot dot so

00:59:17,930 --> 00:59:23,300
that I can do CD dot dot to go up to

00:59:20,240 --> 00:59:24,830
directories and then all of my times I

00:59:23,300 --> 00:59:29,330
was typing basil build that not not

00:59:24,830 --> 00:59:31,610
broke all of a sudden so if you might be

00:59:29,330 --> 00:59:33,020
running on a newish Mac OS you probably

00:59:31,610 --> 00:59:35,030
ought to get in the habit of

00:59:33,020 --> 00:59:39,320
typing the name of a target in Basel in

00:59:35,030 --> 00:59:41,810
quotes now dot dot is Basil's wildcard

00:59:39,320 --> 00:59:43,430
so this means build everything think of

00:59:41,810 --> 00:59:46,010
that as being uh-oh this is maybe the

00:59:43,430 --> 00:59:47,570
sort of moral equivalent of that some

00:59:46,010 --> 00:59:49,850
languages might say like something like

00:59:47,570 --> 00:59:51,250
that to mean like anything however many

00:59:49,850 --> 00:59:54,670
layers deep it is

00:59:51,250 --> 00:59:57,290
but yeah get in the habit of using the

00:59:54,670 --> 00:59:58,550
of quoting those things or else you will

00:59:57,290 --> 01:00:00,410
tell people to try to the command and

00:59:58,550 --> 01:00:05,330
they'll say I got some weird basil error

01:00:00,410 --> 01:00:07,430
and it had this in it hey blame zsh okay

01:00:05,330 --> 01:00:08,920
next if somebody is running on Windows

01:00:07,430 --> 01:00:11,000
depending on how they're configured

01:00:08,920 --> 01:00:14,290
sometimes when you mention one of these

01:00:11,000 --> 01:00:19,600
names that starts with two slashes well

01:00:14,290 --> 01:00:22,160
um sometimes the windows MSS machinery

01:00:19,600 --> 01:00:25,100
helpfully takes away one of the slashes

01:00:22,160 --> 01:00:26,990
for you on the way end basil so if you

01:00:25,100 --> 01:00:29,600
depending on the version you're running

01:00:26,990 --> 01:00:31,010
you need one of these two commands so

01:00:29,600 --> 01:00:32,869
I've gotten in a habit of what I'm

01:00:31,010 --> 01:00:34,490
saying until you know you don't need

01:00:32,869 --> 01:00:36,380
them if you just stick those commands in

01:00:34,490 --> 01:00:38,480
if you have some fear someone might run

01:00:36,380 --> 01:00:43,040
your script on Windows this will disable

01:00:38,480 --> 01:00:44,390
that kind of mangling so I would say I

01:00:43,040 --> 01:00:46,790
don't even really have to guess it's

01:00:44,390 --> 01:00:48,350
pretty clear that in the environment in

01:00:46,790 --> 01:00:51,680
which the tool grow up and the syntax

01:00:48,350 --> 01:00:53,420
emerged it was a Linux it was on Linux

01:00:51,680 --> 01:00:55,850
and with the shell that didn't do any

01:00:53,420 --> 01:00:57,530
mangling and so it's just uh well

01:00:55,850 --> 01:00:59,630
whoever designed that that that target

01:00:57,530 --> 01:01:01,869
naming syntax got unlucky in two

01:00:59,630 --> 01:01:04,609
different ways depending on platform so

01:01:01,869 --> 01:01:07,190
anyway these are good practices good

01:01:04,609 --> 01:01:08,570
hygiene prototype these so if I type so

01:01:07,190 --> 01:01:09,859
I know all the commands in this shell

01:01:08,570 --> 01:01:11,840
script work because these are the ones

01:01:09,859 --> 01:01:13,310
that run in CI on multiple platforms so

01:01:11,840 --> 01:01:18,710
I know that I can run this and it will

01:01:13,310 --> 01:01:21,260
work so I will now do so so I guess I'm

01:01:18,710 --> 01:01:23,390
in the change into that one directory so

01:01:21,260 --> 01:01:29,830
actually yeah I just realize I need to

01:01:23,390 --> 01:01:35,350
do a there's probably going to be more

01:01:29,830 --> 01:01:35,350
is that big enough more back row

01:01:35,980 --> 01:01:46,960
a bit more okay is that big enough how

01:01:41,290 --> 01:01:48,820
about that is that good okay so I'm

01:01:46,960 --> 01:01:50,680
gonna run that that command I would

01:01:48,820 --> 01:01:54,099
encourage everyone to try it cuz it

01:01:50,680 --> 01:01:56,050
blows up well there's a few people here

01:01:54,099 --> 01:01:57,400
with me who can help and yeah there are

01:01:56,050 --> 01:01:58,960
some ringers in the room here who have

01:01:57,400 --> 01:02:00,730
obviously is basil quite extensively you

01:01:58,960 --> 01:02:03,520
can kind of help if it blows up for you

01:02:00,730 --> 01:02:05,980
so I have of course run this a number of

01:02:03,520 --> 01:02:07,660
times so it didn't really have to do

01:02:05,980 --> 01:02:08,950
anything because basil is really good at

01:02:07,660 --> 01:02:11,349
knowing whether it has to do work that's

01:02:08,950 --> 01:02:13,390
kind of the whole point so it knows my

01:02:11,349 --> 01:02:14,530
input that I haven't edited my input so

01:02:13,390 --> 01:02:16,119
it knows not to do anything

01:02:14,530 --> 01:02:18,010
and so my build completed almost

01:02:16,119 --> 01:02:19,930
immediately I guess what the critical

01:02:18,010 --> 01:02:21,280
path was zero that's great

01:02:19,930 --> 01:02:23,829
so basically in this case all that

01:02:21,280 --> 01:02:25,390
elapsed was startup time you'll note

01:02:23,829 --> 01:02:28,000
that if I run it again and again see how

01:02:25,390 --> 01:02:30,640
it gets a lot faster so the basil

01:02:28,000 --> 01:02:33,220
command I'm running that's just a CLI

01:02:30,640 --> 01:02:35,109
the actual basil process is that this

01:02:33,220 --> 01:02:36,820
this daemon process to get started up

01:02:35,109 --> 01:02:38,050
and then it stays running so as long as

01:02:36,820 --> 01:02:41,589
you're running basil commands with some

01:02:38,050 --> 01:02:43,540
frequency or if you're using an IDE that

01:02:41,589 --> 01:02:44,710
has basil integration it's going to be

01:02:43,540 --> 01:02:46,960
running commands for you with great

01:02:44,710 --> 01:02:48,760
frequency behind the scenes as long as

01:02:46,960 --> 01:02:49,720
that's happening this this daemon

01:02:48,760 --> 01:02:52,770
process will be running on your machine

01:02:49,720 --> 01:02:55,210
you'll get this very very fast responses

01:02:52,770 --> 01:02:57,160
effect in depending on the tooling

01:02:55,210 --> 01:02:59,440
you're using I don't know if the go does

01:02:57,160 --> 01:03:01,000
this but like the the typescript tooling

01:02:59,440 --> 01:03:03,190
can actually keep a copy of the types of

01:03:01,000 --> 01:03:04,599
compiler hot ready to compile your files

01:03:03,190 --> 01:03:07,150
for you again without even launching the

01:03:04,599 --> 01:03:09,579
compiler again but not really relevant

01:03:07,150 --> 01:03:11,560
here and go so I like a raise of hands

01:03:09,579 --> 01:03:14,619
if you can do this basil build and have

01:03:11,560 --> 01:03:16,300
it work on your computer raise your

01:03:14,619 --> 01:03:17,859
hands if you if you have any any

01:03:16,300 --> 01:03:20,440
difficulty or want someone to see if

01:03:17,859 --> 01:03:22,000
they can help you so anyone who can

01:03:20,440 --> 01:03:24,300
offer help to those around them please

01:03:22,000 --> 01:03:33,790
do so Oh

01:03:24,300 --> 01:03:36,730
need help in the front row too ok so Wow

01:03:33,790 --> 01:03:38,170
a little bit of help is going on this is

01:03:36,730 --> 01:03:40,240
the most common thing you do when you're

01:03:38,170 --> 01:03:42,430
just trying to do like a like does my

01:03:40,240 --> 01:03:43,839
whole thing work we'll just try to build

01:03:42,430 --> 01:03:45,339
everything right if you just try to

01:03:43,839 --> 01:03:47,380
build everything in your work space

01:03:45,339 --> 01:03:49,220
you're likely discovered to discover

01:03:47,380 --> 01:03:52,250
anything that's broken

01:03:49,220 --> 01:03:55,280
if you know what you want to build then

01:03:52,250 --> 01:03:56,569
you can ask to build it and then this is

01:03:55,280 --> 01:03:58,970
another example of short the

01:03:56,569 --> 01:04:02,299
shortcutting based syntax these two

01:03:58,970 --> 01:04:05,660
targets are identical if you if you're

01:04:02,299 --> 01:04:07,760
inside a directory a basil module

01:04:05,660 --> 01:04:09,920
technically and you have a rule named

01:04:07,760 --> 01:04:12,170
the same as the directory you can leave

01:04:09,920 --> 01:04:13,880
off the name or Target it you can leave

01:04:12,170 --> 01:04:14,329
off the name of the target so if I look

01:04:13,880 --> 01:04:16,970
in this

01:04:14,329 --> 01:04:19,010
so groceries has a build file so

01:04:16,970 --> 01:04:21,589
therefore groceries is a module and in

01:04:19,010 --> 01:04:23,869
there it has a target called groceries

01:04:21,589 --> 01:04:26,890
and that enables me to use this shortcut

01:04:23,869 --> 01:04:26,890
II syntax here

01:04:27,220 --> 01:04:34,369
so basically line 20 is equivalent to

01:04:30,170 --> 01:04:35,990
line 19 so I know a couple of people are

01:04:34,369 --> 01:04:36,530
getting help any questions on what we're

01:04:35,990 --> 01:04:46,119
seeing

01:04:36,530 --> 01:04:48,500
while the help is underway flee flee

01:04:46,119 --> 01:04:53,420
alex has to escape before we get to the

01:04:48,500 --> 01:04:55,309
JavaScript part because I might ask him

01:04:53,420 --> 01:04:57,559
hard questions from from the front of

01:04:55,309 --> 01:04:59,119
the room if he was here in the room did

01:04:57,559 --> 01:05:00,980
have a problem over here for someone

01:04:59,119 --> 01:05:04,309
that yeah he did not have bash on his

01:05:00,980 --> 01:05:06,319
machine and so what the command at least

01:05:04,309 --> 01:05:08,089
at some point implicitly it runs bash

01:05:06,319 --> 01:05:11,599
and so he was getting a window there if

01:05:08,089 --> 01:05:13,960
you run this shell script line one makes

01:05:11,599 --> 01:05:17,930
the shell script try to execute and bash

01:05:13,960 --> 01:05:19,640
I merely typed the stuff inside so that

01:05:17,930 --> 01:05:21,529
if you copy and pasted the command out

01:05:19,640 --> 01:05:23,720
and you happen to be on a different

01:05:21,529 --> 01:05:25,279
shell it would work but in fact you

01:05:23,720 --> 01:05:26,630
could copy and paste these lines out and

01:05:25,279 --> 01:05:30,319
run them like at the Windows command

01:05:26,630 --> 01:05:32,420
prompt it's either it's either 11.2 or

01:05:30,319 --> 01:05:34,279
2.0 one of them they relieved the need

01:05:32,420 --> 01:05:37,309
to always have them sis you can actually

01:05:34,279 --> 01:05:41,150
of an emphasis free machine yeah one to

01:05:37,309 --> 01:05:44,869
one okay there's a lot of Windows rough

01:05:41,150 --> 01:05:46,609
edges still though there was a reason

01:05:44,869 --> 01:05:50,289
why I develop it on the Mac and then I

01:05:46,609 --> 01:05:50,289
debug problems that I hit on Windows

01:05:50,559 --> 01:06:01,210
okay any more questions and relooking

01:05:54,170 --> 01:06:01,210
enough making this thing run cool okay

01:06:02,110 --> 01:06:11,540
so in the interest of time we're gonna

01:06:06,920 --> 01:06:14,990
step to our next workspace yeah take me

01:06:11,540 --> 01:06:17,780
somebody okay to people now who are

01:06:14,990 --> 01:06:20,420
problems with Xcode and I don't know max

01:06:17,780 --> 01:06:23,570
at all okay so if you haven't run Xcode

01:06:20,420 --> 01:06:28,280
just go run Xcode like just run it on

01:06:23,570 --> 01:06:31,670
your Mac right something happened with

01:06:28,280 --> 01:06:34,700
Catalina and ah Alfred don't get along

01:06:31,670 --> 01:06:37,720
correctly yet so run Xcode on your Mac

01:06:34,700 --> 01:06:39,800
and if you have not run it before a

01:06:37,720 --> 01:06:41,780
message will come up saying do you want

01:06:39,800 --> 01:06:45,560
to install the extra Xcode tools and

01:06:41,780 --> 01:06:46,820
tell it yes and if you do that most

01:06:45,560 --> 01:06:51,290
likely you will no longer hit whatever

01:06:46,820 --> 01:07:00,890
problem you're hitting any more

01:06:51,290 --> 01:07:02,990
questions um when we get to like the

01:07:00,890 --> 01:07:04,670
next more complex one I'm gonna dig into

01:07:02,990 --> 01:07:07,730
those and just point out some bits and

01:07:04,670 --> 01:07:09,470
pieces about them yeah oh the question

01:07:07,730 --> 01:07:11,120
was are we gonna go look at these

01:07:09,470 --> 01:07:13,250
directories that get sim linked into

01:07:11,120 --> 01:07:14,720
your directory when you run basil and

01:07:13,250 --> 01:07:16,520
the answer is we will look at those a

01:07:14,720 --> 01:07:18,050
bit as we step into a little more

01:07:16,520 --> 01:07:19,910
complex example I actually have them

01:07:18,050 --> 01:07:21,110
hidden in this IDE that I'm running but

01:07:19,910 --> 01:07:26,330
I'll I'll bring them up in a way that I

01:07:21,110 --> 01:07:27,440
can that we can see them okay every

01:07:26,330 --> 01:07:30,410
ready to look at ready to look at

01:07:27,440 --> 01:07:32,150
another workspace okay so now that

01:07:30,410 --> 01:07:34,670
you've seen one workspace I'm gonna

01:07:32,150 --> 01:07:38,030
consider everyone in the room an expert

01:07:34,670 --> 01:07:40,100
on everything we've already seen so I

01:07:38,030 --> 01:07:41,810
guess what how far are we in here it

01:07:40,100 --> 01:07:43,640
weren't wearing our in a few minutes in

01:07:41,810 --> 01:07:48,350
so you are now an expert in those so I'm

01:07:43,640 --> 01:07:50,180
only going to point out the new stuff my

01:07:48,350 --> 01:07:54,790
basil version is the same nothing new

01:07:50,180 --> 01:07:58,160
and my basil RC so again there's a path

01:07:54,790 --> 01:08:02,350
dependency here so this tool emerged

01:07:58,160 --> 01:08:06,620
deep inside Google many years ago like

01:08:02,350 --> 01:08:09,350
many companies Google had like corporate

01:08:06,620 --> 01:08:12,380
computer enterprise management tools

01:08:09,350 --> 01:08:13,460
available so if they wanted to solve the

01:08:12,380 --> 01:08:14,930
problem of

01:08:13,460 --> 01:08:17,930
make sure everyone in this entire

01:08:14,930 --> 01:08:19,549
company has the right Java version they

01:08:17,930 --> 01:08:21,890
could go configure some computer

01:08:19,549 --> 01:08:25,190
management tools just blast the right

01:08:21,890 --> 01:08:27,529
Java unto everybody's computer and so

01:08:25,190 --> 01:08:29,690
when they implemented their build tool

01:08:27,529 --> 01:08:32,239
it was super convenient to just assume

01:08:29,690 --> 01:08:35,390
that every computer in the org has the

01:08:32,239 --> 01:08:37,160
right Java available on it that's not a

01:08:35,390 --> 01:08:39,049
very hermetic thing to do but it's a

01:08:37,160 --> 01:08:41,480
very practical thing to do if you're

01:08:39,049 --> 01:08:44,690
building an internal enterprise tool so

01:08:41,480 --> 01:08:47,180
by default the Java support inside basil

01:08:44,690 --> 01:08:51,049
assumes that it's just going to call the

01:08:47,180 --> 01:08:53,440
Java on your computer well if you do

01:08:51,049 --> 01:08:55,400
that today you get these nice little

01:08:53,440 --> 01:08:58,940
deprecation warnings saying you're not

01:08:55,400 --> 01:09:01,009
supposed to do that anymore so I'm going

01:08:58,940 --> 01:09:03,799
to show this like this is a future

01:09:01,009 --> 01:09:05,870
compatible way to do a basil with Java

01:09:03,799 --> 01:09:08,690
and that future compatible way is to

01:09:05,870 --> 01:09:10,759
assume that a day will arrive and some I

01:09:08,690 --> 01:09:12,830
cannot guess how many versions away it

01:09:10,759 --> 01:09:15,950
will be but I will guess at some point a

01:09:12,830 --> 01:09:17,870
day will arrive when it will say no no

01:09:15,950 --> 01:09:19,880
we don't ship with basil support you got

01:09:17,870 --> 01:09:23,150
to go import that if you need it right

01:09:19,880 --> 01:09:26,299
now you have to do this bit of gunk here

01:09:23,150 --> 01:09:29,600
that basically redirects the built-in

01:09:26,299 --> 01:09:32,630
basil support basil Java support to use

01:09:29,600 --> 01:09:35,890
a copy of Java that you gave it instead

01:09:32,630 --> 01:09:39,410
of using a Java on your computer and so

01:09:35,890 --> 01:09:42,739
yeah it's you're sort of paying a cost

01:09:39,410 --> 01:09:46,430
of complexity of doing this but if you

01:09:42,739 --> 01:09:48,560
want a hermetic ver Java version

01:09:46,430 --> 01:09:50,390
delivered by the build tooling so you

01:09:48,560 --> 01:09:52,130
know every builds using that exact same

01:09:50,390 --> 01:09:53,330
version there is a way to do that in

01:09:52,130 --> 01:09:55,250
basil and that's what I'm choosing to

01:09:53,330 --> 01:09:58,400
show here even though I suspect that

01:09:55,250 --> 01:10:00,739
most people using it scale today are not

01:09:58,400 --> 01:10:03,500
using this fairly new mechanism they're

01:10:00,739 --> 01:10:05,239
using the older mechanism which just

01:10:03,500 --> 01:10:08,900
assumed you had the right Java version

01:10:05,239 --> 01:10:10,820
on the machine ok so the meaning of this

01:10:08,900 --> 01:10:13,040
precise meaning of this doesn't matter I

01:10:10,820 --> 01:10:14,690
just I put it in here so that I can be

01:10:13,040 --> 01:10:16,880
doing it in this like future-ready way

01:10:14,690 --> 01:10:19,070
okay so the workspace file

01:10:16,880 --> 01:10:22,969
everyone's here is an expert and so they

01:10:19,070 --> 01:10:25,880
know what lines well 1 3 through 7 mean

01:10:22,969 --> 01:10:27,410
this is all this is all stuff we notice

01:10:25,880 --> 01:10:30,130
this formatting here

01:10:27,410 --> 01:10:33,340
I hit save they got Auto formatted

01:10:30,130 --> 01:10:39,280
there's a tool you should be using

01:10:33,340 --> 01:10:42,110
called build a fire depending on how

01:10:39,280 --> 01:10:44,500
you've installed your basil it might or

01:10:42,110 --> 01:10:47,540
might not arrive with build the fire

01:10:44,500 --> 01:10:49,130
don't worry about it now it's a kind of

01:10:47,540 --> 01:10:53,030
a pain to go mess with it now live on

01:10:49,130 --> 01:10:54,890
the spot but in your real work go to the

01:10:53,030 --> 01:10:56,720
effort of setting up your ide to work

01:10:54,890 --> 01:10:58,870
with build a fire so that you get this

01:10:56,720 --> 01:11:01,100
nice auto formatting so like for example

01:10:58,870 --> 01:11:02,810
trailing spaces look they just went away

01:11:01,100 --> 01:11:05,150
so that's that that's what you're seeing

01:11:02,810 --> 01:11:07,340
there so that's not my IDE knowing how

01:11:05,150 --> 01:11:09,230
to do that that's my I have a plug-in in

01:11:07,340 --> 01:11:10,580
my IDE but the plug-in just calls build

01:11:09,230 --> 01:11:14,950
a fire which is a command-line tool that

01:11:10,580 --> 01:11:18,770
does this all the formatting okay so

01:11:14,950 --> 01:11:20,720
this so-called new Java support now

01:11:18,770 --> 01:11:23,270
right now the new Java support is just a

01:11:20,720 --> 01:11:25,130
wrapper around the old Java support but

01:11:23,270 --> 01:11:26,990
again if you want to not get any

01:11:25,130 --> 01:11:29,120
warnings or debora your deprecation

01:11:26,990 --> 01:11:31,520
alerts you want to like use the new the

01:11:29,120 --> 01:11:33,680
official new way to do java it's called

01:11:31,520 --> 01:11:36,200
not surprisingly rules Java you probably

01:11:33,680 --> 01:11:39,260
saw that rules underscore syntax several

01:11:36,200 --> 01:11:40,520
times yesterday so this is what you get

01:11:39,260 --> 01:11:42,350
if you go to the rules Java

01:11:40,520 --> 01:11:45,710
documentation release notes it tells you

01:11:42,350 --> 01:11:49,220
to put this in and then just like we saw

01:11:45,710 --> 01:11:51,890
with go you have to go inside that and

01:11:49,220 --> 01:11:54,070
load a couple of more things and call

01:11:51,890 --> 01:11:55,700
them so you have to give the Java tools

01:11:54,070 --> 01:11:57,470
permission to load their own

01:11:55,700 --> 01:11:59,090
dependencies and then you have to tell

01:11:57,470 --> 01:12:01,100
them to register their tool change that

01:11:59,090 --> 01:12:10,010
means what that basically means wire

01:12:01,100 --> 01:12:14,540
wire up to that stuff next I said I want

01:12:10,010 --> 01:12:16,940
to like deliver the JDK as part of my

01:12:14,540 --> 01:12:19,100
build like like we got we kind of got

01:12:16,940 --> 01:12:21,080
this by default with go it's a little

01:12:19,100 --> 01:12:24,080
bit of a speed bump with Java you have

01:12:21,080 --> 01:12:26,120
to do some extra stuff and so figuring

01:12:24,080 --> 01:12:27,920
out the exact extra stuff I had to put

01:12:26,120 --> 01:12:29,870
in here was not quite as trivial as it

01:12:27,920 --> 01:12:31,250
should have been but if you just look

01:12:29,870 --> 01:12:32,780
through all these lines the details

01:12:31,250 --> 01:12:34,760
don't matter much so basically I am

01:12:32,780 --> 01:12:36,620
going and grabbing or making available

01:12:34,760 --> 01:12:38,630
three different JDK s for the three

01:12:36,620 --> 01:12:40,430
different platforms I care about and

01:12:38,630 --> 01:12:41,600
again you have this all on your local

01:12:40,430 --> 01:12:43,790
fire

01:12:41,600 --> 01:12:46,130
and I'm not exactly sure but I get I

01:12:43,790 --> 01:12:47,840
guess they're using and I guess wherever

01:12:46,130 --> 01:12:51,290
I got this from some somewhere inside

01:12:47,840 --> 01:12:53,900
the documentation or discussion I guess

01:12:51,290 --> 01:12:55,820
they're using azules azules Java

01:12:53,900 --> 01:12:58,610
implementation I did not know that that

01:12:55,820 --> 01:13:00,050
that was kind of I did I just did can is

01:12:58,610 --> 01:13:02,750
anyone allowed to tell me whether Google

01:13:00,050 --> 01:13:04,340
uses azules Java is that a known fact is

01:13:02,750 --> 01:13:06,500
that a secret I don't know

01:13:04,340 --> 01:13:15,620
but points it's not it's not Sun Java

01:13:06,500 --> 01:13:18,500
it's Azul so um next a Java dependency

01:13:15,620 --> 01:13:20,620
so I felt like a Java program that

01:13:18,500 --> 01:13:23,480
didn't pull the dependency was just

01:13:20,620 --> 01:13:25,370
deeply unrealistic right every Java

01:13:23,480 --> 01:13:28,700
program pulls dependency so the very

01:13:25,370 --> 01:13:31,070
very simplest way to bring in dependency

01:13:28,700 --> 01:13:34,370
is this rule called HTTP jar now where

01:13:31,070 --> 01:13:39,260
does that come from as usually you do a

01:13:34,370 --> 01:13:41,210
search so basil tools is where HTTP jars

01:13:39,260 --> 01:13:43,490
cos so it's actually a built-in it ships

01:13:41,210 --> 01:13:46,340
with basil the ability to go pull a jar

01:13:43,490 --> 01:13:48,020
file from an HTTP URL and make it

01:13:46,340 --> 01:13:50,620
available inside your java code so again

01:13:48,020 --> 01:13:53,090
it's this is path dependence is because

01:13:50,620 --> 01:13:54,500
basil grew up as blaze inside Google

01:13:53,090 --> 01:13:57,020
where Java was a super common language

01:13:54,500 --> 01:13:59,390
so it's not even like this this ability

01:13:57,020 --> 01:14:02,000
to get an HP ACB jar it's not even in

01:13:59,390 --> 01:14:06,470
rules Java it's in the built-in basil

01:14:02,000 --> 01:14:07,940
kit I don't know that yeah I don't know

01:14:06,470 --> 01:14:09,080
if there's documentation that or if you

01:14:07,940 --> 01:14:12,170
just have to go look around to see

01:14:09,080 --> 01:14:15,200
what's where but in any event this is

01:14:12,170 --> 01:14:16,910
sort of like HTTP archive except instead

01:14:15,200 --> 01:14:18,650
of getting an archive and like you know

01:14:16,910 --> 01:14:20,210
archiving it and making available as a

01:14:18,650 --> 01:14:22,370
workspace that way it makes it available

01:14:20,210 --> 01:14:24,020
as a jar so we'll see this used in a

01:14:22,370 --> 01:14:35,530
minute so any questions about this

01:14:24,020 --> 01:14:35,530
workspace and what this does so far yeah

01:14:36,010 --> 01:14:41,650
you have three different J decays in

01:14:37,840 --> 01:14:45,010
there Windows Mac OS n I guess Linux

01:14:41,650 --> 01:14:49,210
what in the HTTP archive yes we'll all

01:14:45,010 --> 01:14:51,460
three of them be downloaded so as trying

01:14:49,210 --> 01:14:53,230
to think I investigated this and I think

01:14:51,460 --> 01:14:56,050
the answer was that only when they're

01:14:53,230 --> 01:14:58,840
actually referenced but I'm not 100%

01:14:56,050 --> 01:15:00,219
sure it's possible the first time you

01:14:58,840 --> 01:15:02,199
run this little pull all three even

01:15:00,219 --> 01:15:03,880
though you only use one I just I got

01:15:02,199 --> 01:15:06,940
some were nodding yes apparently that's

01:15:03,880 --> 01:15:09,310
the case I believe I saw some discussion

01:15:06,940 --> 01:15:12,010
go by at some point about whether some

01:15:09,310 --> 01:15:14,620
aspects of a workspace loading could be

01:15:12,010 --> 01:15:18,010
performed lazily but right now I guess

01:15:14,620 --> 01:15:20,949
it's performed eagerly I want to try to

01:15:18,010 --> 01:15:23,650
find a nice way to say this if you're

01:15:20,949 --> 01:15:25,449
concerned about bits on the wire or bits

01:15:23,650 --> 01:15:28,360
on a disk you're going to have a bad

01:15:25,449 --> 01:15:32,050
time in many many ways with this toolset

01:15:28,360 --> 01:15:33,580
so you just get used to using up well

01:15:32,050 --> 01:15:35,469
you should have a lot of a lot of bytes

01:15:33,580 --> 01:15:37,750
of RAM and a lot of bytes on your disk

01:15:35,469 --> 01:15:38,770
and a really fast pipe because you're

01:15:37,750 --> 01:15:40,960
probably gonna be fetching a lot of

01:15:38,770 --> 01:15:44,699
stuff and like fetching an extra JDK

01:15:40,960 --> 01:15:48,130
like I mean I work in node and our

01:15:44,699 --> 01:15:51,760
projects have 700 megabytes of node

01:15:48,130 --> 01:15:53,710
modules pull u3 all three of these

01:15:51,760 --> 01:15:55,840
jdk is add up to a lot less than that

01:15:53,710 --> 01:15:57,550
and that's like each project I have has

01:15:55,840 --> 01:15:59,949
700 megabytes the dependencies in the

01:15:57,550 --> 01:16:04,600
node world so I don't get stressed about

01:15:59,949 --> 01:16:06,370
it more questions okay

01:16:04,600 --> 01:16:08,050
so we've not seen how does the how does

01:16:06,370 --> 01:16:09,760
it know which one to use right so if you

01:16:08,050 --> 01:16:11,860
look at the adjacent build a zip file

01:16:09,760 --> 01:16:14,080
we're gonna see a feature you have not

01:16:11,860 --> 01:16:16,960
seen yet so there's a thing called alias

01:16:14,080 --> 01:16:19,120
alias says I want to make a new name

01:16:16,960 --> 01:16:20,620
that points to some other name well

01:16:19,120 --> 01:16:22,900
there is a way of using alias where

01:16:20,620 --> 01:16:24,760
you're just like a one-to-one alias but

01:16:22,900 --> 01:16:27,280
alias let's use this basil built-in

01:16:24,760 --> 01:16:29,230
feature called select and the details

01:16:27,280 --> 01:16:32,969
here don't matter but the essence is

01:16:29,230 --> 01:16:36,969
that some stuff gets defined by default

01:16:32,969 --> 01:16:38,949
right so these these targets get defined

01:16:36,969 --> 01:16:41,290
by default based on the platform you're

01:16:38,949 --> 01:16:43,300
running on and this right here is the

01:16:41,290 --> 01:16:45,040
mechanism for picking the correct JDK

01:16:43,300 --> 01:16:47,350
for what platform you're running on now

01:16:45,040 --> 01:16:49,440
there's many many very many other ways

01:16:47,350 --> 01:16:51,270
of using us beyond what I've shown here

01:16:49,440 --> 01:16:52,860
I've shown just like a like a

01:16:51,270 --> 01:16:54,390
straightforward case of using this to

01:16:52,860 --> 01:16:56,190
pick the right JDK for the platform

01:16:54,390 --> 01:16:58,230
you're on but you could do all kinds of

01:16:56,190 --> 01:17:00,360
crazy things too like you could have you

01:16:58,230 --> 01:17:03,780
could have it use a local JDK on Linux

01:17:00,360 --> 01:17:05,400
and a a managed JDK on Windows if you

01:17:03,780 --> 01:17:07,770
wanted to but and what I've done here I

01:17:05,400 --> 01:17:12,930
just downloaded three J decays and then

01:17:07,770 --> 01:17:15,750
I used a select to make the JDK target

01:17:12,930 --> 01:17:25,290
be an alias to the right JDK for the

01:17:15,750 --> 01:17:27,660
computer I'm on yeah so okay the

01:17:25,290 --> 01:17:29,670
question was did I do this I started

01:17:27,660 --> 01:17:30,720
with some bits and pieces I found to try

01:17:29,670 --> 01:17:32,580
to figure out what the correct way to

01:17:30,720 --> 01:17:34,830
does it and then I polished it and edit

01:17:32,580 --> 01:17:39,350
it and television as I could hopefully

01:17:34,830 --> 01:17:41,370
explain in a in a training context so

01:17:39,350 --> 01:17:43,470
unfortunately it appears that right now

01:17:41,370 --> 01:17:45,990
the answer is that each project using

01:17:43,470 --> 01:17:49,170
Java the new way just just copies

01:17:45,990 --> 01:17:50,700
something like this in I would not be

01:17:49,170 --> 01:17:53,100
surprised of some future version of

01:17:50,700 --> 01:17:54,570
rules Java does this for you that would

01:17:53,100 --> 01:17:58,200
affect I'd find it surprising if it

01:17:54,570 --> 01:17:59,880
didn't if like rules Java version 7.3 or

01:17:58,200 --> 01:18:01,980
whatever they get to you might just

01:17:59,880 --> 01:18:05,100
state the Java version you want and it

01:18:01,980 --> 01:18:06,690
just knows what to do there is great

01:18:05,100 --> 01:18:09,690
opportunity for things that right now

01:18:06,690 --> 01:18:12,090
you kind of have to hack your way at two

01:18:09,690 --> 01:18:14,040
to become smooth out and automated

01:18:12,090 --> 01:18:16,400
that's part of that basil Federation

01:18:14,040 --> 01:18:18,660
portion yesterday it was a shame that

01:18:16,400 --> 01:18:20,130
Tony wasn't able to be here to give his

01:18:18,660 --> 01:18:21,930
pitch for it because that's super

01:18:20,130 --> 01:18:23,250
important a whole bunch of things that

01:18:21,930 --> 01:18:25,260
right now like we sort of solve

01:18:23,250 --> 01:18:27,690
ourselves as users of basil are gonna

01:18:25,260 --> 01:18:29,250
get solved for us by basil Federation

01:18:27,690 --> 01:18:33,990
it's a really great thing looking

01:18:29,250 --> 01:18:35,850
forward to it okay so yeah just curious

01:18:33,990 --> 01:18:37,950
can you call that alias function in the

01:18:35,850 --> 01:18:39,800
workspace file instead of Bill file or

01:18:37,950 --> 01:18:44,010
is there any reason not to contact it

01:18:39,800 --> 01:18:48,170
you cannot I don't remember the exact

01:18:44,010 --> 01:18:52,380
reason why you cannot but you cannot

01:18:48,170 --> 01:18:54,930
yeah so trying to understand this basil

01:18:52,380 --> 01:18:58,020
tools as I see conditions is some kind

01:18:54,930 --> 01:19:01,040
of case or if is it sub function sole so

01:18:58,020 --> 01:19:01,040
if you really wanted to know

01:19:01,449 --> 01:19:09,400
if you would go to Basel build and then

01:19:04,870 --> 01:19:11,340
look on github and then it took me to

01:19:09,400 --> 01:19:13,929
the Basel project remember what I said

01:19:11,340 --> 01:19:16,600
these tools are just like sitting in the

01:19:13,929 --> 01:19:19,000
Basel project right so look well there's

01:19:16,600 --> 01:19:20,920
a directory called tools okay and then

01:19:19,000 --> 01:19:23,110
it's a thing called Basel tools and

01:19:20,920 --> 01:19:24,730
those are right let me see here they

01:19:23,110 --> 01:19:30,280
source conditions let's find the

01:19:24,730 --> 01:19:32,440
conditions I clicked the wrong place web

01:19:30,280 --> 01:19:39,310
sites are third-party tools I just

01:19:32,440 --> 01:19:41,890
search for it here conditions there we

01:19:39,310 --> 01:19:46,900
go by the way there's a bunch of example

01:19:41,890 --> 01:19:48,670
of them using conditions in here last

01:19:46,900 --> 01:19:51,070
time I looked at this I could I just

01:19:48,670 --> 01:19:52,449
immediately spotted where the conditions

01:19:51,070 --> 01:19:53,800
were defined I don't know I don't want

01:19:52,449 --> 01:19:55,600
to get too distracted by that but

01:19:53,800 --> 01:19:57,460
basically it's all just sitting there in

01:19:55,600 --> 01:20:00,040
the source if you can figure out how to

01:19:57,460 --> 01:20:03,280
follow the path you would see where it

01:20:00,040 --> 01:20:04,900
has a it has a mechanism to make one of

01:20:03,280 --> 01:20:06,640
these for be defined based on what

01:20:04,900 --> 01:20:08,110
platform you're on and then the Select

01:20:06,640 --> 01:20:10,449
mechanism is the way of saying figure

01:20:08,110 --> 01:20:13,650
out which of these exists and if so go

01:20:10,449 --> 01:20:14,830
use the thing on the other side yeah oh

01:20:13,650 --> 01:20:17,530
okay

01:20:14,830 --> 01:20:18,880
okay any but I don't want to get too

01:20:17,530 --> 01:20:20,469
distracted digging this is not a dig

01:20:18,880 --> 01:20:23,290
into the internals of basel this is a

01:20:20,469 --> 01:20:26,940
like get up and running on basil okay

01:20:23,290 --> 01:20:26,940
more questions on what's going on here

01:20:28,140 --> 01:20:32,110
okay well we're about to about to build

01:20:30,790 --> 01:20:33,010
another thing and if i time it right

01:20:32,110 --> 01:20:34,870
we'll be building

01:20:33,010 --> 01:20:38,710
when we come up on the break here okay

01:20:34,870 --> 01:20:41,290
so just like we saw a go library and a

01:20:38,710 --> 01:20:42,699
go binary like that's not a rule you had

01:20:41,290 --> 01:20:44,590
that they have to be built that way but

01:20:42,699 --> 01:20:46,719
many of them are built that way so here

01:20:44,590 --> 01:20:48,370
is a java library called hello' lib and

01:20:46,719 --> 01:20:50,560
here's a couple job of binaries there's

01:20:48,370 --> 01:20:52,000
a mechanism called run files and i think

01:20:50,560 --> 01:20:53,800
in the interest of time i'm not going to

01:20:52,000 --> 01:20:57,280
dig into the run files mechanism too

01:20:53,800 --> 01:20:59,140
much so I'm going to I'm just gonna I'll

01:20:57,280 --> 01:21:01,900
point out when we get to it when I have

01:20:59,140 --> 01:21:04,150
to but basically we're defining two

01:21:01,900 --> 01:21:06,070
different ways of running it under two

01:21:04,150 --> 01:21:10,320
different names and when you call it

01:21:06,070 --> 01:21:10,320
this way but I just

01:21:13,219 --> 01:21:16,280
there's a mechanism our own files we

01:21:14,869 --> 01:21:18,320
will see it briefly in the next example

01:21:16,280 --> 01:21:19,550
I have punted on it for this one because

01:21:18,320 --> 01:21:20,780
it's kind of irrelevant to a lot of

01:21:19,550 --> 01:21:22,820
projects okay

01:21:20,780 --> 01:21:24,289
so I've defined a java binary called

01:21:22,820 --> 01:21:25,999
hello world and another called hello

01:21:24,289 --> 01:21:28,880
worlds the only difference is when you

01:21:25,999 --> 01:21:30,530
call this one only one command line

01:21:28,880 --> 01:21:32,570
parameter is passed and you call this

01:21:30,530 --> 01:21:35,929
one three command line parameters or

01:21:32,570 --> 01:21:37,670
paths there's not a lot to it when you

01:21:35,929 --> 01:21:39,439
run a Java program you have to give it

01:21:37,670 --> 01:21:41,300
the main class name you know except Java

01:21:39,439 --> 01:21:43,729
main class name so that that just

01:21:41,300 --> 01:21:45,079
appears this way and then runtime depths

01:21:43,729 --> 01:21:47,179
this means when I'm running this binary

01:21:45,079 --> 01:21:50,360
code here's some stuff that has to be

01:21:47,179 --> 01:21:52,159
available and now semantically it's

01:21:50,360 --> 01:21:55,519
saying that this code depends on this

01:21:52,159 --> 01:21:57,380
code in a more Java sense that sort of

01:21:55,519 --> 01:22:00,679
means with that Java library this thing

01:21:57,380 --> 01:22:02,900
is going to make a jar and so this line

01:22:00,679 --> 01:22:04,909
means go make sure that the jar that

01:22:02,900 --> 01:22:06,829
came out of that target over there is

01:22:04,909 --> 01:22:09,340
available when I run this so that's

01:22:06,829 --> 01:22:11,719
that's the semantics of this little bit

01:22:09,340 --> 01:22:12,860
and then there's a test and I don't know

01:22:11,719 --> 01:22:14,389
I don't we probably won't look at the

01:22:12,860 --> 01:22:17,780
test I don't want to use up all the time

01:22:14,389 --> 01:22:19,309
on the Java support anyway so let's

01:22:17,780 --> 01:22:21,559
let's take a look at running this so if

01:22:19,309 --> 01:22:23,989
you look at the exercise file again so

01:22:21,559 --> 01:22:25,639
again I run this in CI so I'm reasonably

01:22:23,989 --> 01:22:27,110
confident will work you see the same

01:22:25,639 --> 01:22:29,059
kind of convention again to get around

01:22:27,110 --> 01:22:31,189
the problems so if I just want to build

01:22:29,059 --> 01:22:34,610
everything and I would encourage

01:22:31,189 --> 01:22:36,289
everyone to follow along make sure you

01:22:34,610 --> 01:22:37,699
go into that that two directory because

01:22:36,289 --> 01:22:40,630
that's where we're working now moved on

01:22:37,699 --> 01:22:43,369
to our second example you a basil build

01:22:40,630 --> 01:22:45,829
because I've already done this a number

01:22:43,369 --> 01:22:47,780
of times it's all in my local cache so I

01:22:45,829 --> 01:22:50,929
didn't wait like download multiple JDK

01:22:47,780 --> 01:22:53,059
is off the internet I boldly assumed

01:22:50,929 --> 01:22:54,920
that sitting inside a Google provided

01:22:53,059 --> 01:22:58,369
facility there's probably a whole lot of

01:22:54,920 --> 01:23:01,550
bits available over the Wi-Fi so it

01:22:58,369 --> 01:23:03,139
might work good luck I was hoping to

01:23:01,550 --> 01:23:04,699
time this so if anyone wants to mess

01:23:03,139 --> 01:23:07,070
with it over the break which is three

01:23:04,699 --> 01:23:09,079
minutes from now if you have to wait for

01:23:07,070 --> 01:23:11,090
a long JDK download it should be and

01:23:09,079 --> 01:23:15,260
durable let's try to use the time and

01:23:11,090 --> 01:23:20,329
beteen for QA so questions about this

01:23:15,260 --> 01:23:23,479
bit and by the way I know that I skipped

01:23:20,329 --> 01:23:26,840
this bit right here but yeah go ahead

01:23:23,479 --> 01:23:34,820
oh the alias 30 degree that was defined

01:23:26,840 --> 01:23:37,639
tell me a line number six yeah okay what

01:23:34,820 --> 01:23:41,389
is it used to mean so I glossed over

01:23:37,639 --> 01:23:44,780
that but the answer is this makes a a

01:23:41,389 --> 01:23:48,320
target JDK available this target is at

01:23:44,780 --> 01:23:50,570
the top of my workspace and in fact my

01:23:48,320 --> 01:23:52,789
IDE is actually giving me a hint of the

01:23:50,570 --> 01:23:55,249
name of this target where it's used from

01:23:52,789 --> 01:23:57,199
is actually this is kind of odd it's

01:23:55,249 --> 01:23:58,429
used from over in the basilar sea so

01:23:57,199 --> 01:24:00,229
over on the basilar sea where I said I

01:23:58,429 --> 01:24:02,900
headed that configuration from outside

01:24:00,229 --> 01:24:04,940
Basel because by default it wants to go

01:24:02,900 --> 01:24:06,079
find your you're like system-level java

01:24:04,940 --> 01:24:09,889
i told it

01:24:06,079 --> 01:24:13,309
oh my java is actually defined inside my

01:24:09,889 --> 01:24:15,380
workspace so this is a hook that points

01:24:13,309 --> 01:24:22,159
the java support back into your own

01:24:15,380 --> 01:24:25,639
workspace yeah go ahead in the workspace

01:24:22,159 --> 01:24:27,650
file yeah you referenced a jar of the

01:24:25,639 --> 01:24:30,829
jar archive yes

01:24:27,650 --> 01:24:35,179
am i right that you could you could have

01:24:30,829 --> 01:24:37,550
also used h maven install and use and i

01:24:35,179 --> 01:24:39,229
will in the next example okay so it's

01:24:37,550 --> 01:24:41,150
your choice incremental complexity yeah

01:24:39,229 --> 01:24:42,499
in this example I did the very simplest

01:24:41,150 --> 01:24:44,239
way of fetching a jar and making it

01:24:42,499 --> 01:24:46,909
available and I really I just read as I

01:24:44,239 --> 01:24:50,510
glossed over right here in the build

01:24:46,909 --> 01:24:52,280
file on line 37 this is where I declared

01:24:50,510 --> 01:24:55,099
a dependency and so again it's that same

01:24:52,280 --> 01:24:56,869
syntax so this app sign with a name well

01:24:55,099 --> 01:24:58,820
that means go look in the workspace to

01:24:56,869 --> 01:25:00,289
find out what that name means and then

01:24:58,820 --> 01:25:01,130
this is just part of the the way they've

01:25:00,289 --> 01:25:03,340
implemented it

01:25:01,130 --> 01:25:05,539
slash slash jar gives you the jar file

01:25:03,340 --> 01:25:07,459
okay we're coming up on break more

01:25:05,539 --> 01:25:09,590
another question yeah my question is

01:25:07,459 --> 01:25:13,280
about the parsing so we have the

01:25:09,590 --> 01:25:15,289
resource files and other things can you

01:25:13,280 --> 01:25:18,260
go through the different layers of

01:25:15,289 --> 01:25:21,019
parsing that basil goes through memory

01:25:18,260 --> 01:25:23,889
builds or runs like kind of what the

01:25:21,019 --> 01:25:23,889
lifecycle is

01:25:27,730 --> 01:25:37,090
yeah yeah so as it starts up it loads

01:25:34,030 --> 01:25:38,860
your workspace it has to load your

01:25:37,090 --> 01:25:40,960
workspace to understand your build files

01:25:38,860 --> 01:25:42,670
so then it loads all the build files it

01:25:40,960 --> 01:25:44,890
has to parse all the code and all the

01:25:42,670 --> 01:25:47,170
build files and that I believe that's

01:25:44,890 --> 01:25:49,660
considered part of analysis but it has

01:25:47,170 --> 01:25:51,760
to construct a graph in memory of what

01:25:49,660 --> 01:25:53,560
all tarted target's exist and how they

01:25:51,760 --> 01:25:55,390
point to each other there's not much to

01:25:53,560 --> 01:25:56,890
look at yet in this example because we

01:25:55,390 --> 01:25:58,750
only have a handful of targets so

01:25:56,890 --> 01:26:00,280
analysis of this taking on micro second

01:25:58,750 --> 01:26:02,080
or whatever but that's what they mean

01:26:00,280 --> 01:26:04,630
someone mentioned that in there that

01:26:02,080 --> 01:26:07,240
they had I think they said 4,000 targets

01:26:04,630 --> 01:26:09,340
in their project if you're parsing all

01:26:07,240 --> 01:26:12,390
the code and building up that graph of

01:26:09,340 --> 01:26:15,130
4,000 targets and some of those involve

01:26:12,390 --> 01:26:18,610
like here actually looking at source

01:26:15,130 --> 01:26:20,500
code along the way it can start to take

01:26:18,610 --> 01:26:21,790
a macroscopic amount of time just to

01:26:20,500 --> 01:26:23,200
look at all your files and figure out

01:26:21,790 --> 01:26:26,260
what work might have to be done and

01:26:23,200 --> 01:26:28,210
that's what they meant by analysis okay

01:26:26,260 --> 01:26:31,870
so we're coming up on break time I don't

01:26:28,210 --> 01:26:33,640
I don't want to do it I will I will try

01:26:31,870 --> 01:26:35,560
to feel how to how do I manage a break

01:26:33,640 --> 01:26:36,910
without making people lose their break

01:26:35,560 --> 01:26:41,520
but letting people keep asking questions

01:26:36,910 --> 01:26:41,520
if they want how should we manage that

01:26:43,530 --> 01:26:48,430
yeah well I want part of my how about

01:26:46,240 --> 01:26:50,860
this we will take it's like a half an

01:26:48,430 --> 01:26:52,570
hour break on the schedule right so we

01:26:50,860 --> 01:26:55,180
will officially take the half hour break

01:26:52,570 --> 01:26:58,240
but I will only take a 15-minute break

01:26:55,180 --> 01:27:00,070
and people can ask me questions before

01:26:58,240 --> 01:27:03,400
we resume the official progress through

01:27:00,070 --> 01:27:05,110
this at the appointed time 30 29 minutes

01:27:03,400 --> 01:27:07,300
from now and then we also brought some

01:27:05,110 --> 01:27:09,220
swag so you want some bouncy light-up

01:27:07,300 --> 01:27:11,980
balls and other things there by the door

01:27:09,220 --> 01:27:14,170
pens bouncy that these balls are the

01:27:11,980 --> 01:27:17,470
best this one some of them don't flash

01:27:14,170 --> 01:27:18,550
some of them are defective but will make

01:27:17,470 --> 01:27:21,370
me a liar here

01:27:18,550 --> 01:27:21,960
the ones that flash are great there we

01:27:21,370 --> 01:27:26,320
go

01:27:21,960 --> 01:27:28,680
recommended pens and stickers if you

01:27:26,320 --> 01:27:28,680
want them

01:27:32,679 --> 01:27:36,130
pause this yeah

01:27:50,440 --> 01:27:53,660

YouTube URL: https://www.youtube.com/watch?v=BGOEq5FdNUQ


