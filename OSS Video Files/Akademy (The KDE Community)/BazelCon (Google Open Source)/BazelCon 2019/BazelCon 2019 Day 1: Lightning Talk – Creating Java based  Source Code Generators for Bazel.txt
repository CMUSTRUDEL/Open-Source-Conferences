Title: BazelCon 2019 Day 1: Lightning Talk â€“ Creating Java based  Source Code Generators for Bazel
Publication date: 2020-01-21
Playlist: BazelCon 2019
Description: 
	Gunnar Wagenknecht, Salesforce event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Gunnar Wagenknecht;
Captions: 
	00:00:01,970 --> 00:00:07,020
all right our next speaker is ganar from

00:00:05,220 --> 00:00:10,260
Salesforce it will talk about source

00:00:07,020 --> 00:00:18,810
code generators written in Java thank

00:00:10,260 --> 00:00:20,789
you hey yes so we do have a tasteful so

00:00:18,810 --> 00:00:22,619
we have a very large code base that

00:00:20,789 --> 00:00:25,619
we're currently migrating to you to

00:00:22,619 --> 00:00:30,289
basil and in what I'm talking here is in

00:00:25,619 --> 00:00:34,130
in this source code we're using a lot of

00:00:30,289 --> 00:00:37,440
yep we're using a we're using a lot of

00:00:34,130 --> 00:00:39,329
custom written or or overtime written

00:00:37,440 --> 00:00:42,090
source code generators that generate

00:00:39,329 --> 00:00:44,010
source code or resources or made other

00:00:42,090 --> 00:00:46,079
files data files that we need as part of

00:00:44,010 --> 00:00:48,960
our built and all of them almost all of

00:00:46,079 --> 00:00:51,239
them are written in Java so this is

00:00:48,960 --> 00:00:56,579
mostly for the folks doing java who is

00:00:51,239 --> 00:01:01,980
doing java it's quite a lot and who's

00:00:56,579 --> 00:01:03,359
writing rules themselves Wow a lot yeah

00:01:01,980 --> 00:01:05,159
so we looked into different

00:01:03,359 --> 00:01:08,610
possibilities general being one of them

00:01:05,159 --> 00:01:12,450
and we decided on you know what we're

00:01:08,610 --> 00:01:14,939
going to you do the real thing in build

00:01:12,450 --> 00:01:19,350
real rules for them how do you do it for

00:01:14,939 --> 00:01:22,470
25 or even like more than 25 generators

00:01:19,350 --> 00:01:25,409
with the template so first we took the

00:01:22,470 --> 00:01:28,740
the most difficult one that we had which

00:01:25,409 --> 00:01:32,009
is used among almost all of our projects

00:01:28,740 --> 00:01:33,299
and that generator by itself is very

00:01:32,009 --> 00:01:36,090
large it has a lot of dependencies

00:01:33,299 --> 00:01:38,130
itself and also lots of inputs it

00:01:36,090 --> 00:01:40,320
requires and then it generates a lot of

00:01:38,130 --> 00:01:42,329
different outputs so what we did is we

00:01:40,320 --> 00:01:43,920
took that one and then we did an

00:01:42,329 --> 00:01:45,930
investigation and try to convert it into

00:01:43,920 --> 00:01:47,369
basil of course first you have to make

00:01:45,930 --> 00:01:49,439
sure that the generator itself is

00:01:47,369 --> 00:01:53,700
probably basic basil files so that it

00:01:49,439 --> 00:01:55,409
builds with basil and from the lessons

00:01:53,700 --> 00:01:57,509
we learned we started building that

00:01:55,409 --> 00:01:59,040
template that we then gonna roll out to

00:01:57,509 --> 00:02:03,000
all the toast generators and it

00:01:59,040 --> 00:02:07,200
basically helped us to once we did the

00:02:03,000 --> 00:02:10,709
first this first big thing we're able to

00:02:07,200 --> 00:02:12,090
do the other 25 in like no time because

00:02:10,709 --> 00:02:14,160
all of a sudden we had the template that

00:02:12,090 --> 00:02:16,760
we could just apply

00:02:14,160 --> 00:02:19,640
so the more we did the faster we get

00:02:16,760 --> 00:02:22,080
what does the template provide

00:02:19,640 --> 00:02:25,200
consistent layout in concepts across all

00:02:22,080 --> 00:02:28,800
of them so basil is new for us the first

00:02:25,200 --> 00:02:31,980
time I looked at basil was May this year

00:02:28,800 --> 00:02:36,150
right so we needed to learn a lot of

00:02:31,980 --> 00:02:39,360
things and what we wanted to ensure is

00:02:36,150 --> 00:02:40,770
that we don't go too crazy in and have

00:02:39,360 --> 00:02:42,960
too much more ants and all of this

00:02:40,770 --> 00:02:45,120
different things so we did it once with

00:02:42,960 --> 00:02:47,220
his giant one and threw it all away

00:02:45,120 --> 00:02:48,870
created a template and then with a

00:02:47,220 --> 00:02:54,030
template we applied it to all the

00:02:48,870 --> 00:02:58,620
pillars again given that we have a large

00:02:54,030 --> 00:03:01,470
project we also wanted to see that the

00:02:58,620 --> 00:03:04,560
things are as performant as possible so

00:03:01,470 --> 00:03:06,660
instead of using Gentle in starting a

00:03:04,560 --> 00:03:08,370
process for each of those builders

00:03:06,660 --> 00:03:10,470
whenever it needs to run we have like a

00:03:08,370 --> 00:03:12,420
couple thousand modules right now in

00:03:10,470 --> 00:03:15,120
maven but when it comes to the basil

00:03:12,420 --> 00:03:17,040
birth it will be way more packages we

00:03:15,120 --> 00:03:18,540
want to make sure that we use persistent

00:03:17,040 --> 00:03:21,870
burgers right from the beginning if

00:03:18,540 --> 00:03:24,690
possible so during our research we

00:03:21,870 --> 00:03:27,090
discovered a few rules a pro and and

00:03:24,690 --> 00:03:30,090
also the SKA rules that have code that

00:03:27,090 --> 00:03:34,500
we could reuse that's why the template

00:03:30,090 --> 00:03:37,800
is open source as well by the way and we

00:03:34,500 --> 00:03:40,800
use Pico CLI to wrap our existing Java

00:03:37,800 --> 00:03:45,000
code of the builder into nice command

00:03:40,800 --> 00:03:47,489
lines that we then can invoke from from

00:03:45,000 --> 00:03:49,230
basil or from the Cabana itself the

00:03:47,489 --> 00:03:52,500
funny story is a lot of those builders

00:03:49,230 --> 00:03:54,350
has been they already have main methods

00:03:52,500 --> 00:03:56,640
because there were command lines before

00:03:54,350 --> 00:03:59,100
because before maybe we're doing and

00:03:56,640 --> 00:04:00,959
then we moved everything to me and then

00:03:59,100 --> 00:04:02,430
we wrap basically all of the pillars and

00:04:00,959 --> 00:04:04,830
may even plug in and over time they

00:04:02,430 --> 00:04:08,400
extended it and get got heavily into

00:04:04,830 --> 00:04:14,190
maven and the template also includes

00:04:08,400 --> 00:04:17,580
examples you can go check it out in the

00:04:14,190 --> 00:04:20,640
git repo a few important things I'd like

00:04:17,580 --> 00:04:24,120
to highlight were try to apply best

00:04:20,640 --> 00:04:26,250
practices but again we're still learning

00:04:24,120 --> 00:04:27,270
so if you see something that you think

00:04:26,250 --> 00:04:29,009
is wrong

00:04:27,270 --> 00:04:32,160
submit a pull request or an issue we're

00:04:29,009 --> 00:04:36,479
happy about any feedback right there is

00:04:32,160 --> 00:04:37,740
the so there's a busy I'll file for for

00:04:36,479 --> 00:04:40,470
the rule definitions of the Builder

00:04:37,740 --> 00:04:43,650
itself on the implementation then we

00:04:40,470 --> 00:04:45,720
have the repositories visit alpha where

00:04:43,650 --> 00:04:48,120
we actually list all the dependencies of

00:04:45,720 --> 00:04:49,710
the builders so as most of our builders

00:04:48,120 --> 00:04:53,750
are written in Java they need to pansies

00:04:49,710 --> 00:04:57,840
we use rules JBM external to fetch those

00:04:53,750 --> 00:05:00,419
we still have there's still some native

00:04:57,840 --> 00:05:03,210
buying in there and I'm trying to figure

00:05:00,419 --> 00:05:07,169
out what it should be replaced with and

00:05:03,210 --> 00:05:10,849
I got some feedback today so I'm

00:05:07,169 --> 00:05:13,500
incorporating that into template soon

00:05:10,849 --> 00:05:16,470
yeah there is the my builder command

00:05:13,500 --> 00:05:19,620
which is basically a nice class that you

00:05:16,470 --> 00:05:21,960
can just use it shows how because our

00:05:19,620 --> 00:05:24,870
eyes CL is being used to add parameters

00:05:21,960 --> 00:05:27,419
to builders it implements a little bit

00:05:24,870 --> 00:05:29,669
of a dummy code generator for you to

00:05:27,419 --> 00:05:31,949
experiment with and then there's the

00:05:29,669 --> 00:05:35,039
invoker which is basically a generic

00:05:31,949 --> 00:05:40,740
worker that established that builder as

00:05:35,039 --> 00:05:42,870
a persistent process yeah all that need

00:05:40,740 --> 00:05:46,770
to be all that needs to be honest clone

00:05:42,870 --> 00:05:48,690
in the template rename it but you can do

00:05:46,770 --> 00:05:51,960
search and replace for everything that's

00:05:48,690 --> 00:05:55,020
my butter and replace it with what you

00:05:51,960 --> 00:05:57,930
like it and dump it into the source code

00:05:55,020 --> 00:06:01,919
repository off of the source code

00:05:57,930 --> 00:06:06,570
generators alright

00:06:01,919 --> 00:06:08,280
I have one more talk in two hours but

00:06:06,570 --> 00:06:11,550
then there's also other people from

00:06:08,280 --> 00:06:13,560
Joe's here talking about the basic

00:06:11,550 --> 00:06:18,050
ellipse plug-in that we kind of brought

00:06:13,560 --> 00:06:18,050
back alive questions

00:06:25,940 --> 00:06:30,990
yes so the question is how do we deal

00:06:28,470 --> 00:06:33,060
with a generated code so that the IDE

00:06:30,990 --> 00:06:35,820
finds generate code do we check it in or

00:06:33,060 --> 00:06:37,470
not our policy is to not check it in

00:06:35,820 --> 00:06:41,940
that's what we've done in the Maven

00:06:37,470 --> 00:06:43,920
world and so basil generated the basil

00:06:41,940 --> 00:06:47,460
generated code ends in the basil

00:06:43,920 --> 00:06:51,660
directory and so what what's happening

00:06:47,460 --> 00:06:53,730
is yes it works nice on basil we have

00:06:51,660 --> 00:06:57,120
yet to find the developer experience in

00:06:53,730 --> 00:06:58,830
the IDE but we're hoping because we're

00:06:57,120 --> 00:07:02,340
also working on the basic flips plug-in

00:06:58,830 --> 00:07:03,240
that it the the basic clips plugin

00:07:02,340 --> 00:07:05,160
reached the target

00:07:03,240 --> 00:07:07,770
it's the output so we can generate the

00:07:05,160 --> 00:07:09,930
classpath inside eclipse and edit edit

00:07:07,770 --> 00:07:13,640
to the IDE so that it finds the source

00:07:09,930 --> 00:07:13,640
code as well as filtered

00:07:25,360 --> 00:07:30,729
how do we find the bill times of basil

00:07:27,909 --> 00:07:33,789
versus the one in the end that is

00:07:30,729 --> 00:07:36,370
difficult to compare because when our

00:07:33,789 --> 00:07:40,270
project was an end that was five years

00:07:36,370 --> 00:07:43,030
ago now now it's in maven and the build

00:07:40,270 --> 00:07:47,979
time from our maven monolith compared to

00:07:43,030 --> 00:07:51,729
the basil model it yes well I can say it

00:07:47,979 --> 00:07:53,530
was cut in half but then also we

00:07:51,729 --> 00:07:55,840
realized that a lot of this depends on

00:07:53,530 --> 00:07:57,490
how the graph dependency graph looks

00:07:55,840 --> 00:07:59,530
like I'm Aiman in spending a lot of time

00:07:57,490 --> 00:08:01,120
with resolving the transitive and

00:07:59,530 --> 00:08:03,460
bringing the transitive and so actually

00:08:01,120 --> 00:08:07,210
compilation maven takes longer because

00:08:03,460 --> 00:08:10,900
it has a much larger craft to to resolve

00:08:07,210 --> 00:08:13,000
against weight so it's really it's

00:08:10,900 --> 00:08:15,539
really tough to do Apple to have a

00:08:13,000 --> 00:08:15,539
comparison

00:08:19,770 --> 00:08:24,330

YouTube URL: https://www.youtube.com/watch?v=-JRpuIKHIWY


