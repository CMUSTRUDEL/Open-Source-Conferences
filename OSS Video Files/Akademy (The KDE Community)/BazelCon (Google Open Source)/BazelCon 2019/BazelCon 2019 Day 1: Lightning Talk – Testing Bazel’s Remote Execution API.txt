Title: BazelCon 2019 Day 1: Lightning Talk – Testing Bazel’s Remote Execution API
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Josh Smith, Codethink event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Josh Smith;
Captions: 
	00:00:00,860 --> 00:00:07,919
hello okay so I I'm Josh Smith I worked

00:00:05,790 --> 00:00:09,780
for code think a software services

00:00:07,919 --> 00:00:12,150
company and I made to talk about how we

00:00:09,780 --> 00:00:17,070
can test the implementations of the

00:00:12,150 --> 00:00:19,350
execution API so primarily for those who

00:00:17,070 --> 00:00:22,199
don't work with the remote cache of

00:00:19,350 --> 00:00:24,869
their execution services basil's wrote

00:00:22,199 --> 00:00:26,779
execution api was released and is an

00:00:24,869 --> 00:00:29,929
open standard for communicating between

00:00:26,779 --> 00:00:33,870
build clients like basil or build stream

00:00:29,929 --> 00:00:38,969
to tools like RBE bill barn build farm

00:00:33,870 --> 00:00:40,230
and build grid but we other than the API

00:00:38,969 --> 00:00:41,969
which is a written piece of

00:00:40,230 --> 00:00:44,070
documentation how do we know that these

00:00:41,969 --> 00:00:49,020
kind of work together and communicate as

00:00:44,070 --> 00:00:50,280
as the API would determine so when we

00:00:49,020 --> 00:00:52,110
came together for this we decided that

00:00:50,280 --> 00:00:55,500
we wanted to test a few things one being

00:00:52,110 --> 00:00:58,260
compatibility so the goal is to test

00:00:55,500 --> 00:00:59,640
that for each of the build clients that

00:00:58,260 --> 00:01:01,590
you implement each of the service that

00:00:59,640 --> 00:01:03,510
you implement they can communicate and

00:01:01,590 --> 00:01:05,790
do a full build of a certain test

00:01:03,510 --> 00:01:06,990
project together this is not exhaustive

00:01:05,790 --> 00:01:09,990
and doesn't test all of the

00:01:06,990 --> 00:01:12,479
functionality but the goal is that we

00:01:09,990 --> 00:01:13,590
can catch most things out and if we

00:01:12,479 --> 00:01:17,070
missed something then hopefully

00:01:13,590 --> 00:01:18,570
implement that in a further fix we also

00:01:17,070 --> 00:01:20,070
want to test performance so it's

00:01:18,570 --> 00:01:23,310
interesting to see how the different

00:01:20,070 --> 00:01:24,530
build clients and the build servers go

00:01:23,310 --> 00:01:27,030
up against each other

00:01:24,530 --> 00:01:28,770
currently we only have performance

00:01:27,030 --> 00:01:32,090
implemented for basil however we are

00:01:28,770 --> 00:01:32,090
hoping to change this in the future

00:01:32,659 --> 00:01:36,829
setting up pipelines so the goal for

00:01:35,100 --> 00:01:39,000
this was how do we how do we test this

00:01:36,829 --> 00:01:41,369
in an easy way that anyone can

00:01:39,000 --> 00:01:42,990
contribute to and hopefully people

00:01:41,369 --> 00:01:45,320
working on these clients or server

00:01:42,990 --> 00:01:48,930
implementations can add their own

00:01:45,320 --> 00:01:51,960
implementations and to be tested so we

00:01:48,930 --> 00:01:54,890
set up a github project with some CI

00:01:51,960 --> 00:01:59,460
built-in so that all it does is spin up

00:01:54,890 --> 00:02:05,250
based on your based on sort of a defined

00:01:59,460 --> 00:02:06,750
set of final work so the goal the goal

00:02:05,250 --> 00:02:09,239
is that you define some conflicts for

00:02:06,750 --> 00:02:12,989
your for your client in your server you

00:02:09,239 --> 00:02:13,810
test these they run on CI with terraform

00:02:12,989 --> 00:02:16,630
kubernetes

00:02:13,810 --> 00:02:19,480
we run a host service in AWS for each of

00:02:16,630 --> 00:02:22,090
the backends so we use eks we spin up

00:02:19,480 --> 00:02:24,209
bill barn build farm little grid we

00:02:22,090 --> 00:02:26,080
currently don't have RBE in the pipeline

00:02:24,209 --> 00:02:28,959
obviously this wouldn't be hosted by

00:02:26,080 --> 00:02:31,750
little us but we don't have this at all

00:02:28,959 --> 00:02:33,670
you see it being enclosed alpha and this

00:02:31,750 --> 00:02:36,959
runs once a week and the goal is that we

00:02:33,670 --> 00:02:41,050
can easily review the different

00:02:36,959 --> 00:02:43,420
compatibilities so so how do we do this

00:02:41,050 --> 00:02:45,010
so i said that we have some basic tests

00:02:43,420 --> 00:02:46,420
that based most basic tests here is the

00:02:45,010 --> 00:02:48,850
check that they work together so you

00:02:46,420 --> 00:02:51,040
spin up a client and a server instance

00:02:48,850 --> 00:02:51,940
and you build a small project so i don't

00:02:51,040 --> 00:02:54,300
know how many of you are familiar with

00:02:51,940 --> 00:02:57,640
up-sale it's an open source project

00:02:54,300 --> 00:02:59,470
which is quite small and can be built

00:02:57,640 --> 00:03:02,680
quite quickly this just checks that the

00:02:59,470 --> 00:03:06,519
work they work together so the pipeline

00:03:02,680 --> 00:03:09,220
pulls in basil or build bond or whatever

00:03:06,519 --> 00:03:11,350
you basil or build stream or whatever

00:03:09,220 --> 00:03:14,050
bill client you're using builds abseil

00:03:11,350 --> 00:03:18,880
against the defined server

00:03:14,050 --> 00:03:23,860
implementation and then displays pass or

00:03:18,880 --> 00:03:26,709
fail on the wiki for compatibility

00:03:23,860 --> 00:03:28,840
matrix we have build stream and req

00:03:26,709 --> 00:03:30,280
which is alternatives to basil for a

00:03:28,840 --> 00:03:32,079
build system that is compatible with the

00:03:30,280 --> 00:03:35,079
row excuse me api there are quite a few

00:03:32,079 --> 00:03:36,579
others we're hoping that people will add

00:03:35,079 --> 00:03:40,540
them we haven't got around to adding all

00:03:36,579 --> 00:03:42,010
of them there are quite a few but even

00:03:40,540 --> 00:03:43,450
with just this compatibility matrix

00:03:42,010 --> 00:03:45,820
alone it's interesting to see how not

00:03:43,450 --> 00:03:49,810
everything is as compatible as we'd like

00:03:45,820 --> 00:03:51,519
with the api obviously some things are

00:03:49,810 --> 00:03:52,840
missing some some functionalities been

00:03:51,519 --> 00:03:54,850
missing between the different server and

00:03:52,840 --> 00:03:57,609
client implementations and most people

00:03:54,850 --> 00:03:59,530
haven't tested it with the systems that

00:03:57,609 --> 00:04:02,650
they don't use but if you wanted to

00:03:59,530 --> 00:04:05,079
switch there would be things missing so

00:04:02,650 --> 00:04:07,049
for performance testing as I said we

00:04:05,079 --> 00:04:10,840
only we've only done this with basil and

00:04:07,049 --> 00:04:13,720
there are a few reasons for this but

00:04:10,840 --> 00:04:16,019
primarily we've we've chosen to build a

00:04:13,720 --> 00:04:18,579
single project so we build basil as our

00:04:16,019 --> 00:04:20,890
performance test basil being quite a

00:04:18,579 --> 00:04:24,270
large project and having quite a long

00:04:20,890 --> 00:04:27,590
ish build time without lots of resources

00:04:24,270 --> 00:04:29,180
we we build basil with build farm

00:04:27,590 --> 00:04:32,510
with the different server

00:04:29,180 --> 00:04:34,400
implementations using basil hopefully we

00:04:32,510 --> 00:04:37,160
can eventually move on to building basil

00:04:34,400 --> 00:04:39,590
with build stream and rack what we

00:04:37,160 --> 00:04:40,940
haven't got that currently and this this

00:04:39,590 --> 00:04:42,560
records the ends when build times which

00:04:40,940 --> 00:04:44,030
is what we currently uses are our main

00:04:42,560 --> 00:04:46,370
performance metric because it's quite

00:04:44,030 --> 00:04:51,440
easy to review this as it changes over

00:04:46,370 --> 00:04:53,510
time but we also monitor some other

00:04:51,440 --> 00:04:55,940
things so we've started monitoring G RPC

00:04:53,510 --> 00:05:02,450
tracing so this isn't quite easy to just

00:04:55,940 --> 00:05:04,070
scan over a table of results but so G

00:05:02,450 --> 00:05:05,870
RPC tracing is the idea that when you're

00:05:04,070 --> 00:05:08,270
doing these row exclusion calls you're

00:05:05,870 --> 00:05:11,000
communicating over G RPC and build barn

00:05:08,270 --> 00:05:14,270
has functionality implemented into part

00:05:11,000 --> 00:05:17,389
of it but not all of it for tracking

00:05:14,270 --> 00:05:19,310
these different processes and allowing

00:05:17,389 --> 00:05:22,639
you to see how long for certain parts

00:05:19,310 --> 00:05:24,500
take we were hoping that we could work

00:05:22,639 --> 00:05:26,810
to implement this in other backends

00:05:24,500 --> 00:05:30,740
because this would allow us to have more

00:05:26,810 --> 00:05:33,889
information when debugging issues but

00:05:30,740 --> 00:05:35,630
that's not done yet so further reading

00:05:33,889 --> 00:05:38,180
there's a blog post that goes on about

00:05:35,630 --> 00:05:41,210
this that was published in the basil

00:05:38,180 --> 00:05:43,789
blog and it goes into detail about how

00:05:41,210 --> 00:05:45,169
the project was started how we've got so

00:05:43,789 --> 00:05:48,110
far this is a few months old at this

00:05:45,169 --> 00:05:49,789
point and there's a few things that we'd

00:05:48,110 --> 00:05:52,610
like to do and this this comes with help

00:05:49,789 --> 00:05:55,550
from the community we can't get it all

00:05:52,610 --> 00:05:58,460
done with the current work force so this

00:05:55,550 --> 00:06:00,710
is a great start performance analysis

00:05:58,460 --> 00:06:02,960
we've got that we don't have everything

00:06:00,710 --> 00:06:07,310
so we're currently monitoring CPU and

00:06:02,960 --> 00:06:09,410
memory usage we could do with more so

00:06:07,310 --> 00:06:10,610
one thing we can work towards doing is

00:06:09,410 --> 00:06:12,320
monitoring the individual for example

00:06:10,610 --> 00:06:14,710
with basil we can monitor the actions

00:06:12,320 --> 00:06:17,630
and how long individual actions take

00:06:14,710 --> 00:06:19,370
we'd like to test other things like API

00:06:17,630 --> 00:06:21,440
correctness we don't currently have that

00:06:19,370 --> 00:06:24,710
where there's been discussions but this

00:06:21,440 --> 00:06:27,050
is quite a lot of work to check that the

00:06:24,710 --> 00:06:30,010
individual implementations are doing

00:06:27,050 --> 00:06:32,990
exactly what the API say we're currently

00:06:30,010 --> 00:06:34,430
doing it via comparing one against the

00:06:32,990 --> 00:06:36,349
other but who's to say that either of

00:06:34,430 --> 00:06:38,999
them are correct that's something that

00:06:36,349 --> 00:06:40,979
is currently in the air

00:06:38,999 --> 00:06:42,449
and obviously adding the clients and the

00:06:40,979 --> 00:06:46,319
server implantations but that's that's

00:06:42,449 --> 00:06:49,349
down to desire to be added we've got the

00:06:46,319 --> 00:06:51,239
main ones implemented if anyone else has

00:06:49,349 --> 00:06:53,939
any server implementations that I'd like

00:06:51,239 --> 00:06:56,249
to propose adding would be appreciative

00:06:53,939 --> 00:06:59,159
if you could open an issue maybe suggest

00:06:56,249 --> 00:07:00,419
examples to look at to add those or even

00:06:59,159 --> 00:07:04,649
add it yourself if you've got the free

00:07:00,419 --> 00:07:06,779
time and for RBE with it being in closed

00:07:04,649 --> 00:07:09,389
alpha I don't think we're gonna have

00:07:06,779 --> 00:07:11,819
that added anytime soon but hopefully

00:07:09,389 --> 00:07:13,409
eventually we can compare its

00:07:11,819 --> 00:07:18,709
compatibility with build stream and

00:07:13,409 --> 00:07:18,709
other clients thank you any questions

00:07:28,999 --> 00:07:51,929
this is this is more of a question of

00:07:31,259 --> 00:07:54,149
this celebrate here can I yes this this

00:07:51,929 --> 00:07:56,459
I guess that's kind of what the

00:07:54,149 --> 00:07:58,559
performance test does and it also double

00:07:56,459 --> 00:08:00,349
checks the compatibility but obviously

00:07:58,559 --> 00:08:02,759
like I said that's only currently basil

00:08:00,349 --> 00:08:04,229
the downsides of that is obviously your

00:08:02,759 --> 00:08:06,839
CI jobs end up running for a lot longer

00:08:04,229 --> 00:08:09,209
and during development cycles of people

00:08:06,839 --> 00:08:11,909
working on this project you it slows you

00:08:09,209 --> 00:08:14,009
down massively and you question how much

00:08:11,909 --> 00:08:19,709
you're gonna flush out from changing

00:08:14,009 --> 00:08:21,419
that so I would I would open the slide

00:08:19,709 --> 00:08:23,099
but I'm not too sure on the current self

00:08:21,419 --> 00:08:26,779
but feel free to take a look it's on the

00:08:23,099 --> 00:08:26,779
home page of the github

00:08:30,110 --> 00:08:53,520
yeah so first question was how do we

00:08:51,390 --> 00:08:54,890
test the performance of the backends the

00:08:53,520 --> 00:08:57,839
performance of the backends is primarily

00:08:54,890 --> 00:09:01,740
judged by comparing the different front

00:08:57,839 --> 00:09:03,600
ends against the backends but obviously

00:09:01,740 --> 00:09:06,420
we don't have multiple front ends right

00:09:03,600 --> 00:09:09,450
now the hope is to implement those so

00:09:06,420 --> 00:09:11,670
right now we can't directly compare

00:09:09,450 --> 00:09:13,650
other than build times which it's using

00:09:11,670 --> 00:09:15,870
basil so you should be able to say that

00:09:13,650 --> 00:09:17,490
this back-end takes a lot longer than

00:09:15,870 --> 00:09:19,410
this back-end something's going on and

00:09:17,490 --> 00:09:23,190
you'd have to dive into that there we

00:09:19,410 --> 00:09:24,960
have CPU and memory graphs that maybe

00:09:23,190 --> 00:09:28,529
could link towards something but there's

00:09:24,960 --> 00:09:36,180
not fine-tuned metrics and for your

00:09:28,529 --> 00:09:39,030
second question which was sorry scale so

00:09:36,180 --> 00:09:40,740
so we only deploy I think it's two

00:09:39,030 --> 00:09:44,820
instances it's it's not much for every

00:09:40,740 --> 00:09:46,230
CI job so the worker runs locally and if

00:09:44,820 --> 00:09:48,480
it's built barn for example you run all

00:09:46,230 --> 00:09:49,800
of the different services on a

00:09:48,480 --> 00:09:53,130
kubernetes cluster and I think it's two

00:09:49,800 --> 00:09:56,610
nodes obviously you can run several

00:09:53,130 --> 00:09:59,640
images docker images in those pods and

00:09:56,610 --> 00:10:00,990
communities so for Bill Barn we have we

00:09:59,640 --> 00:10:02,580
set up the compatibility different

00:10:00,990 --> 00:10:04,530
concurrency there's one worker with

00:10:02,580 --> 00:10:06,150
different concurrency I think built

00:10:04,530 --> 00:10:09,390
build farm does a similar thing build

00:10:06,150 --> 00:10:10,650
grid doesn't but that's detailed in in

00:10:09,390 --> 00:10:12,300
the tables it mentions what the

00:10:10,650 --> 00:10:16,160
concurrency is set for each of those to

00:10:12,300 --> 00:10:16,160
try and give you some comparison

00:10:22,120 --> 00:10:25,780
usually changing the latest greatest

00:10:23,890 --> 00:10:27,760
someone usually opens an issue and says

00:10:25,780 --> 00:10:30,190
can we change this and then someone

00:10:27,760 --> 00:10:32,560
spends ten minutes upgrading it and then

00:10:30,190 --> 00:10:35,320
seeing if it runs so I think currently

00:10:32,560 --> 00:10:40,390
we're on 1.1 I'm not sure

00:10:35,320 --> 00:10:43,440
exactly yeah it's pinned so you have to

00:10:40,390 --> 00:10:43,440
go in and change it in the code

00:10:44,490 --> 00:10:48,749

YouTube URL: https://www.youtube.com/watch?v=uuWV501y1w4


