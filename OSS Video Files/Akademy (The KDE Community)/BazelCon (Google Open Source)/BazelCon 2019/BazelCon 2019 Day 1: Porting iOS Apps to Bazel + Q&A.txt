Title: BazelCon 2019 Day 1: Porting iOS Apps to Bazel + Q&A
Publication date: 2020-01-14
Playlist: BazelCon 2019
Description: 
	Oscar Bonilla, LinkedIn event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Oscar Bonilla;
Captions: 
	00:00:01,220 --> 00:00:06,299
thanks so much

00:00:03,179 --> 00:00:08,340
Benjamin it was great to see you talk

00:00:06,299 --> 00:00:11,550
and it was humorous I think you all

00:00:08,340 --> 00:00:13,620
agree just want to remind you that there

00:00:11,550 --> 00:00:15,360
is a reception after this talk stick

00:00:13,620 --> 00:00:17,100
around I think it's out on the patio I

00:00:15,360 --> 00:00:20,880
can get you more details right after

00:00:17,100 --> 00:00:23,250
this so I'd love to introduce Oscar from

00:00:20,880 --> 00:00:32,009
LinkedIn she's gonna talk about porting

00:00:23,250 --> 00:00:36,600
iOS apps to basil Oscar I guess this is

00:00:32,009 --> 00:00:39,059
a clicker hello yeah feel free to leave

00:00:36,600 --> 00:00:41,430
don't feel guilty this is the last talk

00:00:39,059 --> 00:00:45,000
of the day insta no worries

00:00:41,430 --> 00:00:46,800
long day actually had two separate

00:00:45,000 --> 00:00:49,010
nightmares last night about the stalking

00:00:46,800 --> 00:00:51,539
one the whole auditorium was empty and

00:00:49,010 --> 00:00:52,739
Dmitry just told me you know what we can

00:00:51,539 --> 00:00:55,020
just skip it and I was like yeah I'm

00:00:52,739 --> 00:00:57,600
fine with that so thank you to the

00:00:55,020 --> 00:00:59,340
people remaining the other one was the

00:00:57,600 --> 00:01:01,800
leave guys giving the exact same talk

00:00:59,340 --> 00:01:02,940
that I had prepared and I was like well

00:01:01,800 --> 00:01:06,750
here we go again

00:01:02,940 --> 00:01:09,600
but unfortunately I'm not really I know

00:01:06,750 --> 00:01:11,820
the talkies porting iOS apps to basil

00:01:09,600 --> 00:01:14,750
but this is more like the path we took

00:01:11,820 --> 00:01:17,220
to port our iOS app to Basil's so I

00:01:14,750 --> 00:01:18,930
apologize for that I have a knack for

00:01:17,220 --> 00:01:20,939
coming up with witty titles and they're

00:01:18,930 --> 00:01:23,280
not following through during the talk

00:01:20,939 --> 00:01:26,070
with the weight of the of the talks

00:01:23,280 --> 00:01:28,439
title so this is gonna be like a longer

00:01:26,070 --> 00:01:31,189
version of a talk that I did that was

00:01:28,439 --> 00:01:36,270
called sweat tears and desperation

00:01:31,189 --> 00:01:38,159
porting or app or something like that so

00:01:36,270 --> 00:01:41,340
I'm essentially going to talk about four

00:01:38,159 --> 00:01:43,710
different things one the iOS apps we

00:01:41,340 --> 00:01:46,320
have at LinkedIn and and how we used to

00:01:43,710 --> 00:01:48,780
build them that's the second part

00:01:46,320 --> 00:01:50,700
actually before basal part and then I'm

00:01:48,780 --> 00:01:52,170
going to talk about our migration and

00:01:50,700 --> 00:01:55,409
what it involve and how we accomplish

00:01:52,170 --> 00:01:56,820
that and where we are right now and I'm

00:01:55,409 --> 00:01:59,210
gonna try to make it quick so we can all

00:01:56,820 --> 00:02:02,880
go at a reception and be done with this

00:01:59,210 --> 00:02:05,820
so at LinkedIn we have seven apps in the

00:02:02,880 --> 00:02:08,940
App Store and we have around a hundred

00:02:05,820 --> 00:02:11,430
more than 100 iOS developers that

00:02:08,940 --> 00:02:14,170
produce more than 100 commits per day of

00:02:11,430 --> 00:02:17,560
those seven apps there is one app

00:02:14,170 --> 00:02:20,230
the main LinkedIn app that is orders of

00:02:17,560 --> 00:02:24,280
magnitude bigger than the makes biggest

00:02:20,230 --> 00:02:26,530
app so we and and we have a ton of

00:02:24,280 --> 00:02:29,110
libraries and frameworks hundreds of

00:02:26,530 --> 00:02:30,430
them that we need to support so we have

00:02:29,110 --> 00:02:32,530
these you know there's there's a bunch

00:02:30,430 --> 00:02:34,000
of little guys but there's like one huge

00:02:32,530 --> 00:02:37,450
guy and we need to support both of them

00:02:34,000 --> 00:02:39,250
and that can be quite challenging the

00:02:37,450 --> 00:02:41,770
build technologies that we used to use

00:02:39,250 --> 00:02:47,110
we still use some of this most of them

00:02:41,770 --> 00:02:49,480
actually all of them and in 2018 we

00:02:47,110 --> 00:02:51,370
basically have this pipeline where we

00:02:49,480 --> 00:02:53,290
were running something we call multi

00:02:51,370 --> 00:02:55,510
product which is a fancy way of saying

00:02:53,290 --> 00:02:57,730
we have a bunch of different git repo so

00:02:55,510 --> 00:03:00,160
it's essentially a multi repo and each

00:02:57,730 --> 00:03:02,560
one of these git repos has some metadata

00:03:00,160 --> 00:03:06,670
associated with it it has essentially a

00:03:02,560 --> 00:03:08,890
JSON file and then our CI pipeline knows

00:03:06,670 --> 00:03:11,440
what to do with this repos based on

00:03:08,890 --> 00:03:13,120
information on that JSON file you know

00:03:11,440 --> 00:03:15,220
where they go where they get deployed

00:03:13,120 --> 00:03:17,260
are you a service do you need to go to a

00:03:15,220 --> 00:03:18,640
data center are you enough do you go to

00:03:17,260 --> 00:03:20,080
the App Store maybe you're an Android

00:03:18,640 --> 00:03:22,930
app you have to go to the Play Store

00:03:20,080 --> 00:03:24,400
maybe your command line tool you have to

00:03:22,930 --> 00:03:26,769
go to something that puts you in all

00:03:24,400 --> 00:03:29,920
developers and and production laptops or

00:03:26,769 --> 00:03:32,950
whatever right and so that's technology

00:03:29,920 --> 00:03:35,920
that we call multi product we as a build

00:03:32,950 --> 00:03:38,799
system went crazy with Gradle it solved

00:03:35,920 --> 00:03:40,480
the problem we had with maven and then

00:03:38,799 --> 00:03:42,730
we said everything she'll be Gradle so

00:03:40,480 --> 00:03:45,459
we went way above and beyond what we

00:03:42,730 --> 00:03:49,630
should have done with Gradle but then

00:03:45,459 --> 00:03:50,250
for this last two are specific to iOS

00:03:49,630 --> 00:03:53,380
apps

00:03:50,250 --> 00:03:55,180
one is dependency management system that

00:03:53,380 --> 00:03:56,049
iOS developers are probably familiar

00:03:55,180 --> 00:03:57,610
with

00:03:56,049 --> 00:03:58,900
it's called cocoa pods and it

00:03:57,610 --> 00:04:03,670
essentially does dependency resolution

00:03:58,900 --> 00:04:05,260
and then last but not least Xcode which

00:04:03,670 --> 00:04:08,200
is the thing that actually builds the

00:04:05,260 --> 00:04:10,360
product and as keith was saying from

00:04:08,200 --> 00:04:12,280
leaf this is a black box we just there's

00:04:10,360 --> 00:04:14,620
a command-line tool called Xcode Bill we

00:04:12,280 --> 00:04:16,390
call it and then there's an app that

00:04:14,620 --> 00:04:18,489
pops up in the other side and hopefully

00:04:16,390 --> 00:04:22,360
nothing goes wrong and if it goes wrong

00:04:18,489 --> 00:04:23,910
our only recourse is file but with Apple

00:04:22,360 --> 00:04:26,400
maybe or

00:04:23,910 --> 00:04:30,060
we run it hope that it works the second

00:04:26,400 --> 00:04:34,110
time it's a fine thing to do

00:04:30,060 --> 00:04:36,120
that's roughly our CI pipeline it has

00:04:34,110 --> 00:04:37,440
not changed with basil so I just wanted

00:04:36,120 --> 00:04:39,900
to give you an idea what it looks like

00:04:37,440 --> 00:04:41,430
we have these processes where developers

00:04:39,900 --> 00:04:45,570
will write code and then they will

00:04:41,430 --> 00:04:47,850
commit and we run a bunch of tests

00:04:45,570 --> 00:04:52,410
before merging we essentially build and

00:04:47,850 --> 00:04:55,020
test the entire app in a pre merge step

00:04:52,410 --> 00:04:56,370
and then we merge it with trunk or

00:04:55,020 --> 00:04:58,710
master however you want to call it

00:04:56,370 --> 00:05:02,669
depending which SCM you use first and

00:04:58,710 --> 00:05:06,389
then we run everything again so we

00:05:02,669 --> 00:05:10,440
essentially run everything twice those

00:05:06,389 --> 00:05:15,120
are release and debug builds the release

00:05:10,440 --> 00:05:19,710
build is armed our MPA time 64 the debug

00:05:15,120 --> 00:05:21,389
build is 686 64 sorry um I got confused

00:05:19,710 --> 00:05:24,000
the release and debug builds are both

00:05:21,389 --> 00:05:26,460
armed one has debug symbols and the

00:05:24,000 --> 00:05:29,160
other one is optimized so we split them

00:05:26,460 --> 00:05:30,960
up and then we run four separate well

00:05:29,160 --> 00:05:33,660
the square serve machines by the way so

00:05:30,960 --> 00:05:36,780
we we run four separate machines and

00:05:33,660 --> 00:05:39,000
each machine runs twelve simulators

00:05:36,780 --> 00:05:40,919
using something we built called blue

00:05:39,000 --> 00:05:43,560
build which is a tool for running

00:05:40,919 --> 00:05:48,659
parallel simulators and so we run a

00:05:43,560 --> 00:05:50,639
bunch of tests and back in 2018 we have

00:05:48,659 --> 00:05:53,130
a bunch of problems with this

00:05:50,639 --> 00:05:55,979
architecture but the the biggest ones

00:05:53,130 --> 00:06:01,409
were the bills were pretty slow it was

00:05:55,979 --> 00:06:03,360
taking close to an hour for for one of

00:06:01,409 --> 00:06:05,610
those runs so if you if you committed

00:06:03,360 --> 00:06:07,560
code and from the time we have some

00:06:05,610 --> 00:06:09,570
metric that is called commit to polish

00:06:07,560 --> 00:06:11,659
it's from when you commit to when you

00:06:09,570 --> 00:06:15,180
actually see the end product polished

00:06:11,659 --> 00:06:17,039
obviously and that metric was about two

00:06:15,180 --> 00:06:19,229
hours because we run it twice so if it

00:06:17,039 --> 00:06:21,750
takes one hour then we run it twice it's

00:06:19,229 --> 00:06:24,150
two hours and then we were trying to fix

00:06:21,750 --> 00:06:26,510
it slow builds the other problem is that

00:06:24,150 --> 00:06:28,650
when there were problems in the pipeline

00:06:26,510 --> 00:06:31,770
debugging those problems was really hard

00:06:28,650 --> 00:06:33,690
oh you ended up with was a log we didn't

00:06:31,770 --> 00:06:35,610
really know what I mean we had built

00:06:33,690 --> 00:06:36,689
some tooling that will like parse the

00:06:35,610 --> 00:06:38,819
logs and try to

00:06:36,689 --> 00:06:41,729
devine what went wrong but that was

00:06:38,819 --> 00:06:45,809
pretty fragile and we also had some

00:06:41,729 --> 00:06:49,439
problems were when when some tools that

00:06:45,809 --> 00:06:52,439
apple provides you know will fail our

00:06:49,439 --> 00:06:55,499
only recourse was rerun the whole thing

00:06:52,439 --> 00:06:58,139
and in Xcode will not necessarily work

00:06:55,499 --> 00:07:00,629
well incrementally so it take a while

00:06:58,139 --> 00:07:02,099
again and it never gave you that warm

00:07:00,629 --> 00:07:04,379
fuzzy feeling that you know what you

00:07:02,099 --> 00:07:05,879
were doing it was like a big hammer so

00:07:04,379 --> 00:07:09,179
those were the problems that we were

00:07:05,879 --> 00:07:12,209
trying to solve and we considered a

00:07:09,179 --> 00:07:14,579
bunch of solutions we need extensive

00:07:12,209 --> 00:07:16,079
analysis of you know what can we do can

00:07:14,579 --> 00:07:18,419
we buy faster hardware and the answer

00:07:16,079 --> 00:07:20,819
was no Apple doesn't sell any faster

00:07:18,419 --> 00:07:24,419
hardware this was 2018 so it was before

00:07:20,819 --> 00:07:26,729
they announced the Mac minis we tried to

00:07:24,419 --> 00:07:28,619
do binary frameworks but we have a bunch

00:07:26,729 --> 00:07:30,659
of Swift we were one of Suites early

00:07:28,619 --> 00:07:33,199
adopters since we does not have binary

00:07:30,659 --> 00:07:35,429
compatibility so it was pretty sketchy

00:07:33,199 --> 00:07:37,139
we thought about throwing more machines

00:07:35,429 --> 00:07:39,089
at the problem and splitting them up in

00:07:37,139 --> 00:07:41,999
more but we had a few problems with that

00:07:39,089 --> 00:07:44,729
one was that the longest Paul was the

00:07:41,999 --> 00:07:46,409
release build and that was not really

00:07:44,729 --> 00:07:49,529
easily parallelizable across machines

00:07:46,409 --> 00:07:51,869
and other one was that the more machines

00:07:49,529 --> 00:07:54,329
you throw at it the more you are

00:07:51,869 --> 00:07:56,699
susceptible to one of them failing for

00:07:54,329 --> 00:07:58,949
an unrelated infrastructure issue and

00:07:56,699 --> 00:08:00,629
nothing makes developers more angry than

00:07:58,949 --> 00:08:02,759
when their things failed not for their

00:08:00,629 --> 00:08:04,110
own fault I guess they also get angry

00:08:02,759 --> 00:08:06,419
when it's their own fault but they get

00:08:04,110 --> 00:08:09,269
more angry winter get angrier when it's

00:08:06,419 --> 00:08:10,679
somebody else's fault we thought about

00:08:09,269 --> 00:08:11,969
working in the compiler but then we

00:08:10,679 --> 00:08:13,949
realized we didn't have any compiler

00:08:11,969 --> 00:08:17,189
people so that made like ramping up a

00:08:13,949 --> 00:08:19,439
new team and investing in in trying to

00:08:17,189 --> 00:08:21,119
fix Swift we looked at the work that

00:08:19,439 --> 00:08:22,860
Apple was doing with Swift hangman like

00:08:21,119 --> 00:08:26,099
well that's a hard problem we probably

00:08:22,860 --> 00:08:27,569
can find something easier and then we

00:08:26,099 --> 00:08:32,729
landed with changing the wheel system

00:08:27,569 --> 00:08:34,649
that looks easier right so we went and

00:08:32,729 --> 00:08:36,839
looked around for a bunch of different

00:08:34,649 --> 00:08:39,360
build systems and we looked at the

00:08:36,839 --> 00:08:41,430
entire landscape even crazy like why

00:08:39,360 --> 00:08:43,229
don't we just use new make and like

00:08:41,430 --> 00:08:47,790
Chuck see caching there and maybe

00:08:43,229 --> 00:08:49,980
that'll work but after taking a sample

00:08:47,790 --> 00:08:51,209
app a small app and doing a bunch of you

00:08:49,980 --> 00:08:53,519
patience building it with your friend

00:08:51,209 --> 00:08:55,860
bill systems to get a feeling for what

00:08:53,519 --> 00:08:58,320
it looked like and how it felt

00:08:55,860 --> 00:09:01,860
we found that basel was probably the

00:08:58,320 --> 00:09:05,149
best match and otherwise I wouldn't be

00:09:01,860 --> 00:09:07,740
here I'd be at the new make conference

00:09:05,149 --> 00:09:09,660
so we had a bunch of valuation criteria

00:09:07,740 --> 00:09:12,029
right we have you know it has to support

00:09:09,660 --> 00:09:13,620
the iOS and that in and of itself just

00:09:12,029 --> 00:09:15,600
you know got rid of a bunch of them

00:09:13,620 --> 00:09:18,959
Swift was another one

00:09:15,600 --> 00:09:21,060
Tesco generation cashing dependency

00:09:18,959 --> 00:09:24,540
management basil was not that great in

00:09:21,060 --> 00:09:26,610
dependency management but we could rely

00:09:24,540 --> 00:09:28,019
on cocoapods for doing that Xcode

00:09:26,610 --> 00:09:30,600
integration also looked very good on

00:09:28,019 --> 00:09:32,970
paper but you know basil has Dulcie and

00:09:30,600 --> 00:09:34,980
tolls he gives you an Xcode project it

00:09:32,970 --> 00:09:39,709
just works out of the box so what's the

00:09:34,980 --> 00:09:42,180
problem with that and we one of the

00:09:39,709 --> 00:09:45,240
criterias or not really one of the

00:09:42,180 --> 00:09:47,399
requirements that we have is we didn't

00:09:45,240 --> 00:09:50,160
want to modify the source code we wanted

00:09:47,399 --> 00:09:51,779
developers to keep working on their

00:09:50,160 --> 00:09:54,899
source like they were used to not

00:09:51,779 --> 00:09:57,230
require them to change anything and this

00:09:54,899 --> 00:10:00,269
is gonna be very relevant later on

00:09:57,230 --> 00:10:04,170
didn't speed document to the

00:10:00,269 --> 00:10:06,630
extensibility etc etc and I'm not gonna

00:10:04,170 --> 00:10:09,300
go through the full list but basil is

00:10:06,630 --> 00:10:12,060
looking pretty good on paper we read the

00:10:09,300 --> 00:10:14,339
website we read the dogs we built a

00:10:12,060 --> 00:10:16,019
sample app we hit some problems we

00:10:14,339 --> 00:10:19,829
submitted some PRS they were not

00:10:16,019 --> 00:10:23,000
accepted we submitted some more PRS some

00:10:19,829 --> 00:10:26,100
of them were accepted and we managed to

00:10:23,000 --> 00:10:29,940
see a path where we were okay we can

00:10:26,100 --> 00:10:32,579
actually make this work so the major

00:10:29,940 --> 00:10:36,480
problems that that we thought we had

00:10:32,579 --> 00:10:38,790
were there was no AC migration path our

00:10:36,480 --> 00:10:40,290
apps you'll see later are pretty large

00:10:38,790 --> 00:10:42,180
and they have a lot of dependencies so

00:10:40,290 --> 00:10:44,970
manually writing all the bill files

00:10:42,180 --> 00:10:47,430
didn't sound like like feasible thing to

00:10:44,970 --> 00:10:50,399
do and the major thing was the header

00:10:47,430 --> 00:10:53,160
conventions because I'm gonna explain

00:10:50,399 --> 00:10:54,779
about the hitters next but the reality

00:10:53,160 --> 00:10:57,959
is the thing that got us really excited

00:10:54,779 --> 00:11:00,540
was the real cash the all the other

00:10:57,959 --> 00:11:03,430
stuff was like yeah we can also feel fix

00:11:00,540 --> 00:11:08,529
all of this but the bill cache sounded

00:11:03,430 --> 00:11:10,540
so promising I took build we were

00:11:08,529 --> 00:11:12,310
building with Xcode at the time and I

00:11:10,540 --> 00:11:13,899
took about I think it was a hundred or a

00:11:12,310 --> 00:11:16,540
hundred and a little over one hundred

00:11:13,899 --> 00:11:19,149
commits and I basically just ran them as

00:11:16,540 --> 00:11:21,070
if it was you know you know run the furs

00:11:19,149 --> 00:11:23,620
don't clean up and keep running and if

00:11:21,070 --> 00:11:25,660
Xcode chokes because whatever then just

00:11:23,620 --> 00:11:27,700
like clean up and try to keep on running

00:11:25,660 --> 00:11:30,580
them to get a sense of if we could turn

00:11:27,700 --> 00:11:31,930
every build in CI into an incremental

00:11:30,580 --> 00:11:33,940
build with and actually it being

00:11:31,930 --> 00:11:36,730
incremental what would it look like and

00:11:33,940 --> 00:11:38,589
and our back of the envelope was we can

00:11:36,730 --> 00:11:40,660
probably cut bill times by fifty percent

00:11:38,589 --> 00:11:42,430
if we can do this and the bill cash

00:11:40,660 --> 00:11:45,790
sounded like a really promising way of

00:11:42,430 --> 00:11:49,029
doing this so we got all the required

00:11:45,790 --> 00:11:50,770
approvals and jumped heading and say

00:11:49,029 --> 00:11:52,899
okay we're not going to take the main

00:11:50,770 --> 00:11:54,550
LinkedIn app which is probably too big

00:11:52,899 --> 00:11:58,390
let's take a smaller app LinkedIn

00:11:54,550 --> 00:12:00,070
learning and we took that app that one

00:11:58,390 --> 00:12:02,709
of the advantages of that app is that it

00:12:00,070 --> 00:12:04,690
has a slower velocity it only it has

00:12:02,709 --> 00:12:06,730
less than 20 commits per day so it

00:12:04,690 --> 00:12:10,150
allows you to keep up if you need to do

00:12:06,730 --> 00:12:11,350
things and keep merging it's around a

00:12:10,150 --> 00:12:13,690
little over three hundred and fifty

00:12:11,350 --> 00:12:18,360
thousand lines of code around six

00:12:13,690 --> 00:12:20,260
hundred tests and the workflow that the

00:12:18,360 --> 00:12:23,020
developers were accustomed to was

00:12:20,260 --> 00:12:25,529
basically they had a plot file that

00:12:23,020 --> 00:12:28,510
specifies all of the dependencies and

00:12:25,529 --> 00:12:30,279
dependencies come from both specs that

00:12:28,510 --> 00:12:33,040
get fetched by this command called part

00:12:30,279 --> 00:12:35,080
install and after that after that

00:12:33,040 --> 00:12:36,580
command runs you essentially have what

00:12:35,080 --> 00:12:38,170
looks like a mono repo you have

00:12:36,580 --> 00:12:40,209
downloaded all of the dependencies you

00:12:38,170 --> 00:12:42,370
plop that in the file system they they

00:12:40,209 --> 00:12:46,029
have like a structure inside your

00:12:42,370 --> 00:12:48,520
directory and now you run the command

00:12:46,029 --> 00:12:51,220
line tool Xcode build and that builds a

00:12:48,520 --> 00:12:56,200
bunch of frameworks and then writes down

00:12:51,220 --> 00:12:59,079
the app and we say it okay you know the

00:12:56,200 --> 00:13:01,360
way to do it the way to port this app is

00:12:59,079 --> 00:13:03,279
not to write the bill files manually

00:13:01,360 --> 00:13:05,380
we're gonna write a cocoapods blogging

00:13:03,279 --> 00:13:07,870
it has all the information in the Poli

00:13:05,380 --> 00:13:10,450
falls under path specs we don't have to

00:13:07,870 --> 00:13:12,760
change anything and if we end up having

00:13:10,450 --> 00:13:14,440
to revert back to Xcode we can just do

00:13:12,760 --> 00:13:16,570
it flip of it and now you built with

00:13:14,440 --> 00:13:19,690
basil now you build with Xcode

00:13:16,570 --> 00:13:22,750
we looked at the imports and said we can

00:13:19,690 --> 00:13:26,830
fix that in the obviously library rules

00:13:22,750 --> 00:13:29,050
they don't look too hard and we have one

00:13:26,830 --> 00:13:30,940
one thing that our apps have and the

00:13:29,050 --> 00:13:33,340
LinkedIn app has a lot more than the

00:13:30,940 --> 00:13:36,250
learning app is a bunch of mixed modules

00:13:33,340 --> 00:13:37,720
where we take a lot of objective-c and a

00:13:36,250 --> 00:13:39,550
lot of Swift and the suite calls the

00:13:37,720 --> 00:13:41,290
Objective C and the Objective C called

00:13:39,550 --> 00:13:43,720
Swift and they share variables and they

00:13:41,290 --> 00:13:45,880
live happy under the same framework and

00:13:43,720 --> 00:13:50,650
everything is great until you try to

00:13:45,880 --> 00:13:52,120
avail it with basil so the other thing

00:13:50,650 --> 00:13:54,970
was the tool chain management we wanted

00:13:52,120 --> 00:13:57,190
to manage versions of basil itself and

00:13:54,970 --> 00:13:59,680
basil did not really provide an answer

00:13:57,190 --> 00:14:02,770
for this but then basil asked who was

00:13:59,680 --> 00:14:04,840
around I think but this was before it

00:14:02,770 --> 00:14:06,340
was rewritten ago so he had to bring its

00:14:04,840 --> 00:14:08,980
own Python and had some other

00:14:06,340 --> 00:14:14,440
dependencies so that didn't look like an

00:14:08,980 --> 00:14:17,070
option and we also wanted to start right

00:14:14,440 --> 00:14:20,830
from the start with basil remote cache

00:14:17,070 --> 00:14:23,290
so the new workflow was we're gonna call

00:14:20,830 --> 00:14:24,940
this new plugin and it's gonna be Paul

00:14:23,290 --> 00:14:26,650
basil ice it's gonna do the same thing

00:14:24,940 --> 00:14:29,320
as spot install except that instead of

00:14:26,650 --> 00:14:30,940
writing all of the Xcode rules for

00:14:29,320 --> 00:14:33,130
building frameworks is gonna write build

00:14:30,940 --> 00:14:37,480
that basil files and then we call basil

00:14:33,130 --> 00:14:40,420
build and boom we have our app and then

00:14:37,480 --> 00:14:43,450
we hit the mix module problem so this

00:14:40,420 --> 00:14:47,170
was the first snack after the sweat this

00:14:43,450 --> 00:14:50,290
is this is the tears part of the talk so

00:14:47,170 --> 00:14:53,410
the mix modules are compiled by Xcode in

00:14:50,290 --> 00:14:54,940
in a in a particular way essentially

00:14:53,410 --> 00:14:56,440
when you have a mix module you have a

00:14:54,940 --> 00:14:58,720
bunch of stray files you have a bunch of

00:14:56,440 --> 00:15:01,120
em files and you have a bunch of header

00:14:58,720 --> 00:15:03,010
files you pass all of the sweep files

00:15:01,120 --> 00:15:05,350
and the header files to the Swift C

00:15:03,010 --> 00:15:07,990
compiler and then it generates a swift

00:15:05,350 --> 00:15:09,940
module and it generates a header file

00:15:07,990 --> 00:15:12,970
that's going to be used later by clang

00:15:09,940 --> 00:15:15,040
so that you can compile the objective-c

00:15:12,970 --> 00:15:17,650
files that might use dependencies from

00:15:15,040 --> 00:15:19,930
from Swift and then the whole thing is

00:15:17,650 --> 00:15:22,540
given to little and little goes and

00:15:19,930 --> 00:15:26,410
packages everything into a door a and at

00:15:22,540 --> 00:15:28,360
least that was the theory and you'll see

00:15:26,410 --> 00:15:29,540
in a second so we figure ok this is the

00:15:28,360 --> 00:15:31,040
way to do it

00:15:29,540 --> 00:15:32,829
we're gonna write on obviously library

00:15:31,040 --> 00:15:35,389
we're gonna put all the hitters inside

00:15:32,829 --> 00:15:36,920
these obviously library and created as

00:15:35,389 --> 00:15:38,570
headers only give it to the swift

00:15:36,920 --> 00:15:40,730
library so that the sweet flavor can

00:15:38,570 --> 00:15:43,160
compile and then pass that Swift library

00:15:40,730 --> 00:15:45,320
to another obstacle library so that we

00:15:43,160 --> 00:15:47,540
have the end product and the main

00:15:45,320 --> 00:15:50,360
problem with this is that now your

00:15:47,540 --> 00:15:52,339
anything that depends on this is sort of

00:15:50,360 --> 00:15:54,380
a mess because it has to it's missing

00:15:52,339 --> 00:15:56,360
that last little thing so it made it

00:15:54,380 --> 00:16:00,759
like a general or something to mix it in

00:15:56,360 --> 00:16:03,500
it started getting complicated and and

00:16:00,759 --> 00:16:05,449
this is a long way of saying you know

00:16:03,500 --> 00:16:07,610
the main problem was the hitter in for

00:16:05,449 --> 00:16:11,060
so let me tell you how it works in in an

00:16:07,610 --> 00:16:12,889
iOS world so Xcode packages things in

00:16:11,060 --> 00:16:14,569
frameworks and frameworks basically are

00:16:12,889 --> 00:16:16,339
directories and they have a specific

00:16:14,569 --> 00:16:19,040
structure so all the headers going

00:16:16,339 --> 00:16:21,470
headers they have modules and they have

00:16:19,040 --> 00:16:23,690
a swift module they have a module map

00:16:21,470 --> 00:16:26,389
that gives you which headers are Pollock

00:16:23,690 --> 00:16:29,089
which come from Swift and finally that

00:16:26,389 --> 00:16:30,860
foo is essentially like an executable

00:16:29,089 --> 00:16:33,259
it's like an archive it's not execute

00:16:30,860 --> 00:16:34,760
it's an archive of object files the

00:16:33,259 --> 00:16:37,420
Swift module comes from Swift obviously

00:16:34,760 --> 00:16:40,760
and the other one is from Objective C

00:16:37,420 --> 00:16:43,339
but what this accomplishes in the iOS

00:16:40,760 --> 00:16:45,410
world is that in your source code you

00:16:43,339 --> 00:16:47,930
can just you know you can do two things

00:16:45,410 --> 00:16:49,880
one is you can do at import and we were

00:16:47,930 --> 00:16:53,319
into worried about supporting that one

00:16:49,880 --> 00:16:56,870
which is a whole separate kind of worms

00:16:53,319 --> 00:16:59,149
but you can do pound import and you do

00:16:56,870 --> 00:17:00,620
food slash food or age and that is what

00:16:59,149 --> 00:17:02,569
they call an umbrella header it just

00:17:00,620 --> 00:17:04,159
brings everything from the framework

00:17:02,569 --> 00:17:06,799
into the namespace and then you can

00:17:04,159 --> 00:17:09,319
write your code you can do pound import

00:17:06,799 --> 00:17:12,189
fubar - when you only want a piece of

00:17:09,319 --> 00:17:14,809
that framework in your in your namespace

00:17:12,189 --> 00:17:18,049
and we think the framework when you're

00:17:14,809 --> 00:17:20,059
working inside so the first two are when

00:17:18,049 --> 00:17:21,980
you depend on a framework that the last

00:17:20,059 --> 00:17:24,319
one is when you are writing the

00:17:21,980 --> 00:17:26,659
framework itself you can do the double

00:17:24,319 --> 00:17:31,450
quote import and just get the headers

00:17:26,659 --> 00:17:35,540
without any any qualifier you know and

00:17:31,450 --> 00:17:37,429
inside the if you actually look at the

00:17:35,540 --> 00:17:40,910
source code for that framework you might

00:17:37,429 --> 00:17:43,040
find that paths don't match

00:17:40,910 --> 00:17:45,710
the ways the imports are done you might

00:17:43,040 --> 00:17:48,230
you might find that the person who wrote

00:17:45,710 --> 00:17:51,020
the fool framework or the flu component

00:17:48,230 --> 00:17:52,730
right has subdirectory called components

00:17:51,020 --> 00:17:54,890
or you know whatever and they have a

00:17:52,730 --> 00:17:57,680
bunch of paths so all the headers are

00:17:54,890 --> 00:17:59,750
spread everywhere but when people use

00:17:57,680 --> 00:18:02,720
them they use him in with the framework

00:17:59,750 --> 00:18:04,670
path in the front and within the

00:18:02,720 --> 00:18:06,890
framework they have the whole quotes so

00:18:04,670 --> 00:18:09,740
you need to do a bunch of manipulation

00:18:06,890 --> 00:18:11,480
of headers and our choices back there

00:18:09,740 --> 00:18:13,280
was you know maybe we need to write a

00:18:11,480 --> 00:18:14,780
bunch of generals and just like move

00:18:13,280 --> 00:18:16,820
everything too worried once it and

00:18:14,780 --> 00:18:19,640
create the paths that it wants and then

00:18:16,820 --> 00:18:22,220
take those and pass them around or we

00:18:19,640 --> 00:18:24,800
will use two technologies that that have

00:18:22,220 --> 00:18:26,600
been developed by the client team to

00:18:24,800 --> 00:18:28,520
deal with this very problem one is

00:18:26,600 --> 00:18:31,490
header maps which are essentially a hash

00:18:28,520 --> 00:18:33,680
map you give it how you want the import

00:18:31,490 --> 00:18:36,320
to look when you type pound import and

00:18:33,680 --> 00:18:38,270
where the path of that file actually is

00:18:36,320 --> 00:18:41,960
in the file system and then you pass

00:18:38,270 --> 00:18:44,000
that to Quang with a normal - I or - I

00:18:41,960 --> 00:18:46,220
quote and then it'll read it as a hash

00:18:44,000 --> 00:18:49,490
map and you get the in person where you

00:18:46,220 --> 00:18:51,140
want and the second one is VFS which

00:18:49,490 --> 00:18:53,390
believe it or not the client compiler

00:18:51,140 --> 00:18:55,280
includes a virtual file system where you

00:18:53,390 --> 00:18:57,020
write a ya know file and you tell it

00:18:55,280 --> 00:18:58,670
this is how I want the file system to

00:18:57,020 --> 00:19:02,000
look for this compilation and then it

00:18:58,670 --> 00:19:05,150
goes and dust and the VFS is slower and

00:19:02,000 --> 00:19:06,650
and more complicated and they they use

00:19:05,150 --> 00:19:07,910
it for dealing with the frameworks

00:19:06,650 --> 00:19:09,890
structure when you want to take

00:19:07,910 --> 00:19:12,170
something and pretend it looks like a

00:19:09,890 --> 00:19:13,730
framework when it doesn't but we didn't

00:19:12,170 --> 00:19:15,320
want to go there so we went with the

00:19:13,730 --> 00:19:18,890
header mass which seemed simpler

00:19:15,320 --> 00:19:21,170
approach so we said okay this is what

00:19:18,890 --> 00:19:23,450
we're gonna do we're gonna do a header

00:19:21,170 --> 00:19:25,910
map support for basil we're going to

00:19:23,450 --> 00:19:28,580
write our basil wrapper that manages the

00:19:25,910 --> 00:19:31,610
versions of basil we're gonna set up

00:19:28,580 --> 00:19:34,040
remote cache server we have one that

00:19:31,610 --> 00:19:36,680
kind of worked already for a different

00:19:34,040 --> 00:19:37,580
purpose we just dust it off set it up

00:19:36,680 --> 00:19:39,620
we're good to go

00:19:37,580 --> 00:19:42,080
we're gonna write the cocoapods plugin

00:19:39,620 --> 00:19:43,580
and then we have to do a bunch of custom

00:19:42,080 --> 00:19:47,930
build rules in start like but it'll be

00:19:43,580 --> 00:19:50,120
fine right so we leave that and then we

00:19:47,930 --> 00:19:51,830
found a bunch of problems a lot of the

00:19:50,120 --> 00:19:54,160
things that we change in the in the ops

00:19:51,830 --> 00:19:56,559
II headers

00:19:54,160 --> 00:19:58,390
obviously library is one of the native

00:19:56,559 --> 00:20:02,710
rules that the basel team is trying to

00:19:58,390 --> 00:20:04,570
get out of the core basel and it's sort

00:20:02,710 --> 00:20:06,309
of intermingled with rule CC and they're

00:20:04,570 --> 00:20:08,470
trying to get greater rules to see from

00:20:06,309 --> 00:20:10,960
native and put it in a separate repo so

00:20:08,470 --> 00:20:14,140
it was kind of a mess we couldn't get

00:20:10,960 --> 00:20:17,049
any of our PRS in that section of the

00:20:14,140 --> 00:20:20,500
code there we found that sandboxing and

00:20:17,049 --> 00:20:22,419
mac OS is unbelievably slow it's like 15

00:20:20,500 --> 00:20:25,660
times slower than building so if you're

00:20:22,419 --> 00:20:28,539
trying to build on mac OS and you turn

00:20:25,660 --> 00:20:30,429
the sandbox off it takes for our main

00:20:28,539 --> 00:20:33,309
app about 8 minutes without the cache

00:20:30,429 --> 00:20:37,299
and if you turn the cache on it takes

00:20:33,309 --> 00:20:39,190
over 2 hours so it's not I mean it just

00:20:37,299 --> 00:20:42,490
basically killed all performance we had

00:20:39,190 --> 00:20:44,440
to turn that off and we have I think

00:20:42,490 --> 00:20:46,480
this has been fixed now but this cache

00:20:44,440 --> 00:20:48,370
didn't used to play well with remote

00:20:46,480 --> 00:20:50,770
HTTP cache if you had one you couldn't

00:20:48,370 --> 00:20:53,200
have the other I believe this has been

00:20:50,770 --> 00:20:55,539
fixed now but on top of that this cache

00:20:53,200 --> 00:20:58,059
also has a problem that it does know

00:20:55,539 --> 00:20:59,590
space management and we wanted to run it

00:20:58,059 --> 00:21:02,500
on developers machine so we didn't want

00:20:59,590 --> 00:21:04,750
to just let it feel until we get you

00:21:02,500 --> 00:21:08,610
know calls from IT going like why is

00:21:04,750 --> 00:21:11,590
this thing taking so many gigabytes and

00:21:08,610 --> 00:21:14,409
we also found an interesting behavior

00:21:11,590 --> 00:21:17,020
which was when we were using the remote

00:21:14,409 --> 00:21:18,669
cache when basil was pretty much done

00:21:17,020 --> 00:21:20,500
with the build there were still a bunch

00:21:18,669 --> 00:21:23,440
of artifacts that it needed to upload in

00:21:20,500 --> 00:21:26,470
the in the final phases and it wasn't

00:21:23,440 --> 00:21:28,210
done until all of those were uploaded so

00:21:26,470 --> 00:21:30,340
it was still taking time to that final

00:21:28,210 --> 00:21:33,370
upload and it was also affecting

00:21:30,340 --> 00:21:35,350
performance so we came up with a bunch

00:21:33,370 --> 00:21:38,260
of solutions for that the first one is

00:21:35,350 --> 00:21:41,679
rather than building the header maps

00:21:38,260 --> 00:21:44,620
into basil itself we found in the clang

00:21:41,679 --> 00:21:46,720
compiler there's a Python script that's

00:21:44,620 --> 00:21:49,780
called H map tool that basically can

00:21:46,720 --> 00:21:52,690
take a JSON file and generate the format

00:21:49,780 --> 00:21:55,570
that that the client compiler wants for

00:21:52,690 --> 00:21:58,870
header maps so we put that in a bunch of

00:21:55,570 --> 00:22:00,429
generals then we wrote that cocoapods

00:21:58,870 --> 00:22:02,890
based eliezer that I talked about and

00:22:00,429 --> 00:22:05,799
and we had to write some rules to handle

00:22:02,890 --> 00:22:07,950
the modules we transcend boxing off just

00:22:05,799 --> 00:22:11,790
you know don't even bother

00:22:07,950 --> 00:22:14,910
look ma no sandbox and then the basil

00:22:11,790 --> 00:22:17,370
wrapper this part is kind of interesting

00:22:14,910 --> 00:22:20,040
we built into the basil wrapper a way to

00:22:17,370 --> 00:22:23,190
run a distributed basil remote cache and

00:22:20,040 --> 00:22:25,230
the way that works is basically wrappers

00:22:23,190 --> 00:22:27,510
does the tool chain management so it'll

00:22:25,230 --> 00:22:29,130
look at this JSON file that I was

00:22:27,510 --> 00:22:30,810
talking about and figure out which

00:22:29,130 --> 00:22:32,790
version of basil you want to use and

00:22:30,810 --> 00:22:34,950
then it would go and fetch that version

00:22:32,790 --> 00:22:37,080
of basil and execute it but on top of

00:22:34,950 --> 00:22:39,360
that it'll also look at the environment

00:22:37,080 --> 00:22:42,840
in which you're running and it'll see if

00:22:39,360 --> 00:22:45,750
there's a basil remote running in in

00:22:42,840 --> 00:22:48,030
that machine locally is a demon and if

00:22:45,750 --> 00:22:49,800
there is none then it'll spin one up

00:22:48,030 --> 00:22:53,310
it'll go and fetch the latest version

00:22:49,800 --> 00:22:55,530
from a given location that was we built

00:22:53,310 --> 00:22:58,320
it both ways it can do either a github

00:22:55,530 --> 00:23:00,780
or it can do some other location and

00:22:58,320 --> 00:23:03,540
it'll fetch the latest version it'll run

00:23:00,780 --> 00:23:06,330
it let it bind to an ephemeral port and

00:23:03,540 --> 00:23:08,370
put the address in a socket so then

00:23:06,330 --> 00:23:10,320
later basil wrapper can read that

00:23:08,370 --> 00:23:11,970
address and wire it up into the basil

00:23:10,320 --> 00:23:15,180
command line so you get an automatic

00:23:11,970 --> 00:23:16,830
cash and then basil remote can function

00:23:15,180 --> 00:23:19,980
as a primary cache with space management

00:23:16,830 --> 00:23:22,410
and all of that and linger and keep

00:23:19,980 --> 00:23:24,690
moving all of those artifacts to the

00:23:22,410 --> 00:23:26,400
main central cache and then if it's been

00:23:24,690 --> 00:23:28,560
idle for like I think half an hour's

00:23:26,400 --> 00:23:31,740
configurable of course then it'll just

00:23:28,560 --> 00:23:35,010
kill itself and the whole thing starts

00:23:31,740 --> 00:23:37,830
again and that's all a bunch of the

00:23:35,010 --> 00:23:39,290
basic remote problems it also had

00:23:37,830 --> 00:23:42,560
another interesting effect which was

00:23:39,290 --> 00:23:45,150
even for machines that were a little

00:23:42,560 --> 00:23:47,490
configured a little differently that we

00:23:45,150 --> 00:23:48,870
found when we were debugging the cache

00:23:47,490 --> 00:23:51,480
we found for instance that some of the

00:23:48,870 --> 00:23:53,810
machines on our CI and this is probably

00:23:51,480 --> 00:23:56,910
also because we turned the Sam hooks off

00:23:53,810 --> 00:23:58,650
we have some of the machines have the

00:23:56,910 --> 00:24:01,830
command-line tools installed and then

00:23:58,650 --> 00:24:04,080
when clang wrapper was compiled it was

00:24:01,830 --> 00:24:06,420
linked with a certain version of Lib C

00:24:04,080 --> 00:24:08,100
and then on other machines that didn't

00:24:06,420 --> 00:24:10,200
have command-line tools installed they

00:24:08,100 --> 00:24:11,790
get it clang wrapper will get linked

00:24:10,200 --> 00:24:14,280
with a different version of Lib C and

00:24:11,790 --> 00:24:16,260
then of course you get zero cache hits

00:24:14,280 --> 00:24:18,390
because clang wrapper is sitting at the

00:24:16,260 --> 00:24:19,980
bottom of the pendency chain except that

00:24:18,390 --> 00:24:20,820
when we did this base of remote thing

00:24:19,980 --> 00:24:22,560
then

00:24:20,820 --> 00:24:24,330
get some caching because even if the

00:24:22,560 --> 00:24:27,030
machines are slightly differently

00:24:24,330 --> 00:24:29,100
configure they are self consistent so

00:24:27,030 --> 00:24:30,630
you get some benefits from caching even

00:24:29,100 --> 00:24:32,370
in the worst case you blow the cache

00:24:30,630 --> 00:24:33,870
because now you have twice hold off all

00:24:32,370 --> 00:24:38,310
the artifacts in the centralized cache

00:24:33,870 --> 00:24:40,260
but space is cheap so that's what it

00:24:38,310 --> 00:24:43,350
looks like when you when you run basal

00:24:40,260 --> 00:24:45,870
wrapper you basically we based basically

00:24:43,350 --> 00:24:47,220
we called it basil so there's no people

00:24:45,870 --> 00:24:49,620
don't have to think about it they just

00:24:47,220 --> 00:24:51,240
run basil build and then there's a

00:24:49,620 --> 00:24:53,610
couple of lines there that are not

00:24:51,240 --> 00:24:55,560
normal basil the you know found basil

00:24:53,610 --> 00:24:58,320
remote here he's listening in that port

00:24:55,560 --> 00:25:00,240
using it and which version of basil

00:24:58,320 --> 00:25:02,310
you're running and it's pretty

00:25:00,240 --> 00:25:02,610
transparent work works great people love

00:25:02,310 --> 00:25:04,800
it

00:25:02,610 --> 00:25:09,720
nobody uses it but the build tools

00:25:04,800 --> 00:25:11,460
engineers that we love it and we basil

00:25:09,720 --> 00:25:14,520
eyes the first LinkedIn app which was

00:25:11,460 --> 00:25:17,610
the LinkedIn learning and what do you

00:25:14,520 --> 00:25:21,210
see there is the we were running CI with

00:25:17,610 --> 00:25:23,970
both so we took two machines for Xcode

00:25:21,210 --> 00:25:25,950
bills testin and release and we took two

00:25:23,970 --> 00:25:28,710
machines for basil builds test and

00:25:25,950 --> 00:25:30,810
release and you'll notice that the basil

00:25:28,710 --> 00:25:34,140
bills without the cache we're running

00:25:30,810 --> 00:25:36,480
slower than the xcode bills that have no

00:25:34,140 --> 00:25:38,970
cache and then we turned the cache on

00:25:36,480 --> 00:25:40,740
and and the times drop and they flipped

00:25:38,970 --> 00:25:44,100
it's also quite interesting that they

00:25:40,740 --> 00:25:46,500
flip because the test release you know

00:25:44,100 --> 00:25:49,080
when you're building building a release

00:25:46,500 --> 00:25:51,240
is a slower because you have to run all

00:25:49,080 --> 00:25:54,180
the optimizations in a compiler and all

00:25:51,240 --> 00:25:56,700
the stuff and building a debug version

00:25:54,180 --> 00:25:58,530
is faster and even with the test it was

00:25:56,700 --> 00:26:00,510
still faster but when we added the cache

00:25:58,530 --> 00:26:02,220
then the release build was mostly cache

00:26:00,510 --> 00:26:05,310
but you still had to run the tests so

00:26:02,220 --> 00:26:09,180
then they flipped but we had a pretty

00:26:05,310 --> 00:26:12,270
good success with this app and then we

00:26:09,180 --> 00:26:15,600
try to do the LinkedIn app which is the

00:26:12,270 --> 00:26:18,360
bigger app that one is about it takes

00:26:15,600 --> 00:26:20,250
about 50 plus commits per day it's about

00:26:18,360 --> 00:26:23,430
two million lines of code and it's mixed

00:26:20,250 --> 00:26:28,050
swift and objective-c 40% objective-c

00:26:23,430 --> 00:26:31,680
60% Swift and it has around 6,500 a

00:26:28,050 --> 00:26:34,250
little over 6,500 tests and when we try

00:26:31,680 --> 00:26:36,530
to pour that app then we found

00:26:34,250 --> 00:26:39,140
that Python script that we have found in

00:26:36,530 --> 00:26:41,780
in the Klang repo was definitely too

00:26:39,140 --> 00:26:45,350
slow for for building that up you had

00:26:41,780 --> 00:26:48,409
just way too many headers we keep very

00:26:45,350 --> 00:26:50,299
subtle calculation problems because of

00:26:48,409 --> 00:26:54,380
the the way we were compiling where

00:26:50,299 --> 00:26:57,110
Xcode was not when we were calling Swift

00:26:54,380 --> 00:26:59,630
and clang it wasn't finding what is

00:26:57,110 --> 00:27:00,679
expecting and we found some Swift

00:26:59,630 --> 00:27:03,200
compiler bugs

00:27:00,679 --> 00:27:06,530
for instance the testable imports we

00:27:03,200 --> 00:27:07,880
found that if you depending on how it

00:27:06,530 --> 00:27:10,700
found the frameworks it could find a

00:27:07,880 --> 00:27:12,080
framework transitively and sorry it's

00:27:10,700 --> 00:27:14,419
not the frame with the modules it could

00:27:12,080 --> 00:27:15,919
find a module transitively and imported

00:27:14,419 --> 00:27:17,750
as a transitive dependency of a

00:27:15,919 --> 00:27:20,360
different module and then when you need

00:27:17,750 --> 00:27:22,100
a transitive you know a testable import

00:27:20,360 --> 00:27:23,090
of that same module then the serf

00:27:22,100 --> 00:27:24,830
compiler will say oh it's already

00:27:23,090 --> 00:27:26,570
imported I don't have to do anything but

00:27:24,830 --> 00:27:28,039
it was not imported in a testable way so

00:27:26,570 --> 00:27:30,530
then none of the symbols that you

00:27:28,039 --> 00:27:35,450
actually wanted to test were there so

00:27:30,530 --> 00:27:37,250
that was a problem so we did the take -

00:27:35,450 --> 00:27:39,289
we fixed a bunch of these problems we

00:27:37,250 --> 00:27:42,980
rewrote the header map generation in C

00:27:39,289 --> 00:27:46,010
and the header map format is pretty

00:27:42,980 --> 00:27:48,470
amenable to just you know um map it it's

00:27:46,010 --> 00:27:50,030
super efficient if it's low-level if

00:27:48,470 --> 00:27:51,830
it's Python it's not that efficient and

00:27:50,030 --> 00:27:55,909
we found that the hard way

00:27:51,830 --> 00:27:57,380
talked about failure then we got some

00:27:55,909 --> 00:27:58,820
faster machines for the real cash we

00:27:57,380 --> 00:28:00,799
were having also performance problems

00:27:58,820 --> 00:28:04,340
turns out that basil pounced and the

00:28:00,799 --> 00:28:06,860
remote cache pretty hard and we rewrote

00:28:04,340 --> 00:28:08,330
all of our rules to create actual

00:28:06,860 --> 00:28:10,370
frameworks and that was actually a

00:28:08,330 --> 00:28:11,780
really an stroke by one of our build

00:28:10,370 --> 00:28:13,610
engine ears that said you know let's

00:28:11,780 --> 00:28:15,200
just give it what it wants like Xcode

00:28:13,610 --> 00:28:17,330
wants to build it this way and it's used

00:28:15,200 --> 00:28:19,159
to building it this way and if we just

00:28:17,330 --> 00:28:21,220
build it in exactly the same way we're

00:28:19,159 --> 00:28:26,270
gonna avoid all of these problems and

00:28:21,220 --> 00:28:27,860
that worked wonderful and so we wrote

00:28:26,270 --> 00:28:30,890
these new framework rules where we're

00:28:27,860 --> 00:28:33,650
before we were just trying to manage the

00:28:30,890 --> 00:28:35,240
the libraries keep from from leaf talked

00:28:33,650 --> 00:28:37,669
about this a little like basil has this

00:28:35,240 --> 00:28:39,169
concept of building rules and packaging

00:28:37,669 --> 00:28:40,850
rules and and they're very different

00:28:39,169 --> 00:28:43,159
because the packaging rules are

00:28:40,850 --> 00:28:45,200
terminals you can't depend on them very

00:28:43,159 --> 00:28:47,480
just to produce something in a certain

00:28:45,200 --> 00:28:47,779
shape and then the builders are are the

00:28:47,480 --> 00:28:49,279
things

00:28:47,779 --> 00:28:52,340
have providers that you can propagate

00:28:49,279 --> 00:28:54,830
and what we leave is we said no we're

00:28:52,340 --> 00:28:56,719
gonna build this packaging rule that is

00:28:54,830 --> 00:28:59,149
also a built rule and you can depend on

00:28:56,719 --> 00:29:01,519
it and it's just gonna pass the right

00:28:59,149 --> 00:29:03,200
provider so that other things can look

00:29:01,519 --> 00:29:04,999
at the headers and can look at the build

00:29:03,200 --> 00:29:08,809
things and the configurations and all

00:29:04,999 --> 00:29:10,639
that stuff and that worked really well

00:29:08,809 --> 00:29:14,419
it just sold a bunch of compilation

00:29:10,639 --> 00:29:17,719
problems you have no idea and so we

00:29:14,419 --> 00:29:20,719
finally the LinkedIn app and by now we

00:29:17,719 --> 00:29:23,599
had a build cache fully functioning and

00:29:20,719 --> 00:29:26,089
running so when we turn it on you know

00:29:23,599 --> 00:29:28,279
you can see the spike where it's doing

00:29:26,089 --> 00:29:31,129
more work than Xcode because it's both

00:29:28,279 --> 00:29:33,320
building and filling the cache it has to

00:29:31,129 --> 00:29:35,179
fill you know it has all the mises and

00:29:33,320 --> 00:29:36,919
then it has to fill it in but then it

00:29:35,179 --> 00:29:40,820
star stabilized and it starts dropping

00:29:36,919 --> 00:29:44,210
down next code is you know 25 minutes

00:29:40,820 --> 00:29:46,820
climbing to 30 and we have in the in

00:29:44,210 --> 00:29:48,559
some cases less than five minute builds

00:29:46,820 --> 00:29:49,820
because it's when people probably didn't

00:29:48,559 --> 00:29:52,820
change anything and it was completely

00:29:49,820 --> 00:29:55,909
fully cached and then we have you know a

00:29:52,820 --> 00:29:58,909
little less than that like you know 20

00:29:55,909 --> 00:30:01,009
15 minutes when when it actually has to

00:29:58,909 --> 00:30:03,289
build stuff and and this is without

00:30:01,009 --> 00:30:04,700
breaking up the app or trying to make it

00:30:03,289 --> 00:30:07,669
more parallelizable or anything like

00:30:04,700 --> 00:30:11,419
that if you just take the app right now

00:30:07,669 --> 00:30:13,070
and just build it with Xcode you know

00:30:11,419 --> 00:30:14,629
and then you build it again with basel

00:30:13,070 --> 00:30:16,700
without the cache and then you build it

00:30:14,629 --> 00:30:20,389
again with basil but now with the cache

00:30:16,700 --> 00:30:22,849
those sargent timings so this is not the

00:30:20,389 --> 00:30:24,679
the common scenario because usually

00:30:22,849 --> 00:30:26,960
people change stuff so there's some

00:30:24,679 --> 00:30:29,899
amount of rebuilding so this is the best

00:30:26,960 --> 00:30:32,450
case for the cached times but you'd be

00:30:29,899 --> 00:30:34,729
surprised how many times people change

00:30:32,450 --> 00:30:35,919
things that don't trigger any rebuilding

00:30:34,729 --> 00:30:41,119
at all you know

00:30:35,919 --> 00:30:43,309
images or you know translation things

00:30:41,119 --> 00:30:48,649
like that tend to not require code

00:30:43,309 --> 00:30:52,190
recompilation and so what lessons did we

00:30:48,649 --> 00:30:54,259
learn or back-of-the-envelope was right

00:30:52,190 --> 00:30:58,220
we had about a 50% build time decrease

00:30:54,259 --> 00:30:59,929
and baseless external dependencies were

00:30:58,220 --> 00:31:01,610
really hard to manage we still don't

00:30:59,929 --> 00:31:03,580
have a great answer

00:31:01,610 --> 00:31:07,750
super interesting what the workspace

00:31:03,580 --> 00:31:11,200
story was because we we run the CI

00:31:07,750 --> 00:31:13,820
without access to the Internet and

00:31:11,200 --> 00:31:15,830
finding out what basil wants to download

00:31:13,820 --> 00:31:18,530
from where from the rules especially

00:31:15,830 --> 00:31:23,840
when they have maybe downloaded maybe

00:31:18,530 --> 00:31:25,670
not you're never sure and overall the

00:31:23,840 --> 00:31:27,620
the experience of taking it and moving

00:31:25,670 --> 00:31:30,680
it it's kind of funny because Keith

00:31:27,620 --> 00:31:33,920
Francis was saying that you know he was

00:31:30,680 --> 00:31:36,590
of the opinion of contributing all of

00:31:33,920 --> 00:31:38,660
his stuff back and and being on the

00:31:36,590 --> 00:31:41,180
bleeding edge and he didn't think that

00:31:38,660 --> 00:31:42,860
that you know other people being on the

00:31:41,180 --> 00:31:45,200
bleeding edge will save him any work

00:31:42,860 --> 00:31:46,670
because they were probably using it in a

00:31:45,200 --> 00:31:48,830
different way and for us it was

00:31:46,670 --> 00:31:50,720
completely opposite because every time

00:31:48,830 --> 00:31:52,910
we'd hit a bug kid had already fixed it

00:31:50,720 --> 00:31:54,920
so we were like oh okay so he's on the

00:31:52,910 --> 00:31:57,080
bleeding edge we can hang back you know

00:31:54,920 --> 00:31:58,640
a few releases send him by the time we

00:31:57,080 --> 00:32:01,010
get to that release they've hit all the

00:31:58,640 --> 00:32:06,800
bugs so for us it was the opposite I'm

00:32:01,010 --> 00:32:10,640
glad that my talk came second and what

00:32:06,800 --> 00:32:12,590
would have helped so basil looked really

00:32:10,640 --> 00:32:15,110
good on paper and he looked much better

00:32:12,590 --> 00:32:19,100
on paper than it was in reality the the

00:32:15,110 --> 00:32:21,020
docs are great until they are not and

00:32:19,100 --> 00:32:23,810
then you end up we ended up having to

00:32:21,020 --> 00:32:25,100
read a bunch of source code and we ended

00:32:23,810 --> 00:32:26,630
up finding a bunch of places where the

00:32:25,100 --> 00:32:29,480
docs said one thing and the source code

00:32:26,630 --> 00:32:33,170
says a mother thing the objective-c

00:32:29,480 --> 00:32:40,370
support it's it's definitely not great

00:32:33,170 --> 00:32:42,730
and not easy to change and it's not we

00:32:40,370 --> 00:32:44,990
had a bunch of cases were for instance

00:32:42,730 --> 00:32:47,240
things that we were depending on there

00:32:44,990 --> 00:32:48,800
was recently some objective-c rework

00:32:47,240 --> 00:32:50,900
which I think was a great thing actually

00:32:48,800 --> 00:32:53,030
I think it moved it in the right

00:32:50,900 --> 00:32:54,800
direction but it was super disruptive

00:32:53,030 --> 00:32:56,450
like we had to rewrite all of her rules

00:32:54,800 --> 00:33:00,050
and and it took us a while to fix that

00:32:56,450 --> 00:33:02,480
and the sandbox in it that that I if

00:33:00,050 --> 00:33:05,060
there was one thing where I that I wish

00:33:02,480 --> 00:33:07,490
was much better was the sandbox in

00:33:05,060 --> 00:33:09,530
because if you're just building turning

00:33:07,490 --> 00:33:11,780
the sandbox enough it's actually not

00:33:09,530 --> 00:33:14,610
that big of a deal but if you're writing

00:33:11,780 --> 00:33:15,840
rules then yeah you want that sandbar

00:33:14,610 --> 00:33:19,679
Xenon because you don't know what you're

00:33:15,840 --> 00:33:22,650
doing and and if it takes two hours to

00:33:19,679 --> 00:33:24,330
do a full run and you keep heating

00:33:22,650 --> 00:33:25,920
problems and you change the rules and

00:33:24,330 --> 00:33:27,030
then you're not sure that it didn't

00:33:25,920 --> 00:33:28,590
break something else so you have to

00:33:27,030 --> 00:33:31,710
clean everything up and start it again

00:33:28,590 --> 00:33:32,700
then it gets pretty old pretty fast to

00:33:31,710 --> 00:33:36,330
work that way

00:33:32,700 --> 00:33:38,910
and it's not sandbox exact I actually

00:33:36,330 --> 00:33:41,220
looked into that so we have it on our

00:33:38,910 --> 00:33:45,330
to-do list to try and figure out what's

00:33:41,220 --> 00:33:47,669
wrong with the sandboxing so that's

00:33:45,330 --> 00:33:49,830
where we are we're shipping from Basel

00:33:47,669 --> 00:33:53,040
built apps so if you have the LinkedIn

00:33:49,830 --> 00:33:58,049
app on your phones then you have a Basel

00:33:53,040 --> 00:34:00,960
built LinkedIn app we don't have a good

00:33:58,049 --> 00:34:03,450
solution yet for the local builds so

00:34:00,960 --> 00:34:05,760
we're looking into that we have some

00:34:03,450 --> 00:34:07,860
ideas and we've talked to a bunch of

00:34:05,760 --> 00:34:09,419
other people who have iOS apps so that's

00:34:07,860 --> 00:34:11,850
an X on or on a roadmap we're also

00:34:09,419 --> 00:34:13,800
looking at remote execution which is

00:34:11,850 --> 00:34:15,929
very unclear to us if it's gonna help

00:34:13,800 --> 00:34:17,790
because of the sandboxing problem and it

00:34:15,929 --> 00:34:19,590
requires having the sandbox in actually

00:34:17,790 --> 00:34:22,859
working but we're doing some experiments

00:34:19,590 --> 00:34:25,350
to see what it looks like and we have

00:34:22,859 --> 00:34:27,600
this cos open sourcing all of this stuff

00:34:25,350 --> 00:34:29,540
basil wrapper we have a bunch of changes

00:34:27,600 --> 00:34:31,889
to basal remote that might or might not

00:34:29,540 --> 00:34:34,850
be of interest especially if you don't

00:34:31,889 --> 00:34:41,510
have basil wrapper to go with it and

00:34:34,850 --> 00:34:41,510
that's pretty much it so thank you

00:34:44,280 --> 00:34:49,780
Thank You Oscar mm-hmm

00:34:46,570 --> 00:34:51,580
as before I know it's late and I don't

00:34:49,780 --> 00:34:54,670
want to keep you from the reception but

00:34:51,580 --> 00:34:56,470
I think if you have any questions the

00:34:54,670 --> 00:34:58,420
mics in the middle could be good give

00:34:56,470 --> 00:35:01,420
you folks a few seconds to get up there

00:34:58,420 --> 00:35:04,390
John won't you kick it off John field

00:35:01,420 --> 00:35:06,940
from Google I believe if I read that

00:35:04,390 --> 00:35:10,780
correctly you said a clean build using

00:35:06,940 --> 00:35:12,280
basil was without caching was faster

00:35:10,780 --> 00:35:13,510
than Xcode and clean build is that

00:35:12,280 --> 00:35:17,260
correct it is correct

00:35:13,510 --> 00:35:18,850
do you know that's not obvious it's not

00:35:17,260 --> 00:35:20,500
obvious to me that should necessarily be

00:35:18,850 --> 00:35:22,540
the case can you do have any insight

00:35:20,500 --> 00:35:25,240
into that yeah I think it's because we

00:35:22,540 --> 00:35:27,640
have so the I need to qualify that with

00:35:25,240 --> 00:35:29,560
something we we're still using Xcode

00:35:27,640 --> 00:35:31,600
ships with two different bill systems it

00:35:29,560 --> 00:35:34,060
ships with a legacy bill system and it

00:35:31,600 --> 00:35:36,280
ships with a newer bill system that's

00:35:34,060 --> 00:35:39,700
supposed to be faster and shinier and

00:35:36,280 --> 00:35:41,560
it's never worked for us so we are still

00:35:39,700 --> 00:35:43,630
using the legacy bill system and one

00:35:41,560 --> 00:35:46,570
problem the legacy bill system has is

00:35:43,630 --> 00:35:48,940
that it tracks dependencies at a much

00:35:46,570 --> 00:35:52,120
coarser level so if you have a framework

00:35:48,940 --> 00:35:54,100
it'll go and say this new framework

00:35:52,120 --> 00:35:56,110
depends on this framework so let's wait

00:35:54,100 --> 00:35:58,660
until it's built and by it's built it

00:35:56,110 --> 00:36:00,460
means you know compiled and linked

00:35:58,660 --> 00:36:01,210
before it starts building the other

00:36:00,460 --> 00:36:03,220
framework

00:36:01,210 --> 00:36:05,080
whereas basil will say oh it look

00:36:03,220 --> 00:36:07,180
headers oh that's all I need right and

00:36:05,080 --> 00:36:09,190
start eagerly compiling other stuff so

00:36:07,180 --> 00:36:10,960
it paralyzes much better so I suspect

00:36:09,190 --> 00:36:15,610
that is the reason why basil is faster

00:36:10,960 --> 00:36:17,860
all right thanks Hey I'm Robin novel

00:36:15,610 --> 00:36:20,410
from improbable in London I had a quick

00:36:17,860 --> 00:36:22,300
question your graphs are basically

00:36:20,410 --> 00:36:24,430
saying that son boxing extremely

00:36:22,300 --> 00:36:27,040
expensive but I was wondering have you

00:36:24,430 --> 00:36:29,440
tried enabling son boxing with caching

00:36:27,040 --> 00:36:32,860
and is that like what is the performance

00:36:29,440 --> 00:36:36,270
relative to Xcode sandboxing we have

00:36:32,860 --> 00:36:41,230
played with sandboxing with caching and

00:36:36,270 --> 00:36:43,060
it's I don't have the numbers with me

00:36:41,230 --> 00:36:45,850
it's it's of course faster than

00:36:43,060 --> 00:36:49,840
sandboxing without caching and it's not

00:36:45,850 --> 00:36:52,810
as fast as caching with no sandboxing so

00:36:49,840 --> 00:36:56,350
so we we essentially went for speed of

00:36:52,810 --> 00:36:59,860
builds rather than than safety you know

00:36:56,350 --> 00:37:00,910
living on the edge and all that but yeah

00:36:59,860 --> 00:37:05,350
I don't I don't have the numbers but

00:37:00,910 --> 00:37:07,030
it's in between socially Thanks I am ed

00:37:05,350 --> 00:37:08,080
from bring back so you talked about

00:37:07,030 --> 00:37:10,240
obviously

00:37:08,080 --> 00:37:11,800
iOS full of this talk do you always

00:37:10,240 --> 00:37:15,190
responsible for the Android build or

00:37:11,800 --> 00:37:18,490
separate no there's a separate team that

00:37:15,190 --> 00:37:20,650
deals with Android then they seem to be

00:37:18,490 --> 00:37:22,210
really happy with Gradle so we we don't

00:37:20,650 --> 00:37:28,540
want to touch something that's not

00:37:22,210 --> 00:37:30,820
broken oh sorry yeah I'm just a quick

00:37:28,540 --> 00:37:33,430
question you mentioned like one of the

00:37:30,820 --> 00:37:35,560
things you were oh Anthony from Twitter

00:37:33,430 --> 00:37:37,120
so you were mentioning one of the things

00:37:35,560 --> 00:37:41,350
that you were kind of thinking about is

00:37:37,120 --> 00:37:43,290
like first off acquiring more machines

00:37:41,350 --> 00:37:46,000
just for a sense of scale like how many

00:37:43,290 --> 00:37:48,820
machines do you guys currently use for

00:37:46,000 --> 00:37:52,510
your like BCI process how many machines

00:37:48,820 --> 00:37:57,010
do we use per so how many machines we

00:37:52,510 --> 00:37:59,320
use like Oh in deflate there's thousands

00:37:57,010 --> 00:38:02,710
of them I know it's more than a thousand

00:37:59,320 --> 00:38:05,680
and probably less than 2000 okay I don't

00:38:02,710 --> 00:38:07,020
know it's thousands of them but they're

00:38:05,680 --> 00:38:11,290
different

00:38:07,020 --> 00:38:14,800
there's also we're moving the the CI

00:38:11,290 --> 00:38:16,960
pipeline to the newer minis we that was

00:38:14,800 --> 00:38:19,510
one of the things that that made a huge

00:38:16,960 --> 00:38:22,150
difference not just with the build time

00:38:19,510 --> 00:38:24,490
but with like that everything time when

00:38:22,150 --> 00:38:25,900
we deploy the new minis were built I'm

00:38:24,490 --> 00:38:28,390
just dropping people who are like who

00:38:25,900 --> 00:38:31,270
did you did you do the basil thing and

00:38:28,390 --> 00:38:34,000
we're like nah which is you know we

00:38:31,270 --> 00:38:36,460
should have said yes just said no that's

00:38:34,000 --> 00:38:38,320
the new hardware and and then the basil

00:38:36,460 --> 00:38:39,820
drop they don't look that great in

00:38:38,320 --> 00:38:41,410
comparison just because of the hard work

00:38:39,820 --> 00:38:45,040
but it was because the old Harbor was so

00:38:41,410 --> 00:38:46,900
bad and basil actually was much better

00:38:45,040 --> 00:38:48,550
in the new machines because they have

00:38:46,900 --> 00:38:48,990
more course and basil can actually use

00:38:48,550 --> 00:38:54,940
them

00:38:48,990 --> 00:38:57,130
awesome hi I'm Alex from Google we

00:38:54,940 --> 00:38:58,750
actually are trying to investigate

00:38:57,130 --> 00:39:00,970
what's going on with sandboxing because

00:38:58,750 --> 00:39:04,480
some users are reporting that in some

00:39:00,970 --> 00:39:05,950
cases it's terrible on Mac and it seems

00:39:04,480 --> 00:39:08,380
to be dependent both on the mac OS

00:39:05,950 --> 00:39:09,460
version yes they are hardware like a Mac

00:39:08,380 --> 00:39:11,740
Pro

00:39:09,460 --> 00:39:13,690
Macbook versus whatever else whether

00:39:11,740 --> 00:39:16,720
you're using swift or Objective C and we

00:39:13,690 --> 00:39:17,890
currently aren't really sure where to go

00:39:16,720 --> 00:39:20,590
on because we there is not enough data

00:39:17,890 --> 00:39:22,150
points but the behavior is like vastly

00:39:20,590 --> 00:39:23,440
different for different users of the

00:39:22,150 --> 00:39:25,690
manual what exactly they are building so

00:39:23,440 --> 00:39:27,460
if you have money to contribute you or

00:39:25,690 --> 00:39:28,480
anyone else in the room search for

00:39:27,460 --> 00:39:31,240
addition get up please

00:39:28,480 --> 00:39:32,680
we should absolutely talk it's we've

00:39:31,240 --> 00:39:34,630
done a bunch of experiment I was

00:39:32,680 --> 00:39:38,260
convinced that it was sandbox surface I

00:39:34,630 --> 00:39:42,040
filed a PR I'm not a PR initially you've

00:39:38,260 --> 00:39:44,920
seen it where when I upgrade I have one

00:39:42,040 --> 00:39:47,230
iMac that that I keep on on like the

00:39:44,920 --> 00:39:51,940
latest version and I was in a catalina

00:39:47,230 --> 00:39:54,430
beta and the bill was taking 22 hours so

00:39:51,940 --> 00:39:56,140
it was ridiculous as though and and I

00:39:54,430 --> 00:39:58,960
was trying to figure out what it was and

00:39:56,140 --> 00:40:00,940
and I rewrote I mean I didn't rewrite I

00:39:58,960 --> 00:40:04,120
took sandbox a face out of the equation

00:40:00,940 --> 00:40:05,950
I just wrote my own sandbox face command

00:40:04,120 --> 00:40:07,570
and see that all didn't do any sandbox

00:40:05,950 --> 00:40:10,390
and just accept it and it was just a

00:40:07,570 --> 00:40:13,090
slow so I think it's gotta be something

00:40:10,390 --> 00:40:15,610
with the file system APF face or the way

00:40:13,090 --> 00:40:17,170
does the symlinks or there is something

00:40:15,610 --> 00:40:18,610
there that's definitely not right and

00:40:17,170 --> 00:40:20,830
yeah well which we'll definitely talk

00:40:18,610 --> 00:40:29,650
I'd be happy to help with data or Brian

00:40:20,830 --> 00:40:31,990
thanks whatever never the last one here

00:40:29,650 --> 00:40:33,460
Erick maverick Microsoft two months ago

00:40:31,990 --> 00:40:35,140
at the London bill meetup there was a

00:40:33,460 --> 00:40:37,090
presentation by one of our devs from

00:40:35,140 --> 00:40:40,270
bill Excel Microsoft bill accelerator

00:40:37,090 --> 00:40:43,390
there's support in Bill Excel for about

00:40:40,270 --> 00:40:45,370
10 maybe 15 percent consistent

00:40:43,390 --> 00:40:47,440
production and performance like overhead

00:40:45,370 --> 00:40:50,170
for sandboxing and Bill Excel site for

00:40:47,440 --> 00:40:52,450
Mac the presentation was on the new

00:40:50,170 --> 00:40:54,790
Catalina driver support they were adding

00:40:52,450 --> 00:40:57,880
in the bill excel open source code base

00:40:54,790 --> 00:40:59,410
so for yourself and for the Google folks

00:40:57,880 --> 00:41:01,300
working on this you might want to take a

00:40:59,410 --> 00:41:04,170
look the presentation from London build

00:41:01,300 --> 00:41:06,280
meetup on I think it was October first

00:41:04,170 --> 00:41:07,990
contact me you'll see the build Excel

00:41:06,280 --> 00:41:08,800
link tomorrow after my talk in the

00:41:07,990 --> 00:41:10,810
morning

00:41:08,800 --> 00:41:12,280
but it might be a good way to do a

00:41:10,810 --> 00:41:13,870
drop-in replacement if it's compatible

00:41:12,280 --> 00:41:16,330
with your sandboxing approach so

00:41:13,870 --> 00:41:19,020
definitely thank you yeah we also tried

00:41:16,330 --> 00:41:22,470
sandbox affairs from from

00:41:19,020 --> 00:41:24,450
the basal bill then it was not as bad

00:41:22,470 --> 00:41:26,190
but it was not great because the fuse in

00:41:24,450 --> 00:41:28,290
the middle and every time you do a cease

00:41:26,190 --> 00:41:30,030
calling if you see it's like four C

00:41:28,290 --> 00:41:35,300
schools or whatever so it's not great

00:41:30,030 --> 00:41:38,220
but but yeah I'll look that up thank you

00:41:35,300 --> 00:41:40,110
okay well this is great I really

00:41:38,220 --> 00:41:42,660
appreciate it appreciate you coming out

00:41:40,110 --> 00:41:44,910
push everybody sticking around right

00:41:42,660 --> 00:41:46,710
after this I mean probably right now

00:41:44,910 --> 00:41:48,600
there's a reception and I hope every can

00:41:46,710 --> 00:41:48,840
join us and thanks for coming thanks see

00:41:48,600 --> 00:41:52,140
ya

00:41:48,840 --> 00:41:56,000
thank you thank you see you tomorrow for

00:41:52,140 --> 00:41:56,000
the same time same place

00:41:58,930 --> 00:42:01,330

YouTube URL: https://www.youtube.com/watch?v=gVdkJu3QRA4


