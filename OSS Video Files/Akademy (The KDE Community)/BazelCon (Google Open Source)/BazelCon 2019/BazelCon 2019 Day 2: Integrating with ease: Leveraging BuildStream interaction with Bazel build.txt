Title: BazelCon 2019 Day 2: Integrating with ease: Leveraging BuildStream interaction with Bazel build
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Daniel Silverstone, Codethink event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Daniel Silverstone;
Captions: 
	00:00:00,420 --> 00:00:08,189
and next up I believe we have Daniel

00:00:04,770 --> 00:00:10,400
Silverstone from code think he is going

00:00:08,189 --> 00:00:13,440
to give a talk integrating with these

00:00:10,400 --> 00:00:15,599
leveraging build stream interaction with

00:00:13,440 --> 00:00:22,590
basil build for consistent results

00:00:15,599 --> 00:00:24,420
welcome Daniel thank you I'm afraid

00:00:22,590 --> 00:00:36,410
you'll have to ask me to bear with me

00:00:24,420 --> 00:00:36,410
for just a moment okay

00:00:37,040 --> 00:00:46,490
hi I'm doing this a little bit

00:00:44,300 --> 00:00:57,020
differently to most people sorry for

00:00:46,490 --> 00:00:58,760
that okay hopefully you'll find this

00:00:57,020 --> 00:01:00,350
informative and interesting it's a

00:00:58,760 --> 00:01:02,090
little bit different to some of the

00:01:00,350 --> 00:01:04,940
other talks that you'll have seen over

00:01:02,090 --> 00:01:07,130
the past couple of days so first of all

00:01:04,940 --> 00:01:08,870
Who am I I'm very new to the basil

00:01:07,130 --> 00:01:10,940
community I've not met most of you

00:01:08,870 --> 00:01:13,940
before I've been working on building

00:01:10,940 --> 00:01:17,990
software platforms for about twenty

00:01:13,940 --> 00:01:20,270
years first as a Debian user then Debian

00:01:17,990 --> 00:01:22,820
developer then building platforms based

00:01:20,270 --> 00:01:25,790
on Debian and Red Hat poky rolled our

00:01:22,820 --> 00:01:28,190
own finally ended up working on build

00:01:25,790 --> 00:01:30,740
stream at code think you are my employer

00:01:28,190 --> 00:01:33,590
and in the past year or so making build

00:01:30,740 --> 00:01:35,690
string and basil work together so that

00:01:33,590 --> 00:01:40,100
build stream can work well in a base

00:01:35,690 --> 00:01:42,020
Lorient an ecosystem in the past people

00:01:40,100 --> 00:01:44,330
who know about both basil and build

00:01:42,020 --> 00:01:47,479
stream have been asking me and my

00:01:44,330 --> 00:01:49,330
colleagues why is one of them better

00:01:47,479 --> 00:01:52,790
than the other which one should I use

00:01:49,330 --> 00:01:54,530
and instead we've been saying well why

00:01:52,790 --> 00:01:56,180
can't we be using both how can they work

00:01:54,530 --> 00:01:58,729
together to be better than either one

00:01:56,180 --> 00:02:00,470
could be on its own so this is not about

00:01:58,729 --> 00:02:02,270
basil versus build stream this is about

00:02:00,470 --> 00:02:04,880
basil and build stream working together

00:02:02,270 --> 00:02:07,580
to solve quite complex systems

00:02:04,880 --> 00:02:09,229
integration problems so to give some

00:02:07,580 --> 00:02:11,720
context at least from my perspective

00:02:09,229 --> 00:02:14,030
based on this a build tool which tightly

00:02:11,720 --> 00:02:16,040
integrates the software components that

00:02:14,030 --> 00:02:18,440
you're building it is rapid it does its

00:02:16,040 --> 00:02:20,540
best to be correct as possible excellent

00:02:18,440 --> 00:02:23,810
caching and remote build support and an

00:02:20,540 --> 00:02:25,459
active and interested community code

00:02:23,810 --> 00:02:26,810
think we've been working on getting the

00:02:25,459 --> 00:02:28,640
projects that were involved with to be

00:02:26,810 --> 00:02:31,160
more aligned with basil and to use basil

00:02:28,640 --> 00:02:33,470
airline technologies where we can to

00:02:31,160 --> 00:02:36,860
solve systems integration problems not

00:02:33,470 --> 00:02:38,900
just software build so we need to define

00:02:36,860 --> 00:02:41,299
systems integration for the purpose of

00:02:38,900 --> 00:02:43,190
this talk and for the purpose of this

00:02:41,299 --> 00:02:45,919
talk we're talking about some basic

00:02:43,190 --> 00:02:48,440
platform software code think mostly

00:02:45,919 --> 00:02:50,359
deals with Linux so that's my focus for

00:02:48,440 --> 00:02:50,720
today but this does apply to complex

00:02:50,359 --> 00:02:52,730
systems

00:02:50,720 --> 00:02:55,010
build on Windows Mac OS and so on and

00:02:52,730 --> 00:02:56,930
for now when I talk about a basic

00:02:55,010 --> 00:02:59,750
platform I'm talking about a kernel a

00:02:56,930 --> 00:03:02,410
Lib C low-level userland software so

00:02:59,750 --> 00:03:04,670
system D core utils that kind of thing

00:03:02,410 --> 00:03:05,330
to get anywhere you're going to need to

00:03:04,670 --> 00:03:07,130
change

00:03:05,330 --> 00:03:09,830
you usually acquire one from somewhere

00:03:07,130 --> 00:03:11,750
else then you bootstrap one that you can

00:03:09,830 --> 00:03:14,120
trust a little more and then we add in

00:03:11,750 --> 00:03:17,210
more compilers more languages language

00:03:14,120 --> 00:03:19,460
runtimes we get to middleware so

00:03:17,210 --> 00:03:21,800
tensorflow GStreamer domain-specific

00:03:19,460 --> 00:03:24,860
languages like automotive communications

00:03:21,800 --> 00:03:28,850
software maybe X 11 or Wayland if you're

00:03:24,860 --> 00:03:30,350
building graphical systems and then you

00:03:28,850 --> 00:03:33,110
need to integrate your applications on

00:03:30,350 --> 00:03:35,600
top of that this again likely includes a

00:03:33,110 --> 00:03:37,220
significant number of other libraries

00:03:35,600 --> 00:03:39,980
that you're dealing with systems

00:03:37,220 --> 00:03:41,840
configuration changes lots and lots of

00:03:39,980 --> 00:03:43,550
code and this is probably where most of

00:03:41,840 --> 00:03:46,160
you guys are working at the moment and

00:03:43,550 --> 00:03:48,350
then of course you have to deploy that

00:03:46,160 --> 00:03:50,570
that might be docker images like we've

00:03:48,350 --> 00:03:52,580
seen it might be disk images that are

00:03:50,570 --> 00:03:54,050
going to be installed onto hardware and

00:03:52,580 --> 00:03:57,560
factories it might be over-the-air

00:03:54,050 --> 00:04:00,470
artifacts to update existing installed

00:03:57,560 --> 00:04:04,070
systems writing AWS lambda most likely

00:04:00,470 --> 00:04:06,530
it's some combination of all of these so

00:04:04,070 --> 00:04:09,050
this leads to really interesting

00:04:06,530 --> 00:04:11,300
problems that require particular

00:04:09,050 --> 00:04:13,760
approaches to solve in order to minimize

00:04:11,300 --> 00:04:17,030
the cost both to systems integrators and

00:04:13,760 --> 00:04:19,760
to do this without making the lives of

00:04:17,030 --> 00:04:22,370
day-to-day developers worse so we'll

00:04:19,760 --> 00:04:24,919
explore this with a small systems

00:04:22,370 --> 00:04:27,800
platform and when I say small I mean

00:04:24,919 --> 00:04:30,320
maybe 500 independent pieces of software

00:04:27,800 --> 00:04:32,720
that need to work in concert they have

00:04:30,320 --> 00:04:35,570
different build systems some might be

00:04:32,720 --> 00:04:38,540
basil most are probably not they have

00:04:35,570 --> 00:04:40,490
complex dependency chains each of those

00:04:38,540 --> 00:04:42,020
projects has got its own update cadence

00:04:40,490 --> 00:04:44,180
the software might change the

00:04:42,020 --> 00:04:45,590
dependencies may come and go changes in

00:04:44,180 --> 00:04:47,870
your dependencies may require updating

00:04:45,590 --> 00:04:50,150
other dependencies and all of this has

00:04:47,870 --> 00:04:53,090
got to be managed effectively in order

00:04:50,150 --> 00:04:55,520
to cope with the integration problem and

00:04:53,090 --> 00:04:58,550
all of this needs to keep going over a

00:04:55,520 --> 00:05:00,710
product's lifetime I imagine many of you

00:04:58,550 --> 00:05:03,200
are dealing with situations where your

00:05:00,710 --> 00:05:04,580
product lifetime is fairly short because

00:05:03,200 --> 00:05:06,440
it's let's say it's an act

00:05:04,580 --> 00:05:09,530
and you update the app and all your

00:05:06,440 --> 00:05:12,610
developers are working with that all of

00:05:09,530 --> 00:05:14,600
your users just get the new updates but

00:05:12,610 --> 00:05:17,270
something that I have to deal with quite

00:05:14,600 --> 00:05:19,640
a lot many of my clients are automotive

00:05:17,270 --> 00:05:21,920
and for the automotive guys here you

00:05:19,640 --> 00:05:25,820
know that lifetime of a software product

00:05:21,920 --> 00:05:28,760
can be decades your integrated systems

00:05:25,820 --> 00:05:30,590
have to be updatable reproducible across

00:05:28,760 --> 00:05:32,360
that lifetime they need to cope with

00:05:30,590 --> 00:05:34,160
security updates that come in across

00:05:32,360 --> 00:05:35,870
that lifetime they need to cope with

00:05:34,160 --> 00:05:37,340
changes in the customer expectations

00:05:35,870 --> 00:05:40,790
across that lifetime and still be

00:05:37,340 --> 00:05:43,070
effectively the same system also your

00:05:40,790 --> 00:05:45,560
developers come and go your working

00:05:43,070 --> 00:05:47,030
environments for your developers for

00:05:45,560 --> 00:05:50,780
your product still have to be

00:05:47,030 --> 00:05:53,450
reproducible up two decades after you

00:05:50,780 --> 00:05:57,110
thought you were last finished with that

00:05:53,450 --> 00:05:59,750
product developer hardware changes you

00:05:57,110 --> 00:06:02,300
may have to update for that and all of

00:05:59,750 --> 00:06:05,440
this has to be done with minimal cost

00:06:02,300 --> 00:06:07,550
minimal friction minimal wasting of time

00:06:05,440 --> 00:06:10,190
integrators need tooling to help them do

00:06:07,550 --> 00:06:13,340
their jobs automation to help them not

00:06:10,190 --> 00:06:15,380
have to do their jobs and developers

00:06:13,340 --> 00:06:17,840
need the ease of developing work that

00:06:15,380 --> 00:06:19,430
can be easily integrated to not have to

00:06:17,840 --> 00:06:21,740
care about that integrator tooling

00:06:19,430 --> 00:06:24,290
except if it can also improve their

00:06:21,740 --> 00:06:27,590
lives we particularly want to eliminate

00:06:24,290 --> 00:06:31,700
that where it works for me responds when

00:06:27,590 --> 00:06:34,070
you have issues so we can scale this up

00:06:31,700 --> 00:06:37,070
large product development often involves

00:06:34,070 --> 00:06:40,370
many engineering teams these are often

00:06:37,070 --> 00:06:41,960
distributed among the companies not just

00:06:40,370 --> 00:06:44,300
within one company they have complex

00:06:41,960 --> 00:06:46,130
inter dependencies between the teams but

00:06:44,300 --> 00:06:49,490
for the purpose of this we'll simplify

00:06:46,130 --> 00:06:52,160
it we'll talk about platforms platforms

00:06:49,490 --> 00:06:54,110
need again potentially many teams

00:06:52,160 --> 00:06:56,690
toolchain operating system middleware

00:06:54,110 --> 00:07:00,290
etc all of these teams are feeding into

00:06:56,690 --> 00:07:02,420
each other and the output of this group

00:07:00,290 --> 00:07:05,060
is effectively your target based

00:07:02,420 --> 00:07:07,370
platform your development platform tool

00:07:05,060 --> 00:07:10,040
chains that perhaps basil might consume

00:07:07,370 --> 00:07:13,060
that kind of thing their outputs are

00:07:10,040 --> 00:07:16,690
consumed by a putative applications team

00:07:13,060 --> 00:07:18,490
they again many of them may deliver

00:07:16,690 --> 00:07:20,800
into one another to aid in their own

00:07:18,490 --> 00:07:25,570
internal validation and then they

00:07:20,800 --> 00:07:26,800
deliver on to systems team teams and

00:07:25,570 --> 00:07:28,360
they're dealing with integrating

00:07:26,800 --> 00:07:30,250
everything together they're dealing with

00:07:28,360 --> 00:07:31,930
the complex interactions between the

00:07:30,250 --> 00:07:34,270
various applications their library

00:07:31,930 --> 00:07:34,990
dependencies the platform on which it's

00:07:34,270 --> 00:07:36,730
being built

00:07:34,990 --> 00:07:39,730
maybe the hardware that's coming in from

00:07:36,730 --> 00:07:42,160
some undescribed Hardware team that's

00:07:39,730 --> 00:07:44,920
feeding into this they have the ability

00:07:42,160 --> 00:07:48,490
to do the most complete testing of any

00:07:44,920 --> 00:07:50,530
of these groups therefore they're likely

00:07:48,490 --> 00:07:54,520
to be feeding back then to platforms

00:07:50,530 --> 00:07:58,240
applications etc and this is a massively

00:07:54,520 --> 00:08:00,700
complex mess of interactions and we

00:07:58,240 --> 00:08:03,520
think there must be a better way to deal

00:08:00,700 --> 00:08:06,070
with this code think clients are often

00:08:03,520 --> 00:08:07,360
organized similarly to this we've been

00:08:06,070 --> 00:08:10,180
dealing with this for a long time and

00:08:07,360 --> 00:08:11,110
out of all of that work has come what

00:08:10,180 --> 00:08:14,590
I'd like to talk to you a little bit

00:08:11,110 --> 00:08:18,610
about today build stream is an

00:08:14,590 --> 00:08:21,580
integration tool it uses any number of

00:08:18,610 --> 00:08:25,390
build systems of which basil is perhaps

00:08:21,580 --> 00:08:27,730
the fastest most correct build stream

00:08:25,390 --> 00:08:29,980
targets the construction of software

00:08:27,730 --> 00:08:32,380
systems from embedded device firmware

00:08:29,980 --> 00:08:34,000
and IOT server operating systems

00:08:32,380 --> 00:08:37,390
automotive platforms industrial

00:08:34,000 --> 00:08:41,380
logistics blah-blah-blah-blah-blah tool

00:08:37,390 --> 00:08:43,000
chains that basil consumes is one kind

00:08:41,380 --> 00:08:45,580
of thing that builds stream does a

00:08:43,000 --> 00:08:47,440
really good job with and we feel that

00:08:45,580 --> 00:08:49,270
build stream is probably an excellent

00:08:47,440 --> 00:08:51,330
way for you guys to construct tool

00:08:49,270 --> 00:08:54,970
chains

00:08:51,330 --> 00:08:56,380
it's a redo of an older internal project

00:08:54,970 --> 00:08:57,760
at code think that you may or may not

00:08:56,380 --> 00:09:00,540
have heard of but I've promised not to

00:08:57,760 --> 00:09:02,590
speak its name and build string was

00:09:00,540 --> 00:09:04,660
started with an explicit goal of

00:09:02,590 --> 00:09:06,220
building a community rather than being a

00:09:04,660 --> 00:09:08,550
code thinker project so if you imagine

00:09:06,220 --> 00:09:11,920
the basil community rather than Blaise

00:09:08,550 --> 00:09:14,920
same kind of idea build stream is here

00:09:11,920 --> 00:09:17,020
to work with other tooling projects such

00:09:14,920 --> 00:09:18,820
as basil rather than trying to replace

00:09:17,020 --> 00:09:21,760
or outdo them we want to work together

00:09:18,820 --> 00:09:24,250
and build stream we feel can be used as

00:09:21,760 --> 00:09:25,990
a pretty good way to get to basil when

00:09:24,250 --> 00:09:28,210
perhaps your software stack does not

00:09:25,990 --> 00:09:29,960
lend itself to being fully integrated

00:09:28,210 --> 00:09:32,000
into the basil world maybe

00:09:29,960 --> 00:09:33,410
you need you're currently using Yocto or

00:09:32,000 --> 00:09:36,730
something like that to construct stuff

00:09:33,410 --> 00:09:39,350
we think build stream is a good fit

00:09:36,730 --> 00:09:41,870
started at the end of roughly 2016

00:09:39,350 --> 00:09:44,720
initially to solve genomes integration

00:09:41,870 --> 00:09:46,370
use cases so if you're familiar with

00:09:44,720 --> 00:09:48,650
that community JH build can I'm

00:09:46,370 --> 00:09:50,920
continuous that kind of thing it's now

00:09:48,650 --> 00:09:54,140
community maintained for those use cases

00:09:50,920 --> 00:09:57,350
it was adopted to solve a similar

00:09:54,140 --> 00:10:00,200
problem to the genome problems but for

00:09:57,350 --> 00:10:02,180
base platforms the free desktop SDK

00:10:00,200 --> 00:10:04,340
project moved from Yocto and flat pack

00:10:02,180 --> 00:10:05,660
builder over to build stream and they've

00:10:04,340 --> 00:10:09,590
been going from strength to strength

00:10:05,660 --> 00:10:11,660
with that free desktop SDK provides tool

00:10:09,590 --> 00:10:14,270
chains and platforms to build systems

00:10:11,660 --> 00:10:16,010
out of Linux and other another large

00:10:14,270 --> 00:10:18,410
collection of other free software and

00:10:16,010 --> 00:10:21,140
we'll be using some of their outputs in

00:10:18,410 --> 00:10:24,080
hopefully assuming they work some live

00:10:21,140 --> 00:10:27,980
demos as we go but can we go bigger than

00:10:24,080 --> 00:10:30,400
this genome and free desktop SDK seven

00:10:27,980 --> 00:10:34,130
to eight hundred independent components

00:10:30,400 --> 00:10:36,020
we presented this at guada a genome

00:10:34,130 --> 00:10:38,060
conference and one of our clients

00:10:36,020 --> 00:10:40,910
invited us to come in and see what we

00:10:38,060 --> 00:10:43,490
could do with their use cases a team was

00:10:40,910 --> 00:10:45,260
spun up including myself that was

00:10:43,490 --> 00:10:47,720
focusing on the performance and scaling

00:10:45,260 --> 00:10:49,400
up of build stream and build stream is

00:10:47,720 --> 00:10:51,680
now running in their use case with

00:10:49,400 --> 00:10:54,230
hundreds of thousands of components all

00:10:51,680 --> 00:10:57,260
at once the full gamut of build systems

00:10:54,230 --> 00:10:59,540
including basil and by adopting

00:10:57,260 --> 00:11:02,990
technologies from the basil community

00:10:59,540 --> 00:11:05,170
particularly cass and the re api build

00:11:02,990 --> 00:11:06,950
stream is integrating with a

00:11:05,170 --> 00:11:10,880
horizontally scalable based on

00:11:06,950 --> 00:11:15,290
compatible infrastructure enough adverts

00:11:10,880 --> 00:11:19,370
let's talk tech a build stream project

00:11:15,290 --> 00:11:22,880
is probably fairly similar to a basil

00:11:19,370 --> 00:11:24,440
project in the sense that there's lots

00:11:22,880 --> 00:11:26,510
of pieces of software involved and we're

00:11:24,440 --> 00:11:26,930
interested interested in how they fit

00:11:26,510 --> 00:11:29,780
together

00:11:26,930 --> 00:11:31,820
but build stream focuses on each piece

00:11:29,780 --> 00:11:33,830
of software only as an integral

00:11:31,820 --> 00:11:36,140
component we don't try to look inside it

00:11:33,830 --> 00:11:39,200
and we focus on the interdependencies

00:11:36,140 --> 00:11:41,390
and how they integrate together you have

00:11:39,200 --> 00:11:43,820
a project configuration file this is

00:11:41,390 --> 00:11:45,200
called project that can't fits yam all

00:11:43,820 --> 00:11:47,600
and it has fundamentals like the

00:11:45,200 --> 00:11:49,640
project's name where the inputs located

00:11:47,600 --> 00:11:54,040
configuration options for the project

00:11:49,640 --> 00:11:57,050
this is a little bit like workspace

00:11:54,040 --> 00:11:59,300
build stream splits the inputs that it's

00:11:57,050 --> 00:12:02,090
dealing with into two things elements

00:11:59,300 --> 00:12:03,730
and sources elements are integrated

00:12:02,090 --> 00:12:06,410
piece integral pieces of work to be done

00:12:03,730 --> 00:12:08,420
that might be a software build it might

00:12:06,410 --> 00:12:12,080
be an integration step in producing your

00:12:08,420 --> 00:12:14,720
output and sources which are sets of

00:12:12,080 --> 00:12:19,190
inputs that come together and get staged

00:12:14,720 --> 00:12:21,590
as the input to an element process now

00:12:19,190 --> 00:12:24,080
then there are the dependencies just

00:12:21,590 --> 00:12:25,420
like the basil action graph build stream

00:12:24,080 --> 00:12:28,520
elements form a directed graph

00:12:25,420 --> 00:12:30,290
dependencies are arcs in that graph so a

00:12:28,520 --> 00:12:32,270
build depends on b-bill depends on C

00:12:30,290 --> 00:12:34,820
does the obvious C builds then B builds

00:12:32,270 --> 00:12:38,180
than a builds dependencies can be run

00:12:34,820 --> 00:12:39,860
time or build time or both so these arcs

00:12:38,180 --> 00:12:42,560
annotated with the kinds of operations

00:12:39,860 --> 00:12:43,880
that apply to them and then different

00:12:42,560 --> 00:12:45,110
operations within build stream at

00:12:43,880 --> 00:12:47,650
different times are going to follow

00:12:45,110 --> 00:12:50,930
those arcs differently to produce

00:12:47,650 --> 00:12:53,870
different work actions and its elements

00:12:50,930 --> 00:12:56,740
all the way down elements represent both

00:12:53,870 --> 00:13:01,040
integral pieces of software and also

00:12:56,740 --> 00:13:03,530
integrations of software and we can join

00:13:01,040 --> 00:13:05,690
these together so like how basil offers

00:13:03,530 --> 00:13:07,370
remote repositories and the like build

00:13:05,690 --> 00:13:09,860
stream has this it calls them Junction

00:13:07,370 --> 00:13:11,450
elements they're semi special because

00:13:09,860 --> 00:13:13,550
they're handled by the loader rather

00:13:11,450 --> 00:13:15,820
than by the main build machinery again a

00:13:13,550 --> 00:13:18,350
bit like a repository rule in basil and

00:13:15,820 --> 00:13:20,150
the staged sources that come out of a

00:13:18,350 --> 00:13:22,190
junction are another build stream

00:13:20,150 --> 00:13:23,750
project and that projects elements are

00:13:22,190 --> 00:13:26,720
made available to the project that

00:13:23,750 --> 00:13:29,780
you're building just like labels from

00:13:26,720 --> 00:13:32,600
one repository available another let's

00:13:29,780 --> 00:13:34,400
look at one of these elements this is an

00:13:32,600 --> 00:13:40,880
element from free desktop SDK

00:13:34,400 --> 00:13:44,750
it is Lib JPEG turbo it uses C make to

00:13:40,880 --> 00:13:46,850
build and reduce the base TK put this

00:13:44,750 --> 00:13:50,270
into tool chains and platform systems

00:13:46,850 --> 00:13:53,990
alike the first thing that we kind of

00:13:50,270 --> 00:13:55,280
notice here is the kind marker actually

00:13:53,990 --> 00:13:57,480
this is this is Yama in case anyone

00:13:55,280 --> 00:13:59,279
hasn't noticed that by now

00:13:57,480 --> 00:14:02,220
build streams behavior comes mostly from

00:13:59,279 --> 00:14:05,279
plugins and coins just select the

00:14:02,220 --> 00:14:07,800
plug-in to use then we have some

00:14:05,279 --> 00:14:10,769
dependencies runtime and build time the

00:14:07,800 --> 00:14:12,690
first bootstrap import is both the other

00:14:10,769 --> 00:14:14,910
two we just build time dependencies the

00:14:12,690 --> 00:14:17,430
distinction is kind of important

00:14:14,910 --> 00:14:19,110
you don't need C make to use Lib JPEG

00:14:17,430 --> 00:14:22,350
turbo so there's no point having that

00:14:19,110 --> 00:14:24,450
independency chains and since all of

00:14:22,350 --> 00:14:25,740
this forms a graph elements can be

00:14:24,450 --> 00:14:30,990
depended on in different ways at

00:14:25,740 --> 00:14:33,000
different points since elements are used

00:14:30,990 --> 00:14:34,230
as deployment outputs you can end up

00:14:33,000 --> 00:14:37,680
with these things in all sorts of

00:14:34,230 --> 00:14:39,959
contexts so the bootstrap import in free

00:14:37,680 --> 00:14:41,370
desktop SDK this is pretty similar to

00:14:39,959 --> 00:14:43,440
what in basil you think of as a tool

00:14:41,370 --> 00:14:45,209
chain it's an import of a basic system

00:14:43,440 --> 00:14:47,610
that's capable of compiling code and

00:14:45,209 --> 00:14:52,019
from here all of three desktop SDK

00:14:47,610 --> 00:14:55,529
bootstraps within sandboxes we also

00:14:52,019 --> 00:14:57,750
bring in c make and by dint of the way

00:14:55,529 --> 00:15:01,019
that build dependencies work all of C

00:14:57,750 --> 00:15:02,520
makes runtime dependencies and we bring

00:15:01,019 --> 00:15:05,070
in NASM presumably there's some

00:15:02,520 --> 00:15:07,290
optimized code in there and of Nasim's

00:15:05,070 --> 00:15:10,500
runtime dependencies all of these

00:15:07,290 --> 00:15:13,890
elements and their dependencies are

00:15:10,500 --> 00:15:15,870
tracked and the inputs are known so that

00:15:13,890 --> 00:15:18,360
the output identities can be computed

00:15:15,870 --> 00:15:22,950
this is similar to but distinct from

00:15:18,360 --> 00:15:24,510
Basil's approach next we have the

00:15:22,950 --> 00:15:27,720
sources for the element here there's

00:15:24,510 --> 00:15:31,529
only one source the source is coming

00:15:27,720 --> 00:15:33,390
from github in this instance and this is

00:15:31,529 --> 00:15:34,890
just a little example of the way that

00:15:33,390 --> 00:15:38,250
build stream deals with urls

00:15:34,890 --> 00:15:40,230
we have URL rewriting so you can have a

00:15:38,250 --> 00:15:42,390
little prefix and that prefix is defined

00:15:40,230 --> 00:15:45,480
in your project config and this lets you

00:15:42,390 --> 00:15:48,000
have a mechanism of saying hey i've

00:15:45,480 --> 00:15:50,190
mirrored all of our github dependencies

00:15:48,000 --> 00:15:51,810
on to an internal get server i can just

00:15:50,190 --> 00:15:53,640
change that github prefix to something

00:15:51,810 --> 00:15:55,410
else all of the element files stay the

00:15:53,640 --> 00:15:59,220
same but the content has come from a

00:15:55,410 --> 00:16:01,920
different location ref means the actual

00:15:59,220 --> 00:16:04,140
identifier of the actual source that is

00:16:01,920 --> 00:16:06,870
going to be built in get that's pretty

00:16:04,140 --> 00:16:09,329
obviously a char get tagged this plugin

00:16:06,870 --> 00:16:10,520
uses a get describe like format because

00:16:09,329 --> 00:16:13,180
it will then put

00:16:10,520 --> 00:16:15,650
Tagg down at the right point to give you

00:16:13,180 --> 00:16:19,070
describe capability within your sandbox

00:16:15,650 --> 00:16:20,840
and this is akin to like a Merkel root

00:16:19,070 --> 00:16:24,410
of digestive a Merkel root for the

00:16:20,840 --> 00:16:26,450
source it's used to identify the inputs

00:16:24,410 --> 00:16:28,580
as part of the calculation of the

00:16:26,450 --> 00:16:32,090
caching key which is similar to how

00:16:28,580 --> 00:16:34,370
basil constructs an action and finally

00:16:32,090 --> 00:16:37,190
just because this is quite a cool bit of

00:16:34,370 --> 00:16:39,470
build stream we have a concept called

00:16:37,190 --> 00:16:40,760
source tracking and here we're just

00:16:39,470 --> 00:16:43,010
saying track the master branch of this

00:16:40,760 --> 00:16:44,570
repository and when instructed build

00:16:43,010 --> 00:16:46,760
stream will go and fetch the element

00:16:44,570 --> 00:16:49,160
source ask the source plugin to perform

00:16:46,760 --> 00:16:50,780
a tracking operation forget tag that's a

00:16:49,160 --> 00:16:51,980
repository refresh and then looking at

00:16:50,780 --> 00:16:54,650
the tracking branch to see if it's

00:16:51,980 --> 00:16:57,020
changed if it has the source plug-in

00:16:54,650 --> 00:16:58,130
updates the ref after all of the sources

00:16:57,020 --> 00:17:00,410
for an element have been tracked

00:16:58,130 --> 00:17:03,020
remember that that's a list but it's

00:17:00,410 --> 00:17:04,730
only got one element at the moment build

00:17:03,020 --> 00:17:07,610
stream will rewrite the element file to

00:17:04,730 --> 00:17:10,610
update those refs and then you've got a

00:17:07,610 --> 00:17:13,089
diff that could be applied automating

00:17:10,610 --> 00:17:15,980
this process leads to speculative

00:17:13,089 --> 00:17:18,680
updating of your software platform

00:17:15,980 --> 00:17:20,180
itself in CI pipelines your CI pipelines

00:17:18,680 --> 00:17:22,970
could run a build of that project and

00:17:20,180 --> 00:17:25,730
then offer up mode requests offering

00:17:22,970 --> 00:17:28,430
validated tracking changes to your

00:17:25,730 --> 00:17:29,840
dependencies and this is one of the

00:17:28,430 --> 00:17:33,170
things that massively reduces the

00:17:29,840 --> 00:17:36,350
workload on those integration teams so

00:17:33,170 --> 00:17:40,340
let's explore a project see how well

00:17:36,350 --> 00:17:46,000
this goes is that text big enough for

00:17:40,340 --> 00:17:46,000
people yeah cool

00:17:53,100 --> 00:17:59,739
so here's a build stream project that's

00:17:57,460 --> 00:18:02,080
promised we have a project at Kampf so

00:17:59,739 --> 00:18:04,450
we've got a project name some

00:18:02,080 --> 00:18:05,950
information about what input format

00:18:04,450 --> 00:18:08,470
version is required for build stream to

00:18:05,950 --> 00:18:12,789
be able to process this some aliases for

00:18:08,470 --> 00:18:17,200
dealing with free desktop SDK a whole

00:18:12,789 --> 00:18:22,389
bunch of variables plugins the kind of

00:18:17,200 --> 00:18:27,119
thing that you'd expect we have a bunch

00:18:22,389 --> 00:18:30,309
of these elements element files ng BST

00:18:27,119 --> 00:18:31,690
this is not just convention build stream

00:18:30,309 --> 00:18:34,779
will be very sad if you don't end your

00:18:31,690 --> 00:18:36,070
element files dot BST and this is partly

00:18:34,779 --> 00:18:38,169
because then we can do nice things like

00:18:36,070 --> 00:18:40,899
tab completion in a useful fashion for

00:18:38,169 --> 00:18:43,499
you if we have a quick look at one of

00:18:40,899 --> 00:18:43,499
those elements

00:18:44,700 --> 00:18:50,049
this is gtk application it actually

00:18:48,309 --> 00:18:58,859
happens to be built with basil which is

00:18:50,049 --> 00:19:02,700
quite cool that's that's interesting

00:18:58,859 --> 00:19:08,159
this formats doing rather nicely

00:19:02,700 --> 00:19:08,159
nevermind there's a bug there one sec

00:19:11,399 --> 00:19:15,179
path is very wrong

00:19:19,860 --> 00:19:26,460
so just just fix that okay actually

00:19:24,210 --> 00:19:33,600
while we're here let's do something a

00:19:26,460 --> 00:19:36,000
little bit more fun build stream has the

00:19:33,600 --> 00:19:37,590
concept of workspace workspace and build

00:19:36,000 --> 00:19:39,799
stream is just something where you can

00:19:37,590 --> 00:19:43,769
say hey I want to work on this this file

00:19:39,799 --> 00:19:47,809
sorry this this element I want to come

00:19:43,769 --> 00:19:51,750
to it and decide make a change baby

00:19:47,809 --> 00:19:57,860
right there we go so now I've got the

00:19:51,750 --> 00:20:00,840
source to that around let's have a go

00:19:57,860 --> 00:20:05,880
this is a really complex application as

00:20:00,840 --> 00:20:07,159
you may have noticed someone give me a

00:20:05,880 --> 00:20:11,779
name

00:20:07,159 --> 00:20:18,690
yell one out beg your pardon

00:20:11,779 --> 00:20:24,899
Joe cool I tell you what we'll we'll

00:20:18,690 --> 00:20:32,250
just build this giving a little bit away

00:20:24,899 --> 00:20:34,730
about what's gonna happen this is going

00:20:32,250 --> 00:20:37,440
to integrate that changed application

00:20:34,730 --> 00:20:40,350
with that little bug fix that I made to

00:20:37,440 --> 00:20:43,200
the element into a bootable image which

00:20:40,350 --> 00:20:47,580
is then going to go ahead and be

00:20:43,200 --> 00:20:48,840
hopefully usable later on you can see

00:20:47,580 --> 00:20:51,029
here that build stream has started

00:20:48,840 --> 00:20:53,519
running that build and it's kicked in

00:20:51,029 --> 00:20:58,289
basil so we'll come back to that a

00:20:53,519 --> 00:20:59,940
little later there are some limits to

00:20:58,289 --> 00:21:01,980
this build stream is very POSIX at the

00:20:59,940 --> 00:21:05,399
moment it really only works on UNIX

00:21:01,980 --> 00:21:09,149
operating systems does work on WSL with

00:21:05,399 --> 00:21:11,130
remote build only using our API and

00:21:09,149 --> 00:21:13,769
that's mainly due to the fact that built

00:21:11,130 --> 00:21:17,250
stream needs views in order to do its

00:21:13,769 --> 00:21:21,120
unboxing mac OS is similarly limited at

00:21:17,250 --> 00:21:23,309
the moment it will work on WS l2 we

00:21:21,120 --> 00:21:25,830
fully expect and work is underway to

00:21:23,309 --> 00:21:29,340
enable more different sandboxing tech to

00:21:25,830 --> 00:21:30,899
to try to reduce these limits build

00:21:29,340 --> 00:21:32,150
stream is primarily focused on native

00:21:30,899 --> 00:21:33,800
build it can't

00:21:32,150 --> 00:21:35,030
can be used across build if you're

00:21:33,800 --> 00:21:37,280
crossing architecture in the same

00:21:35,030 --> 00:21:39,260
operating system then the free desktop

00:21:37,280 --> 00:21:42,890
SDK project actually provides across

00:21:39,260 --> 00:21:45,530
tool chains you know x86 64 - arm 64

00:21:42,890 --> 00:21:48,020
it's pretty simple but its primary focus

00:21:45,530 --> 00:21:49,700
remains native build and this is in part

00:21:48,020 --> 00:21:51,860
due to experiences we've had where Cross

00:21:49,700 --> 00:21:54,110
building ends up needing significant

00:21:51,860 --> 00:21:56,210
patches to large numbers of open-source

00:21:54,110 --> 00:21:58,490
projects those patches are often not

00:21:56,210 --> 00:21:59,990
accepted by upstream I'm sure all of you

00:21:58,490 --> 00:22:03,080
have had that experience in the past and

00:21:59,990 --> 00:22:05,420
this leads to a high cost of manually

00:22:03,080 --> 00:22:09,020
reintegrating changes on every upstream

00:22:05,420 --> 00:22:10,460
change you can still use cross

00:22:09,020 --> 00:22:12,890
compilation tool chains as part of a

00:22:10,460 --> 00:22:17,030
project so for example we have projects

00:22:12,890 --> 00:22:18,470
where you're building system for x86 and

00:22:17,030 --> 00:22:20,710
as part of that you need to build

00:22:18,470 --> 00:22:24,670
firmware for an embedded controller

00:22:20,710 --> 00:22:28,880
that's obviously a pretty simple task

00:22:24,670 --> 00:22:33,890
build stream has stringent sandboxing by

00:22:28,880 --> 00:22:40,340
default . this means that your sandbox

00:22:33,890 --> 00:22:43,100
is have no content from your host this

00:22:40,340 --> 00:22:44,690
means that it gets a little bit

00:22:43,100 --> 00:22:46,120
difficult to reuse intermediate

00:22:44,690 --> 00:22:48,680
artifacts from the middle of a build

00:22:46,120 --> 00:22:50,300
although again this is being worked on

00:22:48,680 --> 00:22:52,670
particularly because we want to enable

00:22:50,300 --> 00:22:55,850
basil to access its intermediate

00:22:52,670 --> 00:22:57,710
artifacts and to access an RA API so

00:22:55,850 --> 00:22:59,870
that it can not only have been

00:22:57,710 --> 00:23:04,280
distributed but then distribute its own

00:22:59,870 --> 00:23:06,440
work build stream names its artifacts

00:23:04,280 --> 00:23:09,680
based entirely on the identity of the

00:23:06,440 --> 00:23:11,270
inputs as such it can label its entire

00:23:09,680 --> 00:23:13,490
build graph without doing any work

00:23:11,270 --> 00:23:15,680
to compute any of its output content and

00:23:13,490 --> 00:23:18,350
it can know if it already has that final

00:23:15,680 --> 00:23:20,720
output pretty quickly basil on the other

00:23:18,350 --> 00:23:22,970
hand names its output based on their

00:23:20,720 --> 00:23:24,980
contents so it has to compute each

00:23:22,970 --> 00:23:27,230
output in turn obviously that can be

00:23:24,980 --> 00:23:28,940
cached and stopped but it gets to stop

00:23:27,230 --> 00:23:30,320
as soon as it detects that this change

00:23:28,940 --> 00:23:33,290
is no longer propagating through the

00:23:30,320 --> 00:23:35,510
action graph both approaches have no

00:23:33,290 --> 00:23:36,980
benefits in their drawbacks and so by

00:23:35,510 --> 00:23:38,390
combining the two we're hoping to

00:23:36,980 --> 00:23:42,440
mitigate the weaknesses of one and

00:23:38,390 --> 00:23:44,570
amplify the strengths this slider field

00:23:42,440 --> 00:23:47,149
got stolen by the previous talk but

00:23:44,570 --> 00:23:49,039
let's bring basil in that's why we're

00:23:47,149 --> 00:23:52,070
here build stream is already sharing

00:23:49,039 --> 00:23:54,080
technology with basil the RA API and the

00:23:52,070 --> 00:23:56,870
cars but let's make build stream

00:23:54,080 --> 00:23:59,630
integrate basil itself to do that we

00:23:56,870 --> 00:24:02,389
wrote a basil build element plug-in that

00:23:59,630 --> 00:24:05,179
understands how to run basil just like C

00:24:02,389 --> 00:24:07,279
and C++ we need a bootstrap version I've

00:24:05,179 --> 00:24:10,220
lighted the other bits and bobs that

00:24:07,279 --> 00:24:12,230
this needs but ultimately we need a boot

00:24:10,220 --> 00:24:15,769
we need an imported basil in order to

00:24:12,230 --> 00:24:17,629
build in this case basil so this lets us

00:24:15,769 --> 00:24:22,190
get a rebuild of basil done in the

00:24:17,629 --> 00:24:23,659
sandbox the target label fairly obvious

00:24:22,190 --> 00:24:26,960
tells us what we want to base on build

00:24:23,659 --> 00:24:29,690
and build stream lets us override

00:24:26,960 --> 00:24:31,820
command sets in elements and so this

00:24:29,690 --> 00:24:34,490
just says hey to install basil we just

00:24:31,820 --> 00:24:35,899
want to grab the basil binary that's

00:24:34,490 --> 00:24:37,850
come out of the build and we want to

00:24:35,899 --> 00:24:39,379
grab the the wrapper script and put it

00:24:37,850 --> 00:24:43,039
all together in the target binary

00:24:39,379 --> 00:24:44,960
directory for any basil built project

00:24:43,039 --> 00:24:47,419
including basil itself you obviously

00:24:44,960 --> 00:24:49,009
need a number of sources first of all

00:24:47,419 --> 00:24:53,419
the source of the thing to build this is

00:24:49,009 --> 00:24:55,159
1.1 sorry we will get to 1.2 and a patch

00:24:53,419 --> 00:24:58,250
that fixes a name clash in you nice

00:24:55,159 --> 00:25:00,200
today CH the patch comes from the

00:24:58,250 --> 00:25:01,340
project tree so that directory that I

00:25:00,200 --> 00:25:03,289
showed you before how to patch this

00:25:01,340 --> 00:25:07,190
directory and that has that patch file

00:25:03,289 --> 00:25:10,190
in this just adds a local file from the

00:25:07,190 --> 00:25:13,059
project tree into the element sources in

00:25:10,190 --> 00:25:17,360
this instance this is a C query output

00:25:13,059 --> 00:25:19,309
it's avoidable if you must the hosts so

00:25:17,360 --> 00:25:21,830
the basil build plug-in can use the host

00:25:19,309 --> 00:25:24,019
basil to work out what your dependencies

00:25:21,830 --> 00:25:28,340
are but that's painful and leaks host

00:25:24,019 --> 00:25:30,409
information so we generally recommend

00:25:28,340 --> 00:25:32,389
that you use this if you do this then

00:25:30,409 --> 00:25:34,940
effectively your C query output is being

00:25:32,389 --> 00:25:36,500
tracked like a cargo lock or a gem file

00:25:34,940 --> 00:25:38,960
that lock if any of you a rust or ruby

00:25:36,500 --> 00:25:42,320
people this improves the completeness of

00:25:38,960 --> 00:25:44,269
the sandbox the reproducibility we then

00:25:42,320 --> 00:25:46,519
wrote a new source kind which consumes

00:25:44,269 --> 00:25:48,529
that C query output finds and fetches

00:25:46,519 --> 00:25:50,990
all of the sources stages them into a

00:25:48,529 --> 00:25:53,120
directory so that basil - - sister will

00:25:50,990 --> 00:25:54,590
do the right thing and this is really

00:25:53,120 --> 00:25:56,510
important because like I said the

00:25:54,590 --> 00:25:58,530
sandbox is quite stringent basil won't

00:25:56,510 --> 00:26:02,390
have network access from inside that

00:25:58,530 --> 00:26:05,970
and dogs by default let's look at that

00:26:02,390 --> 00:26:08,670
and hopefully it will work again hmm

00:26:05,970 --> 00:26:14,940
tell you what let's get another terminal

00:26:08,670 --> 00:26:19,860
I should have thought of this and made a

00:26:14,940 --> 00:26:22,310
second one can anyone see that menu it's

00:26:19,860 --> 00:26:22,310
so tiny

00:26:23,600 --> 00:26:37,460
gray right so the basal element we saw I

00:26:38,060 --> 00:26:43,230
said idle I did quite a few dependencies

00:26:40,910 --> 00:26:45,120
basil needs quite a few things in order

00:26:43,230 --> 00:26:49,230
to work usefully including a JDK

00:26:45,120 --> 00:26:57,750
obviously and there's its installation

00:26:49,230 --> 00:26:59,790
commands and its sources there's your

00:26:57,750 --> 00:27:02,580
star like manifest this is loaded by

00:26:59,790 --> 00:27:06,000
that source plugin and does all of the

00:27:02,580 --> 00:27:09,710
right things and this is just it's just

00:27:06,000 --> 00:27:09,710
data as far as build streams concerned

00:27:10,130 --> 00:27:19,020
so let's pop back again these are two

00:27:16,800 --> 00:27:20,670
tools they work in a similar problem

00:27:19,020 --> 00:27:23,100
space but they have a different

00:27:20,670 --> 00:27:24,810
fundamental approach they're both

00:27:23,100 --> 00:27:27,150
designed to work with other tooling but

00:27:24,810 --> 00:27:29,070
they've been done somewhat in isolation

00:27:27,150 --> 00:27:31,380
from one another and so we see lots of

00:27:29,070 --> 00:27:34,890
opportunities to use one of them to

00:27:31,380 --> 00:27:39,090
overcome problems with the other basil

00:27:34,890 --> 00:27:41,400
likes to use the network quite a lot it

00:27:39,090 --> 00:27:42,510
seems to to expect network access for

00:27:41,400 --> 00:27:44,700
quite a lot of the operations that it

00:27:42,510 --> 00:27:45,750
will be performing on the host which of

00:27:44,700 --> 00:27:47,580
course leads to difficulties in

00:27:45,750 --> 00:27:50,040
controlling the environment that basil

00:27:47,580 --> 00:27:51,750
runs in one of build stream strengths is

00:27:50,040 --> 00:27:53,670
in highlighting whenever you're

00:27:51,750 --> 00:27:56,610
accidentally doing this because of the

00:27:53,670 --> 00:27:59,160
strict sandboxing and so by using build

00:27:56,610 --> 00:28:01,170
stream to run basil we benefit from both

00:27:59,160 --> 00:28:03,390
build streams strunk guarantees on its

00:28:01,170 --> 00:28:06,080
inputs and basil strengths in actually

00:28:03,390 --> 00:28:09,390
handling the software build that happens

00:28:06,080 --> 00:28:11,400
there can be quite a high computational

00:28:09,390 --> 00:28:12,779
complexity of determining the sources

00:28:11,400 --> 00:28:15,720
associate

00:28:12,779 --> 00:28:17,070
without risking untracked changes so

00:28:15,720 --> 00:28:19,499
when preparing the plugins for build

00:28:17,070 --> 00:28:22,039
string we needed to determine all the

00:28:19,499 --> 00:28:23,909
inputs they're required for basil build

00:28:22,039 --> 00:28:25,409
so there's work space

00:28:23,909 --> 00:28:26,669
there's basil RC there's extra

00:28:25,409 --> 00:28:28,919
command-line arguments it gets to be

00:28:26,669 --> 00:28:31,619
quite a pain and really it shouldn't be

00:28:28,919 --> 00:28:34,080
the system integrators problem job to do

00:28:31,619 --> 00:28:38,399
this which is why we came up with that

00:28:34,080 --> 00:28:40,529
use of the secret output with the C

00:28:38,399 --> 00:28:44,279
query output combining with build stream

00:28:40,529 --> 00:28:46,830
we can isolate developers and we can use

00:28:44,279 --> 00:28:49,109
build stream to safely track all of the

00:28:46,830 --> 00:28:51,239
inputs regardless of whether or not it's

00:28:49,109 --> 00:28:54,629
just a version number or it's a char sum

00:28:51,239 --> 00:28:56,220
in the workspace and we can therefore

00:28:54,629 --> 00:29:00,149
ensure that we will replicate the same

00:28:56,220 --> 00:29:01,769
build over and over again that was

00:29:00,149 --> 00:29:08,039
obviously one way that we can integrate

00:29:01,769 --> 00:29:09,619
but we can also use basil to use build

00:29:08,039 --> 00:29:12,269
stream why not

00:29:09,619 --> 00:29:13,889
rulz build stream is the obvious words

00:29:12,269 --> 00:29:16,169
that you were probably looking for it's

00:29:13,889 --> 00:29:18,090
an evolving integration effort where

00:29:16,169 --> 00:29:20,039
build stream is used to make a tool

00:29:18,090 --> 00:29:22,039
chain and then that tool chain can be

00:29:20,039 --> 00:29:24,239
used to build software with basil

00:29:22,039 --> 00:29:26,789
basically is driving all of this making

00:29:24,239 --> 00:29:30,749
it easy for them you're at your basement

00:29:26,789 --> 00:29:32,190
developer and we are improving this over

00:29:30,749 --> 00:29:34,169
time I think what I'm about to show you

00:29:32,190 --> 00:29:37,259
is not at all what we would like it to

00:29:34,169 --> 00:29:38,749
be finally we are working towards

00:29:37,259 --> 00:29:41,970
offering this up to the basil build

00:29:38,749 --> 00:29:43,919
project on github we've had some talk

00:29:41,970 --> 00:29:46,590
about this and again this consumes free

00:29:43,919 --> 00:29:50,039
desktop SDK if any of you are familiar

00:29:46,590 --> 00:29:51,929
with rules Nick sauce then you might

00:29:50,039 --> 00:29:54,590
recognize this kind of approach to

00:29:51,929 --> 00:29:57,419
things so let's take a little look

00:29:54,590 --> 00:29:59,419
here's an example workspace file it's

00:29:57,419 --> 00:30:03,570
obviously not the entire thing but

00:29:59,419 --> 00:30:06,690
representative we need to load in the

00:30:03,570 --> 00:30:09,809
build stream repository rules set up a

00:30:06,690 --> 00:30:11,909
repository reference now that is to a

00:30:09,809 --> 00:30:14,220
build stream project so that's literally

00:30:11,909 --> 00:30:15,720
just like the the project that we've

00:30:14,220 --> 00:30:17,759
just explored there's a bunch of

00:30:15,720 --> 00:30:19,289
elements in there at least one of those

00:30:17,759 --> 00:30:20,210
elements is going to be the tool train

00:30:19,289 --> 00:30:22,919
that we care about

00:30:20,210 --> 00:30:25,000
freida stuff STK has all of these so

00:30:22,919 --> 00:30:27,610
we're just using that

00:30:25,000 --> 00:30:31,960
then we need a way to consume that

00:30:27,610 --> 00:30:34,620
project so BST element is rule to build

00:30:31,960 --> 00:30:37,000
a build stream element fairly obviously

00:30:34,620 --> 00:30:41,980
and then our project is going to need a

00:30:37,000 --> 00:30:43,630
build file the usual and we need to

00:30:41,980 --> 00:30:44,890
constrain the platform to something that

00:30:43,630 --> 00:30:48,280
matches the tool chain that we're going

00:30:44,890 --> 00:30:50,260
to construct out of build string we then

00:30:48,280 --> 00:30:52,030
need to configure basil to use all of

00:30:50,260 --> 00:30:55,419
this we could use the command line

00:30:52,030 --> 00:30:56,710
that's a basil RC constrained platform

00:30:55,419 --> 00:30:59,650
according to the options that we picked

00:30:56,710 --> 00:31:01,750
in the build file and then tell basil

00:30:59,650 --> 00:31:06,220
where that will turn up and how to use

00:31:01,750 --> 00:31:07,539
it in the final build of course we've

00:31:06,220 --> 00:31:11,230
got to actually put that together and

00:31:07,539 --> 00:31:14,620
run basil so we give it an FD SDK config

00:31:11,230 --> 00:31:16,480
and we need to set this because

00:31:14,620 --> 00:31:19,030
otherwise basil gets very sad when it

00:31:16,480 --> 00:31:22,630
can't find a compiler on the host even

00:31:19,030 --> 00:31:25,419
when it shouldn't but it's pretty easy

00:31:22,630 --> 00:31:27,840
to have that in your environment let's

00:31:25,419 --> 00:31:27,840
look at that

00:31:38,950 --> 00:31:45,070
so I have a building project here it's

00:31:41,230 --> 00:31:47,590
got a workspace that's using rules build

00:31:45,070 --> 00:31:51,009
stream we have a simple hello world

00:31:47,590 --> 00:31:53,669
again I won't take a name from you this

00:31:51,009 --> 00:32:04,830
time we'll just go with hello world and

00:31:53,669 --> 00:32:04,830
let's do a BST build - like I remember

00:32:05,129 --> 00:32:13,330
not BST build what am I talking about a

00:32:07,570 --> 00:32:19,509
basil build that will work better I'm

00:32:13,330 --> 00:32:21,039
embracing failure guys so I've actually

00:32:19,509 --> 00:32:24,580
got that environment variable just set

00:32:21,039 --> 00:32:27,100
on login and so it's not going to work

00:32:24,580 --> 00:32:28,929
because there's no tool chain you could

00:32:27,100 --> 00:32:29,950
have made this your default but she

00:32:28,929 --> 00:32:36,730
wanted to demonstrate that I wasn't

00:32:29,950 --> 00:32:38,379
cheating there is no tool chain there so

00:32:36,730 --> 00:32:40,690
it's ask basil to build this I've

00:32:38,379 --> 00:32:41,399
deliberately done a basil clean - -

00:32:40,690 --> 00:32:44,320
expunged

00:32:41,399 --> 00:32:46,389
this is the the beginning developer

00:32:44,320 --> 00:32:48,369
experience is it were this means that

00:32:46,389 --> 00:32:52,359
basil has to ask build string to

00:32:48,369 --> 00:32:54,580
construct the tool chain it is slowly

00:32:52,359 --> 00:32:56,409
going ahead and doing that obviously

00:32:54,580 --> 00:32:57,519
once this is completed once you've got

00:32:56,409 --> 00:33:02,109
that in your base of cache

00:32:57,519 --> 00:33:04,960
there's no worries it looks like we're

00:33:02,109 --> 00:33:11,200
almost there it's just checking out the

00:33:04,960 --> 00:33:13,749
tool chain to hand it over to basil and

00:33:11,200 --> 00:33:17,049
now basil gets to do its build and

00:33:13,749 --> 00:33:25,859
succeed and if we change that build to a

00:33:17,049 --> 00:33:25,859
run then we can obviously run it cool oh

00:33:26,879 --> 00:33:32,919
yeah thank you

00:33:28,840 --> 00:33:35,919
I hadn't forgotten we did an integration

00:33:32,919 --> 00:33:42,220
didn't we how was that going right

00:33:35,919 --> 00:33:45,509
that's completed we now have a VM image

00:33:42,220 --> 00:33:45,509
sat there to use

00:33:48,450 --> 00:33:53,920
can I pull that locally so I'm doing

00:33:52,330 --> 00:33:56,860
this in Virtual Machines to try to say

00:33:53,920 --> 00:33:58,060
integrators developers unfortunately my

00:33:56,860 --> 00:34:01,390
virtual machines can't run virtual

00:33:58,060 --> 00:34:03,280
machines I haven't got that powerful a

00:34:01,390 --> 00:34:10,990
system so I'm just gonna drag this

00:34:03,280 --> 00:34:14,680
locally it's so slow there we go

00:34:10,990 --> 00:34:20,380
give me a moment somewhere over here I

00:34:14,680 --> 00:34:24,100
have a magic command this is my manager

00:34:20,380 --> 00:34:29,860
oh goodness me it's tiny where's the

00:34:24,100 --> 00:34:31,540
play button there's the play button as I

00:34:29,860 --> 00:34:34,540
said that's this is derived from free

00:34:31,540 --> 00:34:39,130
Desktop SDK and with a bit of luck

00:34:34,540 --> 00:34:43,150
that's just gonna do its thing and give

00:34:39,130 --> 00:34:49,260
us an integrated system and again

00:34:43,150 --> 00:34:49,260
where's my mouse pointer that hey Joe

00:34:57,500 --> 00:35:03,740
so recap where are we what we'd like you

00:35:01,280 --> 00:35:07,820
to take away from this build streamin

00:35:03,740 --> 00:35:10,730
Basel occupy very similar places in the

00:35:07,820 --> 00:35:12,710
software ecosystem but while they both

00:35:10,730 --> 00:35:14,630
integrate a large number of inputs into

00:35:12,710 --> 00:35:17,260
a usually smaller number of outputs each

00:35:14,630 --> 00:35:19,970
takes a fundamentally different approach

00:35:17,260 --> 00:35:22,190
build stream components are integral

00:35:19,970 --> 00:35:24,410
black boxes the component build systems

00:35:22,190 --> 00:35:26,000
are in violet we have extremely strict

00:35:24,410 --> 00:35:27,530
sandboxing with the identity of the

00:35:26,000 --> 00:35:30,470
outputs derived from the identity of the

00:35:27,530 --> 00:35:32,090
inputs ahead of time typically doesn't

00:35:30,470 --> 00:35:33,740
require invasive changes to a component

00:35:32,090 --> 00:35:35,810
in order to adopt it into a build stream

00:35:33,740 --> 00:35:37,670
project build stream knows immediately

00:35:35,810 --> 00:35:40,460
unloading the elementary if it's already

00:35:37,670 --> 00:35:42,619
finished and even if it's missing

00:35:40,460 --> 00:35:43,760
intermediates along that way that

00:35:42,619 --> 00:35:45,470
doesn't prevent it from knowing it's

00:35:43,760 --> 00:35:49,550
finished but build stream cannot

00:35:45,470 --> 00:35:51,320
short-circuit that build basil typically

00:35:49,550 --> 00:35:52,760
is diving inside the components its

00:35:51,320 --> 00:35:55,130
reasoning about all the moving parts at

00:35:52,760 --> 00:35:56,570
once as a result you've got to kind of

00:35:55,130 --> 00:35:57,830
rewrite your build system into basil

00:35:56,570 --> 00:35:59,240
rules yes

00:35:57,830 --> 00:36:00,710
foreign CC and obviously rules build

00:35:59,240 --> 00:36:03,410
stream demonstrate this isn't always

00:36:00,710 --> 00:36:05,270
necessary but by doing this basil gets a

00:36:03,410 --> 00:36:08,930
really deep understanding of the build

00:36:05,270 --> 00:36:10,700
graph basil by naming its outputs after

00:36:08,930 --> 00:36:12,859
their content rather than after their

00:36:10,700 --> 00:36:14,690
inputs gets to short-circuit builds but

00:36:12,859 --> 00:36:16,369
it may have to reason the whole tree

00:36:14,690 --> 00:36:17,510
forward from a change in order to know

00:36:16,369 --> 00:36:19,490
that nothing has to be done

00:36:17,510 --> 00:36:22,700
missing intermediates may have to be

00:36:19,490 --> 00:36:25,430
computed but as we've shown by working

00:36:22,700 --> 00:36:28,849
together we can get some quite powerful

00:36:25,430 --> 00:36:30,020
outcomes and while we are working on

00:36:28,849 --> 00:36:32,270
bringing these things together it is

00:36:30,020 --> 00:36:34,550
still a work in progress we are

00:36:32,270 --> 00:36:36,770
continuing to work on it we would love

00:36:34,550 --> 00:36:39,080
to see some of you join us in working on

00:36:36,770 --> 00:36:41,720
it and to make this integration work

00:36:39,080 --> 00:36:44,599
better for you I hope that you'll all

00:36:41,720 --> 00:36:45,980
agree that by solving the problems of

00:36:44,599 --> 00:36:47,420
components integration in subtly

00:36:45,980 --> 00:36:48,589
different ways and at two different

00:36:47,420 --> 00:36:50,480
levels based on and build string

00:36:48,589 --> 00:36:53,180
complement each other really quite well

00:36:50,480 --> 00:36:54,830
by using the two together you don't have

00:36:53,180 --> 00:36:57,109
to immediately adopt every dependency

00:36:54,830 --> 00:36:58,940
fully into basil which will reduce your

00:36:57,109 --> 00:37:01,490
maintenance burden if upstream don't

00:36:58,940 --> 00:37:03,950
want you to shift but retains the option

00:37:01,490 --> 00:37:07,849
of integrating really tightly when you

00:37:03,950 --> 00:37:10,849
need to both use the re API and cares

00:37:07,849 --> 00:37:11,310
for caching Basil's re API action cache

00:37:10,849 --> 00:37:12,870
and build

00:37:11,310 --> 00:37:15,090
artifact service are somewhat different

00:37:12,870 --> 00:37:16,920
because of those naming constraints but

00:37:15,090 --> 00:37:20,070
all the individual components of the

00:37:16,920 --> 00:37:21,750
builds are being shared work on build

00:37:20,070 --> 00:37:24,450
box which is the sandboxing technology

00:37:21,750 --> 00:37:26,220
that built stream it's using is going to

00:37:24,450 --> 00:37:28,500
lead to basal being able to access its

00:37:26,220 --> 00:37:30,020
re API from within that sandbox in a

00:37:28,500 --> 00:37:32,700
constrained and controlled manner and

00:37:30,020 --> 00:37:34,620
that sharing therefore will become even

00:37:32,700 --> 00:37:36,780
more powerful by sharing the work

00:37:34,620 --> 00:37:38,640
outcomes we have reduced cycle times

00:37:36,780 --> 00:37:40,740
both the integrators and application

00:37:38,640 --> 00:37:43,530
developers and we have both teams

00:37:40,740 --> 00:37:45,330
benefiting I say both teams integrators

00:37:43,530 --> 00:37:49,050
and application developers benefiting

00:37:45,330 --> 00:37:50,400
from CI pipeline outputs one thing that

00:37:49,050 --> 00:37:53,610
perhaps wasn't completely obvious there

00:37:50,400 --> 00:37:55,530
the tool chain that basil built and used

00:37:53,610 --> 00:37:58,350
was exactly the tool chain that was

00:37:55,530 --> 00:38:00,240
built to build basil in the other

00:37:58,350 --> 00:38:03,330
virtual machine they are shared they're

00:38:00,240 --> 00:38:05,880
the same elements and so you absolutely

00:38:03,330 --> 00:38:09,620
know that your developers using the same

00:38:05,880 --> 00:38:09,620
tool chain as your integrators using

00:38:09,800 --> 00:38:15,270
this leads to fewer that work for me

00:38:12,930 --> 00:38:16,620
situations application developers can be

00:38:15,270 --> 00:38:18,560
confident that their validations are

00:38:16,620 --> 00:38:20,460
going to hold during integration

00:38:18,560 --> 00:38:21,960
integrators can be confident that their

00:38:20,460 --> 00:38:23,400
applications that they're receiving from

00:38:21,960 --> 00:38:24,960
their Apps teams are going to behave

00:38:23,400 --> 00:38:27,300
properly when they're in city when they

00:38:24,960 --> 00:38:28,200
are integrated into a build deployment

00:38:27,300 --> 00:38:30,480
teams can be assured that that

00:38:28,200 --> 00:38:35,790
integration is extremely likely to

00:38:30,480 --> 00:38:37,590
succeed thank you very much and I

00:38:35,790 --> 00:38:40,620
encourage you all to have a look at that

00:38:37,590 --> 00:38:42,000
wiki page it's got links to all of the

00:38:40,620 --> 00:38:44,360
other things that I've referenced during

00:38:42,000 --> 00:38:44,360
the talk

00:38:47,370 --> 00:38:52,500
thank you very much Daniel I appreciate

00:38:49,980 --> 00:38:55,770
it of course you know the time it's time

00:38:52,500 --> 00:38:59,730
for questions super interesting talk you

00:38:55,770 --> 00:39:01,140
are the only brave one yeah did demo try

00:38:59,730 --> 00:39:04,830
try try to get some failure but it will

00:39:01,140 --> 00:39:05,820
work sorry you know sometimes it works

00:39:04,830 --> 00:39:08,160
out

00:39:05,820 --> 00:39:11,820
I even deleted my VM this morning to try

00:39:08,160 --> 00:39:12,510
and try and cause problems okay Mel -

00:39:11,820 --> 00:39:16,350
hello

00:39:12,510 --> 00:39:18,660
so I'm Finn I'm a freelance build and

00:39:16,350 --> 00:39:19,890
software engineer at the moment and so

00:39:18,660 --> 00:39:22,620
I'd really like to use build stream I

00:39:19,890 --> 00:39:24,690
think it's a great tool one question I

00:39:22,620 --> 00:39:27,030
had about tool chains can i construct

00:39:24,690 --> 00:39:29,220
any sister with build stream and will

00:39:27,030 --> 00:39:32,460
basil just be able to consume that tool

00:39:29,220 --> 00:39:35,610
chain right it's not quite that simple

00:39:32,460 --> 00:39:38,370
at the moment right because of the way

00:39:35,610 --> 00:39:40,980
particularly that GCC is not directly

00:39:38,370 --> 00:39:43,980
relocatable this can be a problem we are

00:39:40,980 --> 00:39:45,780
working on some extra rules that

00:39:43,980 --> 00:39:48,510
construct wrappers so that that all

00:39:45,780 --> 00:39:50,280
works as it stands at the moment if you

00:39:48,510 --> 00:39:55,560
follow the instructions that we have on

00:39:50,280 --> 00:39:57,300
on that reference wiki page then as long

00:39:55,560 --> 00:39:59,900
as everything's relatively next to one

00:39:57,300 --> 00:40:02,700
another in the right ways it'll not work

00:39:59,900 --> 00:40:06,180
at the moment I can't say better than

00:40:02,700 --> 00:40:08,790
that okay thank you I think it's really

00:40:06,180 --> 00:40:10,590
great work another question I had you

00:40:08,790 --> 00:40:12,600
said about the build stream using the

00:40:10,590 --> 00:40:14,460
remote execution API does that mean it's

00:40:12,600 --> 00:40:16,110
compatible with all of the remote

00:40:14,460 --> 00:40:19,830
execution service or is only compatible

00:40:16,110 --> 00:40:21,780
with the subsection this is an ongoing

00:40:19,830 --> 00:40:24,630
bone of contention with the re API

00:40:21,780 --> 00:40:26,580
community build stream because of the

00:40:24,630 --> 00:40:30,950
way that it does sandbox Inc is giving a

00:40:26,580 --> 00:40:34,560
whole system to the re API server to run

00:40:30,950 --> 00:40:37,080
many of them don't like that in addition

00:40:34,560 --> 00:40:38,910
the file system that built stream is

00:40:37,080 --> 00:40:42,300
offered up has to be made to be the root

00:40:38,910 --> 00:40:44,310
of the build that can cause problems

00:40:42,300 --> 00:40:48,390
with some of them I think at the moment

00:40:44,310 --> 00:40:51,960
build grid works fine for it we had an

00:40:48,390 --> 00:40:55,730
experiment with RBA I don't know whether

00:40:51,960 --> 00:40:58,550
that's got any further and I know that

00:40:55,730 --> 00:41:01,080
we have a project at code think

00:40:58,550 --> 00:41:02,820
validating remote execution

00:41:01,080 --> 00:41:05,160
implementations and remote execution

00:41:02,820 --> 00:41:06,450
clients and their interoperability if

00:41:05,160 --> 00:41:08,520
any of you were yesterday in the

00:41:06,450 --> 00:41:11,810
lightning talks then you might have seen

00:41:08,520 --> 00:41:14,400
the talk by my colleague Josh about that

00:41:11,810 --> 00:41:16,140
that would be the place I would start to

00:41:14,400 --> 00:41:18,200
work out what the interoperability is

00:41:16,140 --> 00:41:21,300
like hopefully it will improve with time

00:41:18,200 --> 00:41:26,160
we will see ok thank you very much thank

00:41:21,300 --> 00:41:28,470
you have I gotten away with only one

00:41:26,160 --> 00:41:31,320
questioner I think it has something to

00:41:28,470 --> 00:41:32,430
do and rumbling bellies so I just want

00:41:31,320 --> 00:41:35,420
to give you another round of applause

00:41:32,430 --> 00:41:35,420
thank you Dad kick

00:41:36,920 --> 00:41:39,010

YouTube URL: https://www.youtube.com/watch?v=21VPe7HcuPE


