Title: BazelCon 2019 Day 1: Lightning Talk – Bazel & Kubernetes: Develop like it's production
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Steeve Morin, Zenly event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Steeve Morin;
Captions: 
	00:00:03,589 --> 00:00:07,049
all right our next speaker is Steve from

00:00:06,629 --> 00:00:09,330
zenlea

00:00:07,049 --> 00:00:15,089
mrs. M like title title developed like

00:00:09,330 --> 00:00:18,600
this production thank you hi everyone so

00:00:15,089 --> 00:00:20,490
yeah I'm gonna be speaking about using

00:00:18,600 --> 00:00:23,779
basil and kubernetes to develop on your

00:00:20,490 --> 00:00:26,369
local machine like its production so a

00:00:23,779 --> 00:00:28,949
little bit about Emily first we are

00:00:26,369 --> 00:00:30,539
essentially a geolocation app and we

00:00:28,949 --> 00:00:32,850
figure out what your friends are up and

00:00:30,539 --> 00:00:34,320
we actually allow you to figure out what

00:00:32,850 --> 00:00:36,059
your friends are up to in real time

00:00:34,320 --> 00:00:38,180
we don't drain the battery we're battery

00:00:36,059 --> 00:00:41,550
friendly we're privacy friendly as well

00:00:38,180 --> 00:00:47,160
very privacy conscious too so I invite

00:00:41,550 --> 00:00:49,530
you to check it out so as you may have

00:00:47,160 --> 00:00:52,770
guessed we have a lot of backends that

00:00:49,530 --> 00:00:56,670
generally and so our whole production is

00:00:52,770 --> 00:00:58,800
running on kubernetes the problem is you

00:00:56,670 --> 00:01:00,870
know you get this dependency graph of

00:00:58,800 --> 00:01:02,129
services where you know the API depends

00:01:00,870 --> 00:01:04,140
on this service which depend on the

00:01:02,129 --> 00:01:07,560
database which also depends on this

00:01:04,140 --> 00:01:08,490
other service and you get into this sort

00:01:07,560 --> 00:01:11,549
of weird you know

00:01:08,490 --> 00:01:13,110
fuzzy situation where you don't really

00:01:11,549 --> 00:01:17,759
know and you just apply everything in

00:01:13,110 --> 00:01:20,540
the hopes that it will work thankfully

00:01:17,759 --> 00:01:24,290
there's this thing called rules kk8 s

00:01:20,540 --> 00:01:27,150
which is really defining a kubernetes

00:01:24,290 --> 00:01:29,250
dependency graph in basil so you just

00:01:27,150 --> 00:01:31,320
say alright this is my yeah so

00:01:29,250 --> 00:01:33,869
kubernetes is you know configured with

00:01:31,320 --> 00:01:37,049
llamó files and it basically allows you

00:01:33,869 --> 00:01:39,900
to link a yellow file to a target and

00:01:37,049 --> 00:01:43,170
then aggregate targets into multiple you

00:01:39,900 --> 00:01:48,140
know bundles so as you can see in this

00:01:43,170 --> 00:01:51,210
example I have this API that k8k 8's

00:01:48,140 --> 00:01:53,369
target and then that's linking to my

00:01:51,210 --> 00:01:56,369
deployment and then I can do a bundle of

00:01:53,369 --> 00:01:57,630
other targets which you know define you

00:01:56,369 --> 00:02:00,079
know my dependencies so if I want to

00:01:57,630 --> 00:02:02,430
apply the API I need to apply the

00:02:00,079 --> 00:02:04,430
deployment I need to apply the database

00:02:02,430 --> 00:02:07,500
the queue and the service 1 in that case

00:02:04,430 --> 00:02:10,890
so the cool thing is it allows us to

00:02:07,500 --> 00:02:13,430
have one dependency graph for the whole

00:02:10,890 --> 00:02:16,200
you know production system

00:02:13,430 --> 00:02:18,209
this other thing is but then you need a

00:02:16,200 --> 00:02:20,550
kubernetes cluster and kubernetes is not

00:02:18,209 --> 00:02:22,830
known to be very lightweight so

00:02:20,550 --> 00:02:25,860
thankfully there's this thing called k3s

00:02:22,830 --> 00:02:27,630
so there's a lot of K something else in

00:02:25,860 --> 00:02:29,370
the ecosystem basically it's a

00:02:27,630 --> 00:02:31,400
lightweight kubernetes cluster you can

00:02:29,370 --> 00:02:34,700
run like single node on your machine and

00:02:31,400 --> 00:02:37,380
what we do is just we just run basil run

00:02:34,700 --> 00:02:39,209
k3s and it will spawn like in docker

00:02:37,380 --> 00:02:42,000
because thankfully it runs in the car

00:02:39,209 --> 00:02:43,680
which is great it will run a kubernetes

00:02:42,000 --> 00:02:48,900
cluster a single node kubernetes cluster

00:02:43,680 --> 00:02:51,030
on the machine in a docker container we

00:02:48,900 --> 00:02:54,180
get a UI with this other tool called

00:02:51,030 --> 00:02:56,519
k-9s which is also run like this and

00:02:54,180 --> 00:03:00,600
it's this is the one you see on the

00:02:56,519 --> 00:03:03,000
screen and it's downloaded by basil the

00:03:00,600 --> 00:03:05,580
greatest thing is with rocket tests you

00:03:03,000 --> 00:03:07,739
k8s you can link binaries to docker

00:03:05,580 --> 00:03:11,459
images to deployments so you have this

00:03:07,739 --> 00:03:14,280
one pipeline of from source code to

00:03:11,459 --> 00:03:17,820
deployment so and everything is linked

00:03:14,280 --> 00:03:20,310
everything is correct basil and you can

00:03:17,820 --> 00:03:22,260
do also you know initialization like say

00:03:20,310 --> 00:03:24,269
you your spawn database and you want to

00:03:22,260 --> 00:03:27,060
you know apply the schema you can do

00:03:24,269 --> 00:03:29,280
that in a really lightweight bootstrap

00:03:27,060 --> 00:03:31,739
you know binary which happens to have

00:03:29,280 --> 00:03:35,100
all your dependencies like as all your

00:03:31,739 --> 00:03:37,019
services so in one line of code one line

00:03:35,100 --> 00:03:39,290
one command line you can build and

00:03:37,019 --> 00:03:43,519
deploy this whole dependency graph of

00:03:39,290 --> 00:03:46,950
services directly on your machine

00:03:43,519 --> 00:03:49,049
testing testing is supported as well so

00:03:46,950 --> 00:03:50,370
it's not part of rules k8s we did our

00:03:49,049 --> 00:03:53,310
own thing but it's basically a test

00:03:50,370 --> 00:03:55,680
runner it takes and any binary wraps it

00:03:53,310 --> 00:03:59,519
in darker image and runs it as a

00:03:55,680 --> 00:04:01,410
kubernetes job so basically what you can

00:03:59,519 --> 00:04:04,140
have is you can have a test that depends

00:04:01,410 --> 00:04:06,269
on a database a queue another service

00:04:04,140 --> 00:04:10,769
which gets built and so on and so forth

00:04:06,269 --> 00:04:12,450
so not all not all of I mean not

00:04:10,769 --> 00:04:14,609
everything works success failures of

00:04:12,450 --> 00:04:17,489
obviously logs you get to basically run

00:04:14,609 --> 00:04:19,799
basil test you get the log test

00:04:17,489 --> 00:04:21,330
arguments and flakiness are not working

00:04:19,799 --> 00:04:23,460
because they are runtime part of the

00:04:21,330 --> 00:04:27,060
test but they we're working on that

00:04:23,460 --> 00:04:30,510
it basically comes down to modifying the

00:04:27,060 --> 00:04:34,200
at runtime and finally this thing with

00:04:30,510 --> 00:04:35,550
k8s rule k8s it that the cluster doesn't

00:04:34,200 --> 00:04:37,770
have to be on your machine it can be

00:04:35,550 --> 00:04:39,630
anywhere so with the same workflow you

00:04:37,770 --> 00:04:42,240
can deploy either like locally in the

00:04:39,630 --> 00:04:44,430
darker container clustered container or

00:04:42,240 --> 00:04:46,620
you can deploy on some other container

00:04:44,430 --> 00:04:51,270
that's running on you know google cloud

00:04:46,620 --> 00:04:53,610
or any anywhere and with VPN and i mean

00:04:51,270 --> 00:04:55,290
what we do is we spawn a VPN in the

00:04:53,610 --> 00:04:57,570
cluster which means we can't have access

00:04:55,290 --> 00:04:59,400
to all just like the pods running in the

00:04:57,570 --> 00:05:01,110
cluster as if they were running on my

00:04:59,400 --> 00:05:03,690
machine I mean regardless they're

00:05:01,110 --> 00:05:05,310
running locally or remotely we have this

00:05:03,690 --> 00:05:07,260
other you know the other thing with KR

00:05:05,310 --> 00:05:08,970
code that we just print on a terminal

00:05:07,260 --> 00:05:11,610
and because we do a mobile app and

00:05:08,970 --> 00:05:12,840
developers can just flash it and then

00:05:11,610 --> 00:05:13,950
you know they connect to the VPN and

00:05:12,840 --> 00:05:18,000
they're connected to their local

00:05:13,950 --> 00:05:21,600
development environment thank you for

00:05:18,000 --> 00:05:23,830
seconds late thank you very much and if

00:05:21,600 --> 00:05:29,030
you have any questions i'm on twitter

00:05:23,830 --> 00:05:37,140
[Applause]

00:05:29,030 --> 00:05:39,690
yep not well rose k8s oh no not yeah but

00:05:37,140 --> 00:05:43,140
it's it's basically the only custom

00:05:39,690 --> 00:05:46,080
thing is the k3s runner oh sorry the

00:05:43,140 --> 00:05:48,630
question was if it was open source the

00:05:46,080 --> 00:05:52,380
k3s runner and so we might do a roast

00:05:48,630 --> 00:05:55,350
k3s with the test runner and like this

00:05:52,380 --> 00:06:07,380
whole sugar thing but I can show you

00:05:55,350 --> 00:06:10,380
it's not really complex as opposed to

00:06:07,380 --> 00:06:12,380
other so the question is why why k3s so

00:06:10,380 --> 00:06:15,390
there are a few kubernetes distributions

00:06:12,380 --> 00:06:18,570
mini cube darker for mac has one

00:06:15,390 --> 00:06:20,070
built-in k3s as well the the they all

00:06:18,570 --> 00:06:21,960
boil down to the fact that it was

00:06:20,070 --> 00:06:24,780
running on in docker so we could just do

00:06:21,960 --> 00:06:28,500
docker run k3s and also there's this

00:06:24,780 --> 00:06:30,540
tiny very painful thing of hypercube

00:06:28,500 --> 00:06:32,850
which is the coordinator in kubernetes

00:06:30,540 --> 00:06:35,190
that's consuming half a core every time

00:06:32,850 --> 00:06:37,260
like all the time and so it's really

00:06:35,190 --> 00:06:39,300
painful for like laptops because the

00:06:37,260 --> 00:06:40,740
battery is that is dying it turns out in

00:06:39,300 --> 00:06:43,139
k3 yes it's consuming like

00:06:40,740 --> 00:06:45,419
fifteen 20 percent whereas in mini cube

00:06:43,139 --> 00:06:50,479
it's like 50 percent I don't really know

00:06:45,419 --> 00:06:54,990
why but you know but mainly daugher I

00:06:50,479 --> 00:06:57,080
suppose sorry I supposed to a VM thank

00:06:54,990 --> 00:06:57,080
you

00:07:01,160 --> 00:07:04,910
right

00:07:02,370 --> 00:07:08,099
thanks to Philip Bronwyn our and Steve

00:07:04,910 --> 00:07:10,110
and we'll reconvene again at 3:15 in

00:07:08,099 --> 00:07:12,800
this room we have four more talks

00:07:10,110 --> 00:07:12,800

YouTube URL: https://www.youtube.com/watch?v=SkADnC4yFCk


