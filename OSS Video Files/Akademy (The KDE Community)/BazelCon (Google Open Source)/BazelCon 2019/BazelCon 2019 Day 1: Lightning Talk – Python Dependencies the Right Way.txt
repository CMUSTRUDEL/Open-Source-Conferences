Title: BazelCon 2019 Day 1: Lightning Talk â€“ Python Dependencies the Right Way
Publication date: 2020-01-15
Playlist: BazelCon 2019
Description: 
	Ron Rothman, Beeswax event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Ron Rothman;
Captions: 
	00:00:03,259 --> 00:00:08,880
hi everyone thanks for coming my name is

00:00:06,690 --> 00:00:12,900
Ron Rothman I work at beeswax where we

00:00:08,880 --> 00:00:14,610
build great advertising software we're

00:00:12,900 --> 00:00:16,859
about 30 engineers working in a mono

00:00:14,610 --> 00:00:18,449
repo to date we've built about a hundred

00:00:16,859 --> 00:00:20,939
applications comprising three hundred

00:00:18,449 --> 00:00:22,890
thousand lines of Python code and the

00:00:20,939 --> 00:00:25,949
problem we faced was how to manage our

00:00:22,890 --> 00:00:27,359
third-party Python dependencies by third

00:00:25,949 --> 00:00:29,220
party I mean something you'd install

00:00:27,359 --> 00:00:34,520
from pypy I using pip things like

00:00:29,220 --> 00:00:34,520
requests boto three airflow numpy etc

00:00:34,790 --> 00:00:40,710
when we basel test or basel runs some

00:00:37,649 --> 00:00:41,760
target that targets third-party

00:00:40,710 --> 00:00:44,610
dependencies have to already be

00:00:41,760 --> 00:00:46,980
installed not only that but the

00:00:44,610 --> 00:00:48,690
dependencies of every other target in

00:00:46,980 --> 00:00:51,539
its transitive closure also have to be

00:00:48,690 --> 00:00:53,430
installed and those same dependencies

00:00:51,539 --> 00:00:57,059
have to be installed in production when

00:00:53,430 --> 00:00:58,469
the application is deployed now when we

00:00:57,059 --> 00:00:59,850
had just one or two applications we

00:00:58,469 --> 00:01:01,260
solved this pretty naively by putting

00:00:59,850 --> 00:01:02,789
all of those applications of dependency

00:01:01,260 --> 00:01:04,010
into a single requirement text file just

00:01:02,789 --> 00:01:06,840
deploying that everywhere

00:01:04,010 --> 00:01:08,310
as you might guess this didn't scale

00:01:06,840 --> 00:01:10,619
very well once we had a critical mass of

00:01:08,310 --> 00:01:12,689
applications written by multiple

00:01:10,619 --> 00:01:15,180
engineers we quickly ran into version

00:01:12,689 --> 00:01:17,580
conflicts and other problems and so we

00:01:15,180 --> 00:01:20,729
looked at rules Python excuse me so we

00:01:17,580 --> 00:01:22,320
looked at rules Python and we discovered

00:01:20,729 --> 00:01:25,200
that rules Python can't guarantee that

00:01:22,320 --> 00:01:26,549
you'll import the correct version of a

00:01:25,200 --> 00:01:29,880
dependency and that was unacceptable to

00:01:26,549 --> 00:01:31,740
us so we took a look at Pippin which is

00:01:29,880 --> 00:01:34,280
the Python community standard for

00:01:31,740 --> 00:01:37,290
managing dependencies and virtual ends

00:01:34,280 --> 00:01:38,850
but the problem with Pippin was that it

00:01:37,290 --> 00:01:39,810
doesn't work well in a mono repo unless

00:01:38,850 --> 00:01:41,280
you're willing to make some major

00:01:39,810 --> 00:01:43,380
concessions which we weren't willing to

00:01:41,280 --> 00:01:47,130
make and so that led us to roll our own

00:01:43,380 --> 00:01:49,290
solution our solution which we call bu

00:01:47,130 --> 00:01:51,869
is a set of tools built around basil and

00:01:49,290 --> 00:01:54,119
pip tools pip tools is an open source

00:01:51,869 --> 00:01:58,049
project that's used by pip and it does

00:01:54,119 --> 00:01:59,930
pip M's heavy lifting and B vis what we

00:01:58,049 --> 00:02:03,060
used to manage our Python dependencies

00:01:59,930 --> 00:02:05,460
Beave is composed of Starlog macros

00:02:03,060 --> 00:02:09,179
rules aspects and some command-line

00:02:05,460 --> 00:02:10,890
tools that we wrote and its output is a

00:02:09,179 --> 00:02:12,420
lock file one lock file for every

00:02:10,890 --> 00:02:13,680
application when I say application

00:02:12,420 --> 00:02:15,390
that's interchangeable with a PI bi

00:02:13,680 --> 00:02:18,000
let's say Justin termed in Basildon

00:02:15,390 --> 00:02:20,090
Basel terms think about it that way so

00:02:18,000 --> 00:02:22,230
there's one lock file per application a

00:02:20,090 --> 00:02:23,700
lock files a set of third-party

00:02:22,230 --> 00:02:25,200
dependencies each one pinned to a

00:02:23,700 --> 00:02:27,450
specific version you can think of it as

00:02:25,200 --> 00:02:30,060
an applications requirements dog text

00:02:27,450 --> 00:02:33,239
but one that's auto-generated by Basil

00:02:30,060 --> 00:02:34,799
as needed him so here we leveraged

00:02:33,239 --> 00:02:36,090
Basil's ability to walk the dependency

00:02:34,799 --> 00:02:38,700
graph and collect all the third-party

00:02:36,090 --> 00:02:41,430
dependencies for every target in that

00:02:38,700 --> 00:02:43,769
graph and we leveraged pip tools ability

00:02:41,430 --> 00:02:49,049
to take those dependencies resolve them

00:02:43,769 --> 00:02:50,400
and generate a lock file so then we take

00:02:49,049 --> 00:02:52,049
each applications lock file and we use

00:02:50,400 --> 00:02:53,579
it to generate a virtual end which is

00:02:52,049 --> 00:02:56,010
where we do our development and unit

00:02:53,579 --> 00:02:57,540
testing and we take that same lock file

00:02:56,010 --> 00:03:00,720
and we generate a wheel which we used to

00:02:57,540 --> 00:03:03,000
deploy the application so here's an

00:03:00,720 --> 00:03:05,280
example this is a toy build file with

00:03:03,000 --> 00:03:07,920
some application it's got three targets

00:03:05,280 --> 00:03:09,269
a note that we've annotated each Python

00:03:07,920 --> 00:03:11,909
rule with a new attribute called

00:03:09,269 --> 00:03:14,159
requires which takes a list of pip

00:03:11,909 --> 00:03:15,840
dependency specifications so here a

00:03:14,159 --> 00:03:17,129
dependency specification is just a

00:03:15,840 --> 00:03:21,030
constraint on which versions of a

00:03:17,129 --> 00:03:23,220
package are allowed to be installed also

00:03:21,030 --> 00:03:25,109
note that we have a PI VN rule this rule

00:03:23,220 --> 00:03:29,060
tells Beave that we want to generate a

00:03:25,109 --> 00:03:29,060
lock file for the Associated PI binary

00:03:29,599 --> 00:03:36,120
when we basil run this the PI VN rule

00:03:33,769 --> 00:03:38,370
the startle our code behind that rule

00:03:36,120 --> 00:03:41,250
generates a requirement in file which as

00:03:38,370 --> 00:03:43,590
you can see is just the union of the

00:03:41,250 --> 00:03:49,349
requires attributes over the transitive

00:03:43,590 --> 00:03:51,599
closure of the PI VN rule beef then

00:03:49,349 --> 00:03:53,010
calls pip compile to take that

00:03:51,599 --> 00:03:56,909
requirement set and file and generate

00:03:53,010 --> 00:03:58,859
this lock file the lock file contains

00:03:56,909 --> 00:04:00,810
pin versions of all the dependencies in

00:03:58,859 --> 00:04:02,190
the requirements that in file as well as

00:04:00,810 --> 00:04:04,229
they are transitive dependencies and so

00:04:02,190 --> 00:04:05,790
on which is just another way of saying

00:04:04,229 --> 00:04:07,650
that it's the complete set of Python

00:04:05,790 --> 00:04:09,540
packages that our PI binary needs in

00:04:07,650 --> 00:04:11,840
order to run nothing more nothing less

00:04:09,540 --> 00:04:14,190
it's the precise set of those packages

00:04:11,840 --> 00:04:15,840
note that generating this lock file is

00:04:14,190 --> 00:04:17,340
not hermetic nor is it reproducible

00:04:15,840 --> 00:04:19,049
that's because it depends on the current

00:04:17,340 --> 00:04:21,779
state of PI Pru the time you generated

00:04:19,049 --> 00:04:23,610
if you run pip compile in the same in

00:04:21,779 --> 00:04:25,349
file two times you're not guaranteed to

00:04:23,610 --> 00:04:27,310
get the same lock for all as output but

00:04:25,349 --> 00:04:29,530
you are guaranteed that

00:04:27,310 --> 00:04:31,090
the resulting lock files will conform to

00:04:29,530 --> 00:04:32,710
all the specifications all the

00:04:31,090 --> 00:04:33,880
constraints in the requirement setting

00:04:32,710 --> 00:04:37,630
file and that's what we really care

00:04:33,880 --> 00:04:39,970
about so how did it work for us well one

00:04:37,630 --> 00:04:41,950
of the downsides is that developers must

00:04:39,970 --> 00:04:43,450
now be aware of Python environments

00:04:41,950 --> 00:04:44,770
where they didn't have to before and

00:04:43,450 --> 00:04:47,980
they have to explicitly switch between

00:04:44,770 --> 00:04:49,150
them to run bazel tests say and that's

00:04:47,980 --> 00:04:51,610
error-prone and we'd like to get rid of

00:04:49,150 --> 00:04:55,860
it or reduce it we also inadvertently

00:04:51,610 --> 00:04:57,550
made basil's caching less effective and

00:04:55,860 --> 00:05:00,700
changes to third-party dependencies

00:04:57,550 --> 00:05:02,530
aren't automatically propagated to the

00:05:00,700 --> 00:05:04,570
PI libraries and PI binaries that are

00:05:02,530 --> 00:05:07,320
downstream from them right now that's a

00:05:04,570 --> 00:05:10,270
manual step we hope to improve that to

00:05:07,320 --> 00:05:11,979
on the plus side we did achieve our most

00:05:10,270 --> 00:05:13,240
important goal which is to reliably know

00:05:11,979 --> 00:05:14,470
the precise set of third-party

00:05:13,240 --> 00:05:16,750
dependencies that every Python

00:05:14,470 --> 00:05:18,100
application has that is the set that

00:05:16,750 --> 00:05:20,410
contains everything the application

00:05:18,100 --> 00:05:21,820
needs and nothing that it doesn't our

00:05:20,410 --> 00:05:23,050
solution is mono repo friendly which

00:05:21,820 --> 00:05:25,030
should go without saying because we're a

00:05:23,050 --> 00:05:26,830
mono repo and it has the nice side

00:05:25,030 --> 00:05:28,870
benefit that we can now track dependency

00:05:26,830 --> 00:05:30,400
changes over time because our lock files

00:05:28,870 --> 00:05:33,370
are checked in to get we have their

00:05:30,400 --> 00:05:34,930
histories and last but not least we can

00:05:33,370 --> 00:05:36,880
easily produce wheels for our Python

00:05:34,930 --> 00:05:40,090
applications which has made deployments

00:05:36,880 --> 00:05:42,310
a real breeze so I'm happy to talk more

00:05:40,090 --> 00:05:43,390
about B for Python dependencies please

00:05:42,310 --> 00:05:45,190
feel free to email me with any questions

00:05:43,390 --> 00:05:46,680
or just find me at the conference thank

00:05:45,190 --> 00:05:54,389
you

00:05:46,680 --> 00:05:54,389
[Applause]

00:06:12,640 --> 00:06:17,750
yes exactly

00:06:14,630 --> 00:06:20,470
oh thank you so the question was is an

00:06:17,750 --> 00:06:23,570
in our mounted repo is any PI library

00:06:20,470 --> 00:06:25,160
able to be depended upon by any say PI

00:06:23,570 --> 00:06:26,690
binder or their PI library in the repo

00:06:25,160 --> 00:06:27,890
and the answer is yes we don't impose

00:06:26,690 --> 00:06:44,480
constraints over that that was one of

00:06:27,890 --> 00:06:46,220
the starting assumptions well so one

00:06:44,480 --> 00:06:49,000
thing I didn't mention explicitly had to

00:06:46,220 --> 00:06:51,650
hide to cut the talk significantly but

00:06:49,000 --> 00:06:53,150
every time a dependency is specified it

00:06:51,650 --> 00:06:54,740
can be spent it can be specified at a

00:06:53,150 --> 00:06:56,780
particular version or a version

00:06:54,740 --> 00:07:00,230
constraint and so if we tried we could

00:06:56,780 --> 00:07:02,060
try to build one requirements file for

00:07:00,230 --> 00:07:03,770
the whole repo but what we would

00:07:02,060 --> 00:07:06,169
probably run into his version conflicts

00:07:03,770 --> 00:07:07,880
where some library somewhere required

00:07:06,169 --> 00:07:09,260
you know some version less than X and

00:07:07,880 --> 00:07:12,790
some other one required greater the next

00:07:09,260 --> 00:07:12,790
we would in fact because I've tried it

00:07:12,850 --> 00:07:15,880
thank you

00:07:16,530 --> 00:07:20,250

YouTube URL: https://www.youtube.com/watch?v=3DBZpahGnuI


