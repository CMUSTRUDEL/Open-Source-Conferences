Title: BazelCon 2019 Day 1: Building Self Driving Cars with Bazel
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	Axel Uhlig and Patrick Ziegler, BMW Group event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Axel Uhlig, Patrick Ziegler;
Captions: 
	00:00:00,580 --> 00:00:07,200
[Music]

00:00:08,990 --> 00:00:16,440
hello everybody hello everybody welcome

00:00:12,809 --> 00:00:21,240
back thanks for coming back thanks to

00:00:16,440 --> 00:00:22,560
the folks up in the balcony so we're

00:00:21,240 --> 00:00:25,260
just going to get started with the next

00:00:22,560 --> 00:00:26,970
talk here we've got Axel and Patrick

00:00:25,260 --> 00:00:28,380
from the BMW Group they're going to talk

00:00:26,970 --> 00:00:37,140
about building self-driving cars with

00:00:28,380 --> 00:00:39,930
basil thanks Jay hi everybody I'm axel

00:00:37,140 --> 00:00:44,760
this is Patrick we will show you how we

00:00:39,930 --> 00:00:47,460
use basil to build self-driving cars so

00:00:44,760 --> 00:00:50,910
I'm axel I started at BMW as a software

00:00:47,460 --> 00:00:53,190
engineer by now I mostly take care about

00:00:50,910 --> 00:00:55,050
our CI systems so making sure that all

00:00:53,190 --> 00:00:58,289
our developers get their feedback as

00:00:55,050 --> 00:01:00,960
fast as possible yeah so my name is

00:00:58,289 --> 00:01:03,359
Patrick I'm currently the role of a lead

00:01:00,960 --> 00:01:06,450
release engineer at BMW especially in

00:01:03,359 --> 00:01:08,760
this project I'm have some experience

00:01:06,450 --> 00:01:10,400
before is built within a long history of

00:01:08,760 --> 00:01:13,409
building software for embedded systems

00:01:10,400 --> 00:01:15,240
started with some small embedded systems

00:01:13,409 --> 00:01:17,670
where it can easily overlook the whole

00:01:15,240 --> 00:01:21,210
source code up to infotainment systems

00:01:17,670 --> 00:01:24,450
which is nowadays more or less a Linux

00:01:21,210 --> 00:01:26,430
distribution and up to now a cluster of

00:01:24,450 --> 00:01:30,900
multiple embedded systems from one

00:01:26,430 --> 00:01:33,450
source tree so our department is working

00:01:30,900 --> 00:01:35,640
on every driver assistance related

00:01:33,450 --> 00:01:37,350
feature that we offer that is the

00:01:35,640 --> 00:01:39,540
beeping sounds you hear when you park

00:01:37,350 --> 00:01:43,409
your car up to fully autonomous driving

00:01:39,540 --> 00:01:45,840
and cities for BMW that's quite an

00:01:43,409 --> 00:01:47,460
advanced and big software project and we

00:01:45,840 --> 00:01:49,290
are trying to use state-of-the-art tools

00:01:47,460 --> 00:01:53,579
wherever possible also one of the

00:01:49,290 --> 00:01:56,880
reasons we're here it hasn't always been

00:01:53,579 --> 00:01:59,250
that way just four years ago roughly our

00:01:56,880 --> 00:02:01,560
software was split into 200 different

00:01:59,250 --> 00:02:03,899
software components all of them were in

00:02:01,560 --> 00:02:05,490
different repositories and for most of

00:02:03,899 --> 00:02:07,140
those who didn't have the access rights

00:02:05,490 --> 00:02:10,259
so you couldn't even see what your

00:02:07,140 --> 00:02:12,270
federal co-workers were doing we also

00:02:10,259 --> 00:02:13,980
had to set up two different build tool

00:02:12,270 --> 00:02:16,349
chains because we didn't trust either

00:02:13,980 --> 00:02:18,030
one of them and just to make sure that

00:02:16,349 --> 00:02:21,080
we don't up and you don't die when

00:02:18,030 --> 00:02:24,840
you drive our cars we had to

00:02:21,080 --> 00:02:26,430
I'll say the feedback was very delayed

00:02:24,840 --> 00:02:28,380
so it took a lot of time for the

00:02:26,430 --> 00:02:32,490
developers to know if they introduced a

00:02:28,380 --> 00:02:35,850
new buck or not to lies at that time we

00:02:32,490 --> 00:02:37,740
both mostly used MATLAB and see the

00:02:35,850 --> 00:02:40,670
developers used Windows as their host

00:02:37,740 --> 00:02:43,290
system so for the development machine

00:02:40,670 --> 00:02:48,090
build tools were seemed against cons and

00:02:43,290 --> 00:02:49,800
for the CI we set up a jenkins and in

00:02:48,090 --> 00:02:53,070
the last three to four years we grew a

00:02:49,800 --> 00:02:56,430
lot like a lot but now we have more than

00:02:53,070 --> 00:02:58,200
23 million lines of source code close to

00:02:56,430 --> 00:03:00,360
2000 developers are working on that

00:02:58,200 --> 00:03:03,900
software stack and that results in more

00:03:00,360 --> 00:03:06,480
than 20,000 CI builds per day we mostly

00:03:03,900 --> 00:03:08,490
code in C++ and pison these days but you

00:03:06,480 --> 00:03:11,370
will find all sorts of programming

00:03:08,490 --> 00:03:13,950
languages in our sort mistake host

00:03:11,370 --> 00:03:16,440
system we nowadays use mostly Linux but

00:03:13,950 --> 00:03:20,160
for some corner cases Windows is still

00:03:16,440 --> 00:03:22,170
needed even on the CI the software is

00:03:20,160 --> 00:03:23,940
not actually deployed to then either

00:03:22,170 --> 00:03:26,040
Linux or Windows and then shipped to the

00:03:23,940 --> 00:03:28,230
customer but to a very special hardware

00:03:26,040 --> 00:03:30,120
with a special operating system which is

00:03:28,230 --> 00:03:33,270
then built into the cars at the factory

00:03:30,120 --> 00:03:36,840
and this hardware is using a completely

00:03:33,270 --> 00:03:40,620
different architecture several ones MD

00:03:36,840 --> 00:03:43,650
64 MIPS and this is then what the extra

00:03:40,620 --> 00:03:46,200
customer is getting we also set up a new

00:03:43,650 --> 00:03:49,050
CI system it's now hosted on our on our

00:03:46,200 --> 00:03:55,620
on-premise cloud we will talk about the

00:03:49,050 --> 00:03:58,110
CI system in a bit it's not just the

00:03:55,620 --> 00:03:59,790
scale that grew a lot it's all say well

00:03:58,110 --> 00:04:02,730
the complexity of the feature that

00:03:59,790 --> 00:04:04,920
changed a lot all-tournament autonomous

00:04:02,730 --> 00:04:06,300
driving became a thing and we started

00:04:04,920 --> 00:04:10,769
also working on that a couple of years

00:04:06,300 --> 00:04:13,800
ago at large scale and with this

00:04:10,769 --> 00:04:16,859
advanced features you need advanced

00:04:13,800 --> 00:04:20,370
tools advanced simulators which is a

00:04:16,859 --> 00:04:22,620
huge challenge for your CI system and at

00:04:20,370 --> 00:04:25,050
the same time we adopted a very agile

00:04:22,620 --> 00:04:27,540
way of working so our teams would now

00:04:25,050 --> 00:04:30,150
usually modify several software

00:04:27,540 --> 00:04:32,010
component at once which is even further

00:04:30,150 --> 00:04:34,020
stress for a CI system because now you

00:04:32,010 --> 00:04:37,050
need to run multiple test suits

00:04:34,020 --> 00:04:38,910
or the average code change all of those

00:04:37,050 --> 00:04:40,889
things combined the growth of our

00:04:38,910 --> 00:04:43,710
developer the growth of the source code

00:04:40,889 --> 00:04:46,860
of the tools and of this new working way

00:04:43,710 --> 00:04:49,199
pretty much broker all build system we

00:04:46,860 --> 00:04:52,199
had really huge issues with feedback

00:04:49,199 --> 00:04:54,180
time and stability so we started to look

00:04:52,199 --> 00:04:58,710
for alternatives and that's when Patrick

00:04:54,180 --> 00:05:02,069
came across basil yep so we looked

00:04:58,710 --> 00:05:04,440
around back then when we changed the way

00:05:02,069 --> 00:05:06,780
we are working when we changed the code

00:05:04,440 --> 00:05:08,659
that we are developing also we took the

00:05:06,780 --> 00:05:13,080
opportunity to look at our to landscape

00:05:08,659 --> 00:05:15,419
to basically see what kind of tool could

00:05:13,080 --> 00:05:16,949
fit our new requirements and our

00:05:15,419 --> 00:05:20,130
requirements are not anymore derived

00:05:16,949 --> 00:05:23,400
only from the languages that we use in

00:05:20,130 --> 00:05:26,969
our code base but also from from the

00:05:23,400 --> 00:05:30,330
safety point of view so we actually need

00:05:26,969 --> 00:05:34,409
to find a build system that satisfies

00:05:30,330 --> 00:05:37,050
all the safety requirements three years

00:05:34,409 --> 00:05:39,599
ago I went to the the Basel conference

00:05:37,050 --> 00:05:44,280
here to say the same place actually and

00:05:39,599 --> 00:05:47,930
there were some Lego bricks and yeah

00:05:44,280 --> 00:05:47,930
that was the reason why we picked Basel

00:05:49,009 --> 00:05:57,779
okay the official version sounds a bit

00:05:53,039 --> 00:06:02,610
different we looked into various tools

00:05:57,779 --> 00:06:06,539
bachpan see make makes guns you name it

00:06:02,610 --> 00:06:07,949
right but we from the from the past

00:06:06,539 --> 00:06:11,099
experience we figured out that there are

00:06:07,949 --> 00:06:13,740
some features which are really cool to

00:06:11,099 --> 00:06:16,289
make to build a software software in the

00:06:13,740 --> 00:06:18,479
right way one feature is of course the

00:06:16,289 --> 00:06:21,960
sandbox feature so we need to ensure

00:06:18,479 --> 00:06:24,090
that we include and link to correct

00:06:21,960 --> 00:06:27,990
files into our build so that we do not

00:06:24,090 --> 00:06:30,150
take just another file which is named

00:06:27,990 --> 00:06:32,219
the same way but in a different tree for

00:06:30,150 --> 00:06:33,569
different purpose that we take this one

00:06:32,219 --> 00:06:35,759
instead

00:06:33,569 --> 00:06:38,340
so sandboxing gives us the opportunity

00:06:35,759 --> 00:06:41,370
to as long as you have your depends is

00:06:38,340 --> 00:06:43,259
clearly defined to also only put the

00:06:41,370 --> 00:06:47,479
stuff that you have defined in your

00:06:43,259 --> 00:06:47,479
sandbox and use it during your build

00:06:48,449 --> 00:06:54,280
next thing is incremental builds so if

00:06:51,699 --> 00:06:56,050
your code page is growing we also need a

00:06:54,280 --> 00:06:58,840
tool that supports you making

00:06:56,050 --> 00:07:00,400
incremental bullets and the benefit on

00:06:58,840 --> 00:07:04,720
the plus side is also we can also

00:07:00,400 --> 00:07:09,180
incremental tests now that increased the

00:07:04,720 --> 00:07:11,979
velocity of our developers a lot and

00:07:09,180 --> 00:07:16,659
written it on a slide so only rumors say

00:07:11,979 --> 00:07:18,610
there's a Basel clean unfortunately our

00:07:16,659 --> 00:07:20,080
developers got used to the way of

00:07:18,610 --> 00:07:21,250
working like oh it doesn't work let's

00:07:20,080 --> 00:07:24,550
make a make clean

00:07:21,250 --> 00:07:25,300
try it again damn it it still fails of

00:07:24,550 --> 00:07:26,919
course it does

00:07:25,300 --> 00:07:28,479
because you have an issue there in your

00:07:26,919 --> 00:07:31,569
rule you have issue there in your build

00:07:28,479 --> 00:07:34,240
file you should air on your code it's

00:07:31,569 --> 00:07:35,830
not anymore related to the build tool or

00:07:34,240 --> 00:07:37,270
some weird configuration it took us a

00:07:35,830 --> 00:07:39,039
while but nowadays it's pretty well

00:07:37,270 --> 00:07:40,680
accepted that people don't clean anymore

00:07:39,039 --> 00:07:43,810
their workspace

00:07:40,680 --> 00:07:45,310
except for developers of rules of course

00:07:43,810 --> 00:07:47,830
but they do still need to do it

00:07:45,310 --> 00:07:49,449
regularly therefore we use the output

00:07:47,830 --> 00:07:51,340
user root slack on the command line to

00:07:49,449 --> 00:07:53,590
just point temporary to another place

00:07:51,340 --> 00:07:58,120
where we can basically run our build and

00:07:53,590 --> 00:08:00,940
test the rules last saying the

00:07:58,120 --> 00:08:05,560
dependency management last thing on the

00:08:00,940 --> 00:08:08,639
slide sorry the dependency management in

00:08:05,560 --> 00:08:11,380
terms of ease of where we derive our

00:08:08,639 --> 00:08:14,099
safety requirements from the ease of -

00:08:11,380 --> 00:08:17,740
six - six - there are certain things

00:08:14,099 --> 00:08:20,229
described in there to not make mistakes

00:08:17,740 --> 00:08:22,029
others did already so this morning we

00:08:20,229 --> 00:08:23,620
saw this nice picture one of the first

00:08:22,029 --> 00:08:26,940
pictures where you see what you

00:08:23,620 --> 00:08:30,870
shouldn't do with remote or basically

00:08:26,940 --> 00:08:33,039
people have written down some

00:08:30,870 --> 00:08:35,039
requirements into specifications which

00:08:33,039 --> 00:08:37,599
ended up in the easy two six two six two

00:08:35,039 --> 00:08:39,669
one thing is dependency management you

00:08:37,599 --> 00:08:43,690
need to have a clear process for your

00:08:39,669 --> 00:08:45,880
dependencies and we figured out that you

00:08:43,690 --> 00:08:48,310
can establish additional processes you

00:08:45,880 --> 00:08:49,990
can step put into additional tools to

00:08:48,310 --> 00:08:51,850
manage your dependencies but it becomes

00:08:49,990 --> 00:08:54,180
much easier if you build system as such

00:08:51,850 --> 00:08:57,279
already maintains your dependencies and

00:08:54,180 --> 00:08:59,740
you treat them as code in your source

00:08:57,279 --> 00:09:00,550
tree and that means any change that you

00:08:59,740 --> 00:09:02,650
make on your

00:09:00,550 --> 00:09:05,490
these can be easily gated as well they

00:09:02,650 --> 00:09:08,590
can be reviewed as well you can make

00:09:05,490 --> 00:09:15,970
change requests or poor requests for

00:09:08,590 --> 00:09:18,310
them basically on the next line we see

00:09:15,970 --> 00:09:21,160
first a hermetic builds that's kind of

00:09:18,310 --> 00:09:23,710
crucial so we can easily say that our

00:09:21,160 --> 00:09:28,900
build is not anymore impacted by the

00:09:23,710 --> 00:09:32,890
host environment this kind of works for

00:09:28,900 --> 00:09:41,260
me thing right it's not happening

00:09:32,890 --> 00:09:44,590
anymore not at all so it reduces simply

00:09:41,260 --> 00:09:46,960
the fact how your environment could

00:09:44,590 --> 00:09:50,830
influence you built the comes to the

00:09:46,960 --> 00:09:54,670
next point reproducible builds so basil

00:09:50,830 --> 00:09:55,600
has to focus on making your boat

00:09:54,670 --> 00:09:58,360
reproducible

00:09:55,600 --> 00:10:00,280
but just because basil tries to do that

00:09:58,360 --> 00:10:03,280
it doesn't mean it actually happens or

00:10:00,280 --> 00:10:04,810
it's there by definition I of course we

00:10:03,280 --> 00:10:06,700
have additional tools in your base book

00:10:04,810 --> 00:10:10,720
which still could produce non-han Matic

00:10:06,700 --> 00:10:12,100
non reproducible outputs but with basil

00:10:10,720 --> 00:10:14,620
it becomes more obvious when this is

00:10:12,100 --> 00:10:17,650
happening and having the reproducible

00:10:14,620 --> 00:10:21,370
builds also allows you to validate

00:10:17,650 --> 00:10:24,640
changes on your host environment against

00:10:21,370 --> 00:10:28,030
a previous build so we can again safety

00:10:24,640 --> 00:10:30,370
case we can detect if the environment

00:10:28,030 --> 00:10:32,620
has an impact on our ability results so

00:10:30,370 --> 00:10:34,810
we can validate the results that we

00:10:32,620 --> 00:10:37,780
built on the cloud as well as the valid

00:10:34,810 --> 00:10:39,880
resource we validate on a bare metal

00:10:37,780 --> 00:10:41,500
host we can see that there is no

00:10:39,880 --> 00:10:43,840
difference so we can see that we can

00:10:41,500 --> 00:10:45,490
trust our CI system which is running

00:10:43,840 --> 00:10:52,150
thousands of built in the cloud

00:10:45,490 --> 00:10:54,940
environment and queries - I initially

00:10:52,150 --> 00:10:56,920
mentioned that I started with some small

00:10:54,940 --> 00:10:59,260
embedded systems where we can easily

00:10:56,920 --> 00:11:02,920
overlook the code it's not possible

00:10:59,260 --> 00:11:05,080
anymore and we need to support for

00:11:02,920 --> 00:11:06,790
looking what is going on during the

00:11:05,080 --> 00:11:09,250
build so why is why are things happening

00:11:06,790 --> 00:11:12,700
and the career part is really helpful

00:11:09,250 --> 00:11:13,680
for doing so so thanks a lot it also

00:11:12,700 --> 00:11:17,339
helps us

00:11:13,680 --> 00:11:20,339
to set up some testers Jen query rule

00:11:17,339 --> 00:11:22,769
basically that you can use to query the

00:11:20,339 --> 00:11:24,420
dependencies of a certain target and you

00:11:22,769 --> 00:11:27,689
can easily detect architectural

00:11:24,420 --> 00:11:29,939
violations with this rule so you can see

00:11:27,689 --> 00:11:31,709
what kind of dependencies are put in you

00:11:29,939 --> 00:11:34,709
can create whitelist for it that you do

00:11:31,709 --> 00:11:36,509
not pull in dependencies which are

00:11:34,709 --> 00:11:43,410
originally meant for different target

00:11:36,509 --> 00:11:46,439
actually all in all we figured out we

00:11:43,410 --> 00:11:49,589
can kind of achieve the same other build

00:11:46,439 --> 00:11:51,839
tools as well but only if we add a bunch

00:11:49,589 --> 00:11:56,850
of other tools around it and if we built

00:11:51,839 --> 00:11:58,800
up a massive tool landscape to achieve

00:11:56,850 --> 00:12:00,929
the same goals and that in the end would

00:11:58,800 --> 00:12:03,029
also be hard to maintain it would be

00:12:00,929 --> 00:12:06,209
hard to review it would be hard in terms

00:12:03,029 --> 00:12:09,300
of safety to see how do they interact

00:12:06,209 --> 00:12:10,980
with each other actually so it becomes

00:12:09,300 --> 00:12:13,769
quite in handy that there is a tool that

00:12:10,980 --> 00:12:17,449
provides all this in one place and we

00:12:13,769 --> 00:12:19,889
just need to review this tool actually

00:12:17,449 --> 00:12:22,829
so how did we create

00:12:19,889 --> 00:12:24,870
yeah so know that Patrick convinced us

00:12:22,829 --> 00:12:27,509
fuse your engineers that basil is the

00:12:24,870 --> 00:12:29,249
cool thing the question came up how do

00:12:27,509 --> 00:12:31,769
we pull this off I mean you saw it

00:12:29,249 --> 00:12:34,550
before 23 million lines of source code

00:12:31,769 --> 00:12:37,649
Welbeck Vern was a little less but still

00:12:34,550 --> 00:12:40,139
we are talking about huge efforts here

00:12:37,649 --> 00:12:41,790
to migrate your existing software stack

00:12:40,139 --> 00:12:44,790
two completely different build tool and

00:12:41,790 --> 00:12:46,769
all this while being deployables this

00:12:44,790 --> 00:12:49,050
whole time say you cannot just stop

00:12:46,769 --> 00:12:51,149
everything migrate and continue two

00:12:49,050 --> 00:12:54,720
months later every product manager will

00:12:51,149 --> 00:12:57,059
just kill you say we came up with a plan

00:12:54,720 --> 00:12:58,439
and the plan kind of worked out well for

00:12:57,059 --> 00:13:00,559
us and that's why I would like to share

00:12:58,439 --> 00:13:03,269
it with you and might help you as well

00:13:00,559 --> 00:13:05,730
what you see here is the time acts and

00:13:03,269 --> 00:13:07,889
the usage of our CI systems you see the

00:13:05,730 --> 00:13:09,990
in R at the cemex system which kept on

00:13:07,889 --> 00:13:11,939
running in the background of all the

00:13:09,990 --> 00:13:14,249
time and then at some point was shut

00:13:11,939 --> 00:13:16,709
down and you see the basil system which

00:13:14,249 --> 00:13:19,410
first slowly and then very rapidly was

00:13:16,709 --> 00:13:24,270
able to build our software stack and at

00:13:19,410 --> 00:13:26,100
the end it's the only tool we have left

00:13:24,270 --> 00:13:27,600
the way we did it was we first

00:13:26,100 --> 00:13:29,910
approached our management and said hey

00:13:27,600 --> 00:13:32,130
we have this new tool here and we think

00:13:29,910 --> 00:13:34,529
this tool might help us to solve some of

00:13:32,130 --> 00:13:36,330
those issues we're having please give us

00:13:34,529 --> 00:13:39,000
a team of five to six people to look

00:13:36,330 --> 00:13:42,089
into this a bit more deeply they gave us

00:13:39,000 --> 00:13:44,580
the team we started the next day what we

00:13:42,089 --> 00:13:46,290
did was writing down all the use cases

00:13:44,580 --> 00:13:48,959
that the C makes the AI system was

00:13:46,290 --> 00:13:52,560
fulfilling and then we picked on purpose

00:13:48,959 --> 00:13:54,500
the most hardest ones that or where you

00:13:52,560 --> 00:13:57,209
have the hardest time to do it in Basel

00:13:54,500 --> 00:13:58,980
for us that was the integration of our

00:13:57,209 --> 00:14:02,310
simulation middleware it's something we

00:13:58,980 --> 00:14:03,839
will talk about later as well why did we

00:14:02,310 --> 00:14:05,370
pick the other stuff at the beginning

00:14:03,839 --> 00:14:08,430
because we wanted to find potential

00:14:05,370 --> 00:14:10,470
blockers as fast as possible three

00:14:08,430 --> 00:14:14,040
months in actually way longer than we

00:14:10,470 --> 00:14:16,020
thought it would take we didn't find any

00:14:14,040 --> 00:14:18,570
blocker so far and we actually reached a

00:14:16,020 --> 00:14:20,820
point where we said well the remaining

00:14:18,570 --> 00:14:22,800
90% of our work space can be pretty much

00:14:20,820 --> 00:14:25,920
migrated by what by copying what we

00:14:22,800 --> 00:14:27,270
already did for the first 10% so this

00:14:25,920 --> 00:14:28,770
gives us a pretty good feeling and we

00:14:27,270 --> 00:14:31,110
approached our management and again and

00:14:28,770 --> 00:14:33,270
said hey I think we figured it out this

00:14:31,110 --> 00:14:37,770
will actually work let's roll it out and

00:14:33,270 --> 00:14:39,480
so we did and for roughly a month almost

00:14:37,770 --> 00:14:41,540
every other developer of our department

00:14:39,480 --> 00:14:43,860
worked on basil icing or source code

00:14:41,540 --> 00:14:47,250
initially we thought this might take one

00:14:43,860 --> 00:14:49,290
or two weeks it took a month what they

00:14:47,250 --> 00:14:52,550
basically did is writing build files

00:14:49,290 --> 00:14:55,200
wherever there used to be a C make file

00:14:52,550 --> 00:14:56,760
for sure we didn't find some things as

00:14:55,200 --> 00:14:58,649
some things that turned out to be way

00:14:56,760 --> 00:15:00,690
more complicated than we thought they

00:14:58,649 --> 00:15:03,899
would be so this delayed the whole thing

00:15:00,690 --> 00:15:06,180
a bit further but at some point we got

00:15:03,899 --> 00:15:07,770
it the final test drive on the road was

00:15:06,180 --> 00:15:09,930
done they could even drive the car using

00:15:07,770 --> 00:15:15,180
basil and at that point we switched off

00:15:09,930 --> 00:15:18,240
the CM xgi sister why does this approach

00:15:15,180 --> 00:15:20,670
works kind of well first of all it's

00:15:18,240 --> 00:15:22,920
easy to sell to your management because

00:15:20,670 --> 00:15:24,510
you don't ask for a full Basel migration

00:15:22,920 --> 00:15:26,579
at the beginning you ask for a small

00:15:24,510 --> 00:15:28,950
team to investigate if there are any

00:15:26,579 --> 00:15:30,600
blockers and only if you can technically

00:15:28,950 --> 00:15:32,730
prove that you're very likely to pull

00:15:30,600 --> 00:15:35,010
off the whole thing you then go for the

00:15:32,730 --> 00:15:36,040
final decision this is really easy to

00:15:35,010 --> 00:15:40,410
sell

00:15:36,040 --> 00:15:43,930
and it's safe to sell also for you and

00:15:40,410 --> 00:15:45,970
the other benefit is that you will only

00:15:43,930 --> 00:15:49,240
lead for a very short period of time a

00:15:45,970 --> 00:15:51,700
lot of manpower this is the rollout

00:15:49,240 --> 00:15:54,430
phase and at that point of time when a

00:15:51,700 --> 00:15:56,230
lot of your developers will contact come

00:15:54,430 --> 00:15:58,660
in contact with basil for the first time

00:15:56,230 --> 00:16:00,850
you will already have a team of basil

00:15:58,660 --> 00:16:02,830
experts in your company that work with

00:16:00,850 --> 00:16:05,200
basil in depth for a couple of month

00:16:02,830 --> 00:16:07,030
which is a pretty good learning resource

00:16:05,200 --> 00:16:14,020
for every other developer in your

00:16:07,030 --> 00:16:18,670
company ok so how is basil working us

00:16:14,020 --> 00:16:20,590
out for us now actually quite well when

00:16:18,670 --> 00:16:22,180
it comes to execution times for for

00:16:20,590 --> 00:16:24,150
example unit tests we were able to

00:16:22,180 --> 00:16:28,960
achieve a 10 times speed improvement

00:16:24,150 --> 00:16:31,240
using remote caching for the build for

00:16:28,960 --> 00:16:33,430
the final target so the hardware that is

00:16:31,240 --> 00:16:36,120
then put into the car we are even able

00:16:33,430 --> 00:16:38,680
to speed it up by around about 12 times

00:16:36,120 --> 00:16:40,090
the cool thing here is that in order to

00:16:38,680 --> 00:16:42,190
build for the target you need some

00:16:40,090 --> 00:16:44,440
really weird tools like code generators

00:16:42,190 --> 00:16:46,360
or the operating system which is then

00:16:44,440 --> 00:16:48,580
running on this ECU which is building

00:16:46,360 --> 00:16:50,530
through the car all of this we were able

00:16:48,580 --> 00:16:52,630
to integrate into basil so all of those

00:16:50,530 --> 00:16:55,870
steps on our basil actions and can be

00:16:52,630 --> 00:16:59,710
cached which is super awesome MATLAB

00:16:55,870 --> 00:17:01,570
code generation can take forever so this

00:16:59,710 --> 00:17:05,500
did not even speed up the CI system but

00:17:01,570 --> 00:17:07,180
also the local development a lot the

00:17:05,500 --> 00:17:08,680
remote caching server itself we actually

00:17:07,180 --> 00:17:10,959
host multiple times for better load

00:17:08,680 --> 00:17:13,660
balancing but this is I guess more like

00:17:10,959 --> 00:17:16,300
a technical detail we are also using

00:17:13,660 --> 00:17:18,640
remote execution however we had a bit

00:17:16,300 --> 00:17:21,040
harder time to set this up correctly the

00:17:18,640 --> 00:17:22,570
thing is it requires way more hermetic

00:17:21,040 --> 00:17:26,650
tool chains something where we screwed

00:17:22,570 --> 00:17:28,030
up a bit on at the beginning however we

00:17:26,650 --> 00:17:30,370
currently using it for our long-running

00:17:28,030 --> 00:17:32,440
sentence test and then we are able to

00:17:30,370 --> 00:17:34,690
speed them up on average about five

00:17:32,440 --> 00:17:37,720
times compared to how we fast we where

00:17:34,690 --> 00:17:39,880
before we currently use built bound for

00:17:37,720 --> 00:17:42,790
that and we hosted ourself on our on

00:17:39,880 --> 00:17:44,290
premise cloud we know that some big

00:17:42,790 --> 00:17:46,300
cloud companies offer this as a service

00:17:44,290 --> 00:17:48,250
however we are not allowed to compile

00:17:46,300 --> 00:17:49,480
source code at the cloud of a company

00:17:48,250 --> 00:17:55,210
that also develops

00:17:49,480 --> 00:17:57,160
autonomous course so sorry but if you're

00:17:55,210 --> 00:17:58,480
into that kind of business we think this

00:17:57,160 --> 00:18:05,679
is a really good business opportunity

00:17:58,480 --> 00:18:10,059
for you yeah so how do we use it in the

00:18:05,679 --> 00:18:13,510
CI actually before we put all the source

00:18:10,059 --> 00:18:15,910
code together into one workspace we

00:18:13,510 --> 00:18:18,040
would have like that's a workspace to be

00:18:15,910 --> 00:18:19,929
a moaner repository to one single get

00:18:18,040 --> 00:18:21,809
repository but due to some legal

00:18:19,929 --> 00:18:25,240
constraints we are not able to do that

00:18:21,809 --> 00:18:27,370
still using its app modules we stitch

00:18:25,240 --> 00:18:29,710
together a workspace that feels like a

00:18:27,370 --> 00:18:33,070
remote repository and all of the time or

00:18:29,710 --> 00:18:37,390
most of the time and since we're using

00:18:33,070 --> 00:18:39,669
Zul by OpenStack which is CI tool we are

00:18:37,390 --> 00:18:41,740
also able to do this on the CI site

00:18:39,669 --> 00:18:43,450
meaning the developer can change the

00:18:41,740 --> 00:18:45,280
code all over the workspace even a

00:18:43,450 --> 00:18:46,960
different required repositories then

00:18:45,280 --> 00:18:49,900
pushes the code to the respective

00:18:46,960 --> 00:18:51,640
repositories and Zul is then on a CI

00:18:49,900 --> 00:18:54,040
side again stitching all that together

00:18:51,640 --> 00:18:55,750
and checking it at once and either

00:18:54,040 --> 00:18:59,380
merging all those changes in all those

00:18:55,750 --> 00:19:01,660
repositories at the same time or not so

00:18:59,380 --> 00:19:02,620
we got this mono repository feeling even

00:19:01,660 --> 00:19:08,140
though we are using multiple

00:19:02,620 --> 00:19:11,290
repositories the CI strategy we are

00:19:08,140 --> 00:19:13,510
using is basically pretty primitive it's

00:19:11,290 --> 00:19:16,150
built and test everything for every

00:19:13,510 --> 00:19:19,390
change which is the most expensive thing

00:19:16,150 --> 00:19:21,309
you can do but luckily using basil we

00:19:19,390 --> 00:19:23,380
are able to pull it off on average we

00:19:21,309 --> 00:19:24,880
are able to pull more than 90% out of

00:19:23,380 --> 00:19:27,400
the caches so that's either the local

00:19:24,880 --> 00:19:29,890
action caches of our built notes or the

00:19:27,400 --> 00:19:32,410
remote cache server so even though we're

00:19:29,890 --> 00:19:35,500
using this very expensive test and

00:19:32,410 --> 00:19:37,419
strategy the feedback times are

00:19:35,500 --> 00:19:39,400
reasonable the cool thing about this

00:19:37,419 --> 00:19:42,760
test strategy is that you find defects

00:19:39,400 --> 00:19:44,080
as fast as possible one last thing we

00:19:42,760 --> 00:19:46,330
are now also able to do incremental

00:19:44,080 --> 00:19:48,190
builds on the CI technically for sure

00:19:46,330 --> 00:19:52,650
you could also do that with C Meg but we

00:19:48,190 --> 00:19:52,650
didn't trust see Meg enough now we do

00:19:53,810 --> 00:19:59,580
okay so I will tell a bit about our

00:19:57,330 --> 00:20:02,160
journey with C++ 2 chainz

00:19:59,580 --> 00:20:04,140
so it's actually mentioned we started in

00:20:02,160 --> 00:20:07,260
the early pace with four small hard

00:20:04,140 --> 00:20:08,340
things to tackle and back then the

00:20:07,260 --> 00:20:11,610
hardest thing you could tackle is

00:20:08,340 --> 00:20:14,820
getting your crust tool chain integrated

00:20:11,610 --> 00:20:16,830
into basil so we started with the

00:20:14,820 --> 00:20:19,740
crustal form which was worse back then

00:20:16,830 --> 00:20:22,530
still written and proto path and without

00:20:19,740 --> 00:20:27,240
any documentation or at least not

00:20:22,530 --> 00:20:34,500
obvious to us and while doing so we

00:20:27,240 --> 00:20:37,620
learned a lot about compilers so first

00:20:34,500 --> 00:20:39,780
thing is we were using partly yuck 2d

00:20:37,620 --> 00:20:41,550
built some part of our basis based

00:20:39,780 --> 00:20:46,470
system and also our tool chain doctor

00:20:41,550 --> 00:20:50,880
has a smart way of packaging the tuition

00:20:46,470 --> 00:20:52,340
in the SDK it means you get archive from

00:20:50,880 --> 00:20:55,110
the shell script you download it you

00:20:52,340 --> 00:20:57,030
execute it locally it starts extracting

00:20:55,110 --> 00:21:00,450
itself then it starts patching all the

00:20:57,030 --> 00:21:03,210
binaries in there to find correct link

00:21:00,450 --> 00:21:05,730
approach which means you have some

00:21:03,210 --> 00:21:07,560
linker script in your tree which have an

00:21:05,730 --> 00:21:10,440
absolute path in there so when you

00:21:07,560 --> 00:21:12,090
integrate this to chain into basil

00:21:10,440 --> 00:21:13,170
without running all the scripts before

00:21:12,090 --> 00:21:17,760
because that's something you'd certainly

00:21:13,170 --> 00:21:19,560
don't want to do you end up in a

00:21:17,760 --> 00:21:20,790
situation where the linker always

00:21:19,560 --> 00:21:23,040
complains that it cannot find the files

00:21:20,790 --> 00:21:26,370
because it tries to link against your

00:21:23,040 --> 00:21:27,900
host fonts we figured out basically that

00:21:26,370 --> 00:21:30,150
for the linker script so to make the

00:21:27,900 --> 00:21:32,250
crew Landcare happy you need to have

00:21:30,150 --> 00:21:36,480
this equal sign all the time there that

00:21:32,250 --> 00:21:36,960
it brief exists this tree with just this

00:21:36,480 --> 00:21:38,790
root

00:21:36,960 --> 00:21:40,230
otherwise it won't so you give to your

00:21:38,790 --> 00:21:42,480
hole to chain you give it to systems as

00:21:40,230 --> 00:21:45,980
this this root but it simply ignores it

00:21:42,480 --> 00:21:45,980
at this point in time

00:21:46,040 --> 00:21:53,510
next thing is depending on how you call

00:21:49,380 --> 00:21:56,220
GCC is a rough net suit or relative pass

00:21:53,510 --> 00:22:00,120
it creates dependency files in a

00:21:56,220 --> 00:22:03,150
different way so sometimes in your

00:22:00,120 --> 00:22:05,440
dependency file the tree to the to the

00:22:03,150 --> 00:22:07,600
far to the header files you depend on

00:22:05,440 --> 00:22:09,100
have an absolute path sometimes open

00:22:07,600 --> 00:22:13,480
relative paths basil relies on a

00:22:09,100 --> 00:22:15,610
relative path to to the fact that we had

00:22:13,480 --> 00:22:17,560
to integrate the two chains with some

00:22:15,610 --> 00:22:19,330
rapper scripts we figured out that we

00:22:17,560 --> 00:22:20,920
call GCC always with naturopath

00:22:19,330 --> 00:22:22,000
therefore afterwards we got an absolute

00:22:20,920 --> 00:22:23,950
thousand depends a tree

00:22:22,000 --> 00:22:31,000
basil was complaining about we have

00:22:23,950 --> 00:22:33,970
nuclear dependency also integrating non

00:22:31,000 --> 00:22:35,770
GCC compiler so we have seen before that

00:22:33,970 --> 00:22:38,110
we have also macro controllers that we

00:22:35,770 --> 00:22:40,810
have other systems where we get it

00:22:38,110 --> 00:22:46,660
a to chain which is certainly not based

00:22:40,810 --> 00:22:48,700
on GCC not even close to it and basil

00:22:46,660 --> 00:22:52,390
still makes them back then made some

00:22:48,700 --> 00:22:54,660
assumptions on what you basically need

00:22:52,390 --> 00:22:57,280
to what your compiler needs to support

00:22:54,660 --> 00:23:00,520
that means we also had to write a lot of

00:22:57,280 --> 00:23:03,100
repres crypts to map or rewrite the

00:23:00,520 --> 00:23:06,730
calls from basil towards the compiler to

00:23:03,100 --> 00:23:09,790
make the compiler work with basil or to

00:23:06,730 --> 00:23:11,470
reprocess certain outputs from the

00:23:09,790 --> 00:23:14,040
compiler that it fits to the

00:23:11,470 --> 00:23:17,140
requirements from basil

00:23:14,040 --> 00:23:21,090
luckily meanwhile we emigrated to C++ to

00:23:17,140 --> 00:23:24,720
chains so things become much easier here

00:23:21,090 --> 00:23:27,790
it gives us more flexibility in order to

00:23:24,720 --> 00:23:31,090
configure the two chains for the certain

00:23:27,790 --> 00:23:33,220
compilers a lot of pepper scripts got

00:23:31,090 --> 00:23:34,240
obsolete luckily and we don't need to

00:23:33,220 --> 00:23:36,640
maintain them anymore

00:23:34,240 --> 00:23:40,330
but there's still sometimes some

00:23:36,640 --> 00:23:43,420
surprises one thing is that feature

00:23:40,330 --> 00:23:46,780
configs seem to be still inherited from

00:23:43,420 --> 00:23:48,400
the original config even if they're not

00:23:46,780 --> 00:23:55,510
explicitly declared in your own

00:23:48,400 --> 00:23:58,300
configuration file next thing now a

00:23:55,510 --> 00:23:59,920
journey with Python 2 chains and we

00:23:58,300 --> 00:24:04,200
heard previously already I don't

00:23:59,920 --> 00:24:07,390
remember who it was that patent is not

00:24:04,200 --> 00:24:11,850
integrated pretty well at the moment for

00:24:07,390 --> 00:24:15,400
certain parts and we had the same

00:24:11,850 --> 00:24:18,759
experience actually since our code base

00:24:15,400 --> 00:24:22,209
is mainly superstores and pi

00:24:18,759 --> 00:24:24,039
peyten for all the tooling and tests we

00:24:22,209 --> 00:24:29,139
also have of course certain dependencies

00:24:24,039 --> 00:24:32,589
on piping means we started with the

00:24:29,139 --> 00:24:38,049
option pick two routes from the routes

00:24:32,589 --> 00:24:39,909
patent repository which can be showed up

00:24:38,049 --> 00:24:41,729
that there can't unconditionally load

00:24:39,909 --> 00:24:46,889
all the dependencies you have to clear

00:24:41,729 --> 00:24:50,619
even if you don't need them which is

00:24:46,889 --> 00:24:53,529
okay ich would say as long as they don't

00:24:50,619 --> 00:24:56,049
have platform-specific wheels and you're

00:24:53,529 --> 00:24:58,179
developing and Linux and Windows because

00:24:56,049 --> 00:25:00,849
then it starts failing so if you

00:24:58,179 --> 00:25:02,349
basically run your built on Windows and

00:25:00,849 --> 00:25:06,999
you have a platform wheel that's only

00:25:02,349 --> 00:25:09,129
comfortable with Linux it broke the

00:25:06,999 --> 00:25:11,859
workspace was all the time so that's

00:25:09,129 --> 00:25:15,789
also one overall regarding the workspace

00:25:11,859 --> 00:25:18,849
rules there's also one lessons that we

00:25:15,789 --> 00:25:22,389
learnt be careful with your workspace

00:25:18,849 --> 00:25:26,429
rules actually they're pretty dangerous

00:25:22,389 --> 00:25:29,619
at the moment since they are not emetic

00:25:26,429 --> 00:25:32,649
you can easily do stupid things in there

00:25:29,619 --> 00:25:39,129
and break your whole built and we did a

00:25:32,649 --> 00:25:43,059
lot very often so please do as little as

00:25:39,129 --> 00:25:45,309
possible in the workspace rules we have

00:25:43,059 --> 00:25:48,369
my custom workspace rules for our wheel

00:25:45,309 --> 00:25:50,619
archives which are unfortunate tightly

00:25:48,369 --> 00:25:53,679
coupled to another workspace rule which

00:25:50,619 --> 00:25:55,919
allows us to authenticate our dependency

00:25:53,679 --> 00:25:59,409
system

00:25:55,919 --> 00:26:02,679
thanks to base I think basically 1.2

00:25:59,409 --> 00:26:07,089
where we get finally HD net RC

00:26:02,679 --> 00:26:09,309
authentication again we are now

00:26:07,089 --> 00:26:12,629
reflecting these rules and we also try

00:26:09,309 --> 00:26:15,099
to make them open-source afterwards our

00:26:12,629 --> 00:26:18,249
in our tree we also had the coexistence

00:26:15,099 --> 00:26:22,569
of Python 2 and pattern 3 before we

00:26:18,249 --> 00:26:23,889
moved on with Python 2 chainz this was a

00:26:22,569 --> 00:26:27,399
challenge for us because there was only

00:26:23,889 --> 00:26:29,829
one part on top and we tried to make

00:26:27,399 --> 00:26:32,599
also this part as hermetic as possible

00:26:29,829 --> 00:26:34,909
so we have our own way of having an

00:26:32,599 --> 00:26:40,509
hermetic peyten integrated in the to

00:26:34,909 --> 00:26:43,190
train nevertheless we had to use

00:26:40,509 --> 00:26:44,659
different type heightened tops in

00:26:43,190 --> 00:26:48,199
different configurations that we are

00:26:44,659 --> 00:26:50,359
building that was really painful after

00:26:48,199 --> 00:26:54,109
all they were fighting two chains so we

00:26:50,359 --> 00:26:57,859
created or started to be create half a

00:26:54,109 --> 00:27:01,549
year ago we figured out that we have

00:26:57,859 --> 00:27:05,719
meanwhile a bunch of wrong assumptions

00:27:01,549 --> 00:27:07,549
in our tree which rely on Python top two

00:27:05,719 --> 00:27:09,469
weeks ago we finally managed to finish

00:27:07,549 --> 00:27:15,919
Timmy creation to fight in two chains so

00:27:09,469 --> 00:27:18,739
it took us two so now one recommendation

00:27:15,919 --> 00:27:20,659
from from our side batteries start me

00:27:18,739 --> 00:27:27,859
creating as soon as possible to Ematic

00:27:20,659 --> 00:27:30,529
Partin that simple life much easier yeah

00:27:27,859 --> 00:27:32,329
yeah so that simulation middleware I

00:27:30,529 --> 00:27:33,619
talked about before it's Ross

00:27:32,329 --> 00:27:36,679
some of you might know it it's open

00:27:33,619 --> 00:27:38,719
source that stands for robot operating

00:27:36,679 --> 00:27:41,929
system it's actually quite popular in

00:27:38,719 --> 00:27:45,489
robotics not just academic but also for

00:27:41,929 --> 00:27:48,079
production use we use it a lot for

00:27:45,489 --> 00:27:50,239
especially for a rapid prototyping of

00:27:48,079 --> 00:27:52,190
our algorithms so where the code is not

00:27:50,239 --> 00:27:54,379
being deployed to the final hardware yet

00:27:52,190 --> 00:27:58,309
but you already want to test it out on

00:27:54,379 --> 00:28:00,259
the road so therefore we took put a lot

00:27:58,309 --> 00:28:04,099
of effort into making Ross work well

00:28:00,259 --> 00:28:06,739
with basil and the video that can now

00:28:04,099 --> 00:28:12,319
start shows you how the current workflow

00:28:06,739 --> 00:28:16,209
looks like thing about just playing the

00:28:12,319 --> 00:28:16,209
loop so maybe let's first watch it

00:28:21,140 --> 00:28:27,690
yeah so I guess that looked kind of

00:28:24,990 --> 00:28:30,000
simple but for us this was a huge step

00:28:27,690 --> 00:28:32,400
because what you just saw is a developer

00:28:30,000 --> 00:28:34,950
modifying some source code and then he's

00:28:32,400 --> 00:28:37,680
using a lot one-liner well a long one I

00:28:34,950 --> 00:28:39,870
have to admit but still it's using a

00:28:37,680 --> 00:28:43,230
wall liner to verify his changes in the

00:28:39,870 --> 00:28:45,660
simulator and before using basil that

00:28:43,230 --> 00:28:48,570
was really hard to do you had to set up

00:28:45,660 --> 00:28:49,830
multiple terminals and run the correct

00:28:48,570 --> 00:28:51,750
commands in the correct order in

00:28:49,830 --> 00:28:53,670
different terminals whatever in order to

00:28:51,750 --> 00:28:56,880
verify that whatever you did works out

00:28:53,670 --> 00:29:00,660
well using basil it's now one basil run

00:28:56,880 --> 00:29:02,850
command and you can check whatever you

00:29:00,660 --> 00:29:04,950
did in the simulator it doesn't stop

00:29:02,850 --> 00:29:13,340
there though if we go on to the next

00:29:04,950 --> 00:29:15,690
slide you see one slide before that yeah

00:29:13,340 --> 00:29:18,000
this is one of our cars one of our test

00:29:15,690 --> 00:29:20,190
cars there's a lot of stuff in the trunk

00:29:18,000 --> 00:29:22,290
but especially the black box that is

00:29:20,190 --> 00:29:24,000
like a personal computer and in that

00:29:22,290 --> 00:29:25,710
computer you can insert your personal

00:29:24,000 --> 00:29:27,600
harddrive which you can unplug from your

00:29:25,710 --> 00:29:30,060
workstation go to the garage put it in

00:29:27,600 --> 00:29:32,580
there and then in the car you can start

00:29:30,060 --> 00:29:34,230
up your personal Lubuntu and run the

00:29:32,580 --> 00:29:36,720
same command I showed you before only

00:29:34,230 --> 00:29:39,900
with slightly changed parameters hit the

00:29:36,720 --> 00:29:44,520
road and test drive that thing all with

00:29:39,900 --> 00:29:46,830
one command say there basil helped us a

00:29:44,520 --> 00:29:50,010
lot I mean for sure this is for the like

00:29:46,830 --> 00:29:52,100
the rapid prototyping testing we just

00:29:50,010 --> 00:29:54,720
want to try it out if it kind of works

00:29:52,100 --> 00:30:02,040
the actual testing before we give it to

00:29:54,720 --> 00:30:03,360
customers looks a lot different when for

00:30:02,040 --> 00:30:05,550
sure then you also have all those

00:30:03,360 --> 00:30:08,760
runtime issues once you start using the

00:30:05,550 --> 00:30:10,980
the final hardware and so on but if we

00:30:08,760 --> 00:30:12,600
talk about like development speeds basil

00:30:10,980 --> 00:30:18,690
and Ross especially the combination of

00:30:12,600 --> 00:30:22,140
both worked out really well for us yep

00:30:18,690 --> 00:30:25,470
so as excellent mentioned we developed

00:30:22,140 --> 00:30:30,759
certain rules for Russ Russ has its own

00:30:25,470 --> 00:30:34,480
ecosystem it comes with a bunch of tools

00:30:30,759 --> 00:30:36,039
a bunch of generators there are multiple

00:30:34,480 --> 00:30:38,259
versions of loss and they also have

00:30:36,039 --> 00:30:40,929
multiple built systems for us so they

00:30:38,259 --> 00:30:42,610
have was built then that catkin and no

00:30:40,929 --> 00:30:46,059
one was to they've even something new

00:30:42,610 --> 00:30:47,769
again so we figured out maybe it's also

00:30:46,059 --> 00:30:50,919
a good opportunity to bring basil into

00:30:47,769 --> 00:30:56,139
it since they are obviously quite open

00:30:50,919 --> 00:30:58,119
for new build systems so we developed

00:30:56,139 --> 00:31:00,940
roots for us as you seen on the

00:30:58,119 --> 00:31:03,009
architecture picture before there are

00:31:00,940 --> 00:31:05,830
certain notes what does a note a note is

00:31:03,009 --> 00:31:10,049
basically a system process they can

00:31:05,830 --> 00:31:17,409
either control sensors or actuators or

00:31:10,049 --> 00:31:20,379
there's some math calculations this note

00:31:17,409 --> 00:31:24,190
basically consumes we're through a roof

00:31:20,379 --> 00:31:27,070
for it it's a gross note rule it

00:31:24,190 --> 00:31:31,059
consumes a binary that have previously

00:31:27,070 --> 00:31:34,539
built is above CC binary or CC peyten it

00:31:31,059 --> 00:31:37,720
wraps it into a package for for the rust

00:31:34,539 --> 00:31:41,889
tooling generates some manifest files

00:31:37,720 --> 00:31:46,149
and prepares basically a workspace or a

00:31:41,889 --> 00:31:53,249
tree that can be consumed by the better

00:31:46,149 --> 00:31:56,350
rust tools we also have rules for

00:31:53,249 --> 00:31:58,929
generating messages so what is message

00:31:56,350 --> 00:32:00,970
how does the the rust notes communicate

00:31:58,929 --> 00:32:04,419
to each other wire messages is a wire

00:32:00,970 --> 00:32:08,100
IPC or network based messages if you

00:32:04,419 --> 00:32:10,359
have a distributed cluster of rust nodes

00:32:08,100 --> 00:32:12,909
messages are simple data structure so

00:32:10,359 --> 00:32:17,619
you can more or less compare to prove

00:32:12,909 --> 00:32:19,659
debuff actually this data the data

00:32:17,619 --> 00:32:23,169
structure of a message is described in a

00:32:19,659 --> 00:32:24,700
message for node or service file and

00:32:23,169 --> 00:32:26,619
we've removed for it to consumes all

00:32:24,700 --> 00:32:29,169
this message files runs the generators

00:32:26,619 --> 00:32:30,759
over them and creates a library that you

00:32:29,169 --> 00:32:34,320
can afterwards link to that's your

00:32:30,759 --> 00:32:34,320
binary for a roast node

00:32:36,860 --> 00:32:44,880
then to combine all the things together

00:32:41,040 --> 00:32:48,360
we have a rule that calls Ross launch it

00:32:44,880 --> 00:32:50,610
generates more or less the launch file a

00:32:48,360 --> 00:32:58,050
launch file is basically an input file

00:32:50,610 --> 00:33:01,020
again so that catkin knows exactly what

00:32:58,050 --> 00:33:05,540
kind of notes it needs to start it

00:33:01,020 --> 00:33:10,200
combines all the dependencies your

00:33:05,540 --> 00:33:11,940
launch target into a work into a tree

00:33:10,200 --> 00:33:16,200
which is afterwards available in your

00:33:11,940 --> 00:33:18,810
run files because although the rustling

00:33:16,200 --> 00:33:20,310
cat can make some assumptions on how

00:33:18,810 --> 00:33:22,140
your tree looks like you cannot simply

00:33:20,310 --> 00:33:23,820
say okay I want to start this this this

00:33:22,140 --> 00:33:26,370
this gives you individual paths and it

00:33:23,820 --> 00:33:28,560
starts it no it assumes that there is

00:33:26,370 --> 00:33:30,560
this structure available and then it

00:33:28,560 --> 00:33:33,690
follows the structure and tries to find

00:33:30,560 --> 00:33:38,130
in a smart way all the notes it should

00:33:33,690 --> 00:33:41,450
start so we have here the Ross launch

00:33:38,130 --> 00:33:44,790
target that you can afterwards also call

00:33:41,450 --> 00:33:52,250
with basil run or basil tests as we have

00:33:44,790 --> 00:33:54,960
seen any video before yeah so

00:33:52,250 --> 00:33:57,870
unfortunately we haven't managed yet to

00:33:54,960 --> 00:34:02,100
make the rules open source we are

00:33:57,870 --> 00:34:04,080
working on that we had our one target to

00:34:02,100 --> 00:34:08,310
make it open source until today we

00:34:04,080 --> 00:34:10,200
failed but we will continue working on

00:34:08,310 --> 00:34:12,660
it so we figured out that we have some

00:34:10,200 --> 00:34:15,060
certain Bream double infrastructure

00:34:12,660 --> 00:34:16,860
structure specific assumptions in these

00:34:15,060 --> 00:34:20,340
rules that we first need to sort out

00:34:16,860 --> 00:34:22,410
before we can make the rules open source

00:34:20,340 --> 00:34:27,840
they will be available on our github

00:34:22,410 --> 00:34:31,440
page and we would invite everyone to

00:34:27,840 --> 00:34:34,440
contribute here and also to exchange

00:34:31,440 --> 00:34:38,730
some ideas how we can improve rules for

00:34:34,440 --> 00:34:40,590
us yeah that brings us pretty much to

00:34:38,730 --> 00:34:43,460
the last point when can you buy the

00:34:40,590 --> 00:34:43,460
first basil car

00:34:43,620 --> 00:34:49,290
that will be in 2021 so not too far away

00:34:46,790 --> 00:34:53,040
then we will release the beam Babel

00:34:49,290 --> 00:34:54,990
Eurovision our next and also Alban WS

00:34:53,040 --> 00:34:57,150
which launched after that vehicle will

00:34:54,990 --> 00:34:58,770
have been built with Basel or at least

00:34:57,150 --> 00:35:02,310
their driver assistance system will have

00:34:58,770 --> 00:35:04,740
been built with Basel it's not just that

00:35:02,310 --> 00:35:06,300
though two chains are known to propagate

00:35:04,740 --> 00:35:08,670
a lot in our industry so my personal

00:35:06,300 --> 00:35:11,190
expectation is that in a couple of years

00:35:08,670 --> 00:35:13,860
other OEMs and suppliers will follow we

00:35:11,190 --> 00:35:18,690
already see that so there will be more

00:35:13,860 --> 00:35:21,240
Basel cars on the road soon that's it

00:35:18,690 --> 00:35:22,520
thanks for having us and we are looking

00:35:21,240 --> 00:35:22,880
forward for your questions

00:35:22,520 --> 00:35:26,149
[Music]

00:35:22,880 --> 00:35:26,149
[Applause]

00:35:28,270 --> 00:35:32,810
thanks XO and Patrick I am very much

00:35:31,730 --> 00:35:35,770
looking forward to writing in the first

00:35:32,810 --> 00:35:38,810
basil card it sounds great

00:35:35,770 --> 00:35:41,540
as per normal have questions up here in

00:35:38,810 --> 00:35:42,680
the middle give people a chance to to go

00:35:41,540 --> 00:35:44,630
from there

00:35:42,680 --> 00:35:46,850
why don't we start up top first this

00:35:44,630 --> 00:35:50,210
time and then we'll go from there we've

00:35:46,850 --> 00:35:54,130
got about less than 15 minutes 9 minutes

00:35:50,210 --> 00:35:56,900
for questions david national instruments

00:35:54,130 --> 00:35:59,180
you mentioned that you got five to six

00:35:56,900 --> 00:36:01,490
engineers to prototype this and kick it

00:35:59,180 --> 00:36:04,100
off how many are continuing maintenance

00:36:01,490 --> 00:36:08,510
on your basil paste work or not

00:36:04,100 --> 00:36:10,400
well we by now got several teams which

00:36:08,510 --> 00:36:12,230
more or less work in our release and CI

00:36:10,400 --> 00:36:13,880
pipelines and those people who have been

00:36:12,230 --> 00:36:17,360
in this initial basil team are now

00:36:13,880 --> 00:36:19,370
distributed across those teams so

00:36:17,360 --> 00:36:21,830
there's not a single basil team anymore

00:36:19,370 --> 00:36:24,440
as they used to be it's now different

00:36:21,830 --> 00:36:25,910
purposes teams but basically the

00:36:24,440 --> 00:36:27,650
knowledge spread is the people spread

00:36:25,910 --> 00:36:30,410
and how would you compare that to what

00:36:27,650 --> 00:36:32,720
you had before I mean how many people

00:36:30,410 --> 00:36:34,190
maintain the CI system before two versus

00:36:32,720 --> 00:36:36,590
like with C make and the other tools

00:36:34,190 --> 00:36:38,240
that you replaced it's kind of hard to

00:36:36,590 --> 00:36:40,130
tell in our case because it's not just

00:36:38,240 --> 00:36:45,620
the build system that grow but also the

00:36:40,130 --> 00:36:48,380
manpower in general say wow well I would

00:36:45,620 --> 00:36:50,240
say that they're two things who want one

00:36:48,380 --> 00:36:52,250
thing is we are still not completely

00:36:50,240 --> 00:36:54,710
done with it right so we still have a

00:36:52,250 --> 00:36:56,930
lot of things to tackle to stabilize to

00:36:54,710 --> 00:37:02,060
improve to speed up because although

00:36:56,930 --> 00:37:03,710
basil is evolving luckily we also need

00:37:02,060 --> 00:37:05,540
to keep up with newer versions of basil

00:37:03,710 --> 00:37:08,060
so that means we need now is still more

00:37:05,540 --> 00:37:09,830
people than we would need if we have a

00:37:08,060 --> 00:37:11,510
well-established tool chain that we just

00:37:09,830 --> 00:37:16,150
need to maintain and see that nothing

00:37:11,510 --> 00:37:19,370
breaks right so all in all we are still

00:37:16,150 --> 00:37:22,460
15 to 20 people with a strong focus on

00:37:19,370 --> 00:37:24,350
this basil environment yeah that sounds

00:37:22,460 --> 00:37:26,060
about right and I think also one thing

00:37:24,350 --> 00:37:27,650
that changed within our organization is

00:37:26,060 --> 00:37:29,540
that now the build tool is no longer

00:37:27,650 --> 00:37:32,180
seen as something as a must-have where

00:37:29,540 --> 00:37:35,000
you try to spend as few as possible on

00:37:32,180 --> 00:37:37,190
but rather is an advantage when it comes

00:37:35,000 --> 00:37:39,800
to development speed so by now we

00:37:37,190 --> 00:37:41,140
luckily do have pretty good chances if

00:37:39,800 --> 00:37:43,299
we ask for more manpower

00:37:41,140 --> 00:37:48,490
it comes to improving our build times

00:37:43,299 --> 00:37:50,829
thank you so hi dere I'm at Scouter and

00:37:48,490 --> 00:37:52,510
I'm the offer of Bill Barn huh I was

00:37:50,829 --> 00:37:56,710
wondering what do you guys dislike about

00:37:52,510 --> 00:37:57,819
bill borne most that actually pretty

00:37:56,710 --> 00:37:59,799
good question it would really like to

00:37:57,819 --> 00:38:03,400
get in contact with you so maybe we can

00:37:59,799 --> 00:38:05,349
meet later again just for now we like it

00:38:03,400 --> 00:38:06,819
a lot it's I mean there are different

00:38:05,349 --> 00:38:09,010
alternatives and this is the best one so

00:38:06,819 --> 00:38:11,079
we picked that one I think a current

00:38:09,010 --> 00:38:12,760
biggest issue I think the the monitor is

00:38:11,079 --> 00:38:18,119
not any work working anymore right after

00:38:12,760 --> 00:38:18,119
the basel 1.0 update the results monitor

00:38:20,010 --> 00:38:28,299
yeah yeah but please let's have a talk

00:38:23,529 --> 00:38:30,789
afterwards yeah hi I'm Michael I work at

00:38:28,299 --> 00:38:35,440
Tesla so we're obviously very interested

00:38:30,789 --> 00:38:37,410
in your work here I was hoping you could

00:38:35,440 --> 00:38:40,029
talk a little bit about how

00:38:37,410 --> 00:38:42,460
incrementality works with respect to

00:38:40,029 --> 00:38:44,950
your simulations because naively I would

00:38:42,460 --> 00:38:47,619
sort of expect any change anywhere in

00:38:44,950 --> 00:38:49,779
the system to invalidate the simulator

00:38:47,619 --> 00:38:50,490
which is maybe running everything as a

00:38:49,779 --> 00:38:52,660
black box

00:38:50,490 --> 00:38:55,119
so if you could talk about how that

00:38:52,660 --> 00:38:57,130
works and if caching has helped you at

00:38:55,119 --> 00:38:59,349
all for potentially long running

00:38:57,130 --> 00:39:01,390
simulator now you definitely had a pain

00:38:59,349 --> 00:39:02,890
point there I mean as you said the

00:39:01,390 --> 00:39:05,950
simulation what we call it the

00:39:02,890 --> 00:39:07,839
acceptance tests are supposed to test as

00:39:05,950 --> 00:39:10,240
much as possible of your software stack

00:39:07,839 --> 00:39:11,890
right so any potential change will just

00:39:10,240 --> 00:39:13,299
invalidate almost all of those previous

00:39:11,890 --> 00:39:17,650
test results and therefore your cash

00:39:13,299 --> 00:39:19,720
results that's why we those tests were

00:39:17,650 --> 00:39:22,000
the first one we put onto the remote

00:39:19,720 --> 00:39:24,009
execution side of things because they

00:39:22,000 --> 00:39:26,259
could not really be tackled with caching

00:39:24,009 --> 00:39:31,960
so much and that's why we used remote

00:39:26,259 --> 00:39:41,319
execution here Thanks yep another I mean

00:39:31,960 --> 00:39:43,240
mark from lift my question is yes I want

00:39:41,319 --> 00:39:45,339
to know how you maintain consistency

00:39:43,240 --> 00:39:47,410
consistency in your environments between

00:39:45,339 --> 00:39:50,289
like developer workstations your CI and

00:39:47,410 --> 00:39:55,060
like running on the car mm-hmm

00:39:50,289 --> 00:39:57,190
so before basil we had a ZK list

00:39:55,060 --> 00:39:59,230
Python packages and Debian packages

00:39:57,190 --> 00:40:02,470
which were then installed using the

00:39:59,230 --> 00:40:04,510
usual tools either on your CI as a

00:40:02,470 --> 00:40:06,460
docker container or on your local

00:40:04,510 --> 00:40:08,290
development machine but then you ran

00:40:06,460 --> 00:40:10,170
really often to those works of my

00:40:08,290 --> 00:40:12,910
machine but not on your machine issues

00:40:10,170 --> 00:40:14,500
what we do now is basically we still

00:40:12,910 --> 00:40:16,900
have those Debian packages and pip

00:40:14,500 --> 00:40:18,820
packages being installed but we're

00:40:16,900 --> 00:40:21,790
introducing them one by one and moving

00:40:18,820 --> 00:40:24,340
them to the Basel workspace we have only

00:40:21,790 --> 00:40:28,240
a few left so by now we got a pretty

00:40:24,340 --> 00:40:31,750
much nailed down and this gives you as

00:40:28,240 --> 00:40:35,230
much as consistency as we did not have

00:40:31,750 --> 00:40:36,910
before okay do you have like problems

00:40:35,230 --> 00:40:39,040
with say like one of those packages

00:40:36,910 --> 00:40:40,690
changing in workspace and then like your

00:40:39,040 --> 00:40:42,160
entire workspaces say invalidated then

00:40:40,690 --> 00:40:46,180
you have to redownload everything yeah

00:40:42,160 --> 00:40:47,820
for sure okay all right all right thanks

00:40:46,180 --> 00:40:51,430
yep

00:40:47,820 --> 00:40:53,320
Austin Chu blue river how have you guys

00:40:51,430 --> 00:40:59,140
dealt with tool chain qualification for

00:40:53,320 --> 00:41:00,640
ISO 26262 that's your typical sorry to

00:40:59,140 --> 00:41:03,160
attend qualification at Tilton

00:41:00,640 --> 00:41:05,380
qualification is part of ISO 266 - and

00:41:03,160 --> 00:41:07,090
Veysel becomes part of your tooling so

00:41:05,380 --> 00:41:11,320
ready to start to address it at some

00:41:07,090 --> 00:41:15,150
level correct exactly so so we we looked

00:41:11,320 --> 00:41:18,460
at it in 440 zero two six two six two

00:41:15,150 --> 00:41:21,280
basically we what you typically do is

00:41:18,460 --> 00:41:23,380
you analyze the impact of this tool to

00:41:21,280 --> 00:41:28,450
the overall outcome of it and how likely

00:41:23,380 --> 00:41:29,920
it will happen so we looked not only on

00:41:28,450 --> 00:41:32,470
a specific tool because that is what

00:41:29,920 --> 00:41:33,940
most people often do it it you look at a

00:41:32,470 --> 00:41:35,560
specific tool and how can this impact

00:41:33,940 --> 00:41:38,050
but we looked at the whole tool chain

00:41:35,560 --> 00:41:40,720
basically and how does this tool behave

00:41:38,050 --> 00:41:46,180
in the whole tool chain and back then we

00:41:40,720 --> 00:41:48,610
figured out that we certainly need not

00:41:46,180 --> 00:41:52,600
only to qualify available but also to to

00:41:48,610 --> 00:41:56,910
look into the whole tree and see what

00:41:52,600 --> 00:41:59,770
else could find problems caused by basil

00:41:56,910 --> 00:42:02,620
means we have certain mitigation tests

00:41:59,770 --> 00:42:07,320
all over the place in the end to just

00:42:02,620 --> 00:42:12,360
ensure that baseless orchestration

00:42:07,320 --> 00:42:17,310
and this still losing my micro no it's

00:42:12,360 --> 00:42:20,160
there again okay so it's it's a big

00:42:17,310 --> 00:42:21,600
effort to get it done because you need

00:42:20,160 --> 00:42:23,070
to know what you're doing still and you

00:42:21,600 --> 00:42:24,900
need to know what after what is

00:42:23,070 --> 00:42:27,300
happening with your artifacts that you

00:42:24,900 --> 00:42:29,280
can basically derive from that

00:42:27,300 --> 00:42:34,770
what kind of mitigations you have to put

00:42:29,280 --> 00:42:36,630
in place thank you hello my name is

00:42:34,770 --> 00:42:39,360
anthony i work in general atomics my

00:42:36,630 --> 00:42:44,850
team works on autonomous drones and in

00:42:39,360 --> 00:42:46,680
nga or in aerospace and and autonomous

00:42:44,850 --> 00:42:48,540
industries in general you have to make

00:42:46,680 --> 00:42:51,330
sure our code follows misra standards

00:42:48,540 --> 00:42:53,940
and I was wondering how did your team

00:42:51,330 --> 00:43:01,680
use basil to make sure you're seen C++

00:42:53,940 --> 00:43:05,730
code is Missal compliant oh yeah again

00:43:01,680 --> 00:43:07,980
one of our pain points of course so we

00:43:05,730 --> 00:43:09,660
have certain misra checkers and also

00:43:07,980 --> 00:43:12,330
code quality check a static code

00:43:09,660 --> 00:43:14,220
analysis all does all this in place but

00:43:12,330 --> 00:43:16,020
it's a bit tricky to get the inputs in

00:43:14,220 --> 00:43:21,560
the right format for your tools

00:43:16,020 --> 00:43:26,610
basically so how did we do that with

00:43:21,560 --> 00:43:30,210
basil basil offers various ways to

00:43:26,610 --> 00:43:32,040
extract or cruelly basically your fonts

00:43:30,210 --> 00:43:36,450
that you use for built and then you can

00:43:32,040 --> 00:43:40,170
set up some packages that it just feed

00:43:36,450 --> 00:43:43,050
outside the base of it into these code

00:43:40,170 --> 00:43:46,290
quality checkers so it's actually not

00:43:43,050 --> 00:43:51,750
triggered by basil itself but it's done

00:43:46,290 --> 00:43:51,990
outside i john field Google um I'm just

00:43:51,750 --> 00:43:54,270
curious

00:43:51,990 --> 00:43:57,090
apologies if you mentioned this do you

00:43:54,270 --> 00:43:58,980
use build barn for development bills as

00:43:57,090 --> 00:44:01,590
well as CI or just CI only it's

00:43:58,980 --> 00:44:05,120
currently only CI but we are planning to

00:44:01,590 --> 00:44:10,740
roll it out for developers also yeah

00:44:05,120 --> 00:44:12,450
thanks I'm from Europe so you mentioned

00:44:10,740 --> 00:44:14,430
you are making out the beautiful Matic

00:44:12,450 --> 00:44:17,180
like including also the party tendency

00:44:14,430 --> 00:44:19,590
and the final a lot of open source

00:44:17,180 --> 00:44:21,390
dependency or you have to peel the right

00:44:19,590 --> 00:44:23,310
eye

00:44:21,390 --> 00:44:25,140
manual root like many to write all the

00:44:23,310 --> 00:44:29,240
rules to build other open-source project

00:44:25,140 --> 00:44:29,240
or how you track at them dependencies

00:44:29,540 --> 00:44:35,910
for do you open source to assume you

00:44:33,750 --> 00:44:37,650
mean basically from from the packages

00:44:35,910 --> 00:44:40,980
for open sources like Debian files yeah

00:44:37,650 --> 00:44:44,940
your files or basically like what we

00:44:40,980 --> 00:44:46,260
have heard before that the workspace

00:44:44,940 --> 00:44:48,750
fast that you can inherit from other

00:44:46,260 --> 00:44:51,480
projects it's not just workspace like

00:44:48,750 --> 00:44:53,820
put an open CV or many other team that

00:44:51,480 --> 00:44:58,560
doesn't have existing video rule for

00:44:53,820 --> 00:45:01,500
them like how do you compile them and as

00:44:58,560 --> 00:45:03,570
part of that we verified several open

00:45:01,500 --> 00:45:05,250
source components as well luckily in our

00:45:03,570 --> 00:45:08,880
environment due to the fact that we have

00:45:05,250 --> 00:45:11,340
to build software for a safety car it's

00:45:08,880 --> 00:45:14,940
not that many so we either we consume

00:45:11,340 --> 00:45:19,380
them as a binary pre-built already like

00:45:14,940 --> 00:45:21,810
the platform wheels or wee-bey safai

00:45:19,380 --> 00:45:29,310
them and put them into our third party

00:45:21,810 --> 00:45:32,700
tree ok that's perfect right on time

00:45:29,310 --> 00:45:34,820
thanks so much axel and Patrick thank

00:45:32,700 --> 00:45:34,820

YouTube URL: https://www.youtube.com/watch?v=Gh4SJuYUoQI


