Title: BazelCon 2019 Day 1: Six learnings in moving to a Bazel-based CI system + Q&A
Publication date: 2020-01-09
Playlist: BazelCon 2019
Description: 
	Or Shachar, Wix event: Bazelcon 2019; re_ty: Publish; product: Open Source - General; fullname: Or Shachar;
Captions: 
	00:00:00,030 --> 00:00:05,339
so we've one more talk before we break

00:00:02,879 --> 00:00:06,870
for lunch that the last talk was super

00:00:05,339 --> 00:00:09,450
exciting I'm expecting the same from

00:00:06,870 --> 00:00:11,429
this one we've got or from which calm

00:00:09,450 --> 00:00:21,330
are going to give us a talk on moving

00:00:11,429 --> 00:00:25,710
the basil Bay CI system come on up or hi

00:00:21,330 --> 00:00:27,510
everyone yeah so with a show of hands

00:00:25,710 --> 00:00:30,150
who here is familiar with the experience

00:00:27,510 --> 00:00:31,650
of taking a long break because you're

00:00:30,150 --> 00:00:35,219
waiting for your bill to finish because

00:00:31,650 --> 00:00:38,280
the bill takes a lot of time yeah yeah

00:00:35,219 --> 00:00:39,750
we all have it right we all of those

00:00:38,280 --> 00:00:42,059
things that we do at the office while

00:00:39,750 --> 00:00:44,280
we're on pending one right taking a

00:00:42,059 --> 00:00:48,239
coffee break checking your email I

00:00:44,280 --> 00:00:49,829
personally call my mom and in many

00:00:48,239 --> 00:00:52,890
companies this is what developers do

00:00:49,829 --> 00:00:55,620
while waiting for the bill to happen so

00:00:52,890 --> 00:01:00,510
hello everyone or I'm back in

00:00:55,620 --> 00:01:02,460
engineering at wick CI Group I came here

00:01:00,510 --> 00:01:05,010
all the way from Tel Aviv I'm super

00:01:02,460 --> 00:01:06,540
excited to be here on stage and it's

00:01:05,010 --> 00:01:10,260
really I'm really happy to see how the

00:01:06,540 --> 00:01:13,619
community grows from year to year a

00:01:10,260 --> 00:01:15,420
little bit about myself I was fortunate

00:01:13,619 --> 00:01:17,520
to start my career working side-by-side

00:01:15,420 --> 00:01:21,030
with a classic build manager who taught

00:01:17,520 --> 00:01:23,640
me the joy of ant and make file since

00:01:21,030 --> 00:01:26,460
then I've built several maven ci5 lines

00:01:23,640 --> 00:01:29,430
again and again and then moved to doing

00:01:26,460 --> 00:01:31,880
some back in engineering three years ago

00:01:29,430 --> 00:01:34,439
I joined weeks and I was happy to

00:01:31,880 --> 00:01:37,770
combine my two passions doing back in

00:01:34,439 --> 00:01:39,860
engineer for the CI system at weeks we

00:01:37,770 --> 00:01:43,100
need to bring distributed back-end

00:01:39,860 --> 00:01:45,180
system into the CI domain because

00:01:43,100 --> 00:01:50,640
traditional tools did not work well with

00:01:45,180 --> 00:01:53,159
our site so we moved the backend build

00:01:50,640 --> 00:01:54,420
system from maven to basil and we're

00:01:53,159 --> 00:01:56,460
quite happy about it

00:01:54,420 --> 00:01:58,740
from long-running bill that made us wait

00:01:56,460 --> 00:02:00,990
and wait and wait and switch context and

00:01:58,740 --> 00:02:03,210
eventually failed to speedy build that

00:02:00,990 --> 00:02:05,420
just work and I'm here to talk with you

00:02:03,210 --> 00:02:08,099
about the process of getting there

00:02:05,420 --> 00:02:10,349
before we begin let's agree on a simple

00:02:08,099 --> 00:02:12,690
metaphor for a build system an assembly

00:02:10,349 --> 00:02:14,010
line the input is our code base and the

00:02:12,690 --> 00:02:16,200
build of Phoenicia

00:02:14,010 --> 00:02:18,390
the machinery is the is the build server

00:02:16,200 --> 00:02:20,340
and the build tool and output are the

00:02:18,390 --> 00:02:22,050
deployables and the feedback back to the

00:02:20,340 --> 00:02:23,970
developer it's quite simple to

00:02:22,050 --> 00:02:27,660
understand right we require the system

00:02:23,970 --> 00:02:29,520
to be fast reliable and efficient but

00:02:27,660 --> 00:02:32,220
let's look at weeks back and build

00:02:29,520 --> 00:02:33,840
system situation in 2017 we had about

00:02:32,220 --> 00:02:38,090
five millions lines of code

00:02:33,840 --> 00:02:42,780
mostly Scala over 1,000 git repositories

00:02:38,090 --> 00:02:45,510
about 150 developers for Bill - we use

00:02:42,780 --> 00:02:49,560
maven so snapshot dependencies between

00:02:45,510 --> 00:02:51,900
two thousand million modules and videos

00:02:49,560 --> 00:02:53,910
team CD for the build server so each

00:02:51,900 --> 00:02:55,740
maven baa jewel got its own team CD

00:02:53,910 --> 00:02:57,690
configuration which is the equivalent of

00:02:55,740 --> 00:03:00,180
Jenkins job

00:02:57,690 --> 00:03:03,720
we applied pessimistic lock so whenever

00:03:00,180 --> 00:03:06,090
a module was a building or broken any

00:03:03,720 --> 00:03:09,209
module that depend on it was actually

00:03:06,090 --> 00:03:11,400
blocked and we had a real big problem

00:03:09,209 --> 00:03:14,370
because this is this did not work well

00:03:11,400 --> 00:03:17,220
with our size many builds were broken

00:03:14,370 --> 00:03:19,530
breaking downstream builds in order to

00:03:17,220 --> 00:03:21,780
get my feedback I had to wait sometimes

00:03:19,530 --> 00:03:23,580
over an hour in order to get my

00:03:21,780 --> 00:03:26,400
deployable ready I had to wait many

00:03:23,580 --> 00:03:28,530
hours today and this is not exactly what

00:03:26,400 --> 00:03:31,590
the CI system should do right we're

00:03:28,530 --> 00:03:33,870
supposed to improve the diversity and

00:03:31,590 --> 00:03:36,930
those are just examples from messages we

00:03:33,870 --> 00:03:39,980
got on our CI slack channels frustrates

00:03:36,930 --> 00:03:42,660
the developers asking about their build

00:03:39,980 --> 00:03:45,780
CI was marked as one of the biggest

00:03:42,660 --> 00:03:48,090
bottlenecks in in releasing a new

00:03:45,780 --> 00:03:50,670
feature and we know that something must

00:03:48,090 --> 00:03:52,530
must be done we knew that we already

00:03:50,670 --> 00:03:55,410
exhausted any options to opt in I

00:03:52,530 --> 00:03:57,420
optimized within the system we had and

00:03:55,410 --> 00:04:00,630
we need to look for something new we

00:03:57,420 --> 00:04:03,150
consider moving to SBT to Gradle

00:04:00,630 --> 00:04:04,620
but given how Wix is growing from year

00:04:03,150 --> 00:04:06,900
to year we wanted something that would

00:04:04,620 --> 00:04:11,340
still work with 10 times 20 times more

00:04:06,900 --> 00:04:12,989
scale so a snap to the present 2019 we

00:04:11,340 --> 00:04:15,540
completely changed the machinery we

00:04:12,989 --> 00:04:19,140
completely changed as the AI system to

00:04:15,540 --> 00:04:21,720
work with basil we're very happy to say

00:04:19,140 --> 00:04:23,340
that our build are mostly stable in

00:04:21,720 --> 00:04:26,370
order to get my feedback I need to wait

00:04:23,340 --> 00:04:27,450
five to 10 minutes not more to get my

00:04:26,370 --> 00:04:29,580
deploy already

00:04:27,450 --> 00:04:32,100
fifteen to twenty five minutes in the

00:04:29,580 --> 00:04:33,900
next two months it's gonna be even half

00:04:32,100 --> 00:04:38,100
of it thanks to optimization that we're

00:04:33,900 --> 00:04:40,620
working on these days and and yeah we're

00:04:38,100 --> 00:04:43,440
quite happy about it we made a long way

00:04:40,620 --> 00:04:46,680
getting from this to that moving to

00:04:43,440 --> 00:04:50,280
Basel and we had a lot of failures along

00:04:46,680 --> 00:04:52,500
the way thanks Jeff for the talk and we

00:04:50,280 --> 00:04:54,210
had a lot of learnings along the way so

00:04:52,500 --> 00:04:56,400
I'm here to share with you six key

00:04:54,210 --> 00:05:00,150
learnings that might help you when

00:04:56,400 --> 00:05:04,350
you're migrating your system to Basel so

00:05:00,150 --> 00:05:07,710
let's begin number one is user migration

00:05:04,350 --> 00:05:09,450
tool if you wanna run basel on your code

00:05:07,710 --> 00:05:12,690
base you need to have some basil files

00:05:09,450 --> 00:05:14,550
right build files workspace file and you

00:05:12,690 --> 00:05:16,470
can write those manually let's

00:05:14,550 --> 00:05:19,020
understand what it means to write those

00:05:16,470 --> 00:05:21,810
manually let's take a maven repository a

00:05:19,020 --> 00:05:24,840
very simple maven repository two modules

00:05:21,810 --> 00:05:26,910
a core in the server some main code and

00:05:24,840 --> 00:05:28,950
some test code the first thing we want

00:05:26,910 --> 00:05:31,410
to do is to choose the bill granularity

00:05:28,950 --> 00:05:34,470
that is how many source files would be

00:05:31,410 --> 00:05:36,660
included in a single build unit you can

00:05:34,470 --> 00:05:39,180
go very coarse-grained like maven does

00:05:36,660 --> 00:05:41,430
so group together all of the main code

00:05:39,180 --> 00:05:43,710
in the test code you can go very

00:05:41,430 --> 00:05:45,900
fine-grained so a single build unit pair

00:05:43,710 --> 00:05:47,840
source file it's all a matter of how

00:05:45,900 --> 00:05:52,650
much you want to gain from parallel form

00:05:47,840 --> 00:05:54,900
basel parallel execution and cache at

00:05:52,650 --> 00:05:57,540
weeks we chose the one one one strategy

00:05:54,900 --> 00:06:00,270
so it's the mid-ground one target for

00:05:57,540 --> 00:06:04,430
one directory representing a single java

00:06:00,270 --> 00:06:06,810
package next we want to understand what

00:06:04,430 --> 00:06:09,420
basel rule does each build unit

00:06:06,810 --> 00:06:11,760
represent you have a library Java test

00:06:09,420 --> 00:06:14,400
maybe it's it's the image maybe it's the

00:06:11,760 --> 00:06:17,460
deployable that you want to get at the

00:06:14,400 --> 00:06:20,670
end and then you know we want to start

00:06:17,460 --> 00:06:22,320
working on the dependencies start with

00:06:20,670 --> 00:06:24,240
the interdependencies dependencies

00:06:22,320 --> 00:06:26,790
between the internal targets and

00:06:24,240 --> 00:06:31,440
external dependencies dependencies in

00:06:26,790 --> 00:06:33,750
this case on external maven binaries and

00:06:31,440 --> 00:06:35,400
look here we have dependencies on j-unit

00:06:33,750 --> 00:06:39,390
and jetty but

00:06:35,400 --> 00:06:41,279
Fuko depends on guava 20 and foo server

00:06:39,390 --> 00:06:43,529
depends on cocoa over 28

00:06:41,279 --> 00:06:44,759
and if you know about the jvm world you

00:06:43,529 --> 00:06:47,159
know that this is not a healthy

00:06:44,759 --> 00:06:49,379
situation because you can get failures

00:06:47,159 --> 00:06:52,139
during in production our in test run

00:06:49,379 --> 00:06:54,479
time so part of the migration for us was

00:06:52,139 --> 00:06:58,499
to align third party to all use the same

00:06:54,479 --> 00:07:00,269
version of the of each dependency so now

00:06:58,499 --> 00:07:01,709
that you know the dependency and the

00:07:00,269 --> 00:07:04,139
targets you're done you can start

00:07:01,709 --> 00:07:06,779
writing your workspace file in build

00:07:04,139 --> 00:07:09,209
files what we understood that week so

00:07:06,779 --> 00:07:10,889
this is not how a workspace looks like

00:07:09,209 --> 00:07:13,399
this is not how a cause it looks like

00:07:10,889 --> 00:07:18,539
it's more like this right

00:07:13,399 --> 00:07:21,989
this is so we actually wrote a tool that

00:07:18,539 --> 00:07:23,969
will do everything for us automatically

00:07:21,989 --> 00:07:27,539
in generates are in generate our build

00:07:23,969 --> 00:07:30,509
files in workspace file using some

00:07:27,539 --> 00:07:32,879
heuristics and code analysis tools it

00:07:30,509 --> 00:07:35,459
will generate the code graph reduce it

00:07:32,879 --> 00:07:37,049
to targets graph then we will deal with

00:07:35,459 --> 00:07:39,569
all the dependencies the third-party

00:07:37,049 --> 00:07:42,749
dependencies and write the Basel files

00:07:39,569 --> 00:07:44,579
the build files the workspace file I'm

00:07:42,749 --> 00:07:46,769
happy to say that this year we open

00:07:44,579 --> 00:07:48,539
sourced it under the name of Exodus so

00:07:46,769 --> 00:07:50,789
you are more than welcome to try it out

00:07:48,539 --> 00:07:53,610
let us know how it works for you and

00:07:50,789 --> 00:07:56,999
contribute make it work for other

00:07:53,610 --> 00:08:00,989
languages for other build tools we'll be

00:07:56,999 --> 00:08:02,969
very happy to help you out but it's a

00:08:00,989 --> 00:08:05,129
tool that works with heuristics and it

00:08:02,969 --> 00:08:08,339
doesn't really change your your source

00:08:05,129 --> 00:08:10,889
files so in a lot of cases the generated

00:08:08,339 --> 00:08:12,779
basil workspace would not pass basil

00:08:10,889 --> 00:08:16,049
build and basil test so you would still

00:08:12,779 --> 00:08:18,059
need to bring some experienced

00:08:16,049 --> 00:08:20,669
developers we call them the migration

00:08:18,059 --> 00:08:23,549
trustees to massage the migration result

00:08:20,669 --> 00:08:25,559
and make those steps pass it's not as

00:08:23,549 --> 00:08:27,839
hard work as writing the vase of the

00:08:25,559 --> 00:08:31,229
base of files from scratch but it does

00:08:27,839 --> 00:08:33,000
require some skills because sometimes

00:08:31,229 --> 00:08:36,240
you need to add missing dependencies

00:08:33,000 --> 00:08:37,469
that Exodus missed or you want to change

00:08:36,240 --> 00:08:39,870
the code maybe the code would not

00:08:37,469 --> 00:08:42,629
compile once you make all the code work

00:08:39,870 --> 00:08:44,219
with a single version of guava or you

00:08:42,629 --> 00:08:47,519
find out that you have tested try to

00:08:44,219 --> 00:08:50,279
explicitly read from source from fat

00:08:47,519 --> 00:08:53,250
that are only available during maven

00:08:50,279 --> 00:08:54,780
test run time like SRC test resources

00:08:53,250 --> 00:08:57,760
test the try

00:08:54,780 --> 00:08:59,980
to download stuff from the internet

00:08:57,760 --> 00:09:02,170
during test run time and you know that

00:08:59,980 --> 00:09:04,330
in Basel you run everything in hermetic

00:09:02,170 --> 00:09:06,280
way so there's no internet access during

00:09:04,330 --> 00:09:08,020
test run time and those are just

00:09:06,280 --> 00:09:11,200
examples we have a full page of

00:09:08,020 --> 00:09:12,880
troubleshooting exodus' results the rule

00:09:11,200 --> 00:09:14,770
of thumb is that the more technical

00:09:12,880 --> 00:09:17,530
depth your project have the more work

00:09:14,770 --> 00:09:20,020
the Basel trustees would have to do so

00:09:17,530 --> 00:09:21,910
let's look at the process again and even

00:09:20,020 --> 00:09:24,430
the migration trustees massage the

00:09:21,910 --> 00:09:26,890
result now we have Basel build and Basel

00:09:24,430 --> 00:09:28,900
test pass at weeks it wasn't enough for

00:09:26,890 --> 00:09:30,760
us we needed a way to make sure that we

00:09:28,900 --> 00:09:33,070
don't lose anything otherwise we didn't

00:09:30,760 --> 00:09:35,560
miss anything on the way in the way we

00:09:33,070 --> 00:09:38,050
chose to check it was to actually write

00:09:35,560 --> 00:09:40,810
a comparison script that scraped through

00:09:38,050 --> 00:09:43,060
the Maven test result and the basel test

00:09:40,810 --> 00:09:45,790
result and compare all the tests eases

00:09:43,060 --> 00:09:48,550
you must imagine how happy was the

00:09:45,790 --> 00:09:51,220
back-end developer that got the job to

00:09:48,550 --> 00:09:53,770
write this comparison script that

00:09:51,220 --> 00:09:57,610
compares a bunch of xml to a bunch of

00:09:53,770 --> 00:09:59,550
XML with a slightly different format but

00:09:57,610 --> 00:10:02,500
we did it

00:09:59,550 --> 00:10:04,960
so let's have a look at the final

00:10:02,500 --> 00:10:08,170
process the comparison script passed and

00:10:04,960 --> 00:10:09,940
then we consider the the repo as Basel

00:10:08,170 --> 00:10:13,120
validated we can start working with

00:10:09,940 --> 00:10:16,000
Basel in many cases we had to reiterate

00:10:13,120 --> 00:10:17,890
on the process so in order for exodus

00:10:16,000 --> 00:10:19,900
not to do the same mistakes again again

00:10:17,890 --> 00:10:22,630
we added override mechanisms so the

00:10:19,900 --> 00:10:24,250
migration trustees can hint exodus to do

00:10:22,630 --> 00:10:28,420
add some additional steps at the end of

00:10:24,250 --> 00:10:30,310
the automatic migration so I really I

00:10:28,420 --> 00:10:32,800
really think that if you can use the

00:10:30,310 --> 00:10:34,420
migration tool to generate your base of

00:10:32,800 --> 00:10:39,850
fact this can really boost your

00:10:34,420 --> 00:10:43,480
migration project number to measure your

00:10:39,850 --> 00:10:45,310
system it's kind of trivial but you need

00:10:43,480 --> 00:10:47,230
to remember that you're working on

00:10:45,310 --> 00:10:48,670
optimizing a system and you want to

00:10:47,230 --> 00:10:52,510
measure your current system you wanna

00:10:48,670 --> 00:10:54,550
measure the new one a story from 2017 we

00:10:52,510 --> 00:10:58,320
took weeks framework one of the larger

00:10:54,550 --> 00:11:01,450
gateway positives we had with over

00:10:58,320 --> 00:11:05,320
100,000 lines of code 200 million

00:11:01,450 --> 00:11:07,120
modules framework at weeks is basically

00:11:05,320 --> 00:11:07,830
a set of libraries and utilities that

00:11:07,120 --> 00:11:10,980
are you

00:11:07,830 --> 00:11:13,880
throughout all of our micro services and

00:11:10,980 --> 00:11:17,460
we migrated it with Exodus we got to

00:11:13,880 --> 00:11:20,670
2300 basil targets we were very happy to

00:11:17,460 --> 00:11:23,580
show that after running basil several

00:11:20,670 --> 00:11:26,370
times the average run of basil takes

00:11:23,580 --> 00:11:29,100
five minutes incremental build and

00:11:26,370 --> 00:11:30,810
together a correct build in maven to run

00:11:29,100 --> 00:11:33,240
maven from the top-level directory

00:11:30,810 --> 00:11:35,040
it took us 45 minutes stuff that's

00:11:33,240 --> 00:11:36,810
amazing right it's a it was a really

00:11:35,040 --> 00:11:39,630
good seller in the organization to say

00:11:36,810 --> 00:11:42,870
hey basil is amazing but the truth is

00:11:39,630 --> 00:11:45,779
that it's not a good enough way to

00:11:42,870 --> 00:11:48,839
measure the whole build system because

00:11:45,779 --> 00:11:50,760
in CI we didn't really in the Maven CI

00:11:48,839 --> 00:11:52,710
we didn't really run maven from the top

00:11:50,760 --> 00:11:55,290
level we did try to optimize and

00:11:52,710 --> 00:11:57,180
parallelism as much as we could and also

00:11:55,290 --> 00:11:59,820
for framework we didn't really have

00:11:57,180 --> 00:12:01,080
deployables and part of the what you

00:11:59,820 --> 00:12:03,990
wanted

00:12:01,080 --> 00:12:05,970
first of how we want to measure this di

00:12:03,990 --> 00:12:09,690
system is how much time it takes for

00:12:05,970 --> 00:12:12,330
deployable to be ready so in a hint side

00:12:09,690 --> 00:12:15,300
this is what we would have done to show

00:12:12,330 --> 00:12:17,880
improvement so for each artifact for

00:12:15,300 --> 00:12:19,800
each deployable and we and we check how

00:12:17,880 --> 00:12:22,200
much time it takes from a push to

00:12:19,800 --> 00:12:24,060
deployable and you want to check it fair

00:12:22,200 --> 00:12:25,500
commit because you can want to compare

00:12:24,060 --> 00:12:28,110
apples to apples you don't want to

00:12:25,500 --> 00:12:30,510
compare how much time it took to change

00:12:28,110 --> 00:12:32,430
in a root library that affects the whole

00:12:30,510 --> 00:12:34,980
build tree and a leaf library their

00:12:32,430 --> 00:12:37,110
effect on itself also you want to check

00:12:34,980 --> 00:12:39,330
the stability rate and I'll explain

00:12:37,110 --> 00:12:41,160
let's say that I'm working on a new

00:12:39,330 --> 00:12:43,890
feature on a super artifact I'm working

00:12:41,160 --> 00:12:45,900
locally and then I want to merge my

00:12:43,890 --> 00:12:48,870
changes to master and master is broken

00:12:45,900 --> 00:12:50,850
I'm basically blocked right I need to

00:12:48,870 --> 00:12:53,880
wait for master to be greens for someone

00:12:50,850 --> 00:12:57,390
to fixed my master before I can merge my

00:12:53,880 --> 00:12:59,070
change so given a month given a time

00:12:57,390 --> 00:13:01,320
frame you want to check how much of it

00:12:59,070 --> 00:13:05,430
your master was green and ready to be

00:13:01,320 --> 00:13:08,730
and ready to be changed we actually use

00:13:05,430 --> 00:13:11,040
the fact that basil was so fast and we

00:13:08,730 --> 00:13:13,230
used a remote cache to introduce the

00:13:11,040 --> 00:13:16,470
free check mechanism so we really

00:13:13,230 --> 00:13:18,690
improved on that metric alone so you can

00:13:16,470 --> 00:13:20,840
invest a lot of time and effort and your

00:13:18,690 --> 00:13:24,410
migration project make sure to invest

00:13:20,840 --> 00:13:27,530
sometime in measurement system that will

00:13:24,410 --> 00:13:29,810
measure the older CI Python in the new

00:13:27,530 --> 00:13:31,280
CI Python it will also benefit you for

00:13:29,810 --> 00:13:36,170
the future if you want to understand

00:13:31,280 --> 00:13:37,120
where you can improve number 3 local dev

00:13:36,170 --> 00:13:41,090
experience

00:13:37,120 --> 00:13:43,070
don't forget your users when we started

00:13:41,090 --> 00:13:46,100
the project we thought basil would be

00:13:43,070 --> 00:13:47,990
amazing for the CI system and when you

00:13:46,100 --> 00:13:50,870
run basil from command line it takes us

00:13:47,990 --> 00:13:53,000
5 minutes right not 45 minutes 5 minutes

00:13:50,870 --> 00:13:55,610
everything would be amazing developers

00:13:53,000 --> 00:13:58,160
will be happy but when we start to get

00:13:55,610 --> 00:14:00,350
more and more users we started to get a

00:13:58,160 --> 00:14:02,840
lot of rejects users that came to us

00:14:00,350 --> 00:14:06,530
super angry saying hey the experience

00:14:02,840 --> 00:14:08,570
with IntelliJ sucks I how do I handle

00:14:06,530 --> 00:14:11,990
all of those build files dependency

00:14:08,570 --> 00:14:14,000
management is so hard now and I get red

00:14:11,990 --> 00:14:16,670
codes and and then the code completion

00:14:14,000 --> 00:14:19,730
isn't correct and refactoring is

00:14:16,670 --> 00:14:21,560
basically impossible we also thought

00:14:19,730 --> 00:14:23,840
that all of the our developers we're

00:14:21,560 --> 00:14:26,480
gonna use the same the same remote cache

00:14:23,840 --> 00:14:29,720
we found out that and we're using a

00:14:26,480 --> 00:14:32,210
tweaks local local builds so we found

00:14:29,720 --> 00:14:34,760
out that with Mac OS it's not that easy

00:14:32,210 --> 00:14:37,670
you have to manage all of the tools the

00:14:34,760 --> 00:14:39,530
Xcode version the sealing version so we

00:14:37,670 --> 00:14:41,630
actually started the project with

00:14:39,530 --> 00:14:45,280
developers not using the same remote

00:14:41,630 --> 00:14:48,350
cache and they all had to build locally

00:14:45,280 --> 00:14:50,360
one team leader came to me and said well

00:14:48,350 --> 00:14:52,370
that's amazing that you made this di so

00:14:50,360 --> 00:14:55,250
fast but now it takes me three times

00:14:52,370 --> 00:14:57,020
four times as much to develop a feature

00:14:55,250 --> 00:15:01,670
locally so it didn't really improve on

00:14:57,020 --> 00:15:04,460
anything so eventually a good end to the

00:15:01,670 --> 00:15:06,890
story eventually and weeks we made sure

00:15:04,460 --> 00:15:10,130
that we'll do proper basil training for

00:15:06,890 --> 00:15:12,400
the whole R&D group we made sure that

00:15:10,130 --> 00:15:16,310
they were really on top of any IntelliJ

00:15:12,400 --> 00:15:20,210
issue and we reported anything to the

00:15:16,310 --> 00:15:22,070
basil IntelliJ repository and when it

00:15:20,210 --> 00:15:24,920
was possible we also contributed

00:15:22,070 --> 00:15:26,600
solutions ourselves and whenever we hit

00:15:24,920 --> 00:15:29,600
a wall we just developed solutions

00:15:26,600 --> 00:15:32,810
ourselves internal solutions today at

00:15:29,600 --> 00:15:34,590
weeks we have a whole team that is in

00:15:32,810 --> 00:15:36,990
charge for the local dev exterior

00:15:34,590 --> 00:15:39,060
with basil doing tooling alignment

00:15:36,990 --> 00:15:44,460
making sure that all of the verses can

00:15:39,060 --> 00:15:47,250
use dev cash safely and we wrote a set

00:15:44,460 --> 00:15:50,430
of enhancement and tooling to make the

00:15:47,250 --> 00:15:52,260
work inside IntelliJ with basil much

00:15:50,430 --> 00:15:55,440
better tomorrow there's gonna be a talk

00:15:52,260 --> 00:15:58,590
just about that by a Thai side man so I

00:15:55,440 --> 00:16:01,740
really recommend it to go I can say that

00:15:58,590 --> 00:16:04,980
today the the local sphere isn't perfect

00:16:01,740 --> 00:16:07,560
it's not fantastic but it is okay and it

00:16:04,980 --> 00:16:12,090
really worth the trade-off of moving to

00:16:07,560 --> 00:16:15,170
faster build on CI and locally so yeah

00:16:12,090 --> 00:16:19,170
number three think local dev experience

00:16:15,170 --> 00:16:23,480
number four introduced a new CI pipeline

00:16:19,170 --> 00:16:26,490
but keep the old one and I'll explain

00:16:23,480 --> 00:16:29,280
let's talk sixty seconds about how a

00:16:26,490 --> 00:16:32,420
push get how a change gets from the

00:16:29,280 --> 00:16:35,670
developer to production at weeks unlike

00:16:32,420 --> 00:16:39,060
other companies or some companies we

00:16:35,670 --> 00:16:42,330
don't have code drops or iterations and

00:16:39,060 --> 00:16:44,430
the the decision on when to deploy a

00:16:42,330 --> 00:16:47,310
change to production is solely on the

00:16:44,430 --> 00:16:49,890
developer the developer push code pushes

00:16:47,310 --> 00:16:51,750
code to get it will kick off the CI

00:16:49,890 --> 00:16:53,880
pipeline that will create an artifact

00:16:51,750 --> 00:16:56,640
and then a developer can go to our

00:16:53,880 --> 00:16:59,130
deployment back-office a system that we

00:16:56,640 --> 00:17:01,830
developed an industry I group and decide

00:16:59,130 --> 00:17:04,800
whether to stand a canary of this

00:17:01,830 --> 00:17:07,110
version or 2g air to put in all servers

00:17:04,800 --> 00:17:09,930
or to roll back to put the previous

00:17:07,110 --> 00:17:12,030
version so the speed of this process

00:17:09,930 --> 00:17:14,580
really depends on the speed of the this

00:17:12,030 --> 00:17:16,890
part right the CI pipeline and this part

00:17:14,580 --> 00:17:19,530
was bad for us this what this part was

00:17:16,890 --> 00:17:22,350
broken was slow we needed to replace

00:17:19,530 --> 00:17:25,110
that and we did we thought of okay let's

00:17:22,350 --> 00:17:28,290
do it a whole new process that is basil

00:17:25,110 --> 00:17:30,600
based it's gonna use basil remote cache

00:17:28,290 --> 00:17:33,630
and remote execution we're gonna protect

00:17:30,600 --> 00:17:35,550
master from being broken we will also

00:17:33,630 --> 00:17:38,670
have an automatic discovery of any

00:17:35,550 --> 00:17:41,250
deployable because unlike teamcity we

00:17:38,670 --> 00:17:44,160
didn't have one job here module we had

00:17:41,250 --> 00:17:46,860
one job here repo so we need to discover

00:17:44,160 --> 00:17:47,910
all deployables inside that repo we're

00:17:46,860 --> 00:17:51,630
gonna replace

00:17:47,910 --> 00:17:55,860
the build server to be cloud-based so no

00:17:51,630 --> 00:17:59,400
agent limited no build queue and we took

00:17:55,860 --> 00:18:02,370
this amazing pipeline and we placed it

00:17:59,400 --> 00:18:05,250
in parallel to the LTI pipeline so any

00:18:02,370 --> 00:18:07,559
change actually I triggered the both of

00:18:05,250 --> 00:18:10,140
the pipeline and created two separate

00:18:07,559 --> 00:18:11,970
artifact one that is basil based and one

00:18:10,140 --> 00:18:13,650
that is maven based and then the

00:18:11,970 --> 00:18:15,419
developer could go to our deployment

00:18:13,650 --> 00:18:18,150
back-office and with a click of a button

00:18:15,419 --> 00:18:20,820
change whether she wants to take the the

00:18:18,150 --> 00:18:23,220
deployable from basil or from maven she

00:18:20,820 --> 00:18:25,559
could just go back and this prove this

00:18:23,220 --> 00:18:28,320
have to been very good because the

00:18:25,559 --> 00:18:31,559
developer was confident to know that she

00:18:28,320 --> 00:18:33,720
can move whenever she's ready and if

00:18:31,559 --> 00:18:37,320
there was any any issue she could roll

00:18:33,720 --> 00:18:43,740
back and move back to maven and fix the

00:18:37,320 --> 00:18:47,400
basil build offline so I think so run

00:18:43,740 --> 00:18:51,919
parallel CI pipelines and and until

00:18:47,400 --> 00:18:51,919
you're ready to discard your old one

00:18:52,400 --> 00:19:00,630
moving on to number five now number five

00:18:57,659 --> 00:19:02,549
talks about optimizing your CI for speed

00:19:00,630 --> 00:19:05,400
and this is actually relevant for those

00:19:02,549 --> 00:19:10,620
of you who already moved to work with

00:19:05,400 --> 00:19:13,260
basil so we all know that basil is fast

00:19:10,620 --> 00:19:15,960
right but at weeks we wanted to make it

00:19:13,260 --> 00:19:16,850
faster we wanted to make it as fast as

00:19:15,960 --> 00:19:20,700
possible

00:19:16,850 --> 00:19:23,010
and when we started we said when we

00:19:20,700 --> 00:19:25,320
started the CI we said okay we're gonna

00:19:23,010 --> 00:19:27,150
use the basil remote cache remote

00:19:25,320 --> 00:19:31,220
execution and this would create an

00:19:27,150 --> 00:19:34,230
amazing CI build is gonna be super fast

00:19:31,220 --> 00:19:36,120
but then we started the system and we

00:19:34,230 --> 00:19:39,360
noticed that even for a fully cached

00:19:36,120 --> 00:19:41,789
build we had to wait five to ten at five

00:19:39,360 --> 00:19:44,669
to eight minutes and at this point we

00:19:41,789 --> 00:19:46,429
were devastated like we said okay what

00:19:44,669 --> 00:19:49,140
what are we going to do this is that we

00:19:46,429 --> 00:19:50,820
we wanted to show that basil is fast but

00:19:49,140 --> 00:19:52,620
five to ten minutes for a fully cache

00:19:50,820 --> 00:19:55,049
build this is not what we expected and

00:19:52,620 --> 00:19:56,640
the reason for that is very simple the

00:19:55,049 --> 00:19:59,549
reason for that is that we had a lot of

00:19:56,640 --> 00:20:00,510
third-party dependencies so every time

00:19:59,549 --> 00:20:02,250
you ran a deal

00:20:00,510 --> 00:20:04,890
nabil an ephemeral machine every time

00:20:02,250 --> 00:20:07,760
you ran a build it had to redownload all

00:20:04,890 --> 00:20:12,480
the Maven binaries and docker images

00:20:07,760 --> 00:20:15,780
when the solution for that is is simple

00:20:12,480 --> 00:20:18,090
we need to bring two directories that

00:20:15,780 --> 00:20:21,540
are pre-populated with the docker images

00:20:18,090 --> 00:20:25,340
and maven binaries the repository cache

00:20:21,540 --> 00:20:28,560
is a feature of basil the docker cache

00:20:25,340 --> 00:20:31,620
is a feature that weeks contributed to

00:20:28,560 --> 00:20:33,810
the open source of rules docker and

00:20:31,620 --> 00:20:36,210
container registry and once you have

00:20:33,810 --> 00:20:39,030
those folders ready well before you

00:20:36,210 --> 00:20:43,160
start running basil you can save the

00:20:39,030 --> 00:20:48,480
time on fetching those dependencies

00:20:43,160 --> 00:20:50,250
another thing is if you dig into basil

00:20:48,480 --> 00:20:54,570
documentation you'll find that you have

00:20:50,250 --> 00:20:58,650
many flags that you can that you can add

00:20:54,570 --> 00:21:00,450
to your build and save many minutes of

00:20:58,650 --> 00:21:03,000
your of your build for instance bills

00:21:00,450 --> 00:21:05,390
without divide since were building with

00:21:03,000 --> 00:21:08,780
remote execution we can save time on

00:21:05,390 --> 00:21:12,840
downloading intermediate results between

00:21:08,780 --> 00:21:15,660
actions or if you find that you spend a

00:21:12,840 --> 00:21:17,820
lot of time computing the digests of

00:21:15,660 --> 00:21:19,920
your input if you add a flag of multi

00:21:17,820 --> 00:21:24,090
thread digest this can save you some

00:21:19,920 --> 00:21:26,550
time on that point I think it was very

00:21:24,090 --> 00:21:29,670
beneficial for weeks to be a very active

00:21:26,550 --> 00:21:32,490
member of the community weeks is a

00:21:29,670 --> 00:21:35,370
common tenor of rural Scala we make sure

00:21:32,490 --> 00:21:38,690
that were very much on top of any issue

00:21:35,370 --> 00:21:41,130
any new feature that's about to happen

00:21:38,690 --> 00:21:43,140
whenever there's a new release candidate

00:21:41,130 --> 00:21:47,360
we make sure that we tested against all

00:21:43,140 --> 00:21:51,210
of our repositories I really think that

00:21:47,360 --> 00:21:54,000
if you're planning to go on to use the

00:21:51,210 --> 00:21:59,820
basil become a basil activist it can

00:21:54,000 --> 00:22:02,820
really work well for you so number 5 is

00:21:59,820 --> 00:22:07,710
optimized for speed we can into our last

00:22:02,820 --> 00:22:10,440
one number 6 talks about migrating a

00:22:07,710 --> 00:22:13,560
poly reto because migrating a single

00:22:10,440 --> 00:22:16,080
repo is a is one story but migrating

00:22:13,560 --> 00:22:18,860
it's a whole different story but it is

00:22:16,080 --> 00:22:22,050
possible and let me tell you that story

00:22:18,860 --> 00:22:26,130
when you read about basil use you know

00:22:22,050 --> 00:22:28,050
that it's really good to use basil with

00:22:26,130 --> 00:22:30,990
the mana repository right put all of

00:22:28,050 --> 00:22:33,210
your code in a single repository the

00:22:30,990 --> 00:22:36,180
developers can find everything and in a

00:22:33,210 --> 00:22:38,100
single place a single basil execution

00:22:36,180 --> 00:22:41,310
would test everything and see and then

00:22:38,100 --> 00:22:45,780
you can work with a single or very few

00:22:41,310 --> 00:22:47,550
CI jobs and we tried it out we try to

00:22:45,780 --> 00:22:49,800
put all of weeks back-end code and a

00:22:47,550 --> 00:22:53,220
single git repository and we got a hard

00:22:49,800 --> 00:22:56,700
rejects from get just running just

00:22:53,220 --> 00:23:01,740
running a git status on the repository

00:22:56,700 --> 00:23:03,750
took us 15 minutes so we know that it's

00:23:01,740 --> 00:23:05,850
possible we know the Twitter does it and

00:23:03,750 --> 00:23:07,710
Microsoft has a solution for this but

00:23:05,850 --> 00:23:09,870
when we started all of this was very

00:23:07,710 --> 00:23:11,640
much premature and I think until today

00:23:09,870 --> 00:23:14,400
correct me if I'm wrong but I think this

00:23:11,640 --> 00:23:18,750
today it's not possible to do it in

00:23:14,400 --> 00:23:21,960
github so we couldn't do that with git

00:23:18,750 --> 00:23:23,730
so we thought okay maybe we'll just move

00:23:21,960 --> 00:23:26,490
out of gate maybe we'll just do mono

00:23:23,730 --> 00:23:28,140
repo on a different solution but then we

00:23:26,490 --> 00:23:30,120
got the hard reject from a developer's

00:23:28,140 --> 00:23:34,170
saying hey you're changing too much did

00:23:30,120 --> 00:23:34,650
the experience with a new bill to the

00:23:34,170 --> 00:23:37,290
IDE

00:23:34,650 --> 00:23:39,330
you no way you're gonna change gate so

00:23:37,290 --> 00:23:42,780
really our only option was to continue

00:23:39,330 --> 00:23:45,840
working with a lot of repos with basil

00:23:42,780 --> 00:23:49,590
on git but of course we didn't want to

00:23:45,840 --> 00:23:51,390
have the 1,000 repository model we

00:23:49,590 --> 00:23:54,090
didn't want to have as much code as

00:23:51,390 --> 00:23:56,610
possible in a single repository to for a

00:23:54,090 --> 00:23:59,970
single based on invocation to test as

00:23:56,610 --> 00:24:02,790
much as possible so after some internal

00:23:59,970 --> 00:24:06,000
friendly debates we were many we managed

00:24:02,790 --> 00:24:07,890
to consolidate 1,000 repos to 50 repos

00:24:06,000 --> 00:24:12,570
debates on yeah I want to be with him

00:24:07,890 --> 00:24:16,170
now I want to be with her and we got to

00:24:12,570 --> 00:24:18,420
about 50 repositories and our goal was

00:24:16,170 --> 00:24:20,250
to work in a virtual mana repository

00:24:18,420 --> 00:24:23,250
mode not explain what it means

00:24:20,250 --> 00:24:25,190
I know if all of you know how to read

00:24:23,250 --> 00:24:27,499
basil targets I help you

00:24:25,190 --> 00:24:29,600
but this is a Java library that has two

00:24:27,499 --> 00:24:31,669
dependencies the first dependency is a

00:24:29,600 --> 00:24:34,820
local dependency it starts with slash

00:24:31,669 --> 00:24:37,850
slash and it means that it comes from

00:24:34,820 --> 00:24:40,789
the same repository the second is an

00:24:37,850 --> 00:24:43,190
external source dependency it starts

00:24:40,789 --> 00:24:44,779
with this add framework and this add

00:24:43,190 --> 00:24:48,080
framework name is defined in the

00:24:44,779 --> 00:24:51,139
workspace level see that this add friend

00:24:48,080 --> 00:24:54,289
defined in as a git repository with a

00:24:51,139 --> 00:24:55,850
get URL and a commit the idea of a

00:24:54,289 --> 00:24:59,570
virtual minoriko is to have this

00:24:55,850 --> 00:25:02,029
Committee move around automatically how

00:24:59,570 --> 00:25:05,149
we implemented it last year there was a

00:25:02,029 --> 00:25:08,539
talk again by Ty Seidman in Basel Conda

00:25:05,149 --> 00:25:11,330
talks about our implementation but in a

00:25:08,539 --> 00:25:13,519
nutshell we have a server called virtual

00:25:11,330 --> 00:25:15,830
mono repo server that magically knows

00:25:13,519 --> 00:25:18,049
all of weeks repository and the latest

00:25:15,830 --> 00:25:20,450
head commits we have a Basel wrapper

00:25:18,049 --> 00:25:22,940
that talks with this server and before

00:25:20,450 --> 00:25:25,999
the build begins generates an external

00:25:22,940 --> 00:25:29,269
repo bzl file and our workspace file

00:25:25,999 --> 00:25:31,999
just load those definition that's very

00:25:29,269 --> 00:25:37,490
simple to understand it's it's super

00:25:31,999 --> 00:25:39,440
simplified the our CI build generate

00:25:37,490 --> 00:25:40,850
this file with every build so every bill

00:25:39,440 --> 00:25:43,779
runs with the latest version of

00:25:40,850 --> 00:25:46,399
everything and the developers can

00:25:43,779 --> 00:25:51,799
regenerate this file manually or

00:25:46,399 --> 00:25:54,110
whenever they switch a branch so back to

00:25:51,799 --> 00:25:56,840
our story we didn't really have a single

00:25:54,110 --> 00:25:58,850
migration with Exodus we had over 50

00:25:56,840 --> 00:26:01,309
migration with Exodus and the other

00:25:58,850 --> 00:26:03,529
problem because like I described at the

00:26:01,309 --> 00:26:06,110
beginning part of the migration is to

00:26:03,529 --> 00:26:08,379
extract the external dependencies all

00:26:06,110 --> 00:26:11,539
those maven modules that are not part of

00:26:08,379 --> 00:26:13,879
the of the same repo and treat them as

00:26:11,539 --> 00:26:16,220
an external binary dependencies this

00:26:13,879 --> 00:26:19,100
includes common dependencies that you

00:26:16,220 --> 00:26:22,039
all know guava Commons J unit but also

00:26:19,100 --> 00:26:24,950
included internal libraries with

00:26:22,039 --> 00:26:28,999
snapshot dependencies so we had all of

00:26:24,950 --> 00:26:30,619
those labels that represent third party

00:26:28,999 --> 00:26:33,379
binary dependencies like Chrome Google

00:26:30,619 --> 00:26:36,200
guava but we also had all of those

00:26:33,379 --> 00:26:38,040
labels that represented we call them

00:26:36,200 --> 00:26:41,550
second party dependencies but

00:26:38,040 --> 00:26:44,190
it was the snapshot dependency and this

00:26:41,550 --> 00:26:47,160
this actually this was good because it

00:26:44,190 --> 00:26:48,720
allowed each repo to migrate without

00:26:47,160 --> 00:26:51,630
depending on the immigration of other

00:26:48,720 --> 00:26:53,460
repository and then to move to onboard

00:26:51,630 --> 00:26:55,830
the new CI

00:26:53,460 --> 00:27:00,000
pipeline gets faster build get faster

00:26:55,830 --> 00:27:03,030
feedback but the problem was that even

00:27:00,000 --> 00:27:05,490
if my repo already migrated to Veysel i

00:27:03,030 --> 00:27:08,220
had to keep my maven build green so

00:27:05,490 --> 00:27:12,030
external consumers can still consume my

00:27:08,220 --> 00:27:15,230
snapshot dependencies also the basil

00:27:12,030 --> 00:27:18,240
builds were depend on the maven build

00:27:15,230 --> 00:27:20,280
and every every build got a different

00:27:18,240 --> 00:27:22,170
set of sniper dependencies this is how

00:27:20,280 --> 00:27:26,940
its snapshot defense mechanism work with

00:27:22,170 --> 00:27:29,520
maven and locally since basil doesn't

00:27:26,940 --> 00:27:31,920
really know the concept of snapshot then

00:27:29,520 --> 00:27:33,630
I would download the snapshot the first

00:27:31,920 --> 00:27:36,140
time I would run my event and I would

00:27:33,630 --> 00:27:38,910
just continue using the same library

00:27:36,140 --> 00:27:41,550
forever until I would clean up those

00:27:38,910 --> 00:27:45,210
snapshot and forest basil to redownload

00:27:41,550 --> 00:27:47,670
the latest snapshot so we provided our

00:27:45,210 --> 00:27:49,890
developers a custom script that would

00:27:47,670 --> 00:27:51,780
clean all the snapshot and it created a

00:27:49,890 --> 00:27:53,430
lot of confusion it was really not a

00:27:51,780 --> 00:27:55,860
good situation to be in

00:27:53,430 --> 00:27:58,770
we had to wait until all repositories

00:27:55,860 --> 00:28:00,870
would go through the migration in

00:27:58,770 --> 00:28:03,750
isolation mode that is how we called it

00:28:00,870 --> 00:28:05,850
before we could start dealing with all

00:28:03,750 --> 00:28:07,410
with all of those snapshot dependencies

00:28:05,850 --> 00:28:09,720
we wanted to break the connection

00:28:07,410 --> 00:28:12,870
between our basil builds and our maven

00:28:09,720 --> 00:28:15,240
builds and this is basically what we

00:28:12,870 --> 00:28:17,990
wanted to happen one we wanted to take

00:28:15,240 --> 00:28:21,120
all of those second party labels that

00:28:17,990 --> 00:28:23,940
map to snapshot dependencies and change

00:28:21,120 --> 00:28:25,920
them to external source dependency so

00:28:23,940 --> 00:28:26,910
this add framework slash slash blah blah

00:28:25,920 --> 00:28:29,520
blah

00:28:26,910 --> 00:28:34,320
we call it moving from isolation mode to

00:28:29,520 --> 00:28:36,990
social mode 1 if solution is to do

00:28:34,320 --> 00:28:39,060
basically that to just go over all of

00:28:36,990 --> 00:28:40,740
the build files and change those labels

00:28:39,060 --> 00:28:43,980
according to the mapping that we already

00:28:40,740 --> 00:28:47,850
knew but the problem was that this was

00:28:43,980 --> 00:28:49,990
this involved touching a lot of build

00:28:47,850 --> 00:28:51,850
files for

00:28:49,990 --> 00:28:54,940
was very complex and if there was any

00:28:51,850 --> 00:28:58,720
issue with this at the at the end it was

00:28:54,940 --> 00:29:00,790
very hard to revert this right so

00:28:58,720 --> 00:29:04,360
eventually we came up with a clever

00:29:00,790 --> 00:29:06,220
solution we use the fact that this comb

00:29:04,360 --> 00:29:08,160
wigs framework is just a logical name

00:29:06,220 --> 00:29:11,350
that's defined on the workspace level

00:29:08,160 --> 00:29:13,870
and and we knew that we can map this

00:29:11,350 --> 00:29:15,880
name to an external binary rule that

00:29:13,870 --> 00:29:17,890
downloads the snapshot but we can also

00:29:15,880 --> 00:29:20,170
map it to a different rule and we wrote

00:29:17,890 --> 00:29:22,420
our own custom rule that does a very

00:29:20,170 --> 00:29:26,140
simple thing just exports those external

00:29:22,420 --> 00:29:28,240
source dependency so we can so we didn't

00:29:26,140 --> 00:29:31,150
have to change any build files it was

00:29:28,240 --> 00:29:33,429
only a matter of choosing what kind of

00:29:31,150 --> 00:29:38,650
rule we're gonna define in the workspace

00:29:33,429 --> 00:29:41,290
level and for each for each of the for

00:29:38,650 --> 00:29:43,510
each of the second party label we had

00:29:41,290 --> 00:29:45,730
this decision tree on whether the

00:29:43,510 --> 00:29:48,070
current repo is part of social mode the

00:29:45,730 --> 00:29:51,070
current repo is part of the virtual mono

00:29:48,070 --> 00:29:53,500
repo and whether this module comes from

00:29:51,070 --> 00:29:56,650
a different rifle that is part of social

00:29:53,500 --> 00:29:58,870
mode only if the answers for both of

00:29:56,650 --> 00:30:01,360
those questions were yes we loaded the

00:29:58,870 --> 00:30:04,860
external source dependency otherwise we

00:30:01,360 --> 00:30:09,480
kept using the snapshot dependency and

00:30:04,860 --> 00:30:12,300
then with a very small team like 3d

00:30:09,480 --> 00:30:17,170
developers that worked for three months

00:30:12,300 --> 00:30:19,990
we were able to on board with repo by

00:30:17,170 --> 00:30:23,460
report to the social mode to the virtual

00:30:19,990 --> 00:30:27,370
mono repo the process was quite

00:30:23,460 --> 00:30:28,840
transparent for our developers they

00:30:27,370 --> 00:30:32,500
didn't really understand that they are

00:30:28,840 --> 00:30:35,530
being part of a social mode the work

00:30:32,500 --> 00:30:38,380
included alignment the third party

00:30:35,530 --> 00:30:40,800
between all of week's repositories

00:30:38,380 --> 00:30:43,570
adding some runtime dependencies

00:30:40,800 --> 00:30:45,460
sometimes we may send us we found out

00:30:43,570 --> 00:30:50,410
that we needed to define some targets as

00:30:45,460 --> 00:30:54,220
test only but it was all final it was

00:30:50,410 --> 00:30:56,800
all a discrete set of issues that we

00:30:54,220 --> 00:31:00,250
were able to solve and eventually today

00:30:56,800 --> 00:31:02,830
all of week's repositories are part of

00:31:00,250 --> 00:31:03,370
the virtual mono repo so we don't have

00:31:02,830 --> 00:31:07,660
the

00:31:03,370 --> 00:31:11,790
on snapshot and this is basically the

00:31:07,660 --> 00:31:16,710
story of migrating weeks before the repo

00:31:11,790 --> 00:31:22,110
so I bet you all ask where are we now

00:31:16,710 --> 00:31:25,330
so I feel like we got to a safe haven

00:31:22,110 --> 00:31:26,890
after all of weeks repositories are part

00:31:25,330 --> 00:31:29,800
of social mode and we don't have

00:31:26,890 --> 00:31:33,070
dependencies on snapshot plus all of our

00:31:29,800 --> 00:31:34,840
deployables are now basil based all of

00:31:33,070 --> 00:31:39,960
the developers switch their deployables

00:31:34,840 --> 00:31:43,420
to be from basil we finally announced

00:31:39,960 --> 00:31:45,520
sunsetting the old CI pipeline so no

00:31:43,420 --> 00:31:47,800
more team city no more maven and we

00:31:45,520 --> 00:31:51,040
actually started deleting all the palm

00:31:47,800 --> 00:31:53,350
files all of the developers worked with

00:31:51,040 --> 00:31:55,809
basil and they're quite happy with with

00:31:53,350 --> 00:31:57,850
the build times we still have some work

00:31:55,809 --> 00:32:00,130
to do we can still make local

00:31:57,850 --> 00:32:03,160
development better we can still make the

00:32:00,130 --> 00:32:06,510
builds a lot faster we still need to

00:32:03,160 --> 00:32:09,070
work on the process on updating

00:32:06,510 --> 00:32:10,450
third-party dependencies updating our

00:32:09,070 --> 00:32:14,140
rule set

00:32:10,450 --> 00:32:16,960
but finally I feel like we're on a after

00:32:14,140 --> 00:32:18,790
steering through choppy water I feel

00:32:16,960 --> 00:32:21,429
like we're on a safe heaven and we can

00:32:18,790 --> 00:32:26,710
start walking through the golden castle

00:32:21,429 --> 00:32:28,690
of perfect build system so those were

00:32:26,710 --> 00:32:31,780
the six lessons that we learned that

00:32:28,690 --> 00:32:33,880
weeks from migrating to basil I really

00:32:31,780 --> 00:32:35,740
hope that some of this can be helpful

00:32:33,880 --> 00:32:39,480
for you too

00:32:35,740 --> 00:32:39,480
thank you very much

00:32:39,970 --> 00:32:45,110
[Music]

00:32:42,350 --> 00:32:46,700
thank you or thank you or that was great

00:32:45,110 --> 00:32:49,460
I really appreciate it

00:32:46,700 --> 00:32:51,950
questions for or let's line up the mic

00:32:49,460 --> 00:32:53,450
and the other mic thanks for making the

00:32:51,950 --> 00:32:56,240
flight all the way from Tel Aviv and

00:32:53,450 --> 00:32:59,090
everybody who flew in from around the

00:32:56,240 --> 00:33:02,150
globe so I think it's fantastic let's

00:32:59,090 --> 00:33:04,850
start down here hey I'm Rob Annabel I

00:33:02,150 --> 00:33:06,890
work for improbable in London I would

00:33:04,850 --> 00:33:08,330
like to hear about the measurement

00:33:06,890 --> 00:33:10,300
statistics that he was showing you're

00:33:08,330 --> 00:33:14,270
showing a dramatic increase in stability

00:33:10,300 --> 00:33:15,800
now we have the same statistic but it's

00:33:14,270 --> 00:33:17,270
very misleading because if you have any

00:33:15,800 --> 00:33:19,130
transitive dependency that is rarely

00:33:17,270 --> 00:33:22,130
built it always gets cached and it's

00:33:19,130 --> 00:33:23,900
like flaky behavior then only the

00:33:22,130 --> 00:33:25,730
top-level dependencies like the

00:33:23,900 --> 00:33:27,560
top-level targets will actually show you

00:33:25,730 --> 00:33:29,480
that these transitive dependencies are

00:33:27,560 --> 00:33:31,100
flaky I was wondering whether you have

00:33:29,480 --> 00:33:36,560
any thoughts on this or do you think all

00:33:31,100 --> 00:33:38,870
of this as well so it depends if you're

00:33:36,560 --> 00:33:41,200
talking about second party dependencies

00:33:38,870 --> 00:33:45,050
dependencies between the different repos

00:33:41,200 --> 00:33:47,840
or the third party for second party we

00:33:45,050 --> 00:33:49,460
also included a pre-check mechanism to

00:33:47,840 --> 00:33:52,790
check that you don't break other

00:33:49,460 --> 00:33:55,040
repositories what I mean specifically if

00:33:52,790 --> 00:33:56,990
you have a badly cache system your

00:33:55,040 --> 00:33:58,610
labrie are likely to rerun the exact

00:33:56,990 --> 00:34:00,050
same code multiple times and then you

00:33:58,610 --> 00:34:02,210
will have a statistic on the number of

00:34:00,050 --> 00:34:03,830
failing tests if you know don't change

00:34:02,210 --> 00:34:06,440
that code frequently you will hit the

00:34:03,830 --> 00:34:08,870
cache 95% of the time you will run this

00:34:06,440 --> 00:34:10,700
test once per month so you won't see

00:34:08,870 --> 00:34:11,900
that that code is actually only flaky

00:34:10,700 --> 00:34:14,240
Lee passing because as soon as you've a

00:34:11,900 --> 00:34:15,500
passing test you will never run the test

00:34:14,240 --> 00:34:16,910
again I was just wondering whether

00:34:15,500 --> 00:34:22,220
you've encountered that or thought about

00:34:16,910 --> 00:34:27,970
it not really the with regarding flaky

00:34:22,220 --> 00:34:30,950
tests we do run tests twice more if it

00:34:27,970 --> 00:34:32,810
fails and then we just declare it as

00:34:30,950 --> 00:34:35,690
flaky and we have a mechanism to deal

00:34:32,810 --> 00:34:38,450
with flaky tests but when the test is

00:34:35,690 --> 00:34:40,340
flaky but fast that's a different

00:34:38,450 --> 00:34:42,770
solution that I think it's part of the

00:34:40,340 --> 00:34:47,990
work that we still need to do in order

00:34:42,770 --> 00:34:51,500
to make the system better thanks from

00:34:47,990 --> 00:34:54,140
VMware do you have any pointers for the

00:34:51,500 --> 00:34:55,790
dev experience that you ran into and

00:34:54,140 --> 00:34:57,950
what are the things you learnt

00:34:55,790 --> 00:35:01,820
basically with IntelliJ and other stuff

00:34:57,950 --> 00:35:09,800
so so basically go to it assignments

00:35:01,820 --> 00:35:13,040
talk tomorrow but we what I mean we had

00:35:09,800 --> 00:35:15,350
issues with IntelliJ we had issues with

00:35:13,040 --> 00:35:19,070
adding new dependencies since we moved

00:35:15,350 --> 00:35:22,100
from maven granularity to fine-grained

00:35:19,070 --> 00:35:24,920
granularity then we had to deal with a

00:35:22,100 --> 00:35:29,120
lot more dependencies

00:35:24,920 --> 00:35:32,690
whenever someone extracted a class to a

00:35:29,120 --> 00:35:35,030
new folder even if it was inside the old

00:35:32,690 --> 00:35:36,650
maven modular directory they had to

00:35:35,030 --> 00:35:39,580
generate a build file and change

00:35:36,650 --> 00:35:44,810
dependencies all of this became very

00:35:39,580 --> 00:35:47,390
complex and and we had to add we had to

00:35:44,810 --> 00:35:49,790
create tooling for the developers to

00:35:47,390 --> 00:35:52,190
make it a lot easier and for the

00:35:49,790 --> 00:35:54,260
dependencies you had external tooling to

00:35:52,190 --> 00:36:00,020
make sure the versions are not getting

00:35:54,260 --> 00:36:02,420
into trouble yes thanks Heidelberg from

00:36:00,020 --> 00:36:05,030
Capital One you mentioned some of the

00:36:02,420 --> 00:36:06,710
benefits of the remote cache we've done

00:36:05,030 --> 00:36:08,210
some initial testing and seeing that

00:36:06,710 --> 00:36:09,680
there's kind of a network penalty

00:36:08,210 --> 00:36:11,210
especially for any infrastructure that's

00:36:09,680 --> 00:36:13,640
in the cloud can you talk about how you

00:36:11,210 --> 00:36:15,980
optimize for things that'll build

00:36:13,640 --> 00:36:19,790
quickly locally versus getting a remote

00:36:15,980 --> 00:36:26,210
cache hit it's a great question

00:36:19,790 --> 00:36:29,060
so for local developers we establish a

00:36:26,210 --> 00:36:31,940
cache that is only for developers since

00:36:29,060 --> 00:36:34,970
they were using a Mac and local builds

00:36:31,940 --> 00:36:36,770
and we found a way to segregate each

00:36:34,970 --> 00:36:38,360
group of developers according to the

00:36:36,770 --> 00:36:41,540
tooling the version of tooling that were

00:36:38,360 --> 00:36:44,180
using and also there we found that on

00:36:41,540 --> 00:36:45,910
some targets on some actions it doesn't

00:36:44,180 --> 00:36:49,130
really work well to work with the cache

00:36:45,910 --> 00:36:50,690
so we found a way to exclude those

00:36:49,130 --> 00:36:54,110
actions from the cache so they're

00:36:50,690 --> 00:36:58,550
they're built locally for steai builds

00:36:54,110 --> 00:37:01,090
we still use a cache for everything we

00:36:58,550 --> 00:37:04,190
need we need this cache because we also

00:37:01,090 --> 00:37:07,370
query this cache at the end of the build

00:37:04,190 --> 00:37:09,260
in order to extract our deployables in

00:37:07,370 --> 00:37:11,780
the remote cache for CI

00:37:09,260 --> 00:37:12,890
is that fairly local from a networking

00:37:11,780 --> 00:37:17,080
perspective

00:37:12,890 --> 00:37:17,080
yes it's very local thank you thank you

00:37:18,460 --> 00:37:24,470
hi or my name is kyle from linkedin so

00:37:21,770 --> 00:37:26,210
my question was about Lesson four on

00:37:24,470 --> 00:37:29,480
your slide where you had parallel CI

00:37:26,210 --> 00:37:32,630
pipelines was it possible for you to do

00:37:29,480 --> 00:37:35,090
binary comparisons of the outputs of the

00:37:32,630 --> 00:37:37,220
two CI pipelines in order to validate

00:37:35,090 --> 00:37:38,510
that basil was working correctly or were

00:37:37,220 --> 00:37:40,220
there just something about the nature of

00:37:38,510 --> 00:37:45,530
your deployable or the built artifact

00:37:40,220 --> 00:37:49,430
that didn't allow you to do that so we

00:37:45,530 --> 00:37:53,420
actually wrote a custom basil rule to

00:37:49,430 --> 00:37:56,870
generate the same deployable as as maven

00:37:53,420 --> 00:37:59,690
did we had a custom assembly ruling for

00:37:56,870 --> 00:38:02,750
maven and we had to write a custom maven

00:37:59,690 --> 00:38:05,300
rule for for basil but it still did it

00:38:02,750 --> 00:38:07,160
didn't generate exactly the same binary

00:38:05,300 --> 00:38:10,400
it was it in a different structure with

00:38:07,160 --> 00:38:12,980
more jars because it's more fine-grain

00:38:10,400 --> 00:38:16,520
but there were cases that we did need to

00:38:12,980 --> 00:38:18,380
compare in a class level so we extracted

00:38:16,520 --> 00:38:20,740
all the jars inside and we made sure

00:38:18,380 --> 00:38:26,390
that all the class levels are the same

00:38:20,740 --> 00:38:29,080
thank you i Kyle cordis okay so at the

00:38:26,390 --> 00:38:30,920
beginning priority or change as new

00:38:29,080 --> 00:38:32,900
developers would have been on-boarded

00:38:30,920 --> 00:38:34,250
you know Java developers what you know

00:38:32,900 --> 00:38:36,110
ninety percent plus are gonna be

00:38:34,250 --> 00:38:38,120
familiar with maven on their first day

00:38:36,110 --> 00:38:40,250
you know from their previous work you

00:38:38,120 --> 00:38:42,440
know right now if you hire random Java

00:38:40,250 --> 00:38:44,780
developers very few are familiar with

00:38:42,440 --> 00:38:48,050
basil how is your onboarding going for

00:38:44,780 --> 00:38:51,410
new developers post this change amazing

00:38:48,050 --> 00:38:54,260
question so at weeks we have a process

00:38:51,410 --> 00:38:56,600
we call it nothing to prod it's

00:38:54,260 --> 00:38:59,930
basically the commentation of how to

00:38:56,600 --> 00:39:04,310
write your own first service from

00:38:59,930 --> 00:39:08,210
scratch and and how do you work with the

00:39:04,310 --> 00:39:12,620
CI system and we completely change this

00:39:08,210 --> 00:39:15,500
process in order to support basil

00:39:12,620 --> 00:39:17,540
development and entity for the new for a

00:39:15,500 --> 00:39:22,100
new developer to understand how it's

00:39:17,540 --> 00:39:23,150
like to work with basil it's not perfect

00:39:22,100 --> 00:39:26,210
but

00:39:23,150 --> 00:39:27,950
it's a lot better than then when we just

00:39:26,210 --> 00:39:30,250
moved to Basel we just moved rather we

00:39:27,950 --> 00:39:33,230
just didn't think about this this guide

00:39:30,250 --> 00:39:36,070
and now I think this guide can be

00:39:33,230 --> 00:39:39,230
improved but I think it really helps us

00:39:36,070 --> 00:39:41,000
I think one challenge that we have in

00:39:39,230 --> 00:39:43,550
the Basel communities that we don't have

00:39:41,000 --> 00:39:45,830
a lot of information in the internet

00:39:43,550 --> 00:39:48,500
about Basel so we really have to

00:39:45,830 --> 00:39:51,910
introduce a lot of internal information

00:39:48,500 --> 00:39:55,640
we have our own private Stack Overflow

00:39:51,910 --> 00:39:57,800
with tons of questions about how to use

00:39:55,640 --> 00:40:00,970
basil and how to use basil with IntelliJ

00:39:57,800 --> 00:40:06,790
and how to understand the builds on CI

00:40:00,970 --> 00:40:12,290
and this is how we support it alright

00:40:06,790 --> 00:40:14,090
our questions anything more for well

00:40:12,290 --> 00:40:15,320
this is fantastic as a great talk I

00:40:14,090 --> 00:40:16,910
really liked it I loved your slides

00:40:15,320 --> 00:40:21,070
let's have a big hand around the

00:40:16,910 --> 00:40:21,070

YouTube URL: https://www.youtube.com/watch?v=BYg3fDFrTz8


