Title: Volker Krause - KDE Frameworks on Android - Akademy 2019
Publication date: 2020-05-25
Playlist: Akademy 2019
Description: 
	Targeting Android as a platform is attractive for our applications, both as a intermediate proving ground for Plasma Mobile, and due to the large market share. For new Kirigami-based applications that is a fairly straightforward process thanks to the portability of Qt. There is however also lots of valuable code predating mobile UI considerations, and functional gaps in Qt, which is where KDE Frameworks can help. What do we have already, what still needs to be done, and how can we do it?
Captions: 
	00:00:04,790 --> 00:00:15,000
yeah hello again for the last time at

00:00:09,090 --> 00:00:17,810
least yeah if you have seen I guess talk

00:00:15,000 --> 00:00:21,150
earlier today you have seen that there's

00:00:17,810 --> 00:00:25,050
probably a few things we need to look

00:00:21,150 --> 00:00:27,420
into and talk about regarding our

00:00:25,050 --> 00:00:33,899
libraries and our frameworks on Android

00:00:27,420 --> 00:00:39,030
and this is what this is about why do we

00:00:33,899 --> 00:00:42,930
care about Android you can basically for

00:00:39,030 --> 00:00:44,910
one list all the the arguments that have

00:00:42,930 --> 00:00:48,680
been listed for Katie on Windows right

00:00:44,910 --> 00:00:52,190
it has a huge deployment pace it is in

00:00:48,680 --> 00:00:54,570
somewhat alien somewhat hostile platform

00:00:52,190 --> 00:01:01,850
but if you really want to reach and

00:00:54,570 --> 00:01:05,570
users there's not really a way around it

00:01:01,850 --> 00:01:11,880
and then another reason to look at and

00:01:05,570 --> 00:01:16,890
edit Android is not only the this evil

00:01:11,880 --> 00:01:18,000
Google platform but there is variants

00:01:16,890 --> 00:01:20,850
like line at us

00:01:18,000 --> 00:01:23,580
that are basically Android result all

00:01:20,850 --> 00:01:27,330
the Google stuff so that is probably the

00:01:23,580 --> 00:01:30,450
closest thing to a real-world usable

00:01:27,330 --> 00:01:33,299
mobile phone platform that is close to

00:01:30,450 --> 00:01:36,979
what we would like to see from a privacy

00:01:33,299 --> 00:01:39,030
point of view and then of course

00:01:36,979 --> 00:01:42,090
longer-term looking towards plasma

00:01:39,030 --> 00:01:45,149
mobile it's a nice proving ground that

00:01:42,090 --> 00:01:47,070
is that exists today in which we can do

00:01:45,149 --> 00:01:51,329
application development and test our

00:01:47,070 --> 00:01:54,000
frameworks for mobile readiness before

00:01:51,329 --> 00:01:56,250
we actually have I mean some of us do

00:01:54,000 --> 00:02:02,040
but not all of us have actual working

00:01:56,250 --> 00:02:05,400
class for mobile phones and why do we

00:02:02,040 --> 00:02:08,170
need frameworks on on Android

00:02:05,400 --> 00:02:09,940
well we have stuff like kirigami as you

00:02:08,170 --> 00:02:12,720
saw earlier today from Ikea that's a

00:02:09,940 --> 00:02:19,410
great tool to actually build

00:02:12,720 --> 00:02:23,500
touch-friendly mobile interfaces and

00:02:19,410 --> 00:02:25,270
another reason is the platform

00:02:23,500 --> 00:02:28,780
abstraction API is in cute

00:02:25,270 --> 00:02:32,860
don't cover everything we need one

00:02:28,780 --> 00:02:34,080
prominent example as notifications you

00:02:32,860 --> 00:02:36,820
don't really want to have

00:02:34,080 --> 00:02:38,980
platform-specific code for that in your

00:02:36,820 --> 00:02:42,190
application right that's why you use the

00:02:38,980 --> 00:02:47,770
frameworks for and key frameworks have a

00:02:42,190 --> 00:02:52,750
bit broader API coverage there thank you

00:02:47,770 --> 00:02:57,550
to us and then thirdly we have a lot of

00:02:52,750 --> 00:03:00,130
existing application code and it is much

00:02:57,550 --> 00:03:05,160
easier to reuse that and bring it to

00:03:00,130 --> 00:03:05,160
mobile if we can use the same frameworks

00:03:07,710 --> 00:03:19,150
so android is basically Linux right so

00:03:11,020 --> 00:03:21,310
this should be easy no there is quite

00:03:19,150 --> 00:03:24,880
some restrictions that we under it one

00:03:21,310 --> 00:03:29,190
time puts on us like the very strict

00:03:24,880 --> 00:03:29,190
sandboxing and bundling of applications

00:03:31,680 --> 00:03:41,190
and some additional restrictions to do

00:03:37,930 --> 00:03:43,660
to be how cute on Android works so the

00:03:41,190 --> 00:03:46,360
the restriction to single process is

00:03:43,660 --> 00:03:48,040
actually mostly coming from cute while

00:03:46,360 --> 00:03:50,260
all the sandboxing restrictions are

00:03:48,040 --> 00:03:54,640
coming from android so you can't just

00:03:50,260 --> 00:03:57,100
randomly access files in the system can

00:03:54,640 --> 00:03:59,739
only see the stuff in your bundle so

00:03:57,100 --> 00:04:01,750
there's also no IPC no d-bus right all

00:03:59,739 --> 00:04:04,600
right there's Android specific receiver

00:04:01,750 --> 00:04:09,660
there's no that's not our IPC like give

00:04:04,600 --> 00:04:13,600
us we can't just install platform stuff

00:04:09,660 --> 00:04:16,269
like we like to do on on linux the

00:04:13,600 --> 00:04:17,840
platform api we have to work with is in

00:04:16,269 --> 00:04:22,040
java

00:04:17,840 --> 00:04:25,190
which is fairly I mean it can be

00:04:22,040 --> 00:04:29,960
integrated with C++ but that is a fairly

00:04:25,190 --> 00:04:31,790
cumbersome process then in kid Richards

00:04:29,960 --> 00:04:36,080
work there but you don't really want

00:04:31,790 --> 00:04:37,700
them there and the window management is

00:04:36,080 --> 00:04:39,520
completely different right you basically

00:04:37,700 --> 00:04:42,080
work with full screen applications and

00:04:39,520 --> 00:04:46,010
the platform is very restrictive

00:04:42,080 --> 00:04:48,380
regarding how you can control what kind

00:04:46,010 --> 00:04:50,840
of window should be in the in the front

00:04:48,380 --> 00:04:53,260
so anything we have that makes

00:04:50,840 --> 00:04:55,610
assumptions about windowing or

00:04:53,260 --> 00:05:01,100
influencing the window management it's

00:04:55,610 --> 00:05:05,830
also not applicable there so what is the

00:05:01,100 --> 00:05:08,750
current status regarding our frameworks

00:05:05,830 --> 00:05:11,570
so many of the functional tr1

00:05:08,750 --> 00:05:15,130
frameworks that don't really rely on

00:05:11,570 --> 00:05:19,510
platform specific stuff they just work

00:05:15,130 --> 00:05:23,360
so that stuff like a archive config

00:05:19,510 --> 00:05:27,260
holidays translations codecs that kind

00:05:23,360 --> 00:05:28,760
of stuff right and then we have some

00:05:27,260 --> 00:05:32,480
that actually have platform-specific

00:05:28,760 --> 00:05:36,020
code platform specific adoptions like

00:05:32,480 --> 00:05:39,140
kirigami that integrates with the system

00:05:36,020 --> 00:05:41,210
back button and that kind of stuff okay

00:05:39,140 --> 00:05:46,580
notification which has an actual Android

00:05:41,210 --> 00:05:49,880
notification back-end so this is those

00:05:46,580 --> 00:05:54,919
are basically good to go then we have

00:05:49,880 --> 00:05:58,340
some that that would make sense because

00:05:54,919 --> 00:06:02,540
the the feature is applicable to to

00:05:58,340 --> 00:06:04,370
Android devices but where we are either

00:06:02,540 --> 00:06:08,710
missing a back-end implementation for

00:06:04,370 --> 00:06:11,650
that platform or where the current

00:06:08,710 --> 00:06:14,330
structure of that module pulls in

00:06:11,650 --> 00:06:17,570
dependencies that don't exist there or

00:06:14,330 --> 00:06:21,110
that pulley an architecture that doesn't

00:06:17,570 --> 00:06:24,919
exist or is not applicable to Android so

00:06:21,110 --> 00:06:28,130
the the first set here I specifically

00:06:24,919 --> 00:06:30,370
added the DNS one for Phi K after this

00:06:28,130 --> 00:06:33,080
morning

00:06:30,370 --> 00:06:35,260
those basically they map very well to

00:06:33,080 --> 00:06:41,150
existing concepts but we need a back-end

00:06:35,260 --> 00:06:47,060
implementation the second set especially

00:06:41,150 --> 00:06:51,440
kao and declarative they need to be

00:06:47,060 --> 00:06:54,440
probably a bit more there we need some

00:06:51,440 --> 00:06:56,870
more invasive changes and can maybe only

00:06:54,440 --> 00:07:01,390
support a subset of the features like a

00:06:56,870 --> 00:07:06,680
or install some some platform services

00:07:01,390 --> 00:07:16,210
that is likely not applicable to

00:07:06,680 --> 00:07:16,210
language and then we have the second set

00:07:16,390 --> 00:07:22,270
there is a large amount of frameworks

00:07:18,530 --> 00:07:24,530
that are very rigid specific and that

00:07:22,270 --> 00:07:26,510
are more or less designed for

00:07:24,530 --> 00:07:32,420
large-scale desktop application like XML

00:07:26,510 --> 00:07:36,290
GUI most of them actually compile fine

00:07:32,420 --> 00:07:38,870
and well kind of work in to the extent

00:07:36,290 --> 00:07:43,400
they can work and those are actually

00:07:38,870 --> 00:07:46,340
useful to have you don't want to use

00:07:43,400 --> 00:07:49,430
them for new applications but if you

00:07:46,340 --> 00:07:53,090
look for example at the port of ocular

00:07:49,430 --> 00:07:57,560
to Android that's still depending on a

00:07:53,090 --> 00:08:00,620
lot of those frameworks up there it's

00:07:57,560 --> 00:08:03,470
not actively using them but it's those

00:08:00,620 --> 00:08:05,900
they haven't been entirely separated out

00:08:03,470 --> 00:08:11,330
of the attack or ocula so having them

00:08:05,900 --> 00:08:13,880
available is enabling ocular to be on

00:08:11,330 --> 00:08:16,220
Android already without a major

00:08:13,880 --> 00:08:17,900
refactoring in their code base so I see

00:08:16,220 --> 00:08:23,710
those kind of supporting aids of

00:08:17,900 --> 00:08:27,010
existing application code to to Android

00:08:23,710 --> 00:08:29,510
then we have a set of frameworks that

00:08:27,010 --> 00:08:32,300
basically make absolutely no sense at

00:08:29,510 --> 00:08:37,070
all because they refer to concepts

00:08:32,300 --> 00:08:38,460
technologies or things that that simply

00:08:37,070 --> 00:08:42,120
don't exist

00:08:38,460 --> 00:08:44,430
so this is kiba's Ellen's for example

00:08:42,120 --> 00:08:47,670
because there's no Givens covalent

00:08:44,430 --> 00:08:51,350
because there is no valent global

00:08:47,670 --> 00:08:57,360
accelerators because there's no keyboard

00:08:51,350 --> 00:08:58,980
then chaos and the que de su because

00:08:57,360 --> 00:09:00,810
there is no concept of a superuser

00:08:58,980 --> 00:09:03,149
right so you can't get elevated

00:09:00,810 --> 00:09:05,089
privileges so the entire infrastructure

00:09:03,149 --> 00:09:07,830
for that makes no sense

00:09:05,089 --> 00:09:12,320
kdd that would require a system service

00:09:07,830 --> 00:09:15,000
we don't have that notification

00:09:12,320 --> 00:09:19,700
configuration UI that is part of the

00:09:15,000 --> 00:09:24,080
platform so we don't need that and so on

00:09:19,700 --> 00:09:26,190
and then we have the third set there

00:09:24,080 --> 00:09:29,850
those are the frameworks but I'm not

00:09:26,190 --> 00:09:34,170
entirely sure yet you know what we want

00:09:29,850 --> 00:09:37,200
to do with them purpose is probably the

00:09:34,170 --> 00:09:41,160
most interesting thing because Android

00:09:37,200 --> 00:09:46,290
has a very extensive concept of intents

00:09:41,160 --> 00:09:47,730
which is very similar to purpose but

00:09:46,290 --> 00:09:49,620
purpose is also kind of the

00:09:47,730 --> 00:09:53,520
implementation of an intent system not

00:09:49,620 --> 00:09:55,650
just the abstraction of it and wallet is

00:09:53,520 --> 00:09:58,080
a similar case right so it's the

00:09:55,650 --> 00:09:59,940
abstraction API for secure password

00:09:58,080 --> 00:10:01,620
storage but at the same time it is the

00:09:59,940 --> 00:10:05,370
implementation of a secure password

00:10:01,620 --> 00:10:10,380
storage service so those might need some

00:10:05,370 --> 00:10:12,600
some more separation and I think that is

00:10:10,380 --> 00:10:18,410
already one of the major challenges we

00:10:12,600 --> 00:10:18,410
have with best frameworks they often mix

00:10:18,770 --> 00:10:25,020
the platform abstraction api and the

00:10:22,740 --> 00:10:27,360
actual platform implementation because

00:10:25,020 --> 00:10:30,390
on linux we need to do the platform

00:10:27,360 --> 00:10:34,440
implementation and then we have an API

00:10:30,390 --> 00:10:38,820
on top right but on some of the other

00:10:34,440 --> 00:10:41,550
platforms we might just need the

00:10:38,820 --> 00:10:48,560
abstraction and then a platform specific

00:10:41,550 --> 00:10:48,560
package another common problem is the

00:10:50,070 --> 00:10:58,220
the mix of core functionality or some

00:10:54,810 --> 00:11:01,500
kind of logic with UI error handling

00:10:58,220 --> 00:11:04,020
specifically based on Q message box so

00:11:01,500 --> 00:11:06,120
widget based error handling that is

00:11:04,020 --> 00:11:09,600
something we haven't been doing in a new

00:11:06,120 --> 00:11:13,470
API since quite a while but in the older

00:11:09,600 --> 00:11:16,170
stuff that still exists and that then

00:11:13,470 --> 00:11:18,960
pulls in widget dependencies for example

00:11:16,170 --> 00:11:22,760
I mean I could show this morning that

00:11:18,960 --> 00:11:26,670
our stack is comparatively lightweight

00:11:22,760 --> 00:11:29,580
and I looked at that in in kdi January

00:11:26,670 --> 00:11:32,190
and then we could further reduce the

00:11:29,580 --> 00:11:35,460
package size by 20% if we would get rid

00:11:32,190 --> 00:11:38,610
of the unused widget dependency that is

00:11:35,460 --> 00:11:40,320
just pulled in due to some frameworks

00:11:38,610 --> 00:11:43,860
depending on it in a way that we can't

00:11:40,320 --> 00:11:46,140
disable at the moment so that's another

00:11:43,860 --> 00:11:49,380
thing where we can make some

00:11:46,140 --> 00:11:52,710
improvements and finally most

00:11:49,380 --> 00:11:55,080
importantly all of that also is

00:11:52,710 --> 00:11:56,640
necessary for plasma mobile right we

00:11:55,080 --> 00:12:00,650
don't want to have a queue message box

00:11:56,640 --> 00:12:04,530
pop up on a my mobile phone either and

00:12:00,650 --> 00:12:07,920
we probably need to have different

00:12:04,530 --> 00:12:10,650
platform implementations like there's a

00:12:07,920 --> 00:12:13,080
file dialog right on desktop that looks

00:12:10,650 --> 00:12:15,390
completely different and on mobile so we

00:12:13,080 --> 00:12:17,670
have the the same need for separating

00:12:15,390 --> 00:12:23,270
platform implementation and the

00:12:17,670 --> 00:12:26,720
abstraction API okay so that is

00:12:23,270 --> 00:12:30,510
basically the the overview of the

00:12:26,720 --> 00:12:32,460
current status I think and as I can

00:12:30,510 --> 00:12:35,640
mention this morning as well D if you

00:12:32,460 --> 00:12:37,740
are getting into this razor with the

00:12:35,640 --> 00:12:41,070
usual Linux mindset of how stuff is

00:12:37,740 --> 00:12:45,480
built and how stuff works you will run

00:12:41,070 --> 00:12:47,370
into a few interesting surprises and in

00:12:45,480 --> 00:12:50,630
the following slides I tried to collect

00:12:47,370 --> 00:12:53,790
some of the things I ran into and that

00:12:50,630 --> 00:12:56,130
that cost me much more time than it

00:12:53,790 --> 00:12:59,610
should I have to to understand and solve

00:12:56,130 --> 00:13:03,100
so maybe some of those things are useful

00:12:59,610 --> 00:13:08,320
for other people looking into

00:13:03,100 --> 00:13:11,560
bringing stuff to Android as well set up

00:13:08,320 --> 00:13:16,390
I'm not going to go into a lot of detail

00:13:11,560 --> 00:13:18,700
for that a leche has written quite a bit

00:13:16,390 --> 00:13:20,830
about this and documented it in the wiki

00:13:18,700 --> 00:13:23,440
and built the the whole locker

00:13:20,830 --> 00:13:26,980
environment that also the binary Factory

00:13:23,440 --> 00:13:30,370
is built around that's probably the

00:13:26,980 --> 00:13:35,520
easiest way to to get a set of

00:13:30,370 --> 00:13:39,090
environment you will then probably

00:13:35,520 --> 00:13:42,430
encounter a number of version numbers in

00:13:39,090 --> 00:13:44,410
in documentation you read about that it

00:13:42,430 --> 00:13:46,110
has basically three different version

00:13:44,410 --> 00:13:49,210
numbers relevant in the Android setup

00:13:46,110 --> 00:13:52,330
two of them are the SDK and the NDK

00:13:49,210 --> 00:13:54,090
version those don't really matter you

00:13:52,330 --> 00:13:59,830
always want to use the latest one that

00:13:54,090 --> 00:14:01,570
has no impact on compatibility the one

00:13:59,830 --> 00:14:05,950
that is relevant for compatibility is

00:14:01,570 --> 00:14:10,060
the API level and that is fixed to 21 in

00:14:05,950 --> 00:14:15,490
frameworks which gives us like 99% of

00:14:10,060 --> 00:14:17,020
the deployment base for cute always try

00:14:15,490 --> 00:14:20,710
to use the latest version because

00:14:17,020 --> 00:14:21,940
there's the fixes being editable

00:14:20,710 --> 00:14:25,930
features being added for very

00:14:21,940 --> 00:14:27,610
fundamental things like file i/o so that

00:14:25,930 --> 00:14:32,890
is there's no point in staying on

00:14:27,610 --> 00:14:35,500
something older right and then I

00:14:32,890 --> 00:14:37,930
mentioned platform API is Java right so

00:14:35,500 --> 00:14:40,390
we need to look into how do I call from

00:14:37,930 --> 00:14:44,590
C++ into Java and how do I call back

00:14:40,390 --> 00:14:46,810
from C from Java into C++ and the key

00:14:44,590 --> 00:14:53,589
word for that is the Java a native

00:14:46,810 --> 00:14:56,170
interface or Genie and the cute Android

00:14:53,589 --> 00:14:58,450
expose module provides us with some some

00:14:56,170 --> 00:15:03,250
helper methods and some entry points to

00:14:58,450 --> 00:15:06,600
actually use that that is actually quite

00:15:03,250 --> 00:15:09,700
a key way to interact because it's

00:15:06,600 --> 00:15:13,960
heavily string based and we have an

00:15:09,700 --> 00:15:15,640
example here so that's the class you are

00:15:13,960 --> 00:15:18,280
calling the method pass

00:15:15,640 --> 00:15:21,880
on and that is the specification of the

00:15:18,280 --> 00:15:26,080
signature of that method so writing that

00:15:21,880 --> 00:15:30,310
stuff by hand is super error-prone and

00:15:26,080 --> 00:15:34,540
you only get runtime crashes if you have

00:15:30,310 --> 00:15:38,520
a typo in there but that's how you

00:15:34,540 --> 00:15:38,520
apparently call into Java

00:15:43,170 --> 00:15:53,710
the other way around is even a bit more

00:15:47,380 --> 00:15:56,350
complicated on the Java side you can

00:15:53,710 --> 00:15:57,660
declare methods as native and then

00:15:56,350 --> 00:16:00,310
basically have no inflammation

00:15:57,660 --> 00:16:03,100
implementation for them and for those

00:16:00,310 --> 00:16:06,450
methods to work you register on the C++

00:16:03,100 --> 00:16:08,830
site the method that should be called

00:16:06,450 --> 00:16:11,650
when the Java side calls into that

00:16:08,830 --> 00:16:16,840
native method and that again is based on

00:16:11,650 --> 00:16:21,100
the same we G need signatures that you

00:16:16,840 --> 00:16:23,670
have to do in a specified strings and

00:16:21,100 --> 00:16:30,100
then with just your function pointer and

00:16:23,670 --> 00:16:31,690
untaek the arguments in there in general

00:16:30,100 --> 00:16:34,690
that is probably looking at an example

00:16:31,690 --> 00:16:36,280
somewhere copy and pasting it and trying

00:16:34,690 --> 00:16:39,940
it a few times until you have fixed all

00:16:36,280 --> 00:16:42,700
the titles in in those strings I mean

00:16:39,940 --> 00:16:46,060
that's there's some really evil tricks

00:16:42,700 --> 00:16:48,610
in here like the namespace separator is

00:16:46,060 --> 00:16:56,470
a slash while in the Java code you write

00:16:48,610 --> 00:16:58,240
it's a dot so just because yeah my most

00:16:56,470 --> 00:17:00,010
common mistake is I write to top there

00:16:58,240 --> 00:17:02,110
because that's exactly what I just wrote

00:17:00,010 --> 00:17:05,079
a minute before in Java but no you have

00:17:02,110 --> 00:17:08,050
to do this with a slash here there is a

00:17:05,079 --> 00:17:10,420
prototype in khaidi itinerary code that

00:17:08,050 --> 00:17:12,370
replaces all of that with some C++ code

00:17:10,420 --> 00:17:14,829
that generates the strings at compile

00:17:12,370 --> 00:17:16,930
time so that's maybe something to look

00:17:14,829 --> 00:17:20,680
at at the android boss if we want to

00:17:16,930 --> 00:17:23,140
have that globally but to get started

00:17:20,680 --> 00:17:25,740
that is probably the kind of stuff you

00:17:23,140 --> 00:17:25,740
have to do this

00:17:26,910 --> 00:17:33,000
yeah then a bit more higher level file

00:17:31,090 --> 00:17:36,460
access right since we are in the sandbox

00:17:33,000 --> 00:17:38,980
the only files you can access like you

00:17:36,460 --> 00:17:44,790
are used to are the files that live

00:17:38,980 --> 00:17:47,980
within your samples so you standard path

00:17:44,790 --> 00:17:51,030
stuff for your personal files that works

00:17:47,980 --> 00:17:52,360
anything system-wide doesn't

00:17:51,030 --> 00:17:55,040
[Music]

00:17:52,360 --> 00:17:57,940
what the for example the file dialog

00:17:55,040 --> 00:18:05,870
gives you for those files system-wide is

00:17:57,940 --> 00:18:08,470
content URLs starting with a cute 513

00:18:05,870 --> 00:18:11,600
you can actually open them with Q file

00:18:08,470 --> 00:18:16,070
and they are essentially a local file

00:18:11,600 --> 00:18:17,600
anyway but the due to the isolation you

00:18:16,070 --> 00:18:19,520
can't look left and right to them you

00:18:17,600 --> 00:18:22,010
can't folder list the parent folder

00:18:19,520 --> 00:18:27,140
right so it's just that one thing that

00:18:22,010 --> 00:18:30,170
you can access and while that works with

00:18:27,140 --> 00:18:32,150
Q file there is a number of other api's

00:18:30,170 --> 00:18:35,690
that deal with files that aren't

00:18:32,150 --> 00:18:38,890
prepared yet for receiving a URL that

00:18:35,690 --> 00:18:42,710
should be treated like a local file

00:18:38,890 --> 00:18:44,660
particular the method is local file that

00:18:42,710 --> 00:18:46,400
you usually use to separate between I

00:18:44,660 --> 00:18:50,570
can open this with Q file or I need to

00:18:46,400 --> 00:18:54,530
go to network operation will claim

00:18:50,570 --> 00:18:56,420
that's not a local file and then there's

00:18:54,530 --> 00:18:57,920
higher level things like you save file I

00:18:56,420 --> 00:19:00,650
think that we fixed that in five

00:18:57,920 --> 00:19:03,340
thirteen one but that was choking on

00:19:00,650 --> 00:19:06,130
that as well and there's probably more

00:19:03,340 --> 00:19:10,670
where you'll run into problems with this

00:19:06,130 --> 00:19:12,550
so that's something to be aware of you

00:19:10,670 --> 00:19:15,320
get those weird URLs and you need to

00:19:12,550 --> 00:19:20,540
handle that in code dealing with file

00:19:15,320 --> 00:19:21,980
names another concept you will run into

00:19:20,540 --> 00:19:25,220
and that will probably fill an entire

00:19:21,980 --> 00:19:28,580
talk in itself is the concept of intense

00:19:25,220 --> 00:19:33,740
and the closest thing we have to that on

00:19:28,580 --> 00:19:37,130
on the earth desktop is the mechanism to

00:19:33,740 --> 00:19:39,800
open files right in on the desktop view

00:19:37,130 --> 00:19:46,400
we have this system that you configure

00:19:39,800 --> 00:19:50,600
for this file type Twitter is opening

00:19:46,400 --> 00:19:52,850
that PNG file right and then as an

00:19:50,600 --> 00:19:54,680
application I just point to the file and

00:19:52,850 --> 00:19:57,800
say please open that for viewing or

00:19:54,680 --> 00:20:00,950
editing and intense is a basically a

00:19:57,800 --> 00:20:03,620
more generalized version of that so you

00:20:00,950 --> 00:20:05,350
also have an URL pointing to some form

00:20:03,620 --> 00:20:08,230
of file or object

00:20:05,350 --> 00:20:13,030
you have a mime type and you have an

00:20:08,230 --> 00:20:15,929
action open or edit or share right so

00:20:13,030 --> 00:20:22,179
it's a more generalized version of that

00:20:15,929 --> 00:20:24,789
slightly simplified but and that's how

00:20:22,179 --> 00:20:30,039
you interact with a lot of the platform

00:20:24,789 --> 00:20:37,559
services including things like the file

00:20:30,039 --> 00:20:41,440
dialogs assuming you have written that

00:20:37,559 --> 00:20:44,799
nice genie code and have your your Java

00:20:41,440 --> 00:20:47,590
code on the site how do we build that

00:20:44,799 --> 00:20:49,990
Java part as powerful framework and how

00:20:47,590 --> 00:20:54,549
do we deploy that and that's basically

00:20:49,990 --> 00:20:58,840
two systems one is the jar files

00:20:54,549 --> 00:21:01,600
that's what cute is using those can be

00:20:58,840 --> 00:21:06,450
built directly with the Java support and

00:21:01,600 --> 00:21:10,059
Simek and then there is the android

00:21:06,450 --> 00:21:13,330
archive or whatever stands for iare

00:21:10,059 --> 00:21:16,539
files that's what we are using in

00:21:13,330 --> 00:21:18,190
notifications those are a bit more

00:21:16,539 --> 00:21:20,710
complicated to build because they can

00:21:18,190 --> 00:21:24,220
only be able to is cradle which is the

00:21:20,710 --> 00:21:27,909
Java Android build system and that has

00:21:24,220 --> 00:21:31,090
nothing to do with how we are used to

00:21:27,909 --> 00:21:32,799
build system so this is a wrapper for

00:21:31,090 --> 00:21:34,600
the build system you need to copy in

00:21:32,799 --> 00:21:35,980
your source code and it then downloads

00:21:34,600 --> 00:21:38,049
the actual build system which then

00:21:35,980 --> 00:21:41,860
downloads 400 megabytes of stuff and

00:21:38,049 --> 00:21:43,690
then maybe build something but that's

00:21:41,860 --> 00:21:47,950
how that's really how it is supposed to

00:21:43,690 --> 00:21:52,120
be used so now when do you pick any of

00:21:47,950 --> 00:21:55,480
those the jaw thing cannot have any

00:21:52,120 --> 00:22:01,990
dependencies and it cannot have any

00:21:55,480 --> 00:22:03,580
additional apk assets or manifest

00:22:01,990 --> 00:22:06,010
fragments that you might need to ship

00:22:03,580 --> 00:22:09,280
with it like give the thing more

00:22:06,010 --> 00:22:12,880
permissions or set specific settings

00:22:09,280 --> 00:22:16,240
that Android needs so for very simple

00:22:12,880 --> 00:22:19,179
stuff like the typical case acute the

00:22:16,240 --> 00:22:22,389
jar files are enough once you have

00:22:19,179 --> 00:22:27,639
further Java dependencies etc then we

00:22:22,389 --> 00:22:28,989
need the Android archives fortunately

00:22:27,639 --> 00:22:31,359
you don't have to deal with all this

00:22:28,989 --> 00:22:35,019
bizarre ability system stuff we have a

00:22:31,359 --> 00:22:37,769
seeming wrapper currently living in any

00:22:35,019 --> 00:22:41,469
notification repository that actually

00:22:37,769 --> 00:22:43,119
finds the grated stuff in cute copy

00:22:41,469 --> 00:22:45,089
start over in your built directory so

00:22:43,119 --> 00:22:47,950
you don't have to check that in and then

00:22:45,089 --> 00:22:49,839
runs that and you have to hope that the

00:22:47,950 --> 00:22:53,889
download service are available and it

00:22:49,839 --> 00:22:55,839
can actually put something as in terms

00:22:53,889 --> 00:23:00,099
of dependencies one thing you might need

00:22:55,839 --> 00:23:03,299
is the Android compatibility library so

00:23:00,099 --> 00:23:09,789
that you can support a larger set of

00:23:03,299 --> 00:23:13,869
Android api's assuming we actually have

00:23:09,789 --> 00:23:18,969
that built the next step is deployment

00:23:13,869 --> 00:23:23,820
and the the key word for that is the

00:23:18,969 --> 00:23:27,039
Android deploy cute tool that's what

00:23:23,820 --> 00:23:29,799
what generates the apk in the end and

00:23:27,039 --> 00:23:34,839
that needs to collect everything that

00:23:29,799 --> 00:23:38,529
that you need for your application and

00:23:34,839 --> 00:23:40,659
it actually has quite some some

00:23:38,529 --> 00:23:42,909
heuristics and logic in there to to

00:23:40,659 --> 00:23:45,570
determine that so it looks at library

00:23:42,909 --> 00:23:48,159
dependencies basically walking the

00:23:45,570 --> 00:23:52,269
dependency tree and copy all of that in

00:23:48,159 --> 00:23:58,330
it looks at qml imports and imports all

00:23:52,269 --> 00:24:00,909
the UML modules you are using for non

00:23:58,330 --> 00:24:02,349
code assets and qml files for your

00:24:00,909 --> 00:24:05,619
application you have to take care of

00:24:02,349 --> 00:24:09,460
that yourself so the easiest way to do

00:24:05,619 --> 00:24:13,179
that is put that in a in a QC file and

00:24:09,460 --> 00:24:16,149
then deployment is easy if you're

00:24:13,179 --> 00:24:19,749
working on libraries and you have Java

00:24:16,149 --> 00:24:22,509
dependencies or other unusual stuff that

00:24:19,749 --> 00:24:26,049
needs to be included there are the

00:24:22,509 --> 00:24:28,509
Android dependency XML files that you

00:24:26,049 --> 00:24:31,550
can put next to the library and that is

00:24:28,509 --> 00:24:34,200
evaluated by Android reporter cute

00:24:31,550 --> 00:24:37,830
undocumented format so copy and paste

00:24:34,200 --> 00:24:40,170
from some example and cute and that's

00:24:37,830 --> 00:24:42,750
for example allows you to specify my

00:24:40,170 --> 00:24:44,630
library needs those plugins and yes I

00:24:42,750 --> 00:24:50,540
know we are not supposed to use plugins

00:24:44,630 --> 00:24:53,160
and then those get added as well

00:24:50,540 --> 00:24:57,860
depending on whether their dependencies

00:24:53,160 --> 00:25:00,120
are available and so on yeah then that's

00:24:57,860 --> 00:25:07,680
considering the lack of time skip that

00:25:00,120 --> 00:25:13,350
for the Android pause yeah so as we saw

00:25:07,680 --> 00:25:17,130
in in my case talk and there's quite

00:25:13,350 --> 00:25:20,550
some stuff we have to build good and

00:25:17,130 --> 00:25:23,370
useful Android apps but it is still a

00:25:20,550 --> 00:25:26,480
lot of work to do to be done to complete

00:25:23,370 --> 00:25:29,220
the full coverage of all our frameworks

00:25:26,480 --> 00:25:34,380
and then to bring more applications to

00:25:29,220 --> 00:25:36,840
language and with kf6 coming up in the

00:25:34,380 --> 00:25:39,270
wake of cute 6 right there is a few

00:25:36,840 --> 00:25:42,930
things that we might want to reconsider

00:25:39,270 --> 00:25:45,510
in the frameworks such as a much

00:25:42,930 --> 00:25:48,120
stricter separation between platform api

00:25:45,510 --> 00:25:52,320
or platform abstraction api and platform

00:25:48,120 --> 00:25:52,980
implementation there's things like

00:25:52,320 --> 00:25:55,080
moving the

00:25:52,980 --> 00:25:57,720
qml bindings to their corresponding

00:25:55,080 --> 00:26:01,170
modules rather than collecting them in

00:25:57,720 --> 00:26:03,360
Katy collaborative because then by now

00:26:01,170 --> 00:26:04,830
Katy clarity of has dependencies on

00:26:03,360 --> 00:26:07,140
stuff that we don't have on Android so I

00:26:04,830 --> 00:26:09,510
don't get to the qml bindings for

00:26:07,140 --> 00:26:12,000
example for core add-ons which perfectly

00:26:09,510 --> 00:26:14,940
fine work on Android right so there

00:26:12,000 --> 00:26:19,820
might be some some restructuring and we

00:26:14,940 --> 00:26:19,820
need to review the widget dependencies

00:26:20,390 --> 00:26:25,830
yeah I think I barely made it in time

00:26:23,600 --> 00:26:29,349
thank you

00:26:25,830 --> 00:26:29,349
[Applause]

00:26:30,450 --> 00:26:36,600
all right but we do have time for a

00:26:32,710 --> 00:26:38,249
couple questions about Android Gradle

00:26:36,600 --> 00:26:43,509
plugins

00:26:38,249 --> 00:26:45,729
okay declarative money I have planning

00:26:43,509 --> 00:26:47,499
to upstream you okay Android extra stuff

00:26:45,729 --> 00:26:50,019
I just had a look on D or I Headley

00:26:47,499 --> 00:26:52,419
would be very useful and there's also Q

00:26:50,019 --> 00:26:53,950
Android intent in cute which you now

00:26:52,419 --> 00:26:55,720
rewrote better

00:26:53,950 --> 00:26:59,710
are you planning to upstream those

00:26:55,720 --> 00:27:02,820
things too cute right what to do with

00:26:59,710 --> 00:27:06,039
that I think would be one topic for the

00:27:02,820 --> 00:27:09,639
for the Android path it might make sense

00:27:06,039 --> 00:27:13,629
to put that into cute Android extras if

00:27:09,639 --> 00:27:17,409
that is desirable upstream it might make

00:27:13,629 --> 00:27:22,599
sense to have a K Android extras add-on

00:27:17,409 --> 00:27:24,549
framework for for this the stuff that's

00:27:22,599 --> 00:27:27,849
India might not make sense at all right

00:27:24,549 --> 00:27:32,649
so that this was a some experimentation

00:27:27,849 --> 00:27:35,919
to get rid of the this heavy string base

00:27:32,649 --> 00:27:37,840
super arrow clone Jeannie thing with

00:27:35,919 --> 00:27:41,679
something that at least has some basic

00:27:37,840 --> 00:27:44,139
compile time checking but yeah I would I

00:27:41,679 --> 00:27:46,440
was hoping to get some feedback doing

00:27:44,139 --> 00:27:48,759
doing Academy on all of this makes sense

00:27:46,440 --> 00:27:53,859
how we can improve it and then where to

00:27:48,759 --> 00:27:57,970
put it yes the question has already been

00:27:53,859 --> 00:28:01,419
asked anything else just one and then

00:27:57,970 --> 00:28:04,149
we'll be done are you aware of the fact

00:28:01,419 --> 00:28:06,399
that Java has metastatic and we annotate

00:28:04,149 --> 00:28:10,629
native that way you don't necessarily

00:28:06,399 --> 00:28:13,779
need to do the evil C++ hackery to

00:28:10,629 --> 00:28:16,899
register methods at runtime but you can

00:28:13,779 --> 00:28:18,849
use the Java tooling to generate the

00:28:16,899 --> 00:28:23,109
right headers for you and then just

00:28:18,849 --> 00:28:28,809
implement does yeah I've I've looked at

00:28:23,109 --> 00:28:31,840
the Java age generator it I couldn't get

00:28:28,809 --> 00:28:35,539
it to could use anything that was

00:28:31,840 --> 00:28:38,630
well not good enough but first was

00:28:35,539 --> 00:28:41,059
remotely close to what I was needing so

00:28:38,630 --> 00:28:43,250
I probably was using this wrongly I mean

00:28:41,059 --> 00:28:44,870
I'm I'm not an expert in this Java

00:28:43,250 --> 00:28:48,130
Android stuff right I have to look into

00:28:44,870 --> 00:28:50,570
that to get kdi generate your Android

00:28:48,130 --> 00:28:52,250
but yeah that's exactly the kind of

00:28:50,570 --> 00:28:56,299
feedback I'm hoping for so what can we

00:28:52,250 --> 00:28:57,919
do to to improve this if there's a way

00:28:56,299 --> 00:29:00,200
to integrate that in the build system

00:28:57,919 --> 00:29:02,899
properly and and generate you have us

00:29:00,200 --> 00:29:06,679
that would be very welcome yeah all

00:29:02,899 --> 00:29:08,419
right last one I was asking myself to

00:29:06,679 --> 00:29:10,570
basically the same question as he was

00:29:08,419 --> 00:29:14,809
and I've looked into it and basically

00:29:10,570 --> 00:29:18,019
what Android does it adds a tiny layer

00:29:14,809 --> 00:29:20,510
of abstraction around gian I stuff which

00:29:18,019 --> 00:29:23,659
actually makes it less painful I think

00:29:20,510 --> 00:29:28,669
and I think this kind of abstraction

00:29:23,659 --> 00:29:32,210
that cute has doesn't really match the

00:29:28,669 --> 00:29:34,370
the Java age stuff anymore from an

00:29:32,210 --> 00:29:38,389
abstraction level so in this cases might

00:29:34,370 --> 00:29:44,120
not be applicable that wasn't really a

00:29:38,389 --> 00:29:47,080
question nonetheless thank you and thank

00:29:44,120 --> 00:29:49,300
you Volker for another interesting talk

00:29:47,080 --> 00:29:52,480
let's give fuller hand

00:29:49,300 --> 00:29:52,480
[Applause]

00:29:53,010 --> 00:29:55,100

YouTube URL: https://www.youtube.com/watch?v=bIeX5HzF11E


