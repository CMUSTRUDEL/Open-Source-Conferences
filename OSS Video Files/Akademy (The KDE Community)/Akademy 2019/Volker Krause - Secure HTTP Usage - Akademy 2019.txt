Title: Volker Krause - Secure HTTP Usage - Akademy 2019
Publication date: 2020-05-25
Playlist: Akademy 2019
Description: 
	For protecting the privacy of our users and the security and integrity of their systems, usage of transport encryption and authentication is crucial for any network communication. HTTP over TLS (HTTPS) is probably the most widespread set of protocols for that. What do we need to look out for when using this in our applications?
Captions: 
	00:00:00,050 --> 00:00:06,000
okay

00:00:01,770 --> 00:00:08,220
[Applause]

00:00:06,000 --> 00:00:12,780
right so this is also part of the work

00:00:08,220 --> 00:00:14,849
that happened for the privacy goal and

00:00:12,780 --> 00:00:18,320
yeah we are going to look at how to talk

00:00:14,849 --> 00:00:22,400
to network services in a secure fashion

00:00:18,320 --> 00:00:26,279
and the subtitle was kind of spoiled by

00:00:22,400 --> 00:00:31,710
Yvonne already we'll see it's not all

00:00:26,279 --> 00:00:35,760
that easy unfortunately why we are doing

00:00:31,710 --> 00:00:37,950
this I think is pretty clear right most

00:00:35,760 --> 00:00:39,660
of you in the in the last one or two

00:00:37,950 --> 00:00:42,360
days have been connected to an open

00:00:39,660 --> 00:00:44,930
Wi-Fi somehow and that usually means

00:00:42,360 --> 00:00:48,180
everybody else can just listen in on

00:00:44,930 --> 00:00:52,710
what you're communicating unless of

00:00:48,180 --> 00:00:55,170
course the connection is encrypted and I

00:00:52,710 --> 00:00:57,570
guess many of you also got in in contact

00:00:55,170 --> 00:01:02,070
with captive portals for example in the

00:00:57,570 --> 00:01:04,790
hotel so that's something where the

00:01:02,070 --> 00:01:07,229
server the captive portal pretends to be

00:01:04,790 --> 00:01:09,900
whoever you actually want to talk to and

00:01:07,229 --> 00:01:11,520
if your application doesn't verify that

00:01:09,900 --> 00:01:13,650
it's actually talking to the survive

00:01:11,520 --> 00:01:15,560
wants to talk to it might just happily

00:01:13,650 --> 00:01:19,080
send out authentication details

00:01:15,560 --> 00:01:23,759
passwords session tokens whatever to

00:01:19,080 --> 00:01:25,920
that captive portal so this is some

00:01:23,759 --> 00:01:29,610
esoteric corner case if you are a public

00:01:25,920 --> 00:01:32,100
enemy hunted down by the NSA this is

00:01:29,610 --> 00:01:35,689
really something that happens pretty

00:01:32,100 --> 00:01:41,130
much at any Hotel Airport public Wi-Fi

00:01:35,689 --> 00:01:44,579
whatever you get in in contact with the

00:01:41,130 --> 00:01:48,119
usual technology to do that is TLS and

00:01:44,579 --> 00:01:50,250
transport layer security formally SSL

00:01:48,119 --> 00:01:55,920
and so it's more or less the same thing

00:01:50,250 --> 00:01:59,100
just yeah some some issues fixed most

00:01:55,920 --> 00:02:03,090
often you get in touch we start in HTTP

00:01:59,100 --> 00:02:05,420
URLs or HTTPS URLs so the s makes the

00:02:03,090 --> 00:02:05,420
difference

00:02:06,119 --> 00:02:13,150
connects and in an encrypted and

00:02:08,830 --> 00:02:15,400
authenticated fashion and a single

00:02:13,150 --> 00:02:18,840
rightfully mentioned this isn't limited

00:02:15,400 --> 00:02:21,069
to http even HTTP is the most common one

00:02:18,840 --> 00:02:25,709
several other protocols like the whole

00:02:21,069 --> 00:02:32,769
email set they basically use the same

00:02:25,709 --> 00:02:34,269
technology just on on a socket level so

00:02:32,769 --> 00:02:39,100
most of what we are going to see here

00:02:34,269 --> 00:02:42,549
also applies to that so yeah in theory

00:02:39,100 --> 00:02:45,519
that should be it right you use an HTTP

00:02:42,549 --> 00:02:48,549
URL and you're fine and you enable a TLS

00:02:45,519 --> 00:02:49,349
on your socket for for non HTTP and you

00:02:48,549 --> 00:02:55,420
should be fine

00:02:49,349 --> 00:02:59,530
well now the even stuff kicks in right

00:02:55,420 --> 00:03:02,470
unfortunately it's not that easy the

00:02:59,530 --> 00:03:05,080
first and probably a bit surprising

00:03:02,470 --> 00:03:09,640
thing is we tend to forget to actually

00:03:05,080 --> 00:03:11,350
do this maybe not on like the primary

00:03:09,640 --> 00:03:13,299
feature of your application so if you're

00:03:11,350 --> 00:03:16,239
writing a chat client one email client

00:03:13,299 --> 00:03:18,760
you tend to pay attention that that

00:03:16,239 --> 00:03:22,780
communication is is probably encrypted

00:03:18,760 --> 00:03:25,480
or secured right but that is usually not

00:03:22,780 --> 00:03:29,310
the only thing that can communicate with

00:03:25,480 --> 00:03:29,310
some network service a new application

00:03:29,549 --> 00:03:35,709
simple things like links to websites

00:03:32,440 --> 00:03:39,010
license informations or further

00:03:35,709 --> 00:03:41,440
information in your documentation if you

00:03:39,010 --> 00:03:45,150
put an HTTP URL there you click on it

00:03:41,440 --> 00:03:47,620
right connection is it's not encrypted

00:03:45,150 --> 00:03:52,600
might not be as severe is leaking your

00:03:47,620 --> 00:03:55,799
emails but it's also those small things

00:03:52,600 --> 00:04:00,400
that count we also found that in

00:03:55,799 --> 00:04:05,130
download URLs for external content chain

00:04:00,400 --> 00:04:05,130
you stuff and

00:04:06,069 --> 00:04:11,549
some some blog content in aggregator for

00:04:08,769 --> 00:04:14,580
example in the default installation

00:04:11,549 --> 00:04:19,750
where this is already a bit more severe

00:04:14,580 --> 00:04:22,090
and be founded in in places for for

00:04:19,750 --> 00:04:24,580
content sharing so very actually leaking

00:04:22,090 --> 00:04:27,880
out data so this is stuff like paste in

00:04:24,580 --> 00:04:31,600
integration or image bin integration for

00:04:27,880 --> 00:04:36,310
sharing data as part of for example in

00:04:31,600 --> 00:04:40,510
email application now how do we address

00:04:36,310 --> 00:04:42,699
this it's unfortunately much harder as

00:04:40,510 --> 00:04:46,510
search and replace for HTTP and replace

00:04:42,699 --> 00:04:49,780
that with HTTP because XML files

00:04:46,510 --> 00:04:52,810
tend to use HTTP your eyes as

00:04:49,780 --> 00:04:55,000
identifiers rather than as addresses

00:04:52,810 --> 00:04:57,760
that get resolved so you find that for

00:04:55,000 --> 00:04:59,770
example an SVG files if it will do a

00:04:57,760 --> 00:05:01,990
global search and replace right we break

00:04:59,770 --> 00:05:03,930
all those files by trying to fix the

00:05:01,990 --> 00:05:07,120
network addresses so it's not that easy

00:05:03,930 --> 00:05:09,520
during the privacy sprint Sandro and I

00:05:07,120 --> 00:05:12,820
worked on a on a script that just this

00:05:09,520 --> 00:05:15,610
properly and as a still pending review

00:05:12,820 --> 00:05:19,680
and fabricator that tries to inject that

00:05:15,610 --> 00:05:22,360
as a mobile unit test for all ECM users

00:05:19,680 --> 00:05:26,860
that's a bit of a hack but that seemed

00:05:22,360 --> 00:05:30,660
to be the the best way we found to make

00:05:26,860 --> 00:05:33,099
this as widely rolled out as as possible

00:05:30,660 --> 00:05:34,750
and even if you don't do that there's

00:05:33,099 --> 00:05:39,310
these fits that you can run over your

00:05:34,750 --> 00:05:44,860
codebase that checks for for URLs and

00:05:39,310 --> 00:05:47,560
optionally also replaces them on top of

00:05:44,860 --> 00:05:51,940
that there is so this is basically the

00:05:47,560 --> 00:05:55,450
static approach static code analysis on

00:05:51,940 --> 00:05:58,389
top of data is various tools that allow

00:05:55,450 --> 00:06:00,010
you to look at your one-time traffic but

00:05:58,389 --> 00:06:02,349
with that it's usually much harder to

00:06:00,010 --> 00:06:03,789
capture the rare secondary use cases

00:06:02,349 --> 00:06:05,110
right so this works nicely for the

00:06:03,789 --> 00:06:08,560
primary communication of your

00:06:05,110 --> 00:06:10,930
application capturing a click on a

00:06:08,560 --> 00:06:16,620
specific link in your documentation in a

00:06:10,930 --> 00:06:23,830
Wireshark dump that doesn't really work

00:06:16,620 --> 00:06:25,030
so but yeah let's let's assume we are

00:06:23,830 --> 00:06:32,710
talking to a good server that actually

00:06:25,030 --> 00:06:35,949
we direct us to to an HTTP URL many

00:06:32,710 --> 00:06:39,370
servers nowadays do that but it's not

00:06:35,949 --> 00:06:45,430
enough so first of all are we actually

00:06:39,370 --> 00:06:48,820
following that we direct we will see

00:06:45,430 --> 00:06:51,220
later on when we look at the the tools

00:06:48,820 --> 00:06:54,820
we actually have to to do this all the

00:06:51,220 --> 00:06:58,750
libraries that is not necessarily the

00:06:54,820 --> 00:07:00,520
case and then that's the case do we

00:06:58,750 --> 00:07:04,539
follow redirects in the wrong direction

00:07:00,520 --> 00:07:07,780
so if somebody tricks this trick or

00:07:04,539 --> 00:07:11,830
injects a redirect from us secure side

00:07:07,780 --> 00:07:13,570
to an insecure side that's usually not

00:07:11,830 --> 00:07:15,970
something we would want to follow and

00:07:13,570 --> 00:07:19,180
let's see in a few cases although that

00:07:15,970 --> 00:07:23,620
as well so that's something to take care

00:07:19,180 --> 00:07:26,889
of and then there's an extension and

00:07:23,620 --> 00:07:29,950
strict Transport Security for HTTP that

00:07:26,889 --> 00:07:33,250
allows the the server basically to tell

00:07:29,950 --> 00:07:36,190
us for the next half year you can expect

00:07:33,250 --> 00:07:37,960
me to offer an encrypted site and if you

00:07:36,190 --> 00:07:41,139
get an unencrypted link always upgrade

00:07:37,960 --> 00:07:45,099
to encrypt it so that requires to keep

00:07:41,139 --> 00:07:47,470
some some state locally and and it's

00:07:45,099 --> 00:07:50,680
it's an again another building block

00:07:47,470 --> 00:07:52,960
that prevents these is I have a

00:07:50,680 --> 00:07:59,919
downgrade attacks already capture

00:07:52,960 --> 00:08:01,810
portals confusing this to see if if we

00:07:59,919 --> 00:08:05,020
are actually doing this or to what

00:08:01,810 --> 00:08:10,229
extent we are doing this let's have a

00:08:05,020 --> 00:08:13,750
look at the two major libraries or

00:08:10,229 --> 00:08:17,770
components we have to to actually do

00:08:13,750 --> 00:08:21,310
HTTP communication and that's queue

00:08:17,770 --> 00:08:25,080
network access manager coming from to

00:08:21,310 --> 00:08:25,080
network and Kao

00:08:26,700 --> 00:08:33,340
so network access manager

00:08:29,820 --> 00:08:37,479
we director off by default that's Ben's

00:08:33,340 --> 00:08:39,969
favorite feature in there and you

00:08:37,479 --> 00:08:43,260
explicitly need to enable that and you

00:08:39,969 --> 00:08:46,779
have several policies you can pick from

00:08:43,260 --> 00:08:51,610
and the only one that actually does what

00:08:46,779 --> 00:08:54,130
you would expect it or to redirect

00:08:51,610 --> 00:08:56,260
behavior that is kind of what one would

00:08:54,130 --> 00:08:59,110
expect is the no less safe redirection

00:08:56,260 --> 00:09:00,790
policy so you explicitly need to set out

00:08:59,110 --> 00:09:06,070
on network access manage and then you

00:09:00,790 --> 00:09:08,440
have the redirect program fixed strict

00:09:06,070 --> 00:09:11,589
Transport Security is supported but it's

00:09:08,440 --> 00:09:15,400
off by default so you need to switch the

00:09:11,589 --> 00:09:16,810
zone and persistency of the of the

00:09:15,400 --> 00:09:19,839
results you get from the server is also

00:09:16,810 --> 00:09:22,060
off by default so you need a say it's a

00:09:19,839 --> 00:09:25,450
great third call on network access

00:09:22,060 --> 00:09:28,720
manager to switch this on and then you

00:09:25,450 --> 00:09:32,220
have something that that does most

00:09:28,720 --> 00:09:32,220
things correctly

00:09:36,450 --> 00:09:42,899
when we look at how to move forward

00:09:38,850 --> 00:09:45,079
there's some only vaguely related things

00:09:42,899 --> 00:09:48,420
coming in like cookie and cash handling

00:09:45,079 --> 00:09:51,329
so I'm won't go in detail in this one

00:09:48,420 --> 00:09:55,350
here but cookie persistence is also not

00:09:51,329 --> 00:09:57,720
a lot done in network access manager

00:09:55,350 --> 00:10:00,959
from a privacy point of view that's

00:09:57,720 --> 00:10:02,519
actually a sensible default cookie

00:10:00,959 --> 00:10:05,459
persistence is something that usually

00:10:02,519 --> 00:10:06,930
only browsers should do if at all in

00:10:05,459 --> 00:10:15,110
application code you usually don't want

00:10:06,930 --> 00:10:19,290
that so how does KO perform against that

00:10:15,110 --> 00:10:23,930
so yeah redirects work by default but

00:10:19,290 --> 00:10:29,130
they actually work a bit too well so ko

00:10:23,930 --> 00:10:32,639
happily follows a me directed to an to

00:10:29,130 --> 00:10:34,260
an end secure site as well and there's

00:10:32,639 --> 00:10:41,029
no knobs to turn this off

00:10:34,260 --> 00:10:43,110
so you have to leave the start then

00:10:41,029 --> 00:10:49,649
strict Transport Security is not

00:10:43,110 --> 00:10:54,350
supported at all that's due to KO being

00:10:49,649 --> 00:10:58,940
fairly old creating that that standard

00:10:54,350 --> 00:11:01,920
and that's part of the problem in KO but

00:10:58,940 --> 00:11:04,500
the HTTP implementation there isn't

00:11:01,920 --> 00:11:07,100
really as actively maintained as it

00:11:04,500 --> 00:11:10,140
would probably or it probably should be

00:11:07,100 --> 00:11:13,290
especially as there's also new HTTP

00:11:10,140 --> 00:11:16,140
standards coming out and in here we have

00:11:13,290 --> 00:11:18,209
persistence of cookies by default which

00:11:16,140 --> 00:11:26,640
as I said for applications might not be

00:11:18,209 --> 00:11:30,959
desirable then we have an another

00:11:26,640 --> 00:11:36,769
subject to look at and that is what

00:11:30,959 --> 00:11:36,769
happens if we encounter TLS errors so

00:11:37,279 --> 00:11:46,500
some outdated or wrong crypto format or

00:11:42,149 --> 00:11:49,819
encryption algorithm some untrusted

00:11:46,500 --> 00:11:49,819
unknown or self signed certificate

00:11:50,210 --> 00:11:59,610
or like something like to catch a porter

00:11:53,130 --> 00:12:01,950
messing all of this up first maybe the

00:11:59,610 --> 00:12:07,470
question how should those errors be

00:12:01,950 --> 00:12:09,750
handled and as there's basically two

00:12:07,470 --> 00:12:12,089
approaches the one we know from the

00:12:09,750 --> 00:12:14,690
browser where the user is asked and

00:12:12,089 --> 00:12:21,140
given the opportunity to overwrite that

00:12:14,690 --> 00:12:24,450
temporarily or possibly persistently and

00:12:21,140 --> 00:12:28,380
then the other option is to just treat

00:12:24,450 --> 00:12:31,740
it as an error and I think the

00:12:28,380 --> 00:12:33,060
recommendation would be if we are

00:12:31,740 --> 00:12:35,820
dealing with an address that the user

00:12:33,060 --> 00:12:38,070
has entered so like in the browser or

00:12:35,820 --> 00:12:42,020
like in an email application or a chat

00:12:38,070 --> 00:12:44,190
application where I configure the server

00:12:42,020 --> 00:12:45,810
then we need to give the user the

00:12:44,190 --> 00:12:48,510
ability to actually override that

00:12:45,810 --> 00:12:51,390
because it might be my own server with a

00:12:48,510 --> 00:12:54,150
self-signed certificate I mean that's

00:12:51,390 --> 00:12:59,010
less relevant in the days of let's

00:12:54,150 --> 00:13:00,779
encrypt but there's at least valid

00:12:59,010 --> 00:13:04,230
scenarios where the override might be

00:13:00,779 --> 00:13:06,480
necessary and then there is basically

00:13:04,230 --> 00:13:11,880
internal API calls to hard-coded

00:13:06,480 --> 00:13:14,190
endpoints for those I think we should

00:13:11,880 --> 00:13:17,040
treat it as an as an Hart error so

00:13:14,190 --> 00:13:18,870
because otherwise you're behind the

00:13:17,040 --> 00:13:21,240
capture portal and your weather applet

00:13:18,870 --> 00:13:22,320
is asking you if you want to trust that

00:13:21,240 --> 00:13:24,089
other certificate

00:13:22,320 --> 00:13:26,430
you didn't even trigger a network

00:13:24,089 --> 00:13:32,700
operation right so how am I supposed to

00:13:26,430 --> 00:13:38,279
decide this how can we do that

00:13:32,700 --> 00:13:40,170
or how is that our handling done you

00:13:38,279 --> 00:13:42,870
probably know that message box you get

00:13:40,170 --> 00:13:46,350
from ki always we have an error

00:13:42,870 --> 00:13:48,950
show me the details and ignore or ignore

00:13:46,350 --> 00:13:48,950
persistently

00:13:51,740 --> 00:14:00,060
that is infrastructure provided by Kao

00:13:56,240 --> 00:14:03,540
but it also can be used in combination

00:14:00,060 --> 00:14:06,360
with queue ssl socket so the so known

00:14:03,540 --> 00:14:08,850
HTTP version from cute and starting with

00:14:06,360 --> 00:14:12,300
the next frameworks with ease it will

00:14:08,850 --> 00:14:14,780
also be possible for to use that

00:14:12,300 --> 00:14:17,970
together with network access manager

00:14:14,780 --> 00:14:21,090
before that network access manager will

00:14:17,970 --> 00:14:26,130
always basically hard fail on a TLS

00:14:21,090 --> 00:14:31,910
error but basically the next release

00:14:26,130 --> 00:14:31,910
that will at least be on future parity

00:14:32,450 --> 00:14:36,360
[Music]

00:14:33,560 --> 00:14:38,580
how can you test if your application

00:14:36,360 --> 00:14:42,570
behaves correctly in the face of such

00:14:38,580 --> 00:14:47,360
errors and that's where bad ssl.com

00:14:42,570 --> 00:14:53,130
comes in that is a large collection of

00:14:47,360 --> 00:14:55,050
servers set up based specific errors so

00:14:53,130 --> 00:14:56,850
you can have weak encryption or

00:14:55,050 --> 00:14:59,280
self-signed certificates and all that

00:14:56,850 --> 00:15:02,790
stuff which is usually very annoying to

00:14:59,280 --> 00:15:07,710
to set up manually or to intentionally

00:15:02,790 --> 00:15:09,090
trigger so it's actually very helpful to

00:15:07,710 --> 00:15:12,150
run your application against that and

00:15:09,090 --> 00:15:17,900
see if it behaves correctly and I mean

00:15:12,150 --> 00:15:19,740
this is focused on HTTP communication

00:15:17,900 --> 00:15:25,110
because I think it's done by the

00:15:19,740 --> 00:15:28,800
chromium team but you can also use that

00:15:25,110 --> 00:15:31,290
for non-http applications

00:15:28,800 --> 00:15:32,790
they will of course once they manage to

00:15:31,290 --> 00:15:36,810
set up the encryption they will fail

00:15:32,790 --> 00:15:40,020
because the protocol doesn't match but

00:15:36,810 --> 00:15:42,750
if you get to that point then you're at

00:15:40,020 --> 00:15:46,830
least sure that your SSL error handling

00:15:42,750 --> 00:15:51,510
is correct and to show you how that

00:15:46,830 --> 00:15:58,310
looks like I want a little demo

00:15:51,510 --> 00:16:03,540
application that uses the four different

00:15:58,310 --> 00:16:06,020
methods we have to to talk to an and

00:16:03,540 --> 00:16:08,550
network endpoint

00:16:06,020 --> 00:16:11,610
by default they are basically this is

00:16:08,550 --> 00:16:13,830
running with their vanilla configuration

00:16:11,610 --> 00:16:18,170
right now option changed how many of

00:16:13,830 --> 00:16:20,700
those think they or how many of those

00:16:18,170 --> 00:16:23,540
options you think will work all of the

00:16:20,700 --> 00:16:33,750
box with this very suspicious website

00:16:23,540 --> 00:16:37,040
setup there any idea right it's it's

00:16:33,750 --> 00:16:38,730
certainly not all of them so that's

00:16:37,040 --> 00:16:42,020
where most cure

00:16:38,730 --> 00:16:44,640
that's why this network access manager

00:16:42,020 --> 00:16:46,980
that seems to work at first but actually

00:16:44,640 --> 00:16:49,710
it fails on the redirect of that website

00:16:46,980 --> 00:16:52,350
so with network manager out of the box

00:16:49,710 --> 00:16:58,890
we can't get to this suspicious website

00:16:52,350 --> 00:17:02,160
and if I try TCP socket that fails as

00:16:58,890 --> 00:17:06,360
well and I'll get to that in a bit

00:17:02,160 --> 00:17:10,470
the default in TCP socket is SSL version

00:17:06,360 --> 00:17:15,959
3 which is a protocol so old that open

00:17:10,470 --> 00:17:20,790
SSL says I'm not going to touch this and

00:17:15,959 --> 00:17:22,980
the other two actually work and I cannot

00:17:20,790 --> 00:17:30,590
show you how this works for the that's

00:17:22,980 --> 00:17:32,610
it itself sub signed test so kko will

00:17:30,590 --> 00:17:34,740
actually give us that well-known

00:17:32,610 --> 00:17:38,220
dialogue right

00:17:34,740 --> 00:17:44,120
and network access manager by default

00:17:38,220 --> 00:17:47,570
will just fail but if I use the the same

00:17:44,120 --> 00:17:47,570
UI pull out

00:17:47,840 --> 00:17:51,220
or that he used to work

00:17:51,770 --> 00:17:56,660
this is what your different ready I

00:17:53,780 --> 00:17:58,880
might have the old framework one so let

00:17:56,660 --> 00:18:02,179
me show it for this one

00:17:58,880 --> 00:18:08,540
so that q KL feature is now available

00:18:02,179 --> 00:18:09,980
for for the cute options the redirect

00:18:08,540 --> 00:18:14,390
stuff I think we have a test for that as

00:18:09,980 --> 00:18:19,640
well so this is an HTTP URL redirecting

00:18:14,390 --> 00:18:22,910
to HTTP and I put this on the correct

00:18:19,640 --> 00:18:30,890
policy we should get an error here right

00:18:22,910 --> 00:18:38,300
and KO well happily execute that and

00:18:30,890 --> 00:18:43,660
give us all kinds of information so none

00:18:38,300 --> 00:18:43,660
of them really is ideal and the defaults

00:18:44,260 --> 00:18:50,090
well you need to actually set the

00:18:47,540 --> 00:18:54,260
defaults correctly for for this to to

00:18:50,090 --> 00:18:56,330
work but with this you can at least play

00:18:54,260 --> 00:19:01,550
with the various options and and see how

00:18:56,330 --> 00:19:08,630
how they behave and what and if that's

00:19:01,550 --> 00:19:11,960
what you you what you would expect right

00:19:08,630 --> 00:19:15,350
then we have weekly seen that in the

00:19:11,960 --> 00:19:19,940
demo if you don't have HTTP there is Q

00:19:15,350 --> 00:19:24,290
SSL socket good option and we have K TCP

00:19:19,940 --> 00:19:26,150
socket which is also I think this is

00:19:24,290 --> 00:19:30,320
from the time before there was Q SSL

00:19:26,150 --> 00:19:34,420
socket so it's a fairly legacy thing and

00:19:30,320 --> 00:19:36,530
as we saw it defaults to and

00:19:34,420 --> 00:19:39,740
communication protocol that even open

00:19:36,530 --> 00:19:42,760
SSL considers outdated so you explicitly

00:19:39,740 --> 00:19:45,650
need to set that to use a secure

00:19:42,760 --> 00:19:49,070
protocol it's actually that's how the

00:19:45,650 --> 00:19:51,920
API is caught and then it it kind of

00:19:49,070 --> 00:19:56,090
works like yes that's okay and both of

00:19:51,920 --> 00:19:58,040
them you can connect to the SSL UI so

00:19:56,090 --> 00:20:01,490
you can have the manual the manual

00:19:58,040 --> 00:20:03,850
override for TLS errors if you if you

00:20:01,490 --> 00:20:03,850
need turn

00:20:04,919 --> 00:20:12,070
so this is basically just at that point

00:20:09,429 --> 00:20:16,330
so far mostly complaining about stuff

00:20:12,070 --> 00:20:21,519
not working so how do we get it how do

00:20:16,330 --> 00:20:25,600
we move forward from this and based on

00:20:21,519 --> 00:20:30,070
the discussions we had on this the read

00:20:25,600 --> 00:20:34,090
for example one suggestion is that we

00:20:30,070 --> 00:20:37,480
add a cane network access manager which

00:20:34,090 --> 00:20:41,019
is basically a to network access manager

00:20:37,480 --> 00:20:43,149
with sensible defaults so ideally that

00:20:41,019 --> 00:20:49,059
thing only has three lines of codes in

00:20:43,149 --> 00:20:50,769
its constructor because with the with

00:20:49,059 --> 00:20:55,480
the introduction of the strict Transport

00:20:50,769 --> 00:20:57,789
Security feature we saw that we will

00:20:55,480 --> 00:21:01,240
need to adapt to changes in network

00:20:57,789 --> 00:21:04,659
access manager and we can't rely on

00:21:01,240 --> 00:21:09,549
their defaults there being like we want

00:21:04,659 --> 00:21:12,279
them right and if we are now already at

00:21:09,549 --> 00:21:13,779
three lines of setup code for network

00:21:12,279 --> 00:21:17,649
access manager that we would need to do

00:21:13,779 --> 00:21:20,230
correctly in each application that seems

00:21:17,649 --> 00:21:23,529
too error-prone and too hard to maintain

00:21:20,230 --> 00:21:27,970
so on the other hand having another

00:21:23,529 --> 00:21:33,070
framework for relying class is also not

00:21:27,970 --> 00:21:35,289
ideal right but at least that gives us a

00:21:33,070 --> 00:21:37,269
central point to configure this and

00:21:35,289 --> 00:21:40,809
likely there would be more in there if

00:21:37,269 --> 00:21:42,610
we look at default cash handling and an

00:21:40,809 --> 00:21:45,299
optional cookie persistence and that

00:21:42,610 --> 00:21:45,299
kind of stuff so

00:21:48,270 --> 00:21:56,890
like oh do we want to wait until 6 are

00:21:54,039 --> 00:21:59,470
we assuming that within queued 6 network

00:21:56,890 --> 00:22:02,620
access manager will aid change its

00:21:59,470 --> 00:22:04,299
default and will not get to the point

00:22:02,620 --> 00:22:06,520
again where we need to change the

00:22:04,299 --> 00:22:07,780
defaults because I mean there's reasons

00:22:06,520 --> 00:22:08,140
why they didn't change the defaults

00:22:07,780 --> 00:22:12,039
right

00:22:08,140 --> 00:22:14,950
it changes behavior for the redirects

00:22:12,039 --> 00:22:19,570
quite drastically actually possibly the

00:22:14,950 --> 00:22:23,740
security implications right so I can see

00:22:19,570 --> 00:22:27,210
the point why the Whydah is the behavior

00:22:23,740 --> 00:22:27,210
in network access manager the way this

00:22:28,470 --> 00:22:34,780
yeah it's of course that is I mean this

00:22:31,809 --> 00:22:37,320
is not this is not a statement on what

00:22:34,780 --> 00:22:40,990
we are going to do right this is

00:22:37,320 --> 00:22:46,780
proposal based on discussion for options

00:22:40,990 --> 00:22:51,909
we might want to look into so that is

00:22:46,780 --> 00:22:54,039
one of the ideas then yeah I wrote the

00:22:51,909 --> 00:22:56,980
slides before some of the things already

00:22:54,039 --> 00:23:01,750
got fixed so the error handling for

00:22:56,980 --> 00:23:03,429
network access manager that is I think

00:23:01,750 --> 00:23:07,780
it's it's integrated right so it should

00:23:03,429 --> 00:23:09,100
be in the in the next release right and

00:23:07,780 --> 00:23:12,159
then that's the question what do we do

00:23:09,100 --> 00:23:17,230
with the legacy HTTP implementations we

00:23:12,159 --> 00:23:22,929
have and that is mainly the HTTP I also

00:23:17,230 --> 00:23:29,020
lave and the the web dev support which

00:23:22,929 --> 00:23:30,909
is also in Calcutta and in theme I think

00:23:29,020 --> 00:23:33,130
it would be a good idea to rebase that

00:23:30,909 --> 00:23:34,990
on top of letter like access manager so

00:23:33,130 --> 00:23:37,630
we don't maintain our own HTTP

00:23:34,990 --> 00:23:40,590
implementation anymore especially in the

00:23:37,630 --> 00:23:43,419
light of HTTP as a standard actually

00:23:40,590 --> 00:23:47,559
moving again with the innovations coming

00:23:43,419 --> 00:23:50,650
from from google jew network access

00:23:47,559 --> 00:23:54,610
manager is behind the browsers there but

00:23:50,650 --> 00:23:56,320
we are way behind in jail so i'm not

00:23:54,610 --> 00:23:57,760
sure if it's worse to to maintain that

00:23:56,320 --> 00:24:00,300
anymore especially if there's nobody

00:23:57,760 --> 00:24:04,650
actively working on it

00:24:00,300 --> 00:24:06,840
well and finally it looks like there is

00:24:04,650 --> 00:24:11,670
no good reason to keep que TCP socket

00:24:06,840 --> 00:24:15,420
and that could be basically phased out

00:24:11,670 --> 00:24:18,660
in favor of q ssl socket g ssl socket

00:24:15,420 --> 00:24:19,970
seems to have sensible defaults so

00:24:18,660 --> 00:24:21,929
that's the only one where you actually

00:24:19,970 --> 00:24:22,890
saw on the demo there is not a single

00:24:21,929 --> 00:24:24,750
checkbox for it

00:24:22,890 --> 00:24:26,760
apart for me I actually want the

00:24:24,750 --> 00:24:30,170
override which is a sensible option to

00:24:26,760 --> 00:24:32,120
add so I think that is a transition

00:24:30,170 --> 00:24:35,190
before you want to look into this

00:24:32,120 --> 00:24:39,059
actually only like six places also in

00:24:35,190 --> 00:24:41,960
Aleks are that use TCP socket but

00:24:39,059 --> 00:24:44,280
swapping it out for SSL socket is a

00:24:41,960 --> 00:24:49,920
delicate task because you're touching

00:24:44,280 --> 00:24:52,800
very security relevant code that will at

00:24:49,920 --> 00:24:55,970
least be kind of my proposal on how to

00:24:52,800 --> 00:24:57,750
move forward on this and that's

00:24:55,970 --> 00:25:05,460
hopefully something we can discuss

00:24:57,750 --> 00:25:09,360
further during the week yeah so I think

00:25:05,460 --> 00:25:13,140
it's we have seen that we basically have

00:25:09,360 --> 00:25:15,960
all the building blocks but it is quite

00:25:13,140 --> 00:25:20,730
tricky to assemble them in a way that

00:25:15,960 --> 00:25:22,350
you get the optimal behavior and it's

00:25:20,730 --> 00:25:24,740
quite easy to assemble them in a way

00:25:22,350 --> 00:25:27,120
that things either don't work or have

00:25:24,740 --> 00:25:31,260
some problematic security vise

00:25:27,120 --> 00:25:33,480
problematic behavior I also think there

00:25:31,260 --> 00:25:37,200
is still a lot of room in improving the

00:25:33,480 --> 00:25:41,010
tools that support us in verifying that

00:25:37,200 --> 00:25:43,170
we are doing this correctly and in a way

00:25:41,010 --> 00:25:44,730
that and it will that allow us to find

00:25:43,170 --> 00:25:48,900
places where we are not doing this

00:25:44,730 --> 00:25:51,630
correctly and doing this correctly is of

00:25:48,900 --> 00:25:56,640
course very important confirming also

00:25:51,630 --> 00:25:57,840
what even said in the morning yeah

00:25:56,640 --> 00:26:01,620
that's it

00:25:57,840 --> 00:26:04,530
Jason cave six both on Monday we're

00:26:01,620 --> 00:26:06,570
changes to care you might be on on topic

00:26:04,530 --> 00:26:09,530
so that might be a place where we can

00:26:06,570 --> 00:26:16,519
further discuss this

00:26:09,530 --> 00:26:21,499
[Applause]

00:26:16,519 --> 00:26:21,499
thank you for your other questions

00:26:27,570 --> 00:26:33,789
and that cane I'm a thing shouldn't that

00:26:30,880 --> 00:26:37,720
be somehow put into cute so that

00:26:33,789 --> 00:26:40,450
everyone should use cue sane D for

00:26:37,720 --> 00:26:42,730
network access manager that then

00:26:40,450 --> 00:26:45,250
actually could move its defaults to

00:26:42,730 --> 00:26:48,580
those who opt in to say in behavior by

00:26:45,250 --> 00:26:53,470
default yep

00:26:48,580 --> 00:26:55,539
I mean the closer this is to network

00:26:53,470 --> 00:26:58,600
access manager and therefore closer to

00:26:55,539 --> 00:27:04,360
should network I think the better the

00:26:58,600 --> 00:27:06,220
more people benefit from is I think that

00:27:04,360 --> 00:27:10,510
that prolly requires talking to the cute

00:27:06,220 --> 00:27:13,260
people if we can have like a sane

00:27:10,510 --> 00:27:17,169
default option or saying default rather

00:27:13,260 --> 00:27:21,000
something cute and if we agree on what

00:27:17,169 --> 00:27:23,650
it's saying like integration with the

00:27:21,000 --> 00:27:25,510
the error handling that is you I on our

00:27:23,650 --> 00:27:29,380
side so that certainly needs to be

00:27:25,510 --> 00:27:31,179
somewhat external but yeah that's that's

00:27:29,380 --> 00:27:42,400
certainly and an option to consider as

00:27:31,179 --> 00:27:45,730
well so I I just checked Alexa are for

00:27:42,400 --> 00:27:48,190
how many cases are there not that many

00:27:45,730 --> 00:27:49,059
as you said but one of them is TCP

00:27:48,190 --> 00:27:51,220
slave-based

00:27:49,059 --> 00:27:53,530
right so basically our all our slaves

00:27:51,220 --> 00:27:55,539
what they call socket they get a TCP

00:27:53,530 --> 00:27:57,460
socket so that that bit that's a bit of

00:27:55,539 --> 00:28:00,010
a multiplier right that just codes as

00:27:57,460 --> 00:28:03,789
one but I guess there's very slaves on

00:28:00,010 --> 00:28:05,620
top of that one that yeah yeah like

00:28:03,789 --> 00:28:06,760
expect it to be a piece of it I don't

00:28:05,620 --> 00:28:09,429
know what's that's what difference

00:28:06,760 --> 00:28:13,030
between TCP socket and this is the

00:28:09,429 --> 00:28:15,850
socket nowadays but I mean it's GPS

00:28:13,030 --> 00:28:17,740
worker uses an ssl socket but rats most

00:28:15,850 --> 00:28:21,909
of the api including all the ssl

00:28:17,740 --> 00:28:24,340
relevant api it messes with the defaults

00:28:21,909 --> 00:28:29,289
some of this bad some of this might be

00:28:24,340 --> 00:28:31,000
useful it's it's not even documented so

00:28:29,289 --> 00:28:34,360
it doesn't even show up on and the APA

00:28:31,000 --> 00:28:37,750
came your site so it's and it's a fairly

00:28:34,360 --> 00:28:41,380
extensive class so it's

00:28:37,750 --> 00:28:44,500
very hard to assess how what subtle

00:28:41,380 --> 00:28:46,060
things will break in the port and yes

00:28:44,500 --> 00:28:48,400
GCP slight place is one of the

00:28:46,060 --> 00:28:52,230
interesting things and I think that's

00:28:48,400 --> 00:28:55,350
the IMAP and SMTP handling they look

00:28:52,230 --> 00:28:57,640
easy on first sight but this is like

00:28:55,350 --> 00:28:59,710
multi-threaded code where's the error

00:28:57,640 --> 00:29:01,570
handling for TLS happening in a

00:28:59,710 --> 00:29:05,020
different thread and so touching all of

00:29:01,570 --> 00:29:14,830
that is it's not in a simple search

00:29:05,020 --> 00:29:17,410
every place is conversation right but I

00:29:14,830 --> 00:29:23,950
would guess that is similar complexity

00:29:17,410 --> 00:29:25,720
as for IMAP and SMTP and so on so but

00:29:23,950 --> 00:29:28,060
this is this is something that we can I

00:29:25,720 --> 00:29:30,130
think step by step migrate right it's

00:29:28,060 --> 00:29:33,160
it's not something very need new API in

00:29:30,130 --> 00:29:36,450
any of the platforms at least the void

00:29:33,160 --> 00:29:36,450
using that in new code

00:29:36,920 --> 00:29:40,040
anything else

00:29:42,690 --> 00:29:52,349
no thank you

00:29:46,130 --> 00:29:52,349

YouTube URL: https://www.youtube.com/watch?v=3BZLkFDnWAg


