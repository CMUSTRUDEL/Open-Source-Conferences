Title: Akademy2021 - What's Cooking for KDE Frameworks 6
Publication date: 2021-06-28
Playlist: Akademy 2021
Description: 
	By Nicolas Fella
With Qt6 released, there is a new major version of the KDE Frameworks on the horizon. Even though the final transition is still a bit in the future, the work towards it is already ongoing since Akademy 2019.
This talk presents the work that happened and is going to happen for KF6. It highlights the core design decisions, goals, and areas where more work is needed.
Learn what you as an application developer need to know about upcoming changes and how you can help shape the foundation of all KDE software.
Captions: 
	00:00:01,130 --> 00:00:08,610
[Music]

00:00:13,280 --> 00:00:16,000
okay

00:00:13,759 --> 00:00:17,440
it looks like to me we should be

00:00:16,000 --> 00:00:20,960
starting so

00:00:17,440 --> 00:00:24,560
good luck thank you

00:00:20,960 --> 00:00:28,480
so i

00:00:24,560 --> 00:00:29,039
hope all of you know by now that q6 is a

00:00:28,480 --> 00:00:32,239
thing

00:00:29,039 --> 00:00:35,040
it was released in the end of 2020

00:00:32,239 --> 00:00:37,360
so that year did bring some positive

00:00:35,040 --> 00:00:41,600
things at least for us

00:00:37,360 --> 00:00:45,200
and if you follow the history of kde

00:00:41,600 --> 00:00:48,079
you know that a new major cute version

00:00:45,200 --> 00:00:49,280
has always meant a new major iteration

00:00:48,079 --> 00:00:51,680
of the

00:00:49,280 --> 00:00:54,239
libraries and software that underpins

00:00:51,680 --> 00:00:57,280
all of kde software

00:00:54,239 --> 00:00:58,879
and this time is not expected to be any

00:00:57,280 --> 00:01:01,680
different

00:00:58,879 --> 00:01:02,800
this is both a very challenging and an

00:01:01,680 --> 00:01:05,040
exciting time

00:01:02,800 --> 00:01:06,960
it's challenging because there will be

00:01:05,040 --> 00:01:08,159
some boarding pains there will be some

00:01:06,960 --> 00:01:11,119
effort there will

00:01:08,159 --> 00:01:13,040
be some kind of breakage but it's also

00:01:11,119 --> 00:01:16,080
an opportunity

00:01:13,040 --> 00:01:19,200
to do things better and

00:01:16,080 --> 00:01:21,840
do this kind of change that we

00:01:19,200 --> 00:01:24,560
usually can't do because of some kind of

00:01:21,840 --> 00:01:27,119
compatibility promise

00:01:24,560 --> 00:01:29,280
so in this talk i don't actually want to

00:01:27,119 --> 00:01:31,759
talk about q6 very much

00:01:29,280 --> 00:01:33,439
instead of i want that i want to focus

00:01:31,759 --> 00:01:36,720
on what's coming on the

00:01:33,439 --> 00:01:39,280
frameworks and library side on our stuff

00:01:36,720 --> 00:01:40,960
and in particular i want to talk about

00:01:39,280 --> 00:01:44,240
what has happened so far

00:01:40,960 --> 00:01:45,360
in terms of effort towards akd framework

00:01:44,240 --> 00:01:47,360
six

00:01:45,360 --> 00:01:49,200
i want to talk about only things that

00:01:47,360 --> 00:01:52,320
are we are planning to do

00:01:49,200 --> 00:01:55,680
or we are expecting to be done

00:01:52,320 --> 00:01:58,159
and i want to focus on some of the

00:01:55,680 --> 00:01:59,680
underlying goals and design decisions

00:01:58,159 --> 00:02:02,880
that were made

00:01:59,680 --> 00:02:06,159
so my primary goal is that

00:02:02,880 --> 00:02:07,520
you as an application developer are not

00:02:06,159 --> 00:02:10,640
caught by surprise

00:02:07,520 --> 00:02:12,080
when some changes are made and i want

00:02:10,640 --> 00:02:15,280
you all to be aware of

00:02:12,080 --> 00:02:18,640
or roughly aware of what's coming so

00:02:15,280 --> 00:02:23,040
that you're aware of and can help us

00:02:18,640 --> 00:02:25,920
actually do it

00:02:23,040 --> 00:02:27,840
so the the whole effort towards key

00:02:25,920 --> 00:02:30,160
framework six

00:02:27,840 --> 00:02:31,920
started even way before q6 was

00:02:30,160 --> 00:02:34,800
officially a thing

00:02:31,920 --> 00:02:36,040
the first time we really talked about it

00:02:34,800 --> 00:02:39,519
was at academy

00:02:36,040 --> 00:02:40,400
2019 in milan back then where we like

00:02:39,519 --> 00:02:43,519
still

00:02:40,400 --> 00:02:46,560
physically met in a room for academy

00:02:43,519 --> 00:02:50,000
sounds weird right now and

00:02:46,560 --> 00:02:52,879
there we had a framebook 6 both

00:02:50,000 --> 00:02:53,680
it wasn't a monday morning i think 9 a.m

00:02:52,879 --> 00:02:57,040
after the

00:02:53,680 --> 00:02:58,560
social event in the evening so if kf6

00:02:57,040 --> 00:03:02,000
turns out to be a mess

00:02:58,560 --> 00:03:05,120
that's why and at that meeting

00:03:02,000 --> 00:03:06,879
we collected some rough design ideas and

00:03:05,120 --> 00:03:09,360
goals and things that we want to get

00:03:06,879 --> 00:03:11,760
done for framework six

00:03:09,360 --> 00:03:13,120
but the most important takeaway message

00:03:11,760 --> 00:03:15,760
from that was

00:03:13,120 --> 00:03:17,360
we need a sprint to talk all about about

00:03:15,760 --> 00:03:22,720
that

00:03:17,360 --> 00:03:26,080
and a sprint we had in november 2019

00:03:22,720 --> 00:03:28,879
uh some of us met in berlin

00:03:26,080 --> 00:03:31,280
for a weekend long sprint about all

00:03:28,879 --> 00:03:34,159
things kf6

00:03:31,280 --> 00:03:35,440
now if you take a closer look at this

00:03:34,159 --> 00:03:38,400
picture

00:03:35,440 --> 00:03:40,799
you will find one person missing that

00:03:38,400 --> 00:03:43,599
you would very much expect to be

00:03:40,799 --> 00:03:44,400
at a framework sprint and that's dummy

00:03:43,599 --> 00:03:47,440
four

00:03:44,400 --> 00:03:50,879
but for some reason he wasn't able to

00:03:47,440 --> 00:03:53,599
come to berlin at that time so

00:03:50,879 --> 00:03:56,560
he made a virtual appearance here

00:03:53,599 --> 00:03:58,959
depicted inside this laptop

00:03:56,560 --> 00:04:01,040
we all find funded quite peculiar at the

00:03:58,959 --> 00:04:03,200
time little did we know

00:04:01,040 --> 00:04:05,200
that just a few months later we would

00:04:03,200 --> 00:04:07,439
all attend sprints that way

00:04:05,200 --> 00:04:08,239
so i guess that's just another example

00:04:07,439 --> 00:04:11,280
of kde

00:04:08,239 --> 00:04:14,720
being ahead of the time

00:04:11,280 --> 00:04:17,280
at this print we talked about design

00:04:14,720 --> 00:04:18,880
goals and design ideas and principles

00:04:17,280 --> 00:04:21,040
that we want to apply for this

00:04:18,880 --> 00:04:23,120
transition

00:04:21,040 --> 00:04:24,960
and i'm going to highlight the most

00:04:23,120 --> 00:04:28,560
important ones

00:04:24,960 --> 00:04:32,400
first of all cute itself promises

00:04:28,560 --> 00:04:36,080
that the migration from q5 to q86

00:04:32,400 --> 00:04:38,240
will be a rather smooth one not without

00:04:36,080 --> 00:04:39,280
completely without of pain but

00:04:38,240 --> 00:04:41,919
manageable

00:04:39,280 --> 00:04:43,040
and we want to achieve the same we don't

00:04:41,919 --> 00:04:47,440
want disruption

00:04:43,040 --> 00:04:52,560
we want evolution instead of revolution

00:04:47,440 --> 00:04:56,400
and we we agreed on a general procedure

00:04:52,560 --> 00:04:58,800
for making breaking api changes so

00:04:56,400 --> 00:05:00,560
if you want to change an api in a

00:04:58,800 --> 00:05:03,520
breaking way

00:05:00,560 --> 00:05:05,199
you should try to introduce the

00:05:03,520 --> 00:05:08,960
replacement api

00:05:05,199 --> 00:05:11,600
right now during the lifetime of kf5

00:05:08,960 --> 00:05:13,919
then we start porting all the users of

00:05:11,600 --> 00:05:17,680
that old api we want to remove

00:05:13,919 --> 00:05:21,199
to the replacement and only once

00:05:17,680 --> 00:05:24,240
all of the significant users are ported

00:05:21,199 --> 00:05:25,360
or at least an effort has been made to

00:05:24,240 --> 00:05:28,720
prove

00:05:25,360 --> 00:05:31,919
that porting is feasible and

00:05:28,720 --> 00:05:33,039
that we don't miss any important use

00:05:31,919 --> 00:05:37,360
case

00:05:33,039 --> 00:05:40,800
and then we deprecate the old api and

00:05:37,360 --> 00:05:42,800
when we are branching 4k framework 6

00:05:40,800 --> 00:05:45,600
then all things that are not just

00:05:42,800 --> 00:05:49,360
deprecated or removed

00:05:45,600 --> 00:05:49,919
so we do that because we want to avoid

00:05:49,360 --> 00:05:53,199
that

00:05:49,919 --> 00:05:54,080
we as frameworks developers in our ivory

00:05:53,199 --> 00:05:56,400
tower

00:05:54,080 --> 00:05:57,600
make some arbitrary decision like oh we

00:05:56,400 --> 00:06:00,160
don't like that api

00:05:57,600 --> 00:06:01,120
that's weird just deprecated and get rid

00:06:00,160 --> 00:06:03,600
of it

00:06:01,120 --> 00:06:05,199
but two years from now some application

00:06:03,600 --> 00:06:06,080
developer wants to port their

00:06:05,199 --> 00:06:09,360
application

00:06:06,080 --> 00:06:11,039
to framework six and they realize

00:06:09,360 --> 00:06:13,120
oh this thing is gone and there's no

00:06:11,039 --> 00:06:16,400
proper replacement for my use case

00:06:13,120 --> 00:06:17,520
so to avoid that we agreed on this basic

00:06:16,400 --> 00:06:19,199
principle

00:06:17,520 --> 00:06:20,960
that means for you as an application

00:06:19,199 --> 00:06:23,520
developer if

00:06:20,960 --> 00:06:25,280
your project gives you a deprecation

00:06:23,520 --> 00:06:28,720
warning for something cute okay

00:06:25,280 --> 00:06:31,120
five during the build then go fix it

00:06:28,720 --> 00:06:32,880
because once you're starting to port to

00:06:31,120 --> 00:06:35,120
q6 and kf6

00:06:32,880 --> 00:06:36,960
this api will be gone this is your

00:06:35,120 --> 00:06:39,600
warning

00:06:36,960 --> 00:06:41,039
and we try to keep the amount of

00:06:39,600 --> 00:06:43,840
breakage that

00:06:41,039 --> 00:06:46,080
cannot be ported ahead of time and can

00:06:43,840 --> 00:06:49,919
only be addressed while actually putting

00:06:46,080 --> 00:06:52,319
from five to six as minimal as possible

00:06:49,919 --> 00:06:54,800
but of course there might be some cases

00:06:52,319 --> 00:06:57,360
where this is not possible so

00:06:54,800 --> 00:06:59,039
we probably can't completely avoid it

00:06:57,360 --> 00:07:03,840
but we want to very much

00:06:59,039 --> 00:07:03,840
keep it minimal

00:07:07,120 --> 00:07:13,280
then of course we want our apis to be

00:07:10,400 --> 00:07:15,199
better but what does better mean in this

00:07:13,280 --> 00:07:19,120
context

00:07:15,199 --> 00:07:23,039
sometimes we have api in our frameworks

00:07:19,120 --> 00:07:25,360
where qt or dc standard library actually

00:07:23,039 --> 00:07:27,599
has a better replacement

00:07:25,360 --> 00:07:30,479
and we want to make use of that where it

00:07:27,599 --> 00:07:32,720
makes sense and try to remove our own

00:07:30,479 --> 00:07:36,319
api where it makes sense

00:07:32,720 --> 00:07:39,840
because often the upstream api

00:07:36,319 --> 00:07:43,360
is equally as good or even better

00:07:39,840 --> 00:07:44,160
and we want to of course use the better

00:07:43,360 --> 00:07:47,360
thing

00:07:44,160 --> 00:07:49,440
and we want to get rid of duplicated

00:07:47,360 --> 00:07:52,800
things where possible

00:07:49,440 --> 00:07:54,479
because we also try to avoid duplication

00:07:52,800 --> 00:07:56,479
in our own apis

00:07:54,479 --> 00:07:58,000
because duplication makes it harder to

00:07:56,479 --> 00:08:00,319
maintain it makes it harder

00:07:58,000 --> 00:08:01,919
to document it makes it harder to test

00:08:00,319 --> 00:08:04,080
it's confusing

00:08:01,919 --> 00:08:05,199
you don't know which one to use in which

00:08:04,080 --> 00:08:08,240
case

00:08:05,199 --> 00:08:12,000
and we wherever

00:08:08,240 --> 00:08:14,400
it makes sense we try to converge to

00:08:12,000 --> 00:08:16,800
a single unified api for things instead

00:08:14,400 --> 00:08:20,479
of duplicated things

00:08:16,800 --> 00:08:22,720
and currently frameworks is built on top

00:08:20,479 --> 00:08:26,400
of c plus plus 11

00:08:22,720 --> 00:08:30,319
but c plus plus 11 c has

00:08:26,400 --> 00:08:34,240
evolved quite a bit since then q6 itself

00:08:30,319 --> 00:08:37,039
will require c plus plus 17. so

00:08:34,240 --> 00:08:38,560
at least at that point we need that for

00:08:37,039 --> 00:08:40,800
our apps as well

00:08:38,560 --> 00:08:41,760
but a lot of kde software actually makes

00:08:40,800 --> 00:08:45,519
use of c plus

00:08:41,760 --> 00:08:48,720
17 now and just today

00:08:45,519 --> 00:08:49,600
we ported frameworks itself to build

00:08:48,720 --> 00:08:52,959
with c

00:08:49,600 --> 00:08:55,519
17. so c plus plus 17

00:08:52,959 --> 00:08:57,040
brings amongst other things some nice

00:08:55,519 --> 00:09:00,560
vocabulary types

00:08:57,040 --> 00:09:04,080
like for example std optional

00:09:00,560 --> 00:09:04,800
that help to make better apis by making

00:09:04,080 --> 00:09:07,839
them

00:09:04,800 --> 00:09:08,800
more descriptive more semantic and

00:09:07,839 --> 00:09:11,279
generally

00:09:08,800 --> 00:09:13,200
easier to understand and use and we want

00:09:11,279 --> 00:09:15,519
to make use of that because we want nice

00:09:13,200 --> 00:09:18,080
apis

00:09:15,519 --> 00:09:20,560
then the transition is of course also

00:09:18,080 --> 00:09:23,040
the time to address all of those

00:09:20,560 --> 00:09:24,880
to do kf6 comments that are littered

00:09:23,040 --> 00:09:28,080
across the code base

00:09:24,880 --> 00:09:31,040
to fix up all those little api things

00:09:28,080 --> 00:09:35,279
that we can't fix right now because of

00:09:31,040 --> 00:09:38,320
strong api stability guarantees

00:09:35,279 --> 00:09:40,399
and that's just something that someone

00:09:38,320 --> 00:09:43,600
dedicated needs to do

00:09:40,399 --> 00:09:46,080
and we also want to remove some of this

00:09:43,600 --> 00:09:48,320
stuff that is not used at all or very

00:09:46,080 --> 00:09:51,680
rarely used because

00:09:48,320 --> 00:09:54,880
unused code is untested code and

00:09:51,680 --> 00:09:56,560
that means it's broken code and

00:09:54,880 --> 00:09:58,160
it just increases the overall

00:09:56,560 --> 00:10:00,080
maintenance burden

00:09:58,160 --> 00:10:02,640
so we want to remove stuff where it

00:10:00,080 --> 00:10:02,640
makes sense

00:10:03,519 --> 00:10:09,760
then what we also want as a design goal

00:10:07,200 --> 00:10:11,680
is a better separation between ports

00:10:09,760 --> 00:10:13,920
that are cue widget specific

00:10:11,680 --> 00:10:15,920
between parts that are quick specific

00:10:13,920 --> 00:10:17,279
and stuff that is shared between the two

00:10:15,920 --> 00:10:20,399
of them

00:10:17,279 --> 00:10:23,120
because right now a lot of our apis

00:10:20,399 --> 00:10:23,760
use types from qt widgets without

00:10:23,120 --> 00:10:27,279
actually

00:10:23,760 --> 00:10:30,480
really needing to and

00:10:27,279 --> 00:10:32,800
by doing that we want to improve the qml

00:10:30,480 --> 00:10:34,800
compatibility of our frameworks

00:10:32,800 --> 00:10:35,920
because currently we have some

00:10:34,800 --> 00:10:39,200
functionality

00:10:35,920 --> 00:10:40,720
for example spell checking via sonnet

00:10:39,200 --> 00:10:42,880
that works great for cute widgets

00:10:40,720 --> 00:10:44,160
applications but not for quick

00:10:42,880 --> 00:10:46,560
applications

00:10:44,160 --> 00:10:47,839
and since the trend goes very much

00:10:46,560 --> 00:10:50,560
towards writing new

00:10:47,839 --> 00:10:52,399
software in cube quick we of course want

00:10:50,560 --> 00:10:54,000
our nice frameworks to work there as

00:10:52,399 --> 00:10:57,279
well

00:10:54,000 --> 00:11:01,440
a common example of this is using

00:10:57,279 --> 00:11:05,040
a q widget pointer to represent a window

00:11:01,440 --> 00:11:08,560
that works but it's tied to kid widgets

00:11:05,040 --> 00:11:11,120
we actually have a common base class

00:11:08,560 --> 00:11:12,640
that is in cute gui and that's what thus

00:11:11,120 --> 00:11:15,200
works with cute which

00:11:12,640 --> 00:11:17,040
and keep quick and that is q window and

00:11:15,200 --> 00:11:19,600
by porting stuff from taking a

00:11:17,040 --> 00:11:20,800
q widget pointer to using ak window

00:11:19,600 --> 00:11:24,560
pointer

00:11:20,800 --> 00:11:25,839
we improve things then what we also want

00:11:24,560 --> 00:11:29,120
to avoid is

00:11:25,839 --> 00:11:31,440
having a quick application and then

00:11:29,120 --> 00:11:32,480
somewhere for example in a file

00:11:31,440 --> 00:11:35,920
operation an

00:11:32,480 --> 00:11:37,519
error occurs and ko pops up a

00:11:35,920 --> 00:11:39,600
widget-based

00:11:37,519 --> 00:11:41,760
dialog to inform the user that something

00:11:39,600 --> 00:11:44,079
has gone wrong

00:11:41,760 --> 00:11:45,920
that does not look particularly nice

00:11:44,079 --> 00:11:49,920
especially it looks really alien

00:11:45,920 --> 00:11:51,680
on android so in order to improve that

00:11:49,920 --> 00:11:55,200
we want to achieve a

00:11:51,680 --> 00:11:57,200
a better logic and ui separation

00:11:55,200 --> 00:12:00,560
so we can plug different ui

00:11:57,200 --> 00:12:03,600
implementations on top of the same logic

00:12:00,560 --> 00:12:06,000
and a very good reason to avoid

00:12:03,600 --> 00:12:07,680
acute widgets dependency in your qt

00:12:06,000 --> 00:12:10,800
quick application

00:12:07,680 --> 00:12:13,920
is that it saves you binary size the

00:12:10,800 --> 00:12:17,519
cute widget library is something like

00:12:13,920 --> 00:12:19,920
5 megabytes in size and if your android

00:12:17,519 --> 00:12:25,839
apk is 5 megabytes smaller

00:12:19,920 --> 00:12:25,839
that's pretty nice

00:12:27,440 --> 00:12:32,240
what we also want to do is reduce the

00:12:30,519 --> 00:12:34,399
dependencies between

00:12:32,240 --> 00:12:35,760
our frameworks what you see on the

00:12:34,399 --> 00:12:39,519
screen is

00:12:35,760 --> 00:12:42,320
the dependency graph of kio and

00:12:39,519 --> 00:12:43,360
the fact that you probably can't really

00:12:42,320 --> 00:12:46,560
read

00:12:43,360 --> 00:12:50,639
this graph kind of proves what

00:12:46,560 --> 00:12:52,720
what i'm talking about we hope that by

00:12:50,639 --> 00:12:53,839
reducing the dependencies between the

00:12:52,720 --> 00:12:56,240
frameworks

00:12:53,839 --> 00:12:58,320
we make things a bit easier to deploy

00:12:56,240 --> 00:12:59,360
because not all dependencies are easily

00:12:58,320 --> 00:13:03,519
deployable

00:12:59,360 --> 00:13:04,560
on our platforms and automating a lot of

00:13:03,519 --> 00:13:06,720
dependencies

00:13:04,560 --> 00:13:07,600
that depend on each other is not that

00:13:06,720 --> 00:13:09,440
easy

00:13:07,600 --> 00:13:10,959
as it is with just a handful of

00:13:09,440 --> 00:13:14,160
dependencies with

00:13:10,959 --> 00:13:15,680
no dependencies themselves it saves

00:13:14,160 --> 00:13:18,959
installation size

00:13:15,680 --> 00:13:21,040
which is kind of not that much of an

00:13:18,959 --> 00:13:23,360
issue on the linux desktop

00:13:21,040 --> 00:13:25,120
it can become an issue in embedded

00:13:23,360 --> 00:13:28,320
deployment

00:13:25,120 --> 00:13:29,920
and by reducing the dependency tree we

00:13:28,320 --> 00:13:30,639
hope that we make frameworks more

00:13:29,920 --> 00:13:34,320
attractive

00:13:30,639 --> 00:13:36,399
for outside users because right now what

00:13:34,320 --> 00:13:37,440
we often hear is oh i don't i don't want

00:13:36,399 --> 00:13:40,399
this because

00:13:37,440 --> 00:13:41,360
it drags half of kde with it which is of

00:13:40,399 --> 00:13:46,320
course

00:13:41,360 --> 00:13:46,320
but it's it's an impression that sticks

00:13:46,839 --> 00:13:51,519
around

00:13:48,560 --> 00:13:54,320
then we want a better separation between

00:13:51,519 --> 00:13:56,639
interfaces and implementations

00:13:54,320 --> 00:13:57,600
because some frameworks mix the two of

00:13:56,639 --> 00:14:00,639
them

00:13:57,600 --> 00:14:03,519
for example we have password storage via

00:14:00,639 --> 00:14:05,680
key wallet k-wallet is both an

00:14:03,519 --> 00:14:06,959
implementation of a password storage

00:14:05,680 --> 00:14:10,880
system

00:14:06,959 --> 00:14:14,240
and an api for applications to use it

00:14:10,880 --> 00:14:17,680
but on gnome for example we

00:14:14,240 --> 00:14:20,880
gnome has its own known key rings thing

00:14:17,680 --> 00:14:22,480
we could use k wallet there it works

00:14:20,880 --> 00:14:25,279
because it's just linux

00:14:22,480 --> 00:14:26,240
but it would be much nicer if for

00:14:25,279 --> 00:14:28,399
example

00:14:26,240 --> 00:14:31,440
dolphin was running gnome all the

00:14:28,399 --> 00:14:34,160
passwords would be stored in no hearing

00:14:31,440 --> 00:14:36,720
on windows on mac os and android

00:14:34,160 --> 00:14:38,880
keyboard does not really work at all

00:14:36,720 --> 00:14:41,839
and all of those platforms have some

00:14:38,880 --> 00:14:44,560
form of native password storage system

00:14:41,839 --> 00:14:45,680
which we want to use there and it would

00:14:44,560 --> 00:14:49,199
be nice if

00:14:45,680 --> 00:14:50,000
we had a single api that applications

00:14:49,199 --> 00:14:52,000
can use

00:14:50,000 --> 00:14:53,760
that would then transparently use

00:14:52,000 --> 00:14:57,680
whatever platform back-end

00:14:53,760 --> 00:15:00,800
is suited best a similar story is

00:14:57,680 --> 00:15:03,760
sharing things via purpose purpose

00:15:00,800 --> 00:15:06,560
provides an implementation of share this

00:15:03,760 --> 00:15:10,079
file or share this url with

00:15:06,560 --> 00:15:13,440
for example nexcloud or kdconnect or

00:15:10,079 --> 00:15:16,720
some other application and the linux

00:15:13,440 --> 00:15:19,839
network works nice on android

00:15:16,720 --> 00:15:20,320
we have the android system has its own

00:15:19,839 --> 00:15:22,320
sharing

00:15:20,320 --> 00:15:23,600
sys implementation provided by the

00:15:22,320 --> 00:15:25,760
system

00:15:23,600 --> 00:15:26,639
which we want to use when running on

00:15:25,760 --> 00:15:29,120
android

00:15:26,639 --> 00:15:30,160
and here again it would be much nicer if

00:15:29,120 --> 00:15:33,199
we had a

00:15:30,160 --> 00:15:35,920
an api an interface api that

00:15:33,199 --> 00:15:37,680
allows to use any of these

00:15:35,920 --> 00:15:41,120
implementations without actually

00:15:37,680 --> 00:15:41,600
worrying about it and also same story

00:15:41,120 --> 00:15:44,480
with

00:15:41,600 --> 00:15:45,279
file indexing which on plasma is done by

00:15:44,480 --> 00:15:47,759
blue

00:15:45,279 --> 00:15:49,040
and gnomes and we have known tracker

00:15:47,759 --> 00:15:51,040
other platforms

00:15:49,040 --> 00:15:52,079
probably have their own implementations

00:15:51,040 --> 00:15:55,519
on it of

00:15:52,079 --> 00:15:57,600
it and we we again want

00:15:55,519 --> 00:16:01,360
a simple interface to use all of them

00:15:57,600 --> 00:16:01,360
without needing to worry about them

00:16:02,320 --> 00:16:07,600
somewhat tying into this we want better

00:16:05,920 --> 00:16:08,639
cross-platform support for our

00:16:07,600 --> 00:16:11,680
frameworks

00:16:08,639 --> 00:16:15,040
because cue this cross-platform itself

00:16:11,680 --> 00:16:18,000
kde software originally

00:16:15,040 --> 00:16:19,920
was very linux specific but we got a lot

00:16:18,000 --> 00:16:21,279
better in that regard and lots of our

00:16:19,920 --> 00:16:23,519
applications

00:16:21,279 --> 00:16:24,720
do work on other platforms and that's

00:16:23,519 --> 00:16:28,160
something we

00:16:24,720 --> 00:16:31,279
want to encourage developers to do but

00:16:28,160 --> 00:16:33,759
some of our frameworks could help more

00:16:31,279 --> 00:16:33,759
with that

00:16:34,240 --> 00:16:38,720
first of all we we want this kind of

00:16:36,720 --> 00:16:40,959
interface and implementation separation

00:16:38,720 --> 00:16:44,000
that i talked about earlier before

00:16:40,959 --> 00:16:46,800
sometimes we have this separation

00:16:44,000 --> 00:16:48,399
but an implementation for a specific

00:16:46,800 --> 00:16:50,720
platform is missing

00:16:48,399 --> 00:16:52,320
for example key notifications does a

00:16:50,720 --> 00:16:54,320
pretty great job at that

00:16:52,320 --> 00:16:56,560
because it supports linux it supports

00:16:54,320 --> 00:16:57,600
android it supports windows it supports

00:16:56,560 --> 00:17:00,399
mac os

00:16:57,600 --> 00:17:00,720
but for example it does not support ios

00:17:00,399 --> 00:17:03,759
so

00:17:00,720 --> 00:17:05,760
adding an ios backend would make k

00:17:03,759 --> 00:17:09,360
notifications a very attractive thing to

00:17:05,760 --> 00:17:12,160
use for qt application developers

00:17:09,360 --> 00:17:12,720
then as i mentioned some dependencies

00:17:12,160 --> 00:17:15,120
are

00:17:12,720 --> 00:17:16,240
hard or impossible to deploy on some

00:17:15,120 --> 00:17:19,280
platforms

00:17:16,240 --> 00:17:21,360
common example is dbus which we use for

00:17:19,280 --> 00:17:25,439
a lot of things on linux

00:17:21,360 --> 00:17:29,360
but on windows and mac it only kind of

00:17:25,439 --> 00:17:32,960
works and usually doesn't make sense

00:17:29,360 --> 00:17:36,880
on android it just doesn't work at all

00:17:32,960 --> 00:17:39,200
but some of our frameworks use dbus

00:17:36,880 --> 00:17:40,720
in in their apis or have it as a

00:17:39,200 --> 00:17:43,600
dependency

00:17:40,720 --> 00:17:44,400
so we we want to try to avoid as much as

00:17:43,600 --> 00:17:47,760
possible

00:17:44,400 --> 00:17:49,679
to pull in it as a dependency on windows

00:17:47,760 --> 00:17:53,120
or android and mac os

00:17:49,679 --> 00:17:53,679
that makes it easier to deploy and avoid

00:17:53,120 --> 00:17:57,360
some

00:17:53,679 --> 00:18:00,640
some failure cases similar story with

00:17:57,360 --> 00:18:02,960
x11 and wayland which we use directly

00:18:00,640 --> 00:18:04,720
in some of our frameworks like a windows

00:18:02,960 --> 00:18:07,679
system

00:18:04,720 --> 00:18:09,600
and what we also try to do is identify

00:18:07,679 --> 00:18:12,400
recurring problems

00:18:09,600 --> 00:18:14,000
that we have not yet solved in queued or

00:18:12,400 --> 00:18:17,919
in kf5

00:18:14,000 --> 00:18:20,160
and add new apis to solve those problems

00:18:17,919 --> 00:18:22,160
but one thing that comes to my mind is

00:18:20,160 --> 00:18:24,080
that in a couple of applications we have

00:18:22,160 --> 00:18:26,400
implementations for

00:18:24,080 --> 00:18:27,200
inhibiting screen locking and screen

00:18:26,400 --> 00:18:30,400
time out

00:18:27,200 --> 00:18:32,640
for various various different platforms

00:18:30,400 --> 00:18:33,919
and it would be very nice to have a

00:18:32,640 --> 00:18:36,720
single framework

00:18:33,919 --> 00:18:38,799
to do that so we have a nice

00:18:36,720 --> 00:18:41,919
cross-platform api

00:18:38,799 --> 00:18:42,480
that's not really related to kf6 though

00:18:41,919 --> 00:18:47,120
we

00:18:42,480 --> 00:18:47,120
can add that api anytime we like

00:18:47,840 --> 00:18:52,000
then it's also time to retire some of

00:18:50,960 --> 00:18:54,559
the frameworks

00:18:52,000 --> 00:18:57,200
that have served us well in the past but

00:18:54,559 --> 00:18:59,600
are not really relevant anymore

00:18:57,200 --> 00:19:00,720
ever because they model deprecated

00:18:59,600 --> 00:19:04,000
concepts

00:19:00,720 --> 00:19:07,440
build on deprecated apis

00:19:04,000 --> 00:19:10,000
or are just not generally useful anymore

00:19:07,440 --> 00:19:12,400
first thing that comes to mind is kde

00:19:10,000 --> 00:19:15,039
ellipse for support

00:19:12,400 --> 00:19:16,559
which was only ever meant to be a

00:19:15,039 --> 00:19:21,280
pouring aid from

00:19:16,559 --> 00:19:23,679
q4 to q5 but it's about time we

00:19:21,280 --> 00:19:26,400
get done with that so there's no need

00:19:23,679 --> 00:19:30,480
for kde ellipse for support anymore

00:19:26,400 --> 00:19:32,080
then khtml has served us amazingly well

00:19:30,480 --> 00:19:35,679
in the past

00:19:32,080 --> 00:19:36,000
so amazingly that other people picked it

00:19:35,679 --> 00:19:38,160
up

00:19:36,000 --> 00:19:40,799
and turn it into something else which

00:19:38,160 --> 00:19:44,799
ironically we tend to use right now

00:19:40,799 --> 00:19:46,480
which is cute web engine a similar story

00:19:44,799 --> 00:19:50,080
with kde webkit

00:19:46,480 --> 00:19:50,880
and kjs and khs embed so they are

00:19:50,080 --> 00:19:53,840
generally

00:19:50,880 --> 00:19:56,080
not used anymore we even put conqueror

00:19:53,840 --> 00:19:59,440
away from khtml so

00:19:56,080 --> 00:20:00,960
it's time to retire those similar story

00:19:59,440 --> 00:20:03,200
of cross

00:20:00,960 --> 00:20:04,000
there's a better replacement for

00:20:03,200 --> 00:20:07,600
scripting

00:20:04,000 --> 00:20:09,679
which is qjs engine and cross is not

00:20:07,600 --> 00:20:12,640
really used by much anymore so it's

00:20:09,679 --> 00:20:16,080
probably time to retire that as well

00:20:12,640 --> 00:20:19,280
okay media player and kxml or pc client

00:20:16,080 --> 00:20:24,159
were only ever used by

00:20:19,280 --> 00:20:27,679
two applications uh for each

00:20:24,159 --> 00:20:30,000
and those are obsolete as well so

00:20:27,679 --> 00:20:32,799
since nothing actively maintained use

00:20:30,000 --> 00:20:36,720
them and nobody maintains them we just

00:20:32,799 --> 00:20:39,919
should sunset them and then there's kde

00:20:36,720 --> 00:20:42,559
in it which is an attempt to

00:20:39,919 --> 00:20:43,600
speed up application launch times by

00:20:42,559 --> 00:20:47,440
doing some

00:20:43,600 --> 00:20:49,200
clever things unfortunately it turned

00:20:47,440 --> 00:20:51,919
out that in a lot of

00:20:49,200 --> 00:20:54,080
cases we don't actually make use of them

00:20:51,919 --> 00:20:56,400
so we did some investigations and some

00:20:54,080 --> 00:20:58,400
profiling and it turns out

00:20:56,400 --> 00:21:00,080
these days it's not really useful at all

00:20:58,400 --> 00:21:01,280
and doesn't really provide an

00:21:00,080 --> 00:21:05,280
improvement

00:21:01,280 --> 00:21:05,280
so it should go as well

00:21:06,880 --> 00:21:13,360
then once we have established these

00:21:09,919 --> 00:21:15,120
design principles we split up in some

00:21:13,360 --> 00:21:17,520
smaller groups

00:21:15,120 --> 00:21:18,720
and made a list of all the frameworks

00:21:17,520 --> 00:21:21,039
and distributed them

00:21:18,720 --> 00:21:22,799
across the groups and then each group

00:21:21,039 --> 00:21:28,000
looked at some of the frameworks

00:21:22,799 --> 00:21:30,400
and evaluated how well they fit the goal

00:21:28,000 --> 00:21:32,640
and we made some notes and then some

00:21:30,400 --> 00:21:34,320
action items which we then discussed in

00:21:32,640 --> 00:21:37,760
a logic group

00:21:34,320 --> 00:21:41,600
and what we ended up with is a nice big

00:21:37,760 --> 00:21:44,720
fabricator workboard you can find it

00:21:41,600 --> 00:21:46,360
on that link or to search for kf6 it

00:21:44,720 --> 00:21:49,760
currently contains

00:21:46,360 --> 00:21:50,720
384 tasks some of them done some of them

00:21:49,760 --> 00:21:52,960
not

00:21:50,720 --> 00:21:54,240
some of them are more mega tasks or

00:21:52,960 --> 00:21:56,960
design goals

00:21:54,240 --> 00:21:58,080
some of them are very actionable some of

00:21:56,960 --> 00:22:01,280
them need to

00:21:58,080 --> 00:22:04,170
wait before to the kf6

00:22:01,280 --> 00:22:05,280
branching a lot of them can be done now

00:22:04,170 --> 00:22:07,919
[Music]

00:22:05,280 --> 00:22:08,559
so i would like to encourage everyone

00:22:07,919 --> 00:22:11,760
here to

00:22:08,559 --> 00:22:14,559
go have a look at that workboard and

00:22:11,760 --> 00:22:15,760
pick up some tasks and help us get them

00:22:14,559 --> 00:22:17,760
done

00:22:15,760 --> 00:22:20,320
because the work we're doing right now

00:22:17,760 --> 00:22:20,960
will shape the future of our software

00:22:20,320 --> 00:22:23,360
for the

00:22:20,960 --> 00:22:27,200
foreseeable future so that work is

00:22:23,360 --> 00:22:29,520
hugely important

00:22:27,200 --> 00:22:31,520
we also agreed back then on the first

00:22:29,520 --> 00:22:32,960
sprint that we would like to have a

00:22:31,520 --> 00:22:36,799
follow-up sprint

00:22:32,960 --> 00:22:36,799
something like six months later

00:22:36,880 --> 00:22:44,559
for obvious reasons that did not happen

00:22:41,039 --> 00:22:46,559
and it was not until earlier this year

00:22:44,559 --> 00:22:47,840
that we managed to have a follow-up

00:22:46,559 --> 00:22:50,960
sprint

00:22:47,840 --> 00:22:52,480
completely virtual of course but that

00:22:50,960 --> 00:22:55,600
does not mean that

00:22:52,480 --> 00:23:00,159
nothing has happened in between

00:22:55,600 --> 00:23:01,919
because a lot of people did what i just

00:23:00,159 --> 00:23:04,480
encouraged you to they went to the

00:23:01,919 --> 00:23:04,960
workboard picked up some tasks got them

00:23:04,480 --> 00:23:07,520
done

00:23:04,960 --> 00:23:10,000
discussed more refined tasks split them

00:23:07,520 --> 00:23:13,919
out edit new ideas

00:23:10,000 --> 00:23:16,799
and it was it was pretty productive

00:23:13,919 --> 00:23:17,679
and at the second sprint we got together

00:23:16,799 --> 00:23:20,480
to

00:23:17,679 --> 00:23:22,400
discuss some of the open questions some

00:23:20,480 --> 00:23:23,520
of the things that needed input for more

00:23:22,400 --> 00:23:26,880
people

00:23:23,520 --> 00:23:30,000
and just refined some of the tasks to

00:23:26,880 --> 00:23:33,760
to be more precise and more actionable

00:23:30,000 --> 00:23:35,360
and we also agreed that we would like to

00:23:33,760 --> 00:23:37,760
have some kind of

00:23:35,360 --> 00:23:38,480
regular meeting to talk about frameworks

00:23:37,760 --> 00:23:41,919
things

00:23:38,480 --> 00:23:45,679
so currently every saturday at

00:23:41,919 --> 00:23:48,720
1pm utc we meet on big blue button

00:23:45,679 --> 00:23:49,679
to go over some of the open tasks for an

00:23:48,720 --> 00:23:52,400
hour

00:23:49,679 --> 00:23:53,120
and discussed some things where people

00:23:52,400 --> 00:23:55,440
got stuck

00:23:53,120 --> 00:23:57,200
and need help or improved or discussed

00:23:55,440 --> 00:23:59,200
questions around that

00:23:57,200 --> 00:24:03,520
so if you're interested in framework six

00:23:59,200 --> 00:24:03,520
then come join us on a saturday

00:24:03,679 --> 00:24:08,960
so now i want to present some of the

00:24:06,480 --> 00:24:09,360
highlights of the technical aspects that

00:24:08,960 --> 00:24:12,880
we

00:24:09,360 --> 00:24:15,760
agreed on or already did this is by no

00:24:12,880 --> 00:24:18,720
means an exhaustive list of things

00:24:15,760 --> 00:24:20,480
i just picked some of the things that i

00:24:18,720 --> 00:24:23,120
consider the most important or most

00:24:20,480 --> 00:24:23,120
impactful

00:24:23,360 --> 00:24:29,120
first of all there is the k-service type

00:24:27,360 --> 00:24:33,360
trader class

00:24:29,120 --> 00:24:35,600
which manages services a service can be

00:24:33,360 --> 00:24:36,960
a couple of different things it can be

00:24:35,600 --> 00:24:40,799
an application

00:24:36,960 --> 00:24:44,240
it can be a plugin it can be a k

00:24:40,799 --> 00:24:45,440
part which is mostly just a special case

00:24:44,240 --> 00:24:48,640
of a plugin

00:24:45,440 --> 00:24:51,679
it can be a kconfig module which again

00:24:48,640 --> 00:24:54,559
is mostly a special case of a plugin

00:24:51,679 --> 00:24:57,679
it can be pretty much anything that is

00:24:54,559 --> 00:25:01,120
described by a desktop file

00:24:57,679 --> 00:25:03,440
and key service type trader manages a

00:25:01,120 --> 00:25:04,799
global database of all the available

00:25:03,440 --> 00:25:08,159
services

00:25:04,799 --> 00:25:10,159
and you can use it to query that

00:25:08,159 --> 00:25:12,880
database

00:25:10,159 --> 00:25:14,240
it's done via some specialized trader

00:25:12,880 --> 00:25:17,360
language

00:25:14,240 --> 00:25:20,480
and you can write queries like give me

00:25:17,360 --> 00:25:23,360
all of the applications that i installed

00:25:20,480 --> 00:25:25,440
give me the preferred image viewer give

00:25:23,360 --> 00:25:28,480
me all of the applications

00:25:25,440 --> 00:25:32,000
that can handle png files

00:25:28,480 --> 00:25:35,279
give me vk part preferred to open

00:25:32,000 --> 00:25:36,960
pdf files give me only plugins for kde

00:25:35,279 --> 00:25:39,200
connect

00:25:36,960 --> 00:25:40,400
but as it turns out using that trader

00:25:39,200 --> 00:25:43,039
language is

00:25:40,400 --> 00:25:44,960
not very intuitive and people would

00:25:43,039 --> 00:25:48,240
rather much

00:25:44,960 --> 00:25:50,559
write c plus plus codes than some

00:25:48,240 --> 00:25:53,440
domain specific language because it's

00:25:50,559 --> 00:25:56,559
much easier to approach and understand

00:25:53,440 --> 00:25:58,960
and mixing things together that

00:25:56,559 --> 00:26:00,640
are not really the same like

00:25:58,960 --> 00:26:03,679
applications and plugins

00:26:00,640 --> 00:26:06,000
doesn't really make sense since a couple

00:26:03,679 --> 00:26:08,799
of years we actually have a new way

00:26:06,000 --> 00:26:09,200
of querying and loading plugins which is

00:26:08,799 --> 00:26:12,080
the

00:26:09,200 --> 00:26:12,480
k plugin loader mk plugin metadata api

00:26:12,080 --> 00:26:16,080
and k

00:26:12,480 --> 00:26:18,080
core add-ons and over the years

00:26:16,080 --> 00:26:19,840
a lot of the plug-in stuff was ported to

00:26:18,080 --> 00:26:23,120
use that

00:26:19,840 --> 00:26:26,799
and so we agreed that we want to

00:26:23,120 --> 00:26:28,799
use for all of the plug-in loading we

00:26:26,799 --> 00:26:30,559
have in our applications to this new

00:26:28,799 --> 00:26:34,000
approach

00:26:30,559 --> 00:26:35,200
then we also got around to have a better

00:26:34,000 --> 00:26:37,440
replacement

00:26:35,200 --> 00:26:39,039
for querying applications which is k

00:26:37,440 --> 00:26:41,360
application fader

00:26:39,039 --> 00:26:42,880
which is pretty much like a service type

00:26:41,360 --> 00:26:45,360
trader

00:26:42,880 --> 00:26:46,000
except only for applications and instead

00:26:45,360 --> 00:26:49,279
of a

00:26:46,000 --> 00:26:52,159
domain specific language we use a c plus

00:26:49,279 --> 00:26:54,159
function to do arbitrary filtering and

00:26:52,159 --> 00:26:54,960
you can use that to answer questions

00:26:54,159 --> 00:26:57,600
like

00:26:54,960 --> 00:27:00,080
what's the preferred image view or give

00:26:57,600 --> 00:27:02,320
me all the applications that can open

00:27:00,080 --> 00:27:06,080
pdf files

00:27:02,320 --> 00:27:09,279
and for k parts we

00:27:06,080 --> 00:27:10,080
came up with a new uk park loader which

00:27:09,279 --> 00:27:12,320
is

00:27:10,080 --> 00:27:13,760
very similar to the application trader

00:27:12,320 --> 00:27:17,039
just for k parts

00:27:13,760 --> 00:27:21,279
so you can tell it give me an instance

00:27:17,039 --> 00:27:23,679
of a k port that can handle pdf files

00:27:21,279 --> 00:27:25,840
and overall pretty much all of the use

00:27:23,679 --> 00:27:27,520
cases for k server step trader had

00:27:25,840 --> 00:27:30,080
better replacements

00:27:27,520 --> 00:27:31,840
so it's natural to just remove the whole

00:27:30,080 --> 00:27:34,480
thing

00:27:31,840 --> 00:27:36,000
another framework that is expected to

00:27:34,480 --> 00:27:39,360
have larger changes is

00:27:36,000 --> 00:27:41,840
k icon themes in particular we want to

00:27:39,360 --> 00:27:44,000
remove the k icon loader usage

00:27:41,840 --> 00:27:48,000
because there is a better upstream api

00:27:44,000 --> 00:27:50,080
in queued which is queue icon from theme

00:27:48,000 --> 00:27:51,039
what k i can loader and q i can from

00:27:50,080 --> 00:27:53,360
theme do

00:27:51,039 --> 00:27:54,480
is you give it an icon name and what you

00:27:53,360 --> 00:27:58,399
get in return is

00:27:54,480 --> 00:28:00,960
a queue icon or a pix map

00:27:58,399 --> 00:28:02,399
that corresponds to the icon you

00:28:00,960 --> 00:28:05,279
requested

00:28:02,399 --> 00:28:06,080
and unfortunately k icon loader has some

00:28:05,279 --> 00:28:09,200
troubles

00:28:06,080 --> 00:28:10,880
or is not that intuitive to use for high

00:28:09,200 --> 00:28:14,000
dpi scenarios

00:28:10,880 --> 00:28:16,880
so just by porting from the kde api to

00:28:14,000 --> 00:28:18,000
the qt api we fixed the bug of high dpi

00:28:16,880 --> 00:28:21,120
rendering issues

00:28:18,000 --> 00:28:22,720
which of course is nice then i've talked

00:28:21,120 --> 00:28:25,120
about k wallet and the

00:28:22,720 --> 00:28:26,320
interface implementation problem and as

00:28:25,120 --> 00:28:29,200
it turns out

00:28:26,320 --> 00:28:31,279
there's already a third party qt library

00:28:29,200 --> 00:28:34,480
that does exactly what we need

00:28:31,279 --> 00:28:38,080
and that is cute keychain so what

00:28:34,480 --> 00:28:41,440
we are planning to do is to acquire

00:28:38,080 --> 00:28:43,840
keychain as a kde framework and port

00:28:41,440 --> 00:28:44,720
all of our software to use that one as

00:28:43,840 --> 00:28:47,279
an interface

00:28:44,720 --> 00:28:49,200
2k wallet which then becomes an

00:28:47,279 --> 00:28:51,039
implementation detail

00:28:49,200 --> 00:28:54,240
and as an interface to all of the other

00:28:51,039 --> 00:28:59,919
backends i just talked about

00:28:54,240 --> 00:29:03,440
last year at academy 4 had a talk about

00:28:59,919 --> 00:29:04,559
all the new jobs in kio where he talked

00:29:03,440 --> 00:29:08,320
about

00:29:04,559 --> 00:29:11,039
reworking k-run into a couple of new

00:29:08,320 --> 00:29:15,440
jobs which are application launcher job

00:29:11,039 --> 00:29:19,360
url launcher job and

00:29:15,440 --> 00:29:22,399
a command launcher job and those achieve

00:29:19,360 --> 00:29:24,880
this separation between

00:29:22,399 --> 00:29:26,000
you witches part and none cube which is

00:29:24,880 --> 00:29:28,559
part and this

00:29:26,000 --> 00:29:29,840
separation between logic and ui

00:29:28,559 --> 00:29:33,200
representation

00:29:29,840 --> 00:29:35,919
much better than the old k-run did so

00:29:33,200 --> 00:29:36,480
what you can do right now is plug

00:29:35,919 --> 00:29:39,279
different

00:29:36,480 --> 00:29:42,320
ui delegates in the same job so you can

00:29:39,279 --> 00:29:44,960
have a delegate that pops up aq dialog

00:29:42,320 --> 00:29:46,000
we created a new one that pops up a

00:29:44,960 --> 00:29:49,039
notification

00:29:46,000 --> 00:29:51,360
which for planar use cases is much nicer

00:29:49,039 --> 00:29:53,360
and you could write your own thing that

00:29:51,360 --> 00:29:56,559
integrates into you

00:29:53,360 --> 00:29:59,279
quick application and

00:29:56,559 --> 00:30:01,360
while i was researching this talk i came

00:29:59,279 --> 00:30:04,960
across an academy talk from

00:30:01,360 --> 00:30:09,200
from 2019 from david 4

00:30:04,960 --> 00:30:12,640
about the new kde frameworks five

00:30:09,200 --> 00:30:16,000
and there he mentioned to remove k2

00:30:12,640 --> 00:30:16,960
invocation this time we we really mean

00:30:16,000 --> 00:30:19,600
it

00:30:16,960 --> 00:30:21,279
what k2 and vocation does right now is

00:30:19,600 --> 00:30:24,159
sort of twofold

00:30:21,279 --> 00:30:25,200
one use case for it is launching things

00:30:24,159 --> 00:30:27,520
via kde

00:30:25,200 --> 00:30:30,159
in it but as i've mentioned earlier we

00:30:27,520 --> 00:30:33,919
actually want to remove kde in it

00:30:30,159 --> 00:30:37,120
so that api is not really useful anymore

00:30:33,919 --> 00:30:38,640
and we should use one of those launcher

00:30:37,120 --> 00:30:42,159
jobs that i've talked

00:30:38,640 --> 00:30:45,039
about earlier the other use case

00:30:42,159 --> 00:30:48,240
is stuff like launching a mail client

00:30:45,039 --> 00:30:51,840
launching the help center

00:30:48,240 --> 00:30:54,480
and to do that we are probably going to

00:30:51,840 --> 00:30:57,600
add some new api

00:30:54,480 --> 00:30:58,240
um on top of the aforementioned launcher

00:30:57,600 --> 00:31:01,519
jobs

00:30:58,240 --> 00:31:04,320
so they have a domain specific interface

00:31:01,519 --> 00:31:06,399
and then use the common mechanism to

00:31:04,320 --> 00:31:08,799
actually launch the job

00:31:06,399 --> 00:31:10,480
and in order to improve dqml support of

00:31:08,799 --> 00:31:13,039
the frameworks we

00:31:10,480 --> 00:31:14,799
want to break up the existing k

00:31:13,039 --> 00:31:17,600
declarative framework

00:31:14,799 --> 00:31:19,279
because its purpose is again a bit

00:31:17,600 --> 00:31:23,679
twofold

00:31:19,279 --> 00:31:26,559
it contains first of all some generally

00:31:23,679 --> 00:31:27,679
useful uh cute quick and qmil related

00:31:26,559 --> 00:31:31,200
classes

00:31:27,679 --> 00:31:33,760
like for example all the qml kcms have a

00:31:31,200 --> 00:31:37,200
common base class there

00:31:33,760 --> 00:31:38,159
and it also contains a couple of qml

00:31:37,200 --> 00:31:41,279
bindings for

00:31:38,159 --> 00:31:44,799
other frameworks and

00:31:41,279 --> 00:31:48,000
it turns out that due to all of this

00:31:44,799 --> 00:31:49,760
the thing depends on kao which has this

00:31:48,000 --> 00:31:51,440
horrible dependency tree that you have

00:31:49,760 --> 00:31:55,200
seen earlier

00:31:51,440 --> 00:31:58,559
and that makes carry declarative

00:31:55,200 --> 00:32:00,960
very not nice to use

00:31:58,559 --> 00:32:03,679
and people are scared to use it because

00:32:00,960 --> 00:32:07,440
all of the dependencies attracts in

00:32:03,679 --> 00:32:10,159
so we hope that by moving all of these

00:32:07,440 --> 00:32:11,519
frameworks bindings into the respective

00:32:10,159 --> 00:32:13,360
frameworks

00:32:11,519 --> 00:32:14,559
instead of having them all in a single

00:32:13,360 --> 00:32:18,799
framework

00:32:14,559 --> 00:32:21,840
and by reworking some of the internals

00:32:18,799 --> 00:32:24,159
to remove to reduce that dependency tree

00:32:21,840 --> 00:32:27,519
a lot and make it more attractive to use

00:32:24,159 --> 00:32:28,240
and thus improve the qml support of the

00:32:27,519 --> 00:32:31,200
overall

00:32:28,240 --> 00:32:31,200
frameworks product

00:32:31,519 --> 00:32:35,919
again this was by no means an exhaustive

00:32:33,600 --> 00:32:38,000
list there's still a lot of going

00:32:35,919 --> 00:32:39,840
of it going on have a look at our

00:32:38,000 --> 00:32:43,919
workboard

00:32:39,840 --> 00:32:46,559
join us on for example kde devil

00:32:43,919 --> 00:32:47,919
to talk about anything you want to talk

00:32:46,559 --> 00:32:50,159
about

00:32:47,919 --> 00:32:52,720
and i'm not the end do you have any

00:32:50,159 --> 00:32:55,279
questions for me

00:32:52,720 --> 00:32:56,000
thank you very much nicholas for that i

00:32:55,279 --> 00:32:59,120
do see

00:32:56,000 --> 00:32:59,600
some questions already i can read them

00:32:59,120 --> 00:33:02,880
for you

00:32:59,600 --> 00:33:06,000
if you'd like so

00:33:02,880 --> 00:33:09,039
how is kde handling issues with lack of

00:33:06,000 --> 00:33:12,320
cute multimedia until release of cute

00:33:09,039 --> 00:33:15,120
6.2 how will media playback be handled

00:33:12,320 --> 00:33:17,120
with planned deprecation of k media

00:33:15,120 --> 00:33:21,000
player

00:33:17,120 --> 00:33:24,640
so the lack of cube multimedia until

00:33:21,000 --> 00:33:28,080
q6.2 is very easily avoided by

00:33:24,640 --> 00:33:29,440
just not porting anything to q6 until

00:33:28,080 --> 00:33:31,760
then

00:33:29,440 --> 00:33:32,559
because right now the current plan is

00:33:31,760 --> 00:33:35,120
for

00:33:32,559 --> 00:33:37,039
cute multimedia to be released in a

00:33:35,120 --> 00:33:39,039
couple of months and

00:33:37,039 --> 00:33:40,720
we still have a lot of work to do before

00:33:39,039 --> 00:33:42,880
we get to the point where you would

00:33:40,720 --> 00:33:44,880
actually need cute multimedia

00:33:42,880 --> 00:33:46,399
so there's still plenty of things to do

00:33:44,880 --> 00:33:49,440
before that

00:33:46,399 --> 00:33:49,840
and k media player is not actually used

00:33:49,440 --> 00:33:53,039
by

00:33:49,840 --> 00:33:54,720
anything except one application and that

00:33:53,039 --> 00:33:58,640
one is pretty dead

00:33:54,720 --> 00:33:58,640
so there's no issue there

00:33:58,720 --> 00:34:03,760
okay good to know then

00:34:02,000 --> 00:34:06,080
someone was confused when you were

00:34:03,760 --> 00:34:09,599
talking about

00:34:06,080 --> 00:34:12,879
removing some functions uh with

00:34:09,599 --> 00:34:14,720
framework 6 api does it mean they will

00:34:12,879 --> 00:34:17,599
be

00:34:14,720 --> 00:34:18,720
deprecated but kept around until

00:34:17,599 --> 00:34:21,760
framework 7

00:34:18,720 --> 00:34:25,200
or how does that work now when i say

00:34:21,760 --> 00:34:28,159
deprecate things i mean in kf5

00:34:25,200 --> 00:34:29,520
they will give you a deprecation warning

00:34:28,159 --> 00:34:32,320
and

00:34:29,520 --> 00:34:34,000
then when we actually get around to

00:34:32,320 --> 00:34:36,240
making a branch for

00:34:34,000 --> 00:34:38,240
framework six then we delete all the

00:34:36,240 --> 00:34:42,159
things so everything that's deprecated

00:34:38,240 --> 00:34:42,159
now will be gone in framework six

00:34:42,960 --> 00:34:45,359
okay

00:34:46,639 --> 00:34:50,480
then on making things modular is it

00:34:49,919 --> 00:34:53,200
planned

00:34:50,480 --> 00:34:55,440
to use optional dynamic library loading

00:34:53,200 --> 00:34:59,680
with graceful feature degradation

00:34:55,440 --> 00:35:02,880
if certain libraries example kf crash

00:34:59,680 --> 00:35:06,000
are not installed on the system

00:35:02,880 --> 00:35:08,320
we sort of do that already and we

00:35:06,000 --> 00:35:09,599
in some places we plan to make use of it

00:35:08,320 --> 00:35:12,960
more

00:35:09,599 --> 00:35:16,160
so one example

00:35:12,960 --> 00:35:18,400
is case standard shortcuts

00:35:16,160 --> 00:35:19,280
which currently lives in k config

00:35:18,400 --> 00:35:22,400
widgets

00:35:19,280 --> 00:35:24,000
which has a rather not nice dependency

00:35:22,400 --> 00:35:25,359
tree because it depends on a couple of

00:35:24,000 --> 00:35:28,240
things

00:35:25,359 --> 00:35:31,920
and it's actually one of the the worst

00:35:28,240 --> 00:35:35,520
offenders in the overall dependency tree

00:35:31,920 --> 00:35:38,640
and case standard shortcuts uses k

00:35:35,520 --> 00:35:40,960
config to

00:35:38,640 --> 00:35:42,400
read some like read your settings from

00:35:40,960 --> 00:35:44,079
the disk so you can figure you can

00:35:42,400 --> 00:35:47,119
configure your shortcuts

00:35:44,079 --> 00:35:47,760
and what we plan to do is we take that

00:35:47,119 --> 00:35:50,480
thing

00:35:47,760 --> 00:35:52,000
and move it down to category add-ons

00:35:50,480 --> 00:35:55,839
which cannot depend on k

00:35:52,000 --> 00:35:58,880
config but we actually

00:35:55,839 --> 00:36:01,680
are planning to add a plug-in mechanism

00:35:58,880 --> 00:36:02,240
so when you run a plasma plasma will

00:36:01,680 --> 00:36:04,720
provide

00:36:02,240 --> 00:36:07,119
a plug-in that then feeds the

00:36:04,720 --> 00:36:10,720
configuration information

00:36:07,119 --> 00:36:13,200
into the library and

00:36:10,720 --> 00:36:14,079
on non-plasma platforms this kind of

00:36:13,200 --> 00:36:16,960
config

00:36:14,079 --> 00:36:17,760
configurability does not really exist so

00:36:16,960 --> 00:36:20,240
for example

00:36:17,760 --> 00:36:22,000
on windows there's no point in trying to

00:36:20,240 --> 00:36:24,079
read the plasma settings

00:36:22,000 --> 00:36:27,040
so there it's not an issue or we could

00:36:24,079 --> 00:36:29,200
write a windows specific plugin that

00:36:27,040 --> 00:36:30,160
read some windows settings or just hard

00:36:29,200 --> 00:36:32,560
cut something

00:36:30,160 --> 00:36:33,359
so that's that's a pretty neat trick

00:36:32,560 --> 00:36:38,000
that we

00:36:33,359 --> 00:36:38,000
try to apply in some places that can can

00:36:38,839 --> 00:36:42,720
help

00:36:40,160 --> 00:36:44,160
thank you very much and uh still one

00:36:42,720 --> 00:36:47,359
question here

00:36:44,160 --> 00:36:49,599
that i see remaining will there be some

00:36:47,359 --> 00:36:50,720
better documentation for things like

00:36:49,599 --> 00:36:55,359
plasma applets

00:36:50,720 --> 00:36:57,359
desktop widgets etc in frameworks 16.

00:36:55,359 --> 00:36:58,960
that's pretty much unrelated to

00:36:57,359 --> 00:37:01,359
framework 6 because

00:36:58,960 --> 00:37:02,880
nothing is stopping us from writing

00:37:01,359 --> 00:37:06,480
better documentation now

00:37:02,880 --> 00:37:10,000
we don't need to break api to do that

00:37:06,480 --> 00:37:12,480
one nice side effect of framework six is

00:37:10,000 --> 00:37:14,480
that we are re-working some things

00:37:12,480 --> 00:37:17,680
removing some things

00:37:14,480 --> 00:37:18,640
and making some things a bit easier to

00:37:17,680 --> 00:37:21,599
use

00:37:18,640 --> 00:37:22,720
without documentation or when replacing

00:37:21,599 --> 00:37:26,320
things we

00:37:22,720 --> 00:37:28,400
try very much to add documentation so

00:37:26,320 --> 00:37:29,359
the overall transition sort of helps in

00:37:28,400 --> 00:37:32,880
that direction

00:37:29,359 --> 00:37:37,839
but in general it's the the question of

00:37:32,880 --> 00:37:40,960
better documentation is pretty unrelated

00:37:37,839 --> 00:37:42,160
okay especially when it comes to plasma

00:37:40,960 --> 00:37:45,359
things that are

00:37:42,160 --> 00:37:48,320
even more unrelated to frameworks

00:37:45,359 --> 00:37:50,000
okay so basically you can do better

00:37:48,320 --> 00:37:53,040
documentation right now

00:37:50,000 --> 00:37:57,200
and that's stopping us so and

00:37:53,040 --> 00:38:00,240
i'm i'm glad that uh kde is pushing for

00:37:57,200 --> 00:38:01,200
better documentation by having hired two

00:38:00,240 --> 00:38:02,800
people to

00:38:01,200 --> 00:38:04,480
work on that because it's certainly an

00:38:02,800 --> 00:38:07,599
important thing

00:38:04,480 --> 00:38:08,400
yeah i agree okay i don't see any other

00:38:07,599 --> 00:38:10,160
questions

00:38:08,400 --> 00:38:12,400
nicolas thank you again very much are

00:38:10,160 --> 00:38:13,520
there any other attacks or buffs that

00:38:12,400 --> 00:38:17,119
you will be

00:38:13,520 --> 00:38:20,720
uh um i think there will be a kf6

00:38:17,119 --> 00:38:24,000
buff i don't know when it will be

00:38:20,720 --> 00:38:26,000
but i trust you to find it on the wiki

00:38:24,000 --> 00:38:28,079
yeah people can surely find it in their

00:38:26,000 --> 00:38:33,839
schedule

00:38:28,079 --> 00:38:33,839

YouTube URL: https://www.youtube.com/watch?v=vgkpD0Dj1j0


