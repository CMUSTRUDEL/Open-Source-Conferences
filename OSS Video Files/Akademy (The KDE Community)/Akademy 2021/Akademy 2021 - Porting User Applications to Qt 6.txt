Title: Akademy 2021 - Porting User Applications to Qt 6
Publication date: 2021-06-28
Playlist: Akademy 2021
Description: 
	By Kai KÃ¶hne 
Qt 6 is the next major release of the Qt series. As a major release, it contains some significant changes, both in the module structure and in the external API.
In this talk I will give practical advice on how to port applications from Qt 5 to Qt 6. Based on experience on porting Qt Creator, I will explain the most common API pitfalls, as well as useful processes and tools to help in the porting work.
Captions: 
	00:00:01,110 --> 00:00:08,589
[Music]

00:00:10,000 --> 00:00:14,240
welcome kai and thank you again for

00:00:11,759 --> 00:00:16,320
being here

00:00:14,240 --> 00:00:17,279
thanks for having me uh it's a great

00:00:16,320 --> 00:00:20,000
pleasure to be

00:00:17,279 --> 00:00:20,960
once again on academy it's been a while

00:00:20,000 --> 00:00:23,920
um

00:00:20,960 --> 00:00:25,840
so yeah i want to talk about porting

00:00:23,920 --> 00:00:28,160
user applications to qt6

00:00:25,840 --> 00:00:29,199
so the focus is a bit on user

00:00:28,160 --> 00:00:32,000
applications

00:00:29,199 --> 00:00:32,960
um you heard yesterday if you have been

00:00:32,000 --> 00:00:36,160
joining yesterday

00:00:32,960 --> 00:00:37,600
an update about uh the kd frameworks and

00:00:36,160 --> 00:00:38,480
that they are also working on this and

00:00:37,600 --> 00:00:40,559
so on

00:00:38,480 --> 00:00:42,000
but uh this is not you know the talk in

00:00:40,559 --> 00:00:43,920
that sense isn't

00:00:42,000 --> 00:00:45,440
kd specific because to be honest there

00:00:43,920 --> 00:00:46,480
would be others who would be probably

00:00:45,440 --> 00:00:49,120
much more

00:00:46,480 --> 00:00:51,199
uh into the current state of things uh

00:00:49,120 --> 00:00:55,280
but kind of what it takes in general to

00:00:51,199 --> 00:00:58,719
port acute uh five traditional

00:00:55,280 --> 00:01:01,680
application to q6

00:00:58,719 --> 00:01:02,320
all right i hope you can only hear me

00:01:01,680 --> 00:01:05,280
fine

00:01:02,320 --> 00:01:05,280
if not screen

00:01:06,159 --> 00:01:09,520
so yeah when preparing the slides

00:01:08,080 --> 00:01:11,040
actually on friday colleague

00:01:09,520 --> 00:01:12,880
find one completely different

00:01:11,040 --> 00:01:14,560
presentation talked to me and said you

00:01:12,880 --> 00:01:16,240
know all the technical presentations

00:01:14,560 --> 00:01:19,600
often miss the y

00:01:16,240 --> 00:01:22,880
so i was adding this uh

00:01:19,600 --> 00:01:26,799
this this light on last second um so why

00:01:22,880 --> 00:01:26,799
q6 why porting tk6

00:01:26,960 --> 00:01:32,400
and um to be honest q6 is in a lot of

00:01:30,079 --> 00:01:34,799
way just the logical con

00:01:32,400 --> 00:01:35,680
kind of conclusion or going forward from

00:01:34,799 --> 00:01:37,680
q5

00:01:35,680 --> 00:01:38,880
so from times to times inside cute we

00:01:37,680 --> 00:01:41,200
just decide okay

00:01:38,880 --> 00:01:43,040
you know there is enough uh

00:01:41,200 --> 00:01:44,560
architectures to be changed that we

00:01:43,040 --> 00:01:47,680
don't really want to do in minor

00:01:44,560 --> 00:01:48,560
changes mind patch sets uh there is

00:01:47,680 --> 00:01:50,720
enough you know

00:01:48,560 --> 00:01:52,159
deprecated api now that we want to do a

00:01:50,720 --> 00:01:55,360
clear cut and actually get rid of

00:01:52,159 --> 00:01:58,079
deprecated api and you know also do

00:01:55,360 --> 00:01:59,759
uh yeah just architectural stuff uh like

00:01:58,079 --> 00:02:00,079
updating the c plus plus version and so

00:01:59,759 --> 00:02:01,520
on

00:02:00,079 --> 00:02:03,119
and then it's kind of the discussion

00:02:01,520 --> 00:02:03,600
sites and then we say at one point okay

00:02:03,119 --> 00:02:05,520
that's

00:02:03,600 --> 00:02:07,200
that should be actually in next my major

00:02:05,520 --> 00:02:10,479
version so in that sense it's

00:02:07,200 --> 00:02:12,879
like logical conclusion from q5

00:02:10,479 --> 00:02:15,280
on a very high level view uh what we

00:02:12,879 --> 00:02:17,120
want to aim with qt6 what you can expect

00:02:15,280 --> 00:02:19,840
also in the next years to come

00:02:17,120 --> 00:02:23,760
is well i mean world is changing we are

00:02:19,840 --> 00:02:26,160
looking to new platforms

00:02:23,760 --> 00:02:29,440
also architectures like the whole mac os

00:02:26,160 --> 00:02:32,000
an arm thing is going on

00:02:29,440 --> 00:02:33,599
the other side of the coin is graphics

00:02:32,000 --> 00:02:35,760
there is a lot of development there

00:02:33,599 --> 00:02:37,680
where for instance i don't know with q5

00:02:35,760 --> 00:02:39,840
we did a bit of a bet on opengl

00:02:37,680 --> 00:02:41,280
and the whole quick story was built on

00:02:39,840 --> 00:02:42,640
on top of opengl

00:02:41,280 --> 00:02:44,480
now we are completely different

00:02:42,640 --> 00:02:45,120
landscape where there is vulcan and

00:02:44,480 --> 00:02:48,239
metal

00:02:45,120 --> 00:02:51,280
and probably more directx

00:02:48,239 --> 00:02:52,239
coming and evolving so that also

00:02:51,280 --> 00:02:55,840
requires some

00:02:52,239 --> 00:02:58,879
bigger changes inside kit kit quick

00:02:55,840 --> 00:03:01,040
is an ongoing thing since years uh also

00:02:58,879 --> 00:03:02,640
since q5 released we have been learning

00:03:01,040 --> 00:03:04,319
a lot how to also write bigger

00:03:02,640 --> 00:03:06,720
applications with good quick

00:03:04,319 --> 00:03:08,400
the challenges that comes with that with

00:03:06,720 --> 00:03:10,080
the current quick integration in terms

00:03:08,400 --> 00:03:11,840
of tooling

00:03:10,080 --> 00:03:13,840
in terms of you know maintaining bigger

00:03:11,840 --> 00:03:16,720
applications so there is a lot of going

00:03:13,840 --> 00:03:18,480
on there to make this better

00:03:16,720 --> 00:03:20,000
and yeah on the strictly c plus plus

00:03:18,480 --> 00:03:21,840
side you know uh there's been

00:03:20,000 --> 00:03:23,599
discussions about whether our current

00:03:21,840 --> 00:03:26,080
containers are still good enough

00:03:23,599 --> 00:03:26,720
how to want to evolve them that we have

00:03:26,080 --> 00:03:29,120
some

00:03:26,720 --> 00:03:31,200
api that we you know don't want to

00:03:29,120 --> 00:03:34,560
advocate anymore or let

00:03:31,200 --> 00:03:36,640
people use anymore um and so on so

00:03:34,560 --> 00:03:38,159
that's all good reasons for c6 if you

00:03:36,640 --> 00:03:40,640
are interested in particularly

00:03:38,159 --> 00:03:41,440
that like the bigger picture i can only

00:03:40,640 --> 00:03:44,239
refer

00:03:41,440 --> 00:03:46,239
you maybe to the talk by lars knoll next

00:03:44,239 --> 00:03:48,560
wednesday i believe

00:03:46,239 --> 00:03:50,159
where he will be going into details

00:03:48,560 --> 00:03:52,159
about this

00:03:50,159 --> 00:03:54,159
so i want to kind of focus more on a

00:03:52,159 --> 00:03:54,799
very practical okay let's get it done

00:03:54,159 --> 00:03:57,280
let's

00:03:54,799 --> 00:04:00,720
take an application import it aspect

00:03:57,280 --> 00:04:03,360
then the bigger picture

00:04:00,720 --> 00:04:03,360
fair enough

00:04:04,400 --> 00:04:08,720
um so the next couple of minutes we will

00:04:07,200 --> 00:04:10,959
quickly have a look at the current state

00:04:08,720 --> 00:04:12,879
of q6

00:04:10,959 --> 00:04:15,040
then how what it takes in terms of build

00:04:12,879 --> 00:04:18,079
system in cmake integration to port an

00:04:15,040 --> 00:04:20,880
application to from q5 to q6

00:04:18,079 --> 00:04:23,040
and uh also the c plus plus side was

00:04:20,880 --> 00:04:24,560
already hinting at containers and so on

00:04:23,040 --> 00:04:27,759
what does that mean for me

00:04:24,560 --> 00:04:28,000
for my application and tooling available

00:04:27,759 --> 00:04:31,199
to

00:04:28,000 --> 00:04:31,199
help you with the transition

00:04:36,000 --> 00:04:42,479
so yeah q60 got released last december

00:04:40,639 --> 00:04:43,919
which i was personally quite happy about

00:04:42,479 --> 00:04:45,840
because it was actually

00:04:43,919 --> 00:04:47,280
you know almost or very near the

00:04:45,840 --> 00:04:49,120
original schedule date

00:04:47,280 --> 00:04:51,040
if you look back big into cute history

00:04:49,120 --> 00:04:53,120
that wasn't always the case

00:04:51,040 --> 00:04:55,600
so i think we did a good job there uh

00:04:53,120 --> 00:04:56,240
early on in q6 though we already decided

00:04:55,600 --> 00:04:59,520
that we

00:04:56,240 --> 00:05:02,639
kind of can't cope with porting all

00:04:59,520 --> 00:05:04,479
of the q5 modules to q6 at the same time

00:05:02,639 --> 00:05:05,919
and our kid has been growing over the

00:05:04,479 --> 00:05:08,560
years

00:05:05,919 --> 00:05:09,440
and you know it's just you know from the

00:05:08,560 --> 00:05:11,120
timing and

00:05:09,440 --> 00:05:13,440
quality and effort perspective very

00:05:11,120 --> 00:05:14,000
challenging to kind of tackle all these

00:05:13,440 --> 00:05:16,080
modules

00:05:14,000 --> 00:05:18,320
uh with the existing people working on

00:05:16,080 --> 00:05:20,479
it so

00:05:18,320 --> 00:05:21,440
we said with six zero we want to kind of

00:05:20,479 --> 00:05:23,280
port the most

00:05:21,440 --> 00:05:25,520
the most important modules the modules

00:05:23,280 --> 00:05:27,440
we consider most important

00:05:25,520 --> 00:05:28,880
and then quickly follow on in minor

00:05:27,440 --> 00:05:31,199
versions to all support more

00:05:28,880 --> 00:05:33,280
so that's what you see here q60 there

00:05:31,199 --> 00:05:34,080
was already quite some modules in six

00:05:33,280 --> 00:05:36,960
one that's

00:05:34,080 --> 00:05:38,240
uh released in may we did do a couple of

00:05:36,960 --> 00:05:40,880
minor uh

00:05:38,240 --> 00:05:41,759
ports and another big chunk uh will

00:05:40,880 --> 00:05:45,280
happen with six

00:05:41,759 --> 00:05:46,960
two and um there is the saying now that

00:05:45,280 --> 00:05:48,800
and you often read people that saying

00:05:46,960 --> 00:05:50,800
learn our six zero is for this reason

00:05:48,800 --> 00:05:52,880
alone just technical preview and you

00:05:50,800 --> 00:05:56,000
can't use it and so on

00:05:52,880 --> 00:05:58,000
i don't agree i think the quality of six

00:05:56,000 --> 00:06:00,319
zero and six one is actually

00:05:58,000 --> 00:06:01,840
uh is there's always things to improve

00:06:00,319 --> 00:06:04,160
and i'm not saying there is any kind

00:06:01,840 --> 00:06:05,600
not any great questions but uh also

00:06:04,160 --> 00:06:06,639
looking between history i think it's

00:06:05,600 --> 00:06:08,800
actually fine

00:06:06,639 --> 00:06:10,000
um we're doing it have been doing a good

00:06:08,800 --> 00:06:12,000
job there

00:06:10,000 --> 00:06:13,680
the community has been doing a good job

00:06:12,000 --> 00:06:16,880
there

00:06:13,680 --> 00:06:17,360
and um yeah but obviously if you depend

00:06:16,880 --> 00:06:19,039
on

00:06:17,360 --> 00:06:20,400
kid multimedia i think was raised

00:06:19,039 --> 00:06:21,280
yesterday in the chat and the

00:06:20,400 --> 00:06:24,639
discussions

00:06:21,280 --> 00:06:26,160
um then you might need to wait until 6 2

00:06:24,639 --> 00:06:28,400
which is currently scheduled for

00:06:26,160 --> 00:06:29,440
september so the very first thing you

00:06:28,400 --> 00:06:31,039
might want to just

00:06:29,440 --> 00:06:33,120
check out is kind of the list of

00:06:31,039 --> 00:06:36,479
dependencies you have

00:06:33,120 --> 00:06:36,479
and check what the state is there

00:06:40,400 --> 00:06:44,960
so with that in mind let's move to the

00:06:43,120 --> 00:06:47,199
build system so very practically

00:06:44,960 --> 00:06:48,160
i assume you're using cmake you're

00:06:47,199 --> 00:06:50,240
having an application

00:06:48,160 --> 00:06:53,680
that's working fine with q5 what do you

00:06:50,240 --> 00:06:53,680
have to do to port it to g6

00:06:55,039 --> 00:07:00,880
so um yeah i mean this is

00:06:58,080 --> 00:07:02,080
typical api that you will see in q5 uh

00:07:00,880 --> 00:07:05,520
with

00:07:02,080 --> 00:07:07,199
applications building against q5 so

00:07:05,520 --> 00:07:08,720
cmake you start usually with a find

00:07:07,199 --> 00:07:09,199
package and actually saying you know

00:07:08,720 --> 00:07:11,039
what

00:07:09,199 --> 00:07:13,360
actually i want like in this time it's

00:07:11,039 --> 00:07:17,280
q5 with cute widgets

00:07:13,360 --> 00:07:20,560
um then you have

00:07:17,280 --> 00:07:23,199
um apis like

00:07:20,560 --> 00:07:25,759
where you directly might want to call

00:07:23,199 --> 00:07:28,160
functions that are provided by

00:07:25,759 --> 00:07:29,120
the qt modules they usually start with a

00:07:28,160 --> 00:07:32,479
q5

00:07:29,120 --> 00:07:35,919
underscore and in the end you're also

00:07:32,479 --> 00:07:39,280
using the targets that were imported

00:07:35,919 --> 00:07:41,360
by the find package to for instance link

00:07:39,280 --> 00:07:42,720
against kit widgets and again you have a

00:07:41,360 --> 00:07:44,879
big qt5 there

00:07:42,720 --> 00:07:45,759
so you can already see that if you

00:07:44,879 --> 00:07:48,720
compare it for instance

00:07:45,759 --> 00:07:50,960
c plus plus api the c make api is very

00:07:48,720 --> 00:07:53,840
versioned

00:07:50,960 --> 00:07:55,039
which is not a big problem for a very

00:07:53,840 --> 00:07:58,240
straightforward port

00:07:55,039 --> 00:08:01,280
because you know you can just go on

00:07:58,240 --> 00:08:03,360
and mars replace q6 with q5

00:08:01,280 --> 00:08:04,800
uh sorry kid5 with q6 maybe in a

00:08:03,360 --> 00:08:07,280
separate branch

00:08:04,800 --> 00:08:08,479
and uh suddenly you're golden and that's

00:08:07,280 --> 00:08:11,680
really how it works right

00:08:08,479 --> 00:08:13,440
so we haven't changing much in the names

00:08:11,680 --> 00:08:16,240
of modules and so on

00:08:13,440 --> 00:08:16,560
um there might be some smaller things uh

00:08:16,240 --> 00:08:19,759
but

00:08:16,560 --> 00:08:21,919
overall there there isn't that much

00:08:19,759 --> 00:08:24,639
changes in the cmake api

00:08:21,919 --> 00:08:26,080
uh compared from q5 to q6 so most of the

00:08:24,639 --> 00:08:28,319
things will just work

00:08:26,080 --> 00:08:29,280
anyhow this has a problem in that you

00:08:28,319 --> 00:08:32,399
are now having

00:08:29,280 --> 00:08:34,959
two different uh versions

00:08:32,399 --> 00:08:37,360
and um unless you really want to kind of

00:08:34,959 --> 00:08:39,279
i don't know do a one-off port or so

00:08:37,360 --> 00:08:41,680
um you often have the requirement that

00:08:39,279 --> 00:08:42,640
you want to support qt5 and q6 at least

00:08:41,680 --> 00:08:44,560
for some time

00:08:42,640 --> 00:08:46,080
by the same code base so what do you do

00:08:44,560 --> 00:08:49,440
there we had a look

00:08:46,080 --> 00:08:51,519
we had problems ourselves um so we're

00:08:49,440 --> 00:08:51,920
already in 515 we have been looking into

00:08:51,519 --> 00:08:55,040
this

00:08:51,920 --> 00:08:56,800
so and added some new api so

00:08:55,040 --> 00:08:59,200
that's a very canonical solution if you

00:08:56,800 --> 00:09:02,240
want to support only q515 and

00:08:59,200 --> 00:09:03,920
futureq6 versions

00:09:02,240 --> 00:09:05,519
so what has changed here first of all

00:09:03,920 --> 00:09:08,240
you might notice that there is two

00:09:05,519 --> 00:09:11,440
different find package calls

00:09:08,240 --> 00:09:12,560
what's that so the first call is

00:09:11,440 --> 00:09:15,760
actually using

00:09:12,560 --> 00:09:18,320
uh the names argument from fight

00:09:15,760 --> 00:09:20,080
find package i just hope i don't think

00:09:18,320 --> 00:09:20,959
that often used but the idea here is

00:09:20,080 --> 00:09:24,240
that

00:09:20,959 --> 00:09:26,720
i tell cmake to look first

00:09:24,240 --> 00:09:27,920
for qt6 package and if that fails and

00:09:26,720 --> 00:09:30,720
for instance the

00:09:27,920 --> 00:09:31,839
widgets are not found then look for q5

00:09:30,720 --> 00:09:33,839
package

00:09:31,839 --> 00:09:35,519
definition and you know cmake has all

00:09:33,839 --> 00:09:38,720
this kind of a bit weird

00:09:35,519 --> 00:09:40,480
ways to locate packages so um that

00:09:38,720 --> 00:09:42,560
that sounds but that sounds exactly like

00:09:40,480 --> 00:09:43,760
you want rate we want to say first q6

00:09:42,560 --> 00:09:46,640
and that good five

00:09:43,760 --> 00:09:48,080
um and uh and then work with that and

00:09:46,640 --> 00:09:51,440
store that into

00:09:48,080 --> 00:09:54,800
a component sorry a package called

00:09:51,440 --> 00:09:58,399
cute qt in this case

00:09:54,800 --> 00:09:59,120
that should be enough but to be honest

00:09:58,399 --> 00:10:01,279
it doesn't

00:09:59,120 --> 00:10:03,200
work out of the box because for instance

00:10:01,279 --> 00:10:08,480
even from the auto rcc

00:10:03,200 --> 00:10:10,959
inside or auto opposite i think inside

00:10:08,480 --> 00:10:12,240
cmake support doesn't work with that so

00:10:10,959 --> 00:10:16,240
it expects

00:10:12,240 --> 00:10:19,839
that the package is called q6 or qt5

00:10:16,240 --> 00:10:22,959
so what to do there is basically just

00:10:19,839 --> 00:10:23,839
using that first call to basically

00:10:22,959 --> 00:10:27,040
determine the

00:10:23,839 --> 00:10:28,720
major version that's stored into a cmak

00:10:27,040 --> 00:10:30,000
variable called qt underscore version

00:10:28,720 --> 00:10:32,240
underscore major

00:10:30,000 --> 00:10:33,600
and then use that argument to actually

00:10:32,240 --> 00:10:35,440
load the real thing

00:10:33,600 --> 00:10:38,160
so that we are having again a like

00:10:35,440 --> 00:10:40,560
defined package q5 or q6 here

00:10:38,160 --> 00:10:41,360
so that's straightforward uh another

00:10:40,560 --> 00:10:43,760
change you see

00:10:41,360 --> 00:10:46,480
here is that we are have been actually

00:10:43,760 --> 00:10:48,399
calling something and function here

00:10:46,480 --> 00:10:49,839
that is the cmec function that's defined

00:10:48,399 --> 00:10:52,959
by qt without

00:10:49,839 --> 00:10:54,880
a major version so not q5 underscore but

00:10:52,959 --> 00:10:56,000
just cute underscore so that's an

00:10:54,880 --> 00:10:58,560
alternative api

00:10:56,000 --> 00:11:00,399
we've been adding in q515 for all the

00:10:58,560 --> 00:11:01,360
functions that are exposed by the qt

00:11:00,399 --> 00:11:04,480
modules

00:11:01,360 --> 00:11:06,560
to kind of help in the porting and

00:11:04,480 --> 00:11:08,880
that's actually also true for targets

00:11:06,560 --> 00:11:10,480
so you can also just refer to qt

00:11:08,880 --> 00:11:13,680
underscore underscore widgets

00:11:10,480 --> 00:11:16,800
and it doesn't matter with its target

00:11:13,680 --> 00:11:20,880
imported by qt 515

00:11:16,800 --> 00:11:22,640
or qt6 so yeah the big

00:11:20,880 --> 00:11:24,800
thing to remember here that that's the

00:11:22,640 --> 00:11:27,200
api that we only added for 550

00:11:24,800 --> 00:11:28,240
so if you want to support even older

00:11:27,200 --> 00:11:31,360
acute versions

00:11:28,240 --> 00:11:33,440
um q514

00:11:31,360 --> 00:11:34,560
then it looks a bit more complicated but

00:11:33,440 --> 00:11:37,279
still manageable

00:11:34,560 --> 00:11:38,000
so in this case you can't rely on the

00:11:37,279 --> 00:11:40,720
unified

00:11:38,000 --> 00:11:42,399
function names so you know you have to

00:11:40,720 --> 00:11:46,640
basically always do the

00:11:42,399 --> 00:11:48,959
uh the checking i'm iq 5 or q6

00:11:46,640 --> 00:11:51,040
and also the targets in this case you

00:11:48,959 --> 00:11:54,160
can just use the

00:11:51,040 --> 00:11:57,839
conversion major variable as a

00:11:54,160 --> 00:11:57,839
as a target

00:11:59,440 --> 00:12:05,360
good what else to remember

00:12:02,480 --> 00:12:07,360
well i already hinted that q six is

00:12:05,360 --> 00:12:09,760
requiring c plus plus 17

00:12:07,360 --> 00:12:11,920
so that's might be good idea to check

00:12:09,760 --> 00:12:13,360
whether you are also requiring that or

00:12:11,920 --> 00:12:14,480
maybe you're already requiring a new

00:12:13,360 --> 00:12:16,720
version i don't know

00:12:14,480 --> 00:12:18,000
but uh yeah it's it's it's a good check

00:12:16,720 --> 00:12:20,160
to do that you

00:12:18,000 --> 00:12:25,839
may might also want to bump your c plus

00:12:20,160 --> 00:12:25,839
plus uh standard requirements

00:12:26,079 --> 00:12:29,760
and the last thing about cmake that i

00:12:28,160 --> 00:12:34,079
want to mention is that there

00:12:29,760 --> 00:12:37,360
is a new module

00:12:34,079 --> 00:12:41,600
called core5 combat

00:12:37,360 --> 00:12:41,600
and the name says it all it's a

00:12:42,399 --> 00:12:48,000
class sorry a library

00:12:45,519 --> 00:12:50,399
module which contains some of the api

00:12:48,000 --> 00:12:53,920
that we removed from

00:12:50,399 --> 00:12:56,160
qt six core specifically so

00:12:53,920 --> 00:12:57,680
for any non-trivial port there's a good

00:12:56,160 --> 00:12:58,720
chance that you actually want to include

00:12:57,680 --> 00:13:00,399
that

00:12:58,720 --> 00:13:01,839
thing too obviously only if you compile

00:13:00,399 --> 00:13:04,000
against q6

00:13:01,839 --> 00:13:07,839
but we will come to examples about this

00:13:04,000 --> 00:13:07,839
in a second

00:13:11,440 --> 00:13:15,760
so the summary goes yeah my

00:13:14,000 --> 00:13:17,839
recommendation is

00:13:15,760 --> 00:13:20,320
for commands that you want to use from

00:13:17,839 --> 00:13:22,720
qt if possible just use the

00:13:20,320 --> 00:13:24,399
uh unversioned ones i think we should go

00:13:22,720 --> 00:13:25,200
on with them and actually use make them

00:13:24,399 --> 00:13:28,079
default

00:13:25,200 --> 00:13:30,079
so then for instance the qt60q7 port

00:13:28,079 --> 00:13:33,839
won't have that problem anymore

00:13:30,079 --> 00:13:37,040
um the alternative also for

00:13:33,839 --> 00:13:40,160
targets is to use just you know check

00:13:37,040 --> 00:13:42,079
or embed cute version major

00:13:40,160 --> 00:13:44,240
variables so that you can support both

00:13:42,079 --> 00:13:49,839
q5 to q6

00:13:44,240 --> 00:13:49,839
and c 17 requirement that i mentioned

00:13:50,240 --> 00:13:55,360
good to be honest i'm like

00:13:53,440 --> 00:13:57,120
i don't hear anything i'm not even sure

00:13:55,360 --> 00:14:00,240
whether people listen

00:13:57,120 --> 00:14:03,839
so maybe that's a good point where if

00:14:00,240 --> 00:14:03,839
there's already questions

00:14:11,199 --> 00:14:17,839
all good okay good then i'll just go on

00:14:20,160 --> 00:14:23,440
so yeah

00:14:23,839 --> 00:14:27,760
so this is about basically assuming that

00:14:27,440 --> 00:14:30,800
you're

00:14:27,760 --> 00:14:33,920
having a more traditional application

00:14:30,800 --> 00:14:35,120
and you want to port it then doing the

00:14:33,920 --> 00:14:37,839
build system change

00:14:35,120 --> 00:14:38,240
and then you most likely will run into

00:14:37,839 --> 00:14:41,279
still

00:14:38,240 --> 00:14:44,560
some compilation issues

00:14:41,279 --> 00:14:47,040
so that's somewhat to be expected

00:14:44,560 --> 00:14:48,880
but obviously what exactly it is depends

00:14:47,040 --> 00:14:52,399
how largely on the application

00:14:48,880 --> 00:14:52,800
so um what we have is a testbed what we

00:14:52,399 --> 00:14:54,639
can

00:14:52,800 --> 00:14:56,000
offer as a case study is actually kit

00:14:54,639 --> 00:14:59,279
creator so

00:14:56,000 --> 00:15:00,560
um git creator is our ide it's actually

00:14:59,279 --> 00:15:03,040
large application

00:15:00,560 --> 00:15:04,399
it uses a lot of the modules in qt

00:15:03,040 --> 00:15:05,920
though i mean obviously it's

00:15:04,399 --> 00:15:08,160
like you know for instance cute

00:15:05,920 --> 00:15:09,839
multimedia i think is not used so

00:15:08,160 --> 00:15:11,279
there is exceptions it's a certain type

00:15:09,839 --> 00:15:13,040
of applications you have

00:15:11,279 --> 00:15:14,399
that problem always with case studies

00:15:13,040 --> 00:15:17,199
anyhow it's

00:15:14,399 --> 00:15:19,360
i think a good good good idea to start

00:15:17,199 --> 00:15:21,040
looking into that so what we did

00:15:19,360 --> 00:15:22,560
is all the quite early in the q6

00:15:21,040 --> 00:15:24,320
development to try to

00:15:22,560 --> 00:15:27,360
make the current creator codebase

00:15:24,320 --> 00:15:30,079
compile also with kit 6

00:15:27,360 --> 00:15:30,560
so that we can you know learn from it

00:15:30,079 --> 00:15:32,160
also

00:15:30,560 --> 00:15:33,680
we provided feedback so that for

00:15:32,160 --> 00:15:35,839
instance some of the changes weren't

00:15:33,680 --> 00:15:39,120
done or were inverted and so on

00:15:35,839 --> 00:15:40,800
so that's kind of also the role of get

00:15:39,120 --> 00:15:44,160
greater to be a bit like the

00:15:40,800 --> 00:15:45,839
the the test case there um if changes

00:15:44,160 --> 00:15:49,680
are acceptable or not

00:15:45,839 --> 00:15:51,199
um so i set the same code base so it was

00:15:49,680 --> 00:15:54,079
not kind of a one-off

00:15:51,199 --> 00:15:56,240
branch or anything like that but we

00:15:54,079 --> 00:15:58,160
always want to support multiple

00:15:56,240 --> 00:15:59,519
major sorry multiple cued versions with

00:15:58,160 --> 00:16:02,639
git creator and

00:15:59,519 --> 00:16:04,320
uh you know uh q6 is not an exception

00:16:02,639 --> 00:16:06,560
that so in that sense it

00:16:04,320 --> 00:16:08,720
went on a bit in parallel with the

00:16:06,560 --> 00:16:10,880
normal development of kit creator

00:16:08,720 --> 00:16:12,800
uh what we did though very early on is

00:16:10,880 --> 00:16:14,320
uh kind of trying to collect

00:16:12,800 --> 00:16:16,000
all the changes that are somewhat

00:16:14,320 --> 00:16:18,959
related to the kids export

00:16:16,000 --> 00:16:20,639
into one item in the back tracker so if

00:16:18,959 --> 00:16:22,480
you want you can look it up

00:16:20,639 --> 00:16:23,920
they're talking about roughly 180

00:16:22,480 --> 00:16:27,279
patches there

00:16:23,920 --> 00:16:28,880
which sounds a lot but on the other side

00:16:27,279 --> 00:16:30,959
you know most of them are also very

00:16:28,880 --> 00:16:33,279
small and so on so it was like you know

00:16:30,959 --> 00:16:35,680
there was no big i mean i convert

00:16:33,279 --> 00:16:38,399
everything to kt6

00:16:35,680 --> 00:16:40,639
commit but rather you know module by

00:16:38,399 --> 00:16:44,079
module and case by case or

00:16:40,639 --> 00:16:45,920
in a lot of cases um so

00:16:44,079 --> 00:16:47,440
what i did as preparation of this talk i

00:16:45,920 --> 00:16:48,240
was actually kind of you know going

00:16:47,440 --> 00:16:50,000
through the list

00:16:48,240 --> 00:16:51,600
and trying to categorize the things a

00:16:50,000 --> 00:16:53,040
bit more um

00:16:51,600 --> 00:16:55,600
to see actually whether there is

00:16:53,040 --> 00:16:56,320
patterns and you know some of the things

00:16:55,600 --> 00:16:58,399
was obvious

00:16:56,320 --> 00:17:00,399
but some of them things even surprised

00:16:58,399 --> 00:17:02,160
me a bit

00:17:00,399 --> 00:17:04,799
so that the result of this is on the

00:17:02,160 --> 00:17:06,959
right side so

00:17:04,799 --> 00:17:07,839
i was basically going to the patches and

00:17:06,959 --> 00:17:10,959
saying okay

00:17:07,839 --> 00:17:12,079
this one was solely for fixing q linked

00:17:10,959 --> 00:17:15,039
list for instance

00:17:12,079 --> 00:17:16,000
this one was affecting also i don't know

00:17:15,039 --> 00:17:17,760
some other

00:17:16,000 --> 00:17:19,520
use case this one was for a regular

00:17:17,760 --> 00:17:21,760
expression so wreck x

00:17:19,520 --> 00:17:23,039
so what you can see here is a bit of a

00:17:21,760 --> 00:17:26,319
pattern that yeah

00:17:23,039 --> 00:17:30,080
there is like the largest bar that's

00:17:26,319 --> 00:17:31,679
curved x i will for the most

00:17:30,080 --> 00:17:33,919
important parts i will have follow-up

00:17:31,679 --> 00:17:36,799
slides so we will look into this

00:17:33,919 --> 00:17:37,919
gesturing qgrf is another case which

00:17:36,799 --> 00:17:41,120
might be interesting

00:17:37,919 --> 00:17:43,679
then there is a whole set of things um

00:17:41,120 --> 00:17:44,559
you know around containers so let's also

00:17:43,679 --> 00:17:48,400
have a look at that

00:17:44,559 --> 00:17:49,120
and the second largest one i don't know

00:17:48,400 --> 00:17:52,160
my other

00:17:49,120 --> 00:17:54,320
is obviously a bit of a of a

00:17:52,160 --> 00:17:56,640
basket for everything but replace api

00:17:54,320 --> 00:18:00,160
deprecated in q5 that was actually

00:17:56,640 --> 00:18:04,000
uh something that i can kind of

00:18:00,160 --> 00:18:04,000
recommend in general so

00:18:04,640 --> 00:18:08,400
if you want to part your application to

00:18:06,320 --> 00:18:11,440
q6 the best thing probably

00:18:08,400 --> 00:18:13,600
to do is first party tk515 if you are

00:18:11,440 --> 00:18:17,440
not building with q515 yet

00:18:13,600 --> 00:18:20,080
and actually deprecate uh sorry

00:18:17,440 --> 00:18:21,200
fix all the cases where you have api

00:18:20,080 --> 00:18:24,559
that

00:18:21,200 --> 00:18:26,480
and use api that's already deprecated in

00:18:24,559 --> 00:18:28,080
q515

00:18:26,480 --> 00:18:29,919
so if you haven't done that already

00:18:28,080 --> 00:18:32,799
there is a nice

00:18:29,919 --> 00:18:34,799
uh define called cute disabled

00:18:32,799 --> 00:18:37,360
deprecated before

00:18:34,799 --> 00:18:38,320
and in this case you know that's uh hex

00:18:37,360 --> 00:18:42,400
four five

00:18:38,320 --> 00:18:45,919
five f that's five fifteen so it says qt

00:18:42,400 --> 00:18:49,440
remove all or rather precompile remove

00:18:45,919 --> 00:18:52,000
all the uh declarations of api

00:18:49,440 --> 00:18:54,320
that is deprecated in q515 and then you

00:18:52,000 --> 00:18:54,840
will get compile errors if you're using

00:18:54,320 --> 00:18:58,160
them

00:18:54,840 --> 00:18:59,840
still so yeah i can only recommend that

00:18:58,160 --> 00:19:01,039
because that catches already a lot of

00:18:59,840 --> 00:19:03,840
cases

00:19:01,039 --> 00:19:04,720
so um but let's look into some more

00:19:03,840 --> 00:19:08,160
interesting

00:19:04,720 --> 00:19:10,080
topics probably then no just

00:19:08,160 --> 00:19:12,480
smaller deprecations because what a lot

00:19:10,080 --> 00:19:14,640
of them are really straightforward

00:19:12,480 --> 00:19:16,799
um and the documentation usually just

00:19:14,640 --> 00:19:19,919
tells you what to use instead

00:19:16,799 --> 00:19:22,160
so uh cubacex that was the largest bar

00:19:19,919 --> 00:19:23,200
if you remember so what about that q

00:19:22,160 --> 00:19:26,799
request is

00:19:23,200 --> 00:19:30,640
the way to handle regular expressions

00:19:26,799 --> 00:19:33,919
from qt4 to q25 times basically

00:19:30,640 --> 00:19:37,120
so yeah the class

00:19:33,919 --> 00:19:40,320
uh is heavily used in kit creator

00:19:37,120 --> 00:19:42,960
which is you know might be a bit exp

00:19:40,320 --> 00:19:43,919
ides are all about text manipulation and

00:19:42,960 --> 00:19:47,120
so on so

00:19:43,919 --> 00:19:50,720
uh that might not be a complete surprise

00:19:47,120 --> 00:19:51,679
and um we've been using qrek exp heavily

00:19:50,720 --> 00:19:54,960
in hundreds of

00:19:51,679 --> 00:19:57,200
places but uh

00:19:54,960 --> 00:19:58,160
already in five zero there was a

00:19:57,200 --> 00:20:01,120
replacement for

00:19:58,160 --> 00:20:03,200
quebec x so we were regular expression

00:20:01,120 --> 00:20:06,559
was introduced back then

00:20:03,200 --> 00:20:08,640
so um yeah

00:20:06,559 --> 00:20:09,600
but we never managed to do the port

00:20:08,640 --> 00:20:11,280
basically we had

00:20:09,600 --> 00:20:13,200
cases where we had q regular expression

00:20:11,280 --> 00:20:15,200
but we had also lots still of cases

00:20:13,200 --> 00:20:17,520
where we had q records

00:20:15,200 --> 00:20:20,000
um one of the reasons might be well it

00:20:17,520 --> 00:20:22,559
was just working all right never fix

00:20:20,000 --> 00:20:24,080
a code that just works the other one is

00:20:22,559 --> 00:20:27,520
that

00:20:24,080 --> 00:20:30,640
the porting is it's not just a single

00:20:27,520 --> 00:20:32,480
you know text replace so

00:20:30,640 --> 00:20:36,080
that's a bit like if you know the

00:20:32,480 --> 00:20:39,840
architecture of qrakax a bit

00:20:36,080 --> 00:20:41,200
it is both a representation of the

00:20:39,840 --> 00:20:43,360
regular expression

00:20:41,200 --> 00:20:44,960
but also for instance a representation

00:20:43,360 --> 00:20:48,159
of the results

00:20:44,960 --> 00:20:49,840
so it was a bit of a mixture there

00:20:48,159 --> 00:20:51,200
and with your regular expression we have

00:20:49,840 --> 00:20:53,360
been splitting up into that

00:20:51,200 --> 00:20:55,200
into two classes q regular expression

00:20:53,360 --> 00:20:57,760
and q regular expression match

00:20:55,200 --> 00:20:58,640
um that's one of the examples and there

00:20:57,760 --> 00:21:02,080
is

00:20:58,640 --> 00:21:03,760
you know a few more that we got regard

00:21:02,080 --> 00:21:06,080
one thing there's kind of a bit of a

00:21:03,760 --> 00:21:08,000
gotcha that's why i'm mentioning it

00:21:06,080 --> 00:21:10,640
is that for instance also the wildcard

00:21:08,000 --> 00:21:12,559
syntax is not exactly the same

00:21:10,640 --> 00:21:14,000
so q regular expression uses a different

00:21:12,559 --> 00:21:16,640
backend for that

00:21:14,000 --> 00:21:17,919
and in general it has more feature it

00:21:16,640 --> 00:21:20,080
has more features

00:21:17,919 --> 00:21:21,919
more advanced features handles unicode

00:21:20,080 --> 00:21:24,960
and whatnot

00:21:21,919 --> 00:21:27,039
but it's also a bit stricter so

00:21:24,960 --> 00:21:28,960
you might have a regular expression that

00:21:27,039 --> 00:21:30,880
is working as a string

00:21:28,960 --> 00:21:32,240
you pass it to where x and it's not

00:21:30,880 --> 00:21:33,039
working anymore with your regular

00:21:32,240 --> 00:21:35,520
expression

00:21:33,039 --> 00:21:37,039
that's not very often i mean you know

00:21:35,520 --> 00:21:39,039
the common set of

00:21:37,039 --> 00:21:40,559
irregular expressions are the same but

00:21:39,039 --> 00:21:42,880
if you're using some you know

00:21:40,559 --> 00:21:44,080
some features and relying on some more

00:21:42,880 --> 00:21:46,240
like you know obscure

00:21:44,080 --> 00:21:47,520
details then you might hit that the

00:21:46,240 --> 00:21:49,200
problem with that is

00:21:47,520 --> 00:21:50,880
your compiler won't find it right it's

00:21:49,200 --> 00:21:52,880
just a string to the compiler

00:21:50,880 --> 00:21:54,559
so you don't get a nice compiler warning

00:21:52,880 --> 00:21:57,760
you get just different behavior

00:21:54,559 --> 00:21:58,559
crashes even uh depending on on the

00:21:57,760 --> 00:22:01,760
result of this

00:21:58,559 --> 00:22:03,440
so that's a bit of a gotcha remember

00:22:01,760 --> 00:22:05,360
maybe checking the regular expression

00:22:03,440 --> 00:22:07,120
and maybe putting a bit more effort

00:22:05,360 --> 00:22:08,880
into checking that it still works as

00:22:07,120 --> 00:22:11,600
expected

00:22:08,880 --> 00:22:12,400
that's also true for another case which

00:22:11,600 --> 00:22:14,720
is kind of

00:22:12,400 --> 00:22:16,880
using not actually per regular

00:22:14,720 --> 00:22:18,159
expression but wild cards like using

00:22:16,880 --> 00:22:22,000
from the shell

00:22:18,159 --> 00:22:24,240
so also there uh q okay q backer expat

00:22:22,000 --> 00:22:26,320
directly supported this q molecular

00:22:24,240 --> 00:22:28,080
expression doesn't but it has a

00:22:26,320 --> 00:22:29,760
static function which you can call to

00:22:28,080 --> 00:22:32,480
convert a

00:22:29,760 --> 00:22:33,840
wildcard expression into a regular

00:22:32,480 --> 00:22:37,360
expression

00:22:33,840 --> 00:22:39,440
that works also but there is also some

00:22:37,360 --> 00:22:40,000
smaller details to remember for instance

00:22:39,440 --> 00:22:42,480
when it comes

00:22:40,000 --> 00:22:43,840
to slashes in the in the string and so

00:22:42,480 --> 00:22:46,720
on

00:22:43,840 --> 00:22:48,400
um these are all by the way very nicely

00:22:46,720 --> 00:22:51,760
documented in the porting guide

00:22:48,400 --> 00:22:53,120
so if you want to know details about

00:22:51,760 --> 00:22:55,120
this one i would actually recommend

00:22:53,120 --> 00:22:57,280
going to the boarding guide

00:22:55,120 --> 00:22:58,960
i just want to mention another kind of

00:22:57,280 --> 00:23:00,480
difference slight difference which is a

00:22:58,960 --> 00:23:03,679
bit annoying it's like

00:23:00,480 --> 00:23:06,240
that you had q recox matched length

00:23:03,679 --> 00:23:08,000
and okay i just see an arrow it's

00:23:06,240 --> 00:23:11,760
actually q regular expression

00:23:08,000 --> 00:23:14,240
captured length and these sound like

00:23:11,760 --> 00:23:15,120
almost identical but the return value

00:23:14,240 --> 00:23:17,760
for instance for

00:23:15,120 --> 00:23:19,760
the case where there was no uh captures

00:23:17,760 --> 00:23:21,679
is different so in the one case it would

00:23:19,760 --> 00:23:23,520
turn minus one and the other one it

00:23:21,679 --> 00:23:25,039
returns zero that's an example it's a

00:23:23,520 --> 00:23:26,400
bit unfortunate if you kind of you know

00:23:25,039 --> 00:23:28,080
just mass replace

00:23:26,400 --> 00:23:30,400
things and suddenly things break don't

00:23:28,080 --> 00:23:33,039
break anymore so it don't work anymore

00:23:30,400 --> 00:23:33,600
so again i have to say we had lots of

00:23:33,039 --> 00:23:37,440
cases

00:23:33,600 --> 00:23:40,080
of quebec in qt5 um

00:23:37,440 --> 00:23:40,480
and so intuit creator and most of them

00:23:40,080 --> 00:23:43,679
are

00:23:40,480 --> 00:23:47,520
really straightforward to to port

00:23:43,679 --> 00:23:49,440
um yeah i could open now at the browser

00:23:47,520 --> 00:23:50,720
but i'm not exactly sure how this works

00:23:49,440 --> 00:23:54,080
here in this

00:23:50,720 --> 00:23:55,440
in this chat so um

00:23:54,080 --> 00:23:58,080
if you are interested we can also look

00:23:55,440 --> 00:24:00,159
it up later

00:23:58,080 --> 00:24:02,000
it that should be it for qrack x so

00:24:00,159 --> 00:24:03,919
remember a bit to

00:24:02,000 --> 00:24:07,440
take special care there that actually it

00:24:03,919 --> 00:24:07,440
works the same as before

00:24:07,679 --> 00:24:11,520
another of these cases is q string ref

00:24:10,320 --> 00:24:13,760
so

00:24:11,520 --> 00:24:15,679
what is q string graph it is an

00:24:13,760 --> 00:24:17,679
optimization that you can do

00:24:15,679 --> 00:24:18,960
already in q five times maybe even

00:24:17,679 --> 00:24:22,000
killed four times i don't

00:24:18,960 --> 00:24:22,400
remember where you want to have a look

00:24:22,000 --> 00:24:24,080
at

00:24:22,400 --> 00:24:25,760
you want to analyze a string a key

00:24:24,080 --> 00:24:28,320
string

00:24:25,760 --> 00:24:30,400
and you want to kind of have parts of it

00:24:28,320 --> 00:24:32,080
for instance for further processing

00:24:30,400 --> 00:24:33,840
but you'd want to invite the overhead to

00:24:32,080 --> 00:24:34,799
kind of copy and paste that because q

00:24:33,840 --> 00:24:36,720
string will then

00:24:34,799 --> 00:24:38,880
allocate a completely new object and so

00:24:36,720 --> 00:24:41,279
on and when that might be expensive

00:24:38,880 --> 00:24:42,799
circus stringer is an optimization for

00:24:41,279 --> 00:24:45,760
that

00:24:42,799 --> 00:24:46,799
um which was is available in certain

00:24:45,760 --> 00:24:50,320
certain classes

00:24:46,799 --> 00:24:53,520
um and of cute and is exposed there

00:24:50,320 --> 00:24:54,000
and um you know you could use it to work

00:24:53,520 --> 00:24:56,720
with

00:24:54,000 --> 00:24:57,840
sub strings basically of of underlying

00:24:56,720 --> 00:25:01,360
strings

00:24:57,840 --> 00:25:03,679
so being again an ide

00:25:01,360 --> 00:25:05,120
creator was using also making use heavy

00:25:03,679 --> 00:25:08,960
use of that

00:25:05,120 --> 00:25:11,120
um what happened now is that in code 5

00:25:08,960 --> 00:25:12,840
10 already so already like you know a

00:25:11,120 --> 00:25:15,120
couple of versions ago

00:25:12,840 --> 00:25:17,039
um there was a proposal for an

00:25:15,120 --> 00:25:19,760
alternative api which

00:25:17,039 --> 00:25:21,760
is considered superior that's uh goes

00:25:19,760 --> 00:25:24,159
under the name q string view

00:25:21,760 --> 00:25:25,919
the very same concept bit of a different

00:25:24,159 --> 00:25:28,240
implementation and also much more

00:25:25,919 --> 00:25:29,279
generalized so q string graph was only

00:25:28,240 --> 00:25:32,159
really working for

00:25:29,279 --> 00:25:33,360
strings the string view you can also use

00:25:32,159 --> 00:25:35,760
for i don't know

00:25:33,360 --> 00:25:37,120
standard 16 strings and so on so it's a

00:25:35,760 --> 00:25:39,440
bit decoupled from the q string

00:25:37,120 --> 00:25:42,480
implementation

00:25:39,440 --> 00:25:45,600
and it's also now a way available

00:25:42,480 --> 00:25:47,919
lots of other api like in cute car where

00:25:45,600 --> 00:25:48,880
uh you know stringoff had was kind of

00:25:47,919 --> 00:25:52,080
limited

00:25:48,880 --> 00:25:53,440
uh uh in terms of qt api that's exposed

00:25:52,080 --> 00:25:54,000
there it there's also for instance now

00:25:53,440 --> 00:25:55,760
also like

00:25:54,000 --> 00:25:57,679
you by the way view and so on so the

00:25:55,760 --> 00:26:01,120
concept is a bit more generalized so

00:25:57,679 --> 00:26:02,880
in general um it's recommended to use

00:26:01,120 --> 00:26:06,000
that and that's the reason why we

00:26:02,880 --> 00:26:09,600
removed the string ref from qt core

00:26:06,000 --> 00:26:09,600
it moved to qt5 compete

00:26:09,679 --> 00:26:16,080
but the problem is that again uh

00:26:13,520 --> 00:26:18,080
the api you are not using often q string

00:26:16,080 --> 00:26:19,919
ref alone but you're using it with some

00:26:18,080 --> 00:26:22,640
api that exposes it

00:26:19,919 --> 00:26:24,320
so in q then these api is also again so

00:26:22,640 --> 00:26:25,600
it's time to port um

00:26:24,320 --> 00:26:27,440
that's at least what we did in cube

00:26:25,600 --> 00:26:30,400
creator uh um

00:26:27,440 --> 00:26:31,760
small gotcha there again not that common

00:26:30,400 --> 00:26:33,600
but there is a bit of a different

00:26:31,760 --> 00:26:35,600
behavior when you're using have

00:26:33,600 --> 00:26:37,039
you on a string and then change the

00:26:35,600 --> 00:26:39,279
string underneath

00:26:37,039 --> 00:26:40,960
so might be obvious that that's not a

00:26:39,279 --> 00:26:43,279
good idea to do

00:26:40,960 --> 00:26:44,159
and uh the pro the thing is that q

00:26:43,279 --> 00:26:46,960
string ref was

00:26:44,159 --> 00:26:48,640
trying to fix a couple of cases there um

00:26:46,960 --> 00:26:50,799
while q string view does not

00:26:48,640 --> 00:26:52,159
so again we had one case i think it

00:26:50,799 --> 00:26:53,520
could create a weather slit to a

00:26:52,159 --> 00:26:56,320
question

00:26:53,520 --> 00:26:56,320
just to let you know

00:27:02,400 --> 00:27:06,320
on with containers so something that's a

00:27:05,279 --> 00:27:08,720
bit annoying

00:27:06,320 --> 00:27:11,360
i have to say is q hash where this q

00:27:08,720 --> 00:27:13,600
multi hash

00:27:11,360 --> 00:27:15,200
so a q hash right you know the structure

00:27:13,600 --> 00:27:18,559
it's a key value

00:27:15,200 --> 00:27:19,679
thing and uh the container is optimized

00:27:18,559 --> 00:27:23,120
for looking up

00:27:19,679 --> 00:27:26,159
the value by key

00:27:23,120 --> 00:27:26,640
and then there is also the idea to have

00:27:26,159 --> 00:27:28,559
that

00:27:26,640 --> 00:27:30,080
also as a multi-hash which means that

00:27:28,559 --> 00:27:31,760
there is one key but there might be

00:27:30,080 --> 00:27:34,320
multiple values

00:27:31,760 --> 00:27:36,399
so in q5 that was a bit of a weird setup

00:27:34,320 --> 00:27:38,960
because there was q multihash

00:27:36,399 --> 00:27:41,039
but actually the implementation was in q

00:27:38,960 --> 00:27:44,080
hash and you could actually use q hash

00:27:41,039 --> 00:27:44,480
as a so q multihash was derived from q

00:27:44,080 --> 00:27:46,640
hash

00:27:44,480 --> 00:27:47,679
will add convenience functions but the

00:27:46,640 --> 00:27:49,679
implementation was

00:27:47,679 --> 00:27:51,760
all the logic wasn't q hash and you

00:27:49,679 --> 00:27:52,799
could use a q hash as a multi hash by

00:27:51,760 --> 00:27:55,840
just using

00:27:52,799 --> 00:27:58,720
explicit api like insert multi

00:27:55,840 --> 00:28:01,039
so it was a bit of a mix of concepts and

00:27:58,720 --> 00:28:02,000
in q6 it was decided to split it up and

00:28:01,039 --> 00:28:05,360
have two template

00:28:02,000 --> 00:28:08,000
classes q hash and q multihash

00:28:05,360 --> 00:28:09,440
which i think makes complete sense but

00:28:08,000 --> 00:28:11,279
if you're porting

00:28:09,440 --> 00:28:13,360
you might have cases where you have

00:28:11,279 --> 00:28:15,679
having

00:28:13,360 --> 00:28:16,640
a q hash in your api and you actually

00:28:15,679 --> 00:28:18,880
have to decide

00:28:16,640 --> 00:28:21,039
was it meant to be a multi-hash or not

00:28:18,880 --> 00:28:22,960
so in that way it's now a more explicit

00:28:21,039 --> 00:28:24,720
but uh that's something that you can't

00:28:22,960 --> 00:28:26,000
kind of automatically decide

00:28:24,720 --> 00:28:28,399
obviously if you have a header file

00:28:26,000 --> 00:28:31,600
somewhere and it execute takes a q

00:28:28,399 --> 00:28:33,679
q hash then you have to decide whether

00:28:31,600 --> 00:28:36,000
it should be rather like a multi-hash

00:28:33,679 --> 00:28:37,039
so no that's that's one of the things

00:28:36,000 --> 00:28:38,559
where uh

00:28:37,039 --> 00:28:40,720
you know which you can't just automate

00:28:38,559 --> 00:28:43,360
by search replace um

00:28:40,720 --> 00:28:44,880
the other thing again is like and i

00:28:43,360 --> 00:28:45,520
think that's now a common pattern if you

00:28:44,880 --> 00:28:48,000
see that

00:28:45,520 --> 00:28:49,919
that also the implementation of qhash

00:28:48,000 --> 00:28:51,520
and cumulti has changed a bit

00:28:49,919 --> 00:28:53,520
uh from a node-based approach to a

00:28:51,520 --> 00:28:55,120
two-stage lookup table so

00:28:53,520 --> 00:28:57,760
interesting topics if you're into that

00:28:55,120 --> 00:28:59,919
that uh the button line is obviously it

00:28:57,760 --> 00:29:01,840
should be faster by now

00:28:59,919 --> 00:29:03,840
but it also has some implications in

00:29:01,840 --> 00:29:04,559
term of reference stability so if you

00:29:03,840 --> 00:29:06,799
have a

00:29:04,559 --> 00:29:09,760
hash and you take a reference or a

00:29:06,799 --> 00:29:13,679
pointer to for instance a value

00:29:09,760 --> 00:29:16,720
and then you change the hash then

00:29:13,679 --> 00:29:17,600
that will well i have to say crash more

00:29:16,720 --> 00:29:20,080
often

00:29:17,600 --> 00:29:21,840
uh so i mean even in cute five times

00:29:20,080 --> 00:29:22,799
that was a bit problematic but it was

00:29:21,840 --> 00:29:24,559
usually working

00:29:22,799 --> 00:29:26,159
and you know you shouldn't rely on that

00:29:24,559 --> 00:29:28,320
but you know

00:29:26,159 --> 00:29:29,760
that's how it is you write code and it

00:29:28,320 --> 00:29:31,919
works and you keep it so

00:29:29,760 --> 00:29:33,600
we had one case there or two cases i

00:29:31,919 --> 00:29:34,799
think where we had to adapt our

00:29:33,600 --> 00:29:37,360
implementation and

00:29:34,799 --> 00:29:40,240
the solution was to actually go to

00:29:37,360 --> 00:29:42,320
standard under ordered set in this case

00:29:40,240 --> 00:29:44,000
because a standard unordered set has

00:29:42,320 --> 00:29:45,760
this explicit guarantee

00:29:44,000 --> 00:29:47,440
that you can have a reference and it

00:29:45,760 --> 00:29:50,480
will only be invalid

00:29:47,440 --> 00:29:52,640
if you the item itself is deleted or the

00:29:50,480 --> 00:29:55,200
value itself or the key value part

00:29:52,640 --> 00:29:56,559
pair itself is deleted so that might be

00:29:55,200 --> 00:29:58,960
you know an option

00:29:56,559 --> 00:29:58,960
to use

00:30:02,000 --> 00:30:05,039
now if you're into containers and have

00:30:03,679 --> 00:30:06,840
been following the discussion i don't

00:30:05,039 --> 00:30:09,600
know just a bit

00:30:06,840 --> 00:30:12,000
then your list might have come

00:30:09,600 --> 00:30:13,120
and q vector might have come to europe

00:30:12,000 --> 00:30:16,240
um

00:30:13,120 --> 00:30:16,240
to attention so

00:30:16,799 --> 00:30:23,520
the problem with q list was twofold

00:30:20,399 --> 00:30:25,440
or is twofold the first one

00:30:23,520 --> 00:30:26,720
is that it had a very interesting

00:30:25,440 --> 00:30:29,520
implementation in

00:30:26,720 --> 00:30:32,320
that try to be clever whether the

00:30:29,520 --> 00:30:36,000
elements of a list

00:30:32,320 --> 00:30:39,279
would be allocated like continuously

00:30:36,000 --> 00:30:41,440
in the memory or whether the memory

00:30:39,279 --> 00:30:43,840
allocate for kill this vector acculist

00:30:41,440 --> 00:30:46,880
is just an indirection and you know

00:30:43,840 --> 00:30:50,640
um points to to somewhere else

00:30:46,880 --> 00:30:51,840
uh in memory and cue list had some you

00:30:50,640 --> 00:30:54,720
know

00:30:51,840 --> 00:30:56,720
try to be clever and determine what you

00:30:54,720 --> 00:30:58,880
want and what's best for your use case

00:30:56,720 --> 00:31:00,399
uh turns out that very early on people

00:30:58,880 --> 00:31:02,480
pointed out that this is

00:31:00,399 --> 00:31:04,000
you know not always work for creating

00:31:02,480 --> 00:31:05,519
the right results and that we should

00:31:04,000 --> 00:31:07,679
rather use q vector

00:31:05,519 --> 00:31:09,440
which was added as a very explicit way

00:31:07,679 --> 00:31:10,480
to say okay it's always one continuous

00:31:09,440 --> 00:31:13,519
block of memory

00:31:10,480 --> 00:31:16,000
and the elements are in there which uh

00:31:13,519 --> 00:31:16,880
you know is faster in terms of memory

00:31:16,000 --> 00:31:18,559
access so if you

00:31:16,880 --> 00:31:20,399
iterate over things then that's usually

00:31:18,559 --> 00:31:23,360
the preferred thing

00:31:20,399 --> 00:31:25,279
um all right so then there was

00:31:23,360 --> 00:31:27,200
discussion i want to do in q6

00:31:25,279 --> 00:31:29,120
that was one problem so weird memory

00:31:27,200 --> 00:31:29,760
model and the other problem was that

00:31:29,120 --> 00:31:33,039
there is

00:31:29,760 --> 00:31:34,799
uh the std library which

00:31:33,039 --> 00:31:36,320
unfortunately has different names or the

00:31:34,799 --> 00:31:37,840
same names for different concepts so

00:31:36,320 --> 00:31:40,960
they also have a list

00:31:37,840 --> 00:31:42,000
but it was actually uh they have a list

00:31:40,960 --> 00:31:44,159
and a vector

00:31:42,000 --> 00:31:45,200
and q vector is standard vector but q

00:31:44,159 --> 00:31:47,440
list wasn't

00:31:45,200 --> 00:31:48,399
you know standard list but was something

00:31:47,440 --> 00:31:49,919
in between

00:31:48,399 --> 00:31:52,000
so there was quite some discussion how

00:31:49,919 --> 00:31:53,760
to solve this um

00:31:52,000 --> 00:31:55,679
one of the ideas was to i don't know

00:31:53,760 --> 00:31:56,559
deprecate cue list and just live with

00:31:55,679 --> 00:32:00,080
qvector

00:31:56,559 --> 00:32:01,679
the thing is the list is everywhere it's

00:32:00,080 --> 00:32:03,840
in every it's a lot of i mean

00:32:01,679 --> 00:32:04,720
there's hardly well i'm all exaggerating

00:32:03,840 --> 00:32:08,640
but it's

00:32:04,720 --> 00:32:12,000
arguably the most used class of uh cute

00:32:08,640 --> 00:32:14,480
um maybe in in line with q string

00:32:12,000 --> 00:32:16,080
so uh changing such a fundamental thing

00:32:14,480 --> 00:32:17,919
and deprecating it would be really

00:32:16,080 --> 00:32:19,679
kind of the mere definition of a source

00:32:17,919 --> 00:32:21,760
uh compatibility break

00:32:19,679 --> 00:32:23,760
so we decide not to do that in the end

00:32:21,760 --> 00:32:24,399
but instead adapt the implementation of

00:32:23,760 --> 00:32:26,480
q list

00:32:24,399 --> 00:32:28,559
to be more or less that what this q

00:32:26,480 --> 00:32:32,080
vector was previously

00:32:28,559 --> 00:32:33,919
so um yeah that's what happened in q6

00:32:32,080 --> 00:32:35,840
so if you have still fights with your

00:32:33,919 --> 00:32:36,640
colleagues about whether to use q list

00:32:35,840 --> 00:32:38,320
or q vector

00:32:36,640 --> 00:32:40,000
the good news is you can stop now

00:32:38,320 --> 00:32:40,640
because you can say into six it's all

00:32:40,000 --> 00:32:44,799
the same

00:32:40,640 --> 00:32:44,799
q vector is now a typed ftq list

00:32:45,440 --> 00:32:49,120
and yeah you might imagine that's quite

00:32:47,679 --> 00:32:52,480
a fundamental change

00:32:49,120 --> 00:32:53,440
uh to be honest to my surprise in cute

00:32:52,480 --> 00:32:56,480
creator we

00:32:53,440 --> 00:32:58,240
barely noticed so there might be

00:32:56,480 --> 00:33:00,799
performance improvement in some cases

00:32:58,240 --> 00:33:03,679
performance degradation in other

00:33:00,799 --> 00:33:05,840
corner cases but to be honest kind of in

00:33:03,679 --> 00:33:09,120
the overall thing it really didn't

00:33:05,840 --> 00:33:10,080
show up too much so that port was

00:33:09,120 --> 00:33:12,720
actually quite quite

00:33:10,080 --> 00:33:14,799
forward uh except that you if you are

00:33:12,720 --> 00:33:16,880
really into pre-declaring everything

00:33:14,799 --> 00:33:17,840
like in the headers for optimizing

00:33:16,880 --> 00:33:19,600
compile times

00:33:17,840 --> 00:33:21,039
then you have a problem because qvector

00:33:19,600 --> 00:33:23,279
has been changing

00:33:21,039 --> 00:33:25,120
uh so it's it's not it's not his own

00:33:23,279 --> 00:33:28,799
class anymore

00:33:25,120 --> 00:33:29,840
so yeah um another word about reference

00:33:28,799 --> 00:33:32,159
instability

00:33:29,840 --> 00:33:33,600
you know you might notice the theme now

00:33:32,159 --> 00:33:35,360
your list for bigger

00:33:33,600 --> 00:33:36,960
for for for certain types that were

00:33:35,360 --> 00:33:39,200
large enough uh

00:33:36,960 --> 00:33:40,240
and actually you know you could take a

00:33:39,200 --> 00:33:42,559
reference and

00:33:40,240 --> 00:33:43,279
to an element and because it was at a

00:33:42,559 --> 00:33:45,039
different

00:33:43,279 --> 00:33:46,960
memory location you could change the

00:33:45,039 --> 00:33:48,880
vector uh sorry the cue list

00:33:46,960 --> 00:33:50,240
and the reference was still valid not

00:33:48,880 --> 00:33:54,000
true anymore with

00:33:50,240 --> 00:33:55,760
uh cue list and sk6 so if you are

00:33:54,000 --> 00:33:57,600
if you having a case where you i don't

00:33:55,760 --> 00:34:00,720
know have that problem

00:33:57,600 --> 00:34:02,880
or anyhow you are disagree that actually

00:34:00,720 --> 00:34:05,600
the new implementation is better then

00:34:02,880 --> 00:34:08,480
the cop-out is to go to standard list

00:34:05,600 --> 00:34:08,879
because that is always this structure

00:34:08,480 --> 00:34:10,800
where you

00:34:08,879 --> 00:34:12,320
have the elements are stored separately

00:34:10,800 --> 00:34:13,919
in memory um

00:34:12,320 --> 00:34:15,760
and if you're using q linked list that

00:34:13,919 --> 00:34:17,440
was also one where we noticed okay q

00:34:15,760 --> 00:34:20,240
link list is actually standard list

00:34:17,440 --> 00:34:22,000
from their concept here it's rarely used

00:34:20,240 --> 00:34:25,280
at least in quick creator and qt

00:34:22,000 --> 00:34:26,240
so we almost we just decided okay let's

00:34:25,280 --> 00:34:28,639
you know

00:34:26,240 --> 00:34:30,560
move it to qt5 complete again you can

00:34:28,639 --> 00:34:32,839
find it there but

00:34:30,560 --> 00:34:35,839
to port it actually just use standard

00:34:32,839 --> 00:34:35,839
list

00:34:38,560 --> 00:34:40,960
good

00:34:41,599 --> 00:34:46,720
um yeah the summary is that porting is

00:34:43,919 --> 00:34:49,839
mostly straightforward

00:34:46,720 --> 00:34:49,839
yeah i mean

00:34:50,079 --> 00:34:53,679
it might not meet appear from the slides

00:34:52,320 --> 00:34:55,679
that you showed but i was

00:34:53,679 --> 00:34:56,879
kind of after showing you the exact the

00:34:55,679 --> 00:35:00,720
the interesting things

00:34:56,879 --> 00:35:02,720
so most of the patches of the 180

00:35:00,720 --> 00:35:04,160
whatever patches that i had was actually

00:35:02,720 --> 00:35:07,200
quite straightforward so

00:35:04,160 --> 00:35:09,520
don't get confused by these by these

00:35:07,200 --> 00:35:11,920
foot footnotes basically that i'm

00:35:09,520 --> 00:35:13,920
bringing up here

00:35:11,920 --> 00:35:14,960
and yeah the recommendation is portrait

00:35:13,920 --> 00:35:17,119
00:35:14,960 --> 00:35:18,480
fixed applications then you know moving

00:35:17,119 --> 00:35:20,720
to six should be actually quite

00:35:18,480 --> 00:35:23,680
straightforward

00:35:20,720 --> 00:35:25,280
but what exactly you're affected with is

00:35:23,680 --> 00:35:28,400
obviously depends on your

00:35:25,280 --> 00:35:30,079
much on your application so we were

00:35:28,400 --> 00:35:30,720
looking to carry user feedback for

00:35:30,079 --> 00:35:32,880
instance

00:35:30,720 --> 00:35:34,400
and there it's mostly q hash i mean it's

00:35:32,880 --> 00:35:36,320
also just a couple of things but

00:35:34,400 --> 00:35:37,440
uh sorry there was q variant so q

00:35:36,320 --> 00:35:40,320
variant was

00:35:37,440 --> 00:35:41,200
uh got a lot more stricter and so on uh

00:35:40,320 --> 00:35:43,520
so

00:35:41,200 --> 00:35:44,800
um what we really try to do and what all

00:35:43,520 --> 00:35:46,720
i'm telling you is probably

00:35:44,800 --> 00:35:48,160
documented in the documentation so there

00:35:46,720 --> 00:35:51,520
is a porting guide

00:35:48,160 --> 00:35:53,440
on docu that you can go to and uh there

00:35:51,520 --> 00:35:54,480
is also separate pages for every single

00:35:53,440 --> 00:35:56,560
module

00:35:54,480 --> 00:35:58,079
like you'd call like gui and so on where

00:35:56,560 --> 00:36:00,640
the things are kind of explained

00:35:58,079 --> 00:36:01,760
and we try to be uh be really thorough

00:36:00,640 --> 00:36:04,400
with that to

00:36:01,760 --> 00:36:05,440
um yeah to help you there so it's a good

00:36:04,400 --> 00:36:07,359
idea to

00:36:05,440 --> 00:36:08,560
either directly read that thing or at

00:36:07,359 --> 00:36:11,200
least bookmark it

00:36:08,560 --> 00:36:12,560
if you are actually doing the porting

00:36:11,200 --> 00:36:14,960
and

00:36:12,560 --> 00:36:16,640
yeah we also much appreciate feedback

00:36:14,960 --> 00:36:17,359
about this one to be honest because i

00:36:16,640 --> 00:36:19,440
think

00:36:17,359 --> 00:36:21,440
now is the time to really you know cover

00:36:19,440 --> 00:36:24,720
all the things and so on that

00:36:21,440 --> 00:36:24,720
people can benefit from it

00:36:24,839 --> 00:36:27,839
so

00:36:28,880 --> 00:36:33,280
yeah the last thing i want to mention is

00:36:31,040 --> 00:36:33,280
that

00:36:33,359 --> 00:36:36,720
i've been saying a lot of times that it

00:36:35,119 --> 00:36:38,720
was a lot of mechanical things

00:36:36,720 --> 00:36:40,320
so the obvious question is can't we

00:36:38,720 --> 00:36:43,200
automate this

00:36:40,320 --> 00:36:44,160
and we had the same idea and actually uh

00:36:43,200 --> 00:36:46,000
worked

00:36:44,160 --> 00:36:47,760
uh together with gate up and the kde

00:36:46,000 --> 00:36:50,880
community on crazy

00:36:47,760 --> 00:36:52,720
so if you haven't used crazy or yet it's

00:36:50,880 --> 00:36:54,000
i think originally created by kdap a

00:36:52,720 --> 00:36:57,040
tool that

00:36:54,000 --> 00:36:58,960
is built around clang and allows like

00:36:57,040 --> 00:36:59,680
these code transformations so code

00:36:58,960 --> 00:37:03,760
checking

00:36:59,680 --> 00:37:05,520
and code transformations and

00:37:03,760 --> 00:37:08,560
what the latest version which is i

00:37:05,520 --> 00:37:11,760
believe 1.9

00:37:08,560 --> 00:37:15,040
um features now at least these four

00:37:11,760 --> 00:37:17,200
uh fixes so these are not

00:37:15,040 --> 00:37:19,119
so crazy the cold crazy had a lot of

00:37:17,200 --> 00:37:21,440
fixes and checks

00:37:19,119 --> 00:37:22,560
but they split up a bit into this is

00:37:21,440 --> 00:37:24,240
really kind of

00:37:22,560 --> 00:37:26,079
everybody should use that so it's in the

00:37:24,240 --> 00:37:28,320
default set of things to be checked

00:37:26,079 --> 00:37:29,359
and then there is microsoft manual uh

00:37:28,320 --> 00:37:32,160
fixes

00:37:29,359 --> 00:37:33,680
so that's uh that's the category of

00:37:32,160 --> 00:37:35,200
manual fixes so if you just run

00:37:33,680 --> 00:37:37,280
crazy without any arguments you don't

00:37:35,200 --> 00:37:37,920
get them but if you're into starting a

00:37:37,280 --> 00:37:40,800
port

00:37:37,920 --> 00:37:41,280
then be aware that there's crazy checks

00:37:40,800 --> 00:37:44,480
for

00:37:41,280 --> 00:37:48,320
yeah header fixes uh when header changed

00:37:44,480 --> 00:37:50,400
uh forward fixes that was actually also

00:37:48,320 --> 00:37:52,800
quite often that you

00:37:50,400 --> 00:37:54,560
i don't know some some header was

00:37:52,800 --> 00:37:56,240
included by some other header which is

00:37:54,560 --> 00:37:59,440
not the 2 anymore

00:37:56,240 --> 00:38:01,680
q hash signature is another one

00:37:59,440 --> 00:38:05,200
size t versus int and so on so i can

00:38:01,680 --> 00:38:06,880
only recommend to use that

00:38:05,200 --> 00:38:08,320
and we'd like to have feedback actually

00:38:06,880 --> 00:38:09,200
about this because to be honest we

00:38:08,320 --> 00:38:12,400
didn't receive

00:38:09,200 --> 00:38:14,560
so much about this so that means either

00:38:12,400 --> 00:38:16,640
people are perfectly happy with it or

00:38:14,560 --> 00:38:19,680
which i doubt or

00:38:16,640 --> 00:38:22,720
you know they haven't discovered it yet

00:38:19,680 --> 00:38:26,079
so talk to us tell that

00:38:22,720 --> 00:38:26,079
tell us what you think about this one

00:38:27,760 --> 00:38:30,800
i think that's it

00:38:30,880 --> 00:38:36,320
hey thanks so much well we have reached

00:38:34,079 --> 00:38:38,000
time unfortunately but you do have a

00:38:36,320 --> 00:38:40,240
list of questions

00:38:38,000 --> 00:38:41,920
i'd love to invite you to the matrix

00:38:40,240 --> 00:38:44,000
channel

00:38:41,920 --> 00:38:46,320
to answer some of those questions in

00:38:44,000 --> 00:38:50,160
chat if you have some time

00:38:46,320 --> 00:38:52,400
sure yeah i'll be there

00:38:50,160 --> 00:38:53,440
great well thank you i will connect with

00:38:52,400 --> 00:38:55,520
you also

00:38:53,440 --> 00:38:56,560
off screen to make sure you're able to

00:38:55,520 --> 00:38:59,760
get all of the

00:38:56,560 --> 00:39:00,000
the list of questions too so just ping

00:38:59,760 --> 00:39:03,119
me

00:39:00,000 --> 00:39:04,880
and we'll get you all set cool thanks a

00:39:03,119 --> 00:39:08,720
lot and have fun thanks

00:39:04,880 --> 00:39:08,720
thanks so much have a great rest of the

00:39:12,119 --> 00:39:15,119

YouTube URL: https://www.youtube.com/watch?v=YExE43JBhTQ


