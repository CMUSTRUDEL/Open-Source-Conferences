Title: Akademy 2021 - Interactive UIs in Qt Quick 3D
Publication date: 2021-06-30
Playlist: Akademy 2021
Description: 
	By Shawn Rutledge
Over the last decade, Qt Quick has become one of the best technologies for developing hardware-accelerated 2D "fluid" user interfaces, and is on track to eventually replace conventional desktop-style widget-based GUIs in many applications. In Qt 6 another possibility is approaching adolescence: you can use the same declarative QML language to create 3D applications too. In this talk we'll explore some of the possibilities: 2D applications for working with 3D content (like CAD, 3D design and 3D printing applications), 3D applications which also contain 2D user interfaces mapped onto the surfaces of the objects (games and simulations), and fully immersive 3D user interfaces. We hope that with all this power available via such an easy language as QML, the community can begin to develop entirely new categories of applications.
Captions: 
	00:00:01,110 --> 00:00:08,589
[Music]

00:00:12,000 --> 00:00:13,679
hi

00:00:12,320 --> 00:00:15,519
this is sean rutledge from thecute

00:00:13,679 --> 00:00:18,800
company here to talk to you about happy

00:00:15,519 --> 00:00:21,840
listening okay

00:00:18,800 --> 00:00:24,720
so should i start it

00:00:21,840 --> 00:00:27,039
yep how to develop interactive ui's in

00:00:24,720 --> 00:00:28,720
qt quick 3d which is just now becoming a

00:00:27,039 --> 00:00:30,320
possibility

00:00:28,720 --> 00:00:33,360
i've been a cute developer since about

00:00:30,320 --> 00:00:34,559
2004 joined the cute company in 2011

00:00:33,360 --> 00:00:37,520
and these are some other things that

00:00:34,559 --> 00:00:39,200
i've worked on during those times

00:00:37,520 --> 00:00:41,600
i'll be going through different

00:00:39,200 --> 00:00:43,360
scenarios in which you might be able to

00:00:41,600 --> 00:00:44,000
use qt quick 3d for some sort of

00:00:43,360 --> 00:00:46,559
interactive

00:00:44,000 --> 00:00:48,000
application for some disclaimers i'm not

00:00:46,559 --> 00:00:50,000
on the graphics team

00:00:48,000 --> 00:00:51,760
i'm not a gamer and there's a lot of

00:00:50,000 --> 00:00:54,320
things i don't understand yet about how

00:00:51,760 --> 00:00:56,879
3d rendering is done internally

00:00:54,320 --> 00:00:58,320
but as the qt quick maintainer i wanted

00:00:56,879 --> 00:00:58,960
to make sure that the interactive

00:00:58,320 --> 00:01:01,359
aspects

00:00:58,960 --> 00:01:03,120
work similarly in kit quick 3d as they

00:01:01,359 --> 00:01:05,199
do in qt quick so that you don't

00:01:03,120 --> 00:01:06,720
have to have to completely start over

00:01:05,199 --> 00:01:08,960
with different qml types

00:01:06,720 --> 00:01:10,159
for handling mouse and touch events and

00:01:08,960 --> 00:01:12,080
things like that

00:01:10,159 --> 00:01:13,600
also this presentation depends on some

00:01:12,080 --> 00:01:15,600
forward-looking features that we haven't

00:01:13,600 --> 00:01:18,080
shipped yet if you want to reproduce my

00:01:15,600 --> 00:01:21,200
demos you can apply these two patches

00:01:18,080 --> 00:01:21,200
and you should be able to

00:01:21,439 --> 00:01:25,439
so maybe you want to think a little bit

00:01:23,200 --> 00:01:27,759
about what applications you have in mind

00:01:25,439 --> 00:01:29,280
where you could actually use qt quick 3d

00:01:27,759 --> 00:01:32,400
surely it's useful for other things

00:01:29,280 --> 00:01:35,200
besides games right

00:01:32,400 --> 00:01:36,000
but let's start by showing the runtime

00:01:35,200 --> 00:01:38,560
loader

00:01:36,000 --> 00:01:40,000
which is one way of loading a model and

00:01:38,560 --> 00:01:42,240
i'm loading a gltf

00:01:40,000 --> 00:01:43,600
model here which i downloaded from the

00:01:42,240 --> 00:01:46,720
smithsonian

00:01:43,600 --> 00:01:48,640
gltf is an open format

00:01:46,720 --> 00:01:49,920
and they've decided that they're going

00:01:48,640 --> 00:01:53,200
to use it for

00:01:49,920 --> 00:01:54,560
digitizing format and

00:01:53,200 --> 00:01:57,439
they've decided that they're going to

00:01:54,560 --> 00:02:00,000
use it for digitizing a lot of the

00:01:57,439 --> 00:02:02,399
items in the museum collection so this

00:02:00,000 --> 00:02:04,159
is the apollo command module which was

00:02:02,399 --> 00:02:06,159
in orbit around the moon and

00:02:04,159 --> 00:02:07,600
came back to earth afterwards at least i

00:02:06,159 --> 00:02:08,959
think it's the original or maybe it was

00:02:07,600 --> 00:02:10,959
a spare i'm not sure

00:02:08,959 --> 00:02:13,120
so i downloaded this model i'm simply

00:02:10,959 --> 00:02:16,720
loading it with the runtime loader

00:02:13,120 --> 00:02:18,800
and um well you see that the runtime

00:02:16,720 --> 00:02:20,640
loader is there

00:02:18,800 --> 00:02:22,640
and then at the bottom i have a file

00:02:20,640 --> 00:02:23,440
dialog and unaccepted i set the loader

00:02:22,640 --> 00:02:26,640
source to the

00:02:23,440 --> 00:02:28,080
url that was chosen from the file dialog

00:02:26,640 --> 00:02:29,840
and that's really all there is to it and

00:02:28,080 --> 00:02:31,040
the rest of it has to do with navigation

00:02:29,840 --> 00:02:32,959
there's a wheel handler

00:02:31,040 --> 00:02:34,959
a drag handler with the middle button

00:02:32,959 --> 00:02:37,200
that i can pan around and the

00:02:34,959 --> 00:02:39,200
velocity controller is what you usually

00:02:37,200 --> 00:02:40,480
use for game navigation

00:02:39,200 --> 00:02:43,280
where you use the keyboard to walk

00:02:40,480 --> 00:02:46,720
around and also you can use the mouse to

00:02:43,280 --> 00:02:48,560
pan around the scene when you're working

00:02:46,720 --> 00:02:50,959
with quick 3d these are the most common

00:02:48,560 --> 00:02:53,760
qml types that you'll encounter

00:02:50,959 --> 00:02:54,640
object 3d is the base class implements q

00:02:53,760 --> 00:02:57,360
object

00:02:54,640 --> 00:02:59,200
then node has a position rotation scale

00:02:57,360 --> 00:03:01,200
it's abstract but it can be instantiated

00:02:59,200 --> 00:03:02,800
and it can be used as a container so a

00:03:01,200 --> 00:03:03,440
node can contain any number of other

00:03:02,800 --> 00:03:05,599
nodes

00:03:03,440 --> 00:03:06,560
another subclass is the model which has

00:03:05,599 --> 00:03:09,680
geometry

00:03:06,560 --> 00:03:10,239
and materials this pickable property is

00:03:09,680 --> 00:03:12,319
important

00:03:10,239 --> 00:03:14,800
for making the model interactive if you

00:03:12,319 --> 00:03:15,599
want to add any interactive content as

00:03:14,800 --> 00:03:17,120
children of it

00:03:15,599 --> 00:03:18,720
and then you have lights camera the

00:03:17,120 --> 00:03:19,200
runtime loader is the one i just showed

00:03:18,720 --> 00:03:20,879
that was

00:03:19,200 --> 00:03:22,319
also putting geometry into the scene

00:03:20,879 --> 00:03:24,080
then we have materials

00:03:22,319 --> 00:03:26,159
principled material and default material

00:03:24,080 --> 00:03:27,599
have the same shader implementation

00:03:26,159 --> 00:03:29,920
but they have different properties

00:03:27,599 --> 00:03:33,280
default material has the specular

00:03:29,920 --> 00:03:35,280
and translucency principled material

00:03:33,280 --> 00:03:37,440
is a more modern pbr approach where it

00:03:35,280 --> 00:03:40,319
has metalness custom material

00:03:37,440 --> 00:03:41,680
is also similar but it does allow you to

00:03:40,319 --> 00:03:43,200
provide your own shaders

00:03:41,680 --> 00:03:45,360
if you don't want to use the default

00:03:43,200 --> 00:03:46,239
ones so you've got a 3d scene and you

00:03:45,360 --> 00:03:48,319
want to show it

00:03:46,239 --> 00:03:50,239
then you need view 3d that's a 2d

00:03:48,319 --> 00:03:51,920
viewport into the 3d scene

00:03:50,239 --> 00:03:53,680
it allows you to specify the camera

00:03:51,920 --> 00:03:55,519
skybox typically would be

00:03:53,680 --> 00:03:57,439
an environment that you would use and

00:03:55,519 --> 00:03:59,120
that is an item so you actually use this

00:03:57,439 --> 00:04:01,760
to embed it into a

00:03:59,120 --> 00:04:03,120
ordinary 2d cute quick scene but you're

00:04:01,760 --> 00:04:04,720
not usually going to write all of that

00:04:03,120 --> 00:04:06,080
from scratch right

00:04:04,720 --> 00:04:08,319
you might want to start with a modeling

00:04:06,080 --> 00:04:09,760
tool for creating the 3d objects

00:04:08,319 --> 00:04:11,680
the best of the free software for

00:04:09,760 --> 00:04:13,120
modeling is blender it's really worth

00:04:11,680 --> 00:04:13,680
your time to try to learn that even

00:04:13,120 --> 00:04:15,439
though

00:04:13,680 --> 00:04:16,959
the ui is a bit complicated it's gotten

00:04:15,439 --> 00:04:20,000
better in recent years and

00:04:16,959 --> 00:04:22,240
more organized easier to work with but

00:04:20,000 --> 00:04:24,639
i come from the 3d printing background

00:04:22,240 --> 00:04:26,960
so i've been using openscanned a lot

00:04:24,639 --> 00:04:28,400
and openscad is only able to output an

00:04:26,960 --> 00:04:30,160
stl file

00:04:28,400 --> 00:04:31,840
which is just a bunch of triangles it's

00:04:30,160 --> 00:04:34,800
just a mesh and so

00:04:31,840 --> 00:04:36,240
an stl file can be imported into cute

00:04:34,800 --> 00:04:38,400
quick i'll tell you how

00:04:36,240 --> 00:04:40,160
but you're not able to apply textures to

00:04:38,400 --> 00:04:41,520
it or at least not without further

00:04:40,160 --> 00:04:43,600
modification

00:04:41,520 --> 00:04:46,000
that's a nice declarative way to work if

00:04:43,600 --> 00:04:47,600
you like writing code instead of

00:04:46,000 --> 00:04:49,280
instead of graphically manipulating

00:04:47,600 --> 00:04:51,040
things then openscan is fun to work with

00:04:49,280 --> 00:04:53,280
but it has its limitations

00:04:51,040 --> 00:04:55,919
freecad i haven't had very much success

00:04:53,280 --> 00:04:57,520
with so far but it's able to export gltf

00:04:55,919 --> 00:04:59,600
in theory

00:04:57,520 --> 00:05:02,479
and then you have the commercial tools

00:04:59,600 --> 00:05:06,000
maya 3d studio max and a bunch of others

00:05:02,479 --> 00:05:08,240
to choose from because cute quick 3d

00:05:06,000 --> 00:05:10,320
is a real-time render our favorite

00:05:08,240 --> 00:05:10,880
format is gltf because it was designed

00:05:10,320 --> 00:05:12,639
for that

00:05:10,880 --> 00:05:15,120
and we're eventually going to be able to

00:05:12,639 --> 00:05:17,039
support all the features of gltf

00:05:15,120 --> 00:05:18,639
stl like i said it has its limitations

00:05:17,039 --> 00:05:20,320
when it comes to applying materials to

00:05:18,639 --> 00:05:22,240
the result although you can apply a

00:05:20,320 --> 00:05:23,759
color and the glossiness and so forth

00:05:22,240 --> 00:05:25,440
it's fine to use default material or

00:05:23,759 --> 00:05:28,080
principled material with sdl

00:05:25,440 --> 00:05:28,720
then there's a collada fvx and wavefront

00:05:28,080 --> 00:05:30,800
obj

00:05:28,720 --> 00:05:32,400
those are typically used as interchange

00:05:30,800 --> 00:05:33,440
formats between the different modeling

00:05:32,400 --> 00:05:36,320
tools

00:05:33,440 --> 00:05:36,880
and they have a lot of features and qt

00:05:36,320 --> 00:05:38,479
is not

00:05:36,880 --> 00:05:40,560
ever probably going to be able to

00:05:38,479 --> 00:05:41,840
support all of those features

00:05:40,560 --> 00:05:44,080
because they're not appropriate for a

00:05:41,840 --> 00:05:45,759
real-time rendering so when it comes to

00:05:44,080 --> 00:05:47,600
to import these different kinds of

00:05:45,759 --> 00:05:49,600
assets into your scene

00:05:47,600 --> 00:05:51,759
i showed you the runtime loader already

00:05:49,600 --> 00:05:56,240
and there's also another choice which is

00:05:51,759 --> 00:05:58,080
balsam that uses our asset import module

00:05:56,240 --> 00:05:59,840
which consists of the asset import

00:05:58,080 --> 00:06:02,400
manager and then there's a

00:05:59,840 --> 00:06:03,759
virtual base class for the asset

00:06:02,400 --> 00:06:06,560
importers and then we have

00:06:03,759 --> 00:06:07,680
two subclasses so far one of them uses

00:06:06,560 --> 00:06:10,240
asim which is

00:06:07,680 --> 00:06:12,639
a third party asset importer library

00:06:10,240 --> 00:06:14,479
cute 3d studio is obsolete

00:06:12,639 --> 00:06:16,000
but if you've been using it so far to

00:06:14,479 --> 00:06:17,600
create models then you'll be able to

00:06:16,000 --> 00:06:19,840
import them with this uip

00:06:17,600 --> 00:06:21,360
importer so anyway there's a command

00:06:19,840 --> 00:06:24,400
line tool called balsam

00:06:21,360 --> 00:06:26,960
and it can read any of these formats and

00:06:24,400 --> 00:06:27,680
output a mesh file which is a cute

00:06:26,960 --> 00:06:30,160
specific

00:06:27,680 --> 00:06:31,440
way of storing meshes and also the qml

00:06:30,160 --> 00:06:33,199
for the entire scene

00:06:31,440 --> 00:06:34,479
so what you'll get out is typically a

00:06:33,199 --> 00:06:37,120
node as your

00:06:34,479 --> 00:06:39,039
root object and then models and

00:06:37,120 --> 00:06:40,800
materials and stuff inside there

00:06:39,039 --> 00:06:42,160
and you just need to create the view 3d

00:06:40,800 --> 00:06:45,360
to embed it into your

00:06:42,160 --> 00:06:47,680
2d scene there's also balsam

00:06:45,360 --> 00:06:49,120
ui which is just a widget application

00:06:47,680 --> 00:06:50,240
that provides checkboxes for all the

00:06:49,120 --> 00:06:52,400
command line options

00:06:50,240 --> 00:06:53,280
so that's one way to work another way to

00:06:52,400 --> 00:06:54,960
work is to use

00:06:53,280 --> 00:06:56,560
cute design studio which is our

00:06:54,960 --> 00:06:58,720
commercial only tool

00:06:56,560 --> 00:07:00,400
in q creator 5 there's going to be a

00:06:58,720 --> 00:07:03,199
pretty decent 3d

00:07:00,400 --> 00:07:04,639
design mode built in so the ultimate

00:07:03,199 --> 00:07:06,240
goal is that design studio

00:07:04,639 --> 00:07:08,560
will be able to orchestrate all of this

00:07:06,240 --> 00:07:10,319
stuff so that designers that are not

00:07:08,560 --> 00:07:10,720
programmers will be able to import it

00:07:10,319 --> 00:07:12,400
and

00:07:10,720 --> 00:07:14,400
create the qml scenes and then they can

00:07:12,400 --> 00:07:16,479
hand it over to the kind of people who

00:07:14,400 --> 00:07:18,000
add the interactive functionality to it

00:07:16,479 --> 00:07:19,599
if you've been using custom material and

00:07:18,000 --> 00:07:20,960
writing your own shaders then probably

00:07:19,599 --> 00:07:23,680
you want to use shader gen

00:07:20,960 --> 00:07:25,360
to pre-compile the shaders into spear

00:07:23,680 --> 00:07:27,520
which is standard portable

00:07:25,360 --> 00:07:28,960
intermediate representation and that

00:07:27,520 --> 00:07:30,800
makes it more suited for

00:07:28,960 --> 00:07:32,880
fast runtime loading but that's an

00:07:30,800 --> 00:07:33,840
optional step we're perfectly capable of

00:07:32,880 --> 00:07:37,199
loading

00:07:33,840 --> 00:07:38,479
shaders at runtime so the typical

00:07:37,199 --> 00:07:40,319
workflow for creating

00:07:38,479 --> 00:07:42,319
3d interactive content is that you're

00:07:40,319 --> 00:07:45,039
going to start with a modeling tool

00:07:42,319 --> 00:07:45,680
to create your 3d objects and manipulate

00:07:45,039 --> 00:07:48,160
existing

00:07:45,680 --> 00:07:49,520
3d objects that you're able to download

00:07:48,160 --> 00:07:50,879
probably blender

00:07:49,520 --> 00:07:52,639
but at any rate you need to choose

00:07:50,879 --> 00:07:53,440
modeling tools that are able to export

00:07:52,639 --> 00:07:54,639
gltf

00:07:53,440 --> 00:07:57,759
because that's the format that we

00:07:54,639 --> 00:08:00,000
support best for importing into qt quick

00:07:57,759 --> 00:08:01,199
and then you probably can use balsam on

00:08:00,000 --> 00:08:03,599
the command line to

00:08:01,199 --> 00:08:06,000
generate your qml if you're not using

00:08:03,599 --> 00:08:07,360
creator or design studio for that

00:08:06,000 --> 00:08:10,560
and then you just need to create your

00:08:07,360 --> 00:08:12,720
view 3d and the rest of your 2d ui

00:08:10,560 --> 00:08:14,400
and that's basically it so i mentioned

00:08:12,720 --> 00:08:16,080
that creator is going to be having a

00:08:14,400 --> 00:08:17,280
design mode and this is what it looks

00:08:16,080 --> 00:08:19,280
like i actually

00:08:17,280 --> 00:08:20,479
imported a model which you'll be seeing

00:08:19,280 --> 00:08:22,400
later on

00:08:20,479 --> 00:08:23,840
okay so let's talk about the most basic

00:08:22,400 --> 00:08:26,080
use case

00:08:23,840 --> 00:08:28,400
if you have a 3d application you might

00:08:26,080 --> 00:08:31,440
want to incorporate some sort of a 2d

00:08:28,400 --> 00:08:34,640
ui into there and i've simply declared

00:08:31,440 --> 00:08:36,640
a busybox 2d item inside a node

00:08:34,640 --> 00:08:38,479
and so what this does is it creates a 2d

00:08:36,640 --> 00:08:41,360
subscene inside the 3d

00:08:38,479 --> 00:08:43,360
scene you'll see that if i if i use the

00:08:41,360 --> 00:08:45,279
slider to change the rotation

00:08:43,360 --> 00:08:46,640
now i've got a 3d rotating cube over

00:08:45,279 --> 00:08:49,360
here

00:08:46,640 --> 00:08:51,040
and that actually pokes through busy box

00:08:49,360 --> 00:08:52,240
has a particular size of course in

00:08:51,040 --> 00:08:55,200
pixels

00:08:52,240 --> 00:08:55,920
but it's on an infinite plane and i have

00:08:55,200 --> 00:08:59,040
a

00:08:55,920 --> 00:09:01,279
2d um particle system inside there

00:08:59,040 --> 00:09:03,040
so you can see that it's filling up the

00:09:01,279 --> 00:09:05,279
entire space on that plane when the

00:09:03,040 --> 00:09:07,680
when the particles are emitted it's 10

00:09:05,279 --> 00:09:09,600
24 by 480 this is a 4k screen and you

00:09:07,680 --> 00:09:11,200
can actually see that though

00:09:09,600 --> 00:09:13,600
that that's taking up about a quarter of

00:09:11,200 --> 00:09:16,560
my screen width

00:09:13,600 --> 00:09:19,040
another way to use it is to have

00:09:16,560 --> 00:09:20,959
textures mapped onto 3d objects

00:09:19,040 --> 00:09:22,560
so in this case i've got a node which

00:09:20,959 --> 00:09:24,320
actually wasn't really necessary i could

00:09:22,560 --> 00:09:26,560
have just had my model directly in the

00:09:24,320 --> 00:09:28,880
in the view 3d you know you there's

00:09:26,560 --> 00:09:32,399
built-in types like cube sphere

00:09:28,880 --> 00:09:35,760
cylinder and rectangle i have a model

00:09:32,399 --> 00:09:38,000
which is a cube and a default material

00:09:35,760 --> 00:09:39,360
the diffuse map meaning the diffuse

00:09:38,000 --> 00:09:41,839
color

00:09:39,360 --> 00:09:42,399
is the texture and inside there i

00:09:41,839 --> 00:09:44,399
declare

00:09:42,399 --> 00:09:47,519
this busy box so this is actually

00:09:44,399 --> 00:09:49,680
creating a 2d item

00:09:47,519 --> 00:09:51,519
and i positioned it in such a way that

00:09:49,680 --> 00:09:52,959
it goes mostly off screen and i left 20

00:09:51,519 --> 00:09:54,560
pixels showing on the screen just so you

00:09:52,959 --> 00:09:56,560
can see that that's actually

00:09:54,560 --> 00:09:58,240
you see i move my cursor it hovers and

00:09:56,560 --> 00:10:00,720
you see the little

00:09:58,240 --> 00:10:02,079
orange ball moving around in the 3d

00:10:00,720 --> 00:10:04,240
scene as well

00:10:02,079 --> 00:10:05,360
and that basically shows you that the

00:10:04,240 --> 00:10:07,680
the 2d item is

00:10:05,360 --> 00:10:09,279
a separate thing and we're just we're

00:10:07,680 --> 00:10:11,120
just grabbing it

00:10:09,279 --> 00:10:13,440
grabbing a texture from that and mapping

00:10:11,120 --> 00:10:14,959
it onto the surface of the cube

00:10:13,440 --> 00:10:16,640
so the way that that works is you said

00:10:14,959 --> 00:10:18,240
layer enable true and that's that makes

00:10:16,640 --> 00:10:20,680
a texture available

00:10:18,240 --> 00:10:22,000
and then we set the texture size to

00:10:20,680 --> 00:10:23,920
512x512

00:10:22,000 --> 00:10:26,160
so that we get reasonable resolution in

00:10:23,920 --> 00:10:27,519
3d so you have some control over that

00:10:26,160 --> 00:10:29,600
you can either save memory or you can

00:10:27,519 --> 00:10:32,800
make it really high-res

00:10:29,600 --> 00:10:34,959
the cube built-in type um has texture

00:10:32,800 --> 00:10:38,160
coordinates meaning uv coordinates

00:10:34,959 --> 00:10:39,040
which go from zero to one on each face

00:10:38,160 --> 00:10:42,160
of the cube

00:10:39,040 --> 00:10:44,320
and so the result is that the the scene

00:10:42,160 --> 00:10:46,399
uh texture actually gets mapped onto

00:10:44,320 --> 00:10:49,040
each face of the cube at the same time

00:10:46,399 --> 00:10:50,240
now if i hold down a button you can see

00:10:49,040 --> 00:10:51,680
that

00:10:50,240 --> 00:10:53,120
the button is pressed in all of them at

00:10:51,680 --> 00:10:54,240
the same time because this is really

00:10:53,120 --> 00:10:56,640
only one 2d

00:10:54,240 --> 00:10:58,880
sub scene just mapped onto all the faces

00:10:56,640 --> 00:11:00,720
of the cube

00:10:58,880 --> 00:11:02,880
in addition to pressing buttons you can

00:11:00,720 --> 00:11:05,600
also edit the text as a nice alternative

00:11:02,880 --> 00:11:05,600
to eating it

00:11:07,519 --> 00:11:11,360
okay let's talk about event delivery a

00:11:09,120 --> 00:11:12,959
little bit so in this scenario we're

00:11:11,360 --> 00:11:13,600
going to say that the mouse is being

00:11:12,959 --> 00:11:16,800
pressed

00:11:13,600 --> 00:11:19,040
and a qpa mouse event comes in to kyokui

00:11:16,800 --> 00:11:20,720
application into process mouse event

00:11:19,040 --> 00:11:22,160
and of course we're going to construct a

00:11:20,720 --> 00:11:23,839
mouse event and deliver it

00:11:22,160 --> 00:11:25,600
qgui application looks for a top level

00:11:23,839 --> 00:11:27,440
window to deliver it to so that'll be my

00:11:25,600 --> 00:11:29,279
qt quick top level window which in this

00:11:27,440 --> 00:11:31,760
case is the entire presentation

00:11:29,279 --> 00:11:32,399
so quick window its event method gets

00:11:31,760 --> 00:11:34,079
called

00:11:32,399 --> 00:11:35,760
it used to be that cute quick window was

00:11:34,079 --> 00:11:37,120
actually doing the delivery of the event

00:11:35,760 --> 00:11:39,200
entirely itself

00:11:37,120 --> 00:11:41,600
but the new thing in 6.1 is that we have

00:11:39,200 --> 00:11:43,519
a class called quick delivery agent

00:11:41,600 --> 00:11:45,200
which is doing that now and the reason

00:11:43,519 --> 00:11:46,720
is because of these 2d sub scenes it's

00:11:45,200 --> 00:11:47,839
not possible to have the window know

00:11:46,720 --> 00:11:49,440
about all of that

00:11:47,839 --> 00:11:50,880
q quick window now has its own quick

00:11:49,440 --> 00:11:53,040
quick delivery agent

00:11:50,880 --> 00:11:54,800
by default and that is simply all of the

00:11:53,040 --> 00:11:56,160
delivery related code that was in queue

00:11:54,800 --> 00:11:57,600
quick window so it was a simple

00:11:56,160 --> 00:11:58,160
refactoring or at least that's how it

00:11:57,600 --> 00:11:59,680
started

00:11:58,160 --> 00:12:01,600
q quick window was an enormous class

00:11:59,680 --> 00:12:03,600
anyway so it felt really good to move

00:12:01,600 --> 00:12:05,519
all of that code out into another class

00:12:03,600 --> 00:12:07,120
so the q quick window is going to

00:12:05,519 --> 00:12:08,320
forward all of the input events to the

00:12:07,120 --> 00:12:09,680
delivery agent

00:12:08,320 --> 00:12:11,680
and then it does a bunch of internal

00:12:09,680 --> 00:12:14,399
processing and eventually it finds the

00:12:11,680 --> 00:12:16,000
3d viewport which is our top level item

00:12:14,399 --> 00:12:18,560
it calls event on that

00:12:16,000 --> 00:12:19,120
and then view 3d viewport does internal

00:12:18,560 --> 00:12:20,720
pick

00:12:19,120 --> 00:12:22,160
which is a function that does hit

00:12:20,720 --> 00:12:23,839
testing on the 3d model

00:12:22,160 --> 00:12:25,200
basically it's shooting a virtual array

00:12:23,839 --> 00:12:26,639
down into the scene

00:12:25,200 --> 00:12:28,880
from your mouse position and it's

00:12:26,639 --> 00:12:30,880
finding the first 3d object that it hits

00:12:28,880 --> 00:12:32,959
it finds the 3d position in world

00:12:30,880 --> 00:12:35,120
coordinates and the 3d position

00:12:32,959 --> 00:12:36,639
relative to the model itself and then it

00:12:35,120 --> 00:12:39,200
notices that this cube

00:12:36,639 --> 00:12:40,560
that we hit has a 2d subscene as its

00:12:39,200 --> 00:12:42,480
diffuse map

00:12:40,560 --> 00:12:44,160
and so that's how it discovers the sub

00:12:42,480 --> 00:12:45,519
scene but let's just imagine that there

00:12:44,160 --> 00:12:48,399
is a tap handler

00:12:45,519 --> 00:12:49,040
on the cube and so the 3d viewport is

00:12:48,399 --> 00:12:51,600
going to

00:12:49,040 --> 00:12:53,839
directly try to deliver the pointer

00:12:51,600 --> 00:12:55,680
event to that handler

00:12:53,839 --> 00:12:58,320
this is the feature that's not actually

00:12:55,680 --> 00:13:00,720
implemented in in 6.2 yet what i'm

00:12:58,320 --> 00:13:02,639
proposing is that it'll be possible to

00:13:00,720 --> 00:13:05,040
install handlers directly on

00:13:02,639 --> 00:13:06,720
3d models and so if the viewport

00:13:05,040 --> 00:13:08,160
discovers that that has happened

00:13:06,720 --> 00:13:09,760
then it's going to call set model

00:13:08,160 --> 00:13:12,079
position and set world position

00:13:09,760 --> 00:13:13,760
on the handler and that in turn stores

00:13:12,079 --> 00:13:16,240
this in the handler point class

00:13:13,760 --> 00:13:16,880
so that your handler in qml will be able

00:13:16,240 --> 00:13:20,880
to see

00:13:16,880 --> 00:13:22,079
those world and object positions in 3d

00:13:20,880 --> 00:13:23,440
and then it's going to call handle

00:13:22,079 --> 00:13:24,959
pointer event on the handler it can

00:13:23,440 --> 00:13:28,000
react in qml

00:13:24,959 --> 00:13:29,600
and the tap handler adds itself as a

00:13:28,000 --> 00:13:31,760
passive grabber on press because it

00:13:29,600 --> 00:13:33,600
wants to see the move events later on

00:13:31,760 --> 00:13:35,200
so it calls that passive grabber on

00:13:33,600 --> 00:13:37,519
mouse event and that in turn calls that

00:13:35,200 --> 00:13:39,680
passive grabber on the pointing device

00:13:37,519 --> 00:13:40,560
and then that adds to the passive

00:13:39,680 --> 00:13:43,519
grabbers list

00:13:40,560 --> 00:13:44,720
in the even point data object and

00:13:43,519 --> 00:13:47,040
that'll emit

00:13:44,720 --> 00:13:48,480
a grab change signal which is connected

00:13:47,040 --> 00:13:50,639
to the delivery agent

00:13:48,480 --> 00:13:52,240
the delivery agent then wants it to be

00:13:50,639 --> 00:13:54,000
remembered that this was the delivery

00:13:52,240 --> 00:13:54,800
agent that caused this particular grab

00:13:54,000 --> 00:13:56,560
to happen

00:13:54,800 --> 00:13:58,639
because that means subsequent mouse

00:13:56,560 --> 00:14:00,560
moves need to be delivered the same way

00:13:58,639 --> 00:14:02,079
so it calls passive grabbers context

00:14:00,560 --> 00:14:03,920
append itself

00:14:02,079 --> 00:14:05,839
the passive crabbers has a list of

00:14:03,920 --> 00:14:08,079
handlers that are passively grabbing

00:14:05,839 --> 00:14:10,000
and the passive grabbers context is a

00:14:08,079 --> 00:14:11,600
parallel list of delivery agents that

00:14:10,000 --> 00:14:13,760
are responsible for dealing with that

00:14:11,600 --> 00:14:15,519
so those have to be updated together

00:14:13,760 --> 00:14:17,920
okay the next thing that happens

00:14:15,519 --> 00:14:18,560
is we've already discovered that there

00:14:17,920 --> 00:14:21,600
is

00:14:18,560 --> 00:14:22,959
a 2d sub scene and so we call event on a

00:14:21,600 --> 00:14:24,639
second delivery agent

00:14:22,959 --> 00:14:26,880
which has been created to handle that

00:14:24,639 --> 00:14:28,720
sub scene and then let's say that inside

00:14:26,880 --> 00:14:30,639
that 2d sub scene we have an item

00:14:28,720 --> 00:14:32,480
which is able to handle events itself

00:14:30,639 --> 00:14:33,040
but it also has a drag handler on the

00:14:32,480 --> 00:14:34,959
item

00:14:33,040 --> 00:14:36,639
so the first thing it's going to do

00:14:34,959 --> 00:14:38,480
because we have a rule that handlers go

00:14:36,639 --> 00:14:40,320
first it's going to ask does any pointer

00:14:38,480 --> 00:14:42,480
handler want this event and

00:14:40,320 --> 00:14:44,320
it discovers the drag handler which says

00:14:42,480 --> 00:14:46,000
yes i do want the event so then it

00:14:44,320 --> 00:14:46,959
delivers the pointer event to the drag

00:14:46,000 --> 00:14:48,959
handler

00:14:46,959 --> 00:14:50,959
and the drag handler also wants to add

00:14:48,959 --> 00:14:52,639
itself as a passive grabber so it calls

00:14:50,959 --> 00:14:54,720
out passive grabber on the mouse event

00:14:52,639 --> 00:14:56,079
the result is like it was before

00:14:54,720 --> 00:14:58,560
it will be appended to the passive

00:14:56,079 --> 00:15:00,399
grabbers list in the event point data

00:14:58,560 --> 00:15:02,240
and the signal will be emitted the

00:15:00,399 --> 00:15:04,000
subscene delivery agent is going to add

00:15:02,240 --> 00:15:05,519
itself as the context for that

00:15:04,000 --> 00:15:07,680
particular passive grab

00:15:05,519 --> 00:15:09,040
next we deliver the event to the item

00:15:07,680 --> 00:15:09,680
itself because it's one of these

00:15:09,040 --> 00:15:11,920
old-fashioned

00:15:09,680 --> 00:15:13,519
items this legacy logic that we have

00:15:11,920 --> 00:15:15,279
says that if the item allows the event

00:15:13,519 --> 00:15:16,079
to remain accepted then that means that

00:15:15,279 --> 00:15:18,240
it wants any

00:15:16,079 --> 00:15:19,760
comes this legacy logic that we have

00:15:18,240 --> 00:15:21,040
says that if the item allows the event

00:15:19,760 --> 00:15:23,199
to remain accepted

00:15:21,040 --> 00:15:24,800
comes this legacy logic that we have

00:15:23,199 --> 00:15:26,560
says that if the item allows the event

00:15:24,800 --> 00:15:27,920
to remain accepted then that means that

00:15:26,560 --> 00:15:29,600
it wants an exclusive grab

00:15:27,920 --> 00:15:32,160
so the delivery agent is now going to

00:15:29,600 --> 00:15:34,560
set it an exclusive grabber to that item

00:15:32,160 --> 00:15:36,560
that will again emit the signal that the

00:15:34,560 --> 00:15:38,079
grab changed subscene delivery agent is

00:15:36,560 --> 00:15:38,720
going to set the exclusive grabber

00:15:38,079 --> 00:15:42,160
context

00:15:38,720 --> 00:15:42,880
to itself the next thing is that the 3d

00:15:42,160 --> 00:15:44,959
viewport

00:15:42,880 --> 00:15:46,480
will see that some grabs have happened

00:15:44,959 --> 00:15:48,800
in that sub scene

00:15:46,480 --> 00:15:50,000
and it also needs to remember how to do

00:15:48,800 --> 00:15:52,079
the transform

00:15:50,000 --> 00:15:54,240
from scene to subscene coordinates it

00:15:52,079 --> 00:15:55,680
creates this viewport transform helper

00:15:54,240 --> 00:15:57,680
which is an implementation of a pure

00:15:55,680 --> 00:16:00,720
virtual class in qt quick

00:15:57,680 --> 00:16:01,759
that lives in cute quick 3d and embodies

00:16:00,720 --> 00:16:04,160
the transformation

00:16:01,759 --> 00:16:05,759
from the viewport to the 2d subscene so

00:16:04,160 --> 00:16:06,959
it creates this class and it calls set

00:16:05,759 --> 00:16:09,120
scene transform

00:16:06,959 --> 00:16:10,639
on the subscene so then let's say that

00:16:09,120 --> 00:16:12,240
the next thing that happens is that the

00:16:10,639 --> 00:16:14,240
mouse moves with the button still being

00:16:12,240 --> 00:16:16,079
pressed so this is a drag now

00:16:14,240 --> 00:16:17,839
and then it wants to construct a mouse

00:16:16,079 --> 00:16:19,680
event and it calls event on its top

00:16:17,839 --> 00:16:21,519
level window in the q quick window is he

00:16:19,680 --> 00:16:23,839
going to get the event point data

00:16:21,519 --> 00:16:26,240
because now it wants to find out about

00:16:23,839 --> 00:16:28,639
existing grabbers so it finds that there

00:16:26,240 --> 00:16:30,639
is an exclusive grabber and therefore it

00:16:28,639 --> 00:16:31,440
gets the exclusive grabber context sees

00:16:30,639 --> 00:16:34,160
that the

00:16:31,440 --> 00:16:35,759
exclusive grabber is a subscene and it

00:16:34,160 --> 00:16:37,360
has its own delivery agent

00:16:35,759 --> 00:16:38,480
so now rather than going through all of

00:16:37,360 --> 00:16:40,000
the stuff that we did before we're

00:16:38,480 --> 00:16:41,600
skipping picking we're skipping the

00:16:40,000 --> 00:16:43,519
event delivery through the

00:16:41,600 --> 00:16:44,959
main 2d scene and we're going directly

00:16:43,519 --> 00:16:46,240
to the sub scene first because that's

00:16:44,959 --> 00:16:48,160
the context in which the

00:16:46,240 --> 00:16:49,680
the exclusive grabber occurred so we

00:16:48,160 --> 00:16:50,079
call event on the sub scene delivery

00:16:49,680 --> 00:16:51,759
agent

00:16:50,079 --> 00:16:53,839
which will deliver the pointer event and

00:16:51,759 --> 00:16:55,680
then it's going to use that um

00:16:53,839 --> 00:16:57,120
this viewport transform helper that was

00:16:55,680 --> 00:16:59,040
created here and set

00:16:57,120 --> 00:17:00,639
now it's going to use that and call map

00:16:59,040 --> 00:17:01,199
on it to directly convert the scene

00:17:00,639 --> 00:17:03,440
position

00:17:01,199 --> 00:17:04,400
from the root 2d scene into the sub

00:17:03,440 --> 00:17:06,079
scene

00:17:04,400 --> 00:17:08,240
and then we start looking again at the

00:17:06,079 --> 00:17:09,919
grabbers the exclusive grabber has to go

00:17:08,240 --> 00:17:11,439
first so the event is going to be

00:17:09,919 --> 00:17:13,120
delivered to this item which had the

00:17:11,439 --> 00:17:14,720
exclusive grab

00:17:13,120 --> 00:17:16,079
and then it goes to the passive grabbers

00:17:14,720 --> 00:17:17,679
and it calls handle pointer event on

00:17:16,079 --> 00:17:18,959
this drag handler which was the passive

00:17:17,679 --> 00:17:20,319
grabber in the subscene

00:17:18,959 --> 00:17:21,919
so now we're done with the sub scene and

00:17:20,319 --> 00:17:22,720
we go back to delivering in the main

00:17:21,919 --> 00:17:24,240
scene

00:17:22,720 --> 00:17:26,000
the delivery agent that's constructed

00:17:24,240 --> 00:17:28,000
along with every window is now going to

00:17:26,000 --> 00:17:29,520
deliver this pointer event and it sees

00:17:28,000 --> 00:17:31,120
that there's a passive grabber which is

00:17:29,520 --> 00:17:32,960
the tap handler on the

00:17:31,120 --> 00:17:35,039
cube and it calls handle pointer event

00:17:32,960 --> 00:17:36,880
on that and we're done

00:17:35,039 --> 00:17:38,960
okay so here's some a little bit more

00:17:36,880 --> 00:17:41,520
real world example and i've demoed this

00:17:38,960 --> 00:17:44,000
before this was from a few months ago

00:17:41,520 --> 00:17:45,520
so i have a view 3d and at that point i

00:17:44,000 --> 00:17:48,000
didn't know how to use blender yet so i

00:17:45,520 --> 00:17:50,640
actually made this casing of this device

00:17:48,000 --> 00:17:52,240
in openscad and you can see that you can

00:17:50,640 --> 00:17:56,240
rotate it around in the

00:17:52,240 --> 00:17:58,240
3d world so openscad generated me in stl

00:17:56,240 --> 00:17:58,960
i used balsam to export that to a mesh

00:17:58,240 --> 00:18:00,640
file

00:17:58,960 --> 00:18:03,120
it has no texture it cannot have a

00:18:00,640 --> 00:18:04,960
texture but it can have a color

00:18:03,120 --> 00:18:06,960
so i have a view 3d with a scene in

00:18:04,960 --> 00:18:08,799
environment which is a sky box and

00:18:06,960 --> 00:18:10,559
that's just something i downloaded from

00:18:08,799 --> 00:18:12,080
the net it's an image of somebody's

00:18:10,559 --> 00:18:14,320
kitchen

00:18:12,080 --> 00:18:15,120
and then there's a spotlight and a

00:18:14,320 --> 00:18:18,160
camera

00:18:15,120 --> 00:18:18,480
and um here's my case smash and and then

00:18:18,160 --> 00:18:20,320
i

00:18:18,480 --> 00:18:21,520
separated out the buttons i made those

00:18:20,320 --> 00:18:24,240
separate models in

00:18:21,520 --> 00:18:26,559
open scan and so i can actually press

00:18:24,240 --> 00:18:27,919
these buttons in 3d

00:18:26,559 --> 00:18:29,840
because each of the buttons has a tap

00:18:27,919 --> 00:18:32,160
handler on there and then i change the

00:18:29,840 --> 00:18:34,640
z position when i press it if i press

00:18:32,160 --> 00:18:36,880
this one i get confetti it's the sum

00:18:34,640 --> 00:18:38,080
the 3d particle engine which is

00:18:36,880 --> 00:18:43,840
something new in

00:18:38,080 --> 00:18:45,919
6.1 i think there's a particle system 3d

00:18:43,840 --> 00:18:47,440
and um there are some bugs when we're

00:18:45,919 --> 00:18:49,280
using cute quick controls together with

00:18:47,440 --> 00:18:50,799
3d so i'm actually not able to interact

00:18:49,280 --> 00:18:53,919
with much of this um

00:18:50,799 --> 00:18:56,320
cute quick content inside the 2d scene

00:18:53,919 --> 00:18:57,120
at least not inside the presentation but

00:18:56,320 --> 00:19:00,240
if i run this

00:18:57,120 --> 00:19:01,679
standalone then it works

00:19:00,240 --> 00:19:04,080
okay so this is the one that i was

00:19:01,679 --> 00:19:05,440
working on last weekend

00:19:04,080 --> 00:19:07,919
i thought let's try to get even more

00:19:05,440 --> 00:19:10,240
realistic and i found this on a website

00:19:07,919 --> 00:19:11,679
somebody has created this model of a of

00:19:10,240 --> 00:19:14,880
an old mixer

00:19:11,679 --> 00:19:16,480
so let's turn it on and um well you can

00:19:14,880 --> 00:19:18,000
see i animated the vu meters it's

00:19:16,480 --> 00:19:20,799
pretending like there's some

00:19:18,000 --> 00:19:21,520
music playing that's just an animation

00:19:20,799 --> 00:19:23,840
and i put

00:19:21,520 --> 00:19:25,120
um lights inside the vu meters because

00:19:23,840 --> 00:19:27,360
that's what they usually do

00:19:25,120 --> 00:19:28,400
so if you turn the ambient lighting way

00:19:27,360 --> 00:19:29,760
down you can see that there's light

00:19:28,400 --> 00:19:31,360
coming out of there but

00:19:29,760 --> 00:19:33,120
the meters actually are letting a lot of

00:19:31,360 --> 00:19:35,360
light out around the edges they're not

00:19:33,120 --> 00:19:36,559
really as opaque inside this as they

00:19:35,360 --> 00:19:38,000
would be in the real world so it's

00:19:36,559 --> 00:19:40,160
lighting up a lot of other stuff here

00:19:38,000 --> 00:19:42,400
too there's light bulbs inside here and

00:19:40,160 --> 00:19:44,880
it's lighting up the sides of these

00:19:42,400 --> 00:19:47,520
of these sliders and so forth uh and

00:19:44,880 --> 00:19:51,039
then this slider i wired up to uh

00:19:47,520 --> 00:19:54,160
control the the directional light here

00:19:51,039 --> 00:19:57,919
um that one see the brightness is

00:19:54,160 --> 00:20:01,679
object phono one slider value

00:19:57,919 --> 00:20:03,120
and sometimes i'm able to use the wheel

00:20:01,679 --> 00:20:06,400
handler on this uh

00:20:03,120 --> 00:20:08,480
on this knob here to rotate it and all

00:20:06,400 --> 00:20:11,360
these sliders are interactive but they

00:20:08,480 --> 00:20:12,320
don't really do anything else so um so

00:20:11,360 --> 00:20:16,880
this was a static

00:20:12,320 --> 00:20:16,880
model that somebody had created

00:20:17,039 --> 00:20:20,400
tried to make a realistic rendering of a

00:20:18,640 --> 00:20:21,840
real world object and i took that and

00:20:20,400 --> 00:20:24,080
made it interactive

00:20:21,840 --> 00:20:25,200
and we'll talk about how in a minute so

00:20:24,080 --> 00:20:28,159
there's this mixed

00:20:25,200 --> 00:20:29,120
qml which was generated by balsam and

00:20:28,159 --> 00:20:30,640
and um

00:20:29,120 --> 00:20:32,159
and i just wired up a bunch of stuff in

00:20:30,640 --> 00:20:35,520
my ui here

00:20:32,159 --> 00:20:37,760
to make it a bit alive

00:20:35,520 --> 00:20:38,720
so here's the workflow that i used um

00:20:37,760 --> 00:20:40,000
for that model

00:20:38,720 --> 00:20:42,559
i found something interesting on

00:20:40,000 --> 00:20:44,640
sketchfab downloaded it as a gltf

00:20:42,559 --> 00:20:45,919
i imported it into blender because i

00:20:44,640 --> 00:20:47,440
found that i needed to actually split

00:20:45,919 --> 00:20:48,880
the meshes of all those knobs into

00:20:47,440 --> 00:20:50,400
separate objects so that i would be able

00:20:48,880 --> 00:20:53,200
to rotate them in qml

00:20:50,400 --> 00:20:55,280
i in blender i re-exported it to gltf

00:20:53,200 --> 00:20:57,120
then i used balsam to import it and that

00:20:55,280 --> 00:20:59,120
wrote my qml for me

00:20:57,120 --> 00:21:00,960
and then i just wrote the rest of the

00:20:59,120 --> 00:21:03,200
scene the qml u3d

00:21:00,960 --> 00:21:06,799
and first i just made sure that the

00:21:03,200 --> 00:21:06,799
balsam scene actually worked

00:21:07,120 --> 00:21:10,960
but anyway the blender work let me just

00:21:09,039 --> 00:21:12,400
give you a couple of tips here

00:21:10,960 --> 00:21:14,080
it turned out that the way that this guy

00:21:12,400 --> 00:21:17,520
modeled this mixer

00:21:14,080 --> 00:21:19,200
he put everything together by material

00:21:17,520 --> 00:21:20,720
well the knobs are a different material

00:21:19,200 --> 00:21:22,480
some phenolic or something like that so

00:21:20,720 --> 00:21:24,559
the knobs are a separate um

00:21:22,480 --> 00:21:27,120
node and then this and iso is the

00:21:24,559 --> 00:21:28,480
anodized caps on the knobs

00:21:27,120 --> 00:21:29,679
but i just wanted to work with the knobs

00:21:28,480 --> 00:21:30,640
themselves so the first thing i have to

00:21:29,679 --> 00:21:32,400
do is um

00:21:30,640 --> 00:21:33,840
you see these eyeball icons i had to

00:21:32,400 --> 00:21:34,640
just turn off the things that i don't

00:21:33,840 --> 00:21:36,159
want to see

00:21:34,640 --> 00:21:37,919
because when you try to pick vertices

00:21:36,159 --> 00:21:39,280
all that other stuff will get in the way

00:21:37,919 --> 00:21:40,799
and so you see that it looks like the

00:21:39,280 --> 00:21:41,360
eye is shut that means you can't see it

00:21:40,799 --> 00:21:43,360
anymore

00:21:41,360 --> 00:21:44,480
so you click on those and then you do

00:21:43,360 --> 00:21:46,799
lasso selection

00:21:44,480 --> 00:21:48,320
and you will select some vertices but

00:21:46,799 --> 00:21:49,919
only the vertices that you can actually

00:21:48,320 --> 00:21:51,280
see from that particular angle

00:21:49,919 --> 00:21:53,440
and so then the next thing i do is

00:21:51,280 --> 00:21:54,799
select linked to find all the vertices

00:21:53,440 --> 00:21:56,559
that are connected to the

00:21:54,799 --> 00:21:58,320
edges that those exist that those

00:21:56,559 --> 00:21:59,919
selected vertices are connected to

00:21:58,320 --> 00:22:01,600
and then i look at the scene from a

00:21:59,919 --> 00:22:02,799
different angle and i find out there's

00:22:01,600 --> 00:22:04,000
still some more vertices that aren't

00:22:02,799 --> 00:22:05,760
selected so

00:22:04,000 --> 00:22:06,880
then i hold down the shift key and lasso

00:22:05,760 --> 00:22:08,559
some more and i select some more

00:22:06,880 --> 00:22:09,679
vertices and then i select linked again

00:22:08,559 --> 00:22:11,039
and then i look at it from a different

00:22:09,679 --> 00:22:12,080
angle and there's even more vertices

00:22:11,039 --> 00:22:14,080
that aren't selected

00:22:12,080 --> 00:22:16,000
so i had to do that several times until

00:22:14,080 --> 00:22:18,320
i finally got all the vertices of the

00:22:16,000 --> 00:22:20,720
knob selected and nothing else

00:22:18,320 --> 00:22:21,360
and then finally i'm able to hit the p

00:22:20,720 --> 00:22:24,480
key

00:22:21,360 --> 00:22:26,159
and create it as a separate object

00:22:24,480 --> 00:22:27,520
so that was in edit mode where i was

00:22:26,159 --> 00:22:29,520
editing vertices

00:22:27,520 --> 00:22:31,600
and then over here i'm in object mode so

00:22:29,520 --> 00:22:33,360
here i've got the entire object selected

00:22:31,600 --> 00:22:34,640
and now i can worry about moving its

00:22:33,360 --> 00:22:37,039
origin so

00:22:34,640 --> 00:22:38,720
object set origin and then you have

00:22:37,039 --> 00:22:40,640
choices you can set it to the center of

00:22:38,720 --> 00:22:42,159
mass or to the

00:22:40,640 --> 00:22:44,320
if you've already moved the 3d cursor

00:22:42,159 --> 00:22:46,159
you can just move the origin there

00:22:44,320 --> 00:22:47,919
um so it seemed like the center of mass

00:22:46,159 --> 00:22:49,760
thing works decently although i'm

00:22:47,919 --> 00:22:50,799
suspicious because there's a cutout here

00:22:49,760 --> 00:22:52,159
for a set screw

00:22:50,799 --> 00:22:54,159
so that's going to alter the mass and

00:22:52,159 --> 00:22:56,640
also there's a cut out for the for the

00:22:54,159 --> 00:22:58,080
little indicator on the knob

00:22:56,640 --> 00:23:00,400
but it seemed like it was pretty much at

00:22:58,080 --> 00:23:01,840
the center after i had done that

00:23:00,400 --> 00:23:03,919
and then i also have to move the 3d

00:23:01,840 --> 00:23:05,520
cursor to the center and then finally

00:23:03,919 --> 00:23:08,320
i'm able to

00:23:05,520 --> 00:23:09,919
oh maybe it's better to show it live so

00:23:08,320 --> 00:23:10,720
i get on this blue thing and i can

00:23:09,919 --> 00:23:13,679
rotate this

00:23:10,720 --> 00:23:15,600
knob around its axis now after i

00:23:13,679 --> 00:23:18,720
exported the gltf scene from

00:23:15,600 --> 00:23:20,080
blender and imported it with balsam it

00:23:18,720 --> 00:23:22,000
wrote this qml for me

00:23:20,080 --> 00:23:23,919
it's possible to actually remove these

00:23:22,000 --> 00:23:24,799
outer nodes and and kind of collapse it

00:23:23,919 --> 00:23:27,360
all

00:23:24,799 --> 00:23:28,640
so that you just have the root node

00:23:27,360 --> 00:23:30,400
which is what i did

00:23:28,640 --> 00:23:32,720
and you'll see that there's a bunch of

00:23:30,400 --> 00:23:34,480
um textures here for the materials

00:23:32,720 --> 00:23:36,159
it writes all that for you exports the

00:23:34,480 --> 00:23:38,159
png files

00:23:36,159 --> 00:23:39,360
and the mesh files and we've just got a

00:23:38,159 --> 00:23:40,000
bunch of different materials and then

00:23:39,360 --> 00:23:42,400
they

00:23:40,000 --> 00:23:44,080
end up getting reused when we get down

00:23:42,400 --> 00:23:46,400
into the actual

00:23:44,080 --> 00:23:48,000
knobs you know here's that micro base

00:23:46,400 --> 00:23:49,840
knob and it's just reusing the existing

00:23:48,000 --> 00:23:51,039
material that was declared above inside

00:23:49,840 --> 00:23:53,039
one of the other knobs

00:23:51,039 --> 00:23:54,320
and the same thing for all these um

00:23:53,039 --> 00:23:57,200
anodized

00:23:54,320 --> 00:23:57,200
caps on the knobs

00:23:58,159 --> 00:24:00,640
and then

00:24:01,919 --> 00:24:05,360
on the vu meters i also had to separate

00:24:03,840 --> 00:24:05,679
out into separate objects so that

00:24:05,360 --> 00:24:07,440
they're

00:24:05,679 --> 00:24:09,679
able to be rotated so that i can animate

00:24:07,440 --> 00:24:09,679
those

00:24:10,240 --> 00:24:14,880
so next i take this some output from

00:24:12,559 --> 00:24:18,480
balsam and try to make it interactive

00:24:14,880 --> 00:24:20,320
so i simplified the qml as i mentioned

00:24:18,480 --> 00:24:21,600
these quaternions are hard to work with

00:24:20,320 --> 00:24:23,120
in qml

00:24:21,600 --> 00:24:25,039
because at least i don't know how to

00:24:23,120 --> 00:24:26,240
change the numbers to make the knob

00:24:25,039 --> 00:24:29,279
rotate in place

00:24:26,240 --> 00:24:30,320
and so i used a q quaternion two euler

00:24:29,279 --> 00:24:32,559
angles that's a c

00:24:30,320 --> 00:24:33,840
plus function to do the conversion to

00:24:32,559 --> 00:24:36,159
euler angles

00:24:33,840 --> 00:24:37,919
but there's isn't a way to do this in

00:24:36,159 --> 00:24:39,600
qml yet as far as i can tell

00:24:37,919 --> 00:24:41,520
so i wrote a little widget application

00:24:39,600 --> 00:24:42,880
just for that purpose it works with uh

00:24:41,520 --> 00:24:44,400
text so i can actually just

00:24:42,880 --> 00:24:46,159
in cute creator i can select a

00:24:44,400 --> 00:24:48,400
quaternion's values

00:24:46,159 --> 00:24:49,279
and middle mouse paste it into this tool

00:24:48,400 --> 00:24:51,600
and then it will

00:24:49,279 --> 00:24:53,120
parse it and convert it to a quaternion

00:24:51,600 --> 00:24:53,760
and then it converts it to euler angles

00:24:53,120 --> 00:24:55,279
and

00:24:53,760 --> 00:24:57,039
and puts the text of that and then i can

00:24:55,279 --> 00:24:59,200
select that text and paste it back into

00:24:57,039 --> 00:25:00,720
creator i have to declare pickable on

00:24:59,200 --> 00:25:01,520
each of those knobs that i want to be

00:25:00,720 --> 00:25:04,320
able to rotate

00:25:01,520 --> 00:25:06,559
because picking in the view 3d will skip

00:25:04,320 --> 00:25:08,400
anything that's not set pickable

00:25:06,559 --> 00:25:09,919
and then it turned out that i couldn't

00:25:08,400 --> 00:25:10,640
pick those knobs anyway that's some sort

00:25:09,919 --> 00:25:12,080
of a bug

00:25:10,640 --> 00:25:14,320
but at least it worked with a slider

00:25:12,080 --> 00:25:16,400
handle so i was able to put handlers

00:25:14,320 --> 00:25:18,000
on each of those slider knobs and then

00:25:16,400 --> 00:25:20,400
i'm able to drag them

00:25:18,000 --> 00:25:21,919
so if you're using drag handler you'll

00:25:20,400 --> 00:25:23,360
be interested in this persistent

00:25:21,919 --> 00:25:26,000
translation property

00:25:23,360 --> 00:25:27,520
which is a new thing in 6.2 because drag

00:25:26,000 --> 00:25:29,039
kindler translation it's an

00:25:27,520 --> 00:25:30,559
instantaneous amount of translation

00:25:29,039 --> 00:25:32,000
which just shows how far the drag

00:25:30,559 --> 00:25:33,919
handler has been dragged

00:25:32,000 --> 00:25:35,600
since the time when you pressed but what

00:25:33,919 --> 00:25:38,240
we actually want for a

00:25:35,600 --> 00:25:39,679
mixer knob is to keep track of how far

00:25:38,240 --> 00:25:41,600
it's been dragged for all time

00:25:39,679 --> 00:25:43,039
i now think that it was a mistake that i

00:25:41,600 --> 00:25:44,240
didn't make all of those properties that

00:25:43,039 --> 00:25:46,000
way from the beginning and pointer

00:25:44,240 --> 00:25:48,880
handlers but that's my mistake

00:25:46,000 --> 00:25:49,679
and we can't just make sudden behavior

00:25:48,880 --> 00:25:51,679
changes now

00:25:49,679 --> 00:25:53,360
and so therefore we have to start adding

00:25:51,679 --> 00:25:54,640
more we have this new pattern that the

00:25:53,360 --> 00:25:55,440
persistent properties are going to be

00:25:54,640 --> 00:25:58,000
called that

00:25:55,440 --> 00:25:59,840
so persistent translation is the amount

00:25:58,000 --> 00:26:01,279
of translation that's happened since the

00:25:59,840 --> 00:26:03,120
drag handler existed

00:26:01,279 --> 00:26:05,039
wheel handler rotation on the other hand

00:26:03,120 --> 00:26:06,159
already is persistent so i think maybe

00:26:05,039 --> 00:26:08,880
we should rename that now

00:26:06,159 --> 00:26:10,000
to persistent rotation but anyway it's

00:26:08,880 --> 00:26:12,159
the amount that the wheel

00:26:10,000 --> 00:26:13,279
on the mouse has been rotated since you

00:26:12,159 --> 00:26:16,320
started your application

00:26:13,279 --> 00:26:18,400
in degrees um so that's useful for

00:26:16,320 --> 00:26:19,520
binding to knobs as well of course the

00:26:18,400 --> 00:26:21,360
the problem is if you

00:26:19,520 --> 00:26:23,840
keep rotating your mouse wheel past the

00:26:21,360 --> 00:26:25,679
stop past the the point where you can't

00:26:23,840 --> 00:26:27,120
rotate your 3d knob anymore

00:26:25,679 --> 00:26:29,120
then you get too far ahead of it and

00:26:27,120 --> 00:26:30,960
then you have to rotate back a long way

00:26:29,120 --> 00:26:32,480
on your mouse wheel so we need to deal

00:26:30,960 --> 00:26:34,000
with that somehow

00:26:32,480 --> 00:26:35,600
the tap handler pressed property is

00:26:34,000 --> 00:26:37,039
useful of course the scale and the

00:26:35,600 --> 00:26:38,720
translation on the pinch handler are

00:26:37,039 --> 00:26:40,480
useful but so far we haven't added the

00:26:38,720 --> 00:26:42,320
persistent translation properties i'm

00:26:40,480 --> 00:26:44,240
proposing to add to handler point the

00:26:42,320 --> 00:26:44,480
model position and the world position as

00:26:44,240 --> 00:26:46,559
q

00:26:44,480 --> 00:26:48,880
vector 3d you can actually get the 3d

00:26:46,559 --> 00:26:51,360
positions in qml when you're using any

00:26:48,880 --> 00:26:54,000
of these handlers

00:26:51,360 --> 00:26:56,080
here's a diff before i actually

00:26:54,000 --> 00:26:57,760
simplified the

00:26:56,080 --> 00:26:59,919
the root nodes so i still have all this

00:26:57,760 --> 00:27:00,799
nesting going on i just started adding

00:26:59,919 --> 00:27:02,799
properties

00:27:00,799 --> 00:27:04,720
i want to keep track of how far each of

00:27:02,799 --> 00:27:07,600
these knobs have rotated

00:27:04,720 --> 00:27:09,440
and then i started um converting the

00:27:07,600 --> 00:27:11,520
rotations like i mentioned with that

00:27:09,440 --> 00:27:13,840
widget application that i wrote from

00:27:11,520 --> 00:27:15,279
quaternions to euler rotations

00:27:13,840 --> 00:27:16,960
okay so i have this property to keep

00:27:15,279 --> 00:27:18,880
track of for example how far this micro

00:27:16,960 --> 00:27:20,960
base knob has been rotated

00:27:18,880 --> 00:27:22,480
and so i have to actually make the

00:27:20,960 --> 00:27:24,320
rotation happen here

00:27:22,480 --> 00:27:26,880
and then there's also a handler down in

00:27:24,320 --> 00:27:29,520
here somewhere

00:27:26,880 --> 00:27:31,360
where i attempted to set it and then i

00:27:29,520 --> 00:27:34,960
had the problem that it's not pickable

00:27:31,360 --> 00:27:36,080
so here's a slider this drag handler

00:27:34,960 --> 00:27:37,440
actually does work

00:27:36,080 --> 00:27:39,760
then i just use its persistent

00:27:37,440 --> 00:27:40,080
translation up here to directly set the

00:27:39,760 --> 00:27:42,080
y

00:27:40,080 --> 00:27:44,480
value and the problem with this is that

00:27:42,080 --> 00:27:46,159
the drag handler drags in pixels but

00:27:44,480 --> 00:27:48,320
in 3d we're in completely different

00:27:46,159 --> 00:27:50,480
units and so i just did a kind of

00:27:48,320 --> 00:27:51,919
ballpark conversion here divide by 2000

00:27:50,480 --> 00:27:54,000
and that's really not very accurate at

00:27:51,919 --> 00:27:55,760
all i could have divided it a bit more

00:27:54,000 --> 00:27:57,279
um but we probably need to come up with

00:27:55,760 --> 00:27:59,120
a better solution for that as well to

00:27:57,279 --> 00:28:00,880
convert deltas and pixels to deltas in

00:27:59,120 --> 00:28:03,120
your 3d space so that you can actually

00:28:00,880 --> 00:28:04,799
drag it or else maybe we need to make

00:28:03,120 --> 00:28:05,600
the drag handler smart enough to do this

00:28:04,799 --> 00:28:08,000
on its own

00:28:05,600 --> 00:28:08,640
but the trouble is drag handler lives in

00:28:08,000 --> 00:28:10,559
cute quick

00:28:08,640 --> 00:28:12,000
not in 3d according to the separation of

00:28:10,559 --> 00:28:12,720
concerns principle that's not its

00:28:12,000 --> 00:28:15,679
concern

00:28:12,720 --> 00:28:16,320
which is why i was using bindings here i

00:28:15,679 --> 00:28:18,559
also have a

00:28:16,320 --> 00:28:20,080
i used a boundary rule on the y property

00:28:18,559 --> 00:28:22,399
of the model to make sure that you don't

00:28:20,080 --> 00:28:24,480
drag it outside things here

00:28:22,399 --> 00:28:26,480
i also have a i used a boundary rule on

00:28:24,480 --> 00:28:28,000
the y property of the model to make sure

00:28:26,480 --> 00:28:28,480
that you don't drag it outside of its

00:28:28,000 --> 00:28:30,320
groove

00:28:28,480 --> 00:28:32,080
and that turned out to work pretty well

00:28:30,320 --> 00:28:34,080
boundary roll was added in

00:28:32,080 --> 00:28:35,200
quick mostly to make wheel handler

00:28:34,080 --> 00:28:38,480
behave

00:28:35,200 --> 00:28:40,080
and it's a property interceptor it's

00:28:38,480 --> 00:28:40,559
kind of like behavior so you can apply

00:28:40,080 --> 00:28:41,919
it to

00:28:40,559 --> 00:28:43,360
a property and it will make sure that

00:28:41,919 --> 00:28:45,520
that property never goes out of a

00:28:43,360 --> 00:28:47,039
certain range

00:28:45,520 --> 00:28:50,159
so that turned out to be just as useful

00:28:47,039 --> 00:28:50,159
in 3d as it is there

00:28:50,399 --> 00:28:53,600
okay here's a really simple manual test

00:28:52,159 --> 00:28:56,559
that i'm proposing to add

00:28:53,600 --> 00:28:57,679
which shows how to use these new handler

00:28:56,559 --> 00:29:00,880
point properties

00:28:57,679 --> 00:29:02,320
so i have a sphere and um and then i

00:29:00,880 --> 00:29:04,799
have another little sphere

00:29:02,320 --> 00:29:07,279
which um if i hover you'll see that that

00:29:04,799 --> 00:29:10,880
sphere moves around to the hover point

00:29:07,279 --> 00:29:14,720
so there's a

00:29:10,880 --> 00:29:17,039
hover handler with ids hh

00:29:14,720 --> 00:29:18,960
uh the spheres hover handler and i'm

00:29:17,039 --> 00:29:20,640
proposing that its handler point should

00:29:18,960 --> 00:29:21,840
provide this world position which is in

00:29:20,640 --> 00:29:23,919
3d now

00:29:21,840 --> 00:29:26,320
and so i can directly bind the position

00:29:23,919 --> 00:29:27,679
of another sphere to that world position

00:29:26,320 --> 00:29:28,960
and therefore when i hover on the big

00:29:27,679 --> 00:29:30,399
sphere then the little sphere moves

00:29:28,960 --> 00:29:33,120
around to the same position

00:29:30,399 --> 00:29:35,600
just with a plane binding and then i did

00:29:33,120 --> 00:29:37,279
the same thing with this cube over here

00:29:35,600 --> 00:29:39,600
and i'm also using bindings to update

00:29:37,279 --> 00:29:42,399
some text down here just to show you

00:29:39,600 --> 00:29:44,399
where you are in both the model and

00:29:42,399 --> 00:29:46,000
world coordinates

00:29:44,399 --> 00:29:50,000
and yeah there's also a tap handler i

00:29:46,000 --> 00:29:50,000
can tap the sphere same thing there

00:29:50,640 --> 00:29:55,840
and i can use pinch handler but i'll

00:29:52,320 --> 00:29:55,840
have to show you that on a touch screen

00:29:56,159 --> 00:29:59,600
now i'm showing you the same thing on a

00:29:57,520 --> 00:30:01,120
touchscreen and now i'm able to either

00:29:59,600 --> 00:30:03,520
use two fingers to move

00:30:01,120 --> 00:30:04,799
two handlers at the same time or i can

00:30:03,520 --> 00:30:06,960
use the pinch handler

00:30:04,799 --> 00:30:09,600
and i can rotate this cube by dragging

00:30:06,960 --> 00:30:13,360
my pinch around and i can resize it by

00:30:09,600 --> 00:30:14,320
scaling the pinch okay one more little

00:30:13,360 --> 00:30:16,880
demo

00:30:14,320 --> 00:30:18,080
this is how you can do ray picking in

00:30:16,880 --> 00:30:19,919
qml

00:30:18,080 --> 00:30:22,000
i mentioned earlier that the normal way

00:30:19,919 --> 00:30:24,000
that vue 3d does ray picking is it

00:30:22,000 --> 00:30:25,840
sends a virtual ray straight down into

00:30:24,000 --> 00:30:27,919
the scene from the mouse cursor position

00:30:25,840 --> 00:30:30,080
and it finds out what you're hitting

00:30:27,919 --> 00:30:31,600
but let's say you're in vr and you have

00:30:30,080 --> 00:30:34,240
some other kind of controller

00:30:31,600 --> 00:30:35,600
which can point in arbitrary directions

00:30:34,240 --> 00:30:37,840
like this

00:30:35,600 --> 00:30:39,760
um so i have this little spaceship here

00:30:37,840 --> 00:30:43,039
which is um

00:30:39,760 --> 00:30:46,320
pretending to fire a laser and um

00:30:43,039 --> 00:30:50,159
sometimes it's able to hit an object

00:30:46,320 --> 00:30:52,159
so how does this work um the spaceship

00:30:50,159 --> 00:30:53,840
has a position and it has a forward

00:30:52,159 --> 00:30:55,039
vector which tells you the direction

00:30:53,840 --> 00:30:57,519
that it's pointed

00:30:55,039 --> 00:30:58,480
so in qml you can call this view as the

00:30:57,519 --> 00:31:02,320
view 3d

00:30:58,480 --> 00:31:04,880
declared at the top and

00:31:02,320 --> 00:31:06,000
you can call this raypik function giving

00:31:04,880 --> 00:31:07,600
the position and a

00:31:06,000 --> 00:31:09,279
direction vector and it will tell you

00:31:07,600 --> 00:31:12,000
the first object that you hit

00:31:09,279 --> 00:31:13,600
and so we find that and we um measure

00:31:12,000 --> 00:31:15,120
the distance to that object and then we

00:31:13,600 --> 00:31:17,120
set the length of the ray which is

00:31:15,120 --> 00:31:20,640
actually just a cylinder

00:31:17,120 --> 00:31:22,080
to that distance and and then we have a

00:31:20,640 --> 00:31:23,519
particle system that's emitting

00:31:22,080 --> 00:31:28,080
particles at that position

00:31:23,519 --> 00:31:30,840
as well so that's why you see that

00:31:28,080 --> 00:31:32,399
[Music]

00:31:30,840 --> 00:31:34,559
um

00:31:32,399 --> 00:31:35,760
we have this repeater 3d which is a way

00:31:34,559 --> 00:31:38,880
of creating actual

00:31:35,760 --> 00:31:40,559
instances of the of these donuts

00:31:38,880 --> 00:31:42,399
so we're actually making multiple copies

00:31:40,559 --> 00:31:44,240
of the donut model

00:31:42,399 --> 00:31:45,919
the other way to create multiple

00:31:44,240 --> 00:31:46,480
instances is with instancing but then

00:31:45,919 --> 00:31:49,200
you don't

00:31:46,480 --> 00:31:50,559
then those are not um actual copies of

00:31:49,200 --> 00:31:53,279
the model object there it's just a

00:31:50,559 --> 00:31:53,279
rendering trick

00:31:53,360 --> 00:31:56,480
so in this case these donuts are real so

00:31:55,120 --> 00:31:58,799
to speak they're actual

00:31:56,480 --> 00:32:00,480
copies of this model being repeated by

00:31:58,799 --> 00:32:01,279
this repeater 3d which is kind of like

00:32:00,480 --> 00:32:04,480
the repeater and q

00:32:01,279 --> 00:32:06,159
quick it creates actual instances um

00:32:04,480 --> 00:32:07,840
so the other interactive aspects are we

00:32:06,159 --> 00:32:11,440
have a wheel handler on the scene

00:32:07,840 --> 00:32:12,960
so we can zoom in and out and um

00:32:11,440 --> 00:32:15,039
and there's a point handler which reacts

00:32:12,960 --> 00:32:17,279
to the middle button so i can rotate the

00:32:15,039 --> 00:32:17,279
scene

00:32:17,440 --> 00:32:20,080
so if you're not using the wasd

00:32:18,799 --> 00:32:20,880
controller that's another way that you

00:32:20,080 --> 00:32:23,360
can

00:32:20,880 --> 00:32:24,640
get the same kind of behavior that's uh

00:32:23,360 --> 00:32:25,200
but that's being used to rotate the

00:32:24,640 --> 00:32:27,200
spaceship

00:32:25,200 --> 00:32:28,399
in this case instead of the scene so the

00:32:27,200 --> 00:32:29,840
wasati controller

00:32:28,399 --> 00:32:31,679
you can set the controlled object to

00:32:29,840 --> 00:32:32,960
either the camera or to something else

00:32:31,679 --> 00:32:35,760
and then you can use the

00:32:32,960 --> 00:32:37,919
keyboard you know wasd keys to move it

00:32:35,760 --> 00:32:40,799
around and you can also use the mouse to

00:32:37,919 --> 00:32:40,799
change the angle

00:32:40,960 --> 00:32:44,480
so what do we have left to work on while

00:32:42,559 --> 00:32:46,480
we're trying to still get consensus

00:32:44,480 --> 00:32:48,720
on the team whether um this idea of

00:32:46,480 --> 00:32:50,480
reusing the existing 2d handlers in 3d

00:32:48,720 --> 00:32:51,919
is actually a good idea

00:32:50,480 --> 00:32:53,440
the upside of course is that there will

00:32:51,919 --> 00:32:54,720
only be one set of handlers to maintain

00:32:53,440 --> 00:32:57,200
and they are exactly the same and

00:32:54,720 --> 00:32:58,399
therefore the api should be the same

00:32:57,200 --> 00:32:59,919
on the other hand as soon as i

00:32:58,399 --> 00:33:01,679
implemented this feature it seemed to

00:32:59,919 --> 00:33:04,399
break designer a little bit

00:33:01,679 --> 00:33:06,480
navigation inside this um qml puppet

00:33:04,399 --> 00:33:08,240
that it uses to visualize the scene

00:33:06,480 --> 00:33:10,799
it also seems like drag handler is never

00:33:08,240 --> 00:33:13,039
going to be able to directly drag 3d

00:33:10,799 --> 00:33:14,640
models because it lives in cute quick it

00:33:13,039 --> 00:33:16,159
doesn't know about that

00:33:14,640 --> 00:33:18,159
and so we're going to have to come up

00:33:16,159 --> 00:33:19,600
with a way to convert the 2d mouse delta

00:33:18,159 --> 00:33:20,799
to 3d deltas

00:33:19,600 --> 00:33:22,799
hovering doesn't always behave

00:33:20,799 --> 00:33:25,039
consistently when you've got complicated

00:33:22,799 --> 00:33:26,640
scenarios with 3d embedded inside 2d and

00:33:25,039 --> 00:33:28,880
side 3d and so forth

00:33:26,640 --> 00:33:30,480
i think there are some there's this bug

00:33:28,880 --> 00:33:32,000
that i couldn't pick the knobs in my

00:33:30,480 --> 00:33:33,360
scene and i don't really understand why

00:33:32,000 --> 00:33:34,799
i'm not sure if that's a bug in picking

00:33:33,360 --> 00:33:35,919
or if it's just something wrong with my

00:33:34,799 --> 00:33:37,840
model

00:33:35,919 --> 00:33:39,600
the wasti controller also seems to steal

00:33:37,840 --> 00:33:40,960
mouse events that would

00:33:39,600 --> 00:33:42,720
that you might want to deliver to

00:33:40,960 --> 00:33:44,720
something interactive

00:33:42,720 --> 00:33:46,080
and uh controls for stealing events as

00:33:44,720 --> 00:33:46,640
soon as you put controls in the scene

00:33:46,080 --> 00:33:49,840
then

00:33:46,640 --> 00:33:49,840
they don't work the way they should

00:33:50,399 --> 00:33:53,519
so suggestions for you guys for the

00:33:52,080 --> 00:33:55,519
community um

00:33:53,519 --> 00:33:57,440
this is really a lot of fun i think that

00:33:55,519 --> 00:33:58,480
you should already enjoy playing with it

00:33:57,440 --> 00:34:00,159
even though

00:33:58,480 --> 00:34:01,600
the interactive stuff is incomplete i

00:34:00,159 --> 00:34:03,279
mean you can feel free to pick those two

00:34:01,600 --> 00:34:03,919
patches and you can play with it and try

00:34:03,279 --> 00:34:05,760
to

00:34:03,919 --> 00:34:08,000
imagine that you're living in the future

00:34:05,760 --> 00:34:10,079
try to imagine what you can use this for

00:34:08,000 --> 00:34:11,679
outside of games what kind of kde

00:34:10,079 --> 00:34:13,359
applications for example could really

00:34:11,679 --> 00:34:15,760
make good use of 3d

00:34:13,359 --> 00:34:16,560
when i was writing this simple model

00:34:15,760 --> 00:34:18,960
viewer for that

00:34:16,560 --> 00:34:20,079
apollo command module i was having a

00:34:18,960 --> 00:34:22,000
hard time finding toolbar

00:34:20,079 --> 00:34:23,679
icons for it so that was something that

00:34:22,000 --> 00:34:25,119
i noticed i think if um

00:34:23,679 --> 00:34:27,200
there are designers in the community

00:34:25,119 --> 00:34:29,119
that are interested in creating icons it

00:34:27,200 --> 00:34:31,760
would be nice to have a standard set of

00:34:29,119 --> 00:34:32,560
icons for 3d applications for stuff like

00:34:31,760 --> 00:34:35,280
turning the

00:34:32,560 --> 00:34:37,119
axes and the grid on and off rotating to

00:34:35,280 --> 00:34:39,040
different standard positions in 3d

00:34:37,119 --> 00:34:40,720
and stuff like that just all of the

00:34:39,040 --> 00:34:41,679
toolbar icons that everybody's going to

00:34:40,720 --> 00:34:43,599
want

00:34:41,679 --> 00:34:45,440
yeah some of this stuff existed from

00:34:43,599 --> 00:34:46,879
before we had a hackathon a couple of

00:34:45,440 --> 00:34:48,560
months ago in which we created this

00:34:46,879 --> 00:34:49,760
fancy spaceship with the wayland

00:34:48,560 --> 00:34:52,879
compositor on

00:34:49,760 --> 00:34:52,879
different screens inside

00:34:57,920 --> 00:35:01,440
code has not been open sourced yet at

00:34:59,760 --> 00:35:03,119
least there's a demo video of that

00:35:01,440 --> 00:35:05,760
the digital assistant on the other hand

00:35:03,119 --> 00:35:07,359
is my creation and that is open source

00:35:05,760 --> 00:35:10,640
um and there's a demo video of that

00:35:07,359 --> 00:35:12,160
separately going into more details

00:35:10,640 --> 00:35:13,680
and well that's the end of the

00:35:12,160 --> 00:35:14,560
presentation thanks for watching i hope

00:35:13,680 --> 00:35:17,839
you had fun

00:35:14,560 --> 00:35:17,839
i hope it inspires you

00:35:21,119 --> 00:35:28,240
all right thanks uh oops

00:35:25,040 --> 00:35:28,640
sorry in a minute thanks sean that was

00:35:28,240 --> 00:35:30,400
very

00:35:28,640 --> 00:35:32,480
impressive the shot was already talking

00:35:30,400 --> 00:35:34,079
about

00:35:32,480 --> 00:35:36,560
bringing back skeuomorphic user

00:35:34,079 --> 00:35:39,839
interfaces and keywind special effects

00:35:36,560 --> 00:35:39,839
but let's not go there

00:35:40,000 --> 00:35:45,839
we have two questions um any chance

00:35:43,200 --> 00:35:46,960
of a proper vector api in qml things

00:35:45,839 --> 00:35:52,079
like being able to do

00:35:46,960 --> 00:35:55,359
qt dot vector 3d 1.0.0.0 multiplied

00:35:52,079 --> 00:35:55,359
by 10 for scaling

00:35:56,000 --> 00:35:59,920
um that's a good question okay so you're

00:35:59,359 --> 00:36:01,839
saying that

00:35:59,920 --> 00:36:03,359
i haven't actually have i tried that i

00:36:01,839 --> 00:36:04,800
think maybe i tried that once yeah so

00:36:03,359 --> 00:36:06,640
multiplying by a scalar is actually

00:36:04,800 --> 00:36:09,280
missing is that what you mean or

00:36:06,640 --> 00:36:10,800
that's what they are asking it seems

00:36:09,280 --> 00:36:11,440
yeah i mean that's more of a question

00:36:10,800 --> 00:36:14,320
for the

00:36:11,440 --> 00:36:16,640
qml engine guys but yeah wolf and so

00:36:14,320 --> 00:36:16,640
forth

00:36:16,720 --> 00:36:22,720
um another question is any consideration

00:36:19,440 --> 00:36:24,320
for vr support in qt quick 3d

00:36:22,720 --> 00:36:26,480
yeah and that's something that andy

00:36:24,320 --> 00:36:28,240
nichols is really into so i think

00:36:26,480 --> 00:36:30,160
he's probably going to come up with

00:36:28,240 --> 00:36:31,599
something but um

00:36:30,160 --> 00:36:33,359
you know that last example that i showed

00:36:31,599 --> 00:36:34,960
with array picking would give you an

00:36:33,359 --> 00:36:37,119
idea how you could do that if the

00:36:34,960 --> 00:36:38,560
assuming that the controller gives you a

00:36:37,119 --> 00:36:39,920
position in a direction then you should

00:36:38,560 --> 00:36:42,079
be able to do the picking the same

00:36:39,920 --> 00:36:42,079
way

00:36:43,280 --> 00:36:50,000
okay we don't have any other question

00:36:47,119 --> 00:36:51,680
so far and we are strict with the times

00:36:50,000 --> 00:36:55,359
so i guess

00:36:51,680 --> 00:36:57,680
we can thanks all sean for the

00:36:55,359 --> 00:36:58,800
presentation so big round of grateful

00:36:57,680 --> 00:37:02,320
applause for this

00:36:58,800 --> 00:37:05,680
and i guess your well people can

00:37:02,320 --> 00:37:07,680
contact you on the uh all the places you

00:37:05,680 --> 00:37:10,720
just showed in the

00:37:07,680 --> 00:37:14,000
slide so thank you again

00:37:10,720 --> 00:37:22,960
and we will continue in

00:37:14,000 --> 00:37:22,960

YouTube URL: https://www.youtube.com/watch?v=Hv0hzHz-UgQ


