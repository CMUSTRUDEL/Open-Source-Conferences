Title: Akademy 2021 - Releasing Android Apps - Building, optimizing and deploying release APKs
Publication date: 2021-06-28
Playlist: Akademy 2021
Description: 
	By Volker Krause
We create more and more mobile-friendly applications, many of which also work on Android. But having to cover the distributor role there as well, how do we actually go about releasing our apps there?
Targeting Android with our applications is interesting both for reaching a like-minded community on its FOSS variants such as LinageOS as well as for the vast user base of its proprietary variants, and is in line with KDE's goal of improving our application delivery. However, it is also up to us to wear the distributor hat and take care of packaging and delivery to the respective app stores there.
While we have the infrastructure to build nightly debug packages targeting Android for about 25 apps, and distribute those via a dedicated F-Droid repository, only very few applications have proper releases for Android. All of those use custom solutions to build their release packages, unlike on other platforms we have no common infrastructure for this.
In this talk we are going to look at ongoing efforts to expand the existing setup of Craft and Binary Factory to also cover Android release packages. Craft and Binary Factory are already used to build Windows, macOS and AppImage packages, covering Android as well promises less dependency, package and infrastructure maintenance work.
Building release packages isn't as easy as changing a few build flags though. Particularly for mobile apps it is useful to optimize the package size by ensuring we only include what is absolutely necessary, both for code and data. At the same time it's crucial the package is complete, especially regarding translation catalogs. We'll therefore look at ways to inspect, analyze and optimize the release packages.
Finally, a package itself isn't enough for an app store presence, we also need the associated metadata describing the application, e.g. with texts, tags/categories or screenshots. Most of this usually exists in form of AppStream metadata already, and we'll see how that can be used for Android app stores as well.
Captions: 
	00:00:01,130 --> 00:00:08,610
[Music]

00:00:11,040 --> 00:00:14,320
uh

00:00:11,360 --> 00:00:16,800
thank you alison uh hello everyone um

00:00:14,320 --> 00:00:20,320
yeah we are going to look at

00:00:16,800 --> 00:00:24,320
how to um how to package

00:00:20,320 --> 00:00:28,400
release and deploy uh our

00:00:24,320 --> 00:00:30,400
uh our applications on android and the

00:00:28,400 --> 00:00:32,719
specifically the the recent work in that

00:00:30,400 --> 00:00:37,120
area

00:00:32,719 --> 00:00:40,160
um when talking about android i

00:00:37,120 --> 00:00:40,160
i mean both the

00:00:40,960 --> 00:00:45,680
completely free software google free

00:00:43,600 --> 00:00:48,960
variants like linux os

00:00:45,680 --> 00:00:54,239
as well as the proprietary variants

00:00:48,960 --> 00:00:57,039
like most prominently google android

00:00:54,239 --> 00:00:58,559
from our application point of view those

00:00:57,039 --> 00:01:01,199
two are essentially the same we don't

00:00:58,559 --> 00:01:05,199
use any of the proprietary

00:01:01,199 --> 00:01:09,439
extensions anyway um

00:01:05,199 --> 00:01:11,760
and what motivated that that recent work

00:01:09,439 --> 00:01:13,680
is some of the problem that we have a

00:01:11,760 --> 00:01:16,560
number of our applications that actually

00:01:13,680 --> 00:01:18,000
work in android and would provide value

00:01:16,560 --> 00:01:21,360
there

00:01:18,000 --> 00:01:21,360
but they are simply not available

00:01:22,320 --> 00:01:26,400
and in parts that well that is largely

00:01:25,040 --> 00:01:28,799
our problem because we

00:01:26,400 --> 00:01:30,000
we don't have the situation like uh on

00:01:28,799 --> 00:01:32,079
linux where

00:01:30,000 --> 00:01:33,119
uh we have distributors taking care of

00:01:32,079 --> 00:01:34,720
this um

00:01:33,119 --> 00:01:36,320
in this case we are the distributor

00:01:34,720 --> 00:01:40,000
ourselves uh

00:01:36,320 --> 00:01:45,200
which means we have to do all the work

00:01:40,000 --> 00:01:48,960
um and that work is a bit more than just

00:01:45,200 --> 00:01:50,640
adding a check in git right

00:01:48,960 --> 00:01:52,320
first of all we need to build actual

00:01:50,640 --> 00:01:54,079
release packages

00:01:52,320 --> 00:01:56,159
they need to be optimized for size

00:01:54,079 --> 00:01:57,119
because target platform is mobile and

00:01:56,159 --> 00:02:00,320
size and

00:01:57,119 --> 00:02:02,159
transfer volume is constrained there uh

00:02:00,320 --> 00:02:04,799
we need to build from release tables to

00:02:02,159 --> 00:02:07,759
have the translations included

00:02:04,799 --> 00:02:09,200
um we end up bundling a whole lot of

00:02:07,759 --> 00:02:11,680
third-party

00:02:09,200 --> 00:02:12,480
dependencies which means we have to look

00:02:11,680 --> 00:02:16,160
after

00:02:12,480 --> 00:02:18,480
their licenses as well as the licensing

00:02:16,160 --> 00:02:21,840
of our own software

00:02:18,480 --> 00:02:24,480
um we need to have our packages in the

00:02:21,840 --> 00:02:27,599
corresponding app stores

00:02:24,480 --> 00:02:29,440
as site loading on android is

00:02:27,599 --> 00:02:31,040
disabled by default and heavily

00:02:29,440 --> 00:02:32,480
discouraged so

00:02:31,040 --> 00:02:35,519
practically you have to be in the app

00:02:32,480 --> 00:02:37,120
store to to be available

00:02:35,519 --> 00:02:40,560
in order to be in the app store we need

00:02:37,120 --> 00:02:43,200
the application metadata

00:02:40,560 --> 00:02:45,519
logos screenshots translator description

00:02:43,200 --> 00:02:49,760
text and all of that

00:02:45,519 --> 00:02:53,120
and if you're looking at all that list

00:02:49,760 --> 00:02:53,120
and remember that we have

00:02:53,280 --> 00:03:01,519
nine kde gear releases a year at least

00:02:56,480 --> 00:03:04,000
and 12 as my mobile gear releases the

00:03:01,519 --> 00:03:04,720
times number of applications in parts

00:03:04,000 --> 00:03:06,959
times of

00:03:04,720 --> 00:03:09,040
number of translations right that

00:03:06,959 --> 00:03:12,000
quickly gets out of hand

00:03:09,040 --> 00:03:13,680
so we need to automate as much as

00:03:12,000 --> 00:03:18,080
possible of that

00:03:13,680 --> 00:03:21,519
in order for it to be sustainable

00:03:18,080 --> 00:03:24,319
um the current situation

00:03:21,519 --> 00:03:24,959
where current refers to early april when

00:03:24,319 --> 00:03:28,560
i wrote the

00:03:24,959 --> 00:03:30,720
talk proposal um

00:03:28,560 --> 00:03:33,440
there is very few of our applications

00:03:30,720 --> 00:03:37,040
actually available on android

00:03:33,440 --> 00:03:40,159
for example kdconnect tweeter and

00:03:37,040 --> 00:03:41,040
ng-concrete they all use their own

00:03:40,159 --> 00:03:44,840
custom

00:03:41,040 --> 00:03:47,920
solution for for building packaging and

00:03:44,840 --> 00:03:50,319
distributing in parts because they have

00:03:47,920 --> 00:03:52,879
very special requirements

00:03:50,319 --> 00:03:54,000
but in other parts simply due to due to

00:03:52,879 --> 00:03:57,519
the lack of

00:03:54,000 --> 00:04:00,799
a better solution next to that

00:03:57,519 --> 00:04:02,560
we have the nightly build system on on

00:04:00,799 --> 00:04:05,599
binary factory

00:04:02,560 --> 00:04:08,480
so then we have about 25 apps

00:04:05,599 --> 00:04:11,200
that get daily builds based on the

00:04:08,480 --> 00:04:13,519
latest developments

00:04:11,200 --> 00:04:16,239
and have those put into a dedicated

00:04:13,519 --> 00:04:19,680
effort repository

00:04:16,239 --> 00:04:21,519
that system is heavily optimized for

00:04:19,680 --> 00:04:23,840
low maintenance and a low barrier of

00:04:21,519 --> 00:04:27,120
entry

00:04:23,840 --> 00:04:28,400
and that comes at a cost there is very

00:04:27,120 --> 00:04:32,240
little

00:04:28,400 --> 00:04:35,759
uh there in in terms of custom

00:04:32,240 --> 00:04:37,600
or ability to customize the the packages

00:04:35,759 --> 00:04:40,160
dependencies are already determined from

00:04:37,600 --> 00:04:43,199
the dependency metadata

00:04:40,160 --> 00:04:45,440
um there is no way to customize build

00:04:43,199 --> 00:04:47,919
flags or select which version or version

00:04:45,440 --> 00:04:50,400
of a dependency that's included

00:04:47,919 --> 00:04:52,800
so that's not ideal for polished these

00:04:50,400 --> 00:04:56,000
packages

00:04:52,800 --> 00:04:57,919
it is based on the android docker sdk

00:04:56,000 --> 00:04:59,199
that we also recommend for local

00:04:57,919 --> 00:05:02,240
development

00:04:59,199 --> 00:05:04,320
and using in parts the same tools

00:05:02,240 --> 00:05:05,600
so that makes it very easy

00:05:04,320 --> 00:05:09,600
[Music]

00:05:05,600 --> 00:05:10,560
to use and the results you see locally

00:05:09,600 --> 00:05:12,720
are very very

00:05:10,560 --> 00:05:13,919
similar to the results using that system

00:05:12,720 --> 00:05:17,440
which also helps to

00:05:13,919 --> 00:05:21,280
to work with it um

00:05:17,440 --> 00:05:23,520
and then if you look beyond android um

00:05:21,280 --> 00:05:27,280
the standard solution we have for for

00:05:23,520 --> 00:05:27,280
the other platforms there is craft

00:05:27,440 --> 00:05:31,360
and then of course there is immediately

00:05:29,360 --> 00:05:34,320
the question can we use that for

00:05:31,360 --> 00:05:34,320
for android as well

00:05:34,479 --> 00:05:41,039
that will allow us to reuse

00:05:37,680 --> 00:05:42,880
all the existing package definitions and

00:05:41,039 --> 00:05:44,720
build instructions for

00:05:42,880 --> 00:05:47,120
pretty much all our applications they're

00:05:44,720 --> 00:05:50,080
already present for windows mac os and

00:05:47,120 --> 00:05:50,080
linux app image

00:05:51,039 --> 00:05:54,960
and not just we use that and like

00:05:53,840 --> 00:05:56,560
sharing

00:05:54,960 --> 00:05:59,680
the entire build definitions going

00:05:56,560 --> 00:06:02,960
forward which would be a big plus

00:05:59,680 --> 00:06:07,280
um craft is also

00:06:02,960 --> 00:06:10,639
much more

00:06:07,280 --> 00:06:11,360
tuned towards uh building actual

00:06:10,639 --> 00:06:14,720
packages

00:06:11,360 --> 00:06:16,800
so you have a lot more control over

00:06:14,720 --> 00:06:18,000
what goes what exactly goes into the

00:06:16,800 --> 00:06:19,919
package

00:06:18,000 --> 00:06:21,120
uh that starts with building from

00:06:19,919 --> 00:06:23,919
release tables we get

00:06:21,120 --> 00:06:25,360
translations uh you can apply patches to

00:06:23,919 --> 00:06:28,800
that if necessary

00:06:25,360 --> 00:06:31,039
you can pin dependency versions

00:06:28,800 --> 00:06:32,560
um you have full control of all the

00:06:31,039 --> 00:06:35,840
build flags

00:06:32,560 --> 00:06:35,840
and so on

00:06:36,319 --> 00:06:39,600
on the other hand there is the problem

00:06:38,639 --> 00:06:42,960
that

00:06:39,600 --> 00:06:44,560
craft has no notion of cost compilation

00:06:42,960 --> 00:06:46,880
and that is something we need for

00:06:44,560 --> 00:06:48,720
android like we are not building on an

00:06:46,880 --> 00:06:53,199
android system we are building on

00:06:48,720 --> 00:06:53,199
say a linux system for an android target

00:06:53,840 --> 00:07:00,880
and the other problem is that

00:06:57,120 --> 00:07:05,039
craft is used to to decide

00:07:00,880 --> 00:07:08,000
itself what goes into the final package

00:07:05,039 --> 00:07:09,759
and drive that process while on android

00:07:08,000 --> 00:07:12,080
that is done by the application build

00:07:09,759 --> 00:07:12,080
system

00:07:13,440 --> 00:07:18,240
about two months ago we nevertheless

00:07:15,120 --> 00:07:18,240
managed to get that to work

00:07:18,400 --> 00:07:24,720
by cheating a bit we work around the

00:07:22,319 --> 00:07:27,199
cross compilation problem

00:07:24,720 --> 00:07:29,280
by assuming that everything that needs

00:07:27,199 --> 00:07:32,880
to be built for the host system

00:07:29,280 --> 00:07:34,080
say mock for qt or config compiler for

00:07:32,880 --> 00:07:37,120
frameworks

00:07:34,080 --> 00:07:39,599
are already present on the host system

00:07:37,120 --> 00:07:40,400
and we can make that assumption because

00:07:39,599 --> 00:07:44,000
the

00:07:40,400 --> 00:07:45,919
android docker sdk image provides all

00:07:44,000 --> 00:07:47,759
the host tools already

00:07:45,919 --> 00:07:50,319
uh so the only thing craft still needs

00:07:47,759 --> 00:07:54,000
to do is build for android

00:07:50,319 --> 00:07:54,879
um and for that we just pretend towards

00:07:54,000 --> 00:07:57,360
craft it is

00:07:54,879 --> 00:07:59,680
building on android and behind its back

00:07:57,360 --> 00:08:00,080
implement that as course compilation so

00:07:59,680 --> 00:08:02,080
it

00:08:00,080 --> 00:08:04,160
it doesn't even realize it's doing cross

00:08:02,080 --> 00:08:07,280
compilation

00:08:04,160 --> 00:08:10,720
and that actually works quite well

00:08:07,280 --> 00:08:14,240
for any package that is

00:08:10,720 --> 00:08:18,639
uh using a standard build system

00:08:14,240 --> 00:08:21,840
that is largely transparent um

00:08:18,639 --> 00:08:24,560
and especially for our own stuff uh

00:08:21,840 --> 00:08:25,440
the most you usually need to adjust is

00:08:24,560 --> 00:08:28,879
maybe

00:08:25,440 --> 00:08:30,319
um dependencies a little on android you

00:08:28,879 --> 00:08:31,919
might not want to have a debug

00:08:30,319 --> 00:08:34,719
dependency

00:08:31,919 --> 00:08:36,959
but that is that is very straightforward

00:08:34,719 --> 00:08:36,959
um

00:08:37,839 --> 00:08:43,839
there there is more fun to be had with

00:08:41,839 --> 00:08:45,440
dependencies that use their own custom

00:08:43,839 --> 00:08:48,800
build systems

00:08:45,440 --> 00:08:49,839
um but at least the crucial ones so the

00:08:48,800 --> 00:08:52,720
dependencies of

00:08:49,839 --> 00:08:53,360
qt and so on um they are already covered

00:08:52,720 --> 00:08:55,839
and

00:08:53,360 --> 00:08:55,839
and working

00:08:58,320 --> 00:09:03,200
and we have that deployed on binary

00:09:01,200 --> 00:09:06,160
factory

00:09:03,200 --> 00:09:08,720
alongside the existing system for for

00:09:06,160 --> 00:09:10,240
the other platforms uh and you can

00:09:08,720 --> 00:09:11,279
enable android builds there for your

00:09:10,240 --> 00:09:13,680
application

00:09:11,279 --> 00:09:15,279
uh using exactly the same mechanism so

00:09:13,680 --> 00:09:18,560
as the enable projects

00:09:15,279 --> 00:09:19,040
yaml file um you just put your project

00:09:18,560 --> 00:09:20,959
in there

00:09:19,040 --> 00:09:22,959
and then select which android

00:09:20,959 --> 00:09:25,839
architectures you want to

00:09:22,959 --> 00:09:27,760
to have covered there's currently four

00:09:25,839 --> 00:09:33,760
of them supported

00:09:27,760 --> 00:09:33,760
x86 and arm both in 32 and 64 bits

00:09:33,839 --> 00:09:40,640
and then your package gets built

00:09:37,440 --> 00:09:42,399
and it's running through basically the

00:09:40,640 --> 00:09:45,600
same pipeline that we also have for the

00:09:42,399 --> 00:09:47,600
existing nike build system

00:09:45,600 --> 00:09:49,600
which means transferring the package to

00:09:47,600 --> 00:09:51,519
a secure system getting it signed with

00:09:49,600 --> 00:09:54,560
the official kde key

00:09:51,519 --> 00:09:56,640
and then put into a a separate

00:09:54,560 --> 00:09:58,240
asteroid repository for that so you can

00:09:56,640 --> 00:10:00,480
immediately test the result on your

00:09:58,240 --> 00:10:00,480
phone

00:10:00,560 --> 00:10:07,440
there's two build modes supported

00:10:03,839 --> 00:10:08,880
and lightly release builds the latest

00:10:07,440 --> 00:10:11,680
release tower ball

00:10:08,880 --> 00:10:13,839
and thus also gets your translations

00:10:11,680 --> 00:10:17,200
included

00:10:13,839 --> 00:10:20,800
nightly builds the latest

00:10:17,200 --> 00:10:23,519
development form from kit

00:10:20,800 --> 00:10:24,480
that gives us the option to replace the

00:10:23,519 --> 00:10:28,480
old nightly

00:10:24,480 --> 00:10:30,640
build system with that system as well

00:10:28,480 --> 00:10:32,800
that would have the advantage that we

00:10:30,640 --> 00:10:34,240
have unified everything on craft and we

00:10:32,800 --> 00:10:37,760
only have a single system

00:10:34,240 --> 00:10:39,360
to maintain on the other hand

00:10:37,760 --> 00:10:40,880
as i mentioned the old system has the

00:10:39,360 --> 00:10:44,320
advantage of

00:10:40,880 --> 00:10:47,839
having a very low barrier of entry that

00:10:44,320 --> 00:10:48,560
isn't the case on the same same level

00:10:47,839 --> 00:10:51,360
for craft

00:10:48,560 --> 00:10:55,040
so there is a bit more complexity to to

00:10:51,360 --> 00:10:56,800
learn in order to get started business

00:10:55,040 --> 00:10:59,120
during the past days we discussed ways

00:10:56,800 --> 00:11:00,640
to to simplify this and to improve the

00:10:59,120 --> 00:11:02,399
documentation

00:11:00,640 --> 00:11:05,200
so we might get to the point where we

00:11:02,399 --> 00:11:08,640
can actually replace the old system

00:11:05,200 --> 00:11:14,399
with the craft-based nike builds as well

00:11:08,640 --> 00:11:17,760
but that is still under discussion

00:11:14,399 --> 00:11:20,880
um okay so now we have

00:11:17,760 --> 00:11:21,760
the package built and uh it hopefully

00:11:20,880 --> 00:11:25,440
contains

00:11:21,760 --> 00:11:28,560
uh everything we need um

00:11:25,440 --> 00:11:30,240
that isn't good to go yet though um

00:11:28,560 --> 00:11:33,040
the problem is that while there's

00:11:30,240 --> 00:11:36,079
everything in there we need there is

00:11:33,040 --> 00:11:37,200
actually quite a lot more than that in

00:11:36,079 --> 00:11:39,920
it

00:11:37,200 --> 00:11:41,760
um if you have ever looked at the

00:11:39,920 --> 00:11:46,000
lightly built packages we had

00:11:41,760 --> 00:11:49,279
so far they are all quite large

00:11:46,000 --> 00:11:49,279
so we need to turn them down

00:11:49,600 --> 00:11:56,480
and as with any optimization problem

00:11:52,639 --> 00:11:59,519
the the first thing we need is a way to

00:11:56,480 --> 00:12:02,000
to measure what we are changing

00:11:59,519 --> 00:12:03,279
um there's two useful tools for that uh

00:12:02,000 --> 00:12:07,600
in the android sdk

00:12:03,279 --> 00:12:11,120
um the apk analyzer command line tool

00:12:07,600 --> 00:12:13,040
um and the

00:12:11,120 --> 00:12:14,399
corresponding ui for that in android

00:12:13,040 --> 00:12:17,920
studio

00:12:14,399 --> 00:12:19,200
um if you just open one apk in there you

00:12:17,920 --> 00:12:21,839
get a

00:12:19,200 --> 00:12:22,880
an overview on which parts contribute

00:12:21,839 --> 00:12:26,240
how much to the

00:12:22,880 --> 00:12:28,000
uh needed space but more importantly

00:12:26,240 --> 00:12:30,000
it's able to compare

00:12:28,000 --> 00:12:32,639
two different apks of the same

00:12:30,000 --> 00:12:35,360
application and then you can

00:12:32,639 --> 00:12:35,360
nicely see

00:12:35,760 --> 00:12:40,580
how things changed if you

00:12:38,800 --> 00:12:42,000
applied some of the following

00:12:40,580 --> 00:12:44,959
[Music]

00:12:42,000 --> 00:12:44,959
mechanisms to it

00:12:45,920 --> 00:12:48,639
and then we get to

00:12:50,560 --> 00:12:57,440
ways to actually optimize the content

00:12:53,760 --> 00:12:58,720
um and the the first thing to look into

00:12:57,440 --> 00:13:01,839
is

00:12:58,720 --> 00:13:04,000
do not install anything you don't need

00:13:01,839 --> 00:13:07,200
and that goes both for your application

00:13:04,000 --> 00:13:10,320
as well as for all of your dependencies

00:13:07,200 --> 00:13:13,920
um from an example

00:13:10,320 --> 00:13:15,920
uh man pages might be nice to have on a

00:13:13,920 --> 00:13:20,399
on a linux system

00:13:15,920 --> 00:13:24,720
they're utterly useless in an apk um

00:13:20,399 --> 00:13:26,160
so look out for build options to exclude

00:13:24,720 --> 00:13:29,360
stuff like that

00:13:26,160 --> 00:13:32,399
um if a dependency doesn't provide them

00:13:29,360 --> 00:13:32,399
consider adding them

00:13:32,639 --> 00:13:36,480
if it's about stuff that will never be

00:13:34,320 --> 00:13:38,880
useful on android

00:13:36,480 --> 00:13:40,639
um if not android conditional around the

00:13:38,880 --> 00:13:42,240
installer commands might be good enough

00:13:40,639 --> 00:13:45,600
already

00:13:42,240 --> 00:13:47,360
um and that

00:13:45,600 --> 00:13:48,800
anything that isn't installed will never

00:13:47,360 --> 00:13:52,079
make it into the package so that

00:13:48,800 --> 00:13:52,959
that is the easiest way um the second

00:13:52,079 --> 00:13:57,279
thing to look at

00:13:52,959 --> 00:14:00,399
is do not link in stuff you don't need

00:13:57,279 --> 00:14:02,079
um and that also is something that goes

00:14:00,399 --> 00:14:03,760
both for your application and for your

00:14:02,079 --> 00:14:08,079
dependencies

00:14:03,760 --> 00:14:11,120
um and that is uh

00:14:08,079 --> 00:14:14,480
the the common offender for that

00:14:11,120 --> 00:14:17,519
is execute widgets

00:14:14,480 --> 00:14:18,240
that is a fairly large library and it's

00:14:17,519 --> 00:14:21,279
something

00:14:18,240 --> 00:14:23,199
where a lot of other libraries have

00:14:21,279 --> 00:14:25,120
optional dependencies on it so just by

00:14:23,199 --> 00:14:28,480
being present

00:14:25,120 --> 00:14:28,480
they end up linking against it

00:14:28,959 --> 00:14:32,240
we have meanwhile addressed that for

00:14:31,279 --> 00:14:34,240
cute svg

00:14:32,240 --> 00:14:36,079
for qt quick controls and 4k

00:14:34,240 --> 00:14:39,199
notification

00:14:36,079 --> 00:14:42,000
um that is common like

00:14:39,199 --> 00:14:42,399
common dependencies of our applications

00:14:42,000 --> 00:14:44,079
uh

00:14:42,399 --> 00:14:45,519
those will no longer drag in cubed

00:14:44,079 --> 00:14:48,160
widgets

00:14:45,519 --> 00:14:49,760
uh but you might encounter that in in

00:14:48,160 --> 00:14:52,880
other dependencies

00:14:49,760 --> 00:14:56,839
uh and then it's usually a smaller uh

00:14:52,880 --> 00:14:58,000
build system change to uh to resolve

00:14:56,839 --> 00:15:01,680
that

00:14:58,000 --> 00:15:01,680
uh then the third part to look at

00:15:02,000 --> 00:15:08,000
is plugins the way plugins end up in

00:15:05,920 --> 00:15:10,839
in the package is that the build system

00:15:08,000 --> 00:15:12,240
looks at the android dependencies xml

00:15:10,839 --> 00:15:15,519
files of

00:15:12,240 --> 00:15:17,519
all the libraries you link against

00:15:15,519 --> 00:15:19,760
and those files can specify which

00:15:17,519 --> 00:15:22,000
plugins for which plugin types are

00:15:19,760 --> 00:15:27,839
supported by those libraries

00:15:22,000 --> 00:15:27,839
and then all those plugins get pulled in

00:15:29,759 --> 00:15:33,040
the the common examples in there for

00:15:32,079 --> 00:15:36,800
things that

00:15:33,040 --> 00:15:40,399
that you might not need are

00:15:36,800 --> 00:15:43,600
the qml tooling plugins

00:15:40,399 --> 00:15:45,920
some of the more exotic image formats

00:15:43,600 --> 00:15:46,880
and the biggest ones usually are

00:15:45,920 --> 00:15:50,720
additional

00:15:46,880 --> 00:15:55,120
cute quick control styles especially the

00:15:50,720 --> 00:15:58,280
asset heavy ones based on images

00:15:55,120 --> 00:15:59,759
fusion imagine and universal so

00:15:58,280 --> 00:16:03,680
[Music]

00:15:59,759 --> 00:16:03,680
excluding those is is also useful

00:16:03,759 --> 00:16:07,440
the way to do that is using the

00:16:05,440 --> 00:16:10,720
packaging options exclude list

00:16:07,440 --> 00:16:12,639
in your build.gradle file

00:16:10,720 --> 00:16:14,079
if you do not have a build.gradle file

00:16:12,639 --> 00:16:15,759
in your application

00:16:14,079 --> 00:16:17,920
there's actually a default one shipped

00:16:15,759 --> 00:16:19,440
with qt that is being used

00:16:17,920 --> 00:16:21,120
so copy that next to your android

00:16:19,440 --> 00:16:23,839
manifest and

00:16:21,120 --> 00:16:23,839
adjust it

00:16:24,240 --> 00:16:30,399
and finally there is a

00:16:27,600 --> 00:16:32,480
similar exclusion mechanism for for

00:16:30,399 --> 00:16:34,880
asset files

00:16:32,480 --> 00:16:36,160
that is basically anything that goes

00:16:34,880 --> 00:16:40,720
into user share on

00:16:36,160 --> 00:16:43,279
on linux so all kinds of of data files

00:16:40,720 --> 00:16:44,720
um anything you couldn't get rid of in

00:16:43,279 --> 00:16:46,240
in step one

00:16:44,720 --> 00:16:48,839
maybe because it's very application

00:16:46,240 --> 00:16:51,839
specific is something you can handle

00:16:48,839 --> 00:16:51,839
here

00:16:51,920 --> 00:16:56,800
say translation catalogues for

00:16:55,040 --> 00:17:00,000
a dependency where you're sure you're

00:16:56,800 --> 00:17:03,040
not using the translated messages

00:17:00,000 --> 00:17:05,360
then you could remove that in

00:17:03,040 --> 00:17:07,039
in this way i mean translation catalogs

00:17:05,360 --> 00:17:08,880
are usually very small but they

00:17:07,039 --> 00:17:10,160
multiply by many many different

00:17:08,880 --> 00:17:13,439
languages

00:17:10,160 --> 00:17:15,520
uh so that can be worth it um slight

00:17:13,439 --> 00:17:19,199
problem with that is that the

00:17:15,520 --> 00:17:22,559
asset ignore pattern unlike the plugin

00:17:19,199 --> 00:17:24,799
ignore pattern uses a very bizarre

00:17:22,559 --> 00:17:27,439
limited syntax and needs to be squeezed

00:17:24,799 --> 00:17:29,840
in a single line

00:17:27,439 --> 00:17:33,039
i have a link to a blog post on the last

00:17:29,840 --> 00:17:35,440
slide with some more details on

00:17:33,039 --> 00:17:35,440
on that

00:17:36,320 --> 00:17:42,080
and all that actually

00:17:40,400 --> 00:17:44,240
allows you to trim down the the package

00:17:42,080 --> 00:17:47,039
quite a bit as an example

00:17:44,240 --> 00:17:50,160
here the itinerary started around with

00:17:47,039 --> 00:17:53,440
around 40 megabytes before all of that

00:17:50,160 --> 00:17:55,679
um without translations and we are now

00:17:53,440 --> 00:17:57,360
scratching on 20 megabytes including

00:17:55,679 --> 00:18:00,080
translations

00:17:57,360 --> 00:18:01,840
um there's still more more room for

00:18:00,080 --> 00:18:05,840
improvement there

00:18:01,840 --> 00:18:05,840
but that is quite reasonable already

00:18:07,679 --> 00:18:15,280
okay so now we have the um

00:18:12,000 --> 00:18:17,840
the size optimized package um now we

00:18:15,280 --> 00:18:19,600
need to get it into the store

00:18:17,840 --> 00:18:21,440
and for that we first need the

00:18:19,600 --> 00:18:23,520
application metadata so that is

00:18:21,440 --> 00:18:25,280
translated descriptions screenshots

00:18:23,520 --> 00:18:29,520
logos

00:18:25,280 --> 00:18:32,559
etc um the canonical source for that

00:18:29,520 --> 00:18:35,360
is the appstream file that i think

00:18:32,559 --> 00:18:36,559
most of our applications have and that

00:18:35,360 --> 00:18:40,080
are used for

00:18:36,559 --> 00:18:43,039
numerous other purposes already

00:18:40,080 --> 00:18:44,880
the android tool chain in ecm uh comes

00:18:43,039 --> 00:18:47,200
with a script that can convert

00:18:44,880 --> 00:18:48,240
the app stream file into the fast lane

00:18:47,200 --> 00:18:50,799
format

00:18:48,240 --> 00:18:53,280
which is the format that the f trade

00:18:50,799 --> 00:18:56,720
store is consuming directly

00:18:53,280 --> 00:18:59,120
and that the fast lane supply tool uses

00:18:56,720 --> 00:19:00,080
which is the tool to talk to the play

00:18:59,120 --> 00:19:02,880
store

00:19:00,080 --> 00:19:02,880
automatically

00:19:03,840 --> 00:19:07,360
you have the ability to customize the

00:19:06,160 --> 00:19:12,240
output

00:19:07,360 --> 00:19:15,840
by putting partial fastlane data

00:19:12,240 --> 00:19:19,360
into your repository and then

00:19:15,840 --> 00:19:21,840
the script will just fill in the gaps of

00:19:19,360 --> 00:19:22,799
anything not specified there yet so if

00:19:21,840 --> 00:19:25,600
you want to have

00:19:22,799 --> 00:19:27,679
different screenshots for android that

00:19:25,600 --> 00:19:30,080
is easily possible in this this way for

00:19:27,679 --> 00:19:30,080
example

00:19:31,360 --> 00:19:35,500
and this is how this then looks like on

00:19:34,160 --> 00:19:36,880
the left we have

00:19:35,500 --> 00:19:40,320
[Music]

00:19:36,880 --> 00:19:41,440
the uh android app on the phone uh on

00:19:40,320 --> 00:19:44,799
the right we have the

00:19:41,440 --> 00:19:47,919
google play store website

00:19:44,799 --> 00:19:50,080
um the screenshots are taken within

00:19:47,919 --> 00:19:51,520
english language if you switch the

00:19:50,080 --> 00:19:54,320
system language you also get our

00:19:51,520 --> 00:19:54,320
translations there

00:19:55,120 --> 00:20:00,880
on the ft side you see this

00:19:58,240 --> 00:20:02,720
banner graphic that is something that

00:20:00,880 --> 00:20:06,559
that isn't modeled in

00:20:02,720 --> 00:20:09,440
app stream so that is using this

00:20:06,559 --> 00:20:09,760
fast lane customization mechanism to get

00:20:09,440 --> 00:20:13,280
that

00:20:09,760 --> 00:20:13,280
into the metadata as well

00:20:13,360 --> 00:20:17,200
and everything you see in there is

00:20:17,280 --> 00:20:25,280
coming through that automatic

00:20:20,720 --> 00:20:25,280
process there's no manual entry there

00:20:26,240 --> 00:20:30,080
this conversion runs both in local

00:20:28,159 --> 00:20:32,559
builds and on binary factory so if you

00:20:30,080 --> 00:20:35,679
look on binary factory you'll see

00:20:32,559 --> 00:20:38,720
next to the apk also a zip file

00:20:35,679 --> 00:20:40,400
with the generated metadata

00:20:38,720 --> 00:20:42,720
so if you want to fine tune anything in

00:20:40,400 --> 00:20:45,840
there you can inspect that both locally

00:20:42,720 --> 00:20:45,840
and on binary factory

00:20:46,840 --> 00:20:51,360
um right

00:20:49,840 --> 00:20:53,280
and then we need to get this into the

00:20:51,360 --> 00:20:56,880
app stores

00:20:53,280 --> 00:20:59,280
um let's first look at f droid

00:20:56,880 --> 00:20:59,919
so f droid is actually less of a store

00:20:59,280 --> 00:21:02,159
and

00:20:59,919 --> 00:21:03,440
much more similar to what you might know

00:21:02,159 --> 00:21:06,400
from an uh

00:21:03,440 --> 00:21:07,039
from a linux distribution the app is

00:21:06,400 --> 00:21:10,159
more

00:21:07,039 --> 00:21:12,720
more of a package manager and there can

00:21:10,159 --> 00:21:13,600
there are multiple repositories with the

00:21:12,720 --> 00:21:16,400
packages you

00:21:13,600 --> 00:21:18,320
you can install an update from there's

00:21:16,400 --> 00:21:19,360
an official repository provided by

00:21:18,320 --> 00:21:22,159
fdroid itself

00:21:19,360 --> 00:21:23,679
and there can be arbitrary many uh

00:21:22,159 --> 00:21:25,919
third-party ones

00:21:23,679 --> 00:21:26,720
uh like i mentioned before we have a few

00:21:25,919 --> 00:21:29,600
third-party

00:21:26,720 --> 00:21:32,480
f-droid repositories for all the binary

00:21:29,600 --> 00:21:32,480
factory output

00:21:32,960 --> 00:21:36,559
those you would need to add as a user

00:21:34,720 --> 00:21:39,600
manually though so that is not

00:21:36,559 --> 00:21:41,120
ideal for discoverability better would

00:21:39,600 --> 00:21:44,159
be to be present in the

00:21:41,120 --> 00:21:47,760
main repository of f20

00:21:44,159 --> 00:21:50,159
um that however requires that f droid

00:21:47,760 --> 00:21:52,320
builds the package themselves right they

00:21:50,159 --> 00:21:56,080
they don't accept random binaries uh

00:21:52,320 --> 00:21:59,600
thrown at them which makes sense from a

00:21:56,080 --> 00:22:00,520
like security and reviewability and

00:21:59,600 --> 00:22:04,320
review

00:22:00,520 --> 00:22:07,679
reproducibility point of view um

00:22:04,320 --> 00:22:10,720
their system however is uh

00:22:07,679 --> 00:22:12,000
very much built around like the usual

00:22:10,720 --> 00:22:15,200
android technology stack

00:22:12,000 --> 00:22:17,600
so the java and kotlin

00:22:15,200 --> 00:22:18,960
if we show up there with 30c plus plus

00:22:17,600 --> 00:22:21,200
libraries that need to be built for

00:22:18,960 --> 00:22:24,559
multiple architectures

00:22:21,200 --> 00:22:28,400
that doesn't really work

00:22:24,559 --> 00:22:30,159
that well um nico has managed to do it

00:22:28,400 --> 00:22:32,080
once for 4k trip

00:22:30,159 --> 00:22:36,080
but it is a very lengthy and painful

00:22:32,080 --> 00:22:38,480
process so that still requires

00:22:36,080 --> 00:22:39,360
more work together with the asteroid

00:22:38,480 --> 00:22:41,919
people

00:22:39,360 --> 00:22:44,400
on streamlining this and finding a way

00:22:41,919 --> 00:22:48,559
how we can

00:22:44,400 --> 00:22:48,559
manage that more more sustainably

00:22:50,960 --> 00:22:54,640
as a stopgap measure we might want to

00:22:53,360 --> 00:22:58,159
look into

00:22:54,640 --> 00:22:59,760
getting at least our release repository

00:22:58,159 --> 00:23:02,400
added by default to the

00:22:59,760 --> 00:23:04,240
theft client and then as a user you

00:23:02,400 --> 00:23:05,840
still need to set the checkbox to enable

00:23:04,240 --> 00:23:08,240
that

00:23:05,840 --> 00:23:11,520
but at least you don't have to enter the

00:23:08,240 --> 00:23:11,520
the long url for that

00:23:12,240 --> 00:23:18,640
um and then we have the other store

00:23:15,360 --> 00:23:22,559
google play um

00:23:18,640 --> 00:23:23,280
that has also it's its own pain points

00:23:22,559 --> 00:23:26,320
just in

00:23:23,280 --> 00:23:28,000
different places um so to get started

00:23:26,320 --> 00:23:31,280
here you need a google account

00:23:28,000 --> 00:23:33,360
uh and get that registered with the kdev

00:23:31,280 --> 00:23:36,080
store account that is something alesh

00:23:33,360 --> 00:23:39,760
can help you with

00:23:36,080 --> 00:23:41,520
um and then you need to once go through

00:23:39,760 --> 00:23:45,120
the entire manual

00:23:41,520 --> 00:23:47,360
the entire setup process manually um

00:23:45,120 --> 00:23:49,520
that involves filling in a bunch of

00:23:47,360 --> 00:23:52,640
forms

00:23:49,520 --> 00:23:56,559
most of them don't really apply to us um

00:23:52,640 --> 00:23:57,679
they are about to properly register for

00:23:56,559 --> 00:24:00,880
all the evil stuff

00:23:57,679 --> 00:24:04,159
you can do but we don't want to scam

00:24:00,880 --> 00:24:06,080
some someone out of their money or

00:24:04,159 --> 00:24:07,760
trick them into online gambling or

00:24:06,080 --> 00:24:10,400
whatnot

00:24:07,760 --> 00:24:11,279
so this is usually just clicking no no

00:24:10,400 --> 00:24:14,799
no no no on

00:24:11,279 --> 00:24:15,679
on all the forms um this process however

00:24:14,799 --> 00:24:19,919
requires

00:24:15,679 --> 00:24:23,120
uh review and approval steps from google

00:24:19,919 --> 00:24:25,200
and that can take a day or two so uh

00:24:23,120 --> 00:24:28,320
that process takes time even if it

00:24:25,200 --> 00:24:31,600
doesn't take a whole lot of work

00:24:28,320 --> 00:24:32,880
once that is done uh and and everything

00:24:31,600 --> 00:24:35,039
got approved

00:24:32,880 --> 00:24:36,400
we have the ability to automatically

00:24:35,039 --> 00:24:39,600
interface with the

00:24:36,400 --> 00:24:41,520
with the play store um using the fast

00:24:39,600 --> 00:24:44,640
lane supply tool

00:24:41,520 --> 00:24:45,760
um this isn't deployed on binary factory

00:24:44,640 --> 00:24:48,159
yet

00:24:45,760 --> 00:24:50,480
i have a working prototype for the uh

00:24:48,159 --> 00:24:52,480
for the metadata

00:24:50,480 --> 00:24:53,520
but that still needs some work because

00:24:52,480 --> 00:24:57,760
currently it triggers

00:24:53,520 --> 00:24:59,760
um a manual review of the image assets

00:24:57,760 --> 00:25:01,039
each time we run it and that takes one

00:24:59,760 --> 00:25:03,200
or two days

00:25:01,039 --> 00:25:06,400
and if we run that process every 24

00:25:03,200 --> 00:25:09,520
hours we end up with something that

00:25:06,400 --> 00:25:10,799
just spams google and will never finish

00:25:09,520 --> 00:25:13,279
so that needs a bit more clever

00:25:10,799 --> 00:25:16,080
scripting to detect if we have changes

00:25:13,279 --> 00:25:17,679
in the image assets

00:25:16,080 --> 00:25:19,440
but the screenshots i showed you earlier

00:25:17,679 --> 00:25:22,480
that is already fully

00:25:19,440 --> 00:25:25,360
filled just by the the automatic

00:25:22,480 --> 00:25:26,240
interface and that's nice because that

00:25:25,360 --> 00:25:28,240
means we get

00:25:26,240 --> 00:25:29,679
translations from the upstream data into

00:25:28,240 --> 00:25:32,799
the play store

00:25:29,679 --> 00:25:34,480
fully automatic on wire binary factory

00:25:32,799 --> 00:25:36,400
eventually

00:25:34,480 --> 00:25:37,840
and the second part to look at is

00:25:36,400 --> 00:25:41,120
automatically uploading

00:25:37,840 --> 00:25:43,200
the resulting apks at least to the beta

00:25:41,120 --> 00:25:45,120
channel on play store

00:25:43,200 --> 00:25:47,200
that's possible by the same mechanism

00:25:45,120 --> 00:25:50,400
but that also still needs work

00:25:47,200 --> 00:25:50,400
in terms of automating it

00:25:51,679 --> 00:25:56,000
the really unpleasant part is the next

00:25:53,919 --> 00:25:58,000
bit um

00:25:56,000 --> 00:26:00,000
starting in august the play store is

00:25:58,000 --> 00:26:02,880
said to require

00:26:00,000 --> 00:26:04,880
aab packages at least for new

00:26:02,880 --> 00:26:07,520
applications

00:26:04,880 --> 00:26:08,960
and that is that has two problems one is

00:26:07,520 --> 00:26:12,799
we have

00:26:08,960 --> 00:26:13,840
so far so far we can't build those

00:26:12,799 --> 00:26:17,360
packages

00:26:13,840 --> 00:26:20,960
um and that potentially requires larger

00:26:17,360 --> 00:26:22,720
changes to how we do that because they

00:26:20,960 --> 00:26:24,960
include all the different architectures

00:26:22,720 --> 00:26:27,279
not just one

00:26:24,960 --> 00:26:28,320
and we built them separately and the

00:26:27,279 --> 00:26:30,640
second part

00:26:28,320 --> 00:26:32,799
is it requires handing over your signing

00:26:30,640 --> 00:26:34,480
key to google

00:26:32,799 --> 00:26:36,400
that's of course something we don't want

00:26:34,480 --> 00:26:39,279
to do for the existing one as it would

00:26:36,400 --> 00:26:40,880
compromise the f-trade repositories

00:26:39,279 --> 00:26:42,559
on the other hand you can't arbitrarily

00:26:40,880 --> 00:26:44,400
change signing keys because that will

00:26:42,559 --> 00:26:47,760
break

00:26:44,400 --> 00:26:50,799
updating existing installations um

00:26:47,760 --> 00:26:54,559
so that still needs

00:26:50,799 --> 00:26:54,559
some work in looking into

00:26:55,760 --> 00:27:02,080
um yeah a few more things um

00:26:59,279 --> 00:27:03,120
to look into going forward um it will of

00:27:02,080 --> 00:27:05,919
course be nice to have

00:27:03,120 --> 00:27:08,320
more apps and application maintainers

00:27:05,919 --> 00:27:11,600
participate in this and

00:27:08,320 --> 00:27:13,760
try the the new system

00:27:11,600 --> 00:27:15,279
uh to some extent that has happened with

00:27:13,760 --> 00:27:16,880
the filler browsers

00:27:15,279 --> 00:27:18,960
applying this to some of the plasma

00:27:16,880 --> 00:27:21,520
mobile apps

00:27:18,960 --> 00:27:22,960
um as i said there is more we can look

00:27:21,520 --> 00:27:26,080
into for

00:27:22,960 --> 00:27:29,279
further minimizing the packages

00:27:26,080 --> 00:27:32,720
full static builds for example or

00:27:29,279 --> 00:27:32,720
minifying the qml code

00:27:33,200 --> 00:27:37,200
there is the the whole discussion that

00:27:35,120 --> 00:27:37,520
we had in the in the past few days as

00:27:37,200 --> 00:27:40,880
well

00:27:37,520 --> 00:27:42,240
on the qa process and eqa process

00:27:40,880 --> 00:27:45,360
automation

00:27:42,240 --> 00:27:47,760
um from that also applies to all other

00:27:45,360 --> 00:27:49,200
platforms um that's something

00:27:47,760 --> 00:27:50,960
that matters for android as well of

00:27:49,200 --> 00:27:53,600
course

00:27:50,960 --> 00:27:54,960
um for license compliance there is some

00:27:53,600 --> 00:27:59,600
interesting work going on

00:27:54,960 --> 00:28:02,240
from the kde and live people um

00:27:59,600 --> 00:28:04,559
they're working on extending k about

00:28:02,240 --> 00:28:08,320
data and our standard about dialogues

00:28:04,559 --> 00:28:10,720
to also cover third party dependencies

00:28:08,320 --> 00:28:13,279
that would go a long way in addressing

00:28:10,720 --> 00:28:13,279
that part

00:28:14,000 --> 00:28:17,919
there's the crash reporting feature in

00:28:15,679 --> 00:28:22,159
the play store to look into

00:28:17,919 --> 00:28:25,440
um usable crash reports would of course

00:28:22,159 --> 00:28:27,200
uh uh good to have uh

00:28:25,440 --> 00:28:29,679
but that will require that we generate

00:28:27,200 --> 00:28:30,320
the uh the corresponding symbol files

00:28:29,679 --> 00:28:33,279
and

00:28:30,320 --> 00:28:33,279
deliver them as well

00:28:33,520 --> 00:28:40,000
and then finally if once we have

00:28:36,640 --> 00:28:43,360
uh polished release packages

00:28:40,000 --> 00:28:45,279
available there is the question

00:28:43,360 --> 00:28:46,640
should they cost money in in the play

00:28:45,279 --> 00:28:48,559
store it's a

00:28:46,640 --> 00:28:50,000
similar discussion than what we had in

00:28:48,559 --> 00:28:53,679
the in the past days as well

00:28:50,000 --> 00:28:56,640
for the microsoft store on on windows

00:28:53,679 --> 00:28:58,240
um only in the in the play store of

00:28:56,640 --> 00:29:01,840
course not in the in the

00:28:58,240 --> 00:29:05,600
free f1 store and in order to

00:29:01,840 --> 00:29:08,799
to support the kdev

00:29:05,600 --> 00:29:09,520
um if you're interested in a topic we

00:29:08,799 --> 00:29:13,520
will have

00:29:09,520 --> 00:29:16,799
or will have had above last tuesday

00:29:13,520 --> 00:29:19,840
um and there is

00:29:16,799 --> 00:29:23,840
the kd android matrix channel and

00:29:19,840 --> 00:29:23,840
mailing list that you might want to join

00:29:23,919 --> 00:29:30,799
okay uh that's it

00:29:27,520 --> 00:29:30,799
do we have any questions

00:29:31,600 --> 00:29:35,679
yep we do have questions hello folker

00:29:34,480 --> 00:29:39,840
thanks for your

00:29:35,679 --> 00:29:41,919
contribution um i guess that this this

00:29:39,840 --> 00:29:45,679
topic is going to be very very

00:29:41,919 --> 00:29:48,320
uh important for the near future

00:29:45,679 --> 00:29:49,760
so from the questions the first one is

00:29:48,320 --> 00:29:51,760
from fabian he's asking

00:29:49,760 --> 00:29:53,279
have you tried to compile a custom cute

00:29:51,760 --> 00:29:56,399
build with disabled feature

00:29:53,279 --> 00:29:58,640
for example uh dash no feature quick

00:29:56,399 --> 00:30:00,000
controls to imagine instead of later

00:29:58,640 --> 00:30:05,279
removing files at the

00:30:00,000 --> 00:30:08,799
ground level um yeah we are doing this

00:30:05,279 --> 00:30:11,840
to currently still very

00:30:08,799 --> 00:30:13,120
defensively um i mean we we are

00:30:11,840 --> 00:30:16,480
stripping out some of the

00:30:13,120 --> 00:30:18,000
uh uh cute location back-ends for

00:30:16,480 --> 00:30:20,080
example that way

00:30:18,000 --> 00:30:23,520
um we are probably also going to enable

00:30:20,080 --> 00:30:26,640
that for the quick control styles

00:30:23,520 --> 00:30:28,960
the problem is that whatever we or that

00:30:26,640 --> 00:30:29,840
that configuration is shared between all

00:30:28,960 --> 00:30:32,240
applications

00:30:29,840 --> 00:30:33,840
so if we remove something that somebody

00:30:32,240 --> 00:30:36,480
relies on

00:30:33,840 --> 00:30:38,159
uh that is a problem right um we

00:30:36,480 --> 00:30:41,279
initially started with

00:30:38,159 --> 00:30:42,159
not even having cute widgets uh but that

00:30:41,279 --> 00:30:45,760
caused trouble

00:30:42,159 --> 00:30:48,799
for for some apps that rely on q action

00:30:45,760 --> 00:30:51,600
which in q5 is still an include widget

00:30:48,799 --> 00:30:54,320
and only q6 actually moves to

00:30:51,600 --> 00:30:55,679
so we had to bring uh kidwidget back so

00:30:54,320 --> 00:30:58,799
it's a bit about finding

00:30:55,679 --> 00:31:01,360
the right balance on what can we do

00:30:58,799 --> 00:31:02,840
generically and which which parts need

00:31:01,360 --> 00:31:05,760
to be

00:31:02,840 --> 00:31:07,840
application um we also had the craft off

00:31:05,760 --> 00:31:08,960
yesterday where hana had some good ideas

00:31:07,840 --> 00:31:11,760
on how we can move

00:31:08,960 --> 00:31:12,720
even more of that stuff to a generic

00:31:11,760 --> 00:31:15,360
level

00:31:12,720 --> 00:31:16,640
uh and reduce more and more of the stuff

00:31:15,360 --> 00:31:18,640
that applications need to do

00:31:16,640 --> 00:31:18,960
individually so that's certainly a goal

00:31:18,640 --> 00:31:22,880
but

00:31:18,960 --> 00:31:26,000
uh it requires a bit of a balance

00:31:22,880 --> 00:31:27,679
i see okay the second question for it

00:31:26,000 --> 00:31:28,399
for now there is just another question

00:31:27,679 --> 00:31:31,440
um

00:31:28,399 --> 00:31:32,559
just if you attended the academy in the

00:31:31,440 --> 00:31:34,399
last in the

00:31:32,559 --> 00:31:36,159
first part on saturday and sunday you

00:31:34,399 --> 00:31:37,120
already know that you need to check the

00:31:36,159 --> 00:31:39,760
qe

00:31:37,120 --> 00:31:41,360
widget in the chat room in your in the

00:31:39,760 --> 00:31:45,120
chat room of the talk to

00:31:41,360 --> 00:31:47,519
be able to add questions or you can also

00:31:45,120 --> 00:31:49,840
from time to time the other people the

00:31:47,519 --> 00:31:52,880
other chat moderator will link the

00:31:49,840 --> 00:31:53,279
um place the right the url so where you

00:31:52,880 --> 00:31:54,960
can

00:31:53,279 --> 00:31:57,039
up the questions if you have troubles

00:31:54,960 --> 00:32:00,000
with the widget

00:31:57,039 --> 00:32:00,880
the second question is a bit not exactly

00:32:00,000 --> 00:32:02,880
technical is

00:32:00,880 --> 00:32:04,080
where does the banner image not the

00:32:02,880 --> 00:32:08,720
application icon

00:32:04,080 --> 00:32:12,399
on the play store come from uh

00:32:08,720 --> 00:32:15,519
you mean this one uh i mean

00:32:12,399 --> 00:32:17,600
this one is uh well i

00:32:15,519 --> 00:32:18,559
color painted that together from the i

00:32:17,600 --> 00:32:21,760
can um

00:32:18,559 --> 00:32:23,679
the kde i can and put that into the fast

00:32:21,760 --> 00:32:28,480
lane override folder

00:32:23,679 --> 00:32:30,799
so that's injected in

00:32:28,480 --> 00:32:32,640
in the in the metadata uh as that's

00:32:30,799 --> 00:32:33,679
something that we don't have in in app

00:32:32,640 --> 00:32:37,679
stream

00:32:33,679 --> 00:32:39,679
um that is to my i mean google

00:32:37,679 --> 00:32:41,919
play wants that as well but i haven't

00:32:39,679 --> 00:32:45,120
found where it's using that

00:32:41,919 --> 00:32:47,600
so far i've only seen it in in android

00:32:45,120 --> 00:32:48,480
the image on google play is just a large

00:32:47,600 --> 00:32:51,679
version of the

00:32:48,480 --> 00:32:54,240
of the application icon

00:32:51,679 --> 00:32:55,519
that actually also is it needs to be a

00:32:54,240 --> 00:32:57,039
very large png

00:32:55,519 --> 00:32:59,039
something that we don't have in our

00:32:57,039 --> 00:33:01,279
usual icons

00:32:59,039 --> 00:33:03,039
um so that might also be something that

00:33:01,279 --> 00:33:05,679
you actually need to specifically

00:33:03,039 --> 00:33:07,440
create for android but it's if you have

00:33:05,679 --> 00:33:11,440
an svg icon that is

00:33:07,440 --> 00:33:13,519
very easy to do okay

00:33:11,440 --> 00:33:15,919
in the meantime we have another question

00:33:13,519 --> 00:33:16,799
um asking about making apps paid in the

00:33:15,919 --> 00:33:18,559
play store

00:33:16,799 --> 00:33:20,320
are you aware that once an app is made

00:33:18,559 --> 00:33:21,120
available free on the play store you can

00:33:20,320 --> 00:33:25,840
change it to

00:33:21,120 --> 00:33:25,840
being paid or only by making a new entry

00:33:26,320 --> 00:33:31,600
um yeah as i said i mean this is an

00:33:29,760 --> 00:33:33,360
ongoing discussions on how we want to

00:33:31,600 --> 00:33:35,360
handle that at all there were

00:33:33,360 --> 00:33:37,039
various possible ideas with having a

00:33:35,360 --> 00:33:38,880
free version and a for pay version or

00:33:37,039 --> 00:33:42,000
having a the

00:33:38,880 --> 00:33:45,919
the pay as an uh

00:33:42,000 --> 00:33:48,399
additional upgrade or um

00:33:45,919 --> 00:33:50,240
yeah i also think we will we will end up

00:33:48,399 --> 00:33:52,000
experimenting with different models for

00:33:50,240 --> 00:33:53,660
the different apps and see what works

00:33:52,000 --> 00:33:55,279
right

00:33:53,660 --> 00:33:57,120
[Music]

00:33:55,279 --> 00:33:58,720
i mean the monetization of this is a

00:33:57,120 --> 00:34:01,360
nice to have feature for

00:33:58,720 --> 00:34:02,000
for getting more money into kdev but

00:34:01,360 --> 00:34:04,559
it's not

00:34:02,000 --> 00:34:06,159
something that is absolutely crucial

00:34:04,559 --> 00:34:08,399
that you need to get right from the

00:34:06,159 --> 00:34:11,280
from the beginning but yeah i'm aware

00:34:08,399 --> 00:34:11,280
that there's uh

00:34:11,359 --> 00:34:14,399
certain restrictions on the app store

00:34:12,879 --> 00:34:17,679
and they keep changing

00:34:14,399 --> 00:34:17,679
and we'll need to work with this

00:34:18,639 --> 00:34:25,200
okay thanks so i don't see other

00:34:22,000 --> 00:34:28,560
questions coming so

00:34:25,200 --> 00:34:31,919
um if you're interested um where

00:34:28,560 --> 00:34:33,919
can people find you i guess well

00:34:31,919 --> 00:34:36,240
apart from going back in time as someone

00:34:33,919 --> 00:34:39,679
was suggesting on the

00:34:36,240 --> 00:34:42,079
chat and go to the box

00:34:39,679 --> 00:34:43,200
um yeah i think the the best place uh

00:34:42,079 --> 00:34:46,480
for that is

00:34:43,200 --> 00:34:49,839
uh the kd android matrix channel ngk the

00:34:46,480 --> 00:34:49,839
android mailing list

00:34:50,159 --> 00:34:54,399
the people involved hang out like myself

00:34:52,480 --> 00:34:58,320
included

00:34:54,399 --> 00:35:02,000
okay so thanks again for this effort

00:34:58,320 --> 00:35:04,240
and uh we will we're going to have a

00:35:02,000 --> 00:35:12,720
short break and we will start in

00:35:04,240 --> 00:35:12,720

YouTube URL: https://www.youtube.com/watch?v=KdklKmZcaPk


