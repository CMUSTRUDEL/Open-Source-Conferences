Title: Akademy2021 - KF6 the Architecture Overview - Time to Slice Things Up Yet Again
Publication date: 2021-06-30
Playlist: Akademy 2021
Description: 
	By Kevin Ottens
A new Qt major version has been released. As usual this is when we really get into preparing the next incarnation of our development platform. The last time we went full steam into cutting kdelibs into pieces. What are we going to do this time? Beware, this talk might include references from slasher movies.
The move from kdelibs4 to KF5 was kind of our own Copernician Revolution. We used the opportunity to split our single platform package into dozens of components. This served us well but the model proposed to structure them is showing some limitations. With KF6 this is our opportunity to address those issues.
In this talk, we will revisit how the KF5 offer has been structured. From that scheme we will highlight what worked well and not so well.
Then we will proceed with an idea which was discussed during the latest KDE Frameworks Sprint and see how it could improve things. This is an interesting cocktail which is one part technical, one part community and one part marketing. Indeed, it might end up redefining in parts the nature of both KDE Frameworks and Plasma.
Finally, we will explore the current state of our frameworks to see how far we are from the new envisioned structure and how feasible this rethinking of our platform is.
Captions: 
	00:00:01,110 --> 00:00:08,589
[Music]

00:00:13,519 --> 00:00:17,359
hello everybody

00:00:14,559 --> 00:00:18,000
and welcome to yet another amazing talk

00:00:17,359 --> 00:00:20,480
at

00:00:18,000 --> 00:00:21,279
this year's academy uh the next talk

00:00:20,480 --> 00:00:24,880
will be about

00:00:21,279 --> 00:00:28,400
kde frameworks uh six or the next

00:00:24,880 --> 00:00:30,480
kda frameworks and it will be given by

00:00:28,400 --> 00:00:33,360
dr kevin uttens

00:00:30,480 --> 00:00:35,280
the guy who is mean in chord reviews and

00:00:33,360 --> 00:00:40,480
very very nice in person

00:00:35,280 --> 00:00:40,480
so hit it up kevin thank you even

00:00:40,559 --> 00:00:44,960
all right so let's get started with this

00:00:43,440 --> 00:00:49,840
welcome everyone

00:00:44,960 --> 00:00:52,879
to this talk so the goal here is to give

00:00:49,840 --> 00:00:56,079
a rough overview about how

00:00:52,879 --> 00:00:58,800
kd frameworks is structured

00:00:56,079 --> 00:00:59,760
and i will cover uh in particular at

00:00:58,800 --> 00:01:01,680
toward the end

00:00:59,760 --> 00:01:03,359
um an idea which has been discussed

00:01:01,680 --> 00:01:06,640
during the

00:01:03,359 --> 00:01:09,680
last um kd framework sprint uh

00:01:06,640 --> 00:01:11,040
and admittedly that part is more or less

00:01:09,680 --> 00:01:15,920
food for third for

00:01:11,040 --> 00:01:15,920
the upcoming kd framework six both

00:01:19,040 --> 00:01:23,600
first for those who don't know me so i

00:01:21,280 --> 00:01:26,400
started to use kde

00:01:23,600 --> 00:01:27,840
as a teenager basically so way back in

00:01:26,400 --> 00:01:30,159
the time

00:01:27,840 --> 00:01:32,960
i didn't start contributing right away

00:01:30,159 --> 00:01:35,439
and waited a few years before doing this

00:01:32,960 --> 00:01:36,479
and when i did that that was love at

00:01:35,439 --> 00:01:39,520
first sight

00:01:36,479 --> 00:01:40,479
i loved the community back then i still

00:01:39,520 --> 00:01:43,520
love it

00:01:40,479 --> 00:01:45,840
nowadays and so i've been doing

00:01:43,520 --> 00:01:49,439
things here and there in particular i've

00:01:45,840 --> 00:01:52,640
been stuck quite a bit in kde libs

00:01:49,439 --> 00:01:55,600
and i participated in the setup of the

00:01:52,640 --> 00:01:57,520
kd frameworks architecture i also do

00:01:55,600 --> 00:02:00,079
some community stuff so i

00:01:57,520 --> 00:02:02,320
helped with facilitating the creation of

00:02:00,079 --> 00:02:04,560
the kde manifesto

00:02:02,320 --> 00:02:06,079
and what is you might have seen some of

00:02:04,560 --> 00:02:09,520
my blog posts

00:02:06,079 --> 00:02:10,959
while i'm using in community data

00:02:09,520 --> 00:02:13,280
analytics to

00:02:10,959 --> 00:02:14,239
see how communities are doing and of

00:02:13,280 --> 00:02:17,760
course in particular

00:02:14,239 --> 00:02:19,840
kde also parts of kde

00:02:17,760 --> 00:02:20,800
chenille's plug i will have another talk

00:02:19,840 --> 00:02:25,200
about this

00:02:20,800 --> 00:02:25,200
with a colleague of mine next friday

00:02:25,280 --> 00:02:31,599
and so nowaday i'm working at

00:02:28,319 --> 00:02:35,680
uh in your called couture where

00:02:31,599 --> 00:02:39,040
we are doing services around development

00:02:35,680 --> 00:02:42,160
and mostly tech leaders service

00:02:39,040 --> 00:02:45,280
type jobs architecture jobs and so on

00:02:42,160 --> 00:02:48,640
and i'm living in toulouse or in the

00:02:45,280 --> 00:02:51,680
south west of france

00:02:48,640 --> 00:02:53,120
all right uh those who know me uh

00:02:51,680 --> 00:02:54,800
those who attended the training

00:02:53,120 --> 00:02:57,040
yesterday they know that i generally

00:02:54,800 --> 00:02:59,120
start with some uh historic bits

00:02:57,040 --> 00:03:00,959
uh so that's what we're we are going to

00:02:59,120 --> 00:03:04,720
do now uh

00:03:00,959 --> 00:03:07,680
and go back all right apparently

00:03:04,720 --> 00:03:07,680
it's too loud

00:03:07,840 --> 00:03:22,080
i can probably do this yes

00:03:18,000 --> 00:03:25,840
we'll assume better yes um

00:03:22,080 --> 00:03:25,840
all right so let's go with the story

00:03:25,920 --> 00:03:30,640
so way back in the time uh not

00:03:29,040 --> 00:03:32,959
right at the beginning but somewhere in

00:03:30,640 --> 00:03:33,200
between we had something that we called

00:03:32,959 --> 00:03:36,159
the

00:03:33,200 --> 00:03:37,200
kde platform uh which was basically uh

00:03:36,159 --> 00:03:40,959
kdds

00:03:37,200 --> 00:03:44,480
and something named kd base runtime

00:03:40,959 --> 00:03:48,159
the thing at the time was that we had

00:03:44,480 --> 00:03:51,680
a rather monolithic development

00:03:48,159 --> 00:03:54,080
model and because of that it was

00:03:51,680 --> 00:03:55,040
not that easy to actually know the

00:03:54,080 --> 00:03:57,840
dependencies

00:03:55,040 --> 00:04:00,239
where they went right it was that was a

00:03:57,840 --> 00:04:03,439
bit add-on

00:04:00,239 --> 00:04:04,799
so if you took something like uh

00:04:03,439 --> 00:04:08,159
plus my desktop and looked at the

00:04:04,799 --> 00:04:09,760
dependencies uh it might not be

00:04:08,159 --> 00:04:12,879
readable for everyone i think i can

00:04:09,760 --> 00:04:14,959
actually zoom in yes fancy

00:04:12,879 --> 00:04:16,799
so you get to see that the plasma

00:04:14,959 --> 00:04:19,840
desktop for instance would

00:04:16,799 --> 00:04:22,800
direct almost directly link to

00:04:19,840 --> 00:04:24,080
libke text editor right which would then

00:04:22,800 --> 00:04:27,759
put in

00:04:24,080 --> 00:04:30,720
libke parts straight from plasma desktop

00:04:27,759 --> 00:04:33,199
or that you would have webkit linkedin

00:04:30,720 --> 00:04:33,199
right so

00:04:34,639 --> 00:04:38,960
lots of weird dependencies you wouldn't

00:04:36,400 --> 00:04:39,440
expect right even things like kde in it

00:04:38,960 --> 00:04:43,040
you would

00:04:39,440 --> 00:04:43,600
have links to k-part 2k io right so that

00:04:43,040 --> 00:04:47,040
would bring

00:04:43,600 --> 00:04:50,800
quite a lot uh just for something

00:04:47,040 --> 00:04:50,800
rather small as a service

00:04:51,440 --> 00:04:56,240
right and so only plasma you would see

00:04:53,280 --> 00:04:57,360
kio being linked directly right click k

00:04:56,240 --> 00:05:00,960
file being linked

00:04:57,360 --> 00:05:04,560
uh directly so that's kind of what you

00:05:00,960 --> 00:05:06,080
get as i was about to say

00:05:04,560 --> 00:05:07,680
weird but that's more surprising

00:05:06,080 --> 00:05:11,120
dependencies right when you have

00:05:07,680 --> 00:05:13,280
more of a monolithic model

00:05:11,120 --> 00:05:15,039
most of you get dependencies which make

00:05:13,280 --> 00:05:16,720
sense and then you get some others which

00:05:15,039 --> 00:05:19,199
are more opportunistic right

00:05:16,720 --> 00:05:21,039
well it's there in the same repository

00:05:19,199 --> 00:05:23,280
and we release at the same time so

00:05:21,039 --> 00:05:24,479
that's probably fine right if i just

00:05:23,280 --> 00:05:26,560
link to that

00:05:24,479 --> 00:05:29,759
that's how you might end up with a big

00:05:26,560 --> 00:05:29,759
bowl of mud at some point

00:05:29,919 --> 00:05:36,800
so back in 2010 uh there's been

00:05:34,000 --> 00:05:38,479
one of the plasma meetings one which

00:05:36,800 --> 00:05:42,080
were called tokamax

00:05:38,479 --> 00:05:42,080
and so during the tokemak4

00:05:42,240 --> 00:05:47,039
in the snow there's been discussions

00:05:45,759 --> 00:05:50,479
around that right

00:05:47,039 --> 00:05:52,800
and where someone basically took an axe

00:05:50,479 --> 00:05:54,560
and decided to do something about uh

00:05:52,800 --> 00:05:57,840
about the world problem

00:05:54,560 --> 00:06:01,360
um that led to that uh

00:05:57,840 --> 00:06:03,680
presentation uh which was so that's um

00:06:01,360 --> 00:06:06,400
screenshots of the first slide uh name

00:06:03,680 --> 00:06:09,759
kde platform profiles

00:06:06,400 --> 00:06:13,360
low-fat kd platform for your pleasure

00:06:09,759 --> 00:06:14,800
and between the parentheses if you look

00:06:13,360 --> 00:06:17,360
there's the kd5

00:06:14,800 --> 00:06:18,000
free right now added sugar so that was

00:06:17,360 --> 00:06:23,120
even

00:06:18,000 --> 00:06:26,560
before we considered you know going to

00:06:23,120 --> 00:06:28,639
really going to q5 and coming up with

00:06:26,560 --> 00:06:29,919
kde frameworks and already back then

00:06:28,639 --> 00:06:31,759
there were discussions about

00:06:29,919 --> 00:06:33,280
how can we do better regarding the

00:06:31,759 --> 00:06:37,120
dependencies

00:06:33,280 --> 00:06:37,120
and the idea of the platform profiles

00:06:37,919 --> 00:06:41,199
was to say you could have the desktop

00:06:39,759 --> 00:06:42,720
profile with everything and all the

00:06:41,199 --> 00:06:44,800
dependencies right

00:06:42,720 --> 00:06:45,840
and then you could have uh if i remember

00:06:44,800 --> 00:06:48,720
correctly that was something like a

00:06:45,840 --> 00:06:52,000
tablet profile so you would we would cut

00:06:48,720 --> 00:06:53,440
at compile time for uh platform factor

00:06:52,000 --> 00:06:55,280
some of the dependencies and then you

00:06:53,440 --> 00:06:56,560
would lose features and then for the

00:06:55,280 --> 00:06:58,000
mobile you would get some more

00:06:56,560 --> 00:06:59,120
dependencies and then you would lose

00:06:58,000 --> 00:07:01,360
features right

00:06:59,120 --> 00:07:02,319
so that was kind of a stop gap measure

00:07:01,360 --> 00:07:05,360
to try

00:07:02,319 --> 00:07:06,880
to bring less dependencies because

00:07:05,360 --> 00:07:08,800
you're going to smaller and smaller

00:07:06,880 --> 00:07:11,360
devices

00:07:08,800 --> 00:07:14,720
obviously that was kind of influenced by

00:07:11,360 --> 00:07:17,680
the presence of a famous bootmaker

00:07:14,720 --> 00:07:18,240
around our community at the time um but

00:07:17,680 --> 00:07:21,919
that

00:07:18,240 --> 00:07:22,400
never was really satisfactory right the

00:07:21,919 --> 00:07:25,199
world

00:07:22,400 --> 00:07:25,840
we do it at compile time uh so that

00:07:25,199 --> 00:07:29,520
means it's

00:07:25,840 --> 00:07:32,880
actually harder to test and validate

00:07:29,520 --> 00:07:32,880
uh inquiry

00:07:32,960 --> 00:07:37,520
and because then your test matrix is

00:07:35,759 --> 00:07:37,840
just bigger right you have to compile

00:07:37,520 --> 00:07:41,199
with

00:07:37,840 --> 00:07:41,199
all the different type of flags

00:07:41,520 --> 00:07:45,599
and the fact that you would lose

00:07:43,759 --> 00:07:47,599
features right and one of the things is

00:07:45,599 --> 00:07:48,000
that we want all of our libraries to

00:07:47,599 --> 00:07:49,919
work

00:07:48,000 --> 00:07:52,240
well together and provide a very

00:07:49,919 --> 00:07:53,919
integrated experience

00:07:52,240 --> 00:07:55,440
when you get them and there was no way

00:07:53,919 --> 00:07:59,599
to reclaim that experience

00:07:55,440 --> 00:08:02,800
right if some stuff was installed

00:07:59,599 --> 00:08:08,080
so fast tracking uh more than a year

00:08:02,800 --> 00:08:08,080
that's uh where we had the platform 11

00:08:08,479 --> 00:08:12,240
meeting which means that was 10 years

00:08:10,960 --> 00:08:16,160
ago now right

00:08:12,240 --> 00:08:19,440
that was in june 2011 uh back then

00:08:16,160 --> 00:08:20,479
um and so we've been looking at more of

00:08:19,440 --> 00:08:23,440
those graphs

00:08:20,479 --> 00:08:26,000
uh and so for instance that the aquanadi

00:08:23,440 --> 00:08:28,639
console dependencies

00:08:26,000 --> 00:08:30,080
which was a good one because it tended

00:08:28,639 --> 00:08:32,719
for various reasons to

00:08:30,080 --> 00:08:33,360
link to everything so i looked quite a

00:08:32,719 --> 00:08:35,919
bit to

00:08:33,360 --> 00:08:37,440
to that one because we could see plenty

00:08:35,919 --> 00:08:40,000
of the different paths

00:08:37,440 --> 00:08:40,800
in our dependencies that was something

00:08:40,000 --> 00:08:43,120
we did

00:08:40,800 --> 00:08:44,000
uh in a cabin in the swiss alps

00:08:43,120 --> 00:08:47,360
basically

00:08:44,000 --> 00:08:50,640
so when you go there uh what you

00:08:47,360 --> 00:08:56,480
i mean a bunch of kids in a cabin

00:08:50,640 --> 00:08:56,480
what could possibly go wrong right

00:08:57,680 --> 00:09:02,720
um more practically right you get a

00:09:00,880 --> 00:09:04,959
bunch of gigs in the middle of nowhere

00:09:02,720 --> 00:09:06,800
so they just spend their time

00:09:04,959 --> 00:09:08,080
with codes and graphs and looking at

00:09:06,800 --> 00:09:11,200
stuff right so that was

00:09:08,080 --> 00:09:14,399
actually a very um very very

00:09:11,200 --> 00:09:17,360
productive meeting uh we ended up

00:09:14,399 --> 00:09:18,720
lining up quite a lot of tasks that

00:09:17,360 --> 00:09:20,560
picture was taken in

00:09:18,720 --> 00:09:22,880
that particular cabin at the beginning

00:09:20,560 --> 00:09:23,680
of the meeting so you could see that all

00:09:22,880 --> 00:09:26,399
the tasks

00:09:23,680 --> 00:09:28,240
most of all the tasks are on on the left

00:09:26,399 --> 00:09:31,440
hand side

00:09:28,240 --> 00:09:34,800
and i don't remember the number that

00:09:31,440 --> 00:09:37,839
was really huge and that's pretty much

00:09:34,800 --> 00:09:40,720
how it looked at the

00:09:37,839 --> 00:09:42,720
night of the last day right so

00:09:40,720 --> 00:09:43,120
everything is on the right so a lot of

00:09:42,720 --> 00:09:45,920
stuff

00:09:43,120 --> 00:09:47,200
was done there most of those tasks were

00:09:45,920 --> 00:09:50,640
about

00:09:47,200 --> 00:09:52,240
looking at each libraries and

00:09:50,640 --> 00:09:54,880
each problematic dependencies we

00:09:52,240 --> 00:09:57,920
identified in those libraries

00:09:54,880 --> 00:10:00,640
so it was a lot a lot of work

00:09:57,920 --> 00:10:03,040
from quite a few individuals during that

00:10:00,640 --> 00:10:03,040
meeting

00:10:03,120 --> 00:10:08,880
and that's how we came up with uh

00:10:06,160 --> 00:10:11,120
the kd frameworks five dependency plan

00:10:08,880 --> 00:10:13,200
um

00:10:11,120 --> 00:10:15,440
so there are several things to notice in

00:10:13,200 --> 00:10:17,519
there uh so i know that volker

00:10:15,440 --> 00:10:19,519
regret the color palette which is used

00:10:17,519 --> 00:10:20,959
there but that's your fault so you have

00:10:19,519 --> 00:10:24,160
to live with it now

00:10:20,959 --> 00:10:27,440
um but one thing you can notice

00:10:24,160 --> 00:10:28,720
is that we already see you know those

00:10:27,440 --> 00:10:31,839
rows

00:10:28,720 --> 00:10:32,640
those columns right which says well the

00:10:31,839 --> 00:10:34,560
tears right

00:10:32,640 --> 00:10:36,560
we get the idea of the tears already

00:10:34,560 --> 00:10:38,880
right and

00:10:36,560 --> 00:10:40,000
we get the columns for the different

00:10:38,880 --> 00:10:43,519
type of

00:10:40,000 --> 00:10:45,120
frameworks right which is something we

00:10:43,519 --> 00:10:48,560
still roll with

00:10:45,120 --> 00:10:50,880
nowadays there are a few things which

00:10:48,560 --> 00:10:53,440
are a bit forgotten so for instance

00:10:50,880 --> 00:10:55,440
if you look at k parts right k parts was

00:10:53,440 --> 00:10:57,920
meant to be in that particular box which

00:10:55,440 --> 00:11:01,760
we called you can feel and consistency

00:10:57,920 --> 00:11:05,120
it's not at all how it ended up right

00:11:01,760 --> 00:11:09,360
it has a very different structure uh

00:11:05,120 --> 00:11:12,959
k-party is in tier three uh actually

00:11:09,360 --> 00:11:16,160
uh one thing you might notice which

00:11:12,959 --> 00:11:18,399
i think got a bit lost uh in time

00:11:16,160 --> 00:11:20,160
is that we add different shapes for them

00:11:18,399 --> 00:11:23,760
right because we are looking

00:11:20,160 --> 00:11:26,959
at that core is that gui is that we jet

00:11:23,760 --> 00:11:28,240
right or some stuff which is mixed

00:11:26,959 --> 00:11:30,000
right and we would try to actually

00:11:28,240 --> 00:11:32,320
separate between the widget stuff and

00:11:30,000 --> 00:11:34,720
the gui stuff and the core stuff

00:11:32,320 --> 00:11:36,480
in different frameworks we kind of

00:11:34,720 --> 00:11:40,000
relaxed that when we

00:11:36,480 --> 00:11:42,160
arrived at the latest model

00:11:40,000 --> 00:11:44,240
and so that's the organizational matrix

00:11:42,160 --> 00:11:47,279
which is still valid today

00:11:44,240 --> 00:11:48,800
uh so it should look familiar i think to

00:11:47,279 --> 00:11:51,040
almost everyone who's been looking at

00:11:48,800 --> 00:11:53,040
the documentation of kde frameworks

00:11:51,040 --> 00:11:55,200
because if you look at the api

00:11:53,040 --> 00:11:56,000
documentation they're actually sorted

00:11:55,200 --> 00:11:58,720
right you have several

00:11:56,000 --> 00:11:59,279
tables one per tier so you get the tier

00:11:58,720 --> 00:12:03,519
one

00:11:59,279 --> 00:12:05,279
tier two tier three um and

00:12:03,519 --> 00:12:06,959
so i think those should look familiar

00:12:05,279 --> 00:12:09,120
right but then we have the types right

00:12:06,959 --> 00:12:10,639
and so we have that solution type and we

00:12:09,120 --> 00:12:11,440
have the integration cute addons and

00:12:10,639 --> 00:12:14,639
then we have

00:12:11,440 --> 00:12:16,959
functional cute events um

00:12:14,639 --> 00:12:18,399
and if you look they have dependency

00:12:16,959 --> 00:12:19,120
rules as well right because we always

00:12:18,399 --> 00:12:22,000
talk about

00:12:19,120 --> 00:12:23,680
where something which is in tier three

00:12:22,000 --> 00:12:25,600
can depend on something which isn't

00:12:23,680 --> 00:12:27,440
three right or on something which isn't

00:12:25,600 --> 00:12:29,120
tier two something in tier two can

00:12:27,440 --> 00:12:30,399
depend on tier one and something in tier

00:12:29,120 --> 00:12:32,320
one can depend on nothing

00:12:30,399 --> 00:12:33,519
else than queues and system libraries

00:12:32,320 --> 00:12:36,560
that's basically

00:12:33,519 --> 00:12:36,560
what we have at the bottom

00:12:37,120 --> 00:12:41,360
but then that was actually a bit more

00:12:39,120 --> 00:12:44,480
complex than that because if you add

00:12:41,360 --> 00:12:46,160
a solution in tier two well because it's

00:12:44,480 --> 00:12:46,880
tier two it can depend only on tier one

00:12:46,160 --> 00:12:49,839
stuff

00:12:46,880 --> 00:12:52,240
right but then it could depend only on

00:12:49,839 --> 00:12:53,440
solution tier one or on functional

00:12:52,240 --> 00:12:55,760
add-on tier one or

00:12:53,440 --> 00:12:58,240
integration add-on tier one now if i

00:12:55,760 --> 00:12:59,920
have an integration add-on tier two

00:12:58,240 --> 00:13:01,600
it's supposed to depend only on

00:12:59,920 --> 00:13:05,040
integration tier one

00:13:01,600 --> 00:13:05,440
or functional tier one right and we kind

00:13:05,040 --> 00:13:09,040
of

00:13:05,440 --> 00:13:10,079
lost that uh in the conversations right

00:13:09,040 --> 00:13:13,360
so

00:13:10,079 --> 00:13:14,000
um i think that's the reason why we we

00:13:13,360 --> 00:13:17,200
kind of

00:13:14,000 --> 00:13:20,399
uh of lost this and i'm going to

00:13:17,200 --> 00:13:22,240
eat in in a minute the reason why it's a

00:13:20,399 --> 00:13:25,920
bit unfortunate that it

00:13:22,240 --> 00:13:27,600
got lost is that in a way we were

00:13:25,920 --> 00:13:30,000
when we had discussions back then we

00:13:27,600 --> 00:13:32,160
were thinking that

00:13:30,000 --> 00:13:34,160
moving a framework in that matrix wasn't

00:13:32,160 --> 00:13:36,560
only about moving it down

00:13:34,160 --> 00:13:38,160
which is then kind of what we've been

00:13:36,560 --> 00:13:39,360
spending quite some time doing right

00:13:38,160 --> 00:13:40,880
which is cutting the

00:13:39,360 --> 00:13:43,120
dependencies at build time and then

00:13:40,880 --> 00:13:45,199
moving it down in the tiers

00:13:43,120 --> 00:13:46,959
but that was also about moving it toward

00:13:45,199 --> 00:13:48,800
the right if that makes sense for the

00:13:46,959 --> 00:13:51,920
particular framework

00:13:48,800 --> 00:13:53,760
to move toward the right because

00:13:51,920 --> 00:13:56,000
those are more about the runtime

00:13:53,760 --> 00:13:59,760
dependencies so we wanted to get that

00:13:56,000 --> 00:14:03,040
streamlined as well so

00:13:59,760 --> 00:14:04,399
here is my take on why we kind of lost

00:14:03,040 --> 00:14:07,519
the types along the way

00:14:04,399 --> 00:14:08,959
that if you look at the policies that we

00:14:07,519 --> 00:14:12,240
have around frameworks

00:14:08,959 --> 00:14:14,320
uh that's the description of the type

00:14:12,240 --> 00:14:16,560
which i i took the extract there

00:14:14,320 --> 00:14:17,519
but the contra constraints from types

00:14:16,560 --> 00:14:19,120
are the following

00:14:17,519 --> 00:14:21,760
functional queued addons cannot have

00:14:19,120 --> 00:14:23,600
runtime dependencies easy-peasy right

00:14:21,760 --> 00:14:26,800
integration cute add-ons can have an

00:14:23,600 --> 00:14:28,959
optional runtime dependency

00:14:26,800 --> 00:14:30,959
and aim at integrating with the

00:14:28,959 --> 00:14:34,320
underlying operating system

00:14:30,959 --> 00:14:37,440
slash platform it's

00:14:34,320 --> 00:14:39,279
becoming a bit odd right because it can

00:14:37,440 --> 00:14:39,680
have a runtime dependency or not right

00:14:39,279 --> 00:14:41,839
but then

00:14:39,680 --> 00:14:43,680
there's an intent and then you have

00:14:41,839 --> 00:14:45,040
solutions which have mandatory runtime

00:14:43,680 --> 00:14:47,279
dependencies because that's part of

00:14:45,040 --> 00:14:48,000
their design and where their id values

00:14:47,279 --> 00:14:50,639
come from

00:14:48,000 --> 00:14:51,839
things scalability resource sharing and

00:14:50,639 --> 00:14:55,040
resilience

00:14:51,839 --> 00:14:59,120
and so on that sounds complicated

00:14:55,040 --> 00:15:00,639
right i mean it's complicated because

00:14:59,120 --> 00:15:03,600
in particular you have one where it's a

00:15:00,639 --> 00:15:05,920
bit mixed up between the presence

00:15:03,600 --> 00:15:08,000
of real-time dependencies or not right

00:15:05,920 --> 00:15:10,240
depending on the platform and then there

00:15:08,000 --> 00:15:11,519
it's mixed between this and the intent

00:15:10,240 --> 00:15:13,360
right it's

00:15:11,519 --> 00:15:15,519
it might not have any runtime dependency

00:15:13,360 --> 00:15:17,440
but if the intent is integrating in an

00:15:15,519 --> 00:15:20,079
operating system then it ends up there

00:15:17,440 --> 00:15:21,040
so it's kind of it feels messy and for

00:15:20,079 --> 00:15:26,560
solutions it's

00:15:21,040 --> 00:15:28,320
even worse right in a way um and so

00:15:26,560 --> 00:15:29,920
because of that complexity i think

00:15:28,320 --> 00:15:33,360
that's why it never quite picked up

00:15:29,920 --> 00:15:33,839
uh in conversations and somehow it was a

00:15:33,360 --> 00:15:37,120
bit

00:15:33,839 --> 00:15:37,120
clumsy attempt right

00:15:37,600 --> 00:15:43,680
trying to draw the line between this

00:15:40,880 --> 00:15:45,360
about a portable api which abstracts

00:15:43,680 --> 00:15:48,720
some platform facility or is

00:15:45,360 --> 00:15:50,639
it an api which is more of a building

00:15:48,720 --> 00:15:53,440
block to make platforms

00:15:50,639 --> 00:15:54,160
because we're in that situation where we

00:15:53,440 --> 00:15:56,560
are both

00:15:54,160 --> 00:15:58,720
making a platform and we are making

00:15:56,560 --> 00:16:00,800
applications right so that's kind of

00:15:58,720 --> 00:16:03,360
uh that's kind of what we do we we try

00:16:00,800 --> 00:16:06,800
to do both uh all the time

00:16:03,360 --> 00:16:09,360
um and so we're trying to draw

00:16:06,800 --> 00:16:11,759
that line somehow right and never quite

00:16:09,360 --> 00:16:14,240
managed to do this

00:16:11,759 --> 00:16:15,920
so now we kind of catch up with today

00:16:14,240 --> 00:16:17,279
right the model which is in place with

00:16:15,920 --> 00:16:20,240
framework so we

00:16:17,279 --> 00:16:22,560
see that we have that two by two three

00:16:20,240 --> 00:16:24,959
by three matrix um

00:16:22,560 --> 00:16:25,759
and unfortunately we use that more like

00:16:24,959 --> 00:16:28,240
as a

00:16:25,759 --> 00:16:29,120
single vector and we kind of lost uh the

00:16:28,240 --> 00:16:31,839
rest

00:16:29,120 --> 00:16:33,360
uh in the meta info.yml though both

00:16:31,839 --> 00:16:37,120
information appear

00:16:33,360 --> 00:16:39,839
so we can do stuff with that so i

00:16:37,120 --> 00:16:41,360
went back to some of the old scripts we

00:16:39,839 --> 00:16:43,360
used to plug the dependencies and i

00:16:41,360 --> 00:16:46,560
started to do it again with the 80

00:16:43,360 --> 00:16:46,560
frameworks we have today

00:16:47,199 --> 00:16:53,360
so what we have there that each blue dot

00:16:50,480 --> 00:16:54,880
is actually one of the 80 frameworks and

00:16:53,360 --> 00:16:57,600
then we have an arrow

00:16:54,880 --> 00:16:59,440
in between two of them if one depends on

00:16:57,600 --> 00:17:02,959
the other so simpler like that

00:16:59,440 --> 00:17:06,079
for the layout i forced it so that each

00:17:02,959 --> 00:17:07,760
layer of coins maps to a tier okay so we

00:17:06,079 --> 00:17:09,839
have tier one at the bottom and we can

00:17:07,760 --> 00:17:11,439
see that there are plenty of them where

00:17:09,839 --> 00:17:13,919
no other frameworks actually depend on

00:17:11,439 --> 00:17:16,480
them um and then

00:17:13,919 --> 00:17:19,679
we go one adapter two and then one

00:17:16,480 --> 00:17:22,559
develop tier three

00:17:19,679 --> 00:17:24,319
which explains why you see some of the

00:17:22,559 --> 00:17:26,000
horizontal dependencies right because

00:17:24,319 --> 00:17:30,080
tier three can depend between

00:17:26,000 --> 00:17:34,240
each other now

00:17:30,080 --> 00:17:34,240
let's try to make this a bit more visual

00:17:35,440 --> 00:17:38,640
so red we got the functional framework

00:17:37,440 --> 00:17:40,720
there uh

00:17:38,640 --> 00:17:44,000
green that the integration and then blue

00:17:40,720 --> 00:17:47,520
that the solution frameworks okay

00:17:44,000 --> 00:17:50,480
so all rgb um

00:17:47,520 --> 00:17:52,320
and so we start to actually see them

00:17:50,480 --> 00:17:54,240
right then the obvious question is

00:17:52,320 --> 00:17:55,520
because we lost the types in the

00:17:54,240 --> 00:17:57,679
conversations

00:17:55,520 --> 00:17:59,200
is are we respecting are we actually

00:17:57,679 --> 00:18:01,039
respecting the rules we gave to

00:17:59,200 --> 00:18:03,520
ourselves

00:18:01,039 --> 00:18:05,120
which is that i cannot have for instance

00:18:03,520 --> 00:18:07,200
an integration framework which would

00:18:05,120 --> 00:18:10,400
depend on the solution framework right

00:18:07,200 --> 00:18:13,679
or functional one which depends on uh

00:18:10,400 --> 00:18:15,280
on a solution one which means you start

00:18:13,679 --> 00:18:17,600
you need to start coloring the

00:18:15,280 --> 00:18:18,640
rows as well right so you color them by

00:18:17,600 --> 00:18:21,280
the type

00:18:18,640 --> 00:18:22,080
uh of the framework having the

00:18:21,280 --> 00:18:24,480
dependency

00:18:22,080 --> 00:18:25,280
right uh and not the dependency itself

00:18:24,480 --> 00:18:27,919
so that would be

00:18:25,280 --> 00:18:29,200
important in a minute because now if we

00:18:27,919 --> 00:18:31,679
zoom in

00:18:29,200 --> 00:18:33,039
we start to see stuff like this right so

00:18:31,679 --> 00:18:34,880
my green dot there

00:18:33,039 --> 00:18:36,080
so that's a zoom from the previous one

00:18:34,880 --> 00:18:39,440
we had uh

00:18:36,080 --> 00:18:41,280
it's fine right we got two solution

00:18:39,440 --> 00:18:42,720
frameworks which are depending on an

00:18:41,280 --> 00:18:44,799
integration framework right because

00:18:42,720 --> 00:18:47,840
remember blue that the

00:18:44,799 --> 00:18:49,440
solutions uh so we see two blue

00:18:47,840 --> 00:18:51,600
rows coming so they are coming from two

00:18:49,440 --> 00:18:52,480
solutions towards an integration

00:18:51,600 --> 00:18:55,600
framework

00:18:52,480 --> 00:18:58,320
so for three by three metrics that's

00:18:55,600 --> 00:19:00,960
fine right and the red dot is okay as

00:18:58,320 --> 00:19:02,960
well right we got one solution

00:19:00,960 --> 00:19:04,720
and one integration framework depending

00:19:02,960 --> 00:19:07,520
on the functional framework

00:19:04,720 --> 00:19:09,039
we're still fine and then we got that

00:19:07,520 --> 00:19:10,880
blue dot

00:19:09,039 --> 00:19:12,400
we got so one solution framework

00:19:10,880 --> 00:19:12,720
depending on the solution framework

00:19:12,400 --> 00:19:16,160
right

00:19:12,720 --> 00:19:17,280
a blu-ray which arrives on a blue dot so

00:19:16,160 --> 00:19:19,760
we're fine

00:19:17,280 --> 00:19:21,200
and then uh we got one functional

00:19:19,760 --> 00:19:22,080
framework depending on the solution

00:19:21,200 --> 00:19:25,200
framework

00:19:22,080 --> 00:19:27,360
and the the rules we gave ourselves uh

00:19:25,200 --> 00:19:30,400
that's supposed to be forbidden right

00:19:27,360 --> 00:19:32,480
so that role here right

00:19:30,400 --> 00:19:35,200
is actually a problem right we we

00:19:32,480 --> 00:19:37,600
actually violated one of the rules

00:19:35,200 --> 00:19:40,799
we gave ourselves we gave ourselves for

00:19:37,600 --> 00:19:40,799
uh kd hammocks five

00:19:41,039 --> 00:19:44,160
all right so definitely something

00:19:42,240 --> 00:19:46,799
especially with the types right uh they

00:19:44,160 --> 00:19:48,080
are to understand uh they didn't quite

00:19:46,799 --> 00:19:49,760
play their role

00:19:48,080 --> 00:19:51,280
in the maturity system we envisioned

00:19:49,760 --> 00:19:53,840
right because we never quite

00:19:51,280 --> 00:19:56,160
pushed frameworks toward the right in

00:19:53,840 --> 00:19:58,640
that matrix which i was showing earlier

00:19:56,160 --> 00:19:59,919
it's one extra and i mentioned so that

00:19:58,640 --> 00:20:01,679
makes more things for people

00:19:59,919 --> 00:20:02,960
to think about and that's why they kind

00:20:01,679 --> 00:20:05,520
of focus on the tiers

00:20:02,960 --> 00:20:06,000
because they were easier to understand

00:20:05,520 --> 00:20:07,679
and

00:20:06,000 --> 00:20:10,000
as we see there are clearly a few

00:20:07,679 --> 00:20:10,320
mistakes in the metadata right that we

00:20:10,000 --> 00:20:13,039
have

00:20:10,320 --> 00:20:14,720
due to the above right so that as a

00:20:13,039 --> 00:20:17,440
question can we do

00:20:14,720 --> 00:20:17,440
better than this

00:20:18,320 --> 00:20:22,720
so i think the problem we have here is

00:20:20,240 --> 00:20:24,320
that it's conflating two things right

00:20:22,720 --> 00:20:27,679
it's completing

00:20:24,320 --> 00:20:29,280
system abstraction and uh and

00:20:27,679 --> 00:20:30,880
implementation in our frameworks right

00:20:29,280 --> 00:20:32,799
now um

00:20:30,880 --> 00:20:34,000
so if we go back to the original intent

00:20:32,799 --> 00:20:36,480
of the types that was to

00:20:34,000 --> 00:20:38,799
avoid conflating those two in the

00:20:36,480 --> 00:20:40,559
frameworks basically

00:20:38,799 --> 00:20:42,240
so we provide performance fractions for

00:20:40,559 --> 00:20:45,520
portable apps and so

00:20:42,240 --> 00:20:47,039
in that way kd framework is an extended

00:20:45,520 --> 00:20:48,960
queued

00:20:47,039 --> 00:20:50,400
but we also make building blocks for our

00:20:48,960 --> 00:20:53,520
own platform right

00:20:50,400 --> 00:20:54,480
so plasma on top of x11 wayland on top

00:20:53,520 --> 00:20:57,039
of some posix

00:20:54,480 --> 00:20:58,640
system right that's pretty much uh what

00:20:57,039 --> 00:21:00,480
we do and we do both and there's a

00:20:58,640 --> 00:21:03,120
tension between those two

00:21:00,480 --> 00:21:04,080
uh and that tension is not quite

00:21:03,120 --> 00:21:06,159
reserved and

00:21:04,080 --> 00:21:07,360
both are inside the kde frameworks

00:21:06,159 --> 00:21:10,000
product right and that's kind of

00:21:07,360 --> 00:21:10,000
unfortunate

00:21:10,480 --> 00:21:14,159
so the idea which was a bit discussed uh

00:21:13,440 --> 00:21:16,960
at

00:21:14,159 --> 00:21:18,559
uh at the last kd framework experience

00:21:16,960 --> 00:21:21,919
was to maybe say

00:21:18,559 --> 00:21:21,919
have a different product right

00:21:22,080 --> 00:21:26,240
and to start saying well maybe some of

00:21:24,480 --> 00:21:28,000
that stuff shouldn't be

00:21:26,240 --> 00:21:29,039
in a way shouldn't be in kde framework

00:21:28,000 --> 00:21:30,640
right that's kind of different

00:21:29,039 --> 00:21:33,440
conversation but at least shouldn't

00:21:30,640 --> 00:21:34,960
be labeled as kd frameworks right

00:21:33,440 --> 00:21:35,440
because the expectation for people is

00:21:34,960 --> 00:21:38,480
that

00:21:35,440 --> 00:21:41,520
in kd frameworks that's apis you can use

00:21:38,480 --> 00:21:43,600
as an extended qt and for some of them

00:21:41,520 --> 00:21:45,679
uh it's not quite true right if you take

00:21:43,600 --> 00:21:47,600
k wallet it's not quite true you're

00:21:45,679 --> 00:21:50,480
actually linking to a particular

00:21:47,600 --> 00:21:51,280
implementation of a password store right

00:21:50,480 --> 00:21:53,039
um

00:21:51,280 --> 00:21:54,640
and so there was this idea of saying

00:21:53,039 --> 00:21:55,919
well maybe there's some stuff which

00:21:54,640 --> 00:21:59,600
should be labeled as

00:21:55,919 --> 00:22:00,559
the plasma api right because that's the

00:21:59,600 --> 00:22:03,600
building blocks

00:22:00,559 --> 00:22:06,559
for all workspace for all

00:22:03,600 --> 00:22:07,360
food operating system if you wish which

00:22:06,559 --> 00:22:11,200
we call

00:22:07,360 --> 00:22:14,080
plasma right and

00:22:11,200 --> 00:22:16,720
so i went with by looking at the

00:22:14,080 --> 00:22:19,120
frameworks and saying okay which ones

00:22:16,720 --> 00:22:20,480
are actually in that situation right so

00:22:19,120 --> 00:22:22,880
balu is kind of based

00:22:20,480 --> 00:22:23,840
okay activities as well because k

00:22:22,880 --> 00:22:26,720
activities have

00:22:23,840 --> 00:22:27,360
no equivalent on other platforms right

00:22:26,720 --> 00:22:30,000
so it's

00:22:27,360 --> 00:22:32,320
platform specific due to this uh k

00:22:30,000 --> 00:22:36,720
global excel as well okay notify config

00:22:32,320 --> 00:22:39,600
k runner uh obviously a wallet

00:22:36,720 --> 00:22:40,240
as i mentioned plus my framework very

00:22:39,600 --> 00:22:42,880
probably

00:22:40,240 --> 00:22:43,600
right and purpose so the idea behind

00:22:42,880 --> 00:22:45,440
purpose

00:22:43,600 --> 00:22:46,960
is actually something which could be

00:22:45,440 --> 00:22:50,320
portable right but what we

00:22:46,960 --> 00:22:52,960
expose is one particular implementation

00:22:50,320 --> 00:22:53,520
it's not abstracting you for actions

00:22:52,960 --> 00:22:56,720
which would

00:22:53,520 --> 00:22:58,320
work on android for instance um

00:22:56,720 --> 00:22:59,760
and of course there are more of those

00:22:58,320 --> 00:23:01,679
libraries which are actually released

00:22:59,760 --> 00:23:03,520
with plus myself right but that's out of

00:23:01,679 --> 00:23:05,280
scope for what i'm looking at right now

00:23:03,520 --> 00:23:07,120
right i'm really focusing on kd

00:23:05,280 --> 00:23:09,840
frameworks

00:23:07,120 --> 00:23:11,520
uh so should applications use those apis

00:23:09,840 --> 00:23:14,159
yeah sure why not right

00:23:11,520 --> 00:23:14,880
uh but they have to know that when they

00:23:14,159 --> 00:23:17,520
do this

00:23:14,880 --> 00:23:18,480
they have a reduced portability right

00:23:17,520 --> 00:23:20,320
and so

00:23:18,480 --> 00:23:21,679
that if they want to do things well they

00:23:20,320 --> 00:23:25,440
need to have

00:23:21,679 --> 00:23:27,600
if devs this is plasma specific as soon

00:23:25,440 --> 00:23:29,760
as you touch one of those

00:23:27,600 --> 00:23:30,640
and so that's similar to using windows

00:23:29,760 --> 00:23:33,360
or mac os

00:23:30,640 --> 00:23:34,559
apis directly right they just happen to

00:23:33,360 --> 00:23:37,679
be

00:23:34,559 --> 00:23:40,960
apis made with cute but they're still

00:23:37,679 --> 00:23:40,960
non-portable apis

00:23:41,440 --> 00:23:45,840
so let's go back to our coloring dots

00:23:43,440 --> 00:23:48,000
right with that in mind now so

00:23:45,840 --> 00:23:49,760
let's say that instead of having the

00:23:48,000 --> 00:23:51,600
functional and

00:23:49,760 --> 00:23:53,760
integration and solutions i have only

00:23:51,600 --> 00:23:57,279
two colors okay

00:23:53,760 --> 00:24:00,640
and so i will have the ones which

00:23:57,279 --> 00:24:02,320
are not part of the plasma api

00:24:00,640 --> 00:24:03,600
as i defined it on the previous slide

00:24:02,320 --> 00:24:04,880
and the ones which are part of the

00:24:03,600 --> 00:24:07,279
plasma api okay

00:24:04,880 --> 00:24:08,000
so the red ones are part of the plasma

00:24:07,279 --> 00:24:09,520
api

00:24:08,000 --> 00:24:11,520
you will notice that none of them are

00:24:09,520 --> 00:24:14,559
actually tier one right

00:24:11,520 --> 00:24:18,000
uh which is somewhat unsurprising

00:24:14,559 --> 00:24:19,440
um because that's for our platform where

00:24:18,000 --> 00:24:21,840
you use our framework so

00:24:19,440 --> 00:24:23,840
yeah that kind of makes sense and so in

00:24:21,840 --> 00:24:25,840
that setup what would be forbidden

00:24:23,840 --> 00:24:27,919
uh what would be forbidden is a

00:24:25,840 --> 00:24:30,559
non-placement api so something

00:24:27,919 --> 00:24:32,240
gray depending on the plasma api

00:24:30,559 --> 00:24:35,279
frameworks or something in red

00:24:32,240 --> 00:24:38,240
okay so we have our time to spot

00:24:35,279 --> 00:24:39,039
that still and changing the layout

00:24:38,240 --> 00:24:42,559
actually makes

00:24:39,039 --> 00:24:45,840
that a bit better so you might see

00:24:42,559 --> 00:24:47,840
that there's something fishy going on in

00:24:45,840 --> 00:24:49,360
that particular area

00:24:47,840 --> 00:24:52,000
uh but there are still too many edges

00:24:49,360 --> 00:24:54,720
right so if we filter out

00:24:52,000 --> 00:24:56,480
the alloyed edges and keep only the

00:24:54,720 --> 00:24:58,559
wrong one right we can see that

00:24:56,480 --> 00:25:01,360
something fishy here something fishy

00:24:58,559 --> 00:25:04,480
there right uh and that iot is still not

00:25:01,360 --> 00:25:07,120
not proper so let's remove

00:25:04,480 --> 00:25:08,960
uh completely the ones which have no

00:25:07,120 --> 00:25:11,600
dependencies left right

00:25:08,960 --> 00:25:13,360
uh and that gives us the offenders right

00:25:11,600 --> 00:25:17,279
so at that point we know

00:25:13,360 --> 00:25:20,480
uh with with offending um

00:25:17,279 --> 00:25:22,240
and so there's not many left in there so

00:25:20,480 --> 00:25:24,000
it's time to name them

00:25:22,240 --> 00:25:25,600
uh so we have our short list of

00:25:24,000 --> 00:25:27,760
offenders that way okay

00:25:25,600 --> 00:25:28,720
we know that kio is dependent on k

00:25:27,760 --> 00:25:32,400
wallet so

00:25:28,720 --> 00:25:35,360
that's a variation of something non-part

00:25:32,400 --> 00:25:37,360
of as my api which depends on it

00:25:35,360 --> 00:25:40,320
and then we got x-men query and

00:25:37,360 --> 00:25:42,400
k-declarative depending on cable by axle

00:25:40,320 --> 00:25:44,080
now we need to go one level deeper to

00:25:42,400 --> 00:25:46,559
actually know what inside of the

00:25:44,080 --> 00:25:49,360
fireworks does those dependencies

00:25:46,559 --> 00:25:50,400
and what we find out is that inside of

00:25:49,360 --> 00:25:53,440
ko that's

00:25:50,400 --> 00:25:56,799
just k password server depending on

00:25:53,440 --> 00:25:59,840
okay wallet and for k declarative and k

00:25:56,799 --> 00:26:00,799
xml gui uh it's really they are

00:25:59,840 --> 00:26:03,840
depending

00:26:00,799 --> 00:26:05,440
uh on the library of k global excel and

00:26:03,840 --> 00:26:08,240
that's mainly because what

00:26:05,440 --> 00:26:09,360
they agree to deal with shortcuts right

00:26:08,240 --> 00:26:12,480
in the future what

00:26:09,360 --> 00:26:14,240
what can we do well that we have very

00:26:12,480 --> 00:26:14,559
good news from that exploration i did

00:26:14,240 --> 00:26:17,760
that

00:26:14,559 --> 00:26:19,200
not too many dependencies uh to fix so

00:26:17,760 --> 00:26:21,440
that's very good news right

00:26:19,200 --> 00:26:22,799
there's basically only three uh right

00:26:21,440 --> 00:26:25,279
now which are uh

00:26:22,799 --> 00:26:27,200
which would be out loud if we would go

00:26:25,279 --> 00:26:29,360
for a plus my api approach

00:26:27,200 --> 00:26:30,480
uh and we still want to have something

00:26:29,360 --> 00:26:33,360
uh final crane

00:26:30,480 --> 00:26:34,320
and so that's why i used ft sector for

00:26:33,360 --> 00:26:36,400
that

00:26:34,320 --> 00:26:38,320
uh because now we want to get very

00:26:36,400 --> 00:26:41,440
precise and use a scalper to

00:26:38,320 --> 00:26:44,480
cut whatever needs to be cut so for kao

00:26:41,440 --> 00:26:47,039
k wallet this dependency

00:26:44,480 --> 00:26:49,360
that's basically k password server as i

00:26:47,039 --> 00:26:52,320
said which uses

00:26:49,360 --> 00:26:54,000
just stuff to check a wallet right uh

00:26:52,320 --> 00:26:56,240
open it

00:26:54,000 --> 00:26:57,039
and then check if a key exists or not

00:26:56,240 --> 00:26:59,440
right that's

00:26:57,039 --> 00:27:01,679
basically the gist of it right easy

00:26:59,440 --> 00:27:05,440
solution right we're we're talking about

00:27:01,679 --> 00:27:07,440
uh your keychain to eventually moving

00:27:05,440 --> 00:27:10,000
inside kd frameworks

00:27:07,440 --> 00:27:11,760
keychain is a platform abstraction right

00:27:10,000 --> 00:27:12,400
so it can talk to k-1 that it can talk

00:27:11,760 --> 00:27:16,320
to you

00:27:12,400 --> 00:27:19,520
um you'll be tearing on mac and

00:27:16,320 --> 00:27:20,399
the equivalent on windows right so just

00:27:19,520 --> 00:27:24,000
put okay

00:27:20,399 --> 00:27:27,919
okay password server to your keychain

00:27:24,000 --> 00:27:28,559
so that one is easy for k global excel

00:27:27,919 --> 00:27:30,480
so

00:27:28,559 --> 00:27:32,399
there's a few more which are used right

00:27:30,480 --> 00:27:33,440
so we see that the default shortcut and

00:27:32,399 --> 00:27:35,440
the

00:27:33,440 --> 00:27:36,720
chocolate bar keys and getting the

00:27:35,440 --> 00:27:38,960
chocolate for an action

00:27:36,720 --> 00:27:40,640
and to know if a global chocolate is

00:27:38,960 --> 00:27:44,640
available right all of that

00:27:40,640 --> 00:27:49,840
is uh is used uh we also get

00:27:44,640 --> 00:27:49,840
things about the shortcut info right

00:27:50,640 --> 00:27:54,320
and the dependencies so where it gets

00:27:52,799 --> 00:27:56,000
interesting though is looking at where

00:27:54,320 --> 00:27:56,960
the dependencies come from right so they

00:27:56,000 --> 00:27:59,200
come from

00:27:56,960 --> 00:28:00,720
a key sequence widget action collection

00:27:59,200 --> 00:28:03,200
shortcut widget

00:28:00,720 --> 00:28:05,440
shortcuts editor shortcuts editor item

00:28:03,200 --> 00:28:07,440
and kxmg factory

00:28:05,440 --> 00:28:09,600
the use case is when you start sorting

00:28:07,440 --> 00:28:11,840
them uh by looking at the code in

00:28:09,600 --> 00:28:13,679
in those and how they use the

00:28:11,840 --> 00:28:16,320
dependencies you see just before

00:28:13,679 --> 00:28:17,039
is basically setting getting the color

00:28:16,320 --> 00:28:19,440
shortcuts

00:28:17,039 --> 00:28:20,080
checking conflicts ending the shortcut

00:28:19,440 --> 00:28:23,360
settings

00:28:20,080 --> 00:28:25,120
and reacting to a global shortcut which

00:28:23,360 --> 00:28:27,520
changes

00:28:25,120 --> 00:28:28,720
we have potential solutions for that so

00:28:27,520 --> 00:28:31,039
it's already

00:28:28,720 --> 00:28:31,919
inside of excellent gui the work is

00:28:31,039 --> 00:28:34,559
already done

00:28:31,919 --> 00:28:34,960
to if depth all of that right it already

00:28:34,559 --> 00:28:39,600
has

00:28:34,960 --> 00:28:42,640
an app global axle if dev

00:28:39,600 --> 00:28:44,159
this is a good starting point okay now

00:28:42,640 --> 00:28:46,640
the downside to that is that

00:28:44,159 --> 00:28:47,279
we would have to decide at compile time

00:28:46,640 --> 00:28:49,679
uh

00:28:47,279 --> 00:28:51,360
so i think what it misses is a strategy

00:28:49,679 --> 00:28:52,559
similar to what we have for okay massage

00:28:51,360 --> 00:28:55,279
dialogue in france

00:28:52,559 --> 00:28:55,840
right uh which has which is to have some

00:28:55,279 --> 00:28:59,520
sort of

00:28:55,840 --> 00:29:01,200
uh facade to abstract the way the users

00:28:59,520 --> 00:29:03,120
uh and then to have framework

00:29:01,200 --> 00:29:04,559
integration right so that would be our

00:29:03,120 --> 00:29:06,880
plugin interface and then

00:29:04,559 --> 00:29:07,600
from the integration could deliver the

00:29:06,880 --> 00:29:09,520
plugin

00:29:07,600 --> 00:29:11,279
like it does already for a few classes

00:29:09,520 --> 00:29:14,559
inside of frameworks

00:29:11,279 --> 00:29:16,720
and so this way we would have

00:29:14,559 --> 00:29:18,960
we would have cut the dependency right

00:29:16,720 --> 00:29:22,159
we're still having

00:29:18,960 --> 00:29:23,840
all the features if both if

00:29:22,159 --> 00:29:25,679
both frameworks are installed plus the

00:29:23,840 --> 00:29:27,039
framework integration

00:29:25,679 --> 00:29:29,039
so in that case that becomes a

00:29:27,039 --> 00:29:30,480
deployment question which is where we

00:29:29,039 --> 00:29:33,039
want to be at

00:29:30,480 --> 00:29:33,520
okay declarative to award a global excel

00:29:33,039 --> 00:29:36,399
that

00:29:33,520 --> 00:29:37,520
mainly comes from similar things uh

00:29:36,399 --> 00:29:40,399
inside of

00:29:37,520 --> 00:29:41,120
k quick controls private plugins and

00:29:40,399 --> 00:29:45,600
same thing

00:29:41,120 --> 00:29:48,320
it's because it has something

00:29:45,600 --> 00:29:49,919
which is called a key sequence item and

00:29:48,320 --> 00:29:51,039
inside there there's a key sequence

00:29:49,919 --> 00:29:52,880
helper

00:29:51,039 --> 00:29:55,039
the only use case there is checking for

00:29:52,880 --> 00:29:57,039
conflict with goldberg shortcuts right

00:29:55,039 --> 00:29:59,679
uh that code is pretty much duplicated

00:29:57,039 --> 00:30:02,000
from xml query by the way

00:29:59,679 --> 00:30:03,520
good news is relatively self-contained

00:30:02,000 --> 00:30:06,159
though uh potential

00:30:03,520 --> 00:30:07,200
potential solution for that one it's a

00:30:06,159 --> 00:30:09,679
very simple thing

00:30:07,200 --> 00:30:10,799
maybe just have a deeper score for that

00:30:09,679 --> 00:30:12,399
one right

00:30:10,799 --> 00:30:14,480
it's just about checking conflict right

00:30:12,399 --> 00:30:17,279
to just question answer

00:30:14,480 --> 00:30:19,039
uh devas could do the job in that case

00:30:17,279 --> 00:30:19,760
uh that seems to be a common use case

00:30:19,039 --> 00:30:22,880
though

00:30:19,760 --> 00:30:24,880
um so if we go for that solution instead

00:30:22,880 --> 00:30:29,039
of the facade in the declarative

00:30:24,880 --> 00:30:29,039
we should probably remove the facade

00:30:31,120 --> 00:30:36,720
we should probably remove the the

00:30:34,799 --> 00:30:39,360
particular check from the facade on the

00:30:36,720 --> 00:30:42,480
xml quick side

00:30:39,360 --> 00:30:42,799
all right right now uh so obviously i

00:30:42,480 --> 00:30:45,440
mean

00:30:42,799 --> 00:30:47,279
uh if there's agreement on that uh then

00:30:45,440 --> 00:30:50,559
tasks should be added in the

00:30:47,279 --> 00:30:52,559
uh kd framework six workboard and that

00:30:50,559 --> 00:30:54,080
would be like one task pair unwanted

00:30:52,559 --> 00:30:57,200
dependency to solve

00:30:54,080 --> 00:30:58,799
uh i didn't go around doing this because

00:30:57,200 --> 00:31:01,120
as i said that's kind of food for

00:30:58,799 --> 00:31:03,039
thought for the upcoming buff

00:31:01,120 --> 00:31:04,720
so we need to settle on the solutions we

00:31:03,039 --> 00:31:07,200
want to pick for each of the cases

00:31:04,720 --> 00:31:08,240
first uh and then we just have to

00:31:07,200 --> 00:31:09,600
implement the title

00:31:08,240 --> 00:31:11,600
again the good news is that there are

00:31:09,600 --> 00:31:14,159
not many of them right uh

00:31:11,600 --> 00:31:14,799
and so then what profit right well not

00:31:14,159 --> 00:31:16,720
quite

00:31:14,799 --> 00:31:18,559
because what i cover there is basically

00:31:16,720 --> 00:31:23,440
just the technical bits

00:31:18,559 --> 00:31:23,440
the real challenge is after that in fact

00:31:23,760 --> 00:31:29,360
um because then that means that

00:31:27,200 --> 00:31:31,120
we solved as i said with a scalper just

00:31:29,360 --> 00:31:33,679
a few of those right

00:31:31,120 --> 00:31:35,039
but then what happens about that big

00:31:33,679 --> 00:31:38,080
drift that i'm

00:31:35,039 --> 00:31:41,679
drawing between frameworks and

00:31:38,080 --> 00:31:43,440
plasma api uh

00:31:41,679 --> 00:31:45,279
that's the open question do we move the

00:31:43,440 --> 00:31:47,840
plasma api frameworks out of kde

00:31:45,279 --> 00:31:47,840
frameworks

00:31:48,960 --> 00:31:53,600
and that would have community and

00:31:51,600 --> 00:31:55,760
release management implications right

00:31:53,600 --> 00:31:57,440
where do they go should they be in a

00:31:55,760 --> 00:31:58,159
separate product release at the same

00:31:57,440 --> 00:32:00,640
time

00:31:58,159 --> 00:32:01,919
when kd frameworks my personal opinion

00:32:00,640 --> 00:32:05,039
that they should probably be

00:32:01,919 --> 00:32:06,880
within plasma because there's value to

00:32:05,039 --> 00:32:07,679
release them in sync with plasma

00:32:06,880 --> 00:32:09,840
releases

00:32:07,679 --> 00:32:10,720
i mean there's a reason for instance why

00:32:09,840 --> 00:32:13,519
we've seen

00:32:10,720 --> 00:32:15,600
the kylem server bits move out of

00:32:13,519 --> 00:32:18,159
frameworks to go in plasma

00:32:15,600 --> 00:32:19,600
it's just a lot of headaches when you

00:32:18,159 --> 00:32:22,480
have stuff which is released at

00:32:19,600 --> 00:32:25,679
different times where you have only one

00:32:22,480 --> 00:32:26,320
you already have one primary consumer of

00:32:25,679 --> 00:32:30,000
them or

00:32:26,320 --> 00:32:31,600
implementer of them obviously that means

00:32:30,000 --> 00:32:32,799
that the plasma team would have to

00:32:31,600 --> 00:32:35,519
commit to some

00:32:32,799 --> 00:32:36,559
api or abi guarantees similar to the kd

00:32:35,519 --> 00:32:39,039
frameworks one

00:32:36,559 --> 00:32:41,200
for those parts of plasma right for the

00:32:39,039 --> 00:32:43,519
plasma api framework

00:32:41,200 --> 00:32:44,880
and of course that also has marketing

00:32:43,519 --> 00:32:46,320
implications right because

00:32:44,880 --> 00:32:48,000
i'm not quite sure how we would

00:32:46,320 --> 00:32:50,960
communicate uh about this

00:32:48,000 --> 00:32:52,559
more widely uh and obviously we don't

00:32:50,960 --> 00:32:53,519
want to come out with the same message

00:32:52,559 --> 00:32:55,760
if it's

00:32:53,519 --> 00:32:58,320
uh all the kd frameworks recycle or if

00:32:55,760 --> 00:33:01,919
the on the plasma recycle or

00:32:58,320 --> 00:33:03,519
something else right all right that's

00:33:01,919 --> 00:33:06,960
everything i had in store for

00:33:03,519 --> 00:33:09,360
uh tonight we still have a few minutes

00:33:06,960 --> 00:33:12,880
but not many uh if you have any

00:33:09,360 --> 00:33:12,880
questions i will try to answer

00:33:13,360 --> 00:33:21,200
uh so the first question is

00:33:16,559 --> 00:33:25,840
from david e when is the relevant both

00:33:21,200 --> 00:33:25,840
uh that should be on monday morning

00:33:26,320 --> 00:33:30,159
monday morning okay i hope he's

00:33:28,559 --> 00:33:35,200
satisfied by the answer

00:33:30,159 --> 00:33:39,279
uh as far as i think that's nine utc

00:33:35,200 --> 00:33:41,840
then he's not satisfied with the answer

00:33:39,279 --> 00:33:43,440
so i just wanted to upload the great

00:33:41,840 --> 00:33:46,960
work and obviously the

00:33:43,440 --> 00:33:47,440
the great talk uh all of the questions

00:33:46,960 --> 00:33:50,080
that

00:33:47,440 --> 00:33:52,159
popped up during the talk were answered

00:33:50,080 --> 00:33:54,559
by the following slides so

00:33:52,159 --> 00:33:56,080
i kind of deleted them all because they

00:33:54,559 --> 00:33:59,440
were already answered

00:33:56,080 --> 00:34:01,760
perfect transitions then yeah exactly so

00:33:59,440 --> 00:34:02,559
this was i guess the most professional

00:34:01,760 --> 00:34:05,200
talk day

00:34:02,559 --> 00:34:06,159
that we had so far no questions because

00:34:05,200 --> 00:34:10,320
you answered

00:34:06,159 --> 00:34:10,320
them all please do say off

00:34:11,520 --> 00:34:16,960
uh okay and it seems that nothing else

00:34:14,960 --> 00:34:20,320
is happening so

00:34:16,960 --> 00:34:24,560
thank you again and uh everybody gave

00:34:20,320 --> 00:34:24,560
a warm applause to kevin in the chat

00:34:24,720 --> 00:34:36,240
thank you bye see you around

00:34:34,159 --> 00:34:36,240

YouTube URL: https://www.youtube.com/watch?v=la_cAFCk6Zw


