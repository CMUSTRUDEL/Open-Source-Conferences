Title: Akademy 2021 - Wayland for Qt Application Developers
Publication date: 2021-06-29
Playlist: Akademy 2021
Description: 
	By David Edmundson
When talking about Wayland a lot of focus is put on the compositor and the shell.
For 40 minutes we will completely ban uttering the terms Kwin or Plasma and focus purely on the application side.
This talk explores what wayland means for Qt application developers. Why should developer need to care? what do they need to care about?
This talk explores some common traps and pitfalls we've seen in client applications, and how to debug and fix remaining issues and how to address any porting that may be needed.
We also look into KDE's existing contributions to QtWayland's client QPA and how you can get involved.
Captions: 
	00:00:01,110 --> 00:00:08,589
[Music]

00:00:15,120 --> 00:00:19,119
so

00:00:15,519 --> 00:00:22,720
the next talk is uh properly brave one

00:00:19,119 --> 00:00:24,240
it mentions valent and it's going to be

00:00:22,720 --> 00:00:26,560
given by a man

00:00:24,240 --> 00:00:28,240
who needs no introduction because you've

00:00:26,560 --> 00:00:30,240
been watching his mug

00:00:28,240 --> 00:00:32,640
for the whole day long in this afternoon

00:00:30,240 --> 00:00:35,920
session as the session chair

00:00:32,640 --> 00:00:38,320
so go on david

00:00:35,920 --> 00:00:39,520
thank you i've even said my name is

00:00:38,320 --> 00:00:42,559
david edmondson

00:00:39,520 --> 00:00:45,280
i've been at kde there for over 15 years

00:00:42,559 --> 00:00:46,160
plasmid there for six seven six or seven

00:00:45,280 --> 00:00:48,079
of them

00:00:46,160 --> 00:00:50,160
and i've been a wailing dev for what

00:00:48,079 --> 00:00:53,280
seems like forever

00:00:50,160 --> 00:00:54,800
so about this talk

00:00:53,280 --> 00:00:56,640
what do i want to do to make it

00:00:54,800 --> 00:00:58,320
different from all the other talks

00:00:56,640 --> 00:00:59,920
when we talk about weyland there's

00:00:58,320 --> 00:01:02,239
always a lot of focus

00:00:59,920 --> 00:01:03,680
on the window manager or your shells

00:01:02,239 --> 00:01:05,199
because that's where a lot of the

00:01:03,680 --> 00:01:07,760
development work needs to happen

00:01:05,199 --> 00:01:10,159
but we tend to neglect the applications

00:01:07,760 --> 00:01:12,240
which still have quite a lot to do

00:01:10,159 --> 00:01:13,600
so for the duration of this talk we're

00:01:12,240 --> 00:01:14,320
not going to make any invention of

00:01:13,600 --> 00:01:16,000
plasma

00:01:14,320 --> 00:01:17,680
we're not going to make it many mention

00:01:16,000 --> 00:01:19,920
of quinn there'll be no

00:01:17,680 --> 00:01:21,360
more mention of any other desktops i

00:01:19,920 --> 00:01:22,560
won't marty a name already have a

00:01:21,360 --> 00:01:24,240
compositor

00:01:22,560 --> 00:01:25,920
those were good jokes don't try to sway

00:01:24,240 --> 00:01:28,159
me otherwise

00:01:25,920 --> 00:01:30,000
and we're going to focus purely on

00:01:28,159 --> 00:01:33,439
applications

00:01:30,000 --> 00:01:36,000
and wayland of course so

00:01:33,439 --> 00:01:37,920
as an application developer why do you

00:01:36,000 --> 00:01:40,240
need to care about weyland

00:01:37,920 --> 00:01:42,320
well it's one of the biggest transitions

00:01:40,240 --> 00:01:44,880
we faced as a linux desktop

00:01:42,320 --> 00:01:46,320
it's a lot of changes in a very very

00:01:44,880 --> 00:01:48,960
core fundamental area

00:01:46,320 --> 00:01:49,439
that all of the applications are sharing

00:01:48,960 --> 00:01:51,360
so

00:01:49,439 --> 00:01:52,560
i've got two sets of slides yes an

00:01:51,360 --> 00:01:56,799
encouraging one

00:01:52,560 --> 00:01:59,759
and a more carrot and stick approach

00:01:56,799 --> 00:02:00,479
so weyland does have a load of really

00:01:59,759 --> 00:02:02,399
cool features

00:02:00,479 --> 00:02:04,000
that you can use as an application

00:02:02,399 --> 00:02:06,719
developer you get

00:02:04,000 --> 00:02:08,800
far more detailed input events and lots

00:02:06,719 --> 00:02:10,959
of different noises that makes it input

00:02:08,800 --> 00:02:12,879
so much better than what we had on x11

00:02:10,959 --> 00:02:14,800
even with xo2

00:02:12,879 --> 00:02:16,720
we have considerably faster rendering

00:02:14,800 --> 00:02:18,400
there's a lot less happening to get from

00:02:16,720 --> 00:02:20,080
you making a change in your application

00:02:18,400 --> 00:02:22,800
to arriving on the screen

00:02:20,080 --> 00:02:24,000
get faster frame rates and get reduced

00:02:22,800 --> 00:02:25,920
power consumption

00:02:24,000 --> 00:02:27,440
firefox is doing some incredibly

00:02:25,920 --> 00:02:29,040
exciting things

00:02:27,440 --> 00:02:31,040
in the upcoming releases where when a

00:02:29,040 --> 00:02:33,360
user scrolls all it does is

00:02:31,040 --> 00:02:35,440
redraw a scroll bar and then send some

00:02:33,360 --> 00:02:37,200
magic metadata to your composite to do

00:02:35,440 --> 00:02:39,840
other all the other work

00:02:37,200 --> 00:02:40,400
it can do some very clever things all

00:02:39,840 --> 00:02:43,599
around

00:02:40,400 --> 00:02:46,400
is going to be amazing

00:02:43,599 --> 00:02:47,920
but if you're a calculator app if you're

00:02:46,400 --> 00:02:50,160
writing kcalc

00:02:47,920 --> 00:02:51,599
realistically i'm not gonna lie none of

00:02:50,160 --> 00:02:53,040
this is going to matter there's not

00:02:51,599 --> 00:02:54,319
going to be anything in wayland that

00:02:53,040 --> 00:02:57,360
makes your application

00:02:54,319 --> 00:02:58,319
much better if it's a boring app no

00:02:57,360 --> 00:03:00,319
offense okay help

00:02:58,319 --> 00:03:02,159
if it's a boiling out it's a boiling app

00:03:00,319 --> 00:03:03,680
it doesn't really gain a lot

00:03:02,159 --> 00:03:05,840
but there is another side to your

00:03:03,680 --> 00:03:08,239
railing side

00:03:05,840 --> 00:03:10,959
the more negative way of encouraging

00:03:08,239 --> 00:03:13,200
people to care about weyland

00:03:10,959 --> 00:03:14,400
you don't have a choice or certainly you

00:03:13,200 --> 00:03:16,840
won't have a choice

00:03:14,400 --> 00:03:18,239
right now uh we're not on railing by

00:03:16,840 --> 00:03:20,080
default

00:03:18,239 --> 00:03:21,920
and for those that are they're still at

00:03:20,080 --> 00:03:24,319
backwards compatibility level

00:03:21,920 --> 00:03:25,120
of x-rayland where x clients can still

00:03:24,319 --> 00:03:27,680
run

00:03:25,120 --> 00:03:28,879
but there's a few things to know

00:03:27,680 --> 00:03:30,400
x-rayland when it's

00:03:28,879 --> 00:03:32,879
which is where a railing compositor

00:03:30,400 --> 00:03:35,680
still supports backwards compatibility

00:03:32,879 --> 00:03:38,879
it's not an exact one-to-one match

00:03:35,680 --> 00:03:40,879
partly deliberately for security reasons

00:03:38,879 --> 00:03:42,480
you still can't just sniff data from

00:03:40,879 --> 00:03:45,680
other applications it's not

00:03:42,480 --> 00:03:46,400
quite the same as being an extra

00:03:45,680 --> 00:03:49,040
application

00:03:46,400 --> 00:03:50,400
on x and these other nuances such as

00:03:49,040 --> 00:03:53,920
scaling where things behave

00:03:50,400 --> 00:03:55,680
slightly differently we're also finding

00:03:53,920 --> 00:03:56,799
that there's several places where

00:03:55,680 --> 00:03:59,200
people are switching to island by

00:03:56,799 --> 00:04:01,599
default even if we're not in plasma

00:03:59,200 --> 00:04:02,879
known as switch in a lot of places there

00:04:01,599 --> 00:04:04,640
are people running

00:04:02,879 --> 00:04:06,400
railing compositors which don't have any

00:04:04,640 --> 00:04:09,040
x-ray link support

00:04:06,400 --> 00:04:09,840
and as people try and phase out x from

00:04:09,040 --> 00:04:12,080
their systems

00:04:09,840 --> 00:04:13,280
at some point we are going to see

00:04:12,080 --> 00:04:16,239
desktops where

00:04:13,280 --> 00:04:19,440
land isn't an option so at some point

00:04:16,239 --> 00:04:19,440
you're going to have to care

00:04:20,320 --> 00:04:25,120
and this is a genuine code snippet from

00:04:23,199 --> 00:04:27,120
a kd application i won't say what

00:04:25,120 --> 00:04:28,160
i'm not sure if you can read it but the

00:04:27,120 --> 00:04:30,560
code says

00:04:28,160 --> 00:04:32,560
if a platform is weyland show a message

00:04:30,560 --> 00:04:35,759
box and quit

00:04:32,560 --> 00:04:37,280
and i can understand why i've done that

00:04:35,759 --> 00:04:39,040
is to try and encourage people to use

00:04:37,280 --> 00:04:42,720
that training where right now

00:04:39,040 --> 00:04:44,720
our performance is better it might get a

00:04:42,720 --> 00:04:46,320
better user experience

00:04:44,720 --> 00:04:48,080
particularly does that happen to crash

00:04:46,320 --> 00:04:50,240
anyway on weyland

00:04:48,080 --> 00:04:51,360
so i can see why you want to encourage

00:04:50,240 --> 00:04:54,880
users that

00:04:51,360 --> 00:04:56,800
makes sense but this code snippet is

00:04:54,880 --> 00:05:00,400
also blocking any developer

00:04:56,800 --> 00:05:01,759
from even trying and at some point

00:05:00,400 --> 00:05:03,680
you're going to find ourselves five

00:05:01,759 --> 00:05:06,320
years down the line

00:05:03,680 --> 00:05:08,320
suddenly forced into running on weyland

00:05:06,320 --> 00:05:11,680
and then you'll be surprised when your

00:05:08,320 --> 00:05:13,120
functionality is missing and then the

00:05:11,680 --> 00:05:13,759
users are going to be forced into a bad

00:05:13,120 --> 00:05:16,800
situation

00:05:13,759 --> 00:05:18,240
it's important that we start early and

00:05:16,800 --> 00:05:19,600
all your developers should be doing

00:05:18,240 --> 00:05:21,039
things on weyland and at least

00:05:19,600 --> 00:05:23,280
supporting and elevating

00:05:21,039 --> 00:05:25,440
any issues they have and making a big

00:05:23,280 --> 00:05:27,520
faucet if something is missing

00:05:25,440 --> 00:05:28,800
so when it comes to this code i'm not

00:05:27,520 --> 00:05:31,840
angry but

00:05:28,800 --> 00:05:31,840
i am disappointed

00:05:33,520 --> 00:05:37,120
so what's the current state of acute

00:05:36,160 --> 00:05:40,320
application

00:05:37,120 --> 00:05:43,280
if you run on weyland because in theory

00:05:40,320 --> 00:05:44,639
qt abstracts everything so it should

00:05:43,280 --> 00:05:48,800
just work

00:05:44,639 --> 00:05:50,639
just like kate on windows right

00:05:48,800 --> 00:05:52,240
well the difference between theory and

00:05:50,639 --> 00:05:55,280
practice is in theory

00:05:52,240 --> 00:05:58,400
they're both the same thing in practice

00:05:55,280 --> 00:06:01,120
there are some nuances and

00:05:58,400 --> 00:06:02,880
that cate example is quite good in favor

00:06:01,120 --> 00:06:04,880
it should work but if you look through

00:06:02,880 --> 00:06:06,960
the repo you can see it's christophe

00:06:04,880 --> 00:06:08,960
coleman making a bunch of changes which

00:06:06,960 --> 00:06:10,960
are windows specific because

00:06:08,960 --> 00:06:12,560
things were found even though the kd

00:06:10,960 --> 00:06:14,880
libraries and acute framework

00:06:12,560 --> 00:06:16,080
should have abstracted it it's also

00:06:14,880 --> 00:06:18,240
interesting to note it's

00:06:16,080 --> 00:06:20,080
the cape developers making those changes

00:06:18,240 --> 00:06:21,759
steve baum is not making those changes

00:06:20,080 --> 00:06:24,479
microsoft's not doing the work

00:06:21,759 --> 00:06:26,080
he's sitting about in a massive mansion

00:06:24,479 --> 00:06:28,080
and that's true for your whale import

00:06:26,080 --> 00:06:29,600
it's very similar to porting to windows

00:06:28,080 --> 00:06:31,520
it's a whole new platform

00:06:29,600 --> 00:06:32,880
and you can't expect all your whaling

00:06:31,520 --> 00:06:35,120
developers to do your work

00:06:32,880 --> 00:06:37,039
i'll be launching about in a massive

00:06:35,120 --> 00:06:39,280
mansion

00:06:37,039 --> 00:06:39,280
so

00:06:40,080 --> 00:06:44,160
let's say you try your app on weyland

00:06:42,639 --> 00:06:46,560
and there's a bug

00:06:44,160 --> 00:06:47,840
who is that thought there's actually a

00:06:46,560 --> 00:06:49,680
couple of different answers

00:06:47,840 --> 00:06:51,120
because there's lots of components in

00:06:49,680 --> 00:06:53,440
play

00:06:51,120 --> 00:06:54,160
there are deliberate behaving behavioral

00:06:53,440 --> 00:06:55,919
differences

00:06:54,160 --> 00:06:57,759
where we're not trying to make things

00:06:55,919 --> 00:07:00,840
behave exactly as the rnx

00:06:57,759 --> 00:07:02,240
and it will require applications to

00:07:00,840 --> 00:07:04,160
adjust

00:07:02,240 --> 00:07:05,599
there are also potentially you've got

00:07:04,160 --> 00:07:07,280
bugs in your application

00:07:05,599 --> 00:07:10,400
just because something happened to work

00:07:07,280 --> 00:07:12,479
on x11 and we should be

00:07:10,400 --> 00:07:15,440
abstracting it we might be surfacing

00:07:12,479 --> 00:07:17,280
some bugs that already exist

00:07:15,440 --> 00:07:18,960
we also have a completely new plug-in

00:07:17,280 --> 00:07:20,960
part that we're going through in queues

00:07:18,960 --> 00:07:23,440
it's a very different code path

00:07:20,960 --> 00:07:24,720
so we might find we're hitting some bugs

00:07:23,440 --> 00:07:27,120
in cute rayland

00:07:24,720 --> 00:07:28,240
and the cute railing has a lot of code

00:07:27,120 --> 00:07:31,919
and

00:07:28,240 --> 00:07:35,039
it may have um button it

00:07:31,919 --> 00:07:36,880
it could be bugs in the compositor and

00:07:35,039 --> 00:07:37,759
generally this is the first place to get

00:07:36,880 --> 00:07:39,919
blame

00:07:37,759 --> 00:07:41,680
but for most things that are happening

00:07:39,919 --> 00:07:42,639
inside a typical standard cute

00:07:41,680 --> 00:07:44,800
application

00:07:42,639 --> 00:07:45,840
it's not where a bug is going to be it

00:07:44,800 --> 00:07:48,319
might be

00:07:45,840 --> 00:07:50,720
but it shouldn't be your only point of

00:07:48,319 --> 00:07:52,240
complaint

00:07:50,720 --> 00:07:54,160
you might also find we're missing

00:07:52,240 --> 00:07:56,479
specifications

00:07:54,160 --> 00:07:58,479
weyland is behaviorally different from

00:07:56,479 --> 00:07:59,360
from x11 some things behave differently

00:07:58,479 --> 00:08:01,280
and often

00:07:59,360 --> 00:08:03,120
something that could have been done in x

00:08:01,280 --> 00:08:05,919
through a hack we're trying to do

00:08:03,120 --> 00:08:07,680
in neat very semantic ways in weyland

00:08:05,919 --> 00:08:09,360
but because of that we need to come up

00:08:07,680 --> 00:08:10,960
with a new semantic way for each of

00:08:09,360 --> 00:08:13,120
these individual use cases

00:08:10,960 --> 00:08:15,440
so you may find there's specifications

00:08:13,120 --> 00:08:16,879
missing

00:08:15,440 --> 00:08:18,560
and then we have to go all the way up to

00:08:16,879 --> 00:08:20,080
upstream because it's important that we

00:08:18,560 --> 00:08:22,080
get things standardized

00:08:20,080 --> 00:08:24,560
so that even though we've even when we

00:08:22,080 --> 00:08:27,360
fix our application it doesn't just work

00:08:24,560 --> 00:08:29,919
on kde but it also works on these other

00:08:27,360 --> 00:08:29,919
desktops

00:08:30,879 --> 00:08:34,479
so let's go over some of the deliberate

00:08:32,719 --> 00:08:35,120
railing behavioral differences and i'm

00:08:34,479 --> 00:08:38,240
sure

00:08:35,120 --> 00:08:41,120
you may have heard all of these already

00:08:38,240 --> 00:08:42,240
you cannot make a live x 11 call as a

00:08:41,120 --> 00:08:45,040
whaling client

00:08:42,240 --> 00:08:46,000
this probably goes without saying but it

00:08:45,040 --> 00:08:48,240
does happen we

00:08:46,000 --> 00:08:49,760
see codepaths where we hit it it's one

00:08:48,240 --> 00:08:51,920
of the easiest things to search for

00:08:49,760 --> 00:08:52,800
if you're doing something with qx with

00:08:51,920 --> 00:08:56,399
x11

00:08:52,800 --> 00:09:00,399
or qx11x display or connection

00:08:56,399 --> 00:09:02,720
it's obviously going to fail in general

00:09:00,399 --> 00:09:03,600
most cases where we hit that we have

00:09:02,720 --> 00:09:05,120
found that

00:09:03,600 --> 00:09:06,959
an abstraction layer has already been

00:09:05,120 --> 00:09:08,560
written in frameworks i'm not going to

00:09:06,959 --> 00:09:10,160
say that's true for everything you could

00:09:08,560 --> 00:09:12,399
possibly do

00:09:10,160 --> 00:09:13,600
but in generally general we we're trying

00:09:12,399 --> 00:09:15,760
in kde to

00:09:13,600 --> 00:09:19,279
introduce these abstraction layers and

00:09:15,760 --> 00:09:21,680
obviously cute is an abstraction there

00:09:19,279 --> 00:09:23,760
another big behavioral differences is

00:09:21,680 --> 00:09:25,760
you can't eavesdrop events

00:09:23,760 --> 00:09:28,240
whaling clients only get input when they

00:09:25,760 --> 00:09:30,320
have focus so if you don't have focus

00:09:28,240 --> 00:09:31,440
and you want to find out when a user

00:09:30,320 --> 00:09:35,519
clicks a mouse

00:09:31,440 --> 00:09:36,720
or presses shift xq you can't you don't

00:09:35,519 --> 00:09:38,560
have those events

00:09:36,720 --> 00:09:41,680
and this important mention this also

00:09:38,560 --> 00:09:45,040
happens if you're running inside x-men

00:09:41,680 --> 00:09:46,160
so if you're doing your own by hand idle

00:09:45,040 --> 00:09:48,720
detection and your own

00:09:46,160 --> 00:09:51,200
by-hand global shortcuts it's not going

00:09:48,720 --> 00:09:53,360
to work by design

00:09:51,200 --> 00:09:55,120
but if you use abstraction layers okay

00:09:53,360 --> 00:09:56,800
idle time okay global excel

00:09:55,120 --> 00:09:58,959
it'll just work out the box it'll just

00:09:56,800 --> 00:10:02,080
continue to work exactly as before

00:09:58,959 --> 00:10:02,080
which is amazing

00:10:02,480 --> 00:10:06,000
you can't grab other window content and

00:10:04,880 --> 00:10:08,399
this is deliberate

00:10:06,000 --> 00:10:09,440
if you call q window grab window it'll

00:10:08,399 --> 00:10:12,640
just return

00:10:09,440 --> 00:10:14,720
an empty image the best thing to do is

00:10:12,640 --> 00:10:17,040
replace it with a device request to

00:10:14,720 --> 00:10:19,200
execute desktop portal i miss is true if

00:10:17,040 --> 00:10:20,880
you want to find out the color of an

00:10:19,200 --> 00:10:23,279
individual pixel for like one of those

00:10:20,880 --> 00:10:25,680
color drop icons

00:10:23,279 --> 00:10:28,480
one thing we're seeing with weyland is

00:10:25,680 --> 00:10:29,200
not everything that was done in x11 has

00:10:28,480 --> 00:10:31,440
a direct

00:10:29,200 --> 00:10:33,680
equivalent in weyland there is a direct

00:10:31,440 --> 00:10:35,120
equivalent but it's not necessarily

00:10:33,680 --> 00:10:37,839
just because of the next level which

00:10:35,120 --> 00:10:39,120
happened to be the display communication

00:10:37,839 --> 00:10:39,839
we don't have to do it in interspace

00:10:39,120 --> 00:10:40,959
communication

00:10:39,839 --> 00:10:43,040
when you're forced into wayland

00:10:40,959 --> 00:10:44,399
sometimes we're doing things using our

00:10:43,040 --> 00:10:47,120
technology and other things

00:10:44,399 --> 00:10:48,720
out of balance and if you want video

00:10:47,120 --> 00:10:49,839
content i forgot to mention this if you

00:10:48,720 --> 00:10:52,240
want video content

00:10:49,839 --> 00:10:55,839
you want to use pipe wire and there's

00:10:52,240 --> 00:10:55,839
code and plasma doing that already

00:10:56,560 --> 00:11:00,720
one of the bigger changes now probably

00:10:58,800 --> 00:11:04,160
is more likely to affect you for

00:11:00,720 --> 00:11:06,079
a coming up global positioning

00:11:04,160 --> 00:11:08,959
whaling windows don't know where they

00:11:06,079 --> 00:11:12,160
are and they can't set where they are

00:11:08,959 --> 00:11:13,519
using those rain shells that we have and

00:11:12,160 --> 00:11:14,959
this is probably one of the biggest

00:11:13,519 --> 00:11:17,040
sporting challenges

00:11:14,959 --> 00:11:19,920
but there are a couple of options that

00:11:17,040 --> 00:11:23,200
are available and supported

00:11:19,920 --> 00:11:25,120
the most important one is a framework

00:11:23,200 --> 00:11:27,360
called xcg positioner

00:11:25,120 --> 00:11:29,040
which is where we semantically state

00:11:27,360 --> 00:11:31,760
where a pop-up should be

00:11:29,040 --> 00:11:33,519
relative to your repair window so you

00:11:31,760 --> 00:11:35,360
would have this if you have a window and

00:11:33,519 --> 00:11:38,560
you want to open a context menu

00:11:35,360 --> 00:11:39,760
or a little tool tip or a combo box

00:11:38,560 --> 00:11:40,480
where you get a drop-down list of

00:11:39,760 --> 00:11:42,880
options

00:11:40,480 --> 00:11:44,720
all of those in new windows and we're

00:11:42,880 --> 00:11:45,680
saying where that window pop-up should

00:11:44,720 --> 00:11:47,600
open

00:11:45,680 --> 00:11:49,200
relative to the window that we already

00:11:47,600 --> 00:11:50,800
have

00:11:49,200 --> 00:11:52,560
now one challenge with that one

00:11:50,800 --> 00:11:53,360
behavioral difference is if you open

00:11:52,560 --> 00:11:56,399
something

00:11:53,360 --> 00:11:58,959
with without global positions

00:11:56,399 --> 00:12:00,880
the client can't do detection of whether

00:11:58,959 --> 00:12:02,639
we're going to hit a screen edge or not

00:12:00,880 --> 00:12:04,079
so if you have a combo box with a really

00:12:02,639 --> 00:12:06,000
long list

00:12:04,079 --> 00:12:07,839
and your windows quite near the bottom

00:12:06,000 --> 00:12:09,600
of your screen and combo boxes near

00:12:07,839 --> 00:12:11,279
bottom of the screen

00:12:09,600 --> 00:12:13,440
you don't want it to overflow off the

00:12:11,279 --> 00:12:15,920
screen because that's rubbish

00:12:13,440 --> 00:12:17,360
and on x11 you would typically do some

00:12:15,920 --> 00:12:18,880
of that code yourself

00:12:17,360 --> 00:12:20,560
or sometimes the window manager will

00:12:18,880 --> 00:12:22,639
just shove it on top of

00:12:20,560 --> 00:12:25,040
on top of the combo voltage you'll just

00:12:22,639 --> 00:12:27,600
shove it randomly

00:12:25,040 --> 00:12:28,320
but with xcd positioner which is really

00:12:27,600 --> 00:12:30,720
quite clever

00:12:28,320 --> 00:12:32,079
you can provide hints on how to handle a

00:12:30,720 --> 00:12:34,000
constrained situation

00:12:32,079 --> 00:12:35,200
so in this example this combo box that

00:12:34,000 --> 00:12:36,959
doesn't fit beneath

00:12:35,200 --> 00:12:38,399
you can say well i want the contents to

00:12:36,959 --> 00:12:40,079
be above

00:12:38,399 --> 00:12:41,839
where my combo box is and not just

00:12:40,079 --> 00:12:43,360
include it or you could even say

00:12:41,839 --> 00:12:45,279
i want everything to be shifted to your

00:12:43,360 --> 00:12:47,760
right to avoiding a combo box

00:12:45,279 --> 00:12:48,399
this way also resize a window and you

00:12:47,760 --> 00:12:50,399
can tell it

00:12:48,399 --> 00:12:52,000
how you would like it to be handled and

00:12:50,399 --> 00:12:55,040
then the compositor does the right

00:12:52,000 --> 00:12:56,639
thing so it's a very very well designed

00:12:55,040 --> 00:13:00,079
class

00:12:56,639 --> 00:13:02,480
but acute implementation is kind of weak

00:13:00,079 --> 00:13:04,560
you're using this framework implicitly

00:13:02,480 --> 00:13:07,040
whenever you create a cue menu

00:13:04,560 --> 00:13:08,320
context box or cucumber box or a little

00:13:07,040 --> 00:13:10,880
tooltip

00:13:08,320 --> 00:13:12,880
but what qt is doing internally to match

00:13:10,880 --> 00:13:14,399
existing internal api

00:13:12,880 --> 00:13:16,240
is just mapping everything to a global

00:13:14,399 --> 00:13:18,399
coordinate and then mapping everything

00:13:16,240 --> 00:13:20,079
back into a relative position

00:13:18,399 --> 00:13:24,399
and then with not exposing all of these

00:13:20,079 --> 00:13:24,399
clever apis that exist in the framework

00:13:26,160 --> 00:13:29,600
one of the other protocols that exists

00:13:27,839 --> 00:13:31,760
is plasma shell which is what we're

00:13:29,600 --> 00:13:34,399
using for all the panels

00:13:31,760 --> 00:13:35,040
and some other custom parts within

00:13:34,399 --> 00:13:37,519
plasma

00:13:35,040 --> 00:13:38,560
and here is a sneaky sort of add-on api

00:13:37,519 --> 00:13:40,880
that we've added

00:13:38,560 --> 00:13:42,320
specifically four panels and things

00:13:40,880 --> 00:13:44,720
where you can set an exact

00:13:42,320 --> 00:13:46,320
position in global coordinates and if

00:13:44,720 --> 00:13:48,240
you look at the code for plasma panels

00:13:46,320 --> 00:13:50,000
you'll see this

00:13:48,240 --> 00:13:51,440
and the downside to this is it's not

00:13:50,000 --> 00:13:53,040
universally supported

00:13:51,440 --> 00:13:54,480
in fact we've been trying to restrict

00:13:53,040 --> 00:13:57,680
access within kde

00:13:54,480 --> 00:13:59,680
applications the implementation

00:13:57,680 --> 00:14:02,079
was done quite early on in our whaling

00:13:59,680 --> 00:14:05,440
development and in hindsight it's quite

00:14:02,079 --> 00:14:07,519
poor particularly with other changes

00:14:05,440 --> 00:14:11,040
and overall we're trying to phase out

00:14:07,519 --> 00:14:11,040
but you might see this class listed

00:14:11,760 --> 00:14:15,199
and last but not least one of the new

00:14:13,680 --> 00:14:16,959
things that are popping up in the scene

00:14:15,199 --> 00:14:18,720
layer shell which is where we

00:14:16,959 --> 00:14:19,279
semantically position something on the

00:14:18,720 --> 00:14:22,000
screen

00:14:19,279 --> 00:14:23,600
so if you're familiar with qml anchors

00:14:22,000 --> 00:14:24,560
this is basically the same but for whole

00:14:23,600 --> 00:14:26,639
windows

00:14:24,560 --> 00:14:27,839
we can say i want my window to be

00:14:26,639 --> 00:14:29,360
anchored to your right and i want to be

00:14:27,839 --> 00:14:30,639
anchored to your left and the top and

00:14:29,360 --> 00:14:33,440
200 pixels tall

00:14:30,639 --> 00:14:34,959
and still be at the top 200 pixels tall

00:14:33,440 --> 00:14:38,240
and you've got margins and such

00:14:34,959 --> 00:14:40,639
exactly like qml anchors and let's

00:14:38,240 --> 00:14:42,560
use this already inside case flash and

00:14:40,639 --> 00:14:43,600
we've made an entire library available

00:14:42,560 --> 00:14:46,320
where we expose

00:14:43,600 --> 00:14:47,839
every feature that's relevant inside

00:14:46,320 --> 00:14:49,680
layer show all of these margins and

00:14:47,839 --> 00:14:51,279
different offsets

00:14:49,680 --> 00:14:55,040
and this is a somewhat standardized

00:14:51,279 --> 00:14:56,880
protocol it works outside kde

00:14:55,040 --> 00:14:58,720
one big con with the current

00:14:56,880 --> 00:15:01,279
implementation that will be fixed out

00:14:58,720 --> 00:15:03,680
it's just a technical hitch temporarily

00:15:01,279 --> 00:15:06,560
is you can't have layer shell and

00:15:03,680 --> 00:15:07,839
regular windows in the same application

00:15:06,560 --> 00:15:09,600
once you've committed to using that

00:15:07,839 --> 00:15:10,720
layer shell library you then have to use

00:15:09,600 --> 00:15:13,040
that layer shell library

00:15:10,720 --> 00:15:14,480
for every other window which means every

00:15:13,040 --> 00:15:15,839
other window needs to be semantically

00:15:14,480 --> 00:15:17,199
positioned to a screen

00:15:15,839 --> 00:15:19,839
which doesn't make sense for some

00:15:17,199 --> 00:15:19,839
situations

00:15:21,600 --> 00:15:25,440
so what are some of the other

00:15:23,360 --> 00:15:28,079
differences we see in weyland

00:15:25,440 --> 00:15:28,480
it's quite strict in terms of protocol

00:15:28,079 --> 00:15:31,759
on

00:15:28,480 --> 00:15:33,680
what you can do the wrong things just to

00:15:31,759 --> 00:15:35,920
enforce that your app your application

00:15:33,680 --> 00:15:39,440
is doing things correctly

00:15:35,920 --> 00:15:41,360
so pop-ups are one

00:15:39,440 --> 00:15:43,519
example so for every time you have a

00:15:41,360 --> 00:15:45,040
pop-up you must have a parent

00:15:43,519 --> 00:15:47,279
and if you have a pop-up that creates a

00:15:45,040 --> 00:15:48,000
pop-up you must do this in the right

00:15:47,279 --> 00:15:49,920
order

00:15:48,000 --> 00:15:52,000
you must create a pop-up that depends on

00:15:49,920 --> 00:15:54,720
the pop-up after your first pop-up

00:15:52,000 --> 00:15:56,320
which seemed natural but it's also

00:15:54,720 --> 00:15:58,480
important from a whale and practical

00:15:56,320 --> 00:15:59,360
perspective to destroy things in connect

00:15:58,480 --> 00:16:00,800
correct order

00:15:59,360 --> 00:16:02,160
you can't open a pop-up and then a

00:16:00,800 --> 00:16:03,759
pop-up from it and then close the

00:16:02,160 --> 00:16:06,880
original

00:16:03,759 --> 00:16:10,079
doing so is braylon considers illegal

00:16:06,880 --> 00:16:11,199
it's akin to murder it's one of the ten

00:16:10,079 --> 00:16:13,120
commandments

00:16:11,199 --> 00:16:15,199
don't murder don't create it destroy

00:16:13,120 --> 00:16:17,519
your pop-ups in the wrong order

00:16:15,199 --> 00:16:19,360
and cute waylon tries to hide his

00:16:17,519 --> 00:16:21,519
problems but

00:16:19,360 --> 00:16:23,839
it's hard to sort of retroactively guess

00:16:21,519 --> 00:16:26,959
what your client should be doing

00:16:23,839 --> 00:16:27,600
so anything that is moderately sane is

00:16:26,959 --> 00:16:30,320
supported

00:16:27,600 --> 00:16:32,079
inside a random protocol it's but if

00:16:30,320 --> 00:16:33,279
you've got something very quirky inside

00:16:32,079 --> 00:16:35,279
your code

00:16:33,279 --> 00:16:37,199
it can just cause everything to just be

00:16:35,279 --> 00:16:37,600
quit uh closed or your problems to be

00:16:37,199 --> 00:16:40,639
closed

00:16:37,600 --> 00:16:41,839
in the wrong place so here's what an

00:16:40,639 --> 00:16:44,880
example of what i mean

00:16:41,839 --> 00:16:46,320
with multiple pop-ups in this case it's

00:16:44,880 --> 00:16:48,160
important that we close this

00:16:46,320 --> 00:16:49,920
right most pop-up first and then the

00:16:48,160 --> 00:16:50,639
middle one and then the left one if you

00:16:49,920 --> 00:16:53,759
do anything

00:16:50,639 --> 00:16:54,720
wrong initially your application would

00:16:53,759 --> 00:16:57,680
be terminated

00:16:54,720 --> 00:16:59,199
but cute railing tries to solve that but

00:16:57,680 --> 00:17:01,519
if it tries to solve it you'll just get

00:16:59,199 --> 00:17:03,040
a situation which just doesn't work

00:17:01,519 --> 00:17:05,839
which is slightly better than crashing

00:17:03,040 --> 00:17:05,839
but not by much

00:17:08,000 --> 00:17:12,160
window activation so what do i mean by

00:17:11,039 --> 00:17:14,160
window activation

00:17:12,160 --> 00:17:15,760
that's where we're passing focus from

00:17:14,160 --> 00:17:18,400
one window to another

00:17:15,760 --> 00:17:19,280
so i'm in my chat application i click on

00:17:18,400 --> 00:17:21,600
a link

00:17:19,280 --> 00:17:23,120
and open a browser i expect a browser to

00:17:21,600 --> 00:17:24,559
suddenly appear in the foreground

00:17:23,120 --> 00:17:26,720
even if your foreground the browser's

00:17:24,559 --> 00:17:30,000
already open with some other content

00:17:26,720 --> 00:17:31,679
inside or

00:17:30,000 --> 00:17:33,120
you're in dolphin you've got a

00:17:31,679 --> 00:17:34,960
spreadsheet uh you've got a list of

00:17:33,120 --> 00:17:37,600
files you click on a pdf

00:17:34,960 --> 00:17:39,440
of this presentation you expect your pdf

00:17:37,600 --> 00:17:42,160
viewer to come to your front

00:17:39,440 --> 00:17:43,919
even if your pdf viewer is active or the

00:17:42,160 --> 00:17:46,400
store from the system tree

00:17:43,919 --> 00:17:48,559
when you click and say notifiers and for

00:17:46,400 --> 00:17:50,720
telegram you want telephone to appear

00:17:48,559 --> 00:17:51,679
make sense so i'm gonna do a quick

00:17:50,720 --> 00:17:54,480
reminder of how

00:17:51,679 --> 00:17:56,160
this should be done on x11 and what you

00:17:54,480 --> 00:17:58,720
should be doing right now

00:17:56,160 --> 00:17:59,360
so you should be creating this magical

00:17:58,720 --> 00:18:01,600
string

00:17:59,360 --> 00:18:03,679
um either getting your user time or

00:18:01,600 --> 00:18:07,200
using case startup info

00:18:03,679 --> 00:18:08,640
and then we pass this out of bounds and

00:18:07,200 --> 00:18:10,559
over the deepest message that we're

00:18:08,640 --> 00:18:13,280
sending anyway or over an environment

00:18:10,559 --> 00:18:14,960
variable if we're creating a new process

00:18:13,280 --> 00:18:18,000
and then the receiving client should

00:18:14,960 --> 00:18:21,360
import this and then use qx11

00:18:18,000 --> 00:18:21,679
extras and set user input time use case

00:18:21,360 --> 00:18:24,720
tab

00:18:21,679 --> 00:18:25,520
startup info uh to import this magical

00:18:24,720 --> 00:18:27,840
token

00:18:25,520 --> 00:18:30,240
which does everything internally and

00:18:27,840 --> 00:18:32,559
only then the recall request activate

00:18:30,240 --> 00:18:34,400
so that's what you should be doing now

00:18:32,559 --> 00:18:36,480
what everybody probably does

00:18:34,400 --> 00:18:38,880
is ignore all of this and just call

00:18:36,480 --> 00:18:41,520
force active window

00:18:38,880 --> 00:18:42,559
and it's something that if your had

00:18:41,520 --> 00:18:44,880
martin

00:18:42,559 --> 00:18:45,760
uh complaining about focus issues on

00:18:44,880 --> 00:18:48,000
quinn

00:18:45,760 --> 00:18:50,320
you would be told not to do this api

00:18:48,000 --> 00:18:53,360
documentation says not to do this

00:18:50,320 --> 00:18:56,160
pragmatically lots of people do because

00:18:53,360 --> 00:18:56,960
it worked and it was simpler so now

00:18:56,160 --> 00:19:00,000
let's talk about

00:18:56,960 --> 00:19:01,200
what you should be doing on weightland

00:19:00,000 --> 00:19:03,440
where you should be creating a magic

00:19:01,200 --> 00:19:04,160
token you should possibly be passing out

00:19:03,440 --> 00:19:06,240
using

00:19:04,160 --> 00:19:08,160
any other methods d bus environment

00:19:06,240 --> 00:19:10,240
variables and then importing that into a

00:19:08,160 --> 00:19:14,000
new client

00:19:10,240 --> 00:19:16,720
so the concept is exactly the same

00:19:14,000 --> 00:19:19,200
as what you should be doing but we don't

00:19:16,720 --> 00:19:22,799
have a force active window

00:19:19,200 --> 00:19:25,120
lazy workaround the api

00:19:22,799 --> 00:19:27,039
is subtly different and i would go far

00:19:25,120 --> 00:19:29,039
to say it's considerably easier because

00:19:27,039 --> 00:19:32,160
case startup info is very very very

00:19:29,039 --> 00:19:34,960
very confusing so new classes

00:19:32,160 --> 00:19:36,320
are k window system request absolute x

00:19:34,960 --> 00:19:38,559
deactivation token

00:19:36,320 --> 00:19:40,880
and then you get a signal back once it's

00:19:38,559 --> 00:19:42,799
because it's making from this operation

00:19:40,880 --> 00:19:44,559
and then from a client you're imported

00:19:42,799 --> 00:19:46,320
and you call set current actually

00:19:44,559 --> 00:19:47,039
activation token on a window and your

00:19:46,320 --> 00:19:50,720
window

00:19:47,039 --> 00:19:53,039
goes into foreground and where possible

00:19:50,720 --> 00:19:54,799
we are trying to handle this uh

00:19:53,039 --> 00:19:57,919
implicitly into existing

00:19:54,799 --> 00:19:59,760
calls uh like case startup info on

00:19:57,919 --> 00:20:01,760
x and x 11 when you launch an

00:19:59,760 --> 00:20:03,600
application

00:20:01,760 --> 00:20:05,440
but when you're importing a client when

00:20:03,600 --> 00:20:06,799
you've been activated we tend to be in a

00:20:05,440 --> 00:20:10,480
client custom code

00:20:06,799 --> 00:20:10,480
so a client does need to adapt

00:20:14,799 --> 00:20:18,880
okay so minimizing to a system tray if

00:20:17,360 --> 00:20:21,120
you use q system tray

00:20:18,880 --> 00:20:22,960
or case status notify item everything

00:20:21,120 --> 00:20:25,520
will continue to work

00:20:22,960 --> 00:20:26,880
as is particularly on plasma for q

00:20:25,520 --> 00:20:29,039
system tree

00:20:26,880 --> 00:20:31,039
uh one behavioral difference i'm seeing

00:20:29,039 --> 00:20:32,400
quite a lot particularly on random cute

00:20:31,039 --> 00:20:34,080
github projects

00:20:32,400 --> 00:20:36,080
is you don't have api to know when a

00:20:34,080 --> 00:20:37,919
window is minimized so if you've got a

00:20:36,080 --> 00:20:39,760
fake concept of you click close and it

00:20:37,919 --> 00:20:42,880
minimizes to your tray

00:20:39,760 --> 00:20:42,880
it simply isn't going to work

00:20:44,799 --> 00:20:49,039
okay so that's some very deliberate

00:20:47,120 --> 00:20:51,120
changes you need to be aware of

00:20:49,039 --> 00:20:52,159
but i'm going to talk about some bugs in

00:20:51,120 --> 00:20:54,400
your apples

00:20:52,159 --> 00:20:56,720
that wayland might be surfacing there's

00:20:54,400 --> 00:20:58,320
one common one that i've seen

00:20:56,720 --> 00:21:00,480
nine times that i'm going to go into

00:20:58,320 --> 00:21:03,679
detail off

00:21:00,480 --> 00:21:06,720
right so

00:21:03,679 --> 00:21:07,840
if everyone remembers q2 q3 very early

00:21:06,720 --> 00:21:11,039
days

00:21:07,840 --> 00:21:13,039
of x11 every windjit

00:21:11,039 --> 00:21:16,320
widget used to be its own independent

00:21:13,039 --> 00:21:18,640
window so a button was a window a label

00:21:16,320 --> 00:21:20,320
was a window at a very technical level

00:21:18,640 --> 00:21:20,880
and then all of these windows formed

00:21:20,320 --> 00:21:23,520
together

00:21:20,880 --> 00:21:25,120
to create a top level window as you

00:21:23,520 --> 00:21:28,480
would know it

00:21:25,120 --> 00:21:31,280
right and in q4

00:21:28,480 --> 00:21:32,480
i don't know exactly when i q4 we

00:21:31,280 --> 00:21:34,480
stopped doing that

00:21:32,480 --> 00:21:36,640
now we just have a window that has all

00:21:34,480 --> 00:21:39,200
of the window contents

00:21:36,640 --> 00:21:40,000
but this code path was kept you could

00:21:39,200 --> 00:21:42,480
still turn

00:21:40,000 --> 00:21:43,200
a widget into a window because it does

00:21:42,480 --> 00:21:45,360
make sense

00:21:43,200 --> 00:21:47,200
deliberately in a few very very

00:21:45,360 --> 00:21:49,200
specialist cases

00:21:47,200 --> 00:21:51,360
so if you're a media player putting a

00:21:49,200 --> 00:21:54,480
media content in its own separate window

00:21:51,360 --> 00:21:56,080
uh obs does this um it makes sense

00:21:54,480 --> 00:22:00,000
you can get some performance boost out

00:21:56,080 --> 00:22:03,120
of it in some specific cases

00:22:00,000 --> 00:22:06,000
and weyland has an analogous

00:22:03,120 --> 00:22:06,400
situation to this x11 window embedding

00:22:06,000 --> 00:22:08,240
for

00:22:06,400 --> 00:22:09,760
these same specific cases there's a

00:22:08,240 --> 00:22:13,120
concept of where the

00:22:09,760 --> 00:22:15,600
subsurfaces acute abstracts

00:22:13,120 --> 00:22:16,880
so in theory this should all work

00:22:15,600 --> 00:22:20,080
exactly the same

00:22:16,880 --> 00:22:24,640
as no need to be aware of it

00:22:20,080 --> 00:22:27,280
and that is true for any correct code

00:22:24,640 --> 00:22:29,200
but one problem we've been seeing a lot

00:22:27,280 --> 00:22:30,320
is it's very very very easy to

00:22:29,200 --> 00:22:32,320
accidentally turn

00:22:30,320 --> 00:22:33,440
a cue widget into a window when you're

00:22:32,320 --> 00:22:35,520
not trying to do it when you're not

00:22:33,440 --> 00:22:37,200
doing it for performance reasons

00:22:35,520 --> 00:22:39,280
and if you turn something into a window

00:22:37,200 --> 00:22:40,000
and then never show that window never

00:22:39,280 --> 00:22:42,480
call

00:22:40,000 --> 00:22:44,159
q window show on that widget you end up

00:22:42,480 --> 00:22:47,120
in a situation where it created a window

00:22:44,159 --> 00:22:47,600
and rendered the content somewhere else

00:22:47,120 --> 00:22:50,799
and

00:22:47,600 --> 00:22:51,520
doing so accidentally causes no visible

00:22:50,799 --> 00:22:55,120
issues

00:22:51,520 --> 00:22:56,640
on uh qxp or next level it's still buggy

00:22:55,120 --> 00:22:57,840
it's still wrong it's still very very

00:22:56,640 --> 00:23:00,799
weird

00:22:57,840 --> 00:23:02,720
but you can't see those and i can't

00:23:00,799 --> 00:23:04,240
expect developers to fix bugs that you

00:23:02,720 --> 00:23:05,440
can't see

00:23:04,240 --> 00:23:08,480
but when you're running against cute

00:23:05,440 --> 00:23:10,159
weyland very very bizarre things happen

00:23:08,480 --> 00:23:11,840
because it just can't map things quite

00:23:10,159 --> 00:23:13,440
correctly so

00:23:11,840 --> 00:23:15,360
you get a situation where your input

00:23:13,440 --> 00:23:17,760
just doesn't reach

00:23:15,360 --> 00:23:19,440
certain widgets so it has slightly odd

00:23:17,760 --> 00:23:22,000
effects that you need to be aware of

00:23:19,440 --> 00:23:22,559
so if you have a win if you do encounter

00:23:22,000 --> 00:23:24,320
this bug

00:23:22,559 --> 00:23:27,600
where your symptoms are things are just

00:23:24,320 --> 00:23:29,280
behaving weird in the subject of widgets

00:23:27,600 --> 00:23:31,280
check for this and it's quite easy to

00:23:29,280 --> 00:23:32,880
check for just put a breakpoint in the q

00:23:31,280 --> 00:23:34,240
platform window constructor

00:23:32,880 --> 00:23:36,159
you should only have a clue platform

00:23:34,240 --> 00:23:38,559
with a constructor when you're actually

00:23:36,159 --> 00:23:41,279
creating a window

00:23:38,559 --> 00:23:42,640
um similarly the same bug but coming up

00:23:41,279 --> 00:23:45,600
in a different way

00:23:42,640 --> 00:23:47,760
avoid qgl widget it's a class that you

00:23:45,600 --> 00:23:49,919
don't want to be using it's rubbish

00:23:47,760 --> 00:23:51,520
q opengl widget should be used instead

00:23:49,919 --> 00:23:53,039
this is what your documentation inside

00:23:51,520 --> 00:23:55,600
cute says

00:23:53,039 --> 00:23:57,120
folio documentation but we have seen

00:23:55,600 --> 00:23:58,799
people where people haven't made it

00:23:57,120 --> 00:24:01,520
they have seen cases where people

00:23:58,799 --> 00:24:03,840
haven't made reports yet

00:24:01,520 --> 00:24:04,640
another related case if you are

00:24:03,840 --> 00:24:06,960
deliberately

00:24:04,640 --> 00:24:10,480
turning some widgets into a window or

00:24:06,960 --> 00:24:12,559
deliberately using subsurfaces

00:24:10,480 --> 00:24:13,679
be sure to enable this flag which i've

00:24:12,559 --> 00:24:16,080
cleverly cut off

00:24:13,679 --> 00:24:17,200
called don't create native widget

00:24:16,080 --> 00:24:19,200
siblings

00:24:17,200 --> 00:24:20,400
and without going into what this flag

00:24:19,200 --> 00:24:22,240
does is

00:24:20,400 --> 00:24:25,600
it breaks your application and you don't

00:24:22,240 --> 00:24:28,000
want it it's there purely for some

00:24:25,600 --> 00:24:30,080
compatibility with if you want this very

00:24:28,000 --> 00:24:31,360
same behavior as what we had in q2 and

00:24:30,080 --> 00:24:33,840
q3 which

00:24:31,360 --> 00:24:33,840
you don't

00:24:36,080 --> 00:24:39,840
and there have been some other uh

00:24:37,600 --> 00:24:42,640
situations i fixed a crash in keo

00:24:39,840 --> 00:24:44,159
where just expected input to come in a

00:24:42,640 --> 00:24:47,679
certain order

00:24:44,159 --> 00:24:49,679
after we um create an uh

00:24:47,679 --> 00:24:51,039
a mode of dialogue it was sure that once

00:24:49,679 --> 00:24:53,039
you created a modal dialogue

00:24:51,039 --> 00:24:54,400
any input must be in that modal dialogue

00:24:53,039 --> 00:24:56,000
anything else would be something to

00:24:54,400 --> 00:24:58,000
assert over

00:24:56,000 --> 00:25:00,080
and that wasn't true on weyland because

00:24:58,000 --> 00:25:02,640
it's like asynchronous gap

00:25:00,080 --> 00:25:03,120
and there are many many cases where

00:25:02,640 --> 00:25:05,440
things

00:25:03,120 --> 00:25:06,320
happen to work fine on x11 but it

00:25:05,440 --> 00:25:09,840
doesn't mean your

00:25:06,320 --> 00:25:09,840
app was right

00:25:10,320 --> 00:25:13,360
not seeing a bug doesn't mean a bug

00:25:11,919 --> 00:25:15,200
wasn't there

00:25:13,360 --> 00:25:17,840
and the takeaway from this is you just

00:25:15,200 --> 00:25:17,840
need to test

00:25:18,720 --> 00:25:22,880
so let's dive a bit into cute railing

00:25:20,640 --> 00:25:24,799
itself

00:25:22,880 --> 00:25:26,640
cute island somewhat has an impossible

00:25:24,799 --> 00:25:30,080
job because in weyland

00:25:26,640 --> 00:25:32,559
people are trying to revisit some

00:25:30,080 --> 00:25:33,760
how can we do window management and all

00:25:32,559 --> 00:25:35,919
of the

00:25:33,760 --> 00:25:37,120
display server works in some new and

00:25:35,919 --> 00:25:38,960
creative ways

00:25:37,120 --> 00:25:41,679
and those waves aren't wrong they're

00:25:38,960 --> 00:25:44,159
just sometimes new and different

00:25:41,679 --> 00:25:45,120
and cute has to have backwards

00:25:44,159 --> 00:25:47,120
compatibility

00:25:45,120 --> 00:25:50,000
and forward compatibility cute wayland

00:25:47,120 --> 00:25:51,679
has an api that is fixed and abstracted

00:25:50,000 --> 00:25:54,320
and we have to support absolutely 10

00:25:51,679 --> 00:25:56,320
years ago we have cute six api frozen so

00:25:54,320 --> 00:25:58,640
we're frozen for six years in in

00:25:56,320 --> 00:25:59,679
into your future and cute wayland is

00:25:58,640 --> 00:26:01,760
stuck in the middle

00:25:59,679 --> 00:26:04,080
trying to bridge his somewhat times

00:26:01,760 --> 00:26:06,799
different concepts

00:26:04,080 --> 00:26:07,760
so it's in a difficult situation but

00:26:06,799 --> 00:26:09,840
despite that

00:26:07,760 --> 00:26:12,080
it's quite good the code is really well

00:26:09,840 --> 00:26:16,320
written your unit tests are

00:26:12,080 --> 00:26:17,120
excellent another challenge with cube

00:26:16,320 --> 00:26:20,240
railings

00:26:17,120 --> 00:26:22,320
and an opportunity if cute way is

00:26:20,240 --> 00:26:23,600
weyland itself lets you cherry pick what

00:26:22,320 --> 00:26:25,840
you want to support

00:26:23,600 --> 00:26:27,600
if i'm making a coffee machine i don't

00:26:25,840 --> 00:26:29,200
necessarily need drag and drop

00:26:27,600 --> 00:26:30,880
so your compositor just wouldn't

00:26:29,200 --> 00:26:32,880
implement it

00:26:30,880 --> 00:26:34,000
and we see it's quite a bit the cute

00:26:32,880 --> 00:26:36,159
wayland has

00:26:34,000 --> 00:26:37,600
effectively two distinct sets of user

00:26:36,159 --> 00:26:40,080
groups with the desktop side

00:26:37,600 --> 00:26:41,679
and the embedded side and inside cute

00:26:40,080 --> 00:26:42,799
rayland we're seeing divergent code

00:26:41,679 --> 00:26:46,159
paths

00:26:42,799 --> 00:26:48,000
because you can completely replace

00:26:46,159 --> 00:26:50,000
one of the core protocols of how you

00:26:48,000 --> 00:26:52,720
turn some window content

00:26:50,000 --> 00:26:53,840
into what the window manager considers a

00:26:52,720 --> 00:26:56,080
window

00:26:53,840 --> 00:26:57,600
so if you're only showing a full screen

00:26:56,080 --> 00:27:00,080
window you don't need

00:26:57,600 --> 00:27:00,640
the concepts of resizing and all of

00:27:00,080 --> 00:27:02,559
these

00:27:00,640 --> 00:27:04,799
so you go through a completely different

00:27:02,559 --> 00:27:06,559
code path with an api that matches what

00:27:04,799 --> 00:27:08,240
you need

00:27:06,559 --> 00:27:11,600
but the problem there is cute waylon

00:27:08,240 --> 00:27:11,600
dentist is diverging past

00:27:13,919 --> 00:27:20,159
kde has been very active on cute island

00:27:16,960 --> 00:27:21,919
we've made well over 50 commits and i

00:27:20,159 --> 00:27:22,559
think acute welding people do a very

00:27:21,919 --> 00:27:25,679
good job

00:27:22,559 --> 00:27:28,799
of now asking us for our opinion on any

00:27:25,679 --> 00:27:30,640
patches that would affect us two

00:27:28,799 --> 00:27:32,000
developers have gained approval status

00:27:30,640 --> 00:27:34,320
because of the work we've been doing in

00:27:32,000 --> 00:27:36,559
cute weyland that's myself and alice

00:27:34,320 --> 00:27:38,480
so if you do work on cute rayland you

00:27:36,559 --> 00:27:43,679
are going to be met with friendly faces

00:27:38,480 --> 00:27:43,679
on my face when when you make that patch

00:27:44,080 --> 00:27:49,919
and to some extent we're seeing a slight

00:27:47,039 --> 00:27:52,320
change in the acute companies um

00:27:49,919 --> 00:27:53,279
core demographic of not being so much on

00:27:52,320 --> 00:27:55,120
their desktop side

00:27:53,279 --> 00:27:57,440
but being slightly embedded focus

00:27:55,120 --> 00:28:00,080
focused at which point

00:27:57,440 --> 00:28:02,240
if we're the only people using a

00:28:00,080 --> 00:28:03,919
developer site a desktop side it's

00:28:02,240 --> 00:28:06,080
our responsibility to make it work you

00:28:03,919 --> 00:28:08,640
can't expect somebody who doesn't

00:28:06,080 --> 00:28:09,760
gain anything from to do your work where

00:28:08,640 --> 00:28:12,480
people gain from

00:28:09,760 --> 00:28:14,399
a lot of these desktop features it's our

00:28:12,480 --> 00:28:16,720
responsibility

00:28:14,399 --> 00:28:17,679
and i do want to say acute maintainers

00:28:16,720 --> 00:28:19,760
both jonas

00:28:17,679 --> 00:28:23,279
esko and paul have been absolutely

00:28:19,760 --> 00:28:23,279
amazing at welcoming people

00:28:24,720 --> 00:28:28,880
so what's your next steps in cute

00:28:26,399 --> 00:28:31,600
weyland well we want to explore

00:28:28,880 --> 00:28:33,440
a couple of more api for your whaling

00:28:31,600 --> 00:28:34,399
specifics going really low level and

00:28:33,440 --> 00:28:36,559
exporting

00:28:34,399 --> 00:28:37,600
everything that you can do in wayland to

00:28:36,559 --> 00:28:39,440
our clients

00:28:37,600 --> 00:28:41,440
and getting things into queue island is

00:28:39,440 --> 00:28:42,080
a very good way of avoiding some of the

00:28:41,440 --> 00:28:44,640
issues that

00:28:42,080 --> 00:28:46,559
you might see with dependencies if we do

00:28:44,640 --> 00:28:50,000
things on the kd side

00:28:46,559 --> 00:28:52,480
um we might might hit some challenges

00:28:50,000 --> 00:28:53,440
uh so i mentioned earlier about layer

00:28:52,480 --> 00:28:55,840
shell

00:28:53,440 --> 00:28:57,600
we might want to what we do want to

00:28:55,840 --> 00:28:59,919
expose all of that inside cubes

00:28:57,600 --> 00:29:01,200
as window activation that we've done and

00:28:59,919 --> 00:29:04,240
have currently exposed

00:29:01,200 --> 00:29:06,399
as kde api we want to just add that q

00:29:04,240 --> 00:29:08,320
string overload somewhere into cubes

00:29:06,399 --> 00:29:10,320
even keep railing itself or maybe into

00:29:08,320 --> 00:29:12,240
cute course so we can use it

00:29:10,320 --> 00:29:14,080
and anything that we can't abstract into

00:29:12,240 --> 00:29:16,080
q window ideally we want to try and

00:29:14,080 --> 00:29:19,360
expose as much as possible

00:29:16,080 --> 00:29:19,360
in q railing api

00:29:19,760 --> 00:29:23,120
there is a block this week it is on

00:29:21,679 --> 00:29:24,880
tuesday

00:29:23,120 --> 00:29:26,640
i can tell your time in my time zone

00:29:24,880 --> 00:29:29,679
it's one o'clock

00:29:26,640 --> 00:29:33,360
but other people adjust accordingly

00:29:29,679 --> 00:29:34,960
need to attend there are multiple ways

00:29:33,360 --> 00:29:36,399
to extend cue rail and if you really

00:29:34,960 --> 00:29:38,159
doesn't

00:29:36,399 --> 00:29:40,399
have everything you need so cute railing

00:29:38,159 --> 00:29:42,000
will do everything like showing a window

00:29:40,399 --> 00:29:45,360
but if you want to introduce some

00:29:42,000 --> 00:29:46,080
custom valen protocol we have some

00:29:45,360 --> 00:29:49,440
slightly

00:29:46,080 --> 00:29:51,039
fragmented landscaping kde so there's a

00:29:49,440 --> 00:29:53,440
library called k wayland

00:29:51,039 --> 00:29:54,640
which is a very low level api exposing a

00:29:53,440 --> 00:29:57,760
one-to-one mapping

00:29:54,640 --> 00:30:00,000
of walem protocols

00:29:57,760 --> 00:30:02,240
in general we found this isn't

00:30:00,000 --> 00:30:04,799
necessarily a direction we want

00:30:02,240 --> 00:30:06,799
because from a client ap point of view

00:30:04,799 --> 00:30:08,799
it sucks to use a one-to-one mapping of

00:30:06,799 --> 00:30:10,240
what gets sent over your wire

00:30:08,799 --> 00:30:12,559
on the wayland if you want to send a

00:30:10,240 --> 00:30:14,000
large structs we don't send the last

00:30:12,559 --> 00:30:16,399
truck because of the message

00:30:14,000 --> 00:30:17,919
as a maximum message size so instead we

00:30:16,399 --> 00:30:19,279
send it as a stream

00:30:17,919 --> 00:30:21,600
where we could send each thing

00:30:19,279 --> 00:30:23,840
individually and then as a semaphore

00:30:21,600 --> 00:30:25,200
and you don't need to know from a client

00:30:23,840 --> 00:30:27,919
point of view about

00:30:25,200 --> 00:30:30,159
all of those details so i think we're

00:30:27,919 --> 00:30:32,480
finding we want to provide

00:30:30,159 --> 00:30:34,000
much higher level api and in the right

00:30:32,480 --> 00:30:35,360
place

00:30:34,000 --> 00:30:38,480
but it's also worth mentioning q

00:30:35,360 --> 00:30:40,960
provides an uh mechanism to extend

00:30:38,480 --> 00:30:43,120
with a custom whaling protocols uh it's

00:30:40,960 --> 00:30:44,480
a classical keyword implant extension

00:30:43,120 --> 00:30:46,240
and we're kind of in a transitional

00:30:44,480 --> 00:30:46,799
phase of where what we're using inside

00:30:46,240 --> 00:30:50,480
kde

00:30:46,799 --> 00:30:52,159
you can use mix and match

00:30:50,480 --> 00:30:53,760
uh so to use cube railing client

00:30:52,159 --> 00:30:57,039
extension it's very

00:30:53,760 --> 00:30:59,440
much like using qd bus xml to cpp

00:30:57,039 --> 00:31:00,799
it creates a class it's got virtuals for

00:30:59,440 --> 00:31:03,120
messages that come to us

00:31:00,799 --> 00:31:05,600
and it has methods for things that we

00:31:03,120 --> 00:31:07,279
send to your compositor

00:31:05,600 --> 00:31:09,760
and because everyone just likes to copy

00:31:07,279 --> 00:31:11,200
existing code copy a code inside take a

00:31:09,760 --> 00:31:13,279
read on source recorder

00:31:11,200 --> 00:31:16,399
and then just adjust accordingly it

00:31:13,279 --> 00:31:16,399
should be fairly intuitive

00:31:17,440 --> 00:31:21,519
but what about missing functionality for

00:31:19,919 --> 00:31:23,519
example if you've got an application

00:31:21,519 --> 00:31:25,840
with toolbars and talk about something

00:31:23,519 --> 00:31:27,760
behavior different but differently

00:31:25,840 --> 00:31:28,880
how would we expose and we find the

00:31:27,760 --> 00:31:31,600
whale inspect protocol

00:31:28,880 --> 00:31:32,000
doesn't have what we want but it's

00:31:31,600 --> 00:31:33,840
important

00:31:32,000 --> 00:31:35,679
to know the whaling specs are still

00:31:33,840 --> 00:31:36,480
evolving this we are still getting

00:31:35,679 --> 00:31:38,799
changes in

00:31:36,480 --> 00:31:39,600
the activation that we talked about only

00:31:38,799 --> 00:31:42,159
landed

00:31:39,600 --> 00:31:43,919
in the last two months and we helped

00:31:42,159 --> 00:31:45,440
push for that on the kde site

00:31:43,919 --> 00:31:47,279
especially alice paul did a lot of the

00:31:45,440 --> 00:31:50,399
work

00:31:47,279 --> 00:31:52,080
so everything is still evolving and

00:31:50,399 --> 00:31:54,240
one of the things that i think has been

00:31:52,080 --> 00:31:56,399
a problem with whale until now

00:31:54,240 --> 00:31:57,440
is that all the specifications are being

00:31:56,399 --> 00:32:00,640
decided upon

00:31:57,440 --> 00:32:03,519
by composite developers it's a big

00:32:00,640 --> 00:32:03,840
group of people all from different teams

00:32:03,519 --> 00:32:06,720
but

00:32:03,840 --> 00:32:07,039
everyone is a composite developer and i

00:32:06,720 --> 00:32:08,240
think

00:32:07,039 --> 00:32:09,919
this is the root of a lot of the

00:32:08,240 --> 00:32:10,480
problems is this kind of an inherent

00:32:09,919 --> 00:32:12,480
bias

00:32:10,480 --> 00:32:13,519
at people answering the questions what

00:32:12,480 --> 00:32:16,000
is going to be best

00:32:13,519 --> 00:32:17,760
from the point of view of a compositor

00:32:16,000 --> 00:32:19,360
and we do need a healthy balance

00:32:17,760 --> 00:32:21,279
so i think we do need application

00:32:19,360 --> 00:32:23,039
developers to be coming and saying

00:32:21,279 --> 00:32:25,120
well these are my requirements

00:32:23,039 --> 00:32:29,360
requirements this is what i need

00:32:25,120 --> 00:32:31,360
please make something that works

00:32:29,360 --> 00:32:33,519
so the solution to this is to get

00:32:31,360 --> 00:32:34,159
involved make sure all problems are

00:32:33,519 --> 00:32:36,399
known and

00:32:34,159 --> 00:32:38,640
elevated for a stack if you're missing

00:32:36,399 --> 00:32:40,080
something in cute elevated to cute if

00:32:38,640 --> 00:32:40,799
cute is missing something in ireland and

00:32:40,080 --> 00:32:43,279
protocols

00:32:40,799 --> 00:32:45,919
elevate to alien protocols all the

00:32:43,279 --> 00:32:50,320
people very friendly

00:32:45,919 --> 00:32:50,320
and will listen as long as they're aware

00:32:50,799 --> 00:32:55,039
and the common theme that we've found

00:32:52,640 --> 00:32:58,799
when we've been doing all of our work

00:32:55,039 --> 00:33:01,200
is it's better to start

00:32:58,799 --> 00:33:02,640
ages ago as with all of these things we

00:33:01,200 --> 00:33:04,480
thought oh i wish i'd done that five

00:33:02,640 --> 00:33:06,240
years ago so i could be using that now

00:33:04,480 --> 00:33:08,159
whether it's acute change that we're now

00:33:06,240 --> 00:33:10,559
blocking in acute six

00:33:08,159 --> 00:33:11,600
or whalen protocols which is a very slow

00:33:10,559 --> 00:33:13,360
moving process

00:33:11,600 --> 00:33:15,840
for good reason but it's a slow moving

00:33:13,360 --> 00:33:18,080
process so it's important to just start

00:33:15,840 --> 00:33:18,080
now

00:33:18,480 --> 00:33:24,559
so to wrap this up

00:33:21,519 --> 00:33:26,480
test test test again

00:33:24,559 --> 00:33:29,200
as developers you should be using

00:33:26,480 --> 00:33:32,240
weyland on your application for

00:33:29,200 --> 00:33:32,240
as much as possible

00:33:32,480 --> 00:33:35,840
even if you don't try and assist it your

00:33:34,240 --> 00:33:39,840
users use it because of issues

00:33:35,840 --> 00:33:39,840
as developers you really should

00:33:40,960 --> 00:33:45,519
and we're here to help if you have a

00:33:43,200 --> 00:33:48,399
specific issue

00:33:45,519 --> 00:33:49,919
we are happy to help please do ping us

00:33:48,399 --> 00:33:52,799
if you're on boxilla

00:33:49,919 --> 00:33:54,240
use a whaling keyword and it will get

00:33:52,799 --> 00:33:56,799
noticed by people who

00:33:54,240 --> 00:33:58,640
search for that keyword which i do uh

00:33:56,799 --> 00:34:00,640
don't just move things to quinn

00:33:58,640 --> 00:34:02,240
but i just wailing keywords we can keep

00:34:00,640 --> 00:34:07,120
track of everything

00:34:02,240 --> 00:34:09,040
and if need be elevate issues to cute

00:34:07,120 --> 00:34:11,040
and i think that's the end of my talk

00:34:09,040 --> 00:34:14,079
well i know i can do my talk i wrote it

00:34:11,040 --> 00:34:14,079
and it says the end

00:34:14,320 --> 00:34:18,320
thank you dave uh there is a first one

00:34:17,599 --> 00:34:21,280
question

00:34:18,320 --> 00:34:22,079
does the layer shall work on x11 or does

00:34:21,280 --> 00:34:27,200
it need to be

00:34:22,079 --> 00:34:29,679
if this it would not work

00:34:27,200 --> 00:34:31,200
it would be possible to write a library

00:34:29,679 --> 00:34:34,720
that semantically does it

00:34:31,200 --> 00:34:36,480
in process and have a client

00:34:34,720 --> 00:34:38,079
only speaking somatic terms which then

00:34:36,480 --> 00:34:41,040
get them out to x11

00:34:38,079 --> 00:34:44,079
your layer show library as is i don't

00:34:41,040 --> 00:34:46,960
know if it crashes if you try and use it

00:34:44,079 --> 00:34:48,720
but it certainly would wouldn't be very

00:34:46,960 --> 00:34:53,040
useful

00:34:48,720 --> 00:34:53,520
okay uh i'll put in a question since you

00:34:53,040 --> 00:34:57,119
mentioned

00:34:53,520 --> 00:35:01,280
that failing protocols are moving target

00:34:57,119 --> 00:35:03,359
how much effort do you estimate has been

00:35:01,280 --> 00:35:05,760
let's say wasted because of those

00:35:03,359 --> 00:35:05,760
changes

00:35:07,599 --> 00:35:11,680
too much but a lot is necessary i think

00:35:10,240 --> 00:35:15,119
everyone's quite hesitant

00:35:11,680 --> 00:35:16,000
on committing to api particularly as

00:35:15,119 --> 00:35:18,720
weyland doesn't have

00:35:16,000 --> 00:35:20,079
a very good mechanism of doing binary

00:35:18,720 --> 00:35:23,040
and compatible changes

00:35:20,079 --> 00:35:23,520
it's got a very good mess mechanism for

00:35:23,040 --> 00:35:26,000
adding

00:35:23,520 --> 00:35:27,200
api like a binary compatible change but

00:35:26,000 --> 00:35:28,320
it doesn't have a very good one for

00:35:27,200 --> 00:35:30,720
incompatible ones

00:35:28,320 --> 00:35:32,640
so people are naturally cautious like

00:35:30,720 --> 00:35:34,560
you would be for a public api in the

00:35:32,640 --> 00:35:36,560
library

00:35:34,560 --> 00:35:38,560
but that means people tend to put things

00:35:36,560 --> 00:35:42,000
in certain with certain names

00:35:38,560 --> 00:35:43,280
and just renaming a protocol with no

00:35:42,000 --> 00:35:45,920
actual code changes

00:35:43,280 --> 00:35:46,480
it's quite difficult because you need to

00:35:45,920 --> 00:35:49,599
support

00:35:46,480 --> 00:35:51,680
anyone in the old name and anyone using

00:35:49,599 --> 00:35:53,920
a new name even if it's the exact same

00:35:51,680 --> 00:35:56,000
thing across the wire because

00:35:53,920 --> 00:35:58,320
because this text description of the

00:35:56,000 --> 00:35:59,680
interface name is sent at some point

00:35:58,320 --> 00:36:02,079
and the code generators just don't

00:35:59,680 --> 00:36:07,119
handle that very well

00:36:02,079 --> 00:36:11,040
so thank you too much but it's necessary

00:36:07,119 --> 00:36:12,000
thanks uh there are no more questions as

00:36:11,040 --> 00:36:15,119
far as i can see

00:36:12,000 --> 00:36:18,560
but a lot of applause in the chat

00:36:15,119 --> 00:36:21,440
so i don't need to say give a

00:36:18,560 --> 00:36:22,320
give up give a hand to david thank you

00:36:21,440 --> 00:36:27,839
for the talk

00:36:22,320 --> 00:36:27,839

YouTube URL: https://www.youtube.com/watch?v=yCNqk6s2Oow


