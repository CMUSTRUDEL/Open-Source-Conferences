Title: observabilityT0930 finalImprove Apache APISIX observability with Apache Skywalking
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Observability
Description: 
	Improve Apache APISIX observability with Apache Skywalking
Yuansheng Wang

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache APISIX is a cloud-native microservices API gateway, delivering the ultimate performance, security, open-source and scalable platform for all your APIs and microservices. Apache SkyWalking: an APM(application performance monitor) system, especially designed for microservices, cloud-native and container-based (Docker, Kubernetes, Mesos) architectures. Through the powerful plug-in mechanism of Apache APISIX, Apache Skywalking is quickly supported, so that we can see the complete life cycle of requests from the edge to the internal service. Monitor and manage each request in a visual way, and improve the observability of the service.

Open source enthusiasts, participated in and contributed to many open source projects, and wrote some open source e-books. Apache APISIX ppmc.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:29,279 --> 00:00:32,880
let's look at

00:00:30,000 --> 00:00:34,559
this page uh we are going to become a

00:00:32,880 --> 00:00:37,120
global winning in the

00:00:34,559 --> 00:00:38,800
world and the internet has short the

00:00:37,120 --> 00:00:42,719
distance between us

00:00:38,800 --> 00:00:46,079
such as this time the apache

00:00:42,719 --> 00:00:46,719
home i am in china but you do not in

00:00:46,079 --> 00:00:50,000
china

00:00:46,719 --> 00:00:52,399
but we can together we can see that the

00:00:50,000 --> 00:00:55,120
network quality is getting higher and

00:00:52,399 --> 00:00:55,920
higher and more and more dates are being

00:00:55,120 --> 00:00:58,480
trans

00:00:55,920 --> 00:00:59,520
uh transmitted especially in the last

00:00:58,480 --> 00:01:01,359
two years

00:00:59,520 --> 00:01:03,359
the growth of the digital information

00:01:01,359 --> 00:01:06,000
has been very rapid

00:01:03,359 --> 00:01:07,520
where i experience information is boom

00:01:06,000 --> 00:01:11,439
explosion

00:01:07,520 --> 00:01:14,640
each of us was also creating date

00:01:11,439 --> 00:01:17,840
at a faster rate everyone can feel that

00:01:14,640 --> 00:01:21,920
the 2g 3d and 5b

00:01:17,840 --> 00:01:21,920
have brought a great change to our life

00:01:22,159 --> 00:01:26,159
the way those states are exposed to the

00:01:25,119 --> 00:01:29,520
outside world

00:01:26,159 --> 00:01:31,040
is api even some video surveys had began

00:01:29,520 --> 00:01:35,119
to try use the edp

00:01:31,040 --> 00:01:37,920
protocol i am a backend developer

00:01:35,119 --> 00:01:39,680
i found that more and more enterprise

00:01:37,920 --> 00:01:42,720
are using microservice

00:01:39,680 --> 00:01:43,600
and the microsoft can cause a number of

00:01:42,720 --> 00:01:47,840
microservice

00:01:43,600 --> 00:01:50,720
instances so what exactly does most

00:01:47,840 --> 00:01:51,439
microservice provide the answer is is

00:01:50,720 --> 00:01:54,720
very

00:01:51,439 --> 00:01:58,000
simple api as

00:01:54,720 --> 00:02:00,399
number of microservices increase the

00:01:58,000 --> 00:02:01,840
dependence among them become more and

00:02:00,399 --> 00:02:04,560
more complex

00:02:01,840 --> 00:02:05,119
in the developer world what you'll see

00:02:04,560 --> 00:02:08,080
is the

00:02:05,119 --> 00:02:09,160
dependency between api which becomes

00:02:08,080 --> 00:02:12,319
becomes

00:02:09,160 --> 00:02:13,680
complicated if we still manage a large

00:02:12,319 --> 00:02:16,080
number of surveys

00:02:13,680 --> 00:02:16,800
directly on the virtual machine it's

00:02:16,080 --> 00:02:20,160
very

00:02:16,800 --> 00:02:23,040
difficult and unacceptable

00:02:20,160 --> 00:02:24,560
then we saw the new technology

00:02:23,040 --> 00:02:29,440
containers and the cloud

00:02:24,560 --> 00:02:32,640
native technology to build our

00:02:29,440 --> 00:02:35,440
software in an easy and unified way

00:02:32,640 --> 00:02:36,000
in addition the cloud-native elastic

00:02:35,440 --> 00:02:38,959
scaling

00:02:36,000 --> 00:02:39,519
feature is very helpful for uniform

00:02:38,959 --> 00:02:42,640
management

00:02:39,519 --> 00:02:42,640
the micro service

00:02:44,000 --> 00:02:48,239
i do not know how to close my

00:02:48,879 --> 00:02:51,840
my video

00:02:58,239 --> 00:03:01,599
we have note that under the cloud native

00:03:00,800 --> 00:03:05,360
the states of

00:03:01,599 --> 00:03:07,440
internal node change very frequently

00:03:05,360 --> 00:03:08,800
the state of those nodes is likely to

00:03:07,440 --> 00:03:12,400
change every minute

00:03:08,800 --> 00:03:12,400
and every second

00:03:14,239 --> 00:03:19,840
let me make a try

00:03:22,159 --> 00:03:24,640
click

00:03:25,440 --> 00:03:33,840
ok i close my video just show

00:03:34,319 --> 00:03:40,239
i will continue my topic

00:03:37,840 --> 00:03:41,120
the gateway project for the enterprise

00:03:40,239 --> 00:03:44,080
users

00:03:41,120 --> 00:03:45,519
each enterprise user will have some

00:03:44,080 --> 00:03:48,799
custom things

00:03:45,519 --> 00:03:52,239
for example a safety certificate

00:03:48,799 --> 00:03:54,720
and so on so we need a way to supply

00:03:52,239 --> 00:03:55,680
a simple and powerful economy for the

00:03:54,720 --> 00:03:59,840
future

00:03:55,680 --> 00:04:01,920
that's very friend and enterprise user

00:03:59,840 --> 00:04:04,560
we'll just mention some background

00:04:01,920 --> 00:04:05,519
if we want to support them how to

00:04:04,560 --> 00:04:09,599
resolve them

00:04:05,519 --> 00:04:11,519
technically then we can start a new

00:04:09,599 --> 00:04:15,439
question

00:04:11,519 --> 00:04:18,560
the new question is what features

00:04:15,439 --> 00:04:21,600
should the cloud native api gateway

00:04:18,560 --> 00:04:25,680
should have clear

00:04:21,600 --> 00:04:28,000
i mean a brave list first of all

00:04:25,680 --> 00:04:28,800
it does not have the basic api gateway

00:04:28,000 --> 00:04:31,600
feature

00:04:28,800 --> 00:04:33,120
which can bound handle the in-grass

00:04:31,600 --> 00:04:37,040
traffic normally

00:04:33,120 --> 00:04:40,000
the second is a cloud native api k3

00:04:37,040 --> 00:04:41,280
it might support the containers and able

00:04:40,000 --> 00:04:44,880
to support dynamic

00:04:41,280 --> 00:04:48,000
scale our user can freely adjust

00:04:44,880 --> 00:04:50,560
the number of gateway nodes

00:04:48,000 --> 00:04:51,720
since the gateway since the states of

00:04:50,560 --> 00:04:54,720
microsoft

00:04:51,720 --> 00:04:56,800
microservice node change frequently and

00:04:54,720 --> 00:04:59,440
there's the cloud native

00:04:56,800 --> 00:05:01,759
system when you support the basic

00:04:59,440 --> 00:05:05,199
features such as dynamic routing

00:05:01,759 --> 00:05:08,160
or dynamic load balancing

00:05:05,199 --> 00:05:09,120
another thing is the high performance

00:05:08,160 --> 00:05:12,400
and the low

00:05:09,120 --> 00:05:13,360
latency is important everyone is no

00:05:12,400 --> 00:05:16,479
longer

00:05:13,360 --> 00:05:17,440
investing in static routing or other

00:05:16,479 --> 00:05:20,720
implement

00:05:17,440 --> 00:05:23,280
implementations because every

00:05:20,720 --> 00:05:24,639
every time the routing is updating we

00:05:23,280 --> 00:05:27,840
need to restart

00:05:24,639 --> 00:05:27,840
is unacceptable

00:05:28,240 --> 00:05:34,560
at last we need to support the plugin

00:05:31,600 --> 00:05:36,000
user can import the new plugin auto

00:05:34,560 --> 00:05:40,160
according their needs

00:05:36,000 --> 00:05:43,680
for example we can the user can use lua

00:05:40,160 --> 00:05:47,680
code to implement new plugin if possible

00:05:43,680 --> 00:05:50,560
the low code is better local means that

00:05:47,680 --> 00:05:52,000
it cannot be customized without any

00:05:50,560 --> 00:05:54,160
right any encode

00:05:52,000 --> 00:05:56,560
then the api gateway can support its

00:05:54,160 --> 00:05:56,560
feature

00:06:00,479 --> 00:06:07,840
that's what the api series does

00:06:08,800 --> 00:06:12,319
based on those problem the api series

00:06:11,440 --> 00:06:15,600
has made more

00:06:12,319 --> 00:06:18,720
consider and implemented those points

00:06:15,600 --> 00:06:19,199
one by one so that the plastics and the

00:06:18,720 --> 00:06:22,479
cloud

00:06:19,199 --> 00:06:23,919
native are very compatible let's take a

00:06:22,479 --> 00:06:27,520
look at the table

00:06:23,919 --> 00:06:30,800
i believe you have noticed that latency

00:06:27,520 --> 00:06:32,160
here are very good only 0.2 million

00:06:30,800 --> 00:06:35,280
seconds

00:06:32,160 --> 00:06:38,080
finally in addition to the plaques

00:06:35,280 --> 00:06:39,759
the api takes on support plugin

00:06:38,080 --> 00:06:42,800
organization

00:06:39,759 --> 00:06:45,520
all user only needs to drag and drop

00:06:42,800 --> 00:06:46,160
to complete a certain feature i will

00:06:45,520 --> 00:06:50,479
play

00:06:46,160 --> 00:06:53,199
a video later show you how it works

00:06:50,479 --> 00:07:02,080
until now only episode support the

00:06:53,199 --> 00:07:05,199
plugin organs

00:07:02,080 --> 00:07:08,240
okay the next one which

00:07:05,199 --> 00:07:09,919
we talked about is the history of tapati

00:07:08,240 --> 00:07:13,039
api six

00:07:09,919 --> 00:07:13,039
let me take a look at

00:07:14,400 --> 00:07:21,199
recall here are the main time points

00:07:17,680 --> 00:07:24,000
of rpt api 6 for example

00:07:21,199 --> 00:07:24,000
we open source

00:07:24,639 --> 00:07:32,400
after another round we include

00:07:28,840 --> 00:07:36,800
cncf landscape and donate

00:07:32,400 --> 00:07:36,800
the apache in october last year

00:07:36,880 --> 00:07:43,280
it's about nine months of the incubation

00:07:40,160 --> 00:07:46,639
and the support for more plugins has

00:07:43,280 --> 00:07:49,680
for example the sky walkings

00:07:46,639 --> 00:07:50,400
apic is successfully graduated from

00:07:49,680 --> 00:07:53,840
apache

00:07:50,400 --> 00:07:59,520
and become a top-level project in july

00:07:53,840 --> 00:08:02,400
this year

00:07:59,520 --> 00:08:03,360
last then let's take a look at the

00:08:02,400 --> 00:08:08,720
information

00:08:03,360 --> 00:08:12,000
architecture of the apache api 6

00:08:08,720 --> 00:08:14,479
that's the picture by

00:08:12,000 --> 00:08:16,240
looking at its basic architecture of

00:08:14,479 --> 00:08:18,879
apache api 6

00:08:16,240 --> 00:08:19,919
you can know how close it is to the

00:08:18,879 --> 00:08:22,800
cloud

00:08:19,919 --> 00:08:24,720
native through this picture we can

00:08:22,800 --> 00:08:27,840
roughly divide it into

00:08:24,720 --> 00:08:31,520
two parts one is a date plane and the

00:08:27,840 --> 00:08:31,520
other is the control plane

00:08:33,200 --> 00:08:40,880
the configuration center is the of

00:08:36,479 --> 00:08:43,360
api six use the edcd for the edcd

00:08:40,880 --> 00:08:44,159
i believe many people are familiar with

00:08:43,360 --> 00:08:46,959
it

00:08:44,159 --> 00:08:48,160
we use it as a configuration center in

00:08:46,959 --> 00:08:52,080
addition it supports

00:08:48,160 --> 00:08:55,760
high available availability

00:08:52,080 --> 00:08:58,880
very well the date plan is actually

00:08:55,760 --> 00:09:02,720
some stateless notes it depends the date

00:08:58,880 --> 00:09:06,720
from the edcd cluster the control plane

00:09:02,720 --> 00:09:09,600
can actually some stateless node 2.

00:09:06,720 --> 00:09:10,800
they set any node in the etcd cluster

00:09:09,600 --> 00:09:15,440
and the same

00:09:10,800 --> 00:09:18,399
to save and distribute the configuration

00:09:15,440 --> 00:09:19,040
one more thing about ak6 support very

00:09:18,399 --> 00:09:22,480
well

00:09:19,040 --> 00:09:24,800
at the dynamic scale if our data plan is

00:09:22,480 --> 00:09:28,000
busy then we can increase

00:09:24,800 --> 00:09:30,800
the the api nodes

00:09:28,000 --> 00:09:32,480
if the date plan is ideal so we can

00:09:30,800 --> 00:09:37,839
reduce the number of nodes

00:09:32,480 --> 00:09:37,839
those features are already built in

00:09:38,720 --> 00:09:46,640
okay let's take a look at the

00:09:42,399 --> 00:09:49,600
ecology of the api 6 first of all

00:09:46,640 --> 00:09:50,399
for the cloud native api g3 it's much

00:09:49,600 --> 00:09:54,080
big

00:09:50,399 --> 00:09:56,640
compared with the cloud platform if

00:09:54,080 --> 00:09:59,040
it needs to work well with the container

00:09:56,640 --> 00:10:01,519
like the kpis or stocker

00:09:59,040 --> 00:10:03,360
virtual machines on the cloud such as

00:10:01,519 --> 00:10:06,880
cloud platform host

00:10:03,360 --> 00:10:07,440
need to be supported therefore support

00:10:06,880 --> 00:10:10,560
for the

00:10:07,440 --> 00:10:11,760
virtual machine physical machine is also

00:10:10,560 --> 00:10:15,839
needed

00:10:11,760 --> 00:10:18,880
help user to make more transmits

00:10:15,839 --> 00:10:22,320
transmit cloud gateway system which is

00:10:18,880 --> 00:10:26,320
very very valuable

00:10:22,320 --> 00:10:29,519
in addition to the family x86 structure

00:10:26,320 --> 00:10:32,720
the apache episodes also support

00:10:29,519 --> 00:10:33,200
the arm structure on the right side we

00:10:32,720 --> 00:10:35,440
can see

00:10:33,200 --> 00:10:36,399
many other familiar open source

00:10:35,440 --> 00:10:40,320
components

00:10:36,399 --> 00:10:43,519
such as promises graphana

00:10:40,320 --> 00:10:45,760
kafka and so on you can see

00:10:43,519 --> 00:10:46,880
from the center of the picture the core

00:10:45,760 --> 00:10:49,360
of ap 6

00:10:46,880 --> 00:10:51,920
is meaning about the plugins those

00:10:49,360 --> 00:10:55,680
plugins can be combined in any way

00:10:51,920 --> 00:10:55,680
so the plugin organization

00:10:55,760 --> 00:11:00,079
happy and interesting finally about

00:10:58,959 --> 00:11:03,200
begin

00:11:00,079 --> 00:11:04,480
let me show you a video show you what is

00:11:03,200 --> 00:11:07,279
the plugin

00:11:04,480 --> 00:11:07,279
organization

00:11:07,519 --> 00:11:09,920
here

00:11:12,839 --> 00:11:18,640
organization user

00:11:15,200 --> 00:11:21,760
drop and plug in the name is ui blocker

00:11:18,640 --> 00:11:25,600
and drop another plugin

00:11:21,760 --> 00:11:28,880
is a condition and connect them

00:11:25,600 --> 00:11:29,920
the third connect plugin is the fault

00:11:28,880 --> 00:11:33,760
injection

00:11:29,920 --> 00:11:33,760
and the connection when success

00:11:34,079 --> 00:11:38,880
kafka logger plugin and the connection

00:11:40,839 --> 00:11:46,000
zone

00:11:43,040 --> 00:11:49,279
so that sets the right value rules for

00:11:46,000 --> 00:11:52,639
example loading exe

00:11:49,279 --> 00:11:57,839
and rules and records

00:11:52,639 --> 00:12:01,040
set condition conditions

00:11:57,839 --> 00:12:04,800
and then we need to update the

00:12:01,040 --> 00:12:08,240
fall rejection heater dag

00:12:04,800 --> 00:12:08,240
return to handler

00:12:08,399 --> 00:12:12,320
let me make a try very fine

00:12:13,040 --> 00:12:16,000
okay heat

00:12:22,959 --> 00:12:27,639
that's the part of api 6 then we can

00:12:25,920 --> 00:12:31,839
talk about the

00:12:27,639 --> 00:12:36,720
observability i wrote a basic

00:12:31,839 --> 00:12:36,720
definition let me take a look at

00:12:37,440 --> 00:12:44,079
generate detail generator

00:12:41,040 --> 00:12:45,680
telemetry dates for all api they are

00:12:44,079 --> 00:12:48,399
very important

00:12:45,680 --> 00:12:50,800
those teller telemetry to provide the

00:12:48,399 --> 00:12:52,480
observability of the api behavior we can

00:12:50,800 --> 00:12:55,200
use them to troubleshooting

00:12:52,480 --> 00:12:56,320
opportunity our application and let's

00:12:55,200 --> 00:12:59,200
serve the

00:12:56,320 --> 00:13:01,519
developer to not only to do anything for

00:12:59,200 --> 00:13:01,519
this

00:13:01,760 --> 00:13:08,000
those data can be roughly divided into

00:13:04,079 --> 00:13:09,680
three categories the first is the metric

00:13:08,000 --> 00:13:11,040
meaning count the number of the

00:13:09,680 --> 00:13:14,000
repetitions

00:13:11,040 --> 00:13:14,399
time distribute distribution and so on

00:13:14,000 --> 00:13:17,120
and

00:13:14,399 --> 00:13:17,920
will be aggregates the origin date for

00:13:17,120 --> 00:13:21,200
the logging

00:13:17,920 --> 00:13:23,440
meaning the common analog information

00:13:21,200 --> 00:13:24,959
which is contains the system error or

00:13:23,440 --> 00:13:28,320
the process information

00:13:24,959 --> 00:13:29,040
they are very useful for the ops at the

00:13:28,320 --> 00:13:32,160
end

00:13:29,040 --> 00:13:34,079
we need the tracing analysis only in

00:13:32,160 --> 00:13:35,519
this way we can display the calling

00:13:34,079 --> 00:13:38,480
relationship between

00:13:35,519 --> 00:13:38,480
different nodes

00:13:39,519 --> 00:13:44,880
let me take a look at how the ipsec is

00:13:43,279 --> 00:13:48,160
choose

00:13:44,880 --> 00:13:51,600
we can got this result

00:13:48,160 --> 00:13:52,720
for the matrix way many use the prom

00:13:51,600 --> 00:13:55,760
issues

00:13:52,720 --> 00:13:57,440
if we choose plum issues we may use the

00:13:55,760 --> 00:14:01,680
promise use graphana

00:13:57,440 --> 00:14:05,519
and the plus outer manager vote logging

00:14:01,680 --> 00:14:08,480
mainly use the erk way

00:14:05,519 --> 00:14:08,959
mainly use the it based on the elastic

00:14:08,480 --> 00:14:11,760
search

00:14:08,959 --> 00:14:13,040
is easy to read and pass the arrow or

00:14:11,760 --> 00:14:15,199
access log

00:14:13,040 --> 00:14:16,480
for the tracing analysis we're mainly

00:14:15,199 --> 00:14:19,839
choosing the

00:14:16,480 --> 00:14:19,839
apache sky walking

00:14:20,000 --> 00:14:24,320
here we show a picture

00:14:25,600 --> 00:14:28,639
so that's why i just mentioned that the

00:14:27,839 --> 00:14:32,959
tree

00:14:28,639 --> 00:14:35,839
is important but why

00:14:32,959 --> 00:14:36,639
that's a picture we can discredit our

00:14:35,839 --> 00:14:40,000
relationship

00:14:36,639 --> 00:14:42,880
with a very simple

00:14:40,000 --> 00:14:44,800
example we need to know something what

00:14:42,880 --> 00:14:47,760
is the relationship between the

00:14:44,800 --> 00:14:49,519
micro service we need to know that the

00:14:47,760 --> 00:14:52,560
four parts our request

00:14:49,519 --> 00:14:53,760
and we need to know that whether there

00:14:52,560 --> 00:14:57,120
is a problem at

00:14:53,760 --> 00:14:58,320
the each node in the request process

00:14:57,120 --> 00:15:01,760
and the need to know the step

00:14:58,320 --> 00:15:03,600
information of each node

00:15:01,760 --> 00:15:05,920
if the treating of the gateway is

00:15:03,600 --> 00:15:09,199
missing is very bad

00:15:05,920 --> 00:15:13,360
because it's not a full path because

00:15:09,199 --> 00:15:16,560
here is the entry

00:15:13,360 --> 00:15:19,519
why we need the api

00:15:16,560 --> 00:15:19,519
observability

00:15:20,320 --> 00:15:23,680
no here

00:15:24,480 --> 00:15:29,360
why wait command the apache sky walking

00:15:29,600 --> 00:15:38,720
let me introduce it let me introduce it

00:15:34,959 --> 00:15:41,199
the first is a apm system it's specially

00:15:38,720 --> 00:15:44,480
designed for the microservice

00:15:41,199 --> 00:15:48,000
and it's a cloud native and container

00:15:44,480 --> 00:15:51,759
based architecture also

00:15:48,000 --> 00:15:55,839
our functions are very different but our

00:15:51,759 --> 00:15:55,839
environment is the same

00:15:58,639 --> 00:16:02,079
let's first talk about the technique or

00:16:00,480 --> 00:16:05,519
the wrong intuition of

00:16:02,079 --> 00:16:08,800
sky walking the first is it supports

00:16:05,519 --> 00:16:09,440
multi-gallon props it support golang

00:16:08,800 --> 00:16:12,720
python

00:16:09,440 --> 00:16:16,720
pp and so on even it supports

00:16:12,720 --> 00:16:20,000
lua language i think you can use it

00:16:16,720 --> 00:16:22,480
boundly the second is it supports

00:16:20,000 --> 00:16:23,680
many open source projects for example

00:16:22,480 --> 00:16:26,639
the tomcat

00:16:23,680 --> 00:16:26,639
or other things

00:16:27,680 --> 00:16:35,440
we still can find more

00:16:30,959 --> 00:16:35,440
more advantage for example

00:16:35,600 --> 00:16:40,000
it spots the micro kernel it's very

00:16:38,880 --> 00:16:43,279
useful

00:16:40,000 --> 00:16:48,079
very useful and

00:16:43,279 --> 00:16:52,240
for the micro kernel plugin architecture

00:16:48,079 --> 00:16:54,639
so you can choose your database

00:16:52,240 --> 00:16:57,279
for example you can choose a tidbit my

00:16:54,639 --> 00:17:00,880
circle or h2

00:16:57,279 --> 00:17:00,880
that is the one we would like

00:17:01,600 --> 00:17:05,839
there was one thing i want to say

00:17:04,640 --> 00:17:09,039
something

00:17:05,839 --> 00:17:12,400
it can support to alarm directly

00:17:09,039 --> 00:17:15,839
it's very easy for

00:17:12,400 --> 00:17:18,319
for something just learn the sky walking

00:17:15,839 --> 00:17:21,360
it's easy to use

00:17:18,319 --> 00:17:25,039
at the end the skywalking

00:17:21,360 --> 00:17:25,039
dashboard is beautiful

00:17:25,679 --> 00:17:33,840
it's beautiful

00:17:34,640 --> 00:17:38,960
uh here are some other reason at least

00:17:37,360 --> 00:17:41,760
here

00:17:38,960 --> 00:17:42,720
why we recommended the apache sky

00:17:41,760 --> 00:17:46,400
walking

00:17:42,720 --> 00:17:47,120
because it was a apache foundation

00:17:46,400 --> 00:17:50,559
project

00:17:47,120 --> 00:17:52,960
same as the api 6 and software

00:17:50,559 --> 00:17:54,320
foundation project we have the same

00:17:52,960 --> 00:17:57,440
genius

00:17:54,320 --> 00:18:01,520
and we will follow the

00:17:57,440 --> 00:18:03,520
community over code we can grow together

00:18:01,520 --> 00:18:05,360
for the apache skywalking community is

00:18:03,520 --> 00:18:09,039
very active

00:18:05,360 --> 00:18:12,480
that's very very important for every

00:18:09,039 --> 00:18:14,240
every open source project if you choose

00:18:12,480 --> 00:18:16,400
open source project

00:18:14,240 --> 00:18:19,039
i suggest you mainly pay attention to

00:18:16,400 --> 00:18:22,320
this part which sounds

00:18:19,039 --> 00:18:26,720
open tracing and i think

00:18:22,320 --> 00:18:26,720
more and more product will use this

00:18:26,880 --> 00:18:33,600
protocol design phone scale

00:18:30,160 --> 00:18:37,760
that's very useful too a modern system

00:18:33,600 --> 00:18:37,760
might support the dynamic scale

00:18:38,480 --> 00:18:45,520
okay let's take a look at the apache

00:18:42,000 --> 00:18:45,520
skywalking dashboard

00:18:45,840 --> 00:18:49,600
when you start is on the apache

00:18:47,840 --> 00:18:52,640
skywalking dashboard

00:18:49,600 --> 00:18:53,600
here is the home page you can can you

00:18:52,640 --> 00:18:57,600
can view

00:18:53,600 --> 00:18:59,840
the global page in this page we can

00:18:57,600 --> 00:19:01,200
see the most important things for

00:18:59,840 --> 00:19:04,320
example

00:19:01,200 --> 00:19:09,600
here is the slow service

00:19:04,320 --> 00:19:13,360
and something is the unhealthy service

00:19:09,600 --> 00:19:14,559
see how uh help us to find them and put

00:19:13,360 --> 00:19:17,919
them on

00:19:14,559 --> 00:19:19,120
on the home page then if we want to fix

00:19:17,919 --> 00:19:21,840
someone for example

00:19:19,120 --> 00:19:23,200
we want we want to fix this one then we

00:19:21,840 --> 00:19:27,360
can click it

00:19:23,200 --> 00:19:30,480
then we got this page in this page we

00:19:27,360 --> 00:19:33,280
it will show more detail of the

00:19:30,480 --> 00:19:33,919
service for example we can got the

00:19:33,280 --> 00:19:37,440
service

00:19:33,919 --> 00:19:38,320
average response time or the success

00:19:37,440 --> 00:19:41,280
rate

00:19:38,320 --> 00:19:41,280
is very useful

00:19:43,200 --> 00:19:49,360
for this page it's very very

00:19:46,320 --> 00:19:52,000
interesting this typology

00:19:49,360 --> 00:19:52,960
map is very invisible look at this

00:19:52,000 --> 00:19:55,840
picture

00:19:52,960 --> 00:19:56,799
and does it feel familiar if you are a

00:19:55,840 --> 00:20:01,039
network

00:19:56,799 --> 00:20:04,400
manager i think you should know that

00:20:01,039 --> 00:20:04,400
it's more like the network

00:20:04,840 --> 00:20:09,360
typology through this map

00:20:07,360 --> 00:20:10,400
we can see the relationship between all

00:20:09,360 --> 00:20:13,520
service nodes

00:20:10,400 --> 00:20:15,600
and how they stays between them

00:20:13,520 --> 00:20:16,640
on the left and the right side we can

00:20:15,600 --> 00:20:21,200
see the matrix of

00:20:16,640 --> 00:20:25,280
service after selecting a service node

00:20:21,200 --> 00:20:28,320
it's very useful one way one who click

00:20:25,280 --> 00:20:32,720
want to check something detail and

00:20:28,320 --> 00:20:35,440
click the trace tab

00:20:32,720 --> 00:20:36,799
each several trades will display here if

00:20:35,440 --> 00:20:40,159
we want to know the detail

00:20:36,799 --> 00:20:42,880
information then we can get heading here

00:20:40,159 --> 00:20:42,880
it's useful

00:20:45,200 --> 00:20:50,240
currently we're mainly using the sky

00:20:48,159 --> 00:20:53,280
working for tracing other sides

00:20:50,240 --> 00:20:56,720
and improve the observability of

00:20:53,280 --> 00:20:58,799
api 6. when we used more we found that

00:20:56,720 --> 00:21:01,200
the sky working can do more things than

00:20:58,799 --> 00:21:05,679
we expect as before

00:21:01,200 --> 00:21:08,559
for example some surveys metrics

00:21:05,679 --> 00:21:10,240
we saw right now i'm thinking about this

00:21:08,559 --> 00:21:12,559
question

00:21:10,240 --> 00:21:13,919
will skype working with a supporter log

00:21:12,559 --> 00:21:17,360
connection later

00:21:13,919 --> 00:21:20,799
i think this is meaningful

00:21:17,360 --> 00:21:23,600
there is one case for example

00:21:20,799 --> 00:21:24,080
we found lots of requests and some of

00:21:23,600 --> 00:21:27,919
them

00:21:24,080 --> 00:21:30,799
the response code of them is 500

00:21:27,919 --> 00:21:32,080
then we need to load the error log and i

00:21:30,799 --> 00:21:35,120
will get some

00:21:32,080 --> 00:21:38,640
try to match try to find which of them

00:21:35,120 --> 00:21:41,840
are related to the matrix and

00:21:38,640 --> 00:21:45,039
the response code is 500 then

00:21:41,840 --> 00:21:46,640
we can make a tree to conform who is the

00:21:45,039 --> 00:21:49,200
requester

00:21:46,640 --> 00:21:51,120
at the end we can put all of the

00:21:49,200 --> 00:21:55,520
information

00:21:51,120 --> 00:21:58,559
to the ops and then our ops

00:21:55,520 --> 00:22:02,559
can deal with it this is very common

00:21:58,559 --> 00:22:02,559
and it is useful

00:22:04,720 --> 00:22:11,120
at the end say something if you have

00:22:08,320 --> 00:22:12,799
any question please leave a message on

00:22:11,120 --> 00:22:16,000
the mail list on the github

00:22:12,799 --> 00:22:18,159
issues here are the apache official

00:22:16,000 --> 00:22:21,600
address for the api 6

00:22:18,159 --> 00:22:24,640
and sky walking thank you so much for

00:22:21,600 --> 00:22:25,280
listening i'm wishing you many thanks

00:22:24,640 --> 00:22:27,840
for your

00:22:25,280 --> 00:22:27,840
time

00:22:34,720 --> 00:22:41,840
okay thank you

00:22:42,720 --> 00:22:46,240
if you have any questions you can leave

00:22:44,880 --> 00:22:55,840
a message

00:22:46,240 --> 00:22:55,840
maybe i can

00:23:06,640 --> 00:23:23,840
okay thank you i will leave bye bye

00:23:35,760 --> 00:23:37,840

YouTube URL: https://www.youtube.com/watch?v=DleVJwPs4i4


