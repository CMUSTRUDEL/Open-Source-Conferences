Title: Wengines, Workflows, and 2 years of advanced data processing in Apache OODT.
Publication date: 2013-10-18
Playlist: Apachecon NA 2013 - day 3
Description: 
	Chris Mattmann
ApacheCon NA 2013
Apache in Science
Captions: 
	00:00:00,000 --> 00:00:06,660
the in science Trek so I'm going to be

00:00:02,190 --> 00:00:10,080
talking to start out and so I'm i'll be

00:00:06,660 --> 00:00:12,540
talking to you guys about when Jen's

00:00:10,080 --> 00:00:14,969
workflows in the well longer than two

00:00:12,540 --> 00:00:17,900
years of data processing in ODT but I

00:00:14,969 --> 00:00:24,930
can only remember the last two so let's

00:00:17,900 --> 00:00:27,660
get started so yeah I'm not going to

00:00:24,930 --> 00:00:30,269
talk much about apache ODT except in my

00:00:27,660 --> 00:00:31,710
way which is different than I think that

00:00:30,269 --> 00:00:33,149
other people have talked about like

00:00:31,710 --> 00:00:36,750
they've given you enough background on

00:00:33,149 --> 00:00:39,090
ODT so i'll give you my background i'll

00:00:36,750 --> 00:00:40,620
talk to you guys about how initially

00:00:39,090 --> 00:00:44,399
thought about supporting workflows in

00:00:40,620 --> 00:00:47,730
ODT and we called that workflow one and

00:00:44,399 --> 00:00:50,850
why that didn't exactly work for us and

00:00:47,730 --> 00:00:53,579
like what we had to change or what we

00:00:50,850 --> 00:00:57,660
had to support in addition to that which

00:00:53,579 --> 00:00:59,280
we call when jen and then just give you

00:00:57,660 --> 00:01:00,899
some of the history and status of it

00:00:59,280 --> 00:01:06,180
where rat and then i'm going to try and

00:01:00,899 --> 00:01:07,950
break into a demo and wish me look so

00:01:06,180 --> 00:01:10,350
most you guys in this room know me if I

00:01:07,950 --> 00:01:12,689
look around so but this is like my

00:01:10,350 --> 00:01:15,420
standard slide so not everyone knows me

00:01:12,689 --> 00:01:18,270
i'm a senior computer scientist in JPL

00:01:15,420 --> 00:01:20,009
and pasadena i teach at USC i teach

00:01:18,270 --> 00:01:22,020
classes in search engines and

00:01:20,009 --> 00:01:26,100
information retrieval that's graduate

00:01:22,020 --> 00:01:28,710
level and software architectures and I'm

00:01:26,100 --> 00:01:30,360
heavily involved in Apache so on the an

00:01:28,710 --> 00:01:33,479
executive officer in the foundation I'm

00:01:30,360 --> 00:01:35,430
the treasurer which doesn't really mean

00:01:33,479 --> 00:01:37,860
much except it's just a bunch of

00:01:35,430 --> 00:01:39,780
pressure that constructs but um besides

00:01:37,860 --> 00:01:41,670
that I'm involved in a number of other

00:01:39,780 --> 00:01:44,640
projects some which you guys have heard

00:01:41,670 --> 00:01:46,409
about here at Apache con notch which

00:01:44,640 --> 00:01:49,350
eventually grow into policing and solar

00:01:46,409 --> 00:01:50,640
tika and then I mentor like every

00:01:49,350 --> 00:01:52,049
project that comes in the incubator now

00:01:50,640 --> 00:01:55,020
so if you have an incubator project i'm

00:01:52,049 --> 00:01:56,850
probably mentoring it and that's my son

00:01:55,020 --> 00:01:59,659
and he's uber cute and i love that

00:01:56,850 --> 00:02:04,500
picture so um let me give you some

00:01:59,659 --> 00:02:06,090
history of Apache ODT my style so there

00:02:04,500 --> 00:02:08,610
was the old days

00:02:06,090 --> 00:02:11,930
the beginning and it started with these

00:02:08,610 --> 00:02:15,390
three people one of which is here today

00:02:11,930 --> 00:02:18,780
mr. Crichton mr. dan Crichton and this

00:02:15,390 --> 00:02:20,310
guy named steve hughes and this other

00:02:18,780 --> 00:02:22,290
guy sean kelly who changes his hair

00:02:20,310 --> 00:02:24,299
color a lot now which we really like and

00:02:22,290 --> 00:02:26,970
I think this is his latest kreller

00:02:24,299 --> 00:02:29,040
because i got it off facebook so i'm not

00:02:26,970 --> 00:02:32,040
sure if it's different than that and so

00:02:29,040 --> 00:02:34,650
what what they were focused on were kind

00:02:32,040 --> 00:02:37,849
of two first I think the two use cases

00:02:34,650 --> 00:02:40,140
of ODT that are still really relevant

00:02:37,849 --> 00:02:42,690
one of which is information integration

00:02:40,140 --> 00:02:44,640
and so information integration to them

00:02:42,690 --> 00:02:47,849
was there are all these distributed

00:02:44,640 --> 00:02:50,670
archives throughout the US and wherever

00:02:47,849 --> 00:02:52,650
and they were working on these various

00:02:50,670 --> 00:02:54,900
projects that involve the fact that they

00:02:52,650 --> 00:02:56,760
couldn't put data or they didn't want to

00:02:54,900 --> 00:02:58,620
muck with the way that data got put into

00:02:56,760 --> 00:03:00,930
those archives they had existing

00:02:58,620 --> 00:03:02,849
processes and ingest things in place but

00:03:00,930 --> 00:03:05,700
they wanted to expose the information

00:03:02,849 --> 00:03:07,530
from those archives like like so one

00:03:05,700 --> 00:03:09,629
classic example the Dan talks about a

00:03:07,530 --> 00:03:12,780
lot is the planetary data system right

00:03:09,629 --> 00:03:15,450
it's this federated you know distributed

00:03:12,780 --> 00:03:18,359
set of nodes broken down by science

00:03:15,450 --> 00:03:19,620
discipline like some rings data or some

00:03:18,359 --> 00:03:21,389
small bodies data and they're in

00:03:19,620 --> 00:03:24,090
different places and then they wanted to

00:03:21,389 --> 00:03:26,220
like search across it you know in a

00:03:24,090 --> 00:03:28,410
federated way and so forth another

00:03:26,220 --> 00:03:30,569
example is like the work you've heard on

00:03:28,410 --> 00:03:32,190
the ER n project which was very similar

00:03:30,569 --> 00:03:36,150
in a component of that called Ernie

00:03:32,190 --> 00:03:37,799
which was sharing specimen data in a

00:03:36,150 --> 00:03:39,630
very similar way across the number of

00:03:37,799 --> 00:03:42,690
cancer research institutes in yada yada

00:03:39,630 --> 00:03:44,760
and there was what I'll call the first

00:03:42,690 --> 00:03:46,590
generation then I have broken this down

00:03:44,760 --> 00:03:48,450
into generations but i'll call the first

00:03:46,590 --> 00:03:50,190
generation of the cast which you guys

00:03:48,450 --> 00:03:51,989
will hear about a component of today

00:03:50,190 --> 00:03:53,940
which was the first generation data

00:03:51,989 --> 00:03:58,889
processing system they use for the

00:03:53,940 --> 00:04:00,359
palomar i think test bed and you'll hear

00:03:58,889 --> 00:04:02,220
about that today which is like the

00:04:00,359 --> 00:04:04,109
initial foray into data processing when

00:04:02,220 --> 00:04:06,150
you can mess with the ingest processes

00:04:04,109 --> 00:04:07,560
and when they didn't have something in

00:04:06,150 --> 00:04:10,230
place and then you wanted it to still

00:04:07,560 --> 00:04:12,750
integrate into the ODT system and then

00:04:10,230 --> 00:04:15,120
there was the hard man which all kind of

00:04:12,750 --> 00:04:16,680
and well okay and we go back so so a lot

00:04:15,120 --> 00:04:17,690
of the work was for like from nineteen

00:04:16,680 --> 00:04:20,450
ninety nine or

00:04:17,690 --> 00:04:22,250
when I Aditi started to like 2003 and

00:04:20,450 --> 00:04:24,110
that was like the alcohol the golden

00:04:22,250 --> 00:04:26,240
years of those types of those types of

00:04:24,110 --> 00:04:29,120
systems and a lot of major contributions

00:04:26,240 --> 00:04:32,360
that came out then Hardman came along

00:04:29,120 --> 00:04:35,990
Shawn hard man and that's him drink some

00:04:32,360 --> 00:04:41,330
wine right there and so he he he came

00:04:35,990 --> 00:04:43,460
along and he was tasked by Dan to to do

00:04:41,330 --> 00:04:45,650
the second-generation data processing

00:04:43,460 --> 00:04:48,110
system the cast to make it better to

00:04:45,650 --> 00:04:49,490
make it like away from core bus and the

00:04:48,110 --> 00:04:52,550
stuff like Davis like him out into our

00:04:49,490 --> 00:04:55,100
MI and xmlrpc and then we were funded by

00:04:52,550 --> 00:04:56,750
that he was funded by the cios office to

00:04:55,100 --> 00:04:58,910
do some of this work because they were

00:04:56,750 --> 00:05:01,280
interested in in in data archiving and

00:04:58,910 --> 00:05:03,080
maybe you know cataloging and and and

00:05:01,280 --> 00:05:04,820
putting metadata for for some of these

00:05:03,080 --> 00:05:07,610
repositories around the laboratory and

00:05:04,820 --> 00:05:09,110
also they were really interested in

00:05:07,610 --> 00:05:10,670
databases at the time and so they were

00:05:09,110 --> 00:05:12,860
interested that when they archive things

00:05:10,670 --> 00:05:14,210
that they would run like processors or

00:05:12,860 --> 00:05:16,220
they call them which effectively were

00:05:14,210 --> 00:05:18,560
workflows on the data as it was coming

00:05:16,220 --> 00:05:20,810
in or you know as it was coming out and

00:05:18,560 --> 00:05:23,600
so we'll talk about that component that

00:05:20,810 --> 00:05:26,300
second generation Kaz you know when it

00:05:23,600 --> 00:05:28,490
comes along so then so some errands and

00:05:26,300 --> 00:05:30,410
I you sit in the back or whatever like

00:05:28,490 --> 00:05:32,180
we're the babies of the group you know

00:05:30,410 --> 00:05:35,360
that have kind of grown up in this group

00:05:32,180 --> 00:05:38,660
at JPL you know i would say really

00:05:35,360 --> 00:05:40,880
getting heavily into working or coming

00:05:38,660 --> 00:05:44,090
into our own with ODT since like 2005

00:05:40,880 --> 00:05:46,310
and and i'll call what we did the the

00:05:44,090 --> 00:05:49,100
third generation or the next generation

00:05:46,310 --> 00:05:50,480
Kaz the more better better one which

00:05:49,100 --> 00:05:53,150
which is the stuff that you're going to

00:05:50,480 --> 00:05:55,910
hear about today and has been going on

00:05:53,150 --> 00:05:59,090
since about two thousand and five four

00:05:55,910 --> 00:06:00,200
and i'll talk about why and the types of

00:05:59,090 --> 00:06:02,090
things that we did which was splitting

00:06:00,200 --> 00:06:04,310
the Kaz up into different components and

00:06:02,090 --> 00:06:05,930
why we had to do that and like what made

00:06:04,310 --> 00:06:07,850
sense about that so as far as I'm

00:06:05,930 --> 00:06:09,080
concerned that's the history of ott for

00:06:07,850 --> 00:06:10,820
what you guys care about and i'm not

00:06:09,080 --> 00:06:12,620
going to talk anything else about ODT so

00:06:10,820 --> 00:06:14,240
here's the context this is what I want

00:06:12,620 --> 00:06:17,240
to talk to you about I'm going to talk

00:06:14,240 --> 00:06:19,010
to you about our workflow management

00:06:17,240 --> 00:06:21,380
component which was part of the third

00:06:19,010 --> 00:06:23,570
generation of Kaz which was one of the

00:06:21,380 --> 00:06:25,370
components that we split Kaz up into

00:06:23,570 --> 00:06:27,140
when we broke it down into three kind of

00:06:25,370 --> 00:06:27,810
fundamental services file management

00:06:27,140 --> 00:06:29,940
final

00:06:27,810 --> 00:06:33,690
data management metadata extraction and

00:06:29,940 --> 00:06:35,400
yada yada workflow processing these are

00:06:33,690 --> 00:06:36,720
independent services you don't need one

00:06:35,400 --> 00:06:38,430
to run the other but you can combine

00:06:36,720 --> 00:06:41,790
them together like transformers to do

00:06:38,430 --> 00:06:43,530
interesting things and so the workflow

00:06:41,790 --> 00:06:44,880
was the second one but the workflow

00:06:43,530 --> 00:06:46,620
manager we didn't want it to be like a

00:06:44,880 --> 00:06:48,360
traditional workflow manager that also

00:06:46,620 --> 00:06:51,300
understood about resources like what

00:06:48,360 --> 00:06:53,520
things to put jobs on like if it needed

00:06:51,300 --> 00:06:54,570
to run on a node that had Python or if

00:06:53,520 --> 00:06:57,000
it needed around on something that I had

00:06:54,570 --> 00:06:59,610
IDL to us that was a separate enough

00:06:57,000 --> 00:07:01,080
problem that we forked that off into its

00:06:59,610 --> 00:07:02,880
own component we call that resource

00:07:01,080 --> 00:07:04,680
manager and to us the people that

00:07:02,880 --> 00:07:05,850
maintain those resource management

00:07:04,680 --> 00:07:08,010
components are more like sis

00:07:05,850 --> 00:07:09,660
administrators or people that understand

00:07:08,010 --> 00:07:11,460
DevOps and the types of things that you

00:07:09,660 --> 00:07:12,990
need to know like to profile your

00:07:11,460 --> 00:07:14,190
resources and know what jobs should run

00:07:12,990 --> 00:07:16,350
on that stuff and the people that

00:07:14,190 --> 00:07:18,510
understand workflow are potentially

00:07:16,350 --> 00:07:20,400
scientists depending on how interactive

00:07:18,510 --> 00:07:23,490
they are and how you know what type of

00:07:20,400 --> 00:07:25,200
discovery you're doing and or like data

00:07:23,490 --> 00:07:27,270
processing people that are running

00:07:25,200 --> 00:07:28,680
workflows at production and have put it

00:07:27,270 --> 00:07:30,030
into scale like some of the talks you

00:07:28,680 --> 00:07:31,710
guys have heard about in the past day or

00:07:30,030 --> 00:07:35,010
so you know for these missions and

00:07:31,710 --> 00:07:36,930
things like that so i also i'm going to

00:07:35,010 --> 00:07:38,669
make a point during my talk to also

00:07:36,930 --> 00:07:41,760
point out all the places that this

00:07:38,669 --> 00:07:44,340
documentation already exists on a web

00:07:41,760 --> 00:07:46,380
page so that you know if people are

00:07:44,340 --> 00:07:48,330
interested and you know we get a lot of

00:07:46,380 --> 00:07:50,729
comments our documentation sucks I make

00:07:48,330 --> 00:07:53,250
it myself so I want to point everybody

00:07:50,729 --> 00:07:55,020
to wear our documentation exists so that

00:07:53,250 --> 00:07:56,760
if you want to make it better or at

00:07:55,020 --> 00:07:58,530
least see what's there so that you can

00:07:56,760 --> 00:08:01,380
make it better or tell us how to make it

00:07:58,530 --> 00:08:04,919
better than you can so that's the URL to

00:08:01,380 --> 00:08:07,169
wear this is this is the extension point

00:08:04,919 --> 00:08:09,150
or kind of i'll call it level zero

00:08:07,169 --> 00:08:10,590
architectural diagram for the workflow

00:08:09,150 --> 00:08:11,729
manager these are the only things that

00:08:10,590 --> 00:08:13,680
you have to care about when you're

00:08:11,729 --> 00:08:15,750
dealing with that an ODT there's a

00:08:13,680 --> 00:08:16,950
client I don't expect everybody to read

00:08:15,750 --> 00:08:19,740
this but it's a client-server

00:08:16,950 --> 00:08:21,450
architecture workflow managers can scale

00:08:19,740 --> 00:08:23,460
out horizontally by adding more of them

00:08:21,450 --> 00:08:26,280
so Roy's hanging around here so we're

00:08:23,460 --> 00:08:29,250
Mystik dr.s so it follows very much his

00:08:26,280 --> 00:08:30,720
principles you know of scale out if you

00:08:29,250 --> 00:08:31,979
need more workflow managers you add more

00:08:30,720 --> 00:08:33,479
workflow managers if you need more

00:08:31,979 --> 00:08:34,979
clients to connect to the workflow

00:08:33,479 --> 00:08:37,020
manager you add more clients to connect

00:08:34,979 --> 00:08:39,030
to various workflow managers clients are

00:08:37,020 --> 00:08:40,349
transient they come in and out workflow

00:08:39,030 --> 00:08:41,110
managers themselves may also be

00:08:40,349 --> 00:08:42,610
transient

00:08:41,110 --> 00:08:43,659
but most of the time they're not you

00:08:42,610 --> 00:08:46,000
know they're they're going to hang

00:08:43,659 --> 00:08:47,769
around workflow managers retrieves

00:08:46,000 --> 00:08:50,620
workflow models from a workflow

00:08:47,769 --> 00:08:52,690
repository here workflow repositories a

00:08:50,620 --> 00:08:54,279
home for workflow models which

00:08:52,690 --> 00:08:57,279
effectively our data flowing control

00:08:54,279 --> 00:08:58,839
flow models the reason that we have a

00:08:57,279 --> 00:09:00,250
repository interface for them is the

00:08:58,839 --> 00:09:03,070
people get store workflows in different

00:09:00,250 --> 00:09:06,700
ways a very easy way if you're on a

00:09:03,070 --> 00:09:10,779
laptop a lot like me or on a plane is in

00:09:06,700 --> 00:09:12,130
XML in a file a very a very easy way if

00:09:10,779 --> 00:09:14,260
most of the ways you're going to be

00:09:12,130 --> 00:09:16,750
interacting with the workflow model is

00:09:14,260 --> 00:09:18,610
by building user interfaces on top is to

00:09:16,750 --> 00:09:20,050
store that stuff in a database to store

00:09:18,610 --> 00:09:21,970
the workflow models in a database you

00:09:20,050 --> 00:09:23,470
can you know persist it you're always

00:09:21,970 --> 00:09:24,760
interacting it with a GUI that's a very

00:09:23,470 --> 00:09:25,930
nice way to store workflow models

00:09:24,760 --> 00:09:27,640
sometimes it kind of sucks from the

00:09:25,930 --> 00:09:28,899
command line though you know because

00:09:27,640 --> 00:09:31,510
anytime you want to add a new task

00:09:28,899 --> 00:09:33,370
instead of opening up a file you have to

00:09:31,510 --> 00:09:35,380
write a sequel query or do whatever or

00:09:33,370 --> 00:09:37,420
you know Ted to add or you know modify

00:09:35,380 --> 00:09:38,860
workflow model so for us we saw that

00:09:37,420 --> 00:09:40,570
people were going to do different things

00:09:38,860 --> 00:09:41,860
there so we factor that out into an

00:09:40,570 --> 00:09:43,480
extension point we can very easily

00:09:41,860 --> 00:09:44,920
switch between different ways for

00:09:43,480 --> 00:09:47,769
persisting and representing the workflow

00:09:44,920 --> 00:09:50,470
models we have more flow engine which

00:09:47,769 --> 00:09:53,019
basically encapsulate the the control

00:09:50,470 --> 00:09:54,399
flow model really controlling a little

00:09:53,019 --> 00:09:56,620
bit of data flow for the ways that

00:09:54,399 --> 00:09:58,420
workflow models themselves are executed

00:09:56,620 --> 00:10:01,149
and marshaled through their execution

00:09:58,420 --> 00:10:02,620
and the engine persists information

00:10:01,149 --> 00:10:06,490
about workflows to workflow instance

00:10:02,620 --> 00:10:08,529
repository which can also be a database

00:10:06,490 --> 00:10:10,180
it could be suitably seen or solar if

00:10:08,529 --> 00:10:11,800
you want to search those workflow

00:10:10,180 --> 00:10:13,990
instance repositories and like search

00:10:11,800 --> 00:10:16,570
them and find you know work workflow

00:10:13,990 --> 00:10:18,220
stuff later and it could even be like an

00:10:16,570 --> 00:10:20,110
in-memory thing if you're just you know

00:10:18,220 --> 00:10:22,149
if you're running on GPUs and you've got

00:10:20,110 --> 00:10:23,890
you know tons of memory and you just

00:10:22,149 --> 00:10:29,589
want to you know put it could be that

00:10:23,890 --> 00:10:32,709
too so here's some terminology here's

00:10:29,589 --> 00:10:34,180
how we describe or here's when we talk

00:10:32,709 --> 00:10:37,899
about workflows this is a vocabulary

00:10:34,180 --> 00:10:39,459
that we use in ODT workflows our models

00:10:37,899 --> 00:10:41,260
of workflows they are not running

00:10:39,459 --> 00:10:43,690
workflows they're not things you know

00:10:41,260 --> 00:10:45,370
that executes yet a workflow has a set

00:10:43,690 --> 00:10:48,220
of workflow tasks that are associated

00:10:45,370 --> 00:10:49,480
with it tests have a configuration the

00:10:48,220 --> 00:10:50,080
way I like to think of it is if you have

00:10:49,480 --> 00:10:54,070
a command line

00:10:50,080 --> 00:10:55,690
program in UNIX and you have a set of

00:10:54,070 --> 00:10:58,270
environment variables which are more

00:10:55,690 --> 00:11:00,040
kind of static parameters that you don't

00:10:58,270 --> 00:11:01,840
change as often but they might be like

00:11:00,040 --> 00:11:04,360
the configuration parameters that's what

00:11:01,840 --> 00:11:05,710
workflow tasks configuration is its kind

00:11:04,360 --> 00:11:06,880
of the things that don't change this

00:11:05,710 --> 00:11:08,920
often but it's a way to provide

00:11:06,880 --> 00:11:12,460
information to workflow tasks and record

00:11:08,920 --> 00:11:13,690
that workflow tasks have a workflow test

00:11:12,460 --> 00:11:15,700
instance that's the thing that actually

00:11:13,690 --> 00:11:17,350
implements what it does if it's a script

00:11:15,700 --> 00:11:20,440
if it's a you know called a web service

00:11:17,350 --> 00:11:22,450
whatever workflow tasks have pre and

00:11:20,440 --> 00:11:23,620
post conditions and the appearing post

00:11:22,450 --> 00:11:25,030
conditions can be implemented in

00:11:23,620 --> 00:11:26,860
different ways too so there's work flow

00:11:25,030 --> 00:11:31,180
condition implement instances that

00:11:26,860 --> 00:11:33,670
implement their behavior and so running

00:11:31,180 --> 00:11:36,580
versions of workflows our workflow

00:11:33,670 --> 00:11:39,790
instances in ODT and really what it is

00:11:36,580 --> 00:11:41,920
is it's a work flow model some state or

00:11:39,790 --> 00:11:45,100
area in that model that we've gotten to

00:11:41,920 --> 00:11:46,840
the current wall clock time for the

00:11:45,100 --> 00:11:48,700
tests that we're in the overall wall

00:11:46,840 --> 00:11:51,220
clock time for the workflow itself and

00:11:48,700 --> 00:11:54,640
other types of state information for it

00:11:51,220 --> 00:11:56,380
rut being run and so events that are

00:11:54,640 --> 00:11:59,170
sent to the workflow manager may kick

00:11:56,380 --> 00:12:03,090
off one or more workflow instances you

00:11:59,170 --> 00:12:07,000
know for that okay have some terminology

00:12:03,090 --> 00:12:08,230
so that's raj buya and so i want to talk

00:12:07,000 --> 00:12:10,450
to you guys a little bit about the

00:12:08,230 --> 00:12:12,820
beginning you know with that in hand the

00:12:10,450 --> 00:12:15,520
beginning of workflow and ott so let's

00:12:12,820 --> 00:12:17,680
roll back the clock to 2004 chris and

00:12:15,520 --> 00:12:19,480
Paul learn about workflows in their

00:12:17,680 --> 00:12:21,610
office when they're playing like poker

00:12:19,480 --> 00:12:23,590
not at JPL of course you know but

00:12:21,610 --> 00:12:26,080
somewhere else you know or online things

00:12:23,590 --> 00:12:27,400
they're talking about workflows to and

00:12:26,080 --> 00:12:29,410
we're learning about it and we read a

00:12:27,400 --> 00:12:31,030
paper by booyah on a taxonomy of

00:12:29,410 --> 00:12:32,950
workflow management systems for grid

00:12:31,030 --> 00:12:35,500
computing it had like a hundred and

00:12:32,950 --> 00:12:37,210
sixty workflow management systems or

00:12:35,500 --> 00:12:39,010
something and to date in my mind is like

00:12:37,210 --> 00:12:42,370
the canonical description of everything

00:12:39,010 --> 00:12:44,650
you know so yeah so read that paper so

00:12:42,370 --> 00:12:47,350
we also were reading about work flow

00:12:44,650 --> 00:12:49,090
patterns and so there's nice very nice

00:12:47,350 --> 00:12:50,950
work flow pattern site which used to be

00:12:49,090 --> 00:12:52,540
i think in the netherlands and now it's

00:12:50,950 --> 00:12:54,070
like different and whatever it's that

00:12:52,540 --> 00:12:55,210
like work flow patterns calm that was

00:12:54,070 --> 00:12:56,860
also really good it taught us about

00:12:55,210 --> 00:12:59,500
branch and bounds and what that meant

00:12:56,860 --> 00:13:02,470
and all that stuff so

00:12:59,500 --> 00:13:04,870
yeah that's rush so the beginning or

00:13:02,470 --> 00:13:06,310
more so in the beginning Paul is more

00:13:04,870 --> 00:13:07,630
interested in work clothes than Chris

00:13:06,310 --> 00:13:08,920
and he talks to everybody about

00:13:07,630 --> 00:13:11,260
workflows and acts like he knows

00:13:08,920 --> 00:13:13,450
everything and whatever and Chris

00:13:11,260 --> 00:13:15,610
doesn't care and Chris but then Chris

00:13:13,450 --> 00:13:18,820
gets hired on this project called O CO

00:13:15,610 --> 00:13:20,800
and so I become interested in work

00:13:18,820 --> 00:13:22,540
clothes because of that because o co has

00:13:20,800 --> 00:13:25,330
very complex workflows and i'll talk to

00:13:22,540 --> 00:13:28,900
you about this this is in 2005 oh no a

00:13:25,330 --> 00:13:31,240
mission so iowa i saya signed up to be

00:13:28,900 --> 00:13:34,960
the lead process control system

00:13:31,240 --> 00:13:36,310
developer for 40 co and my concern as i

00:13:34,960 --> 00:13:38,410
started to look at the requirements for

00:13:36,310 --> 00:13:42,280
o co which was running like 10,000 jobs

00:13:38,410 --> 00:13:45,100
per day which was you know pulling in I

00:13:42,280 --> 00:13:47,050
think 100 or no producing 150 terabytes

00:13:45,100 --> 00:13:51,000
in like the first three months which in

00:13:47,050 --> 00:13:54,280
2005 was a lot of data you know for that

00:13:51,000 --> 00:13:56,290
150 terabytes was like our nominal sort

00:13:54,280 --> 00:13:57,520
of level zero level one processing and

00:13:56,290 --> 00:13:58,960
then it was going to get bigger after

00:13:57,520 --> 00:14:00,280
that we had like a science computing

00:13:58,960 --> 00:14:01,960
facility and people were going to run

00:14:00,280 --> 00:14:04,030
different algorithms and anyways it was

00:14:01,960 --> 00:14:05,680
just going to get really bigger so I was

00:14:04,030 --> 00:14:07,570
worried because the existing has and

00:14:05,680 --> 00:14:10,839
I'll tell you its properties we felt

00:14:07,570 --> 00:14:13,000
couldn't support o co because existing

00:14:10,839 --> 00:14:15,970
caz--was monolithic like it was a single

00:14:13,000 --> 00:14:17,800
component it wasn't in order for it to

00:14:15,970 --> 00:14:20,050
run like a database had to be up and

00:14:17,800 --> 00:14:22,630
running like to even test it it was hard

00:14:20,050 --> 00:14:24,220
to develop on your own or with the

00:14:22,630 --> 00:14:25,990
resources that we had which were people

00:14:24,220 --> 00:14:27,880
that were in disconnected operation on

00:14:25,990 --> 00:14:30,100
their laptops a lot it didn't facilitate

00:14:27,880 --> 00:14:32,110
sort of easy transition and I have some

00:14:30,100 --> 00:14:34,330
information about this stuff so Paul and

00:14:32,110 --> 00:14:38,980
I brainstormed in that office that we

00:14:34,330 --> 00:14:40,839
were used to be in about what to okay so

00:14:38,980 --> 00:14:42,490
based on buus paper in the work flow

00:14:40,839 --> 00:14:44,320
pattern stuff and whatever these are

00:14:42,490 --> 00:14:47,680
like the three main things that we

00:14:44,320 --> 00:14:49,089
wanted you know our new workflow manager

00:14:47,680 --> 00:14:50,500
that we were designing that eventually

00:14:49,089 --> 00:14:52,390
became this thing called workflow one to

00:14:50,500 --> 00:14:54,040
do we wanted to model execute and

00:14:52,390 --> 00:14:55,450
monitor groups of one or more workflow

00:14:54,040 --> 00:14:57,280
tasks like that was like the core

00:14:55,450 --> 00:15:00,190
requirement and that's the task could be

00:14:57,280 --> 00:15:02,470
a script file a Java process some

00:15:00,190 --> 00:15:05,589
external command a call a webservice you

00:15:02,470 --> 00:15:08,110
know whatever and we wanted workflow to

00:15:05,589 --> 00:15:09,910
be represented as graphs which we didn't

00:15:08,110 --> 00:15:11,560
really have sets of graphs that

00:15:09,910 --> 00:15:13,030
you know we're supported in the calves

00:15:11,560 --> 00:15:15,310
at the time like the second generation

00:15:13,030 --> 00:15:17,860
calves all the work flow tests were

00:15:15,310 --> 00:15:20,620
defined in a database and they ran they

00:15:17,860 --> 00:15:22,180
only could run if you ingested a file so

00:15:20,620 --> 00:15:24,730
you couldn't run them unless you

00:15:22,180 --> 00:15:26,890
ingested a file and so so the use cases

00:15:24,730 --> 00:15:28,570
on ocio weren't always that we would

00:15:26,890 --> 00:15:31,000
ingest a file and something that would

00:15:28,570 --> 00:15:33,160
run some of our use cases were we had an

00:15:31,000 --> 00:15:35,260
operator that would periodically be told

00:15:33,160 --> 00:15:37,420
by some science investigator I need to

00:15:35,260 --> 00:15:39,820
process everything for this day or set

00:15:37,420 --> 00:15:43,390
of orbits or we need to process this for

00:15:39,820 --> 00:15:45,250
you know I don't know we have a PhD

00:15:43,390 --> 00:15:48,130
student who's getting you know her PhD

00:15:45,250 --> 00:15:50,500
and you know I don't know studying

00:15:48,130 --> 00:15:51,940
spectra spectroscopy and you know we

00:15:50,500 --> 00:15:53,740
need to run these dates for her whatever

00:15:51,940 --> 00:15:55,900
a point is it wasn't only associated

00:15:53,740 --> 00:15:58,030
with the file and so we had to separate

00:15:55,900 --> 00:15:59,770
that and the triggers and the way that

00:15:58,030 --> 00:16:04,660
we modeled you know workflows you know

00:15:59,770 --> 00:16:06,160
from that association so the the calves

00:16:04,660 --> 00:16:07,750
at the time was able to handle these

00:16:06,160 --> 00:16:10,030
sequential data pipelines I talked about

00:16:07,750 --> 00:16:13,690
but you know executing these ad hoc ones

00:16:10,030 --> 00:16:16,900
what was was more difficult um the other

00:16:13,690 --> 00:16:20,440
thing the other thing was the database

00:16:16,900 --> 00:16:21,640
that was a big problem for us because we

00:16:20,440 --> 00:16:25,810
didn't know what database we were going

00:16:21,640 --> 00:16:27,790
to use I was I was a nut committer at

00:16:25,810 --> 00:16:29,440
the time that this was happening I was

00:16:27,790 --> 00:16:31,390
learning about we seen I was learning

00:16:29,440 --> 00:16:33,940
about solar and I wanted to use solar

00:16:31,390 --> 00:16:35,680
hey all right I wanted to learn it

00:16:33,940 --> 00:16:37,960
exists then loosened it I wanted to use

00:16:35,680 --> 00:16:40,180
leucine I was like why can't we store

00:16:37,960 --> 00:16:42,310
our metadata and we've seen why does it

00:16:40,180 --> 00:16:44,650
have to go in a database you know and

00:16:42,310 --> 00:16:46,180
because I like this no sequel flat model

00:16:44,650 --> 00:16:47,740
as opposed to you know and a lot of our

00:16:46,180 --> 00:16:49,390
metadata could be represented that way

00:16:47,740 --> 00:16:51,820
is this sort of key multivalued

00:16:49,390 --> 00:16:54,400
structure of information and sets of

00:16:51,820 --> 00:16:56,230
keys and things like that so we had at

00:16:54,400 --> 00:16:58,360
least in order to make me effective or

00:16:56,230 --> 00:17:03,910
to use me I had to break out of that

00:16:58,360 --> 00:17:05,530
mold or whatever the graph is important

00:17:03,910 --> 00:17:06,940
the work flow patterns we also wanted to

00:17:05,530 --> 00:17:08,350
capture data flow we didn't feel we're

00:17:06,940 --> 00:17:10,030
doing a very good job of capturing data

00:17:08,350 --> 00:17:12,810
flow and when I talking about by data

00:17:10,030 --> 00:17:15,010
flow is I'm talking about this task

00:17:12,810 --> 00:17:18,910
depends on these outputs from another

00:17:15,010 --> 00:17:20,650
task this task has this set of static

00:17:18,910 --> 00:17:22,360
configuration a nice set of dynamic

00:17:20,650 --> 00:17:24,280
properties and things like that so the

00:17:22,360 --> 00:17:26,440
way the data flows through the graph and

00:17:24,280 --> 00:17:27,640
the interdependencies between it on the

00:17:26,440 --> 00:17:29,950
test so i'm not talking about control

00:17:27,640 --> 00:17:31,060
flow but i'm talking about data so we

00:17:29,950 --> 00:17:34,420
didn't feel that we're doing a good job

00:17:31,060 --> 00:17:37,120
of capturing that we wanted to represent

00:17:34,420 --> 00:17:39,280
workflow in xml not necessarily use an

00:17:37,120 --> 00:17:41,230
existing xml format we looked at b pill

00:17:39,280 --> 00:17:43,510
and some other stuff at the time or the

00:17:41,230 --> 00:17:45,100
predecessor to that i think and what he

00:17:43,510 --> 00:17:46,690
or whatever it was with that one

00:17:45,100 --> 00:17:48,520
standard to me I forget what it was but

00:17:46,690 --> 00:17:50,350
I looked at it and I was just like doing

00:17:48,520 --> 00:17:52,330
xml sit-ups and I was just like I don't

00:17:50,350 --> 00:17:54,190
like this I I don't think anyone's going

00:17:52,330 --> 00:17:56,230
to specify a workflow using this I just

00:17:54,190 --> 00:17:57,970
I wasn't going to do it and I felt that

00:17:56,230 --> 00:17:59,080
we could do a better way of just simply

00:17:57,970 --> 00:18:00,340
capturing the things that I was

00:17:59,080 --> 00:18:02,980
interested in and told you guys about

00:18:00,340 --> 00:18:04,630
with respect to that vocabulary and the

00:18:02,980 --> 00:18:08,890
extension point model and so forth and

00:18:04,630 --> 00:18:11,320
so we devised our own xml schema for for

00:18:08,890 --> 00:18:12,430
you know our workflows in ott and i'm

00:18:11,320 --> 00:18:13,930
going to show it to you when i pull up

00:18:12,430 --> 00:18:15,940
my command line terminal here and you

00:18:13,930 --> 00:18:20,800
know towards the last 15 minutes of the

00:18:15,940 --> 00:18:22,330
time um right so this implied a bunch of

00:18:20,800 --> 00:18:23,380
things I'm kind of getting you guys to

00:18:22,330 --> 00:18:24,550
the extension points where they came

00:18:23,380 --> 00:18:26,170
from that we would have workflow

00:18:24,550 --> 00:18:27,700
repositories which go and fetch the

00:18:26,170 --> 00:18:28,990
workflow description from that we would

00:18:27,700 --> 00:18:30,910
have different workflow executors and

00:18:28,990 --> 00:18:33,070
engines we would have different ways to

00:18:30,910 --> 00:18:34,270
execute workflows and so the

00:18:33,070 --> 00:18:35,620
proliferation of all the different

00:18:34,270 --> 00:18:37,360
workflow engine suggests to us that

00:18:35,620 --> 00:18:39,310
there's different ways and that people

00:18:37,360 --> 00:18:40,780
use to execute you know work closely and

00:18:39,310 --> 00:18:42,820
there are different systems there's

00:18:40,780 --> 00:18:44,740
Pegasus there's condor you know there's

00:18:42,820 --> 00:18:47,260
wings there's the ODT one there's all

00:18:44,740 --> 00:18:48,640
these things and so even at the time

00:18:47,260 --> 00:18:50,860
back then there was a lot of work flow

00:18:48,640 --> 00:18:53,320
you know formats or I'm sorry

00:18:50,860 --> 00:18:55,060
technologies and so people were also

00:18:53,320 --> 00:18:56,770
telling us like hey things like

00:18:55,060 --> 00:18:57,790
sundridge engine we're coming out at the

00:18:56,770 --> 00:18:59,050
time and other stuff and they're like

00:18:57,790 --> 00:19:02,350
why don't you use this and we're like oh

00:18:59,050 --> 00:19:05,110
my god okay so so CEO came and they were

00:19:02,350 --> 00:19:07,570
like we're using g exec g exec is this

00:19:05,110 --> 00:19:10,260
like thing attached to ganglia them at

00:19:07,570 --> 00:19:13,000
massey road and it's this like multi

00:19:10,260 --> 00:19:14,590
it's just like parallel execution system

00:19:13,000 --> 00:19:16,240
that's almost like a workflow in itself

00:19:14,590 --> 00:19:17,650
and so we had to figure out how to plug

00:19:16,240 --> 00:19:18,970
into that too so anyways we figured out

00:19:17,650 --> 00:19:20,860
that people had different execution

00:19:18,970 --> 00:19:22,420
engines but we just we didn't want to

00:19:20,860 --> 00:19:24,220
pick any one and we wanted to just build

00:19:22,420 --> 00:19:25,750
this as an interface so that we can do

00:19:24,220 --> 00:19:27,610
different you know workflow executions

00:19:25,750 --> 00:19:30,130
and then we wanted to make sure that our

00:19:27,610 --> 00:19:32,470
system was associated with events that

00:19:30,130 --> 00:19:34,269
events triggered workflows and that file

00:19:32,470 --> 00:19:35,499
ingestion was simply a single event

00:19:34,269 --> 00:19:38,289
but not the only event that could

00:19:35,499 --> 00:19:40,239
trigger something or whatever okay so

00:19:38,289 --> 00:19:43,299
I've already kind of said how this was

00:19:40,239 --> 00:19:45,669
different from the existing one the

00:19:43,299 --> 00:19:49,359
other thing that I think was important

00:19:45,669 --> 00:19:51,459
for us was that just separating dynamic

00:19:49,359 --> 00:19:53,440
information to a workflow versus static

00:19:51,459 --> 00:19:54,909
task configuration so for us static test

00:19:53,440 --> 00:19:57,369
configuration would be like the

00:19:54,909 --> 00:19:59,379
algorithm version it doesn't change

00:19:57,369 --> 00:20:01,899
based on per instance runs of that

00:19:59,379 --> 00:20:04,239
actual you know workflow or the path to

00:20:01,899 --> 00:20:06,099
be executable for it and things like

00:20:04,239 --> 00:20:07,419
that and so we would configure that in

00:20:06,099 --> 00:20:09,639
our workflow manager as a task

00:20:07,419 --> 00:20:11,619
configuration things that on a per run

00:20:09,639 --> 00:20:13,029
basis don't change the types of things

00:20:11,619 --> 00:20:14,979
that change if you think about a

00:20:13,029 --> 00:20:16,690
workflow just as a simple analogy to a

00:20:14,979 --> 00:20:19,119
Linux command line program or a workflow

00:20:16,690 --> 00:20:20,619
task to a simple analogy as a command

00:20:19,119 --> 00:20:22,389
line program the stuff that changes is

00:20:20,619 --> 00:20:24,700
like the command line arguments those

00:20:22,389 --> 00:20:27,159
are on per run you know executions of

00:20:24,700 --> 00:20:28,599
things that you change you know the

00:20:27,159 --> 00:20:31,059
properties and so we wanted to have that

00:20:28,599 --> 00:20:33,279
same notion in our workflow tasks the

00:20:31,059 --> 00:20:35,469
ability to pass sort of dynamic metadata

00:20:33,279 --> 00:20:37,539
or event information when we kick things

00:20:35,469 --> 00:20:40,089
off and let that be read to and written

00:20:37,539 --> 00:20:41,409
read from and written to by all the

00:20:40,089 --> 00:20:43,299
tasks in the workflow so they could

00:20:41,409 --> 00:20:44,589
change things and they could flag and

00:20:43,299 --> 00:20:48,219
switch each other and support the data

00:20:44,589 --> 00:20:49,839
flow that we were talking about right so

00:20:48,219 --> 00:20:52,149
what do you do anywhere I workflow you

00:20:49,839 --> 00:20:53,859
had an off to workflow engine great so

00:20:52,149 --> 00:20:56,799
the first version of the workflow engine

00:20:53,859 --> 00:20:58,479
that we built was this one that was

00:20:56,799 --> 00:21:00,700
associated with a configurable thread

00:20:58,479 --> 00:21:02,529
pool I fell in love with Java dot util

00:21:00,700 --> 00:21:04,059
dot concurrent when Doug lay wrote it I

00:21:02,529 --> 00:21:06,219
thought it was amazing and thread pool

00:21:04,059 --> 00:21:08,200
executors and so to me that was it I I

00:21:06,219 --> 00:21:10,209
thought that you know and i'll tell you

00:21:08,200 --> 00:21:13,149
guys the problems that we have with that

00:21:10,209 --> 00:21:14,889
later not always but in certain

00:21:13,149 --> 00:21:19,359
scenarios and use cases like why that

00:21:14,889 --> 00:21:20,440
doesn't always work right right so

00:21:19,359 --> 00:21:22,269
what's the external interface to the

00:21:20,440 --> 00:21:24,639
system our external interface initially

00:21:22,269 --> 00:21:26,139
xml-rpc was popular in 2005 it's still

00:21:24,639 --> 00:21:28,259
popular in many ways and a lot most of

00:21:26,139 --> 00:21:31,359
the ODT component still support xml-rpc

00:21:28,259 --> 00:21:33,759
interfaces as our core interface xml-rpc

00:21:31,359 --> 00:21:34,959
is like a lightweight um well it depends

00:21:33,759 --> 00:21:39,579
on we consider lightweight I mean it's

00:21:34,959 --> 00:21:41,440
not like it it's XML over HTTP and the

00:21:39,579 --> 00:21:41,929
XML describes the methods the remote

00:21:41,440 --> 00:21:43,309
procedure

00:21:41,929 --> 00:21:44,779
all method in it and stuff the thing I

00:21:43,309 --> 00:21:46,639
liked about is it was written I had

00:21:44,779 --> 00:21:48,799
things written clients are into him like

00:21:46,639 --> 00:21:50,899
almost every library five hunter a lava

00:21:48,799 --> 00:21:54,379
whatever and we could find a very easy

00:21:50,899 --> 00:21:56,539
one to use you know in Java um nowadays

00:21:54,379 --> 00:21:57,889
a lot of our you know workflow stuff and

00:21:56,539 --> 00:22:00,019
I'll talk about later we have like rest

00:21:57,889 --> 00:22:03,860
interfaces bill with jax-rs to it and

00:22:00,019 --> 00:22:05,029
things like that right so how do we put

00:22:03,860 --> 00:22:06,649
it all together we put it together the

00:22:05,029 --> 00:22:07,970
same visual way that I told you a

00:22:06,649 --> 00:22:09,830
workflow manager has one or more

00:22:07,970 --> 00:22:12,049
workflow repositories to obtain an

00:22:09,830 --> 00:22:13,429
abstract workflow descriptions from one

00:22:12,049 --> 00:22:14,539
or more word for lunch and stew xq work

00:22:13,429 --> 00:22:15,919
clothes on and one or more external

00:22:14,539 --> 00:22:20,179
interfaces that are those even have

00:22:15,919 --> 00:22:22,549
based interfaces okay so we called this

00:22:20,179 --> 00:22:26,649
workflow one okay and it worked great

00:22:22,549 --> 00:22:30,710
for OC oh this is the OCIO standard

00:22:26,649 --> 00:22:34,700
standard processing pipeline through our

00:22:30,710 --> 00:22:38,539
level 1b product which was all of our

00:22:34,700 --> 00:22:40,309
nominal processing wasn't our 10,000

00:22:38,539 --> 00:22:44,480
jobs a day but it was on the order of

00:22:40,309 --> 00:22:46,220
thousands of jobs per day or at least

00:22:44,480 --> 00:22:49,039
many hundreds I can't remember exactly

00:22:46,220 --> 00:22:50,659
but yeah so it's fairly complex it had

00:22:49,039 --> 00:22:52,340
some wrench and bounds you know with

00:22:50,659 --> 00:22:54,019
respect to it but the real property that

00:22:52,340 --> 00:22:55,639
made this really mean a bowl to our

00:22:54,019 --> 00:22:57,470
first workflow system was it's

00:22:55,639 --> 00:22:59,779
consistent processing that we could

00:22:57,470 --> 00:23:02,600
model its processing what it would do

00:22:59,779 --> 00:23:04,279
per day so in our thread pool workflow

00:23:02,600 --> 00:23:06,470
engine that we originally wrote we have

00:23:04,279 --> 00:23:08,119
one thread per entire workflow instance

00:23:06,470 --> 00:23:10,730
I thought of the threat as the shepherd

00:23:08,119 --> 00:23:12,350
right you handle workflow instance off

00:23:10,730 --> 00:23:14,059
to him and he's the shepherd and he

00:23:12,350 --> 00:23:16,340
walks through the workflow instance

00:23:14,059 --> 00:23:18,230
ensuring conditions are met and that

00:23:16,340 --> 00:23:21,590
things are tagged and that state is

00:23:18,230 --> 00:23:23,869
updated but it's his job really okay so

00:23:21,590 --> 00:23:25,759
so this works really well for routine

00:23:23,869 --> 00:23:28,190
production pipeline processing where we

00:23:25,759 --> 00:23:30,289
know that you know some X between a and

00:23:28,190 --> 00:23:32,360
B bounds of jobs per day are going to

00:23:30,289 --> 00:23:34,970
run where a is sort of a good minimal

00:23:32,360 --> 00:23:36,889
bound on the max threads per jvn right

00:23:34,970 --> 00:23:38,990
which is totally OS dependent but you

00:23:36,889 --> 00:23:41,570
know a good just nice round number to

00:23:38,990 --> 00:23:44,539
use in linnekar Linux is like 256

00:23:41,570 --> 00:23:47,419
threads in a single JVM for that okay

00:23:44,539 --> 00:23:49,460
and if you need more then you add more

00:23:47,419 --> 00:23:51,259
JVMs you add more workflow managers

00:23:49,460 --> 00:23:53,059
running on different JVM that have their

00:23:51,259 --> 00:23:54,679
own thread pool you know thread

00:23:53,059 --> 00:23:56,929
and things like that and if you you know

00:23:54,679 --> 00:23:59,840
you just do scale out that way with

00:23:56,929 --> 00:24:01,279
respect to that and be sort of the

00:23:59,840 --> 00:24:04,460
maximal number of threads that doesn't

00:24:01,279 --> 00:24:07,070
found the JVM for that so this thread

00:24:04,460 --> 00:24:08,779
pool which i'm going to show you guys an

00:24:07,070 --> 00:24:10,279
example of right there it's hard to see

00:24:08,779 --> 00:24:11,809
but there's a URL to where i'm going to

00:24:10,279 --> 00:24:13,850
show you the example from i'm going to

00:24:11,809 --> 00:24:17,059
pull up this work flow properties was

00:24:13,850 --> 00:24:20,450
based on Java util concurrent and it

00:24:17,059 --> 00:24:22,340
spread cool executor executor class okay

00:24:20,450 --> 00:24:24,440
so literally to use the thread pool

00:24:22,340 --> 00:24:26,749
workflow engine and ODT you define these

00:24:24,440 --> 00:24:28,070
six properties or you don't touch the

00:24:26,749 --> 00:24:29,899
ones that we've already defined for you

00:24:28,070 --> 00:24:31,639
and the ones we've already defined for

00:24:29,899 --> 00:24:33,139
you give you six threads to play around

00:24:31,639 --> 00:24:35,960
with so you could run at any one time

00:24:33,139 --> 00:24:37,549
six workflows you know out of the box

00:24:35,960 --> 00:24:38,990
which for all the examples you don't

00:24:37,549 --> 00:24:41,210
care about doing anything more than that

00:24:38,990 --> 00:24:45,110
you'll never use six concurrent anyway

00:24:41,210 --> 00:24:47,090
so who cares but you can tweak the min

00:24:45,110 --> 00:24:49,639
pool size the max pool sides the ways

00:24:47,090 --> 00:24:51,710
the threads grow whether or not if you

00:24:49,639 --> 00:24:54,379
reach your max pool you start queuing

00:24:51,710 --> 00:24:57,169
threads up and different Q models for

00:24:54,379 --> 00:24:58,759
that the amount of time that you wait in

00:24:57,169 --> 00:25:00,649
between preconditions if you don't have

00:24:58,759 --> 00:25:01,820
an unlimited key what's your max Q sigh

00:25:00,649 --> 00:25:03,529
just before it actually just starts

00:25:01,820 --> 00:25:05,240
dropping threads if you have new things

00:25:03,529 --> 00:25:07,820
sexy so it's fairly configurable we

00:25:05,240 --> 00:25:09,350
didn't expose i would say fifty percent

00:25:07,820 --> 00:25:11,720
of the properties from thread pool

00:25:09,350 --> 00:25:12,740
executor you know we exposed these

00:25:11,720 --> 00:25:14,029
because we felt they were the most

00:25:12,740 --> 00:25:16,309
important and then there were the things

00:25:14,029 --> 00:25:19,340
that we were constantly tweaking you

00:25:16,309 --> 00:25:21,230
know for that another thing about

00:25:19,340 --> 00:25:22,580
workflow one is that branch and bounds

00:25:21,230 --> 00:25:24,769
and workflow one was supported

00:25:22,580 --> 00:25:27,379
implicitly so you could do branch and

00:25:24,769 --> 00:25:29,149
bounds and so what you would do is if in

00:25:27,379 --> 00:25:32,869
my branch and bounds basically what i

00:25:29,149 --> 00:25:34,940
mean is is one workflow test that splits

00:25:32,869 --> 00:25:37,369
off into two different sort of workflow

00:25:34,940 --> 00:25:39,860
tasks branching and then potentially

00:25:37,369 --> 00:25:41,450
goes off and maybe merges back in the

00:25:39,860 --> 00:25:43,190
end to a single workflow task or maybe

00:25:41,450 --> 00:25:45,740
doesn't but that's the branch and bound

00:25:43,190 --> 00:25:48,049
sort of comes at the end so the way that

00:25:45,740 --> 00:25:50,869
you would support that in ODT workflow

00:25:48,049 --> 00:25:52,460
one is you define sort of more than one

00:25:50,869 --> 00:25:55,279
workflow that's mapped to an event knee

00:25:52,460 --> 00:25:57,740
so when you set that event the branch

00:25:55,279 --> 00:26:01,100
happens more more than one workflow gets

00:25:57,740 --> 00:26:04,129
kicked off in parallel right and what

00:26:01,100 --> 00:26:06,220
you define is the last up so so your

00:26:04,129 --> 00:26:07,450
event would map to say say you had to

00:26:06,220 --> 00:26:09,789
things you wanted to branch off into two

00:26:07,450 --> 00:26:11,620
workflows you define an event that had

00:26:09,789 --> 00:26:14,890
to work flow instances or work flow

00:26:11,620 --> 00:26:17,080
models map to it and you'd add a third

00:26:14,890 --> 00:26:18,610
if you wanted it to reduce kind of like

00:26:17,080 --> 00:26:20,350
the way MapReduce worked at the end

00:26:18,610 --> 00:26:22,240
you'd add a third workflow instance and

00:26:20,350 --> 00:26:25,210
its job would be to kind of bring it

00:26:22,240 --> 00:26:26,950
back in and to bounce to reduce back

00:26:25,210 --> 00:26:28,299
into a single one and what would happen

00:26:26,950 --> 00:26:29,860
is all three would get executed in

00:26:28,299 --> 00:26:31,929
parallel but the reducer would have a

00:26:29,860 --> 00:26:34,900
precondition on it to wait for the other

00:26:31,929 --> 00:26:36,730
two to finish right so it was

00:26:34,900 --> 00:26:41,280
supportable but it required a bunch of

00:26:36,730 --> 00:26:44,220
work all right okay so the other thing

00:26:41,280 --> 00:26:46,720
so so I talked a little bit about this

00:26:44,220 --> 00:26:49,900
nodt workflow one and just in general

00:26:46,720 --> 00:26:51,730
our ODT workflow model is that tasks

00:26:49,900 --> 00:26:53,650
inside of a workflow instance have the

00:26:51,730 --> 00:26:55,270
shared metadata context the exact same

00:26:53,650 --> 00:26:58,600
metadata that we use for file management

00:26:55,270 --> 00:27:00,820
is used in the ODT workflow manager and

00:26:58,600 --> 00:27:02,320
it's this simple key multivalued model

00:27:00,820 --> 00:27:03,940
and I say multi because it's important

00:27:02,320 --> 00:27:05,830
because it's not single valued and so

00:27:03,940 --> 00:27:09,659
it's really supporting this multi key no

00:27:05,830 --> 00:27:12,159
sequel type of model that the tasks

00:27:09,659 --> 00:27:13,659
within an ODT workflow instance have the

00:27:12,159 --> 00:27:16,450
ability to read to and right from this

00:27:13,659 --> 00:27:18,580
and it's important because they could

00:27:16,450 --> 00:27:21,340
sick like task one in this example could

00:27:18,580 --> 00:27:22,990
signal something to task for right you

00:27:21,340 --> 00:27:25,000
know task one might set some metadata

00:27:22,990 --> 00:27:26,860
keys like input files like what were my

00:27:25,000 --> 00:27:28,750
input files and what output files did I

00:27:26,860 --> 00:27:31,030
generate and things like that and then

00:27:28,750 --> 00:27:33,970
task for could pick it up later so long

00:27:31,030 --> 00:27:35,679
as none of the tasks in between over

00:27:33,970 --> 00:27:37,870
wrote those kids or did something to it

00:27:35,679 --> 00:27:40,030
because it is a shared metadata context

00:27:37,870 --> 00:27:42,850
and things like that so the onus was

00:27:40,030 --> 00:27:45,010
really on the people that were managed

00:27:42,850 --> 00:27:46,840
or writing the tasks that needed to

00:27:45,010 --> 00:27:49,059
handle explicitly sort of the data flow

00:27:46,840 --> 00:27:50,919
passing between them and understand that

00:27:49,059 --> 00:27:53,080
so for us most of the time since those

00:27:50,919 --> 00:27:55,299
were OTT developers or whatever it was

00:27:53,080 --> 00:27:58,440
easy wasn't easy but we had more control

00:27:55,299 --> 00:28:01,150
over the way that that stuff was modeled

00:27:58,440 --> 00:28:02,679
so naming collision was something that

00:28:01,150 --> 00:28:04,419
we had to be pay attention to in that

00:28:02,679 --> 00:28:06,130
context also you couldn't really group

00:28:04,419 --> 00:28:08,230
the keys the way we grouped keys was

00:28:06,130 --> 00:28:10,419
implicitly by our key names we would use

00:28:08,230 --> 00:28:12,220
like this ghetto underscore format you

00:28:10,419 --> 00:28:14,409
know to like delineate in our minds what

00:28:12,220 --> 00:28:16,240
really were groups like we had pcs

00:28:14,409 --> 00:28:17,799
specific metadata like you know

00:28:16,240 --> 00:28:18,860
provenance and process control and

00:28:17,799 --> 00:28:20,929
things like that what

00:28:18,860 --> 00:28:22,460
put files we had like properties or

00:28:20,929 --> 00:28:24,350
switches to configure the crawler that

00:28:22,460 --> 00:28:26,330
ran at the end to ingest the files and

00:28:24,350 --> 00:28:28,070
we would like say pcs underscore

00:28:26,330 --> 00:28:29,720
property name or which really is

00:28:28,070 --> 00:28:31,130
implying that it's a group structure we

00:28:29,720 --> 00:28:32,929
just didn't fully support that in

00:28:31,130 --> 00:28:34,730
workflow one it was supported but you

00:28:32,929 --> 00:28:37,549
had to know that it was using this sort

00:28:34,730 --> 00:28:40,490
of underscore format in yada yada so I'm

00:28:37,549 --> 00:28:42,559
sure this guy so so not the one on the

00:28:40,490 --> 00:28:44,240
Left that's my son again with his

00:28:42,559 --> 00:28:46,100
blanket that you choose on still he's

00:28:44,240 --> 00:28:47,990
like Linus that a guy on the right

00:28:46,100 --> 00:28:50,120
that's Brian Foster is that on your

00:28:47,990 --> 00:28:52,100
right yeah okay cool so that's Brian

00:28:50,120 --> 00:28:55,370
Foster he's now Google he used to work

00:28:52,100 --> 00:28:58,820
for me for 54 years or something like

00:28:55,370 --> 00:29:00,740
that he is like a force changing person

00:28:58,820 --> 00:29:03,200
Brian could rewrite the JVM and has

00:29:00,740 --> 00:29:04,820
written report parts of the JVM just to

00:29:03,200 --> 00:29:06,650
get something to work just because he

00:29:04,820 --> 00:29:09,140
couldn't accept how to use the framework

00:29:06,650 --> 00:29:10,880
anyways he's gossip he's great but he

00:29:09,140 --> 00:29:13,640
left and he's at Google Mouse of curses

00:29:10,880 --> 00:29:15,230
so enter him and this mission right

00:29:13,640 --> 00:29:17,600
which we have people in here from this

00:29:15,230 --> 00:29:19,309
mission the pair omission of this which

00:29:17,600 --> 00:29:21,440
is the imposed preparatory project now

00:29:19,309 --> 00:29:23,900
called suomi npp and elements of that

00:29:21,440 --> 00:29:25,580
but the element of it that was at JPL

00:29:23,900 --> 00:29:27,440
that I was involved with which was this

00:29:25,580 --> 00:29:29,210
sound repeat for the sounder data for

00:29:27,440 --> 00:29:30,530
the impost preparatory project which is

00:29:29,210 --> 00:29:33,260
the next generation polar-orbiting

00:29:30,530 --> 00:29:37,490
satellite there sounder data and then

00:29:33,260 --> 00:29:39,200
this this test bed project the the NPP

00:29:37,490 --> 00:29:40,910
project has this notion of peets which

00:29:39,200 --> 00:29:43,400
our algorithm in evaluation test beds

00:29:40,910 --> 00:29:48,049
and they had the 14 sounder data at JPL

00:29:43,400 --> 00:29:49,970
okay and so Brian Brian got put on that

00:29:48,049 --> 00:29:55,040
project and was doing what i did on 0 co

00:29:49,970 --> 00:29:57,110
for that for me okay so they told brian

00:29:55,040 --> 00:29:59,480
this it was a little different than the

00:29:57,110 --> 00:30:02,809
OCIO use case they didn't have standard

00:29:59,480 --> 00:30:04,160
production pipelining in NPP they he

00:30:02,809 --> 00:30:05,990
were an algorithm there there were

00:30:04,160 --> 00:30:07,970
science computing facility or science

00:30:05,990 --> 00:30:10,220
investigator led processing or whatever

00:30:07,970 --> 00:30:11,360
it wasn't like it wasn't like oh co

00:30:10,220 --> 00:30:13,100
where they were going to have nominal

00:30:11,360 --> 00:30:15,500
processing they would be asked by

00:30:13,100 --> 00:30:18,650
scientists periodically or whatever run

00:30:15,500 --> 00:30:21,650
this but like run it with the same or in

00:30:18,650 --> 00:30:25,460
many cases more jobs per day and data

00:30:21,650 --> 00:30:27,380
and whatever then o co like here is

00:30:25,460 --> 00:30:28,730
their use case that blew up workflow won

00:30:27,380 --> 00:30:30,320
the impetus the whole reason for

00:30:28,730 --> 00:30:30,770
workflow to and this talk and all this

00:30:30,320 --> 00:30:33,710
stuff

00:30:30,770 --> 00:30:36,590
is they wanted Brian to submit the next

00:30:33,710 --> 00:30:38,690
three years of jobs today to the

00:30:36,590 --> 00:30:41,360
workflow management system and let the

00:30:38,690 --> 00:30:43,700
workflow management system manage it for

00:30:41,360 --> 00:30:46,310
the next three years as files like jobs

00:30:43,700 --> 00:30:48,680
that wouldn't complete like the files

00:30:46,310 --> 00:30:50,360
wouldn't arrive for months to complete

00:30:48,680 --> 00:30:52,250
but they wanted them all in the system

00:30:50,360 --> 00:30:54,500
today because they wanted to forget

00:30:52,250 --> 00:30:56,480
about it they just and they still are

00:30:54,500 --> 00:30:58,190
like in many ways this you know they

00:30:56,480 --> 00:31:01,220
want it they want the system to just do

00:30:58,190 --> 00:31:03,350
it all for them that blew up our thread

00:31:01,220 --> 00:31:06,590
pool workflow engine and model because

00:31:03,350 --> 00:31:08,900
it caused many of our threads to hold

00:31:06,590 --> 00:31:13,460
execution and system resources that they

00:31:08,900 --> 00:31:15,260
would not use for months okay so we

00:31:13,460 --> 00:31:16,460
needed a different way for doing it so I

00:31:15,260 --> 00:31:18,770
don't know if anyone here works at

00:31:16,460 --> 00:31:20,480
Twitter but apparently this is like

00:31:18,770 --> 00:31:22,250
travel who works at Twitter like his

00:31:20,480 --> 00:31:24,890
doppelganger his day Bullard who used to

00:31:22,250 --> 00:31:27,890
work at JPL and our group and so Dave

00:31:24,890 --> 00:31:31,010
Woolard was sort of managing Brian

00:31:27,890 --> 00:31:33,320
Foster on NPP and so they tried to come

00:31:31,010 --> 00:31:35,810
up with a way of figuring out how to

00:31:33,320 --> 00:31:37,640
deal with this how did dealing deal with

00:31:35,810 --> 00:31:39,680
this execution model that was different

00:31:37,640 --> 00:31:41,990
and I don't know most of the people in

00:31:39,680 --> 00:31:43,190
this room are either work with ness or

00:31:41,990 --> 00:31:47,000
involved with it but the people that

00:31:43,190 --> 00:31:48,290
aren't me technical solutions don't

00:31:47,000 --> 00:31:49,790
always work the best technical

00:31:48,290 --> 00:31:51,170
architecture doesn't always come out

00:31:49,790 --> 00:31:52,220
when you tell people something you know

00:31:51,170 --> 00:31:53,870
or whatever a lot of times the

00:31:52,220 --> 00:31:56,390
requirements are there and you just got

00:31:53,870 --> 00:31:59,270
to do it so they were like okay we'll do

00:31:56,390 --> 00:32:01,880
this we either need to destroy the

00:31:59,270 --> 00:32:03,500
current trunk workflow manager because

00:32:01,880 --> 00:32:06,020
that's the way Brian dis things is he's

00:32:03,500 --> 00:32:07,880
great but he just forgets backwards

00:32:06,020 --> 00:32:09,350
compatibility wire level compatibility

00:32:07,880 --> 00:32:12,950
and whatever whatever he just goes and

00:32:09,350 --> 00:32:16,640
does it or we need to make a branch or

00:32:12,950 --> 00:32:19,130
fork and sigh and do our own thing

00:32:16,640 --> 00:32:20,540
somewhere else or outside of the context

00:32:19,130 --> 00:32:22,340
of what we're trying to do with nodt

00:32:20,540 --> 00:32:23,690
because we had several customers of our

00:32:22,340 --> 00:32:27,350
current trunk workflow manager that we

00:32:23,690 --> 00:32:29,330
just couldn't get at the time so it

00:32:27,350 --> 00:32:30,950
wasn't their fault people like parm

00:32:29,330 --> 00:32:33,170
errors and I didn't have time to fully

00:32:30,950 --> 00:32:35,660
watch this and many other ODT PMC

00:32:33,170 --> 00:32:37,310
members and and stuff like you know they

00:32:35,660 --> 00:32:39,470
weren't vested in the workflow like we

00:32:37,310 --> 00:32:40,760
were they didn't understand like the

00:32:39,470 --> 00:32:41,750
background that we had and what we

00:32:40,760 --> 00:32:42,950
are going through and they didn't exist

00:32:41,750 --> 00:32:44,240
they were working on different parts way

00:32:42,950 --> 00:32:46,760
people working on the file manager the

00:32:44,240 --> 00:32:48,740
curator the metadata extractor is the

00:32:46,760 --> 00:32:49,820
resource manager whatever that wasn't

00:32:48,740 --> 00:32:51,500
their thing they didn't care about the

00:32:49,820 --> 00:32:52,460
work for the editor so the only two

00:32:51,500 --> 00:32:54,200
people that could do it we're over

00:32:52,460 --> 00:32:55,640
committed and we just didn't have time

00:32:54,200 --> 00:32:58,040
and we had to support existing customers

00:32:55,640 --> 00:32:59,810
that were using the first one and so we

00:32:58,040 --> 00:33:01,430
decided in the end that Brian would go

00:32:59,810 --> 00:33:04,820
off into a branch and not destroy

00:33:01,430 --> 00:33:06,800
workflow one so that we could keep the

00:33:04,820 --> 00:33:10,880
users in the trunk happy and so we

00:33:06,800 --> 00:33:13,520
punted okay this was the npp pipeline

00:33:10,880 --> 00:33:15,290
workflow just for the pee test bed just

00:33:13,520 --> 00:33:17,330
do the illustrative of it's very similar

00:33:15,290 --> 00:33:18,380
in complexity dosie oh it wasn't simple

00:33:17,330 --> 00:33:20,090
even though they were an algorithm

00:33:18,380 --> 00:33:22,970
processing testbed this is merely just

00:33:20,090 --> 00:33:26,030
you know for illustrative purposes so

00:33:22,970 --> 00:33:27,500
unsure workflow to or wenjun and so they

00:33:26,030 --> 00:33:29,360
said well heck we're designing our own

00:33:27,500 --> 00:33:31,640
fully new component what should we do

00:33:29,360 --> 00:33:33,290
well what sucks about workflow one well

00:33:31,640 --> 00:33:35,660
we can't explicitly model branch and

00:33:33,290 --> 00:33:37,970
bounds okay so we're going to explicitly

00:33:35,660 --> 00:33:39,830
model it in our workflows and you'll see

00:33:37,970 --> 00:33:41,480
this instead of supporting it in that

00:33:39,830 --> 00:33:43,370
sort of way where you have an event that

00:33:41,480 --> 00:33:45,050
kicks off multiple workflows and the

00:33:43,370 --> 00:33:47,210
policy is stored across different thing

00:33:45,050 --> 00:33:49,790
in the workflow file you specify

00:33:47,210 --> 00:33:51,590
parallel or sequential and workflows

00:33:49,790 --> 00:33:53,120
themselves are recursive so you can have

00:33:51,590 --> 00:33:54,890
sub workflows inside that are parallel

00:33:53,120 --> 00:33:57,440
or sequential and you can just model the

00:33:54,890 --> 00:33:58,880
whole thing explicitly that's odee t70

00:33:57,440 --> 00:34:00,560
throughout the rest of this talk i will

00:33:58,880 --> 00:34:02,870
point you at the jura issues where you

00:34:00,560 --> 00:34:05,500
can go look at all of these things okay

00:34:02,870 --> 00:34:07,760
so here's a roadmap for what we did

00:34:05,500 --> 00:34:09,860
another thing was that there were no

00:34:07,760 --> 00:34:11,750
global level work flow conditions pre or

00:34:09,860 --> 00:34:13,190
post and a lot of times like you want a

00:34:11,750 --> 00:34:15,020
global love like you don't even want to

00:34:13,190 --> 00:34:16,340
start the workflow and get into a set of

00:34:15,020 --> 00:34:19,960
tasks there are just things that need to

00:34:16,340 --> 00:34:22,460
be true before you even do that oet 205

00:34:19,960 --> 00:34:24,290
okay we started to work on that which

00:34:22,460 --> 00:34:26,899
are global work flow conditions for that

00:34:24,290 --> 00:34:28,310
in workflow one we managed to trick

00:34:26,899 --> 00:34:30,560
people and get away with the fact that

00:34:28,310 --> 00:34:32,600
we really only had preconditions there

00:34:30,560 --> 00:34:34,820
are no true post conditions in workflow

00:34:32,600 --> 00:34:36,950
one you can set them up by most of the

00:34:34,820 --> 00:34:39,169
time by adding tasks afterwards that

00:34:36,950 --> 00:34:40,790
really act as post conditions but there

00:34:39,169 --> 00:34:43,490
are no explicit post conditions in

00:34:40,790 --> 00:34:46,129
workflow one there on workflow two or

00:34:43,490 --> 00:34:47,600
one Jen that's so ATT 502 and it's

00:34:46,129 --> 00:34:49,100
andrew heart pointed out to me earlier

00:34:47,600 --> 00:34:52,700
you can see the delineation between

00:34:49,100 --> 00:34:53,590
those jurors shoes that was 432 jura

00:34:52,700 --> 00:34:55,390
issues in between

00:34:53,590 --> 00:34:59,620
and this was over the course of a couple

00:34:55,390 --> 00:35:02,950
years but this was happening condition

00:34:59,620 --> 00:35:04,810
timeouts so I didn't really understand

00:35:02,950 --> 00:35:07,210
this at first but I got it in the end

00:35:04,810 --> 00:35:09,610
what this was is that sometimes you just

00:35:07,210 --> 00:35:12,160
want like it's kind of like the npp case

00:35:09,610 --> 00:35:13,720
like like you really want to file to

00:35:12,160 --> 00:35:16,120
have arrived but you want something to

00:35:13,720 --> 00:35:17,710
be true but if you waited 15 days and

00:35:16,120 --> 00:35:20,230
it's not true yet you can kind of still

00:35:17,710 --> 00:35:23,230
run you know and it's more approximate

00:35:20,230 --> 00:35:30,130
ofthe an exact so condition should have

00:35:23,230 --> 00:35:31,450
timeouts ODT 207 okay i really i don't

00:35:30,130 --> 00:35:33,280
know i get this for reporting purposes

00:35:31,450 --> 00:35:36,010
but i really don't get this one but

00:35:33,280 --> 00:35:38,260
optional or required conditions so

00:35:36,010 --> 00:35:40,210
optional conditions meaning that if it's

00:35:38,260 --> 00:35:41,980
not true and it's optional like if it's

00:35:40,210 --> 00:35:43,630
not successful but it's optional go on

00:35:41,980 --> 00:35:45,070
anyways and so the only thing i can

00:35:43,630 --> 00:35:47,320
think of in my mind that this really

00:35:45,070 --> 00:35:49,210
supports is really facilitating like i

00:35:47,320 --> 00:35:51,010
tried something and it wasn't successful

00:35:49,210 --> 00:35:52,690
so i went on anyways so more logging and

00:35:51,010 --> 00:35:54,340
informative check pointing and things

00:35:52,690 --> 00:35:55,870
like that that's really what it's

00:35:54,340 --> 00:35:59,010
supports you can define conditions as

00:35:55,870 --> 00:36:01,210
optional or required for that ODT 208

00:35:59,010 --> 00:36:02,500
better fail your state reporting and

00:36:01,210 --> 00:36:04,660
check pointing before when conditions

00:36:02,500 --> 00:36:07,540
failed you basically just knew a

00:36:04,660 --> 00:36:10,270
condition failed and to track down why

00:36:07,540 --> 00:36:12,340
you had to be an operator guru or

00:36:10,270 --> 00:36:14,620
download splunk and go through log files

00:36:12,340 --> 00:36:16,480
and do whatever and yadda yadda so we

00:36:14,620 --> 00:36:21,760
store explicit condition failure state

00:36:16,480 --> 00:36:23,440
messages now ODT 206 okay yes there are

00:36:21,760 --> 00:36:25,330
more improvements including one I had to

00:36:23,440 --> 00:36:27,490
track down in the internal JPL JIRA

00:36:25,330 --> 00:36:29,290
which sucks that I had to go there but

00:36:27,490 --> 00:36:31,780
it doesn't suck because by the time you

00:36:29,290 --> 00:36:34,180
got Apache ODT it was already included

00:36:31,780 --> 00:36:35,950
in that from our 0.1 incubating release

00:36:34,180 --> 00:36:38,050
out of the incubator but it was workflow

00:36:35,950 --> 00:36:40,210
metadata keys Brian and I explicitly

00:36:38,050 --> 00:36:41,920
supported grouping of metadata keys in

00:36:40,210 --> 00:36:44,260
that way that I told you actively being

00:36:41,920 --> 00:36:46,420
able to say you know search for all the

00:36:44,260 --> 00:36:48,460
keys that are in the pcs metadata group

00:36:46,420 --> 00:36:50,050
and then let's only get you know the

00:36:48,460 --> 00:36:51,490
ones and the values associate with that

00:36:50,050 --> 00:36:53,710
so we can delineate things without

00:36:51,490 --> 00:36:55,630
having to specifically require some

00:36:53,710 --> 00:36:59,100
implied key model or key you know

00:36:55,630 --> 00:36:59,100
structure for that using underscores

00:36:59,380 --> 00:37:03,549
and more workflow lifecycle management I

00:37:02,140 --> 00:37:05,859
don't expect you to read this but

00:37:03,549 --> 00:37:07,269
basically what we did is we changed the

00:37:05,859 --> 00:37:09,609
workflow engine to be state-driven

00:37:07,269 --> 00:37:11,619
execution as opposed to single thread

00:37:09,609 --> 00:37:14,829
holding resources and marching through

00:37:11,619 --> 00:37:17,170
work flow model we said every workflow

00:37:14,829 --> 00:37:19,089
processor the which is really kind of

00:37:17,170 --> 00:37:20,680
the guy or whatever not a thread but the

00:37:19,089 --> 00:37:22,539
person who's thinking about what state

00:37:20,680 --> 00:37:24,309
the current workflow instances in the

00:37:22,539 --> 00:37:26,559
state's defined the next state the

00:37:24,309 --> 00:37:28,509
state's we inverted the control there's

00:37:26,559 --> 00:37:30,039
not this god that's like defining the

00:37:28,509 --> 00:37:31,779
next state based on what he knows the

00:37:30,039 --> 00:37:33,579
state's themselves define the next date

00:37:31,779 --> 00:37:35,380
we have next States and a processor

00:37:33,579 --> 00:37:37,690
model that marches through next States

00:37:35,380 --> 00:37:40,690
and failure states and different ways to

00:37:37,690 --> 00:37:42,160
march through that state model so what

00:37:40,690 --> 00:37:45,250
this literally means as in tools like

00:37:42,160 --> 00:37:46,809
pcs stat and PCs ops mops you I as an

00:37:45,250 --> 00:37:48,730
operator you see more states and you get

00:37:46,809 --> 00:37:51,009
more information whereas before and

00:37:48,730 --> 00:37:52,599
workflow won the state model had a you

00:37:51,009 --> 00:37:53,920
know limited number of states and if it

00:37:52,599 --> 00:37:56,619
wasn't in one of those states you kind

00:37:53,920 --> 00:37:57,819
of knew sort of what it was doing it but

00:37:56,619 --> 00:37:59,109
you didn't know everything there's more

00:37:57,819 --> 00:38:00,309
states now and there's more reporting

00:37:59,109 --> 00:38:02,259
and stuff like that and the state's

00:38:00,309 --> 00:38:06,160
control their execution model through

00:38:02,259 --> 00:38:08,170
that I don't really get this one but

00:38:06,160 --> 00:38:09,759
this was our runner framework that Brian

00:38:08,170 --> 00:38:10,990
introduced so the workflow one had

00:38:09,759 --> 00:38:12,759
facilities to submit jobs to our

00:38:10,990 --> 00:38:14,680
resource manager we punted all the

00:38:12,759 --> 00:38:17,980
really difficult stuff about resource

00:38:14,680 --> 00:38:19,809
management and everything to our

00:38:17,980 --> 00:38:21,369
resource manager well it was a hack

00:38:19,809 --> 00:38:23,859
inside of iterative workflow Reese

00:38:21,369 --> 00:38:25,660
processor thread where I checked if

00:38:23,859 --> 00:38:27,369
there was a resource manager URL defined

00:38:25,660 --> 00:38:29,529
I would just hit it or submit to

00:38:27,369 --> 00:38:31,990
resource manager and explicit explicitly

00:38:29,529 --> 00:38:33,819
do this so Brian turned that he saw that

00:38:31,990 --> 00:38:35,289
as the workflow manager being able to

00:38:33,819 --> 00:38:37,029
submit things to different resource

00:38:35,289 --> 00:38:38,589
menteur different systems or whatever

00:38:37,029 --> 00:38:40,329
and so he created an explicit interface

00:38:38,589 --> 00:38:41,950
that he called workflow runner to do

00:38:40,329 --> 00:38:44,170
this so you can so Brian at one point

00:38:41,950 --> 00:38:45,759
had ODT workflow submitting jobs to

00:38:44,170 --> 00:38:46,900
Hadoop but it wasn't the way that I

00:38:45,759 --> 00:38:48,220
would have done it because I would have

00:38:46,900 --> 00:38:50,109
done it where the resource manager

00:38:48,220 --> 00:38:51,400
submitted to Hadoop and there was a

00:38:50,109 --> 00:38:52,930
tight binding between the reeses the

00:38:51,400 --> 00:38:55,119
workflow and the resource manager in her

00:38:52,930 --> 00:38:57,009
face like I had thought but Brian just

00:38:55,119 --> 00:38:58,240
exposed it in the workflow manager so

00:38:57,009 --> 00:38:59,680
anyways I'm not convinced it's the right

00:38:58,240 --> 00:39:04,500
way to do it but I applaud the cleanup

00:38:59,680 --> 00:39:07,869
of my crappy code by Brian for that okay

00:39:04,500 --> 00:39:10,059
sub workflows okay so workflows whose

00:39:07,869 --> 00:39:11,210
subtasks can be other workflows yes this

00:39:10,059 --> 00:39:16,130
is mind blowing and recurse

00:39:11,210 --> 00:39:18,859
okay so so yes that that sub task is

00:39:16,130 --> 00:39:21,050
really another workflow right OTT 211

00:39:18,859 --> 00:39:22,310
okay that itself can have pre and post

00:39:21,050 --> 00:39:26,060
conditions and all these other things

00:39:22,310 --> 00:39:28,310
and and you know yeah this is my

00:39:26,060 --> 00:39:31,400
favorite one I think from the new one

00:39:28,310 --> 00:39:33,320
dynamic workflows ODT 209 the ability to

00:39:31,400 --> 00:39:35,450
dynamically define based on tasks in our

00:39:33,320 --> 00:39:36,920
task repository what workflow should run

00:39:35,450 --> 00:39:39,260
and construct them on the fly from the

00:39:36,920 --> 00:39:41,540
command line or from Java or from xml

00:39:39,260 --> 00:39:43,400
RPC so do not rely on the fact that the

00:39:41,540 --> 00:39:46,220
workflow has been previously curated and

00:39:43,400 --> 00:39:48,560
there's an event map to it to simply

00:39:46,220 --> 00:39:51,080
define workflows based on sets of tasks

00:39:48,560 --> 00:39:53,180
on the fly and then from that create

00:39:51,080 --> 00:39:56,030
workflows you know to do things sort of

00:39:53,180 --> 00:39:57,770
after that so here you can see that I've

00:39:56,030 --> 00:39:59,570
dynamically constructed this workflow

00:39:57,770 --> 00:40:01,820
which is really these three tasks that

00:39:59,570 --> 00:40:03,859
run in sequence you know for that based

00:40:01,820 --> 00:40:08,839
on their IDs as the tasks are defined in

00:40:03,859 --> 00:40:10,490
the workflow repository okay ODT 209 so

00:40:08,839 --> 00:40:12,380
enough of the marching through the

00:40:10,490 --> 00:40:14,750
roadmap how can I use all of this stuff

00:40:12,380 --> 00:40:17,720
Brian's code existed inside of the

00:40:14,750 --> 00:40:20,900
internal jpo Pete repository the MPP

00:40:17,720 --> 00:40:25,250
Pete repository for a long time from

00:40:20,900 --> 00:40:27,050
2008 to 2011 until he left and before he

00:40:25,250 --> 00:40:29,690
left for Google we both realized that we

00:40:27,050 --> 00:40:31,910
needed to push it to Apache for a couple

00:40:29,690 --> 00:40:33,800
reasons a Brian wanted to still work on

00:40:31,910 --> 00:40:35,570
ODT and still does from google so he's

00:40:33,800 --> 00:40:36,800
at Google and he's contributing ODT and

00:40:35,570 --> 00:40:38,450
it's sanctioned by Christa bonilla and

00:40:36,800 --> 00:40:39,770
all this other stuff so Google is paying

00:40:38,450 --> 00:40:42,770
him twenty percent of his time to work

00:40:39,770 --> 00:40:44,570
for us on oet still so we wanted to work

00:40:42,770 --> 00:40:46,700
on it the second thing is we wanted

00:40:44,570 --> 00:40:48,530
other people to work on it you know and

00:40:46,700 --> 00:40:50,420
we so we put it out there and it's in a

00:40:48,530 --> 00:40:52,460
branch the branch is the last working

00:40:50,420 --> 00:40:59,540
Pete version you can see that there at

00:40:52,460 --> 00:41:02,240
that URL no um so so then I spent the

00:40:59,540 --> 00:41:04,190
last two years since then from 2011 and

00:41:02,240 --> 00:41:06,170
now figuring out what Brian did and

00:41:04,190 --> 00:41:07,910
selectively and incrementally merging

00:41:06,170 --> 00:41:09,710
and creating all of this Jared I there's

00:41:07,910 --> 00:41:11,960
more than I walked you through creating

00:41:09,710 --> 00:41:13,460
all those jura issues to merge the

00:41:11,960 --> 00:41:16,400
incremental pieces into the trunk

00:41:13,460 --> 00:41:19,040
bringing wenjun into the trunk of ODT

00:41:16,400 --> 00:41:21,589
our mainline development and that

00:41:19,040 --> 00:41:23,300
started with ODT 215 which is my god

00:41:21,589 --> 00:41:25,730
issue to solve everything

00:41:23,300 --> 00:41:27,200
and and so that took me two years and

00:41:25,730 --> 00:41:30,680
then Paul Ramirez is helping on that a

00:41:27,200 --> 00:41:32,360
little bit and then recently I ODT 491

00:41:30,680 --> 00:41:34,130
which are we finished all this stuff

00:41:32,360 --> 00:41:37,280
from ODT to 15 and it still didn't work

00:41:34,130 --> 00:41:38,930
so ODT 04 shipped with ODT to 15 done

00:41:37,280 --> 00:41:41,540
which was most of the things but was a

00:41:38,930 --> 00:41:43,460
broken workflow manager so we told

00:41:41,540 --> 00:41:44,750
everybody with 04 don't use the workflow

00:41:43,460 --> 00:41:46,520
manager but if you want to get the other

00:41:44,750 --> 00:41:47,810
ODT components like file manager and

00:41:46,520 --> 00:41:49,430
curator and yadda yadda all this other

00:41:47,810 --> 00:41:51,200
stuff there's a lot of improvements to

00:41:49,430 --> 00:41:54,110
that use those but workflow manager

00:41:51,200 --> 00:41:55,940
didn't work until 05 when i created ott

00:41:54,110 --> 00:41:57,500
491 and did a whole bunch of finish line

00:41:55,940 --> 00:42:01,670
tasks for the workflow manager of the

00:41:57,500 --> 00:42:03,470
wenjun so 0 5 shipped with a mostly

00:42:01,670 --> 00:42:05,780
working i'll show you guys in a demo

00:42:03,470 --> 00:42:07,250
today when jen workflow manager

00:42:05,780 --> 00:42:08,780
integrated into the trunk that still

00:42:07,250 --> 00:42:10,640
works the same way and respects that

00:42:08,780 --> 00:42:14,660
vocabulary and interfaces that I defined

00:42:10,640 --> 00:42:17,060
for you guys before and that's basically

00:42:14,660 --> 00:42:18,260
what I just talked about there so in 06

00:42:17,060 --> 00:42:23,240
we'll finish this for real real real

00:42:18,260 --> 00:42:25,670
real so who uses wenjun so Pete still

00:42:23,240 --> 00:42:27,710
uses it today these a modified version

00:42:25,670 --> 00:42:31,640
of Brian's original fork and they're

00:42:27,710 --> 00:42:33,800
chomping at the bit to use this trunk

00:42:31,640 --> 00:42:35,210
version that includes more people than

00:42:33,800 --> 00:42:37,010
Brian who doesn't work for them anymore

00:42:35,210 --> 00:42:38,810
and really works up an Apache but

00:42:37,010 --> 00:42:40,550
doesn't work internally at JPL so the

00:42:38,810 --> 00:42:42,760
people who are still on the internal JPL

00:42:40,550 --> 00:42:45,980
thing don't get any of our new updates

00:42:42,760 --> 00:42:47,540
so they'd like to fix that the other

00:42:45,980 --> 00:42:48,640
thing is that we have a big project with

00:42:47,540 --> 00:42:50,750
the US National Climate Assessment

00:42:48,640 --> 00:42:52,430
creating a snow and ice climate ology

00:42:50,750 --> 00:42:53,630
for the western US and Alaska basically

00:42:52,430 --> 00:42:56,360
running a snow science computing

00:42:53,630 --> 00:42:57,740
facility and so I want them and I'll

00:42:56,360 --> 00:42:59,210
tell you guys a little bit you know I

00:42:57,740 --> 00:43:00,530
think I might just skip telling you guys

00:42:59,210 --> 00:43:01,910
about that because I'm getting down to

00:43:00,530 --> 00:43:03,710
15 minutes and I really just want to

00:43:01,910 --> 00:43:06,860
show you guys like some demo stuff

00:43:03,710 --> 00:43:08,390
that's cool so I think we'll do that but

00:43:06,860 --> 00:43:11,110
yeah they're going to use it there

00:43:08,390 --> 00:43:15,170
they're going to use the new trunk

00:43:11,110 --> 00:43:17,240
wenjun talk part 2 with 15 minutes left

00:43:15,170 --> 00:43:19,490
sorry it's just not going to work so I

00:43:17,240 --> 00:43:20,690
was had these grandiose visions I was

00:43:19,490 --> 00:43:23,720
just going to walk you guys through this

00:43:20,690 --> 00:43:25,790
but I'd rather show you guys a demo this

00:43:23,720 --> 00:43:29,000
pretty pictures and here's the other

00:43:25,790 --> 00:43:32,330
thing I I also cooked up like another

00:43:29,000 --> 00:43:34,220
example that I yeah I just I didn't get

00:43:32,330 --> 00:43:34,609
fully working but I'm still going to

00:43:34,220 --> 00:43:35,930
show you

00:43:34,609 --> 00:43:37,940
guys wenjun working in another example

00:43:35,930 --> 00:43:39,369
but I took some cool images the other

00:43:37,940 --> 00:43:41,989
day I have a telescope it's a dub

00:43:39,369 --> 00:43:43,190
dobsonian telescope they bought from a

00:43:41,989 --> 00:43:44,720
wife a couple years ago and i have an

00:43:43,190 --> 00:43:46,130
iphone 5 and as it turns out if you're

00:43:44,720 --> 00:43:48,230
looking at the moon with this telescope

00:43:46,130 --> 00:43:49,880
even with the 20 centimeter you know

00:43:48,230 --> 00:43:52,130
resolution thing you can get pretty

00:43:49,880 --> 00:43:54,739
decent pictures of the moon and so I was

00:43:52,130 --> 00:43:56,930
taking some moon images / kind of a two

00:43:54,739 --> 00:43:58,640
day period you know in the hopes that I

00:43:56,930 --> 00:44:00,109
could prepare some like massively school

00:43:58,640 --> 00:44:02,059
workflow to demonstrate all these like

00:44:00,109 --> 00:44:04,369
wenjun features to you or whatever and I

00:44:02,059 --> 00:44:06,230
spent the better part of well needs he's

00:44:04,369 --> 00:44:08,119
you know images have metadata you know

00:44:06,230 --> 00:44:09,799
this is some metadata that comes with

00:44:08,119 --> 00:44:11,119
them from exif and from a bunch of other

00:44:09,799 --> 00:44:12,950
things and I was going to like use this

00:44:11,119 --> 00:44:14,720
metadata to like make a decision and do

00:44:12,950 --> 00:44:16,880
something awesome and then I was going

00:44:14,720 --> 00:44:18,829
to geocode it and you know I was going

00:44:16,880 --> 00:44:20,660
to put planetary metadata on it and I

00:44:18,829 --> 00:44:22,430
was and then I found this huggin thing

00:44:20,660 --> 00:44:23,839
you know and I was going to like do

00:44:22,430 --> 00:44:25,940
something awesome with huggin which like

00:44:23,839 --> 00:44:27,619
stitches like lunar images together and

00:44:25,940 --> 00:44:33,739
I was going to make like LM MP like all

00:44:27,619 --> 00:44:35,779
over again you know and yeah I I do and

00:44:33,739 --> 00:44:37,549
then I was going to like figure guys me

00:44:35,779 --> 00:44:42,890
i discovered an shape which is gonna end

00:44:37,549 --> 00:44:45,259
so so anyways I yeah so yeah I started

00:44:42,890 --> 00:44:48,710
with this and so my dream of moon images

00:44:45,259 --> 00:44:50,359
sort of died I hug in which worked last

00:44:48,710 --> 00:44:51,980
night and I had n shape working to

00:44:50,359 --> 00:44:54,589
stitch the images together now i'll show

00:44:51,980 --> 00:44:56,390
you gives me like this weird I can't

00:44:54,589 --> 00:44:58,489
write to scratch disks out of memory

00:44:56,390 --> 00:45:01,809
bullcrap exception and I can't fix it so

00:44:58,489 --> 00:45:05,329
whatever so I'm going to go do demo now

00:45:01,809 --> 00:45:10,930
so let me let me show you guys some of

00:45:05,329 --> 00:45:10,930
the stuff from that I talked about here

00:45:13,970 --> 00:45:21,330
okay so this is my virtual machine I'm

00:45:18,599 --> 00:45:23,280
running ODT a virtual machine here I

00:45:21,330 --> 00:45:25,890
really wanted to do that let's see if i

00:45:23,280 --> 00:45:31,020
can just mirror my seem like it doesn't

00:45:25,890 --> 00:45:33,540
mirror my displays show me earning

00:45:31,020 --> 00:45:35,400
options and minibar here we go mirror

00:45:33,540 --> 00:45:41,430
displays yeah because i want to be able

00:45:35,400 --> 00:45:43,430
to see this too okay so okay you're

00:45:41,430 --> 00:45:49,230
seeing exactly what i'm seeing good

00:45:43,430 --> 00:45:54,720
alright cool so um let's see if I go

00:45:49,230 --> 00:45:58,680
home yeah come on okay cool alright so

00:45:54,720 --> 00:46:08,839
so what I've done is we make this bigger

00:45:58,680 --> 00:46:08,839
oops okay awesome

00:46:12,170 --> 00:46:18,750
ok so in user local which is where I

00:46:15,360 --> 00:46:20,220
install everything I in this brand new

00:46:18,750 --> 00:46:22,320
virtual machine after getting everything

00:46:20,220 --> 00:46:24,840
running started to install some ODT

00:46:22,320 --> 00:46:27,510
components including the latest workflow

00:46:24,840 --> 00:46:29,130
manager 06 snapshot to illustrate some

00:46:27,510 --> 00:46:31,050
of these components to you I've I've

00:46:29,130 --> 00:46:34,020
grabbed the 06 snapshot and I've created

00:46:31,050 --> 00:46:37,920
a sim link to it here user local

00:46:34,020 --> 00:46:42,780
workflow for that I've installed the

00:46:37,920 --> 00:46:44,490
file manager and pcs services and I'm

00:46:42,780 --> 00:46:46,140
also running the pcs operator user

00:46:44,490 --> 00:46:48,390
interface to show you guys what's going

00:46:46,140 --> 00:46:52,470
on for this and so what I did separately

00:46:48,390 --> 00:46:54,840
was I i originally ingested a bunch of

00:46:52,470 --> 00:46:57,060
these these moon products into the file

00:46:54,840 --> 00:46:58,740
manager so you know I've got all my moon

00:46:57,060 --> 00:47:00,360
products there and it's got some you

00:46:58,740 --> 00:47:01,560
know just some basic metadata for them

00:47:00,360 --> 00:47:08,090
because I was going to do you know this

00:47:01,560 --> 00:47:10,410
workflow stuff ok so so I did that now

00:47:08,090 --> 00:47:12,780
one thing I'm just going to point out is

00:47:10,410 --> 00:47:14,250
this is the this is the main processing

00:47:12,780 --> 00:47:15,690
screen so the ODT operator use

00:47:14,250 --> 00:47:17,700
interfaces where like an operator comes

00:47:15,690 --> 00:47:19,320
it's a default web up that we have out

00:47:17,700 --> 00:47:21,330
of the box that you can just deploy and

00:47:19,320 --> 00:47:23,100
turn on it's based on Apache wicket and

00:47:21,330 --> 00:47:24,390
it connects to all of our various

00:47:23,100 --> 00:47:26,010
services running in the background like

00:47:24,390 --> 00:47:27,240
file manager and workflow manager and it

00:47:26,010 --> 00:47:28,740
tells you like what's going on when

00:47:27,240 --> 00:47:31,320
you're processing things related to that

00:47:28,740 --> 00:47:34,290
so the first thing I want to point out

00:47:31,320 --> 00:47:38,700
to you is that normally and I can show

00:47:34,290 --> 00:47:40,440
you this normally the amount of states

00:47:38,700 --> 00:47:44,310
that you see in job processing status

00:47:40,440 --> 00:47:50,250
here for workflow 1 consists of the

00:47:44,310 --> 00:47:58,309
following the following things it

00:47:50,250 --> 00:48:01,209
consists of workflow cycle

00:47:58,309 --> 00:48:05,420
nope I'm up the workflow lifecycle file

00:48:01,209 --> 00:48:07,910
it consists of this workflows are cute

00:48:05,420 --> 00:48:09,979
or created they either were missing

00:48:07,910 --> 00:48:11,390
metadata and thus didn't start in the

00:48:09,979 --> 00:48:12,739
beginning they were pause they're

00:48:11,390 --> 00:48:14,390
submitted to the resource manager they

00:48:12,739 --> 00:48:16,130
were started and finished and then

00:48:14,390 --> 00:48:18,140
sometimes people extend this by adding

00:48:16,130 --> 00:48:19,789
kaz PG if we're using our algorithm

00:48:18,140 --> 00:48:21,880
wrapper and its basic States which is

00:48:19,789 --> 00:48:24,140
like you know staging input files

00:48:21,880 --> 00:48:25,519
executing crawling for files and things

00:48:24,140 --> 00:48:27,229
like that so you can get like a few more

00:48:25,519 --> 00:48:28,939
states but the point is there's a very

00:48:27,229 --> 00:48:33,979
limited number of states to start out

00:48:28,939 --> 00:48:36,049
with in wenjun you don't maybe it's hard

00:48:33,979 --> 00:48:42,829
to see but the thing maybe I can make

00:48:36,049 --> 00:48:45,559
this bigger to control shift yeah so so

00:48:42,829 --> 00:48:50,719
here with which job processing status

00:48:45,559 --> 00:48:53,779
you can see there's no loaded oh thanks

00:48:50,719 --> 00:48:55,309
great null loaded queued blocked waiting

00:48:53,779 --> 00:48:57,199
on resources precondition success

00:48:55,309 --> 00:48:58,759
execution complete unknown pause

00:48:57,199 --> 00:49:01,039
precondition you that'll executing

00:48:58,759 --> 00:49:02,539
postconditioning anyways there's a lot

00:49:01,039 --> 00:49:07,099
more state information that's available

00:49:02,539 --> 00:49:11,599
to you that you can get access to okay

00:49:07,099 --> 00:49:13,400
so that's one thing and so what you do

00:49:11,599 --> 00:49:15,049
and you know the other stuff you get

00:49:13,400 --> 00:49:18,769
from pcs dad are like what latest files

00:49:15,049 --> 00:49:21,319
were interested in whatever ok so the

00:49:18,769 --> 00:49:24,829
workflow manager ships with a set of

00:49:21,319 --> 00:49:26,900
default workflow workflows it ships with

00:49:24,829 --> 00:49:29,959
default or closed for workflow one in

00:49:26,900 --> 00:49:31,309
its you know format and things like that

00:49:29,959 --> 00:49:33,410
and it ships with a set of default

00:49:31,309 --> 00:49:39,469
workflows in workflow to style you know

00:49:33,410 --> 00:49:43,279
related to that so so here in my wenjun

00:49:39,469 --> 00:49:45,859
directory i have i have work flows which

00:49:43,279 --> 00:49:47,809
our workflow to style workflows like

00:49:45,859 --> 00:49:50,749
actually this is this granule maps one

00:49:47,809 --> 00:49:53,049
is an NP p workflow and this

00:49:50,749 --> 00:49:57,019
hellogoodbye one is that so anyways

00:49:53,049 --> 00:49:59,989
we're looking at these so why not why

00:49:57,019 --> 00:50:02,599
not actually look at them so we have a

00:49:59,989 --> 00:50:06,369
tool that's also part of work float too

00:50:02,599 --> 00:50:06,369
and it's called

00:50:06,530 --> 00:50:12,240
wed eter and with it I've taken the

00:50:10,320 --> 00:50:17,280
liberty of installing it and what it

00:50:12,240 --> 00:50:19,200
does is it actually allows you to browse

00:50:17,280 --> 00:50:21,990
what's going on and what these workflows

00:50:19,200 --> 00:50:23,670
look like and so I'm going to open the

00:50:21,990 --> 00:50:28,290
two work spaces here I'm going to open

00:50:23,670 --> 00:50:33,930
the workflow to work work space here for

00:50:28,290 --> 00:50:39,780
these workflows and I'm going to open

00:50:33,930 --> 00:50:42,300
that and okay so these are these are the

00:50:39,780 --> 00:50:45,150
oh I'm sorry these are the workflow ones

00:50:42,300 --> 00:50:47,010
I'm sorry I opened our only one that's

00:50:45,150 --> 00:50:49,020
okay so I'm going to pick a simple one

00:50:47,010 --> 00:50:50,100
so this test workflow is the classic

00:50:49,020 --> 00:50:51,750
example when you start the workflow

00:50:50,100 --> 00:50:53,130
manager an ODT we tell you oh one

00:50:51,750 --> 00:50:55,470
classic example the Tet are when you

00:50:53,130 --> 00:50:56,910
install it one classic example is run

00:50:55,470 --> 00:50:58,470
the workflow send the event test to it

00:50:56,910 --> 00:51:00,480
and what it does is it runs these two

00:50:58,470 --> 00:51:02,250
task workflows one that says hello world

00:51:00,480 --> 00:51:04,170
and then one that says goodbye world and

00:51:02,250 --> 00:51:05,820
it prints your name when it doesn't so

00:51:04,170 --> 00:51:08,190
this is a simple you know hello goodbye

00:51:05,820 --> 00:51:11,190
world but one thing to notice is that in

00:51:08,190 --> 00:51:13,350
workflow to hear it's actually read the

00:51:11,190 --> 00:51:14,880
workflow one style policy files and

00:51:13,350 --> 00:51:16,320
workflow information because we wrote it

00:51:14,880 --> 00:51:17,880
all to be backwards compatible in the

00:51:16,320 --> 00:51:19,560
work with trunk and everything it's

00:51:17,880 --> 00:51:22,830
figured out that this is a sequential

00:51:19,560 --> 00:51:24,960
workflow and if i were to save this now

00:51:22,830 --> 00:51:27,540
it would save it in workflow to policy

00:51:24,960 --> 00:51:30,540
format put sequential around it and then

00:51:27,540 --> 00:51:31,890
automatically not have the implicit sort

00:51:30,540 --> 00:51:34,800
of control floor data flow and have the

00:51:31,890 --> 00:51:38,100
explicit kind and put that there so so

00:51:34,800 --> 00:51:39,780
that's kind of neat so so and i'm going

00:51:38,100 --> 00:51:40,920
to run this workflow for you here in a

00:51:39,780 --> 00:51:42,330
second and show you the difference

00:51:40,920 --> 00:51:46,950
between running and on workflow one or

00:51:42,330 --> 00:51:51,800
two and then I'll wrap up so let me show

00:51:46,950 --> 00:51:55,460
you now a workflow to style workflow

00:51:51,800 --> 00:51:55,460
which lives in here

00:51:56,710 --> 00:52:01,660
okay so here's a workflow to style one

00:51:59,349 --> 00:52:03,820
this is actually that same workflow that

00:52:01,660 --> 00:52:07,660
I showed you earlier for the npp Pete

00:52:03,820 --> 00:52:09,640
that Brian constructed to use that that

00:52:07,660 --> 00:52:21,040
I had the diagram of sort of earlier in

00:52:09,640 --> 00:52:23,020
my slides this one this one yeah so it's

00:52:21,040 --> 00:52:24,940
just represented like this and so right

00:52:23,020 --> 00:52:26,320
now this wedded or tool in trunk you can

00:52:24,940 --> 00:52:28,060
use to kind of explore workflows and

00:52:26,320 --> 00:52:29,830
actually it's a we use it as a

00:52:28,060 --> 00:52:32,050
conversion tool to convert workflow one

00:52:29,830 --> 00:52:33,400
workflows the workflow to sometimes and

00:52:32,050 --> 00:52:35,530
also to read them and just explore

00:52:33,400 --> 00:52:39,970
visually like what's there we also have

00:52:35,530 --> 00:52:42,220
the capability to do that here from from

00:52:39,970 --> 00:52:44,349
our workflow moaner I've run ten tasks

00:52:42,220 --> 00:52:45,550
or ten more clothes here in when Jen

00:52:44,349 --> 00:52:46,660
style that I'm going to blow away and

00:52:45,550 --> 00:52:49,140
I'm going to rerun for you right now

00:52:46,660 --> 00:52:52,359
just to show you that you know legit um

00:52:49,140 --> 00:52:53,890
but yeah so so we also have the

00:52:52,359 --> 00:52:57,609
capability here to view kind of a very

00:52:53,890 --> 00:52:59,140
you know ghetto could be better it used

00:52:57,609 --> 00:53:01,089
to be like the line and whatever but way

00:52:59,140 --> 00:53:03,070
to view a workflow as well and Rishi if

00:53:01,089 --> 00:53:05,109
I don't see Rishi here or there is Rishi

00:53:03,070 --> 00:53:06,460
fix that and made this look better or

00:53:05,109 --> 00:53:07,990
whatever too but we can also look at it

00:53:06,460 --> 00:53:12,040
this way so you can look at it either

00:53:07,990 --> 00:53:13,990
from this or from the wetter okay so so

00:53:12,040 --> 00:53:27,280
yeah so so that's the way it's running

00:53:13,990 --> 00:53:28,780
so let me show you guys ok so what flow

00:53:27,280 --> 00:53:30,310
manager recall I has said it had a

00:53:28,780 --> 00:53:32,080
workflow instance repository that's

00:53:30,310 --> 00:53:33,520
where it stores all the actual instance

00:53:32,080 --> 00:53:35,470
information on what's going on from the

00:53:33,520 --> 00:53:38,050
workflow if I were to blow this away

00:53:35,470 --> 00:53:39,280
right now just say remove it it's um

00:53:38,050 --> 00:53:40,720
it's going to complain at me because

00:53:39,280 --> 00:53:44,940
it's trying to read that so I'm going to

00:53:40,720 --> 00:53:44,940
stop it oops I'm in the wrong directory

00:53:45,220 --> 00:53:49,660
stop okay cool so now it's not going to

00:53:48,220 --> 00:53:51,310
complain at me anymore and it's actually

00:53:49,660 --> 00:53:52,960
going to recreate that that's being

00:53:51,310 --> 00:53:54,520
stored in lucene right now so it's also

00:53:52,960 --> 00:53:55,720
searchable and you know all the work

00:53:54,520 --> 00:53:58,270
flow information after that you can

00:53:55,720 --> 00:54:01,119
search it so one thing I want to point

00:53:58,270 --> 00:54:02,980
out to you guys is that right now inside

00:54:01,119 --> 00:54:04,000
of my traditional and sorry I'm assuming

00:54:02,980 --> 00:54:05,770
you know something about ODT

00:54:04,000 --> 00:54:07,869
configuration I don't have time to tell

00:54:05,770 --> 00:54:11,470
you i want to point out a couple things

00:54:07,869 --> 00:54:13,240
that I've changed so here I'm using the

00:54:11,470 --> 00:54:15,310
prioritized cubase workflow engine

00:54:13,240 --> 00:54:16,990
factory that's when Jen and the

00:54:15,310 --> 00:54:19,150
difference between that is that normally

00:54:16,990 --> 00:54:20,680
we ship with our thread pool workflow

00:54:19,150 --> 00:54:21,880
engine factory turned on which is

00:54:20,680 --> 00:54:23,650
workflow one so if you want to use

00:54:21,880 --> 00:54:26,800
workflow to you change it to the

00:54:23,650 --> 00:54:29,140
prioritized q based one okay that's one

00:54:26,800 --> 00:54:32,080
step you'll notice I can mix and match

00:54:29,140 --> 00:54:34,420
my repositories 2 i'm using really the

00:54:32,080 --> 00:54:36,660
workflow one style repository to read

00:54:34,420 --> 00:54:39,310
workflows in and read their models i

00:54:36,660 --> 00:54:41,290
could if you want to use the work the

00:54:39,310 --> 00:54:42,700
wenjun one that understands the parallel

00:54:41,290 --> 00:54:44,980
and sequential you have to change it to

00:54:42,700 --> 00:54:46,420
package workflow repository to use that

00:54:44,980 --> 00:54:47,800
package work flow across story factory

00:54:46,420 --> 00:54:54,820
and all of this stuff that i'm telling

00:54:47,800 --> 00:54:57,820
you right now is um is actually it's

00:54:54,820 --> 00:54:59,349
it's a no dt dot apache done or let's

00:54:57,820 --> 00:55:04,930
see if i'm connected to the internet i

00:54:59,349 --> 00:55:11,859
am it's actually on our wiki as well and

00:55:04,930 --> 00:55:15,210
i'll show you where it's it's it's here

00:55:11,859 --> 00:55:16,990
under workflow to Quick Start Guide and

00:55:15,210 --> 00:55:19,180
this is going to tell you which

00:55:16,990 --> 00:55:21,190
properties to change and things like

00:55:19,180 --> 00:55:23,560
that to get started now God can't even

00:55:21,190 --> 00:55:25,330
read that yeah so it's gonna tell you

00:55:23,560 --> 00:55:26,650
you know which properties to change and

00:55:25,330 --> 00:55:28,839
it's going to tell you the same stuff

00:55:26,650 --> 00:55:32,680
you know what you can use and all that

00:55:28,839 --> 00:55:34,300
to use to use workflow to and so you'll

00:55:32,680 --> 00:55:36,040
notice but you can mix and match which

00:55:34,300 --> 00:55:38,080
is awesome integrating it into the trunk

00:55:36,040 --> 00:55:39,820
brians thing didn't support this mixing

00:55:38,080 --> 00:55:41,050
and matching and backwards compatibility

00:55:39,820 --> 00:55:42,820
if you look at the wenjun branch right

00:55:41,050 --> 00:55:45,369
now it doesn't support this because they

00:55:42,820 --> 00:55:47,349
built an entirely new component our goal

00:55:45,369 --> 00:55:50,560
is to support this in current workflow

00:55:47,349 --> 00:55:51,760
trunk you know for that okay so so we're

00:55:50,560 --> 00:55:53,230
doing that there's a couple other

00:55:51,760 --> 00:55:54,520
properties you have to set like which

00:55:53,230 --> 00:55:56,230
runner you're using remember I said

00:55:54,520 --> 00:55:57,820
there's a run our framework so a lot of

00:55:56,230 --> 00:55:58,360
this stuff is set for default for you we

00:55:57,820 --> 00:56:00,370
also have a

00:55:58,360 --> 00:56:01,840
querier and some other stuff don't touch

00:56:00,370 --> 00:56:05,740
those just leave that alone that still

00:56:01,840 --> 00:56:09,100
works and then this life cycle thing is

00:56:05,740 --> 00:56:11,020
new in in workflow to so setting this

00:56:09,100 --> 00:56:13,590
workflow lifecycle is really important

00:56:11,020 --> 00:56:15,940
you know now too so you need to set this

00:56:13,590 --> 00:56:18,250
okay so let's say you did set it and

00:56:15,940 --> 00:56:20,050
great and so I blew away the workflow

00:56:18,250 --> 00:56:22,060
repository just to prove to you so we

00:56:20,050 --> 00:56:23,290
have no workflow instances anymore and

00:56:22,060 --> 00:56:27,010
i'm going to start the workflow manager

00:56:23,290 --> 00:56:29,020
back up and to prove to you that we have

00:56:27,010 --> 00:56:31,120
my workflow instances i'm going to go

00:56:29,020 --> 00:56:32,740
here to the pcs stop page and then we're

00:56:31,120 --> 00:56:34,030
going to see oh look there's nothing

00:56:32,740 --> 00:56:36,910
there's nothing that's ran and there's

00:56:34,030 --> 00:56:40,720
nothing that's been successful okay so

00:56:36,910 --> 00:56:44,760
what I'm going to do is I'm now going to

00:56:40,720 --> 00:56:50,500
run a workflow one that hello by one

00:56:44,760 --> 00:56:54,130
workflow on workflow to from the command

00:56:50,500 --> 00:56:55,720
line if i can find my prior thing for

00:56:54,130 --> 00:56:57,940
that okay yeah and so to run well

00:56:55,720 --> 00:56:59,680
goodbye you send the event test to it

00:56:57,940 --> 00:57:02,160
and test his map to the hello goodbye

00:56:59,680 --> 00:57:06,550
work phone and so i'm going to run it

00:57:02,160 --> 00:57:08,830
here using the same workflow one style

00:57:06,550 --> 00:57:10,480
client and then we're going to pop into

00:57:08,830 --> 00:57:12,760
the monitor real quick and we're going

00:57:10,480 --> 00:57:15,040
to see Oh things are happening and lets

00:57:12,760 --> 00:57:18,610
you know just refresh it and because

00:57:15,040 --> 00:57:21,580
it's so small it executed really quickly

00:57:18,610 --> 00:57:25,090
we point something out here though five

00:57:21,580 --> 00:57:26,470
things ran weird right like I you know

00:57:25,090 --> 00:57:29,140
it really should have only run a

00:57:26,470 --> 00:57:30,940
workflow that had two tasks right

00:57:29,140 --> 00:57:33,070
because it was just hello goodbye a

00:57:30,940 --> 00:57:36,310
single sequential workflow that had that

00:57:33,070 --> 00:57:39,850
what workflow to does is it unravels

00:57:36,310 --> 00:57:41,830
everything into a workflow so so as so

00:57:39,850 --> 00:57:44,860
happens that each one of those tasks

00:57:41,830 --> 00:57:47,590
included a condition in it so conditions

00:57:44,860 --> 00:57:49,420
actually run as workflow so conditions

00:57:47,590 --> 00:57:51,310
in workflow to can be separated the

00:57:49,420 --> 00:57:53,200
actual pre and post conditions can be

00:57:51,310 --> 00:57:54,460
run as separate tasks and executed on

00:57:53,200 --> 00:57:56,140
different resources because some

00:57:54,460 --> 00:57:57,730
conditions are more expensive than

00:57:56,140 --> 00:57:59,560
others and they cost is computational

00:57:57,730 --> 00:58:01,330
resources and this down the other and so

00:57:59,560 --> 00:58:03,940
you see the master workflow here really

00:58:01,330 --> 00:58:07,630
is test workflow I believe yeah that's

00:58:03,940 --> 00:58:10,660
the master one and let me get back here

00:58:07,630 --> 00:58:12,280
these other ones are the unraveled the

00:58:10,660 --> 00:58:14,020
task workflow for it the task

00:58:12,280 --> 00:58:16,060
precondition workflow the true condition

00:58:14,020 --> 00:58:17,830
the goodbye world task and then the

00:58:16,060 --> 00:58:19,810
actual precondition for that the true

00:58:17,830 --> 00:58:22,090
condition for that so it unraveled them

00:58:19,810 --> 00:58:23,890
ok so now I'm going to illustrate to you

00:58:22,090 --> 00:58:25,510
the difference between running this on

00:58:23,890 --> 00:58:28,630
workflow one and work for two and then

00:58:25,510 --> 00:58:30,400
I'll stop so what I'm going to do to

00:58:28,630 --> 00:58:31,810
illustrate you the difference for doing

00:58:30,400 --> 00:58:35,070
that and then I'll run a dynamic work

00:58:31,810 --> 00:58:41,260
loaf we have time because i love dynamic

00:58:35,070 --> 00:58:45,220
awesome so I so yeah so what I'm going

00:58:41,260 --> 00:58:48,160
to do is I'm going to comment to comment

00:58:45,220 --> 00:58:50,770
this out and i'm going to say workflow

00:58:48,160 --> 00:58:53,170
engine factory equals org apache don't

00:58:50,770 --> 00:58:55,800
ask me how I know this Cavs workflow

00:58:53,170 --> 00:58:59,680
engine threadpool workflow engine

00:58:55,800 --> 00:59:03,760
factory I can type fast but I make

00:58:59,680 --> 00:59:05,490
mistakes um ok so then what I'm going to

00:59:03,760 --> 00:59:07,210
do is again I'm going to blow away the

00:59:05,490 --> 00:59:08,860
repository and it's gonna at me

00:59:07,210 --> 00:59:12,280
well not in this window probably and

00:59:08,860 --> 00:59:14,140
another one and say yeah there there we

00:59:12,280 --> 00:59:17,740
go and say oh I was trying to read from

00:59:14,140 --> 00:59:21,120
that so anyways so now i'm going to

00:59:17,740 --> 00:59:23,890
start the workflow manager back up and

00:59:21,120 --> 00:59:26,500
right so no resource manager URL

00:59:23,890 --> 00:59:29,010
provided great so we saw some different

00:59:26,500 --> 00:59:32,080
output immediately which is good and

00:59:29,010 --> 00:59:34,150
again just to prove to you that you know

00:59:32,080 --> 00:59:41,400
we really did start it you know back up

00:59:34,150 --> 00:59:44,110
you know here where we're going to yeah

00:59:41,400 --> 00:59:46,390
i'm going to have to hack this i just

00:59:44,110 --> 00:59:51,520
realized but that's ok we're going to

00:59:46,390 --> 00:59:54,760
now run and not that one not that one

00:59:51,520 --> 00:59:56,140
not that one not that one I think it was

00:59:54,760 --> 00:59:58,060
this one let's see is this the one I

00:59:56,140 --> 01:00:01,090
have my client in I can always just type

00:59:58,060 --> 01:00:03,270
it by hand if I have to yeah maybe I'm

01:00:01,090 --> 01:00:07,690
gonna have to type it by hand alright so

01:00:03,270 --> 01:00:12,160
now we'll run that same test workflow on

01:00:07,690 --> 01:00:20,980
workflow one operations end event event

01:00:12,160 --> 01:00:22,750
name test okay and so it ran and i think

01:00:20,980 --> 01:00:26,500
if i click here it's going to show us

01:00:22,750 --> 01:00:30,670
nothing but if i say all it's going to

01:00:26,500 --> 01:00:31,810
show it to us it's finished don't worry

01:00:30,670 --> 01:00:32,980
about the progress meter there's

01:00:31,810 --> 01:00:35,440
something we do with that but you notice

01:00:32,980 --> 01:00:37,000
it's just warm or flow right it didn't

01:00:35,440 --> 01:00:38,800
unravel it in two different tasks it

01:00:37,000 --> 01:00:40,300
didn't process it that way kept it all

01:00:38,800 --> 01:00:42,670
as a single workflow it's a single

01:00:40,300 --> 01:00:44,020
sequential workflow and I don't have

01:00:42,670 --> 01:00:47,010
time for dynamic work closely have to

01:00:44,020 --> 01:00:47,010
believe me so thanks

01:00:50,960 --> 01:00:55,020
and then you have time for one question

01:00:53,130 --> 01:01:01,920
if anyone has any questions if you still

01:00:55,020 --> 01:01:05,340
care okay yeah please you Linda so this

01:01:01,920 --> 01:01:07,680
was fantastic and very impressive I have

01:01:05,340 --> 01:01:10,830
a question about your motivation to be

01:01:07,680 --> 01:01:12,570
able to run tasks for three years just

01:01:10,830 --> 01:01:16,110
push a button and let it run for three

01:01:12,570 --> 01:01:20,310
years the questions are how do you debug

01:01:16,110 --> 01:01:23,310
that how do you monitor that and do you

01:01:20,310 --> 01:01:28,200
need human intervention at some point

01:01:23,310 --> 01:01:31,320
dear things or to manage things um so

01:01:28,200 --> 01:01:33,240
great question so the people did

01:01:31,320 --> 01:01:35,850
definitely want human intervention they

01:01:33,240 --> 01:01:38,100
just didn't want human lead direction of

01:01:35,850 --> 01:01:39,510
the processing campaigns they wanted the

01:01:38,100 --> 01:01:42,660
system to do it but for people to be

01:01:39,510 --> 01:01:43,890
able to monitor it and so the best way

01:01:42,660 --> 01:01:45,240
that we could think is to add more

01:01:43,890 --> 01:01:47,100
monitoring tools like some of these

01:01:45,240 --> 01:01:48,480
tools that I'd showed today and also to

01:01:47,100 --> 01:01:50,760
build tools that I haven't shown that

01:01:48,480 --> 01:01:53,130
don't even exist yet but to go mine logs

01:01:50,760 --> 01:01:55,110
in mine some of the state information

01:01:53,130 --> 01:01:56,700
from these things and some of those

01:01:55,110 --> 01:01:58,470
things are still being built and some of

01:01:56,700 --> 01:01:59,910
them like haven't been contributed back

01:01:58,470 --> 01:02:02,430
and some of them just don't exist yet

01:01:59,910 --> 01:02:04,470
but the more that we can add those types

01:02:02,430 --> 01:02:06,000
of tools to this and and and to have

01:02:04,470 --> 01:02:08,700
that as part of the framework I think is

01:02:06,000 --> 01:02:11,790
good and so that was 24 questions and I

01:02:08,700 --> 01:02:13,980
forget the first one I how do you debug

01:02:11,790 --> 01:02:15,900
it I think that's part of the the mining

01:02:13,980 --> 01:02:17,790
and an understanding of like you know

01:02:15,900 --> 01:02:19,350
understanding in the control and data

01:02:17,790 --> 01:02:21,090
flow and whatever like what processors

01:02:19,350 --> 01:02:22,590
right things where and like what tasks

01:02:21,090 --> 01:02:24,600
right things where and like where those

01:02:22,590 --> 01:02:25,950
you know log files the most get a way to

01:02:24,600 --> 01:02:28,560
do it but it's also a way that a lot of

01:02:25,950 --> 01:02:29,850
people still today do that debugging but

01:02:28,560 --> 01:02:31,890
then there are better ways of course to

01:02:29,850 --> 01:02:34,470
do it with things like provenance and

01:02:31,890 --> 01:02:36,300
potentially and you know other other

01:02:34,470 --> 01:02:40,250
stuff that I haven't thought of yet but

01:02:36,300 --> 01:02:40,250

YouTube URL: https://www.youtube.com/watch?v=GZC3Zn3VXt8


