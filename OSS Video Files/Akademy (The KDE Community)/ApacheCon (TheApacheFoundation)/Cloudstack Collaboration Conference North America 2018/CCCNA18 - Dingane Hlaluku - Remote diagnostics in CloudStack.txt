Title: CCCNA18 - Dingane Hlaluku - Remote diagnostics in CloudStack
Publication date: 2018-11-20
Playlist: Cloudstack Collaboration Conference North America 2018
Description: 
	Dingane Hlaluku - Remote diagnostics in CloudStack

A presentation from the Cloudstack Collaboration Conference, a part of ApacheCon North America 2018 in Montreal

http://ca.cloudstackcollab.org/
http://apachecon.com/acna18
Captions: 
	00:00:05,270 --> 00:00:12,270
hi and welcome to my talk

00:00:09,360 --> 00:00:15,240
my name is a gigantic Sudoku I'm an

00:00:12,270 --> 00:00:18,180
engineer with shape blue and today I'll

00:00:15,240 --> 00:00:20,339
be presenting to you the remote

00:00:18,180 --> 00:00:24,050
diagnostics tools that are boom that are

00:00:20,339 --> 00:00:24,050
being put in place now in cloud stack

00:00:28,199 --> 00:00:35,220
so this is a brief of the contents I'm

00:00:32,309 --> 00:00:38,070
gonna go through I'll give a brief

00:00:35,220 --> 00:00:40,860
introduction about myself and then go on

00:00:38,070 --> 00:00:43,739
and give an overview about the

00:00:40,860 --> 00:00:46,320
Diagnostics tools and then I'll also

00:00:43,739 --> 00:00:48,210
horn and touch on known delimitations

00:00:46,320 --> 00:00:50,460
and assumptions which are currently

00:00:48,210 --> 00:00:52,650
being faced with these tools and they

00:00:50,460 --> 00:00:59,489
now also touch on improvement

00:00:52,650 --> 00:01:02,520
suggestions so briefly about myself I

00:00:59,489 --> 00:01:05,880
live in Cape Town in South Africa I'm a

00:01:02,520 --> 00:01:08,729
software engineer with a blue I'm a new

00:01:05,880 --> 00:01:11,340
contributor to cloud stack since last

00:01:08,729 --> 00:01:14,060
year and prior to that I've been working

00:01:11,340 --> 00:01:17,190
at CERN with particular accelerators

00:01:14,060 --> 00:01:24,899
also a very big friend of our science

00:01:17,190 --> 00:01:27,660
fiction remote diagnostics tool so this

00:01:24,899 --> 00:01:31,560
basically just gives a rough overview of

00:01:27,660 --> 00:01:34,439
what these tools are they basically just

00:01:31,560 --> 00:01:37,560
two diagnostics tools which are target's

00:01:34,439 --> 00:01:40,530
system VMs the first one is the run

00:01:37,560 --> 00:01:45,060
Diagnostics dpi which is basically a PID

00:01:40,530 --> 00:01:47,399
tool which allows a cloud operator to

00:01:45,060 --> 00:01:49,649
execute network utility commands are

00:01:47,399 --> 00:01:51,780
remotely on system virtual machines and

00:01:49,649 --> 00:01:54,119
then the second one is to get

00:01:51,780 --> 00:01:55,100
Diagnostics data API command which

00:01:54,119 --> 00:01:58,799
basically

00:01:55,100 --> 00:02:01,350
tada-san centralizes are that gnostics

00:01:58,799 --> 00:02:04,490
data which could be log files network

00:02:01,350 --> 00:02:08,489
configuration files and and so on into a

00:02:04,490 --> 00:02:10,649
centralized secondary storage and what

00:02:08,489 --> 00:02:13,380
they what they aim to do is basically

00:02:10,649 --> 00:02:15,030
they aim to consolidate and they to

00:02:13,380 --> 00:02:17,480
consolidate a lot of manual

00:02:15,030 --> 00:02:23,579
troubleshooting techniques into API

00:02:17,480 --> 00:02:25,489
methods so one my mama might ask why are

00:02:23,579 --> 00:02:28,680
we targeting her system vm's

00:02:25,489 --> 00:02:30,150
because system VMs are very important

00:02:28,680 --> 00:02:32,100
when it comes to cloud stack we

00:02:30,150 --> 00:02:34,500
basically use them for

00:02:32,100 --> 00:02:36,990
for performing a lot of operations

00:02:34,500 --> 00:02:39,450
within the cloud we use them for

00:02:36,990 --> 00:02:43,380
downloading uploading or creating our

00:02:39,450 --> 00:02:45,690
templates we we also need them the

00:02:43,380 --> 00:02:49,680
virtual Ruta for provisioning net

00:02:45,690 --> 00:02:52,770
network utilities within the cloud we

00:02:49,680 --> 00:02:55,500
also need them for providing secondary

00:02:52,770 --> 00:02:59,700
store storage capabilities within the

00:02:55,500 --> 00:03:02,300
cloud so they the current

00:02:59,700 --> 00:03:04,830
troubleshooting techniques that we have

00:03:02,300 --> 00:03:08,670
that we have that we currently use for

00:03:04,830 --> 00:03:10,440
troubleshooting system VMs not that

00:03:08,670 --> 00:03:12,840
flexible and they kind of require a

00:03:10,440 --> 00:03:15,810
little bit of expect knowledge in order

00:03:12,840 --> 00:03:20,850
to to execute and they're also

00:03:15,810 --> 00:03:23,790
time-consuming for example if one wants

00:03:20,850 --> 00:03:25,650
to simply check if weather network is

00:03:23,790 --> 00:03:28,260
properly configured or wants to know

00:03:25,650 --> 00:03:29,970
what kind of network service set up at

00:03:28,260 --> 00:03:30,420
they are dealing with inside the system

00:03:29,970 --> 00:03:33,240
VM

00:03:30,420 --> 00:03:34,160
they have to read up on or ssh into the

00:03:33,240 --> 00:03:37,290
system VM

00:03:34,160 --> 00:03:39,209
they first have to log on to through the

00:03:37,290 --> 00:03:41,280
host which the system virtual machine is

00:03:39,209 --> 00:03:43,950
running and then type in a very lengthy

00:03:41,280 --> 00:03:46,590
command to log on to the system VM just

00:03:43,950 --> 00:03:48,900
to execute a simple ping command to test

00:03:46,590 --> 00:03:51,120
our network and each and every

00:03:48,900 --> 00:03:54,390
hypothesize a different way of logging

00:03:51,120 --> 00:03:56,700
in this is an example of how you have to

00:03:54,390 --> 00:03:59,519
look if you log onto a system VM on KVM

00:03:56,700 --> 00:04:02,100
this is an example for sensor by in

00:03:59,519 --> 00:04:05,070
VMware also has its own way of logging

00:04:02,100 --> 00:04:09,180
in and you can see that this is not a

00:04:05,070 --> 00:04:11,910
flexible way of testing stuff with

00:04:09,180 --> 00:04:14,820
system fears so I basically saw a need

00:04:11,910 --> 00:04:19,260
for a way which does not depend on the

00:04:14,820 --> 00:04:21,510
hypervisor to to to enable the cloud

00:04:19,260 --> 00:04:23,340
operator to quickly know gone into a

00:04:21,510 --> 00:04:27,090
system virtual virtual machine and

00:04:23,340 --> 00:04:36,030
execute a network utility commando

00:04:27,090 --> 00:04:38,100
c'mon t2 to test so this page here is an

00:04:36,030 --> 00:04:40,860
example of a page that we have currently

00:04:38,100 --> 00:04:42,090
set in place it's available in this link

00:04:40,860 --> 00:04:45,240
for four references

00:04:42,090 --> 00:04:47,100
it houses that load of the manual

00:04:45,240 --> 00:04:50,520
troubleshooting techniques that we

00:04:47,100 --> 00:04:53,100
currently use with cloud stack and I've

00:04:50,520 --> 00:04:55,100
just checked like more or less the one

00:04:53,100 --> 00:04:56,820
third of the page the list goes on

00:04:55,100 --> 00:04:59,340
there's a lot of troubleshooting

00:04:56,820 --> 00:05:02,190
techniques so what I basically with this

00:04:59,340 --> 00:05:05,030
API command it's basically consolidate a

00:05:02,190 --> 00:05:09,600
lot of this manual tips outlined here

00:05:05,030 --> 00:05:11,370
into API methods that's providing a

00:05:09,600 --> 00:05:14,430
quick and efficient way for the cloud

00:05:11,370 --> 00:05:18,990
stack operator to quickly assess issues

00:05:14,430 --> 00:05:23,850
within their cloud so the first API is

00:05:18,990 --> 00:05:26,789
the RAM Diagnostics API basically what

00:05:23,850 --> 00:05:29,760
it does is it leverages are the clocks

00:05:26,789 --> 00:05:32,729
that agents from within into providing

00:05:29,760 --> 00:05:36,240
their way which is not dependent on any

00:05:32,729 --> 00:05:38,190
hypervisor to to execute network utility

00:05:36,240 --> 00:05:41,820
commands and modeling system virtual

00:05:38,190 --> 00:05:46,470
machines it is available through put the

00:05:41,820 --> 00:05:49,590
UI and the API and it basically it helps

00:05:46,470 --> 00:05:51,510
the cooperator admin tool for for

00:05:49,590 --> 00:05:54,539
checking network connectivity insist in

00:05:51,510 --> 00:05:56,250
virtual machines the current system

00:05:54,539 --> 00:05:57,570
virtual machines will have in in cloud

00:05:56,250 --> 00:05:59,430
stack at the moment is the console

00:05:57,570 --> 00:06:01,680
proxies virtual machine the secondary

00:05:59,430 --> 00:06:02,700
storage virtual machine and the virtual

00:06:01,680 --> 00:06:06,300
gruta

00:06:02,700 --> 00:06:08,910
so the current supported commands is the

00:06:06,300 --> 00:06:11,599
ping command which is used to test post

00:06:08,910 --> 00:06:13,979
reachability within an IP network and

00:06:11,599 --> 00:06:16,200
the traceroute command which basically

00:06:13,979 --> 00:06:19,710
displeased the route and measures are

00:06:16,200 --> 00:06:23,250
the transit delays in IP d in IP packets

00:06:19,710 --> 00:06:25,500
and then it's and then the last one is

00:06:23,250 --> 00:06:30,840
the a ping which basically discovers and

00:06:25,500 --> 00:06:32,820
probes hosts between an IP network so

00:06:30,840 --> 00:06:36,469
this page I personally show an example

00:06:32,820 --> 00:06:39,180
of how the operator can use this API

00:06:36,469 --> 00:06:42,960
this is the list of all the supported

00:06:39,180 --> 00:06:45,719
parameters the first parameter is the

00:06:42,960 --> 00:06:47,610
Tagus target system VM ID which is the

00:06:45,719 --> 00:06:50,580
system virtual machine which the

00:06:47,610 --> 00:06:52,830
operator wants to test the next command

00:06:50,580 --> 00:06:56,940
is the Diagnostics type which can either

00:06:52,830 --> 00:07:00,349
be P a P or traceroute and the other one

00:06:56,940 --> 00:07:03,300
is the IP or domain address that the

00:07:00,349 --> 00:07:05,610
operator wants to test connection to and

00:07:03,300 --> 00:07:07,700
the last one is optional parameters

00:07:05,610 --> 00:07:12,060
which are supported by each and every

00:07:07,700 --> 00:07:15,450
Diagnostics type command they the type

00:07:12,060 --> 00:07:17,520
of options that the operator can K can

00:07:15,450 --> 00:07:20,159
pass with this command are the ones

00:07:17,520 --> 00:07:23,490
which come comes packed with the tibia

00:07:20,159 --> 00:07:25,969
at the tv9 because the current system

00:07:23,490 --> 00:07:27,210
virtual machines are been choosing the

00:07:25,969 --> 00:07:30,840
db9

00:07:27,210 --> 00:07:34,650
based so the operator will have to check

00:07:30,840 --> 00:07:36,870
which optional parameters are supported

00:07:34,650 --> 00:07:40,800
by the team with the traceroute or they

00:07:36,870 --> 00:07:44,219
happen in in DB and 9 so as a response

00:07:40,800 --> 00:07:45,990
what this dpi brings it transferred to

00:07:44,219 --> 00:07:49,590
the operator three things the first

00:07:45,990 --> 00:07:52,380
being the exit code of the exit code of

00:07:49,590 --> 00:07:54,800
the command which is a 0 unit UNIX

00:07:52,380 --> 00:07:57,960
system to show that your commanders

00:07:54,800 --> 00:08:00,330
executed successfully and the other one

00:07:57,960 --> 00:08:02,430
in there meaning to be either standard

00:08:00,330 --> 00:08:04,680
output in the standard error in case of

00:08:02,430 --> 00:08:07,020
our successful execution the standard

00:08:04,680 --> 00:08:12,719
output is populated and vice versa in

00:08:07,020 --> 00:08:15,930
case of our any errors so a couple of

00:08:12,719 --> 00:08:18,020
use cases that I thought of it it can be

00:08:15,930 --> 00:08:21,930
very useful for the operator for

00:08:18,020 --> 00:08:25,020
automating Network facing kind of tasks

00:08:21,930 --> 00:08:28,680
within their cloud it can also be useful

00:08:25,020 --> 00:08:30,750
for for testing if whether the virtual

00:08:28,680 --> 00:08:33,779
water can connect he can connect to the

00:08:30,750 --> 00:08:36,570
outside world it might also be useful

00:08:33,779 --> 00:08:39,240
for the clouds that I mean to know which

00:08:36,570 --> 00:08:42,029
are network interfaces are used for

00:08:39,240 --> 00:08:46,319
communication between a guest VMs in the

00:08:42,029 --> 00:08:47,430
cloud so I typically use cases when one

00:08:46,319 --> 00:08:49,770
is trying to down

00:08:47,430 --> 00:08:52,890
the template or in ice or into secondary

00:08:49,770 --> 00:08:55,290
storage and it fades usually fellows are

00:08:52,890 --> 00:08:57,540
associated with Network timeouts or

00:08:55,290 --> 00:09:01,980
connectivity issues and the first thing

00:08:57,540 --> 00:09:04,740
that we definitely we usually do is log

00:09:01,980 --> 00:09:06,450
on to the hosts and then log on to the

00:09:04,740 --> 00:09:08,640
system virtual machine execute a ping

00:09:06,450 --> 00:09:12,120
command to see if whether a network is

00:09:08,640 --> 00:09:13,830
fine but now with this tool the you

00:09:12,120 --> 00:09:16,470
don't have to go through all that length

00:09:13,830 --> 00:09:19,140
of link to process you just go on to the

00:09:16,470 --> 00:09:21,330
clouds that UI navigate to the system

00:09:19,140 --> 00:09:23,220
which was a secondary storage which one

00:09:21,330 --> 00:09:25,920
machine in this case and then you just

00:09:23,220 --> 00:09:30,930
click on you click on there and

00:09:25,920 --> 00:09:32,550
diagnostics our icon and run a simple RP

00:09:30,930 --> 00:09:35,610
more happen for mine to see if whether

00:09:32,550 --> 00:09:37,320
our network was the cause of your

00:09:35,610 --> 00:09:42,000
failure of your template download

00:09:37,320 --> 00:09:44,430
freedom so this is an example of how the

00:09:42,000 --> 00:09:46,649
run Diagnostics API has been integrated

00:09:44,430 --> 00:09:49,140
into the cloud stack UI you will

00:09:46,649 --> 00:09:51,029
basically just navigate into the

00:09:49,140 --> 00:09:52,410
infrastructure and then the system

00:09:51,029 --> 00:09:55,860
virtual machine or the virtual group

00:09:52,410 --> 00:09:58,260
that you want to diagnose and then you

00:09:55,860 --> 00:10:02,640
will be presented with this with this

00:09:58,260 --> 00:10:04,589
drop box here so they type it's already

00:10:02,640 --> 00:10:06,510
populated with the currently supported

00:10:04,589 --> 00:10:09,060
type which is our the ping wrapping in

00:10:06,510 --> 00:10:11,279
the place wrote and then here the

00:10:09,060 --> 00:10:13,740
destination is the IP address or domain

00:10:11,279 --> 00:10:16,110
IP address that the operator wants to

00:10:13,740 --> 00:10:18,209
test connection to and then the extra

00:10:16,110 --> 00:10:20,070
argument is the optional parameters

00:10:18,209 --> 00:10:25,440
which are supported by each and every

00:10:20,070 --> 00:10:27,390
Diagnostics type command so this is an

00:10:25,440 --> 00:10:29,790
example of what the operator will be

00:10:27,390 --> 00:10:31,350
presented with our own successful

00:10:29,790 --> 00:10:35,010
execution of the API

00:10:31,350 --> 00:10:37,650
so as I said earlier it will it will

00:10:35,010 --> 00:10:39,570
return back the exit code and in case of

00:10:37,650 --> 00:10:40,750
successful execution they standard

00:10:39,570 --> 00:10:43,450
output will be popular

00:10:40,750 --> 00:10:47,620
understand that era will be will be

00:10:43,450 --> 00:10:49,780
empty in case there were some errors or

00:10:47,620 --> 00:10:51,880
something went wrong with the execution

00:10:49,780 --> 00:10:54,280
of the command the standard error is

00:10:51,880 --> 00:10:59,620
populated explaining exactly what went

00:10:54,280 --> 00:11:03,730
wrong and ER standard output is empty so

00:10:59,620 --> 00:11:08,350
I never our way in which are the admin

00:11:03,730 --> 00:11:10,990
can use the API I just put a picture

00:11:08,350 --> 00:11:13,030
here of our example execution of how one

00:11:10,990 --> 00:11:16,840
can use this with a client like cloud

00:11:13,030 --> 00:11:19,360
Monte cloud monkeys the command line

00:11:16,840 --> 00:11:21,370
interface for our job the clouds they

00:11:19,360 --> 00:11:23,860
have also included a link there for

00:11:21,370 --> 00:11:27,310
people who are interested as reference

00:11:23,860 --> 00:11:30,640
and you can see here running the API for

00:11:27,310 --> 00:11:33,040
mind providing the target IP of the

00:11:30,640 --> 00:11:35,440
system virtual machine and the

00:11:33,040 --> 00:11:36,940
Diagnostics type which in this case is a

00:11:35,440 --> 00:11:39,850
team and an IP address

00:11:36,940 --> 00:11:42,190
I just put there and the reachable IP

00:11:39,850 --> 00:11:43,950
address and then I just give optional

00:11:42,190 --> 00:11:48,430
parameters that the ping command should

00:11:43,950 --> 00:11:52,210
run for three times and then it comes

00:11:48,430 --> 00:11:53,920
back and I can see here if I'm not sure

00:11:52,210 --> 00:11:55,660
if you can see but you can see from the

00:11:53,920 --> 00:11:58,180
exit code that the exit code which was

00:11:55,660 --> 00:11:59,860
retained in this case is one and then

00:11:58,180 --> 00:12:02,080
you see that okay the command was

00:11:59,860 --> 00:12:02,770
executed but the network was not

00:12:02,080 --> 00:12:05,890
reachable

00:12:02,770 --> 00:12:08,440
all your your your packets were lost for

00:12:05,890 --> 00:12:10,089
this case it's it's not going to

00:12:08,440 --> 00:12:13,240
populate the standard error because the

00:12:10,089 --> 00:12:15,339
command was executed successfully itself

00:12:13,240 --> 00:12:17,920
and this is the output that the ping

00:12:15,339 --> 00:12:21,460
command brings that ok I did try to

00:12:17,920 --> 00:12:24,870
execute but I didn't find the host which

00:12:21,460 --> 00:12:27,580
means your IP address is not reachable

00:12:24,870 --> 00:12:30,880
so those are the kind of options that

00:12:27,580 --> 00:12:34,450
you can get in case for example one

00:12:30,880 --> 00:12:37,780
provides a an incorrect IP address type

00:12:34,450 --> 00:12:39,970
here the ping command itself will send

00:12:37,780 --> 00:12:42,910
data to the standard error output saying

00:12:39,970 --> 00:12:43,680
that I know no unsupported network type

00:12:42,910 --> 00:12:45,660
and in the

00:12:43,680 --> 00:12:47,580
case the standard error will be the one

00:12:45,660 --> 00:12:52,200
which is populated with that kind of

00:12:47,580 --> 00:12:54,570
command so a couple of limitations which

00:12:52,200 --> 00:12:56,610
come with this API at the moment it

00:12:54,570 --> 00:12:59,040
currently under words with our system

00:12:56,610 --> 00:13:01,529
virtual machines and it's only allowed

00:12:59,040 --> 00:13:05,700
for the route admin user for security

00:13:01,529 --> 00:13:07,560
reasons and all the API calls are

00:13:05,700 --> 00:13:09,690
executed from the management server and

00:13:07,560 --> 00:13:11,209
then it basically takes care of logging

00:13:09,690 --> 00:13:15,779
into the system virtual machine and

00:13:11,209 --> 00:13:19,110
executing the network type and it only

00:13:15,779 --> 00:13:21,990
supports three commands at the moment

00:13:19,110 --> 00:13:25,140
which are given based which is the thing

00:13:21,990 --> 00:13:27,149
they trace route and appeal and it does

00:13:25,140 --> 00:13:29,610
not bypass any limitations which are

00:13:27,149 --> 00:13:35,930
which come with the supported

00:13:29,610 --> 00:13:39,720
Diagnostics type so a couple of future

00:13:35,930 --> 00:13:44,220
expansion plans that I had thought maybe

00:13:39,720 --> 00:13:45,930
perhaps we can allow the normal user to

00:13:44,220 --> 00:13:47,910
use this API with a couple of

00:13:45,930 --> 00:13:52,380
restrictions which are being controlled

00:13:47,910 --> 00:13:54,600
or set by the route admin and also be

00:13:52,380 --> 00:13:57,810
now considering extending the use of

00:13:54,600 --> 00:14:02,339
this API to two hypervisor hosts and

00:13:57,810 --> 00:14:05,790
guest virtual machines and also another

00:14:02,339 --> 00:14:11,250
far future expansion plan is to support

00:14:05,790 --> 00:14:14,730
more basically to make the life of the

00:14:11,250 --> 00:14:16,920
cloud step operator easier by supporting

00:14:14,730 --> 00:14:19,260
a little bit more commands that will be

00:14:16,920 --> 00:14:22,080
useful for them so it would be very

00:14:19,260 --> 00:14:25,410
useful to get some feedback from users

00:14:22,080 --> 00:14:28,140
of this API to basically come back and

00:14:25,410 --> 00:14:30,480
tell us that okay here's another command

00:14:28,140 --> 00:14:32,459
that we actually think that might help

00:14:30,480 --> 00:14:35,430
us could you please also add support for

00:14:32,459 --> 00:14:38,760
this command so that's also along the

00:14:35,430 --> 00:14:40,350
pipeline and I've also considered that

00:14:38,760 --> 00:14:43,770
perhaps it could also be used for

00:14:40,350 --> 00:14:46,950
gathering a lot of useful cloud spec

00:14:43,770 --> 00:14:50,040
matrices like for example we can use it

00:14:46,950 --> 00:14:50,740
together maybe matrix for the virtual

00:14:50,040 --> 00:14:52,810
route ow

00:14:50,740 --> 00:14:55,029
might want to know how many guests

00:14:52,810 --> 00:14:58,649
virtual machines are connected to a

00:14:55,029 --> 00:15:01,600
virtual brutality that is a certain type

00:14:58,649 --> 00:15:03,490
how many users or how many services are

00:15:01,600 --> 00:15:05,050
currently running on the Virtual Ruta

00:15:03,490 --> 00:15:07,630
that's also something which we can do

00:15:05,050 --> 00:15:10,510
get look and also maybe you want to know

00:15:07,630 --> 00:15:13,360
how hypervisor matrices like for example

00:15:10,510 --> 00:15:15,459
how how many guest virtual machines are

00:15:13,360 --> 00:15:19,779
running on that specific type of Iser

00:15:15,459 --> 00:15:22,510
host at this time how much CPU is left

00:15:19,779 --> 00:15:24,339
how much ram has been consumed how much

00:15:22,510 --> 00:15:27,640
power those kind of things how much disk

00:15:24,339 --> 00:15:29,410
space is left it's also a couple of

00:15:27,640 --> 00:15:36,040
things which are along the pipeline's

00:15:29,410 --> 00:15:39,550
for for this API so I've also provided a

00:15:36,040 --> 00:15:42,910
couple of links here to the feature

00:15:39,550 --> 00:15:45,640
specification document and the community

00:15:42,910 --> 00:15:47,980
requests the first pull request was made

00:15:45,640 --> 00:15:50,770
for the API and then a later progress

00:15:47,980 --> 00:15:53,440
came for UI integration what pull

00:15:50,770 --> 00:15:57,130
requests have been made in master so

00:15:53,440 --> 00:16:01,380
this feature is available as in master

00:15:57,130 --> 00:16:06,100
and yeah that's pretty much all about

00:16:01,380 --> 00:16:12,940
Durant Diagnostics API so any questions

00:16:06,100 --> 00:16:15,220
regarding the rank Diagnostics API so

00:16:12,940 --> 00:16:19,870
moving on to the second one they get

00:16:15,220 --> 00:16:22,510
Diagnostics data API similar to the

00:16:19,870 --> 00:16:26,079
previous API it also basically targets

00:16:22,510 --> 00:16:30,010
system fields as well so what happens is

00:16:26,079 --> 00:16:31,870
thoughts that generates a lot of log

00:16:30,010 --> 00:16:34,649
files and age and all those things which

00:16:31,870 --> 00:16:37,740
can be used by the talks that mean for

00:16:34,649 --> 00:16:40,510
for Diagnostics and debugging purposes

00:16:37,740 --> 00:16:42,910
but the thing is that what what locks

00:16:40,510 --> 00:16:45,430
that does it these files are kind of

00:16:42,910 --> 00:16:48,970
stuck at in in various places and it

00:16:45,430 --> 00:16:51,310
kind of makes it very difficult to go

00:16:48,970 --> 00:16:54,579
and collect these files and analyze them

00:16:51,310 --> 00:16:55,630
and another example for if you want to

00:16:54,579 --> 00:16:57,940
know the IP tables

00:16:55,630 --> 00:16:59,340
you basically have to execute the

00:16:57,940 --> 00:17:01,260
command and then save

00:16:59,340 --> 00:17:04,890
food and all those things so what this

00:17:01,260 --> 00:17:06,990
API aims to do it wants to take care of

00:17:04,890 --> 00:17:08,640
all of that for the dots that mean it

00:17:06,990 --> 00:17:10,770
will basically go and gather all these

00:17:08,640 --> 00:17:13,980
log files or property configuration

00:17:10,770 --> 00:17:16,140
files in all these various places also

00:17:13,980 --> 00:17:20,130
check the IP tables that I have config

00:17:16,140 --> 00:17:22,380
dns masks whatever files that are the

00:17:20,130 --> 00:17:25,680
top operator might be interested in to

00:17:22,380 --> 00:17:28,050
for debugging purposes and then it got

00:17:25,680 --> 00:17:29,580
us all these log files into a central

00:17:28,050 --> 00:17:33,570
location which in this case will be the

00:17:29,580 --> 00:17:35,790
secondary storage and then it basically

00:17:33,570 --> 00:17:38,610
stores a compressed version of this file

00:17:35,790 --> 00:17:41,280
in secondary storage and presents the

00:17:38,610 --> 00:17:42,990
operator with a URL link that he can

00:17:41,280 --> 00:17:50,850
just simply click and download this

00:17:42,990 --> 00:17:52,920
files for for for analysis so similar as

00:17:50,850 --> 00:17:55,170
well for security reasons this API is

00:17:52,920 --> 00:17:57,390
only available for the route admin and

00:17:55,170 --> 00:18:01,020
it takes us parameters as well they

00:17:57,390 --> 00:18:03,980
target virtual machine ID and the

00:18:01,020 --> 00:18:07,080
Diagnostics data type in this case

00:18:03,980 --> 00:18:10,200
supported types there will be defaults

00:18:07,080 --> 00:18:13,440
which are log files IP table rules DNS

00:18:10,200 --> 00:18:15,930
files use at a time property files but

00:18:13,440 --> 00:18:18,480
this is controlled by a global setting

00:18:15,930 --> 00:18:21,240
that the admin operator can set himself

00:18:18,480 --> 00:18:23,280
if they want to extend they type the

00:18:21,240 --> 00:18:25,500
type of fights that they want to do they

00:18:23,280 --> 00:18:27,600
simply add that ok I also want to

00:18:25,500 --> 00:18:29,880
relieve this kind of files and the API

00:18:27,600 --> 00:18:31,710
will take care of going into the system

00:18:29,880 --> 00:18:33,750
virtual machine grabbing the file and

00:18:31,710 --> 00:18:35,570
compressing it and sending it to

00:18:33,750 --> 00:18:38,340
secondary storage

00:18:35,570 --> 00:18:40,920
details is an optional parameter that

00:18:38,340 --> 00:18:43,830
it's an optional parameter that the

00:18:40,920 --> 00:18:45,570
operator can specify that ok on top of

00:18:43,830 --> 00:18:50,220
the files that you support can you also

00:18:45,570 --> 00:18:52,950
maybe get for me this other file in this

00:18:50,220 --> 00:18:54,890
person in this specific location so what

00:18:52,950 --> 00:18:58,340
the API will do it

00:18:54,890 --> 00:18:59,900
it will go to the to the specific

00:18:58,340 --> 00:19:01,850
location which has been specified by

00:18:59,900 --> 00:19:04,250
that mean and look for that fire and

00:19:01,850 --> 00:19:07,120
grab that fight banding together with

00:19:04,250 --> 00:19:10,340
the supported fight and send them to

00:19:07,120 --> 00:19:12,800
secondary storage so as a response the

00:19:10,340 --> 00:19:14,690
returns back a you are a link that the

00:19:12,800 --> 00:19:16,100
operator can simply click to download

00:19:14,690 --> 00:19:18,910
the layer files

00:19:16,100 --> 00:19:22,640
and yeah basically retrieves log files

00:19:18,910 --> 00:19:28,130
property files IP tables I have config

00:19:22,640 --> 00:19:31,790
and fruit slice so it's currently a work

00:19:28,130 --> 00:19:36,950
in progress API PR will will come soon

00:19:31,790 --> 00:19:39,560
in in master in upstream so this is this

00:19:36,950 --> 00:19:43,280
is kind of the beginning to end flow of

00:19:39,560 --> 00:19:45,920
how this API basically works so it will

00:19:43,280 --> 00:19:49,760
take the input there and then it goes on

00:19:45,920 --> 00:19:52,160
it goes on as it was retrieve the files

00:19:49,760 --> 00:19:55,010
and then it returns a success response

00:19:52,160 --> 00:19:57,380
to the admin in this case it will be the

00:19:55,010 --> 00:20:00,760
URL and then that mean can basically

00:19:57,380 --> 00:20:05,840
just go there and download their files

00:20:00,760 --> 00:20:07,730
so yeah it it it will basically just

00:20:05,840 --> 00:20:09,860
retrieve the files from the system

00:20:07,730 --> 00:20:11,960
virtual machine compress the files and

00:20:09,860 --> 00:20:15,170
then those files to secondary storage

00:20:11,960 --> 00:20:18,130
and return that to the operator URL link

00:20:15,170 --> 00:20:22,130
and yeah that's it

00:20:18,130 --> 00:20:24,950
so this is a couple of trouble settings

00:20:22,130 --> 00:20:27,740
which will be available for the route at

00:20:24,950 --> 00:20:30,620
mean the most important of these

00:20:27,740 --> 00:20:33,110
settings here are they I'll say the

00:20:30,620 --> 00:20:36,710
first three ones what they basically do

00:20:33,110 --> 00:20:38,600
is they take care of cleanup so that the

00:20:36,710 --> 00:20:41,240
operator does not have to worry about

00:20:38,600 --> 00:20:43,700
that going into secondary storage and

00:20:41,240 --> 00:20:45,650
deleting the retro files and all those

00:20:43,700 --> 00:20:48,220
things that's giving him or her the

00:20:45,650 --> 00:20:50,480
flexibility of executing this API

00:20:48,220 --> 00:20:53,600
several times without having to wire

00:20:50,480 --> 00:20:54,710
that oh okay I have a whole bunch of

00:20:53,600 --> 00:20:56,059
files now inside

00:20:54,710 --> 00:20:59,059
which I have to go there and do it

00:20:56,059 --> 00:21:02,990
enough so they basically just take care

00:20:59,059 --> 00:21:06,080
of garbage collection and give the

00:21:02,990 --> 00:21:08,270
operator cane the the flexibility of

00:21:06,080 --> 00:21:10,669
setting the interval at which they want

00:21:08,270 --> 00:21:13,970
the garbage collection to to basically

00:21:10,669 --> 00:21:17,240
arrive and then the other important one

00:21:13,970 --> 00:21:19,850
here it's the Diagnostics data supported

00:21:17,240 --> 00:21:22,370
type it's the one which I spoke of

00:21:19,850 --> 00:21:25,279
earlier in which which is expandable by

00:21:22,370 --> 00:21:29,600
a by the operator as well they just go

00:21:25,279 --> 00:21:32,809
there and put in the kind of supported

00:21:29,600 --> 00:21:35,419
data files they want to to retrieve each

00:21:32,809 --> 00:21:38,029
and every time they run this API which

00:21:35,419 --> 00:21:41,260
basically just make makes it easier for

00:21:38,029 --> 00:21:44,480
for them and this more or less kind of

00:21:41,260 --> 00:21:46,909
different supported types for different

00:21:44,480 --> 00:21:49,309
system virtual machines for example

00:21:46,909 --> 00:21:51,710
again as kind of files and eh to

00:21:49,309 --> 00:21:53,480
simplify it only makes sense to retrieve

00:21:51,710 --> 00:21:56,720
those files for the virtual router and

00:21:53,480 --> 00:21:58,820
it doesn't really make sense to to want

00:21:56,720 --> 00:22:01,100
those kind of files for the secondary

00:21:58,820 --> 00:22:04,010
storage virtual machine for example so

00:22:01,100 --> 00:22:08,000
that's what this this setting will will

00:22:04,010 --> 00:22:12,260
basically control the last one being a

00:22:08,000 --> 00:22:15,529
kind of like a distress hold as to which

00:22:12,260 --> 00:22:17,419
this API will execute it's it's it's

00:22:15,529 --> 00:22:19,549
basically also a setting for there for

00:22:17,419 --> 00:22:21,890
for the operator to kind of set that

00:22:19,549 --> 00:22:24,649
okay if I am running low in secondary

00:22:21,890 --> 00:22:26,870
storage don't exit don't get me the

00:22:24,649 --> 00:22:29,809
files so it's kind of a useful thing

00:22:26,870 --> 00:22:32,570
when you trying to execute the API to

00:22:29,809 --> 00:22:34,460
basically check your your secondary

00:22:32,570 --> 00:22:37,549
storage stage and then it will say okay

00:22:34,460 --> 00:22:38,990
you don't have enough you don't have

00:22:37,549 --> 00:22:42,230
enough space in the secondary storage

00:22:38,990 --> 00:22:44,659
it's you have this amount of of space so

00:22:42,230 --> 00:22:46,909
it's kind of a useful feature because in

00:22:44,659 --> 00:22:49,250
case the operator was not aware of how

00:22:46,909 --> 00:22:51,230
much space was running in it how much

00:22:49,250 --> 00:22:52,930
space is left in the secondary storage

00:22:51,230 --> 00:22:54,580
the API will basically

00:22:52,930 --> 00:23:01,660
sentiment and they can kind of do

00:22:54,580 --> 00:23:04,900
cleanup as well so in terms of future

00:23:01,660 --> 00:23:07,990
plans are also thought of this as well

00:23:04,900 --> 00:23:10,330
that perhaps we can I can also extend

00:23:07,990 --> 00:23:13,930
the API to include Doc's tech management

00:23:10,330 --> 00:23:18,610
server log files as well to be retrieved

00:23:13,930 --> 00:23:22,240
and also extend to the hypervisor hosts

00:23:18,610 --> 00:23:26,140
and guests virtual machines also been

00:23:22,240 --> 00:23:29,230
thinking of extension to to network

00:23:26,140 --> 00:23:31,150
service providers this could be hardware

00:23:29,230 --> 00:23:35,350
appliances of virtual appliances

00:23:31,150 --> 00:23:38,860
examples being the citrix netscaler the

00:23:35,350 --> 00:23:41,890
VMware NSX or the obvious - to name a

00:23:38,860 --> 00:23:44,920
few this just to name a few that we

00:23:41,890 --> 00:23:46,720
currently support with cloud stick and I

00:23:44,920 --> 00:23:50,050
also thought that it could also be used

00:23:46,720 --> 00:23:54,420
for gathering our useful metric metrics

00:23:50,050 --> 00:23:56,950
for cloud state as well examples being

00:23:54,420 --> 00:23:58,990
management server clusters you might

00:23:56,950 --> 00:24:04,650
want to know Java Virtual Machine

00:23:58,990 --> 00:24:08,380
metrics the memory CPU usage of our and

00:24:04,650 --> 00:24:10,690
available RAM in your management server

00:24:08,380 --> 00:24:12,310
clusters and another thing I also

00:24:10,690 --> 00:24:14,140
thought that it might be useful for

00:24:12,310 --> 00:24:17,920
gathering system virtual machine

00:24:14,140 --> 00:24:19,900
matrices metrics as well examples being

00:24:17,920 --> 00:24:23,950
the operator might be interested in

00:24:19,900 --> 00:24:26,020
knowing which which download jobs are

00:24:23,950 --> 00:24:29,110
currently running within the cloud which

00:24:26,020 --> 00:24:31,540
consoles I achieve how many use our

00:24:29,110 --> 00:24:32,920
sessions are currently active I thought

00:24:31,540 --> 00:24:37,660
maybe might be useful for gathering

00:24:32,920 --> 00:24:40,420
though those metrics as well cooking the

00:24:37,660 --> 00:24:43,950
data into files and then sending it for

00:24:40,420 --> 00:24:47,260
the operator for later retrieval and

00:24:43,950 --> 00:24:48,960
that's just to name a few the list can

00:24:47,260 --> 00:24:52,260
go on as to what

00:24:48,960 --> 00:24:55,409
do with this api's we just have to get

00:24:52,260 --> 00:24:57,539
people who operate us telling us what

00:24:55,409 --> 00:25:00,690
what what it is that they are interested

00:24:57,539 --> 00:25:06,870
in saying this API sigh - and then can

00:25:00,690 --> 00:25:10,940
look into implementations and that's all

00:25:06,870 --> 00:25:10,940
for me thank you for your time

00:25:11,900 --> 00:25:17,650
[Applause]

00:25:35,170 --> 00:25:40,210
oh yes I forgot to mention that it

00:25:37,750 --> 00:25:42,970
doesn't allow any non-alphanumeric type

00:25:40,210 --> 00:25:45,210
it only allows a period and - and that's

00:25:42,970 --> 00:25:45,210
it

00:25:49,470 --> 00:25:55,120
okay if there's no more questions thank

00:25:52,889 --> 00:25:59,960
you for your time

00:25:55,120 --> 00:25:59,960

YouTube URL: https://www.youtube.com/watch?v=H0Qx3uiZeKo


