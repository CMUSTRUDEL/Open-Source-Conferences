Title: A Real life Case Study - Uri Cohen
Publication date: 2014-04-25
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:04,290
does anyone here have been to my

00:00:01,829 --> 00:00:06,600
previous talk this morning okay so

00:00:04,290 --> 00:00:08,580
probably in the risk of repeating a few

00:00:06,600 --> 00:00:11,000
things yes sir today I want to talk

00:00:08,580 --> 00:00:13,500
about real life case study with

00:00:11,000 --> 00:00:18,320
involving clarify and chef and other

00:00:13,500 --> 00:00:21,750
technologies I was hoping to get the

00:00:18,320 --> 00:00:23,779
guided heads the DevOps practice of this

00:00:21,750 --> 00:00:27,240
company to come and talk with me but

00:00:23,779 --> 00:00:28,529
unfortunately couldn't make it so I'm

00:00:27,240 --> 00:00:31,109
gonna have to keep the name kind of

00:00:28,529 --> 00:00:34,950
confidential but if you've been to the

00:00:31,109 --> 00:00:36,660
Amsterdam conference or do a little dig

00:00:34,950 --> 00:00:38,850
a little bit of digging online you're

00:00:36,660 --> 00:00:41,850
going to figure it out pretty quickly so

00:00:38,850 --> 00:00:45,450
we're talking about a leading UK based

00:00:41,850 --> 00:00:47,670
based online betting company can't say

00:00:45,450 --> 00:00:48,780
the name but actually can use some

00:00:47,670 --> 00:00:51,750
references so you can figure it out

00:00:48,780 --> 00:00:54,870
yourselves and they've been facing

00:00:51,750 --> 00:00:56,309
facing a pretty tough problem when they

00:00:54,870 --> 00:00:59,730
try to innovate it started about 12

00:00:56,309 --> 00:01:03,470
months ago they have peak times about

00:00:59,730 --> 00:01:07,880
200,000 concurrent visitors many more

00:01:03,470 --> 00:01:10,860
probably few times that registered users

00:01:07,880 --> 00:01:12,659
and a team of about 40 developers that

00:01:10,860 --> 00:01:15,720
are constantly employing changes to

00:01:12,659 --> 00:01:17,490
their website and products also they

00:01:15,720 --> 00:01:19,560
need to keep to maintain very high loads

00:01:17,490 --> 00:01:23,970
I need to keep it with a very high

00:01:19,560 --> 00:01:25,680
frequency of change and you know one of

00:01:23,970 --> 00:01:28,350
the problems that they faced is that

00:01:25,680 --> 00:01:31,500
whenever someone came up with not a good

00:01:28,350 --> 00:01:33,720
new idea they start to work on that and

00:01:31,500 --> 00:01:35,700
then they started filming they started

00:01:33,720 --> 00:01:38,189
facing a lot of walls within the

00:01:35,700 --> 00:01:39,390
organization so the first thing they

00:01:38,189 --> 00:01:42,079
need to do is obviously allocate

00:01:39,390 --> 00:01:44,189
infrastructure then after that

00:01:42,079 --> 00:01:46,740
developing this thing which is kind of

00:01:44,189 --> 00:01:50,750
the easy part and then handing it over

00:01:46,740 --> 00:01:53,220
to ops deploying the testing that and

00:01:50,750 --> 00:01:54,720
eventually it came to a state again you

00:01:53,220 --> 00:01:55,979
probably be able to read about this more

00:01:54,720 --> 00:01:58,259
in their blogs which came to state that

00:01:55,979 --> 00:02:00,540
it was very hard for them to innovate

00:01:58,259 --> 00:02:04,350
because people were just tired of trying

00:02:00,540 --> 00:02:05,520
to push new ideas I didn't go through so

00:02:04,350 --> 00:02:09,179
they knew that had to change something

00:02:05,520 --> 00:02:10,800
they had to kind of bridge the gap

00:02:09,179 --> 00:02:12,209
between that they had between dev and

00:02:10,800 --> 00:02:15,720
ops it's kind of what all the hopes is

00:02:12,209 --> 00:02:18,000
all about and they had to build the way

00:02:15,720 --> 00:02:20,550
that people within their development

00:02:18,000 --> 00:02:22,860
team could actually innovate but without

00:02:20,550 --> 00:02:27,180
undermining the stability of performance

00:02:22,860 --> 00:02:28,770
of their website and the products so as

00:02:27,180 --> 00:02:34,250
a developer you know how many of you

00:02:28,770 --> 00:02:37,410
guys are developers Ops guys both

00:02:34,250 --> 00:02:41,220
alright so that's developer you usually

00:02:37,410 --> 00:02:42,989
start with the things you know and what

00:02:41,220 --> 00:02:45,750
they did is they started off with our CI

00:02:42,989 --> 00:02:47,849
server so just start to automate things

00:02:45,750 --> 00:02:49,530
around they're both system and

00:02:47,849 --> 00:02:52,410
specifically creating more and more

00:02:49,530 --> 00:02:54,569
integration tests as opposed to just you

00:02:52,410 --> 00:02:56,550
know so they had before and making sure

00:02:54,569 --> 00:02:59,099
that whenever they actually have a

00:02:56,550 --> 00:03:00,659
release or a code patch this thing as

00:02:59,099 --> 00:03:03,590
stable as far as the development team

00:03:00,659 --> 00:03:07,290
could do but obviously that's not enough

00:03:03,590 --> 00:03:08,970
since most of the time processes and

00:03:07,290 --> 00:03:10,800
workflows look something like that and

00:03:08,970 --> 00:03:13,409
it's not just about putting stuff into

00:03:10,800 --> 00:03:15,269
Jenkins and handing and throwing over

00:03:13,409 --> 00:03:18,239
the wall to the ops team it's about

00:03:15,269 --> 00:03:19,950
having a continuous process that

00:03:18,239 --> 00:03:24,750
includes a lot of phases until stuff

00:03:19,950 --> 00:03:27,030
gets into production so still even once

00:03:24,750 --> 00:03:30,209
they automated the build process they

00:03:27,030 --> 00:03:31,049
had a lot of issues there and what they

00:03:30,209 --> 00:03:33,360
wanted to do is really really

00:03:31,049 --> 00:03:36,959
streamlined the entire flow from from

00:03:33,360 --> 00:03:39,180
development to production so essentially

00:03:36,959 --> 00:03:44,510
automate everything and I'll go over

00:03:39,180 --> 00:03:48,230
some of the stages in a few minutes so

00:03:44,510 --> 00:03:50,220
the first thing they wanted to do is

00:03:48,230 --> 00:03:53,459
basically automated ensure the quality

00:03:50,220 --> 00:03:55,290
assurance process so the CI server

00:03:53,459 --> 00:03:57,689
actually runs a few unit tests and

00:03:55,290 --> 00:03:59,250
integration tests but that's not enough

00:03:57,689 --> 00:04:01,140
because that's not running in the real

00:03:59,250 --> 00:04:03,540
environment in which this code would

00:04:01,140 --> 00:04:05,250
actually run in production so they

00:04:03,540 --> 00:04:07,560
wanted to build some process where they

00:04:05,250 --> 00:04:10,080
actually take the new code or the new

00:04:07,560 --> 00:04:11,580
artifacts and deploy them into an actual

00:04:10,080 --> 00:04:14,549
environment that looks as much as

00:04:11,580 --> 00:04:15,900
possible similar to two da to the real

00:04:14,549 --> 00:04:17,790
environment and that means actually

00:04:15,900 --> 00:04:19,470
building the environment from scratch

00:04:17,790 --> 00:04:20,170
deploying the components on top of it

00:04:19,470 --> 00:04:22,000
deploying the code

00:04:20,170 --> 00:04:23,950
and running some integration tests

00:04:22,000 --> 00:04:26,280
whether they're manual or automatic so

00:04:23,950 --> 00:04:28,030
it's the first thing they wanted to do

00:04:26,280 --> 00:04:29,290
the second thing they want to is

00:04:28,030 --> 00:04:30,970
actually increase the consisting of

00:04:29,290 --> 00:04:35,440
environment and across system so I

00:04:30,970 --> 00:04:36,790
mentioned that some of their code gets

00:04:35,440 --> 00:04:37,900
deployed into this environment some of

00:04:36,790 --> 00:04:39,790
the code gets equal in turns into

00:04:37,900 --> 00:04:42,760
another environment and they wanted to

00:04:39,790 --> 00:04:44,560
make sure that it's not just about being

00:04:42,760 --> 00:04:46,930
consistent across the flow of a single

00:04:44,560 --> 00:04:48,850
artifact or a single product it's about

00:04:46,930 --> 00:04:50,980
being consistent across products so it's

00:04:48,850 --> 00:04:52,720
easier for everyone to understand what's

00:04:50,980 --> 00:04:56,350
all going on there's kind of a common

00:04:52,720 --> 00:04:58,000
tool set for everyone the ops basically

00:04:56,350 --> 00:04:59,710
whenever they face a problem no matter

00:04:58,000 --> 00:05:02,530
in which application they can actually

00:04:59,710 --> 00:05:04,480
be a can tell what's going on there

00:05:02,530 --> 00:05:07,960
without really having to learn every

00:05:04,480 --> 00:05:09,460
application from scratch and why does

00:05:07,960 --> 00:05:11,980
that matter I mean that's that's

00:05:09,460 --> 00:05:14,950
actually taking it based on their words

00:05:11,980 --> 00:05:16,450
and what they have done so the first

00:05:14,950 --> 00:05:18,370
thing they wanted to reduce is those

00:05:16,450 --> 00:05:20,790
manual handovers even after the

00:05:18,370 --> 00:05:23,980
automated the CI server and everything

00:05:20,790 --> 00:05:26,920
what happens behind this process when

00:05:23,980 --> 00:05:30,090
this is done is that the artifacts would

00:05:26,920 --> 00:05:33,010
get created using the Jenkins server

00:05:30,090 --> 00:05:36,520
like jar files or war falls or whatever

00:05:33,010 --> 00:05:38,770
they use their and the handover process

00:05:36,520 --> 00:05:39,970
would be like okay that's animal Tony up

00:05:38,770 --> 00:05:42,880
to the obsolete listen I have a new

00:05:39,970 --> 00:05:44,860
build in that location take it deploy it

00:05:42,880 --> 00:05:46,180
do whatever you want with it and every

00:05:44,860 --> 00:05:50,230
time this process happened this is a

00:05:46,180 --> 00:05:53,710
potential friction point and a potential

00:05:50,230 --> 00:05:55,870
stability and instability point because

00:05:53,710 --> 00:05:57,610
there's no automated process around it

00:05:55,870 --> 00:05:58,930
so every time if it's one operator is

00:05:57,610 --> 00:06:00,520
going to do it one way and if there's

00:05:58,930 --> 00:06:02,200
another operator maybe it's going to do

00:06:00,520 --> 00:06:04,570
a bit differently and things would start

00:06:02,200 --> 00:06:07,560
to break so they wanted to reduce these

00:06:04,570 --> 00:06:09,760
manual end over as much as possible I

00:06:07,560 --> 00:06:11,140
mentioned about consistency reliant

00:06:09,760 --> 00:06:13,600
reliability obviously when you start

00:06:11,140 --> 00:06:16,690
automating things things become more

00:06:13,600 --> 00:06:19,150
reliable that's kind of goes without

00:06:16,690 --> 00:06:20,800
saying because the less manual

00:06:19,150 --> 00:06:21,490
intervention that you have there the

00:06:20,800 --> 00:06:25,930
more

00:06:21,490 --> 00:06:28,250
the more consistent level it becomes and

00:06:25,930 --> 00:06:31,220
they also wanted to create a common

00:06:28,250 --> 00:06:33,280
vocabulary so when the dev and ops teens

00:06:31,220 --> 00:06:35,300
were kind of separate from one another

00:06:33,280 --> 00:06:37,550
they weren't really speaking the same

00:06:35,300 --> 00:06:40,040
language okay devs ops were currently

00:06:37,550 --> 00:06:43,250
focused on or kind of focused on servers

00:06:40,040 --> 00:06:45,040
and when networks and the ends and devs

00:06:43,250 --> 00:06:47,330
or focus right on application modules

00:06:45,040 --> 00:06:50,210
and when you build this kind of

00:06:47,330 --> 00:06:52,700
streamlined process that goes from A to

00:06:50,210 --> 00:06:55,430
Z they actually speak the same language

00:06:52,700 --> 00:06:57,440
they speak the same terminology they

00:06:55,430 --> 00:06:59,180
have the same process that that they

00:06:57,440 --> 00:07:04,310
talk about and they understand the

00:06:59,180 --> 00:07:08,060
entire flow of the ways things work and

00:07:04,310 --> 00:07:10,150
the last bit is when you have a

00:07:08,060 --> 00:07:12,950
development team of about 40 people

00:07:10,150 --> 00:07:14,720
things tend to get messy really really

00:07:12,950 --> 00:07:18,800
fast if you don't for some sort of

00:07:14,720 --> 00:07:22,010
policy everyone kind of tries to use

00:07:18,800 --> 00:07:22,820
their own favorite tools and more so we

00:07:22,010 --> 00:07:26,180
know we're talking about open source

00:07:22,820 --> 00:07:28,400
projects and products it's really easy

00:07:26,180 --> 00:07:31,850
to just download and consume whatever

00:07:28,400 --> 00:07:33,770
you want and that might be fine for the

00:07:31,850 --> 00:07:35,240
development process but if you're a

00:07:33,770 --> 00:07:36,380
developer and you want to get things

00:07:35,240 --> 00:07:38,660
done faster you don't really care about

00:07:36,380 --> 00:07:39,500
what the ops of the ops are going to

00:07:38,660 --> 00:07:41,270
handle it so if you're going to

00:07:39,500 --> 00:07:43,610
introduce something like MongoDB and

00:07:41,270 --> 00:07:47,330
then someone would need to cluster it

00:07:43,610 --> 00:07:48,680
and administer it and monitor it that's

00:07:47,330 --> 00:07:50,750
not something you really think about

00:07:48,680 --> 00:07:52,700
when you kind of download started and

00:07:50,750 --> 00:07:54,740
say oh this is really cool API you can

00:07:52,700 --> 00:07:57,530
do it around with it so they want to

00:07:54,740 --> 00:08:00,380
enforce some common tools set and

00:07:57,530 --> 00:08:03,140
practices across the organization so

00:08:00,380 --> 00:08:05,479
that people would not just use whatever

00:08:03,140 --> 00:08:07,400
they want and we'll talk about some of

00:08:05,479 --> 00:08:10,490
the problems at that cause but that's

00:08:07,400 --> 00:08:13,460
kind of the goal here so this is what

00:08:10,490 --> 00:08:17,540
their pipeline looks like so you can see

00:08:13,460 --> 00:08:20,780
here that it starts from a code commit

00:08:17,540 --> 00:08:22,910
in the development it goes through the

00:08:20,780 --> 00:08:24,979
build process which is what they did

00:08:22,910 --> 00:08:27,260
with the CI server then it goes through

00:08:24,979 --> 00:08:29,660
acceptance testing just kind of

00:08:27,260 --> 00:08:31,550
functional testing then goes to

00:08:29,660 --> 00:08:33,380
performance testing which is basically a

00:08:31,550 --> 00:08:34,790
non-functional part of things being a

00:08:33,380 --> 00:08:37,580
make making sure that everything

00:08:34,790 --> 00:08:39,740
scales nicely and works nicely then

00:08:37,580 --> 00:08:43,070
stability essentially simulating fail

00:08:39,740 --> 00:08:44,360
overs and other extreme conditions when

00:08:43,070 --> 00:08:46,840
that is done basically all of those

00:08:44,360 --> 00:08:48,860
green errors are basically automatic

00:08:46,840 --> 00:08:51,410
promotions from one step to the other so

00:08:48,860 --> 00:08:53,120
when this happens it gets promoted

00:08:51,410 --> 00:08:56,840
automatically to hear when this goes

00:08:53,120 --> 00:08:58,880
well it goes to hear and so on and it's

00:08:56,840 --> 00:09:00,740
basically stops here it's kind of the

00:08:58,880 --> 00:09:02,360
difference between continuous deployment

00:09:00,740 --> 00:09:04,130
and content containers delivery or

00:09:02,360 --> 00:09:06,260
you'll get a kind of the line the line

00:09:04,130 --> 00:09:07,700
is crossed here at this point what they

00:09:06,260 --> 00:09:10,610
do is they stop here when this is

00:09:07,700 --> 00:09:12,410
passing and then there's another manual

00:09:10,610 --> 00:09:14,780
step that basically is a click of a

00:09:12,410 --> 00:09:19,960
button that's all it is that actually

00:09:14,780 --> 00:09:21,800
promotes things to what they call you 80

00:09:19,960 --> 00:09:24,410
just making sure everything works

00:09:21,800 --> 00:09:26,420
properly and then into production and

00:09:24,410 --> 00:09:30,020
now with each within each of these of

00:09:26,420 --> 00:09:32,450
these stages there are a lot of sub

00:09:30,020 --> 00:09:34,130
steps right so if you talk about the

00:09:32,450 --> 00:09:36,290
build process right it involves a lot of

00:09:34,130 --> 00:09:38,360
a lot of things within it right so you

00:09:36,290 --> 00:09:40,220
have to check out the code if to build

00:09:38,360 --> 00:09:42,440
it you have to prepare the unit test you

00:09:40,220 --> 00:09:44,000
have to run them prepared integration

00:09:42,440 --> 00:09:48,530
test run them published a report

00:09:44,000 --> 00:09:50,690
somewhere run it run it some sort of

00:09:48,530 --> 00:09:52,460
rules set on top of that make sure that

00:09:50,690 --> 00:09:54,290
you're happy with the test results let's

00:09:52,460 --> 00:09:55,670
say auto ninety-seven percent success

00:09:54,290 --> 00:09:58,460
might be good enough for some people

00:09:55,670 --> 00:10:01,280
maybe may not be good enough for others

00:09:58,460 --> 00:10:03,260
or it really matters what three percent

00:10:01,280 --> 00:10:05,570
have failed and these kinds of rules

00:10:03,260 --> 00:10:07,220
that they need to apply and once they're

00:10:05,570 --> 00:10:08,900
happy with that they're basically

00:10:07,220 --> 00:10:11,570
installing that in their code repository

00:10:08,900 --> 00:10:14,480
I think they're using artifactory for

00:10:11,570 --> 00:10:17,540
that for that purpose and notify the

00:10:14,480 --> 00:10:19,220
next stage in the pipeline which is just

00:10:17,540 --> 00:10:20,720
an example for one of these steps there

00:10:19,220 --> 00:10:24,530
are each of those steps is basically

00:10:20,720 --> 00:10:26,930
composed of a lot of those stages so

00:10:24,530 --> 00:10:28,940
they need a way to automate all of this

00:10:26,930 --> 00:10:32,540
and they start to looking to look at

00:10:28,940 --> 00:10:34,460
existing tool sets and the goal was

00:10:32,540 --> 00:10:36,950
really to build kind of a common

00:10:34,460 --> 00:10:39,800
platform that develop both developers in

00:10:36,950 --> 00:10:41,930
Ops guys can consume and everything

00:10:39,800 --> 00:10:43,130
there would be kind of automated so they

00:10:41,930 --> 00:10:45,830
don't really need to think about that

00:10:43,130 --> 00:10:47,140
they actually set up a special team for

00:10:45,830 --> 00:10:50,120
that

00:10:47,140 --> 00:10:52,120
would basically be responsible for

00:10:50,120 --> 00:10:54,470
building and maintaining this platform

00:10:52,120 --> 00:10:56,030
if you're familiar for example with the

00:10:54,470 --> 00:10:58,100
netflix use case it's got a very similar

00:10:56,030 --> 00:10:59,990
to what they do there are teams there to

00:10:58,100 --> 00:11:02,120
build the platform and then the rest of

00:10:59,990 --> 00:11:04,340
team custodians consume those most

00:11:02,120 --> 00:11:09,440
services so it's really kind of a

00:11:04,340 --> 00:11:11,060
platform platform as a service and the

00:11:09,440 --> 00:11:13,490
benefits of that are kind of obvious we

00:11:11,060 --> 00:11:18,020
talked about consistency but there also

00:11:13,490 --> 00:11:21,200
we talked about similar tool sets across

00:11:18,020 --> 00:11:22,220
the entire organizations and we talked

00:11:21,200 --> 00:11:23,330
and we didn't talk about that but

00:11:22,220 --> 00:11:24,920
there's also a single point of

00:11:23,330 --> 00:11:27,230
governance because once you do things

00:11:24,920 --> 00:11:29,570
the same way for all of your projects

00:11:27,230 --> 00:11:32,450
it's very easy to monitor it's very easy

00:11:29,570 --> 00:11:34,070
to government it's very easy to be

00:11:32,450 --> 00:11:39,430
present in those important control

00:11:34,070 --> 00:11:42,350
points for example or is it I'm sorry

00:11:39,430 --> 00:11:43,940
don't too far so it's you know being

00:11:42,350 --> 00:11:45,890
able to be here this important control

00:11:43,940 --> 00:11:50,600
point and do that for all of your

00:11:45,890 --> 00:11:54,380
application not just one okay on the

00:11:50,600 --> 00:11:56,120
other hand there's some other issues you

00:11:54,380 --> 00:11:57,740
know that that this thing started to

00:11:56,120 --> 00:11:59,870
cause and they're still dealing with

00:11:57,740 --> 00:12:02,120
those issues so for example the first

00:11:59,870 --> 00:12:04,640
one is that it sometimes it's too rigid

00:12:02,120 --> 00:12:06,860
and if you want to deploy let's say a

00:12:04,640 --> 00:12:09,680
new service that doesn't really use the

00:12:06,860 --> 00:12:11,180
same technologies it can become quite

00:12:09,680 --> 00:12:13,820
challenging right there mostly

00:12:11,180 --> 00:12:16,700
java-based shop so if you're starting to

00:12:13,820 --> 00:12:20,690
apply on on node or a native application

00:12:16,700 --> 00:12:22,460
or something else that existing tools

00:12:20,690 --> 00:12:23,480
that might not be the best fit for that

00:12:22,460 --> 00:12:27,110
so you have to kind of evolved the

00:12:23,480 --> 00:12:28,970
platform the other thing and this is

00:12:27,110 --> 00:12:30,830
something that I think is most important

00:12:28,970 --> 00:12:32,360
for them I mentioned you know people

00:12:30,830 --> 00:12:34,760
kind of grabbing tools off the internet

00:12:32,360 --> 00:12:37,900
and developing and working with that and

00:12:34,760 --> 00:12:41,620
there's really kind of a an evolutionary

00:12:37,900 --> 00:12:44,120
process there that the best tools are

00:12:41,620 --> 00:12:45,560
being kept in the window and the least

00:12:44,120 --> 00:12:47,660
you know the less good tools are kind of

00:12:45,560 --> 00:12:49,580
being thrown aside so when you actually

00:12:47,660 --> 00:12:52,880
dictate all the tool set and all the

00:12:49,580 --> 00:12:54,800
stack from the top you kind of lose some

00:12:52,880 --> 00:12:57,190
of that so that's something they're

00:12:54,800 --> 00:13:02,440
still facing today and

00:12:57,190 --> 00:13:03,940
and want to find a way to do that so

00:13:02,440 --> 00:13:05,320
they start off you know it's also it's

00:13:03,940 --> 00:13:06,850
all sounds very similar to

00:13:05,320 --> 00:13:08,590
platform-as-a-service right because it

00:13:06,850 --> 00:13:11,230
does a lot of those things and when they

00:13:08,590 --> 00:13:13,210
start the evaluation 12 months ago they

00:13:11,230 --> 00:13:16,450
looked at these two project which are

00:13:13,210 --> 00:13:19,410
probably familiar with I think they also

00:13:16,450 --> 00:13:23,350
looked at a number of other players

00:13:19,410 --> 00:13:29,650
specifically for java forgot the name

00:13:23,350 --> 00:13:32,730
the jenkins guys plow bees yeah yeah

00:13:29,650 --> 00:13:36,790
they look into cloudbees as well and

00:13:32,730 --> 00:13:38,260
they reach the conclusion that a as far

00:13:36,790 --> 00:13:40,780
as the past market is concerned and who

00:13:38,260 --> 00:13:43,870
talked about it during lunch it's still

00:13:40,780 --> 00:13:46,060
very much fluctuating it's not really

00:13:43,870 --> 00:13:47,980
kind of well-defined both boasting term

00:13:46,060 --> 00:13:50,380
in terms of the scope of these products

00:13:47,980 --> 00:13:54,720
in terms of standards in terms of the

00:13:50,380 --> 00:13:57,010
players there and more importantly they

00:13:54,720 --> 00:13:59,890
with each of those products they found

00:13:57,010 --> 00:14:03,940
some gaps that they couldn't kind of

00:13:59,890 --> 00:14:05,110
overcome if they took them as is so what

00:14:03,940 --> 00:14:08,140
they figures that they need to build

00:14:05,110 --> 00:14:09,490
something on their own and that's where

00:14:08,140 --> 00:14:12,190
clause that comes into the picture and

00:14:09,490 --> 00:14:14,970
chlorophyll cones in the picture and

00:14:12,190 --> 00:14:17,200
they kind of embarked on this journey

00:14:14,970 --> 00:14:22,360
and the first thing that they did is

00:14:17,200 --> 00:14:26,530
install CloudStack obviously i checked

00:14:22,360 --> 00:14:29,110
actually with them about two days ago

00:14:26,530 --> 00:14:31,360
and right now they have CloudStack

00:14:29,110 --> 00:14:33,130
deployment of about i think it's a few

00:14:31,360 --> 00:14:36,910
hundred VMs they're using for these

00:14:33,130 --> 00:14:39,040
processes it's still not use for

00:14:36,910 --> 00:14:41,230
production but if you remember the

00:14:39,040 --> 00:14:43,780
pipeline there it goes all the way up

00:14:41,230 --> 00:14:46,060
until production so all the things that

00:14:43,780 --> 00:14:47,830
they do are done with class stack up

00:14:46,060 --> 00:14:49,330
until production and I guess that's a

00:14:47,830 --> 00:14:52,240
matter of time until that happens kind

00:14:49,330 --> 00:14:55,630
of gaining the confidence that this can

00:14:52,240 --> 00:14:59,680
work one thing that they did contemplate

00:14:55,630 --> 00:15:02,200
very hard on is the big versus fry

00:14:59,680 --> 00:15:06,390
dilemma you guys familiar with that so

00:15:02,200 --> 00:15:09,580
what's what's the best way to automate

00:15:06,390 --> 00:15:10,600
applications are you baking the entire

00:15:09,580 --> 00:15:12,819
stack into the M

00:15:10,600 --> 00:15:15,430
edge and then just starting that as the

00:15:12,819 --> 00:15:19,269
application start or are you basically

00:15:15,430 --> 00:15:21,069
taking vanilla images and run an

00:15:19,269 --> 00:15:22,630
automation script like chef or puppet on

00:15:21,069 --> 00:15:25,899
top of them okay so there are kind of

00:15:22,630 --> 00:15:27,490
arguments to hear into there when you do

00:15:25,899 --> 00:15:30,130
the baked approach this is something for

00:15:27,490 --> 00:15:34,440
example that netflix is is doing what

00:15:30,130 --> 00:15:36,940
heavily the good side of that is that

00:15:34,440 --> 00:15:38,829
things are more stable because you're

00:15:36,940 --> 00:15:40,930
not dependent on package installations

00:15:38,829 --> 00:15:43,750
and stuff like that that can actually

00:15:40,930 --> 00:15:45,490
break even though it worked on all week

00:15:43,750 --> 00:15:48,100
ago okay someone moved the location of

00:15:45,490 --> 00:15:50,470
the package the internet connection is

00:15:48,100 --> 00:15:54,279
not working properly so the i don't know

00:15:50,470 --> 00:15:55,920
apt-get doesn't work for for example so

00:15:54,279 --> 00:15:58,360
when you bake everything into the image

00:15:55,920 --> 00:16:01,089
it becomes much more stable in that

00:15:58,360 --> 00:16:04,509
sense on the flip side you got to have

00:16:01,089 --> 00:16:06,850
very powerful tools to be able to bake

00:16:04,509 --> 00:16:10,360
those images to prepare them on regular

00:16:06,850 --> 00:16:12,100
basis party or build process and when

00:16:10,360 --> 00:16:14,050
you do face something and you face

00:16:12,100 --> 00:16:15,870
changes it typically harder to deploy

00:16:14,050 --> 00:16:19,120
them because image images are pretty big

00:16:15,870 --> 00:16:21,160
it takes a lot of time to upload take a

00:16:19,120 --> 00:16:23,980
lot of space so they have kind of other

00:16:21,160 --> 00:16:26,050
other downsides to them interestingly

00:16:23,980 --> 00:16:28,329
enough I think you know that if you guys

00:16:26,050 --> 00:16:33,100
are familiar with docker and what they

00:16:28,329 --> 00:16:34,930
do this is kind of a nice approach to to

00:16:33,100 --> 00:16:36,370
having not really baked images but

00:16:34,930 --> 00:16:38,709
something that's kind of more

00:16:36,370 --> 00:16:40,360
lightweight but still has all the

00:16:38,709 --> 00:16:42,250
benefits of baked images that's

00:16:40,360 --> 00:16:46,180
something that that they're looking at

00:16:42,250 --> 00:16:48,730
and we as providers of qualify are also

00:16:46,180 --> 00:16:50,709
looking at as well when you go to frying

00:16:48,730 --> 00:16:53,410
images or you know dynamically

00:16:50,709 --> 00:16:56,170
configuring them things are much simpler

00:16:53,410 --> 00:16:58,420
for maintenance right because you just

00:16:56,170 --> 00:17:02,040
have scripts or recipes or manifests

00:16:58,420 --> 00:17:05,860
depending on the tools you're using but

00:17:02,040 --> 00:17:08,819
anyone here using chef puppet how many

00:17:05,860 --> 00:17:11,439
times have you had a recipe fail on you

00:17:08,819 --> 00:17:15,760
for no apparent reason and it worked

00:17:11,439 --> 00:17:17,199
like two days ago many times usually so

00:17:15,760 --> 00:17:19,449
that's the problem with frying images

00:17:17,199 --> 00:17:21,350
right on the other end is just source

00:17:19,449 --> 00:17:23,600
code so it's very easy to change and try

00:17:21,350 --> 00:17:25,910
with images is a bit it's a bit tougher

00:17:23,600 --> 00:17:30,500
so they decided to go to this this

00:17:25,910 --> 00:17:34,160
approach and i'll tell you the toolchain

00:17:30,500 --> 00:17:36,740
that you're using right now and what

00:17:34,160 --> 00:17:38,600
they do is that they use they provision

00:17:36,740 --> 00:17:43,309
any Commission images on a pair of build

00:17:38,600 --> 00:17:45,650
bases so if we call the basically the

00:17:43,309 --> 00:17:49,520
the workflow that I show before you know

00:17:45,650 --> 00:17:51,740
of the steps that they go through so

00:17:49,520 --> 00:17:53,750
when they go to do integration testing

00:17:51,740 --> 00:17:55,190
and when they go to do performance

00:17:53,750 --> 00:17:59,000
testing every time that happens

00:17:55,190 --> 00:18:01,030
basically what what the what the Jenkins

00:17:59,000 --> 00:18:04,580
server does is actually set up a

00:18:01,030 --> 00:18:06,620
complete new environment let's build on

00:18:04,580 --> 00:18:09,230
top of CloudStack installing all the

00:18:06,620 --> 00:18:11,360
components on it running the tests and

00:18:09,230 --> 00:18:12,530
taking it down and that's all the other

00:18:11,360 --> 00:18:15,260
testing so that's how they make sure

00:18:12,530 --> 00:18:17,419
that across those stages the

00:18:15,260 --> 00:18:18,710
environments look almost exactly the

00:18:17,419 --> 00:18:21,470
same because because because it's just

00:18:18,710 --> 00:18:24,049
the Amazon Cloud stack that gets stuff

00:18:21,470 --> 00:18:26,600
installed onto them on one hand and on

00:18:24,049 --> 00:18:28,370
the other hand it's it's really

00:18:26,600 --> 00:18:30,169
efficient because it's not taking up any

00:18:28,370 --> 00:18:31,669
additional hardware or anything of that

00:18:30,169 --> 00:18:35,480
sort because we're using a cloud

00:18:31,669 --> 00:18:38,750
environment so how do they actually fry

00:18:35,480 --> 00:18:41,120
the images how do they do that so the

00:18:38,750 --> 00:18:45,169
first foundation here is chef they're

00:18:41,120 --> 00:18:47,570
they're heavily reliant on chef every

00:18:45,169 --> 00:18:50,559
component that they use within the

00:18:47,570 --> 00:18:53,539
application stack has a dedicated recipe

00:18:50,559 --> 00:18:57,380
and basically that's get triggered and

00:18:53,539 --> 00:19:00,380
installing stuff again you know some Sun

00:18:57,380 --> 00:19:02,690
sometimes things can fail especially if

00:19:00,380 --> 00:19:04,210
you're installing from package package

00:19:02,690 --> 00:19:06,470
repositories and these kinds of things

00:19:04,210 --> 00:19:10,039
but for the most part this is working

00:19:06,470 --> 00:19:12,950
pretty well for them and then they're

00:19:10,039 --> 00:19:15,799
using qualify to basically orchestrate

00:19:12,950 --> 00:19:21,020
things on top of chef so what they do

00:19:15,799 --> 00:19:22,429
there is basically i'll try not to

00:19:21,020 --> 00:19:25,760
repeat myself from the previous talk

00:19:22,429 --> 00:19:29,570
that I gave here so cloud if I basically

00:19:25,760 --> 00:19:32,780
serves as kind of a templating mechanism

00:19:29,570 --> 00:19:34,380
to define complete application stacks

00:19:32,780 --> 00:19:37,110
right so they're for example

00:19:34,380 --> 00:19:38,730
tom cat and my sequel and apache in

00:19:37,110 --> 00:19:41,310
front of it there's a there's a

00:19:38,730 --> 00:19:43,620
qualified blueprint that describes that

00:19:41,310 --> 00:19:46,710
it also describes what kind of images

00:19:43,620 --> 00:19:50,160
they want yeah permanence what kind of

00:19:46,710 --> 00:19:52,440
images they want from the from the

00:19:50,160 --> 00:19:54,060
CloudStack environment and zones and

00:19:52,440 --> 00:19:56,820
template IDs and all this stuff that you

00:19:54,060 --> 00:19:59,040
configure in a close second varmint and

00:19:56,820 --> 00:20:00,860
then they would model that into qualify

00:19:59,040 --> 00:20:03,240
recipe or qualified blueprint and

00:20:00,860 --> 00:20:07,020
basically what the Jenkins server does

00:20:03,240 --> 00:20:10,680
when a build step is finished it would

00:20:07,020 --> 00:20:12,960
go to the qualify manager trigger the

00:20:10,680 --> 00:20:15,180
installation through the REST API build

00:20:12,960 --> 00:20:17,430
the environment run the test and then

00:20:15,180 --> 00:20:18,750
tear everything down again through the

00:20:17,430 --> 00:20:21,870
chlorophyll API so cliff are really

00:20:18,750 --> 00:20:23,580
serves kind of as a as a templating

00:20:21,870 --> 00:20:27,540
orchestration engine above the

00:20:23,580 --> 00:20:29,150
application the application itself so

00:20:27,540 --> 00:20:31,800
I'm going to skip that a bit because I

00:20:29,150 --> 00:20:34,440
described it last time so this is

00:20:31,800 --> 00:20:36,660
schematically this is kind of what it

00:20:34,440 --> 00:20:38,480
looks like right there's Jenkins which

00:20:36,660 --> 00:20:40,470
is pushing the whenever the build

00:20:38,480 --> 00:20:42,510
succeed it pushes the application

00:20:40,470 --> 00:20:44,790
blueprint on to the cloud if I manager

00:20:42,510 --> 00:20:47,280
through the API the cloud if I manager

00:20:44,790 --> 00:20:50,040
goes then to cloudstack provisions the

00:20:47,280 --> 00:20:51,930
the VMS and the other resources that

00:20:50,040 --> 00:20:54,570
they need for the application and then

00:20:51,930 --> 00:20:57,660
assigns each to each of the VMS with the

00:20:54,570 --> 00:21:00,600
right role and triggers the chef client

00:20:57,660 --> 00:21:02,790
on top of that vm actually auto installs

00:21:00,600 --> 00:21:05,220
a shift client as well when the vm is

00:21:02,790 --> 00:21:07,410
created and then the application is up

00:21:05,220 --> 00:21:10,470
and running basically orchestrates also

00:21:07,410 --> 00:21:12,420
the startup process and and then they

00:21:10,470 --> 00:21:15,180
can run their tests on top of this newly

00:21:12,420 --> 00:21:18,720
created environment so this is all going

00:21:15,180 --> 00:21:20,850
all the way up to not to production but

00:21:18,720 --> 00:21:23,280
the step before production and when all

00:21:20,850 --> 00:21:25,380
these tests are successful there's a

00:21:23,280 --> 00:21:28,590
manual step of going and saying

00:21:25,380 --> 00:21:31,590
promoting this build or this piece of

00:21:28,590 --> 00:21:33,330
code onto production the next step

00:21:31,590 --> 00:21:35,220
they're going to do after deploying that

00:21:33,330 --> 00:21:37,470
the production is actually adding the

00:21:35,220 --> 00:21:39,360
kind of closing closing the loop here

00:21:37,470 --> 00:21:41,580
when this thing is going to also drive

00:21:39,360 --> 00:21:44,760
things into production you can do other

00:21:41,580 --> 00:21:46,800
interesting things with clarify you can

00:21:44,760 --> 00:21:47,610
aggregate all the metrics that they

00:21:46,800 --> 00:21:49,500
gather anyway

00:21:47,610 --> 00:21:52,530
and define some fresh ones on top of

00:21:49,500 --> 00:21:55,320
that and basically scale things on

00:21:52,530 --> 00:22:00,179
demand scale up down you know based on

00:21:55,320 --> 00:22:01,950
them based on their environment so let's

00:22:00,179 --> 00:22:06,690
see what we have here yeah we've covered

00:22:01,950 --> 00:22:07,890
that as well so where it stands today is

00:22:06,690 --> 00:22:12,900
that they have a fully automated

00:22:07,890 --> 00:22:16,580
pipeline starting from the code commit

00:22:12,900 --> 00:22:18,630
up until the stage before production

00:22:16,580 --> 00:22:22,020
promotion to production is still manual

00:22:18,630 --> 00:22:23,520
as I said before and right now they're

00:22:22,020 --> 00:22:25,230
thinking about all these positive post

00:22:23,520 --> 00:22:27,780
deployment aspects of you know auto

00:22:25,230 --> 00:22:32,160
scaling and recovery and repairing when

00:22:27,780 --> 00:22:34,710
things fail silver tourists and now i do

00:22:32,160 --> 00:22:36,090
have permission to share some of these

00:22:34,710 --> 00:22:38,429
links i'm going to put them a SlideShare

00:22:36,090 --> 00:22:40,380
and tweet about it with the hashtag of

00:22:38,429 --> 00:22:42,809
the conference so you guys can actually

00:22:40,380 --> 00:22:45,570
go in and look at some of the blog posts

00:22:42,809 --> 00:22:47,360
that they've posted around that this is

00:22:45,570 --> 00:22:49,950
actually part of a talk that they give

00:22:47,360 --> 00:22:51,809
in Amsterdam in the class that's the

00:22:49,950 --> 00:22:53,760
conference in Amsterdam about some of

00:22:51,809 --> 00:22:56,549
the organizational challenges they felt

00:22:53,760 --> 00:22:59,280
kind of a very entertaining talk so if

00:22:56,549 --> 00:23:00,660
you're interested in this thing really

00:22:59,280 --> 00:23:04,610
encourage you guys to go and read that

00:23:00,660 --> 00:23:17,690
very very interesting that's it for me

00:23:04,610 --> 00:23:17,690
sure have to wait thanks URI questions

00:23:19,130 --> 00:23:25,049
so I already tweeted the link to Oh

00:23:22,590 --> 00:23:27,540
awesome oh yes sir great you guys can

00:23:25,049 --> 00:23:29,820
can get it and you can yeah just like to

00:23:27,540 --> 00:23:33,090
use which company it is I couldn't say

00:23:29,820 --> 00:23:35,850
that quick question Yuri what was the

00:23:33,090 --> 00:23:37,950
monitoring alarming tool that they were

00:23:35,850 --> 00:23:39,630
using um I think that they're looking I

00:23:37,950 --> 00:23:42,570
think they have nagios but I'm not sure

00:23:39,630 --> 00:23:44,760
I'm so some and to the monitoring would

00:23:42,570 --> 00:23:47,370
then with that trigger auto scaling

00:23:44,760 --> 00:23:49,740
policies can clarify yeah so clarify

00:23:47,370 --> 00:23:52,200
what kind of the monitoring would get

00:23:49,740 --> 00:23:54,120
piped in to clarify codify we receive

00:23:52,200 --> 00:23:58,880
those metrics sure to the auto scaling

00:23:54,120 --> 00:23:58,880
or up or don't ya

00:24:03,610 --> 00:24:17,360
yes yep so with with the version these

00:24:14,660 --> 00:24:19,610
guys are using age 27 it's kind of a DSL

00:24:17,360 --> 00:24:22,570
on top of its job this version

00:24:19,610 --> 00:24:25,370
java-based so it's this on top of groovy

00:24:22,570 --> 00:24:27,799
in the in the next release which I

00:24:25,370 --> 00:24:30,679
described it this morning it's going to

00:24:27,799 --> 00:24:32,679
be a no based and it's it's it's not a

00:24:30,679 --> 00:24:36,070
custom it's not like a proprietary

00:24:32,679 --> 00:24:38,870
language it's based on tosca tosca is a

00:24:36,070 --> 00:24:40,970
task as a specification that's being

00:24:38,870 --> 00:24:43,190
worked on these days by IBM and red and

00:24:40,970 --> 00:24:46,429
other other people for describing these

00:24:43,190 --> 00:24:49,070
kinds of topologies balls and you have

00:24:46,429 --> 00:24:50,419
another talk on Tosca yeah tomorrow if

00:24:49,070 --> 00:24:52,460
you're interested in Tosca my colleague

00:24:50,419 --> 00:24:59,330
is giving another talk tomorrow morning

00:24:52,460 --> 00:25:02,080
but more questions no well thanks URI

00:24:59,330 --> 00:25:02,080

YouTube URL: https://www.youtube.com/watch?v=P5oExhMx_2g


