Title: Begin Open Source Multi Cloud Mulri Tenant Automation... - Marc Elian
Publication date: 2014-04-25
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:07,049
I'm Mackley obj I'm I'm french-canadian

00:00:03,620 --> 00:00:10,469
i live in Switzerland now so I'm very

00:00:07,049 --> 00:00:12,150
pleased to have been invited because

00:00:10,469 --> 00:00:13,860
it's great to be with you guys but also

00:00:12,150 --> 00:00:16,590
it gave me a fortunate e to spend a

00:00:13,860 --> 00:00:18,990
short week with friends and family in

00:00:16,590 --> 00:00:20,910
montreal on the way in which also meant

00:00:18,990 --> 00:00:25,920
that i'm i've recovered from jet lag

00:00:20,910 --> 00:00:30,029
which is it's great okay so i'll talk

00:00:25,920 --> 00:00:32,730
about slipstream in the next half an

00:00:30,029 --> 00:00:35,370
hour i'll quickly introduce six squared

00:00:32,730 --> 00:00:37,670
and go through why we build slipstream

00:00:35,370 --> 00:00:40,020
some of the challenges there and also

00:00:37,670 --> 00:00:43,070
talk about the interface with the

00:00:40,020 --> 00:00:45,629
infrastructure as a service layer which

00:00:43,070 --> 00:00:47,010
includes a cloud stack and then

00:00:45,629 --> 00:00:51,329
hopefully have time for some questions

00:00:47,010 --> 00:00:55,649
at the end ok so we're based in Geneva I

00:00:51,329 --> 00:00:57,570
said that before we were founded in 2007

00:00:55,649 --> 00:01:00,930
so we're independent we're free I hope

00:00:57,570 --> 00:01:05,070
we're innovative here are the customers

00:01:00,930 --> 00:01:09,090
we have you'll recognize some of them

00:01:05,070 --> 00:01:11,369
they're mostly European we have

00:01:09,090 --> 00:01:15,060
partnerships and collaborations with

00:01:11,369 --> 00:01:16,920
Amazon and IBM something that is quite

00:01:15,060 --> 00:01:18,479
exciting at the moment is helix nebula I

00:01:16,920 --> 00:01:22,140
don't know if some of you have heard

00:01:18,479 --> 00:01:23,850
it's basically the big science labs in

00:01:22,140 --> 00:01:27,049
Europe like cern like the european space

00:01:23,850 --> 00:01:29,450
agency and BL and pick have basically

00:01:27,049 --> 00:01:34,100
initiated a public-private partnership

00:01:29,450 --> 00:01:37,740
with a bunch of industrials in europe to

00:01:34,100 --> 00:01:39,990
federate cloud capabilities and

00:01:37,740 --> 00:01:43,259
slipstream that i'm going to present to

00:01:39,990 --> 00:01:45,119
you is used as a as a broker as the

00:01:43,259 --> 00:01:48,509
unified interface to this federated

00:01:45,119 --> 00:01:52,380
cloud which is a quite exciting for for

00:01:48,509 --> 00:01:55,070
for us so what we do in terms of

00:01:52,380 --> 00:01:58,140
products and technologies slipstream

00:01:55,070 --> 00:02:00,780
obviously is the focus of this talk but

00:01:58,140 --> 00:02:02,909
we also do Stratus lab and we provide

00:02:00,780 --> 00:02:04,020
the professional services around Stratus

00:02:02,909 --> 00:02:05,490
lab which is a an

00:02:04,020 --> 00:02:07,940
infrastructure-as-a-service solution but

00:02:05,490 --> 00:02:11,270
it's really focused on simple deployment

00:02:07,940 --> 00:02:13,940
and simplicity of views

00:02:11,270 --> 00:02:15,890
as of late we've combined it two

00:02:13,940 --> 00:02:19,550
together to create a new product called

00:02:15,890 --> 00:02:22,070
the nuvola box and this is basically a

00:02:19,550 --> 00:02:24,500
it's a cloud in a box it's about this

00:02:22,070 --> 00:02:27,230
size it's a fanless pc can host up to

00:02:24,500 --> 00:02:28,640
eight virtual machine it's a turnkey

00:02:27,230 --> 00:02:30,260
solution you plug it in you switch it on

00:02:28,640 --> 00:02:32,120
and you're you're good to go and an

00:02:30,260 --> 00:02:34,520
incorrect it degrades slipstream so it

00:02:32,120 --> 00:02:36,020
has its own app store if you want and

00:02:34,520 --> 00:02:38,210
you can remote control it as well if you

00:02:36,020 --> 00:02:39,950
want so it's we're positioning it for

00:02:38,210 --> 00:02:41,630
field operations you know you go

00:02:39,950 --> 00:02:45,200
somewhere you switch it on and you get

00:02:41,630 --> 00:02:48,130
to go anyways and it was introduced in

00:02:45,200 --> 00:02:51,800
Barcelona for the Mobile World Congress

00:02:48,130 --> 00:02:53,840
okay so the main topic is is a

00:02:51,800 --> 00:02:55,250
slipstream so what is slipstream it's a

00:02:53,840 --> 00:02:57,740
platform as a service as the besties

00:02:55,250 --> 00:03:00,230
introduced it's open source it's been

00:02:57,740 --> 00:03:03,560
open source for over a year now it's

00:03:00,230 --> 00:03:06,380
multi-cloud by its very nature its

00:03:03,560 --> 00:03:09,280
multi-tenant as well and it's all about

00:03:06,380 --> 00:03:13,010
automation okay that's what the point of

00:03:09,280 --> 00:03:15,800
slipstream is it's about automation now

00:03:13,010 --> 00:03:19,550
let's try to position slipstream in the

00:03:15,800 --> 00:03:21,560
as a service neighborhood so we have the

00:03:19,550 --> 00:03:25,310
infrastructure as a service CloudStack

00:03:21,560 --> 00:03:28,100
is a great example of that we have the

00:03:25,310 --> 00:03:29,510
platform as a service which is an

00:03:28,100 --> 00:03:31,880
abstraction of that trying to automate

00:03:29,510 --> 00:03:33,950
the way things are deployed we have

00:03:31,880 --> 00:03:36,950
different types of platform as a service

00:03:33,950 --> 00:03:38,900
we have the humanly the abstract ones

00:03:36,950 --> 00:03:41,209
like the Google App Engine the Heroku

00:03:38,900 --> 00:03:42,800
dia sure in its first incarnation which

00:03:41,209 --> 00:03:45,350
is really and they can a framework for

00:03:42,800 --> 00:03:47,300
for a request-response type type

00:03:45,350 --> 00:03:49,010
deployment that's not what slipstream is

00:03:47,300 --> 00:03:51,760
about it's this the second camp if you

00:03:49,010 --> 00:03:54,500
want with the with the the clarify the

00:03:51,760 --> 00:03:56,090
cloud foundry service mesh the end

00:03:54,500 --> 00:04:01,760
strategists and then there's there's

00:03:56,090 --> 00:04:03,890
many more which is really a solution to

00:04:01,760 --> 00:04:06,080
take advantage of infrastructure as a

00:04:03,890 --> 00:04:09,230
service to elevate a little bit in the

00:04:06,080 --> 00:04:11,480
value chain so slipstream is a pass in

00:04:09,230 --> 00:04:14,239
that sense it uses infrastructure as a

00:04:11,480 --> 00:04:17,720
service ap is and it's often delivered

00:04:14,239 --> 00:04:20,359
or used as a SAS okay so this is the the

00:04:17,720 --> 00:04:24,440
main screen I'll give you a short demo

00:04:20,359 --> 00:04:25,970
in a minute or two but we also have a

00:04:24,440 --> 00:04:28,820
it's a restful web service so you can

00:04:25,970 --> 00:04:31,100
actually interface it in rest and we

00:04:28,820 --> 00:04:32,960
also sorry you can't see here it's um

00:04:31,100 --> 00:04:34,580
it's a Python client that you can

00:04:32,960 --> 00:04:35,570
install through pip so you can do the

00:04:34,580 --> 00:04:37,430
same thing as you would do with the

00:04:35,570 --> 00:04:40,940
interface the user interface with a

00:04:37,430 --> 00:04:43,840
command line client so what I'm going to

00:04:40,940 --> 00:04:47,840
try to do is to explain the two driving

00:04:43,840 --> 00:04:50,030
use cases in slipstream starting with

00:04:47,840 --> 00:04:53,420
the the top down approach okay and it

00:04:50,030 --> 00:04:54,800
comes from the other the metaphor of the

00:04:53,420 --> 00:04:56,480
ED the App Store something that

00:04:54,800 --> 00:05:00,230
obviously we all know now in the mobile

00:04:56,480 --> 00:05:04,040
world that apps that apple started in

00:05:00,230 --> 00:05:07,400
and google android is also using the

00:05:04,040 --> 00:05:09,920
idea that we can provision application

00:05:07,400 --> 00:05:11,540
in a very simple way and to democratize

00:05:09,920 --> 00:05:14,000
that that process as much as possible

00:05:11,540 --> 00:05:15,830
it's a single button use you look for

00:05:14,000 --> 00:05:17,600
what you're interested in you press the

00:05:15,830 --> 00:05:19,070
button and in the details of

00:05:17,600 --> 00:05:21,650
provisioning that application in the

00:05:19,070 --> 00:05:23,900
cloud is taken care of okay so that's

00:05:21,650 --> 00:05:26,030
the top down it's the wood we position

00:05:23,900 --> 00:05:28,790
as the enterprise open app store okay so

00:05:26,030 --> 00:05:30,860
so it's it's it's creating a framework

00:05:28,790 --> 00:05:33,560
where you can have a dialogue between a

00:05:30,860 --> 00:05:35,480
software engineer and a customer the

00:05:33,560 --> 00:05:37,930
customer could be an end customer but it

00:05:35,480 --> 00:05:41,600
could also be a software engineer where

00:05:37,930 --> 00:05:42,919
the first one will provide recipes okay

00:05:41,600 --> 00:05:44,750
and then the second will be able to use

00:05:42,919 --> 00:05:47,240
those recipes in a convenient way to

00:05:44,750 --> 00:05:52,160
target the deployment into the cloud of

00:05:47,240 --> 00:05:53,419
his of her choice okay so let's have a

00:05:52,160 --> 00:05:55,580
quick look at what it looks like in

00:05:53,419 --> 00:06:04,070
slipstream at the moment so let me

00:05:55,580 --> 00:06:07,000
quickly log in if I get the right

00:06:04,070 --> 00:06:07,000
password it's going to help

00:06:11,169 --> 00:06:18,370
you go okay so once logged in I have the

00:06:16,270 --> 00:06:21,759
ability to look at the the first section

00:06:18,370 --> 00:06:26,080
is the app store so the it's possible to

00:06:21,759 --> 00:06:28,779
curate on some applications in the

00:06:26,080 --> 00:06:31,889
system and have them presented in the

00:06:28,779 --> 00:06:34,719
simple simple screen where I for example

00:06:31,889 --> 00:06:36,460
can go in in a single action deploy for

00:06:34,719 --> 00:06:39,249
example a word press ok so I'll click on

00:06:36,460 --> 00:06:43,330
this button and then I'm I'm presented

00:06:39,249 --> 00:06:44,919
with a first screen which just tells me

00:06:43,330 --> 00:06:47,409
you know a few parameters that the the

00:06:44,919 --> 00:06:50,889
recipe provider has created I just need

00:06:47,409 --> 00:06:53,199
to provide those fill those in including

00:06:50,889 --> 00:06:54,430
the choice of my the cloud I'm going to

00:06:53,199 --> 00:06:57,719
provide provision on so i'm going to

00:06:54,430 --> 00:07:01,409
provision on exascale that's a Swiss

00:06:57,719 --> 00:07:05,770
public cloud that is based on CloudStack

00:07:01,409 --> 00:07:09,400
so I'm going to use this the SAS that we

00:07:05,770 --> 00:07:17,409
provide is also connected with amazon

00:07:09,400 --> 00:07:21,370
and i'll provide a title here i'll just

00:07:17,409 --> 00:07:27,639
call it hello because i'll show you idle

00:07:21,370 --> 00:07:29,199
Denver ok I'm going to run this so it's

00:07:27,639 --> 00:07:33,219
now it's going on and it's going to

00:07:29,199 --> 00:07:35,860
deploy the big screen it's a bit hard to

00:07:33,219 --> 00:07:39,819
see out here so it's going to basically

00:07:35,860 --> 00:07:41,379
deploy the WordPress that I've just I've

00:07:39,819 --> 00:07:43,569
just described it's going to take a few

00:07:41,379 --> 00:07:46,659
minutes so we'll look at it at the end

00:07:43,569 --> 00:07:49,060
of the presentation what I'll do now

00:07:46,659 --> 00:07:52,089
just switch quickly switch to the

00:07:49,060 --> 00:07:55,199
dashboard and see I think I've got under

00:07:52,089 --> 00:08:01,529
exascale one that I've created earlier

00:07:55,199 --> 00:08:01,529
which one is it this one

00:08:02,230 --> 00:08:14,660
and if I go there there's an IP address

00:08:05,680 --> 00:08:17,240
think it's that one wow so that's what I

00:08:14,660 --> 00:08:19,220
ran just just before the demo so that's

00:08:17,240 --> 00:08:21,830
the word press that I've just deployed

00:08:19,220 --> 00:08:24,370
okay so it's the idea of creating a

00:08:21,830 --> 00:08:27,020
really simple round circle between

00:08:24,370 --> 00:08:28,760
somebody who provides all the recipes to

00:08:27,020 --> 00:08:30,770
create deploy an application and being

00:08:28,760 --> 00:08:33,440
able to consume this application okay so

00:08:30,770 --> 00:08:34,880
that's the top down view of it but what

00:08:33,440 --> 00:08:36,560
is interesting is while we're

00:08:34,880 --> 00:08:38,300
provisioning we're providing this for

00:08:36,560 --> 00:08:41,240
some managed service providers or I is

00:08:38,300 --> 00:08:44,300
v's that want to help users provision

00:08:41,240 --> 00:08:45,830
their applications we see that when we

00:08:44,300 --> 00:08:47,150
use the system ourselves to build a

00:08:45,830 --> 00:08:48,950
system because we use slipstream to

00:08:47,150 --> 00:08:51,050
deploy this list the system this

00:08:48,950 --> 00:08:53,930
convenience is actually very useful for

00:08:51,050 --> 00:08:58,190
developers as well which brings me to my

00:08:53,930 --> 00:09:01,130
second use case which is the the bottom

00:08:58,190 --> 00:09:03,890
up which is the leader what we call the

00:09:01,130 --> 00:09:05,690
DevOps use case I'm not going to have

00:09:03,890 --> 00:09:10,280
time to introduce DevOps pass you know

00:09:05,690 --> 00:09:13,280
who has not heard of DevOps okay so I'll

00:09:10,280 --> 00:09:15,350
take that you're either shy or you know

00:09:13,280 --> 00:09:18,500
what DevOps is which is great it's the

00:09:15,350 --> 00:09:20,720
idea of in this case creating a flow a

00:09:18,500 --> 00:09:22,810
continuous flow to bind development

00:09:20,720 --> 00:09:25,040
activities and operations activities and

00:09:22,810 --> 00:09:27,170
through through automation so that the

00:09:25,040 --> 00:09:28,700
ability to say I'm going to want to

00:09:27,170 --> 00:09:31,820
modify a piece of software and I want to

00:09:28,700 --> 00:09:33,290
see the result of that in in production

00:09:31,820 --> 00:09:35,120
or in pre-production as fast as possible

00:09:33,290 --> 00:09:37,750
and create this dialog and it's

00:09:35,120 --> 00:09:41,570
continuous feed continuous feedback okay

00:09:37,750 --> 00:09:43,940
and at the end of the day what what

00:09:41,570 --> 00:09:45,770
we're interested in is fine a framework

00:09:43,940 --> 00:09:48,380
in which we can execute something like a

00:09:45,770 --> 00:09:51,260
piece of script and this is actually the

00:09:48,380 --> 00:09:55,490
script I just invoked by clicking the

00:09:51,260 --> 00:09:57,530
Run button which is a piece of bash that

00:09:55,490 --> 00:10:00,380
will use a puppet let's stand alone to

00:09:57,530 --> 00:10:03,110
actually install and configure wordpress

00:10:00,380 --> 00:10:05,120
for me on the cloud of my choice iving

00:10:03,110 --> 00:10:08,120
taken care of what kind of you know how

00:10:05,120 --> 00:10:10,160
much core ram storage and so on is is is

00:10:08,120 --> 00:10:12,350
is it's all described in the in the

00:10:10,160 --> 00:10:15,710
image definition that I've used under

00:10:12,350 --> 00:10:19,850
the hood so if I go back quickly to my

00:10:15,710 --> 00:10:23,350
example so I'll stop this one close to

00:10:19,850 --> 00:10:23,350
close this one go back to my dashboard

00:10:24,070 --> 00:10:28,670
actually sorry I'm going to go back to

00:10:26,150 --> 00:10:33,920
the welcome screen close the app store

00:10:28,670 --> 00:10:35,390
and I'll go and explore my own space one

00:10:33,920 --> 00:10:39,170
of them is slipstream itself and what i

00:10:35,390 --> 00:10:43,820
can do is provision slipstream what

00:10:39,170 --> 00:10:45,230
slipstream okay so if i run here it's

00:10:43,820 --> 00:10:48,200
asking a bunch of questions one of them

00:10:45,230 --> 00:10:49,910
is is you know which type of repository

00:10:48,200 --> 00:10:51,290
i want to i want to deploy so this is

00:10:49,910 --> 00:10:53,630
released so it's going to deploy the

00:10:51,290 --> 00:10:56,060
latest release I could put snapshot here

00:10:53,630 --> 00:10:57,170
or stage then it will basically pick

00:10:56,060 --> 00:10:59,360
packages from a different location

00:10:57,170 --> 00:11:00,920
there's a different recipe here you can

00:10:59,360 --> 00:11:02,750
actually provide the exact version

00:11:00,920 --> 00:11:04,970
number so you can connect this to a

00:11:02,750 --> 00:11:06,230
Jenkin continuous integration server so

00:11:04,970 --> 00:11:08,450
it's going to deploy the thing and then

00:11:06,230 --> 00:11:11,000
just run all this district you want to

00:11:08,450 --> 00:11:12,980
the test you want to run with this okay

00:11:11,000 --> 00:11:17,060
so i'll leave it this way and then i'll

00:11:12,980 --> 00:11:18,590
just click run and again it goes out and

00:11:17,060 --> 00:11:23,750
then just provisions that that system

00:11:18,590 --> 00:11:31,970
and i've done that just before on XO

00:11:23,750 --> 00:11:36,610
scale which will be this one and i'll

00:11:31,970 --> 00:11:36,610
just pull the IP of this guy

00:11:45,930 --> 00:11:50,339
voila so I've got slipstream deployed

00:11:48,630 --> 00:11:52,320
basketry okay that's how we use it and

00:11:50,339 --> 00:11:55,140
we take one stable version and we roll

00:11:52,320 --> 00:12:00,170
out new version until we're satisfied

00:11:55,140 --> 00:12:00,170
and we roll that up and we move on okay

00:12:05,390 --> 00:12:10,920
and what we see actually is we see this

00:12:08,700 --> 00:12:14,550
discontent constant dialogue between the

00:12:10,920 --> 00:12:16,320
developers and for the app but also when

00:12:14,550 --> 00:12:18,750
we use this for customers or customers

00:12:16,320 --> 00:12:21,660
use this in their own internal processes

00:12:18,750 --> 00:12:24,630
they create this this this this dialogue

00:12:21,660 --> 00:12:28,290
of somebody wants to work on a component

00:12:24,630 --> 00:12:29,850
is like working on a window instead of

00:12:28,290 --> 00:12:31,770
just having the wall they can actually

00:12:29,850 --> 00:12:33,270
provision the entire building and fiddle

00:12:31,770 --> 00:12:35,250
the window in which actually provides

00:12:33,270 --> 00:12:36,839
great value in as opposed to you know

00:12:35,250 --> 00:12:38,550
all it works on my laptop and the

00:12:36,839 --> 00:12:40,680
problem must be somewhere else we break

00:12:38,550 --> 00:12:42,029
that that that that we're dialogue by

00:12:40,680 --> 00:12:45,290
being able to actually provision the

00:12:42,029 --> 00:12:45,290
entire system the same way every time

00:12:45,410 --> 00:12:49,649
now this is initial deployment right and

00:12:47,940 --> 00:12:50,790
there's a big discussion around the

00:12:49,649 --> 00:12:52,529
platform as a service world at the

00:12:50,790 --> 00:12:53,820
moment is what what's next what what

00:12:52,529 --> 00:12:55,709
what do you do once you've deployed

00:12:53,820 --> 00:12:58,890
initially your system into production

00:12:55,709 --> 00:13:00,930
and there's two approaches I'm not too

00:12:58,890 --> 00:13:03,089
hung up on the taxonomy this is these

00:13:00,930 --> 00:13:04,740
are my terms but there's there's two

00:13:03,089 --> 00:13:06,450
approaches in terms of what you do once

00:13:04,740 --> 00:13:08,100
an application is in production to

00:13:06,450 --> 00:13:10,890
maintain okay so there's the first

00:13:08,100 --> 00:13:13,260
approach i like all managed which is the

00:13:10,890 --> 00:13:16,080
upgrade my great institute okay and then

00:13:13,260 --> 00:13:17,970
the second one is a coordinated one so

00:13:16,080 --> 00:13:20,010
the first one it is like a mutable

00:13:17,970 --> 00:13:22,920
deployment which you'll basically tie it

00:13:20,010 --> 00:13:24,540
into a managed puppet or chef and in

00:13:22,920 --> 00:13:27,839
that system will be managed through

00:13:24,540 --> 00:13:30,959
through that loop and the second one is

00:13:27,839 --> 00:13:33,209
is to say will deploy once it's

00:13:30,959 --> 00:13:35,400
immutable we want to create an upgrade

00:13:33,209 --> 00:13:37,980
of this then we'd reply another one we

00:13:35,400 --> 00:13:42,450
migrate if required we switch and then

00:13:37,980 --> 00:13:45,390
we decommission the first one okay what

00:13:42,450 --> 00:13:48,480
we see is that often it's not clear that

00:13:45,390 --> 00:13:50,640
the the managed approach is always

00:13:48,480 --> 00:13:52,860
required it's often pushed as that's the

00:13:50,640 --> 00:13:55,380
way to do it but when you speak to

00:13:52,860 --> 00:13:58,050
people that are already kind of wary of

00:13:55,380 --> 00:13:59,760
a transition to cloud and so on when you

00:13:58,050 --> 00:14:01,950
add that extra burden of

00:13:59,760 --> 00:14:03,630
to switch to yet another complex system

00:14:01,950 --> 00:14:05,330
because these systems are great we use

00:14:03,630 --> 00:14:08,400
them but they're they're complicated

00:14:05,330 --> 00:14:10,230
often that's too big a step to to go

00:14:08,400 --> 00:14:13,590
through so we think there is great value

00:14:10,230 --> 00:14:15,500
in pursuing which we call the

00:14:13,590 --> 00:14:18,390
coordinated approach which is just

00:14:15,500 --> 00:14:23,910
create immutable deployments and then

00:14:18,390 --> 00:14:25,440
redeploy switch and then scratch so in

00:14:23,910 --> 00:14:27,360
terms of slipstream we're agnostic we

00:14:25,440 --> 00:14:32,960
don't care both were both systems will

00:14:27,360 --> 00:14:35,340
work the same but we realize that

00:14:32,960 --> 00:14:38,100
there's a lot of bash out there there's

00:14:35,340 --> 00:14:43,290
a lot of power shell out there we're

00:14:38,100 --> 00:14:45,690
more than puppet or chef deployments

00:14:43,290 --> 00:14:49,560
there was a discussion at one of the

00:14:45,690 --> 00:14:51,090
DevOps in göteborg a while ago where

00:14:49,560 --> 00:14:52,410
basically the chef and puppet guys we're

00:14:51,090 --> 00:14:53,850
talking you know kind of arguing with

00:14:52,410 --> 00:14:55,680
each other and someone else said look

00:14:53,850 --> 00:14:57,870
stop fighting no the enemy is bash

00:14:55,680 --> 00:15:00,060
ninety percent of the market is is bash

00:14:57,870 --> 00:15:03,630
driven so you know the ten percent is

00:15:00,060 --> 00:15:05,040
not worth fighting and we think we see

00:15:03,630 --> 00:15:07,530
the same right so what we were saying is

00:15:05,040 --> 00:15:09,480
lets you bring your bash bring your

00:15:07,530 --> 00:15:11,430
power she'll get the benefit of

00:15:09,480 --> 00:15:13,140
automation because that's the first

00:15:11,430 --> 00:15:15,270
order return on investment and then

00:15:13,140 --> 00:15:17,430
start to roll into right now maybe we

00:15:15,270 --> 00:15:19,590
want to put some sanity in the picture

00:15:17,430 --> 00:15:21,360
and roll out you know puppet chef maybe

00:15:19,590 --> 00:15:24,780
in standalone mode before you move into

00:15:21,360 --> 00:15:26,880
a management anyways so you know maybe

00:15:24,780 --> 00:15:29,430
that the guideline is if everything that

00:15:26,880 --> 00:15:31,080
is stateless and try to to bring all of

00:15:29,430 --> 00:15:33,300
you stay at the same place then

00:15:31,080 --> 00:15:35,010
coordinated approach is probably a good

00:15:33,300 --> 00:15:37,530
a good idea and then when you have

00:15:35,010 --> 00:15:39,570
complex state to manage and if migration

00:15:37,530 --> 00:15:42,900
of that state is complicated maybe the

00:15:39,570 --> 00:15:46,050
use case of of managed ways is a is

00:15:42,900 --> 00:15:47,820
interesting okay so let's talk about the

00:15:46,050 --> 00:15:50,490
data model inside slipstream how does

00:15:47,820 --> 00:15:53,190
that work it's actually quite simple we

00:15:50,490 --> 00:15:55,440
have a few abstracts image is if you

00:15:53,190 --> 00:15:57,750
remember your patterns for the

00:15:55,440 --> 00:15:59,400
developers in the room image provides

00:15:57,750 --> 00:16:02,850
inheritance okay so you can actually

00:15:59,400 --> 00:16:04,290
compose your blocks out of inheritance

00:16:02,850 --> 00:16:07,140
oh you have a native image which will

00:16:04,290 --> 00:16:08,700
map to the real thing in the cloud you

00:16:07,140 --> 00:16:10,440
want to deploy and you can say right

00:16:08,700 --> 00:16:13,020
from that native image I'm going to put

00:16:10,440 --> 00:16:15,600
my dependencies my Tomcats my

00:16:13,020 --> 00:16:18,330
my database my things like that okay and

00:16:15,600 --> 00:16:20,190
then on top of that maybe I'll put the

00:16:18,330 --> 00:16:21,210
things that involved in the software i'm

00:16:20,190 --> 00:16:24,120
working on and then you can actually

00:16:21,210 --> 00:16:25,860
capture those as as as new negative

00:16:24,120 --> 00:16:28,140
images and everything is version

00:16:25,860 --> 00:16:31,380
controlled so it actually speeds up

00:16:28,140 --> 00:16:34,380
things a lot so that's for a single

00:16:31,380 --> 00:16:37,050
image a second construct is a deployment

00:16:34,380 --> 00:16:40,920
that provides aggregation so when you

00:16:37,050 --> 00:16:43,020
you you deploy an application that is a

00:16:40,920 --> 00:16:44,580
multi-tier okay you'll have multi

00:16:43,020 --> 00:16:46,530
virtual machines that you need to be

00:16:44,580 --> 00:16:48,150
deployed together and coordinated that's

00:16:46,530 --> 00:16:49,440
what the deployment model does okay

00:16:48,150 --> 00:16:50,790
provides coordination between those

00:16:49,440 --> 00:16:53,160
things that the database starts before

00:16:50,790 --> 00:16:55,080
your server before your test clients for

00:16:53,160 --> 00:16:56,970
example there's messaging that that will

00:16:55,080 --> 00:17:00,060
ensure that the coordination is working

00:16:56,970 --> 00:17:01,380
great the third one is project which

00:17:00,060 --> 00:17:03,090
will our project is containment it's

00:17:01,380 --> 00:17:04,250
like folders and file systems it allows

00:17:03,090 --> 00:17:08,220
you to kind of organize your information

00:17:04,250 --> 00:17:10,530
properly and the run is to turn an image

00:17:08,220 --> 00:17:12,750
or deployment into a real thing and

00:17:10,530 --> 00:17:15,330
that's what it gets handed over to the

00:17:12,750 --> 00:17:17,400
connector and say I turned that abstract

00:17:15,330 --> 00:17:19,740
thing into real virtual machines in the

00:17:17,400 --> 00:17:21,930
cloud and everything is I said his

00:17:19,740 --> 00:17:23,339
version control so you can every changes

00:17:21,930 --> 00:17:24,690
is version control you can actually

00:17:23,339 --> 00:17:26,640
create relationships between those

00:17:24,690 --> 00:17:28,110
things as floating so it always take the

00:17:26,640 --> 00:17:30,870
latest or you can pin them to specific

00:17:28,110 --> 00:17:33,390
version which is a good way to control

00:17:30,870 --> 00:17:35,070
what what goes into production so here's

00:17:33,390 --> 00:17:37,740
a quick example of if you pick the

00:17:35,070 --> 00:17:40,230
version of Santos and you have version 4

00:17:37,740 --> 00:17:42,540
1 and version 55 and commit changes and

00:17:40,230 --> 00:17:46,980
so on and it's it's taken care of in the

00:17:42,540 --> 00:17:48,600
system and I'm not going to talk too

00:17:46,980 --> 00:17:52,470
much about the actual deployment

00:17:48,600 --> 00:17:53,820
examples we I gave you a quick demo just

00:17:52,470 --> 00:17:56,520
to say that you know slipstream

00:17:53,820 --> 00:17:57,900
provisions into the cloud configures

00:17:56,520 --> 00:18:00,270
that virtual machine when it's deployed

00:17:57,900 --> 00:18:02,580
and it removes itself from that that

00:18:00,270 --> 00:18:04,200
that workflow and then the user can

00:18:02,580 --> 00:18:06,780
actually talk to it in this case through

00:18:04,200 --> 00:18:08,220
a public network okay so the idea is

00:18:06,780 --> 00:18:10,230
that it's in true it's it's not

00:18:08,220 --> 00:18:13,770
intrusive it triggers the deployment and

00:18:10,230 --> 00:18:16,530
any gets out of the picture we can also

00:18:13,770 --> 00:18:18,300
do multiple multi-tier and deployment

00:18:16,530 --> 00:18:20,610
like as I said and what is also

00:18:18,300 --> 00:18:22,380
interesting is that when we create a

00:18:20,610 --> 00:18:25,320
deployment which is an aggregation of

00:18:22,380 --> 00:18:26,490
images you can also define the

00:18:25,320 --> 00:18:29,010
multiplicity of those

00:18:26,490 --> 00:18:30,900
so in this case the mongodb cluster

00:18:29,010 --> 00:18:33,150
hears of three VMs but you can change

00:18:30,900 --> 00:18:35,370
this at the moment of provisioning okay

00:18:33,150 --> 00:18:37,290
so and then the the recipes will

00:18:35,370 --> 00:18:44,340
actually scale and then take this into

00:18:37,290 --> 00:18:46,050
account now we can also do that we can

00:18:44,340 --> 00:18:49,140
as part of a deployment you can break it

00:18:46,050 --> 00:18:50,760
into into subsets and you can deploy

00:18:49,140 --> 00:18:52,200
different parts in different clouds or

00:18:50,760 --> 00:18:56,100
different regions of the same cloud and

00:18:52,200 --> 00:18:58,170
then reach higher resilience for

00:18:56,100 --> 00:19:00,660
examples you can have the same

00:18:58,170 --> 00:19:02,040
deployment view but spans actually

00:19:00,660 --> 00:19:07,559
virtual machines on different different

00:19:02,040 --> 00:19:11,880
clouds at the same time okay a bit of

00:19:07,559 --> 00:19:13,200
architecture I'm not going to have time

00:19:11,880 --> 00:19:15,510
to go through all the details which is

00:19:13,200 --> 00:19:18,929
what is important is that is the is the

00:19:15,510 --> 00:19:21,450
data flows if you want into this I said

00:19:18,929 --> 00:19:25,110
before it's a restful web interface web

00:19:21,450 --> 00:19:28,470
service so all of the synchronous calls

00:19:25,110 --> 00:19:30,270
come here and basically our round trips

00:19:28,470 --> 00:19:32,570
to the database and out with minimum

00:19:30,270 --> 00:19:35,250
processing because that's really fast

00:19:32,570 --> 00:19:37,440
everything that requires activity

00:19:35,250 --> 00:19:40,679
especially round trips to the clouds

00:19:37,440 --> 00:19:42,570
goes through an asynchronous processor

00:19:40,679 --> 00:19:45,150
there's a cute where all the puts and

00:19:42,570 --> 00:19:47,340
posts are inserted that gets executed in

00:19:45,150 --> 00:19:48,900
a synchronous way this does round trips

00:19:47,340 --> 00:19:50,550
to the clouds and back and this

00:19:48,900 --> 00:19:53,730
information is just refreshed on on

00:19:50,550 --> 00:19:57,000
poles on gets if you want from the rest

00:19:53,730 --> 00:20:02,280
part in terms of technology that is used

00:19:57,000 --> 00:20:04,230
we use so Java for for a lot of it we're

00:20:02,280 --> 00:20:06,030
using more and more closure so closure

00:20:04,230 --> 00:20:08,910
is used for the rendering we're using

00:20:06,030 --> 00:20:11,700
the and live framework for that but

00:20:08,910 --> 00:20:13,350
where it really rocks it's it's it's

00:20:11,700 --> 00:20:15,240
where the synchronous processing takes

00:20:13,350 --> 00:20:18,270
place so we're using core a sink which

00:20:15,240 --> 00:20:19,800
is a closure version of go if you guys

00:20:18,270 --> 00:20:21,809
have followed that it's just fantastic

00:20:19,800 --> 00:20:26,910
for multi-threaded and concurrent

00:20:21,809 --> 00:20:28,290
development everything that is client

00:20:26,910 --> 00:20:29,850
that will be deployed into a virtual

00:20:28,290 --> 00:20:32,820
machine or interface with the virtual

00:20:29,850 --> 00:20:34,710
machine now is is is switching to to lib

00:20:32,820 --> 00:20:36,690
cloud and Python and I'll talk about

00:20:34,710 --> 00:20:39,150
that a little bit more okay so that's

00:20:36,690 --> 00:20:40,110
that's the roughly and one last thing is

00:20:39,150 --> 00:20:43,470
we are

00:20:40,110 --> 00:20:45,330
migrating from our DBMS or like SQL

00:20:43,470 --> 00:20:47,730
databases to couchbase to take advantage

00:20:45,330 --> 00:20:51,720
of a document based system and in the

00:20:47,730 --> 00:20:55,080
mix of consistency and eventually

00:20:51,720 --> 00:20:56,610
consistent capabilities of that database

00:20:55,080 --> 00:21:01,799
and they make scaling a lot simpler as

00:20:56,610 --> 00:21:03,270
well ok so the way slipstream talks to

00:21:01,799 --> 00:21:05,370
the cloud in a way it's I able to

00:21:03,270 --> 00:21:07,170
actually do native if you want a

00:21:05,370 --> 00:21:10,620
multi-cloud support is through a

00:21:07,170 --> 00:21:12,929
connector architecture so in the Java

00:21:10,620 --> 00:21:15,720
world I've just pulled out here the

00:21:12,929 --> 00:21:17,910
connector interface and it has a bunch

00:21:15,720 --> 00:21:20,610
of you know launched terminate describe

00:21:17,910 --> 00:21:22,530
instance standard things that that any

00:21:20,610 --> 00:21:23,820
any any system interfacing with

00:21:22,530 --> 00:21:26,640
infrastructure as a service needs to do

00:21:23,820 --> 00:21:29,190
we're basically we're passing that this

00:21:26,640 --> 00:21:30,630
run object is the object of the the

00:21:29,190 --> 00:21:33,809
model I was describing earlier which

00:21:30,630 --> 00:21:36,030
actually says go and then instant she

00:21:33,809 --> 00:21:37,410
ate something you know and that run

00:21:36,030 --> 00:21:38,760
could be a single image or could

00:21:37,410 --> 00:21:42,440
actually be a deployment which would be

00:21:38,760 --> 00:21:44,809
a an aggregation of virtual machines ok

00:21:42,440 --> 00:21:48,480
so that's what needs to be implemented

00:21:44,809 --> 00:21:50,340
1444 for every every cloud we talk to

00:21:48,480 --> 00:21:52,049
and these are loaded dynamically so you

00:21:50,340 --> 00:21:54,390
can actually instantiate more connectors

00:21:52,049 --> 00:22:03,000
without having to restart a server so it

00:21:54,390 --> 00:22:05,640
is a bit about lib cloud so we started

00:22:03,000 --> 00:22:07,440
with j clouds and then lib cloud when

00:22:05,640 --> 00:22:09,750
Jay clouds was not giving any support

00:22:07,440 --> 00:22:12,600
and then more and more we're shifting to

00:22:09,750 --> 00:22:15,780
lib cloud and why is that well first

00:22:12,600 --> 00:22:19,040
it's Python so when we're deploying into

00:22:15,780 --> 00:22:21,600
into the cloud and to a virtual machine

00:22:19,040 --> 00:22:23,580
Python is supported everywhere except

00:22:21,600 --> 00:22:26,460
windows we're working around that as

00:22:23,580 --> 00:22:28,919
well because we support windows but lib

00:22:26,460 --> 00:22:31,380
cloud itself is more flexible it's

00:22:28,919 --> 00:22:32,820
easier to extend to hack and the

00:22:31,380 --> 00:22:34,110
community is quite vibrant and it's

00:22:32,820 --> 00:22:36,210
actually moving quite fast which is

00:22:34,110 --> 00:22:38,160
great and it there been done a great job

00:22:36,210 --> 00:22:40,860
at not breaking backward compatibility

00:22:38,160 --> 00:22:42,990
with always the case so that's what

00:22:40,860 --> 00:22:44,940
we're shifting and in terms of interrupt

00:22:42,990 --> 00:22:48,120
well we basically just have wrappers

00:22:44,940 --> 00:22:49,620
from the Java to the the Python and this

00:22:48,120 --> 00:22:51,750
is important because when we're doing a

00:22:49,620 --> 00:22:52,190
deployment slipstream basically hands

00:22:51,750 --> 00:22:54,080
over

00:22:52,190 --> 00:22:58,759
to a small virtual machine called an

00:22:54,080 --> 00:23:01,250
Orchestrator it hands over the work of

00:22:58,759 --> 00:23:03,080
deploying the rest of the system and

00:23:01,250 --> 00:23:05,720
that's all in Python okay so that's

00:23:03,080 --> 00:23:07,759
where it's important that it it's not

00:23:05,720 --> 00:23:11,840
intrusive because bringing Java with you

00:23:07,759 --> 00:23:14,899
is is heavier so I said before that

00:23:11,840 --> 00:23:16,759
slipstream is open source so we're it's

00:23:14,899 --> 00:23:20,360
it's released under an Apache todaro

00:23:16,759 --> 00:23:23,179
license it's hosted in github under the

00:23:20,360 --> 00:23:26,149
slipstream organization terms of

00:23:23,179 --> 00:23:30,500
development we now have 12 full-time

00:23:26,149 --> 00:23:32,000
developers six are provided by by six

00:23:30,500 --> 00:23:34,429
squares so half half of our team is

00:23:32,000 --> 00:23:36,379
working full time on that the other half

00:23:34,429 --> 00:23:40,070
is actually coming from industry and

00:23:36,379 --> 00:23:43,100
academia I like about 5050 it's actually

00:23:40,070 --> 00:23:44,629
growing reasonably fast but it's staying

00:23:43,100 --> 00:23:46,789
manageable you know we don't have any

00:23:44,629 --> 00:23:49,159
intention of creating a monster it's

00:23:46,789 --> 00:23:52,340
actually quite nice to be working in a

00:23:49,159 --> 00:23:54,889
focused in a focused team and we will be

00:23:52,340 --> 00:23:58,429
rolling out in our through our blog a

00:23:54,889 --> 00:23:59,899
lot of build and test best practices and

00:23:58,429 --> 00:24:02,570
services as well so that it's actually

00:23:59,899 --> 00:24:09,679
easier to contribute so watch that space

00:24:02,570 --> 00:24:11,600
for for that having said that not

00:24:09,679 --> 00:24:12,980
everything is open source okay so we

00:24:11,600 --> 00:24:14,629
have about half of the connect the core

00:24:12,980 --> 00:24:15,980
is open source there's no problem half

00:24:14,629 --> 00:24:17,360
of the connectors are open source as

00:24:15,980 --> 00:24:19,370
well but the connectors that are talking

00:24:17,360 --> 00:24:21,200
to proprietary solutions then we've

00:24:19,370 --> 00:24:26,899
decided to keep those proprietary as

00:24:21,200 --> 00:24:29,389
well okay so for example here are the

00:24:26,899 --> 00:24:31,309
open source connectors so you'll

00:24:29,389 --> 00:24:34,429
recognize cloudstack OpenStack we have

00:24:31,309 --> 00:24:36,529
an occ I and Stratus lab would open open

00:24:34,429 --> 00:24:39,320
nebula behind we also have a connector

00:24:36,529 --> 00:24:40,759
for physical machines so either vm or

00:24:39,320 --> 00:24:42,950
physical servers we can integrate

00:24:40,759 --> 00:24:44,600
physical or singleton if you want in

00:24:42,950 --> 00:24:49,759
your infrastructure into into

00:24:44,600 --> 00:24:51,769
deployments the proprietary connectors

00:24:49,759 --> 00:24:54,860
that we have at a moment our cloud sigma

00:24:51,769 --> 00:24:59,990
vmware that's the vCloud director ec2

00:24:54,860 --> 00:25:03,019
abaco and IBM SmartCloud entry and now

00:24:59,990 --> 00:25:04,730
just for when we're providing a

00:25:03,019 --> 00:25:05,389
dashboard is this view i didn't have

00:25:04,730 --> 00:25:07,849
time to show

00:25:05,389 --> 00:25:09,289
much about we need to get a lot of

00:25:07,849 --> 00:25:11,959
information from the cloud layer in

00:25:09,289 --> 00:25:13,609
order to to kind of bring together to

00:25:11,959 --> 00:25:17,809
aggregate this information in terms of

00:25:13,609 --> 00:25:19,700
historical views where I am in terms of

00:25:17,809 --> 00:25:21,469
how many VMS I have with respect to

00:25:19,700 --> 00:25:22,669
quota i've been i've been given because

00:25:21,469 --> 00:25:25,700
there's a quota concept that can be

00:25:22,669 --> 00:25:28,339
switched on as well in slipstream i want

00:25:25,700 --> 00:25:31,690
to be able to see what r which exact the

00:25:28,339 --> 00:25:35,299
ends are running on which clouds i have

00:25:31,690 --> 00:25:39,469
and so on and so in order to do this we

00:25:35,299 --> 00:25:44,059
need to query the user in the API of the

00:25:39,469 --> 00:25:45,889
of the the the is layer on a regular

00:25:44,059 --> 00:25:47,450
basis what we do is by default that's

00:25:45,889 --> 00:25:49,549
that's prime you can change those

00:25:47,450 --> 00:25:51,139
parameters is every four minutes we

00:25:49,549 --> 00:25:52,700
basically scan through all the users all

00:25:51,139 --> 00:25:55,089
the clouds that are connected you know

00:25:52,700 --> 00:25:58,639
to gather this information and for every

00:25:55,089 --> 00:26:00,200
online users users have done a request

00:25:58,639 --> 00:26:02,479
in the last 60 seconds then we do this

00:26:00,200 --> 00:26:04,429
every 10 seconds provide a responsive

00:26:02,479 --> 00:26:06,559
interface so that's a lot of work for

00:26:04,429 --> 00:26:09,079
our servers and if you have a large

00:26:06,559 --> 00:26:10,309
system then it's also going to be a lot

00:26:09,079 --> 00:26:12,109
of work for the infrastructure as a

00:26:10,309 --> 00:26:14,479
service API that's on the other side so

00:26:12,109 --> 00:26:15,799
pull works because it works for

00:26:14,479 --> 00:26:18,499
everything but what we're really looking

00:26:15,799 --> 00:26:20,450
for so that's a call to the cloud stack

00:26:18,499 --> 00:26:23,209
communities you know can we do push

00:26:20,450 --> 00:26:24,859
could we register to some event change

00:26:23,209 --> 00:26:26,359
and then just be notified when something

00:26:24,859 --> 00:26:28,219
changes that would actually be great I

00:26:26,359 --> 00:26:29,509
think for everybody so I don't know if

00:26:28,219 --> 00:26:33,709
that's possible maybe it's a discussion

00:26:29,509 --> 00:26:35,659
we can have later on so what's next in

00:26:33,709 --> 00:26:37,700
our technology roadmap we have so

00:26:35,659 --> 00:26:39,999
connectors we're I'm hoping we're going

00:26:37,700 --> 00:26:42,440
to start soon with Microsoft for their

00:26:39,999 --> 00:26:45,339
infrastructure as a service as your

00:26:42,440 --> 00:26:47,779
offer there's a see me from DM TF

00:26:45,339 --> 00:26:50,509
standard for infrastructure as a service

00:26:47,779 --> 00:26:53,809
API that we're we're developing and

00:26:50,509 --> 00:26:56,089
connected for auto scale is is is the is

00:26:53,809 --> 00:26:58,820
the topic at the moment I mean most of

00:26:56,089 --> 00:27:01,279
my guys including myself are working on

00:26:58,820 --> 00:27:04,700
this so the ability to to do to auto

00:27:01,279 --> 00:27:08,589
scale beyond the initial scale and it

00:27:04,700 --> 00:27:11,899
ties with a unified monitoring framework

00:27:08,589 --> 00:27:13,070
we're working with enterprise as well

00:27:11,899 --> 00:27:16,060
and there's a few features that are

00:27:13,070 --> 00:27:20,380
needed there in terms of advanced roles

00:27:16,060 --> 00:27:23,830
how to manage contracts and manage more

00:27:20,380 --> 00:27:25,690
accurately or in a better way quotas and

00:27:23,830 --> 00:27:27,130
so on within an organization and it ties

00:27:25,690 --> 00:27:30,520
also to the billing and we're also

00:27:27,130 --> 00:27:33,520
listening as well to what we want so if

00:27:30,520 --> 00:27:36,460
you want to have a play we have a SAS of

00:27:33,520 --> 00:27:38,560
offer it's free so go and play with it

00:27:36,460 --> 00:27:40,720
there's two connectors enable there

00:27:38,560 --> 00:27:42,520
that's what I've demoed today so the

00:27:40,720 --> 00:27:44,530
CloudStack one is run is running on

00:27:42,520 --> 00:27:46,150
exascale like I said it sits in it since

00:27:44,530 --> 00:27:50,410
women it's a great system it works

00:27:46,150 --> 00:27:53,410
wonderfully it's fast as well which is

00:27:50,410 --> 00:27:55,150
great just before I conclude a few

00:27:53,410 --> 00:27:56,770
resources we have to blog series that

00:27:55,150 --> 00:27:58,870
are running at the moment see through

00:27:56,770 --> 00:28:00,010
cloud is a it's a journey through a

00:27:58,870 --> 00:28:02,200
cloud from a non technical person

00:28:00,010 --> 00:28:05,830
perspective so if you have people that

00:28:02,200 --> 00:28:07,270
are kind of wondering what is the best

00:28:05,830 --> 00:28:09,610
way to approach and understand cloud

00:28:07,270 --> 00:28:12,100
maybe that's an interesting read and

00:28:09,610 --> 00:28:14,050
it's also quite funny so it's quite a

00:28:12,100 --> 00:28:16,450
good good one and the corner is from the

00:28:14,050 --> 00:28:18,280
developers as well we have product

00:28:16,450 --> 00:28:19,780
descriptions and a lot of documentation

00:28:18,280 --> 00:28:21,970
if you go at a top right of slipstream

00:28:19,780 --> 00:28:22,990
there's an information button there and

00:28:21,970 --> 00:28:26,500
there's a lot of documentation that

00:28:22,990 --> 00:28:28,270
ships with the application and you can

00:28:26,500 --> 00:28:31,120
install the client just with pip if you

00:28:28,270 --> 00:28:34,710
want to play with that so a quick call

00:28:31,120 --> 00:28:37,600
for action we're looking for

00:28:34,710 --> 00:28:38,680
collaborating in further developing the

00:28:37,600 --> 00:28:40,750
clouds that connector with the

00:28:38,680 --> 00:28:42,430
cloudstack community so that's something

00:28:40,750 --> 00:28:44,200
we started to talk about and it'd be

00:28:42,430 --> 00:28:46,750
great if we could actually eventually

00:28:44,200 --> 00:28:48,190
not hand over in a shouldn't forget but

00:28:46,750 --> 00:28:49,630
hand over and then and then and then

00:28:48,190 --> 00:28:51,490
collaborate with the clouds that

00:28:49,630 --> 00:28:53,290
community because there you guys are you

00:28:51,490 --> 00:28:55,000
know building a lot of new new features

00:28:53,290 --> 00:29:00,060
and so on that we'd love to expose and

00:28:55,000 --> 00:29:03,040
through into a through slipstream and

00:29:00,060 --> 00:29:05,170
that we have we have started the

00:29:03,040 --> 00:29:07,180
retreats we have a winter in a summer

00:29:05,170 --> 00:29:10,060
retreat so that the the winter one was

00:29:07,180 --> 00:29:12,610
in the Alps this this winter we went

00:29:10,060 --> 00:29:14,890
skiing it was great in the back top

00:29:12,610 --> 00:29:17,980
corner is Moe bla was a beautiful week

00:29:14,890 --> 00:29:19,879
so that's great way to uh to join the

00:29:17,980 --> 00:29:22,940
fun meet the team and then

00:29:19,879 --> 00:29:24,440
and immerse yourself in what we do and

00:29:22,940 --> 00:29:27,409
the summer retreat which will probably

00:29:24,440 --> 00:29:29,869
be in August will be on a air and Son

00:29:27,409 --> 00:29:32,989
theme the same place where we'll go

00:29:29,869 --> 00:29:34,759
around the paragliding course for

00:29:32,989 --> 00:29:37,639
beginners and more advanced people so if

00:29:34,759 --> 00:29:41,649
you want to join fun and hard work

00:29:37,639 --> 00:29:50,059
actually as well then it's an invitation

00:29:41,649 --> 00:29:54,249
thank you very much thank you Mark II

00:29:50,059 --> 00:29:54,249
know we have five minutes for questions

00:29:56,379 --> 00:30:02,239
right so like in one minute how would

00:30:00,139 --> 00:30:04,129
you compare your project to something

00:30:02,239 --> 00:30:07,759
like a stratus or we know which is also

00:30:04,129 --> 00:30:13,429
incubating in Apache I don't know I

00:30:07,759 --> 00:30:16,489
don't know that we're gonna have a talk

00:30:13,429 --> 00:30:19,179
from Stratus later today so we'll we'll

00:30:16,489 --> 00:30:23,209
be able to give you my yeah my opinion

00:30:19,179 --> 00:30:24,949
yeah when what you know one idea was the

00:30:23,209 --> 00:30:26,419
session here was that CloudStack you

00:30:24,949 --> 00:30:28,239
know doesn't you know he's never going

00:30:26,419 --> 00:30:30,649
to do pass where CloudStack is really a

00:30:28,239 --> 00:30:32,809
infrastructure-as-a-service so we wanted

00:30:30,649 --> 00:30:34,940
to have people from the past community

00:30:32,809 --> 00:30:36,559
come here and show us what they're doing

00:30:34,940 --> 00:30:39,919
and how they are integrating with

00:30:36,559 --> 00:30:44,329
CloudStack so we have slipstream cloud

00:30:39,919 --> 00:30:46,190
if I talk from startups tratos so you

00:30:44,329 --> 00:30:48,469
know thanks for all of you for coming

00:30:46,190 --> 00:30:50,029
and agreeing to present your products

00:30:48,469 --> 00:30:53,659
even though you know you're kind of

00:30:50,029 --> 00:31:03,109
competing one more question come on I'm

00:30:53,659 --> 00:31:06,769
sure you have questions couchbase so we

00:31:03,109 --> 00:31:10,609
use a by default hypersonic hibernate

00:31:06,769 --> 00:31:16,279
jpa interface and we're switching to the

00:31:10,609 --> 00:31:17,929
couch base which is a document based

00:31:16,279 --> 00:31:19,339
database and one of the reason is

00:31:17,929 --> 00:31:22,249
actually for what i was saying is when

00:31:19,339 --> 00:31:24,379
we do when we deploy version to version

00:31:22,249 --> 00:31:27,529
it's really easy to break the schema

00:31:24,379 --> 00:31:29,899
when we using a relational database with

00:31:27,529 --> 00:31:31,969
a document-oriented database it's much

00:31:29,899 --> 00:31:36,319
more resilient it's not a silver bullet

00:31:31,969 --> 00:31:41,029
either but it provides a much smoother

00:31:36,319 --> 00:31:44,319
path to 22 upgrades but also it has a

00:31:41,029 --> 00:31:48,829
lot of interesting features in terms of

00:31:44,319 --> 00:31:52,009
concurrency distribution and so on and

00:31:48,829 --> 00:31:55,159
has great great closure support as well

00:31:52,009 --> 00:32:03,999
that's another good reason to to to go

00:31:55,159 --> 00:32:03,999
down that road sorry can you breed

00:32:05,919 --> 00:32:11,570
the contribution ah can you repeat the

00:32:09,799 --> 00:32:13,519
question yeah so the question is what is

00:32:11,570 --> 00:32:14,870
the expected contribution from

00:32:13,519 --> 00:32:18,139
cloudstack from the community in the

00:32:14,870 --> 00:32:20,299
night okay it really is in first

00:32:18,139 --> 00:32:23,240
instance is is everything that has to do

00:32:20,299 --> 00:32:26,600
with the connector that slipstream uses

00:32:23,240 --> 00:32:30,980
to interface with wood cloudstack so

00:32:26,600 --> 00:32:35,080
it's it's this the Python module that we

00:32:30,980 --> 00:32:38,539
have around lib cloud in order to

00:32:35,080 --> 00:32:43,039
configure and kind of expose what other

00:32:38,539 --> 00:32:45,139
parameters that a user can use to better

00:32:43,039 --> 00:32:49,789
define the environment in which I would

00:32:45,139 --> 00:32:50,990
will describe the virtual machine so

00:32:49,789 --> 00:32:54,830
that for example we can take advantage

00:32:50,990 --> 00:32:58,130
of for example firewalling network as

00:32:54,830 --> 00:33:00,740
sdn comes around able to take advantage

00:32:58,130 --> 00:33:03,620
of all of those features that are are

00:33:00,740 --> 00:33:05,659
not part of the standard way because

00:33:03,620 --> 00:33:09,049
there's no come in denominators at this

00:33:05,659 --> 00:33:11,539
stage between the cloud providers but

00:33:09,049 --> 00:33:12,980
because we have dedicated connectors it

00:33:11,539 --> 00:33:15,289
doesn't matter right it's just a

00:33:12,980 --> 00:33:17,750
question of of exposing those features

00:33:15,289 --> 00:33:21,470
through so that cloud slack will shine

00:33:17,750 --> 00:33:23,630
through via this disconnectors you'll be

00:33:21,470 --> 00:33:26,539
able to do more when you're targeting a

00:33:23,630 --> 00:33:28,309
cloudstack endpoint as opposed to

00:33:26,539 --> 00:33:34,070
another infrastructure as a service

00:33:28,309 --> 00:33:36,220
solution great oh thanks mercurio thank

00:33:34,070 --> 00:33:36,220

YouTube URL: https://www.youtube.com/watch?v=emEFardu76k


