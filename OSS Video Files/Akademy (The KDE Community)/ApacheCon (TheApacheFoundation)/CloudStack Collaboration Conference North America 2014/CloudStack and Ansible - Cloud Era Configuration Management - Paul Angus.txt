Title: CloudStack and Ansible - Cloud Era Configuration Management - Paul Angus
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:05,220
I'm going to talk about ansible and

00:00:02,909 --> 00:00:07,080
CloudStack I'm gonna be a bit more

00:00:05,220 --> 00:00:11,849
generic a bit more general in a lot of

00:00:07,080 --> 00:00:14,370
spaces to where Billy what just was but

00:00:11,849 --> 00:00:15,839
also I will do a demo but I'm dumb too

00:00:14,370 --> 00:00:20,640
many that have gone pear-shaped to do

00:00:15,839 --> 00:00:22,050
mine life but also my we looking

00:00:20,640 --> 00:00:23,430
particularly using ansible with cloud

00:00:22,050 --> 00:00:27,689
stack as well as using it to deploy

00:00:23,430 --> 00:00:30,539
cloud stack so a bit of background so

00:00:27,689 --> 00:00:33,210
I'm a cloud architect shape blue of work

00:00:30,539 --> 00:00:34,800
we've cloud stack since the kind of

00:00:33,210 --> 00:00:37,500
basically when she's bought by Citrix in

00:00:34,800 --> 00:00:39,860
around about 2.2 13 so I've seen it kind

00:00:37,500 --> 00:00:44,489
of change quite a bit

00:00:39,860 --> 00:00:45,989
my like specialty for have one is around

00:00:44,489 --> 00:00:49,020
actually deploying cloud stack in

00:00:45,989 --> 00:00:50,940
customer environments and then helping

00:00:49,020 --> 00:00:53,550
them with using cloud stack in their

00:00:50,940 --> 00:00:54,629
environment integrating in with what it

00:00:53,550 --> 00:00:56,910
is they're actually trying to achieve

00:00:54,629 --> 00:00:59,820
what they're trying to do you can see

00:00:56,910 --> 00:01:02,370
some of the clients I've normally work

00:00:59,820 --> 00:01:04,379
with and I say this means that when I

00:01:02,370 --> 00:01:05,850
look at cloud stack and stick my Orion

00:01:04,379 --> 00:01:08,400
and mailing lists and that kind of thing

00:01:05,850 --> 00:01:10,530
I'm looking at it from the point of view

00:01:08,400 --> 00:01:12,060
of what will people who consuming cloud

00:01:10,530 --> 00:01:13,140
stack what are they going to do with

00:01:12,060 --> 00:01:15,150
this feature how they going to want to

00:01:13,140 --> 00:01:18,960
use it how they want to what they want

00:01:15,150 --> 00:01:21,810
to get out of cloud stack and so we've

00:01:18,960 --> 00:01:24,150
got some of the kind of names from a

00:01:21,810 --> 00:01:25,830
certain thing tree logo slide and our

00:01:24,150 --> 00:01:28,829
obligatory kind of just a bit about

00:01:25,830 --> 00:01:31,320
shape blue kind of what you can take

00:01:28,829 --> 00:01:33,329
from that is this is my day job you know

00:01:31,320 --> 00:01:35,700
if some people work with cloud stack but

00:01:33,329 --> 00:01:38,189
it's not necessarily what they do day in

00:01:35,700 --> 00:01:40,560
day out it's this is what we do day in

00:01:38,189 --> 00:01:42,960
day out this is how we try and earn our

00:01:40,560 --> 00:01:46,890
money so this is what we're we're going

00:01:42,960 --> 00:01:49,890
with so it might have been better if

00:01:46,890 --> 00:01:51,450
this talk was before but because I'm

00:01:49,890 --> 00:01:56,130
going to start bit back at the beginning

00:01:51,450 --> 00:01:58,200
of what is configuration management for

00:01:56,130 --> 00:02:00,180
some of you this is going to be kind of

00:01:58,200 --> 00:02:01,979
knotty but for some of you this kind of

00:02:00,180 --> 00:02:03,210
hopefully fills in some gaps because you

00:02:01,979 --> 00:02:05,159
might have heard people talking a lot

00:02:03,210 --> 00:02:07,259
from the technical side of it but now

00:02:05,159 --> 00:02:10,550
I'm going back and saying well what is

00:02:07,259 --> 00:02:13,730
it were actually trying to do here

00:02:10,550 --> 00:02:16,820
and basically I would kind of try and

00:02:13,730 --> 00:02:19,120
describe it as the idea of saying what

00:02:16,820 --> 00:02:22,460
state do we want a server to end up in

00:02:19,120 --> 00:02:24,020
rather than the way we usually where we

00:02:22,460 --> 00:02:27,920
use the script to say what steps do we

00:02:24,020 --> 00:02:29,990
need to do to get to a state we now just

00:02:27,920 --> 00:02:31,820
describe the state and let our

00:02:29,990 --> 00:02:33,410
configuration management tool do the

00:02:31,820 --> 00:02:35,690
rest of that for us and get it to that

00:02:33,410 --> 00:02:38,390
state and know that it shouldn't do it

00:02:35,690 --> 00:02:40,970
and know not to do damage if we tell it

00:02:38,390 --> 00:02:42,590
again I want to be in that state I'll

00:02:40,970 --> 00:02:45,410
give some examples in the sink second

00:02:42,590 --> 00:02:46,610
and the other part of it is moving away

00:02:45,410 --> 00:02:50,630
from the old-fashioned scripting that

00:02:46,610 --> 00:02:52,430
also gives us centralization of both the

00:02:50,630 --> 00:02:54,080
actual configuration data and the

00:02:52,430 --> 00:02:56,470
actions that we take to get to that

00:02:54,080 --> 00:02:56,470
state

00:02:57,050 --> 00:03:03,050
the last line said it has to be

00:02:59,630 --> 00:03:06,410
idempotent and then so I had to look up

00:03:03,050 --> 00:03:09,500
exactly what idempotent the definition

00:03:06,410 --> 00:03:13,820
of it is and obviously this is probably

00:03:09,500 --> 00:03:15,380
best it describes in examples so our

00:03:13,820 --> 00:03:18,860
first example and I'm going to take

00:03:15,380 --> 00:03:20,720
CloudStack as an example here the first

00:03:18,860 --> 00:03:24,590
thing we have to do is make some changes

00:03:20,720 --> 00:03:28,220
to the my.com file for our sequel

00:03:24,590 --> 00:03:30,260
service if you were using just a some

00:03:28,220 --> 00:03:31,790
bash scripting some shell scripting you

00:03:30,260 --> 00:03:34,459
might do a set command that just adds

00:03:31,790 --> 00:03:36,950
those in for you but the problem becomes

00:03:34,459 --> 00:03:39,200
if if during your installation something

00:03:36,950 --> 00:03:41,000
went wrong if you try and run that again

00:03:39,200 --> 00:03:43,010
it's going to start adding lines in

00:03:41,000 --> 00:03:44,900
again that may not be so bad in this

00:03:43,010 --> 00:03:47,000
instance but certainly after time in

00:03:44,900 --> 00:03:47,900
other cases that's that's really not

00:03:47,000 --> 00:03:50,959
going to be good if you just keep

00:03:47,900 --> 00:03:52,850
multiplying the lines you have so a

00:03:50,959 --> 00:03:54,170
configuration management tool is going

00:03:52,850 --> 00:03:56,480
to know that those lines need to be

00:03:54,170 --> 00:03:58,790
there and it's going to look to see if

00:03:56,480 --> 00:04:03,410
they're there and not add them again if

00:03:58,790 --> 00:04:05,269
you don't need them so we'll say in our

00:04:03,410 --> 00:04:07,940
configuration measurement or we would

00:04:05,269 --> 00:04:11,840
just say those lines must be in my my

00:04:07,940 --> 00:04:14,290
doc Kampf and that's all I need to tell

00:04:11,840 --> 00:04:14,290
you about it

00:04:16,050 --> 00:04:20,970
the other kind of things you might say

00:04:18,360 --> 00:04:24,030
is these are the service I need to be

00:04:20,970 --> 00:04:25,950
installed and running we've done these

00:04:24,030 --> 00:04:27,930
the configuration files that I need and

00:04:25,950 --> 00:04:33,000
I need them to contain this information

00:04:27,930 --> 00:04:34,470
I need this file in that directory those

00:04:33,000 --> 00:04:36,420
kind of things where you're just going

00:04:34,470 --> 00:04:37,890
to say that's what's got a sort it's got

00:04:36,420 --> 00:04:39,000
to be like and I'm not going to tell you

00:04:37,890 --> 00:04:41,190
how to do it because you already know

00:04:39,000 --> 00:04:45,210
and you won't break things by trying to

00:04:41,190 --> 00:04:48,540
do it and again I say the centralization

00:04:45,210 --> 00:04:51,090
of your configuration and the fact that

00:04:48,540 --> 00:04:53,160
these can then be reused so then if

00:04:51,090 --> 00:04:55,290
you've got a whole pool of web servers

00:04:53,160 --> 00:04:57,120
there will certainly be addresses

00:04:55,290 --> 00:04:58,740
wherever gonna be subtly different but

00:04:57,120 --> 00:05:00,690
if your configuration management tells

00:04:58,740 --> 00:05:02,460
you says you can now I want that

00:05:00,690 --> 00:05:04,050
configuration on all of these with the

00:05:02,460 --> 00:05:05,250
exception of you're going to be called

00:05:04,050 --> 00:05:06,570
that you're going to be called that and

00:05:05,250 --> 00:05:08,130
you're going to be called that that's a

00:05:06,570 --> 00:05:10,050
lot better than going into scripts and

00:05:08,130 --> 00:05:11,430
then finding all the instances of an IP

00:05:10,050 --> 00:05:13,350
address and changing them and then

00:05:11,430 --> 00:05:16,260
running and individually so that's just

00:05:13,350 --> 00:05:20,310
a quick Whistlestop tour of so a

00:05:16,260 --> 00:05:25,590
high-level config management so to talk

00:05:20,310 --> 00:05:28,830
about ansible specifically from a

00:05:25,590 --> 00:05:30,950
technical point of view we don't need a

00:05:28,830 --> 00:05:36,030
client-server kind of architecture

00:05:30,950 --> 00:05:41,850
ansible uses SSH so as long as you have

00:05:36,030 --> 00:05:44,130
SSH and it's Python 2.4 greater on the

00:05:41,850 --> 00:05:47,220
machine it can then communicate with it

00:05:44,130 --> 00:05:50,490
and start making changes and doing

00:05:47,220 --> 00:05:53,040
whatever you want you can use either

00:05:50,490 --> 00:05:54,630
directly typing a password in if you

00:05:53,040 --> 00:05:57,690
want to if you're running one-by-one

00:05:54,630 --> 00:05:59,460
ansible and the demo does that or you

00:05:57,690 --> 00:06:01,500
can even use the public private keys so

00:05:59,460 --> 00:06:03,600
that you don't need to have any kind of

00:06:01,500 --> 00:06:05,190
touch at all

00:06:03,600 --> 00:06:06,810
this isn't kind of makes it easier to

00:06:05,190 --> 00:06:09,180
deploy in environments particularly kind

00:06:06,810 --> 00:06:11,610
of very new ones as opposed to needing

00:06:09,180 --> 00:06:16,980
to bake in for instance a chef clients

00:06:11,610 --> 00:06:19,080
or whatever before you start we had used

00:06:16,980 --> 00:06:22,320
the idea of modules to actually do

00:06:19,080 --> 00:06:25,650
actions so the yum module knows about

00:06:22,320 --> 00:06:28,180
how young works how not to break things

00:06:25,650 --> 00:06:30,370
when he's running yum how to do and

00:06:28,180 --> 00:06:31,960
update how to install we raise all that

00:06:30,370 --> 00:06:34,330
kind of thing and they can be written in

00:06:31,960 --> 00:06:37,449
any language that's capable returning

00:06:34,330 --> 00:06:39,699
Jason or key value pairs which means

00:06:37,449 --> 00:06:43,210
it's very easy to add modules another

00:06:39,699 --> 00:06:45,190
they get added up quite a rate because

00:06:43,210 --> 00:06:48,160
to be fair it is a newer technology than

00:06:45,190 --> 00:06:49,810
the chef and puppet so a lot of these

00:06:48,160 --> 00:06:51,910
things have all been done and chef and

00:06:49,810 --> 00:06:54,900
puppet but I think ansible is kind of

00:06:51,910 --> 00:06:58,509
coming up on the rails there and also

00:06:54,900 --> 00:07:02,979
technical it's got an API so it's always

00:06:58,509 --> 00:07:05,110
always good from the user perspective it

00:07:02,979 --> 00:07:07,150
is a much shallower learning curve to

00:07:05,110 --> 00:07:11,560
get started with ansible than any of the

00:07:07,150 --> 00:07:13,449
others and you don't need to so much

00:07:11,560 --> 00:07:15,849
learn a program programming language

00:07:13,449 --> 00:07:17,979
will be particularly fluent in it to get

00:07:15,849 --> 00:07:22,120
it to do what you need to do I would

00:07:17,979 --> 00:07:24,400
consider myself more as an op dev than a

00:07:22,120 --> 00:07:27,220
dev op I came from the operations side

00:07:24,400 --> 00:07:29,199
and can code a bit and I can use ansible

00:07:27,220 --> 00:07:31,949
pretty well I don't come from the sort

00:07:29,199 --> 00:07:34,900
dev side and I'm moving to operations

00:07:31,949 --> 00:07:37,690
and as I say so I've got a note at the

00:07:34,900 --> 00:07:40,030
bottom the if you like ecosystem is not

00:07:37,690 --> 00:07:42,370
as mature yeah but they launched their

00:07:40,030 --> 00:07:45,039
ansible galaxy which is just is like a

00:07:42,370 --> 00:07:48,070
community for people uploading their

00:07:45,039 --> 00:07:53,349
play books for others to use so it is

00:07:48,070 --> 00:07:56,919
growing and getting momentum so where

00:07:53,349 --> 00:08:00,009
can we use ansible we can use it to

00:07:56,919 --> 00:08:02,620
build the rpms from the source code it's

00:08:00,009 --> 00:08:05,680
very capable of doing well we can use it

00:08:02,620 --> 00:08:08,979
to deploy our infrastructure we use it

00:08:05,680 --> 00:08:10,690
to deploy our hosts and obviously then

00:08:08,979 --> 00:08:13,389
we can make configuration changes to the

00:08:10,690 --> 00:08:16,659
hosts and management VMs and go through

00:08:13,389 --> 00:08:18,729
the patching of hosts as well and

00:08:16,659 --> 00:08:20,889
ultimately then you can start deploying

00:08:18,729 --> 00:08:24,570
and configuring virtual guest virtual

00:08:20,889 --> 00:08:24,570
machines themselves in the cloud stack

00:08:24,659 --> 00:08:28,990
environment so all of these things are

00:08:26,889 --> 00:08:32,440
actually things we've done with some of

00:08:28,990 --> 00:08:34,919
our clients all of those are how they do

00:08:32,440 --> 00:08:39,700
their patching how they do the

00:08:34,919 --> 00:08:41,950
environment builds using ansible they

00:08:39,700 --> 00:08:44,770
actually have taken that next step

00:08:41,950 --> 00:08:48,040
they use ansible to read their

00:08:44,770 --> 00:08:50,860
environment file and then from use that

00:08:48,040 --> 00:08:52,510
to build a cloud monkey script which

00:08:50,860 --> 00:08:55,000
will then install the hosts pods

00:08:52,510 --> 00:08:57,760
clusters so the ansible environment i'll

00:08:55,000 --> 00:08:59,800
holds all that information and ansible

00:08:57,760 --> 00:09:01,660
then builds a cloud monkey script which

00:08:59,800 --> 00:09:08,590
it then runs to then actually do that

00:09:01,660 --> 00:09:10,770
next step as well so on using ansible we

00:09:08,590 --> 00:09:14,620
have the idea of hosts inventories I

00:09:10,770 --> 00:09:19,750
like Jeff Munoz we've got roles we can

00:09:14,620 --> 00:09:22,210
also create tasks and we have some

00:09:19,750 --> 00:09:27,180
variables which will we'll tie to either

00:09:22,210 --> 00:09:30,580
hosts or groups say web servers or

00:09:27,180 --> 00:09:32,110
servers we have these modules as I say

00:09:30,580 --> 00:09:36,160
we've got a load of built-in ones but it

00:09:32,110 --> 00:09:38,710
is easy enough to write your own and

00:09:36,160 --> 00:09:41,710
then we use templates which use the

00:09:38,710 --> 00:09:43,480
ginger to templating model so it's not a

00:09:41,710 --> 00:09:45,910
kind of reinvented thing is already

00:09:43,480 --> 00:09:47,860
using a standard type of templating so

00:09:45,910 --> 00:09:50,710
you do the same stuff that you used

00:09:47,860 --> 00:09:54,130
ginger to to then use your templates and

00:09:50,710 --> 00:09:56,800
with in conjunction with variables you

00:09:54,130 --> 00:09:58,990
can loop through all your hosts to add

00:09:56,800 --> 00:10:02,190
sections into a config file for instance

00:09:58,990 --> 00:10:05,920
all that kind of stuff you can do with

00:10:02,190 --> 00:10:08,410
the ginger too and finally then we have

00:10:05,920 --> 00:10:10,930
the play books which bring those all

00:10:08,410 --> 00:10:13,330
together really they their takes you

00:10:10,930 --> 00:10:19,480
from American football terminology of

00:10:13,330 --> 00:10:21,760
having plays installing ansible keeps

00:10:19,480 --> 00:10:23,590
changing a little bit but generally it's

00:10:21,760 --> 00:10:26,920
pretty easy to just quickly install

00:10:23,590 --> 00:10:29,470
ansible it's no big deal what we can't

00:10:26,920 --> 00:10:34,290
attend to do that go on to the next

00:10:29,470 --> 00:10:36,430
slide to install ansible we actually

00:10:34,290 --> 00:10:39,160
turn this around a bit we had to do a

00:10:36,430 --> 00:10:43,360
git pull of our repo that's got all the

00:10:39,160 --> 00:10:44,470
Ansel information in it which also has

00:10:43,360 --> 00:10:45,880
just a scripting through installing

00:10:44,470 --> 00:10:48,160
ansible as well so then you just run

00:10:45,880 --> 00:10:50,410
that and the whole thing just comes

00:10:48,160 --> 00:10:52,660
together so you don't have anything and

00:10:50,410 --> 00:10:55,570
still start off with other than get

00:10:52,660 --> 00:10:58,120
really to then build an ad scible server

00:10:55,570 --> 00:11:00,700
and the way ansible works you can have

00:10:58,120 --> 00:11:04,720
multiple of these so you don't have one

00:11:00,700 --> 00:11:07,510
server as long as the your repository of

00:11:04,720 --> 00:11:10,930
playbooks is being that's why you get

00:11:07,510 --> 00:11:12,760
being kind of source managed you can

00:11:10,930 --> 00:11:15,130
then just create many of these services

00:11:12,760 --> 00:11:18,190
you want to feed whatever kind of seism

00:11:15,130 --> 00:11:21,100
infrastructure you're going for in terms

00:11:18,190 --> 00:11:22,750
of RPM some source I'm not going to go

00:11:21,100 --> 00:11:24,730
through that at the moment but David

00:11:22,750 --> 00:11:27,910
nalli is written a blog on how to do

00:11:24,730 --> 00:11:29,860
that he got excited about ansible and

00:11:27,910 --> 00:11:33,480
was looking for ways he could streamline

00:11:29,860 --> 00:11:36,160
building the RPM so he's done a blog on

00:11:33,480 --> 00:11:39,700
his learning curve was doing that and

00:11:36,160 --> 00:11:44,970
things he found out from doing it so

00:11:39,700 --> 00:11:44,970
using clouds danceable with cloud stack

00:11:46,290 --> 00:11:53,380
we've got we can create and deploy our

00:11:51,310 --> 00:11:55,930
ansible server environment start off

00:11:53,380 --> 00:11:57,600
with and then we can use ansible to

00:11:55,930 --> 00:12:00,250
create our guest VM as we could use

00:11:57,600 --> 00:12:03,850
cloud monkey with cloud stack and

00:12:00,250 --> 00:12:06,940
ansible modules to then create our

00:12:03,850 --> 00:12:08,290
instances that's people are working on

00:12:06,940 --> 00:12:11,290
that and trying to kind of make that a

00:12:08,290 --> 00:12:14,200
bit more slick and also we've got the

00:12:11,290 --> 00:12:17,130
ec2 module now given you can then fire

00:12:14,200 --> 00:12:20,110
up the payment to Amazon API

00:12:17,130 --> 00:12:22,560
compatibility young in cloud stack you

00:12:20,110 --> 00:12:25,510
can then just use the ec2

00:12:22,560 --> 00:12:27,490
module to make those commands to start a

00:12:25,510 --> 00:12:30,580
virtual machine so it's kind of already

00:12:27,490 --> 00:12:34,510
there what I have to do anything in

00:12:30,580 --> 00:12:36,670
terms of how we'd configure guest VMs we

00:12:34,510 --> 00:12:38,020
can use dynamic inventories to know what

00:12:36,670 --> 00:12:42,520
we've gotten out the next slide we'll

00:12:38,020 --> 00:12:44,980
talk about that a bit in the pay-for

00:12:42,520 --> 00:12:48,520
version of ansible I think his tower

00:12:44,980 --> 00:12:50,440
it has a module called callback where it

00:12:48,520 --> 00:12:52,270
will sit and polled and wait for the

00:12:50,440 --> 00:12:53,590
virtual machine basically there's

00:12:52,270 --> 00:12:55,420
various uses for it but in this case

00:12:53,590 --> 00:12:57,730
they will wait for the virtual machine

00:12:55,420 --> 00:12:59,890
which you've started to basically come

00:12:57,730 --> 00:13:03,310
alive before carrying on with the rest

00:12:59,890 --> 00:13:05,710
of the commands you need and we would

00:13:03,310 --> 00:13:09,070
then use roles which you'll see some of

00:13:05,710 --> 00:13:11,590
those in a minute but also

00:13:09,070 --> 00:13:13,810
we could inject our user data into the

00:13:11,590 --> 00:13:15,370
virtual machines to tell them what what

00:13:13,810 --> 00:13:18,850
kind of virtual machine they're going to

00:13:15,370 --> 00:13:23,500
be and then use ansible pull which would

00:13:18,850 --> 00:13:25,480
then pull in from a central repository

00:13:23,500 --> 00:13:28,270
or one of your central repository zuv

00:13:25,480 --> 00:13:29,890
playbooks what it needs to do to be that

00:13:28,270 --> 00:13:32,050
virtual machine so you can kind of

00:13:29,890 --> 00:13:34,960
reverse it round and use ansible pull

00:13:32,050 --> 00:13:36,670
from the client and get what it's going

00:13:34,960 --> 00:13:39,340
to do and they use that in conjunction

00:13:36,670 --> 00:13:42,430
with your user data to tell the Machine

00:13:39,340 --> 00:13:46,120
you've just started what what it's got

00:13:42,430 --> 00:13:48,460
to go look for and again if we're going

00:13:46,120 --> 00:13:51,100
to maintain guest virtual machines we'll

00:13:48,460 --> 00:13:53,260
probably use the dynamic inventories in

00:13:51,100 --> 00:13:57,150
conjunction with playbooks

00:13:53,260 --> 00:13:59,980
we'll get examples of those in a minute

00:13:57,150 --> 00:14:01,870
so a useful thing ansible has is this

00:13:59,980 --> 00:14:04,240
idea of a dynamic inventory where it can

00:14:01,870 --> 00:14:06,690
go and basically poll and find out what

00:14:04,240 --> 00:14:09,220
you've got what's the new environment

00:14:06,690 --> 00:14:12,490
there is now one for clouds that was

00:14:09,220 --> 00:14:17,440
written by sebastian and then you have a

00:14:12,490 --> 00:14:20,770
whole number of other ones which ansible

00:14:17,440 --> 00:14:22,500
can use to then find out what what's in

00:14:20,770 --> 00:14:26,860
your environment to orchestrate it them

00:14:22,500 --> 00:14:28,720
and then the version that pay for one is

00:14:26,860 --> 00:14:31,300
capable of maintaining a database of

00:14:28,720 --> 00:14:32,740
that if you need it to but our open

00:14:31,300 --> 00:14:39,340
source version that we generally play

00:14:32,740 --> 00:14:41,950
with doesn't and then kind of a reminder

00:14:39,340 --> 00:14:44,350
that something is going to be turning

00:14:41,950 --> 00:14:46,570
ansible what to do it's either a person

00:14:44,350 --> 00:14:47,950
or some kind of tooling ansible we're

00:14:46,570 --> 00:14:49,270
just going to start creating virtual

00:14:47,950 --> 00:14:50,770
machines because you thought you might

00:14:49,270 --> 00:14:53,350
need one you've got to remember this

00:14:50,770 --> 00:14:55,270
isn't a telepathic silver bullet it's

00:14:53,350 --> 00:14:57,390
just it's very good at what it does it's

00:14:55,270 --> 00:15:00,100
good for automation as well as

00:14:57,390 --> 00:15:01,720
configuration management but you have to

00:15:00,100 --> 00:15:03,790
remember that you're going to have to

00:15:01,720 --> 00:15:05,470
make some decisions somewhere or have

00:15:03,790 --> 00:15:08,130
tooling that's going to make decisions

00:15:05,470 --> 00:15:08,130
for you somewhere

00:15:09,530 --> 00:15:17,650
so to move on to actually deploying

00:15:13,730 --> 00:15:21,050
cloud stat1 management server now I've

00:15:17,650 --> 00:15:23,240
shortened some of it I'm going to added

00:15:21,050 --> 00:15:27,110
some of the extra creating an NFS server

00:15:23,240 --> 00:15:30,290
that kind of thing this was something I

00:15:27,110 --> 00:15:32,540
did as a more as a tutorial so we have

00:15:30,290 --> 00:15:34,190
the initial our normal cloud stack

00:15:32,540 --> 00:15:36,620
rollout which would be multiple

00:15:34,190 --> 00:15:38,240
management servers multiple my sequel

00:15:36,620 --> 00:15:43,270
servers want to be master one beat slave

00:15:38,240 --> 00:15:44,420
a pair of H a proxy low balances in

00:15:43,270 --> 00:15:47,000
failover

00:15:44,420 --> 00:15:49,190
so when I was asked to do something for

00:15:47,000 --> 00:15:50,690
a community I had to pair it all back to

00:15:49,190 --> 00:15:54,650
make it kind of more manageable so this

00:15:50,690 --> 00:15:55,910
is just doing some parts of it and it's

00:15:54,650 --> 00:15:59,000
actually in the cloud stack

00:15:55,910 --> 00:16:01,850
documentation cloud state documentation

00:15:59,000 --> 00:16:06,890
there's a section on unanswerable and

00:16:01,850 --> 00:16:10,010
that was what that was based on this so

00:16:06,890 --> 00:16:11,960
you're going to have some prereqs and

00:16:10,010 --> 00:16:13,970
and then I'm going to take you through

00:16:11,960 --> 00:16:16,040
creating the roles the templates the

00:16:13,970 --> 00:16:19,220
tasks and finally the playbook and then

00:16:16,040 --> 00:16:21,220
do the demo which as I recorded the IP

00:16:19,220 --> 00:16:23,840
still works this time

00:16:21,220 --> 00:16:26,210
so my prerequisites for this where the

00:16:23,840 --> 00:16:30,770
bass I started from to be able to do the

00:16:26,210 --> 00:16:32,930
demo was central 6.4 host two of them

00:16:30,770 --> 00:16:34,820
one that I was going to have as my

00:16:32,930 --> 00:16:38,020
ansible server and one of them that I

00:16:34,820 --> 00:16:42,650
was going to install cloud stack on I

00:16:38,020 --> 00:16:44,900
had already signed in my hosts the host

00:16:42,650 --> 00:16:47,600
tool I'm using already have IP addresses

00:16:44,900 --> 00:16:50,600
so I already knew what I was going to be

00:16:47,600 --> 00:16:52,700
creating and I sort DNS and that kind of

00:16:50,600 --> 00:16:54,320
thing and Internet connectivity was

00:16:52,700 --> 00:16:56,210
already there so I kind of started off

00:16:54,320 --> 00:16:58,190
with just a I wasn't trying to hold tie

00:16:56,210 --> 00:17:02,210
myself too much in once terms of water I

00:16:58,190 --> 00:17:04,220
was trying to build in terms of the

00:17:02,210 --> 00:17:05,450
cloud stack management server I was

00:17:04,220 --> 00:17:08,090
going to need to do some very similar

00:17:05,450 --> 00:17:11,230
steps as going to need to create my

00:17:08,090 --> 00:17:15,560
sequels role a cloud stack role a

00:17:11,230 --> 00:17:16,940
database deployment task a seeding

00:17:15,560 --> 00:17:18,680
secondary storage tasks which are

00:17:16,940 --> 00:17:20,780
skipped for the purposes of the video

00:17:18,680 --> 00:17:23,520
because it takes too long to sit and

00:17:20,780 --> 00:17:25,920
watch and it's really dull

00:17:23,520 --> 00:17:30,690
and then and then I create a playbook

00:17:25,920 --> 00:17:32,309
that pulls all of those together I think

00:17:30,690 --> 00:17:34,920
hopefully that's just about big enough

00:17:32,309 --> 00:17:36,929
I'd recommend if you want to look at

00:17:34,920 --> 00:17:40,140
these you've a look at the cloud stack

00:17:36,929 --> 00:17:42,990
documentation read the doc site has all

00:17:40,140 --> 00:17:44,610
of this on there or my slide deck will

00:17:42,990 --> 00:17:48,630
be available as well so you can look at

00:17:44,610 --> 00:17:51,240
them in depth but basically we're doing

00:17:48,630 --> 00:17:53,880
things like just saying ensuring my

00:17:51,240 --> 00:17:57,600
simple server is installed and I'm

00:17:53,880 --> 00:18:01,590
having yum do that so it's yum my server

00:17:57,600 --> 00:18:06,480
state is present the same with the my

00:18:01,590 --> 00:18:08,640
sequel Python because I like because

00:18:06,480 --> 00:18:10,020
ansible is using Python to control

00:18:08,640 --> 00:18:12,570
things I need the Python bindings in

00:18:10,020 --> 00:18:14,220
there to do things I need to be able to

00:18:12,570 --> 00:18:17,400
control selinux as well because that's

00:18:14,220 --> 00:18:19,800
in there there are multiple ways I did

00:18:17,400 --> 00:18:24,570
it did this in a particular way to

00:18:19,800 --> 00:18:26,940
demonstrate particular features what

00:18:24,570 --> 00:18:28,290
another way of adding these lines into

00:18:26,940 --> 00:18:30,929
the file would actually to be habbit

00:18:28,290 --> 00:18:33,990
have a template of the file and tell

00:18:30,929 --> 00:18:35,429
cloud stack put that template in that

00:18:33,990 --> 00:18:41,130
would overall give you probably more

00:18:35,429 --> 00:18:43,830
control but for the idea of showing how

00:18:41,130 --> 00:18:45,540
you can have an item and then loop

00:18:43,830 --> 00:18:48,390
through these items rather than having

00:18:45,540 --> 00:18:50,090
to write multiple lines out it was a

00:18:48,390 --> 00:18:53,580
sort of more of a demonstration of that

00:18:50,090 --> 00:18:55,980
so here we say with these items add the

00:18:53,580 --> 00:18:58,050
add them as a line into this file and

00:18:55,980 --> 00:19:02,190
then it loops through all of those and

00:18:58,050 --> 00:19:06,000
does it for you it also has a my sequel

00:19:02,190 --> 00:19:09,170
module already so I can just send

00:19:06,000 --> 00:19:15,600
commands about the my sequel user and

00:19:09,170 --> 00:19:19,230
configure that to set a password the

00:19:15,600 --> 00:19:22,050
clouds that management role I've got

00:19:19,230 --> 00:19:24,890
similarly I've got to get selinux python

00:19:22,050 --> 00:19:28,820
bindings in there so I can control it

00:19:24,890 --> 00:19:32,160
here you have the cloud stack repo and

00:19:28,820 --> 00:19:34,070
I'm using a ginger to template there

00:19:32,160 --> 00:19:37,820
though I'm going to then put

00:19:34,070 --> 00:19:40,490
and define where my repo is I've got say

00:19:37,820 --> 00:19:42,470
here yom has to then have the klaus that

00:19:40,490 --> 00:19:45,560
management state management service as

00:19:42,470 --> 00:19:47,900
prison and I've got to get URL so I'm

00:19:45,560 --> 00:19:49,850
going to say that that URL or that file

00:19:47,900 --> 00:19:55,250
from that URL has got to be prison in

00:19:49,850 --> 00:19:57,050
that location as well so in terms of

00:19:55,250 --> 00:20:01,670
like ginger to templating here you can

00:19:57,050 --> 00:20:03,710
see I've said the standard repo kind of

00:20:01,670 --> 00:20:05,540
file you'd see but I've got the base job

00:20:03,710 --> 00:20:08,060
for cloud stack is a variable which

00:20:05,540 --> 00:20:09,770
enables me then to have different

00:20:08,060 --> 00:20:11,360
environments where I use exactly the

00:20:09,770 --> 00:20:14,210
same playbook but I just changed that

00:20:11,360 --> 00:20:17,150
variable at a higher level and then I

00:20:14,210 --> 00:20:20,360
deploy and I can switch between creating

00:20:17,150 --> 00:20:22,180
different types of cloud stack server or

00:20:20,360 --> 00:20:24,950
as we go along doing deployments

00:20:22,180 --> 00:20:27,530
obviously as cloud stack service lesser

00:20:24,950 --> 00:20:32,780
now cloud stack version increases then

00:20:27,530 --> 00:20:36,800
we just changed that the database

00:20:32,780 --> 00:20:40,040
deployment task example of using a

00:20:36,800 --> 00:20:42,830
command module which is just selling

00:20:40,040 --> 00:20:47,090
sending a usual kind of bash command

00:20:42,830 --> 00:20:50,930
shell command to the whatever the host

00:20:47,090 --> 00:20:52,730
is that we're running on there's an

00:20:50,930 --> 00:20:57,680
alternative which is the shell command

00:20:52,730 --> 00:20:58,970
and that will use environment properties

00:20:57,680 --> 00:21:01,270
that you've got so if you've set an

00:20:58,970 --> 00:21:04,130
environment variable if you use command

00:21:01,270 --> 00:21:06,140
and support we'll ignore that if you use

00:21:04,130 --> 00:21:09,260
shell the answer will take into account

00:21:06,140 --> 00:21:14,480
any environment variables that exist on

00:21:09,260 --> 00:21:16,040
the host seedings secondary storage as

00:21:14,480 --> 00:21:19,610
he takes a long time particularly for

00:21:16,040 --> 00:21:22,400
doing all of the different hypervisor

00:21:19,610 --> 00:21:25,100
types we check that make sure it's

00:21:22,400 --> 00:21:26,810
mounted and then run through those for

00:21:25,100 --> 00:21:28,370
sale to kind of skip that step in terms

00:21:26,810 --> 00:21:35,390
of the actual running of the demo

00:21:28,370 --> 00:21:40,580
because it's very dull and long and so

00:21:35,390 --> 00:21:44,210
finally we have the playbook so in terms

00:21:40,580 --> 00:21:46,740
of this example I did I brought all the

00:21:44,210 --> 00:21:49,800
variables into the playbook

00:21:46,740 --> 00:21:54,120
but you have host VARs and group VARs as

00:21:49,800 --> 00:21:55,920
separate files which you can then if you

00:21:54,120 --> 00:21:57,960
like our inventory's in ya Mille which

00:21:55,920 --> 00:22:03,120
you can then call as part of your

00:21:57,960 --> 00:22:04,800
PlayBook running to make this simpler

00:22:03,120 --> 00:22:07,620
I've included these in here but you

00:22:04,800 --> 00:22:09,660
could take them out and have tell Klaus

00:22:07,620 --> 00:22:10,920
that you're doing one environment and it

00:22:09,660 --> 00:22:13,020
will look in the environment file for

00:22:10,920 --> 00:22:15,420
that and get these will just say

00:22:13,020 --> 00:22:18,300
playbook - I and a different inventory

00:22:15,420 --> 00:22:20,250
and it will do things differently Oh two

00:22:18,300 --> 00:22:21,300
different hosts or two different

00:22:20,250 --> 00:22:24,210
variables depending on how you've

00:22:21,300 --> 00:22:26,730
configured it so I've set up these

00:22:24,210 --> 00:22:28,230
variables if you like to start off we

00:22:26,730 --> 00:22:31,170
think you mean the one we highlighted

00:22:28,230 --> 00:22:32,880
the base URL we've told it the roles

00:22:31,170 --> 00:22:35,280
that I want to have on this particular

00:22:32,880 --> 00:22:37,350
host they're going to be my sequel in

00:22:35,280 --> 00:22:40,320
the cloud set manager and then there's

00:22:37,350 --> 00:22:43,140
some tasks where I want it to include

00:22:40,320 --> 00:22:46,429
the setting up the DB tasks and the

00:22:43,140 --> 00:22:46,429
ceilings secondary storage tasks

00:22:48,170 --> 00:22:55,200
how we doing for time

00:22:51,080 --> 00:22:59,360
so now for the demonstration which is

00:22:55,200 --> 00:22:59,360
that's pretty bit small so I do have

00:23:08,549 --> 00:23:11,509
which way is it

00:23:12,760 --> 00:23:15,510
that way

00:23:25,450 --> 00:23:29,820
there isn't Lee just checking that are

00:23:27,310 --> 00:23:34,890
on this host that I'm going to work with

00:23:29,820 --> 00:23:34,890
the cloud stack isn't already there

00:23:35,130 --> 00:23:39,520
refresh on that to make sure now I'm

00:23:37,570 --> 00:23:43,330
going to cloud stack in UTC class back

00:23:39,520 --> 00:23:45,340
in isn't installed I'm not cheating go

00:23:43,330 --> 00:23:49,120
to the cloud stack directory where I've

00:23:45,340 --> 00:23:51,450
got all my play books basically there

00:23:49,120 --> 00:23:51,450
until it

00:23:51,960 --> 00:23:58,919
I'm gonna run that so the - V just means

00:23:56,309 --> 00:24:02,759
for both the - K means I want to give

00:23:58,919 --> 00:24:07,200
you the SSH password if you drop the - K

00:24:02,759 --> 00:24:10,830
it will assume you're using pairs T

00:24:07,200 --> 00:24:12,629
pairs and and just try and do that and

00:24:10,830 --> 00:24:15,840
then generally fail unless you've

00:24:12,629 --> 00:24:17,519
already configured that so it's going to

00:24:15,840 --> 00:24:20,100
the other host giving facts from it

00:24:17,519 --> 00:24:21,929
which are things like this might be

00:24:20,100 --> 00:24:23,970
addressing all sorts you see we're now

00:24:21,929 --> 00:24:28,619
installing installed the clouds my

00:24:23,970 --> 00:24:33,330
sequel the Python bindings it's changed

00:24:28,619 --> 00:24:37,970
that file to add the lines in I've got

00:24:33,330 --> 00:24:37,970
off the bottom I will jump there you go

00:24:38,240 --> 00:24:42,360
so this is in verbose so you're getting

00:24:40,649 --> 00:24:43,889
a little bit more information than you

00:24:42,360 --> 00:24:49,619
may have if you just run it separately

00:24:43,889 --> 00:24:52,080
we've created a repo file and now its

00:24:49,619 --> 00:24:55,669
installed in cloud stack packages watch

00:24:52,080 --> 00:24:55,669
and I put these local to make it quicker

00:24:58,879 --> 00:25:04,580
quicker

00:25:00,619 --> 00:25:09,110
yeah and now it's copying the VHD util

00:25:04,580 --> 00:25:09,110
running the cloud stack set up databases

00:25:12,200 --> 00:25:17,600
that was done so I go to my Firefox

00:25:21,580 --> 00:25:30,640
I'd already tried to connect to make

00:25:23,350 --> 00:25:33,060
sure there was nothing there we are

00:25:30,640 --> 00:25:33,060
logging in

00:25:42,980 --> 00:25:47,950
I think there is me forgetting password

00:25:52,010 --> 00:26:03,530
I knew stopped no sorry

00:25:57,410 --> 00:26:09,470
how are we doing for time that say how

00:26:03,530 --> 00:26:13,160
cool Dan so I talked about Zen sir

00:26:09,470 --> 00:26:14,990
being able to do patching of hosts send

00:26:13,160 --> 00:26:16,460
servers potentially a little bit more

00:26:14,990 --> 00:26:19,610
fraught than a lot of other things using

00:26:16,460 --> 00:26:21,020
configuration management tools but we

00:26:19,610 --> 00:26:25,190
worked around it and we worked around it

00:26:21,020 --> 00:26:28,880
using ansible facts really like ansible

00:26:25,190 --> 00:26:31,700
facts basically you write a spool file

00:26:28,880 --> 00:26:34,429
in any language you like pretty much

00:26:31,700 --> 00:26:37,040
that can work run on the client so

00:26:34,429 --> 00:26:39,230
whatever the host machine is whatever

00:26:37,040 --> 00:26:40,940
the client is if you've got the language

00:26:39,230 --> 00:26:43,010
and still running on there then you can

00:26:40,940 --> 00:26:45,650
write your module in that language

00:26:43,010 --> 00:26:50,110
as long as the output comes back in

00:26:45,650 --> 00:26:54,290
valid JSON so enable us to write write

00:26:50,110 --> 00:26:57,410
this fact which was a pretty nasty bit

00:26:54,290 --> 00:26:59,450
of bash scripting I did

00:26:57,410 --> 00:27:05,000
but basically what it's going to do is

00:26:59,450 --> 00:27:08,510
return to me as in server version then

00:27:05,000 --> 00:27:10,370
serve Apaches installed was sorry the

00:27:08,510 --> 00:27:11,990
sins of Apaches uploaded and then

00:27:10,370 --> 00:27:13,429
whether they're installed or not so a

00:27:11,990 --> 00:27:21,919
run-through and give me a whole load of

00:27:13,429 --> 00:27:24,679
facts back about what's there believin

00:27:21,919 --> 00:27:26,630
all that that is that it does running

00:27:24,679 --> 00:27:30,470
production I'm pretty large cloud of one

00:27:26,630 --> 00:27:32,480
of our clients what so then this is the

00:27:30,470 --> 00:27:33,919
kind of Jason that you'd get back from

00:27:32,480 --> 00:27:35,870
that where it's telling you the version

00:27:33,919 --> 00:27:40,190
of Zen server so i comply the right

00:27:35,870 --> 00:27:41,960
patches and what patches are uploaded or

00:27:40,190 --> 00:27:42,440
installed that's coming back from

00:27:41,960 --> 00:27:44,809
ansible

00:27:42,440 --> 00:27:46,309
so then i can start sending my

00:27:44,809 --> 00:27:50,140
configuration management off to go and

00:27:46,309 --> 00:27:50,140
do things based on that information

00:27:52,070 --> 00:27:56,720
it creates some these so I said about

00:27:55,400 --> 00:27:58,010
you can separate out though your

00:27:56,720 --> 00:27:59,390
variable so you don't have to put them

00:27:58,010 --> 00:28:03,290
all in the playbook you could set them

00:27:59,390 --> 00:28:04,730
out as kind of global so here you can

00:28:03,290 --> 00:28:07,930
see normally

00:28:04,730 --> 00:28:10,310
base URL separately outside of that file

00:28:07,930 --> 00:28:12,620
also if we've got a package server

00:28:10,310 --> 00:28:15,200
someone we're picking stuff up from you

00:28:12,620 --> 00:28:17,840
can name that there and here where we've

00:28:15,200 --> 00:28:18,980
got secondary storage servers they're in

00:28:17,840 --> 00:28:20,870
there as well to give you an idea what

00:28:18,980 --> 00:28:24,260
it looks like in the animal and here

00:28:20,870 --> 00:28:26,990
what I've got is my hot fixes so I'm

00:28:24,260 --> 00:28:28,370
pasting again so I can get the name or

00:28:26,990 --> 00:28:29,840
the version of XenServer and then the

00:28:28,370 --> 00:28:31,850
hot fixes that were available the time

00:28:29,840 --> 00:28:37,600
so you can tell from those hot fixes it

00:28:31,850 --> 00:28:41,270
dates it to kind of summer last year now

00:28:37,600 --> 00:28:44,690
in our hosts file we can we can start

00:28:41,270 --> 00:28:46,010
off with just fqd ends if we like but it

00:28:44,690 --> 00:28:51,290
will also add in an awful lot more

00:28:46,010 --> 00:28:53,660
information so when we're building whole

00:28:51,290 --> 00:28:57,070
environments we create a pixie server

00:28:53,660 --> 00:29:00,230
and then we want to create all of the

00:28:57,070 --> 00:29:02,840
pixie configuration files so we pick up

00:29:00,230 --> 00:29:05,420
things like the MAC addresses we loop

00:29:02,840 --> 00:29:10,580
through all of the hosts to create all

00:29:05,420 --> 00:29:12,530
the individual pixie config files that

00:29:10,580 --> 00:29:13,940
we need so ansible does all that just by

00:29:12,530 --> 00:29:15,260
reading that having a template of what

00:29:13,940 --> 00:29:17,360
they're going to look like and then

00:29:15,260 --> 00:29:24,140
feeding in all the information that

00:29:17,360 --> 00:29:27,950
they're going to need afterwards so

00:29:24,140 --> 00:29:30,770
again so doing an update on as in server

00:29:27,950 --> 00:29:32,920
using ansible and that hope answer that

00:29:30,770 --> 00:29:35,450
those ansible facts about the XenServer

00:29:32,920 --> 00:29:37,280
my first action is to get what those

00:29:35,450 --> 00:29:38,780
facts are to get it to go and have a

00:29:37,280 --> 00:29:44,180
look on each host as it runs through

00:29:38,780 --> 00:29:45,770
them and we cover those facts then by

00:29:44,180 --> 00:29:47,390
saying with the hot fixes so i've got

00:29:45,770 --> 00:29:49,970
that list of hot fixes the relate to

00:29:47,390 --> 00:29:52,280
that version i'm going to go check i'm

00:29:49,970 --> 00:29:53,240
going to copy over those files and if

00:29:52,280 --> 00:29:53,890
they're there already it's not going to

00:29:53,240 --> 00:29:56,030
do it again

00:29:53,890 --> 00:29:57,440
that's the idea of configuration

00:29:56,030 --> 00:30:00,170
management if they're not that it's

00:29:57,440 --> 00:30:02,930
going to copy them as they required so

00:30:00,170 --> 00:30:04,580
it's comparing that list of hot fixes I

00:30:02,930 --> 00:30:06,530
said we're either installed or uploaded

00:30:04,580 --> 00:30:08,090
or installed against the list I had in

00:30:06,530 --> 00:30:12,410
my variable file of the ones I actually

00:30:08,090 --> 00:30:15,200
want on there and if there are the

00:30:12,410 --> 00:30:16,620
source package thar zip file that needs

00:30:15,200 --> 00:30:19,400
to go with it it's going to

00:30:16,620 --> 00:30:24,960
take those and copy them over as well

00:30:19,400 --> 00:30:26,910
and then we do the the uploading and

00:30:24,960 --> 00:30:28,559
then because they're kind of the way it

00:30:26,910 --> 00:30:30,200
works with pools we actually tell it to

00:30:28,559 --> 00:30:33,440
go and get the facts again to make sure

00:30:30,200 --> 00:30:35,880
because you can upload your patch to the

00:30:33,440 --> 00:30:37,050
pool master and they becomes available

00:30:35,880 --> 00:30:40,110
to the others as well so you don't have

00:30:37,050 --> 00:30:42,000
to keep uploading it necessarily

00:30:40,110 --> 00:30:45,260
depending on how you're doing update and

00:30:42,000 --> 00:30:47,790
then finally we start applying these and

00:30:45,260 --> 00:30:49,980
actually applying those patches to those

00:30:47,790 --> 00:30:50,750
hosts where we've said they need to be

00:30:49,980 --> 00:30:55,080
done

00:30:50,750 --> 00:30:56,610
so we actually run now our client runs

00:30:55,080 --> 00:31:01,679
they in production to patch those in

00:30:56,610 --> 00:31:08,570
servers so do I have any questions on

00:31:01,679 --> 00:31:08,570
all alone yeah yeah

00:31:12,700 --> 00:31:18,470
to use a in scible not 88 uses Python

00:31:16,910 --> 00:31:19,910
but you don't need to know anything

00:31:18,470 --> 00:31:21,549
about packets event you need to know

00:31:19,910 --> 00:31:23,840
Python if you need to develop some

00:31:21,549 --> 00:31:25,910
recipe if you're going to develop your

00:31:23,840 --> 00:31:28,400
own module then you probably would but

00:31:25,910 --> 00:31:32,809
there's a pretty big list and growing

00:31:28,400 --> 00:31:34,070
already your Galaxy site yeah so when

00:31:32,809 --> 00:31:36,320
you start doing that kind of stuff it

00:31:34,070 --> 00:31:38,299
gets more complicated but otherwise no

00:31:36,320 --> 00:31:39,890
unless you actually need to develop your

00:31:38,299 --> 00:31:42,530
own module for something that hasn't

00:31:39,890 --> 00:31:44,030
been covered already you don't need to

00:31:42,530 --> 00:31:47,780
know anything about Python until you

00:31:44,030 --> 00:31:49,850
really just need to know yeah mom I just

00:31:47,780 --> 00:31:52,429
at least understand it and can and the

00:31:49,850 --> 00:31:54,919
ginger to kind of templating and the

00:31:52,429 --> 00:32:02,480
rest of it is understanding what it is

00:31:54,919 --> 00:32:03,730
you you want okay see the slides slides

00:32:02,480 --> 00:32:06,320
will be up

00:32:03,730 --> 00:32:09,320
I'm cloudy Angus if anyone wants to

00:32:06,320 --> 00:32:10,540
follow anything else still one still

00:32:09,320 --> 00:32:15,700
wants to follow anything I have to say

00:32:10,540 --> 00:32:15,700

YouTube URL: https://www.youtube.com/watch?v=k8DqhM1uZaw


