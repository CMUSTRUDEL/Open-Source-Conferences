Title: Integration of Citrix XenDesktop and XenApp with CloudStack - Paul Howard
Publication date: 2014-05-02
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:07,319
so thanks and thanks also for having me

00:00:03,659 --> 00:00:10,139
to come to talk to you today about the

00:00:07,319 --> 00:00:12,269
topic which is the integration of Citrix

00:00:10,139 --> 00:00:16,619
XenDesktop ins in app with with cloud

00:00:12,269 --> 00:00:20,010
snack my name's Paul Howard I'm an

00:00:16,619 --> 00:00:23,699
engineer with Citrix Systems I'm a Brit

00:00:20,010 --> 00:00:27,750
as you can tell I work in the Camden

00:00:23,699 --> 00:00:30,179
office in Cambridge here in the UK I've

00:00:27,750 --> 00:00:34,079
worked for Citrix for very nearly four

00:00:30,179 --> 00:00:36,660
years and I've spent the letter between

00:00:34,079 --> 00:00:39,540
one and a half and two years as the tech

00:00:36,660 --> 00:00:41,489
lead for this project to integrate

00:00:39,540 --> 00:00:46,320
XenDesktop and Zen app with cloud

00:00:41,489 --> 00:00:49,820
technologies those being cloud stack or

00:00:46,320 --> 00:00:57,449
cloud platform it's Citrix variant and

00:00:49,820 --> 00:01:00,750
also Amazon Web Services so here's wing

00:00:57,449 --> 00:01:03,600
on the cover we'll talk a little bit

00:01:00,750 --> 00:01:06,930
about the product itself XenDesktop and

00:01:03,600 --> 00:01:08,490
Zen app just to set the scene as I said

00:01:06,930 --> 00:01:09,780
I'm an engineer so it's going to be an

00:01:08,490 --> 00:01:12,000
engineer's introduction a very

00:01:09,780 --> 00:01:17,360
high-level technical overview I'm not a

00:01:12,000 --> 00:01:19,560
salesperson I'm not wearing a suit and

00:01:17,360 --> 00:01:22,740
then we'll go on to talk about what

00:01:19,560 --> 00:01:25,409
actually what motivates all this for a

00:01:22,740 --> 00:01:27,150
product that has more traditionally been

00:01:25,409 --> 00:01:29,490
associated with bare metal hypervisors

00:01:27,150 --> 00:01:31,020
why would customers of this product want

00:01:29,490 --> 00:01:33,750
to move to a cloud stack based

00:01:31,020 --> 00:01:36,390
deployment and therefore what motivates

00:01:33,750 --> 00:01:40,500
us to have undertaken this project in

00:01:36,390 --> 00:01:43,409
the first place and then I'll talk a

00:01:40,500 --> 00:01:46,829
little bit the bulk of the talk will be

00:01:43,409 --> 00:01:49,920
about the experience of doing that

00:01:46,829 --> 00:01:52,560
development work against cloud stack and

00:01:49,920 --> 00:01:53,850
I'll start with the things that stand

00:01:52,560 --> 00:01:56,070
out in my memory as having gone

00:01:53,850 --> 00:01:58,079
particularly well what I consider to be

00:01:56,070 --> 00:02:01,649
the highlights the things that I'm very

00:01:58,079 --> 00:02:04,049
pleased with and then we'll go on to

00:02:01,649 --> 00:02:05,969
talk about perhaps what what didn't go

00:02:04,049 --> 00:02:08,910
so well where where were some of the

00:02:05,969 --> 00:02:10,229
barriers the risks the challenges and

00:02:08,910 --> 00:02:12,020
some of the learning points that we

00:02:10,229 --> 00:02:15,710
faced

00:02:12,020 --> 00:02:17,150
so that's what I'm going to cover if I

00:02:15,710 --> 00:02:20,170
don't have time at the end for questions

00:02:17,150 --> 00:02:23,330
and I can't guarantee that I will have

00:02:20,170 --> 00:02:25,730
I'm here as they say all week which is

00:02:23,330 --> 00:02:28,220
to say for the rest of today so if you

00:02:25,730 --> 00:02:30,590
do have any questions that are that are

00:02:28,220 --> 00:02:33,050
burning in your mind I'm around come and

00:02:30,590 --> 00:02:39,680
finally tapped me on the shoulder if you

00:02:33,050 --> 00:02:41,000
can't reach it okay so a quick dive in

00:02:39,680 --> 00:02:45,650
then an engineer's introduction to

00:02:41,000 --> 00:02:49,520
XenDesktop ins an app what is what are

00:02:45,650 --> 00:02:51,440
XenDesktop ands an app well the tagline

00:02:49,520 --> 00:02:54,200
is it's work and play from anywhere

00:02:51,440 --> 00:02:57,640
right basically what you have is you

00:02:54,200 --> 00:03:00,200
have users any location any device

00:02:57,640 --> 00:03:03,050
wanting to connect to either a full

00:03:00,200 --> 00:03:05,930
Windows desktop or an enterprise Windows

00:03:03,050 --> 00:03:08,390
application mix seamlessly with whatever

00:03:05,930 --> 00:03:09,920
system they're using that's the basic

00:03:08,390 --> 00:03:14,180
value proposition this is what they nest

00:03:09,920 --> 00:03:14,990
XenDesktop ins an app do well how do

00:03:14,180 --> 00:03:15,830
they do that

00:03:14,990 --> 00:03:19,040
well this layer of management

00:03:15,830 --> 00:03:20,630
infrastructure at the heart of which is

00:03:19,040 --> 00:03:24,920
a server component known as the delivery

00:03:20,630 --> 00:03:27,860
controller the delivery controller runs

00:03:24,920 --> 00:03:31,090
a suite of interacting services it's a

00:03:27,860 --> 00:03:34,250
service-oriented architecture they

00:03:31,090 --> 00:03:37,400
perform a variety of tasks of varying

00:03:34,250 --> 00:03:40,130
importance these are the services that

00:03:37,400 --> 00:03:41,930
will actually provision the virtual

00:03:40,130 --> 00:03:45,110
machines that will ultimately host the

00:03:41,930 --> 00:03:48,260
users workloads they also manage what we

00:03:45,110 --> 00:03:50,120
call brokering so brokering is well as

00:03:48,260 --> 00:03:51,850
the name suggests we have our users on

00:03:50,120 --> 00:03:54,880
their end points down here brokering is

00:03:51,850 --> 00:03:57,740
the name of the process that actually

00:03:54,880 --> 00:03:59,390
gives the user the incoming user a

00:03:57,740 --> 00:04:02,900
connection to either the desktop or

00:03:59,390 --> 00:04:04,520
application that they want to use the

00:04:02,900 --> 00:04:06,290
delivery controller might not stand by

00:04:04,520 --> 00:04:08,330
itself obviously it has quite a lot of

00:04:06,290 --> 00:04:10,550
work to do in a production environment

00:04:08,330 --> 00:04:13,910
there's likely to be more than one of

00:04:10,550 --> 00:04:17,660
them for load balancing and for Fang

00:04:13,910 --> 00:04:19,340
louver and the like for scalability but

00:04:17,660 --> 00:04:20,989
even in a situation where you have more

00:04:19,340 --> 00:04:23,390
than one delivery controller

00:04:20,989 --> 00:04:24,170
they are conceptually taking part in

00:04:23,390 --> 00:04:27,710
what

00:04:24,170 --> 00:04:30,320
is the same single deployment and that

00:04:27,710 --> 00:04:32,750
deployment is known as a site and all of

00:04:30,320 --> 00:04:36,230
the persistence state associated with

00:04:32,750 --> 00:04:41,420
the XenDesktop site is stored in a

00:04:36,230 --> 00:04:43,490
single sequel database and all of the

00:04:41,420 --> 00:04:45,590
controllers share that database so no

00:04:43,490 --> 00:04:47,150
matter how many controllers you have the

00:04:45,590 --> 00:04:49,100
basic characteristics of your site and

00:04:47,150 --> 00:04:51,110
the basic data that makes up your sites

00:04:49,100 --> 00:04:54,530
is all in the database and there is only

00:04:51,110 --> 00:04:58,190
one of those modulo mirroring clustering

00:04:54,530 --> 00:05:01,640
with the rest of it there are some user

00:04:58,190 --> 00:05:03,230
interface components I've included one

00:05:01,640 --> 00:05:05,020
of them here there are actually two key

00:05:03,230 --> 00:05:07,850
ones I've included one in the diagram

00:05:05,020 --> 00:05:11,030
there is a Microsoft management console

00:05:07,850 --> 00:05:13,130
snap it in called studio studio is the

00:05:11,030 --> 00:05:16,430
management console that administrators

00:05:13,130 --> 00:05:18,410
will use to do the heavy lifting of the

00:05:16,430 --> 00:05:20,660
site the basic setup of the site the

00:05:18,410 --> 00:05:23,420
initial integration the provisioning of

00:05:20,660 --> 00:05:25,960
machines setting up the definitions of

00:05:23,420 --> 00:05:29,000
which users can access which resources

00:05:25,960 --> 00:05:31,130
that will all happen through Studio what

00:05:29,000 --> 00:05:33,650
you don't do through studio is you don't

00:05:31,130 --> 00:05:35,240
tend to do the day-to-day health

00:05:33,650 --> 00:05:36,980
checking and monitoring and performance

00:05:35,240 --> 00:05:38,900
checking that's not done through Studio

00:05:36,980 --> 00:05:41,120
that's done through a web-based console

00:05:38,900 --> 00:05:42,560
that's called desktop director which

00:05:41,120 --> 00:05:47,330
haven't included on the diagram but it

00:05:42,560 --> 00:05:49,480
is their desktop director guys will kill

00:05:47,330 --> 00:05:49,480
me

00:05:52,350 --> 00:05:56,260
so then of course you have something

00:05:54,340 --> 00:05:57,310
underwriting the power of your whole

00:05:56,260 --> 00:06:00,130
system which is your hosting

00:05:57,310 --> 00:06:02,980
infrastructure traditionally this is

00:06:00,130 --> 00:06:05,200
your hypervisors your storage and your

00:06:02,980 --> 00:06:07,810
network substrate hosting a series of

00:06:05,200 --> 00:06:10,030
virtual machines and these are the

00:06:07,810 --> 00:06:14,260
virtual machines that actually run the

00:06:10,030 --> 00:06:16,530
users workloads for VDI desktops these

00:06:14,260 --> 00:06:19,720
are single user Windows desktop machines

00:06:16,530 --> 00:06:20,950
for it for something like Zen app where

00:06:19,720 --> 00:06:22,330
you're delivering applications to

00:06:20,950 --> 00:06:24,370
multiple users then they're more likely

00:06:22,330 --> 00:06:28,390
to be server machines multi-session

00:06:24,370 --> 00:06:30,220
capable machines with RDS that can run

00:06:28,390 --> 00:06:31,690
multiple applications simultaneously and

00:06:30,220 --> 00:06:38,830
have multiple login sessions

00:06:31,690 --> 00:06:42,310
simultaneously so connecting that all

00:06:38,830 --> 00:06:45,910
together there is a front-end component

00:06:42,310 --> 00:06:47,650
known as storefront this is the gateway

00:06:45,910 --> 00:06:49,090
that users have initially connect to

00:06:47,650 --> 00:06:51,730
this is something that could for example

00:06:49,090 --> 00:06:53,200
run well it can run as a native desktop

00:06:51,730 --> 00:06:54,880
application or it can run inside your

00:06:53,200 --> 00:06:57,550
web browser it's the thing that shows

00:06:54,880 --> 00:06:58,870
you all of the desktop resources and all

00:06:57,550 --> 00:07:02,740
of the application resources that the

00:06:58,870 --> 00:07:04,450
system is making available to you

00:07:02,740 --> 00:07:08,650
give given the credentials you have

00:07:04,450 --> 00:07:09,910
logged in hours and that is the point at

00:07:08,650 --> 00:07:11,410
which you select what you want to use

00:07:09,910 --> 00:07:14,200
you click on what you want to use and

00:07:11,410 --> 00:07:17,380
the broker will then connect you to that

00:07:14,200 --> 00:07:19,590
session and you'll be you'll be up and

00:07:17,380 --> 00:07:19,590
away

00:07:21,120 --> 00:07:28,800
so when we talk about something like

00:07:24,070 --> 00:07:32,560
this and integrating it with cloud stack

00:07:28,800 --> 00:07:35,770
obviously the primary thing we're

00:07:32,560 --> 00:07:38,050
talking about there is is using cloud as

00:07:35,770 --> 00:07:39,040
the hosting infrastructure so where all

00:07:38,050 --> 00:07:41,050
those virtual machines are running

00:07:39,040 --> 00:07:45,880
they're at the top where we're aiming

00:07:41,050 --> 00:07:49,090
that into a cloud stack environment but

00:07:45,880 --> 00:07:52,030
having said that there is every every

00:07:49,090 --> 00:07:53,770
likelihood I think that if you're going

00:07:52,030 --> 00:07:55,450
for a cloud hosted deployment you might

00:07:53,770 --> 00:07:56,740
run some of your some or all of your

00:07:55,450 --> 00:07:58,780
management infrastructure in that cloud

00:07:56,740 --> 00:08:00,130
hosted deployment as well so so don't

00:07:58,780 --> 00:08:02,110
preclude the possibility of things like

00:08:00,130 --> 00:08:04,930
delivery controllers database servers

00:08:02,110 --> 00:08:05,830
going into the cloud alongside all of

00:08:04,930 --> 00:08:06,910
those

00:08:05,830 --> 00:08:12,040
virtual machines that are running the

00:08:06,910 --> 00:08:15,550
users workloads okay I keep saying sends

00:08:12,040 --> 00:08:16,810
SL fans an app in the same breath what

00:08:15,550 --> 00:08:18,510
actually is the difference between them

00:08:16,810 --> 00:08:24,670
well for the purpose of this discussion

00:08:18,510 --> 00:08:27,970
there really isn't one a Zen app is an

00:08:24,670 --> 00:08:30,840
older product than Zen desktop and it

00:08:27,970 --> 00:08:32,590
previously had a different architecture

00:08:30,840 --> 00:08:34,690
XenDesktop introduced a newer

00:08:32,590 --> 00:08:36,670
architecture FMA stands for flex cast

00:08:34,690 --> 00:08:39,430
management architecture flex car simply

00:08:36,670 --> 00:08:41,680
being the overarching term that talks

00:08:39,430 --> 00:08:43,780
about that basic capability of getting

00:08:41,680 --> 00:08:49,990
applications and desktops to users on

00:08:43,780 --> 00:08:52,600
any device both of these products since

00:08:49,990 --> 00:08:54,730
the release of XenDesktop 7 both of

00:08:52,600 --> 00:08:57,760
these products actually now use the same

00:08:54,730 --> 00:08:59,800
architecture the difference between them

00:08:57,760 --> 00:09:01,630
now it is is not so much in the

00:08:59,800 --> 00:09:03,790
technology it's very much in the use

00:09:01,630 --> 00:09:05,830
case you would use in desktop for VDI

00:09:03,790 --> 00:09:08,320
you'd use an app for applications

00:09:05,830 --> 00:09:09,550
obviously the difference is whether

00:09:08,320 --> 00:09:15,120
you're doing single session or multi

00:09:09,550 --> 00:09:18,010
session VMs but those two use cases are

00:09:15,120 --> 00:09:19,570
sufficiently fundamentally distinct in

00:09:18,010 --> 00:09:21,010
the minds of customers that we do find

00:09:19,570 --> 00:09:23,050
it helpful to have the separate branding

00:09:21,010 --> 00:09:24,910
around those two use cases but the

00:09:23,050 --> 00:09:27,250
diagram I showed you on the previous

00:09:24,910 --> 00:09:29,380
slide for the purpose of the rest of

00:09:27,250 --> 00:09:30,640
this discussion that's the product we're

00:09:29,380 --> 00:09:32,110
talking about whether you call it send

00:09:30,640 --> 00:09:37,900
desktop walls an app that's the

00:09:32,110 --> 00:09:40,320
technology and from now on I use the two

00:09:37,900 --> 00:09:40,320
terms interchangeably

00:09:45,110 --> 00:09:52,640
so why would you move to CloudStack with

00:09:48,410 --> 00:09:55,610
a product that is is more like a legacy

00:09:52,640 --> 00:09:57,110
product a product that is more

00:09:55,610 --> 00:10:03,500
traditionally associated with bare-metal

00:09:57,110 --> 00:10:04,519
hypervisors or free start of course we

00:10:03,500 --> 00:10:08,750
have a system that's built on open

00:10:04,519 --> 00:10:10,490
standards and this allows customers the

00:10:08,750 --> 00:10:12,800
gives them the ability to build the

00:10:10,490 --> 00:10:14,839
cloud while retaining a great deal of

00:10:12,800 --> 00:10:17,410
power and a great deal of choice over

00:10:14,839 --> 00:10:19,820
all technologies they use to build it

00:10:17,410 --> 00:10:21,440
now XenDesktop has traditionally been

00:10:19,820 --> 00:10:24,019
associated with multi vendor hosting

00:10:21,440 --> 00:10:27,079
solutions already working with more than

00:10:24,019 --> 00:10:28,310
one type of hypervisor and so it's it's

00:10:27,079 --> 00:10:30,620
very natural for us to adopt something

00:10:28,310 --> 00:10:33,350
like cloud stack which which leaves that

00:10:30,620 --> 00:10:35,120
decision in the customers domain they

00:10:33,350 --> 00:10:42,740
can choose the hypervisor they can

00:10:35,120 --> 00:10:43,910
choose their storage and network and the

00:10:42,740 --> 00:10:45,740
storage of course being tiered into

00:10:43,910 --> 00:10:46,970
local shared and secondary layers so so

00:10:45,740 --> 00:10:49,399
people have the choice as to whether

00:10:46,970 --> 00:10:51,980
they're going to use say NFS or icy

00:10:49,399 --> 00:10:55,279
block storage whether they're going to

00:10:51,980 --> 00:10:56,390
adopt cluster or zone primary storage or

00:10:55,279 --> 00:10:59,450
whether they're going to consider some

00:10:56,390 --> 00:11:06,079
host direct-attached storage in the mix

00:10:59,450 --> 00:11:08,320
as well it's a cloud but it isn't

00:11:06,079 --> 00:11:11,149
necessarily a public cloud right so we

00:11:08,320 --> 00:11:13,010
maintain the ability for customers to

00:11:11,149 --> 00:11:14,149
either choose to adopt public

00:11:13,010 --> 00:11:16,459
infrastructure that's based on cloud

00:11:14,149 --> 00:11:25,700
snack or to build it on premise

00:11:16,459 --> 00:11:27,140
themselves and with that choice comes

00:11:25,700 --> 00:11:30,500
the ability to actually use the client

00:11:27,140 --> 00:11:32,180
Windows OS if you've used public cloud

00:11:30,500 --> 00:11:34,820
infrastructure like AWS you might be

00:11:32,180 --> 00:11:37,160
aware that you can't run Windows client

00:11:34,820 --> 00:11:38,390
instances on that infrastructure the

00:11:37,160 --> 00:11:41,420
reason being that the Microsoft

00:11:38,390 --> 00:11:43,940
licensing does not permit for service

00:11:41,420 --> 00:11:45,800
providers to make the client OS

00:11:43,940 --> 00:11:50,449
available but if you're building on

00:11:45,800 --> 00:11:53,510
premise then that potentially becomes an

00:11:50,449 --> 00:11:55,910
option and of course it's cloud it

00:11:53,510 --> 00:11:58,040
expands on demand you can build it at

00:11:55,910 --> 00:11:58,700
any scale and regardless of that scale

00:11:58,040 --> 00:12:00,650
you can

00:11:58,700 --> 00:12:08,500
the whole thing from a single management

00:12:00,650 --> 00:12:11,480
console so just as a for instance a

00:12:08,500 --> 00:12:13,160
couple of a couple of rigs that we built

00:12:11,480 --> 00:12:17,180
during this project here's one of them

00:12:13,160 --> 00:12:19,310
test rig and two clusters of paint hosts

00:12:17,180 --> 00:12:22,610
each a system that could scale to about

00:12:19,310 --> 00:12:24,980
a thousand desktops that this was used

00:12:22,610 --> 00:12:29,240
in tests is this a system that I used

00:12:24,980 --> 00:12:33,940
well no because there are like budgets

00:12:29,240 --> 00:12:36,790
and stuff that's the one that I used

00:12:33,940 --> 00:12:40,120
scaling to about five desktops how much

00:12:36,790 --> 00:12:44,470
shall we say a much more modest system

00:12:40,120 --> 00:12:44,470
but it suited my needs and the less

00:12:49,800 --> 00:12:54,540
okay so we've talked about the product

00:12:51,720 --> 00:12:56,040
and we've talked about some of the key

00:12:54,540 --> 00:12:59,179
motivating factors with why we would

00:12:56,040 --> 00:13:02,550
choose to integrate it with clown snack

00:12:59,179 --> 00:13:04,829
so I want to share the experience of

00:13:02,550 --> 00:13:06,360
what that was like starting with the

00:13:04,829 --> 00:13:08,699
things that I went particularly well I

00:13:06,360 --> 00:13:11,999
joined the project's a little over a

00:13:08,699 --> 00:13:14,639
year and a half ago I didn't implement

00:13:11,999 --> 00:13:18,629
the whole thing we started with a

00:13:14,639 --> 00:13:20,189
working prototype so there's a lot that

00:13:18,629 --> 00:13:21,600
I probably should include in the section

00:13:20,189 --> 00:13:22,920
that follows that I may not include in

00:13:21,600 --> 00:13:24,209
the section that follows because I am

00:13:22,920 --> 00:13:26,160
guilty of taking a heck of a lot of

00:13:24,209 --> 00:13:28,069
things for granted there is a lot in

00:13:26,160 --> 00:13:32,910
clown snack that does simply just work

00:13:28,069 --> 00:13:34,799
and actually being here this week as it

00:13:32,910 --> 00:13:36,749
has really sort of helped open my eyes

00:13:34,799 --> 00:13:38,339
to that and and and remind me of that

00:13:36,749 --> 00:13:42,269
though I did want to call out a few

00:13:38,339 --> 00:13:44,689
specific things I'll mention these

00:13:42,269 --> 00:13:47,189
briefly and then go into some detail so

00:13:44,689 --> 00:13:52,769
first of all there is the similarity

00:13:47,189 --> 00:13:55,290
with AWS there is the fact that the

00:13:52,769 --> 00:13:57,629
projects we were we were working with a

00:13:55,290 --> 00:13:59,850
fluid system a system that we could

00:13:57,629 --> 00:14:04,170
modify and the project did result in

00:13:59,850 --> 00:14:06,959
several cloud stack enhancements and we

00:14:04,170 --> 00:14:09,990
flushed out some useful bugs that that's

00:14:06,959 --> 00:14:12,329
a positive absolutely we we like bugs

00:14:09,990 --> 00:14:14,639
when we can find them and fix them

00:14:12,329 --> 00:14:16,949
Zen desktop of course a complex workload

00:14:14,639 --> 00:14:22,949
it taxed the system in ways that it was

00:14:16,949 --> 00:14:26,579
perhaps not used to being taxed so

00:14:22,949 --> 00:14:28,079
starting with the similarity to AWS as I

00:14:26,579 --> 00:14:30,209
said at the start we ran two integration

00:14:28,079 --> 00:14:31,529
projects pretty much side by side one to

00:14:30,209 --> 00:14:35,309
integrate the cloud stack and one to

00:14:31,529 --> 00:14:37,649
integrate with AWS it was obviously very

00:14:35,309 --> 00:14:41,429
helpful to us the cloud stack in lots of

00:14:37,649 --> 00:14:43,759
ways follows the AWS model there are

00:14:41,429 --> 00:14:46,499
lots of common concepts between the two

00:14:43,759 --> 00:14:49,470
we have our region's owns security

00:14:46,499 --> 00:14:53,549
groups all the things listed here coming

00:14:49,470 --> 00:14:56,339
packaged with pretty much the roughly

00:14:53,549 --> 00:15:00,980
the same semantics in most cases roughly

00:14:56,339 --> 00:15:00,980
the same kinds of API to manipulate them

00:15:01,170 --> 00:15:07,170
and a very nice thing about the clown

00:15:04,889 --> 00:15:09,059
stack API is that the service offerings

00:15:07,170 --> 00:15:10,889
can be enumerated dynamically this is

00:15:09,059 --> 00:15:13,170
something you can't do in Amazon anybody

00:15:10,889 --> 00:15:16,619
has familiarity with ec2 and driving

00:15:13,170 --> 00:15:17,999
that system through the API these the

00:15:16,619 --> 00:15:20,459
list of instance types is actually not

00:15:17,999 --> 00:15:26,879
available for dynamic query it's only in

00:15:20,459 --> 00:15:29,669
the documentation so this similarity

00:15:26,879 --> 00:15:34,649
allowed for a genuinely useful amount of

00:15:29,669 --> 00:15:38,189
code sharing I don't have the stats so

00:15:34,649 --> 00:15:40,769
I'll make one up my gut feel is that it

00:15:38,189 --> 00:15:44,399
was probably around 70% shared code

00:15:40,769 --> 00:15:50,009
between the AWS integration project and

00:15:44,399 --> 00:15:51,509
the cloud psych integration project and

00:15:50,009 --> 00:15:53,189
perhaps more importantly than the code

00:15:51,509 --> 00:15:57,569
we were able to share we were able to

00:15:53,189 --> 00:16:00,239
create a similar user experience with

00:15:57,569 --> 00:16:02,040
these two technologies as well this was

00:16:00,239 --> 00:16:05,549
very helpful to us in in the product

00:16:02,040 --> 00:16:07,499
design phase so all of the all of the

00:16:05,549 --> 00:16:10,739
wizards all of the workflows that the

00:16:07,499 --> 00:16:12,629
users have to go to go through to set up

00:16:10,739 --> 00:16:15,269
hosting on Amazon versus clown snack

00:16:12,629 --> 00:16:17,790
they are they are pretty much the same

00:16:15,269 --> 00:16:22,079
that they differ only in in very minor

00:16:17,790 --> 00:16:24,110
detail so that for me was a big plus

00:16:22,079 --> 00:16:24,110
point

00:16:27,370 --> 00:16:34,839
so CloudStack enhancements now as I say

00:16:33,279 --> 00:16:37,720
I joined the project about a year and a

00:16:34,839 --> 00:16:40,270
half ago a little more than that and I

00:16:37,720 --> 00:16:42,040
can't claim with certainty that

00:16:40,270 --> 00:16:43,720
everything I'm going to list here was

00:16:42,040 --> 00:16:45,940
motivated by XenDesktop and only

00:16:43,720 --> 00:16:47,350
XenDesktop it's possible that some of

00:16:45,940 --> 00:16:52,390
these things were coming along in

00:16:47,350 --> 00:16:54,730
CloudStack anyway but as the tech lead

00:16:52,390 --> 00:16:57,220
on the XenDesktop site I was I was

00:16:54,730 --> 00:17:01,810
privileged and fortunate it were enough

00:16:57,220 --> 00:17:03,750
to work with a great team of cloud snack

00:17:01,810 --> 00:17:07,270
and cloud platform engineers at Citrix

00:17:03,750 --> 00:17:09,220
we built a fantastic functional dialogue

00:17:07,270 --> 00:17:10,380
with them throughout the project it's

00:17:09,220 --> 00:17:14,760
something that I'm very pleased about

00:17:10,380 --> 00:17:14,760
something that I hope we can maintain

00:17:15,600 --> 00:17:20,699
and this has allowed for some more

00:17:19,360 --> 00:17:22,510
streamlined integration patterns

00:17:20,699 --> 00:17:26,500
compared with some of the equivalent

00:17:22,510 --> 00:17:28,750
things we have to do on my ws so as an

00:17:26,500 --> 00:17:30,280
example one of the things we have in

00:17:28,750 --> 00:17:33,070
XenDesktop is the concept of a pooled

00:17:30,280 --> 00:17:36,760
desktop a pooled machine which can be

00:17:33,070 --> 00:17:40,030
assigned to any user randomly and it is

00:17:36,760 --> 00:17:41,620
based on a centralized master image the

00:17:40,030 --> 00:17:44,140
administrator defines exactly what that

00:17:41,620 --> 00:17:46,660
master image is every user gets the same

00:17:44,140 --> 00:17:48,880
master image and once the user logs off

00:17:46,660 --> 00:17:50,140
that it that desktop can actually be

00:17:48,880 --> 00:17:52,960
assigned to another user and it will

00:17:50,140 --> 00:17:55,830
just reboot it will lose any changes it

00:17:52,960 --> 00:17:58,270
will just reset to its previous state

00:17:55,830 --> 00:18:00,640
and similarly the administrator can roll

00:17:58,270 --> 00:18:06,970
it forward onto a new image to install

00:18:00,640 --> 00:18:08,980
new applications or Windows updates now

00:18:06,970 --> 00:18:10,240
so one of the things we have in Cal

00:18:08,980 --> 00:18:12,580
stack now is we actually have the

00:18:10,240 --> 00:18:14,220
restore virtual machine API which gives

00:18:12,580 --> 00:18:16,480
us exactly that facility natively

00:18:14,220 --> 00:18:18,460
without having to re provision a machine

00:18:16,480 --> 00:18:19,960
we have the ability to either roll it

00:18:18,460 --> 00:18:22,480
back to the template it was originally

00:18:19,960 --> 00:18:24,670
provisioned from roll it forward onto a

00:18:22,480 --> 00:18:26,860
new template while keeping it remaining

00:18:24,670 --> 00:18:29,130
the saint's machine on Amazon we can't

00:18:26,860 --> 00:18:29,130
do that

00:18:36,450 --> 00:18:41,080
right so the question was was that

00:18:38,800 --> 00:18:43,540
restore virtual machine API available to

00:18:41,080 --> 00:18:46,000
other other callers besides in desktop

00:18:43,540 --> 00:18:52,540
yes it is yes absolutely yes it's part

00:18:46,000 --> 00:18:53,830
of the core platform user API on AWS we

00:18:52,540 --> 00:18:56,500
actually have two reprovision machines

00:18:53,830 --> 00:18:57,510
in order to satisfy that facility so so

00:18:56,500 --> 00:19:00,070
there are cases where we need

00:18:57,510 --> 00:19:01,450
heavyweight workarounds for things that

00:19:00,070 --> 00:19:04,810
we can do in a much more optimized way

00:19:01,450 --> 00:19:06,580
of cloud stack we can create machines in

00:19:04,810 --> 00:19:08,260
a stop state it sounds quite simple

00:19:06,580 --> 00:19:10,750
sounds quite trivial but it's actually

00:19:08,260 --> 00:19:12,490
very nice because one of the things we

00:19:10,750 --> 00:19:14,610
do have to do in XenDesktop is assemble

00:19:12,490 --> 00:19:17,200
machines with multiple attached disks

00:19:14,610 --> 00:19:21,010
and we like the machine to be stopped

00:19:17,200 --> 00:19:22,390
when we do that um on Amazon every

00:19:21,010 --> 00:19:23,890
machine we create is already running

00:19:22,390 --> 00:19:26,530
when we create it so we actually have to

00:19:23,890 --> 00:19:28,150
work quite hard to stop it to stabilize

00:19:26,530 --> 00:19:30,280
it to attach the additional discs and

00:19:28,150 --> 00:19:32,610
then start it up again on cloud snack we

00:19:30,280 --> 00:19:36,700
can create machines that are stopped

00:19:32,610 --> 00:19:38,230
it's much more streamlined implicit

00:19:36,700 --> 00:19:39,880
dedication like I have a feeling this

00:19:38,230 --> 00:19:41,830
was coming along in cloud stack anyway

00:19:39,880 --> 00:19:44,170
this is the model whereby you can set up

00:19:41,830 --> 00:19:46,240
a service offering that guarantees that

00:19:44,170 --> 00:19:48,640
instances will not share hardware with

00:19:46,240 --> 00:19:50,380
those from other tenants but where the

00:19:48,640 --> 00:19:52,150
system otherwise self organizes itself

00:19:50,380 --> 00:19:55,210
underneath to actually make sure that

00:19:52,150 --> 00:20:00,730
that happens it's a it's a capability

00:19:55,210 --> 00:20:03,400
that Amazon how's a 16k user data

00:20:00,730 --> 00:20:06,430
allowance again possibly sounds quite

00:20:03,400 --> 00:20:08,110
trivial but there is one particularly

00:20:06,430 --> 00:20:10,660
use case we have in Zen desktop where we

00:20:08,110 --> 00:20:12,880
do need to be able to pass a fairly

00:20:10,660 --> 00:20:15,220
sizable packet of user data to some of

00:20:12,880 --> 00:20:16,690
the worker instances that we spin up and

00:20:15,220 --> 00:20:22,000
we were limited by the previous data

00:20:16,690 --> 00:20:25,150
allowance and without actually being

00:20:22,000 --> 00:20:26,950
able to increase that we would have been

00:20:25,150 --> 00:20:30,580
in some serious trouble architecture

00:20:26,950 --> 00:20:34,510
aliso so that really helped us out as

00:20:30,580 --> 00:20:35,800
well so those are just a few those are

00:20:34,510 --> 00:20:38,020
few that stick in my memory there are

00:20:35,800 --> 00:20:40,600
there are some more but basically the

00:20:38,020 --> 00:20:42,490
theme is you're working with something

00:20:40,600 --> 00:20:43,809
you can change and you've got a team of

00:20:42,490 --> 00:20:46,599
people working with you

00:20:43,809 --> 00:20:50,590
who can help you change it and that to

00:20:46,599 --> 00:20:55,539
me was just um just invaluable

00:20:50,590 --> 00:21:00,849
throughout the project let's talk about

00:20:55,539 --> 00:21:03,789
bunks so yes we found some bugs

00:21:00,849 --> 00:21:06,070
we found some bugs in in CloudStack we

00:21:03,789 --> 00:21:07,119
might have found one or two in

00:21:06,070 --> 00:21:13,690
XenDesktop

00:21:07,119 --> 00:21:16,690
as well main so there were over a

00:21:13,690 --> 00:21:18,519
hundred I think reported associated with

00:21:16,690 --> 00:21:21,519
the XenDesktop integration particularly

00:21:18,519 --> 00:21:25,599
in our JIRA system throughout the

00:21:21,519 --> 00:21:27,179
project so far I say so far meant to say

00:21:25,599 --> 00:21:29,679
at the start that this project has just

00:21:27,179 --> 00:21:31,929
reached a very important milestone with

00:21:29,679 --> 00:21:34,629
the released last month of n desktop and

00:21:31,929 --> 00:21:37,859
Zen app 7.5 which is the first release

00:21:34,629 --> 00:21:43,239
to to actually contain this integration

00:21:37,859 --> 00:21:45,039
but but we also have work on going 63

00:21:43,239 --> 00:21:47,710
fixed enclosed in the four point three

00:21:45,039 --> 00:21:52,539
and four to one branches at the time of

00:21:47,710 --> 00:21:58,269
writing and I think yours truly is

00:21:52,539 --> 00:22:00,159
responsible for about eleven of them so

00:21:58,269 --> 00:22:06,129
I can't resist but share a couple of war

00:22:00,159 --> 00:22:08,799
stories we had going back two years I

00:22:06,129 --> 00:22:11,109
hadn't even heard of DNS mask which runs

00:22:08,799 --> 00:22:13,330
on the calcite virtual router but we did

00:22:11,109 --> 00:22:14,679
have a problem where the Windows

00:22:13,330 --> 00:22:17,440
instances that we were running inside

00:22:14,679 --> 00:22:19,389
the cloud were not registering in DNS

00:22:17,440 --> 00:22:21,879
with a Windows domain controller that

00:22:19,389 --> 00:22:24,279
was running outside of the cloud and we

00:22:21,879 --> 00:22:26,109
found that there was a there was a DNS

00:22:24,279 --> 00:22:28,299
mask proxying issue going on there so

00:22:26,109 --> 00:22:30,460
that the records were not actually

00:22:28,299 --> 00:22:33,700
making it past the cloud stack virtual

00:22:30,460 --> 00:22:36,190
Drita so so this was one of the problems

00:22:33,700 --> 00:22:39,249
we we flanked up and we actually got the

00:22:36,190 --> 00:22:41,109
necessary DHCP options set in the

00:22:39,249 --> 00:22:44,700
virtual router and initialization script

00:22:41,109 --> 00:22:48,070
you know in order to fix that for us

00:22:44,700 --> 00:22:49,389
custom disc offerings we found custom

00:22:48,070 --> 00:22:52,059
disc offerings were making us discs of

00:22:49,389 --> 00:22:53,889
the wrong size one of the things we need

00:22:52,059 --> 00:22:56,450
to do in Zen desktop is weird I'm saying

00:22:53,889 --> 00:22:59,690
before we have to attach multiple discs

00:22:56,450 --> 00:23:02,000
two machines and so and they vary in

00:22:59,690 --> 00:23:04,010
size that there's a particular small one

00:23:02,000 --> 00:23:05,420
that we need to attach and sometimes a

00:23:04,010 --> 00:23:07,910
larger one that we need to attach we use

00:23:05,420 --> 00:23:10,310
custom disk offerings to specify the

00:23:07,910 --> 00:23:13,340
size of the disk we want and what we

00:23:10,310 --> 00:23:16,310
found was as soon as we have created one

00:23:13,340 --> 00:23:19,970
small disk via this offering and

00:23:16,310 --> 00:23:21,500
attached it to a VM every other disk we

00:23:19,970 --> 00:23:23,750
created with the same offering would be

00:23:21,500 --> 00:23:27,050
the same size even if we specified it

00:23:23,750 --> 00:23:29,120
different size through the API so we

00:23:27,050 --> 00:23:31,010
actually found there was some there was

00:23:29,120 --> 00:23:32,240
some broken caching going on effectively

00:23:31,010 --> 00:23:33,860
as soon as we've made a disk of one

00:23:32,240 --> 00:23:36,140
science that science was actually sticky

00:23:33,860 --> 00:23:38,360
and although we were specifying a

00:23:36,140 --> 00:23:40,580
different size in the subsequent a P I

00:23:38,360 --> 00:23:43,340
calls and we got the wrong sized disk

00:23:40,580 --> 00:23:45,860
coming out so some delightful head

00:23:43,340 --> 00:23:50,200
scratching over that one but that one we

00:23:45,860 --> 00:23:50,200
flushed out and and and it's now fixed

00:23:52,180 --> 00:23:56,990
this one was the cause of some

00:23:55,790 --> 00:23:59,690
controversy as to whether you would

00:23:56,990 --> 00:24:02,510
actually class it as a bug or not but we

00:23:59,690 --> 00:24:04,400
did find again with this dynamic disk

00:24:02,510 --> 00:24:08,530
attachment that we do we do quite a lot

00:24:04,400 --> 00:24:11,030
of work with data volumes we found that

00:24:08,530 --> 00:24:14,510
ok I'm running short on time so I have

00:24:11,030 --> 00:24:15,860
to speed up the data disc IDs changed on

00:24:14,510 --> 00:24:17,570
cluster migration so for volume ever

00:24:15,860 --> 00:24:19,370
moved from one cluster to another its ID

00:24:17,570 --> 00:24:20,810
would actually change if we try to

00:24:19,370 --> 00:24:22,880
reference it with the ID that we got

00:24:20,810 --> 00:24:28,240
when we created it it would say the disk

00:24:22,880 --> 00:24:30,740
was not found so that was another one so

00:24:28,240 --> 00:24:32,770
so those were some of the bugs what were

00:24:30,740 --> 00:24:34,730
some of the challenges that we faced

00:24:32,770 --> 00:24:37,970
some of the things that perhaps held us

00:24:34,730 --> 00:24:39,320
up a bit and didn't go so well again

00:24:37,970 --> 00:24:41,450
I'll go through the categories and then

00:24:39,320 --> 00:24:43,220
elaborate a little understanding the

00:24:41,450 --> 00:24:47,050
performance of your storage is one of

00:24:43,220 --> 00:24:51,910
them the API documentation was another

00:24:47,050 --> 00:24:54,230
and error reporting when things go wrong

00:24:51,910 --> 00:24:57,490
hypervisor specific behavior after if

00:24:54,230 --> 00:24:57,490
there is time I will get onto that

00:25:00,320 --> 00:25:05,520
so Center someone's a map they work with

00:25:03,780 --> 00:25:07,850
windows images with windows you have a

00:25:05,520 --> 00:25:12,330
bit of a QA problem quantity assurance

00:25:07,850 --> 00:25:13,740
templates for windows are big copying

00:25:12,330 --> 00:25:17,850
from secondary to primary storage is a

00:25:13,740 --> 00:25:19,110
significant overhead and that there are

00:25:17,850 --> 00:25:20,550
many components within the system

00:25:19,110 --> 00:25:21,990
contributing to this overhead you've got

00:25:20,550 --> 00:25:23,730
the hypervisors you have the secondary

00:25:21,990 --> 00:25:26,130
storage vm you have the storage itself

00:25:23,730 --> 00:25:29,670
and you have potentially different

00:25:26,130 --> 00:25:32,610
people using the storage at the same

00:25:29,670 --> 00:25:35,760
time with non obvious linearization

00:25:32,610 --> 00:25:36,900
constraints and we found that with some

00:25:35,760 --> 00:25:41,220
of the bricks that we built we actually

00:25:36,900 --> 00:25:42,780
had to work quite hard to make them

00:25:41,220 --> 00:25:44,370
usable there were some that were

00:25:42,780 --> 00:25:45,960
performing slowly for reasons that we

00:25:44,370 --> 00:25:48,030
just didn't understand and we could

00:25:45,960 --> 00:25:51,170
build a rig on one site and build a rig

00:25:48,030 --> 00:25:53,490
on another site and have one of them

00:25:51,170 --> 00:25:54,990
inexplicably performing so badly that it

00:25:53,490 --> 00:25:57,360
might take 90 minutes to start an

00:25:54,990 --> 00:25:59,850
instance with the copying from secondary

00:25:57,360 --> 00:26:03,330
to primary storage with with no obvious

00:25:59,850 --> 00:26:04,920
reason why and sometimes small

00:26:03,330 --> 00:26:06,360
configuration changes normal vias

00:26:04,920 --> 00:26:10,890
configuration changes would make the

00:26:06,360 --> 00:26:12,870
system usable a quick tour of API

00:26:10,890 --> 00:26:14,490
documentation so we have complete API

00:26:12,870 --> 00:26:16,920
documentation because it's generated

00:26:14,490 --> 00:26:18,930
automatically but some of the behavior

00:26:16,920 --> 00:26:21,860
specifications are brief some of the

00:26:18,930 --> 00:26:25,500
parameter specifications are unclear I

00:26:21,860 --> 00:26:27,480
won't go through all of these examples

00:26:25,500 --> 00:26:28,830
because I don't have time we had an

00:26:27,480 --> 00:26:30,660
issue with string length and content

00:26:28,830 --> 00:26:32,610
limitations so sometimes people specify

00:26:30,660 --> 00:26:34,410
names or objects but we'd make the name

00:26:32,610 --> 00:26:36,750
too long or we'd introduce characters

00:26:34,410 --> 00:26:38,910
that were not allowed and we'd get ours

00:26:36,750 --> 00:26:40,290
back from the API but a bit of extra

00:26:38,910 --> 00:26:41,880
documentation in the API would have

00:26:40,290 --> 00:26:46,260
prevented us from hitting that problem

00:26:41,880 --> 00:26:48,120
in the first place so for exit for

00:26:46,260 --> 00:26:51,540
example here's the API that creates

00:26:48,120 --> 00:26:53,880
tanks on resources yes a fairly brief

00:26:51,540 --> 00:26:56,670
behavioral description there but I

00:26:53,880 --> 00:26:57,990
suppose it's not you don't have to work

00:26:56,670 --> 00:27:00,030
too hard to figure out what create tax

00:26:57,990 --> 00:27:01,530
does but the fun begins a little further

00:27:00,030 --> 00:27:04,500
down where you have specified the

00:27:01,530 --> 00:27:05,850
resource type and that there's no

00:27:04,500 --> 00:27:06,870
explanation as to what strings you

00:27:05,850 --> 00:27:08,510
actually have to specify for the

00:27:06,870 --> 00:27:11,600
resource type we had to do some googling

00:27:08,510 --> 00:27:13,880
and some research on the

00:27:11,600 --> 00:27:22,460
on user forums to find out what those

00:27:13,880 --> 00:27:25,460
strings were so error reporting when

00:27:22,460 --> 00:27:27,470
things when things go wrong one of the

00:27:25,460 --> 00:27:30,410
problems we had was that we'd quite

00:27:27,470 --> 00:27:34,730
often get back single error codes things

00:27:30,410 --> 00:27:36,710
like a 530 server error for example and

00:27:34,730 --> 00:27:38,330
in some cases we actually have to parse

00:27:36,710 --> 00:27:41,330
error strings we have to actually detect

00:27:38,330 --> 00:27:44,000
text within the error messages coming

00:27:41,330 --> 00:27:46,070
out from from count stack to find out

00:27:44,000 --> 00:27:49,250
exactly what went wrong obviously that's

00:27:46,070 --> 00:27:52,450
a very error-prone process itself and we

00:27:49,250 --> 00:27:55,340
hit some issues as a result of that

00:27:52,450 --> 00:27:57,760
there is the need often to consult the

00:27:55,340 --> 00:27:59,300
management logs in order to debug

00:27:57,760 --> 00:28:01,130
deployment failures

00:27:59,300 --> 00:28:03,410
many of the rigs we were using was small

00:28:01,130 --> 00:28:05,780
they weren't actually very very well

00:28:03,410 --> 00:28:08,600
resourced as she saw in my diagrams

00:28:05,780 --> 00:28:10,190
earlier armed and so it was actually

00:28:08,600 --> 00:28:11,210
quite common for VM deployments to fail

00:28:10,190 --> 00:28:14,770
with things like server capacity

00:28:11,210 --> 00:28:17,540
problems but these problems are not

00:28:14,770 --> 00:28:19,340
evident at the API level we have to go

00:28:17,540 --> 00:28:24,680
into the the management server log to

00:28:19,340 --> 00:28:25,910
find them ok - twice the specific

00:28:24,680 --> 00:28:28,550
behavior I don't think there'll be time

00:28:25,910 --> 00:28:30,260
to to cover this but we did have some

00:28:28,550 --> 00:28:31,700
problems where we were testing

00:28:30,260 --> 00:28:33,410
functionality on XenServer and it would

00:28:31,700 --> 00:28:35,480
work fine and then we would test the

00:28:33,410 --> 00:28:42,950
same functionality on vmware and it

00:28:35,480 --> 00:28:46,640
wouldn't again disk disk device mappings

00:28:42,950 --> 00:28:48,980
were one of the issues here vmware of

00:28:46,640 --> 00:28:51,050
course being a more more complete kind

00:28:48,980 --> 00:28:53,420
of virtualized hardware system as

00:28:51,050 --> 00:28:55,640
opposed to Xen we found that if we

00:28:53,420 --> 00:28:57,380
attach disks at specific positions and

00:28:55,640 --> 00:28:59,000
then expected those disks to be

00:28:57,380 --> 00:29:01,910
available on particular devices within

00:28:59,000 --> 00:29:05,300
the guest often that didn't always meet

00:29:01,910 --> 00:29:07,580
our expectations likewise we found that

00:29:05,300 --> 00:29:10,820
if we attached a disk to them to a Linux

00:29:07,580 --> 00:29:12,200
machine on XenServer dynamically that

00:29:10,820 --> 00:29:14,630
machine that disk would hot-plug

00:29:12,200 --> 00:29:17,060
very easily into the running guest

00:29:14,630 --> 00:29:18,620
system but on vmware it wouldn't hop bug

00:29:17,060 --> 00:29:20,780
we would actually have to go and scan

00:29:18,620 --> 00:29:23,090
the attached disks to actually

00:29:20,780 --> 00:29:25,130
explicitly go and find it before we

00:29:23,090 --> 00:29:27,160
could use it so there were a few

00:29:25,130 --> 00:29:32,059
variations between the hypervisor types

00:29:27,160 --> 00:29:33,620
that we found throughout the work okay

00:29:32,059 --> 00:29:37,039
I'm probably either

00:29:33,620 --> 00:29:39,350
at time or a little over time so I think

00:29:37,039 --> 00:29:41,090
I'd better stop it there say thank you

00:29:39,350 --> 00:29:43,240
very much enjoy the rest of the final

00:29:41,090 --> 00:29:43,240

YouTube URL: https://www.youtube.com/watch?v=pAd-GmY5N8c


