Title: State of the Cloud - Alex Huang
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:06,060
hi everybody thank you for attending to

00:00:04,230 --> 00:00:09,960
saw this talk about the state of the

00:00:06,060 --> 00:00:14,219
cove oh I hope the title is not not

00:00:09,960 --> 00:00:17,820
quite misleading and so I'll get into

00:00:14,219 --> 00:00:19,820
the topic a little bit so I am for those

00:00:17,820 --> 00:00:23,570
of you who don't know me i am alex wong

00:00:19,820 --> 00:00:26,160
i'm one of the co-founders of CloudStack

00:00:23,570 --> 00:00:28,019
today I'm serve as an architect for

00:00:26,160 --> 00:00:31,199
cloud platform which is a product based

00:00:28,019 --> 00:00:36,230
on CloudStack hack and I'm a committed

00:00:31,199 --> 00:00:36,230
and a PMC member for Apache CloudStack

00:00:37,370 --> 00:00:44,250
so the reason why oh why of my talk is

00:00:42,210 --> 00:00:47,340
not the title is not misleading is that

00:00:44,250 --> 00:00:49,410
I didn't really want to go into where

00:00:47,340 --> 00:00:52,770
the state of the co is in terms of

00:00:49,410 --> 00:00:54,510
commits and lines of code and and number

00:00:52,770 --> 00:00:58,559
of features in the last two years that

00:00:54,510 --> 00:01:01,199
we've been and in Apache and I wanted

00:00:58,559 --> 00:01:04,290
more can't go over in terms of cloud

00:01:01,199 --> 00:01:08,040
stacks original design principles and

00:01:04,290 --> 00:01:09,450
how the co is reflecting those design

00:01:08,040 --> 00:01:12,540
principles and the changes that we've

00:01:09,450 --> 00:01:18,479
been doing in the last two years as to

00:01:12,540 --> 00:01:20,159
kind of reflect that so when when you

00:01:18,479 --> 00:01:23,100
look through how's that Apache

00:01:20,159 --> 00:01:25,710
CloudStack wiki it there's a 101 page

00:01:23,100 --> 00:01:28,020
hey I talking about patchy clouds dark

00:01:25,710 --> 00:01:30,840
and the things that you would see is

00:01:28,020 --> 00:01:32,670
things like I for cloud stock is

00:01:30,840 --> 00:01:34,890
designed to do infrastructure

00:01:32,670 --> 00:01:37,560
orchestration and it provides a

00:01:34,890 --> 00:01:41,009
self-service and administrative control

00:01:37,560 --> 00:01:43,890
oh so there's certain number of things

00:01:41,009 --> 00:01:46,950
that goes with that I for one think the

00:01:43,890 --> 00:01:49,640
code must be modular or allow other

00:01:46,950 --> 00:01:52,950
people to at Harbor without how

00:01:49,640 --> 00:01:55,020
conflicting with others hours so that

00:01:52,950 --> 00:01:57,750
goes into the design of cloudstack when

00:01:55,020 --> 00:02:01,950
you look at it from a very beginning

00:01:57,750 --> 00:02:06,299
level oh oh but as you deploy call stack

00:02:01,950 --> 00:02:08,879
and move more into a much higher scale

00:02:06,299 --> 00:02:10,950
in terms of the machines and VMS that it

00:02:08,879 --> 00:02:13,360
manages then you start to think about

00:02:10,950 --> 00:02:16,360
cloudstack in terms of scale

00:02:13,360 --> 00:02:18,400
how does it manage these VMs and how

00:02:16,360 --> 00:02:22,990
does it manage to operations I'm inside

00:02:18,400 --> 00:02:25,750
this data center and and and then I

00:02:22,990 --> 00:02:29,910
think once you move that past that point

00:02:25,750 --> 00:02:33,310
then you will see a what happens when

00:02:29,910 --> 00:02:36,190
the system is under scale and there's a

00:02:33,310 --> 00:02:38,560
fault that happens and and Klaus that

00:02:36,190 --> 00:02:41,740
needs to be designed against that type

00:02:38,560 --> 00:02:43,660
of figures as that type so it needs to

00:02:41,740 --> 00:02:46,480
have this type of fault isolation built

00:02:43,660 --> 00:02:48,160
in and so these are kind of the design

00:02:46,480 --> 00:02:49,720
principles that we come when we looked

00:02:48,160 --> 00:02:51,340
at the features in CloudStack in the

00:02:49,720 --> 00:02:54,700
coen cos that those are the things that

00:02:51,340 --> 00:02:56,860
we need to think about or else something

00:02:54,700 --> 00:03:00,430
can fail without within the data center

00:02:56,860 --> 00:03:06,390
and people have problems arms and the

00:03:00,430 --> 00:03:10,120
problems can be quite quite drastic ok

00:03:06,390 --> 00:03:12,160
so when you call stack is a little

00:03:10,120 --> 00:03:15,040
there's a little bit based on the

00:03:12,160 --> 00:03:18,459
variant of this setup architecture the

00:03:15,040 --> 00:03:20,980
stage event-driven architecture and for

00:03:18,459 --> 00:03:25,330
those of you not familiar with that is

00:03:20,980 --> 00:03:28,360
basically is a way to design CloudStack

00:03:25,330 --> 00:03:30,610
into multiple stages or certain process

00:03:28,360 --> 00:03:33,489
into multiple stages that are separated

00:03:30,610 --> 00:03:36,880
bike use those and each stage is

00:03:33,489 --> 00:03:38,650
independent task as and it has to be

00:03:36,880 --> 00:03:41,440
driven by a finite state machines and

00:03:38,650 --> 00:03:44,320
and what this does is that as the

00:03:41,440 --> 00:03:47,200
process as flows through these cues

00:03:44,320 --> 00:03:49,900
you're supposed to be able to adjust and

00:03:47,200 --> 00:03:52,810
fine-tune the cue mechanism so that they

00:03:49,900 --> 00:03:55,420
can and handle the low and and figure

00:03:52,810 --> 00:03:58,030
out where the pollen XR n and handle the

00:03:55,420 --> 00:04:00,250
load that this process to it and call

00:03:58,030 --> 00:04:02,799
stack is very unique in the systems that

00:04:00,250 --> 00:04:07,420
I worked with before because cluster has

00:04:02,799 --> 00:04:10,930
to manage a set of hardware that have

00:04:07,420 --> 00:04:13,660
different response times and once a set

00:04:10,930 --> 00:04:17,130
of operations that may have long running

00:04:13,660 --> 00:04:19,870
end times I'm is and so when we first us

00:04:17,130 --> 00:04:21,520
design cloudstack then we've decided

00:04:19,870 --> 00:04:26,169
that this is the best way to do it

00:04:21,520 --> 00:04:27,180
because as a as a operation once do

00:04:26,169 --> 00:04:30,539
cloudstack

00:04:27,180 --> 00:04:33,270
you should be able to use the QQ

00:04:30,539 --> 00:04:36,240
mechanism to to wait for long a

00:04:33,270 --> 00:04:39,690
long-running process or our separate

00:04:36,240 --> 00:04:42,380
yourself from a hardware that has passed

00:04:39,690 --> 00:04:45,630
aha has a fault and not return online

00:04:42,380 --> 00:04:47,310
responses for example so let me go

00:04:45,630 --> 00:04:50,070
through that a little bit i'm not sure

00:04:47,310 --> 00:04:51,990
if this is quite readable it looks like

00:04:50,070 --> 00:04:55,020
it's readable on the big screen it's not

00:04:51,990 --> 00:04:58,070
quite readable in my low screen here so

00:04:55,020 --> 00:05:01,440
in concept when it first comes through

00:04:58,070 --> 00:05:03,810
when every sees the HTTP request I mean

00:05:01,440 --> 00:05:06,419
mostly you know HTTP servers will have Q

00:05:03,810 --> 00:05:10,620
well that I handles the questions that

00:05:06,419 --> 00:05:13,229
comes in and and if it is if the request

00:05:10,620 --> 00:05:15,570
is something simple Oh some database

00:05:13,229 --> 00:05:17,639
operation and then it just performs that

00:05:15,570 --> 00:05:20,130
returns but if it is a long-running

00:05:17,639 --> 00:05:21,599
process and for those of you familiar

00:05:20,130 --> 00:05:24,570
with the cove class like these are the

00:05:21,599 --> 00:05:28,110
async commands in class back then they

00:05:24,570 --> 00:05:31,830
get file into a job queue oh and there

00:05:28,110 --> 00:05:33,479
is a job process that goes through and

00:05:31,830 --> 00:05:38,099
takes them out of the queue and starts

00:05:33,479 --> 00:05:41,010
processing them and for any operations

00:05:38,099 --> 00:05:43,229
that has to do with a vm starting and

00:05:41,010 --> 00:05:45,900
stopping and migration and that job

00:05:43,229 --> 00:05:49,680
queue actually fouls it into a virtual

00:05:45,900 --> 00:05:51,780
machine managers queue and that that

00:05:49,680 --> 00:05:56,729
one's do the entire orchestration of the

00:05:51,780 --> 00:05:58,919
vm start and when the virtual machine

00:05:56,729 --> 00:06:01,199
manager decides that it needs to contact

00:05:58,919 --> 00:06:04,770
the actual hardware to perform a certain

00:06:01,199 --> 00:06:07,800
provisioning task then and it it sends a

00:06:04,770 --> 00:06:11,370
command over to an agent which has a

00:06:07,800 --> 00:06:13,889
queue of its own that process not and

00:06:11,370 --> 00:06:15,930
then and there's other events that can

00:06:13,889 --> 00:06:19,770
happen there's this asian monitoring

00:06:15,930 --> 00:06:21,630
that happens with in inside management's

00:06:19,770 --> 00:06:24,180
or in psych class tax management server

00:06:21,630 --> 00:06:28,710
agents and staff application pains back

00:06:24,180 --> 00:06:31,590
to that q and as that I processes it it

00:06:28,710 --> 00:06:34,080
might determine that a in agent has went

00:06:31,590 --> 00:06:37,590
down or Hardware has one down and AJ

00:06:34,080 --> 00:06:39,729
gets gets kicked off of and that and

00:06:37,590 --> 00:06:41,949
when that happens a che has his own cue

00:06:39,729 --> 00:06:44,889
we're at these events get file and then

00:06:41,949 --> 00:06:47,889
it starts the process and when when a

00:06:44,889 --> 00:06:49,599
che a starts that process yeah it will

00:06:47,889 --> 00:06:52,839
also signal to virtual machine managers

00:06:49,599 --> 00:06:55,719
to start the vm m start process and so

00:06:52,839 --> 00:07:01,139
therefore if files event with with the

00:06:55,719 --> 00:07:05,199
virtual machines and managers q.q oh and

00:07:01,139 --> 00:07:06,999
for security programming for example

00:07:05,199 --> 00:07:09,789
with it it has its own separate process

00:07:06,999 --> 00:07:12,580
in Suffolk you again and so you can see

00:07:09,789 --> 00:07:22,020
in contact out these these q's actually

00:07:12,580 --> 00:07:26,999
quite covered in income tax code oh and

00:07:22,020 --> 00:07:29,770
when we look at when we look back at

00:07:26,999 --> 00:07:33,789
infrastructure orchestration and this

00:07:29,770 --> 00:07:36,819
this scaling mechanism so these two

00:07:33,789 --> 00:07:39,249
things actually a somewhat lines because

00:07:36,819 --> 00:07:41,259
when we're doing infrastructure when we

00:07:39,249 --> 00:07:43,449
are orchestrating for a certain hardware

00:07:41,259 --> 00:07:47,259
we want to make sure that orchestration

00:07:43,449 --> 00:07:48,639
does not conflict with other co or does

00:07:47,259 --> 00:07:51,249
not have problem with the code so that

00:07:48,639 --> 00:07:54,339
so that code needs to be a fairly

00:07:51,249 --> 00:07:56,919
modular right I and that module

00:07:54,339 --> 00:08:00,969
basically fits into a particular stage

00:07:56,919 --> 00:08:02,919
in this architecture so those two that

00:08:00,969 --> 00:08:05,080
the scale and the modularity of it is

00:08:02,919 --> 00:08:11,139
it's actually a somewhat and

00:08:05,080 --> 00:08:14,449
interrelated so

00:08:11,139 --> 00:08:17,180
in the past two years we've been doing

00:08:14,449 --> 00:08:19,580
quite a bit of work are in Kyle stacks

00:08:17,180 --> 00:08:24,610
infrastructure and architecture to make

00:08:19,580 --> 00:08:26,660
this surface up out better I think and

00:08:24,610 --> 00:08:29,180
quite a few people have heard before

00:08:26,660 --> 00:08:32,360
that CloudStack is somewhat monolithic

00:08:29,180 --> 00:08:34,690
egg in this architecture and in general

00:08:32,360 --> 00:08:37,370
I actually a somewhat disagree

00:08:34,690 --> 00:08:41,120
especially when I when I first heard it

00:08:37,370 --> 00:08:43,940
I IDIS create a very loudly quite a few

00:08:41,120 --> 00:08:47,529
people oh but when I went through our

00:08:43,940 --> 00:08:50,120
code to go look at where are the

00:08:47,529 --> 00:08:52,460
interdependencies of CloudStack then I

00:08:50,120 --> 00:08:54,650
can't do see that in Cal's tax code

00:08:52,460 --> 00:08:57,440
there are the coast are somewhat

00:08:54,650 --> 00:08:59,750
intertwines with each other are and we

00:08:57,440 --> 00:09:04,490
had to go through and break that apart

00:08:59,750 --> 00:09:06,560
better are and so in the in the past two

00:09:04,490 --> 00:09:13,279
years we've been doing quite a bit of

00:09:06,560 --> 00:09:15,620
work there we actually have % we

00:09:13,279 --> 00:09:18,920
actually have pushed all of our queuing

00:09:15,620 --> 00:09:22,339
mechanisms this job infrastructure up

00:09:18,920 --> 00:09:25,070
above at a higher level oh so that other

00:09:22,339 --> 00:09:26,150
are other people whose writing code can

00:09:25,070 --> 00:09:29,990
actually take advantage of that

00:09:26,150 --> 00:09:33,230
infrastructure today when you look at

00:09:29,990 --> 00:09:36,110
this diagram the implementation of each

00:09:33,230 --> 00:09:38,150
of these queues are different and they

00:09:36,110 --> 00:09:40,070
are done by different tables the

00:09:38,150 --> 00:09:41,600
different job processing different

00:09:40,070 --> 00:09:44,750
thread queues there's actually no

00:09:41,600 --> 00:09:46,730
unified way of doing it and so a lot of

00:09:44,750 --> 00:09:49,040
people look at that and they get well

00:09:46,730 --> 00:09:50,870
they're confused because they don't know

00:09:49,040 --> 00:09:56,660
they don't they're not quite sure what

00:09:50,870 --> 00:09:59,330
each one is doing on and so in in 4.3 we

00:09:56,660 --> 00:10:01,700
unify the vm work you you know into the

00:09:59,330 --> 00:10:04,430
jobs framework and then in the jobs

00:10:01,700 --> 00:10:06,459
framework is also this service a

00:10:04,430 --> 00:10:10,100
interface where you can actually

00:10:06,459 --> 00:10:12,560
dispatch any of the jobs so all the jobs

00:10:10,100 --> 00:10:14,330
framework will then take a job out and

00:10:12,560 --> 00:10:17,120
be able to dispatch them to a different

00:10:14,330 --> 00:10:20,000
set of code to to work on the stage that

00:10:17,120 --> 00:10:22,760
is supposed to work on on there's a

00:10:20,000 --> 00:10:24,000
event plus us that was added to to

00:10:22,760 --> 00:10:26,730
further segregate

00:10:24,000 --> 00:10:28,920
that the code so that you can listen on

00:10:26,730 --> 00:10:31,470
events and act on them rather than have

00:10:28,920 --> 00:10:33,420
to be caught on on where people have to

00:10:31,470 --> 00:10:37,590
know who to call in order for something

00:10:33,420 --> 00:10:41,460
to happen there is now and because of

00:10:37,590 --> 00:10:44,070
that then the Thursday you have to be

00:10:41,460 --> 00:10:46,530
able to string through the calling

00:10:44,070 --> 00:10:48,420
contacts eggs so that when you're

00:10:46,530 --> 00:10:50,640
debugging you know that you're actually

00:10:48,420 --> 00:10:51,990
working on the same these different

00:10:50,640 --> 00:10:54,180
threads actually working on the same

00:10:51,990 --> 00:10:58,290
same things anges and we service the

00:10:54,180 --> 00:11:00,540
manage contacts ex ideas so that we can

00:10:58,290 --> 00:11:02,220
propagate the same context to all the

00:11:00,540 --> 00:11:04,140
different threads and so that the

00:11:02,220 --> 00:11:06,480
logging would be the same and you can

00:11:04,140 --> 00:11:10,920
follow a job through through to his

00:11:06,480 --> 00:11:15,210
completion for different and resource

00:11:10,920 --> 00:11:18,660
takes eggs we added different resource

00:11:15,210 --> 00:11:21,500
takes into our hardware resources as the

00:11:18,660 --> 00:11:25,200
ability to enable/disable and enact

00:11:21,500 --> 00:11:26,850
inactivated resource us where enabled

00:11:25,200 --> 00:11:28,830
means that you can deploy on that

00:11:26,850 --> 00:11:31,050
resource disable means that you cannot

00:11:28,830 --> 00:11:35,420
and inactive means that you should not

00:11:31,050 --> 00:11:39,000
be deploying new new resources new

00:11:35,420 --> 00:11:40,710
things that we prior new resources on to

00:11:39,000 --> 00:11:44,610
that particular resource and that

00:11:40,710 --> 00:11:53,130
controls the which ques we would deposit

00:11:44,610 --> 00:11:56,010
are our commands onto we define I'm the

00:11:53,130 --> 00:11:57,720
f SMS better for for a lot of the first

00:11:56,010 --> 00:12:02,400
class objects that we have in volumes

00:11:57,720 --> 00:12:04,260
and snapshots as so that those processes

00:12:02,400 --> 00:12:06,870
that work on those particular entities

00:12:04,260 --> 00:12:08,190
as we would be able to do better in

00:12:06,870 --> 00:12:11,670
terms of our breaking them into

00:12:08,190 --> 00:12:17,880
different stages as we also pick out our

00:12:11,670 --> 00:12:21,300
plugins and and I will show what happens

00:12:17,880 --> 00:12:23,310
on the plugins there so and then there's

00:12:21,300 --> 00:12:25,140
also storage we factor to allow us to

00:12:23,310 --> 00:12:26,790
define better stages for storage

00:12:25,140 --> 00:12:30,690
provisioning volume positioning for the

00:12:26,790 --> 00:12:33,690
vm and a lot of the framework have been

00:12:30,690 --> 00:12:35,580
pulled out of our cervical and placed

00:12:33,690 --> 00:12:36,040
under a framework for all for all the

00:12:35,580 --> 00:12:40,930
code

00:12:36,040 --> 00:12:44,639
use else so this part I might have to

00:12:40,930 --> 00:12:50,380
refer back to a little bit and this is

00:12:44,639 --> 00:12:52,980
class tax software architecture now when

00:12:50,380 --> 00:12:55,000
you when you look at it Kyle stacks

00:12:52,980 --> 00:12:58,389
orchestration processes are all

00:12:55,000 --> 00:13:00,149
basically done by this module in the

00:12:58,389 --> 00:13:02,769
middle that says the call stack Colonel

00:13:00,149 --> 00:13:05,709
we've renamed it now called classic

00:13:02,769 --> 00:13:07,660
engine and and whatever this engine

00:13:05,709 --> 00:13:10,540
needs to orchestrate and push through or

00:13:07,660 --> 00:13:14,620
10 through a set of adapters that we

00:13:10,540 --> 00:13:16,870
place adapter interfaces as so for

00:13:14,620 --> 00:13:18,970
example if we need to program a certain

00:13:16,870 --> 00:13:21,250
network element and there's a network

00:13:18,970 --> 00:13:24,250
element and interface that you can and

00:13:21,250 --> 00:13:27,149
program through and other people can

00:13:24,250 --> 00:13:29,649
contribute co in the plugins where it

00:13:27,149 --> 00:13:32,949
implements these adapter interfaces and

00:13:29,649 --> 00:13:36,490
execute work for CloudStack and there

00:13:32,949 --> 00:13:38,170
are business logic above this

00:13:36,490 --> 00:13:41,410
orchestration code and there's a

00:13:38,170 --> 00:13:44,260
framework underneath that helps of the

00:13:41,410 --> 00:13:51,120
clustering and and message passing and

00:13:44,260 --> 00:13:54,760
data access layer so this this

00:13:51,120 --> 00:13:57,639
architecture is actually when we first

00:13:54,760 --> 00:13:59,529
started with a paci a was actually

00:13:57,639 --> 00:14:02,740
implemented by this type of dependency

00:13:59,529 --> 00:14:05,190
where each one of these circles

00:14:02,740 --> 00:14:08,769
basically represents a jar in cloudstack

00:14:05,190 --> 00:14:11,410
and arrows they always chose that the

00:14:08,769 --> 00:14:15,069
agencies among them and if you just look

00:14:11,410 --> 00:14:17,260
at that when we started there's

00:14:15,069 --> 00:14:21,130
practically no way you have you would

00:14:17,260 --> 00:14:24,250
know what each one is as and this is why

00:14:21,130 --> 00:14:25,689
I i said i need to may need to go back

00:14:24,250 --> 00:14:28,899
to the things that we've done and

00:14:25,689 --> 00:14:30,670
because a lot of clouds that code that

00:14:28,899 --> 00:14:32,439
went into the framework in

00:14:30,670 --> 00:14:35,980
infrastructure of cloudstack were

00:14:32,439 --> 00:14:39,130
actually in income tax server package

00:14:35,980 --> 00:14:42,759
that so it was intermixed with cloud

00:14:39,130 --> 00:14:47,529
Starks self-service business logic and

00:14:42,759 --> 00:14:48,690
and so do oh then anyone who needed to

00:14:47,529 --> 00:14:51,690
use that infrastructure

00:14:48,690 --> 00:14:54,750
we'll also have compilation access to

00:14:51,690 --> 00:14:57,570
all constructs orchestration code oh and

00:14:54,750 --> 00:15:00,000
then and because of that then and they

00:14:57,570 --> 00:15:03,510
can act they don't know that there's a

00:15:00,000 --> 00:15:07,620
boundary between the plugins and and

00:15:03,510 --> 00:15:09,000
that self service code 0 so 0 in in two

00:15:07,620 --> 00:15:10,700
years that we've been working on this we

00:15:09,000 --> 00:15:15,000
basically have been putting all that

00:15:10,700 --> 00:15:17,190
apart so that people know exactly what

00:15:15,000 --> 00:15:19,260
they're actually dependent on and so

00:15:17,190 --> 00:15:25,740
that they and they know but they

00:15:19,260 --> 00:15:31,530
shouldn't go and access so we pulled our

00:15:25,740 --> 00:15:34,260
post in into so many pieces that it is

00:15:31,530 --> 00:15:36,870
actually not desirable for me to write

00:15:34,260 --> 00:15:39,480
to draw that up onto the screen it would

00:15:36,870 --> 00:15:42,810
be way too way too small for anyone to

00:15:39,480 --> 00:15:45,740
see I here I only showed basically the

00:15:42,810 --> 00:15:49,740
dependency package of CloudStack server

00:15:45,740 --> 00:15:53,100
and what what we've done is we

00:15:49,740 --> 00:15:54,960
categorize most of the clouds that code

00:15:53,100 --> 00:15:57,120
according to the architecture that we

00:15:54,960 --> 00:16:00,260
were presenting in this in this picture

00:15:57,120 --> 00:16:06,420
here in the software architecture

00:16:00,260 --> 00:16:07,920
framework is is a collection of jars

00:16:06,420 --> 00:16:09,600
that implements the different

00:16:07,920 --> 00:16:11,690
functionalities in cloud stacks of

00:16:09,600 --> 00:16:16,340
frameworks things like clustering and

00:16:11,690 --> 00:16:19,920
configuration and manage contacts and

00:16:16,340 --> 00:16:24,270
API is anyone who wants to program

00:16:19,920 --> 00:16:27,510
against cloudstack would would depend on

00:16:24,270 --> 00:16:29,940
this API I and cloud stacks engine is

00:16:27,510 --> 00:16:32,310
its orchestration engine and that does

00:16:29,940 --> 00:16:35,280
the vm controls and network controls and

00:16:32,310 --> 00:16:38,330
volume controls hours and plug in and

00:16:35,280 --> 00:16:41,190
plug in is today the biggest set of a

00:16:38,330 --> 00:16:44,070
different jobs that we have packages

00:16:41,190 --> 00:16:45,150
that we have where people implements the

00:16:44,070 --> 00:16:47,310
different functionalities that

00:16:45,150 --> 00:16:51,210
cloudstack knees in this orchestration

00:16:47,310 --> 00:16:55,760
and network personalities storage

00:16:51,210 --> 00:16:58,740
functionalities is and and then they and

00:16:55,760 --> 00:17:00,019
on top of that then we have different

00:16:58,740 --> 00:17:02,600
services in class

00:17:00,019 --> 00:17:06,020
including the South self-service of

00:17:02,600 --> 00:17:09,289
cloudstack and the management of cloud

00:17:06,020 --> 00:17:14,689
stock resources so if you take a look at

00:17:09,289 --> 00:17:17,720
today Clowe our server which is the same

00:17:14,689 --> 00:17:21,260
cloud server in this diagram of the

00:17:17,720 --> 00:17:24,980
middle the middle circle in the row

00:17:21,260 --> 00:17:27,380
there previously you will see cloud

00:17:24,980 --> 00:17:31,159
server basically just as oh I am part of

00:17:27,380 --> 00:17:33,919
cloudy API I and any of the plugins are

00:17:31,159 --> 00:17:37,010
actually living within cloud server so

00:17:33,919 --> 00:17:42,010
they can talk to each other and and and

00:17:37,010 --> 00:17:42,010
could cause these calling boundaries

00:17:42,070 --> 00:17:50,539
today cloud server is much different and

00:17:45,860 --> 00:17:59,240
it is relying only on framework and clow

00:17:50,539 --> 00:18:02,570
API I and in the schema in the cloud

00:17:59,240 --> 00:18:05,000
engine API by and so someone who is

00:18:02,570 --> 00:18:08,149
looking at and who this would would be

00:18:05,000 --> 00:18:10,309
able to tell what server actually relies

00:18:08,149 --> 00:18:12,950
on and if they were to implement

00:18:10,309 --> 00:18:14,659
something different and i plug in for

00:18:12,950 --> 00:18:18,500
example they would not have to go and

00:18:14,659 --> 00:18:20,450
and include all the code and then

00:18:18,500 --> 00:18:23,830
couldn't tell what they can actually

00:18:20,450 --> 00:18:23,830
depend on in CloudStack

00:18:27,160 --> 00:18:36,940
so then in 4.4 we come to a I am design

00:18:33,370 --> 00:18:40,150
so our men and prachi has written a IMM

00:18:36,940 --> 00:18:44,500
I am plug-in and for access control and

00:18:40,150 --> 00:18:46,930
a cialis right I 44 CloudStack and this

00:18:44,500 --> 00:18:49,690
is how they design their I am plug-in

00:18:46,930 --> 00:18:52,960
and and we were not able to do this two

00:18:49,690 --> 00:18:55,300
years ago oh I plug it in like this

00:18:52,960 --> 00:18:58,870
would be completely intermingled with

00:18:55,300 --> 00:19:04,300
all constructs code oh so in this

00:18:58,870 --> 00:19:06,310
plug-in and it has two parts as as they

00:19:04,300 --> 00:19:08,890
specify in their in their functional

00:19:06,310 --> 00:19:13,210
spec they have the aspiration that the

00:19:08,890 --> 00:19:15,790
actual server our portion of I am may

00:19:13,210 --> 00:19:18,310
one day run as is actual service where

00:19:15,790 --> 00:19:21,790
other are other other services can use

00:19:18,310 --> 00:19:25,030
it as for for access control oh but

00:19:21,790 --> 00:19:27,970
today it runs in ins I Klaus tax

00:19:25,030 --> 00:19:30,610
management server if they separated it

00:19:27,970 --> 00:19:33,150
into two parts one is an actual plug-in

00:19:30,610 --> 00:19:36,520
and that understands call stacks code

00:19:33,150 --> 00:19:39,070
that implements cloud stacks to three

00:19:36,520 --> 00:19:42,640
interfaces to allow class stuff to check

00:19:39,070 --> 00:19:45,750
for API access entity axis and allow

00:19:42,640 --> 00:19:49,320
cloud start to return an entity queries

00:19:45,750 --> 00:19:52,600
filtered by this axis as that's in the

00:19:49,320 --> 00:19:55,870
plug-in comb oh but then but the

00:19:52,600 --> 00:19:57,850
majority of the logic is actually inside

00:19:55,870 --> 00:20:02,170
their server package which is to the

00:19:57,850 --> 00:20:05,410
right I and it is separated from Carla

00:20:02,170 --> 00:20:08,260
stack itself so underneath when you look

00:20:05,410 --> 00:20:11,440
at the little purple boxes this is the

00:20:08,260 --> 00:20:14,110
dependency of cloud stacks I am package

00:20:11,440 --> 00:20:16,990
on cloudstack and the number of things

00:20:14,110 --> 00:20:20,890
that it actually depends and is very

00:20:16,990 --> 00:20:25,000
very low now it only once a framework

00:20:20,890 --> 00:20:28,720
for retrieving a config framework for

00:20:25,000 --> 00:20:30,100
retrieving is configurations a DB the DB

00:20:28,720 --> 00:20:33,580
framework so that you can access the

00:20:30,100 --> 00:20:36,550
zone take DB tables oohs and the manage

00:20:33,580 --> 00:20:37,670
contacts so that it can also print out

00:20:36,550 --> 00:20:41,280
the same contacts

00:20:37,670 --> 00:20:43,500
of a job you know that's so that's the

00:20:41,280 --> 00:20:46,260
framework portion and but in psych class

00:20:43,500 --> 00:20:48,930
that all these is the cloudiest and the

00:20:46,260 --> 00:20:52,830
clown API I in order for it to interact

00:20:48,930 --> 00:20:54,690
with CloudStack so so then and and at

00:20:52,830 --> 00:20:56,760
this point in the completion boundaries

00:20:54,690 --> 00:21:00,710
are sufficient for for them to separate

00:20:56,760 --> 00:21:00,710
their coal away from CloudStack itself

00:21:01,130 --> 00:21:07,020
so i'm actually quite proud that we we

00:21:04,260 --> 00:21:10,910
achieved this because it has taken us

00:21:07,020 --> 00:21:10,910
about two years to get to this point i

00:21:11,000 --> 00:21:19,470
but we have more to do i think and in

00:21:14,850 --> 00:21:22,080
order for us to make this as even better

00:21:19,470 --> 00:21:25,350
and especially in terms of the scaling

00:21:22,080 --> 00:21:27,570
and fault-tolerance portion of it we

00:21:25,350 --> 00:21:29,820
have to be able to service the jobs

00:21:27,570 --> 00:21:31,950
infrastructure that we we somewhat has

00:21:29,820 --> 00:21:35,430
hidden away from from from the

00:21:31,950 --> 00:21:39,060
administrator today today a someone can

00:21:35,430 --> 00:21:40,920
file a job they can retrieve the status

00:21:39,060 --> 00:21:43,170
of that job where they complete it or

00:21:40,920 --> 00:21:45,930
whether it has an error and and then

00:21:43,170 --> 00:21:48,600
that that's it they have no view of what

00:21:45,930 --> 00:21:51,120
this job and how far this job has went

00:21:48,600 --> 00:21:53,790
through in all this queuing that micron

00:21:51,120 --> 00:21:55,800
stock has done and and we need to be

00:21:53,790 --> 00:21:59,610
able to service that because under low

00:21:55,800 --> 00:22:01,380
under scale all people then and when

00:21:59,610 --> 00:22:04,170
they look through clouds that it became

00:22:01,380 --> 00:22:06,600
just a plain black box they have no idea

00:22:04,170 --> 00:22:08,040
what kyle stock is actually doing and

00:22:06,600 --> 00:22:11,670
there's a lot of people who complain

00:22:08,040 --> 00:22:14,160
about aj for example oh and h a has its

00:22:11,670 --> 00:22:16,260
own cube but none of its q and what is

00:22:14,160 --> 00:22:19,380
doing is actually service to the

00:22:16,260 --> 00:22:20,910
administrator and then because it's such

00:22:19,380 --> 00:22:22,500
a black box to the administrator at the

00:22:20,910 --> 00:22:25,200
administrator would work complain that

00:22:22,500 --> 00:22:26,760
they have no control eh eh and when

00:22:25,200 --> 00:22:29,520
things are not predictive to the

00:22:26,760 --> 00:22:33,120
operator or to the administrator then

00:22:29,520 --> 00:22:37,380
and and it becomes useless to them and

00:22:33,120 --> 00:22:39,420
so then we need to unify these q's into

00:22:37,380 --> 00:22:41,390
the same jobs infrastructure as i said

00:22:39,420 --> 00:22:43,110
before the cues that we have today are

00:22:41,390 --> 00:22:45,150
implemented in many different ways

00:22:43,110 --> 00:22:47,170
sometimes with different tables house

00:22:45,150 --> 00:22:50,740
but now we do have a

00:22:47,170 --> 00:22:55,000
a job secure interface that allows us to

00:22:50,740 --> 00:22:57,880
to have all the processes use the same

00:22:55,000 --> 00:23:01,300
same infrastructure and then we need to

00:22:57,880 --> 00:23:03,310
give final control to operator so that

00:23:01,300 --> 00:23:07,690
they can tell us which cues are

00:23:03,310 --> 00:23:10,090
important on to fine-tune and increase

00:23:07,690 --> 00:23:11,620
the size increase the jobs the thread

00:23:10,090 --> 00:23:15,310
starts actually working on these cues

00:23:11,620 --> 00:23:17,260
else and then we need to present a

00:23:15,310 --> 00:23:21,250
better view of that jar these job

00:23:17,260 --> 00:23:25,960
requests to to the operators us and we

00:23:21,250 --> 00:23:29,200
need to give them ability to dynamically

00:23:25,960 --> 00:23:35,590
scale these cues and and monitor our the

00:23:29,200 --> 00:23:37,420
cubes as now the other part about being

00:23:35,590 --> 00:23:39,430
able to fit fit it into this

00:23:37,420 --> 00:23:44,080
architecture is that we need to be able

00:23:39,430 --> 00:23:45,970
to define better stages in CloudStack so

00:23:44,080 --> 00:23:48,550
we need to further clean up all the

00:23:45,970 --> 00:23:50,620
plugins so that today I mean we break

00:23:48,550 --> 00:23:52,930
out the code today but if you look in

00:23:50,620 --> 00:23:54,970
the plugins other than the new plugins

00:23:52,930 --> 00:23:57,520
that we are writing and the original

00:23:54,970 --> 00:24:00,400
plugins are still somewhat intermixed

00:23:57,520 --> 00:24:04,270
because this still relies on under on

00:24:00,400 --> 00:24:06,820
the classic code Oh contact server code

00:24:04,270 --> 00:24:09,430
oh so we need to do a lot more work in

00:24:06,820 --> 00:24:11,230
cleaning that those plugins in and we

00:24:09,430 --> 00:24:12,790
need to move agent manager into the

00:24:11,230 --> 00:24:15,730
framework because agent manager in

00:24:12,790 --> 00:24:19,090
carlstadt today is the way a to do

00:24:15,730 --> 00:24:21,430
messaging to the actual resources as and

00:24:19,090 --> 00:24:23,920
and that is the place where it controls

00:24:21,430 --> 00:24:25,990
the cues to each horror resource and

00:24:23,920 --> 00:24:30,360
which ones we should terminate if

00:24:25,990 --> 00:24:33,370
there's an error things like that and

00:24:30,360 --> 00:24:35,080
then the original all packages we need

00:24:33,370 --> 00:24:37,870
to find the right places to place them I

00:24:35,080 --> 00:24:40,270
have not done that work yet because it

00:24:37,870 --> 00:24:42,550
is a bit of work to place them in the

00:24:40,270 --> 00:24:45,460
right place because packaging is

00:24:42,550 --> 00:24:51,430
actually difficult it affects packaging

00:24:45,460 --> 00:24:55,860
and but we need to do that ok so that's

00:24:51,430 --> 00:24:58,150
the end of my slider well five minutes

00:24:55,860 --> 00:24:59,740
so we have five more minutes let me

00:24:58,150 --> 00:25:01,750
finish up a little bit

00:24:59,740 --> 00:25:04,290
I actually thought I had about an hour

00:25:01,750 --> 00:25:06,490
so I was going to write some more about

00:25:04,290 --> 00:25:10,240
designing for scale and fault isolation

00:25:06,490 --> 00:25:13,330
in call stack so going through a class

00:25:10,240 --> 00:25:16,559
tax code today I think we do do a bit of

00:25:13,330 --> 00:25:20,679
work in terms of of scaling call stack

00:25:16,559 --> 00:25:23,200
because we do make sure the data paths

00:25:20,679 --> 00:25:26,860
and control powers are separated for

00:25:23,200 --> 00:25:29,140
example but we have not done enough to

00:25:26,860 --> 00:25:32,440
make sure all of our operations are

00:25:29,140 --> 00:25:34,660
idempotent and because part of the part

00:25:32,440 --> 00:25:38,140
of this particular architecture is that

00:25:34,660 --> 00:25:40,660
when you are called upon to perform the

00:25:38,140 --> 00:25:44,350
same stage twice you need to be able to

00:25:40,660 --> 00:25:46,840
still perform it correctly and and so

00:25:44,350 --> 00:25:50,370
then and we need to be aware of that

00:25:46,840 --> 00:25:53,410
when we're writing our code and then and

00:25:50,370 --> 00:25:56,590
through the last five years or so of

00:25:53,410 --> 00:26:00,070
dealing with customers and prices in

00:25:56,590 --> 00:26:02,050
data centers I realized when we're

00:26:00,070 --> 00:26:07,000
writing our code we really need to look

00:26:02,050 --> 00:26:10,240
at a priority in the in our code we need

00:26:07,000 --> 00:26:13,120
to first take the vm stability to be the

00:26:10,240 --> 00:26:16,120
top part you know in all of our code and

00:26:13,120 --> 00:26:18,610
that generally has to do with the vm

00:26:16,120 --> 00:26:22,540
storch data path how they access the

00:26:18,610 --> 00:26:26,050
data and then the VMS availability is

00:26:22,540 --> 00:26:29,370
the second priority and and that usually

00:26:26,050 --> 00:26:32,470
involves the VMS network traffic pass as

00:26:29,370 --> 00:26:35,760
then and you have operational data paths

00:26:32,470 --> 00:26:37,990
such as snapshots that people perform

00:26:35,760 --> 00:26:42,490
administrators perform on behalf of the

00:26:37,990 --> 00:26:44,559
VMS aims and family then and you have a

00:26:42,490 --> 00:26:47,559
control pad for for cloudstack and

00:26:44,559 --> 00:26:49,600
people administrator not quite as

00:26:47,559 --> 00:26:51,760
worried about management server being

00:26:49,600 --> 00:26:54,940
down for an hour two hours but

00:26:51,760 --> 00:26:56,980
availability to the to the end users VMs

00:26:54,940 --> 00:26:59,559
and the stability of the end users

00:26:56,980 --> 00:27:01,540
idioms are extremely important and so

00:26:59,559 --> 00:27:04,510
when we're writing a code we we need to

00:27:01,540 --> 00:27:07,630
think about that and we need to go

00:27:04,510 --> 00:27:10,900
through very carefully and think about

00:27:07,630 --> 00:27:11,690
does my co actually a think about these

00:27:10,900 --> 00:27:17,299
parties

00:27:11,690 --> 00:27:18,950
days all right thank you if there's any

00:27:17,299 --> 00:27:28,820
questions I'll take them now I guess we

00:27:18,950 --> 00:27:31,429
have to be minutes left so you have a

00:27:28,820 --> 00:27:33,799
previous slide you're talking about the

00:27:31,429 --> 00:27:35,330
operations been important is that the

00:27:33,799 --> 00:27:37,610
main lead stuff that's invisible to the

00:27:35,330 --> 00:27:40,730
end user or is it include operations as

00:27:37,610 --> 00:27:44,179
user might take like if they send some

00:27:40,730 --> 00:27:49,190
API call twice and still works well I

00:27:44,179 --> 00:27:52,070
think if if all the pieces of the stages

00:27:49,190 --> 00:27:54,100
in a process are idempotent then that

00:27:52,070 --> 00:27:59,389
process itself would be idempotent and

00:27:54,100 --> 00:28:01,100
so if we write it correctly a then in

00:27:59,389 --> 00:28:02,809
the end user should be able to send that

00:28:01,100 --> 00:28:05,419
twice and we should still we are

00:28:02,809 --> 00:28:13,639
correctly but it needs every single

00:28:05,419 --> 00:28:16,120
stage to be to be tied correctly okay no

00:28:13,639 --> 00:28:16,120

YouTube URL: https://www.youtube.com/watch?v=RJMSUDTl6Ds


