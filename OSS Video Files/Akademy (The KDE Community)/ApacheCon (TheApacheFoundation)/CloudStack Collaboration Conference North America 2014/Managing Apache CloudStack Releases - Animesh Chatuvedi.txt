Title: Managing Apache CloudStack Releases - Animesh Chatuvedi
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:06,299
alright so this morning I woke up and I

00:00:03,360 --> 00:00:08,189
took I was dropping my daughter off to a

00:00:06,299 --> 00:00:10,950
friend's place because I had to catch up

00:00:08,189 --> 00:00:12,929
this early morning flight and she told

00:00:10,950 --> 00:00:15,570
me he looks like you are going for an

00:00:12,929 --> 00:00:17,940
important meeting are they going to be

00:00:15,570 --> 00:00:20,880
very important people I said yes so she

00:00:17,940 --> 00:00:24,210
tells me is the president of United

00:00:20,880 --> 00:00:27,449
States going to be there so I said no

00:00:24,210 --> 00:00:30,840
then she said how about the governor has

00:00:27,449 --> 00:00:34,140
said no then she said oh at least the

00:00:30,840 --> 00:00:36,329
mayor and I said no and she said or

00:00:34,140 --> 00:00:38,430
maybe all those people are still

00:00:36,329 --> 00:00:40,260
important to you so to all a few

00:00:38,430 --> 00:00:42,899
important people thanks for making to

00:00:40,260 --> 00:00:46,649
this CloudStack collaboration conference

00:00:42,899 --> 00:00:48,420
and I'm glad we all are here and I'm

00:00:46,649 --> 00:00:52,559
going to talk about the CloudStack

00:00:48,420 --> 00:00:54,510
releases so first about me so before

00:00:52,559 --> 00:00:57,090
joining citrix in late two thousand

00:00:54,510 --> 00:01:00,600
twelve up until that i have used a lot

00:00:57,090 --> 00:01:03,989
of open source software but specially

00:01:00,600 --> 00:01:07,710
from apache foundation but mainly as a

00:01:03,989 --> 00:01:10,650
freeloader so late 2012 when I got an

00:01:07,710 --> 00:01:12,900
opportunity to work with citrix and on

00:01:10,650 --> 00:01:15,509
Apache CloudStack I was thrilled because

00:01:12,900 --> 00:01:17,400
I thought this is my time to give back

00:01:15,509 --> 00:01:20,640
to the community and instead of

00:01:17,400 --> 00:01:22,560
freeloader become a contributor so here

00:01:20,640 --> 00:01:25,320
I am I was a contributor first time

00:01:22,560 --> 00:01:27,810
became committer pmc member and of

00:01:25,320 --> 00:01:29,970
course release management but I have to

00:01:27,810 --> 00:01:34,770
tell you the community is really such a

00:01:29,970 --> 00:01:36,810
vibrant place that it over the years

00:01:34,770 --> 00:01:38,549
whatever i have read from using open

00:01:36,810 --> 00:01:40,860
source software even though i have run

00:01:38,549 --> 00:01:43,140
two big releases and that was a lot of

00:01:40,860 --> 00:01:46,079
hard work but i don't think I can ever

00:01:43,140 --> 00:01:49,020
repay the debt especially to the Patrick

00:01:46,079 --> 00:01:51,090
foundation so with that I want to start

00:01:49,020 --> 00:01:53,310
on release management so release

00:01:51,090 --> 00:01:56,340
management of course any release

00:01:53,310 --> 00:01:58,020
management begins with planning and if

00:01:56,340 --> 00:02:00,479
you think about planning for Apache

00:01:58,020 --> 00:02:03,450
CloudStack releases its relatively very

00:02:00,479 --> 00:02:05,340
simple because we have four month

00:02:03,450 --> 00:02:07,590
time-based release cycle right so it

00:02:05,340 --> 00:02:09,300
becomes very simple to plan you can

00:02:07,590 --> 00:02:12,450
pretty much come up with your feature

00:02:09,300 --> 00:02:15,159
free is code freeze our seas and Jay

00:02:12,450 --> 00:02:17,019
based on that four-month time scale

00:02:15,159 --> 00:02:19,989
right but you also have to take into

00:02:17,019 --> 00:02:22,659
context where did the previous release

00:02:19,989 --> 00:02:24,430
was and and that's where we sometimes

00:02:22,659 --> 00:02:28,420
have some adjustments that we need to

00:02:24,430 --> 00:02:30,819
make and in release management we have a

00:02:28,420 --> 00:02:32,260
few milestones which I will cover the

00:02:30,819 --> 00:02:35,290
first one is feature freeze this is

00:02:32,260 --> 00:02:37,599
written this is pretty much the hard

00:02:35,290 --> 00:02:41,170
fixed date by which all the features

00:02:37,599 --> 00:02:44,650
have to make into the master branch and

00:02:41,170 --> 00:02:46,540
because on this day the feature branch

00:02:44,650 --> 00:02:49,389
will be cut so if your feature did not

00:02:46,540 --> 00:02:51,430
make in by this time it's pretty much

00:02:49,389 --> 00:02:52,720
out and you have to wait for the next

00:02:51,430 --> 00:02:54,790
release cycle and that's where

00:02:52,720 --> 00:02:58,000
communication becomes important you have

00:02:54,790 --> 00:03:00,189
to give sufficient notice for folks to

00:02:58,000 --> 00:03:01,920
be aware what time the release branch

00:03:00,189 --> 00:03:05,260
will be cut if there any challenges

00:03:01,920 --> 00:03:07,060
bring them forward right the next

00:03:05,260 --> 00:03:08,769
milestone we have is code free so

00:03:07,060 --> 00:03:11,590
between the future freeze and code

00:03:08,769 --> 00:03:15,359
freeze is what we do integration testing

00:03:11,590 --> 00:03:18,400
and after code freeze up until our see

00:03:15,359 --> 00:03:20,349
what we allow is only blocker and

00:03:18,400 --> 00:03:22,000
critical issues to be fixed the reason

00:03:20,349 --> 00:03:24,549
is we want to make sure that the branch

00:03:22,000 --> 00:03:26,530
is stable and once the branch has been

00:03:24,549 --> 00:03:29,169
stable for some time there are no

00:03:26,530 --> 00:03:32,169
blockers or criticals then you call out

00:03:29,169 --> 00:03:34,480
for release release candidate now one

00:03:32,169 --> 00:03:37,720
thing I want to call out for in our

00:03:34,480 --> 00:03:39,519
releases we have a lot of features and

00:03:37,720 --> 00:03:41,799
we have lot of issues that come in and

00:03:39,519 --> 00:03:44,049
we do not have any auto assignment of

00:03:41,799 --> 00:03:47,169
issues so what that means as a release

00:03:44,049 --> 00:03:50,889
manager you have to spend a lot of time

00:03:47,169 --> 00:03:54,400
tragic issues and figuring out who whom

00:03:50,889 --> 00:03:57,579
can you ask to fix those issues so in my

00:03:54,400 --> 00:04:00,519
personal opinion I know info dot too we

00:03:57,579 --> 00:04:03,099
did not even have the Liberty to assign

00:04:00,519 --> 00:04:06,340
issues so I had to always go outside and

00:04:03,099 --> 00:04:08,590
asked in a true another channel and JIRA

00:04:06,340 --> 00:04:11,769
being the most efficient I was watching

00:04:08,590 --> 00:04:13,479
that we need to do that now I think I am

00:04:11,769 --> 00:04:16,299
getting a little greedy and what I want

00:04:13,479 --> 00:04:20,199
to propose is we have a much more

00:04:16,299 --> 00:04:24,279
fine-grained component and subcomponent

00:04:20,199 --> 00:04:25,780
levels for our software modules and we

00:04:24,279 --> 00:04:27,850
come up with

00:04:25,780 --> 00:04:29,710
primary owners or the owners that we can

00:04:27,850 --> 00:04:31,330
rotate across different releases and do

00:04:29,710 --> 00:04:34,330
auto assignment that will actually take

00:04:31,330 --> 00:04:36,240
a lot of burden of any future release

00:04:34,330 --> 00:04:40,180
manager because it would take me almost

00:04:36,240 --> 00:04:41,860
every day two to three hours just trying

00:04:40,180 --> 00:04:43,360
issues or even even more depending on

00:04:41,860 --> 00:04:45,970
depending on how the release is going

00:04:43,360 --> 00:04:48,880
right so once the release branch is

00:04:45,970 --> 00:04:50,380
stable and there are no more blocker the

00:04:48,880 --> 00:04:54,250
release manager bells the release

00:04:50,380 --> 00:04:56,680
candidate and building a release

00:04:54,250 --> 00:04:58,480
candidate typically it takes maybe one

00:04:56,680 --> 00:05:00,850
or two days the reason being you want to

00:04:58,480 --> 00:05:04,270
make sure all the fixes that are

00:05:00,850 --> 00:05:05,590
expected to are expected are there so

00:05:04,270 --> 00:05:08,080
you have to do cherry picks that take

00:05:05,590 --> 00:05:10,660
that take sometimes once you have done

00:05:08,080 --> 00:05:12,850
that you call for a vote and you have to

00:05:10,660 --> 00:05:14,770
have minimum 72 hours of vote that's

00:05:12,850 --> 00:05:16,450
that's pretty much and with us our

00:05:14,770 --> 00:05:19,860
bylaws also and that must be followed

00:05:16,450 --> 00:05:23,110
the community then test the belt and

00:05:19,860 --> 00:05:26,620
then cast their votes in order to pass a

00:05:23,110 --> 00:05:29,200
vote and publisher release only PMC

00:05:26,620 --> 00:05:31,300
votes are binding and those are the ones

00:05:29,200 --> 00:05:34,450
that are counted you need to have at

00:05:31,300 --> 00:05:36,580
least three plus one binding votes and a

00:05:34,450 --> 00:05:38,530
majority of binding vote should be +1

00:05:36,580 --> 00:05:41,430
rather than minus 1 so release this

00:05:38,530 --> 00:05:43,690
cannot be vetoed unless it's like some

00:05:41,430 --> 00:05:45,669
very critical issue that you really need

00:05:43,690 --> 00:05:47,430
to fix like upgrades are broken it it

00:05:45,669 --> 00:05:49,600
generally cannot be vetoed and

00:05:47,430 --> 00:05:51,729
non-binding votes are welcome we

00:05:49,600 --> 00:05:54,280
obviously want a lot of participation in

00:05:51,729 --> 00:05:56,169
community so we definitely welcome them

00:05:54,280 --> 00:05:59,110
but they are not really counted in terms

00:05:56,169 --> 00:06:01,570
of as part of wording process goes if

00:05:59,110 --> 00:06:04,419
the vote fails then the reason of

00:06:01,570 --> 00:06:06,100
failure gets addressed and a new RC belt

00:06:04,419 --> 00:06:09,430
in the process is repeated and we have

00:06:06,100 --> 00:06:10,930
to unfortunately repeat many times so

00:06:09,430 --> 00:06:13,660
that's something I will cover a little

00:06:10,930 --> 00:06:16,150
late later in my slides also and then

00:06:13,660 --> 00:06:18,100
once the final RC is done everybody is

00:06:16,150 --> 00:06:19,930
happy with the release we do a ga and

00:06:18,100 --> 00:06:23,010
the vote is officially published and the

00:06:19,930 --> 00:06:25,630
release is made right now in order to

00:06:23,010 --> 00:06:27,760
really run release especially in open

00:06:25,630 --> 00:06:29,979
source community because everybody is in

00:06:27,760 --> 00:06:32,740
different time zones people are working

00:06:29,979 --> 00:06:34,870
in different hours communication becomes

00:06:32,740 --> 00:06:38,349
very important so it's really the key of

00:06:34,870 --> 00:06:39,700
running efficient releases so as a

00:06:38,349 --> 00:06:41,830
release manager you have to

00:06:39,700 --> 00:06:43,960
proposed the release plan and milestones

00:06:41,830 --> 00:06:46,360
with sufficient notice so that people

00:06:43,960 --> 00:06:48,640
have do chance to correct their course

00:06:46,360 --> 00:06:50,320
in case they are not meeting a certain

00:06:48,640 --> 00:06:52,570
milestone or at least they can raise

00:06:50,320 --> 00:06:54,280
their raise their doubts with challenges

00:06:52,570 --> 00:06:55,720
you have to solicit feedback because

00:06:54,280 --> 00:06:58,900
obviously cannot run the release alone

00:06:55,720 --> 00:07:02,020
and we use a variety of communication

00:06:58,900 --> 00:07:03,970
tools for managing releases meaningless

00:07:02,020 --> 00:07:05,800
this is the most obvious one all of our

00:07:03,970 --> 00:07:07,960
communication happens on mailing list if

00:07:05,800 --> 00:07:12,070
it did not happen on mailing list pretty

00:07:07,960 --> 00:07:15,070
much it did not happen right so but we

00:07:12,070 --> 00:07:16,960
have a lot of communic of emails come

00:07:15,070 --> 00:07:19,900
per day so as a release manager it also

00:07:16,960 --> 00:07:21,250
becomes hard to scan through all the

00:07:19,900 --> 00:07:22,840
emails and figure out what are the

00:07:21,250 --> 00:07:25,510
things that might affect the release or

00:07:22,840 --> 00:07:28,750
something that you need to look for the

00:07:25,510 --> 00:07:32,290
way we have devised around it is always

00:07:28,750 --> 00:07:34,990
use of prefix in your subject line so

00:07:32,290 --> 00:07:36,700
that you can filter and i have i've been

00:07:34,990 --> 00:07:38,950
pretty much using outlook and has like

00:07:36,700 --> 00:07:40,420
something called views just like on

00:07:38,950 --> 00:07:43,060
database your views i can set those

00:07:40,420 --> 00:07:45,610
views on and quickly much through emails

00:07:43,060 --> 00:07:48,280
but it does take a lot of time then we

00:07:45,610 --> 00:07:50,140
have Vicki JIRA and dashboard and other

00:07:48,280 --> 00:07:52,240
tools we use our Jenkins and review

00:07:50,140 --> 00:07:54,820
board and source tree actually chip

00:07:52,240 --> 00:07:58,690
introduced me to it this is pretty much

00:07:54,820 --> 00:08:00,460
a UI tool on top of your git repo and

00:07:58,690 --> 00:08:03,070
allows you to look at the commits that

00:08:00,460 --> 00:08:05,710
are coming in it becomes much helpful

00:08:03,070 --> 00:08:08,770
when you are doing your cherry picks

00:08:05,710 --> 00:08:10,720
after our during our seas so now digging

00:08:08,770 --> 00:08:12,430
deeper into some of those communication

00:08:10,720 --> 00:08:15,030
tool especially Vicky so Vicky is our

00:08:12,430 --> 00:08:18,490
landing page and this gives a snapshot

00:08:15,030 --> 00:08:20,830
information of where we are in the

00:08:18,490 --> 00:08:23,440
release what's the schedule who are the

00:08:20,830 --> 00:08:24,970
volunteers what's the status where are

00:08:23,440 --> 00:08:26,740
the feature and design documents where

00:08:24,970 --> 00:08:31,930
is the dark plan where is the test plan

00:08:26,740 --> 00:08:34,690
and RC status etc right so JIRA i would

00:08:31,930 --> 00:08:37,570
say for any any release manager that is

00:08:34,690 --> 00:08:39,849
the most important too because this is

00:08:37,570 --> 00:08:42,160
where all your bug databases all your

00:08:39,849 --> 00:08:44,260
features and issues a--'s and you have

00:08:42,160 --> 00:08:46,780
to get comfortable with JIRA query

00:08:44,260 --> 00:08:49,720
language it's very close to sequel but

00:08:46,780 --> 00:08:51,880
not exactly and this is really the tool

00:08:49,720 --> 00:08:53,260
that you can use to find out answers to

00:08:51,880 --> 00:08:56,680
the questions that you're looking for

00:08:53,260 --> 00:08:58,780
like who moved the an issue out of this

00:08:56,680 --> 00:09:00,250
release into the future release when it

00:08:58,780 --> 00:09:04,060
should not have been all those answers

00:09:00,250 --> 00:09:06,460
you can find by querying queering jia 0

00:09:04,060 --> 00:09:08,380
it has pretty much updated date in

00:09:06,460 --> 00:09:11,710
certain range or whatever it is it is

00:09:08,380 --> 00:09:14,530
very powerful and once you set up your

00:09:11,710 --> 00:09:17,020
GF 0 queries if you keep running them

00:09:14,530 --> 00:09:19,180
multiple times and if you want to share

00:09:17,020 --> 00:09:22,180
it with others you have to save it as a

00:09:19,180 --> 00:09:24,580
named filter and then you have to share

00:09:22,180 --> 00:09:26,770
and sharing by default is not enabled on

00:09:24,580 --> 00:09:28,300
apache infra so you whoever is running

00:09:26,770 --> 00:09:30,610
the release they have to request this

00:09:28,300 --> 00:09:33,520
privilege so i have set up a bunch of

00:09:30,610 --> 00:09:36,310
filters which allows me to have a quick

00:09:33,520 --> 00:09:38,140
glance of where the releases what things

00:09:36,310 --> 00:09:40,240
who I'm whom do I need to get something

00:09:38,140 --> 00:09:43,180
done or whatever or where is the trend

00:09:40,240 --> 00:09:45,220
are are we aligned or not right so

00:09:43,180 --> 00:09:47,350
that's where I say I used to set up all

00:09:45,220 --> 00:09:49,360
my lots of queries for any release i

00:09:47,350 --> 00:09:52,930
think i have set at least 20 different

00:09:49,360 --> 00:09:56,670
JIRA filters and then you build a

00:09:52,930 --> 00:09:59,590
dashboard so dashboard is pretty much a

00:09:56,670 --> 00:10:03,100
view where you come in pretty much every

00:09:59,590 --> 00:10:05,200
day multiple times in and you create

00:10:03,100 --> 00:10:06,820
several widgets those visits are really

00:10:05,200 --> 00:10:08,680
giving answers to the questions that

00:10:06,820 --> 00:10:11,200
you're looking for and they are backed

00:10:08,680 --> 00:10:13,990
by the JIRA filters and each of those

00:10:11,200 --> 00:10:16,300
widgets is what I have have documented

00:10:13,990 --> 00:10:18,070
in the release plan what are the filters

00:10:16,300 --> 00:10:20,890
that I have been using and this is a

00:10:18,070 --> 00:10:24,610
snapshot of the release dashboard like I

00:10:20,890 --> 00:10:27,040
would encourage all of our contributors

00:10:24,610 --> 00:10:28,480
to make this release dashboard as their

00:10:27,040 --> 00:10:30,700
landing page because I have a neat

00:10:28,480 --> 00:10:31,960
widget there for all the issues assigned

00:10:30,700 --> 00:10:34,450
to them I'm not sure how many people

00:10:31,960 --> 00:10:36,070
were using it but as soon as you come to

00:10:34,450 --> 00:10:37,690
that page you will see who are what are

00:10:36,070 --> 00:10:39,160
the issues assigned to you and all the

00:10:37,690 --> 00:10:41,950
different trends how many bugs got

00:10:39,160 --> 00:10:44,140
created resolved and especially the

00:10:41,950 --> 00:10:46,570
unresolved unassigned this bucket is is

00:10:44,140 --> 00:10:48,550
always always challenging because I have

00:10:46,570 --> 00:10:53,320
to figure out whom home to a sign right

00:10:48,550 --> 00:10:55,510
so these were pretty much simple very

00:10:53,320 --> 00:10:57,760
simple mechanics on how we have we done

00:10:55,510 --> 00:11:00,190
our releases but it's not just that

00:10:57,760 --> 00:11:02,860
beyond the tool tooling the main thing

00:11:00,190 --> 00:11:05,400
is how people interact and in release

00:11:02,860 --> 00:11:07,510
management we have lot of emotions

00:11:05,400 --> 00:11:09,220
everybody interacts with

00:11:07,510 --> 00:11:11,530
somebody else they are contributing

00:11:09,220 --> 00:11:14,470
their code somebody is testing so these

00:11:11,530 --> 00:11:16,780
are the emotions that really builds a

00:11:14,470 --> 00:11:19,750
community that is really something that

00:11:16,780 --> 00:11:21,460
we all need to strive that that we

00:11:19,750 --> 00:11:22,660
encourage that everybody has happen how

00:11:21,460 --> 00:11:25,390
do we do that those are the challenges

00:11:22,660 --> 00:11:26,800
that we have to figure out so I i was

00:11:25,390 --> 00:11:29,890
thinking through this and I thought

00:11:26,800 --> 00:11:31,660
harsh how should I depict this so the

00:11:29,890 --> 00:11:33,730
way I sorted it out was during the

00:11:31,660 --> 00:11:37,630
beginning of release everybody is happy

00:11:33,730 --> 00:11:40,060
everybody is drinking coffee and all the

00:11:37,630 --> 00:11:42,070
feature contributors are happy that they

00:11:40,060 --> 00:11:43,090
have good contribution they're going to

00:11:42,070 --> 00:11:44,830
make they'll be proud of their

00:11:43,090 --> 00:11:46,750
contribution and release manager is

00:11:44,830 --> 00:11:48,580
happy setting up all those shiny

00:11:46,750 --> 00:11:51,130
dashboard widgets that I'm going to make

00:11:48,580 --> 00:11:55,420
it the perfect release first rc GA

00:11:51,130 --> 00:11:57,760
that's it so so that's how it starts as

00:11:55,420 --> 00:12:01,510
we approach feature freeze this is there

00:11:57,760 --> 00:12:03,400
all the tension builds up because people

00:12:01,510 --> 00:12:06,520
are anxious whether their feature would

00:12:03,400 --> 00:12:09,490
made will make it to the to the feature

00:12:06,520 --> 00:12:11,620
branch in time or not and and like for

00:12:09,490 --> 00:12:13,750
example they have been testing in their

00:12:11,620 --> 00:12:16,330
release branch for a long time it's time

00:12:13,750 --> 00:12:18,250
for them to merge it into master and

00:12:16,330 --> 00:12:19,960
they pull in from master and turns out

00:12:18,250 --> 00:12:22,060
somebody else has changed something and

00:12:19,960 --> 00:12:24,220
now they have to figure out what broke

00:12:22,060 --> 00:12:26,800
and then then fix it up so this becomes

00:12:24,220 --> 00:12:28,510
really a crucial time for everybody and

00:12:26,800 --> 00:12:30,460
for release manager also because he's

00:12:28,510 --> 00:12:33,270
seeing all those issues coming in and he

00:12:30,460 --> 00:12:36,010
has to he has to stabilize them right so

00:12:33,270 --> 00:12:38,740
after the feature free states some guys

00:12:36,010 --> 00:12:40,390
are very happy relieved that their

00:12:38,740 --> 00:12:42,670
feature maiden and some might be

00:12:40,390 --> 00:12:44,770
disappointed and sad the future did not

00:12:42,670 --> 00:12:48,280
make in a will have to come for the next

00:12:44,770 --> 00:12:50,110
release from feature freeze until code

00:12:48,280 --> 00:12:51,970
freeze we are still drinking a lot of

00:12:50,110 --> 00:12:54,160
coffee maybe even more because a lot of

00:12:51,970 --> 00:12:56,850
issues that have that have come in and

00:12:54,160 --> 00:12:59,410
people have people have to fix them and

00:12:56,850 --> 00:13:01,300
it's it's the time they figure out hey

00:12:59,410 --> 00:13:03,640
during this integration I did not expect

00:13:01,300 --> 00:13:05,470
this or eight this scenario I never

00:13:03,640 --> 00:13:07,840
thought through it maybe I have to

00:13:05,470 --> 00:13:09,850
refactor my coder or make major changes

00:13:07,840 --> 00:13:11,740
and that's going to may affect some

00:13:09,850 --> 00:13:14,770
other areas so this is this is where we

00:13:11,740 --> 00:13:16,660
have lot of activities so once we are

00:13:14,770 --> 00:13:18,190
closer to release candidate and I think

00:13:16,660 --> 00:13:21,839
this is where we have some challenge

00:13:18,190 --> 00:13:24,579
what I feel was there was an apathy

00:13:21,839 --> 00:13:27,790
everybody or at least a lot of folks

00:13:24,579 --> 00:13:30,279
were checked out and they're happily

00:13:27,790 --> 00:13:33,009
left the building or whatever drinking

00:13:30,279 --> 00:13:34,990
good coffee rather than rather than the

00:13:33,009 --> 00:13:36,730
common coffee and this is what the

00:13:34,990 --> 00:13:39,130
release manager was left with he is like

00:13:36,730 --> 00:13:40,930
a big pot all by himself drinking coffee

00:13:39,130 --> 00:13:43,029
making sure all the all the RC

00:13:40,930 --> 00:13:44,829
candidates are going out right and this

00:13:43,029 --> 00:13:47,529
is what he really feels what happened

00:13:44,829 --> 00:13:49,269
where are all these folks why did we not

00:13:47,529 --> 00:13:52,120
test earlier why are these things coming

00:13:49,269 --> 00:13:54,940
during our see we had a whole big period

00:13:52,120 --> 00:13:58,360
of stabilization and many of those

00:13:54,940 --> 00:14:00,699
issues are not coming up and we get

00:13:58,360 --> 00:14:03,670
people putting our seas multiple times

00:14:00,699 --> 00:14:06,190
if you check one time or maybe two times

00:14:03,670 --> 00:14:10,060
you can probably avoid multiple race

00:14:06,190 --> 00:14:12,850
pins and then with every every minus one

00:14:10,060 --> 00:14:15,130
what happens I my observation was as

00:14:12,850 --> 00:14:18,759
soon as a release candidate gets minus

00:14:15,130 --> 00:14:20,230
one people avoid that that candidate and

00:14:18,759 --> 00:14:22,899
then you just have to wait for another

00:14:20,230 --> 00:14:26,170
one which causes multiple response and

00:14:22,899 --> 00:14:28,870
it felt sometimes like am I the only one

00:14:26,170 --> 00:14:31,300
who wants to release so so those are the

00:14:28,870 --> 00:14:33,339
things but eventually there are

00:14:31,300 --> 00:14:35,529
obviously some technical challenges as

00:14:33,339 --> 00:14:38,980
well as behavioral but at the end of the

00:14:35,529 --> 00:14:41,350
day we all pull through it and we are

00:14:38,980 --> 00:14:43,750
able to release and people offer release

00:14:41,350 --> 00:14:49,180
manager free drinks then thank you but I

00:14:43,750 --> 00:14:52,060
don't drink alright so we talked about

00:14:49,180 --> 00:14:55,089
sort of all the emotions that that went

00:14:52,060 --> 00:14:57,790
through in running these releases I also

00:14:55,089 --> 00:14:59,800
wanted to look back and ponder over the

00:14:57,790 --> 00:15:03,010
two releases that I was responsible for

00:14:59,800 --> 00:15:05,050
and see and compare and contrast and and

00:15:03,010 --> 00:15:08,920
figure out what can we take away from

00:15:05,050 --> 00:15:10,870
that all right so a cs4 door to this was

00:15:08,920 --> 00:15:14,529
the biggest release that we had we had

00:15:10,870 --> 00:15:17,680
done I did a lot of JIRA get and JIRA

00:15:14,529 --> 00:15:19,810
analysis and with a cs4 or two we had

00:15:17,680 --> 00:15:22,509
like almost 5000 commits and part of

00:15:19,810 --> 00:15:24,519
that was for that one some of the

00:15:22,509 --> 00:15:26,259
features did not make 24 dot one by

00:15:24,519 --> 00:15:28,329
feature freeze and they rolled into four

00:15:26,259 --> 00:15:32,019
or two and forward to become became a

00:15:28,329 --> 00:15:33,730
pretty big release and we changed almost

00:15:32,019 --> 00:15:34,899
six hundred ninety thousand lines of

00:15:33,730 --> 00:15:37,119
code which is

00:15:34,899 --> 00:15:38,819
really huge and if you look at all the

00:15:37,119 --> 00:15:42,249
Berks file and fixed they were like

00:15:38,819 --> 00:15:44,319
2,200 bucks across all of those features

00:15:42,249 --> 00:15:46,329
plus from prior releases that that we

00:15:44,319 --> 00:15:48,369
had fixed and the number of test cases

00:15:46,329 --> 00:15:52,119
that were added and we were able to

00:15:48,369 --> 00:15:54,670
manage it in six RC s4 dot 3 I was

00:15:52,119 --> 00:15:57,100
expecting given my experience with 42

00:15:54,670 --> 00:15:58,839
which was a huge release I was very

00:15:57,100 --> 00:16:03,339
confident it will go out but it took a

00:15:58,839 --> 00:16:05,350
long long time and it was almost 16 the

00:16:03,339 --> 00:16:08,740
the size of the prior release or let's

00:16:05,350 --> 00:16:10,959
say one fifth or something all right so

00:16:08,740 --> 00:16:13,179
this is a drill down so if I look at

00:16:10,959 --> 00:16:14,649
this chart here this is the forward to

00:16:13,179 --> 00:16:17,529
future development forward to had

00:16:14,649 --> 00:16:19,869
actually a longer a development cycle of

00:16:17,529 --> 00:16:22,420
five months we had actually delayed on

00:16:19,869 --> 00:16:24,069
four dot one we had extended it and as a

00:16:22,420 --> 00:16:26,079
result master was opened for a longer

00:16:24,069 --> 00:16:28,480
period so we had like five months of

00:16:26,079 --> 00:16:31,600
development time but you can see the

00:16:28,480 --> 00:16:35,139
test stabilization rc's we had lots of

00:16:31,600 --> 00:16:36,249
issues that lots of comets and issues in

00:16:35,139 --> 00:16:38,980
the next graph that I will talk about

00:16:36,249 --> 00:16:42,129
but we were still able to manage if we

00:16:38,980 --> 00:16:44,860
look at acs for dot 3 the feature

00:16:42,129 --> 00:16:47,110
development was four months and the test

00:16:44,860 --> 00:16:49,209
stabilization RC cycles were very long

00:16:47,110 --> 00:16:52,779
specially the stabilisation cycle my

00:16:49,209 --> 00:16:55,029
original plan for the RC was January

00:16:52,779 --> 00:16:57,009
ninth and we took like january twenty

00:16:55,029 --> 00:16:59,110
seconds or two weeks delayed but then

00:16:57,009 --> 00:17:02,110
our seas really really took us a long

00:16:59,110 --> 00:17:03,790
long time so if we go by our four months

00:17:02,110 --> 00:17:05,620
release cadence it should have released

00:17:03,790 --> 00:17:09,789
by end of january that was the plan but

00:17:05,620 --> 00:17:12,819
we relays like a mosh 25th so almost two

00:17:09,789 --> 00:17:14,350
months later so instead of a six instead

00:17:12,819 --> 00:17:17,260
of a four-month release cadence we

00:17:14,350 --> 00:17:19,779
really took six months right so one and

00:17:17,260 --> 00:17:21,100
and the other thing which a witch's has

00:17:19,779 --> 00:17:23,079
been bothering me for quite some time

00:17:21,100 --> 00:17:24,579
and I wasn't sure how to put it up but

00:17:23,079 --> 00:17:27,579
it's it's a fact and that's why I'm

00:17:24,579 --> 00:17:31,240
pointing it out that when I look at the

00:17:27,579 --> 00:17:33,190
issues created we have a lot of I I've

00:17:31,240 --> 00:17:35,020
work for citrix but i am i'm going to

00:17:33,190 --> 00:17:38,169
wear both hats in this in this

00:17:35,020 --> 00:17:41,470
presentation when I look at it I can see

00:17:38,169 --> 00:17:43,870
that a lot of QA activity is primarily

00:17:41,470 --> 00:17:45,970
being done by Citrix and Citrix wearing

00:17:43,870 --> 00:17:47,770
the Citrix hat is a good citizen and

00:17:45,970 --> 00:17:48,730
wants to contribute in every way

00:17:47,770 --> 00:17:51,760
possible

00:17:48,730 --> 00:17:54,880
but we have to reduce this dependency

00:17:51,760 --> 00:17:57,429
because that means Citrix QA schedule

00:17:54,880 --> 00:18:00,190
will start impacting Apache releases and

00:17:57,429 --> 00:18:04,780
if if i look at it pretty much a

00:18:00,190 --> 00:18:07,179
community non citrix community the

00:18:04,780 --> 00:18:09,100
issues file were much less and they were

00:18:07,179 --> 00:18:11,140
also filed towards later in the cycle

00:18:09,100 --> 00:18:14,320
right that means the other folks are

00:18:11,140 --> 00:18:16,030
getting engaged in in testing later in

00:18:14,320 --> 00:18:19,590
the cycle and if i look at the test

00:18:16,030 --> 00:18:23,290
results and the test cases and plants

00:18:19,590 --> 00:18:26,440
they're also a lot of those test cases

00:18:23,290 --> 00:18:28,419
are coming from citrix and and it's part

00:18:26,440 --> 00:18:30,070
of it is obvious also because a lot of

00:18:28,419 --> 00:18:32,470
features were also getting contributed

00:18:30,070 --> 00:18:34,830
but overall I think we have we have a

00:18:32,470 --> 00:18:41,799
challenge that we need to overcome and

00:18:34,830 --> 00:18:48,190
and so how do we go about it and what

00:18:41,799 --> 00:18:50,970
happened here that's bummer why is this

00:18:48,190 --> 00:18:50,970
not showing up here

00:18:56,940 --> 00:19:03,760
ok so we took five months since Ford or

00:19:01,480 --> 00:19:06,490
three feature phase 2 GA with over two

00:19:03,760 --> 00:19:08,169
months in RC and I talked about we have

00:19:06,490 --> 00:19:11,740
four month release cadence but we took

00:19:08,169 --> 00:19:13,419
six and if you just look at it whatever

00:19:11,740 --> 00:19:15,490
it is right it seems like we need a

00:19:13,419 --> 00:19:18,280
longer QA cycle there were issues that

00:19:15,490 --> 00:19:21,429
we've encountered during our see during

00:19:18,280 --> 00:19:38,770
our seas as well as well as earlier why

00:19:21,429 --> 00:19:43,539
is it well I did wow this is weird it's

00:19:38,770 --> 00:19:45,610
coming in random order alright guys I

00:19:43,539 --> 00:19:47,500
have to just just give me a moment I

00:19:45,610 --> 00:19:49,980
think I have to turn off the smart

00:19:47,500 --> 00:19:49,980
graphics

00:20:00,490 --> 00:20:05,250
okay I guess that's that's the best way

00:20:02,800 --> 00:20:05,250
to go about it

00:20:16,950 --> 00:20:27,260
okay so now we have over dependency on

00:20:22,080 --> 00:20:30,540
citrix for the QA now this a citrix QA

00:20:27,260 --> 00:20:32,490
my observation was wearing the citrix

00:20:30,540 --> 00:20:35,880
hat that they have been pretty much busy

00:20:32,490 --> 00:20:38,670
until the GA of current release and as a

00:20:35,880 --> 00:20:40,860
result they are not ready to test by

00:20:38,670 --> 00:20:44,490
code freeze so what that means for

00:20:40,860 --> 00:20:47,190
example for for dot for because the AC

00:20:44,490 --> 00:20:49,110
s4 dot 3 was delayed as well as the

00:20:47,190 --> 00:20:51,540
Citrix cloud platform release came out

00:20:49,110 --> 00:20:52,950
towards the end of March and we had

00:20:51,540 --> 00:20:55,760
already achieved feature freeze because

00:20:52,950 --> 00:20:59,100
of obviously the things were available

00:20:55,760 --> 00:21:01,350
but Citrix QA only got started on the

00:20:59,100 --> 00:21:03,150
release the first week of April that

00:21:01,350 --> 00:21:06,720
means only let's say like two months or

00:21:03,150 --> 00:21:09,480
so and we have our our code freeze

00:21:06,720 --> 00:21:15,090
coming next week so I have so that that

00:21:09,480 --> 00:21:20,310
is going to be our challenge alright sir

00:21:15,090 --> 00:21:22,470
to the next slide so what can we really

00:21:20,310 --> 00:21:24,870
do about it I had a neat animation but I

00:21:22,470 --> 00:21:28,110
guess we'll we'll lower this so we have

00:21:24,870 --> 00:21:30,120
dependency on citrix QA that is not

00:21:28,110 --> 00:21:33,180
changing in short term so we have we

00:21:30,120 --> 00:21:35,630
have to somehow adapt and the only

00:21:33,180 --> 00:21:37,800
solution that we can we can

00:21:35,630 --> 00:21:40,350
realistically do is increase our

00:21:37,800 --> 00:21:43,020
automation and everybody knows with

00:21:40,350 --> 00:21:45,390
CloudStack such a big project manual

00:21:43,020 --> 00:21:48,450
testing is definitely not enough and we

00:21:45,390 --> 00:21:51,420
have to invest on automation and amogh

00:21:48,450 --> 00:21:54,210
had been a presentation on on basically

00:21:51,420 --> 00:21:57,960
replicable test design so we we want to

00:21:54,210 --> 00:22:01,290
enable everybody in community to be able

00:21:57,960 --> 00:22:03,030
to replicate the test test design and

00:22:01,290 --> 00:22:05,700
replicate the test infrastructure design

00:22:03,030 --> 00:22:09,060
into their environments to enable them

00:22:05,700 --> 00:22:12,660
to test in in the in their setup and we

00:22:09,060 --> 00:22:14,460
also need to pretty much make sure that

00:22:12,660 --> 00:22:17,100
it's easy to add automation so that's

00:22:14,460 --> 00:22:20,430
where i think a lot of our focus has to

00:22:17,100 --> 00:22:22,380
go in and but automation is not

00:22:20,430 --> 00:22:24,120
something that you can flip a switch

00:22:22,380 --> 00:22:26,370
that it would happen right away it will

00:22:24,120 --> 00:22:28,590
take us time right so we have to take a

00:22:26,370 --> 00:22:30,720
pragmatic approach and figure out what

00:22:28,590 --> 00:22:32,700
can we do given the limitations we have

00:22:30,720 --> 00:22:36,120
but still march towards adding lot more

00:22:32,700 --> 00:22:39,390
automation so if we go by this what this

00:22:36,120 --> 00:22:40,890
means is that Q wave should would mean

00:22:39,390 --> 00:22:43,140
additional time in order to come up with

00:22:40,890 --> 00:22:45,000
test plans for the features that have

00:22:43,140 --> 00:22:46,710
been contributed and figure out what's

00:22:45,000 --> 00:22:48,570
the executions set of that lab

00:22:46,710 --> 00:22:50,549
environment that means they will not be

00:22:48,570 --> 00:22:52,559
ready by that time so they need

00:22:50,549 --> 00:22:56,730
additional time to go through and figure

00:22:52,559 --> 00:22:59,340
out and what I was thinking was given

00:22:56,730 --> 00:23:01,080
that it's it's that maybe we push out

00:22:59,340 --> 00:23:03,030
feature freeze but the challenge with

00:23:01,080 --> 00:23:05,429
pushing out feature freeze is that the

00:23:03,030 --> 00:23:07,409
master branch remains open for a longer

00:23:05,429 --> 00:23:09,809
period if it remains open for a longer

00:23:07,409 --> 00:23:12,419
period that means more features could

00:23:09,809 --> 00:23:16,230
come in and that would mean more testing

00:23:12,419 --> 00:23:18,750
needed more change and more bugs so how

00:23:16,230 --> 00:23:21,360
do we address that so one thought that

00:23:18,750 --> 00:23:25,470
came to my mind was just like we have a

00:23:21,360 --> 00:23:28,559
very hard feature freeze date we need to

00:23:25,470 --> 00:23:30,809
have a heart a pretty much same hard

00:23:28,559 --> 00:23:33,000
feature proposal date and that proposal

00:23:30,809 --> 00:23:34,710
date typically the way the chip had set

00:23:33,000 --> 00:23:38,190
out and that's what I had followed was

00:23:34,710 --> 00:23:40,020
four weeks prior to feature freeze used

00:23:38,190 --> 00:23:41,340
to be our feature proposal and we

00:23:40,020 --> 00:23:43,440
definitely don't want more features to

00:23:41,340 --> 00:23:46,260
come in right so left shift the feature

00:23:43,440 --> 00:23:48,450
proposal date move it let's say we push

00:23:46,260 --> 00:23:51,419
out the feature freeze that means the

00:23:48,450 --> 00:23:53,429
release is expanding but left shift the

00:23:51,419 --> 00:23:56,970
feature proposal so that we still have

00:23:53,429 --> 00:24:00,090
the limited scope and we we test those

00:23:56,970 --> 00:24:01,799
features in initial quality obviously we

00:24:00,090 --> 00:24:03,539
have we have covered that as well that

00:24:01,799 --> 00:24:07,049
needs to be good but it allows us to

00:24:03,539 --> 00:24:09,030
adapt in our plan and we did not really

00:24:07,049 --> 00:24:10,890
meet the sixth four-month release

00:24:09,030 --> 00:24:12,480
cadence right so we have to figure out

00:24:10,890 --> 00:24:15,419
what what can we do about it are we

00:24:12,480 --> 00:24:18,120
really able to achieve that or we adapt

00:24:15,419 --> 00:24:20,640
and see and we come back and go for a

00:24:18,120 --> 00:24:28,400
four monthly month or a shorter cycle

00:24:20,640 --> 00:24:30,590
when we have sufficient automation okay

00:24:28,400 --> 00:24:33,140
and on for dot 3 we had nine are seized

00:24:30,590 --> 00:24:36,140
and when I looked at our seas and did an

00:24:33,140 --> 00:24:38,000
RC analysis on an average only four

00:24:36,140 --> 00:24:40,580
people participated in our seas that's

00:24:38,000 --> 00:24:44,570
actually very limited it's possible that

00:24:40,580 --> 00:24:47,660
other people were / were were engaged

00:24:44,570 --> 00:24:50,030
and they were testing but they did not

00:24:47,660 --> 00:24:51,860
work but we don't know that right so

00:24:50,030 --> 00:24:54,590
that's still very limited engagement and

00:24:51,860 --> 00:24:58,220
as I called out earlier once an RC gets

00:24:54,590 --> 00:25:00,620
minus one it's pretty much nobody wants

00:24:58,220 --> 00:25:02,360
to touch it and as a release manager you

00:25:00,620 --> 00:25:04,400
have to pretty much free spin and that

00:25:02,360 --> 00:25:07,790
that pretty much delays delays the

00:25:04,400 --> 00:25:09,530
schedule and after a few rc's engagement

00:25:07,790 --> 00:25:12,140
really drops and that's what i was

00:25:09,530 --> 00:25:14,510
seeing after i thinka first to RC is

00:25:12,140 --> 00:25:17,000
generally even for 42 there was not much

00:25:14,510 --> 00:25:18,620
engagement RC 3 4 people start engaging

00:25:17,000 --> 00:25:21,770
they think okay it's getting stable

00:25:18,620 --> 00:25:24,560
let's let's get in now and after RC 5 or

00:25:21,770 --> 00:25:26,450
6 pretty much it's done deal people have

00:25:24,560 --> 00:25:28,940
written it off so that's that's the

00:25:26,450 --> 00:25:31,700
challenge we have to handle and for that

00:25:28,940 --> 00:25:34,360
we need engagement earlier in test cycle

00:25:31,700 --> 00:25:37,280
and what I mean by that is not just

00:25:34,360 --> 00:25:38,600
manual testing we have to sign up and we

00:25:37,280 --> 00:25:40,810
have to say hey this is the area that

00:25:38,600 --> 00:25:43,250
I'm going to test and i am going to

00:25:40,810 --> 00:25:45,170
publish the test results for this

00:25:43,250 --> 00:25:48,590
particular component that way we have a

00:25:45,170 --> 00:25:49,880
formal formal sign off right and we have

00:25:48,590 --> 00:25:53,840
to obviously increase automation

00:25:49,880 --> 00:25:56,180
coverage one thought that came in and

00:25:53,840 --> 00:25:58,280
actually David nearly he had started a

00:25:56,180 --> 00:26:03,320
thread on release cadence and he had

00:25:58,280 --> 00:26:06,290
called out that that maybe we vote based

00:26:03,320 --> 00:26:08,630
on the automation test results that will

00:26:06,290 --> 00:26:11,480
force us to increase our automation

00:26:08,630 --> 00:26:13,040
coverage otherwise it's like yeah we did

00:26:11,480 --> 00:26:15,440
not cover it and it keeps coming and

00:26:13,040 --> 00:26:23,960
keeps coming and then we keep keep

00:26:15,440 --> 00:26:25,550
extending the RC cycles right so how do

00:26:23,960 --> 00:26:27,940
we go about it I hope those going to

00:26:25,550 --> 00:26:27,940
work now

00:26:30,820 --> 00:26:35,789
okay so we have to increase automation

00:26:33,580 --> 00:26:40,360
coverage so we need lots of sponsors

00:26:35,789 --> 00:26:42,909
sponsors could be now with that also

00:26:40,360 --> 00:26:44,799
comes barrier to a barrier to entry

00:26:42,909 --> 00:26:47,460
because the way we are set up right now

00:26:44,799 --> 00:26:49,360
and as a community is it's harder to add

00:26:47,460 --> 00:26:51,220
automation and that's where our most

00:26:49,360 --> 00:26:53,679
presentation is something that we will

00:26:51,220 --> 00:26:55,690
carry forward is a replicable test

00:26:53,679 --> 00:26:57,309
infrastructure design which anybody can

00:26:55,690 --> 00:27:01,000
replicate in their environment like Mike

00:26:57,309 --> 00:27:03,100
you could take it to SolidFire and Dan

00:27:01,000 --> 00:27:05,169
you could take it to Schubert and and

00:27:03,100 --> 00:27:07,570
worked with Ilya Ilya maybe we should we

00:27:05,169 --> 00:27:11,049
should connect on that as well and add

00:27:07,570 --> 00:27:13,240
add more automation which means making

00:27:11,049 --> 00:27:16,000
it simpler to add automation there are a

00:27:13,240 --> 00:27:17,620
few presentations that one in this

00:27:16,000 --> 00:27:21,370
collab but this is something we continue

00:27:17,620 --> 00:27:25,450
have to work on and if you care or

00:27:21,370 --> 00:27:27,220
benefit from a specific feature then you

00:27:25,450 --> 00:27:29,470
should actually help out it's not just

00:27:27,220 --> 00:27:30,879
calling out hate this this broke now

00:27:29,470 --> 00:27:33,690
you've got to fix this otherwise you

00:27:30,879 --> 00:27:38,080
cannot ship this RC or ship this release

00:27:33,690 --> 00:27:40,330
that is although everybody wants a good

00:27:38,080 --> 00:27:42,250
quality release but we won that feedback

00:27:40,330 --> 00:27:45,370
sooner and if you are benefiting in any

00:27:42,250 --> 00:27:48,730
way from CloudStack it's sort of is the

00:27:45,370 --> 00:27:50,889
onus is on on you to add automation

00:27:48,730 --> 00:27:53,889
coverage to it so I would say with our

00:27:50,889 --> 00:27:55,419
seas if someone files a blocker defect

00:27:53,889 --> 00:27:57,279
then either they have to come up with

00:27:55,419 --> 00:28:00,070
automation or they have to work in

00:27:57,279 --> 00:28:01,570
community to add automation for that

00:28:00,070 --> 00:28:02,950
particular scenario if it is missing

00:28:01,570 --> 00:28:06,039
otherwise you will always have this

00:28:02,950 --> 00:28:08,080
problem of regressions that we didn't

00:28:06,039 --> 00:28:10,059
know about and we catch them later right

00:28:08,080 --> 00:28:12,429
there's there's no way we can scale

00:28:10,059 --> 00:28:14,049
right testing participation we have to

00:28:12,429 --> 00:28:16,899
definitely increase and this has to be

00:28:14,049 --> 00:28:19,120
more on a formal basis like hey I'm

00:28:16,899 --> 00:28:21,490
going to sign up for testing this area

00:28:19,120 --> 00:28:24,279
otherwise it's ad hoc the feedback comes

00:28:21,490 --> 00:28:27,039
and comes or does not come and there is

00:28:24,279 --> 00:28:29,049
no no loop back and that means then we

00:28:27,039 --> 00:28:32,620
really don't know who's testing what so

00:28:29,049 --> 00:28:34,779
once we have a lot more sign up like

00:28:32,620 --> 00:28:38,259
that I think we will have a much more

00:28:34,779 --> 00:28:40,090
efficient cycle code quality increased

00:28:38,259 --> 00:28:41,559
code quality that we definitely have to

00:28:40,090 --> 00:28:43,779
work on and with the branch merge

00:28:41,559 --> 00:28:44,020
expectation that we work done i think in

00:28:43,779 --> 00:28:45,910
four

00:28:44,020 --> 00:28:47,290
do I think that has improved but most of

00:28:45,910 --> 00:28:48,760
the challenges we have seen have not

00:28:47,290 --> 00:28:50,590
been in new features those are

00:28:48,760 --> 00:28:54,220
regressions and this those can be caught

00:28:50,590 --> 00:28:56,620
by only by automation and then release

00:28:54,220 --> 00:28:59,230
management thanks ilias on supporting me

00:28:56,620 --> 00:29:02,170
this is ref definitely not a one-person

00:28:59,230 --> 00:29:04,480
task there are we need lot more people

00:29:02,170 --> 00:29:06,670
we need more volunteers to help out and

00:29:04,480 --> 00:29:10,180
then release candidates we need to

00:29:06,670 --> 00:29:12,340
increase participation and my notes to

00:29:10,180 --> 00:29:14,650
future release manager you are not going

00:29:12,340 --> 00:29:18,340
to win popularity contest you have to

00:29:14,650 --> 00:29:20,170
learn to say no because it's possible

00:29:18,340 --> 00:29:22,360
some feature is not going to make it

00:29:20,170 --> 00:29:25,600
however important it is we have to some

00:29:22,360 --> 00:29:28,750
we have to say no likewise if someone

00:29:25,600 --> 00:29:31,300
has an issue but if it's in his in his

00:29:28,750 --> 00:29:33,910
or her siloed environment and does not

00:29:31,300 --> 00:29:35,890
affect rest of the CloudStack code there

00:29:33,910 --> 00:29:37,990
are folks waiting for the release so you

00:29:35,890 --> 00:29:39,280
have to say no to them as well and it

00:29:37,990 --> 00:29:41,590
has to come in the maintenance release

00:29:39,280 --> 00:29:43,270
or the next release on otherwise we

00:29:41,590 --> 00:29:46,630
can't keep ki priests pinning our seas

00:29:43,270 --> 00:29:48,340
it's a full-time job don't take

00:29:46,630 --> 00:29:52,000
criticism personally because obviously

00:29:48,340 --> 00:29:53,380
it's not directed at at you someone is

00:29:52,000 --> 00:29:55,570
simply frustrated and that's where we

00:29:53,380 --> 00:29:59,410
need help on the documentation side as

00:29:55,570 --> 00:30:02,410
well and with Sebastian's move to rst I

00:29:59,410 --> 00:30:04,990
think we we have enabled or lowered the

00:30:02,410 --> 00:30:06,820
barrier to add documentation so that's

00:30:04,990 --> 00:30:09,910
definitely a good achievement out of out

00:30:06,820 --> 00:30:12,550
of 43 and as a release manager you have

00:30:09,910 --> 00:30:14,470
to recruit volunteers early on and don't

00:30:12,550 --> 00:30:16,210
assume folks that were volunteering in

00:30:14,470 --> 00:30:18,430
the prior release will continue to do so

00:30:16,210 --> 00:30:21,340
that was something I realized during our

00:30:18,430 --> 00:30:23,560
see I had an expectation that the prior

00:30:21,340 --> 00:30:26,650
person who was publishing the test

00:30:23,560 --> 00:30:28,480
results would do so but I did not enlist

00:30:26,650 --> 00:30:31,060
again so that is something we need to do

00:30:28,480 --> 00:30:33,670
and everyone is volunteering their time

00:30:31,060 --> 00:30:38,770
so you you have to account for that in

00:30:33,670 --> 00:30:40,480
your release cycle and and maybe learn

00:30:38,770 --> 00:30:45,610
meditation that's going to help you with

00:30:40,480 --> 00:30:50,610
multiple our seas so that's it and these

00:30:45,610 --> 00:30:50,610
are the credits for images any questions

00:30:50,750 --> 00:30:56,850
so hold on for is going to hold please

00:30:54,870 --> 00:30:59,640
next week right that's correct that's

00:30:56,850 --> 00:31:04,470
that's the that's the official code free

00:30:59,640 --> 00:31:07,500
drink okay and then release after that

00:31:04,470 --> 00:31:11,070
how long I'll go I'll go back to one of

00:31:07,500 --> 00:31:13,530
the graph to do that six months so I

00:31:11,070 --> 00:31:16,140
said this is this is a photo that I want

00:31:13,530 --> 00:31:17,820
to just quickly share effect of ours is

00:31:16,140 --> 00:31:19,530
this is this is my office when I was

00:31:17,820 --> 00:31:23,520
doing all the different our season I'm

00:31:19,530 --> 00:31:30,150
oak took a took a snapshot these are all

00:31:23,520 --> 00:31:33,980
the cups for different our seas okay now

00:31:30,150 --> 00:31:33,980
coming back to that particular slide

00:31:34,670 --> 00:31:44,600
okay

00:31:37,340 --> 00:31:48,950
so this is this is really yeah yes 0 for

00:31:44,600 --> 00:31:51,290
3 how many months after the so so this

00:31:48,950 --> 00:31:53,540
was the future freeze each other this is

00:31:51,290 --> 00:31:55,640
the code freeze and this is the

00:31:53,540 --> 00:32:01,790
stabilization period right so code

00:31:55,640 --> 00:32:04,520
freeze is that is on for 18 that yeah I

00:32:01,790 --> 00:32:06,890
think so I think so it's for 18 which is

00:32:04,520 --> 00:32:08,750
end of end of next week that's where we

00:32:06,890 --> 00:32:11,180
will have we will have some some

00:32:08,750 --> 00:32:13,970
challenges but unlike feature freeze

00:32:11,180 --> 00:32:17,270
it's not really a hard date we we

00:32:13,970 --> 00:32:18,770
obviously want s as much fixes to be in

00:32:17,270 --> 00:32:21,020
right unless they are going to

00:32:18,770 --> 00:32:23,150
destabilize so we we have we have to

00:32:21,020 --> 00:32:28,250
some some of the color as we're looking

00:32:23,150 --> 00:32:31,400
at doing something but what order I

00:32:28,250 --> 00:32:33,410
which so so then you are not then you

00:32:31,400 --> 00:32:35,570
don't care of you are not bothered about

00:32:33,410 --> 00:32:37,280
code phrase here for bothered about the

00:32:35,570 --> 00:32:40,370
feature free steaks each of these and

00:32:37,280 --> 00:32:43,190
then the proposals that's correct so

00:32:40,370 --> 00:32:49,550
feature freeze date for for dot five is

00:32:43,190 --> 00:32:52,430
going to be yeah it's going to be 687 18

00:32:49,550 --> 00:32:54,830
jul I 18th and if we go by feature

00:32:52,430 --> 00:32:56,990
proposal of what we have right now which

00:32:54,830 --> 00:33:05,560
is one month prior to that that's going

00:32:56,990 --> 00:33:05,560
to be jun 18 right ok any other

00:33:06,759 --> 00:33:13,479
so the wiki page the release wiki page

00:33:10,359 --> 00:33:14,979
has the list of dates and the dashboard

00:33:13,479 --> 00:33:18,039
is talking about it's pretty much what

00:33:14,979 --> 00:33:20,679
is happening in the release the wiki

00:33:18,039 --> 00:33:23,349
page is a landing page it shows you what

00:33:20,679 --> 00:33:25,119
what is in the release where are all the

00:33:23,349 --> 00:33:27,339
features and docks where as the design

00:33:25,119 --> 00:33:30,309
darts and all those things so until we

00:33:27,339 --> 00:33:33,179
get into I mean how do you distribute

00:33:30,309 --> 00:33:39,369
because we have a customer requirement

00:33:33,179 --> 00:33:42,969
dispute so your your plugin is based on

00:33:39,369 --> 00:33:45,459
before three okay and then we need to

00:33:42,969 --> 00:33:49,149
you know customer department will start

00:33:45,459 --> 00:33:50,440
I think we're ready jus okay so we try

00:33:49,149 --> 00:33:53,889
to figure how do we package it is not

00:33:50,440 --> 00:33:56,739
distributed to the customer but if isn't

00:33:53,889 --> 00:33:58,209
as your plugin already contributed to

00:33:56,739 --> 00:34:08,289
clouds though it's not that's what I'm

00:33:58,209 --> 00:34:14,529
saying cause that'sthat's we had ok ok

00:34:08,289 --> 00:34:16,480
sir wrong kids club so then how do you

00:34:14,529 --> 00:34:18,099
deploy it in your customer so that's why

00:34:16,480 --> 00:34:20,109
we're halfway to the best paper is

00:34:18,099 --> 00:34:23,230
distributed to sell so if it is based on

00:34:20,109 --> 00:34:25,269
434 dot free is already out right so all

00:34:23,230 --> 00:34:27,879
all your plug-in dependencies and if

00:34:25,269 --> 00:34:29,710
it's been tested you can pretty much sum

00:34:27,879 --> 00:34:32,950
over is using it has to download

00:34:29,710 --> 00:34:35,740
CloudStack 41st get it installed and

00:34:32,950 --> 00:34:39,299
then download you're plugging jar put it

00:34:35,740 --> 00:34:41,500
in its folders and I think we have

00:34:39,299 --> 00:34:43,599
meaning some changes to configuration

00:34:41,500 --> 00:34:46,059
files and that's that's it but that's

00:34:43,599 --> 00:34:48,190
all you ate it up I mean we do have some

00:34:46,059 --> 00:34:51,129
a few files that have had to be changed

00:34:48,190 --> 00:34:53,019
the core but has it been contributed to

00:34:51,129 --> 00:34:54,639
more here okay done and then you have a

00:34:53,019 --> 00:34:56,559
challenge yeah that's what we are given

00:34:54,639 --> 00:34:58,740
me now so are the other people who are

00:34:56,559 --> 00:35:02,410
doing a similar thing there must be

00:34:58,740 --> 00:35:05,530
so but if if you have a dependency in

00:35:02,410 --> 00:35:07,510
Maine CloudStack code then he needs to

00:35:05,530 --> 00:35:08,619
be contributed into that is otherwise

00:35:07,510 --> 00:35:11,140
it's not going to make it so the

00:35:08,619 --> 00:35:14,320
challenge I see yours in your case would

00:35:11,140 --> 00:35:16,300
be if the dependency is in cloudstack

00:35:14,320 --> 00:35:18,280
you have a dependency on cloud second

00:35:16,300 --> 00:35:20,500
you register in CloudStack code base

00:35:18,280 --> 00:35:21,609
doesn't know about your plugin then we

00:35:20,500 --> 00:35:24,940
have to figure out figure out a

00:35:21,609 --> 00:35:27,310
different model where the the plug-in

00:35:24,940 --> 00:35:29,440
can dynamically register rather than us

00:35:27,310 --> 00:35:32,050
then a static link by that is not that

00:35:29,440 --> 00:35:36,220
is not something that I think we will

00:35:32,050 --> 00:35:38,350
have to enhance off we still trying to

00:35:36,220 --> 00:35:41,470
figure how do we but but we may be

00:35:38,350 --> 00:35:45,580
distributed pocket it is so one way to

00:35:41,470 --> 00:35:49,480
get around that it's like an old old

00:35:45,580 --> 00:35:52,510
Java trick would be to get a source code

00:35:49,480 --> 00:35:55,660
for four or three make changes to those

00:35:52,510 --> 00:35:58,359
specific files recompile with all the

00:35:55,660 --> 00:36:01,030
other classes in class path and reg are

00:35:58,359 --> 00:36:03,130
and then then it becomes a customized

00:36:01,030 --> 00:36:05,980
version for that yes but unless unless

00:36:03,130 --> 00:36:07,690
your changes are in in the main main

00:36:05,980 --> 00:36:10,450
clouds that design is generated so I

00:36:07,690 --> 00:36:11,680
know I know what that's one of the

00:36:10,450 --> 00:36:13,840
options you're looking at now is to

00:36:11,680 --> 00:36:16,069
provide the tips of the files that have

00:36:13,840 --> 00:36:19,140
changed and therefore we're

00:36:16,069 --> 00:36:21,119
yeah yes but but I think this is some

00:36:19,140 --> 00:36:24,239
discussion that you should take back

00:36:21,119 --> 00:36:26,509
which what is what does he fly can do so

00:36:24,239 --> 00:36:30,539
we were adding support for our

00:36:26,509 --> 00:36:32,160
networking sdn solution okay raja

00:36:30,539 --> 00:36:37,469
networks okay you're adding that

00:36:32,160 --> 00:36:39,150
capability ok ok so in that case the

00:36:37,469 --> 00:36:41,130
change to CloudStack should be fairly

00:36:39,150 --> 00:36:43,979
minimal maybe only a few different file

00:36:41,130 --> 00:36:47,039
exactly is never be the wiser mostly

00:36:43,979 --> 00:36:49,979
enums end ok so that is something I

00:36:47,039 --> 00:36:52,229
think we should take back as a as a

00:36:49,979 --> 00:36:54,180
suggestion back to community and design

00:36:52,229 --> 00:36:56,509
our plugins such that the network

00:36:54,180 --> 00:36:59,009
provider now all those things are

00:36:56,509 --> 00:37:01,890
dynamically register rather than trying

00:36:59,009 --> 00:37:04,979
to change the CloudStack core code is it

00:37:01,890 --> 00:37:06,960
by kind of my syrah I see a link they

00:37:04,979 --> 00:37:13,109
are made on a turn we followed a similar

00:37:06,960 --> 00:37:16,049
thing okay yeah but almost all the

00:37:13,109 --> 00:37:17,759
plugins that we had our have been really

00:37:16,049 --> 00:37:19,410
part of cloud staff so it was not an

00:37:17,759 --> 00:37:22,109
issue so but I think it's an interesting

00:37:19,410 --> 00:37:24,989
use case yeah I mean you should be able

00:37:22,109 --> 00:37:28,529
to plug in the dog without mine without

00:37:24,989 --> 00:37:31,469
sorrow he comes and like it's not a plot

00:37:28,529 --> 00:37:34,289
yeah yes sir and I think I think one of

00:37:31,469 --> 00:37:37,019
the challenge there is it's very simple

00:37:34,289 --> 00:37:40,769
to externalise those changes into some

00:37:37,019 --> 00:37:42,660
XML or configuration file and it's it's

00:37:40,769 --> 00:37:44,969
it's trivial work but we support

00:37:42,660 --> 00:37:46,769
multiple management servers so either

00:37:44,969 --> 00:37:49,680
you have to put those configuration

00:37:46,769 --> 00:37:52,829
files on a shared location or you put

00:37:49,680 --> 00:37:54,749
those changes into a DB basically we

00:37:52,829 --> 00:37:56,640
have to design our plugins such that is

00:37:54,749 --> 00:37:59,670
a plug-in database when a plugin loads

00:37:56,640 --> 00:38:01,769
up it calls in certain API to add itself

00:37:59,670 --> 00:38:05,339
and then it's it's available across

00:38:01,769 --> 00:38:07,420
management servers so the other

00:38:05,339 --> 00:38:09,750
challenge I see is that even if

00:38:07,420 --> 00:38:13,119
I let's say we keep the proposal by

00:38:09,750 --> 00:38:15,940
fixating mid-june and then maybe a month

00:38:13,119 --> 00:38:18,670
two months later and then it takes about

00:38:15,940 --> 00:38:21,040
four to six months for minimum or

00:38:18,670 --> 00:38:22,480
assuming i mean this get the RC so like

00:38:21,040 --> 00:38:24,220
size or something think of this here

00:38:22,480 --> 00:38:26,079
right so this was the future proposal

00:38:24,220 --> 00:38:28,240
date this is your picture phrase that's

00:38:26,079 --> 00:38:32,260
october november remember too much was

00:38:28,240 --> 00:38:33,849
the release right sir this time we we

00:38:32,260 --> 00:38:35,500
took took a lot longer and that's what I

00:38:33,849 --> 00:38:37,420
was I was talking about Memphis I

00:38:35,500 --> 00:38:39,040
understand but they realized that could

00:38:37,420 --> 00:38:40,690
happen the same it's possible it's

00:38:39,040 --> 00:38:45,430
possible in theory should be under

00:38:40,690 --> 00:38:47,079
formals yeah focusing polity so yeah now

00:38:45,430 --> 00:38:48,369
and we would be you would be doing all

00:38:47,079 --> 00:38:49,809
the testing in general because we can be

00:38:48,369 --> 00:38:54,069
shipping into customer we actually

00:38:49,809 --> 00:38:56,410
testing a lot nice matter of you know

00:38:54,069 --> 00:38:58,470
for future changes that we making you

00:38:56,410 --> 00:39:04,119
know you'd rather they go through

00:38:58,470 --> 00:39:07,000
release code yeah and I think there is

00:39:04,119 --> 00:39:09,579
also this notion in our minds that if

00:39:07,000 --> 00:39:11,470
master is open for a long time we will

00:39:09,579 --> 00:39:13,990
have lot more things come in but

00:39:11,470 --> 00:39:17,530
practically I think you Mike you had

00:39:13,990 --> 00:39:19,799
also called out for even though the

00:39:17,530 --> 00:39:22,780
field the release branch has been cut

00:39:19,799 --> 00:39:24,760
and the master is open for next release

00:39:22,780 --> 00:39:26,859
but most of the flip CIL's that are

00:39:24,760 --> 00:39:29,380
going in master are not new features

00:39:26,859 --> 00:39:31,990
they are they are pretty much bug fixes

00:39:29,380 --> 00:39:33,910
we have to poured back into master right

00:39:31,990 --> 00:39:35,530
so even though the master was open for

00:39:33,910 --> 00:39:39,040
let's say four months between early

00:39:35,530 --> 00:39:40,750
cycle practically it's like 22 months or

00:39:39,040 --> 00:39:43,930
two months worth of feature development

00:39:40,750 --> 00:39:45,970
so keeping it longer but pulling in

00:39:43,930 --> 00:39:48,490
feature proposal date I think

00:39:45,970 --> 00:39:53,079
accommodates what accommodates the

00:39:48,490 --> 00:39:54,910
reality right we can be very say we have

00:39:53,079 --> 00:39:56,559
to stick to the schedule but really

00:39:54,910 --> 00:39:58,599
really we can so we have to adapt to

00:39:56,559 --> 00:40:01,329
adapt to where we are so the branch gets

00:39:58,599 --> 00:40:03,210
cut feature each of fries feature phase

00:40:01,329 --> 00:40:05,780
it will get cut here

00:40:03,210 --> 00:40:05,780
go to another page

00:40:11,470 --> 00:40:14,980
the stage

00:40:13,090 --> 00:40:17,800
so feature fries at feature freezer

00:40:14,980 --> 00:40:20,280
branch gets gotta do we have any plans

00:40:17,800 --> 00:40:23,230
for like release managers sort of

00:40:20,280 --> 00:40:24,970
auditing changes that go in after

00:40:23,230 --> 00:40:27,040
feature fries I've noticed we've got

00:40:24,970 --> 00:40:30,730
your shoes and for that forward things

00:40:27,040 --> 00:40:32,410
have been broken so so so that is

00:40:30,730 --> 00:40:34,630
actually easy and that's what I have set

00:40:32,410 --> 00:40:37,480
up a filter for okay so the way to do

00:40:34,630 --> 00:40:41,080
that is set up a jira query to say that

00:40:37,480 --> 00:40:44,020
any new feature feature tickets getting

00:40:41,080 --> 00:40:47,020
created targeted for this release after

00:40:44,020 --> 00:40:48,640
the feature freeze date pop it out that

00:40:47,020 --> 00:40:50,740
stuff that's a simple budget to create I

00:40:48,640 --> 00:40:54,460
know we had a big issue seemed like this

00:40:50,740 --> 00:40:56,650
very week other with xenserver related

00:40:54,460 --> 00:40:58,060
code where we couldn't even like run the

00:40:56,650 --> 00:40:59,950
code base and it was like weeks and

00:40:58,060 --> 00:41:02,260
weeks after code after feature furries

00:40:59,950 --> 00:41:04,090
like it might have any progression

00:41:02,260 --> 00:41:06,960
because of something else that was it

00:41:04,090 --> 00:41:11,010
was a change in the xenserver API

00:41:06,960 --> 00:41:14,980
pulling out custom I think my bases

00:41:11,010 --> 00:41:17,680
what's garden Go Fish we couldn't get

00:41:14,980 --> 00:41:20,140
that from to you yeah it's actually all

00:41:17,680 --> 00:41:22,770
basically it seems like it's because I

00:41:20,140 --> 00:41:25,810
yeah it used to be a thinker proposal

00:41:22,770 --> 00:41:27,310
exactly and I just noticed I was trying

00:41:25,810 --> 00:41:30,520
to go back to the code base seeing like

00:41:27,310 --> 00:41:32,500
what what growth is and then you can't

00:41:30,520 --> 00:41:34,570
kind of see based on the comments like

00:41:32,500 --> 00:41:36,970
this features at it has nothing to do

00:41:34,570 --> 00:41:38,980
with anything that was you know proposed

00:41:36,970 --> 00:41:40,570
same thing though so I don't know like

00:41:38,980 --> 00:41:43,360
if that's part of release management's

00:41:40,570 --> 00:41:44,920
it's it's it's really hard for release

00:41:43,360 --> 00:41:48,790
manager to go through all the comments I

00:41:44,920 --> 00:41:51,280
know I know I was called out to non boot

00:41:48,790 --> 00:41:53,890
cherry-pick start doing terrific right

00:41:51,280 --> 00:41:56,250
after code freeze but it's practically

00:41:53,890 --> 00:41:58,810
impossible even during our seas we have

00:41:56,250 --> 00:42:01,420
so so many pixels were coming in yeah

00:41:58,810 --> 00:42:01,900
and it's not practical impractical some

00:42:01,420 --> 00:42:03,910
point

00:42:01,900 --> 00:42:06,880
person to do that maybe we just need to

00:42:03,910 --> 00:42:15,610
make that more clear big a piece of

00:42:06,880 --> 00:42:17,920
information any other fishes are you I

00:42:15,610 --> 00:42:20,740
think your mission is so you sharing

00:42:17,920 --> 00:42:24,730
your jurors yeah it's already in the

00:42:20,740 --> 00:42:26,050
it's it's all public folder to dashboard

00:42:24,730 --> 00:42:31,420
and product three dashboard they're

00:42:26,050 --> 00:42:33,040
pretty much yes yes yes I had I was

00:42:31,420 --> 00:42:35,020
actually every week I used to send out

00:42:33,040 --> 00:42:37,990
my update I had a link to the dashboard

00:42:35,020 --> 00:42:39,730
I was hoping folks will go there but

00:42:37,990 --> 00:42:42,220
looks like it's not popular yet so that

00:42:39,730 --> 00:42:47,460
is something he went and hopefully you

00:42:42,220 --> 00:42:50,950
can make it more popular so is this the

00:42:47,460 --> 00:42:54,820
David's proposal was it for myself each

00:42:50,950 --> 00:42:57,010
other I'm sorry David's proposal to not

00:42:54,820 --> 00:43:01,000
allow workers unless there was an

00:42:57,010 --> 00:43:02,710
ultimatum taste profile so now David's

00:43:01,000 --> 00:43:06,010
David's proposal was slightly different

00:43:02,710 --> 00:43:09,250
David's proposal was that the voting on

00:43:06,010 --> 00:43:10,900
RC is based on automation irrespective

00:43:09,250 --> 00:43:13,660
of all the other fixes that all the bugs

00:43:10,900 --> 00:43:15,580
that are coming that forces us to make

00:43:13,660 --> 00:43:18,670
sure that we have good automation but

00:43:15,580 --> 00:43:21,640
reduce quiz is that if someone signals

00:43:18,670 --> 00:43:25,530
worker a bus provides an automation and

00:43:21,640 --> 00:43:25,530
automated test but actually

00:43:28,309 --> 00:43:45,269
yeah so I was so it's it's actually more

00:43:43,019 --> 00:43:52,230
than a full-time job so I was doing this

00:43:45,269 --> 00:43:56,849
plus obviously my my dollar day job yeah

00:43:52,230 --> 00:43:58,859
if you look at it it really ramps up

00:43:56,849 --> 00:44:00,450
like setting up dash bows and all that

00:43:58,859 --> 00:44:03,359
it doesn't take much time once you once

00:44:00,450 --> 00:44:06,329
you know it up from feature freeze all

00:44:03,359 --> 00:44:07,859
the way until until UGA that's that's

00:44:06,329 --> 00:44:09,869
really the time for Ali's mother he has

00:44:07,859 --> 00:44:11,880
to like like for example like i

00:44:09,869 --> 00:44:15,480
mentioned right since we do not have

00:44:11,880 --> 00:44:17,609
auto assignment and you pretty much have

00:44:15,480 --> 00:44:19,710
to track every issue and figure out a

00:44:17,609 --> 00:44:21,660
look at the exception trays and figure

00:44:19,710 --> 00:44:23,849
out which component it is I know this

00:44:21,660 --> 00:44:26,190
guy worked in this or look at the git

00:44:23,849 --> 00:44:28,380
repo look for that particular class and

00:44:26,190 --> 00:44:30,509
see who or do a git blame and see who

00:44:28,380 --> 00:44:33,299
who has changed it send them an email

00:44:30,509 --> 00:44:35,759
and figure out hey can you really fix it

00:44:33,299 --> 00:44:37,980
so that that takes a lot of time but if

00:44:35,759 --> 00:44:40,319
we have a comprehensive list of

00:44:37,980 --> 00:44:44,039
components subcomponent and if we agree

00:44:40,319 --> 00:44:46,109
to have people be owners of that maybe

00:44:44,039 --> 00:44:48,329
we rotate those owners and do auto

00:44:46,109 --> 00:44:51,000
assignment that work will reduce quite a

00:44:48,329 --> 00:44:52,259
bit but that means everybody has to take

00:44:51,000 --> 00:44:54,960
a responsibility for that particular

00:44:52,259 --> 00:44:56,309
component and be ready to fix issues in

00:44:54,960 --> 00:44:58,230
that area that way it gets relegated

00:44:56,309 --> 00:45:01,980
that's really the time all the way from

00:44:58,230 --> 00:45:04,259
future feature fries to our seats pretty

00:45:01,980 --> 00:45:07,710
much all the time goes and looking at

00:45:04,259 --> 00:45:10,039
every defect and every defect in

00:45:07,710 --> 00:45:12,730
figuring out who computer fix

00:45:10,039 --> 00:45:16,150
responsibility

00:45:12,730 --> 00:45:19,680
reporter and said putting the

00:45:16,150 --> 00:45:23,980
responsibility of having a burger joint

00:45:19,680 --> 00:45:25,840
before no no so that has to be done to

00:45:23,980 --> 00:45:27,940
auto assignment get actually jira

00:45:25,840 --> 00:45:31,630
supports it but as community we decided

00:45:27,940 --> 00:45:35,170
not to use it because there was a long

00:45:31,630 --> 00:45:36,640
thread on during four or two it was

00:45:35,170 --> 00:45:39,640
really challenging for me because I

00:45:36,640 --> 00:45:41,350
could not even manually assign because

00:45:39,640 --> 00:45:43,270
it's like you are getting somebody well

00:45:41,350 --> 00:45:44,770
and this is an open source community

00:45:43,270 --> 00:45:46,270
everybody should be able to figure out

00:45:44,770 --> 00:45:50,560
what they want to pick but how do i run

00:45:46,270 --> 00:45:52,060
a release of that right so I I'm I call

00:45:50,560 --> 00:45:55,540
out hey this is like two thousand bucks

00:45:52,060 --> 00:45:57,430
how am I supposed to work with so i was

00:45:55,540 --> 00:45:59,620
told ok now you can assign but even with

00:45:57,430 --> 00:46:02,680
assignment you have to do good flame and

00:45:59,620 --> 00:46:04,240
see poof poof who made the change to

00:46:02,680 --> 00:46:07,720
that area or look at the component list

00:46:04,240 --> 00:46:11,020
and it takes a lot of time so we have to

00:46:07,720 --> 00:46:13,320
do like I would say we should do auto

00:46:11,020 --> 00:46:13,320
sign

00:46:18,390 --> 00:46:20,630
you

00:46:20,910 --> 00:46:23,910
yep

00:46:31,580 --> 00:46:34,580
two

00:46:43,840 --> 00:46:50,050
that because it was kind of critical to

00:46:46,270 --> 00:46:52,500
us and it becomes kind of natural to or

00:46:50,050 --> 00:46:55,150
we did fill that bag and we'll follow it

00:46:52,500 --> 00:46:57,220
but I think is that if you don't know

00:46:55,150 --> 00:47:00,790
who's going to do with them if you don't

00:46:57,220 --> 00:47:04,720
do like that risk somebody involved in

00:47:00,790 --> 00:47:07,150
the component which is where on watches

00:47:04,720 --> 00:47:12,310
thank you not reproduce with a half now

00:47:07,150 --> 00:47:14,710
and say okay so responsibility not

00:47:12,310 --> 00:47:16,630
putting it explicitly with the report is

00:47:14,710 --> 00:47:19,050
still get up to the glass in the air

00:47:16,630 --> 00:47:19,050

YouTube URL: https://www.youtube.com/watch?v=RE17jOpNsQ4


