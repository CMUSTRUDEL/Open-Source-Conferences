Title: Going from Legacy to Cloud Native - Aaron Delp & Kenneth Hui
Publication date: 2014-05-07
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:04,980
alright well it's one we get started

00:00:02,370 --> 00:00:08,580
first of all thanks for coming to the

00:00:04,980 --> 00:00:10,019
session so we'll be talking about what

00:00:08,580 --> 00:00:12,630
kind of workloads you want to do in a

00:00:10,019 --> 00:00:15,360
cloud platform rather to be peculiar

00:00:12,630 --> 00:00:17,369
obviously in this case for CloudStack we

00:00:15,360 --> 00:00:19,830
will be talking about basically the the

00:00:17,369 --> 00:00:23,400
two primary types of workloads that we

00:00:19,830 --> 00:00:26,150
see today when users talk about wanting

00:00:23,400 --> 00:00:29,429
to go to the cloud so a couple of

00:00:26,150 --> 00:00:33,059
introductions Aaron do you want to share

00:00:29,429 --> 00:00:35,579
absolutely so I'm arendelle slight

00:00:33,059 --> 00:00:37,950
change from the program I was recently

00:00:35,579 --> 00:00:39,450
employed by Citrix as of Monday I

00:00:37,950 --> 00:00:41,700
started actually at SolidFire cloud

00:00:39,450 --> 00:00:43,770
solutions architect there i'll be

00:00:41,700 --> 00:00:45,090
working on cloudstack solutions and how

00:00:43,770 --> 00:00:47,640
they integrate with the arrays going

00:00:45,090 --> 00:00:49,860
forward and ken doesn't know this but

00:00:47,640 --> 00:00:51,539
we've got a little drinking game since

00:00:49,860 --> 00:00:54,360
it's the morning it'll be coffee anytime

00:00:51,539 --> 00:00:56,670
ken accidentally says OpenStack instead

00:00:54,360 --> 00:00:58,230
of glad stack you have to take you know

00:00:56,670 --> 00:01:01,469
take a sip of coffee does that happen

00:00:58,230 --> 00:01:03,480
yesterday all day so my name is Kenneth

00:01:01,469 --> 00:01:05,880
boy I'm a technology evangelist with

00:01:03,480 --> 00:01:08,280
rackspace and for those who don't know

00:01:05,880 --> 00:01:10,229
Rackspace is actually the one of the two

00:01:08,280 --> 00:01:12,780
companies to help found the OpenStack

00:01:10,229 --> 00:01:16,580
project so obviously my focus is on

00:01:12,780 --> 00:01:18,479
OpenStack but the CloudStack

00:01:16,580 --> 00:01:20,580
collaboration conference committee was

00:01:18,479 --> 00:01:23,340
gracious enough to look to have me come

00:01:20,580 --> 00:01:25,439
and to talk not about OpenStack but talk

00:01:23,340 --> 00:01:27,450
about cloud computing in general because

00:01:25,439 --> 00:01:29,220
I think that's there's a lot of of these

00:01:27,450 --> 00:01:31,409
similarities and synergies between what

00:01:29,220 --> 00:01:34,409
both of our communities trying to do in

00:01:31,409 --> 00:01:37,280
terms of helping end-users kind of go to

00:01:34,409 --> 00:01:42,509
the next level in their IT as a service

00:01:37,280 --> 00:01:44,790
deployment so let's talk about these two

00:01:42,509 --> 00:01:49,170
workloads so good place to start is to

00:01:44,790 --> 00:01:51,119
think it's kind of odd like it's 2014

00:01:49,170 --> 00:01:54,030
and all of a sudden virtualization and

00:01:51,119 --> 00:01:55,619
not i would consider almost legacy so

00:01:54,030 --> 00:01:58,140
when I thought well virtualization I'm

00:01:55,619 --> 00:02:01,770
talking specifically about technologies

00:01:58,140 --> 00:02:05,240
like vSphere or Zen the Xen hypervisor

00:02:01,770 --> 00:02:07,110
or kvm right or hyper-v so

00:02:05,240 --> 00:02:10,530
virtualization out is hypervisor

00:02:07,110 --> 00:02:13,260
technology that abstracts particularly

00:02:10,530 --> 00:02:13,920
this the physical serve the Saudi off

00:02:13,260 --> 00:02:15,510
the sir

00:02:13,920 --> 00:02:18,209
service from the physical server so that

00:02:15,510 --> 00:02:20,459
you so that instead of we have been

00:02:18,209 --> 00:02:22,020
restricted to one instance of an

00:02:20,459 --> 00:02:24,209
operating system sitting on physical

00:02:22,020 --> 00:02:26,220
server you could have multiple sometimes

00:02:24,209 --> 00:02:27,900
up to 20 to 100 on a single physical

00:02:26,220 --> 00:02:30,540
server they're bringing how large that

00:02:27,900 --> 00:02:33,060
server is and as we've kind of taken

00:02:30,540 --> 00:02:35,970
that now to apply that to networking and

00:02:33,060 --> 00:02:37,739
storage so they can think about with

00:02:35,970 --> 00:02:40,350
this workload is virtualization kind of

00:02:37,739 --> 00:02:42,209
came to being right around it refer you

00:02:40,350 --> 00:02:45,630
legacy types of application workloads

00:02:42,209 --> 00:02:48,500
Thank orico think Microsoft Exchange

00:02:45,630 --> 00:02:51,060
right where where the application sat

00:02:48,500 --> 00:02:53,130
probably on one server and once server

00:02:51,060 --> 00:02:56,040
only but if you wanted to grow the

00:02:53,130 --> 00:02:59,489
application you either just add more

00:02:56,040 --> 00:03:01,470
memory and more storage or you just

00:02:59,489 --> 00:03:06,900
create a second instance of that server

00:03:01,470 --> 00:03:08,430
somewhere else and and the point of it

00:03:06,900 --> 00:03:11,130
was to try again to consolidate that

00:03:08,430 --> 00:03:13,709
workload and what we found over time was

00:03:11,130 --> 00:03:15,569
we actually great to marry virtual I

00:03:13,709 --> 00:03:17,430
which a hypervisor technologies with

00:03:15,569 --> 00:03:20,280
share storage because again you could

00:03:17,430 --> 00:03:21,570
consolidate the data as well so those

00:03:20,280 --> 00:03:23,609
are the type of workloads a virtual

00:03:21,570 --> 00:03:26,519
version was kind of designed for it was

00:03:23,609 --> 00:03:28,109
also designed for the workloads where

00:03:26,519 --> 00:03:30,810
you expected it would never go away

00:03:28,109 --> 00:03:32,579
right so we have I used to do a lot of

00:03:30,810 --> 00:03:34,950
VMware work and we would have customers

00:03:32,579 --> 00:03:39,060
that would have an Oracle server running

00:03:34,950 --> 00:03:42,359
on a vm that they never shut off except

00:03:39,060 --> 00:03:44,070
for you know upgrades I require some

00:03:42,359 --> 00:03:47,010
kind of a shutdown of the application

00:03:44,070 --> 00:03:49,260
and it was also upgrade operator focus

00:03:47,010 --> 00:03:52,230
right this idea that if a developer

00:03:49,260 --> 00:03:54,209
wanted resources compete resources you

00:03:52,230 --> 00:03:57,750
had to fill out a spreadsheet or make

00:03:54,209 --> 00:04:00,540
open a ticket right and then we wait six

00:03:57,750 --> 00:04:02,010
weeks to a month sometimes six months to

00:04:00,540 --> 00:04:05,310
get your resource I had a customer

00:04:02,010 --> 00:04:07,560
recently that uses VMware do a service

00:04:05,310 --> 00:04:09,840
provider and the SLA for them to get a

00:04:07,560 --> 00:04:16,320
virtue of vm so in order to do the

00:04:09,840 --> 00:04:17,880
development was six weeks and one of

00:04:16,320 --> 00:04:20,310
great things about virtualization was

00:04:17,880 --> 00:04:22,349
the initially started as a consolidation

00:04:20,310 --> 00:04:24,720
play but people realize well if I could

00:04:22,349 --> 00:04:26,880
I'm consolidating all these VMs onto a

00:04:24,720 --> 00:04:27,810
physical server and I'm also consulting

00:04:26,880 --> 00:04:30,210
the data so it's

00:04:27,810 --> 00:04:31,500
sitting on a share storage I could

00:04:30,210 --> 00:04:34,610
actually do some really cool things like

00:04:31,500 --> 00:04:37,830
technology things like being able to do

00:04:34,610 --> 00:04:41,190
vm mobility and high availability so the

00:04:37,830 --> 00:04:42,300
idea of being able to when a vm that's

00:04:41,190 --> 00:04:44,730
running and out saying oracle

00:04:42,300 --> 00:04:46,260
application fails i can just bring it up

00:04:44,730 --> 00:04:49,200
on another server that sees the same

00:04:46,260 --> 00:04:52,050
storage right and that was a boon

00:04:49,200 --> 00:04:53,820
because its foot applicator for very

00:04:52,050 --> 00:04:56,940
monolithic applications like Oracle and

00:04:53,820 --> 00:04:58,919
exchange if it was very difficult to

00:04:56,940 --> 00:05:00,540
make it highly available waived if

00:04:58,919 --> 00:05:02,490
difficult to move that work low around

00:05:00,540 --> 00:05:06,930
and virtualization kind of enabled that

00:05:02,490 --> 00:05:08,370
to happen and there's various

00:05:06,930 --> 00:05:09,960
consumption model so these are different

00:05:08,370 --> 00:05:11,850
hypervisor for example that's obviously

00:05:09,960 --> 00:05:14,070
many more that supports virtualization

00:05:11,850 --> 00:05:16,260
and then you can also actually outsource

00:05:14,070 --> 00:05:17,820
that virtualization to various companies

00:05:16,260 --> 00:05:23,639
right they do manage virtualization

00:05:17,820 --> 00:05:27,000
hosting but then around two thousand

00:05:23,639 --> 00:05:29,669
seven or so right amazon released AWS

00:05:27,000 --> 00:05:31,530
and that was a complete completely new

00:05:29,669 --> 00:05:33,930
way of looking at how infrastructure

00:05:31,530 --> 00:05:36,330
should be rolled out and how

00:05:33,930 --> 00:05:38,220
applications would be designed so in a

00:05:36,330 --> 00:05:40,560
cloudy world which is the other workload

00:05:38,220 --> 00:05:42,060
that we want to talk about right you see

00:05:40,560 --> 00:05:45,060
here it's not only does it not share

00:05:42,060 --> 00:05:46,650
storage right but the data the data for

00:05:45,060 --> 00:05:48,300
an application doesn't necessarily so on

00:05:46,650 --> 00:05:50,150
one server anymore in fact it's

00:05:48,300 --> 00:05:52,710
distribute across many many servers

00:05:50,150 --> 00:05:55,380
right and the workload tends to be very

00:05:52,710 --> 00:05:57,169
spiky so you think a canonical example

00:05:55,380 --> 00:06:00,510
would be Netflix right we're on

00:05:57,169 --> 00:06:02,460
Christmas Day they may practically

00:06:00,510 --> 00:06:05,070
double the number of virtual machines

00:06:02,460 --> 00:06:07,169
that they run during other times of the

00:06:05,070 --> 00:06:10,650
year and then tear that down as soon as

00:06:07,169 --> 00:06:13,110
the Christmas holidays over it's and

00:06:10,650 --> 00:06:15,419
also it was there was a focus not on the

00:06:13,110 --> 00:06:18,120
operator but on the developer right this

00:06:15,419 --> 00:06:21,120
idea that developers should have control

00:06:18,120 --> 00:06:23,669
over the infrastructure via API so

00:06:21,120 --> 00:06:26,490
instead of having to again go through an

00:06:23,669 --> 00:06:29,780
operator to ask for resource this spin

00:06:26,490 --> 00:06:32,490
it up themselves right and they can

00:06:29,780 --> 00:06:34,169
control how much resources they need

00:06:32,490 --> 00:06:38,430
when they need it and tear it down when

00:06:34,169 --> 00:06:41,790
they don't need it anymore and because

00:06:38,430 --> 00:06:44,250
of that the way that Kali that college

00:06:41,790 --> 00:06:46,620
design like we assume that the

00:06:44,250 --> 00:06:48,330
infrastructure would fail so one of the

00:06:46,620 --> 00:06:50,220
things that a lot of questions I get all

00:06:48,330 --> 00:06:52,770
the time when I talk to customers

00:06:50,220 --> 00:06:55,650
particularly customers who are either

00:06:52,770 --> 00:06:57,810
VMware customers or then send server

00:06:55,650 --> 00:06:59,910
customers is the one of the top

00:06:57,810 --> 00:07:02,430
questions they want to know is if I move

00:06:59,910 --> 00:07:04,650
over to let's say Kyle stack OpenStack

00:07:02,430 --> 00:07:08,250
what happens when my application fails

00:07:04,650 --> 00:07:10,770
when that vm fails do i does it

00:07:08,250 --> 00:07:15,450
automatically restart and usually the

00:07:10,770 --> 00:07:16,980
answer is no right which usually spawns

00:07:15,450 --> 00:07:20,010
this question what the heck is wrong

00:07:16,980 --> 00:07:22,040
with cloud computing platforms for that

00:07:20,010 --> 00:07:24,060
they can't do of such a basic

00:07:22,040 --> 00:07:25,980
functionality of virtualization which is

00:07:24,060 --> 00:07:33,060
to automatically fail over and move the

00:07:25,980 --> 00:07:35,220
VM and the what I try to tell them is

00:07:33,060 --> 00:07:38,250
this is that's not a failing of the

00:07:35,220 --> 00:07:40,590
cloud platform but rather is a is a

00:07:38,250 --> 00:07:42,450
difference in philosophy of design so

00:07:40,590 --> 00:07:45,150
when it comes to cloud weather again

00:07:42,450 --> 00:07:47,760
where is CloudStack OpenStack the focus

00:07:45,150 --> 00:07:50,700
here is to for rapid scale right this

00:07:47,760 --> 00:07:52,740
idea that which is not about being a

00:07:50,700 --> 00:07:55,560
provision a single VM every few weeks

00:07:52,740 --> 00:07:58,800
it's being able provision thousands tens

00:07:55,560 --> 00:08:00,600
of thousands of vm within minutes and be

00:07:58,800 --> 00:08:02,430
able to tear them down again and we

00:08:00,600 --> 00:08:04,260
purpose somewhere need it and the idea

00:08:02,430 --> 00:08:06,050
is to be able to grow it well that

00:08:04,260 --> 00:08:09,810
environment so when you have that spike

00:08:06,050 --> 00:08:11,910
in your applique in your business right

00:08:09,810 --> 00:08:15,570
you're not be able to spin up those

00:08:11,910 --> 00:08:17,610
resources as a demand rises and without

00:08:15,570 --> 00:08:20,720
having to take any type of downtime or

00:08:17,610 --> 00:08:28,380
how have you your customers experience

00:08:20,720 --> 00:08:29,850
lags the problem or the other purely

00:08:28,380 --> 00:08:32,870
though is when you do things at scale

00:08:29,850 --> 00:08:35,669
things fail and they fail all the time

00:08:32,870 --> 00:08:39,720
right if you think about it it's one

00:08:35,669 --> 00:08:42,180
thing to have saved 50 VMs 100 VMs in

00:08:39,720 --> 00:08:44,099
environment running on maybe 10 or 20

00:08:42,180 --> 00:08:47,700
servers what do you do when you have a

00:08:44,099 --> 00:08:50,880
hundred thousand VMs or even 10,000 vm

00:08:47,700 --> 00:08:53,490
sitting on a hundred servers with using

00:08:50,880 --> 00:08:55,140
a odd using shared what bunch of

00:08:53,490 --> 00:08:55,710
different storage at some point

00:08:55,140 --> 00:08:58,140
something

00:08:55,710 --> 00:09:00,200
is going to fail right even if using the

00:08:58,140 --> 00:09:02,700
best hypervisor technology in the world

00:09:00,200 --> 00:09:05,490
something will fail it's something one

00:09:02,700 --> 00:09:08,100
or the storage may fail a networking

00:09:05,490 --> 00:09:10,530
equipment it could be misconfigured but

00:09:08,100 --> 00:09:12,990
something will fail at all times and so

00:09:10,530 --> 00:09:15,720
instead of real quick on they can yeah

00:09:12,990 --> 00:09:17,310
an analogy to think about two of that

00:09:15,720 --> 00:09:20,130
and even not related necessarily to

00:09:17,310 --> 00:09:22,950
cloud computing but just systems in

00:09:20,130 --> 00:09:24,960
general I'm so so way way way back when

00:09:22,950 --> 00:09:26,760
even pre virtualization i actually did

00:09:24,960 --> 00:09:30,210
benchmarking for IBM for a number of

00:09:26,760 --> 00:09:32,700
years and every system physical virtual

00:09:30,210 --> 00:09:34,620
no matter what has a weak point it has a

00:09:32,700 --> 00:09:36,480
failure point in what and when you're

00:09:34,620 --> 00:09:39,510
trying to make things go faster or scale

00:09:36,480 --> 00:09:42,030
out basic benchmarking and scalability

00:09:39,510 --> 00:09:43,830
is finding that weak point and moving

00:09:42,030 --> 00:09:45,990
excuse me moving that point just a

00:09:43,830 --> 00:09:47,550
little bit further and finding the next

00:09:45,990 --> 00:09:50,400
one and moving that one a little bit

00:09:47,550 --> 00:09:53,640
further right everything will fail at

00:09:50,400 --> 00:09:56,340
scale at some point it's just making it

00:09:53,640 --> 00:09:59,070
to the users and the business moving

00:09:56,340 --> 00:10:01,170
those scales out just far enough to

00:09:59,070 --> 00:10:03,150
where they don't see it and and so when

00:10:01,170 --> 00:10:04,560
you hear some people say oh it's not as

00:10:03,150 --> 00:10:08,190
scalable as this it's not scalable as

00:10:04,560 --> 00:10:11,370
that at the end of its like yeah but if

00:10:08,190 --> 00:10:12,570
you don't see it does it matter so

00:10:11,370 --> 00:10:14,160
that's something to always think about

00:10:12,570 --> 00:10:16,410
in this when when people talk about

00:10:14,160 --> 00:10:18,030
things such as you know scalability are

00:10:16,410 --> 00:10:20,880
going fast you know how do you go faster

00:10:18,030 --> 00:10:23,280
how do you grow out more sometimes the

00:10:20,880 --> 00:10:25,260
answer is just enough it isn't I have to

00:10:23,280 --> 00:10:27,150
be this right sometimes all I have to be

00:10:25,260 --> 00:10:29,970
is this so I just went to add that it

00:10:27,150 --> 00:10:32,220
yep so so key with building cloudy or

00:10:29,970 --> 00:10:34,440
architecting for cloudy Nate or cloud

00:10:32,220 --> 00:10:36,600
native applications is not to try to

00:10:34,440 --> 00:10:38,100
design it in such a way that things

00:10:36,600 --> 00:10:40,290
never fear infrastructure never fails

00:10:38,100 --> 00:10:43,260
the way to design it which is the way

00:10:40,290 --> 00:10:46,080
virtualization design was done but in a

00:10:43,260 --> 00:10:48,270
cloud work cloudy world the focus is to

00:10:46,080 --> 00:10:50,640
say I assume my infrastructure will fail

00:10:48,270 --> 00:10:52,680
and how do I design around it so that

00:10:50,640 --> 00:10:56,160
when that infrastructure fails my users

00:10:52,680 --> 00:10:59,190
don't see the impact so a couple of

00:10:56,160 --> 00:11:02,070
principles to follow one is this whole

00:10:59,190 --> 00:11:04,980
idea the of catalyst versus pets right

00:11:02,070 --> 00:11:07,470
in the virtualization world you know

00:11:04,980 --> 00:11:08,430
when a vm fails you spent a lot of time

00:11:07,470 --> 00:11:12,450
trying to fix it

00:11:08,430 --> 00:11:13,380
but in a cloud world where you and we'll

00:11:12,450 --> 00:11:15,660
talk about this later where you're

00:11:13,380 --> 00:11:18,510
distributing that application across

00:11:15,660 --> 00:11:20,279
many servers don't don't spend a lot of

00:11:18,510 --> 00:11:22,890
time trying to fix any one cloud

00:11:20,279 --> 00:11:25,380
instance server instance basically shoot

00:11:22,890 --> 00:11:27,810
it and move on right the idea is we what

00:11:25,380 --> 00:11:30,930
we don't want to quote unquote waste

00:11:27,810 --> 00:11:32,910
time trying to fix a server or try to

00:11:30,930 --> 00:11:36,709
make it perform better just replace it

00:11:32,910 --> 00:11:36,709
with something else and just keep moving

00:11:38,089 --> 00:11:43,920
and to make that happen the key is not

00:11:41,459 --> 00:11:45,959
to not to try to scale up try to build

00:11:43,920 --> 00:11:47,880
bigger and better servers the key is to

00:11:45,959 --> 00:11:49,770
make a bunch of smaller servers so

00:11:47,880 --> 00:11:52,470
distribute your application and your

00:11:49,770 --> 00:11:54,450
your tea your services across many many

00:11:52,470 --> 00:11:57,540
servers and just keep growing those as

00:11:54,450 --> 00:12:00,180
you go right so good canonical example

00:11:57,540 --> 00:12:01,649
is you know in a web environment right

00:12:00,180 --> 00:12:03,510
you don't want to you know I create a

00:12:01,649 --> 00:12:05,370
bunch of big web servers and try to

00:12:03,510 --> 00:12:07,170
scale them up you just create many many

00:12:05,370 --> 00:12:09,149
smaller web servers of load balancers

00:12:07,170 --> 00:12:11,370
across them and then when you when

00:12:09,149 --> 00:12:13,380
usually with qwest spiked up just spin

00:12:11,370 --> 00:12:15,839
up more web instances instead of trying

00:12:13,380 --> 00:12:23,790
to make your existing web instances

00:12:15,839 --> 00:12:25,890
perform better so key is to create what

00:12:23,790 --> 00:12:27,930
we call a share nothing message based

00:12:25,890 --> 00:12:29,700
architecture so remember going back to

00:12:27,930 --> 00:12:32,010
that virtualization architecture we

00:12:29,700 --> 00:12:33,980
talked about where you know is actually

00:12:32,010 --> 00:12:36,660
ideal to have a bunch of hypervisors

00:12:33,980 --> 00:12:38,930
talking to a share storage or a right

00:12:36,660 --> 00:12:42,660
because that way you could do fail overs

00:12:38,930 --> 00:12:45,390
the problem with that is it that becomes

00:12:42,660 --> 00:12:47,100
a scalability block bottleneck so the

00:12:45,390 --> 00:12:50,220
way to get around that it's just try to

00:12:47,100 --> 00:12:53,670
do share as little as possible I try to

00:12:50,220 --> 00:12:55,260
use allow in all cases very allow local

00:12:53,670 --> 00:12:57,839
storage and just replicate data across

00:12:55,260 --> 00:12:59,400
many different nodes right now in that

00:12:57,839 --> 00:13:01,920
way you're not bottleneck there also you

00:12:59,400 --> 00:13:04,680
want to do a message base where you

00:13:01,920 --> 00:13:07,350
don't have q's kind of spell kind of

00:13:04,680 --> 00:13:08,640
stacking up and cut where and that

00:13:07,350 --> 00:13:10,140
becomes the bottleneck so in other words

00:13:08,640 --> 00:13:11,250
what you want to do in your application

00:13:10,140 --> 00:13:14,010
architecture and your infrastructure

00:13:11,250 --> 00:13:16,320
architecture as well it's the design in

00:13:14,010 --> 00:13:18,329
such a way that as many independent

00:13:16,320 --> 00:13:21,029
pieces are working at the same time so

00:13:18,329 --> 00:13:22,570
that no one want one or two processes

00:13:21,029 --> 00:13:24,460
have to always wait for

00:13:22,570 --> 00:13:29,110
the process to get completed before you

00:13:24,460 --> 00:13:31,860
can move on and the key to doing that

00:13:29,110 --> 00:13:34,360
it's basically all that stuff of

00:13:31,860 --> 00:13:36,460
upscaling out which is Persis scaling up

00:13:34,360 --> 00:13:39,820
building the share nothing message based

00:13:36,460 --> 00:13:41,440
architecture the key is what we want to

00:13:39,820 --> 00:13:43,630
say since the infrastructure is always

00:13:41,440 --> 00:13:46,630
going to fail let's let the application

00:13:43,630 --> 00:13:48,760
handle the handle his own resiliency so

00:13:46,630 --> 00:13:51,400
our ideas you want to build on an

00:13:48,760 --> 00:13:53,710
architecture where you're using certain

00:13:51,400 --> 00:13:55,660
types of applications that will do fit

00:13:53,710 --> 00:13:57,880
though handles on failure though handles

00:13:55,660 --> 00:13:59,860
on replication so a good example would

00:13:57,880 --> 00:14:02,350
be something like Cassandra Cassandra

00:13:59,860 --> 00:14:04,950
database on those sequel database that

00:14:02,350 --> 00:14:07,540
for example netflix users where

00:14:04,950 --> 00:14:09,220
everything they do are spread out across

00:14:07,540 --> 00:14:11,650
multiple copies across many many

00:14:09,220 --> 00:14:13,630
knowledge servers but regions so the

00:14:11,650 --> 00:14:15,430
whole region fails right they just we

00:14:13,630 --> 00:14:17,320
point automatically point everything to

00:14:15,430 --> 00:14:19,270
that other region and users don't even

00:14:17,320 --> 00:14:22,750
for the most part don't even know that

00:14:19,270 --> 00:14:24,520
something has happened but for me to

00:14:22,750 --> 00:14:26,650
make that happen yet o'clock you need a

00:14:24,520 --> 00:14:28,930
cloud platform that can handle that type

00:14:26,650 --> 00:14:30,220
of multi region scale-out architecture

00:14:28,930 --> 00:14:36,070
and that's where something like Klaus

00:14:30,220 --> 00:14:40,270
that comes in how many have heard of the

00:14:36,070 --> 00:14:42,250
cap theorem a few you so the cap there

00:14:40,270 --> 00:14:44,170
i'm also known as Brewers theorem is

00:14:42,250 --> 00:14:46,750
this basically I idea when you design

00:14:44,170 --> 00:14:50,590
architecture this distributed systems

00:14:46,750 --> 00:14:53,230
let's say you have three components

00:14:50,590 --> 00:14:55,360
consistency available partition times so

00:14:53,230 --> 00:14:58,240
consistency just means every node in

00:14:55,360 --> 00:15:02,400
your system can see all the same data at

00:14:58,240 --> 00:15:06,130
the same time this right abella means

00:15:02,400 --> 00:15:07,870
when you make a request to any node to

00:15:06,130 --> 00:15:09,760
the entire system you're always going to

00:15:07,870 --> 00:15:11,590
get a response one way or the other and

00:15:09,760 --> 00:15:13,690
partition tolerance means if have to

00:15:11,590 --> 00:15:16,240
part of the system fails the system's

00:15:13,690 --> 00:15:18,940
continues running so captain says when

00:15:16,240 --> 00:15:21,340
you do a distributed architecture which

00:15:18,940 --> 00:15:24,130
is what cloud native applications run on

00:15:21,340 --> 00:15:25,840
you can't have all three generally

00:15:24,130 --> 00:15:27,520
speaking you're going to have to two out

00:15:25,840 --> 00:15:29,890
of three and for the most part in a

00:15:27,520 --> 00:15:31,990
cloud world we basically give up on

00:15:29,890 --> 00:15:34,180
consistency right we basically say well

00:15:31,990 --> 00:15:35,670
rather have the system running even if

00:15:34,180 --> 00:15:38,160
half of it

00:15:35,670 --> 00:15:40,440
and we would rather have the data always

00:15:38,160 --> 00:15:42,330
available to be to either be read and

00:15:40,440 --> 00:15:44,100
also to be written to and we'll just

00:15:42,330 --> 00:15:46,710
we'll just assume eventual consistency

00:15:44,100 --> 00:15:48,270
that eventually the application will

00:15:46,710 --> 00:15:51,060
make sure everything syncs up at some

00:15:48,270 --> 00:15:54,900
point so a good example of the if you

00:15:51,060 --> 00:15:56,880
are if you use Amazon right sometimes

00:15:54,900 --> 00:15:59,190
when you buy something you may get what

00:15:56,880 --> 00:16:00,750
you don't want to do ramazan you don't

00:15:59,190 --> 00:16:03,630
want to get situation where when part of

00:16:00,750 --> 00:16:05,550
Amazon's in fishers goes down no one can

00:16:03,630 --> 00:16:07,020
get to anything right you are always

00:16:05,550 --> 00:16:09,150
wanting to get to the Amazon website to

00:16:07,020 --> 00:16:11,640
buy something also you want to make sure

00:16:09,150 --> 00:16:13,500
that things are always available right

00:16:11,640 --> 00:16:15,180
you make it so that you get when you buy

00:16:13,500 --> 00:16:17,430
in a buy a book guy tells you yes the

00:16:15,180 --> 00:16:20,430
book exists is still in stock up know

00:16:17,430 --> 00:16:22,530
the book isn't what we trade what the

00:16:20,430 --> 00:16:23,550
tray off is you make it a situation

00:16:22,530 --> 00:16:26,310
where let's say you only one book in

00:16:23,550 --> 00:16:29,280
stock and two different people by try to

00:16:26,310 --> 00:16:31,490
buy at the same time right well

00:16:29,280 --> 00:16:33,960
basically this designs such a way that

00:16:31,490 --> 00:16:35,430
at some point later will tell you

00:16:33,960 --> 00:16:37,350
whether the book is there on that but

00:16:35,430 --> 00:16:38,790
we're going to let you get the we're

00:16:37,350 --> 00:16:40,800
going to let you successfully make a

00:16:38,790 --> 00:16:43,890
request for the book where the weather

00:16:40,800 --> 00:16:47,700
and try to stall like things that you

00:16:43,890 --> 00:16:50,700
came and get to the shopping cart so

00:16:47,700 --> 00:16:52,440
again a cloud native world that's the

00:16:50,700 --> 00:16:54,300
way you want to design things for most

00:16:52,440 --> 00:16:56,070
likely it's two picks up the idea of

00:16:54,300 --> 00:16:59,190
eventual consistency and again a lot of

00:16:56,070 --> 00:17:05,250
data or the no sequel databases use that

00:16:59,190 --> 00:17:06,930
as a design principle so a couple of

00:17:05,250 --> 00:17:09,720
ways you can do cloud so obviously

00:17:06,930 --> 00:17:12,300
cloudstack it's a way to do a private

00:17:09,720 --> 00:17:14,640
cloud and then come service providers

00:17:12,300 --> 00:17:17,370
like EXO scale of providing a public

00:17:14,640 --> 00:17:22,260
cloud using cloudstack is there as their

00:17:17,370 --> 00:17:24,840
platform so answer talk about the EU

00:17:22,260 --> 00:17:26,220
ality right still is when i talk to

00:17:24,840 --> 00:17:28,380
enterprise it particularly you know I

00:17:26,220 --> 00:17:30,030
talk to them about these cloudy apps and

00:17:28,380 --> 00:17:32,760
they come back and tell me well that's

00:17:30,030 --> 00:17:34,740
great but 90 of ninety percent of my

00:17:32,760 --> 00:17:37,980
apps a legacy some of them running on

00:17:34,740 --> 00:17:41,550
access Microsoft Access and das so what

00:17:37,980 --> 00:17:43,230
should I do with them right and and we

00:17:41,550 --> 00:17:45,930
have a response and errands will talk

00:17:43,230 --> 00:17:48,530
about that yeah so and this is going to

00:17:45,930 --> 00:17:52,190
be very much in a cloud stack kind of

00:17:48,530 --> 00:17:54,400
next first of all again what kind of

00:17:52,190 --> 00:17:57,440
workloads what we've really said here is

00:17:54,400 --> 00:17:59,030
you've got two basic types of workloads

00:17:57,440 --> 00:18:01,280
which I'm going to go into here shortly

00:17:59,030 --> 00:18:02,390
but but how do you start to classify

00:18:01,280 --> 00:18:05,570
those and what are some of the most

00:18:02,390 --> 00:18:08,090
common ones we see actually today if

00:18:05,570 --> 00:18:10,700
you're using existing applications and

00:18:08,090 --> 00:18:12,470
your kind of clarifying them it's a lot

00:18:10,700 --> 00:18:15,590
of legacy applications so that I'm not

00:18:12,470 --> 00:18:17,090
seeing me personally the majority is

00:18:15,590 --> 00:18:19,160
still legacy applications kind of

00:18:17,090 --> 00:18:20,540
getting into a cloud environment and

00:18:19,160 --> 00:18:23,180
then everyone is starting to

00:18:20,540 --> 00:18:25,430
re-architect for the future and one of

00:18:23,180 --> 00:18:27,800
the keys around that is is how are you

00:18:25,430 --> 00:18:31,490
going to actually have an environment

00:18:27,800 --> 00:18:33,800
that both types of workloads and both

00:18:31,490 --> 00:18:36,410
type environments can be successfully

00:18:33,800 --> 00:18:38,240
managed under excuse me under one

00:18:36,410 --> 00:18:40,520
management platform and that is where

00:18:38,240 --> 00:18:42,740
cloud stock is going to come into play

00:18:40,520 --> 00:18:45,740
here because you look at you know here's

00:18:42,740 --> 00:18:48,020
a maybe a legacy VMware environment if

00:18:45,740 --> 00:18:49,580
you will and then that's actually kind

00:18:48,020 --> 00:18:51,230
of the logical configuration of an

00:18:49,580 --> 00:18:54,770
OpenStack environment now how do you get

00:18:51,230 --> 00:18:56,390
these two to work together um in in the

00:18:54,770 --> 00:18:58,250
OpenStack context so to give you some

00:18:56,390 --> 00:19:00,560
information about all of that you know

00:18:58,250 --> 00:19:02,690
you've got kvm hypervisor across there

00:19:00,560 --> 00:19:05,810
and then maybe you want to take your

00:19:02,690 --> 00:19:08,330
VMware environment and put it in there a

00:19:05,810 --> 00:19:10,970
vcenter environment so that you you can

00:19:08,330 --> 00:19:14,150
kind of funnel everything up if you will

00:19:10,970 --> 00:19:16,520
to a centralized environment but if you

00:19:14,150 --> 00:19:17,930
look at the cloud stack version and

00:19:16,520 --> 00:19:22,550
that's what we're going to go into here

00:19:17,930 --> 00:19:25,040
is we we create availability zones so

00:19:22,550 --> 00:19:27,080
I'm going to assume everyone here is is

00:19:25,040 --> 00:19:29,930
you know familiar with the concept of an

00:19:27,080 --> 00:19:33,740
availability zone but if you're not a

00:19:29,930 --> 00:19:36,770
quick plug I have a session I think it's

00:19:33,740 --> 00:19:39,380
110 this afternoon somewhere in there

00:19:36,770 --> 00:19:41,510
but it I'm my session is actually all of

00:19:39,380 --> 00:19:43,070
this at a deeper level so I'm going to

00:19:41,510 --> 00:19:46,580
go into these at a very low level and

00:19:43,070 --> 00:19:48,170
also do a actually a demo lab demo for

00:19:46,580 --> 00:19:49,730
probably over half the session of how to

00:19:48,170 --> 00:19:51,620
set this up and how to match these

00:19:49,730 --> 00:19:54,290
infrastructure types and actually create

00:19:51,620 --> 00:19:58,640
this out but at the end of the day

00:19:54,290 --> 00:20:00,710
you've got a basically your traditional

00:19:58,640 --> 00:20:02,110
applications own and then you've got a

00:20:00,710 --> 00:20:05,020
cloud app

00:20:02,110 --> 00:20:07,240
zone and if we take these and break them

00:20:05,020 --> 00:20:09,130
down a little further so what are the

00:20:07,240 --> 00:20:12,130
differences again we've talked about how

00:20:09,130 --> 00:20:14,020
the applications are different as far as

00:20:12,130 --> 00:20:15,370
that application is maybe set up for

00:20:14,020 --> 00:20:17,650
resiliency you're not set up for

00:20:15,370 --> 00:20:19,840
resiliency are it it is able to scale

00:20:17,650 --> 00:20:21,640
out through sharding or eventual

00:20:19,840 --> 00:20:24,040
consisting consistency in some of these

00:20:21,640 --> 00:20:26,020
other application type features but your

00:20:24,040 --> 00:20:27,730
underlying infrastructure has to match

00:20:26,020 --> 00:20:30,429
if your underlying infrastructure

00:20:27,730 --> 00:20:33,309
doesn't match your you're setting

00:20:30,429 --> 00:20:35,020
yourself up for failure and so what we

00:20:33,309 --> 00:20:37,780
need to do is match the infrastructure

00:20:35,020 --> 00:20:39,100
to the application type so in these

00:20:37,780 --> 00:20:40,000
traditional applications typically

00:20:39,100 --> 00:20:41,470
you're going to have some kind of

00:20:40,000 --> 00:20:43,270
management server whether it's v centers

00:20:41,470 --> 00:20:45,040
and server kind of thing you're going to

00:20:43,270 --> 00:20:47,710
do enterprise-class networking typically

00:20:45,040 --> 00:20:50,710
layer 2 with VLANs is is what we see

00:20:47,710 --> 00:20:52,840
most often um if you're a service

00:20:50,710 --> 00:20:55,840
provider or service provider like or a

00:20:52,840 --> 00:21:00,640
very large enterprise this is usually

00:20:55,840 --> 00:21:02,260
the first limit you hit 4096 VLAN limit

00:21:00,640 --> 00:21:04,360
typically and you know in a domain so

00:21:02,260 --> 00:21:06,640
this is this is one of the biggest

00:21:04,360 --> 00:21:07,809
reasons why I people I see people start

00:21:06,640 --> 00:21:09,880
to embrace concepts such as

00:21:07,809 --> 00:21:11,080
software-defined networking or actually

00:21:09,880 --> 00:21:13,390
rebuilding things as cloud native

00:21:11,080 --> 00:21:15,610
applications and then you don't have

00:21:13,390 --> 00:21:18,280
necessarily individual hypervisors your

00:21:15,610 --> 00:21:21,309
hypervisors are in a cluster and managed

00:21:18,280 --> 00:21:24,309
by this this Zen Center RV center kind

00:21:21,309 --> 00:21:28,179
of a environment and then lastly your

00:21:24,309 --> 00:21:30,820
storage is on enterprise-class storage

00:21:28,179 --> 00:21:33,250
you will typically put that on some kind

00:21:30,820 --> 00:21:35,590
of sand and then load balancing firewall

00:21:33,250 --> 00:21:37,570
VPN or all kind of wrapped around the

00:21:35,590 --> 00:21:43,179
edges of all of this but not necessarily

00:21:37,570 --> 00:21:46,419
built into it and so if I look at the

00:21:43,179 --> 00:21:49,210
next type again matching application to

00:21:46,419 --> 00:21:51,940
infrastructure vastly different kind of

00:21:49,210 --> 00:21:55,299
infrastructure instead of that

00:21:51,940 --> 00:21:56,860
networking being layer two vlans this is

00:21:55,299 --> 00:21:58,600
where a lot of times we're seeing

00:21:56,860 --> 00:22:00,100
software-defined networking actually

00:21:58,600 --> 00:22:01,809
this is the greatest adoption point and

00:22:00,100 --> 00:22:05,200
you need things like since you don't

00:22:01,809 --> 00:22:07,270
have layer two vlans you need to do

00:22:05,200 --> 00:22:08,890
security groups you need to probably pop

00:22:07,270 --> 00:22:10,960
up to layer three and do security

00:22:08,890 --> 00:22:13,870
groupings to actually isolate everyone

00:22:10,960 --> 00:22:16,029
and then you need a IP elastic IPS

00:22:13,870 --> 00:22:18,399
arielle be elastic load

00:22:16,029 --> 00:22:20,049
sirs so that again it's that dynamic

00:22:18,399 --> 00:22:21,909
scale in scale out portion of this

00:22:20,049 --> 00:22:24,190
environment this is where all of this

00:22:21,909 --> 00:22:26,619
happens the network has to grow and

00:22:24,190 --> 00:22:30,909
shrink as you need in your application

00:22:26,619 --> 00:22:33,279
and then a lot of times we see actually

00:22:30,909 --> 00:22:35,919
with this kind of individual hypervisors

00:22:33,279 --> 00:22:38,349
or just bare metal a lot of times as

00:22:35,919 --> 00:22:41,979
well and through automation and

00:22:38,349 --> 00:22:44,950
provisioning instead of clusters we're

00:22:41,979 --> 00:22:47,139
seeing individual just servers you know

00:22:44,950 --> 00:22:49,929
it again goes to the pets versus cattle

00:22:47,139 --> 00:22:54,219
you know these are the cattle basically

00:22:49,929 --> 00:22:55,389
and then the storage is very different a

00:22:54,219 --> 00:22:57,609
lot of times this is where we're seeing

00:22:55,389 --> 00:23:00,820
a lot of the movement forward into

00:22:57,609 --> 00:23:03,339
object storage whether it's Swift or s3

00:23:00,820 --> 00:23:05,109
or the two and then all of the different

00:23:03,339 --> 00:23:07,929
variants of them which our API

00:23:05,109 --> 00:23:15,249
compatible so you know SEF ink tank all

00:23:07,929 --> 00:23:16,389
of these guys now that's great but oh I

00:23:15,249 --> 00:23:20,200
thought there was one more slide I

00:23:16,389 --> 00:23:23,019
apologize whoops I think we might have

00:23:20,200 --> 00:23:25,889
changed the slides um so anyway quick

00:23:23,019 --> 00:23:28,450
summary of all of that is is again

00:23:25,889 --> 00:23:30,519
matching that infrastructure type to

00:23:28,450 --> 00:23:32,739
your application but then also being

00:23:30,519 --> 00:23:37,330
able to centrally manage that within

00:23:32,739 --> 00:23:38,499
CloudStack and again quick summary of it

00:23:37,330 --> 00:23:40,719
I'm going to do the session later this

00:23:38,499 --> 00:23:42,159
afternoon I've got deeper slides on all

00:23:40,719 --> 00:23:43,450
this some of those slides will be the

00:23:42,159 --> 00:23:44,979
same but actually i would say stick

00:23:43,450 --> 00:23:47,559
around for the for the demo of it I have

00:23:44,979 --> 00:23:50,619
it entirely set up in a lab in Thank You

00:23:47,559 --> 00:23:54,129
Geralyn for citrix allowing us to use

00:23:50,619 --> 00:23:56,109
the lab that i'll be using for the demo

00:23:54,129 --> 00:23:58,629
this afternoon ken did you everything

00:23:56,109 --> 00:24:00,669
else you wanted to add I think no we're

00:23:58,629 --> 00:24:04,690
just I mean I think we have a couple of

00:24:00,669 --> 00:24:06,429
minutes so let's folks have questions ok

00:24:04,690 --> 00:24:09,009
what questions y'all have about all of

00:24:06,429 --> 00:24:11,229
that and sorry and if you don't mind is

00:24:09,009 --> 00:24:14,589
anybody actually doing something like

00:24:11,229 --> 00:24:17,710
this today because what I see in the

00:24:14,589 --> 00:24:20,950
majority of cloud Citrix cloud platform

00:24:17,710 --> 00:24:23,529
customers is one or the other I don't

00:24:20,950 --> 00:24:25,809
necessarily see a lot of people going

00:24:23,529 --> 00:24:27,489
from one to the other or growing from

00:24:25,809 --> 00:24:29,470
one to the other and so I kind of wanted

00:24:27,489 --> 00:24:31,840
to throw it out also any

00:24:29,470 --> 00:24:34,390
but also any feedback is anybody doing

00:24:31,840 --> 00:24:36,280
this I think I think Todd actually is in

00:24:34,390 --> 00:24:37,750
some way shape or form with his stuff

00:24:36,280 --> 00:24:39,370
that he's got kind of set up he's got

00:24:37,750 --> 00:24:44,049
some cool things going but but anybody

00:24:39,370 --> 00:24:50,770
else wrote very quickly questions

00:24:44,049 --> 00:24:52,330
questions yes so as far as as during

00:24:50,770 --> 00:24:56,440
deployment is concerned what is the most

00:24:52,330 --> 00:24:58,690
common is Jenna I architecture is here

00:24:56,440 --> 00:25:04,450
what's the most common sdn provider you

00:24:58,690 --> 00:25:06,370
see ya so with the SDN we're kind of

00:25:04,450 --> 00:25:09,330
very much in the early stages of it but

00:25:06,370 --> 00:25:11,350
from an SDN standpoint into CloudStack

00:25:09,330 --> 00:25:15,549
customers that i know of that i have

00:25:11,350 --> 00:25:19,120
seen is VMware's neisseria nsx we have

00:25:15,549 --> 00:25:20,860
some meta kura and juniper open contrail

00:25:19,120 --> 00:25:24,840
are the three primary ones that i've

00:25:20,860 --> 00:25:30,580
seen so far into CloudStack specifically

00:25:24,840 --> 00:25:33,130
um deployments because I'm sorry me

00:25:30,580 --> 00:25:34,690
personally no I have not so you know

00:25:33,130 --> 00:25:36,100
that was I was at citrix and I kind of

00:25:34,690 --> 00:25:37,570
did the front end and other people were

00:25:36,100 --> 00:25:39,909
doing the back end of it I did not

00:25:37,570 --> 00:25:41,110
personally no but I can get you in touch

00:25:39,909 --> 00:25:46,929
with people if you would like to talk to

00:25:41,110 --> 00:25:49,630
him what other questions you have this

00:25:46,929 --> 00:25:51,549
is all makes sense i think i think we're

00:25:49,630 --> 00:25:54,150
getting i think whether it's again

00:25:51,549 --> 00:25:56,590
whichever cloud platform you're using I

00:25:54,150 --> 00:25:59,470
think you know one of things I talked a

00:25:56,590 --> 00:26:01,750
lot with analysts about is this idea

00:25:59,470 --> 00:26:05,650
that it would kind of through the early

00:26:01,750 --> 00:26:07,090
stage adoption of cloud platforms where

00:26:05,650 --> 00:26:08,830
people willing to say I'm just

00:26:07,090 --> 00:26:10,450
everything's greenfield and we're

00:26:08,830 --> 00:26:12,520
starting to get to that point where

00:26:10,450 --> 00:26:15,309
we're getting to the so the enterprise

00:26:12,520 --> 00:26:17,799
custard what they call the late adopters

00:26:15,309 --> 00:26:20,890
or early majority people who like I want

00:26:17,799 --> 00:26:22,299
to look into cloudstack let's say but I

00:26:20,890 --> 00:26:24,130
have all these legacy stuff that I need

00:26:22,299 --> 00:26:26,110
to know what to do with and I want to

00:26:24,130 --> 00:26:28,720
know should I just put can I just put it

00:26:26,110 --> 00:26:30,940
all over the cloudstack if I do that how

00:26:28,720 --> 00:26:33,490
do I go about doing that so until we can

00:26:30,940 --> 00:26:35,380
SAS until we can satisfactorily answer

00:26:33,490 --> 00:26:36,970
those questions but we're not you're not

00:26:35,380 --> 00:26:39,039
going to get very broad adoption of

00:26:36,970 --> 00:26:41,260
cloud stack and that at least not in the

00:26:39,039 --> 00:26:42,860
enterprise so it's important for for all

00:26:41,260 --> 00:26:44,450
of you who in the class that world

00:26:42,860 --> 00:26:46,870
if you want to break into that into that

00:26:44,450 --> 00:26:49,520
next level with where most of the

00:26:46,870 --> 00:26:51,830
customers are right you need to be able

00:26:49,520 --> 00:26:54,110
to give them that story to say whatever

00:26:51,830 --> 00:26:57,710
your workload is right there's a way to

00:26:54,110 --> 00:27:03,830
run that and have a classic manage it so

00:26:57,710 --> 00:27:05,960
that so it's a viable solution any quick

00:27:03,830 --> 00:27:09,890
we've got one minute we've been given

00:27:05,960 --> 00:27:11,720
the flying here any last questions very

00:27:09,890 --> 00:27:14,080
cool I will be around afterwards thank

00:27:11,720 --> 00:27:14,080

YouTube URL: https://www.youtube.com/watch?v=a0m5cu0ICVI


