Title: Got Javascript Apps? We Can Do That!
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: Geode
Description: 
	Got Javascript Apps? We Can Do That!
Karen Miller, Blake Bender

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Your app is written in Javascript, and that's not going to change. Your app needs a cache, and you want to use Apache Geode for your caching layer. Until now, you've been out of luck. VMware has developed a Node.js Client for Apache Geode. The donation to Apache Geode is in progress. Stay tuned! You can keep your Javascript app, and use the Node.js Client to interact with an Apache Geode cluster.

Karen Miller:
Karen is the current Apache Geode PMC chair. She writes technical documentation for VMware, where she pursues opportunities to promote the understanding of Apache Geode. Prior to VMware, Karen taught Computer Sciences courses at the University of Wisconsin-Madison and is also a textbook author.

Blake Bender:
Blake is the Apache Geode Native project anchor. He works for VMWare in this capacity, and in the same role at Pivotal prior to the VMWare acquisition. He previously worked at Intel Architecture Labs in Hillsboro, OR, and at Microsoft in Redmond, WA, specializing in media and contributing to Microsoft Silverlight, Media Foundation, DirectX, and several releases of Windows.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,119 --> 00:00:30,400
uh hello everyone

00:00:27,039 --> 00:00:34,000
my name is blake bender i work on

00:00:30,400 --> 00:00:35,840
the geodative client at vmware

00:00:34,000 --> 00:00:38,239
and with me today is my colleague karen

00:00:35,840 --> 00:00:41,920
miller

00:00:38,239 --> 00:00:44,960
hi i also work for vmware and

00:00:41,920 --> 00:00:48,079
my association with geod is

00:00:44,960 --> 00:00:52,239
as current pmc

00:00:48,079 --> 00:00:54,800
chair also committer i tend to do

00:00:52,239 --> 00:00:57,199
mostly documentation work but i have

00:00:54,800 --> 00:01:02,239
really enjoyed working on the

00:00:57,199 --> 00:01:04,960
node.js client working with it

00:01:02,239 --> 00:01:06,400
thanks um so today we're going to talk a

00:01:04,960 --> 00:01:08,400
little bit about javascript uh

00:01:06,400 --> 00:01:10,840
and the uh the node.js client that we've

00:01:08,400 --> 00:01:13,840
developed for

00:01:10,840 --> 00:01:13,840
geodative

00:01:14,320 --> 00:01:18,880
there we go um this presentation today

00:01:17,680 --> 00:01:21,680
we're going to talk about the

00:01:18,880 --> 00:01:22,960
development process of the client um

00:01:21,680 --> 00:01:24,240
because there were some interesting

00:01:22,960 --> 00:01:27,759
things that we

00:01:24,240 --> 00:01:30,880
learned there that uh end up being

00:01:27,759 --> 00:01:33,520
applicable to your application

00:01:30,880 --> 00:01:35,040
development when you're working in node

00:01:33,520 --> 00:01:37,680
um i'm going to discuss some

00:01:35,040 --> 00:01:40,560
considerations with respect to types

00:01:37,680 --> 00:01:41,280
and it is in fact really just one very

00:01:40,560 --> 00:01:43,280
important

00:01:41,280 --> 00:01:44,399
particular consideration with respect to

00:01:43,280 --> 00:01:49,040
types but

00:01:44,399 --> 00:01:51,200
uh i'll discuss it when we get there

00:01:49,040 --> 00:01:52,720
uh talk a little bit about how to set up

00:01:51,200 --> 00:01:55,840
your node development

00:01:52,720 --> 00:01:59,360
uh for apache geode

00:01:55,840 --> 00:02:00,960
karen's going to give a demo um

00:01:59,360 --> 00:02:02,880
show off the practical aspects of

00:02:00,960 --> 00:02:05,040
running an app um

00:02:02,880 --> 00:02:06,320
some basic app code run that against

00:02:05,040 --> 00:02:08,800
your cluster

00:02:06,320 --> 00:02:09,539
and then we'll we'll open it up for

00:02:08,800 --> 00:02:12,779
questions at the end

00:02:09,539 --> 00:02:12,779
[Music]

00:02:13,280 --> 00:02:16,400
all right just some basics of uh geode

00:02:15,680 --> 00:02:19,280
we assume

00:02:16,400 --> 00:02:20,080
most people on this track uh know them

00:02:19,280 --> 00:02:22,000
but

00:02:20,080 --> 00:02:23,120
you know geod is a client server

00:02:22,000 --> 00:02:26,239
architecture

00:02:23,120 --> 00:02:28,239
over here on the uh

00:02:26,239 --> 00:02:30,319
right side you see a server and a

00:02:28,239 --> 00:02:32,560
locator a locator is a service

00:02:30,319 --> 00:02:32,560
that

00:02:33,440 --> 00:02:37,599
is what you typically connect to tells

00:02:35,120 --> 00:02:41,120
you where your servers are

00:02:37,599 --> 00:02:45,040
handles communication details for you

00:02:41,120 --> 00:02:45,040
on the client side if you're

00:02:48,319 --> 00:02:51,840
writing client applications you have

00:02:50,080 --> 00:02:55,599
previously been limited to

00:02:51,840 --> 00:02:59,599
java c plus plus or c sharp uh

00:02:55,599 --> 00:03:01,200
um and now uh with the

00:02:59,599 --> 00:03:04,000
new component we've developed you you

00:03:01,200 --> 00:03:07,280
may also talk to

00:03:04,000 --> 00:03:10,480
geod via node through

00:03:07,280 --> 00:03:10,480
our node extension

00:03:11,519 --> 00:03:14,560
in the middle of all this

00:03:15,519 --> 00:03:20,319
is the geodative client um and

00:03:18,800 --> 00:03:22,720
just notice that there's a there's a

00:03:20,319 --> 00:03:24,480
line there from java to the geodative

00:03:22,720 --> 00:03:25,920
client that's not right the java app

00:03:24,480 --> 00:03:29,760
talks directly to

00:03:25,920 --> 00:03:29,760
geode so we won't

00:03:30,959 --> 00:03:35,280
delve into that uh today because that's

00:03:33,599 --> 00:03:36,239
this the traditional path to talk to

00:03:35,280 --> 00:03:38,480
geod

00:03:36,239 --> 00:03:40,480
um c plus plus c sharp and the node app

00:03:38,480 --> 00:03:41,920
i'll go through this amorphous

00:03:40,480 --> 00:03:43,680
gray circle in the middle here called

00:03:41,920 --> 00:03:45,360
the geodative client

00:03:43,680 --> 00:03:47,040
geonative client is written in c plus

00:03:45,360 --> 00:03:50,080
plus

00:03:47,040 --> 00:03:53,680
with c sharp extensions on top of it

00:03:50,080 --> 00:03:56,640
and our new component talks to it

00:03:53,680 --> 00:03:58,840
through a a node extension that's also

00:03:56,640 --> 00:04:00,640
written in c

00:03:58,840 --> 00:04:04,080
plus

00:04:00,640 --> 00:04:07,280
um no client is going to be donated soon

00:04:04,080 --> 00:04:10,080
now currently it is available from uh

00:04:07,280 --> 00:04:11,360
vmware uh for paying customers but it

00:04:10,080 --> 00:04:15,200
will soon be

00:04:11,360 --> 00:04:17,120
uh part of the apache geode project

00:04:15,200 --> 00:04:18,639
and we're working through the process to

00:04:17,120 --> 00:04:21,040
get that

00:04:18,639 --> 00:04:22,800
contributed to the community and looking

00:04:21,040 --> 00:04:24,160
forward to

00:04:22,800 --> 00:04:27,120
that being generally available for

00:04:24,160 --> 00:04:30,880
everyone to download and play with and

00:04:27,120 --> 00:04:30,880
cool node applications

00:04:32,960 --> 00:04:36,560
ease of use just want to call this one

00:04:36,000 --> 00:04:39,919
out

00:04:36,560 --> 00:04:42,960
especially we

00:04:39,919 --> 00:04:44,880
had a very strong focus on making this

00:04:42,960 --> 00:04:45,840
as easy to use as possible that's kind

00:04:44,880 --> 00:04:49,360
of

00:04:45,840 --> 00:04:49,360
the um

00:04:50,400 --> 00:04:54,720
the mantra of javascript in general

00:04:54,320 --> 00:04:58,880
right

00:04:54,720 --> 00:05:03,680
it should just be um very easy

00:04:58,880 --> 00:05:05,680
and straightforward and so we were

00:05:03,680 --> 00:05:07,520
we simplified the api as much as we

00:05:05,680 --> 00:05:11,199
could

00:05:07,520 --> 00:05:14,560
in javascript

00:05:11,199 --> 00:05:16,800
um there were some challenges

00:05:14,560 --> 00:05:18,720
uh porting the geode client api to

00:05:16,800 --> 00:05:20,800
node.js

00:05:18,720 --> 00:05:22,720
that i would i would be remiss if i

00:05:20,800 --> 00:05:25,039
didn't mention

00:05:22,720 --> 00:05:26,240
geonative client is multi-threaded and

00:05:25,039 --> 00:05:28,240
synchronous api

00:05:26,240 --> 00:05:29,840
written in c plus plus node.js is single

00:05:28,240 --> 00:05:33,360
threaded asynchronous

00:05:29,840 --> 00:05:35,360
in javascript um it's a perfect fit

00:05:33,360 --> 00:05:38,080
just a you know square peg in a round

00:05:35,360 --> 00:05:40,160
hole um

00:05:38,080 --> 00:05:42,080
uh and the development of it really

00:05:40,160 --> 00:05:44,240
really felt like that

00:05:42,080 --> 00:05:46,000
actually there was there were a lot of

00:05:44,240 --> 00:05:49,520
struggles um

00:05:46,000 --> 00:05:51,680
the node um

00:05:49,520 --> 00:05:55,440
c plus plus extension framework was also

00:05:51,680 --> 00:05:58,479
brand new and we would get new drops

00:05:55,440 --> 00:06:02,160
uh weekly bi-weekly even um

00:05:58,479 --> 00:06:04,400
that would fix bugs that we had found

00:06:02,160 --> 00:06:06,800
and so we would wait you know so

00:06:04,400 --> 00:06:10,000
everything was kind of moving at once

00:06:06,800 --> 00:06:12,720
um we did eventually get there uh but

00:06:10,000 --> 00:06:13,600
um there there were a couple of

00:06:12,720 --> 00:06:15,919
important

00:06:13,600 --> 00:06:16,800
uh choices made in the design and

00:06:15,919 --> 00:06:21,840
development of it that

00:06:16,800 --> 00:06:21,840
that bear mentioning here um

00:06:21,919 --> 00:06:26,240
first thing with respect to um the

00:06:24,319 --> 00:06:27,440
synchronous versus asynchronous nature

00:06:26,240 --> 00:06:31,199
of the apis

00:06:27,440 --> 00:06:34,000
um we have to discuss promises um

00:06:31,199 --> 00:06:35,120
thus promises are kind of the basic

00:06:34,000 --> 00:06:38,319
building blocks of your

00:06:35,120 --> 00:06:42,800
your function calls in in in node

00:06:38,319 --> 00:06:42,800
um they are asynchronous um

00:06:43,520 --> 00:06:48,479
and uh you know for us for us it didn't

00:06:46,560 --> 00:06:52,400
always make sense to use them

00:06:48,479 --> 00:06:55,520
right so so rather than go all

00:06:52,400 --> 00:06:59,440
synchronous api or all asynchronous

00:06:55,520 --> 00:07:01,440
we kind of shot down the middle and um

00:06:59,440 --> 00:07:02,800
anything that is a non-trivial amount of

00:07:01,440 --> 00:07:06,560
work anything that goes

00:07:02,800 --> 00:07:09,759
um that hits a network uh does i o

00:07:06,560 --> 00:07:14,160
of any significance etc is

00:07:09,759 --> 00:07:17,360
an async call returning a promise

00:07:14,160 --> 00:07:20,560
many of the methods in the geod api are

00:07:17,360 --> 00:07:23,599
trivial uh property getters and setters

00:07:20,560 --> 00:07:25,520
um various things like that um any of

00:07:23,599 --> 00:07:28,960
those that don't really do any work

00:07:25,520 --> 00:07:32,080
are are synchronous apis you just call

00:07:28,960 --> 00:07:34,319
and it's done and you can continue on

00:07:32,080 --> 00:07:37,199
with your work

00:07:34,319 --> 00:07:38,319
we have made every effort to make it uh

00:07:37,199 --> 00:07:40,240
very clear

00:07:38,319 --> 00:07:41,360
which is which in the api and the

00:07:40,240 --> 00:07:44,160
documentation

00:07:41,360 --> 00:07:45,039
um you know i think i think that uh

00:07:44,160 --> 00:07:48,639
you'll find

00:07:45,039 --> 00:07:48,639
that it's it's pretty easy to follow

00:07:49,440 --> 00:07:54,800
uh this is uh

00:07:52,479 --> 00:07:56,160
the consideration with respect to types

00:07:54,800 --> 00:07:59,280
that i spoke of earlier

00:07:56,160 --> 00:08:01,759
so when we when we looked at keys uh

00:07:59,280 --> 00:08:03,360
particularly numerical keys uh for

00:08:01,759 --> 00:08:06,000
javascript we discovered

00:08:03,360 --> 00:08:06,800
um interesting that that we didn't know

00:08:06,000 --> 00:08:10,160
what kind of

00:08:06,800 --> 00:08:11,919
numbers uh we had uh javascript numbers

00:08:10,160 --> 00:08:15,360
are all doubles

00:08:11,919 --> 00:08:18,479
but that may or may not be your intent

00:08:15,360 --> 00:08:22,000
right if you if you uh write

00:08:18,479 --> 00:08:25,280
you know assign the value 7

00:08:22,000 --> 00:08:29,440
to a variable and then tell

00:08:25,280 --> 00:08:32,560
geode to uh

00:08:29,440 --> 00:08:35,519
to serialize that value um

00:08:32,560 --> 00:08:37,919
it comes through a 7.0 and we don't have

00:08:35,519 --> 00:08:41,200
any way of knowing whether or not

00:08:37,919 --> 00:08:44,399
um that was intended to be a a double

00:08:41,200 --> 00:08:44,880
uh this is particularly problematic for

00:08:44,399 --> 00:08:48,320
keys

00:08:44,880 --> 00:08:49,040
keys should never be um floating point

00:08:48,320 --> 00:08:51,680
values

00:08:49,040 --> 00:08:54,880
um it's just it's a very bad idea for a

00:08:51,680 --> 00:08:54,880
number of reasons

00:08:56,000 --> 00:09:04,160
so again the compromise decision that

00:09:00,240 --> 00:09:08,080
we made was if a value is

00:09:04,160 --> 00:09:11,120
very very close to a whole number

00:09:08,080 --> 00:09:13,200
uh or is in fact a whole number and it

00:09:11,120 --> 00:09:16,240
is a key

00:09:13,200 --> 00:09:17,200
uh we will convert that to an integer

00:09:16,240 --> 00:09:20,640
value

00:09:17,200 --> 00:09:24,240
for you so bottom line for

00:09:20,640 --> 00:09:24,240
uh for numeric keys is

00:09:24,560 --> 00:09:29,279
really we'd recommend you don't use them

00:09:26,480 --> 00:09:32,160
use strings or

00:09:29,279 --> 00:09:32,160
something else

00:09:32,480 --> 00:09:38,480
but if you're going to use numeric keys

00:09:35,519 --> 00:09:40,320
always always use whole numbers um

00:09:38,480 --> 00:09:44,160
floating point values

00:09:40,320 --> 00:09:47,440
um are allowed if you wanted to set a

00:09:44,160 --> 00:09:51,600
key to 3.5 for example

00:09:47,440 --> 00:09:55,210
let's store it as key 3.5

00:09:51,600 --> 00:09:58,249
but it it makes things very complicated

00:09:55,210 --> 00:09:58,249
[Music]

00:09:58,720 --> 00:10:05,200
with respect to values there are not any

00:10:01,760 --> 00:10:08,720
such limitations anything that's a value

00:10:05,200 --> 00:10:08,720
in javascript can be represented

00:10:09,279 --> 00:10:16,839
in the geo layer

00:10:12,560 --> 00:10:18,000
numbers strings all your standard

00:10:16,839 --> 00:10:21,120
primitives

00:10:18,000 --> 00:10:22,160
objects get serialized from json they

00:10:21,120 --> 00:10:24,480
get converted to

00:10:22,160 --> 00:10:27,200
a format called pdx pe stands for

00:10:24,480 --> 00:10:30,000
portable so it's portable across

00:10:27,200 --> 00:10:31,680
all of the languages that we support uh

00:10:30,000 --> 00:10:35,279
compatible with the java client the c

00:10:31,680 --> 00:10:35,279
plus plus client c sharp client

00:10:37,200 --> 00:10:40,399
pdx objects have

00:10:40,560 --> 00:10:46,959
two attributes that are typically

00:10:45,120 --> 00:10:48,480
used as keys well not typically but

00:10:46,959 --> 00:10:50,160
they're sometimes used interchangeably

00:10:48,480 --> 00:10:51,040
as keys and one of them is definitely

00:10:50,160 --> 00:10:55,200
not

00:10:51,040 --> 00:10:56,800
a key class name in the java world is

00:10:55,200 --> 00:10:59,920
just the java class name

00:10:56,800 --> 00:11:01,760
uh and that ends up working out most of

00:10:59,920 --> 00:11:03,760
the time but is not

00:11:01,760 --> 00:11:05,360
you know 100 safe type ids are

00:11:03,760 --> 00:11:08,560
guaranteed to be

00:11:05,360 --> 00:11:11,200
uh unique um and the reason that the

00:11:08,560 --> 00:11:13,200
the class name issue is is interesting

00:11:11,200 --> 00:11:16,000
and worth mentioning is because

00:11:13,200 --> 00:11:17,200
if you are serializing a json object to

00:11:16,000 --> 00:11:19,600
pdx

00:11:17,200 --> 00:11:20,399
it does not matter what kind of object

00:11:19,600 --> 00:11:23,760
you have

00:11:20,399 --> 00:11:26,880
the class name is always some variation

00:11:23,760 --> 00:11:26,880
of the string json

00:11:27,680 --> 00:11:30,959
and so um

00:11:31,200 --> 00:11:34,240
it would behoove people not to pay

00:11:32,560 --> 00:11:37,279
attention to the class name

00:11:34,240 --> 00:11:40,240
for for pdx objects in javascript

00:11:37,279 --> 00:11:42,640
um ordinarily it will never come up uh

00:11:40,240 --> 00:11:43,600
that's something that uh that our team

00:11:42,640 --> 00:11:47,040
has to deal with

00:11:43,600 --> 00:11:50,720
in the um in the

00:11:47,040 --> 00:11:55,120
extension code uh

00:11:50,720 --> 00:11:57,279
anyway uh yeah so just so jason gets

00:11:55,120 --> 00:11:59,519
converted to pdx

00:11:57,279 --> 00:12:01,040
and it uh it works back and forth across

00:11:59,519 --> 00:12:03,920
all of our clients

00:12:01,040 --> 00:12:05,279
and objects do just exactly what you

00:12:03,920 --> 00:12:11,279
would expect

00:12:05,279 --> 00:12:14,079
to do in your java code

00:12:11,279 --> 00:12:15,120
um all right when you're setting up to

00:12:14,079 --> 00:12:18,560
develop

00:12:15,120 --> 00:12:19,920
for uh node and geode um

00:12:18,560 --> 00:12:22,480
these are just a few things you'll need

00:12:19,920 --> 00:12:24,720
you'll need a jot or a gem fire cluster

00:12:22,480 --> 00:12:26,959
jim fire is the proprietary name for for

00:12:24,720 --> 00:12:28,639
geode

00:12:26,959 --> 00:12:30,480
and the g fish utility which comes with

00:12:28,639 --> 00:12:33,680
the install for

00:12:30,480 --> 00:12:37,279
geode you'll need our node.js extension

00:12:33,680 --> 00:12:41,040
client and you need a minimum version of

00:12:37,279 --> 00:12:41,040
1016 3 for node.js

00:12:45,200 --> 00:12:48,560
another thing to consider when you're

00:12:47,360 --> 00:12:53,040
setting up is

00:12:48,560 --> 00:12:54,800
which region type you'll be using um

00:12:53,040 --> 00:12:56,399
uh and and i would recommend you

00:12:54,800 --> 00:12:59,839
consider it for long

00:12:56,399 --> 00:13:03,360
just choose a proxy region proxy region

00:12:59,839 --> 00:13:06,639
um is uh the only choice for a 12 factor

00:13:03,360 --> 00:13:10,959
app because otherwise you will have to

00:13:06,639 --> 00:13:14,000
carry around state with your application

00:13:10,959 --> 00:13:15,760
proxy just ensures that all puts go

00:13:14,000 --> 00:13:16,399
straight through to the server and gets

00:13:15,760 --> 00:13:19,120
come

00:13:16,399 --> 00:13:20,560
from the server nothing stored locally

00:13:19,120 --> 00:13:22,320
it's all good

00:13:20,560 --> 00:13:24,399
caching proxy is another thing that's

00:13:22,320 --> 00:13:27,279
out there

00:13:24,399 --> 00:13:30,480
as you get deeper into development of a

00:13:27,279 --> 00:13:32,320
particular solution you may

00:13:30,480 --> 00:13:33,839
in some cases discover that you need it

00:13:32,320 --> 00:13:35,200
but right now

00:13:33,839 --> 00:13:36,880
you know if you're starting out just

00:13:35,200 --> 00:13:41,040
choose proxy and

00:13:36,880 --> 00:13:41,040
move on it's easy enough to change later

00:13:42,480 --> 00:13:48,880
current state of the api gets inputs

00:13:46,399 --> 00:13:50,160
queries uh function execution is

00:13:48,880 --> 00:13:52,480
supported

00:13:50,160 --> 00:13:53,680
um you know that's the bulk of the

00:13:52,480 --> 00:13:56,800
functionality in the

00:13:53,680 --> 00:13:58,399
in the native client um there are

00:13:56,800 --> 00:14:00,320
development opportunities for

00:13:58,399 --> 00:14:01,839
implementing transactions and continuous

00:14:00,320 --> 00:14:04,160
queries

00:14:01,839 --> 00:14:06,800
probably some more esoteric features of

00:14:04,160 --> 00:14:12,720
geode as well

00:14:06,800 --> 00:14:12,720
will be implemented in the future

00:14:14,240 --> 00:14:17,360
all right i'm gonna hand off to karen

00:14:16,480 --> 00:14:20,240
now

00:14:17,360 --> 00:14:21,279
and karen will run you through some

00:14:20,240 --> 00:14:24,160
practical

00:14:21,279 --> 00:14:24,160
use of the code

00:14:25,519 --> 00:14:31,839
thanks blake for that handoff

00:14:36,880 --> 00:14:43,680
okay so i'm going to attempt

00:14:40,160 --> 00:14:48,399
fate today by a little bit by

00:14:43,680 --> 00:14:48,399
attempting to actually run an app

00:14:49,600 --> 00:14:56,079
right here live

00:14:52,720 --> 00:15:01,199
so let's take a look at um

00:14:56,079 --> 00:15:01,199
at what apps uh give us

00:15:04,720 --> 00:15:11,839
okay so i would claim that all

00:15:08,160 --> 00:15:13,920
all of our apps have um three distinct

00:15:11,839 --> 00:15:16,639
parts to them and i'll go over each of

00:15:13,920 --> 00:15:20,399
these parts in turn

00:15:16,639 --> 00:15:22,320
the first part that any

00:15:20,399 --> 00:15:24,880
node app is going to have to have will

00:15:22,320 --> 00:15:29,279
set up the client-side cache

00:15:24,880 --> 00:15:32,399
and then we'll set up the communications

00:15:29,279 --> 00:15:35,440
to to the running geode cluster

00:15:32,399 --> 00:15:38,800
once you've done that then comes the

00:15:35,440 --> 00:15:40,240
second part which is really the

00:15:38,800 --> 00:15:42,000
whatever it is that the app was

00:15:40,240 --> 00:15:44,639
intending to do

00:15:42,000 --> 00:15:45,040
the app i'm going to present today does

00:15:44,639 --> 00:15:49,279
a

00:15:45,040 --> 00:15:49,279
series of crud operations

00:15:50,000 --> 00:15:55,519
and the third part may be trivial but

00:15:53,360 --> 00:15:56,560
just a reminder that when the app is

00:15:55,519 --> 00:15:59,120
finishing and is

00:15:56,560 --> 00:16:00,959
is going to exit you really should close

00:15:59,120 --> 00:16:03,759
the client-side cache

00:16:00,959 --> 00:16:05,120
that doesn't change the servers and the

00:16:03,759 --> 00:16:08,959
cluster itself

00:16:05,120 --> 00:16:11,279
but it does um it does

00:16:08,959 --> 00:16:13,040
the proper thing with communication let

00:16:11,279 --> 00:16:16,240
me go through each of these

00:16:13,040 --> 00:16:19,680
three parts and the

00:16:16,240 --> 00:16:21,680
first part was to set up the

00:16:19,680 --> 00:16:23,920
client-side cache and the communications

00:16:21,680 --> 00:16:28,320
with the cluster

00:16:23,920 --> 00:16:31,519
i've got this in five distinct

00:16:28,320 --> 00:16:34,480
i've i'm showing it in five pieces

00:16:31,519 --> 00:16:35,199
this particular code comes straight from

00:16:34,480 --> 00:16:38,880
my

00:16:35,199 --> 00:16:39,600
demo app so this is the actual code that

00:16:38,880 --> 00:16:42,720
you

00:16:39,600 --> 00:16:45,920
could use for um

00:16:42,720 --> 00:16:46,480
setting up your uh the setup in your own

00:16:45,920 --> 00:16:50,000
app

00:16:46,480 --> 00:16:52,480
okay so each step the first

00:16:50,000 --> 00:16:55,199
should be a familiar require statement

00:16:52,480 --> 00:16:55,199
which will

00:16:55,519 --> 00:16:59,680
which will include the node.js modules

00:16:58,880 --> 00:17:03,519
that you need

00:16:59,680 --> 00:17:07,039
and provide access to the

00:17:03,519 --> 00:17:10,160
api second step

00:17:07,039 --> 00:17:13,600
uses a factory pattern

00:17:10,160 --> 00:17:16,839
to to set up

00:17:13,600 --> 00:17:19,039
what will be the uh to to set up the

00:17:16,839 --> 00:17:22,959
cache

00:17:19,039 --> 00:17:26,319
this particular cache factory also has a

00:17:22,959 --> 00:17:30,799
set of properties that will enable

00:17:26,319 --> 00:17:33,760
logging for the cluster

00:17:30,799 --> 00:17:34,720
once we have that we can create the

00:17:33,760 --> 00:17:37,679
cache

00:17:34,720 --> 00:17:38,720
and then set up the communication with

00:17:37,679 --> 00:17:42,320
the cluster

00:17:38,720 --> 00:17:46,320
using the uh factory

00:17:42,320 --> 00:17:49,840
factory pattern again to for the pool

00:17:46,320 --> 00:17:51,919
of note here is that

00:17:49,840 --> 00:17:53,039
when i do this demonstration i'm going

00:17:51,919 --> 00:17:56,720
to be running

00:17:53,039 --> 00:17:59,919
the geode cluster on my local machine

00:17:56,720 --> 00:18:01,760
and that com

00:17:59,919 --> 00:18:02,960
the communication i'm going to set up

00:18:01,760 --> 00:18:06,000
communication

00:18:02,960 --> 00:18:09,400
from the app to talk to assuming

00:18:06,000 --> 00:18:10,640
that the locator is running on port

00:18:09,400 --> 00:18:13,440
00:18:10,640 --> 00:18:15,039
so eventually when i start the cluster

00:18:13,440 --> 00:18:17,760
for you you'll note that

00:18:15,039 --> 00:18:20,640
the the ports match so the the locator

00:18:17,760 --> 00:18:20,640
will be listening there

00:18:22,000 --> 00:18:30,640
create the pool and then the last step

00:18:26,799 --> 00:18:34,240
will be to create any

00:18:30,640 --> 00:18:36,880
client-side regions

00:18:34,240 --> 00:18:37,520
our region for this particular sample

00:18:36,880 --> 00:18:40,720
app

00:18:37,520 --> 00:18:45,440
is called test and i'm using a proxy

00:18:40,720 --> 00:18:48,480
type region so that no data is stored

00:18:45,440 --> 00:18:48,480
within the

00:18:49,120 --> 00:18:52,400
within the client cache

00:18:53,039 --> 00:18:58,559
okay so that's the setup and the actual

00:18:56,640 --> 00:19:02,559
code from the setup

00:18:58,559 --> 00:19:03,679
then the my application does a series of

00:19:02,559 --> 00:19:07,600
crud operations

00:19:03,679 --> 00:19:11,200
and uh just a little bit extra for you

00:19:07,600 --> 00:19:14,640
so it does a create operation

00:19:11,200 --> 00:19:18,240
by pl and places a single entry

00:19:14,640 --> 00:19:18,240
into the region

00:19:18,559 --> 00:19:25,840
then it reads back that single entry

00:19:22,720 --> 00:19:28,480
prints out the result

00:19:25,840 --> 00:19:30,640
it does an update operation to change

00:19:28,480 --> 00:19:32,320
that single entry to have a different

00:19:30,640 --> 00:19:34,960
value

00:19:32,320 --> 00:19:37,520
then it does a delete operation and

00:19:34,960 --> 00:19:39,760
removes that single entry

00:19:37,520 --> 00:19:41,039
the last two steps are not really the

00:19:39,760 --> 00:19:44,080
you know to show you crud

00:19:41,039 --> 00:19:48,080
operations but to show you the

00:19:44,080 --> 00:19:52,080
uh query functionality available

00:19:48,080 --> 00:19:55,120
with geode regents queries um

00:19:52,080 --> 00:19:57,919
go through and use a language called oql

00:19:55,120 --> 00:19:58,799
which is an sql like language and uh

00:19:57,919 --> 00:20:01,200
it's very

00:19:58,799 --> 00:20:03,440
very simple to use i've i've got the

00:20:01,200 --> 00:20:07,520
actual query here

00:20:03,440 --> 00:20:09,919
listed okay so

00:20:07,520 --> 00:20:11,520
those operations are exactly what the

00:20:09,919 --> 00:20:15,039
meat of the

00:20:11,520 --> 00:20:20,960
uh of this

00:20:15,039 --> 00:20:24,559
the meat of what this app is gonna do

00:20:20,960 --> 00:20:27,679
i wanted to just

00:20:24,559 --> 00:20:28,559
show you that the that the crud

00:20:27,679 --> 00:20:31,280
operations

00:20:28,559 --> 00:20:34,080
map to the how i wanted to show how the

00:20:31,280 --> 00:20:37,039
crud operations map to the api

00:20:34,080 --> 00:20:38,240
so the create and update operations are

00:20:37,039 --> 00:20:41,520
both

00:20:38,240 --> 00:20:44,640
region put function

00:20:41,520 --> 00:20:48,640
a read is a region get function

00:20:44,640 --> 00:20:54,080
and a delete operation is a

00:20:48,640 --> 00:20:56,640
region remove function each of these

00:20:54,080 --> 00:21:00,480
functions returns a promise so you'll

00:20:56,640 --> 00:21:00,480
see in the code the familiar

00:21:00,840 --> 00:21:06,559
await we've done now

00:21:03,120 --> 00:21:09,600
uh talked about parts one and parts two

00:21:06,559 --> 00:21:12,720
and part three is really just

00:21:09,600 --> 00:21:17,200
close the cache when the uh when the

00:21:12,720 --> 00:21:20,480
uh app is done using it

00:21:17,200 --> 00:21:24,320
so let's

00:21:20,480 --> 00:21:31,840
now switch over and see

00:21:24,320 --> 00:21:31,840
if i can

00:21:33,760 --> 00:21:36,880
actually do this demo

00:21:37,039 --> 00:21:45,520
okay so i'm going to put up

00:21:40,159 --> 00:21:48,799
a shell window for you

00:21:45,520 --> 00:21:52,480
which looks really tiny i wonder if i

00:21:48,799 --> 00:21:52,480
can turn up my video and that will help

00:21:52,960 --> 00:22:01,120
nope nope when we

00:21:56,080 --> 00:22:01,120
practice this yeah

00:22:02,799 --> 00:22:06,720
short of my leaving this session okay

00:22:05,600 --> 00:22:11,120
that's a little better

00:22:06,720 --> 00:22:14,640
we'll be fine okay

00:22:11,120 --> 00:22:18,480
okay so i am going to run

00:22:14,640 --> 00:22:21,520
my javascript app in order to do so

00:22:18,480 --> 00:22:25,120
i need a geode cluster uh i've

00:22:21,520 --> 00:22:29,280
already acquired installed geode version

00:22:25,120 --> 00:22:31,919
113 and what i need to do now

00:22:29,280 --> 00:22:32,400
is to start up my cluster i happen to

00:22:31,919 --> 00:22:36,710
have

00:22:32,400 --> 00:22:38,400
this in a shell shell script

00:22:36,710 --> 00:22:40,640
[Music]

00:22:38,400 --> 00:22:41,840
and it prints out a lot of information

00:22:40,640 --> 00:22:44,640
i'm going to talk you through

00:22:41,840 --> 00:22:46,159
as we start up a cluster okay so here

00:22:44,640 --> 00:22:48,559
goes the geode cluster

00:22:46,159 --> 00:22:49,600
the first thing it does is it starts a

00:22:48,559 --> 00:22:52,400
single

00:22:49,600 --> 00:22:54,159
locator i'm hoping that you can see here

00:22:52,400 --> 00:22:56,480
at the bottom that it's starting up the

00:22:54,159 --> 00:22:59,520
locator and it's specifying to listen

00:22:56,480 --> 00:23:00,400
on port 10337 which matches what i did

00:22:59,520 --> 00:23:03,760
in my

00:23:00,400 --> 00:23:06,320
app once it does that

00:23:03,760 --> 00:23:08,400
the second thing that this startup

00:23:06,320 --> 00:23:13,039
script is going to do will be

00:23:08,400 --> 00:23:16,880
to configure using pdx for cd

00:23:13,039 --> 00:23:16,880
the pdx serialization

00:23:17,130 --> 00:23:20,960
[Music]

00:23:18,799 --> 00:23:22,000
that's what we're doing now then the

00:23:20,960 --> 00:23:26,159
third thing

00:23:22,000 --> 00:23:29,440
this will do is to start

00:23:26,159 --> 00:23:31,440
a server and i'm just having one server

00:23:29,440 --> 00:23:33,280
this is a very simple

00:23:31,440 --> 00:23:35,280
example i have no need for other servers

00:23:33,280 --> 00:23:38,640
i'm only putting one item

00:23:35,280 --> 00:23:39,600
into my region so now we're starting the

00:23:38,640 --> 00:23:42,799
servers

00:23:39,600 --> 00:23:46,880
server the fourth thing

00:23:42,799 --> 00:23:50,320
that will happen is to create the region

00:23:46,880 --> 00:23:53,200
on the servers it will match my app

00:23:50,320 --> 00:23:53,840
and be called test and it will happen to

00:23:53,200 --> 00:23:56,799
be

00:23:53,840 --> 00:23:58,960
a partitioned region the choice of

00:23:56,799 --> 00:24:01,360
region we're not talking about here

00:23:58,960 --> 00:24:01,360
and now

00:24:03,840 --> 00:24:11,360
okay so i should have

00:24:08,159 --> 00:24:13,520
i i should have now a cluster

00:24:11,360 --> 00:24:16,000
running with single server single

00:24:13,520 --> 00:24:20,400
locator and it's got its region

00:24:16,000 --> 00:24:23,679
um i wanted to take a little bit of time

00:24:20,400 --> 00:24:27,919
here um and just

00:24:23,679 --> 00:24:30,840
uh show you that um

00:24:27,919 --> 00:24:32,400
show you because i think a lot of the

00:24:30,840 --> 00:24:34,159
audience

00:24:32,400 --> 00:24:36,000
may not if you're familiar with

00:24:34,159 --> 00:24:37,840
javascript but not so familiar with

00:24:36,000 --> 00:24:38,880
geode you might not know anything about

00:24:37,840 --> 00:24:41,120
our

00:24:38,880 --> 00:24:42,640
command line interface called that we

00:24:41,120 --> 00:24:44,640
call gfish

00:24:42,640 --> 00:24:46,159
so i'm going to run gfish real quick

00:24:44,640 --> 00:24:49,760
here so that

00:24:46,159 --> 00:24:52,480
you can see

00:24:49,760 --> 00:24:55,200
some of the things we can do with g fish

00:24:52,480 --> 00:24:57,919
for configuration of the pool

00:24:55,200 --> 00:24:59,919
so i've brought up g fish and to do

00:24:57,919 --> 00:25:01,200
anything significant i need to actually

00:24:59,919 --> 00:25:03,440
connect to myself

00:25:01,200 --> 00:25:05,760
with the pool so i specify that i have

00:25:03,440 --> 00:25:09,520
my locator running on my machine

00:25:05,760 --> 00:25:13,279
uh and the port there so now that i'm

00:25:09,520 --> 00:25:16,640
connected i can do things like wrist

00:25:13,279 --> 00:25:18,960
um the jvms

00:25:16,640 --> 00:25:21,679
the members of the cluster i have a

00:25:18,960 --> 00:25:26,720
single locator single server

00:25:21,679 --> 00:25:26,720
or i can do i can

00:25:27,200 --> 00:25:33,760
i can print out details

00:25:30,480 --> 00:25:36,640
of our output details of the region

00:25:33,760 --> 00:25:37,200
the size uh here is something you might

00:25:36,640 --> 00:25:39,600
notice

00:25:37,200 --> 00:25:40,720
that there's nothing in the region but

00:25:39,600 --> 00:25:42,159
right of course

00:25:40,720 --> 00:25:44,159
i haven't done anything yet i haven't

00:25:42,159 --> 00:25:45,360
put anything any entries in the region

00:25:44,159 --> 00:25:47,279
so

00:25:45,360 --> 00:25:48,559
that's that okay so i've shown you just

00:25:47,279 --> 00:25:51,200
barely enough

00:25:48,559 --> 00:25:52,240
it's time to run the app well first

00:25:51,200 --> 00:25:55,520
actually

00:25:52,240 --> 00:25:58,799
i need to um uh install

00:25:55,520 --> 00:26:01,840
the native client so i'm sorry

00:25:58,799 --> 00:26:04,640
install the the node client so there's a

00:26:01,840 --> 00:26:06,960
familiar npm install command i had

00:26:04,640 --> 00:26:09,520
already acquired that

00:26:06,960 --> 00:26:11,679
now we have it and the last thing is to

00:26:09,520 --> 00:26:14,240
actually run the app so

00:26:11,679 --> 00:26:15,919
i haven't really done very much i've

00:26:14,240 --> 00:26:18,960
show i showed you the code

00:26:15,919 --> 00:26:24,559
and essentially i did an

00:26:18,960 --> 00:26:28,480
npm install and now i can run

00:26:24,559 --> 00:26:31,600
my app this app is not interactive

00:26:28,480 --> 00:26:35,520
with all the promises and such like that

00:26:31,600 --> 00:26:36,240
it's um it's exceedingly difficult to do

00:26:35,520 --> 00:26:39,039
a proper

00:26:36,240 --> 00:26:40,720
demo that would be interactive since all

00:26:39,039 --> 00:26:43,279
of the functions return

00:26:40,720 --> 00:26:45,120
again return promises so this running

00:26:43,279 --> 00:26:46,559
this app it's going to just blast all of

00:26:45,120 --> 00:26:48,240
what it does to the screen and then

00:26:46,559 --> 00:26:50,559
we're going to go through

00:26:48,240 --> 00:26:53,200
each of the items okay so that went on

00:26:50,559 --> 00:26:56,080
to more than one screen so we'll

00:26:53,200 --> 00:26:57,200
start at the top i ran the app and this

00:26:56,080 --> 00:26:59,679
app

00:26:57,200 --> 00:27:02,480
prints out what it was doing so it's set

00:26:59,679 --> 00:27:07,840
up using the exact code i already showed

00:27:02,480 --> 00:27:10,480
uh what was what was going on

00:27:07,840 --> 00:27:11,679
then it does the series of the four crud

00:27:10,480 --> 00:27:15,039
operations

00:27:11,679 --> 00:27:18,240
the code is shown

00:27:15,039 --> 00:27:20,000
as output for this

00:27:18,240 --> 00:27:22,399
so the actual javascript code so a

00:27:20,000 --> 00:27:23,520
create a create operation returns a

00:27:22,399 --> 00:27:26,240
promise

00:27:23,520 --> 00:27:26,960
and does a region.put function so we've

00:27:26,240 --> 00:27:30,000
got the

00:27:26,960 --> 00:27:35,039
key and the value specified then

00:27:30,000 --> 00:27:37,760
this app reads back that single entry

00:27:35,039 --> 00:27:38,480
with using the key it just put in it

00:27:37,760 --> 00:27:41,840
gets back

00:27:38,480 --> 00:27:44,960
as expected the value an update

00:27:41,840 --> 00:27:47,279
operation is also a put

00:27:44,960 --> 00:27:48,000
and here we are using that same entry

00:27:47,279 --> 00:27:51,919
only we are

00:27:48,000 --> 00:27:55,520
changing the value when we read that

00:27:51,919 --> 00:27:59,440
single entry back out again we get

00:27:55,520 --> 00:28:03,039
the expected changed value then

00:27:59,440 --> 00:28:06,960
we delete that one

00:28:03,039 --> 00:28:08,159
entry so after that point there should

00:28:06,960 --> 00:28:11,600
be nothing

00:28:08,159 --> 00:28:14,720
in the region and when we read

00:28:11,600 --> 00:28:18,240
back out using that deleted key

00:28:14,720 --> 00:28:21,600
or deleted entry we do get expected

00:28:18,240 --> 00:28:23,360
value of null it wasn't there okay so

00:28:21,600 --> 00:28:26,559
the last

00:28:23,360 --> 00:28:30,399
the last set of um

00:28:26,559 --> 00:28:31,520
set of operations r2 are set up so i can

00:28:30,399 --> 00:28:34,720
do a simple

00:28:31,520 --> 00:28:37,919
query using the region query function

00:28:34,720 --> 00:28:40,720
from the api i put a new entry

00:28:37,919 --> 00:28:40,720
into the region

00:28:41,120 --> 00:28:44,720
for you know just to show i i read it

00:28:44,080 --> 00:28:47,039
back out

00:28:44,720 --> 00:28:48,559
that's not part of this but i wanted to

00:28:47,039 --> 00:28:51,200
show that it was there

00:28:48,559 --> 00:28:52,000
and the new entry is there and then the

00:28:51,200 --> 00:28:56,799
code

00:28:52,000 --> 00:28:56,799
in the app to do to

00:28:57,120 --> 00:29:05,279
a query for all values in this region

00:29:02,799 --> 00:29:06,960
returns back just the one because we

00:29:05,279 --> 00:29:10,559
only had one entry

00:29:06,960 --> 00:29:10,559
and it's really that simple

00:29:11,520 --> 00:29:14,799
okay so we've gone through

00:29:15,279 --> 00:29:22,240
this entire

00:29:18,640 --> 00:29:27,840
entire app and

00:29:22,240 --> 00:29:27,840
let me bring back the slides for you

00:29:38,080 --> 00:29:42,240
and i wanted to show you that you should

00:29:40,799 --> 00:29:46,000
be able to access

00:29:42,240 --> 00:29:48,559
now right for now it's proprietary but

00:29:46,000 --> 00:29:49,600
um the the proprietary reference

00:29:48,559 --> 00:29:52,080
documentation

00:29:49,600 --> 00:29:53,520
and the representation of the api that

00:29:52,080 --> 00:29:57,520
you can use to write your own

00:29:53,520 --> 00:29:59,039
apps and this example that i presented

00:29:57,520 --> 00:30:03,440
for you is a variation

00:29:59,039 --> 00:30:06,720
on one of the examples in

00:30:03,440 --> 00:30:08,880
a repository up on github

00:30:06,720 --> 00:30:12,559
so you could uh once you get this you

00:30:08,880 --> 00:30:17,279
can see some examples

00:30:12,559 --> 00:30:23,840
thanks and uh if we have people here

00:30:17,279 --> 00:30:23,840
we'd like to take questions from you

00:30:24,260 --> 00:30:27,400
[Music]

00:30:31,120 --> 00:30:34,799
no questions well that was easy

00:30:35,120 --> 00:30:38,240
i will give people a little bit of time

00:30:37,520 --> 00:30:51,840
to ask

00:30:38,240 --> 00:30:51,840
questions a couple minutes sure

00:31:02,840 --> 00:31:05,840
so

00:31:10,159 --> 00:31:14,320
oh we have a question the question blake

00:31:13,840 --> 00:31:17,039
has

00:31:14,320 --> 00:31:19,519
i'll let you answer are there plans to

00:31:17,039 --> 00:31:19,840
add support for other languages besides

00:31:19,519 --> 00:31:24,000
dot

00:31:19,840 --> 00:31:29,200
net and dot and node in the future

00:31:24,000 --> 00:31:30,799
uh yes uh yes i i

00:31:29,200 --> 00:31:32,320
don't believe i'm tipping our hand too

00:31:30,799 --> 00:31:34,559
much to say that

00:31:32,320 --> 00:31:35,360
net core is the next thing that we wish

00:31:34,559 --> 00:31:38,159
to do

00:31:35,360 --> 00:31:40,159
um current.net support is dot net

00:31:38,159 --> 00:31:41,120
framework only so it's windows only in

00:31:40,159 --> 00:31:44,320
microsoft

00:31:41,120 --> 00:31:48,320
tools tool chain and stack

00:31:44,320 --> 00:31:51,840
um net core is next

00:31:48,320 --> 00:31:56,480
and we are moving to

00:31:51,840 --> 00:32:00,000
a c language api on the library

00:31:56,480 --> 00:32:03,279
so that uh it will be

00:32:00,000 --> 00:32:04,559
much much easier to add more languages

00:32:03,279 --> 00:32:08,799
in the future

00:32:04,559 --> 00:32:12,640
um i mean ideally uh i would like to see

00:32:08,799 --> 00:32:13,760
us get to a spot where um

00:32:12,640 --> 00:32:16,399
people in the community that are

00:32:13,760 --> 00:32:18,480
interested in new languages can go

00:32:16,399 --> 00:32:20,240
grab the existing native client library

00:32:18,480 --> 00:32:21,519
and build their language support on top

00:32:20,240 --> 00:32:24,640
of that

00:32:21,519 --> 00:32:27,360
um for for

00:32:24,640 --> 00:32:28,000
go or kotlin or what have you you know

00:32:27,360 --> 00:32:30,799
whatever they're

00:32:28,000 --> 00:32:31,360
interested in um but we're certainly not

00:32:30,799 --> 00:32:33,919
there yet

00:32:31,360 --> 00:32:34,640
um anyway so so that's that's kind of

00:32:33,919 --> 00:32:43,840
what's on our

00:32:34,640 --> 00:32:43,840
on our longer term plan

00:32:54,840 --> 00:32:57,840
oh

00:33:15,440 --> 00:33:20,320
oh i see another question will the

00:33:17,279 --> 00:33:22,799
node.js client be donated to apache

00:33:20,320 --> 00:33:22,799
geode

00:33:22,840 --> 00:33:25,840
yes

00:33:25,919 --> 00:33:39,840
believe that's in the deck yes yes yes

00:33:47,679 --> 00:33:53,840
oh and now we have another another

00:33:50,840 --> 00:33:55,200
question

00:33:53,840 --> 00:33:58,159
what's your favorite what's your

00:33:55,200 --> 00:34:01,679
favorite language node.js c

00:33:58,159 --> 00:34:04,720
plus or c or what

00:34:01,679 --> 00:34:06,640
you go first blake uh these days i'm a

00:34:04,720 --> 00:34:10,399
big fan of python

00:34:06,640 --> 00:34:11,599
uh i do a lot of my leisure time coding

00:34:10,399 --> 00:34:12,879
in python

00:34:11,599 --> 00:34:21,839
have a lot of fun with it i think it's

00:34:12,879 --> 00:34:21,839
just it's just a joy to use

00:34:22,639 --> 00:34:31,919
i think i have c in my blood because

00:34:27,440 --> 00:34:35,359
of uh using it for so long

00:34:31,919 --> 00:34:37,119
so i can't i can't wait to have the c

00:34:35,359 --> 00:34:40,560
bindings

00:34:37,119 --> 00:34:44,079
available i would love to have that

00:34:40,560 --> 00:34:49,839
i know it makes it easy to translate but

00:34:44,079 --> 00:34:49,839
that would be so great

00:35:03,440 --> 00:35:07,119
we just have another minute or two i

00:35:05,599 --> 00:35:12,640
think

00:35:07,119 --> 00:35:16,160
um for any any last minute questions

00:35:12,640 --> 00:35:19,599
or we may and our cell

00:35:16,160 --> 00:35:19,599
and our talk a minute early

00:35:19,760 --> 00:35:33,839
all right

00:35:31,839 --> 00:35:36,160
well thanks for coming to listen to us

00:35:33,839 --> 00:35:36,160
everyone

00:35:47,200 --> 00:35:59,839
hey see y'all later

00:36:08,160 --> 00:36:10,240

YouTube URL: https://www.youtube.com/watch?v=-I98u8Y0X7k


