Title: Apache Geode: Exposing just one ip for all your gateway receivers in K8s
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: Geode
Description: 
	Apache Geode: Exposing just one ip for all your gateway receivers in K8s
Alberto Bustamante

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Geode uses gateway senders and gateway receivers for events replication in multisite configuration. Each receiver usually has its own ip, which has some drawbacks in cloud environments as Kubernetes. In this talk I would like to show why we decided to expose all our gateway receivers with the same ip, the problems we found, the solution proposed and how I contributed it to Geode.

Alberto is a Computer Science engineer by Carlos III University of Madrid, with a Master on Software Craftsmanship by Polytechnic University of Madrid. He has been working at Ericsson Spain since 2008 mainly as Software Developer. Since 2019 he works as Open Source Developer contributing to Apache Geode, a data management platform ( in-memory data grid ) that provides real-time, consistent access to data-intensive applications throughout widely distributed cloud architectures.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,720 --> 00:00:30,080
hello everyone

00:00:26,320 --> 00:00:33,920
uh welcome to this talk in the idiot

00:00:30,080 --> 00:00:36,320
track my name is alberto bustamante

00:00:33,920 --> 00:00:37,760
i will be talking about exposing just

00:00:36,320 --> 00:00:40,079
one ip

00:00:37,760 --> 00:00:42,800
for all your gateway receivers in

00:00:40,079 --> 00:00:42,800
kubernetes

00:00:43,360 --> 00:00:46,480
but i have to say that uh i'm very

00:00:45,520 --> 00:00:48,960
excited for

00:00:46,480 --> 00:00:50,399
being here today because i have attended

00:00:48,960 --> 00:00:53,440
many conferences and

00:00:50,399 --> 00:00:55,199
technical events meet up et cetera but

00:00:53,440 --> 00:00:57,120
actually this is the first time but i'm

00:00:55,199 --> 00:01:00,399
presenting something so

00:00:57,120 --> 00:01:00,399
let's see how it goes

00:01:00,559 --> 00:01:04,239
okay first let me introduce myself

00:01:02,719 --> 00:01:06,720
briefly

00:01:04,239 --> 00:01:07,439
as i said my name is alberto i'm from

00:01:06,720 --> 00:01:11,280
madrid

00:01:07,439 --> 00:01:15,439
in spain i'm an ericsson

00:01:11,280 --> 00:01:18,240
employee since 2009

00:01:15,439 --> 00:01:19,920
i have been working as mainly as a

00:01:18,240 --> 00:01:23,360
software developer

00:01:19,920 --> 00:01:26,000
all these years um i have been

00:01:23,360 --> 00:01:27,680
contributing to the to the out community

00:01:26,000 --> 00:01:30,880
for the last

00:01:27,680 --> 00:01:31,680
year and a half when i started working

00:01:30,880 --> 00:01:34,479
as a

00:01:31,680 --> 00:01:35,200
open source developer in collaboration

00:01:34,479 --> 00:01:38,320
with

00:01:35,200 --> 00:01:41,520
ericsson software technology which is um

00:01:38,320 --> 00:01:44,720
an ericsson company focused on open

00:01:41,520 --> 00:01:48,000
source contribution and development

00:01:44,720 --> 00:01:50,560
and what else more the more

00:01:48,000 --> 00:01:51,439
the most important roles i have i'm

00:01:50,560 --> 00:01:55,439
married and

00:01:51,439 --> 00:01:57,280
i'm a father of a two years old girl

00:01:55,439 --> 00:01:59,200
but actually where they're expecting our

00:01:57,280 --> 00:02:02,479
second daughter in just a few weeks so

00:01:59,200 --> 00:02:05,840
this is why i always say that

00:02:02,479 --> 00:02:08,640
my wife is running on a grade

00:02:05,840 --> 00:02:11,039
i have chosen this photo of myself for

00:02:08,640 --> 00:02:13,840
this slide

00:02:11,039 --> 00:02:14,400
because i think it reflects what it has

00:02:13,840 --> 00:02:17,360
been my

00:02:14,400 --> 00:02:19,280
my status since march that is me working

00:02:17,360 --> 00:02:22,560
at home

00:02:19,280 --> 00:02:23,599
while my daughter is playing around so i

00:02:22,560 --> 00:02:27,760
think this

00:02:23,599 --> 00:02:27,760
sounds familiar to some of you

00:02:29,280 --> 00:02:37,760
okay i can start with the presentation

00:02:33,680 --> 00:02:41,440
um what's this about well

00:02:37,760 --> 00:02:43,920
i want to describe a problem or a

00:02:41,440 --> 00:02:44,640
improvement opportunity so to say uh

00:02:43,920 --> 00:02:48,080
that

00:02:44,640 --> 00:02:50,560
we found when setting up um two geode

00:02:48,080 --> 00:02:52,080
clusters running in different kubernetes

00:02:50,560 --> 00:02:54,000
clusters

00:02:52,080 --> 00:02:56,080
and then i will explain how we tried to

00:02:54,000 --> 00:02:58,640
solve it

00:02:56,080 --> 00:02:59,920
some secondary problem problems that we

00:02:58,640 --> 00:03:03,200
found

00:02:59,920 --> 00:03:06,080
and and the work done and

00:03:03,200 --> 00:03:08,319
and also the work pending to to fix all

00:03:06,080 --> 00:03:08,319
of them

00:03:09,680 --> 00:03:16,159
um well our use case starts here

00:03:13,040 --> 00:03:17,040
i mean when you have a ideal cluster and

00:03:16,159 --> 00:03:19,200
you want to

00:03:17,040 --> 00:03:20,480
increase the fault tolerance and data

00:03:19,200 --> 00:03:22,000
availability

00:03:20,480 --> 00:03:23,599
you can configure other rather than

00:03:22,000 --> 00:03:25,920
cluster

00:03:23,599 --> 00:03:29,840
and communicate both both of them using

00:03:25,920 --> 00:03:29,840
the one distribution feature

00:03:30,560 --> 00:03:34,239
you know geo allows a replication of

00:03:32,879 --> 00:03:37,440
events

00:03:34,239 --> 00:03:40,560
among clusters using the an asynchronous

00:03:37,440 --> 00:03:42,640
queue system which is implemented

00:03:40,560 --> 00:03:44,239
by gateway senders and with receivers

00:03:42,640 --> 00:03:48,159
that you have to set up

00:03:44,239 --> 00:03:51,680
in your clusters the thing is that when

00:03:48,159 --> 00:03:55,200
we needed to implement this setup in

00:03:51,680 --> 00:03:58,159
kubernetes the first approach

00:03:55,200 --> 00:04:00,640
that we tried was to configure a

00:03:58,159 --> 00:04:03,920
coordinative service per it's a

00:04:00,640 --> 00:04:07,200
gateway receiver this means of

00:04:03,920 --> 00:04:08,000
this means of course that each gateway

00:04:07,200 --> 00:04:10,879
receiver

00:04:08,000 --> 00:04:13,519
needs to be reachable from outside the

00:04:10,879 --> 00:04:14,879
the coordinates cluster

00:04:13,519 --> 00:04:16,799
and that implies that you have to

00:04:14,879 --> 00:04:17,519
configure your network in your service

00:04:16,799 --> 00:04:21,440
mesh

00:04:17,519 --> 00:04:23,680
uh firewalls etc

00:04:21,440 --> 00:04:25,280
so it was decided that it would be a

00:04:23,680 --> 00:04:29,840
good idea to

00:04:25,280 --> 00:04:29,840
to improve this

00:04:31,680 --> 00:04:34,960
with these two goals in mind the first

00:04:34,320 --> 00:04:36,800
one is

00:04:34,960 --> 00:04:38,720
to simplify configuration on the

00:04:36,800 --> 00:04:41,919
networking

00:04:38,720 --> 00:04:43,360
um whenever a receiver is created and

00:04:41,919 --> 00:04:46,080
also

00:04:43,360 --> 00:04:46,800
to know the ip and port values of the

00:04:46,080 --> 00:04:49,919
receivers

00:04:46,800 --> 00:04:53,199
in advance this is these were

00:04:49,919 --> 00:04:53,199
the two main goals we had

00:04:53,919 --> 00:04:57,680
this is needed because kubernetes

00:04:56,560 --> 00:05:00,080
configuration

00:04:57,680 --> 00:05:01,120
is declarative you describe the

00:05:00,080 --> 00:05:03,600
configuration

00:05:01,120 --> 00:05:05,520
the the status of the application you

00:05:03,600 --> 00:05:08,080
want not the operations to reach

00:05:05,520 --> 00:05:09,520
that status so this is why you need to

00:05:08,080 --> 00:05:13,039
know the eyepiece

00:05:09,520 --> 00:05:16,320
and ports that your application will use

00:05:13,039 --> 00:05:18,400
to to make the the configuration in your

00:05:16,320 --> 00:05:20,400
networking

00:05:18,400 --> 00:05:23,120
so for for reaching these goals we

00:05:20,400 --> 00:05:27,520
identified um

00:05:23,120 --> 00:05:29,840
two issues two main issues the first one

00:05:27,520 --> 00:05:32,479
was the the random port allocation of

00:05:29,840 --> 00:05:32,479
the receivers

00:05:32,800 --> 00:05:37,039
when you create a gateway receiver you

00:05:35,600 --> 00:05:41,199
have to specify a port

00:05:37,039 --> 00:05:41,600
range and the receiver will use a random

00:05:41,199 --> 00:05:45,280
port

00:05:41,600 --> 00:05:46,320
within that range so it was decided that

00:05:45,280 --> 00:05:49,280
instead of

00:05:46,320 --> 00:05:50,080
allocating a whole range of ports for

00:05:49,280 --> 00:05:52,720
all

00:05:50,080 --> 00:05:53,520
the possible receivers you can configure

00:05:52,720 --> 00:05:57,039
will we

00:05:53,520 --> 00:06:01,360
we will be using just one port

00:05:57,039 --> 00:06:04,479
so for doing so uh for receivers

00:06:01,360 --> 00:06:06,400
we will use the same value for the start

00:06:04,479 --> 00:06:08,560
port and import parameters

00:06:06,400 --> 00:06:11,840
just to configure a range with

00:06:08,560 --> 00:06:11,840
containing just one port

00:06:11,919 --> 00:06:16,400
the second issue was the the ap of the

00:06:13,840 --> 00:06:19,280
receivers

00:06:16,400 --> 00:06:21,280
because the the receiver ips is assigned

00:06:19,280 --> 00:06:24,319
by kubernetes

00:06:21,280 --> 00:06:27,039
so how could we how we could know

00:06:24,319 --> 00:06:28,479
in advance the receiver ip to configure

00:06:27,039 --> 00:06:33,120
the network

00:06:28,479 --> 00:06:35,440
well receivers currently has a parameter

00:06:33,120 --> 00:06:36,880
called hostname for senders that you can

00:06:35,440 --> 00:06:40,720
use to define

00:06:36,880 --> 00:06:42,400
the hostname or an ip that will be used

00:06:40,720 --> 00:06:45,919
by the senders

00:06:42,400 --> 00:06:49,440
to connect to that receiver so

00:06:45,919 --> 00:06:52,479
you can use that parameter for this

00:06:49,440 --> 00:06:55,520
but you still need to define

00:06:52,479 --> 00:06:58,800
the the ap the value that will be

00:06:55,520 --> 00:07:00,880
there so you need a well-tested

00:06:58,800 --> 00:07:02,479
algorithm to calculate

00:07:00,880 --> 00:07:04,720
which ip will be assigned to each

00:07:02,479 --> 00:07:08,080
receiver to

00:07:04,720 --> 00:07:11,440
the member server x on cluster

00:07:08,080 --> 00:07:14,960
n whatever so

00:07:11,440 --> 00:07:14,960
and you still have the problem

00:07:15,120 --> 00:07:18,160
that there is network configuration to

00:07:17,199 --> 00:07:22,240
be done

00:07:18,160 --> 00:07:25,840
per each receiver so to simplify

00:07:22,240 --> 00:07:28,479
that it was decided to

00:07:25,840 --> 00:07:29,199
to use just one value the same value for

00:07:28,479 --> 00:07:33,120
hostname

00:07:29,199 --> 00:07:35,759
for sender parameter and check

00:07:33,120 --> 00:07:35,759
how it goes

00:07:36,240 --> 00:07:39,440
so we move from

00:07:39,520 --> 00:07:43,440
an implementation of something like this

00:07:41,680 --> 00:07:46,879
to just using

00:07:43,440 --> 00:07:49,520
one kubernetes service for for all your

00:07:46,879 --> 00:07:49,520
receivers

00:07:52,400 --> 00:07:59,199
okay well as i said then all our

00:07:56,000 --> 00:08:01,759
receivers we'll use the same value for

00:07:59,199 --> 00:08:04,000
the hostname for sender parameter

00:08:01,759 --> 00:08:06,240
and the same value for startport and

00:08:04,000 --> 00:08:08,960
import parameters

00:08:06,240 --> 00:08:10,080
and and we are exposing the receivers

00:08:08,960 --> 00:08:13,360
using just one

00:08:10,080 --> 00:08:17,440
coordinate service the main

00:08:13,360 --> 00:08:21,759
issue here and is that

00:08:17,440 --> 00:08:25,280
the the connections from the senders are

00:08:21,759 --> 00:08:28,560
routed by kubernetes so they may end up

00:08:25,280 --> 00:08:29,039
in in different in a different receiver

00:08:28,560 --> 00:08:32,319
than

00:08:29,039 --> 00:08:32,319
they were trying to connect to

00:08:32,640 --> 00:08:40,560
but this was not really an issue in our

00:08:36,800 --> 00:08:44,399
use case i will explain why

00:08:40,560 --> 00:08:46,880
um especially if

00:08:44,399 --> 00:08:48,320
we solve the secondary problems that we

00:08:46,880 --> 00:08:51,120
identified

00:08:48,320 --> 00:08:51,839
that were related with the replication

00:08:51,120 --> 00:08:56,000
with

00:08:51,839 --> 00:08:58,800
pings from server to from receiver to

00:08:56,000 --> 00:09:02,560
from sender to receiver sorry and an

00:08:58,800 --> 00:09:02,560
issue with the serial gateway senders

00:09:04,959 --> 00:09:09,839
regarding replication well this is the

00:09:07,519 --> 00:09:09,839
um

00:09:10,800 --> 00:09:18,320
we have one test case that was uh

00:09:14,959 --> 00:09:19,440
shutting down one one server and it was

00:09:18,320 --> 00:09:22,240
identified that

00:09:19,440 --> 00:09:23,040
in that case all the receivers were

00:09:22,240 --> 00:09:26,320
considered

00:09:23,040 --> 00:09:28,880
down so

00:09:26,320 --> 00:09:30,720
this is uh this was one of the first

00:09:28,880 --> 00:09:33,040
tickets i think

00:09:30,720 --> 00:09:34,399
i i was assigned to when i joined the

00:09:33,040 --> 00:09:38,959
community

00:09:34,399 --> 00:09:40,800
and i spend a lot of time with it

00:09:38,959 --> 00:09:43,360
well first i implemented this helm

00:09:40,800 --> 00:09:47,120
charts to reproduce the problem

00:09:43,360 --> 00:09:50,240
they are available in that url here

00:09:47,120 --> 00:09:53,279
um with that you can configure

00:09:50,240 --> 00:09:54,080
two yield clusters with one locator two

00:09:53,279 --> 00:09:57,120
servers

00:09:54,080 --> 00:10:00,160
and one partition region and

00:09:57,120 --> 00:10:03,920
parallel gateway centers on one cluster

00:10:00,160 --> 00:10:07,200
and receivers exposed with the same

00:10:03,920 --> 00:10:08,640
with the sim service on cluster 2 and it

00:10:07,200 --> 00:10:10,160
was

00:10:08,640 --> 00:10:11,839
easy to reproduce that killing one

00:10:10,160 --> 00:10:14,720
server in cluster 2

00:10:11,839 --> 00:10:16,839
made that the senders were disconnected

00:10:14,720 --> 00:10:20,320
from the receive from the

00:10:16,839 --> 00:10:23,600
receivers the problems

00:10:20,320 --> 00:10:25,839
is that geode was not prepared for such

00:10:23,600 --> 00:10:30,399
configuration we were using

00:10:25,839 --> 00:10:33,760
um and the locator was using

00:10:30,399 --> 00:10:34,480
the server um the um the host and port

00:10:33,760 --> 00:10:37,839
sorry

00:10:34,480 --> 00:10:41,680
to identify a server

00:10:37,839 --> 00:10:45,040
this is um this map here is from the

00:10:41,680 --> 00:10:48,480
the connection the locator

00:10:45,040 --> 00:10:51,600
is a load snapshot class

00:10:48,480 --> 00:10:54,959
and there you can see that the

00:10:51,600 --> 00:10:58,480
the entries to

00:10:54,959 --> 00:11:01,920
the the connection load information from

00:10:58,480 --> 00:11:03,440
a given server was using the the server

00:11:01,920 --> 00:11:06,480
location

00:11:03,440 --> 00:11:08,959
of a server location object as a key

00:11:06,480 --> 00:11:10,560
and that class only contains the host

00:11:08,959 --> 00:11:13,920
and the port

00:11:10,560 --> 00:11:17,920
of a given server so what

00:11:13,920 --> 00:11:21,200
we did was to implement this new class

00:11:17,920 --> 00:11:22,720
server location and member id to really

00:11:21,200 --> 00:11:26,160
identify

00:11:22,720 --> 00:11:29,120
to be able to identify servers

00:11:26,160 --> 00:11:29,440
sharing the same host and port adding

00:11:29,120 --> 00:11:32,560
the

00:11:29,440 --> 00:11:33,519
unique id also as part of the or the

00:11:32,560 --> 00:11:36,560
identification of

00:11:33,519 --> 00:11:39,839
that server so

00:11:36,560 --> 00:11:40,800
the the change seems so simple but of

00:11:39,839 --> 00:11:44,320
course this

00:11:40,800 --> 00:11:47,040
implied to a lot of changes in different

00:11:44,320 --> 00:11:49,440
parts of the code and and of course new

00:11:47,040 --> 00:11:49,440
testing

00:11:51,279 --> 00:11:54,880
other issue we saw with our

00:11:53,680 --> 00:11:58,079
configuration

00:11:54,880 --> 00:12:02,079
was related with the pings

00:11:58,079 --> 00:12:04,720
we saw that after this the

00:12:02,079 --> 00:12:05,519
cluster was up and running both clusters

00:12:04,720 --> 00:12:08,399
if we

00:12:05,519 --> 00:12:12,800
were not running any traffic the senders

00:12:08,399 --> 00:12:12,800
were disconnected after some time

00:12:12,959 --> 00:12:16,160
and after some investigation we found

00:12:14,560 --> 00:12:18,880
out that the connections

00:12:16,160 --> 00:12:21,600
were closed by the client health monitor

00:12:18,880 --> 00:12:24,560
profit process from the receivers

00:12:21,600 --> 00:12:25,279
because that process is suspecting pings

00:12:24,560 --> 00:12:28,160
messages

00:12:25,279 --> 00:12:30,240
from senders so if they don't receive

00:12:28,160 --> 00:12:33,680
anything in a given time

00:12:30,240 --> 00:12:37,519
they disconnect so in that case

00:12:33,680 --> 00:12:39,440
as the pings were were sent but

00:12:37,519 --> 00:12:41,200
as i said the the connections were

00:12:39,440 --> 00:12:43,360
handled by kubernetes

00:12:41,200 --> 00:12:44,480
so this those messages would end up in a

00:12:43,360 --> 00:12:48,320
different server

00:12:44,480 --> 00:12:51,360
that and that was what happening

00:12:48,320 --> 00:12:53,360
so the solution that actually was an

00:12:51,360 --> 00:12:56,880
idea from bruce suchert

00:12:53,360 --> 00:13:00,639
thank you for that was to implement

00:12:56,880 --> 00:13:04,240
some kind of distributed pin um

00:13:00,639 --> 00:13:06,480
so now if the receiver receives a ping

00:13:04,240 --> 00:13:06,480
that

00:13:06,560 --> 00:13:12,320
it was not intended for for him

00:13:09,600 --> 00:13:14,480
is forwarded to the to the correct

00:13:12,320 --> 00:13:18,639
server

00:13:14,480 --> 00:13:20,880
so also apart from bruce for this

00:13:18,639 --> 00:13:22,800
this ticket that that involves the part

00:13:20,880 --> 00:13:24,959
of the replication and the ping issue

00:13:22,800 --> 00:13:26,320
i would like to also to thank you to dan

00:13:24,959 --> 00:13:28,880
and to juan costa ramos that

00:13:26,320 --> 00:13:30,079
were because they were helping me a lot

00:13:28,880 --> 00:13:32,079
uh

00:13:30,079 --> 00:13:35,839
in the implementation and all the

00:13:32,079 --> 00:13:35,839
problems i found

00:13:36,880 --> 00:13:40,240
um well that's the part that we already

00:13:39,199 --> 00:13:44,320
have implemented

00:13:40,240 --> 00:13:49,120
in this in this jail ticket

00:13:44,320 --> 00:13:51,920
and there is also a third

00:13:49,120 --> 00:13:53,120
problem that we want to fix that is is

00:13:51,920 --> 00:13:56,720
currently a limitation

00:13:53,120 --> 00:13:57,279
in our setup is that we cannot use more

00:13:56,720 --> 00:14:00,560
than

00:13:57,279 --> 00:14:02,480
one thread in in serial gateway centers

00:14:00,560 --> 00:14:05,040
because of the reason that they those

00:14:02,480 --> 00:14:08,720
threats could be connected to different

00:14:05,040 --> 00:14:13,279
receivers at the same time so

00:14:08,720 --> 00:14:17,760
some time ago i i wrote this rpc

00:14:13,279 --> 00:14:21,600
and hopefully i will contribute

00:14:17,760 --> 00:14:24,720
in the next days with the code

00:14:21,600 --> 00:14:26,480
the fix is that currently or

00:14:24,720 --> 00:14:29,199
all the threads of the serial gateway

00:14:26,480 --> 00:14:30,639
center are started in parallel so

00:14:29,199 --> 00:14:32,240
they connect to there to the receiver

00:14:30,639 --> 00:14:35,839
with no problem

00:14:32,240 --> 00:14:39,120
so then in our case the the fix

00:14:35,839 --> 00:14:42,320
consists on a start

00:14:39,120 --> 00:14:44,000
one thread first then it will it will be

00:14:42,320 --> 00:14:46,480
connected to a receiver to a given

00:14:44,000 --> 00:14:46,480
receiver

00:14:47,440 --> 00:14:54,399
and after that is done that thread

00:14:50,720 --> 00:14:57,519
can tell the other threads the the id

00:14:54,399 --> 00:15:00,800
the member id of the the receiver

00:14:57,519 --> 00:15:03,839
that he is connected to so the other

00:15:00,800 --> 00:15:06,160
threads they can start and once

00:15:03,839 --> 00:15:07,920
they are connected they can verify if

00:15:06,160 --> 00:15:08,639
they are connected to the same receiver

00:15:07,920 --> 00:15:12,240
than the first

00:15:08,639 --> 00:15:15,760
thread of course these imply a lot of

00:15:12,240 --> 00:15:18,320
maybe a lot of tries uh until

00:15:15,760 --> 00:15:20,000
they reach the proper server but well

00:15:18,320 --> 00:15:27,120
that's something we have to

00:15:20,000 --> 00:15:31,120
to do

00:15:27,120 --> 00:15:34,480
okay um some conclusions about um

00:15:31,120 --> 00:15:38,240
all this uh or configuration

00:15:34,480 --> 00:15:41,360
is that i think we found

00:15:38,240 --> 00:15:42,800
a way to use less configuration in the

00:15:41,360 --> 00:15:46,720
network internet working

00:15:42,800 --> 00:15:49,360
for comparing to them

00:15:46,720 --> 00:15:51,279
to using one service one kubernetes

00:15:49,360 --> 00:15:54,880
service per receiver

00:15:51,279 --> 00:15:55,360
um it looks like an acceptable short

00:15:54,880 --> 00:15:58,320
term

00:15:55,360 --> 00:16:00,880
solution and well the random server

00:15:58,320 --> 00:16:04,800
connection is not

00:16:00,880 --> 00:16:08,000
an issue in at least in our use case

00:16:04,800 --> 00:16:11,600
but the cons is that

00:16:08,000 --> 00:16:14,160
of course these random connections that

00:16:11,600 --> 00:16:16,720
is are done by kubernetes so you don't

00:16:14,160 --> 00:16:18,240
have control over them

00:16:16,720 --> 00:16:20,880
and of course this approach cannot be

00:16:18,240 --> 00:16:23,920
used for client server communication

00:16:20,880 --> 00:16:26,959
because in that case a clients

00:16:23,920 --> 00:16:29,040
need sometimes need to connect to to a

00:16:26,959 --> 00:16:29,680
specific server to the server containing

00:16:29,040 --> 00:16:32,079
the

00:16:29,680 --> 00:16:33,680
the primary bucket for an entry for

00:16:32,079 --> 00:16:36,800
example so

00:16:33,680 --> 00:16:38,639
you cannot trust on

00:16:36,800 --> 00:16:40,880
that you will be connected to whatever

00:16:38,639 --> 00:16:43,519
server

00:16:40,880 --> 00:16:46,240
and well also other secondary problems

00:16:43,519 --> 00:16:49,519
could appear because

00:16:46,240 --> 00:16:53,839
not all the geo tests are done with

00:16:49,519 --> 00:16:53,839
this configuration in mind so

00:16:55,120 --> 00:16:59,440
actually there is a feature being

00:16:58,160 --> 00:17:04,559
implemented

00:16:59,440 --> 00:17:08,079
about using a proxy

00:17:04,559 --> 00:17:11,199
in the diode connections and

00:17:08,079 --> 00:17:12,559
i think that after that is in place i

00:17:11,199 --> 00:17:16,160
mean although

00:17:12,559 --> 00:17:19,360
your intro this is introducing um

00:17:16,160 --> 00:17:20,240
a new element to configure in the

00:17:19,360 --> 00:17:21,760
network because

00:17:20,240 --> 00:17:23,839
i mean you are using a proxy you have to

00:17:21,760 --> 00:17:27,280
configure it

00:17:23,839 --> 00:17:32,320
i think we should try to move to that

00:17:27,280 --> 00:17:34,240
to that approach instead of using this

00:17:32,320 --> 00:17:36,720
but let's see in the in the future how

00:17:34,240 --> 00:17:36,720
it goes

00:17:38,320 --> 00:17:41,440
okay and that's pretty much what i

00:17:40,720 --> 00:17:45,200
wanted to

00:17:41,440 --> 00:17:47,120
share with you i don't know you have any

00:17:45,200 --> 00:17:50,320
questions we have a lot of time

00:17:47,120 --> 00:17:50,320
i think i run a lot

00:17:57,280 --> 00:18:02,240
yeah barista is asking if i guess that

00:18:00,480 --> 00:18:02,720
performance for replication will be

00:18:02,240 --> 00:18:04,960
worse

00:18:02,720 --> 00:18:06,720
more network steps and more resource

00:18:04,960 --> 00:18:08,799
utilization proxy messages between

00:18:06,720 --> 00:18:11,039
servers is that right

00:18:08,799 --> 00:18:12,840
uh do you mean that using this this

00:18:11,039 --> 00:18:15,840
approach instead of using

00:18:12,840 --> 00:18:15,840
one

00:18:16,160 --> 00:18:20,480
one quantity service per receiver

00:18:23,679 --> 00:18:31,760
yeah yeah because the messages

00:18:26,799 --> 00:18:34,960
some messages yeah some

00:18:31,760 --> 00:18:37,120
batches from the from the centers

00:18:34,960 --> 00:18:38,320
will end up in a different receiver that

00:18:37,120 --> 00:18:40,160
so

00:18:38,320 --> 00:18:43,840
there will be yeah there will be more

00:18:40,160 --> 00:18:43,840
steps more hops

00:18:50,160 --> 00:18:52,480
thank you

00:18:54,799 --> 00:18:58,400
thank you yeah actually if you are

00:18:57,039 --> 00:19:01,200
interested in

00:18:58,400 --> 00:19:01,919
the audience that is a you have to watch

00:19:01,200 --> 00:19:05,840
the

00:19:01,919 --> 00:19:11,840
michael and aaron talk

00:19:05,840 --> 00:19:11,840
was really interested

00:19:36,480 --> 00:19:39,840
okay i think

00:19:40,960 --> 00:19:53,840
you're welcome alberto

00:19:54,400 --> 00:19:58,960
any alberto is asking any reason

00:19:56,559 --> 00:20:02,960
stopping the approval of the rpc

00:19:58,960 --> 00:20:03,440
uh the uh you you mean the one about

00:20:02,960 --> 00:20:06,880
this

00:20:03,440 --> 00:20:09,120
the serial getaway cylinders

00:20:06,880 --> 00:20:09,120
right

00:20:15,440 --> 00:20:21,200
yeah well actually i

00:20:18,720 --> 00:20:22,640
i think i didn't receive too much

00:20:21,200 --> 00:20:26,080
comments

00:20:22,640 --> 00:20:29,840
i extended the deadline once

00:20:26,080 --> 00:20:34,240
uh but well i can understand

00:20:29,840 --> 00:20:36,240
um so i started the implementation and

00:20:34,240 --> 00:20:37,760
i think from my site it's almost ready

00:20:36,240 --> 00:20:42,240
so i think

00:20:37,760 --> 00:20:44,159
i will send a draft pull request

00:20:42,240 --> 00:20:46,159
sometimes i think it's i understand that

00:20:44,159 --> 00:20:47,039
sometimes it's easier to give comments

00:20:46,159 --> 00:20:49,840
when you see

00:20:47,039 --> 00:20:49,840
code so

00:21:03,200 --> 00:21:08,640
okay then if if there are no more

00:21:06,480 --> 00:21:14,000
questions

00:21:08,640 --> 00:21:18,559
we can end here thank you for watching

00:21:14,000 --> 00:21:18,559
so i hope you stay safe take care

00:21:28,840 --> 00:21:31,840
bye

00:21:38,880 --> 00:21:40,960

YouTube URL: https://www.youtube.com/watch?v=poN_g1BPRhw


