Title: Map Serving with Apache HTTPD Tile Server Ecosystem (AHTSE)
Publication date: 2020-10-22
Playlist: ApacheCon @Home 2020: Geospatial
Description: 
	Map Serving with Apache HTTPD Tile Server Ecosystem (AHTSE)
Dr. Lucian Plesea

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

AHTSE is a collection of Open Source Apache httpd modules that can be used independently or combined to implement high performance and scalable tile services. Developed for geospatial applications, AHTSE can be used for other domains that need fast pan and zoom access to large datasets. AHTSE source code is available on GitHub, licensed under Apache License 2.0 terms. Geospatial web services compatible with the OGC WMTS, Esri REST and tiled WMS can be implemented. The tight integration with httpd results in exceptional scalability and reliability. The AHTSE development represents an evolution of the NASA original OnEarth server code. Examples of public services that use AHTSE are NASA's WorldView server (https://worldview.earthdata.nasa.gov/), Esri's Astro server (https://astro.arcgis.com) and Esri's EarthLive server (https://earthlive.maptiles.arcgis.com) This session will describe the core AHTSE concepts, demonstrate some of the existing server instances and provide sample server configurations.

Dr. Plesea worked at NASA's JPL, where he was a pioneer in developing geospatial imagery using supercomputers and later transitioned to building geospatial web services. He built and maintained multiple generations of the well known JPL Onearth/OnMars/OnMoon geospatial image servers, and was involved in the early development of the NASA WorldWind system. Once the OnEarth server technology was adopted and transitioned to the NASA EOSDIS as the core server technology behind the WorldView client, Dr. Plesea transitioned to Esri, where his responsibilities include developing cloud architecture for the basemap geospatial services and develop cloud raster technologies. Dr. Plesea is also an active GDAL contributor and maintainer, and is the principal OnEarth and AHTSE developer.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,960 --> 00:00:28,480
uh

00:00:25,439 --> 00:00:30,000
20 years ago you and i uh

00:00:28,480 --> 00:00:32,399
the well of the united nations

00:00:30,000 --> 00:00:35,200
headquarters in new york city

00:00:32,399 --> 00:00:37,360
doing a joint presentation of a nasa

00:00:35,200 --> 00:00:40,640
digital earth project

00:00:37,360 --> 00:00:43,920
i think that was the first uh live

00:00:40,640 --> 00:00:46,160
wms global mosaic eight hundred and

00:00:43,920 --> 00:00:49,280
eight thousand eighty six hundred

00:00:46,160 --> 00:00:52,399
landsat scenes that you guys out of jpl

00:00:49,280 --> 00:00:54,399
mosaic and put up on a wms and we

00:00:52,399 --> 00:00:55,680
demonstrated to the world that we could

00:00:54,399 --> 00:00:59,440
do

00:00:55,680 --> 00:01:02,320
the globe wms that was 20 years ago

00:00:59,440 --> 00:01:04,720
so good memories it's good to uh see you

00:01:02,320 --> 00:01:08,320
again here and be working with you again

00:01:04,720 --> 00:01:10,320
and um so now uh dr lucian

00:01:08,320 --> 00:01:11,600
with uh esri and going to talk to us

00:01:10,320 --> 00:01:14,080
about map serving

00:01:11,600 --> 00:01:16,640
uh with an acronym i'm sure he won't

00:01:14,080 --> 00:01:19,680
well it's actually right below

00:01:16,640 --> 00:01:22,240
lucian please yep so thank you george

00:01:19,680 --> 00:01:23,280
um as as you said it's been quite a

00:01:22,240 --> 00:01:25,759
while

00:01:23,280 --> 00:01:26,880
um let's see so i initially worked at

00:01:25,759 --> 00:01:29,040
nasa jpl

00:01:26,880 --> 00:01:30,320
i'm coming from super computing

00:01:29,040 --> 00:01:33,600
background and then i

00:01:30,320 --> 00:01:35,360
slide into satellite image processing

00:01:33,600 --> 00:01:37,600
doing mosaics like george was saying

00:01:35,360 --> 00:01:40,640
about the landsat mosaic

00:01:37,600 --> 00:01:43,680
and then i drifted towards web services

00:01:40,640 --> 00:01:46,240
and about 10 years ago i moved from nasa

00:01:43,680 --> 00:01:47,840
to esri but i kept working with nasa so

00:01:46,240 --> 00:01:49,520
some of the presentation that i'm doing

00:01:47,840 --> 00:01:53,040
today is

00:01:49,520 --> 00:01:56,960
nasa work some of it is esri work

00:01:53,040 --> 00:01:59,040
the the project itself this odd say um

00:01:56,960 --> 00:02:00,399
is is is a very small project as opposed

00:01:59,040 --> 00:02:01,119
to the ones that have been presented

00:02:00,399 --> 00:02:04,479
until now

00:02:01,119 --> 00:02:07,759
it's basically a kind of a personal uh

00:02:04,479 --> 00:02:08,879
project um it is open source and it i

00:02:07,759 --> 00:02:11,760
keep it

00:02:08,879 --> 00:02:13,200
kind of small and personal because i

00:02:11,760 --> 00:02:14,879
want to be able to collaborate with

00:02:13,200 --> 00:02:16,720
multiple organizations so

00:02:14,879 --> 00:02:18,000
this way it's it's easier to do that

00:02:16,720 --> 00:02:22,080
than stamping a

00:02:18,000 --> 00:02:25,120
nasa or an esri label on it

00:02:22,080 --> 00:02:26,720
um the acronym um it's

00:02:25,120 --> 00:02:28,319
it's easy to pronounce it's pronounced

00:02:26,720 --> 00:02:30,879
i'd say

00:02:28,319 --> 00:02:33,120
and it means kind of the subtitle is uh

00:02:30,879 --> 00:02:37,040
is an apache httpd

00:02:33,120 --> 00:02:38,800
uh tile server ecosystem and the reason

00:02:37,040 --> 00:02:41,200
i chose that acronym is because it's

00:02:38,800 --> 00:02:43,360
easy to pronounce and it wasn't taken

00:02:41,200 --> 00:02:44,959
in this business is really hard to do

00:02:43,360 --> 00:02:47,840
you know map services

00:02:44,959 --> 00:02:48,879
tile map server all that stuff is taken

00:02:47,840 --> 00:02:52,480
so this way it's

00:02:48,879 --> 00:02:52,480
it's easy to to separate

00:02:52,640 --> 00:02:59,680
okay so that was the introduction um

00:02:56,480 --> 00:03:02,480
the subject of the of the talk is

00:02:59,680 --> 00:03:04,480
is in general map web services in

00:03:02,480 --> 00:03:07,920
particular tile services

00:03:04,480 --> 00:03:10,800
as everybody in this session should know

00:03:07,920 --> 00:03:11,519
um these are there's there's really two

00:03:10,800 --> 00:03:14,319
types of

00:03:11,519 --> 00:03:15,519
server-side web mapping applications one

00:03:14,319 --> 00:03:19,040
is dynamic

00:03:15,519 --> 00:03:22,239
represented by ogcwms which as

00:03:19,040 --> 00:03:24,400
as was said in in sessions before this

00:03:22,239 --> 00:03:25,599
um let you request anything you want

00:03:24,400 --> 00:03:27,840
anywhere you want

00:03:25,599 --> 00:03:29,599
and specify down to the pixel exactly

00:03:27,840 --> 00:03:34,080
how you want the data to be

00:03:29,599 --> 00:03:36,560
to be sent back to you it's ogcwms

00:03:34,080 --> 00:03:38,000
also s3 image server and map server they

00:03:36,560 --> 00:03:39,440
kind of do the same thing

00:03:38,000 --> 00:03:41,120
the difference between image server and

00:03:39,440 --> 00:03:44,159
the map server is the data

00:03:41,120 --> 00:03:47,840
map server is is a drawn map whereas

00:03:44,159 --> 00:03:47,840
image server is usually an image

00:03:48,159 --> 00:03:53,519
tile services on the other side

00:03:51,280 --> 00:03:55,599
they're they're mostly static so it

00:03:53,519 --> 00:03:58,319
should be dynamic and static but it's

00:03:55,599 --> 00:04:00,319
they're they're known as tiles they're

00:03:58,319 --> 00:04:03,840
the technology behind sleepy maps

00:04:00,319 --> 00:04:07,439
um it was really um originally

00:04:03,840 --> 00:04:09,200
used to accelerate web maps

00:04:07,439 --> 00:04:11,200
that was the the main the main reason to

00:04:09,200 --> 00:04:15,680
to introduce style

00:04:11,200 --> 00:04:16,479
web services um the standards are ogcw

00:04:15,680 --> 00:04:19,680
mts

00:04:16,479 --> 00:04:21,759
the web map tile service and also

00:04:19,680 --> 00:04:23,840
esri image server and map server can be

00:04:21,759 --> 00:04:26,880
tile enabled so they can have a dynamic

00:04:23,840 --> 00:04:29,759
aspect and a tiled aspect

00:04:26,880 --> 00:04:31,680
the in this case the clients request

00:04:29,759 --> 00:04:34,320
resources from a discrete set so they

00:04:31,680 --> 00:04:36,880
request a single tile or multiple tiles

00:04:34,320 --> 00:04:39,280
from a set of tiles they cannot the

00:04:36,880 --> 00:04:42,320
client cannot request anything at once

00:04:39,280 --> 00:04:43,840
uh it implies a predefined tile grid on

00:04:42,320 --> 00:04:45,680
the server side that somehow is

00:04:43,840 --> 00:04:48,560
communicated to the client or it's

00:04:45,680 --> 00:04:48,560
agreed before

00:04:49,199 --> 00:04:53,520
the main reason again for the tile

00:04:50,800 --> 00:04:56,000
services is server scaling

00:04:53,520 --> 00:04:57,919
but really if you think about it what

00:04:56,000 --> 00:04:58,639
really separates the tile services from

00:04:57,919 --> 00:05:02,000
the dynamic

00:04:58,639 --> 00:05:03,199
tiles map services and it's not the

00:05:02,000 --> 00:05:06,560
latency because

00:05:03,199 --> 00:05:08,639
we've seen really fast wms servers

00:05:06,560 --> 00:05:11,759
really fast dynamic services and there's

00:05:08,639 --> 00:05:13,759
also some slow tile services

00:05:11,759 --> 00:05:15,919
so the latency is not it the performance

00:05:13,759 --> 00:05:18,000
is not it the scalability is not really

00:05:15,919 --> 00:05:19,840
it the real difference from the

00:05:18,000 --> 00:05:22,160
technology

00:05:19,840 --> 00:05:23,440
is where the complexity of the whole

00:05:22,160 --> 00:05:25,440
system resides

00:05:23,440 --> 00:05:27,039
is it server side like in a dynamic

00:05:25,440 --> 00:05:29,440
service where the server has to

00:05:27,039 --> 00:05:32,720
understand a complex request

00:05:29,440 --> 00:05:34,160
and generate the result and then send it

00:05:32,720 --> 00:05:36,800
back to the user

00:05:34,160 --> 00:05:37,280
or it's on the client side the server

00:05:36,800 --> 00:05:39,440
sends

00:05:37,280 --> 00:05:41,280
a subset of what it already has there's

00:05:39,440 --> 00:05:43,120
very little processing done server side

00:05:41,280 --> 00:05:44,639
and all the complexity about drawing the

00:05:43,120 --> 00:05:46,240
map and trying to

00:05:44,639 --> 00:05:47,759
style it trying to make it look like the

00:05:46,240 --> 00:05:50,960
user wants is done

00:05:47,759 --> 00:05:53,280
on the client side um

00:05:50,960 --> 00:05:54,800
and these are really two endpoints and

00:05:53,280 --> 00:05:56,479
traditionally they have been very

00:05:54,800 --> 00:05:59,360
clearly separated

00:05:56,479 --> 00:05:59,919
um i'd say is mostly an implementation

00:05:59,360 --> 00:06:02,160
of the

00:05:59,919 --> 00:06:03,840
of the tile services but it's really

00:06:02,160 --> 00:06:07,039
exploring the space in between

00:06:03,840 --> 00:06:10,319
trying to see if there's space to do

00:06:07,039 --> 00:06:12,400
tile services mostly but also

00:06:10,319 --> 00:06:13,840
do some server side processing that

00:06:12,400 --> 00:06:16,800
enables extra

00:06:13,840 --> 00:06:17,600
extra leverage on the server side

00:06:16,800 --> 00:06:20,880
without

00:06:17,600 --> 00:06:22,960
obviously losing the performance so it's

00:06:20,880 --> 00:06:24,000
uh i'd say it's a is a very good tile

00:06:22,960 --> 00:06:26,560
service

00:06:24,000 --> 00:06:28,080
um the classic representation of the

00:06:26,560 --> 00:06:29,280
tile service is really fast really

00:06:28,080 --> 00:06:32,160
scalable

00:06:29,280 --> 00:06:34,000
um but it does allow a little bit

00:06:32,160 --> 00:06:35,759
stretching the limits of what a tile

00:06:34,000 --> 00:06:37,759
servers mean

00:06:35,759 --> 00:06:40,319
and in general i'm thinking about a tile

00:06:37,759 --> 00:06:43,919
service as something that has

00:06:40,319 --> 00:06:46,720
server-side latencies intrinsic latency

00:06:43,919 --> 00:06:48,000
of the server somewhere way below 100

00:06:46,720 --> 00:06:51,520
milliseconds once it gets

00:06:48,000 --> 00:06:54,960
to 100 milliseconds it starts to be

00:06:51,520 --> 00:06:56,000
um too slow for for what a tile service

00:06:54,960 --> 00:06:58,000
should do so

00:06:56,000 --> 00:06:59,759
anything that's above 100 milliseconds

00:06:58,000 --> 00:07:00,800
should not really be considered a tile

00:06:59,759 --> 00:07:03,680
service

00:07:00,800 --> 00:07:04,800
or at least not a good one the other

00:07:03,680 --> 00:07:09,599
part i should say now

00:07:04,800 --> 00:07:12,080
is i'd say is is mostly about

00:07:09,599 --> 00:07:12,639
raster tile services not vectors there's

00:07:12,080 --> 00:07:15,440
also

00:07:12,639 --> 00:07:16,400
vector tile services but those are very

00:07:15,440 --> 00:07:18,080
different

00:07:16,400 --> 00:07:19,919
they're much less flexible because you

00:07:18,080 --> 00:07:22,000
can't really

00:07:19,919 --> 00:07:23,199
operate on the pixels like you can with

00:07:22,000 --> 00:07:26,880
the raster

00:07:23,199 --> 00:07:26,880
they're very particular formats

00:07:28,560 --> 00:07:32,560
okay so this is the one slide that i

00:07:30,880 --> 00:07:34,400
have about i'd say

00:07:32,560 --> 00:07:37,280
again the acronym comes from apache

00:07:34,400 --> 00:07:40,880
httpd tile server ecosystem httpd

00:07:37,280 --> 00:07:44,400
being of course the original apache

00:07:40,880 --> 00:07:47,840
software it's a modular very performant

00:07:44,400 --> 00:07:51,039
um well tested battle tested

00:07:47,840 --> 00:07:53,360
um web server and apac

00:07:51,039 --> 00:07:55,919
and i'd say builds on that it's actually

00:07:53,360 --> 00:07:58,000
an extension to the apache http

00:07:55,919 --> 00:07:58,960
specifically designed for for tile

00:07:58,000 --> 00:08:01,440
services

00:07:58,960 --> 00:08:03,120
it is open source under an apache

00:08:01,440 --> 00:08:05,360
version 2 license

00:08:03,120 --> 00:08:06,720
um the url it's it's actually stored on

00:08:05,360 --> 00:08:08,319
github

00:08:06,720 --> 00:08:10,039
the url is there and i'm going to put it

00:08:08,319 --> 00:08:12,879
back at the end i'm going to give more

00:08:10,039 --> 00:08:15,039
urls

00:08:12,879 --> 00:08:16,400
it's composed of a collection of httpd

00:08:15,039 --> 00:08:19,599
modules that share

00:08:16,400 --> 00:08:21,759
a common request style

00:08:19,599 --> 00:08:23,360
this allows you to to use them

00:08:21,759 --> 00:08:26,160
separately or combine them

00:08:23,360 --> 00:08:28,400
stack them and and have the data

00:08:26,160 --> 00:08:31,039
transition through different modules

00:08:28,400 --> 00:08:32,880
uh being transformed while it's what is

00:08:31,039 --> 00:08:35,039
transitioning the module so that you

00:08:32,880 --> 00:08:36,080
obtain the the desired tile service

00:08:35,039 --> 00:08:38,240
output

00:08:36,080 --> 00:08:40,159
um internally from the technological

00:08:38,240 --> 00:08:41,839
point of view it uses http

00:08:40,159 --> 00:08:44,159
sub request mechanism to communicate

00:08:41,839 --> 00:08:47,040
between modules

00:08:44,159 --> 00:08:48,320
then if you add in the normal apache

00:08:47,040 --> 00:08:51,440
http

00:08:48,320 --> 00:08:52,399
mod proxy which implements a reverse web

00:08:51,440 --> 00:08:54,080
proxy

00:08:52,399 --> 00:08:56,399
you can actually pass these requests

00:08:54,080 --> 00:08:57,040
between separate instances or separate

00:08:56,399 --> 00:09:00,880
um

00:08:57,040 --> 00:09:02,640
computers that can be locate located in

00:09:00,880 --> 00:09:03,920
the same place or they can be globally

00:09:02,640 --> 00:09:06,800
distributed

00:09:03,920 --> 00:09:07,839
so this this is a very nice way lego

00:09:06,800 --> 00:09:10,720
like

00:09:07,839 --> 00:09:11,360
way of producing really complex servers

00:09:10,720 --> 00:09:14,560
from

00:09:11,360 --> 00:09:17,839
fairly simple modules fairly simple

00:09:14,560 --> 00:09:21,360
units the common request style

00:09:17,839 --> 00:09:22,720
is using the normal level row column but

00:09:21,360 --> 00:09:25,920
adds an extra parameter

00:09:22,720 --> 00:09:28,959
m um which enables the

00:09:25,920 --> 00:09:32,399
um extension on on multi-dimensionals

00:09:28,959 --> 00:09:33,839
so you can map tile time or elevation or

00:09:32,399 --> 00:09:37,440
a combination of the two

00:09:33,839 --> 00:09:41,040
to a single integer to a single unit

00:09:37,440 --> 00:09:43,120
in that m it's uh m is

00:09:41,040 --> 00:09:44,959
defaults to zero and if it's zero it

00:09:43,120 --> 00:09:48,000
doesn't have to be present which makes

00:09:44,959 --> 00:09:50,000
the answer request compatible with wmts

00:09:48,000 --> 00:09:51,360
and with esri rest and probably with

00:09:50,000 --> 00:09:54,399
many other

00:09:51,360 --> 00:09:55,839
map protocols out there

00:09:54,399 --> 00:09:57,839
what it consists of from the software

00:09:55,839 --> 00:10:01,600
point of view there's a library

00:09:57,839 --> 00:10:04,720
which is uh the core of the shared code

00:10:01,600 --> 00:10:06,800
leap adsay which contains codecs for

00:10:04,720 --> 00:10:09,839
jpeg and png

00:10:06,800 --> 00:10:14,320
and some of the ads

00:10:09,839 --> 00:10:17,760
specific configuration parsing and also

00:10:14,320 --> 00:10:18,720
web parsing url parsing type of

00:10:17,760 --> 00:10:21,279
functions that

00:10:18,720 --> 00:10:23,600
are shared between any tile web tile

00:10:21,279 --> 00:10:28,240
servers

00:10:23,600 --> 00:10:31,360
then there are source modules

00:10:28,240 --> 00:10:34,079
mod mrf and mod e cache which are

00:10:31,360 --> 00:10:36,160
uh reading tiles from disk from

00:10:34,079 --> 00:10:39,680
different formats from mrf format

00:10:36,160 --> 00:10:42,560
for or from ecash um

00:10:39,680 --> 00:10:44,000
and and send them to as a response to

00:10:42,560 --> 00:10:47,360
the request

00:10:44,000 --> 00:10:49,440
these are um basically formats that

00:10:47,360 --> 00:10:51,519
i've selected for optimum performance

00:10:49,440 --> 00:10:53,839
mrf is also my own

00:10:51,519 --> 00:10:56,079
software my own format it's a very good

00:10:53,839 --> 00:10:59,040
tile storage format

00:10:56,079 --> 00:11:01,200
and it's really hard to separate the mrf

00:10:59,040 --> 00:11:03,040
features from the ate features because

00:11:01,200 --> 00:11:06,160
they've been evolving together

00:11:03,040 --> 00:11:07,440
so that's um a bit of a disclaimer this

00:11:06,160 --> 00:11:09,040
presentation i'm not going to get too

00:11:07,440 --> 00:11:10,640
much into the mrf

00:11:09,040 --> 00:11:12,320
but they're really tied together and a

00:11:10,640 --> 00:11:15,120
lot of the features that are possibly

00:11:12,320 --> 00:11:17,200
not say are because of the mrf format

00:11:15,120 --> 00:11:20,160
the e cache is the esri bundle format

00:11:17,200 --> 00:11:21,920
i'm going to talk about those later

00:11:20,160 --> 00:11:23,680
there's also operation modules so these

00:11:21,920 --> 00:11:26,079
are modules that can be stacked

00:11:23,680 --> 00:11:27,040
on top of the source module and they do

00:11:26,079 --> 00:11:29,279
different things

00:11:27,040 --> 00:11:30,160
there's a mod convert a mod reproject a

00:11:29,279 --> 00:11:32,720
mod fill

00:11:30,160 --> 00:11:34,079
a mod adds a png and there's a couple of

00:11:32,720 --> 00:11:37,200
more

00:11:34,079 --> 00:11:40,240
these are kind of second level modules

00:11:37,200 --> 00:11:41,360
that are used to build more complex file

00:11:40,240 --> 00:11:44,560
services

00:11:41,360 --> 00:11:45,680
there's also utility modules things that

00:11:44,560 --> 00:11:48,000
don't

00:11:45,680 --> 00:11:48,720
actually match with enantio but are

00:11:48,000 --> 00:11:52,000
needed to

00:11:48,720 --> 00:11:54,399
to produce a full blown tile server

00:11:52,000 --> 00:11:56,639
um they handle things like the protocol

00:11:54,399 --> 00:11:58,320
files like when you do a wmts request to

00:11:56,639 --> 00:12:00,240
get the capabilities

00:11:58,320 --> 00:12:01,680
that's not part of the adsense modules

00:12:00,240 --> 00:12:04,079
themselves and it's done

00:12:01,680 --> 00:12:06,160
by some utility modules that that handle

00:12:04,079 --> 00:12:10,000
json and handle

00:12:06,160 --> 00:12:12,480
different protocols receive module

00:12:10,000 --> 00:12:13,120
is a is part of the communication

00:12:12,480 --> 00:12:15,600
mechanism

00:12:13,120 --> 00:12:17,600
it's actually used to receive a tile

00:12:15,600 --> 00:12:20,800
from a from a back-end service

00:12:17,600 --> 00:12:22,720
and offer it to a top-end service um

00:12:20,800 --> 00:12:24,079
the rest of the presentation i'm gonna

00:12:22,720 --> 00:12:26,079
actually actually

00:12:24,079 --> 00:12:28,160
do some demos and then talk about

00:12:26,079 --> 00:12:30,079
different modules from otse

00:12:28,160 --> 00:12:31,920
in the context of that demo how they're

00:12:30,079 --> 00:12:35,200
being used to show

00:12:31,920 --> 00:12:37,440
what you can do with adse

00:12:35,200 --> 00:12:38,720
the first one is the big one it's the

00:12:37,440 --> 00:12:42,000
nasa worldview

00:12:38,720 --> 00:12:44,480
and gibbs nasa worldview is the client

00:12:42,000 --> 00:12:45,600
gibbs stands for global image browse

00:12:44,480 --> 00:12:47,600
system

00:12:45,600 --> 00:12:49,760
um the link below is for the for the

00:12:47,600 --> 00:12:52,000
user interface for the whirlwind

00:12:49,760 --> 00:12:53,120
uh for the sorry for the world view who

00:12:52,000 --> 00:12:56,320
that was a

00:12:53,120 --> 00:12:59,680
freudian sleep there um so

00:12:56,320 --> 00:13:03,440
let's do a demo let's see

00:12:59,680 --> 00:13:05,440
so um this is world view behind it it's

00:13:03,440 --> 00:13:06,320
a massive server this is probably one of

00:13:05,440 --> 00:13:09,760
the biggest

00:13:06,320 --> 00:13:12,399
cloud servers out there it handles

00:13:09,760 --> 00:13:12,800
close to a thousand different data sets

00:13:12,399 --> 00:13:15,120
it's

00:13:12,800 --> 00:13:16,720
mostly based on mrf so it's a bunch of

00:13:15,120 --> 00:13:20,160
mrf stored in

00:13:16,720 --> 00:13:22,240
in the nasa site it probably has

00:13:20,160 --> 00:13:24,639
multiple petabytes of data i'm still

00:13:22,240 --> 00:13:26,639
collaborating with this project

00:13:24,639 --> 00:13:28,560
but i'm not actually part of it so i

00:13:26,639 --> 00:13:29,120
don't actually know the current figures

00:13:28,560 --> 00:13:32,399
and what

00:13:29,120 --> 00:13:34,320
exactly how many data says they're using

00:13:32,399 --> 00:13:35,440
the user client kind of shows what it

00:13:34,320 --> 00:13:38,160
can do

00:13:35,440 --> 00:13:40,160
it's extremely powerful it's based on

00:13:38,160 --> 00:13:42,240
open layers 3

00:13:40,160 --> 00:13:43,440
and it's all based on tile requests that

00:13:42,240 --> 00:13:46,240
are being served

00:13:43,440 --> 00:13:47,279
on the server side this is mostly on

00:13:46,240 --> 00:13:50,000
earth

00:13:47,279 --> 00:13:50,800
which is the precursor to atsei it's a

00:13:50,000 --> 00:13:54,880
single

00:13:50,800 --> 00:13:57,360
monolithic type of tile server

00:13:54,880 --> 00:13:59,199
also an apache module so it's an

00:13:57,360 --> 00:13:59,680
extension of apache just like i'd say is

00:13:59,199 --> 00:14:01,920
but it's

00:13:59,680 --> 00:14:03,920
it's monolithic so it does everything

00:14:01,920 --> 00:14:07,040
within a single module

00:14:03,920 --> 00:14:09,360
um this was done about 10 years ago and

00:14:07,040 --> 00:14:10,320
based on the lessons that that we've

00:14:09,360 --> 00:14:14,000
learned from

00:14:10,320 --> 00:14:16,160
using a mod on earth i'd say was

00:14:14,000 --> 00:14:18,079
was initiated to to separate the

00:14:16,160 --> 00:14:21,440
functionality and make it easier

00:14:18,079 --> 00:14:23,040
to to mix and match um so this is this

00:14:21,440 --> 00:14:25,120
is on earth but it's really

00:14:23,040 --> 00:14:26,399
the same as odds i'd say can be

00:14:25,120 --> 00:14:28,320
considered the

00:14:26,399 --> 00:14:30,959
version 2 of on earth actually nasa

00:14:28,320 --> 00:14:34,160
refers to that way

00:14:30,959 --> 00:14:36,720
and gibbs is

00:14:34,160 --> 00:14:38,880
on-prem most of the data is on really

00:14:36,720 --> 00:14:41,360
expensive really big

00:14:38,880 --> 00:14:43,199
sand drives but they're in the process

00:14:41,360 --> 00:14:45,279
of moving to the cloud

00:14:43,199 --> 00:14:46,639
they have multiple petabytes of data

00:14:45,279 --> 00:14:49,600
some uh the the

00:14:46,639 --> 00:14:50,560
main feature of the data sets that um

00:14:49,600 --> 00:14:52,560
that gibson

00:14:50,560 --> 00:14:54,240
and world wing offers is the temporal

00:14:52,560 --> 00:14:54,720
dimensions so all of these are temporal

00:14:54,240 --> 00:14:57,199
you can

00:14:54,720 --> 00:14:58,240
move the slider here and pick up data

00:14:57,199 --> 00:15:00,480
from a different

00:14:58,240 --> 00:15:02,240
different date as i said it's a very

00:15:00,480 --> 00:15:05,920
very powerful client

00:15:02,240 --> 00:15:07,839
you can choose by events um you can do

00:15:05,920 --> 00:15:09,440
comparisons so you can pick a fire for

00:15:07,839 --> 00:15:09,760
example we have plenty of them now in

00:15:09,440 --> 00:15:12,160
the

00:15:09,760 --> 00:15:13,440
on the west coast unfortunately and you

00:15:12,160 --> 00:15:16,399
can go into

00:15:13,440 --> 00:15:18,160
layers and say i want to do a comparison

00:15:16,399 --> 00:15:19,839
you now have two separate windows you

00:15:18,160 --> 00:15:22,800
can pick what you want to see in each

00:15:19,839 --> 00:15:24,800
one of them you can move the time slider

00:15:22,800 --> 00:15:26,480
for either one of them individually and

00:15:24,800 --> 00:15:29,360
switch the data sets

00:15:26,480 --> 00:15:31,120
and then you can do you know swipe the

00:15:29,360 --> 00:15:34,079
data to see how the

00:15:31,120 --> 00:15:35,600
event progressed between the two days or

00:15:34,079 --> 00:15:38,560
you can do

00:15:35,600 --> 00:15:40,000
you know very fancy graphical ways of of

00:15:38,560 --> 00:15:43,360
exploring the differences between

00:15:40,000 --> 00:15:45,040
the two data sets it supports mostly

00:15:43,360 --> 00:15:47,839
raster services but

00:15:45,040 --> 00:15:49,040
um they also are transitioning into a

00:15:47,839 --> 00:15:51,040
little bit of vectors

00:15:49,040 --> 00:15:52,240
there's lots of metadata you can click

00:15:51,040 --> 00:15:55,199
on some of the data

00:15:52,240 --> 00:15:57,360
and find out exact information about

00:15:55,199 --> 00:15:59,360
what that point represents

00:15:57,360 --> 00:16:00,720
the data is stored as i said is stored

00:15:59,360 --> 00:16:03,759
in mrf it's a huge

00:16:00,720 --> 00:16:07,360
archive it's a time enabled

00:16:03,759 --> 00:16:09,199
and it's using mostly jpeg for the

00:16:07,360 --> 00:16:10,720
reflectance products like the background

00:16:09,199 --> 00:16:14,320
here and it's

00:16:10,720 --> 00:16:17,680
using pngs for most of the data that

00:16:14,320 --> 00:16:19,120
that is categorical so it's actually

00:16:17,680 --> 00:16:21,040
styled with the color palette that

00:16:19,120 --> 00:16:23,440
actually means something you can pick

00:16:21,040 --> 00:16:24,880
for example one of these events like a

00:16:23,440 --> 00:16:27,920
hurricane

00:16:24,880 --> 00:16:30,959
and click on a specific date

00:16:27,920 --> 00:16:34,880
and the color data here it's actually a

00:16:30,959 --> 00:16:36,560
color palette in a in a png that shows

00:16:34,880 --> 00:16:38,240
let's see i have to go back to layers to

00:16:36,560 --> 00:16:40,079
see what it actually means it shows

00:16:38,240 --> 00:16:41,120
precipitation rates and it gives you the

00:16:40,079 --> 00:16:43,360
color rate

00:16:41,120 --> 00:16:45,680
so any case that's um enough for the

00:16:43,360 --> 00:16:49,040
demo there's lots of stuff to see

00:16:45,680 --> 00:16:50,560
into um into world view

00:16:49,040 --> 00:16:53,199
keep an eye on the earth look at

00:16:50,560 --> 00:16:56,720
anywhere you want these are some of the

00:16:53,199 --> 00:16:59,839
the highlights of the of the gibbs

00:16:56,720 --> 00:17:01,040
project um it offers access to over 900

00:16:59,839 --> 00:17:02,720
i think it's actually close to a

00:17:01,040 --> 00:17:05,839
thousand by now

00:17:02,720 --> 00:17:07,360
it's temporal updated daily in real time

00:17:05,839 --> 00:17:09,839
so you can get data that's as

00:17:07,360 --> 00:17:11,360
fresh as two or three hours or actually

00:17:09,839 --> 00:17:13,439
it's less than that now that they

00:17:11,360 --> 00:17:16,319
support uh noaa goes

00:17:13,439 --> 00:17:18,319
and some of the products spawn almost 30

00:17:16,319 --> 00:17:21,520
years so there's a 30 year

00:17:18,319 --> 00:17:23,439
archive of daily products and all of

00:17:21,520 --> 00:17:24,000
that is available as tile services it's

00:17:23,439 --> 00:17:27,520
one of the

00:17:24,000 --> 00:17:29,280
most powerful tile servers out there

00:17:27,520 --> 00:17:30,880
they try to make this data available to

00:17:29,280 --> 00:17:33,600
many clients

00:17:30,880 --> 00:17:35,200
using many different service protocols

00:17:33,600 --> 00:17:36,400
standard service protocol they support

00:17:35,200 --> 00:17:38,400
wms

00:17:36,400 --> 00:17:39,600
they support wmts which is kind of the

00:17:38,400 --> 00:17:42,799
native the wms

00:17:39,600 --> 00:17:44,080
um is actually built on top of the wmts

00:17:42,799 --> 00:17:45,440
which is very interesting because it

00:17:44,080 --> 00:17:46,320
decouples the two you don't have to

00:17:45,440 --> 00:17:48,240
maintain

00:17:46,320 --> 00:17:49,679
the two data sets you maintain the tile

00:17:48,240 --> 00:17:53,200
service and the wms just

00:17:49,679 --> 00:17:56,240
works on top of that one of their

00:17:53,200 --> 00:17:58,240
problems is that they want to make the

00:17:56,240 --> 00:18:00,640
data available in multiple projections

00:17:58,240 --> 00:18:01,440
natively it's geographic and the grid

00:18:00,640 --> 00:18:03,440
they use

00:18:01,440 --> 00:18:05,039
is aligned with the modus resolution

00:18:03,440 --> 00:18:07,360
because they didn't want to over sample

00:18:05,039 --> 00:18:09,520
or under sample the modus data

00:18:07,360 --> 00:18:10,400
because it's very valuable is very

00:18:09,520 --> 00:18:13,200
useful

00:18:10,400 --> 00:18:14,000
so they pick that as the standard but

00:18:13,200 --> 00:18:16,400
that makes them

00:18:14,000 --> 00:18:17,840
incompatible with standard web

00:18:16,400 --> 00:18:20,480
applications like

00:18:17,840 --> 00:18:21,919
google maps which is the web mercator

00:18:20,480 --> 00:18:25,360
well-known

00:18:21,919 --> 00:18:27,679
tile grid so that's one of the problems

00:18:25,360 --> 00:18:29,039
that that is addressing and that's going

00:18:27,679 --> 00:18:31,200
to be

00:18:29,039 --> 00:18:32,559
talked about next they also support

00:18:31,200 --> 00:18:34,240
polaris geographic

00:18:32,559 --> 00:18:35,679
stereographic for the north pole and the

00:18:34,240 --> 00:18:37,679
south pole

00:18:35,679 --> 00:18:39,600
again nasa worldview is the primary

00:18:37,679 --> 00:18:43,679
client but many other clients

00:18:39,600 --> 00:18:45,200
are compatible and it's wms and wmts so

00:18:43,679 --> 00:18:47,280
anything that's compatible with that

00:18:45,200 --> 00:18:51,520
will work

00:18:47,280 --> 00:18:51,520
given the the tile limitations

00:18:52,000 --> 00:18:55,200
as i said the server is on earth which

00:18:54,640 --> 00:18:57,120
is an

00:18:55,200 --> 00:18:58,960
oddssey precursor it's open source

00:18:57,120 --> 00:18:59,840
itself on github the link is going to be

00:18:58,960 --> 00:19:02,799
in the last

00:18:59,840 --> 00:19:04,640
slide currently the data is on premise

00:19:02,799 --> 00:19:06,320
within nasa it's in the process of

00:19:04,640 --> 00:19:08,320
moving to the cloud

00:19:06,320 --> 00:19:10,240
the honors 2 is under development will

00:19:08,320 --> 00:19:11,120
be based fully or not say but they're

00:19:10,240 --> 00:19:14,400
already using

00:19:11,120 --> 00:19:14,640
some of the modules and um mod reproject

00:19:14,400 --> 00:19:17,039
is

00:19:14,640 --> 00:19:19,919
is one of the most important modules in

00:19:17,039 --> 00:19:23,440
nazi because of what it can do

00:19:19,919 --> 00:19:26,559
it actually makes geographic lat lawn

00:19:23,440 --> 00:19:27,919
and webmarketer compatible so you can

00:19:26,559 --> 00:19:30,320
serve either way

00:19:27,919 --> 00:19:31,200
from a single copy of the data it does

00:19:30,320 --> 00:19:34,000
this by doing

00:19:31,200 --> 00:19:35,919
in core tile conversion so it's not it

00:19:34,000 --> 00:19:37,840
doesn't employ a full stack of

00:19:35,919 --> 00:19:40,000
of a projection engine and all that

00:19:37,840 --> 00:19:42,480
stuff is actually a single code

00:19:40,000 --> 00:19:43,440
uh hand tuned hand optimized to do that

00:19:42,480 --> 00:19:46,480
conversion as soon

00:19:43,440 --> 00:19:47,120
as fast as possible um this is a really

00:19:46,480 --> 00:19:50,000
big deal

00:19:47,120 --> 00:19:51,919
for nasa it saves close to two-thirds of

00:19:50,000 --> 00:19:53,679
the storage space because web marketer

00:19:51,919 --> 00:19:54,799
is square it would have to be twice as

00:19:53,679 --> 00:19:57,440
big as the

00:19:54,799 --> 00:19:58,720
gcs if you are were to store everything

00:19:57,440 --> 00:20:02,480
in either

00:19:58,720 --> 00:20:05,200
in in both tal grids

00:20:02,480 --> 00:20:06,400
so saving two thirds of the storage

00:20:05,200 --> 00:20:08,400
space when you're talking about

00:20:06,400 --> 00:20:09,440
petabytes and petabytes of expensive

00:20:08,400 --> 00:20:11,840
fast storage

00:20:09,440 --> 00:20:14,400
is a really big deal and that's really

00:20:11,840 --> 00:20:17,679
the power of module project

00:20:14,400 --> 00:20:19,520
it does this in about i think there's a

00:20:17,679 --> 00:20:21,120
slide about it yet there's a slide about

00:20:19,520 --> 00:20:22,000
it specifically because it's so

00:20:21,120 --> 00:20:24,000
important

00:20:22,000 --> 00:20:25,039
it does this in about two milliseconds

00:20:24,000 --> 00:20:27,919
so it can it can

00:20:25,039 --> 00:20:28,720
read the tiles in the source projection

00:20:27,919 --> 00:20:31,919
it can

00:20:28,720 --> 00:20:33,840
decompress them re-sample reproject

00:20:31,919 --> 00:20:35,440
and recompress them into the output

00:20:33,840 --> 00:20:37,600
format output image format

00:20:35,440 --> 00:20:39,520
in about two milliseconds per request on

00:20:37,600 --> 00:20:43,039
average

00:20:39,520 --> 00:20:44,080
if you know the the geometry of these

00:20:43,039 --> 00:20:46,559
projections

00:20:44,080 --> 00:20:48,720
um the horizontal axis is identical

00:20:46,559 --> 00:20:50,880
between gcs and web marketer

00:20:48,720 --> 00:20:52,000
the only difference is the vertical when

00:20:50,880 --> 00:20:55,039
you transfer

00:20:52,000 --> 00:20:56,080
web marketer to gcs you have to compact

00:20:55,039 --> 00:20:59,120
the data

00:20:56,080 --> 00:21:02,640
at the at the north and south extremes

00:20:59,120 --> 00:21:04,159
up to 11 to 1. this conversion from web

00:21:02,640 --> 00:21:06,400
marketer to gcs

00:21:04,159 --> 00:21:07,840
we employ within esri for the gcs

00:21:06,400 --> 00:21:10,480
imagery

00:21:07,840 --> 00:21:12,080
again this saves us work and space

00:21:10,480 --> 00:21:13,600
because we don't have to maintain two

00:21:12,080 --> 00:21:16,320
different

00:21:13,600 --> 00:21:18,760
collections of imagery we have our esri

00:21:16,320 --> 00:21:21,440
world imagery is about

00:21:18,760 --> 00:21:24,640
150 terabytes so that would be a lot of

00:21:21,440 --> 00:21:28,080
work to maintain it twice

00:21:24,640 --> 00:21:31,280
gcs to webrecater is what nasa gibbs

00:21:28,080 --> 00:21:33,440
needs and what it does it

00:21:31,280 --> 00:21:35,440
it's the opposite so you have to stretch

00:21:33,440 --> 00:21:37,440
it one to 11.

00:21:35,440 --> 00:21:39,120
obviously stretching is more problematic

00:21:37,440 --> 00:21:39,520
because you lose the image quality you

00:21:39,120 --> 00:21:42,000
over

00:21:39,520 --> 00:21:43,600
sample low resolution data so you need

00:21:42,000 --> 00:21:45,200
higher resolution input which means you

00:21:43,600 --> 00:21:46,880
have to switch levels you need to read

00:21:45,200 --> 00:21:49,919
data from a higher resolution

00:21:46,880 --> 00:21:53,679
level to produce a tile at a

00:21:49,919 --> 00:21:56,799
specific output resolution but it works

00:21:53,679 --> 00:21:58,640
um either either case it does

00:21:56,799 --> 00:22:01,120
two milliseconds extra latency there's a

00:21:58,640 --> 00:22:04,240
single thread per request but it's

00:22:01,120 --> 00:22:07,280
well bolted into the apache http uh

00:22:04,240 --> 00:22:10,320
multi-processing model so it works in a

00:22:07,280 --> 00:22:12,320
mercury model or in event model

00:22:10,320 --> 00:22:14,159
really well so the throughput is huge

00:22:12,320 --> 00:22:16,000
you can have multiple requests

00:22:14,159 --> 00:22:18,400
being on the fly worked on by different

00:22:16,000 --> 00:22:19,919
threads at the same time

00:22:18,400 --> 00:22:21,520
and this two milliseconds includes the

00:22:19,919 --> 00:22:24,840
format transcoding

00:22:21,520 --> 00:22:27,600
um it's using the it can it can use the

00:22:24,840 --> 00:22:28,799
system jpeg library which usually is

00:22:27,600 --> 00:22:31,840
turbo jpeg to

00:22:28,799 --> 00:22:34,080
to accelerate at the png somewhat slower

00:22:31,840 --> 00:22:35,760
because png is slower

00:22:34,080 --> 00:22:37,280
there's not much you can do about that

00:22:35,760 --> 00:22:40,880
but it's really really powerful

00:22:37,280 --> 00:22:42,640
and it it kind of does away with the the

00:22:40,880 --> 00:22:44,960
very hard decision that you have to make

00:22:42,640 --> 00:22:46,799
up to this point how do i store my data

00:22:44,960 --> 00:22:48,880
do i store it in geographic or do i

00:22:46,799 --> 00:22:51,600
store it in web marketer

00:22:48,880 --> 00:22:52,559
the module itself supports geographic

00:22:51,600 --> 00:22:55,039
web mercator

00:22:52,559 --> 00:22:57,120
and true marketer the wgs84 based

00:22:55,039 --> 00:22:58,880
mercator

00:22:57,120 --> 00:23:00,320
these are really good because they're

00:22:58,880 --> 00:23:03,120
separable to the

00:23:00,320 --> 00:23:05,520
projections you can do the x axis

00:23:03,120 --> 00:23:08,080
separate from the y-axis so it takes

00:23:05,520 --> 00:23:10,880
a lot less math to figure out the exact

00:23:08,080 --> 00:23:14,080
projection and then you only have to do

00:23:10,880 --> 00:23:16,480
resampling it does this by

00:23:14,080 --> 00:23:17,440
a custom implementation so it's really

00:23:16,480 --> 00:23:20,159
really fast

00:23:17,440 --> 00:23:22,480
and really this module brings a tile

00:23:20,159 --> 00:23:23,919
service very close to a dynamic service

00:23:22,480 --> 00:23:25,520
because not only that you can change the

00:23:23,919 --> 00:23:27,200
projection but you can change the tile

00:23:25,520 --> 00:23:30,159
grid you can change the tile size

00:23:27,200 --> 00:23:32,159
without touching the data so it's it's

00:23:30,159 --> 00:23:33,760
getting really close to being a dynamic

00:23:32,159 --> 00:23:35,679
service the difference is

00:23:33,760 --> 00:23:38,080
that the control is on the server side

00:23:35,679 --> 00:23:40,880
so the the server management

00:23:38,080 --> 00:23:41,840
the server administrator can choose what

00:23:40,880 --> 00:23:45,760
are the tiles that

00:23:41,840 --> 00:23:49,039
that that that he wants to support

00:23:45,760 --> 00:23:51,520
and it's not up to the to the clients to

00:23:49,039 --> 00:23:52,400
request any projections in any tile size

00:23:51,520 --> 00:23:54,799
that you want

00:23:52,400 --> 00:23:56,960
this enables the server to be much more

00:23:54,799 --> 00:24:00,480
scalable because it's not subject

00:23:56,960 --> 00:24:02,880
to uh abuse to people that can request

00:24:00,480 --> 00:24:04,080
wms you know single pixel at a time

00:24:02,880 --> 00:24:06,559
overwhelming your server

00:24:04,080 --> 00:24:08,159
really fast this is a really useful

00:24:06,559 --> 00:24:11,520
feature

00:24:08,159 --> 00:24:12,559
um okay second example is earth life

00:24:11,520 --> 00:24:15,840
this is um

00:24:12,559 --> 00:24:19,039
a collaboration with noaa and esri

00:24:15,840 --> 00:24:20,720
it's um evolution yes

00:24:19,039 --> 00:24:22,159
yeah you got 10 minutes left in the

00:24:20,720 --> 00:24:23,919
session so if you want to leave five

00:24:22,159 --> 00:24:25,919
minutes for q a it's up to you but you

00:24:23,919 --> 00:24:29,360
got ten minutes or maybe

00:24:25,919 --> 00:24:31,360
okay well this is going really fast

00:24:29,360 --> 00:24:32,960
okay so this is earth live it's super

00:24:31,360 --> 00:24:36,240
fast it's actually

00:24:32,960 --> 00:24:39,600
data from 10 minutes ago it's real time

00:24:36,240 --> 00:24:43,279
and it's extremely fast this is done

00:24:39,600 --> 00:24:46,480
through mrf and it's actually stored

00:24:43,279 --> 00:24:47,200
on ssds on an amazon instance this is

00:24:46,480 --> 00:24:49,520
the key to

00:24:47,200 --> 00:24:50,480
to the to the speed it's extremely

00:24:49,520 --> 00:24:52,080
scalable this

00:24:50,480 --> 00:24:54,159
easily breaks through the 10 000

00:24:52,080 --> 00:24:57,600
requests per second

00:24:54,159 --> 00:24:59,200
serving throughput and it's done again

00:24:57,600 --> 00:25:01,039
because it's a single instance

00:24:59,200 --> 00:25:03,760
everything is in ssd

00:25:01,039 --> 00:25:05,600
which is almost as fast as memory so the

00:25:03,760 --> 00:25:08,080
bottleneck is actually the

00:25:05,600 --> 00:25:08,080
network

00:25:08,960 --> 00:25:12,559
let's see there's multiple products

00:25:11,120 --> 00:25:13,520
there there's actually the true color

00:25:12,559 --> 00:25:15,840
which i just showed

00:25:13,520 --> 00:25:17,760
it's produced by noaa visualization lab

00:25:15,840 --> 00:25:20,240
and we take over the serving

00:25:17,760 --> 00:25:20,799
there's also band 13 which is an

00:25:20,240 --> 00:25:22,960
infrared

00:25:20,799 --> 00:25:24,880
composites from three different

00:25:22,960 --> 00:25:28,559
satellites it's two kilometers so it's

00:25:24,880 --> 00:25:30,799
fairly low resolution but the temporal

00:25:28,559 --> 00:25:33,840
dimension accuracy is really really high

00:25:30,799 --> 00:25:37,039
it's every 10 minutes

00:25:33,840 --> 00:25:37,520
in uh this service especially the let's

00:25:37,039 --> 00:25:40,320
see

00:25:37,520 --> 00:25:41,559
the we have different we have a

00:25:40,320 --> 00:25:44,320
capability with

00:25:41,559 --> 00:25:46,320
implementation of applying color

00:25:44,320 --> 00:25:47,200
palettes on the fly so this is the real

00:25:46,320 --> 00:25:50,720
data

00:25:47,200 --> 00:25:53,919
it's grayscale png but because it's png

00:25:50,720 --> 00:25:56,640
i can actually use mod i'd say png

00:25:53,919 --> 00:25:58,159
to add a palette to each and every png

00:25:56,640 --> 00:26:00,400
as it goes to the server so i can

00:25:58,159 --> 00:26:03,120
present it with different color

00:26:00,400 --> 00:26:04,000
palettes i can present it like this

00:26:03,120 --> 00:26:06,480
which is

00:26:04,000 --> 00:26:08,159
highlighting the storms but the problem

00:26:06,480 --> 00:26:11,120
is i lost the background

00:26:08,159 --> 00:26:12,000
or i can do a palette with transparency

00:26:11,120 --> 00:26:13,919
on the fly

00:26:12,000 --> 00:26:16,159
and show just the highlights of the

00:26:13,919 --> 00:26:18,080
storm on the real background

00:26:16,159 --> 00:26:20,320
these are done with a single copy of the

00:26:18,080 --> 00:26:22,880
data on disk the palettes are added on

00:26:20,320 --> 00:26:22,880
the fly

00:26:23,200 --> 00:26:30,080
let's see um mars is astroarcgis.com

00:26:27,679 --> 00:26:31,279
we have some of the biggest mars data

00:26:30,080 --> 00:26:34,559
sets out there

00:26:31,279 --> 00:26:36,000
we include celtic ctx mosaic which is a

00:26:34,559 --> 00:26:37,679
five meter mosaic

00:26:36,000 --> 00:26:40,799
and the high-rise assembly which is

00:26:37,679 --> 00:26:43,600
unique we built as a test for itse

00:26:40,799 --> 00:26:44,640
they really were built together so the

00:26:43,600 --> 00:26:46,480
smart server

00:26:44,640 --> 00:26:48,640
shows most of the power that uh that

00:26:46,480 --> 00:26:51,520
otz0 can have

00:26:48,640 --> 00:26:52,640
high-rise is 0.5 meters per pixel

00:26:51,520 --> 00:26:55,039
resolution

00:26:52,640 --> 00:26:55,919
ctx is 5 meter per pixel they're both

00:26:55,039 --> 00:26:58,159
enormous

00:26:55,919 --> 00:26:58,960
ctx is about 5 terabytes of data high

00:26:58,159 --> 00:27:02,640
rise

00:26:58,960 --> 00:27:05,440
is a mosaic in mrf format built from 50

00:27:02,640 --> 00:27:08,400
terabytes of jpeg 2 000 raw data

00:27:05,440 --> 00:27:09,840
it's also high rise is also hdr it's 10

00:27:08,400 --> 00:27:12,320
bit data

00:27:09,840 --> 00:27:13,919
asset let's me so this is the stack this

00:27:12,320 --> 00:27:14,799
is the azure stack behind the mars

00:27:13,919 --> 00:27:16,799
server

00:27:14,799 --> 00:27:18,720
uh basically any one of these points

00:27:16,799 --> 00:27:20,960
represent the tile service the base is

00:27:18,720 --> 00:27:24,000
the raw data and then

00:27:20,960 --> 00:27:25,279
each top level stack module pulls data

00:27:24,000 --> 00:27:26,720
from the ones below

00:27:25,279 --> 00:27:28,399
so for high-rise which is one of the

00:27:26,720 --> 00:27:31,440
most complex

00:27:28,399 --> 00:27:33,039
it's stored in 10-bit jpeg with the with

00:27:31,440 --> 00:27:35,760
a mask extension

00:27:33,039 --> 00:27:37,440
it's then converted to png 8-bit to make

00:27:35,760 --> 00:27:39,840
it compatible with browser

00:27:37,440 --> 00:27:40,640
it's then aligned with the ctx grid

00:27:39,840 --> 00:27:44,480
because

00:27:40,640 --> 00:27:46,159
um between 5 meters and and 0.5 meters

00:27:44,480 --> 00:27:47,600
it's actually a factor of 10 which is

00:27:46,159 --> 00:27:49,840
not a power of 2 so you

00:27:47,600 --> 00:27:50,720
they're not compatible in in the normal

00:27:49,840 --> 00:27:54,159
standard

00:27:50,720 --> 00:27:55,279
tile resolution levels so to eliminate

00:27:54,159 --> 00:27:58,159
that and not have to

00:27:55,279 --> 00:28:00,480
to to duplicate the data it's actually

00:27:58,159 --> 00:28:03,520
done on the fly so again

00:28:00,480 --> 00:28:05,679
reproject is used to scale not to change

00:28:03,520 --> 00:28:07,760
the projection but to scale and regrid

00:28:05,679 --> 00:28:08,720
so that the ctx grid is aligned with the

00:28:07,760 --> 00:28:10,799
highrise grid

00:28:08,720 --> 00:28:12,240
so they can be shown in a normal browser

00:28:10,799 --> 00:28:15,520
using things like

00:28:12,240 --> 00:28:18,320
leaflet or open open layers

00:28:15,520 --> 00:28:20,000
and then on top you have the normal png

00:28:18,320 --> 00:28:20,960
formats that are compatible with the

00:28:20,000 --> 00:28:22,880
browser

00:28:20,960 --> 00:28:24,960
so this is very complex there's multiple

00:28:22,880 --> 00:28:26,880
data sets

00:28:24,960 --> 00:28:29,200
it's really how the whole thing is

00:28:26,880 --> 00:28:31,760
possible

00:28:29,200 --> 00:28:33,440
um the modules again ctx need

00:28:31,760 --> 00:28:36,000
transparency it's using

00:28:33,440 --> 00:28:37,919
mod convert which changes between a jpeg

00:28:36,000 --> 00:28:40,320
with a mask format to png

00:28:37,919 --> 00:28:41,440
pngs would be much bigger so using this

00:28:40,320 --> 00:28:44,159
uh trick of

00:28:41,440 --> 00:28:45,919
storing it as jpeg with a mask the data

00:28:44,159 --> 00:28:48,000
set itself on disk is about

00:28:45,919 --> 00:28:49,039
one one terabyte as opposed to five

00:28:48,000 --> 00:28:51,520
terabytes

00:28:49,039 --> 00:28:52,399
the same trick is used on high rise the

00:28:51,520 --> 00:28:54,960
high rise is more

00:28:52,399 --> 00:28:56,799
tricky because it's 10 bit but asis

00:28:54,960 --> 00:28:58,880
supports 12 bit jpeg

00:28:56,799 --> 00:29:00,799
again with the mask which works very

00:28:58,880 --> 00:29:02,399
nice because high-rise is also extremely

00:29:00,799 --> 00:29:04,159
sparse there's only about three percent

00:29:02,399 --> 00:29:06,880
of the mars surface

00:29:04,159 --> 00:29:09,039
um and all of these are made compatible

00:29:06,880 --> 00:29:10,960
either with the browser or offering the

00:29:09,039 --> 00:29:12,960
the raw 10-bit range for clients that

00:29:10,960 --> 00:29:16,880
can handle that that can use that

00:29:12,960 --> 00:29:18,720
things like gdl there's actually wmts

00:29:16,880 --> 00:29:21,679
gdal drivers that can connect directly

00:29:18,720 --> 00:29:21,679
to an access service

00:29:22,559 --> 00:29:28,880
let's see so these are the challenges

00:29:25,919 --> 00:29:30,399
there's also mod ecash which is a dns

00:29:28,880 --> 00:29:32,720
like

00:29:30,399 --> 00:29:34,960
specific for tile services module that

00:29:32,720 --> 00:29:35,760
can be put on top of a stack of aza

00:29:34,960 --> 00:29:38,320
modules

00:29:35,760 --> 00:29:40,480
to accelerate the access or to take it

00:29:38,320 --> 00:29:44,240
closer to the end user to improve

00:29:40,480 --> 00:29:44,880
performance overall so this is kind of

00:29:44,240 --> 00:29:47,200
the

00:29:44,880 --> 00:29:49,120
final conclusion there's really three

00:29:47,200 --> 00:29:51,120
types of vata services there's bulk

00:29:49,120 --> 00:29:53,039
styles where the defining characteristic

00:29:51,120 --> 00:29:54,159
is storage there's instant tiles which

00:29:53,039 --> 00:29:56,559
are really fast

00:29:54,159 --> 00:29:58,159
sub millisecond latencies and there's

00:29:56,559 --> 00:29:59,120
deep tiles where you actually have some

00:29:58,159 --> 00:30:02,080
computation

00:29:59,120 --> 00:30:02,880
being done server side to produce much

00:30:02,080 --> 00:30:05,520
more refined

00:30:02,880 --> 00:30:05,520
data sets

00:30:05,919 --> 00:30:08,960
there's different modules that can be

00:30:07,440 --> 00:30:10,880
used for either

00:30:08,960 --> 00:30:12,960
mod mrf is really good for bulk mod

00:30:10,880 --> 00:30:14,960
ecash also works

00:30:12,960 --> 00:30:17,360
then you have extreme low latency again

00:30:14,960 --> 00:30:19,760
mod mrf mod png which doesn't actually

00:30:17,360 --> 00:30:22,640
decode or re-encode the png it just

00:30:19,760 --> 00:30:24,399
adds a pallet on the fly which is almost

00:30:22,640 --> 00:30:26,240
zero computational load

00:30:24,399 --> 00:30:28,159
and there's also deep which is

00:30:26,240 --> 00:30:29,760
computational load which makes it tricky

00:30:28,159 --> 00:30:32,159
because now you have to worry not about

00:30:29,760 --> 00:30:35,279
storage but also about cpus

00:30:32,159 --> 00:30:37,279
but again you can add ecash you can add

00:30:35,279 --> 00:30:39,520
a dns cache on top of it and makes it

00:30:37,279 --> 00:30:41,440
make it fast again

00:30:39,520 --> 00:30:43,440
so i think that's about it here's the

00:30:41,440 --> 00:30:45,039
links of things that i talked about i'd

00:30:43,440 --> 00:30:47,440
say it's the first one

00:30:45,039 --> 00:30:50,480
mrf that's just the documentation the

00:30:47,440 --> 00:30:52,640
mrf itself is part of gdl world view

00:30:50,480 --> 00:30:54,559
gibbs earth life the demos that i've

00:30:52,640 --> 00:30:55,120
done and i haven't talked about open

00:30:54,559 --> 00:31:00,000
space

00:30:55,120 --> 00:31:02,640
it's a really powerful museum

00:31:00,000 --> 00:31:04,559
software to for for planetarium so you

00:31:02,640 --> 00:31:06,000
can support multiple projectors it's a

00:31:04,559 --> 00:31:08,799
universe visualization

00:31:06,000 --> 00:31:10,000
software that can use the mars data sets

00:31:08,799 --> 00:31:11,519
to their full power

00:31:10,000 --> 00:31:14,399
and the earth data sets to their full

00:31:11,519 --> 00:31:16,880
power and i think that kind of concludes

00:31:14,399 --> 00:31:16,880
my talk

00:31:16,960 --> 00:31:22,559
thank you excellent gosh

00:31:20,399 --> 00:31:23,440
yeah i know this is this is a bit of a

00:31:22,559 --> 00:31:26,559
yeah it's

00:31:23,440 --> 00:31:27,360
uh probably too much for most people to

00:31:26,559 --> 00:31:30,240
follow but

00:31:27,360 --> 00:31:31,919
um i'm i'm just trying to to raise some

00:31:30,240 --> 00:31:34,640
interest and to raise awareness that

00:31:31,919 --> 00:31:36,880
this exists

00:31:34,640 --> 00:31:39,120
and it's evolving so more features are

00:31:36,880 --> 00:31:40,559
planned

00:31:39,120 --> 00:31:42,720
let's take some questions looks like

00:31:40,559 --> 00:31:45,919
you've got at least two in the chat

00:31:42,720 --> 00:31:49,519
uh should i see stuff be on packager's

00:31:45,919 --> 00:31:51,840
radar sample of one doesn't appear to be

00:31:49,519 --> 00:31:54,480
packaged

00:31:51,840 --> 00:31:55,840
i didn't get that it's in the chat it's

00:31:54,480 --> 00:31:58,960
in the chat yeah

00:31:55,840 --> 00:32:01,840
from nick i don't

00:31:58,960 --> 00:32:01,840
see it

00:32:02,399 --> 00:32:05,279
click on chat again

00:32:06,620 --> 00:32:11,360
[Music]

00:32:08,640 --> 00:32:14,080
what was the question again uh i can

00:32:11,360 --> 00:32:15,919
copy and paste and repeat it again or i

00:32:14,080 --> 00:32:18,080
could say it again too i guess

00:32:15,919 --> 00:32:18,080
um

00:32:20,240 --> 00:32:28,159
try looking at chat again because um

00:32:23,519 --> 00:32:30,480
nothing oh

00:32:28,159 --> 00:32:31,840
yeah sorry oh no you gotta go to session

00:32:30,480 --> 00:32:34,480
no event is for everything

00:32:31,840 --> 00:32:35,840
sorry well in session is empty you ain't

00:32:34,480 --> 00:32:38,880
getting nothing that is

00:32:35,840 --> 00:32:39,600
weird that's my problem so let me read

00:32:38,880 --> 00:32:42,720
it to you

00:32:39,600 --> 00:32:42,720
um okay

00:32:43,200 --> 00:32:50,960
stuff be on packager's radar

00:32:47,519 --> 00:32:54,240
uh sample of sure why one

00:32:50,960 --> 00:32:58,000
colon debian doesn't appear to

00:32:54,240 --> 00:33:00,960
package it yet i

00:32:58,000 --> 00:33:02,320
do not know what that is um i'm more

00:33:00,960 --> 00:33:04,799
than happy to go to one of the

00:33:02,320 --> 00:33:06,399
hallway sessions and talk directly it's

00:33:04,799 --> 00:33:08,840
probably easier because i don't i don't

00:33:06,399 --> 00:33:11,840
actually know

00:33:08,840 --> 00:33:11,840
what

00:33:12,480 --> 00:33:15,919
you guys meet up afterwards next

00:33:15,200 --> 00:33:19,640
question

00:33:15,919 --> 00:33:22,960
any support for the

00:33:19,640 --> 00:33:26,640
https um

00:33:22,960 --> 00:33:26,640
i f.i.o

00:33:30,240 --> 00:33:34,159
yeah i'm not sure what that is either so

00:33:32,559 --> 00:33:37,279
the answer is no

00:33:34,159 --> 00:33:39,679
international imagery oh international

00:33:37,279 --> 00:33:40,960
image interoperability framework well

00:33:39,679 --> 00:33:45,519
that's an interesting

00:33:40,960 --> 00:33:47,120
thing yes i so i i'm i'm not aware of it

00:33:45,519 --> 00:33:49,279
one of the benefits of watson is that

00:33:47,120 --> 00:33:53,039
it's actually built into http

00:33:49,279 --> 00:33:55,360
so features that have to do with http

00:33:53,039 --> 00:33:56,240
kind of getting hurted things like http

00:33:55,360 --> 00:33:59,440
00:33:56,240 --> 00:33:59,840
it it's not it's a non-issue you get

00:33:59,440 --> 00:34:03,840
that

00:33:59,840 --> 00:34:06,799
with apache so i'm not sure what this

00:34:03,840 --> 00:34:08,159
framework is but if apache implements it

00:34:06,799 --> 00:34:11,359
it will be just a

00:34:08,159 --> 00:34:14,320
plug-in basically let's move to jim

00:34:11,359 --> 00:34:15,040
hughes's question if you have a wms

00:34:14,320 --> 00:34:17,839
service

00:34:15,040 --> 00:34:19,440
that you wanted to create piles for

00:34:17,839 --> 00:34:22,399
would it be possible

00:34:19,440 --> 00:34:23,760
to use this to generate and host tiles

00:34:22,399 --> 00:34:27,440
for that wms

00:34:23,760 --> 00:34:30,480
service absolutely

00:34:27,440 --> 00:34:33,760
yep yes so most most wms service

00:34:30,480 --> 00:34:34,800
servers use gdl on the back end to read

00:34:33,760 --> 00:34:37,599
the data

00:34:34,800 --> 00:34:38,720
and things like the mrf is fully

00:34:37,599 --> 00:34:41,520
supported by

00:34:38,720 --> 00:34:43,599
gdal so all you have to do is just store

00:34:41,520 --> 00:34:46,560
your data in the right format and then

00:34:43,599 --> 00:34:48,000
put the the wms server on top of it if

00:34:46,560 --> 00:34:50,720
you want to put it on top of the tile

00:34:48,000 --> 00:34:51,679
service again the solution is gdal gdl

00:34:50,720 --> 00:34:54,159
supports

00:34:51,679 --> 00:34:55,919
wms formats which are really wmts

00:34:54,159 --> 00:34:57,280
formats

00:34:55,919 --> 00:34:59,599
so all you have to do is create these

00:34:57,280 --> 00:35:01,440
little hook files that

00:34:59,599 --> 00:35:03,359
are standing for a file but they

00:35:01,440 --> 00:35:05,680
actually point to a server

00:35:03,359 --> 00:35:07,119
and then your wms server will read that

00:35:05,680 --> 00:35:08,960
tiny little hook

00:35:07,119 --> 00:35:10,960
and read the data directly from the

00:35:08,960 --> 00:35:14,400
server without you having to do anything

00:35:10,960 --> 00:35:17,200
that's exactly how the nasa

00:35:14,400 --> 00:35:19,359
gibbs server is working they use the

00:35:17,200 --> 00:35:23,040
university of minnesota map server

00:35:19,359 --> 00:35:23,040
on top of the cloud services

00:35:23,280 --> 00:35:28,400
okay so we're going to need to wrap up

00:35:26,079 --> 00:35:31,599
there is some additional information

00:35:28,400 --> 00:35:32,000
from eric bremer about uh triple i f as

00:35:31,599 --> 00:35:35,119
an i

00:35:32,000 --> 00:35:38,480
api spec uh but yeah

00:35:35,119 --> 00:35:43,280
look up uh when you get a chance uh

00:35:38,480 --> 00:35:45,760
i f dot io is the website

00:35:43,280 --> 00:35:47,520
we'll do i have a boatload of questions

00:35:45,760 --> 00:35:50,640
but we're out of time

00:35:47,520 --> 00:35:51,680
yeah and there's so the github for us is

00:35:50,640 --> 00:35:53,440
out there you can

00:35:51,680 --> 00:35:54,880
you know get my contact from there you

00:35:53,440 --> 00:35:57,040
can pose your questions or

00:35:54,880 --> 00:35:58,480
try to use it i would be more than happy

00:35:57,040 --> 00:36:00,320
to have more users there's very few

00:35:58,480 --> 00:36:02,480
users it's kind of an under the radar

00:36:00,320 --> 00:36:06,079
project so

00:36:02,480 --> 00:36:07,760
except for kids except for gibbs right

00:36:06,079 --> 00:36:10,640
and nobody knows how gibbs works

00:36:07,760 --> 00:36:12,240
so it's a sequence right i'm with you i

00:36:10,640 --> 00:36:16,480
always uh tout

00:36:12,240 --> 00:36:18,240
gibbs is one of the largest uh

00:36:16,480 --> 00:36:20,720
imagery services yes they do an amazing

00:36:18,240 --> 00:36:23,920
job and it's a very small team so

00:36:20,720 --> 00:36:25,920
yeah all right

00:36:23,920 --> 00:36:26,960
well then the next session starts in

00:36:25,920 --> 00:36:29,680
four minutes

00:36:26,960 --> 00:36:31,520
on another channel we'll finish off uh

00:36:29,680 --> 00:36:32,400
with the last session on the geospatial

00:36:31,520 --> 00:36:35,119
track

00:36:32,400 --> 00:36:36,720
uh in that session so see y'all over

00:36:35,119 --> 00:36:41,839
there

00:36:36,720 --> 00:36:41,839
okay thank you

00:36:57,040 --> 00:36:59,119

YouTube URL: https://www.youtube.com/watch?v=9kwyueOP9lI


