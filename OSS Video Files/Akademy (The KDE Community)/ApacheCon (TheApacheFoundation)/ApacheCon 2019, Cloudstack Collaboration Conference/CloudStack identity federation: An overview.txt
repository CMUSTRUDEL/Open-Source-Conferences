Title: CloudStack identity federation: An overview
Publication date: 2019-09-19
Playlist: ApacheCon 2019, Cloudstack Collaboration Conference
Description: 
	Federated authentication in online services is increasingly being used, whether through public identity providers such as Facebook, Google and others, or in organizations' private identity providers. Identity federation is a technology that has come to simplify the life of the user, but that does not always simplify the life of application developers and operators. The purpose of this talk is to share a bit the challenges, benefits and problems of using federated authentication with multiple identity providers in Apache Cloudstack.
Captions: 
	00:00:04,620 --> 00:00:09,520
with somehow which is basically actual

00:00:07,510 --> 00:00:12,790
integrating called stack as a sexy

00:00:09,520 --> 00:00:15,119
provider in an identity Federation

00:00:12,790 --> 00:00:18,220
[Applause]

00:00:15,119 --> 00:00:20,230
basically started before I get into

00:00:18,220 --> 00:00:22,239
details of code stack because they are

00:00:20,230 --> 00:00:23,800
pretty basic how you provide you guys an

00:00:22,239 --> 00:00:25,270
overview of identity relation because I

00:00:23,800 --> 00:00:27,790
think it's very important to understand

00:00:25,270 --> 00:00:29,529
what an identity relation is and how it

00:00:27,790 --> 00:00:32,050
can help you to leverage that into

00:00:29,529 --> 00:00:33,940
management API management of users in

00:00:32,050 --> 00:00:36,460
your in your organization because that's

00:00:33,940 --> 00:00:38,440
very important to centralize this kind

00:00:36,460 --> 00:00:40,150
of management and just to start a little

00:00:38,440 --> 00:00:41,530
bit thunderhorse details about me

00:00:40,150 --> 00:00:43,690
because I really don't like to publish

00:00:41,530 --> 00:00:48,010
things online about myself you know

00:00:43,690 --> 00:00:52,090
privacy stuff basically I'm a committed

00:00:48,010 --> 00:00:54,370
ok me see for call stack I started with

00:00:52,090 --> 00:00:55,420
one stack in 2013 so it's been a long

00:00:54,370 --> 00:00:58,840
way down

00:00:55,420 --> 00:01:01,090
and I have people organizing the call

00:00:58,840 --> 00:01:06,159
stack cohabit happen Mauricio this year

00:01:01,090 --> 00:01:08,110
with a Developers Conference so what's

00:01:06,159 --> 00:01:09,760
the goal of the presentation is to

00:01:08,110 --> 00:01:12,430
understand what an identity federation

00:01:09,760 --> 00:01:14,020
is because sometimes people try to

00:01:12,430 --> 00:01:16,240
adopts kind of technology but they don't

00:01:14,020 --> 00:01:18,880
understand what it means and what it is

00:01:16,240 --> 00:01:21,310
using for so that's one of the goals

00:01:18,880 --> 00:01:23,290
then to talk about the protocols and

00:01:21,310 --> 00:01:24,640
systems that you can use implementing to

00:01:23,290 --> 00:01:26,590
implement an identify direction because

00:01:24,640 --> 00:01:27,909
you know one thing is cloud stack and

00:01:26,590 --> 00:01:29,380
one thing is to integrate call stack

00:01:27,909 --> 00:01:31,450
with a system that's already set up

00:01:29,380 --> 00:01:33,850
another thing is to understand what kind

00:01:31,450 --> 00:01:35,380
of protocols in firms you have there to

00:01:33,850 --> 00:01:37,360
implement identity and identity

00:01:35,380 --> 00:01:41,890
Federation before you came to visit you

00:01:37,360 --> 00:01:45,100
roster so that's the idea yeah and

00:01:41,890 --> 00:01:46,659
basically I will do then a demo of a

00:01:45,100 --> 00:01:49,960
call stack environment that's running

00:01:46,659 --> 00:01:51,939
alive with OTP without changing any

00:01:49,960 --> 00:01:54,159
single line of code in ballsack and

00:01:51,939 --> 00:01:56,049
that's one of the whole ideas of

00:01:54,159 --> 00:01:57,580
identify duration you walk through all

00:01:56,049 --> 00:01:59,650
the user management the user

00:01:57,580 --> 00:02:02,080
authentication and all the security

00:01:59,650 --> 00:02:04,420
stuff to a third party that just know

00:02:02,080 --> 00:02:06,070
how to do that it's not just static

00:02:04,420 --> 00:02:08,140
there are more things but that's one of

00:02:06,070 --> 00:02:09,789
the excuses to use annotates Federation

00:02:08,140 --> 00:02:13,060
systems

00:02:09,789 --> 00:02:15,180
so to start I like to get everyone on

00:02:13,060 --> 00:02:16,810
the same page and all of these you know

00:02:15,180 --> 00:02:19,630
formalization comes from my background

00:02:16,810 --> 00:02:21,730
I'm actually from the academia and my

00:02:19,630 --> 00:02:24,310
Master's for esa's was in I think

00:02:21,730 --> 00:02:26,050
management it's more specifically tied

00:02:24,310 --> 00:02:27,550
in Federation more specifically with

00:02:26,050 --> 00:02:31,450
security privacy that's why I don't like

00:02:27,550 --> 00:02:33,610
to push things online so just people can

00:02:31,450 --> 00:02:38,050
understand why and don't think that I'm

00:02:33,610 --> 00:02:39,459
like oh you do basically I did today

00:02:38,050 --> 00:02:41,080
when we are talking about setting

00:02:39,459 --> 00:02:44,290
sedation and user authentication we're

00:02:41,080 --> 00:02:47,709
talking about access control and access

00:02:44,290 --> 00:02:50,550
control models what they try to do is to

00:02:47,709 --> 00:02:53,550
manage the access to sensitive azores

00:02:50,550 --> 00:02:56,709
and in our case sensitive results means

00:02:53,550 --> 00:02:58,180
multi-machine volumes and snapshots

00:02:56,709 --> 00:03:00,070
those are listening Steve resource at

00:02:58,180 --> 00:03:02,080
where we are many in basically when I

00:03:00,070 --> 00:03:04,840
say we I'm talking about call stack or

00:03:02,080 --> 00:03:07,239
or even order called computer protection

00:03:04,840 --> 00:03:09,010
systems in the idea of the access

00:03:07,239 --> 00:03:11,260
control here is to guarantee the

00:03:09,010 --> 00:03:12,730
confidentiality meaning that only people

00:03:11,260 --> 00:03:15,790
that are authorized to access those

00:03:12,730 --> 00:03:19,209
formations are in fact doing that access

00:03:15,790 --> 00:03:22,230
and also integrity meaning that no no

00:03:19,209 --> 00:03:25,000
unauthorized party is changing the data

00:03:22,230 --> 00:03:28,860
and basically becoming different models

00:03:25,000 --> 00:03:31,510
you know the ancient ones mandatory

00:03:28,860 --> 00:03:33,610
discretionary access control models and

00:03:31,510 --> 00:03:36,190
then we have the more recent ones like

00:03:33,610 --> 00:03:38,230
rule based access model like the call

00:03:36,190 --> 00:03:39,670
stack has implemented on it and then we

00:03:38,230 --> 00:03:41,650
have the evolution attribute based

00:03:39,670 --> 00:03:43,660
access spot access control model which

00:03:41,650 --> 00:03:45,610
is not just based on the role of the

00:03:43,660 --> 00:03:48,610
user by asking a set of attributes that

00:03:45,610 --> 00:03:50,890
describe the users you know given

00:03:48,610 --> 00:03:52,750
context and that's why it's more

00:03:50,890 --> 00:03:55,030
flexible because you don't have just

00:03:52,750 --> 00:03:57,070
like a single attribute to decide if a

00:03:55,030 --> 00:03:59,920
user has access or not to his words but

00:03:57,070 --> 00:04:01,690
it have a second flat lines and then we

00:03:59,920 --> 00:04:04,630
have what in academia because we keep

00:04:01,690 --> 00:04:06,519
going alright we are now I study in

00:04:04,630 --> 00:04:09,519
decadent wheat because I left academia

00:04:06,519 --> 00:04:11,650
like they keep going on and now they

00:04:09,519 --> 00:04:13,060
they still more or less their risk-based

00:04:11,650 --> 00:04:15,540
access comes from all the which is based

00:04:13,060 --> 00:04:18,250
on probability which provides even more

00:04:15,540 --> 00:04:20,200
flexibility but of course you you are

00:04:18,250 --> 00:04:22,660
working probability so it's not a sure

00:04:20,200 --> 00:04:24,730
thing and whenever

00:04:22,660 --> 00:04:26,230
about identity Federation holidays we

00:04:24,730 --> 00:04:28,180
are talking about attribute based access

00:04:26,230 --> 00:04:30,610
control model so it's not our back it's

00:04:28,180 --> 00:04:32,230
not role based access control Mali in

00:04:30,610 --> 00:04:36,600
the idea of the attribute based access

00:04:32,230 --> 00:04:40,000
control model is it uses user attributes

00:04:36,600 --> 00:04:41,890
these attributes they are information

00:04:40,000 --> 00:04:45,700
let's use it to describe users in a

00:04:41,890 --> 00:04:47,320
given context and basically we didn't

00:04:45,700 --> 00:04:49,180
have a set of rules that are applied

00:04:47,320 --> 00:04:52,570
against these articles to decide if the

00:04:49,180 --> 00:04:54,160
user has access or not your users and in

00:04:52,570 --> 00:04:55,750
this context we have something that we

00:04:54,160 --> 00:04:58,600
call I didn't excessive management

00:04:55,750 --> 00:05:00,910
systems which is like the ecosystem

00:04:58,600 --> 00:05:02,800
where we have identified in such I will

00:05:00,910 --> 00:05:05,440
talk a little bit more further about

00:05:02,800 --> 00:05:08,110
them and we also have some other entity

00:05:05,440 --> 00:05:10,780
which is called identity which is a set

00:05:08,110 --> 00:05:12,460
of attributes the name of the attributes

00:05:10,780 --> 00:05:16,750
the deciding this at the party was to

00:05:12,460 --> 00:05:18,970
describe a user so to illustrate it a

00:05:16,750 --> 00:05:21,040
little bit deeper so in line 18 access

00:05:18,970 --> 00:05:24,100
punishment system we normally have these

00:05:21,040 --> 00:05:25,810
parties is the design 50 so we have

00:05:24,100 --> 00:05:28,360
users there are 20 to access resources

00:05:25,810 --> 00:05:30,400
we have identified as which are the

00:05:28,360 --> 00:05:33,280
parties that are managing the user

00:05:30,400 --> 00:05:34,720
attributes the user authentication and

00:05:33,280 --> 00:05:37,240
even the user authorization

00:05:34,720 --> 00:05:39,040
authorization sometimes and then we have

00:05:37,240 --> 00:05:41,110
the sense provide assess provides any

00:05:39,040 --> 00:05:45,790
kind of application that is delivering a

00:05:41,110 --> 00:05:47,530
resource the other ones clothes tag for

00:05:45,790 --> 00:05:49,780
the instances can be considered as

00:05:47,530 --> 00:05:51,550
provided because it delivers his horse

00:05:49,780 --> 00:05:53,919
which has become machine involved and so

00:05:51,550 --> 00:05:55,810
on for users yet life is a sense

00:05:53,919 --> 00:05:57,430
provided the difference that they

00:05:55,810 --> 00:05:59,710
provide different kind of steps but

00:05:57,430 --> 00:06:01,240
anyways they all can be considered and

00:05:59,710 --> 00:06:02,740
assess providing then we have an idea

00:06:01,240 --> 00:06:05,230
which is just a select a group of

00:06:02,740 --> 00:06:07,570
attributes key and value that are used

00:06:05,230 --> 00:06:11,470
to describe a user in our context after

00:06:07,570 --> 00:06:13,270
the authentication process and just you

00:06:11,470 --> 00:06:14,830
know to give the context as well

00:06:13,270 --> 00:06:16,540
basically when we talk about access

00:06:14,830 --> 00:06:19,150
control we have the traditional way of

00:06:16,540 --> 00:06:21,790
doing it that's how cost Acton I started

00:06:19,150 --> 00:06:23,980
doing it so the search provided the

00:06:21,790 --> 00:06:25,900
application self is handling

00:06:23,980 --> 00:06:27,570
user information and the user

00:06:25,900 --> 00:06:30,460
authentication authorization so on

00:06:27,570 --> 00:06:32,830
that's the traditional way of doing it

00:06:30,460 --> 00:06:35,050
and then as companies started to deploy

00:06:32,830 --> 00:06:38,710
more and more system they started to

00:06:35,050 --> 00:06:41,020
create the this idea of the audience

00:06:38,710 --> 00:06:42,460
provider and then a single in assistive

00:06:41,020 --> 00:06:45,190
domain which means the single

00:06:42,460 --> 00:06:47,110
organization we have just 180 which is

00:06:45,190 --> 00:06:48,910
managing the user information and

00:06:47,110 --> 00:06:50,980
authentication which is called the ADP

00:06:48,910 --> 00:06:53,650
onions provided and then we have all of

00:06:50,980 --> 00:06:55,540
the other parties is Akutan offloading

00:06:53,650 --> 00:06:57,280
the authentication there and why do you

00:06:55,540 --> 00:06:59,860
do that because you want single log out

00:06:57,280 --> 00:07:01,720
you don't want to spread user accounts

00:06:59,860 --> 00:07:03,910
everywhere and you want to centralize

00:07:01,720 --> 00:07:07,000
user management so you can have the same

00:07:03,910 --> 00:07:09,280
I think become policy specially policies

00:07:07,000 --> 00:07:13,690
and so on for all of the users for for

00:07:09,280 --> 00:07:15,250
all of the systems in that only works in

00:07:13,690 --> 00:07:17,920
a single destructive domain but you know

00:07:15,250 --> 00:07:19,030
as the world grows companies is tough to

00:07:17,920 --> 00:07:20,910
interact with each other

00:07:19,030 --> 00:07:24,280
you need to federates um how these

00:07:20,910 --> 00:07:27,670
systems and the idea is that they use it

00:07:24,280 --> 00:07:29,470
from one company from the S domain and

00:07:27,670 --> 00:07:31,300
the mr. Atif is accessing and his words

00:07:29,470 --> 00:07:35,380
in another coming and initiative why

00:07:31,300 --> 00:07:37,870
authenticating the home domain so the

00:07:35,380 --> 00:07:41,950
user Bob here from domain I alluded to a

00:07:37,870 --> 00:07:44,020
can access a hills or single main be sex

00:07:41,950 --> 00:07:45,940
let's provide there why was it using

00:07:44,020 --> 00:07:48,360
that the authentication at his home

00:07:45,940 --> 00:07:50,800
domain and why is that important because

00:07:48,360 --> 00:07:52,930
you don't send your credentials and

00:07:50,800 --> 00:07:55,870
passwords and so on to the domain while

00:07:52,930 --> 00:07:58,720
you are accessing the users Detroit it

00:07:55,870 --> 00:08:00,370
will be questioned and that's quite

00:07:58,720 --> 00:08:02,710
interesting right nowadays you know with

00:08:00,370 --> 00:08:06,540
GDP ours and with also stipulations

00:08:02,710 --> 00:08:06,540
regarding user data management

00:08:07,470 --> 00:08:16,449
so whenever we talk about I think access

00:08:13,449 --> 00:08:18,310
management in a federated environment we

00:08:16,449 --> 00:08:21,580
model eyes have two ways of implementing

00:08:18,310 --> 00:08:24,099
it so basically there is like one of the

00:08:21,580 --> 00:08:26,229
first protocols and standard that was

00:08:24,099 --> 00:08:28,840
created it's called security assertion

00:08:26,229 --> 00:08:32,140
markup language for short you cannot

00:08:28,840 --> 00:08:33,789
call Sanel and it basically uses XML to

00:08:32,140 --> 00:08:36,789
describe the the message that are

00:08:33,789 --> 00:08:39,969
exchanged between the parties and they

00:08:36,789 --> 00:08:41,919
also may adopt the public infrastructure

00:08:39,969 --> 00:08:45,160
to create a trust between the different

00:08:41,919 --> 00:08:47,110
parties in the ecosystem so we know that

00:08:45,160 --> 00:08:50,010
the messages are authenticated no

00:08:47,110 --> 00:08:52,149
because of the public infrastructure

00:08:50,010 --> 00:08:54,250
that's basically I don't know if you

00:08:52,149 --> 00:08:55,630
know that's like your target fee and

00:08:54,250 --> 00:08:57,430
much specifically as synchronous

00:08:55,630 --> 00:09:00,010
cryptography so you have public and

00:08:57,430 --> 00:09:01,570
private keys that are shared between the

00:09:00,010 --> 00:09:04,510
parties and so they'd know that the

00:09:01,570 --> 00:09:06,520
message came from a third party and

00:09:04,510 --> 00:09:08,350
that's why you can trust definition

00:09:06,520 --> 00:09:10,690
process that was is included in the IEP

00:09:08,350 --> 00:09:12,370
because you do trust it and you check

00:09:10,690 --> 00:09:15,209
that the message was generated by that

00:09:12,370 --> 00:09:17,829
to rested against provider so you can

00:09:15,209 --> 00:09:19,510
just move on with a user without

00:09:17,829 --> 00:09:23,260
requiring and your authentication

00:09:19,510 --> 00:09:25,630
process in your site's provider and this

00:09:23,260 --> 00:09:28,000
is standard is developed and maintained

00:09:25,630 --> 00:09:30,490
by an organization that has a very nice

00:09:28,000 --> 00:09:35,589
name which is called oasis which is

00:09:30,490 --> 00:09:38,890
thanks for the information standards and

00:09:35,589 --> 00:09:40,779
they keep developed it I think in there

00:09:38,890 --> 00:09:42,670
was a version three some years ago that

00:09:40,779 --> 00:09:46,120
was released but I'm in mature if they

00:09:42,670 --> 00:09:49,720
are like moving on right now but for

00:09:46,120 --> 00:09:51,640
sure there was a version 3 for some year

00:09:49,720 --> 00:09:52,899
the world at least when I was doing my

00:09:51,640 --> 00:09:54,070
Master's that I checked it we were

00:09:52,899 --> 00:09:56,740
developing but I don't know if it was

00:09:54,070 --> 00:09:58,839
released already and then there is open

00:09:56,740 --> 00:10:00,790
ad Connect they both do the same thing

00:09:58,839 --> 00:10:02,860
open ID Connect was built on top of

00:10:00,790 --> 00:10:03,540
OAuth which was a protocol created by

00:10:02,860 --> 00:10:05,840
guru

00:10:03,540 --> 00:10:09,410
IG point all

00:10:05,840 --> 00:10:11,450
to use punky first structure as well but

00:10:09,410 --> 00:10:13,310
the difference that it adopts JSON as a

00:10:11,450 --> 00:10:16,940
form of exchange messages between the

00:10:13,310 --> 00:10:18,850
parties and the OpenID Connect protocol

00:10:16,940 --> 00:10:22,970
is maintained by the OpenID foundation

00:10:18,850 --> 00:10:24,980
and why a lot of people questioned even

00:10:22,970 --> 00:10:27,110
when I was doing my dissertation why do

00:10:24,980 --> 00:10:30,200
we need a second protocol when you have

00:10:27,110 --> 00:10:32,920
one deterrent works and Open ID Connect

00:10:30,200 --> 00:10:35,060
was created when the mobile device in

00:10:32,920 --> 00:10:37,640
2014 you know they started growing and

00:10:35,060 --> 00:10:40,970
growing growing the usage of Internet

00:10:37,640 --> 00:10:44,420
services and you know when you are part

00:10:40,970 --> 00:10:46,010
indeed in a mobile device XML dealing a

00:10:44,420 --> 00:10:48,740
mobile device that cost quite a lot

00:10:46,010 --> 00:10:49,339
processing power and that means battery

00:10:48,740 --> 00:10:52,130
consumption

00:10:49,339 --> 00:10:53,750
so basically okay the connecting to

00:10:52,130 --> 00:10:55,850
solve this problem to reduce the usage

00:10:53,750 --> 00:11:00,410
of battery mobile devices so because

00:10:55,850 --> 00:11:04,000
it's quite faster to paste in XML but

00:11:00,410 --> 00:11:06,560
they both can be used at the same time

00:11:04,000 --> 00:11:08,480
and basically to implement those

00:11:06,560 --> 00:11:10,910
protocols we have these primarily in

00:11:08,480 --> 00:11:14,060
systems when I say families because for

00:11:10,910 --> 00:11:18,050
instance the connector which is the

00:11:14,060 --> 00:11:20,500
implementation from MIT from the forgot

00:11:18,050 --> 00:11:23,060
the name of the library but they

00:11:20,500 --> 00:11:26,089
implement the open interconnect protocol

00:11:23,060 --> 00:11:27,800
that's just a framework but you have in

00:11:26,089 --> 00:11:29,330
then based on that framework you can

00:11:27,800 --> 00:11:31,820
create your items profile instance

00:11:29,330 --> 00:11:34,010
provided but we have alternative

00:11:31,820 --> 00:11:37,040
solutions such as Shibboleth which is a

00:11:34,010 --> 00:11:38,690
full-blown like sex provider that you

00:11:37,040 --> 00:11:41,000
can use to control access to

00:11:38,690 --> 00:11:44,030
applications and we have keep clock for

00:11:41,000 --> 00:11:46,310
instance which is a full-blown I think

00:11:44,030 --> 00:11:49,490
provider why you are able to manage user

00:11:46,310 --> 00:11:52,010
information user session the you have

00:11:49,490 --> 00:11:56,120
got educated in different systems user

00:11:52,010 --> 00:11:57,440
passwords of ease and so on so and the

00:11:56,120 --> 00:11:59,510
interesting part of Kiko

00:11:57,440 --> 00:12:02,540
that's the one I'm using the demo I will

00:11:59,510 --> 00:12:06,020
show you guys it can work with both

00:12:02,540 --> 00:12:08,720
SEMO and OpenID connect at the same time

00:12:06,020 --> 00:12:12,709
in the same ideas provided so if you

00:12:08,720 --> 00:12:15,190
have access providers that for assess

00:12:12,709 --> 00:12:16,870
call stack on work with somehow

00:12:15,190 --> 00:12:18,819
and there are some other size providers

00:12:16,870 --> 00:12:20,500
like get flat leaf-like only walk suit

00:12:18,819 --> 00:12:22,899
or open-ended connect so you would have

00:12:20,500 --> 00:12:24,790
a problem depend on the technology adopt

00:12:22,899 --> 00:12:27,879
and keep look it's quite flexible in

00:12:24,790 --> 00:12:30,009
this manner and it's open source and of

00:12:27,879 --> 00:12:32,139
course it's not in my head but anyways

00:12:30,009 --> 00:12:34,899
it's open source and it's out there and

00:12:32,139 --> 00:12:40,810
it's quite nice the this subject they

00:12:34,899 --> 00:12:43,930
developed there so in cloud stack it

00:12:40,810 --> 00:12:45,579
owns supports ml and basically this is

00:12:43,930 --> 00:12:47,920
quite nice the way the the

00:12:45,579 --> 00:12:50,019
implementation was created there because

00:12:47,920 --> 00:12:52,060
you just need to enable and disable some

00:12:50,019 --> 00:12:55,240
parameters at the global settings

00:12:52,060 --> 00:12:58,649
configurations and basically just need

00:12:55,240 --> 00:13:00,879
to look for this ml configure

00:12:58,649 --> 00:13:02,800
configurations there and then you're

00:13:00,879 --> 00:13:04,449
gonna see all of the important

00:13:02,800 --> 00:13:06,279
populations while you're there the most

00:13:04,449 --> 00:13:08,529
important one is of course the Twin

00:13:06,279 --> 00:13:11,319
Falls to tell the if you are using or

00:13:08,529 --> 00:13:14,560
not somewhere for the little education

00:13:11,319 --> 00:13:17,620
and then we have the this one here which

00:13:14,560 --> 00:13:21,459
is semi IDP metadata URL which is the

00:13:17,620 --> 00:13:25,630
address where you can where Todd stack

00:13:21,459 --> 00:13:27,730
can locate the metadata which is the

00:13:25,630 --> 00:13:29,920
information that describes each one of

00:13:27,730 --> 00:13:31,870
the eigen providers and such providers

00:13:29,920 --> 00:13:33,850
that you have an affiliation in this

00:13:31,870 --> 00:13:37,050
metadata you have the keys for instance

00:13:33,850 --> 00:13:39,220
that they they exchange to view the

00:13:37,050 --> 00:13:43,329
Federation and when I think is I'm

00:13:39,220 --> 00:13:45,850
talking about the public keys right and

00:13:43,329 --> 00:13:47,350
because that's how the parties can

00:13:45,850 --> 00:13:49,350
validate the message is for instance and

00:13:47,350 --> 00:13:52,750
then we have a bunch of other

00:13:49,350 --> 00:13:54,490
configurations there such as the hashing

00:13:52,750 --> 00:13:56,050
mechanism mechanism use it for

00:13:54,490 --> 00:13:59,410
signatures

00:13:56,050 --> 00:14:01,389
some name stuff there you are we are

00:13:59,410 --> 00:14:04,600
calling the the call stacks has provided

00:14:01,389 --> 00:14:07,290
and so on so but it's real estate for a

00:14:04,600 --> 00:14:07,290
switch forward

00:14:07,300 --> 00:14:20,470
okay all right yeah so that's basically

00:14:17,820 --> 00:14:22,720
the idea of the Confederation the

00:14:20,470 --> 00:14:25,150
protocols and some basic overview on the

00:14:22,720 --> 00:14:28,360
frameworks and insisting that one can

00:14:25,150 --> 00:14:30,520
use and how to use choose and configure

00:14:28,360 --> 00:14:33,160
it in cloud stack and then let's see if

00:14:30,520 --> 00:14:35,530
we can do a demo here so this is called

00:14:33,160 --> 00:14:38,110
sag here I read configure cause this

00:14:35,530 --> 00:14:44,100
whole second environment to authenticate

00:14:38,110 --> 00:14:47,020
to using my provider there and I

00:14:44,100 --> 00:14:48,460
configured my provider also to test a

00:14:47,020 --> 00:14:51,040
lot stack otherwise it would not work

00:14:48,460 --> 00:14:54,550
because they trust you know it it didn't

00:14:51,040 --> 00:15:00,430
it both ways let's me go there and see

00:14:54,550 --> 00:15:02,700
if everything is going to work so all

00:15:00,430 --> 00:15:02,700
right

00:15:04,890 --> 00:15:09,700
and basically when you enable that cloud

00:15:07,600 --> 00:15:11,590
stack we reach the metadata reads the

00:15:09,700 --> 00:15:14,650
metadata file that you configure there

00:15:11,590 --> 00:15:17,980
and this metadata can have as many as as

00:15:14,650 --> 00:15:20,290
much I think providers that you need in

00:15:17,980 --> 00:15:22,660
my case at your cell phone and then you

00:15:20,290 --> 00:15:24,610
select it and you tell call sockets want

00:15:22,660 --> 00:15:26,500
to log in with it and then it will

00:15:24,610 --> 00:15:28,360
redirect you to the end provider that's

00:15:26,500 --> 00:15:32,830
where you are actually going to execute

00:15:28,360 --> 00:15:34,570
the authentication process anyway the

00:15:32,830 --> 00:15:37,240
key to log in there as soon as they log

00:15:34,570 --> 00:15:40,830
the dillagi is executed successful there

00:15:37,240 --> 00:15:43,450
you are hit directed back to call stack

00:15:40,830 --> 00:15:44,770
and then you are there you access your

00:15:43,450 --> 00:15:46,780
account responds in a transparent

00:15:44,770 --> 00:15:48,790
fashion now let me do something

00:15:46,780 --> 00:15:51,370
different let's enable OTP for this

00:15:48,790 --> 00:15:53,350
because I mean nowadays every single

00:15:51,370 --> 00:15:55,360
system should have OTP but it's a it's

00:15:53,350 --> 00:15:57,460
quite a bird you know to implement OTP

00:15:55,360 --> 00:15:59,050
no in cost technologies why do we need

00:15:57,460 --> 00:16:02,230
to implement it if you can have like a

00:15:59,050 --> 00:16:05,830
system like like this if we offload the

00:16:02,230 --> 00:16:09,810
adult indication process so let me just

00:16:05,830 --> 00:16:09,810
configure for my accounts there

00:16:16,860 --> 00:16:32,470
yes so I just registered my OTP

00:16:29,440 --> 00:16:34,690
Authenticator there in the cold stacking

00:16:32,470 --> 00:16:37,390
and letting the caustic start putting my

00:16:34,690 --> 00:16:42,730
headings provider there and now if I try

00:16:37,390 --> 00:16:46,780
to log in again it should ask me for an

00:16:42,730 --> 00:17:00,010
OTP code before authorizing me to access

00:16:46,780 --> 00:17:03,400
call stack yeah

00:17:00,010 --> 00:17:06,100
so before I am able to access code stack

00:17:03,400 --> 00:17:15,400
Ike Ike I will need to provide a

00:17:06,100 --> 00:17:16,840
download code okay yeah so why is this

00:17:15,400 --> 00:17:20,490
interesting because I did not need to

00:17:16,840 --> 00:17:25,810
hold anything so it's already provided

00:17:20,490 --> 00:17:31,780
and not just that if we access that

00:17:25,810 --> 00:17:33,850
system from an admin perspective we can

00:17:31,780 --> 00:17:35,860
we can see all of these sections that

00:17:33,850 --> 00:17:37,480
are open for all of the users and we

00:17:35,860 --> 00:17:39,670
have a centralized way of managing it

00:17:37,480 --> 00:17:41,410
and of course not just that because it's

00:17:39,670 --> 00:17:43,750
a very sensitive system and identify an

00:17:41,410 --> 00:17:45,280
element one we have a log all DT login

00:17:43,750 --> 00:17:47,710
for every single thing that happens

00:17:45,280 --> 00:17:49,570
their password to pilate's email is user

00:17:47,710 --> 00:17:52,810
as it will change autumn occasions

00:17:49,570 --> 00:17:54,670
logout everything you have out straight

00:17:52,810 --> 00:17:57,010
in there because in my opinion you do

00:17:54,670 --> 00:17:59,500
need that especially if you run a very

00:17:57,010 --> 00:18:01,630
critical environment and that is

00:17:59,500 --> 00:18:03,130
something quite interesting as well

00:18:01,630 --> 00:18:05,680
because you know it's a federated system

00:18:03,130 --> 00:18:09,520
uhm you can have multiple sex providers

00:18:05,680 --> 00:18:13,360
there so I do know that know some people

00:18:09,520 --> 00:18:16,270
don't like OpenStack but in Saturday I

00:18:13,360 --> 00:18:17,710
have to work with both and I don't have

00:18:16,270 --> 00:18:18,190
another OpenStack environment there

00:18:17,710 --> 00:18:23,139
that's

00:18:18,190 --> 00:18:25,659
been running it should be written and

00:18:23,139 --> 00:18:26,440
it's configured to use the same identity

00:18:25,659 --> 00:18:29,379
provider there

00:18:26,440 --> 00:18:31,149
so technically in theory I should be

00:18:29,379 --> 00:18:32,559
able to access open stack and

00:18:31,149 --> 00:18:34,629
transparent fashion without needing

00:18:32,559 --> 00:18:37,269
taught into it again using the same ID

00:18:34,629 --> 00:18:39,340
into provider that I use it for called

00:18:37,269 --> 00:18:52,450
stack I just don't know why it's not

00:18:39,340 --> 00:19:02,590
working I just tested this morning and

00:18:52,450 --> 00:19:05,970
it was there yeah yeah the idea was to

00:19:02,590 --> 00:19:09,070
show the automation of in stack because

00:19:05,970 --> 00:19:11,470
in OpenStack I'm using OpenID Connect so

00:19:09,070 --> 00:19:13,509
I'm using the same name provider with

00:19:11,470 --> 00:19:15,460
two different sex providers these two

00:19:13,509 --> 00:19:17,590
different size providers one is using so

00:19:15,460 --> 00:19:19,509
many other ones open easily he is using

00:19:17,590 --> 00:19:21,490
OpenID Connect so that was the idea

00:19:19,509 --> 00:19:23,169
that's why it's interesting to see it

00:19:21,490 --> 00:19:26,470
working buddy I don't know my internet

00:19:23,169 --> 00:19:28,779
here is not that great and that's

00:19:26,470 --> 00:19:30,220
basically it so what are the benefits of

00:19:28,779 --> 00:19:31,960
this kind of approach when you are

00:19:30,220 --> 00:19:33,580
loaded in the authentication user

00:19:31,960 --> 00:19:34,740
management when you provide to an

00:19:33,580 --> 00:19:37,269
eighteenth provider system

00:19:34,740 --> 00:19:38,950
the first one is seamless integration

00:19:37,269 --> 00:19:43,120
partners and this is something I did not

00:19:38,950 --> 00:19:45,250
talk a lot about but it's like if you

00:19:43,120 --> 00:19:47,080
depend on how you run your business it

00:19:45,250 --> 00:19:50,110
might be more interesting to have the

00:19:47,080 --> 00:19:51,730
client holding the user data and then

00:19:50,110 --> 00:19:53,649
you're just a fool oh the authentication

00:19:51,730 --> 00:19:55,509
authorization process - there because

00:19:53,649 --> 00:19:56,830
then you could use this possibility

00:19:55,509 --> 00:19:59,440
because you don't need too many use the

00:19:56,830 --> 00:20:02,230
data I mean they are easy to do

00:19:59,440 --> 00:20:06,039
different process if there is somehow if

00:20:02,230 --> 00:20:07,539
a user uses a weak password it's their

00:20:06,039 --> 00:20:08,860
fault because you know you are

00:20:07,539 --> 00:20:12,490
delegating all of the authentication

00:20:08,860 --> 00:20:14,169
authorization process there you also

00:20:12,490 --> 00:20:16,799
reduce the number of accounts of course

00:20:14,169 --> 00:20:16,799
yes

00:20:18,580 --> 00:20:39,950
in call stack that's a good question

00:20:37,030 --> 00:20:42,950
that's one of the problems we talk about

00:20:39,950 --> 00:20:46,610
actually because in call stack when I

00:20:42,950 --> 00:20:51,140
guess I can show you guys let me see if

00:20:46,610 --> 00:20:55,100
my things is working yeah this is

00:20:51,140 --> 00:21:01,450
something that's not working as as that

00:20:55,100 --> 00:21:05,630
creating cloud stack when I'm enabling

00:21:01,450 --> 00:21:10,010
users to tote and get themselves in an

00:21:05,630 --> 00:21:16,490
in an identified aeration system I have

00:21:10,010 --> 00:21:18,920
to I have to manually create the account

00:21:16,490 --> 00:21:24,620
in cloud stack and then I have to

00:21:18,920 --> 00:21:27,530
configure it here one of these buttons

00:21:24,620 --> 00:21:29,480
one of these buttons design so I have to

00:21:27,530 --> 00:21:31,580
configure it here you know and then I

00:21:29,480 --> 00:21:34,100
tell this user cannot indicate with

00:21:31,580 --> 00:21:36,110
titanium profiles so it's being done in

00:21:34,100 --> 00:21:39,110
an ID in a user life and this is

00:21:36,110 --> 00:21:41,360
something I mean that's not following

00:21:39,110 --> 00:21:43,880
the identity Federation principles

00:21:41,360 --> 00:21:46,310
because in theory the user does not

00:21:43,880 --> 00:21:48,080
until not actually if you implement it

00:21:46,310 --> 00:21:50,600
as it should if you follow the protocol

00:21:48,080 --> 00:21:52,580
the user does not take need to exist in

00:21:50,600 --> 00:21:54,770
this X profile it should be created on

00:21:52,580 --> 00:21:58,160
the fly everything and opinion on

00:21:54,770 --> 00:22:00,290
implementation SS provider and they said

00:21:58,160 --> 00:22:02,420
that this X provider has the search

00:22:00,290 --> 00:22:05,660
provider needs to restore an opaque

00:22:02,420 --> 00:22:08,900
something that doesn't present the user

00:22:05,660 --> 00:22:11,750
per se you know it's just an ID as Jin

00:22:08,900 --> 00:22:13,790
generated for that such provider for

00:22:11,750 --> 00:22:15,350
that user in dating provided this way

00:22:13,790 --> 00:22:17,510
you can guarantee is the user privacy

00:22:15,350 --> 00:22:19,700
when they are accessing the site so but

00:22:17,510 --> 00:22:24,260
it kostik was not implemented with this

00:22:19,700 --> 00:22:26,720
man but if a project were to be extended

00:22:24,260 --> 00:22:31,550
then we would be able to do that and

00:22:26,720 --> 00:22:34,400
more specifically I think if if you are

00:22:31,550 --> 00:22:36,560
going to if they need to fix this

00:22:34,400 --> 00:22:38,830
because if we fix this we can do what

00:22:36,560 --> 00:22:42,890
you are saying in my opinion should be

00:22:38,830 --> 00:22:45,770
done using something similar that opens

00:22:42,890 --> 00:22:48,170
tacky does this way so because cost

00:22:45,770 --> 00:22:50,450
exercise provider websites profiling is

00:22:48,170 --> 00:22:51,920
receives a set of attributes of the let

00:22:50,450 --> 00:22:53,450
describe the user in that in that

00:22:51,920 --> 00:22:55,970
context when they are exercised in his

00:22:53,450 --> 00:22:57,500
voice and also I can use those

00:22:55,970 --> 00:22:59,930
attributes to create accounts on the fly

00:22:57,500 --> 00:23:03,110
and then you can make for instance a

00:22:59,930 --> 00:23:04,610
domain to turn an inch provider and then

00:23:03,110 --> 00:23:06,740
when the set of attributes

00:23:04,610 --> 00:23:08,300
comes from that agent provided to users

00:23:06,740 --> 00:23:10,610
in that domain the accounts are created

00:23:08,300 --> 00:23:13,370
on the fly encaustic and that would be

00:23:10,610 --> 00:23:16,250
possible but it needs to be extended

00:23:13,370 --> 00:23:22,940
that's one of the problems I find in

00:23:16,250 --> 00:23:26,660
this implementation they didn't provide

00:23:22,940 --> 00:23:31,310
a yes yes I'd approved the habitats and

00:23:26,660 --> 00:23:33,980
attributes you can do that in an

00:23:31,310 --> 00:23:37,250
application level yes because every

00:23:33,980 --> 00:23:42,530
application can be managed separately in

00:23:37,250 --> 00:23:46,970
the engines provide yes yes I might is

00:23:42,530 --> 00:23:48,920
not working but in this system keep out

00:23:46,970 --> 00:23:51,830
for instance we can have different roles

00:23:48,920 --> 00:23:54,560
for different users when they opted in

00:23:51,830 --> 00:23:56,080
different service providers that's

00:23:54,560 --> 00:23:58,730
actually how we are doing in this

00:23:56,080 --> 00:24:00,050
company where we implemented the

00:23:58,730 --> 00:24:01,760
OpenStack environment and then we

00:24:00,050 --> 00:24:03,110
implemented actual not just the cloud

00:24:01,760 --> 00:24:06,650
for a basic we implement the whole

00:24:03,110 --> 00:24:09,080
Federation and the roles for OpenStack

00:24:06,650 --> 00:24:11,090
is managed in the ladings provider so

00:24:09,080 --> 00:24:13,250
then we change I mean the only person

00:24:11,090 --> 00:24:16,030
able to change the attributes are the

00:24:13,250 --> 00:24:16,030
admins yeah

00:24:16,900 --> 00:24:39,800
yeah yeah yeah yeah you could exactly

00:24:30,280 --> 00:24:41,690
yes yes exactly that and that's why it

00:24:39,800 --> 00:24:50,810
would be nice to fully implement the

00:24:41,690 --> 00:24:52,580
protocol there right now we need to

00:24:50,810 --> 00:24:54,680
create it manually you need to go there

00:24:52,580 --> 00:24:56,600
and create a custom you know that is an

00:24:54,680 --> 00:25:02,480
EPA commando via the UI you create

00:24:56,600 --> 00:25:05,390
account and then you create the user yes

00:25:02,480 --> 00:25:07,520
that will load the data tables yeah but

00:25:05,390 --> 00:25:11,660
the problem here the difference from

00:25:07,520 --> 00:25:14,330
here and we tell that is that this

00:25:11,660 --> 00:25:16,580
process of attribute dissemination is

00:25:14,330 --> 00:25:19,670
only triggered by the user during the

00:25:16,580 --> 00:25:23,390
authentication process so it only

00:25:19,670 --> 00:25:25,250
happens yes yeah it's a different flow

00:25:23,390 --> 00:25:27,260
so-called stack doesn't have access 12

00:25:25,250 --> 00:25:29,630
to user that exists there in this

00:25:27,260 --> 00:25:32,480
provider and this happens because of

00:25:29,630 --> 00:25:35,540
part of the ggp are that user needs need

00:25:32,480 --> 00:25:38,870
to have awareness so i actually disable

00:25:35,540 --> 00:25:41,600
the awareness screen here just to speed

00:25:38,870 --> 00:25:43,100
up things but in the in the key code for

00:25:41,600 --> 00:25:45,610
instance if I enable the our awareness

00:25:43,100 --> 00:25:49,100
screen after the authentication process

00:25:45,610 --> 00:25:50,870
the user receives I screen saying hey

00:25:49,100 --> 00:25:52,430
these attributes are going to be

00:25:50,870 --> 00:25:54,230
disseminated to the cells provide so

00:25:52,430 --> 00:25:58,760
that's that's why you cannot grab

00:25:54,230 --> 00:26:00,110
everything beforehand you need to wait

00:25:58,760 --> 00:26:02,570
for the users through the adult

00:26:00,110 --> 00:26:04,340
education process to do the release of

00:26:02,570 --> 00:26:06,950
the attributes and then you can get them

00:26:04,340 --> 00:26:09,160
and you can do the processing that is

00:26:06,950 --> 00:26:09,160
what

00:26:16,710 --> 00:26:22,690
right now yes yes right now the user

00:26:20,620 --> 00:26:24,280
that indicated in the Federation will

00:26:22,690 --> 00:26:25,750
get the right of the accounts that you

00:26:24,280 --> 00:26:29,680
create because you need to greater

00:26:25,750 --> 00:26:30,310
nikhat beforehand right yeah they need

00:26:29,680 --> 00:26:32,260
to undo it

00:26:30,310 --> 00:26:33,910
yeah I know it's not working yeah and

00:26:32,260 --> 00:26:36,190
with caustic doesn't work and the

00:26:33,910 --> 00:26:38,110
implementation we did we talking stack

00:26:36,190 --> 00:26:44,950
it works because of insect loads on the

00:26:38,110 --> 00:26:47,710
fly so the idea is reduced in memory of

00:26:44,950 --> 00:26:49,630
accounts and also to implement stronger

00:26:47,710 --> 00:26:51,790
and uniform melting different policies

00:26:49,630 --> 00:26:53,680
what we mean by that in this company

00:26:51,790 --> 00:26:57,580
that we were working with called stack

00:26:53,680 --> 00:26:59,200
in OpenStack they don't they don't just

00:26:57,580 --> 00:27:02,410
have like open second cloud stack they

00:26:59,200 --> 00:27:04,770
had you know many other systems and each

00:27:02,410 --> 00:27:08,560
one of them they have you know different

00:27:04,770 --> 00:27:10,290
not have they had different password

00:27:08,560 --> 00:27:12,580
policies different authentication

00:27:10,290 --> 00:27:14,860
policies and they wanted to implement

00:27:12,580 --> 00:27:16,420
OTP but how do you do that I mean are

00:27:14,860 --> 00:27:19,450
you going to implement OTP never seen

00:27:16,420 --> 00:27:23,650
your system out there it's just nonsense

00:27:19,450 --> 00:27:25,870
so by adopting these news and error this

00:27:23,650 --> 00:27:27,610
these technologies here we were able in

00:27:25,870 --> 00:27:30,030
order to have a standard and common

00:27:27,610 --> 00:27:33,460
password policies for all of the systems

00:27:30,030 --> 00:27:36,160
to enable OTP in a transparent fashion

00:27:33,460 --> 00:27:39,850
for all of the systems without any

00:27:36,160 --> 00:27:42,190
coding we also got auditing the same

00:27:39,850 --> 00:27:44,320
manner for all of the systems and we can

00:27:42,190 --> 00:27:45,640
manage user sessions on the fly so if

00:27:44,320 --> 00:27:48,070
there is a data breach if there is a

00:27:45,640 --> 00:27:49,480
hacking somehow we can even little off

00:27:48,070 --> 00:27:51,850
the sessions the administrator can do

00:27:49,480 --> 00:27:55,540
that on the fly you know without

00:27:51,850 --> 00:27:57,900
stopping it up to anything yes you we

00:27:55,540 --> 00:27:57,900
can terminate

00:27:58,180 --> 00:28:04,270
yes that's part of the protocol stack

00:28:00,700 --> 00:28:06,940
did not implement it as it should yeah

00:28:04,270 --> 00:28:08,380
that's part of the protocol so when you

00:28:06,940 --> 00:28:10,840
read the specification for Sam and

00:28:08,380 --> 00:28:12,490
OpenID Connect there is a hook that the

00:28:10,840 --> 00:28:14,380
idents provider can call to invalidate

00:28:12,490 --> 00:28:17,410
user sessions so that was not

00:28:14,380 --> 00:28:19,600
implemented open to be fair OpenStack

00:28:17,410 --> 00:28:21,790
was did not implement it as well but our

00:28:19,600 --> 00:28:25,150
requirement we needed it so we fix it

00:28:21,790 --> 00:28:26,590
there but I mean I'm not I did not have

00:28:25,150 --> 00:28:30,790
the sequence for opens like that's why

00:28:26,590 --> 00:28:32,470
it wasn't fixed here yet but that is so

00:28:30,790 --> 00:28:34,030
that there are there is this problem

00:28:32,470 --> 00:28:37,840
that we were discussing with the user

00:28:34,030 --> 00:28:42,040
mapping and the user creation and there

00:28:37,840 --> 00:28:43,930
is something else this is open Plus this

00:28:42,040 --> 00:28:45,700
is actually part of the history because

00:28:43,930 --> 00:28:49,990
in each state to change the protocol to

00:28:45,700 --> 00:28:52,870
deal with it if the user generates

00:28:49,990 --> 00:28:54,790
access code or this whole psyche user

00:28:52,870 --> 00:28:59,140
keys they are bypassing the

00:28:54,790 --> 00:29:02,530
authentication process they are

00:28:59,140 --> 00:29:06,220
bypassing the authentication process if

00:29:02,530 --> 00:29:11,020
the user generates forestation codes or

00:29:06,220 --> 00:29:15,850
you use it no context you can generate

00:29:11,020 --> 00:29:18,080
user keys because then you bypass the

00:29:15,850 --> 00:29:21,220
authentication process

00:29:18,080 --> 00:29:21,220
[Music]

00:29:27,000 --> 00:29:35,590
no it's not fixity this kind of problem

00:29:30,730 --> 00:29:37,000
here it's an open issue yes for the from

00:29:35,590 --> 00:29:45,460
the protocol itself that's one of the

00:29:37,000 --> 00:29:47,230
problems because the protocol was yes

00:29:45,460 --> 00:29:49,750
but then there is the authentication

00:29:47,230 --> 00:29:51,400
execution flow in the ident provider but

00:29:49,750 --> 00:29:53,680
that's something else that most systems

00:29:51,400 --> 00:29:56,110
are not implementing it then you you

00:29:53,680 --> 00:29:57,640
need to authenticate when you do the

00:29:56,110 --> 00:29:59,320
authentication that means provider if

00:29:57,640 --> 00:30:00,790
you generate an access code there in

00:29:59,320 --> 00:30:02,800
settings provide and not in this has

00:30:00,790 --> 00:30:04,270
provider so in that's a problem and then

00:30:02,800 --> 00:30:07,780
you need to support that execution flow

00:30:04,270 --> 00:30:09,870
which is called in the case of OpenID

00:30:07,780 --> 00:30:12,250
connect it's called authorization

00:30:09,870 --> 00:30:13,720
authorization codes but you need to

00:30:12,250 --> 00:30:17,190
generate the authorization code in the

00:30:13,720 --> 00:30:25,240
identity provider and not involve stack

00:30:17,190 --> 00:30:27,490
sorry yes it has a TTL and then you

00:30:25,240 --> 00:30:29,890
receive that quote and it has a short

00:30:27,490 --> 00:30:31,720
time to live and then you present that

00:30:29,890 --> 00:30:34,810
coach called stack and construct

00:30:31,720 --> 00:30:36,430
presents it and then consequence it

00:30:34,810 --> 00:30:38,200
gives a comment you want to know that's

00:30:36,430 --> 00:30:41,860
why is troublesome that's why it was not

00:30:38,200 --> 00:30:48,400
implemented here yet and neither opens

00:30:41,860 --> 00:30:50,620
like for this yes in OpenStack one thing

00:30:48,400 --> 00:30:52,390
that we discuss how to fix it it's true

00:30:50,620 --> 00:30:54,940
I'd support for these authorization

00:30:52,390 --> 00:30:57,490
calls in the CLI then they CLI the

00:30:54,940 --> 00:30:59,710
common line interface we generate the

00:30:57,490 --> 00:31:01,210
authorization code and then we will use

00:30:59,710 --> 00:31:01,870
the authorization code use equal to e

00:31:01,210 --> 00:31:04,150
Quest's

00:31:01,870 --> 00:31:06,310
instead of for instead of educating with

00:31:04,150 --> 00:31:08,830
it with username and password but that

00:31:06,310 --> 00:31:10,420
hasn't be fixed there as well but these

00:31:08,830 --> 00:31:11,830
also generates some other problems with

00:31:10,420 --> 00:31:14,110
some other systems because they have a

00:31:11,830 --> 00:31:16,060
semi synchronous test the tired as if

00:31:14,110 --> 00:31:19,870
it'll automatically on behalf of the

00:31:16,060 --> 00:31:22,240
user so but but so some systems we still

00:31:19,870 --> 00:31:24,029
have these open problems in a variety of

00:31:22,240 --> 00:31:26,700
systems

00:31:24,029 --> 00:31:28,799
and the single order - that's what we

00:31:26,700 --> 00:31:30,989
said that it's not implemented but I

00:31:28,799 --> 00:31:32,549
mean it is best fighting the pro in the

00:31:30,989 --> 00:31:36,599
protocol you just need to plant it and

00:31:32,549 --> 00:31:39,179
follow it that's basically all guys

00:31:36,599 --> 00:31:43,810
thank you all for attending and have any

00:31:39,179 --> 00:31:47,860
other questions please thank you

00:31:43,810 --> 00:31:47,860

YouTube URL: https://www.youtube.com/watch?v=gIfNAg3usfM


