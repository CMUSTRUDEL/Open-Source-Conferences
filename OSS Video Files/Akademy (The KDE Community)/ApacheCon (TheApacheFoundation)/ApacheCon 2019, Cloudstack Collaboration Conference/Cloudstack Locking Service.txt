Title: Cloudstack Locking Service
Publication date: 2019-09-19
Playlist: ApacheCon 2019, Cloudstack Collaboration Conference
Description: 
	As CloudStack cannot work with any mysql clustering solution, it is time to explore a new locking service, manager and pluggable interface which would allow CloudStack DB to be HA enabled with multi-master read/write. Talk will focus on, - Need for a locking service and challenges with existing CloudStack architecture - Different possible clustering solution that can be adopted - Showcasing a PoC for future implementation with minimal changes to existing architecture using percona xtradb or any other clustering solution - Additionally, explore the idea of getting rid of mshost table, and use locking service to find about other management servers.
Captions: 
	00:00:04,960 --> 00:00:15,110
hello welcome to the conference and my

00:00:08,780 --> 00:00:20,420
talk on the outside locking service I'm

00:00:15,110 --> 00:00:24,830
a software developer with che blue and I

00:00:20,420 --> 00:00:27,320
joined che blue at the start of this

00:00:24,830 --> 00:00:31,400
year and started working on cloud seg

00:00:27,320 --> 00:00:35,270
maybe around last year late last year so

00:00:31,400 --> 00:00:42,829
I am relatively quite new to the product

00:00:35,270 --> 00:00:44,660
and software project previously I was

00:00:42,829 --> 00:00:48,100
working on application development

00:00:44,660 --> 00:00:51,530
domain and this is my shift to

00:00:48,100 --> 00:00:54,380
infrastructure and I'm really grateful

00:00:51,530 --> 00:00:57,649
to the welcoming community that we have

00:00:54,380 --> 00:00:59,930
with cloud so I so this is my first time

00:00:57,649 --> 00:01:03,050
attending the conference so if things

00:00:59,930 --> 00:01:11,149
don't go right this presentation

00:01:03,050 --> 00:01:15,409
my apologies with little about me I am

00:01:11,149 --> 00:01:18,319
from India and I have worked on some of

00:01:15,409 --> 00:01:19,909
the features on cloud shack recently

00:01:18,319 --> 00:01:23,179
like no means the only specific

00:01:19,909 --> 00:01:27,439
offerings VM ingestion which is yet to

00:01:23,179 --> 00:01:32,060
be moist with the master and containers

00:01:27,439 --> 00:01:35,119
of this plugin which is also in works I

00:01:32,060 --> 00:01:38,209
know working out in gym watching action

00:01:35,119 --> 00:01:43,099
movies discussing political things so

00:01:38,209 --> 00:01:46,009
it's friends so that's me objective of

00:01:43,099 --> 00:01:49,880
this talk is to start a discussion

00:01:46,009 --> 00:01:54,889
around a new locking unlocking service

00:01:49,880 --> 00:01:58,340
manager and clogging interface for now

00:01:54,889 --> 00:02:00,979
check with one of the distributed

00:01:58,340 --> 00:02:04,270
locking managers such as new people is a

00:02:00,979 --> 00:02:07,969
cost or anything else

00:02:04,270 --> 00:02:10,530
outcome of which can be having a cloud

00:02:07,969 --> 00:02:15,270
check database with multi master

00:02:10,530 --> 00:02:18,500
read/write and AJ and load ben'll

00:02:15,270 --> 00:02:22,710
balancing capabilities we can also

00:02:18,500 --> 00:02:28,680
implement your discovery using some of

00:02:22,710 --> 00:02:31,050
these locking managers and we can get

00:02:28,680 --> 00:02:34,190
rid of some of the things like ms4

00:02:31,050 --> 00:02:39,750
stable in our database and have a better

00:02:34,190 --> 00:02:40,980
discovery why do we need our locking

00:02:39,750 --> 00:02:46,470
service in browser

00:02:40,980 --> 00:02:51,750
so as we know I can handle number of

00:02:46,470 --> 00:02:56,490
who's with educate ability and with it

00:02:51,750 --> 00:03:01,290
lots of virtual machines it can manage

00:02:56,490 --> 00:03:05,190
multiple management servers and do load

00:03:01,290 --> 00:03:09,750
balancing there but for database there's

00:03:05,190 --> 00:03:13,410
limited support with the only master

00:03:09,750 --> 00:03:16,380
slave configuration and load balancing

00:03:13,410 --> 00:03:20,720
is not in build we have to set some of

00:03:16,380 --> 00:03:23,570
the DB properties and many some of the

00:03:20,720 --> 00:03:28,470
global settings in the management server

00:03:23,570 --> 00:03:30,950
support that also with this having

00:03:28,470 --> 00:03:32,880
active active or active passive

00:03:30,950 --> 00:03:36,750
configuration for management server

00:03:32,880 --> 00:03:39,440
becomes difficult obviously there is no

00:03:36,750 --> 00:03:43,019
support for the pa-risc obvious such

00:03:39,440 --> 00:03:46,239
through because we right now what you

00:03:43,019 --> 00:03:50,049
have is database locking that

00:03:46,239 --> 00:03:53,650
so we continue mint will be current

00:03:50,049 --> 00:03:55,810
approach since our current

00:03:53,650 --> 00:03:58,989
implementation doesn't works with some

00:03:55,810 --> 00:04:03,310
of the clustering solutions such as

00:03:58,989 --> 00:04:07,290
percona extra DB or other clustering our

00:04:03,310 --> 00:04:10,000
database clustering solutions we can't

00:04:07,290 --> 00:04:15,849
have support for some of the things

00:04:10,000 --> 00:04:18,489
which these solutions provide these are

00:04:15,849 --> 00:04:24,490
some of the topics that we will be

00:04:18,489 --> 00:04:27,729
looking into so we start with a bit of

00:04:24,490 --> 00:04:31,830
introduction of locking database locking

00:04:27,729 --> 00:04:35,949
and what we have implemented in our

00:04:31,830 --> 00:04:38,860
current code we will look into

00:04:35,949 --> 00:04:41,620
distributed locks some introduction

00:04:38,860 --> 00:04:49,330
about it different distributed lock

00:04:41,620 --> 00:04:52,539
managers since I have made made some

00:04:49,330 --> 00:04:56,740
problems did some demo with a party

00:04:52,539 --> 00:05:00,430
keeper and he will cast a bit of

00:04:56,740 --> 00:05:06,310
overview of there is a short demo

00:05:00,430 --> 00:05:09,669
of my implementation we can see some of

00:05:06,310 --> 00:05:14,740
the comparison with my implementation

00:05:09,669 --> 00:05:18,520
and current implementation of locking

00:05:14,740 --> 00:05:22,840
into offset and maybe discuss about

00:05:18,520 --> 00:05:30,030
future or future implementation how we

00:05:22,840 --> 00:05:30,030
go about it so let's get into it loss

00:05:30,720 --> 00:05:40,660
mutex awesomer force in general when we

00:05:34,930 --> 00:05:43,270
talk about in programming they are means

00:05:40,660 --> 00:05:49,440
to synchronize the access for some

00:05:43,270 --> 00:05:53,169
shared resource so in my context this is

00:05:49,440 --> 00:05:57,570
database for Klaus check we can have

00:05:53,169 --> 00:06:02,979
multiple management service running

00:05:57,570 --> 00:06:05,860
which are trying to have access for a

00:06:02,979 --> 00:06:08,949
single database so we need some

00:06:05,860 --> 00:06:12,520
mechanism how these different management

00:06:08,949 --> 00:06:15,690
servers will interact with that

00:06:12,520 --> 00:06:21,310
particular database or table or record

00:06:15,690 --> 00:06:25,500
so as it is mentioned here it can locks

00:06:21,310 --> 00:06:30,510
can be of pipes worldly advisory or

00:06:25,500 --> 00:06:35,349
mandatory there is a concept of

00:06:30,510 --> 00:06:42,250
granularity the amount of data that is

00:06:35,349 --> 00:06:45,880
being blocked by an implementation is it

00:06:42,250 --> 00:06:51,070
can be fine or coarse depending upon the

00:06:45,880 --> 00:06:57,780
amount which is it is locking although

00:06:51,070 --> 00:07:00,639
locks are great because they help us in

00:06:57,780 --> 00:07:03,729
synchronizing the access who was here at

00:07:00,639 --> 00:07:06,639
the source but they certain amount of

00:07:03,729 --> 00:07:09,610
overhead in terms of implementation in

00:07:06,639 --> 00:07:13,930
terms of debugging

00:07:09,610 --> 00:07:16,020
on lighting the court itself

00:07:13,930 --> 00:07:21,430
there are some other problems like

00:07:16,020 --> 00:07:26,070
contention we have multiple processes or

00:07:21,430 --> 00:07:30,910
nodes are trying to have access to same

00:07:26,070 --> 00:07:34,960
resource and locking implementation is

00:07:30,910 --> 00:07:38,140
preventing them and creating a waiting

00:07:34,960 --> 00:07:44,320
time for them they can be also a

00:07:38,140 --> 00:07:48,490
situation of deadlock where processes

00:07:44,320 --> 00:07:52,210
are trying to have control of some

00:07:48,490 --> 00:07:57,120
shared resource but due to their

00:07:52,210 --> 00:07:57,120
interdependence it is creating blocking

00:08:01,500 --> 00:08:09,760
let's get into database locks why do we

00:08:06,040 --> 00:08:13,750
need database logs similar to what we

00:08:09,760 --> 00:08:17,320
what I said in logs in general database

00:08:13,750 --> 00:08:19,770
are no locks are needed to maintain the

00:08:17,320 --> 00:08:23,250
consistency of database ensure

00:08:19,770 --> 00:08:25,840
transaction is synchronized when

00:08:23,250 --> 00:08:29,710
multiple nodes are trying to make

00:08:25,840 --> 00:08:32,500
changes to a particular record database

00:08:29,710 --> 00:08:36,690
allow locks can be of two types

00:08:32,500 --> 00:08:40,950
normally pessimistic or optimistic where

00:08:36,690 --> 00:08:44,350
pessimistic is when record is long until

00:08:40,950 --> 00:08:49,810
node is done with what is it is trying

00:08:44,350 --> 00:08:54,310
to do while optimistic can be TB where

00:08:49,810 --> 00:08:57,040
the system keeps of a P for each of the

00:08:54,310 --> 00:08:59,650
for each of the nodes and verifies later

00:08:57,040 --> 00:09:03,490
when it releases the log

00:08:59,650 --> 00:09:10,570
who granularity here can be on database

00:09:03,490 --> 00:09:13,450
even like whole database is long are

00:09:10,570 --> 00:09:17,260
trying to access it and finally we'll be

00:09:13,450 --> 00:09:21,430
able level and as you can see row or

00:09:17,260 --> 00:09:26,770
column level similar issues with

00:09:21,430 --> 00:09:30,190
database log says contention multiple

00:09:26,770 --> 00:09:34,000
processes are trying to have on some

00:09:30,190 --> 00:09:40,180
record or table for shorter amount of

00:09:34,000 --> 00:09:43,500
time but it is leading singly in which

00:09:40,180 --> 00:09:46,360
kind of diffusion this can be seen and

00:09:43,500 --> 00:09:49,930
let's say a number of virtual machines

00:09:46,360 --> 00:09:55,930
are simultaneously deployed so all of

00:09:49,930 --> 00:10:01,839
them are trying to make certain certain

00:09:55,930 --> 00:10:07,750
parts of database eventually things

00:10:01,839 --> 00:10:12,339
become serial in practice long term

00:10:07,750 --> 00:10:17,920
locking is another issue multiple nodes

00:10:12,339 --> 00:10:21,870
are time to have locks own database for

00:10:17,920 --> 00:10:25,360
long period of time but because since

00:10:21,870 --> 00:10:28,650
first process is first of any process is

00:10:25,360 --> 00:10:31,540
already logged that database it is

00:10:28,650 --> 00:10:33,779
creating long term blocking for other

00:10:31,540 --> 00:10:33,779
processes

00:10:34,649 --> 00:10:45,310
this can be seen like due to some

00:10:39,399 --> 00:10:49,180
situation while deploying virtual

00:10:45,310 --> 00:10:52,660
machine it is long some part of database

00:10:49,180 --> 00:10:58,509
but garbage collection process is not

00:10:52,660 --> 00:11:04,930
being able to because it is already

00:10:58,509 --> 00:11:08,800
logged by the deployment similarly there

00:11:04,930 --> 00:11:13,060
can be database deadlock different

00:11:08,800 --> 00:11:17,290
actions are making database transaction

00:11:13,060 --> 00:11:20,170
but because they are interdependence the

00:11:17,290 --> 00:11:22,449
both of them cannot have blow up on

00:11:20,170 --> 00:11:24,990
certain thing and it is leading to

00:11:22,449 --> 00:11:24,990
deadlock

00:11:25,329 --> 00:11:34,209
they are other issues like overhead of

00:11:30,029 --> 00:11:37,949
implementing database logs difficult to

00:11:34,209 --> 00:11:44,310
debug because locking is something

00:11:37,949 --> 00:11:49,029
depends upon time and the actions

00:11:44,310 --> 00:11:52,089
process is trying to make so it becomes

00:11:49,029 --> 00:11:55,410
difficult in practice to replicate the

00:11:52,089 --> 00:11:58,860
same situation there can be also

00:11:55,410 --> 00:12:03,819
situation like priority inversion where

00:11:58,860 --> 00:12:07,209
like user in terms of cloud check user

00:12:03,819 --> 00:12:10,660
is trying to deploy a virtual machine

00:12:07,209 --> 00:12:16,389
but log is held by a garbage collection

00:12:10,660 --> 00:12:19,839
process so it creates priority inversion

00:12:16,389 --> 00:12:22,410
by end of thing because we consider

00:12:19,839 --> 00:12:22,410
deployment

00:12:22,620 --> 00:12:27,899
in priety so this situation can also be

00:12:26,070 --> 00:12:31,440
there

00:12:27,899 --> 00:12:37,160
they can also be situation like annoying

00:12:31,440 --> 00:12:44,880
we're all sets have some great time but

00:12:37,160 --> 00:12:49,019
due to because when process is already

00:12:44,880 --> 00:12:51,810
logged the database and it is be surely

00:12:49,019 --> 00:12:58,500
would so it is creating blocking for

00:12:51,810 --> 00:13:00,930
other who treads let's look into how

00:12:58,500 --> 00:13:07,110
current implementation of locking works

00:13:00,930 --> 00:13:10,170
in the offset currently Klaus tech uses

00:13:07,110 --> 00:13:14,519
MySQL log functions for locking the

00:13:10,170 --> 00:13:19,079
database particularly get log function

00:13:14,519 --> 00:13:23,089
to have some locks with particular names

00:13:19,079 --> 00:13:26,880
on particular reports or tables so

00:13:23,089 --> 00:13:31,050
basically it's locking that are locking

00:13:26,880 --> 00:13:36,420
the database itself it keeps a hash map

00:13:31,050 --> 00:13:41,819
of created law acquired locks and code

00:13:36,420 --> 00:13:43,949
handles them thereby some a feature of

00:13:41,819 --> 00:13:48,480
it can be said that it is fast and

00:13:43,949 --> 00:13:52,850
effective because we are locking the

00:13:48,480 --> 00:13:56,579
database so there's no such server or

00:13:52,850 --> 00:13:58,980
third party interaction between the

00:13:56,579 --> 00:14:01,889
process and database like we what we

00:13:58,980 --> 00:14:08,220
will have with a distributed locking

00:14:01,889 --> 00:14:12,620
manager limitation of current design is

00:14:08,220 --> 00:14:16,170
it cannot work with clustering solutions

00:14:12,620 --> 00:14:19,620
as I mentioned something like work on an

00:14:16,170 --> 00:14:21,900
extra DBE won't work because it doesn't

00:14:19,620 --> 00:14:25,200
support some of the functions that we

00:14:21,900 --> 00:14:30,180
use in our local implementation that is

00:14:25,200 --> 00:14:36,020
very low very slow and we cannot have

00:14:30,180 --> 00:14:41,760
multi master DB where all of the nodes

00:14:36,020 --> 00:14:44,340
trying to make some transaction and for

00:14:41,760 --> 00:14:49,980
higher will be also we have limited

00:14:44,340 --> 00:14:55,440
support with setting it to DB properties

00:14:49,980 --> 00:14:58,620
and setting small so here comes the

00:14:55,440 --> 00:15:05,010
concept of distributed blocking which

00:14:58,620 --> 00:15:07,320
can solve some of these problems now

00:15:05,010 --> 00:15:12,740
looking let's look into distributed

00:15:07,320 --> 00:15:15,480
locks similar to distributed locks

00:15:12,740 --> 00:15:19,410
synchronize the access for share this

00:15:15,480 --> 00:15:24,390
source then application is deployed

00:15:19,410 --> 00:15:26,310
extra across this video decisions so it

00:15:24,390 --> 00:15:30,570
creates a coordination between different

00:15:26,310 --> 00:15:34,680
nodes like if we have multi management

00:15:30,570 --> 00:15:39,420
server setup for our cloud set

00:15:34,680 --> 00:15:44,220
deployment it will create locking

00:15:39,420 --> 00:15:47,280
synchronization between them some of the

00:15:44,220 --> 00:15:49,380
features for unlocking distributed

00:15:47,280 --> 00:15:53,510
locking can be they will be only one

00:15:49,380 --> 00:15:53,510
server which will lie

00:15:55,130 --> 00:16:05,440
they can cannot be multiple accesses at

00:16:00,410 --> 00:16:08,660
the same time so there will be some

00:16:05,440 --> 00:16:13,340
concept of leader selection or master

00:16:08,660 --> 00:16:16,840
selection there let's look into

00:16:13,340 --> 00:16:20,990
distributed locking implementation it is

00:16:16,840 --> 00:16:25,880
bit complex as everything we have in

00:16:20,990 --> 00:16:31,150
distributed systems because apart from

00:16:25,880 --> 00:16:35,960
normal variables there are also

00:16:31,150 --> 00:16:39,740
situations of network failures different

00:16:35,960 --> 00:16:44,150
notes failing at different times so it

00:16:39,740 --> 00:16:47,300
creates complexity further for

00:16:44,150 --> 00:16:50,300
implementation we have already some of

00:16:47,300 --> 00:16:53,930
the algorithms which have been proposed

00:16:50,300 --> 00:16:57,680
such as such as Judas fact sauce

00:16:53,930 --> 00:17:00,550
etcetera which implement some known

00:16:57,680 --> 00:17:03,290
distributed locking managers such as

00:17:00,550 --> 00:17:08,510
zookeeper hazel caste who will study

00:17:03,290 --> 00:17:11,000
here etcetera for distributed locking

00:17:08,510 --> 00:17:12,520
managers there can be different modes as

00:17:11,000 --> 00:17:17,709
mentioned here

00:17:12,520 --> 00:17:21,949
componentry confident right protected

00:17:17,709 --> 00:17:26,720
people which shows how these different

00:17:21,949 --> 00:17:30,830
modes work with each other so as can be

00:17:26,720 --> 00:17:35,080
seen here protected read or write both

00:17:30,830 --> 00:17:40,250
work with complimentary right it would

00:17:35,080 --> 00:17:44,810
work with component D because there is

00:17:40,250 --> 00:17:50,630
only happening with this table we can

00:17:44,810 --> 00:17:54,440
see how different modes work there are a

00:17:50,630 --> 00:17:55,850
number of existing distributed local

00:17:54,440 --> 00:17:58,880
managers

00:17:55,850 --> 00:18:01,150
there's a Parcheesi burn it is a

00:17:58,880 --> 00:18:04,310
high-performance coordination service

00:18:01,150 --> 00:18:08,750
which also provides locking mechanism

00:18:04,310 --> 00:18:18,890
there it is hazel cast Jabby etcd

00:18:08,750 --> 00:18:24,530
console we can also use gr PC etc let's

00:18:18,890 --> 00:18:26,510
see a passage a zookeeper as it is from

00:18:24,530 --> 00:18:29,420
Apache it is an open source

00:18:26,510 --> 00:18:31,520
high-performance coordination service it

00:18:29,420 --> 00:18:35,600
also provides locking distributed

00:18:31,520 --> 00:18:38,540
locking implementation so some of the

00:18:35,600 --> 00:18:42,350
stuffs which it provides helps that

00:18:38,540 --> 00:18:48,380
developers don't have to be like them

00:18:42,350 --> 00:18:52,250
themselves it can be since it is open

00:18:48,380 --> 00:18:56,390
source it can be modified to specific

00:18:52,250 --> 00:19:02,420
needs so a lot many companies use it

00:18:56,390 --> 00:19:05,550
such as Netflix and all this Java client

00:19:02,420 --> 00:19:13,760
library from

00:19:05,550 --> 00:19:13,760
develop for it called curator basically

00:19:14,150 --> 00:19:25,380
performs to this concept the set up is

00:19:21,360 --> 00:19:29,040
deployed on all the distributed notes

00:19:25,380 --> 00:19:33,740
and with the help of its implementation

00:19:29,040 --> 00:19:37,970
it selects a leader among them and that

00:19:33,740 --> 00:19:42,210
leader is responsible for making all the

00:19:37,970 --> 00:19:47,780
requests worth which we give it will pay

00:19:42,210 --> 00:19:47,780
off from which server it is coming from

00:19:51,530 --> 00:20:01,020
for implementing it in code it is quite

00:19:55,290 --> 00:20:05,270
simple we can like in our management

00:20:01,020 --> 00:20:10,740
server we can implement it through an

00:20:05,270 --> 00:20:16,740
embedded design and startup equal server

00:20:10,740 --> 00:20:20,120
and connect to this server we can create

00:20:16,740 --> 00:20:24,270
an instance of pure 8:00 at night and

00:20:20,120 --> 00:20:29,660
perform over walking through it it can

00:20:24,270 --> 00:20:34,280
be seen the inter process flow mutex log

00:20:29,660 --> 00:20:36,480
classes which can help giving

00:20:34,280 --> 00:20:42,980
distributed logs with a particular name

00:20:36,480 --> 00:20:42,980
and where you BA acquired and know

00:20:43,070 --> 00:20:51,410
there's also hazel cost this is in

00:20:47,250 --> 00:20:55,590
in-memory solution so it is

00:20:51,410 --> 00:21:02,610
comparatively faster than what we get in

00:20:55,590 --> 00:21:05,309
zoo people so it has the data structures

00:21:02,610 --> 00:21:13,160
that which we have in Java such as map

00:21:05,309 --> 00:21:18,360
set lock itself so it works quite well

00:21:13,160 --> 00:21:25,440
similar to what we have for zoo people

00:21:18,360 --> 00:21:30,650
we can be he will cost any sense for

00:21:25,440 --> 00:21:34,230
implementation there is a concept called

00:21:30,650 --> 00:21:39,540
CP subsystem which we need to be at for

00:21:34,230 --> 00:21:42,890
a limitation and create some instances

00:21:39,540 --> 00:21:50,100
for it and loops can be acquired through

00:21:42,890 --> 00:21:55,770
this instance so for implementing normal

00:21:50,100 --> 00:22:00,169
service in from what I did for my demo

00:21:55,770 --> 00:22:03,410
is I created a pluggable design where

00:22:00,169 --> 00:22:06,750
there will be a generic lock manager and

00:22:03,410 --> 00:22:12,870
different plugins can be implemented for

00:22:06,750 --> 00:22:16,230
it based on user requirements I created

00:22:12,870 --> 00:22:18,570
a demo people and it will cost

00:22:16,230 --> 00:22:21,000
others can use something like radius so

00:22:18,570 --> 00:22:26,179
it shall be your anything else what the

00:22:21,000 --> 00:22:30,900
field like we can have a global setting

00:22:26,179 --> 00:22:33,419
any name and different value can be set

00:22:30,900 --> 00:22:35,780
to it for using different blocking

00:22:33,419 --> 00:22:35,780
manager

00:22:54,560 --> 00:23:05,570
okay so apparently in this demo I am

00:23:00,270 --> 00:23:10,550
using my problem

00:23:05,570 --> 00:23:14,070
cloud monkey base prospect equipment and

00:23:10,550 --> 00:23:16,980
it is currently using the default

00:23:14,070 --> 00:23:21,180
mechanism for database looks what we

00:23:16,980 --> 00:23:26,760
have in object so I've implemented this

00:23:21,180 --> 00:23:30,720
login where it shows what lock lock it

00:23:26,760 --> 00:23:36,630
is creating and our time and the time it

00:23:30,720 --> 00:23:39,510
takes in milliseconds so the default

00:23:36,630 --> 00:23:41,790
implementation is it can be seen the

00:23:39,510 --> 00:23:49,140
times are something in like two

00:23:41,790 --> 00:23:57,000
milliseconds milliseconds etc as it can

00:23:49,140 --> 00:24:02,580
be seen I have created this global

00:23:57,000 --> 00:24:07,080
setting which can which I can use to set

00:24:02,580 --> 00:24:12,020
the locking manager and it can change

00:24:07,080 --> 00:24:12,020
the locking in not set

00:24:14,659 --> 00:24:22,100
currently I'm trying to use zookeeper

00:24:17,700 --> 00:24:26,240
implementation what we what I did so I

00:24:22,100 --> 00:24:26,240
restarted my management server

00:24:47,120 --> 00:24:57,620
okay so if you guys can see since people

00:24:53,570 --> 00:25:01,260
and embedded server client architecture

00:24:57,620 --> 00:25:06,750
the locking times for acquiring a lot

00:25:01,260 --> 00:25:11,669
have increase large extend compared to

00:25:06,750 --> 00:25:14,130
default mechanism as you can see here is

00:25:11,669 --> 00:25:16,880
stating somewhere around 14 milliseconds

00:25:14,130 --> 00:25:16,880
milliseconds

00:25:22,330 --> 00:25:28,929
now I since it was taking considerable

00:25:26,330 --> 00:25:32,960
large amount of time compared to default

00:25:28,929 --> 00:25:36,160
mechanism I also tested it with my Hisle

00:25:32,960 --> 00:25:36,160
varsity implementation

00:25:46,990 --> 00:25:59,230
as it can be seen he will cast creates a

00:25:54,080 --> 00:26:04,190
number of new sign instances for

00:25:59,230 --> 00:26:07,370
creating the locking so in my experience

00:26:04,190 --> 00:26:11,080
it took more time to start a management

00:26:07,370 --> 00:26:13,600
server then what we currently have all

00:26:11,080 --> 00:26:23,630
what we have with zookeeper

00:26:13,600 --> 00:26:28,010
so after Violetta starts so here the

00:26:23,630 --> 00:26:31,370
time to acquire a log to have used from

00:26:28,010 --> 00:26:36,770
there to what you have to do people like

00:26:31,370 --> 00:26:42,260
it is 5e second for conceivably less but

00:26:36,770 --> 00:26:44,990
move then what we have compared to

00:26:42,260 --> 00:26:50,510
default to implementation this was

00:26:44,990 --> 00:26:54,100
expected as in hazel Casto hazel cost

00:26:50,510 --> 00:26:54,100
also they will be

00:27:14,409 --> 00:27:22,580
there will be a server through which our

00:27:17,179 --> 00:27:23,350
logs will be acquired so the time will

00:27:22,580 --> 00:27:31,900
be moved

00:27:23,350 --> 00:27:35,480
why I chose reminding unlocking so this

00:27:31,900 --> 00:27:39,400
it is obvious better to have choices we

00:27:35,480 --> 00:27:43,520
have choices of different hypervisors in

00:27:39,400 --> 00:27:47,510
now sex so why not for having locking

00:27:43,520 --> 00:27:51,740
service it becomes easier to develop

00:27:47,510 --> 00:27:54,669
because different developers can have

00:27:51,740 --> 00:27:59,900
different lubrication and they can

00:27:54,669 --> 00:28:01,580
develop on the preference it is seeing

00:27:59,900 --> 00:28:04,640
there is also performance difference

00:28:01,580 --> 00:28:08,419
come from when we looked into visual

00:28:04,640 --> 00:28:11,510
cast and zookeeper so different users

00:28:08,419 --> 00:28:16,159
can use different walking service maybe

00:28:11,510 --> 00:28:20,390
their default one itself so this is a

00:28:16,159 --> 00:28:25,490
graph citing the log acquire time during

00:28:20,390 --> 00:28:29,960
deployment so the local shows

00:28:25,490 --> 00:28:35,360
parental emendation yeah we have Thomas

00:28:29,960 --> 00:28:41,419
walking itself which is less than two

00:28:35,360 --> 00:28:48,760
milliseconds for zookeeper the time 7

00:28:41,419 --> 00:28:53,480
p.m. security while his across performs

00:28:48,760 --> 00:28:57,940
similar to what we have before in the

00:28:53,480 --> 00:28:57,940
plantation sometimes more sometimes less

00:28:58,390 --> 00:29:09,580
there are also issues with distributed

00:29:03,169 --> 00:29:12,639
locking which we have something like

00:29:09,580 --> 00:29:17,289
firstly we have to implement make the

00:29:12,639 --> 00:29:22,090
implementation and then have a have

00:29:17,289 --> 00:29:27,340
optimization so over it so I don't know

00:29:22,090 --> 00:29:30,460
how we are going to proceed but it would

00:29:27,340 --> 00:29:35,250
be good to have a locking service to

00:29:30,460 --> 00:29:39,880
support my sphere clustering solutions

00:29:35,250 --> 00:29:43,960
future work can be like currently I have

00:29:39,880 --> 00:29:50,710
a basic implementation of his caste and

00:29:43,960 --> 00:29:53,769
so I will be trying to create discussion

00:29:50,710 --> 00:29:59,139
around it on mailing list after this

00:29:53,769 --> 00:30:01,149
conference and we need to test it

00:29:59,139 --> 00:30:06,870
clustering solutions I tested with

00:30:01,149 --> 00:30:12,130
Khanna extra DB but we need more testing

00:30:06,870 --> 00:30:14,409
after we decide we might decide we will

00:30:12,130 --> 00:30:16,450
be implementing on the a particular

00:30:14,409 --> 00:30:20,380
distributed locking manager not the

00:30:16,450 --> 00:30:27,309
general think so optimizing that would

00:30:20,380 --> 00:30:30,370
be first thing we can in my opinion we

00:30:27,309 --> 00:30:32,740
can target something like 415 version of

00:30:30,370 --> 00:30:38,019
cloth sack for having the locking

00:30:32,740 --> 00:30:42,269
service if not for 14 so I am looking

00:30:38,019 --> 00:30:45,530
forward to it thank you any questions or

00:30:42,269 --> 00:30:48,490
thoughts around it

00:30:45,530 --> 00:31:06,100
[Music]

00:30:48,490 --> 00:31:13,660
yeah with my implementation or existing

00:31:06,100 --> 00:31:20,370
one I I proposed a framework kind of

00:31:13,660 --> 00:31:24,820
design like we have for something like

00:31:20,370 --> 00:31:30,280
different hypervisors all storage so we

00:31:24,820 --> 00:31:34,360
should sue it will be service manager

00:31:30,280 --> 00:31:36,400
impel kind of thing the different

00:31:34,360 --> 00:31:40,690
plugins can be made depending on

00:31:36,400 --> 00:31:43,230
different locking managers like a fine

00:31:40,690 --> 00:31:43,230
show

00:33:08,440 --> 00:33:15,809
Vijay never interface for be be locking

00:33:12,610 --> 00:33:18,780
manager and based on date we can

00:33:15,809 --> 00:33:22,690
implement our different plugins

00:33:18,780 --> 00:33:32,950
something like zookeeper manager impel

00:33:22,690 --> 00:33:36,520
all his will custom engine but like like

00:33:32,950 --> 00:33:43,179
here I implemented a people DB locking

00:33:36,520 --> 00:33:46,990
service so if implements DB locking

00:33:43,179 --> 00:33:49,720
service and it gives a name here

00:33:46,990 --> 00:33:54,940
zookeeper so same thing can be mentioned

00:33:49,720 --> 00:33:56,919
in global settings and based on it code

00:33:54,940 --> 00:34:06,270
will discover it

00:33:56,919 --> 00:34:10,440
waves on its mean and if I through like

00:34:06,270 --> 00:34:15,780
this is zookeeper this I can adhere

00:34:10,440 --> 00:34:15,780
either cuz these locking sir is so

00:34:19,710 --> 00:34:22,859
anything else

00:35:05,050 --> 00:35:14,660
not very like we already have code for

00:35:09,530 --> 00:35:18,680
it which implements locking while doing

00:35:14,660 --> 00:35:23,590
this so thing is we can cannot have

00:35:18,680 --> 00:35:23,590
database clustering right now so

00:36:17,860 --> 00:36:26,840
yes I think that is one technical day

00:36:23,090 --> 00:36:29,390
that we had with current code there are

00:36:26,840 --> 00:36:31,580
a lot of places where we are

00:36:29,390 --> 00:36:36,080
implementing locks where we don't

00:36:31,580 --> 00:36:39,680
actually need them so that can be also

00:36:36,080 --> 00:36:45,500
looked into while doing this exercise we

00:36:39,680 --> 00:36:49,610
can maybe refactor the code for it but

00:36:45,500 --> 00:36:52,310
my proposal was only relating to

00:36:49,610 --> 00:36:58,310
implement something for database

00:36:52,310 --> 00:37:01,250
clustering here thinking about like do

00:36:58,310 --> 00:37:19,220
we really need locks is a different

00:37:01,250 --> 00:37:21,830
thing altogether so yeah yes but it

00:37:19,220 --> 00:37:26,150
would be like in my opinion it would be

00:37:21,830 --> 00:37:31,040
difficult to remove the locks altogether

00:37:26,150 --> 00:37:34,220
like at certain situations we will

00:37:31,040 --> 00:37:38,560
actually need them like while performing

00:37:34,220 --> 00:37:42,380
a VM deployment we need to lock certain

00:37:38,560 --> 00:37:45,470
tables or records in the database so it

00:37:42,380 --> 00:37:49,150
would be hard if we remove the locking

00:37:45,470 --> 00:37:49,150
it as a whole

00:37:58,330 --> 00:38:01,330
yeah

00:39:02,970 --> 00:39:13,720
yes surely so one point of not having a

00:39:08,850 --> 00:39:16,420
proper demo or proper implementation was

00:39:13,720 --> 00:39:21,310
this as well like to start a discussion

00:39:16,420 --> 00:39:24,040
maybe this is my solution but other

00:39:21,310 --> 00:39:28,030
members in community have a better or

00:39:24,040 --> 00:39:34,060
different solution altogether so this is

00:39:28,030 --> 00:39:37,350
one thing I really support like we can

00:39:34,060 --> 00:39:40,900
have our discussion on mailing lists and

00:39:37,350 --> 00:39:43,710
maybe I start a thread like as you

00:39:40,900 --> 00:39:50,290
mentioned a different approach for

00:39:43,710 --> 00:40:04,330
taking look at this problem anything

00:39:50,290 --> 00:40:06,520
else this test was only on one database

00:40:04,330 --> 00:40:09,450
server right now the demo which what I

00:40:06,520 --> 00:40:09,450
was showing

00:40:15,380 --> 00:40:23,980
okay thank you

00:40:17,970 --> 00:40:23,980

YouTube URL: https://www.youtube.com/watch?v=a6fe-WaJvyo


