Title: Preview: Parent Selection Strategy Plugins, How They Work, and What They Mean
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: Content Delivery
Description: 
	Preview: Parent Selection Strategy Plugins, How They Work, and What They Mean for Apache Traffic Control
Robert O Butts

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Parent Selection Strategies are an upcoming feature of Apache Traffic Server. We will discuss how they work, and why they're valuable to Apache Traffic Control. We will also preview Parent Selection Strategy Plugins, a feature currently being developed, what they may look like, how a plugin may be written by ATS users and ATC administrators, and the additional benefits Strategy Plugins offer to Apache Traffic Control deployments.

Robert O Butts is a software engineer who works on Apache Traffic Control for the Comcast CDN. Rob is a Principal Engineer at Comcast with a Masters in Computer Science focusing on Parallel Processing. Rob has worked on nearly every component of the Apache Traffic Control CDN. He is the primary author of Traffic Monitor, was the initial primary author of the Golang Traffic Ops, and wrote the Grove HTTP Caching Proxy. He is currently working on extending Apache Traffic Server for Traffic Control's needs.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,840 --> 00:00:29,679
so

00:00:26,640 --> 00:00:31,519
again my name is rob butz uh uh rob at

00:00:29,679 --> 00:00:35,840
apache.org

00:00:31,519 --> 00:00:38,800
and what i'm going to show off is a

00:00:35,840 --> 00:00:41,200
is a preview for something that i'm

00:00:38,800 --> 00:00:43,040
working on we're working on

00:00:41,200 --> 00:00:45,120
in apache traffic server and i want to

00:00:43,040 --> 00:00:48,559
make a lot of disclaimers here

00:00:45,120 --> 00:00:50,559
this is a very much a preview um

00:00:48,559 --> 00:00:51,600
we're still working on exactly what it's

00:00:50,559 --> 00:00:53,600
going to look like

00:00:51,600 --> 00:00:54,640
we do not have consensus with the apache

00:00:53,600 --> 00:00:56,640
traffic server

00:00:54,640 --> 00:00:58,719
team yet i still need to put it on the

00:00:56,640 --> 00:00:59,920
mailing list i've made a draft pr i've

00:00:58,719 --> 00:01:02,800
gotten input but

00:00:59,920 --> 00:01:04,239
this is very much a preview it will

00:01:02,800 --> 00:01:07,439
almost certainly look different

00:01:04,239 --> 00:01:08,400
um we we do i think have consensus to

00:01:07,439 --> 00:01:12,080
add

00:01:08,400 --> 00:01:14,400
uh next top strategy plugins to to ats

00:01:12,080 --> 00:01:16,159
in some way i think there's a general

00:01:14,400 --> 00:01:18,240
broad consensus that it's something we

00:01:16,159 --> 00:01:21,920
want it's a direction we want to move in

00:01:18,240 --> 00:01:23,200
um and to begin with john rushford who's

00:01:21,920 --> 00:01:26,080
also on our team at

00:01:23,200 --> 00:01:27,360
comcast on the cdn on traffic control

00:01:26,080 --> 00:01:30,079
john rushford

00:01:27,360 --> 00:01:31,119
may implemented next top strategies in

00:01:30,079 --> 00:01:33,200
core of ats

00:01:31,119 --> 00:01:35,600
and he actually presented that last year

00:01:33,200 --> 00:01:37,119
if anyone was at last year's apache con

00:01:35,600 --> 00:01:39,280
and so i'm going to go over that real

00:01:37,119 --> 00:01:41,360
quick and then i'm going to talk about

00:01:39,280 --> 00:01:43,200
the the prototype that i have and i'm

00:01:41,360 --> 00:01:45,520
going to show off the prototype i have

00:01:43,200 --> 00:01:47,680
and there's kind of two goals here um

00:01:45,520 --> 00:01:49,200
the the first one is for users if you're

00:01:47,680 --> 00:01:50,799
a user of ats

00:01:49,200 --> 00:01:52,560
is to just show you and you know if you

00:01:50,799 --> 00:01:54,000
like to get excited about new things

00:01:52,560 --> 00:01:55,840
this is something that's hopefully new

00:01:54,000 --> 00:01:58,000
and coming and i think exciting

00:01:55,840 --> 00:01:59,600
um and then the other half of that is if

00:01:58,000 --> 00:02:00,079
you're a developer on apache traffic

00:01:59,600 --> 00:02:02,560
server

00:02:00,079 --> 00:02:03,200
um on the project i'm looking to get

00:02:02,560 --> 00:02:06,399
feedback

00:02:03,200 --> 00:02:09,520
of you know is this good what what

00:02:06,399 --> 00:02:11,840
do we want to see changed um what

00:02:09,520 --> 00:02:13,599
you know how is this how we want to do

00:02:11,840 --> 00:02:14,080
it or or what other ways would we want

00:02:13,599 --> 00:02:17,599
to

00:02:14,080 --> 00:02:18,319
want to do that so um to review real

00:02:17,599 --> 00:02:20,720
quick again

00:02:18,319 --> 00:02:22,879
john rushford did this about a year ago

00:02:20,720 --> 00:02:24,879
and and showed it off at

00:02:22,879 --> 00:02:27,280
apache con but for those who weren't

00:02:24,879 --> 00:02:28,480
there parent strategies so if you're

00:02:27,280 --> 00:02:30,560
familiar with

00:02:28,480 --> 00:02:32,640
parent selection that first line i have

00:02:30,560 --> 00:02:34,560
here um that's what

00:02:32,640 --> 00:02:36,000
actually that's i'm sorry that's a map

00:02:34,560 --> 00:02:38,239
um if you're familiar

00:02:36,000 --> 00:02:39,760
with the apache traffic server config

00:02:38,239 --> 00:02:41,680
your the parent.config

00:02:39,760 --> 00:02:43,040
line is how you do parent selection and

00:02:41,680 --> 00:02:44,959
you can do things like

00:02:43,040 --> 00:02:46,959
multiple parents and failover and that

00:02:44,959 --> 00:02:48,959
kind of thing strategies give you

00:02:46,959 --> 00:02:50,000
much more power around that the

00:02:48,959 --> 00:02:52,080
configuration for

00:02:50,000 --> 00:02:53,680
next stop strategies as you can see here

00:02:52,080 --> 00:02:55,440
it's also yaml

00:02:53,680 --> 00:02:57,280
apache traffic server is moving towards

00:02:55,440 --> 00:02:59,040
yaml configs and so that does that

00:02:57,280 --> 00:03:01,440
but it also adds much more powerful

00:02:59,040 --> 00:03:03,760
config so again just reviewing

00:03:01,440 --> 00:03:05,120
real quick the way it looks um you see

00:03:03,760 --> 00:03:08,560
this top remap line

00:03:05,120 --> 00:03:11,120
um map map

00:03:08,560 --> 00:03:12,159
a to b um and then you have an at

00:03:11,120 --> 00:03:14,080
strategy

00:03:12,159 --> 00:03:15,519
to say this is the strategy i want this

00:03:14,080 --> 00:03:17,599
remap line to use

00:03:15,519 --> 00:03:18,959
um it's similar to the app plugin it's

00:03:17,599 --> 00:03:21,599
just at strategy

00:03:18,959 --> 00:03:22,400
and then in your strategies.yaml file

00:03:21,599 --> 00:03:24,799
you have

00:03:22,400 --> 00:03:27,040
the name of that strategy the policy

00:03:24,799 --> 00:03:28,400
consistent hash or round robin or we

00:03:27,040 --> 00:03:30,239
might add more in the future

00:03:28,400 --> 00:03:32,480
again these are familiar if you're if

00:03:30,239 --> 00:03:35,760
you're familiar with parent.config

00:03:32,480 --> 00:03:38,959
um that the hash key um can be

00:03:35,760 --> 00:03:42,000
an arbitrary cash key if you

00:03:38,959 --> 00:03:43,599
if you want to say don't do the the

00:03:42,000 --> 00:03:45,680
traditional hash

00:03:43,599 --> 00:03:47,040
i want to use a custom hash you know

00:03:45,680 --> 00:03:49,760
traditionally the the

00:03:47,040 --> 00:03:50,400
origin fqdn or the parent fqdns is

00:03:49,760 --> 00:03:52,720
hashed

00:03:50,400 --> 00:03:54,080
um here you can add a custom one go

00:03:52,720 --> 00:03:55,920
direct again

00:03:54,080 --> 00:03:59,120
straight out of parent.config whether to

00:03:55,920 --> 00:04:02,000
go direct or to use the parent proxy

00:03:59,120 --> 00:04:03,439
scheme failover um so failover again

00:04:02,000 --> 00:04:06,879
we've got a little bit more

00:04:03,439 --> 00:04:08,400
power here and and this code in ats core

00:04:06,879 --> 00:04:10,560
gives us much more power

00:04:08,400 --> 00:04:12,319
to add more things in the future but

00:04:10,560 --> 00:04:15,599
ring mode exhaustion

00:04:12,319 --> 00:04:16,479
um is saying exhaust all the primary

00:04:15,599 --> 00:04:18,479
parents before i

00:04:16,479 --> 00:04:20,560
fail over to a secondary one and then

00:04:18,479 --> 00:04:22,560
response codes is letting us choose

00:04:20,560 --> 00:04:24,720
the exact response codes that i want to

00:04:22,560 --> 00:04:26,000
consider a failure so failover on these

00:04:24,720 --> 00:04:27,040
response codes

00:04:26,000 --> 00:04:29,520
again if you're familiar with

00:04:27,040 --> 00:04:32,400
parent.config right now um

00:04:29,520 --> 00:04:33,759
404s will fail over but they won't mark

00:04:32,400 --> 00:04:37,440
the parent down

00:04:33,759 --> 00:04:41,199
um and five xxs i believe

00:04:37,440 --> 00:04:42,880
503 502 maybe 500 will will

00:04:41,199 --> 00:04:45,440
mug the parent down and fail over so

00:04:42,880 --> 00:04:47,199
this gives you more control over that

00:04:45,440 --> 00:04:49,280
and then you have this list of hosts i i

00:04:47,199 --> 00:04:50,720
kind of omitted the groups for space

00:04:49,280 --> 00:04:52,639
but you can have groups of hosts and

00:04:50,720 --> 00:04:53,520
then you have hosts in the strategy

00:04:52,639 --> 00:04:55,520
config

00:04:53,520 --> 00:04:56,639
and here's a host here's a protocol

00:04:55,520 --> 00:04:58,639
there's a port it's

00:04:56,639 --> 00:04:59,759
fairly straightforward so again this is

00:04:58,639 --> 00:05:01,440
in ats

00:04:59,759 --> 00:05:03,520
core it will be in the next version of

00:05:01,440 --> 00:05:05,280
ats

00:05:03,520 --> 00:05:07,759
so what i'd like to show is again a

00:05:05,280 --> 00:05:09,440
preview again all the disclaimers

00:05:07,759 --> 00:05:11,360
this is very much subject to change

00:05:09,440 --> 00:05:13,199
subject to consensus

00:05:11,360 --> 00:05:15,440
it might not even happen i think there's

00:05:13,199 --> 00:05:16,880
a i hope there's a strong chance it'll

00:05:15,440 --> 00:05:19,360
happen but

00:05:16,880 --> 00:05:20,560
very much a preview but this is the the

00:05:19,360 --> 00:05:22,560
prototype i have

00:05:20,560 --> 00:05:24,320
right now and i'll show in github in a

00:05:22,560 --> 00:05:25,520
minute if anyone wants to see the draft

00:05:24,320 --> 00:05:29,440
pr

00:05:25,520 --> 00:05:31,840
these are um these are the the core

00:05:29,440 --> 00:05:35,360
things that we add so we're adding a

00:05:31,840 --> 00:05:37,440
remap plugin function uh

00:05:35,360 --> 00:05:39,600
here we have ts remap in its strategy

00:05:37,440 --> 00:05:40,320
and so to make a parent selection plugin

00:05:39,600 --> 00:05:43,440
what you'll do

00:05:40,320 --> 00:05:44,240
is you'll uh you'll make a remap plugin

00:05:43,440 --> 00:05:47,680
in ats

00:05:44,240 --> 00:05:49,919
and you will call this function or i'm

00:05:47,680 --> 00:05:53,600
sorry you will implement this function

00:05:49,919 --> 00:05:55,039
and it takes this strategy class that is

00:05:53,600 --> 00:05:57,600
a pure virtual

00:05:55,039 --> 00:05:58,960
class in in c plus plus which is to say

00:05:57,600 --> 00:06:00,479
it's an interface it's what other

00:05:58,960 --> 00:06:02,080
languages call it interface

00:06:00,479 --> 00:06:04,080
so your plugin will implement that

00:06:02,080 --> 00:06:05,280
interface and then it will pass the

00:06:04,080 --> 00:06:07,440
pointer ref

00:06:05,280 --> 00:06:08,880
to the class that you made implementing

00:06:07,440 --> 00:06:10,560
that and then that has

00:06:08,880 --> 00:06:12,400
these functions and these are what we

00:06:10,560 --> 00:06:14,800
need for parent selection

00:06:12,400 --> 00:06:15,600
um and these are what order currently in

00:06:14,800 --> 00:06:17,440
core

00:06:15,600 --> 00:06:18,880
that again we could add new strategies

00:06:17,440 --> 00:06:20,160
in core today but then you have to have

00:06:18,880 --> 00:06:22,000
a new ats version

00:06:20,160 --> 00:06:23,600
you know i don't need to make the

00:06:22,000 --> 00:06:25,039
argument for plugins in general that's

00:06:23,600 --> 00:06:27,120
that's why we want plugins

00:06:25,039 --> 00:06:28,160
um so the functions here are find next

00:06:27,120 --> 00:06:30,160
hop

00:06:28,160 --> 00:06:31,199
core will call this on the strategy you

00:06:30,160 --> 00:06:34,479
register

00:06:31,199 --> 00:06:36,639
for remaps that that use that strategy

00:06:34,479 --> 00:06:38,160
in your plugin anytime they need a

00:06:36,639 --> 00:06:39,759
parent they'll say they'll call find

00:06:38,160 --> 00:06:41,280
next hop and again this is essentially

00:06:39,759 --> 00:06:44,560
being called in core today

00:06:41,280 --> 00:06:46,400
this just exposes it um to the plugin

00:06:44,560 --> 00:06:48,639
then we have mug next hop so when

00:06:46,400 --> 00:06:50,800
there's a failure

00:06:48,639 --> 00:06:53,120
of the core again we'll call mark next

00:06:50,800 --> 00:06:56,400
hop on the strategy that you registered

00:06:53,120 --> 00:06:59,280
um and it takes a a

00:06:56,400 --> 00:07:00,960
heb ts hdbtxn again if you're familiar

00:06:59,280 --> 00:07:02,400
with remap plugins and ats this is

00:07:00,960 --> 00:07:05,440
pretty standard

00:07:02,400 --> 00:07:07,520
and then you will it will call this on

00:07:05,440 --> 00:07:09,919
your plugin and then your plugin

00:07:07,520 --> 00:07:11,199
will do whatever it needs to do to say

00:07:09,919 --> 00:07:14,080
ats is telling me

00:07:11,199 --> 00:07:17,199
to mark this parent down from now on for

00:07:14,080 --> 00:07:20,479
anybody else calling this um

00:07:17,199 --> 00:07:22,160
next top exists is is again corey will

00:07:20,479 --> 00:07:24,080
call this and this is your plugin your

00:07:22,160 --> 00:07:26,639
strategy saying

00:07:24,080 --> 00:07:28,080
does another hop exist or am i out if i

00:07:26,639 --> 00:07:31,520
run out of parents

00:07:28,080 --> 00:07:34,639
um response is retriable um

00:07:31,520 --> 00:07:36,639
is again going back to that that failure

00:07:34,639 --> 00:07:38,319
code what in parent.config today is a

00:07:36,639 --> 00:07:41,840
400 or a 503

00:07:38,319 --> 00:07:45,280
um response is retriable is is

00:07:41,840 --> 00:07:46,639
is saying do i need to retry this and

00:07:45,280 --> 00:07:49,199
you get the status code

00:07:46,639 --> 00:07:50,639
and again we could add more things in

00:07:49,199 --> 00:07:52,400
the future

00:07:50,639 --> 00:07:53,840
this is again very much a prototype if

00:07:52,400 --> 00:07:54,560
somebody else says i want this other

00:07:53,840 --> 00:07:56,400
data

00:07:54,560 --> 00:07:58,080
to determine if it's retriable but right

00:07:56,400 --> 00:07:59,440
now you get the status code and how many

00:07:58,080 --> 00:08:01,039
attempts have already been tried

00:07:59,440 --> 00:08:02,879
so for example your plugin you might

00:08:01,039 --> 00:08:06,240
want to say well i want to try

00:08:02,879 --> 00:08:07,919
five 503s but only two four or fours

00:08:06,240 --> 00:08:09,360
you could do this in in the function in

00:08:07,919 --> 00:08:11,120
your plugin

00:08:09,360 --> 00:08:13,280
on failure mark parent down again you

00:08:11,120 --> 00:08:15,199
get the response code we could add more

00:08:13,280 --> 00:08:16,639
things and we can discuss that

00:08:15,199 --> 00:08:18,479
but right now you get the code and you

00:08:16,639 --> 00:08:20,720
can say well i want to mark down 404s or

00:08:18,479 --> 00:08:22,319
i want to mark down 503s

00:08:20,720 --> 00:08:24,560
um and then go direct and parent is

00:08:22,319 --> 00:08:26,960
proxy or again straight out of

00:08:24,560 --> 00:08:29,120
parent.config what's in strategies today

00:08:26,960 --> 00:08:30,800
go direct do you go direct to the origin

00:08:29,120 --> 00:08:34,080
or do you use the proxy and

00:08:30,800 --> 00:08:35,839
parent is proxy is is my parent a proxy

00:08:34,080 --> 00:08:39,519
or is it is it an origin

00:08:35,839 --> 00:08:42,719
um so in order to

00:08:39,519 --> 00:08:45,120
to do this the we need additional it

00:08:42,719 --> 00:08:46,480
in order to have strategies and to make

00:08:45,120 --> 00:08:49,920
those decisions

00:08:46,480 --> 00:08:53,440
we need these additional functions in uh

00:08:49,920 --> 00:08:54,959
in ats in the api um

00:08:53,440 --> 00:08:57,040
and so this is again this is just the

00:08:54,959 --> 00:08:58,399
list straight out of my draft pr

00:08:57,040 --> 00:09:00,240
we might need to add more things in the

00:08:58,399 --> 00:09:02,320
future but these are the things that are

00:09:00,240 --> 00:09:04,399
strictly required to re-implement

00:09:02,320 --> 00:09:06,240
the strategies we have today round robin

00:09:04,399 --> 00:09:09,760
and consistent hash in core

00:09:06,240 --> 00:09:10,640
as plug-ins um so we have the the host

00:09:09,760 --> 00:09:12,080
status reason

00:09:10,640 --> 00:09:15,120
the parent result type these are just

00:09:12,080 --> 00:09:17,680
enums um the next top selection strategy

00:09:15,120 --> 00:09:20,160
again that's that interface

00:09:17,680 --> 00:09:20,880
parent result it's another thing in core

00:09:20,160 --> 00:09:23,440
um

00:09:20,880 --> 00:09:25,600
so so we're actually creating a new

00:09:23,440 --> 00:09:26,320
struct that has all the same values as

00:09:25,600 --> 00:09:28,240
core

00:09:26,320 --> 00:09:29,440
because we don't we don't let you

00:09:28,240 --> 00:09:32,399
manipulate directly

00:09:29,440 --> 00:09:34,480
direct core objects in plugins in ats so

00:09:32,399 --> 00:09:37,839
this gives you an object with the data

00:09:34,480 --> 00:09:38,399
that you need parent result string is

00:09:37,839 --> 00:09:41,600
just

00:09:38,399 --> 00:09:44,959
it's another enum string

00:09:41,600 --> 00:09:48,240
hostname is self so this has to do with

00:09:44,959 --> 00:09:49,440
markdown when you start ats of of

00:09:48,240 --> 00:09:51,680
localhost

00:09:49,440 --> 00:09:53,120
so we have the ats has a self-detect

00:09:51,680 --> 00:09:55,279
thing and

00:09:53,120 --> 00:09:56,560
in order to re-implement that with your

00:09:55,279 --> 00:09:58,560
strategy plug-ins

00:09:56,560 --> 00:10:00,320
you need the ability to get is the

00:09:58,560 --> 00:10:02,320
hostname of this

00:10:00,320 --> 00:10:04,959
this thing self you know is it localhost

00:10:02,320 --> 00:10:07,120
is it one one two seven etcetera

00:10:04,959 --> 00:10:09,040
um and then host status get host data

00:10:07,120 --> 00:10:12,240
set those also have to do with

00:10:09,040 --> 00:10:15,360
getting the host status information from

00:10:12,240 --> 00:10:18,000
core that you'll need in your plugin

00:10:15,360 --> 00:10:19,600
um parent result get again that's that

00:10:18,000 --> 00:10:21,200
parent result object up there

00:10:19,600 --> 00:10:23,279
that's something that you'll need in

00:10:21,200 --> 00:10:26,399
order to make those strategy

00:10:23,279 --> 00:10:29,200
next top decisions um and then

00:10:26,399 --> 00:10:30,800
uh parent results set same thing you

00:10:29,200 --> 00:10:31,680
you'll often need to change some of that

00:10:30,800 --> 00:10:34,240
data

00:10:31,680 --> 00:10:35,680
we could have made these like a dozen

00:10:34,240 --> 00:10:36,880
functions but there's a parent result

00:10:35,680 --> 00:10:40,480
object in core

00:10:36,880 --> 00:10:42,320
so i just exposed it as that whole thing

00:10:40,480 --> 00:10:44,399
and typically you'll need to set you

00:10:42,320 --> 00:10:46,240
know a good number of them

00:10:44,399 --> 00:10:48,640
and then again the host status enum

00:10:46,240 --> 00:10:52,560
itself um

00:10:48,640 --> 00:10:56,480
so so what i'm gonna do now is

00:10:52,560 --> 00:10:58,240
show the plugin that i have um

00:10:56,480 --> 00:11:00,800
and and the plugin interface that i've

00:10:58,240 --> 00:11:00,800
added

00:11:00,880 --> 00:11:06,000
so let's pull up github and i and the

00:11:04,240 --> 00:11:09,760
reason i want to do this

00:11:06,000 --> 00:11:10,640
is also to show the draft pr so that if

00:11:09,760 --> 00:11:12,160
anybody

00:11:10,640 --> 00:11:14,399
here is is interested in you know

00:11:12,160 --> 00:11:16,480
commenting on it well here here's the

00:11:14,399 --> 00:11:19,680
link here's the url

00:11:16,480 --> 00:11:20,880
so let's pull this up

00:11:19,680 --> 00:11:23,360
and i also want to show a little bit

00:11:20,880 --> 00:11:24,720
about how to make how you will make a

00:11:23,360 --> 00:11:27,360
strategy plug-in

00:11:24,720 --> 00:11:28,480
with again the current pr assuming it

00:11:27,360 --> 00:11:31,680
doesn't change

00:11:28,480 --> 00:11:34,640
um no i would also say again again

00:11:31,680 --> 00:11:36,880
all the disclaimers but i would expect

00:11:34,640 --> 00:11:39,200
any kind of strategy

00:11:36,880 --> 00:11:40,079
plug-in next top strategy plug-in

00:11:39,200 --> 00:11:42,079
interface

00:11:40,079 --> 00:11:43,279
that we add to the api even if it

00:11:42,079 --> 00:11:46,640
doesn't look like this

00:11:43,279 --> 00:11:49,519
i would expect it to be similar um

00:11:46,640 --> 00:11:51,360
because you need the same data so we

00:11:49,519 --> 00:11:52,880
might not expose these exact functions

00:11:51,360 --> 00:11:54,160
but we'll need a way to get

00:11:52,880 --> 00:11:56,320
whether the hostname is itself we'll

00:11:54,160 --> 00:12:00,399
need to get the status and

00:11:56,320 --> 00:12:03,760
going back to the interface that

00:12:00,399 --> 00:12:05,920
this adds uh this this

00:12:03,760 --> 00:12:08,000
ts next hop selection strategy again it

00:12:05,920 --> 00:12:11,200
might not look exactly like this

00:12:08,000 --> 00:12:12,160
but we the core will need to let your

00:12:11,200 --> 00:12:14,000
plug-in

00:12:12,160 --> 00:12:15,600
find the next hop core will need to give

00:12:14,000 --> 00:12:16,399
your plug-in a way to mark the next hop

00:12:15,600 --> 00:12:18,320
so

00:12:16,399 --> 00:12:20,320
it might not look exactly like this but

00:12:18,320 --> 00:12:23,519
the functions should be pretty similar

00:12:20,320 --> 00:12:24,880
um i i would hope because again the data

00:12:23,519 --> 00:12:26,079
is the same and you simply need to do

00:12:24,880 --> 00:12:28,720
the same things

00:12:26,079 --> 00:12:30,160
um so this is this is the pr that i have

00:12:28,720 --> 00:12:31,279
again if anyone wants to look at it or

00:12:30,160 --> 00:12:34,000
comment on it on

00:12:31,279 --> 00:12:35,120
apache traffic server github.com apache

00:12:34,000 --> 00:12:38,959
traffic server

00:12:35,120 --> 00:12:39,600
um pull 7023 and so let's look at a

00:12:38,959 --> 00:12:44,079
little bit

00:12:39,600 --> 00:12:44,079
how it looks to actually make a plug-in

00:12:44,320 --> 00:12:48,320
so you again we add all of these

00:12:47,680 --> 00:12:50,839
functions

00:12:48,320 --> 00:12:54,320
to the api so these are the functions we

00:12:50,839 --> 00:12:54,320
have and then

00:12:58,240 --> 00:13:01,519
let's see here is so here are some of

00:13:00,320 --> 00:13:04,560
the functions

00:13:01,519 --> 00:13:09,440
some of the classes that the pr

00:13:04,560 --> 00:13:09,440
adds to plugins experimental um

00:13:10,720 --> 00:13:21,839
and if i can find the plugin file

00:13:26,959 --> 00:13:35,839
so so here's the plug-in file

00:13:30,320 --> 00:13:35,839
um let's pull this out

00:13:36,639 --> 00:13:40,079
so again if you were to write a strategy

00:13:39,040 --> 00:13:42,160
plug-in and

00:13:40,079 --> 00:13:43,920
if this is what it happened to look like

00:13:42,160 --> 00:13:46,399
in in the final iteration

00:13:43,920 --> 00:13:48,000
in apache traffic server this is a

00:13:46,399 --> 00:13:49,600
standard remap plugin if you're

00:13:48,000 --> 00:13:51,120
familiar with three map plugins i can

00:13:49,600 --> 00:13:54,639
make this a little bigger

00:13:51,120 --> 00:13:58,399
um so you'll you'll have

00:13:54,639 --> 00:13:58,880
a to start with you'll have your remap

00:13:58,399 --> 00:14:02,160
init

00:13:58,880 --> 00:14:05,120
and so what this remap init is doing is

00:14:02,160 --> 00:14:06,880
it is well it's actually doing very

00:14:05,120 --> 00:14:08,880
little it's checking the version

00:14:06,880 --> 00:14:10,399
um and then you have your remap new

00:14:08,880 --> 00:14:13,199
instance

00:14:10,399 --> 00:14:14,560
and this is actually creating a strategy

00:14:13,199 --> 00:14:15,839
so this is our function this is a

00:14:14,560 --> 00:14:17,360
function in the plugin that we've

00:14:15,839 --> 00:14:20,079
written our remap plugin

00:14:17,360 --> 00:14:22,000
to make a strategy from a file and we

00:14:20,079 --> 00:14:24,560
get the config file path

00:14:22,000 --> 00:14:25,440
from the plugin argument and and create

00:14:24,560 --> 00:14:26,399
the strategy

00:14:25,440 --> 00:14:28,480
and then we're going to put that

00:14:26,399 --> 00:14:31,760
strategy in our ih pointer

00:14:28,480 --> 00:14:33,519
in ats which is again if you're familiar

00:14:31,760 --> 00:14:35,760
with re map plugins this is stored and

00:14:33,519 --> 00:14:38,320
given to your plugin and future calls

00:14:35,760 --> 00:14:39,920
so so you'll make a remap again

00:14:38,320 --> 00:14:41,600
imagining you're making a

00:14:39,920 --> 00:14:43,680
next top strategy plugin for whatever

00:14:41,600 --> 00:14:44,079
you need to do your next top decisions

00:14:43,680 --> 00:14:45,680
um

00:14:44,079 --> 00:14:47,360
you're you're making a new plug-in

00:14:45,680 --> 00:14:47,839
you'll implement this function remap new

00:14:47,360 --> 00:14:51,040
instance

00:14:47,839 --> 00:14:52,480
and you'll you'll create your strategy

00:14:51,040 --> 00:14:54,720
this is creating it from a file but you

00:14:52,480 --> 00:14:56,560
don't have to right in theory you could

00:14:54,720 --> 00:14:58,240
create it from i don't know something

00:14:56,560 --> 00:14:59,839
over the network or who knows what or

00:14:58,240 --> 00:15:01,680
maybe it's hard-coded maybe you don't

00:14:59,839 --> 00:15:04,480
have configuration your plugin is just

00:15:01,680 --> 00:15:06,639
completely static whatever so you make

00:15:04,480 --> 00:15:10,639
that you put it in the ih pointer

00:15:06,639 --> 00:15:11,360
and then this function is one of the new

00:15:10,639 --> 00:15:14,880
functions

00:15:11,360 --> 00:15:14,880
that that this pr adds

00:15:15,199 --> 00:15:18,800
and again this function how it takes the

00:15:17,920 --> 00:15:22,079
pointer graph

00:15:18,800 --> 00:15:25,440
and so your your plugin will then

00:15:22,079 --> 00:15:26,880
put the ih pointer in the strategy

00:15:25,440 --> 00:15:28,480
pointer graph that was passed

00:15:26,880 --> 00:15:30,639
and that's really all this does so this

00:15:28,480 --> 00:15:31,600
is called anytime we need to initialize

00:15:30,639 --> 00:15:33,360
a new strategy

00:15:31,600 --> 00:15:36,000
strategies are being reloaded in core

00:15:33,360 --> 00:15:37,360
for some reason um

00:15:36,000 --> 00:15:39,360
and you could actually create the

00:15:37,360 --> 00:15:40,000
strategy here but you might as well be

00:15:39,360 --> 00:15:41,680
more efficient

00:15:40,000 --> 00:15:43,120
and created on initialization of the

00:15:41,680 --> 00:15:44,959
remap plugin

00:15:43,120 --> 00:15:46,959
unless you needed to do it dynamically

00:15:44,959 --> 00:15:49,040
for for whatever reason

00:15:46,959 --> 00:15:51,440
and then after that that's pretty much

00:15:49,040 --> 00:15:53,759
it so this strategy plug-in again

00:15:51,440 --> 00:15:55,440
corey will call this um and you can see

00:15:53,759 --> 00:15:57,279
where in my pr if you really want to see

00:15:55,440 --> 00:15:58,959
the details of the code

00:15:57,279 --> 00:16:00,320
core will call this when it needs to

00:15:58,959 --> 00:16:01,839
initialize strategies

00:16:00,320 --> 00:16:03,920
and you pass it to the pointer graph and

00:16:01,839 --> 00:16:06,000
then from then on core

00:16:03,920 --> 00:16:07,600
has the strategy that you created and it

00:16:06,000 --> 00:16:09,440
will call those functions

00:16:07,600 --> 00:16:11,920
again going back to what this interface

00:16:09,440 --> 00:16:11,920
looks like

00:16:12,800 --> 00:16:16,560
core we'll call find next top mark next

00:16:15,040 --> 00:16:19,279
top next hop exists

00:16:16,560 --> 00:16:19,600
on this strategy interface that again

00:16:19,279 --> 00:16:22,560
you

00:16:19,600 --> 00:16:23,920
implemented that that c plus pure

00:16:22,560 --> 00:16:26,079
virtual class

00:16:23,920 --> 00:16:28,000
um and so we've got to do you can see

00:16:26,079 --> 00:16:32,000
our dewey map isn't doing anything

00:16:28,000 --> 00:16:35,600
um delete instance is deleting the

00:16:32,000 --> 00:16:39,360
uh config path um that's that's it

00:16:35,600 --> 00:16:40,720
so so the the complex part again you can

00:16:39,360 --> 00:16:42,079
see this is pretty simple

00:16:40,720 --> 00:16:44,000
the complex part is actually

00:16:42,079 --> 00:16:46,320
implementing this

00:16:44,000 --> 00:16:48,839
um implementing this interface and so if

00:16:46,320 --> 00:17:05,839
we go look at that

00:16:48,839 --> 00:17:05,839
um let's see

00:17:12,319 --> 00:17:18,400
so there's some health status helpers

00:17:13,919 --> 00:17:21,199
here's our plug-in

00:17:18,400 --> 00:17:21,199
i can find it

00:17:22,000 --> 00:17:25,839
there's our plug-in make file again

00:17:23,760 --> 00:17:29,200
standard plug-in stuff here we go

00:17:25,839 --> 00:17:32,960
so this is a consistent hash dot h

00:17:29,200 --> 00:17:34,960
um and you can see here

00:17:32,960 --> 00:17:36,640
we actually made two levels of classes

00:17:34,960 --> 00:17:37,280
and and i was just following what core

00:17:36,640 --> 00:17:40,960
does

00:17:37,280 --> 00:17:41,840
um this public class is implementing the

00:17:40,960 --> 00:17:44,080
interface

00:17:41,840 --> 00:17:46,160
um and it's also a little bit virtual

00:17:44,080 --> 00:17:48,880
and then this is our final class

00:17:46,160 --> 00:17:51,520
that you can see here has the functions

00:17:48,880 --> 00:17:55,919
we need find next hop

00:17:51,520 --> 00:17:59,200
and so if we actually look at this uh

00:17:55,919 --> 00:18:01,360
the cc file um and again this is

00:17:59,200 --> 00:18:02,720
it's almost copy and pasted from core

00:18:01,360 --> 00:18:05,600
just as an example

00:18:02,720 --> 00:18:06,480
um of consistent hash um and so you

00:18:05,600 --> 00:18:08,000
could have

00:18:06,480 --> 00:18:09,919
again theoretically any next top

00:18:08,000 --> 00:18:10,880
strategy you like but this is consistent

00:18:09,919 --> 00:18:12,640
hash so we see

00:18:10,880 --> 00:18:14,320
the c hash lookup again that's right out

00:18:12,640 --> 00:18:17,440
of core

00:18:14,320 --> 00:18:19,760
we have a constructor destructor in it

00:18:17,440 --> 00:18:21,760
and let's look at so these are all

00:18:19,760 --> 00:18:23,520
internal functions git hash key

00:18:21,760 --> 00:18:24,880
so here's find next top so this is one

00:18:23,520 --> 00:18:26,080
of the interface functions that had to

00:18:24,880 --> 00:18:28,559
be implemented

00:18:26,080 --> 00:18:29,840
and again it's a lot of code but this is

00:18:28,559 --> 00:18:32,320
finding the next hop

00:18:29,840 --> 00:18:33,039
and setting it in the transaction

00:18:32,320 --> 00:18:36,160
pointer

00:18:33,039 --> 00:18:37,280
and so if we look here we have an error

00:18:36,160 --> 00:18:40,799
function

00:18:37,280 --> 00:18:43,840
um and

00:18:40,799 --> 00:18:43,840
down at the bottom

00:18:45,520 --> 00:18:49,440
well here's so you can see it's setting

00:18:47,600 --> 00:18:50,320
some of these result values we got this

00:18:49,440 --> 00:18:51,840
result

00:18:50,320 --> 00:18:53,919
from the plug-in function that's another

00:18:51,840 --> 00:18:57,600
function that was added and then

00:18:53,919 --> 00:19:01,679
at the end we'll call parent result set

00:18:57,600 --> 00:19:03,120
um so that's that's essentially it for

00:19:01,679 --> 00:19:05,760
the code again if you really

00:19:03,120 --> 00:19:08,080
want to see all the details uh the pr is

00:19:05,760 --> 00:19:08,080
here

00:19:09,200 --> 00:19:13,200
but that's that's how you make a plug-in

00:19:11,039 --> 00:19:16,000
is you you fulfill that interface

00:19:13,200 --> 00:19:17,200
and you've got those new functions that

00:19:16,000 --> 00:19:19,840
are necessary

00:19:17,200 --> 00:19:21,200
um for the data you need parent result

00:19:19,840 --> 00:19:22,720
get hostname itself

00:19:21,200 --> 00:19:25,120
in addition you've got all the other

00:19:22,720 --> 00:19:27,120
functions that already exist that were

00:19:25,120 --> 00:19:28,160
that we are using a lot of them in in

00:19:27,120 --> 00:19:30,640
this draft

00:19:28,160 --> 00:19:32,080
um and you you have access to any remap

00:19:30,640 --> 00:19:34,000
api function you need

00:19:32,080 --> 00:19:35,440
to get data to to make those parent

00:19:34,000 --> 00:19:38,559
strategy decisions

00:19:35,440 --> 00:19:39,520
um so i'll go ahead and show the plugin

00:19:38,559 --> 00:19:43,840
in action now

00:19:39,520 --> 00:19:43,840
so here's the virtual machine um

00:19:44,880 --> 00:19:47,919
and let's look at

00:19:48,600 --> 00:19:55,520
remap.config so again this

00:19:52,160 --> 00:19:56,640
is up to this point is what strategies

00:19:55,520 --> 00:19:58,400
look like today in

00:19:56,640 --> 00:20:00,000
core you specify your strategy name you

00:19:58,400 --> 00:20:02,960
have a strategies.yaml

00:20:00,000 --> 00:20:04,320
um and then here's our plugin so this is

00:20:02,960 --> 00:20:07,200
a standard remap plugin

00:20:04,320 --> 00:20:08,159
and like i mentioned before you pass the

00:20:07,200 --> 00:20:10,159
config

00:20:08,159 --> 00:20:12,000
to this plugin again this is the plugin

00:20:10,159 --> 00:20:14,000
i created um you don't

00:20:12,000 --> 00:20:15,280
have to have your plugin that looks

00:20:14,000 --> 00:20:17,120
exactly like this you could

00:20:15,280 --> 00:20:21,840
you could have different params you know

00:20:17,120 --> 00:20:21,840
it's a standard remap plugin um

00:20:22,320 --> 00:20:28,159
so let's look at so again you can see my

00:20:26,240 --> 00:20:30,120
my plugin here is taking the param

00:20:28,159 --> 00:20:31,520
and this is my program

00:20:30,120 --> 00:20:34,080
pluginstrategies.yaml

00:20:31,520 --> 00:20:35,280
this is a traditional strategies.yaml

00:20:34,080 --> 00:20:38,000
again if you were

00:20:35,280 --> 00:20:38,799
at the john's talk last year you would

00:20:38,000 --> 00:20:40,159
have seen this

00:20:38,799 --> 00:20:42,080
um this is what i just showed in the

00:20:40,159 --> 00:20:45,679
presentation slide

00:20:42,080 --> 00:20:46,559
our plugin strategies looks almost

00:20:45,679 --> 00:20:48,640
exactly like this

00:20:46,559 --> 00:20:50,799
and again bearing in mind this is a

00:20:48,640 --> 00:20:51,760
plug-in it's completely all of this is

00:20:50,799 --> 00:20:53,919
in the plug-in

00:20:51,760 --> 00:20:56,000
so it doesn't have to be ammo you know

00:20:53,919 --> 00:20:57,039
you could use a csv file you could use

00:20:56,000 --> 00:20:59,919
json it's

00:20:57,039 --> 00:21:00,240
this is not in core this is our plug-in

00:20:59,919 --> 00:21:03,600
is

00:21:00,240 --> 00:21:04,960
loading this file and it could be

00:21:03,600 --> 00:21:06,720
look like anything you want it to look

00:21:04,960 --> 00:21:07,919
like i just happened to make a plugin

00:21:06,720 --> 00:21:12,000
that emulated

00:21:07,919 --> 00:21:12,000
the current core consistent hash

00:21:12,400 --> 00:21:19,919
and that's pretty much it so um

00:21:16,320 --> 00:21:23,120
there's our strategy you saw the remap

00:21:19,919 --> 00:21:24,559
we can look at the remap again um and

00:21:23,120 --> 00:21:27,600
we're going to map requests to

00:21:24,559 --> 00:21:30,240
example.com to that strategy

00:21:27,600 --> 00:21:32,000
again parent.config goes away so that

00:21:30,240 --> 00:21:32,960
that already went away with strategies

00:21:32,000 --> 00:21:35,039
in general

00:21:32,960 --> 00:21:36,240
the plug-in continues that parent.config

00:21:35,039 --> 00:21:39,280
is no longer a factor

00:21:36,240 --> 00:21:40,080
for this remap um it's entirely using

00:21:39,280 --> 00:21:42,240
strategies

00:21:40,080 --> 00:21:44,240
it's specifically using our plug-in that

00:21:42,240 --> 00:21:45,120
will create the strategy that we

00:21:44,240 --> 00:21:48,240
specified

00:21:45,120 --> 00:21:50,480
um and we can see a curl

00:21:48,240 --> 00:21:51,600
will work so this is a curl through the

00:21:50,480 --> 00:21:54,240
strap

00:21:51,600 --> 00:21:54,799
this is just returning a 200 this is

00:21:54,240 --> 00:21:56,799
actually

00:21:54,799 --> 00:21:59,120
my fake origin i've just got a little

00:21:56,799 --> 00:22:00,880
fake origin here that returns whatever

00:21:59,120 --> 00:22:04,400
you put in the slash as the code i can

00:22:00,880 --> 00:22:12,480
get a 503 i can get a 201

00:22:04,400 --> 00:22:14,080
so it's not actually example.com

00:22:12,480 --> 00:22:15,840
which again if we look at our strategies

00:22:14,080 --> 00:22:20,320
we can see i

00:22:15,840 --> 00:22:22,720
told this uh remap to use this strategy

00:22:20,320 --> 00:22:25,039
and my hosts our local host

00:22:22,720 --> 00:22:26,799
actually the second one is example but

00:22:25,039 --> 00:22:30,080
we were hitting localhost for that

00:22:26,799 --> 00:22:33,520
um and getting again

00:22:30,080 --> 00:22:33,520
on port forty thousand

00:22:34,320 --> 00:22:39,840
if you wanna see that that's the origin

00:22:37,600 --> 00:22:41,200
we were just hitting it's on localhost

00:22:39,840 --> 00:22:45,200
um

00:22:41,200 --> 00:22:48,320
i think that's really about it um that's

00:22:45,200 --> 00:22:49,280
that's all the details uh does anyone

00:22:48,320 --> 00:22:53,200
have

00:22:49,280 --> 00:22:53,200
questions um opinions

00:22:53,280 --> 00:22:57,200
again i'm definitely interested in the

00:22:55,200 --> 00:23:00,960
ats community if anyone

00:22:57,200 --> 00:23:02,000
from ats is here and has comments or or

00:23:00,960 --> 00:23:04,880
you know thinks we should do it a

00:23:02,000 --> 00:23:04,880
different way um

00:23:06,159 --> 00:23:10,480
i don't see any questions yet rob i

00:23:08,720 --> 00:23:13,360
don't think we can give it a

00:23:10,480 --> 00:23:13,360
good 15 minute

00:23:15,840 --> 00:23:19,520
yeah i don't know if we have very many

00:23:17,840 --> 00:23:23,039
people from

00:23:19,520 --> 00:23:26,320
the ats community i don't see anybody in

00:23:23,039 --> 00:23:26,320
in our list of attendees

00:23:27,600 --> 00:23:31,919
um but yeah again we're so we're doing

00:23:29,919 --> 00:23:33,760
this for apache traffic control

00:23:31,919 --> 00:23:35,280
um i'm i'm primarily a developer on

00:23:33,760 --> 00:23:38,559
apache traffic control

00:23:35,280 --> 00:23:40,559
uh and this is something we need um and

00:23:38,559 --> 00:23:42,240
we need it specifically on the comcast

00:23:40,559 --> 00:23:45,279
cdn

00:23:42,240 --> 00:23:49,760
so so this gives us the ability to do

00:23:45,279 --> 00:23:51,200
anything we need to do with parentage

00:23:49,760 --> 00:23:52,960
in a plug-in that we don't have to have

00:23:51,200 --> 00:23:55,760
you know a new release of ats

00:23:52,960 --> 00:23:58,159
core to have um and i could think of

00:23:55,760 --> 00:23:59,360
countless examples so so one example is

00:23:58,159 --> 00:24:01,679
the codes

00:23:59,360 --> 00:24:05,440
we would like smarter markdown around

00:24:01,679 --> 00:24:10,320
different http codes of for example

00:24:05,440 --> 00:24:12,799
maybe maybe a 404 we want to

00:24:10,320 --> 00:24:14,000
get say 100 requests and work down right

00:24:12,799 --> 00:24:16,640
we want to be really

00:24:14,000 --> 00:24:17,520
really liberal with that but with a 503

00:24:16,640 --> 00:24:19,600
we want

00:24:17,520 --> 00:24:21,520
two requests and it marks down but maybe

00:24:19,600 --> 00:24:23,039
maybe a 503 gets two requests and marks

00:24:21,520 --> 00:24:24,799
down but a 502

00:24:23,039 --> 00:24:26,480
will try 10 times because that's a bad

00:24:24,799 --> 00:24:28,960
gateway that's telling us

00:24:26,480 --> 00:24:30,960
the upstream is probably another cdn

00:24:28,960 --> 00:24:34,080
rather than a native origin somebody's

00:24:30,960 --> 00:24:35,760
somebody is chaining cdn's and so well

00:24:34,080 --> 00:24:38,000
we try that a few more times

00:24:35,760 --> 00:24:38,799
um so strategies give us the ability to

00:24:38,000 --> 00:24:41,200
do that

00:24:38,799 --> 00:24:42,799
um they theoretically give us external

00:24:41,200 --> 00:24:46,159
health so that's another thing

00:24:42,799 --> 00:24:48,240
um ats can't really add um the traffic

00:24:46,159 --> 00:24:49,760
control health monitor right that has

00:24:48,240 --> 00:24:51,440
nothing to do with ats

00:24:49,760 --> 00:24:53,440
but we can make a traffic control

00:24:51,440 --> 00:24:54,400
plug-in that will go to our health

00:24:53,440 --> 00:24:56,400
monitor and say

00:24:54,400 --> 00:24:57,440
this origin is unhealthy don't even try

00:24:56,400 --> 00:25:00,080
it once we

00:24:57,440 --> 00:25:00,640
we already know it's unhealthy or this

00:25:00,080 --> 00:25:03,679
mid

00:25:00,640 --> 00:25:05,679
this this parent proxy um we happen to

00:25:03,679 --> 00:25:08,640
know this mid is immediately unhealthy

00:25:05,679 --> 00:25:10,240
don't even try it once um so there's

00:25:08,640 --> 00:25:13,360
innumerable things um

00:25:10,240 --> 00:25:15,840
that we could do with this uh with with

00:25:13,360 --> 00:25:15,840
plugins

00:25:25,520 --> 00:25:30,480
well i don't see any questions um so

00:25:28,480 --> 00:25:34,080
thank you rob i really appreciate it

00:25:30,480 --> 00:25:35,279
and i'm sorry for making you end up with

00:25:34,080 --> 00:25:38,480
back-to-back sessions

00:25:35,279 --> 00:25:41,840
but that's fine uh

00:25:38,480 --> 00:25:45,440
again i i'm rob at apache.org

00:25:41,840 --> 00:25:46,880
if you can still see my screen uh

00:25:45,440 --> 00:25:48,480
yeah if anyone has any questions don't

00:25:46,880 --> 00:25:49,840
hesitate to reach out to me reach out to

00:25:48,480 --> 00:25:51,279
the ats community

00:25:49,840 --> 00:25:53,600
again i'd like to add all the

00:25:51,279 --> 00:25:54,960
disclaimers to this this is not

00:25:53,600 --> 00:25:57,919
something that it does not have

00:25:54,960 --> 00:26:00,960
consensus yet i have a draft example

00:25:57,919 --> 00:26:02,559
and i will i will be shortly um going to

00:26:00,960 --> 00:26:02,960
the apache traffic server mailing list

00:26:02,559 --> 00:26:04,960
to

00:26:02,960 --> 00:26:06,640
to get that consensus there's a very

00:26:04,960 --> 00:26:08,880
good chance this will change

00:26:06,640 --> 00:26:10,799
um we're very hopeful that we will see

00:26:08,880 --> 00:26:13,039
it i think we have consensus to do

00:26:10,799 --> 00:26:15,039
strategy plug-ins in some way or another

00:26:13,039 --> 00:26:16,960
it's just a question of what the ats

00:26:15,039 --> 00:26:17,279
community wants to see them look like

00:26:16,960 --> 00:26:22,159
like

00:26:17,279 --> 00:26:22,159
what exactly the new api hooks look like

00:26:22,240 --> 00:26:39,840
so yeah thanks everyone cool all right

00:26:24,400 --> 00:26:39,840
thanks rob see ya

00:26:43,360 --> 00:26:45,440

YouTube URL: https://www.youtube.com/watch?v=onbUwjeQu04


