Title: Uplink redundancy for Apache Traffic Control CDN Caches
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: Content Delivery
Description: 
	Uplink redundancy for Apache Traffic Control CDN Caches
Sergey Dremin

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Traffic Control CDN Caches at Comcast have been configured with a simple LAG with LACP connection to a single uplink router with a single IP. That created maintance costs for the CDN caused by router maintanence, and impacted overall reliability during router outages. To solve these problems an update to ATC now enables configuring connections to multiple uplink routers. Virtual IPs can now be assigned to the cache and advertised to the rest of the network via BGP peering allowing further flexibility with content routing.

Sergey is a Sr Engineer on the CDN team at Comcast.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,119 --> 00:00:30,240
talking about dual homing

00:00:26,240 --> 00:00:33,440
uh for the um

00:00:30,240 --> 00:00:37,040
apache traffic control uh cdn

00:00:33,440 --> 00:00:37,520
um so basically on agenda we're gonna

00:00:37,040 --> 00:00:40,640
have

00:00:37,520 --> 00:00:43,360
um just some historical background of uh

00:00:40,640 --> 00:00:46,320
how deployments have been happening

00:00:43,360 --> 00:00:48,320
at comcast for this um some requirements

00:00:46,320 --> 00:00:51,840
for this project

00:00:48,320 --> 00:00:55,199
overview of uh what we decided to do

00:00:51,840 --> 00:00:55,199
some detailed design

00:00:55,520 --> 00:01:02,960
and a little demo um

00:00:59,680 --> 00:01:08,080
yeah so um

00:01:02,960 --> 00:01:11,119
historically um about 10 years

00:01:08,080 --> 00:01:15,119
deploying apache traffic control caches

00:01:11,119 --> 00:01:18,400
at comcast they went into data centers

00:01:15,119 --> 00:01:21,840
where they connected to a single

00:01:18,400 --> 00:01:25,200
switch or router

00:01:21,840 --> 00:01:28,799
and they used link aggregation

00:01:25,200 --> 00:01:31,520
um so that worked out rather well

00:01:28,799 --> 00:01:32,320
those data center routers didn't need to

00:01:31,520 --> 00:01:36,350
be rebooted

00:01:32,320 --> 00:01:37,759
very often so there were no issues with

00:01:36,350 --> 00:01:41,280
[Music]

00:01:37,759 --> 00:01:42,720
with that what and

00:01:41,280 --> 00:01:46,240
ended up happening though is that we

00:01:42,720 --> 00:01:46,240
started deploying um

00:01:46,320 --> 00:01:49,040
caches to

00:01:49,840 --> 00:01:55,600
sites what we call hub sites right

00:01:53,439 --> 00:01:57,840
and within those hub sites this is where

00:01:55,600 --> 00:02:00,479
you would have your residential

00:01:57,840 --> 00:02:01,920
um internet uh connections and cable

00:02:00,479 --> 00:02:04,560
modem determination systems

00:02:01,920 --> 00:02:05,200
and so forth uh within those hub sites

00:02:04,560 --> 00:02:08,000
we had

00:02:05,200 --> 00:02:09,119
uh two rer's uh which we called

00:02:08,000 --> 00:02:11,920
residential

00:02:09,119 --> 00:02:11,920
u-ring routers

00:02:12,160 --> 00:02:18,879
and we would connect to one of them

00:02:16,319 --> 00:02:19,840
again with two cables and using lag so

00:02:18,879 --> 00:02:23,520
that pervaded

00:02:19,840 --> 00:02:25,920
that created a bit of a problem because

00:02:23,520 --> 00:02:27,040
most of the equipment within a hub site

00:02:25,920 --> 00:02:30,160
was uh

00:02:27,040 --> 00:02:31,599
already dual homes so network

00:02:30,160 --> 00:02:36,080
engineering would go ahead

00:02:31,599 --> 00:02:38,239
and take these rers um

00:02:36,080 --> 00:02:39,920
out for maintenance um whenever they

00:02:38,239 --> 00:02:43,599
felt like it because

00:02:39,920 --> 00:02:44,160
um the customers that would be connected

00:02:43,599 --> 00:02:46,800
to them

00:02:44,160 --> 00:02:48,000
would not see any interruptions for us

00:02:46,800 --> 00:02:51,120
though it created

00:02:48,000 --> 00:02:54,160
uh an issue since uh we would have

00:02:51,120 --> 00:02:56,400
um even so the cdn does have

00:02:54,160 --> 00:02:57,519
uh you know health monitors and stuff

00:02:56,400 --> 00:03:00,000
like that so we can direct

00:02:57,519 --> 00:03:02,000
clients away from uh caches that are

00:03:00,000 --> 00:03:02,560
about to go down but we also had sticky

00:03:02,000 --> 00:03:05,680
clients

00:03:02,560 --> 00:03:08,159
which would stick to a particular server

00:03:05,680 --> 00:03:09,680
and there's no way to basically remove

00:03:08,159 --> 00:03:13,200
them so when

00:03:09,680 --> 00:03:15,920
finally that router would go

00:03:13,200 --> 00:03:17,599
away the clients would see errors and

00:03:15,920 --> 00:03:20,640
have to reconnect

00:03:17,599 --> 00:03:24,400
so how do we solve this problem you know

00:03:20,640 --> 00:03:26,000
since we do have uh two uh of these rers

00:03:24,400 --> 00:03:27,200
per hub side you know we thought why not

00:03:26,000 --> 00:03:32,239
connect to

00:03:27,200 --> 00:03:35,680
both of them right um yeah

00:03:32,239 --> 00:03:37,920
so the objective here is was to

00:03:35,680 --> 00:03:38,959
simply increase availability uh reduce

00:03:37,920 --> 00:03:42,799
maintenance

00:03:38,959 --> 00:03:43,440
um leverage internet address flexibility

00:03:42,799 --> 00:03:46,799
so this is

00:03:43,440 --> 00:03:49,599
talking about um having your own your

00:03:46,799 --> 00:03:51,920
virtual ip addresses um an easy

00:03:49,599 --> 00:03:54,720
installation of new servers

00:03:51,920 --> 00:03:56,640
um obviously there are some drawbacks to

00:03:54,720 --> 00:04:00,159
making changes in this area which

00:03:56,640 --> 00:04:02,159
would make the control plane

00:04:00,159 --> 00:04:04,640
more complex and you can have some

00:04:02,159 --> 00:04:08,319
harder debug situations obviously

00:04:04,640 --> 00:04:09,599
um we looked at several technologies to

00:04:08,319 --> 00:04:12,879
accomplish this

00:04:09,599 --> 00:04:16,400
um namely um bgp pairing

00:04:12,879 --> 00:04:18,959
um multi-route link multi-router link

00:04:16,400 --> 00:04:24,560
aggregation iron lag

00:04:18,959 --> 00:04:24,560
and also just simple active passive

00:04:26,840 --> 00:04:30,000
failover there are some other

00:04:28,639 --> 00:04:33,120
requirements

00:04:30,000 --> 00:04:34,960
that we wanted to keep in mind

00:04:33,120 --> 00:04:36,160
we wanted to make sure obviously that we

00:04:34,960 --> 00:04:37,840
terminate

00:04:36,160 --> 00:04:39,530
our connections on two different network

00:04:37,840 --> 00:04:40,880
nodes

00:04:39,530 --> 00:04:43,919
[Music]

00:04:40,880 --> 00:04:45,280
we wanted to make sure that um you don't

00:04:43,919 --> 00:04:47,520
require any additional

00:04:45,280 --> 00:04:49,520
state protocol or control plane between

00:04:47,520 --> 00:04:52,240
the network nodes

00:04:49,520 --> 00:04:53,919
um we wanted to make sure that the cache

00:04:52,240 --> 00:04:57,600
is able to utilize both links

00:04:53,919 --> 00:05:00,240
at the same time um that link failure is

00:04:57,600 --> 00:05:03,440
transparent to clients

00:05:00,240 --> 00:05:05,120
that um

00:05:03,440 --> 00:05:06,639
caches should not exceed half the

00:05:05,120 --> 00:05:08,000
available bandwidth that basically it's

00:05:06,639 --> 00:05:10,320
a planning assumption

00:05:08,000 --> 00:05:11,759
right this basically means if you have

00:05:10,320 --> 00:05:14,960
um

00:05:11,759 --> 00:05:18,000
uh 2x of a certain bandwidth

00:05:14,960 --> 00:05:20,320
then if half of that bandwidth goes away

00:05:18,000 --> 00:05:21,360
because of your uplink failure you want

00:05:20,320 --> 00:05:24,000
to

00:05:21,360 --> 00:05:24,880
make sure that all that your traffic is

00:05:24,000 --> 00:05:28,160
able to

00:05:24,880 --> 00:05:32,080
fit within the other link

00:05:28,160 --> 00:05:32,800
um and uh basically we wanted to make

00:05:32,080 --> 00:05:35,680
sure that

00:05:32,800 --> 00:05:36,720
um all of this happened automatically a

00:05:35,680 --> 00:05:38,639
link failover

00:05:36,720 --> 00:05:41,199
would not require any human intervention

00:05:38,639 --> 00:05:41,199
on our site

00:05:44,960 --> 00:05:51,840
so um we have

00:05:48,400 --> 00:05:52,560
decided to use bgp pairing between the

00:05:51,840 --> 00:05:56,240
cache

00:05:52,560 --> 00:05:58,720
and the routers on both of the

00:05:56,240 --> 00:06:02,479
interfaces to accomplish this

00:05:58,720 --> 00:06:02,479
um in

00:06:02,560 --> 00:06:07,360
basically that means that the the cache

00:06:05,440 --> 00:06:08,639
server is able to tell the router hey i

00:06:07,360 --> 00:06:12,479
have

00:06:08,639 --> 00:06:14,639
a v4 or v6 vip available on this link

00:06:12,479 --> 00:06:16,080
and any client that wants to get to that

00:06:14,639 --> 00:06:19,120
ip address

00:06:16,080 --> 00:06:22,400
um can can come and access

00:06:19,120 --> 00:06:25,120
me on that link um

00:06:22,400 --> 00:06:26,319
so that that kind of has a built-in

00:06:25,120 --> 00:06:28,960
health oracle right if

00:06:26,319 --> 00:06:29,759
if the link goes away the bgp session

00:06:28,960 --> 00:06:32,960
breaks

00:06:29,759 --> 00:06:34,080
um and you can get to the to that link

00:06:32,960 --> 00:06:36,160
um

00:06:34,080 --> 00:06:38,560
there's no no no no clients are getting

00:06:36,160 --> 00:06:42,880
uh forwarded to the link anymore

00:06:38,560 --> 00:06:46,160
um so

00:06:42,880 --> 00:06:47,120
um yeah the other uh kind of solution

00:06:46,160 --> 00:06:49,680
was to

00:06:47,120 --> 00:06:50,479
require the network uh to send us a

00:06:49,680 --> 00:06:53,759
default route

00:06:50,479 --> 00:06:54,880
a preferred route sometimes one of the

00:06:53,759 --> 00:06:56,560
links is preferred

00:06:54,880 --> 00:06:58,160
sometimes both the links are preferred

00:06:56,560 --> 00:07:00,639
but we

00:06:58,160 --> 00:07:03,840
required a default route and more more

00:07:00,639 --> 00:07:03,840
on that later

00:07:04,800 --> 00:07:11,520
uh from a networking standpoint

00:07:08,240 --> 00:07:14,400
um so basically at the bottom here

00:07:11,520 --> 00:07:15,680
we see our autonomous system which is um

00:07:14,400 --> 00:07:17,599
of

00:07:15,680 --> 00:07:19,520
65 000 range which is your private

00:07:17,599 --> 00:07:23,280
autonomous system range

00:07:19,520 --> 00:07:25,919
um that's um

00:07:23,280 --> 00:07:26,800
the the cache is sitting up here has two

00:07:25,919 --> 00:07:29,280
connections

00:07:26,800 --> 00:07:31,840
um 100 gig each but i mean any kind of

00:07:29,280 --> 00:07:31,840
speed would work

00:07:32,000 --> 00:07:38,720
the connections are protected

00:07:35,440 --> 00:07:41,199
with bfd which is uh

00:07:38,720 --> 00:07:42,080
basically a protocol that allows bgp to

00:07:41,199 --> 00:07:46,400
detect

00:07:42,080 --> 00:07:46,400
link down conditions faster

00:07:48,639 --> 00:07:52,000
both of the connections are set up with

00:07:51,360 --> 00:07:55,280
their own

00:07:52,000 --> 00:07:56,800
local ip addresses

00:07:55,280 --> 00:07:58,639
in addition to that you can see this

00:07:56,800 --> 00:08:02,240
arrow this is basically indicating

00:07:58,639 --> 00:08:04,319
uh that we're um sending the cache is

00:08:02,240 --> 00:08:07,280
sending out the unicast

00:08:04,319 --> 00:08:09,680
vip address um and also receiving the

00:08:07,280 --> 00:08:12,960
default route that i just talked about

00:08:09,680 --> 00:08:15,280
from the rest of the network um

00:08:12,960 --> 00:08:17,360
so these are the our two routers that

00:08:15,280 --> 00:08:20,639
we're directly connected to

00:08:17,360 --> 00:08:22,560
um and they're propagating this uh vip

00:08:20,639 --> 00:08:24,960
to the rest of the internet which is

00:08:22,560 --> 00:08:27,840
basically represented here by these

00:08:24,960 --> 00:08:28,560
aggregating routers and the backbone

00:08:27,840 --> 00:08:31,280
internet

00:08:28,560 --> 00:08:33,599
uh iphone that uh the comcast then go

00:08:31,280 --> 00:08:33,599
for that

00:08:37,360 --> 00:08:43,519
um like i said we have

00:08:40,959 --> 00:08:44,399
each cache um within conquest right now

00:08:43,519 --> 00:08:46,640
comes with

00:08:44,399 --> 00:08:49,120
100 gig interfaces uh connected to the

00:08:46,640 --> 00:08:51,120
two different routers

00:08:49,120 --> 00:08:52,640
both of the connections are configured

00:08:51,120 --> 00:08:56,480
with their own ips

00:08:52,640 --> 00:08:59,680
and that's basically required to build

00:08:56,480 --> 00:09:02,640
the bgp um relationship

00:08:59,680 --> 00:09:04,560
between the cache and the router but

00:09:02,640 --> 00:09:06,880
it's also useful for

00:09:04,560 --> 00:09:08,000
maintenance right you you want to be

00:09:06,880 --> 00:09:10,240
able to get into the router

00:09:08,000 --> 00:09:12,959
without uh into the into the server

00:09:10,240 --> 00:09:16,480
without having the bgp stuff already up

00:09:12,959 --> 00:09:17,760
and um you want to basically be able to

00:09:16,480 --> 00:09:19,519
stay out of

00:09:17,760 --> 00:09:22,560
management connections and so forth and

00:09:19,519 --> 00:09:25,920
just use some way to get into the server

00:09:22,560 --> 00:09:28,480
um if you don't fix something or set

00:09:25,920 --> 00:09:32,399
something up

00:09:28,480 --> 00:09:36,080
um both links are configured with

00:09:32,399 --> 00:09:39,440
lacp even so

00:09:36,080 --> 00:09:42,880
there's only one link within

00:09:39,440 --> 00:09:47,440
each lacp bundle

00:09:42,880 --> 00:09:47,440
and that basically allows for

00:09:48,240 --> 00:09:53,120
software linked down detection by the os

00:09:51,120 --> 00:09:56,320
using the acp protocol

00:09:53,120 --> 00:09:58,959
um instead of having to rely on the

00:09:56,320 --> 00:10:00,880
um nick driver to determine that we have

00:09:58,959 --> 00:10:02,050
the ocp to tell us that the link goes

00:10:00,880 --> 00:10:03,120
down

00:10:02,050 --> 00:10:06,320
[Music]

00:10:03,120 --> 00:10:10,079
and um we have

00:10:06,320 --> 00:10:12,160
um loopback um

00:10:10,079 --> 00:10:13,200
so this and then we have virtual ip

00:10:12,160 --> 00:10:15,440
addresses

00:10:13,200 --> 00:10:16,320
assigned to loop back um to the loopback

00:10:15,440 --> 00:10:20,399
interface

00:10:16,320 --> 00:10:23,360
on the cache so that happens during

00:10:20,399 --> 00:10:24,320
net install which by the way uses um a

00:10:23,360 --> 00:10:27,600
different

00:10:24,320 --> 00:10:27,600
open source component called

00:10:29,120 --> 00:10:34,399
tc netconfig um

00:10:32,240 --> 00:10:35,920
that there was a basically there was a

00:10:34,399 --> 00:10:38,640
presentation on this

00:10:35,920 --> 00:10:39,440
during prior apache cons if you wanted

00:10:38,640 --> 00:10:42,320
to

00:10:39,440 --> 00:10:42,320
learn more about that

00:10:44,839 --> 00:10:50,720
um so

00:10:47,040 --> 00:10:54,640
basically um we have the os

00:10:50,720 --> 00:10:57,839
booting up and uh for center seven

00:10:54,640 --> 00:10:58,560
um there's one default route that is

00:10:57,839 --> 00:11:00,480
created

00:10:58,560 --> 00:11:02,320
right and that's basically prior to all

00:11:00,480 --> 00:11:06,720
the bgp stuff

00:11:02,320 --> 00:11:10,320
um once um the bg

00:11:06,720 --> 00:11:13,519
our bird be set up

00:11:10,320 --> 00:11:14,320
and started that default route is

00:11:13,519 --> 00:11:17,519
propagated

00:11:14,320 --> 00:11:20,800
from our bgp neighbors

00:11:17,519 --> 00:11:22,640
um into basically it's received by bird

00:11:20,800 --> 00:11:24,079
and then bird propagates us into the

00:11:22,640 --> 00:11:27,600
linux uh

00:11:24,079 --> 00:11:30,880
kernel routing um then

00:11:27,600 --> 00:11:34,079
the cdn traffic monitors

00:11:30,880 --> 00:11:35,040
um are able to access the virtual ip

00:11:34,079 --> 00:11:37,279
address

00:11:35,040 --> 00:11:38,480
and establish that the cache is actually

00:11:37,279 --> 00:11:42,000
healthy

00:11:38,480 --> 00:11:47,279
um then simply the cdn traffic router

00:11:42,000 --> 00:11:50,399
is able to direct clients to this iprs

00:11:47,279 --> 00:11:56,480
so that's still the vip not the

00:11:50,399 --> 00:11:59,040
not the actual interface ip addresses

00:11:56,480 --> 00:12:00,000
um there was a further require

00:11:59,040 --> 00:12:03,120
refinement

00:12:00,000 --> 00:12:06,639
um that was needed here

00:12:03,120 --> 00:12:09,040
um due to basically us having

00:12:06,639 --> 00:12:10,480
been limited to centos 7 for now in our

00:12:09,040 --> 00:12:13,600
deployment

00:12:10,480 --> 00:12:16,000
um centos 7 is sort of

00:12:13,600 --> 00:12:17,440
counter-intuitive from a networking

00:12:16,000 --> 00:12:20,560
standpoint of view

00:12:17,440 --> 00:12:22,639
and that it's not able to adjust its

00:12:20,560 --> 00:12:24,959
routing table based on

00:12:22,639 --> 00:12:27,279
link availability it sounds strange but

00:12:24,959 --> 00:12:31,410
centos 7 will actually try to

00:12:27,279 --> 00:12:32,639
send packets to a link that's down

00:12:31,410 --> 00:12:37,600
[Music]

00:12:32,639 --> 00:12:40,079
so to fix that we have

00:12:37,600 --> 00:12:41,360
bird and bgp tell us the default

00:12:40,079 --> 00:12:42,959
interface

00:12:41,360 --> 00:12:45,440
uh to use this for the different you

00:12:42,959 --> 00:12:46,320
know the default route but even prior to

00:12:45,440 --> 00:12:49,000
that

00:12:46,320 --> 00:12:50,880
so that we don't get into um

00:12:49,000 --> 00:12:53,839
[Music]

00:12:50,880 --> 00:12:56,079
issues where um the system boots up and

00:12:53,839 --> 00:12:59,360
somehow one of the links failed

00:12:56,079 --> 00:13:02,079
um and we don't have burden bgp

00:12:59,360 --> 00:13:02,880
yet we still would like to access the

00:13:02,079 --> 00:13:06,320
system

00:13:02,880 --> 00:13:09,839
and to do that we use additional

00:13:06,320 --> 00:13:13,040
routing tables uh per interface

00:13:09,839 --> 00:13:15,360
right um it sounds like

00:13:13,040 --> 00:13:17,279
kind of networking magic but it's not so

00:13:15,360 --> 00:13:20,240
i'm gonna just give you an example

00:13:17,279 --> 00:13:20,240
of how that's done

00:13:20,880 --> 00:13:25,360
so to use these additional routing

00:13:24,160 --> 00:13:29,040
tables we have

00:13:25,360 --> 00:13:29,040
need to use additional ip rules

00:13:32,560 --> 00:13:37,680
and so here we have the ip rules are

00:13:36,320 --> 00:13:41,440
very simple

00:13:37,680 --> 00:13:41,440
um if the packet

00:13:41,920 --> 00:13:46,720
if the packet is originating from an ip

00:13:45,120 --> 00:13:49,760
address assigned to

00:13:46,720 --> 00:13:51,199
bond zero i'll look up how to route it

00:13:49,760 --> 00:13:54,320
using the bond zero

00:13:51,199 --> 00:13:57,680
routing table if it's originating from

00:13:54,320 --> 00:13:58,240
bond one look up how it's done how to do

00:13:57,680 --> 00:14:01,600
it and

00:13:58,240 --> 00:14:04,160
how to route it using the bond one

00:14:01,600 --> 00:14:05,760
routing table and the the routing tables

00:14:04,160 --> 00:14:06,480
are very simple this is basically just

00:14:05,760 --> 00:14:09,440
says

00:14:06,480 --> 00:14:10,800
hey use the default interface um and

00:14:09,440 --> 00:14:12,800
that's

00:14:10,800 --> 00:14:13,839
that's that there's nothing nothing more

00:14:12,800 --> 00:14:16,240
to it

00:14:13,839 --> 00:14:17,360
the only other kind of slightly

00:14:16,240 --> 00:14:20,560
different thing that we

00:14:17,360 --> 00:14:23,600
is going on is that uh once

00:14:20,560 --> 00:14:26,160
everything boots up and you have bird

00:14:23,600 --> 00:14:26,160
and bgp

00:14:26,399 --> 00:14:30,160
bird is receiving um that default route

00:14:28,959 --> 00:14:33,519
so this is the default

00:14:30,160 --> 00:14:36,320
route um here

00:14:33,519 --> 00:14:37,440
you can see that it's assigned to bond

00:14:36,320 --> 00:14:41,040
zero

00:14:37,440 --> 00:14:43,199
uh it's coming from protocol bird

00:14:41,040 --> 00:14:44,399
with matrix one so that means it's

00:14:43,199 --> 00:14:47,519
taking precedence

00:14:44,399 --> 00:14:51,600
and that's what's being used for the vip

00:14:47,519 --> 00:14:53,920
right once um before all of this if

00:14:51,600 --> 00:14:54,720
the vip wasn't around all this stuff was

00:14:53,920 --> 00:14:57,519
not around

00:14:54,720 --> 00:14:59,440
you would use the default route that's

00:14:57,519 --> 00:15:01,519
just

00:14:59,440 --> 00:15:04,079
created during boot up and it's greater

00:15:01,519 --> 00:15:06,560
than me move the lower matrix

00:15:04,079 --> 00:15:13,519
well that's not actually ever used uh

00:15:06,560 --> 00:15:18,000
once the system is fully operational

00:15:13,519 --> 00:15:21,040
um so this is our favorite

00:15:18,000 --> 00:15:23,360
eye chart part of the presentation

00:15:21,040 --> 00:15:25,279
um i'm just gonna go really quickly

00:15:23,360 --> 00:15:27,600
through a scenario where

00:15:25,279 --> 00:15:29,440
we have a server that's represented by

00:15:27,600 --> 00:15:31,690
these two middle columns

00:15:29,440 --> 00:15:32,880
right and

00:15:31,690 --> 00:15:34,720
[Music]

00:15:32,880 --> 00:15:36,320
it's appearing to the routers on the

00:15:34,720 --> 00:15:37,519
left side and we have some clients on

00:15:36,320 --> 00:15:40,959
the right side

00:15:37,519 --> 00:15:44,800
right in the beginning uh we have um

00:15:40,959 --> 00:15:44,800
both of the um

00:15:44,880 --> 00:15:51,680
connections are up and active um

00:15:48,560 --> 00:15:52,160
and they're basically um connect you

00:15:51,680 --> 00:15:54,880
know

00:15:52,160 --> 00:15:55,920
they're appearing with the routers the

00:15:54,880 --> 00:15:59,040
router is sending

00:15:55,920 --> 00:16:02,560
a default um

00:15:59,040 --> 00:16:07,120
route with the med the os selects

00:16:02,560 --> 00:16:07,120
the best route based on the net value

00:16:07,360 --> 00:16:11,920
and then yeah so then basically clients

00:16:10,399 --> 00:16:14,959
can

00:16:11,920 --> 00:16:15,680
request uh content from that virtual ip

00:16:14,959 --> 00:16:18,959
address

00:16:15,680 --> 00:16:22,000
um in this particular case uh

00:16:18,959 --> 00:16:25,519
so the routers are um

00:16:22,000 --> 00:16:29,360
propagating routing that

00:16:25,519 --> 00:16:31,920
request to the nearest um

00:16:29,360 --> 00:16:34,480
available vip right and in this

00:16:31,920 --> 00:16:38,079
particular case is a

00:16:34,480 --> 00:16:41,519
connection number one um then we have

00:16:38,079 --> 00:16:43,519
um apache traffic server service request

00:16:41,519 --> 00:16:44,800
uh patch traffic server then we'll use

00:16:43,519 --> 00:16:47,519
the vip to talk to

00:16:44,800 --> 00:16:48,079
an origin if you need to um and then

00:16:47,519 --> 00:16:51,839
we'll

00:16:48,079 --> 00:16:55,360
reply back to um the client

00:16:51,839 --> 00:16:56,959
the packet gets routed by um

00:16:55,360 --> 00:16:59,360
we have the default gateway right that

00:16:56,959 --> 00:17:04,240
we just got from the bgp

00:16:59,360 --> 00:17:06,959
um and back out to the client

00:17:04,240 --> 00:17:07,600
so what happens when that connection

00:17:06,959 --> 00:17:09,120
goes away

00:17:07,600 --> 00:17:11,839
you know let's say somebody tripped over

00:17:09,120 --> 00:17:16,079
the cable or that particular router

00:17:11,839 --> 00:17:16,079
is doing some sort of maintenance

00:17:16,640 --> 00:17:22,959
so when that happens um

00:17:19,919 --> 00:17:26,000
you basically

00:17:22,959 --> 00:17:29,679
the route disappears um

00:17:26,000 --> 00:17:33,039
from the route disappears from

00:17:29,679 --> 00:17:34,560
the all the network routing tables so

00:17:33,039 --> 00:17:36,160
the next time um

00:17:34,560 --> 00:17:39,520
[Music]

00:17:36,160 --> 00:17:41,919
the client is requesting content

00:17:39,520 --> 00:17:43,039
it's actually it's being propagated

00:17:41,919 --> 00:17:44,960
routed to

00:17:43,039 --> 00:17:46,799
the other connection right the other

00:17:44,960 --> 00:17:47,600
connection is still up it still has the

00:17:46,799 --> 00:17:51,360
same

00:17:47,600 --> 00:17:54,880
virtual ip address um and

00:17:51,360 --> 00:17:56,559
everything proceeds um normally

00:17:54,880 --> 00:17:59,039
there's no interruption to the client

00:17:56,559 --> 00:18:02,400
and i'll demo this um

00:17:59,039 --> 00:18:05,360
a second um

00:18:02,400 --> 00:18:07,760
yeah so let's go look how this happens

00:18:05,360 --> 00:18:07,760
um

00:18:09,120 --> 00:18:15,840
in our lab

00:18:17,679 --> 00:18:25,600
so um basically we have

00:18:21,520 --> 00:18:29,600
um i have a video on a so basically

00:18:25,600 --> 00:18:32,080
the server this is a traffic portal

00:18:29,600 --> 00:18:34,240
that's part of traffic control this is

00:18:32,080 --> 00:18:37,919
my server being

00:18:34,240 --> 00:18:41,200
basically my service page um here

00:18:37,919 --> 00:18:42,000
i'm able to create several different

00:18:41,200 --> 00:18:45,280
connections

00:18:42,000 --> 00:18:48,080
right interfaces uh

00:18:45,280 --> 00:18:48,640
our loopback interface contains the vip

00:18:48,080 --> 00:18:51,760
so

00:18:48,640 --> 00:18:54,160
this is the whip ip the gateway

00:18:51,760 --> 00:18:55,600
doesn't matter here it's not used so i

00:18:54,160 --> 00:18:58,240
just put in the same

00:18:55,600 --> 00:18:58,240
ap address

00:18:58,799 --> 00:19:02,400
the important part is that this service

00:19:01,840 --> 00:19:04,480
address

00:19:02,400 --> 00:19:06,320
is checked that's basically signifying

00:19:04,480 --> 00:19:09,200
that the

00:19:06,320 --> 00:19:10,080
health monitor will attempt to connect

00:19:09,200 --> 00:19:12,400
to this specific

00:19:10,080 --> 00:19:14,720
ip address to get the health of the

00:19:12,400 --> 00:19:14,720
cache

00:19:15,840 --> 00:19:22,720
then we have the ips for the other two

00:19:20,160 --> 00:19:22,720
connections

00:19:23,679 --> 00:19:30,799
so this is just the two bonds bonds one

00:19:27,200 --> 00:19:33,520
is a just a regular um

00:19:30,799 --> 00:19:34,799
ip address assigned to it with a gateway

00:19:33,520 --> 00:19:39,280
and default gateway

00:19:34,799 --> 00:19:43,280
same for um bond zero

00:19:39,280 --> 00:19:46,000
the important part here is that um

00:19:43,280 --> 00:19:46,799
this monitor this interface is checked

00:19:46,000 --> 00:19:49,580
so

00:19:46,799 --> 00:19:50,880
that's because of basically how

00:19:49,580 --> 00:19:54,000
[Music]

00:19:50,880 --> 00:19:55,840
packet counters work in linux um

00:19:54,000 --> 00:19:57,039
the loopback interface just doesn't

00:19:55,840 --> 00:20:00,320
count

00:19:57,039 --> 00:20:01,520
packets properly um only certain packets

00:20:00,320 --> 00:20:04,880
are counted

00:20:01,520 --> 00:20:07,840
um so we need to actually look at

00:20:04,880 --> 00:20:08,559
packet counters on the on the physical

00:20:07,840 --> 00:20:10,799
interfaces

00:20:08,559 --> 00:20:12,559
instead of the the virtual one loopback

00:20:10,799 --> 00:20:16,159
one

00:20:12,559 --> 00:20:19,039
um so um

00:20:16,159 --> 00:20:20,799
i define this information there and then

00:20:19,039 --> 00:20:24,480
i'm able to

00:20:20,799 --> 00:20:27,679
use tc net config to um install

00:20:24,480 --> 00:20:30,240
an iso that will talk to um

00:20:27,679 --> 00:20:31,679
traffic portal get all this stuff uh

00:20:30,240 --> 00:20:35,120
configure

00:20:31,679 --> 00:20:38,480
um the

00:20:35,120 --> 00:20:40,159
networking on the server then ansible

00:20:38,480 --> 00:20:41,840
will come in and install birds start it

00:20:40,159 --> 00:20:44,320
up and everything

00:20:41,840 --> 00:20:45,520
these whips should be uh should pop up

00:20:44,320 --> 00:20:47,520
basically that's available on the

00:20:45,520 --> 00:20:51,760
network

00:20:47,520 --> 00:20:55,039
um in this particular case um

00:20:51,760 --> 00:20:56,000
i have uh apache traffic server

00:20:55,039 --> 00:20:59,919
installed

00:20:56,000 --> 00:21:03,520
on my server um and it's uh

00:20:59,919 --> 00:21:05,120
you know playing a sample video um

00:21:03,520 --> 00:21:06,640
the interesting part happens when you

00:21:05,120 --> 00:21:08,880
start unplugging

00:21:06,640 --> 00:21:08,880
um

00:21:14,960 --> 00:21:18,559
so which i'll just do right now

00:21:22,640 --> 00:21:31,840
um so here i'm just going to

00:21:26,080 --> 00:21:31,840
disable one of them

00:21:32,000 --> 00:21:38,159
and hopefully the video is still place

00:21:35,280 --> 00:21:39,440
yeah so it's still playing uh let's

00:21:38,159 --> 00:21:41,840
disable the other one

00:21:39,440 --> 00:21:44,170
so that i can prove to you that i'm not

00:21:41,840 --> 00:21:47,449
it's not cash somehow

00:21:44,170 --> 00:21:47,449
[Music]

00:21:51,900 --> 00:21:55,019
[Music]

00:21:55,200 --> 00:21:59,760
another interface is disabled now so the

00:21:57,360 --> 00:22:02,240
system is completely unreachable

00:21:59,760 --> 00:22:03,600
and you can see the video is not loading

00:22:02,240 --> 00:22:04,960
so we're going to do now we're just

00:22:03,600 --> 00:22:08,000
going to

00:22:04,960 --> 00:22:11,360
come back and

00:22:08,000 --> 00:22:13,200
re-enable one of the interfaces

00:22:11,360 --> 00:22:14,799
so what will happen here is that the

00:22:13,200 --> 00:22:18,000
interface will go up

00:22:14,799 --> 00:22:20,559
um the bgp speakers

00:22:18,000 --> 00:22:22,000
on the router and on the host will start

00:22:20,559 --> 00:22:24,400
talking to each other

00:22:22,000 --> 00:22:26,559
uh the host will say hey i have a vip

00:22:24,400 --> 00:22:28,559
address it's available here

00:22:26,559 --> 00:22:30,240
um the the router will say hey i have a

00:22:28,559 --> 00:22:33,440
default route for you

00:22:30,240 --> 00:22:34,880
here you go um then once the route

00:22:33,440 --> 00:22:36,400
propagates the rest of the network you

00:22:34,880 --> 00:22:41,840
should be able to

00:22:36,400 --> 00:22:41,840
see our video again here

00:22:42,159 --> 00:22:55,840
it usually takes about 10 seconds

00:22:46,720 --> 00:22:55,840
or so

00:23:01,360 --> 00:23:05,760
alrighty yeah so that's that's how long

00:23:03,760 --> 00:23:07,760
it took for the other connection

00:23:05,760 --> 00:23:10,080
to be established in the vet to

00:23:07,760 --> 00:23:13,600
propagate through the network

00:23:10,080 --> 00:23:18,159
um and that's basically

00:23:13,600 --> 00:23:21,679
um concludes my demo um

00:23:18,159 --> 00:23:23,440
the other kind of um

00:23:21,679 --> 00:23:25,440
so the more interesting stuff is going

00:23:23,440 --> 00:23:28,480
to come in future work

00:23:25,440 --> 00:23:28,480
right so

00:23:30,000 --> 00:23:38,000
um which i'm really excited about

00:23:34,240 --> 00:23:39,760
in the future um since you can have

00:23:38,000 --> 00:23:42,080
um you know with this approach you can

00:23:39,760 --> 00:23:45,919
have not one but multiple vips

00:23:42,080 --> 00:23:48,559
assigned to multiple servers um

00:23:45,919 --> 00:23:49,919
and the servers themselves will be able

00:23:48,559 --> 00:23:53,600
to

00:23:49,919 --> 00:23:55,279
function as low bouncers right so if you

00:23:53,600 --> 00:23:57,200
the server says hey i have this ip

00:23:55,279 --> 00:24:00,240
address a certain amount of traffic

00:23:57,200 --> 00:24:03,120
gets directed to it and um

00:24:00,240 --> 00:24:04,240
if if the control plane basically

00:24:03,120 --> 00:24:06,720
decides hey

00:24:04,240 --> 00:24:07,360
uh you have a little bit too much truck

00:24:06,720 --> 00:24:09,279
um

00:24:07,360 --> 00:24:11,279
then the server can say okay well this

00:24:09,279 --> 00:24:13,120
ip is not no longer available

00:24:11,279 --> 00:24:14,400
and the clients will be seamlessly

00:24:13,120 --> 00:24:18,799
steered to

00:24:14,400 --> 00:24:20,720
other other servers um

00:24:18,799 --> 00:24:22,000
so that's just kind of like one of the

00:24:20,720 --> 00:24:24,480
applications of

00:24:22,000 --> 00:24:26,400
anycast obviously the other one would be

00:24:24,480 --> 00:24:30,080
traffic localization

00:24:26,400 --> 00:24:30,080
um so that we can

00:24:30,320 --> 00:24:33,600
refine our localization that we

00:24:32,480 --> 00:24:36,720
currently use

00:24:33,600 --> 00:24:39,120
um to to basically use uh

00:24:36,720 --> 00:24:40,559
the network right to to route packets to

00:24:39,120 --> 00:24:43,919
the nearest server

00:24:40,559 --> 00:24:48,880
um and

00:24:43,919 --> 00:24:52,640
that's all i had um let's see

00:24:48,880 --> 00:24:54,240
if you have any um questions so eric is

00:24:52,640 --> 00:24:56,080
asking

00:24:54,240 --> 00:24:57,679
uh when using two interfaces when

00:24:56,080 --> 00:24:59,120
interface bandwidth does the traffic

00:24:57,679 --> 00:25:02,159
monitor c

00:24:59,120 --> 00:25:04,799
for the host um

00:25:02,159 --> 00:25:05,440
so basically the traffic monitor will

00:25:04,799 --> 00:25:08,320
check

00:25:05,440 --> 00:25:10,159
uh packet counters for both of the

00:25:08,320 --> 00:25:13,760
interfaces

00:25:10,159 --> 00:25:15,279
um so they they're basically summed so

00:25:13,760 --> 00:25:18,480
bond zero and bond one

00:25:15,279 --> 00:25:21,600
uh sum together um and compared to

00:25:18,480 --> 00:25:24,000
um parameters that are set up for the

00:25:21,600 --> 00:25:24,000
server

00:25:24,159 --> 00:25:29,840
does that answer your question

00:25:32,400 --> 00:25:37,120
all right um

00:25:38,559 --> 00:25:42,640
so it looks like um if we got a little

00:25:40,480 --> 00:25:42,640
bit

00:25:44,240 --> 00:25:48,240
yeah you got about 12 minutes um if

00:25:46,880 --> 00:25:53,279
there's any other questions

00:25:48,240 --> 00:25:53,279
let's was i muted that whole time

00:25:55,279 --> 00:25:59,120
yeah it looks like we have about 12

00:25:57,279 --> 00:26:01,600
minutes if there's any other questions

00:25:59,120 --> 00:26:07,679
let's get them in now

00:26:01,600 --> 00:26:07,679
um otherwise sergey that was awesome

00:26:09,120 --> 00:26:14,080
i know that there's a lot of excitement

00:26:11,600 --> 00:26:17,279
around this feature

00:26:14,080 --> 00:26:20,159
and so yeah i mean

00:26:17,279 --> 00:26:21,840
um in terms of man hours that we're

00:26:20,159 --> 00:26:24,480
going to hoping to save

00:26:21,840 --> 00:26:26,159
in terms of our ops and it's hundreds of

00:26:24,480 --> 00:26:29,120
man hours basically

00:26:26,159 --> 00:26:30,159
from uh per year that's basically spent

00:26:29,120 --> 00:26:33,360
on

00:26:30,159 --> 00:26:33,360
monitoring um

00:26:34,000 --> 00:26:38,480
our uplinks we don't have to do it we

00:26:37,360 --> 00:26:40,400
don't have to worry about it that's

00:26:38,480 --> 00:26:41,600
going to spin us send us a lot of time

00:26:40,400 --> 00:26:45,679
and improve your ability

00:26:41,600 --> 00:26:45,679
so it's the main drivers here

00:26:48,559 --> 00:26:51,600
all right well i don't see any more

00:26:49,760 --> 00:26:53,600
questions coming in so um

00:26:51,600 --> 00:26:54,720
again thank you for for the presentation

00:26:53,600 --> 00:26:56,320
sergey great job

00:26:54,720 --> 00:26:59,200
and if anybody does come up with a

00:26:56,320 --> 00:27:01,440
question you can always feel free to ask

00:26:59,200 --> 00:27:07,840
in slack

00:27:01,440 --> 00:27:07,840
all right thanks see ya

00:27:26,559 --> 00:27:28,640

YouTube URL: https://www.youtube.com/watch?v=T_xXBbVnoVY


