Title: Apache Hadoop YARN: Past, Now and Future
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Big Data (Track 1)
Description: 
	Apache Hadoop YARN: Past, Now and Future
Szilard Nemeth, Sunil Govindan

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Hadoop YARN is an integral part of on-premiss solutions and it will be for the foreseeable future. We also believe, it will have an important role in the Cloud as well allowing users to move their solutions both to private and public cloud as easily as possible. For this reason, the development of YARN took a new momentum in the last year. In this talk, we will talk about the latest updates from the community which will be released in Hadoop 3.3.x/3.4.x releases: For compute acceleration devices (including GPU/FPGA, etc.), we will talk about better GPU support (including GPU hierarchy scheduling support, Nvidia-docker v2 support, etc.); YARN’s device plugin framework to allow developers easier add new compute-acceleration devices; FPGA support, etc. For scheduling related improvements, we will talk about new improvements of global scheduling in CapacityScheduler, new efforts to bring dynamic-queue-creation/absolute-resource into production, and one of the recent work, fs2cs, which allows user migrate from FairScheduler to CapacityScheduler. Apart from these, we will talk about new containerization improvements: runc support, improvements of log aggregation to better support cloud storage, etc. Audiences will get the latest development progress of Apache Hadoop YARN, and help them to make a decision when upgrading to Hadoop 3.x.

Szilard Nemeth:
Szilard Nemeth has many years of development experience mainly in Java. He joined Cloudera’s YARN team late 2017 and has been key to transfer YARN knowledge from Palo Alto to Budapest, Hungary. He has become a Hadoop committer in the Summer of 2019. Through out his career in YARN he mostly focused on Custom Resource Types, GPU support and recently he has been involved in making YARN more flexible and ready to the Cloud. He lives in Budapest but when has the time, he loves traveling.
Sunil Govindan:
Engineer Manager @Cloudera. Contributing to Apache Hadoop project since 2013 in various roles as Hadoop Contributor, Hadoop Committer, and a member Project Management Committee (PMC). Majorly working on YARN Scheduling improvements / Multiple Resource types support in YARN etc. He also served as Apache Submarine PMC member, Apache YuniKorn (incubating) PMC member.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:28,840 --> 00:00:34,480
uh

00:00:31,039 --> 00:00:38,239
yeah here we go okay good morning

00:00:34,480 --> 00:00:41,920
um um welcome to the

00:00:38,239 --> 00:00:46,079
session today this is about

00:00:41,920 --> 00:00:46,079
first plus in that future um

00:00:46,399 --> 00:00:51,360
um and i have along with me salat

00:00:49,840 --> 00:00:53,360
uh who will be joining today's session

00:00:51,360 --> 00:00:55,600
so we'll be taking you through

00:00:53,360 --> 00:00:56,960
a quick walk through about apache rupiah

00:00:55,600 --> 00:00:58,719
what is quite new about

00:00:56,960 --> 00:01:00,800
um they are and how the community is

00:00:58,719 --> 00:01:02,079
doing and where we are heading and how

00:01:00,800 --> 00:01:04,479
we are actually

00:01:02,079 --> 00:01:07,040
planning to work with today's problem

00:01:04,479 --> 00:01:10,960
and taking into a shape

00:01:07,040 --> 00:01:13,920
cool look at this garden slide yes

00:01:10,960 --> 00:01:15,840
yeah so greg how are you yeah so uh hi

00:01:13,920 --> 00:01:18,040
my name is i'm a software engineer

00:01:15,840 --> 00:01:21,520
working for cloudera since late

00:01:18,040 --> 00:01:22,720
2017. uh i'm elijah beckham the engineer

00:01:21,520 --> 00:01:24,240
i mostly worked

00:01:22,720 --> 00:01:26,080
with beckham technologies throughout my

00:01:24,240 --> 00:01:29,920
career mostly with java and

00:01:26,080 --> 00:01:32,240
some python yeah for yarn

00:01:29,920 --> 00:01:33,040
i've been involved in the resource type

00:01:32,240 --> 00:01:35,360
feature

00:01:33,040 --> 00:01:36,799
and lots of scheduler improvements and

00:01:35,360 --> 00:01:39,759
gpu

00:01:36,799 --> 00:01:41,119
feature related improvements as well and

00:01:39,759 --> 00:01:44,399
i became a committer

00:01:41,119 --> 00:01:48,240
uh last summer so that's basically it

00:01:44,399 --> 00:01:50,799
for me thanks yeah so answering

00:01:48,240 --> 00:01:51,360
i'm working cloud as engineering manager

00:01:50,799 --> 00:01:53,920
i'm

00:01:51,360 --> 00:01:54,399
i'm looking after yarn and other related

00:01:53,920 --> 00:01:57,520
compute

00:01:54,399 --> 00:01:59,439
aspects of the companies and um

00:01:57,520 --> 00:02:00,640
i'm a pasha hadoop bmc member and

00:01:59,439 --> 00:02:02,159
committee and also

00:02:00,640 --> 00:02:04,079
i'm contributing to a couple of other

00:02:02,159 --> 00:02:05,439
apache projects like submarine and also

00:02:04,079 --> 00:02:06,560
an incubating project called unicorn

00:02:05,439 --> 00:02:08,000
skeleton

00:02:06,560 --> 00:02:09,759
i'm pretty much focusing on the resource

00:02:08,000 --> 00:02:11,520
scheduling uh in general

00:02:09,759 --> 00:02:13,680
um so various features in the level

00:02:11,520 --> 00:02:14,879
schedule and uh other part of young i

00:02:13,680 --> 00:02:18,560
was looking into the past

00:02:14,879 --> 00:02:21,440
many years you can get me at

00:02:18,560 --> 00:02:22,640
uh so we'll go in that twitter or at my

00:02:21,440 --> 00:02:24,560
linkedin

00:02:22,640 --> 00:02:26,800
so uh thanks all of you again for

00:02:24,560 --> 00:02:29,200
joining um so let's look at the agenda

00:02:26,800 --> 00:02:31,120
for today

00:02:29,200 --> 00:02:32,959
so what we are trying to cover today is

00:02:31,120 --> 00:02:34,560
like a basic introduction to yarn um

00:02:32,959 --> 00:02:36,879
just a quick summary many of you guys

00:02:34,560 --> 00:02:38,560
may available may not body on

00:02:36,879 --> 00:02:40,400
but i would like to give a small has a

00:02:38,560 --> 00:02:42,239
couple of slides on that yarn

00:02:40,400 --> 00:02:44,160
and also i would like to introduce to uh

00:02:42,239 --> 00:02:46,160
what we have done in the past and how

00:02:44,160 --> 00:02:48,720
our release lines are looking

00:02:46,160 --> 00:02:50,720
and also a quick couple quick overview

00:02:48,720 --> 00:02:52,239
about how the community is doing

00:02:50,720 --> 00:02:53,840
uh and from there we will take you

00:02:52,239 --> 00:02:56,400
through the current state of the

00:02:53,840 --> 00:02:57,040
union of the young by looking into the

00:02:56,400 --> 00:02:59,760
various

00:02:57,040 --> 00:03:01,760
new releases and the features and

00:02:59,760 --> 00:03:04,720
towards the end we want to touch upon

00:03:01,760 --> 00:03:05,760
how the road map and future lies ahead

00:03:04,720 --> 00:03:07,040
of us so

00:03:05,760 --> 00:03:09,280
that's pretty much what we want to cover

00:03:07,040 --> 00:03:12,640
today um so let's do that

00:03:09,280 --> 00:03:16,239
let's go let's get right so

00:03:12,640 --> 00:03:19,280
cool so go view part of the

00:03:16,239 --> 00:03:21,120
yarn so let's look into in channel to

00:03:19,280 --> 00:03:23,519
the in their compute ecosystem

00:03:21,120 --> 00:03:26,000
um so today uh as you see the most of

00:03:23,519 --> 00:03:27,120
the data are actually in the hdfs right

00:03:26,000 --> 00:03:28,799
in the data centers

00:03:27,120 --> 00:03:30,640
and also we have many of the data

00:03:28,799 --> 00:03:32,400
actually in the private public cloud

00:03:30,640 --> 00:03:35,840
storages also such as s3

00:03:32,400 --> 00:03:36,319
or abfs or any other cloud solution so

00:03:35,840 --> 00:03:39,120
the

00:03:36,319 --> 00:03:39,840
the data is pretty much there uh and it

00:03:39,120 --> 00:03:42,560
may request

00:03:39,840 --> 00:03:44,879
need to be pulled down or pushed up it's

00:03:42,560 --> 00:03:46,080
basically depending on how your use case

00:03:44,879 --> 00:03:48,000
are gonna look like

00:03:46,080 --> 00:03:49,920
now if you look at the compute side of

00:03:48,000 --> 00:03:52,319
the world right you have hadoop yarn

00:03:49,920 --> 00:03:54,000
which actually can run in uh on-prem and

00:03:52,319 --> 00:03:55,680
in the data centers and it can also run

00:03:54,000 --> 00:03:57,200
in on cloud like for example you get an

00:03:55,680 --> 00:03:58,319
ec2 and you will be able to spin up your

00:03:57,200 --> 00:04:00,159
own cluster there

00:03:58,319 --> 00:04:03,040
and then tap that to any of the public

00:04:00,159 --> 00:04:06,000
cloud uh storages or even your hdfs

00:04:03,040 --> 00:04:07,599
in if it is nonprofit so this how uh the

00:04:06,000 --> 00:04:08,239
compute and the storage you just find a

00:04:07,599 --> 00:04:09,680
position

00:04:08,239 --> 00:04:11,200
and let's look at uh some of the

00:04:09,680 --> 00:04:12,640
historical apps which is running right

00:04:11,200 --> 00:04:14,959
for example

00:04:12,640 --> 00:04:14,959
mr

00:04:21,680 --> 00:04:26,000
and most of the deployments are of that

00:04:23,440 --> 00:04:26,560
sort but as we see in the recent past

00:04:26,000 --> 00:04:28,880
also right

00:04:26,560 --> 00:04:30,800
most of these workloads are run it is

00:04:28,880 --> 00:04:32,880
very difficult to

00:04:30,800 --> 00:04:35,919
solve the noise scenario problem or to

00:04:32,880 --> 00:04:39,360
get better resource isolation or to get

00:04:35,919 --> 00:04:41,120
much more um slas and all the stuff like

00:04:39,360 --> 00:04:42,479
that so that is where a docker kind of

00:04:41,120 --> 00:04:46,320
deployment always helps

00:04:42,479 --> 00:04:48,160
to have the better um isolation and

00:04:46,320 --> 00:04:50,080
all the related advantages of the docker

00:04:48,160 --> 00:04:51,360
right so docker is now supported in

00:04:50,080 --> 00:04:53,199
yarn pretty much from the past many

00:04:51,360 --> 00:04:54,880
years it over the time

00:04:53,199 --> 00:04:56,479
it's got stabilized and more and more

00:04:54,880 --> 00:04:57,919
features we are adding and you would be

00:04:56,479 --> 00:05:00,080
looking into seeing some of them in the

00:04:57,919 --> 00:05:02,160
later time now on above broker like ei

00:05:00,080 --> 00:05:04,400
we definitely can run this kind of

00:05:02,160 --> 00:05:05,919
long-running services uh a bit of like

00:05:04,400 --> 00:05:08,080
for example high on an led

00:05:05,919 --> 00:05:09,759
or spark long running session they can

00:05:08,080 --> 00:05:10,479
actually now effectively run on top of

00:05:09,759 --> 00:05:12,720
docker

00:05:10,479 --> 00:05:13,600
as an 80 service which is basically on

00:05:12,720 --> 00:05:16,160
uh one of the

00:05:13,600 --> 00:05:17,280
you know another offering and um so if

00:05:16,160 --> 00:05:19,759
you look at some of the

00:05:17,280 --> 00:05:21,280
if we connect that these batch workloads

00:05:19,759 --> 00:05:22,639
and services right over to the deep

00:05:21,280 --> 00:05:24,479
learning apps as we come in

00:05:22,639 --> 00:05:26,400
you'll be able to run some ml related

00:05:24,479 --> 00:05:27,120
workflows on the on top of the same yarn

00:05:26,400 --> 00:05:29,199
cluster

00:05:27,120 --> 00:05:30,400
where actually um you will be doing your

00:05:29,199 --> 00:05:32,240
eps jobs and

00:05:30,400 --> 00:05:33,840
doing the data engineering and then

00:05:32,240 --> 00:05:36,000
finally push that data to your

00:05:33,840 --> 00:05:37,840
um ml models to run so these

00:05:36,000 --> 00:05:39,759
capabilities are pretty much frequently

00:05:37,840 --> 00:05:42,560
on and it can affect you around those

00:05:39,759 --> 00:05:43,360
and uh support of docker and the new

00:05:42,560 --> 00:05:45,120
other

00:05:43,360 --> 00:05:47,199
runtimes also help and lock into that

00:05:45,120 --> 00:05:48,400
matter so uh this is where i want to

00:05:47,199 --> 00:05:50,080
position the

00:05:48,400 --> 00:05:51,440
entire compute ecosystem as of today

00:05:50,080 --> 00:05:52,880
what we see and

00:05:51,440 --> 00:05:54,639
we'll be seeing some more improvements

00:05:52,880 --> 00:05:56,960
in the upcoming sessions

00:05:54,639 --> 00:05:58,720
so let's uh look at to the next slide

00:05:56,960 --> 00:06:00,560
where we will slightly talk about

00:05:58,720 --> 00:06:01,759
yarn right so this pretty much you guys

00:06:00,560 --> 00:06:03,520
all know um

00:06:01,759 --> 00:06:05,039
most of them so it's young chance for

00:06:03,520 --> 00:06:06,000
yet another resource negotiator right

00:06:05,039 --> 00:06:09,039
right

00:06:06,000 --> 00:06:10,479
from the date started and ideally on is

00:06:09,039 --> 00:06:12,400
nothing but a distributed computing

00:06:10,479 --> 00:06:13,039
computer ecosystem where you have a

00:06:12,400 --> 00:06:15,120
master

00:06:13,039 --> 00:06:16,800
and you have a bunch of slates and each

00:06:15,120 --> 00:06:18,639
of these place we call of node manager

00:06:16,800 --> 00:06:20,800
they'll be running on each of the node

00:06:18,639 --> 00:06:22,560
so that how the resource management is

00:06:20,800 --> 00:06:24,080
very effectively happening with the one

00:06:22,560 --> 00:06:25,759
master core resource manager and the n

00:06:24,080 --> 00:06:27,600
number of slides called node manager

00:06:25,759 --> 00:06:29,520
so what we have done fundamentally

00:06:27,600 --> 00:06:31,919
coming from a marvel right is that

00:06:29,520 --> 00:06:33,039
in yarn we very much split the

00:06:31,919 --> 00:06:34,639
responsibility of

00:06:33,039 --> 00:06:36,639
resource management to the application

00:06:34,639 --> 00:06:38,160
management so hence the team called

00:06:36,639 --> 00:06:39,680
application master or the layman called

00:06:38,160 --> 00:06:40,560
application master act is coming into

00:06:39,680 --> 00:06:42,880
picture

00:06:40,560 --> 00:06:44,479
which actually controls end date life

00:06:42,880 --> 00:06:46,080
cycle of application for example if you

00:06:44,479 --> 00:06:47,600
have to run a map release shop if you

00:06:46,080 --> 00:06:49,360
want to run a spark job there will be a

00:06:47,600 --> 00:06:51,759
specific application master for those

00:06:49,360 --> 00:06:53,280
jobs and that will be demanding and that

00:06:51,759 --> 00:06:54,880
will be demanding resources to

00:06:53,280 --> 00:06:57,120
resource manager and get the resources

00:06:54,880 --> 00:06:58,639
needed and it fulfills the entire

00:06:57,120 --> 00:07:00,240
workflow how the job needs to be

00:06:58,639 --> 00:07:02,960
completed so resource manager or

00:07:00,240 --> 00:07:02,960
non-manager just

00:07:03,840 --> 00:07:07,280
in terms of uh controlling these

00:07:05,599 --> 00:07:09,199
resources in which our way

00:07:07,280 --> 00:07:10,960
it needed to be so that's high level

00:07:09,199 --> 00:07:12,160
summary of young and if you look into

00:07:10,960 --> 00:07:13,919
the next slide where we just want to

00:07:12,160 --> 00:07:14,720
touch up some architecture how it works

00:07:13,919 --> 00:07:17,680
right so

00:07:14,720 --> 00:07:18,000
we have around five two six host and we

00:07:17,680 --> 00:07:20,080
are

00:07:18,000 --> 00:07:21,120
going on always in h a as a master and

00:07:20,080 --> 00:07:23,199
standby node

00:07:21,120 --> 00:07:24,880
then you will be getting per node slave

00:07:23,199 --> 00:07:26,000
node managers which is actually in each

00:07:24,880 --> 00:07:28,400
of the other posts like

00:07:26,000 --> 00:07:30,319
host three or six and each of them will

00:07:28,400 --> 00:07:32,720
be periodically hard beating to the

00:07:30,319 --> 00:07:35,680
masters just to tell that okay those

00:07:32,720 --> 00:07:38,800
particular slaves are alive and also to

00:07:35,680 --> 00:07:40,080
give a consistent feedback so if you uh

00:07:38,800 --> 00:07:41,840
go further

00:07:40,080 --> 00:07:43,360
i think you can show how the one

00:07:41,840 --> 00:07:44,560
application is getting submitted so this

00:07:43,360 --> 00:07:47,360
is client one

00:07:44,560 --> 00:07:48,240
an application is getting submitted and

00:07:47,360 --> 00:07:49,680
the container a

00:07:48,240 --> 00:07:51,919
application master container is getting

00:07:49,680 --> 00:07:53,199
spawned and uh the application master

00:07:51,919 --> 00:07:54,400
container theoretically asks the

00:07:53,199 --> 00:07:55,840
resources and

00:07:54,400 --> 00:07:57,440
other tasks continuous comes in that's

00:07:55,840 --> 00:07:59,520
basically that one colored

00:07:57,440 --> 00:08:01,280
set of container when is a container is

00:07:59,520 --> 00:08:02,160
basically the the task containers

00:08:01,280 --> 00:08:05,039
running on that

00:08:02,160 --> 00:08:06,639
host so client 2 which comes in later

00:08:05,039 --> 00:08:08,639
submits again an app

00:08:06,639 --> 00:08:10,080
it goes to the same cycle first of all

00:08:08,639 --> 00:08:12,000
business manager will find a node where

00:08:10,080 --> 00:08:13,680
you can fit the application master

00:08:12,000 --> 00:08:15,840
container and then an application master

00:08:13,680 --> 00:08:17,120
container a demand small resource design

00:08:15,840 --> 00:08:18,639
gets your remaining tasks

00:08:17,120 --> 00:08:20,560
so that's pretty much a small

00:08:18,639 --> 00:08:23,280
visualization of how

00:08:20,560 --> 00:08:23,680
a theoretical uh deployment model looked

00:08:23,280 --> 00:08:26,720
like

00:08:23,680 --> 00:08:28,400
in a yarn place cluster so i hope you

00:08:26,720 --> 00:08:30,639
might have got some summary but

00:08:28,400 --> 00:08:31,599
just to recap uh the application masters

00:08:30,639 --> 00:08:34,399
are actually the

00:08:31,599 --> 00:08:36,240
um demons which actually controls in

00:08:34,399 --> 00:08:38,159
their lifecycle of an application

00:08:36,240 --> 00:08:40,240
and which works in tandem with resource

00:08:38,159 --> 00:08:41,839
management to get the resources so

00:08:40,240 --> 00:08:43,440
you can see host three four five six

00:08:41,839 --> 00:08:45,040
actually the host where

00:08:43,440 --> 00:08:47,519
most of the compute is pretty much

00:08:45,040 --> 00:08:51,120
happening okay so over to

00:08:47,519 --> 00:08:53,760
next slide let's look at a bit on the

00:08:51,120 --> 00:08:56,000
past how the our release line is looking

00:08:53,760 --> 00:08:59,360
and towards the community side

00:08:56,000 --> 00:09:02,880
so um we have majorly three uh three

00:08:59,360 --> 00:09:03,360
um lines of release line so i said two

00:09:02,880 --> 00:09:05,839
or ten

00:09:03,360 --> 00:09:06,560
x release that is a stable two dot x

00:09:05,839 --> 00:09:08,560
branch

00:09:06,560 --> 00:09:10,399
so we have given one of the recent uh

00:09:08,560 --> 00:09:12,480
release of 2010.1

00:09:10,399 --> 00:09:14,000
uh in the month of september uh so it

00:09:12,480 --> 00:09:17,680
has it has offers a lot of

00:09:14,000 --> 00:09:19,360
great features uh including um a lot of

00:09:17,680 --> 00:09:20,959
stability improvements happened at the

00:09:19,360 --> 00:09:22,080
electrode line

00:09:20,959 --> 00:09:23,760
so that's something like you could

00:09:22,080 --> 00:09:25,519
definitely look for if you're into text

00:09:23,760 --> 00:09:27,040
branch but we definitely allowed you to

00:09:25,519 --> 00:09:29,040
upgrade to three dot x that's where a

00:09:27,040 --> 00:09:30,560
lot of latest and greatest features from

00:09:29,040 --> 00:09:32,560
hadoop is available

00:09:30,560 --> 00:09:33,600
now look into one of the stable branch

00:09:32,560 --> 00:09:35,320
we say that's uh

00:09:33,600 --> 00:09:36,720
it's now the reason one that line is

00:09:35,320 --> 00:09:39,839
3.1.4

00:09:36,720 --> 00:09:41,360
it happened a couple of months back uh

00:09:39,839 --> 00:09:43,279
that's 3.1.4

00:09:41,360 --> 00:09:44,640
and in that release like we stabilized

00:09:43,279 --> 00:09:47,760
the rear one dot x

00:09:44,640 --> 00:09:48,399
to a great stand and uh that particular

00:09:47,760 --> 00:09:51,839
release is

00:09:48,399 --> 00:09:54,240
now used in widely in a lot of

00:09:51,839 --> 00:09:56,240
customers deployments and there is also

00:09:54,240 --> 00:09:58,320
3.2 brands are actually happening

00:09:56,240 --> 00:10:00,080
and an answer release is pretty much in

00:09:58,320 --> 00:10:00,640
the pipeline to get induced without two

00:10:00,080 --> 00:10:02,800
so

00:10:00,640 --> 00:10:04,560
um that then these are two brands we

00:10:02,800 --> 00:10:06,240
call that table and

00:10:04,560 --> 00:10:08,640
the latest and best from us is actually

00:10:06,240 --> 00:10:09,760
in the 3.3.0 which just happened a

00:10:08,640 --> 00:10:11,680
couple of months back

00:10:09,760 --> 00:10:13,760
so that is a big major release for the

00:10:11,680 --> 00:10:15,600
hadoop india ecosystem and a lot of

00:10:13,760 --> 00:10:17,279
great features actually came over there

00:10:15,600 --> 00:10:18,959
for example now the hadoop has a

00:10:17,279 --> 00:10:20,160
capability to support arm-based

00:10:18,959 --> 00:10:22,640
architecture

00:10:20,160 --> 00:10:23,760
and a bunch of runtime opportunity for

00:10:22,640 --> 00:10:26,640
example you can now

00:10:23,760 --> 00:10:29,279
use java 11 and uh related to the cloud

00:10:26,640 --> 00:10:30,720
related use cases uh s3a and abfs

00:10:29,279 --> 00:10:32,480
enhancements and

00:10:30,720 --> 00:10:34,399
the yarn said a lot of scheduling

00:10:32,480 --> 00:10:36,959
improvements and application catalog

00:10:34,399 --> 00:10:38,720
for the native service so like that uh

00:10:36,959 --> 00:10:40,160
there's an enormous amount of features

00:10:38,720 --> 00:10:43,680
we actually have done in

00:10:40,160 --> 00:10:44,320
three dot x uh and got released as 3.3.0

00:10:43,680 --> 00:10:47,200
so

00:10:44,320 --> 00:10:48,720
we will quickly go through most of those

00:10:47,200 --> 00:10:50,720
features and actually

00:10:48,720 --> 00:10:52,560
explain you what the feature is for and

00:10:50,720 --> 00:10:53,920
which kind of use cases it is serving

00:10:52,560 --> 00:10:56,560
and how you could benefit

00:10:53,920 --> 00:10:58,079
out of that so over the next slide and

00:10:56,560 --> 00:11:00,000
this is where i want to touch up pretty

00:10:58,079 --> 00:11:01,920
much about our community right

00:11:00,000 --> 00:11:03,120
so apache hadoop code base and their

00:11:01,920 --> 00:11:06,240
code base actually is

00:11:03,120 --> 00:11:08,000
changing way faster and our time and

00:11:06,240 --> 00:11:09,519
a lot of unique contributors are

00:11:08,000 --> 00:11:11,279
actually coming in and actually

00:11:09,519 --> 00:11:14,399
contributing and uh

00:11:11,279 --> 00:11:16,640
improving our ecosystem and i like 20

00:11:14,399 --> 00:11:17,680
2006 you started the a small set of

00:11:16,640 --> 00:11:20,480
contributors and

00:11:17,680 --> 00:11:22,160
all the time it's just growing right and

00:11:20,480 --> 00:11:23,920
even now it's it's actually at the peak

00:11:22,160 --> 00:11:26,000
of close to 80 plus computers

00:11:23,920 --> 00:11:28,399
actively contributing and update

00:11:26,000 --> 00:11:30,160
committing the changes to hadoop so

00:11:28,399 --> 00:11:31,920
the team which is called hadoop is dead

00:11:30,160 --> 00:11:34,480
or all this kind of talks happening

00:11:31,920 --> 00:11:36,079
uh the real community's uh graph is

00:11:34,480 --> 00:11:37,839
actually looking pretty strong in terms

00:11:36,079 --> 00:11:40,959
of the unique number of comments goes in

00:11:37,839 --> 00:11:41,279
the diversified developer portfolio it's

00:11:40,959 --> 00:11:43,760
all

00:11:41,279 --> 00:11:45,120
great and if you look at the number of

00:11:43,760 --> 00:11:46,800
um you know the

00:11:45,120 --> 00:11:48,480
uh the commits actually right our code

00:11:46,800 --> 00:11:49,839
changes happening in this code base that

00:11:48,480 --> 00:11:51,600
is the other one was actually the unique

00:11:49,839 --> 00:11:53,200
orders and this is about the comics

00:11:51,600 --> 00:11:55,760
you can see that it's still stabilized

00:11:53,200 --> 00:11:56,160
from 2016 and going that flat model

00:11:55,760 --> 00:11:59,120
where

00:11:56,160 --> 00:12:00,240
a lot of uh comments and code questions

00:11:59,120 --> 00:12:01,600
are happening

00:12:00,240 --> 00:12:03,200
if you look at the next slides this is

00:12:01,600 --> 00:12:04,240
where we wanted to talk more about

00:12:03,200 --> 00:12:05,839
actually the

00:12:04,240 --> 00:12:07,839
number of jiras are actually happening

00:12:05,839 --> 00:12:08,399
in the community like how how diverse it

00:12:07,839 --> 00:12:10,399
is so

00:12:08,399 --> 00:12:12,079
um we have a lot of sub projects in

00:12:10,399 --> 00:12:15,279
hadoop right hardwood common

00:12:12,079 --> 00:12:18,560
yarn hdfs hdd as that is awesome

00:12:15,279 --> 00:12:20,240
and also map reduce right so these are

00:12:18,560 --> 00:12:22,639
the different sub projects under

00:12:20,240 --> 00:12:24,800
the hadoop umbrella and if you see the

00:12:22,639 --> 00:12:26,959
overall number of jiras it's it's always

00:12:24,800 --> 00:12:29,200
in the range of 250 plus in a month

00:12:26,959 --> 00:12:30,800
and within that we just try to give you

00:12:29,200 --> 00:12:32,480
some kind of color coding to see that

00:12:30,800 --> 00:12:33,120
which project is actually pretty happy

00:12:32,480 --> 00:12:35,200
right and

00:12:33,120 --> 00:12:37,519
yeah earlier it is all about hadoop

00:12:35,200 --> 00:12:39,360
common and then coming to mapreduce and

00:12:37,519 --> 00:12:41,360
hdfs is consistent throughout

00:12:39,360 --> 00:12:43,279
and yarn in between came up and going up

00:12:41,360 --> 00:12:46,079
and now ozone is over there so

00:12:43,279 --> 00:12:48,160
that's how the india mix up of our um

00:12:46,079 --> 00:12:49,440
sub projects our contribution to the top

00:12:48,160 --> 00:12:50,160
number of jiras happening in the

00:12:49,440 --> 00:12:51,680
community and

00:12:50,160 --> 00:12:53,680
i could say that it's it's pretty

00:12:51,680 --> 00:12:55,680
healthy and going very good

00:12:53,680 --> 00:12:56,800
so congratulations and thanks for the

00:12:55,680 --> 00:12:59,040
support from all

00:12:56,800 --> 00:13:00,720
the contributors across the world which

00:12:59,040 --> 00:13:02,880
who are actually helping uh the

00:13:00,720 --> 00:13:06,240
community to grow to the way it is today

00:13:02,880 --> 00:13:07,920
and even more powerful to the future

00:13:06,240 --> 00:13:09,279
cool so let's look at how our

00:13:07,920 --> 00:13:10,800
communities are right with the the

00:13:09,279 --> 00:13:11,360
people behind the scenes who is helping

00:13:10,800 --> 00:13:13,120
a lot of

00:13:11,360 --> 00:13:14,399
contributors to get the boarding and

00:13:13,120 --> 00:13:17,839
working guys we are close to

00:13:14,399 --> 00:13:19,519
107 or 17 pmc members and out of that

00:13:17,839 --> 00:13:21,760
close to 13 plus numbers got rounded

00:13:19,519 --> 00:13:21,760
last

00:13:33,040 --> 00:13:36,560
all of you available make this code

00:13:34,720 --> 00:13:38,959
based the way it is today and

00:13:36,560 --> 00:13:40,320
going further uh some great work is

00:13:38,959 --> 00:13:42,800
coming

00:13:40,320 --> 00:13:43,519
so from here i just wanted to summarize

00:13:42,800 --> 00:13:46,399
that how

00:13:43,519 --> 00:13:47,519
come uh uh as a community level and how

00:13:46,399 --> 00:13:49,839
our release lines are

00:13:47,519 --> 00:13:50,959
doing now silad will help us to take us

00:13:49,839 --> 00:13:52,720
from here to

00:13:50,959 --> 00:13:55,680
uh explain about the state of the union

00:13:52,720 --> 00:13:59,120
of the on and our features in detail so

00:13:55,680 --> 00:14:01,440
what is it okay thank you sunil

00:13:59,120 --> 00:14:03,279
so as soon as said what is the state of

00:14:01,440 --> 00:14:07,120
the union right now as soon as said

00:14:03,279 --> 00:14:10,000
uh hadoop 3.0 it just is in this summer

00:14:07,120 --> 00:14:11,839
so it's pretty recent and contains many

00:14:10,000 --> 00:14:14,639
new features and improvements

00:14:11,839 --> 00:14:16,480
so if you if we talk about the look at

00:14:14,639 --> 00:14:19,279
the bird's eye view about it

00:14:16,480 --> 00:14:21,120
we can divide it to main categories like

00:14:19,279 --> 00:14:23,600
platform layer improvements

00:14:21,120 --> 00:14:24,560
and workloads so among the platform

00:14:23,600 --> 00:14:26,240
layer

00:14:24,560 --> 00:14:27,839
improvements we have log aggregation

00:14:26,240 --> 00:14:30,480
changes to support

00:14:27,839 --> 00:14:32,079
cloud storage and we also have container

00:14:30,480 --> 00:14:35,839
data directories

00:14:32,079 --> 00:14:38,399
storage for s3 and azure file systems

00:14:35,839 --> 00:14:40,800
uh yeah all again it's better cloud

00:14:38,399 --> 00:14:43,040
support

00:14:40,800 --> 00:14:44,240
and we have latest runtime supports for

00:14:43,040 --> 00:14:47,040
java 11

00:14:44,240 --> 00:14:47,839
and an armored actual support as well

00:14:47,040 --> 00:14:50,399
and

00:14:47,839 --> 00:14:51,360
also powerful scheduling capabilities

00:14:50,399 --> 00:14:53,440
coming to the picture

00:14:51,360 --> 00:14:54,720
if we talk about the platform so about

00:14:53,440 --> 00:14:58,240
the workloads

00:14:54,720 --> 00:15:00,880
uh continuation support is

00:14:58,240 --> 00:15:01,839
more and more improved we are going in

00:15:00,880 --> 00:15:04,639
the direction of duck

00:15:01,839 --> 00:15:06,560
occur and run c uh i will provide more

00:15:04,639 --> 00:15:09,920
details on that later

00:15:06,560 --> 00:15:13,760
and just mentioning the scalability

00:15:09,920 --> 00:15:17,279
a bit so we have a roadmap to 1k

00:15:13,760 --> 00:15:21,760
notes uh scale currently we have

00:15:17,279 --> 00:15:24,839
40k notes with federated ion clusters

00:15:21,760 --> 00:15:27,920
what is federation basically dividing

00:15:24,839 --> 00:15:31,519
the big young cluster into several

00:15:27,920 --> 00:15:33,519
smaller subclusters but the applications

00:15:31,519 --> 00:15:34,560
don't see that the these clusters are

00:15:33,519 --> 00:15:36,160
divided so

00:15:34,560 --> 00:15:38,839
they are seeing the young cluster as a

00:15:36,160 --> 00:15:41,839
whole big cluster

00:15:38,839 --> 00:15:45,199
okay so

00:15:41,839 --> 00:15:45,199
let's change the slide okay

00:15:46,240 --> 00:15:53,120
so what are the features of how to 3.3.0

00:15:49,839 --> 00:15:54,959
uh so we have improved s3a delegation

00:15:53,120 --> 00:15:58,240
token support and as regard

00:15:54,959 --> 00:16:00,800
performance svgard

00:15:58,240 --> 00:16:02,880
is a feature for the s3 object store

00:16:00,800 --> 00:16:05,600
which can use database as a store

00:16:02,880 --> 00:16:06,160
of metadata but objects industry buckets

00:16:05,600 --> 00:16:09,519
so

00:16:06,160 --> 00:16:12,160
that's basically it and we also have

00:16:09,519 --> 00:16:14,480
abfs enhancements and improved

00:16:12,160 --> 00:16:16,160
troubleshooting abfs is the azure blob

00:16:14,480 --> 00:16:18,000
file system

00:16:16,160 --> 00:16:20,480
uh one important thing is that the

00:16:18,000 --> 00:16:22,079
container storage interface support

00:16:20,480 --> 00:16:23,839
so we can attach external storage

00:16:22,079 --> 00:16:27,759
volumes to docker containers

00:16:23,839 --> 00:16:29,279
with this unified interface

00:16:27,759 --> 00:16:32,320
this is very important in cloud

00:16:29,279 --> 00:16:32,320
deployments again

00:16:33,360 --> 00:16:37,440
okay and about the runtime improvements

00:16:35,440 --> 00:16:39,360
we support java 11 and arm

00:16:37,440 --> 00:16:41,680
i don't want to spend more time on this

00:16:39,360 --> 00:16:43,920
because we are in a little bit rush

00:16:41,680 --> 00:16:45,440
uh okay let's see the scheduling

00:16:43,920 --> 00:16:46,240
improvements we call it global

00:16:45,440 --> 00:16:48,959
scheduling

00:16:46,240 --> 00:16:50,240
the this can also be divided into two

00:16:48,959 --> 00:16:51,920
sections

00:16:50,240 --> 00:16:53,920
so what is what is the traditional

00:16:51,920 --> 00:16:55,759
traditional scheduling so

00:16:53,920 --> 00:16:57,440
when a new target arrives to the

00:16:55,759 --> 00:16:58,800
resource manager from the node manager

00:16:57,440 --> 00:17:02,000
you unschedules

00:16:58,800 --> 00:17:05,120
and allocates containers per node but it

00:17:02,000 --> 00:17:09,439
has some limitations on performance

00:17:05,120 --> 00:17:12,000
so the idea is is that we have this

00:17:09,439 --> 00:17:13,120
node state in the scheduler and when one

00:17:12,000 --> 00:17:17,199
application

00:17:13,120 --> 00:17:20,400
submits there but it's resource demands

00:17:17,199 --> 00:17:22,720
we can sort these notes uh based on the

00:17:20,400 --> 00:17:25,600
resource demands of the applications

00:17:22,720 --> 00:17:27,600
so basically we can sort about uh

00:17:25,600 --> 00:17:29,919
resource usage number of containers on

00:17:27,600 --> 00:17:32,799
the nodes or any specified policy

00:17:29,919 --> 00:17:34,640
for better affinity the affinity means

00:17:32,799 --> 00:17:35,520
to collocate the allocations of a job on

00:17:34,640 --> 00:17:39,840
the same rack

00:17:35,520 --> 00:17:42,480
or or just spread over the cluster if

00:17:39,840 --> 00:17:43,840
there is a scenario for that uh it can

00:17:42,480 --> 00:17:47,039
reduce network costs

00:17:43,840 --> 00:17:50,400
and and other factors

00:17:47,039 --> 00:17:52,480
so yeah uh

00:17:50,400 --> 00:17:53,440
so if you just uh want to summarize move

00:17:52,480 --> 00:17:57,039
it into

00:17:53,440 --> 00:17:58,640
lookup it's basically we are looking at

00:17:57,039 --> 00:18:02,400
several nodes at a time

00:17:58,640 --> 00:18:04,559
and we have fine grade logs instead of

00:18:02,400 --> 00:18:06,080
coarse grained locking and it improved

00:18:04,559 --> 00:18:09,520
the performance a lot so

00:18:06,080 --> 00:18:12,880
we measured uh

00:18:09,520 --> 00:18:13,440
10 times throughput and 5k containers

00:18:12,880 --> 00:18:16,480
per second

00:18:13,440 --> 00:18:18,480
locations and the other part for the

00:18:16,480 --> 00:18:19,200
global scheduling is parallel allocation

00:18:18,480 --> 00:18:22,160
threats

00:18:19,200 --> 00:18:22,799
so it's actually multi-threaded

00:18:22,160 --> 00:18:25,039
allocation

00:18:22,799 --> 00:18:26,640
instead of a single threaded and you can

00:18:25,039 --> 00:18:29,840
see on the images that

00:18:26,640 --> 00:18:33,280
we almost reached 5k notes

00:18:29,840 --> 00:18:34,559
per second okay so let's go to the

00:18:33,280 --> 00:18:37,840
capacity scheduler

00:18:34,559 --> 00:18:38,799
improvements we have a new placement

00:18:37,840 --> 00:18:40,960
engine

00:18:38,799 --> 00:18:42,440
almost completely developed so what was

00:18:40,960 --> 00:18:44,880
the motivation here

00:18:42,440 --> 00:18:46,080
accumulating in capacity scheduler was

00:18:44,880 --> 00:18:47,919
very hard to maintain

00:18:46,080 --> 00:18:50,320
in terms of the code base and code

00:18:47,919 --> 00:18:52,720
quality and there was also

00:18:50,320 --> 00:18:53,919
some gaps between capacity and first

00:18:52,720 --> 00:18:57,360
scheduler

00:18:53,919 --> 00:19:00,080
so we wanted to have a more consistent

00:18:57,360 --> 00:19:02,240
way of defining the placements the

00:19:00,080 --> 00:19:03,600
placements are responsible for placing

00:19:02,240 --> 00:19:05,919
applications to cues

00:19:03,600 --> 00:19:08,000
based on username or user groups primary

00:19:05,919 --> 00:19:11,440
or secondary or application name

00:19:08,000 --> 00:19:13,440
or other variables with this

00:19:11,440 --> 00:19:14,799
uh more flexible system that we

00:19:13,440 --> 00:19:18,160
developed

00:19:14,799 --> 00:19:20,400
i mean the community developed we can

00:19:18,160 --> 00:19:22,720
achieve

00:19:20,400 --> 00:19:24,720
more flexibility in terms of adding more

00:19:22,720 --> 00:19:26,160
variables to the system or

00:19:24,720 --> 00:19:29,280
define the rejection rules for

00:19:26,160 --> 00:19:32,400
applications in a more fine-grained

00:19:29,280 --> 00:19:33,200
fashion another improvement in this

00:19:32,400 --> 00:19:36,000
category

00:19:33,200 --> 00:19:36,840
is a new config format for mapping rules

00:19:36,000 --> 00:19:39,520
so

00:19:36,840 --> 00:19:41,520
we see that the

00:19:39,520 --> 00:19:43,520
format can be very convoluted and

00:19:41,520 --> 00:19:47,039
aeroplant config

00:19:43,520 --> 00:19:49,679
if they want to uh describe a complex

00:19:47,039 --> 00:19:51,039
usage scenario so that's why we so that

00:19:49,679 --> 00:19:52,880
it

00:19:51,039 --> 00:19:55,440
we need a more more structured and more

00:19:52,880 --> 00:19:58,000
explicit straightforward manner to

00:19:55,440 --> 00:19:59,280
actually describe these placement rules

00:19:58,000 --> 00:20:02,320
so you can look this uh

00:19:59,280 --> 00:20:04,559
jira up and there is there are two

00:20:02,320 --> 00:20:05,520
design documents up there which is very

00:20:04,559 --> 00:20:09,360
thorough so

00:20:05,520 --> 00:20:12,960
i would just recommend it okay

00:20:09,360 --> 00:20:16,240
we have the fs to cs migration so

00:20:12,960 --> 00:20:18,559
uh there was a user demand for

00:20:16,240 --> 00:20:19,440
migrating from first generation capacity

00:20:18,559 --> 00:20:22,960
scheduler

00:20:19,440 --> 00:20:25,200
so the community developed a tool

00:20:22,960 --> 00:20:27,120
which is capable of parsing the first

00:20:25,200 --> 00:20:29,120
scheduler config and emitting a capacity

00:20:27,120 --> 00:20:32,480
scheduler config

00:20:29,120 --> 00:20:33,360
and also validating it so that's very

00:20:32,480 --> 00:20:35,600
important to

00:20:33,360 --> 00:20:36,720
because we don't want the system to just

00:20:35,600 --> 00:20:40,080
limit the config which is

00:20:36,720 --> 00:20:42,159
not startable by on okay

00:20:40,080 --> 00:20:44,400
and another important thing here is that

00:20:42,159 --> 00:20:45,760
we will have an fs to see a stock on

00:20:44,400 --> 00:20:48,720
thursday

00:20:45,760 --> 00:20:50,159
at this given time so if if you are

00:20:48,720 --> 00:20:54,000
interested and you want to see a demo

00:20:50,159 --> 00:20:54,000
about this tool then please attend

00:20:54,799 --> 00:20:58,240
okay we also have some usability

00:20:57,360 --> 00:21:00,559
improvements

00:20:58,240 --> 00:21:02,159
uh in terms of log aggregation and

00:21:00,559 --> 00:21:05,200
unlock servlets

00:21:02,159 --> 00:21:07,120
so uh what is the aggregation this is

00:21:05,200 --> 00:21:10,000
basically a mechanism to collect locks

00:21:07,120 --> 00:21:12,799
from containers to centralized location

00:21:10,000 --> 00:21:14,000
uh traditionally it was hdfs but that

00:21:12,799 --> 00:21:17,280
was the

00:21:14,000 --> 00:21:20,080
uh as as we pushed beyond towards the uh

00:21:17,280 --> 00:21:20,480
cloud infrastructures we realized that

00:21:20,080 --> 00:21:24,000
we

00:21:20,480 --> 00:21:27,039
need uh s3 and azure file systems as

00:21:24,000 --> 00:21:28,960
well to store the locks

00:21:27,039 --> 00:21:32,480
because not all deployments will have

00:21:28,960 --> 00:21:32,480
hdfs at hand

00:21:32,720 --> 00:21:36,080
and we also have this uh neural

00:21:35,440 --> 00:21:39,440
aggregate

00:21:36,080 --> 00:21:42,159
regulation five format which is uh

00:21:39,440 --> 00:21:43,520
putting an index above the traditional t

00:21:42,159 --> 00:21:45,520
file so

00:21:43,520 --> 00:21:46,720
it provides fast access to logs and the

00:21:45,520 --> 00:21:51,600
metadata to the

00:21:46,720 --> 00:21:53,679
log so it's it increases the performance

00:21:51,600 --> 00:21:55,600
okay so let's check what's new for the

00:21:53,679 --> 00:21:59,120
workloads

00:21:55,600 --> 00:21:59,760
so we have this plugable unified device

00:21:59,120 --> 00:22:03,520
framework

00:21:59,760 --> 00:22:05,919
which is responsible for uh

00:22:03,520 --> 00:22:08,320
uh which is the base for the gpu and the

00:22:05,919 --> 00:22:11,520
necv plugin right now but it

00:22:08,320 --> 00:22:11,919
provides a way for developers to easily

00:22:11,520 --> 00:22:14,240
uh

00:22:11,919 --> 00:22:15,360
develop plugins so they are they

00:22:14,240 --> 00:22:18,880
shouldn't aware of

00:22:15,360 --> 00:22:21,360
any your implementation details so it's

00:22:18,880 --> 00:22:22,880
the plugin this is the plugin way of

00:22:21,360 --> 00:22:25,360
doing things and then

00:22:22,880 --> 00:22:27,840
you don't need to be involved in the on

00:22:25,360 --> 00:22:27,840
so much

00:22:28,080 --> 00:22:32,159
some technical details the vendor plugin

00:22:30,400 --> 00:22:33,280
is a separate project and we'll expose

00:22:32,159 --> 00:22:35,200
the jar file for

00:22:33,280 --> 00:22:36,640
the node manager and the node manager

00:22:35,200 --> 00:22:39,600
will load this jar file

00:22:36,640 --> 00:22:40,640
so it should be on the class pass but if

00:22:39,600 --> 00:22:45,200
you are more interested

00:22:40,640 --> 00:22:48,240
just check the design document okay

00:22:45,200 --> 00:22:50,720
we have the fpga support as well

00:22:48,240 --> 00:22:51,840
so as you can see it's divided to two

00:22:50,720 --> 00:22:54,960
umbrella gyros

00:22:51,840 --> 00:22:58,159
the first one was adding

00:22:54,960 --> 00:22:59,280
the first phase of fpga support let's

00:22:58,159 --> 00:23:01,520
say that and the second

00:22:59,280 --> 00:23:02,880
second one was stabilization and more

00:23:01,520 --> 00:23:08,320
improvements

00:23:02,880 --> 00:23:10,400
and more production already developments

00:23:08,320 --> 00:23:11,600
and we have better gpu support as well

00:23:10,400 --> 00:23:15,039
what does that mean better

00:23:11,600 --> 00:23:15,679
gpu support uh basically the gist of it

00:23:15,039 --> 00:23:18,320
is that

00:23:15,679 --> 00:23:19,280
we take the gpu topology into

00:23:18,320 --> 00:23:22,720
consideration

00:23:19,280 --> 00:23:25,919
when scheduling uh a tool called

00:23:22,720 --> 00:23:28,080
nvidia smi uh which can fetch

00:23:25,919 --> 00:23:29,360
topology information from the system and

00:23:28,080 --> 00:23:32,400
why is that important

00:23:29,360 --> 00:23:34,240
so the topology describes how one or

00:23:32,400 --> 00:23:35,360
more gpus in the system are connected to

00:23:34,240 --> 00:23:38,000
each other

00:23:35,360 --> 00:23:38,400
so there can be scenarios or use cases

00:23:38,000 --> 00:23:40,400
that

00:23:38,400 --> 00:23:42,880
this topology is important because the

00:23:40,400 --> 00:23:46,000
data is copied between the gpus

00:23:42,880 --> 00:23:47,440
and yeah if they are on the same bus or

00:23:46,000 --> 00:23:50,320
closer to each other or

00:23:47,440 --> 00:23:51,200
in any other sense then it could be more

00:23:50,320 --> 00:23:54,320
effective to

00:23:51,200 --> 00:23:56,640
use those gpus together and you can

00:23:54,320 --> 00:23:57,679
check the gyro as well but i inserted a

00:23:56,640 --> 00:24:00,799
screenshot here

00:23:57,679 --> 00:24:01,520
so these are machine learning models and

00:24:00,799 --> 00:24:04,799
the

00:24:01,520 --> 00:24:06,559
percentages are performance gains

00:24:04,799 --> 00:24:09,760
through this computation of loading from

00:24:06,559 --> 00:24:09,760
cpus to gpus

00:24:10,960 --> 00:24:17,039
okay let's check what is the

00:24:14,000 --> 00:24:22,000
what are the container enhancements so s

00:24:17,039 --> 00:24:22,000
eon supports docker for a long time ago

00:24:22,080 --> 00:24:27,600
there was a demand from users to debug

00:24:24,880 --> 00:24:31,039
various docker applications

00:24:27,600 --> 00:24:34,080
and this was a very requested feature so

00:24:31,039 --> 00:24:37,600
interactive docker support uh

00:24:34,080 --> 00:24:39,360
is is providing a means to to like

00:24:37,600 --> 00:24:41,039
like docker exactly with tokens that you

00:24:39,360 --> 00:24:42,080
can log into a container and execute

00:24:41,039 --> 00:24:44,480
arbitrary commands

00:24:42,080 --> 00:24:45,679
so you can troubleshoot what went wrong

00:24:44,480 --> 00:24:46,559
you can check the configuration and

00:24:45,679 --> 00:24:49,120
check the dockers

00:24:46,559 --> 00:24:50,720
the file system or mounts or anything

00:24:49,120 --> 00:24:52,640
okay and we have also

00:24:50,720 --> 00:24:54,400
various stabilization and usual

00:24:52,640 --> 00:24:57,440
usability improvements

00:24:54,400 --> 00:24:59,840
like debugging the containers security c

00:24:57,440 --> 00:25:03,840
group and complete entry point support

00:24:59,840 --> 00:25:03,840
and docker environment variable support

00:25:04,559 --> 00:25:08,799
okay we also have a new container

00:25:06,480 --> 00:25:11,279
runtime why is this required

00:25:08,799 --> 00:25:12,880
because yarn has a tight dependency on

00:25:11,279 --> 00:25:15,279
docker demons so

00:25:12,880 --> 00:25:17,919
not all users want to install docker

00:25:15,279 --> 00:25:20,080
demon or the node manager hosts so

00:25:17,919 --> 00:25:21,200
maintaining the docker registries also

00:25:20,080 --> 00:25:24,320
could be a pain point

00:25:21,200 --> 00:25:26,799
so kind of moving away from docker

00:25:24,320 --> 00:25:28,559
with this alternative is beneficial for

00:25:26,799 --> 00:25:31,600
ion ecosystem

00:25:28,559 --> 00:25:34,799
uh and we can use hdfs

00:25:31,600 --> 00:25:37,440
uh for distributing the images it's

00:25:34,799 --> 00:25:38,480
it was a natural choice because hdfs was

00:25:37,440 --> 00:25:41,120
kind of

00:25:38,480 --> 00:25:42,240
yeah tightly coupled with the r in this

00:25:41,120 --> 00:25:45,440
sense

00:25:42,240 --> 00:25:47,039
so we can just replace the registry with

00:25:45,440 --> 00:25:50,320
hdfs

00:25:47,039 --> 00:25:53,760
and we have improved documentation for

00:25:50,320 --> 00:25:57,279
this run c support so you can check

00:25:53,760 --> 00:26:00,159
if you want

00:25:57,279 --> 00:26:02,159
your native services uh what is your

00:26:00,159 --> 00:26:04,880
native services so basically

00:26:02,159 --> 00:26:07,039
it's a framework that provides first

00:26:04,880 --> 00:26:09,039
class support and apis

00:26:07,039 --> 00:26:10,240
to host long-running services natively

00:26:09,039 --> 00:26:13,360
in yarn

00:26:10,240 --> 00:26:14,080
this is it in a nutshell it supports

00:26:13,360 --> 00:26:17,520
docker

00:26:14,080 --> 00:26:20,159
and traditional containers

00:26:17,520 --> 00:26:21,120
and we also have application catalog

00:26:20,159 --> 00:26:24,320
built on top of

00:26:21,120 --> 00:26:27,120
native services which offers

00:26:24,320 --> 00:26:28,640
cross-platform i mean a platform as a

00:26:27,120 --> 00:26:30,720
service instead of an infrastructure as

00:26:28,640 --> 00:26:33,200
a service

00:26:30,720 --> 00:26:34,480
approach and it reduces development

00:26:33,200 --> 00:26:36,320
costs for applications

00:26:34,480 --> 00:26:38,799
and it provides a lightweight approach

00:26:36,320 --> 00:26:42,240
to manage your applications

00:26:38,799 --> 00:26:44,640
and you can get here as a personalized

00:26:42,240 --> 00:26:48,400
view of the software status of

00:26:44,640 --> 00:26:48,400
your applications with this

00:26:48,480 --> 00:26:54,080
okay let's see what's ahead of us what

00:26:50,960 --> 00:26:57,760
is the future and the roadmap of yarn

00:26:54,080 --> 00:27:00,480
so as we emphasize with sunil uh

00:26:57,760 --> 00:27:02,559
supporting multi-cloud is is very

00:27:00,480 --> 00:27:03,760
important nowadays so we can't lag

00:27:02,559 --> 00:27:07,279
behind

00:27:03,760 --> 00:27:09,919
the technology improvements so

00:27:07,279 --> 00:27:11,440
community efforts has been started to

00:27:09,919 --> 00:27:14,120
think and brainstorm about

00:27:11,440 --> 00:27:15,919
the following topics like scaling

00:27:14,120 --> 00:27:19,039
recommendations

00:27:15,919 --> 00:27:20,720
or cluster level scaling like adding

00:27:19,039 --> 00:27:23,200
nodes or removing nodes more

00:27:20,720 --> 00:27:26,640
intelligently based on some metrics

00:27:23,200 --> 00:27:28,799
or node level scaling as well

00:27:26,640 --> 00:27:30,799
which can be considered as vertical

00:27:28,799 --> 00:27:32,480
scaling

00:27:30,799 --> 00:27:34,880
yeah the community also started to think

00:27:32,480 --> 00:27:36,000
about smarter scheduling like beam

00:27:34,880 --> 00:27:38,000
packing so you can

00:27:36,000 --> 00:27:40,559
pack the containers to one node instead

00:27:38,000 --> 00:27:42,880
of spreading them around

00:27:40,559 --> 00:27:44,880
and account for speculative nodes like

00:27:42,880 --> 00:27:47,679
spot instances

00:27:44,880 --> 00:27:49,279
so it's more like a dynamic dynamic

00:27:47,679 --> 00:27:53,200
scheduling

00:27:49,279 --> 00:27:56,640
and uh also downscaling nodes could be

00:27:53,200 --> 00:28:00,240
and should be improved if if we want to

00:27:56,640 --> 00:28:00,240
be serious with the cloud setups

00:28:00,480 --> 00:28:05,360
okay uh let's see there are some

00:28:03,679 --> 00:28:08,399
usability improvements as well

00:28:05,360 --> 00:28:08,799
so uh we noticed as a community that

00:28:08,399 --> 00:28:10,240
it's

00:28:08,799 --> 00:28:11,679
sometimes very hard to troubleshoot

00:28:10,240 --> 00:28:13,039
applications this distributed

00:28:11,679 --> 00:28:15,919
applications

00:28:13,039 --> 00:28:17,440
so there are some scenarios like when

00:28:15,919 --> 00:28:20,000
the applications are hanging

00:28:17,440 --> 00:28:21,760
or failing or there are some scheduled

00:28:20,000 --> 00:28:24,799
issues like application stuck and

00:28:21,760 --> 00:28:28,320
we don't know the reason so uh

00:28:24,799 --> 00:28:31,520
for this we we introduce the

00:28:28,320 --> 00:28:34,399
collector the diagnostic collector and

00:28:31,520 --> 00:28:36,080
it is responsible for getting several

00:28:34,399 --> 00:28:38,559
metrics for the applications

00:28:36,080 --> 00:28:39,840
on an on-demand basis so what we can

00:28:38,559 --> 00:28:42,799
collect

00:28:39,840 --> 00:28:43,679
locks or or jstack data for the

00:28:42,799 --> 00:28:46,080
containers

00:28:43,679 --> 00:28:47,679
or resource manager node manager looks

00:28:46,080 --> 00:28:50,720
for the containers

00:28:47,679 --> 00:28:52,799
on the on the specific time range

00:28:50,720 --> 00:28:54,080
we can also check the scheduler config

00:28:52,799 --> 00:28:55,760
we can also enable

00:28:54,080 --> 00:28:57,200
resource manager logging on more

00:28:55,760 --> 00:29:01,600
variables level like debug

00:28:57,200 --> 00:29:02,880
to check specified time frame for what's

00:29:01,600 --> 00:29:05,440
happening in the scheduler

00:29:02,880 --> 00:29:07,520
so there are under possibilities to

00:29:05,440 --> 00:29:09,520
improve this

00:29:07,520 --> 00:29:11,120
and we also have your unlock processor

00:29:09,520 --> 00:29:14,480
which is

00:29:11,120 --> 00:29:18,480
which will be open source soon

00:29:14,480 --> 00:29:21,520
uh it's a tool to to cli2 basically

00:29:18,480 --> 00:29:23,360
to parse your unlocks and

00:29:21,520 --> 00:29:25,120
it is capable of listing and filtering

00:29:23,360 --> 00:29:26,080
by certain properties and search for

00:29:25,120 --> 00:29:28,480
common errors

00:29:26,080 --> 00:29:29,360
like container executor failures or

00:29:28,480 --> 00:29:32,799
error codes

00:29:29,360 --> 00:29:34,960
or let's say am preemption

00:29:32,799 --> 00:29:35,840
or getting some stack traces from the

00:29:34,960 --> 00:29:41,360
log so it's

00:29:35,840 --> 00:29:44,159
it's a smart logo analysis tool for eon

00:29:41,360 --> 00:29:45,679
okay resource over commitment uh yeah

00:29:44,159 --> 00:29:48,640
it's it's a long story but

00:29:45,679 --> 00:29:50,720
still it's in the picture because uh we

00:29:48,640 --> 00:29:52,640
can save some resources with this so the

00:29:50,720 --> 00:29:54,720
the main idea is that we have utilized

00:29:52,640 --> 00:29:57,919
resources covered with red

00:29:54,720 --> 00:29:59,840
in the picture the left side and we have

00:29:57,919 --> 00:30:01,360
allocated but unutilized resources

00:29:59,840 --> 00:30:05,120
covered with

00:30:01,360 --> 00:30:08,080
the blue blue color and

00:30:05,120 --> 00:30:10,720
what if we want to utilize from this

00:30:08,080 --> 00:30:12,640
allocated but unutilized space so

00:30:10,720 --> 00:30:15,600
the idea is that we can allocate

00:30:12,640 --> 00:30:18,080
opportunistic containers from that range

00:30:15,600 --> 00:30:19,760
and then if the cluster becomes full

00:30:18,080 --> 00:30:22,000
afterwards then we can

00:30:19,760 --> 00:30:22,960
preempt those containers before normal

00:30:22,000 --> 00:30:26,720
containers that

00:30:22,960 --> 00:30:26,720
that are called guaranteed containers

00:30:27,520 --> 00:30:32,080
okay let's talk about the upgrade really

00:30:30,399 --> 00:30:34,159
quickly

00:30:32,080 --> 00:30:35,279
there are two types of upgrade the

00:30:34,159 --> 00:30:37,200
express

00:30:35,279 --> 00:30:39,440
and the stop this is a stop the world

00:30:37,200 --> 00:30:41,120
upgrade which means there is cluster

00:30:39,440 --> 00:30:43,039
downtime but we have we don't have

00:30:41,120 --> 00:30:45,200
strict prerequisites for that

00:30:43,039 --> 00:30:47,520
and the users can upgrade the masters

00:30:45,200 --> 00:30:49,760
and the records in one go

00:30:47,520 --> 00:30:51,600
compared to the rolling upgrade which is

00:30:49,760 --> 00:30:54,799
preserving cluster operation

00:30:51,600 --> 00:30:58,000
so downtime is not required and then the

00:30:54,799 --> 00:30:59,519
service impact is minimal but can take

00:30:58,000 --> 00:31:03,200
longer and it

00:30:59,519 --> 00:31:05,679
can be more risky so for example if you

00:31:03,200 --> 00:31:07,039
upgrade the major version upgrade we

00:31:05,679 --> 00:31:10,240
recommend

00:31:07,039 --> 00:31:11,600
to choose the express upgrade because

00:31:10,240 --> 00:31:13,440
there are some technical challenges with

00:31:11,600 --> 00:31:16,640
rolling completes

00:31:13,440 --> 00:31:19,360
but the community is actively

00:31:16,640 --> 00:31:20,080
talking about this so a lot of work has

00:31:19,360 --> 00:31:23,360
been done

00:31:20,080 --> 00:31:23,919
it's a work in progress so should be

00:31:23,360 --> 00:31:26,720
part of

00:31:23,919 --> 00:31:30,080
the release soon i mean fixing or

00:31:26,720 --> 00:31:30,080
enhancing the rolling upgrades

00:31:30,159 --> 00:31:34,960
uh yeah okay i would like to give the

00:31:33,600 --> 00:31:38,720
word back to sonia

00:31:34,960 --> 00:31:40,640
to conclude uh thanks a lot uh so

00:31:38,720 --> 00:31:41,919
tell us through the uh state of the

00:31:40,640 --> 00:31:43,760
union sessions

00:31:41,919 --> 00:31:45,840
right so in summary like uh what you

00:31:43,760 --> 00:31:46,640
want to say that a lot of enterprises

00:31:45,840 --> 00:31:49,039
are actually

00:31:46,640 --> 00:31:51,200
called a large scale clusters right so

00:31:49,039 --> 00:31:54,399
which in the range of uh some of them

00:31:51,200 --> 00:31:55,919
even federated up to 40 to 60 k of nodes

00:31:54,399 --> 00:31:57,679
and and maybe a single class will go up

00:31:55,919 --> 00:31:59,760
to 20 to 25km

00:31:57,679 --> 00:32:01,279
there's a lot of scale improvements are

00:31:59,760 --> 00:32:02,320
happening and a lot of enterprises are

00:32:01,279 --> 00:32:04,799
actually using

00:32:02,320 --> 00:32:06,559
and um and that's at the scalability

00:32:04,799 --> 00:32:07,519
level at the adoption level even if you

00:32:06,559 --> 00:32:10,399
look at hadoop 3

00:32:07,519 --> 00:32:11,679
and lot of enterprises in terms of what

00:32:10,399 --> 00:32:13,360
we talked to they all

00:32:11,679 --> 00:32:15,519
moved to hadoop 3 and using it in

00:32:13,360 --> 00:32:16,720
production actively and running their

00:32:15,519 --> 00:32:19,039
workload so

00:32:16,720 --> 00:32:20,960
various companies have shared their

00:32:19,039 --> 00:32:21,600
stories and actually the blogs and

00:32:20,960 --> 00:32:23,679
etcetera

00:32:21,600 --> 00:32:25,600
how they have done it as a case study so

00:32:23,679 --> 00:32:27,440
uh it's great to see those things and

00:32:25,600 --> 00:32:29,200
also looking at the upgrade story so

00:32:27,440 --> 00:32:30,559
there's a lot of active discussions are

00:32:29,200 --> 00:32:31,200
happening in the community at this point

00:32:30,559 --> 00:32:33,039
of time

00:32:31,200 --> 00:32:34,320
where like how we are actually faring

00:32:33,039 --> 00:32:36,799
and what so uh

00:32:34,320 --> 00:32:38,399
in the upgrade and some of the uh some

00:32:36,799 --> 00:32:39,600
of them actually have done the rolling

00:32:38,399 --> 00:32:41,600
upgrade including there

00:32:39,600 --> 00:32:43,360
from how to hadoop three so it's great

00:32:41,600 --> 00:32:46,399
to see those things and it's coming in

00:32:43,360 --> 00:32:48,320
and getting merged to the our releases

00:32:46,399 --> 00:32:50,080
so we will be pretty much in a very

00:32:48,320 --> 00:32:51,919
strong state in terms of our great story

00:32:50,080 --> 00:32:54,080
with the rolling upgrade also so

00:32:51,919 --> 00:32:54,960
uh if you are out there in hadoop too we

00:32:54,080 --> 00:32:57,279
recommend you to

00:32:54,960 --> 00:32:59,360
upgrade to three at this point of time

00:32:57,279 --> 00:33:01,039
and uh there's a lot of case studies so

00:32:59,360 --> 00:33:01,919
uh reach out to us in the community so

00:33:01,039 --> 00:33:04,880
we can help you

00:33:01,919 --> 00:33:06,399
in whatever position uh we can so uh

00:33:04,880 --> 00:33:08,240
let's go to the next slide where we want

00:33:06,399 --> 00:33:10,960
to summarize like

00:33:08,240 --> 00:33:12,000
quickly uh just keeps you stopped like

00:33:10,960 --> 00:33:13,760
otherwise the website

00:33:12,000 --> 00:33:15,600
actually releases line how our release

00:33:13,760 --> 00:33:18,799
plan looks like and more than that

00:33:15,600 --> 00:33:19,919
we do have an active bi-weekly um coming

00:33:18,799 --> 00:33:22,799
this thing up happening

00:33:19,919 --> 00:33:24,000
so there is a meeting link there uh in

00:33:22,799 --> 00:33:26,000
the slide so we can share

00:33:24,000 --> 00:33:27,679
all of you guys so we do recommend all

00:33:26,000 --> 00:33:30,159
of you guys to join the sessions

00:33:27,679 --> 00:33:31,600
and uh share your married thoughts and

00:33:30,159 --> 00:33:33,679
uh use cases so

00:33:31,600 --> 00:33:35,519
as a community we can together discuss

00:33:33,679 --> 00:33:36,399
and brainstorm and get those things for

00:33:35,519 --> 00:33:38,559
you so

00:33:36,399 --> 00:33:41,200
uh that is pretty much it uh from our

00:33:38,559 --> 00:33:43,279
side and again uh before uh partying i

00:33:41,200 --> 00:33:45,039
definitely would like to give a shout

00:33:43,279 --> 00:33:48,159
out to the entire set of

00:33:45,039 --> 00:33:50,799
hadoop uh uh contributors out there who

00:33:48,159 --> 00:33:51,519
uh made uh these uh setup features what

00:33:50,799 --> 00:33:52,880
you just saw

00:33:51,519 --> 00:33:54,240
because these are only done by a couple

00:33:52,880 --> 00:33:55,519
of us right there and there and

00:33:54,240 --> 00:33:56,880
community support and

00:33:55,519 --> 00:33:58,880
all of them actually accounted with the

00:33:56,880 --> 00:34:01,519
source code and over the period of time

00:33:58,880 --> 00:34:03,039
uh and gave this massive awesome feature

00:34:01,519 --> 00:34:05,039
sector to hadoop3 so

00:34:03,039 --> 00:34:07,279
thanks to all of all of you guys and a

00:34:05,039 --> 00:34:10,079
big shout out to the community here

00:34:07,279 --> 00:34:11,679
and that's pretty much it uh from myself

00:34:10,079 --> 00:34:16,079
and salah as we're signing off

00:34:11,679 --> 00:34:16,079
any questions i will take it now thank

00:34:18,839 --> 00:34:21,839
you

00:34:30,960 --> 00:34:37,040
so i'm looking at the chat window yeah

00:34:34,639 --> 00:34:38,480
so there is a question at any plan to

00:34:37,040 --> 00:34:41,679
support amd

00:34:38,480 --> 00:34:43,919
roc gpu so at this point of time uh we

00:34:41,679 --> 00:34:47,040
have done integrated with nmedia but

00:34:43,919 --> 00:34:51,040
as salad mentioned we have done a

00:34:47,040 --> 00:34:53,440
plug-in model of a strong device plug-in

00:34:51,040 --> 00:34:56,000
framework on top of the yarn so if any

00:34:53,440 --> 00:34:58,800
new hardware device plus need to be

00:34:56,000 --> 00:35:00,320
merged to yarn it becomes a simple uh

00:34:58,800 --> 00:35:02,960
implementation of a

00:35:00,320 --> 00:35:04,000
exposed uh class so you just need to

00:35:02,960 --> 00:35:05,839
come with your hr

00:35:04,000 --> 00:35:07,520
and uh put and just do the basic

00:35:05,839 --> 00:35:09,040
implementation and there you go

00:35:07,520 --> 00:35:11,119
everything else behind the scenes we

00:35:09,040 --> 00:35:12,880
take care of it so at this point of time

00:35:11,119 --> 00:35:15,040
what it matters is i should just write a

00:35:12,880 --> 00:35:17,920
plugin for that particular amd ros

00:35:15,040 --> 00:35:18,880
are of same gpus and it should ideally

00:35:17,920 --> 00:35:21,359
be working

00:35:18,880 --> 00:35:22,240
but it is not uh yet there uh we

00:35:21,359 --> 00:35:25,280
definitely need some

00:35:22,240 --> 00:35:26,960
help from the community to do that uh so

00:35:25,280 --> 00:35:29,839
there's another question from our

00:35:26,960 --> 00:35:31,520
gate session and he's excited to see the

00:35:29,839 --> 00:35:34,640
improvements in the unknown thing

00:35:31,520 --> 00:35:36,160
um so there's a question that laura that

00:35:34,640 --> 00:35:37,280
told a capacity schedule will be

00:35:36,160 --> 00:35:39,040
deprecated and see

00:35:37,280 --> 00:35:41,680
if there's six hundred ways to migrate

00:35:39,040 --> 00:35:44,160
uh uh scheduler right so

00:35:41,680 --> 00:35:46,079
yes that's correct so um that's actually

00:35:44,160 --> 00:35:48,720
uh the product level uh

00:35:46,079 --> 00:35:50,240
discussion for that but a lot of effort

00:35:48,720 --> 00:35:52,880
is gone to

00:35:50,240 --> 00:35:54,640
mike uh like do the transition from pair

00:35:52,880 --> 00:35:56,720
scheduler to capacity scheduler in a

00:35:54,640 --> 00:35:58,560
seamless fashion and why we did so

00:35:56,720 --> 00:36:00,960
it's basically that a lot of supports

00:35:58,560 --> 00:36:02,720
like no label attributes and further

00:36:00,960 --> 00:36:04,320
features are there in capacity scheduler

00:36:02,720 --> 00:36:05,520
and a lot of concentration when they

00:36:04,320 --> 00:36:06,640
have to improve the performance and

00:36:05,520 --> 00:36:08,240
that's the reason why

00:36:06,640 --> 00:36:10,320
uh we just try to improve that much

00:36:08,240 --> 00:36:12,000
further and further so it becomes much

00:36:10,320 --> 00:36:13,680
more easier and so fs

00:36:12,000 --> 00:36:15,359
users can actually easily migrate to the

00:36:13,680 --> 00:36:17,680
capacity schedule and get the

00:36:15,359 --> 00:36:18,960
whole a new set of features and use

00:36:17,680 --> 00:36:22,160
their in their

00:36:18,960 --> 00:36:24,800
day-to-day deployment model so

00:36:22,160 --> 00:36:25,599
uh and there is also a very clear talk

00:36:24,800 --> 00:36:28,000
is going to happen

00:36:25,599 --> 00:36:30,160
as mentioned by silat uh in that we'll

00:36:28,000 --> 00:36:31,680
be talking about fs2cs migration tool

00:36:30,160 --> 00:36:32,320
itself because it's an independent tool

00:36:31,680 --> 00:36:34,800
to migrate

00:36:32,320 --> 00:36:36,720
fs xml to capacityxml so and that

00:36:34,800 --> 00:36:39,839
session should ideally give you a much

00:36:36,720 --> 00:36:41,200
more detailed

00:36:39,839 --> 00:36:44,240
so there's a question from brahma

00:36:41,200 --> 00:36:44,560
already uh uh 20k cluster single you

00:36:44,240 --> 00:36:46,320
know

00:36:44,560 --> 00:36:48,079
a single cluster any bottlenecks or

00:36:46,320 --> 00:36:49,119
suggestions and they can highlight some

00:36:48,079 --> 00:36:50,640
points from this

00:36:49,119 --> 00:36:52,960
so this is basically we got a feedback

00:36:50,640 --> 00:36:54,079
from some of our community uh partners

00:36:52,960 --> 00:36:55,839
and

00:36:54,079 --> 00:36:57,200
they just shared that like uh such an

00:36:55,839 --> 00:36:58,000
improvement was possible and they were

00:36:57,200 --> 00:36:59,680
able to run

00:36:58,000 --> 00:37:01,280
there's a challenge in terms of scale

00:36:59,680 --> 00:37:02,720
definitely there uh and

00:37:01,280 --> 00:37:04,320
they found bottlenecks in terms of

00:37:02,720 --> 00:37:06,000
non-heartbeats and also there is tuning

00:37:04,320 --> 00:37:08,640
down in terms of async scheduling

00:37:06,000 --> 00:37:09,359
to make it even more seamless and a

00:37:08,640 --> 00:37:10,960
bunch of

00:37:09,359 --> 00:37:12,800
effort went into that and most of them

00:37:10,960 --> 00:37:14,640
is contributed back to the

00:37:12,800 --> 00:37:22,160
data source code so ideally that should

00:37:14,640 --> 00:37:24,240
be able to cover

00:37:22,160 --> 00:37:36,560
so uh i think uh there's a question

00:37:24,240 --> 00:37:37,920
about cloud review so those are the

00:37:36,560 --> 00:37:41,040
questions at this point of time

00:37:37,920 --> 00:37:41,040
that i got it um

00:37:43,920 --> 00:37:47,119
i will just wait for another couple of

00:37:45,839 --> 00:37:51,839
more minutes to see

00:37:47,119 --> 00:37:51,839
any more questions

00:38:20,960 --> 00:38:24,320
so there is another question uh from the

00:38:23,200 --> 00:38:26,560
about

00:38:24,320 --> 00:38:27,599
the scheduling improvements uh

00:38:26,560 --> 00:38:29,760
fortunately

00:38:27,599 --> 00:38:31,200
uh yes we just mentioned about only the

00:38:29,760 --> 00:38:33,359
yarn side of the changes

00:38:31,200 --> 00:38:35,280
and increments part yeah i think there

00:38:33,359 --> 00:38:36,880
is some changes in hdfs i'm not very

00:38:35,280 --> 00:38:38,960
sure about that side like whether that

00:38:36,880 --> 00:38:40,000
particular enterprise used hdfs or not

00:38:38,960 --> 00:38:42,240
in the scenario

00:38:40,000 --> 00:38:44,480
but it was more about yarn and how the

00:38:42,240 --> 00:38:47,520
yarn can be scaled so yeah it was not

00:38:44,480 --> 00:38:49,200
about the storage side of the world

00:38:47,520 --> 00:38:50,960
so the question is capacity scheduler

00:38:49,200 --> 00:38:53,359
recommended now so uh

00:38:50,960 --> 00:38:54,800
it's it's a choice basically even the

00:38:53,359 --> 00:38:55,599
user level right which one you need to

00:38:54,800 --> 00:38:58,320
choose so

00:38:55,599 --> 00:38:59,920
when we did compare between fs and cs

00:38:58,320 --> 00:39:02,640
and we just found some of the feature

00:38:59,920 --> 00:39:04,720
sets like node labels or attributes and

00:39:02,640 --> 00:39:05,839
those are very very useful for the

00:39:04,720 --> 00:39:08,079
customers to

00:39:05,839 --> 00:39:09,680
uh try out in their uh production

00:39:08,079 --> 00:39:10,560
environments and which matches to their

00:39:09,680 --> 00:39:12,480
expectation to

00:39:10,560 --> 00:39:14,560
get much more finer control on the

00:39:12,480 --> 00:39:15,520
resources so and not label was not

00:39:14,560 --> 00:39:17,359
supported in active

00:39:15,520 --> 00:39:19,440
schedule so that is also one of the

00:39:17,359 --> 00:39:21,599
reasons why many of the users

00:39:19,440 --> 00:39:22,960
are actually preferred on cs and by

00:39:21,599 --> 00:39:24,800
looking at the other aspects so

00:39:22,960 --> 00:39:26,320
we try to bridge the gap now so that

00:39:24,800 --> 00:39:27,599
most of the fair scheduled fairness

00:39:26,320 --> 00:39:29,280
policies is an accepter extra candle

00:39:27,599 --> 00:39:31,119
supporting capacity scheduler

00:39:29,280 --> 00:39:33,200
so we're trying to improve a lot in this

00:39:31,119 --> 00:39:34,880
uh last one here to improve the capacity

00:39:33,200 --> 00:39:36,800
scheduler to have the fundamental

00:39:34,880 --> 00:39:38,160
concept of fair schedule and also

00:39:36,800 --> 00:39:40,880
beyond that uh to improve the

00:39:38,160 --> 00:39:43,680
performance so yes uh it is a good

00:39:40,880 --> 00:39:44,640
good option to try out the scheduler uh

00:39:43,680 --> 00:39:46,400
definitely and

00:39:44,640 --> 00:39:48,400
all the meantime uh just uh see that

00:39:46,400 --> 00:39:49,920
like whether it matches your expectation

00:39:48,400 --> 00:39:52,160
if you are coming from a fair schedule

00:39:49,920 --> 00:39:53,920
also and if there are gaps yeah

00:39:52,160 --> 00:39:56,160
you are very much welcome to suggest to

00:39:53,920 --> 00:39:57,839
us the thoughts by creating jiras or

00:39:56,160 --> 00:40:01,119
participating with us in the community

00:39:57,839 --> 00:40:01,119
and we can try to improve that

00:40:07,280 --> 00:40:10,960
okay i think that was one of the last

00:40:09,599 --> 00:40:13,599
session

00:40:10,960 --> 00:40:14,160
sorry last question is that anything

00:40:13,599 --> 00:40:17,440
else

00:40:14,160 --> 00:40:20,640
you want to share no

00:40:17,440 --> 00:40:24,160
i don't think so so i will stop

00:40:20,640 --> 00:40:27,760
sharing right now

00:40:24,160 --> 00:40:29,920
um thank you all i think almost our time

00:40:27,760 --> 00:40:31,440
is up right

00:40:29,920 --> 00:40:33,440
yeah thank you everyone for attending

00:40:31,440 --> 00:40:34,880
thank you everyone and have a great day

00:40:33,440 --> 00:40:39,839
and have a great apache

00:40:34,880 --> 00:40:39,839
thank you yeah thank you bye

00:41:31,280 --> 00:41:33,359

YouTube URL: https://www.youtube.com/watch?v=VUXDk68H3Zs


