Title: Edge to AI: Analytics from Edge to Cloud with Efficient Movement of Machine Data
Publication date: 2020-10-17
Playlist: ApacheCon @Home 2020: Machine Learning
Description: 
	Edge to AI: Analytics from Edge to Cloud with Efficient Movement of Machine Data
Timothy Spann, Paul Vidal

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/


In this talk, we will walk you through the simple steps to build and deploy machine learning for sentiment analysis and YOLO object detection as part of an IoT application that starts from devices collecting sensor data and camera images with MiNiFi. This data is streamed to Apache NiFi which integrates with Cloudera Data Science Workbench for classification with models in real-time as part of the real-time event stream. We parse, filter, fork, sort, query with SQL, dissect, enrich, transform,utilizing TensorFlow and MXNet processors in NiFi, join and aggregate data as it is ingested. The data is landed in Big Data stores in the cloud for batch and interactive analytics with Apache Flink, Apache Spark, Apache Hive, Apache Kudu and Apache Impala. Utilizing Intel Movidius, NVidia Jetson Xavier, NVidia Jetson Nano and Google Coral Edge processors as part of a real-time streaming deep learning flow that includes Deep Learning Classification at the edge, at the gateway, in the cloud and at every step along the way. Reference: https://blog.cloudera.com/blog/2019/02/integrating-machine-learning-models-into-your-big-data-pipelines-in-real-time-with-no-coding/ https://community.cloudera.com/t5/Community-Articles/Edge-to-AI-IoT-Sensors-and-Images-Streaming-Ingest-and/ta-p/249474 https://community.cloudera.com/t5/Community-Articles/Using-Cloudera-Data-Science-Workbench-with-Apache-NiFi-and/ta-p/249469 https://github.com/tspannhw/nifi-cdsw

Tim Spann is a Principal DataFlow Field Engineer at Cloudera, the Big Data Zone leader and blogger at DZone and an experienced data engineer with 15 years of experience. He runs the Future of Data Princeton meetup as well as other events. He has spoken at Philly Open Source, ApacheCon in Montreal, Strata NYC, Oracle Code NYC, IoT Fusion in Philly, meetups in Princeton, NYC, Philly, Berlin and Prague, DataWorks Summits in San Jose, Washington DC, Barcelona, Berlin and Sydney. https://www.youtube.com/watch?v=bOfSnNVum_M&t=397s
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,000 --> 00:00:28,240
good

00:00:26,080 --> 00:00:30,080
so welcome guys so i'm monitoring

00:00:28,240 --> 00:00:33,360
multiple chats at the same time so

00:00:30,080 --> 00:00:36,559
if you have questions during the uh uh

00:00:33,360 --> 00:00:39,200
the session feel free to um you know

00:00:36,559 --> 00:00:40,160
write in the chat and and tim will be

00:00:39,200 --> 00:00:43,440
monitoring

00:00:40,160 --> 00:00:46,960
uh this so

00:00:43,440 --> 00:00:50,719
just before we start um uh

00:00:46,960 --> 00:00:52,640
some tim uh i need no introduction

00:00:50,719 --> 00:00:54,719
but it's a principal data for engineer

00:00:52,640 --> 00:00:56,480
all right at clare

00:00:54,719 --> 00:00:59,840
uh i'm a principal social engineer

00:00:56,480 --> 00:00:59,840
atlanta as well my

00:00:59,920 --> 00:01:03,440
dominant expertise is kind of the cloud

00:01:02,239 --> 00:01:06,880
deployments

00:01:03,440 --> 00:01:10,010
of different tool sets but

00:01:06,880 --> 00:01:11,600
for today i took a

00:01:10,010 --> 00:01:14,320
[Music]

00:01:11,600 --> 00:01:16,159
page from the management learning side

00:01:14,320 --> 00:01:19,759
for a personal project

00:01:16,159 --> 00:01:21,040
uh that uh i had in mind and i'm gonna

00:01:19,759 --> 00:01:22,640
be leveraging some of

00:01:21,040 --> 00:01:24,479
the cool things you can do in the cloud

00:01:22,640 --> 00:01:25,200
and some streaming to be able to bring

00:01:24,479 --> 00:01:28,640
that to

00:01:25,200 --> 00:01:32,400
life and the problematic here

00:01:28,640 --> 00:01:34,479
is identifying magic gathering cards so

00:01:32,400 --> 00:01:37,520
let me let me dive into this

00:01:34,479 --> 00:01:39,439
first um you know

00:01:37,520 --> 00:01:40,880
what are magic the gathering cards for

00:01:39,439 --> 00:01:42,560
those who

00:01:40,880 --> 00:01:44,320
don't know like first yeah obviously i'm

00:01:42,560 --> 00:01:45,200
a massive nerd but for those who don't

00:01:44,320 --> 00:01:49,040
know

00:01:45,200 --> 00:01:52,439
um this is um

00:01:49,040 --> 00:01:55,600
a trading card game that was invented in

00:01:52,439 --> 00:01:57,200
1993 by uh rachel gothel

00:01:55,600 --> 00:01:58,880
right and it's an awesome game it's it's

00:01:57,200 --> 00:02:02,000
very fun it's very deep

00:01:58,880 --> 00:02:04,719
uh and um

00:02:02,000 --> 00:02:05,360
it's it's you know i just can't stop

00:02:04,719 --> 00:02:07,759
playing it

00:02:05,360 --> 00:02:09,039
so one of the things that the problem

00:02:07,759 --> 00:02:10,160
with those cars is you can see like i

00:02:09,039 --> 00:02:12,480
have a deck here

00:02:10,160 --> 00:02:13,520
uh a box and those cards can be fairly

00:02:12,480 --> 00:02:16,560
valuable

00:02:13,520 --> 00:02:18,000
so you have to like sleeve them and

00:02:16,560 --> 00:02:19,840
double sleeve them

00:02:18,000 --> 00:02:22,400
if you want to play with them and so the

00:02:19,840 --> 00:02:24,640
shuffling itself is a pain it's like

00:02:22,400 --> 00:02:26,080
it's kind of like

00:02:24,640 --> 00:02:28,160
especially if you have small hands and

00:02:26,080 --> 00:02:30,800
you're not very very good at this

00:02:28,160 --> 00:02:32,239
uh you you're gonna spend some time

00:02:30,800 --> 00:02:36,400
shuffling it and

00:02:32,239 --> 00:02:38,400
in any game of magic uh you have

00:02:36,400 --> 00:02:40,000
you know a lot of time where you need to

00:02:38,400 --> 00:02:41,440
look something into your deck into the

00:02:40,000 --> 00:02:43,040
library you need to find a

00:02:41,440 --> 00:02:45,440
way to get there and it's like really

00:02:43,040 --> 00:02:48,720
painful so a friend of mine and i

00:02:45,440 --> 00:02:50,239
got tired of it and said you know what

00:02:48,720 --> 00:02:52,560
if you build a shuffler machine

00:02:50,239 --> 00:02:54,160
right that will do that for you and kind

00:02:52,560 --> 00:02:56,480
of give you the uh

00:02:54,160 --> 00:02:57,920
um the ability to feed a card whenever

00:02:56,480 --> 00:02:59,599
you need it so there's a problematic of

00:02:57,920 --> 00:03:02,480
like building the feeder itself which

00:02:59,599 --> 00:03:03,360
i didn't take uh it didn't take charge

00:03:02,480 --> 00:03:06,720
of because my

00:03:03,360 --> 00:03:08,080
my buddy's doing it but um regardless of

00:03:06,720 --> 00:03:09,760
what we're doing we need to be able to

00:03:08,080 --> 00:03:12,000
identify those cards

00:03:09,760 --> 00:03:12,800
as they go through the feeder to be able

00:03:12,000 --> 00:03:14,720
to know

00:03:12,800 --> 00:03:16,720
what where they are and when they are in

00:03:14,720 --> 00:03:19,840
the

00:03:16,720 --> 00:03:21,680
in the shuffle so uh

00:03:19,840 --> 00:03:23,280
there was there's privately attempts of

00:03:21,680 --> 00:03:26,080
that and and you know uh

00:03:23,280 --> 00:03:28,080
identify card has been quite popular in

00:03:26,080 --> 00:03:29,599
like this for instance a tcg player app

00:03:28,080 --> 00:03:32,480
that allows you like you scan

00:03:29,599 --> 00:03:33,360
your collection for bag sales or or

00:03:32,480 --> 00:03:36,560
stuff like this

00:03:33,360 --> 00:03:39,760
um there's spell table as well that uh

00:03:36,560 --> 00:03:41,040
you know is is used for for edh players

00:03:39,760 --> 00:03:42,720
um

00:03:41,040 --> 00:03:44,400
uh you know especially when you're in

00:03:42,720 --> 00:03:45,280
covid where you basically point a camera

00:03:44,400 --> 00:03:48,000
on top of

00:03:45,280 --> 00:03:49,200
your table and it tells you which cards

00:03:48,000 --> 00:03:51,519
is on the table

00:03:49,200 --> 00:03:53,120
so that people can see it better but for

00:03:51,519 --> 00:03:56,239
problematic for me

00:03:53,120 --> 00:03:57,360
uh i want to have something that runs uh

00:03:56,239 --> 00:04:00,480
on the edge

00:03:57,360 --> 00:04:01,040
and uh be is able to identify card

00:04:00,480 --> 00:04:04,480
quickly

00:04:01,040 --> 00:04:05,120
right um and so i thought about

00:04:04,480 --> 00:04:08,239
different

00:04:05,120 --> 00:04:09,920
ways to to approach this and i'm gonna

00:04:08,239 --> 00:04:11,599
dive and double click on

00:04:09,920 --> 00:04:13,200
on the one that i spent a little bit of

00:04:11,599 --> 00:04:16,880
time on uh

00:04:13,200 --> 00:04:20,000
but i will you know go over also

00:04:16,880 --> 00:04:23,600
the other stuff that i tried so

00:04:20,000 --> 00:04:27,360
the um the first thing that i tried

00:04:23,600 --> 00:04:30,160
was to use ocr so ocr

00:04:27,360 --> 00:04:31,120
uh is so it's a character recognition uh

00:04:30,160 --> 00:04:34,320
there's a

00:04:31,120 --> 00:04:37,360
the python library called tesseract um

00:04:34,320 --> 00:04:39,040
and there is some example where you

00:04:37,360 --> 00:04:42,080
build a tesseract

00:04:39,040 --> 00:04:44,320
dictionary for uh magical gathering

00:04:42,080 --> 00:04:45,919
the problem with magic the gathering

00:04:44,320 --> 00:04:49,520
cards is that

00:04:45,919 --> 00:04:50,320
um the the fonts and especially on the

00:04:49,520 --> 00:04:52,479
title

00:04:50,320 --> 00:04:54,560
like it it's you know it's very hard to

00:04:52,479 --> 00:04:57,919
see i don't know if you can see here but

00:04:54,560 --> 00:05:01,039
the difference between this and like

00:04:57,919 --> 00:05:03,120
that it's quite significant right

00:05:01,039 --> 00:05:05,199
and what you end up doing is when when

00:05:03,120 --> 00:05:08,560
we try to to um

00:05:05,199 --> 00:05:09,280
to identify this using ocr you know you

00:05:08,560 --> 00:05:12,639
can see

00:05:09,280 --> 00:05:13,840
sort of like the the type but the car

00:05:12,639 --> 00:05:16,800
name is just garbage

00:05:13,840 --> 00:05:17,680
right you can still you can sort of get

00:05:16,800 --> 00:05:20,320
this because it's

00:05:17,680 --> 00:05:21,680
on the on the white uh on the on the

00:05:20,320 --> 00:05:23,039
white background

00:05:21,680 --> 00:05:26,000
but other than that it's like kind of

00:05:23,039 --> 00:05:29,680
hard so that just didn't work out

00:05:26,000 --> 00:05:31,360
so my next

00:05:29,680 --> 00:05:32,960
attempt is the one that i'm going to

00:05:31,360 --> 00:05:35,440
dive into

00:05:32,960 --> 00:05:36,000
is to use transfer learning so transfer

00:05:35,440 --> 00:05:40,160
learning

00:05:36,000 --> 00:05:43,520
is a way to um retrain

00:05:40,160 --> 00:05:45,919
a uh a neural net with a

00:05:43,520 --> 00:05:47,759
different set of images and this is

00:05:45,919 --> 00:05:51,199
something the work that

00:05:47,759 --> 00:05:54,240
uh is based on what ian brooks that

00:05:51,199 --> 00:05:56,800
were in a previous session um

00:05:54,240 --> 00:05:57,840
had done to identify some of uh our logo

00:05:56,800 --> 00:06:01,039
detection

00:05:57,840 --> 00:06:04,400
and so i decided to take um

00:06:01,039 --> 00:06:07,120
what ian did and try to adapt it to

00:06:04,400 --> 00:06:08,000
um to magically gathering because i

00:06:07,120 --> 00:06:11,360
figured

00:06:08,000 --> 00:06:11,840
you know if i can identify at least the

00:06:11,360 --> 00:06:15,520
image

00:06:11,840 --> 00:06:17,919
the art on the card would be a good way

00:06:15,520 --> 00:06:19,759
to be able to identify the card itself

00:06:17,919 --> 00:06:21,199
uh rather than like trying to fight to

00:06:19,759 --> 00:06:24,560
do character recognition

00:06:21,199 --> 00:06:25,280
right um and i know that this worked on

00:06:24,560 --> 00:06:27,759
the on a

00:06:25,280 --> 00:06:28,479
on a edge device because it's just

00:06:27,759 --> 00:06:33,120
running a

00:06:28,479 --> 00:06:35,680
um a tensorflow um mode also and i had

00:06:33,120 --> 00:06:37,280
a i had a dev board that uh that is

00:06:35,680 --> 00:06:39,120
running a gpu so i figured it would be a

00:06:37,280 --> 00:06:42,720
good idea

00:06:39,120 --> 00:06:44,560
um in in terms of uh

00:06:42,720 --> 00:06:45,759
um overview this is kind of what it

00:06:44,560 --> 00:06:47,520
looks like

00:06:45,759 --> 00:06:49,039
by the way i started training this on my

00:06:47,520 --> 00:06:52,880
computer and

00:06:49,039 --> 00:06:55,440
uh it was like super slow so i figured

00:06:52,880 --> 00:06:56,000
i'm a cloud engineer so why not use the

00:06:55,440 --> 00:06:58,400
cloud

00:06:56,000 --> 00:06:59,840
and spin up a couple of gpus to train

00:06:58,400 --> 00:07:01,680
the model right and that's that it's

00:06:59,840 --> 00:07:05,599
generally good practice

00:07:01,680 --> 00:07:07,280
you i've tried to run some

00:07:05,599 --> 00:07:09,919
you know compile some stuff on my

00:07:07,280 --> 00:07:12,960
raspberry pi and i may or may not have

00:07:09,919 --> 00:07:13,840
tried it so i don't encourage you to do

00:07:12,960 --> 00:07:17,039
this

00:07:13,840 --> 00:07:20,000
um so i have i'm going to show you here

00:07:17,039 --> 00:07:21,440
i have a machine learning um you know

00:07:20,000 --> 00:07:22,720
this is the cholera machine learning

00:07:21,440 --> 00:07:26,240
this is basically

00:07:22,720 --> 00:07:30,479
deploying um

00:07:26,240 --> 00:07:34,080
a kubernetes cluster on um

00:07:30,479 --> 00:07:37,039
on aks sorry on eks on on aws

00:07:34,080 --> 00:07:38,000
this point basically going to tr train

00:07:37,039 --> 00:07:39,840
the model here

00:07:38,000 --> 00:07:41,120
i mean do data augmentation train the

00:07:39,840 --> 00:07:43,120
model there

00:07:41,120 --> 00:07:44,160
then leveraging knife i'm going to take

00:07:43,120 --> 00:07:46,879
this data

00:07:44,160 --> 00:07:48,400
uh that is in the the model that i'm

00:07:46,879 --> 00:07:49,039
going to put in an s3 bucket and then

00:07:48,400 --> 00:07:52,960
push it

00:07:49,039 --> 00:07:55,599
back to my um to my choral dev cpu

00:07:52,960 --> 00:07:56,400
and what's interesting here is that this

00:07:55,599 --> 00:07:59,440
is

00:07:56,400 --> 00:08:02,720
typically the this could be

00:07:59,440 --> 00:08:03,919
obviously enhanced but this kind of

00:08:02,720 --> 00:08:04,479
architecture is kind of what you're

00:08:03,919 --> 00:08:06,560
going to see

00:08:04,479 --> 00:08:08,000
at larger scale right obviously you

00:08:06,560 --> 00:08:11,599
wouldn't directly

00:08:08,000 --> 00:08:13,360
upload the the model to one uh tpu right

00:08:11,599 --> 00:08:16,479
this is where you would leverage

00:08:13,360 --> 00:08:19,360
technologies like um efm

00:08:16,479 --> 00:08:20,080
right yeah so you have knife i talk into

00:08:19,360 --> 00:08:23,120
multiple

00:08:20,080 --> 00:08:24,160
uh um minify agents and like updating

00:08:23,120 --> 00:08:26,960
those flows

00:08:24,160 --> 00:08:28,160
but um this is you know something that

00:08:26,960 --> 00:08:29,440
works at scale and you'll see that

00:08:28,160 --> 00:08:29,919
there's there's a couple of stuff that

00:08:29,440 --> 00:08:32,560
are

00:08:29,919 --> 00:08:35,760
interesting that takes care of all the

00:08:32,560 --> 00:08:39,360
security aspects of of of this transfer

00:08:35,760 --> 00:08:41,519
so without further ado

00:08:39,360 --> 00:08:42,959
um let's have a look at what it looks

00:08:41,519 --> 00:08:46,080
like so

00:08:42,959 --> 00:08:48,000
i have my uh clara data platform here

00:08:46,080 --> 00:08:49,440
i have you know different experience i

00:08:48,000 --> 00:08:52,399
went into the machine learning

00:08:49,440 --> 00:08:53,360
aspect and i have a you know basically a

00:08:52,399 --> 00:08:56,720
project

00:08:53,360 --> 00:08:58,959
and it's running now and this project is

00:08:56,720 --> 00:09:00,240
basically i imported it from my github

00:08:58,959 --> 00:09:02,240
and i'll give you the

00:09:00,240 --> 00:09:04,000
link to the github afterwards but i just

00:09:02,240 --> 00:09:05,839
pulled it from the github

00:09:04,000 --> 00:09:07,519
and i currently have a session that is

00:09:05,839 --> 00:09:08,959
running and what you notice is this

00:09:07,519 --> 00:09:12,240
session is actually

00:09:08,959 --> 00:09:15,519
running where you with eight uh vcpu

00:09:12,240 --> 00:09:18,560
two gpus and it's actually using a

00:09:15,519 --> 00:09:20,000
custom image that i made uh because i

00:09:18,560 --> 00:09:22,399
wanted to use you know i wanted to

00:09:20,000 --> 00:09:27,200
leverage those uh those gpus

00:09:22,399 --> 00:09:30,480
and you know um um

00:09:27,200 --> 00:09:32,560
ian used a tensorflow 1.15 that required

00:09:30,480 --> 00:09:34,240
a the cuda library 10.0

00:09:32,560 --> 00:09:36,000
so i had to build a custom image but

00:09:34,240 --> 00:09:38,320
it's fairly easy like you you

00:09:36,000 --> 00:09:39,440
create a custom image and and and you

00:09:38,320 --> 00:09:41,360
deploy

00:09:39,440 --> 00:09:42,560
so let's have a look a little bit about

00:09:41,360 --> 00:09:45,279
um

00:09:42,560 --> 00:09:46,000
you know the the steps that you will

00:09:45,279 --> 00:09:47,600
have to

00:09:46,000 --> 00:09:49,040
to follow i'm going to start my training

00:09:47,600 --> 00:09:51,440
here right

00:09:49,040 --> 00:09:53,040
to uh to generate this so the first

00:09:51,440 --> 00:09:56,160
thing that you have to

00:09:53,040 --> 00:09:59,200
do is i have

00:09:56,160 --> 00:10:04,000
essentially um i

00:09:59,200 --> 00:10:05,680
i run into um

00:10:04,000 --> 00:10:07,200
you get to you need to get the images

00:10:05,680 --> 00:10:07,839
right you need to get the images from

00:10:07,200 --> 00:10:11,519
somewhere

00:10:07,839 --> 00:10:13,760
so i have here a couple of example

00:10:11,519 --> 00:10:15,279
images that i took like so a couple of

00:10:13,760 --> 00:10:17,839
uh um

00:10:15,279 --> 00:10:19,680
pictures that i've taken of urza right

00:10:17,839 --> 00:10:22,079
so i have this picture taken like this

00:10:19,680 --> 00:10:22,959
i have a picture that is that is uh

00:10:22,079 --> 00:10:25,279
moved around

00:10:22,959 --> 00:10:26,079
a little bit and the first thing that's

00:10:25,279 --> 00:10:29,360
that

00:10:26,079 --> 00:10:30,959
i'm going to do here is you know

00:10:29,360 --> 00:10:33,279
obviously this is training for one card

00:10:30,959 --> 00:10:36,399
you could have a lot more

00:10:33,279 --> 00:10:39,680
i i tried different methods um

00:10:36,399 --> 00:10:43,279
i tried to download directly the

00:10:39,680 --> 00:10:46,880
images from a the squire fall api

00:10:43,279 --> 00:10:48,399
but they were very um you know polished

00:10:46,880 --> 00:10:50,240
and that didn't really work

00:10:48,399 --> 00:10:51,760
so here what i did is i did a bunch of

00:10:50,240 --> 00:10:53,519
different pictures

00:10:51,760 --> 00:10:55,440
and more importantly the first thing

00:10:53,519 --> 00:10:56,480
that i'm doing before actually training

00:10:55,440 --> 00:10:58,399
the model

00:10:56,480 --> 00:10:59,760
and i am and by this i mean like doing

00:10:58,399 --> 00:11:02,959
transfer learning

00:10:59,760 --> 00:11:04,800
i actually do uh data augmentation so if

00:11:02,959 --> 00:11:05,519
you look at it and i automated all this

00:11:04,800 --> 00:11:08,720
right

00:11:05,519 --> 00:11:12,800
but what i've done is i i

00:11:08,720 --> 00:11:12,800
by leveraging a data augmentation

00:11:13,360 --> 00:11:20,399
library basically from one picture

00:11:16,720 --> 00:11:21,839
will generate a bunch of like you know

00:11:20,399 --> 00:11:24,560
pictures like this where you're gonna

00:11:21,839 --> 00:11:27,040
have like it's gonna be slightly

00:11:24,560 --> 00:11:28,160
uh moving a little bit changing a little

00:11:27,040 --> 00:11:30,640
bit the the

00:11:28,160 --> 00:11:31,279
um uh the luminosity and so on and so

00:11:30,640 --> 00:11:34,640
forth

00:11:31,279 --> 00:11:38,000
so that the um uh

00:11:34,640 --> 00:11:39,200
the the model has you know a lot more

00:11:38,000 --> 00:11:43,279
data because

00:11:39,200 --> 00:11:45,040
once you um i i went from

00:11:43,279 --> 00:11:46,560
essentially i think i took like five or

00:11:45,040 --> 00:11:50,160
ten ten different picture

00:11:46,560 --> 00:11:53,920
to like ten times that right so

00:11:50,160 --> 00:11:56,240
you end up having a lot more cards to um

00:11:53,920 --> 00:11:56,240
um

00:11:57,279 --> 00:12:03,760
a lot more images to play with than uh

00:12:00,800 --> 00:12:06,160
then you um you would have normally so

00:12:03,760 --> 00:12:09,040
this is a very important step because

00:12:06,160 --> 00:12:10,959
uh it allows to as you know like the

00:12:09,040 --> 00:12:12,720
those neural net will train better with

00:12:10,959 --> 00:12:13,680
a lot of data so the first step really

00:12:12,720 --> 00:12:17,120
was to do this

00:12:13,680 --> 00:12:20,560
this data augmentation piece um

00:12:17,120 --> 00:12:24,880
from there i basically um

00:12:20,560 --> 00:12:28,800
i i run a um i i downloaded this

00:12:24,880 --> 00:12:31,920
uh this ssd um free trade model

00:12:28,800 --> 00:12:35,120
that is here right and i

00:12:31,920 --> 00:12:38,560
do transfer learning using those images

00:12:35,120 --> 00:12:42,800
uh on uh

00:12:38,560 --> 00:12:44,399
from from from this um from this model

00:12:42,800 --> 00:12:47,120
so you can look at what it looks like

00:12:44,399 --> 00:12:48,639
here um so this is what kind of like one

00:12:47,120 --> 00:12:51,040
of the cool things with

00:12:48,639 --> 00:12:53,920
um clutter and machine learning is that

00:12:51,040 --> 00:12:53,920
you get the ability to

00:12:55,519 --> 00:13:01,120
do terminal access like this and so

00:12:58,800 --> 00:13:02,399
i can run my thing which is basically

00:13:01,120 --> 00:13:04,959
train

00:13:02,399 --> 00:13:06,160
card for this particular the this

00:13:04,959 --> 00:13:09,360
particular card

00:13:06,160 --> 00:13:09,839
and this will um you know start the

00:13:09,360 --> 00:13:12,560
training

00:13:09,839 --> 00:13:13,760
at a specific checkpoint so as the the

00:13:12,560 --> 00:13:16,320
thing is running

00:13:13,760 --> 00:13:17,519
uh you'll see that it will create a

00:13:16,320 --> 00:13:19,040
checkpoint for your model

00:13:17,519 --> 00:13:20,560
right and it will take the last one the

00:13:19,040 --> 00:13:23,600
last one is like

00:13:20,560 --> 00:13:26,160
98.25 and what is that important is that

00:13:23,600 --> 00:13:26,880
as you start training this model you can

00:13:26,160 --> 00:13:29,600
just take

00:13:26,880 --> 00:13:30,480
these checkpoints and compile it into a

00:13:29,600 --> 00:13:32,959
model

00:13:30,480 --> 00:13:34,399
uh that you're going to be able to um to

00:13:32,959 --> 00:13:36,560
run right

00:13:34,399 --> 00:13:37,519
um and so what you'll see here so it's

00:13:36,560 --> 00:13:41,040
starting the

00:13:37,519 --> 00:13:43,839
uh the the training what i

00:13:41,040 --> 00:13:45,360
uh what i witnessed is that as you can

00:13:43,839 --> 00:13:48,079
see in the uh

00:13:45,360 --> 00:13:49,680
in the readme of the project when i'm

00:13:48,079 --> 00:13:53,120
running it on my

00:13:49,680 --> 00:13:56,880
uh on my cpu

00:13:53,120 --> 00:14:00,240
it'll take like two to four seconds

00:13:56,880 --> 00:14:02,160
to do one step and when you notice here

00:14:00,240 --> 00:14:03,440
is once you're going to start running it

00:14:02,160 --> 00:14:05,460
on gpu

00:14:03,440 --> 00:14:06,720
right leveraging the um

00:14:05,460 --> 00:14:09,600
[Music]

00:14:06,720 --> 00:14:10,320
the cuda's libraries you'll see that it

00:14:09,600 --> 00:14:14,959
runs

00:14:10,320 --> 00:14:18,079
at about you know

00:14:14,959 --> 00:14:21,279
four 0.4 per step so

00:14:18,079 --> 00:14:23,839
obviously like that allows you to to um

00:14:21,279 --> 00:14:25,600
uh to try to do a lot more training in a

00:14:23,839 --> 00:14:26,240
much shorter amount of time right and

00:14:25,600 --> 00:14:27,760
that's

00:14:26,240 --> 00:14:31,519
you know that's kind of the the beauty

00:14:27,760 --> 00:14:33,120
of these um uh

00:14:31,519 --> 00:14:34,720
this colorado machine learning is that

00:14:33,120 --> 00:14:36,399
you can basically run a

00:14:34,720 --> 00:14:38,079
jupiter notebook and like just call out

00:14:36,399 --> 00:14:39,519
like hey i want a couple of gpus can you

00:14:38,079 --> 00:14:43,360
help me train my model

00:14:39,519 --> 00:14:45,680
so i'm going to wait for it to load

00:14:43,360 --> 00:14:47,199
but you know you'll see that soon enough

00:14:45,680 --> 00:14:49,440
well i have an example here right

00:14:47,199 --> 00:14:51,040
you'll see that once you start like uh

00:14:49,440 --> 00:14:54,240
humming you're looking at like

00:14:51,040 --> 00:14:57,360
0.4 to 0.5 seconds average

00:14:54,240 --> 00:15:00,560
to do this training which is which is

00:14:57,360 --> 00:15:02,240
substantial if you know you don't want

00:15:00,560 --> 00:15:05,120
to have your computer running for

00:15:02,240 --> 00:15:06,079
24 7 for like three days to run a small

00:15:05,120 --> 00:15:08,639
model

00:15:06,079 --> 00:15:10,079
uh once you've done this there's a

00:15:08,639 --> 00:15:13,279
couple of scripts that you

00:15:10,079 --> 00:15:15,600
that i run to basically model

00:15:13,279 --> 00:15:16,800
the uh to package the model like when

00:15:15,600 --> 00:15:19,680
i'm doing it on my

00:15:16,800 --> 00:15:20,800
local computer i'm just directly um

00:15:19,680 --> 00:15:24,000
inserting into my

00:15:20,800 --> 00:15:27,360
my cpu but

00:15:24,000 --> 00:15:30,320
uh what i've done here is

00:15:27,360 --> 00:15:30,639
i'm actually saving it into an s3 bucket

00:15:30,320 --> 00:15:35,600
so

00:15:30,639 --> 00:15:39,839
this is still running but i had this um

00:15:35,600 --> 00:15:42,240
small um

00:15:39,839 --> 00:15:42,959
this small python code that basically

00:15:42,240 --> 00:15:45,759
takes

00:15:42,959 --> 00:15:47,279
one file and create it and puts it into

00:15:45,759 --> 00:15:50,000
an s3 bucket

00:15:47,279 --> 00:15:51,759
so here is the like the interesting part

00:15:50,000 --> 00:15:54,320
and some of the things that

00:15:51,759 --> 00:15:55,360
can be a little bit tricky um but i'm

00:15:54,320 --> 00:15:58,320
not really

00:15:55,360 --> 00:16:00,320
using a an integrity platform like ours

00:15:58,320 --> 00:16:04,079
i am able to

00:16:00,320 --> 00:16:07,519
uh basically get um aws

00:16:04,079 --> 00:16:11,120
temporary credential from the uh

00:16:07,519 --> 00:16:14,720
from the cloudera id broker um

00:16:11,120 --> 00:16:15,279
uh api whereas i mean essentially you

00:16:14,720 --> 00:16:18,720
know in

00:16:15,279 --> 00:16:22,079
in florera you have this this um

00:16:18,720 --> 00:16:25,680
concept of um like

00:16:22,079 --> 00:16:28,240
a an sdx layer and what that does

00:16:25,680 --> 00:16:29,920
it's it allows the translation from all

00:16:28,240 --> 00:16:33,120
of your different services

00:16:29,920 --> 00:16:37,279
to your cloud um

00:16:33,120 --> 00:16:39,600
to your cloud assets so typically here

00:16:37,279 --> 00:16:40,560
i am only allowed to go to this

00:16:39,600 --> 00:16:44,079
particular bucket

00:16:40,560 --> 00:16:47,360
that is the the pvivs bucket

00:16:44,079 --> 00:16:49,199
um and just by um

00:16:47,360 --> 00:16:51,360
and i have this service called id broker

00:16:49,199 --> 00:16:51,920
that is basically that is actually part

00:16:51,360 --> 00:16:54,639
of the

00:16:51,920 --> 00:16:55,440
knox apache project if you want to check

00:16:54,639 --> 00:16:58,480
it out

00:16:55,440 --> 00:17:02,240
that allows you to do translation of

00:16:58,480 --> 00:17:02,959
um aws and azure credential and cloud

00:17:02,240 --> 00:17:07,039
credentials

00:17:02,959 --> 00:17:10,160
essentially uh to a um

00:17:07,039 --> 00:17:11,199
from kerberos to this to this uh cloud

00:17:10,160 --> 00:17:13,120
credential

00:17:11,199 --> 00:17:14,799
and that's like super important because

00:17:13,120 --> 00:17:16,319
here i'm look i'm authenticated as

00:17:14,799 --> 00:17:19,199
myself as paul

00:17:16,319 --> 00:17:19,760
uh in um in kerberos because it's it's

00:17:19,199 --> 00:17:22,319
this is

00:17:19,760 --> 00:17:23,919
the way that uh you know the the hadoop

00:17:22,319 --> 00:17:27,679
system is using us for

00:17:23,919 --> 00:17:28,319
uh uh identification mostly and i get to

00:17:27,679 --> 00:17:31,520
translate

00:17:28,319 --> 00:17:32,559
my identity as kerberos to a temporary

00:17:31,520 --> 00:17:35,440
access token

00:17:32,559 --> 00:17:37,760
which is which is huge right because

00:17:35,440 --> 00:17:39,520
that you don't have to bypass this

00:17:37,760 --> 00:17:40,799
and then i'm just doing a simple thing

00:17:39,520 --> 00:17:43,840
that says hey like

00:17:40,799 --> 00:17:46,000
using these temporary things like

00:17:43,840 --> 00:17:48,320
upload a file from and like i'm

00:17:46,000 --> 00:17:52,320
uploading like this

00:17:48,320 --> 00:17:55,520
this image so let's say i could go

00:17:52,320 --> 00:17:59,360
home cdsw example

00:17:55,520 --> 00:18:03,440
card right and the card

00:17:59,360 --> 00:18:03,440
so actually so emg

00:18:04,720 --> 00:18:11,360
zero three seven zero dot j

00:18:07,919 --> 00:18:14,400
egg um and i'm gonna

00:18:11,360 --> 00:18:18,720
push it under uh mtg

00:18:14,400 --> 00:18:22,320
vision at and this is going directly to

00:18:18,720 --> 00:18:23,039
my the roots of my sex which is the pvi

00:18:22,320 --> 00:18:26,559
vis bucket

00:18:23,039 --> 00:18:29,840
right and so if i i'm going to stop the

00:18:26,559 --> 00:18:29,840
sorry the training

00:18:30,320 --> 00:18:37,600
no need to use those um

00:18:34,160 --> 00:18:40,799
i can run this and so this will request

00:18:37,600 --> 00:18:43,760
my temporary token and etc

00:18:40,799 --> 00:18:45,440
and what you'll see is you know once

00:18:43,760 --> 00:18:48,880
once you get the um

00:18:45,440 --> 00:18:50,559
the uh the response from the api

00:18:48,880 --> 00:18:52,559
what you'll see is that eventually it

00:18:50,559 --> 00:18:56,160
will show up into

00:18:52,559 --> 00:19:00,080
uh my mtt vision folder

00:18:56,160 --> 00:19:00,799
now the what you have to remember is

00:19:00,080 --> 00:19:03,840
that

00:19:00,799 --> 00:19:06,160
uh uh f3

00:19:03,840 --> 00:19:07,280
is like eventually consistent so it

00:19:06,160 --> 00:19:08,840
might take some time oh

00:19:07,280 --> 00:19:11,360
but i may be actually reading this

00:19:08,840 --> 00:19:12,240
directly what i'm doing afterwards from

00:19:11,360 --> 00:19:16,080
there

00:19:12,240 --> 00:19:19,039
is i'm using a knife

00:19:16,080 --> 00:19:20,960
so i have a small cluster knife it is

00:19:19,039 --> 00:19:23,039
tied to the same environment

00:19:20,960 --> 00:19:25,760
and what this thing does is if i go to

00:19:23,039 --> 00:19:28,960
to the knife eyepiece

00:19:25,760 --> 00:19:31,600
uh it's going to take the

00:19:28,960 --> 00:19:32,160
um he's going to read this this folder

00:19:31,600 --> 00:19:34,240
this

00:19:32,160 --> 00:19:36,240
this s3 folder that i was talking about

00:19:34,240 --> 00:19:37,520
and because i'm an idiot i probably

00:19:36,240 --> 00:19:40,720
deleted

00:19:37,520 --> 00:19:41,760
the yeah basically knifi takes the data

00:19:40,720 --> 00:19:44,559
directly from the bucket

00:19:41,760 --> 00:19:45,760
and like deletes it and then deletes it

00:19:44,559 --> 00:19:49,440
uh automatically

00:19:45,760 --> 00:19:53,200
so i have a get fdfs processor

00:19:49,440 --> 00:19:55,919
hdfs goes actually underneath to

00:19:53,200 --> 00:19:57,200
s3 using id broker again like it does

00:19:55,919 --> 00:19:59,440
this exchange without

00:19:57,200 --> 00:20:00,320
transparently and what you'll see here

00:19:59,440 --> 00:20:03,039
is that

00:20:00,320 --> 00:20:03,679
as i start putting stuff in there i'm

00:20:03,039 --> 00:20:07,200
going to see

00:20:03,679 --> 00:20:09,120
the the data that i just pushed from

00:20:07,200 --> 00:20:12,159
uh from this so here in this example

00:20:09,120 --> 00:20:14,559
obviously uh i'm doing the uh

00:20:12,159 --> 00:20:15,919
uh i'm sending the the image itself but

00:20:14,559 --> 00:20:19,120
this is where i would push

00:20:15,919 --> 00:20:21,200
my compiled uh my compiled model

00:20:19,120 --> 00:20:23,360
and then i have something that just

00:20:21,200 --> 00:20:27,600
doesn't put sftp

00:20:23,360 --> 00:20:30,880
and i had to change the the port because

00:20:27,600 --> 00:20:31,440
my isp doesn't like opening 422 for some

00:20:30,880 --> 00:20:34,080
reason

00:20:31,440 --> 00:20:35,679
i mean i don't know why we think that

00:20:34,080 --> 00:20:39,200
would be a bad idea

00:20:35,679 --> 00:20:42,960
uh but if i start this and start

00:20:39,200 --> 00:20:45,760
uh refreshing it you'll see that um

00:20:42,960 --> 00:20:46,480
it's gonna start uploading and now i can

00:20:45,760 --> 00:20:50,080
basically

00:20:46,480 --> 00:20:53,039
like connect to my um

00:20:50,080 --> 00:20:53,679
to my this is my uh core tpu and you'll

00:20:53,039 --> 00:20:55,840
see that

00:20:53,679 --> 00:20:57,360
i uploaded the file so that's gotta give

00:20:55,840 --> 00:20:59,280
you the end to end right you training

00:20:57,360 --> 00:21:02,880
you do data automation you're training

00:20:59,280 --> 00:21:05,360
it and then you're pushing it to your um

00:21:02,880 --> 00:21:06,159
to you to your tpu right and then what

00:21:05,360 --> 00:21:09,600
you can do

00:21:06,159 --> 00:21:13,200
is once you have this uh you can run

00:21:09,600 --> 00:21:16,640
uh so obviously in my case i i had

00:21:13,200 --> 00:21:20,080
uploaded this tensorflow lite uh

00:21:16,640 --> 00:21:23,919
model right and i can start running it

00:21:20,080 --> 00:21:28,640
directly on my uh

00:21:23,919 --> 00:21:32,559
on my um cp so

00:21:28,640 --> 00:21:35,919
now i can connect to

00:21:32,559 --> 00:21:39,440
this thing 10.0.0 blah blah

00:21:35,919 --> 00:21:42,640
not 49 i think you know dhcp

00:21:39,440 --> 00:21:45,520
guys all right i have this running

00:21:42,640 --> 00:21:47,440
okay and then i can start running and

00:21:45,520 --> 00:21:51,440
try to identify and see if she

00:21:47,440 --> 00:21:53,280
sees uh urzah okay it can't just

00:21:51,440 --> 00:21:54,640
kind of see it i haven't finished the

00:21:53,280 --> 00:21:57,200
training but you know what

00:21:54,640 --> 00:21:58,640
so i have this thing that is running but

00:21:57,200 --> 00:22:01,440
you'll see like

00:21:58,640 --> 00:22:02,559
what i found out is that it was you know

00:22:01,440 --> 00:22:06,320
it was kind of a pain

00:22:02,559 --> 00:22:09,440
to be honest um and it wasn't like

00:22:06,320 --> 00:22:13,840
super well suited for

00:22:09,440 --> 00:22:17,120
um it was super well suited for

00:22:13,840 --> 00:22:17,919
identifying cards per se but it was an

00:22:17,120 --> 00:22:21,120
interesting

00:22:17,919 --> 00:22:25,120
thing nonetheless so what i have done

00:22:21,120 --> 00:22:27,120
is actually one step further um

00:22:25,120 --> 00:22:28,400
the and then just to summarize and then

00:22:27,120 --> 00:22:31,039
we'll we'll talk about

00:22:28,400 --> 00:22:32,159
uh by the the next step what i've done

00:22:31,039 --> 00:22:34,000
here's what i'm

00:22:32,159 --> 00:22:35,280
the the principle that i had in mind and

00:22:34,000 --> 00:22:35,919
it's and and the thing that you want to

00:22:35,280 --> 00:22:39,039
play with you

00:22:35,919 --> 00:22:42,320
and with which you can downloading the

00:22:39,039 --> 00:22:44,880
the uh the car database from

00:22:42,320 --> 00:22:46,240
uh from skyfall which is the site that

00:22:44,880 --> 00:22:48,559
does

00:22:46,240 --> 00:22:50,000
that category that shows um magic

00:22:48,559 --> 00:22:52,799
gathering card

00:22:50,000 --> 00:22:53,760
uh or we use an example card pictures a

00:22:52,799 --> 00:22:57,120
split image

00:22:53,760 --> 00:22:59,280
into training and testing i run the

00:22:57,120 --> 00:23:00,640
augmentation i do transfer learning and

00:22:59,280 --> 00:23:02,480
then i package the

00:23:00,640 --> 00:23:04,320
the model into so that it's compiled to

00:23:02,480 --> 00:23:04,960
an http and well you notice when you do

00:23:04,320 --> 00:23:08,080
the

00:23:04,960 --> 00:23:12,080
the uh the actual um

00:23:08,080 --> 00:23:15,760
uh compiling you'll notice that

00:23:12,080 --> 00:23:17,200
uh basically there's multiple operation

00:23:15,760 --> 00:23:18,799
and there's only one operation that is

00:23:17,200 --> 00:23:20,480
not running on the gpu so

00:23:18,799 --> 00:23:22,320
it's actually very efficient at using

00:23:20,480 --> 00:23:23,919
the tensorflow cpu

00:23:22,320 --> 00:23:27,120
then from there i'm getting the data

00:23:23,919 --> 00:23:31,440
from hdfs and i'm copying it directly to

00:23:27,120 --> 00:23:35,280
uh to my gpu again this would be

00:23:31,440 --> 00:23:39,120
a bit better now with that said

00:23:35,280 --> 00:23:42,400
uh let me uh

00:23:39,120 --> 00:23:46,720
that is true let me show you what i

00:23:42,400 --> 00:23:48,480
have done and i'm gonna try to do this

00:23:46,720 --> 00:23:50,000
here let's see i'm gonna stop sharing

00:23:48,480 --> 00:23:54,240
here and see if i can

00:23:50,000 --> 00:23:54,240
share this

00:23:54,320 --> 00:23:56,720
okay

00:24:00,159 --> 00:24:08,240
i mean i mean two places at once

00:24:04,640 --> 00:24:10,159
oh right yes good job that's uh

00:24:08,240 --> 00:24:11,279
that's a trick you know that'll teach

00:24:10,159 --> 00:24:15,279
you someday

00:24:11,279 --> 00:24:17,840
let's see if i can share my stuff

00:24:15,279 --> 00:24:19,440
hello yeah so that's my personal

00:24:17,840 --> 00:24:22,880
computer so that's the next thing

00:24:19,440 --> 00:24:26,080
i'm working on um and

00:24:22,880 --> 00:24:29,520
instead of using uh data augmentation

00:24:26,080 --> 00:24:33,279
here what i'm doing is i am using

00:24:29,520 --> 00:24:36,320
orb features and

00:24:33,279 --> 00:24:38,330
and comparing them from

00:24:36,320 --> 00:24:40,320
the gatherer

00:24:38,330 --> 00:24:42,320
[Music]

00:24:40,320 --> 00:24:44,400
images which is kind of describeful it's

00:24:42,320 --> 00:24:47,279
just the official wizard stuff

00:24:44,400 --> 00:24:47,600
and i am comparing them to the features

00:24:47,279 --> 00:24:49,600
that i

00:24:47,600 --> 00:24:50,640
that i get from my webcam the reason why

00:24:49,600 --> 00:24:52,240
i'm using this is because it's not

00:24:50,640 --> 00:24:56,400
working on this webcam

00:24:52,240 --> 00:24:58,000
so uh here for now i'm doing it per set

00:24:56,400 --> 00:24:59,200
but if i take a set for instance more

00:24:58,000 --> 00:25:02,559
than mass

00:24:59,200 --> 00:25:05,760
on the horizon and i take a picture

00:25:02,559 --> 00:25:07,840
what you notice is um if

00:25:05,760 --> 00:25:08,960
i don't have a glare this is actually

00:25:07,840 --> 00:25:11,679
fairly efficient

00:25:08,960 --> 00:25:12,400
at finding out which card it is so if i

00:25:11,679 --> 00:25:16,880
do

00:25:12,400 --> 00:25:19,919
i'm trying to show this

00:25:16,880 --> 00:25:20,880
and i'm reading it boom identify the

00:25:19,919 --> 00:25:22,320
chord automatically

00:25:20,880 --> 00:25:24,080
the thing that takes this is actually

00:25:22,320 --> 00:25:25,360
very efficient the thing that takes time

00:25:24,080 --> 00:25:26,720
the thing the most thing that this time

00:25:25,360 --> 00:25:27,600
is actually downloading the picture from

00:25:26,720 --> 00:25:29,440
the internet

00:25:27,600 --> 00:25:31,039
because i packed a package the feature

00:25:29,440 --> 00:25:34,320
so that the the feature

00:25:31,039 --> 00:25:38,000
don't hold the image the original

00:25:34,320 --> 00:25:40,480
original image itself right um i can

00:25:38,000 --> 00:25:42,080
check for other sets for instance let's

00:25:40,480 --> 00:25:44,080
say um a

00:25:42,080 --> 00:25:46,880
toronto bell brain oh yeah this doesn't

00:25:44,080 --> 00:25:51,360
work well this is work in progress guys

00:25:46,880 --> 00:25:53,520
uh but uh so stone of our brain

00:25:51,360 --> 00:25:54,960
if i start you see like the problem is

00:25:53,520 --> 00:25:56,159
glare like i don't know if it's gonna be

00:25:54,960 --> 00:26:00,480
able to properly identify

00:25:56,159 --> 00:26:03,039
this it did damn it

00:26:00,480 --> 00:26:04,000
but if i if i move around and it's going

00:26:03,039 --> 00:26:06,159
to say i want to

00:26:04,000 --> 00:26:08,880
meet nightcluck and try to get a little

00:26:06,159 --> 00:26:08,880
bit more glare

00:26:09,600 --> 00:26:16,000
damn it it's so good all right okay so

00:26:12,640 --> 00:26:17,360
this works great no problem uh but what

00:26:16,000 --> 00:26:18,720
i found out is like a little bit of

00:26:17,360 --> 00:26:22,159
glare and it was a

00:26:18,720 --> 00:26:23,279
little bit of a pain um so this is hey

00:26:22,159 --> 00:26:25,039
let's see

00:26:23,279 --> 00:26:26,960
like yeah let's see if i put some glare

00:26:25,039 --> 00:26:29,840
here yeah you see like that's

00:26:26,960 --> 00:26:31,120
kind of like causing problem so most

00:26:29,840 --> 00:26:34,559
likely what we're gonna have to do

00:26:31,120 --> 00:26:36,400
is um you know find a way to have the

00:26:34,559 --> 00:26:38,000
proper set of sleeves

00:26:36,400 --> 00:26:40,400
so that it doesn't reflect as much

00:26:38,000 --> 00:26:43,440
because if i like if i remove the sleeve

00:26:40,400 --> 00:26:46,000
uh and try to be put this in front of

00:26:43,440 --> 00:26:46,000
the camera

00:26:46,799 --> 00:26:50,960
this becomes much easier right and you

00:26:48,880 --> 00:26:52,080
can see the number like here you can see

00:26:50,960 --> 00:26:55,200
the features

00:26:52,080 --> 00:26:58,320
that are um that are matching right

00:26:55,200 --> 00:27:01,600
here um the

00:26:58,320 --> 00:27:05,200
cool thing about this is that um

00:27:01,600 --> 00:27:08,559
i uh the the whole

00:27:05,200 --> 00:27:11,919
set here like i have four sets here

00:27:08,559 --> 00:27:15,360
that only has a couple of features and

00:27:11,919 --> 00:27:17,120
it's take a it's it's it's

00:27:15,360 --> 00:27:19,120
basically i calculated if i want the

00:27:17,120 --> 00:27:21,840
whole because there's like there's like

00:27:19,120 --> 00:27:23,520
thousand cards and 500 sets with with

00:27:21,840 --> 00:27:25,520
the different printings and etc

00:27:23,520 --> 00:27:27,120
so if you want to push that at the edge

00:27:25,520 --> 00:27:30,000
what you want to avoid

00:27:27,120 --> 00:27:31,679
to have to call an api to to run your

00:27:30,000 --> 00:27:35,520
model right you want to be able to

00:27:31,679 --> 00:27:37,679
have it to run directly on the um

00:27:35,520 --> 00:27:38,640
on the on the raspberry pi or whatever

00:27:37,679 --> 00:27:42,159
it is

00:27:38,640 --> 00:27:44,559
uh and the the problem is uh

00:27:42,159 --> 00:27:46,080
the if you have to store too many

00:27:44,559 --> 00:27:46,880
features that's going to be problematic

00:27:46,080 --> 00:27:49,600
right

00:27:46,880 --> 00:27:50,080
here we're looking at like max i think

00:27:49,600 --> 00:27:53,600
if

00:27:50,080 --> 00:27:56,000
everything fits completely uncompressed

00:27:53,600 --> 00:27:57,279
uh and i didn't do any optimization it's

00:27:56,000 --> 00:28:00,399
no more than eight gig

00:27:57,279 --> 00:28:03,840
on on the uh on the desk

00:28:00,399 --> 00:28:07,039
right and with some proper uh

00:28:03,840 --> 00:28:08,640
with some proper memory flushing and etc

00:28:07,039 --> 00:28:11,120
this thing is actually very very

00:28:08,640 --> 00:28:13,679
efficient so

00:28:11,120 --> 00:28:14,960
yeah i mean there's also cost right

00:28:13,679 --> 00:28:16,480
because you don't want to have like if

00:28:14,960 --> 00:28:18,159
you want to do this at scale

00:28:16,480 --> 00:28:21,039
we don't want to have too much of it

00:28:18,159 --> 00:28:23,520
right but right now i get my body

00:28:21,039 --> 00:28:24,320
that actually i'm going to stop the

00:28:23,520 --> 00:28:26,880
share but

00:28:24,320 --> 00:28:28,480
so that you have the i can show you the

00:28:26,880 --> 00:28:32,159
actual thing

00:28:28,480 --> 00:28:35,520
if you give me a second um

00:28:32,159 --> 00:28:38,799
i have a picture of

00:28:35,520 --> 00:28:42,159
our feeder um and

00:28:38,799 --> 00:28:44,480
the thing that we are working on

00:28:42,159 --> 00:28:45,440
and what we found out is even with the

00:28:44,480 --> 00:28:48,559
um

00:28:45,440 --> 00:28:53,039
yeah even with the feeder

00:28:48,559 --> 00:28:55,039
here um nine times out of

00:28:53,039 --> 00:28:56,720
like except for this one card that he

00:28:55,039 --> 00:29:00,320
sent me just to uh

00:28:56,720 --> 00:29:01,600
to make fun of me uh you this is the

00:29:00,320 --> 00:29:04,799
feeder that is running

00:29:01,600 --> 00:29:07,840
behind it and so even with this like

00:29:04,799 --> 00:29:10,840
we we tested with a a

00:29:07,840 --> 00:29:12,000
big set and we are actually able to

00:29:10,840 --> 00:29:16,720
identify

00:29:12,000 --> 00:29:20,480
um 95 of the time the right card

00:29:16,720 --> 00:29:23,520
and it's lightweight and it's um

00:29:20,480 --> 00:29:26,000
and it doesn't take much memory so

00:29:23,520 --> 00:29:27,120
that was uh that was kind of an

00:29:26,000 --> 00:29:31,600
interesting

00:29:27,120 --> 00:29:35,279
journey the next step is uh obviously

00:29:31,600 --> 00:29:37,600
it's going to be um you know making it

00:29:35,279 --> 00:29:38,960
make the model more efficient uh

00:29:37,600 --> 00:29:40,159
probably because right now i'm using

00:29:38,960 --> 00:29:43,520
just a k n with

00:29:40,159 --> 00:29:46,480
uh um

00:29:43,520 --> 00:29:48,159
on those rb features uh very simple but

00:29:46,480 --> 00:29:50,559
it seems to be efficient enough but

00:29:48,159 --> 00:29:51,919
and then it's going to have to

00:29:50,559 --> 00:29:55,520
distribute across

00:29:51,919 --> 00:29:58,720
the fleet of um

00:29:55,520 --> 00:30:01,200
of shufflers right so that's

00:29:58,720 --> 00:30:02,799
that will require some some magic what's

00:30:01,200 --> 00:30:06,320
probably gonna have to

00:30:02,799 --> 00:30:08,320
happen is um you

00:30:06,320 --> 00:30:09,600
can prob we're probably going to have to

00:30:08,320 --> 00:30:12,000
have a base that is

00:30:09,600 --> 00:30:13,600
like a phone application that is going

00:30:12,000 --> 00:30:14,799
to push to the to the firmware

00:30:13,600 --> 00:30:16,799
that's kind of the way that we see it

00:30:14,799 --> 00:30:18,320
because also you want to be able to

00:30:16,799 --> 00:30:20,240
navigate through your deck and say

00:30:18,320 --> 00:30:22,240
hey i want this card or i want to say

00:30:20,240 --> 00:30:22,799
like hey i want like give me a new hand

00:30:22,240 --> 00:30:25,919
with

00:30:22,799 --> 00:30:27,120
that much land to uh spare ratio and

00:30:25,919 --> 00:30:29,600
stuff like this

00:30:27,120 --> 00:30:30,399
um but you you know we thought about

00:30:29,600 --> 00:30:33,760
like putting a

00:30:30,399 --> 00:30:36,480
um a screen on the uh

00:30:33,760 --> 00:30:37,600
on the machine itself but you'll never

00:30:36,480 --> 00:30:39,200
get a

00:30:37,600 --> 00:30:40,880
better screen than what you have on your

00:30:39,200 --> 00:30:43,440
phone right

00:30:40,880 --> 00:30:45,039
so it's it's probably it's probably

00:30:43,440 --> 00:30:47,760
gonna work this way so we're gonna have

00:30:45,039 --> 00:30:48,559
a bit of a firmware and then that allows

00:30:47,760 --> 00:30:51,200
us to push

00:30:48,559 --> 00:30:51,760
like more models and more key points

00:30:51,200 --> 00:30:53,840
when there's

00:30:51,760 --> 00:30:56,720
there's uh there's news tests that are

00:30:53,840 --> 00:31:00,559
coming up and and so on and so forth

00:30:56,720 --> 00:31:05,360
so that's kind of my talk

00:31:00,559 --> 00:31:08,960
i left about um you know

00:31:05,360 --> 00:31:12,080
14 15 minutes per question i believe

00:31:08,960 --> 00:31:14,880
um anything that you uh

00:31:12,080 --> 00:31:17,200
i want to show you a few like give you

00:31:14,880 --> 00:31:19,919
the links to

00:31:17,200 --> 00:31:21,440
the different githubs so that you guys

00:31:19,919 --> 00:31:24,720
can play with all this

00:31:21,440 --> 00:31:27,200
the original i actually probably should

00:31:24,720 --> 00:31:30,399
switch

00:31:27,200 --> 00:31:31,440
oh you guys still hear me we can hear

00:31:30,399 --> 00:31:32,799
you

00:31:31,440 --> 00:31:35,760
i don't know which one it is but it's

00:31:32,799 --> 00:31:35,760
20. okay

00:31:36,000 --> 00:31:44,000
okay um so the first one

00:31:39,760 --> 00:31:44,000
and this is the work of um

00:31:44,159 --> 00:31:50,480
jan is going to be

00:31:47,440 --> 00:31:52,640
um so i'm going to stop sharing by the

00:31:50,480 --> 00:31:52,640
way

00:31:53,919 --> 00:31:57,440
i've been having a hard time like being

00:31:55,919 --> 00:31:58,960
in two places at once

00:31:57,440 --> 00:32:00,960
the the first github that you want to

00:31:58,960 --> 00:32:03,679
look at it's this one

00:32:00,960 --> 00:32:05,120
so this is the original from uh from yan

00:32:03,679 --> 00:32:06,000
that is looking at doing object

00:32:05,120 --> 00:32:08,720
detection

00:32:06,000 --> 00:32:09,760
but oh and and it's good for this

00:32:08,720 --> 00:32:11,760
particular

00:32:09,760 --> 00:32:12,960
uh type of work but it wasn't very good

00:32:11,760 --> 00:32:16,559
for in in my

00:32:12,960 --> 00:32:19,760
in my case the second one that

00:32:16,559 --> 00:32:23,279
uh the the the one that i based my

00:32:19,760 --> 00:32:26,559
rb model on is

00:32:23,279 --> 00:32:29,360
from uh

00:32:26,559 --> 00:32:29,919
i'm going to try to find this link uh

00:32:29,360 --> 00:32:32,720
there's a

00:32:29,919 --> 00:32:33,440
there's a guy that actually built uh uh

00:32:32,720 --> 00:32:36,480
his

00:32:33,440 --> 00:32:38,210
or theirs their thesis

00:32:36,480 --> 00:32:39,919
on um

00:32:38,210 --> 00:32:41,760
[Music]

00:32:39,919 --> 00:32:43,519
on the discard reader so that's what it

00:32:41,760 --> 00:32:46,559
did uh

00:32:43,519 --> 00:32:50,320
and i i'm in the process of making it

00:32:46,559 --> 00:32:53,120
a lot more efficient um

00:32:50,320 --> 00:32:54,399
then because you'll see it does a bunch

00:32:53,120 --> 00:32:56,480
of stuff that are like

00:32:54,399 --> 00:32:58,480
is basically loading the whole set with

00:32:56,480 --> 00:33:00,960
the images in memory

00:32:58,480 --> 00:33:02,480
and it doesn't save the feature and etc

00:33:00,960 --> 00:33:05,519
so i have a secret

00:33:02,480 --> 00:33:05,519
like um

00:33:06,480 --> 00:33:10,480
github that i haven't exposed yet

00:33:08,640 --> 00:33:13,039
because it's not ready

00:33:10,480 --> 00:33:13,919
but i have a private github on on how i

00:33:13,039 --> 00:33:16,240
augmented

00:33:13,919 --> 00:33:17,120
this particular work uh but if you're

00:33:16,240 --> 00:33:18,320
interested

00:33:17,120 --> 00:33:19,760
that's that's a lot of work and if

00:33:18,320 --> 00:33:20,720
you're interested of stuff that don't

00:33:19,760 --> 00:33:24,559
work

00:33:20,720 --> 00:33:26,720
uh you can forget a card identification

00:33:24,559 --> 00:33:30,640
i want to show you the one that is like

00:33:26,720 --> 00:33:34,159
uh this just doesn't work at all um

00:33:30,640 --> 00:33:38,080
is the one with the uh the tesseract

00:33:34,159 --> 00:33:41,600
um i think is this yeah the one

00:33:38,080 --> 00:33:45,519
uh the this github

00:33:41,600 --> 00:33:49,120
created a um

00:33:45,519 --> 00:33:51,919
an mtg dictionary for tesseract

00:33:49,120 --> 00:33:53,120
and this is the one that even using the

00:33:51,919 --> 00:33:56,799
example that are

00:33:53,120 --> 00:33:56,799
in the github just doesn't

00:33:57,360 --> 00:34:01,200
show them any card and always defers to

00:34:00,480 --> 00:34:04,640
uh

00:34:01,200 --> 00:34:07,360
to telling you that it's a moment anyway

00:34:04,640 --> 00:34:08,399
that's fun that's the end of my talk if

00:34:07,360 --> 00:34:09,679
you have

00:34:08,399 --> 00:34:11,599
you know i'm going to leave a little bit

00:34:09,679 --> 00:34:14,879
of time for questions

00:34:11,599 --> 00:34:18,720
based on some some feedback

00:34:14,879 --> 00:34:20,720
or want to ask me

00:34:18,720 --> 00:34:22,159
more just feel free to do so you can put

00:34:20,720 --> 00:34:25,280
in the chat

00:34:22,159 --> 00:34:27,520
or team if you have comments

00:34:25,280 --> 00:34:30,720
comment from him yeah i i wanted to

00:34:27,520 --> 00:34:34,560
mention your meetup coming october 15th

00:34:30,720 --> 00:34:37,919
right you got more time to go deep into

00:34:34,560 --> 00:34:40,800
discussions on that and if uh

00:34:37,919 --> 00:34:41,119
maybe people can put their card up to

00:34:40,800 --> 00:34:45,280
the

00:34:41,119 --> 00:34:47,839
uh up to the screen and you can scan it

00:34:45,280 --> 00:34:50,079
yeah so i what i'm what i'm hoping is

00:34:47,839 --> 00:34:52,000
that by the time i'm going to the meetup

00:34:50,079 --> 00:34:53,520
uh i will have it running on my

00:34:52,000 --> 00:34:56,480
raspberry pi

00:34:53,520 --> 00:34:57,920
uh the this stuff so like this is a

00:34:56,480 --> 00:34:59,119
quick qt interface

00:34:57,920 --> 00:35:02,000
that is garbage but i don't want to

00:34:59,119 --> 00:35:04,240
spend time on this um what i want is

00:35:02,000 --> 00:35:06,480
it's probably it would probably be cool

00:35:04,240 --> 00:35:09,040
if people can take a picture of their

00:35:06,480 --> 00:35:10,160
cards and upload them to a bucket that

00:35:09,040 --> 00:35:12,240
could make public

00:35:10,160 --> 00:35:13,839
and then i'll just push that back to the

00:35:12,240 --> 00:35:15,839
to my raspberry pi

00:35:13,839 --> 00:35:17,599
and that would be um there would be a

00:35:15,839 --> 00:35:19,440
way to see if it works or not

00:35:17,599 --> 00:35:21,040
so that we can not prepare and it

00:35:19,440 --> 00:35:21,599
actually that actually that sounds like

00:35:21,040 --> 00:35:25,040
fun

00:35:21,599 --> 00:35:27,920
um but like this will we'll we'll

00:35:25,040 --> 00:35:28,880
try in real time and see and see if it

00:35:27,920 --> 00:35:32,800
works or not

00:35:28,880 --> 00:35:37,599
but yeah public uploadable s3 though

00:35:32,800 --> 00:35:41,359
sorry public s3 that you could upload to

00:35:37,599 --> 00:35:44,000
yeah fine uh maybe they put it in

00:35:41,359 --> 00:35:45,359
that if you can't just share like people

00:35:44,000 --> 00:35:48,640
like

00:35:45,359 --> 00:35:50,400
you know people have uh webcams they can

00:35:48,640 --> 00:35:51,200
just do this and i'll do a screenshot on

00:35:50,400 --> 00:35:55,119
the

00:35:51,200 --> 00:35:58,000
on the on them on the meetup so

00:35:55,119 --> 00:35:58,960
well andre added something to the hji

00:35:58,000 --> 00:36:01,119
demo

00:35:58,960 --> 00:36:02,720
where it spins it up and you can open

00:36:01,119 --> 00:36:04,560
the web page

00:36:02,720 --> 00:36:06,960
publicly for a little while maybe you

00:36:04,560 --> 00:36:09,760
could add an upload screen to that

00:36:06,960 --> 00:36:10,320
upload the image and then shut that port

00:36:09,760 --> 00:36:14,400
down and me

00:36:10,320 --> 00:36:15,359
wow your cloud guys spin up a a tiny web

00:36:14,400 --> 00:36:17,440
server

00:36:15,359 --> 00:36:18,880
with upload for like 10 minutes and then

00:36:17,440 --> 00:36:22,880
shut it down

00:36:18,880 --> 00:36:24,560
yeah i could i could probably do that um

00:36:22,880 --> 00:36:26,000
but anyway that was a fun endeavor for

00:36:24,560 --> 00:36:28,720
for sure the

00:36:26,000 --> 00:36:29,359
uh i mean i did learn quite a bit like

00:36:28,720 --> 00:36:33,599
mostly

00:36:29,359 --> 00:36:33,599
i learned that uh i

00:36:33,680 --> 00:36:38,000
you you need to find the right model for

00:36:36,240 --> 00:36:39,839
the thing that you're trying to do

00:36:38,000 --> 00:36:41,520
um i think that there's a lot of

00:36:39,839 --> 00:36:43,359
advantage like

00:36:41,520 --> 00:36:44,560
the disadvantage of using like feature

00:36:43,359 --> 00:36:45,920
comparison is that

00:36:44,560 --> 00:36:47,680
you basically need to build a feature

00:36:45,920 --> 00:36:51,440
for every one

00:36:47,680 --> 00:36:54,880
uh and it's it's a um like i get

00:36:51,440 --> 00:36:58,079
it works better because it's a you know

00:36:54,880 --> 00:36:59,359
fixed set of images right but when

00:36:58,079 --> 00:37:02,960
you're looking at stuff like

00:36:59,359 --> 00:37:05,359
that in real life of like identifying

00:37:02,960 --> 00:37:07,200
people and things like this like you

00:37:05,359 --> 00:37:09,119
don't have a finite set of these are the

00:37:07,200 --> 00:37:12,240
different type of images

00:37:09,119 --> 00:37:15,520
um so anyway i learned a lot during this

00:37:12,240 --> 00:37:17,839
uh and you know i i'm

00:37:15,520 --> 00:37:20,079
you know uh relatively happy with the

00:37:17,839 --> 00:37:21,680
result because like as you saw like the

00:37:20,079 --> 00:37:23,760
the actual identification when it's

00:37:21,680 --> 00:37:28,640
working it's it's it's fairly efficient

00:37:23,760 --> 00:37:30,320
right it's decent results and fast

00:37:28,640 --> 00:37:32,880
yeah i mean the most time they spent

00:37:30,320 --> 00:37:35,440
it's like just um

00:37:32,880 --> 00:37:36,160
basically uh just downloading the image

00:37:35,440 --> 00:37:39,440
from the internet

00:37:36,160 --> 00:37:39,440
which is which is pretty cool

00:37:39,520 --> 00:37:46,400
here we are so um

00:37:44,000 --> 00:37:47,920
to prepare the memory recording for 12

00:37:46,400 --> 00:37:51,119
random tasks it came across

00:37:47,920 --> 00:37:55,280
everything estimated data set message b

00:37:51,119 --> 00:37:58,000
for it to work um

00:37:55,280 --> 00:37:59,119
yes it's a good question uh again this

00:37:58,000 --> 00:38:02,320
is why

00:37:59,119 --> 00:38:05,839
we um you can

00:38:02,320 --> 00:38:06,400
you can have uh um so michael you can

00:38:05,839 --> 00:38:10,640
have

00:38:06,400 --> 00:38:13,359
multiple um classifications right

00:38:10,640 --> 00:38:14,400
um it's a matter of how you classify

00:38:13,359 --> 00:38:17,680
those images

00:38:14,400 --> 00:38:19,119
right um the and there's two factors

00:38:17,680 --> 00:38:20,560
there's this and the amount of data that

00:38:19,119 --> 00:38:21,680
you have which is why i'm doing data

00:38:20,560 --> 00:38:24,720
augmentation

00:38:21,680 --> 00:38:28,240
you'll you look at the the logo tl from

00:38:24,720 --> 00:38:31,520
from yanan and basically

00:38:28,240 --> 00:38:35,839
um they can be

00:38:31,520 --> 00:38:38,000
they can be fairly similar but

00:38:35,839 --> 00:38:39,119
the more similar they are the more

00:38:38,000 --> 00:38:41,839
images you're going to

00:38:39,119 --> 00:38:43,680
need to be able to differentiate them

00:38:41,839 --> 00:38:45,520
and to train your your transfer learning

00:38:43,680 --> 00:38:48,800
model that's basically the way that

00:38:45,520 --> 00:38:52,079
they can think about it right

00:38:48,800 --> 00:38:52,079
uh hopefully that makes sense

00:38:54,160 --> 00:38:58,480
okay so i don't know how much time we

00:38:56,320 --> 00:39:01,839
have unloaded but i believe

00:38:58,480 --> 00:39:05,520
um we this session

00:39:01,839 --> 00:39:09,520
closes at 2

00:39:05,520 --> 00:39:12,079
55 i want to say um

00:39:09,520 --> 00:39:12,560
again like feel free to leave comments

00:39:12,079 --> 00:39:15,359
the

00:39:12,560 --> 00:39:16,960
stuff in uh on my github and etc i'll be

00:39:15,359 --> 00:39:22,000
happy to

00:39:16,960 --> 00:39:22,000
indulge in more nerdery if needed

00:39:24,079 --> 00:39:26,400
okay

00:39:27,680 --> 00:39:31,440
cool all right well i'm glad you guys

00:39:30,800 --> 00:39:34,560
enjoyed it

00:39:31,440 --> 00:39:35,839
you know like i said uh oh yeah one last

00:39:34,560 --> 00:39:38,960
thing like that maybe

00:39:35,839 --> 00:39:42,190
i can give you the uh the the meetup

00:39:38,960 --> 00:39:43,440
invites where i um

00:39:42,190 --> 00:39:45,359
[Music]

00:39:43,440 --> 00:39:46,480
we're gonna go a little bit even deeper

00:39:45,359 --> 00:39:50,400
into it

00:39:46,480 --> 00:39:54,560
um and

00:39:50,400 --> 00:39:56,240
we'll we'll talk about it uh

00:39:54,560 --> 00:39:58,240
if you guys are enjoying it obviously

00:39:56,240 --> 00:40:00,480
it's a philly meetup but

00:39:58,240 --> 00:40:02,720
uh i heard there was a some sort of a

00:40:00,480 --> 00:40:04,480
pandemic going on in the world

00:40:02,720 --> 00:40:05,839
and we're not supposed to talk to each

00:40:04,480 --> 00:40:08,960
other face to face

00:40:05,839 --> 00:40:11,440
so we decided to do it remote

00:40:08,960 --> 00:40:12,960
so if you want to join us basically

00:40:11,440 --> 00:40:16,880
anybody can join us as long as

00:40:12,960 --> 00:40:20,480
it's not too terrible of a um

00:40:16,880 --> 00:40:24,640
of a time of a time zone

00:40:20,480 --> 00:40:39,839
on this thanks again everybody and

00:40:24,640 --> 00:40:39,839
uh i will you know talk to you later

00:40:59,040 --> 00:41:01,119

YouTube URL: https://www.youtube.com/watch?v=SVSGU5FdjO8


