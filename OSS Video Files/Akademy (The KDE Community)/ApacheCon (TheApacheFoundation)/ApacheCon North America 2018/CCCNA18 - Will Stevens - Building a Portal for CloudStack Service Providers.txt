Title: CCCNA18 - Will Stevens - Building a Portal for CloudStack Service Providers
Publication date: 2018-11-20
Playlist: ApacheCon North America 2018
Description: 
	Will Stevens - Building a Portal for CloudStack Service Providers

A presentation from the Cloudstack Collaboration Conference, a part of ApacheCon North America 2018 in Montreal

http://ca.cloudstackcollab.org/
http://apachecon.com/acna18
Captions: 
	00:00:03,819 --> 00:00:13,910
all right so welcome to our talk today

00:00:08,830 --> 00:00:15,800
we found out about yesterday at about

00:00:13,910 --> 00:00:21,019
one o'clock that there was a free slot

00:00:15,800 --> 00:00:23,539
opened so the two of us kind of SWAT

00:00:21,019 --> 00:00:26,060
team dit and and put together a

00:00:23,539 --> 00:00:26,390
presentation for you over the last 24

00:00:26,060 --> 00:00:31,090
hours

00:00:26,390 --> 00:00:34,579
so yeah keep that in mind

00:00:31,090 --> 00:00:40,160
my name is is will Stevens I'm the CTO

00:00:34,579 --> 00:00:42,859
here at car ops and I'm here with my

00:00:40,160 --> 00:00:45,170
colleague mark blank oh yeah so I need

00:00:42,859 --> 00:00:47,690
the products develops and today we're

00:00:45,170 --> 00:00:49,910
gonna talk to you about the product

00:00:47,690 --> 00:00:52,910
called Colin C and we're really excited

00:00:49,910 --> 00:00:55,510
to share with this audience the the work

00:00:52,910 --> 00:00:58,429
that we've invested the last few years

00:00:55,510 --> 00:01:03,620
yeah so you probably got it if you came

00:00:58,429 --> 00:01:06,680
to the keynote on Monday with Mike he

00:01:03,620 --> 00:01:10,310
gave you a little bit of a hint at what

00:01:06,680 --> 00:01:12,290
cloud MC is able to do to deliver his

00:01:10,310 --> 00:01:13,970
products to market and so we're gonna

00:01:12,290 --> 00:01:18,010
get into a little bit more of that and

00:01:13,970 --> 00:01:23,570
how cloud MC integrates with cloud stack

00:01:18,010 --> 00:01:24,650
so we'll get into it this is basically

00:01:23,570 --> 00:01:27,140
we're good what we're gonna cover today

00:01:24,650 --> 00:01:30,050
will cover briefly cloud ops and our

00:01:27,140 --> 00:01:33,920
mission and background and then we'll

00:01:30,050 --> 00:01:35,690
get into the concepts around cloud MC we

00:01:33,920 --> 00:01:38,630
also have a little bit of a tidbit here

00:01:35,690 --> 00:01:45,590
that is kind of a special announcement

00:01:38,630 --> 00:01:49,670
just for this crowd so yeah so terms of

00:01:45,590 --> 00:01:53,390
cloud ops cloud ops is an organization

00:01:49,670 --> 00:01:56,930
that helps companies own their destiny

00:01:53,390 --> 00:01:59,780
in the cloud that's our mission we we do

00:01:56,930 --> 00:02:02,170
that by leveraging open-source pretty

00:01:59,780 --> 00:02:05,600
effectively open-source enables

00:02:02,170 --> 00:02:07,370
organizations to have flexibility about

00:02:05,600 --> 00:02:11,210
the technology stack that they're using

00:02:07,370 --> 00:02:14,540
and gives them an insurance policy

00:02:11,210 --> 00:02:16,430
towards future proofing their

00:02:14,540 --> 00:02:20,900
their products and services that they

00:02:16,430 --> 00:02:23,120
offer to the market we've been working

00:02:20,900 --> 00:02:27,230
with with cloud snack for for many years

00:02:23,120 --> 00:02:29,989
and it's been it's been a solid product

00:02:27,230 --> 00:02:37,209
for being able to deliver infrastructure

00:02:29,989 --> 00:02:41,120
as a service so we were founded in 2005

00:02:37,209 --> 00:02:43,970
and we've been growing pretty

00:02:41,120 --> 00:02:48,950
substantially over the over the last six

00:02:43,970 --> 00:02:51,340
years especially we have been very

00:02:48,950 --> 00:02:57,620
active in the cloud stack community I

00:02:51,340 --> 00:02:59,629
was the the VP in 2016 was a release

00:02:57,620 --> 00:03:02,900
manager at the same time for the four

00:02:59,629 --> 00:03:08,889
point nine release and we have multiple

00:03:02,900 --> 00:03:13,220
PMC and committers in our organization

00:03:08,889 --> 00:03:15,859
we've been we've been very active on

00:03:13,220 --> 00:03:18,919
community initiatives as well and we've

00:03:15,859 --> 00:03:21,230
also been developing plug-ins for for

00:03:18,919 --> 00:03:23,590
cloud stack for the community and for

00:03:21,230 --> 00:03:23,590
our customers

00:03:25,760 --> 00:03:33,319
so cloud MC is a business portal which

00:03:30,680 --> 00:03:38,599
helps service providers monetize their

00:03:33,319 --> 00:03:41,080
services that is a bit of a mouthful and

00:03:38,599 --> 00:03:43,190
we'll get into some of the more the

00:03:41,080 --> 00:03:46,340
details of that throughout this

00:03:43,190 --> 00:03:49,160
presentation but that gives you a little

00:03:46,340 --> 00:03:54,079
bit of a high-level idea of what we're

00:03:49,160 --> 00:03:56,090
solving for and and get you kind of

00:03:54,079 --> 00:04:02,750
oriented as we see some of the content

00:03:56,090 --> 00:04:05,299
as we move forward so there's a few

00:04:02,750 --> 00:04:10,459
guiding principles that drive the way we

00:04:05,299 --> 00:04:12,859
develop and engineer selling speed we

00:04:10,459 --> 00:04:14,480
want to expose different services so

00:04:12,859 --> 00:04:16,850
that you can be consumed and managed

00:04:14,480 --> 00:04:20,690
using consistent patterns paradigm and

00:04:16,850 --> 00:04:24,440
security model so we we also want to

00:04:20,690 --> 00:04:27,080
foster very effective communication and

00:04:24,440 --> 00:04:30,830
collaboration between different members

00:04:27,080 --> 00:04:32,630
of a tenant for example people often

00:04:30,830 --> 00:04:34,130
work in isolation but they also work in

00:04:32,630 --> 00:04:36,080
teams and it's important that they have

00:04:34,130 --> 00:04:40,310
a pleasant way of dealing with that kind

00:04:36,080 --> 00:04:43,490
of use case it's also important for

00:04:40,310 --> 00:04:46,190
providers and and customers alike to

00:04:43,490 --> 00:04:48,710
implement and enforce solid governance

00:04:46,190 --> 00:04:51,110
rules so that we can ensure that they're

00:04:48,710 --> 00:04:54,229
consuming the service in a way that is

00:04:51,110 --> 00:05:00,500
both secure and aligned with their with

00:04:54,229 --> 00:05:02,840
their cost control we also develop this

00:05:00,500 --> 00:05:04,700
this platform to maximize the

00:05:02,840 --> 00:05:09,050
extensibility and allowed to integrate

00:05:04,700 --> 00:05:11,620
as many services as we can so we offer a

00:05:09,050 --> 00:05:14,860
very powerful plug-in mechanism

00:05:11,620 --> 00:05:18,729
and in a couple of minutes I'm gonna go

00:05:14,860 --> 00:05:20,440
through this in more details but at the

00:05:18,729 --> 00:05:22,210
core it's also important to make sure

00:05:20,440 --> 00:05:25,030
that the product can adapt to various

00:05:22,210 --> 00:05:27,400
situations the last thing we would like

00:05:25,030 --> 00:05:28,750
to do is to fork our code for different

00:05:27,400 --> 00:05:31,449
customers because they have different

00:05:28,750 --> 00:05:33,940
needs this would be a help to manage so

00:05:31,449 --> 00:05:35,919
we prefer to the extra bit of

00:05:33,940 --> 00:05:37,090
engineering in our core products to

00:05:35,919 --> 00:05:39,160
ensure that we can address those

00:05:37,090 --> 00:05:47,650
different scenarios in a way that can

00:05:39,160 --> 00:05:49,360
easily be customized also the the to

00:05:47,650 --> 00:05:52,150
ensure success of a platform like Adam

00:05:49,360 --> 00:05:55,870
see you gotta provide an enjoyable and

00:05:52,150 --> 00:05:58,870
user experience we found that people who

00:05:55,870 --> 00:06:01,539
are faced with the easy to use UI

00:05:58,870 --> 00:06:02,710
something that that that's them that

00:06:01,539 --> 00:06:05,139
presents the information and knowledge

00:06:02,710 --> 00:06:07,150
in a logical way that surfaces the info

00:06:05,139 --> 00:06:09,070
that they care about and that ties the

00:06:07,150 --> 00:06:15,010
complexity we'll have a lot more success

00:06:09,070 --> 00:06:17,169
in the market and if you look at the the

00:06:15,010 --> 00:06:18,789
operator perspective it's also important

00:06:17,169 --> 00:06:23,010
that a platform is easy to deploy

00:06:18,789 --> 00:06:25,690
maintain and operate we strive to offer

00:06:23,010 --> 00:06:28,240
simple ways to manage all these aspects

00:06:25,690 --> 00:06:30,669
in our product the petition is very easy

00:06:28,240 --> 00:06:31,900
to deploy it's this packages the spring

00:06:30,669 --> 00:06:34,240
good application so it's very

00:06:31,900 --> 00:06:36,280
self-contained and even our plugins are

00:06:34,240 --> 00:06:39,010
just jar files that you dropped into the

00:06:36,280 --> 00:06:41,880
glass pad and that's it it works how

00:06:39,010 --> 00:06:44,169
grades are especially easy to apply

00:06:41,880 --> 00:06:46,090
schemas are automatically updated even

00:06:44,169 --> 00:06:48,910
if you skip a couple of versions so it's

00:06:46,090 --> 00:06:51,490
very easy to manage the system very

00:06:48,910 --> 00:06:54,120
lightweight it's also also multi-tenant

00:06:51,490 --> 00:06:56,680
which is our multi lingual which is

00:06:54,120 --> 00:06:58,630
important for a service provider as

00:06:56,680 --> 00:07:01,000
they're often serving multiple

00:06:58,630 --> 00:07:04,120
Geographics and their multiple

00:07:01,000 --> 00:07:06,820
geographies and often have

00:07:04,120 --> 00:07:08,500
multiple languages covered in their in

00:07:06,820 --> 00:07:10,389
their product offerings we support three

00:07:08,500 --> 00:07:14,979
languages today English French and

00:07:10,389 --> 00:07:20,500
Spanish it's easy to add new ones as

00:07:14,979 --> 00:07:25,240
needed a success so there's a lot on

00:07:20,500 --> 00:07:28,540
this slide and I'm gonna try to simplify

00:07:25,240 --> 00:07:33,400
this slide quite a bit in the way I

00:07:28,540 --> 00:07:35,470
present it essentially there's one core

00:07:33,400 --> 00:07:38,080
concept that I want you to get off this

00:07:35,470 --> 00:07:41,490
slide and that is essentially that

00:07:38,080 --> 00:07:46,080
there's a plug-in SDK at the bottom that

00:07:41,490 --> 00:07:52,539
essentially consumes providers for

00:07:46,080 --> 00:07:57,000
services API and it then unifies how

00:07:52,539 --> 00:07:59,979
that API is used and presents a

00:07:57,000 --> 00:08:03,010
northbound API that is an overlay or an

00:07:59,979 --> 00:08:06,520
abstraction layer over top of the the

00:08:03,010 --> 00:08:08,710
underlying service API and what that

00:08:06,520 --> 00:08:12,280
does is it allows us to have a

00:08:08,710 --> 00:08:14,560
consistent UI experience and API

00:08:12,280 --> 00:08:16,419
experience for the end user regardless

00:08:14,560 --> 00:08:19,450
of the number of services that are put

00:08:16,419 --> 00:08:21,940
underneath it also allows us to have

00:08:19,450 --> 00:08:24,610
consistency in the way that we do tenant

00:08:21,940 --> 00:08:28,229
management the way that we do governance

00:08:24,610 --> 00:08:32,500
and policies role based access control

00:08:28,229 --> 00:08:34,659
all of the all the details around usage

00:08:32,500 --> 00:08:36,010
reporting and metering and billing and

00:08:34,659 --> 00:08:38,469
all that that sort of stuff

00:08:36,010 --> 00:08:43,419
it basically gives us a foundation on

00:08:38,469 --> 00:08:46,330
which to work where we are able to to

00:08:43,419 --> 00:08:53,260
add a lot of value add without having to

00:08:46,330 --> 00:08:55,240
have a very siloed user experience we

00:08:53,260 --> 00:08:57,970
can present a single user experience

00:08:55,240 --> 00:09:03,180
across multiple services because the

00:08:57,970 --> 00:09:06,000
logic of how the the API is consumed

00:09:03,180 --> 00:09:10,340
and and presented is all obstructed away

00:09:06,000 --> 00:09:14,580
into the SDK plugin so the end user who

00:09:10,340 --> 00:09:18,870
who sees the the elements in the in the

00:09:14,580 --> 00:09:22,020
portal they the the SDK developer never

00:09:18,870 --> 00:09:24,750
actually writes the UI that the end user

00:09:22,020 --> 00:09:29,310
sees it is all automatically generated

00:09:24,750 --> 00:09:31,980
based on what is is developed in the SDK

00:09:29,310 --> 00:09:33,960
plugin so I'm gonna leave it there at

00:09:31,980 --> 00:09:36,150
that if you have more questions on this

00:09:33,960 --> 00:09:39,000
library can we can get into it as we go

00:09:36,150 --> 00:09:41,640
but that's the the core principle that

00:09:39,000 --> 00:09:50,160
you need to understand for as we go

00:09:41,640 --> 00:09:51,750
forward so there are a couple event and

00:09:50,160 --> 00:09:55,410
flow of components that are important to

00:09:51,750 --> 00:09:58,350
remember about ecology the core engine

00:09:55,410 --> 00:10:01,020
is really the place where all the

00:09:58,350 --> 00:10:03,780
business logic lies where which artists

00:10:01,020 --> 00:10:07,950
raise the different services are exposed

00:10:03,780 --> 00:10:10,200
to the plugins the portal UI is a modern

00:10:07,950 --> 00:10:11,610
single page web application it's

00:10:10,200 --> 00:10:13,590
lightweight it's optimized for fast

00:10:11,610 --> 00:10:15,390
performance and it scales from the

00:10:13,590 --> 00:10:20,190
desktop down to the smallest mobile

00:10:15,390 --> 00:10:22,380
design the plug-in SDK is the interface

00:10:20,190 --> 00:10:25,110
by which we can write new plugins to

00:10:22,380 --> 00:10:27,690
support different services the service

00:10:25,110 --> 00:10:29,610
plugins are really what talks to the

00:10:27,690 --> 00:10:31,230
remote service and ensures that the

00:10:29,610 --> 00:10:33,030
information is conveyed to Todd and C in

00:10:31,230 --> 00:10:36,450
a way that I can understand and that it

00:10:33,030 --> 00:10:40,680
can interact with once the plug-in is

00:10:36,450 --> 00:10:43,890
deployed it becomes exposed to challenge

00:10:40,680 --> 00:10:46,740
through an open API so it becomes a glue

00:10:43,890 --> 00:10:50,070
between the web UI and the backend such

00:10:46,740 --> 00:10:52,260
that you can actually provision and

00:10:50,070 --> 00:10:54,420
manage resources and finally obviously

00:10:52,260 --> 00:10:56,760
we have a database to all the

00:10:54,420 --> 00:10:57,560
configuration information as well as

00:10:56,760 --> 00:11:04,130
usage

00:10:57,560 --> 00:11:06,890
other clothes so this is probably the

00:11:04,130 --> 00:11:09,800
most important diagram in this whole

00:11:06,890 --> 00:11:13,190
presentation it talks about our Klingon

00:11:09,800 --> 00:11:15,560
sdj the is the case is really define the

00:11:13,190 --> 00:11:18,140
contract on how to create a new column

00:11:15,560 --> 00:11:20,630
see plugin so plugin act as a

00:11:18,140 --> 00:11:22,910
translation layer between the column c

00:11:20,630 --> 00:11:27,260
for engine and DP is to speak to the

00:11:22,910 --> 00:11:30,140
service to which interfaces to a plugin

00:11:27,260 --> 00:11:33,800
can provide coverage for a subset or the

00:11:30,140 --> 00:11:36,850
entirety of a services api so it doesn't

00:11:33,800 --> 00:11:39,860
need to map one to one to a given API

00:11:36,850 --> 00:11:42,080
you can actually create meta operation

00:11:39,860 --> 00:11:45,279
that will actually orchestrate multiple

00:11:42,080 --> 00:11:48,410
simpler calls to two different concepts

00:11:45,279 --> 00:11:50,570
so you can actually compose entities and

00:11:48,410 --> 00:11:54,920
expose a more complex model to your end

00:11:50,570 --> 00:11:56,420
users so at the most basic the most

00:11:54,920 --> 00:11:57,740
basic plugin you can create is actually

00:11:56,420 --> 00:11:59,270
something that will implement the blue

00:11:57,740 --> 00:12:01,430
park which is the connection with the

00:11:59,270 --> 00:12:03,020
actual remote service so this would be

00:12:01,430 --> 00:12:05,750
the part where a plug-in writer would

00:12:03,020 --> 00:12:07,430
define these are the information that I

00:12:05,750 --> 00:12:09,650
need to connect to a remote service so

00:12:07,430 --> 00:12:11,810
it might be an endpoint it might be like

00:12:09,650 --> 00:12:15,470
the type of credentials that you require

00:12:11,810 --> 00:12:18,620
to connect and the plugin will know that

00:12:15,470 --> 00:12:20,410
it has to it can test the successful

00:12:18,620 --> 00:12:23,839
connectivity with the remote service

00:12:20,410 --> 00:12:26,000
after that you start at the bottom and

00:12:23,839 --> 00:12:27,890
this is where the plug-in will define

00:12:26,000 --> 00:12:30,380
the entities that can be managed by it

00:12:27,890 --> 00:12:32,089
so what do we mean by entities well

00:12:30,380 --> 00:12:34,070
these are the type of information you

00:12:32,089 --> 00:12:36,260
want to expose that you want to be able

00:12:34,070 --> 00:12:38,330
to fetch from the service and you want

00:12:36,260 --> 00:12:41,060
to be able to browse them or display

00:12:38,330 --> 00:12:42,620
them in column C so for a classic

00:12:41,060 --> 00:12:44,120
plug-in for example you might the

00:12:42,620 --> 00:12:48,410
entities might be something like an

00:12:44,120 --> 00:12:51,860
instance a network a volume if we built

00:12:48,410 --> 00:12:55,180
a typical get a plugin well you would

00:12:51,860 --> 00:12:57,860
probably expose community with expose

00:12:55,180 --> 00:12:59,300
pull requests for example so those are

00:12:57,860 --> 00:13:02,000
the type of information

00:12:59,300 --> 00:13:03,140
recently once you have those entities

00:13:02,000 --> 00:13:05,149
you want to be able to perform

00:13:03,140 --> 00:13:07,130
operations on them so you might want to

00:13:05,149 --> 00:13:10,640
be able to start an instance or destroy

00:13:07,130 --> 00:13:13,550
a volume so the the plug-in relics will

00:13:10,640 --> 00:13:18,470
will contain the logic apply this

00:13:13,550 --> 00:13:25,550
operation on the remove service what

00:13:18,470 --> 00:13:28,430
this connectivity is in place the next

00:13:25,550 --> 00:13:30,769
logical step is to define the service

00:13:28,430 --> 00:13:34,790
management layer so this is where you

00:13:30,769 --> 00:13:36,860
establish the the entities ownership so

00:13:34,790 --> 00:13:38,959
this is where the plugin will actually

00:13:36,860 --> 00:13:44,000
create for each user or each

00:13:38,959 --> 00:13:45,920
organization the actual credentials on

00:13:44,000 --> 00:13:48,050
the remote service such that you can

00:13:45,920 --> 00:13:50,120
execute those operation with your own

00:13:48,050 --> 00:13:54,019
identity and it belongs to your own

00:13:50,120 --> 00:13:55,640
organization for example this ensures

00:13:54,019 --> 00:13:57,260
that you can also eventually retrieve

00:13:55,640 --> 00:13:59,959
your only P IPS if you want to interact

00:13:57,260 --> 00:14:03,800
with that remote service directly

00:13:59,959 --> 00:14:05,930
without going to flouncy once you have

00:14:03,800 --> 00:14:08,779
that plug-in can then opt into more

00:14:05,930 --> 00:14:11,680
advanced features exposed by Michael MC

00:14:08,779 --> 00:14:13,820
just such as retrieving users data

00:14:11,680 --> 00:14:16,640
adding custom permissions to our

00:14:13,820 --> 00:14:18,589
security model establishing a pricing

00:14:16,640 --> 00:14:21,529
model such that you can actually charge

00:14:18,589 --> 00:14:23,360
money for consuming those services and

00:14:21,529 --> 00:14:27,020
you can also hook into more advanced

00:14:23,360 --> 00:14:29,750
features such as trial management or who

00:14:27,020 --> 00:14:32,089
the enforcement or even defined custom

00:14:29,750 --> 00:14:33,709
security policies so once a plugin

00:14:32,089 --> 00:14:36,920
abides by this contract

00:14:33,709 --> 00:14:38,779
Kerensky as will said science takes care

00:14:36,920 --> 00:14:41,360
of all the ugly details of presenting

00:14:38,779 --> 00:14:44,029
this information in the modern web

00:14:41,360 --> 00:14:47,209
application to a Verity of predefined

00:14:44,029 --> 00:14:49,010
views the plugin exposes enough with the

00:14:47,209 --> 00:14:51,740
data that the core engine can know what

00:14:49,010 --> 00:14:54,620
to do with it and render sophisticated

00:14:51,740 --> 00:14:57,829
views navigation implement all the

00:14:54,620 --> 00:15:00,290
validation logic and enable the

00:14:57,829 --> 00:15:02,680
operation workflow so at one time

00:15:00,290 --> 00:15:05,089
challenge civil and for a security model

00:15:02,680 --> 00:15:07,790
associated with the plugin will

00:15:05,089 --> 00:15:08,080
facilitate the execution and chaining of

00:15:07,790 --> 00:15:11,530
thing

00:15:08,080 --> 00:15:13,690
various operations and we'll also

00:15:11,530 --> 00:15:15,340
keeping a detailed audit trail of all

00:15:13,690 --> 00:15:16,930
the operations executed by your end user

00:15:15,340 --> 00:15:25,630
where do they do it through the web UI

00:15:16,930 --> 00:15:27,520
or to a key across so one of the core

00:15:25,630 --> 00:15:30,250
aspects and something we developed from

00:15:27,520 --> 00:15:32,920
the Ganga when we created solid sea was

00:15:30,250 --> 00:15:36,250
the very advanced multi-level

00:15:32,920 --> 00:15:39,700
multi-tenant capabilities so this is

00:15:36,250 --> 00:15:42,370
really important if you want to mimic

00:15:39,700 --> 00:15:45,310
the structure of a complex organization

00:15:42,370 --> 00:15:48,040
for example or if you want to enable a

00:15:45,310 --> 00:15:50,290
reseller scenario so these are

00:15:48,040 --> 00:15:54,580
capabilities that are multi level

00:15:50,290 --> 00:15:58,930
tenancy provides in a it also enables

00:15:54,580 --> 00:16:01,810
you to act as a hook for rebranding your

00:15:58,930 --> 00:16:03,460
UI for a different company so we provide

00:16:01,810 --> 00:16:06,720
very advanced white labeling

00:16:03,460 --> 00:16:09,130
capabilities tied to the multi-tenancy

00:16:06,720 --> 00:16:11,170
in later screenshot that we're gonna see

00:16:09,130 --> 00:16:13,270
that we're gonna show you'll see

00:16:11,170 --> 00:16:14,950
different look and feel in the UI they

00:16:13,270 --> 00:16:17,020
they don't all share the same colors and

00:16:14,950 --> 00:16:22,600
logos they are it can be very different

00:16:17,020 --> 00:16:25,120
from one deployment to another another

00:16:22,600 --> 00:16:27,040
very important concept in Chatham Sea is

00:16:25,120 --> 00:16:30,490
the classic of environment so this is a

00:16:27,040 --> 00:16:32,250
way to send back your resources such

00:16:30,490 --> 00:16:37,000
that we can be logically group and

00:16:32,250 --> 00:16:39,100
security access by your users so the

00:16:37,000 --> 00:16:40,570
simplest form is to create a personal

00:16:39,100 --> 00:16:42,700
environment for yourself you'll be the

00:16:40,570 --> 00:16:45,910
only one having access to those

00:16:42,700 --> 00:16:48,430
resources or you can work in a group

00:16:45,910 --> 00:16:50,200
with your colleagues for example so you

00:16:48,430 --> 00:16:51,850
can assign different people to your

00:16:50,200 --> 00:16:53,920
environment such that you can all access

00:16:51,850 --> 00:16:55,690
the same resource but you can control

00:16:53,920 --> 00:16:57,250
with which role you are assigned with

00:16:55,690 --> 00:16:59,260
the environment so that some people

00:16:57,250 --> 00:17:01,750
might have full access while others

00:16:59,260 --> 00:17:03,670
might have only read-only access and you

00:17:01,750 --> 00:17:08,020
can be prevented from doing any

00:17:03,670 --> 00:17:10,540
to your to your data but at the heart

00:17:08,020 --> 00:17:14,650
environments is of wait to logically

00:17:10,540 --> 00:17:17,410
organize resources and provide proper

00:17:14,650 --> 00:17:20,799
security around it in the case of cloud

00:17:17,410 --> 00:17:22,419
stack the mapping is really easy we an

00:17:20,799 --> 00:17:25,030
Environmental Response usually to a

00:17:22,419 --> 00:17:28,020
project although we also support account

00:17:25,030 --> 00:17:32,260
base environment final thing is that we

00:17:28,020 --> 00:17:33,820
always track usage information also at

00:17:32,260 --> 00:17:38,169
the environment level so if you have a

00:17:33,820 --> 00:17:40,000
need to charge back the usage within

00:17:38,169 --> 00:17:42,700
your organization at the environmental

00:17:40,000 --> 00:17:45,610
you can do so with jealousy that's in

00:17:42,700 --> 00:17:48,130
addition to the to the tenant structure

00:17:45,610 --> 00:17:54,970
model where you can track obviously art

00:17:48,130 --> 00:17:56,230
by tenant or subtenant so I know a lot

00:17:54,970 --> 00:17:59,049
of you probably have a pretty good

00:17:56,230 --> 00:18:01,750
understanding about how cloud stack

00:17:59,049 --> 00:18:04,900
handles service offerings and you

00:18:01,750 --> 00:18:07,750
consume your your resources through

00:18:04,900 --> 00:18:11,049
service offerings so the the pricing

00:18:07,750 --> 00:18:13,450
model can account can use that basically

00:18:11,049 --> 00:18:15,600
you can define pricing based on the

00:18:13,450 --> 00:18:18,790
service offerings that you have defined

00:18:15,600 --> 00:18:21,309
however what what we found to be very

00:18:18,790 --> 00:18:24,190
useful is actually to be able to

00:18:21,309 --> 00:18:28,559
separate your pricing so that each of

00:18:24,190 --> 00:18:31,390
the core components of the of what a

00:18:28,559 --> 00:18:34,690
organization is consuming so say memory

00:18:31,390 --> 00:18:37,890
and CPU actually be separated out and

00:18:34,690 --> 00:18:40,710
that you are pricing them independently

00:18:37,890 --> 00:18:43,059
this enables us to have a lot more

00:18:40,710 --> 00:18:48,130
flexibility and fine-grained control

00:18:43,059 --> 00:18:52,380
over how we do pricing that becomes

00:18:48,130 --> 00:18:56,910
really important here we have a

00:18:52,380 --> 00:19:00,780
relatively unique take on reserved

00:18:56,910 --> 00:19:03,370
resources so a lot of organizations

00:19:00,780 --> 00:19:05,290
public clouds and so on they offer

00:19:03,370 --> 00:19:08,620
reserved instances but they offer them

00:19:05,290 --> 00:19:11,169
in the in a way where you have its it

00:19:08,620 --> 00:19:12,760
doesn't have a lot of flexibility so you

00:19:11,169 --> 00:19:14,440
might be able to reserve an instance

00:19:12,760 --> 00:19:18,700
type but you're reserving something like

00:19:14,440 --> 00:19:20,710
a 4x8 instance type you could you could

00:19:18,700 --> 00:19:22,990
make that reservation go to different

00:19:20,710 --> 00:19:26,200
VMs but you're stuck with a 4x8 instance

00:19:22,990 --> 00:19:28,690
type if you want to use 8 by 16 then

00:19:26,200 --> 00:19:34,180
that reservation is no longer valid for

00:19:28,690 --> 00:19:37,390
that for that those resources so instead

00:19:34,180 --> 00:19:39,670
what we do is we basically you are

00:19:37,390 --> 00:19:42,700
reserved when you subscribe to a pool of

00:19:39,670 --> 00:19:46,060
resources so let's just say that you are

00:19:42,700 --> 00:19:49,810
going to subscribe to 100 CPUs and 200

00:19:46,060 --> 00:19:52,120
gigs of RAM now you can you can consume

00:19:49,810 --> 00:19:55,240
that reservation in any way that you

00:19:52,120 --> 00:19:59,440
like so you could do a hundred VMs that

00:19:55,240 --> 00:20:00,790
are one by two or five that are 20 by 40

00:19:59,440 --> 00:20:07,060
in my map is right there

00:20:00,790 --> 00:20:08,830
uh-hum so it could be it could be broken

00:20:07,060 --> 00:20:12,340
up in any way but and it does it could

00:20:08,830 --> 00:20:14,260
be I'm really gonna get never I'm not

00:20:12,340 --> 00:20:16,630
going to try that one but you can you

00:20:14,260 --> 00:20:18,190
can do 1 by 2's 2 by 4 is 4 by eights

00:20:16,630 --> 00:20:20,680
whatever it doesn't it doesn't matter

00:20:18,190 --> 00:20:24,280
it's the consumption of the pool of

00:20:20,680 --> 00:20:26,260
resources that matters and if you go

00:20:24,280 --> 00:20:28,690
beyond your pool of resources then

00:20:26,260 --> 00:20:31,420
you're just charged utility rate so even

00:20:28,690 --> 00:20:35,680
if you are in with it so you could be

00:20:31,420 --> 00:20:37,870
within your pool for your CPU but go

00:20:35,680 --> 00:20:39,850
above on memory and then you're only

00:20:37,870 --> 00:20:43,570
charged for the memory that you consume

00:20:39,850 --> 00:20:48,280
on utility rates and your your reserve

00:20:43,570 --> 00:20:50,860
pool is charged now there's two

00:20:48,280 --> 00:20:54,010
different ways to do to do reserve

00:20:50,860 --> 00:20:56,170
pricing here one is with a fixed monthly

00:20:54,010 --> 00:20:59,920
price say you spend a thousand dollars

00:20:56,170 --> 00:21:03,100
and you get in your pool the other is

00:20:59,920 --> 00:21:07,000
that you basically have a discounted

00:21:03,100 --> 00:21:10,990
rate on the utility charge so maybe you

00:21:07,000 --> 00:21:13,060
get a 50% discount on utility and it

00:21:10,990 --> 00:21:15,220
because it is then broken down basically

00:21:13,060 --> 00:21:17,470
your discount rate is broken down on

00:21:15,220 --> 00:21:17,929
each of the elements that you're that

00:21:17,470 --> 00:21:20,149
yourself

00:21:17,929 --> 00:21:22,369
so it might be CPU it might be memory

00:21:20,149 --> 00:21:25,700
and so on so you could give a 10%

00:21:22,369 --> 00:21:28,639
discount on on memory and a 30% discount

00:21:25,700 --> 00:21:32,210
on CPU for example now there's a bit of

00:21:28,639 --> 00:21:34,639
a gotcha in this one essentially because

00:21:32,210 --> 00:21:37,490
there are different amount number of

00:21:34,639 --> 00:21:43,159
days in each month then you have a

00:21:37,490 --> 00:21:44,779
variable you have a variable amount that

00:21:43,159 --> 00:21:46,970
you're charging for your resource pool

00:21:44,779 --> 00:21:50,690
every month because you're charging it

00:21:46,970 --> 00:21:53,720
based on a discount to utility so that

00:21:50,690 --> 00:21:54,740
that means that since the the length of

00:21:53,720 --> 00:21:57,379
the month is different

00:21:54,740 --> 00:22:00,980
you have very variation in what is

00:21:57,379 --> 00:22:03,950
charged so a lot of the customers choose

00:22:00,980 --> 00:22:08,840
to go with a fixed monthly prices and

00:22:03,950 --> 00:22:10,549
then and they basically simplify the

00:22:08,840 --> 00:22:12,049
calculation to make sure that they're

00:22:10,549 --> 00:22:15,950
charged every month and it makes it

00:22:12,049 --> 00:22:19,129
easier from a from a billing system if

00:22:15,950 --> 00:22:24,789
you don't have an integration that said

00:22:19,129 --> 00:22:27,799
all of the all of the the metrics for

00:22:24,789 --> 00:22:31,009
the consumption and metering is all

00:22:27,799 --> 00:22:33,350
exposed through the API so if you want

00:22:31,009 --> 00:22:38,779
to build a billing integration that's

00:22:33,350 --> 00:22:42,230
possible as well so we're going to cover

00:22:38,779 --> 00:22:43,519
a couple of UI specific things so you're

00:22:42,230 --> 00:22:46,190
going to be able to make a mental

00:22:43,519 --> 00:22:47,649
picture of what this thing looks like I

00:22:46,190 --> 00:22:50,419
don't know if I mentioned previously

00:22:47,649 --> 00:22:53,929
we're actually on our second generation

00:22:50,419 --> 00:22:56,389
of our web UI we're actually in entering

00:22:53,929 --> 00:23:00,049
beta for this one in the next few weeks

00:22:56,389 --> 00:23:02,360
and we've applied a lot of the lessons

00:23:00,049 --> 00:23:05,210
we learned from our legacy UI that's

00:23:02,360 --> 00:23:06,529
things but the so you're going to see a

00:23:05,210 --> 00:23:10,369
mix of screenshots from both

00:23:06,529 --> 00:23:12,769
environments and the next two pages I'll

00:23:10,369 --> 00:23:14,450
make one other note as well we're doing

00:23:12,769 --> 00:23:16,850
office move right now and we

00:23:14,450 --> 00:23:19,760
unplugged our lab in our office during

00:23:16,850 --> 00:23:23,410
this process so our ability to capture

00:23:19,760 --> 00:23:27,140
screenshots with somewhat limited as far

00:23:23,410 --> 00:23:28,430
as our infrastructure is currently being

00:23:27,140 --> 00:23:29,960
set up in the data center right now so

00:23:28,430 --> 00:23:34,180
keep that in mind

00:23:29,960 --> 00:23:37,130
yeah so as we said are your primary

00:23:34,180 --> 00:23:38,780
grouping of resources is the environment

00:23:37,130 --> 00:23:41,120
so what you're looking at right now is

00:23:38,780 --> 00:23:43,700
one environment and it's identified by

00:23:41,120 --> 00:23:45,470
the name at the top of it uh two or one

00:23:43,700 --> 00:23:47,000
depth so that's the environments name

00:23:45,470 --> 00:23:49,310
and the data center in which it's

00:23:47,000 --> 00:23:50,480
located and by the way I don't know if

00:23:49,310 --> 00:23:52,520
you mentioned it but if you have

00:23:50,480 --> 00:23:53,960
multiple classic environment running you

00:23:52,520 --> 00:23:56,210
can actually connect all your cloud

00:23:53,960 --> 00:23:58,190
stack deployments to a single column see

00:23:56,210 --> 00:24:01,250
deployment so that's very handy if you

00:23:58,190 --> 00:24:02,450
have multi region deployment so we're

00:24:01,250 --> 00:24:04,520
looking at one environment right now

00:24:02,450 --> 00:24:06,980
we're in the dashboard tab and you see a

00:24:04,520 --> 00:24:08,840
high-level picture of salient

00:24:06,980 --> 00:24:11,600
information like the environmental

00:24:08,840 --> 00:24:13,430
membership a couple of resource metrics

00:24:11,600 --> 00:24:15,200
they're consumed by this environment as

00:24:13,430 --> 00:24:20,180
well as recent activity by the

00:24:15,200 --> 00:24:23,150
environment members let's assume that we

00:24:20,180 --> 00:24:26,510
click on the instances tab and at that

00:24:23,150 --> 00:24:29,360
point you see the instances that are

00:24:26,510 --> 00:24:31,610
deployed in this environment so you have

00:24:29,360 --> 00:24:33,680
all the important information that are

00:24:31,610 --> 00:24:35,840
actually exposed and you can trigger

00:24:33,680 --> 00:24:38,240
various operations on these instances

00:24:35,840 --> 00:24:40,720
some of them are quite obvious some of

00:24:38,240 --> 00:24:43,670
some others are hidden behind the Cuidad

00:24:40,720 --> 00:24:45,980
menu and from there you would be able as

00:24:43,670 --> 00:24:48,740
well to trigger the provisioning of new

00:24:45,980 --> 00:24:50,510
incidences assuming that you click on

00:24:48,740 --> 00:24:52,880
one of those roles to see the details

00:24:50,510 --> 00:24:54,710
about one instance this is where you

00:24:52,880 --> 00:24:57,080
would see the actual details to

00:24:54,710 --> 00:24:59,120
responding to that instance and there's

00:24:57,080 --> 00:25:01,840
a couple of side tabs that you can also

00:24:59,120 --> 00:25:03,710
select to get more information

00:25:01,840 --> 00:25:06,140
contextually to the instant that you're

00:25:03,710 --> 00:25:09,470
looking at so that's one of the things

00:25:06,140 --> 00:25:10,790
we try to focus on is to expose all the

00:25:09,470 --> 00:25:12,950
attractions that are relevant to the

00:25:10,790 --> 00:25:15,020
entity that you're actually viewing so

00:25:12,950 --> 00:25:16,610
for instance you might be interested in

00:25:15,020 --> 00:25:18,470
knowing okay what volumes are attached

00:25:16,610 --> 00:25:19,970
to this instance or what are the port

00:25:18,470 --> 00:25:22,460
forwarding rules that point to that

00:25:19,970 --> 00:25:26,150
instance so those are is the accessible

00:25:22,460 --> 00:25:29,510
truck from that page so I clicked on the

00:25:26,150 --> 00:25:31,400
volume stab and at the bottom I see my

00:25:29,510 --> 00:25:33,620
volumes and at the top I see all my

00:25:31,400 --> 00:25:37,490
important details about my instance so

00:25:33,620 --> 00:25:38,960
this is a very interesting view and is

00:25:37,490 --> 00:25:43,490
the same for all those other tabs that

00:25:38,960 --> 00:25:46,130
you see on the on the Left we also

00:25:43,490 --> 00:25:48,950
promote a lot of the navigability

00:25:46,130 --> 00:25:53,900
between those instances so for example

00:25:48,950 --> 00:25:56,330
if I click the V PC one this is where my

00:25:53,900 --> 00:25:59,030
ancestors deployed I will be

00:25:56,330 --> 00:26:01,370
automatically navigated to the details

00:25:59,030 --> 00:26:03,140
about that CPC and along with the

00:26:01,370 --> 00:26:06,560
network information that despite to it

00:26:03,140 --> 00:26:08,690
so you can actually go around and

00:26:06,560 --> 00:26:11,480
navigate all the entities are related

00:26:08,690 --> 00:26:13,550
together and you're always one take away

00:26:11,480 --> 00:26:20,450
from the information that you care about

00:26:13,550 --> 00:26:22,510
so that's really useful so we talked

00:26:20,450 --> 00:26:24,910
about operation on entities

00:26:22,510 --> 00:26:27,770
I'm going to show you an example of that

00:26:24,910 --> 00:26:29,840
it's probably one of the most complex

00:26:27,770 --> 00:26:33,050
workflows so adding an instance in class

00:26:29,840 --> 00:26:35,210
back it's complex because we are you to

00:26:33,050 --> 00:26:37,670
perform additional operation that you

00:26:35,210 --> 00:26:40,340
can usually do on a class back with

00:26:37,670 --> 00:26:42,110
instance creation we use this

00:26:40,340 --> 00:26:46,130
opportunity to not only create yes

00:26:42,110 --> 00:26:49,880
itself but also to allocate relative

00:26:46,130 --> 00:26:51,770
resources like you can easily acquire an

00:26:49,880 --> 00:26:54,410
additional public IP in this operation

00:26:51,770 --> 00:26:57,850
and open up some specific ports

00:26:54,410 --> 00:27:01,760
Java wants everyone open port 80 and 443

00:26:57,850 --> 00:27:03,530
you might also request more capacity to

00:27:01,760 --> 00:27:05,000
attach to your instance so you might

00:27:03,530 --> 00:27:07,370
want to create a volume while you're at

00:27:05,000 --> 00:27:10,190
it so all these operations can be

00:27:07,370 --> 00:27:11,870
performed using the operation so it's

00:27:10,190 --> 00:27:13,820
kind of a multi-step but you just scroll

00:27:11,870 --> 00:27:17,769
down and you can see that the richness

00:27:13,820 --> 00:27:20,479
of our plug-in system allows you to show

00:27:17,769 --> 00:27:23,659
which interface and you can easily

00:27:20,479 --> 00:27:26,690
browse the different attributes that you

00:27:23,659 --> 00:27:28,729
can associate with your instance and

00:27:26,690 --> 00:27:32,479
when you make selection about let's say

00:27:28,729 --> 00:27:34,759
your instance sizing on the right hand

00:27:32,479 --> 00:27:37,639
side in the class estimator you will see

00:27:34,759 --> 00:27:40,220
the the immediate effect of making these

00:27:37,639 --> 00:27:42,379
selections on your on your instance so

00:27:40,220 --> 00:27:43,879
you will see what will be the already

00:27:42,379 --> 00:27:45,159
cost as well as the maanteeeca

00:27:43,879 --> 00:27:47,720
it's all calculated in real time

00:27:45,159 --> 00:27:51,229
according to the pricing model that is

00:27:47,720 --> 00:27:57,379
in effect for for these kind of

00:27:51,229 --> 00:28:01,549
resources finally you can also associate

00:27:57,379 --> 00:28:03,590
all the usual stuff ssh to you solving

00:28:01,549 --> 00:28:05,599
it and once you're down your instance

00:28:03,590 --> 00:28:08,330
will be launched and and Clancy will

00:28:05,599 --> 00:28:11,059
take care of artists rating all the API

00:28:08,330 --> 00:28:14,269
calls required to allocate not only your

00:28:11,059 --> 00:28:17,059
VN but also all the side elements that

00:28:14,269 --> 00:28:20,239
you've selected and it will be advised

00:28:17,059 --> 00:28:22,070
of the progress of this process and if

00:28:20,239 --> 00:28:24,289
you have colleagues that are logged in

00:28:22,070 --> 00:28:25,909
and that share access to your same

00:28:24,289 --> 00:28:28,609
environment they will be advised in real

00:28:25,909 --> 00:28:30,559
time to WebSockets and yep

00:28:28,609 --> 00:28:32,450
the interface will always be updated in

00:28:30,559 --> 00:28:34,999
real time to reflect the latest status

00:28:32,450 --> 00:28:37,729
one of the other things that that we do

00:28:34,999 --> 00:28:40,249
as well is because this operation can be

00:28:37,729 --> 00:28:42,320
made up of multiple other operations we

00:28:40,249 --> 00:28:44,450
don't cover it elsewhere in the in the

00:28:42,320 --> 00:28:48,169
presentation but I figure out what it's

00:28:44,450 --> 00:28:50,659
worth noting in the activity log what we

00:28:48,169 --> 00:28:55,309
do is we actually have a correlation ID

00:28:50,659 --> 00:28:59,359
that we that we pass with those without

00:28:55,309 --> 00:29:01,820
transaction yeah so when if if there is

00:28:59,359 --> 00:29:04,399
a failure at some point in in that

00:29:01,820 --> 00:29:07,549
process so say five or six different API

00:29:04,399 --> 00:29:09,499
calls then when we ship all our logs to

00:29:07,549 --> 00:29:12,919
log stops we can actually correlate all

00:29:09,499 --> 00:29:15,909
of the different related actions for

00:29:12,919 --> 00:29:15,909
that transaction

00:29:16,610 --> 00:29:24,140
very convenient for operation folks and

00:29:21,340 --> 00:29:25,880
if you have a mobile device you can

00:29:24,140 --> 00:29:28,730
access those same operation we've

00:29:25,880 --> 00:29:30,830
basically ensured that the UI always

00:29:28,730 --> 00:29:34,010
looks good no matter what device you use

00:29:30,830 --> 00:29:37,910
and the same operations are can be

00:29:34,010 --> 00:29:42,799
executed as elegantly it's another

00:29:37,910 --> 00:29:44,660
compromise experience we talked about

00:29:42,799 --> 00:29:46,580
environments this is how you create new

00:29:44,660 --> 00:29:48,799
environments very simple it's a

00:29:46,580 --> 00:29:50,450
three-step process you start by giving

00:29:48,799 --> 00:29:52,760
it a name and then you manage the

00:29:50,450 --> 00:29:54,919
members as you can see in this UI so you

00:29:52,760 --> 00:29:57,230
simply select new members from the list

00:29:54,919 --> 00:29:58,520
of available people at the bottom those

00:29:57,230 --> 00:30:00,530
would be the other people in your

00:29:58,520 --> 00:30:02,720
organization that are not member yet of

00:30:00,530 --> 00:30:05,059
this environment and you can see that

00:30:02,720 --> 00:30:06,830
France as a Environment admin role which

00:30:05,059 --> 00:30:08,990
means that he asked full access on this

00:30:06,830 --> 00:30:11,299
environment you can basically create and

00:30:08,990 --> 00:30:14,120
delete and club or anything you want

00:30:11,299 --> 00:30:15,799
while my access is limited to read only

00:30:14,120 --> 00:30:21,919
so I can do any damage in this

00:30:15,799 --> 00:30:24,080
environment all this talk about users

00:30:21,919 --> 00:30:26,809
and assigning pricing and metering the

00:30:24,080 --> 00:30:29,660
users it all makes sense when you

00:30:26,809 --> 00:30:32,000
actually generate users report so this

00:30:29,660 --> 00:30:34,190
is one of the year users report we

00:30:32,000 --> 00:30:36,320
generate and it shows about the utility

00:30:34,190 --> 00:30:38,679
pricing at the bottom as well as the

00:30:36,320 --> 00:30:41,390
reserved resource at the top so the

00:30:38,679 --> 00:30:43,910
you'll get a consistent view of your

00:30:41,390 --> 00:30:46,460
usage you can do this you can generate

00:30:43,910 --> 00:30:50,030
those reports for any time period for a

00:30:46,460 --> 00:30:51,890
specific environment for like yeah

00:30:50,030 --> 00:30:53,900
there's a lot of criteria you can also

00:30:51,890 --> 00:30:56,690
apply when you generate this and the

00:30:53,900 --> 00:30:58,010
same information can be retrieved by two

00:30:56,690 --> 00:31:02,650
weekly eye calls if you want to

00:30:58,010 --> 00:31:07,520
integrate with your billing system

00:31:02,650 --> 00:31:09,180
similarly I indicated all the access

00:31:07,520 --> 00:31:12,840
that are triggered by user weather

00:31:09,180 --> 00:31:15,810
through the web UI or by API and whether

00:31:12,840 --> 00:31:17,940
they cater to the system or to the

00:31:15,810 --> 00:31:21,090
plugins they're all tracked and audited

00:31:17,940 --> 00:31:24,180
carefully and we provide the activity

00:31:21,090 --> 00:31:26,250
tracking used to perform queries so if

00:31:24,180 --> 00:31:28,200
you want to find out who deleted that

00:31:26,250 --> 00:31:31,380
the em well you can search rather

00:31:28,200 --> 00:31:33,000
quickly by specifying the type of

00:31:31,380 --> 00:31:35,190
operation you care about or you can just

00:31:33,000 --> 00:31:37,500
look for a given time frame to see who

00:31:35,190 --> 00:31:40,110
did what at what time and you can even

00:31:37,500 --> 00:31:41,790
track their their actual IP address so

00:31:40,110 --> 00:31:43,890
if you if you're suspicious about

00:31:41,790 --> 00:31:45,570
different activity you can take a

00:31:43,890 --> 00:31:50,460
careful look and all the operations that

00:31:45,570 --> 00:31:53,280
are that consists of this orchestration

00:31:50,460 --> 00:31:55,080
of multiple API calls will be shown in

00:31:53,280 --> 00:31:59,300
your acquittal view and you see exactly

00:31:55,080 --> 00:32:03,960
at which step and operation fail to DQ

00:31:59,300 --> 00:32:05,220
and the same the same time criteria that

00:32:03,960 --> 00:32:08,390
you saw in that screen are also

00:32:05,220 --> 00:32:12,060
applicable to the report generation

00:32:08,390 --> 00:32:15,720
another very important feature is our

00:32:12,060 --> 00:32:17,970
ability to work with tags I'm sure you

00:32:15,720 --> 00:32:20,340
know when you define offerings in class

00:32:17,970 --> 00:32:23,490
that you can either do it globally or

00:32:20,340 --> 00:32:26,340
you can do it for specific domain you

00:32:23,490 --> 00:32:29,580
can't easily assign that offering to a

00:32:26,340 --> 00:32:31,380
collection of domains nor can you extend

00:32:29,580 --> 00:32:35,130
that their scope after the fact so

00:32:31,380 --> 00:32:36,780
silence it provides very efficient or

00:32:35,130 --> 00:32:39,450
flexible approach to address this

00:32:36,780 --> 00:32:41,160
challenge first you define your your

00:32:39,450 --> 00:32:44,010
offerings and CloudStack in a global

00:32:41,160 --> 00:32:46,710
fashion and then you assign specific

00:32:44,010 --> 00:32:51,140
tags to your different organization or

00:32:46,710 --> 00:32:53,670
tenants and finally you customize the

00:32:51,140 --> 00:32:57,240
visibility of your offerings based on

00:32:53,670 --> 00:32:59,730
those tags so you can basically add

00:32:57,240 --> 00:33:01,980
policies on a per offering basis to

00:32:59,730 --> 00:33:04,770
indicate whether this offering is going

00:33:01,980 --> 00:33:06,720
to be visible or invisible depending on

00:33:04,770 --> 00:33:09,390
the presence or absence of attacks is

00:33:06,720 --> 00:33:14,250
very powerful it allows you to easily

00:33:09,390 --> 00:33:16,620
for example offer a sneak peak access to

00:33:14,250 --> 00:33:19,200
specific offerings to reduce setup

00:33:16,620 --> 00:33:21,059
summers that's really useful or in the

00:33:19,200 --> 00:33:22,980
end of life of an offering you can make

00:33:21,059 --> 00:33:25,559
sure that only your legacy customer can

00:33:22,980 --> 00:33:28,559
access a given offering so you have ways

00:33:25,559 --> 00:33:30,720
to actually play with your offering

00:33:28,559 --> 00:33:33,360
visibility at that point it's also worth

00:33:30,720 --> 00:33:35,190
noting that the tags referenced here

00:33:33,360 --> 00:33:38,360
have nothing to do with the CloudStack

00:33:35,190 --> 00:33:41,880
tags just to make sure that was there

00:33:38,360 --> 00:33:44,820
and you also seen that screen that even

00:33:41,880 --> 00:33:46,860
for your typical custom compute

00:33:44,820 --> 00:33:48,330
offerings you have a lot of knobs here

00:33:46,860 --> 00:33:51,150
that you can configure because cloud

00:33:48,330 --> 00:33:53,580
stack will actually not allow you to

00:33:51,150 --> 00:33:55,670
configure which of those values are

00:33:53,580 --> 00:34:00,690
visible while in challenge you can

00:33:55,670 --> 00:34:02,460
customize exactly the type of allowed

00:34:00,690 --> 00:34:05,460
values that you want to expose as well

00:34:02,460 --> 00:34:07,710
as the ratio of the CPU to RAM that you

00:34:05,460 --> 00:34:11,419
want to allocate so it allows for better

00:34:07,710 --> 00:34:14,310
and more efficient capacity management

00:34:11,419 --> 00:34:17,399
an option that's really interesting for

00:34:14,310 --> 00:34:20,879
an operators is the ability to manage

00:34:17,399 --> 00:34:23,700
trial accounts so if customer want to

00:34:20,879 --> 00:34:27,720
try out the platform well we can reduce

00:34:23,700 --> 00:34:31,290
a lot of friction needed in on boarding

00:34:27,720 --> 00:34:34,200
new users to the platform so in the

00:34:31,290 --> 00:34:37,980
screen your users can actually self

00:34:34,200 --> 00:34:41,210
create their trial accounts there's an

00:34:37,980 --> 00:34:44,820
actual approval workflow that will also

00:34:41,210 --> 00:34:46,409
automatically get to ten so your trial

00:34:44,820 --> 00:34:48,780
request might be automatically approved

00:34:46,409 --> 00:34:51,720
or they might require the attention of a

00:34:48,780 --> 00:34:55,620
trial manager and was the trial account

00:34:51,720 --> 00:34:57,180
is is approved automatically the an

00:34:55,620 --> 00:34:59,040
environment will be created for the end

00:34:57,180 --> 00:35:01,050
user we will create their first network

00:34:59,040 --> 00:35:02,790
automatically so there are two things

00:35:01,050 --> 00:35:05,880
away from creating their first instance

00:35:02,790 --> 00:35:08,310
on your platform the end user that has a

00:35:05,880 --> 00:35:11,130
trial account will always see the top of

00:35:08,310 --> 00:35:15,660
a screen how much time is left for the

00:35:11,130 --> 00:35:17,760
trial and a trial expiration the

00:35:15,660 --> 00:35:19,950
resource will automatically be stopped

00:35:17,760 --> 00:35:21,360
and eventually dated after a

00:35:19,950 --> 00:35:26,040
configurable delays

00:35:21,360 --> 00:35:27,600
you've never end end up losing a lot of

00:35:26,040 --> 00:35:31,400
resources due to trial accounts the

00:35:27,600 --> 00:35:34,590
system automatically cleans itself and

00:35:31,400 --> 00:35:36,810
the trial manager can always follow the

00:35:34,590 --> 00:35:39,720
life cycle of your various trials so for

00:35:36,810 --> 00:35:41,430
each trial account we attract a lot of

00:35:39,720 --> 00:35:43,740
information including the activity level

00:35:41,430 --> 00:35:46,380
so it's easy to see which trial accounts

00:35:43,740 --> 00:35:48,090
actually use the system or not and you

00:35:46,380 --> 00:35:50,070
can perform all kinds of action to

00:35:48,090 --> 00:35:52,770
extend the trial or yeah that that's

00:35:50,070 --> 00:35:54,720
also very useful for well this this as

00:35:52,770 --> 00:35:56,070
well but you can extend a trial and

00:35:54,720 --> 00:35:57,660
convert them to billing and that sort of

00:35:56,070 --> 00:36:00,390
thing that's that's all that's very

00:35:57,660 --> 00:36:04,920
useful you can even change their quota

00:36:00,390 --> 00:36:06,650
you need to do that by providing

00:36:04,920 --> 00:36:09,120
additional information such as the

00:36:06,650 --> 00:36:11,250
number of logon counts on a per user

00:36:09,120 --> 00:36:15,150
basis or looking at the detail activity

00:36:11,250 --> 00:36:17,550
speed we provide a way for for operators

00:36:15,150 --> 00:36:20,360
to actually engage with the trial

00:36:17,550 --> 00:36:22,530
accounts and making sure that the system

00:36:20,360 --> 00:36:24,390
accurately and to assess their needs and

00:36:22,530 --> 00:36:26,430
you can have a conversation that leads

00:36:24,390 --> 00:36:32,160
to better a conversion to actual

00:36:26,430 --> 00:36:34,470
billable customers told you about why is

00:36:32,160 --> 00:36:37,200
I think before so and you've seen

00:36:34,470 --> 00:36:39,510
different look and feel so far so we

00:36:37,200 --> 00:36:41,760
provide that's in your legacy UI but the

00:36:39,510 --> 00:36:43,740
same thing will also apply to the next

00:36:41,760 --> 00:36:48,360
generation so we provide ways to

00:36:43,740 --> 00:36:50,280
completely customize the colors the look

00:36:48,360 --> 00:36:51,450
and feel the logos the name of the

00:36:50,280 --> 00:36:53,700
application all these things you can

00:36:51,450 --> 00:36:56,340
even customize which language will be

00:36:53,700 --> 00:36:59,340
offered on your own deployment in which

00:36:56,340 --> 00:37:02,280
order and additional things what welcome

00:36:59,340 --> 00:37:05,790
as well so the ability to customize that

00:37:02,280 --> 00:37:07,560
is really important and the the fact

00:37:05,790 --> 00:37:11,480
that you can apply that at any level in

00:37:07,560 --> 00:37:11,480
the 1080 RT is also really powerful

00:37:13,290 --> 00:37:18,730
beyond management of services galaxy

00:37:16,420 --> 00:37:21,250
strives to offer well integrated and

00:37:18,730 --> 00:37:24,160
user experience at every level for

00:37:21,250 --> 00:37:26,620
example we provide advanced content

00:37:24,160 --> 00:37:28,750
management capabilities such that

00:37:26,620 --> 00:37:32,170
administrator can carefully customize

00:37:28,750 --> 00:37:33,520
elements like email templates and user

00:37:32,170 --> 00:37:35,920
notification let's say you want to

00:37:33,520 --> 00:37:39,010
advise your user that there's a

00:37:35,920 --> 00:37:42,160
maintenance coming up soon and you can

00:37:39,010 --> 00:37:44,050
even offer a complete knowledge base to

00:37:42,160 --> 00:37:47,560
act as the first line of support for en

00:37:44,050 --> 00:37:49,900
users so this is all done in alignment

00:37:47,560 --> 00:37:51,940
with the language defined throughout the

00:37:49,900 --> 00:37:54,250
white labeling feature so if you have a

00:37:51,940 --> 00:37:57,040
Bible system you will add the capacity

00:37:54,250 --> 00:38:00,010
to define your your knowledge base in

00:37:57,040 --> 00:38:02,260
both languages well this is what it

00:38:00,010 --> 00:38:04,480
would look like as the main entry point

00:38:02,260 --> 00:38:08,620
for your Help Center so it's a

00:38:04,480 --> 00:38:12,280
categorized collection of articles about

00:38:08,620 --> 00:38:14,050
different subjects as as the operator

00:38:12,280 --> 00:38:16,390
this is the interface you have to

00:38:14,050 --> 00:38:18,280
actually alter your articles and

00:38:16,390 --> 00:38:20,710
configure them and publish dance there's

00:38:18,280 --> 00:38:25,900
even a workflow to actually publish

00:38:20,710 --> 00:38:29,140
drafts articles this is what the WYSIWYG

00:38:25,900 --> 00:38:32,080
editor looks like and once it's actually

00:38:29,140 --> 00:38:33,550
published this is what the browsing

00:38:32,080 --> 00:38:35,680
experience looks like for the end user

00:38:33,550 --> 00:38:38,500
so looking at a specific article you

00:38:35,680 --> 00:38:40,900
also have related articles in the same

00:38:38,500 --> 00:38:43,660
category and finally all of these

00:38:40,900 --> 00:38:46,270
articles are fully searchable so so

00:38:43,660 --> 00:38:48,780
complete package to make the annual

00:38:46,270 --> 00:38:55,990
experience really effective and

00:38:48,780 --> 00:39:00,520
efficient so I I discussed earlier a

00:38:55,990 --> 00:39:02,440
little bit about how cloud IMC enables

00:39:00,520 --> 00:39:04,000
service providers to deliver all of

00:39:02,440 --> 00:39:06,160
their services through the same

00:39:04,000 --> 00:39:09,730
dashboard into the same same

00:39:06,160 --> 00:39:12,250
laughs Marcus has gone through the

00:39:09,730 --> 00:39:15,580
majority that features around our deep

00:39:12,250 --> 00:39:17,140
integration so our plug-in SDK gives us

00:39:15,580 --> 00:39:21,010
the ability to have a very deep

00:39:17,140 --> 00:39:25,120
integration with the the services

00:39:21,010 --> 00:39:30,540
through their api's but a lot of a lot

00:39:25,120 --> 00:39:34,390
of legacy service provider services

00:39:30,540 --> 00:39:36,850
don't have an API or sometimes they

00:39:34,390 --> 00:39:40,150
don't even have single sign-on and there

00:39:36,850 --> 00:39:41,530
they are trying to expose all their

00:39:40,150 --> 00:39:43,780
services through a single pane of glass

00:39:41,530 --> 00:39:45,460
but without single sign-on without any

00:39:43,780 --> 00:39:48,580
of that kind of stuff it makes it very

00:39:45,460 --> 00:39:49,720
hard to give a unified experience to the

00:39:48,580 --> 00:39:53,770
to the end user

00:39:49,720 --> 00:39:58,390
so master portal is the is the shallow

00:39:53,770 --> 00:40:01,150
integration option and essentially what

00:39:58,390 --> 00:40:03,880
it does is it offers single sign-on for

00:40:01,150 --> 00:40:07,480
all of your applications even if they

00:40:03,880 --> 00:40:13,750
don't support single sign-on and it also

00:40:07,480 --> 00:40:16,870
allows you to to basically have a single

00:40:13,750 --> 00:40:19,000
point so you can have the credentials

00:40:16,870 --> 00:40:22,900
can be exposed to the to the end users

00:40:19,000 --> 00:40:27,850
or not and it gives you a single point

00:40:22,900 --> 00:40:33,510
where you have access or relocation of a

00:40:27,850 --> 00:40:35,260
user's access to your to the services

00:40:33,510 --> 00:40:37,420
one of the other things that's

00:40:35,260 --> 00:40:41,620
interesting about this if you haven't

00:40:37,420 --> 00:40:44,770
understood so far one of the things is

00:40:41,620 --> 00:40:47,320
that we are weird because we are

00:40:44,770 --> 00:40:51,840
essentially proxying access to these

00:40:47,320 --> 00:40:55,090
services behind which allows us to do

00:40:51,840 --> 00:40:59,680
authentication for one but it also

00:40:55,090 --> 00:41:02,440
allows us to do to expose services that

00:40:59,680 --> 00:41:05,620
are not actually public services so it

00:41:02,440 --> 00:41:07,630
allows us to to put services make

00:41:05,620 --> 00:41:08,810
services available to tenants without

00:41:07,630 --> 00:41:10,970
them

00:41:08,810 --> 00:41:14,270
to have VPN access and also not having

00:41:10,970 --> 00:41:16,220
to have them on the public internet so

00:41:14,270 --> 00:41:18,470
it gives a lot of flexibility about

00:41:16,220 --> 00:41:20,450
around how you actually bring together

00:41:18,470 --> 00:41:23,180
all your services deliver them all

00:41:20,450 --> 00:41:27,770
through a single pane of glass while

00:41:23,180 --> 00:41:29,570
giving you the opportunity to to do a

00:41:27,770 --> 00:41:32,240
deep integration where it makes sense

00:41:29,570 --> 00:41:34,340
and do a Salo integration for everything

00:41:32,240 --> 00:41:36,350
else where it doesn't make sense and

00:41:34,340 --> 00:41:38,110
this can be a stepping stone if you if

00:41:36,350 --> 00:41:41,450
you want to do a self integration

00:41:38,110 --> 00:41:43,940
initially and then there's a business

00:41:41,450 --> 00:41:46,340
case for making a deeper integration

00:41:43,940 --> 00:41:47,960
because the customers want it or you

00:41:46,340 --> 00:41:51,440
want a tighter integration between your

00:41:47,960 --> 00:41:53,570
services then you can invest in a and a

00:41:51,440 --> 00:41:55,190
deeper integration but the customer

00:41:53,570 --> 00:41:56,720
you're not transitioning the customer

00:41:55,190 --> 00:42:00,170
between different workflows

00:41:56,720 --> 00:42:02,570
all their their entry into your service

00:42:00,170 --> 00:42:05,000
portfolio is all through the same pane

00:42:02,570 --> 00:42:06,940
of glass and that transition will be

00:42:05,000 --> 00:42:10,730
natural for them and they won't have to

00:42:06,940 --> 00:42:14,980
to use a different system as you

00:42:10,730 --> 00:42:14,980
transition your your service offerings

00:42:16,660 --> 00:42:22,370
let's look at a couple of roadmap

00:42:18,890 --> 00:42:26,450
features things that we're working on

00:42:22,370 --> 00:42:30,020
and that will be delivered in the near

00:42:26,450 --> 00:42:31,940
or to medium-term future we've added our

00:42:30,020 --> 00:42:33,980
request to support multiple currencies

00:42:31,940 --> 00:42:36,320
today we have a global configurable

00:42:33,980 --> 00:42:38,750
currency at the system level but if you

00:42:36,320 --> 00:42:40,160
want to have multiple pricing at the

00:42:38,750 --> 00:42:41,780
same time using different currencies

00:42:40,160 --> 00:42:45,350
that that's something that we're aiming

00:42:41,780 --> 00:42:47,450
to implement also having capacity to

00:42:45,350 --> 00:42:49,220
define multiple pricing models that are

00:42:47,450 --> 00:42:50,810
concurrently applied for example

00:42:49,220 --> 00:42:52,160
resellers would like to add this

00:42:50,810 --> 00:42:54,170
capability they won't they don't want to

00:42:52,160 --> 00:42:55,610
resell the resources at the same rate

00:42:54,170 --> 00:42:58,550
that they are paying to the main

00:42:55,610 --> 00:43:00,230
traitor cursor also I as an appraiser

00:42:58,550 --> 00:43:01,790
maybe you want to offer different

00:43:00,230 --> 00:43:03,680
pricing to different categories of

00:43:01,790 --> 00:43:05,680
customers as you have your gold customer

00:43:03,680 --> 00:43:08,770
and your bronze with them let's address

00:43:05,680 --> 00:43:11,720
a lot of requests also to enable

00:43:08,770 --> 00:43:15,440
tracking of licenses or maybe you want

00:43:11,720 --> 00:43:17,810
simply to track the human effort like

00:43:15,440 --> 00:43:19,220
you have many services and you want to

00:43:17,810 --> 00:43:25,670
be able to track that as part of the

00:43:19,220 --> 00:43:30,140
same exercise the same monthly tallying

00:43:25,670 --> 00:43:31,520
of the resources function also some

00:43:30,140 --> 00:43:33,890
people have asked for the ability to

00:43:31,520 --> 00:43:35,510
define the type of resource pool that

00:43:33,890 --> 00:43:37,730
will was talking about but across

00:43:35,510 --> 00:43:39,260
multiple regions so that's another

00:43:37,730 --> 00:43:41,420
having the flexibility to deploy a

00:43:39,260 --> 00:43:44,150
resource across different geographical

00:43:41,420 --> 00:43:47,180
area is also there but sharing the same

00:43:44,150 --> 00:43:49,160
pool of resource that's not I think

00:43:47,180 --> 00:43:51,800
organizations specific discount is

00:43:49,160 --> 00:43:54,280
another request that we've here heard a

00:43:51,800 --> 00:43:57,350
couple of times so we will work on that

00:43:54,280 --> 00:43:59,870
we're doing a big push to actually give

00:43:57,350 --> 00:44:02,530
even more richness to our world based

00:43:59,870 --> 00:44:04,910
access control so we have a lot of

00:44:02,530 --> 00:44:06,710
flexibility today but we're gonna offer

00:44:04,910 --> 00:44:10,370
even more especially in the case of

00:44:06,710 --> 00:44:12,800
managed services where one person has

00:44:10,370 --> 00:44:14,930
the ability to manage as an operator

00:44:12,800 --> 00:44:17,840
multiple specific orange but not

00:44:14,930 --> 00:44:19,370
everyone so that's if you have accounts

00:44:17,840 --> 00:44:21,140
for example with different customers

00:44:19,370 --> 00:44:22,730
it's normal that you would be able to

00:44:21,140 --> 00:44:25,190
manage those specific customers so we

00:44:22,730 --> 00:44:27,620
will be able to do that explicitly one

00:44:25,190 --> 00:44:31,340
by one or based on the tags that we've

00:44:27,620 --> 00:44:34,370
talked about earlier and finally being

00:44:31,340 --> 00:44:36,860
able to support others the additional

00:44:34,370 --> 00:44:38,810
integration so we have our strongest

00:44:36,860 --> 00:44:40,760
integration today is with class act we

00:44:38,810 --> 00:44:44,600
also support OpenStack we saw the master

00:44:40,760 --> 00:44:46,970
portal integration slide back there's

00:44:44,600 --> 00:44:49,220
couple of things that are yeah we have

00:44:46,970 --> 00:44:52,430
Swift as we support object storage to

00:44:49,220 --> 00:44:55,100
Swift so there's already a lot of things

00:44:52,430 --> 00:44:57,170
in flight but there there's obviously

00:44:55,100 --> 00:44:59,990
other interesting targets like

00:44:57,170 --> 00:45:02,609
kubernetes elite class and stuff like

00:44:59,990 --> 00:45:11,759
that so we've

00:45:02,609 --> 00:45:16,230
ahead of us so now there is a little bit

00:45:11,759 --> 00:45:19,230
of announcement here that is kind of it

00:45:16,230 --> 00:45:21,769
it's official internally but it hasn't

00:45:19,230 --> 00:45:25,019
necessarily been a made official

00:45:21,769 --> 00:45:29,130
publicly so we're gonna be open sourcing

00:45:25,019 --> 00:45:31,910
key components of about MC the details

00:45:29,130 --> 00:45:34,859
are still to be determined

00:45:31,910 --> 00:45:36,450
in our experience given that we work

00:45:34,859 --> 00:45:40,470
with open source all the time we

00:45:36,450 --> 00:45:44,359
understand that the the ability to have

00:45:40,470 --> 00:45:46,349
a successful open source launch is

00:45:44,359 --> 00:45:49,519
making sure that you have all the

00:45:46,349 --> 00:45:52,349
collateral and material in place so that

00:45:49,519 --> 00:45:54,809
users are being unable to kick the tires

00:45:52,349 --> 00:45:57,150
and get going right away have clear

00:45:54,809 --> 00:46:00,180
documentation understand what the what

00:45:57,150 --> 00:46:02,910
the process is understand how to

00:46:00,180 --> 00:46:06,180
contribute what the rules of engagement

00:46:02,910 --> 00:46:09,119
are and so on so that's something that

00:46:06,180 --> 00:46:12,029
we are still working out there's there's

00:46:09,119 --> 00:46:14,249
going to be support and maintenance to

00:46:12,029 --> 00:46:18,289
be to be considered as well we want to

00:46:14,249 --> 00:46:21,420
make sure that as more organizations

00:46:18,289 --> 00:46:23,339
contribute to the platform that we have

00:46:21,420 --> 00:46:25,380
backwards compatibility for our

00:46:23,339 --> 00:46:27,690
production customers who are using the

00:46:25,380 --> 00:46:32,069
platform today so we have to make sure

00:46:27,690 --> 00:46:35,339
that that as contributions come in that

00:46:32,069 --> 00:46:36,809
they are that they are integrated into

00:46:35,339 --> 00:46:39,839
the platform in a way that it is

00:46:36,809 --> 00:46:43,499
non-destructive for for our existing

00:46:39,839 --> 00:46:46,890
customers today so it's very much a

00:46:43,499 --> 00:46:48,960
sneak preview but stay tuned and and if

00:46:46,890 --> 00:46:51,299
you would like more information come and

00:46:48,960 --> 00:46:53,309
get a comment and give us your contact

00:46:51,299 --> 00:47:00,890
information and we'll we'll get you more

00:46:53,309 --> 00:47:00,890
information and that is pretty much it

00:47:03,340 --> 00:47:12,210
I feel like I missed a slide did we all

00:47:09,790 --> 00:47:12,210
right whatever

00:47:12,600 --> 00:47:17,970
any questions

00:47:14,970 --> 00:47:17,970
Charles

00:47:22,310 --> 00:47:29,430
so there's there's two options here

00:47:26,150 --> 00:47:33,510
there you have access to the cloud into

00:47:29,430 --> 00:47:35,400
the API for search and that is what we

00:47:33,510 --> 00:47:39,089
would recommend in order to be able to

00:47:35,400 --> 00:47:40,619
make sure that you have that the actions

00:47:39,089 --> 00:47:44,520
of your users are tracked in the

00:47:40,619 --> 00:47:47,250
activity log and so on that said we

00:47:44,520 --> 00:47:50,310
don't we actually have the ability to

00:47:47,250 --> 00:47:52,740
toggle whether or not we expose the

00:47:50,310 --> 00:47:54,770
underlying api's and endpoint to the

00:47:52,740 --> 00:47:59,700
customers so that they can actually

00:47:54,770 --> 00:48:01,500
access the cloud stack API directly and

00:47:59,700 --> 00:48:03,270
we have this control and for connection

00:48:01,500 --> 00:48:07,109
basis so if you want to be a full EP on

00:48:03,270 --> 00:48:08,700
access on one suspect deployment not on

00:48:07,109 --> 00:48:10,890
your object storage for example you

00:48:08,700 --> 00:48:13,260
you're free to do that right or if you

00:48:10,890 --> 00:48:15,599
have a customer that has a dedicated

00:48:13,260 --> 00:48:17,400
infrastructure and they they want access

00:48:15,599 --> 00:48:20,099
to their infrastructure that you're

00:48:17,400 --> 00:48:21,720
managing through cloud MC and they have

00:48:20,099 --> 00:48:24,450
their own service connection you can

00:48:21,720 --> 00:48:27,810
give them access to their to their cloud

00:48:24,450 --> 00:48:29,190
their cloud stack api for them and then

00:48:27,810 --> 00:48:32,280
all your other customers who are using

00:48:29,190 --> 00:48:34,470
shared service and are basically

00:48:32,280 --> 00:48:37,589
consuming your other your other regions

00:48:34,470 --> 00:48:42,000
they would then be using the the cloud

00:48:37,589 --> 00:48:46,050
MCC API so that you can then the the the

00:48:42,000 --> 00:48:48,750
governance and and activity tracking

00:48:46,050 --> 00:48:51,660
that cloud IMC gives does that answer

00:48:48,750 --> 00:48:55,680
the question you can actually implement

00:48:51,660 --> 00:48:57,450
this on a per or diagnosis yeah exactly

00:48:55,680 --> 00:49:02,069
we've run into this a little bit as well

00:48:57,450 --> 00:49:04,619
because we have we are we're currently

00:49:02,069 --> 00:49:07,470
as we do our office move also going

00:49:04,619 --> 00:49:11,609
through a sock to on it so we have had

00:49:07,470 --> 00:49:14,339
to just to make it fun we so we've had

00:49:11,609 --> 00:49:15,900
to actually implement things because if

00:49:14,339 --> 00:49:17,880
we're offering managed services and

00:49:15,900 --> 00:49:19,740
those are soft too then we have to make

00:49:17,880 --> 00:49:25,859
sure that our managed service provider

00:49:19,740 --> 00:49:30,180
has to not let the customer see their

00:49:25,859 --> 00:49:33,089
their actual cloud stack api's so that

00:49:30,180 --> 00:49:34,320
they are only read-only in cloud MC and

00:49:33,089 --> 00:49:36,030
they don't have a

00:49:34,320 --> 00:49:38,070
to changing the infrastructure

00:49:36,030 --> 00:49:40,130
underneath because otherwise your

00:49:38,070 --> 00:49:43,680
managed services are pretty much borked

00:49:40,130 --> 00:49:47,220
so yeah that gives you a bit of an idea

00:49:43,680 --> 00:49:55,170
of the complexity that we work with more

00:49:47,220 --> 00:49:57,120
questions I feel like house expecting

00:49:55,170 --> 00:49:59,670
questions alright fair enough

00:49:57,120 --> 00:50:01,620
feel free to come to us if you have if

00:49:59,670 --> 00:50:04,560
you want to have more conversation on

00:50:01,620 --> 00:50:06,030
different subjects yeah we'll be we're

00:50:04,560 --> 00:50:10,800
likely going to be in the in the

00:50:06,030 --> 00:50:12,960
hackathon room and JC most of the day

00:50:10,800 --> 00:50:15,870
tomorrow so if you want to come and pick

00:50:12,960 --> 00:50:18,110
our brain come and pick our brain thank

00:50:15,870 --> 00:50:18,110
you guys

00:50:19,100 --> 00:50:22,780

YouTube URL: https://www.youtube.com/watch?v=kNV7WL3hIwE


