Title: Having your Cake and Eating it Too with Apache OODT and Apache Solr
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Andrew Hart, Paul Ramirez
ApacheCon NA 2013
Apache In Science
Captions: 
	00:00:00,199 --> 00:00:05,400
alright guys thanks for showing up yeah

00:00:04,049 --> 00:00:07,170
so Chris is introduced I don't have to

00:00:05,400 --> 00:00:08,490
waste any time with that she's really

00:00:07,170 --> 00:00:09,570
quick about myself I'm a software

00:00:08,490 --> 00:00:12,090
engineer at the NASA Jet Propulsion

00:00:09,570 --> 00:00:13,679
Laboratory I work in a group that works

00:00:12,090 --> 00:00:15,960
primarily on building data management

00:00:13,679 --> 00:00:19,949
systems for NASA missions for research

00:00:15,960 --> 00:00:21,750
missions and so I'm also involved in the

00:00:19,949 --> 00:00:23,850
pacha software foundation in a couple of

00:00:21,750 --> 00:00:25,769
different ways and what I'm going to be

00:00:23,850 --> 00:00:28,560
talking about today is two different

00:00:25,769 --> 00:00:31,050
Apache technologies Pat g 00 d t an

00:00:28,560 --> 00:00:32,790
Apache Solr if you've been here most of

00:00:31,050 --> 00:00:34,230
the day you've heard a lot about ODT I'm

00:00:32,790 --> 00:00:37,320
not going to be covering so much of this

00:00:34,230 --> 00:00:39,719
background of it but i will be talking

00:00:37,320 --> 00:00:41,640
mostly about how these two projects and

00:00:39,719 --> 00:00:43,469
technologies can be combined and which

00:00:41,640 --> 00:00:45,450
in which ways they complement each other

00:00:43,469 --> 00:00:48,420
and then just towards the end i'll just

00:00:45,450 --> 00:00:50,520
show a example of how we've done this on

00:00:48,420 --> 00:00:52,350
some of our projects to in a deployment

00:00:50,520 --> 00:00:54,239
scenario and then i'll just leave you

00:00:52,350 --> 00:00:59,160
with some different ways to participate

00:00:54,239 --> 00:01:00,809
for each of the groups so apache ODT for

00:00:59,160 --> 00:01:03,539
anybody who wasn't here earlier is a

00:01:00,809 --> 00:01:06,479
acronym for object-oriented data

00:01:03,539 --> 00:01:09,350
technology it's a software package which

00:01:06,479 --> 00:01:11,610
consists of loosely connected components

00:01:09,350 --> 00:01:14,640
for data management and for building

00:01:11,610 --> 00:01:16,530
data systems that has its origin in NASA

00:01:14,640 --> 00:01:17,759
mission data systems and so it has

00:01:16,530 --> 00:01:19,590
different components which can be

00:01:17,759 --> 00:01:21,780
configured in all kinds of different

00:01:19,590 --> 00:01:23,729
ways to do things like information

00:01:21,780 --> 00:01:25,439
integration pulling pulling information

00:01:23,729 --> 00:01:28,200
from lots of different places and making

00:01:25,439 --> 00:01:30,329
it seem like one big archive data

00:01:28,200 --> 00:01:33,240
cataloging and archiving if you're a

00:01:30,329 --> 00:01:36,479
mission flying a ten-year flight and you

00:01:33,240 --> 00:01:38,579
want to have the sum total of your data

00:01:36,479 --> 00:01:39,810
assets available this is the software

00:01:38,579 --> 00:01:42,390
that can help you build up these

00:01:39,810 --> 00:01:44,670
large-scale archives and configurable

00:01:42,390 --> 00:01:47,189
configurable workflow processing to

00:01:44,670 --> 00:01:51,390
essentially do tasks on your data and

00:01:47,189 --> 00:01:53,939
transform it in in different ways so

00:01:51,390 --> 00:01:56,460
patchy came to OD are sorry ODT came to

00:01:53,939 --> 00:01:58,860
Apache in 2011 after an incubation

00:01:56,460 --> 00:02:01,350
period we've currently grown up to about

00:01:58,860 --> 00:02:03,450
29 committers and our latest release was

00:02:01,350 --> 00:02:07,259
last December which is our our fifth

00:02:03,450 --> 00:02:10,470
release here so ODT is currently in use

00:02:07,259 --> 00:02:12,480
in a number of diverse locations one

00:02:10,470 --> 00:02:13,810
example is the kuru array telescope

00:02:12,480 --> 00:02:17,110
which is a precursor

00:02:13,810 --> 00:02:19,780
instrument for the Square Kilometre

00:02:17,110 --> 00:02:21,040
Array telescope which is when when when

00:02:19,780 --> 00:02:23,590
it's constructed will be the largest

00:02:21,040 --> 00:02:26,920
radio telescope in the world by several

00:02:23,590 --> 00:02:28,569
orders of magnitude it's also in use in

00:02:26,920 --> 00:02:30,819
the virtual pediatric intensive care

00:02:28,569 --> 00:02:33,880
unit at Children's Hospital Los Angeles

00:02:30,819 --> 00:02:36,040
where it's being used to build up a data

00:02:33,880 --> 00:02:38,110
repository used to identify clusters of

00:02:36,040 --> 00:02:41,560
patients with similarities to help

00:02:38,110 --> 00:02:43,450
improve diagnosis and it's also being

00:02:41,560 --> 00:02:46,150
used in a place called the regional

00:02:43,450 --> 00:02:49,660
climate model evaluation system which is

00:02:46,150 --> 00:02:52,600
an effort at JPL to help bring better

00:02:49,660 --> 00:02:54,150
use of NASA's remote sensing data to the

00:02:52,600 --> 00:02:57,549
people doing regional climate modeling

00:02:54,150 --> 00:02:59,650
so these systems tend to be scientific

00:02:57,549 --> 00:03:02,410
in nature which is sort of true 20 DG's

00:02:59,650 --> 00:03:03,849
roots they share the fact that there's

00:03:02,410 --> 00:03:06,489
lots of data that needs to be processed

00:03:03,849 --> 00:03:08,340
there's often the set of processing

00:03:06,489 --> 00:03:10,510
steps that are very well-defined and

00:03:08,340 --> 00:03:12,190
algorithms and so part of this is

00:03:10,510 --> 00:03:14,709
generating these archives of data and

00:03:12,190 --> 00:03:18,989
the corollary to that is that search of

00:03:14,709 --> 00:03:21,160
these archives is ultimately important I

00:03:18,989 --> 00:03:22,390
some of the strengths of ODT have been

00:03:21,160 --> 00:03:24,549
covered before so I'll just go really

00:03:22,390 --> 00:03:26,500
quickly through this but ODT is a

00:03:24,549 --> 00:03:28,660
framework a component framework which

00:03:26,500 --> 00:03:31,090
you are in no way obligated to use all

00:03:28,660 --> 00:03:32,470
of it it can be taken piecemeal and

00:03:31,090 --> 00:03:34,690
inserted if you already have a

00:03:32,470 --> 00:03:36,400
pre-existing system that does workflow

00:03:34,690 --> 00:03:38,260
processing and you really just need some

00:03:36,400 --> 00:03:40,120
sort of file management tool you can

00:03:38,260 --> 00:03:41,380
take that component of ODT or if you

00:03:40,120 --> 00:03:43,209
have all of that and you really just

00:03:41,380 --> 00:03:45,209
want a way to get files you can use the

00:03:43,209 --> 00:03:48,160
crawler and the push/pull components

00:03:45,209 --> 00:03:49,480
independently of a bigger system or you

00:03:48,160 --> 00:03:52,329
can string them together in any number

00:03:49,480 --> 00:03:57,370
of configurations to get a complete

00:03:52,329 --> 00:03:58,540
end-to-end data system so Patrick solar

00:03:57,370 --> 00:04:01,389
the other project I'm going to talk

00:03:58,540 --> 00:04:04,239
about it provides search based on the

00:04:01,389 --> 00:04:06,250
scene and web services and it has some

00:04:04,239 --> 00:04:08,170
really powerful features it's really

00:04:06,250 --> 00:04:09,850
excellent because it has these flexible

00:04:08,170 --> 00:04:13,299
formats and it's extremely configurable

00:04:09,850 --> 00:04:15,579
it's in use in a large large number of

00:04:13,299 --> 00:04:18,010
places including through its integration

00:04:15,579 --> 00:04:21,430
with Drupal on the white house search it

00:04:18,010 --> 00:04:24,430
does the powers the search for that it

00:04:21,430 --> 00:04:25,920
powers the search for Netflix and it's

00:04:24,430 --> 00:04:30,510
also in use in the nest

00:04:25,920 --> 00:04:31,890
planetary data system so why would we

00:04:30,510 --> 00:04:35,490
think about bringing these two

00:04:31,890 --> 00:04:37,170
technologies together I think basically

00:04:35,490 --> 00:04:39,120
what I was saying earlier about if you

00:04:37,170 --> 00:04:40,950
have large archives of data it's almost

00:04:39,120 --> 00:04:43,770
always important to be able to search

00:04:40,950 --> 00:04:48,300
them and ODT doesn't natively provide

00:04:43,770 --> 00:04:52,290
that capability but solar is excellent

00:04:48,300 --> 00:04:54,930
at that both of these projects are java

00:04:52,290 --> 00:04:56,280
based projects so their code base you

00:04:54,930 --> 00:04:59,550
know to a tip from a developer's

00:04:56,280 --> 00:05:02,040
perspective would look familiar and they

00:04:59,550 --> 00:05:06,960
both share the fact that they do most of

00:05:02,040 --> 00:05:08,100
their configuration through XML so if we

00:05:06,960 --> 00:05:10,230
were to look at like a sample

00:05:08,100 --> 00:05:13,320
integration and take this with a grain

00:05:10,230 --> 00:05:15,750
of salt this would be one high level

00:05:13,320 --> 00:05:17,220
diagram of a standard data archive

00:05:15,750 --> 00:05:19,770
pipeline if you're going all the way

00:05:17,220 --> 00:05:21,750
from the left you've got the acquisition

00:05:19,770 --> 00:05:24,600
phase where you're doing some number of

00:05:21,750 --> 00:05:27,600
processing to get data from one or many

00:05:24,600 --> 00:05:30,060
upstream sources you can use some ODT

00:05:27,600 --> 00:05:32,580
components you can use existing

00:05:30,060 --> 00:05:34,110
processes but the end result of that is

00:05:32,580 --> 00:05:36,300
that you've got the data in some sort of

00:05:34,110 --> 00:05:37,800
staging area after that it's generally a

00:05:36,300 --> 00:05:39,690
process of getting it from a staging

00:05:37,800 --> 00:05:42,030
area into an ingestion which usually

00:05:39,690 --> 00:05:45,270
involves extracting metadata or

00:05:42,030 --> 00:05:47,520
information about the data so that you

00:05:45,270 --> 00:05:49,800
can basically create a metadata catalog

00:05:47,520 --> 00:05:51,780
that represents or allow somebody to

00:05:49,800 --> 00:05:53,640
understand what are the contents of your

00:05:51,780 --> 00:05:55,470
archive and that metadata could be

00:05:53,640 --> 00:05:57,540
something as simple as like parsing the

00:05:55,470 --> 00:05:59,250
file name or it could be something like

00:05:57,540 --> 00:06:00,930
using Apache tikka to understand the

00:05:59,250 --> 00:06:03,210
contents of the file and basically look

00:06:00,930 --> 00:06:06,090
at the metadata inside it or as is often

00:06:03,210 --> 00:06:08,580
the case with us we're using standard

00:06:06,090 --> 00:06:09,930
scientific file formats like netcdf and

00:06:08,580 --> 00:06:12,360
hdf5 which have very well-defined

00:06:09,930 --> 00:06:13,890
metadata standards and so we have

00:06:12,360 --> 00:06:16,140
parsers that will read those and then

00:06:13,890 --> 00:06:18,020
extract the metadata that way but the

00:06:16,140 --> 00:06:20,430
third step then is having having

00:06:18,020 --> 00:06:22,440
obtained the data and having extracted

00:06:20,430 --> 00:06:25,590
the meta information from the file to

00:06:22,440 --> 00:06:29,370
build up this both the metadata catalog

00:06:25,590 --> 00:06:32,100
and the data archive and so ODT provides

00:06:29,370 --> 00:06:34,920
tools namely the ODT file manager to

00:06:32,100 --> 00:06:36,930
make this process very self-contained as

00:06:34,920 --> 00:06:38,820
well as a number of flexible

00:06:36,930 --> 00:06:39,330
configurations for it like how you want

00:06:38,820 --> 00:06:41,909
to lay the

00:06:39,330 --> 00:06:44,639
on disk what type of back-end you'd like

00:06:41,909 --> 00:06:48,389
to use for your metadata catalog the

00:06:44,639 --> 00:06:49,770
default is apache Lucene but there have

00:06:48,389 --> 00:06:52,860
been implementations that have used a

00:06:49,770 --> 00:06:54,750
relational database and there's other

00:06:52,860 --> 00:06:58,229
smaller experimental things which aren't

00:06:54,750 --> 00:06:59,520
part of part of the ODT themselves but

00:06:58,229 --> 00:07:01,620
are sort of done by the projects that

00:06:59,520 --> 00:07:03,389
are using ODT then the last phase let's

00:07:01,620 --> 00:07:05,129
just say is distribution ultimately want

00:07:03,389 --> 00:07:07,289
to be able to get the products that you

00:07:05,129 --> 00:07:08,849
have archived out to people and there

00:07:07,289 --> 00:07:11,659
are a couple of different ODT components

00:07:08,849 --> 00:07:15,120
that you can use to do the distribution

00:07:11,659 --> 00:07:20,599
but what you don't see here is any ideal

00:07:15,120 --> 00:07:20,599
way to search this these archives and so

00:07:21,319 --> 00:07:28,199
this would be one example of a strategy

00:07:24,509 --> 00:07:33,000
for integrating ODT and solar at the

00:07:28,199 --> 00:07:35,729
point in which you are ingesting files

00:07:33,000 --> 00:07:37,919
from the staging area into the catalog

00:07:35,729 --> 00:07:41,520
if you create a junction at that point

00:07:37,919 --> 00:07:43,650
and dump the metadata both into the ODT

00:07:41,520 --> 00:07:47,849
file manager and into the solar catalog

00:07:43,650 --> 00:07:49,800
at that point then you've got a you

00:07:47,849 --> 00:07:51,449
you're able to leverage Solar's native

00:07:49,800 --> 00:07:55,800
capability for doing really advanced

00:07:51,449 --> 00:07:57,599
search faceting dynamically collecting

00:07:55,800 --> 00:07:59,940
and searching and querying on different

00:07:57,599 --> 00:08:02,460
metadata keys all of that stuff becomes

00:07:59,940 --> 00:08:09,060
available to you and if you happen to

00:08:02,460 --> 00:08:11,430
include the oh the file managers product

00:08:09,060 --> 00:08:13,409
URL in your solar metadata then you

00:08:11,430 --> 00:08:15,839
almost create a loop in the sense that

00:08:13,409 --> 00:08:17,729
somebody who does a query for solar will

00:08:15,839 --> 00:08:20,729
get the raw URL to be able to pull the

00:08:17,729 --> 00:08:23,039
product from from ODT so this is this is

00:08:20,729 --> 00:08:24,930
one way that you can integrate so when I

00:08:23,039 --> 00:08:26,490
say products I know I've been saying

00:08:24,930 --> 00:08:29,039
this that you can think of it generally

00:08:26,490 --> 00:08:30,539
as one to one mapping between files ODT

00:08:29,039 --> 00:08:32,729
doesn't require that they're there

00:08:30,539 --> 00:08:35,099
plenty of instances in which ODT product

00:08:32,729 --> 00:08:37,829
is rett is actually a directory of files

00:08:35,099 --> 00:08:40,110
but in general we think of one product

00:08:37,829 --> 00:08:44,310
as one file each one of these has a

00:08:40,110 --> 00:08:46,500
globally unique ID but ODT also has the

00:08:44,310 --> 00:08:50,310
concept of a higher level collection of

00:08:46,500 --> 00:08:52,260
files and so when I was talking about

00:08:50,310 --> 00:08:55,200
metadata ODT has a very

00:08:52,260 --> 00:08:58,050
simple metadata model which informs and

00:08:55,200 --> 00:09:00,510
is shared by all of the ODT components

00:08:58,050 --> 00:09:03,780
and in fact it's used as a sort of way

00:09:00,510 --> 00:09:05,610
to persist state across the ODT

00:09:03,780 --> 00:09:08,970
components as data passes through the

00:09:05,610 --> 00:09:11,370
system it's just keevil or in some cases

00:09:08,970 --> 00:09:13,860
key multi-valve and there's generally

00:09:11,370 --> 00:09:16,500
two types of metadata there's system

00:09:13,860 --> 00:09:18,810
metadata which is stuff that is appended

00:09:16,500 --> 00:09:21,530
to the record of the file as it

00:09:18,810 --> 00:09:24,810
traverses through ODT components

00:09:21,530 --> 00:09:26,670
relationships between data we're talking

00:09:24,810 --> 00:09:28,350
Chris mentioned that pcs components they

00:09:26,670 --> 00:09:30,720
have this ability to track provenance

00:09:28,350 --> 00:09:33,960
and so as a file is generated by a

00:09:30,720 --> 00:09:35,700
workflow step the inputs to that step

00:09:33,960 --> 00:09:37,350
are recorded and the outputs to that

00:09:35,700 --> 00:09:38,550
step are recorded in the metadata for

00:09:37,350 --> 00:09:40,860
that file so that you can literally

00:09:38,550 --> 00:09:42,870
trace all the way back up the pedigree

00:09:40,860 --> 00:09:44,490
tree through the workflow steps what was

00:09:42,870 --> 00:09:47,010
used to generate this file and what is

00:09:44,490 --> 00:09:49,440
this file used in generating so that

00:09:47,010 --> 00:09:51,390
type of thing a system metadata user

00:09:49,440 --> 00:09:53,340
metadata on the other hand is something

00:09:51,390 --> 00:09:55,110
that's specified by the person building

00:09:53,340 --> 00:09:57,150
the data system and it's what we call a

00:09:55,110 --> 00:09:59,760
policy and it can be at the level of the

00:09:57,150 --> 00:10:01,860
product itself which is metadata that

00:09:59,760 --> 00:10:03,210
would change on a per file basis you

00:10:01,860 --> 00:10:06,180
could think of a file name as being

00:10:03,210 --> 00:10:07,890
product metadata or product type

00:10:06,180 --> 00:10:09,870
metadata which is stuff that wouldn't

00:10:07,890 --> 00:10:11,820
change across all of the files in that

00:10:09,870 --> 00:10:15,630
particular collection something like

00:10:11,820 --> 00:10:19,410
that would be maybe the data the the

00:10:15,630 --> 00:10:21,630
file type for example and again it's

00:10:19,410 --> 00:10:23,510
just used to extract information and get

00:10:21,630 --> 00:10:28,080
associated with individual products as

00:10:23,510 --> 00:10:29,610
they ingest it so I can show you just

00:10:28,080 --> 00:10:32,280
briefly what that looks like I was

00:10:29,610 --> 00:10:35,430
saying earlier that ODT represents its

00:10:32,280 --> 00:10:39,600
its configuration in XML and so what

00:10:35,430 --> 00:10:41,790
you're looking at here is an XML file

00:10:39,600 --> 00:10:45,240
that basically represents part of the

00:10:41,790 --> 00:10:47,310
ODT policy if you define a product type

00:10:45,240 --> 00:10:49,620
you're basically providing just a little

00:10:47,310 --> 00:10:53,130
bit of information to the ODT file

00:10:49,620 --> 00:10:55,470
manager the products type metadata that

00:10:53,130 --> 00:10:58,020
metadata common to all files is

00:10:55,470 --> 00:11:01,290
specified as a set of key valves you

00:10:58,020 --> 00:11:03,450
also specify the way in which you expect

00:11:01,290 --> 00:11:04,320
to extract metadata from the file so you

00:11:03,450 --> 00:11:06,840
have the OD

00:11:04,320 --> 00:11:08,790
has a concept of a med extractor and you

00:11:06,840 --> 00:11:11,100
can provide both the class that you'd

00:11:08,790 --> 00:11:13,740
like to use to do the extraction and any

00:11:11,100 --> 00:11:16,620
real configuration to that thing at that

00:11:13,740 --> 00:11:18,570
point so that's a basic idea of how to

00:11:16,620 --> 00:11:21,380
define a product type or a collection of

00:11:18,570 --> 00:11:24,060
products the elements itself are both

00:11:21,380 --> 00:11:26,010
they're very simple descriptions you can

00:11:24,060 --> 00:11:28,380
provide additional information but they

00:11:26,010 --> 00:11:30,840
basically each one has a unique ID a u

00:11:28,380 --> 00:11:32,100
RN and a general description of what

00:11:30,840 --> 00:11:34,080
does this metadata meet and this could

00:11:32,100 --> 00:11:40,280
be filename file location that type of

00:11:34,080 --> 00:11:44,010
thing so that's OD T's idea of metadata

00:11:40,280 --> 00:11:48,720
solar configuration is done also through

00:11:44,010 --> 00:11:50,520
XML but it's usually Solar's idea is the

00:11:48,720 --> 00:11:52,350
concept of fields fields that will get

00:11:50,520 --> 00:11:58,260
indexed fields that will become part of

00:11:52,350 --> 00:12:00,360
what you can query and the the solar

00:11:58,260 --> 00:12:02,010
schema essentially allows you to provide

00:12:00,360 --> 00:12:04,050
a great deal of information about each

00:12:02,010 --> 00:12:06,330
of these fields including what data type

00:12:04,050 --> 00:12:08,820
it should treat it as is it a date is it

00:12:06,330 --> 00:12:11,100
a number is it a string is it a special

00:12:08,820 --> 00:12:13,650
kind of string it's actually quite

00:12:11,100 --> 00:12:17,760
flexible so i will show you an example

00:12:13,650 --> 00:12:21,870
of the solar schema that we're using in

00:12:17,760 --> 00:12:24,320
one of our projects this is probably a

00:12:21,870 --> 00:12:24,320
little big

00:12:27,520 --> 00:12:31,510
so this actually is the solar schema for

00:12:29,860 --> 00:12:34,120
the project that was described in the

00:12:31,510 --> 00:12:35,860
previous talk the lab Cavs project and

00:12:34,120 --> 00:12:38,380
you'll notice that each of these field

00:12:35,860 --> 00:12:40,420
definitions has a name a type whether or

00:12:38,380 --> 00:12:42,010
not that thing should be indexed whether

00:12:40,420 --> 00:12:44,080
or not the data should be stored and if

00:12:42,010 --> 00:12:46,930
it's single or multi valued there's

00:12:44,080 --> 00:12:48,370
additional tricks that you can do which

00:12:46,930 --> 00:12:50,860
the solar documentation is actually

00:12:48,370 --> 00:12:53,040
pretty excellent at for describing but

00:12:50,860 --> 00:12:55,240
in general you must declare upfront

00:12:53,040 --> 00:12:57,250
everything that you'd like to be able to

00:12:55,240 --> 00:13:03,310
query on later this is the way that this

00:12:57,250 --> 00:13:05,290
is the way that you express that so if

00:13:03,310 --> 00:13:06,910
you've got a definition in ODT of what

00:13:05,290 --> 00:13:08,470
your data looks like an ODT and you've

00:13:06,910 --> 00:13:12,310
got an idea of what you want to search

00:13:08,470 --> 00:13:13,690
for in solar the next question is how do

00:13:12,310 --> 00:13:18,190
you make the connection between these

00:13:13,690 --> 00:13:19,870
two software packages so ODT introduced

00:13:18,190 --> 00:13:22,530
this thing called the solar indexer tool

00:13:19,870 --> 00:13:25,540
and it's a piece of the file manager

00:13:22,530 --> 00:13:27,370
component and it is a software that

00:13:25,540 --> 00:13:29,740
basically takes the ODT metadata

00:13:27,370 --> 00:13:32,080
definitions and the solar schema and

00:13:29,740 --> 00:13:35,380
allows you to dump the contents of your

00:13:32,080 --> 00:13:37,150
ODT metadata catalog into solar so that

00:13:35,380 --> 00:13:38,500
it can then be queried and it's

00:13:37,150 --> 00:13:40,450
important to note perhaps that we're

00:13:38,500 --> 00:13:42,520
only talking about metadata the transfer

00:13:40,450 --> 00:13:44,560
of information from ODT to solar is not

00:13:42,520 --> 00:13:46,270
the data of the file but just the

00:13:44,560 --> 00:13:51,970
information about the contents of your

00:13:46,270 --> 00:13:53,980
archive so this is that's the classpath

00:13:51,970 --> 00:13:55,840
if you were interested in like digging

00:13:53,980 --> 00:13:59,320
into the ODT source code to where you

00:13:55,840 --> 00:14:03,550
will find the solar indexer it became

00:13:59,320 --> 00:14:05,080
available in 04 got a lot more use sort

00:14:03,550 --> 00:14:06,490
of towards the end of last year and has

00:14:05,080 --> 00:14:07,660
had a couple of improvements so if

00:14:06,490 --> 00:14:09,850
you're going to check it out I recommend

00:14:07,660 --> 00:14:12,130
using at least the version released in

00:14:09,850 --> 00:14:14,530
05 and preferably the trunk at the

00:14:12,130 --> 00:14:16,930
moment and it offers a several different

00:14:14,530 --> 00:14:20,170
modes of operation for getting data

00:14:16,930 --> 00:14:22,210
between ODT and solar if you were to run

00:14:20,170 --> 00:14:23,920
this from the command line it gives you

00:14:22,210 --> 00:14:25,360
a set of options I'm going to go through

00:14:23,920 --> 00:14:27,640
some of the more common ones because

00:14:25,360 --> 00:14:29,110
this is a but this is just an example of

00:14:27,640 --> 00:14:32,290
what you'd get if you ran it with no

00:14:29,110 --> 00:14:34,450
options so one thing that is common is

00:14:32,290 --> 00:14:36,130
okay so i've got a ODT file manager lots

00:14:34,450 --> 00:14:37,870
and lots of products lots of different

00:14:36,130 --> 00:14:40,150
product types I'd like to take all of

00:14:37,870 --> 00:14:41,480
the products from one type and make and

00:14:40,150 --> 00:14:42,740
put them into solar so that I can

00:14:41,480 --> 00:14:44,930
query against them and find out what I

00:14:42,740 --> 00:14:47,930
have this is the Java command you might

00:14:44,930 --> 00:14:49,910
run from the command line you can see

00:14:47,930 --> 00:14:52,250
it's got several points you specify a

00:14:49,910 --> 00:14:55,790
configuration for the for the indexer

00:14:52,250 --> 00:15:00,860
tool the path to the to the ODT file

00:14:55,790 --> 00:15:05,149
manager jars and then in this case we're

00:15:00,860 --> 00:15:06,769
going to yeah we're going to just use

00:15:05,149 --> 00:15:08,839
dash dash all because we'd like to get

00:15:06,769 --> 00:15:10,790
all of the products that are in the file

00:15:08,839 --> 00:15:13,160
manager into solar and then simply

00:15:10,790 --> 00:15:14,750
providing both URLs to to each service

00:15:13,160 --> 00:15:17,420
it will then go ahead and do the

00:15:14,750 --> 00:15:18,889
ingestion if instead you wanted to get

00:15:17,420 --> 00:15:21,410
just the products from a specific

00:15:18,889 --> 00:15:24,170
product type you would change all to

00:15:21,410 --> 00:15:26,029
specify that specific product type each

00:15:24,170 --> 00:15:28,089
product type in its metadata has a you

00:15:26,029 --> 00:15:30,889
RN which uniquely defines it and

00:15:28,089 --> 00:15:33,680
specifying it here will cause the tool

00:15:30,889 --> 00:15:34,820
to only pay attention to files that are

00:15:33,680 --> 00:15:38,570
products that belong to that product

00:15:34,820 --> 00:15:40,760
type if you wanted to ingest a single

00:15:38,570 --> 00:15:43,519
product by its unique product ID that's

00:15:40,760 --> 00:15:47,149
also supported optionally it is also

00:15:43,519 --> 00:15:49,610
possible to tell the tool to drop any

00:15:47,149 --> 00:15:51,920
prior existing records for that for that

00:15:49,610 --> 00:15:53,420
tool before doing the index so sometimes

00:15:51,920 --> 00:15:55,579
sometimes you don't want that sometimes

00:15:53,420 --> 00:15:57,639
you want records to append but if you

00:15:55,579 --> 00:16:00,620
want to keep at most one per product

00:15:57,639 --> 00:16:09,139
using the delete flag is important so

00:16:00,620 --> 00:16:11,540
these two these two use cases are are

00:16:09,139 --> 00:16:13,550
pretty common in the sense that when

00:16:11,540 --> 00:16:15,110
you're first creating your index you're

00:16:13,550 --> 00:16:16,279
almost always going to want to just get

00:16:15,110 --> 00:16:18,260
everything in because it's the first

00:16:16,279 --> 00:16:19,699
time the solar instance is empty you

00:16:18,260 --> 00:16:21,680
want to just get everything in for a

00:16:19,699 --> 00:16:23,540
certain product type but then keeping

00:16:21,680 --> 00:16:26,269
things up to date as new products come

00:16:23,540 --> 00:16:28,010
in this mode of operation where you're

00:16:26,269 --> 00:16:29,839
ingesting a single product at a time is

00:16:28,010 --> 00:16:31,130
very useful because if you can think

00:16:29,839 --> 00:16:33,139
back to that map where there's that

00:16:31,130 --> 00:16:34,850
juncture as a product is coming across

00:16:33,139 --> 00:16:37,190
and it's new product ideas generated

00:16:34,850 --> 00:16:39,560
then you can just hook into this tool

00:16:37,190 --> 00:16:41,660
and say look copy the metadata for this

00:16:39,560 --> 00:16:45,459
product ID into solar in that way you

00:16:41,660 --> 00:16:45,459
can keep the two catalogs in sync

00:16:45,980 --> 00:16:52,020
so the each of each of the above also

00:16:49,470 --> 00:16:53,970
has this index our config as its first

00:16:52,020 --> 00:16:56,460
parameter which is a way to specify some

00:16:53,970 --> 00:16:58,560
properties about how to do the transfer

00:16:56,460 --> 00:17:00,839
of information how to how to afford the

00:16:58,560 --> 00:17:02,700
mapping between ODT and solar and any

00:17:00,839 --> 00:17:04,709
features that that you might want to add

00:17:02,700 --> 00:17:07,620
so i will give you an example of what

00:17:04,709 --> 00:17:11,329
that looks like again it's an xml config

00:17:07,620 --> 00:17:13,439
file with a relatively straightforward

00:17:11,329 --> 00:17:15,030
syntax the first thing you'll see there

00:17:13,439 --> 00:17:19,199
is that you're specifying the path to

00:17:15,030 --> 00:17:21,959
the file manager instance you are in

00:17:19,199 --> 00:17:23,579
case you have a non-standard way to

00:17:21,959 --> 00:17:26,400
access information about a particular

00:17:23,579 --> 00:17:28,350
product you can specify the URL that it

00:17:26,400 --> 00:17:30,570
should use otherwise it will just

00:17:28,350 --> 00:17:33,780
default to the out-of-the-box way that

00:17:30,570 --> 00:17:35,070
the file manager does things you'll see

00:17:33,780 --> 00:17:37,350
here at some point there's all of these

00:17:35,070 --> 00:17:39,030
fields which are just specified as what

00:17:37,350 --> 00:17:41,070
fields you're going to map if it's not

00:17:39,030 --> 00:17:43,170
in this file it's not going to be moved

00:17:41,070 --> 00:17:46,830
over to solar regardless of what the

00:17:43,170 --> 00:17:48,420
solar schema has likewise if the solar

00:17:46,830 --> 00:17:50,100
schema doesn't have something that you

00:17:48,420 --> 00:17:51,780
do have in here it's not going to get

00:17:50,100 --> 00:17:54,410
index because solar won't pay attention

00:17:51,780 --> 00:17:58,160
to it and so keeping these two

00:17:54,410 --> 00:18:00,540
categories in sync the the mapping in

00:17:58,160 --> 00:18:03,480
the index certain properties file and

00:18:00,540 --> 00:18:05,460
the field definitions in the schema in

00:18:03,480 --> 00:18:10,920
the solar schema that's an important

00:18:05,460 --> 00:18:12,270
thing to keep in mind and you can also

00:18:10,920 --> 00:18:15,030
as you see down here at the bottom you

00:18:12,270 --> 00:18:16,800
can specify specific things that are

00:18:15,030 --> 00:18:21,590
just hints that can be provided to solar

00:18:16,800 --> 00:18:27,870
to help with the transfer of data okay

00:18:21,590 --> 00:18:30,660
so now we've got a sense of all of the

00:18:27,870 --> 00:18:31,950
basic parts let's look at the use case

00:18:30,660 --> 00:18:34,290
so that what I was talking about earlier

00:18:31,950 --> 00:18:35,820
is really sort of use case one right

00:18:34,290 --> 00:18:37,890
which is building a searchable data

00:18:35,820 --> 00:18:39,420
archive and most nessa missions tend to

00:18:37,890 --> 00:18:41,400
be this sort of thing where every day

00:18:39,420 --> 00:18:43,020
some instrument out there is collecting

00:18:41,400 --> 00:18:45,090
information and that information needs

00:18:43,020 --> 00:18:47,550
to be serially added to the archive and

00:18:45,090 --> 00:18:49,440
once it's archived it becomes part of

00:18:47,550 --> 00:18:51,090
the permanent collection and there's

00:18:49,440 --> 00:18:52,980
almost never in fact it's almost

00:18:51,090 --> 00:18:55,200
enforced that nothing should ever change

00:18:52,980 --> 00:18:56,830
or perturb that because it's part of the

00:18:55,200 --> 00:19:00,440
official record

00:18:56,830 --> 00:19:03,740
so tends to be at one direction products

00:19:00,440 --> 00:19:05,270
and metadata aren't mutable and but at

00:19:03,740 --> 00:19:07,760
the same time we still want to give

00:19:05,270 --> 00:19:09,920
end-users downstream the ability to

00:19:07,760 --> 00:19:12,710
understand what has been collected and

00:19:09,920 --> 00:19:14,330
so that again is really this diagram

00:19:12,710 --> 00:19:15,800
where data comes in from the instrument

00:19:14,330 --> 00:19:19,010
or the platform or the satellite

00:19:15,800 --> 00:19:21,260
whatever it is and makes its way to the

00:19:19,010 --> 00:19:23,330
metadata catalog and then for

00:19:21,260 --> 00:19:25,580
distribution purposes we can put a solar

00:19:23,330 --> 00:19:27,350
catalog on top of it and this is the

00:19:25,580 --> 00:19:32,000
NASA planetary data system is more or

00:19:27,350 --> 00:19:34,460
less operated in this in this manner but

00:19:32,000 --> 00:19:36,920
there's a second use case which is you

00:19:34,460 --> 00:19:40,160
know in some cases you want to be able

00:19:36,920 --> 00:19:44,360
to interactively edit the metadata that

00:19:40,160 --> 00:19:46,610
was captured so what if but what about

00:19:44,360 --> 00:19:48,680
the case in which data came in at one

00:19:46,610 --> 00:19:51,590
point and a certain amount was known

00:19:48,680 --> 00:19:53,450
about it at that point but more becomes

00:19:51,590 --> 00:19:55,100
known or there's more input that

00:19:53,450 --> 00:19:56,780
pertains to the information you want to

00:19:55,100 --> 00:20:01,010
be able to capture that and get it back

00:19:56,780 --> 00:20:02,630
in and so your your architecture diagram

00:20:01,010 --> 00:20:06,200
would look a little bit like this and we

00:20:02,630 --> 00:20:08,330
would we can add another ODT service to

00:20:06,200 --> 00:20:11,930
the picture here and the ODT provides a

00:20:08,330 --> 00:20:13,400
curator service which is a you can think

00:20:11,930 --> 00:20:15,560
of it as a web application but it's

00:20:13,400 --> 00:20:19,370
really two distinct components really

00:20:15,560 --> 00:20:21,350
it's a set of Java jax-rs web services

00:20:19,370 --> 00:20:24,650
on the back end and then a really thin

00:20:21,350 --> 00:20:26,600
HTML Javascript front end and so there

00:20:24,650 --> 00:20:28,490
are people that take the curator as just

00:20:26,600 --> 00:20:30,440
unit and use the front end in the back

00:20:28,490 --> 00:20:32,930
end and there are also projects that

00:20:30,440 --> 00:20:35,060
will just install the web app and then

00:20:32,930 --> 00:20:37,670
take advantage only of the restful

00:20:35,060 --> 00:20:41,750
endpoints but what you can do with this

00:20:37,670 --> 00:20:44,060
is the curator allows for the selective

00:20:41,750 --> 00:20:45,500
editing of existing metadata and

00:20:44,060 --> 00:20:47,150
basically you can make changes to

00:20:45,500 --> 00:20:49,520
metadata in files that are already

00:20:47,150 --> 00:20:51,710
catalogued in the file manager component

00:20:49,520 --> 00:20:54,710
and those changes will be persisted back

00:20:51,710 --> 00:20:56,150
into the metadata catalog there's an

00:20:54,710 --> 00:21:00,250
issue with this picture obviously if

00:20:56,150 --> 00:21:02,990
you're using solar for search this

00:21:00,250 --> 00:21:04,760
scenario doesn't provide for also

00:21:02,990 --> 00:21:06,380
updating the solar catalog and so the

00:21:04,760 --> 00:21:08,990
sooner as soon as you start making

00:21:06,380 --> 00:21:10,400
changes to the catalog they're not

00:21:08,990 --> 00:21:11,780
immediately available

00:21:10,400 --> 00:21:14,120
in solar for the people that are doing

00:21:11,780 --> 00:21:16,820
searches so there's a couple of options

00:21:14,120 --> 00:21:19,580
that we've taken into account for how to

00:21:16,820 --> 00:21:21,500
solve this you can either take it upon

00:21:19,580 --> 00:21:23,840
yourself to modify the ODT curator

00:21:21,500 --> 00:21:26,390
services and i'll go through a couple of

00:21:23,840 --> 00:21:28,550
ways to do that or you can treat the ODT

00:21:26,390 --> 00:21:30,830
curator as a black box right and sort of

00:21:28,550 --> 00:21:32,780
right services at a higher level that

00:21:30,830 --> 00:21:35,000
use sort of as I was describing earlier

00:21:32,780 --> 00:21:36,800
invoke the curator services to do the

00:21:35,000 --> 00:21:40,520
curator update I'm sorry to do the file

00:21:36,800 --> 00:21:43,840
manager update and roll your own to keep

00:21:40,520 --> 00:21:45,560
the solar catalogue in check as well if

00:21:43,840 --> 00:21:48,800
you're going to go down the route of

00:21:45,560 --> 00:21:50,360
modifying the curator services as I

00:21:48,800 --> 00:21:53,750
mentioned these are written in the

00:21:50,360 --> 00:21:55,790
jax-rs which is the Java restful

00:21:53,750 --> 00:21:57,950
services framework and it's a really

00:21:55,790 --> 00:21:59,810
flexible framework and it uses for those

00:21:57,950 --> 00:22:02,630
of you not familiar with it it uses the

00:21:59,810 --> 00:22:05,690
concept of annotations above above code

00:22:02,630 --> 00:22:08,090
blocks to help specify things like what

00:22:05,690 --> 00:22:11,770
route what URL should map to this

00:22:08,090 --> 00:22:13,520
particular functionality and how the

00:22:11,770 --> 00:22:16,330
segments of that route should be

00:22:13,520 --> 00:22:21,140
interpreted as parameters to a function

00:22:16,330 --> 00:22:23,000
the curator services essentially if

00:22:21,140 --> 00:22:24,560
you're going to dig into the ODT trunk

00:22:23,000 --> 00:22:26,360
and you started at the trunk that's the

00:22:24,560 --> 00:22:28,370
path you would use to get in town to the

00:22:26,360 --> 00:22:30,920
service layer and on the second bullet

00:22:28,370 --> 00:22:33,590
there the curator URL if you make post

00:22:30,920 --> 00:22:35,660
and get requests to / services metadata

00:22:33,590 --> 00:22:37,220
update you have the ability to basically

00:22:35,660 --> 00:22:40,190
invoke these things either through the

00:22:37,220 --> 00:22:41,900
command line or through you know user

00:22:40,190 --> 00:22:47,500
interfaces web-based interfaces that you

00:22:41,900 --> 00:22:49,610
write that then target that so the

00:22:47,500 --> 00:22:51,530
there's this there's the concept of a

00:22:49,610 --> 00:22:53,800
servlet filter in Java right which

00:22:51,530 --> 00:22:57,410
intercepts both an incoming and outgoing

00:22:53,800 --> 00:22:58,670
request in response and jax-rs has its

00:22:57,410 --> 00:23:00,590
own version of this which is called a

00:22:58,670 --> 00:23:02,090
response handler and so one way to

00:23:00,590 --> 00:23:05,360
modify the curator services without

00:23:02,090 --> 00:23:06,980
changing actual curator code is to write

00:23:05,360 --> 00:23:09,890
your own response handler that then

00:23:06,980 --> 00:23:12,200
intercepts the response to the metadata

00:23:09,890 --> 00:23:15,350
update and the contact the the content

00:23:12,200 --> 00:23:17,330
of your your response handler could be

00:23:15,350 --> 00:23:21,610
just take whatever came in as a response

00:23:17,330 --> 00:23:21,610
and send it to solar as a solar document

00:23:22,920 --> 00:23:27,280
so that's sort of what this picture

00:23:25,780 --> 00:23:29,590
looks like right I mean you haven't

00:23:27,280 --> 00:23:31,360
you've actually changed the curator rest

00:23:29,590 --> 00:23:33,100
services well you haven't changed the

00:23:31,360 --> 00:23:36,220
code itself you've changed the

00:23:33,100 --> 00:23:37,690
functionality by implementing a filter

00:23:36,220 --> 00:23:40,270
in front of the response to one thing

00:23:37,690 --> 00:23:42,010
which essentially creates a diversion to

00:23:40,270 --> 00:23:46,360
solar and it helps to keep the two

00:23:42,010 --> 00:23:49,870
catalogs in sync and as an example of

00:23:46,360 --> 00:23:52,090
where we've used this at JPL a project

00:23:49,870 --> 00:23:54,840
that I'm involved in involves capturing

00:23:52,090 --> 00:23:58,030
on a nightly basis Radio Astronomy

00:23:54,840 --> 00:23:59,500
observations from the vlba instrument

00:23:58,030 --> 00:24:01,870
the very large baseline array instrument

00:23:59,500 --> 00:24:04,000
and they're searching for these fast

00:24:01,870 --> 00:24:06,310
transient which sort of millisecond

00:24:04,000 --> 00:24:08,980
bursts of radio frequency from far out

00:24:06,310 --> 00:24:12,700
in the galaxy and they use a set of AI

00:24:08,980 --> 00:24:14,140
algorithms to identify likely candidates

00:24:12,700 --> 00:24:15,730
because the data is tremendous and

00:24:14,140 --> 00:24:17,680
they're just interested in performing

00:24:15,730 --> 00:24:21,550
human review on things that are most

00:24:17,680 --> 00:24:23,770
likely interesting radio frequency

00:24:21,550 --> 00:24:28,390
events as opposed to people using their

00:24:23,770 --> 00:24:30,370
garage door opener but when I went a

00:24:28,390 --> 00:24:31,780
reviewer the science team reviews these

00:24:30,370 --> 00:24:33,730
things on a nightly basis and what the

00:24:31,780 --> 00:24:35,590
reviewers given an option the ability of

00:24:33,730 --> 00:24:37,390
the tag a particular event they will

00:24:35,590 --> 00:24:38,860
look at this and they're really good so

00:24:37,390 --> 00:24:41,230
they would sort of say within a second

00:24:38,860 --> 00:24:42,640
or two that's RFI I don't need that or

00:24:41,230 --> 00:24:44,770
that's potentially interesting or

00:24:42,640 --> 00:24:46,750
whatever we give them the ability to tag

00:24:44,770 --> 00:24:48,670
each of these events as being

00:24:46,750 --> 00:24:50,920
potentially interesting we're behind the

00:24:48,670 --> 00:24:52,660
scenes and this will get described in a

00:24:50,920 --> 00:24:54,700
talk tomorrow actually in a lot of

00:24:52,660 --> 00:24:56,170
detail this particular system but behind

00:24:54,700 --> 00:24:57,640
the scenes that from a high level what's

00:24:56,170 --> 00:24:59,140
happening is we've got basically that

00:24:57,640 --> 00:25:01,000
pipeline diagram that I was showing you

00:24:59,140 --> 00:25:02,560
where data is coming in it's being

00:25:01,000 --> 00:25:04,360
archived the metadata is being extracted

00:25:02,560 --> 00:25:06,060
a catalogs being built and solar is

00:25:04,360 --> 00:25:10,450
being populated so that we can search

00:25:06,060 --> 00:25:13,240
but the editing portion of this is after

00:25:10,450 --> 00:25:15,310
all of that has happened reviewers come

00:25:13,240 --> 00:25:17,020
in and they say they essentially assign

00:25:15,310 --> 00:25:18,820
a quality rating to some of this stuff

00:25:17,020 --> 00:25:20,530
and that needs to be associated with the

00:25:18,820 --> 00:25:22,300
upstream or with the original

00:25:20,530 --> 00:25:24,490
information and so they tag something

00:25:22,300 --> 00:25:27,130
and we have to persist that back to the

00:25:24,490 --> 00:25:29,560
metadata for that particular product so

00:25:27,130 --> 00:25:32,140
in this project we've taken the the

00:25:29,560 --> 00:25:35,070
example of modifying the curator rest

00:25:32,140 --> 00:25:37,540
code to do that to do that Cinco

00:25:35,070 --> 00:25:38,740
the other option that you have is to

00:25:37,540 --> 00:25:41,080
essentially treat the curator as a

00:25:38,740 --> 00:25:43,990
complete black box not write any code to

00:25:41,080 --> 00:25:45,730
do that to do to either intercept any of

00:25:43,990 --> 00:25:49,180
the services but just treat it as a

00:25:45,730 --> 00:25:50,740
service and so we've we've done this on

00:25:49,180 --> 00:25:53,700
on other projects where you basically

00:25:50,740 --> 00:25:56,050
wrap the call to the solar indexer tool

00:25:53,700 --> 00:25:59,980
the nice thing about it being a command

00:25:56,050 --> 00:26:01,360
line thing is that you're not limited I

00:25:59,980 --> 00:26:03,640
don't know if it's a limit or not but

00:26:01,360 --> 00:26:05,020
you're not restricted to writing all of

00:26:03,640 --> 00:26:06,700
your things in Java if you prefer to

00:26:05,020 --> 00:26:08,410
call it from anything that can invoke

00:26:06,700 --> 00:26:10,600
the command line or from the command

00:26:08,410 --> 00:26:12,310
line itself the solar indexer helps you

00:26:10,600 --> 00:26:17,590
bridge the gap between ODT and solar

00:26:12,310 --> 00:26:19,690
from a very generic platform so the

00:26:17,590 --> 00:26:22,060
second case is basically where you

00:26:19,690 --> 00:26:25,720
develop your own service layer instead

00:26:22,060 --> 00:26:27,370
of the the out-of-the-box one where it

00:26:25,720 --> 00:26:28,660
basically are sorry you're treating the

00:26:27,370 --> 00:26:30,870
curator as a black box and you've got

00:26:28,660 --> 00:26:32,830
your own service layer that handles the

00:26:30,870 --> 00:26:34,420
persistence of that information so that

00:26:32,830 --> 00:26:36,940
both sides of these things keep up to

00:26:34,420 --> 00:26:39,010
date and we've actually done this on the

00:26:36,940 --> 00:26:40,480
project that was just described the lab

00:26:39,010 --> 00:26:43,900
has project that was talked about in the

00:26:40,480 --> 00:26:45,940
prior the prior instance one of the

00:26:43,900 --> 00:26:48,550
things we had to do on this was if we

00:26:45,940 --> 00:26:49,810
have products in our ODT catalog we

00:26:48,550 --> 00:26:52,960
wanted to be able to give users the

00:26:49,810 --> 00:26:54,730
ability to overtime adjust the

00:26:52,960 --> 00:26:56,260
permissions of who might be able to see

00:26:54,730 --> 00:26:58,420
that that product or who might be able

00:26:56,260 --> 00:27:00,910
to interact with that and we had all of

00:26:58,420 --> 00:27:03,670
our permissions stored in an ldap server

00:27:00,910 --> 00:27:05,530
and we wanted to therefore restrict who

00:27:03,670 --> 00:27:06,850
the entries that people could select for

00:27:05,530 --> 00:27:08,800
each of these things from ldap so we

00:27:06,850 --> 00:27:10,240
wrote a service that essentially queried

00:27:08,800 --> 00:27:13,360
ldap for the available list of groups

00:27:10,240 --> 00:27:15,940
and allowed us to basically write the

00:27:13,360 --> 00:27:24,060
selections the user selections to the

00:27:15,940 --> 00:27:24,060
metadata for each product so

00:27:24,840 --> 00:27:29,110
some of the things that can be learned

00:27:26,680 --> 00:27:31,900
from this are essentially that solar and

00:27:29,110 --> 00:27:34,390
ODT do fit really well together there's

00:27:31,900 --> 00:27:35,890
there's a good need because ODT has

00:27:34,390 --> 00:27:37,480
decided it's not going to be everything

00:27:35,890 --> 00:27:39,580
it's going to focus on what it does best

00:27:37,480 --> 00:27:42,160
which is data management Solar is an

00:27:39,580 --> 00:27:44,560
outstanding tool for doing search

00:27:42,160 --> 00:27:49,000
enterprise search with really flexible

00:27:44,560 --> 00:27:50,530
interfaces we've got both solar and ODT

00:27:49,000 --> 00:27:54,250
take advantage of restful interface is

00:27:50,530 --> 00:27:55,990
both its solar's primary service and an

00:27:54,250 --> 00:27:59,370
o.d tease curator service for keeping

00:27:55,990 --> 00:28:01,600
metadata up to date but really the

00:27:59,370 --> 00:28:04,150
flexibility of the tools means that how

00:28:01,600 --> 00:28:06,550
you combine them the strategies that you

00:28:04,150 --> 00:28:08,590
use the two that I discussed today or

00:28:06,550 --> 00:28:10,840
you know any number of other ones really

00:28:08,590 --> 00:28:12,700
depends on what you're trying to get out

00:28:10,840 --> 00:28:15,550
of it what how comfortable you are with

00:28:12,700 --> 00:28:19,210
the code bases and what type of

00:28:15,550 --> 00:28:21,400
performance you're looking for so a

00:28:19,210 --> 00:28:23,620
couple of things that we have in mind

00:28:21,400 --> 00:28:26,830
for making this easier because now solar

00:28:23,620 --> 00:28:28,570
and ODT have been sort of tied together

00:28:26,830 --> 00:28:30,040
on a number of different projects that

00:28:28,570 --> 00:28:32,800
I've been involved in and a number of

00:28:30,040 --> 00:28:35,020
projects that I've heard about so this

00:28:32,800 --> 00:28:36,400
is apparently a compelling partnership

00:28:35,020 --> 00:28:41,970
and so one of the things that we're

00:28:36,400 --> 00:28:44,200
talking about doing is replacing the

00:28:41,970 --> 00:28:46,450
metadata catalog in the file manager

00:28:44,200 --> 00:28:47,860
component I mentioned earlier that you

00:28:46,450 --> 00:28:50,290
can swap these out for different things

00:28:47,860 --> 00:28:53,650
some people view our DBMS currently the

00:28:50,290 --> 00:28:55,720
default as we've seen one of the next

00:28:53,650 --> 00:28:57,520
step plans is potentially to develop a

00:28:55,720 --> 00:28:59,500
solar based catalog so that we can just

00:28:57,520 --> 00:29:03,550
sort of integrate some of this and

00:28:59,500 --> 00:29:05,260
remove some of the moving parts the the

00:29:03,550 --> 00:29:08,080
good side of that right the pro for that

00:29:05,260 --> 00:29:09,700
would be that there is fewer moving

00:29:08,080 --> 00:29:12,850
parts there's less that you'd have to

00:29:09,700 --> 00:29:14,920
construct a potential con is just to

00:29:12,850 --> 00:29:16,840
keep in mind that perhaps doing so is

00:29:14,920 --> 00:29:18,880
more restrictive in the sense that the

00:29:16,840 --> 00:29:21,240
file managers metadata catalog as sort

00:29:18,880 --> 00:29:23,650
of a bare-bones ground truth catalog is

00:29:21,240 --> 00:29:26,860
one thing and then you have the

00:29:23,650 --> 00:29:28,510
flexibility to build your solar index to

00:29:26,860 --> 00:29:30,010
populate your solar schema and build

00:29:28,510 --> 00:29:32,290
your solar index in any way that you

00:29:30,010 --> 00:29:34,300
like or build two or three if you need

00:29:32,290 --> 00:29:36,700
to be able to support concurrent

00:29:34,300 --> 00:29:37,779
different formats of searching and if

00:29:36,700 --> 00:29:41,590
solar catalog

00:29:37,779 --> 00:29:43,419
is your primary catalog and you've set

00:29:41,590 --> 00:29:46,509
it up at the time of in just to be

00:29:43,419 --> 00:29:48,429
queried or searched a certain way do you

00:29:46,509 --> 00:29:50,349
have the flexibility to then change that

00:29:48,429 --> 00:29:51,669
when you need to so it's just a couple

00:29:50,349 --> 00:29:54,669
of things to think about and this is a

00:29:51,669 --> 00:30:00,609
discussion that is just starting to form

00:29:54,669 --> 00:30:03,789
in the ODT dev list the other possible

00:30:00,609 --> 00:30:08,009
enhancement is to take the method that

00:30:03,789 --> 00:30:10,749
was just described here and actually

00:30:08,009 --> 00:30:12,129
integrate that into the curator services

00:30:10,749 --> 00:30:13,899
either as some sort of switch that you

00:30:12,129 --> 00:30:15,940
can turn on where if you provide at a

00:30:13,899 --> 00:30:18,789
solar URL it will also make the correct

00:30:15,940 --> 00:30:21,129
set of solar calls to update a solar

00:30:18,789 --> 00:30:24,129
index right now the curator speaks only

00:30:21,129 --> 00:30:25,899
to the ODT file manager but if there's a

00:30:24,129 --> 00:30:28,869
compelling way to combine these things

00:30:25,899 --> 00:30:30,789
that's not it doesn't get rid of the

00:30:28,869 --> 00:30:34,359
general generality of it that's one

00:30:30,789 --> 00:30:35,710
thing we're looking at pursuing I said

00:30:34,359 --> 00:30:39,219
at the end I mentioned where you can

00:30:35,710 --> 00:30:41,529
learn more this is sort of the canonical

00:30:39,219 --> 00:30:44,469
entry points for information on either

00:30:41,529 --> 00:30:47,289
of the two projects especially in the

00:30:44,469 --> 00:30:49,919
case of ODT I think it's fair to say

00:30:47,289 --> 00:30:52,210
that the wiki is a much more up-to-date

00:30:49,919 --> 00:30:54,669
source of information than the official

00:30:52,210 --> 00:30:55,929
website official website is is good it's

00:30:54,669 --> 00:30:57,729
excellent for getting a high level

00:30:55,929 --> 00:31:00,669
picture but if you want the latest

00:30:57,729 --> 00:31:05,769
development activity definitely take a

00:31:00,669 --> 00:31:08,159
take a look at the ODT wiki so that's

00:31:05,769 --> 00:31:08,159
what I've got

00:31:25,490 --> 00:31:33,190
a great presentation uh what size of

00:31:29,800 --> 00:31:36,170
index and data are you dealing with

00:31:33,190 --> 00:31:39,020
great question for the projects that I'm

00:31:36,170 --> 00:31:40,520
specifically involved in we're not

00:31:39,020 --> 00:31:43,490
dealing with anything that anyone would

00:31:40,520 --> 00:31:45,140
call Big Data or even inconvenient data

00:31:43,490 --> 00:31:51,230
and I think what we're dealing with is

00:31:45,140 --> 00:31:52,820
in the order of in some cases so in some

00:31:51,230 --> 00:31:56,150
cases many tens to hundreds of gigabytes

00:31:52,820 --> 00:31:58,190
but the radio Radio Astronomy one it

00:31:56,150 --> 00:32:00,470
really depends as far as what I'm

00:31:58,190 --> 00:32:02,179
indexing in solar it's very small but

00:32:00,470 --> 00:32:04,070
the upstream of course that's just a

00:32:02,179 --> 00:32:07,340
small representation of a much larger

00:32:04,070 --> 00:32:09,350
thing and so the full scale data there

00:32:07,340 --> 00:32:11,270
is in the many tens to hundreds of

00:32:09,350 --> 00:32:12,830
terabytes but the index and the

00:32:11,270 --> 00:32:15,200
information that comes across on a

00:32:12,830 --> 00:32:16,880
nightly basis is the extract the

00:32:15,200 --> 00:32:18,530
information the meta information and so

00:32:16,880 --> 00:32:22,240
that's only about 100 megabytes or so a

00:32:18,530 --> 00:32:22,240
night and we index that information

00:32:29,880 --> 00:32:35,830
so in terms of you know placing the

00:32:33,480 --> 00:32:38,320
providing of solar as one of the back

00:32:35,830 --> 00:32:39,309
end components in my opinion you you

00:32:38,320 --> 00:32:40,690
know we can discuss this I don't think

00:32:39,309 --> 00:32:43,840
would be restricted because if you think

00:32:40,690 --> 00:32:45,970
about it the cast catalog underline with

00:32:43,840 --> 00:32:49,809
a little model is key values pairs right

00:32:45,970 --> 00:32:51,850
and that's the same a solar so I mean if

00:32:49,809 --> 00:32:54,220
Yuri don't lose any semantics installing

00:32:51,850 --> 00:32:56,350
so solid also storing into like leucine

00:32:54,220 --> 00:32:58,960
or relational the bases we do right now

00:32:56,350 --> 00:33:00,879
and I think that if you wanted to steal

00:32:58,960 --> 00:33:03,610
so let's assume that your core metadata

00:33:00,879 --> 00:33:05,169
stored in Seoul it's ingested to the

00:33:03,610 --> 00:33:08,080
file manager then it's in storage stored

00:33:05,169 --> 00:33:09,789
in solar you could still not do anything

00:33:08,080 --> 00:33:11,620
you want with a metadata just as if it

00:33:09,789 --> 00:33:13,570
was in the current cast cutter I think

00:33:11,620 --> 00:33:15,850
you can just you know maybe have

00:33:13,570 --> 00:33:17,769
multiple solar instances or may be

00:33:15,850 --> 00:33:19,480
modified now whatever you can do right

00:33:17,769 --> 00:33:21,279
now I think you would still be able to

00:33:19,480 --> 00:33:22,629
do it if you store it in solar now

00:33:21,279 --> 00:33:23,919
that's a great point looker yeah I think

00:33:22,629 --> 00:33:25,720
I think you're right what I was trying

00:33:23,919 --> 00:33:27,509
to say wasn't what I was trying to say

00:33:25,720 --> 00:33:29,889
was that I think you need to be careful

00:33:27,509 --> 00:33:32,049
with the decisions you make because

00:33:29,889 --> 00:33:34,149
solar gives you a bit extra flexibility

00:33:32,049 --> 00:33:36,279
so you're right that ODT is just kevo

00:33:34,149 --> 00:33:38,200
but solar gives you the ability to

00:33:36,279 --> 00:33:40,090
specify a lot of information about those

00:33:38,200 --> 00:33:41,500
valves in the sense that you can say

00:33:40,090 --> 00:33:43,330
that their dates or you can say that

00:33:41,500 --> 00:33:44,860
their things and you can copy valve you

00:33:43,330 --> 00:33:47,740
can copy fields to other fields to

00:33:44,860 --> 00:33:49,389
create better search categories if you

00:33:47,740 --> 00:33:51,159
want to search on someone's name age in

00:33:49,389 --> 00:33:52,990
place of birth you can copy the name age

00:33:51,159 --> 00:33:55,269
in place of birth into another field and

00:33:52,990 --> 00:33:58,000
those that those decisions are generally

00:33:55,269 --> 00:33:59,320
made once at the time that's a good

00:33:58,000 --> 00:34:01,480
point because if you think about even

00:33:59,320 --> 00:34:03,460
cast everything is a stream right

00:34:01,480 --> 00:34:04,840
installer you need to define the type so

00:34:03,460 --> 00:34:06,220
we would need to take that into account

00:34:04,840 --> 00:34:07,870
that's all I meant I didn't mean that

00:34:06,220 --> 00:34:09,010
it's restrictive I think perhaps I

00:34:07,870 --> 00:34:10,629
should have better said that you have to

00:34:09,010 --> 00:34:14,020
be more aware of what what the

00:34:10,629 --> 00:34:18,490
possibilities are quick comment on that

00:34:14,020 --> 00:34:21,520
which is ODT 147 Luka you can work on

00:34:18,490 --> 00:34:23,800
that it's to make the what you just said

00:34:21,520 --> 00:34:27,720
not true and so just to make the file

00:34:23,800 --> 00:34:27,720
manager type where thanks

00:34:33,560 --> 00:34:37,970
I this might be a little bit off-topic

00:34:35,810 --> 00:34:41,060
but the solar web page talks about

00:34:37,970 --> 00:34:43,010
geospatial searches you know that's kind

00:34:41,060 --> 00:34:46,220
of a common topic of interest for the

00:34:43,010 --> 00:34:48,770
ODT community have you done anything

00:34:46,220 --> 00:34:50,810
with solar and geospatial searches it's

00:34:48,770 --> 00:34:52,250
a great point I have not because the

00:34:50,810 --> 00:34:54,710
data that I've dealt with is either

00:34:52,250 --> 00:34:58,310
biomedical in nature or radio astronomy

00:34:54,710 --> 00:34:59,840
and so it's not directly applicable so I

00:34:58,310 --> 00:35:05,240
haven't had any direct experience with

00:34:59,840 --> 00:35:07,520
those index short comment on that some

00:35:05,240 --> 00:35:10,340
of the solar geospatial geo hash stuff

00:35:07,520 --> 00:35:14,780
came out of us originally I implemented

00:35:10,340 --> 00:35:20,390
that and so that that came out of use on

00:35:14,780 --> 00:35:22,700
the vo DC project in nodt and so but the

00:35:20,390 --> 00:35:24,020
best way that I would recommend to do

00:35:22,700 --> 00:35:26,810
those types of things now and we were

00:35:24,020 --> 00:35:30,320
talking about this sort of earlier but

00:35:26,810 --> 00:35:32,090
is thinking about ways to dump to dump

00:35:30,320 --> 00:35:35,060
the data out of ODT into things like

00:35:32,090 --> 00:35:36,530
geoserver which supports WMS and and a

00:35:35,060 --> 00:35:39,110
lot of those things and using things

00:35:36,530 --> 00:35:42,770
like ji'tal to dump that data or Apache

00:35:39,110 --> 00:35:44,300
sis spatial information systems which is

00:35:42,770 --> 00:35:45,890
a project that today is the java

00:35:44,300 --> 00:35:48,140
implementation of a quadtree and

00:35:45,890 --> 00:35:51,740
supports point radius and bounding box

00:35:48,140 --> 00:35:54,320
level searches and is growing to support

00:35:51,740 --> 00:36:01,520
things like polygonal and to be like a

00:35:54,320 --> 00:36:04,000
generic spatial library for that any

00:36:01,520 --> 00:36:04,000
other question

00:36:04,839 --> 00:36:08,279

YouTube URL: https://www.youtube.com/watch?v=wb2p2f4WQ0U


