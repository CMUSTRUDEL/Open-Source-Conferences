Title: SSL: "Securing" the Web with Apache
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Igor GaliÄ‡
ApacheCon NA 2013
A Patchy Web
Captions: 
	00:00:00,500 --> 00:00:07,400
welcome everyone um next up we have

00:00:03,360 --> 00:00:13,200
eagle with securing web it with Apache

00:00:07,400 --> 00:00:26,099
take your way thanks a lot thanks a lot

00:00:13,200 --> 00:00:29,550
Justin hello and welcome to my little

00:00:26,099 --> 00:00:32,309
talk about security and ssl usually

00:00:29,550 --> 00:00:36,059
someone qualified thus this kind of talk

00:00:32,309 --> 00:00:38,190
but I thought I just dip in and find out

00:00:36,059 --> 00:00:42,719
how as the cell works myself and present

00:00:38,190 --> 00:00:45,840
it to other people who are curious okay

00:00:42,719 --> 00:00:49,200
so this is securing the web with ssl

00:00:45,840 --> 00:00:51,449
we'll find out what the irony behind

00:00:49,200 --> 00:00:55,500
this is I hope during the talk and how

00:00:51,449 --> 00:00:57,629
we can fix it to be actually secure so

00:00:55,500 --> 00:00:59,670
for those of you who don't know me my

00:00:57,629 --> 00:01:03,510
name is Igor and my last name is

00:00:59,670 --> 00:01:05,400
pronounced garlic just in case anyone is

00:01:03,510 --> 00:01:11,340
interested you can find me on the

00:01:05,400 --> 00:01:16,200
Internet I'm Jay MCG and on IRC and hero

00:01:11,340 --> 00:01:18,720
gin on Twitter because I didn't sign up

00:01:16,200 --> 00:01:23,520
early enough to get the same thing

00:01:18,720 --> 00:01:25,320
everywhere yeah I'm wearing a hat

00:01:23,520 --> 00:01:27,659
because of the lights and because it's

00:01:25,320 --> 00:01:32,329
cold in here not because of fashion by

00:01:27,659 --> 00:01:36,450
the way not entirely because of passion

00:01:32,329 --> 00:01:42,299
okay quick overview we'll take a look at

00:01:36,450 --> 00:01:46,170
what SSL is and how it works we'll try

00:01:42,299 --> 00:01:49,829
to assess from that how what's wrong

00:01:46,170 --> 00:01:53,009
with it and we'll try to take a look at

00:01:49,829 --> 00:01:54,509
how to get it right and maybe we can

00:01:53,009 --> 00:01:58,170
spark a little bit of a discussion of

00:01:54,509 --> 00:02:00,420
how to get it all a little bit right so

00:01:58,170 --> 00:02:03,570
that's right let's dive right into it

00:02:00,420 --> 00:02:07,789
SSL is one of those nice technologies

00:02:03,570 --> 00:02:12,420
from the 90s it was invented by Netscape

00:02:07,789 --> 00:02:13,800
other inventions from Netscape in the

00:02:12,420 --> 00:02:15,960
90s include java

00:02:13,800 --> 00:02:21,660
script I'm just putting this in parallel

00:02:15,960 --> 00:02:30,900
for those of you who know JavaScript and

00:02:21,660 --> 00:02:33,870
its legacy it wasn't until in 1999 that

00:02:30,900 --> 00:02:37,770
the IETF took over and made it an actual

00:02:33,870 --> 00:02:39,960
standards up to this point it was really

00:02:37,770 --> 00:02:41,940
just netscape's thing you know and

00:02:39,960 --> 00:02:46,680
everybody was using it because there was

00:02:41,940 --> 00:02:53,370
nothing else out there but since 1999

00:02:46,680 --> 00:02:56,430
it's actually cold TLS so from now on

00:02:53,370 --> 00:02:59,640
I'm gonna try say TLS and every time i

00:02:56,430 --> 00:03:10,290
say ssl i probably mean TLS unless i

00:02:59,640 --> 00:03:13,830
qualified by version 19 sorry 2008 we

00:03:10,290 --> 00:03:19,200
had a since 2008 we are at version 1.2

00:03:13,830 --> 00:03:22,230
which is pretty nice and since 2011

00:03:19,200 --> 00:03:28,590
we've got my favorite addition to the

00:03:22,230 --> 00:03:31,050
RFC which is 61 72 it deprecates SSL

00:03:28,590 --> 00:03:36,390
version to you can no longer revert back

00:03:31,050 --> 00:03:40,590
to version two if you are on TLS one dot

00:03:36,390 --> 00:03:45,000
two and you have this implementation so

00:03:40,590 --> 00:03:49,709
this is a step forward now so what is

00:03:45,000 --> 00:03:53,930
TLS TLS is a so-called secure protocol

00:03:49,709 --> 00:03:59,100
and as a secure protocol it needs to

00:03:53,930 --> 00:04:02,280
implement a set of it needs to have a

00:03:59,100 --> 00:04:07,320
set of certain properties to fulfill

00:04:02,280 --> 00:04:10,590
that role to fulfill that name and those

00:04:07,320 --> 00:04:12,720
properties are confidentiality which is

00:04:10,590 --> 00:04:14,670
what most of us think when we think a

00:04:12,720 --> 00:04:17,790
security protocol which is the

00:04:14,670 --> 00:04:23,400
encryption part it needs to have

00:04:17,790 --> 00:04:26,130
integrity and since TLS means transport

00:04:23,400 --> 00:04:27,470
layer security and this usually layered

00:04:26,130 --> 00:04:32,600
on top of

00:04:27,470 --> 00:04:34,250
tcp and TCP already guarantees that sort

00:04:32,600 --> 00:04:36,470
of thing we'd also like to have it in

00:04:34,250 --> 00:04:41,000
TLS so we really want to make sure that

00:04:36,470 --> 00:04:44,870
what what we send is what arrives it

00:04:41,000 --> 00:04:49,960
needs to have authenticity and this is

00:04:44,870 --> 00:04:52,730
something that will go in much detail

00:04:49,960 --> 00:04:57,950
authenticity basically just says okay i

00:04:52,730 --> 00:05:03,670
know who i am talking to and it needs to

00:04:57,950 --> 00:05:09,050
have non-repudiation which is the

00:05:03,670 --> 00:05:15,140
originator of a communication is cannot

00:05:09,050 --> 00:05:16,760
be must not be able to later say okay I

00:05:15,140 --> 00:05:18,020
didn't I didn't say that I didn't do

00:05:16,760 --> 00:05:19,880
that it's basically like you sign a

00:05:18,020 --> 00:05:24,800
contract and later said no i don't i

00:05:19,880 --> 00:05:29,090
don't own you $100,000 other nice things

00:05:24,800 --> 00:05:31,940
would be availability so people who are

00:05:29,090 --> 00:05:35,240
supposed to have access to a secure site

00:05:31,940 --> 00:05:39,919
can have access to it and access control

00:05:35,240 --> 00:05:44,090
arm which those who are not supposed to

00:05:39,919 --> 00:05:48,590
have access to it don't but some of

00:05:44,090 --> 00:05:50,780
these concepts are bunched together like

00:05:48,590 --> 00:05:54,640
access control and non-repudiation are

00:05:50,780 --> 00:05:57,050
usually tied around the thon tissa t so

00:05:54,640 --> 00:06:01,000
that's that's what we would like to have

00:05:57,050 --> 00:06:06,229
TLS is actually quite quite a simple

00:06:01,000 --> 00:06:10,190
protocol or a simple set of ideas we

00:06:06,229 --> 00:06:13,340
have on top we have those services that

00:06:10,190 --> 00:06:17,840
we we just discussed I mean they're sort

00:06:13,340 --> 00:06:22,960
of implemented like services and below

00:06:17,840 --> 00:06:28,070
that we have certain mechanisms like

00:06:22,960 --> 00:06:31,250
signatures encryption and hashing so for

00:06:28,070 --> 00:06:35,450
instance confidentiality is guaranteed

00:06:31,250 --> 00:06:39,880
by encryption and integrity by hashing

00:06:35,450 --> 00:06:43,970
and oops

00:06:39,880 --> 00:06:49,940
did I forget anything signatures yeah

00:06:43,970 --> 00:06:52,130
and underneath we have this the

00:06:49,940 --> 00:06:55,190
algorithms that those are implemented in

00:06:52,130 --> 00:07:00,800
and I just see that those are a little

00:06:55,190 --> 00:07:04,550
bit outdated so RSA I mean md5 I hope

00:07:00,800 --> 00:07:08,480
nobody uses md5 these days anymore in

00:07:04,550 --> 00:07:11,510
fact it's actually a in in the modern

00:07:08,480 --> 00:07:14,630
versions of TLS it's probably pretty

00:07:11,510 --> 00:07:20,120
much deprecated okay so we see that it's

00:07:14,630 --> 00:07:24,350
really really simple basic ideas and

00:07:20,120 --> 00:07:27,350
they're layered like a cake and to see

00:07:24,350 --> 00:07:29,090
further how this works out let's take a

00:07:27,350 --> 00:07:32,060
look at the handshake this looks pretty

00:07:29,090 --> 00:07:35,780
good well it's actually bigger on the

00:07:32,060 --> 00:07:41,900
screen then on mine here can make it a

00:07:35,780 --> 00:07:48,670
little bit bigger I think well I'll do

00:07:41,900 --> 00:07:48,670
though Danielle how light-

00:07:49,770 --> 00:07:57,900
a little bit yeah we can navigate around

00:07:54,479 --> 00:07:59,849
that this is a graphics i took from

00:07:57,900 --> 00:08:02,970
wikipedia i had to fix it up and

00:07:59,849 --> 00:08:07,139
contribute back to it I hope it's right

00:08:02,970 --> 00:08:10,710
now so this is the TLS handshake it's

00:08:07,139 --> 00:08:17,900
it's it's a full handshake if both sides

00:08:10,710 --> 00:08:22,800
are if both sides are secured by a

00:08:17,900 --> 00:08:26,699
certificate so the client and the server

00:08:22,800 --> 00:08:33,089
is authenticated but we'll just rush

00:08:26,699 --> 00:08:35,760
through the simple version so that you

00:08:33,089 --> 00:08:40,709
see that it's actually in principle

00:08:35,760 --> 00:08:42,659
quite simple okay so when a client

00:08:40,709 --> 00:08:46,110
connects to a server the client

00:08:42,659 --> 00:08:50,610
generates a random number and it sends

00:08:46,110 --> 00:08:52,770
this random number in a TLS client hello

00:08:50,610 --> 00:08:57,540
together with some basic information

00:08:52,770 --> 00:09:01,170
like these are the sets of cipher suits

00:08:57,540 --> 00:09:03,390
and hashes and signatures that I like

00:09:01,170 --> 00:09:06,420
and here's a random number and incense

00:09:03,390 --> 00:09:08,790
that off to the server and the server in

00:09:06,420 --> 00:09:12,360
turn generates a random number of its

00:09:08,790 --> 00:09:17,250
own and sends the server hello back to

00:09:12,360 --> 00:09:19,589
the client and it chooses from from

00:09:17,250 --> 00:09:22,649
those hashes and signatures and other

00:09:19,589 --> 00:09:26,010
algorithms attic client has sent to the

00:09:22,649 --> 00:09:28,470
server and that it supports itself and

00:09:26,010 --> 00:09:32,070
its supposed to choose the best of the

00:09:28,470 --> 00:09:34,170
breed that both support and again it

00:09:32,070 --> 00:09:37,350
generates a big random number and sense

00:09:34,170 --> 00:09:41,970
that to the client so now we have on

00:09:37,350 --> 00:09:49,380
both side those random numbers server

00:09:41,970 --> 00:09:51,810
also sends its certificate and the

00:09:49,380 --> 00:09:53,839
client then is supposed to check for

00:09:51,810 --> 00:09:53,839
that

00:09:55,399 --> 00:10:08,310
da-da-da-da-da let's go through this

00:09:59,940 --> 00:10:12,360
okay okay then we use those random

00:10:08,310 --> 00:10:18,260
numbers and generate from that a pre

00:10:12,360 --> 00:10:21,390
it's called pre PMS pre-master secret

00:10:18,260 --> 00:10:24,029
this is the key that we this is going to

00:10:21,390 --> 00:10:30,990
be a big random number that we will use

00:10:24,029 --> 00:10:35,399
to communicate our initialization of the

00:10:30,990 --> 00:10:40,670
encryption and the basic idea here is

00:10:35,399 --> 00:10:44,850
that we use a synchronous asynchronous

00:10:40,670 --> 00:10:48,300
encryption in order to secure to

00:10:44,850 --> 00:10:52,050
securely communicate the encryption key

00:10:48,300 --> 00:10:55,170
that we will be using and once we have

00:10:52,050 --> 00:10:57,950
that done and once we have a master

00:10:55,170 --> 00:11:00,990
secret once you have communicated the

00:10:57,950 --> 00:11:04,950
the key that we want to use for

00:11:00,990 --> 00:11:08,570
encryption the client says okay now I'm

00:11:04,950 --> 00:11:11,850
going to start using this encryption and

00:11:08,570 --> 00:11:16,170
then it sends the finished message

00:11:11,850 --> 00:11:19,410
encrypted with that master key that we

00:11:16,170 --> 00:11:22,440
have that we have communicated and if

00:11:19,410 --> 00:11:24,149
the server is able to encrypt that the

00:11:22,440 --> 00:11:25,980
handshake from the client side was

00:11:24,149 --> 00:11:28,529
successful and then the server does the

00:11:25,980 --> 00:11:30,990
same thing it says okay I'm finished

00:11:28,529 --> 00:11:34,110
from my side as well it encrypts the

00:11:30,990 --> 00:11:36,480
finished message with the master secret

00:11:34,110 --> 00:11:38,850
and if the client is able to decrypt

00:11:36,480 --> 00:11:43,860
that the handshake is now complete and

00:11:38,850 --> 00:11:48,480
we can continue to use only this master

00:11:43,860 --> 00:11:51,510
secret as as an encryption key and

00:11:48,480 --> 00:11:53,910
whenever we decide okay now now it's

00:11:51,510 --> 00:11:55,170
time to change this masks master secret

00:11:53,910 --> 00:11:59,850
because i don't know maybe we're

00:11:55,170 --> 00:12:03,839
paranoid or somebody is trying to is

00:11:59,850 --> 00:12:05,740
really trying to get us we can run

00:12:03,839 --> 00:12:09,670
through this whole process

00:12:05,740 --> 00:12:12,400
and change this key to keep to make sure

00:12:09,670 --> 00:12:14,470
that the line is still secure and it

00:12:12,400 --> 00:12:18,130
yeah it's basically just a rename a

00:12:14,470 --> 00:12:27,100
renegotiation of of the key is just like

00:12:18,130 --> 00:12:30,210
another handshake so I hope I've managed

00:12:27,100 --> 00:12:32,950
to convey that the basic principle of

00:12:30,210 --> 00:12:37,590
TLS is actually quite simple we have

00:12:32,950 --> 00:12:41,410
some mass we have big random numbers and

00:12:37,590 --> 00:12:46,030
by doing the the appropriate steps in

00:12:41,410 --> 00:12:50,230
the appropriate order we established a

00:12:46,030 --> 00:12:52,990
secure channel so the question is how

00:12:50,230 --> 00:12:55,140
does TLS fail then what's what's wrong

00:12:52,990 --> 00:12:58,360
why do I think something is wrong and

00:12:55,140 --> 00:13:06,520
the answer is this is a short overview

00:12:58,360 --> 00:13:08,890
of this little step here I hope you can

00:13:06,520 --> 00:13:12,280
see that this is my mouse pointer saying

00:13:08,890 --> 00:13:17,190
check server certificate and this is how

00:13:12,280 --> 00:13:20,680
that works so check server certificate

00:13:17,190 --> 00:13:23,710
goes like this first of all we have to

00:13:20,680 --> 00:13:25,930
match the hostname so if we're if I'm

00:13:23,710 --> 00:13:28,360
connecting to twitter com I have to

00:13:25,930 --> 00:13:30,760
check that whatever is in the server

00:13:28,360 --> 00:13:34,390
certificate actually says twitter com

00:13:30,760 --> 00:13:38,440
and this is actually where many

00:13:34,390 --> 00:13:42,010
libraries already fail there's a white

00:13:38,440 --> 00:13:45,640
paper on that I link to all my material

00:13:42,010 --> 00:13:48,750
material in the last slide I'm going to

00:13:45,640 --> 00:13:48,750
have a dead bottom

00:13:55,770 --> 00:14:04,990
okay so once we've got that done we

00:14:00,610 --> 00:14:11,260
validate the date that is a ssl

00:14:04,990 --> 00:14:13,750
certificate usually has a not not before

00:14:11,260 --> 00:14:17,470
and not after which is like a best

00:14:13,750 --> 00:14:20,020
before date on milk we want to make sure

00:14:17,470 --> 00:14:24,370
that that we were within this range

00:14:20,020 --> 00:14:26,770
otherwise we reject and next and this is

00:14:24,370 --> 00:14:30,220
also crucial and this is also where many

00:14:26,770 --> 00:14:33,580
libraries or many many programmers

00:14:30,220 --> 00:14:38,350
unfortunately fail we make sure that

00:14:33,580 --> 00:14:41,440
certificate is not self signed I'll try

00:14:38,350 --> 00:14:45,310
to explain why this is important in a

00:14:41,440 --> 00:14:48,460
bit so the if the certificate is self

00:14:45,310 --> 00:14:50,650
signed we rejected and then we check if

00:14:48,460 --> 00:14:54,700
it's revoked or not and there's two ways

00:14:50,650 --> 00:15:00,460
to do this and again most libraries and

00:14:54,700 --> 00:15:02,110
most frameworks don't do that yeah and

00:15:00,460 --> 00:15:04,390
then we come to the complicated bit

00:15:02,110 --> 00:15:10,990
which is validating the chain of trust

00:15:04,390 --> 00:15:12,630
and the way to do this is we get from

00:15:10,990 --> 00:15:16,780
the current certificate that we're

00:15:12,630 --> 00:15:19,360
working on we get the issuer and then we

00:15:16,780 --> 00:15:21,370
get the next certificate in the chain so

00:15:19,360 --> 00:15:25,030
if there is no next certificate in the

00:15:21,370 --> 00:15:29,050
chain that's again a reason to reject it

00:15:25,030 --> 00:15:32,230
because the chain is incomplete and then

00:15:29,050 --> 00:15:34,480
if there is a next certificate we make

00:15:32,230 --> 00:15:37,990
sure that the issue of the previous

00:15:34,480 --> 00:15:40,750
certificate matches the subject of this

00:15:37,990 --> 00:15:44,350
next certificate so that their correctly

00:15:40,750 --> 00:15:47,140
sawing if that's okay we can continue to

00:15:44,350 --> 00:15:49,680
do the same sort of validation as we did

00:15:47,140 --> 00:15:52,240
before we check dates we check if it's

00:15:49,680 --> 00:15:55,089
revoked and then we check if this is a

00:15:52,240 --> 00:15:58,660
self-signed certificate because if it's

00:15:55,089 --> 00:16:01,540
a self-signed certificate that that

00:15:58,660 --> 00:16:03,610
means it's the end of a chain and if

00:16:01,540 --> 00:16:05,329
it's the end of the chain that means

00:16:03,610 --> 00:16:10,220
it's it's sort of it's the rule

00:16:05,329 --> 00:16:12,619
certificate so we check if this root

00:16:10,220 --> 00:16:14,929
certificate is in our trust store and if

00:16:12,619 --> 00:16:17,629
it isn't again we reject it and we

00:16:14,929 --> 00:16:20,949
reject the whole chain because we don't

00:16:17,629 --> 00:16:23,989
trust it but if it is in our trust store

00:16:20,949 --> 00:16:28,459
we say okay now this we've successfully

00:16:23,989 --> 00:16:32,089
validated the path and we trust this

00:16:28,459 --> 00:16:36,889
side and this this whole thing this is

00:16:32,089 --> 00:16:43,399
how ssl how TLS creates authenticity how

00:16:36,889 --> 00:16:45,649
we ensure that i am talking to that I

00:16:43,399 --> 00:16:51,319
know who I'm talking to and that I trust

00:16:45,649 --> 00:16:54,920
who I'm talking to so again what's wrong

00:16:51,319 --> 00:17:00,259
with TLS this is a a beautiful graphics

00:16:54,920 --> 00:17:06,169
asst it's put together by by ssl labs

00:17:00,259 --> 00:17:10,909
which is a research group they created

00:17:06,169 --> 00:17:13,069
things like modsecurity and they're

00:17:10,909 --> 00:17:16,959
working on iron B which is something

00:17:13,069 --> 00:17:21,110
like not security for multiple different

00:17:16,959 --> 00:17:25,689
application service and proxies and they

00:17:21,110 --> 00:17:28,700
put together this ssl threat model I I

00:17:25,689 --> 00:17:31,309
took it apart will see it in the next

00:17:28,700 --> 00:17:34,279
couple of slides but this is all the

00:17:31,309 --> 00:17:42,620
kinds of things that that they could

00:17:34,279 --> 00:17:44,450
think of to attack SSL or TLS so there's

00:17:42,620 --> 00:17:50,360
there's a certain number of things that

00:17:44,450 --> 00:17:53,269
we there that we cannot protect with TLS

00:17:50,360 --> 00:17:57,110
simply because no one fought a vid in

00:17:53,269 --> 00:18:00,019
its conception and no one are or it's

00:17:57,110 --> 00:18:02,710
just not in the scope of the protocol so

00:18:00,019 --> 00:18:06,500
you could consider this a weakness or

00:18:02,710 --> 00:18:11,960
you could move on and just not not use

00:18:06,500 --> 00:18:14,860
it for that but most most weaknesses of

00:18:11,960 --> 00:18:17,230
the protocol itself most

00:18:14,860 --> 00:18:19,240
most of them have been weeded out i

00:18:17,230 --> 00:18:21,880
would say in the last couple of years so

00:18:19,240 --> 00:18:25,870
attacks against a protocol oh actually a

00:18:21,880 --> 00:18:30,850
good thing whenever somebody tries to

00:18:25,870 --> 00:18:33,220
break TLS break its encryption it it

00:18:30,850 --> 00:18:40,690
rises from the ashes if user one as a

00:18:33,220 --> 00:18:43,179
better protocol but yet the things that

00:18:40,690 --> 00:18:45,130
we cannot really cover aren't so much on

00:18:43,179 --> 00:18:49,750
the protocol side they're on other sides

00:18:45,130 --> 00:18:56,640
there on the client side it's it's

00:18:49,750 --> 00:18:56,640
difficult to to convey to people that

00:18:56,760 --> 00:19:01,570
security is not just a padlock icon on

00:18:59,440 --> 00:19:04,630
on the side and many people just don't

00:19:01,570 --> 00:19:08,530
care I mean I I was at the airport I

00:19:04,630 --> 00:19:16,600
spent lots of times on airports and this

00:19:08,530 --> 00:19:20,410
time I they had iPads on JFK and i typed

00:19:16,600 --> 00:19:22,780
in a site and it gave me a validation

00:19:20,410 --> 00:19:24,490
error and I mean I could have been that

00:19:22,780 --> 00:19:26,890
I was a little bit overtired and

00:19:24,490 --> 00:19:30,880
oversensitive but the lady next to me

00:19:26,890 --> 00:19:33,720
was typing her a credit card info in

00:19:30,880 --> 00:19:36,490
that terminal and I told her I I

00:19:33,720 --> 00:19:43,780
wouldn't do that and she just said I

00:19:36,490 --> 00:19:45,460
don't care so I think it's it's it's a

00:19:43,780 --> 00:19:49,179
different kind of mentality most of us

00:19:45,460 --> 00:19:53,770
who who are in technology who are a

00:19:49,179 --> 00:20:00,700
security sensitive we know what to look

00:19:53,770 --> 00:20:02,080
out for but with with browsers over the

00:20:00,700 --> 00:20:06,520
last couple of years we've trained

00:20:02,080 --> 00:20:09,610
people just not to care and and I'm

00:20:06,520 --> 00:20:12,340
quite happy to see that this this is

00:20:09,610 --> 00:20:14,440
being reverted slowly but it's being

00:20:12,340 --> 00:20:17,140
reverted like back in the day it used to

00:20:14,440 --> 00:20:19,270
be that you go to a side and displays

00:20:17,140 --> 00:20:21,970
all those pad icons and sell tells you

00:20:19,270 --> 00:20:24,400
yeah this is secure and now it's a lot

00:20:21,970 --> 00:20:26,710
suppler but when something is wrong you

00:20:24,400 --> 00:20:28,490
get this red screen in chrome or firefox

00:20:26,710 --> 00:20:33,170
and tells you do not

00:20:28,490 --> 00:20:35,390
pass and you need to click three or four

00:20:33,170 --> 00:20:39,740
times just to go to the side so this

00:20:35,390 --> 00:20:44,780
this trend is reversing where we're

00:20:39,740 --> 00:20:50,800
training people uses slowly to be more

00:20:44,780 --> 00:20:54,890
sensitive to this but as as admins and

00:20:50,800 --> 00:20:58,220
developers we there's a number of issues

00:20:54,890 --> 00:21:00,170
that we can run into that we see it and

00:20:58,220 --> 00:21:03,230
most of them yeah it's it's

00:21:00,170 --> 00:21:07,130
configuration issues we or simply

00:21:03,230 --> 00:21:09,860
neglect yeah I spent the morning up

00:21:07,130 --> 00:21:14,030
dating service because this is security

00:21:09,860 --> 00:21:17,240
bulletin no TLS vulnerability and lots

00:21:14,030 --> 00:21:21,590
of my ubuntu systems use new TLS to

00:21:17,240 --> 00:21:25,340
communicate between each other so yeah

00:21:21,590 --> 00:21:27,800
that's that's how much they started but

00:21:25,340 --> 00:21:31,400
yeah many people don't care we run rahel

00:21:27,800 --> 00:21:35,710
for in production and that has a ssl

00:21:31,400 --> 00:21:41,530
version that's beyond repair and

00:21:35,710 --> 00:21:41,530
imagination I don't even want to know so

00:21:41,590 --> 00:21:52,520
these are I mean this is the key how do

00:21:49,250 --> 00:21:53,960
you say it the key requirement of an

00:21:52,520 --> 00:21:56,900
Operations team to keep the environment

00:21:53,960 --> 00:22:01,880
secure and yeah sometimes we just don't

00:21:56,900 --> 00:22:05,090
care we don't we don't do it I'm not

00:22:01,880 --> 00:22:09,800
sure how to fix that but there's other

00:22:05,090 --> 00:22:12,530
things that whoop well that's that's

00:22:09,800 --> 00:22:14,300
interesting behavior there's other

00:22:12,530 --> 00:22:16,150
things that we can fix or that I can't

00:22:14,300 --> 00:22:19,220
fix I can teach you how to properly

00:22:16,150 --> 00:22:21,320
create certificates how to put them into

00:22:19,220 --> 00:22:26,059
your server and how to make sure that

00:22:21,320 --> 00:22:29,570
the chain is valid that the basic things

00:22:26,059 --> 00:22:33,080
are there but yet we we still have to

00:22:29,570 --> 00:22:34,880
keep up to date on on security bulletins

00:22:33,080 --> 00:22:36,590
we have to make sure that the ciphers

00:22:34,880 --> 00:22:39,770
that we use that we configure that

00:22:36,590 --> 00:22:41,950
they're not weak so yeah the only thing

00:22:39,770 --> 00:22:45,340
that we can do here is really keep

00:22:41,950 --> 00:22:49,510
up to date subscribe to security mailing

00:22:45,340 --> 00:22:52,870
lists of your OS maybe even two to those

00:22:49,510 --> 00:22:56,200
of openssl and other libraries that you

00:22:52,870 --> 00:23:00,700
use and yeah just just keep up to date

00:22:56,200 --> 00:23:05,889
that's all I can say okay so the thing

00:23:00,700 --> 00:23:09,970
is if if we look back this is the issues

00:23:05,889 --> 00:23:17,260
that we can have on the server side but

00:23:09,970 --> 00:23:20,289
as you can imagine if a pki or CA they

00:23:17,260 --> 00:23:26,919
have the same issues and then some more

00:23:20,289 --> 00:23:34,389
I like how this says a bribery but

00:23:26,919 --> 00:23:38,010
really if if a CA goes bankrupt it's

00:23:34,389 --> 00:23:42,070
being sold to the to the highest bidder

00:23:38,010 --> 00:23:47,019
so it's not even necessary to bribe them

00:23:42,070 --> 00:23:50,380
just buy them and we see we see other

00:23:47,019 --> 00:23:52,710
things I mean many many countries many

00:23:50,380 --> 00:23:56,309
governments that you might not trust

00:23:52,710 --> 00:24:02,019
have a CA so they could put up

00:23:56,309 --> 00:24:04,690
intercepting proxy and just encrypt and

00:24:02,019 --> 00:24:09,309
decrypt every traffic that comes into

00:24:04,690 --> 00:24:12,220
the country just like some companies do

00:24:09,309 --> 00:24:14,200
with intercepting proxies I think I

00:24:12,220 --> 00:24:18,340
think we've been discussing this to add

00:24:14,200 --> 00:24:23,279
this as a feature to traffic server yeah

00:24:18,340 --> 00:24:23,279
we should keep you updated on that

00:24:23,429 --> 00:24:34,659
there's also been a couple of bugs with

00:24:27,519 --> 00:24:38,830
implementations of CA software where you

00:24:34,659 --> 00:24:42,130
could just put in a backslash null into

00:24:38,830 --> 00:24:44,830
a name and you call it an owww google

00:24:42,130 --> 00:24:47,470
com backslash null and then esoteric

00:24:44,830 --> 00:24:49,269
systems 80 which is my address cool i

00:24:47,470 --> 00:24:53,080
can buy a certificate like that it's

00:24:49,269 --> 00:24:57,299
completely well it and put it on a

00:24:53,080 --> 00:24:57,299
server and get your mail traffic

00:24:57,700 --> 00:25:08,270
so this is how x509 works in theory and

00:25:05,050 --> 00:25:10,490
this is what many of us do in companies

00:25:08,270 --> 00:25:13,010
if you run puppet this is what happens

00:25:10,490 --> 00:25:16,040
for instance you create you create a

00:25:13,010 --> 00:25:17,840
puppet master it creates a CA every

00:25:16,040 --> 00:25:20,360
single of your servers has their own

00:25:17,840 --> 00:25:24,050
certificate so this this is just what

00:25:20,360 --> 00:25:26,300
many of us have we do that we implement

00:25:24,050 --> 00:25:29,090
that but it's a really small environment

00:25:26,300 --> 00:25:31,070
i mean i have what i have like in my own

00:25:29,090 --> 00:25:35,360
environment i have 16 servers for

00:25:31,070 --> 00:25:39,620
companies i consult for have 500 plus

00:25:35,360 --> 00:25:43,370
servers / data center so it's a really

00:25:39,620 --> 00:25:46,580
easy to overlook if but I've worked in

00:25:43,370 --> 00:25:50,330
bigger companies where we i we tried to

00:25:46,580 --> 00:25:54,320
issue certificates to every mobile

00:25:50,330 --> 00:25:58,580
device to every laptop and that really

00:25:54,320 --> 00:26:00,650
gets nasty it you you lose the overside

00:25:58,580 --> 00:26:02,330
and it's really easy to steal that

00:26:00,650 --> 00:26:05,690
compromised it and suddenly you're in

00:26:02,330 --> 00:26:10,040
the network and you you're allowed in so

00:26:05,690 --> 00:26:14,150
if this is hard to overlook what's the

00:26:10,040 --> 00:26:17,840
difference if on top it's not my company

00:26:14,150 --> 00:26:20,330
but it's a very sign or some other CA

00:26:17,840 --> 00:26:26,270
and down below you of millions and

00:26:20,330 --> 00:26:28,930
millions of sites it's really hard to do

00:26:26,270 --> 00:26:39,770
this kind of concept on a big scale if

00:26:28,930 --> 00:26:42,320
Trust is is not if every one of the CAS

00:26:39,770 --> 00:26:46,130
is trusted one hundred percent and one

00:26:42,320 --> 00:26:49,400
hundred percent for each side so if so

00:26:46,130 --> 00:26:53,030
yeah every one of these cas I hope this

00:26:49,400 --> 00:26:57,520
will open quote yeah this is this is a

00:26:53,030 --> 00:27:01,430
picture by by the eff SSL ups of

00:26:57,520 --> 00:27:06,170
observatory and it shows you everything

00:27:01,430 --> 00:27:08,760
that you have in your trust store and if

00:27:06,170 --> 00:27:12,150
we zoom in we see

00:27:08,760 --> 00:27:14,520
no we see China somewhere we see certain

00:27:12,150 --> 00:27:17,340
companies certain countries that have

00:27:14,520 --> 00:27:19,590
cas and the question is do you really

00:27:17,340 --> 00:27:25,830
trust all these people a hundred percent

00:27:19,590 --> 00:27:28,680
to to guarantee the security of the

00:27:25,830 --> 00:27:32,100
internet and I mean in my case I don't

00:27:28,680 --> 00:27:38,970
really do that but still yeah we we use

00:27:32,100 --> 00:27:42,960
browsers and other facilities whoop how

00:27:38,970 --> 00:27:51,420
do I get rid of this Daniel that was a

00:27:42,960 --> 00:27:59,750
little bit too much right awesome if I

00:27:51,420 --> 00:27:59,750
open this what will happen cool

00:28:08,230 --> 00:28:11,130
hmm

00:28:12,050 --> 00:28:24,830
okay so this this I think shows us how

00:28:19,000 --> 00:28:27,410
how SSL is in its basis it's a very nice

00:28:24,830 --> 00:28:31,180
protocol it's good to have and we don't

00:28:27,410 --> 00:28:35,240
really have something else but x509 is

00:28:31,180 --> 00:28:38,870
makes it really difficult to really

00:28:35,240 --> 00:28:42,380
guarantee this this kind of authenticity

00:28:38,870 --> 00:28:45,080
that a secure protocol is supposed to

00:28:42,380 --> 00:28:50,540
give so what I would like to show and I

00:28:45,080 --> 00:28:53,570
hope I have the time justin is how you

00:28:50,540 --> 00:29:01,240
can drop out of this system how you can

00:28:53,570 --> 00:29:06,500
drop out of this 605 650 plus something

00:29:01,240 --> 00:29:10,160
completely trusted root CA and the

00:29:06,500 --> 00:29:13,250
answer is simply by doing yeah something

00:29:10,160 --> 00:29:18,730
like this you create your own root CA

00:29:13,250 --> 00:29:22,310
and if you're writing for instance a a

00:29:18,730 --> 00:29:26,810
mobile application yes that's probably

00:29:22,310 --> 00:29:29,120
your best shot to guarantee that whoever

00:29:26,810 --> 00:29:32,300
you are talking to is really who you are

00:29:29,120 --> 00:29:37,880
talking to because you can distribute

00:29:32,300 --> 00:29:40,340
this tiny little CA this one CA this

00:29:37,880 --> 00:29:43,550
root CA with your application and it's

00:29:40,340 --> 00:29:45,830
going to really make sure that the

00:29:43,550 --> 00:29:49,570
service that your servers that you are

00:29:45,830 --> 00:29:53,500
talking to are really your servers so

00:29:49,570 --> 00:29:56,720
dropping out of this system makes it

00:29:53,500 --> 00:29:59,230
makes it easier to use it in in a

00:29:56,720 --> 00:30:05,000
sensible way you know if you just use

00:29:59,230 --> 00:30:08,770
simple small aspects of it so now let me

00:30:05,000 --> 00:30:08,770
show you how to do that I hope

00:30:11,159 --> 00:30:14,489
we can

00:30:23,679 --> 00:30:37,330
increase the font size font size okay so

00:30:31,489 --> 00:30:37,330
I have all this material actually in my

00:30:43,659 --> 00:30:49,850
in my in my slides it's all in there all

00:30:47,659 --> 00:30:53,629
the stuff that I used i'm going to show

00:30:49,850 --> 00:31:00,649
you real quick how to do this so i'm a

00:30:53,629 --> 00:31:04,789
big fan of make so i prepared a make

00:31:00,649 --> 00:31:08,090
file so what you want to do is you

00:31:04,789 --> 00:31:10,879
create a root root CA and then you

00:31:08,090 --> 00:31:16,279
create an issuing CA like i had in the

00:31:10,879 --> 00:31:22,059
slides and this then you use to certify

00:31:16,279 --> 00:31:28,039
your servers and you put that root CA on

00:31:22,059 --> 00:31:31,220
on to your on to your mobile devices in

00:31:28,039 --> 00:31:36,019
your web app and other things you can do

00:31:31,220 --> 00:31:39,440
i use openssl and you can use open SSL

00:31:36,019 --> 00:31:44,749
is a nice basis and from there work your

00:31:39,440 --> 00:31:47,139
way with others openssl is mostly well

00:31:44,749 --> 00:31:47,139
documented

00:31:52,029 --> 00:31:59,349
but it every couple of years it

00:31:55,960 --> 00:32:06,129
introduces a new set of commands that

00:31:59,349 --> 00:32:09,340
and deprecates an old one so here in in

00:32:06,129 --> 00:32:14,379
here i'm showing you how to create your

00:32:09,340 --> 00:32:16,239
root CA which is you need a key and this

00:32:14,379 --> 00:32:19,929
key can either be our essay or DSA

00:32:16,239 --> 00:32:23,859
whatever you prefer and then you create

00:32:19,929 --> 00:32:27,190
a self-signed certificate by creating a

00:32:23,859 --> 00:32:31,239
request and sign that request at the

00:32:27,190 --> 00:32:36,129
same time then we want the issuing CA

00:32:31,239 --> 00:32:39,609
and this is really I mean it's a minor

00:32:36,129 --> 00:32:44,739
detail but you just create a sort of

00:32:39,609 --> 00:32:47,349
hierarchy here to to be more agile so

00:32:44,739 --> 00:32:49,269
you could say ok I wanted issuing CA for

00:32:47,349 --> 00:32:53,259
servers and one for clients and stuff

00:32:49,269 --> 00:32:56,799
like that and with this issuing CA you

00:32:53,259 --> 00:33:06,279
then signs the single server

00:32:56,799 --> 00:33:09,879
certificates which we do also here in

00:33:06,279 --> 00:33:14,469
this make file and finally like I said

00:33:09,879 --> 00:33:17,019
if you're working with with Java Java

00:33:14,469 --> 00:33:21,669
has key tool key tool is extremely

00:33:17,019 --> 00:33:24,609
powerful and has a mole I think a more

00:33:21,669 --> 00:33:29,799
consistent user interface as opposed to

00:33:24,609 --> 00:33:32,979
openssl so you can do nice and fancy

00:33:29,799 --> 00:33:35,440
stuff but the simplest thing that you

00:33:32,979 --> 00:33:37,779
can do is simply import your root CA

00:33:35,440 --> 00:33:42,389
into a store and put that onto your web

00:33:37,779 --> 00:33:42,389
app so let's just create

00:33:44,350 --> 00:33:54,610
an issuing CA here we see we're creating

00:33:47,020 --> 00:33:59,020
a certificate a key then we are creating

00:33:54,610 --> 00:34:04,090
here here a request this request has

00:33:59,020 --> 00:34:07,179
esoteric systems issuing authority utf-8

00:34:04,090 --> 00:34:12,909
I like that because my name doesn't fit

00:34:07,179 --> 00:34:16,960
in Latin one and then we sign it with

00:34:12,909 --> 00:34:22,540
our root CA and again now you only have

00:34:16,960 --> 00:34:24,570
one root CA in your stool and this this

00:34:22,540 --> 00:34:28,050
is how you make sure that your

00:34:24,570 --> 00:34:33,810
applications are secure and not in the

00:34:28,050 --> 00:34:36,399
sea a system that's one way to do it

00:34:33,810 --> 00:34:41,169
smarter people are working on other

00:34:36,399 --> 00:34:44,950
systems the chrome people have I mean

00:34:41,169 --> 00:34:48,399
they they simply pin the certificates so

00:34:44,950 --> 00:34:51,580
they know exactly ok we have a hash and

00:34:48,399 --> 00:34:59,230
it's hard coded in in the app you can't

00:34:51,580 --> 00:35:02,830
always do that then there's this project

00:34:59,230 --> 00:35:05,980
that's called convergence i/o which is

00:35:02,830 --> 00:35:13,000
yet another way to drop out of the sea a

00:35:05,980 --> 00:35:14,560
system that i will not present because

00:35:13,000 --> 00:35:18,570
we're running out of time if I get that

00:35:14,560 --> 00:35:18,570
right so question time

00:35:27,980 --> 00:35:32,210
excellent no questions lunchtime

00:35:46,339 --> 00:35:54,200
questions anyone if not i'm sending you

00:35:48,619 --> 00:36:02,920
off to lunch you can find my slides

00:35:54,200 --> 00:36:02,920
online or where do we find my slides i

00:36:04,660 --> 00:36:18,019
thought yeah at some point well i can i

00:36:11,779 --> 00:36:23,920
can put them online as well let's see do

00:36:18,019 --> 00:36:23,920
I have them in my links here no I don't

00:36:25,119 --> 00:36:28,450
fit in there

00:36:33,320 --> 00:36:54,630
let's put a sense TLS / index.html that

00:36:50,670 --> 00:36:56,720
will be it that's where they should turn

00:36:54,630 --> 00:37:01,730
up in a minute let's see if we can

00:36:56,720 --> 00:37:01,730
create a shoulder length version of that

00:37:36,470 --> 00:37:39,650
we go

00:37:41,010 --> 00:37:43,880
that's good enough

00:37:52,210 --> 00:37:55,210
so

00:37:58,730 --> 00:38:01,730

YouTube URL: https://www.youtube.com/watch?v=lfYTkEniwIs


