Title: Apache httpd 2.4: The Cloud Killer App
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Jim Jagielski
ApacheCon NA 2013
A Patchy Web
Captions: 
	00:00:00,000 --> 00:00:04,879
morning everyone and we all take a seat

00:00:02,250 --> 00:00:09,150
please a session is about to start

00:00:04,879 --> 00:00:11,460
welcome to the Apache web track and

00:00:09,150 --> 00:00:17,599
first up we have Jim jackowski with

00:00:11,460 --> 00:00:17,599
apache HTTP 2.4 the cloud killer app

00:00:18,380 --> 00:00:24,480
thank you good morning everyone yes yes

00:00:21,570 --> 00:00:26,430
that's fine good good I'm not too proud

00:00:24,480 --> 00:00:31,140
to ask for it no that's fine it's great

00:00:26,430 --> 00:00:33,750
okay yes my talk would be about apache2

00:00:31,140 --> 00:00:36,719
for the the so-called killer app for the

00:00:33,750 --> 00:00:39,329
cloud a little bit about myself at

00:00:36,719 --> 00:00:41,850
Apache I wear a number of different hats

00:00:39,329 --> 00:00:44,579
for the purposes of this particular talk

00:00:41,850 --> 00:00:46,860
however the main hat I'm wearing is one

00:00:44,579 --> 00:00:49,739
of the the developers of the Apache HTTP

00:00:46,860 --> 00:00:53,100
the project we were talking earlier

00:00:49,739 --> 00:00:55,559
about software projects lasting 50 years

00:00:53,100 --> 00:00:58,379
in httpd is actually a project which has

00:00:55,559 --> 00:01:00,480
been lasting over 15 or sell I also

00:00:58,379 --> 00:01:03,059
serve on a number of other boards

00:01:00,480 --> 00:01:05,430
open-source related boards including OSI

00:01:03,059 --> 00:01:08,670
the Open Source Initiative and outer

00:01:05,430 --> 00:01:12,210
curve and a marine council member for

00:01:08,670 --> 00:01:14,490
MARSOC XL also because I enjoy a roof

00:01:12,210 --> 00:01:17,400
over my head and and as you can see I

00:01:14,490 --> 00:01:20,040
enjoy eating and food I need to have

00:01:17,400 --> 00:01:22,350
also an activity which pays the bills as

00:01:20,040 --> 00:01:25,290
it were and I'm very very lucky to to

00:01:22,350 --> 00:01:26,939
work for red hat which allows me to do

00:01:25,290 --> 00:01:29,130
fun stuff but also allows me to also

00:01:26,939 --> 00:01:31,290
continue the the open source stuff that

00:01:29,130 --> 00:01:33,329
I do if you don't follow me on Twitter

00:01:31,290 --> 00:01:36,000
you might want to that's my Twitter hack

00:01:33,329 --> 00:01:39,180
down there so what we'll talk about the

00:01:36,000 --> 00:01:42,540
next 45 minutes or so is basically a

00:01:39,180 --> 00:01:44,100
quick overview of Apache 24 now I

00:01:42,540 --> 00:01:47,399
realize a number of you most probably

00:01:44,100 --> 00:01:49,200
have been sat in on Rich's talk

00:01:47,399 --> 00:01:52,920
yesterday so I'm not going to go into a

00:01:49,200 --> 00:01:55,430
lot of details basically mostly aspects

00:01:52,920 --> 00:01:57,390
which are pertinent this discussion

00:01:55,430 --> 00:02:00,509
basically what are features and

00:01:57,390 --> 00:02:03,840
enhancements that make Apache in a

00:02:00,509 --> 00:02:06,000
specifically cloud suited also some

00:02:03,840 --> 00:02:08,099
ideas about why cloud at least in my

00:02:06,000 --> 00:02:10,229
opinion kind of changes the game a

00:02:08,099 --> 00:02:12,170
little bit as far as what a web server

00:02:10,229 --> 00:02:15,830
to do what kind of expectations

00:02:12,170 --> 00:02:18,380
of issues and flexibility enhancements

00:02:15,830 --> 00:02:20,540
are important for the cloud related to

00:02:18,380 --> 00:02:22,580
the web also we'll talk about some of

00:02:20,540 --> 00:02:25,190
the the performance enhancements that we

00:02:22,580 --> 00:02:27,890
see between 22 and 24 and I have a

00:02:25,190 --> 00:02:30,140
couple graphs which makes that

00:02:27,890 --> 00:02:32,060
comparison for you and then finally some

00:02:30,140 --> 00:02:35,810
cloud specific enhancements mostly

00:02:32,060 --> 00:02:38,560
related to the to the proxy server built

00:02:35,810 --> 00:02:40,910
inside of it we're currently at Apache

00:02:38,560 --> 00:02:43,160
244 which is the latest version it was

00:02:40,910 --> 00:02:44,900
just released a couple days ago and the

00:02:43,160 --> 00:02:47,140
biggest improvements that we had in here

00:02:44,900 --> 00:02:49,310
as I mentioned before were the ideas of

00:02:47,140 --> 00:02:51,470
increased performance and cloud

00:02:49,310 --> 00:02:54,410
suitability out there some of the major

00:02:51,470 --> 00:02:55,580
Divine Design drivers that we had when

00:02:54,410 --> 00:02:58,760
we were talking and thinking about

00:02:55,580 --> 00:03:01,010
apache 24 has been for example support

00:02:58,760 --> 00:03:03,560
for asynchronous i/o without dropping

00:03:01,010 --> 00:03:05,120
the support for older systems you know

00:03:03,560 --> 00:03:07,880
and older modules and things like that

00:03:05,120 --> 00:03:09,530
not breaking backwards compatibility as

00:03:07,880 --> 00:03:12,019
much as we could while still ensuring

00:03:09,530 --> 00:03:16,100
that there was as much a synchronous i/o

00:03:12,019 --> 00:03:17,930
as possible inside of in in there also

00:03:16,100 --> 00:03:20,269
we wanted to increase the number of

00:03:17,930 --> 00:03:22,609
multi processing modules these are the

00:03:20,269 --> 00:03:24,709
actual architectures that tell apache

00:03:22,609 --> 00:03:27,200
how to grow and scale how to respond to

00:03:24,709 --> 00:03:29,180
me requests that are coming in and so we

00:03:27,200 --> 00:03:32,420
wanted to add additional features we

00:03:29,180 --> 00:03:35,690
added the event mpm which was introduced

00:03:32,420 --> 00:03:37,910
in 22 but was considered experimental we

00:03:35,690 --> 00:03:41,390
also wanted to leverage higher versions

00:03:37,910 --> 00:03:43,670
and higher performance of APR APR is the

00:03:41,390 --> 00:03:46,100
apache portable runtime and it's sort of

00:03:43,670 --> 00:03:48,170
like the the POSIX layer between apache

00:03:46,100 --> 00:03:51,350
and and the underlying operating system

00:03:48,170 --> 00:03:53,359
itself APR is also in subversion for

00:03:51,350 --> 00:03:55,370
example it's just a nice way of having a

00:03:53,359 --> 00:03:59,030
unified programming interface for the

00:03:55,370 --> 00:04:01,100
underlying operating system okay so some

00:03:59,030 --> 00:04:03,079
of the things that are new inside of

00:04:01,100 --> 00:04:05,540
Apache 24 and as I mentioned again I'm

00:04:03,079 --> 00:04:08,900
not going to go into a lot of detail

00:04:05,540 --> 00:04:10,549
about these but basically now bandwidth

00:04:08,900 --> 00:04:12,769
control is now standard there is a

00:04:10,549 --> 00:04:15,019
standard module called mod rate limit

00:04:12,769 --> 00:04:17,690
which allows you to determine and

00:04:15,019 --> 00:04:19,549
control just simply how quickly you want

00:04:17,690 --> 00:04:21,320
to patch you to pass those packets you

00:04:19,549 --> 00:04:24,200
know down to the to the end client out

00:04:21,320 --> 00:04:25,940
there obviously if you're doing things

00:04:24,200 --> 00:04:27,320
like a quality of service

00:04:25,940 --> 00:04:29,660
spoons and things like that that's an

00:04:27,320 --> 00:04:31,580
important to you that capability had

00:04:29,660 --> 00:04:34,460
been around for a while but it wasn't

00:04:31,580 --> 00:04:37,130
natural and native to it to Apache was

00:04:34,460 --> 00:04:39,230
available in third-party modules also we

00:04:37,130 --> 00:04:42,710
figured out that the the need the

00:04:39,230 --> 00:04:44,990
requirement for finer level control over

00:04:42,710 --> 00:04:46,700
a time outs was very very important you

00:04:44,990 --> 00:04:49,670
want to be able to have smaller control

00:04:46,700 --> 00:04:51,170
over the first packet coming in when you

00:04:49,670 --> 00:04:53,630
know how long to wait for a full

00:04:51,170 --> 00:04:56,060
requests and things like that and so mod

00:04:53,630 --> 00:04:58,460
requests time out again leveraging the

00:04:56,060 --> 00:05:00,350
the power of the the modules inside of

00:04:58,460 --> 00:05:02,450
Apache we have a module that allows this

00:05:00,350 --> 00:05:05,390
kind of capability out there also

00:05:02,450 --> 00:05:06,830
instead of having to worry about seconds

00:05:05,390 --> 00:05:08,900
you can relate these down two

00:05:06,830 --> 00:05:10,880
milliseconds for example so again it

00:05:08,900 --> 00:05:13,790
gives you finer control with smaller

00:05:10,880 --> 00:05:16,760
timeframes to look at rich also talked

00:05:13,790 --> 00:05:18,230
yesterday about the the better locking

00:05:16,760 --> 00:05:20,510
capability including the new trace

00:05:18,230 --> 00:05:22,520
levels which allow you as an

00:05:20,510 --> 00:05:25,040
administrator to figure out what's going

00:05:22,520 --> 00:05:28,070
on behind the scenes inside of Apache 24

00:05:25,040 --> 00:05:30,650
without having to worry about slogging

00:05:28,070 --> 00:05:33,140
through enormous amounts of data inside

00:05:30,650 --> 00:05:37,820
of your error log out there there's also

00:05:33,140 --> 00:05:39,890
some FS per request capability which is

00:05:37,820 --> 00:05:42,410
sort of like a nice alternative to to

00:05:39,890 --> 00:05:44,180
mod rewrite and we have a memory a

00:05:42,410 --> 00:05:46,300
shared memory capability that's used by

00:05:44,180 --> 00:05:48,740
a number of different modules out there

00:05:46,300 --> 00:05:50,690
also when thinking about you know

00:05:48,740 --> 00:05:52,520
performance and how to better manage

00:05:50,690 --> 00:05:53,960
that you want to have some kind of

00:05:52,520 --> 00:05:55,790
control over the buffering of

00:05:53,960 --> 00:05:57,350
input-output how much goes directly on

00:05:55,790 --> 00:05:58,970
the wire how much gets buffered

00:05:57,350 --> 00:06:01,400
internally where that buffering goes and

00:05:58,970 --> 00:06:03,320
things like that so we have a module

00:06:01,400 --> 00:06:06,610
specifically located to that as well

00:06:03,320 --> 00:06:09,230
again to provide you the flexibility to

00:06:06,610 --> 00:06:12,440
make that kind of determination on your

00:06:09,230 --> 00:06:14,180
own another feature that is really

00:06:12,440 --> 00:06:17,450
really cool and I wish we just had more

00:06:14,180 --> 00:06:20,390
time to it to focus on it was having the

00:06:17,450 --> 00:06:22,250
the Lua programming language actually in

00:06:20,390 --> 00:06:25,010
server in the same way that mod perl

00:06:22,250 --> 00:06:27,290
puts pearl inside the server in mod PHP

00:06:25,010 --> 00:06:29,030
pits PHP inside there as well Lewis is a

00:06:27,290 --> 00:06:31,760
great language and having that inside

00:06:29,030 --> 00:06:33,620
there would but really have a lot of in

00:06:31,760 --> 00:06:35,900
a really cool capability and flexibility

00:06:33,620 --> 00:06:37,620
if you're so inclined after the talk

00:06:35,900 --> 00:06:40,040
maybe give it a try look at

00:06:37,620 --> 00:06:44,490
we really were like much more feedback

00:06:40,040 --> 00:06:46,110
associated with that as well and as I

00:06:44,490 --> 00:06:48,240
said before the two big things that

00:06:46,110 --> 00:06:52,320
we're looking at where the event mpm

00:06:48,240 --> 00:06:54,600
which is really well tuned in better

00:06:52,320 --> 00:06:57,990
leveraging the asynchronous model that's

00:06:54,600 --> 00:07:00,090
now inside of a patchy and then the

00:06:57,990 --> 00:07:02,190
whole proxy improvements the capability

00:07:00,090 --> 00:07:04,979
that and the knowledge knowing that

00:07:02,190 --> 00:07:08,190
Apache 24 is used in a lot of areas as a

00:07:04,979 --> 00:07:09,960
front end to a remote back-end cluster

00:07:08,190 --> 00:07:12,300
and so these are the features that I

00:07:09,960 --> 00:07:14,520
think in general is really really

00:07:12,300 --> 00:07:16,500
crucial to Apache you know in the cloud

00:07:14,520 --> 00:07:19,020
environment well there's some fun out

00:07:16,500 --> 00:07:22,220
there as I mentioned before apache is

00:07:19,020 --> 00:07:25,590
very very old and there's this growing

00:07:22,220 --> 00:07:28,110
more and more vocal viewpoint that

00:07:25,590 --> 00:07:29,580
Apaches old school that if you want to

00:07:28,110 --> 00:07:31,199
be cool in hip you've got to go with

00:07:29,580 --> 00:07:33,169
somebody else because Apache is really

00:07:31,199 --> 00:07:35,580
really bad and these are some of the

00:07:33,169 --> 00:07:37,620
generalized claims you see about apache

00:07:35,580 --> 00:07:39,870
first of all that it doesn't scale that

00:07:37,620 --> 00:07:41,520
it's very very slow if you haven't seen

00:07:39,870 --> 00:07:43,349
this this YouTube video at there i

00:07:41,520 --> 00:07:44,760
really encourage you to after the fact

00:07:43,349 --> 00:07:47,130
or even right now if you want to copy

00:07:44,760 --> 00:07:50,669
and paste well you can't copy and paste

00:07:47,130 --> 00:07:52,740
virtually I guess so but to really take

00:07:50,669 --> 00:07:55,260
a look at it it's really really fun and

00:07:52,740 --> 00:07:57,120
it just basically tries to get around

00:07:55,260 --> 00:07:59,150
that that misconception that Apache

00:07:57,120 --> 00:08:01,979
doesn't grow and death and doesn't scale

00:07:59,150 --> 00:08:03,479
another problem another error that you

00:08:01,979 --> 00:08:06,570
see a lot of people saying is that

00:08:03,479 --> 00:08:09,030
Apaches to general the Apache can do too

00:08:06,570 --> 00:08:10,949
much as if that's a bad thing and I kind

00:08:09,030 --> 00:08:14,310
of like relate this to the idea about

00:08:10,949 --> 00:08:16,460
you know you look at man as an animal as

00:08:14,310 --> 00:08:18,510
compared to a tiger a tiger is very very

00:08:16,460 --> 00:08:20,430
specialized you can run faster than a

00:08:18,510 --> 00:08:22,830
man it could you know attack a deer

00:08:20,430 --> 00:08:25,229
better than a man all by himself but the

00:08:22,830 --> 00:08:27,750
nice thing about the human the human

00:08:25,229 --> 00:08:30,360
being is that he is generalized he is

00:08:27,750 --> 00:08:32,880
able to come up with technology and

00:08:30,360 --> 00:08:35,310
features and things that allow him to

00:08:32,880 --> 00:08:37,260
override and do better than creatures

00:08:35,310 --> 00:08:39,900
that are more specialized so at least in

00:08:37,260 --> 00:08:42,209
my opinion being generalized is not a

00:08:39,900 --> 00:08:43,860
bad thing unless of course it results in

00:08:42,209 --> 00:08:45,690
something which is very very bloated you

00:08:43,860 --> 00:08:47,579
know which does too many things for you

00:08:45,690 --> 00:08:50,670
one of the nice things about apache is

00:08:47,579 --> 00:08:51,310
the module structure so by limiting the

00:08:50,670 --> 00:08:52,990
number of ma

00:08:51,310 --> 00:08:54,940
jewels that you're including in you can

00:08:52,990 --> 00:08:58,600
really fine-tune that exactly to your

00:08:54,940 --> 00:09:00,220
environment another common complaint is

00:08:58,600 --> 00:09:02,500
that the apache config file is too

00:09:00,220 --> 00:09:04,840
complex and my only response to that if

00:09:02,500 --> 00:09:06,730
that's your only complaint you're really

00:09:04,840 --> 00:09:09,250
pulling at straws here I mean that's it

00:09:06,730 --> 00:09:11,470
okay it's not the best config file in

00:09:09,250 --> 00:09:13,089
the world not to confessed layout but

00:09:11,470 --> 00:09:15,820
you've got to do better than that and

00:09:13,089 --> 00:09:17,230
finally the idea that Apache is just too

00:09:15,820 --> 00:09:19,630
old that you've got to be cool and hip

00:09:17,230 --> 00:09:21,220
now David Cross that's who the guy is

00:09:19,630 --> 00:09:23,710
right there he's one of my favorite

00:09:21,220 --> 00:09:26,950
comedians and he does this bit about

00:09:23,710 --> 00:09:30,010
squiggles and the idea is that here are

00:09:26,950 --> 00:09:31,510
bagels they're old school ok but this

00:09:30,010 --> 00:09:34,750
company came out with something called

00:09:31,510 --> 00:09:36,700
square or bagels okay their bagels but

00:09:34,750 --> 00:09:39,790
they're square and those are the bagels

00:09:36,700 --> 00:09:41,830
for the hip new young generation okay

00:09:39,790 --> 00:09:45,130
don't use your don't eat your old man's

00:09:41,830 --> 00:09:48,580
bagels man try the new bagels the square

00:09:45,130 --> 00:09:50,980
bagels okay really is that the best you

00:09:48,580 --> 00:09:53,620
can come up with yeah Apaches old okay

00:09:50,980 --> 00:09:55,150
but it s does have the capability and

00:09:53,620 --> 00:09:56,880
just remember there are other old

00:09:55,150 --> 00:10:00,430
technologies that people are moved using

00:09:56,880 --> 00:10:03,190
Linux for example so what is it that at

00:10:00,430 --> 00:10:05,110
least in my opinion makes a killer app

00:10:03,190 --> 00:10:06,820
for the cloud well for me there's like

00:10:05,110 --> 00:10:09,130
five things you really need to focus on

00:10:06,820 --> 00:10:11,170
first of all is stability okay obviously

00:10:09,130 --> 00:10:12,610
you don't want technology which is

00:10:11,170 --> 00:10:14,770
constantly crashing and things like that

00:10:12,610 --> 00:10:16,810
I don't think we need to talk about the

00:10:14,770 --> 00:10:18,610
very fact that Apache is very very

00:10:16,810 --> 00:10:21,610
stable at the very very fact that you

00:10:18,610 --> 00:10:25,390
have all these different em pm's pre for

00:10:21,610 --> 00:10:27,570
worker event allows you to trade off the

00:10:25,390 --> 00:10:29,589
risk in the performances capability

00:10:27,570 --> 00:10:31,890
flexibility talked about that already

00:10:29,589 --> 00:10:34,390
don't need to go into a lot of detail

00:10:31,890 --> 00:10:37,570
performance and dynamic configuration or

00:10:34,390 --> 00:10:39,700
two new things in Apache 24 that I think

00:10:37,570 --> 00:10:42,580
are really well-suited to what makes

00:10:39,700 --> 00:10:45,550
Apache this this performance color app

00:10:42,580 --> 00:10:48,640
and finally the awareness that resources

00:10:45,550 --> 00:10:50,800
are our precious commodities whether

00:10:48,640 --> 00:10:52,600
it's ram whether it's a you know CPU

00:10:50,800 --> 00:10:54,730
cycles and stuff like that you can no

00:10:52,600 --> 00:10:56,140
longer worry about a I'll just put it in

00:10:54,730 --> 00:11:01,480
a buffer someplace and not worry about

00:10:56,140 --> 00:11:03,520
the memory it takes so my idea is that

00:11:01,480 --> 00:11:06,010
in general the

00:11:03,520 --> 00:11:08,410
Wow makes the whole idea of what a web

00:11:06,010 --> 00:11:10,150
server performance should be very very

00:11:08,410 --> 00:11:12,100
different from the one I used to be okay

00:11:10,150 --> 00:11:14,230
in the old days it was very very

00:11:12,100 --> 00:11:17,560
difficult and painful to horizontally

00:11:14,230 --> 00:11:19,810
scale you know if you had an increased

00:11:17,560 --> 00:11:21,040
number of requests coming in then adding

00:11:19,810 --> 00:11:22,960
new server is at the same level

00:11:21,040 --> 00:11:25,000
horizontally scaling was very very

00:11:22,960 --> 00:11:26,530
difficult you needed to allocate a new

00:11:25,000 --> 00:11:28,360
server you needed to install the

00:11:26,530 --> 00:11:30,550
operating system needed to copy things

00:11:28,360 --> 00:11:32,500
over there are manual intensive things

00:11:30,550 --> 00:11:34,300
to worry about the cloud makes that not

00:11:32,500 --> 00:11:36,520
as painful as it was before okay so

00:11:34,300 --> 00:11:38,230
let's not worry about issues and

00:11:36,520 --> 00:11:39,430
concerns about horizontal scaling now

00:11:38,230 --> 00:11:42,130
because that's what the cloud is

00:11:39,430 --> 00:11:44,470
supposed to imagine we worry about know

00:11:42,130 --> 00:11:47,020
with that and with that you know as a

00:11:44,470 --> 00:11:49,480
you know assumption the idea of

00:11:47,020 --> 00:11:51,340
concurrency being the main problem the

00:11:49,480 --> 00:11:53,290
main issue the main currency you need to

00:11:51,340 --> 00:11:55,690
worry about in web servers I think it's

00:11:53,290 --> 00:11:57,280
not the sole consideration anymore still

00:11:55,690 --> 00:11:59,350
a major problem is still a major

00:11:57,280 --> 00:12:01,360
consideration out there but it's not the

00:11:59,350 --> 00:12:05,320
primary one at least in my opinion I

00:12:01,360 --> 00:12:07,840
think right now the web allows website

00:12:05,320 --> 00:12:09,940
administrator to really worry about the

00:12:07,840 --> 00:12:11,440
user experience and what the user

00:12:09,940 --> 00:12:14,110
experience is worried about is how

00:12:11,440 --> 00:12:16,750
quickly do I get that that website up

00:12:14,110 --> 00:12:19,150
how quickly do the images pop up how

00:12:16,750 --> 00:12:22,300
quickly does the HTML pop up and stuff

00:12:19,150 --> 00:12:24,310
like that and that all comes down to the

00:12:22,300 --> 00:12:26,710
time frame associated with the request

00:12:24,310 --> 00:12:29,140
response cycle and the latency involved

00:12:26,710 --> 00:12:31,030
inside there how quickly after i send

00:12:29,140 --> 00:12:32,650
the request will the web server send the

00:12:31,030 --> 00:12:35,110
content back to me and how quickly I can

00:12:32,650 --> 00:12:37,540
get that okay now of course this density

00:12:35,110 --> 00:12:39,160
still matter does concerns concurrency

00:12:37,540 --> 00:12:40,780
so matter of course it does okay they're

00:12:39,160 --> 00:12:43,510
going to be cases out there we're

00:12:40,780 --> 00:12:45,520
obviously concurrency is the main issue

00:12:43,510 --> 00:12:48,040
and you want to make that sacrifice you

00:12:45,520 --> 00:12:50,530
want to have a somewhat slower site in

00:12:48,040 --> 00:12:52,360
quotes because and you want to be able

00:12:50,530 --> 00:12:55,660
to handle much more concurrency issues

00:12:52,360 --> 00:12:58,000
but as Theo said yesterday okay when you

00:12:55,660 --> 00:12:59,560
start talking about platforms and

00:12:58,000 --> 00:13:01,780
environments which are that complex

00:12:59,560 --> 00:13:04,150
that's scalable with that kind of

00:13:01,780 --> 00:13:06,190
concurrency issues chances are very good

00:13:04,150 --> 00:13:07,660
that first of all your web server is not

00:13:06,190 --> 00:13:09,430
going to be your single maiden choke

00:13:07,660 --> 00:13:12,339
point there are other issues you need to

00:13:09,430 --> 00:13:13,959
worry about okay and also

00:13:12,339 --> 00:13:15,459
re look at your architecture anyway

00:13:13,959 --> 00:13:17,050
chances are very good that there's a

00:13:15,459 --> 00:13:18,670
different architecture or a different

00:13:17,050 --> 00:13:20,649
design aspect that you could look at

00:13:18,670 --> 00:13:24,100
which would make at least some of that

00:13:20,649 --> 00:13:25,990
problem go away out there so we with

00:13:24,100 --> 00:13:28,629
that in mind I thought I'd do a

00:13:25,990 --> 00:13:32,139
benchmark comparison between Apache 24

00:13:28,629 --> 00:13:35,439
and engine X oky engine X everybody

00:13:32,139 --> 00:13:37,589
talks about it in every article but you

00:13:35,439 --> 00:13:40,180
know blog post you see it's always

00:13:37,589 --> 00:13:41,529
Apache vs. engine X and there's a lot of

00:13:40,180 --> 00:13:43,569
information out there and a lot of

00:13:41,529 --> 00:13:44,740
misinformation out there about that and

00:13:43,569 --> 00:13:47,889
we'll talk about that a little bit later

00:13:44,740 --> 00:13:54,220
on so what I did is I did a you know a

00:13:47,889 --> 00:13:56,319
simple little benchmark excuse me I used

00:13:54,220 --> 00:13:58,360
the the latest development version back

00:13:56,319 --> 00:14:00,970
then at the time said to this uh about a

00:13:58,360 --> 00:14:03,370
month ago well we've been continually

00:14:00,970 --> 00:14:04,660
going on since I guess asked on

00:14:03,370 --> 00:14:05,949
ourselves so this has been an ongoing

00:14:04,660 --> 00:14:08,439
effort so there's been a lot more

00:14:05,949 --> 00:14:11,410
benchmark results but I you use the

00:14:08,439 --> 00:14:14,379
latest development version of apache 244

00:14:11,410 --> 00:14:16,329
dev and the lady is stable production

00:14:14,379 --> 00:14:18,339
version of engine X which at the time is

00:14:16,329 --> 00:14:22,689
126 I think that still might be the case

00:14:18,339 --> 00:14:24,399
today because I was looking at you know

00:14:22,689 --> 00:14:26,499
development production environments

00:14:24,399 --> 00:14:28,899
previously I had just done it on fedora

00:14:26,499 --> 00:14:31,740
you know but now I decided now I'm going

00:14:28,899 --> 00:14:34,269
to look at doing it under on centos-5

00:14:31,740 --> 00:14:36,100
you know most people in production

00:14:34,269 --> 00:14:37,660
environments are using it if I could

00:14:36,100 --> 00:14:41,949
have grabbed rel I would have done that

00:14:37,660 --> 00:14:43,839
as well because you know you know do

00:14:41,949 --> 00:14:46,240
using dual cores and stuff like that is

00:14:43,839 --> 00:14:47,829
also an issue and that's been a concern

00:14:46,240 --> 00:14:49,480
on some of the previous benchmarks and

00:14:47,829 --> 00:14:53,980
made sure that we had a multi CPU

00:14:49,480 --> 00:14:55,509
machine a modest amount of memory and I

00:14:53,980 --> 00:14:57,730
also looked at different architectures

00:14:55,509 --> 00:15:00,610
doing tests both in the loopback

00:14:57,730 --> 00:15:03,490
situation as well as external with

00:15:00,610 --> 00:15:06,309
firewall so this is basically a quick

00:15:03,490 --> 00:15:07,660
graphic of what kind of tests I did the

00:15:06,309 --> 00:15:10,540
first set up in the first three two

00:15:07,660 --> 00:15:12,579
tests were basically the the test

00:15:10,540 --> 00:15:15,129
machine running on the exact same

00:15:12,579 --> 00:15:17,439
machine that was running engine X and HD

00:15:15,129 --> 00:15:18,429
PD and so basically all the requests

00:15:17,439 --> 00:15:21,509
were going over the loopback interface

00:15:18,429 --> 00:15:23,920
you know so China like avoiding the

00:15:21,509 --> 00:15:24,630
worries about the the network socket

00:15:23,920 --> 00:15:27,370
layer

00:15:24,630 --> 00:15:29,200
the second aspect was actually the next

00:15:27,370 --> 00:15:31,930
logical step is moving the test machine

00:15:29,200 --> 00:15:35,019
external and so you're talking over you

00:15:31,930 --> 00:15:38,260
know a traditional tcp/ip socket to a

00:15:35,019 --> 00:15:41,950
single server running you know engine X

00:15:38,260 --> 00:15:44,709
and apache a front-end I also looked at

00:15:41,950 --> 00:15:48,640
more common use which it actually has

00:15:44,709 --> 00:15:50,380
the front end being a reverse proxy to a

00:15:48,640 --> 00:15:52,510
back-end server and to kind of like make

00:15:50,380 --> 00:15:54,459
things as simple as possible I had the

00:15:52,510 --> 00:15:57,130
backend proxy server just be an engine

00:15:54,459 --> 00:15:59,380
xserver okay so the only variable was

00:15:57,130 --> 00:16:01,660
you'd have the requests coming in either

00:15:59,380 --> 00:16:04,630
going to apache and then to engine X and

00:16:01,660 --> 00:16:06,160
back or to engine X 2 engine X and back

00:16:04,630 --> 00:16:07,750
okay trying to look at all the different

00:16:06,160 --> 00:16:10,329
ways in some areas that people actually

00:16:07,750 --> 00:16:15,160
use the web servers out there okay so

00:16:10,329 --> 00:16:17,230
those really of the scenarios okay also

00:16:15,160 --> 00:16:18,970
it was important to make sure that I

00:16:17,230 --> 00:16:20,950
used a whole bunch of well not a whole

00:16:18,970 --> 00:16:23,860
bunch me too isn't a whole bunch but

00:16:20,950 --> 00:16:25,959
it's a it's a more than one different

00:16:23,860 --> 00:16:28,660
benchmarking scenario and so I use

00:16:25,959 --> 00:16:32,470
flooded which is an Apache project and

00:16:28,660 --> 00:16:35,250
HDD pref perf performance with different

00:16:32,470 --> 00:16:38,020
levels of concurrency mount modules

00:16:35,250 --> 00:16:40,300
different values and factors and things

00:16:38,020 --> 00:16:41,320
like that and ran these performance

00:16:40,300 --> 00:16:44,350
tests through all those different

00:16:41,320 --> 00:16:46,690
scenarios out there and you can see the

00:16:44,350 --> 00:16:48,430
values that I use if you want to go and

00:16:46,690 --> 00:16:50,920
recreate the other scenarios yourself

00:16:48,430 --> 00:16:54,310
out there because I didn't want to worry

00:16:50,920 --> 00:16:56,200
about things like content negotiation I

00:16:54,310 --> 00:17:00,070
made sure that all the requests were for

00:16:56,200 --> 00:17:03,880
full were for full URLs just basically I

00:17:00,070 --> 00:17:07,600
made the request for / index.html not

00:17:03,880 --> 00:17:09,550
just dub dub dub test com / because you

00:17:07,600 --> 00:17:12,760
don't worry about the internals in their

00:17:09,550 --> 00:17:15,130
side there at the time we didn't look at

00:17:12,760 --> 00:17:18,250
using dynamic content I wanted basically

00:17:15,130 --> 00:17:20,050
just to see how quickly these these

00:17:18,250 --> 00:17:21,730
processes and these servers could push

00:17:20,050 --> 00:17:23,500
the packets out could access the data

00:17:21,730 --> 00:17:26,829
and push the packets out and not worry

00:17:23,500 --> 00:17:28,510
about the the externals of what doing

00:17:26,829 --> 00:17:31,240
when you're generating dynamic content

00:17:28,510 --> 00:17:33,610
even though that is a topic for later

00:17:31,240 --> 00:17:37,059
benchmarking tests okay and he also

00:17:33,610 --> 00:17:38,060
tested all the main apache MP ends I did

00:17:37,059 --> 00:17:40,580
these tests for

00:17:38,060 --> 00:17:42,800
fork I did the test for worker and I did

00:17:40,580 --> 00:17:44,510
the test for it for event and the other

00:17:42,800 --> 00:17:49,070
thing is I really didn't spend a lot of

00:17:44,510 --> 00:17:50,630
time doing excessive tuning okay there's

00:17:49,070 --> 00:17:52,970
certainly a lot more that I could do to

00:17:50,630 --> 00:17:54,560
pull more performance out of httpd

00:17:52,970 --> 00:17:56,210
certainly a lot more that I could do to

00:17:54,560 --> 00:17:59,660
pull it out of engine X it came we'll

00:17:56,210 --> 00:18:02,480
talk about why that's actually not a bad

00:17:59,660 --> 00:18:04,640
thing that I did that in a few slides

00:18:02,480 --> 00:18:06,980
later on but the idea was again okay

00:18:04,640 --> 00:18:11,240
just assuming a normal everyday scenario

00:18:06,980 --> 00:18:12,890
how do they compare okay so this is the

00:18:11,240 --> 00:18:16,520
the very first one these are flood

00:18:12,890 --> 00:18:18,230
results right here and on the on the top

00:18:16,520 --> 00:18:21,050
you can see the engine X performance

00:18:18,230 --> 00:18:23,120
side okay we're looking at basically the

00:18:21,050 --> 00:18:26,270
time frame it takes as you're increasing

00:18:23,120 --> 00:18:28,400
concurrency for things like open up the

00:18:26,270 --> 00:18:30,470
socket how long it took for you know the

00:18:28,400 --> 00:18:33,830
front end to open the socket to the to

00:18:30,470 --> 00:18:35,330
the server to write their request to the

00:18:33,830 --> 00:18:36,590
reader response and they close the

00:18:35,330 --> 00:18:38,960
socket so we're looking at the full

00:18:36,590 --> 00:18:40,850
request response time frame associated

00:18:38,960 --> 00:18:44,870
with a single request and as you can see

00:18:40,850 --> 00:18:47,840
the values are very very low 44 engine X

00:18:44,870 --> 00:18:50,690
and the the event mpm we're talking

00:18:47,840 --> 00:18:53,030
about basically the same similar kind of

00:18:50,690 --> 00:18:54,680
performance no real you know differences

00:18:53,030 --> 00:18:57,470
between the two you can see there are

00:18:54,680 --> 00:19:00,290
some jaggedness associated with them so

00:18:57,470 --> 00:19:06,260
if what you're worried about is not only

00:19:00,290 --> 00:19:09,170
you know a low latency period but also a

00:19:06,260 --> 00:19:11,870
reproducible request-response knowable

00:19:09,170 --> 00:19:13,580
request response I know that at this

00:19:11,870 --> 00:19:15,950
time frame i'm going to get this request

00:19:13,580 --> 00:19:19,460
back you can see that both engine X and

00:19:15,950 --> 00:19:21,050
and the N 10pm have some fuzziness

00:19:19,460 --> 00:19:23,660
inside there okay you're going to get

00:19:21,050 --> 00:19:27,080
very quick responses back but they might

00:19:23,660 --> 00:19:28,580
fuzz out a little bit now looking at the

00:19:27,080 --> 00:19:31,340
worker NPM you can see that the

00:19:28,580 --> 00:19:35,030
fuzziness associated with with Apaches

00:19:31,340 --> 00:19:36,830
is even worse okay even though the total

00:19:35,030 --> 00:19:38,960
time frame it takes to send the request

00:19:36,830 --> 00:19:41,990
response time frame is about the same

00:19:38,960 --> 00:19:44,300
you know in general between the two your

00:19:41,990 --> 00:19:47,030
unknown factor in using the worker NPM

00:19:44,300 --> 00:19:48,410
is very very different okay what I

00:19:47,030 --> 00:19:50,900
thought was really really interesting

00:19:48,410 --> 00:19:51,920
was the pre for chem p.m. and of course

00:19:50,900 --> 00:19:54,080
knowing you know

00:19:51,920 --> 00:19:55,430
looking after it wasn't so much it

00:19:54,080 --> 00:19:58,430
should have been surprising to me that

00:19:55,430 --> 00:20:01,730
the results came the way they did as you

00:19:58,430 --> 00:20:03,560
can see the knowable factor as far as

00:20:01,730 --> 00:20:06,230
how long it takes to have the request

00:20:03,560 --> 00:20:09,920
response is very very consistent as you

00:20:06,230 --> 00:20:11,150
increased the concurrency inside there

00:20:09,920 --> 00:20:14,410
and of course that makes sense because

00:20:11,150 --> 00:20:16,510
you have a dedicated process

00:20:14,410 --> 00:20:18,650
specifically focus on that single

00:20:16,510 --> 00:20:20,210
request coming in so you don't have to

00:20:18,650 --> 00:20:22,100
worry about context switches and things

00:20:20,210 --> 00:20:25,550
like that you know as you're going from

00:20:22,100 --> 00:20:27,350
you know going polling or four events

00:20:25,550 --> 00:20:29,270
witches and things like that it's much

00:20:27,350 --> 00:20:31,220
more consistent out there you're also

00:20:29,270 --> 00:20:33,050
notice that in general the performance

00:20:31,220 --> 00:20:36,260
is pretty much the same looking at the

00:20:33,050 --> 00:20:39,320
request response cycle a different way

00:20:36,260 --> 00:20:42,110
of looking at those those values are

00:20:39,320 --> 00:20:44,360
just looking at the the time frame for

00:20:42,110 --> 00:20:46,810
simple opens you know again through

00:20:44,360 --> 00:20:50,540
engine X and all the other different

00:20:46,810 --> 00:20:52,790
mpms out there and again we're focusing

00:20:50,540 --> 00:20:54,050
on there's none really out of bounds

00:20:52,790 --> 00:20:57,920
with the other you know there's no

00:20:54,050 --> 00:21:00,680
simple mpm or engine X significantly

00:20:57,920 --> 00:21:02,030
better or significantly worse we're just

00:21:00,680 --> 00:21:03,320
looking at the fuzziness factor more

00:21:02,030 --> 00:21:06,250
than anything else is sort of like a

00:21:03,320 --> 00:21:09,410
really interesting thing so focusing on

00:21:06,250 --> 00:21:11,120
right in the read and finally the total

00:21:09,410 --> 00:21:12,470
request response time this is just a

00:21:11,120 --> 00:21:15,230
different way of looking at the same

00:21:12,470 --> 00:21:18,290
data showing that in general if you want

00:21:15,230 --> 00:21:21,020
to consistent you know knowable pattern

00:21:18,290 --> 00:21:23,120
as far as handling static content then

00:21:21,020 --> 00:21:24,800
pre fork pretty much gives you that of

00:21:23,120 --> 00:21:27,440
course you don't get that for free but

00:21:24,800 --> 00:21:29,180
if that's what's important to you then

00:21:27,440 --> 00:21:30,890
that's a really really good time frame

00:21:29,180 --> 00:21:32,480
if you're much more worried about

00:21:30,890 --> 00:21:35,270
concurrence ring and stuff like that you

00:21:32,480 --> 00:21:37,550
can see that vent is a pretty good mpm

00:21:35,270 --> 00:21:40,940
give similar performance with engine X

00:21:37,550 --> 00:21:43,610
and somewhat were consistent timeframes

00:21:40,940 --> 00:21:47,740
associated with that this is a different

00:21:43,610 --> 00:21:50,720
way of looking at the data using a

00:21:47,740 --> 00:21:53,900
different benchmarking mechanism and

00:21:50,720 --> 00:21:55,760
this is the HTTP / benchmark right here

00:21:53,900 --> 00:21:57,920
and you'll see that well again we have

00:21:55,760 --> 00:22:01,010
the very very bottom level showing

00:21:57,920 --> 00:22:02,540
increasing concurrency so as we're

00:22:01,010 --> 00:22:04,950
increasing the concurrency we're looking

00:22:02,540 --> 00:22:08,070
at basically the

00:22:04,950 --> 00:22:13,950
the total time taken minimum average

00:22:08,070 --> 00:22:15,750
maximum for me is the most is the most

00:22:13,950 --> 00:22:18,330
useful one because it really shows how

00:22:15,750 --> 00:22:20,730
consistently you can trust your website

00:22:18,330 --> 00:22:23,250
to have consistent performance ok you

00:22:20,730 --> 00:22:25,620
can again optimized to have that nice

00:22:23,250 --> 00:22:27,480
consistent user experience and again

00:22:25,620 --> 00:22:29,250
you'll see that in general there really

00:22:27,480 --> 00:22:31,350
aren't that many differences out there

00:22:29,250 --> 00:22:33,420
as far as performance is concerned okay

00:22:31,350 --> 00:22:34,950
things are pretty much the same you know

00:22:33,420 --> 00:22:37,500
the same market even as you're

00:22:34,950 --> 00:22:39,990
increasing concurrency which is you know

00:22:37,500 --> 00:22:42,480
always been engine exs big flame is that

00:22:39,990 --> 00:22:44,670
it's very very uh you know able to

00:22:42,480 --> 00:22:46,350
handle high levels of concurrency much

00:22:44,670 --> 00:22:48,450
more so than Apache a patch would fall

00:22:46,350 --> 00:22:49,860
down you're seeing as we're doing that

00:22:48,450 --> 00:22:51,810
we're not really seeing those kind of

00:22:49,860 --> 00:22:53,850
results at least in the benchmarks they

00:22:51,810 --> 00:22:56,280
were talking about right here I think

00:22:53,850 --> 00:23:00,030
it's very very very very interesting

00:22:56,280 --> 00:23:01,680
information out there now because these

00:23:00,030 --> 00:23:06,180
were me running testing because I do

00:23:01,680 --> 00:23:08,540
wear an Apache hat obviously anything

00:23:06,180 --> 00:23:12,090
that I propose is going to be seen with

00:23:08,540 --> 00:23:14,930
skepticism as it should be ok back when

00:23:12,090 --> 00:23:18,570
I originally did the original benchmarks

00:23:14,930 --> 00:23:20,910
there was a an email thread on the the

00:23:18,570 --> 00:23:23,550
httpd developers list about someone else

00:23:20,910 --> 00:23:26,730
who ran their own different benchmarks

00:23:23,550 --> 00:23:28,820
out there and you can see that this is

00:23:26,730 --> 00:23:31,440
uh this is his response this is his

00:23:28,820 --> 00:23:34,740
results right here and you can see in

00:23:31,440 --> 00:23:37,710
his case the event mpm was actually

00:23:34,740 --> 00:23:40,890
better as far as concurrency concern

00:23:37,710 --> 00:23:42,840
than in general ed then engine X was at

00:23:40,890 --> 00:23:44,880
least in this test frame when his test

00:23:42,840 --> 00:23:48,270
environment it was you know it was

00:23:44,880 --> 00:23:49,740
better but better is always a subjective

00:23:48,270 --> 00:23:52,140
term we'll talk about that there are

00:23:49,740 --> 00:23:54,540
caveats associated with this but I just

00:23:52,140 --> 00:23:57,330
wanted to let everyone know that don't

00:23:54,540 --> 00:23:59,220
think that Apache can't hold up to the

00:23:57,330 --> 00:24:02,990
big guys ok so this is just another

00:23:59,220 --> 00:24:07,100
independent checkmark as it were of

00:24:02,990 --> 00:24:11,790
comparisons between Apache and engine X

00:24:07,100 --> 00:24:13,680
ok so in general you know looking at

00:24:11,790 --> 00:24:16,990
what I consider the the results of these

00:24:13,680 --> 00:24:19,450
benchmarks ok events polling

00:24:16,990 --> 00:24:21,670
fork spawns and things like that okay

00:24:19,450 --> 00:24:24,280
that creates overhead okay you've got to

00:24:21,670 --> 00:24:25,929
worry about that it came obviously the

00:24:24,280 --> 00:24:28,420
design is that you get more bang for the

00:24:25,929 --> 00:24:31,330
buck that's what they're designed to do

00:24:28,420 --> 00:24:33,670
okay but it can be bad for a performance

00:24:31,330 --> 00:24:36,480
for that specific request if you boil

00:24:33,670 --> 00:24:39,550
everything down to what is is important

00:24:36,480 --> 00:24:41,290
being the that particular request that

00:24:39,550 --> 00:24:42,400
request is fighting for resources for

00:24:41,290 --> 00:24:46,540
the other requests that are coming

00:24:42,400 --> 00:24:49,000
inside there okay for concurrency the

00:24:46,540 --> 00:24:51,850
event mpm the worker in p.m. are pretty

00:24:49,000 --> 00:24:54,070
much on par with engine x4 transaction

00:24:51,850 --> 00:24:57,100
speed pre fork is a really really good

00:24:54,070 --> 00:24:58,960
design now the main consideration of

00:24:57,100 --> 00:25:01,510
course is that at in during these tests

00:24:58,960 --> 00:25:03,970
apache was never resource starved okay

00:25:01,510 --> 00:25:06,580
if a patchy gets resource starved okay

00:25:03,970 --> 00:25:09,160
and and you know patchi's still uses you

00:25:06,580 --> 00:25:11,260
know has a higher memory footprint then

00:25:09,160 --> 00:25:13,210
engine X does then obviously performance

00:25:11,260 --> 00:25:15,160
is going to go way downhill quickly okay

00:25:13,210 --> 00:25:17,260
there's no way around that we realize

00:25:15,160 --> 00:25:19,390
that we'll talk a little bit later on

00:25:17,260 --> 00:25:22,750
about ideas that we have in addressing

00:25:19,390 --> 00:25:24,850
that in solving that okay but again

00:25:22,750 --> 00:25:27,520
we're talking about the cloud here where

00:25:24,850 --> 00:25:29,770
maybe because of the the flexibility of

00:25:27,520 --> 00:25:31,540
horizontal scaling you might want to put

00:25:29,770 --> 00:25:34,210
up with that you might want to make that

00:25:31,540 --> 00:25:36,970
that trade-off out there okay if memory

00:25:34,210 --> 00:25:38,920
is a scarce resource okay engine X is a

00:25:36,970 --> 00:25:40,690
great alternative as are a whole bunch

00:25:38,920 --> 00:25:43,270
of other ones out there Apache traffic

00:25:40,690 --> 00:25:46,450
server again is a fantastic you know

00:25:43,270 --> 00:25:49,030
howdy concurrent very lean mean web

00:25:46,450 --> 00:25:50,740
server out there another thing that I

00:25:49,030 --> 00:25:53,500
think that is important with the the

00:25:50,740 --> 00:25:56,020
cloud is the whole dine idea of dynamics

00:25:53,500 --> 00:25:58,120
okay the cloud is constantly changing

00:25:56,020 --> 00:26:00,220
you know you're adding constantly

00:25:58,120 --> 00:26:03,130
spinning up new servers getting rid of

00:26:00,220 --> 00:26:04,690
new server service go away okay your web

00:26:03,130 --> 00:26:06,790
server needs to be aware of that it

00:26:04,690 --> 00:26:10,960
needs to have that factored in at the

00:26:06,790 --> 00:26:12,910
core okay so we we always prided

00:26:10,960 --> 00:26:14,650
ourselves inside of Apache on our

00:26:12,910 --> 00:26:16,179
reverse proxy capability we always

00:26:14,650 --> 00:26:18,610
thought it was really really good but we

00:26:16,179 --> 00:26:20,559
realized that nowadays those proxy

00:26:18,610 --> 00:26:23,410
capabilities need to be more cloud

00:26:20,559 --> 00:26:26,000
friendly we're dynamic aware and be able

00:26:23,410 --> 00:26:28,310
to basically live

00:26:26,000 --> 00:26:30,920
in a cloud environment with the kind of

00:26:28,310 --> 00:26:32,570
features that system in one okay I won't

00:26:30,920 --> 00:26:34,640
go into a lot of detail about what the

00:26:32,570 --> 00:26:36,800
proxy server is because that's you know

00:26:34,640 --> 00:26:40,220
if you've seen other presentations in

00:26:36,800 --> 00:26:42,320
the proxy it's a you know pretty much

00:26:40,220 --> 00:26:44,060
the same what's what's important to

00:26:42,320 --> 00:26:46,880
realize is that there is load balancing

00:26:44,060 --> 00:26:49,610
clustering and failover built into it

00:26:46,880 --> 00:26:51,920
okay so that stuff is is is new is not

00:26:49,610 --> 00:26:53,750
new it's been with Apache for quite a

00:26:51,920 --> 00:26:56,480
long period of time there been different

00:26:53,750 --> 00:26:58,220
ways of adding that in there okay so we

00:26:56,480 --> 00:26:59,660
have specific modules that do this sort

00:26:58,220 --> 00:27:03,440
of like load balancing and stuff like

00:26:59,660 --> 00:27:05,810
that out there basically a quick look at

00:27:03,440 --> 00:27:08,300
it is that as you can see for Apache you

00:27:05,810 --> 00:27:11,780
confront and not only HTTP traffic but

00:27:08,300 --> 00:27:14,120
also traffic like a JP fast CGI and

00:27:11,780 --> 00:27:16,700
stuff like that with a single unified

00:27:14,120 --> 00:27:18,380
interface a unified command structure

00:27:16,700 --> 00:27:20,840
out there so you see in this particular

00:27:18,380 --> 00:27:22,550
scenario right here apache is front

00:27:20,840 --> 00:27:25,970
ending a couple of Tomcats on the back

00:27:22,550 --> 00:27:28,130
end talking a GP as well as several PHP

00:27:25,970 --> 00:27:29,900
servers out there as well and you can

00:27:28,130 --> 00:27:32,270
see that we have different load factors

00:27:29,900 --> 00:27:34,640
and stuff like that we have one on a hot

00:27:32,270 --> 00:27:36,560
standby status which sees that says that

00:27:34,640 --> 00:27:40,220
that server won't be used unless all the

00:27:36,560 --> 00:27:42,800
other ones are down okay one of the

00:27:40,220 --> 00:27:44,900
things that we look at in you know cloud

00:27:42,800 --> 00:27:46,370
type environments is that you front and

00:27:44,900 --> 00:27:48,530
a lot of reverse proxies now

00:27:46,370 --> 00:27:49,970
traditionally the way to do that is that

00:27:48,530 --> 00:27:53,030
you would have to have inside of your

00:27:49,970 --> 00:27:55,100
config file virtual hosts for every you

00:27:53,030 --> 00:27:57,710
know proxy you're looking at so right

00:27:55,100 --> 00:28:00,620
here we're seeing we're front ending dub

00:27:57,710 --> 00:28:04,640
dub dub one example com all the way down

00:28:00,620 --> 00:28:07,610
down to dub dub dub you know 6341 okay

00:28:04,640 --> 00:28:09,860
each one with its uh you know back end

00:28:07,610 --> 00:28:12,560
that is the reverse proxim there this is

00:28:09,860 --> 00:28:14,480
painful to do obviously it's not dynamic

00:28:12,560 --> 00:28:16,490
if you need to add or delete any

00:28:14,480 --> 00:28:17,990
back-end servers you need to change the

00:28:16,490 --> 00:28:20,660
config file and do a graceful restart

00:28:17,990 --> 00:28:24,020
which is ugly so we created this module

00:28:20,660 --> 00:28:26,960
which basically abstracts that app into

00:28:24,020 --> 00:28:28,610
a DB file so inside this DB file you

00:28:26,960 --> 00:28:30,440
basically have the name of the virtual

00:28:28,610 --> 00:28:33,080
host at your front ending and the pace

00:28:30,440 --> 00:28:36,200
that it goes to on the back end and so

00:28:33,080 --> 00:28:39,230
as a request comes in Apache checks this

00:28:36,200 --> 00:28:41,840
DB file sends a request out and sends it

00:28:39,230 --> 00:28:44,140
okay it's very very fast it's very

00:28:41,840 --> 00:28:48,169
dynamic you can just change the DB file

00:28:44,140 --> 00:28:50,780
in real time and then add and remove as

00:28:48,169 --> 00:28:53,330
needed very very cool feature okay

00:28:50,780 --> 00:28:54,770
another feature that was added is the

00:28:53,330 --> 00:28:57,710
whole idea of a heartbeat the heart

00:28:54,770 --> 00:29:00,380
monitor it uses multicast to be able to

00:28:57,710 --> 00:29:02,240
send information back between Apache at

00:29:00,380 --> 00:29:04,429
the front and Apaches on the back end

00:29:02,240 --> 00:29:06,950
there's a that is the requirement is

00:29:04,429 --> 00:29:08,450
it's Apache to Apache it provides not

00:29:06,950 --> 00:29:10,370
owning your heartbeat are you their

00:29:08,450 --> 00:29:12,260
signal but also some levels of

00:29:10,370 --> 00:29:13,700
performance you know these are my my

00:29:12,260 --> 00:29:16,370
loads and stuff like that this is how

00:29:13,700 --> 00:29:17,570
busy I am okay obviously a lot of

00:29:16,370 --> 00:29:19,400
environments especially found

00:29:17,570 --> 00:29:21,860
environments you're not allowed to use

00:29:19,400 --> 00:29:24,919
multicast so they may not be a viable

00:29:21,860 --> 00:29:27,110
option for you we did do to try to make

00:29:24,919 --> 00:29:30,380
some sort of generic solution for this

00:29:27,110 --> 00:29:33,770
is we added to mod header which allows

00:29:30,380 --> 00:29:36,740
you to you know add in request and

00:29:33,770 --> 00:29:40,220
response headers from Apache values of

00:29:36,740 --> 00:29:42,169
server load as well as percentage of

00:29:40,220 --> 00:29:45,890
busyness and percent of idleness inside

00:29:42,169 --> 00:29:48,350
of Apache so when Apache sends a

00:29:45,890 --> 00:29:51,200
response back to the front end server it

00:29:48,350 --> 00:29:54,679
can also as part of that request say my

00:29:51,200 --> 00:29:57,290
load average is you know 0.5 and thirty

00:29:54,679 --> 00:29:59,660
percent of my my entities are busy okay

00:29:57,290 --> 00:30:01,220
unfortunately right now there's no load

00:29:59,660 --> 00:30:04,460
balancing method which uses that

00:30:01,220 --> 00:30:05,809
although we'd like to add that but the

00:30:04,460 --> 00:30:09,380
problem is is that there's really no

00:30:05,809 --> 00:30:11,000
Universal measurement of load between

00:30:09,380 --> 00:30:13,150
web servers and so for this kind of idea

00:30:11,000 --> 00:30:16,940
to really take one to be able to have

00:30:13,150 --> 00:30:19,700
you know Apache front and anything on

00:30:16,940 --> 00:30:21,350
the back end in a real dynamic load

00:30:19,700 --> 00:30:24,620
balancing factor it'd be nice to have

00:30:21,350 --> 00:30:27,049
some sort of agreed upon value of what a

00:30:24,620 --> 00:30:29,600
load of a web server is and so we might

00:30:27,049 --> 00:30:31,160
try to start creating that that

00:30:29,600 --> 00:30:33,169
community around that kind of concept

00:30:31,160 --> 00:30:34,910
out there I think the biggest coolest

00:30:33,169 --> 00:30:37,150
feature is something which is really

00:30:34,910 --> 00:30:40,460
brand-new in 24 which is the idea of the

00:30:37,150 --> 00:30:43,190
balancer manager it's an embedded proxy

00:30:40,460 --> 00:30:45,380
web administration module which allows

00:30:43,190 --> 00:30:47,150
for not only real time monitoring of how

00:30:45,380 --> 00:30:50,030
Apache is handling those back-end

00:30:47,150 --> 00:30:50,930
servers but also allows you adjust those

00:30:50,030 --> 00:30:53,890
parameters

00:30:50,930 --> 00:30:56,450
out there as well okay it allows for new

00:30:53,890 --> 00:30:58,760
modules and notes to be added in it

00:30:56,450 --> 00:31:01,070
allows you to change those parameters as

00:30:58,760 --> 00:31:03,500
well and it's persistent okay you can

00:31:01,070 --> 00:31:04,790
actually change turn off the server turn

00:31:03,500 --> 00:31:06,890
it back one again and you'll see the

00:31:04,790 --> 00:31:09,290
results okay the result is very very

00:31:06,890 --> 00:31:10,670
easy to do now I actually this is what

00:31:09,290 --> 00:31:13,730
it looks like but I'm actually going to

00:31:10,670 --> 00:31:16,240
go and throw caution to the wind and

00:31:13,730 --> 00:31:20,990
actually do a live demo right here so

00:31:16,240 --> 00:31:23,510
let's first of all go to as you can see

00:31:20,990 --> 00:31:25,130
the website is not up so Apaches not

00:31:23,510 --> 00:31:26,780
running on my local machine it's trying

00:31:25,130 --> 00:31:33,260
to access the balance from manager and

00:31:26,780 --> 00:31:35,300
it's not working so okay I'm Apache

00:31:33,260 --> 00:31:37,310
start it up it's creating some some

00:31:35,300 --> 00:31:38,960
workers on the end of it as you can see

00:31:37,310 --> 00:31:41,840
I haven't quite you know got everything

00:31:38,960 --> 00:31:43,940
define our adheres but anyway now let's

00:31:41,840 --> 00:31:45,740
go ahead and we now have a patchy up and

00:31:43,940 --> 00:31:47,810
running so you can see that I've created

00:31:45,740 --> 00:31:50,360
this basically this back-end cluster

00:31:47,810 --> 00:31:53,360
back here called Apache con na 13 and

00:31:50,360 --> 00:31:55,850
it's got two servers one on the back end

00:31:53,360 --> 00:31:57,500
oh that's really really great but let's

00:31:55,850 --> 00:31:59,480
say right now I don't want to worry

00:31:57,500 --> 00:32:03,190
about load balancing bye-bye traffic

00:31:59,480 --> 00:32:06,890
right here I actually want to change

00:32:03,190 --> 00:32:14,750
bye-bye requests so I go to the website

00:32:06,890 --> 00:32:17,840
I submit and now I'm now changed it by

00:32:14,750 --> 00:32:19,850
requests ok so now real-time Apache will

00:32:17,840 --> 00:32:21,530
no longer be tracking the number of

00:32:19,850 --> 00:32:23,180
packets which are going back and forth

00:32:21,530 --> 00:32:25,340
they'll be looking at the broad number

00:32:23,180 --> 00:32:34,550
of requests coming in and now what I

00:32:25,340 --> 00:32:36,710
also want to do is add a new server and

00:32:34,550 --> 00:32:39,590
there it is right now now all the mat

00:32:36,710 --> 00:32:41,600
automatically apache is now aware of a

00:32:39,590 --> 00:32:44,120
third element of that cluster up there

00:32:41,600 --> 00:32:46,220
called Apache na 13 and we'll start

00:32:44,120 --> 00:32:48,050
sending traffic to their as well that's

00:32:46,220 --> 00:32:51,890
all well and good ok but what happens if

00:32:48,050 --> 00:32:56,480
for example this server goes down ok so

00:32:51,890 --> 00:33:00,130
now let's kill the server ok let's go

00:32:56,480 --> 00:33:02,420
back over here and you can let's try to

00:33:00,130 --> 00:33:04,790
restart and you can see that Apaches

00:33:02,420 --> 00:33:07,730
down now ok so obviously we're not just

00:33:04,790 --> 00:33:10,430
no funny business going on okay well but

00:33:07,730 --> 00:33:12,530
start it back up again and see what what

00:33:10,430 --> 00:33:16,250
operating parameters the the web server

00:33:12,530 --> 00:33:17,870
is going to be worrying about okay you

00:33:16,250 --> 00:33:20,000
can see that we're back again to buy

00:33:17,870 --> 00:33:22,820
requests which is the change we made

00:33:20,000 --> 00:33:25,310
previously and it's still aware of that

00:33:22,820 --> 00:33:27,770
note that we just added in so even as

00:33:25,310 --> 00:33:29,420
Apache would what would go down even as

00:33:27,770 --> 00:33:31,370
you need to change the requirements and

00:33:29,420 --> 00:33:33,050
set it like that those changes are

00:33:31,370 --> 00:33:35,750
persistent so once you make that change

00:33:33,050 --> 00:33:37,700
and it can be by the web face or you

00:33:35,750 --> 00:33:39,110
know by a command-line interface or

00:33:37,700 --> 00:33:41,720
something like that or even some kind of

00:33:39,110 --> 00:33:43,700
you know automatic autonomous mechanism

00:33:41,720 --> 00:33:45,950
that says oh okay I'm sensing there's

00:33:43,700 --> 00:33:47,960
you know too much traffic on these nodes

00:33:45,950 --> 00:33:49,880
I'm going to fold somebody else in those

00:33:47,960 --> 00:33:52,430
changes are persistent which i think is

00:33:49,880 --> 00:33:53,960
very very crucial for for any sort of

00:33:52,430 --> 00:33:55,520
like you know cloud environment out

00:33:53,960 --> 00:33:57,800
there is not only being able to have

00:33:55,520 --> 00:34:06,170
dynamic change but have those changes be

00:33:57,800 --> 00:34:08,240
consistent okay so in conclusion I

00:34:06,170 --> 00:34:11,030
hopefully have some time to have some

00:34:08,240 --> 00:34:14,419
Q&A okay the performance of Apache 24 is

00:34:11,030 --> 00:34:18,050
you know really still in in the big

00:34:14,419 --> 00:34:19,640
leagues okay please don't just look a

00:34:18,050 --> 00:34:22,280
benchmarks and make a decision of that

00:34:19,640 --> 00:34:24,470
okay you know their environment where

00:34:22,280 --> 00:34:26,960
engine X makes sense Apache traffic

00:34:24,470 --> 00:34:28,610
server makes sense Apache makes make

00:34:26,960 --> 00:34:30,380
sense okay be smart and intelligent

00:34:28,610 --> 00:34:33,320
about making those decisions out there

00:34:30,380 --> 00:34:34,880
the architecture of Apache 24 really

00:34:33,320 --> 00:34:36,650
allows for a lot of flexibility in

00:34:34,880 --> 00:34:39,770
growth if you were at the mod speedy

00:34:36,650 --> 00:34:42,560
talk yesterday you saw that he was able

00:34:39,770 --> 00:34:44,510
to actually cram Apache to do something

00:34:42,560 --> 00:34:46,429
which it really wasn't designed to do it

00:34:44,510 --> 00:34:48,679
was really you know pretty amazing out

00:34:46,429 --> 00:34:50,750
there there's still a you know a large

00:34:48,679 --> 00:34:52,760
category of edge cases where you need to

00:34:50,750 --> 00:34:55,880
use different technologies be sure to

00:34:52,760 --> 00:34:58,790
use them don't be Holden to a specific

00:34:55,880 --> 00:35:00,110
specific technology because everybody is

00:34:58,790 --> 00:35:01,760
talking about it do your do your

00:35:00,110 --> 00:35:04,610
research and stuff like that and of

00:35:01,760 --> 00:35:06,050
course lies damn lies and statistics and

00:35:04,610 --> 00:35:09,170
benchmarks or things that shouldn't be

00:35:06,050 --> 00:35:11,750
trusted okay that's it for the end of my

00:35:09,170 --> 00:35:15,370
slides these will be on SlideShare later

00:35:11,750 --> 00:35:18,470
on today I think we might have maybe

00:35:15,370 --> 00:35:22,630
five minutes or so for for questions

00:35:18,470 --> 00:35:22,630
you have any please uh please come on up

00:35:23,590 --> 00:35:33,170
hi Jim thanks in a cloud environment I

00:35:28,700 --> 00:35:35,000
often pay for cpu right hmm did you take

00:35:33,170 --> 00:35:36,320
a look at cpu when you're doing any of

00:35:35,000 --> 00:35:37,490
your benchmarks I know it was outside of

00:35:36,320 --> 00:35:40,340
the scope of what you are looking for

00:35:37,490 --> 00:35:41,930
but did you see comparisons between

00:35:40,340 --> 00:35:44,990
Apache and edgy yeah the question was

00:35:41,930 --> 00:35:48,320
during the during the test where there

00:35:44,990 --> 00:35:49,670
are differences between the the cpu

00:35:48,320 --> 00:35:51,320
utilization you know for all the

00:35:49,670 --> 00:35:53,599
different tests out there and it really

00:35:51,320 --> 00:35:57,560
depended on the operating system okay I

00:35:53,599 --> 00:36:00,470
I did tests on sent OS fedora 18 and os

00:35:57,560 --> 00:36:03,020
in Mac OS 10 OS 10 there were

00:36:00,470 --> 00:36:06,290
differences and apache used a you know a

00:36:03,020 --> 00:36:09,530
higher by maybe fifteen twenty percent

00:36:06,290 --> 00:36:11,510
okay well on sent to us and Fodor really

00:36:09,530 --> 00:36:13,940
no difference at all between the two in

00:36:11,510 --> 00:36:17,240
general the cpu utilization was pretty

00:36:13,940 --> 00:36:19,220
much the same the pre fork had a little

00:36:17,240 --> 00:36:22,250
bit more cpu utilization though in

00:36:19,220 --> 00:36:25,310
general the event had the less so the

00:36:22,250 --> 00:36:27,320
trait to the the you know that that was

00:36:25,310 --> 00:36:29,359
the the trade-off you know you get

00:36:27,320 --> 00:36:32,270
really really quick request response but

00:36:29,359 --> 00:36:38,330
you know you've got to put up with more

00:36:32,270 --> 00:36:41,859
memory more cpu great thanks sure hi um

00:36:38,330 --> 00:36:44,420
so in your benchmarks about trying to

00:36:41,859 --> 00:36:49,160
relate the server architecture to the

00:36:44,420 --> 00:36:51,349
user experience I kind of feel like you

00:36:49,160 --> 00:36:53,300
missed the largest component of user

00:36:51,349 --> 00:36:55,940
experience which is actually not server

00:36:53,300 --> 00:36:58,099
performance it's it's how the front end

00:36:55,940 --> 00:37:00,589
is its design what the images look like

00:36:58,099 --> 00:37:03,589
how the HTML is arranged in what order

00:37:00,589 --> 00:37:06,640
things go in and how that relates to the

00:37:03,589 --> 00:37:12,050
server performance yeah so I feel like

00:37:06,640 --> 00:37:13,970
the HD HD perf benchmarks are great but

00:37:12,050 --> 00:37:16,010
if you want to look at what the users

00:37:13,970 --> 00:37:17,960
will experience try a web page test

00:37:16,010 --> 00:37:20,330
which will actually render pages in

00:37:17,960 --> 00:37:22,910
browsers from distant locations and show

00:37:20,330 --> 00:37:25,820
you what videos of the page actually

00:37:22,910 --> 00:37:28,590
transpiring and I think that if you do

00:37:25,820 --> 00:37:31,140
that you'll see that the vent

00:37:28,590 --> 00:37:33,510
and engine acts are pretty good and

00:37:31,140 --> 00:37:36,390
that's where pre fork tends to be a

00:37:33,510 --> 00:37:39,390
problem hmm unless you can turn on keep

00:37:36,390 --> 00:37:41,250
alive and then you have memory issues so

00:37:39,390 --> 00:37:42,600
kind of from my perspective if you want

00:37:41,250 --> 00:37:44,550
to look at end user performance in

00:37:42,600 --> 00:37:46,110
latency the most important thing you can

00:37:44,550 --> 00:37:50,100
do in the web server is turn keep a live

00:37:46,110 --> 00:37:51,930
on and the next most important thing

00:37:50,100 --> 00:37:54,900
that you can do assuming that you have

00:37:51,930 --> 00:37:57,060
caching headers and and you're

00:37:54,900 --> 00:37:58,350
compressing all your content is make

00:37:57,060 --> 00:38:03,000
sure that your images in the

00:37:58,350 --> 00:38:04,380
architecture of your HTML is is optimal

00:38:03,000 --> 00:38:07,920
and that's why I'm going to plug my

00:38:04,380 --> 00:38:11,430
lightning talk of it this evening for my

00:38:07,920 --> 00:38:14,160
page beat yeah I mean certainly I agree

00:38:11,430 --> 00:38:16,860
I mean you did simplify the the

00:38:14,160 --> 00:38:19,520
benchmark you know to basically have a

00:38:16,860 --> 00:38:22,730
particular area that I was focused in

00:38:19,520 --> 00:38:25,770
use your experience and what creates a

00:38:22,730 --> 00:38:27,600
viable acceptable fun user experience is

00:38:25,770 --> 00:38:29,070
you know obviously there are tricks that

00:38:27,600 --> 00:38:31,740
you can do you can have you know you can

00:38:29,070 --> 00:38:34,170
turn on my gzip you know and compress

00:38:31,740 --> 00:38:37,140
that you can use the other technologies

00:38:34,170 --> 00:38:41,460
out there as well my main focus my main

00:38:37,140 --> 00:38:43,200
concept was that okay you know as you're

00:38:41,460 --> 00:38:45,810
looking at it how quickly does the web

00:38:43,200 --> 00:38:47,190
server respond okay without looking at

00:38:45,810 --> 00:38:49,830
the other aspects out there but

00:38:47,190 --> 00:38:53,640
certainly I do agree that it's a it's a

00:38:49,830 --> 00:38:56,250
much more complicated I want to add one

00:38:53,640 --> 00:38:57,990
more thing which is that I chi not

00:38:56,250 --> 00:39:00,180
trying to I don't disagree with your

00:38:57,990 --> 00:39:01,710
conclusion I think Apache can be

00:39:00,180 --> 00:39:03,960
configured into a very performant

00:39:01,710 --> 00:39:07,440
solution particularly with the vent mpm

00:39:03,960 --> 00:39:10,170
and actually having worked on getting

00:39:07,440 --> 00:39:12,680
our module working in engine X and and

00:39:10,170 --> 00:39:14,850
of course it was originally in Apache

00:39:12,680 --> 00:39:17,280
they're not as different as you would

00:39:14,850 --> 00:39:18,870
think when we when we unpeeled what was

00:39:17,280 --> 00:39:21,570
under engine X it looked a lot more

00:39:18,870 --> 00:39:23,550
Apache like than we expected so i think

00:39:21,570 --> 00:39:26,160
it's i think it's not that surprising

00:39:23,550 --> 00:39:27,900
that that the benchmarks at least for

00:39:26,160 --> 00:39:30,860
event kind of comparable yeah i mean

00:39:27,900 --> 00:39:34,400
it's kind of like a you know a really

00:39:30,860 --> 00:39:37,830
unknown secret that really engine X is a

00:39:34,400 --> 00:39:39,270
fork of Apache 13 if you look at it you

00:39:37,830 --> 00:39:41,100
know a lot of the structures the pool

00:39:39,270 --> 00:39:42,150
mechanism the request mechanism and

00:39:41,100 --> 00:39:44,369
stuff like that

00:39:42,150 --> 00:39:46,890
it is really has that heritage inside

00:39:44,369 --> 00:39:48,450
there of course it's a severe for coming

00:39:46,890 --> 00:39:49,710
is gone you know really way and it's a

00:39:48,450 --> 00:39:50,960
great design it's a great architecture

00:39:49,710 --> 00:39:53,940
don't get me wrong we wouldn't be

00:39:50,960 --> 00:39:58,650
focusing on one event and asynchronous

00:39:53,940 --> 00:40:00,839
mpms if there wasn't a market and

00:39:58,650 --> 00:40:02,579
environment that that required that kind

00:40:00,839 --> 00:40:04,710
of environment out there my point was

00:40:02,579 --> 00:40:07,680
just that there's a lot of solutions out

00:40:04,710 --> 00:40:12,329
there and the you know the old horse

00:40:07,680 --> 00:40:14,579
still has some kick in it I think we're

00:40:12,329 --> 00:40:16,170
done I will be your here for the for the

00:40:14,579 --> 00:40:18,150
rest of the conference if you have any

00:40:16,170 --> 00:40:19,500
any questions debates if you want to hit

00:40:18,150 --> 00:40:21,450
me in the head with a brick that'd be

00:40:19,500 --> 00:40:23,809
fine as well thank you everyone have a

00:40:21,450 --> 00:40:23,809

YouTube URL: https://www.youtube.com/watch?v=zBTmhOTmiMU


