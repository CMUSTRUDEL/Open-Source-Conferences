Title: Firefox Crash Analysis
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Laura Thomson
ApacheCon NA 2013
Big Data
Captions: 
	00:00:01,490 --> 00:00:07,319
all right Apache con day two big data

00:00:05,759 --> 00:00:09,840
track we have a first speaker Laura

00:00:07,319 --> 00:00:14,219
Thompson and she's going to speak on

00:00:09,840 --> 00:00:16,529
firefox crash reporting what you love hi

00:00:14,219 --> 00:00:18,630
everybody uh just as a disclaimer at the

00:00:16,529 --> 00:00:20,820
beginning I tend to speak very fast and

00:00:18,630 --> 00:00:23,189
I have a funny accent so if you have

00:00:20,820 --> 00:00:25,340
trouble understanding me way frantically

00:00:23,189 --> 00:00:27,119
and I will try and answer that question

00:00:25,340 --> 00:00:29,279
so I'm here to talk to you today about

00:00:27,119 --> 00:00:32,579
Firefox crash reporting I work for the

00:00:29,279 --> 00:00:35,880
Mozilla Corporation I work for a little

00:00:32,579 --> 00:00:38,010
team called web tools we make generally

00:00:35,880 --> 00:00:39,899
speaking things that are mostly web apps

00:00:38,010 --> 00:00:41,550
but they tend to be weird web apps

00:00:39,899 --> 00:00:44,879
because they are generally speaking

00:00:41,550 --> 00:00:46,440
tools that are aimed at developers so as

00:00:44,879 --> 00:00:48,539
well as the crash reporting project we

00:00:46,440 --> 00:00:51,360
also work on performance testing and

00:00:48,539 --> 00:00:53,879
graphing for Firefox builds localization

00:00:51,360 --> 00:00:55,190
tools code search static analysis whole

00:00:53,879 --> 00:00:57,510
bunch of other stuff product delivery

00:00:55,190 --> 00:01:00,390
product updates plugin management

00:00:57,510 --> 00:01:02,730
infrastructure dashboards or etherpad

00:01:00,390 --> 00:01:05,489
and a mozilla and there's a really large

00:01:02,730 --> 00:01:07,979
number of projects so its web apps but

00:01:05,489 --> 00:01:09,869
most of the web apps that we work on not

00:01:07,979 --> 00:01:11,130
very classic web apps like the attentive

00:01:09,869 --> 00:01:13,619
you have complicated infrastructural

00:01:11,130 --> 00:01:16,020
requirements and they tend to be aimed

00:01:13,619 --> 00:01:18,570
at engineers rather than consumers so

00:01:16,020 --> 00:01:19,890
just as background today I'm going to

00:01:18,570 --> 00:01:21,479
talk to you about the Firefox crash

00:01:19,890 --> 00:01:24,299
reporting project which is called Sakura

00:01:21,479 --> 00:01:26,820
I'll talk about the scale of it how we

00:01:24,299 --> 00:01:27,840
architected work process and tools and

00:01:26,820 --> 00:01:30,210
things that we're planning to do in the

00:01:27,840 --> 00:01:32,159
future so this is pretty much rowley

00:01:30,210 --> 00:01:34,470
speaking a case study so feel free to

00:01:32,159 --> 00:01:36,240
ask me questions if there's more likely

00:01:34,470 --> 00:01:40,200
to focus on more I can do that too so

00:01:36,240 --> 00:01:43,049
I'm pretty flexible okay so i'll begin

00:01:40,200 --> 00:01:44,939
by talking out what socorro is the

00:01:43,049 --> 00:01:48,060
project is named after a very large

00:01:44,939 --> 00:01:49,380
array its core Oh New Mexico the sort of

00:01:48,060 --> 00:01:51,810
lots of rumors going out because the car

00:01:49,380 --> 00:01:52,979
was also Spanish for help but the

00:01:51,810 --> 00:01:54,270
project really won't give you a lot of

00:01:52,979 --> 00:01:56,579
help it will mostly just catch your

00:01:54,270 --> 00:01:59,909
errors for you and it's really a

00:01:56,579 --> 00:02:01,229
telemetry system you probably most of

00:01:59,909 --> 00:02:04,140
you if you've ever used firefox have

00:02:01,229 --> 00:02:07,020
seen this this is the the mozilla

00:02:04,140 --> 00:02:08,399
crashed reporter it's actually this code

00:02:07,020 --> 00:02:09,869
that lives in the client is part of a

00:02:08,399 --> 00:02:13,060
project called brake pad which was

00:02:09,869 --> 00:02:14,470
started by Google and brake pad is the

00:02:13,060 --> 00:02:15,819
part of the code that is embedded in

00:02:14,470 --> 00:02:18,280
whatever client is that you're trying to

00:02:15,819 --> 00:02:20,980
instrument so Firefox uses it chrome

00:02:18,280 --> 00:02:24,220
uses it a bunch of other things use it

00:02:20,980 --> 00:02:25,569
and most of those projects have

00:02:24,220 --> 00:02:27,700
different backends they used to catch

00:02:25,569 --> 00:02:30,310
crashes as is the only open source

00:02:27,700 --> 00:02:33,099
backend for catching crashes and it

00:02:30,310 --> 00:02:35,560
looks like this if you want to look at

00:02:33,099 --> 00:02:38,950
this if you have network it's crash

00:02:35,560 --> 00:02:40,450
hyphen stats at mozilla com and you can

00:02:38,950 --> 00:02:42,340
click through the various reports we do

00:02:40,450 --> 00:02:44,769
a lot of aggregate reporting on things

00:02:42,340 --> 00:02:47,560
like the crash rates so what you see

00:02:44,769 --> 00:02:48,940
there is a crashes per 100 actually

00:02:47,560 --> 00:02:50,019
stills as active daily users but

00:02:48,940 --> 00:02:53,410
technically it's active daily

00:02:50,019 --> 00:02:54,780
installations you can also see probably

00:02:53,410 --> 00:02:56,739
that the main tool that we use for

00:02:54,780 --> 00:02:59,950
prioritization is a single the top

00:02:56,739 --> 00:03:02,230
crashes so we take the crashes that come

00:02:59,950 --> 00:03:03,010
in and we buck at them and that is

00:03:02,230 --> 00:03:04,750
really an important tool for

00:03:03,010 --> 00:03:05,650
prioritization right because if you see

00:03:04,750 --> 00:03:07,959
that there's something that's affecting

00:03:05,650 --> 00:03:09,430
a really large number of Firefox uses

00:03:07,959 --> 00:03:11,560
those are the bugs that you're going to

00:03:09,430 --> 00:03:12,640
focus on fixing first and there's a

00:03:11,560 --> 00:03:14,650
whole team that looks at this every day

00:03:12,640 --> 00:03:16,810
and firefox engineers look at every day

00:03:14,650 --> 00:03:18,070
to use it to prioritize their tasks so

00:03:16,810 --> 00:03:20,049
if you ever get that crash reporting

00:03:18,070 --> 00:03:21,640
dial I can think well why should I

00:03:20,049 --> 00:03:23,019
submit this because nobody cares that's

00:03:21,640 --> 00:03:27,010
actually not true at all we really do

00:03:23,019 --> 00:03:28,510
care you have an option to add comments

00:03:27,010 --> 00:03:29,829
and your email address and if you send

00:03:28,510 --> 00:03:31,090
us your email address we're pretty good

00:03:29,829 --> 00:03:32,829
chance somebody will actually email you

00:03:31,090 --> 00:03:35,170
and ask questions or give some advice on

00:03:32,829 --> 00:03:37,209
how to avoid the crash we do things like

00:03:35,170 --> 00:03:39,609
as soon as we do mass mailings we did

00:03:37,209 --> 00:03:40,660
one to a group of people said hey the

00:03:39,609 --> 00:03:42,100
reason that you're having this crashes

00:03:40,660 --> 00:03:44,709
but you have some Russian malware and

00:03:42,100 --> 00:03:46,900
says he can get rid of it so we will do

00:03:44,709 --> 00:03:49,060
things like that and if you write

00:03:46,900 --> 00:03:51,190
comments I will read them because so few

00:03:49,060 --> 00:03:52,359
people do I would say that most of the

00:03:51,190 --> 00:03:53,889
crash comments some people will say you

00:03:52,359 --> 00:03:55,989
know I was just trying to play farmville

00:03:53,889 --> 00:04:03,130
or whatever but I'm a lot of them are

00:03:55,989 --> 00:04:05,519
tend to be fairly obscene ok so the

00:04:03,130 --> 00:04:07,720
kinds of things that we try to answer

00:04:05,519 --> 00:04:09,280
what are the most common crashes for a

00:04:07,720 --> 00:04:10,239
particular product there's a bunch of

00:04:09,280 --> 00:04:12,489
different products that this is hooked

00:04:10,239 --> 00:04:14,560
up to so it sucked up to Firefox hooked

00:04:12,489 --> 00:04:17,109
up the Thunderbird to Firefox OS which

00:04:14,560 --> 00:04:18,519
is internally we call it boot to gecko

00:04:17,109 --> 00:04:19,870
which you've probably seen some meteor

00:04:18,519 --> 00:04:23,229
about this week because we just launched

00:04:19,870 --> 00:04:24,310
it and we also provide hosting for

00:04:23,229 --> 00:04:25,840
crashes to a couple of community

00:04:24,310 --> 00:04:31,389
products camino

00:04:25,840 --> 00:04:33,280
seamonkey we also bucket them by version

00:04:31,389 --> 00:04:35,800
and by channel so we have four channels

00:04:33,280 --> 00:04:37,360
our nightly Aurora beta and release

00:04:35,800 --> 00:04:38,740
channels actually we have kind of a

00:04:37,360 --> 00:04:41,650
fifth one which is the extent support

00:04:38,740 --> 00:04:43,570
releases so we can look at it that way

00:04:41,650 --> 00:04:44,860
one thing that's typically interesting

00:04:43,570 --> 00:04:46,840
to people is what new crashes and

00:04:44,860 --> 00:04:48,130
regressions do we see emerging and

00:04:46,840 --> 00:04:50,620
looking into the causes of emergent

00:04:48,130 --> 00:04:52,090
crashes so if you have sort of nightly

00:04:50,620 --> 00:04:53,889
bills they tend to be like regressions

00:04:52,090 --> 00:04:56,440
or problems that are introduced by

00:04:53,889 --> 00:04:57,970
people landing new code but um if you

00:04:56,440 --> 00:04:59,169
have released versions and suddenly you

00:04:57,970 --> 00:05:01,690
see a new crash that hasn't been seen

00:04:59,169 --> 00:05:05,080
before that typically happens one of two

00:05:01,690 --> 00:05:07,930
reasons one is that somebody pushed like

00:05:05,080 --> 00:05:10,000
a a new thing to a commonly used website

00:05:07,930 --> 00:05:11,830
like let's say facebook or gmail has

00:05:10,000 --> 00:05:13,090
some new piece of draft JavaScript that

00:05:11,830 --> 00:05:14,710
pushes on a code path that wasn't

00:05:13,090 --> 00:05:16,510
getting pushed on before and the other

00:05:14,710 --> 00:05:20,350
one is actually malware opposite of

00:05:16,510 --> 00:05:21,700
plug-in interactions we can see the

00:05:20,350 --> 00:05:22,660
crash enos of one build compared to

00:05:21,700 --> 00:05:24,250
another and this is actually used to

00:05:22,660 --> 00:05:26,139
make shipping decisions so when we

00:05:24,250 --> 00:05:27,970
shipped Firefox for Android / 16 other

00:05:26,139 --> 00:05:29,740
products in there they decided they

00:05:27,970 --> 00:05:31,570
wouldn't ship until it was less than

00:05:29,740 --> 00:05:35,919
five crashes per average daily active

00:05:31,570 --> 00:05:37,450
daily installation we look at the

00:05:35,919 --> 00:05:41,260
correlations with a particular crash and

00:05:37,450 --> 00:05:42,610
that things like what dynamic modules

00:05:41,260 --> 00:05:44,200
were loaded in memory at the time of the

00:05:42,610 --> 00:05:46,419
crash are those particular correlations

00:05:44,200 --> 00:05:47,770
are there particular plugins that people

00:05:46,419 --> 00:05:49,419
have that seem crashy so we see that

00:05:47,770 --> 00:05:50,500
with this crash one hundred percent of

00:05:49,419 --> 00:05:51,669
people had this crash had the scribe

00:05:50,500 --> 00:05:53,710
toolbar installed would be a good

00:05:51,669 --> 00:05:55,539
example and those things really help you

00:05:53,710 --> 00:05:58,960
to get to a root cause and steps to

00:05:55,539 --> 00:06:00,430
reproduce for a particular bug okay so

00:05:58,960 --> 00:06:03,130
that was the common use case of some of

00:06:00,430 --> 00:06:04,630
the other things that we do we have some

00:06:03,130 --> 00:06:07,300
what are called null signature crashes

00:06:04,630 --> 00:06:09,130
if you have a crash that is caused by an

00:06:07,300 --> 00:06:12,580
out of memory error it is actually very

00:06:09,130 --> 00:06:14,889
hard to generate a meaningful set of

00:06:12,580 --> 00:06:16,840
data because the memory on your machine

00:06:14,889 --> 00:06:18,310
is so messed up at its have sort of do

00:06:16,840 --> 00:06:19,539
something meaningful with it and when we

00:06:18,310 --> 00:06:22,180
get those it tends to be like a giant

00:06:19,539 --> 00:06:23,729
blob of garbage and we can't sort of

00:06:22,180 --> 00:06:26,680
generate anything interesting about it

00:06:23,729 --> 00:06:28,270
but what we can do is say does one build

00:06:26,680 --> 00:06:29,590
have more of these types of crashes of

00:06:28,270 --> 00:06:30,849
another which tells you a little bit

00:06:29,590 --> 00:06:32,320
whether a particular build is

00:06:30,849 --> 00:06:33,729
susceptible more simple to out of memory

00:06:32,320 --> 00:06:36,099
crashes or whether we introduced any new

00:06:33,729 --> 00:06:38,110
ones make it look the differences

00:06:36,099 --> 00:06:38,360
between different flash versions which

00:06:38,110 --> 00:06:40,370
one

00:06:38,360 --> 00:06:41,539
crash here than another detecting

00:06:40,370 --> 00:06:43,639
duplicates we have a little bit of

00:06:41,539 --> 00:06:45,349
jitter I think like almost any kind of

00:06:43,639 --> 00:06:47,330
fire hose or telemetry system we have a

00:06:45,349 --> 00:06:50,419
lot of data coming at you we get some

00:06:47,330 --> 00:06:52,520
duplicates and one of the things that's

00:06:50,419 --> 00:06:54,409
interesting to know is we we we actually

00:06:52,520 --> 00:06:57,289
intentionally not keep user information

00:06:54,409 --> 00:07:00,590
so we don't know your IP we don't know

00:06:57,289 --> 00:07:02,900
your locale we do that to protect

00:07:00,590 --> 00:07:05,479
people's privacy and that means that

00:07:02,900 --> 00:07:07,370
finding duplicate crashes is harder but

00:07:05,479 --> 00:07:11,180
we can use a little bit of an entropy in

00:07:07,370 --> 00:07:12,680
the crash to kind of say these two

00:07:11,180 --> 00:07:14,300
crashes came from an installation that

00:07:12,680 --> 00:07:15,860
was it still installed at exactly the

00:07:14,300 --> 00:07:17,210
same date and time and had the same

00:07:15,860 --> 00:07:19,069
amount of time since the crash occurred

00:07:17,210 --> 00:07:20,240
and had the same signature right so we

00:07:19,069 --> 00:07:24,379
can we can use entropy to figure that

00:07:20,240 --> 00:07:26,060
out we do detection of explosive crashes

00:07:24,379 --> 00:07:29,590
which is either things that have newly

00:07:26,060 --> 00:07:31,639
emerged as one of our top crashes or

00:07:29,590 --> 00:07:33,199
things that have been ticking along as

00:07:31,639 --> 00:07:35,930
like say the number 200 crash for a

00:07:33,199 --> 00:07:37,039
while and suddenly number five we want

00:07:35,930 --> 00:07:39,770
to notice those and tell people about

00:07:37,039 --> 00:07:41,060
them we did some work looking for Frank

00:07:39,770 --> 00:07:43,759
and installs it turned out that we had a

00:07:41,060 --> 00:07:46,940
stability problem where when Firefox

00:07:43,759 --> 00:07:48,589
updated on Windows not all of the dll's

00:07:46,940 --> 00:07:51,440
are getting updated so you had sort of a

00:07:48,589 --> 00:07:52,430
partially updated installation and as

00:07:51,440 --> 00:07:54,440
you can probably majan those really

00:07:52,430 --> 00:07:57,080
unstable but we could detect that by

00:07:54,440 --> 00:07:59,419
looking at the the hashes on the dll's

00:07:57,080 --> 00:08:01,250
that people had in memory at a time one

00:07:59,419 --> 00:08:02,389
thing we've done recently is analysis of

00:08:01,250 --> 00:08:03,979
exploitable crashes we have an

00:08:02,389 --> 00:08:06,699
exploitability tool that we can run over

00:08:03,979 --> 00:08:08,960
mmm the crash data which will tell you

00:08:06,699 --> 00:08:11,569
this looks like a crash that could be

00:08:08,960 --> 00:08:13,819
easily exploited or this one's pretty

00:08:11,569 --> 00:08:15,020
safe and we do a lot of ad hoc reporting

00:08:13,819 --> 00:08:17,839
for tracking down what we call chem

00:08:15,020 --> 00:08:19,099
spill bugs a chem still at Mozilla is

00:08:17,839 --> 00:08:20,930
like a fire drill at other companies

00:08:19,099 --> 00:08:22,580
we've started column this means you know

00:08:20,930 --> 00:08:23,990
something where there's a big disaster

00:08:22,580 --> 00:08:25,219
with a crash and drop everything and

00:08:23,990 --> 00:08:26,509
work on it it's called the kempsville

00:08:25,219 --> 00:08:27,830
rather than a fire drill because the

00:08:26,509 --> 00:08:29,900
fire drill is just practice right and I

00:08:27,830 --> 00:08:33,050
can spill something is actually wrong so

00:08:29,900 --> 00:08:34,039
that's why ok so you give me like you're

00:08:33,050 --> 00:08:39,019
the kind of numbers that I'm talking

00:08:34,039 --> 00:08:40,940
about so I come from a sort of generic

00:08:39,019 --> 00:08:42,320
web development background and use doing

00:08:40,940 --> 00:08:43,579
the thing where you scale to millions of

00:08:42,320 --> 00:08:46,790
users without sort of degradation of

00:08:43,579 --> 00:08:48,200
response time and this is like 100 users

00:08:46,790 --> 00:08:50,000
and a really large amount of data

00:08:48,200 --> 00:08:53,180
it's got a different dimension of

00:08:50,000 --> 00:08:54,680
scaling mmm but um the basic law still

00:08:53,180 --> 00:08:57,790
applies which is the big you are when

00:08:54,680 --> 00:09:02,420
you fail you fail in really bad ways um

00:08:57,790 --> 00:09:05,150
okay so in terms of scale at peak which

00:09:02,420 --> 00:09:06,950
tends to be when Europe is still awake

00:09:05,150 --> 00:09:09,080
and the west coast the United States

00:09:06,950 --> 00:09:11,690
wakes up and east coast is online we get

00:09:09,080 --> 00:09:13,520
up to 3,000 crashes a minute it's around

00:09:11,690 --> 00:09:16,580
3 million a day we expect a forty

00:09:13,520 --> 00:09:17,630
percent increase in that this year and

00:09:16,580 --> 00:09:19,120
the reasons that is because we just

00:09:17,630 --> 00:09:21,140
started sipping shipping cell phones

00:09:19,120 --> 00:09:23,570
which is a little bit terrifying but

00:09:21,140 --> 00:09:27,310
we'll see the median crash sighs so a

00:09:23,570 --> 00:09:30,950
crash is not a small thing right its

00:09:27,310 --> 00:09:33,650
median sized for desktop stuff is 150 k

00:09:30,950 --> 00:09:35,690
Android crashes around 200 k because

00:09:33,650 --> 00:09:36,830
Java makes them bigger firefox OS

00:09:35,690 --> 00:09:39,590
crashes a little bit bigger again I

00:09:36,830 --> 00:09:41,960
don't really know why that is yet we

00:09:39,590 --> 00:09:44,090
store metadata and processed stuff in

00:09:41,960 --> 00:09:48,440
Postgres it's about point eight of a

00:09:44,090 --> 00:09:49,760
terabyte in HBase we have around one

00:09:48,440 --> 00:09:52,160
hundred and ten terabytes under storage

00:09:49,760 --> 00:09:53,870
but it's actually only about 40

00:09:52,160 --> 00:09:59,390
terabytes of data because of some

00:09:53,870 --> 00:10:01,700
replication factor is three this has a

00:09:59,390 --> 00:10:05,360
pretty solid expiry policy and I worked

00:10:01,700 --> 00:10:07,340
out you know this gets deleted sort of

00:10:05,360 --> 00:10:09,050
Ages out at six months so we're

00:10:07,340 --> 00:10:12,470
recording a really large amount of data

00:10:09,050 --> 00:10:14,480
in a year I do a blog post just recently

00:10:12,470 --> 00:10:17,890
I figured out that we do process a

00:10:14,480 --> 00:10:21,440
billion crashes easier so okay

00:10:17,890 --> 00:10:23,570
implementation scale of it I sit around

00:10:21,440 --> 00:10:24,710
little over 100 20 physical boxes it

00:10:23,570 --> 00:10:27,590
goes up and down depending on what we're

00:10:24,710 --> 00:10:30,470
doing it's not in the cloud it's in a

00:10:27,590 --> 00:10:32,420
data center people that deal with HBase

00:10:30,470 --> 00:10:34,040
know that it's I think it's getting

00:10:32,420 --> 00:10:35,810
easier now but at the time we started

00:10:34,040 --> 00:10:39,710
with HBase it wasn't very realistic to

00:10:35,810 --> 00:10:41,690
do it on on cloud stuff so it'll live in

00:10:39,710 --> 00:10:44,750
a data center in Phoenix we have around

00:10:41,690 --> 00:10:47,510
10 developers we started with one we

00:10:44,750 --> 00:10:50,030
have DBA 0 SS admin team we have a fifth

00:10:47,510 --> 00:10:54,560
of a QA person and access to due process

00:10:50,030 --> 00:10:56,000
of people right now we deploy one to two

00:10:54,560 --> 00:10:57,650
times a week but we're hoping to go to

00:10:56,000 --> 00:10:58,760
continuous deployment actually I slept

00:10:57,650 --> 00:10:59,980
in the next month I'm kind of hoping it

00:10:58,760 --> 00:11:03,250
will be like next week of the way

00:10:59,980 --> 00:11:06,760
after so that's kind of where we are any

00:11:03,250 --> 00:11:07,810
questions last far okay so that's the

00:11:06,760 --> 00:11:11,260
big picture let me talk about how it

00:11:07,810 --> 00:11:12,760
works there's this great diagram we had

00:11:11,260 --> 00:11:15,430
a contributor that used to work on our

00:11:12,760 --> 00:11:16,630
project who was a graphic designer and I

00:11:15,430 --> 00:11:18,160
explained to me the system worked and

00:11:16,630 --> 00:11:19,780
this is the diagram he drew which is

00:11:18,160 --> 00:11:23,220
terrifyingly complex i think it is

00:11:19,780 --> 00:11:25,180
actually slightly dated now but it is

00:11:23,220 --> 00:11:28,390
representative of the complexity of the

00:11:25,180 --> 00:11:30,880
system these diagrams donated by a guy

00:11:28,390 --> 00:11:32,470
called mark ions who actually died quite

00:11:30,880 --> 00:11:36,210
recently of cystic fibrosis I want to

00:11:32,470 --> 00:11:40,630
acknowledge his contributions okay so

00:11:36,210 --> 00:11:43,180
having looked at that diagram I said to

00:11:40,630 --> 00:11:44,560
one of my co-workers last score really

00:11:43,180 --> 00:11:45,580
has a lot of moving parts and he said

00:11:44,560 --> 00:11:49,450
well I prefer to think of them as

00:11:45,580 --> 00:11:50,380
dancing pads okay so I'm going to try

00:11:49,450 --> 00:11:52,720
and make that diagram a little bit

00:11:50,380 --> 00:11:53,920
simpler for you as we go through I'm

00:11:52,720 --> 00:12:01,060
going to talk you through the lifetime

00:11:53,920 --> 00:12:02,890
of a crash so um Firefox crashes the

00:12:01,060 --> 00:12:05,170
built-in brake pad client packages up

00:12:02,890 --> 00:12:08,110
the crash I shall go the next time and

00:12:05,170 --> 00:12:11,380
it submits two files one of them is

00:12:08,110 --> 00:12:12,550
Jason metadata and one of them mm it's

00:12:11,380 --> 00:12:14,080
what's called a mini dump if you're

00:12:12,550 --> 00:12:17,380
familiar with a quarter mini dump is

00:12:14,080 --> 00:12:20,170
like a caught up only smaller the format

00:12:17,380 --> 00:12:21,310
is actually developed by Microsoft and

00:12:20,170 --> 00:12:23,350
you know it so basically it's a binary

00:12:21,310 --> 00:12:25,120
blob this is sort of the one of the

00:12:23,350 --> 00:12:27,510
complexities in the system to not that

00:12:25,120 --> 00:12:30,340
it does a lot of transactions but that

00:12:27,510 --> 00:12:32,200
the day that we're collecting is binary

00:12:30,340 --> 00:12:34,000
and that sort of makes lots of things

00:12:32,200 --> 00:12:35,830
not work as well as they might like it

00:12:34,000 --> 00:12:37,390
requires sort of special thinking

00:12:35,830 --> 00:12:39,700
there's been various iterations of the

00:12:37,390 --> 00:12:41,200
system for what to do with these blobs

00:12:39,700 --> 00:12:43,330
at the very first iteration they were

00:12:41,200 --> 00:12:46,180
going into postgres which at that time

00:12:43,330 --> 00:12:48,160
was not a good idea then we were just

00:12:46,180 --> 00:12:49,300
shoving them to NFS which was kind of

00:12:48,160 --> 00:12:52,120
okay but then you can't do anything

00:12:49,300 --> 00:12:55,110
analytic with them so we moved to hbase

00:12:52,120 --> 00:12:57,130
so those pressures come in via HTTP POST

00:12:55,110 --> 00:13:02,020
they are collected to disk by the

00:12:57,130 --> 00:13:04,330
collector the collector here this is all

00:13:02,020 --> 00:13:08,200
one physical machine stopping the

00:13:04,330 --> 00:13:11,530
collector here is Python app uses web pi

00:13:08,200 --> 00:13:12,940
runs via mod whiskey on apache and the

00:13:11,530 --> 00:13:13,580
clay it's really simple it's like 40

00:13:12,940 --> 00:13:15,230
lines of code

00:13:13,580 --> 00:13:19,370
it just takes in the files and write

00:13:15,230 --> 00:13:20,930
some to disk it has a uses a radix file

00:13:19,370 --> 00:13:23,260
system organization system so that

00:13:20,930 --> 00:13:27,130
things get allocated according to the

00:13:23,260 --> 00:13:30,770
month day hour minute that they came in

00:13:27,130 --> 00:13:32,090
from the file system we have another

00:13:30,770 --> 00:13:33,620
process called a crash mover which

00:13:32,090 --> 00:13:35,510
basically except crashes and shoves them

00:13:33,620 --> 00:13:39,260
into HBase now if you're looking at this

00:13:35,510 --> 00:13:41,060
diagram you are probably thinking is

00:13:39,260 --> 00:13:43,640
that you yes it is it is actually like

00:13:41,060 --> 00:13:44,810
sort of a really really terrible excuse

00:13:43,640 --> 00:13:47,330
for a queue because we show them in the

00:13:44,810 --> 00:13:49,190
file system there's been a lot of work

00:13:47,330 --> 00:13:51,230
on the project about replacing it with

00:13:49,190 --> 00:13:52,490
something better unfortunately is a

00:13:51,230 --> 00:13:58,460
source of great bike shedding and this

00:13:52,490 --> 00:14:01,700
actually works kind of well okay so once

00:13:58,460 --> 00:14:03,410
it gets into HBase there is a process

00:14:01,700 --> 00:14:05,900
called the monitor that looks for

00:14:03,410 --> 00:14:07,400
crashes coming into HBase and when it

00:14:05,900 --> 00:14:09,500
sees that they have come in it assigns

00:14:07,400 --> 00:14:12,260
them for processing we have a set of

00:14:09,500 --> 00:14:13,910
processes that pick up a process pick up

00:14:12,260 --> 00:14:17,480
us crash from each base and do a bunch

00:14:13,910 --> 00:14:19,340
of things to it the most important thing

00:14:17,480 --> 00:14:21,440
that they do is they spawn off a process

00:14:19,340 --> 00:14:24,590
called mini dump stack walk which takes

00:14:21,440 --> 00:14:26,720
the mini dump blog and talks to a symbol

00:14:24,590 --> 00:14:28,310
server and reunites the crash with its

00:14:26,720 --> 00:14:31,970
symbols and generates a stack trace

00:14:28,310 --> 00:14:34,970
alright that sort of enables most of the

00:14:31,970 --> 00:14:37,220
other things that we do using that stack

00:14:34,970 --> 00:14:40,040
trace we generate what is called a crash

00:14:37,220 --> 00:14:41,780
signature so the classic crash signature

00:14:40,040 --> 00:14:43,910
is just the name of the function in

00:14:41,780 --> 00:14:45,650
which you crashed right and sometimes

00:14:43,910 --> 00:14:48,560
that's useful enough other times it's

00:14:45,650 --> 00:14:51,860
not very useful if you crashed in je

00:14:48,560 --> 00:14:53,150
melech not useful at all like you so you

00:14:51,860 --> 00:14:53,960
crash when you're assigning memory but

00:14:53,150 --> 00:14:55,130
you're not really interested in that

00:14:53,960 --> 00:14:57,350
you're interested in what you were doing

00:14:55,130 --> 00:14:59,000
when you're assigning that memory so we

00:14:57,350 --> 00:15:00,920
have some configuration stuff called the

00:14:59,000 --> 00:15:02,630
Skip list which is basically a set of

00:15:00,920 --> 00:15:04,400
regular expressions that says these

00:15:02,630 --> 00:15:08,930
functions are not interesting so skips

00:15:04,400 --> 00:15:10,100
the next thing in the stack okay from

00:15:08,930 --> 00:15:12,470
there the processor can do a bunch of

00:15:10,100 --> 00:15:14,480
other things the main thing that it does

00:15:12,470 --> 00:15:17,870
is it writes processed crash information

00:15:14,480 --> 00:15:20,150
metadata into postgres and the full

00:15:17,870 --> 00:15:22,510
process crashed back into HBase and it

00:15:20,150 --> 00:15:25,150
is now also writing

00:15:22,510 --> 00:15:27,210
indexing information to elasticsearch I

00:15:25,150 --> 00:15:29,950
think that's in the keynote yesterday

00:15:27,210 --> 00:15:31,360
every project has more than one data

00:15:29,950 --> 00:15:33,970
store this project actually has four

00:15:31,360 --> 00:15:36,190
right now because there's no cash in the

00:15:33,970 --> 00:15:49,600
front end as well any questions about

00:15:36,190 --> 00:15:51,100
that so far yep sorry yes we do so

00:15:49,600 --> 00:15:52,570
they're not 20 megabytes on average i

00:15:51,100 --> 00:15:54,520
should say they're about a hundred and

00:15:52,570 --> 00:15:57,790
fifty k on average 20 megabytes of the

00:15:54,520 --> 00:15:59,440
outlier we actually have an hour apache

00:15:57,790 --> 00:16:01,300
config to cut them off at 20 megabytes

00:15:59,440 --> 00:16:02,560
because usually there's a handful that

00:16:01,300 --> 00:16:04,030
are bigger than that and they can be

00:16:02,560 --> 00:16:07,380
really really really big like they can

00:16:04,030 --> 00:16:09,970
be gigabytes it'll it'll tie up a client

00:16:07,380 --> 00:16:11,170
it makes people angry because it ties up

00:16:09,970 --> 00:16:14,230
their internet connection especially if

00:16:11,170 --> 00:16:16,090
they're on a phone and those crashes are

00:16:14,230 --> 00:16:17,500
always worthless because we get a crash

00:16:16,090 --> 00:16:18,970
in its 20 gigabytes it's always an out

00:16:17,500 --> 00:16:28,960
of memory cache like it's just garbage

00:16:18,970 --> 00:16:32,530
so okay any other questions yep waves

00:16:28,960 --> 00:16:37,060
postgres so the reason that we do it is

00:16:32,530 --> 00:16:38,770
we do a lot of a sort of random access

00:16:37,060 --> 00:16:44,920
to data and we do a lot of aggregate

00:16:38,770 --> 00:16:46,240
reporting and we have a few things that

00:16:44,920 --> 00:16:48,130
use MapReduce but a lot of those things

00:16:46,240 --> 00:16:50,740
are really simple to do with sequel and

00:16:48,130 --> 00:16:52,720
quick to do a sequel and that's why if

00:16:50,740 --> 00:16:54,280
you think of pro squares in this model

00:16:52,720 --> 00:16:59,010
as being like the world's largest web

00:16:54,280 --> 00:17:02,010
app cache you want me to Farrell okay

00:16:59,010 --> 00:17:02,010
question

00:17:09,600 --> 00:17:16,210
so elastic search is um basically a fork

00:17:13,870 --> 00:17:18,610
of leucine and the reason that we do

00:17:16,210 --> 00:17:20,350
that is that some of the there are

00:17:18,610 --> 00:17:21,610
sometimes we're sort of experimenting

00:17:20,350 --> 00:17:22,810
with it at the moment I'm actually hope

00:17:21,610 --> 00:17:25,590
will ship in two weeks but it's been

00:17:22,810 --> 00:17:28,060
sort of an ongoing experiment there are

00:17:25,590 --> 00:17:29,920
things that searches that people would

00:17:28,060 --> 00:17:32,230
like to do that I had to do against post

00:17:29,920 --> 00:17:35,920
gross for example we don't store in

00:17:32,230 --> 00:17:38,050
Postgres all of the stack frames because

00:17:35,920 --> 00:17:40,480
it can be a lot and it's sort of not

00:17:38,050 --> 00:17:41,980
terribly relational data we're probably

00:17:40,480 --> 00:17:44,200
could but this seemed like a good idea

00:17:41,980 --> 00:17:46,750
at the time and sometimes people want to

00:17:44,200 --> 00:17:48,730
ask questions like give me all the

00:17:46,750 --> 00:17:54,270
crashes where this method appears

00:17:48,730 --> 00:17:56,710
anywhere in the stack and where this

00:17:54,270 --> 00:17:58,630
method appears as the third frame on the

00:17:56,710 --> 00:18:00,040
stack yeah things that are like really

00:17:58,630 --> 00:18:01,510
expensive to in sequel you could do them

00:18:00,040 --> 00:18:03,670
with MapReduce but it's really faster

00:18:01,510 --> 00:18:05,380
than elasticsearch so it's sort of a way

00:18:03,670 --> 00:18:07,330
of doing real-time reporting and I know

00:18:05,380 --> 00:18:09,190
that there are more and more real-time

00:18:07,330 --> 00:18:13,870
tools on top of HBase this is kind of

00:18:09,190 --> 00:18:19,870
our attack on this yep yep first rounds

00:18:13,870 --> 00:18:21,340
are gettin okay so um I think I've

00:18:19,870 --> 00:18:22,510
talked about all of that it's mostly if

00:18:21,340 --> 00:18:23,760
you're reading a slide later and trying

00:18:22,510 --> 00:18:29,020
to work out what I was talking about

00:18:23,760 --> 00:18:32,940
okay the reporting side of things so we

00:18:29,020 --> 00:18:32,940
have a really laughs number of chron

00:18:33,090 --> 00:18:37,600
that do a little really important things

00:18:35,110 --> 00:18:39,970
which I'll talk about in a minute we

00:18:37,600 --> 00:18:41,260
have the three data sources HBase first

00:18:39,970 --> 00:18:43,030
for an elastic search in front of those

00:18:41,260 --> 00:18:44,980
we have an API which we call middleware

00:18:43,030 --> 00:18:47,650
it's not really middleware it's just a

00:18:44,980 --> 00:18:50,740
rusty and API but the purpose of that is

00:18:47,650 --> 00:18:52,450
to isolate the source of the data from

00:18:50,740 --> 00:18:53,590
the end user because if you're writing a

00:18:52,450 --> 00:18:54,790
web app you don't really care whether a

00:18:53,590 --> 00:18:58,090
particular piece of data is stored an

00:18:54,790 --> 00:18:59,350
elastic search post cruiser HBase you

00:18:58,090 --> 00:19:03,190
shouldn't have to care so it's all

00:18:59,350 --> 00:19:05,950
encapsulated the web app we are

00:19:03,190 --> 00:19:08,020
replacing an all PHP web app with a

00:19:05,950 --> 00:19:09,580
django web app actually running a two

00:19:08,020 --> 00:19:11,560
and parallel right now until we get sign

00:19:09,580 --> 00:19:13,480
off on that on the Django one and that

00:19:11,560 --> 00:19:13,970
uses memcache that's kind of the front

00:19:13,480 --> 00:19:16,820
end I could

00:19:13,970 --> 00:19:17,990
picture any questions on that I think

00:19:16,820 --> 00:19:21,980
have a couple points on my slides so

00:19:17,990 --> 00:19:25,100
cron jobs the kinds of things cron jobs

00:19:21,980 --> 00:19:28,520
do is copy interesting data into fact

00:19:25,100 --> 00:19:29,480
tables rather than sort of like tables

00:19:28,520 --> 00:19:33,380
that are full of everything that comes

00:19:29,480 --> 00:19:35,540
in we get active daily user /

00:19:33,380 --> 00:19:39,830
installations from an external database

00:19:35,540 --> 00:19:41,450
directly vertica the number of active

00:19:39,830 --> 00:19:44,050
daily installations which we use for a

00:19:41,450 --> 00:19:46,070
lot of like important stuff right like

00:19:44,050 --> 00:19:48,710
how many users are affected by this

00:19:46,070 --> 00:19:51,650
crash and so on that information

00:19:48,710 --> 00:19:53,120
actually comes from Firefox blocklist

00:19:51,650 --> 00:19:55,790
pings there's a thing called the block

00:19:53,120 --> 00:19:57,590
list once day of Firefox calls home and

00:19:55,790 --> 00:20:00,620
says are there any plugins that I

00:19:57,590 --> 00:20:01,790
shouldn't use and we say yes you

00:20:00,620 --> 00:20:03,650
shouldn't use any of these versions of

00:20:01,790 --> 00:20:06,770
flack splash is usually the common

00:20:03,650 --> 00:20:08,480
example but counting those pings is how

00:20:06,770 --> 00:20:12,190
we count active daily installations

00:20:08,480 --> 00:20:15,290
basically so those coming from vertigo

00:20:12,190 --> 00:20:17,420
we do a bunch of calculation we do that

00:20:15,290 --> 00:20:19,760
crashes by signature as a daily cron job

00:20:17,420 --> 00:20:22,340
it's really like old school but it works

00:20:19,760 --> 00:20:23,960
really well we used to run it hourly and

00:20:22,340 --> 00:20:25,880
I use this whole this they didn't need

00:20:23,960 --> 00:20:28,400
it hourly so we skipped it back to daily

00:20:25,880 --> 00:20:29,450
I think that one thing I anticipate

00:20:28,400 --> 00:20:30,980
during the next year is actually going

00:20:29,450 --> 00:20:35,780
to make that real time and i'll talk

00:20:30,980 --> 00:20:39,770
about why a little bit later we have to

00:20:35,780 --> 00:20:41,900
notice bills on the ftp server this is

00:20:39,770 --> 00:20:43,370
horrible probably way of doing this but

00:20:41,900 --> 00:20:44,750
right now release engineering has no

00:20:43,370 --> 00:20:46,130
work good way of communicating to us

00:20:44,750 --> 00:20:47,690
when a builder's ready or what it's

00:20:46,130 --> 00:20:51,740
build ideas or anything like that so we

00:20:47,690 --> 00:20:54,110
we scrape ftp we match known crashes to

00:20:51,740 --> 00:20:55,940
bugzilla bugs so in bugzilla there's

00:20:54,110 --> 00:20:58,100
actually a signature feel that contains

00:20:55,940 --> 00:20:59,810
the signature crash and we have a cron

00:20:58,100 --> 00:21:01,070
job that looks at bugzilla and match and

00:20:59,810 --> 00:21:02,060
matches up the bugs of the crashes you

00:21:01,070 --> 00:21:04,700
might've seen that in the original table

00:21:02,060 --> 00:21:06,230
the reason for that is so if I am doing

00:21:04,700 --> 00:21:08,360
triage we're looking at crashes I can

00:21:06,230 --> 00:21:10,040
say okay all of these crashes have known

00:21:08,360 --> 00:21:11,300
bugs that one doesn't have a bug

00:21:10,040 --> 00:21:12,500
associated with it's the first thing I

00:21:11,300 --> 00:21:15,200
need to do is to file a bug for this

00:21:12,500 --> 00:21:16,970
crash and is actually a link that you

00:21:15,200 --> 00:21:19,190
can click on that will start filing out

00:21:16,970 --> 00:21:21,260
automatically we do duplicate detection

00:21:19,190 --> 00:21:25,520
and one of the things we do that's kind

00:21:21,260 --> 00:21:27,480
of funny this is very Mozilla is to dump

00:21:25,520 --> 00:21:29,490
a bunch of CSV files which have like a

00:21:27,480 --> 00:21:31,350
summary of today's crashes and then

00:21:29,490 --> 00:21:33,990
engineers will take that and do stuff

00:21:31,350 --> 00:21:35,910
with it like they'll shut the shove it

00:21:33,990 --> 00:21:37,800
into couch and do some analytics or they

00:21:35,910 --> 00:21:41,760
will have like a collection of very

00:21:37,800 --> 00:21:44,280
small tickle scripts or whatever this is

00:21:41,760 --> 00:21:45,630
very modular it's very Antarctic and the

00:21:44,280 --> 00:21:46,860
classic thing that happens is somebody

00:21:45,630 --> 00:21:48,180
people will play with this analysis play

00:21:46,860 --> 00:21:49,380
with his analysis players analysis not

00:21:48,180 --> 00:21:51,180
going to go hey I've got this really

00:21:49,380 --> 00:21:54,000
good idea for a report and this is how

00:21:51,180 --> 00:21:57,120
you do it in couch and we will turn that

00:21:54,000 --> 00:22:01,220
into a MapReduce job or a postgres query

00:21:57,120 --> 00:22:01,220
and implement it in the in the web app

00:22:01,340 --> 00:22:06,960
okay so reasons for putting all of our

00:22:04,110 --> 00:22:08,700
data access through rst an API is also

00:22:06,960 --> 00:22:11,760
to enable people to build other apps

00:22:08,700 --> 00:22:13,470
against our data platform we also did it

00:22:11,760 --> 00:22:16,680
so that we could rewrite the web app

00:22:13,470 --> 00:22:19,620
with minimum pain there's been I'm

00:22:16,680 --> 00:22:20,520
really like anti rewrites I think a lot

00:22:19,620 --> 00:22:21,630
of us are if you've ever written

00:22:20,520 --> 00:22:23,010
something from the ground up you know

00:22:21,630 --> 00:22:25,140
that's horribly painful and takes a long

00:22:23,010 --> 00:22:27,690
time and one of the ways that we made

00:22:25,140 --> 00:22:29,670
this easier was by moving all of the

00:22:27,690 --> 00:22:31,470
data access into this API and then

00:22:29,670 --> 00:22:33,690
rewriting the web app actually only took

00:22:31,470 --> 00:22:36,390
us about three and a half months was

00:22:33,690 --> 00:22:38,160
easy we've been experimenting with off

00:22:36,390 --> 00:22:39,630
and on because there are a lot of

00:22:38,160 --> 00:22:41,160
long-running demons and this like the

00:22:39,630 --> 00:22:43,200
processes the collectors the crash

00:22:41,160 --> 00:22:45,900
movers we've done experiments with

00:22:43,200 --> 00:22:47,790
embedding of his middle we're giving

00:22:45,900 --> 00:22:49,770
each components own API so that if you

00:22:47,790 --> 00:22:51,210
have a long-running demon you can ping

00:22:49,770 --> 00:22:52,530
it and say hey what do you what a lot

00:22:51,210 --> 00:22:54,030
job you're working on what was the last

00:22:52,530 --> 00:22:57,300
thing that you did how long did that

00:22:54,030 --> 00:22:58,560
take what's your general health we don't

00:22:57,300 --> 00:22:59,610
have that in prod right now but I would

00:22:58,560 --> 00:23:04,320
like to put it back because I think it's

00:22:59,610 --> 00:23:06,840
a really useful thing to do okay with

00:23:04,320 --> 00:23:08,580
the web app so some of this data is

00:23:06,840 --> 00:23:09,930
pretty easily to visualize sometimes

00:23:08,580 --> 00:23:11,820
it's really hard to work out how to

00:23:09,930 --> 00:23:16,410
visualize something so one good example

00:23:11,820 --> 00:23:18,270
was that the engineering team came to us

00:23:16,410 --> 00:23:19,920
and said all of your visualizations are

00:23:18,270 --> 00:23:21,150
in clock time like it's crashes per day

00:23:19,920 --> 00:23:22,470
and what happened on this day and what I

00:23:21,150 --> 00:23:25,080
actually want is to have the crashes in

00:23:22,470 --> 00:23:26,970
built I'm like I want to see for each

00:23:25,080 --> 00:23:28,620
build what crashes over this time period

00:23:26,970 --> 00:23:32,520
so it's kind of like adding a fourth

00:23:28,620 --> 00:23:33,810
dimension so that was fairly challenging

00:23:32,520 --> 00:23:35,470
where we did figure it out you can take

00:23:33,810 --> 00:23:38,500
a look

00:23:35,470 --> 00:23:40,030
and we've just rewritten it okay so one

00:23:38,500 --> 00:23:41,799
of the things about this architecture is

00:23:40,030 --> 00:23:43,690
that one of our goals is to have

00:23:41,799 --> 00:23:47,440
components be pluggable and easy to

00:23:43,690 --> 00:23:49,539
switch in and out right all the back end

00:23:47,440 --> 00:23:51,309
components have sort of a simple fetch

00:23:49,539 --> 00:23:55,150
transform and save architecture so you

00:23:51,309 --> 00:23:57,070
can change what the fetch where the

00:23:55,150 --> 00:23:58,240
fetch comes from right so the collector

00:23:57,070 --> 00:23:59,980
has basically the same architecture as

00:23:58,240 --> 00:24:02,799
the processor except the collector

00:23:59,980 --> 00:24:05,830
collects from a post and the processor

00:24:02,799 --> 00:24:08,110
fetches from HBase but you plug in where

00:24:05,830 --> 00:24:10,630
it fetches from the transform is

00:24:08,110 --> 00:24:11,919
pluggable and the right is pluggable to

00:24:10,630 --> 00:24:16,240
any of the storage options that we

00:24:11,919 --> 00:24:18,820
support do you an idea of like what that

00:24:16,240 --> 00:24:20,380
means as an experiment one of the

00:24:18,820 --> 00:24:21,880
backend architecture so that he would

00:24:20,380 --> 00:24:25,390
like to see how small we could scale

00:24:21,880 --> 00:24:27,970
this so he wrote a python signature

00:24:25,390 --> 00:24:30,580
processing and turned on file system

00:24:27,970 --> 00:24:33,250
storage for crashes and has it running

00:24:30,580 --> 00:24:35,200
on a Raspberry Pi he didn't want to run

00:24:33,250 --> 00:24:39,580
HBase on a Raspberry Pi for fairly

00:24:35,200 --> 00:24:40,929
obvious reasons that's kind of cool but

00:24:39,580 --> 00:24:42,400
that's actually a common option there

00:24:40,929 --> 00:24:44,110
are because this is all open source

00:24:42,400 --> 00:24:48,070
there a bunch of open source users of

00:24:44,110 --> 00:24:49,780
the product and a lot of those people

00:24:48,070 --> 00:24:51,520
have a really low volume of crashes like

00:24:49,780 --> 00:24:53,200
they might have tens or hundreds of

00:24:51,520 --> 00:24:54,640
crashes per day and again they don't

00:24:53,200 --> 00:24:57,159
need to deal with Hadoop so they will

00:24:54,640 --> 00:24:58,510
turn on file system storage and it's

00:24:57,159 --> 00:25:00,789
pretty easy to write your own it's well

00:24:58,510 --> 00:25:01,929
documented how to do that give an

00:25:00,789 --> 00:25:06,039
example of some of the people that are

00:25:01,929 --> 00:25:09,640
using this valve uses it so steam is

00:25:06,039 --> 00:25:11,679
instrumented with this Spotify uses it a

00:25:09,640 --> 00:25:12,580
lot of games companies because valve

00:25:11,679 --> 00:25:13,780
went and talked about the games

00:25:12,580 --> 00:25:16,929
developer conference and then it became

00:25:13,780 --> 00:25:20,049
cool a bunch of like mixing desk and

00:25:16,929 --> 00:25:22,000
audio companies and the newest thing is

00:25:20,049 --> 00:25:26,230
casino gaming companies so this is in

00:25:22,000 --> 00:25:27,700
poker machines it's really strange be

00:25:26,230 --> 00:25:29,710
here so there are a bunch of users and

00:25:27,700 --> 00:25:31,150
the fact that is sort of so switchable

00:25:29,710 --> 00:25:34,960
makes it easier for people to configure

00:25:31,150 --> 00:25:37,299
it the way that they want in terms of

00:25:34,960 --> 00:25:40,360
the implementation details it's all

00:25:37,299 --> 00:25:42,070
python 2.6 PHP 5.3 the bit of PHP that's

00:25:40,360 --> 00:25:44,049
going away which in the web app we have

00:25:42,070 --> 00:25:45,820
prosper is 9.2 we use mem cap to the web

00:25:44,049 --> 00:25:46,700
app one of these that causes a lot of

00:25:45,820 --> 00:25:48,500
pain is the

00:25:46,700 --> 00:25:52,250
most of our code is written placing

00:25:48,500 --> 00:25:55,370
these thrift to talk to hbase which is

00:25:52,250 --> 00:25:57,410
painful I would like to change that to

00:25:55,370 --> 00:25:59,180
something else so that's an area of

00:25:57,410 --> 00:26:03,080
experimentation but we are not in a

00:25:59,180 --> 00:26:04,910
position to rewrite a JVM language we

00:26:03,080 --> 00:26:07,670
HBase we use the clutter a distribution

00:26:04,910 --> 00:26:09,170
of HBase version 334 but we are hoping

00:26:07,670 --> 00:26:13,670
to switch to for some time soon because

00:26:09,170 --> 00:26:15,950
i want the h a name nodes there's little

00:26:13,670 --> 00:26:17,660
bits of c++ meeting up stack or for c++

00:26:15,950 --> 00:26:19,640
we have some MapReduce jobs written in

00:26:17,660 --> 00:26:21,110
Java we have some store procedures

00:26:19,640 --> 00:26:24,640
written in perl and the thing that is

00:26:21,110 --> 00:26:26,570
getting more and more use lately is pig

00:26:24,640 --> 00:26:27,860
because you tend to have engineers

00:26:26,570 --> 00:26:29,300
saying what I you know I want more than

00:26:27,860 --> 00:26:31,430
to be able to like run stuff against the

00:26:29,300 --> 00:26:32,630
CSV or query your API and like you use

00:26:31,430 --> 00:26:34,280
pig and they're like I've never heard of

00:26:32,630 --> 00:26:35,600
it you can teach yourself in a day go

00:26:34,280 --> 00:26:38,060
away and come back when you have

00:26:35,600 --> 00:26:40,100
questions it's a really nice tool for

00:26:38,060 --> 00:26:41,630
this people find it really easy to dig

00:26:40,100 --> 00:26:42,560
into the data that they need actually

00:26:41,630 --> 00:26:44,810
funnily enough I think they find it

00:26:42,560 --> 00:26:49,310
easier than learning sequel which is odd

00:26:44,810 --> 00:27:02,500
to me but each to his own so question

00:26:49,310 --> 00:27:06,650
yep June's like the Java I you know the

00:27:02,500 --> 00:27:07,940
client did provided by HBase so not

00:27:06,650 --> 00:27:11,000
recently but it's on my list to do this

00:27:07,940 --> 00:27:12,860
year again we went with thrift I guess

00:27:11,000 --> 00:27:14,540
we've been using it for three years now

00:27:12,860 --> 00:27:16,820
and back then they were not a lot of

00:27:14,540 --> 00:27:18,260
other options now i think that the field

00:27:16,820 --> 00:27:19,490
has expanded so it's a good time to look

00:27:18,260 --> 00:27:21,740
at it's actually something i hope to

00:27:19,490 --> 00:27:24,560
learn a little more about this week ok

00:27:21,740 --> 00:27:26,840
somebody you are running very thinking

00:27:24,560 --> 00:27:29,390
this refugees Randy very well right no

00:27:26,840 --> 00:27:31,520
actually is not it runs like crap let's

00:27:29,390 --> 00:27:33,050
be honest um one of the issues that we

00:27:31,520 --> 00:27:36,680
have had with thrift is monitoring it as

00:27:33,050 --> 00:27:38,510
hard there are two reasons for this so

00:27:36,680 --> 00:27:39,980
we get a lot of thrift errors i would

00:27:38,510 --> 00:27:42,050
say one percent of thrift connections

00:27:39,980 --> 00:27:43,040
end in error which makes it hard to

00:27:42,050 --> 00:27:47,210
monitor because your amount of

00:27:43,040 --> 00:27:48,740
thresholds you can't monitor errors but

00:27:47,210 --> 00:27:52,490
i understand that part of it is because

00:27:48,740 --> 00:27:54,290
though the way that we do connection

00:27:52,490 --> 00:27:56,220
handling is not very friendly to thrift

00:27:54,290 --> 00:27:59,210
like we tend to make it crash

00:27:56,220 --> 00:28:01,169
um so we actually we're rewriting that

00:27:59,210 --> 00:28:03,809
and I would like to move something else

00:28:01,169 --> 00:28:06,600
at some point so what if you have a lot

00:28:03,809 --> 00:28:09,150
of errors how you'll recovery do you oh

00:28:06,600 --> 00:28:11,970
okay so everything that talks to thrift

00:28:09,150 --> 00:28:15,270
has a set number of retries and it uses

00:28:11,970 --> 00:28:16,440
exponential back-off for retries yep try

00:28:15,270 --> 00:28:18,929
it try not to kill it more than

00:28:16,440 --> 00:28:21,510
necessary but we don't do pooling and we

00:28:18,929 --> 00:28:25,830
need to show you the future you have

00:28:21,510 --> 00:28:28,620
anything planned you to rewrite all

00:28:25,830 --> 00:28:29,730
reuse as a software for the client yeah

00:28:28,620 --> 00:28:32,610
so it's just a little library it's

00:28:29,730 --> 00:28:34,470
called HBase clam pie and we would like

00:28:32,610 --> 00:28:36,480
to rewrite that so yes what I mean we're

00:28:34,470 --> 00:28:37,650
rewriting it to be less hard on thrift

00:28:36,480 --> 00:28:38,789
but actually what a mind replacing or

00:28:37,650 --> 00:28:41,130
something other than thrift as well

00:28:38,789 --> 00:28:43,440
again it's pluggable so whatever we use

00:28:41,130 --> 00:28:47,280
should be pretty straightforward yeah

00:28:43,440 --> 00:28:49,440
okay no problem I do not claim that the

00:28:47,280 --> 00:28:50,940
system has a you know it's a big crafty

00:28:49,440 --> 00:28:52,080
system that I'm running for a long time

00:28:50,940 --> 00:28:53,880
and no there are lots of parts of it

00:28:52,080 --> 00:28:55,980
that are far from optimal that's all

00:28:53,880 --> 00:28:59,309
right no it's good it's good news thank

00:28:55,980 --> 00:29:01,080
you okay so I'll talk about a work

00:28:59,309 --> 00:29:03,990
process and tools so one of the things

00:29:01,080 --> 00:29:05,549
to know about the system is that it we

00:29:03,990 --> 00:29:08,100
don't have a specified SLA that it needs

00:29:05,549 --> 00:29:10,470
to be up because the system being down

00:29:08,100 --> 00:29:12,750
blocks shipping Firefox right that's

00:29:10,470 --> 00:29:14,309
what the key thing and tends to make

00:29:12,750 --> 00:29:18,240
like the vp of engineering scream at you

00:29:14,309 --> 00:29:21,210
and stuff so it needs to be up how do we

00:29:18,240 --> 00:29:23,460
work funnily enough based on this

00:29:21,210 --> 00:29:25,350
morning panel I will tell you that and

00:29:23,460 --> 00:29:27,450
actually lots of political things

00:29:25,350 --> 00:29:29,400
recently the project is hosted on github

00:29:27,450 --> 00:29:32,580
and we have been delightedly happy with

00:29:29,400 --> 00:29:34,020
it get up is awesome it's responsively

00:29:32,580 --> 00:29:36,770
else like a topical we're actually also

00:29:34,020 --> 00:29:42,030
a distributed remote team of 10 people

00:29:36,770 --> 00:29:44,130
okay so working on this when you want to

00:29:42,030 --> 00:29:45,179
work on it you make a github fork one of

00:29:44,130 --> 00:29:46,679
the things that I think people found

00:29:45,179 --> 00:29:48,809
challenging in terms of getting new

00:29:46,679 --> 00:29:50,820
contributors to the project is actually

00:29:48,809 --> 00:29:53,520
really hard to install there are a lot

00:29:50,820 --> 00:29:55,230
of pieces we have done some work with

00:29:53,520 --> 00:29:58,320
using VMS but i'll talk about the

00:29:55,230 --> 00:30:00,390
challenges that in a minute assuming you

00:29:58,320 --> 00:30:01,799
get over the hurdle of installing it you

00:30:00,390 --> 00:30:04,140
would then submit a pull request to us

00:30:01,799 --> 00:30:05,760
with a bug fixed or a feature we code

00:30:04,140 --> 00:30:08,309
review every line of code everything

00:30:05,760 --> 00:30:09,750
gets reviewed doesn't mean that we find

00:30:08,309 --> 00:30:12,630
everything that's wrong with code

00:30:09,750 --> 00:30:14,760
we also have a github hooks so that

00:30:12,630 --> 00:30:16,860
Python code can't land unless it's eight

00:30:14,760 --> 00:30:19,340
compliant so you're not reading code for

00:30:16,860 --> 00:30:21,270
style you're reading it for correctness

00:30:19,340 --> 00:30:22,320
one of the other things we do is

00:30:21,270 --> 00:30:24,870
actually when you submit a pull request

00:30:22,320 --> 00:30:26,970
we run this great tool called Leroy and

00:30:24,870 --> 00:30:31,980
what Leroy does is when you have a pull

00:30:26,970 --> 00:30:34,080
request it simulates merging it takes

00:30:31,980 --> 00:30:35,970
the merged build and runs all of your

00:30:34,080 --> 00:30:37,350
tests on it and we'll give you like a

00:30:35,970 --> 00:30:39,540
little indicator and github if this

00:30:37,350 --> 00:30:41,490
landed our master tests would pass or

00:30:39,540 --> 00:30:44,220
tests would not pass this is like

00:30:41,490 --> 00:30:46,110
tremendously useful for us because it

00:30:44,220 --> 00:30:47,340
makes code review much easier first of

00:30:46,110 --> 00:30:49,200
all you're not getting any code that is

00:30:47,340 --> 00:30:50,910
sort of horribly ugly and second of all

00:30:49,200 --> 00:30:53,520
you know that's going two parts test so

00:30:50,910 --> 00:30:54,720
you can just focus on semantics this is

00:30:53,520 --> 00:30:55,770
a good way to do things there's not a

00:30:54,720 --> 00:30:57,210
good way to do things I think you've

00:30:55,770 --> 00:30:58,770
kind of taken the wrong approach here I

00:30:57,210 --> 00:31:01,260
think like code review is really

00:30:58,770 --> 00:31:02,970
important but it tends to use your most

00:31:01,260 --> 00:31:07,620
senior people so anything you can do to

00:31:02,970 --> 00:31:10,860
reduce the sort of the the very

00:31:07,620 --> 00:31:14,000
straightforward parts it is good okay

00:31:10,860 --> 00:31:16,290
from there we have we run Jenkins for CI

00:31:14,000 --> 00:31:19,140
if polls github master picks up the

00:31:16,290 --> 00:31:21,390
changes runs all the tests on it and

00:31:19,140 --> 00:31:23,300
builds a build which automatically it's

00:31:21,390 --> 00:31:25,410
pushed to our development environment

00:31:23,300 --> 00:31:27,450
changes that we want we merge to our

00:31:25,410 --> 00:31:30,270
release branch which Jenkins also builds

00:31:27,450 --> 00:31:31,890
and pushes to our staging environment we

00:31:30,270 --> 00:31:34,710
have a QA team that runs acceptance

00:31:31,890 --> 00:31:36,630
tests on staging it's actually also

00:31:34,710 --> 00:31:38,910
Jenkins whereas our Jenkins instance

00:31:36,630 --> 00:31:41,000
runs unit tests there's runs acceptance

00:31:38,910 --> 00:31:44,400
tests which are mostly based on selenium

00:31:41,000 --> 00:31:47,190
and once they give us a thumbs up we

00:31:44,400 --> 00:31:49,950
push to production so our deployment is

00:31:47,190 --> 00:31:51,120
all pretty seriously automated it's

00:31:49,950 --> 00:31:53,640
running a single script with the

00:31:51,120 --> 00:31:55,500
builders parameter and it pushes out to

00:31:53,640 --> 00:31:57,720
have many machines and restarts anything

00:31:55,500 --> 00:31:59,220
it needs re-starting and so on we're

00:31:57,720 --> 00:32:02,190
about to automate that even further and

00:31:59,220 --> 00:32:04,710
I'll talk about that in a minute just an

00:32:02,190 --> 00:32:06,330
aside which is that we have not been

00:32:04,710 --> 00:32:08,790
doing continuous deployment for the last

00:32:06,330 --> 00:32:10,980
however many years we're about to but

00:32:08,790 --> 00:32:12,840
switching on continuous deployment is

00:32:10,980 --> 00:32:14,700
trivial now because we built all of the

00:32:12,840 --> 00:32:16,410
automation and testing and tools that we

00:32:14,700 --> 00:32:17,480
needed to switch it on that's the good

00:32:16,410 --> 00:32:20,510
news

00:32:17,480 --> 00:32:21,770
so configuration management some

00:32:20,510 --> 00:32:23,690
releases will involve a configuration

00:32:21,770 --> 00:32:25,850
change and we control and manage all

00:32:23,690 --> 00:32:27,530
those through puppet again we push

00:32:25,850 --> 00:32:28,669
configuration changes to development

00:32:27,530 --> 00:32:30,830
staging the same way that we push them

00:32:28,669 --> 00:32:34,910
into production because it minimizes

00:32:30,830 --> 00:32:37,280
errors I'll talk about virtualization in

00:32:34,910 --> 00:32:39,919
a little bit people who are web devs and

00:32:37,280 --> 00:32:41,330
just working on the web app don't want

00:32:39,919 --> 00:32:42,650
to have to install HBase they find it

00:32:41,330 --> 00:32:43,970
pretty challenging so one of the things

00:32:42,650 --> 00:32:46,429
that we've done some experimentation

00:32:43,970 --> 00:32:49,190
with is using vagrant it's a little ruby

00:32:46,429 --> 00:32:51,320
tool that lets you script virtual

00:32:49,190 --> 00:32:54,650
machines and it builds on top of virtual

00:32:51,320 --> 00:32:56,419
box so it will actually create you a

00:32:54,650 --> 00:32:58,790
virtual machine with the most recent

00:32:56,419 --> 00:33:00,410
build already installed on it so you can

00:32:58,790 --> 00:33:03,169
just vagrant up and start coding which

00:33:00,410 --> 00:33:04,400
is really nice and again we use puppet

00:33:03,169 --> 00:33:05,750
to actually configure those virtual

00:33:04,400 --> 00:33:06,950
machines the same way that production is

00:33:05,750 --> 00:33:09,910
configured and that's been tremendously

00:33:06,950 --> 00:33:11,840
helpful the hard part we found is

00:33:09,910 --> 00:33:14,000
finding the right packages because

00:33:11,840 --> 00:33:16,610
sometimes packages are not available for

00:33:14,000 --> 00:33:17,929
the vm especially the HBase packages the

00:33:16,610 --> 00:33:19,490
postgres packages things become

00:33:17,929 --> 00:33:20,510
available then become unavailable in you

00:33:19,490 --> 00:33:22,309
want everything to make your own it's

00:33:20,510 --> 00:33:23,809
really challenging so this is failing

00:33:22,309 --> 00:33:25,820
right now for example because of the

00:33:23,809 --> 00:33:27,799
HBase packages the other thing is

00:33:25,820 --> 00:33:30,500
challenging is the VirtualBox is only

00:33:27,799 --> 00:33:33,590
available the base box is Ubuntu whereas

00:33:30,500 --> 00:33:35,480
in production we're running redhat the

00:33:33,590 --> 00:33:36,799
second thing that's really hard is doing

00:33:35,480 --> 00:33:39,220
any kind of development is having a

00:33:36,799 --> 00:33:41,840
useful amount of data our data and

00:33:39,220 --> 00:33:44,210
includes personally identifiable

00:33:41,840 --> 00:33:46,549
information so private stuff because we

00:33:44,210 --> 00:33:48,470
know what what website you were looking

00:33:46,549 --> 00:33:50,720
at when you crashed and the contents of

00:33:48,470 --> 00:33:51,799
memory which could contain your password

00:33:50,720 --> 00:33:57,200
your credit card number all kinds of

00:33:51,799 --> 00:33:58,850
stuff so it is hard to share that in a

00:33:57,200 --> 00:34:00,350
secure way we do have a fake data

00:33:58,850 --> 00:34:02,210
instance and scripts for generating a

00:34:00,350 --> 00:34:05,870
set of fake crashes now and that's

00:34:02,210 --> 00:34:09,080
really helped a lot okay so things that

00:34:05,870 --> 00:34:10,700
are in the pipeline we have shipped and

00:34:09,080 --> 00:34:12,980
rolled back and we'll ship again today I

00:34:10,700 --> 00:34:14,149
thing called crontab which is a tool

00:34:12,980 --> 00:34:15,590
that we wrote for cron job

00:34:14,149 --> 00:34:17,990
synchronization and dependency

00:34:15,590 --> 00:34:19,399
management one of these that happens is

00:34:17,990 --> 00:34:21,169
because we have so many external data

00:34:19,399 --> 00:34:22,220
sources sometimes things will fail like

00:34:21,169 --> 00:34:23,330
let's say we're second the thing that

00:34:22,220 --> 00:34:25,580
fails and most often is actually getting

00:34:23,330 --> 00:34:27,679
the the usage numbers from vertica it

00:34:25,580 --> 00:34:29,159
fails a lot and you want to be able to

00:34:27,679 --> 00:34:32,309
auto recover

00:34:29,159 --> 00:34:34,200
I'm failure we are doing more and more

00:34:32,309 --> 00:34:35,960
use of stats d and graphite for a

00:34:34,200 --> 00:34:37,950
performance measurement and monitoring

00:34:35,960 --> 00:34:39,359
sometime next week or so we're going to

00:34:37,950 --> 00:34:40,770
start using chief this is at all is

00:34:39,359 --> 00:34:45,179
written at Mozilla lets you deploy a

00:34:40,770 --> 00:34:46,589
build from IRC and the thing that we're

00:34:45,179 --> 00:34:48,030
still talking about this is not built

00:34:46,589 --> 00:34:49,710
yet but I'm excited to build it is the

00:34:48,030 --> 00:34:51,270
idea of having tri-service which we do

00:34:49,710 --> 00:34:53,280
for Firefox so I feel like we should

00:34:51,270 --> 00:34:54,510
have web apps too and the idea that is

00:34:53,280 --> 00:34:55,440
have a bunch of different staging

00:34:54,510 --> 00:34:57,000
environments where you can stage

00:34:55,440 --> 00:34:58,349
different branches of your code in

00:34:57,000 --> 00:34:59,760
parallel so you don't have like a single

00:34:58,349 --> 00:35:03,740
staging environment that's a bottleneck

00:34:59,760 --> 00:35:06,599
in your in your deployment process so

00:35:03,740 --> 00:35:08,010
things we have coming up we're doing

00:35:06,599 --> 00:35:10,349
more and more reporting garbage

00:35:08,010 --> 00:35:11,430
collection crashes some of these are now

00:35:10,349 --> 00:35:12,839
have done from the first time I wrote

00:35:11,430 --> 00:35:15,210
solista better signature summaries which

00:35:12,839 --> 00:35:20,190
say things like 75 cent of these crashes

00:35:15,210 --> 00:35:22,109
occurred on OS 10 we're doing faceted

00:35:20,190 --> 00:35:23,789
search of elastic search we have a side

00:35:22,109 --> 00:35:26,910
project called dragnet which takes the

00:35:23,789 --> 00:35:29,760
dll information from crashes and we're

00:35:26,910 --> 00:35:32,339
trying to create a crowd source

00:35:29,760 --> 00:35:33,750
directory of dll information which is

00:35:32,339 --> 00:35:35,700
actually really useful i don't know if

00:35:33,750 --> 00:35:36,839
you know this problem but I'm you're

00:35:35,700 --> 00:35:38,160
looking at a crash and you know what

00:35:36,839 --> 00:35:39,450
DLLs the user has and you don't

00:35:38,160 --> 00:35:40,799
recognize some of them ego well some of

00:35:39,450 --> 00:35:42,299
these are like standard windows dll's

00:35:40,799 --> 00:35:43,410
don't want any of those things are and

00:35:42,299 --> 00:35:44,970
some of them are you know the software

00:35:43,410 --> 00:35:46,349
they've installed but one thing you

00:35:44,970 --> 00:35:48,750
would like to know is are any of these

00:35:46,349 --> 00:35:51,059
things malware because that's a really

00:35:48,750 --> 00:35:52,859
common cause of instability and it's

00:35:51,059 --> 00:35:54,599
really hard to Google DLLs malware

00:35:52,859 --> 00:35:56,819
vendors which might seem like a funny

00:35:54,599 --> 00:35:58,799
too but they do exist will actually set

00:35:56,819 --> 00:36:01,260
up websites to tell you that this dll is

00:35:58,799 --> 00:36:02,490
a real thing when it's not so we're

00:36:01,260 --> 00:36:04,500
trying to come up with a crowdsourced

00:36:02,490 --> 00:36:07,529
way based on this vast pool of dll

00:36:04,500 --> 00:36:09,150
information that we have we're doing

00:36:07,529 --> 00:36:10,980
more sort of exploitability analytics

00:36:09,150 --> 00:36:13,740
more ways to query the data opening our

00:36:10,980 --> 00:36:16,680
API better reporting replicas for post

00:36:13,740 --> 00:36:18,299
careers pig elasticsearch we've try to

00:36:16,680 --> 00:36:21,329
get a real q which has been a massive

00:36:18,299 --> 00:36:24,510
bike shedding effort we've been through

00:36:21,329 --> 00:36:25,559
a number of options I think that the

00:36:24,510 --> 00:36:28,740
thing that is in the lead at the moment

00:36:25,559 --> 00:36:30,510
is Kafka that's the good news we have a

00:36:28,740 --> 00:36:33,089
grand unified configuration system which

00:36:30,510 --> 00:36:33,930
I'm pretty excited with and the big

00:36:33,089 --> 00:36:36,630
thing that were doing this year is

00:36:33,930 --> 00:36:40,050
turning us into software as a service so

00:36:36,630 --> 00:36:41,950
that other people will be able to use it

00:36:40,050 --> 00:36:44,830
everything on the project is open source

00:36:41,950 --> 00:36:46,180
it's under the MPL mozilla public

00:36:44,830 --> 00:36:49,120
license version 2 which is compatible

00:36:46,180 --> 00:36:51,640
with most other OSI licenses you can

00:36:49,120 --> 00:36:52,900
look at the site which you will not see

00:36:51,640 --> 00:36:56,320
private user information unless you

00:36:52,900 --> 00:36:58,300
logged in to authorize you can fork it

00:36:56,320 --> 00:37:00,400
you can fix pokes you can contribute or

00:36:58,300 --> 00:37:02,560
reach the documentation join our mailing

00:37:00,400 --> 00:37:04,870
list and come and hassle us and i apply

00:37:02,560 --> 00:37:13,810
our scene so thank you for attending

00:37:04,870 --> 00:37:18,370
does anyone have questions yep yep I

00:37:13,810 --> 00:37:21,570
think I heard this go first yeah I just

00:37:18,370 --> 00:37:21,570
literally gave in to the organizers

00:37:26,220 --> 00:37:30,190
organizationally yes but in reality not

00:37:28,690 --> 00:37:38,140
very much we worked really closely

00:37:30,190 --> 00:37:39,430
together all day oh sorry meeting the

00:37:38,140 --> 00:37:41,590
microphone also repeat the question

00:37:39,430 --> 00:37:44,890
which was do we separate developers and

00:37:41,590 --> 00:37:47,860
operations organizationally yes on a day

00:37:44,890 --> 00:37:49,540
to day basis not really we all work

00:37:47,860 --> 00:37:51,310
pretty closely together so actually

00:37:49,540 --> 00:37:53,110
wrote a blog post about this which you

00:37:51,310 --> 00:37:54,760
can see on my website talking about like

00:37:53,110 --> 00:37:57,190
a recent troubleshooting exercise that

00:37:54,760 --> 00:37:59,020
we went through I think it illustrates

00:37:57,190 --> 00:38:00,610
how how well we work together that took

00:37:59,020 --> 00:38:02,170
a long time because i think we didn't

00:38:00,610 --> 00:38:04,660
have a traditional devops culture five

00:38:02,170 --> 00:38:07,300
years ago when I started but I'm takes

00:38:04,660 --> 00:38:08,920
time and sort of going through hell

00:38:07,300 --> 00:38:10,870
together to build trust I think and now

00:38:08,920 --> 00:38:14,740
we have a pretty good trust level we all

00:38:10,870 --> 00:38:17,050
have access and we all have soo do but

00:38:14,740 --> 00:38:18,550
I'm mostly don't use it because I think

00:38:17,050 --> 00:38:19,930
that sort of the key question if someone

00:38:18,550 --> 00:38:21,190
says I would like pseudo on production

00:38:19,930 --> 00:38:24,360
if they say that they probably shouldn't

00:38:21,190 --> 00:38:27,040
have it from a developer's perspective

00:38:24,360 --> 00:38:31,510
but yeah we have access but mostly it is

00:38:27,040 --> 00:38:36,820
ops jobs to maintain stuff next question

00:38:31,510 --> 00:38:39,370
there was one yep that's right sorry so

00:38:36,820 --> 00:38:41,440
I guess I'm wondering why or if you've

00:38:39,370 --> 00:38:46,350
considered using centos with virtualbox

00:38:41,440 --> 00:38:47,940
and and I guess the other question is

00:38:46,350 --> 00:38:51,630
can you talk a little bit more about the

00:38:47,940 --> 00:38:52,710
configuration system sure I know there

00:38:51,630 --> 00:38:53,850
was a reason that we didn't you sent us

00:38:52,710 --> 00:38:57,000
and now I can't remember it is i think

00:38:53,850 --> 00:38:59,010
it was a library compatibility asian

00:38:57,000 --> 00:39:00,900
compatibility we actually talked about

00:38:59,010 --> 00:39:04,590
using scientific linux because it was

00:39:00,900 --> 00:39:06,750
closer i think to terrell then sent us

00:39:04,590 --> 00:39:10,170
was at that time so the second question

00:39:06,750 --> 00:39:12,810
was the configuration system you dive

00:39:10,170 --> 00:39:14,490
into that a little bit more um yes so

00:39:12,810 --> 00:39:17,550
there's a thing as a whole talk on app

00:39:14,490 --> 00:39:21,050
icon in two weeks but that the nice

00:39:17,550 --> 00:39:24,330
thing with the configuration system is

00:39:21,050 --> 00:39:26,460
one of the goals of it is to be able to

00:39:24,330 --> 00:39:29,250
simply configure so all of the code is

00:39:26,460 --> 00:39:30,870
on every box and you can transform a box

00:39:29,250 --> 00:39:31,890
from a collector into a processor or

00:39:30,870 --> 00:39:34,860
whatever by just changing the

00:39:31,890 --> 00:39:36,870
configuration which is really nice for

00:39:34,860 --> 00:39:39,630
sort of managing changes in load and

00:39:36,870 --> 00:39:42,420
things like that it has a lot of options

00:39:39,630 --> 00:39:43,470
about the style of configuration file it

00:39:42,420 --> 00:39:47,940
you can use you can use basically any

00:39:43,470 --> 00:39:49,800
standard configuration format I probably

00:39:47,940 --> 00:39:50,790
should get one of my colleagues give you

00:39:49,800 --> 00:39:52,680
this bill but feel free to get in

00:39:50,790 --> 00:39:58,200
contact with entre do to him sir okay

00:39:52,680 --> 00:40:00,060
thanks thank you yep so it sounded like

00:39:58,200 --> 00:40:03,390
a lot of the analytics are done in in

00:40:00,060 --> 00:40:06,600
sequel or postgres is there a reason

00:40:03,390 --> 00:40:09,030
that aside well it was there specific

00:40:06,600 --> 00:40:12,810
reason you did there instead of in HBase

00:40:09,030 --> 00:40:14,070
or so I think we're doing more and more

00:40:12,810 --> 00:40:16,170
analytics nature-based particularly I

00:40:14,070 --> 00:40:18,990
think a lot of the ad hoc stuff gets on

00:40:16,170 --> 00:40:21,270
stage base I think the reason is

00:40:18,990 --> 00:40:23,580
actually organizational we don't have a

00:40:21,270 --> 00:40:25,200
good Hadoop culture I think like this is

00:40:23,580 --> 00:40:27,000
um we have a metrics group that user

00:40:25,200 --> 00:40:29,610
pretty heavily but for us it was kind of

00:40:27,000 --> 00:40:31,680
a lonely experience as we went along as

00:40:29,610 --> 00:40:33,330
I think we're getting better at it part

00:40:31,680 --> 00:40:34,980
of it is like an organizational

00:40:33,330 --> 00:40:36,720
resistance to Jeff as well which is

00:40:34,980 --> 00:40:39,150
really it said but honestly that's one

00:40:36,720 --> 00:40:40,740
of the reasons and now that people have

00:40:39,150 --> 00:40:42,750
other options like Pig they're much

00:40:40,740 --> 00:40:46,640
happier actually it's silly I know but

00:40:42,750 --> 00:40:46,640
yeah thnkx

00:40:46,810 --> 00:40:51,730
I will also say probably the people a

00:40:50,590 --> 00:40:54,460
little bit scared I think the first

00:40:51,730 --> 00:40:58,600
we're NH base it was super unstable so

00:40:54,460 --> 00:41:00,370
yeah I just a quick cutest because it's

00:40:58,600 --> 00:41:02,980
a few of embrace the fact that there's

00:41:00,370 --> 00:41:05,680
just you know billion a billion you said

00:41:02,980 --> 00:41:09,010
that your class selenium how much is any

00:41:05,680 --> 00:41:11,440
of us doing to reduce how much letters

00:41:09,010 --> 00:41:13,150
any of this what doing to reduce the

00:41:11,440 --> 00:41:15,070
classroom okay should I mean how much of

00:41:13,150 --> 00:41:17,590
us it's actually you know beneficial

00:41:15,070 --> 00:41:22,810
yeah that's a good question so the crash

00:41:17,590 --> 00:41:24,580
rate actually goes up and down right we

00:41:22,810 --> 00:41:27,880
fix the most common crashes like that's

00:41:24,580 --> 00:41:29,770
the goal but the increase is we actually

00:41:27,880 --> 00:41:31,060
when we saw like the drop in our user

00:41:29,770 --> 00:41:32,590
base we actually start dropping number

00:41:31,060 --> 00:41:35,260
of crashes it's kind of depressing but

00:41:32,590 --> 00:41:38,250
um for an individual version or product

00:41:35,260 --> 00:41:41,170
we try to reduce the crash rate however

00:41:38,250 --> 00:41:44,950
we're always adding new products and so

00:41:41,170 --> 00:41:46,090
when we introduced web RT or Firefox for

00:41:44,950 --> 00:41:48,430
Android or whatever that increases

00:41:46,090 --> 00:41:50,350
number of crashes I expect we'll see a

00:41:48,430 --> 00:41:52,180
lot of crashes from Firefox OS this year

00:41:50,350 --> 00:41:54,880
for example because it's it's brand new

00:41:52,180 --> 00:41:56,080
and a lot of different hardware anything

00:41:54,880 --> 00:41:58,930
it's embedded in the hardware is going

00:41:56,080 --> 00:42:00,670
to have more wrinkles to it but I mean

00:41:58,930 --> 00:42:02,080
it is a priority there are so there's in

00:42:00,670 --> 00:42:03,310
terms of Mozilla engineering there are a

00:42:02,080 --> 00:42:05,470
few different projects that work there

00:42:03,310 --> 00:42:09,670
is crash kill which works specifically

00:42:05,470 --> 00:42:11,200
on solving crash-related bugs there is

00:42:09,670 --> 00:42:13,030
snappy which works on responsiveness

00:42:11,200 --> 00:42:15,280
there's mem shrink that works on

00:42:13,030 --> 00:42:16,930
reducing the memory footprint Firefox so

00:42:15,280 --> 00:42:18,870
all of these things have like five to

00:42:16,930 --> 00:42:21,970
ten people working on them just that

00:42:18,870 --> 00:42:23,350
consistently and fixing crashes actually

00:42:21,970 --> 00:42:24,940
something that's worked on by like every

00:42:23,350 --> 00:42:26,380
engineer that ever touches Firefox so

00:42:24,940 --> 00:42:28,900
it's a really high priority for us

00:42:26,380 --> 00:42:30,340
stability is actually he says stop I

00:42:28,900 --> 00:42:32,950
since I stability is actually pretty

00:42:30,340 --> 00:42:35,830
good we believe that based on some or

00:42:32,950 --> 00:42:37,390
other analytics that users tend to fall

00:42:35,830 --> 00:42:40,330
into two camps like people who never

00:42:37,390 --> 00:42:42,040
crash and people who crash a lot based

00:42:40,330 --> 00:42:43,690
on particular patterns of behavior so

00:42:42,040 --> 00:42:46,390
that's that's an interesting area for us

00:42:43,690 --> 00:42:47,620
to I think I've until the stops oh thank

00:42:46,390 --> 00:42:49,330
you feel free to ask me questions like

00:42:47,620 --> 00:42:52,350
outside or later in the bar or whatever

00:42:49,330 --> 00:42:52,350
thank you for coming

00:42:52,460 --> 00:42:54,520

YouTube URL: https://www.youtube.com/watch?v=asbmIUObQVY


