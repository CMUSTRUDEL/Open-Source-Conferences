Title: Introducing mod_lua
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Daniel Gruno
ApacheCon NA 2013
A Patchy Web
Captions: 
	00:00:00,000 --> 00:00:09,090
next up we have introducing mod Loula

00:00:02,879 --> 00:00:13,710
with a Daniel Bruno exactly good evening

00:00:09,090 --> 00:00:16,940
or afternoon I'm Daniel s Justin just

00:00:13,710 --> 00:00:21,000
said I'm a documentation writer and

00:00:16,940 --> 00:00:27,019
Marlo developer for the httpd server

00:00:21,000 --> 00:00:31,710
project you can hear me oh sorry just

00:00:27,019 --> 00:00:34,620
well ok as I said I'm Daniel I'm a model

00:00:31,710 --> 00:00:38,399
duo developer and documentation writer

00:00:34,620 --> 00:00:42,510
and i'll be talking a bit about module

00:00:38,399 --> 00:00:46,879
what it is what the way is and how you

00:00:42,510 --> 00:00:53,390
can use it and possibly plug some of the

00:00:46,879 --> 00:00:55,710
services that we ask and that we use so

00:00:53,390 --> 00:00:59,579
these are the topics i will be covering

00:00:55,710 --> 00:01:02,090
some stuff about lua waialua setting it

00:00:59,579 --> 00:01:06,570
up some small business logic some

00:01:02,090 --> 00:01:09,150
authentication and scripting and some

00:01:06,570 --> 00:01:13,350
case studies and the case studies are

00:01:09,150 --> 00:01:15,509
not really case studies it's just some

00:01:13,350 --> 00:01:19,610
scripts adoption services that we use

00:01:15,509 --> 00:01:23,640
within the SF that are driven by lua

00:01:19,610 --> 00:01:27,030
before we begin text in purple is stuff

00:01:23,640 --> 00:01:31,890
that is in the trunk version of Maaloula

00:01:27,030 --> 00:01:34,799
and geoff's has been made using lure kit

00:01:31,890 --> 00:01:38,130
which i will be explaining what is in a

00:01:34,799 --> 00:01:42,509
moment you can tune it to that address

00:01:38,130 --> 00:01:46,649
to learn a bit about melua and please

00:01:42,509 --> 00:01:48,750
please please if you can try just a

00:01:46,649 --> 00:01:52,259
second I'll try using melua from the

00:01:48,750 --> 00:01:54,180
trunk and don't be afraid because it

00:01:52,259 --> 00:01:57,470
actually works

00:01:54,180 --> 00:02:02,760
it's got a lot of really cool features

00:01:57,470 --> 00:02:05,670
so okay some some stuff about doin it's

00:02:02,760 --> 00:02:08,399
a powerful fast lightweight and beddable

00:02:05,670 --> 00:02:12,240
scripting language it's as close you can

00:02:08,399 --> 00:02:16,620
get to c or java speed wise and memory

00:02:12,240 --> 00:02:19,950
wise but still be dynamic and by dynamic

00:02:16,620 --> 00:02:22,800
I mean it's interpreted so you can

00:02:19,950 --> 00:02:27,570
change stuff without having to recompile

00:02:22,800 --> 00:02:31,050
you can set a variable to a number and

00:02:27,570 --> 00:02:33,140
then change it to a string and so on and

00:02:31,050 --> 00:02:36,090
so on it's used in everything from

00:02:33,140 --> 00:02:38,010
supercomputers to washing machines I

00:02:36,090 --> 00:02:41,720
know this because my brother programs

00:02:38,010 --> 00:02:45,150
washing machines and uses Lua for it

00:02:41,720 --> 00:02:47,670
it's also used in in VLC or video man

00:02:45,150 --> 00:02:50,670
and world of warcraft minecraft traffic

00:02:47,670 --> 00:02:54,180
server why is Jacques Alan talked about

00:02:50,670 --> 00:02:56,370
earlier it's got pretty simple syntax I

00:02:54,180 --> 00:02:59,130
mean if you just look at the example you

00:02:56,370 --> 00:03:06,090
can how many of you have actually used

00:02:59,130 --> 00:03:09,930
Lua at all one two three four five if

00:03:06,090 --> 00:03:13,560
you've been using C or PHP or whatever

00:03:09,930 --> 00:03:16,470
you can probably make out what that

00:03:13,560 --> 00:03:19,709
function by this Swift does it pins

00:03:16,470 --> 00:03:21,930
hello world it sets two variables went

00:03:19,709 --> 00:03:25,410
to a number of the number 5 and 12 ass

00:03:21,930 --> 00:03:30,269
drink or something and after that we

00:03:25,410 --> 00:03:32,220
have an array or actually a hash and the

00:03:30,269 --> 00:03:35,160
special thing about the ways that it's

00:03:32,220 --> 00:03:39,329
one based and not zero based so stuff

00:03:35,160 --> 00:03:42,239
starts at index 1 and not 0 but once you

00:03:39,329 --> 00:03:44,540
have that tech down it's pretty easy to

00:03:42,239 --> 00:03:44,540
work with

00:03:44,710 --> 00:03:50,290
it reports all the cool stuff that you

00:03:47,320 --> 00:03:53,790
would expect from where well from pearl

00:03:50,290 --> 00:03:56,110
and Java I think inversion night and

00:03:53,790 --> 00:03:59,530
then all the other programming languages

00:03:56,110 --> 00:04:02,020
it has closures it can be optic oriented

00:03:59,530 --> 00:04:03,850
it has an automatic garbage collector so

00:04:02,020 --> 00:04:06,250
you don't need to malloc and free stuff

00:04:03,850 --> 00:04:10,680
it has dynamic types number strings

00:04:06,250 --> 00:04:16,080
bullion's erase hashes and Neil which is

00:04:10,680 --> 00:04:19,360
Portuguese for null and you can assign a

00:04:16,080 --> 00:04:21,700
variable to be any of those sites and it

00:04:19,360 --> 00:04:24,640
will just ematic automatically adjust

00:04:21,700 --> 00:04:27,370
itself it has something called meta

00:04:24,640 --> 00:04:29,200
tables which is really cool stuff but I

00:04:27,370 --> 00:04:31,090
will not be discussing that today

00:04:29,200 --> 00:04:33,670
because that would take a couple of

00:04:31,090 --> 00:04:37,870
hours to discuss it has co routines

00:04:33,670 --> 00:04:39,840
which i have used in maaloula and you'll

00:04:37,870 --> 00:04:42,130
see it's in verbal because it's in trunk

00:04:39,840 --> 00:04:45,520
there's filtering recognitions we have

00:04:42,130 --> 00:04:48,690
an HTTP d and it has some basic regular

00:04:45,520 --> 00:04:52,510
expressions called Lua patterns which is

00:04:48,690 --> 00:04:56,730
basically the same as as regex but it's

00:04:52,510 --> 00:05:00,970
only one-tenth the size of regex so it's

00:04:56,730 --> 00:05:06,840
9.82 times faster was some minor

00:05:00,970 --> 00:05:10,150
drawbacks this is probably one of the

00:05:06,840 --> 00:05:14,230
most often asked questions is how fast

00:05:10,150 --> 00:05:18,730
is it as anyone would care to the

00:05:14,230 --> 00:05:23,770
interior guess yeah Eleanor pretty down

00:05:18,730 --> 00:05:27,370
fast yeah I have this graph that chart

00:05:23,770 --> 00:05:31,780
that shows how fast this on eight

00:05:27,370 --> 00:05:34,750
different standard performance measuring

00:05:31,780 --> 00:05:38,050
functions it's a logarithmic scale

00:05:34,750 --> 00:05:40,750
because if it wasn't it will be well it

00:05:38,050 --> 00:05:43,390
would look pretty darn funny but I'd

00:05:40,750 --> 00:05:45,340
summed it up and as you can see compared

00:05:43,390 --> 00:05:49,450
to the other dynamic languages Lua is

00:05:45,340 --> 00:05:52,960
quite fast and if you use the loo age it

00:05:49,450 --> 00:05:56,060
which I prefer to use it's actually

00:05:52,960 --> 00:06:01,790
faster than Java on average

00:05:56,060 --> 00:06:07,190
oh you can run a lot of scripts at the

00:06:01,790 --> 00:06:09,980
same time you can see it's about well 10

00:06:07,190 --> 00:06:12,230
to 20 times of status PHP so if you're

00:06:09,980 --> 00:06:14,060
considering adopting a new scripting

00:06:12,230 --> 00:06:19,160
language you might consider using mallu

00:06:14,060 --> 00:06:23,600
for that why should you use more lua

00:06:19,160 --> 00:06:27,350
well as a good question and I have a few

00:06:23,600 --> 00:06:29,630
answers it allows you to extend and

00:06:27,350 --> 00:06:33,410
modify your web server using the world

00:06:29,630 --> 00:06:35,990
as a simple explanation you can respond

00:06:33,410 --> 00:06:39,889
to requests with Lewis scripts must like

00:06:35,990 --> 00:06:42,650
PHP or asp or CGI script and so on you

00:06:39,889 --> 00:06:46,550
can change request metadata on the fly

00:06:42,650 --> 00:06:48,260
this is quite like what mod rewrite does

00:06:46,550 --> 00:06:52,190
what mother Leah starts what more

00:06:48,260 --> 00:06:54,700
terrorists does and so on everything

00:06:52,190 --> 00:06:57,590
within the request you can change and

00:06:54,700 --> 00:07:00,919
you can set up custom access

00:06:57,590 --> 00:07:02,930
authorization authentication steps i'll

00:07:00,919 --> 00:07:05,530
be showing a call of the examples that's

00:07:02,930 --> 00:07:09,890
how you can do that and you can even

00:07:05,530 --> 00:07:13,190
create a well rudimentary load balancer

00:07:09,890 --> 00:07:16,700
if you like the quick handling I'm not

00:07:13,190 --> 00:07:19,220
really gonna go into if you ever develop

00:07:16,700 --> 00:07:23,030
module for httpd you will know what

00:07:19,220 --> 00:07:26,450
quickly and quick handling is and you

00:07:23,030 --> 00:07:28,490
can do that and last but not least you

00:07:26,450 --> 00:07:30,800
can filter the input and output if you

00:07:28,490 --> 00:07:34,310
use the trunk version of mother one and

00:07:30,800 --> 00:07:37,880
i'll be showing that as well in other

00:07:34,310 --> 00:07:42,470
words you can write a module much like

00:07:37,880 --> 00:07:45,229
you would write a see module for httpd

00:07:42,470 --> 00:07:48,680
but you don't have to recompile the

00:07:45,229 --> 00:07:52,250
molecule to restart httpd check it fix

00:07:48,680 --> 00:07:57,100
it back recompile restart httpd and so

00:07:52,250 --> 00:07:59,930
on and so on so you can you can make a

00:07:57,100 --> 00:08:02,120
prototype of a sea module pretty fast

00:07:59,930 --> 00:08:05,090
and you can test this is work and if you

00:08:02,120 --> 00:08:06,800
then want to make a similar to Las it

00:08:05,090 --> 00:08:11,419
you can just write C mark to the dot

00:08:06,800 --> 00:08:13,699
exactly what the lunar module did you

00:08:11,419 --> 00:08:16,819
can create web applications as I will be

00:08:13,699 --> 00:08:19,250
showing and you can do a lot of stuff

00:08:16,819 --> 00:08:22,460
that you could do in 2.2 but you can't

00:08:19,250 --> 00:08:27,830
do in 2.4 yet because mud / mod perl or

00:08:22,460 --> 00:08:30,650
mod python they do work but they don't

00:08:27,830 --> 00:08:36,110
work for 2.4 yet there are some patches

00:08:30,650 --> 00:08:40,219
but it's not official yet so yeah you

00:08:36,110 --> 00:08:43,729
should use model instead setting it up

00:08:40,219 --> 00:08:47,660
is pretty easy it's a thought of apache

00:08:43,729 --> 00:08:51,410
HTTP server 2.3 and later you need lure

00:08:47,660 --> 00:08:54,680
or luge it and you can gather for pretty

00:08:51,410 --> 00:09:00,290
much any platform windows freebsd linux

00:08:54,680 --> 00:09:03,829
mac you name is hilarious and so on it

00:09:00,290 --> 00:09:07,240
only requires the red line library so

00:09:03,829 --> 00:09:09,589
it's pretty easy to build takes about

00:09:07,240 --> 00:09:14,570
three or four seconds to build the one

00:09:09,589 --> 00:09:19,820
and if you wanted to be built the model

00:09:14,570 --> 00:09:22,000
to be built while you're making httpd

00:09:19,820 --> 00:09:25,490
from sauce you can do to the enable lure

00:09:22,000 --> 00:09:28,880
track or you can use the enable much yet

00:09:25,490 --> 00:09:32,029
equals really all or you can build it

00:09:28,880 --> 00:09:35,990
the using apxs by using the command line

00:09:32,029 --> 00:09:37,850
at the bottom to load it you just load

00:09:35,990 --> 00:09:40,910
it like below the new animal you are the

00:09:37,850 --> 00:09:45,800
load module directions and if you want

00:09:40,910 --> 00:09:50,060
to use lures web scripting you would

00:09:45,800 --> 00:09:53,959
just use your basic add hammer and the

00:09:50,060 --> 00:09:56,000
tweaks earth below you should well get

00:09:53,959 --> 00:09:57,740
the slides or write them down because

00:09:56,000 --> 00:10:00,700
they're pretty important of the only

00:09:57,740 --> 00:10:05,980
later how much they matter

00:10:00,700 --> 00:10:10,000
in terms of performance and well let's

00:10:05,980 --> 00:10:14,080
start writing some scripts there are two

00:10:10,000 --> 00:10:15,690
ways of interacting with matt lua you

00:10:14,080 --> 00:10:19,870
can either have your lure

00:10:15,690 --> 00:10:23,110
something-something hammer with a pass

00:10:19,870 --> 00:10:25,330
to a script and a function name or you

00:10:23,110 --> 00:10:28,800
can put your Lewis grip directly inside

00:10:25,330 --> 00:10:32,550
your httpd configuration like so I

00:10:28,800 --> 00:10:35,590
personally prefer doing the former

00:10:32,550 --> 00:10:37,690
because otherwise you would have to

00:10:35,590 --> 00:10:40,300
reload your configuration every time you

00:10:37,690 --> 00:10:44,620
change something but you can do it it's

00:10:40,300 --> 00:10:47,380
a possibility all the functions well all

00:10:44,620 --> 00:10:49,120
the way function except for scripts or

00:10:47,380 --> 00:10:54,220
web applications are called through a

00:10:49,120 --> 00:10:56,740
lua hook something directed and it will

00:10:54,220 --> 00:11:00,130
unless otherwise specified look for a

00:10:56,740 --> 00:11:04,500
function named handle in your script and

00:11:00,130 --> 00:11:04,500
this is an example hand will function as

00:11:05,370 --> 00:11:12,220
you can see i mighta turning a past you

00:11:09,520 --> 00:11:16,960
to that ok or I'm returning 404 in this

00:11:12,220 --> 00:11:19,720
example handler that's because you do

00:11:16,960 --> 00:11:22,540
escapes are expected to return one of

00:11:19,720 --> 00:11:26,980
these attached to that ok or the client

00:11:22,540 --> 00:11:30,130
or done if you was yes the speedy talk

00:11:26,980 --> 00:11:33,190
you'll know that speedy use the done to

00:11:30,130 --> 00:11:35,770
circumvent the logging and

00:11:33,190 --> 00:11:38,170
past translations and so on and so on

00:11:35,770 --> 00:11:40,780
you can do that in Maaloula as well to

00:11:38,170 --> 00:11:44,620
just say okay I handle this request do

00:11:40,780 --> 00:11:48,100
not do anything else or you can just

00:11:44,620 --> 00:11:50,440
return any httpd status code like for

00:11:48,100 --> 00:11:53,890
four or five hundred and and so on and

00:11:50,440 --> 00:11:57,700
so on you can also pull your scripts

00:11:53,890 --> 00:12:00,310
into a single file as you can see here I

00:11:57,700 --> 00:12:01,900
have four different hooks that all

00:12:00,310 --> 00:12:05,400
points to the same file but they have

00:12:01,900 --> 00:12:10,300
different function names as you can see

00:12:05,400 --> 00:12:12,370
over here different function names and

00:12:10,300 --> 00:12:14,940
in my file i would just declare

00:12:12,370 --> 00:12:17,440
different functions so when this hook

00:12:14,940 --> 00:12:19,990
gets called it would call this function

00:12:17,440 --> 00:12:22,600
and with this hook gets called they

00:12:19,990 --> 00:12:26,680
would call this function so you can you

00:12:22,600 --> 00:12:30,640
can pull that if you like let's look at

00:12:26,680 --> 00:12:34,030
some small business logic this is mostly

00:12:30,640 --> 00:12:36,970
stuff you can already do with mod

00:12:34,030 --> 00:12:42,430
rewrite on our areas or authentication

00:12:36,970 --> 00:12:49,720
stuff and so on and so on first of all

00:12:42,430 --> 00:12:53,500
you want to invoke whatever hook you

00:12:49,720 --> 00:12:55,690
need to that's a translate name hook

00:12:53,500 --> 00:12:58,570
this for example what not rewrite or my

00:12:55,690 --> 00:13:00,790
areas do as an app to storage which is

00:12:58,570 --> 00:13:03,430
was cashing modules and proxy and

00:13:00,790 --> 00:13:07,330
wattles do or you can hook it to check

00:13:03,430 --> 00:13:10,390
access user ID and so on or type

00:13:07,330 --> 00:13:15,820
checking which nobody uses but it's

00:13:10,390 --> 00:13:18,700
there nonetheless and let's see some

00:13:15,820 --> 00:13:23,560
examples is an example rewriting the

00:13:18,700 --> 00:13:30,070
slash random to any random number dot

00:13:23,560 --> 00:13:32,440
gifts or just if you you can do this

00:13:30,070 --> 00:13:37,120
n mod rewrite as well but it will

00:13:32,440 --> 00:13:41,200
require a big file containing the

00:13:37,120 --> 00:13:43,030
numbers from 1 to 100 so it's if you

00:13:41,200 --> 00:13:44,890
ever need to do something like this you

00:13:43,030 --> 00:13:48,010
can do it in malu instead and as you can

00:13:44,890 --> 00:13:51,370
see it's quite easy you just check if

00:13:48,010 --> 00:13:53,500
the your i equals / random then you

00:13:51,370 --> 00:13:55,930
change the URI to slash and then a

00:13:53,500 --> 00:14:00,030
random number and then dot just and

00:13:55,930 --> 00:14:02,860
return okay or if the Euro I did not

00:14:00,030 --> 00:14:05,560
equal / random you return the client

00:14:02,860 --> 00:14:08,220
meaning i did not do anything to this

00:14:05,560 --> 00:14:12,400
request just carry on with the other

00:14:08,220 --> 00:14:15,250
modules that might have a hook here next

00:14:12,400 --> 00:14:20,550
example is a rudimentary load balancer

00:14:15,250 --> 00:14:23,350
which has three different backends and

00:14:20,550 --> 00:14:26,410
as you see I'm moving into the translate

00:14:23,350 --> 00:14:31,420
name just because I like hooking into

00:14:26,410 --> 00:14:34,510
that hook or face and what I'm doing is

00:14:31,420 --> 00:14:37,510
I'm telling a pasture that the module

00:14:34,510 --> 00:14:40,330
that should handle this request is the

00:14:37,510 --> 00:14:43,150
proxy server module the mod proxy I'm

00:14:40,330 --> 00:14:46,870
telling it to be a reverse proxy request

00:14:43,150 --> 00:14:49,690
and then I'm telling it to proxy it to

00:14:46,870 --> 00:14:52,780
one of these three I'm randomly choosing

00:14:49,690 --> 00:14:55,900
one of these three back ends and then

00:14:52,780 --> 00:14:58,240
I'm turning declined meaning pass this

00:14:55,900 --> 00:15:01,330
on it doesn't mean I didn't do anything

00:14:58,240 --> 00:15:04,660
it means pass this on to the next module

00:15:01,330 --> 00:15:08,800
that might be expected to also transform

00:15:04,660 --> 00:15:11,170
something in this stage another example

00:15:08,800 --> 00:15:13,690
would be getting rid of the skip flag

00:15:11,170 --> 00:15:17,670
and mod rewrite I don't know how many of

00:15:13,690 --> 00:15:21,930
you have used to skip flack none of you

00:15:17,670 --> 00:15:21,930
okay we'll just skip it

00:15:22,130 --> 00:15:28,320
Nova seriously the point is that it has

00:15:25,200 --> 00:15:31,350
a tremendous amount of transparency

00:15:28,320 --> 00:15:34,020
instead of trying to figure out am I

00:15:31,350 --> 00:15:36,690
skipping one or two lines and this

00:15:34,020 --> 00:15:40,080
rewrite I can just see okay it's like

00:15:36,690 --> 00:15:42,330
this if I do there is something math is

00:15:40,080 --> 00:15:45,660
something then and you can clearly see

00:15:42,330 --> 00:15:47,310
the scope in which you're changing and

00:15:45,660 --> 00:15:51,180
where you're changing stuff and where

00:15:47,310 --> 00:15:53,610
you're not changing stuff so I while I

00:15:51,180 --> 00:15:55,920
still use mod rewrite but I also like to

00:15:53,610 --> 00:15:59,060
use this to absolute transparency so I

00:15:55,920 --> 00:16:04,110
can see what am I actually doing and

00:15:59,060 --> 00:16:07,380
which path am i choosing you can also do

00:16:04,110 --> 00:16:10,980
math virtual hosting like Madhya be host

00:16:07,380 --> 00:16:14,490
areas it is quite simple it's actually I

00:16:10,980 --> 00:16:18,260
think you need the trunk version for

00:16:14,490 --> 00:16:21,830
this but this example shows you how to

00:16:18,260 --> 00:16:24,900
set up a document root then match the

00:16:21,830 --> 00:16:27,600
hostname incoming hostname and see if it

00:16:24,900 --> 00:16:30,750
matches something dull example.com then

00:16:27,600 --> 00:16:32,190
you shut off the the first it and you

00:16:30,750 --> 00:16:33,660
add that to the document root and then

00:16:32,190 --> 00:16:38,400
you set the document root for the

00:16:33,660 --> 00:16:40,950
request to that and that's a quite

00:16:38,400 --> 00:16:44,010
simple way of adding math virtual

00:16:40,950 --> 00:16:47,660
hosting by emma lua for example chester

00:16:44,010 --> 00:16:50,610
example.com would go to slash

00:16:47,660 --> 00:16:57,540
www.example.com / test in this example

00:16:50,610 --> 00:16:59,910
let's need to speed up a bit some access

00:16:57,540 --> 00:17:02,970
authentication and authorization you can

00:16:59,910 --> 00:17:06,750
basically use mallu offer for the Triple

00:17:02,970 --> 00:17:09,150
A in two ways you can add a basic

00:17:06,750 --> 00:17:12,570
authentication handler for example this

00:17:09,150 --> 00:17:15,210
script in thus much like what the rich

00:17:12,570 --> 00:17:18,150
was talking about earlier when you add

00:17:15,210 --> 00:17:22,350
this don't allow co-workers in between

00:17:18,150 --> 00:17:26,820
the hours of well only allow them

00:17:22,350 --> 00:17:29,040
between eight and six pm and this is a

00:17:26,820 --> 00:17:32,670
lower version of how you would do that

00:17:29,040 --> 00:17:36,510
and you will see I've extended it to say

00:17:32,670 --> 00:17:39,300
okay I want to only allow them in

00:17:36,510 --> 00:17:41,760
between this and this hour but I also

00:17:39,300 --> 00:17:45,030
want to check that it's only it only

00:17:41,760 --> 00:17:48,930
applies to these four people I can't do

00:17:45,030 --> 00:17:53,730
that in the d/s per se but if i

00:17:48,930 --> 00:17:57,110
implement an outside authorization who

00:17:53,730 --> 00:18:01,380
can lure I can I can go in and I can

00:17:57,110 --> 00:18:03,960
tailor it to be very specific in who do

00:18:01,380 --> 00:18:09,710
I allow how too long when do I allow

00:18:03,960 --> 00:18:12,600
them and so on and so on and another

00:18:09,710 --> 00:18:17,550
another interesting thing that you can

00:18:12,600 --> 00:18:20,910
do I think it's in 243 and on is the new

00:18:17,550 --> 00:18:23,750
of Z provider you have in what lowa

00:18:20,910 --> 00:18:28,440
which basically means you can add a

00:18:23,750 --> 00:18:31,050
required direction waialua if you've

00:18:28,440 --> 00:18:34,590
seen which is tog you would I've seen

00:18:31,050 --> 00:18:36,930
this require IP something something

00:18:34,590 --> 00:18:39,570
something or require not IP or require

00:18:36,930 --> 00:18:41,930
all denied require all granted and so on

00:18:39,570 --> 00:18:45,120
and so on you can implement something

00:18:41,930 --> 00:18:48,990
and the word that makes it that enables

00:18:45,120 --> 00:18:50,820
you to do require foo for example and

00:18:48,990 --> 00:18:57,300
then that would want to function in Lua

00:18:50,820 --> 00:19:01,020
and check it soo is okay or not okay i'm

00:18:57,300 --> 00:19:04,410
just showing an example of that this is

00:19:01,020 --> 00:19:07,770
an example of dns blacklisting module

00:19:04,410 --> 00:19:11,610
that would allow us to say require dns

00:19:07,770 --> 00:19:15,150
blacklisting check and pass on a dns

00:19:11,610 --> 00:19:18,390
blacklisting host Susan melua script and

00:19:15,150 --> 00:19:22,080
on the next place you can see the DNS

00:19:18,390 --> 00:19:24,480
blacklisting check function which will

00:19:22,080 --> 00:19:26,850
just assume that it works but basically

00:19:24,480 --> 00:19:32,850
it takes the provider that we just

00:19:26,850 --> 00:19:36,780
passed on the this provider it passes

00:19:32,850 --> 00:19:39,240
that on as this variable which means we

00:19:36,780 --> 00:19:39,670
can write well we start by loading in

00:19:39,240 --> 00:19:42,520
cash

00:19:39,670 --> 00:19:45,670
it's cast which we return the cast and

00:19:42,520 --> 00:19:47,590
so and so on but when we query the

00:19:45,670 --> 00:19:49,600
blacklisting provider and use this

00:19:47,590 --> 00:19:53,820
hostname that was passed on in the

00:19:49,600 --> 00:19:57,910
configuration which means we can we can

00:19:53,820 --> 00:20:04,720
pretty much make up any require

00:19:57,910 --> 00:20:06,810
directive that we want to use yeah and

00:20:04,720 --> 00:20:08,980
you just continue on through some

00:20:06,810 --> 00:20:11,530
scripting instead and when I say

00:20:08,980 --> 00:20:13,210
scripting I mean you're basically your

00:20:11,530 --> 00:20:18,940
basic web applications what you would

00:20:13,210 --> 00:20:24,520
usually use PHP or asp or JSP or CDI for

00:20:18,940 --> 00:20:27,840
and it's it's pretty easy to set up in

00:20:24,520 --> 00:20:32,710
maaloula what you do is you have your

00:20:27,840 --> 00:20:35,260
files match must fight with PHP he said

00:20:32,710 --> 00:20:38,290
that every file that matches start low

00:20:35,260 --> 00:20:40,980
and the end you set handler lua script

00:20:38,290 --> 00:20:44,620
or you can just do the AL handler

00:20:40,980 --> 00:20:47,650
directive and and that's pretty much all

00:20:44,620 --> 00:20:50,710
you need to start using my lure for web

00:20:47,650 --> 00:20:55,450
applications so let's just take a simple

00:20:50,710 --> 00:20:58,840
ph sample PHP script that prints hello

00:20:55,450 --> 00:21:01,840
world or n Ruby script I know the author

00:20:58,840 --> 00:21:07,810
of the mod and Ruby is somewhere in the

00:21:01,840 --> 00:21:10,630
crowd and you can turn it into a lua

00:21:07,810 --> 00:21:13,450
script that sets the content type to

00:21:10,630 --> 00:21:19,410
text slash HTML and then prints all

00:21:13,450 --> 00:21:24,580
rights hello world and returns okay so

00:21:19,410 --> 00:21:28,540
how fast is that well it's it's also

00:21:24,580 --> 00:21:31,960
pretty done fast i can tell you what i

00:21:28,540 --> 00:21:35,250
mean by how fast is this is how fast can

00:21:31,960 --> 00:21:40,270
i print hello world and then just exit

00:21:35,250 --> 00:21:41,120
compared to PHP or mario and ruby or mod

00:21:40,270 --> 00:21:44,360
perl

00:21:41,120 --> 00:21:47,990
or whatever you would do more a static

00:21:44,360 --> 00:21:50,660
file and this is the result as you can

00:21:47,990 --> 00:21:54,950
see with one client it's pretty much

00:21:50,660 --> 00:21:58,610
even but with 30 or 500 clients Melua is

00:21:54,950 --> 00:22:03,860
doing about 40,000 requests per second

00:21:58,610 --> 00:22:08,390
on this test machine I tested it against

00:22:03,860 --> 00:22:13,370
Matt PHP with the APC because PHP guys

00:22:08,390 --> 00:22:15,590
always complain if it's not with ABC and

00:22:13,370 --> 00:22:18,800
I've also tested it against not Ruby

00:22:15,590 --> 00:22:23,030
which claims to be faster than mallu one

00:22:18,800 --> 00:22:25,850
which is true but not true you'll see I

00:22:23,030 --> 00:22:28,220
have a dark blue bar and I have a light

00:22:25,850 --> 00:22:30,260
blue bar the light blue bar is what my

00:22:28,220 --> 00:22:34,580
lure wood from how long you will perform

00:22:30,260 --> 00:22:37,370
if you do not set the correct scope and

00:22:34,580 --> 00:22:39,110
the lie the dark blue is how my lure

00:22:37,370 --> 00:22:40,850
performs if you set the correct scope

00:22:39,110 --> 00:22:44,030
and you'll see it's also faster than

00:22:40,850 --> 00:22:49,040
floating a static file so it's it's

00:22:44,030 --> 00:22:52,550
pretty well as very fast next I'll be

00:22:49,040 --> 00:22:54,920
showing two examples of what we use

00:22:52,550 --> 00:23:00,080
mullu before in the apache software

00:22:54,920 --> 00:23:02,540
foundation and we have currently well we

00:23:00,080 --> 00:23:05,390
have a lot of projects using lua but we

00:23:02,540 --> 00:23:09,620
have two projects using melua the first

00:23:05,390 --> 00:23:12,530
one using melua is comments nada patty

00:23:09,620 --> 00:23:16,309
org which was the first fluid ribbon asf

00:23:12,530 --> 00:23:19,190
side and I same out the words actually

00:23:16,309 --> 00:23:23,870
called not ploua and so the root

00:23:19,190 --> 00:23:26,750
derivative of Melua but it works it's

00:23:23,870 --> 00:23:28,700
basically the same and the comment

00:23:26,750 --> 00:23:32,860
system as you can see yadda yadda yadda

00:23:28,700 --> 00:23:36,080
as some may I commenting system to all

00:23:32,860 --> 00:23:38,380
projects at which to make use of it if

00:23:36,080 --> 00:23:41,809
if any of you are a committer on a

00:23:38,380 --> 00:23:45,350
project that would like some commenting

00:23:41,809 --> 00:23:47,679
system on your website you can just ping

00:23:45,350 --> 00:23:51,340
me or anyone from the info team and

00:23:47,679 --> 00:23:53,530
we'll set you up

00:23:51,340 --> 00:23:56,640
an example screenshot here how it works

00:23:53,530 --> 00:23:59,050
is must like discuss a life fire or

00:23:56,640 --> 00:24:03,310
whatever you would use except it's

00:23:59,050 --> 00:24:06,580
apache software licensed the second side

00:24:03,310 --> 00:24:09,310
we have which is using genuine mob lua

00:24:06,580 --> 00:24:13,030
is called Mario start apache dork with

00:24:09,310 --> 00:24:15,640
his an old site but it's also a new site

00:24:13,030 --> 00:24:21,310
in that it's been revamped quite

00:24:15,640 --> 00:24:24,430
recently about one month ago which is

00:24:21,310 --> 00:24:27,760
the place for module haces to pretend

00:24:24,430 --> 00:24:29,590
the modules for the httpd and the

00:24:27,760 --> 00:24:33,060
american also works as an aggregator

00:24:29,590 --> 00:24:36,460
fetching dope files around the world

00:24:33,060 --> 00:24:41,320
which is pretty cool but nobody is using

00:24:36,460 --> 00:24:45,120
it yet but that's ok and it also uses

00:24:41,320 --> 00:24:47,500
the the comment system what's

00:24:45,120 --> 00:24:50,440
interesting about Martin's that the path

00:24:47,500 --> 00:24:52,660
of the road is that it's the as you can

00:24:50,440 --> 00:24:54,970
see it's starting using my lure with

00:24:52,660 --> 00:24:57,960
database access for web applications so

00:24:54,970 --> 00:25:02,020
we needed Martin lure to be able to

00:24:57,960 --> 00:25:06,400
connect to a database and do some

00:25:02,020 --> 00:25:11,590
queries and get some results we couldn't

00:25:06,400 --> 00:25:14,920
used for example new SQL or sequel but

00:25:11,590 --> 00:25:16,990
that's just in my opinion is horrible

00:25:14,920 --> 00:25:19,990
library doesn't support prepared

00:25:16,990 --> 00:25:23,470
statements and you cannot tie it into my

00:25:19,990 --> 00:25:27,370
DVD and my DVD is quite ingenious

00:25:23,470 --> 00:25:29,410
because it allows four or five to six

00:25:27,370 --> 00:25:34,240
seven eight different modules to use the

00:25:29,410 --> 00:25:37,240
same database pool which means a lot

00:25:34,240 --> 00:25:41,410
less resources used and a lot faster

00:25:37,240 --> 00:25:44,950
responses so we had some technical

00:25:41,410 --> 00:25:48,550
difficulties it was lagging so the

00:25:44,950 --> 00:25:53,820
solution was we added some database nut

00:25:48,550 --> 00:25:58,710
to module which is now in apache HTTP

00:25:53,820 --> 00:26:02,010
244 and i'll just show you how it works

00:25:58,710 --> 00:26:06,330
this is an example squid that just

00:26:02,010 --> 00:26:11,700
acquires whatever database you had set

00:26:06,330 --> 00:26:13,919
up in my DVD and if that works it files

00:26:11,700 --> 00:26:17,490
of a query that selects a name from

00:26:13,919 --> 00:26:20,370
through one and then fetches all the

00:26:17,490 --> 00:26:23,490
rows and print them out and then closest

00:26:20,370 --> 00:26:27,390
it and I want to stress that if you use

00:26:23,490 --> 00:26:30,510
this DB acquire you must always call d

00:26:27,390 --> 00:26:33,570
be close it will close automatically if

00:26:30,510 --> 00:26:36,539
it's garbage collected but you will

00:26:33,570 --> 00:26:40,860
usually end up having all of you pull

00:26:36,539 --> 00:26:44,130
all of your connections being a stall as

00:26:40,860 --> 00:26:47,070
a keepalive state and not being returned

00:26:44,130 --> 00:26:53,610
to the pool so please always remember to

00:26:47,070 --> 00:26:56,460
close them and sort of finally we're

00:26:53,610 --> 00:26:59,220
gonna go and see some goodies and trunk

00:26:56,460 --> 00:27:02,070
and the first thing I want to show you

00:26:59,220 --> 00:27:05,750
is the filters that I talked about at

00:27:02,070 --> 00:27:08,850
the beginning this is an input filter

00:27:05,750 --> 00:27:11,490
which basically takes the PHP opening

00:27:08,850 --> 00:27:14,520
tag from any file that is uploaded and

00:27:11,490 --> 00:27:19,010
changes it to the HTML escaped version

00:27:14,520 --> 00:27:25,070
of it and and if how many of you has

00:27:19,010 --> 00:27:30,240
actually made a filter module in C oh

00:27:25,070 --> 00:27:33,149
whoa that's a lot of people and okay so

00:27:30,240 --> 00:27:35,520
I have a lot of people here who should

00:27:33,149 --> 00:27:41,010
also know that it's not always that easy

00:27:35,520 --> 00:27:43,230
to make a filter in C but fortunately is

00:27:41,010 --> 00:27:48,690
quite easy to make it in Lua because

00:27:43,230 --> 00:27:53,090
I've done all the very annoying work and

00:27:48,690 --> 00:27:55,500
as you can see it all it requires well

00:27:53,090 --> 00:27:58,500
five lines of code and you have a

00:27:55,500 --> 00:28:00,690
working filter in Maaloula

00:27:58,500 --> 00:28:03,240
the input directive is the one input

00:28:00,690 --> 00:28:06,900
filter much like the how the hook

00:28:03,240 --> 00:28:10,200
directors work and the you'll see the

00:28:06,900 --> 00:28:12,600
the first coat if if any of you know

00:28:10,200 --> 00:28:15,210
what co routines is in lua if you don't

00:28:12,600 --> 00:28:17,760
know it you should look it up and it's

00:28:15,210 --> 00:28:20,670
like the the web version of threading

00:28:17,760 --> 00:28:24,410
where you can pause a function and then

00:28:20,670 --> 00:28:27,240
you can return to it at some other point

00:28:24,410 --> 00:28:32,670
the reason why you have to pause it at

00:28:27,240 --> 00:28:34,350
first you'll see up here the reason why

00:28:32,670 --> 00:28:37,350
you have to pause it i'll explain that

00:28:34,350 --> 00:28:39,840
in a bit but basically what this

00:28:37,350 --> 00:28:43,500
function is doing is the same while

00:28:39,840 --> 00:28:46,290
there is a bucket if it matches the PHP

00:28:43,500 --> 00:28:48,900
opening tag then replace the PHP open

00:28:46,290 --> 00:28:53,220
tag with the National escaped version of

00:28:48,900 --> 00:28:56,510
it and then yielded back to the brigade

00:28:53,220 --> 00:29:00,510
or the next filter and in the chain and

00:28:56,510 --> 00:29:03,750
the next example is an output filter

00:29:00,510 --> 00:29:08,040
which is sort of exciting because it's

00:29:03,750 --> 00:29:13,140
the newer version of monte flight which

00:29:08,040 --> 00:29:20,070
is y a pig that's how fast you can add a

00:29:13,140 --> 00:29:22,650
deflate module to httpd and you'll see

00:29:20,070 --> 00:29:27,030
here that that before I'd use my first

00:29:22,650 --> 00:29:29,310
yield and the decor routine I'm setting

00:29:27,030 --> 00:29:33,600
some headers and that's the point of

00:29:29,310 --> 00:29:35,580
this coyote no routine yield is that I

00:29:33,600 --> 00:29:39,510
can set some headers and then I can

00:29:35,580 --> 00:29:42,060
yield which makes httpd we zoom and then

00:29:39,510 --> 00:29:46,080
send out these headers and then I can go

00:29:42,060 --> 00:29:49,890
on to say for each pocket I will write

00:29:46,080 --> 00:29:56,970
into the Z lip stream and I will / get

00:29:49,890 --> 00:30:02,700
in a low yield the deflated result back

00:29:56,970 --> 00:30:07,380
to the two httpd and as a chunk of

00:30:02,700 --> 00:30:08,640
deflated content so you can do that in

00:30:07,380 --> 00:30:12,000
trunk

00:30:08,640 --> 00:30:13,740
and it's very fun to experiment with you

00:30:12,000 --> 00:30:15,840
can also just do basic stuff like

00:30:13,740 --> 00:30:19,860
converting everything to uppercase or

00:30:15,840 --> 00:30:26,670
lowercase if you like that uppercase or

00:30:19,860 --> 00:30:29,130
lowercase you've gone the next thing is

00:30:26,670 --> 00:30:32,280
something i should be back porting i

00:30:29,130 --> 00:30:37,490
don't know why i haven't it's the do a

00:30:32,280 --> 00:30:40,710
code cash option which basically enables

00:30:37,490 --> 00:30:42,450
Melua to run a stat on a file and we

00:30:40,710 --> 00:30:46,380
compile the bytecode at the finest

00:30:42,450 --> 00:30:49,410
change and if it has not changed it will

00:30:46,380 --> 00:30:52,680
use the cast version currently mod the

00:30:49,410 --> 00:30:55,440
world never checks is a file exchange so

00:30:52,680 --> 00:31:00,090
you have to I'm afraid to say so you

00:30:55,440 --> 00:31:03,540
have to reload well restart httpd if

00:31:00,090 --> 00:31:05,340
your file has changed but if you use the

00:31:03,540 --> 00:31:08,880
trunk version you can set this blue a

00:31:05,340 --> 00:31:12,450
code cache directed to stat which you

00:31:08,880 --> 00:31:15,350
will in the case of hooks it will run a

00:31:12,450 --> 00:31:20,070
stat and check is if the file is on

00:31:15,350 --> 00:31:23,670
running off time agassi oh well I just

00:31:20,070 --> 00:31:25,440
set it to start and you'll be fine the

00:31:23,670 --> 00:31:27,630
next thing is in the one map handler

00:31:25,440 --> 00:31:31,070
will just skip that because it's I I

00:31:27,630 --> 00:31:34,290
haven't figured out why we have that yet

00:31:31,070 --> 00:31:36,720
but it looks that it's sort of like a

00:31:34,290 --> 00:31:39,780
newer version of mod rewrite you can

00:31:36,720 --> 00:31:43,860
rewrite a request to a certain script

00:31:39,780 --> 00:31:46,380
and a function handle where you can use

00:31:43,860 --> 00:31:50,970
back references so you can map for

00:31:46,380 --> 00:31:55,410
example / through / ABC to the food Luis

00:31:50,970 --> 00:31:57,890
script and the ABC handle function so if

00:31:55,410 --> 00:32:02,420
anyone can figure out what to do with it

00:31:57,890 --> 00:32:06,800
please come and tell me we also have

00:32:02,420 --> 00:32:11,490
support for red X or glop &

00:32:06,800 --> 00:32:13,590
expression pasa so you can use you can

00:32:11,490 --> 00:32:15,720
use the regular lure patterns if you

00:32:13,590 --> 00:32:18,180
like speed you can use your badge X if

00:32:15,720 --> 00:32:21,540
you want something very advanced and it

00:32:18,180 --> 00:32:27,120
capture ously whatever you want it to

00:32:21,540 --> 00:32:30,270
capture and the globe support is most

00:32:27,120 --> 00:32:34,950
like what you use in the server alias

00:32:30,270 --> 00:32:37,320
director and the expression is what you

00:32:34,950 --> 00:32:42,240
would use in an if statement so you can

00:32:37,320 --> 00:32:45,390
evaluate a near statement as you can see

00:32:42,240 --> 00:32:49,560
and there's a whole bunch of other stuff

00:32:45,390 --> 00:32:53,370
that was base64 and defies shall 1 & Co

00:32:49,560 --> 00:32:55,770
encoding encryption HTML escaping on

00:32:53,370 --> 00:32:58,590
escaping you can retrieve server

00:32:55,770 --> 00:33:02,190
settings you can change service settings

00:32:58,590 --> 00:33:05,750
on the fly if you dare you can have

00:33:02,190 --> 00:33:09,750
scoreboard or worker information like

00:33:05,750 --> 00:33:12,270
much status and we'll just have an

00:33:09,750 --> 00:33:15,990
example of that this is what my status

00:33:12,270 --> 00:33:24,320
looks like in the world and if I can

00:33:15,990 --> 00:33:24,320
just show you real quick if it works

00:33:24,550 --> 00:33:31,020
it does not work I'm afraid but it has a

00:33:31,860 --> 00:33:40,690
life update a real-time update of what

00:33:37,570 --> 00:33:46,260
your server is doing in the load and so

00:33:40,690 --> 00:33:46,260
on and so on so that's cool that's just

00:33:46,530 --> 00:33:55,510
as you can see is it changes yeah and

00:33:52,950 --> 00:33:59,320
last but not least some optimization

00:33:55,510 --> 00:34:02,770
techniques as I said usually threat

00:33:59,320 --> 00:34:05,920
scope for all requests so you get the

00:34:02,770 --> 00:34:08,679
dark blue bar and not the light blue bar

00:34:05,920 --> 00:34:10,420
as I shown in the chart earlier if you

00:34:08,679 --> 00:34:12,550
can't afford a threat scope use a

00:34:10,420 --> 00:34:15,790
service scope which is kind of like

00:34:12,550 --> 00:34:17,350
muddy pool it's just scraps Lewis

00:34:15,790 --> 00:34:19,570
straight from the pool and then releases

00:34:17,350 --> 00:34:22,510
it back when it's not being used you can

00:34:19,570 --> 00:34:24,700
use that as you see at the bottom to

00:34:22,510 --> 00:34:26,410
create a smaller pool that's smaller

00:34:24,700 --> 00:34:32,440
than the number of states you have and

00:34:26,410 --> 00:34:34,750
those we use less memory unless you make

00:34:32,440 --> 00:34:38,830
it leak in which case is you use the

00:34:34,750 --> 00:34:42,310
ones or the connection scope as is that

00:34:38,830 --> 00:34:45,370
by default it does not start scripts so

00:34:42,310 --> 00:34:50,020
please use lower code cast so to start

00:34:45,370 --> 00:34:53,140
as you can and finally always in

00:34:50,020 --> 00:34:57,490
Portlaoise into the global scope as you

00:34:53,140 --> 00:35:00,040
can see declare master or constants and

00:34:57,490 --> 00:35:02,590
require stuff before you have your

00:35:00,040 --> 00:35:06,040
function do not excite them within your

00:35:02,590 --> 00:35:10,420
function and we are really running out

00:35:06,040 --> 00:35:11,850
of time so I'll just skip past the sea

00:35:10,420 --> 00:35:26,560
stuff and

00:35:11,850 --> 00:35:29,920
ask if there are any questions with a

00:35:26,560 --> 00:35:32,619
given a patchy hook we also have the

00:35:29,920 --> 00:35:35,110
ability to say run very first run last

00:35:32,619 --> 00:35:37,720
run somewhere in the middle so that you

00:35:35,110 --> 00:35:41,640
can reprioritize which witch hook

00:35:37,720 --> 00:35:43,780
handler is going to react first I

00:35:41,640 --> 00:35:46,210
looking at your examples is there a way

00:35:43,780 --> 00:35:50,470
to refine that control yeah you can you

00:35:46,210 --> 00:35:52,600
can make it one first or last I I don't

00:35:50,470 --> 00:35:54,880
think it's all hooks that have

00:35:52,600 --> 00:35:59,440
visibility but most folks have the first

00:35:54,880 --> 00:36:01,119
last and middle so you look at the model

00:35:59,440 --> 00:36:04,150
or documentation you can see which of

00:36:01,119 --> 00:36:07,960
the hooks can be hooked first last

00:36:04,150 --> 00:36:11,860
middle so it's it's possible it's it's

00:36:07,960 --> 00:36:16,660
in the code at least so it's definitely

00:36:11,860 --> 00:36:18,310
possible and what's the overhead of the

00:36:16,660 --> 00:36:19,630
garbage collector looked like assuming

00:36:18,310 --> 00:36:22,090
that you've got it configured for the

00:36:19,630 --> 00:36:24,160
best scope I was kind of thinking about

00:36:22,090 --> 00:36:26,580
that mod deflate example like it looks

00:36:24,160 --> 00:36:28,930
like you might be shoving a string like

00:36:26,580 --> 00:36:33,670
shoving the entire contents of whatever

00:36:28,930 --> 00:36:34,690
the request is as a lewis string and

00:36:33,670 --> 00:36:35,859
then bringing it back out i was

00:36:34,690 --> 00:36:37,359
wondering if that was going to really

00:36:35,859 --> 00:36:39,100
impact the garbage collection if you've

00:36:37,359 --> 00:36:42,580
measured the CPU overhead can you speak

00:36:39,100 --> 00:36:44,470
up a bit I'm wondering about the garbage

00:36:42,580 --> 00:36:46,750
collection overhead assuming that you

00:36:44,470 --> 00:36:49,690
have it set with the best possible scope

00:36:46,750 --> 00:36:51,340
as you described yeah especially in that

00:36:49,690 --> 00:36:54,340
deflate example where it looks like the

00:36:51,340 --> 00:36:56,710
entire contents of a request body might

00:36:54,340 --> 00:36:59,440
be shoved into a Lewis sorry no no no no

00:36:56,710 --> 00:37:03,790
that's not what happens it let me just

00:36:59,440 --> 00:37:06,400
go back now what happens is a chunk of

00:37:03,790 --> 00:37:10,030
the request body it is this you're

00:37:06,400 --> 00:37:13,180
wondering about it's a bucket that gets

00:37:10,030 --> 00:37:18,540
shot in and deflated so it's a couple of

00:37:13,180 --> 00:37:22,020
kilobytes at most at a time which then

00:37:18,540 --> 00:37:25,920
and once you've deflated it and posted

00:37:22,020 --> 00:37:27,450
back to httpd the deflated content goes

00:37:25,920 --> 00:37:32,240
out of scope and it gets garbage

00:37:27,450 --> 00:37:35,040
collected so you'll be using as a threat

00:37:32,240 --> 00:37:39,890
generally uses between 50 and 200

00:37:35,040 --> 00:37:42,270
kilobytes of memory / / / low estate

00:37:39,890 --> 00:37:44,280
consider so if you're the hot servers

00:37:42,270 --> 00:37:45,690
serving lateral classmates you know

00:37:44,280 --> 00:37:47,640
bringing these chunks of memory in and

00:37:45,690 --> 00:37:50,280
out like what's the percentage of CPU

00:37:47,640 --> 00:37:51,510
time that's or what's the kind of the

00:37:50,280 --> 00:37:55,890
CPU overhead up the garbage collector

00:37:51,510 --> 00:37:59,130
I'm sorry what is the CPU overhead of

00:37:55,890 --> 00:38:09,540
the garbage collector I have no idea

00:37:59,130 --> 00:38:12,630
actually anybody else nope okay well

00:38:09,540 --> 00:38:16,260
thank you for listening to my rambling

00:38:12,630 --> 00:38:20,840
and we'll have some lightning talks in

00:38:16,260 --> 00:38:20,840

YouTube URL: https://www.youtube.com/watch?v=vAkBIAn7d8c


