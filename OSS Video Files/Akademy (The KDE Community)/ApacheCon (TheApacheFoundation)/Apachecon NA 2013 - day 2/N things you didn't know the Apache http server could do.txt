Title: N things you didn't know the Apache http server could do
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Rich Bowen
ApacheCon NA 2013
A Patchy Web
Captions: 
	00:00:00,000 --> 00:00:03,750
so I see at least six of you out there

00:00:01,920 --> 00:00:07,440
who should know all these things and

00:00:03,750 --> 00:00:11,550
there will be a test afterwards several

00:00:07,440 --> 00:00:12,900
years ago I attended a talk it was

00:00:11,550 --> 00:00:15,210
actually i think it was in portland it

00:00:12,900 --> 00:00:18,630
was mark jason dominus and he used this

00:00:15,210 --> 00:00:20,760
metaphor and everyone in the audience

00:00:18,630 --> 00:00:23,010
looks at that picture and some of you

00:00:20,760 --> 00:00:25,439
think I know exactly what that is I use

00:00:23,010 --> 00:00:28,050
it all the time and the rest of you have

00:00:25,439 --> 00:00:30,539
no idea what it is and this is teflon

00:00:28,050 --> 00:00:32,610
tape you put it on on plumbing threads

00:00:30,539 --> 00:00:33,930
when you screw two pieces of plumbing

00:00:32,610 --> 00:00:36,360
together and it makes it easier it makes

00:00:33,930 --> 00:00:38,579
it seal and once you know about it you

00:00:36,360 --> 00:00:40,350
use it all the time and you think that

00:00:38,579 --> 00:00:44,520
everyone in the world knows about them

00:00:40,350 --> 00:00:46,440
and so he sort of gave me the idea of

00:00:44,520 --> 00:00:49,020
this sort of talk the the teflon tape

00:00:46,440 --> 00:00:50,820
talk it's all these things that once you

00:00:49,020 --> 00:00:54,780
know about them you use them everyday

00:00:50,820 --> 00:00:56,579
and the rest of you you know hopefully

00:00:54,780 --> 00:00:58,739
some of you will see some of these

00:00:56,579 --> 00:01:00,270
things and think oh I've never known

00:00:58,739 --> 00:01:01,739
that and that looks really useful so

00:01:00,270 --> 00:01:04,979
that's that's sort of the goal here and

00:01:01,739 --> 00:01:06,750
I'm going to start with one that I've

00:01:04,979 --> 00:01:08,220
actually mentioned before this week so

00:01:06,750 --> 00:01:10,560
if you've attended my talks you already

00:01:08,220 --> 00:01:14,100
seen this this is the fallback resource

00:01:10,560 --> 00:01:17,640
directive this is in two dot-to-dot 16

00:01:14,100 --> 00:01:19,229
and this is what it looks like well not

00:01:17,640 --> 00:01:20,939
really you've all seen this

00:01:19,229 --> 00:01:23,759
configuration any time that you've

00:01:20,939 --> 00:01:27,450
installed WordPress or Drupal or who

00:01:23,759 --> 00:01:29,430
knows what all and it says if somebody

00:01:27,450 --> 00:01:33,829
requests something that isn't a real

00:01:29,430 --> 00:01:37,700
thing then serve index dot PHP instead

00:01:33,829 --> 00:01:42,270
so it's sort of what is referred to in

00:01:37,700 --> 00:01:46,140
computer science as a a front controller

00:01:42,270 --> 00:01:47,759
or a fallback resource and the trouble

00:01:46,140 --> 00:01:50,220
is that it doesn't always work it can

00:01:47,759 --> 00:01:52,020
break embedded images it can screw up

00:01:50,220 --> 00:01:54,960
your CSS if you don't do it quite right

00:01:52,020 --> 00:01:58,979
so into dot-to-dot 16 we added a

00:01:54,960 --> 00:02:00,990
directive called fallback resource which

00:01:58,979 --> 00:02:04,979
does that same thing and here's what it

00:02:00,990 --> 00:02:08,520
looks like this directive says if

00:02:04,979 --> 00:02:10,530
somebody requests something and we're

00:02:08,520 --> 00:02:12,950
not sure what it is send them here

00:02:10,530 --> 00:02:12,950
instead

00:02:12,990 --> 00:02:17,700
any so now if you install WordPress and

00:02:15,990 --> 00:02:18,840
they give you this htaccess file that

00:02:17,700 --> 00:02:21,210
you're supposed to put in your document

00:02:18,840 --> 00:02:23,520
root you can delete that and replace it

00:02:21,210 --> 00:02:24,840
with that one line of configuration and

00:02:23,520 --> 00:02:29,880
everything works the way it's supposed

00:02:24,840 --> 00:02:32,220
to so see isn't that better and they do

00:02:29,880 --> 00:02:36,990
they do exactly the same thing except

00:02:32,220 --> 00:02:44,310
fallback resource is not fragile number

00:02:36,990 --> 00:02:47,880
to the server info handler is provided

00:02:44,310 --> 00:02:49,890
by a module called mod info and this is

00:02:47,880 --> 00:02:53,130
a module that's been around forever and

00:02:49,890 --> 00:02:56,100
ever and if you enable it in your

00:02:53,130 --> 00:02:58,050
configuration it gives you a a place

00:02:56,100 --> 00:03:00,990
where you can go get basic information

00:02:58,050 --> 00:03:04,200
about your server configuration one of

00:03:00,990 --> 00:03:09,090
those things is if you access server

00:03:04,200 --> 00:03:11,340
info ? config it will give you a dump of

00:03:09,090 --> 00:03:14,340
what it believes your configuration file

00:03:11,340 --> 00:03:16,980
looks like this is useful for a number

00:03:14,340 --> 00:03:18,420
of reasons if you are not sure you know

00:03:16,980 --> 00:03:20,160
if your configuration is split over

00:03:18,420 --> 00:03:21,690
multiple files and you're not sure what

00:03:20,160 --> 00:03:24,620
order they're loaded in and you're not

00:03:21,690 --> 00:03:28,440
sure what overrides what this gives you

00:03:24,620 --> 00:03:31,710
what it thinks your configuration is it

00:03:28,440 --> 00:03:36,870
shows you what line number and what file

00:03:31,710 --> 00:03:41,550
number everything came from and what

00:03:36,870 --> 00:03:43,410
order directives are applied in so by

00:03:41,550 --> 00:03:45,900
the way server info also has a couple

00:03:43,410 --> 00:03:47,400
other useful features if you do ? list

00:03:45,900 --> 00:03:51,690
it shows you what modules you have

00:03:47,400 --> 00:03:54,390
loaded and if you do ? and then the name

00:03:51,690 --> 00:03:56,610
of a module it shows you two things it

00:03:54,390 --> 00:03:59,190
shows you what directives are available

00:03:56,610 --> 00:04:02,370
in that module and which ones you're

00:03:59,190 --> 00:04:05,490
using and where so presumably this would

00:04:02,370 --> 00:04:07,440
give you a quick way to say am I in fact

00:04:05,490 --> 00:04:12,420
using this module because if I'm not

00:04:07,440 --> 00:04:13,860
maybe I should unload it a couple other

00:04:12,420 --> 00:04:16,109
ones you can get a hook of a list of

00:04:13,860 --> 00:04:20,690
hooks and you can get the server build

00:04:16,109 --> 00:04:20,690
information so that's a cool feature

00:04:21,250 --> 00:04:29,030
number three SNI so it's common wisdom

00:04:25,880 --> 00:04:31,520
everyone knows that you can't run

00:04:29,030 --> 00:04:34,910
name-based virtual hosts with ssl and

00:04:31,520 --> 00:04:37,670
this is because ssl the way it works is

00:04:34,910 --> 00:04:39,530
you have this server client handshake

00:04:37,670 --> 00:04:42,910
that happens on the initial connection

00:04:39,530 --> 00:04:45,830
and that happens based on the IP address

00:04:42,910 --> 00:04:47,120
well more specifically at the time of

00:04:45,830 --> 00:04:49,970
the connection it doesn't know the

00:04:47,120 --> 00:04:51,920
hostname and so the certificate is sent

00:04:49,970 --> 00:04:56,390
before you know what hostname you're

00:04:51,920 --> 00:04:58,280
talking about SNI is something that's

00:04:56,390 --> 00:05:00,950
been in the Apache web server for a

00:04:58,280 --> 00:05:04,130
little while it actually addresses this

00:05:00,950 --> 00:05:10,130
problem yes and I protocol itself is a

00:05:04,130 --> 00:05:14,480
way to get around this limitation this

00:05:10,130 --> 00:05:18,710
is a server configuration that does

00:05:14,480 --> 00:05:22,450
name-based virtual hosting using sni yes

00:05:18,710 --> 00:05:22,450
Igor is going to be a troublemaker

00:05:27,639 --> 00:05:35,319
you said this is a talk about news in 2

00:05:32,020 --> 00:05:41,499
dot 4 do we still need for sni name

00:05:35,319 --> 00:05:49,090
virtual host you know I'm not sure do we

00:05:41,499 --> 00:05:52,689
I don't know I I think Eric should but

00:05:49,090 --> 00:05:55,539
he isn't here yeah i'm not sure i'll

00:05:52,689 --> 00:05:59,460
have to try yeah we should we should try

00:05:55,539 --> 00:05:59,460
we should update the documentation

00:06:03,779 --> 00:06:11,710
alright so and then this is your your

00:06:07,180 --> 00:06:13,599
virtual host your ssl virtual hosts will

00:06:11,710 --> 00:06:14,830
look the same as they've always looked

00:06:13,599 --> 00:06:17,349
there's very little difference in

00:06:14,830 --> 00:06:19,960
configuration and the web server does

00:06:17,349 --> 00:06:23,669
the right thing which is very cool these

00:06:19,960 --> 00:06:23,669
are browsers that support this and

00:06:23,699 --> 00:06:28,569
unfortunately this limits you a little

00:06:26,139 --> 00:06:34,930
bit if your if your client base is still

00:06:28,569 --> 00:06:36,969
using IE 6 the documentation as was just

00:06:34,930 --> 00:06:39,069
alluded to is not entirely up to date on

00:06:36,969 --> 00:06:43,270
this particular feature but it is

00:06:39,069 --> 00:06:45,909
discussed in the wiki at wiki apache org

00:06:43,270 --> 00:06:49,060
slash httpd which is kind of our staging

00:06:45,909 --> 00:06:50,860
ground for new documentation you might

00:06:49,060 --> 00:06:55,750
want to look there for things that are

00:06:50,860 --> 00:06:57,129
not updated in the official docs yet and

00:06:55,750 --> 00:06:59,289
it go over this one real quickly because

00:06:57,129 --> 00:07:00,669
if you've been at any of the 2.4 talks

00:06:59,289 --> 00:07:05,229
of this conference you've already seen

00:07:00,669 --> 00:07:08,620
this we've added per per module log

00:07:05,229 --> 00:07:11,500
level configuration in 2.4 and that

00:07:08,620 --> 00:07:13,659
looks something like this log level you

00:07:11,500 --> 00:07:15,279
specify the global log level and then

00:07:13,659 --> 00:07:20,339
you specify the log level for the

00:07:15,279 --> 00:07:23,560
specifics module this also replaces any

00:07:20,339 --> 00:07:26,110
modules that we're doing specific per

00:07:23,560 --> 00:07:29,919
module logging has now been moved to

00:07:26,110 --> 00:07:32,020
this general mechanism and you can see

00:07:29,919 --> 00:07:34,990
the logs for a particular module by

00:07:32,020 --> 00:07:37,360
looking at for that module name in the

00:07:34,990 --> 00:07:39,219
global error log I tend to think of it

00:07:37,360 --> 00:07:40,870
these days as the debug log rather than

00:07:39,219 --> 00:07:41,529
the error log because it contains so

00:07:40,870 --> 00:07:45,669
much more than

00:07:41,529 --> 00:07:48,579
just error messages by the way there's

00:07:45,669 --> 00:07:50,259
also a new error log format directive

00:07:48,579 --> 00:07:58,149
which allows you to specify the format

00:07:50,259 --> 00:07:59,499
of the error log wait yes since you're

00:07:58,149 --> 00:08:03,989
mentioning error logs and now moving

00:07:59,499 --> 00:08:08,319
away from them may be important news for

00:08:03,989 --> 00:08:09,759
force are no longer arrows so if you're

00:08:08,319 --> 00:08:11,739
looking for those in your log and they

00:08:09,759 --> 00:08:16,839
are not appearing it's because we moved

00:08:11,739 --> 00:08:20,379
them to a different error level okay and

00:08:16,839 --> 00:08:23,409
what is it now the next one the next one

00:08:20,379 --> 00:08:28,409
up which is worn or a crit or something

00:08:23,409 --> 00:08:30,669
in info i think info okay all right all

00:08:28,409 --> 00:08:32,379
right now here's something that everyone

00:08:30,669 --> 00:08:34,990
needs this is an important new feature

00:08:32,379 --> 00:08:41,649
in 24 I need your attention on this this

00:08:34,990 --> 00:08:44,980
is mod modem and no seriously this is a

00:08:41,649 --> 00:08:47,920
new module with 2.4 it provides the

00:08:44,980 --> 00:08:50,019
functionality to run your server at

00:08:47,920 --> 00:08:56,309
speeds comparable to the old modem

00:08:50,019 --> 00:08:56,309
standards and this is the configuration

00:08:57,839 --> 00:09:04,319
if you don't believe me you just have to

00:09:00,100 --> 00:09:07,480
go look at the docks and you can specify

00:09:04,319 --> 00:09:10,180
one of these for possible modem

00:09:07,480 --> 00:09:12,879
standards and it will run your your web

00:09:10,180 --> 00:09:19,559
server at the appropriate speed for that

00:09:12,879 --> 00:09:19,559
modem standard yeah okay moving along

00:09:20,780 --> 00:09:26,610
mod macro this is exciting news mod

00:09:24,690 --> 00:09:28,920
macro is has long been one of my

00:09:26,610 --> 00:09:31,680
favorite modules it allows you to do

00:09:28,920 --> 00:09:34,800
stuff like this you define a macro with

00:09:31,680 --> 00:09:36,750
one or more variables and then you

00:09:34,800 --> 00:09:39,870
invoke that macro as many times as you

00:09:36,750 --> 00:09:42,600
want this gets executed when the when

00:09:39,870 --> 00:09:48,240
the server parses the configuration file

00:09:42,600 --> 00:09:51,840
and it generates a configuration based

00:09:48,240 --> 00:09:57,360
on that which it then loads this is a

00:09:51,840 --> 00:09:59,970
third-party module and just recently it

00:09:57,360 --> 00:10:03,930
was contributed to the httpd project it

00:09:59,970 --> 00:10:05,670
is now in trunk and we'll be in the 2.6

00:10:03,930 --> 00:10:10,260
release unless somebody backports it

00:10:05,670 --> 00:10:14,240
earlier than that so if you don't want

00:10:10,260 --> 00:10:16,620
to wait then you can in fact get it at 0

00:10:14,240 --> 00:10:20,430
wrong slide you can in fact yet it at

00:10:16,620 --> 00:10:22,200
this URL but eventually this will be

00:10:20,430 --> 00:10:29,820
part of part of the core release which

00:10:22,200 --> 00:10:31,410
is exciting number 7 index stylesheet so

00:10:29,820 --> 00:10:35,040
everyone knows that you can generate a

00:10:31,410 --> 00:10:37,460
directory listing on your website and it

00:10:35,040 --> 00:10:40,860
looks like this and it's kind of ugly

00:10:37,460 --> 00:10:43,670
but what you can do is attach a

00:10:40,860 --> 00:10:47,880
stylesheet to your directory listing and

00:10:43,670 --> 00:10:50,070
the auto-generated directory listing

00:10:47,880 --> 00:10:52,380
will now incorporate whatever styles you

00:10:50,070 --> 00:10:56,460
wish to attach to it so whereas before

00:10:52,380 --> 00:11:00,510
it was plain and ugly now it can be

00:10:56,460 --> 00:11:02,640
incredibly ugly so you can you can

00:11:00,510 --> 00:11:09,840
associate styles with all the different

00:11:02,640 --> 00:11:11,880
elements on that page the the individual

00:11:09,840 --> 00:11:15,000
classes that you can define in your

00:11:11,880 --> 00:11:16,740
stylesheet are are in the docs this is

00:11:15,000 --> 00:11:20,880
in there as of 22 this isn't a new thing

00:11:16,740 --> 00:11:24,180
and these are some of the classes that

00:11:20,880 --> 00:11:26,850
you can define even and odd rows in your

00:11:24,180 --> 00:11:30,960
in your listing table and columns and so

00:11:26,850 --> 00:11:32,220
forth so that's really nice by the way

00:11:30,960 --> 00:11:34,860
while we're talking about

00:11:32,220 --> 00:11:37,110
directory indexing couple features that

00:11:34,860 --> 00:11:39,060
have been around since the very

00:11:37,110 --> 00:11:41,340
beginning that people seem to still be

00:11:39,060 --> 00:11:43,350
unaware of our the header name and

00:11:41,340 --> 00:11:46,470
readme name directives which allow you

00:11:43,350 --> 00:11:48,150
to put a header and footer on your

00:11:46,470 --> 00:11:50,550
automatically generated directory

00:11:48,150 --> 00:11:53,010
listings in order to make it fit more

00:11:50,550 --> 00:12:00,540
cleanly into this the style of the rest

00:11:53,010 --> 00:12:03,120
of your website proxy balancer has also

00:12:00,540 --> 00:12:10,320
been around for a couple years this is a

00:12:03,120 --> 00:12:12,180
way to use apache httpd as a as a load

00:12:10,320 --> 00:12:15,510
balancer between multiple back-end

00:12:12,180 --> 00:12:20,010
servers those back-end servers can be

00:12:15,510 --> 00:12:22,680
running HTTP FTP or a JP JP is what

00:12:20,010 --> 00:12:25,050
Tomcat talks so you can use this as a

00:12:22,680 --> 00:12:27,930
front end for any of those servers they

00:12:25,050 --> 00:12:33,960
don't have to be apache httpd on the

00:12:27,930 --> 00:12:37,410
back end there's also a new module in 24

00:12:33,960 --> 00:12:39,990
called mod heartbeat and mod heart

00:12:37,410 --> 00:12:42,350
monitor so heartbeat runs on the backend

00:12:39,990 --> 00:12:45,240
heart monitor runs on the front end and

00:12:42,350 --> 00:12:47,970
it ensures that servers are still alive

00:12:45,240 --> 00:12:52,680
if they aren't alive then they get taken

00:12:47,970 --> 00:12:55,320
out of the proxy rotation and as I

00:12:52,680 --> 00:13:00,660
mentioned you can use mod proxy a.j.p to

00:12:55,320 --> 00:13:03,690
proxy to a tomcat server there's also a

00:13:00,660 --> 00:13:07,320
balancer manager which is a web-based

00:13:03,690 --> 00:13:09,420
front end to the to the balancer so you

00:13:07,320 --> 00:13:11,670
can configure various settings on the

00:13:09,420 --> 00:13:14,820
balancer through that web interface and

00:13:11,670 --> 00:13:17,010
I realized right before my talk that I

00:13:14,820 --> 00:13:20,310
have a very old screenshot of this but

00:13:17,010 --> 00:13:24,980
if you can imagine it being exactly like

00:13:20,310 --> 00:13:28,650
this only better in every possible way

00:13:24,980 --> 00:13:31,380
it allows you to do neat things like add

00:13:28,650 --> 00:13:32,940
additional workers into the process if

00:13:31,380 --> 00:13:35,190
you bring up a new server on the back

00:13:32,940 --> 00:13:39,090
end you can add that in you can also

00:13:35,190 --> 00:13:40,920
persist your settings across sessions in

00:13:39,090 --> 00:13:42,630
earlier versions once you restarted it

00:13:40,920 --> 00:13:46,200
would go back to your original settings

00:13:42,630 --> 00:13:47,910
but in 2.4 you can persist in each

00:13:46,200 --> 00:13:50,880
changes that you make over restarts

00:13:47,910 --> 00:13:52,770
which is kind of neat so here's an

00:13:50,880 --> 00:13:55,140
example balance or setting you define a

00:13:52,770 --> 00:13:58,680
cluster with one or more back-end

00:13:55,140 --> 00:14:02,130
servers and then you proxy pass to that

00:13:58,680 --> 00:14:04,860
balancer you can also specify different

00:14:02,130 --> 00:14:06,960
load factors if one of the servers is

00:14:04,860 --> 00:14:08,550
more powerful than another and you want

00:14:06,960 --> 00:14:12,990
to send more content more data there

00:14:08,550 --> 00:14:14,760
more requests there rather see mod proxy

00:14:12,990 --> 00:14:16,290
documentation for the full list of

00:14:14,760 --> 00:14:18,780
options there are many different options

00:14:16,290 --> 00:14:20,880
about how you can load balance you can

00:14:18,780 --> 00:14:26,070
load balance based on number of requests

00:14:20,880 --> 00:14:27,660
or total bytes sent for example I keep

00:14:26,070 --> 00:14:30,360
coming back to this one because this is

00:14:27,660 --> 00:14:32,940
my favorite feature in 2.4 this is the

00:14:30,360 --> 00:14:37,170
new if directive it allows you to wrap

00:14:32,940 --> 00:14:39,690
any configuration lines in an if block

00:14:37,170 --> 00:14:42,240
so that they can be evaluated at request

00:14:39,690 --> 00:14:44,460
time and applied conditionally now

00:14:42,240 --> 00:14:47,580
here's a simple example of this this

00:14:44,460 --> 00:14:52,050
says if the riff the hostname requested

00:14:47,580 --> 00:14:56,880
is example.com redirect to ww example

00:14:52,050 --> 00:14:59,610
com you can evaluate expressions based

00:14:56,880 --> 00:15:04,260
on request response environment

00:14:59,610 --> 00:15:08,750
variables giving you you know a lot of

00:15:04,260 --> 00:15:11,910
flexibility you can do do it based on

00:15:08,750 --> 00:15:14,100
methods you can use syntax like in if

00:15:11,910 --> 00:15:17,550
you want to provide a list of things the

00:15:14,100 --> 00:15:19,680
syntax is very full if you want to get

00:15:17,550 --> 00:15:21,150
involved in documentation we'd love to

00:15:19,680 --> 00:15:23,190
see some of the things that you all are

00:15:21,150 --> 00:15:24,750
doing with this so we can actually put

00:15:23,190 --> 00:15:33,240
some examples in the dock instead of

00:15:24,750 --> 00:15:36,300
just a list of features number 10 svn

00:15:33,240 --> 00:15:39,030
autocommit is a really cool feature that

00:15:36,300 --> 00:15:42,540
i started using when i was working

00:15:39,030 --> 00:15:45,210
briefly for a lawyer's office and they

00:15:42,540 --> 00:15:47,790
wanted to have the ability to have every

00:15:45,210 --> 00:15:51,840
revision of every document saved for

00:15:47,790 --> 00:15:55,890
posterity and so what we did was we had

00:15:51,840 --> 00:15:58,870
all of them map a webdav share and we

00:15:55,890 --> 00:16:01,270
turned on svn auto versioning

00:15:58,870 --> 00:16:03,460
and what that does is every time they

00:16:01,270 --> 00:16:05,950
press save on their desktop client it

00:16:03,460 --> 00:16:08,080
creates an svn revision on the server

00:16:05,950 --> 00:16:12,270
they don't need to know how to use svn

00:16:08,080 --> 00:16:15,700
it just happens automatically so this is

00:16:12,270 --> 00:16:17,920
revision control for everyone and they

00:16:15,700 --> 00:16:20,380
don't need to know how to use revision

00:16:17,920 --> 00:16:22,180
control now one of the weird things

00:16:20,380 --> 00:16:24,010
about this is although you have a

00:16:22,180 --> 00:16:28,000
revision number you don't have any sort

00:16:24,010 --> 00:16:30,880
of commit message but because of the way

00:16:28,000 --> 00:16:33,220
that svn works you can have that lawyer

00:16:30,880 --> 00:16:34,900
come to you and say I want to know how

00:16:33,220 --> 00:16:37,570
this document looked at two-thirty

00:16:34,900 --> 00:16:40,450
yesterday and you can get a check out

00:16:37,570 --> 00:16:43,450
based on the timestamp so you can revert

00:16:40,450 --> 00:16:46,330
to any point in the past so that was

00:16:43,450 --> 00:16:48,279
really cool made them very happy the

00:16:46,330 --> 00:16:49,300
caveats are that you're going to use an

00:16:48,279 --> 00:16:52,120
enormous amount of disk space

00:16:49,300 --> 00:16:54,910
particularly if you're checking in Word

00:16:52,120 --> 00:16:58,060
documents so binary files don't dip very

00:16:54,910 --> 00:17:04,959
easily and you're going to consume huge

00:16:58,060 --> 00:17:08,500
amounts of disk space number 11 mud xed

00:17:04,959 --> 00:17:10,390
filter this is another neat feature that

00:17:08,500 --> 00:17:12,910
I don't know that there are many

00:17:10,390 --> 00:17:14,709
practical uses for but I do have one

00:17:12,910 --> 00:17:17,500
really cool example here I'm going to

00:17:14,709 --> 00:17:20,770
start with the stupid example because

00:17:17,500 --> 00:17:23,230
it's easier to explain mod X filter

00:17:20,770 --> 00:17:26,350
allows you to define an external filter

00:17:23,230 --> 00:17:30,610
and in this case I'm defining an output

00:17:26,350 --> 00:17:33,700
filter for text HTML type and i'm going

00:17:30,610 --> 00:17:37,390
to replace i'm actually going to invoke

00:17:33,700 --> 00:17:40,980
said at the command line to replace the

00:17:37,390 --> 00:17:44,380
Verdana font with the arial font so

00:17:40,980 --> 00:17:46,480
silly example I know I'm going to apply

00:17:44,380 --> 00:17:49,900
that to all the content on my website to

00:17:46,480 --> 00:17:53,110
swap out a font so yes that is extremely

00:17:49,900 --> 00:17:55,179
silly but let me show you a slightly

00:17:53,110 --> 00:17:58,000
more useful example that you might use

00:17:55,179 --> 00:17:59,559
in a development environment now one of

00:17:58,000 --> 00:18:01,900
the reasons that it's silly is invoking

00:17:59,559 --> 00:18:03,880
set on every request is not exactly the

00:18:01,900 --> 00:18:07,420
most efficient thing to do as you might

00:18:03,880 --> 00:18:12,370
imagine but here's a cool example this

00:18:07,420 --> 00:18:15,730
uses the N script utility to take

00:18:12,370 --> 00:18:18,760
source code and produce syntax highlight

00:18:15,730 --> 00:18:21,430
at HTML so you could use this in a in a

00:18:18,760 --> 00:18:23,200
development environment to get a nice

00:18:21,430 --> 00:18:30,820
look at your code as you're working on

00:18:23,200 --> 00:18:33,010
it and speaking of syntax highlighting

00:18:30,820 --> 00:18:37,270
for those of you that are PHP developers

00:18:33,010 --> 00:18:41,170
any PHP programmers here a small number

00:18:37,270 --> 00:18:43,440
okay here's a feature that is as part of

00:18:41,170 --> 00:18:48,460
PHP not part of the Apache web server

00:18:43,440 --> 00:18:54,040
but this is the handler that's provided

00:18:48,460 --> 00:18:58,270
by PHP language to do this syntax

00:18:54,040 --> 00:19:01,750
highlight your PHP code by just renaming

00:18:58,270 --> 00:19:02,950
your PHP files to PHP s then when you

00:19:01,750 --> 00:19:06,250
view them in the browser there'll be

00:19:02,950 --> 00:19:07,870
syntax highlighted unfortunately in

00:19:06,250 --> 00:19:10,360
order to use it you have to rename your

00:19:07,870 --> 00:19:14,530
PHP files to PHP s and who wants to do

00:19:10,360 --> 00:19:18,160
that so here's a way to do that a little

00:19:14,530 --> 00:19:21,190
bit differently we use a rewrite rule to

00:19:18,160 --> 00:19:25,240
say if anybody requests a dot PHP s file

00:19:21,190 --> 00:19:28,330
just give them the PHP file but syntax

00:19:25,240 --> 00:19:29,590
highlight it now ideally you want to do

00:19:28,330 --> 00:19:31,150
this in some way where you're not

00:19:29,590 --> 00:19:34,990
exposing the source code of your whole

00:19:31,150 --> 00:19:37,030
website to random internet users but you

00:19:34,990 --> 00:19:43,059
know that's that's my authentication

00:19:37,030 --> 00:19:46,210
talk from yesterday log message the log

00:19:43,059 --> 00:19:48,460
message directive allows you to create a

00:19:46,210 --> 00:19:52,090
log message we're really good at these

00:19:48,460 --> 00:19:56,950
directive names the log message

00:19:52,090 --> 00:19:59,950
directive takes several arguments one of

00:19:56,950 --> 00:20:02,410
them is the log message itself the

00:19:59,950 --> 00:20:06,190
second one is the hook on which to log

00:20:02,410 --> 00:20:10,000
and the third one is an expression which

00:20:06,190 --> 00:20:11,920
says should I log so in this case on

00:20:10,000 --> 00:20:16,809
logging a message that said sub request

00:20:11,920 --> 00:20:19,929
to location foo I am logging it during

00:20:16,809 --> 00:20:22,179
the type checker phase and I'm only

00:20:19,929 --> 00:20:25,230
going to log it if the request was in

00:20:22,179 --> 00:20:25,230
fact a sub request

00:20:25,389 --> 00:20:32,859
here's another example i'm going to log

00:20:28,599 --> 00:20:35,919
the message they're back if a remote

00:20:32,859 --> 00:20:37,779
address is has the IP address of one two

00:20:35,919 --> 00:20:40,329
three four i'm watching for a particular

00:20:37,779 --> 00:20:42,249
person to come back to my website and i

00:20:40,329 --> 00:20:46,869
want to explicitly call that out in my

00:20:42,249 --> 00:20:51,369
log file and one final example of that

00:20:46,869 --> 00:20:54,489
this is a case where I've expressed I've

00:20:51,369 --> 00:20:57,309
said hook all which means it's going to

00:20:54,489 --> 00:21:01,179
log this message on each of the hooks

00:20:57,309 --> 00:21:03,339
and so it will log the evolution of a

00:21:01,179 --> 00:21:05,859
particular variable during the entire

00:21:03,339 --> 00:21:18,489
request as it moves from one phase to

00:21:05,859 --> 00:21:22,629
another number 14 by the way if anyone

00:21:18,489 --> 00:21:25,269
has any questions or comments and is not

00:21:22,629 --> 00:21:26,829
Igor you're you're welcome well of

00:21:25,269 --> 00:21:28,599
course he's still welcome to but but

00:21:26,829 --> 00:21:30,999
please please feel free to stand up and

00:21:28,599 --> 00:21:32,499
interrupt me because I don't expect to

00:21:30,999 --> 00:21:35,169
leave a lot of time at the end for

00:21:32,499 --> 00:21:36,309
questions although you know with my luck

00:21:35,169 --> 00:21:41,379
this week I'm going to run out of

00:21:36,309 --> 00:21:43,659
content anyway we have a new syntax that

00:21:41,379 --> 00:21:45,969
was added in to about three so it's in

00:21:43,659 --> 00:21:48,459
the two dot for release which allows you

00:21:45,969 --> 00:21:51,219
to combine multiple access control

00:21:48,459 --> 00:21:52,809
requirements much more easily than was

00:21:51,219 --> 00:21:54,909
possible before and I covered this in

00:21:52,809 --> 00:21:57,309
some detail in my talk yesterday but for

00:21:54,909 --> 00:22:01,299
those who weren't in there we have the

00:21:57,309 --> 00:22:05,019
require any syntax which allows you to

00:22:01,299 --> 00:22:08,859
express several require statements and

00:22:05,019 --> 00:22:10,679
only enforce one or more of them one or

00:22:08,859 --> 00:22:14,889
more is sufficient so in this case

00:22:10,679 --> 00:22:17,320
either use one of these HTTP methods or

00:22:14,889 --> 00:22:18,729
be a logged in user if you want to use

00:22:17,320 --> 00:22:22,419
some other methods you need to be a

00:22:18,729 --> 00:22:25,119
logged in user I can say require

00:22:22,419 --> 00:22:27,969
expression so in this example I'm saying

00:22:25,119 --> 00:22:33,059
you can only access this content during

00:22:27,969 --> 00:22:36,399
business hours I can require an

00:22:33,059 --> 00:22:39,280
environment variable and I'm setting an

00:22:36,399 --> 00:22:41,770
environment variable using set end if

00:22:39,280 --> 00:22:46,420
and then I require that environment

00:22:41,770 --> 00:22:49,090
variable for access you can also require

00:22:46,420 --> 00:22:52,690
a fairly complex collection of things

00:22:49,090 --> 00:22:55,690
and combine them in whatever way you

00:22:52,690 --> 00:22:58,660
want using the require all require any

00:22:55,690 --> 00:23:01,210
and require none directives to create a

00:22:58,660 --> 00:23:05,890
very fine-grained access control

00:23:01,210 --> 00:23:08,470
mechanism and then you can do the old

00:23:05,890 --> 00:23:11,550
allow for mall and deny from all using

00:23:08,470 --> 00:23:15,370
the new require syntax so these are all

00:23:11,550 --> 00:23:17,080
ways to not only make the require syntax

00:23:15,370 --> 00:23:19,360
less confusing this was something that

00:23:17,080 --> 00:23:23,110
that people have traditionally found

00:23:19,360 --> 00:23:31,630
many ways to get wrong but also make it

00:23:23,110 --> 00:23:36,970
much more flexible number 15 check

00:23:31,630 --> 00:23:39,520
spelling so you have a a good example as

00:23:36,970 --> 00:23:41,200
if you have a Windows you have content

00:23:39,520 --> 00:23:42,850
developers that are using Windows or

00:23:41,200 --> 00:23:46,030
some other operating system that has

00:23:42,850 --> 00:23:48,040
case insensitive file names and they

00:23:46,030 --> 00:23:50,200
provide content to you to run on your

00:23:48,040 --> 00:23:52,810
linux box that has case sensitive file

00:23:50,200 --> 00:23:56,260
names and of course URLs are case

00:23:52,810 --> 00:23:58,360
sensitive and so you get a lot of 404 is

00:23:56,260 --> 00:24:01,990
with wrong casing these are this is how

00:23:58,360 --> 00:24:03,700
you fix this there's two possible

00:24:01,990 --> 00:24:05,830
directives here one is the check

00:24:03,700 --> 00:24:09,130
spelling on directive and the other is

00:24:05,830 --> 00:24:12,550
check case only so I'll start with the

00:24:09,130 --> 00:24:15,400
second one check case only says that if

00:24:12,550 --> 00:24:17,950
if a request comes in that is not

00:24:15,400 --> 00:24:19,540
satisfied by a by content from the file

00:24:17,950 --> 00:24:21,760
system we're going to look to see if

00:24:19,540 --> 00:24:24,340
maybe there's a uppercase lowercase

00:24:21,760 --> 00:24:26,620
problem so it scans the file system to

00:24:24,340 --> 00:24:29,770
see if there's a file that matches and

00:24:26,620 --> 00:24:31,180
it gives you that one if there's more

00:24:29,770 --> 00:24:33,850
than one it will actually give you a

00:24:31,180 --> 00:24:35,680
multiple choice option then there's

00:24:33,850 --> 00:24:39,490
check spelling on which does that but it

00:24:35,680 --> 00:24:41,080
also does simple letter transposition if

00:24:39,490 --> 00:24:45,970
somebody got two letters switched around

00:24:41,080 --> 00:24:48,370
or if they put in a zero instead of a

00:24:45,970 --> 00:24:52,110
know it will do those kinds of checks

00:24:48,370 --> 00:24:52,110
and still give you the right resource

00:24:52,210 --> 00:24:59,160
I had a case where there were some some

00:24:55,870 --> 00:25:02,620
brochures that were printed up that used

00:24:59,160 --> 00:25:04,960
that made it unclear whether it was a

00:25:02,620 --> 00:25:06,580
zero or a no and a URL and this fixed

00:25:04,960 --> 00:25:08,710
that so you know there's there's a lot

00:25:06,580 --> 00:25:11,200
of cases where this can solve simple

00:25:08,710 --> 00:25:15,130
problems without making anybody feel

00:25:11,200 --> 00:25:17,140
stupid this is not great for performance

00:25:15,130 --> 00:25:19,120
because it does actually have to scan

00:25:17,140 --> 00:25:21,760
the file system for the for the missing

00:25:19,120 --> 00:25:24,670
document but you would have given them a

00:25:21,760 --> 00:25:28,240
404 anyway so you know in the end this

00:25:24,670 --> 00:25:29,800
is better for the end user and if you

00:25:28,240 --> 00:25:31,510
ever write a book on the Apache web

00:25:29,800 --> 00:25:33,730
server you will find that editors like

00:25:31,510 --> 00:25:36,760
to correct the spelling of the name of

00:25:33,730 --> 00:25:38,590
the module and you have to keep sending

00:25:36,760 --> 00:25:40,300
it back and say no it is actually mod

00:25:38,590 --> 00:25:47,470
spelling with one L somebody thought

00:25:40,300 --> 00:25:49,240
that was funny caching ideally you're

00:25:47,470 --> 00:25:54,000
going to use something like Apache

00:25:49,240 --> 00:25:57,130
traffic server yeah I knew this however

00:25:54,000 --> 00:25:58,540
apache HTTP does have some nice caching

00:25:57,130 --> 00:26:00,280
functionality and I want to point out

00:25:58,540 --> 00:26:03,010
just just one of them that's pretty cool

00:26:00,280 --> 00:26:06,280
which of course patchy traffic server

00:26:03,010 --> 00:26:08,290
does better if you have content on your

00:26:06,280 --> 00:26:10,210
website that is sort of dynamic like

00:26:08,290 --> 00:26:13,570
your blog that you haven't updated since

00:26:10,210 --> 00:26:15,460
June then it's not really important that

00:26:13,570 --> 00:26:17,440
you are serving the up to the second

00:26:15,460 --> 00:26:20,470
latest version of that to the people

00:26:17,440 --> 00:26:22,260
that are visiting your website and you

00:26:20,470 --> 00:26:25,030
know as Theo mentioned in his keynote

00:26:22,260 --> 00:26:27,040
it's very seldom important that you give

00:26:25,030 --> 00:26:29,040
people up to the second correct data so

00:26:27,040 --> 00:26:32,470
caching is a good thing here's a

00:26:29,040 --> 00:26:36,990
configuration that allows you to say

00:26:32,470 --> 00:26:40,330
let's cash everything for a few minutes

00:26:36,990 --> 00:26:42,780
regardless of how fresh it is and that

00:26:40,330 --> 00:26:45,640
is done with the cash min expire

00:26:42,780 --> 00:26:51,280
directive in this case i'm setting cash

00:26:45,640 --> 00:26:58,809
min expire to 3600 which is that seconds

00:26:51,280 --> 00:27:02,300
right so that's that's six minutes now

00:26:58,809 --> 00:27:06,890
that's an hour you know I have a degree

00:27:02,300 --> 00:27:09,050
in math in 2.2 you can set a default

00:27:06,890 --> 00:27:12,170
expire but you can't set a min expire

00:27:09,050 --> 00:27:14,090
and so you know the actual cache headers

00:27:12,170 --> 00:27:16,580
and the resource itself will override

00:27:14,090 --> 00:27:21,080
that but with cash min expire you're

00:27:16,580 --> 00:27:27,790
forcing a minimum expiration and that

00:27:21,080 --> 00:27:27,790
can reduce load on your server if

00:27:28,240 --> 00:27:38,179
yeah I'm going to skip that you can also

00:27:35,200 --> 00:27:41,450
set your cache server to cache things

00:27:38,179 --> 00:27:44,480
that resources say not to cash you can

00:27:41,450 --> 00:27:46,640
say ignore cache control and ignore snow

00:27:44,480 --> 00:27:49,130
store and ignore store private you can

00:27:46,640 --> 00:27:51,410
you can ignore those recommendations

00:27:49,130 --> 00:27:54,080
from the resource itself and cash them

00:27:51,410 --> 00:27:57,320
anyway this can be seen as an unfriendly

00:27:54,080 --> 00:27:58,970
thing to do but you know there are cases

00:27:57,320 --> 00:28:01,820
where you want to go ahead and cash that

00:27:58,970 --> 00:28:03,740
very aggressively anyway it is important

00:28:01,820 --> 00:28:06,800
to know that if something requires

00:28:03,740 --> 00:28:12,730
authentication then it will not be

00:28:06,800 --> 00:28:15,170
cached regardless and finally you can

00:28:12,730 --> 00:28:17,360
just say there are certain things that I

00:28:15,170 --> 00:28:19,730
don't wish to cash ever I don't want to

00:28:17,360 --> 00:28:21,650
cache cookies for example I may not want

00:28:19,730 --> 00:28:24,080
to cash images since they're coming off

00:28:21,650 --> 00:28:28,400
the disk anyway there's no processing

00:28:24,080 --> 00:28:35,510
involved or you can use apache traffic

00:28:28,400 --> 00:28:37,370
server number 17 mod deflate is another

00:28:35,510 --> 00:28:41,260
one of my favorite modules this has been

00:28:37,370 --> 00:28:43,700
around for a while and with one line of

00:28:41,260 --> 00:28:46,850
configuration you can greatly improve

00:28:43,700 --> 00:28:49,070
the performance of your web server this

00:28:46,850 --> 00:28:52,970
G zips content before it gets sent down

00:28:49,070 --> 00:28:56,050
to the client now back in the early days

00:28:52,970 --> 00:28:59,450
of the web you know even on day one

00:28:56,050 --> 00:29:02,390
clients web clients did gzip compression

00:28:59,450 --> 00:29:04,640
because in those days bandwidth was a

00:29:02,390 --> 00:29:08,120
very scarce commodity even more so than

00:29:04,640 --> 00:29:10,670
now and so the very earliest versions of

00:29:08,120 --> 00:29:12,320
browsers knew how to handle gzip

00:29:10,670 --> 00:29:14,570
compression so this is a feature

00:29:12,320 --> 00:29:18,460
that will benefit all browsers on all

00:29:14,570 --> 00:29:23,630
platforms simply by turning it on and

00:29:18,460 --> 00:29:26,809
you like I said that one that one line

00:29:23,630 --> 00:29:29,120
of configuration it gets gzip sent down

00:29:26,809 --> 00:29:34,130
to the client the client uncompress is

00:29:29,120 --> 00:29:36,320
it you can get pretty significant

00:29:34,130 --> 00:29:39,230
performance improvements it doesn't get

00:29:36,320 --> 00:29:41,929
gzip against deflated I'm sorry what no

00:29:39,230 --> 00:29:44,539
it doesn't get t sips it gets deflated

00:29:41,929 --> 00:29:47,000
it gets deflated I was using the gzip

00:29:44,539 --> 00:29:50,990
algorithm well it's using a slightly

00:29:47,000 --> 00:29:55,580
different angle okay all right so it

00:29:50,990 --> 00:29:58,460
gets deflated one of the questions that

00:29:55,580 --> 00:30:02,330
I frequently get asked when I talk about

00:29:58,460 --> 00:30:05,120
mod deflate is doesn't the time taken to

00:30:02,330 --> 00:30:08,710
compress negate the time that you're

00:30:05,120 --> 00:30:11,690
saving and in practice no in practice

00:30:08,710 --> 00:30:14,179
with modern hardware the gzip time is

00:30:11,690 --> 00:30:16,940
considerably less than the time that

00:30:14,179 --> 00:30:20,960
you're saving by sending a compressed a

00:30:16,940 --> 00:30:23,690
compressed version there's also some

00:30:20,960 --> 00:30:25,970
nice logging functionality you can log

00:30:23,690 --> 00:30:32,120
the original size and the compressed

00:30:25,970 --> 00:30:33,980
size and the compress ratio this does of

00:30:32,120 --> 00:30:36,110
course work best for tight sites that

00:30:33,980 --> 00:30:38,389
are very text heavy text compresses very

00:30:36,110 --> 00:30:41,000
well things that are already compressed

00:30:38,389 --> 00:30:43,580
like images and video you don't want to

00:30:41,000 --> 00:30:49,669
try to recompress because it doesn't

00:30:43,580 --> 00:30:51,590
help you at all and yep so number 18 is

00:30:49,669 --> 00:30:55,789
there a question back there yeah yeah

00:30:51,590 --> 00:31:00,049
for cacheable resources do you know if

00:30:55,789 --> 00:31:04,700
the deflated version is cached and so it

00:31:00,049 --> 00:31:06,679
doesn't need to be recompressed the

00:31:04,700 --> 00:31:11,590
cached version let me sorry the

00:31:06,679 --> 00:31:14,980
compressed version is not cached and if

00:31:11,590 --> 00:31:19,759
you want to pre compress things yourself

00:31:14,980 --> 00:31:22,669
you can in fact gzip content and have

00:31:19,759 --> 00:31:26,120
the raw version and the GZ version and

00:31:22,669 --> 00:31:26,610
have mud negotiation hand out the

00:31:26,120 --> 00:31:28,020
correct

00:31:26,610 --> 00:31:30,630
version anyway I've done that quite

00:31:28,020 --> 00:31:33,690
successfully so that's that's an

00:31:30,630 --> 00:31:35,760
alternative is there if you if you're

00:31:33,690 --> 00:31:38,760
talking about downstream caching if you

00:31:35,760 --> 00:31:40,980
have the cache headers right the

00:31:38,760 --> 00:31:45,740
appropriate version will usually be

00:31:40,980 --> 00:31:49,710
cached so okay depending on what your

00:31:45,740 --> 00:31:52,530
clients with your browser's except they

00:31:49,710 --> 00:31:57,360
send and accept encoding header and you

00:31:52,530 --> 00:31:59,549
can rely on that so that or a cache can

00:31:57,360 --> 00:32:01,530
rely on that and you will get the

00:31:59,549 --> 00:32:04,679
appropriate version so if its cache

00:32:01,530 --> 00:32:08,850
downstream if your ISP caches so if you

00:32:04,679 --> 00:32:11,010
have a traffic server in front of it you

00:32:08,850 --> 00:32:13,290
get the appropriate version so you don't

00:32:11,010 --> 00:32:18,120
have to store it on disk it only happens

00:32:13,290 --> 00:32:21,299
once sensibly there used to be a third

00:32:18,120 --> 00:32:23,910
party module called mod gzip and one of

00:32:21,299 --> 00:32:26,790
its features was that it would cash the

00:32:23,910 --> 00:32:29,429
results of the gzip and if you ran that

00:32:26,790 --> 00:32:32,460
on dynamic content you would end up with

00:32:29,429 --> 00:32:34,020
millions of different gzip versions of a

00:32:32,460 --> 00:32:36,809
resource it would fill up your hard

00:32:34,020 --> 00:32:41,820
drive really really nice i found that

00:32:36,809 --> 00:32:45,059
out the hard way number 18 logging to

00:32:41,820 --> 00:32:46,679
syslog if you've got a bunch of

00:32:45,059 --> 00:32:49,020
distributed servers maybe you want to

00:32:46,679 --> 00:32:51,720
log to a central log resource and the

00:32:49,020 --> 00:32:56,669
cheap and easy way to do that is with

00:32:51,720 --> 00:32:58,530
syslog and this is a standard feature of

00:32:56,669 --> 00:33:02,880
the error log directive and has been

00:32:58,530 --> 00:33:05,429
forever you can say error log syslog or

00:33:02,880 --> 00:33:09,000
you can say error logs this log colon

00:33:05,429 --> 00:33:13,020
and then specify the syslog facility

00:33:09,000 --> 00:33:15,030
that you want to log to then the second

00:33:13,020 --> 00:33:19,020
line of configuration there is in your

00:33:15,030 --> 00:33:22,380
sis log config you can point syslog at a

00:33:19,020 --> 00:33:25,110
syslog host and log all that content to

00:33:22,380 --> 00:33:26,940
a remote syslog host and that gives you

00:33:25,110 --> 00:33:29,690
a way to aggregate logs from all your

00:33:26,940 --> 00:33:29,690
different servers

00:33:30,820 --> 00:33:39,740
you can also you can also specify

00:33:37,130 --> 00:33:41,720
different log levels that you want to

00:33:39,740 --> 00:33:45,800
log to different places you can do that

00:33:41,720 --> 00:33:47,180
with syslog that's kind of cool if you

00:33:45,800 --> 00:33:50,330
want to do this with the access log it's

00:33:47,180 --> 00:33:51,800
a little bit more complicated not much

00:33:50,330 --> 00:33:54,890
though you just have to do it through a

00:33:51,800 --> 00:33:57,110
pipe load handler and the pipe that you

00:33:54,890 --> 00:33:58,610
want to send to is a utility called

00:33:57,110 --> 00:34:02,210
logger which is something that comes

00:33:58,610 --> 00:34:05,600
with syslog so you pipe your access log

00:34:02,210 --> 00:34:08,620
through longer and you give it all these

00:34:05,600 --> 00:34:13,659
various arguments and then it will log

00:34:08,620 --> 00:34:13,659
to whatever your syslog facility is

00:34:17,470 --> 00:34:22,790
number 19 I alluded to web dev earlier I

00:34:21,080 --> 00:34:24,890
want to say just a little bit more about

00:34:22,790 --> 00:34:30,560
it because it is another one of my

00:34:24,890 --> 00:34:35,750
favorite features the the main reason

00:34:30,560 --> 00:34:38,419
for using web dev is that teaching your

00:34:35,750 --> 00:34:42,380
manager how to use SCP may just be

00:34:38,419 --> 00:34:44,270
beyond your capabilities and you want to

00:34:42,380 --> 00:34:46,070
provide some sort of a secure file

00:34:44,270 --> 00:34:48,950
transfer mechanism you don't want to use

00:34:46,070 --> 00:34:52,730
FTP dev might be the right way to do it

00:34:48,950 --> 00:34:56,179
and it's extremely easy to configure so

00:34:52,730 --> 00:34:59,480
here's a complete configuration for

00:34:56,179 --> 00:35:04,420
setting up web dev now for those of you

00:34:59,480 --> 00:35:08,540
are not familiar with it web dev is a an

00:35:04,420 --> 00:35:11,150
HTTP based file transfer thing you can

00:35:08,540 --> 00:35:15,200
use it on most modern operating systems

00:35:11,150 --> 00:35:21,500
you can simply mount it like a file like

00:35:15,200 --> 00:35:23,660
a shared network drive and then when you

00:35:21,500 --> 00:35:26,650
save files to that network drive it's

00:35:23,660 --> 00:35:29,990
actually sending them over HTTP and

00:35:26,650 --> 00:35:32,510
those can be versioned as I showed a

00:35:29,990 --> 00:35:34,820
little bit earlier but also you can run

00:35:32,510 --> 00:35:39,460
this over SSL if you want to if you need

00:35:34,820 --> 00:35:41,450
it to be secure and holy cow really huh

00:35:39,460 --> 00:35:42,770
just been told that I have 10 minutes

00:35:41,450 --> 00:35:46,020
left

00:35:42,770 --> 00:35:48,890
and like I said you can mount this from

00:35:46,020 --> 00:35:55,920
any OS using the URL of the resource as

00:35:48,890 --> 00:35:59,640
the target yes this is available for 1.3

00:35:55,920 --> 00:36:04,980
and on in 1.3 it's a third-party module

00:35:59,640 --> 00:36:08,130
but in oh okay all right in two point oh

00:36:04,980 --> 00:36:14,609
it became it was it became one of the

00:36:08,130 --> 00:36:16,980
standard modules there's a couple debug

00:36:14,609 --> 00:36:20,000
modules that Jeff already talked about

00:36:16,980 --> 00:36:25,320
so I'll go over pretty quickly these are

00:36:20,000 --> 00:36:30,000
mud dump i/o is a way to dump all input

00:36:25,320 --> 00:36:32,160
and all output to a log file and by all

00:36:30,000 --> 00:36:35,040
input I mean all the headers all of the

00:36:32,160 --> 00:36:38,880
post data all of everything the output

00:36:35,040 --> 00:36:42,480
isn't also all output the entire output

00:36:38,880 --> 00:36:45,150
stream and as you might imagine this can

00:36:42,480 --> 00:36:46,230
generate a big log file so it's not

00:36:45,150 --> 00:36:49,079
something that you want to do in

00:36:46,230 --> 00:36:51,810
production typically and then mod log

00:36:49,079 --> 00:36:53,520
forensic Jeff also talked about it's a

00:36:51,810 --> 00:36:55,740
way to log the beginning and end of a

00:36:53,520 --> 00:36:58,829
request in order to determine which

00:36:55,740 --> 00:37:01,910
requests never ended something that hung

00:36:58,829 --> 00:37:05,339
indefinitely or crashed in the middle

00:37:01,910 --> 00:37:08,040
mod log io is another logging module

00:37:05,339 --> 00:37:10,770
that you may be unaware of and this

00:37:08,040 --> 00:37:12,869
solves the problem that your normal

00:37:10,770 --> 00:37:15,480
access log gives you a slightly

00:37:12,869 --> 00:37:17,810
misleading number so here's an access

00:37:15,480 --> 00:37:20,819
log entry and that number out at the end

00:37:17,810 --> 00:37:23,400
for 27 39 is the number of bytes

00:37:20,819 --> 00:37:28,260
transferred to the client sort of it

00:37:23,400 --> 00:37:30,359
does not include the HTTP headers it

00:37:28,260 --> 00:37:32,310
also doesn't include the size of the

00:37:30,359 --> 00:37:34,800
request so if you have a site that

00:37:32,310 --> 00:37:38,220
allows file upload you're totally

00:37:34,800 --> 00:37:39,720
ignoring upload size as well as request

00:37:38,220 --> 00:37:42,930
header size and so you get an inaccurate

00:37:39,720 --> 00:37:46,500
view of your actual bandwidth use mud

00:37:42,930 --> 00:37:48,270
log io adds a capital I and a capital

00:37:46,500 --> 00:37:52,880
load you can add to your log file and

00:37:48,270 --> 00:37:52,880
log total input and total output

00:37:54,440 --> 00:38:04,680
number 22 this is more of a technique

00:38:02,070 --> 00:38:07,440
than a feature if you're not familiar

00:38:04,680 --> 00:38:12,200
with paths infopath info is the stuff

00:38:07,440 --> 00:38:16,890
out at the end of the URL so when when

00:38:12,200 --> 00:38:19,440
httpd parses a queer of a request it

00:38:16,890 --> 00:38:21,869
marches through the URL until it locates

00:38:19,440 --> 00:38:24,360
a resource that it can figure out what

00:38:21,869 --> 00:38:27,030
it is and anything else that's on the

00:38:24,360 --> 00:38:29,790
URL is shoved into a variable called

00:38:27,030 --> 00:38:34,170
path info which your resource will then

00:38:29,790 --> 00:38:37,230
receive to do with as it chooses now I'm

00:38:34,170 --> 00:38:38,820
a fan of terry pratchett's writings and

00:38:37,230 --> 00:38:41,670
one of his characters is named Granny

00:38:38,820 --> 00:38:44,369
Weatherwax and Granny Weatherwax who is

00:38:41,670 --> 00:38:46,410
a witch says the most important thing

00:38:44,369 --> 00:38:49,740
about magic is knowing when not to use

00:38:46,410 --> 00:38:52,740
it and the same is true of mod rewrite

00:38:49,740 --> 00:38:55,170
so although you can do well though you

00:38:52,740 --> 00:38:57,720
can take the queries of the path info

00:38:55,170 --> 00:39:02,070
and create a query string out of it

00:38:57,720 --> 00:39:04,800
using mod rewrite which gives you you

00:39:02,070 --> 00:39:09,359
know a nice pretty URL so to speak

00:39:04,800 --> 00:39:12,780
instead of an ugly one that may not be

00:39:09,359 --> 00:39:14,720
the most efficient way to do this by the

00:39:12,780 --> 00:39:17,430
way for those of you who think that

00:39:14,720 --> 00:39:19,830
throwing rewrite rules at your server

00:39:17,430 --> 00:39:21,210
will result in you making a million

00:39:19,830 --> 00:39:22,890
dollars based on your Google search

00:39:21,210 --> 00:39:25,170
results you there may be a few other

00:39:22,890 --> 00:39:32,760
steps involved there may be a third step

00:39:25,170 --> 00:39:35,460
anyway using path info directly gives

00:39:32,760 --> 00:39:38,010
you the gives you a more efficient way

00:39:35,460 --> 00:39:40,350
to obtain that information than then

00:39:38,010 --> 00:39:42,750
rewrite rules and it also lets you make

00:39:40,350 --> 00:39:45,109
smug remarks to I on IRC to people who

00:39:42,750 --> 00:39:48,090
are still doing it using rewrite rules

00:39:45,109 --> 00:39:51,150
so here's how you might do this and I'm

00:39:48,090 --> 00:39:53,340
going to use PHP as an example because i

00:39:51,150 --> 00:39:54,990
tend to expect a larger percentage of

00:39:53,340 --> 00:39:56,970
PHP folks in the audience that i

00:39:54,990 --> 00:40:00,690
actually have today so bear with me a

00:39:56,970 --> 00:40:04,500
moment first of all i'm going to rename

00:40:00,690 --> 00:40:06,150
a resource from book PHP to just book

00:40:04,500 --> 00:40:07,440
i'm going to take off the file extension

00:40:06,150 --> 00:40:12,359
because file

00:40:07,440 --> 00:40:15,060
extensions are so 1980s anyway and this

00:40:12,359 --> 00:40:17,369
directive here says even though it

00:40:15,060 --> 00:40:20,310
doesn't have a file extension I'm going

00:40:17,369 --> 00:40:22,800
to treat it like a PHP resource and it

00:40:20,310 --> 00:40:26,940
will get executed correctly you can use

00:40:22,800 --> 00:40:29,810
the same technique with a CGI script or

00:40:26,940 --> 00:40:34,230
whatever it is you want to use this for

00:40:29,810 --> 00:40:37,950
then in that code you take the path info

00:40:34,230 --> 00:40:40,500
variable and you split it up into its

00:40:37,950 --> 00:40:42,240
component parts you treat each one of

00:40:40,500 --> 00:40:43,920
those component parts as a variable

00:40:42,240 --> 00:40:47,990
since that's what we were doing in that

00:40:43,920 --> 00:40:51,060
nasty rewrite rule anyway and then you

00:40:47,990 --> 00:40:53,700
do whatever it is that you wish to do in

00:40:51,060 --> 00:40:55,530
your switch statement based on the

00:40:53,700 --> 00:41:01,859
different variables that were provided

00:40:55,530 --> 00:41:04,589
so that's a nice feature there number 23

00:41:01,859 --> 00:41:09,270
oh okay can you go back to the files

00:41:04,589 --> 00:41:11,430
match please if you learn oh yeah yeah

00:41:09,270 --> 00:41:15,000
if you're too lazy to do this you can

00:41:11,430 --> 00:41:17,700
just turn on options multi views and do

00:41:15,000 --> 00:41:19,800
the request without the dot PHP and it

00:41:17,700 --> 00:41:21,450
will work just fine you could do mostly

00:41:19,800 --> 00:41:25,980
odd multi views as well that's that's

00:41:21,450 --> 00:41:28,910
very true cool HD PT will find the right

00:41:25,980 --> 00:41:28,910
extension for you

00:41:31,420 --> 00:41:41,819
number 23 is graceful stop and this is a

00:41:36,220 --> 00:41:45,790
new argument to httpd the the binary in

00:41:41,819 --> 00:41:49,960
2.2 so prior to 2.2 you could do a

00:41:45,790 --> 00:41:51,849
graceful restart and the difference

00:41:49,960 --> 00:41:55,390
between a restart and a graceful restart

00:41:51,849 --> 00:41:57,280
is with a graceful restart you actually

00:41:55,390 --> 00:41:59,710
wait for existing connections to

00:41:57,280 --> 00:42:02,160
complete before you disconnect them if

00:41:59,710 --> 00:42:05,530
you simply do a restart than any

00:42:02,160 --> 00:42:07,690
connections that are midway through will

00:42:05,530 --> 00:42:10,980
simply be dropped and then the server

00:42:07,690 --> 00:42:12,940
process will be restarted so that can be

00:42:10,980 --> 00:42:18,609
unfortunate if you have long-running

00:42:12,940 --> 00:42:21,690
resour unrequested on loads that would

00:42:18,609 --> 00:42:24,069
simply be dropped in the midstream

00:42:21,690 --> 00:42:26,349
graceful restart solved that problem

00:42:24,069 --> 00:42:28,690
graceful stop solves a similar problem

00:42:26,349 --> 00:42:30,460
and this is if you have for example a

00:42:28,690 --> 00:42:32,619
bunch of back-end servers that are

00:42:30,460 --> 00:42:35,619
behind a proxy you want to take one of

00:42:32,619 --> 00:42:37,500
them down then you use a graceful stop

00:42:35,619 --> 00:42:41,829
to bring it down it allows it to

00:42:37,500 --> 00:42:43,270
complete any ongoing requests before it

00:42:41,829 --> 00:42:48,640
brings it down and then you can take

00:42:43,270 --> 00:42:52,180
that out of the proxy rotation so fairly

00:42:48,640 --> 00:42:57,339
simple feature there but really nice to

00:42:52,180 --> 00:43:03,160
have when you need it number 24 mod

00:42:57,339 --> 00:43:06,000
often alias so mod auth an alias allows

00:43:03,160 --> 00:43:10,589
you to have multiple authentication

00:43:06,000 --> 00:43:15,339
sources of the same type the

00:43:10,589 --> 00:43:17,400
authentication provider directive allows

00:43:15,339 --> 00:43:21,150
you to point at one particular

00:43:17,400 --> 00:43:25,240
authentication resource so if you have

00:43:21,150 --> 00:43:27,760
say you're authenticating against a flat

00:43:25,240 --> 00:43:30,490
file and also against ldap you can

00:43:27,760 --> 00:43:33,549
specify those two authentication sources

00:43:30,490 --> 00:43:35,740
but if you have to ldap authentication

00:43:33,549 --> 00:43:38,049
sources you have to come up with

00:43:35,740 --> 00:43:42,940
something to call them other than ldap

00:43:38,049 --> 00:43:45,720
because they're both ldap mud authen

00:43:42,940 --> 00:43:52,270
alias gives you that function

00:43:45,720 --> 00:43:54,069
so I guess that would look better if it

00:43:52,270 --> 00:44:00,880
was left aligned but anyway that second

00:43:54,069 --> 00:44:03,010
block there says authentic ldap and I'm

00:44:00,880 --> 00:44:06,099
going to call it ldap alias one and

00:44:03,010 --> 00:44:08,680
define my first ldap server and then I

00:44:06,099 --> 00:44:15,000
do the same thing for my other alias and

00:44:08,680 --> 00:44:19,060
I define a second ldap server I can then

00:44:15,000 --> 00:44:21,839
I can then configure authentication

00:44:19,060 --> 00:44:21,839
using

00:44:27,150 --> 00:44:33,990
I've lost a slide huh okay i'm going to

00:44:32,670 --> 00:44:35,250
i'm going to show the second example

00:44:33,990 --> 00:44:39,150
because somewhere along the line i've

00:44:35,250 --> 00:44:41,010
deleted a slide if you have to password

00:44:39,150 --> 00:44:43,860
files flat files that you want to

00:44:41,010 --> 00:44:45,480
authenticate against you create an alias

00:44:43,860 --> 00:44:48,930
for each one in this case i'm calling

00:44:45,480 --> 00:44:52,230
them file1 and file2 and then i'm going

00:44:48,930 --> 00:44:55,770
to call off basic provider file1 file2

00:44:52,230 --> 00:44:57,420
and that says check file one and if it

00:44:55,770 --> 00:45:03,510
does not return an authoritative

00:44:57,420 --> 00:45:05,570
response then check file too so if if

00:45:03,510 --> 00:45:08,730
you check in the first password file and

00:45:05,570 --> 00:45:11,850
it can't find your username in there it

00:45:08,730 --> 00:45:15,830
won't return denied it will return

00:45:11,850 --> 00:45:18,690
declined which means I don't know and

00:45:15,830 --> 00:45:21,540
I'm not authoritative go look somewhere

00:45:18,690 --> 00:45:24,570
else if you have somewhere else to check

00:45:21,540 --> 00:45:35,000
then you have that option for a second

00:45:24,570 --> 00:45:37,590
check at that number 25 protocol modules

00:45:35,000 --> 00:45:41,220
so now I'm being told I have 10 minutes

00:45:37,590 --> 00:45:44,810
and so that works out about right in

00:45:41,220 --> 00:45:47,850
Apache 20 so this has been a while now

00:45:44,810 --> 00:45:49,620
we started talking about removing

00:45:47,850 --> 00:45:53,310
everything from the core and leaving the

00:45:49,620 --> 00:45:55,850
core as small as possible so the joke

00:45:53,310 --> 00:46:01,560
was at the time that it was no longer

00:45:55,850 --> 00:46:05,100
httpd it was just d and the protocol was

00:46:01,560 --> 00:46:06,540
completely pluggable so I think some

00:46:05,100 --> 00:46:10,640
people took the joke a little bit too

00:46:06,540 --> 00:46:14,310
far and so now you can run instead of

00:46:10,640 --> 00:46:20,160
httpd you can run a pop3 server using

00:46:14,310 --> 00:46:24,060
the D product and mod pop3 you can

00:46:20,160 --> 00:46:28,140
remove HTTP support entirely from from

00:46:24,060 --> 00:46:32,490
the httpd and and once again I'm

00:46:28,140 --> 00:46:34,920
completely serious but there's also when

00:46:32,490 --> 00:46:38,190
you install HD DVD it comes with mod

00:46:34,920 --> 00:46:40,010
echo and mod echo is an example module

00:46:38,190 --> 00:46:42,740
that shows you how to implement

00:46:40,010 --> 00:46:45,110
protocol module it is as the name

00:46:42,740 --> 00:46:47,630
implies a simple echo module which means

00:46:45,110 --> 00:46:49,670
you send a packet to it and it sends it

00:46:47,630 --> 00:46:52,060
back you send a you know a word or a

00:46:49,670 --> 00:46:54,620
phrase to it and it goes back to you

00:46:52,060 --> 00:46:58,250
there are also a number of other

00:46:54,620 --> 00:47:01,700
protocol modules that run on the httpd

00:46:58,250 --> 00:47:04,820
stack there's maude spam d from the spam

00:47:01,700 --> 00:47:07,850
assassin project which does spam

00:47:04,820 --> 00:47:10,820
filtering there's maude ftpd which lets

00:47:07,850 --> 00:47:14,240
you run an if to ftp server and there's

00:47:10,820 --> 00:47:16,220
also mod smtpd which i don't think is

00:47:14,240 --> 00:47:23,570
particularly mature right now but you

00:47:16,220 --> 00:47:25,730
can run a basic mail server on that and

00:47:23,570 --> 00:47:27,560
you know protocol modules can be any

00:47:25,730 --> 00:47:30,400
protocol and this may seem a little bit

00:47:27,560 --> 00:47:33,380
silly but it does allow you to have a

00:47:30,400 --> 00:47:36,140
common authentication architecture

00:47:33,380 --> 00:47:38,540
across multiple services and that's that

00:47:36,140 --> 00:47:40,310
can be really important particularly if

00:47:38,540 --> 00:47:42,530
you already know really well how to

00:47:40,310 --> 00:47:44,420
configure authentication on on one

00:47:42,530 --> 00:47:47,240
platform this gives you a way to extend

00:47:44,420 --> 00:47:49,550
that to a bunch of different services

00:47:47,240 --> 00:47:53,570
put all of your eggs in one basket so to

00:47:49,550 --> 00:47:59,000
speak but nobody laughed at that one

00:47:53,570 --> 00:48:02,350
okay the event 10pm is now the default

00:47:59,000 --> 00:48:05,660
in apache 2 dot 4 and the event MVM

00:48:02,350 --> 00:48:07,100
solves the keepalive problem so for

00:48:05,660 --> 00:48:08,600
those of you who are not aware of the

00:48:07,100 --> 00:48:14,210
keepalive problem let me show you a

00:48:08,600 --> 00:48:18,950
picture of it this is the mod Status

00:48:14,210 --> 00:48:21,200
page for httpd Apache org several days

00:48:18,950 --> 00:48:25,280
before it was converted over to use

00:48:21,200 --> 00:48:29,030
event and what you will see there is a

00:48:25,280 --> 00:48:33,380
bunch of k's and k indicates that a

00:48:29,030 --> 00:48:35,380
server process is in keep-alive mode now

00:48:33,380 --> 00:48:40,160
keep alive is it's a good thing

00:48:35,380 --> 00:48:42,350
keep-alive is extension to http that or

00:48:40,160 --> 00:48:44,240
it's a feature of HTTP rather that

00:48:42,350 --> 00:48:47,060
allows you to make more than one request

00:48:44,240 --> 00:48:50,270
over a single HTTP socket connection and

00:48:47,060 --> 00:48:52,880
so if conceptually imagine you have a

00:48:50,270 --> 00:48:56,210
web page that has ten images in it

00:48:52,880 --> 00:48:58,849
you could make all of those requests all

00:48:56,210 --> 00:49:02,210
at once well not really one after the

00:48:58,849 --> 00:49:04,190
other you make the request for the page

00:49:02,210 --> 00:49:06,109
and then the request for each of the

00:49:04,190 --> 00:49:08,509
images all over the same connection and

00:49:06,109 --> 00:49:11,839
not have the overhead of opening and

00:49:08,509 --> 00:49:17,809
closing ten connections so that's the

00:49:11,839 --> 00:49:21,920
idea however when you get done with one

00:49:17,809 --> 00:49:25,460
of those requests httpd has to wait for

00:49:21,920 --> 00:49:29,960
your next one and how long it waits is

00:49:25,460 --> 00:49:33,140
configurable in those days the default

00:49:29,960 --> 00:49:35,809
was I believe five seconds and five

00:49:33,140 --> 00:49:38,660
seconds is forever when you're having

00:49:35,809 --> 00:49:40,970
hundreds of requests per second and so

00:49:38,660 --> 00:49:44,809
you get a situation like this where you

00:49:40,970 --> 00:49:46,609
have a couple hundred processes that are

00:49:44,809 --> 00:49:49,700
waiting for the next request which is

00:49:46,609 --> 00:49:51,799
never going to come and so you're using

00:49:49,700 --> 00:49:53,299
half of your server resources on

00:49:51,799 --> 00:49:58,250
processes that are just sitting there

00:49:53,299 --> 00:50:03,230
doing nothing then we upgrade it to the

00:49:58,250 --> 00:50:06,170
event mpm and that problem went away and

00:50:03,230 --> 00:50:11,059
this was another screenshot just a few

00:50:06,170 --> 00:50:13,819
days later so the way that it does this

00:50:11,059 --> 00:50:16,700
is that those keep-alive sockets and I'm

00:50:13,819 --> 00:50:18,859
grossly oversimplifying here and getting

00:50:16,700 --> 00:50:20,359
away with it because I still have four

00:50:18,859 --> 00:50:22,579
more things to do in the next five

00:50:20,359 --> 00:50:24,259
minutes and it takes all those

00:50:22,579 --> 00:50:26,150
keep-alive sockets and it shoves them

00:50:24,259 --> 00:50:27,710
off into a queue until it needs them and

00:50:26,150 --> 00:50:35,329
if it doesn't need them then they just

00:50:27,710 --> 00:50:38,960
expire in the time given number 27 mud

00:50:35,329 --> 00:50:42,400
dbd is a module that does database

00:50:38,960 --> 00:50:45,170
connection pooling and this provides

00:50:42,400 --> 00:50:47,240
it's not a module that you use directly

00:50:45,170 --> 00:50:49,130
in your configuration file it's a module

00:50:47,240 --> 00:50:53,660
that other modules use when they want to

00:50:49,130 --> 00:50:57,039
talk to databases and that you can off

00:50:53,660 --> 00:50:59,839
against or you can make queries against

00:50:57,039 --> 00:51:03,500
and I just had the list yesterday I was

00:50:59,839 --> 00:51:05,720
going to remember it free TDS postgres

00:51:03,500 --> 00:51:08,980
my sequel Oracle

00:51:05,720 --> 00:51:13,570
and another one that I can't remember

00:51:08,980 --> 00:51:18,680
that's cool light that's right which one

00:51:13,570 --> 00:51:22,130
odbc okay and so for example you can use

00:51:18,680 --> 00:51:24,230
mod auth n DVD to authenticate against

00:51:22,130 --> 00:51:26,900
these databases and that looks something

00:51:24,230 --> 00:51:28,910
like this you set up a connection to

00:51:26,900 --> 00:51:30,950
your Postgres database providing your

00:51:28,910 --> 00:51:34,310
username and password in your hopefully

00:51:30,950 --> 00:51:38,300
very secure configuration file and you

00:51:34,310 --> 00:51:42,050
say i'm going to authenticate using that

00:51:38,300 --> 00:51:44,150
SQL query it takes the username that was

00:51:42,050 --> 00:51:48,560
provided it does a query and then it

00:51:44,150 --> 00:51:53,349
returns true or false you can also use

00:51:48,560 --> 00:51:56,270
mod DVD directly from rewrite map in 2.4

00:51:53,349 --> 00:51:58,700
you can use a rewrite map that does a

00:51:56,270 --> 00:52:06,020
database query in order to do URL

00:51:58,700 --> 00:52:10,460
mapping so that's cool mod negotiation

00:52:06,020 --> 00:52:14,990
and this was alluded to earlier if you

00:52:10,460 --> 00:52:17,210
want to make requests without file

00:52:14,990 --> 00:52:18,890
extensions you can do this using mod

00:52:17,210 --> 00:52:22,790
negotiation with one line of

00:52:18,890 --> 00:52:26,630
configuration so you can use example.com

00:52:22,790 --> 00:52:32,119
/ index instead of example com index dot

00:52:26,630 --> 00:52:35,270
PHP one reason for doing this is that

00:52:32,119 --> 00:52:38,869
99% of your audience has no idea what

00:52:35,270 --> 00:52:41,780
dot PHP means and therefore is likely to

00:52:38,869 --> 00:52:45,230
type it wrong so having URLs that don't

00:52:41,780 --> 00:52:46,790
have file extensions is better for URLs

00:52:45,230 --> 00:52:50,420
that you're going to read over the phone

00:52:46,790 --> 00:52:53,210
to someone the other thing is that if

00:52:50,420 --> 00:52:56,450
you choose to change your infrastructure

00:52:53,210 --> 00:52:59,270
from one type to another and that

00:52:56,450 --> 00:53:02,690
results in a file name change that

00:52:59,270 --> 00:53:04,760
doesn't change your URLs so here's the

00:53:02,690 --> 00:53:07,250
configuration line you add this one

00:53:04,760 --> 00:53:10,369
configuration line and it does the right

00:53:07,250 --> 00:53:14,210
thing in most cases be sure that you

00:53:10,369 --> 00:53:17,540
test the accept language header in your

00:53:14,210 --> 00:53:19,490
browser can also result in negotiating

00:53:17,540 --> 00:53:21,500
between different file but

00:53:19,490 --> 00:53:23,630
between different translation languages

00:53:21,500 --> 00:53:26,090
if you have files available in different

00:53:23,630 --> 00:53:28,760
languages that have a file extension

00:53:26,090 --> 00:53:32,450
indicating that language then these will

00:53:28,760 --> 00:53:35,060
automatically be negotiated between if

00:53:32,450 --> 00:53:38,390
you want to see this in action go to the

00:53:35,060 --> 00:53:42,560
Apache web server documentation website

00:53:38,390 --> 00:53:44,390
and change your browser preference to

00:53:42,560 --> 00:53:46,430
some other language and reload the page

00:53:44,390 --> 00:53:49,940
and you'll magically see it in that

00:53:46,430 --> 00:53:53,240
other language 29 have two minutes left

00:53:49,940 --> 00:53:56,300
and I have two things left so pluggable

00:53:53,240 --> 00:53:59,240
MP m's in 2.2 and earlier you have to

00:53:56,300 --> 00:54:02,330
rebuild to change your mpm in 2.4 you

00:53:59,240 --> 00:54:05,300
can build everything up front and choose

00:54:02,330 --> 00:54:07,190
between them with load module one cool

00:54:05,300 --> 00:54:09,470
thing to do here is actually run

00:54:07,190 --> 00:54:12,260
multiple damon's using different mpms

00:54:09,470 --> 00:54:14,690
off the same binary so that's that can

00:54:12,260 --> 00:54:16,990
be handy if you want the benefits of one

00:54:14,690 --> 00:54:23,270
and the benefits of other you can simply

00:54:16,990 --> 00:54:27,550
proxy accordingly number 30 oh look it's

00:54:23,270 --> 00:54:31,910
the missing slide huh that's weird

00:54:27,550 --> 00:54:33,950
anyway mod auth ends ldap lets you do

00:54:31,910 --> 00:54:36,040
authentication against an ldap server

00:54:33,950 --> 00:54:40,540
including your Active Directory server

00:54:36,040 --> 00:54:42,800
with a variety of keywords the

00:54:40,540 --> 00:54:46,070
configuration example here is actually

00:54:42,800 --> 00:54:48,080
2.2 syntax it's much more flexible in

00:54:46,070 --> 00:54:50,630
2.4 and I showed some of that yesterday

00:54:48,080 --> 00:54:55,040
hopefully you were all there and paying

00:54:50,630 --> 00:54:56,810
close attention and then finally this

00:54:55,040 --> 00:54:59,330
has been mentioned numerous times this

00:54:56,810 --> 00:55:02,330
week but can't get enough of it there is

00:54:59,330 --> 00:55:06,650
a expression evaluation syntax that's

00:55:02,330 --> 00:55:08,300
been added in 2.4 and it adds and it

00:55:06,650 --> 00:55:11,540
said see slides later because I

00:55:08,300 --> 00:55:12,950
rearranged my slides yesterday but I've

00:55:11,540 --> 00:55:15,080
shown several examples of this

00:55:12,950 --> 00:55:17,930
expression evaluation syntax during the

00:55:15,080 --> 00:55:21,440
course of this talk what the heck

00:55:17,930 --> 00:55:26,300
there's another one bonus slides number

00:55:21,440 --> 00:55:28,970
32 mud substitute allows you to it with

00:55:26,300 --> 00:55:31,830
one configuration directive modify

00:55:28,970 --> 00:55:34,080
content as it gets served out to the

00:55:31,830 --> 00:55:36,570
I showed you a silly way to do that with

00:55:34,080 --> 00:55:39,750
mod X filter earlier this is a much more

00:55:36,570 --> 00:55:43,410
efficient way I've got a bad word filter

00:55:39,750 --> 00:55:46,200
in there and then more usefully you can

00:55:43,410 --> 00:55:47,760
actually switch out say a hostname from

00:55:46,200 --> 00:55:50,070
a back-end server to a front end server

00:55:47,760 --> 00:55:51,780
I am totally out of time that's where my

00:55:50,070 --> 00:55:53,730
slides are that's where you can email me

00:55:51,780 --> 00:55:57,680
if you have any more questions get on

00:55:53,730 --> 00:55:57,680
IRC and ask us there thank you very much

00:56:00,990 --> 00:56:03,050

YouTube URL: https://www.youtube.com/watch?v=1BjRbXBKRWk


