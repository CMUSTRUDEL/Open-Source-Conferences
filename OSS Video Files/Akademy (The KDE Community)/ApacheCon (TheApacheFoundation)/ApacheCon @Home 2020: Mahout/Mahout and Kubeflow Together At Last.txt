Title: Mahout and Kubeflow Together At Last
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Mahout
Description: 
	Mahout and Kubeflow Together At Last
Trevor Grant

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Kubeflow is an exciting and fashionable new platform for Data Science. In this talk we will discuss how to use Apache Mahout (and Apache Spark) on it.

Someday he will be the Chief Mugwug. Not today, but someday.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,960 --> 00:00:27,199
how y'all doing today my name is trevor

00:00:26,640 --> 00:00:31,199
grant

00:00:27,199 --> 00:00:33,680
i am a and welcome to mahout and

00:00:31,199 --> 00:00:37,120
kubeflow together at last

00:00:33,680 --> 00:00:40,160
um a quick overview of this talk um

00:00:37,120 --> 00:00:42,719
and um we'll do who am i

00:00:40,160 --> 00:00:44,239
i meant to delete that i but i will

00:00:42,719 --> 00:00:46,000
probably be free-forming for a minute

00:00:44,239 --> 00:00:47,520
doing some fills

00:00:46,000 --> 00:00:49,280
um we'll do a little background on what

00:00:47,520 --> 00:00:53,360
is mahout what is spark

00:00:49,280 --> 00:00:55,840
what is kubeflow this will actually

00:00:53,360 --> 00:00:57,199
this isn't even up to date i worked so

00:00:55,840 --> 00:00:58,160
hard on my slides i forgot to update my

00:00:57,199 --> 00:00:59,760
agenda

00:00:58,160 --> 00:01:01,760
this is more or less correct but that's

00:00:59,760 --> 00:01:03,120
fine um and there'll be a lot of

00:01:01,760 --> 00:01:04,960
shameless plugs for the

00:01:03,120 --> 00:01:06,400
especially the book and a couple for the

00:01:04,960 --> 00:01:10,080
article throughout the uh

00:01:06,400 --> 00:01:13,119
talk um so who am i

00:01:10,080 --> 00:01:16,479
who am i um i

00:01:13,119 --> 00:01:17,119
work at a lot of places but for whatever

00:01:16,479 --> 00:01:20,479
purposes

00:01:17,119 --> 00:01:21,360
i am the cto of my own whatever company

00:01:20,479 --> 00:01:24,000
which has

00:01:21,360 --> 00:01:24,640
a naming schema similar to ubuntu with

00:01:24,000 --> 00:01:28,400
yeah

00:01:24,640 --> 00:01:28,400
it's my first one aboriginal armadillo

00:01:28,799 --> 00:01:32,960
also an o'reilly author um co-author of

00:01:31,759 --> 00:01:34,799
the upcoming

00:01:32,960 --> 00:01:36,479
kubeflow for machine learning from lab

00:01:34,799 --> 00:01:38,000
to production you will hear about that

00:01:36,479 --> 00:01:41,040
lots throughout this

00:01:38,000 --> 00:01:43,759
and the demo that we talked about

00:01:41,040 --> 00:01:45,040
throughout the uh back end of this is

00:01:43,759 --> 00:01:47,040
actually chapter nine

00:01:45,040 --> 00:01:50,399
in the book and there's a uh article

00:01:47,040 --> 00:01:52,840
about it um i'm a pmc of apache mahout

00:01:50,399 --> 00:01:54,479
and apache streams and

00:01:52,840 --> 00:01:57,439
patchycommunity.dev um

00:01:54,479 --> 00:01:59,280
i organized the mahou track i also

00:01:57,439 --> 00:02:01,920
organized the iot track

00:01:59,280 --> 00:02:03,200
i used to do iot at ibm i still work at

00:02:01,920 --> 00:02:06,000
ibm too

00:02:03,200 --> 00:02:08,319
um aspiring chief mugwug i appreciate

00:02:06,000 --> 00:02:11,760
everyone for coming today

00:02:08,319 --> 00:02:14,800
i kind of just did a quick fill abstract

00:02:11,760 --> 00:02:15,040
and bio because it was the last day and

00:02:14,800 --> 00:02:17,440
i

00:02:15,040 --> 00:02:18,160
figured uh i'll go back and update it

00:02:17,440 --> 00:02:19,440
later

00:02:18,160 --> 00:02:22,000
and i realized last week that i'd

00:02:19,440 --> 00:02:23,760
forgotten so you read my bio on

00:02:22,000 --> 00:02:26,160
this i'm apparently the aspiring chief

00:02:23,760 --> 00:02:29,040
muglug whatever that may be

00:02:26,160 --> 00:02:30,480
um ah yes the book i promised to plug

00:02:29,040 --> 00:02:34,080
relentlessly

00:02:30,480 --> 00:02:36,560
um is presented chapter nine

00:02:34,080 --> 00:02:37,760
um is this this is the book it's

00:02:36,560 --> 00:02:40,720
available for pre-sale

00:02:37,760 --> 00:02:41,760
on amazon.com right now for i think 45

00:02:40,720 --> 00:02:44,879
you should all buy it

00:02:41,760 --> 00:02:47,360
i think i get quarters per purchase so

00:02:44,879 --> 00:02:48,879
gotta make that for your money somehow

00:02:47,360 --> 00:02:50,160
um you can ask questions on

00:02:48,879 --> 00:02:52,480
apachecon.slack

00:02:50,160 --> 00:02:54,080
i will also see the questions in the

00:02:52,480 --> 00:02:56,239
local

00:02:54,080 --> 00:02:58,360
chat panel i didn't realize we had that

00:02:56,239 --> 00:02:59,680
um there is a mahout channel on

00:02:58,360 --> 00:03:00,879
apachecon.slack.com

00:02:59,680 --> 00:03:04,400
so whatever you're comfortable with i

00:03:00,879 --> 00:03:06,319
will check both at the end of this talk

00:03:04,400 --> 00:03:08,159
um so let's get into it tell me more

00:03:06,319 --> 00:03:11,920
about apache spark

00:03:08,159 --> 00:03:12,400
um considering y'all are at an apache

00:03:11,920 --> 00:03:16,000
con

00:03:12,400 --> 00:03:19,280
i will hope that you know a bit about

00:03:16,000 --> 00:03:21,840
or have heard of apache spark it's um

00:03:19,280 --> 00:03:23,280
a quasi-popular apache project i'd say

00:03:21,840 --> 00:03:26,319
at least top 50.

00:03:23,280 --> 00:03:27,440
um very common well-supported engine for

00:03:26,319 --> 00:03:29,599
big data etl

00:03:27,440 --> 00:03:30,959
the one-liner it's in memory map reduce

00:03:29,599 --> 00:03:32,239
if you haven't heard of it but you know

00:03:30,959 --> 00:03:36,239
about hadoop

00:03:32,239 --> 00:03:37,280
um there is spark ml but where spark ml

00:03:36,239 --> 00:03:40,159
lacks

00:03:37,280 --> 00:03:41,120
is um robust linear algebra type

00:03:40,159 --> 00:03:43,120
operations

00:03:41,120 --> 00:03:44,840
which happen to be something we needed

00:03:43,120 --> 00:03:49,280
um and so that's why that's

00:03:44,840 --> 00:03:51,360
italicized specifically mahout is

00:03:49,280 --> 00:03:52,319
we call it machine learning because we

00:03:51,360 --> 00:03:55,280
like to uh

00:03:52,319 --> 00:03:56,400
you know we want to ride that wave of

00:03:55,280 --> 00:03:59,280
machine learning's cool

00:03:56,400 --> 00:04:01,760
data science whatever but really it's

00:03:59,280 --> 00:04:03,680
distributed linear algebra

00:04:01,760 --> 00:04:05,120
and which gives you a lot more power

00:04:03,680 --> 00:04:05,920
than your typical machine learning

00:04:05,120 --> 00:04:08,400
because

00:04:05,920 --> 00:04:09,519
you can quickly and easily implement

00:04:08,400 --> 00:04:12,400
your own

00:04:09,519 --> 00:04:13,439
whatever r algorithm you have um and so

00:04:12,400 --> 00:04:16,479
that's really the value

00:04:13,439 --> 00:04:18,000
of mahout uh there we go

00:04:16,479 --> 00:04:19,519
so yeah linear algebra at scale i guess

00:04:18,000 --> 00:04:22,400
i was kind of talking ahead of myself

00:04:19,519 --> 00:04:24,000
it all like also has a it's scala only

00:04:22,400 --> 00:04:24,800
we don't have python or r bindings

00:04:24,000 --> 00:04:26,960
however

00:04:24,800 --> 00:04:28,000
scala allows you to have domain specific

00:04:26,960 --> 00:04:30,479
languages

00:04:28,000 --> 00:04:31,520
um and we have this r like domain

00:04:30,479 --> 00:04:33,120
specific language

00:04:31,520 --> 00:04:35,600
and the value in that is if you've ever

00:04:33,120 --> 00:04:38,000
seen um

00:04:35,600 --> 00:04:38,880
algebraic expressions expressed in r you

00:04:38,000 --> 00:04:40,240
can

00:04:38,880 --> 00:04:42,400
they're not perfect but you can kind of

00:04:40,240 --> 00:04:43,919
see you can follow from

00:04:42,400 --> 00:04:45,680
like the way it's written on like a

00:04:43,919 --> 00:04:47,840
paper to

00:04:45,680 --> 00:04:49,600
how it's written in the code which just

00:04:47,840 --> 00:04:52,880
makes it a lot easier to

00:04:49,600 --> 00:04:54,160
transcribe those things um

00:04:52,880 --> 00:04:55,680
it's not the point of the talk though

00:04:54,160 --> 00:04:56,720
but i mean there's a whole deep dives on

00:04:55,680 --> 00:04:59,040
that as well

00:04:56,720 --> 00:04:59,840
um i highly recommend you check it out

00:04:59,040 --> 00:05:01,759
it also

00:04:59,840 --> 00:05:03,120
has while it runs on a it's a library

00:05:01,759 --> 00:05:06,160
that runs on apache spark

00:05:03,120 --> 00:05:07,440
um or h2o or flink you can also write

00:05:06,160 --> 00:05:10,320
your own back end

00:05:07,440 --> 00:05:12,000
um and that's um an important thing if

00:05:10,320 --> 00:05:15,039
you have a bunch of data

00:05:12,000 --> 00:05:16,880
in i don't know i don't know there's a

00:05:15,039 --> 00:05:19,600
whole there's there's talks on that too

00:05:16,880 --> 00:05:21,759
um suffice to say it does we'll be using

00:05:19,600 --> 00:05:25,360
it as a library on apache spark

00:05:21,759 --> 00:05:28,400
um and most importantly it can decompose

00:05:25,360 --> 00:05:30,080
large distributed matrices um

00:05:28,400 --> 00:05:32,720
and and we'll get into that in a bit but

00:05:30,080 --> 00:05:36,080
that's the the real value that we wanted

00:05:32,720 --> 00:05:39,600
for mahou um in this

00:05:36,080 --> 00:05:41,600
pipeline and what's a pipeline well

00:05:39,600 --> 00:05:43,600
that's going to be a kubeflow thing

00:05:41,600 --> 00:05:45,039
kubeflow if you haven't heard of an

00:05:43,600 --> 00:05:48,639
apache con is the most likely you

00:05:45,039 --> 00:05:51,039
haven't um this is from their website

00:05:48,639 --> 00:05:52,160
but the key points of cooper again i

00:05:51,039 --> 00:05:53,600
wrote the whole book on it i could

00:05:52,160 --> 00:05:55,280
probably go on i can give a full talks

00:05:53,600 --> 00:05:58,319
on kubeflow as well

00:05:55,280 --> 00:06:00,400
but for the purposes of this talk

00:05:58,319 --> 00:06:02,319
you can create reproducible machine

00:06:00,400 --> 00:06:03,680
learning pipelines of docker containers

00:06:02,319 --> 00:06:06,560
which allows you to mix and match your

00:06:03,680 --> 00:06:09,520
python your r scala java

00:06:06,560 --> 00:06:11,199
c code you got some cobalt hanging out

00:06:09,520 --> 00:06:13,120
somewhere you want to use

00:06:11,199 --> 00:06:14,880
getting weird with pascal whatever

00:06:13,120 --> 00:06:15,919
whatever you want you can put these in a

00:06:14,880 --> 00:06:18,639
pipeline um

00:06:15,919 --> 00:06:19,280
there's a lot of advantages of that and

00:06:18,639 --> 00:06:22,479
most

00:06:19,280 --> 00:06:24,880
importantly for this is

00:06:22,479 --> 00:06:25,919
this kubeflow pipeline is packaged and

00:06:24,880 --> 00:06:28,960
committed to git

00:06:25,919 --> 00:06:31,360
and anyone can pull that set up a coupe

00:06:28,960 --> 00:06:34,880
full customer on gcp

00:06:31,360 --> 00:06:36,479
tweak a couple of settings and run

00:06:34,880 --> 00:06:38,560
the exact same pipeline and get the

00:06:36,479 --> 00:06:40,880
exact same results

00:06:38,560 --> 00:06:42,080
and you know science is about you know

00:06:40,880 --> 00:06:45,199
creating reproducible

00:06:42,080 --> 00:06:46,880
results um and but another part of that

00:06:45,199 --> 00:06:48,080
like is it's not just like okay well

00:06:46,880 --> 00:06:50,479
here's what i did and in theory

00:06:48,080 --> 00:06:52,639
you can reproduce your own this actually

00:06:50,479 --> 00:06:55,599
like no not only can you reproduce it

00:06:52,639 --> 00:06:57,199
here's the code and in like 30 minutes

00:06:55,599 --> 00:06:59,199
you can get the same result

00:06:57,199 --> 00:07:00,560
and then you can just see you know oh

00:06:59,199 --> 00:07:01,680
wait but you had a

00:07:00,560 --> 00:07:03,440
negative sign here where it should have

00:07:01,680 --> 00:07:03,759
been a positive sign or something like

00:07:03,440 --> 00:07:06,240
that

00:07:03,759 --> 00:07:07,120
or you can further extend it saying okay

00:07:06,240 --> 00:07:09,680
cool

00:07:07,120 --> 00:07:11,360
given those results on we're going to be

00:07:09,680 --> 00:07:13,440
using ct scans

00:07:11,360 --> 00:07:15,280
i will then put a neural network on

00:07:13,440 --> 00:07:16,960
these clean ct scans

00:07:15,280 --> 00:07:19,440
uh downstream and i'm going to create

00:07:16,960 --> 00:07:20,080
the next tax so it makes it really

00:07:19,440 --> 00:07:23,599
really

00:07:20,080 --> 00:07:27,199
um it's uh it's a great

00:07:23,599 --> 00:07:28,400
product for helping um facilitate

00:07:27,199 --> 00:07:30,639
collaboration

00:07:28,400 --> 00:07:31,919
um with machine learning and science in

00:07:30,639 --> 00:07:33,759
general

00:07:31,919 --> 00:07:35,280
uh but again i'm giving lots of kubeflow

00:07:33,759 --> 00:07:36,479
talks too and that's not exactly the

00:07:35,280 --> 00:07:39,120
point of this talk

00:07:36,479 --> 00:07:40,319
we want to talk about how we can use

00:07:39,120 --> 00:07:42,479
them together

00:07:40,319 --> 00:07:44,400
um some useful data science things you

00:07:42,479 --> 00:07:46,319
can do in fall there's the model serving

00:07:44,400 --> 00:07:49,120
you can automate retraining

00:07:46,319 --> 00:07:50,400
um you kind of have cross-cloud

00:07:49,120 --> 00:07:51,919
compatibility

00:07:50,400 --> 00:07:54,000
in the same way that you can just deploy

00:07:51,919 --> 00:07:55,520
kubernetes to any cross-cloud

00:07:54,000 --> 00:07:58,160
there's there's tweaks you have to make

00:07:55,520 --> 00:07:59,919
but it basically will run on any cloud

00:07:58,160 --> 00:08:01,759
multiple languages in the pipeline the

00:07:59,919 --> 00:08:03,039
reproducibility in the pipelines um

00:08:01,759 --> 00:08:03,680
again i kind of spoke out ahead of

00:08:03,039 --> 00:08:05,840
myself

00:08:03,680 --> 00:08:07,199
but that's the those were some points i

00:08:05,840 --> 00:08:10,879
wanted to

00:08:07,199 --> 00:08:10,879
really really drive home on this

00:08:11,039 --> 00:08:14,800
so let's talk about these pipelines this

00:08:13,440 --> 00:08:18,160
is a kind of just

00:08:14,800 --> 00:08:18,160
sample pipeline um

00:08:19,680 --> 00:08:24,319
and i believe it's an xg boost run um

00:08:22,800 --> 00:08:26,879
but you'll see you know it does

00:08:24,319 --> 00:08:28,400
it it pulls the data in analyzes it to

00:08:26,879 --> 00:08:32,640
make sure that it's clean

00:08:28,400 --> 00:08:35,760
will do the etl trains xg boost

00:08:32,640 --> 00:08:37,919
can predict um you know whatever

00:08:35,760 --> 00:08:38,959
gives your your confusion matrix your

00:08:37,919 --> 00:08:41,680
rock curve

00:08:38,959 --> 00:08:44,000
and then whatever um this is an example

00:08:41,680 --> 00:08:46,959
not all pipelines will be like this

00:08:44,000 --> 00:08:49,440
but it's a way you can do a pipeline

00:08:46,959 --> 00:08:52,560
that's also good to keep your etl

00:08:49,440 --> 00:08:55,600
and your um your etl

00:08:52,560 --> 00:08:58,000
in with the model because changing etl

00:08:55,600 --> 00:09:00,080
can drastically change the model so

00:08:58,000 --> 00:09:03,920
being able to keep everything in like

00:09:00,080 --> 00:09:05,200
as as one asset together is also a very

00:09:03,920 --> 00:09:08,399
very valuable thing

00:09:05,200 --> 00:09:09,120
um and then you can there's also

00:09:08,399 --> 00:09:11,360
conditional

00:09:09,120 --> 00:09:12,399
outputs on this so this for example

00:09:11,360 --> 00:09:15,600
might be

00:09:12,399 --> 00:09:17,760
a conditional you know if the confusion

00:09:15,600 --> 00:09:22,080
matrix meets some

00:09:17,760 --> 00:09:24,560
um criteria then push to production

00:09:22,080 --> 00:09:26,000
otherwise just don't push into

00:09:24,560 --> 00:09:26,800
production and leave the production one

00:09:26,000 --> 00:09:28,080
alone

00:09:26,800 --> 00:09:30,000
um there's a lot of cool things you can

00:09:28,080 --> 00:09:30,480
do with pipelines in this but again

00:09:30,000 --> 00:09:33,600
there

00:09:30,480 --> 00:09:36,880
and there's so many cool things that i

00:09:33,600 --> 00:09:37,920
can't i can't do justice to kubeflow and

00:09:36,880 --> 00:09:39,440
all the cool things you can do with the

00:09:37,920 --> 00:09:41,600
pipelines

00:09:39,440 --> 00:09:44,000
whilst still covering the other things

00:09:41,600 --> 00:09:46,959
we want to cover in this

00:09:44,000 --> 00:09:48,399
um spark on kubeflow and really spark on

00:09:46,959 --> 00:09:50,959
kubernetes

00:09:48,399 --> 00:09:51,760
i should have i forgot to write these

00:09:50,959 --> 00:09:55,360
slides out

00:09:51,760 --> 00:09:56,480
um there's multiple ways to run spark on

00:09:55,360 --> 00:09:59,600
kubernetes

00:09:56,480 --> 00:10:01,200
um however when you're doing so in a

00:09:59,600 --> 00:10:02,480
kubeflow pipeline

00:10:01,200 --> 00:10:05,360
these are all generally docker

00:10:02,480 --> 00:10:08,959
containers or kubernetes operators

00:10:05,360 --> 00:10:13,200
and your spark step will be a kubernetes

00:10:08,959 --> 00:10:17,760
operator um and so

00:10:13,200 --> 00:10:19,279
that's the short of it there is some um

00:10:17,760 --> 00:10:21,440
that you can do you can set your

00:10:19,279 --> 00:10:22,720
parameters in the yaml file

00:10:21,440 --> 00:10:24,640
and again if you don't aren't familiar

00:10:22,720 --> 00:10:26,079
with kubernetes i'm sorry because

00:10:24,640 --> 00:10:28,079
this is probably flying a bit over your

00:10:26,079 --> 00:10:30,720
head um

00:10:28,079 --> 00:10:32,079
and that's okay you'll if you when you

00:10:30,720 --> 00:10:33,839
start learning about kubernetes you will

00:10:32,079 --> 00:10:34,399
learn about yaml files and configs like

00:10:33,839 --> 00:10:37,200
that

00:10:34,399 --> 00:10:38,480
and that's where you would config um you

00:10:37,200 --> 00:10:40,160
know how many executors

00:10:38,480 --> 00:10:42,240
how many machines you want cores per

00:10:40,160 --> 00:10:44,560
executor memory

00:10:42,240 --> 00:10:45,360
and all those fun spark things that we

00:10:44,560 --> 00:10:48,959
all just love

00:10:45,360 --> 00:10:49,360
so much um there's more troubles than

00:10:48,959 --> 00:10:52,160
this

00:10:49,360 --> 00:10:53,120
trust me however some of the big ones

00:10:52,160 --> 00:10:54,880
you'll write that

00:10:53,120 --> 00:10:56,399
um you wouldn't be thinking about is

00:10:54,880 --> 00:10:59,279
because it's an operator

00:10:56,399 --> 00:11:00,800
it will it will create a spark app on

00:10:59,279 --> 00:11:04,560
each run

00:11:00,800 --> 00:11:05,120
now if you don't have some sort of logic

00:11:04,560 --> 00:11:08,079
that like

00:11:05,120 --> 00:11:09,839
creates like a random five characters on

00:11:08,079 --> 00:11:11,760
the end of that spark app name

00:11:09,839 --> 00:11:13,760
you'll get a fail on the second run

00:11:11,760 --> 00:11:15,519
unless you delete the spark app

00:11:13,760 --> 00:11:17,360
that gets created but that doesn't

00:11:15,519 --> 00:11:18,800
happen automatically in your yaml file

00:11:17,360 --> 00:11:19,920
you'll probably config you know the name

00:11:18,800 --> 00:11:22,320
of your

00:11:19,920 --> 00:11:23,200
the name of your app um and that'll

00:11:22,320 --> 00:11:25,760
still be

00:11:23,200 --> 00:11:29,519
existing as like a done job and it'll

00:11:25,760 --> 00:11:31,760
throw an error when you try to um

00:11:29,519 --> 00:11:32,880
when you try to run it again again

00:11:31,760 --> 00:11:36,240
things you just bs have

00:11:32,880 --> 00:11:40,399
learned the hard way um

00:11:36,240 --> 00:11:43,120
but pvc is a persistent volume claim um

00:11:40,399 --> 00:11:44,640
on some kubernetes you can allow

00:11:43,120 --> 00:11:47,120
multiple rights

00:11:44,640 --> 00:11:48,240
but like for example on gcp you cannot

00:11:47,120 --> 00:11:50,880
do that

00:11:48,240 --> 00:11:52,480
and so if you're you can't allow

00:11:50,880 --> 00:11:53,519
multiple writes you need to write to

00:11:52,480 --> 00:11:57,440
somewhere else

00:11:53,519 --> 00:11:58,639
in our case we wrote to an s3 bucket um

00:11:57,440 --> 00:11:59,839
it's not the end of the world but you

00:11:58,639 --> 00:12:01,360
know it's just like one of those things

00:11:59,839 --> 00:12:05,360
like i said it's

00:12:01,360 --> 00:12:08,480
cross-cloud compatible ish it depends

00:12:05,360 --> 00:12:09,680
you know on a number of things for case

00:12:08,480 --> 00:12:11,760
and point this

00:12:09,680 --> 00:12:12,959
but you know okay so you regain what

00:12:11,760 --> 00:12:16,160
you're going to write to and it's

00:12:12,959 --> 00:12:19,519
it's all still fairly cross-compatible

00:12:16,160 --> 00:12:22,320
so the chapter 9 example in the book

00:12:19,519 --> 00:12:24,000
and what the journal article um are both

00:12:22,320 --> 00:12:27,839
talking about though from different

00:12:24,000 --> 00:12:30,240
perspectives is how to deny ct scans

00:12:27,839 --> 00:12:32,320
uh with apache mahout um running on

00:12:30,240 --> 00:12:33,680
kubeflow

00:12:32,320 --> 00:12:36,000
so the first question is why would you

00:12:33,680 --> 00:12:39,120
want to do this um

00:12:36,000 --> 00:12:39,760
the whole this whole scheme came up in i

00:12:39,120 --> 00:12:42,800
think

00:12:39,760 --> 00:12:46,160
march or maybe mid april

00:12:42,800 --> 00:12:47,519
um but just some background on just ct

00:12:46,160 --> 00:12:49,760
scans um

00:12:47,519 --> 00:12:51,360
ct scans can you know they give you very

00:12:49,760 --> 00:12:53,519
useful diagnostics

00:12:51,360 --> 00:12:55,360
um you can check for lung cancer you can

00:12:53,519 --> 00:12:58,320
look at a lot of things

00:12:55,360 --> 00:12:59,360
but doing a full ct scan delivers a high

00:12:58,320 --> 00:13:01,839
dose of radiation

00:12:59,360 --> 00:13:03,680
like a thorax like a chest ct scan you

00:13:01,839 --> 00:13:04,240
can only have about 25 of those in your

00:13:03,680 --> 00:13:06,880
life

00:13:04,240 --> 00:13:08,240
or you run like serious radiation risks

00:13:06,880 --> 00:13:10,800
um

00:13:08,240 --> 00:13:12,639
that being said like chronic smokers

00:13:10,800 --> 00:13:13,920
they came up with a way to do a low dose

00:13:12,639 --> 00:13:16,240
ct scan

00:13:13,920 --> 00:13:17,920
uh i think in the late 90s or started

00:13:16,240 --> 00:13:18,880
using it a lot for like testing for lung

00:13:17,920 --> 00:13:20,720
cancer and it's like

00:13:18,880 --> 00:13:22,000
you know every year you get a low dose

00:13:20,720 --> 00:13:24,000
ct scan

00:13:22,000 --> 00:13:25,600
now the problem with a low dose ct scan

00:13:24,000 --> 00:13:26,639
is they're fuzzy and hard to read they

00:13:25,600 --> 00:13:30,880
call them noisy

00:13:26,639 --> 00:13:32,240
um uh but you know in the late 90s

00:13:30,880 --> 00:13:33,279
because they were doing this and they

00:13:32,240 --> 00:13:36,320
wanted to clean these

00:13:33,279 --> 00:13:39,600
on noisy cd scans up

00:13:36,320 --> 00:13:41,199
they've basic they found basically

00:13:39,600 --> 00:13:43,920
singular value compositions

00:13:41,199 --> 00:13:46,880
um and what is really kind of like a

00:13:43,920 --> 00:13:49,680
principal component analysis

00:13:46,880 --> 00:13:51,279
is how they figured out to clean those

00:13:49,680 --> 00:13:52,639
up but the problem is these ct scans are

00:13:51,279 --> 00:13:54,560
so large

00:13:52,639 --> 00:13:56,800
that and you need to do it on a single

00:13:54,560 --> 00:14:00,480
machine and it's super memory intensive

00:13:56,800 --> 00:14:04,000
i actually tried to do uh svd

00:14:00,480 --> 00:14:04,480
with python on a ct scan um and it

00:14:04,000 --> 00:14:06,000
griped

00:14:04,480 --> 00:14:08,320
it estimated it was going to need about

00:14:06,000 --> 00:14:10,160
a half a terabyte of memory

00:14:08,320 --> 00:14:12,240
that was back in you know late 90s early

00:14:10,160 --> 00:14:13,279
2000s today i think the biggest machine

00:14:12,240 --> 00:14:16,720
you can pull

00:14:13,279 --> 00:14:18,160
on aws has about 400 gigabytes you can't

00:14:16,720 --> 00:14:20,959
just do a straight

00:14:18,160 --> 00:14:22,880
singular value decomposition however

00:14:20,959 --> 00:14:23,199
there's ways to approximate a singular

00:14:22,880 --> 00:14:25,279
value

00:14:23,199 --> 00:14:27,680
composition with k means there's

00:14:25,279 --> 00:14:30,240
actually a bunch of ways to figure out

00:14:27,680 --> 00:14:31,120
how to approximate the clean um covet

00:14:30,240 --> 00:14:33,440
scan

00:14:31,120 --> 00:14:35,920
one of the major approaches is using in

00:14:33,440 --> 00:14:39,120
essence a singular value decomposition

00:14:35,920 --> 00:14:39,680
um and it's a and it's an estimation of

00:14:39,120 --> 00:14:41,279
it but

00:14:39,680 --> 00:14:43,279
that's the gist of what you're trying to

00:14:41,279 --> 00:14:45,839
do um

00:14:43,279 --> 00:14:46,959
the i i was writing this yesterday and

00:14:45,839 --> 00:14:48,959
thought i'd come back and i got kind of

00:14:46,959 --> 00:14:50,720
spicy at the fda but

00:14:48,959 --> 00:14:52,079
the gist of it is the fda stuck their

00:14:50,720 --> 00:14:54,079
fingers in it and said no no

00:14:52,079 --> 00:14:55,760
no you can't just do this you have to

00:14:54,079 --> 00:14:58,560
clear everything with us

00:14:55,760 --> 00:14:59,839
so companies make a point well even

00:14:58,560 --> 00:15:00,880
though there's plenty of research on how

00:14:59,839 --> 00:15:04,000
to do this

00:15:00,880 --> 00:15:06,880
you have to pay a company who's

00:15:04,000 --> 00:15:08,079
paid to have their appliance cleared

00:15:06,880 --> 00:15:10,079
with the fda

00:15:08,079 --> 00:15:12,000
to make sure that it's okay for cleaning

00:15:10,079 --> 00:15:13,519
ct scans this is an artifact

00:15:12,000 --> 00:15:15,519
and a problem of our healthcare system

00:15:13,519 --> 00:15:18,959
but it is what it is

00:15:15,519 --> 00:15:22,399
um and so the problem for

00:15:18,959 --> 00:15:24,000
researchers is how do we clean

00:15:22,399 --> 00:15:25,519
these low-dose ct scans best-case

00:15:24,000 --> 00:15:26,959
scenario

00:15:25,519 --> 00:15:28,639
whoever took them has already cleaned

00:15:26,959 --> 00:15:31,839
them up and you're getting clean ones

00:15:28,639 --> 00:15:33,519
it's not always the case um

00:15:31,839 --> 00:15:37,199
but that also might seem like okay weird

00:15:33,519 --> 00:15:40,160
corner case still why are we doing this

00:15:37,199 --> 00:15:42,480
well in april um there was some research

00:15:40,160 --> 00:15:45,920
already showing that

00:15:42,480 --> 00:15:49,199
ct scans were in some cases better

00:15:45,920 --> 00:15:51,519
um predictors of covid than

00:15:49,199 --> 00:15:52,480
the rt pcr test that's like the blood

00:15:51,519 --> 00:15:54,240
test

00:15:52,480 --> 00:15:55,839
um research since then has actually

00:15:54,240 --> 00:15:58,000
shown that and there's like guidance now

00:15:55,839 --> 00:15:59,600
on when you should use ct scans

00:15:58,000 --> 00:16:01,360
versus when you should just be okay with

00:15:59,600 --> 00:16:04,560
rt pcr

00:16:01,360 --> 00:16:07,680
um and in the you know

00:16:04,560 --> 00:16:08,959
postcoded world the fda is pretty much

00:16:07,680 --> 00:16:10,880
off the table

00:16:08,959 --> 00:16:12,480
you can you we don't have to you know

00:16:10,880 --> 00:16:15,680
bribe off the fda to

00:16:12,480 --> 00:16:16,240
make covid tests um and a lot of other

00:16:15,680 --> 00:16:20,079
things

00:16:16,240 --> 00:16:22,000
so the idea here was let's create a way

00:16:20,079 --> 00:16:23,839
for hospitals to be able to do their

00:16:22,000 --> 00:16:26,320
low-to-low ct scans

00:16:23,839 --> 00:16:28,480
and not have to pay whoever to clean

00:16:26,320 --> 00:16:32,399
them because like in

00:16:28,480 --> 00:16:34,480
developing areas in areas where it's not

00:16:32,399 --> 00:16:36,079
fiscally feasible helping them prevent

00:16:34,480 --> 00:16:37,839
this scans

00:16:36,079 --> 00:16:40,480
we should it would be nice if they had a

00:16:37,839 --> 00:16:43,600
way to do low-dose ct scans

00:16:40,480 --> 00:16:45,680
is the short of the long of this um

00:16:43,600 --> 00:16:47,199
and also ai researchers i've been

00:16:45,680 --> 00:16:48,079
looking you know are looking at like

00:16:47,199 --> 00:16:50,079
making

00:16:48,079 --> 00:16:51,440
convolutional neural nets on ct scans to

00:16:50,079 --> 00:16:55,040
see if they can uh

00:16:51,440 --> 00:16:57,199
detect covid and all these things so

00:16:55,040 --> 00:16:58,320
that's big picture the gist of what we

00:16:57,199 --> 00:17:01,839
were hoping for here

00:16:58,320 --> 00:17:04,240
is to be able to give researchers

00:17:01,839 --> 00:17:05,520
a way they could denoise their ct scans

00:17:04,240 --> 00:17:08,400
and they could do it

00:17:05,520 --> 00:17:09,679
by just spinning up you know either gcp

00:17:08,400 --> 00:17:12,959
or an aws

00:17:09,679 --> 00:17:16,160
kubeflow cluster um and

00:17:12,959 --> 00:17:16,160
doing this for you know

00:17:16,640 --> 00:17:20,959
if on on large batches you do them for

00:17:18,959 --> 00:17:22,720
like you know like 100 ct scans

00:17:20,959 --> 00:17:25,439
you could do them for nickels each as

00:17:22,720 --> 00:17:27,039
opposed to i don't even know what

00:17:25,439 --> 00:17:29,440
the health care costs are but i'm sure

00:17:27,039 --> 00:17:30,480
it's high especially when fda bribes

00:17:29,440 --> 00:17:32,640
come into play

00:17:30,480 --> 00:17:34,000
uh and again sorry to be so spicy at the

00:17:32,640 --> 00:17:37,600
fda but

00:17:34,000 --> 00:17:40,000
there it is um ct scans

00:17:37,600 --> 00:17:40,880
of so where did we get these ct scans

00:17:40,000 --> 00:17:43,280
there was

00:17:40,880 --> 00:17:45,200
a thing called corona cases.org which

00:17:43,280 --> 00:17:48,240
has about 11 scans

00:17:45,200 --> 00:17:48,799
um collected by a brazilian person i

00:17:48,240 --> 00:17:50,160
think

00:17:48,799 --> 00:17:52,559
and then it was taken down and then i

00:17:50,160 --> 00:17:54,720
looked yesterday and it's back up so

00:17:52,559 --> 00:17:55,679
i don't know if you're interested go get

00:17:54,720 --> 00:17:58,160
them and

00:17:55,679 --> 00:17:59,919
it's whatever but if you just want to

00:17:58,160 --> 00:18:02,160
play with this in general to make sure

00:17:59,919 --> 00:18:05,200
you can build a useful thing

00:18:02,160 --> 00:18:07,760
you can also just download ct scans

00:18:05,200 --> 00:18:09,440
dicom and you can get lots of archives

00:18:07,760 --> 00:18:12,240
like lung cancer

00:18:09,440 --> 00:18:13,679
various um ailments just find some

00:18:12,240 --> 00:18:15,440
thorax ct scans

00:18:13,679 --> 00:18:16,880
really anything in dicom files you want

00:18:15,440 --> 00:18:19,200
to find dicom files

00:18:16,880 --> 00:18:21,200
um there's lots of things they can ct

00:18:19,200 --> 00:18:22,000
scan and the math works basically the

00:18:21,200 --> 00:18:25,200
same

00:18:22,000 --> 00:18:26,000
anyway um and so yeah lots of data sets

00:18:25,200 --> 00:18:30,640
out there

00:18:26,000 --> 00:18:33,360
so go nuts so the pipeline that we built

00:18:30,640 --> 00:18:35,200
um and again the value here is this is

00:18:33,360 --> 00:18:38,320
repeatable and transferable

00:18:35,200 --> 00:18:40,400
any hospital in

00:18:38,320 --> 00:18:41,200
a remote area that doesn't have access

00:18:40,400 --> 00:18:42,240
to whatever as long as they have an

00:18:41,200 --> 00:18:45,280
internet connection

00:18:42,240 --> 00:18:48,799
on a reasonable speed they can clone

00:18:45,280 --> 00:18:50,320
and build this and run it um and be

00:18:48,799 --> 00:18:52,080
checking their own and denoising their

00:18:50,320 --> 00:18:55,280
own ct scans or

00:18:52,080 --> 00:18:56,799
people can say hey cool idea except

00:18:55,280 --> 00:18:59,039
you screwed up your math right here and

00:18:56,799 --> 00:19:01,679
i don't know how any of this worked but

00:18:59,039 --> 00:19:02,960
cool or people can say hey i want to do

00:19:01,679 --> 00:19:05,760
some neural nets

00:19:02,960 --> 00:19:06,320
on ct scans and covet patients but i

00:19:05,760 --> 00:19:08,480
wanted

00:19:06,320 --> 00:19:10,400
the ct scans clean first they can take

00:19:08,480 --> 00:19:11,679
this and just add another operator here

00:19:10,400 --> 00:19:14,880
at the end

00:19:11,679 --> 00:19:16,160
so that's the value of like why we built

00:19:14,880 --> 00:19:18,559
this pipeline

00:19:16,160 --> 00:19:20,799
um and we're going to go through the

00:19:18,559 --> 00:19:22,799
individual components one by one

00:19:20,799 --> 00:19:24,080
the first one is you know you need a

00:19:22,799 --> 00:19:26,000
requisition of pv

00:19:24,080 --> 00:19:27,520
persistent volume container and you're

00:19:26,000 --> 00:19:28,559
going to download your data and i was

00:19:27,520 --> 00:19:31,840
storing my data

00:19:28,559 --> 00:19:33,120
in um the dicoms in just an s3 bucket

00:19:31,840 --> 00:19:36,880
but

00:19:33,120 --> 00:19:37,679
if you have your own dicoms and you can

00:19:36,880 --> 00:19:39,039
just build your own

00:19:37,679 --> 00:19:40,720
you just put them in your own s3 bucket

00:19:39,039 --> 00:19:43,200
and you can rename to that

00:19:40,720 --> 00:19:45,520
and i think i even made it as a passable

00:19:43,200 --> 00:19:48,720
parameter to which s3 bucket he wanted

00:19:45,520 --> 00:19:51,760
so that's the um

00:19:48,720 --> 00:19:54,880
now to convert the dicom so

00:19:51,760 --> 00:19:56,320
this um this is a docker container this

00:19:54,880 --> 00:19:58,400
is a docker container that downloads the

00:19:56,320 --> 00:20:01,600
dicoms into the pvc

00:19:58,400 --> 00:20:04,880
this pvc gets mounted as a volume

00:20:01,600 --> 00:20:08,000
on each of these docker containers um

00:20:04,880 --> 00:20:09,600
the first one actually no just on these

00:20:08,000 --> 00:20:13,440
two docker containers

00:20:09,600 --> 00:20:15,280
um so we download all of the dicoms into

00:20:13,440 --> 00:20:18,480
this persistent volume container

00:20:15,280 --> 00:20:20,480
now this

00:20:18,480 --> 00:20:21,679
one this docker container and it's been

00:20:20,480 --> 00:20:22,400
a minute since i've looked at but as i

00:20:21,679 --> 00:20:25,600
recall

00:20:22,400 --> 00:20:26,480
takes maybe a specific image like dicom

00:20:25,600 --> 00:20:28,720
file

00:20:26,480 --> 00:20:30,400
but a dicom file really is like a folder

00:20:28,720 --> 00:20:32,400
and it's an array of images

00:20:30,400 --> 00:20:34,320
and each image you can convert to a

00:20:32,400 --> 00:20:34,720
vector and again we're using pi dicom

00:20:34,320 --> 00:20:36,000
here

00:20:34,720 --> 00:20:38,480
and that's why you use the python

00:20:36,000 --> 00:20:40,799
because there's already a library

00:20:38,480 --> 00:20:42,799
great don't have to reinvent the wheel

00:20:40,799 --> 00:20:46,080
figuring how to parse out dicom files

00:20:42,799 --> 00:20:47,679
by diacon load it up um you can extract

00:20:46,080 --> 00:20:49,200
the data and there's some metadata too

00:20:47,679 --> 00:20:51,360
that you can save

00:20:49,200 --> 00:20:52,880
but it basically just stretches these um

00:20:51,360 --> 00:20:54,080
an image can be stretched out into a

00:20:52,880 --> 00:20:56,559
vector

00:20:54,080 --> 00:20:57,840
and then since a dicom is really like

00:20:56,559 --> 00:21:00,559
it's a 3d image

00:20:57,840 --> 00:21:02,000
so it's you know you can imagine any 3d

00:21:00,559 --> 00:21:04,640
image as a stack of

00:21:02,000 --> 00:21:05,200
other images um and that's and that's

00:21:04,640 --> 00:21:08,720
really all

00:21:05,200 --> 00:21:10,480
a cat scan is then so each

00:21:08,720 --> 00:21:12,159
image two dimensional images flattened

00:21:10,480 --> 00:21:13,120
to a one-dimensional vector

00:21:12,159 --> 00:21:14,880
and then you have a stack of

00:21:13,120 --> 00:21:16,559
one-dimensional vectors which gives you

00:21:14,880 --> 00:21:20,080
a two dimensional matrix

00:21:16,559 --> 00:21:21,520
perfect um i think there's some

00:21:20,080 --> 00:21:24,159
parameters for the dicom size and the

00:21:21,520 --> 00:21:26,159
metadata too um

00:21:24,159 --> 00:21:27,360
but again these are things that you can

00:21:26,159 --> 00:21:28,960
pass and

00:21:27,360 --> 00:21:30,559
kubeflow allows you to pass these like

00:21:28,960 --> 00:21:33,679
metadata parameters

00:21:30,559 --> 00:21:35,280
um which you might use for like

00:21:33,679 --> 00:21:36,960
whatever machine learning algorithm but

00:21:35,280 --> 00:21:37,600
you can also set them as like parameters

00:21:36,960 --> 00:21:40,799
for like

00:21:37,600 --> 00:21:40,799
pre-processing your data

00:21:40,880 --> 00:21:44,640
now since it's a mahou track i think the

00:21:43,200 --> 00:21:47,679
only code i'm going to show

00:21:44,640 --> 00:21:51,120
but this is how hard it is to do a

00:21:47,679 --> 00:21:52,960
um district distributed stochastic

00:21:51,120 --> 00:21:57,120
singular value decomposition

00:21:52,960 --> 00:21:59,280
which is a function shifts with um

00:21:57,120 --> 00:22:00,400
the path to matrix is a file that gets

00:21:59,280 --> 00:22:03,679
passed in

00:22:00,400 --> 00:22:04,880
um though i believe it's just hard-coded

00:22:03,679 --> 00:22:07,840
here like it's just default

00:22:04,880 --> 00:22:08,720
like s.text default s.text or something

00:22:07,840 --> 00:22:11,919
like that

00:22:08,720 --> 00:22:12,640
at any rate it splits that matrix up we

00:22:11,919 --> 00:22:14,720
got it we

00:22:12,640 --> 00:22:16,480
now have it we have a a distributed row

00:22:14,720 --> 00:22:20,559
matrix of the voxels

00:22:16,480 --> 00:22:21,360
is uh it's industry jargon in the dicoms

00:22:20,559 --> 00:22:24,400
but a voxel

00:22:21,360 --> 00:22:26,320
is what this matrix is

00:22:24,400 --> 00:22:28,159
um these are hyper parameters which

00:22:26,320 --> 00:22:31,200
again can be set in tuned

00:22:28,159 --> 00:22:32,640
there's um good paper uh halco

00:22:31,200 --> 00:22:34,720
wrote the paper that was the basis for

00:22:32,640 --> 00:22:38,000
this distributed stochastic

00:22:34,720 --> 00:22:39,200
um the distribution singular value

00:22:38,000 --> 00:22:41,360
decomposition

00:22:39,200 --> 00:22:42,559
um the rank it's kind of a little bit

00:22:41,360 --> 00:22:44,080
mathy to get into right now

00:22:42,559 --> 00:22:46,000
but suffice to say there are some hyper

00:22:44,080 --> 00:22:49,600
parameters and then

00:22:46,000 --> 00:22:51,360
it spits out two um

00:22:49,600 --> 00:22:52,720
the left and the right side of the

00:22:51,360 --> 00:22:56,080
decomposed matrix

00:22:52,720 --> 00:22:58,080
and then the eigenvalues down the center

00:22:56,080 --> 00:22:59,919
and so in essence to put this back

00:22:58,080 --> 00:23:04,240
together into

00:22:59,919 --> 00:23:07,440
an output dicom um this algorithm also

00:23:04,240 --> 00:23:11,360
arranges the vectors

00:23:07,440 --> 00:23:13,120
um into or into degree in like order of

00:23:11,360 --> 00:23:15,600
decreasing importance

00:23:13,120 --> 00:23:16,640
so you can just say okay cool like i

00:23:15,600 --> 00:23:20,159
think i set this

00:23:16,640 --> 00:23:23,039
to maybe 300 um

00:23:20,159 --> 00:23:25,679
you know basis vectors and so you just

00:23:23,039 --> 00:23:27,919
maybe take you know the first 290

00:23:25,679 --> 00:23:29,280
and that actually since it's three let's

00:23:27,919 --> 00:23:30,799
say there's a hundred of them

00:23:29,280 --> 00:23:32,880
if there's a hundred you take the first

00:23:30,799 --> 00:23:36,559
90 that means you denoise

00:23:32,880 --> 00:23:38,799
10 it's again kind of sloppy but

00:23:36,559 --> 00:23:39,679
that's the gist of what it is and so the

00:23:38,799 --> 00:23:41,840
idea is

00:23:39,679 --> 00:23:43,440
those least important vectors are really

00:23:41,840 --> 00:23:44,880
probably just the white noise

00:23:43,440 --> 00:23:46,880
because originally and i forgot to put

00:23:44,880 --> 00:23:49,279
this up at the top but i talk about it

00:23:46,880 --> 00:23:52,559
more in the journal article

00:23:49,279 --> 00:23:54,799
you have a clean image plus noise

00:23:52,559 --> 00:23:56,320
so the image you see is the result of a

00:23:54,799 --> 00:23:57,760
clean image plus some noise

00:23:56,320 --> 00:23:59,760
and you're trying to solve for the clean

00:23:57,760 --> 00:24:02,880
image so those last

00:23:59,760 --> 00:24:06,240
basis vectors are really just the noise

00:24:02,880 --> 00:24:08,159
uh or so we hope and so you want to be

00:24:06,240 --> 00:24:11,520
able to turn off those vectors

00:24:08,159 --> 00:24:15,039
until you get a more sharp image um

00:24:11,520 --> 00:24:18,320
and it might be um well we'll show this

00:24:15,039 --> 00:24:18,880
so i put them back together i made a i

00:24:18,320 --> 00:24:22,640
just made

00:24:18,880 --> 00:24:24,240
images like a jpegs to spit out however

00:24:22,640 --> 00:24:25,679
and you can easily change this for your

00:24:24,240 --> 00:24:28,720
use you can

00:24:25,679 --> 00:24:30,840
output a clean icon file or you can now

00:24:28,720 --> 00:24:32,080
put a bunch of jpegs like one for each

00:24:30,840 --> 00:24:33,840
level um

00:24:32,080 --> 00:24:35,440
or you can just use as a pre-processing

00:24:33,840 --> 00:24:36,240
step to do further analysis whatever you

00:24:35,440 --> 00:24:38,480
want to do

00:24:36,240 --> 00:24:40,080
again one of the beauties of kubeflow is

00:24:38,480 --> 00:24:43,679
this optionality

00:24:40,080 --> 00:24:44,640
um so again this is just one of the

00:24:43,679 --> 00:24:46,640
slices

00:24:44,640 --> 00:24:48,960
i think this was five percent denoised

00:24:46,640 --> 00:24:50,720
but you can see a lot more things like

00:24:48,960 --> 00:24:51,760
kind of popping up like here there and

00:24:50,720 --> 00:24:56,080
everywhere

00:24:51,760 --> 00:24:59,279
um for and it's again the exact same

00:24:56,080 --> 00:25:00,000
original i believe that this is the

00:24:59,279 --> 00:25:03,200
ground glass

00:25:00,000 --> 00:25:06,240
occlusions that um are the telltales

00:25:03,200 --> 00:25:09,600
of uh kovid this

00:25:06,240 --> 00:25:11,360
was one of the coveted patients um

00:25:09,600 --> 00:25:12,880
but again i just took this like slice

00:25:11,360 --> 00:25:15,279
out you are

00:25:12,880 --> 00:25:16,880
you can put together a full dicom file

00:25:15,279 --> 00:25:21,200
or whatever you need to do

00:25:16,880 --> 00:25:23,200
for your output um so

00:25:21,200 --> 00:25:25,120
shameless plus how am i doing on time i

00:25:23,200 --> 00:25:28,720
think 115 i started

00:25:25,120 --> 00:25:29,440
maybe one third okay yeah i got to be

00:25:28,720 --> 00:25:32,400
about right

00:25:29,440 --> 00:25:34,240
any right 45 pre-sale on amazon ask for

00:25:32,400 --> 00:25:35,279
it for christmas ask for hanukkah ask

00:25:34,240 --> 00:25:36,799
for your birthday

00:25:35,279 --> 00:25:38,240
give it to your friends and enemies for

00:25:36,799 --> 00:25:38,960
their birthday hanukkah and christmas

00:25:38,240 --> 00:25:41,600
too

00:25:38,960 --> 00:25:42,559
donate copies to charity uh nickels per

00:25:41,600 --> 00:25:45,200
copy sold i

00:25:42,559 --> 00:25:46,960
need beer money so please buy my book if

00:25:45,200 --> 00:25:48,960
you really want to i might be able to

00:25:46,960 --> 00:25:51,760
even i might even be able to get you a

00:25:48,960 --> 00:25:54,000
code to get a bit of a discount on it um

00:25:51,760 --> 00:25:56,960
and thus cutting even further into my

00:25:54,000 --> 00:25:58,320
ever so narrow profit margin because

00:25:56,960 --> 00:25:59,840
they already don't pay very much to

00:25:58,320 --> 00:26:01,200
write books and we're splitting this

00:25:59,840 --> 00:26:04,320
five ways so let me tell you

00:26:01,200 --> 00:26:06,240
it's margins is thin out there but

00:26:04,320 --> 00:26:08,159
if you uh enjoy it then it's worth it to

00:26:06,240 --> 00:26:10,159
me also

00:26:08,159 --> 00:26:12,400
uh this was published i think just i

00:26:10,159 --> 00:26:16,320
think in the last couple weeks finally

00:26:12,400 --> 00:26:17,919
um this so chapter nine in the book

00:26:16,320 --> 00:26:19,840
will give you a very in-depth it's like

00:26:17,919 --> 00:26:21,679
a how-to technical of how to set up the

00:26:19,840 --> 00:26:25,039
kubeflow pipeline

00:26:21,679 --> 00:26:26,080
the article goes into the math why this

00:26:25,039 --> 00:26:29,360
is a good idea

00:26:26,080 --> 00:26:30,720
you know like that like why

00:26:29,360 --> 00:26:33,600
like more background on low-dose

00:26:30,720 --> 00:26:35,600
radiation um ct scans

00:26:33,600 --> 00:26:37,200
what we're trying to accomplish here and

00:26:35,600 --> 00:26:37,600
sort of just gives a nod of the hat that

00:26:37,200 --> 00:26:39,440
like

00:26:37,600 --> 00:26:41,200
yeah here's this here's the method we

00:26:39,440 --> 00:26:42,240
use and here's how we did it and here's

00:26:41,200 --> 00:26:44,320
our results

00:26:42,240 --> 00:26:45,679
um so more people download that and i

00:26:44,320 --> 00:26:49,200
guess i get prestige

00:26:45,679 --> 00:26:51,120
so check that out too um

00:26:49,200 --> 00:26:52,640
my first journal article is a big day

00:26:51,120 --> 00:26:55,039
all right so with that we'll go to

00:26:52,640 --> 00:26:56,799
uh the conclusions are i don't know use

00:26:55,039 --> 00:26:58,080
kubeflow and mahoot um

00:26:56,799 --> 00:27:00,960
stick around for the rest of all the

00:26:58,080 --> 00:27:05,440
talks we really enjoy seeing you here

00:27:00,960 --> 00:27:09,200
and with that i will go to questions

00:27:05,440 --> 00:27:13,840
see i want to turn that off nope yeah

00:27:09,200 --> 00:27:13,840
nope wow all right yeah questions

00:27:16,480 --> 00:27:23,360
nothing in the main let's check slack

00:27:20,399 --> 00:27:23,360
open in slack

00:27:26,159 --> 00:27:34,240
oh man i nailed it on time good for me

00:27:29,200 --> 00:27:37,440
um so

00:27:34,240 --> 00:27:39,440
if there are no questions

00:27:37,440 --> 00:27:40,799
i'll keep on for another minute but um

00:27:39,440 --> 00:27:45,120
everybody make sure to go see

00:27:40,799 --> 00:27:45,120
andrew musselman on um

00:27:46,840 --> 00:27:52,000
um

00:27:48,240 --> 00:27:52,000
in a different slack um

00:27:52,559 --> 00:27:56,000
andrew palumbo asked about openmp i

00:27:54,399 --> 00:27:57,760
don't know man if you want openmp write

00:27:56,000 --> 00:27:59,919
the back end

00:27:57,760 --> 00:28:01,279
um all these videos i'm hoping will be

00:27:59,919 --> 00:28:02,960
on the website

00:28:01,279 --> 00:28:04,480
we are i don't know if we have

00:28:02,960 --> 00:28:05,440
officially announced but we will very

00:28:04,480 --> 00:28:09,120
quickly

00:28:05,440 --> 00:28:09,919
that um we've got a release that's been

00:28:09,120 --> 00:28:11,039
voted on

00:28:09,919 --> 00:28:12,880
i know it's been a long time that's

00:28:11,039 --> 00:28:14,840
another upcoming talk so i don't want to

00:28:12,880 --> 00:28:17,760
spoil too much there

00:28:14,840 --> 00:28:19,120
so thanks everyone for coming i really

00:28:17,760 --> 00:28:20,559
do appreciate it especially with my

00:28:19,120 --> 00:28:21,520
horrible horrible abstract that said

00:28:20,559 --> 00:28:23,760
absolutely nothing

00:28:21,520 --> 00:28:24,640
and looked like it was a joke talk so i

00:28:23,760 --> 00:28:26,480
do appreciate

00:28:24,640 --> 00:28:28,240
everyone coming out feel free to reach

00:28:26,480 --> 00:28:29,120
out on again the mahout slacks or the

00:28:28,240 --> 00:28:30,399
mailing list

00:28:29,120 --> 00:28:32,240
stick around for the rest of the talks

00:28:30,399 --> 00:28:34,640
we really appreciate you being here

00:28:32,240 --> 00:28:35,520
and i will see you all over at the next

00:28:34,640 --> 00:28:38,880
session

00:28:35,520 --> 00:28:42,000
which was um

00:28:38,880 --> 00:28:45,120
the next session is uh andrew

00:28:42,000 --> 00:28:45,760
uselman and uh he'll be talking about

00:28:45,120 --> 00:28:48,480
running

00:28:45,760 --> 00:28:49,840
mahout on zeppelin which we've had out

00:28:48,480 --> 00:28:51,200
for a while we now have a cool new

00:28:49,840 --> 00:28:53,520
docker container which

00:28:51,200 --> 00:28:54,320
makes it a lot smoother so thanks again

00:28:53,520 --> 00:28:59,840
and

00:28:54,320 --> 00:28:59,840
we'll see you at the next one

00:29:10,840 --> 00:29:15,360
um

00:29:13,279 --> 00:29:15,360

YouTube URL: https://www.youtube.com/watch?v=K5pSsGosEh0


