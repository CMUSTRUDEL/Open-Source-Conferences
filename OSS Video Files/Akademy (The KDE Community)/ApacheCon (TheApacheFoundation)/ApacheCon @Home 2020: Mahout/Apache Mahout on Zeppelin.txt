Title: Apache Mahout on Zeppelin
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Mahout
Description: 
	Apache Mahout on Zeppelin
Andrew Musselman

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

This talk will demonstrate adding a Mahout interpreter to the Zeppelin notebook system. Zeppelin is an extensible notebook project which allows users to add interpreters which will understand and run a wide variety of code, ranging from Python, to Spark-flavored Scala, to SQL dialects, to other domain-specific languages (DSLs). In our case we will add an interpreter which understands the Mahout DSL called Samsara, which focuses on matrix math at scale. The activities in this tutorial will span: (1) Getting the latest software releases (2) Setting environment variables (3) Creating and configuring the Samsara interpreter (4) Starting a notebook and importing a data set (5) Doing some data manipulation and calculation (6) Producing some plots and charts (7) Showing some ways to publish dashboards and individual cells The audience should be prepared with an operating system which has a recent version of Java (greater than jdk 1.8), and an installation script will be provided for people who would like to set a computer up in advance to follow along. This talk is for anyone with an interest in data science and analytics. Blog post with similar previous work/style: https://mahout.apache.org/docs/latest/tutorials/misc/mahout-in-zeppelin

Andrew Musselman runs business and data operations in North America for 24i, chairs the Apache Mahout Project, and hosts the Adversarial Learning podcast. He loves distributed matrix math and lives in Seattle with his wife and kids.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,080 --> 00:00:27,760
started

00:00:25,439 --> 00:00:29,439
uh thanks everybody for showing up i am

00:00:27,760 --> 00:00:30,480
very pleased to be here i know

00:00:29,439 --> 00:00:32,000
it's been easier to get to this

00:00:30,480 --> 00:00:33,360
conference than other ones but it's nice

00:00:32,000 --> 00:00:33,840
to be able to see everybody today as

00:00:33,360 --> 00:00:37,680
well

00:00:33,840 --> 00:00:41,120
um special thanks to planners and rich

00:00:37,680 --> 00:00:42,719
on the planners team and to trevor for

00:00:41,120 --> 00:00:44,239
trevor grant for organizing the mood

00:00:42,719 --> 00:00:46,239
track

00:00:44,239 --> 00:00:47,920
my session today is about running apache

00:00:46,239 --> 00:00:50,640
mahou on zeppelin

00:00:47,920 --> 00:00:51,520
uh give me a heads up if uh sound is

00:00:50,640 --> 00:00:53,360
weird or anything

00:00:51,520 --> 00:00:54,960
uh you know feel free to unmute yourself

00:00:53,360 --> 00:00:57,360
and give me a holler because i will be

00:00:54,960 --> 00:00:59,280
looking at the slide instead of this

00:00:57,360 --> 00:01:00,879
uh so we'll be talking about apache

00:00:59,280 --> 00:01:02,160
mahoud on zeppelin which is a project

00:01:00,879 --> 00:01:04,879
that we've actually been

00:01:02,160 --> 00:01:05,519
um working on as a project for for quite

00:01:04,879 --> 00:01:09,119
some time

00:01:05,519 --> 00:01:11,200
um my role on mahout is

00:01:09,119 --> 00:01:12,159
i've been on the pmc for for several

00:01:11,200 --> 00:01:15,360
years and

00:01:12,159 --> 00:01:18,159
have been chair for two years um

00:01:15,360 --> 00:01:20,000
and so i've seen uh a lot of different

00:01:18,159 --> 00:01:23,040
changes uh over the years

00:01:20,000 --> 00:01:25,119
in hoots uh it's actually changed from

00:01:23,040 --> 00:01:26,080
um and all you know all in one

00:01:25,119 --> 00:01:29,119
encompassing

00:01:26,080 --> 00:01:32,320
um recommender system clustering system

00:01:29,119 --> 00:01:32,880
classification system uh plus uh web

00:01:32,320 --> 00:01:35,680
serving

00:01:32,880 --> 00:01:36,159
tool um to something we've actually

00:01:35,680 --> 00:01:38,880
paired

00:01:36,159 --> 00:01:39,439
paired way down um in recent years so

00:01:38,880 --> 00:01:42,240
that

00:01:39,439 --> 00:01:42,640
it serves the purpose of being able to

00:01:42,240 --> 00:01:45,840
be

00:01:42,640 --> 00:01:49,200
a simpler uh system to

00:01:45,840 --> 00:01:49,520
do matrix math on so in a nutshell that

00:01:49,200 --> 00:01:53,119
is

00:01:49,520 --> 00:01:54,960
that is where i'm coming from here um so

00:01:53,119 --> 00:01:56,560
why would you choose mahout to do your

00:01:54,960 --> 00:01:58,240
matrix math uh

00:01:56,560 --> 00:01:59,920
assuming you're doing matrix math for

00:01:58,240 --> 00:02:02,880
linear algebra

00:01:59,920 --> 00:02:03,439
uh the rationale for using mahoud at

00:02:02,880 --> 00:02:06,960
this point

00:02:03,439 --> 00:02:07,280
is to be able to have a simpler syntax

00:02:06,960 --> 00:02:10,399
for

00:02:07,280 --> 00:02:13,599
experimentation for building algorithms

00:02:10,399 --> 00:02:14,480
and building models without having to

00:02:13,599 --> 00:02:18,000
learn

00:02:14,480 --> 00:02:21,200
a a specific library's quirks and

00:02:18,000 --> 00:02:22,560
which api calls to make i'll show some

00:02:21,200 --> 00:02:25,360
of the simpler

00:02:22,560 --> 00:02:26,239
uh syntax uh later when we get into a

00:02:25,360 --> 00:02:28,400
notebook

00:02:26,239 --> 00:02:29,520
uh but i will share these slides uh in

00:02:28,400 --> 00:02:33,200
the right location and

00:02:29,520 --> 00:02:35,280
uh this is uh the reference that uh

00:02:33,200 --> 00:02:36,800
summarizes all of this this this work

00:02:35,280 --> 00:02:39,840
that has been added to

00:02:36,800 --> 00:02:40,640
the past few years uh it really uh is

00:02:39,840 --> 00:02:42,879
focused on

00:02:40,640 --> 00:02:44,319
people who come from a math background

00:02:42,879 --> 00:02:46,640
or our background

00:02:44,319 --> 00:02:49,360
uh or a matlab background and who are

00:02:46,640 --> 00:02:52,319
accustomed to being able to express

00:02:49,360 --> 00:02:53,519
vectors matrices and arithmetic with

00:02:52,319 --> 00:02:57,519
them

00:02:53,519 --> 00:03:00,640
using simpler syntax and then

00:02:57,519 --> 00:03:02,480
beneath that supporting that is the

00:03:00,640 --> 00:03:05,599
capability of being able to

00:03:02,480 --> 00:03:08,640
run large distributed math on

00:03:05,599 --> 00:03:11,760
multiple different compute platforms

00:03:08,640 --> 00:03:12,959
not just compute engines like spark or

00:03:11,760 --> 00:03:16,239
flink which

00:03:12,959 --> 00:03:16,959
have been built as a plugable framework

00:03:16,239 --> 00:03:19,120
where

00:03:16,959 --> 00:03:21,040
you can choose to do spark if you're

00:03:19,120 --> 00:03:22,720
doing a certain kind of calculation or

00:03:21,040 --> 00:03:24,959
if you want to use flink to do some

00:03:22,720 --> 00:03:27,200
streaming calculations you can

00:03:24,959 --> 00:03:29,440
very often use the same code that you

00:03:27,200 --> 00:03:32,560
wrote for spark

00:03:29,440 --> 00:03:34,000
with the flink engine um usually the the

00:03:32,560 --> 00:03:35,680
things that are different will be a

00:03:34,000 --> 00:03:36,159
different set of imports at the top but

00:03:35,680 --> 00:03:40,080
the

00:03:36,159 --> 00:03:40,480
code will often be um almost 100 percent

00:03:40,080 --> 00:03:44,400
uh

00:03:40,480 --> 00:03:46,640
reusable and then as well as the

00:03:44,400 --> 00:03:48,239
compute engine or framework that does

00:03:46,640 --> 00:03:51,440
the computation

00:03:48,239 --> 00:03:53,680
who take took a lot of uh effort to be

00:03:51,440 --> 00:03:55,120
able to pull the mathematics out of the

00:03:53,680 --> 00:03:57,760
jvm

00:03:55,120 --> 00:03:59,200
then do them directly on the cpu

00:03:57,760 --> 00:04:00,159
additionally to be able to take

00:03:59,200 --> 00:04:03,680
advantage of

00:04:00,159 --> 00:04:05,920
multi-core cpus and be able to uh

00:04:03,680 --> 00:04:06,799
take take whatever calculation is being

00:04:05,920 --> 00:04:09,360
done and

00:04:06,799 --> 00:04:10,480
parcel it out to different uh to the

00:04:09,360 --> 00:04:12,239
different cores

00:04:10,480 --> 00:04:14,159
so that you get parallels that

00:04:12,239 --> 00:04:14,560
parallelism out of the of the box with

00:04:14,159 --> 00:04:18,000
uh

00:04:14,560 --> 00:04:19,040
with doing that and also uh capable

00:04:18,000 --> 00:04:21,680
capable of running

00:04:19,040 --> 00:04:22,639
directly on nvidia gpus we have a couple

00:04:21,680 --> 00:04:24,320
of different uh

00:04:22,639 --> 00:04:26,400
translation layers that make that make

00:04:24,320 --> 00:04:29,759
that possible um

00:04:26,400 --> 00:04:30,400
but the uh the the approach to doing

00:04:29,759 --> 00:04:32,880
that is

00:04:30,400 --> 00:04:34,320
basically transparent to the user uh you

00:04:32,880 --> 00:04:36,880
write the code once

00:04:34,320 --> 00:04:37,680
uh you can tell the code to run on the

00:04:36,880 --> 00:04:41,600
jvm

00:04:37,680 --> 00:04:44,560
on the cpu on multi-core cpu or gpu

00:04:41,600 --> 00:04:46,400
and it will handle it so in that sense

00:04:44,560 --> 00:04:48,400
moving from prototype to production can

00:04:46,400 --> 00:04:49,600
be a lot easier than with other systems

00:04:48,400 --> 00:04:51,759
where

00:04:49,600 --> 00:04:52,639
either uh some other you know other

00:04:51,759 --> 00:04:55,360
infrastructure

00:04:52,639 --> 00:04:56,240
changes need to be made and or code

00:04:55,360 --> 00:04:59,199
needs to be

00:04:56,240 --> 00:04:59,759
translated from something like our or

00:04:59,199 --> 00:05:02,320
sas

00:04:59,759 --> 00:05:04,000
into something that is built for uh

00:05:02,320 --> 00:05:07,199
built for distributed work

00:05:04,000 --> 00:05:08,960
so it is um it is a very niche product

00:05:07,199 --> 00:05:11,280
it's um you know the project is very

00:05:08,960 --> 00:05:13,680
small but uh but we have we have some

00:05:11,280 --> 00:05:15,600
devoted followers and uh and we all we

00:05:13,680 --> 00:05:17,520
all enjoy working on it so

00:05:15,600 --> 00:05:18,800
um so why would you use mahout in a

00:05:17,520 --> 00:05:21,440
notebook

00:05:18,800 --> 00:05:22,880
uh is a question that comes up and i

00:05:21,440 --> 00:05:26,240
will go on record as being

00:05:22,880 --> 00:05:29,680
early uh to the notebook hating game i

00:05:26,240 --> 00:05:32,400
posted this in reply to my friend and co

00:05:29,680 --> 00:05:33,360
podcast co-host joel he was getting

00:05:32,400 --> 00:05:35,759
started

00:05:33,360 --> 00:05:36,560
trying to get i think jupiter notebook

00:05:35,759 --> 00:05:38,479
working

00:05:36,560 --> 00:05:39,919
and he was complaining in public and so

00:05:38,479 --> 00:05:42,240
i took the advantage to

00:05:39,919 --> 00:05:44,720
the opportunity to let him know that i

00:05:42,240 --> 00:05:45,520
was skeptical about notebooks being a

00:05:44,720 --> 00:05:48,720
necessary

00:05:45,520 --> 00:05:51,360
uh a necessary tool uh

00:05:48,720 --> 00:05:53,360
and i am very proud to say you know i

00:05:51,360 --> 00:05:54,720
may have planted the seed because if you

00:05:53,360 --> 00:05:57,360
look at the time stamps here

00:05:54,720 --> 00:05:58,800
he he built a small cottage industry

00:05:57,360 --> 00:06:00,160
around uh being the i don't like

00:05:58,800 --> 00:06:02,800
notebooks guy

00:06:00,160 --> 00:06:03,680
uh and so um i think he gave this talk

00:06:02,800 --> 00:06:06,800
one time but

00:06:03,680 --> 00:06:09,919
it's it's become a repertoire for

00:06:06,800 --> 00:06:12,080
uh what people uh know him by so

00:06:09,919 --> 00:06:13,120
uh but that's tongue-in-cheek of course

00:06:12,080 --> 00:06:16,560
because um

00:06:13,120 --> 00:06:19,600
i you know i cut in in undergrad

00:06:16,560 --> 00:06:22,880
uh i was introduced to mathematica

00:06:19,600 --> 00:06:25,680
i know people who grew up in matlab and

00:06:22,880 --> 00:06:26,400
you can't deny that being able to uh to

00:06:25,680 --> 00:06:29,199
do your work

00:06:26,400 --> 00:06:30,720
in a convenient place that organizes it

00:06:29,199 --> 00:06:32,319
into cells has an interactive

00:06:30,720 --> 00:06:34,000
environment

00:06:32,319 --> 00:06:36,080
and lets you share notebooks between

00:06:34,000 --> 00:06:37,360
team members and then

00:06:36,080 --> 00:06:39,199
is actually something that you can just

00:06:37,360 --> 00:06:39,759
hop on in a web browser or something

00:06:39,199 --> 00:06:42,720
like that

00:06:39,759 --> 00:06:43,919
is uh is a is there those are a lot of

00:06:42,720 --> 00:06:46,800
advantages

00:06:43,919 --> 00:06:48,800
and you know we we see this in in the

00:06:46,800 --> 00:06:50,000
market with tons of notebook systems

00:06:48,800 --> 00:06:53,039
google has collab

00:06:50,000 --> 00:06:55,599
and there are you know this jupiter um i

00:06:53,039 --> 00:06:56,720
i know the spark people have uh have

00:06:55,599 --> 00:06:59,120
notebooks so

00:06:56,720 --> 00:07:00,639
it's something that in order to in order

00:06:59,120 --> 00:07:01,680
to to appeal to people who want to work

00:07:00,639 --> 00:07:04,400
that way

00:07:01,680 --> 00:07:04,880
we actually spend a lot of effort to to

00:07:04,400 --> 00:07:07,759
make it

00:07:04,880 --> 00:07:08,639
easy to get mahou running in a notebook

00:07:07,759 --> 00:07:11,759
i will say

00:07:08,639 --> 00:07:13,360
one caveat to saying it's less

00:07:11,759 --> 00:07:15,440
intimidating

00:07:13,360 --> 00:07:17,759
if the installation is done for you it

00:07:15,440 --> 00:07:18,240
it is a lot less intimidating but if you

00:07:17,759 --> 00:07:20,720
really

00:07:18,240 --> 00:07:22,720
if you really wanted to set up a a

00:07:20,720 --> 00:07:23,520
shared notebook system for a team and

00:07:22,720 --> 00:07:25,919
have that be

00:07:23,520 --> 00:07:27,120
um something that's maintained it's not

00:07:25,919 --> 00:07:30,080
it's not it's not

00:07:27,120 --> 00:07:30,800
well zero amount of work so i think that

00:07:30,080 --> 00:07:33,199
what you'll see

00:07:30,800 --> 00:07:34,880
is that there are some some pros and

00:07:33,199 --> 00:07:36,240
cons and there are some

00:07:34,880 --> 00:07:38,479
some of the advantages to using

00:07:36,240 --> 00:07:40,000
notebooks are that you can spin them up

00:07:38,479 --> 00:07:41,680
in a docker container for instance which

00:07:40,000 --> 00:07:43,440
we're going to show you how to do

00:07:41,680 --> 00:07:45,759
uh next question is why would you choose

00:07:43,440 --> 00:07:47,919
zeppelin as your notebooking system

00:07:45,759 --> 00:07:48,960
and what zeppelin has over other

00:07:47,919 --> 00:07:52,400
competitors is

00:07:48,960 --> 00:07:54,800
it uh is polyglot so they actually have

00:07:52,400 --> 00:07:56,240
more than a dozen interpreters that uh

00:07:54,800 --> 00:07:59,440
work out of the box

00:07:56,240 --> 00:08:02,960
uh it's extensible so that you can uh

00:07:59,440 --> 00:08:04,800
include your own uh your own interpreter

00:08:02,960 --> 00:08:07,599
uh if you want we could just look at the

00:08:04,800 --> 00:08:09,840
um supported interpreters here

00:08:07,599 --> 00:08:10,960
it's actually quite a few you know uh

00:08:09,840 --> 00:08:14,160
you get a ton

00:08:10,960 --> 00:08:16,240
with jdbc for free so any

00:08:14,160 --> 00:08:17,440
number of databases that i think anybody

00:08:16,240 --> 00:08:19,919
would be using these days

00:08:17,440 --> 00:08:21,680
is supported uh pig if you're still

00:08:19,919 --> 00:08:24,319
using that or maintaining it from

00:08:21,680 --> 00:08:24,960
from people 10 years ago on down to you

00:08:24,319 --> 00:08:27,199
know

00:08:24,960 --> 00:08:28,160
proprietary things like bigquery uh

00:08:27,199 --> 00:08:30,000
python

00:08:28,160 --> 00:08:31,440
lots and lots of uh things that people

00:08:30,000 --> 00:08:34,399
are using elastic

00:08:31,440 --> 00:08:34,640
et cetera so um it's very well supported

00:08:34,399 --> 00:08:36,479
and

00:08:34,640 --> 00:08:38,240
it actually is extensible which is which

00:08:36,479 --> 00:08:41,599
is very nice um

00:08:38,240 --> 00:08:42,000
and so my whole dsl samsara fits in very

00:08:41,599 --> 00:08:45,440
well

00:08:42,000 --> 00:08:48,320
because it is a it is a very uh

00:08:45,440 --> 00:08:48,880
self-contained small subsection of a

00:08:48,320 --> 00:08:50,800
language

00:08:48,880 --> 00:08:53,440
and so it's it's very much in the in the

00:08:50,800 --> 00:08:56,480
range of something like sql

00:08:53,440 --> 00:08:59,360
um so there are a few different ways to

00:08:56,480 --> 00:09:00,320
set mahout up in zeppelin i'm calling

00:08:59,360 --> 00:09:03,839
this the hard way

00:09:00,320 --> 00:09:07,120
um and actually this was the way that uh

00:09:03,839 --> 00:09:08,080
i think i think trevor was doing a few

00:09:07,120 --> 00:09:10,959
years ago

00:09:08,080 --> 00:09:11,680
uh he actually has a very uh useful post

00:09:10,959 --> 00:09:14,240
about this

00:09:11,680 --> 00:09:15,440
uh again when you get the slides you can

00:09:14,240 --> 00:09:18,160
follow this link

00:09:15,440 --> 00:09:19,360
or you can just browse the the website

00:09:18,160 --> 00:09:20,800
website

00:09:19,360 --> 00:09:22,880
as you can see there are quite a few

00:09:20,800 --> 00:09:23,519
steps here you will download and install

00:09:22,880 --> 00:09:26,160
zeppelin

00:09:23,519 --> 00:09:26,880
you will build mahou from scratch you

00:09:26,160 --> 00:09:29,760
will

00:09:26,880 --> 00:09:31,680
build zeppelin from scratch um you will

00:09:29,760 --> 00:09:34,399
then make sure zeppelin's running

00:09:31,680 --> 00:09:36,640
uh you will dig in add an interpreter

00:09:34,399 --> 00:09:38,640
you will then get to an interpreter's

00:09:36,640 --> 00:09:41,440
page where you need to

00:09:38,640 --> 00:09:43,040
tell zeppelin uh what kinds of things it

00:09:41,440 --> 00:09:45,200
needs to know about

00:09:43,040 --> 00:09:46,720
how to write things to disk or you know

00:09:45,200 --> 00:09:48,240
how to do

00:09:46,720 --> 00:09:50,240
other things then you'll add

00:09:48,240 --> 00:09:51,680
dependencies so a bunch of jars which

00:09:50,240 --> 00:09:54,880
which are required to run

00:09:51,680 --> 00:09:56,000
mahout um and so you know it's not it's

00:09:54,880 --> 00:09:59,600
not a ton of work

00:09:56,000 --> 00:10:01,519
um i have done it um and but again i've

00:09:59,600 --> 00:10:03,440
also set up interpreters in zeppelin

00:10:01,519 --> 00:10:05,200
before with other tools

00:10:03,440 --> 00:10:07,440
there are a lot of gotchas uh you know

00:10:05,200 --> 00:10:08,720
if documentation gets out of date

00:10:07,440 --> 00:10:11,600
you're kind of out of luck you need to

00:10:08,720 --> 00:10:13,920
go ask for help um so it works

00:10:11,600 --> 00:10:15,519
and and you know if if the stars align

00:10:13,920 --> 00:10:17,360
you know it's it's easy

00:10:15,519 --> 00:10:18,959
uh and here there's an example of being

00:10:17,360 --> 00:10:21,200
able to use zeppelin with

00:10:18,959 --> 00:10:22,560
um you know where you could build out

00:10:21,200 --> 00:10:25,680
and i'll show this in the

00:10:22,560 --> 00:10:28,959
in the notebook you will build out a

00:10:25,680 --> 00:10:30,880
a function in 3d and then what we do

00:10:28,959 --> 00:10:33,680
here is we write the result to the

00:10:30,880 --> 00:10:35,680
resource pool that zeppelin maintains lo

00:10:33,680 --> 00:10:38,720
and behold we can pop open a spark

00:10:35,680 --> 00:10:41,680
our shell and pull that

00:10:38,720 --> 00:10:42,959
object out of the resource pool and then

00:10:41,680 --> 00:10:45,680
plot it so

00:10:42,959 --> 00:10:46,800
it's a nice easy way to be able to hop

00:10:45,680 --> 00:10:50,399
between tools

00:10:46,800 --> 00:10:52,880
and uh and see results

00:10:50,399 --> 00:10:53,839
um so it's not like i said it's i'm

00:10:52,880 --> 00:10:56,160
calling it the hard way

00:10:53,839 --> 00:10:57,200
and it it it's not that hard but

00:10:56,160 --> 00:10:59,279
fortunately the

00:10:57,200 --> 00:11:00,480
zeppelin people built a script that does

00:10:59,279 --> 00:11:02,880
it for you so

00:11:00,480 --> 00:11:04,800
what we what they will have you do is uh

00:11:02,880 --> 00:11:06,959
download zeppelin

00:11:04,800 --> 00:11:09,360
install it and add them adam hood

00:11:06,959 --> 00:11:11,040
interpreter all these links are here

00:11:09,360 --> 00:11:12,399
it turns out that they they have a

00:11:11,040 --> 00:11:14,560
docker image that you can run

00:11:12,399 --> 00:11:16,079
so that's actually a nice a nice way to

00:11:14,560 --> 00:11:18,399
get started with zeppelin

00:11:16,079 --> 00:11:19,680
very easily it will it will pull down

00:11:18,399 --> 00:11:22,640
the image and it will run it

00:11:19,680 --> 00:11:23,920
and it will let you just visit um port

00:11:22,640 --> 00:11:25,839
8080 in a browser

00:11:23,920 --> 00:11:27,360
and you will have zeppelin running you

00:11:25,839 --> 00:11:28,880
can also build it from source i think

00:11:27,360 --> 00:11:30,640
that um

00:11:28,880 --> 00:11:32,160
if you're really going to use this for

00:11:30,640 --> 00:11:33,600
for something you would want to either

00:11:32,160 --> 00:11:34,560
build from source or use a maintained

00:11:33,600 --> 00:11:36,800
package

00:11:34,560 --> 00:11:38,959
um you know the reason to build from

00:11:36,800 --> 00:11:41,040
source would be that you wanted to

00:11:38,959 --> 00:11:42,000
change the navigation and turn this into

00:11:41,040 --> 00:11:44,399
your own you know your

00:11:42,000 --> 00:11:45,200
own uh company branded uh notebook or

00:11:44,399 --> 00:11:48,240
something like that

00:11:45,200 --> 00:11:49,200
or you wanted to uh make it so that out

00:11:48,240 --> 00:11:50,880
of the box uh

00:11:49,200 --> 00:11:53,120
you had interpreters that you wanted to

00:11:50,880 --> 00:11:55,440
add and things like that

00:11:53,120 --> 00:11:56,560
um i think that you know they they've

00:11:55,440 --> 00:11:58,480
actually made this this

00:11:56,560 --> 00:12:00,560
this easy you just run this python

00:11:58,480 --> 00:12:03,519
script uh add mahou

00:12:00,560 --> 00:12:05,360
so that's that's a lot simpler than the

00:12:03,519 --> 00:12:07,839
way we used to do it

00:12:05,360 --> 00:12:08,399
um so i but i would say that this this

00:12:07,839 --> 00:12:10,800
would be

00:12:08,399 --> 00:12:11,440
a good way to make sure that you have

00:12:10,800 --> 00:12:14,639
you know

00:12:11,440 --> 00:12:17,760
a good amount of control um that you can

00:12:14,639 --> 00:12:19,839
modify your instances up on how you want

00:12:17,760 --> 00:12:21,040
uh and then you can make sure that uh

00:12:19,839 --> 00:12:24,639
that it's it's uh

00:12:21,040 --> 00:12:28,079
it's built right for your team there is

00:12:24,639 --> 00:12:30,000
now a quick start way which means that

00:12:28,079 --> 00:12:31,839
you can just install docker and pull

00:12:30,000 --> 00:12:34,880
down a specific image

00:12:31,839 --> 00:12:38,160
uh this image will be maintained

00:12:34,880 --> 00:12:40,720
soon in the repo so we will be

00:12:38,160 --> 00:12:42,560
actually changing our quick start page

00:12:40,720 --> 00:12:44,320
to let people know that this is a good

00:12:42,560 --> 00:12:47,600
way to get started

00:12:44,320 --> 00:12:49,839
uh and what that means is that

00:12:47,600 --> 00:12:51,519
it is as simple as doing a docker pull

00:12:49,839 --> 00:12:54,079
on a specific image

00:12:51,519 --> 00:12:55,600
and then doing a docker run on that

00:12:54,079 --> 00:12:58,720
image

00:12:55,600 --> 00:13:01,040
and then visiting this uh this address

00:12:58,720 --> 00:13:02,320
in your browser

00:13:01,040 --> 00:13:04,959
and i have this running in the

00:13:02,320 --> 00:13:07,120
background so you know we're not seeing

00:13:04,959 --> 00:13:08,800
docker pull down all the artifacts and

00:13:07,120 --> 00:13:12,320
start up but here is

00:13:08,800 --> 00:13:13,440
a here is a zeppelin i've made the text

00:13:12,320 --> 00:13:17,200
bigger so

00:13:13,440 --> 00:13:19,279
it's more legible for the screen share

00:13:17,200 --> 00:13:21,440
it actually comes with some very nice

00:13:19,279 --> 00:13:22,959
inbuilt stuff a flink tutorial python

00:13:21,440 --> 00:13:25,600
tutorial tutorials for r

00:13:22,959 --> 00:13:27,680
spark how to use zeppelin you can see a

00:13:25,600 --> 00:13:30,320
notebook i've started here

00:13:27,680 --> 00:13:31,839
uh it includes you know documentation

00:13:30,320 --> 00:13:33,360
how to get involved

00:13:31,839 --> 00:13:35,040
bugs that you might want to know about

00:13:33,360 --> 00:13:36,480
where to get the code on github things

00:13:35,040 --> 00:13:38,160
like that

00:13:36,480 --> 00:13:39,920
just a quick tour for people who have

00:13:38,160 --> 00:13:42,880
not seen zeppelin before

00:13:39,920 --> 00:13:44,240
here would be your user you can find out

00:13:42,880 --> 00:13:47,519
about zeppelin

00:13:44,240 --> 00:13:49,839
you can go to repos where you can store

00:13:47,519 --> 00:13:51,760
notebooks for yourself or for your team

00:13:49,839 --> 00:13:54,880
uh and there are some other things but

00:13:51,760 --> 00:13:57,360
digging in here is the place where you

00:13:54,880 --> 00:14:00,000
would set up interpreters so

00:13:57,360 --> 00:14:01,519
you can see that there are already all

00:14:00,000 --> 00:14:05,279
of these interpreters set up and that

00:14:01,519 --> 00:14:06,720
that means zeppelin is agnostic as far

00:14:05,279 --> 00:14:08,480
as what code it runs but

00:14:06,720 --> 00:14:10,320
you can tell it i want to i want to use

00:14:08,480 --> 00:14:10,720
cassandra for a data source here is

00:14:10,320 --> 00:14:13,040
where

00:14:10,720 --> 00:14:14,560
it lives here are some properties about

00:14:13,040 --> 00:14:17,360
it that you need to know in order to

00:14:14,560 --> 00:14:19,199
connect to the right cassandra cluster

00:14:17,360 --> 00:14:20,399
and so you can see cassandra is very

00:14:19,199 --> 00:14:22,160
complicated as

00:14:20,399 --> 00:14:24,160
you know you if you've run cassandra you

00:14:22,160 --> 00:14:26,079
know that there's a lot of levers

00:14:24,160 --> 00:14:27,199
um but for something like mahou what we

00:14:26,079 --> 00:14:29,360
would do is create

00:14:27,199 --> 00:14:31,360
a new interpreter and this is the old

00:14:29,360 --> 00:14:34,560
way to you know give it a name

00:14:31,360 --> 00:14:35,839
but give it a group like uh in spark and

00:14:34,560 --> 00:14:38,399
tell it a few things about

00:14:35,839 --> 00:14:39,440
uh where to find it uh where and and

00:14:38,399 --> 00:14:42,079
upload

00:14:39,440 --> 00:14:43,040
uh jars let me know let either give it a

00:14:42,079 --> 00:14:45,680
path

00:14:43,040 --> 00:14:47,199
or upload it to to where that one is so

00:14:45,680 --> 00:14:48,720
it knows how to run the code that you're

00:14:47,199 --> 00:14:51,360
going to be running

00:14:48,720 --> 00:14:52,240
so that is you know that's a very quick

00:14:51,360 --> 00:14:55,920
tour of

00:14:52,240 --> 00:14:59,920
what uh what you do to add a

00:14:55,920 --> 00:15:03,120
an interpreter but here we have some

00:14:59,920 --> 00:15:05,279
live code running for the

00:15:03,120 --> 00:15:08,160
uh for the notebook let me just check in

00:15:05,279 --> 00:15:11,760
any questions here

00:15:08,160 --> 00:15:12,639
okay not yet feel free to put questions

00:15:11,760 --> 00:15:15,199
in the chat we'll

00:15:12,639 --> 00:15:16,480
uh we'll get back to them in the q a

00:15:15,199 --> 00:15:18,639
session

00:15:16,480 --> 00:15:19,600
um so this is what zeppelin looks like

00:15:18,639 --> 00:15:21,839
if you haven't seen it

00:15:19,600 --> 00:15:24,079
it actually should look familiar if you

00:15:21,839 --> 00:15:27,519
have used mathematica or

00:15:24,079 --> 00:15:29,680
uh jupiter or um

00:15:27,519 --> 00:15:31,519
any of the other multitude of

00:15:29,680 --> 00:15:34,880
notebooking tools

00:15:31,519 --> 00:15:37,519
uh you have a cell here you can can add

00:15:34,880 --> 00:15:40,079
code you can edit this code freely

00:15:37,519 --> 00:15:41,600
you can say i know hi you can do

00:15:40,079 --> 00:15:44,639
whatever you want

00:15:41,600 --> 00:15:47,040
and then you can also run it by uh

00:15:44,639 --> 00:15:48,079
hitting the run button or you can do a

00:15:47,040 --> 00:15:51,120
shift return

00:15:48,079 --> 00:15:52,880
and it will execute that code

00:15:51,120 --> 00:15:54,240
uh so i'm just setting up some imports

00:15:52,880 --> 00:15:56,240
so that so that

00:15:54,240 --> 00:15:57,360
my code knows about some things that are

00:15:56,240 --> 00:16:01,120
in uh

00:15:57,360 --> 00:16:04,160
samsara which is dsl

00:16:01,120 --> 00:16:05,759
and here are some examples of this uh of

00:16:04,160 --> 00:16:07,600
of how you work with vectors

00:16:05,759 --> 00:16:10,320
and matrices so we'll just run through a

00:16:07,600 --> 00:16:12,160
few of those examples here

00:16:10,320 --> 00:16:14,320
you can declare a vector as a dense

00:16:12,160 --> 00:16:16,399
vector by calling it

00:16:14,320 --> 00:16:17,920
this way or you can use this inbuilt

00:16:16,399 --> 00:16:20,160
method

00:16:17,920 --> 00:16:21,120
so we're just going to set those up and

00:16:20,160 --> 00:16:23,199
here's what they look like

00:16:21,120 --> 00:16:24,399
it looks like sparse matrix uh

00:16:23,199 --> 00:16:27,279
terminology

00:16:24,399 --> 00:16:27,759
these happen to be dead specters uh but

00:16:27,279 --> 00:16:29,440
it

00:16:27,759 --> 00:16:32,000
it you can see that you know the first

00:16:29,440 --> 00:16:35,279
position is uh contains a one the second

00:16:32,000 --> 00:16:37,759
position contains 1.1 etc

00:16:35,279 --> 00:16:39,920
uh setting up a dense matrix is similar

00:16:37,759 --> 00:16:43,199
you can use this uh starter function

00:16:39,920 --> 00:16:46,639
dense it'll be a three by three matrix

00:16:43,199 --> 00:16:48,320
uh and it will be called a

00:16:46,639 --> 00:16:50,720
and here you see it represented there's

00:16:48,320 --> 00:16:53,360
three rows and there are three columns

00:16:50,720 --> 00:16:55,519
and it has the correct values that we

00:16:53,360 --> 00:16:57,360
were expecting one two three four

00:16:55,519 --> 00:16:58,959
one two three oops i meant to have four

00:16:57,360 --> 00:17:01,360
five six anyway

00:16:58,959 --> 00:17:04,160
that has three four five um whatever you

00:17:01,360 --> 00:17:06,880
give it it will be

00:17:04,160 --> 00:17:09,039
we can set up a diagonal matrix that has

00:17:06,880 --> 00:17:12,880
the value

00:17:09,039 --> 00:17:14,480
10 in the uh in the diagonal

00:17:12,880 --> 00:17:16,240
so these are just helper functions that

00:17:14,480 --> 00:17:19,520
come along and

00:17:16,240 --> 00:17:21,360
there are there are several um uh

00:17:19,520 --> 00:17:23,039
explained the documentation on the

00:17:21,360 --> 00:17:25,360
website and on that paper i

00:17:23,039 --> 00:17:26,720
referenced as well you can set up a

00:17:25,360 --> 00:17:29,600
diagonal matrix that

00:17:26,720 --> 00:17:31,520
which has specific values in each

00:17:29,600 --> 00:17:34,240
position

00:17:31,520 --> 00:17:36,720
you can create a 10 by 10 identity

00:17:34,240 --> 00:17:36,720
matrix

00:17:36,880 --> 00:17:40,480
but as you can see it uh it is a matrix

00:17:39,679 --> 00:17:43,280
in that

00:17:40,480 --> 00:17:44,240
there are 10 rows and only the position

00:17:43,280 --> 00:17:46,559
that is filled in

00:17:44,240 --> 00:17:49,200
is referenced here as one all the other

00:17:46,559 --> 00:17:52,240
positions are

00:17:49,200 --> 00:17:52,240
have zero in them

00:17:52,320 --> 00:17:57,760
here we can pull out a value of an

00:17:55,679 --> 00:18:00,559
existing matrix using the index

00:17:57,760 --> 00:18:03,440
two which would be the third position so

00:18:00,559 --> 00:18:05,760
what we had in there was 1.2

00:18:03,440 --> 00:18:07,600
we can also set the value in that

00:18:05,760 --> 00:18:11,200
position in that vector

00:18:07,600 --> 00:18:12,240
to 3 if we want to do that and then i

00:18:11,200 --> 00:18:14,320
think that

00:18:12,240 --> 00:18:15,520
what we would then see is what tense

00:18:14,320 --> 00:18:18,640
feature looks like now

00:18:15,520 --> 00:18:20,559
is and uh

00:18:18,640 --> 00:18:22,480
there's tab completion by the way here

00:18:20,559 --> 00:18:23,200
so you can see that if you start typing

00:18:22,480 --> 00:18:25,280
you can

00:18:23,200 --> 00:18:28,240
uh just tell it yet that's the one i

00:18:25,280 --> 00:18:30,960
wanted so sure enough we have set the uh

00:18:28,240 --> 00:18:33,039
set a second or you know third position

00:18:30,960 --> 00:18:36,720
to three

00:18:33,039 --> 00:18:38,480
uh we have uh pulling we can pull out a

00:18:36,720 --> 00:18:42,799
value of a matrix similarly

00:18:38,480 --> 00:18:46,240
using the indexing of uh row and column

00:18:42,799 --> 00:18:50,160
so d within the 5.0 given our uh

00:18:46,240 --> 00:18:51,039
given our matrix a and likewise you can

00:18:50,160 --> 00:18:54,240
set a

00:18:51,039 --> 00:18:56,480
to have three in the

00:18:54,240 --> 00:18:58,640
second row third position which we have

00:18:56,480 --> 00:19:01,520
here

00:18:58,640 --> 00:19:03,600
there is some uh convenience uh access

00:19:01,520 --> 00:19:06,480
functions where you can

00:19:03,600 --> 00:19:07,360
get just a section of a matrix a so in

00:19:06,480 --> 00:19:11,120
this case this

00:19:07,360 --> 00:19:12,880
this syntax means give me matrix a from

00:19:11,120 --> 00:19:16,640
row 0 to 1

00:19:12,880 --> 00:19:18,240
columns 1 to 2. and so when we execute

00:19:16,640 --> 00:19:25,520
that then we'd see that b

00:19:18,240 --> 00:19:28,559
is indeed let's see what was a before

00:19:25,520 --> 00:19:29,280
yeah so what we have here is in row zero

00:19:28,559 --> 00:19:32,480
and one

00:19:29,280 --> 00:19:34,960
columns one you know one and two

00:19:32,480 --> 00:19:35,679
uh we've pulled out this smaller square

00:19:34,960 --> 00:19:40,080
block of

00:19:35,679 --> 00:19:42,720
a this uh this is a handy feature for

00:19:40,080 --> 00:19:44,640
doing distributed uh matrix math because

00:19:42,720 --> 00:19:46,799
often when you are

00:19:44,640 --> 00:19:47,760
running big computations you will want

00:19:46,799 --> 00:19:50,400
to be able to

00:19:47,760 --> 00:19:51,039
um so-called blockify a large matrix and

00:19:50,400 --> 00:19:53,840
take out

00:19:51,039 --> 00:19:56,559
blocks of certain size which will then

00:19:53,840 --> 00:19:59,919
each block would be sent to a different

00:19:56,559 --> 00:20:03,120
node or or or

00:19:59,919 --> 00:20:06,400
or core to to do a calculation on

00:20:03,120 --> 00:20:10,000
so this blocky this blockification is um

00:20:06,400 --> 00:20:12,159
is a very handy way of doing that

00:20:10,000 --> 00:20:13,520
uh we have similar we have similar

00:20:12,159 --> 00:20:14,559
operations to what you would find if

00:20:13,520 --> 00:20:16,720
you're using blasts

00:20:14,559 --> 00:20:17,679
uh you know you can do so here we're

00:20:16,720 --> 00:20:20,159
setting

00:20:17,679 --> 00:20:21,760
two vectors up one is uh one through

00:20:20,159 --> 00:20:25,200
five the next one b

00:20:21,760 --> 00:20:27,440
is six through ten you can do any number

00:20:25,200 --> 00:20:30,799
of these operations like you can add

00:20:27,440 --> 00:20:34,640
uh a to b and you'll get that result

00:20:30,799 --> 00:20:37,520
you can do uh subtract b from a

00:20:34,640 --> 00:20:38,799
and it takes cubed and you will get some

00:20:37,520 --> 00:20:41,919
negative numbers

00:20:38,799 --> 00:20:44,480
um and you can also do the same kind of

00:20:41,919 --> 00:20:46,400
uh addition and subtraction with scalars

00:20:44,480 --> 00:20:48,960
so here you have

00:20:46,400 --> 00:20:51,280
a plus five and element wise you've

00:20:48,960 --> 00:20:54,320
added five to each element

00:20:51,280 --> 00:20:57,440
same with the you know subtracting

00:20:54,320 --> 00:20:58,880
and uh we have uh element-wise uh

00:20:57,440 --> 00:21:01,840
multiplication of vectors

00:20:58,880 --> 00:21:03,600
so this would be multiplying each each

00:21:01,840 --> 00:21:06,480
element of the vector together

00:21:03,600 --> 00:21:07,840
to have a new vector which i think if we

00:21:06,480 --> 00:21:10,320
check the math it's correct

00:21:07,840 --> 00:21:11,679
and you know similarly we can do that

00:21:10,320 --> 00:21:13,440
with a scalar

00:21:11,679 --> 00:21:14,720
so a lot of convenience functions i

00:21:13,440 --> 00:21:17,039
think that

00:21:14,720 --> 00:21:18,320
this is the kind of thing that really is

00:21:17,039 --> 00:21:20,799
at the the heart of

00:21:18,320 --> 00:21:22,640
what is appealing about mahou for uh

00:21:20,799 --> 00:21:25,120
mathematicians and

00:21:22,640 --> 00:21:26,400
uh experimenters uh being able to do

00:21:25,120 --> 00:21:29,200
this kind of operation

00:21:26,400 --> 00:21:30,080
without having to learn a cumbersome

00:21:29,200 --> 00:21:33,200
library that

00:21:30,080 --> 00:21:35,919
will do these these uh these operations

00:21:33,200 --> 00:21:38,000
um here we have matrix math and it is i

00:21:35,919 --> 00:21:40,080
think this is matlab terminology to have

00:21:38,000 --> 00:21:41,039
the uh the matrix math surrounded by

00:21:40,080 --> 00:21:43,280
parens our

00:21:41,039 --> 00:21:44,720
percentages here we'll set up another

00:21:43,280 --> 00:21:47,039
matrix c

00:21:44,720 --> 00:21:48,400
uh to be this matrix and then we're

00:21:47,039 --> 00:21:51,120
going to multiply a and c

00:21:48,400 --> 00:21:52,720
together we see that it prints out c and

00:21:51,120 --> 00:21:55,760
then it does that math

00:21:52,720 --> 00:21:58,559
so pg very easy um and very

00:21:55,760 --> 00:22:01,440
straightforward very readable

00:21:58,559 --> 00:22:03,200
here are a few examples of some matrix

00:22:01,440 --> 00:22:06,480
decomposition here's chileski

00:22:03,200 --> 00:22:09,840
decomposition of matrix a

00:22:06,480 --> 00:22:13,120
so we get a result that is you know has

00:22:09,840 --> 00:22:15,679
this type uh the nice thing

00:22:13,120 --> 00:22:17,840
that uh zeppelin brings to bear that is

00:22:15,679 --> 00:22:18,240
similar to having something like an ide

00:22:17,840 --> 00:22:20,480
which

00:22:18,240 --> 00:22:21,760
lets you inspect what uh what's inside

00:22:20,480 --> 00:22:24,480
the uh

00:22:21,760 --> 00:22:27,280
an entity is you have to have completion

00:22:24,480 --> 00:22:29,760
of all the methods that we have here so

00:22:27,280 --> 00:22:30,720
in czeleski decomposition your your

00:22:29,760 --> 00:22:33,760
result will be

00:22:30,720 --> 00:22:35,840
a matrix times another matrix and uh so

00:22:33,760 --> 00:22:37,520
to get those matrices what you'll have

00:22:35,840 --> 00:22:40,320
is

00:22:37,520 --> 00:22:41,840
this function which gets gets l or you

00:22:40,320 --> 00:22:44,799
might want to get

00:22:41,840 --> 00:22:45,360
uh per muted l and see what the result

00:22:44,799 --> 00:22:48,080
is there

00:22:45,360 --> 00:22:48,559
etc uh so that's the nice thing about

00:22:48,080 --> 00:22:50,240
working

00:22:48,559 --> 00:22:52,159
inside of a notebook is that you have

00:22:50,240 --> 00:22:54,960
some of those

00:22:52,159 --> 00:22:56,400
ide type functions that you would expect

00:22:54,960 --> 00:22:59,120
to have

00:22:56,400 --> 00:23:00,320
um here's an example of doing singular

00:22:59,120 --> 00:23:03,760
value decomposition on

00:23:00,320 --> 00:23:07,440
a we have the results of

00:23:03,760 --> 00:23:09,760
two matrices u and v uh of different

00:23:07,440 --> 00:23:11,280
shapes and then we have s which is

00:23:09,760 --> 00:23:14,640
another vector

00:23:11,280 --> 00:23:16,240
uh we can then inspect you uh all the

00:23:14,640 --> 00:23:19,039
functions that are available to you

00:23:16,240 --> 00:23:21,280
as a matrix are uh prompted so you can

00:23:19,039 --> 00:23:24,640
check to see if it is equal to something

00:23:21,280 --> 00:23:27,679
you can multiply uh you can do

00:23:24,640 --> 00:23:29,919
all the other uh you know assignment uh

00:23:27,679 --> 00:23:31,600
plus arithmetic operators

00:23:29,919 --> 00:23:33,360
and then these are all of the the

00:23:31,600 --> 00:23:36,559
functions that are available to

00:23:33,360 --> 00:23:37,440
to a matrix so you can go see what's its

00:23:36,559 --> 00:23:40,240
determinant

00:23:37,440 --> 00:23:41,120
you can then uh you know get an iterator

00:23:40,240 --> 00:23:44,159
over it and do

00:23:41,120 --> 00:23:45,840
something for each row um you can

00:23:44,159 --> 00:23:47,760
figure out how many columns are there

00:23:45,840 --> 00:23:51,039
you know so all these things are

00:23:47,760 --> 00:23:51,360
inbuilt as we knew it was three um so

00:23:51,039 --> 00:23:53,919
there

00:23:51,360 --> 00:23:54,880
you know that that's a quick tour of

00:23:53,919 --> 00:23:57,840
some of the

00:23:54,880 --> 00:23:58,960
the mathematics that's available um in

00:23:57,840 --> 00:24:02,799
mahoot

00:23:58,960 --> 00:24:05,919
in this notebook environment uh here's

00:24:02,799 --> 00:24:06,720
finally an example of um some code that

00:24:05,919 --> 00:24:10,000
we will write

00:24:06,720 --> 00:24:13,840
in scala and this generates a

00:24:10,000 --> 00:24:18,480
uh a a three-dimensional uh surface

00:24:13,840 --> 00:24:20,960
that is it has as each point it is

00:24:18,480 --> 00:24:22,400
a position on the xy plane and then it

00:24:20,960 --> 00:24:26,000
has a certain height in the z

00:24:22,400 --> 00:24:28,480
direction as its z uh value

00:24:26,000 --> 00:24:29,279
and what we will do at the end is when

00:24:28,480 --> 00:24:33,360
we get

00:24:29,279 --> 00:24:36,880
um we will convert that uh data set to a

00:24:33,360 --> 00:24:39,919
tab separated uh format and we will put

00:24:36,880 --> 00:24:42,799
it into the shared context

00:24:39,919 --> 00:24:46,960
that that zeppelin maintains we'll run

00:24:42,799 --> 00:24:50,640
this real quick

00:24:46,960 --> 00:24:52,080
what our result is is a tab step this is

00:24:50,640 --> 00:24:52,960
not what we're looking at but the tab

00:24:52,080 --> 00:24:55,600
separated

00:24:52,960 --> 00:24:57,840
result is now inside of zeppelin's

00:24:55,600 --> 00:24:59,440
shared context called z

00:24:57,840 --> 00:25:01,200
and what we could do if we wanted to be

00:24:59,440 --> 00:25:02,799
cute i didn't finish out

00:25:01,200 --> 00:25:05,200
and do the plotting but that's a good

00:25:02,799 --> 00:25:07,440
exercise for the for the viewer

00:25:05,200 --> 00:25:08,400
however what we can do is reach into

00:25:07,440 --> 00:25:11,279
that context

00:25:08,400 --> 00:25:13,360
get that tab separated value out and

00:25:11,279 --> 00:25:15,279
then we can look and see what it is

00:25:13,360 --> 00:25:16,880
and this is using python so what we've

00:25:15,279 --> 00:25:19,360
done is

00:25:16,880 --> 00:25:19,919
uh we will use python to read out that

00:25:19,360 --> 00:25:23,200
object

00:25:19,919 --> 00:25:25,279
we'd see that it is a tab separated

00:25:23,200 --> 00:25:26,480
you can see the tabs in here tab

00:25:25,279 --> 00:25:30,240
separated

00:25:26,480 --> 00:25:32,960
and a new line separated file containing

00:25:30,240 --> 00:25:33,600
uh three points per row so what we've

00:25:32,960 --> 00:25:36,720
done there

00:25:33,600 --> 00:25:39,760
is we've taken some scala code done

00:25:36,720 --> 00:25:40,880
some operations stored the result in the

00:25:39,760 --> 00:25:42,400
shared context

00:25:40,880 --> 00:25:44,320
and then just jumped over to python to

00:25:42,400 --> 00:25:48,240
pick it up

00:25:44,320 --> 00:25:51,760
um so that is that is the tour of

00:25:48,240 --> 00:25:53,200
zeppelin that we had prepared

00:25:51,760 --> 00:25:55,279
i'm going to hop over and see if there

00:25:53,200 --> 00:25:59,279
are any questions

00:25:55,279 --> 00:26:02,320
just trevor making smiley faces

00:25:59,279 --> 00:26:05,679
um so back to the slides

00:26:02,320 --> 00:26:08,960
uh that's a demo again you know if if

00:26:05,679 --> 00:26:11,440
anybody wants to try this out just

00:26:08,960 --> 00:26:12,880
uh get these slides after the talk uh in

00:26:11,440 --> 00:26:14,400
the the right place i know that there

00:26:12,880 --> 00:26:15,279
will be a shared drive and they'll be

00:26:14,400 --> 00:26:17,039
they'll be shared out

00:26:15,279 --> 00:26:19,039
uh at the same time as the videos i

00:26:17,039 --> 00:26:21,039
believe um

00:26:19,039 --> 00:26:22,640
and so i'm gonna wind this one up by

00:26:21,039 --> 00:26:25,679
talking about how to get started

00:26:22,640 --> 00:26:26,720
with this yourself i think as mentioned

00:26:25,679 --> 00:26:29,200
there is a

00:26:26,720 --> 00:26:30,400
new version out this week we just uh

00:26:29,200 --> 00:26:33,200
just finished voting on it

00:26:30,400 --> 00:26:34,559
uh there's a 14.1 release which was a

00:26:33,200 --> 00:26:37,679
major refactor from

00:26:34,559 --> 00:26:39,120
a new contributor uh not new to apache

00:26:37,679 --> 00:26:42,080
but new to mahoud chris dutts

00:26:39,120 --> 00:26:42,480
and uh so many thanks to him uh we have

00:26:42,080 --> 00:26:45,039
uh

00:26:42,480 --> 00:26:46,480
a cleaner build now it's actually a lot

00:26:45,039 --> 00:26:49,600
easier to navigate for

00:26:46,480 --> 00:26:51,200
for new and old users so i would say if

00:26:49,600 --> 00:26:54,000
you are interested in trying this out

00:26:51,200 --> 00:26:54,320
i would grab that doctor image fire it

00:26:54,000 --> 00:26:56,799
up

00:26:54,320 --> 00:26:58,880
see if you if you like doing your work

00:26:56,799 --> 00:27:00,480
inside of that notebook

00:26:58,880 --> 00:27:02,000
get yourself subscribed to the user list

00:27:00,480 --> 00:27:04,559
so that you can ask questions and you

00:27:02,000 --> 00:27:06,559
can keep tabs on what's happening

00:27:04,559 --> 00:27:08,080
there's always people monitoring that uh

00:27:06,559 --> 00:27:10,480
you can always get an answer

00:27:08,080 --> 00:27:11,600
uh when you when you need help or have

00:27:10,480 --> 00:27:14,000
questions

00:27:11,600 --> 00:27:15,600
uh be patient but uh there will be an

00:27:14,000 --> 00:27:18,640
answer at some point

00:27:15,600 --> 00:27:19,520
uh get yourself eventually a binary or

00:27:18,640 --> 00:27:21,520
source build

00:27:19,520 --> 00:27:23,039
uh and the links to all these things are

00:27:21,520 --> 00:27:25,120
are in this talk so you can

00:27:23,039 --> 00:27:26,799
just jump in there uh you can try it

00:27:25,120 --> 00:27:27,440
with or without zeppelin i personally

00:27:26,799 --> 00:27:30,480
think that

00:27:27,440 --> 00:27:32,240
um you know it it's it's not that hard

00:27:30,480 --> 00:27:34,080
to get started in the shell

00:27:32,240 --> 00:27:35,520
uh so if you want to get that you know

00:27:34,080 --> 00:27:37,760
get started with that you can always

00:27:35,520 --> 00:27:38,720
try it out and if you get stuck ask for

00:27:37,760 --> 00:27:41,760
help

00:27:38,720 --> 00:27:44,880
um and you know uh definitely welcome

00:27:41,760 --> 00:27:46,559
uh contribution as far as uh if you run

00:27:44,880 --> 00:27:47,200
into some documentation that needs some

00:27:46,559 --> 00:27:49,200
work

00:27:47,200 --> 00:27:50,799
which i guarantee you will because we

00:27:49,200 --> 00:27:51,840
have some stuff to update after the new

00:27:50,799 --> 00:27:53,760
release

00:27:51,840 --> 00:27:55,039
uh if you find any bugs if you run into

00:27:53,760 --> 00:27:57,840
some bugs um

00:27:55,039 --> 00:27:59,120
you know nothing is beyond the

00:27:57,840 --> 00:28:02,080
capability of

00:27:59,120 --> 00:28:03,600
anybody who can read and write write

00:28:02,080 --> 00:28:06,080
some software so

00:28:03,600 --> 00:28:07,840
i i know i personally got involved in

00:28:06,080 --> 00:28:08,159
this project and open source in general

00:28:07,840 --> 00:28:11,600
by

00:28:08,159 --> 00:28:14,799
discovering a bug on a uh on a

00:28:11,600 --> 00:28:17,440
release and jumped in fixed it and and

00:28:14,799 --> 00:28:18,960
got hooked that way um eventually you

00:28:17,440 --> 00:28:20,320
know if you want to add some features

00:28:18,960 --> 00:28:23,360
there are actually some very

00:28:20,320 --> 00:28:26,399
convenient ways of uh writing new

00:28:23,360 --> 00:28:29,760
algorithms uh contributing um

00:28:26,399 --> 00:28:30,640
uh tests to to to the to the source

00:28:29,760 --> 00:28:33,600
street

00:28:30,640 --> 00:28:35,679
uh and so it's actually the onboarding

00:28:33,600 --> 00:28:37,200
uh has improved a lot on this project in

00:28:35,679 --> 00:28:39,679
the past few years

00:28:37,200 --> 00:28:40,799
um stick around for the next talk a few

00:28:39,679 --> 00:28:43,440
of us from the

00:28:40,799 --> 00:28:45,039
um the project management committee uh

00:28:43,440 --> 00:28:46,000
we'll be giving a talk about how to get

00:28:45,039 --> 00:28:48,720
involved

00:28:46,000 --> 00:28:50,799
in particular but you know it actually

00:28:48,720 --> 00:28:54,640
generalizes very well to

00:28:50,799 --> 00:28:58,000
um to open source in general

00:28:54,640 --> 00:28:59,679
and with that i think that is it

00:28:58,000 --> 00:29:03,679
for me uh here's how to get in touch

00:28:59,679 --> 00:29:05,840
with me on email uh akm at apache.org

00:29:03,679 --> 00:29:08,000
any questions i'm happy to take those

00:29:05,840 --> 00:29:11,200
now

00:29:08,000 --> 00:29:14,480
yes let me stop sharing so we don't have

00:29:11,200 --> 00:29:17,360
this alice in wonderland thing

00:29:14,480 --> 00:29:18,799
okay so some questions uh machine

00:29:17,360 --> 00:29:19,279
learning functions available in zebra

00:29:18,799 --> 00:29:21,919
firm

00:29:19,279 --> 00:29:23,760
yes patrick there are actually quite a

00:29:21,919 --> 00:29:25,600
few machine learning algorithms already

00:29:23,760 --> 00:29:26,320
built in mahout that are available

00:29:25,600 --> 00:29:30,159
either

00:29:26,320 --> 00:29:31,840
in if you if so if you run mahud inside

00:29:30,159 --> 00:29:33,760
the zeppelin you can use them in there

00:29:31,840 --> 00:29:34,880
you can use them outside of zeppelin you

00:29:33,760 --> 00:29:39,200
can use the

00:29:34,880 --> 00:29:42,480
uh the shell or you can actually include

00:29:39,200 --> 00:29:44,799
the jars using maven or something like

00:29:42,480 --> 00:29:47,360
that for a project that you're building

00:29:44,799 --> 00:29:48,720
um and i think that as far as building

00:29:47,360 --> 00:29:49,440
recommenders that's one of the things

00:29:48,720 --> 00:29:51,679
that people

00:29:49,440 --> 00:29:52,720
it's it's one of those workhorse

00:29:51,679 --> 00:29:54,880
functions

00:29:52,720 --> 00:29:55,919
and there was a talk earlier i believe

00:29:54,880 --> 00:29:57,600
from uh pat

00:29:55,919 --> 00:29:59,200
on building a recommender system so i

00:29:57,600 --> 00:30:01,760
would say um

00:29:59,200 --> 00:30:02,799
look at the look at the at the schedule

00:30:01,760 --> 00:30:06,399
just back up a bit

00:30:02,799 --> 00:30:08,080
and i think that uh that you'll enjoy

00:30:06,399 --> 00:30:10,240
looking at his talk when it's published

00:30:08,080 --> 00:30:13,440
his video

00:30:10,240 --> 00:30:13,440
and looking into slides too

00:30:13,679 --> 00:30:17,279
okay so videos should post next week it

00:30:15,679 --> 00:30:19,840
sounds like

00:30:17,279 --> 00:30:20,960
uh so patrick's also asking what kind of

00:30:19,840 --> 00:30:22,720
data sources

00:30:20,960 --> 00:30:24,960
that really depends on what your use

00:30:22,720 --> 00:30:26,880
case is as

00:30:24,960 --> 00:30:29,039
what and what your business needs are so

00:30:26,880 --> 00:30:32,480
people will pull data from

00:30:29,039 --> 00:30:36,159
live databases from uh text uh

00:30:32,480 --> 00:30:39,600
text logs uh from tab separated uh

00:30:36,159 --> 00:30:42,000
files uh parquet files um

00:30:39,600 --> 00:30:43,440
um so sparks you know spark basically

00:30:42,000 --> 00:30:45,840
speaks park a as a

00:30:43,440 --> 00:30:46,960
as a first class language um that's a

00:30:45,840 --> 00:30:50,640
that's a very popular

00:30:46,960 --> 00:30:52,559
uh data format to load from um

00:30:50,640 --> 00:30:54,320
and you know all the formats that you

00:30:52,559 --> 00:30:56,880
that you would hear about

00:30:54,320 --> 00:30:58,640
whether it's market matrix format or or

00:30:56,880 --> 00:31:02,320
part k or anything like that

00:30:58,640 --> 00:31:02,880
those are often either just a matrix of

00:31:02,320 --> 00:31:06,559
numbers

00:31:02,880 --> 00:31:07,440
or they are um uh you know a two or

00:31:06,559 --> 00:31:10,320
three

00:31:07,440 --> 00:31:11,919
uh item per row file where you have you

00:31:10,320 --> 00:31:13,919
know a user id

00:31:11,919 --> 00:31:15,919
you have an item id and you either have

00:31:13,919 --> 00:31:16,640
you know a fact about that interaction

00:31:15,919 --> 00:31:18,559
whether

00:31:16,640 --> 00:31:19,679
somebody interacted with a video one

00:31:18,559 --> 00:31:21,919
time or

00:31:19,679 --> 00:31:24,000
you know somebody uh purchased a product

00:31:21,919 --> 00:31:26,320
three times or something like that

00:31:24,000 --> 00:31:27,600
um so it really it comes down to pretty

00:31:26,320 --> 00:31:31,039
simple pretty simple

00:31:27,600 --> 00:31:33,120
um set of set of data that people are

00:31:31,039 --> 00:31:35,840
usually uh pulling in

00:31:33,120 --> 00:31:37,039
um and it's the formats are usually

00:31:35,840 --> 00:31:38,480
tailored to

00:31:37,039 --> 00:31:40,559
if you're building a recommender you

00:31:38,480 --> 00:31:42,640
really just need to boil it down to what

00:31:40,559 --> 00:31:44,720
what very small set of features you're

00:31:42,640 --> 00:31:46,240
going to use

00:31:44,720 --> 00:31:48,640
so i hope that answers your question

00:31:46,240 --> 00:31:48,640
patrick

00:31:52,559 --> 00:31:55,840
awesome and thanks for showing up i

00:31:54,159 --> 00:31:56,880
appreciate uh appreciate having uh

00:31:55,840 --> 00:31:59,200
having everybody here

00:31:56,880 --> 00:32:00,000
thank you um any other questions for

00:31:59,200 --> 00:32:04,720
anybody else

00:32:00,000 --> 00:32:04,720
um happy to chat uh just free form

00:32:09,039 --> 00:32:15,840
thanks everybody

00:32:16,000 --> 00:32:19,039
and i think uh this is such a nice

00:32:17,919 --> 00:32:21,440
format maybe we will

00:32:19,039 --> 00:32:22,880
um we'll set up twitch streams for uh

00:32:21,440 --> 00:32:25,440
every time we set up a new uh

00:32:22,880 --> 00:32:26,640
release a new version of so we can show

00:32:25,440 --> 00:32:28,080
people what's what's new

00:32:26,640 --> 00:32:30,640
uh it's good it's really nice to connect

00:32:28,080 --> 00:32:32,960
like that so uh trevor i guess

00:32:30,640 --> 00:32:32,960
uh

00:32:33,760 --> 00:32:43,840
if questions are done anybody else

00:32:35,760 --> 00:32:43,840
looking for the chat window let me know

00:32:45,120 --> 00:32:48,640
well thanks very much hope you enjoy the

00:32:47,760 --> 00:32:51,919
rest of your day

00:32:48,640 --> 00:32:57,840
and uh take care and stay safe out there

00:32:51,919 --> 00:32:57,840
all right

00:33:06,159 --> 00:33:08,240

YouTube URL: https://www.youtube.com/watch?v=I0mEt0RUhd0


