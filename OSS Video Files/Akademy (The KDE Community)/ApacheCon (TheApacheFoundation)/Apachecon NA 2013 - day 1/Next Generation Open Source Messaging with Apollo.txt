Title: Next Generation Open Source Messaging with Apollo
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Hiram Chirino ApacheCon NA 2013
Tapping the Stream
Captions: 
	00:00:00,399 --> 00:00:03,520
hi everybody um thank you for the

00:00:02,560 --> 00:00:05,520
introduction

00:00:03,520 --> 00:00:06,640
um i'm gonna be introducing to you guys

00:00:05,520 --> 00:00:08,720
what uh

00:00:06,640 --> 00:00:10,480
apache apollo is it's hopefully gonna

00:00:08,720 --> 00:00:13,920
become the next generation

00:00:10,480 --> 00:00:17,359
of uh the active mq project

00:00:13,920 --> 00:00:19,600
um so a little bit about me um

00:00:17,359 --> 00:00:21,359
uh well i'm a red hat engineer uh i've

00:00:19,600 --> 00:00:22,560
been working on open source for lots of

00:00:21,359 --> 00:00:23,600
lots of years like probably like 10

00:00:22,560 --> 00:00:26,720
years now

00:00:23,600 --> 00:00:29,840
i'm a committer on active mq camel

00:00:26,720 --> 00:00:31,519
carafe geronimo service makes so

00:00:29,840 --> 00:00:34,079
generally lots of

00:00:31,519 --> 00:00:35,680
messaging and integration type related

00:00:34,079 --> 00:00:38,320
projects

00:00:35,680 --> 00:00:41,120
i'm an apache member and the current pmc

00:00:38,320 --> 00:00:44,160
chair for activemq

00:00:41,120 --> 00:00:44,960
and i've also founded or co-founded lots

00:00:44,160 --> 00:00:47,360
of little other

00:00:44,960 --> 00:00:48,160
side uh open source projects like hot

00:00:47,360 --> 00:00:52,239
dispatch

00:00:48,160 --> 00:00:54,000
and uh uh jni binding for for level db

00:00:52,239 --> 00:00:56,079
uh projects like chancy and lots of

00:00:54,000 --> 00:00:58,640
other ones

00:00:56,079 --> 00:01:00,559
so uh today i just want to kind of

00:00:58,640 --> 00:01:01,680
introduce what apache apollo is to you

00:01:00,559 --> 00:01:04,640
guys

00:01:01,680 --> 00:01:04,879
uh and try to dive in a little deeper

00:01:04,640 --> 00:01:07,119
and

00:01:04,879 --> 00:01:08,479
and basically compare it to how it's

00:01:07,119 --> 00:01:11,280
different from uh

00:01:08,479 --> 00:01:12,080
apache active mq which it's very similar

00:01:11,280 --> 00:01:13,920
to

00:01:12,080 --> 00:01:15,439
and then cover a little bit about uh

00:01:13,920 --> 00:01:16,320
where it's going uh what's going to be

00:01:15,439 --> 00:01:18,400
coming up

00:01:16,320 --> 00:01:19,759
what's in the latest release which uh

00:01:18,400 --> 00:01:23,439
released just was done

00:01:19,759 --> 00:01:27,040
yesterday so apollo 1 6 is

00:01:23,439 --> 00:01:28,640
hot off the presses um okay so without

00:01:27,040 --> 00:01:30,560
further ado

00:01:28,640 --> 00:01:31,680
so what's apache apollo uh it's a

00:01:30,560 --> 00:01:33,119
messaging server

00:01:31,680 --> 00:01:34,880
very similar like active pew it's a

00:01:33,119 --> 00:01:36,560
messaging server or some folks call it a

00:01:34,880 --> 00:01:39,520
messaging broker

00:01:36,560 --> 00:01:41,360
it supports cue semantics topic

00:01:39,520 --> 00:01:44,399
semantics

00:01:41,360 --> 00:01:46,479
it does transactions so you can do a

00:01:44,399 --> 00:01:48,159
do a group of messaging operations and

00:01:46,479 --> 00:01:48,799
put it all under transactions so either

00:01:48,159 --> 00:01:51,200
they all

00:01:48,799 --> 00:01:52,159
occur or you roll back and none of them

00:01:51,200 --> 00:01:54,159
occurred

00:01:52,159 --> 00:01:55,840
it also does reliable messaging you can

00:01:54,159 --> 00:01:57,200
send it a message and once the broker

00:01:55,840 --> 00:01:58,560
tells you yeah i got it

00:01:57,200 --> 00:02:00,240
you're pretty much guaranteed you're not

00:01:58,560 --> 00:02:04,479
gonna lose a message which is

00:02:00,240 --> 00:02:04,479
uh important for for lots of folks

00:02:05,840 --> 00:02:11,520
all right so who here's uh done

00:02:08,479 --> 00:02:14,000
messaging before and has an idea what

00:02:11,520 --> 00:02:16,000
okay good still a lot to you didn't

00:02:14,000 --> 00:02:19,520
raise your hand so i'm just gonna cover

00:02:16,000 --> 00:02:21,120
the basics just for for

00:02:19,520 --> 00:02:22,319
for the sake of covering so you guys get

00:02:21,120 --> 00:02:23,120
an idea what kind of messaging i'm

00:02:22,319 --> 00:02:25,520
talking about

00:02:23,120 --> 00:02:27,440
i'm not talking about uh you know

00:02:25,520 --> 00:02:30,319
instant messaging or any of that stuff

00:02:27,440 --> 00:02:32,239
uh so this is enterprise messaging and

00:02:30,319 --> 00:02:33,760
uh there's basically two main models

00:02:32,239 --> 00:02:35,360
people think about when they think about

00:02:33,760 --> 00:02:36,959
uh message oriented middleware or

00:02:35,360 --> 00:02:39,120
enterprise messaging

00:02:36,959 --> 00:02:41,120
and the first one is the point-to-point

00:02:39,120 --> 00:02:43,040
model which uses cues

00:02:41,120 --> 00:02:44,400
okay so let's say you have an

00:02:43,040 --> 00:02:46,000
application uh

00:02:44,400 --> 00:02:47,599
which needs to communicate with another

00:02:46,000 --> 00:02:51,360
application uh

00:02:47,599 --> 00:02:54,239
they could be it could be for example a

00:02:51,360 --> 00:02:56,000
a storefront needs to communicate with a

00:02:54,239 --> 00:02:57,440
warehouse to find out what the inventory

00:02:56,000 --> 00:02:59,280
is or something like that or

00:02:57,440 --> 00:03:01,519
or basically needs to let it know that

00:02:59,280 --> 00:03:03,120
hey somebody just bought something so

00:03:01,519 --> 00:03:04,800
later on you need to ship me another one

00:03:03,120 --> 00:03:07,280
of these widgets because i'm

00:03:04,800 --> 00:03:08,480
you know my my shelf has you know

00:03:07,280 --> 00:03:10,000
reduced one of these

00:03:08,480 --> 00:03:11,680
so basically that application is going

00:03:10,000 --> 00:03:12,720
to produce a message and send it to a

00:03:11,680 --> 00:03:15,040
queue

00:03:12,720 --> 00:03:16,560
and uh the idea is now there's a

00:03:15,040 --> 00:03:18,480
messaging system that's going to hold on

00:03:16,560 --> 00:03:20,080
to that message it's going to reliably

00:03:18,480 --> 00:03:23,120
hold on to it you don't have to worry

00:03:20,080 --> 00:03:24,720
once the cuny system accepts it

00:03:23,120 --> 00:03:26,159
that application no longer has to worry

00:03:24,720 --> 00:03:28,000
about uh

00:03:26,159 --> 00:03:29,440
the status of the network or if it's

00:03:28,000 --> 00:03:30,720
down or up he could be

00:03:29,440 --> 00:03:32,640
communicating the store could be

00:03:30,720 --> 00:03:33,280
communicating over satellite links or

00:03:32,640 --> 00:03:35,760
something

00:03:33,280 --> 00:03:37,440
very unreliable like that the queuing

00:03:35,760 --> 00:03:40,959
system or the messenger system

00:03:37,440 --> 00:03:43,360
will take care of healing uh

00:03:40,959 --> 00:03:44,239
the status and retransmitting messages

00:03:43,360 --> 00:03:45,920
if it needs to

00:03:44,239 --> 00:03:47,120
so that eventually those messages get to

00:03:45,920 --> 00:03:48,319
the consumers which could be some

00:03:47,120 --> 00:03:51,440
warehouse applications

00:03:48,319 --> 00:03:53,840
keeping track of the inventory right

00:03:51,440 --> 00:03:54,799
so on a queue you can have multiple

00:03:53,840 --> 00:03:58,239
consumers

00:03:54,799 --> 00:03:59,920
right uh and the idea is

00:03:58,239 --> 00:04:02,480
that only a message will only be

00:03:59,920 --> 00:04:05,920
received by one consumer at a time

00:04:02,480 --> 00:04:07,280
so he'll deliver it those messages to

00:04:05,920 --> 00:04:08,080
different consumers and only one

00:04:07,280 --> 00:04:10,239
consumer

00:04:08,080 --> 00:04:12,720
gets one copy of the message so it only

00:04:10,239 --> 00:04:15,439
gets processed once

00:04:12,720 --> 00:04:16,799
so in a way this is kind of like uh http

00:04:15,439 --> 00:04:18,720
requests they kind of go

00:04:16,799 --> 00:04:20,320
uh you could have a load balancer in

00:04:18,720 --> 00:04:21,280
front the little balancer would

00:04:20,320 --> 00:04:24,880
distribute the work

00:04:21,280 --> 00:04:24,880
across the available servers

00:04:25,280 --> 00:04:31,440
so the other pattern that's very common

00:04:28,400 --> 00:04:34,000
is the publish describe pattern

00:04:31,440 --> 00:04:35,040
and that goes over a concept called

00:04:34,000 --> 00:04:36,960
topics

00:04:35,040 --> 00:04:39,040
so you sent to destination topic

00:04:36,960 --> 00:04:41,440
destinations and when those messages are

00:04:39,040 --> 00:04:43,120
sent by the producer

00:04:41,440 --> 00:04:44,720
the topic will replicate that same

00:04:43,120 --> 00:04:45,520
message to all the currently connected

00:04:44,720 --> 00:04:49,600
consumers

00:04:45,520 --> 00:04:51,199
or also sometimes called subscribers

00:04:49,600 --> 00:04:52,400
if consumer's not currently connected

00:04:51,199 --> 00:04:53,759
like in this case he's going to miss

00:04:52,400 --> 00:04:55,840
that message

00:04:53,759 --> 00:04:57,199
and but if he does connect later on

00:04:55,840 --> 00:05:00,400
he'll get subsequent

00:04:57,199 --> 00:05:03,039
uh publications to the topic

00:05:00,400 --> 00:05:03,840
now there's also some hybrid models you

00:05:03,039 --> 00:05:05,520
can actually

00:05:03,840 --> 00:05:07,199
attach things called durable

00:05:05,520 --> 00:05:09,360
subscriptions to these uh

00:05:07,199 --> 00:05:11,120
topics so that way even if your client

00:05:09,360 --> 00:05:12,560
applications not online at a time the

00:05:11,120 --> 00:05:14,880
durable subscription

00:05:12,560 --> 00:05:15,840
will cue up all the messages that were

00:05:14,880 --> 00:05:17,520
sent to the topic

00:05:15,840 --> 00:05:19,440
so in a way a durable subscription is

00:05:17,520 --> 00:05:22,080
like attaching a cue

00:05:19,440 --> 00:05:22,080
to a topic

00:05:23,440 --> 00:05:28,720
okay so in a way apollo

00:05:26,639 --> 00:05:30,400
is very much the same thing that

00:05:28,720 --> 00:05:33,199
activemq is today

00:05:30,400 --> 00:05:33,600
it provides almost all the same features

00:05:33,199 --> 00:05:36,479
uh

00:05:33,600 --> 00:05:38,880
it has a few less right now we basically

00:05:36,479 --> 00:05:40,800
are have implemented apollo

00:05:38,880 --> 00:05:43,680
as a way to address some of the

00:05:40,800 --> 00:05:46,320
scalability issues with active mq

00:05:43,680 --> 00:05:47,280
um but we're not yet trying to replace

00:05:46,320 --> 00:05:49,360
it okay

00:05:47,280 --> 00:05:50,960
once apollo does implement every single

00:05:49,360 --> 00:05:53,440
feature active and queue has

00:05:50,960 --> 00:05:55,440
and basically we're happy with it we'll

00:05:53,440 --> 00:05:57,120
call this thing the next major revision

00:05:55,440 --> 00:05:59,759
of active queue it could be

00:05:57,120 --> 00:06:01,520
might be active mq6 for all i know right

00:05:59,759 --> 00:06:03,360
but if you're using academic key today

00:06:01,520 --> 00:06:05,840
we're not saying you switch to apollo

00:06:03,360 --> 00:06:08,800
actum q is a very solid mature product

00:06:05,840 --> 00:06:10,479
that's been tested forever

00:06:08,800 --> 00:06:12,479
it's like six or seven years old or

00:06:10,479 --> 00:06:13,840
something like that um

00:06:12,479 --> 00:06:17,039
it's gonna be supported for a long time

00:06:13,840 --> 00:06:18,880
to come so i'm not saying uh switch from

00:06:17,039 --> 00:06:21,840
uh to apollo from active mq or something

00:06:18,880 --> 00:06:21,840
like that

00:06:21,919 --> 00:06:28,160
so apollo is kind of like

00:06:25,600 --> 00:06:29,759
leading edge it's gonna it's kind of

00:06:28,160 --> 00:06:31,600
breaking ground for active q it's going

00:06:29,759 --> 00:06:33,199
to be the next generation

00:06:31,600 --> 00:06:34,800
the nice thing is there's already lots

00:06:33,199 --> 00:06:36,400
of features that we developed in apollo

00:06:34,800 --> 00:06:38,080
that we've been back porting back into

00:06:36,400 --> 00:06:41,840
active mq5

00:06:38,080 --> 00:06:45,199
for example active q58 now has

00:06:41,840 --> 00:06:47,199
the level db store that we implemented

00:06:45,199 --> 00:06:49,840
in apollo provides much better

00:06:47,199 --> 00:06:53,440
performance persistence performance

00:06:49,840 --> 00:06:53,440
and things like that so

00:07:00,319 --> 00:07:04,960
so who here is using has used or is

00:07:02,639 --> 00:07:07,680
using active mq

00:07:04,960 --> 00:07:09,599
okay good yeah totally don't want to

00:07:07,680 --> 00:07:11,840
scare you guys off from using active mq

00:07:09,599 --> 00:07:11,840
but

00:07:12,479 --> 00:07:16,000
you might want to start trying out

00:07:14,240 --> 00:07:17,680
apollo okay and

00:07:16,000 --> 00:07:19,599
and the main reasons you want to do this

00:07:17,680 --> 00:07:22,880
is if you got a lot of

00:07:19,599 --> 00:07:26,240
active mqs deployed because basically

00:07:22,880 --> 00:07:28,479
uh a single broker instance is

00:07:26,240 --> 00:07:29,360
scaling as far as you wanted to apollo

00:07:28,479 --> 00:07:30,800
might have

00:07:29,360 --> 00:07:33,039
you might be able to put more load on a

00:07:30,800 --> 00:07:33,840
single apollo server it has lower cpu

00:07:33,039 --> 00:07:35,919
overheads

00:07:33,840 --> 00:07:37,680
it's got a reduced memory footprint due

00:07:35,919 --> 00:07:39,599
to its threading model

00:07:37,680 --> 00:07:41,599
uh and it supports some nice things like

00:07:39,599 --> 00:07:43,120
runtime configuration reloading inactive

00:07:41,599 --> 00:07:44,080
mq typically if you modify its

00:07:43,120 --> 00:07:45,440
configuration

00:07:44,080 --> 00:07:47,919
you kind of have to restart the broker

00:07:45,440 --> 00:07:49,440
for it to reload its settings with

00:07:47,919 --> 00:07:50,879
apollo it can detect changes

00:07:49,440 --> 00:07:52,960
configuration

00:07:50,879 --> 00:07:54,319
and it won't even disconnect clients or

00:07:52,960 --> 00:07:55,039
anything like that it'll just apply the

00:07:54,319 --> 00:07:57,599
changes

00:07:55,039 --> 00:08:00,720
as needed okay it's also got a really

00:07:57,599 --> 00:08:03,840
nice rest management api which provides

00:08:00,720 --> 00:08:07,199
more detail than what the current gmx

00:08:03,840 --> 00:08:10,879
management api that uh activemcu has

00:08:07,199 --> 00:08:13,199
oh and another kind of uh

00:08:10,879 --> 00:08:14,160
architectural kind of driving factor

00:08:13,199 --> 00:08:16,400
here that we've been

00:08:14,160 --> 00:08:17,759
i've been trying to do with apollo is

00:08:16,400 --> 00:08:22,080
keep the configuration

00:08:17,759 --> 00:08:24,960
as simple as possible with activemq

00:08:22,080 --> 00:08:26,639
uh it's it's grown over many years it's

00:08:24,960 --> 00:08:27,759
supported some changes for example

00:08:26,639 --> 00:08:30,400
started as a

00:08:27,759 --> 00:08:32,159
traditional blocking server using block

00:08:30,400 --> 00:08:35,760
in io then we added an i o

00:08:32,159 --> 00:08:37,680
support to it and we've kind of just

00:08:35,760 --> 00:08:39,440
taken a kitchen sync approach to

00:08:37,680 --> 00:08:41,680
features and options that you can

00:08:39,440 --> 00:08:44,159
basically configure on the broker

00:08:41,680 --> 00:08:44,959
some of which if you configure too many

00:08:44,159 --> 00:08:47,360
options

00:08:44,959 --> 00:08:47,360
they can

00:08:48,320 --> 00:08:51,360
they can conflict with each other let's

00:08:50,160 --> 00:08:53,200
say

00:08:51,360 --> 00:08:55,120
with apollo we're trying to keep the

00:08:53,200 --> 00:08:56,080
number of configuration options as small

00:08:55,120 --> 00:08:59,360
as possible

00:08:56,080 --> 00:09:00,080
do as much auto tuning as we can so we

00:08:59,360 --> 00:09:02,320
can take the

00:09:00,080 --> 00:09:04,160
magic out of okay how do i tune this to

00:09:02,320 --> 00:09:06,720
get good performance

00:09:04,160 --> 00:09:08,480
apollo will self monitor and try to

00:09:06,720 --> 00:09:10,399
apply tuning options itself

00:09:08,480 --> 00:09:12,560
so that way end users don't have to do

00:09:10,399 --> 00:09:12,560
it

00:09:13,600 --> 00:09:20,160
this is a big picture

00:09:16,720 --> 00:09:22,000
of the parts of an apollo broker

00:09:20,160 --> 00:09:23,279
it all sits on top of the of a new

00:09:22,000 --> 00:09:24,320
threading model which i'm going to dive

00:09:23,279 --> 00:09:27,120
into more detail

00:09:24,320 --> 00:09:28,480
in a few slides which is called hot

00:09:27,120 --> 00:09:30,160
dispatch it's a library

00:09:28,480 --> 00:09:32,560
signal library you can use for your own

00:09:30,160 --> 00:09:32,560
projects

00:09:32,720 --> 00:09:36,000
but then it also has lots of plugable

00:09:35,519 --> 00:09:39,279
parts

00:09:36,000 --> 00:09:42,160
into it it's got different stores

00:09:39,279 --> 00:09:43,440
that you can plug in once a level db and

00:09:42,160 --> 00:09:45,519
one's a bdb and

00:09:43,440 --> 00:09:46,880
lots of protocols and lots of transports

00:09:45,519 --> 00:09:48,839
and i'm going to drill into

00:09:46,880 --> 00:09:51,839
each one of these in a little more

00:09:48,839 --> 00:09:51,839
detail

00:09:54,080 --> 00:09:56,320
so

00:09:57,519 --> 00:10:02,079
the first thing a broker has to do is

00:10:00,399 --> 00:10:04,240
accept connections from clients so they

00:10:02,079 --> 00:10:06,480
can resend and receive messages

00:10:04,240 --> 00:10:07,360
and the protocol that it accepts

00:10:06,480 --> 00:10:10,240
connection over

00:10:07,360 --> 00:10:10,880
is going to be typically tcp or ssl

00:10:10,240 --> 00:10:13,519
that's what

00:10:10,880 --> 00:10:15,200
most messaging systems use today but in

00:10:13,519 --> 00:10:17,760
addition to that we also support

00:10:15,200 --> 00:10:19,680
web sockets and secure web sockets and

00:10:17,760 --> 00:10:21,839
we also have a udp transport

00:10:19,680 --> 00:10:24,000
which is basically just used to receive

00:10:21,839 --> 00:10:26,640
messages over so if you want to do

00:10:24,000 --> 00:10:28,320
a quick uh you know messages might

00:10:26,640 --> 00:10:29,680
really drop but i'm going to send a lot

00:10:28,320 --> 00:10:30,079
of them like syslog or something like

00:10:29,680 --> 00:10:32,240
that

00:10:30,079 --> 00:10:34,720
you can it also supports udp to receive

00:10:32,240 --> 00:10:34,720
messages

00:10:35,440 --> 00:10:41,920
um so each one of those transports

00:10:39,200 --> 00:10:43,120
will if you have each one enabled so you

00:10:41,920 --> 00:10:45,680
could pretty much have

00:10:43,120 --> 00:10:47,120
five transports enabled in a apollo

00:10:45,680 --> 00:10:48,079
broker and each one's going to use up a

00:10:47,120 --> 00:10:49,360
single port

00:10:48,079 --> 00:10:51,120
or you might just have one like for

00:10:49,360 --> 00:10:51,920
example it's just tcp it's going to be

00:10:51,120 --> 00:10:53,680
one port

00:10:51,920 --> 00:10:56,399
but over this one port it can support

00:10:53,680 --> 00:11:00,160
multiple protocols basically

00:10:56,399 --> 00:11:00,880
when a protocol first connects we're

00:11:00,160 --> 00:11:02,399
going to do a

00:11:00,880 --> 00:11:04,480
protocol discrimination we'll look at

00:11:02,399 --> 00:11:06,560
the magic bits in front it was like oh

00:11:04,480 --> 00:11:08,959
you're you're an mpt connection so will

00:11:06,560 --> 00:11:09,680
you handle you like an empty ttt

00:11:08,959 --> 00:11:11,920
connection

00:11:09,680 --> 00:11:13,120
which is quite different from how active

00:11:11,920 --> 00:11:15,279
in q5 does it

00:11:13,120 --> 00:11:16,880
basically every protocol has to open up

00:11:15,279 --> 00:11:19,360
its own port

00:11:16,880 --> 00:11:20,160
which some folks don't like their

00:11:19,360 --> 00:11:23,440
servers having

00:11:20,160 --> 00:11:27,360
tons of ports open which you know

00:11:23,440 --> 00:11:28,720
some people just don't like it so

00:11:27,360 --> 00:11:30,800
with the protocols that we supported on

00:11:28,720 --> 00:11:32,000
pile today are pretty much the same ones

00:11:30,800 --> 00:11:35,200
that uh

00:11:32,000 --> 00:11:38,800
active q5 supports now so it's stomp

00:11:35,200 --> 00:11:42,480
versions 10112 mqtt tv

00:11:38,800 --> 00:11:44,800
31 uh aqp10 just recently added that

00:11:42,480 --> 00:11:45,760
and open wire which is the protocol that

00:11:44,800 --> 00:11:49,600
native

00:11:45,760 --> 00:11:49,600
activemq jms clients talk

00:11:51,519 --> 00:11:55,120
so stop was the first protocol that we

00:11:53,920 --> 00:11:58,320
ever implemented

00:11:55,120 --> 00:12:00,079
with apollo we started with stomp

00:11:58,320 --> 00:12:02,560
because it was a really simple

00:12:00,079 --> 00:12:04,079
text oriented protocol to implement it's

00:12:02,560 --> 00:12:06,240
simple to inspect on the wire what's

00:12:04,079 --> 00:12:07,680
going on you can look at a tcp dump

00:12:06,240 --> 00:12:09,680
and really follow it understand what's

00:12:07,680 --> 00:12:13,360
going on see what what went

00:12:09,680 --> 00:12:16,079
wrong and uh

00:12:13,360 --> 00:12:16,639
it's so simple that uh it's got a huge

00:12:16,079 --> 00:12:19,760
number

00:12:16,639 --> 00:12:22,240
of uh language uh clients native

00:12:19,760 --> 00:12:24,480
language clients like this ruby and stop

00:12:22,240 --> 00:12:26,720
and php and just about anything and if

00:12:24,480 --> 00:12:29,440
you're on a platform or in language that

00:12:26,720 --> 00:12:30,639
an existing client doesn't exist or you

00:12:29,440 --> 00:12:31,360
guys don't like the way it was

00:12:30,639 --> 00:12:33,760
implemented

00:12:31,360 --> 00:12:35,200
it's such a simple protocol like http

00:12:33,760 --> 00:12:36,000
it's very similar if you look at the

00:12:35,200 --> 00:12:38,720
frames

00:12:36,000 --> 00:12:39,519
it's basically using http like framing

00:12:38,720 --> 00:12:41,519
um

00:12:39,519 --> 00:12:43,120
you can implement it in a couple hours

00:12:41,519 --> 00:12:45,839
probably

00:12:43,120 --> 00:12:47,920
the nice thing is that it's become a

00:12:45,839 --> 00:12:50,160
really popular standard

00:12:47,920 --> 00:12:52,720
other messaging brokers have implemented

00:12:50,160 --> 00:12:56,959
not only active and cube but horny q

00:12:52,720 --> 00:12:56,959
and rabbitmq have implemented it

00:13:04,839 --> 00:13:09,120
so another really popular well i want to

00:13:07,519 --> 00:13:10,800
say it's hugely popular but i think it's

00:13:09,120 --> 00:13:13,360
an upcoming protocol that's

00:13:10,800 --> 00:13:16,000
kind of very interesting is a protocol

00:13:13,360 --> 00:13:19,040
called mqtt

00:13:16,000 --> 00:13:21,200
and it's uh basically focused on just

00:13:19,040 --> 00:13:22,720
a publish describe over topics that's

00:13:21,200 --> 00:13:24,959
the only thing you can do

00:13:22,720 --> 00:13:26,000
so that's one of the limiting factors of

00:13:24,959 --> 00:13:29,040
mqtt

00:13:26,000 --> 00:13:30,880
you can only use be used on topics

00:13:29,040 --> 00:13:32,880
but for some folks that's good enough

00:13:30,880 --> 00:13:36,480
it's focused on

00:13:32,880 --> 00:13:37,680
small devices and it's probably got the

00:13:36,480 --> 00:13:41,040
smallest

00:13:37,680 --> 00:13:43,360
per message frame overhead

00:13:41,040 --> 00:13:45,199
of all the protocols to send a message i

00:13:43,360 --> 00:13:46,240
think the the overhead in addition to

00:13:45,199 --> 00:13:49,440
the body

00:13:46,240 --> 00:13:50,079
on mqtt i think it's like a three two or

00:13:49,440 --> 00:13:51,839
three byte

00:13:50,079 --> 00:13:53,199
overhead on every message it's like

00:13:51,839 --> 00:13:54,560
ridiculously low

00:13:53,199 --> 00:13:57,920
while every other protocol like

00:13:54,560 --> 00:14:01,040
including stop or open wire or even amqp

00:13:57,920 --> 00:14:03,120
adds a ton of headers and ton of

00:14:01,040 --> 00:14:05,040
framing information and qtt keeps it

00:14:03,120 --> 00:14:05,839
super low so it's basically for low

00:14:05,040 --> 00:14:09,199
bandwidth

00:14:05,839 --> 00:14:11,600
networks right or in cases like

00:14:09,199 --> 00:14:13,199
for example i know that i think facebook

00:14:11,600 --> 00:14:15,199
adopted it for their

00:14:13,199 --> 00:14:17,120
mobile platforms it's just because they

00:14:15,199 --> 00:14:19,120
have so many of the connections

00:14:17,120 --> 00:14:20,560
uh even though they're on high bandwidth

00:14:19,120 --> 00:14:22,000
networks they've got so many of them

00:14:20,560 --> 00:14:25,920
once you add it all together starts

00:14:22,000 --> 00:14:27,760
adding up so mktt is good for that

00:14:25,920 --> 00:14:29,199
and we've implemented it's pretty simple

00:14:27,760 --> 00:14:32,000
protocol to implement

00:14:29,199 --> 00:14:34,079
and uh the folks who uh who've had

00:14:32,000 --> 00:14:36,079
support for it are westview mq

00:14:34,079 --> 00:14:40,079
mosquito i think raven and cube have

00:14:36,079 --> 00:14:40,079
recently had support for it

00:14:43,760 --> 00:14:48,079
and of course if you guys made any of

00:14:45,839 --> 00:14:51,519
the earlier nqp sessions

00:14:48,079 --> 00:14:54,399
we've added aqp10 support uh thanks to

00:14:51,519 --> 00:14:54,880
a little library and the cupid project

00:14:54,399 --> 00:14:58,399
called

00:14:54,880 --> 00:15:00,480
proton that's a project of cupid

00:14:58,399 --> 00:15:02,399
uh it's a library that makes it super

00:15:00,480 --> 00:15:06,639
simple to implement

00:15:02,399 --> 00:15:08,399
inqp10 support as a broker as a client

00:15:06,639 --> 00:15:10,240
handles all the binary encoding and

00:15:08,399 --> 00:15:13,120
decoding and all the

00:15:10,240 --> 00:15:14,000
protocol state management for you so

00:15:13,120 --> 00:15:16,480
it's uh

00:15:14,000 --> 00:15:17,680
it's kind of like a very efficient

00:15:16,480 --> 00:15:20,399
binary protocol

00:15:17,680 --> 00:15:22,240
it supports cues topics transactions so

00:15:20,399 --> 00:15:24,560
it basically does everything that

00:15:22,240 --> 00:15:27,040
a traditional messaging mom needs so

00:15:24,560 --> 00:15:29,680
it's not limited in the way the mqtt is

00:15:27,040 --> 00:15:31,759
it's more tightly encoded on the wire

00:15:29,680 --> 00:15:34,800
more titling coded than stop is

00:15:31,759 --> 00:15:36,800
uh but uh if you ever look at

00:15:34,800 --> 00:15:38,720
the only downside to nkp is if you look

00:15:36,800 --> 00:15:40,079
at the protocol traces of it

00:15:38,720 --> 00:15:41,600
you might not be able to understand

00:15:40,079 --> 00:15:42,480
what's going on so that's the only

00:15:41,600 --> 00:15:45,519
downside to it

00:15:42,480 --> 00:15:46,079
you'd really have to be uh have read the

00:15:45,519 --> 00:15:49,920
nqp

00:15:46,079 --> 00:15:52,399
spec to really understand it well

00:15:49,920 --> 00:15:54,800
uh let's see oh yeah and our app

00:15:52,399 --> 00:15:57,440
interoperates with active q5

00:15:54,800 --> 00:15:59,279
that's also had amqp10 support added

00:15:57,440 --> 00:16:03,839
since version 5.8

00:15:59,279 --> 00:16:03,839
uh qbit of course and swift mq

00:16:04,880 --> 00:16:08,079
okay the last protocol i want to tell

00:16:07,040 --> 00:16:11,839
you guys we support

00:16:08,079 --> 00:16:13,440
is open wire this is big e4 for apollo

00:16:11,839 --> 00:16:15,600
if we ever want to become the

00:16:13,440 --> 00:16:17,120
replacement for active q5

00:16:15,600 --> 00:16:18,800
uh because that's the protocol it

00:16:17,120 --> 00:16:23,360
natively talks it's uh

00:16:18,800 --> 00:16:25,839
jms clients implement open wire

00:16:23,360 --> 00:16:26,959
and also we have implementations of

00:16:25,839 --> 00:16:30,480
openwire

00:16:26,959 --> 00:16:32,959
and net and c plus plus so lots of the

00:16:30,480 --> 00:16:34,720
users at mq use openwire when they're

00:16:32,959 --> 00:16:36,480
talking activeq

00:16:34,720 --> 00:16:38,000
the only one part of openwire we haven't

00:16:36,480 --> 00:16:40,240
implemented apollo

00:16:38,000 --> 00:16:41,680
is xa support but we have support for

00:16:40,240 --> 00:16:42,560
just about everything else including

00:16:41,680 --> 00:16:45,600
things like

00:16:42,560 --> 00:16:47,680
message groups uh exclusive consumers

00:16:45,600 --> 00:16:51,839
like just all the other details so

00:16:47,680 --> 00:16:51,839
apollo's got it all in the bag

00:16:52,720 --> 00:16:58,399
okay so message stores

00:16:56,160 --> 00:17:00,480
so there's an important part of every

00:16:58,399 --> 00:17:02,079
broker reliable messaging broker

00:17:00,480 --> 00:17:04,319
is that needs to be able to persistently

00:17:02,079 --> 00:17:05,919
store the messages receives

00:17:04,319 --> 00:17:08,160
so that in case if there's a power

00:17:05,919 --> 00:17:11,199
outage or for whatever reasons

00:17:08,160 --> 00:17:13,039
it gets killed uh it needs to be able to

00:17:11,199 --> 00:17:14,559
restart recover and reload all those

00:17:13,039 --> 00:17:16,240
messages that had not been delivered

00:17:14,559 --> 00:17:18,000
that had received but had not delivered

00:17:16,240 --> 00:17:20,319
to its consumers right

00:17:18,000 --> 00:17:23,039
so there's basically two options that we

00:17:20,319 --> 00:17:24,720
have in apollo it's pluggable

00:17:23,039 --> 00:17:26,720
we could probably add more in the future

00:17:24,720 --> 00:17:29,120
like for example activemq

00:17:26,720 --> 00:17:30,880
has many many more it has like four

00:17:29,120 --> 00:17:32,880
options that it ships with

00:17:30,880 --> 00:17:34,720
one of them is to talk to like a jwc

00:17:32,880 --> 00:17:36,559
database to store state

00:17:34,720 --> 00:17:37,760
options in and we may add things like

00:17:36,559 --> 00:17:41,120
that in the future

00:17:37,760 --> 00:17:44,240
but the ones that we do have included

00:17:41,120 --> 00:17:45,280
is uh one that's uh level db based and

00:17:44,240 --> 00:17:49,280
once that's

00:17:45,280 --> 00:17:52,480
based and another difference here

00:17:49,280 --> 00:17:54,080
from activemq is we use these message

00:17:52,480 --> 00:17:54,880
stores not only to store the persistent

00:17:54,080 --> 00:17:56,480
messages

00:17:54,880 --> 00:17:58,000
but we'll use it to store the upper

00:17:56,480 --> 00:18:00,880
system messages

00:17:58,000 --> 00:18:02,320
in active non persistent messages would

00:18:00,880 --> 00:18:04,640
actually be stored

00:18:02,320 --> 00:18:07,600
uh slightly different from regular

00:18:04,640 --> 00:18:07,600
persistent messages

00:18:09,679 --> 00:18:14,240
okay so the leveldb store implementation

00:18:12,320 --> 00:18:16,080
is very similar to

00:18:14,240 --> 00:18:18,400
the store implementations we've done in

00:18:16,080 --> 00:18:19,600
activeq before they use a journal plus

00:18:18,400 --> 00:18:21,200
index approach

00:18:19,600 --> 00:18:22,799
the indexes are being implemented on top

00:18:21,200 --> 00:18:25,760
of level db

00:18:22,799 --> 00:18:27,200
in activemq our implementations you

00:18:25,760 --> 00:18:28,000
tended to use indexes that were

00:18:27,200 --> 00:18:30,960
implemented using

00:18:28,000 --> 00:18:32,480
b trees but we found out that level dba

00:18:30,960 --> 00:18:33,440
indexes actually work much better for

00:18:32,480 --> 00:18:36,720
messaging because

00:18:33,440 --> 00:18:38,960
we tend to insert uh

00:18:36,720 --> 00:18:40,880
into the indexes in an incrementing

00:18:38,960 --> 00:18:41,440
fashion it's not like random write into

00:18:40,880 --> 00:18:43,520
the index

00:18:41,440 --> 00:18:45,600
we tend to insert into the end of the

00:18:43,520 --> 00:18:48,720
index almost all the time since we have

00:18:45,600 --> 00:18:51,280
incrementing uh message numbers

00:18:48,720 --> 00:18:53,280
and uh we also tend to read them in a

00:18:51,280 --> 00:18:54,160
sequential fashion too we don't tend to

00:18:53,280 --> 00:18:56,000
do random

00:18:54,160 --> 00:18:57,360
lookups through through uh through the

00:18:56,000 --> 00:18:59,280
index and those

00:18:57,360 --> 00:19:01,200
uh usage patterns actually work really

00:18:59,280 --> 00:19:03,760
well with level db

00:19:01,200 --> 00:19:04,720
um since level db is a cell base it's a

00:19:03,760 --> 00:19:06,080
pure asl

00:19:04,720 --> 00:19:07,919
option that's why it's the default

00:19:06,080 --> 00:19:10,960
implementation

00:19:07,919 --> 00:19:12,720
that we ship with with uh apollo

00:19:10,960 --> 00:19:14,960
we set up an apollo broker buddy it's

00:19:12,720 --> 00:19:16,960
going to use the level db store

00:19:14,960 --> 00:19:19,840
the default implementation we ship with

00:19:16,960 --> 00:19:23,520
uses a jni binding to the

00:19:19,840 --> 00:19:27,120
level db c code that was created by

00:19:23,520 --> 00:19:29,679
google right level db indexes or

00:19:27,120 --> 00:19:30,240
it's a google project they open sourced

00:19:29,679 --> 00:19:32,640
um

00:19:30,240 --> 00:19:34,559
so since it's a jnri option it's not

00:19:32,640 --> 00:19:37,200
super cross-platform it's only

00:19:34,559 --> 00:19:38,880
we only we have pre-compiled and shipped

00:19:37,200 --> 00:19:42,000
with the pre-compiled binaries for

00:19:38,880 --> 00:19:42,960
os x linux and windows on 32 bit of

00:19:42,000 --> 00:19:44,400
64-bit

00:19:42,960 --> 00:19:46,400
but if you're if you're not using that

00:19:44,400 --> 00:19:48,320
you might be out of luck you uh but we

00:19:46,400 --> 00:19:50,240
also have include

00:19:48,320 --> 00:19:52,160
uh pure java implementation that we

00:19:50,240 --> 00:19:55,360
automatically switch to if the

00:19:52,160 --> 00:19:56,640
jni one's not used the only downside to

00:19:55,360 --> 00:19:59,120
this

00:19:56,640 --> 00:19:59,760
is this pure java one it's not tested as

00:19:59,120 --> 00:20:03,600
much

00:19:59,760 --> 00:20:06,000
so your your mileage may vary

00:20:03,600 --> 00:20:07,919
which is why we still have support for

00:20:06,000 --> 00:20:08,720
the bdb store implementation this was

00:20:07,919 --> 00:20:12,240
the first

00:20:08,720 --> 00:20:14,559
store implementation we did for apollo

00:20:12,240 --> 00:20:15,919
the downside to it it's nice asl based

00:20:14,559 --> 00:20:19,760
right you have to go

00:20:15,919 --> 00:20:22,559
and download the bdb library jar

00:20:19,760 --> 00:20:24,080
from oracle and add it to your to your

00:20:22,559 --> 00:20:26,080
apollo installation

00:20:24,080 --> 00:20:28,080
um the nice thing about this it's it's

00:20:26,080 --> 00:20:30,320
pure java so it's going to run on any

00:20:28,080 --> 00:20:33,360
platform aix hilarious whatever

00:20:30,320 --> 00:20:35,600
something weird like that uh and uh but

00:20:33,360 --> 00:20:39,760
but it's also very robust so that's uh

00:20:35,600 --> 00:20:39,760
you know bdb has been battle tested

00:20:44,640 --> 00:20:48,880
all right so i kind of been diving a

00:20:47,520 --> 00:20:49,679
little bit into what makes apollo

00:20:48,880 --> 00:20:51,600
different but now i'm

00:20:49,679 --> 00:20:53,200
really going to look into some of the

00:20:51,600 --> 00:20:54,880
things that make apollo really different

00:20:53,200 --> 00:20:56,960
from maximum q

00:20:54,880 --> 00:20:58,880
and i'm going to start diving in a bit

00:20:56,960 --> 00:21:00,400
deeper

00:20:58,880 --> 00:21:02,000
um but you know the devil's in the

00:21:00,400 --> 00:21:03,120
details and all this stuff you know in

00:21:02,000 --> 00:21:05,600
the end of the day

00:21:03,120 --> 00:21:07,840
apollo pretty much to an end user it's

00:21:05,600 --> 00:21:09,919
going to do the same thing that activeq

00:21:07,840 --> 00:21:11,440
but the question is why why is it doing

00:21:09,919 --> 00:21:15,039
it better why is it

00:21:11,440 --> 00:21:16,240
more efficient you know and here's where

00:21:15,039 --> 00:21:19,360
i'm going to kind of

00:21:16,240 --> 00:21:22,880
try to dive into the why okay

00:21:19,360 --> 00:21:25,039
so number one active mq

00:21:22,880 --> 00:21:26,640
uh traditional active queue it you know

00:21:25,039 --> 00:21:28,320
was started many years ago before there

00:21:26,640 --> 00:21:31,200
was even an io right

00:21:28,320 --> 00:21:32,640
so it uh had a everything was blocking

00:21:31,200 --> 00:21:34,240
based apis

00:21:32,640 --> 00:21:36,000
threads go block everywhere so once you

00:21:34,240 --> 00:21:37,760
guys start running a system with

00:21:36,000 --> 00:21:39,600
you know thousands of threads on it i

00:21:37,760 --> 00:21:40,720
mean thousands of connections against it

00:21:39,600 --> 00:21:42,799
and thousands of

00:21:40,720 --> 00:21:44,080
of destinations you're gonna if you

00:21:42,799 --> 00:21:45,679
start monitoring that system you'll

00:21:44,080 --> 00:21:48,000
notice that you know it's got thousands

00:21:45,679 --> 00:21:51,679
and thousands of threads running in it

00:21:48,000 --> 00:21:52,799
and um i don't know for most folks once

00:21:51,679 --> 00:21:54,320
you get a jvm

00:21:52,799 --> 00:21:56,320
that's got thousands and thousands of

00:21:54,320 --> 00:21:56,720
threads running on it you'll notice it's

00:21:56,320 --> 00:21:59,760
uh

00:21:56,720 --> 00:22:02,799
it's tricky to tune that jbm

00:21:59,760 --> 00:22:02,799
to perform nicely

00:22:03,120 --> 00:22:07,679
so in apollo we basically started

00:22:05,840 --> 00:22:10,080
thinking okay let's try to handle this

00:22:07,679 --> 00:22:13,600
let's try to use an io

00:22:10,080 --> 00:22:15,840
and let's go with uh

00:22:13,600 --> 00:22:17,200
a basically a multi-threaded reactor

00:22:15,840 --> 00:22:19,120
model right

00:22:17,200 --> 00:22:20,960
so you can think of this as being for

00:22:19,120 --> 00:22:21,280
for you node.js guys you can think of

00:22:20,960 --> 00:22:24,400
this

00:22:21,280 --> 00:22:27,039
as being a nodejs

00:22:24,400 --> 00:22:28,159
event thread per core running in a

00:22:27,039 --> 00:22:30,320
single process

00:22:28,159 --> 00:22:31,440
whereas the node.js event threads are

00:22:30,320 --> 00:22:32,640
usually single threaded

00:22:31,440 --> 00:22:34,720
there's only one here we're going to

00:22:32,640 --> 00:22:36,080
have run one per core and a single

00:22:34,720 --> 00:22:37,679
process

00:22:36,080 --> 00:22:39,200
and they can kind of sort of talk to

00:22:37,679 --> 00:22:39,679
each other a little bit each each

00:22:39,200 --> 00:22:42,240
quarter

00:22:39,679 --> 00:22:42,720
you know we added some of this in there

00:22:42,240 --> 00:22:44,799
all right

00:22:42,720 --> 00:22:46,159
another way to think about it is uh

00:22:44,799 --> 00:22:46,799
we're going to use a fixed size thread

00:22:46,159 --> 00:22:50,000
pool

00:22:46,799 --> 00:22:51,679
right uh that you know that's an

00:22:50,000 --> 00:22:53,679
executor

00:22:51,679 --> 00:22:55,200
but the difference is that instead of it

00:22:53,679 --> 00:22:58,240
just once it

00:22:55,200 --> 00:23:00,799
idles out instead of it just going in

00:22:58,240 --> 00:23:01,360
blocking wait on on a queue waiting for

00:23:00,799 --> 00:23:04,000
work

00:23:01,360 --> 00:23:04,960
it's going to go and go into an i o

00:23:04,000 --> 00:23:07,440
event loop

00:23:04,960 --> 00:23:08,480
waiting on a selector waiting for i o

00:23:07,440 --> 00:23:11,120
input

00:23:08,480 --> 00:23:12,320
okay so that's what this hot dispatch

00:23:11,120 --> 00:23:13,280
library that i'm going to talk to you

00:23:12,320 --> 00:23:15,760
about a little bit

00:23:13,280 --> 00:23:17,840
that's basically the core foundation of

00:23:15,760 --> 00:23:17,840
it

00:23:19,120 --> 00:23:22,240
one of the central concepts in hot

00:23:20,840 --> 00:23:23,840
dispatch

00:23:22,240 --> 00:23:25,360
is something called the dispatch queue

00:23:23,840 --> 00:23:26,880
and there's two variations

00:23:25,360 --> 00:23:28,080
there's one called the global dispatch

00:23:26,880 --> 00:23:29,600
queue and there's only one of these

00:23:28,080 --> 00:23:32,240
things per system

00:23:29,600 --> 00:23:32,960
and when you enqueue runnables into it

00:23:32,240 --> 00:23:35,039
they basically

00:23:32,960 --> 00:23:36,880
execute concurrently so you can think of

00:23:35,039 --> 00:23:40,240
this as your traditional

00:23:36,880 --> 00:23:42,480
uh thread pool executor

00:23:40,240 --> 00:23:42,480
okay

00:23:44,080 --> 00:23:47,360
then the other type of dispatch queue is

00:23:45,919 --> 00:23:48,880
a serial dispatch key and this one's a

00:23:47,360 --> 00:23:52,240
little more special

00:23:48,880 --> 00:23:55,679
and you can think of it as a

00:23:52,240 --> 00:23:57,919
a linked list where you and cue

00:23:55,679 --> 00:23:58,960
runnables into and when you first uh

00:23:57,919 --> 00:24:00,960
when it first has

00:23:58,960 --> 00:24:02,799
some runnable in it it's going to encue

00:24:00,960 --> 00:24:03,760
the this serial dispatch is going to eq

00:24:02,799 --> 00:24:06,080
itself

00:24:03,760 --> 00:24:09,039
into one of the into the global queue

00:24:06,080 --> 00:24:10,640
for so it gets scheduled to be drained

00:24:09,039 --> 00:24:13,120
on one of the threads of that thread

00:24:10,640 --> 00:24:15,120
pool okay

00:24:13,120 --> 00:24:16,159
so the nice thing about this system is

00:24:15,120 --> 00:24:18,320
that everything

00:24:16,159 --> 00:24:19,200
uses compare and swapper operations so

00:24:18,320 --> 00:24:22,880
you get

00:24:19,200 --> 00:24:24,320
nice uh weight free non-blocking

00:24:22,880 --> 00:24:27,520
operations everywhere

00:24:24,320 --> 00:24:29,520
uh it's got less

00:24:27,520 --> 00:24:30,960
overhead than for example if you got a

00:24:29,520 --> 00:24:33,440
highly contended object

00:24:30,960 --> 00:24:35,120
that's using uh traditional mutexes if

00:24:33,440 --> 00:24:38,159
you're trying to

00:24:35,120 --> 00:24:39,840
access it and it's highly intended using

00:24:38,159 --> 00:24:41,760
cast operations it's going to lower your

00:24:39,840 --> 00:24:44,559
overhead a little bit

00:24:41,760 --> 00:24:46,240
so generally we're going to use these

00:24:44,559 --> 00:24:49,360
serial dispatch queues

00:24:46,240 --> 00:24:53,120
everywhere inside the

00:24:49,360 --> 00:24:55,520
apollo broker in this little diagram

00:24:53,120 --> 00:24:56,480
you kind of see a little bit a little

00:24:55,520 --> 00:24:59,440
view of

00:24:56,480 --> 00:25:01,039
all the parts of the broker right we got

00:24:59,440 --> 00:25:02,960
clients and sockets

00:25:01,039 --> 00:25:05,200
and for each one of these little yellow

00:25:02,960 --> 00:25:08,159
boxes it's going to have an assigned

00:25:05,200 --> 00:25:09,279
dispatch queue okay a serial dispatch

00:25:08,159 --> 00:25:11,039
queue

00:25:09,279 --> 00:25:12,880
and whenever we want to mutate the state

00:25:11,039 --> 00:25:15,600
of any of those objects

00:25:12,880 --> 00:25:16,240
we're basically going to enqueue a

00:25:15,600 --> 00:25:18,000
runnable

00:25:16,240 --> 00:25:19,760
to mutate the state onto that serial

00:25:18,000 --> 00:25:20,320
dispatch queue associated with that

00:25:19,760 --> 00:25:22,799
object

00:25:20,320 --> 00:25:24,320
so we'll have one for for connections

00:25:22,799 --> 00:25:26,159
and we'll have one for cues and we'll

00:25:24,320 --> 00:25:28,000
have one for the virtual hosts that

00:25:26,159 --> 00:25:29,200
are running inside of apollo so whenever

00:25:28,000 --> 00:25:30,720
we want to modify it

00:25:29,200 --> 00:25:32,320
we won't modify it directly we'll say

00:25:30,720 --> 00:25:34,320
hey run this task

00:25:32,320 --> 00:25:36,559
it's going to modify your state but it's

00:25:34,320 --> 00:25:38,640
going to modify it when it's running

00:25:36,559 --> 00:25:42,799
in the context of that dispatch key when

00:25:38,640 --> 00:25:46,480
it's being executed

00:25:42,799 --> 00:25:49,520
so by doing that

00:25:46,480 --> 00:25:53,520
um we basically remove

00:25:49,520 --> 00:25:56,640
all traditional uh

00:25:53,520 --> 00:25:58,159
threads uh like in an active q5

00:25:56,640 --> 00:25:59,919
whenever we have share state we're going

00:25:58,159 --> 00:26:01,039
to use the traditional mutex

00:25:59,919 --> 00:26:02,320
we're going to lock it if there's

00:26:01,039 --> 00:26:03,440
contextion there's going to be threads

00:26:02,320 --> 00:26:04,240
that are going to be waiting and stuff

00:26:03,440 --> 00:26:06,400
like that

00:26:04,240 --> 00:26:08,720
in apollo there's very little waiting

00:26:06,400 --> 00:26:11,200
that's going on when a threat is going

00:26:08,720 --> 00:26:13,039
it's everything it's those the threads

00:26:11,200 --> 00:26:15,200
that it does execute tends to

00:26:13,039 --> 00:26:17,120
execute without ever blocking because

00:26:15,200 --> 00:26:18,640
they'll just enqueue work

00:26:17,120 --> 00:26:20,960
on the serial dispatch queue some other

00:26:18,640 --> 00:26:22,480
thing and eventually when they pop out

00:26:20,960 --> 00:26:24,640
they'll execute those things and all

00:26:22,480 --> 00:26:28,720
those cues will get drained

00:26:24,640 --> 00:26:31,360
so in general it lowers the overhead

00:26:28,720 --> 00:26:31,840
of synchronizing on these objects and on

00:26:31,360 --> 00:26:34,480
this

00:26:31,840 --> 00:26:36,240
thread it's just kind of an example i

00:26:34,480 --> 00:26:38,559
think it's been working out

00:26:36,240 --> 00:26:40,480
there's some benchmarks that i like to

00:26:38,559 --> 00:26:42,000
run against different brokers just

00:26:40,480 --> 00:26:43,919
to compare to see how we're doing and

00:26:42,000 --> 00:26:46,240
apollo's performance

00:26:43,919 --> 00:26:47,919
this is basically i'm using stomp to

00:26:46,240 --> 00:26:51,200
talk to

00:26:47,919 --> 00:26:52,640
a topic right there's one producer on

00:26:51,200 --> 00:26:54,240
the first column i'm looking at

00:26:52,640 --> 00:26:56,720
okay when there's one producer talking

00:26:54,240 --> 00:26:59,279
one topic to one consumer

00:26:56,720 --> 00:27:00,960
right and that's the consumer rate that

00:26:59,279 --> 00:27:02,960
the different brokers give

00:27:00,960 --> 00:27:04,080
the live blue one is apollo of course

00:27:02,960 --> 00:27:07,360
the the

00:27:04,080 --> 00:27:09,120
yellow one is active q5 and pretty much

00:27:07,360 --> 00:27:11,679
the rates are very comparable

00:27:09,120 --> 00:27:12,640
uh when there's only one thing talking

00:27:11,679 --> 00:27:14,720
to one thing

00:27:12,640 --> 00:27:16,320
but to start is you start ratcheting up

00:27:14,720 --> 00:27:17,840
the the contention

00:27:16,320 --> 00:27:19,520
right we're going to keep we're only

00:27:17,840 --> 00:27:20,640
going to use one topic

00:27:19,520 --> 00:27:22,640
we're going to increase the number of

00:27:20,640 --> 00:27:23,760
producers and the number of consumers

00:27:22,640 --> 00:27:27,039
attached to this one

00:27:23,760 --> 00:27:27,840
topic apollo starts to inch out a little

00:27:27,039 --> 00:27:30,799
bit more

00:27:27,840 --> 00:27:32,320
and she really rushes out up to like 10

00:27:30,799 --> 00:27:35,120
producers talking to

00:27:32,320 --> 00:27:37,039
10 consumers every single topic a pile

00:27:35,120 --> 00:27:39,520
really starts to shine is showing that

00:27:37,039 --> 00:27:43,600
you know it has lower contention than

00:27:39,520 --> 00:27:43,600
for example the traditional activity

00:27:46,840 --> 00:27:49,840
model

00:27:51,600 --> 00:27:57,200
so another nice benefit of this new

00:27:54,799 --> 00:28:00,240
threading model that we put into apollo

00:27:57,200 --> 00:28:03,360
is that it has lower memory overhead

00:28:00,240 --> 00:28:05,200
so here are some heap dumps that i

00:28:03,360 --> 00:28:06,960
monitored with your kids

00:28:05,200 --> 00:28:09,279
thank you your kid they're awesome they

00:28:06,960 --> 00:28:10,399
get some open source licenses to apache

00:28:09,279 --> 00:28:12,720
projects

00:28:10,399 --> 00:28:13,840
um here's a thousand producer

00:28:12,720 --> 00:28:16,799
connections

00:28:13,840 --> 00:28:18,960
uh 5 000 consumer connections and a

00:28:16,799 --> 00:28:22,399
thousand topics that are being used

00:28:18,960 --> 00:28:24,399
uh while i'm taking this profile

00:28:22,399 --> 00:28:26,159
and as you can see there's uh basically

00:28:24,399 --> 00:28:29,360
the memory usage on the jvm

00:28:26,159 --> 00:28:30,880
jumps up till bob uh almost 400

00:28:29,360 --> 00:28:33,039
megabytes

00:28:30,880 --> 00:28:34,799
which is very low and that's because

00:28:33,039 --> 00:28:36,640
we're not assigning a thread per

00:28:34,799 --> 00:28:38,320
connection or any of that stuff or

00:28:36,640 --> 00:28:43,360
threat procrastination

00:28:38,320 --> 00:28:47,200
as sometimes occurs in in active q5

00:28:43,360 --> 00:28:49,440
so it's easy to kind of scale up the

00:28:47,200 --> 00:28:50,320
and tune the jvms for apollo a little

00:28:49,440 --> 00:28:53,520
easier than

00:28:50,320 --> 00:28:53,520
for example activemq

00:28:53,840 --> 00:28:58,799
all right so a little secret is that

00:28:56,799 --> 00:29:02,240
apollo even though item queues ran

00:28:58,799 --> 00:29:05,520
in java a lot of apollo

00:29:02,240 --> 00:29:07,279
was written in scala and even though

00:29:05,520 --> 00:29:09,520
it's a mixed project we still use

00:29:07,279 --> 00:29:12,399
java for some modules there's lots of

00:29:09,520 --> 00:29:15,200
modules that do use scala

00:29:12,399 --> 00:29:17,120
and the main reason is because scala is

00:29:15,200 --> 00:29:20,320
a lot more cherished especially for

00:29:17,120 --> 00:29:23,520
creating things like look like closures

00:29:20,320 --> 00:29:25,600
for example in i told you guys that

00:29:23,520 --> 00:29:27,200
we use a lot of dispatch cues inside of

00:29:25,600 --> 00:29:29,520
apollo right

00:29:27,200 --> 00:29:30,960
and whenever you using one of these

00:29:29,520 --> 00:29:31,600
dispatch shoes you've got a passive

00:29:30,960 --> 00:29:34,159
runnable

00:29:31,600 --> 00:29:35,760
of some work it needs to do in the

00:29:34,159 --> 00:29:37,520
context of that cue

00:29:35,760 --> 00:29:40,000
and that first example kind of gives you

00:29:37,520 --> 00:29:42,640
an idea of what it is you do you create

00:29:40,000 --> 00:29:43,840
a new runnable uh you know inner class

00:29:42,640 --> 00:29:46,880
air

00:29:43,840 --> 00:29:48,720
to do something but with scala you can

00:29:46,880 --> 00:29:51,760
kind of reduce it down to just

00:29:48,720 --> 00:29:53,200
three lines and it's just kind of easier

00:29:51,760 --> 00:29:55,279
to use

00:29:53,200 --> 00:29:57,200
so that's mainly the reason why we scala

00:29:55,279 --> 00:29:59,760
hopefully would once java aids out

00:29:57,200 --> 00:30:01,120
we'll be able to get to that conciseness

00:29:59,760 --> 00:30:02,799
and maybe we'll start pouring some of

00:30:01,120 --> 00:30:05,279
the java bits over

00:30:02,799 --> 00:30:06,000
some of the scala bits over to java 8

00:30:05,279 --> 00:30:08,399
but

00:30:06,000 --> 00:30:10,000
since know job aid is still a long way

00:30:08,399 --> 00:30:10,799
away so we still want to support java

00:30:10,000 --> 00:30:14,799
106.

00:30:10,799 --> 00:30:14,799
scott's the best thing right now

00:30:16,559 --> 00:30:18,880
okay

00:30:21,039 --> 00:30:27,360
okay so another reason why i think

00:30:24,320 --> 00:30:30,880
apollo uh performs better than

00:30:27,360 --> 00:30:32,799
actual q5 is because it has a per

00:30:30,880 --> 00:30:34,559
consumer store prefetch

00:30:32,799 --> 00:30:36,159
so let's say we have a queue with

00:30:34,559 --> 00:30:38,240
millions of entries in it right

00:30:36,159 --> 00:30:39,520
you've just pre-loaded it with tons of

00:30:38,240 --> 00:30:41,120
messages and you didn't have any

00:30:39,520 --> 00:30:43,679
consumers attached to it

00:30:41,120 --> 00:30:45,360
naturally apollo like active queue will

00:30:43,679 --> 00:30:45,840
do its thing and it'll swap out all

00:30:45,360 --> 00:30:48,159
those

00:30:45,840 --> 00:30:49,600
message items to disk because there's no

00:30:48,159 --> 00:30:51,120
point in having in memory

00:30:49,600 --> 00:30:52,640
there's nobody to deliver those messages

00:30:51,120 --> 00:30:55,039
to right

00:30:52,640 --> 00:30:56,080
apollo does the same thing the

00:30:55,039 --> 00:30:59,679
difference is that

00:30:56,080 --> 00:31:00,559
actum q5 has a single cursor that it

00:30:59,679 --> 00:31:03,279
uses

00:31:00,559 --> 00:31:04,480
to fetch messages out of the store and

00:31:03,279 --> 00:31:07,360
pass it over

00:31:04,480 --> 00:31:10,799
to consumers who are interested in it

00:31:07,360 --> 00:31:13,919
apollo basically maintains a

00:31:10,799 --> 00:31:17,120
a cursor or prefetch window per consumer

00:31:13,919 --> 00:31:17,600
so it kind of looks like this sorry for

00:31:17,120 --> 00:31:20,720
the

00:31:17,600 --> 00:31:22,080
all the arrows but the idea is that each

00:31:20,720 --> 00:31:22,720
consumer is going to be looking at

00:31:22,080 --> 00:31:24,640
different

00:31:22,720 --> 00:31:25,840
part of the queue right not all of it

00:31:24,640 --> 00:31:27,760
just a few of them

00:31:25,840 --> 00:31:30,159
and he's only going to prefetch enough

00:31:27,760 --> 00:31:33,039
messages to fulfill what he expects

00:31:30,159 --> 00:31:34,640
that consumers going gonna need for him

00:31:33,039 --> 00:31:37,519
to deliver those messages some

00:31:34,640 --> 00:31:38,000
to him soon right so when that happens

00:31:37,519 --> 00:31:40,240
and

00:31:38,000 --> 00:31:41,919
you can imagine the big red dots or

00:31:40,240 --> 00:31:44,960
messages that are in memory

00:31:41,919 --> 00:31:48,080
and then there's uh other entries

00:31:44,960 --> 00:31:50,960
uh that are on disk right

00:31:48,080 --> 00:31:52,640
he's gonna say oh you're gonna need that

00:31:50,960 --> 00:31:53,919
message soon because it's within your

00:31:52,640 --> 00:31:55,919
prefetch window

00:31:53,919 --> 00:31:57,919
so i'm gonna ask the message store to

00:31:55,919 --> 00:32:00,240
load it and so i

00:31:57,919 --> 00:32:01,519
asked him hey hey please you know load

00:32:00,240 --> 00:32:02,640
this back up i need it in the cube

00:32:01,519 --> 00:32:05,279
pretty soon

00:32:02,640 --> 00:32:07,200
uh we'll send the the messages memory

00:32:05,279 --> 00:32:09,840
over to the consumer

00:32:07,200 --> 00:32:11,279
and hopefully by the time the consumer

00:32:09,840 --> 00:32:12,399
has gotten to the point where he needs

00:32:11,279 --> 00:32:14,880
the message that was

00:32:12,399 --> 00:32:15,600
previously on disk it'll be in memory by

00:32:14,880 --> 00:32:20,000
that time

00:32:15,600 --> 00:32:23,679
and there's no delays so

00:32:20,000 --> 00:32:26,799
per consumer prefetches work really well

00:32:23,679 --> 00:32:30,240
the new level db store can actually

00:32:26,799 --> 00:32:34,320
load messages really quickly too and so

00:32:30,240 --> 00:32:35,919
in cases of where you have a queue

00:32:34,320 --> 00:32:36,399
loaded up with millions and millions of

00:32:35,919 --> 00:32:38,559
messages

00:32:36,399 --> 00:32:40,640
you had no consumers to attach to it and

00:32:38,559 --> 00:32:42,240
then you start up a consumer

00:32:40,640 --> 00:32:43,840
and starts trying to stream those

00:32:42,240 --> 00:32:45,120
messages as fast as possible

00:32:43,840 --> 00:32:47,120
these are performance graphs that you

00:32:45,120 --> 00:32:51,200
can expect um

00:32:47,120 --> 00:32:55,279
i think these were 20 byte messages

00:32:51,200 --> 00:32:56,720
payloads and apollo was able to consume

00:32:55,279 --> 00:32:59,919
messages at the rate of

00:32:56,720 --> 00:33:02,640
150 000 off of uh

00:32:59,919 --> 00:33:04,559
off that q whereas for example active q

00:33:02,640 --> 00:33:08,799
was probably doing

00:33:04,559 --> 00:33:10,960
20 000 so it's got way fast dq times for

00:33:08,799 --> 00:33:10,960
uh

00:33:15,039 --> 00:33:17,360
okay

00:33:18,240 --> 00:33:22,799
so another really cool thing that apollo

00:33:20,480 --> 00:33:26,399
does to really try to optimize

00:33:22,799 --> 00:33:29,679
especially the persistent cases um

00:33:26,399 --> 00:33:31,600
apollo knows that

00:33:29,679 --> 00:33:33,200
sometimes you have consumers who can act

00:33:31,600 --> 00:33:34,640
very fast okay

00:33:33,200 --> 00:33:36,399
and sometimes and if you've got a case

00:33:34,640 --> 00:33:38,720
where a consumer is acting very fast

00:33:36,399 --> 00:33:39,840
there's really no reason to try to

00:33:38,720 --> 00:33:42,480
persist the message

00:33:39,840 --> 00:33:44,080
that a producer sends you and i'm going

00:33:42,480 --> 00:33:46,240
to try to illustrate this with a couple

00:33:44,080 --> 00:33:48,480
of slides here on on why that's the case

00:33:46,240 --> 00:33:48,480
right

00:33:48,559 --> 00:33:52,480
so let's say we have a producer sending

00:33:50,080 --> 00:33:55,120
a message to a queue

00:33:52,480 --> 00:33:55,519
typically what happens is the message

00:33:55,120 --> 00:33:57,760
gets

00:33:55,519 --> 00:33:59,519
sent to the message store and he's going

00:33:57,760 --> 00:34:01,039
to tell him hey i need you to store this

00:33:59,519 --> 00:34:03,679
message right

00:34:01,039 --> 00:34:05,360
and then at the same time he's going to

00:34:03,679 --> 00:34:06,080
say hey i can send this to the consumer

00:34:05,360 --> 00:34:07,760
anyways

00:34:06,080 --> 00:34:10,240
right it's no big deal you know what i'm

00:34:07,760 --> 00:34:11,839
saying uh

00:34:10,240 --> 00:34:13,440
at this point the producer still hasn't

00:34:11,839 --> 00:34:14,399
gotten an act back so the producer

00:34:13,440 --> 00:34:17,679
doesn't know

00:34:14,399 --> 00:34:18,960
if the the mess the broker has actually

00:34:17,679 --> 00:34:20,480
received the message or not

00:34:18,960 --> 00:34:22,159
he's gonna assume he hasn't like for

00:34:20,480 --> 00:34:23,919
example if the broker dies or whatever

00:34:22,159 --> 00:34:25,440
he'll just redeliver the message no big

00:34:23,919 --> 00:34:29,440
deal right

00:34:25,440 --> 00:34:32,879
now oh yeah so

00:34:29,440 --> 00:34:34,639
if the queue thinks that um

00:34:32,879 --> 00:34:36,399
that consumer is kind of slow he's not

00:34:34,639 --> 00:34:39,679
going to act me very fast

00:34:36,399 --> 00:34:41,520
so the apollo's queues are tracking the

00:34:39,679 --> 00:34:43,280
act rates of all the consumers

00:34:41,520 --> 00:34:44,720
to try to figure out if they're fast

00:34:43,280 --> 00:34:46,560
consumers or not

00:34:44,720 --> 00:34:47,919
and if he sees he's kind of a slow

00:34:46,560 --> 00:34:49,359
consumer he's not going to act very fast

00:34:47,919 --> 00:34:51,679
he'll basically tell the message store

00:34:49,359 --> 00:34:54,079
hey flush this out to disk as soon as

00:34:51,679 --> 00:34:55,679
possible so that i can tell the producer

00:34:54,079 --> 00:34:57,200
as soon as possible that hey i got your

00:34:55,679 --> 00:34:57,760
message i'm not going to lose it so that

00:34:57,200 --> 00:34:59,200
all happened

00:34:57,760 --> 00:35:01,040
actually the message tool will actually

00:34:59,200 --> 00:35:02,240
flush that message out to disk

00:35:01,040 --> 00:35:03,839
and that basically is going to produce

00:35:02,240 --> 00:35:05,040
an act back to the producer and now the

00:35:03,839 --> 00:35:07,359
producer says oh cool

00:35:05,040 --> 00:35:10,400
now i can forget about this message i

00:35:07,359 --> 00:35:13,280
know you got it it's in your hands right

00:35:10,400 --> 00:35:15,359
eventually the consumer will act back to

00:35:13,280 --> 00:35:17,359
the queue that hey i got your message

00:35:15,359 --> 00:35:18,800
and that act will in turn turn into a

00:35:17,359 --> 00:35:20,400
remove operation against the message

00:35:18,800 --> 00:35:20,800
store to delete the operation off the

00:35:20,400 --> 00:35:22,960
disk

00:35:20,800 --> 00:35:24,640
i'll go straight to this remove the the

00:35:22,960 --> 00:35:26,880
message off disk

00:35:24,640 --> 00:35:28,560
and that's the general pattern that

00:35:26,880 --> 00:35:30,160
happens in active q5 that's

00:35:28,560 --> 00:35:32,079
pretty much the pattern that occurs

00:35:30,160 --> 00:35:35,119
almost every time

00:35:32,079 --> 00:35:37,680
okay but in the case where

00:35:35,119 --> 00:35:38,960
a consumer is acting really fast right

00:35:37,680 --> 00:35:40,880
he maybe he

00:35:38,960 --> 00:35:42,240
it's got a low latency operation of what

00:35:40,880 --> 00:35:42,880
he's doing he's just twiddling some bits

00:35:42,240 --> 00:35:46,240
of memory

00:35:42,880 --> 00:35:48,480
and then he acts right right away let's

00:35:46,240 --> 00:35:49,760
rewind it back a few slides we're here

00:35:48,480 --> 00:35:50,560
where we send the message to the

00:35:49,760 --> 00:35:52,400
consumer

00:35:50,560 --> 00:35:53,920
and we send it to the message store this

00:35:52,400 --> 00:35:56,400
time the key is going to say hey this

00:35:53,920 --> 00:35:58,160
consumer was really fast

00:35:56,400 --> 00:36:00,880
i'm not going to ask the message store

00:35:58,160 --> 00:36:02,640
to write that message to disk right away

00:36:00,880 --> 00:36:04,480
i'm actually gonna say hey you can delay

00:36:02,640 --> 00:36:06,079
storing that message for a little bit

00:36:04,480 --> 00:36:07,520
so he'll do that and the message store

00:36:06,079 --> 00:36:09,599
will kind of put the message

00:36:07,520 --> 00:36:11,040
to the side it's still a memory he's

00:36:09,599 --> 00:36:13,440
basically put on delay and it's like you

00:36:11,040 --> 00:36:14,240
know what if uh if i don't get a remove

00:36:13,440 --> 00:36:15,520
operation

00:36:14,240 --> 00:36:18,880
in a little bit i'm gonna flush it to

00:36:15,520 --> 00:36:20,800
disk right consumer sends an act back

00:36:18,880 --> 00:36:22,320
to the queue and that causes a remove

00:36:20,800 --> 00:36:23,599
operation gets sent to the store

00:36:22,320 --> 00:36:26,000
and the store just says hey i'm gonna

00:36:23,599 --> 00:36:27,520
delete this thing out of memory right we

00:36:26,000 --> 00:36:29,040
never touch the disc

00:36:27,520 --> 00:36:31,839
and of course when you're talking about

00:36:29,040 --> 00:36:33,200
really fast uh throughput systems

00:36:31,839 --> 00:36:34,640
a lot of times your disc is your

00:36:33,200 --> 00:36:36,079
bottleneck right because your networks

00:36:34,640 --> 00:36:37,680
are faster than the bandwidth that your

00:36:36,079 --> 00:36:42,400
disc doesn't support

00:36:37,680 --> 00:36:42,400
um in some scenarios

00:36:44,960 --> 00:36:48,800
and we kind of optimize that whole just

00:36:47,359 --> 00:36:50,400
persistence bit out

00:36:48,800 --> 00:36:52,560
at that point we'll send the act back to

00:36:50,400 --> 00:36:53,680
the producer so in this case what

00:36:52,560 --> 00:36:55,440
actually happened is

00:36:53,680 --> 00:36:57,280
the producer blocked an act from the

00:36:55,440 --> 00:36:59,839
consumer all the way instead of

00:36:57,280 --> 00:37:01,839
waiting for the ack that it got to disk

00:36:59,839 --> 00:37:04,240
so we basically take two paths

00:37:01,839 --> 00:37:05,839
depending on what the queue thinks the

00:37:04,240 --> 00:37:06,400
the act rates of the consumer so that's

00:37:05,839 --> 00:37:09,599
one of the

00:37:06,400 --> 00:37:11,920
cool things we do with apollo

00:37:09,599 --> 00:37:11,920
okay

00:37:12,800 --> 00:37:17,119
all right so another thing is that

00:37:15,280 --> 00:37:20,480
actomq has this concept called

00:37:17,119 --> 00:37:22,640
virtual destinations and it's kind of

00:37:20,480 --> 00:37:25,839
basically there to make up for

00:37:22,640 --> 00:37:27,359
some of the shortcomings of

00:37:25,839 --> 00:37:29,520
our implementation of the gems

00:37:27,359 --> 00:37:31,359
specification uh basically jms

00:37:29,520 --> 00:37:33,280
specification says there can only be one

00:37:31,359 --> 00:37:34,960
durable subscription one consumer on a

00:37:33,280 --> 00:37:37,040
durable subscription

00:37:34,960 --> 00:37:38,640
right so a durable subscription like

00:37:37,040 --> 00:37:41,440
utility is kind of like a cue

00:37:38,640 --> 00:37:42,560
they can attach to a topic but sometimes

00:37:41,440 --> 00:37:44,960
you kind of

00:37:42,560 --> 00:37:45,599
want to use that durable subscription

00:37:44,960 --> 00:37:47,839
like it is

00:37:45,599 --> 00:37:48,880
q right you want to attach multiple

00:37:47,839 --> 00:37:51,839
consumers on it

00:37:48,880 --> 00:37:51,839
and basically uh

00:37:52,560 --> 00:37:55,359
load balance the work that's on the

00:37:54,000 --> 00:37:56,160
queue across those consumers and

00:37:55,359 --> 00:38:00,000
consuming

00:37:56,160 --> 00:38:01,680
consuming concurrently but uh

00:38:00,000 --> 00:38:03,520
the gem aspect basically was running

00:38:01,680 --> 00:38:06,640
away where we implemented

00:38:03,520 --> 00:38:08,720
dribble subscriptions in activemq so

00:38:06,640 --> 00:38:10,880
that we only track

00:38:08,720 --> 00:38:13,040
uh the last act position for that

00:38:10,880 --> 00:38:15,040
dribble subscription so you can have a

00:38:13,040 --> 00:38:17,119
10 durable subscription on the topic and

00:38:15,040 --> 00:38:19,119
we don't really maintain a queue of work

00:38:17,119 --> 00:38:19,920
items for that durable subscription we

00:38:19,119 --> 00:38:22,000
just track

00:38:19,920 --> 00:38:23,359
the position of where we are in that

00:38:22,000 --> 00:38:25,599
topic that

00:38:23,359 --> 00:38:26,880
that durable subscription sacked up to

00:38:25,599 --> 00:38:28,240
so that's the way it's implemented

00:38:26,880 --> 00:38:30,320
active in q5

00:38:28,240 --> 00:38:31,920
but if you did want to use it in a way

00:38:30,320 --> 00:38:32,560
that's kind of low balancing we have

00:38:31,920 --> 00:38:35,119
this thing called

00:38:32,560 --> 00:38:36,640
virtual destinations where you're

00:38:35,119 --> 00:38:38,480
sending to a topic

00:38:36,640 --> 00:38:40,160
but the virtual destination will

00:38:38,480 --> 00:38:42,000
basically send a copy of that message

00:38:40,160 --> 00:38:44,320
that topic to a regular queue and then

00:38:42,000 --> 00:38:45,839
you're you can just use

00:38:44,320 --> 00:38:48,079
regular q subscribers to do the low

00:38:45,839 --> 00:38:49,839
balancing work type work right

00:38:48,079 --> 00:38:51,839
well when apollo can kind of forget

00:38:49,839 --> 00:38:52,880
about that because the way we implement

00:38:51,839 --> 00:38:55,200
durable subscriptions

00:38:52,880 --> 00:38:56,800
is we actually do use cues to implement

00:38:55,200 --> 00:38:59,119
your subscriptions

00:38:56,800 --> 00:39:01,119
and you can uh subscribe to a durable

00:38:59,119 --> 00:39:02,640
subscription with key semantics

00:39:01,119 --> 00:39:04,400
you can have multiple consumers against

00:39:02,640 --> 00:39:05,839
this durable subscription you can browse

00:39:04,400 --> 00:39:07,839
a durable subscription

00:39:05,839 --> 00:39:10,079
you can do all that kind of stuff and

00:39:07,839 --> 00:39:12,640
then the other thing is that

00:39:10,079 --> 00:39:14,960
you can set up a queue to mirror every

00:39:12,640 --> 00:39:16,800
message that comes into it to a topic

00:39:14,960 --> 00:39:18,079
of the same name and that's what we call

00:39:16,800 --> 00:39:20,800
the mirrored cue

00:39:18,079 --> 00:39:22,079
so if you configure a cue to be mirrored

00:39:20,800 --> 00:39:22,720
it's basically you know if it's called

00:39:22,079 --> 00:39:25,599
foo

00:39:22,720 --> 00:39:26,640
you know qfu it's gonna whenever

00:39:25,599 --> 00:39:28,480
receives a message

00:39:26,640 --> 00:39:30,160
it'll basically replay that same message

00:39:28,480 --> 00:39:31,680
to a topic called foo

00:39:30,160 --> 00:39:33,599
and off of that topic then you can do

00:39:31,680 --> 00:39:34,960
stuff like attach rules subscriptions

00:39:33,599 --> 00:39:36,720
and stuff like that too

00:39:34,960 --> 00:39:38,880
so you know once you combine some of

00:39:36,720 --> 00:39:41,520
those things you really don't need

00:39:38,880 --> 00:39:45,760
the the concept of a virtual

00:39:41,520 --> 00:39:45,760
destinations that active q5 introduces

00:39:49,119 --> 00:39:56,480
all right so let me just give you an

00:39:51,119 --> 00:40:00,240
idea of polish trajectory

00:39:56,480 --> 00:40:03,520
um basically

00:40:00,240 --> 00:40:04,480
we've pretty much implemented most of

00:40:03,520 --> 00:40:07,280
the core features

00:40:04,480 --> 00:40:08,400
in active mq5 like message groups and

00:40:07,280 --> 00:40:09,920
things like that

00:40:08,400 --> 00:40:12,480
but we the big things that we need to

00:40:09,920 --> 00:40:14,480
really add to it is uh network of broker

00:40:12,480 --> 00:40:16,640
support so that we can run clusters

00:40:14,480 --> 00:40:18,640
of apollos together and them all store

00:40:16,640 --> 00:40:20,480
and forward automatically between them

00:40:18,640 --> 00:40:22,839
based on where the consumers are

00:40:20,480 --> 00:40:24,319
attaching to that's a huge feature of

00:40:22,839 --> 00:40:25,680
activemcu

00:40:24,319 --> 00:40:27,200
and we really need to implement it

00:40:25,680 --> 00:40:29,200
before we could ever say that it's going

00:40:27,200 --> 00:40:31,280
to be active on q6

00:40:29,200 --> 00:40:32,400
hopefully we can implement it better in

00:40:31,280 --> 00:40:34,800
a way that scales

00:40:32,400 --> 00:40:35,760
better than the way active q5 scales it

00:40:34,800 --> 00:40:37,680
out

00:40:35,760 --> 00:40:39,040
we need to add priority support and

00:40:37,680 --> 00:40:40,079
scheduling support scheduling is

00:40:39,040 --> 00:40:40,800
probably going to be easy because we

00:40:40,079 --> 00:40:42,880
already support

00:40:40,800 --> 00:40:44,240
message expiration and with message

00:40:42,880 --> 00:40:44,800
expiration the way it's implemented

00:40:44,240 --> 00:40:46,880
apollo

00:40:44,800 --> 00:40:48,400
we could probably piggyback and do

00:40:46,880 --> 00:40:51,119
message scheduling too

00:40:48,400 --> 00:40:52,960
so um the other thing is we need to add

00:40:51,119 --> 00:40:55,599
x8 transactions

00:40:52,960 --> 00:40:58,000
and maybe we should add a jmx management

00:40:55,599 --> 00:41:02,079
api just to be compatible with it

00:40:58,000 --> 00:41:02,880
um so but like i said we've backported a

00:41:02,079 --> 00:41:05,920
lot of features

00:41:02,880 --> 00:41:06,800
we backported from from apollo into

00:41:05,920 --> 00:41:09,839
active queue we

00:41:06,800 --> 00:41:11,200
backward the level db store uh which is

00:41:09,839 --> 00:41:13,040
super fast you should do it's not the

00:41:11,200 --> 00:41:13,680
default store yet just because the the

00:41:13,040 --> 00:41:15,440
current

00:41:13,680 --> 00:41:17,599
uh kahai db has kind of been battle

00:41:15,440 --> 00:41:18,800
tested and we don't want to destabilize

00:41:17,599 --> 00:41:20,640
folks

00:41:18,800 --> 00:41:21,839
but i definitely recommend if you guys

00:41:20,640 --> 00:41:23,520
have high performance

00:41:21,839 --> 00:41:25,520
persistent requirements try the level db

00:41:23,520 --> 00:41:28,240
store on active q58

00:41:25,520 --> 00:41:29,280
um we've also backported the mptt

00:41:28,240 --> 00:41:32,839
protocol which was

00:41:29,280 --> 00:41:36,240
in apollo first then we ported that to

00:41:32,839 --> 00:41:39,599
um active q58

00:41:36,240 --> 00:41:39,599
and other stuff

00:41:39,680 --> 00:41:43,119
so this is how the releases have looked

00:41:42,079 --> 00:41:45,839
for apollo

00:41:43,119 --> 00:41:47,119
we've been pretty good about doing a

00:41:45,839 --> 00:41:49,920
couple releases a year

00:41:47,119 --> 00:41:52,240
like five or six of them where uh

00:41:49,920 --> 00:41:53,760
version 1.6 was just released it's got

00:41:52,240 --> 00:41:57,680
an awesome looking little web console

00:41:53,760 --> 00:41:57,680
that if i got time i'm gonna demo

00:41:58,079 --> 00:42:02,079
oh let's not do questions yet let me

00:42:00,560 --> 00:42:03,760
quickly show you

00:42:02,079 --> 00:42:06,079
what kind of apollo looks like when it's

00:42:03,760 --> 00:42:06,079
running

00:42:07,040 --> 00:42:09,280
so

00:42:10,560 --> 00:42:15,760
you start it up by just running it

00:42:13,680 --> 00:42:18,079
it should start up pretty quickly there

00:42:15,760 --> 00:42:20,000
you go he opens up a bunch of reports he

00:42:18,079 --> 00:42:23,680
tells you what he's listening on

00:42:20,000 --> 00:42:25,280
he's listening on tcp ssl websockets

00:42:23,680 --> 00:42:26,720
secure websockets

00:42:25,280 --> 00:42:28,400
it's got some administration ports you

00:42:26,720 --> 00:42:30,560
can look at what's going on

00:42:28,400 --> 00:42:32,720
i'm gonna switch over here real quick

00:42:30,560 --> 00:42:36,480
and and try to put some load on it

00:42:32,720 --> 00:42:38,319
so that way the if i look at it with an

00:42:36,480 --> 00:42:41,040
admin console

00:42:38,319 --> 00:42:42,319
it's kind of has something to show all

00:42:41,040 --> 00:42:44,640
right see here i'm just

00:42:42,319 --> 00:42:46,480
running some producers and consumers on

00:42:44,640 --> 00:42:51,119
topics and queues

00:42:46,480 --> 00:42:53,440
and let me connect to the admin console

00:42:51,119 --> 00:42:56,079
so this admin console is new for apollo

00:42:53,440 --> 00:42:56,079
1 6.

00:42:56,800 --> 00:43:03,760
it's all rest based using the rest apis

00:43:01,200 --> 00:43:04,560
with it you can see uh the virtual hosts

00:43:03,760 --> 00:43:06,400
that are

00:43:04,560 --> 00:43:09,040
created there's only one in this system

00:43:06,400 --> 00:43:11,119
here but in a virtual host

00:43:09,040 --> 00:43:12,800
there's a store that's assigned to each

00:43:11,119 --> 00:43:14,400
virtual host each virtual host could be

00:43:12,800 --> 00:43:17,119
storing this data in a different

00:43:14,400 --> 00:43:20,000
area but you can look at the cues that

00:43:17,119 --> 00:43:21,839
are that exist in it the topics

00:43:20,000 --> 00:43:23,280
the durable subscriptions you can do

00:43:21,839 --> 00:43:25,920
things that like delete the drawable

00:43:23,280 --> 00:43:27,520
subscriptions so you can manage it all

00:43:25,920 --> 00:43:29,040
you can should be able to drill into the

00:43:27,520 --> 00:43:30,319
queues there we go we're drilling into

00:43:29,040 --> 00:43:33,920
the queues

00:43:30,319 --> 00:43:38,319
we can look at the current queue size

00:43:33,920 --> 00:43:40,720
when the last nq occurred right

00:43:38,319 --> 00:43:42,640
let's see you can look at the current

00:43:40,720 --> 00:43:45,200
messages on the queue

00:43:42,640 --> 00:43:45,760
uh the body look at the headers of the

00:43:45,200 --> 00:43:48,640
message

00:43:45,760 --> 00:43:50,160
this was the stop message that was sent

00:43:48,640 --> 00:43:53,440
to the queue

00:43:50,160 --> 00:43:55,440
um doesn't expire

00:43:53,440 --> 00:43:57,040
uh you can see who's uh currently we

00:43:55,440 --> 00:43:58,480
sent it to so

00:43:57,040 --> 00:44:00,160
basically this message was sent to a

00:43:58,480 --> 00:44:01,520
connection and then that kind of been

00:44:00,160 --> 00:44:03,520
received back

00:44:01,520 --> 00:44:06,240
uh you can see the size of the whole

00:44:03,520 --> 00:44:07,599
message in memory

00:44:06,240 --> 00:44:09,359
you can take a look to see who's

00:44:07,599 --> 00:44:12,480
currently producing to it

00:44:09,359 --> 00:44:14,160
uh how many messages they've sent total

00:44:12,480 --> 00:44:16,400
number of bytes they've sent so far the

00:44:14,160 --> 00:44:18,240
consumers uh you can look at the act

00:44:16,400 --> 00:44:21,040
rates of the consumers

00:44:18,240 --> 00:44:22,240
so there's definitely lots more detail

00:44:21,040 --> 00:44:26,160
here than

00:44:22,240 --> 00:44:28,079
you typically can see with an active mq5

00:44:26,160 --> 00:44:30,160
broker on the left here you can see some

00:44:28,079 --> 00:44:30,720
general queue statistics of what's going

00:44:30,160 --> 00:44:33,200
on

00:44:30,720 --> 00:44:34,720
if messages have been expiring if they

00:44:33,200 --> 00:44:36,400
have been knacked

00:44:34,720 --> 00:44:37,920
you know if messages are being swapped

00:44:36,400 --> 00:44:38,960
out of memory or back in you can see how

00:44:37,920 --> 00:44:42,319
many of them are currently

00:44:38,960 --> 00:44:44,560
swapped what is totally swapped out so

00:44:42,319 --> 00:44:46,720
there's uh definitely a lot of detail

00:44:44,560 --> 00:44:46,720
here

00:44:47,599 --> 00:44:51,280
and i think the next thing i just want

00:44:49,119 --> 00:44:54,240
to show you is a quick example of

00:44:51,280 --> 00:44:56,079
stomp and basically stomp over with

00:44:54,240 --> 00:44:57,280
sockets it's always a cool example just

00:44:56,079 --> 00:45:00,960
because you can use the word

00:44:57,280 --> 00:45:03,119
web browser here's a

00:45:00,960 --> 00:45:04,560
little example we shipped in the in the

00:45:03,119 --> 00:45:07,200
distribution directory

00:45:04,560 --> 00:45:08,800
there's an examples directory and in it

00:45:07,200 --> 00:45:11,839
you'll you'll find a little

00:45:08,800 --> 00:45:13,200
html file which uses uh websockets here

00:45:11,839 --> 00:45:15,359
i got just got to load it up

00:45:13,200 --> 00:45:16,800
i'm going to tell it to connect to my

00:45:15,359 --> 00:45:18,560
broker this is running here locally on

00:45:16,800 --> 00:45:21,119
my laptop

00:45:18,560 --> 00:45:22,240
and it's going to be publishing messages

00:45:21,119 --> 00:45:25,839
and receiving them

00:45:22,240 --> 00:45:28,560
off of this topic here chat general

00:45:25,839 --> 00:45:29,359
when you connect on the right side

00:45:28,560 --> 00:45:32,000
you'll see

00:45:29,359 --> 00:45:33,920
basically all the raw data that's being

00:45:32,000 --> 00:45:36,160
sent over the websocket

00:45:33,920 --> 00:45:37,520
and this is not protocol as you can see

00:45:36,160 --> 00:45:38,880
it's very readable

00:45:37,520 --> 00:45:41,040
first thing we do is send in a connect

00:45:38,880 --> 00:45:43,839
frame the server responds back hey

00:45:41,040 --> 00:45:44,319
we're connected and this who i am i'm on

00:45:43,839 --> 00:45:47,520
a

00:45:44,319 --> 00:45:50,880
apache apollo 1 6 server some

00:45:47,520 --> 00:45:52,240
heart beating is negotiated

00:45:50,880 --> 00:45:53,520
and right here you can see the heart

00:45:52,240 --> 00:45:54,800
beating already occurring they're

00:45:53,520 --> 00:45:55,440
pinging and pogging each other so that

00:45:54,800 --> 00:46:00,160
we can do

00:45:55,440 --> 00:46:03,119
early detection of connection failures

00:46:00,160 --> 00:46:03,119
and you can send a message

00:46:08,000 --> 00:46:12,079
okay so but nobody else was in the room

00:46:10,960 --> 00:46:15,119
this kind of bad

00:46:12,079 --> 00:46:18,480
chat example if uh

00:46:15,119 --> 00:46:23,359
if i don't open up a new tab

00:46:18,480 --> 00:46:23,359
so we can receive the messages right

00:46:24,400 --> 00:46:31,359
are we not connecting no

00:46:28,480 --> 00:46:31,359
let's not do that

00:46:34,640 --> 00:46:46,319
is my server down

00:46:42,079 --> 00:46:49,680
of course something always goes wrong

00:46:46,319 --> 00:46:49,680
when you're doing a demo

00:46:54,839 --> 00:46:57,839
sick

00:47:03,280 --> 00:47:06,800
it looks like you're trying to connect

00:47:04,560 --> 00:47:08,079
but just not i don't know maybe it's a

00:47:06,800 --> 00:47:09,040
network thing i'm not sure what's going

00:47:08,079 --> 00:47:13,200
on

00:47:09,040 --> 00:47:13,200
but uh hopefully it'll work for you

00:47:14,000 --> 00:47:26,319
um so uh yeah so uh apollo 16 is out

00:47:24,240 --> 00:47:28,480
give it a shot um you might like it

00:47:26,319 --> 00:47:30,079
better than active q5 for

00:47:28,480 --> 00:47:31,599
you know simple projects you know your

00:47:30,079 --> 00:47:32,559
bigger larger scale projects i still

00:47:31,599 --> 00:47:34,800
recommend you use

00:47:32,559 --> 00:47:35,839
active mq5 just because it's got stuff

00:47:34,800 --> 00:47:37,680
like uh

00:47:35,839 --> 00:47:41,359
networks of brokers and things like that

00:47:37,680 --> 00:47:41,359
and let me open it up for questions

00:47:46,720 --> 00:47:53,839
any questions out there yes you

00:47:50,839 --> 00:47:53,839
mentioned

00:48:04,640 --> 00:48:09,839
do it if there's anything wrong with it

00:48:07,200 --> 00:48:09,839
we'll fix it

00:48:11,119 --> 00:48:14,480
um yeah i mean the only reason it's not

00:48:13,200 --> 00:48:16,640
default yet

00:48:14,480 --> 00:48:17,520
is uh basically because we want to make

00:48:16,640 --> 00:48:20,160
sure we port

00:48:17,520 --> 00:48:20,880
all every single test that we have over

00:48:20,160 --> 00:48:22,240
to it

00:48:20,880 --> 00:48:25,040
and we haven't had time to it i think

00:48:22,240 --> 00:48:26,640
we've ported probably uh 75 percent of

00:48:25,040 --> 00:48:29,680
all our unit tests over to

00:48:26,640 --> 00:48:31,920
level db so they also run

00:48:29,680 --> 00:48:34,640
but our intent is probably next version

00:48:31,920 --> 00:48:36,400
of the next minor version of activeq

00:48:34,640 --> 00:48:39,119
we're probably going to make leveldb the

00:48:36,400 --> 00:48:40,480
default store it hadn't been before

00:48:39,119 --> 00:48:42,559
and we really couldn't recommend it

00:48:40,480 --> 00:48:46,559
because it hadn't implemented

00:48:42,559 --> 00:48:48,960
xa support but now it has xa support

00:48:46,559 --> 00:48:50,480
so it's totally feature complete it also

00:48:48,960 --> 00:48:53,920
handles the non-persistent

00:48:50,480 --> 00:48:54,640
case too um so you can kind of rip out

00:48:53,920 --> 00:48:58,079
all the

00:48:54,640 --> 00:48:58,079
db bits if you want to

00:49:00,000 --> 00:49:05,119
any other questions yes

00:49:03,200 --> 00:49:07,359
message browsing console you guys have a

00:49:05,119 --> 00:49:11,359
computer to turn that off

00:49:07,359 --> 00:49:11,359
the message browser in the console

00:49:11,680 --> 00:49:17,520
one of our issues with active mqs so

00:49:15,680 --> 00:49:20,720
yeah so one of the things you can do

00:49:17,520 --> 00:49:24,480
with uh with apollo is

00:49:20,720 --> 00:49:25,200
there's uh access rules they can

00:49:24,480 --> 00:49:29,520
configure

00:49:25,200 --> 00:49:33,280
okay and one of the access rules is uh

00:49:29,520 --> 00:49:34,240
who can view messages off a topic or a

00:49:33,280 --> 00:49:36,079
queue

00:49:34,240 --> 00:49:38,400
all right and that even applies into the

00:49:36,079 --> 00:49:40,319
admin console the admin console is using

00:49:38,400 --> 00:49:45,839
the same security mechanism

00:49:40,319 --> 00:49:45,839
as if you were a regular client

00:49:47,760 --> 00:49:50,960
it's using like it's like super admin if

00:49:49,839 --> 00:49:53,280
you're using console

00:49:50,960 --> 00:49:55,760
all the rest apis they're using the same

00:49:53,280 --> 00:49:58,160
security bits as

00:49:55,760 --> 00:49:58,960
everything else for example if you don't

00:49:58,160 --> 00:50:01,359
if you can't even

00:49:58,960 --> 00:50:02,400
uh see a queue if you don't have any

00:50:01,359 --> 00:50:04,079
access to queue

00:50:02,400 --> 00:50:06,400
when you're an admin it won't even show

00:50:04,079 --> 00:50:06,880
up as a list on the list of cues you can

00:50:06,400 --> 00:50:08,559
see

00:50:06,880 --> 00:50:10,000
like it's like filtered out because you

00:50:08,559 --> 00:50:12,160
have no access to the queue or any of

00:50:10,000 --> 00:50:16,559
that um

00:50:12,160 --> 00:50:19,520
yeah so there's also a very uh

00:50:16,559 --> 00:50:21,520
well i would say it's a decent uh rest

00:50:19,520 --> 00:50:23,440
api

00:50:21,520 --> 00:50:24,800
uh they can see right here down here at

00:50:23,440 --> 00:50:25,599
the very bottom of the console there's

00:50:24,800 --> 00:50:28,720
like a

00:50:25,599 --> 00:50:30,640
rest api link and uh

00:50:28,720 --> 00:50:32,880
you can basically look at all the urls

00:50:30,640 --> 00:50:34,960
that you can access to

00:50:32,880 --> 00:50:36,400
you know do things like browse queues

00:50:34,960 --> 00:50:39,680
somewhere around here oh here's

00:50:36,400 --> 00:50:42,800
topics do things for topics

00:50:39,680 --> 00:50:45,200
you can process all topics you get

00:50:42,800 --> 00:50:47,280
durable sub metrics so this is a metrics

00:50:45,200 --> 00:50:49,119
that's a roll above all the durable subs

00:50:47,280 --> 00:50:50,480
you could look at a single dribble subs

00:50:49,119 --> 00:50:52,160
but you can also say

00:50:50,480 --> 00:50:53,680
hey aggregate all the drills

00:50:52,160 --> 00:50:55,599
subscription metrics

00:50:53,680 --> 00:50:57,599
and see what's going on let's see those

00:50:55,599 --> 00:51:00,480
work oh yeah look it worked

00:50:57,599 --> 00:51:01,680
so here you can basically see what's

00:51:00,480 --> 00:51:03,920
going on with

00:51:01,680 --> 00:51:05,280
totaling queues basically the current

00:51:03,920 --> 00:51:08,240
time the server just

00:51:05,280 --> 00:51:10,960
in case you want to avoid skus time skus

00:51:08,240 --> 00:51:13,839
and stuff like that

00:51:10,960 --> 00:51:15,839
you know the number of durable subs

00:51:13,839 --> 00:51:18,720
you're looking at is this objects thing

00:51:15,839 --> 00:51:20,400
so it's got it's got a decent rest api

00:51:18,720 --> 00:51:24,720
it's kind of

00:51:20,400 --> 00:51:24,720
automatically documented using

00:51:25,119 --> 00:51:27,920
this screen here

00:51:28,160 --> 00:51:33,760
so any other questions

00:51:45,599 --> 00:51:52,319
so no so like right now we're using

00:51:48,880 --> 00:51:54,240
we test active q5x

00:51:52,319 --> 00:51:55,839
i think five seven maybe we just

00:51:54,240 --> 00:51:58,800
upgraded to the five eight clients

00:51:55,839 --> 00:51:59,359
but we basically use activecues clients

00:51:58,800 --> 00:52:02,079
to

00:51:59,359 --> 00:52:06,000
test connecting to apollo so we're using

00:52:02,079 --> 00:52:06,000
those old clients and protocol versions

00:52:06,160 --> 00:52:12,720
yeah all that stuff yeah and and when

00:52:09,440 --> 00:52:13,280
if if we ever make this this broker be

00:52:12,720 --> 00:52:17,119
the

00:52:13,280 --> 00:52:18,400
active q6 um

00:52:17,119 --> 00:52:20,079
basically what we're going to do is

00:52:18,400 --> 00:52:22,480
we're going to jettison the old server

00:52:20,079 --> 00:52:25,520
code but maintain all the client bits

00:52:22,480 --> 00:52:27,200
and already uh activem258 we

00:52:25,520 --> 00:52:28,640
changed the the way the jars are

00:52:27,200 --> 00:52:30,960
packaged and you know

00:52:28,640 --> 00:52:34,319
the organization to the future be able

00:52:30,960 --> 00:52:34,319
to kind of do that if we wanted

00:52:35,599 --> 00:52:38,319
any other questions

00:52:40,960 --> 00:52:48,960
cool thank you

00:52:46,880 --> 00:52:48,960

YouTube URL: https://www.youtube.com/watch?v=fn7uQTL-bJU


