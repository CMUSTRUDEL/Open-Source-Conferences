Title: What's new in httpd 2.4
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Rich Bowen
ApacheCon NA 2013
Track : A Patchy Web
Captions: 
	00:00:02,270 --> 00:00:08,130
appreciate you all coming this is a very

00:00:04,440 --> 00:00:10,950
intimidating room so I can't see any of

00:00:08,130 --> 00:00:12,330
you it's blinding and I'm very hard of

00:00:10,950 --> 00:00:15,509
hearing so if you have questions please

00:00:12,330 --> 00:00:20,460
speak up so I'm going to be talking

00:00:15,509 --> 00:00:23,490
about what's new in HTTP d2 dot 4 we

00:00:20,460 --> 00:00:26,160
released the first version of this the

00:00:23,490 --> 00:00:31,410
first release of 2.4 came out back in

00:00:26,160 --> 00:00:36,239
February and the two dot for dot for

00:00:31,410 --> 00:00:38,879
release was pushed out yesterday so if I

00:00:36,239 --> 00:00:40,320
refer to 243 is the latest version in

00:00:38,879 --> 00:00:47,670
these slides that's because that just

00:00:40,320 --> 00:00:49,770
happened yesterday about seven and a

00:00:47,670 --> 00:00:52,980
half years ago in Stuttgart at Apache

00:00:49,770 --> 00:00:56,010
con I gave a presentation called why I

00:00:52,980 --> 00:00:57,930
hate Apache and i listed a bunch of

00:00:56,010 --> 00:00:59,879
reasons that a bunch of things that

00:00:57,930 --> 00:01:01,440
really irritated me about the apache web

00:00:59,879 --> 00:01:05,760
server it was a very tongue-in-cheek

00:01:01,440 --> 00:01:08,400
talk and every single thing that i

00:01:05,760 --> 00:01:12,470
mentioned in that presentation has been

00:01:08,400 --> 00:01:14,939
addressed in the 2.4 release so going to

00:01:12,470 --> 00:01:17,970
go through some of those things

00:01:14,939 --> 00:01:19,619
unfortunately having only 45 minutes I

00:01:17,970 --> 00:01:21,570
don't actually have time to cover

00:01:19,619 --> 00:01:24,240
everything in depth it's it's a very

00:01:21,570 --> 00:01:26,400
compelling new release if you have not

00:01:24,240 --> 00:01:27,869
yet upgraded to 2.4 I hope that by the

00:01:26,400 --> 00:01:33,240
end of this you'll be persuaded that

00:01:27,869 --> 00:01:39,689
it's the thing to do so let's jump right

00:01:33,240 --> 00:01:42,360
in prior to 2.4 the MPN the multi

00:01:39,689 --> 00:01:45,390
processing module was something that was

00:01:42,360 --> 00:01:47,310
very tightly bound up in how the build

00:01:45,390 --> 00:01:50,340
was done and so if you wanted to switch

00:01:47,310 --> 00:01:52,950
from say a pre for chem p.m. to a

00:01:50,340 --> 00:01:58,380
threaded mpm you would have to reinstall

00:01:52,950 --> 00:02:01,259
the Apache server there are there are

00:01:58,380 --> 00:02:05,100
several mpms available there's the pre

00:02:01,259 --> 00:02:07,740
fork which consists of a single parent

00:02:05,100 --> 00:02:11,849
and several no single threaded processes

00:02:07,740 --> 00:02:13,010
the worker mpm consists of multi

00:02:11,849 --> 00:02:17,989
threaded processes

00:02:13,010 --> 00:02:21,379
and the the big change with em pm's in 2

00:02:17,989 --> 00:02:25,939
dot 4 is that now you can build mpms as

00:02:21,379 --> 00:02:29,629
shared objects you can then load the one

00:02:25,939 --> 00:02:31,970
that you want at configure time with a

00:02:29,629 --> 00:02:34,790
load module option like any other module

00:02:31,970 --> 00:02:37,549
so this is a significant change because

00:02:34,790 --> 00:02:39,409
before you had to decide ahead of time

00:02:37,549 --> 00:02:41,000
which npm you want it if you wanted to

00:02:39,409 --> 00:02:43,370
experiment with another one it was quite

00:02:41,000 --> 00:02:46,250
a bit of hassle now it's just a line of

00:02:43,370 --> 00:02:49,099
configuration there are of course

00:02:46,250 --> 00:02:53,329
certain directives that are mpm specific

00:02:49,099 --> 00:02:55,519
and so you do need to make sure that you

00:02:53,329 --> 00:02:57,200
actually test before you put it into

00:02:55,519 --> 00:02:58,609
production it's not something that you

00:02:57,200 --> 00:03:01,670
can just throw out there and hope that

00:02:58,609 --> 00:03:04,700
it works but it does give you the

00:03:01,670 --> 00:03:08,090
opportunity to to switch between them as

00:03:04,700 --> 00:03:09,950
needed or you can run multiple instances

00:03:08,090 --> 00:03:11,540
of the server on the same hardware

00:03:09,950 --> 00:03:16,989
pointing at different configurations

00:03:11,540 --> 00:03:19,340
using different mpms so that's very cool

00:03:16,989 --> 00:03:20,799
the next feature that I have here is

00:03:19,340 --> 00:03:24,379
something that has been requested

00:03:20,799 --> 00:03:26,930
forever and this is the ability to

00:03:24,379 --> 00:03:30,290
configure what your error log looks like

00:03:26,930 --> 00:03:33,349
and what information it logs so

00:03:30,290 --> 00:03:35,930
previously you had the error log

00:03:33,349 --> 00:03:38,329
directive and it told the server where

00:03:35,930 --> 00:03:40,250
to put your error log now is the extent

00:03:38,329 --> 00:03:44,180
of the control that you had over that

00:03:40,250 --> 00:03:46,760
error log now we have an error log

00:03:44,180 --> 00:03:50,239
format directive that looks very much

00:03:46,760 --> 00:03:51,980
like the log format directive you can

00:03:50,239 --> 00:03:53,780
put many of the same variables in it as

00:03:51,980 --> 00:03:58,159
an you then you can also put in some

00:03:53,780 --> 00:04:00,859
that are specific to the error condition

00:03:58,159 --> 00:04:04,310
so in the example that I've got here the

00:04:00,859 --> 00:04:07,970
percent em out at the end there is the

00:04:04,310 --> 00:04:10,519
error message itself in the default

00:04:07,970 --> 00:04:13,370
error log format you'll have a percent

00:04:10,519 --> 00:04:15,260
lower case M which shows the module that

00:04:13,370 --> 00:04:22,610
was responsible for generating the error

00:04:15,260 --> 00:04:25,540
condition and here's a really nice new

00:04:22,610 --> 00:04:28,530
feature is the percent capital L form

00:04:25,540 --> 00:04:31,510
this allows you to correlate directly

00:04:28,530 --> 00:04:33,750
between an access log entry and the

00:04:31,510 --> 00:04:37,120
error log entry that was generated by it

00:04:33,750 --> 00:04:39,520
so if you have a very busy site you know

00:04:37,120 --> 00:04:41,590
that it's very difficult to figure out

00:04:39,520 --> 00:04:44,050
looking at the error log which access

00:04:41,590 --> 00:04:46,270
log entry went along with it you can

00:04:44,050 --> 00:04:47,590
sort of correlate it by timestamp but

00:04:46,270 --> 00:04:50,110
that's not good enough on an

00:04:47,590 --> 00:04:53,590
exceptionally busy site so this gives

00:04:50,110 --> 00:04:56,740
you a log ID that you can tie those two

00:04:53,590 --> 00:04:59,080
entries directly together here's what a

00:04:56,740 --> 00:05:01,750
typical log entry looks like in the new

00:04:59,080 --> 00:05:03,100
format this is the default format and

00:05:01,750 --> 00:05:06,040
you can of course tweak this a little

00:05:03,100 --> 00:05:09,610
bit you see that I've got the process ID

00:05:06,040 --> 00:05:11,980
that that generated the message I've got

00:05:09,610 --> 00:05:14,250
the the module that was reporting the

00:05:11,980 --> 00:05:16,870
message in this case it was core and

00:05:14,250 --> 00:05:22,750
then you have the client address that

00:05:16,870 --> 00:05:25,150
generated the message stating which

00:05:22,750 --> 00:05:27,670
module is responsible for it brings me

00:05:25,150 --> 00:05:32,440
to the next feature that is really

00:05:27,670 --> 00:05:38,170
compelling in 2.4 and that is the per

00:05:32,440 --> 00:05:41,650
module log level configuration so here's

00:05:38,170 --> 00:05:45,040
how log level used to work and you you

00:05:41,650 --> 00:05:47,650
specify the level at which the verbosity

00:05:45,040 --> 00:05:51,670
level at which you wish to have your log

00:05:47,650 --> 00:05:56,050
file and this can be anything from debug

00:05:51,670 --> 00:05:58,540
all the way down to what's at the other

00:05:56,050 --> 00:06:04,570
end I guess critical is at the other end

00:05:58,540 --> 00:06:07,240
of this of the spectrum and you can set

00:06:04,570 --> 00:06:10,150
this globally this can be set once in

00:06:07,240 --> 00:06:14,590
your configuration or per virtual host

00:06:10,150 --> 00:06:17,080
and 2.2 and earlier one of the downsides

00:06:14,590 --> 00:06:21,430
of this is if you want a greater

00:06:17,080 --> 00:06:24,730
verbosity on log messages for say mud

00:06:21,430 --> 00:06:27,010
include then along for the ride you get

00:06:24,730 --> 00:06:29,260
a larger verbosity level for something

00:06:27,010 --> 00:06:30,970
like mod proxy which just won't shut up

00:06:29,260 --> 00:06:36,070
there's just so much debug information

00:06:30,970 --> 00:06:39,040
for mod proxy and so this is something

00:06:36,070 --> 00:06:43,030
that has been improved in 2.4 in 28

00:06:39,040 --> 00:06:45,310
one is that you can specify log level /

00:06:43,030 --> 00:06:47,320
directory and so in this configuration

00:06:45,310 --> 00:06:50,140
here you can see that I've turned up the

00:06:47,320 --> 00:06:52,060
log level just for my CGI directory so I

00:06:50,140 --> 00:06:54,490
can get more information about what's

00:06:52,060 --> 00:06:57,190
going on there but even more compelling

00:06:54,490 --> 00:07:01,780
is the ability to set log level per

00:06:57,190 --> 00:07:05,380
module and in this example here I've

00:07:01,780 --> 00:07:08,290
turned up the log level to warn on mod

00:07:05,380 --> 00:07:16,600
ssl whereas it's only on info and

00:07:08,290 --> 00:07:20,050
everything else additionally we've added

00:07:16,600 --> 00:07:22,300
several new log levels and they are

00:07:20,050 --> 00:07:25,210
called trace one through trace eight and

00:07:22,300 --> 00:07:27,690
this allows module offer authors to

00:07:25,210 --> 00:07:31,720
provide really detailed debug.trace

00:07:27,690 --> 00:07:34,120
information to you the end user you can

00:07:31,720 --> 00:07:38,260
figure out exactly what's going on when

00:07:34,120 --> 00:07:41,970
something goes wrong one of the side

00:07:38,260 --> 00:07:44,740
effects of this is that the rewrite log

00:07:41,970 --> 00:07:50,800
mod rewrite was one of the modules that

00:07:44,740 --> 00:07:52,590
provided its own dedicated log file they

00:07:50,800 --> 00:07:56,470
had a rewrite log directive that

00:07:52,590 --> 00:08:00,670
directive has gone away and is replaced

00:07:56,470 --> 00:08:03,880
by this this per module configurable log

00:08:00,670 --> 00:08:05,650
level if you want to pull out just the

00:08:03,880 --> 00:08:08,800
log messages relating to a particular

00:08:05,650 --> 00:08:14,130
module you can simply pipe your log file

00:08:08,800 --> 00:08:14,130
through grab looking for a module name

00:08:21,909 --> 00:08:30,139
now to me this next thing is from the

00:08:28,339 --> 00:08:32,269
server administrators perspective this

00:08:30,139 --> 00:08:34,550
is kind of the killer feature on 2.4

00:08:32,269 --> 00:08:37,339
this is something that people have been

00:08:34,550 --> 00:08:40,490
requesting ever since I became involved

00:08:37,339 --> 00:08:44,000
with the Apache server project people

00:08:40,490 --> 00:08:47,720
want some kind of configurable stuff in

00:08:44,000 --> 00:08:50,180
the Apache configuration file there is a

00:08:47,720 --> 00:08:51,980
third-party module called mod macro

00:08:50,180 --> 00:08:54,980
that's provided something like this for

00:08:51,980 --> 00:08:56,959
a long time and actually i'll come back

00:08:54,980 --> 00:09:06,319
to mod macro a little bit later in this

00:08:56,959 --> 00:09:09,160
talk here is an example of using the if

00:09:06,319 --> 00:09:11,600
directive in your configuration file and

00:09:09,160 --> 00:09:14,750
for anyone who struggled with mod

00:09:11,600 --> 00:09:17,959
rewrite isn't this better you can simply

00:09:14,750 --> 00:09:20,360
have an if statement and in this case

00:09:17,959 --> 00:09:22,790
I'm saying if somebody comes to my site

00:09:20,360 --> 00:09:26,690
using the hostname example.com I want to

00:09:22,790 --> 00:09:28,880
require them to use wwx ample com it's

00:09:26,690 --> 00:09:31,610
legible it's pretty clear just from

00:09:28,880 --> 00:09:34,940
looking at it what it means and there

00:09:31,610 --> 00:09:39,589
aren't any nasty regular expressions

00:09:34,940 --> 00:09:42,350
floating around or you know the other

00:09:39,589 --> 00:09:44,930
way around if i want to say if it's not

00:09:42,350 --> 00:09:49,760
example.com send it to example.com same

00:09:44,930 --> 00:09:54,709
thing other direction you can also have

00:09:49,760 --> 00:09:57,740
a more detailed if-then-else structure

00:09:54,709 --> 00:10:01,160
in your configuration file so i have in

00:09:57,740 --> 00:10:05,569
this case i have if if the remote

00:10:01,160 --> 00:10:08,870
address if the client address is in 10

00:10:05,569 --> 00:10:10,430
dot 1 then do this if it's somewhere

00:10:08,870 --> 00:10:12,889
else in 10 dot do this other thing

00:10:10,430 --> 00:10:15,860
otherwise do this other thing and that

00:10:12,889 --> 00:10:18,019
goes that gets evaluated at request time

00:10:15,860 --> 00:10:21,410
of course there is some requests time

00:10:18,019 --> 00:10:23,060
overhead involved with this but you know

00:10:21,410 --> 00:10:26,839
you were already doing that with mantri

00:10:23,060 --> 00:10:31,180
right so it's not it improves the

00:10:26,839 --> 00:10:31,180
maintainability of your configuration

00:10:34,089 --> 00:10:38,660
so the upshot of this is that I need to

00:10:37,100 --> 00:10:42,499
write a new edition of my book which I

00:10:38,660 --> 00:10:46,519
am working on in case you care but mod

00:10:42,499 --> 00:10:49,910
rewrite is the bane of many system

00:10:46,519 --> 00:10:53,259
administrators and this is a much easier

00:10:49,910 --> 00:10:53,259
way to do some of those things

00:11:00,950 --> 00:11:07,970
in addition to the if function having

00:11:04,790 --> 00:11:10,130
expression evaluation there is also a

00:11:07,970 --> 00:11:13,190
general person general purpose

00:11:10,130 --> 00:11:17,570
expression parser that can be used in

00:11:13,190 --> 00:11:20,210
other directives and I think that this

00:11:17,570 --> 00:11:21,590
is the other killer feature but I will

00:11:20,210 --> 00:11:24,020
mention once again that there is a

00:11:21,590 --> 00:11:26,360
request time overhead involved in using

00:11:24,020 --> 00:11:28,490
the expression parser so one of the

00:11:26,360 --> 00:11:30,260
things that that was frustrating in

00:11:28,490 --> 00:11:32,450
earlier versions of the server was that

00:11:30,260 --> 00:11:35,240
there were several several different

00:11:32,450 --> 00:11:36,830
syntaxes for these kinds of comparison

00:11:35,240 --> 00:11:40,190
expressions the situation was worse than

00:11:36,830 --> 00:11:45,380
1.3 there was some consolidation in the

00:11:40,190 --> 00:11:48,080
20 days and there were two different

00:11:45,380 --> 00:11:51,230
species of regular expressions that you

00:11:48,080 --> 00:11:54,980
could use and then there is also the

00:11:51,230 --> 00:11:57,230
sort of file glob food star syntax which

00:11:54,980 --> 00:12:02,840
is actually still available in contexts

00:11:57,230 --> 00:12:05,530
where it makes sense as a module author

00:12:02,840 --> 00:12:08,810
you can now use this general purpose

00:12:05,530 --> 00:12:11,890
expression evaluation engine instead of

00:12:08,810 --> 00:12:16,570
rolling your own it is amazingly

00:12:11,890 --> 00:12:18,980
flexible and it supports all manner of

00:12:16,570 --> 00:12:23,980
logical expressions that you might want

00:12:18,980 --> 00:12:26,990
to put in a configuration directive if

00:12:23,980 --> 00:12:29,330
you are interested in participating in

00:12:26,990 --> 00:12:31,730
documentation efforts this is an area

00:12:29,330 --> 00:12:34,220
where we could use some help we have a

00:12:31,730 --> 00:12:37,010
reference documentation on what the

00:12:34,220 --> 00:12:40,670
expression syntax looks like but we're

00:12:37,010 --> 00:12:43,280
very light on actual examples of how you

00:12:40,670 --> 00:12:45,320
might use that in the real world so if

00:12:43,280 --> 00:12:48,290
you do have examples of how you are

00:12:45,320 --> 00:12:53,060
using this I'd love to talk to you to

00:12:48,290 --> 00:12:57,200
enhance that document the expression

00:12:53,060 --> 00:13:00,950
engine can reference any variables that

00:12:57,200 --> 00:13:06,670
are accessible to the httpd runtime and

00:13:00,950 --> 00:13:12,140
use them in use the request time so

00:13:06,670 --> 00:13:15,290
here's an example of using the

00:13:12,140 --> 00:13:17,600
expressionengine to make sure that your

00:13:15,290 --> 00:13:20,890
website is only accessible during

00:13:17,600 --> 00:13:23,600
business hours so we have require

00:13:20,890 --> 00:13:26,090
expression and then we have an

00:13:23,600 --> 00:13:28,550
expression that says that the the time

00:13:26,090 --> 00:13:31,430
our needs to be greater than 9 and less

00:13:28,550 --> 00:13:34,010
than 17 putting it within your normal

00:13:31,430 --> 00:13:35,930
business hours and that directory will

00:13:34,010 --> 00:13:44,180
then be inaccessible outside of those

00:13:35,930 --> 00:13:47,630
hours this is a much more minor change

00:13:44,180 --> 00:13:51,710
it seems however spending a lot of time

00:13:47,630 --> 00:13:53,450
on the apache httpd IRC channel it's

00:13:51,710 --> 00:13:56,390
amazing how many people get this wrong

00:13:53,450 --> 00:13:58,970
and so for years people would get this

00:13:56,390 --> 00:14:00,230
this configuration syntax wrong and we

00:13:58,970 --> 00:14:02,870
would beat them over the head with the

00:14:00,230 --> 00:14:05,840
documentation until finally someone said

00:14:02,870 --> 00:14:09,430
why don't we just do it easier so they

00:14:05,840 --> 00:14:12,230
don't make this mistake so here is the

00:14:09,430 --> 00:14:14,990
the configuration example that's being

00:14:12,230 --> 00:14:19,460
talked about here you have a name

00:14:14,990 --> 00:14:22,580
virtualhost directive which says this

00:14:19,460 --> 00:14:25,490
interface star colon 80 which means all

00:14:22,580 --> 00:14:28,760
IP addresses port 80 requests over that

00:14:25,490 --> 00:14:31,070
interface should be treated as virtual

00:14:28,760 --> 00:14:33,320
host requests and here are the virtual

00:14:31,070 --> 00:14:37,510
hosts that are configured for that

00:14:33,320 --> 00:14:41,480
interface trouble is that if you omit

00:14:37,510 --> 00:14:43,430
the name virtual host directive or if

00:14:41,480 --> 00:14:44,960
you get the valley if the value in the

00:14:43,430 --> 00:14:47,180
name virtual host directive doesn't

00:14:44,960 --> 00:14:50,360
exactly match your virtual host blocks

00:14:47,180 --> 00:14:52,730
then those virtual hosts might be

00:14:50,360 --> 00:14:55,250
ignored or you might get a warning

00:14:52,730 --> 00:14:56,840
message that says you told me there were

00:14:55,250 --> 00:14:59,150
named virtual hosts on this interface

00:14:56,840 --> 00:15:05,240
but there aren't so I'm not going to run

00:14:59,150 --> 00:15:06,610
any of them so why not just do the right

00:15:05,240 --> 00:15:09,470
thing if we already know what you meant

00:15:06,610 --> 00:15:11,030
so here's here's what you do now the

00:15:09,470 --> 00:15:14,750
name virtual host directive if you

00:15:11,030 --> 00:15:17,180
happen to put it in there great if you

00:15:14,750 --> 00:15:19,070
don't we'll do what you meant and these

00:15:17,180 --> 00:15:22,370
virtual hosts will work the way that you

00:15:19,070 --> 00:15:24,950
expected them to in the first place so

00:15:22,370 --> 00:15:29,750
there there's a number of things

00:15:24,950 --> 00:15:32,450
that are like this things where we've

00:15:29,750 --> 00:15:33,860
we've taken the addition I say we and

00:15:32,450 --> 00:15:35,270
really it's several of the people that

00:15:33,860 --> 00:15:37,040
are sitting out there I just write it

00:15:35,270 --> 00:15:39,430
down some of the people who actually do

00:15:37,040 --> 00:15:41,960
it are sitting in the audience here and

00:15:39,430 --> 00:15:43,400
they've taken some of the cases where

00:15:41,960 --> 00:15:45,440
people were frustrated with how things

00:15:43,400 --> 00:15:47,930
work and they've made it work the way

00:15:45,440 --> 00:15:52,100
that it was expected to work so that's

00:15:47,930 --> 00:15:59,060
great this slide intentionally left

00:15:52,100 --> 00:16:01,790
blank what that's about so anyway there

00:15:59,060 --> 00:16:04,670
are cases where we're still not quite

00:16:01,790 --> 00:16:06,950
sure what you meant if there is overlap

00:16:04,670 --> 00:16:09,560
between two virtual hosts say two

00:16:06,950 --> 00:16:11,300
virtual hosts have the same hostname on

00:16:09,560 --> 00:16:14,930
them or maybe one of them has a

00:16:11,300 --> 00:16:16,670
wild-card hostname that somehow is going

00:16:14,930 --> 00:16:19,190
to obscure another one with an

00:16:16,670 --> 00:16:22,010
overlapping hostname then we warned you

00:16:19,190 --> 00:16:23,930
about that that configuration time we

00:16:22,010 --> 00:16:25,160
say this this overlaps it probably won't

00:16:23,930 --> 00:16:28,550
do what you want you might want to go

00:16:25,160 --> 00:16:31,450
check that but we still try to do what

00:16:28,550 --> 00:16:31,450
we think you meant

00:16:35,760 --> 00:16:42,870
okay override configuration there is a

00:16:40,290 --> 00:16:45,030
feature in the web server called HT

00:16:42,870 --> 00:16:49,670
access files this allows you to put a

00:16:45,030 --> 00:16:52,740
configuration file / directory and the

00:16:49,670 --> 00:16:56,220
directive that permits this is allow /

00:16:52,740 --> 00:16:59,130
right and you can specify allowoverride

00:16:56,220 --> 00:17:01,170
none don't allow HT access files allow

00:16:59,130 --> 00:17:04,740
it right all what people put whatever

00:17:01,170 --> 00:17:09,510
they want in HD access files or you can

00:17:04,740 --> 00:17:12,650
specify categories you can say allow

00:17:09,510 --> 00:17:16,050
override options and the options

00:17:12,650 --> 00:17:18,300
category encompasses several directives

00:17:16,050 --> 00:17:22,530
that people can put in the htaccess file

00:17:18,300 --> 00:17:24,540
and the case often happens when you want

00:17:22,530 --> 00:17:27,380
to allow people to override some things

00:17:24,540 --> 00:17:30,030
in a category but not other things oh

00:17:27,380 --> 00:17:33,180
one other thing the default for allow

00:17:30,030 --> 00:17:35,850
override has changed this is a very good

00:17:33,180 --> 00:17:38,250
thing it used to be that allow override

00:17:35,850 --> 00:17:41,130
all was the default and now it's a love

00:17:38,250 --> 00:17:44,370
/ right none I expect that this broke

00:17:41,130 --> 00:17:45,600
some configurations out there but I tend

00:17:44,370 --> 00:17:48,000
to think that this was a good thing

00:17:45,600 --> 00:17:51,150
because HD access files tend to be

00:17:48,000 --> 00:17:55,280
overused so this will get people to look

00:17:51,150 --> 00:17:58,200
closer at their configuration and anyway

00:17:55,280 --> 00:18:01,980
we've introduced this new directive

00:17:58,200 --> 00:18:05,040
called allow override list so you can

00:18:01,980 --> 00:18:08,210
combine an out allow override directive

00:18:05,040 --> 00:18:10,560
in this case off config which allows

00:18:08,210 --> 00:18:13,320
authentication and authorization type

00:18:10,560 --> 00:18:15,390
directives and then I also want to allow

00:18:13,320 --> 00:18:18,720
people to use redirect and redirect

00:18:15,390 --> 00:18:21,240
match but not the entire scope of things

00:18:18,720 --> 00:18:24,830
that are in that particular category so

00:18:21,240 --> 00:18:24,830
I just add those specific ones

00:18:28,140 --> 00:18:33,790
moving on to the next thing that people

00:18:30,580 --> 00:18:39,810
have been asking for for 15 years these

00:18:33,790 --> 00:18:42,040
are configuration file variables and

00:18:39,810 --> 00:18:46,140
like I said you've been asking for this

00:18:42,040 --> 00:18:49,480
forever so we've added the define

00:18:46,140 --> 00:18:51,700
directive that allows you to set the

00:18:49,480 --> 00:18:55,710
value of a variable and then use that

00:18:51,700 --> 00:18:58,150
elsewhere in your configuration files

00:18:55,710 --> 00:19:01,000
there are two different ways that you

00:18:58,150 --> 00:19:03,400
can use this these variables you can use

00:19:01,000 --> 00:19:06,310
the if define direct directive which has

00:19:03,400 --> 00:19:10,840
been around for a long time the if

00:19:06,310 --> 00:19:13,990
define directive allows you to put a

00:19:10,840 --> 00:19:18,550
block around the value of a variable so

00:19:13,990 --> 00:19:22,000
we can say i'm going to set the test

00:19:18,550 --> 00:19:25,030
variable to one and if that variable is

00:19:22,000 --> 00:19:27,670
set i want to run my test configuration

00:19:25,030 --> 00:19:30,220
otherwise i want to run my standard

00:19:27,670 --> 00:19:32,770
configuration you can define a variable

00:19:30,220 --> 00:19:34,600
like this either by setting a variable

00:19:32,770 --> 00:19:37,240
in your configuration file using the

00:19:34,600 --> 00:19:38,830
define directive or you can set it at

00:19:37,240 --> 00:19:44,970
the command line when you start the

00:19:38,830 --> 00:19:48,820
server up by using HTTP d dash detest

00:19:44,970 --> 00:19:51,010
the other thing that you can do is you

00:19:48,820 --> 00:19:53,430
can set a variable using define and then

00:19:51,010 --> 00:19:56,050
use it later on in a configuration

00:19:53,430 --> 00:19:58,960
directive so I've got a defined server

00:19:56,050 --> 00:20:02,170
name and then down at the bottom there

00:19:58,960 --> 00:20:05,290
I'm using that server name variable in

00:20:02,170 --> 00:20:08,730
my document root so if you look at the

00:20:05,290 --> 00:20:12,010
default configuration file now for 2.4

00:20:08,730 --> 00:20:14,500
you'll see that we set the document root

00:20:12,010 --> 00:20:16,720
once in a defined directive and then we

00:20:14,500 --> 00:20:18,310
use that several times later on once in

00:20:16,720 --> 00:20:22,300
a directory block and once in the

00:20:18,310 --> 00:20:23,830
document root and to to eliminate the

00:20:22,300 --> 00:20:28,030
repetition there so you only have to

00:20:23,830 --> 00:20:30,070
change that one place and that looks

00:20:28,030 --> 00:20:33,070
like this in the default 2.4

00:20:30,070 --> 00:20:35,440
configuration file you set the document

00:20:33,070 --> 00:20:37,120
root once and then it gets applied to

00:20:35,440 --> 00:20:40,500
all the other places that you may have

00:20:37,120 --> 00:20:40,500
overlooked in the past

00:20:43,660 --> 00:20:47,210
all right I think I was a little nervous

00:20:45,650 --> 00:20:48,950
there at the beginning because I'm not

00:20:47,210 --> 00:20:53,090
doing so well on pacing but hopefully

00:20:48,950 --> 00:20:54,710
you'll have lots of questions right the

00:20:53,090 --> 00:20:59,299
next thing that I want to talk about is

00:20:54,710 --> 00:21:01,309
mod heart monitor and this slide

00:20:59,299 --> 00:21:03,049
indicates that i was confused as to the

00:21:01,309 --> 00:21:06,710
schedule gym is going to be giving a

00:21:03,049 --> 00:21:08,720
talk about about proxy stuff in 2.4 and

00:21:06,710 --> 00:21:11,120
i presume he's going to be talking a

00:21:08,720 --> 00:21:16,790
little bit about mod heart monitor right

00:21:11,120 --> 00:21:20,600
Jim okay so in brief mod heart monitor

00:21:16,790 --> 00:21:22,669
is a way to monitor between and if he

00:21:20,600 --> 00:21:26,870
wasn't before he's hastily writing those

00:21:22,669 --> 00:21:29,059
slides now mod heart monitor is a way to

00:21:26,870 --> 00:21:30,830
maintain a connection between a

00:21:29,059 --> 00:21:34,070
front-end proxy server and a back-end

00:21:30,830 --> 00:21:36,110
server that's being proxy to so you have

00:21:34,070 --> 00:21:38,540
the heart monitor on the front end you

00:21:36,110 --> 00:21:40,640
have the heartbeat on the back and if

00:21:38,540 --> 00:21:42,530
the heart monitor ever ceases to hear

00:21:40,640 --> 00:21:45,169
the heartbeat it takes that server out

00:21:42,530 --> 00:21:47,750
of the proxy rotation this gives you a

00:21:45,169 --> 00:21:50,960
way to bring servers up and down on the

00:21:47,750 --> 00:21:55,419
back end without affecting the end users

00:21:50,960 --> 00:21:55,419
perception of what of the service

00:21:57,580 --> 00:22:03,760
speaking of talks that are coming up

00:21:59,750 --> 00:22:06,620
there is a new module called mod Lua and

00:22:03,760 --> 00:22:10,179
I'm blinded by the lights I think Daniel

00:22:06,620 --> 00:22:14,960
0 Daniel's stepped out for a moment but

00:22:10,179 --> 00:22:18,020
mod lua embeds a luarin Lua interpreter

00:22:14,960 --> 00:22:21,290
in your apache web server much like mod

00:22:18,020 --> 00:22:25,309
perl or mod python and it allows you to

00:22:21,290 --> 00:22:27,320
develop applications using Lua to run on

00:22:25,309 --> 00:22:30,559
httpd and he's going to be showing you

00:22:27,320 --> 00:22:33,100
some some really cool stuff tomorrow

00:22:30,559 --> 00:22:33,100
afternoon

00:22:34,970 --> 00:22:41,430
mod rate limit answers a question that

00:22:38,880 --> 00:22:44,640
we get again on the IRC channel all the

00:22:41,430 --> 00:22:46,620
time people want to slow down the

00:22:44,640 --> 00:22:49,950
throughput for a particular part of

00:22:46,620 --> 00:22:53,970
their website so the scenario here is I

00:22:49,950 --> 00:22:56,400
have a downloads directory and people

00:22:53,970 --> 00:22:58,380
are downloading stuff so much from that

00:22:56,400 --> 00:23:00,900
directory that it's consuming all of my

00:22:58,380 --> 00:23:05,820
bandwidth and the rest of my sight isn't

00:23:00,900 --> 00:23:09,840
accessible so mod mod rate limit

00:23:05,820 --> 00:23:12,330
addresses this this issue and it slows

00:23:09,840 --> 00:23:14,970
down the bandwidth consumption for that

00:23:12,330 --> 00:23:17,040
particular directory in this case to 400

00:23:14,970 --> 00:23:27,480
kilobits per second so that the rest of

00:23:17,040 --> 00:23:29,100
my website does not suffer in a couple

00:23:27,480 --> 00:23:31,470
hours i'm going to be talking at greater

00:23:29,100 --> 00:23:38,040
length about the access control changes

00:23:31,470 --> 00:23:40,470
in 2.4 the the issue that was trying to

00:23:38,040 --> 00:23:43,440
be addressed here was that the old

00:23:40,470 --> 00:23:47,490
syntax using order and allow and deny

00:23:43,440 --> 00:23:49,260
and satisfy was incredibly confusing but

00:23:47,490 --> 00:23:52,860
more importantly it was it was very

00:23:49,260 --> 00:23:54,900
limiting it limited how fine-grained

00:23:52,860 --> 00:23:59,070
your access control could actually be

00:23:54,900 --> 00:24:03,410
and the the new syntax completely deals

00:23:59,070 --> 00:24:06,480
away it does away with these old

00:24:03,410 --> 00:24:11,000
configuration directives and replaces it

00:24:06,480 --> 00:24:16,440
with a handful of required directives so

00:24:11,000 --> 00:24:19,050
here's a simple example that says i want

00:24:16,440 --> 00:24:21,470
to either require somebody to use get

00:24:19,050 --> 00:24:25,310
post or options or they've got to login

00:24:21,470 --> 00:24:27,900
so i'm going to require any which means

00:24:25,310 --> 00:24:31,260
one or more of these conditions is

00:24:27,900 --> 00:24:34,470
sufficient and then i state my required

00:24:31,260 --> 00:24:38,790
directives here's a slightly more

00:24:34,470 --> 00:24:40,860
complicated example which says i want to

00:24:38,790 --> 00:24:46,230
restrict access to this portion of my

00:24:40,860 --> 00:24:47,490
server based on the the ldap groups that

00:24:46,230 --> 00:24:50,120
i've got set up

00:24:47,490 --> 00:24:55,710
and I want them to either be a super

00:24:50,120 --> 00:24:59,460
super admin or I want them to be either

00:24:55,710 --> 00:25:01,530
administrator or in sales and I don't

00:24:59,460 --> 00:25:04,290
want them to be a temporary employee and

00:25:01,530 --> 00:25:09,150
unable to I'm able to say that kind of

00:25:04,290 --> 00:25:10,440
complicated scenario in this which you

00:25:09,150 --> 00:25:11,820
know it's a little bit ugly when you

00:25:10,440 --> 00:25:13,590
look at it at first but as you start

00:25:11,820 --> 00:25:17,040
breaking down into its component parts

00:25:13,590 --> 00:25:20,220
and understanding each one it's fairly

00:25:17,040 --> 00:25:22,710
clear and also was not possible before

00:25:20,220 --> 00:25:25,710
with the kind of fine-grained accuracy

00:25:22,710 --> 00:25:31,770
that you have now so i will be talking

00:25:25,710 --> 00:25:34,700
more about that at 4pm if you're if

00:25:31,770 --> 00:25:34,700
you're interested in the details

00:25:35,570 --> 00:25:42,530
everybody's favorite module mod rewrite

00:25:37,980 --> 00:25:46,710
has a few small tweaks to it there is a

00:25:42,530 --> 00:25:49,320
qsd flag that allows you to drop a query

00:25:46,710 --> 00:25:51,990
string there's a new end flag that

00:25:49,320 --> 00:25:58,740
allows you to avoid looping and rewrite

00:25:51,990 --> 00:26:02,210
rules the the biggest change that is in

00:25:58,740 --> 00:26:07,400
is in mod rewrite is the ability to use

00:26:02,210 --> 00:26:12,870
SQL statements as part of a rewrite rule

00:26:07,400 --> 00:26:15,980
so here's an example of using that I've

00:26:12,870 --> 00:26:21,780
got a rewrite map that indicates that

00:26:15,980 --> 00:26:25,470
specifies a sequel query and the percent

00:26:21,780 --> 00:26:27,510
s there is the requested URI or whatever

00:26:25,470 --> 00:26:30,929
it is that I feed to it in my rewrite

00:26:27,510 --> 00:26:34,500
rule and it does a database query

00:26:30,929 --> 00:26:37,260
returns the response you'll notice

00:26:34,500 --> 00:26:41,940
before the colon there is the keyword

00:26:37,260 --> 00:26:44,220
fast dbd and that indicates the type of

00:26:41,940 --> 00:26:45,660
rewrite map that's being defined and

00:26:44,220 --> 00:26:50,070
there's two different ways to say this

00:26:45,660 --> 00:26:53,070
one is by saying dbd which does the

00:26:50,070 --> 00:26:56,790
database query at request time then

00:26:53,070 --> 00:27:00,480
there's fast DVD which caches the result

00:26:56,790 --> 00:27:01,230
of that query so that if you have data

00:27:00,480 --> 00:27:03,360
that's

00:27:01,230 --> 00:27:05,700
changing frequently you want to do the

00:27:03,360 --> 00:27:07,290
request each time if it doesn't change

00:27:05,700 --> 00:27:09,210
frequently you want to cash it and you

00:27:07,290 --> 00:27:18,000
get an enormous performance improvement

00:27:09,210 --> 00:27:22,950
based on that the rotate logs utility

00:27:18,000 --> 00:27:25,830
comes with the server in order to rotate

00:27:22,950 --> 00:27:27,840
your logs so all of you have modern

00:27:25,830 --> 00:27:30,679
operating systems that rotate your logs

00:27:27,840 --> 00:27:33,450
as one of the system services however

00:27:30,679 --> 00:27:35,730
when you rotate your love your Apache

00:27:33,450 --> 00:27:38,220
server log files you have to restart the

00:27:35,730 --> 00:27:41,490
httpd process to get it to start logging

00:27:38,220 --> 00:27:44,549
to the new log file and sometimes that's

00:27:41,490 --> 00:27:48,870
not acceptable if the restart time is

00:27:44,549 --> 00:27:55,410
too much so we provide this this rewrite

00:27:48,870 --> 00:27:59,429
logs utility that that handles that for

00:27:55,410 --> 00:28:03,240
you as a piped log process it can rotate

00:27:59,429 --> 00:28:09,750
your log files based on time or based on

00:28:03,240 --> 00:28:13,500
file size and the syntax looks something

00:28:09,750 --> 00:28:15,720
like this that that line that's all one

00:28:13,500 --> 00:28:18,210
line wrapped for the benefit of the

00:28:15,720 --> 00:28:20,669
slide but you have a custom log

00:28:18,210 --> 00:28:24,570
directive that points at a piped log

00:28:20,669 --> 00:28:26,700
handler called rotate logs in this

00:28:24,570 --> 00:28:30,690
particular case I'm rotating my log

00:28:26,700 --> 00:28:41,190
every a 6,400 seconds which is 24 hours

00:28:30,690 --> 00:28:44,370
and the the dash L flag solves a problem

00:28:41,190 --> 00:28:46,740
that that users of the rewrite logs you

00:28:44,370 --> 00:28:48,840
too I'm sorry the rotate logs utility

00:28:46,740 --> 00:28:51,150
have had for a long time and that is

00:28:48,840 --> 00:28:54,570
that you never are quite sure what your

00:28:51,150 --> 00:28:56,790
log file is called in this case my

00:28:54,570 --> 00:29:00,720
command line there says put my log file

00:28:56,790 --> 00:29:04,559
in vara logs log file but in reality the

00:29:00,720 --> 00:29:07,380
log file is called log file dot unix

00:29:04,559 --> 00:29:09,990
timestamp so when I want to go and look

00:29:07,380 --> 00:29:12,630
at my log files I'm not really sure what

00:29:09,990 --> 00:29:14,400
my log files called until I look at the

00:29:12,630 --> 00:29:14,759
directory and find the latest one it's a

00:29:14,400 --> 00:29:19,049
bit of a

00:29:14,759 --> 00:29:23,789
Castle but the dash L flag is new and

00:29:19,049 --> 00:29:28,139
2.4 it creates a hard symbolic link to

00:29:23,789 --> 00:29:31,549
the current log file so i can just so i

00:29:28,139 --> 00:29:34,499
know what my log files called basically

00:29:31,549 --> 00:29:36,779
the other enhancement to the rotate logs

00:29:34,499 --> 00:29:38,969
utility is the ability to invoke

00:29:36,779 --> 00:29:41,879
something when the log file is rotated

00:29:38,969 --> 00:29:45,989
using the dash PFLAG if you have some

00:29:41,879 --> 00:29:48,329
sort of process that post post analyzes

00:29:45,989 --> 00:29:50,249
your log files you can invoke that at

00:29:48,329 --> 00:29:59,629
the moment that you rotate your logs for

00:29:50,249 --> 00:30:03,149
example earlier I mentioned mod macro

00:29:59,629 --> 00:30:06,509
mod macro is one of those modules that

00:30:03,149 --> 00:30:09,029
when I when I give training classes I

00:30:06,509 --> 00:30:12,239
invariably mention it as something that

00:30:09,029 --> 00:30:15,599
you should be using it is a third-party

00:30:12,239 --> 00:30:18,059
module that allows you to put macros in

00:30:15,599 --> 00:30:22,109
your log file and these macros are

00:30:18,059 --> 00:30:26,129
evaluated at startup time and allows you

00:30:22,109 --> 00:30:28,429
to create template eyes configuration

00:30:26,129 --> 00:30:28,429
files

00:30:35,140 --> 00:30:42,640
there we go just a month or so ago a

00:30:39,790 --> 00:30:46,360
couple months ago I guess mod macro was

00:30:42,640 --> 00:30:51,100
donated to the web server project and is

00:30:46,360 --> 00:30:55,240
now part of trunk it's not yet in 2.4 is

00:30:51,100 --> 00:30:56,710
it that's no so it's not in 2.4 yet

00:30:55,240 --> 00:30:59,350
hopefully it will be someday right now

00:30:56,710 --> 00:31:02,140
it's just in trunk so eventually it'll

00:30:59,350 --> 00:31:04,660
be in 2.6 but at some point perhaps it

00:31:02,140 --> 00:31:07,870
will be in 2.4 and mod macro is an

00:31:04,660 --> 00:31:13,180
amazingly powerful module so that made

00:31:07,870 --> 00:31:19,330
me very happy here's an example of using

00:31:13,180 --> 00:31:23,860
mod macro you define a macro with one or

00:31:19,330 --> 00:31:26,920
more variables and then you would be use

00:31:23,860 --> 00:31:29,860
directive you invoke that macro and you

00:31:26,920 --> 00:31:33,460
feed it variables so in this particular

00:31:29,860 --> 00:31:38,380
case I'm creating a directory block that

00:31:33,460 --> 00:31:43,780
has a certain authentication associated

00:31:38,380 --> 00:31:45,490
with it and act at server runtime it'll

00:31:43,780 --> 00:31:48,190
take that macro block it will evaluate

00:31:45,490 --> 00:31:50,830
it and it will generate these directory

00:31:48,190 --> 00:31:54,990
blocks now someone pointed out to me

00:31:50,830 --> 00:31:57,310
yesterday that this this can cause

00:31:54,990 --> 00:31:59,080
significant overhead at startup time so

00:31:57,310 --> 00:32:01,690
it's not it's not a magic bullet it is

00:31:59,080 --> 00:32:06,750
in fact generating a configuration which

00:32:01,690 --> 00:32:10,690
is then executed or evaluated and loaded

00:32:06,750 --> 00:32:18,370
so but but still it is a very cool

00:32:10,690 --> 00:32:22,180
module and that is pretty much the list

00:32:18,370 --> 00:32:24,640
of exciting new features in 2.4 there

00:32:22,180 --> 00:32:29,170
are other smaller things that I've

00:32:24,640 --> 00:32:32,920
probably neglected to mention but there

00:32:29,170 --> 00:32:37,860
you have it are there any any questions

00:32:32,920 --> 00:32:37,860
or comments yes sir

00:32:39,040 --> 00:32:45,260
yeah there's the URL for the slides they

00:32:43,490 --> 00:32:50,110
are not there right now they will be

00:32:45,260 --> 00:32:53,330
there a few minutes after I stop talking

00:32:50,110 --> 00:32:55,790
yes is there going to be another tox

00:32:53,330 --> 00:32:57,559
relation we'll just look on on the event

00:32:55,790 --> 00:33:04,940
mpm I thought that was actually the most

00:32:57,559 --> 00:33:09,700
compelling feature of 2.4 so in 2.2 and

00:33:04,940 --> 00:33:14,679
earlier the default mpm is pre fork and

00:33:09,700 --> 00:33:17,210
in 2.4 and later the default mpm is

00:33:14,679 --> 00:33:21,440
determined based on your user your

00:33:17,210 --> 00:33:23,270
operating system capabilities and what

00:33:21,440 --> 00:33:29,450
that means in the real world is that the

00:33:23,270 --> 00:33:31,130
default mpm in 2.4 is usually event it's

00:33:29,450 --> 00:33:33,650
based on whether your operating system

00:33:31,130 --> 00:33:35,960
is able to handle polling and threads

00:33:33,650 --> 00:33:37,940
and since most modern operating systems

00:33:35,960 --> 00:33:41,059
are that means event is the default

00:33:37,940 --> 00:33:43,640
there are still a few situations where

00:33:41,059 --> 00:33:45,740
you might want to use pre fork if you're

00:33:43,640 --> 00:33:47,750
running something that you're not sure

00:33:45,740 --> 00:33:51,679
about the thread safety of you want to

00:33:47,750 --> 00:33:56,750
stick with pre fork but the event 10pm

00:33:51,679 --> 00:33:59,540
is much more scalable and quite a bit

00:33:56,750 --> 00:34:04,640
faster so we're glad to have that out

00:33:59,540 --> 00:34:07,280
there is the default now yes so can you

00:34:04,640 --> 00:34:10,159
say something about the gotchas from

00:34:07,280 --> 00:34:11,210
upgrading 22 to 24 like it's does

00:34:10,159 --> 00:34:17,359
anything you need to worry about going

00:34:11,210 --> 00:34:20,710
from 22 to 24 upgrading from 22 22 to 24

00:34:17,359 --> 00:34:23,270
can have some gotchas we've tried to

00:34:20,710 --> 00:34:26,419
prevent some of the most obvious ones of

00:34:23,270 --> 00:34:28,460
that the change in the authenticate are

00:34:26,419 --> 00:34:30,230
the access control system is the one

00:34:28,460 --> 00:34:33,080
that's most likely to catch people

00:34:30,230 --> 00:34:36,200
because it's a significant configuration

00:34:33,080 --> 00:34:39,679
change and so there is a module called

00:34:36,200 --> 00:34:43,580
mod access compat which allows you to

00:34:39,679 --> 00:34:45,590
continue using the old syntax as you

00:34:43,580 --> 00:34:47,090
upgrade what would you say other gotchas

00:34:45,590 --> 00:34:50,169
all right that seems like the most

00:34:47,090 --> 00:34:50,169
obvious one to me

00:34:52,820 --> 00:34:57,570
yeah so you'd need to check that

00:34:54,810 --> 00:35:01,500
third-party modules are are still going

00:34:57,570 --> 00:35:08,280
to work for 24 but again I think those

00:35:01,500 --> 00:35:13,770
would be the two biggest things yes I'm

00:35:08,280 --> 00:35:17,119
sorry I can't hear not sure that I have

00:35:13,770 --> 00:35:17,119
an answer for that Jeff you want it

00:35:48,920 --> 00:35:54,750
had a couple of questions well sorry

00:35:52,490 --> 00:35:57,030
alright

00:35:54,750 --> 00:35:58,530
we are recording the session so if you

00:35:57,030 --> 00:36:00,540
could grab a microphone when you ask a

00:35:58,530 --> 00:36:03,470
question that would be helpful I can

00:36:00,540 --> 00:36:05,690
hear but the mic the speaker board can't

00:36:03,470 --> 00:36:08,370
I've got a couple of quick questions

00:36:05,690 --> 00:36:11,370
first is you mentioned defining

00:36:08,370 --> 00:36:13,110
variables can you redefine those a sort

00:36:11,370 --> 00:36:15,300
of during parsing so you can you say my

00:36:13,110 --> 00:36:16,650
server names this do some things now my

00:36:15,300 --> 00:36:20,220
server name is something else or is that

00:36:16,650 --> 00:36:22,110
best done using macros yes so the

00:36:20,220 --> 00:36:25,950
question is can you redefine a variable

00:36:22,110 --> 00:36:27,600
and you can and it gets it gets used the

00:36:25,950 --> 00:36:30,690
new value gets use from that point down

00:36:27,600 --> 00:36:33,330
there's also a directive called I think

00:36:30,690 --> 00:36:38,220
it's undefined that completely unset so

00:36:33,330 --> 00:36:40,620
value ok also for the rewrite map where

00:36:38,220 --> 00:36:42,780
you can execute a sequel query yeah if

00:36:40,620 --> 00:36:45,330
you chose to cash that is there a way to

00:36:42,780 --> 00:36:50,100
trigger a reload without doing like a

00:36:45,330 --> 00:36:52,410
cig hop or something like that no in

00:36:50,100 --> 00:36:56,010
order to reload the cash you would have

00:36:52,410 --> 00:36:59,880
to need to restart this process ok and

00:36:56,010 --> 00:37:02,100
finally for for the directory specific

00:36:59,880 --> 00:37:03,410
log level or is it possible or that are

00:37:02,100 --> 00:37:05,730
there any plans to support

00:37:03,410 --> 00:37:08,610
location-based log level rather than

00:37:05,730 --> 00:37:10,920
directory I think you can use that in

00:37:08,610 --> 00:37:13,770
location so yeah when when we talked in

00:37:10,920 --> 00:37:19,470
the documentation about directory it

00:37:13,770 --> 00:37:22,080
also includes location proxy and you

00:37:19,470 --> 00:37:24,270
know a number of other sections files

00:37:22,080 --> 00:37:28,500
that's the other one so yeah that is

00:37:24,270 --> 00:37:30,330
already there a slightly odd question

00:37:28,500 --> 00:37:32,160
but you showed us all these wonderful

00:37:30,330 --> 00:37:34,710
things that are in 24 we have lots of

00:37:32,160 --> 00:37:37,200
teams are still running 22 when you guys

00:37:34,710 --> 00:37:38,850
are planning on end of liking 22 can I

00:37:37,200 --> 00:37:40,650
use that as a kid these teams I kick in

00:37:38,850 --> 00:37:42,570
the pants to go ahead and upgrade beyond

00:37:40,650 --> 00:37:46,410
the obvious advantages that you would

00:37:42,570 --> 00:37:49,200
have here hmm that kind of question

00:37:46,410 --> 00:37:51,750
tends to get a lot of debate when it

00:37:49,200 --> 00:37:53,550
comes up on the mailing list because we

00:37:51,750 --> 00:37:57,120
do have so many millions of sites that

00:37:53,550 --> 00:37:59,600
are still using 1.3 and when we finally

00:37:57,120 --> 00:38:02,490
declared that we were end of life in 1.3

00:37:59,600 --> 00:38:05,490
there were people that were anxious

00:38:02,490 --> 00:38:08,190
about that the discussion is currently

00:38:05,490 --> 00:38:10,920
on going on and off about whether

00:38:08,190 --> 00:38:15,329
to end of light to point o and so the

00:38:10,920 --> 00:38:17,730
2.2 discussion you know on the one hand

00:38:15,329 --> 00:38:19,530
for my opinion it can't come soon enough

00:38:17,730 --> 00:38:22,050
but there are a lot of people that would

00:38:19,530 --> 00:38:25,520
be upset by that the other side of that

00:38:22,050 --> 00:38:27,810
answer is that the httpd project is

00:38:25,520 --> 00:38:31,920
volunteer based and people work on

00:38:27,810 --> 00:38:35,430
whatever they want to and if people want

00:38:31,920 --> 00:38:37,890
to keep working on 2.2 forever nobody's

00:38:35,430 --> 00:38:40,859
going to tell them not to but in reality

00:38:37,890 --> 00:38:43,319
nobody's working on it anymore except

00:38:40,859 --> 00:38:45,359
for those few of us on the documentation

00:38:43,319 --> 00:38:49,410
team that are back porting Doc's patches

00:38:45,359 --> 00:38:52,319
so in reality it's sort of already end

00:38:49,410 --> 00:38:58,730
of life but but officially it's still a

00:38:52,319 --> 00:38:58,730
product that that we stand behind yes

00:39:02,080 --> 00:39:08,190
just a little add on to that we also

00:39:04,330 --> 00:39:11,560
have a couple of people from distros who

00:39:08,190 --> 00:39:15,550
maintain packages so those people are

00:39:11,560 --> 00:39:18,390
still invested in older products

00:39:15,550 --> 00:39:21,640
especially if those distros have

00:39:18,390 --> 00:39:24,460
long-term supports such as Rahel and the

00:39:21,640 --> 00:39:25,900
boom tube and on that note let me answer

00:39:24,460 --> 00:39:29,140
a question that's been asked several

00:39:25,900 --> 00:39:31,090
times this week fedora I believe is the

00:39:29,140 --> 00:39:35,800
only linux distribution that's currently

00:39:31,090 --> 00:39:38,740
shipping 2.4 so so far as the lennox

00:39:35,800 --> 00:39:41,350
world goes 2.2 is still the de facto

00:39:38,740 --> 00:39:45,790
version that unless you intentionally

00:39:41,350 --> 00:39:49,300
upgrade the configuration file variables

00:39:45,790 --> 00:39:51,130
is that basically taking over the

00:39:49,300 --> 00:39:54,130
functionality of the third-party module

00:39:51,130 --> 00:39:56,050
modifying you know I don't know that

00:39:54,130 --> 00:39:57,730
I've ever used mod defined but based on

00:39:56,050 --> 00:40:00,100
the name that we say yes it's the same

00:39:57,730 --> 00:40:01,810
from your examples it seems that it is

00:40:00,100 --> 00:40:04,300
okay and I'm curious about the

00:40:01,810 --> 00:40:06,850
interactions between that which i guess

00:40:04,300 --> 00:40:10,990
is part of the Cornell yeah and mod

00:40:06,850 --> 00:40:14,740
macro say for example you define a macro

00:40:10,990 --> 00:40:17,920
that's got six variables and when you

00:40:14,740 --> 00:40:20,740
invoke it you only specify first three

00:40:17,920 --> 00:40:24,220
yeah would it draw the remaining three

00:40:20,740 --> 00:40:26,340
from anything that might have been

00:40:24,220 --> 00:40:28,450
defined as a configuration file variable

00:40:26,340 --> 00:40:33,100
there was being able to set a bunch of

00:40:28,450 --> 00:40:35,530
defaults and then only to find the ones

00:40:33,100 --> 00:40:38,890
that are necessary for you obviously the

00:40:35,530 --> 00:40:41,350
syntax requires it to be yeah you know

00:40:38,890 --> 00:40:43,360
positional but and there are there are

00:40:41,350 --> 00:40:46,000
overlaps between it simply because

00:40:43,360 --> 00:40:48,310
they're using similar syntax I noticed

00:40:46,000 --> 00:40:51,670
the scent idea is different from the

00:40:48,310 --> 00:40:53,500
modified syntax okay but the syntax

00:40:51,670 --> 00:40:56,440
between this and mod macro are the same

00:40:53,500 --> 00:40:58,720
mod macro has conventions that you might

00:40:56,440 --> 00:41:02,860
want to follow if i can find that slide

00:40:58,720 --> 00:41:04,510
again so mod macro has conventions that

00:41:02,860 --> 00:41:06,760
you put a dollar sign in front of it but

00:41:04,510 --> 00:41:08,740
you don't have to you can also put a

00:41:06,760 --> 00:41:12,040
dollar sign in curly braces around it

00:41:08,740 --> 00:41:13,630
but you don't have to and I what we're

00:41:12,040 --> 00:41:14,770
leaning towards recommending I think

00:41:13,630 --> 00:41:17,610
what we recommend in the

00:41:14,770 --> 00:41:22,600
I'm entation is that you adhere to those

00:41:17,610 --> 00:41:24,610
those guidelines that are not

00:41:22,600 --> 00:41:26,200
requirements but to differentiate

00:41:24,610 --> 00:41:28,750
between the two but yeah you can run

00:41:26,200 --> 00:41:30,840
into situations where you step on your

00:41:28,750 --> 00:41:34,600
own variables if you're not careful so

00:41:30,840 --> 00:41:36,010
using the undefined is a good idea to to

00:41:34,600 --> 00:41:37,630
drop a variable when you think it's

00:41:36,010 --> 00:41:46,570
going to go out is when you're no longer

00:41:37,630 --> 00:41:48,760
needing it so yesterday we spoke about

00:41:46,570 --> 00:41:51,600
how it's sometimes more efficient to put

00:41:48,760 --> 00:41:54,310
certain rewrite rules in a rewrite map

00:41:51,600 --> 00:41:58,360
but the disadvantages with the rewrite

00:41:54,310 --> 00:42:00,520
map they may crash the instance upon a

00:41:58,360 --> 00:42:03,270
restart or when you push the new map

00:42:00,520 --> 00:42:06,190
file Apache loads the reread thing

00:42:03,270 --> 00:42:09,940
automatically so how do you prevent like

00:42:06,190 --> 00:42:13,390
a typo or some kind of syntax error from

00:42:09,940 --> 00:42:16,690
causing the Apaches over to crash with a

00:42:13,390 --> 00:42:17,800
rewrite map yeah so that the context in

00:42:16,690 --> 00:42:20,020
which I made that comment was

00:42:17,800 --> 00:42:22,120
specifically about use I think trying to

00:42:20,020 --> 00:42:26,470
remember it's talking about rewrite map

00:42:22,120 --> 00:42:28,630
using the prg syntax where you're

00:42:26,470 --> 00:42:31,000
invoking an external process to act as

00:42:28,630 --> 00:42:33,220
the rewrite map but I suppose that the

00:42:31,000 --> 00:42:36,100
the problem is is broader than that if

00:42:33,220 --> 00:42:38,380
not even with prg just just using

00:42:36,100 --> 00:42:41,440
regular text rewrite map or even maybe a

00:42:38,380 --> 00:42:43,570
sequel rewrite now yeah rewrite bloom

00:42:41,440 --> 00:42:45,250
app lets you reference a plain text file

00:42:43,570 --> 00:42:46,960
with a one-to-one mapping or it lets you

00:42:45,250 --> 00:42:49,230
reference an external program that can

00:42:46,960 --> 00:42:53,350
provide that mapping functionality and

00:42:49,230 --> 00:42:55,450
it's in that latter case where you can

00:42:53,350 --> 00:42:57,790
end up in a situation where that that

00:42:55,450 --> 00:43:01,120
external program has crapped out for

00:42:57,790 --> 00:43:03,580
whatever reason and the httpd process

00:43:01,120 --> 00:43:05,740
doesn't notice and starts getting bogus

00:43:03,580 --> 00:43:11,440
data back from the nothing that's there

00:43:05,740 --> 00:43:13,510
I I tend to not recommend using that

00:43:11,440 --> 00:43:15,910
feature on production servers you know

00:43:13,510 --> 00:43:17,620
use it as a as a quick prototyping a

00:43:15,910 --> 00:43:21,430
quick fix kind of thing before you have

00:43:17,620 --> 00:43:22,840
a real solution but I guess you could

00:43:21,430 --> 00:43:25,090
you could maybe get into the same

00:43:22,840 --> 00:43:26,980
situation with the dude with the dbd one

00:43:25,090 --> 00:43:31,600
if your database went away

00:43:26,980 --> 00:43:34,320
I'm not sure what would happen to those

00:43:31,600 --> 00:43:37,630
mapping queries that have to try that it

00:43:34,320 --> 00:43:40,630
I guess you need to monitor your

00:43:37,630 --> 00:43:41,740
database server pretty closely to to

00:43:40,630 --> 00:43:44,080
prevent that kind of thing from

00:43:41,740 --> 00:43:48,340
happening but even text errors in the

00:43:44,080 --> 00:43:50,140
text files is there any way to just some

00:43:48,340 --> 00:43:53,590
tax check those i can check config with

00:43:50,140 --> 00:43:56,080
a check and fig check if never reaffirm

00:43:53,590 --> 00:44:00,160
that file exists um if you're using a

00:43:56,080 --> 00:44:04,359
text map file then on startup it's going

00:44:00,160 --> 00:44:06,430
to parse that file and it's going to

00:44:04,359 --> 00:44:08,530
throw an error message on startup if the

00:44:06,430 --> 00:44:09,760
syntax is incorrect in that file right

00:44:08,530 --> 00:44:11,950
but if you have like a cluster for

00:44:09,760 --> 00:44:13,600
patchy servers and you update your

00:44:11,950 --> 00:44:16,060
update defiantly and you push it out to

00:44:13,600 --> 00:44:17,740
production yeah the patchy process

00:44:16,060 --> 00:44:20,109
checks the disk and see that the

00:44:17,740 --> 00:44:25,180
timestamp was updated and loads of new

00:44:20,109 --> 00:44:26,710
file finds a syntax error in my crash so

00:44:25,180 --> 00:44:29,380
there's any way to prevent that that

00:44:26,710 --> 00:44:34,930
would be nice now I'm not aware of one

00:44:29,380 --> 00:44:37,450
other than being vigilant if if you

00:44:34,930 --> 00:44:40,480
convert if you convert that text file to

00:44:37,450 --> 00:44:42,790
a DVM and use a dbm instead then that

00:44:40,480 --> 00:44:44,770
conversion process does syntax check the

00:44:42,790 --> 00:44:45,940
file so that might be the best way to do

00:44:44,770 --> 00:44:53,190
that and it gives you the added

00:44:45,940 --> 00:44:53,190
performance benefit of the DBM thank you

00:44:56,030 --> 00:45:02,190
all right any more questions great just

00:44:59,430 --> 00:45:04,440
one quick one are there performance

00:45:02,190 --> 00:45:06,330
benefits as far as a shorter code path

00:45:04,440 --> 00:45:07,830
to using if instead of mod rewrite

00:45:06,330 --> 00:45:11,790
because I see a lot of overlap and

00:45:07,830 --> 00:45:13,290
functionality you know the performance

00:45:11,790 --> 00:45:17,210
is going to be comparable that the

00:45:13,290 --> 00:45:21,180
benefit is the the maintenance

00:45:17,210 --> 00:45:24,300
efficiency the ability to actually read

00:45:21,180 --> 00:45:26,190
what your configuration file says there

00:45:24,300 --> 00:45:28,850
are cases where one or the other is

00:45:26,190 --> 00:45:32,880
going to be more efficient at runtime

00:45:28,850 --> 00:45:37,740
but both of those things the if

00:45:32,880 --> 00:45:40,670
statements are evaluated per request so

00:45:37,740 --> 00:45:43,380
there is there is some overhead there

00:45:40,670 --> 00:45:45,600
mod rewrite does some optimization like

00:45:43,380 --> 00:45:47,790
recompiling the regular expressions at

00:45:45,600 --> 00:45:50,610
startup so there's a little bit more

00:45:47,790 --> 00:45:52,500
efficiency there so you know it very

00:45:50,610 --> 00:45:55,430
much depends on the specific scenario

00:45:52,500 --> 00:45:55,430
that you're using it for

00:46:00,100 --> 00:46:05,440
okay so we were actually a replying to

00:46:03,640 --> 00:46:08,020
Fanny shot Peter thinking quarter past

00:46:05,440 --> 00:46:09,400
so we'll have some time I'm sure you can

00:46:08,020 --> 00:46:11,890
catch up with rich so I'd like to thank

00:46:09,400 --> 00:46:13,570
direction of a free presentation and we

00:46:11,890 --> 00:46:16,480
have the next presentation and tomcat at

00:46:13,570 --> 00:46:18,630
quarter past so if Thank You reg thank

00:46:16,480 --> 00:46:18,630

YouTube URL: https://www.youtube.com/watch?v=ElzXfb4n_GA


