Title: Apache CloudStack's Plugin Model: Balancing the Cathedral with a Bazaar
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Don Lafferty ApacheCon NA 2013
Cloud Crowd
Captions: 
	00:00:00,000 --> 00:00:07,020
you so so this is the slides about

00:00:04,049 --> 00:00:10,530
apache cloudstack plugin model and how

00:00:07,020 --> 00:00:12,450
it balances a cathedral approach very

00:00:10,530 --> 00:00:15,480
structured with a bizarre approach where

00:00:12,450 --> 00:00:18,390
everyone can set up their stall and it's

00:00:15,480 --> 00:00:21,300
rooted in specific case study of adding

00:00:18,390 --> 00:00:25,350
hyper-v support to hyper-v sorry too

00:00:21,300 --> 00:00:27,689
cloudstack anyways and so I just start

00:00:25,350 --> 00:00:30,960
out with a little bit about myself show

00:00:27,689 --> 00:00:32,960
of hands people who commute to work okay

00:00:30,960 --> 00:00:35,219
i'm i'm the only person who commutes my

00:00:32,960 --> 00:00:37,260
mode of transport is this bike in the

00:00:35,219 --> 00:00:38,790
background nine and a half mile ride

00:00:37,260 --> 00:00:41,489
each way to work it's a really good

00:00:38,790 --> 00:00:46,710
workout in the morning show of hands the

00:00:41,489 --> 00:00:48,750
people work from home how many well it

00:00:46,710 --> 00:00:51,600
depends because it's it's uphill one way

00:00:48,750 --> 00:00:53,760
and it's downhill the other way so 29

00:00:51,600 --> 00:00:55,590
minutes on the way back about 30 miles

00:00:53,760 --> 00:00:57,809
an hour and then on the way there it's a

00:00:55,590 --> 00:00:59,699
bit harder but there's a huge queue of

00:00:57,809 --> 00:01:02,070
people who commute and they're all stuck

00:00:59,699 --> 00:01:04,290
in a traffic jam and even though the

00:01:02,070 --> 00:01:05,939
hill really hurts going up I will smile

00:01:04,290 --> 00:01:07,830
the whole way oh I'm loving this this is

00:01:05,939 --> 00:01:10,619
great if you like throwing up don't let

00:01:07,830 --> 00:01:11,970
them know so that's me and then when I'm

00:01:10,619 --> 00:01:14,790
working from home I like to have things

00:01:11,970 --> 00:01:15,869
to remind me things to motivate me so

00:01:14,790 --> 00:01:17,790
you see in the background there's my

00:01:15,869 --> 00:01:20,580
favorite Cup it's a nice picture of my

00:01:17,790 --> 00:01:22,650
wife there and and the dog of course

00:01:20,580 --> 00:01:23,909
he's great fun to have around bit of

00:01:22,650 --> 00:01:25,920
company while he worked from home and

00:01:23,909 --> 00:01:28,290
it's all mashed into one place because I

00:01:25,920 --> 00:01:29,790
live in the UK and the houses they were

00:01:28,290 --> 00:01:32,430
tiny and they were built a century ago

00:01:29,790 --> 00:01:36,180
and so you've gotta cram as much into

00:01:32,430 --> 00:01:38,670
his little space as possible ok so this

00:01:36,180 --> 00:01:40,950
presentation there's some things you

00:01:38,670 --> 00:01:43,950
need to know some background to

00:01:40,950 --> 00:01:46,409
understand what I'm saying and that's

00:01:43,950 --> 00:01:48,689
rooted in the call for submissions so if

00:01:46,409 --> 00:01:49,979
you look on the call submissions website

00:01:48,689 --> 00:01:52,649
it talked about the theme of the

00:01:49,979 --> 00:01:54,509
conference which is open source

00:01:52,649 --> 00:01:56,640
community drives enterprise-grade

00:01:54,509 --> 00:02:00,570
innovation and I've emphasized

00:01:56,640 --> 00:02:02,610
enterprising great because it's my

00:02:00,570 --> 00:02:04,979
position that for something to be truly

00:02:02,610 --> 00:02:07,770
enterprise-grade or what Enterprise

00:02:04,979 --> 00:02:09,929
wants rather is long-lived software

00:02:07,770 --> 00:02:11,910
there's two aspects to being long live

00:02:09,929 --> 00:02:14,700
software first

00:02:11,910 --> 00:02:16,800
your software can adapt to changes it's

00:02:14,700 --> 00:02:19,050
very malleable and that's perfect for

00:02:16,800 --> 00:02:20,880
the open source community because our

00:02:19,050 --> 00:02:23,310
software is unencumbered by restrictive

00:02:20,880 --> 00:02:25,470
licenses it's a transparent development

00:02:23,310 --> 00:02:28,680
process and you know you can get at the

00:02:25,470 --> 00:02:30,180
code very easily that's great so it's

00:02:28,680 --> 00:02:31,440
like the bizarre model where anyone can

00:02:30,180 --> 00:02:34,290
set up their stall and start making

00:02:31,440 --> 00:02:39,360
innovations but Enterprise also want

00:02:34,290 --> 00:02:40,710
things that are going to last for long

00:02:39,360 --> 00:02:41,850
periods of time which means they want a

00:02:40,710 --> 00:02:43,740
certain amount of structure to the

00:02:41,850 --> 00:02:46,710
innovations that you make essentially

00:02:43,740 --> 00:02:49,290
they want additions to the product to be

00:02:46,710 --> 00:02:52,170
decoupled from the underlying system so

00:02:49,290 --> 00:02:54,840
when that system evolves or changes the

00:02:52,170 --> 00:02:58,020
the innovations or adaptations continue

00:02:54,840 --> 00:03:01,890
to work and so essentially enterprise

00:02:58,020 --> 00:03:04,890
they want a structured means to extend

00:03:01,890 --> 00:03:07,440
or change a product so not really

00:03:04,890 --> 00:03:13,290
looking for fork style and adaptations

00:03:07,440 --> 00:03:14,400
that are easily become I guess don't

00:03:13,290 --> 00:03:17,730
evolve with the underlying product

00:03:14,400 --> 00:03:19,230
they're not good either so the second

00:03:17,730 --> 00:03:22,500
point to make is that this track is

00:03:19,230 --> 00:03:24,630
about how Apache initiatives play a key

00:03:22,500 --> 00:03:27,330
role and pay empowering today's cloud

00:03:24,630 --> 00:03:29,640
and I've emphasized today's cloud

00:03:27,330 --> 00:03:31,380
because it's my position that

00:03:29,640 --> 00:03:33,990
infrastructures a service now that's

00:03:31,380 --> 00:03:38,910
about embracing the heterogeneous data

00:03:33,990 --> 00:03:39,959
center and what I mean is enterprise

00:03:38,910 --> 00:03:43,680
they like these cloud like

00:03:39,959 --> 00:03:46,950
characteristics of elasticity pool

00:03:43,680 --> 00:03:48,570
resources needed services but they want

00:03:46,950 --> 00:03:50,850
to be able to run an existing compute

00:03:48,570 --> 00:03:53,160
load and that's a bit of a problem

00:03:50,850 --> 00:03:54,450
because if you think back to when we

00:03:53,160 --> 00:03:56,340
started doing infrastructure as a

00:03:54,450 --> 00:03:58,709
service maybe five years ago the papers

00:03:56,340 --> 00:04:01,709
talked about how you would get this five

00:03:58,709 --> 00:04:07,800
to seven times reduction in costs of

00:04:01,709 --> 00:04:11,100
networking power administration hardware

00:04:07,800 --> 00:04:13,230
and that Holy Grail was achieved by

00:04:11,100 --> 00:04:15,030
using a commodity driven cloud and the

00:04:13,230 --> 00:04:16,920
problem there is that you have to

00:04:15,030 --> 00:04:20,550
rewrite the software

00:04:16,920 --> 00:04:21,930
take into account of failure rate so you

00:04:20,550 --> 00:04:26,580
take a look at the archetypical cloud

00:04:21,930 --> 00:04:28,380
like AWS and it's got a steady rate of

00:04:26,580 --> 00:04:31,860
vm failure based on when the underlying

00:04:28,380 --> 00:04:35,790
hardware gives way whereas the model

00:04:31,860 --> 00:04:39,000
that the enterprise is looking for is to

00:04:35,790 --> 00:04:42,450
have you no more characteristics

00:04:39,000 --> 00:04:44,520
available to their VMs so going back to

00:04:42,450 --> 00:04:47,340
the idea that enterprise they want to

00:04:44,520 --> 00:04:48,570
run existing compute loads okay well so

00:04:47,340 --> 00:04:51,270
what does it take to run a virtual

00:04:48,570 --> 00:04:52,850
desktop well you want to have a vm

00:04:51,270 --> 00:04:55,260
running in the cloud that's great

00:04:52,850 --> 00:04:57,750
perfect for commodity driven hardware

00:04:55,260 --> 00:04:59,730
not so good if you want the data to

00:04:57,750 --> 00:05:02,040
persist in that cloud then you not need

00:04:59,730 --> 00:05:05,670
to start introducing specialized kinds

00:05:02,040 --> 00:05:09,140
of storage for the data discs etc so the

00:05:05,670 --> 00:05:11,490
plug-in model and CloudStack is meant to

00:05:09,140 --> 00:05:13,920
address these first two points

00:05:11,490 --> 00:05:15,570
enterprise-grade so you've got these

00:05:13,920 --> 00:05:17,700
plugins that are decoupled from the

00:05:15,570 --> 00:05:20,280
underlying CloudStack so they should

00:05:17,700 --> 00:05:22,080
last a long time and then the plugin

00:05:20,280 --> 00:05:25,160
model is it stands really focuses on

00:05:22,080 --> 00:05:28,710
adding a diversity of hardware and

00:05:25,160 --> 00:05:30,120
resources and devices in your cloud so

00:05:28,710 --> 00:05:32,430
that the last point is also worth

00:05:30,120 --> 00:05:34,290
mentioning here if you look at the call

00:05:32,430 --> 00:05:36,140
for submissions they say hey come on now

00:05:34,290 --> 00:05:39,780
demonstrate some real world experience

00:05:36,140 --> 00:05:41,220
of solving specific problems so I don't

00:05:39,780 --> 00:05:43,620
want me to get up here and philosophize

00:05:41,220 --> 00:05:45,810
they want it rooted in a serious

00:05:43,620 --> 00:05:48,360
programming effort and so what we've

00:05:45,810 --> 00:05:50,760
chosen to do is go for plug-in that

00:05:48,360 --> 00:05:53,640
introduces hyper-v support to CloudStack

00:05:50,760 --> 00:05:54,960
now it's well motivated because in if

00:05:53,640 --> 00:05:56,310
you looked at cloudstack one of the

00:05:54,960 --> 00:05:58,050
benefits was that it would

00:05:56,310 --> 00:06:02,790
simultaneously run a number of different

00:05:58,050 --> 00:06:04,920
hypervisor types kvm Zen VMware and now

00:06:02,790 --> 00:06:06,720
that hyper-v is a very serious contender

00:06:04,920 --> 00:06:09,120
for VMware it's time to introduce it to

00:06:06,720 --> 00:06:11,160
cloudstack and notice I've said as a

00:06:09,120 --> 00:06:13,920
newcomer know if you guys can see that

00:06:11,160 --> 00:06:15,300
but I've italicized it to emphasize the

00:06:13,920 --> 00:06:17,220
fact that you know I'm off on my own

00:06:15,300 --> 00:06:19,020
doing this so I'm isolated

00:06:17,220 --> 00:06:20,910
geographically and by time zones from

00:06:19,020 --> 00:06:23,640
the border brought a CloudStack team

00:06:20,910 --> 00:06:25,470
working at a citrix and so the

00:06:23,640 --> 00:06:27,150
experiences that I see are what a

00:06:25,470 --> 00:06:28,840
non-committed would see when they came

00:06:27,150 --> 00:06:30,220
to this project

00:06:28,840 --> 00:06:32,110
so just just keep those things in mind

00:06:30,220 --> 00:06:34,000
because it tells you where I'm coming

00:06:32,110 --> 00:06:35,650
from and what I'm trying to get at okay

00:06:34,000 --> 00:06:38,530
so now I'm just going to make a series

00:06:35,650 --> 00:06:41,020
of points that cropped up when i started

00:06:38,530 --> 00:06:42,580
making the plug-in to support hyper-v

00:06:41,020 --> 00:06:44,020
the first one is that they the

00:06:42,580 --> 00:06:46,570
innovators they really need the system

00:06:44,020 --> 00:06:48,760
to be disaggregated so if you look at

00:06:46,570 --> 00:06:51,010
CloudStack architecture diagram is a bit

00:06:48,760 --> 00:06:53,530
like this there's a lot going on and the

00:06:51,010 --> 00:06:56,229
implicit the implication is that there's

00:06:53,530 --> 00:06:58,240
a lot of knowledge and a lot of code to

00:06:56,229 --> 00:07:00,040
be understood before you can start

00:06:58,240 --> 00:07:02,290
making contributions to it so you've got

00:07:00,040 --> 00:07:03,490
these boxes when you look at the

00:07:02,290 --> 00:07:05,080
underlying code there's a lot of

00:07:03,490 --> 00:07:09,400
independent interdependencies between

00:07:05,080 --> 00:07:11,410
them and so if you are going to tackle

00:07:09,400 --> 00:07:15,130
the problem adding a feature not only

00:07:11,410 --> 00:07:16,660
would you have you dead you'd

00:07:15,130 --> 00:07:18,160
essentially have the problem that your

00:07:16,660 --> 00:07:20,110
changes would be difficult to isolate

00:07:18,160 --> 00:07:22,150
from the broader system that's an issue

00:07:20,110 --> 00:07:23,950
for testing because it means you'd have

00:07:22,150 --> 00:07:26,380
to bring up an entire system in order to

00:07:23,950 --> 00:07:30,310
test your changes which in itself is

00:07:26,380 --> 00:07:31,690
time-consuming but it's also it's also

00:07:30,310 --> 00:07:34,419
difficulty because you have to wear a

00:07:31,690 --> 00:07:36,400
lot of different programmers hats so at

00:07:34,419 --> 00:07:39,760
the top level you'd be more interested

00:07:36,400 --> 00:07:41,110
in understanding how restful api s were

00:07:39,760 --> 00:07:42,610
implemented all the way down to

00:07:41,110 --> 00:07:45,280
provisioning over the corner where

00:07:42,610 --> 00:07:47,020
you're really interested in system

00:07:45,280 --> 00:07:49,810
programming how do you control these

00:07:47,020 --> 00:07:51,820
hypervisors out in the cloud so in the

00:07:49,810 --> 00:07:54,960
words of Jimmy McMillan learning

00:07:51,820 --> 00:07:58,539
CloudStack all at once is too damn hard

00:07:54,960 --> 00:08:00,250
so what happened then is you know the

00:07:58,539 --> 00:08:02,410
clouds tech people they realize this and

00:08:00,250 --> 00:08:04,120
they started disaggregating that is

00:08:02,410 --> 00:08:06,520
breaking the system up into discrete

00:08:04,120 --> 00:08:08,860
pieces and they started with hardware

00:08:06,520 --> 00:08:11,919
and so what they've done is they've

00:08:08,860 --> 00:08:15,099
separated the management of hardware in

00:08:11,919 --> 00:08:18,700
the data center from the implementation

00:08:15,099 --> 00:08:21,280
of the steps involved in an API call so

00:08:18,700 --> 00:08:23,080
on the one hand you have hardware

00:08:21,280 --> 00:08:25,270
management which is referred to as

00:08:23,080 --> 00:08:30,490
provisioning and that converts a

00:08:25,270 --> 00:08:32,529
specific step in say vm deploy the m vm

00:08:30,490 --> 00:08:33,969
creation it will translate that specific

00:08:32,529 --> 00:08:36,580
step into something that's meaningful

00:08:33,969 --> 00:08:37,690
for the hypervisor you're targeting on

00:08:36,580 --> 00:08:39,339
the other hand we've got cloud

00:08:37,690 --> 00:08:42,279
orchestration so cloud orchestration

00:08:39,339 --> 00:08:46,050
that aggregates up all the steps in

00:08:42,279 --> 00:08:48,790
an API call so take the example of

00:08:46,050 --> 00:08:52,629
deploying a virtual machine there's a

00:08:48,790 --> 00:08:54,100
bunch of pieces that have to there's a

00:08:52,629 --> 00:08:56,290
bunch of steps involved and there

00:08:54,100 --> 00:08:58,660
they're listed in these boxes here so

00:08:56,290 --> 00:09:00,339
the orchestration engine it's going to

00:08:58,660 --> 00:09:01,930
be responsible for deploying a virtual

00:09:00,339 --> 00:09:03,639
machine it will go to the network

00:09:01,930 --> 00:09:06,009
manager say hey is there a network

00:09:03,639 --> 00:09:07,569
available once there is it goes the

00:09:06,009 --> 00:09:09,129
template manager and says hey can you

00:09:07,569 --> 00:09:11,230
navigate this template down to a

00:09:09,129 --> 00:09:13,629
hypervisor and so on to the storage

00:09:11,230 --> 00:09:15,819
manner to build you a volume to the vm

00:09:13,629 --> 00:09:18,129
manager to say hey attach the volume to

00:09:15,819 --> 00:09:20,589
something and add to a virtual machine

00:09:18,129 --> 00:09:23,350
and start it up and that's orchestration

00:09:20,589 --> 00:09:26,259
the sequence of steps then the other bit

00:09:23,350 --> 00:09:29,019
that's provisioning so take the specific

00:09:26,259 --> 00:09:31,930
example of your virtual machine manager

00:09:29,019 --> 00:09:34,149
going off to a hypervisor and saying hey

00:09:31,930 --> 00:09:36,040
can you create me a vm well it delegates

00:09:34,149 --> 00:09:37,990
that task over to the corresponding

00:09:36,040 --> 00:09:39,519
plug-in so we're working for instance

00:09:37,990 --> 00:09:40,689
with xenserver to go to the xenserver

00:09:39,519 --> 00:09:45,009
plug in and say hey can you make this

00:09:40,689 --> 00:09:46,750
machine here the specs so the the issue

00:09:45,009 --> 00:09:50,680
there is that we started to separate

00:09:46,750 --> 00:09:52,959
these things out and those plugins what

00:09:50,680 --> 00:09:55,240
they're able to do is be loaded at

00:09:52,959 --> 00:09:57,610
runtime so when the CloudStack

00:09:55,240 --> 00:10:01,660
management server starts up takes a look

00:09:57,610 --> 00:10:03,850
at a list of different adapter types and

00:10:01,660 --> 00:10:07,540
what classes implement them and it'll

00:10:03,850 --> 00:10:11,139
load them so for example you have a

00:10:07,540 --> 00:10:13,329
network guru for networking facilities

00:10:11,139 --> 00:10:15,009
we'd have a hypervisor guru that's

00:10:13,329 --> 00:10:16,870
involved in supporting different

00:10:15,009 --> 00:10:18,459
hypervisor types and then within the

00:10:16,870 --> 00:10:20,559
hypervisor guru you'd have different

00:10:18,459 --> 00:10:25,089
implementations I've listed here kvm

00:10:20,559 --> 00:10:28,929
VMware xenserver OBM so the bottom line

00:10:25,089 --> 00:10:32,110
here is that within the set of available

00:10:28,929 --> 00:10:34,689
adapter types you've got license to

00:10:32,110 --> 00:10:38,670
innovate step outside of that and now

00:10:34,689 --> 00:10:38,670
you're not doing structured innovation

00:10:39,269 --> 00:10:44,079
so what are these plugins look like well

00:10:42,639 --> 00:10:45,910
they're they're kind of a two-headed

00:10:44,079 --> 00:10:48,550
beast because they serve two masters on

00:10:45,910 --> 00:10:51,040
the one hand they want to play nicely

00:10:48,550 --> 00:10:52,389
with the CloudStack management server

00:10:51,040 --> 00:10:54,759
and they want to be something that can

00:10:52,389 --> 00:10:56,140
be loaded into it and run by it on the

00:10:54,759 --> 00:10:57,790
other hand they want to be really

00:10:56,140 --> 00:11:01,540
to the devices you're going to control

00:10:57,790 --> 00:11:03,430
out in your data center so it's got a at

00:11:01,540 --> 00:11:05,320
the top here we've got the server

00:11:03,430 --> 00:11:07,060
component so that's going to be loaded

00:11:05,320 --> 00:11:09,840
into the cloud stack management server

00:11:07,060 --> 00:11:13,390
it implies this is implemented in Java

00:11:09,840 --> 00:11:15,340
it's going to implement adapter ap is so

00:11:13,390 --> 00:11:16,870
if it does hypervisor management there's

00:11:15,340 --> 00:11:18,850
a basket of API is that it has to

00:11:16,870 --> 00:11:21,370
implement but it does network management

00:11:18,850 --> 00:11:22,990
there's another basket of AP is because

00:11:21,370 --> 00:11:25,930
it's in the management server it's got

00:11:22,990 --> 00:11:28,330
access to the Mankin service database so

00:11:25,930 --> 00:11:30,520
i put dao that stands for data access

00:11:28,330 --> 00:11:33,280
object and it allows you to load in

00:11:30,520 --> 00:11:35,050
objects from the database modify them

00:11:33,280 --> 00:11:38,830
save them or just create new ones and

00:11:35,050 --> 00:11:41,530
that's the management server world the

00:11:38,830 --> 00:11:43,270
second part of the plug-in is that it's

00:11:41,530 --> 00:11:45,820
got the server resource and that's

00:11:43,270 --> 00:11:49,420
responsible for managing resources out

00:11:45,820 --> 00:11:52,480
in your data center ok so the server

00:11:49,420 --> 00:11:54,520
resource it's got a lot more flexibility

00:11:52,480 --> 00:11:57,610
to its implementation so take the

00:11:54,520 --> 00:11:59,920
example of kvm you control kvm using

00:11:57,610 --> 00:12:02,410
libvirt you can't make remoting remote

00:11:59,920 --> 00:12:06,400
in vacations on libvirt so we put an

00:12:02,410 --> 00:12:08,890
agent down on the kvm server and it

00:12:06,400 --> 00:12:11,440
talks back to Cossack management server

00:12:08,890 --> 00:12:15,550
using a message bus just JSON over TCP

00:12:11,440 --> 00:12:16,870
and that works fine but if you turn to a

00:12:15,550 --> 00:12:19,270
different kind of resource like

00:12:16,870 --> 00:12:22,360
xenserver well you can make remote in

00:12:19,270 --> 00:12:26,830
vacations so in that case we use a

00:12:22,360 --> 00:12:28,240
direct connect server resource and so it

00:12:26,830 --> 00:12:30,430
lives inside the management server and

00:12:28,240 --> 00:12:35,050
just calls out to the hypervisors that

00:12:30,430 --> 00:12:37,630
is controlling so that's that's the

00:12:35,050 --> 00:12:40,030
theory behind plugins and so now what we

00:12:37,630 --> 00:12:42,160
want to know is okay is it achievable

00:12:40,030 --> 00:12:43,600
and when it is achieved what are the

00:12:42,160 --> 00:12:45,280
extra things that pop out that

00:12:43,600 --> 00:12:46,780
developers really need to understand to

00:12:45,280 --> 00:12:48,850
help them along the way to get involved

00:12:46,780 --> 00:12:50,470
and I've just thrown up an example here

00:12:48,850 --> 00:12:51,910
of someone who's built a

00:12:50,470 --> 00:12:53,680
three-dimensional model of an Escher

00:12:51,910 --> 00:12:54,970
drawing probably familiar with it it

00:12:53,680 --> 00:12:57,160
shouldn't be able to work in the real

00:12:54,970 --> 00:13:01,420
world but if you tweak things a bit that

00:12:57,160 --> 00:13:05,050
works fine so the the first thing to

00:13:01,420 --> 00:13:06,670
mention is that Apache CloudStack you

00:13:05,050 --> 00:13:09,520
guys probably already know this that

00:13:06,670 --> 00:13:10,870
Apache projects have processes

00:13:09,520 --> 00:13:12,160
I don't know if the process for cloud

00:13:10,870 --> 00:13:14,290
stacks is the same as all the other ones

00:13:12,160 --> 00:13:17,110
so I apologize if this duplicates

00:13:14,290 --> 00:13:20,230
information you already know but follow

00:13:17,110 --> 00:13:22,630
the process so that you can get your

00:13:20,230 --> 00:13:23,830
code into the master branch and that's

00:13:22,630 --> 00:13:26,650
really important because it's going to

00:13:23,830 --> 00:13:28,990
be a lot longer live once it's a master

00:13:26,650 --> 00:13:30,160
because as the underlying system evolves

00:13:28,990 --> 00:13:32,110
you're going to pick up the changes

00:13:30,160 --> 00:13:33,850
right makes perfect sense so you look

00:13:32,110 --> 00:13:37,150
back a few weeks and we updated

00:13:33,850 --> 00:13:38,290
CloudStack so it loaded classes and

00:13:37,150 --> 00:13:40,360
plugins using a slightly different

00:13:38,290 --> 00:13:41,920
americanism so we had a custom mechanism

00:13:40,360 --> 00:13:44,110
then we switched to the spring framework

00:13:41,920 --> 00:13:46,750
and the engineer responsible he went and

00:13:44,110 --> 00:13:49,090
fixed all the existing plugins but

00:13:46,750 --> 00:13:50,710
because mine wasn't in flow in master it

00:13:49,090 --> 00:13:52,720
broke and I had this great learning

00:13:50,710 --> 00:13:54,730
exercise and that's fine for me as a

00:13:52,720 --> 00:13:55,960
developer but maybe not so good as for

00:13:54,730 --> 00:14:00,250
the enterprise they want these things

00:13:55,960 --> 00:14:03,460
not to break over time so they've got

00:14:00,250 --> 00:14:05,920
that's the URL for the process and the

00:14:03,460 --> 00:14:08,290
point also is that there's not a one

00:14:05,920 --> 00:14:10,900
stop shop GUI for picking up all of

00:14:08,290 --> 00:14:13,180
these tools that we're using to make

00:14:10,900 --> 00:14:14,920
changes to CloudStack so it's not like

00:14:13,180 --> 00:14:20,110
launch pad for instance where you've got

00:14:14,920 --> 00:14:21,550
a unified GUI so it this this process

00:14:20,110 --> 00:14:22,720
also lists the tools you're going to use

00:14:21,550 --> 00:14:24,520
so obviously you're going to use the

00:14:22,720 --> 00:14:26,770
mailing list to try and get some sort of

00:14:24,520 --> 00:14:28,660
consensus and awareness about the change

00:14:26,770 --> 00:14:30,010
you want to make the plug-in but when

00:14:28,660 --> 00:14:32,440
you go to publish it that'll be on a

00:14:30,010 --> 00:14:34,570
wiki you use jireh for a ticket for the

00:14:32,440 --> 00:14:36,150
feature so you can track the progress

00:14:34,570 --> 00:14:38,380
and so others can see your progress

00:14:36,150 --> 00:14:40,390
you're going to set up a development

00:14:38,380 --> 00:14:43,120
environment with reference to the wiki

00:14:40,390 --> 00:14:45,820
again github for source review board for

00:14:43,120 --> 00:14:47,140
the changes so this is this post is

00:14:45,820 --> 00:14:49,180
really handy for grouping up all the

00:14:47,140 --> 00:14:51,160
tools you're going to be hitting now as

00:14:49,180 --> 00:14:53,530
a beginner one thing really important to

00:14:51,160 --> 00:14:57,520
understand is that there are two wiki's

00:14:53,530 --> 00:14:59,800
and a third one that's deprecated so

00:14:57,520 --> 00:15:02,860
we've got the incubator wiki and that's

00:14:59,800 --> 00:15:06,090
it's got a really clean simple easy to

00:15:02,860 --> 00:15:08,650
get involved look to it and feel right

00:15:06,090 --> 00:15:11,290
it's because it's been edited and it's

00:15:08,650 --> 00:15:14,320
consistent and coherent and we've got a

00:15:11,290 --> 00:15:16,330
second one which is the C wiki that's

00:15:14,320 --> 00:15:19,240
really for in-depth work when you start

00:15:16,330 --> 00:15:20,960
grinding into the code you'll see the

00:15:19,240 --> 00:15:23,420
detailed explanations

00:15:20,960 --> 00:15:25,430
and for example the windows in a

00:15:23,420 --> 00:15:27,560
development environment the sea wiki

00:15:25,430 --> 00:15:29,420
explains how to get started and down at

00:15:27,560 --> 00:15:31,970
the bottom it's got a list of tips that

00:15:29,420 --> 00:15:36,140
specifically tell you the gotchas with

00:15:31,970 --> 00:15:38,000
master at that particular time so see

00:15:36,140 --> 00:15:39,500
wiki is very powerful but it is

00:15:38,000 --> 00:15:41,780
crowd-sourced so it can be a bit

00:15:39,500 --> 00:15:43,640
confusing and from time to time it falls

00:15:41,780 --> 00:15:45,050
out of date so when I first approached

00:15:43,640 --> 00:15:47,060
it back in November I noticed that there

00:15:45,050 --> 00:15:49,910
were these details talking about aunt an

00:15:47,060 --> 00:15:51,470
aunt wasn't in the build so you raise

00:15:49,910 --> 00:15:53,960
your hand and say the mailing list hey

00:15:51,470 --> 00:15:55,370
this doesn't sink and somebody will rush

00:15:53,960 --> 00:15:58,340
along and say oh yeah I just forget that

00:15:55,370 --> 00:16:00,490
i'll get to it fix it for you just one

00:15:58,340 --> 00:16:03,950
caveat that we've got a pre apache wiki

00:16:00,490 --> 00:16:06,620
cloudstack org and it says it's

00:16:03,950 --> 00:16:08,570
deprecated but Google sometimes picks

00:16:06,620 --> 00:16:10,070
that up in your search resort results so

00:16:08,570 --> 00:16:11,840
when you do go to a page and says

00:16:10,070 --> 00:16:13,280
deprecated just go and see if there's

00:16:11,840 --> 00:16:17,000
something on the sea wiki that helps you

00:16:13,280 --> 00:16:18,830
out so let's process the second point to

00:16:17,000 --> 00:16:21,170
make is that simpler steps they make it

00:16:18,830 --> 00:16:22,850
a lot easier to learn CloudStack when

00:16:21,170 --> 00:16:25,970
you start writing plugins the first

00:16:22,850 --> 00:16:27,680
issue is how do you work CloudStack how

00:16:25,970 --> 00:16:30,290
do you make changes how how is it

00:16:27,680 --> 00:16:32,570
structured and so you want to avoid

00:16:30,290 --> 00:16:34,540
taking on too much work at that state so

00:16:32,570 --> 00:16:37,070
take a look at phase 2 that's my ideal

00:16:34,540 --> 00:16:39,890
look at this we got this WS management

00:16:37,070 --> 00:16:41,660
here and I don't need a remote agent I

00:16:39,890 --> 00:16:43,610
don't have to install this remote agent

00:16:41,660 --> 00:16:45,740
on the hyper-v server so what's

00:16:43,610 --> 00:16:48,500
happening is WS management if you're not

00:16:45,740 --> 00:16:53,210
familiar with Windows it's exposing the

00:16:48,500 --> 00:16:57,980
wmi system and thus hyper-v Server 2012

00:16:53,210 --> 00:16:59,570
control API over HTTP so wmi it's the

00:16:57,980 --> 00:17:02,450
windows management interface as a

00:16:59,570 --> 00:17:04,550
framework that windows subsystems and

00:17:02,450 --> 00:17:06,700
services register with for control they

00:17:04,550 --> 00:17:08,780
also share information through it and

00:17:06,700 --> 00:17:10,580
the problem with doing remote

00:17:08,780 --> 00:17:13,160
implications is that it's over d called

00:17:10,580 --> 00:17:17,480
decom has a proprietary flavor is not

00:17:13,160 --> 00:17:20,030
well supported in java in contrast WS

00:17:17,480 --> 00:17:23,510
management that's a bit more it's a bit

00:17:20,030 --> 00:17:25,880
more it's got more of a flavors flavor

00:17:23,510 --> 00:17:29,690
at what am I trying to say here it's got

00:17:25,880 --> 00:17:31,970
more of a standards-based approach so

00:17:29,690 --> 00:17:33,710
the second issue with this design is

00:17:31,970 --> 00:17:34,500
that we want to start using these

00:17:33,710 --> 00:17:36,390
hyper-v

00:17:34,500 --> 00:17:39,120
system VMS so if you're familiar with

00:17:36,390 --> 00:17:40,830
cloudstack it's got these VMs that it

00:17:39,120 --> 00:17:43,050
puts out into the data center that it

00:17:40,830 --> 00:17:45,210
relies on for services so it's got a

00:17:43,050 --> 00:17:48,900
secondary storage vm which manages

00:17:45,210 --> 00:17:51,540
putting templates into archive to manage

00:17:48,900 --> 00:17:53,820
his archiving templates and it also has

00:17:51,540 --> 00:17:57,770
console vm so you can pull up a console

00:17:53,820 --> 00:17:59,970
for VMS in the cloud and it has a

00:17:57,770 --> 00:18:02,430
virtual Rooter which gives you network

00:17:59,970 --> 00:18:04,410
services like Matt translation and so we

00:18:02,430 --> 00:18:07,620
really want those to run natively on our

00:18:04,410 --> 00:18:09,420
hyper-v server and finally we've got

00:18:07,620 --> 00:18:10,860
some changes here that we have to do to

00:18:09,420 --> 00:18:12,600
the core cloudstack because the

00:18:10,860 --> 00:18:14,340
orchestration engine even though it

00:18:12,600 --> 00:18:16,500
doesn't have to know how to run hyper-v

00:18:14,340 --> 00:18:21,270
it has to be aware of hyper-v image

00:18:16,500 --> 00:18:22,650
types in hyper-v hyper-v vm so that's

00:18:21,270 --> 00:18:24,390
great that's phase 2 that's the ideal

00:18:22,650 --> 00:18:26,640
but it's a bit of a problem for us that

00:18:24,390 --> 00:18:28,910
the ws management calls is no really

00:18:26,640 --> 00:18:33,000
good examples online on how to do that

00:18:28,910 --> 00:18:36,720
WS management is greatly supported in

00:18:33,000 --> 00:18:38,520
standard Java because these HTTP queries

00:18:36,720 --> 00:18:41,220
they're just a little too low level for

00:18:38,520 --> 00:18:43,650
what it is that we want to do there are

00:18:41,220 --> 00:18:44,820
some a libraries we can use but they

00:18:43,650 --> 00:18:47,180
require a little bit of learning and

00:18:44,820 --> 00:18:50,970
they've got some drawbacks to them and

00:18:47,180 --> 00:18:52,740
the the hyper-v system VMS i mean those

00:18:50,970 --> 00:18:54,480
are also a bit problematic unless you're

00:18:52,740 --> 00:18:58,020
really comfortable with rolling your own

00:18:54,480 --> 00:19:00,090
linux and is anybody here really just

00:18:58,020 --> 00:19:02,310
get out of bed in the morning say i'm

00:19:00,090 --> 00:19:04,800
going to go and rebuild a distro you use

00:19:02,310 --> 00:19:08,340
all right so ok so it's not unheard of

00:19:04,800 --> 00:19:10,350
but you've got a changeover from the

00:19:08,340 --> 00:19:12,300
usual debian that cloudstack uses to

00:19:10,350 --> 00:19:15,720
something that hyper-v supports like

00:19:12,300 --> 00:19:18,180
Santos and when we started you know that

00:19:15,720 --> 00:19:21,810
wasn't really well supported creating

00:19:18,180 --> 00:19:22,920
new system VMS so we took a step back

00:19:21,810 --> 00:19:25,320
and said hey I tell you what we'll

00:19:22,920 --> 00:19:26,940
introduce a phase one we're going to get

00:19:25,320 --> 00:19:29,820
rid of WS management we'll just have a

00:19:26,940 --> 00:19:31,950
local connected agent and we'll use some

00:19:29,820 --> 00:19:35,430
examples of wmi and powershell calls

00:19:31,950 --> 00:19:37,460
local calls from the web will access it

00:19:35,430 --> 00:19:40,410
through the message bus this is that

00:19:37,460 --> 00:19:43,440
JSON serialized commands over a TCP

00:19:40,410 --> 00:19:45,590
connection and will will be cheeky we're

00:19:43,440 --> 00:19:48,029
just going to use the existing xenserver

00:19:45,590 --> 00:19:53,099
system VMS by adding a xenserver

00:19:48,029 --> 00:19:54,809
stir to the cloud and using those little

00:19:53,099 --> 00:19:57,869
tricks what we're able to do is avoid a

00:19:54,809 --> 00:19:59,159
lot of the learning that would be non

00:19:57,869 --> 00:20:04,529
CloudStack learning and maybe not

00:19:59,159 --> 00:20:06,690
terribly useful for beginner so um Jesus

00:20:04,529 --> 00:20:09,109
I can't emphasize this enough you know

00:20:06,690 --> 00:20:12,479
try to reuse and repurpose before

00:20:09,109 --> 00:20:14,429
rewriting so if you look around and

00:20:12,479 --> 00:20:16,080
CloudStack there's a huge amounts of

00:20:14,429 --> 00:20:17,519
stuff that's already done for you now

00:20:16,080 --> 00:20:18,960
you take a look this is the stack that

00:20:17,519 --> 00:20:20,729
makes up the remote agent from the

00:20:18,960 --> 00:20:22,559
previous slide the phase one remote

00:20:20,729 --> 00:20:24,479
agent all this green stuff i don't know

00:20:22,559 --> 00:20:26,639
if it's showing up green for you but the

00:20:24,479 --> 00:20:28,499
screen isn't it's done just you know you

00:20:26,639 --> 00:20:30,059
can slap it together and can figure it

00:20:28,499 --> 00:20:32,219
and you're sorted and this blue stuff

00:20:30,059 --> 00:20:35,460
that's just repurposed so we've taken

00:20:32,219 --> 00:20:37,019
existing code and reworked it okay all

00:20:35,460 --> 00:20:38,909
right it look and think you're glazing

00:20:37,019 --> 00:20:41,519
over so what here's what happens that

00:20:38,909 --> 00:20:44,580
the the OS that's a given in our case

00:20:41,519 --> 00:20:47,099
it's going to be windows the agent shale

00:20:44,580 --> 00:20:49,349
that guy is responsible for platform

00:20:47,099 --> 00:20:51,809
operating system dependencies and

00:20:49,349 --> 00:20:53,249
loading and configuration so it's

00:20:51,809 --> 00:20:55,169
written in Java that takes care of our

00:20:53,249 --> 00:20:56,940
operating system dependencies and it

00:20:55,169 --> 00:20:59,969
loads in a configuration that tells it

00:20:56,940 --> 00:21:01,649
what server resources to run for every

00:20:59,969 --> 00:21:03,839
server resource it builds an agent and

00:21:01,649 --> 00:21:05,940
pop sims and instance of the server

00:21:03,839 --> 00:21:08,729
resource so that agent what it does it

00:21:05,940 --> 00:21:11,609
goes and sets up your your message bus

00:21:08,729 --> 00:21:13,379
so as it spins up it goes it sets up a

00:21:11,609 --> 00:21:17,129
connection to the management server and

00:21:13,379 --> 00:21:19,109
then it does the handshaking low-level

00:21:17,129 --> 00:21:20,759
handshaking to get the message bus going

00:21:19,109 --> 00:21:21,899
so this is great this is loads of stuff

00:21:20,759 --> 00:21:24,799
that I could have rewritten in c-sharp

00:21:21,899 --> 00:21:27,509
but it's already done for me forget it

00:21:24,799 --> 00:21:29,099
then as we get up to the top of the

00:21:27,509 --> 00:21:31,710
stack we start having to write some code

00:21:29,099 --> 00:21:33,570
so the server resource we board the kvm

00:21:31,710 --> 00:21:36,089
version and that was really brilliant

00:21:33,570 --> 00:21:37,259
because hit allowed us to figure out

00:21:36,089 --> 00:21:39,179
what commands we're supposed to

00:21:37,259 --> 00:21:41,729
implement because you get these messages

00:21:39,179 --> 00:21:44,549
that come into the agent and they just

00:21:41,729 --> 00:21:46,349
call a single dispatch man in the server

00:21:44,549 --> 00:21:48,119
resource and that means you've got this

00:21:46,349 --> 00:21:50,789
this whatever this if statement the

00:21:48,119 --> 00:21:52,409
length of my arm and you know it may say

00:21:50,789 --> 00:21:53,669
it looked like it's bad design but to me

00:21:52,409 --> 00:21:55,259
that's perfect because it says hey you

00:21:53,669 --> 00:21:58,529
need a command to do this one to do this

00:21:55,259 --> 00:22:00,899
etc etc etc etc then the final bit of

00:21:58,529 --> 00:22:01,410
the stack while we pulled some data is

00:22:00,899 --> 00:22:04,470
we

00:22:01,410 --> 00:22:06,690
hold some examples of hyper-v control

00:22:04,470 --> 00:22:09,750
from a driver we'd written for OpenStack

00:22:06,690 --> 00:22:11,760
that's written in Python so you just

00:22:09,750 --> 00:22:13,740
spin up another process and then you

00:22:11,760 --> 00:22:16,050
standard into pass instructions into it

00:22:13,740 --> 00:22:19,140
and standard out why is that possible

00:22:16,050 --> 00:22:22,230
because pythons JSON serialization is

00:22:19,140 --> 00:22:25,500
the same as ours so the commands we can

00:22:22,230 --> 00:22:27,870
serialize them JSON out Python DC

00:22:25,500 --> 00:22:30,230
realises them there's a Python

00:22:27,870 --> 00:22:33,780
programmer in the corner I'm sure of it

00:22:30,230 --> 00:22:37,560
airy so the point there is as much as

00:22:33,780 --> 00:22:40,830
you can try and reuse existing code okay

00:22:37,560 --> 00:22:42,480
so with that in mind what is it that

00:22:40,830 --> 00:22:44,100
you're trying to implement well the

00:22:42,480 --> 00:22:45,900
server resource commands are actually

00:22:44,100 --> 00:22:49,590
easier to log and replay than they are

00:22:45,900 --> 00:22:52,050
to figure out offline and the reason is

00:22:49,590 --> 00:22:54,480
that yeah I explained that this

00:22:52,050 --> 00:22:57,450
disaggregation was ongoing we're slowly

00:22:54,480 --> 00:23:01,710
slowly splitting apart CloudStack into

00:22:57,450 --> 00:23:03,750
you know specific pieces and that's not

00:23:01,710 --> 00:23:05,790
complete when it comes to server sources

00:23:03,750 --> 00:23:07,740
so your server resources they really

00:23:05,790 --> 00:23:10,110
should have some interface that says

00:23:07,740 --> 00:23:11,370
what commands are going to implement but

00:23:10,110 --> 00:23:13,500
if you look at the examples in the code

00:23:11,370 --> 00:23:15,450
not all of the server resources tell you

00:23:13,500 --> 00:23:18,360
what commands are going to implement the

00:23:15,450 --> 00:23:20,820
list of commands isn't complete because

00:23:18,360 --> 00:23:22,980
you need two more you need to tell the

00:23:20,820 --> 00:23:24,830
CloudStack management server the status

00:23:22,980 --> 00:23:27,270
the VMS and the status of the host

00:23:24,830 --> 00:23:30,630
portal they do any sort of start stop on

00:23:27,270 --> 00:23:32,400
that machine and even if you did have

00:23:30,630 --> 00:23:34,020
that list perfect you wouldn't know what

00:23:32,400 --> 00:23:36,390
the structure of the commands coming in

00:23:34,020 --> 00:23:39,600
are there's just a lot of fields in them

00:23:36,390 --> 00:23:43,110
so what your best to do is to try and

00:23:39,600 --> 00:23:47,040
record an existing conversation between

00:23:43,110 --> 00:23:51,300
the GUI and well not the management

00:23:47,040 --> 00:23:53,610
server and one of its agents and so

00:23:51,300 --> 00:23:55,680
that's that's what we did to to get the

00:23:53,610 --> 00:24:00,330
ball really rolling because we went into

00:23:55,680 --> 00:24:03,150
the log files and pulled out samples and

00:24:00,330 --> 00:24:07,170
then just put them into strings did some

00:24:03,150 --> 00:24:10,050
JSON deserialization to reconstitute the

00:24:07,170 --> 00:24:12,450
object and then just slammed it into our

00:24:10,050 --> 00:24:13,740
server resource so it's a unit test so

00:24:12,450 --> 00:24:15,090
it can launch the server resource

00:24:13,740 --> 00:24:17,070
directly without having to you

00:24:15,090 --> 00:24:18,870
is the underlying agent and so you're

00:24:17,070 --> 00:24:20,220
off to the races and not only do you get

00:24:18,870 --> 00:24:21,650
your commands but you get the sequence

00:24:20,220 --> 00:24:24,930
of commands so you get the full

00:24:21,650 --> 00:24:27,750
orchestration engine implementation for

00:24:24,930 --> 00:24:29,970
something like deploy virtual machine so

00:24:27,750 --> 00:24:33,200
test-driven development that's a really

00:24:29,970 --> 00:24:37,410
strong concept if you're doing plugins

00:24:33,200 --> 00:24:39,570
another point to make it sometimes you

00:24:37,410 --> 00:24:40,710
have these big programming problems that

00:24:39,570 --> 00:24:42,990
you're going to have to tackle and

00:24:40,710 --> 00:24:44,850
you're better just avoiding them because

00:24:42,990 --> 00:24:46,830
CloudStack is evolving we've got all

00:24:44,850 --> 00:24:48,270
these participants if you look on the

00:24:46,830 --> 00:24:49,740
mailing list or you ask the mailing list

00:24:48,270 --> 00:24:52,440
chances are someone's going to solve

00:24:49,740 --> 00:24:55,800
what you're having difficulty with so

00:24:52,440 --> 00:24:57,390
with hyper-v we have some problems that

00:24:55,800 --> 00:25:00,030
are solved by the ongoing storage

00:24:57,390 --> 00:25:01,980
disaggregation we've got basically NFS

00:25:00,030 --> 00:25:05,450
based secondary storage it doesn't

00:25:01,980 --> 00:25:07,140
really play nicely with hyper-v and

00:25:05,450 --> 00:25:08,970
secondary stories that's where we put

00:25:07,140 --> 00:25:12,960
that's the responsible for archiving the

00:25:08,970 --> 00:25:15,000
templates and the primary storage that's

00:25:12,960 --> 00:25:18,030
the storage that the VMS actually run on

00:25:15,000 --> 00:25:20,010
that hyper-v would prefer that to be SMB

00:25:18,030 --> 00:25:21,750
so we'd like to have some sort of SMB

00:25:20,010 --> 00:25:24,390
specific implementation of primary

00:25:21,750 --> 00:25:27,150
storage and that kind of disaggregation

00:25:24,390 --> 00:25:29,970
would be a big programming task so as

00:25:27,150 --> 00:25:32,190
fate would have it the there was a team

00:25:29,970 --> 00:25:34,320
already working on that so all we had to

00:25:32,190 --> 00:25:36,450
do is sidestep the issue come up with an

00:25:34,320 --> 00:25:37,620
interim solution so for primary storage

00:25:36,450 --> 00:25:40,260
we said okay look we're not going to

00:25:37,620 --> 00:25:42,480
manage detaching the smv we'll just use

00:25:40,260 --> 00:25:44,970
local storage and then for secondary

00:25:42,480 --> 00:25:48,510
storage we said okay look windows server

00:25:44,970 --> 00:25:50,670
2012 the full version that guy can share

00:25:48,510 --> 00:25:52,370
the same folder using NFS and SMB so

00:25:50,670 --> 00:25:55,080
we'll use that as an interim solution

00:25:52,370 --> 00:25:57,390
likewise with the system vm creation you

00:25:55,080 --> 00:25:59,580
know we didn't have any centos examples

00:25:57,390 --> 00:26:02,550
of system VMS back in November but now

00:25:59,580 --> 00:26:04,290
we do and also the toolchain available

00:26:02,550 --> 00:26:06,690
for creating system VMS has come along a

00:26:04,290 --> 00:26:08,490
route long ways so you know sometimes

00:26:06,690 --> 00:26:11,910
you do well just ducking the problem

00:26:08,490 --> 00:26:15,000
until the last minute all right so one

00:26:11,910 --> 00:26:16,610
last point to make you know make sure

00:26:15,000 --> 00:26:19,410
you make advanced preparations for IP

00:26:16,610 --> 00:26:21,450
clearance did anybody take a look at the

00:26:19,410 --> 00:26:23,880
master branch and take a look to see

00:26:21,450 --> 00:26:26,610
whether this hyper-v stuff was in it no

00:26:23,880 --> 00:26:28,090
good because it's not I left it too late

00:26:26,610 --> 00:26:32,529
to get my IP clearance

00:26:28,090 --> 00:26:34,840
and the issue the underlying issue is if

00:26:32,529 --> 00:26:36,700
you're a project an Apache project you

00:26:34,840 --> 00:26:40,000
really want to hold all the copyrights

00:26:36,700 --> 00:26:41,890
for all the source in your repo because

00:26:40,000 --> 00:26:44,429
it just makes good sense you don't want

00:26:41,890 --> 00:26:47,409
any ambiguity that could lead to

00:26:44,429 --> 00:26:49,750
somebody to try some law firm to take a

00:26:47,409 --> 00:26:52,299
swing at you right why not so much the

00:26:49,750 --> 00:26:53,470
cost of the legal services but the idea

00:26:52,299 --> 00:26:55,690
that some engineer is going to have to

00:26:53,470 --> 00:26:57,309
sit down and write reports about legal

00:26:55,690 --> 00:26:59,679
issues that's just a waste of time and

00:26:57,309 --> 00:27:01,090
it also presents a cloud over the

00:26:59,679 --> 00:27:03,640
product that makes it difficult for

00:27:01,090 --> 00:27:05,830
people to get involved wholeheartedly

00:27:03,640 --> 00:27:07,390
and the problem i ran into is I didn't

00:27:05,830 --> 00:27:09,760
quite understand at first how the Apache

00:27:07,390 --> 00:27:11,830
License works well that gives you access

00:27:09,760 --> 00:27:14,500
to use the code but it doesn't strip out

00:27:11,830 --> 00:27:18,460
the copyright holder's continuing

00:27:14,500 --> 00:27:21,220
copyright over the software and so you

00:27:18,460 --> 00:27:23,679
know you have a firm like Citrix who I

00:27:21,220 --> 00:27:25,510
work for and it's not their priority to

00:27:23,679 --> 00:27:27,610
make legal services available to their

00:27:25,510 --> 00:27:30,309
engineers so when it comes to actually

00:27:27,610 --> 00:27:32,559
donating this source code to Apache

00:27:30,309 --> 00:27:35,140
CloudStack it's a very lengthy process

00:27:32,559 --> 00:27:37,120
and it's even worse if you consider that

00:27:35,140 --> 00:27:38,169
lawyers are quite conservative and

00:27:37,120 --> 00:27:39,940
they're very reluctant to give away

00:27:38,169 --> 00:27:42,419
pieces of the company without it being

00:27:39,940 --> 00:27:44,470
signed off at top levels yeah exactly so

00:27:42,419 --> 00:27:46,990
there's some links here that explain the

00:27:44,470 --> 00:27:48,730
licensing process but the bottom line is

00:27:46,990 --> 00:27:50,289
that you really need to start

00:27:48,730 --> 00:27:52,090
integrating IP clearance into your

00:27:50,289 --> 00:27:54,789
development process if you're at the

00:27:52,090 --> 00:27:58,539
outset so understand very well what the

00:27:54,789 --> 00:28:01,510
provenance of your code is and try and

00:27:58,539 --> 00:28:04,029
use the rat tools release all auditing

00:28:01,510 --> 00:28:05,770
tools those will go through and flag up

00:28:04,029 --> 00:28:08,470
any problems with the headers on your

00:28:05,770 --> 00:28:10,690
source code and make available to the

00:28:08,470 --> 00:28:12,640
mailing list details of any libraries

00:28:10,690 --> 00:28:14,350
that you rely on so they can throw up

00:28:12,640 --> 00:28:17,860
any red flags well in advance and you

00:28:14,350 --> 00:28:19,899
can code around them okay so that's

00:28:17,860 --> 00:28:20,710
really yet these are some bonus tips

00:28:19,899 --> 00:28:22,179
that you can read at your leisure

00:28:20,710 --> 00:28:23,860
they're basically some

00:28:22,179 --> 00:28:27,220
get-out-of-jail-free cards if you ever

00:28:23,860 --> 00:28:28,899
develop plugins and this is a summary of

00:28:27,220 --> 00:28:31,779
the points that I've made during the

00:28:28,899 --> 00:28:32,890
presentation so you guys want to read

00:28:31,779 --> 00:28:37,830
these out to you or do you want to ask

00:28:32,890 --> 00:28:37,830
some questions anybody

00:28:38,390 --> 00:28:42,179
well okay I'll read them out to you and

00:28:40,919 --> 00:28:44,250
you can decide if you have any questions

00:28:42,179 --> 00:28:47,580
if you don't but that's that suits me

00:28:44,250 --> 00:28:49,230
just fine too so innovators they need

00:28:47,580 --> 00:28:50,970
the system to be disaggregated this is

00:28:49,230 --> 00:28:53,490
the idea that they need a place that

00:28:50,970 --> 00:28:57,270
they can focus in on when adding new

00:28:53,490 --> 00:28:59,400
features disaggregation with CloudStack

00:28:57,270 --> 00:29:02,070
its ongoing and started with this

00:28:59,400 --> 00:29:04,370
separation of hardware management into

00:29:02,070 --> 00:29:07,110
orchestration engines the steps and

00:29:04,370 --> 00:29:10,200
provisioning the actual specific control

00:29:07,110 --> 00:29:12,179
of hardware in your data center these

00:29:10,200 --> 00:29:13,500
plugins were making they've got two

00:29:12,179 --> 00:29:15,270
parts them because they serve two

00:29:13,500 --> 00:29:16,860
masters we've got a bit that works

00:29:15,270 --> 00:29:18,870
really well inside the management server

00:29:16,860 --> 00:29:21,330
and I've got another bit that works

00:29:18,870 --> 00:29:24,630
really well flexible for controlling

00:29:21,330 --> 00:29:26,490
machines out in the data center when you

00:29:24,630 --> 00:29:28,830
do start doing plug-in work make sure

00:29:26,490 --> 00:29:31,289
that you follow the process for new

00:29:28,830 --> 00:29:36,510
features it'll show you the ropes really

00:29:31,289 --> 00:29:38,490
quickly and make things simpler simple

00:29:36,510 --> 00:29:40,559
steps make it easier to learn CloudStack

00:29:38,490 --> 00:29:44,010
so once you get jump when you jump into

00:29:40,559 --> 00:29:46,860
plug in creation focus on just learning

00:29:44,010 --> 00:29:48,960
CloudStack so strip out the details from

00:29:46,860 --> 00:29:51,179
the ideal design that don't really help

00:29:48,960 --> 00:29:52,950
you get ahead in cloud stack itself and

00:29:51,179 --> 00:29:55,500
when you do start writing that plugin

00:29:52,950 --> 00:29:57,659
try to repurpose rather than rewrite I

00:29:55,500 --> 00:29:58,799
know it's a big ass to learn you know

00:29:57,659 --> 00:30:00,929
spend some time just learning about

00:29:58,799 --> 00:30:02,700
cloudstack but this huge benefits when

00:30:00,929 --> 00:30:04,590
you saw the pyramid all the green bits

00:30:02,700 --> 00:30:08,580
and the blue bits I didn't write

00:30:04,590 --> 00:30:10,289
anything from scratch and finally a one

00:30:08,580 --> 00:30:12,150
that's not finally server commands are

00:30:10,289 --> 00:30:14,070
easier to log and replay so I'm saying

00:30:12,150 --> 00:30:15,840
there is test driven design folks it's

00:30:14,070 --> 00:30:17,850
your friend and you know what don't even

00:30:15,840 --> 00:30:19,530
bother login yourself just go into the

00:30:17,850 --> 00:30:21,210
hyper-v repository take a look at what

00:30:19,530 --> 00:30:26,880
the commands are and copy them into your

00:30:21,210 --> 00:30:30,090
own code right so keep an eye out for

00:30:26,880 --> 00:30:31,559
evolving solutions that's the idea that

00:30:30,090 --> 00:30:32,730
if you have a hard programming problem

00:30:31,559 --> 00:30:35,780
you can just kick it down the road and

00:30:32,730 --> 00:30:38,700
hopefully someone else will solve it and

00:30:35,780 --> 00:30:40,770
finally keep your eye out for IP

00:30:38,700 --> 00:30:42,480
clearance it's it's kind of a pain in

00:30:40,770 --> 00:30:43,680
the butt but it requires you need to

00:30:42,480 --> 00:30:45,850
think about an event

00:30:43,680 --> 00:30:47,650
alright so that's my take on plug in

00:30:45,850 --> 00:30:48,910
development I hope you guys enjoyed that

00:30:47,650 --> 00:30:55,000
if you have any questions that's fine

00:30:48,910 --> 00:30:58,470
you can ask them now or afterwards no

00:30:55,000 --> 00:30:58,470
questions all right I'm done

00:31:18,020 --> 00:31:20,920
okay well

00:31:28,310 --> 00:31:35,270
so so to repeat the question did did you

00:31:33,680 --> 00:31:37,550
spend your time learning how open source

00:31:35,270 --> 00:31:39,590
worked or did you spend your time

00:31:37,550 --> 00:31:41,810
learning learning how CloudStack work

00:31:39,590 --> 00:31:47,630
and could you talk a bit about that is

00:31:41,810 --> 00:31:49,610
that right alright so the process that's

00:31:47,630 --> 00:31:53,390
learning how OpenStack works sorry

00:31:49,610 --> 00:31:56,330
that's learning how Apache open source

00:31:53,390 --> 00:31:58,700
works making things simpler for learning

00:31:56,330 --> 00:32:01,820
CloudStack that's a CloudStack step so

00:31:58,700 --> 00:32:05,840
now we're 5050 repurpose and rather than

00:32:01,820 --> 00:32:08,840
rewrite that's a cloud stock issue or is

00:32:05,840 --> 00:32:15,830
it say it was a CloudStack issue so

00:32:08,840 --> 00:32:18,200
we'll go third 3070 test driven design

00:32:15,830 --> 00:32:20,210
that is really really is a clouds back

00:32:18,200 --> 00:32:22,010
issue because it's hard to tell what

00:32:20,210 --> 00:32:26,620
those commands are going between a

00:32:22,010 --> 00:32:30,050
server resource and the actual

00:32:26,620 --> 00:32:32,000
management server class tax evolving

00:32:30,050 --> 00:32:35,050
they fix you as kind of ambivalent about

00:32:32,000 --> 00:32:37,070
that one as well make advanced clearance

00:32:35,050 --> 00:32:40,010
preparations for IP clearance that's

00:32:37,070 --> 00:32:45,370
definitely an open source issue so of

00:32:40,010 --> 00:32:48,370
those is looking like it's fifty-fifty

00:32:45,370 --> 00:32:48,370
yeah

00:33:15,000 --> 00:33:22,290
okay so this this bit here to get all of

00:33:18,750 --> 00:33:24,330
this you're talking for months to get

00:33:22,290 --> 00:33:28,170
all of this now we've added some extra

00:33:24,330 --> 00:33:29,820
bits right so let's maybe let me just

00:33:28,170 --> 00:33:31,860
pull in WS management and keep

00:33:29,820 --> 00:33:34,710
everything else the same you're talking

00:33:31,860 --> 00:33:36,540
you know depending on how close WS

00:33:34,710 --> 00:33:38,400
management is we're probably talking

00:33:36,540 --> 00:33:40,890
about a month or two so now we've

00:33:38,400 --> 00:33:43,700
dropped the time down to fifty percent

00:33:40,890 --> 00:33:49,500
less time and we're adding new features

00:33:43,700 --> 00:33:52,200
so it was I guess you talking about a

00:33:49,500 --> 00:33:55,490
fifty percent reduction in development

00:33:52,200 --> 00:34:01,680
effort once you understand clouds die

00:33:55,490 --> 00:34:02,910
rough guesstimate and I'm getting all

00:34:01,680 --> 00:34:06,410
the questions from the people I work

00:34:02,910 --> 00:34:06,410
with and they're hard what's that about

00:34:14,349 --> 00:34:19,329
oh okay so if you wanted to you know

00:34:16,960 --> 00:34:23,470
what's really helpful is to actually say

00:34:19,329 --> 00:34:25,299
hey look all right so so the point of

00:34:23,470 --> 00:34:27,429
this presentation was saying hey we're

00:34:25,299 --> 00:34:29,470
not going to do fork style adaptations

00:34:27,429 --> 00:34:32,889
we're going to give you these plug-in

00:34:29,470 --> 00:34:34,329
API s and within that box within that

00:34:32,889 --> 00:34:36,789
framework you can have a structured

00:34:34,329 --> 00:34:38,799
means to update CloudStack that isn't

00:34:36,789 --> 00:34:41,379
going to go out of date so what I'm

00:34:38,799 --> 00:34:43,539
saying is for those boxes how many were

00:34:41,379 --> 00:34:46,479
there this is a few of them but that's

00:34:43,539 --> 00:34:50,229
the adapters for all those boxes you

00:34:46,479 --> 00:34:51,970
really need to provide unit tests if you

00:34:50,229 --> 00:34:54,429
give you if you give people a series of

00:34:51,970 --> 00:34:56,139
unit tests then they don't have to learn

00:34:54,429 --> 00:34:58,150
how to set up a cloud stack at first

00:34:56,139 --> 00:35:00,130
they don't even have to learn how to set

00:34:58,150 --> 00:35:03,489
up their age engine first all I have to

00:35:00,130 --> 00:35:05,619
do is get the source fork the existing

00:35:03,489 --> 00:35:07,180
example with the unit tests and then

00:35:05,619 --> 00:35:10,059
just start you know hammering away

00:35:07,180 --> 00:35:13,359
changing out each of the methods so they

00:35:10,059 --> 00:35:14,380
focus on a different resource type so

00:35:13,359 --> 00:35:16,150
that's that's how you would really

00:35:14,380 --> 00:35:18,819
narrow down the effort is just start

00:35:16,150 --> 00:35:20,499
removing the background noise and just

00:35:18,819 --> 00:35:24,119
going for test-driven development and

00:35:20,499 --> 00:35:24,119
providing people with the tests

00:35:30,640 --> 00:35:36,680
so how do you handle versioning yeah I

00:35:34,880 --> 00:35:42,320
don't fully understand that I hard-coded

00:35:36,680 --> 00:35:44,360
the version into my old ok so does hug

00:35:42,320 --> 00:35:47,330
how do you deal with the evolutions with

00:35:44,360 --> 00:35:48,890
the API it's not structured at the

00:35:47,330 --> 00:35:51,620
moment it's more of a bizarre approach

00:35:48,890 --> 00:35:54,860
where you have to try integrating your

00:35:51,620 --> 00:35:58,150
code and seeing what falls over and but

00:35:54,860 --> 00:36:00,980
you can actually have plugins outs

00:35:58,150 --> 00:36:05,570
developed outside of cloudstack there's

00:36:00,980 --> 00:36:07,610
no problems with that at load time cloud

00:36:05,570 --> 00:36:09,350
sacks got a file that says hey here are

00:36:07,610 --> 00:36:12,320
the different adapter types please load

00:36:09,350 --> 00:36:14,180
these classes and they get registered as

00:36:12,320 --> 00:36:15,380
first class members within the system so

00:36:14,180 --> 00:36:18,320
there's no distinction between your

00:36:15,380 --> 00:36:20,030
plugin and my plugin as far as cloud

00:36:18,320 --> 00:36:24,020
stacks concern i might have different

00:36:20,030 --> 00:36:25,880
licensing terms or and they also do

00:36:24,020 --> 00:36:27,830
different things but you can definitely

00:36:25,880 --> 00:36:30,260
do 3rd party plugins and in fact this

00:36:27,830 --> 00:36:35,180
hyper-v now sits as a third-party plug

00:36:30,260 --> 00:36:36,590
in and repo and get pug github any other

00:36:35,180 --> 00:36:38,740
questions so cheer deep did you have a

00:36:36,590 --> 00:36:38,740
question

00:36:43,160 --> 00:36:55,430
yeah so so so just to reiterate that

00:36:50,770 --> 00:36:59,060
quain that question if I'm targeting

00:36:55,430 --> 00:37:02,120
phase one and I've got this tcp JSON

00:36:59,060 --> 00:37:04,430
very implementation agnostic message bus

00:37:02,120 --> 00:37:06,050
then this connected agent that I have

00:37:04,430 --> 00:37:08,120
running on my machine I mean I could

00:37:06,050 --> 00:37:10,460
implement it in every anything I could

00:37:08,120 --> 00:37:13,310
go for C sharp I could go for Python so

00:37:10,460 --> 00:37:15,230
why didn't I do that ok so let's take a

00:37:13,310 --> 00:37:17,720
look at that reuse and repurpose rather

00:37:15,230 --> 00:37:19,610
than rewrite I got the OS for free while

00:37:17,720 --> 00:37:21,440
that's fine i got the agent shell for

00:37:19,610 --> 00:37:23,630
free that's fine there's not a lot of in

00:37:21,440 --> 00:37:25,550
there but i got this this agent and it

00:37:23,630 --> 00:37:28,850
did the handshaking for the message bus

00:37:25,550 --> 00:37:30,920
and it set up the tcp connection and it

00:37:28,850 --> 00:37:33,140
routed commands into a server resource

00:37:30,920 --> 00:37:35,480
and it would start the server resource

00:37:33,140 --> 00:37:38,180
for me and it had an existing service

00:37:35,480 --> 00:37:39,710
resource it was built for and so you

00:37:38,180 --> 00:37:42,770
know you start moving up the stack and

00:37:39,710 --> 00:37:46,850
you start realizing that if you start

00:37:42,770 --> 00:37:47,990
off with existing materials you're just

00:37:46,850 --> 00:37:50,330
going to get more traction on

00:37:47,990 --> 00:37:51,830
development and then if you you know I

00:37:50,330 --> 00:37:55,160
have specific characteristics you want

00:37:51,830 --> 00:37:56,720
to address and they require a different

00:37:55,160 --> 00:37:59,450
language you're better off starting from

00:37:56,720 --> 00:38:02,750
a position of understanding CloudStack

00:37:59,450 --> 00:38:04,880
then you are sort of being in the dark

00:38:02,750 --> 00:38:07,070
about a lot of pieces of CloudStack they

00:38:04,880 --> 00:38:10,160
would have otherwise have learned so I

00:38:07,070 --> 00:38:13,370
didn't you see sharp because I want to

00:38:10,160 --> 00:38:16,340
simplify the problem is that you're just

00:38:13,370 --> 00:38:18,770
scratching are you asking all right

00:38:16,340 --> 00:38:20,450
that's fine okay well it looks like

00:38:18,770 --> 00:38:23,030
that's it if anybody wants to get a hold

00:38:20,450 --> 00:38:27,460
of me afterwards that's fine and thanks

00:38:23,030 --> 00:38:27,460

YouTube URL: https://www.youtube.com/watch?v=mAiqhjFZEaM


