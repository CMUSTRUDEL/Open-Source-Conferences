Title: REST Support for Apache cTAKES
Publication date: 2020-10-14
Playlist: ApacheCon @Home 2020
Description: 
	REST Support for Apache cTAKES
Gandhirajan N, Sean Finan

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache cTAKESâ„¢ is a natural language processing system for the extraction of information from electronic medical record clinical free-text. It's predominantly a desktop-based application. This session will talk about enabling REST support in cTAKES. We will be setting up UMLS knowledge sources in MySQL DB using scripts generated by cTAKES Dictionary Creator GUI which in turn uses MetamorphoSys UMLS installation wizard. We will deploy the cTAKES web REST module in tomcat and the application will use the cTAKES engine to perform analysis of the payload passed via REST call against the MySQL DB source and returns the analysis findings as JSON. We will also have a quick demo of the steps mentioned above. This will help healthcare industry to perform NLP analysis using cTAKES engine with just a REST endpoint.

Gandhirajan N:
Software developer with 15 years of experience in product design and development. Currently working on developing cloud-native applications using Spring Boot and deploying the same in Azure. Apache committer in cTAKES and Cordova projects.

Sean Finan:
Sean Finan is a Software Developer in the CHIP-NLP group, contributing his experience to their ongoing projects that utilize and help expand the capabilities of Natural Language Processing. Originally a Geophysicist and Materials Scientist, Sean gained his interest in software development while creating computer simulations as analogues of physical processes studied in his laboratory research. After leaving academia and a year of employment at the Mayo Clinic, Sean moved to Houston to work eleven years with Landmark Graphics, the leading provider of scientific software for the energy industry. PMC and committer in Apache cTAKES project.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,800 --> 00:00:31,840
hey all uh i think it's time

00:00:26,720 --> 00:00:31,840
and we can get started

00:00:33,760 --> 00:00:40,069
i hope everyone is able to see the

00:00:36,960 --> 00:00:40,069
[Music]

00:00:42,840 --> 00:00:45,840
presentation

00:00:54,399 --> 00:00:59,840
can someone confirm whether they're able

00:00:56,160 --> 00:00:59,840
to see the slave

00:01:05,439 --> 00:01:11,760
okay so let's get started

00:01:08,560 --> 00:01:14,159
so this session is all about uh

00:01:11,760 --> 00:01:15,680
enabling the rest support for apache

00:01:14,159 --> 00:01:18,080
seatics

00:01:15,680 --> 00:01:19,439
uh before i start the session i would

00:01:18,080 --> 00:01:22,000
like to thank

00:01:19,439 --> 00:01:23,360
sheen uh tim and few others in the

00:01:22,000 --> 00:01:27,040
apache community

00:01:23,360 --> 00:01:27,759
community uh for helping us and

00:01:27,040 --> 00:01:30,960
providing an

00:01:27,759 --> 00:01:34,479
opportunity to uh implement this

00:01:30,960 --> 00:01:38,479
particular risk module into apache ctx

00:01:34,479 --> 00:01:41,759
which helped us a lot in our

00:01:38,479 --> 00:01:44,880
in our clinical uh product

00:01:41,759 --> 00:01:46,479
which basically deals with the narrative

00:01:44,880 --> 00:01:49,759
text analysis

00:01:46,479 --> 00:01:52,399
and uh basically when we were evaluating

00:01:49,759 --> 00:01:54,479
a different nlp engine for our use case

00:01:52,399 --> 00:01:57,920
so we found ctx

00:01:54,479 --> 00:02:00,640
to be the right fit but unfortunately

00:01:57,920 --> 00:02:01,439
we didn't find the rest support which we

00:02:00,640 --> 00:02:05,280
were looking for

00:02:01,439 --> 00:02:07,680
so that's how we started

00:02:05,280 --> 00:02:08,959
venturing out some of the options

00:02:07,680 --> 00:02:11,760
available and then

00:02:08,959 --> 00:02:12,879
eventually ended up enabling the rest

00:02:11,760 --> 00:02:17,440
support

00:02:12,879 --> 00:02:21,920
so that was a quick recap of what we did

00:02:17,440 --> 00:02:24,800
okay to get started uh

00:02:21,920 --> 00:02:26,160
as uh she mentioned yesterday like

00:02:24,800 --> 00:02:28,319
apache ctx

00:02:26,160 --> 00:02:29,920
is a natural language processing system

00:02:28,319 --> 00:02:32,720
for extraction of

00:02:29,920 --> 00:02:34,000
information from electronic medical

00:02:32,720 --> 00:02:37,760
record clinical

00:02:34,000 --> 00:02:40,160
free text and uh predominantly it wasn't

00:02:37,760 --> 00:02:43,040
the stock based application

00:02:40,160 --> 00:02:43,760
at least when i started evaluating it

00:02:43,040 --> 00:02:48,160
that's how

00:02:43,760 --> 00:02:49,360
i saw it so basically to enable risk

00:02:48,160 --> 00:02:53,200
support in

00:02:49,360 --> 00:02:55,760
ctx we have added a new module

00:02:53,200 --> 00:02:56,640
or into the ctx code base which is

00:02:55,760 --> 00:03:00,959
nothing but c

00:02:56,640 --> 00:03:04,720
takes uh hyphen web by fundrest

00:03:00,959 --> 00:03:09,519
and what was basically does to see takes

00:03:04,720 --> 00:03:10,000
is it left all client applications built

00:03:09,519 --> 00:03:13,200
on

00:03:10,000 --> 00:03:17,519
various different languages to talk to

00:03:13,200 --> 00:03:20,239
syntax basically so that makes uh

00:03:17,519 --> 00:03:22,239
she takes to be used by a lot of other

00:03:20,239 --> 00:03:25,680
third-party applications which

00:03:22,239 --> 00:03:28,159
run on various languages

00:03:25,680 --> 00:03:29,280
and then with rest enabled the

00:03:28,159 --> 00:03:32,560
integration

00:03:29,280 --> 00:03:36,400
becomes far more simple

00:03:32,560 --> 00:03:40,400
so that's the basic threats of enabling

00:03:36,400 --> 00:03:40,400
the risk support in apache ctx

00:03:40,480 --> 00:03:44,480
basically i would like to touch base on

00:03:42,480 --> 00:03:47,599
all the components

00:03:44,480 --> 00:03:50,720
that is involved in this particular

00:03:47,599 --> 00:03:52,239
uh c takes with this which eventually

00:03:50,720 --> 00:03:55,439
helps

00:03:52,239 --> 00:03:58,840
to expose the rest end point

00:03:55,439 --> 00:04:03,280
from c takes so the key components

00:03:58,840 --> 00:04:06,720
are the c takes breast model code base

00:04:03,280 --> 00:04:09,040
then metamorphosis then

00:04:06,720 --> 00:04:11,280
umls which is nothing but unified

00:04:09,040 --> 00:04:14,000
medical language system

00:04:11,280 --> 00:04:16,320
and the next component is ctx dictionary

00:04:14,000 --> 00:04:18,079
creator gui

00:04:16,320 --> 00:04:19,359
and in our use case we will be

00:04:18,079 --> 00:04:23,520
demonstrating

00:04:19,359 --> 00:04:27,199
how we ended up using mysql database

00:04:23,520 --> 00:04:30,560
for the ctx engine to analyze the

00:04:27,199 --> 00:04:32,639
clinical text and for deployment

00:04:30,560 --> 00:04:33,919
in our use case we were using apache

00:04:32,639 --> 00:04:37,280
tomcat as the

00:04:33,919 --> 00:04:37,840
application server basically you can use

00:04:37,280 --> 00:04:40,479
any

00:04:37,840 --> 00:04:42,400
uh application server of your choice but

00:04:40,479 --> 00:04:46,800
in this use case we will be covering

00:04:42,400 --> 00:04:49,759
the deployment in apache tomcat

00:04:46,800 --> 00:04:50,320
okay so we will uh basically walk

00:04:49,759 --> 00:04:53,680
through

00:04:50,320 --> 00:04:56,400
each of the components which we see in

00:04:53,680 --> 00:05:01,440
the slide okay

00:04:56,400 --> 00:05:03,600
uh so first to start off like uh

00:05:01,440 --> 00:05:05,039
the basic question many people have is

00:05:03,600 --> 00:05:08,479
like where do i find the c

00:05:05,039 --> 00:05:11,120
takes code base and then how do i uh

00:05:08,479 --> 00:05:11,919
build the ctx wordpress model so

00:05:11,120 --> 00:05:15,680
basically

00:05:11,919 --> 00:05:18,479
uh you can pull out the source code from

00:05:15,680 --> 00:05:19,280
the github repository as shown in the

00:05:18,479 --> 00:05:21,600
slide or

00:05:19,280 --> 00:05:22,560
we can also pull up the latest code base

00:05:21,600 --> 00:05:25,280
from

00:05:22,560 --> 00:05:26,400
the svn trunk as uh mentioned in the

00:05:25,280 --> 00:05:28,639
slide

00:05:26,400 --> 00:05:29,680
so that is pretty much about the ctx

00:05:28,639 --> 00:05:32,720
code base and

00:05:29,680 --> 00:05:35,280
uh wordpress module

00:05:32,720 --> 00:05:36,160
uh so once you check out the code you

00:05:35,280 --> 00:05:40,800
can find

00:05:36,160 --> 00:05:43,919
out uh separate module

00:05:40,800 --> 00:05:47,039
uh it has not been included

00:05:43,919 --> 00:05:51,759
in the uh root bomb

00:05:47,039 --> 00:05:55,520
of ctx project because this can be built

00:05:51,759 --> 00:05:57,280
demand basis uh if

00:05:55,520 --> 00:05:59,120
it's required for a particular user you

00:05:57,280 --> 00:06:00,960
can go ahead and build this web address

00:05:59,120 --> 00:06:04,000
modeling separately so it is not

00:06:00,960 --> 00:06:06,240
currently included in the root bomb

00:06:04,000 --> 00:06:07,680
that is one information because we get a

00:06:06,240 --> 00:06:11,919
lot of questions saying like

00:06:07,680 --> 00:06:11,919
when i pull the c ticks i'm not able to

00:06:12,160 --> 00:06:16,000
find the seed takes the best var fail

00:06:14,240 --> 00:06:17,759
available so that is basically because

00:06:16,000 --> 00:06:21,120
as he takes his

00:06:17,759 --> 00:06:24,880
uh vtex root bomb does not have this

00:06:21,120 --> 00:06:28,080
model included and then

00:06:24,880 --> 00:06:29,560
you will touch base on the other key

00:06:28,080 --> 00:06:31,919
components which is nothing but

00:06:29,560 --> 00:06:34,720
metamorphosis

00:06:31,919 --> 00:06:36,479
metamorphosis is nothing but a humanless

00:06:34,720 --> 00:06:39,440
insulation wizard

00:06:36,479 --> 00:06:41,039
and umls as i said earlier is a unified

00:06:39,440 --> 00:06:44,160
medical language system

00:06:41,039 --> 00:06:47,520
uh which is nothing but repository of

00:06:44,160 --> 00:06:50,880
biomedical vocabularies developed by

00:06:47,520 --> 00:06:53,199
ios national library of medicine so it's

00:06:50,880 --> 00:06:55,840
basically a consolidation of

00:06:53,199 --> 00:06:56,319
vocabularies from different dictionaries

00:06:55,840 --> 00:07:00,319
like

00:06:56,319 --> 00:07:01,360
rxnam snomed ct medra and things like

00:07:00,319 --> 00:07:03,199
that

00:07:01,360 --> 00:07:04,639
so to start off with the installation of

00:07:03,199 --> 00:07:07,280
your mls uh

00:07:04,639 --> 00:07:09,680
you have to access the link which is

00:07:07,280 --> 00:07:13,759
mentioned in the slide

00:07:09,680 --> 00:07:17,599
which will let you download

00:07:13,759 --> 00:07:21,599
close to 5 gb of

00:07:17,599 --> 00:07:25,120
files uh predominant files are

00:07:21,599 --> 00:07:25,680
the ones with nlm extensions and another

00:07:25,120 --> 00:07:28,319
key

00:07:25,680 --> 00:07:28,960
uh file i've highlighted in this slide

00:07:28,319 --> 00:07:32,880
is this

00:07:28,960 --> 00:07:33,680
my lemon system so basically you have to

00:07:32,880 --> 00:07:36,240
unzip

00:07:33,680 --> 00:07:38,160
this file and then if you are using

00:07:36,240 --> 00:07:40,479
windows operating system

00:07:38,160 --> 00:07:43,360
you can start off the installation

00:07:40,479 --> 00:07:44,639
wizard by running this run 64.bat as

00:07:43,360 --> 00:07:49,199
highlighted in the slide

00:07:44,639 --> 00:07:52,319
or else if you are using mac you can

00:07:49,199 --> 00:07:56,400
start the installation by running run

00:07:52,319 --> 00:08:00,000
underscore mac dot sh file as well

00:07:56,400 --> 00:08:03,039
okay and uh in in this use case we have

00:08:00,000 --> 00:08:03,520
uh i was using the windows operating

00:08:03,039 --> 00:08:06,800
system

00:08:03,520 --> 00:08:09,440
so you are using run 64.

00:08:06,800 --> 00:08:11,440
so once you double click on that uh it

00:08:09,440 --> 00:08:15,360
basically brings up the

00:08:11,440 --> 00:08:16,800
umls insulation visor and that right in

00:08:15,360 --> 00:08:19,840
the center you can see

00:08:16,800 --> 00:08:22,080
the insert mls button

00:08:19,840 --> 00:08:23,680
so once you click on that install your

00:08:22,080 --> 00:08:26,800
mls button

00:08:23,680 --> 00:08:29,199
it will take you to the next slide where

00:08:26,800 --> 00:08:30,000
you basically have to point to the

00:08:29,199 --> 00:08:32,800
source

00:08:30,000 --> 00:08:34,959
directory where you have downloaded the

00:08:32,800 --> 00:08:36,159
all the size related to the umls

00:08:34,959 --> 00:08:38,159
installation

00:08:36,159 --> 00:08:39,200
and then probably you also have to

00:08:38,159 --> 00:08:42,000
create a

00:08:39,200 --> 00:08:42,800
destination folder where you want all

00:08:42,000 --> 00:08:46,880
the

00:08:42,800 --> 00:08:49,360
uh metamorphosis and um installation

00:08:46,880 --> 00:08:52,640
files to be returned to

00:08:49,360 --> 00:08:54,880
so once you browse the destination file

00:08:52,640 --> 00:08:57,040
path you can click on ok

00:08:54,880 --> 00:08:58,480
which will take you to a new

00:08:57,040 --> 00:09:01,600
configuration screen

00:08:58,480 --> 00:09:05,040
and you have to click on the

00:09:01,600 --> 00:09:08,080
new configuration button as

00:09:05,040 --> 00:09:09,519
as i am pointing here once you click on

00:09:08,080 --> 00:09:12,720
the new configuration

00:09:09,519 --> 00:09:14,959
button it will bring up the

00:09:12,720 --> 00:09:18,640
license agreement notice and then you

00:09:14,959 --> 00:09:18,640
have to click on the accept button

00:09:19,600 --> 00:09:23,200
after click on accept button basically

00:09:22,160 --> 00:09:26,399
it brings up

00:09:23,200 --> 00:09:28,080
the default subset configuration

00:09:26,399 --> 00:09:31,839
selection screen where you can

00:09:28,080 --> 00:09:34,560
select either level 0

00:09:31,839 --> 00:09:37,200
or sources which does not require any

00:09:34,560 --> 00:09:40,240
additional license experiment or

00:09:37,200 --> 00:09:43,920
we can select level zero plus number ct

00:09:40,240 --> 00:09:45,040
uh whatever okay personal choice and

00:09:43,920 --> 00:09:48,800
then you can click on

00:09:45,040 --> 00:09:51,680
ok once you click on ok it will

00:09:48,800 --> 00:09:53,600
take you to the meta service

00:09:51,680 --> 00:09:55,680
configuration screen

00:09:53,600 --> 00:09:57,040
where the key thing to be noted here is

00:09:55,680 --> 00:10:01,440
the destination

00:09:57,040 --> 00:10:05,200
uh folder where uh

00:10:01,440 --> 00:10:07,200
that you have to uh where the dot rrs

00:10:05,200 --> 00:10:09,920
file will be

00:10:07,200 --> 00:10:10,880
extracted out so this part has to be

00:10:09,920 --> 00:10:12,720
noted down

00:10:10,880 --> 00:10:14,720
uh whatever i am highlighting here in

00:10:12,720 --> 00:10:16,320
the destination because this part will

00:10:14,720 --> 00:10:19,519
be used by

00:10:16,320 --> 00:10:22,959
uh the ctx dictionary creator gui

00:10:19,519 --> 00:10:24,880
to load all the uh libraries in

00:10:22,959 --> 00:10:28,000
vocabulary so we just have to

00:10:24,880 --> 00:10:30,640
make note of this destination part and

00:10:28,000 --> 00:10:31,600
once we point out the destination path

00:10:30,640 --> 00:10:33,920
uh

00:10:31,600 --> 00:10:34,880
right here in the same window you have a

00:10:33,920 --> 00:10:37,600
done button

00:10:34,880 --> 00:10:39,040
when you click on that uh it just pops

00:10:37,600 --> 00:10:42,399
up another

00:10:39,040 --> 00:10:44,839
option saying begin subset so you can

00:10:42,399 --> 00:10:49,040
just click on that which will

00:10:44,839 --> 00:10:52,320
start umls installation and this may

00:10:49,040 --> 00:10:54,800
run for several minutes

00:10:52,320 --> 00:10:55,839
and then finally you will be able to see

00:10:54,800 --> 00:10:58,959
all the

00:10:55,839 --> 00:11:00,800
respective rr signs under the following

00:10:58,959 --> 00:11:02,800
uh destination location which you're

00:11:00,800 --> 00:11:05,720
selecting

00:11:02,800 --> 00:11:07,279
so that pretty much covers uh the

00:11:05,720 --> 00:11:10,720
metamorphosis and

00:11:07,279 --> 00:11:11,839
the umls insulation and the next

00:11:10,720 --> 00:11:13,920
component

00:11:11,839 --> 00:11:15,200
which we will be talking about here is

00:11:13,920 --> 00:11:18,560
uh

00:11:15,200 --> 00:11:21,680
see takes uh dictionary creators gui

00:11:18,560 --> 00:11:25,040
so dictionary creator gui uh

00:11:21,680 --> 00:11:28,240
is uh buttons it takes to

00:11:25,040 --> 00:11:31,519
generate a certain custom scripts

00:11:28,240 --> 00:11:35,040
uh uh for the library

00:11:31,519 --> 00:11:40,480
for the libraries like madras

00:11:35,040 --> 00:11:43,920
or rx non libraries of your choice

00:11:40,480 --> 00:11:46,720
so to start the dictionary creator gui

00:11:43,920 --> 00:11:48,480
uh you have to get into your ctx home

00:11:46,720 --> 00:11:52,000
folder where you have

00:11:48,480 --> 00:11:54,320
downloaded or see this user installation

00:11:52,000 --> 00:11:56,560
and then you need to navigate inside the

00:11:54,320 --> 00:11:58,480
bin folder and that you will see

00:11:56,560 --> 00:12:00,880
a batch file called one which is very

00:11:58,480 --> 00:12:02,720
creative created or back

00:12:00,880 --> 00:12:04,720
so once you double click on the batch

00:12:02,720 --> 00:12:07,360
file it basically

00:12:04,720 --> 00:12:08,880
uh brings up the dictionary created to

00:12:07,360 --> 00:12:13,040
your screen

00:12:08,880 --> 00:12:16,399
and here as uh highlighted in the slide

00:12:13,040 --> 00:12:19,680
you have to select the

00:12:16,399 --> 00:12:20,959
meta folder inside which you have these

00:12:19,680 --> 00:12:23,279
rr files

00:12:20,959 --> 00:12:25,440
that needs to be pointed out in the umls

00:12:23,279 --> 00:12:28,320
installation folder here

00:12:25,440 --> 00:12:29,200
the moment to select the umls

00:12:28,320 --> 00:12:32,639
installation

00:12:29,200 --> 00:12:35,040
folder it will start loading all the

00:12:32,639 --> 00:12:35,760
vocabularies and the semantic type as

00:12:35,040 --> 00:12:38,639
you see

00:12:35,760 --> 00:12:39,920
in the screen and then you have the

00:12:38,639 --> 00:12:43,680
option

00:12:39,920 --> 00:12:44,560
to select the vocabularies and tui terms

00:12:43,680 --> 00:12:47,839
of

00:12:44,560 --> 00:12:50,160
your choice and then here in the

00:12:47,839 --> 00:12:52,639
dictionary name column you can

00:12:50,160 --> 00:12:54,079
key in any custom dictionary name of

00:12:52,639 --> 00:12:56,880
your choice

00:12:54,079 --> 00:12:58,079
and then you can click on build

00:12:56,880 --> 00:13:01,920
dictionary

00:12:58,079 --> 00:13:04,959
which in turn will start creating

00:13:01,920 --> 00:13:06,800
the script files for all the

00:13:04,959 --> 00:13:09,680
vocabularies and similar dictates

00:13:06,800 --> 00:13:13,200
whatever the user has chosen

00:13:09,680 --> 00:13:15,360
and then eventually all the uh resources

00:13:13,200 --> 00:13:18,240
that got generated as part of

00:13:15,360 --> 00:13:20,399
running the dictionary created a

00:13:18,240 --> 00:13:21,440
dictionary creator gui will be available

00:13:20,399 --> 00:13:24,800
under

00:13:21,440 --> 00:13:28,800
uh the ctex home slash resources

00:13:24,800 --> 00:13:31,600
or the apache ctx dictionary lookup fast

00:13:28,800 --> 00:13:34,000
and then with the dictionary name so in

00:13:31,600 --> 00:13:36,720
in gui if you're selected custom

00:13:34,000 --> 00:13:37,600
uh you can find it under fast slash

00:13:36,720 --> 00:13:40,800
custom

00:13:37,600 --> 00:13:45,199
but if you are given any custom name and

00:13:40,800 --> 00:13:49,839
you can find it uh in the corresponding

00:13:45,199 --> 00:13:49,839
folder name of whatever you created

00:13:50,560 --> 00:13:54,320
and basically the script file which got

00:13:52,959 --> 00:13:57,890
generated after

00:13:54,320 --> 00:14:01,010
uh running receiving

00:13:57,890 --> 00:14:01,010
[Music]

00:14:01,760 --> 00:14:04,880
the dictionary created grave will look

00:14:03,519 --> 00:14:08,160
something like this

00:14:04,880 --> 00:14:11,279
and currently we have a limitation uh

00:14:08,160 --> 00:14:13,920
as in like uh the script file whatever

00:14:11,279 --> 00:14:14,839
generated by dictionary created we will

00:14:13,920 --> 00:14:19,360
be

00:14:14,839 --> 00:14:22,399
uh will be aligned to hsqldb

00:14:19,360 --> 00:14:25,279
and uh it will not be

00:14:22,399 --> 00:14:25,920
if you want to use the script file

00:14:25,279 --> 00:14:28,560
against

00:14:25,920 --> 00:14:30,000
any other tv for instance like mysql

00:14:28,560 --> 00:14:32,079
oracle or something

00:14:30,000 --> 00:14:33,040
we have to manually tweak the script

00:14:32,079 --> 00:14:37,279
file

00:14:33,040 --> 00:14:39,199
to align to the database of our choice

00:14:37,279 --> 00:14:40,880
so currently we don't have a provision

00:14:39,199 --> 00:14:44,000
where you can select

00:14:40,880 --> 00:14:47,519
a database of your choice and then

00:14:44,000 --> 00:14:52,079
select the script so that

00:14:47,519 --> 00:14:52,079
that limitation is still there probably

00:14:52,320 --> 00:14:56,079
so in our use case what we did was we

00:14:54,720 --> 00:14:59,440
were using

00:14:56,079 --> 00:15:01,120
mysql db uh to populate whatever scripts

00:14:59,440 --> 00:15:04,240
that got generated as part of

00:15:01,120 --> 00:15:07,519
uh custom dictionary greater gui

00:15:04,240 --> 00:15:08,160
so what we did was we took the hsqldb

00:15:07,519 --> 00:15:12,320
scripts

00:15:08,160 --> 00:15:15,360
and then tweaked it to

00:15:12,320 --> 00:15:19,839
fit to my sql db and then uh

00:15:15,360 --> 00:15:23,120
we just split the h-script file into

00:15:19,839 --> 00:15:27,680
say like multiple parts and

00:15:23,120 --> 00:15:30,399
what we did was uh we opened the

00:15:27,680 --> 00:15:31,199
like several instances of mysql client

00:15:30,399 --> 00:15:35,600
and then

00:15:31,199 --> 00:15:37,839
ran each individual script files which

00:15:35,600 --> 00:15:41,519
we have fitted across and then

00:15:37,839 --> 00:15:45,120
we populated the db so basically

00:15:41,519 --> 00:15:48,079
uh even after uh splitting the

00:15:45,120 --> 00:15:49,519
database scripts into say four to six

00:15:48,079 --> 00:15:54,160
parts it will still take

00:15:49,519 --> 00:15:58,639
a few hours to populate the complete uh

00:15:54,160 --> 00:16:01,120
vocabularies and terms into the database

00:15:58,639 --> 00:16:02,959
so that is the uh that is one main

00:16:01,120 --> 00:16:05,040
reason why we have to run

00:16:02,959 --> 00:16:06,000
this scriptures in multiple instances

00:16:05,040 --> 00:16:09,279
rather than running

00:16:06,000 --> 00:16:10,720
in one instance which may take several

00:16:09,279 --> 00:16:13,759
hours to

00:16:10,720 --> 00:16:13,759
populate all the data

00:16:16,480 --> 00:16:21,519
and then once uh scripts are split we

00:16:19,600 --> 00:16:24,880
just load the mysql db

00:16:21,519 --> 00:16:28,800
with the scripts and once the mysql db

00:16:24,880 --> 00:16:32,480
is ready now we can

00:16:28,800 --> 00:16:36,000
tweak uh the ctx

00:16:32,480 --> 00:16:38,560
web based model configuration to

00:16:36,000 --> 00:16:39,600
connect to that particular db so how do

00:16:38,560 --> 00:16:43,199
we do that is like

00:16:39,600 --> 00:16:47,240
uh in the ctx web press module

00:16:43,199 --> 00:16:48,880
uh we have an xml file called custom

00:16:47,240 --> 00:16:52,399
dictionary.xml

00:16:48,880 --> 00:16:54,880
which holds the connection details

00:16:52,399 --> 00:16:56,480
about uh which tv it should connect to

00:16:54,880 --> 00:17:00,079
while the application is running

00:16:56,480 --> 00:17:01,920
so basically uh that file is available

00:17:00,079 --> 00:17:05,039
under ctx web rest

00:17:01,920 --> 00:17:07,199
src main resources are patches it takes

00:17:05,039 --> 00:17:08,760
dictionary lookup fast

00:17:07,199 --> 00:17:11,120
under that you will find this custom

00:17:08,760 --> 00:17:14,079
dictionary.xml file so basically

00:17:11,120 --> 00:17:15,039
uh that file will look something like

00:17:14,079 --> 00:17:19,360
this

00:17:15,039 --> 00:17:22,640
and then you can edit the jdbc url

00:17:19,360 --> 00:17:23,120
in that xml file and then probably you

00:17:22,640 --> 00:17:27,120
can

00:17:23,120 --> 00:17:30,960
uh you can you can just

00:17:27,120 --> 00:17:35,520
configure the url uh

00:17:30,960 --> 00:17:38,960
under which the mysql uh tv is running

00:17:35,520 --> 00:17:41,200
and you can also change the

00:17:38,960 --> 00:17:42,720
database name under which you have

00:17:41,200 --> 00:17:44,840
populated

00:17:42,720 --> 00:17:46,000
the scripts which we talked about

00:17:44,840 --> 00:17:48,960
earlier

00:17:46,000 --> 00:17:50,480
and you also have to give the

00:17:48,960 --> 00:17:52,320
corresponding username

00:17:50,480 --> 00:17:53,840
password credentials to connect to that

00:17:52,320 --> 00:17:57,520
particularly so once

00:17:53,840 --> 00:18:01,360
uh this xml is tweaked

00:17:57,520 --> 00:18:04,320
to connect to the db which you have

00:18:01,360 --> 00:18:06,400
set up in the last step uh then you can

00:18:04,320 --> 00:18:10,799
save this file and then

00:18:06,400 --> 00:18:12,480
you can build the ctx webpress module

00:18:10,799 --> 00:18:16,320
separately

00:18:12,480 --> 00:18:19,280
and uh once you build this module uh

00:18:16,320 --> 00:18:21,120
or you under the under that model's

00:18:19,280 --> 00:18:23,120
target folder you will

00:18:21,120 --> 00:18:24,720
get a warfare which is nothing but a web

00:18:23,120 --> 00:18:28,080
arcade file

00:18:24,720 --> 00:18:29,760
and it will be named as ctx web iphone

00:18:28,080 --> 00:18:32,640
rest.org

00:18:29,760 --> 00:18:33,520
so once you have the wire file ready you

00:18:32,640 --> 00:18:37,200
can

00:18:33,520 --> 00:18:39,679
deploy this webmarket file into

00:18:37,200 --> 00:18:42,880
oh any of the application servers so

00:18:39,679 --> 00:18:46,320
your choice in this case we have chosen

00:18:42,880 --> 00:18:50,160
to deploy it on apache tomcat and

00:18:46,320 --> 00:18:52,559
once uh it's deployed basically

00:18:50,160 --> 00:18:55,039
uh it eventually means that like you

00:18:52,559 --> 00:18:58,240
have enabled

00:18:55,039 --> 00:19:00,480
the rest support and she takes and then

00:18:58,240 --> 00:19:02,400
we are all set to access the list

00:19:00,480 --> 00:19:05,200
endpoint

00:19:02,400 --> 00:19:05,200
and uh

00:19:05,520 --> 00:19:08,559
the rest endpoint will look something

00:19:07,440 --> 00:19:11,600
like this

00:19:08,559 --> 00:19:13,360
as shown in the slide like your host

00:19:11,600 --> 00:19:16,640
name colon port slash uh

00:19:13,360 --> 00:19:20,000
ctx hyphen web and west

00:19:16,640 --> 00:19:22,640
slash service slash analyze

00:19:20,000 --> 00:19:24,080
and then uh question mark pipeline is

00:19:22,640 --> 00:19:27,120
equal to default

00:19:24,080 --> 00:19:30,000
by default uh we are using the

00:19:27,120 --> 00:19:31,039
default paper which is available as part

00:19:30,000 --> 00:19:34,080
of the

00:19:31,039 --> 00:19:36,160
clinical pipeline but if you want to do

00:19:34,080 --> 00:19:39,360
any detail analysis

00:19:36,160 --> 00:19:42,000
we can use the pipe

00:19:39,360 --> 00:19:43,600
full paper which uh has this negation

00:19:42,000 --> 00:19:45,679
and other

00:19:43,600 --> 00:19:48,000
paper so basically if you wanted an

00:19:45,679 --> 00:19:50,000
extension analysis we can use analyze

00:19:48,000 --> 00:19:51,280
analyze question mark pipeline is equal

00:19:50,000 --> 00:19:53,919
to full

00:19:51,280 --> 00:19:55,679
with that you will be able to do

00:19:53,919 --> 00:19:58,320
extensive analysis on this

00:19:55,679 --> 00:19:58,880
using this rest endpoint and not only

00:19:58,320 --> 00:20:03,280
that

00:19:58,880 --> 00:20:06,960
we have also exposed the web url in this

00:20:03,280 --> 00:20:10,400
inside this module uh so that

00:20:06,960 --> 00:20:14,640
you can you can just access the

00:20:10,400 --> 00:20:17,280
url and then analyze the narrative text

00:20:14,640 --> 00:20:19,440
of your choice to ensure that

00:20:17,280 --> 00:20:20,799
the web model is running successfully

00:20:19,440 --> 00:20:23,679
before even

00:20:20,799 --> 00:20:25,760
hitting the rest end point so the web

00:20:23,679 --> 00:20:26,720
url looks something like this as shown

00:20:25,760 --> 00:20:29,919
in the slide like

00:20:26,720 --> 00:20:31,520
uh host name colon port slash see takes

00:20:29,919 --> 00:20:35,280
iphone web address

00:20:31,520 --> 00:20:37,440
slash index.jsp so it's uh

00:20:35,280 --> 00:20:39,200
it's a it's a web model which has been

00:20:37,440 --> 00:20:41,600
exposed and then

00:20:39,200 --> 00:20:43,120
once you key in any narrative text in

00:20:41,600 --> 00:20:45,440
this web model and

00:20:43,120 --> 00:20:46,960
try to do analysis behind the scenes it

00:20:45,440 --> 00:20:51,520
will

00:20:46,960 --> 00:20:55,600
internally make a rest call as well uh

00:20:51,520 --> 00:20:58,880
so this slide basically shows how uh

00:20:55,600 --> 00:21:01,280
the web url looks like and then once you

00:20:58,880 --> 00:21:02,080
access this index.jsp basically you will

00:21:01,280 --> 00:21:04,240
get a

00:21:02,080 --> 00:21:04,240
uh

00:21:05,120 --> 00:21:09,760
the portal where you have an option to

00:21:08,320 --> 00:21:12,960
key in your

00:21:09,760 --> 00:21:15,760
narrative text as shown in the slide so

00:21:12,960 --> 00:21:16,000
in this example i have given something

00:21:15,760 --> 00:21:18,880
like

00:21:16,000 --> 00:21:20,640
patient has cancer and once after

00:21:18,880 --> 00:21:22,480
entering the narrative text if you click

00:21:20,640 --> 00:21:25,919
on analyze button

00:21:22,480 --> 00:21:28,080
uh behind the scenes uh

00:21:25,919 --> 00:21:29,840
from the web application we will be

00:21:28,080 --> 00:21:32,880
making

00:21:29,840 --> 00:21:35,840
an ajax call to the rest endpoint

00:21:32,880 --> 00:21:37,520
by passing this narrative text payload

00:21:35,840 --> 00:21:40,880
whatever we have given

00:21:37,520 --> 00:21:43,600
and then here you can see the output

00:21:40,880 --> 00:21:45,600
that is returned from the ctx engine

00:21:43,600 --> 00:21:48,080
so basically in this case you can see

00:21:45,600 --> 00:21:48,559
the output will be of json format and

00:21:48,080 --> 00:21:51,520
then

00:21:48,559 --> 00:21:54,720
here it has written uh disease disorder

00:21:51,520 --> 00:21:57,919
mentioned as cancer with the respective

00:21:54,720 --> 00:21:59,760
cui terms and then the coding scheme

00:21:57,919 --> 00:22:02,559
which is nothing but snowman ct

00:21:59,760 --> 00:22:05,360
underscore us

00:22:02,559 --> 00:22:06,480
so by doing so we can ensure that the

00:22:05,360 --> 00:22:09,520
model is running

00:22:06,480 --> 00:22:11,360
and once this is running uh you can

00:22:09,520 --> 00:22:14,799
expose this first endpoint

00:22:11,360 --> 00:22:18,120
or whatever i'm editing in this slide

00:22:14,799 --> 00:22:20,640
uh and through this i can with this

00:22:18,120 --> 00:22:24,000
response endpoint you can make

00:22:20,640 --> 00:22:25,600
any application built in any language to

00:22:24,000 --> 00:22:29,440
talk to ctx engine

00:22:25,600 --> 00:22:33,120
and then get the text analyzed and

00:22:29,440 --> 00:22:37,919
written back the response

00:22:33,120 --> 00:22:39,600
so in our use case uh where we are

00:22:37,919 --> 00:22:42,799
where we are dealing with the product

00:22:39,600 --> 00:22:45,840
where the adverse event reactions are

00:22:42,799 --> 00:22:46,400
reported in our use case we basically

00:22:45,840 --> 00:22:49,200
run

00:22:46,400 --> 00:22:49,200
a ctex

00:22:49,600 --> 00:22:52,720
application also separate web

00:22:51,919 --> 00:22:55,760
application

00:22:52,720 --> 00:22:58,960
exposing this rest endpoint and whenever

00:22:55,760 --> 00:23:02,000
our reporter keys in the narrative text

00:22:58,960 --> 00:23:05,200
and then click on analyze

00:23:02,000 --> 00:23:06,720
we will just post the payload to the ctx

00:23:05,200 --> 00:23:09,280
rest endpoint

00:23:06,720 --> 00:23:10,480
which will uh which will figure out

00:23:09,280 --> 00:23:13,120
different dimensions

00:23:10,480 --> 00:23:14,480
and then the reporters will have option

00:23:13,120 --> 00:23:17,120
to choose

00:23:14,480 --> 00:23:18,480
whatever it mentions and then that will

00:23:17,120 --> 00:23:20,480
be created as

00:23:18,480 --> 00:23:23,200
as part of adverse event reaction so

00:23:20,480 --> 00:23:26,720
that is the use case which we have

00:23:23,200 --> 00:23:26,720
built in our organization

00:23:27,520 --> 00:23:32,720
and this was pretty much i wanted to

00:23:30,640 --> 00:23:36,880
cover as part of

00:23:32,720 --> 00:23:39,919
this support in apache ctx and

00:23:36,880 --> 00:23:39,919
hope it was useful

00:23:40,320 --> 00:23:42,720
thank you

00:23:44,400 --> 00:23:51,039
thank you that was uh extremely thorough

00:23:48,000 --> 00:23:51,600
i think it you showed a lot of ways that

00:23:51,039 --> 00:23:54,880
you could

00:23:51,600 --> 00:23:54,880
modify that uh

00:23:55,039 --> 00:24:00,480
rest installation to do uh whatever is

00:23:58,720 --> 00:24:04,080
needed on

00:24:00,480 --> 00:24:09,200
your site that was very interesting

00:24:04,080 --> 00:24:09,200
thank you thank you

00:24:14,159 --> 00:24:19,840
are there any questions

00:24:20,799 --> 00:24:24,159
one common question which we used to see

00:24:23,760 --> 00:24:27,919
in

00:24:24,159 --> 00:24:31,120
the mailing list is like why not use

00:24:27,919 --> 00:24:32,799
spring boot rather than using the

00:24:31,120 --> 00:24:33,679
traditional spring framework so

00:24:32,799 --> 00:24:37,200
basically

00:24:33,679 --> 00:24:40,400
uh how i would take that is like uh

00:24:37,200 --> 00:24:42,320
ctx already has a spring framework

00:24:40,400 --> 00:24:46,080
embedded into it

00:24:42,320 --> 00:24:49,760
so we don't want to bloat

00:24:46,080 --> 00:24:52,799
takes again with something like uh

00:24:49,760 --> 00:24:56,240
spring boot because uh c takes

00:24:52,799 --> 00:24:56,240
as such is already heavy

00:24:58,080 --> 00:25:01,840
that is true

00:25:06,640 --> 00:25:10,320
and even though i think spring boot has

00:25:09,120 --> 00:25:13,600
a more robust

00:25:10,320 --> 00:25:17,520
framework and what not

00:25:13,600 --> 00:25:17,520
just using pure spring

00:25:19,679 --> 00:25:29,120
allows you to stick to i'm going to say

00:25:22,880 --> 00:25:31,840
basic standards a little more

00:25:29,120 --> 00:25:34,559
okay regarding the question on

00:25:31,840 --> 00:25:39,440
performance

00:25:34,559 --> 00:25:41,200
what we could see is uh we were able to

00:25:39,440 --> 00:25:42,720
scale the performance by running

00:25:41,200 --> 00:25:46,400
multiple instances

00:25:42,720 --> 00:25:49,279
of the ctake instance

00:25:46,400 --> 00:25:49,679
and that is one reason why we went ahead

00:25:49,279 --> 00:25:53,760
with

00:25:49,679 --> 00:25:54,159
uh loading all the vocabularies to mysql

00:25:53,760 --> 00:25:57,279
db

00:25:54,159 --> 00:26:00,240
so that multiple instances of c

00:25:57,279 --> 00:26:02,559
takes a rest module can talk to one

00:26:00,240 --> 00:26:03,520
single database so that way we were able

00:26:02,559 --> 00:26:06,640
to

00:26:03,520 --> 00:26:08,960
achieve better performance and then to

00:26:06,640 --> 00:26:12,720
answer another question on your mls

00:26:08,960 --> 00:26:15,679
credentials uh i'm i'm

00:26:12,720 --> 00:26:18,480
still puzzled about this connectivity to

00:26:15,679 --> 00:26:23,039
uml so basically what we did was

00:26:18,480 --> 00:26:25,360
uh we we generated the script out of

00:26:23,039 --> 00:26:26,640
the custom dictionary gui and then

00:26:25,360 --> 00:26:30,400
loaded everything

00:26:26,640 --> 00:26:31,279
uh to our mysql db locally so we were

00:26:30,400 --> 00:26:36,000
basically not

00:26:31,279 --> 00:26:37,679
uh accessing uh the umls resources at

00:26:36,000 --> 00:26:41,279
all

00:26:37,679 --> 00:26:43,360
all the calls were talking to

00:26:41,279 --> 00:26:44,880
the database itself which is loaded

00:26:43,360 --> 00:26:47,760
locally

00:26:44,880 --> 00:26:48,000
in fact i'm not even sure like we can it

00:26:47,760 --> 00:26:50,799
is

00:26:48,000 --> 00:26:53,520
it is kind of legal to do that i still

00:26:50,799 --> 00:26:56,720
have this question open on myself

00:26:53,520 --> 00:26:59,840
seen any idea on that yes

00:26:56,720 --> 00:26:59,840
actually uh

00:27:00,159 --> 00:27:07,919
you can okay so

00:27:03,279 --> 00:27:10,960
the agreements that we came up with

00:27:07,919 --> 00:27:14,240
with the nlm was that

00:27:10,960 --> 00:27:17,279
a person could not distribute

00:27:14,240 --> 00:27:20,320
a copy or modified copy of the

00:27:17,279 --> 00:27:23,120
umls and

00:27:20,320 --> 00:27:25,520
what that means is you cannot you know

00:27:23,120 --> 00:27:28,880
for instance download the umls

00:27:25,520 --> 00:27:31,840
and then using your password and then

00:27:28,880 --> 00:27:34,640
start handing it off to other people

00:27:31,840 --> 00:27:35,440
now what you did was you basically

00:27:34,640 --> 00:27:37,600
downloaded it

00:27:35,440 --> 00:27:40,559
created a modification and then we're

00:27:37,600 --> 00:27:43,919
running it at a site

00:27:40,559 --> 00:27:45,600
but you were not literally passing it

00:27:43,919 --> 00:27:49,440
around

00:27:45,600 --> 00:27:52,320
so that was it's kind of goofy but it

00:27:49,440 --> 00:27:54,310
actually does lie within the bounds of

00:27:52,320 --> 00:27:57,550
the original agreement

00:27:54,310 --> 00:27:57,550
[Music]

00:27:58,880 --> 00:28:04,159
yeah and when the rest service was

00:28:03,279 --> 00:28:06,399
started

00:28:04,159 --> 00:28:07,840
uh or if you you know create your own

00:28:06,399 --> 00:28:10,880
risk service

00:28:07,840 --> 00:28:14,960
you can always ping the um or the nlm

00:28:10,880 --> 00:28:17,279
and say i'm using the mls here my

00:28:14,960 --> 00:28:18,159
username and password and then the rest

00:28:17,279 --> 00:28:21,520
service just

00:28:18,159 --> 00:28:24,799
keeps on running and other people

00:28:21,520 --> 00:28:25,200
can use it but again you are not passing

00:28:24,799 --> 00:28:31,840
around

00:28:25,200 --> 00:28:31,840
an entire modified copy of mls

00:28:37,840 --> 00:28:43,520
to answer the question another question

00:28:39,840 --> 00:28:47,200
on the garbage collection and heaps etc

00:28:43,520 --> 00:28:51,679
so basically the

00:28:47,200 --> 00:28:54,960
model not specie takes engine only once

00:28:51,679 --> 00:28:58,080
and after every analysis it doesn't

00:28:54,960 --> 00:29:01,679
uh reload it again so that way

00:28:58,080 --> 00:29:02,320
we didn't see any of the keep space

00:29:01,679 --> 00:29:13,840
issues

00:29:02,320 --> 00:29:13,840
or the garbage collection issues

00:29:24,840 --> 00:29:27,840
so

00:29:29,279 --> 00:29:32,640
okay i think we still have a few minutes

00:29:31,600 --> 00:29:37,919
left

00:29:32,640 --> 00:29:41,840
and then you're off the hook

00:29:37,919 --> 00:29:41,840
so are there any minute questions

00:29:42,799 --> 00:29:58,000
anything is fair game

00:29:54,320 --> 00:29:58,000
uh sqlite

00:29:59,360 --> 00:30:07,679
i think as gandhi rajan

00:30:03,200 --> 00:30:09,679
said they

00:30:07,679 --> 00:30:10,960
manually modified the scripts that is

00:30:09,679 --> 00:30:14,720
produced for

00:30:10,960 --> 00:30:18,000
hsql and it seems to me

00:30:14,720 --> 00:30:21,200
that you could do that same modification

00:30:18,000 --> 00:30:24,640
of an existing

00:30:21,200 --> 00:30:28,480
basic sql script to

00:30:24,640 --> 00:30:32,720
import the database into any other

00:30:28,480 --> 00:30:32,720
sql based database

00:30:33,120 --> 00:30:37,840
would you agree with that

00:30:38,480 --> 00:30:45,120
yeah and also i think we also had a

00:30:41,600 --> 00:30:46,799
plan of financing the dictionary creator

00:30:45,120 --> 00:30:49,279
degree earlier

00:30:46,799 --> 00:30:52,000
where we can provide an option to choose

00:30:49,279 --> 00:30:53,919
the db and then

00:30:52,000 --> 00:30:55,440
generate the script for that specific

00:30:53,919 --> 00:31:05,840
language but

00:30:55,440 --> 00:31:05,840
for a specific tv

00:31:09,279 --> 00:31:14,799
so ghana uh

00:31:12,480 --> 00:31:15,919
wants to know how many documents you've

00:31:14,799 --> 00:31:19,760
processed

00:31:15,919 --> 00:31:21,279
do you have any agreement our use case

00:31:19,760 --> 00:31:23,919
was more of

00:31:21,279 --> 00:31:26,960
the product where we have integrated ctx

00:31:23,919 --> 00:31:29,919
was more of an adverse event

00:31:26,960 --> 00:31:32,080
reaction tracking product so basically

00:31:29,919 --> 00:31:35,440
that the intake volume was not

00:31:32,080 --> 00:31:39,279
so huge like i would say like probably

00:31:35,440 --> 00:31:42,720
uh the volume was somewhere like

00:31:39,279 --> 00:31:47,200
3000 uh documents per hour

00:31:42,720 --> 00:31:51,440
something like that

00:31:47,200 --> 00:31:51,440
that's actually pretty good right

00:31:53,760 --> 00:31:59,919
yeah but we had to spawn uh uh

00:31:57,279 --> 00:32:00,559
say like two three instances of plus

00:31:59,919 --> 00:32:04,000
modulus

00:32:00,559 --> 00:32:06,960
as i said but all talking to the same uh

00:32:04,000 --> 00:32:06,960
mysql db

00:32:12,799 --> 00:32:16,159
yeah and one thing probably what we

00:32:14,799 --> 00:32:21,279
wanted to try out

00:32:16,159 --> 00:32:24,640
uh was to containerize

00:32:21,279 --> 00:32:24,640
the mysql uh

00:32:26,000 --> 00:32:33,919
my sequel db and then even

00:32:29,600 --> 00:32:37,519
the rest instances so that it will be

00:32:33,919 --> 00:32:40,320
easy for us to scale in and scale out

00:32:37,519 --> 00:32:42,480
based on the demand so that is one thing

00:32:40,320 --> 00:32:45,039
which is

00:32:42,480 --> 00:32:47,760
still on our action item which needs to

00:32:45,039 --> 00:32:47,760
be tried out

00:32:55,440 --> 00:33:00,320
uh yeah transit peters question those

00:32:57,519 --> 00:33:05,120
are not multiple instances basically

00:33:00,320 --> 00:33:05,120
like kind of different deployment

00:33:08,840 --> 00:33:11,840
section

00:33:14,559 --> 00:33:21,440
our average word per document uh

00:33:18,080 --> 00:33:24,640
not so sure but uh

00:33:21,440 --> 00:33:27,519
so it will be like some

00:33:24,640 --> 00:33:30,240
thousand words narrative which has been

00:33:27,519 --> 00:33:30,240
reported by

00:33:30,720 --> 00:33:34,240
the patient or the reporter

00:33:35,039 --> 00:33:40,399
precisely i don't have the number but

00:33:38,159 --> 00:33:53,840
it might be like a thousand words per

00:33:40,399 --> 00:33:53,840
document or something like that

00:34:04,840 --> 00:34:07,840
uh

00:34:08,320 --> 00:34:13,200
okay well if there are no more questions

00:34:12,800 --> 00:34:21,520
we're

00:34:13,200 --> 00:34:26,079
actually coming up on our time

00:34:21,520 --> 00:34:26,079
so i think um

00:34:26,159 --> 00:34:33,359
thank you is in order thank you gandhi

00:34:29,919 --> 00:34:36,800
and yup

00:34:33,359 --> 00:34:39,839
that was very interesting and

00:34:36,800 --> 00:34:41,040
now i guess everyone has to leave and go

00:34:39,839 --> 00:34:43,520
into the next

00:34:41,040 --> 00:34:43,520
session

00:34:44,399 --> 00:34:49,839
sure thanks all thank you thank you

00:35:15,359 --> 00:35:17,440

YouTube URL: https://www.youtube.com/watch?v=pBB4_lycmrw


