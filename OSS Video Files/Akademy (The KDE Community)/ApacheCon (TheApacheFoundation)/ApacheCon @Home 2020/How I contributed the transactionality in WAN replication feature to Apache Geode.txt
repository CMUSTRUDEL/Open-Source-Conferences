Title: How I contributed the transactionality in WAN replication feature to Apache Geode
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020
Description: 
	How I contributed the transactionality in WAN replication feature to Apache Geode
Alberto Gomez

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

In this talk I will describe the use case that drove me to develop the "Transactionality in WAN replication" feature and then I will sketch the technical solution implemented. In a second part, I will walk you through the process I followed to contribute the feature, from the point of view of a recent member of the Apache Geode Community.

Software engineer with more than 20 years of experience in the telco world. Husband, father of three and stylish tennis contender.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,599 --> 00:00:30,080
okay

00:00:26,160 --> 00:00:33,280
time's up my name is alberto gomez

00:00:30,080 --> 00:00:35,440
i am from madrid spain and this is the

00:00:33,280 --> 00:00:37,760
presentation i want to give to you

00:00:35,440 --> 00:00:39,600
how i contributed the transactionality

00:00:37,760 --> 00:00:43,520
and one replication feature

00:00:39,600 --> 00:00:45,120
to apache george this is the agenda

00:00:43,520 --> 00:00:46,960
we're going to follow today

00:00:45,120 --> 00:00:49,360
first some words of introduction about

00:00:46,960 --> 00:00:50,879
myself and also some apache geo

00:00:49,360 --> 00:00:53,680
background just in case you're new

00:00:50,879 --> 00:00:56,239
to apache geode so that you have you can

00:00:53,680 --> 00:00:59,520
have some context about the presentation

00:00:56,239 --> 00:01:02,160
and then we'll jump into the into the

00:00:59,520 --> 00:01:03,680
into the mid of the presentation in the

00:01:02,160 --> 00:01:05,680
first part i will talk about

00:01:03,680 --> 00:01:07,840
the technical description of the feature

00:01:05,680 --> 00:01:09,280
this transactionality in one replication

00:01:07,840 --> 00:01:11,760
feature

00:01:09,280 --> 00:01:13,280
i will first talk about the use case

00:01:11,760 --> 00:01:16,400
that drove me to

00:01:13,280 --> 00:01:18,320
to implement this into apache geode

00:01:16,400 --> 00:01:19,759
and later i will give you details i will

00:01:18,320 --> 00:01:22,799
sketch the solution

00:01:19,759 --> 00:01:25,439
i devised to to fix

00:01:22,799 --> 00:01:27,520
this problem we found in apache jio in

00:01:25,439 --> 00:01:29,439
the second part of the presentation

00:01:27,520 --> 00:01:31,119
i will guide you through the process i

00:01:29,439 --> 00:01:34,320
followed to contribute

00:01:31,119 --> 00:01:36,560
the code into apache

00:01:34,320 --> 00:01:37,680
from the point of view of someone which

00:01:36,560 --> 00:01:41,520
was quite new

00:01:37,680 --> 00:01:44,720
in the community okay so

00:01:41,520 --> 00:01:45,360
a little bit about myself i am a

00:01:44,720 --> 00:01:47,520
software

00:01:45,360 --> 00:01:50,320
senior software engineer working at

00:01:47,520 --> 00:01:54,000
ericsson software technology

00:01:50,320 --> 00:01:56,880
this company is uh is the open source

00:01:54,000 --> 00:01:59,200
division of ericsson i've been a

00:01:56,880 --> 00:02:02,479
software engineer for more than 23 years

00:01:59,200 --> 00:02:03,280
working in the telco industry the last

00:02:02,479 --> 00:02:05,439
years i've been

00:02:03,280 --> 00:02:07,439
mainly focused in data management

00:02:05,439 --> 00:02:08,959
solutions for core network systems in

00:02:07,439 --> 00:02:11,760
ericsson

00:02:08,959 --> 00:02:12,400
and just lately like about one year and

00:02:11,760 --> 00:02:15,360
a half ago

00:02:12,400 --> 00:02:16,800
i started to work with apache geode and

00:02:15,360 --> 00:02:19,920
the reason was that

00:02:16,800 --> 00:02:24,080
some of erickson's core network systems

00:02:19,920 --> 00:02:24,080
were using apache geo

00:02:24,640 --> 00:02:32,000
we were in our company we decided to

00:02:28,480 --> 00:02:37,040
create a team in order to support

00:02:32,000 --> 00:02:39,840
our applications using apache job

00:02:37,040 --> 00:02:40,720
okay some background about you about

00:02:39,840 --> 00:02:41,760
apache jio

00:02:40,720 --> 00:02:45,519
if you attended the previous

00:02:41,760 --> 00:02:47,360
presentation you'd be better off because

00:02:45,519 --> 00:02:48,879
because you already had an introduction

00:02:47,360 --> 00:02:51,519
about apache geode

00:02:48,879 --> 00:02:52,879
mine is going to be much shorter but i

00:02:51,519 --> 00:02:55,120
will give it to you just in case you

00:02:52,879 --> 00:02:56,800
were not present in the previous one

00:02:55,120 --> 00:02:59,840
so what is apache geode it's hard to

00:02:56,800 --> 00:03:02,239
define it in in

00:02:59,840 --> 00:03:03,200
not so many words this is what you find

00:03:02,239 --> 00:03:05,360
in the

00:03:03,200 --> 00:03:06,959
in the web page gratitude's a data

00:03:05,360 --> 00:03:08,640
management platform

00:03:06,959 --> 00:03:10,879
that provides a database like

00:03:08,640 --> 00:03:11,760
consistency model reliable transaction

00:03:10,879 --> 00:03:13,840
processing

00:03:11,760 --> 00:03:14,959
and a shared nothing architecture to

00:03:13,840 --> 00:03:17,120
maintain very little

00:03:14,959 --> 00:03:20,000
very low latency performance with high

00:03:17,120 --> 00:03:22,959
concurrency processing

00:03:20,000 --> 00:03:24,159
below you can see in this figure i would

00:03:22,959 --> 00:03:27,920
say the main components

00:03:24,159 --> 00:03:31,200
of an apache geo cluster in the top part

00:03:27,920 --> 00:03:32,239
you can see the server farm you have a

00:03:31,200 --> 00:03:34,480
set of servers

00:03:32,239 --> 00:03:36,080
or cache servers that's another name

00:03:34,480 --> 00:03:38,000
that is given to them

00:03:36,080 --> 00:03:41,360
and these are the elements hosting the

00:03:38,000 --> 00:03:45,360
data data can be distributed partitioned

00:03:41,360 --> 00:03:47,360
and can be also data is always in memory

00:03:45,360 --> 00:03:50,480
but you can also

00:03:47,360 --> 00:03:52,159
persist the data on disk below the

00:03:50,480 --> 00:03:54,080
servers you can see

00:03:52,159 --> 00:03:55,760
cache clients these are the clients

00:03:54,080 --> 00:03:59,280
connecting to the servers to get

00:03:55,760 --> 00:04:01,040
the data or to put data on the servers

00:03:59,280 --> 00:04:03,040
and they connect to the servers using a

00:04:01,040 --> 00:04:05,120
connection pool

00:04:03,040 --> 00:04:06,480
at the right at the right hand you can

00:04:05,120 --> 00:04:08,319
see the locator

00:04:06,480 --> 00:04:10,720
locator is a very important component in

00:04:08,319 --> 00:04:14,480
the apache architecture

00:04:10,720 --> 00:04:18,239
locators provide discovery service

00:04:14,480 --> 00:04:20,079
to the clients so that the clients

00:04:18,239 --> 00:04:22,240
can then once they connect to the

00:04:20,079 --> 00:04:23,040
locators they can find where the servers

00:04:22,240 --> 00:04:25,120
are running

00:04:23,040 --> 00:04:26,160
and also locator provide locators

00:04:25,120 --> 00:04:29,120
provide also

00:04:26,160 --> 00:04:30,720
load balancing of service because they

00:04:29,120 --> 00:04:33,120
they are aware of the load of each

00:04:30,720 --> 00:04:33,120
server

00:04:35,360 --> 00:04:39,600
an interesting feature that apache geo

00:04:37,120 --> 00:04:40,960
provides is a multi-site or one

00:04:39,600 --> 00:04:43,759
deployment

00:04:40,960 --> 00:04:44,639
what are these well apache geo that

00:04:43,759 --> 00:04:47,680
allows to have

00:04:44,639 --> 00:04:50,880
several geode clusters

00:04:47,680 --> 00:04:54,720
connected via a wide area network

00:04:50,880 --> 00:04:58,000
and which are kept in sync

00:04:54,720 --> 00:05:00,160
via asynchronous replication

00:04:58,000 --> 00:05:01,759
there are two elements that provide two

00:05:00,160 --> 00:05:02,479
elements in the apache of architecture

00:05:01,759 --> 00:05:04,320
that provide

00:05:02,479 --> 00:05:06,080
this functionality which are the gateway

00:05:04,320 --> 00:05:09,120
receivers gateway senders

00:05:06,080 --> 00:05:10,720
gateway senders run in cache servers and

00:05:09,120 --> 00:05:11,759
they are the elements in charge of

00:05:10,720 --> 00:05:15,280
sending

00:05:11,759 --> 00:05:16,720
events generated inside the server in

00:05:15,280 --> 00:05:19,840
which they are running

00:05:16,720 --> 00:05:22,080
to the remote site and in the remote

00:05:19,840 --> 00:05:24,160
site the keyboard receiver is the one

00:05:22,080 --> 00:05:25,440
the element in charge of receiving

00:05:24,160 --> 00:05:28,000
events from the

00:05:25,440 --> 00:05:28,479
from the other side in order to keep

00:05:28,000 --> 00:05:32,000
both

00:05:28,479 --> 00:05:32,000
sides in sync

00:05:32,960 --> 00:05:36,160
okay that was the very short

00:05:35,360 --> 00:05:39,280
introduction

00:05:36,160 --> 00:05:41,039
about apache geode now let's

00:05:39,280 --> 00:05:43,520
jump into the main parts of the

00:05:41,039 --> 00:05:45,039
presentation let's go to the first part

00:05:43,520 --> 00:05:46,720
the technical description of this

00:05:45,039 --> 00:05:50,080
functionality i implemented

00:05:46,720 --> 00:05:51,600
transactionality in one replication

00:05:50,080 --> 00:05:54,240
and first i want to talk to you about

00:05:51,600 --> 00:05:54,240
the use case

00:05:54,400 --> 00:06:00,720
in our company our systems

00:05:57,440 --> 00:06:02,319
make use of this one replication feature

00:06:00,720 --> 00:06:04,000
because most of our systems are

00:06:02,319 --> 00:06:08,160
geographically

00:06:04,000 --> 00:06:11,360
redundant and they required to to keep

00:06:08,160 --> 00:06:14,319
systems separated geographically

00:06:11,360 --> 00:06:15,600
to keep them in sync this is how a one

00:06:14,319 --> 00:06:18,800
replication works

00:06:15,600 --> 00:06:20,240
in in geode as i said before

00:06:18,800 --> 00:06:22,080
gateway senders and we get with

00:06:20,240 --> 00:06:25,680
receivers are the components

00:06:22,080 --> 00:06:28,319
providing this functionality and so when

00:06:25,680 --> 00:06:30,720
you configure one replication in apache

00:06:28,319 --> 00:06:32,479
geode this is what happens

00:06:30,720 --> 00:06:34,960
every time there is a create update or

00:06:32,479 --> 00:06:38,400
delete operation in one of the clusters

00:06:34,960 --> 00:06:41,039
an event is created if

00:06:38,400 --> 00:06:41,440
if the operation is inside a transaction

00:06:41,039 --> 00:06:44,000
then

00:06:41,440 --> 00:06:46,240
one event is created for for each

00:06:44,000 --> 00:06:48,400
operation in the transaction

00:06:46,240 --> 00:06:50,880
then each event generated is put in a

00:06:48,400 --> 00:06:52,880
gateway center queue

00:06:50,880 --> 00:06:55,919
after that events are read from the

00:06:52,880 --> 00:06:58,400
queue and they are added to batches

00:06:55,919 --> 00:06:59,039
and then batches are completed either

00:06:58,400 --> 00:07:01,599
one

00:06:59,039 --> 00:07:03,759
when one of these two conditions is met

00:07:01,599 --> 00:07:06,319
either when the configured batch

00:07:03,759 --> 00:07:07,199
size is reached or when the configure

00:07:06,319 --> 00:07:10,160
time for a batch

00:07:07,199 --> 00:07:10,800
is elapsed and once the batch is

00:07:10,160 --> 00:07:12,639
completed

00:07:10,800 --> 00:07:14,400
the gateway sender sends it to the

00:07:12,639 --> 00:07:17,039
remote side

00:07:14,400 --> 00:07:18,000
okay this is how a transactionality

00:07:17,039 --> 00:07:20,479
works

00:07:18,000 --> 00:07:23,120
sorry this is how one replication works

00:07:20,479 --> 00:07:26,400
in apache geode

00:07:23,120 --> 00:07:28,080
but uh looking at this same behavior

00:07:26,400 --> 00:07:29,440
we found a problem and the problem is

00:07:28,080 --> 00:07:31,840
the following

00:07:29,440 --> 00:07:34,400
under network splits transactional

00:07:31,840 --> 00:07:36,639
consistency cannot be guaranteed

00:07:34,400 --> 00:07:38,319
why is this well the reason is that

00:07:36,639 --> 00:07:38,800
events for the same transaction may be

00:07:38,319 --> 00:07:42,000
split

00:07:38,800 --> 00:07:43,199
across different batches so if we send

00:07:42,000 --> 00:07:45,520
some

00:07:43,199 --> 00:07:47,280
events for one transaction you want that

00:07:45,520 --> 00:07:50,000
then we have a network split

00:07:47,280 --> 00:07:52,160
then on the remote side we will not have

00:07:50,000 --> 00:07:54,000
all the events for a transaction i mean

00:07:52,160 --> 00:07:56,639
not all the events for this transaction

00:07:54,000 --> 00:07:59,120
will be applied on the remote side

00:07:56,639 --> 00:07:59,759
if they split lasts for a long time that

00:07:59,120 --> 00:08:02,639
could cause

00:07:59,759 --> 00:08:04,879
some trouble to the clients connected to

00:08:02,639 --> 00:08:06,879
the remote side

00:08:04,879 --> 00:08:08,000
let me illustrate this with uh with this

00:08:06,879 --> 00:08:11,120
figure let me

00:08:08,000 --> 00:08:13,680
explain what i've just told you before

00:08:11,120 --> 00:08:15,120
with this figure let's imagine we have

00:08:13,680 --> 00:08:18,479
two geode sites

00:08:15,120 --> 00:08:21,520
connected via a bi-data network

00:08:18,479 --> 00:08:23,520
one one side in north america and

00:08:21,520 --> 00:08:26,479
another one in europe

00:08:23,520 --> 00:08:27,840
we have this geode site which has three

00:08:26,479 --> 00:08:30,639
clients connected to it

00:08:27,840 --> 00:08:32,560
we have this other site with two clients

00:08:30,639 --> 00:08:35,599
connected to it

00:08:32,560 --> 00:08:38,800
this cloud here represents the cache

00:08:35,599 --> 00:08:41,200
servers hosting the data

00:08:38,800 --> 00:08:42,399
this is a one piece of data object text

00:08:41,200 --> 00:08:45,600
for example which is

00:08:42,399 --> 00:08:48,240
hosted in this site and as you can see

00:08:45,600 --> 00:08:49,760
the same object is also hosted in the

00:08:48,240 --> 00:08:52,320
other site because these

00:08:49,760 --> 00:08:55,120
two sites are kept in sync by the one

00:08:52,320 --> 00:08:58,160
replication feature

00:08:55,120 --> 00:09:01,920
okay now let's imagine that the clients

00:08:58,160 --> 00:09:03,519
start to send operations to site one

00:09:01,920 --> 00:09:05,200
the first client is going to execute a

00:09:03,519 --> 00:09:08,720
transaction involving three

00:09:05,200 --> 00:09:10,320
objects objects a b and c and the second

00:09:08,720 --> 00:09:11,040
client is going to also execute a

00:09:10,320 --> 00:09:14,320
transaction

00:09:11,040 --> 00:09:15,920
involving three objects d e and f

00:09:14,320 --> 00:09:17,360
and the third client is going to also

00:09:15,920 --> 00:09:19,600
execute an operation

00:09:17,360 --> 00:09:22,880
it's going to actually create an object

00:09:19,600 --> 00:09:26,399
but it's not inside a transaction

00:09:22,880 --> 00:09:27,279
okay once those clients execute their

00:09:26,399 --> 00:09:30,320
operations

00:09:27,279 --> 00:09:33,120
we can see that the geode cluster is

00:09:30,320 --> 00:09:35,279
now hosting those data those objects

00:09:33,120 --> 00:09:37,200
that have just been created

00:09:35,279 --> 00:09:38,880
and let's see how one replication works

00:09:37,200 --> 00:09:41,519
in this case

00:09:38,880 --> 00:09:42,399
so as i told you before for every

00:09:41,519 --> 00:09:45,440
operation

00:09:42,399 --> 00:09:46,320
in in a cluster when one radical

00:09:45,440 --> 00:09:50,080
replication

00:09:46,320 --> 00:09:53,040
is configured an event is created

00:09:50,080 --> 00:09:54,480
and it is stored in the gate a gateway

00:09:53,040 --> 00:09:56,560
center queue

00:09:54,480 --> 00:09:57,680
so we are going to have one event for

00:09:56,560 --> 00:10:01,920
each of these

00:09:57,680 --> 00:10:05,279
operations executed in in this cluster

00:10:01,920 --> 00:10:08,320
so we'll have again we'll see uh event

00:10:05,279 --> 00:10:12,640
for object a event for object d

00:10:08,320 --> 00:10:14,800
b c e g and f

00:10:12,640 --> 00:10:16,640
okay so they as you can see the queue is

00:10:14,800 --> 00:10:18,720
being filled

00:10:16,640 --> 00:10:20,720
after the events have been generated and

00:10:18,720 --> 00:10:23,200
then at the same time this is all

00:10:20,720 --> 00:10:26,160
happening concurrently

00:10:23,200 --> 00:10:27,360
at the same time batches will be created

00:10:26,160 --> 00:10:30,399
by reading

00:10:27,360 --> 00:10:33,040
events from the gateway center queue so

00:10:30,399 --> 00:10:34,720
this is a queue the first event to be

00:10:33,040 --> 00:10:35,760
read from the queue will be the first

00:10:34,720 --> 00:10:37,680
one pushed

00:10:35,760 --> 00:10:38,959
inside the queue which was event for

00:10:37,680 --> 00:10:41,440
operation a

00:10:38,959 --> 00:10:42,240
but after that the next events will be

00:10:41,440 --> 00:10:45,440
read

00:10:42,240 --> 00:10:47,680
from the queue until when well

00:10:45,440 --> 00:10:49,440
until the battle is complete this

00:10:47,680 --> 00:10:51,600
example i have

00:10:49,440 --> 00:10:52,800
i am assuming that the length configured

00:10:51,600 --> 00:10:54,959
for patches is

00:10:52,800 --> 00:10:55,839
five five elements so in this case the

00:10:54,959 --> 00:10:58,240
batch is complete

00:10:55,839 --> 00:10:59,519
so what we would expect after this is

00:10:58,240 --> 00:11:02,640
that

00:10:59,519 --> 00:11:05,120
the batch will be sent to the other side

00:11:02,640 --> 00:11:06,560
okay this is what is going to happen

00:11:05,120 --> 00:11:08,560
that is sent to the other side the

00:11:06,560 --> 00:11:11,279
gateway center is going to send a batch

00:11:08,560 --> 00:11:12,399
to the to the site on the on the other

00:11:11,279 --> 00:11:14,640
side

00:11:12,399 --> 00:11:15,440
and the gateway receiver will receive

00:11:14,640 --> 00:11:17,920
this patch

00:11:15,440 --> 00:11:19,440
and we'll apply it into the ideal

00:11:17,920 --> 00:11:22,720
cluster

00:11:19,440 --> 00:11:25,519
so we will have all these events in the

00:11:22,720 --> 00:11:27,760
in the batch now in the cluster okay

00:11:25,519 --> 00:11:30,560
once the events have been applied

00:11:27,760 --> 00:11:31,200
the original batch can be deleted and a

00:11:30,560 --> 00:11:33,920
new batch

00:11:31,200 --> 00:11:35,839
can be created with the rest of events

00:11:33,920 --> 00:11:37,440
so far so good

00:11:35,839 --> 00:11:39,040
okay now let's see what what could

00:11:37,440 --> 00:11:41,839
happen if we have a network

00:11:39,040 --> 00:11:43,120
split at this point we have a network

00:11:41,839 --> 00:11:45,120
split at this point

00:11:43,120 --> 00:11:47,360
this will provoke that we will not be

00:11:45,120 --> 00:11:50,880
able to send any more patches until the

00:11:47,360 --> 00:11:54,880
network is resumed this should be

00:11:50,880 --> 00:11:58,160
a big problem if these clients

00:11:54,880 --> 00:12:01,600
are not very do not rely very much

00:11:58,160 --> 00:12:04,880
on consistency to not rely so much

00:12:01,600 --> 00:12:04,880
about having the data

00:12:05,120 --> 00:12:08,800
very fast from the other side but what

00:12:08,000 --> 00:12:12,480
could happen

00:12:08,800 --> 00:12:13,760
if this network split lasts for a long

00:12:12,480 --> 00:12:16,720
time

00:12:13,760 --> 00:12:17,760
in this case these clients are going to

00:12:16,720 --> 00:12:19,279
see

00:12:17,760 --> 00:12:21,680
are going to have an inconsistent view

00:12:19,279 --> 00:12:23,680
of the system why am i saying this

00:12:21,680 --> 00:12:25,200
well i'm saying this because here

00:12:23,680 --> 00:12:27,600
objects d e and f

00:12:25,200 --> 00:12:28,399
were created inside a transaction that

00:12:27,600 --> 00:12:31,839
means that

00:12:28,399 --> 00:12:35,600
the creation of those three objects

00:12:31,839 --> 00:12:38,079
shouldn't be done independently

00:12:35,600 --> 00:12:38,800
and what these clients are seeing is

00:12:38,079 --> 00:12:42,800
they are seeing

00:12:38,800 --> 00:12:45,760
object dna but without an object f

00:12:42,800 --> 00:12:47,760
if this situation lasts for a long time

00:12:45,760 --> 00:12:50,800
maybe these clients are not going to

00:12:47,760 --> 00:12:52,800
know how to handle the situation the

00:12:50,800 --> 00:12:57,279
situation is short maybe

00:12:52,800 --> 00:12:57,279
they can do some retries or i don't know

00:12:57,440 --> 00:13:01,920
send back some errors some temporary

00:12:59,040 --> 00:13:04,959
errors but if the situation is long

00:13:01,920 --> 00:13:07,760
this is going to to be provoking

00:13:04,959 --> 00:13:09,360
problems in the clients on this side and

00:13:07,760 --> 00:13:10,800
this is actually a problem in the

00:13:09,360 --> 00:13:13,279
applications

00:13:10,800 --> 00:13:15,120
we have in in our company in ericsson

00:13:13,279 --> 00:13:18,320
the ones using apache geo

00:13:15,120 --> 00:13:20,880
they cannot tolerate inconsistent views

00:13:18,320 --> 00:13:22,240
for a long time and also the

00:13:20,880 --> 00:13:24,959
applications we

00:13:22,240 --> 00:13:26,639
we we have on top of apache geode do a

00:13:24,959 --> 00:13:29,760
lot of

00:13:26,639 --> 00:13:30,800
transactional writings so this could be

00:13:29,760 --> 00:13:34,880
a very frequent

00:13:30,800 --> 00:13:37,760
situation okay so

00:13:34,880 --> 00:13:38,560
this is the problem we faced when we

00:13:37,760 --> 00:13:40,959
looked

00:13:38,560 --> 00:13:41,920
at the documentation about how apache

00:13:40,959 --> 00:13:44,639
did work

00:13:41,920 --> 00:13:46,399
and also when we ran some tests we saw

00:13:44,639 --> 00:13:49,360
that this could happen

00:13:46,399 --> 00:13:51,360
so we thought about um providing a

00:13:49,360 --> 00:13:53,360
solution inside apache geode to this

00:13:51,360 --> 00:13:57,360
problem

00:13:53,360 --> 00:13:59,360
and this is the solution we we devised

00:13:57,360 --> 00:14:01,199
we thought about other alternatives but

00:13:59,360 --> 00:14:03,600
this was the one that we

00:14:01,199 --> 00:14:04,560
thought was the best and without the

00:14:03,600 --> 00:14:06,880
least impact

00:14:04,560 --> 00:14:07,760
to the system and the solution consisted

00:14:06,880 --> 00:14:09,839
of the following

00:14:07,760 --> 00:14:11,199
we would have to make sure that events

00:14:09,839 --> 00:14:14,240
for the same transaction

00:14:11,199 --> 00:14:16,240
would be sent in the same batch how

00:14:14,240 --> 00:14:19,199
would we do this

00:14:16,240 --> 00:14:20,399
well this would be the procedure once a

00:14:19,199 --> 00:14:23,519
batch is completed

00:14:20,399 --> 00:14:25,519
due to either a size has been

00:14:23,519 --> 00:14:27,360
reached or the time has been reached

00:14:25,519 --> 00:14:29,120
instead of sending the batch

00:14:27,360 --> 00:14:30,480
immediately we are going to do the

00:14:29,120 --> 00:14:33,279
following we are going to

00:14:30,480 --> 00:14:33,600
look at all the events inside the batch

00:14:33,279 --> 00:14:36,959
and

00:14:33,600 --> 00:14:38,160
check for those events that are inside

00:14:36,959 --> 00:14:40,320
the transaction

00:14:38,160 --> 00:14:42,240
if all the events for that transaction

00:14:40,320 --> 00:14:45,040
are inside the batch

00:14:42,240 --> 00:14:47,040
if not if not all the events for a

00:14:45,040 --> 00:14:48,959
transaction are inside the batch

00:14:47,040 --> 00:14:50,320
what we are going to do is go to the

00:14:48,959 --> 00:14:52,079
queue and

00:14:50,320 --> 00:14:53,680
read those missing events from the

00:14:52,079 --> 00:14:56,079
transaction and put them

00:14:53,680 --> 00:14:58,480
in the queue i'm sorry and put them in

00:14:56,079 --> 00:15:00,240
the back

00:14:58,480 --> 00:15:02,079
now the point the question would be how

00:15:00,240 --> 00:15:04,639
do we know if a batch contains all the

00:15:02,079 --> 00:15:06,560
events for a transaction

00:15:04,639 --> 00:15:08,320
in order to do that we are going to use

00:15:06,560 --> 00:15:12,000
these two mechanisms

00:15:08,320 --> 00:15:16,000
for once we know because this is

00:15:12,000 --> 00:15:17,519
how apache work transaction events

00:15:16,000 --> 00:15:20,800
are marked are marked with the

00:15:17,519 --> 00:15:23,839
transaction id so once we go through

00:15:20,800 --> 00:15:26,079
the event inside a batch

00:15:23,839 --> 00:15:27,839
we can know for each event to which

00:15:26,079 --> 00:15:29,440
transaction it belongs because

00:15:27,839 --> 00:15:31,360
because each event is marked with a

00:15:29,440 --> 00:15:33,519
transaction id

00:15:31,360 --> 00:15:34,560
and something we are going to add to the

00:15:33,519 --> 00:15:37,199
events is

00:15:34,560 --> 00:15:38,240
a flag which would tell us if the event

00:15:37,199 --> 00:15:41,199
is the last event

00:15:38,240 --> 00:15:42,320
for for the transaction and this is

00:15:41,199 --> 00:15:45,600
going to allow us

00:15:42,320 --> 00:15:48,720
to to achieve a

00:15:45,600 --> 00:15:49,839
our goal to avoid this problem in

00:15:48,720 --> 00:15:52,880
transactionality

00:15:49,839 --> 00:15:56,399
in one particular replication in one

00:15:52,880 --> 00:15:58,959
replication let me

00:15:56,399 --> 00:16:01,120
explain this to you with the with the

00:15:58,959 --> 00:16:03,120
same figure we used before

00:16:01,120 --> 00:16:05,040
let's suppose we are in the same

00:16:03,120 --> 00:16:08,000
situation as before

00:16:05,040 --> 00:16:08,720
we had the three clients that executed

00:16:08,000 --> 00:16:10,560
this

00:16:08,720 --> 00:16:12,639
of these transactions and also this

00:16:10,560 --> 00:16:15,759
creation of object g

00:16:12,639 --> 00:16:18,959
and we are at this point we have

00:16:15,759 --> 00:16:21,600
the patch complete same same situation

00:16:18,959 --> 00:16:22,000
but now instead of sending sending the

00:16:21,600 --> 00:16:25,199
batch

00:16:22,000 --> 00:16:27,040
we are going to do the check

00:16:25,199 --> 00:16:29,440
we are going to look at all the events

00:16:27,040 --> 00:16:33,680
and we are going to ask ourselves

00:16:29,440 --> 00:16:33,680
is there any incomplete transaction

00:16:33,839 --> 00:16:40,480
i don't know if you can see it but now

00:16:37,040 --> 00:16:43,839
some of the events are involved

00:16:40,480 --> 00:16:46,880
that's the way i am telling you

00:16:43,839 --> 00:16:50,079
that the events involved in in bold

00:16:46,880 --> 00:16:51,600
font are the ones below are the ones

00:16:50,079 --> 00:16:54,720
which are the last

00:16:51,600 --> 00:16:56,079
for their transaction so in this case if

00:16:54,720 --> 00:16:57,839
we go

00:16:56,079 --> 00:16:59,440
through these events and look for

00:16:57,839 --> 00:17:02,800
example at event a

00:16:59,440 --> 00:17:04,480
okay event for operation a it belongs to

00:17:02,800 --> 00:17:06,640
a transaction

00:17:04,480 --> 00:17:08,160
so we need to look at the other events

00:17:06,640 --> 00:17:10,000
and see if all the events for the

00:17:08,160 --> 00:17:13,360
transaction are in

00:17:10,000 --> 00:17:15,360
and as we see that event for operation c

00:17:13,360 --> 00:17:16,480
is inside and this is the last event for

00:17:15,360 --> 00:17:18,799
that transaction

00:17:16,480 --> 00:17:19,839
we can be sure that all the events for

00:17:18,799 --> 00:17:22,559
the transaction

00:17:19,839 --> 00:17:23,679
blue are inside the packs so we are okay

00:17:22,559 --> 00:17:25,919
for the events

00:17:23,679 --> 00:17:27,280
in the blue transaction but what happens

00:17:25,919 --> 00:17:30,080
with the events

00:17:27,280 --> 00:17:30,640
in green we have this event we have this

00:17:30,080 --> 00:17:32,559
event

00:17:30,640 --> 00:17:33,679
but we don't have the last transaction

00:17:32,559 --> 00:17:36,480
event

00:17:33,679 --> 00:17:36,880
for the green transaction so that means

00:17:36,480 --> 00:17:39,440
that

00:17:36,880 --> 00:17:40,640
we have a the green transaction

00:17:39,440 --> 00:17:43,679
incomplete

00:17:40,640 --> 00:17:44,799
if we send it to the other side we will

00:17:43,679 --> 00:17:46,960
run the risk

00:17:44,799 --> 00:17:48,799
of applying an incomplete transaction if

00:17:46,960 --> 00:17:51,520
we have a network split

00:17:48,799 --> 00:17:52,240
right after we apply this that so what

00:17:51,520 --> 00:17:55,120
we do

00:17:52,240 --> 00:17:56,160
is we are going to go to the queue and

00:17:55,120 --> 00:17:58,000
read

00:17:56,160 --> 00:17:59,280
mini and get all the events all the

00:17:58,000 --> 00:18:02,320
missing events

00:17:59,280 --> 00:18:03,520
for the green transaction in our case we

00:18:02,320 --> 00:18:05,039
only have one

00:18:03,520 --> 00:18:06,640
event in the queue for the green

00:18:05,039 --> 00:18:09,679
transaction and

00:18:06,640 --> 00:18:10,799
that event is the last one for for this

00:18:09,679 --> 00:18:14,720
transaction

00:18:10,799 --> 00:18:16,799
so in this case we do not have any more

00:18:14,720 --> 00:18:17,919
incomplete transactions in the batch so

00:18:16,799 --> 00:18:19,520
we are safe

00:18:17,919 --> 00:18:21,679
and now we can send the batch to the

00:18:19,520 --> 00:18:22,640
other side which is what we are going to

00:18:21,679 --> 00:18:25,120
do

00:18:22,640 --> 00:18:29,600
we send the patch to the other side the

00:18:25,120 --> 00:18:32,880
batch is applied in the remote cluster

00:18:29,600 --> 00:18:35,679
another batch will be created

00:18:32,880 --> 00:18:36,480
under the queue but what happens now if

00:18:35,679 --> 00:18:39,760
we

00:18:36,480 --> 00:18:40,799
have a network split situation and in

00:18:39,760 --> 00:18:44,160
that situation

00:18:40,799 --> 00:18:45,919
long last for some for some time

00:18:44,160 --> 00:18:47,360
in this case we these clients do not

00:18:45,919 --> 00:18:50,480
have to worry about

00:18:47,360 --> 00:18:51,840
having an inconsistent view because all

00:18:50,480 --> 00:18:54,080
these

00:18:51,840 --> 00:18:54,880
events belonging to a transaction were

00:18:54,080 --> 00:18:57,760
applied

00:18:54,880 --> 00:18:59,360
we don't have any incomplete view of the

00:18:57,760 --> 00:19:02,559
system anymore

00:18:59,360 --> 00:19:05,200
it's true that we don't have this event

00:19:02,559 --> 00:19:06,480
yet but that doesn't mean that we we

00:19:05,200 --> 00:19:10,720
have an

00:19:06,480 --> 00:19:14,880
inconsistent view of the system because

00:19:10,720 --> 00:19:17,120
the enf should be applied in in

00:19:14,880 --> 00:19:18,400
in the site should be applied in in

00:19:17,120 --> 00:19:21,520
geode

00:19:18,400 --> 00:19:22,960
atomically in a transaction so

00:19:21,520 --> 00:19:25,039
this is the situation this is the

00:19:22,960 --> 00:19:30,080
solution we

00:19:25,039 --> 00:19:30,080
we designed to to fix this problem

00:19:30,720 --> 00:19:36,000
here's some implementation miscellaneous

00:19:33,200 --> 00:19:38,240
the implementation details

00:19:36,000 --> 00:19:40,240
we had to implement have a different

00:19:38,240 --> 00:19:42,320
implementation for serial in

00:19:40,240 --> 00:19:43,440
parallel gateway senders i haven't

00:19:42,320 --> 00:19:45,360
talked about

00:19:43,440 --> 00:19:48,240
the different types of gateway standards

00:19:45,360 --> 00:19:51,440
that apache diode offers but

00:19:48,240 --> 00:19:52,000
there are two types and as the q

00:19:51,440 --> 00:19:54,080
implementation

00:19:52,000 --> 00:19:55,679
was different for for the two of them

00:19:54,080 --> 00:19:57,039
implementation also for

00:19:55,679 --> 00:19:58,720
for this feature had to be a little

00:19:57,039 --> 00:20:02,480
different

00:19:58,720 --> 00:20:05,760
another detail which is uh which is

00:20:02,480 --> 00:20:07,840
interesting is that the feature was

00:20:05,760 --> 00:20:09,760
created to be configurable it's not

00:20:07,840 --> 00:20:12,000
something that it's always there

00:20:09,760 --> 00:20:14,640
but you have to activate it on a pair

00:20:12,000 --> 00:20:16,640
gateway center basis using a special

00:20:14,640 --> 00:20:17,679
setting that we created this group

00:20:16,640 --> 00:20:21,679
transaction events

00:20:17,679 --> 00:20:25,120
setting and some limitations i mean

00:20:21,679 --> 00:20:27,440
this solution is not perfect and it

00:20:25,120 --> 00:20:29,280
doesn't work for all cases

00:20:27,440 --> 00:20:30,880
uh one limitation it has is that the

00:20:29,280 --> 00:20:32,480
gateway centers with this feature must

00:20:30,880 --> 00:20:35,120
replicate the same set of regions

00:20:32,480 --> 00:20:37,919
involved in transactions

00:20:35,120 --> 00:20:38,799
um if you are using serial gateway

00:20:37,919 --> 00:20:40,640
centers

00:20:38,799 --> 00:20:41,919
you can you have to have just one

00:20:40,640 --> 00:20:44,400
dispatcher thread

00:20:41,919 --> 00:20:45,280
you cannot have a gate serial gateway

00:20:44,400 --> 00:20:46,799
sender

00:20:45,280 --> 00:20:48,559
with more than one dispatcher thread

00:20:46,799 --> 00:20:50,000
because that would mess up the ordering

00:20:48,559 --> 00:20:53,679
of events

00:20:50,000 --> 00:20:54,880
and that would imply that we cannot know

00:20:53,679 --> 00:20:56,320
which is the last event in the

00:20:54,880 --> 00:20:58,720
transaction and so on and the feature

00:20:56,320 --> 00:21:01,039
would not work

00:20:58,720 --> 00:21:02,080
another limitation is as you have seen

00:21:01,039 --> 00:21:04,320
you can configure

00:21:02,080 --> 00:21:05,440
a maximum size of the batch in our case

00:21:04,320 --> 00:21:09,120
it was five

00:21:05,440 --> 00:21:11,760
but this value which prior to this

00:21:09,120 --> 00:21:13,039
implementation could not be surpassed

00:21:11,760 --> 00:21:15,120
now with this feature

00:21:13,039 --> 00:21:16,480
sometimes you can have batches with a

00:21:15,120 --> 00:21:20,000
bigger size than the one

00:21:16,480 --> 00:21:21,039
configured and also another limitation

00:21:20,000 --> 00:21:23,840
maybe

00:21:21,039 --> 00:21:25,200
maybe looking at looking at the title of

00:21:23,840 --> 00:21:30,480
this presentation

00:21:25,200 --> 00:21:30,480
you would think that i have implemented

00:21:30,559 --> 00:21:34,000
distributed transactions across a wide

00:21:33,200 --> 00:21:36,960
area network

00:21:34,000 --> 00:21:38,159
but this is not the case i mean we are

00:21:36,960 --> 00:21:41,760
solving just the problem

00:21:38,159 --> 00:21:43,440
i described before so when the

00:21:41,760 --> 00:21:46,640
when the batch is applied on the remote

00:21:43,440 --> 00:21:50,159
side transactions are not applied

00:21:46,640 --> 00:21:53,679
so if due to a crash or a bug

00:21:50,159 --> 00:21:54,720
in the code not all the events in a

00:21:53,679 --> 00:21:56,799
transaction

00:21:54,720 --> 00:21:59,840
are applied that cannot be controlled by

00:21:56,799 --> 00:21:59,840
this by this feature

00:22:01,520 --> 00:22:05,440
okay this is pretty small this is just

00:22:03,360 --> 00:22:08,000
to give you a glimpse of a

00:22:05,440 --> 00:22:10,159
dimension of this change i don't know if

00:22:08,000 --> 00:22:13,840
you can see it here but

00:22:10,159 --> 00:22:17,440
i had to change 51 files

00:22:13,840 --> 00:22:20,480
and touch about or change about the 3

00:22:17,440 --> 00:22:20,480
000 lines of code

00:22:21,120 --> 00:22:27,919
and yeah and that's it about

00:22:24,240 --> 00:22:31,120
the technical part of this presentation

00:22:27,919 --> 00:22:33,600
now i want to talk about the same thing

00:22:31,120 --> 00:22:35,760
but from a very different perspective

00:22:33,600 --> 00:22:38,240
and this is from the perspective of

00:22:35,760 --> 00:22:39,039
someone which is quite new to the

00:22:38,240 --> 00:22:42,559
community

00:22:39,039 --> 00:22:45,840
and wants to contribute some code to the

00:22:42,559 --> 00:22:47,679
apache geode project and i want to

00:22:45,840 --> 00:22:49,520
to guide you through the steps i

00:22:47,679 --> 00:22:51,280
followed just in case you're thinking

00:22:49,520 --> 00:22:54,480
about

00:22:51,280 --> 00:22:55,120
jumping in in the community and pushing

00:22:54,480 --> 00:22:56,960
code

00:22:55,120 --> 00:22:59,520
so that you can see what steps i

00:22:56,960 --> 00:23:01,039
followed and what problems i ran into

00:22:59,520 --> 00:23:03,520
and

00:23:01,039 --> 00:23:05,919
i mean in general how how smooth the

00:23:03,520 --> 00:23:08,559
process was

00:23:05,919 --> 00:23:10,720
okay so these are the steps i followed

00:23:08,559 --> 00:23:13,760
first the investigation investigation of

00:23:10,720 --> 00:23:16,240
the problem then write an rfc then

00:23:13,760 --> 00:23:16,880
write a jira ticket then implement the

00:23:16,240 --> 00:23:19,840
changes

00:23:16,880 --> 00:23:21,679
and then create a post request there is

00:23:19,840 --> 00:23:24,880
a

00:23:21,679 --> 00:23:27,440
wiki page in the apache geode page

00:23:24,880 --> 00:23:29,039
in which you can look at the developer

00:23:27,440 --> 00:23:33,440
workflow in which

00:23:29,039 --> 00:23:36,880
most of these steps are are described

00:23:33,440 --> 00:23:39,280
okay the investigation what did i do

00:23:36,880 --> 00:23:41,840
in that step well i looked at the geode

00:23:39,280 --> 00:23:45,039
code and looked at the geodocumentation

00:23:41,840 --> 00:23:45,919
to really understand how replication

00:23:45,039 --> 00:23:49,200
worked

00:23:45,919 --> 00:23:50,640
and at that that phase is when i

00:23:49,200 --> 00:23:53,840
realized that we

00:23:50,640 --> 00:23:56,400
in our systems in the systems we we

00:23:53,840 --> 00:23:57,440
designed at our company based on a

00:23:56,400 --> 00:24:01,440
apache duo

00:23:57,440 --> 00:24:01,440
we had a problem that we had to fix

00:24:01,520 --> 00:24:07,360
um what did we do in order to fix it

00:24:05,120 --> 00:24:09,200
well we built some prototypes some

00:24:07,360 --> 00:24:11,679
proofs of concept

00:24:09,200 --> 00:24:13,279
of several solutions we thought of in

00:24:11,679 --> 00:24:14,240
order to fix this problem because there

00:24:13,279 --> 00:24:16,400
were

00:24:14,240 --> 00:24:17,600
several approaches we could take to fix

00:24:16,400 --> 00:24:20,159
this problem

00:24:17,600 --> 00:24:22,640
although we finally selected the one i

00:24:20,159 --> 00:24:22,640
described

00:24:23,120 --> 00:24:26,880
okay once we finished the investigation

00:24:26,080 --> 00:24:30,000
process

00:24:26,880 --> 00:24:33,039
that we had more or less clear what we

00:24:30,000 --> 00:24:33,760
wanted to fix and how to do it we could

00:24:33,039 --> 00:24:37,919
have just

00:24:33,760 --> 00:24:40,720
jumped into contributing the code

00:24:37,919 --> 00:24:41,760
into the community whatever the process

00:24:40,720 --> 00:24:45,520
it was

00:24:41,760 --> 00:24:48,880
but the aptitude community approved or

00:24:45,520 --> 00:24:51,919
proposed some some time ago

00:24:48,880 --> 00:24:54,320
an rfc lightweight process which was a

00:24:51,919 --> 00:24:54,320
process

00:24:54,880 --> 00:25:02,799
proposed to help in that this in the

00:25:00,480 --> 00:25:04,159
when when when making decisions

00:25:02,799 --> 00:25:07,360
technical decisions

00:25:04,159 --> 00:25:12,000
are processed to help uh make decisions

00:25:07,360 --> 00:25:12,000
and to reach consensus so

00:25:12,799 --> 00:25:18,080
what does this process consist of well

00:25:16,240 --> 00:25:20,159
it's very simple there is an rfc

00:25:18,080 --> 00:25:23,760
template which you have to

00:25:20,159 --> 00:25:28,080
fill in this is a

00:25:23,760 --> 00:25:31,600
screenshot of the rfc i wrote

00:25:28,080 --> 00:25:34,240
using the the template and in that rfc

00:25:31,600 --> 00:25:36,159
you have to describe the problem

00:25:34,240 --> 00:25:37,520
describe the solution you are proposing

00:25:36,159 --> 00:25:39,760
at a high level

00:25:37,520 --> 00:25:41,120
if possible describe some use cases the

00:25:39,760 --> 00:25:43,200
problem

00:25:41,120 --> 00:25:44,640
and there are some other things you have

00:25:43,200 --> 00:25:48,159
to add into this

00:25:44,640 --> 00:25:51,279
document for example if there are impact

00:25:48,159 --> 00:25:53,919
in regards backward compatibility

00:25:51,279 --> 00:25:54,640
if there are impacts in the public apis

00:25:53,919 --> 00:25:57,360
and

00:25:54,640 --> 00:25:59,679
some other stuff so what you do is you

00:25:57,360 --> 00:26:02,640
write this rfc you publish it

00:25:59,679 --> 00:26:04,159
in the wiki page of apache shield where

00:26:02,640 --> 00:26:06,080
the rfcs are stored

00:26:04,159 --> 00:26:08,400
and you put a deadline to receive

00:26:06,080 --> 00:26:08,400
comments

00:26:08,880 --> 00:26:12,559
normally you should put a deadline that

00:26:11,600 --> 00:26:15,679
allows

00:26:12,559 --> 00:26:19,039
reviewers to some reasonable time

00:26:15,679 --> 00:26:20,799
to to provide comments

00:26:19,039 --> 00:26:23,840
i i think in my case it was two weeks

00:26:20,799 --> 00:26:25,840
but i had to extend it because

00:26:23,840 --> 00:26:28,799
maybe two weeks is not so much with with

00:26:25,840 --> 00:26:31,919
people that are very busy

00:26:28,799 --> 00:26:34,640
but okay you publish the rfc

00:26:31,919 --> 00:26:37,279
you receive comments you answer them you

00:26:34,640 --> 00:26:40,320
adjust the rfc

00:26:37,279 --> 00:26:41,279
and uh once the rfc once you feel the

00:26:40,320 --> 00:26:44,559
rfc

00:26:41,279 --> 00:26:46,240
has reached some consensus um you you

00:26:44,559 --> 00:26:48,080
you see that either in the wiki page

00:26:46,240 --> 00:26:48,640
where some comments are put or also in

00:26:48,080 --> 00:26:50,880
the

00:26:48,640 --> 00:26:52,400
development list where the rfc is

00:26:50,880 --> 00:26:55,279
discussed then

00:26:52,400 --> 00:26:56,799
you go to the next step that's what i

00:26:55,279 --> 00:26:58,960
did

00:26:56,799 --> 00:27:01,520
and the next step is to create a jira

00:26:58,960 --> 00:27:02,320
ticket everything you put inside apache

00:27:01,520 --> 00:27:06,080
geo

00:27:02,320 --> 00:27:09,760
uh must be related to your ticket

00:27:06,080 --> 00:27:10,799
either a task or a bug fix so in my case

00:27:09,760 --> 00:27:13,840
i created a jira

00:27:10,799 --> 00:27:18,320
explaining what i was going to implement

00:27:13,840 --> 00:27:20,240
and i got a number this yield 7971

00:27:18,320 --> 00:27:21,360
which is important because it would be

00:27:20,240 --> 00:27:24,399
used in the next

00:27:21,360 --> 00:27:24,399
step of

00:27:24,480 --> 00:27:30,799
this process next step

00:27:28,159 --> 00:27:32,000
okay now let's go into implementing the

00:27:30,799 --> 00:27:34,240
changes

00:27:32,000 --> 00:27:36,000
if it's the first time you are going to

00:27:34,240 --> 00:27:37,679
implement changes in apache geo

00:27:36,000 --> 00:27:39,520
you need of course to fork the apache

00:27:37,679 --> 00:27:42,240
geometer on github

00:27:39,520 --> 00:27:44,080
you need to clone the apache geo

00:27:42,240 --> 00:27:46,000
repository locally

00:27:44,080 --> 00:27:47,760
and you you need to add your fork as an

00:27:46,000 --> 00:27:48,640
additional remote because when you push

00:27:47,760 --> 00:27:51,760
changes

00:27:48,640 --> 00:27:55,760
you will be doing it through your

00:27:51,760 --> 00:27:58,640
to your fork i told you before that

00:27:55,760 --> 00:28:00,559
the number i got from jira was important

00:27:58,640 --> 00:28:02,799
because then i got a number

00:28:00,559 --> 00:28:03,650
and in the apache jio process you have

00:28:02,799 --> 00:28:04,720
to

00:28:03,650 --> 00:28:07,760
[Music]

00:28:04,720 --> 00:28:10,880
when you push some change you have to

00:28:07,760 --> 00:28:13,600
do it in a branch called feature slash

00:28:10,880 --> 00:28:14,320
the name of the jira task so you have to

00:28:13,600 --> 00:28:15,919
create your

00:28:14,320 --> 00:28:18,159
feature branch with the number that

00:28:15,919 --> 00:28:21,279
you're a task that's fine

00:28:18,159 --> 00:28:23,919
then you do your commit you modify

00:28:21,279 --> 00:28:25,120
the code you are the the things you have

00:28:23,919 --> 00:28:27,840
to add and change

00:28:25,120 --> 00:28:28,960
in the code to make this work of course

00:28:27,840 --> 00:28:31,440
you have to take

00:28:28,960 --> 00:28:32,880
very seriously the documentation in this

00:28:31,440 --> 00:28:35,440
case it was important because

00:28:32,880 --> 00:28:36,080
it was a new feature which had a new

00:28:35,440 --> 00:28:38,399
setting

00:28:36,080 --> 00:28:40,399
so you had to really explain how it

00:28:38,399 --> 00:28:42,640
worked and how to activate it

00:28:40,399 --> 00:28:44,559
and of course tests were very important

00:28:42,640 --> 00:28:46,399
it's not just about

00:28:44,559 --> 00:28:48,880
fixing the problem but you need to

00:28:46,399 --> 00:28:51,360
verify that nothing has been broken

00:28:48,880 --> 00:28:52,960
and also that the feature works as

00:28:51,360 --> 00:28:55,760
expected

00:28:52,960 --> 00:28:57,120
apache yield has lots of lots of tests

00:28:55,760 --> 00:28:59,039
so

00:28:57,120 --> 00:29:01,279
in my case i also had to write a unit

00:28:59,039 --> 00:29:04,159
test and distributed tests

00:29:01,279 --> 00:29:05,200
and integration tests you have to run

00:29:04,159 --> 00:29:07,200
the tests of course

00:29:05,200 --> 00:29:10,840
make sure that everything is running

00:29:07,200 --> 00:29:12,880
okay and then finally push the code to

00:29:10,840 --> 00:29:16,000
github

00:29:12,880 --> 00:29:18,480
the last step is the pull request and

00:29:16,000 --> 00:29:19,840
once you push your changes to github you

00:29:18,480 --> 00:29:22,150
have to create the pull request

00:29:19,840 --> 00:29:23,360
this is a very common process in

00:29:22,150 --> 00:29:26,480
[Music]

00:29:23,360 --> 00:29:27,919
i don't know if it's universal in apache

00:29:26,480 --> 00:29:30,559
project

00:29:27,919 --> 00:29:32,240
but you have to create a sport request

00:29:30,559 --> 00:29:35,679
there's a web page in github

00:29:32,240 --> 00:29:38,640
which you can create the pull request

00:29:35,679 --> 00:29:38,640
out of the last

00:29:38,880 --> 00:29:44,320
change you pushed and once you have

00:29:42,240 --> 00:29:46,399
your pull request now you it's time for

00:29:44,320 --> 00:29:49,360
you to look for reviewers

00:29:46,399 --> 00:29:50,399
you need people to review your code to

00:29:49,360 --> 00:29:54,799
give you comments

00:29:50,399 --> 00:29:54,799
and approve it if it's okay or

00:29:54,880 --> 00:29:58,399
if things are not okay you have to

00:29:56,960 --> 00:30:01,600
review your code

00:29:58,399 --> 00:30:04,159
make new commits push the changes

00:30:01,600 --> 00:30:06,080
until everything is okay from the point

00:30:04,159 --> 00:30:08,320
of view of every viewers

00:30:06,080 --> 00:30:10,000
you need in this case you need the

00:30:08,320 --> 00:30:13,279
approval of

00:30:10,000 --> 00:30:15,679
two committers in in the community

00:30:13,279 --> 00:30:16,880
and once you get the approval once all

00:30:15,679 --> 00:30:18,320
the changes are

00:30:16,880 --> 00:30:20,559
okay from the point of view of their

00:30:18,320 --> 00:30:23,279
viewers number i mean the

00:30:20,559 --> 00:30:24,399
full request the code can be merged into

00:30:23,279 --> 00:30:27,919
the developed branch

00:30:24,399 --> 00:30:31,360
of apache yield and that's also done by

00:30:27,919 --> 00:30:31,360
apache yield committers

00:30:33,520 --> 00:30:37,360
so that would be the end the contributor

00:30:35,760 --> 00:30:41,279
contribution process but

00:30:37,360 --> 00:30:44,399
maybe you are not done yet sometimes and

00:30:41,279 --> 00:30:45,360
you run into surprises like it was in my

00:30:44,399 --> 00:30:49,039
case

00:30:45,360 --> 00:30:51,200
sometimes after some days or some weeks

00:30:49,039 --> 00:30:52,080
you get a ticket or you get an email

00:30:51,200 --> 00:30:54,559
from someone

00:30:52,080 --> 00:30:55,760
telling you that there are some tests

00:30:54,559 --> 00:31:00,000
the the tests

00:30:55,760 --> 00:31:02,320
that are run in the in the ci pipeline

00:31:00,000 --> 00:31:04,080
which sometimes are failing there are

00:31:02,320 --> 00:31:07,039
some flaky tests and they have been

00:31:04,080 --> 00:31:07,840
caused by your latest by i mean not by

00:31:07,039 --> 00:31:10,720
your latest but

00:31:07,840 --> 00:31:12,080
by by the introduction of your feature

00:31:10,720 --> 00:31:15,200
so it's time for you

00:31:12,080 --> 00:31:18,080
to investigate those flakiness and

00:31:15,200 --> 00:31:18,640
fix it so in my case i i had to fight

00:31:18,080 --> 00:31:21,919
for

00:31:18,640 --> 00:31:23,919
with a couple of test cases it took me

00:31:21,919 --> 00:31:26,960
several days because it was a hard

00:31:23,919 --> 00:31:29,840
problem so even though i thought i was

00:31:26,960 --> 00:31:30,399
i was done previously i had to really

00:31:29,840 --> 00:31:32,960
finish this

00:31:30,399 --> 00:31:33,760
up this i have to tell you these tests

00:31:32,960 --> 00:31:35,919
weren't failing

00:31:33,760 --> 00:31:37,200
when when i push the code when failing

00:31:35,919 --> 00:31:39,840
in my local tests

00:31:37,200 --> 00:31:40,640
but we're failing from time to time not

00:31:39,840 --> 00:31:42,799
very often

00:31:40,640 --> 00:31:44,159
and that's something i i couldn't

00:31:42,799 --> 00:31:44,640
realize at the moment i pushed the

00:31:44,159 --> 00:31:48,000
changes

00:31:44,640 --> 00:31:49,440
but that came later also if there are

00:31:48,000 --> 00:31:51,840
future issues with

00:31:49,440 --> 00:31:53,919
with your feature it's normal that

00:31:51,840 --> 00:31:57,039
sometimes you have to

00:31:53,919 --> 00:31:58,080
to assume that they will be assigned to

00:31:57,039 --> 00:32:03,039
them because

00:31:58,080 --> 00:32:03,039
you know that feature better than others

00:32:04,000 --> 00:32:09,360
and last just to show you some

00:32:07,919 --> 00:32:10,960
miscellaneous thoughts about the

00:32:09,360 --> 00:32:12,559
contribution process

00:32:10,960 --> 00:32:14,559
you might be wondering how long did it

00:32:12,559 --> 00:32:17,440
take me to implement this feature

00:32:14,559 --> 00:32:18,320
it was about i don't know maybe two and

00:32:17,440 --> 00:32:21,840
a half months or

00:32:18,320 --> 00:32:24,640
three months it's probably a lot but

00:32:21,840 --> 00:32:25,840
i mean i was quite new and the apache

00:32:24,640 --> 00:32:28,720
geode is not

00:32:25,840 --> 00:32:30,080
simple and also i have to say that

00:32:28,720 --> 00:32:34,159
sometimes

00:32:30,080 --> 00:32:34,159
the reviews can take time because

00:32:34,480 --> 00:32:37,760
the rfc reviews took some time because

00:32:36,559 --> 00:32:40,320
sometimes you

00:32:37,760 --> 00:32:41,600
you need people to to give you comments

00:32:40,320 --> 00:32:44,640
but they are busy

00:32:41,600 --> 00:32:46,240
and once they read your

00:32:44,640 --> 00:32:48,320
your description in the rfc maybe it's

00:32:46,240 --> 00:32:50,799
not so clear and you need

00:32:48,320 --> 00:32:51,919
more clarifications so the review cycles

00:32:50,799 --> 00:32:54,960
sometimes

00:32:51,919 --> 00:32:56,720
got a bit long although it was very

00:32:54,960 --> 00:32:59,919
fruitful of course

00:32:56,720 --> 00:33:03,360
and also the review of the code a

00:32:59,919 --> 00:33:04,399
you push your code and you create a pull

00:33:03,360 --> 00:33:06,559
request

00:33:04,399 --> 00:33:09,760
then you have to find reviewers

00:33:06,559 --> 00:33:11,840
sometimes reviewers do not jump in

00:33:09,760 --> 00:33:13,519
autonomously you have to ask for them in

00:33:11,840 --> 00:33:16,240
the in the list

00:33:13,519 --> 00:33:17,440
and if there's no people with spare time

00:33:16,240 --> 00:33:20,880
you have to wait

00:33:17,440 --> 00:33:22,480
and once the people get some time to

00:33:20,880 --> 00:33:25,919
review your code

00:33:22,480 --> 00:33:27,440
maybe things are not so quick so quick

00:33:25,919 --> 00:33:28,880
as you would expect

00:33:27,440 --> 00:33:30,559
we work in different time zones

00:33:28,880 --> 00:33:32,399
sometimes so

00:33:30,559 --> 00:33:35,679
that's one of the reasons that sometimes

00:33:32,399 --> 00:33:37,840
changes take longer than you expected

00:33:35,679 --> 00:33:39,279
and the last one the thing i wanted to

00:33:37,840 --> 00:33:41,039
share with you was

00:33:39,279 --> 00:33:42,880
okay you also might be wondering okay

00:33:41,039 --> 00:33:46,240
you finally

00:33:42,880 --> 00:33:47,519
finished a feature you are done you put

00:33:46,240 --> 00:33:51,039
it i mean you managed

00:33:47,519 --> 00:33:53,760
to merge it into the develop branch

00:33:51,039 --> 00:33:54,399
so when that will be when will that

00:33:53,760 --> 00:33:58,960
feature

00:33:54,399 --> 00:34:00,960
be available in an official jio release

00:33:58,960 --> 00:34:02,799
in my case when i started to develop

00:34:00,960 --> 00:34:05,159
this feature

00:34:02,799 --> 00:34:06,720
the official release was apache geode

00:34:05,159 --> 00:34:10,639
1.12

00:34:06,720 --> 00:34:13,760
so i was expecting that my feature

00:34:10,639 --> 00:34:17,520
this feature would make it into 113

00:34:13,760 --> 00:34:21,440
but 113

00:34:17,520 --> 00:34:24,480
i mean when i finished it the branch for

00:34:21,440 --> 00:34:27,679
uh the bug fix bug fix

00:34:24,480 --> 00:34:28,560
uh well no the branch for 113 was

00:34:27,679 --> 00:34:31,359
already cut

00:34:28,560 --> 00:34:32,839
so my feature could not make make it

00:34:31,359 --> 00:34:35,520
into 113

00:34:32,839 --> 00:34:36,560
so we're going to have to wait until 1

00:34:35,520 --> 00:34:40,480
00:34:36,560 --> 00:34:40,480
to have this feature in place

00:34:41,440 --> 00:34:45,200
and this is all i wanted to share with

00:34:43,040 --> 00:34:45,200
you

00:34:45,599 --> 00:34:51,839
just a summary i shared with you this

00:34:49,760 --> 00:34:53,520
functionality implemented in apache geo

00:34:51,839 --> 00:34:54,960
transaction writing one vertically

00:34:53,520 --> 00:34:56,639
replication

00:34:54,960 --> 00:34:58,560
and in the second part i wanted to share

00:34:56,639 --> 00:35:00,720
with you a process i followed

00:34:58,560 --> 00:35:01,599
as a new person in the apache jio

00:35:00,720 --> 00:35:05,119
community

00:35:01,599 --> 00:35:08,640
to to implement changes

00:35:05,119 --> 00:35:10,960
in the system thank you very much for

00:35:08,640 --> 00:35:12,560
listening to me and now if you have any

00:35:10,960 --> 00:35:15,599
questions

00:35:12,560 --> 00:35:19,599
i will try to gather them in the chat

00:35:15,599 --> 00:35:19,599
and answer them if there are

00:35:26,000 --> 00:35:32,640
i see a question from varisto camarero

00:35:30,160 --> 00:35:34,960
he is asking me ask me about performance

00:35:32,640 --> 00:35:38,160
impacts of the picture

00:35:34,960 --> 00:35:40,480
the thing is we have not measured

00:35:38,160 --> 00:35:42,640
at least me have not measured the

00:35:40,480 --> 00:35:43,920
performance impacts of the feature

00:35:42,640 --> 00:35:46,560
i can tell you that there would be

00:35:43,920 --> 00:35:49,839
impact because

00:35:46,560 --> 00:35:53,119
if if you have to wait to send a bat

00:35:49,839 --> 00:35:53,839
to to analyze the patch to see if there

00:35:53,119 --> 00:35:56,560
are

00:35:53,839 --> 00:35:57,200
missing events in the transaction and if

00:35:56,560 --> 00:35:59,760
there are

00:35:57,200 --> 00:36:00,960
you have to go to the queue and get big

00:35:59,760 --> 00:36:03,359
elements from the queue

00:36:00,960 --> 00:36:04,400
but not in the natural way because cues

00:36:03,359 --> 00:36:07,520
are

00:36:04,400 --> 00:36:09,760
are i mean the

00:36:07,520 --> 00:36:12,880
the nature of cues is to push and pop

00:36:09,760 --> 00:36:15,440
elements but in our case we have to

00:36:12,880 --> 00:36:17,280
extract elements selectively and that

00:36:15,440 --> 00:36:20,320
could take some time

00:36:17,280 --> 00:36:23,839
but we have not measured

00:36:20,320 --> 00:36:25,119
the impact sorry so i'm afraid we'll

00:36:23,839 --> 00:36:27,839
have to

00:36:25,119 --> 00:36:29,440
wait for for our colleagues in ericsson

00:36:27,839 --> 00:36:32,800
making use of this feature

00:36:29,440 --> 00:36:41,280
to tell us if this has really been

00:36:32,800 --> 00:36:44,480
a problem in terms of performance

00:36:41,280 --> 00:36:54,880
let's see if i have any more

00:36:44,480 --> 00:36:57,359
feature any more questions

00:36:54,880 --> 00:36:58,480
let me see i see one from diane hartman

00:36:57,359 --> 00:37:00,800
what is the bet

00:36:58,480 --> 00:37:02,320
what if the batch size limit prevents

00:37:00,800 --> 00:37:03,280
you from adding missing transaction

00:37:02,320 --> 00:37:06,480
events yeah

00:37:03,280 --> 00:37:09,839
well i think i answer that

00:37:06,480 --> 00:37:09,839
we are

00:37:10,160 --> 00:37:15,520
we are really overwriting the

00:37:13,280 --> 00:37:16,480
the batch size limit in our case

00:37:15,520 --> 00:37:19,520
sometimes we

00:37:16,480 --> 00:37:21,599
we go over it for the sake of sending

00:37:19,520 --> 00:37:23,200
complete transaction events

00:37:21,599 --> 00:37:24,640
if the time elapses before all

00:37:23,200 --> 00:37:25,520
transaction events are in the center

00:37:24,640 --> 00:37:28,400
queue

00:37:25,520 --> 00:37:29,280
we wait but well actually we don't wait

00:37:28,400 --> 00:37:31,839
what we do is

00:37:29,280 --> 00:37:32,320
we go to the queue get the missing event

00:37:31,839 --> 00:37:37,520
and then

00:37:32,320 --> 00:37:40,960
send we we don't wait any longer

00:37:37,520 --> 00:37:42,960
uh impact if you no longer

00:37:40,960 --> 00:37:44,400
would always be good another question

00:37:42,960 --> 00:37:46,160
from diane hartman

00:37:44,400 --> 00:37:48,839
would also be good to understand impact

00:37:46,160 --> 00:37:52,400
equal size if you no longer

00:37:48,839 --> 00:37:56,240
limit yeah yeah that's a good question

00:37:52,400 --> 00:37:58,560
i'm i'm afraid if if you don't add too

00:37:56,240 --> 00:38:01,200
many elements in the queue

00:37:58,560 --> 00:38:02,160
extra elements i mean elements above the

00:38:01,200 --> 00:38:04,480
queue size

00:38:02,160 --> 00:38:06,240
you would be safe but i would have to

00:38:04,480 --> 00:38:10,400
check if there is any

00:38:06,240 --> 00:38:12,880
any limit in adding extra events

00:38:10,400 --> 00:38:13,599
to the to the batch if you have set a

00:38:12,880 --> 00:38:16,960
given

00:38:13,599 --> 00:38:17,359
limit so good question but sorry i have

00:38:16,960 --> 00:38:20,800
no

00:38:17,359 --> 00:38:20,800
answer right now for you

00:38:24,800 --> 00:38:33,839
any more questions let's see

00:38:41,440 --> 00:38:47,839
okay i guess no more questions

00:38:49,119 --> 00:38:55,440
so it's 7 33

00:38:54,290 --> 00:38:58,400
[Music]

00:38:55,440 --> 00:39:00,560
let's finish this up thanks again for

00:38:58,400 --> 00:39:02,800
joining and if you want to

00:39:00,560 --> 00:39:04,800
get in touch with me you can use my

00:39:02,800 --> 00:39:15,839
twitter

00:39:04,800 --> 00:39:15,839
id see you

00:39:26,160 --> 00:39:28,240

YouTube URL: https://www.youtube.com/watch?v=jvsxxuH2QD0


