Title: ApacheCon @Home 2020 Tuesday Keynote - Jonathan Ellis, Datastax
Publication date: 2020-10-09
Playlist: ApacheCon @Home 2020
Description: 
	DataStax Astra and Apache Cassandra: Sustainable Open Source in the Cloud Era

Jonathan Ellis, Co-founder and CTO, DataStax


Apache Cassandra solves database performance at scale better than any other system in the world, but it was designed for a world of self-managed infrastructure. This created a lot of rough edges for the level of automation DataStax needed to build its Astra managed service for Cassandra. Building Astra also exposed some gaps in Cassandra’s feature set that modern developers want and expect from a database-as-a-service.


DataStax believes that developers and businesses shouldn’t have to give up ownership of their data to take advantage of the benefits of cloud infrastructure. We want everyone to have the freedom to deploy anywhere, without lock-in. This talk will explain how we’re bringing the enhancements we made for Astra back to Apache Cassandra. Following the Cassandra Enhancement Proposal process, we are showing that cloud and open source are not mutually exclusive.


Jonathan Ellis is a co-founder of DataStax. Before DataStax, Jonathan was Project Chair of Apache Cassandra for six years, where he built the Cassandra project and community into an open-source success. Previously, Jonathan built an object storage system based on Reed-Solomon encoding for data backup provider Mozy that scaled to petabytes of data and gigabits per second throughput.


ApacheCon @Home 2020 - https://apachecon.com/acah2020/
The Apache Software Foundation - https://apache.org
Captions: 
	00:00:03,370 --> 00:00:08,089
[Music]

00:00:11,120 --> 00:00:14,190
[Music]

00:00:21,760 --> 00:00:25,119
we are going to move on to our final

00:00:23,600 --> 00:00:28,560
keynote of this morning

00:00:25,119 --> 00:00:31,519
uh jonathan ellis is

00:00:28,560 --> 00:00:32,399
joining us from uh data stacks here

00:00:31,519 --> 00:00:36,079
where he is the

00:00:32,399 --> 00:00:39,200
the co-founder and cto here we go

00:00:36,079 --> 00:00:41,520
and uh thank you for joining us and

00:00:39,200 --> 00:00:44,399
without taking any more of your time

00:00:41,520 --> 00:00:46,239
uh jonathan is going to speak with us

00:00:44,399 --> 00:00:49,680
about

00:00:46,239 --> 00:00:52,879
data stacks astra and apache cassandra

00:00:49,680 --> 00:00:53,360
so take it away jonathan thanks so much

00:00:52,879 --> 00:00:56,480
rich

00:00:53,360 --> 00:00:58,000
it's great to be back at apachecon as a

00:00:56,480 --> 00:01:00,000
case study of how open

00:00:58,000 --> 00:01:02,239
source can succeed and thrive in the

00:01:00,000 --> 00:01:04,159
cloud era i'm going to explain how data

00:01:02,239 --> 00:01:06,799
stacks built our apache cassandra

00:01:04,159 --> 00:01:10,320
service called astra

00:01:06,799 --> 00:01:12,159
right now companies are trying out uh

00:01:10,320 --> 00:01:14,320
different approaches to building cloud

00:01:12,159 --> 00:01:16,640
services i've picked a couple of

00:01:14,320 --> 00:01:19,040
well-known examples here

00:01:16,640 --> 00:01:21,360
dynamodb is an example of a classic

00:01:19,040 --> 00:01:24,000
closed-source database as a service

00:01:21,360 --> 00:01:24,560
you get the black box and it works or it

00:01:24,000 --> 00:01:27,040
doesn't

00:01:24,560 --> 00:01:28,799
if it doesn't too bad even if it does

00:01:27,040 --> 00:01:31,920
and you want to run it somewhere else

00:01:28,799 --> 00:01:34,240
also too bad atlas

00:01:31,920 --> 00:01:37,040
is a database as a service built on a

00:01:34,240 --> 00:01:38,840
project that used to be open source

00:01:37,040 --> 00:01:41,439
by that i mean a couple years ago

00:01:38,840 --> 00:01:42,560
mongodb famously changed their license

00:01:41,439 --> 00:01:44,799
from agpl

00:01:42,560 --> 00:01:46,560
to a custom license called the server

00:01:44,799 --> 00:01:48,640
side public license

00:01:46,560 --> 00:01:50,720
this license attempts to force cloud

00:01:48,640 --> 00:01:51,840
vendors to open source any competing

00:01:50,720 --> 00:01:53,920
service they built

00:01:51,840 --> 00:01:55,920
but in the process it stopped being open

00:01:53,920 --> 00:01:58,159
source itself

00:01:55,920 --> 00:01:59,920
we took a different approach with astra

00:01:58,159 --> 00:02:02,079
we wanted to build on the openness

00:01:59,920 --> 00:02:02,320
that's the default for apache projects

00:02:02,079 --> 00:02:04,479
and

00:02:02,320 --> 00:02:06,399
bring back the improvements we made in

00:02:04,479 --> 00:02:08,239
the process of building astra to all

00:02:06,399 --> 00:02:10,239
cassandra users

00:02:08,239 --> 00:02:12,800
we did that by turning our improvements

00:02:10,239 --> 00:02:14,160
into cassandra enhancement proposals or

00:02:12,800 --> 00:02:16,400
ceps

00:02:14,160 --> 00:02:18,000
the cep is a process that the cassandra

00:02:16,400 --> 00:02:20,239
community has defined

00:02:18,000 --> 00:02:21,040
to provide a process for discussing and

00:02:20,239 --> 00:02:24,640
creating

00:02:21,040 --> 00:02:24,640
significant new functionality

00:02:25,120 --> 00:02:28,959
the first set of ceps that we created

00:02:27,120 --> 00:02:30,959
were to lay the groundwork for running

00:02:28,959 --> 00:02:32,640
cassandra as a multi-tenant service

00:02:30,959 --> 00:02:35,519
which is something it wasn't really

00:02:32,640 --> 00:02:37,519
designed to do 10 years ago

00:02:35,519 --> 00:02:38,800
this groundwork included a management

00:02:37,519 --> 00:02:40,800
api sidecar

00:02:38,800 --> 00:02:43,519
a kubernetes operator and something we

00:02:40,800 --> 00:02:46,319
call guardrails

00:02:43,519 --> 00:02:46,800
when cassandra was born the state of the

00:02:46,319 --> 00:02:48,319
art in

00:02:46,800 --> 00:02:50,000
infrastructure automation was

00:02:48,319 --> 00:02:54,000
configuration management tools

00:02:50,000 --> 00:02:55,519
like puppet and chef kubernetes was

00:02:54,000 --> 00:02:56,480
released only a few years after

00:02:55,519 --> 00:02:58,560
cassandra but

00:02:56,480 --> 00:02:59,599
support for stateful workloads like

00:02:58,560 --> 00:03:02,159
databases

00:02:59,599 --> 00:03:03,840
wasn't added until 2016 and then it took

00:03:02,159 --> 00:03:05,360
a couple more years to really be

00:03:03,840 --> 00:03:07,599
production ready

00:03:05,360 --> 00:03:09,760
so when we broke ground on astro we had

00:03:07,599 --> 00:03:13,280
some work to do to build our cassandra

00:03:09,760 --> 00:03:15,200
service on kubernetes

00:03:13,280 --> 00:03:16,959
our first step was to make cassandra

00:03:15,200 --> 00:03:20,239
easier to automate from any control

00:03:16,959 --> 00:03:22,480
plane we open sourced a management api

00:03:20,239 --> 00:03:23,920
sidecar to provide higher level

00:03:22,480 --> 00:03:26,720
operational actions

00:03:23,920 --> 00:03:28,239
across a cluster this gives us some

00:03:26,720 --> 00:03:30,720
version independence

00:03:28,239 --> 00:03:32,319
against the underlying cassandra release

00:03:30,720 --> 00:03:34,319
and it makes it easier to evolve the

00:03:32,319 --> 00:03:36,799
sidecar quickly

00:03:34,319 --> 00:03:38,239
all of the operations on this slide are

00:03:36,799 --> 00:03:40,239
conceptually simple

00:03:38,239 --> 00:03:41,599
but against a distributed system like

00:03:40,239 --> 00:03:44,080
cassandra

00:03:41,599 --> 00:03:46,159
that's dealing with multiple clients

00:03:44,080 --> 00:03:48,080
connected to it as well as connections

00:03:46,159 --> 00:03:51,280
to other nodes in the cluster

00:03:48,080 --> 00:03:52,239
the implementation isn't trivial for

00:03:51,280 --> 00:03:53,920
example

00:03:52,239 --> 00:03:56,000
shutting down gracefully means you need

00:03:53,920 --> 00:03:57,120
to first stop accepting new requests

00:03:56,000 --> 00:03:58,879
from clients

00:03:57,120 --> 00:04:00,640
tell the rest of the cluster that you're

00:03:58,879 --> 00:04:03,360
going to shut down

00:04:00,640 --> 00:04:03,920
finish existing client requests and

00:04:03,360 --> 00:04:05,760
flush

00:04:03,920 --> 00:04:08,640
recent writes to disk so you don't need

00:04:05,760 --> 00:04:11,599
to replay the commit log on restart

00:04:08,640 --> 00:04:13,439
so you have two complexities one is the

00:04:11,599 --> 00:04:15,120
number of steps involved but the other

00:04:13,439 --> 00:04:16,959
is that

00:04:15,120 --> 00:04:18,720
for these steps you have to wait an

00:04:16,959 --> 00:04:20,400
unknown amount of time for something to

00:04:18,720 --> 00:04:22,960
finish you can't just say

00:04:20,400 --> 00:04:23,840
do this and and then fire and forget

00:04:22,960 --> 00:04:26,160
those commands

00:04:23,840 --> 00:04:27,440
you need to wait for the cluster to

00:04:26,160 --> 00:04:30,720
reach the next

00:04:27,440 --> 00:04:34,400
state that you wanted

00:04:30,720 --> 00:04:35,040
so once we had that that management

00:04:34,400 --> 00:04:37,040
process

00:04:35,040 --> 00:04:39,520
we needed to build the actual kubernetes

00:04:37,040 --> 00:04:39,520
operator

00:04:39,680 --> 00:04:43,759
the operator starts with provisioning

00:04:41,759 --> 00:04:46,639
and configuration management and

00:04:43,759 --> 00:04:49,600
continues to upgrades backup and restore

00:04:46,639 --> 00:04:51,680
scaling and failure recovery again we

00:04:49,600 --> 00:04:53,919
needed this ourselves to run cassandra

00:04:51,680 --> 00:04:56,800
and astra so we open sourced it

00:04:53,919 --> 00:04:57,919
and created a cep to officially bring

00:04:56,800 --> 00:05:02,960
kubernetes

00:04:57,919 --> 00:05:02,960
to the apache cassandra project in tree

00:05:03,840 --> 00:05:07,520
the third thing we needed to do was give

00:05:05,520 --> 00:05:09,039
users less rope to hang themselves and

00:05:07,520 --> 00:05:12,400
that's what we've called

00:05:09,039 --> 00:05:14,720
guardrails historically cassandra has

00:05:12,400 --> 00:05:15,680
targeted power users who want to push

00:05:14,720 --> 00:05:18,000
the limits

00:05:15,680 --> 00:05:20,720
and invest the time required to

00:05:18,000 --> 00:05:22,240
understand how to do that successfully

00:05:20,720 --> 00:05:24,880
but the goal of the database as a

00:05:22,240 --> 00:05:26,240
service has to be that it just works

00:05:24,880 --> 00:05:28,080
you shouldn't have to spend a lot of

00:05:26,240 --> 00:05:29,520
time reading manuals before making your

00:05:28,080 --> 00:05:31,520
first api call

00:05:29,520 --> 00:05:33,600
and you certainly certainly shouldn't be

00:05:31,520 --> 00:05:35,520
able to break it

00:05:33,600 --> 00:05:37,520
so we needed to restrict some of

00:05:35,520 --> 00:05:40,880
cassandra's traditional freedoms

00:05:37,520 --> 00:05:40,880
as in the examples here

00:05:41,680 --> 00:05:45,759
but again these are also useful outside

00:05:44,080 --> 00:05:49,199
the cloud for traditional i t

00:05:45,759 --> 00:05:52,080
departments so we created a ce pre a cep

00:05:49,199 --> 00:05:53,360
to bring this to cassandra as well in an

00:05:52,080 --> 00:05:55,039
opt-in fashion

00:05:53,360 --> 00:05:56,639
so cassandra will continue to work the

00:05:55,039 --> 00:05:59,039
way it always has

00:05:56,639 --> 00:05:59,759
out of the box but if you choose to do

00:05:59,039 --> 00:06:01,759
so

00:05:59,759 --> 00:06:04,160
you can enable some or all of these

00:06:01,759 --> 00:06:04,160
limits

00:06:05,360 --> 00:06:09,360
we launched astra as an open beta a year

00:06:07,680 --> 00:06:12,080
ago and we quickly got

00:06:09,360 --> 00:06:14,080
feedback on features that users wanted

00:06:12,080 --> 00:06:17,360
to see in astra and by extension

00:06:14,080 --> 00:06:20,080
in cassandra itself we created ceps to

00:06:17,360 --> 00:06:21,680
add these to cassandra as well

00:06:20,080 --> 00:06:23,680
the first of these is already

00:06:21,680 --> 00:06:26,800
implemented and live and that's storage

00:06:23,680 --> 00:06:28,560
attached indexes

00:06:26,800 --> 00:06:30,479
there's a little bit of backstory here

00:06:28,560 --> 00:06:31,600
because cassandra has had plugable

00:06:30,479 --> 00:06:35,039
indexes

00:06:31,600 --> 00:06:37,039
since 2011 making indexes plugables

00:06:35,039 --> 00:06:38,800
uh is i think that's one of the things

00:06:37,039 --> 00:06:41,280
we got right

00:06:38,800 --> 00:06:43,039
but it's still taken a long time for

00:06:41,280 --> 00:06:45,120
cassandra indexes to match the

00:06:43,039 --> 00:06:46,400
flexibility and performance that most

00:06:45,120 --> 00:06:47,919
users expect

00:06:46,400 --> 00:06:49,599
when they're coming from a relational

00:06:47,919 --> 00:06:52,880
database background which is

00:06:49,599 --> 00:06:55,280
most users this graph

00:06:52,880 --> 00:06:56,720
shows the storage space required for

00:06:55,280 --> 00:07:00,560
creating 10 indexes

00:06:56,720 --> 00:07:04,160
against a base table the base table

00:07:00,560 --> 00:07:08,479
space used is in gray and the default

00:07:04,160 --> 00:07:12,400
legacy cassandra indexes are in green

00:07:08,479 --> 00:07:14,319
storage attached indexes are in blue

00:07:12,400 --> 00:07:16,240
for those of you who follow cassandra

00:07:14,319 --> 00:07:19,039
development this also compares

00:07:16,240 --> 00:07:21,919
an experimental index implementation

00:07:19,039 --> 00:07:21,919
called sassy

00:07:22,240 --> 00:07:28,479
you can see that the amount of

00:07:25,759 --> 00:07:29,520
just storage space used can be an

00:07:28,479 --> 00:07:33,199
obstacle

00:07:29,520 --> 00:07:35,759
to using indexes as freely as you'd want

00:07:33,199 --> 00:07:38,000
in cassandra and so that was one of the

00:07:35,759 --> 00:07:44,479
main design goals we had

00:07:38,000 --> 00:07:46,720
for sai was solving that problem

00:07:44,479 --> 00:07:48,400
the second design goal we had for sai

00:07:46,720 --> 00:07:51,360
was increasing your

00:07:48,400 --> 00:07:53,759
flexibility you had to do queries and so

00:07:51,360 --> 00:07:56,479
we achieved that as well

00:07:53,759 --> 00:07:58,080
because the index interface in cassandra

00:07:56,479 --> 00:07:59,680
it has already been defined

00:07:58,080 --> 00:08:01,360
and because index semantics are

00:07:59,680 --> 00:08:03,280
relatively straightforward and

00:08:01,360 --> 00:08:05,759
uncontroversial

00:08:03,280 --> 00:08:06,720
we went ahead and implemented sai in

00:08:05,759 --> 00:08:08,639
astra

00:08:06,720 --> 00:08:13,840
while starting the discussion on how to

00:08:08,639 --> 00:08:13,840
bring them to apache cassandra

00:08:14,160 --> 00:08:18,400
so up to now what i present presented is

00:08:17,039 --> 00:08:20,800
features that are done

00:08:18,400 --> 00:08:22,240
they're live in astra and we've opened

00:08:20,800 --> 00:08:25,520
ceps to bring them to

00:08:22,240 --> 00:08:26,800
apache cassandra as well the next

00:08:25,520 --> 00:08:29,280
things i'm going to talk about are

00:08:26,800 --> 00:08:31,680
things we learned astro users want

00:08:29,280 --> 00:08:32,880
but we need to build consensus with the

00:08:31,680 --> 00:08:35,120
cassandra project

00:08:32,880 --> 00:08:37,360
on the right way to implement them

00:08:35,120 --> 00:08:39,279
before we start building them

00:08:37,360 --> 00:08:41,360
the first two here are related

00:08:39,279 --> 00:08:42,640
cassandra's approach to data modeling

00:08:41,360 --> 00:08:44,560
since the beginning

00:08:42,640 --> 00:08:47,120
has been to encourage developers to

00:08:44,560 --> 00:08:49,839
denormalize their data at right time

00:08:47,120 --> 00:08:53,279
so that at query time you can pull what

00:08:49,839 --> 00:08:55,680
you need from a single partition

00:08:53,279 --> 00:08:57,120
but developers don't love that sometimes

00:08:55,680 --> 00:08:59,519
you just want to get something built

00:08:57,120 --> 00:09:01,360
quickly and optimize it later

00:08:59,519 --> 00:09:03,760
and sometimes optimizing isn't even

00:09:01,360 --> 00:09:05,440
necessary not even later

00:09:03,760 --> 00:09:07,519
you have a table that just isn't queried

00:09:05,440 --> 00:09:08,399
very often or it doesn't hold a lot of

00:09:07,519 --> 00:09:10,480
data

00:09:08,399 --> 00:09:12,800
so we want to add joins to the cassandra

00:09:10,480 --> 00:09:14,320
query language

00:09:12,800 --> 00:09:16,320
and to do that we're going to need a

00:09:14,320 --> 00:09:17,680
query planner and that means

00:09:16,320 --> 00:09:19,120
that to understand what the planner

00:09:17,680 --> 00:09:19,680
comes up with you're going to need

00:09:19,120 --> 00:09:22,399
explain

00:09:19,680 --> 00:09:24,320
syntax so that's why these two go

00:09:22,399 --> 00:09:26,720
together

00:09:24,320 --> 00:09:28,160
again uh if you're familiar with

00:09:26,720 --> 00:09:30,240
cassandra

00:09:28,160 --> 00:09:32,399
we've had something called tracing for a

00:09:30,240 --> 00:09:35,200
while that does something similar

00:09:32,399 --> 00:09:36,800
but it's it's very low level very it's

00:09:35,200 --> 00:09:38,640
down in the weeds in terms of like i

00:09:36,800 --> 00:09:40,720
scanned these data files

00:09:38,640 --> 00:09:42,880
and found the rows matching your query

00:09:40,720 --> 00:09:44,560
and that scanning them took this long

00:09:42,880 --> 00:09:45,279
and merging them took this long and so

00:09:44,560 --> 00:09:47,519
forth

00:09:45,279 --> 00:09:49,040
so they explain is is going to give you

00:09:47,519 --> 00:09:50,000
something that's a little more human

00:09:49,040 --> 00:09:53,839
readable

00:09:50,000 --> 00:09:53,839
and a lot more high level

00:09:54,480 --> 00:09:58,320
the third thing that we're collaborating

00:09:56,880 --> 00:10:01,519
with the community to build

00:09:58,320 --> 00:10:02,560
is change data capture change data

00:10:01,519 --> 00:10:04,399
capture is different

00:10:02,560 --> 00:10:05,600
in that it affects less how you query

00:10:04,399 --> 00:10:07,519
cassandra

00:10:05,600 --> 00:10:09,440
and more in how you build the rest of

00:10:07,519 --> 00:10:11,680
your data platform

00:10:09,440 --> 00:10:13,839
cdc is useful for all cassandra users

00:10:11,680 --> 00:10:15,279
but it's especially useful for cassandra

00:10:13,839 --> 00:10:17,120
users in the cloud

00:10:15,279 --> 00:10:19,120
where the expectation is that i should

00:10:17,120 --> 00:10:19,760
be able to wire together the services i

00:10:19,120 --> 00:10:23,040
need

00:10:19,760 --> 00:10:25,200
from a broad menu so our motivation

00:10:23,040 --> 00:10:26,959
is pretty intense to give astr users a

00:10:25,200 --> 00:10:28,480
cdc implementation

00:10:26,959 --> 00:10:30,880
that they can use to simplify their

00:10:28,480 --> 00:10:32,560
infrastructure but again we don't want

00:10:30,880 --> 00:10:34,079
this to be astra only

00:10:32,560 --> 00:10:35,760
we want to work together with the

00:10:34,079 --> 00:10:38,079
cassandra project to make sure that we

00:10:35,760 --> 00:10:40,399
build something that works for everyone

00:10:38,079 --> 00:10:42,640
so that's what we're doing in the cep

00:10:40,399 --> 00:10:44,560
process

00:10:42,640 --> 00:10:46,160
so here's my recipe for building a

00:10:44,560 --> 00:10:48,079
win-win infrastructure

00:10:46,160 --> 00:10:50,800
as a service that's faithful to the open

00:10:48,079 --> 00:10:54,240
source principles of the community

00:10:50,800 --> 00:10:56,000
give users a choice engage the community

00:10:54,240 --> 00:10:59,120
as early as possible

00:10:56,000 --> 00:11:00,160
and share learnings as code it sounds

00:10:59,120 --> 00:11:02,560
easy

00:11:00,160 --> 00:11:03,839
but of course the devil's in the details

00:11:02,560 --> 00:11:06,399
for example

00:11:03,839 --> 00:11:08,000
you i say to ingert engage the community

00:11:06,399 --> 00:11:10,000
as early as possible

00:11:08,000 --> 00:11:12,160
but sometimes as early as possible means

00:11:10,000 --> 00:11:13,920
you still end up where you need to ship

00:11:12,160 --> 00:11:16,000
something before the community arrives

00:11:13,920 --> 00:11:16,720
it can sense us and that can piss people

00:11:16,000 --> 00:11:19,120
off

00:11:16,720 --> 00:11:20,720
it's a balance and we're not perfect but

00:11:19,120 --> 00:11:23,279
we're doing our best to contribute in

00:11:20,720 --> 00:11:23,279
good faith

00:11:23,519 --> 00:11:27,360
in closing i'll encourage you to give

00:11:25,839 --> 00:11:29,120
astra a try right now

00:11:27,360 --> 00:11:30,959
it's the easiest way to get started with

00:11:29,120 --> 00:11:32,000
cassandra and there's a permanently free

00:11:30,959 --> 00:11:34,880
tier

00:11:32,000 --> 00:11:36,640
thank you thank you so much jonathan

00:11:34,880 --> 00:11:40,240
this was great and uh

00:11:36,640 --> 00:11:40,240
thank you to all of our keynotes this

00:11:40,839 --> 00:11:43,839
morning

00:11:46,079 --> 00:11:48,160

YouTube URL: https://www.youtube.com/watch?v=7fQS9xFLKcA


