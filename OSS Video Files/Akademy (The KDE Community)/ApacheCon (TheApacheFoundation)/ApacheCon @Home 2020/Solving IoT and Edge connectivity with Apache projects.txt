Title: Solving IoT and Edge connectivity with Apache projects
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020
Description: 
	Solving IoT and Edge connectivity with Apache projects
Dejan Bosanac, Hugo Guerrero

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

IoT and Edge solutions are all about connecting distributed systems together. But different use cases need different kinds of communication technologies. Luckily, Apache Software Foundation hosts multiple projects in this domain that can solve even the most challenging problems. Bonus point? They work great together as well, providing a great foundation layer for all your needs. In this session we'll discuss common communication patterns and where they fit IoT and Edge solutions. We'll dig into the Apache projects that enable them, such as Kafka, Qpid dispatch router and ActiveMQ. We'll discuss the differences and show where different approaches make the most sense. Finally, we'll explore how these projects can work together and provide a foundation layer for a wider ecosystem targeting specifically IoT and Edge use cases. We'll give a brief architecture of Eclipse Hono, EnMasse, Strimzi and Skupper projects. All based on Apache technologies. We'll see their benefits and place in the wider cloud IoT and Edge ecosystems.

Dejan Bosanac:
Dejan Bosanac is an engineer at Red Hat with broad expertise in messaging and integration technologies. Heâ€™s been an active member of open source communities for many years and a contributor to various projects. His latest interests revolve around open source IoT cloud and Edge computing solutions.

Hugo Guerrero:
Hugo Guerrero works at Red Hat as an APIs and messaging developer advocate. In this role, he helps the marketing team with technical overview and support to create, edit, and curate product content shared with the community through webinars, conferences, and other activities. With more than 15 years of experience as a developer, consultant, architect, and software development manager, he also works on open source software with major private and federal public sector clients in Latin America.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:01:38,560 --> 00:01:46,799
muted for the whole time sorry about it

00:01:42,479 --> 00:01:46,799
and you haven't missed much so

00:01:46,960 --> 00:01:52,799
so my name is dan uh i'm an uh

00:01:50,720 --> 00:01:54,880
an engineer at red hat dealing with

00:01:52,799 --> 00:01:58,159
messaging iot and edge computing for the

00:01:54,880 --> 00:02:01,200
for the last number of years

00:01:58,159 --> 00:02:04,560
and uh today uh with my

00:02:01,200 --> 00:02:05,759
uh colleague hugo who is uh who is a

00:02:04,560 --> 00:02:10,479
developer advocate

00:02:05,759 --> 00:02:13,599
and dealing with the apis and messaging

00:02:10,479 --> 00:02:15,760
uh we are going to talk about iot and

00:02:13,599 --> 00:02:18,160
edge computing and event driven

00:02:15,760 --> 00:02:20,720
architectures how we can apply applied

00:02:18,160 --> 00:02:21,599
to solve the challenges in in in those

00:02:20,720 --> 00:02:25,280
spaces

00:02:21,599 --> 00:02:28,800
what apache projects can be used

00:02:25,280 --> 00:02:32,640
and and how those are

00:02:28,800 --> 00:02:36,800
being being used specifically for

00:02:32,640 --> 00:02:39,519
for iot and edge so

00:02:36,800 --> 00:02:40,560
let's start uh from from the beginning

00:02:39,519 --> 00:02:43,760
uh

00:02:40,560 --> 00:02:46,879
i mean when we say uh iot and

00:02:43,760 --> 00:02:48,480
and uh edge systems so basically when

00:02:46,879 --> 00:02:49,360
you talk with the different people

00:02:48,480 --> 00:02:52,640
everybody have

00:02:49,360 --> 00:02:55,680
a different different term

00:02:52,640 --> 00:02:56,800
on what edge is starting from the left

00:02:55,680 --> 00:02:59,760
to right

00:02:56,800 --> 00:03:00,480
on this diagram we try to summarize a

00:02:59,760 --> 00:03:03,519
lot of these

00:03:00,480 --> 00:03:04,400
so we have a traditional core data

00:03:03,519 --> 00:03:06,239
center

00:03:04,400 --> 00:03:08,720
and then edge to that could be a

00:03:06,239 --> 00:03:12,319
regional data center or

00:03:08,720 --> 00:03:14,800
uh going going forward we we have a

00:03:12,319 --> 00:03:17,760
so-called provider edge where we have a

00:03:14,800 --> 00:03:20,560
lot of telcos isps and people

00:03:17,760 --> 00:03:21,599
have having a lot of a lot of

00:03:20,560 --> 00:03:23,760
infrastructure

00:03:21,599 --> 00:03:25,840
all over the place trying to provide

00:03:23,760 --> 00:03:28,400
edge computing services

00:03:25,840 --> 00:03:29,120
and then we are also getting in into the

00:03:28,400 --> 00:03:31,360
end user

00:03:29,120 --> 00:03:33,120
premises and that's usually our

00:03:31,360 --> 00:03:37,680
manufacturing retail

00:03:33,120 --> 00:03:41,360
uh or or office environments

00:03:37,680 --> 00:03:44,480
uh where we people also want to deploy

00:03:41,360 --> 00:03:47,599
uh edge computing computing software

00:03:44,480 --> 00:03:48,400
and beyond this scale is our the devices

00:03:47,599 --> 00:03:52,799
and sensors

00:03:48,400 --> 00:03:54,879
uh trying to provide uh a connectivity

00:03:52,799 --> 00:03:56,959
to to these uh to this edge

00:03:54,879 --> 00:03:59,439
infrastructure is

00:03:56,959 --> 00:04:00,000
is what we're trying to to to deal with

00:03:59,439 --> 00:04:02,879
so

00:04:00,000 --> 00:04:04,080
no matter how you you look at it there's

00:04:02,879 --> 00:04:08,720
a lot of a lot of

00:04:04,080 --> 00:04:10,799
infrastructure going on here and uh

00:04:08,720 --> 00:04:12,799
all the all the services that you try to

00:04:10,799 --> 00:04:16,400
put in our core cloud

00:04:12,799 --> 00:04:18,959
uh in our you know manufacturing

00:04:16,400 --> 00:04:20,959
retail edge or on our devices we're

00:04:18,959 --> 00:04:24,160
trying to to solve a lot of

00:04:20,959 --> 00:04:26,479
integration uh integration problems and

00:04:24,160 --> 00:04:28,479
distributed computing problems we can

00:04:26,479 --> 00:04:32,639
say that that we are basically

00:04:28,479 --> 00:04:36,080
we are basically uh uh

00:04:32,639 --> 00:04:39,919
uh pushing the the interpret

00:04:36,080 --> 00:04:42,320
integration problems uh uh to its limit

00:04:39,919 --> 00:04:44,000
and that's where where the event-driven

00:04:42,320 --> 00:04:47,040
architecture is basically

00:04:44,000 --> 00:04:48,000
uh a proven solution for most of these

00:04:47,040 --> 00:04:51,440
problems

00:04:48,000 --> 00:04:51,919
and now i will try to get to hugo to try

00:04:51,440 --> 00:04:54,720
to

00:04:51,919 --> 00:04:56,880
get us through the to the event with an

00:04:54,720 --> 00:04:59,360
architectural basics

00:04:56,880 --> 00:05:00,880
thank you diane that's uh very nice to

00:04:59,360 --> 00:05:04,960
be with you and be able to share

00:05:00,880 --> 00:05:07,120
uh some information on this uh topic so

00:05:04,960 --> 00:05:08,639
um even driven architecture what is

00:05:07,120 --> 00:05:10,880
important because it mirrors

00:05:08,639 --> 00:05:12,320
real world right we need to have this

00:05:10,880 --> 00:05:14,240
option to be able to

00:05:12,320 --> 00:05:16,880
uh communicate and connect our

00:05:14,240 --> 00:05:17,600
applications from iot or in the data

00:05:16,880 --> 00:05:21,759
center

00:05:17,600 --> 00:05:23,600
and being able to decouple them in a way

00:05:21,759 --> 00:05:24,960
that they are not need to be present at

00:05:23,600 --> 00:05:25,520
the same time so that's the way we

00:05:24,960 --> 00:05:27,520
create

00:05:25,520 --> 00:05:29,360
even different architecture this pattern

00:05:27,520 --> 00:05:30,240
that allows us to have applications and

00:05:29,360 --> 00:05:32,639
services

00:05:30,240 --> 00:05:34,479
are able to uh response almost in in

00:05:32,639 --> 00:05:35,120
real time so instead of being polling we

00:05:34,479 --> 00:05:37,120
can

00:05:35,120 --> 00:05:38,400
actually receive events and being able

00:05:37,120 --> 00:05:41,120
to take actions

00:05:38,400 --> 00:05:42,080
uh on on those uh events and those

00:05:41,120 --> 00:05:45,600
notifications

00:05:42,080 --> 00:05:47,600
if we go to the next slide uh

00:05:45,600 --> 00:05:48,639
we can see what we are talking when we

00:05:47,600 --> 00:05:51,520
are saying events right

00:05:48,639 --> 00:05:52,720
the event is most of the times where uh

00:05:51,520 --> 00:05:54,960
associating events

00:05:52,720 --> 00:05:55,840
with the uh actual notification that

00:05:54,960 --> 00:05:58,479
it's been uh

00:05:55,840 --> 00:06:00,080
sent for from the systems right but most

00:05:58,479 --> 00:06:02,160
of the times an event is something that

00:06:00,080 --> 00:06:03,680
change and happens inside the system

00:06:02,160 --> 00:06:04,560
it's most of the times the change of the

00:06:03,680 --> 00:06:06,880
state

00:06:04,560 --> 00:06:08,639
and then that change of state or that

00:06:06,880 --> 00:06:09,759
action that has been occurred that have

00:06:08,639 --> 00:06:11,120
been occurring the system

00:06:09,759 --> 00:06:13,280
it's the one that is generating a

00:06:11,120 --> 00:06:16,240
notification or a message to

00:06:13,280 --> 00:06:17,759
uh to uh share with the rest of the

00:06:16,240 --> 00:06:20,160
companies of the architecture

00:06:17,759 --> 00:06:22,319
that this happened and and what happened

00:06:20,160 --> 00:06:25,440
right so the events most of the times

00:06:22,319 --> 00:06:27,120
even though it's uh it's um it's uh

00:06:25,440 --> 00:06:28,800
related with the notification it's what

00:06:27,120 --> 00:06:30,960
happened in in the system

00:06:28,800 --> 00:06:32,560
so that's why it's important to take a

00:06:30,960 --> 00:06:33,600
look in the different type of events

00:06:32,560 --> 00:06:35,440
that hadn't happened

00:06:33,600 --> 00:06:36,800
so we go to the next slide we can see

00:06:35,440 --> 00:06:38,000
that we have found like three different

00:06:36,800 --> 00:06:40,639
type of events

00:06:38,000 --> 00:06:41,280
the what the notification that was most

00:06:40,639 --> 00:06:44,160
of the times

00:06:41,280 --> 00:06:45,039
called the event is where you have this

00:06:44,160 --> 00:06:47,600
um

00:06:45,039 --> 00:06:48,960
you can say that you want to communicate

00:06:47,600 --> 00:06:50,880
that and that message of that

00:06:48,960 --> 00:06:53,840
notification it's immutable

00:06:50,880 --> 00:06:54,720
it's uh there is there will be no change

00:06:53,840 --> 00:06:57,440
in the system

00:06:54,720 --> 00:06:59,360
and most of the times it's just a way to

00:06:57,440 --> 00:07:00,720
notify the rest of the companies that

00:06:59,360 --> 00:07:02,960
something had occurred

00:07:00,720 --> 00:07:04,560
the second type of uh of events that we

00:07:02,960 --> 00:07:07,280
can found is the one that

00:07:04,560 --> 00:07:09,039
are actually asking or these messages or

00:07:07,280 --> 00:07:11,840
a communication that we want to have is

00:07:09,039 --> 00:07:13,360
to ask the system to do a change in the

00:07:11,840 --> 00:07:15,120
state right so what's

00:07:13,360 --> 00:07:16,560
most of the times we associate with

00:07:15,120 --> 00:07:19,199
comments when we are

00:07:16,560 --> 00:07:20,000
actually trying to do a remote call or

00:07:19,199 --> 00:07:23,360
uh or

00:07:20,000 --> 00:07:26,000
or are trying to um send in

00:07:23,360 --> 00:07:26,720
an execute uh comment to the to the

00:07:26,000 --> 00:07:28,400
system

00:07:26,720 --> 00:07:30,400
and then there's the third type of event

00:07:28,400 --> 00:07:31,120
we have found that we are usually tend

00:07:30,400 --> 00:07:34,000
to

00:07:31,120 --> 00:07:34,240
use in in this iot and edge space is the

00:07:34,000 --> 00:07:36,560
uh

00:07:34,240 --> 00:07:37,520
the queries the queries are similar to

00:07:36,560 --> 00:07:39,440
the comments but

00:07:37,520 --> 00:07:41,360
uh we don't expect changing the state we

00:07:39,440 --> 00:07:44,479
actually just want to retrieve the

00:07:41,360 --> 00:07:45,039
uh actually status of the of the system

00:07:44,479 --> 00:07:46,240
and then

00:07:45,039 --> 00:07:48,800
what is the uh the current

00:07:46,240 --> 00:07:51,280
representation so most of the times

00:07:48,800 --> 00:07:52,479
those uh those queries will just return

00:07:51,280 --> 00:07:54,000
the actual state

00:07:52,479 --> 00:07:55,599
and but still we need to have this

00:07:54,000 --> 00:07:56,720
connectivity and being able to transfer

00:07:55,599 --> 00:07:58,639
the information

00:07:56,720 --> 00:08:00,560
and that's why if we got to the next day

00:07:58,639 --> 00:08:01,840
there's the uh type of consumption

00:08:00,560 --> 00:08:03,840
patterns

00:08:01,840 --> 00:08:06,400
so when you were talking about this kind

00:08:03,840 --> 00:08:08,240
of of events and and the type of

00:08:06,400 --> 00:08:09,440
notifications that are flowing in the

00:08:08,240 --> 00:08:10,720
system

00:08:09,440 --> 00:08:12,400
we can have different type of

00:08:10,720 --> 00:08:14,400
consumption patterns for those events

00:08:12,400 --> 00:08:17,360
and for those messages

00:08:14,400 --> 00:08:17,919
and in the first time for example it's a

00:08:17,360 --> 00:08:20,319
very good

00:08:17,919 --> 00:08:22,400
case for the iot space where we're

00:08:20,319 --> 00:08:25,759
talking about the volatile events

00:08:22,400 --> 00:08:28,960
those events that can be uh

00:08:25,759 --> 00:08:30,879
then does not need persistent and

00:08:28,960 --> 00:08:32,719
that's kind of uh depends that the

00:08:30,879 --> 00:08:34,159
consumers most of the time is required

00:08:32,719 --> 00:08:37,360
to be online to be

00:08:34,159 --> 00:08:38,880
able to be processed or to be handled so

00:08:37,360 --> 00:08:40,959
what happens is when you have for

00:08:38,880 --> 00:08:41,440
example an iot device that is sensing

00:08:40,959 --> 00:08:45,120
the

00:08:41,440 --> 00:08:47,680
room temperature of uh of a room

00:08:45,120 --> 00:08:49,760
and then uh you want to get information

00:08:47,680 --> 00:08:50,320
regarding the average temperature so you

00:08:49,760 --> 00:08:53,200
can

00:08:50,320 --> 00:08:54,480
you know do some uh access or change the

00:08:53,200 --> 00:08:56,880
in a plc

00:08:54,480 --> 00:08:57,760
or perhaps just getting the information

00:08:56,880 --> 00:08:59,519
um

00:08:57,760 --> 00:09:01,279
on on analytics and being able to

00:08:59,519 --> 00:09:03,120
process that so sometimes when you are

00:09:01,279 --> 00:09:03,360
having a device that is sending perhaps

00:09:03,120 --> 00:09:06,080
the

00:09:03,360 --> 00:09:06,800
measurement every uh 5 second or 30

00:09:06,080 --> 00:09:08,480
seconds or

00:09:06,800 --> 00:09:09,920
very frequently and what you are

00:09:08,480 --> 00:09:11,920
actually interested into

00:09:09,920 --> 00:09:14,640
is just the average temperature for the

00:09:11,920 --> 00:09:17,680
last like 6 hours of 12 hours

00:09:14,640 --> 00:09:20,560
sometimes when you are having a

00:09:17,680 --> 00:09:21,600
a message that is being lost or is won't

00:09:20,560 --> 00:09:24,320
affect that

00:09:21,600 --> 00:09:25,360
much the actual result that you are

00:09:24,320 --> 00:09:27,200
waiting for

00:09:25,360 --> 00:09:29,040
the other case is where you actually

00:09:27,200 --> 00:09:30,560
need to have the other service being

00:09:29,040 --> 00:09:32,640
available at the same time

00:09:30,560 --> 00:09:33,760
and if the service is not available then

00:09:32,640 --> 00:09:37,360
perhaps the

00:09:33,760 --> 00:09:37,360
messenger this event will be

00:09:39,200 --> 00:09:43,360
do that can be discarded because it

00:09:41,519 --> 00:09:44,240
won't be able to be attended by by

00:09:43,360 --> 00:09:46,080
anyone

00:09:44,240 --> 00:09:48,720
so that's the kind of events that you

00:09:46,080 --> 00:09:50,480
can find in the volatile space

00:09:48,720 --> 00:09:52,560
then there's the second type of events

00:09:50,480 --> 00:09:53,839
the well we call the durable events the

00:09:52,560 --> 00:09:56,080
irritable events

00:09:53,839 --> 00:09:58,000
it's what most of the time we found in

00:09:56,080 --> 00:10:00,399
traditional store and forward brokers of

00:09:58,000 --> 00:10:01,200
the message oriented middleware where we

00:10:00,399 --> 00:10:03,279
have

00:10:01,200 --> 00:10:05,120
actual uh component in the system that

00:10:03,279 --> 00:10:07,360
it's taking ownership of the

00:10:05,120 --> 00:10:09,279
of the events and then we'll we'll keep

00:10:07,360 --> 00:10:10,399
those events we'll make them persistent

00:10:09,279 --> 00:10:13,839
if required

00:10:10,399 --> 00:10:15,519
until the uh actual um destination it's

00:10:13,839 --> 00:10:15,920
available and it's been able to deliver

00:10:15,519 --> 00:10:18,560
those

00:10:15,920 --> 00:10:19,120
uh those events to that destination or

00:10:18,560 --> 00:10:20,720
to the

00:10:19,120 --> 00:10:22,800
actual consumer that is interested in

00:10:20,720 --> 00:10:26,640
those events most of the times

00:10:22,800 --> 00:10:29,680
is a traditional gms type of approach

00:10:26,640 --> 00:10:30,399
for broker when you will register as a

00:10:29,680 --> 00:10:33,040
consumer

00:10:30,399 --> 00:10:35,120
and say i'm interested in this queue or

00:10:33,040 --> 00:10:38,240
this topic to listen for the events

00:10:35,120 --> 00:10:39,680
and then the broker will take the

00:10:38,240 --> 00:10:42,079
ownership of that

00:10:39,680 --> 00:10:44,160
subscription or that consumer and then

00:10:42,079 --> 00:10:47,200
we'll be able to deliver the messages

00:10:44,160 --> 00:10:48,959
uh to those consumers uh until they are

00:10:47,200 --> 00:10:50,720
able to consume those uh those events

00:10:48,959 --> 00:10:53,839
and then it just discards

00:10:50,720 --> 00:10:56,079
those events and that's why uh the last

00:10:53,839 --> 00:10:58,959
point of discarding events uh

00:10:56,079 --> 00:11:00,320
make the uh the creation or lead to the

00:10:58,959 --> 00:11:01,920
creation of the third type of

00:11:00,320 --> 00:11:04,880
consumption buyers

00:11:01,920 --> 00:11:06,640
what we call the replayable events in

00:11:04,880 --> 00:11:07,360
the case of replayable events it's

00:11:06,640 --> 00:11:09,680
actually a

00:11:07,360 --> 00:11:11,200
sub group of the durable events when we

00:11:09,680 --> 00:11:14,320
still have a broker that is

00:11:11,200 --> 00:11:18,160
taking ownership of the messages but one

00:11:14,320 --> 00:11:21,279
specific change is where now the broker

00:11:18,160 --> 00:11:24,079
it's able to store those messages for

00:11:21,279 --> 00:11:25,680
uh determinate uh time that it's not

00:11:24,079 --> 00:11:28,079
associated with the uh

00:11:25,680 --> 00:11:29,519
consumers or the uh or the different

00:11:28,079 --> 00:11:31,440
clients that are listening to those

00:11:29,519 --> 00:11:34,079
events or to those messages

00:11:31,440 --> 00:11:35,600
so what does it mean that the uh the uh

00:11:34,079 --> 00:11:37,600
broker takes ownership of

00:11:35,600 --> 00:11:38,720
of the events and they can then keep

00:11:37,600 --> 00:11:40,800
those events

00:11:38,720 --> 00:11:42,560
and then allow the consumers to be able

00:11:40,800 --> 00:11:44,399
to get and then

00:11:42,560 --> 00:11:45,760
ask for events that might have been

00:11:44,399 --> 00:11:48,000
occurred in the past

00:11:45,760 --> 00:11:50,160
or even that have been occurred even

00:11:48,000 --> 00:11:51,920
before the consumer has been created has

00:11:50,160 --> 00:11:55,360
been subscribed to the uh

00:11:51,920 --> 00:11:57,440
with a broker and it's not only that

00:11:55,360 --> 00:11:59,040
that capability that has uh that is

00:11:57,440 --> 00:12:02,480
available and replayable but

00:11:59,040 --> 00:12:05,760
all those consumers that can move um

00:12:02,480 --> 00:12:07,760
forward and backward uh reading those uh

00:12:05,760 --> 00:12:09,760
streams of events so that means that

00:12:07,760 --> 00:12:10,959
it's not able to just read from the past

00:12:09,760 --> 00:12:12,880
but if it needs

00:12:10,959 --> 00:12:14,639
to they can re-read the messages that

00:12:12,880 --> 00:12:16,880
they have already received

00:12:14,639 --> 00:12:18,000
and this opens a whole new set of

00:12:16,880 --> 00:12:20,560
capabilities

00:12:18,000 --> 00:12:21,920
for applications to be able to use those

00:12:20,560 --> 00:12:24,560
benefits

00:12:21,920 --> 00:12:25,839
to be able to uh to read the events that

00:12:24,560 --> 00:12:26,639
are happening and flowing through the

00:12:25,839 --> 00:12:28,240
system

00:12:26,639 --> 00:12:30,160
obviously there's some drawbacks for

00:12:28,240 --> 00:12:33,279
those kind of approaches but well

00:12:30,160 --> 00:12:34,000
it's a a different capability available

00:12:33,279 --> 00:12:35,920
now

00:12:34,000 --> 00:12:37,120
so we go to the next slide we can talk

00:12:35,920 --> 00:12:40,000
then

00:12:37,120 --> 00:12:41,760
about the different projects on the uh

00:12:40,000 --> 00:12:43,680
on the apache landscape that

00:12:41,760 --> 00:12:46,160
are addressing this kind of consumption

00:12:43,680 --> 00:12:47,440
right we we go over what is even driven

00:12:46,160 --> 00:12:49,920
architecture important

00:12:47,440 --> 00:12:51,040
and then we have talked about why is the

00:12:49,920 --> 00:12:52,800
uh the uh

00:12:51,040 --> 00:12:54,399
the different type of consumptions and

00:12:52,800 --> 00:12:56,880
for that obviously we

00:12:54,399 --> 00:12:58,399
certainly need a specific software so we

00:12:56,880 --> 00:12:59,360
go to the next slide we can see what the

00:12:58,399 --> 00:13:00,959
first uh

00:12:59,360 --> 00:13:02,800
the first project from the patch

00:13:00,959 --> 00:13:05,680
foundation that addresses

00:13:02,800 --> 00:13:07,680
mainly the uh uh through playable events

00:13:05,680 --> 00:13:10,399
and this one it's apache kafka

00:13:07,680 --> 00:13:10,720
so apache kafka is this um project that

00:13:10,399 --> 00:13:13,200
was

00:13:10,720 --> 00:13:14,560
uh created and designed in linkedin that

00:13:13,200 --> 00:13:16,399
has been

00:13:14,560 --> 00:13:18,800
donated to the apache foundation and

00:13:16,399 --> 00:13:22,079
it's uh very well

00:13:18,800 --> 00:13:25,120
engineered to handle replayability it uh

00:13:22,079 --> 00:13:27,519
also indeed not also just deals with

00:13:25,120 --> 00:13:28,800
repliability but so it tries to address

00:13:27,519 --> 00:13:31,920
uh scalability

00:13:28,800 --> 00:13:34,880
and and and distribution

00:13:31,920 --> 00:13:35,279
and of this of these components so it's

00:13:34,880 --> 00:13:37,920
uh

00:13:35,279 --> 00:13:38,399
very well designed for handle uh streams

00:13:37,920 --> 00:13:40,320
it's

00:13:38,399 --> 00:13:41,440
this uh distributed commit log that

00:13:40,320 --> 00:13:43,760
allows us to have

00:13:41,440 --> 00:13:46,079
a stream processing applications and

00:13:43,760 --> 00:13:48,480
been also able to handle microservices

00:13:46,079 --> 00:13:50,000
in in a large scale

00:13:48,480 --> 00:13:51,920
we go to the next slide we can see that

00:13:50,000 --> 00:13:54,320
uh apache apple is not just

00:13:51,920 --> 00:13:55,440
the core broker that we can have in the

00:13:54,320 --> 00:13:58,160
in the project

00:13:55,440 --> 00:13:59,279
and with the producer apis consumer apis

00:13:58,160 --> 00:14:01,440
admin apis

00:13:59,279 --> 00:14:02,959
and management tools but it's also it's

00:14:01,440 --> 00:14:05,360
growing in and it's

00:14:02,959 --> 00:14:06,720
even having a whole ecosystem that is

00:14:05,360 --> 00:14:09,120
getting all the benefits from

00:14:06,720 --> 00:14:10,399
from its design like for example when

00:14:09,120 --> 00:14:13,120
having a

00:14:10,399 --> 00:14:14,320
connect api or uh for doing the

00:14:13,120 --> 00:14:17,040
connectivity between

00:14:14,320 --> 00:14:18,079
uh different systems and and kafka as

00:14:17,040 --> 00:14:20,800
the broker

00:14:18,079 --> 00:14:22,079
uh but it also has a streams api that

00:14:20,800 --> 00:14:24,560
allows you to

00:14:22,079 --> 00:14:27,120
do this processing with a very simple

00:14:24,560 --> 00:14:30,079
apis to be able to

00:14:27,120 --> 00:14:32,079
uh to access the uh the broker the

00:14:30,079 --> 00:14:33,839
different topics that are available in

00:14:32,079 --> 00:14:35,600
in in the system and they've been able

00:14:33,839 --> 00:14:39,920
to consume those and well

00:14:35,600 --> 00:14:40,880
other uh two like mirror motion to other

00:14:39,920 --> 00:14:43,279
clusters

00:14:40,880 --> 00:14:44,399
and in the case of iot and an edge

00:14:43,279 --> 00:14:47,839
there's also

00:14:44,399 --> 00:14:48,959
components for clients that are not

00:14:47,839 --> 00:14:52,000
available to

00:14:48,959 --> 00:14:53,040
uh use the the kafka clients because if

00:14:52,000 --> 00:14:57,440
kafka is using a

00:14:53,040 --> 00:14:59,839
binary protocol they can you can add

00:14:57,440 --> 00:15:01,519
or throw components like the uh res

00:14:59,839 --> 00:15:04,000
proxy or http bridge

00:15:01,519 --> 00:15:04,720
to be able to then uh access the uh the

00:15:04,000 --> 00:15:08,399
components

00:15:04,720 --> 00:15:10,079
from an http client

00:15:08,399 --> 00:15:11,519
this is the first one if we go to the

00:15:10,079 --> 00:15:14,240
next slide we can see

00:15:11,519 --> 00:15:16,320
the other project other perk that it's

00:15:14,240 --> 00:15:17,279
specialized for example in the political

00:15:16,320 --> 00:15:19,279
events

00:15:17,279 --> 00:15:21,120
so under the apache qubit project

00:15:19,279 --> 00:15:22,079
there's this component the dispatch

00:15:21,120 --> 00:15:26,000
router

00:15:22,079 --> 00:15:29,199
that it's a broker list uh

00:15:26,000 --> 00:15:31,519
mqp native message router that

00:15:29,199 --> 00:15:33,279
specializes in uh delivering messages

00:15:31,519 --> 00:15:36,399
over a wide area network

00:15:33,279 --> 00:15:37,120
or without uh or creating a very complex

00:15:36,399 --> 00:15:40,959
apologies

00:15:37,120 --> 00:15:44,000
uh using a network focused approach

00:15:40,959 --> 00:15:45,440
so a batch of cupid project allows you

00:15:44,000 --> 00:15:47,440
to create uh this

00:15:45,440 --> 00:15:49,600
distributed network that has a

00:15:47,440 --> 00:15:51,199
distributor that has a distributed

00:15:49,600 --> 00:15:52,480
embedded control plane that allows you

00:15:51,199 --> 00:15:55,839
to

00:15:52,480 --> 00:15:57,440
be able to deploy the routers in

00:15:55,839 --> 00:16:00,079
in different locations and then being

00:15:57,440 --> 00:16:02,560
able to connect them in a secure way

00:16:00,079 --> 00:16:04,560
and then being able to transfer and and

00:16:02,560 --> 00:16:06,000
connect events and connections through

00:16:04,560 --> 00:16:08,959
those routers

00:16:06,000 --> 00:16:11,040
so it can uh be used in a broker-less

00:16:08,959 --> 00:16:11,440
manner just using the router to deliver

00:16:11,040 --> 00:16:14,639
the uh

00:16:11,440 --> 00:16:16,399
the messages or it can be used uh in

00:16:14,639 --> 00:16:19,199
conjunction with another broker

00:16:16,399 --> 00:16:20,800
that also can speaks mqp or has an nqp

00:16:19,199 --> 00:16:22,880
adapter to be able to then

00:16:20,800 --> 00:16:23,920
have a buffer where you can do

00:16:22,880 --> 00:16:26,000
persistence of

00:16:23,920 --> 00:16:28,240
of events and then being able to deliver

00:16:26,000 --> 00:16:29,519
those and one of the benefits of this

00:16:28,240 --> 00:16:31,199
kind of approach is that

00:16:29,519 --> 00:16:33,040
the dispatch router allows you to have

00:16:31,199 --> 00:16:35,199
communication directly between

00:16:33,040 --> 00:16:36,160
consumers one-to-one with what they call

00:16:35,199 --> 00:16:38,959
the direct links

00:16:36,160 --> 00:16:40,720
or you can also have other uh

00:16:38,959 --> 00:16:41,680
distribution patterns or destination

00:16:40,720 --> 00:16:43,680
patterns like

00:16:41,680 --> 00:16:45,839
one too many what we call traditional

00:16:43,680 --> 00:16:48,160
broadcast or or multicast

00:16:45,839 --> 00:16:49,279
so it's a very way it's a very good way

00:16:48,160 --> 00:16:50,880
to have this

00:16:49,279 --> 00:16:52,959
high performance direct messaging

00:16:50,880 --> 00:16:55,040
approach

00:16:52,959 --> 00:16:57,120
the next element is the traditional

00:16:55,040 --> 00:17:00,160
broker that we can find in uh

00:16:57,120 --> 00:17:02,240
in projects like for example active mq

00:17:00,160 --> 00:17:03,360
in the case of activemq classic or

00:17:02,240 --> 00:17:06,160
archimis

00:17:03,360 --> 00:17:07,520
we have uh this fully featured message

00:17:06,160 --> 00:17:11,199
oriented middleware

00:17:07,520 --> 00:17:12,240
uh broker it's um it's uh in the case of

00:17:11,199 --> 00:17:14,720
active queue it's an

00:17:12,240 --> 00:17:16,640
a java implementation with a very high

00:17:14,720 --> 00:17:19,199
performance broker that

00:17:16,640 --> 00:17:20,400
has a very high throughput with the

00:17:19,199 --> 00:17:22,959
different implementation

00:17:20,400 --> 00:17:23,600
it's a flexible and you can use it

00:17:22,959 --> 00:17:25,439
either

00:17:23,600 --> 00:17:27,360
using the journal or using the database

00:17:25,439 --> 00:17:29,679
we want to the persistence

00:17:27,360 --> 00:17:32,240
it allows you to have a different type

00:17:29,679 --> 00:17:34,240
of topologies to deploy where you can

00:17:32,240 --> 00:17:35,440
have high availability using share

00:17:34,240 --> 00:17:39,120
storage or or

00:17:35,440 --> 00:17:42,000
or using just a network replication

00:17:39,120 --> 00:17:44,400
and the uh one of the the interesting

00:17:42,000 --> 00:17:45,440
things about the activemq broker in the

00:17:44,400 --> 00:17:47,679
case of our arteries that

00:17:45,440 --> 00:17:48,559
it also has a lot of set of protocols

00:17:47,679 --> 00:17:51,840
available

00:17:48,559 --> 00:17:52,720
out of the box uh to uh to connect to

00:17:51,840 --> 00:17:56,080
these brokers

00:17:52,720 --> 00:17:59,280
right you can use uh mqp like and then

00:17:56,080 --> 00:18:01,760
have mqp clients or or you can do

00:17:59,280 --> 00:18:02,559
keep it uh this much router to connect

00:18:01,760 --> 00:18:06,799
this or

00:18:02,559 --> 00:18:10,480
we can use mqb qtt or stop or the

00:18:06,799 --> 00:18:13,200
um of the property of the or the proper

00:18:10,480 --> 00:18:14,000
um open wire hard q protocols that are

00:18:13,200 --> 00:18:16,400
also compatible

00:18:14,000 --> 00:18:18,160
with the with this broker and for all

00:18:16,400 --> 00:18:19,280
those companies out those connectors all

00:18:18,160 --> 00:18:22,320
those protocols there's

00:18:19,280 --> 00:18:22,720
plenty of of uh clients that you can use

00:18:22,320 --> 00:18:24,480
uh

00:18:22,720 --> 00:18:26,080
in different languages to connect to

00:18:24,480 --> 00:18:27,520
these kind of brokers

00:18:26,080 --> 00:18:29,280
have been in the in the market for a

00:18:27,520 --> 00:18:30,960
long time and this is a very old

00:18:29,280 --> 00:18:33,520
unstable project

00:18:30,960 --> 00:18:35,840
we can go to the next slide we can then

00:18:33,520 --> 00:18:36,559
see how we can relate for example these

00:18:35,840 --> 00:18:39,600
three

00:18:36,559 --> 00:18:42,400
um quick projects into the

00:18:39,600 --> 00:18:43,039
consumption patterns as we can see most

00:18:42,400 --> 00:18:45,039
of those

00:18:43,039 --> 00:18:46,480
of those projects can work together or

00:18:45,039 --> 00:18:48,559
one can work alone

00:18:46,480 --> 00:18:50,240
and then being able to address uh the

00:18:48,559 --> 00:18:52,400
different consumption patterns

00:18:50,240 --> 00:18:54,320
so in this table we try to summarize

00:18:52,400 --> 00:18:56,400
those kind of interactions so

00:18:54,320 --> 00:18:58,240
you will see that there's uh projects

00:18:56,400 --> 00:19:00,240
and components that are more

00:18:58,240 --> 00:19:01,760
they're a best fit for different

00:19:00,240 --> 00:19:03,520
consumption patterns

00:19:01,760 --> 00:19:05,520
and there are some consumption patterns

00:19:03,520 --> 00:19:08,480
that perhaps they are not suitable or

00:19:05,520 --> 00:19:10,640
not the best way to implement those

00:19:08,480 --> 00:19:10,960
using these components so in the case of

00:19:10,640 --> 00:19:13,360
the

00:19:10,960 --> 00:19:15,360
traditional brokers they're very good to

00:19:13,360 --> 00:19:18,080
do uh durable events

00:19:15,360 --> 00:19:19,360
and and and it's the the main their main

00:19:18,080 --> 00:19:21,919
focus but however

00:19:19,360 --> 00:19:22,880
it's sometimes complicated to implement

00:19:21,919 --> 00:19:25,280
uh replayable

00:19:22,880 --> 00:19:26,720
uh events consumption patterns with this

00:19:25,280 --> 00:19:29,200
kind of solutions

00:19:26,720 --> 00:19:29,840
in the case of the uh dispatch router

00:19:29,200 --> 00:19:32,240
for example

00:19:29,840 --> 00:19:34,320
it's very good to have a common and

00:19:32,240 --> 00:19:35,200
query type of events also volatile

00:19:34,320 --> 00:19:39,840
events

00:19:35,200 --> 00:19:39,840
but it's uh because it's

00:19:40,160 --> 00:19:43,840
implement patterns like durability but

00:19:41,760 --> 00:19:45,840
you will need certainly another company

00:19:43,840 --> 00:19:49,760
to be able to store the messages

00:19:45,840 --> 00:19:51,600
and in the case of kafka you are able to

00:19:49,760 --> 00:19:53,840
have a very good fit for replayable

00:19:51,600 --> 00:19:56,320
events or durable events

00:19:53,840 --> 00:19:56,880
but if you need something like for

00:19:56,320 --> 00:20:00,400
example

00:19:56,880 --> 00:20:02,080
a distributed transaction or um

00:20:00,400 --> 00:20:03,520
do you want to manage your events or

00:20:02,080 --> 00:20:07,200
your communication and

00:20:03,520 --> 00:20:10,400
and uh like um doing filtering

00:20:07,200 --> 00:20:12,559
or doing uh sometimes just uh

00:20:10,400 --> 00:20:14,000
content based routing or adding just

00:20:12,559 --> 00:20:16,159
additional protocols

00:20:14,000 --> 00:20:17,760
well it's not it's not the best suit for

00:20:16,159 --> 00:20:20,400
for this kind of solution so

00:20:17,760 --> 00:20:22,320
you can see that there's plenty of

00:20:20,400 --> 00:20:23,600
projects available under the apache

00:20:22,320 --> 00:20:25,600
ecosystem to be able to

00:20:23,600 --> 00:20:27,120
target your different needs and

00:20:25,600 --> 00:20:30,720
requirements in the event

00:20:27,120 --> 00:20:32,240
space then

00:20:30,720 --> 00:20:34,480
can you tell us a little bit more about

00:20:32,240 --> 00:20:36,159
the use cases that then we can

00:20:34,480 --> 00:20:37,840
address the target with the these

00:20:36,159 --> 00:20:40,480
components absolutely so

00:20:37,840 --> 00:20:41,200
now we have the basis we we know what we

00:20:40,480 --> 00:20:43,360
can do with

00:20:41,200 --> 00:20:45,280
we went to even architectures and we

00:20:43,360 --> 00:20:48,320
know the basics of the

00:20:45,280 --> 00:20:51,840
of of the of the uh basic

00:20:48,320 --> 00:20:53,039
uh foundation so to say components that

00:20:51,840 --> 00:20:55,679
we can use but

00:20:53,039 --> 00:20:57,360
let's now focus on a couple of use cases

00:20:55,679 --> 00:20:59,679
and challenges that we need to

00:20:57,360 --> 00:21:01,280
solve in in the iot and edge computing

00:20:59,679 --> 00:21:04,000
use cases and and see

00:21:01,280 --> 00:21:04,559
how we can actually apply some of these

00:21:04,000 --> 00:21:07,679
uh

00:21:04,559 --> 00:21:11,200
techniques and projects to them so

00:21:07,679 --> 00:21:11,679
for example first thing we can talk

00:21:11,200 --> 00:21:14,799
about

00:21:11,679 --> 00:21:16,080
is is edge networking and and what are

00:21:14,799 --> 00:21:19,200
we trying to do so

00:21:16,080 --> 00:21:22,480
so here in in a traditional uh

00:21:19,200 --> 00:21:23,120
uh in a typical uh edge computing use

00:21:22,480 --> 00:21:26,320
case

00:21:23,120 --> 00:21:26,960
you have a lot of uh a lot of micro

00:21:26,320 --> 00:21:29,440
services

00:21:26,960 --> 00:21:31,280
running in a lot of different uh

00:21:29,440 --> 00:21:34,640
different uh

00:21:31,280 --> 00:21:37,679
networks right so some of these will be

00:21:34,640 --> 00:21:40,320
in the cloud some will be in the local

00:21:37,679 --> 00:21:40,880
you know office building some will be at

00:21:40,320 --> 00:21:43,360
your

00:21:40,880 --> 00:21:44,159
telco providers and there's no way we

00:21:43,360 --> 00:21:47,039
can address

00:21:44,159 --> 00:21:48,080
these these services uh these services

00:21:47,039 --> 00:21:50,720
that directly

00:21:48,080 --> 00:21:51,120
as we are when they're running all in

00:21:50,720 --> 00:21:55,440
the

00:21:51,120 --> 00:21:58,880
you know in a in a centralized uh cloud

00:21:55,440 --> 00:22:01,280
cloud computing environment right so

00:21:58,880 --> 00:22:01,919
the first solution people apply to this

00:22:01,280 --> 00:22:04,400
problem is

00:22:01,919 --> 00:22:05,360
is to deal with this problem on the

00:22:04,400 --> 00:22:08,799
networking

00:22:05,360 --> 00:22:12,240
level right so we don't uh let's

00:22:08,799 --> 00:22:13,360
create all the vpns to all the all the

00:22:12,240 --> 00:22:15,600
edge locations so

00:22:13,360 --> 00:22:16,480
so we can we can punch holes through the

00:22:15,600 --> 00:22:19,919
firewalls and

00:22:16,480 --> 00:22:22,240
and let people uh access physically uh

00:22:19,919 --> 00:22:24,400
these uh these uh private networks and

00:22:22,240 --> 00:22:27,200
then let's add uh

00:22:24,400 --> 00:22:28,480
net layers to to be able to to translate

00:22:27,200 --> 00:22:31,760
addresses between them

00:22:28,480 --> 00:22:32,080
then let's uh do everything using the

00:22:31,760 --> 00:22:35,679
the

00:22:32,080 --> 00:22:39,840
dns layer so so we can actually

00:22:35,679 --> 00:22:40,799
uh address uh uh address our services

00:22:39,840 --> 00:22:43,679
properly

00:22:40,799 --> 00:22:44,799
but what if we rethink this problem a

00:22:43,679 --> 00:22:47,679
little bit and try

00:22:44,799 --> 00:22:48,000
try to solve it on on on a different way

00:22:47,679 --> 00:22:50,400
uh

00:22:48,000 --> 00:22:51,440
as hugo explained in the previous slide

00:22:50,400 --> 00:22:55,200
so the qp this

00:22:51,440 --> 00:22:56,799
dispatch router is not a a typical

00:22:55,200 --> 00:22:59,360
broker messaging component

00:22:56,799 --> 00:23:00,080
that we always associate messaging with

00:22:59,360 --> 00:23:02,159
right

00:23:00,080 --> 00:23:04,559
it's a it's a it's a it's a router right

00:23:02,159 --> 00:23:07,120
so and it works in a similar principle

00:23:04,559 --> 00:23:08,559
as a ip router but on a different level

00:23:07,120 --> 00:23:11,840
on on the on the

00:23:08,559 --> 00:23:12,720
layer seven and on on the mqp level

00:23:11,840 --> 00:23:15,120
right

00:23:12,720 --> 00:23:17,280
so so maybe we can we can try to solo

00:23:15,120 --> 00:23:19,600
all this problem on on that level

00:23:17,280 --> 00:23:20,400
and this is this diagram on this slide

00:23:19,600 --> 00:23:24,080
actually

00:23:20,400 --> 00:23:27,120
tries to to to show this so basically

00:23:24,080 --> 00:23:30,720
here we have a a cloud

00:23:27,120 --> 00:23:33,280
and we have two two edge nodes and

00:23:30,720 --> 00:23:33,840
what we what we don't want to do is to

00:23:33,280 --> 00:23:36,640
actually

00:23:33,840 --> 00:23:36,960
dial in to the edge we always want for

00:23:36,640 --> 00:23:39,919
for

00:23:36,960 --> 00:23:40,559
our edges to to you know call out to the

00:23:39,919 --> 00:23:43,520
cloud

00:23:40,559 --> 00:23:45,440
uh on a physical network layer right and

00:23:43,520 --> 00:23:46,320
we can do that so so we can set up set

00:23:45,440 --> 00:23:49,919
up

00:23:46,320 --> 00:23:51,279
our router mesh that basically does that

00:23:49,919 --> 00:23:53,679
so have a one center

00:23:51,279 --> 00:23:54,960
router in the cloud and and uh and and

00:23:53,679 --> 00:23:57,520
the dispatch router

00:23:54,960 --> 00:23:58,559
in each of the edge nodes and then the

00:23:57,520 --> 00:24:01,279
the edge routers

00:23:58,559 --> 00:24:03,120
will call in and and establish establish

00:24:01,279 --> 00:24:03,679
a physical tcp connection to the cloud

00:24:03,120 --> 00:24:06,080
right

00:24:03,679 --> 00:24:07,360
so we don't need the vpn anymore because

00:24:06,080 --> 00:24:10,240
nobody needs to dial in

00:24:07,360 --> 00:24:11,360
uh to the edge side anymore but once we

00:24:10,240 --> 00:24:14,480
have this uh

00:24:11,360 --> 00:24:18,159
this uh network mesh uh established

00:24:14,480 --> 00:24:19,039
now it's it's we have basically an over

00:24:18,159 --> 00:24:22,799
layer

00:24:19,039 --> 00:24:26,000
overlaid layer 7 network uh established

00:24:22,799 --> 00:24:29,120
and our services can communicate uh

00:24:26,000 --> 00:24:31,520
so so the the service a can

00:24:29,120 --> 00:24:32,240
can call out service c without even

00:24:31,520 --> 00:24:35,520
knowing

00:24:32,240 --> 00:24:38,000
its location right so so it will all be

00:24:35,520 --> 00:24:39,440
uh transparently done through the

00:24:38,000 --> 00:24:42,559
through the amqp

00:24:39,440 --> 00:24:44,159
overlay network and and using using the

00:24:42,559 --> 00:24:47,440
the dispatch router so

00:24:44,159 --> 00:24:49,840
even if if our uh so to say uh

00:24:47,440 --> 00:24:51,120
uh networking connections are one way

00:24:49,840 --> 00:24:53,520
from the edge to the cloud

00:24:51,120 --> 00:24:54,720
once it's established we can do we can

00:24:53,520 --> 00:24:58,000
do whatever we want

00:24:54,720 --> 00:24:59,840
and what else we can do is that we can

00:24:58,000 --> 00:25:01,200
do actually addressing on the letter

00:24:59,840 --> 00:25:03,760
seven so we can address

00:25:01,200 --> 00:25:05,039
the services by their service names for

00:25:03,760 --> 00:25:08,240
example and not

00:25:05,039 --> 00:25:11,039
trying to to resolve uh host names

00:25:08,240 --> 00:25:11,520
and and uh and things like that in order

00:25:11,039 --> 00:25:14,640
to

00:25:11,520 --> 00:25:15,919
to reach out to our services but do do

00:25:14,640 --> 00:25:18,640
it more on the

00:25:15,919 --> 00:25:19,200
on the on on the on the application

00:25:18,640 --> 00:25:21,679
level

00:25:19,200 --> 00:25:23,600
do security on the application level do

00:25:21,679 --> 00:25:26,159
monitoring you know observable

00:25:23,600 --> 00:25:27,520
observability on the on the application

00:25:26,159 --> 00:25:30,559
level as well

00:25:27,520 --> 00:25:35,440
so to actually do this

00:25:30,559 --> 00:25:38,480
uh uh red hit started a scupper project

00:25:35,440 --> 00:25:40,080
which is which is an idea is to use a

00:25:38,480 --> 00:25:43,039
copy dispatch router

00:25:40,080 --> 00:25:43,600
and and try to to to apply it to to this

00:25:43,039 --> 00:25:46,400
domain

00:25:43,600 --> 00:25:47,440
so so basically uh provide all the

00:25:46,400 --> 00:25:50,640
tooling we need to

00:25:47,440 --> 00:25:52,880
to actually uh provide these

00:25:50,640 --> 00:25:54,080
router meshes right and and and

00:25:52,880 --> 00:25:56,400
establish

00:25:54,080 --> 00:25:57,520
connections between them and then

00:25:56,400 --> 00:26:00,640
provide a lot of

00:25:57,520 --> 00:26:02,799
a lot of proxies to say so that that we

00:26:00,640 --> 00:26:06,000
can expose our services from different

00:26:02,799 --> 00:26:07,360
environments uh and environments over

00:26:06,000 --> 00:26:10,720
over this network

00:26:07,360 --> 00:26:11,840
so if you take uh diagram so kubernetes

00:26:10,720 --> 00:26:14,240
is is a

00:26:11,840 --> 00:26:15,200
is a poster trial for this so so you

00:26:14,240 --> 00:26:16,799
know

00:26:15,200 --> 00:26:18,559
we can always talk about edge computing

00:26:16,799 --> 00:26:21,039
but but we can talk about uh

00:26:18,559 --> 00:26:22,480
uh multi multi-hybrid cloud environments

00:26:21,039 --> 00:26:25,279
as well because

00:26:22,480 --> 00:26:26,799
those are in in some use cases

00:26:25,279 --> 00:26:29,600
interchangeable terms right

00:26:26,799 --> 00:26:30,640
so if you have a multiple uh kubernetes

00:26:29,600 --> 00:26:34,240
clusters

00:26:30,640 --> 00:26:37,200
we can use copper to easily uh provide

00:26:34,240 --> 00:26:38,159
uh using the the custom resource

00:26:37,200 --> 00:26:41,760
definitions and

00:26:38,159 --> 00:26:45,120
and and easily create these uh this uh

00:26:41,760 --> 00:26:47,360
mqp network uh crossing overlaying

00:26:45,120 --> 00:26:50,240
multiple multiple cross clusters

00:26:47,360 --> 00:26:52,159
and then uh what scapper does is is that

00:26:50,240 --> 00:26:55,039
actually it can expose

00:26:52,159 --> 00:26:55,919
a service the kubernetes service uh

00:26:55,039 --> 00:26:58,880
defined

00:26:55,919 --> 00:26:59,760
in in one name space in one cluster

00:26:58,880 --> 00:27:02,799
showing up

00:26:59,760 --> 00:27:04,320
logically virtually basically in in in

00:27:02,799 --> 00:27:06,559
other kubernetes cluster

00:27:04,320 --> 00:27:07,600
what will happen underneath is that

00:27:06,559 --> 00:27:10,559
scapper

00:27:07,600 --> 00:27:11,200
provides also a lot of uh a lot of

00:27:10,559 --> 00:27:13,760
proxies

00:27:11,200 --> 00:27:16,480
for different different protocols so

00:27:13,760 --> 00:27:20,159
that for example your http service

00:27:16,480 --> 00:27:22,480
from from one cluster will show up as

00:27:20,159 --> 00:27:23,200
a http service in another cluster and

00:27:22,480 --> 00:27:26,159
when someone

00:27:23,200 --> 00:27:26,559
calls it that http service the proxy

00:27:26,159 --> 00:27:30,240
will

00:27:26,559 --> 00:27:31,279
get the http request uh put it into the

00:27:30,240 --> 00:27:34,159
mqp message

00:27:31,279 --> 00:27:35,200
send it over over the the router network

00:27:34,159 --> 00:27:39,120
find appropriate

00:27:35,200 --> 00:27:42,480
uh uh consumer pro of that service right

00:27:39,120 --> 00:27:44,799
execute that service and do the same uh

00:27:42,480 --> 00:27:46,159
on the router back and and get the

00:27:44,799 --> 00:27:49,360
response back to the

00:27:46,159 --> 00:27:52,399
original original color so

00:27:49,360 --> 00:27:54,240
basically we can say see that that you

00:27:52,399 --> 00:27:57,360
know in this kind of use cases

00:27:54,240 --> 00:27:59,600
copper allows us a lot of

00:27:57,360 --> 00:28:00,880
a lot of operational ease so there's no

00:27:59,600 --> 00:28:03,279
need to

00:28:00,880 --> 00:28:05,120
so it's it's very easy to to to deploy

00:28:03,279 --> 00:28:07,679
it in a multi-cluster network

00:28:05,120 --> 00:28:08,559
no need for advanced networking so uh

00:28:07,679 --> 00:28:11,039
vpns

00:28:08,559 --> 00:28:12,559
and those kind of things there's not

00:28:11,039 --> 00:28:14,720
even no need for

00:28:12,559 --> 00:28:15,600
elevated privileges on the cluster

00:28:14,720 --> 00:28:19,279
because everything

00:28:15,600 --> 00:28:21,600
is on the on on the application

00:28:19,279 --> 00:28:22,320
of application level and we can we can

00:28:21,600 --> 00:28:24,240
have a

00:28:22,320 --> 00:28:25,440
we can have a redundant topology because

00:28:24,240 --> 00:28:29,279
copy dispatch routers

00:28:25,440 --> 00:28:30,799
provides provides a way to to provide a

00:28:29,279 --> 00:28:34,799
multiple routes between

00:28:30,799 --> 00:28:34,799
uh between them

00:28:34,960 --> 00:28:38,000
that's one use case for for for a

00:28:37,279 --> 00:28:41,279
typical

00:28:38,000 --> 00:28:43,840
uh uh edge computing

00:28:41,279 --> 00:28:45,360
uh we can also talk about how these

00:28:43,840 --> 00:28:47,600
apache projects play a role

00:28:45,360 --> 00:28:49,279
in in solving the other problem this is

00:28:47,600 --> 00:28:52,960
the this is the pure

00:28:49,279 --> 00:28:56,080
uh iot use case uh trying to connect uh

00:28:52,960 --> 00:28:59,279
devices directly to the to the cloud

00:28:56,080 --> 00:29:00,080
and eclipse horn project is providing uh

00:28:59,279 --> 00:29:02,960
uh

00:29:00,080 --> 00:29:04,000
that kind of system uh something what

00:29:02,960 --> 00:29:06,880
what we can call

00:29:04,000 --> 00:29:07,200
an iot cloud gateway and the idea is

00:29:06,880 --> 00:29:09,360
that

00:29:07,200 --> 00:29:10,320
uh you know you're all here because

00:29:09,360 --> 00:29:12,720
you're in a in

00:29:10,320 --> 00:29:14,080
iot sessions so if you if you play with

00:29:12,720 --> 00:29:16,720
iot devices

00:29:14,080 --> 00:29:19,039
at all you you know that on the field

00:29:16,720 --> 00:29:20,880
side of of the iot devices that there's

00:29:19,039 --> 00:29:21,919
a zoo there and there's a lot of

00:29:20,880 --> 00:29:24,399
different

00:29:21,919 --> 00:29:25,679
protocols a lot of different ways to use

00:29:24,399 --> 00:29:28,640
those protocols

00:29:25,679 --> 00:29:29,120
so the idea of our iot gateway is to

00:29:28,640 --> 00:29:31,600
provide

00:29:29,120 --> 00:29:32,640
a uniform access of all those different

00:29:31,600 --> 00:29:36,000
devices

00:29:32,640 --> 00:29:37,760
and and do the security uh and and then

00:29:36,000 --> 00:29:40,720
normalize this traffic coming

00:29:37,760 --> 00:29:41,279
and going to the devices for the for the

00:29:40,720 --> 00:29:43,760
iot

00:29:41,279 --> 00:29:44,559
or iot cloud solutions so that's that's

00:29:43,760 --> 00:29:46,880
what uh

00:29:44,559 --> 00:29:47,840
what eclipse holo tries to do and in

00:29:46,880 --> 00:29:49,760
addition it's

00:29:47,840 --> 00:29:51,279
tries to do it you know in a cloud-scale

00:29:49,760 --> 00:29:54,000
way so that you have a

00:29:51,279 --> 00:29:54,399
multi-talent system that that can scale

00:29:54,000 --> 00:29:57,840
to

00:29:54,399 --> 00:30:00,799
you know uh millions of of devices

00:29:57,840 --> 00:30:02,159
so how this working in practice is that

00:30:00,799 --> 00:30:05,679
uh

00:30:02,159 --> 00:30:06,000
is that uh honor provides a component

00:30:05,679 --> 00:30:08,080
that

00:30:06,000 --> 00:30:10,720
that are called protocol adapters and

00:30:08,080 --> 00:30:13,440
those protocol adapters are basically

00:30:10,720 --> 00:30:13,919
uh trying to to to deal with the with

00:30:13,440 --> 00:30:16,320
the

00:30:13,919 --> 00:30:17,200
device protocols and and get them uh get

00:30:16,320 --> 00:30:21,039
them back to the

00:30:17,200 --> 00:30:23,600
to to the to the uh to the

00:30:21,039 --> 00:30:24,480
applications and in in this case you can

00:30:23,600 --> 00:30:27,600
see how we

00:30:24,480 --> 00:30:30,559
send a simple telemetry and and as hugo

00:30:27,600 --> 00:30:31,279
gave an example telemetry is a typical

00:30:30,559 --> 00:30:33,840
volatile

00:30:31,279 --> 00:30:34,320
event uh coming from the device right

00:30:33,840 --> 00:30:36,480
like

00:30:34,320 --> 00:30:38,159
temperatures readings right so the

00:30:36,480 --> 00:30:40,640
device will will post a

00:30:38,159 --> 00:30:41,360
telemetry protocol adapter will will

00:30:40,640 --> 00:30:44,880
create a

00:30:41,360 --> 00:30:47,440
appropriate ink message here

00:30:44,880 --> 00:30:48,080
and kafka is coming soon but we'll talk

00:30:47,440 --> 00:30:50,880
about it

00:30:48,080 --> 00:30:51,760
in a minute and and it will be it will

00:30:50,880 --> 00:30:54,799
be delivered

00:30:51,760 --> 00:30:55,360
uh to the application uh the more the

00:30:54,799 --> 00:30:57,360
more uh

00:30:55,360 --> 00:30:58,799
interesting use case is is the command

00:30:57,360 --> 00:31:01,039
and control where we

00:30:58,799 --> 00:31:03,600
we you know we need to deal with with a

00:31:01,039 --> 00:31:06,720
specificity of

00:31:03,600 --> 00:31:07,760
iot devices that sometimes are low low

00:31:06,720 --> 00:31:09,919
powered

00:31:07,760 --> 00:31:12,000
usually sleeps a lot and and then wake

00:31:09,919 --> 00:31:14,159
up from time to time and and then

00:31:12,000 --> 00:31:16,399
you know try to do some work so try to

00:31:14,159 --> 00:31:17,200
send some telemetry and and receive some

00:31:16,399 --> 00:31:20,720
commands

00:31:17,200 --> 00:31:21,600
and for for those devices uh we have a

00:31:20,720 --> 00:31:24,720
system

00:31:21,600 --> 00:31:26,559
in the iot it's usually it's usually

00:31:24,720 --> 00:31:28,720
established a system to do some kind of

00:31:26,559 --> 00:31:32,240
a long polling for these kind of things

00:31:28,720 --> 00:31:35,360
so so the device will send some post and

00:31:32,240 --> 00:31:38,159
define the ttd uh the time

00:31:35,360 --> 00:31:38,720
until disconnect and in this case like

00:31:38,159 --> 00:31:40,799
uh

00:31:38,720 --> 00:31:42,000
devices saying to the system i will be

00:31:40,799 --> 00:31:45,279
online for the next

00:31:42,000 --> 00:31:48,240
30 seconds right and that

00:31:45,279 --> 00:31:49,679
that will get through the system to the

00:31:48,240 --> 00:31:52,399
appropriate application again

00:31:49,679 --> 00:31:53,120
uh you know similarly to the amqp or or

00:31:52,399 --> 00:31:56,960
the kafka

00:31:53,120 --> 00:31:59,519
kafka message and in the reply uh

00:31:56,960 --> 00:32:00,480
reply the application will say okay let

00:31:59,519 --> 00:32:03,440
me see if i

00:32:00,480 --> 00:32:04,480
i have all my commands for for this

00:32:03,440 --> 00:32:06,320
device to deliver

00:32:04,480 --> 00:32:08,720
and it will deliver it to the protocol

00:32:06,320 --> 00:32:11,679
adapter which will convert those

00:32:08,720 --> 00:32:12,880
commands back to the to the device

00:32:11,679 --> 00:32:16,799
through the

00:32:12,880 --> 00:32:17,919
uh to the uh appropriate uh response

00:32:16,799 --> 00:32:21,360
headers and

00:32:17,919 --> 00:32:24,000
response body so why is this important

00:32:21,360 --> 00:32:24,399
is that uh we can see that we will try

00:32:24,000 --> 00:32:28,320
to

00:32:24,399 --> 00:32:30,960
to do as little as little uh state

00:32:28,320 --> 00:32:31,679
as possible in this and and this is to

00:32:30,960 --> 00:32:35,120
provide

00:32:31,679 --> 00:32:38,880
this scalability of of of the this

00:32:35,120 --> 00:32:41,519
gateway layer of our of our cloud so

00:32:38,880 --> 00:32:43,200
these commands are are now usually the

00:32:41,519 --> 00:32:44,960
the volatile events

00:32:43,200 --> 00:32:46,799
again because you know we don't want

00:32:44,960 --> 00:32:49,039
anything to be stored stored here

00:32:46,799 --> 00:32:49,919
the application some kind of digital

00:32:49,039 --> 00:32:53,279
twin leaving

00:32:49,919 --> 00:32:56,480
behind the gateway uh should should

00:32:53,279 --> 00:32:59,519
deal with the state and this is

00:32:56,480 --> 00:33:02,080
the the architecture of eclipse honor so

00:32:59,519 --> 00:33:02,720
we discussed a little bit about the the

00:33:02,080 --> 00:33:05,519
various

00:33:02,720 --> 00:33:08,000
uh protocol adapters that that needs to

00:33:05,519 --> 00:33:11,200
to deal with the with different devices

00:33:08,000 --> 00:33:13,039
one more important component here is is

00:33:11,200 --> 00:33:13,840
the device registry which which handles

00:33:13,039 --> 00:33:16,240
the security

00:33:13,840 --> 00:33:17,519
authentication and and uh authorization

00:33:16,240 --> 00:33:20,960
of the devices

00:33:17,519 --> 00:33:24,320
and we want to do that no matter the the

00:33:20,960 --> 00:33:24,720
what kind of uh messaging solution we're

00:33:24,320 --> 00:33:27,519
using

00:33:24,720 --> 00:33:28,720
behind behind this because we want to do

00:33:27,519 --> 00:33:32,399
security

00:33:28,720 --> 00:33:34,640
uh uh based on on the on the

00:33:32,399 --> 00:33:36,240
on the device and the identities and and

00:33:34,640 --> 00:33:39,279
not the usernames and and

00:33:36,240 --> 00:33:40,960
uh addresses or or or topics or

00:33:39,279 --> 00:33:42,799
or anything like that so people

00:33:40,960 --> 00:33:45,760
developing iot solution

00:33:42,799 --> 00:33:47,039
want to have their security uh uh

00:33:45,760 --> 00:33:49,360
defined in terms of

00:33:47,039 --> 00:33:50,880
devices their credentials and and and

00:33:49,360 --> 00:33:53,440
and and what we can do

00:33:50,880 --> 00:33:54,559
with those but as you can see these

00:33:53,440 --> 00:33:58,000
orange

00:33:54,559 --> 00:34:01,600
orange orange

00:33:58,000 --> 00:34:04,559
squares are are honor

00:34:01,600 --> 00:34:06,640
specific components behind it we have a

00:34:04,559 --> 00:34:09,040
some kind of general purpose

00:34:06,640 --> 00:34:10,159
eventing or messaging messaging

00:34:09,040 --> 00:34:12,079
solutions so

00:34:10,159 --> 00:34:13,919
today that's a dispatch router and

00:34:12,079 --> 00:34:16,320
artemis so this which router

00:34:13,919 --> 00:34:17,760
handling the the volatile part of of

00:34:16,320 --> 00:34:20,879
inventing going between the

00:34:17,760 --> 00:34:23,599
the the devices and the solutions

00:34:20,879 --> 00:34:26,399
and the archimis in that case in uh

00:34:23,599 --> 00:34:29,440
storing and doing the story forward for

00:34:26,399 --> 00:34:30,639
for uh for uh event types that that

00:34:29,440 --> 00:34:33,440
needs that

00:34:30,639 --> 00:34:34,320
and the in in the future and very soon

00:34:33,440 --> 00:34:37,760
uh there's

00:34:34,320 --> 00:34:39,280
this coming the kafka uh

00:34:37,760 --> 00:34:41,119
alternative to this as well so that

00:34:39,280 --> 00:34:44,639
people can choose uh

00:34:41,119 --> 00:34:46,639
choose which uh which kind of

00:34:44,639 --> 00:34:48,240
combination of these things are best

00:34:46,639 --> 00:34:51,599
suited for for their

00:34:48,240 --> 00:34:55,200
particular particular deployment

00:34:51,599 --> 00:34:56,480
so that's what we had to share with you

00:34:55,200 --> 00:34:59,440
today and and i think

00:34:56,480 --> 00:35:00,240
you know a couple of uh a couple of key

00:34:59,440 --> 00:35:03,440
takeaways i

00:35:00,240 --> 00:35:04,960
i think we would like to to

00:35:03,440 --> 00:35:06,640
for you to take from this session is

00:35:04,960 --> 00:35:09,280
that there's no

00:35:06,640 --> 00:35:10,160
silver bullet uh solution to to all the

00:35:09,280 --> 00:35:13,040
problems like

00:35:10,160 --> 00:35:13,359
like there's never is in in engineering

00:35:13,040 --> 00:35:15,440
right

00:35:13,359 --> 00:35:16,800
everything is some kind of the trade-off

00:35:15,440 --> 00:35:19,200
but the the good thing

00:35:16,800 --> 00:35:20,320
is is that apache foundation has a lot

00:35:19,200 --> 00:35:23,359
of tools

00:35:20,320 --> 00:35:25,920
and and in the toolbox and and

00:35:23,359 --> 00:35:28,079
as we can see like combining these tools

00:35:25,920 --> 00:35:30,720
we can we can have a very very

00:35:28,079 --> 00:35:31,520
versatile platforms so so you can pick

00:35:30,720 --> 00:35:33,040
and choose and

00:35:31,520 --> 00:35:35,280
and find the best solution for the for

00:35:33,040 --> 00:35:37,760
the particular you're solving

00:35:35,280 --> 00:35:38,640
and and even if if you have all these

00:35:37,760 --> 00:35:42,400
tools

00:35:38,640 --> 00:35:44,960
uh trying to solve a single use case uh

00:35:42,400 --> 00:35:46,320
is not something that uh requires some

00:35:44,960 --> 00:35:49,440
more more additional thinking

00:35:46,320 --> 00:35:51,440
and work like like uh trying to solve

00:35:49,440 --> 00:35:53,359
the the edge networking with stopper or

00:35:51,440 --> 00:35:56,160
or trying to to solve

00:35:53,359 --> 00:35:56,560
device connectivity with honor so and we

00:35:56,160 --> 00:35:59,680
can

00:35:56,560 --> 00:36:00,720
build uh those specialized tools on this

00:35:59,680 --> 00:36:02,960
uh good foundation

00:36:00,720 --> 00:36:04,560
that are we that that are coming from

00:36:02,960 --> 00:36:07,119
from the kafka

00:36:04,560 --> 00:36:09,119
active mq and and in the keeping uh

00:36:07,119 --> 00:36:11,920
dispatch router

00:36:09,119 --> 00:36:12,960
so thanks who do you have anything else

00:36:11,920 --> 00:36:16,320
to

00:36:12,960 --> 00:36:18,320
add for the for the end no i think you

00:36:16,320 --> 00:36:21,119
summarize it very well the idea

00:36:18,320 --> 00:36:22,240
is just to present some of the different

00:36:21,119 --> 00:36:24,000
companies that are

00:36:22,240 --> 00:36:26,000
currently available out of the box to be

00:36:24,000 --> 00:36:29,760
able to be used and also show

00:36:26,000 --> 00:36:32,480
you that there's there's even if there's

00:36:29,760 --> 00:36:34,320
a specific need or a niche solution that

00:36:32,480 --> 00:36:36,320
needs to be implemented sometimes you

00:36:34,320 --> 00:36:38,079
don't need to push all those requests

00:36:36,320 --> 00:36:39,520
or all those features into the actual

00:36:38,079 --> 00:36:42,240
companies you can't create

00:36:39,520 --> 00:36:44,000
uh type of projects on using those

00:36:42,240 --> 00:36:46,000
companies and as foundation as

00:36:44,000 --> 00:36:47,280
they mentioned and they've been able to

00:36:46,000 --> 00:36:49,040
build on top of that

00:36:47,280 --> 00:36:50,800
more specialized solutions or solutions

00:36:49,040 --> 00:36:52,160
that are addressing specific problems or

00:36:50,800 --> 00:36:54,480
different problems

00:36:52,160 --> 00:36:56,640
but benefiting from the uh from the

00:36:54,480 --> 00:36:59,200
underlying components so that's why

00:36:56,640 --> 00:37:00,720
in the case of iot and edge you can

00:36:59,200 --> 00:37:02,720
still use the connectivity

00:37:00,720 --> 00:37:04,640
components but also there's another

00:37:02,720 --> 00:37:06,640
layer like a honor or

00:37:04,640 --> 00:37:07,760
copper that allows you to then deal with

00:37:06,640 --> 00:37:10,960
the specifics and

00:37:07,760 --> 00:37:13,200
on this allows you to have

00:37:10,960 --> 00:37:14,560
all these uh general purpose type of

00:37:13,200 --> 00:37:17,119
messaging components

00:37:14,560 --> 00:37:18,240
and but repurpose them to be able to

00:37:17,119 --> 00:37:21,760
connect and solve

00:37:18,240 --> 00:37:23,520
iot and energy use cases so

00:37:21,760 --> 00:37:25,200
thank you very much for for your time we

00:37:23,520 --> 00:37:26,800
really appreciate and

00:37:25,200 --> 00:37:28,720
we're open for any question that it

00:37:26,800 --> 00:37:31,359
might rise in the uh in the chat

00:37:28,720 --> 00:37:31,839
or if you want to add any other comments

00:37:31,359 --> 00:37:34,480
where

00:37:31,839 --> 00:37:36,000
um we're available in twitter so you can

00:37:34,480 --> 00:37:39,440
follow the conversation

00:37:36,000 --> 00:37:40,720
and then you can um yeah

00:37:39,440 --> 00:37:43,119
if you have interest in this field

00:37:40,720 --> 00:37:45,359
continue to reach us yeah

00:37:43,119 --> 00:37:47,760
right i also add some uh links in the

00:37:45,359 --> 00:37:50,720
chat so if you want to follow scopper.io

00:37:47,760 --> 00:37:51,359
it's the webpage for stopper project and

00:37:50,720 --> 00:37:54,480
there's the

00:37:51,359 --> 00:37:58,000
github link for eclipse hana we also

00:37:54,480 --> 00:37:58,000
want to take a look at that project

00:38:03,520 --> 00:38:07,280
uh well i'm not familiar with the stream

00:38:06,320 --> 00:38:10,400
pipes

00:38:07,280 --> 00:38:11,280
uh so i would need to check that and

00:38:10,400 --> 00:38:13,839
maybe we can

00:38:11,280 --> 00:38:15,280
we can get this offline who i don't know

00:38:13,839 --> 00:38:18,560
if if you have an

00:38:15,280 --> 00:38:20,160
answer to this no i

00:38:18,560 --> 00:38:21,920
i'm not familiar with stream pipes

00:38:20,160 --> 00:38:24,000
either but uh if it is a

00:38:21,920 --> 00:38:26,320
it's a way to have a tcp connection then

00:38:24,000 --> 00:38:29,280
uh scopper is able to reroute

00:38:26,320 --> 00:38:33,599
uh that that tcp connection on top of

00:38:29,280 --> 00:38:37,119
the networking

00:38:33,599 --> 00:38:37,119
but yeah we can take a look at that one

00:38:38,160 --> 00:38:42,880
okay if if you see if you're using uh

00:38:40,800 --> 00:38:45,280
services on top of kubernetes

00:38:42,880 --> 00:38:46,000
then uh scopper works with that because

00:38:45,280 --> 00:38:48,320
it uh

00:38:46,000 --> 00:38:49,520
it uses the abstraction on top of the

00:38:48,320 --> 00:38:51,280
kubernetes services

00:38:49,520 --> 00:38:53,200
and then allows you to do the uh

00:38:51,280 --> 00:38:55,440
plumbing and the connection underneath

00:38:53,200 --> 00:38:57,520
that with the uh with the qp dispatch

00:38:55,440 --> 00:39:01,839
routers

00:38:57,520 --> 00:39:01,839
so it might it might not work yeah

00:39:11,280 --> 00:39:15,760
guess right it should be if it is uh

00:39:13,760 --> 00:39:17,920
benefiting from services it can expose

00:39:15,760 --> 00:39:19,040
a tcp connection that is copper it will

00:39:17,920 --> 00:39:22,000
work with with that

00:39:19,040 --> 00:39:23,520
because it's certainly that so so what

00:39:22,000 --> 00:39:24,320
one of the efforts that that we are

00:39:23,520 --> 00:39:27,200
trying to do

00:39:24,320 --> 00:39:28,800
in the honor land is is to to make it

00:39:27,200 --> 00:39:31,359
more uh edge computing

00:39:28,800 --> 00:39:32,160
friendly meaning that we we wanted to

00:39:31,359 --> 00:39:35,760
try

00:39:32,160 --> 00:39:38,880
uh uh to to uh you know being able to

00:39:35,760 --> 00:39:40,320
to uh deploy the protocol adapters

00:39:38,880 --> 00:39:42,240
outside of the of the

00:39:40,320 --> 00:39:43,599
main cluster basically and and on the

00:39:42,240 --> 00:39:46,400
edge and for that

00:39:43,599 --> 00:39:48,000
uh the scalper is also also solution so

00:39:46,400 --> 00:39:49,040
so basically devices will connect

00:39:48,000 --> 00:39:52,079
locally

00:39:49,040 --> 00:39:52,720
uh uh to the edge node and and the mqpp

00:39:52,079 --> 00:39:56,079
network

00:39:52,720 --> 00:39:56,480
can stream basically uh the the scupper

00:39:56,079 --> 00:40:00,000
can

00:39:56,480 --> 00:40:02,320
can stream stream either nqp or or

00:40:00,000 --> 00:40:03,920
any other tcp protocol back back to the

00:40:02,320 --> 00:40:06,240
cloud

00:40:03,920 --> 00:40:07,119
but i'll i'll take a deeper look into

00:40:06,240 --> 00:40:10,319
the into the

00:40:07,119 --> 00:40:25,839
uh stream pipes for sure so thanks for

00:40:10,319 --> 00:40:25,839
for the reference

00:40:31,760 --> 00:40:35,920
thank you folks for for for joining us

00:40:37,200 --> 00:40:40,560
as you said we will be around uh uh hugo

00:40:40,000 --> 00:40:44,079
probably

00:40:40,560 --> 00:40:47,119
more today because it's 9 p.m here but

00:40:44,079 --> 00:40:49,920
richard's on the on the slack

00:40:47,119 --> 00:40:50,800
reach us on the twitter uh i'd love to

00:40:49,920 --> 00:40:54,960
talk about

00:40:50,800 --> 00:41:07,839
this these topics anytime thank you

00:40:54,960 --> 00:41:07,839
thank you everyone

00:41:18,960 --> 00:41:21,040

YouTube URL: https://www.youtube.com/watch?v=9EM6fH-rs9g


