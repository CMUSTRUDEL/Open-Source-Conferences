Title: Apache Jena GeoSPARQL
Publication date: 2020-10-14
Playlist: ApacheCon @Home 2020
Description: 
	Apache Jena GeoSPARQL
Marco Neumann

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

This presentation will discuss an implementation of GeoSPARQL for Apache Jena and a Fuseki integration. GeoSPARQL adds spatial functions to the SPARQL query language and enables the processing of spatial data with the popular Apache Jena project. In this presentation basic filter and property functions will be discussed in context of spatial relations and geometry shapes or types for the use with the Resource Description Framework (RDF) and SPARQL. Apache Jena GeoSPARQL spatial filters can be a applied to Well-known text (WKT) representation of geometry objects and datasets using the WGS84 Geo predicates for latitude and longitude. The goal for the latest release of Apache Jena GeoSPARQL module was to follow generally the 11-052r4 OGC GeoSPARQL standard where possible while providing an easy to use extension for Apache Jena users.

Marco Neumann is an Information Scientist with keen interest in distributed information syndication and contexts for the Semantic Web, dynamic schema evolution in structured data, information visualisation, ontology based knowledge management, reputation based ranking in Semantic Social Networks (augmented collaborative online communities such as http://www.lotico.com), and last but not least the Semantic GeoSpatial Web. Since 2005 Marco applies his experiencing to large-scale information management projects in international cultural heritage institutions and the private
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,080 --> 00:00:29,119
um

00:00:25,760 --> 00:00:31,279
i think it's time to start so uh

00:00:29,119 --> 00:00:33,520
my name is marco newman i am an

00:00:31,279 --> 00:00:34,960
information scientist and director and

00:00:33,520 --> 00:00:36,960
founder of koner a

00:00:34,960 --> 00:00:38,160
semantic technology company based in new

00:00:36,960 --> 00:00:41,600
york city

00:00:38,160 --> 00:00:42,840
today i'm going to talk about apache

00:00:41,600 --> 00:00:45,840
jenna

00:00:42,840 --> 00:00:45,840
geosparkle

00:00:46,480 --> 00:00:49,360
now um

00:00:51,680 --> 00:00:56,559
jenna is a semantic web framework to

00:00:54,559 --> 00:01:00,480
represent and process data

00:00:56,559 --> 00:01:03,760
on the web geosparkle is an extension

00:01:00,480 --> 00:01:07,439
to the semantic web and

00:01:03,760 --> 00:01:13,119
the geospark model is an extension to

00:01:07,439 --> 00:01:16,320
the apache jenna project

00:01:13,119 --> 00:01:17,280
the geosparkle uh subject is an advanced

00:01:16,320 --> 00:01:20,400
topic

00:01:17,280 --> 00:01:22,720
and if you are new to rdf or the

00:01:20,400 --> 00:01:26,000
semantic web i highly recommend you

00:01:22,720 --> 00:01:28,880
to visit the um

00:01:26,000 --> 00:01:30,560
jenna project page to learn more about

00:01:28,880 --> 00:01:34,240
the semantic web

00:01:30,560 --> 00:01:34,240
and rdf

00:01:34,560 --> 00:01:42,479
before viewing this presentation

00:01:38,320 --> 00:01:42,479
now a little bit of history um

00:01:42,640 --> 00:01:49,680
to uh spatial support in uh

00:01:45,680 --> 00:01:53,200
jenna um in 2003 i

00:01:49,680 --> 00:01:55,920
introduced a spatial filter to

00:01:53,200 --> 00:01:57,840
um the query language that was called

00:01:55,920 --> 00:02:01,200
rdql

00:01:57,840 --> 00:02:04,479
in the jenna project and what we did is

00:02:01,200 --> 00:02:05,119
we took a query extracted the spatial

00:02:04,479 --> 00:02:08,640
features

00:02:05,119 --> 00:02:11,920
from a spatial index

00:02:08,640 --> 00:02:15,200
and sorted the candidate set for

00:02:11,920 --> 00:02:18,720
either direct display or further

00:02:15,200 --> 00:02:21,040
evaluation in the geometry

00:02:18,720 --> 00:02:22,879
evaluation and then whether or not we

00:02:21,040 --> 00:02:25,040
had an intersection or interaction some

00:02:22,879 --> 00:02:25,760
spatial relationship between geometric

00:02:25,040 --> 00:02:28,959
features

00:02:25,760 --> 00:02:31,040
um uh we would then

00:02:28,959 --> 00:02:32,959
forward that to the query result set

00:02:31,040 --> 00:02:36,560
which then would be

00:02:32,959 --> 00:02:40,239
pushed to the genera rdql

00:02:36,560 --> 00:02:43,519
query processor so that was the

00:02:40,239 --> 00:02:47,040
the first uh application that we had

00:02:43,519 --> 00:02:50,239
uh to you know work with spatial data

00:02:47,040 --> 00:02:55,599
in in the jenna project then in

00:02:50,239 --> 00:02:55,599
2007 we actually introduced uh so-called

00:02:57,360 --> 00:03:01,519
magic predicates or property functions

00:03:00,080 --> 00:03:04,640
that we could use within

00:03:01,519 --> 00:03:09,360
the sparkle query language

00:03:04,640 --> 00:03:13,040
which allowed us to query for

00:03:09,360 --> 00:03:14,400
spatial data now in 2008 we released a

00:03:13,040 --> 00:03:16,959
web service

00:03:14,400 --> 00:03:18,080
and that service was called geosparkle

00:03:16,959 --> 00:03:21,440
and that causes

00:03:18,080 --> 00:03:23,680
some confusion today so we call it juice

00:03:21,440 --> 00:03:26,239
barker but it wasn't the geosparkle

00:03:23,680 --> 00:03:27,360
ogc standard that we refer to here so

00:03:26,239 --> 00:03:30,000
that was just a web

00:03:27,360 --> 00:03:33,519
service that we used to test our

00:03:30,000 --> 00:03:38,799
geospatial implementation

00:03:33,519 --> 00:03:38,799
in the jenna project now in

00:03:39,000 --> 00:03:44,480
2012 after some years of works in the

00:03:42,239 --> 00:03:46,959
standards group the ogc actually has

00:03:44,480 --> 00:03:51,599
released the geosparkle

00:03:46,959 --> 00:03:55,040
standard and that was in 2012.

00:03:51,599 --> 00:03:58,959
and it took us another

00:03:55,040 --> 00:04:02,239
seven years to actually

00:03:58,959 --> 00:04:05,200
um introduce a

00:04:02,239 --> 00:04:06,000
geosparkle ogc geosparker compliant

00:04:05,200 --> 00:04:09,680
module

00:04:06,000 --> 00:04:09,680
in in jetta

00:04:10,080 --> 00:04:14,560
the reason for that partially is that 90

00:04:12,879 --> 00:04:19,440
of the use cases were covered

00:04:14,560 --> 00:04:19,440
with uh these um

00:04:19,600 --> 00:04:24,080
magic predicates uh and proximity

00:04:22,079 --> 00:04:26,840
searches that we were um

00:04:24,080 --> 00:04:30,400
that we already had in the geo in the

00:04:26,840 --> 00:04:34,320
jenna geospatial module

00:04:30,400 --> 00:04:37,919
but nonetheless we now have a geosparkle

00:04:34,320 --> 00:04:41,040
compliant module in the jenna project

00:04:37,919 --> 00:04:42,960
and i would guess that in the next five

00:04:41,040 --> 00:04:44,479
year five years we will see actually

00:04:42,960 --> 00:04:48,560
another major

00:04:44,479 --> 00:04:50,190
update or a new module in the geosparkle

00:04:48,560 --> 00:04:52,080
in the jenna project

00:04:50,190 --> 00:04:55,120
[Music]

00:04:52,080 --> 00:04:58,720
now what is the

00:04:55,120 --> 00:05:01,360
apache jenna project that's actually um

00:04:58,720 --> 00:05:03,759
the apache genera geosparkle module is

00:05:01,360 --> 00:05:06,320
actually an attempt

00:05:03,759 --> 00:05:07,680
to implement all the six conformance

00:05:06,320 --> 00:05:10,080
classes that are mentioned

00:05:07,680 --> 00:05:10,840
in the ogc geosparkle implementation

00:05:10,080 --> 00:05:15,199
center

00:05:10,840 --> 00:05:17,919
2012. now we have

00:05:15,199 --> 00:05:20,479
six components we have core we have the

00:05:17,919 --> 00:05:21,840
topology vocabulary we have the geometry

00:05:20,479 --> 00:05:25,199
extension

00:05:21,840 --> 00:05:28,160
we have the geometry topology extension

00:05:25,199 --> 00:05:30,400
and rdfs entailment regime and the query

00:05:28,160 --> 00:05:35,199
rewriting extension

00:05:30,400 --> 00:05:35,199
don't be worried you don't have to

00:05:35,440 --> 00:05:42,240
know about all of these or um you know

00:05:38,800 --> 00:05:46,479
of all these uh components to make use

00:05:42,240 --> 00:05:47,600
of geosparkle in um in the apache jenna

00:05:46,479 --> 00:05:51,199
project

00:05:47,600 --> 00:05:54,639
or in sparkle it is just the the full

00:05:51,199 --> 00:05:57,840
set of modules that is mentioned

00:05:54,639 --> 00:06:00,880
in the ogc geospatial

00:05:57,840 --> 00:06:03,520
um standard

00:06:00,880 --> 00:06:04,319
now let's start with the core the core

00:06:03,520 --> 00:06:07,600
is really the

00:06:04,319 --> 00:06:10,080
the basic vocabulary

00:06:07,600 --> 00:06:11,520
in the geospatial standard it just

00:06:10,080 --> 00:06:14,720
defines

00:06:11,520 --> 00:06:17,520
a spatial object class

00:06:14,720 --> 00:06:18,560
as you can see i hope uh in this in the

00:06:17,520 --> 00:06:22,240
slides

00:06:18,560 --> 00:06:23,759
which is an um which is a spatial object

00:06:22,240 --> 00:06:26,000
that represents

00:06:23,759 --> 00:06:27,680
uh everything that has a spatial

00:06:26,000 --> 00:06:30,400
component to it or a spatial

00:06:27,680 --> 00:06:34,400
representation

00:06:30,400 --> 00:06:36,880
now the second class is a

00:06:34,400 --> 00:06:38,319
feature which is a subclass of a

00:06:36,880 --> 00:06:41,280
geospatial object

00:06:38,319 --> 00:06:43,440
keep in mind feature here is a

00:06:41,280 --> 00:06:46,960
conceptual

00:06:43,440 --> 00:06:50,880
class it doesn't have any

00:06:46,960 --> 00:06:54,240
geometry um representation

00:06:50,880 --> 00:06:57,199
attached to it now um

00:06:54,240 --> 00:06:58,479
and that is it that's the core of the

00:06:57,199 --> 00:07:02,800
geosparkle

00:06:58,479 --> 00:07:06,720
uh ogc standard in um

00:07:02,800 --> 00:07:09,599
in in the next module the geosparkle

00:07:06,720 --> 00:07:10,639
ogc standard introduces a topology

00:07:09,599 --> 00:07:12,880
vocabulary

00:07:10,639 --> 00:07:13,680
now that's the heart that's the meat

00:07:12,880 --> 00:07:17,199
kind of

00:07:13,680 --> 00:07:21,759
the specification it specifies

00:07:17,199 --> 00:07:25,280
the um topological spatial relations

00:07:21,759 --> 00:07:27,280
of um these features

00:07:25,280 --> 00:07:29,360
in in the data set and provides a

00:07:27,280 --> 00:07:32,800
vocabulary

00:07:29,360 --> 00:07:35,759
for that in jenna now in

00:07:32,800 --> 00:07:37,680
jenna or in in general for any

00:07:35,759 --> 00:07:40,200
application that implements the or

00:07:37,680 --> 00:07:42,160
ogc geosparkle

00:07:40,200 --> 00:07:45,520
[Music]

00:07:42,160 --> 00:07:48,560
standard now we're having uh three

00:07:45,520 --> 00:07:52,160
families of topological relationship

00:07:48,560 --> 00:07:53,440
support in uh jenna which is the simple

00:07:52,160 --> 00:07:56,879
feature

00:07:53,440 --> 00:08:00,879
the ergenhofer and the

00:07:56,879 --> 00:08:03,919
rcc8 all of these three

00:08:00,879 --> 00:08:07,520
family are implemented

00:08:03,919 --> 00:08:10,800
in in the apache geosparkle

00:08:07,520 --> 00:08:13,919
module currently and they are

00:08:10,800 --> 00:08:16,800
very basic um simple

00:08:13,919 --> 00:08:18,240
um relationships that can exist between

00:08:16,800 --> 00:08:21,360
two

00:08:18,240 --> 00:08:23,599
features in the vocabulary um

00:08:21,360 --> 00:08:25,199
let me quickly go through them here so

00:08:23,599 --> 00:08:28,080
for the simple feature which

00:08:25,199 --> 00:08:31,120
by the way was already implemented in

00:08:28,080 --> 00:08:33,470
sql in 2003

00:08:31,120 --> 00:08:34,800
when we started to

00:08:33,470 --> 00:08:39,519
[Music]

00:08:34,800 --> 00:08:42,560
implement spatial features in in jenna

00:08:39,519 --> 00:08:45,760
so we have the relationship equals

00:08:42,560 --> 00:08:49,120
so two uh features are equal

00:08:45,760 --> 00:08:52,800
um and we have a

00:08:49,120 --> 00:08:56,480
vocabulary uri for that as well and

00:08:52,800 --> 00:08:58,240
specified in the geosparkle standard

00:08:56,480 --> 00:09:01,120
and the domain and range for that is a

00:08:58,240 --> 00:09:01,120
spatial object

00:09:01,360 --> 00:09:06,000
the last section also gives you the

00:09:03,440 --> 00:09:09,200
intersection matrix pattern

00:09:06,000 --> 00:09:10,959
for this relationship which is something

00:09:09,200 --> 00:09:13,519
we come back to later

00:09:10,959 --> 00:09:16,160
in one of the examples uh we have

00:09:13,519 --> 00:09:20,720
disjoint

00:09:16,160 --> 00:09:20,720
intersects touches

00:09:20,839 --> 00:09:27,760
within contains

00:09:23,920 --> 00:09:30,080
overlaps and crosses so these are all

00:09:27,760 --> 00:09:31,120
spatial relationships that can exist

00:09:30,080 --> 00:09:34,240
between two

00:09:31,120 --> 00:09:37,279
spatial features in the dataset

00:09:34,240 --> 00:09:38,800
now the next family would be the

00:09:37,279 --> 00:09:40,640
egenhofer

00:09:38,800 --> 00:09:41,839
topological relationship which is quite

00:09:40,640 --> 00:09:45,040
similar

00:09:41,839 --> 00:09:48,080
to the simple features um that has just

00:09:45,040 --> 00:09:51,200
um you know again the

00:09:48,080 --> 00:09:55,360
basic relationships such as equals

00:09:51,200 --> 00:09:58,320
disjoint meat overlap covers covered by

00:09:55,360 --> 00:10:00,080
inside and contains as you can see here

00:09:58,320 --> 00:10:03,120
it doesn't have intersects

00:10:00,080 --> 00:10:06,320
but which is if it's

00:10:03,120 --> 00:10:07,519
you know that can be replaced by another

00:10:06,320 --> 00:10:09,760
relationship

00:10:07,519 --> 00:10:10,560
so there are minor differences between

00:10:09,760 --> 00:10:13,760
these uh

00:10:10,560 --> 00:10:18,959
families and the third one is the

00:10:13,760 --> 00:10:22,240
regional um region connection calculus

00:10:18,959 --> 00:10:23,200
family which gives us the relation

00:10:22,240 --> 00:10:25,200
between two

00:10:23,200 --> 00:10:27,839
spatial features which can be either

00:10:25,200 --> 00:10:27,839
disconnect

00:10:28,160 --> 00:10:34,959
they can be externally connected

00:10:31,519 --> 00:10:38,399
this is the second one in the first row

00:10:34,959 --> 00:10:40,880
then we have the tangential proper part

00:10:38,399 --> 00:10:44,000
the third one the fourth one is the

00:10:40,880 --> 00:10:47,839
tangential proper part inverse

00:10:44,000 --> 00:10:51,040
the fourth one is um

00:10:47,839 --> 00:10:53,600
partially overlapping and the

00:10:51,040 --> 00:10:55,519
next one is equal so two spatial

00:10:53,600 --> 00:10:57,360
features are equal if they exactly cover

00:10:55,519 --> 00:11:01,200
each other

00:10:57,360 --> 00:11:04,399
um and then we have the tangential

00:11:01,200 --> 00:11:07,120
um property part inverse

00:11:04,399 --> 00:11:08,720
relationship and the non-tangential

00:11:07,120 --> 00:11:13,120
property part inverse

00:11:08,720 --> 00:11:16,880
relationship in rcc8 now

00:11:13,120 --> 00:11:17,920
this um uh is just another table here

00:11:16,880 --> 00:11:21,040
that uh

00:11:17,920 --> 00:11:23,600
lists the relationships again um

00:11:21,040 --> 00:11:25,680
now we talked about the topological

00:11:23,600 --> 00:11:27,120
relationship vocabulary so we provide

00:11:25,680 --> 00:11:30,640
that vocabulary

00:11:27,120 --> 00:11:34,160
in jenna for you to annotate your data

00:11:30,640 --> 00:11:37,760
and build your

00:11:34,160 --> 00:11:41,760
ontology and data set now the next step

00:11:37,760 --> 00:11:43,200
we're looking at the geometry extension

00:11:41,760 --> 00:11:45,760
so we didn't

00:11:43,200 --> 00:11:47,040
cover geometries yet right so we

00:11:45,760 --> 00:11:49,839
actually

00:11:47,040 --> 00:11:51,920
just talked about spatial features um

00:11:49,839 --> 00:11:54,720
that do not have a geometry

00:11:51,920 --> 00:11:55,760
component to it now in the next module

00:11:54,720 --> 00:11:59,200
we actually add

00:11:55,760 --> 00:12:02,720
a geometry extension as you can imagine

00:11:59,200 --> 00:12:05,920
this is a very basic uh simple

00:12:02,720 --> 00:12:09,120
um you know geometry representation

00:12:05,920 --> 00:12:10,240
so we're making use of basic components

00:12:09,120 --> 00:12:13,440
such as

00:12:10,240 --> 00:12:17,200
points line strings and polygons

00:12:13,440 --> 00:12:20,320
and they are now also available in

00:12:17,200 --> 00:12:22,560
the vocabulary as you can see i have

00:12:20,320 --> 00:12:22,560
just

00:12:23,360 --> 00:12:28,800
open up the geosparkle ontology

00:12:26,880 --> 00:12:30,720
and it gives you i hope you can see my

00:12:28,800 --> 00:12:33,920
ontology editor here and

00:12:30,720 --> 00:12:37,200
we have the spatial object and

00:12:33,920 --> 00:12:38,399
we can now see the core uh components

00:12:37,200 --> 00:12:41,200
the spatial object

00:12:38,399 --> 00:12:42,399
in the feature and then we see a third

00:12:41,200 --> 00:12:45,920
one which is actually

00:12:42,399 --> 00:12:47,040
um distinct from a feature which is the

00:12:45,920 --> 00:12:49,680
geometry

00:12:47,040 --> 00:12:50,839
and in the geometry we can find uh the

00:12:49,680 --> 00:12:54,639
basic

00:12:50,839 --> 00:12:57,360
geometric types

00:12:54,639 --> 00:12:59,600
here for surface polygon and point and

00:12:57,360 --> 00:13:01,360
they can now be used within our data set

00:12:59,600 --> 00:13:04,610
to annotate our

00:13:01,360 --> 00:13:05,760
our data the geosparkle

00:13:04,610 --> 00:13:09,040
[Music]

00:13:05,760 --> 00:13:09,040
module takes

00:13:09,200 --> 00:13:14,800
two types of geometry representations

00:13:15,120 --> 00:13:22,160
let me just go back to my slides

00:13:18,160 --> 00:13:25,600
and these are well-known text format and

00:13:22,160 --> 00:13:28,880
the gmail data format both of them

00:13:25,600 --> 00:13:32,000
can be used within the geosparkle module

00:13:28,880 --> 00:13:33,279
to load geometry features into your data

00:13:32,000 --> 00:13:36,720
set

00:13:33,279 --> 00:13:39,600
now we have the geometry

00:13:36,720 --> 00:13:40,720
extension now we can also apply the

00:13:39,600 --> 00:13:43,040
geometry

00:13:40,720 --> 00:13:45,440
topology extension to these so a

00:13:43,040 --> 00:13:48,560
vocabulary that applies to

00:13:45,440 --> 00:13:50,480
the geometric features um i'm just

00:13:48,560 --> 00:13:51,760
mentioning some here for the simple

00:13:50,480 --> 00:13:54,639
features

00:13:51,760 --> 00:13:55,920
um so these are the functions that we

00:13:54,639 --> 00:13:59,120
can use

00:13:55,920 --> 00:14:01,040
now we on the

00:13:59,120 --> 00:14:02,720
geometry features we can apply them to

00:14:01,040 --> 00:14:06,240
all types of

00:14:02,720 --> 00:14:09,519
geometry features such as point literals

00:14:06,240 --> 00:14:12,800
polygons etc okay

00:14:09,519 --> 00:14:15,920
um in the the

00:14:12,800 --> 00:14:19,040
next component which apparently is not

00:14:15,920 --> 00:14:22,800
necessarily implemented by many um

00:14:19,040 --> 00:14:24,000
geosparkle providers which is the rdf's

00:14:22,800 --> 00:14:26,720
entailment regime

00:14:24,000 --> 00:14:30,639
um if you are new to the semantic web it

00:14:26,720 --> 00:14:33,279
basically means that you can add

00:14:30,639 --> 00:14:33,680
implicit audio you can create new data

00:14:33,279 --> 00:14:35,760
from

00:14:33,680 --> 00:14:38,399
existing and data that is currently not

00:14:35,760 --> 00:14:41,519
in the data set and we can now

00:14:38,399 --> 00:14:44,720
uh reason over the data set with our

00:14:41,519 --> 00:14:48,959
geosparkle vocabulary

00:14:44,720 --> 00:14:48,959
and jenna has a perfectly sound

00:14:49,680 --> 00:14:53,839
implementation of rdfs reasoning so that

00:14:52,880 --> 00:14:56,399
is a component

00:14:53,839 --> 00:14:59,279
that we already have in in jenna and

00:14:56,399 --> 00:15:02,720
that we apply to the geosparkle

00:14:59,279 --> 00:15:05,839
vocabulary now um the last

00:15:02,720 --> 00:15:08,160
module in the

00:15:05,839 --> 00:15:09,519
geospark standard is the query writing

00:15:08,160 --> 00:15:12,639
extension

00:15:09,519 --> 00:15:16,320
now which allows you to again take

00:15:12,639 --> 00:15:19,040
apply rules to um to create

00:15:16,320 --> 00:15:20,560
new information so in the standard there

00:15:19,040 --> 00:15:22,800
is an example mentioned

00:15:20,560 --> 00:15:24,160
so take a subject that has a default

00:15:22,800 --> 00:15:26,639
geometry

00:15:24,160 --> 00:15:28,000
and that geometry has a serialization

00:15:26,639 --> 00:15:31,680
which is either either

00:15:28,000 --> 00:15:34,720
wkt or gml

00:15:31,680 --> 00:15:38,639
and you can now take another

00:15:34,720 --> 00:15:42,079
object which has a default geometry

00:15:38,639 --> 00:15:45,440
which has also a serialization

00:15:42,079 --> 00:15:47,440
which is object literal and now we can

00:15:45,440 --> 00:15:50,639
filter

00:15:47,440 --> 00:15:54,160
this data set where

00:15:50,639 --> 00:15:57,199
the where the geometry extension

00:15:54,160 --> 00:16:00,800
contains a

00:15:57,199 --> 00:16:04,480
function allows us to test the two

00:16:00,800 --> 00:16:08,000
geometric features and create

00:16:04,480 --> 00:16:11,440
new data so once you enable

00:16:08,000 --> 00:16:15,759
the inference um

00:16:11,440 --> 00:16:15,759
property on the geosparkle

00:16:16,000 --> 00:16:19,199
implementation the system will

00:16:18,160 --> 00:16:22,720
automatically

00:16:19,199 --> 00:16:26,160
infer that the subject

00:16:22,720 --> 00:16:30,720
um contains another object if they have

00:16:26,160 --> 00:16:33,440
an exact corresponding geometry

00:16:30,720 --> 00:16:35,040
relationship so if they are exactly the

00:16:33,440 --> 00:16:38,160
same we will create a new

00:16:35,040 --> 00:16:39,040
assertion in the data set so that's done

00:16:38,160 --> 00:16:42,240
automatically

00:16:39,040 --> 00:16:42,480
uh once you have inference in inference

00:16:42,240 --> 00:16:45,519
and

00:16:42,480 --> 00:16:49,600
enabled in in jenna

00:16:45,519 --> 00:16:52,639
and that should should conclude the

00:16:49,600 --> 00:16:55,600
six components now um

00:16:52,639 --> 00:16:56,240
there are some additional features

00:16:55,600 --> 00:16:59,120
actually

00:16:56,240 --> 00:16:59,920
that where the apache geospatial model

00:16:59,120 --> 00:17:03,759
introduces

00:16:59,920 --> 00:17:04,319
that go uh that go beyond the standard

00:17:03,759 --> 00:17:07,120
uh

00:17:04,319 --> 00:17:09,199
i i think what really uh makes this a

00:17:07,120 --> 00:17:11,439
very valuable contribution to the jenna

00:17:09,199 --> 00:17:13,919
project is the fact that we're making

00:17:11,439 --> 00:17:14,720
use of the apaches spatial information

00:17:13,919 --> 00:17:16,880
system

00:17:14,720 --> 00:17:19,679
which allows us to convert between

00:17:16,880 --> 00:17:21,839
spatial reference systems

00:17:19,679 --> 00:17:25,839
that are out there and not just the

00:17:21,839 --> 00:17:28,799
basic one that is mentioned by wgs84

00:17:25,839 --> 00:17:31,679
we have additional functions such as

00:17:28,799 --> 00:17:34,560
convert we can convert

00:17:31,679 --> 00:17:36,240
from data points into

00:17:34,560 --> 00:17:40,160
[Music]

00:17:36,240 --> 00:17:43,679
geosparkle representation such as

00:17:40,160 --> 00:17:47,120
points and

00:17:43,679 --> 00:17:50,320
we have things such as you know we have

00:17:47,120 --> 00:17:53,120
an awful lot of new functions

00:17:50,320 --> 00:17:53,679
that can be used with uh the geospark

00:17:53,120 --> 00:17:57,760
model

00:17:53,679 --> 00:18:01,919
um let me just have a quick look at

00:17:57,760 --> 00:18:05,039
now if you're really new to um

00:18:01,919 --> 00:18:09,120
to this um jenna uh project

00:18:05,039 --> 00:18:10,720
uh and geosparkle i have just um

00:18:09,120 --> 00:18:12,559
i created this actually this

00:18:10,720 --> 00:18:13,039
presentation initially it was the idea

00:18:12,559 --> 00:18:17,280
to

00:18:13,039 --> 00:18:20,480
do a coding example but with this online

00:18:17,280 --> 00:18:22,960
um you know presentation

00:18:20,480 --> 00:18:23,760
it's probably not doable actually to do

00:18:22,960 --> 00:18:26,000
this uh

00:18:23,760 --> 00:18:29,280
you know in time the 30 minutes that we

00:18:26,000 --> 00:18:32,640
have so when you create your

00:18:29,280 --> 00:18:36,400
java project make sure to uh

00:18:32,640 --> 00:18:39,360
create the dependencies for

00:18:36,400 --> 00:18:40,400
the jenna libraries obviously the basic

00:18:39,360 --> 00:18:43,840
libraries

00:18:40,400 --> 00:18:47,919
and also the dependencies to uh

00:18:43,840 --> 00:18:50,400
the geosparkle modules and

00:18:47,919 --> 00:18:52,080
of course if you want to make use of the

00:18:50,400 --> 00:18:54,799
spatial information system

00:18:52,080 --> 00:18:55,760
features then you will also have to add

00:18:54,799 --> 00:18:57,679
the dependencies

00:18:55,760 --> 00:18:59,200
i think it's required now to add the

00:18:57,679 --> 00:19:03,039
dependencies

00:18:59,200 --> 00:19:05,840
to the spatial information system

00:19:03,039 --> 00:19:06,960
um and once you've created your maven

00:19:05,840 --> 00:19:09,360
project

00:19:06,960 --> 00:19:10,480
you can go ahead and code your

00:19:09,360 --> 00:19:14,640
geosparkle

00:19:10,480 --> 00:19:15,840
um project uh i hope you can see the

00:19:14,640 --> 00:19:19,760
code here

00:19:15,840 --> 00:19:22,160
in in eclipse uh we just set up the

00:19:19,760 --> 00:19:24,640
geospark configuration here this case

00:19:22,160 --> 00:19:28,080
was an in-memory

00:19:24,640 --> 00:19:29,919
index which basically registers

00:19:28,080 --> 00:19:31,840
all the property functions and filter

00:19:29,919 --> 00:19:35,200
functions to

00:19:31,840 --> 00:19:37,200
arc and your sparkle processor

00:19:35,200 --> 00:19:38,960
and next step we create a standard

00:19:37,200 --> 00:19:41,120
jenner model

00:19:38,960 --> 00:19:42,320
which is the default model then load

00:19:41,120 --> 00:19:46,080
some data

00:19:42,320 --> 00:19:48,000
into our model and once we have some

00:19:46,080 --> 00:19:52,080
data in the model we can

00:19:48,000 --> 00:19:55,200
wrap our jetta model into the spatial

00:19:52,080 --> 00:19:57,280
index and create a data set which can

00:19:55,200 --> 00:19:58,240
now be queried with the geosparkle

00:19:57,280 --> 00:20:00,640
extensions

00:19:58,240 --> 00:20:02,559
so you can make use of all the property

00:20:00,640 --> 00:20:05,440
functions and filter functions

00:20:02,559 --> 00:20:07,280
in sparkle so we call that now this this

00:20:05,440 --> 00:20:10,559
is our geosparkle

00:20:07,280 --> 00:20:14,799
in this case we uh we just define uh

00:20:10,559 --> 00:20:17,360
two prefixes uh geo and spatial

00:20:14,799 --> 00:20:18,720
and then we select a subject a subject

00:20:17,360 --> 00:20:22,320
that has

00:20:18,720 --> 00:20:28,080
a spatial relationship

00:20:22,320 --> 00:20:31,360
nearby to a latitude 51.8850

00:20:28,080 --> 00:20:34,880
and a distance of 100 kilometers

00:20:31,360 --> 00:20:38,880
we um wrap that square string

00:20:34,880 --> 00:20:41,280
into the query factory uh once

00:20:38,880 --> 00:20:42,320
we have the query object we can now

00:20:41,280 --> 00:20:45,760
execute

00:20:42,320 --> 00:20:48,960
the query object with uh on the data set

00:20:45,760 --> 00:20:49,760
and we get our result set which is in

00:20:48,960 --> 00:20:52,799
our case

00:20:49,760 --> 00:20:53,440
because we did load the geonames data

00:20:52,799 --> 00:20:56,640
set

00:20:53,440 --> 00:20:58,880
we get two results

00:20:56,640 --> 00:21:00,400
so uh now let's have a graphical

00:20:58,880 --> 00:21:03,919
representation here

00:21:00,400 --> 00:21:08,480
um is is basically uh i

00:21:03,919 --> 00:21:11,919
created a um spatial nearby query

00:21:08,480 --> 00:21:12,799
uh for i took the russell square as the

00:21:11,919 --> 00:21:15,200
center

00:21:12,799 --> 00:21:16,320
and then said that in the range uh give

00:21:15,200 --> 00:21:19,600
me all the

00:21:16,320 --> 00:21:21,840
airports or give me all the data sets

00:21:19,600 --> 00:21:22,720
in the data set that are in range and

00:21:21,840 --> 00:21:26,559
then

00:21:22,720 --> 00:21:30,559
it gives me two results

00:21:26,559 --> 00:21:32,960
which is then stead in gadwick obviously

00:21:30,559 --> 00:21:34,320
one is missing i can simply add more

00:21:32,960 --> 00:21:37,840
data to the data set

00:21:34,320 --> 00:21:41,679
uh heathrow was missing i can now um

00:21:37,840 --> 00:21:45,520
create a new assertion or

00:21:41,679 --> 00:21:48,640
new data and add that into my geosparkle

00:21:45,520 --> 00:21:51,600
server dynamically and i can now

00:21:48,640 --> 00:21:51,600
add and retrieve

00:21:52,159 --> 00:21:57,840
the new data as well now

00:21:56,000 --> 00:21:59,360
let's go to something interesting we do

00:21:57,840 --> 00:22:02,799
some geometry feature

00:21:59,360 --> 00:22:07,200
evaluation um let's assume uh

00:22:02,799 --> 00:22:07,200
you take your favorite gis

00:22:07,520 --> 00:22:14,400
application uh and you can now vectorize

00:22:11,360 --> 00:22:18,960
your data i did an example here by

00:22:14,400 --> 00:22:22,159
vectorizing the denver airport

00:22:18,960 --> 00:22:23,280
which is here hopefully displayed in

00:22:22,159 --> 00:22:27,200
your screen

00:22:23,280 --> 00:22:30,559
i can then export the uh

00:22:27,200 --> 00:22:33,919
the the geometry as a well-known text

00:22:30,559 --> 00:22:36,960
into my turtle file and now

00:22:33,919 --> 00:22:39,600
i also uh create a

00:22:36,960 --> 00:22:41,120
spatial representation of an airplane

00:22:39,600 --> 00:22:44,159
that i would like to test

00:22:41,120 --> 00:22:45,120
in its topological relationship with the

00:22:44,159 --> 00:22:49,200
airport

00:22:45,120 --> 00:22:52,799
um and this is just the basic query

00:22:49,200 --> 00:22:54,799
i bind two of these objects in the query

00:22:52,799 --> 00:22:56,480
so the first one is the denver

00:22:54,799 --> 00:22:59,760
international airport

00:22:56,480 --> 00:23:00,720
shape the second one is the airplane

00:22:59,760 --> 00:23:02,720
which is called

00:23:00,720 --> 00:23:04,320
which is in the example outside the

00:23:02,720 --> 00:23:09,039
airport and

00:23:04,320 --> 00:23:13,520
i can now filter the function

00:23:09,039 --> 00:23:15,679
below here in the last line i ask does

00:23:13,520 --> 00:23:17,200
the denver international airport shape

00:23:15,679 --> 00:23:22,559
contains

00:23:17,200 --> 00:23:26,240
the flight swa1560

00:23:22,559 --> 00:23:30,159
yes or no and i would report false

00:23:26,240 --> 00:23:30,480
in the next test i would try to see if i

00:23:30,159 --> 00:23:33,919
can

00:23:30,480 --> 00:23:36,080
test for the intersection and

00:23:33,919 --> 00:23:37,760
now in this example i have moved the

00:23:36,080 --> 00:23:40,480
airplane

00:23:37,760 --> 00:23:41,520
into the shape not covered it but into

00:23:40,480 --> 00:23:43,840
the shape

00:23:41,520 --> 00:23:46,559
i can now test again i define two

00:23:43,840 --> 00:23:49,440
polygons one is the airport one is the

00:23:46,559 --> 00:23:50,080
intersecting airplane i can now actually

00:23:49,440 --> 00:23:53,279
use the

00:23:50,080 --> 00:23:55,520
relate function which gives me the

00:23:53,279 --> 00:23:57,840
intersection matrix option here so i can

00:23:55,520 --> 00:24:01,679
now ask is there any

00:23:57,840 --> 00:24:04,320
interaction between these two shapes and

00:24:01,679 --> 00:24:05,120
uh the geospatial module would report

00:24:04,320 --> 00:24:08,880
that this is

00:24:05,120 --> 00:24:12,000
indeed the case now the last one

00:24:08,880 --> 00:24:15,360
is a repeat of the first quarry now the

00:24:12,000 --> 00:24:18,799
airplane is inside the airport and

00:24:15,360 --> 00:24:21,679
is again a repeat of the first quarry i

00:24:18,799 --> 00:24:26,080
can ask the filter function here

00:24:21,679 --> 00:24:28,480
does the shape contain the

00:24:26,080 --> 00:24:29,279
airplane which is now inside and would

00:24:28,480 --> 00:24:32,720
report too

00:24:29,279 --> 00:24:35,679
okay very good um in the next one we do

00:24:32,720 --> 00:24:35,679
go to the next

00:24:36,720 --> 00:24:41,360
element in the geosparkle release we

00:24:39,520 --> 00:24:41,919
actually have a full-blown geosparkle

00:24:41,360 --> 00:24:45,440
server

00:24:41,919 --> 00:24:50,720
that comes with the new release

00:24:45,440 --> 00:24:50,720
so you can download or build your own

00:24:50,960 --> 00:24:58,240
geosparkle for ciki server

00:24:54,080 --> 00:25:02,240
you can start your server with either

00:24:58,240 --> 00:25:05,840
a data file or a tdb database

00:25:02,240 --> 00:25:07,919
and run now you can now publish your own

00:25:05,840 --> 00:25:11,120
geosparkle data

00:25:07,919 --> 00:25:14,000
from your own server now once you

00:25:11,120 --> 00:25:15,520
started the server we can now put some

00:25:14,000 --> 00:25:18,960
data into it

00:25:15,520 --> 00:25:20,559
there is a tool that comes with the

00:25:18,960 --> 00:25:24,559
geosparkle server which is

00:25:20,559 --> 00:25:26,480
a ruby tool called sput here we can load

00:25:24,559 --> 00:25:29,520
dynamically data into the

00:25:26,480 --> 00:25:32,320
fuseki server i believe the s

00:25:29,520 --> 00:25:34,080
port actually replaces the data set i

00:25:32,320 --> 00:25:35,200
initially thought it actually adds data

00:25:34,080 --> 00:25:37,840
to the server but

00:25:35,200 --> 00:25:40,240
i believe in the current implementation

00:25:37,840 --> 00:25:43,840
actually replaces the data that's in

00:25:40,240 --> 00:25:45,520
there for seki um instance

00:25:43,840 --> 00:25:47,440
now once you have your data in the

00:25:45,520 --> 00:25:50,640
server you can query it

00:25:47,440 --> 00:25:53,279
uh you can um perform

00:25:50,640 --> 00:25:53,760
simple uh juice marker queries here i'm

00:25:53,279 --> 00:25:57,600
asking

00:25:53,760 --> 00:26:01,039
to give me the geolot and geo long

00:25:57,600 --> 00:26:04,799
the name and the country code for

00:26:01,039 --> 00:26:07,200
the data set we can also explore

00:26:04,799 --> 00:26:08,300
the data set because these are uri

00:26:07,200 --> 00:26:09,679
enabled

00:26:08,300 --> 00:26:12,799
[Music]

00:26:09,679 --> 00:26:17,039
data sets so we can test

00:26:12,799 --> 00:26:20,640
and take a look at these results um

00:26:17,039 --> 00:26:21,440
and in the next step we are actually

00:26:20,640 --> 00:26:24,880
looking at

00:26:21,440 --> 00:26:28,080
the a product that integrates the

00:26:24,880 --> 00:26:29,919
geosparkle module

00:26:28,080 --> 00:26:32,559
already in a commercial product which is

00:26:29,919 --> 00:26:35,679
the top grade edg

00:26:32,559 --> 00:26:37,120
tool um here we are executing the spark

00:26:35,679 --> 00:26:40,720
query on the top

00:26:37,120 --> 00:26:45,679
we get a result set for um

00:26:40,720 --> 00:26:45,679
for our query and we can actually now

00:26:45,840 --> 00:26:51,760
print the result set on a map

00:26:48,880 --> 00:26:54,000
as you can see here i have selected all

00:26:51,760 --> 00:26:54,960
the data points that have a feature code

00:26:54,000 --> 00:26:58,880
hotel

00:26:54,960 --> 00:27:02,640
and a country code filter for

00:26:58,880 --> 00:27:04,880
germany so here we have now a visual

00:27:02,640 --> 00:27:08,960
representation we can now

00:27:04,880 --> 00:27:08,960
make this query more interesting we can

00:27:09,279 --> 00:27:14,840
now add a spatial feature to our data

00:27:12,400 --> 00:27:17,600
set here in this case i'm using the

00:27:14,840 --> 00:27:20,960
qgis

00:27:17,600 --> 00:27:24,399
tool to vectorize data um

00:27:20,960 --> 00:27:24,960
i'm vectorizing here the second largest

00:27:24,399 --> 00:27:28,480
river

00:27:24,960 --> 00:27:32,240
in europe which is the river rhine

00:27:28,480 --> 00:27:34,000
which is now here seen in a simple

00:27:32,240 --> 00:27:37,300
representation here this is a line

00:27:34,000 --> 00:27:38,880
string representation in

00:27:37,300 --> 00:27:42,480
[Music]

00:27:38,880 --> 00:27:46,240
in the gis tool i export that and then

00:27:42,480 --> 00:27:47,840
insert the data into my forsaken server

00:27:46,240 --> 00:27:49,440
as you can see here that's a simple

00:27:47,840 --> 00:27:52,960
insert statement

00:27:49,440 --> 00:27:55,600
i take a subject ryan

00:27:52,960 --> 00:27:58,320
and give it a representation as a

00:27:55,600 --> 00:28:02,320
well-known text format line string

00:27:58,320 --> 00:28:05,840
and and then also type it as a geo

00:28:02,320 --> 00:28:08,559
a well known text literal okay

00:28:05,840 --> 00:28:09,440
now i can insert that into my data set

00:28:08,559 --> 00:28:13,520
in addition

00:28:09,440 --> 00:28:17,440
to my geo names data set and

00:28:13,520 --> 00:28:20,399
i'm using a simple curl

00:28:17,440 --> 00:28:21,840
and here to update this data into my

00:28:20,399 --> 00:28:25,600
forsaken server

00:28:21,840 --> 00:28:28,880
once the data is in my

00:28:25,600 --> 00:28:30,000
forseki server i can query it i'm now

00:28:28,880 --> 00:28:32,640
extending the query

00:28:30,000 --> 00:28:34,000
here with some geosparkle functions so

00:28:32,640 --> 00:28:39,279
first i convert

00:28:34,000 --> 00:28:39,279
the latitude and longitude wgs 84

00:28:39,760 --> 00:28:43,600
data points which are not part of the

00:28:42,000 --> 00:28:46,640
geospatial standard

00:28:43,600 --> 00:28:51,039
into a

00:28:46,640 --> 00:28:53,919
wkt point representation which is

00:28:51,039 --> 00:28:55,520
recommended by the or which is used by

00:28:53,919 --> 00:28:58,399
the geospatial standard

00:28:55,520 --> 00:28:59,360
and i can apply now the spatial function

00:28:58,399 --> 00:29:03,679
nearby

00:28:59,360 --> 00:29:05,600
to a geometric object which is um

00:29:03,679 --> 00:29:07,360
which is the which are all the data

00:29:05,600 --> 00:29:11,120
points in my data set

00:29:07,360 --> 00:29:14,559
and compare that with my vectorized

00:29:11,120 --> 00:29:14,960
representation of the river system i can

00:29:14,559 --> 00:29:17,679
now

00:29:14,960 --> 00:29:18,720
ask to give it a distance so give me

00:29:17,679 --> 00:29:21,520
everything that has

00:29:18,720 --> 00:29:22,559
a distance of one kilometer and i can

00:29:21,520 --> 00:29:27,120
also specify

00:29:22,559 --> 00:29:31,679
a unit in the last

00:29:27,120 --> 00:29:33,440
column here which is kilometers so i can

00:29:31,679 --> 00:29:34,799
look them up there are a number of

00:29:33,440 --> 00:29:38,799
different units available

00:29:34,799 --> 00:29:41,279
in the geosparkle project

00:29:38,799 --> 00:29:42,640
and i can execute that now i get my

00:29:41,279 --> 00:29:45,440
result set

00:29:42,640 --> 00:29:46,559
and can also display that in my screen

00:29:45,440 --> 00:29:49,520
and i can see that

00:29:46,559 --> 00:29:50,559
in my spaceship query i only receive

00:29:49,520 --> 00:29:54,000
hotels that

00:29:50,559 --> 00:29:57,279
are in proximity uh to the river

00:29:54,000 --> 00:30:00,320
ryan uh in my data set

00:29:57,279 --> 00:30:04,720
okay i think uh that concludes my

00:30:00,320 --> 00:30:08,399
um presentation i would like to um

00:30:04,720 --> 00:30:10,480
mention uh the support um and two

00:30:08,399 --> 00:30:12,080
projects that we make heavy use of in

00:30:10,480 --> 00:30:14,640
the geosparkle

00:30:12,080 --> 00:30:15,679
uh project versus the which is the java

00:30:14,640 --> 00:30:19,760
topology

00:30:15,679 --> 00:30:22,960
suite uh jts which we used to do all the

00:30:19,760 --> 00:30:23,919
topological relationship evaluations and

00:30:22,960 --> 00:30:27,120
of course the

00:30:23,919 --> 00:30:29,360
apache spatial information system which

00:30:27,120 --> 00:30:30,399
i believe will also be used or presented

00:30:29,360 --> 00:30:31,290
today later on

00:30:30,399 --> 00:30:33,600
in a session

00:30:31,290 --> 00:30:37,840
[Music]

00:30:33,600 --> 00:30:40,559
and and is a very

00:30:37,840 --> 00:30:42,080
comprehensive set of spatial reference

00:30:40,559 --> 00:30:46,640
systems that

00:30:42,080 --> 00:30:50,799
can be used as part of the geosparkle

00:30:46,640 --> 00:30:52,559
module okay with that if you need to

00:30:50,799 --> 00:30:54,600
if you want to find out more about the

00:30:52,559 --> 00:30:56,000
jenna project please visit the

00:30:54,600 --> 00:30:59,360
jennaapache.org

00:30:56,000 --> 00:31:00,159
website uh there's also a documentation

00:30:59,360 --> 00:31:04,399
available

00:31:00,159 --> 00:31:06,960
about the geosparkle system um

00:31:04,399 --> 00:31:09,840
if you would like to ask questions

00:31:06,960 --> 00:31:11,120
directly please join the apache jenna

00:31:09,840 --> 00:31:15,440
user group

00:31:11,120 --> 00:31:17,760
um by subscribing to the apache jenna

00:31:15,440 --> 00:31:19,120
mailing list please get in touch with me

00:31:17,760 --> 00:31:21,360
if you have any further questions you

00:31:19,120 --> 00:31:25,919
can find me on twitter

00:31:21,360 --> 00:31:33,679
um neumux and uh with that

00:31:25,919 --> 00:31:36,399
i think we are done and

00:31:33,679 --> 00:31:36,399
thank you very much

00:31:36,960 --> 00:31:39,440
questions

00:31:44,880 --> 00:31:47,840
i hope you can hear me

00:31:47,919 --> 00:31:50,399
thank you

00:31:57,519 --> 00:32:02,159
thank you okay if there are no further

00:31:59,440 --> 00:32:06,240
questions i think we are

00:32:02,159 --> 00:32:06,240
out of time right or do we have

00:32:08,960 --> 00:32:18,320
maybe claude if you uh thank you

00:32:14,559 --> 00:32:22,880
if you want to join quickly the audio

00:32:18,320 --> 00:32:24,880
uh i'm trying there okay yeah i think

00:32:22,880 --> 00:32:26,399
um i think we have a little bit more

00:32:24,880 --> 00:32:27,279
time but it doesn't sound like there are

00:32:26,399 --> 00:32:29,200
any questions

00:32:27,279 --> 00:32:31,200
yeah you you had uh i think yes a

00:32:29,200 --> 00:32:34,080
question yesterday about uh

00:32:31,200 --> 00:32:34,799
support for 2d or 3d so we're currently

00:32:34,080 --> 00:32:37,840
supporting

00:32:34,799 --> 00:32:40,640
2d obviously we can represent

00:32:37,840 --> 00:32:41,600
3d data but the spatial evaluation is on

00:32:40,640 --> 00:32:45,760
the 2d

00:32:41,600 --> 00:32:45,760
geometric features um

00:32:46,799 --> 00:32:50,559
so that is something there are also some

00:32:48,720 --> 00:32:53,760
bugs you can help us

00:32:50,559 --> 00:32:56,480
you know to find some of these bugs in

00:32:53,760 --> 00:32:57,760
in the project i just found some in the

00:32:56,480 --> 00:33:01,919
preparation for this

00:32:57,760 --> 00:33:03,039
uh session today uh it's not possible to

00:33:01,919 --> 00:33:06,320
load data

00:33:03,039 --> 00:33:07,120
and create a ttp database at the same

00:33:06,320 --> 00:33:09,919
time

00:33:07,120 --> 00:33:11,840
and you can you can't also use the

00:33:09,919 --> 00:33:14,800
combination of a tdb

00:33:11,840 --> 00:33:16,399
database instance and um

00:33:14,800 --> 00:33:18,080
[Music]

00:33:16,399 --> 00:33:19,760
and inferencing that's currently not

00:33:18,080 --> 00:33:23,519
possible you can only do that

00:33:19,760 --> 00:33:25,840
with from file based data loads

00:33:23,519 --> 00:33:27,279
i see there's a question in 3d i think

00:33:25,840 --> 00:33:30,000
as i mentioned

00:33:27,279 --> 00:33:31,519
3d is definitely something that could be

00:33:30,000 --> 00:33:34,159
of interest in the future

00:33:31,519 --> 00:33:35,840
but that would then also depend on the

00:33:34,159 --> 00:33:39,200
supporting evaluation

00:33:35,840 --> 00:33:40,880
the geometry evaluation support so

00:33:39,200 --> 00:33:43,519
we would have to introduce a whole new

00:33:40,880 --> 00:33:46,559
component for 3d evaluations

00:33:43,519 --> 00:33:46,960
that does mean that you can't annotate

00:33:46,559 --> 00:33:48,799
your

00:33:46,960 --> 00:33:50,399
3d data so you can use latitude

00:33:48,799 --> 00:33:51,279
longitude and height information for

00:33:50,399 --> 00:33:54,559
example

00:33:51,279 --> 00:33:54,559
in your spatial um

00:33:55,279 --> 00:33:59,519
how do we compare to other triple stores

00:33:57,279 --> 00:34:02,720
i think

00:33:59,519 --> 00:34:03,919
um we are quite well positioned in the

00:34:02,720 --> 00:34:06,399
gender project by

00:34:03,919 --> 00:34:07,840
actually supporting all the six

00:34:06,399 --> 00:34:11,760
geosparkle

00:34:07,840 --> 00:34:15,200
ogc components many of the other

00:34:11,760 --> 00:34:16,560
systems do support some spatial

00:34:15,200 --> 00:34:19,760
functions

00:34:16,560 --> 00:34:21,599
but geospark is currently one of the few

00:34:19,760 --> 00:34:24,560
that actually supports all of them

00:34:21,599 --> 00:34:26,560
i can't speak to the specific

00:34:24,560 --> 00:34:31,040
implementation

00:34:26,560 --> 00:34:32,720
of graphdb or other databases

00:34:31,040 --> 00:34:35,520
from what i've seen is they usually

00:34:32,720 --> 00:34:39,200
implement some proximity search

00:34:35,520 --> 00:34:41,440
and since this is a predicate um

00:34:39,200 --> 00:34:43,440
function this is a simple predicate

00:34:41,440 --> 00:34:45,839
function we can hook in in

00:34:43,440 --> 00:34:48,480
actually any kind of spatial evaluation

00:34:45,839 --> 00:34:49,760
here for further evaluation so um it's

00:34:48,480 --> 00:34:53,760
not limited

00:34:49,760 --> 00:34:54,480
to the implementation that we currently

00:34:53,760 --> 00:34:56,480
use

00:34:54,480 --> 00:34:58,640
in the previous implementation we use

00:34:56,480 --> 00:35:02,400
lucine spatial

00:34:58,640 --> 00:35:04,800
for so for an external spatial index

00:35:02,400 --> 00:35:06,160
with the new uh geosparkline

00:35:04,800 --> 00:35:08,320
implementation we're actually having an

00:35:06,160 --> 00:35:11,680
in-memory representation

00:35:08,320 --> 00:35:14,560
which has some benefits

00:35:11,680 --> 00:35:16,240
we need to look at the evaluation and

00:35:14,560 --> 00:35:17,599
scalability of that i haven't really

00:35:16,240 --> 00:35:20,320
looked at it in deep

00:35:17,599 --> 00:35:22,000
in detail but that would be interesting

00:35:20,320 --> 00:35:23,119
uh the benefit currently is that you

00:35:22,000 --> 00:35:25,359
don't have to update

00:35:23,119 --> 00:35:27,280
the station it's dynamically updated

00:35:25,359 --> 00:35:27,920
once you insert data into your data

00:35:27,280 --> 00:35:30,240
store

00:35:27,920 --> 00:35:32,880
it will be readily available for spatial

00:35:30,240 --> 00:35:32,880
evaluation

00:35:38,320 --> 00:35:42,640
okay i think um there are no uh do you

00:35:41,520 --> 00:35:46,320
work on regional

00:35:42,640 --> 00:35:49,839
yeah well there is actually a new

00:35:46,320 --> 00:35:52,000
working group um by the ogc there is a

00:35:49,839 --> 00:35:53,680
new geosparkle working group which looks

00:35:52,000 --> 00:35:57,359
at the next evolution

00:35:53,680 --> 00:36:00,240
of um the geospark at standard so it's a

00:35:57,359 --> 00:36:02,560
perfect time to join that discussion

00:36:00,240 --> 00:36:03,760
it takes a much wider approach it talks

00:36:02,560 --> 00:36:05,760
about all sorts of

00:36:03,760 --> 00:36:08,560
aspects that might not be directly

00:36:05,760 --> 00:36:11,200
related to our current implementation

00:36:08,560 --> 00:36:12,400
but there is definitely work on on the

00:36:11,200 --> 00:36:14,400
next phase

00:36:12,400 --> 00:36:16,000
of juice barker we might actually it

00:36:14,400 --> 00:36:17,119
might be called actually something else

00:36:16,000 --> 00:36:20,720
in the future

00:36:17,119 --> 00:36:21,839
but um definitely we will participate in

00:36:20,720 --> 00:36:26,480
the discussion as well

00:36:21,839 --> 00:36:28,880
looks like marco locked up there oh

00:36:26,480 --> 00:36:29,599
can we work with stream and moving

00:36:28,880 --> 00:36:31,440
objects

00:36:29,599 --> 00:36:33,359
i think at the moment we do have these

00:36:31,440 --> 00:36:37,680
manual updates

00:36:33,359 --> 00:36:40,400
of the spa of the am i back again

00:36:37,680 --> 00:36:41,839
it may have been me um okay there for a

00:36:40,400 --> 00:36:43,920
moment but yeah

00:36:41,839 --> 00:36:44,880
you're there okay andy says looks fine

00:36:43,920 --> 00:36:46,960
um

00:36:44,880 --> 00:36:48,960
yeah no i can't speak to that at the

00:36:46,960 --> 00:36:50,720
moment i don't think that we have uh

00:36:48,960 --> 00:36:55,839
dynamic uh streams

00:36:50,720 --> 00:36:55,839
in juice park at the moment

00:36:56,800 --> 00:37:00,000
okay well it's i think we're perfectly

00:36:58,960 --> 00:37:03,359
in time right so it's

00:37:00,000 --> 00:37:08,400
uh um we're almost two more minutes

00:37:03,359 --> 00:37:12,079
ready for the thank you um

00:37:08,400 --> 00:37:15,920
my eat up um please get in touch with me

00:37:12,079 --> 00:37:17,440
directly if you have any other questions

00:37:15,920 --> 00:37:19,839
and see you in the next session maybe i

00:37:17,440 --> 00:37:23,520
see you somewhere else today

00:37:19,839 --> 00:37:24,240
and yeah we um so we have the slack

00:37:23,520 --> 00:37:25,839
channel

00:37:24,240 --> 00:37:27,520
we have the slack channel for uh

00:37:25,839 --> 00:37:29,040
apachecon jenna

00:37:27,520 --> 00:37:30,720
uh slack channel if you want to jump

00:37:29,040 --> 00:37:33,920
over there and ask questions or

00:37:30,720 --> 00:37:37,280
uh there are some more talks uh later

00:37:33,920 --> 00:37:41,280
later today when is the next

00:37:37,280 --> 00:37:43,440
uh general session uh

00:37:41,280 --> 00:37:44,800
that one's mine and i don't remember

00:37:43,440 --> 00:37:46,079
it's okay

00:37:44,800 --> 00:37:47,920
i don't want to think about it it's this

00:37:46,079 --> 00:37:50,160
evening my time that's what i remember

00:37:47,920 --> 00:37:51,760
yeah so yeah i think three or four more

00:37:50,160 --> 00:37:53,760
presentations

00:37:51,760 --> 00:37:56,720
in the jenner track there's also the

00:37:53,760 --> 00:38:00,480
spatial presentation later on

00:37:56,720 --> 00:38:04,240
and something i'd like to check out the

00:38:00,480 --> 00:38:07,520
apache sis uh

00:38:04,240 --> 00:38:09,599
implementation and yeah no so far so

00:38:07,520 --> 00:38:11,359
good i think it's quite a

00:38:09,599 --> 00:38:13,200
quite an interesting experience this

00:38:11,359 --> 00:38:16,640
apache con and it works better than i

00:38:13,200 --> 00:38:16,640
ever expected you know i like the

00:38:16,839 --> 00:38:19,839
um

00:38:20,400 --> 00:38:28,880
yeah okay okay thank you everybody for

00:38:23,680 --> 00:38:33,920
attending and we'll see you all later

00:38:28,880 --> 00:38:33,920
thank you for joining us bye see you

00:38:44,839 --> 00:38:47,839
later

00:38:56,720 --> 00:38:58,800

YouTube URL: https://www.youtube.com/watch?v=CtP6x3V5Grc


