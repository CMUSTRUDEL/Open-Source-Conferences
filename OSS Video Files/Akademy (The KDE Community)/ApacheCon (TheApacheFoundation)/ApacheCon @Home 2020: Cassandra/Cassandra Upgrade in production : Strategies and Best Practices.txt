Title: Cassandra Upgrade in production : Strategies and Best Practices
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Cassandra
Description: 
	Cassandra Upgrade in production : Strategies and Best Practices
Laxmikant Upadhyay

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

This session will cover how to perform Cassandra cluster upgrade in production effectively. We will learn about best practices for planning & executing Cassandra upgrades. We will also discuss and understand different Cassandra upgrade strategies and their respective pros & cons so that Operations team can select the appropriate strategy. Finally, we will talk about standard upgrade issues and how we have created custom solutions at Ericsson to overcome those issues. The session is useful for Cassandra Operators, Administrators and other Cassandra users involved in planning, performing and testing upgrades.

Laxmikant Upadhyay is an Apache Cassandra enthusiast with over 10 years of experience in developing mutliple distributed scalable and HA software solutions. Currently, he works as Sr. Data engineer (nosql) and Cassandra SME with American Express R&D. He is core contributor of open source Cassandra Audtiing plugin ecaudit . He has designed and implemented multiple distributed, fault tolerant, scalable and HA software systems. He has helped many teams in designing efficient and scalable data model and performance tuning of C*.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:27,119 --> 00:00:32,000
okay so

00:00:27,760 --> 00:00:35,520
uh so thank you uh all for joining this

00:00:32,000 --> 00:00:39,520
call so uh let me first

00:00:35,520 --> 00:00:43,520
introduce myself so i am lakshmikanth

00:00:39,520 --> 00:00:46,800
i'm currently working as a senior

00:00:43,520 --> 00:00:49,920
no sql database engineer and cassandra

00:00:46,800 --> 00:00:52,399
subject matter expert at mx

00:00:49,920 --> 00:00:54,079
uh so i have overall 10 years of

00:00:52,399 --> 00:00:55,760
experience in software industry

00:00:54,079 --> 00:00:57,440
uh however i have been working on

00:00:55,760 --> 00:01:00,559
cassandra for

00:00:57,440 --> 00:01:04,159
last six years now uh

00:01:00,559 --> 00:01:04,960
well uh in this session uh i'm gonna

00:01:04,159 --> 00:01:08,880
talk about

00:01:04,960 --> 00:01:11,200
sandra upgrade uh

00:01:08,880 --> 00:01:12,799
different upgrade strategies uh best

00:01:11,200 --> 00:01:15,600
practices

00:01:12,799 --> 00:01:16,560
all the do's and don'ts and about

00:01:15,600 --> 00:01:18,880
rollback

00:01:16,560 --> 00:01:21,439
so during this presentation i'll be

00:01:18,880 --> 00:01:22,720
giving uh some real examples of issues

00:01:21,439 --> 00:01:25,920
of paste by me

00:01:22,720 --> 00:01:26,720
during upgrades this session is

00:01:25,920 --> 00:01:28,560
important for

00:01:26,720 --> 00:01:30,079
new cassandra users who is planning to

00:01:28,560 --> 00:01:32,159
do uh update

00:01:30,079 --> 00:01:33,119
and it will have some useful uh

00:01:32,159 --> 00:01:35,200
information

00:01:33,119 --> 00:01:36,560
for experience administrator and users

00:01:35,200 --> 00:01:39,520
as well

00:01:36,560 --> 00:01:40,560
and uh feel free to post your question

00:01:39,520 --> 00:01:43,680
on the chat box

00:01:40,560 --> 00:01:47,360
uh i'll try to answer them at the end of

00:01:43,680 --> 00:01:49,600
this session uh one disclaimer is that

00:01:47,360 --> 00:01:50,640
all the information are shared here is

00:01:49,600 --> 00:01:53,759
based on my own

00:01:50,640 --> 00:01:56,640
uh experience with cassandra in various

00:01:53,759 --> 00:01:58,799
and it uh do not express the view of my

00:01:56,640 --> 00:02:01,920
current employer

00:01:58,799 --> 00:02:04,960
so now let's start okay

00:02:01,920 --> 00:02:05,680
i had used some jiffy but i don't think

00:02:04,960 --> 00:02:08,879
it will work

00:02:05,680 --> 00:02:11,840
in this ppt uh in this

00:02:08,879 --> 00:02:12,319
pdf mode but anyway so the first thing

00:02:11,840 --> 00:02:15,680
is that

00:02:12,319 --> 00:02:18,640
um why even we need to upgrade

00:02:15,680 --> 00:02:19,360
so uh there can be a couple of good

00:02:18,640 --> 00:02:23,120
reasons

00:02:19,360 --> 00:02:25,680
for upgrade so if your current version

00:02:23,120 --> 00:02:27,680
has reached end of life uh that means it

00:02:25,680 --> 00:02:31,280
is no more supported by the community

00:02:27,680 --> 00:02:31,920
and patches or bug bug fixes will not be

00:02:31,280 --> 00:02:35,280
available

00:02:31,920 --> 00:02:39,120
on this version for example santa 2.0

00:02:35,280 --> 00:02:42,879
and soon cassandra 2.1 will be reaching

00:02:39,120 --> 00:02:45,519
uh end of life after the release of 4.2

00:02:42,879 --> 00:02:46,480
so so fixes and improvement changes are

00:02:45,519 --> 00:02:50,959
done only

00:02:46,480 --> 00:02:53,599
uh in the latest releases so now

00:02:50,959 --> 00:02:54,160
even even if your uh cassandra has

00:02:53,599 --> 00:02:56,080
reached

00:02:54,160 --> 00:02:57,680
end of life you might not bother

00:02:56,080 --> 00:02:59,200
upgrading your cluster because

00:02:57,680 --> 00:03:02,239
uh your cluster may be running

00:02:59,200 --> 00:03:04,800
absolutely uh fine uh without any issue

00:03:02,239 --> 00:03:05,360
but one thing uh uh we should keep in

00:03:04,800 --> 00:03:08,239
mind that

00:03:05,360 --> 00:03:09,760
uh that the longer the gap more complex

00:03:08,239 --> 00:03:12,319
the upgrade process is

00:03:09,760 --> 00:03:13,280
so so this is one of the reasons that it

00:03:12,319 --> 00:03:16,159
is recommended

00:03:13,280 --> 00:03:18,319
uh to be on let's work with releases and

00:03:16,159 --> 00:03:19,120
this will help to keep our future

00:03:18,319 --> 00:03:22,239
upgrade process

00:03:19,120 --> 00:03:25,200
smooth now new feature

00:03:22,239 --> 00:03:26,319
uh may also attract you to do upgrade uh

00:03:25,200 --> 00:03:28,959
for example

00:03:26,319 --> 00:03:30,080
uh if you want five times a faster

00:03:28,959 --> 00:03:32,799
scaling operation

00:03:30,080 --> 00:03:35,120
or you want to use virtual table or you

00:03:32,799 --> 00:03:35,920
want to use audit logging for security

00:03:35,120 --> 00:03:38,959
reason

00:03:35,920 --> 00:03:40,080
then cassandra 4.0 has all these cool

00:03:38,959 --> 00:03:44,480
features and you

00:03:40,080 --> 00:03:48,000
may want to upgrade 4.0 in future

00:03:44,480 --> 00:03:50,879
now just for the information here that

00:03:48,000 --> 00:03:51,840
uh if you just want audit logging uh

00:03:50,879 --> 00:03:55,280
then

00:03:51,840 --> 00:03:58,319
uh ericsson's ec audit uh plugin is

00:03:55,280 --> 00:04:01,760
available uh on github for free

00:03:58,319 --> 00:04:03,439
uh so if you wanna use it for your older

00:04:01,760 --> 00:04:06,560
cassandra version you can use that

00:04:03,439 --> 00:04:08,000
as well now the other reason you may

00:04:06,560 --> 00:04:10,400
want to upgrade your cluster

00:04:08,000 --> 00:04:11,280
that if your cluster uh cassandra

00:04:10,400 --> 00:04:13,840
version

00:04:11,280 --> 00:04:14,640
has some known bug or vulnerabilities so

00:04:13,840 --> 00:04:17,759
for example

00:04:14,640 --> 00:04:21,120
uh we have recently uh heard um

00:04:17,759 --> 00:04:21,840
that this tv 2020 uh this one three nine

00:04:21,120 --> 00:04:24,639
four six

00:04:21,840 --> 00:04:26,560
rmi rewind uh vulnerabilities uh which

00:04:24,639 --> 00:04:30,240
has been fixed in the latest pack

00:04:26,560 --> 00:04:32,960
but uh but you are exposed to this only

00:04:30,240 --> 00:04:33,600
if your jmx port is accessible outside a

00:04:32,960 --> 00:04:35,919
world

00:04:33,600 --> 00:04:37,759
if not then you don't have to worry

00:04:35,919 --> 00:04:40,160
about it

00:04:37,759 --> 00:04:42,000
so mostly mostly these are the reasons

00:04:40,160 --> 00:04:44,880
when the team thinks to upgrade their

00:04:42,000 --> 00:04:48,479
cassandra cluster

00:04:44,880 --> 00:04:52,000
now i remember uh during

00:04:48,479 --> 00:04:56,080
our school days we used to get homework

00:04:52,000 --> 00:04:58,560
assignments so

00:04:56,080 --> 00:05:00,479
so to have a smooth upgrade in your

00:04:58,560 --> 00:05:02,560
production so i am suggesting five

00:05:00,479 --> 00:05:05,120
homeworks which we should do

00:05:02,560 --> 00:05:06,479
so the first homework is uh open jira

00:05:05,120 --> 00:05:08,400
ticket analysis

00:05:06,479 --> 00:05:09,600
so let's say you want to upgrade to

00:05:08,400 --> 00:05:13,120
version x

00:05:09,600 --> 00:05:13,840
so give a look uh on the open jira and

00:05:13,120 --> 00:05:16,240
make sure

00:05:13,840 --> 00:05:19,600
uh no existing feature which your

00:05:16,240 --> 00:05:23,039
application is using is broken

00:05:19,600 --> 00:05:26,880
now the the second

00:05:23,039 --> 00:05:29,280
uh homework is uh find out the answer of

00:05:26,880 --> 00:05:30,639
these important questions so the first

00:05:29,280 --> 00:05:33,280
uh question is

00:05:30,639 --> 00:05:35,440
that is there any changes required at

00:05:33,280 --> 00:05:38,479
your client application level

00:05:35,440 --> 00:05:40,800
and often i mean i have noticed that the

00:05:38,479 --> 00:05:42,800
db operations teams miss this part

00:05:40,800 --> 00:05:45,039
uh because of lack of collaboration

00:05:42,800 --> 00:05:47,520
close cloud collaboration with the

00:05:45,039 --> 00:05:48,479
application teams so this is an

00:05:47,520 --> 00:05:51,600
important item

00:05:48,479 --> 00:05:52,400
in your update checklist especially if

00:05:51,600 --> 00:05:55,600
you are

00:05:52,400 --> 00:05:58,639
planning to do a major version update uh

00:05:55,600 --> 00:06:00,800
now uh uh for for example uh

00:05:58,639 --> 00:06:02,160
if you are upgrading from 2.1 to three

00:06:00,800 --> 00:06:04,639
dot x and you're

00:06:02,160 --> 00:06:05,360
you are using uh the java driver version

00:06:04,639 --> 00:06:08,400
as

00:06:05,360 --> 00:06:09,840
2.1 well this this is gonna fail when

00:06:08,400 --> 00:06:12,400
you start upgrading

00:06:09,840 --> 00:06:14,160
so it makes sense to update your driver

00:06:12,400 --> 00:06:17,600
version first

00:06:14,160 --> 00:06:20,160
now now if you are uh

00:06:17,600 --> 00:06:20,800
making uh the driver version uh update

00:06:20,160 --> 00:06:23,440
uh your

00:06:20,800 --> 00:06:24,479
application team might not just have to

00:06:23,440 --> 00:06:27,199
bump the version

00:06:24,479 --> 00:06:27,840
uh it may require some more work in case

00:06:27,199 --> 00:06:31,280
there is some

00:06:27,840 --> 00:06:32,840
api level changes at the higher version

00:06:31,280 --> 00:06:34,800
or

00:06:32,840 --> 00:06:37,919
driver now um

00:06:34,800 --> 00:06:40,080
one more uh point like i would like to

00:06:37,919 --> 00:06:41,360
add here that in some of the application

00:06:40,080 --> 00:06:45,039
uh i have seen that

00:06:41,360 --> 00:06:45,680
uh uh though the application directly

00:06:45,039 --> 00:06:49,280
access

00:06:45,680 --> 00:06:51,919
the cassandra system internal tables

00:06:49,280 --> 00:06:53,599
i i mean uh for example to get the list

00:06:51,919 --> 00:06:55,759
of existing key spaces

00:06:53,599 --> 00:06:56,639
in older cassandra version uh they will

00:06:55,759 --> 00:07:00,160
do select

00:06:56,639 --> 00:07:03,919
uh uh all from uh system dot

00:07:00,160 --> 00:07:06,800
schema key is stable now now this

00:07:03,919 --> 00:07:07,680
line of code will break when you try to

00:07:06,800 --> 00:07:11,520
upgrade to

00:07:07,680 --> 00:07:13,360
uh cassandra to the higher version

00:07:11,520 --> 00:07:17,039
because now the schema information

00:07:13,360 --> 00:07:20,560
is kept in system underscore

00:07:17,039 --> 00:07:21,199
schema key spaces so so i would suggest

00:07:20,560 --> 00:07:23,759
that uh

00:07:21,199 --> 00:07:24,319
whenever possible i mean let the driver

00:07:23,759 --> 00:07:27,840
access

00:07:24,319 --> 00:07:28,240
the system uh tables uh any they anyway

00:07:27,840 --> 00:07:30,960
do

00:07:28,240 --> 00:07:32,479
uh the application uh should use a

00:07:30,960 --> 00:07:36,319
driver's api to get such

00:07:32,479 --> 00:07:39,840
information and avoid such uh issue

00:07:36,319 --> 00:07:42,880
now the next uh question which

00:07:39,840 --> 00:07:45,360
uh uh to ask is that uh

00:07:42,880 --> 00:07:47,440
do you need to run update such table

00:07:45,360 --> 00:07:50,479
post upgrade

00:07:47,440 --> 00:07:50,479
uh now

00:07:50,560 --> 00:07:56,319
so the basic uh thing is that we divide

00:07:53,599 --> 00:07:57,520
uh sandra upgrade in two parts so one is

00:07:56,319 --> 00:08:00,400
the binary upgrade

00:07:57,520 --> 00:08:02,479
and the second is upgrading the older

00:08:00,400 --> 00:08:03,039
access tables to the newer version using

00:08:02,479 --> 00:08:06,080
node tool

00:08:03,039 --> 00:08:08,800
upgrade table command so

00:08:06,080 --> 00:08:09,280
a short answer to this question is that

00:08:08,800 --> 00:08:12,400
yes

00:08:09,280 --> 00:08:15,360
we do need to run upgrade sustainable

00:08:12,400 --> 00:08:17,039
post upgrade after every upgrade but in

00:08:15,360 --> 00:08:20,639
some minor version upgrade

00:08:17,039 --> 00:08:23,520
you may not need to run it

00:08:20,639 --> 00:08:25,280
however whenever in doubt uh run the

00:08:23,520 --> 00:08:28,560
updated stable since

00:08:25,280 --> 00:08:28,960
it will be a no op if ss tables need not

00:08:28,560 --> 00:08:32,080
to be

00:08:28,960 --> 00:08:35,279
rewritten and it also makes sense

00:08:32,080 --> 00:08:37,519
that uh to keep the same steps in your

00:08:35,279 --> 00:08:38,000
upgrade automation playlist to avoid any

00:08:37,519 --> 00:08:41,360
issue

00:08:38,000 --> 00:08:44,800
due to incompatibility

00:08:41,360 --> 00:08:48,160
now the next question

00:08:44,800 --> 00:08:51,040
which is to ask is that

00:08:48,160 --> 00:08:53,040
like how you are going to handle

00:08:51,040 --> 00:08:55,600
unsupported native protocol

00:08:53,040 --> 00:08:56,880
version so what is what is natural

00:08:55,600 --> 00:09:00,000
native protocol

00:08:56,880 --> 00:09:00,720
so the native protocol is the protocol

00:09:00,000 --> 00:09:03,760
through which

00:09:00,720 --> 00:09:04,880
uh your driver and cassandra talk to

00:09:03,760 --> 00:09:09,200
each other over

00:09:04,880 --> 00:09:11,360
tcp so by default the protocol version

00:09:09,200 --> 00:09:12,800
is negotiated between driver and sandra

00:09:11,360 --> 00:09:16,320
when the first connection

00:09:12,800 --> 00:09:19,360
is uh established now this could lead to

00:09:16,320 --> 00:09:20,000
the situation shown in the image here so

00:09:19,360 --> 00:09:23,360
let's say

00:09:20,000 --> 00:09:26,640
you are upgrading uh from uh 2.02

00:09:23,360 --> 00:09:29,519
to 2.1

00:09:26,640 --> 00:09:30,959
and the first contact point at the

00:09:29,519 --> 00:09:34,560
application side

00:09:30,959 --> 00:09:38,000
is 2.1 host so the driver will

00:09:34,560 --> 00:09:40,160
negotiate with protocol version b3

00:09:38,000 --> 00:09:42,480
however it won't be able to connect to

00:09:40,160 --> 00:09:45,839
the rest of the 2.0 node

00:09:42,480 --> 00:09:48,160
with same v3 version and it will fail

00:09:45,839 --> 00:09:49,279
due to unsupported protocol version

00:09:48,160 --> 00:09:52,959
exception

00:09:49,279 --> 00:09:55,040
and your driver will ignore all these uh

00:09:52,959 --> 00:09:56,080
these the rest of the node which are on

00:09:55,040 --> 00:09:58,240
2.0

00:09:56,080 --> 00:10:00,160
so so the so what's the issue here so

00:09:58,240 --> 00:10:02,480
the issue

00:10:00,160 --> 00:10:04,480
here is that in this particular case

00:10:02,480 --> 00:10:07,920
there is a stance that your application

00:10:04,480 --> 00:10:11,120
um uh can go temporarily unavailable

00:10:07,920 --> 00:10:14,399
uh if this node the 2.1 node uh

00:10:11,120 --> 00:10:17,200
goes down and even if this node

00:10:14,399 --> 00:10:18,399
doesn't go down so all the requests from

00:10:17,200 --> 00:10:22,240
client uh

00:10:18,399 --> 00:10:25,600
is uh landing to this 2.1 uh node and

00:10:22,240 --> 00:10:28,800
this node becomes a bottleneck

00:10:25,600 --> 00:10:29,680
temporarily you know until some of some

00:10:28,800 --> 00:10:33,279
more nodes are

00:10:29,680 --> 00:10:35,680
updated um one more issue

00:10:33,279 --> 00:10:36,720
uh which recently observed and it is

00:10:35,680 --> 00:10:39,519
specific to

00:10:36,720 --> 00:10:40,320
a mixed version cluster of 2.1 and three

00:10:39,519 --> 00:10:44,320
dot x

00:10:40,320 --> 00:10:47,040
the and if you are using a pg nation

00:10:44,320 --> 00:10:48,800
that your query will fail uh the

00:10:47,040 --> 00:10:50,880
paginated query will fail due to

00:10:48,800 --> 00:10:52,480
incompatible paging state between

00:10:50,880 --> 00:10:54,720
different protocol version

00:10:52,480 --> 00:10:55,760
and for details you can you can check

00:10:54,720 --> 00:10:59,360
this cassandra

00:10:55,760 --> 00:11:02,480
uh a one five one nine three uh ticket

00:10:59,360 --> 00:11:05,519
so now what's the uh resolution here so

00:11:02,480 --> 00:11:08,160
to resolve these two uh you

00:11:05,519 --> 00:11:09,279
you have uh these these uh following

00:11:08,160 --> 00:11:12,640
options so the first

00:11:09,279 --> 00:11:15,600
is while upgrading at the client side

00:11:12,640 --> 00:11:16,959
you can set a lower protocol version if

00:11:15,600 --> 00:11:19,120
it is configurable

00:11:16,959 --> 00:11:20,399
so that it does not negotiate with the

00:11:19,120 --> 00:11:22,399
higher version here

00:11:20,399 --> 00:11:23,519
uh so in this particular case you have

00:11:22,399 --> 00:11:26,240
to set uh to

00:11:23,519 --> 00:11:28,320
v2 uh for the mixed version cluster

00:11:26,240 --> 00:11:32,320
between 2.0 and 2.1

00:11:28,320 --> 00:11:35,839
and if it is not configurable at the

00:11:32,320 --> 00:11:38,000
i mean at the application level

00:11:35,839 --> 00:11:39,839
then make sure that the client side

00:11:38,000 --> 00:11:42,240
contact point list does not have

00:11:39,839 --> 00:11:44,959
upgraded node until a number of nodes

00:11:42,240 --> 00:11:48,399
has been upgraded

00:11:44,959 --> 00:11:52,000
or the third point is that like

00:11:48,399 --> 00:11:55,600
uh if you are upgrading to 311

00:11:52,000 --> 00:11:59,360
5 or 3019 or higher version then you can

00:11:55,600 --> 00:12:00,160
set this native transport max negotiable

00:11:59,360 --> 00:12:03,440
protocol

00:12:00,160 --> 00:12:03,920
version in sandra yaml at at servers

00:12:03,440 --> 00:12:06,959
right at

00:12:03,920 --> 00:12:09,279
cassandra site and this

00:12:06,959 --> 00:12:11,279
this parameter in this configuration

00:12:09,279 --> 00:12:14,959
parameter was introduced to resolve

00:12:11,279 --> 00:12:18,399
this ticket uh 15193 only

00:12:14,959 --> 00:12:19,680
now well i mean it might sound a little

00:12:18,399 --> 00:12:22,240
complicated

00:12:19,680 --> 00:12:22,800
but the good news is that in the latest

00:12:22,240 --> 00:12:26,399
driver

00:12:22,800 --> 00:12:27,920
for example java 4.x it supports

00:12:26,399 --> 00:12:30,959
automatic negotiation

00:12:27,920 --> 00:12:33,600
uh even in the mixed version cluster

00:12:30,959 --> 00:12:35,760
so you don't need to force the lower

00:12:33,600 --> 00:12:37,600
native protocol version manually anymore

00:12:35,760 --> 00:12:39,600
uh during the update so that's the

00:12:37,600 --> 00:12:42,800
that's a very uh very good uh

00:12:39,600 --> 00:12:47,760
thing um

00:12:42,800 --> 00:12:50,079
now the the next question to ask

00:12:47,760 --> 00:12:51,360
and uh this is one of the most

00:12:50,079 --> 00:12:53,760
frequently uh

00:12:51,360 --> 00:12:54,720
frequently asked question about

00:12:53,760 --> 00:12:58,240
cassandra upgrade

00:12:54,720 --> 00:13:01,519
like that do i need uh

00:12:58,240 --> 00:13:03,440
to take an intermediate upgrade so

00:13:01,519 --> 00:13:05,519
if you just google this cassandra

00:13:03,440 --> 00:13:07,920
upgrade and you will see lots of similar

00:13:05,519 --> 00:13:10,959
questionnaires on stack overflow

00:13:07,920 --> 00:13:11,600
now here i would like to uh uh like to

00:13:10,959 --> 00:13:14,720
answer

00:13:11,600 --> 00:13:18,000
uh uh some of them very quickly so

00:13:14,720 --> 00:13:20,720
let's say uh uh let's say you want to uh

00:13:18,000 --> 00:13:21,200
upgrade to 3.x so if your current

00:13:20,720 --> 00:13:26,000
version

00:13:21,200 --> 00:13:27,600
is 219 or 2.2.2

00:13:26,000 --> 00:13:30,399
you don't need to worry about any

00:13:27,600 --> 00:13:32,160
intermediate upgrade uh

00:13:30,399 --> 00:13:34,240
i mean a while while upgrading to three

00:13:32,160 --> 00:13:37,200
or three dot x

00:13:34,240 --> 00:13:37,519
if you have any older version then uh

00:13:37,200 --> 00:13:40,560
you

00:13:37,519 --> 00:13:42,800
need an intermediate uh upgrade

00:13:40,560 --> 00:13:43,839
and now let's say you want to upgrade to

00:13:42,800 --> 00:13:47,120
four button

00:13:43,839 --> 00:13:48,000
so you cannot upgrade to uh cannot

00:13:47,120 --> 00:13:51,120
upgrade uh

00:13:48,000 --> 00:13:53,680
from 2.x version to 4.0 directly

00:13:51,120 --> 00:13:54,800
i mean you have to upgrade to three dot

00:13:53,680 --> 00:13:57,440
x first

00:13:54,800 --> 00:13:57,920
and upgrade from p dot x are supported

00:13:57,440 --> 00:14:03,040
since

00:13:57,920 --> 00:14:06,399
3 0 13 or 3 11 0. however

00:14:03,040 --> 00:14:08,880
uh now if you are expected to use uh

00:14:06,399 --> 00:14:09,600
tracing in the mixed version cluster

00:14:08,880 --> 00:14:13,600
then

00:14:09,600 --> 00:14:14,800
you should be at least on 2 or 20 or 20

00:14:13,600 --> 00:14:18,000
or 311

00:14:14,800 --> 00:14:20,480
6. it is because

00:14:18,000 --> 00:14:22,399
some additional column has been added in

00:14:20,480 --> 00:14:25,360
system traces event and six

00:14:22,399 --> 00:14:26,000
section tables and it will cause a

00:14:25,360 --> 00:14:29,040
failure

00:14:26,000 --> 00:14:30,370
uh during upgrade if you are at the a if

00:14:29,040 --> 00:14:31,519
you are using some lower version

00:14:30,370 --> 00:14:33,680
[Music]

00:14:31,519 --> 00:14:35,120
and on the in the mixed version cluster

00:14:33,680 --> 00:14:37,839
in t dot x

00:14:35,120 --> 00:14:38,560
side uh this will also lead to broken

00:14:37,839 --> 00:14:41,920
internode

00:14:38,560 --> 00:14:44,480
connection so for details uh you

00:14:41,920 --> 00:14:46,800
you can check one cassandra one five

00:14:44,480 --> 00:14:49,360
three eight five uh ticket so

00:14:46,800 --> 00:14:50,480
it makes sense to be on at least on this

00:14:49,360 --> 00:14:54,079
version before

00:14:50,480 --> 00:14:54,079
upgrading to 4.2

00:14:54,800 --> 00:15:02,480
now the so okay so

00:14:58,959 --> 00:15:05,360
um to cut cut it short i mean uh

00:15:02,480 --> 00:15:07,839
if you want an answer uh if you want the

00:15:05,360 --> 00:15:10,079
answer to the question that whether i

00:15:07,839 --> 00:15:11,279
can directly upgrade from version x to

00:15:10,079 --> 00:15:14,880
version y

00:15:11,279 --> 00:15:17,680
or not you know just refer to news.txt

00:15:14,880 --> 00:15:19,680
and that is what the next homework is

00:15:17,680 --> 00:15:23,519
like

00:15:19,680 --> 00:15:25,839
uh so all the upgrade path will be well

00:15:23,519 --> 00:15:26,639
explained here and not just the upgrade

00:15:25,839 --> 00:15:29,600
path but

00:15:26,639 --> 00:15:30,480
all the important upgrade instruction uh

00:15:29,600 --> 00:15:34,079
is present

00:15:30,480 --> 00:15:34,880
in news.exe so so reading at least the

00:15:34,079 --> 00:15:38,079
upgrading

00:15:34,880 --> 00:15:40,560
uh section of news.txt is a must do

00:15:38,079 --> 00:15:44,079
homework um

00:15:40,560 --> 00:15:48,959
now the next

00:15:44,079 --> 00:15:48,959
uh homework is

00:15:49,040 --> 00:15:52,800
is very uh is very obvious that

00:15:51,600 --> 00:15:55,839
automaties

00:15:52,800 --> 00:15:56,880
automate uh uh the entire thing so in

00:15:55,839 --> 00:16:00,240
ideal scenario

00:15:56,880 --> 00:16:00,880
uh the the uh the upgrade to entire

00:16:00,240 --> 00:16:04,240
cluster

00:16:00,880 --> 00:16:07,600
should be with one click on a button so

00:16:04,240 --> 00:16:10,320
i mean uh now which tool uh

00:16:07,600 --> 00:16:11,120
you should use uh so i would say uh like

00:16:10,320 --> 00:16:13,360
go ahead with

00:16:11,120 --> 00:16:14,160
with the tools or combination of tool uh

00:16:13,360 --> 00:16:17,279
which your

00:16:14,160 --> 00:16:19,040
team is uh comfortable with or which is

00:16:17,279 --> 00:16:20,959
used in your organization it could be

00:16:19,040 --> 00:16:24,560
open source or propriety

00:16:20,959 --> 00:16:28,320
and if you are exploring new tools

00:16:24,560 --> 00:16:30,240
for upgrade so take a look at uh cstar

00:16:28,320 --> 00:16:32,800
uh in fact there is already a session

00:16:30,240 --> 00:16:32,800
scheduled

00:16:33,759 --> 00:16:36,880
which will discuss upgrading cassandra

00:16:36,320 --> 00:16:39,839
using c

00:16:36,880 --> 00:16:41,199
star so it's a worth watch so you can

00:16:39,839 --> 00:16:44,639
you can check that

00:16:41,199 --> 00:16:50,079
uh now the

00:16:44,639 --> 00:16:53,839
the last but

00:16:50,079 --> 00:16:56,399
the last homework um but not the least

00:16:53,839 --> 00:16:56,880
is that before you go to production test

00:16:56,399 --> 00:16:59,920
it

00:16:56,880 --> 00:17:02,880
in your staging area and test it well

00:16:59,920 --> 00:17:04,480
well so perform all the functional and

00:17:02,880 --> 00:17:07,679
non-functional testing

00:17:04,480 --> 00:17:11,600
and during uh during the testing a

00:17:07,679 --> 00:17:13,919
monitor or cassandra matrices

00:17:11,600 --> 00:17:15,439
and these are some of the important

00:17:13,919 --> 00:17:19,760
metrics which you should monitor

00:17:15,439 --> 00:17:22,880
like 95 to 99 percent latencies

00:17:19,760 --> 00:17:25,839
he uh he uses gc pauses check

00:17:22,880 --> 00:17:26,559
if there is any exceptions or not uh

00:17:25,839 --> 00:17:30,640
total

00:17:26,559 --> 00:17:34,080
block task or drop messages

00:17:30,640 --> 00:17:37,200
now apart from application testing uh

00:17:34,080 --> 00:17:39,280
cassandra of operation activities uh

00:17:37,200 --> 00:17:40,559
testing cassandra operational activities

00:17:39,280 --> 00:17:44,480
like

00:17:40,559 --> 00:17:47,919
repair scale up is also

00:17:44,480 --> 00:17:48,559
very important so let me give you an

00:17:47,919 --> 00:17:51,200
example

00:17:48,559 --> 00:17:53,280
so in one of my previous organizations

00:17:51,200 --> 00:17:56,720
so we were planning to upgrade uh

00:17:53,280 --> 00:17:58,960
from 2.1 to 3.11 and

00:17:56,720 --> 00:18:00,320
as for the recommendation we decided to

00:17:58,960 --> 00:18:04,160
go to the latest patch

00:18:00,320 --> 00:18:06,960
which was uh 3 11 2 at that time

00:18:04,160 --> 00:18:07,760
so while application team application

00:18:06,960 --> 00:18:10,799
testing

00:18:07,760 --> 00:18:13,440
showed a very good result so our reports

00:18:10,799 --> 00:18:14,799
our reports api became faster than the

00:18:13,440 --> 00:18:18,320
older version

00:18:14,799 --> 00:18:21,200
however uh one of our tests failed where

00:18:18,320 --> 00:18:21,600
the counter uh data type was not getting

00:18:21,200 --> 00:18:23,360
uh

00:18:21,600 --> 00:18:24,640
not getting incremented in the mixed

00:18:23,360 --> 00:18:28,240
version cluster

00:18:24,640 --> 00:18:29,720
and this is the jira ticket for for the

00:18:28,240 --> 00:18:32,400
reference

00:18:29,720 --> 00:18:35,600
00:18:32,400 --> 00:18:37,679
so so that was the one bug we found

00:18:35,600 --> 00:18:41,200
during our application testing

00:18:37,679 --> 00:18:42,559
however um after the upgrade uh while

00:18:41,200 --> 00:18:45,280
testing the

00:18:42,559 --> 00:18:46,080
santa operational activity so during our

00:18:45,280 --> 00:18:48,640
repair

00:18:46,080 --> 00:18:50,640
the repair coordinator coordinator

00:18:48,640 --> 00:18:51,520
started failing due to out of memory

00:18:50,640 --> 00:18:55,520
error

00:18:51,520 --> 00:18:58,720
and we found out that it was due to

00:18:55,520 --> 00:19:01,600
unbounded validation compaction uh

00:18:58,720 --> 00:19:02,240
which the details is there in cassandra

00:19:01,600 --> 00:19:05,520
one four

00:19:02,240 --> 00:19:06,080
three three two ticket and it was it is

00:19:05,520 --> 00:19:09,520
kind of

00:19:06,080 --> 00:19:13,039
regression issue and in i mean

00:19:09,520 --> 00:19:16,080
it's it's rare but it can happen so

00:19:13,039 --> 00:19:18,559
um so even though uh the recommendation

00:19:16,080 --> 00:19:21,360
is to go to the latest patch release

00:19:18,559 --> 00:19:23,440
but testing becomes extremely uh

00:19:21,360 --> 00:19:27,280
important

00:19:23,440 --> 00:19:27,280
so um now

00:19:27,520 --> 00:19:33,840
so that was my the last homework

00:19:30,799 --> 00:19:34,480
now let's talk about the activities to

00:19:33,840 --> 00:19:36,480
avoid

00:19:34,480 --> 00:19:38,320
in a mixed version cluster during your

00:19:36,480 --> 00:19:41,760
update so

00:19:38,320 --> 00:19:43,760
so any uh activity which involves

00:19:41,760 --> 00:19:45,360
streaming either repair or

00:19:43,760 --> 00:19:47,840
decommissioning or

00:19:45,360 --> 00:19:49,919
a good strapping replacing we should

00:19:47,840 --> 00:19:53,120
avoid that

00:19:49,919 --> 00:19:55,600
also we should avoid any ddl or dcl

00:19:53,120 --> 00:19:56,160
operation for example creating new table

00:19:55,600 --> 00:19:59,360
or

00:19:56,160 --> 00:20:02,640
dropping it or or granting or revoking

00:19:59,360 --> 00:20:05,520
permission to a user which should not

00:20:02,640 --> 00:20:06,080
enable cdc in the mixed version cluster

00:20:05,520 --> 00:20:08,720
and

00:20:06,080 --> 00:20:09,280
uh we should avoid enabling a new

00:20:08,720 --> 00:20:11,120
feature

00:20:09,280 --> 00:20:12,720
uh in a mixed version cluster so once

00:20:11,120 --> 00:20:14,159
you have upgraded the entire cluster

00:20:12,720 --> 00:20:18,840
then you can enable the

00:20:14,159 --> 00:20:20,799
new feature of the new new cassandra

00:20:18,840 --> 00:20:24,000
version

00:20:20,799 --> 00:20:26,880
ah okay so now uh

00:20:24,000 --> 00:20:27,679
let's uh talk about uh the p update

00:20:26,880 --> 00:20:30,960
steps

00:20:27,679 --> 00:20:33,039
so the first thing is that uh make sure

00:20:30,960 --> 00:20:35,760
that the each node in the cluster are

00:20:33,039 --> 00:20:36,720
in healthy state so when i say healthy

00:20:35,760 --> 00:20:39,760
uh it means

00:20:36,720 --> 00:20:42,080
that at least uh their disc usage

00:20:39,760 --> 00:20:43,520
heat usage and cpus are at a

00:20:42,080 --> 00:20:48,799
satisfactory level

00:20:43,520 --> 00:20:52,720
and uh also the cluster is repaired

00:20:48,799 --> 00:20:54,799
now disable any scheduled repair and

00:20:52,720 --> 00:20:56,240
make sure that the no team is performing

00:20:54,799 --> 00:20:59,039
any prohibited

00:20:56,240 --> 00:21:00,840
task which i discussed in the previous

00:20:59,039 --> 00:21:03,200
slide

00:21:00,840 --> 00:21:05,200
um uh and

00:21:03,200 --> 00:21:06,320
if you have done any intermediate

00:21:05,200 --> 00:21:08,480
upgrade then

00:21:06,320 --> 00:21:10,799
make sure that the last upgraded ssd

00:21:08,480 --> 00:21:13,600
will uh has completed successfully

00:21:10,799 --> 00:21:15,120
and then only you would start the next

00:21:13,600 --> 00:21:18,480
upgrade

00:21:15,120 --> 00:21:20,640
and the last point is that

00:21:18,480 --> 00:21:22,159
take a backup of your data including the

00:21:20,640 --> 00:21:25,520
configuration and this is

00:21:22,159 --> 00:21:29,039
very important in case anything goes

00:21:25,520 --> 00:21:32,960
wrong now here is

00:21:29,039 --> 00:21:35,200
the standard process uh for upgrading

00:21:32,960 --> 00:21:36,320
the cassandra binary on a node so the

00:21:35,200 --> 00:21:39,440
first thing is you

00:21:36,320 --> 00:21:39,760
do is you run no tool drain you shut

00:21:39,440 --> 00:21:43,440
down

00:21:39,760 --> 00:21:46,000
a cassandra and then you upgrade

00:21:43,440 --> 00:21:47,280
java version if only required for

00:21:46,000 --> 00:21:49,039
example if you are upgrading to

00:21:47,280 --> 00:21:52,159
cassandra 2.2 or higher

00:21:49,039 --> 00:21:54,400
you will require java 8

00:21:52,159 --> 00:21:56,559
and then you install a new cassandra

00:21:54,400 --> 00:21:58,880
package

00:21:56,559 --> 00:22:00,400
and you configure your system uh with

00:21:58,880 --> 00:22:02,720
your custom configuration

00:22:00,400 --> 00:22:03,520
start cassandra and then validate that

00:22:02,720 --> 00:22:06,880
everything uh

00:22:03,520 --> 00:22:09,919
is fine or not so

00:22:06,880 --> 00:22:14,159
so this was at the at the node level

00:22:09,919 --> 00:22:18,159
now let's talk about uh uh let's talk at

00:22:14,159 --> 00:22:20,480
cluster level so so

00:22:18,159 --> 00:22:21,679
at cluster level uh there are two types

00:22:20,480 --> 00:22:24,320
of expertise uh

00:22:21,679 --> 00:22:24,960
followed mostly uh the first and the

00:22:24,320 --> 00:22:28,240
standard

00:22:24,960 --> 00:22:30,880
process is that doing rolling upgrade

00:22:28,240 --> 00:22:32,000
means one node at a times uh

00:22:30,880 --> 00:22:34,320
sequentially

00:22:32,000 --> 00:22:35,760
uh the problem with this approach is

00:22:34,320 --> 00:22:39,679
that here

00:22:35,760 --> 00:22:41,280
uh time of uh to do this binary upgrade

00:22:39,679 --> 00:22:42,960
is directly proportional to the size of

00:22:41,280 --> 00:22:43,600
the cluster so that means the bigger the

00:22:42,960 --> 00:22:47,280
cluster

00:22:43,600 --> 00:22:50,000
uh more is the upgrade uh time

00:22:47,280 --> 00:22:51,200
now the uh the second approach is that a

00:22:50,000 --> 00:22:54,320
parallel upgrade

00:22:51,200 --> 00:22:57,360
so it is specific to a multi-rack

00:22:54,320 --> 00:23:01,440
cluster where the number of racks is

00:22:57,360 --> 00:23:01,440
greater than equal to replication factor

00:23:01,600 --> 00:23:08,000
here all the nodes in a rack

00:23:04,799 --> 00:23:11,360
is upgraded in parallel and we upgrade

00:23:08,000 --> 00:23:15,200
one rack at a time so no matter how

00:23:11,360 --> 00:23:15,200
big your cluster is um

00:23:15,280 --> 00:23:19,840
so you will be able to do this binary

00:23:17,280 --> 00:23:21,520
upgrade in a fixed amount of time

00:23:19,840 --> 00:23:23,840
and the best part is that your

00:23:21,520 --> 00:23:24,559
application will remain always available

00:23:23,840 --> 00:23:28,960
even during

00:23:24,559 --> 00:23:33,520
uh the upgrade uh however uh this uh

00:23:28,960 --> 00:23:34,960
um i mean having a multi-rack cluster

00:23:33,520 --> 00:23:38,400
has its uh

00:23:34,960 --> 00:23:40,880
own issue like for example uh

00:23:38,400 --> 00:23:41,919
you need to scale up or scroll down with

00:23:40,880 --> 00:23:45,360
the factor of its

00:23:41,919 --> 00:23:48,400
replication factor now one

00:23:45,360 --> 00:23:50,720
more strategy which can be used

00:23:48,400 --> 00:23:51,520
here is in the multi-rack cluster is

00:23:50,720 --> 00:23:55,679
that

00:23:51,520 --> 00:23:59,200
you update uh the first node

00:23:55,679 --> 00:24:00,960
and validate and if

00:23:59,200 --> 00:24:02,880
and if everything goes fine then you

00:24:00,960 --> 00:24:07,360
start your parallel upgrade uh

00:24:02,880 --> 00:24:09,360
uh one rack at a time else you simply uh

00:24:07,360 --> 00:24:10,960
if if something goes wrong while

00:24:09,360 --> 00:24:13,679
upgrading to that node you simply

00:24:10,960 --> 00:24:14,400
replace that and that should be in place

00:24:13,679 --> 00:24:18,640
uh

00:24:14,400 --> 00:24:21,760
replaced now

00:24:18,640 --> 00:24:22,799
once your uh binary upgrade is done uh

00:24:21,760 --> 00:24:26,400
it is time to

00:24:22,799 --> 00:24:28,880
upgrade the ss tables

00:24:26,400 --> 00:24:30,559
so one more frequently asked question is

00:24:28,880 --> 00:24:34,000
that can we run upgrade

00:24:30,559 --> 00:24:38,080
ss table on multiple nodes in parallel

00:24:34,000 --> 00:24:38,080
and the answer is that you can run

00:24:38,320 --> 00:24:43,919
on all the nodes in parallel if if that

00:24:41,600 --> 00:24:45,200
does not impact basically of your

00:24:43,919 --> 00:24:47,360
application

00:24:45,200 --> 00:24:50,240
because upgrade asset stable puts load

00:24:47,360 --> 00:24:53,760
on the node and it may impact the api

00:24:50,240 --> 00:24:57,440
response time so um so for

00:24:53,760 --> 00:25:00,000
safer side and for minimal

00:24:57,440 --> 00:25:00,720
impact same strategy as the binary

00:25:00,000 --> 00:25:03,919
upgrade

00:25:00,720 --> 00:25:07,039
can be used that is a rolling upgrade or

00:25:03,919 --> 00:25:10,640
a parallel upgrade in case of a

00:25:07,039 --> 00:25:13,279
multiple racks now

00:25:10,640 --> 00:25:14,080
now you may want to invoke this upgrade

00:25:13,279 --> 00:25:16,720
assesstable

00:25:14,080 --> 00:25:17,440
probably through some script and put

00:25:16,720 --> 00:25:20,640
some logic

00:25:17,440 --> 00:25:23,679
uh that like it should be uh

00:25:20,640 --> 00:25:25,919
it should it can get rich

00:25:23,679 --> 00:25:27,039
you know again in case the system

00:25:25,919 --> 00:25:29,919
reaches start before

00:25:27,039 --> 00:25:30,960
the completion or a script should be

00:25:29,919 --> 00:25:32,880
able to tell

00:25:30,960 --> 00:25:36,240
uh that the blade assets table has been

00:25:32,880 --> 00:25:36,240
completed successfully or not

00:25:36,640 --> 00:25:40,159
you can also tune uh some of the

00:25:38,720 --> 00:25:42,400
parameter like uh

00:25:40,159 --> 00:25:44,000
compaction throughput mv per second

00:25:42,400 --> 00:25:47,039
concurrent compactors

00:25:44,000 --> 00:25:50,559
and uh this jobs parameter of uh

00:25:47,039 --> 00:25:52,880
jobs parameters uh to either speed up

00:25:50,559 --> 00:25:54,640
or slow down the upgrade assess table

00:25:52,880 --> 00:25:59,200
process based on uh

00:25:54,640 --> 00:26:02,880
your available system resource

00:25:59,200 --> 00:26:04,480
uh now once this

00:26:02,880 --> 00:26:07,039
uh once the access table has been

00:26:04,480 --> 00:26:07,039
upgraded

00:26:07,440 --> 00:26:15,039
uh on the entire cluster that means your

00:26:11,279 --> 00:26:18,000
uh your cassandra upgrade is done here

00:26:15,039 --> 00:26:18,559
although i mean um you may need to

00:26:18,000 --> 00:26:20,799
perform

00:26:18,559 --> 00:26:24,159
some of the minor aspects uh depending

00:26:20,799 --> 00:26:27,440
on what version uh your

00:26:24,159 --> 00:26:29,919
so uh for example

00:26:27,440 --> 00:26:31,440
you will need to drop legacy tables like

00:26:29,919 --> 00:26:33,760
uh users uh

00:26:31,440 --> 00:26:35,520
permissions and credentials from system

00:26:33,760 --> 00:26:38,559
or key spaces

00:26:35,520 --> 00:26:40,559
uh and if you um

00:26:38,559 --> 00:26:42,400
and if you are upgrading to three dot x

00:26:40,559 --> 00:26:45,679
and you unnecessarily don't want to

00:26:42,400 --> 00:26:48,960
keep too old repair hd data then you

00:26:45,679 --> 00:26:52,159
can uh set uh the ttl

00:26:48,960 --> 00:26:54,559
uh to one month and compaction strategy

00:26:52,159 --> 00:26:57,600
to twcs for for repair hd and

00:26:54,559 --> 00:27:00,799
parent repair hd table and uh

00:26:57,600 --> 00:27:01,840
in in casandra 4.2 4.0 it has already

00:27:00,799 --> 00:27:05,360
been taken care of

00:27:01,840 --> 00:27:06,240
uh with this ticket cassandra one two

00:27:05,360 --> 00:27:10,000
seven oh

00:27:06,240 --> 00:27:10,559
one and now if you uh if you remember uh

00:27:10,000 --> 00:27:13,120
we

00:27:10,559 --> 00:27:14,240
disabled rc uh our scheduled repair so

00:27:13,120 --> 00:27:18,640
now this is the time

00:27:14,240 --> 00:27:21,760
uh to uh residual it and um

00:27:18,640 --> 00:27:25,200
one uh tip which i i would like to uh

00:27:21,760 --> 00:27:26,000
give here that um keep an eye on jira

00:27:25,200 --> 00:27:28,640
tickets so

00:27:26,000 --> 00:27:30,320
you subscribe to the uh jeera tickets uh

00:27:28,640 --> 00:27:33,600
probably weekly of a

00:27:30,320 --> 00:27:34,559
notification but in case any uh ticket

00:27:33,600 --> 00:27:37,600
is opened uh

00:27:34,559 --> 00:27:42,799
critical or secret then uh you remain uh

00:27:37,600 --> 00:27:42,799
you know updated uh for the same now

00:27:43,440 --> 00:27:47,600
okay so i have talked enough about

00:27:46,559 --> 00:27:51,200
upgrade now

00:27:47,600 --> 00:27:54,640
let's let's talk about a rule back now

00:27:51,200 --> 00:27:57,919
well uh it is uh it is

00:27:54,640 --> 00:28:00,559
complex so uh remember i mean cassandra

00:27:57,919 --> 00:28:02,159
uh gives updates a stable utility to

00:28:00,559 --> 00:28:04,080
update our ss table

00:28:02,159 --> 00:28:05,600
but there is no downgrade assistable

00:28:04,080 --> 00:28:08,000
utility in the center

00:28:05,600 --> 00:28:08,799
so you may lose some data i mean

00:28:08,000 --> 00:28:11,600
depending on

00:28:08,799 --> 00:28:12,480
what stage of upgrade you are planning

00:28:11,600 --> 00:28:15,760
to roll back

00:28:12,480 --> 00:28:18,960
i mean uh for example is this a minor

00:28:15,760 --> 00:28:22,080
version upgrade or a major version

00:28:18,960 --> 00:28:25,600
whether you have upgraded to one node

00:28:22,080 --> 00:28:29,600
or just just one data center i mean

00:28:25,600 --> 00:28:30,000
whether you upgraded the binary on few

00:28:29,600 --> 00:28:34,799
nodes

00:28:30,000 --> 00:28:37,919
or all the nodes or how much time you uh

00:28:34,799 --> 00:28:40,880
you have has already been passed or

00:28:37,919 --> 00:28:43,840
whether you have a ran a node tool

00:28:40,880 --> 00:28:46,960
upgrade sustainable or not

00:28:43,840 --> 00:28:49,440
now uh most uh minor version uh

00:28:46,960 --> 00:28:51,600
uh minor version cassandra supports

00:28:49,440 --> 00:28:53,520
rollback i mean except for those where

00:28:51,600 --> 00:28:55,520
the internet protocol has changed

00:28:53,520 --> 00:28:57,440
or the access table of format has

00:28:55,520 --> 00:29:01,520
changed and i mean these

00:28:57,440 --> 00:29:04,399
uh things are rare in minor version uh

00:29:01,520 --> 00:29:05,520
however the major version uh does not

00:29:04,399 --> 00:29:08,799
support rollback

00:29:05,520 --> 00:29:12,240
and there is a risk of uh data loss

00:29:08,799 --> 00:29:15,360
or outages so

00:29:12,240 --> 00:29:18,000
now so but you can

00:29:15,360 --> 00:29:19,360
reduce the risk of data loss during a

00:29:18,000 --> 00:29:21,919
rollback so the way

00:29:19,360 --> 00:29:22,960
you can uh i mean we can do is like

00:29:21,919 --> 00:29:26,399
upgrade

00:29:22,960 --> 00:29:26,960
the first node and then validate and if

00:29:26,399 --> 00:29:29,520
anything

00:29:26,960 --> 00:29:30,640
goes wrong replace that node so when i

00:29:29,520 --> 00:29:33,200
say replaced

00:29:30,640 --> 00:29:34,399
it is uh i mean the it is in place

00:29:33,200 --> 00:29:37,360
replace i mean

00:29:34,399 --> 00:29:38,960
just wipe off wipe off the data and and

00:29:37,360 --> 00:29:43,360
replace

00:29:38,960 --> 00:29:45,919
uh now if you have a passive uh

00:29:43,360 --> 00:29:47,520
configuration then start with your

00:29:45,919 --> 00:29:51,120
passive data center first

00:29:47,520 --> 00:29:55,279
and if if anything goes wrong you have

00:29:51,120 --> 00:29:58,559
an option to rebuild your data center

00:29:55,279 --> 00:30:02,320
uh you can also upgrade one replica

00:29:58,559 --> 00:30:04,960
uh at if that replica

00:30:02,320 --> 00:30:05,679
um if something goes wrong you can

00:30:04,960 --> 00:30:08,880
replace

00:30:05,679 --> 00:30:10,880
that replica and and upgrading one

00:30:08,880 --> 00:30:13,919
replica at a time is only feasible

00:30:10,880 --> 00:30:17,760
if you either have a single token

00:30:13,919 --> 00:30:19,919
or uh if you are using um

00:30:17,760 --> 00:30:21,440
v node then you you should have a rat

00:30:19,919 --> 00:30:25,039
awareness

00:30:21,440 --> 00:30:26,080
now once you have upgraded more than one

00:30:25,039 --> 00:30:28,480
replica

00:30:26,080 --> 00:30:29,200
then uh the rollbacks becomes very

00:30:28,480 --> 00:30:33,039
tricky

00:30:29,200 --> 00:30:36,880
so so in short like i mean try to avoid

00:30:33,039 --> 00:30:40,000
uh roll back as much as you can um

00:30:36,880 --> 00:30:43,120
uh but i i believe that uh if

00:30:40,000 --> 00:30:45,520
we for uh if we have done our homework

00:30:43,120 --> 00:30:46,320
uh items which i have explained uh

00:30:45,520 --> 00:30:49,279
previously

00:30:46,320 --> 00:30:50,720
i don't see any reason uh we have to

00:30:49,279 --> 00:30:53,919
roll back

00:30:50,720 --> 00:30:56,159
now i think uh

00:30:53,919 --> 00:30:57,039
uh yeah i have given too much

00:30:56,159 --> 00:30:59,760
information

00:30:57,039 --> 00:31:00,320
so now let's uh try to summarize it and

00:30:59,760 --> 00:31:04,640
and

00:31:00,320 --> 00:31:07,679
i believe at least we should remember

00:31:04,640 --> 00:31:11,279
four things before updating uh cluster

00:31:07,679 --> 00:31:13,679
the first thing is to to don't forget to

00:31:11,279 --> 00:31:17,440
check the driver compatibility

00:31:13,679 --> 00:31:20,880
reading news.txt reading

00:31:17,440 --> 00:31:22,000
instruction testing is very important

00:31:20,880 --> 00:31:25,360
part

00:31:22,000 --> 00:31:28,480
important and uh take your

00:31:25,360 --> 00:31:31,679
backup so these four things uh

00:31:28,480 --> 00:31:34,799
which would uh remember uh

00:31:31,679 --> 00:31:35,279
and yeah so that that's that's all from

00:31:34,799 --> 00:31:38,399
my

00:31:35,279 --> 00:31:39,519
end thank you and if you have any

00:31:38,399 --> 00:31:42,399
question you can

00:31:39,519 --> 00:31:45,039
think in the chat box let me go to the

00:31:42,399 --> 00:31:45,039
chat box

00:31:45,600 --> 00:31:47,840
okay

00:31:58,840 --> 00:32:15,840
okay

00:32:01,200 --> 00:32:15,840
well thank you for joining the talk

00:34:38,639 --> 00:34:40,720

YouTube URL: https://www.youtube.com/watch?v=eTUXQS7RUQw


