Title: Interactive Streaming Data Analytics via Flink on Zeppelin
Publication date: 2020-10-22
Playlist: ApacheCon @Home 2020: Streaming
Description: 
	Interactive Streaming Data Analytics via Flink on Zeppelin
Jeff Zhang

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Flink is a powerful distributed streaming engine, but it requires lots of programming skills. Even Flink supports sql, it is not an easy job for an analyst to use Flink to do streaming data analytics directly. Fortunately, another apache project Zeppelin integrates Flink and make streaming data analytics pretty easy for these data analyst without programming skillset. In this talk, I would talk about how to use Flink on Zeppelin to do interactive streaming data analytics. And how to build real time dashboard without writting any html/js code.

Jeff has 11 years of experience in big data industry. He is an open source veteran, start to use hadoop since 2009 and is PMC of apache project Tez/Livy/Zeppelin and committer of apache Pig. His past experience is not only on big data infrastructure, but also on how to leverage these big data tools to get insight. He speaks several times on big data conferences like hadoop summit, strata + hadoop world. Now he works in Alibaba Group as a staff engineer. Prior that he works in Hortonworks where he develops these popular big data tools.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,599 --> 00:00:29,760
so uh

00:00:26,160 --> 00:00:30,880
now i'll get started thank you everyone

00:00:29,760 --> 00:00:34,800
um

00:00:30,880 --> 00:00:36,880
now i will uh talk about the theater

00:00:34,800 --> 00:00:38,719
yeah actually my my talk is about the

00:00:36,880 --> 00:00:44,480
interactive streaming data that is

00:00:38,719 --> 00:00:48,079
by the flink on sibling so um

00:00:44,480 --> 00:00:50,079
um before i give this talk i'd like to

00:00:48,079 --> 00:00:52,160
just give me uh give a brief

00:00:50,079 --> 00:00:55,520
introduction all myself

00:00:52,160 --> 00:00:58,960
um here is about just my

00:00:55,520 --> 00:00:59,440
uh clear path so i always looking back

00:00:58,960 --> 00:01:02,000
from

00:00:59,440 --> 00:01:03,199
looking back at my uh past clear paths i

00:01:02,000 --> 00:01:06,880
always feel lucky

00:01:03,199 --> 00:01:12,000
that uh i always do on data related

00:01:06,880 --> 00:01:12,000
things including uh developing the uh

00:01:13,200 --> 00:01:17,439
engine or building data platform or data

00:01:16,000 --> 00:01:19,920
application

00:01:17,439 --> 00:01:22,320
and i would say that there's two

00:01:19,920 --> 00:01:23,040
keywords in my clear parts one is the

00:01:22,320 --> 00:01:26,080
data

00:01:23,040 --> 00:01:29,280
because i always do data related work

00:01:26,080 --> 00:01:31,520
another keyword is apache because i

00:01:29,280 --> 00:01:32,720
i feel lucky that i involved in apache

00:01:31,520 --> 00:01:35,520
project very

00:01:32,720 --> 00:01:36,240
very early around the uh i think a lot

00:01:35,520 --> 00:01:39,920
around

00:01:36,240 --> 00:01:40,240
10 years ago so now i'm apache member

00:01:39,920 --> 00:01:43,759
and

00:01:40,240 --> 00:01:46,240
several apache project pmc

00:01:43,759 --> 00:01:48,000
so now let's get back to uh today's talk

00:01:46,240 --> 00:01:51,119
so on today's talk i will have

00:01:48,000 --> 00:01:51,840
on four parts so uh first i'd like to

00:01:51,119 --> 00:01:55,439
talk about

00:01:51,840 --> 00:01:58,240
uh data analytics so and second

00:01:55,439 --> 00:01:59,759
i will talk about uh the flink i think

00:01:58,240 --> 00:02:02,880
it also apache project

00:01:59,759 --> 00:02:03,360
and also and and the third is about the

00:02:02,880 --> 00:02:06,640
uh

00:02:03,360 --> 00:02:08,000
simply and finally i will give you a

00:02:06,640 --> 00:02:11,280
summary of today's

00:02:08,000 --> 00:02:14,480
talk okay uh first

00:02:11,280 --> 00:02:18,720
let me uh yeah let's talk about uh

00:02:14,480 --> 00:02:19,680
data data energies so actually uh in my

00:02:18,720 --> 00:02:22,720
opinion there's

00:02:19,680 --> 00:02:26,160
two kinds of data analytics

00:02:22,720 --> 00:02:28,720
one is the historical data ranges

00:02:26,160 --> 00:02:29,360
so in the historic analysis all the data

00:02:28,720 --> 00:02:32,800
is

00:02:29,360 --> 00:02:36,400
is batch and yeah of course these

00:02:32,800 --> 00:02:40,160
the data are historical data and

00:02:36,400 --> 00:02:41,120
see the results of the matrix you get

00:02:40,160 --> 00:02:44,319
from the

00:02:41,120 --> 00:02:46,959
data this uh usually are static so they

00:02:44,319 --> 00:02:50,160
will never change

00:02:46,959 --> 00:02:51,280
and the second kind is the real time

00:02:50,160 --> 00:02:54,400
data and this

00:02:51,280 --> 00:02:57,519
so um the real data

00:02:54,400 --> 00:02:57,920
is is arising recent years because i

00:02:57,519 --> 00:03:01,200
think

00:02:57,920 --> 00:03:04,319
uh most of your work or most of

00:03:01,200 --> 00:03:07,280
um i'm maybe um ninety percent of

00:03:04,319 --> 00:03:07,840
current data in this are historical data

00:03:07,280 --> 00:03:10,640
data

00:03:07,840 --> 00:03:12,319
data like this but i think the real time

00:03:10,640 --> 00:03:15,680
data data like this is

00:03:12,319 --> 00:03:18,080
arriving arising recent years and

00:03:15,680 --> 00:03:19,680
the real time data is usually in the

00:03:18,080 --> 00:03:23,599
form of streaming

00:03:19,680 --> 00:03:27,040
and you are consuming the uh consumer's

00:03:23,599 --> 00:03:29,040
real-time streaming data and do

00:03:27,040 --> 00:03:30,640
real-time data deadlines and usually the

00:03:29,040 --> 00:03:33,599
real time data

00:03:30,640 --> 00:03:34,159
says that matrix is dynamical that means

00:03:33,599 --> 00:03:36,720
these

00:03:34,159 --> 00:03:38,959
uh these data will um these results will

00:03:36,720 --> 00:03:42,080
change over time

00:03:38,959 --> 00:03:44,879
and this is uh

00:03:42,080 --> 00:03:45,280
this is my my today's talks focus so i

00:03:44,879 --> 00:03:48,879
will

00:03:45,280 --> 00:03:49,599
talk about how we can do real-time data

00:03:48,879 --> 00:03:52,560
and this

00:03:49,599 --> 00:03:53,360
by two apache projects about link and

00:03:52,560 --> 00:03:57,040
average

00:03:53,360 --> 00:03:59,519
simply so

00:03:57,040 --> 00:04:00,959
so what is required for the streaming

00:03:59,519 --> 00:04:03,680
data and analytics

00:04:00,959 --> 00:04:04,799
so there's two things we need basically

00:04:03,680 --> 00:04:07,840
um

00:04:04,799 --> 00:04:10,560
first the it is a streaming engine

00:04:07,840 --> 00:04:12,400
so streaming is used for the computing

00:04:10,560 --> 00:04:15,040
processing the streaming data

00:04:12,400 --> 00:04:17,040
and computing the uh computing the

00:04:15,040 --> 00:04:19,359
matrix

00:04:17,040 --> 00:04:20,400
here i will choose the flink as the

00:04:19,359 --> 00:04:23,199
streaming engine

00:04:20,400 --> 00:04:25,759
so flink is the apache project which is

00:04:23,199 --> 00:04:28,240
focused on the streaming processing

00:04:25,759 --> 00:04:30,160
and the second tool i'd like to choose

00:04:28,240 --> 00:04:33,280
and second tool we need is the

00:04:30,160 --> 00:04:36,639
analytics tool so because the streaming

00:04:33,280 --> 00:04:36,960
flink is just a stream uh huge engine so

00:04:36,639 --> 00:04:40,639
it's

00:04:36,960 --> 00:04:42,479
used by the uh the purpose it

00:04:40,639 --> 00:04:44,400
it's target youth is the software

00:04:42,479 --> 00:04:47,680
engineer it's not

00:04:44,400 --> 00:04:49,040
it cannot be used by the uh data

00:04:47,680 --> 00:04:51,520
analytics people because

00:04:49,040 --> 00:04:53,120
it it will not be so easy for them to

00:04:51,520 --> 00:04:56,400
use

00:04:53,120 --> 00:04:59,680
so uh so that's the reason why we needed

00:04:56,400 --> 00:05:03,280
the analytics tool we need to use the uh

00:04:59,680 --> 00:05:05,840
uh we need to use the

00:05:03,280 --> 00:05:07,120
uh such kind of tool of for the data

00:05:05,840 --> 00:05:09,280
analysis people

00:05:07,120 --> 00:05:10,720
uh here i will choose the apache sibling

00:05:09,280 --> 00:05:13,840
so apache shipping is

00:05:10,720 --> 00:05:14,639
a notebook project and the user can

00:05:13,840 --> 00:05:17,759
write code

00:05:14,639 --> 00:05:20,960
and execute on the notebook and

00:05:17,759 --> 00:05:23,759
here i will talk about how we can use

00:05:20,960 --> 00:05:24,320
such tool and compile with the apache

00:05:23,759 --> 00:05:27,440
shipping

00:05:24,320 --> 00:05:30,880
to do streaming data tests

00:05:27,440 --> 00:05:31,440
so um first let's talk about what is

00:05:30,880 --> 00:05:33,680
average

00:05:31,440 --> 00:05:33,680
thing

00:05:35,680 --> 00:05:40,639
so so overall average shipping is a

00:05:39,680 --> 00:05:43,280
framework

00:05:40,639 --> 00:05:43,840
and the distribution equation a process

00:05:43,280 --> 00:05:46,000
engine

00:05:43,840 --> 00:05:47,600
for the state for computation over

00:05:46,000 --> 00:05:50,800
unbounding or

00:05:47,600 --> 00:05:55,120
on the boundary data stream and here i

00:05:50,800 --> 00:05:59,520
have a diagram to uh demonstrate the uh

00:05:55,120 --> 00:05:59,919
uh this is the uh scenario of how we can

00:05:59,520 --> 00:06:03,039
use

00:05:59,919 --> 00:06:06,080
flink so basically uh we can

00:06:03,039 --> 00:06:06,479
check the left side usually thing will

00:06:06,080 --> 00:06:09,919
read

00:06:06,479 --> 00:06:13,199
data from a lot of sources such as

00:06:09,919 --> 00:06:15,199
transaction log or web logs or iot

00:06:13,199 --> 00:06:18,160
devices events

00:06:15,199 --> 00:06:19,199
so after that the flink engine will

00:06:18,160 --> 00:06:22,479
computing the

00:06:19,199 --> 00:06:25,600
uh events processing events in such as

00:06:22,479 --> 00:06:26,479
it will be a clean do some kind of dead

00:06:25,600 --> 00:06:29,759
cleaning

00:06:26,479 --> 00:06:33,039
and data data normalization

00:06:29,759 --> 00:06:35,520
or data enrichment

00:06:33,039 --> 00:06:38,240
and after that it will on the thing we

00:06:35,520 --> 00:06:40,800
are launched the data uh

00:06:38,240 --> 00:06:42,400
writes without data for different

00:06:40,800 --> 00:06:46,319
purposes for example it

00:06:42,400 --> 00:06:48,960
it maybe writes the data for the uh

00:06:46,319 --> 00:06:50,800
by consuming by other data application

00:06:48,960 --> 00:06:53,680
or which gain large data to

00:06:50,800 --> 00:06:54,160
database or file system that could be

00:06:53,680 --> 00:06:58,400
used

00:06:54,160 --> 00:07:02,560
to building a real-time data warehouse

00:06:58,400 --> 00:07:05,840
okay so this is the uh basic

00:07:02,560 --> 00:07:09,280
uh idea of what is about

00:07:05,840 --> 00:07:12,800
flink and how it can be used

00:07:09,280 --> 00:07:13,599
so um for the data engineer how can we

00:07:12,800 --> 00:07:16,720
use the

00:07:13,599 --> 00:07:19,039
link basically flink provide a full

00:07:16,720 --> 00:07:23,840
programming language interface

00:07:19,039 --> 00:07:23,840
java scala python and cq

00:07:24,560 --> 00:07:31,360
and here is one example that how

00:07:28,080 --> 00:07:33,599
we can use we can use link

00:07:31,360 --> 00:07:35,280
to do a word count example so what

00:07:33,599 --> 00:07:39,440
account is a very typical

00:07:35,280 --> 00:07:42,639
example that we use in flink

00:07:39,440 --> 00:07:45,680
and here is a screenshot of the

00:07:42,639 --> 00:07:49,360
java code you will notice that even it

00:07:45,680 --> 00:07:50,240
is a very uh easy it is a very simple

00:07:49,360 --> 00:07:53,280
example of

00:07:50,240 --> 00:07:55,759
a word count but it will usually

00:07:53,280 --> 00:07:56,319
apply which will involve more than 20

00:07:55,759 --> 00:08:00,000
lines of

00:07:56,319 --> 00:08:01,759
code 20 lines of java code so

00:08:00,000 --> 00:08:03,520
actually is not you know i think

00:08:01,759 --> 00:08:05,919
certainly maybe it is

00:08:03,520 --> 00:08:07,440
not easy and not difficult for the

00:08:05,919 --> 00:08:10,960
software engineer to write

00:08:07,440 --> 00:08:12,560
such java code but for the data analysis

00:08:10,960 --> 00:08:15,840
people they will feel that

00:08:12,560 --> 00:08:17,120
wow it it i think they were few it is

00:08:15,840 --> 00:08:19,039
too difficult for them

00:08:17,120 --> 00:08:20,400
because the data and these people they

00:08:19,039 --> 00:08:22,720
were like

00:08:20,400 --> 00:08:24,240
python or sick i think these two

00:08:22,720 --> 00:08:28,000
languages are their favorite

00:08:24,240 --> 00:08:31,360
uh choice so um

00:08:28,000 --> 00:08:34,800
so that so usually java and scholar

00:08:31,360 --> 00:08:38,080
is not not the right choice for the uh

00:08:34,800 --> 00:08:42,159
data and people and

00:08:38,080 --> 00:08:43,680
secondary um for the flink job it should

00:08:42,159 --> 00:08:46,720
be

00:08:43,680 --> 00:08:48,800
if they use the flink without any other

00:08:46,720 --> 00:08:49,600
tools it will be very difficult for them

00:08:48,800 --> 00:08:53,360
to

00:08:49,600 --> 00:08:55,680
deploy the flink job because usually you

00:08:53,360 --> 00:08:56,720
usually they have to use the uh flink

00:08:55,680 --> 00:09:00,080
shear command

00:08:56,720 --> 00:09:00,399
to uh deploy that that was of course

00:09:00,080 --> 00:09:04,959
that

00:09:00,399 --> 00:09:08,560
is not easy for the deterministic people

00:09:04,959 --> 00:09:10,720
and the third is that um

00:09:08,560 --> 00:09:12,959
even they write the such kind of java

00:09:10,720 --> 00:09:15,279
code they cannot

00:09:12,959 --> 00:09:18,160
visualize the data because for the

00:09:15,279 --> 00:09:20,320
generalized people

00:09:18,160 --> 00:09:22,000
visualization is a pretty important for

00:09:20,320 --> 00:09:25,200
them without visualization

00:09:22,000 --> 00:09:28,480
they cannot it will be very difficult

00:09:25,200 --> 00:09:30,240
for them to find the uh the inside of

00:09:28,480 --> 00:09:34,640
our

00:09:30,240 --> 00:09:37,200
update value from from that so uh

00:09:34,640 --> 00:09:38,720
yeah and and here i'd like to talk about

00:09:37,200 --> 00:09:41,279
the steel clients zigland

00:09:38,720 --> 00:09:42,240
is the tool that pro shaped by the uh

00:09:41,279 --> 00:09:46,000
flink

00:09:42,240 --> 00:09:48,720
and you can long uh cq out

00:09:46,000 --> 00:09:49,360
on the c in single clients but to be

00:09:48,720 --> 00:09:52,800
honest

00:09:49,360 --> 00:09:55,519
the serial client has two um

00:09:52,800 --> 00:09:57,360
uh two weakness yeah the first is that

00:09:55,519 --> 00:10:01,360
it is still hard to config

00:09:57,360 --> 00:10:04,480
because uh if you are not think expert

00:10:01,360 --> 00:10:07,360
usually you you cannot

00:10:04,480 --> 00:10:08,240
figure out how to configure this tool

00:10:07,360 --> 00:10:10,959
and the

00:10:08,240 --> 00:10:12,000
secondary is that the function is very

00:10:10,959 --> 00:10:14,640
limited

00:10:12,000 --> 00:10:16,079
um for example the most important thing

00:10:14,640 --> 00:10:18,880
visualization

00:10:16,079 --> 00:10:20,800
uh client cannot do data visualize

00:10:18,880 --> 00:10:22,270
visualization you cannot see

00:10:20,800 --> 00:10:24,399
charge so um

00:10:22,270 --> 00:10:27,200
[Music]

00:10:24,399 --> 00:10:28,160
so that means that the function is not

00:10:27,200 --> 00:10:32,959
enough

00:10:28,160 --> 00:10:35,920
for the uh data analysis people right

00:10:32,959 --> 00:10:36,640
so that's the that's the reason that i'd

00:10:35,920 --> 00:10:39,760
like to

00:10:36,640 --> 00:10:43,120
introduce you the apache sibling

00:10:39,760 --> 00:10:44,720
um yeah next i will talk about uh what

00:10:43,120 --> 00:10:48,320
is apache sibling and

00:10:44,720 --> 00:10:52,320
how that how sibling can help us to

00:10:48,320 --> 00:10:55,680
to do the real-time data analytics

00:10:52,320 --> 00:10:58,560
so first what is sibling zebra

00:10:55,680 --> 00:10:59,600
is a web-based notebook that enables

00:10:58,560 --> 00:11:01,760
data-driven

00:10:59,600 --> 00:11:04,320
interactive data analytics and

00:11:01,760 --> 00:11:08,160
collaborative documents with circular

00:11:04,320 --> 00:11:11,600
scala python and more so here is the

00:11:08,160 --> 00:11:14,399
screenshot of what is sibling and

00:11:11,600 --> 00:11:15,120
from this screenshot you can see that we

00:11:14,399 --> 00:11:18,880
can

00:11:15,120 --> 00:11:22,240
write code and long code in the sibling

00:11:18,880 --> 00:11:24,959
and besides that we can also

00:11:22,240 --> 00:11:25,839
see the results in an interactive

00:11:24,959 --> 00:11:28,720
approach

00:11:25,839 --> 00:11:29,920
and you can visualize the data in

00:11:28,720 --> 00:11:34,079
zipping without

00:11:29,920 --> 00:11:36,640
writing any javascript or html code

00:11:34,079 --> 00:11:38,160
yeah that will be pretty important for

00:11:36,640 --> 00:11:42,399
the data analysis people

00:11:38,160 --> 00:11:44,880
because with this tools they can just

00:11:42,399 --> 00:11:45,760
focus on the data and focus on the

00:11:44,880 --> 00:11:48,800
business

00:11:45,760 --> 00:11:51,519
they do not need too much uh

00:11:48,800 --> 00:11:52,560
too much knowledge about these is launch

00:11:51,519 --> 00:11:55,920
and technology and

00:11:52,560 --> 00:11:56,639
the backend analogy they just focus on

00:11:55,920 --> 00:11:58,399
the business

00:11:56,639 --> 00:12:01,120
and the focus on the domain domain

00:11:58,399 --> 00:12:04,320
knowledge yeah

00:12:01,120 --> 00:12:07,360
okay um first let me talk about the uh

00:12:04,320 --> 00:12:08,839
zipping architecture that will help you

00:12:07,360 --> 00:12:11,600
to understand

00:12:08,839 --> 00:12:15,040
uh how sibling can help us

00:12:11,600 --> 00:12:18,079
to to do the real-time technologies so

00:12:15,040 --> 00:12:20,320
basically ziplining has three layers

00:12:18,079 --> 00:12:21,680
on the left side is the client usually

00:12:20,320 --> 00:12:24,480
the client is a

00:12:21,680 --> 00:12:26,240
browser and the browser will communicate

00:12:24,480 --> 00:12:29,440
with the sibling server by

00:12:26,240 --> 00:12:32,959
two approach one is web socket

00:12:29,440 --> 00:12:34,399
another approach is rest api and zipping

00:12:32,959 --> 00:12:37,760
server is some kind

00:12:34,399 --> 00:12:41,360
of web server which is responsible for

00:12:37,760 --> 00:12:44,959
managing the interpret and managing the

00:12:41,360 --> 00:12:47,839
the notes so the interpreter is the

00:12:44,959 --> 00:12:49,760
i think it might be the most important

00:12:47,839 --> 00:12:52,560
concept in sibling

00:12:49,760 --> 00:12:53,360
and this interpreter is the plugable

00:12:52,560 --> 00:12:56,480
component

00:12:53,360 --> 00:12:59,519
that you can use to integrate with

00:12:56,480 --> 00:13:02,800
any tool for example here i

00:12:59,519 --> 00:13:05,760
list three interpret linking spark

00:13:02,800 --> 00:13:08,480
interpreter and gdbc input

00:13:05,760 --> 00:13:09,040
that means you can run flink code spar

00:13:08,480 --> 00:13:12,079
code

00:13:09,040 --> 00:13:15,600
and gdbc use jdbc to connect

00:13:12,079 --> 00:13:20,399
any database so um

00:13:15,600 --> 00:13:23,760
of course sampling has a has a lot of

00:13:20,399 --> 00:13:27,120
interpret besides these three uh

00:13:23,760 --> 00:13:28,720
so if you if you want to um if you want

00:13:27,120 --> 00:13:29,440
to check the details you can check the

00:13:28,720 --> 00:13:32,480
saving

00:13:29,440 --> 00:13:32,480
official website

00:13:33,040 --> 00:13:39,440
so next let me talk about the uh

00:13:36,639 --> 00:13:41,839
how we implement the uh how we integrate

00:13:39,440 --> 00:13:44,959
flink on simply

00:13:41,839 --> 00:13:45,760
so basically um here is diagram to

00:13:44,959 --> 00:13:48,720
demonstrate

00:13:45,760 --> 00:13:50,560
how how that works on the left side is

00:13:48,720 --> 00:13:52,160
the flink interpret

00:13:50,560 --> 00:13:53,760
in the fling interpreter there's two

00:13:52,160 --> 00:13:56,320
basic components

00:13:53,760 --> 00:13:57,120
scarcio and python shear the scalar

00:13:56,320 --> 00:14:00,160
shear is

00:13:57,120 --> 00:14:01,680
the is the component that can compile

00:14:00,160 --> 00:14:04,399
your scala code

00:14:01,680 --> 00:14:04,720
longer scala code and the python share

00:14:04,399 --> 00:14:07,680
is

00:14:04,720 --> 00:14:11,040
responsible to compile the python code

00:14:07,680 --> 00:14:14,639
and component along the python code

00:14:11,040 --> 00:14:15,120
and actually this scale is the ancient

00:14:14,639 --> 00:14:17,040
point

00:14:15,120 --> 00:14:18,880
of the flink interpreter and in

00:14:17,040 --> 00:14:22,079
scholarship it will create

00:14:18,880 --> 00:14:23,760
several built-in variables such as the

00:14:22,079 --> 00:14:26,079
execution environment

00:14:23,760 --> 00:14:27,519
string huge environment and table

00:14:26,079 --> 00:14:30,880
environment

00:14:27,519 --> 00:14:34,320
python share will also create such um

00:14:30,880 --> 00:14:36,560
such python variables but underneath

00:14:34,320 --> 00:14:38,800
see the they were sure that scholarship

00:14:36,560 --> 00:14:41,120
and pilot shares will share the same

00:14:38,800 --> 00:14:43,199
excuse environment string choosing one

00:14:41,120 --> 00:14:46,880
in a table environment

00:14:43,199 --> 00:14:49,120
on the right side is the fling cluster

00:14:46,880 --> 00:14:51,199
so the fling you can take the free

00:14:49,120 --> 00:14:54,720
interpreter as the flink client

00:14:51,199 --> 00:14:57,600
such is responsible for

00:14:54,720 --> 00:14:58,639
submit spring job and control the flink

00:14:57,600 --> 00:15:01,920
job

00:14:58,639 --> 00:15:02,399
and the just and the under the the thin

00:15:01,920 --> 00:15:05,360
class

00:15:02,399 --> 00:15:06,240
on the right side is responsible to

00:15:05,360 --> 00:15:09,440
wrong different

00:15:06,240 --> 00:15:09,440
for longer thing job

00:15:09,680 --> 00:15:13,920
okay um now let me talk about several

00:15:12,880 --> 00:15:17,519
main features

00:15:13,920 --> 00:15:20,720
of flink on sibling

00:15:17,519 --> 00:15:22,079
here i just list three uh six main

00:15:20,720 --> 00:15:25,440
features

00:15:22,079 --> 00:15:27,440
the first um the first is about multiple

00:15:25,440 --> 00:15:29,839
language support

00:15:27,440 --> 00:15:30,720
and the second is the multiple execution

00:15:29,839 --> 00:15:34,079
model

00:15:30,720 --> 00:15:36,320
third is the highway integration uh

00:15:34,079 --> 00:15:38,079
the first is about the third party

00:15:36,320 --> 00:15:40,079
dependency management

00:15:38,079 --> 00:15:41,360
and about the next thing about other

00:15:40,079 --> 00:15:43,839
ones the job can chew

00:15:41,360 --> 00:15:45,440
and the last is the streaming data

00:15:43,839 --> 00:15:48,800
visualization

00:15:45,440 --> 00:15:51,920
so next i will talk then uh i

00:15:48,800 --> 00:15:55,040
just will talk several all them because

00:15:51,920 --> 00:15:56,880
um time is limited so i just choose the

00:15:55,040 --> 00:15:59,920
most important features

00:15:56,880 --> 00:16:02,079
to uh to talk about

00:15:59,920 --> 00:16:03,680
so first is about the uh multiple

00:16:02,079 --> 00:16:07,279
language supports

00:16:03,680 --> 00:16:10,720
so basically in uh in zipping you can

00:16:07,279 --> 00:16:13,920
you can you have three languages

00:16:10,720 --> 00:16:17,600
you can write three kind of uh language

00:16:13,920 --> 00:16:21,360
to uh to run your flink job uh scala

00:16:17,600 --> 00:16:24,639
python or cq so in simply

00:16:21,360 --> 00:16:26,000
a the multiple languages support does

00:16:24,639 --> 00:16:29,279
not only mean that

00:16:26,000 --> 00:16:30,480
you can write these three uh three

00:16:29,279 --> 00:16:32,800
different languages

00:16:30,480 --> 00:16:34,959
the most important or the magical thing

00:16:32,800 --> 00:16:37,839
here is that

00:16:34,959 --> 00:16:39,279
you can collaborate between these

00:16:37,839 --> 00:16:41,680
languages

00:16:39,279 --> 00:16:42,639
so the reason is that as i mentioned

00:16:41,680 --> 00:16:46,560
before

00:16:42,639 --> 00:16:49,440
and i also highlight it here because

00:16:46,560 --> 00:16:51,199
the underlying reason is the underlying

00:16:49,440 --> 00:16:54,399
reason is that

00:16:51,199 --> 00:16:55,519
the scala python and sql they share the

00:16:54,399 --> 00:16:58,800
same

00:16:55,519 --> 00:16:59,360
several different in uh variables such

00:16:58,800 --> 00:17:02,079
as the

00:16:59,360 --> 00:17:03,199
qg environment string huge environment

00:17:02,079 --> 00:17:05,919
table environment

00:17:03,199 --> 00:17:07,439
and also the catalog so that's the

00:17:05,919 --> 00:17:10,079
reason we can collaborate

00:17:07,439 --> 00:17:12,880
between these languages so uh what what

00:17:10,079 --> 00:17:15,280
does the collaboration mean

00:17:12,880 --> 00:17:16,480
let me give you two examples one example

00:17:15,280 --> 00:17:20,559
is that

00:17:16,480 --> 00:17:23,919
you can write think udf in scala

00:17:20,559 --> 00:17:27,039
anything you can use that udf use that

00:17:23,919 --> 00:17:30,400
scalar udf in python language or in

00:17:27,039 --> 00:17:34,000
sql and similarly you can write

00:17:30,400 --> 00:17:37,600
udf in python language and

00:17:34,000 --> 00:17:38,799
you can use such udf in scala or in

00:17:37,600 --> 00:17:42,000
circle

00:17:38,799 --> 00:17:45,919
so this is a very unique

00:17:42,000 --> 00:17:49,440
feature that is supported by the uh

00:17:45,919 --> 00:17:50,880
by sibling because i don't think there's

00:17:49,440 --> 00:17:54,480
any other tools and

00:17:50,880 --> 00:17:57,919
can can do that so

00:17:54,480 --> 00:18:00,720
and if you are if you have some such

00:17:57,919 --> 00:18:01,440
kind of requirements that you want to

00:18:00,720 --> 00:18:03,360
write

00:18:01,440 --> 00:18:05,440
you can you want to collaborate

00:18:03,360 --> 00:18:08,320
collaborate between different languages

00:18:05,440 --> 00:18:08,880
and since this is our right choice for

00:18:08,320 --> 00:18:14,080
you

00:18:08,880 --> 00:18:17,200
use you know use link on simply

00:18:14,080 --> 00:18:20,240
uh yeah here

00:18:17,200 --> 00:18:20,640
actually i have already uh mentioned

00:18:20,240 --> 00:18:23,760
that

00:18:20,640 --> 00:18:25,679
that multiple language supports so that

00:18:23,760 --> 00:18:26,480
means multiple languages in one thing

00:18:25,679 --> 00:18:30,799
class

00:18:26,480 --> 00:18:30,799
and the clause language operations

00:18:31,200 --> 00:18:37,600
okay so the next thing is about the

00:18:35,640 --> 00:18:41,200
multi-projection model

00:18:37,600 --> 00:18:43,280
so um countries there's three

00:18:41,200 --> 00:18:45,440
three kind of extrusion models supported

00:18:43,280 --> 00:18:48,320
by uh

00:18:45,440 --> 00:18:49,280
by zipping the first is a local local

00:18:48,320 --> 00:18:53,280
model

00:18:49,280 --> 00:18:56,640
locomotive means that you just

00:18:53,280 --> 00:18:59,679
just start a mini cluster in the uh

00:18:56,640 --> 00:18:59,919
in the local machine and the job manager

00:18:59,679 --> 00:19:03,120
and

00:18:59,919 --> 00:19:07,919
the task manager is just learning as a

00:19:03,120 --> 00:19:11,039
separate thread so this is pretty um

00:19:07,919 --> 00:19:12,720
i think this is the simplest way to try

00:19:11,039 --> 00:19:15,840
flink on simply

00:19:12,720 --> 00:19:18,640
so you don't need to search up any flink

00:19:15,840 --> 00:19:20,880
green cluster the second model is the

00:19:18,640 --> 00:19:21,360
remote cluster the most cluster means

00:19:20,880 --> 00:19:23,600
that

00:19:21,360 --> 00:19:24,720
there are already a flame cluster

00:19:23,600 --> 00:19:28,559
learning and

00:19:24,720 --> 00:19:31,840
you'd like to connect that class fluency

00:19:28,559 --> 00:19:32,400
such as for example if you have already

00:19:31,840 --> 00:19:35,919
started

00:19:32,400 --> 00:19:39,280
a standalone frame cluster and you can

00:19:35,919 --> 00:19:40,080
connect to that think standalone flink

00:19:39,280 --> 00:19:43,280
cluster

00:19:40,080 --> 00:19:45,919
in zipping by the remote model

00:19:43,280 --> 00:19:48,000
the third the certain model is the young

00:19:45,919 --> 00:19:51,120
model the young model means that

00:19:48,000 --> 00:19:54,799
you can create a fling cluster

00:19:51,120 --> 00:19:57,039
in the young cluster anything you can

00:19:54,799 --> 00:19:58,320
you can uh submit job to the to this

00:19:57,039 --> 00:20:01,600
cluster

00:19:58,320 --> 00:20:04,480
um the first uh

00:20:01,600 --> 00:20:05,360
the next class execution mode is

00:20:04,480 --> 00:20:08,799
kubernetes

00:20:05,360 --> 00:20:11,280
but actually it is not implemented yet

00:20:08,799 --> 00:20:12,000
and it is in progress so the sibling

00:20:11,280 --> 00:20:15,360
community

00:20:12,000 --> 00:20:17,760
is trying to uh to do that in the next

00:20:15,360 --> 00:20:17,760
release

00:20:18,640 --> 00:20:22,559
so the third thing uh the next feature

00:20:21,440 --> 00:20:25,840
i'd like to talk about

00:20:22,559 --> 00:20:29,520
is the third party dependency management

00:20:25,840 --> 00:20:33,440
so um which is very common to add a

00:20:29,520 --> 00:20:37,280
third-party dependency to to flink

00:20:33,440 --> 00:20:38,080
especially you'd like to read on large

00:20:37,280 --> 00:20:41,280
data flow

00:20:38,080 --> 00:20:44,960
on other sources or things so

00:20:41,280 --> 00:20:47,440
for example um you would like to

00:20:44,960 --> 00:20:48,400
read the data from kafka and the large

00:20:47,440 --> 00:20:52,080
data to

00:20:48,400 --> 00:20:55,440
elastic search or something else so

00:20:52,080 --> 00:20:57,679
which is actually if you use ide

00:20:55,440 --> 00:20:58,720
which is very important it's very easy

00:20:57,679 --> 00:21:02,159
for you to

00:20:58,720 --> 00:21:05,919
edit out third party dependency

00:21:02,159 --> 00:21:08,799
so how can we do that in in sibling so

00:21:05,919 --> 00:21:09,600
actually there's two approach so the

00:21:08,799 --> 00:21:12,960
first approach

00:21:09,600 --> 00:21:15,400
is the uh why why the

00:21:12,960 --> 00:21:17,120
configuration of flink dot

00:21:15,400 --> 00:21:20,640
flink.execution.packages

00:21:17,120 --> 00:21:23,200
so here is the one example that

00:21:20,640 --> 00:21:24,320
you can use this configuration to

00:21:23,200 --> 00:21:27,840
specify the

00:21:24,320 --> 00:21:30,640
dependencies you'd like

00:21:27,840 --> 00:21:32,559
you'd like to include uh actually the

00:21:30,640 --> 00:21:35,280
the this kind of approach

00:21:32,559 --> 00:21:37,440
is very similar to the uh twitter

00:21:35,280 --> 00:21:38,400
approach you add a dependency in in

00:21:37,440 --> 00:21:42,480
maven

00:21:38,400 --> 00:21:44,880
in the uh maintenance 0.5 and

00:21:42,480 --> 00:21:45,520
it should underneath it will also uh

00:21:44,880 --> 00:21:48,880
download

00:21:45,520 --> 00:21:52,159
the package from the maven reporter and

00:21:48,880 --> 00:21:52,720
add them to the classpath so the second

00:21:52,159 --> 00:21:56,080
approach

00:21:52,720 --> 00:21:59,600
is by the fling.execution.js

00:21:56,080 --> 00:22:03,360
and this approach is um

00:21:59,600 --> 00:22:05,760
you can use this approach in in two um

00:22:03,360 --> 00:22:07,520
in two cases one case is that your

00:22:05,760 --> 00:22:09,840
dependency is not deployed

00:22:07,520 --> 00:22:12,799
in the mainland repository so you have

00:22:09,840 --> 00:22:16,000
to use this approach

00:22:12,799 --> 00:22:19,760
so the second case is that

00:22:16,000 --> 00:22:22,640
if you don't have internet access

00:22:19,760 --> 00:22:24,480
so you cannot download the download

00:22:22,640 --> 00:22:27,520
package from the internet

00:22:24,480 --> 00:22:29,600
so then in this case you can also use

00:22:27,520 --> 00:22:33,919
the flink.execution.js

00:22:29,600 --> 00:22:36,960
to specify the jar file explicitly

00:22:33,919 --> 00:22:39,679
okay so um

00:22:36,960 --> 00:22:40,559
the next feature is about the uh

00:22:39,679 --> 00:22:43,679
advanced

00:22:40,559 --> 00:22:46,720
job control so

00:22:43,679 --> 00:22:48,559
um basically it says um

00:22:46,720 --> 00:22:50,640
so the advanced job control means

00:22:48,559 --> 00:22:51,440
several things so you can configure your

00:22:50,640 --> 00:22:53,760
job

00:22:51,440 --> 00:22:56,159
and you can submit your job and after

00:22:53,760 --> 00:22:59,120
submission you can monitor your job

00:22:56,159 --> 00:23:00,480
and then you can cancel your job and

00:22:59,120 --> 00:23:02,880
resume your job

00:23:00,480 --> 00:23:06,559
uh the last thing is the resume job from

00:23:02,880 --> 00:23:09,360
same point or checkpoint yes this is

00:23:06,559 --> 00:23:10,480
this is very special for the streaming

00:23:09,360 --> 00:23:12,400
job because

00:23:10,480 --> 00:23:16,159
for the streaming job save punch and

00:23:12,400 --> 00:23:16,159
checkpoint is pretty important

00:23:17,420 --> 00:23:21,039
[Music]

00:23:18,559 --> 00:23:22,480
the next feature is about the streaming

00:23:21,039 --> 00:23:26,000
visualization

00:23:22,480 --> 00:23:29,120
so the streaming visualization um

00:23:26,000 --> 00:23:32,640
this accuracy has three kinds of uh

00:23:29,120 --> 00:23:36,000
visualization you can do in uh in spring

00:23:32,640 --> 00:23:39,760
the first is single second is update so

00:23:36,000 --> 00:23:43,600
uh the society is append

00:23:39,760 --> 00:23:47,360
so let me talk about then uh one by one

00:23:43,600 --> 00:23:49,840
uh yeah so so first thing is the

00:23:47,360 --> 00:23:50,640
about self move first thing about the

00:23:49,840 --> 00:23:53,679
single model

00:23:50,640 --> 00:23:56,640
so the single model means that

00:23:53,679 --> 00:23:57,919
your circle will always produce singular

00:23:56,640 --> 00:24:01,520
results

00:23:57,919 --> 00:24:04,799
and energy

00:24:01,520 --> 00:24:08,400
in such case we can visualize the

00:24:04,799 --> 00:24:11,520
result by the html so here is

00:24:08,400 --> 00:24:11,520
one example

00:24:12,640 --> 00:24:16,720
here here's the example i just select

00:24:15,200 --> 00:24:20,400
the total count

00:24:16,720 --> 00:24:23,520
from the uh from uh from a table

00:24:20,400 --> 00:24:26,640
and i will display the result

00:24:23,520 --> 00:24:27,279
wise html you can see uh here is a

00:24:26,640 --> 00:24:31,440
template

00:24:27,279 --> 00:24:34,799
right the template i the temperature is

00:24:31,440 --> 00:24:39,039
is html temperature and

00:24:34,799 --> 00:24:42,320
the uh here is the placeholder

00:24:39,039 --> 00:24:43,200
so you can see the result here the

00:24:42,320 --> 00:24:46,480
layout is

00:24:43,200 --> 00:24:49,200
is refreshing every uh

00:24:46,480 --> 00:24:49,919
by default each word flashing uh your

00:24:49,200 --> 00:24:52,159
case

00:24:49,919 --> 00:24:53,760
here actually i specify the refresh

00:24:52,159 --> 00:24:56,720
interval as

00:24:53,760 --> 00:24:56,720
one second right

00:24:57,440 --> 00:25:03,520
so um the second the

00:25:00,960 --> 00:25:04,720
second visualization model is the

00:25:03,520 --> 00:25:07,919
updated model

00:25:04,720 --> 00:25:11,120
so the update model uh can be used

00:25:07,919 --> 00:25:11,600
in in the case of that you have multiple

00:25:11,120 --> 00:25:15,440
load

00:25:11,600 --> 00:25:18,640
outputs so here is the

00:25:15,440 --> 00:25:22,880
very similar circle statement

00:25:18,640 --> 00:25:26,720
here i just use the group by so

00:25:22,880 --> 00:25:30,080
you can see that i will produce multiple

00:25:26,720 --> 00:25:33,440
multiple loads right and the output

00:25:30,080 --> 00:25:34,640
will be updated continuously and you can

00:25:33,440 --> 00:25:40,080
see the result

00:25:34,640 --> 00:25:40,080
is leaflet is refreshed every two

00:25:40,840 --> 00:25:46,720
seconds

00:25:42,640 --> 00:25:50,000
and the uh the next model is about the

00:25:46,720 --> 00:25:53,039
uh streaming video

00:25:50,000 --> 00:25:56,320
append model so the appended model

00:25:53,039 --> 00:25:57,039
can be used in the case that the output

00:25:56,320 --> 00:26:02,080
date

00:25:57,039 --> 00:26:02,080
is always appending um

00:26:02,559 --> 00:26:06,320
so here is the one example that i use

00:26:05,360 --> 00:26:09,760
the uh

00:26:06,320 --> 00:26:13,840
tango we know the tempo we know where

00:26:09,760 --> 00:26:15,919
the time of winter is about five seconds

00:26:13,840 --> 00:26:16,960
so every five seconds i will create a

00:26:15,919 --> 00:26:20,880
window and

00:26:16,960 --> 00:26:24,240
calculates the uh calculates the uh

00:26:20,880 --> 00:26:27,360
the start time status and the count

00:26:24,240 --> 00:26:32,720
and i i here i will use line chart

00:26:27,360 --> 00:26:32,720
to visualize the the data

00:26:33,279 --> 00:26:39,840
okay so now let me give you a demo

00:26:42,400 --> 00:26:46,960
yeah so uh let me uh first let me give

00:26:44,720 --> 00:26:47,360
you a brief introduction of stippling so

00:26:46,960 --> 00:26:49,919
here

00:26:47,360 --> 00:26:51,360
here it is the zeppelin and when you

00:26:49,919 --> 00:26:55,039
open zipping you can see

00:26:51,360 --> 00:26:56,559
see this uh see this page so this is the

00:26:55,039 --> 00:27:00,159
homepage or sibling

00:26:56,559 --> 00:27:01,360
and here let me give you okay the

00:27:00,159 --> 00:27:03,039
interpreter

00:27:01,360 --> 00:27:04,559
in this page it will list all the

00:27:03,039 --> 00:27:07,679
available interpreters

00:27:04,559 --> 00:27:09,760
and let's go to the flink invert and

00:27:07,679 --> 00:27:10,960
here you can just configure the fling

00:27:09,760 --> 00:27:13,200
interpreter so

00:27:10,960 --> 00:27:13,200
um

00:27:14,720 --> 00:27:18,320
for the flinging spreads the only thing

00:27:16,799 --> 00:27:20,320
uh is to

00:27:18,320 --> 00:27:22,640
configure the fling home the fling home

00:27:20,320 --> 00:27:25,440
is the photos that point to the

00:27:22,640 --> 00:27:27,919
link distribution so here i just use the

00:27:25,440 --> 00:27:31,600
thing 1.11

00:27:27,919 --> 00:27:32,720
and besides that you don't need to do

00:27:31,600 --> 00:27:35,039
anything unless

00:27:32,720 --> 00:27:37,440
you would you would like to try some

00:27:35,039 --> 00:27:40,880
other advanced features

00:27:37,440 --> 00:27:44,320
so um yeah now let's get back to the

00:27:40,880 --> 00:27:48,159
uh notebook and

00:27:44,320 --> 00:27:51,600
let me try this one so the flink

00:27:48,159 --> 00:27:54,559
here is a very big very basic

00:27:51,600 --> 00:27:56,880
example that how to run the uh what

00:27:54,559 --> 00:27:58,320
account so there's two examples one is

00:27:56,880 --> 00:28:01,919
the batch word count

00:27:58,320 --> 00:28:02,480
another is the streaming word account so

00:28:01,919 --> 00:28:06,000
yeah

00:28:02,480 --> 00:28:10,960
let me uh let me first let me

00:28:06,000 --> 00:28:14,840
first try to stop that because otherwise

00:28:10,960 --> 00:28:17,440
you will have some issues

00:28:14,840 --> 00:28:20,720
yeah because because there's

00:28:17,440 --> 00:28:21,840
ton uh post config yeah i i don't have

00:28:20,720 --> 00:28:25,039
much time to

00:28:21,840 --> 00:28:27,840
explain that but uh

00:28:25,039 --> 00:28:27,840
let's try yeah

00:28:28,080 --> 00:28:31,600
so uh yeah so now it is lonely so the

00:28:31,120 --> 00:28:34,080
first

00:28:31,600 --> 00:28:34,720
for the first time it will uh which will

00:28:34,080 --> 00:28:37,840
take uh

00:28:34,720 --> 00:28:41,120
a bit too long because uh because

00:28:37,840 --> 00:28:44,640
underneath it will create a mini cluster

00:28:41,120 --> 00:28:47,039
so as i said we the mini cluster

00:28:44,640 --> 00:28:50,240
will run the uh job manager and task

00:28:47,039 --> 00:28:50,240
manager in the uh

00:28:50,960 --> 00:28:58,720
in the current process by the sled so um

00:28:55,120 --> 00:29:01,200
yeah just wait for a few seconds which

00:28:58,720 --> 00:29:02,000
is learning okay we can see the output

00:29:01,200 --> 00:29:06,480
right so

00:29:02,000 --> 00:29:09,760
that means it is learning

00:29:06,480 --> 00:29:12,080
okay now we can see the flink job link

00:29:09,760 --> 00:29:13,200
you can click that into which it will

00:29:12,080 --> 00:29:16,480
bring you to the

00:29:13,200 --> 00:29:19,039
fling thing ui and you can see the

00:29:16,480 --> 00:29:20,240
job details here now let's get back to

00:29:19,039 --> 00:29:22,720
the notebook

00:29:20,240 --> 00:29:23,360
so here you can see the results right

00:29:22,720 --> 00:29:28,240
this is

00:29:23,360 --> 00:29:30,399
uh batch work on the results now let's

00:29:28,240 --> 00:29:31,679
let's try this streaming world account

00:29:30,399 --> 00:29:40,159
example let's

00:29:31,679 --> 00:29:43,520
try that

00:29:40,159 --> 00:29:46,080
okay yeah now since we have already

00:29:43,520 --> 00:29:46,080
started this

00:29:47,200 --> 00:29:53,679
will be much faster here so this is

00:29:50,480 --> 00:29:56,720
the result of the streaming output

00:29:53,679 --> 00:29:59,279
so you will notice that the um the

00:29:56,720 --> 00:30:04,000
streaming output is a little different

00:29:59,279 --> 00:30:07,360
from the batch uh bachelor account

00:30:04,000 --> 00:30:09,600
so um so the difference is that

00:30:07,360 --> 00:30:11,039
for the streaming world account it will

00:30:09,600 --> 00:30:14,320
also produce

00:30:11,039 --> 00:30:15,200
the middle layout right you can see

00:30:14,320 --> 00:30:17,760
there

00:30:15,200 --> 00:30:18,640
try to look at the and say hello say

00:30:17,760 --> 00:30:22,640
hello

00:30:18,640 --> 00:30:24,880
hello to hello sweet right so

00:30:22,640 --> 00:30:26,559
it it will uh for the streaming work on

00:30:24,880 --> 00:30:29,600
it it should not only

00:30:26,559 --> 00:30:30,240
produce the final final reduct it will

00:30:29,600 --> 00:30:33,279
also

00:30:30,240 --> 00:30:35,039
produce the middle output so this is the

00:30:33,279 --> 00:30:37,840
difference between the batch

00:30:35,039 --> 00:30:38,320
and streaming is also difference between

00:30:37,840 --> 00:30:40,799
the

00:30:38,320 --> 00:30:41,840
historical data underneath and the

00:30:40,799 --> 00:30:45,039
real-time

00:30:41,840 --> 00:30:48,840
data right okay now

00:30:45,039 --> 00:30:52,000
uh let me give you uh another example

00:30:48,840 --> 00:30:55,760
um yeah

00:30:52,000 --> 00:30:59,840
here so in this example

00:30:55,760 --> 00:30:59,840
i will just uh try to

00:31:00,080 --> 00:31:04,240
do some data real-time databases based

00:31:03,360 --> 00:31:07,679
on the

00:31:04,240 --> 00:31:11,039
web log so here i just

00:31:07,679 --> 00:31:11,679
simulate a web block while i customize

00:31:11,039 --> 00:31:13,360
the

00:31:11,679 --> 00:31:15,679
source function so in this first

00:31:13,360 --> 00:31:18,799
function i i will simulate

00:31:15,679 --> 00:31:22,080
some web events so

00:31:18,799 --> 00:31:22,480
here i will have three three kind of

00:31:22,080 --> 00:31:24,640
page

00:31:22,480 --> 00:31:26,320
the home page the search page and

00:31:24,640 --> 00:31:30,000
product page

00:31:26,320 --> 00:31:30,000
and i will just try to

00:31:30,480 --> 00:31:37,679
visit each page in in this

00:31:33,840 --> 00:31:40,960
uh in this uh function so and uh

00:31:37,679 --> 00:31:43,279
finally i will just regist that

00:31:40,960 --> 00:31:45,279
source function as uh as a at the

00:31:43,279 --> 00:31:48,640
streaming table the table name is

00:31:45,279 --> 00:31:51,919
log and we have first time

00:31:48,640 --> 00:31:55,679
url so now let's learn

00:31:51,919 --> 00:32:00,080
this oh i i think i

00:31:55,679 --> 00:32:03,519
forgot one thing yeah never mind

00:32:00,080 --> 00:32:06,320
let's okay yeah you can see that

00:32:03,519 --> 00:32:07,760
yeah could not create dispatch yeah

00:32:06,320 --> 00:32:11,519
let's scroll down yeah

00:32:07,760 --> 00:32:14,720
so this is loose cost right could not

00:32:11,519 --> 00:32:18,640
touch baseboard on h

00:32:14,720 --> 00:32:21,679
o so

00:32:18,640 --> 00:32:24,480
uh so the reason is that uh in the last

00:32:21,679 --> 00:32:28,000
example i have already uh start

00:32:24,480 --> 00:32:32,000
link mini cluster so the

00:32:28,000 --> 00:32:35,279
support hoh

00:32:32,000 --> 00:32:37,360
hoh1 is already being used

00:32:35,279 --> 00:32:38,799
so i have to choose another part

00:32:37,360 --> 00:32:42,550
otherwise i will

00:32:38,799 --> 00:32:44,320
keep this kind of error so now let's

00:32:42,550 --> 00:32:47,360
[Music]

00:32:44,320 --> 00:32:51,039
let's try to stop the

00:32:47,360 --> 00:32:54,399
last blink mini cluster then

00:32:51,039 --> 00:32:59,039
let's get back to here

00:32:54,399 --> 00:32:59,039
okay yeah orange again

00:33:01,279 --> 00:33:07,519
okay now this time we are supposed to uh

00:33:04,880 --> 00:33:11,840
we are supposed to run this co this

00:33:07,519 --> 00:33:11,840
piece of code collector

00:33:15,200 --> 00:33:19,600
just wait a few seconds because um

00:33:20,559 --> 00:33:24,240
because for the first time it will

00:33:22,159 --> 00:33:27,360
launch the mini cluster

00:33:24,240 --> 00:33:31,919
so it will just take

00:33:27,360 --> 00:33:31,919
take a few take a few more minutes

00:33:36,840 --> 00:33:39,840
okay

00:33:51,200 --> 00:33:58,799
yeah okay so we can check this uh

00:33:54,640 --> 00:33:58,799
you can check the uh link web

00:34:04,080 --> 00:34:21,839
um let me check

00:34:27,760 --> 00:34:30,879
um

00:34:28,170 --> 00:34:35,839
[Music]

00:34:30,879 --> 00:34:35,839
i think it check maybe

00:34:38,240 --> 00:34:45,280
oh my laptop is

00:34:41,280 --> 00:34:45,280
stuck sorry for that

00:34:45,359 --> 00:34:53,919
um i hope

00:34:48,720 --> 00:34:53,919
yeah let me restart it again

00:35:00,839 --> 00:35:03,839
okay

00:35:05,359 --> 00:35:10,960
yeah doing demo is always a risky thing

00:35:15,200 --> 00:35:31,839
okay let me try that

00:35:36,720 --> 00:35:45,839
all right

00:36:08,400 --> 00:36:18,160
okay i think

00:36:12,880 --> 00:36:18,160
i'll just start again what's going on

00:36:23,280 --> 00:36:27,839
oh i can't launch here try and maybe try

00:36:35,520 --> 00:36:42,720
all right oh yeah anyway

00:36:39,280 --> 00:36:43,520
this is my plan b yeah yeah so here i

00:36:42,720 --> 00:36:45,920
can see the

00:36:43,520 --> 00:36:46,720
uh actually you can see the reload right

00:36:45,920 --> 00:36:50,160
so here it's

00:36:46,720 --> 00:36:52,320
html uh output this is my this is a

00:36:50,160 --> 00:36:55,680
template i i specify

00:36:52,320 --> 00:36:57,760
so uh this is uh this is the query so

00:36:55,680 --> 00:37:00,720
it's very simple that i just

00:36:57,760 --> 00:37:02,079
try to get the total uh for the page

00:37:00,720 --> 00:37:06,000
view

00:37:02,079 --> 00:37:06,960
now let me try another example you see

00:37:06,000 --> 00:37:10,320
this kind of

00:37:06,960 --> 00:37:10,720
so this this is the type equal to single

00:37:10,320 --> 00:37:13,440
so

00:37:10,720 --> 00:37:14,560
that means that it always gets single uh

00:37:13,440 --> 00:37:18,880
single row

00:37:14,560 --> 00:37:22,079
and here it is the uh type equal to uh

00:37:18,880 --> 00:37:23,359
update update mode so i can see you can

00:37:22,079 --> 00:37:28,240
see the multiple out

00:37:23,359 --> 00:37:28,240
multiple rows outputs now um

00:37:28,960 --> 00:37:32,880
yeah you can see the result is

00:37:31,119 --> 00:37:36,240
refreshing right

00:37:32,880 --> 00:37:36,800
and this is the table on table on output

00:37:36,240 --> 00:37:39,839
you can

00:37:36,800 --> 00:37:41,920
we can also check the uh

00:37:39,839 --> 00:37:44,000
bar chart but never mind sometimes the

00:37:41,920 --> 00:37:48,400
bar chart cannot display it

00:37:44,000 --> 00:37:52,400
correctly so in that case you need to

00:37:48,400 --> 00:37:55,050
cancel that and the stretch edge clutch

00:37:52,400 --> 00:37:56,640
because sometimes uh

00:37:55,050 --> 00:38:00,000
[Music]

00:37:56,640 --> 00:38:03,760
because sometimes zipping is not so

00:38:00,000 --> 00:38:07,520
clever to in for the uh

00:38:03,760 --> 00:38:12,560
how to um how to uh sets the um

00:38:07,520 --> 00:38:12,560
says the bar charts yeah now

00:38:12,720 --> 00:38:18,000
try to look at the number here which we

00:38:15,599 --> 00:38:21,760
are changing right

00:38:18,000 --> 00:38:24,240
now uh here we we not only

00:38:21,760 --> 00:38:26,079
can set the uh type we cannot just state

00:38:24,240 --> 00:38:27,359
as other configuration such as the

00:38:26,079 --> 00:38:31,119
parallelism

00:38:27,359 --> 00:38:33,520
now uh yeah we can check the uh

00:38:31,119 --> 00:38:34,880
the fling job here so by default the

00:38:33,520 --> 00:38:38,240
parties is one

00:38:34,880 --> 00:38:47,839
right now if i want to

00:38:38,240 --> 00:38:47,839
change the parallelism

00:38:48,160 --> 00:38:51,680
okay if you're starting right now let's

00:38:50,880 --> 00:38:54,880
let me click

00:38:51,680 --> 00:38:56,400
here okay you can see that the

00:38:54,880 --> 00:39:00,560
parallelism is changed to

00:38:56,400 --> 00:39:03,680
two right now uh so

00:39:00,560 --> 00:39:07,280
here the example is we do that

00:39:03,680 --> 00:39:08,079
in in the pure cq right the pure sql

00:39:07,280 --> 00:39:11,280
language

00:39:08,079 --> 00:39:12,560
so if you don't and so besides that you

00:39:11,280 --> 00:39:16,240
can also do the uh

00:39:12,560 --> 00:39:18,000
do that in scala or in in python so

00:39:16,240 --> 00:39:21,599
here's one example that

00:39:18,000 --> 00:39:25,200
you run the circle in scholar language

00:39:21,599 --> 00:39:27,280
and also visualize it in scalar language

00:39:25,200 --> 00:39:31,760
you can just try to use the

00:39:27,280 --> 00:39:34,560
c c is the built-in variable for the

00:39:31,760 --> 00:39:36,079
sampling it is you can take it as a

00:39:34,560 --> 00:39:39,040
utility uh

00:39:36,079 --> 00:39:40,480
variable to uh to visualize the uh for

00:39:39,040 --> 00:39:43,440
some advanced feature

00:39:40,480 --> 00:39:45,920
now um yeah we can launch this the

00:39:43,440 --> 00:39:45,920
python

00:39:54,839 --> 00:39:57,839
okay

00:39:57,920 --> 00:40:03,280
oh yeah job is learning you can check

00:40:00,800 --> 00:40:07,359
the details

00:40:03,280 --> 00:40:10,880
okay ah you see the creative right

00:40:07,359 --> 00:40:13,920
so that means

00:40:10,880 --> 00:40:19,040
i don't have enough

00:40:13,920 --> 00:40:22,079
resources maybe yeah let's get back

00:40:19,040 --> 00:40:25,200
so i need to cancel

00:40:22,079 --> 00:40:29,200
the several jobs so that's okay

00:40:25,200 --> 00:40:32,240
enough i can have enough um

00:40:29,200 --> 00:40:32,640
resource for running the the following

00:40:32,240 --> 00:40:35,280
two

00:40:32,640 --> 00:40:36,000
two quarters outline okay now we can

00:40:35,280 --> 00:40:38,800
have

00:40:36,000 --> 00:40:39,119
yeah this is a scalar example right and

00:40:38,800 --> 00:40:42,560
this

00:40:39,119 --> 00:40:46,560
is the uh this is the python example

00:40:42,560 --> 00:40:48,000
okay now yeah so this is the demo now

00:40:46,560 --> 00:40:51,599
let's get back to the

00:40:48,000 --> 00:40:56,319
uh the

00:40:51,599 --> 00:40:56,319
slice okay

00:40:57,760 --> 00:41:01,520
so yeah so now let me give you a summary

00:41:00,400 --> 00:41:04,640
of today's uh

00:41:01,520 --> 00:41:08,480
talk so uh first i talked about the uh

00:41:04,640 --> 00:41:11,359
data is so two kinds of data address

00:41:08,480 --> 00:41:12,720
historical data analytics and real-time

00:41:11,359 --> 00:41:15,280
data and this

00:41:12,720 --> 00:41:15,920
and then i talked about two projects

00:41:15,280 --> 00:41:18,880
flink

00:41:15,920 --> 00:41:19,359
and simply flink is a streaming huge

00:41:18,880 --> 00:41:22,880
engine

00:41:19,359 --> 00:41:25,760
and the same thing is the analytics tool

00:41:22,880 --> 00:41:27,119
so there's several important features

00:41:25,760 --> 00:41:30,400
that stippling can

00:41:27,119 --> 00:41:33,680
help you to do the real-time business

00:41:30,400 --> 00:41:37,359
and besides that i i actually i

00:41:33,680 --> 00:41:40,319
list several uh several links

00:41:37,359 --> 00:41:41,040
for uh for more uh advance for more

00:41:40,319 --> 00:41:44,000
materials

00:41:41,040 --> 00:41:44,640
about how how you can check the details

00:41:44,000 --> 00:41:47,440
of

00:41:44,640 --> 00:41:49,359
use flink unsibling for the streaming

00:41:47,440 --> 00:41:52,720
data and this

00:41:49,359 --> 00:41:53,200
okay so today so this is uh my talk

00:41:52,720 --> 00:41:55,920
today

00:41:53,200 --> 00:41:56,720
thank you everyone now let's get back to

00:41:55,920 --> 00:42:01,280
the q a

00:41:56,720 --> 00:42:03,839
q a um so

00:42:01,280 --> 00:42:03,839
okay

00:42:05,440 --> 00:42:17,839
yeah all right flicks so how can we do

00:42:08,240 --> 00:42:17,839
the q and a

00:42:25,280 --> 00:42:31,839
should i stop shooting

00:43:04,000 --> 00:43:07,210
[Music]

00:43:10,839 --> 00:43:13,839
um

00:43:29,359 --> 00:43:41,839
so if there's no q and a i will

00:43:33,040 --> 00:43:41,839
stop sharing and thank you everyone

00:44:05,119 --> 00:44:07,200

YouTube URL: https://www.youtube.com/watch?v=FcD8KMkfCEM


