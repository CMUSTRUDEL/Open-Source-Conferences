Title: Choosing an HTTP Proxy Server - Bryan Call
Publication date: 2014-04-25
Playlist: ApacheCon North America 2014
Description: 
	ApacheCon North America 2014
Captions: 
	00:00:00,000 --> 00:00:05,549
so I'm going to go ahead and get started

00:00:01,730 --> 00:00:09,750
can everybody hear me think so sounds

00:00:05,549 --> 00:00:11,130
like it I'm Brian call I'm going to be

00:00:09,750 --> 00:00:13,980
talking about chu easy no proxy server

00:00:11,130 --> 00:00:17,730
I'm an 80s committer and i work at yahoo

00:00:13,980 --> 00:00:19,109
it's a little bit about me i can say

00:00:17,730 --> 00:00:20,760
that i work at yahoo I've worked on a

00:00:19,109 --> 00:00:24,420
whole bunch of different projects over

00:00:20,760 --> 00:00:28,199
the years currently working on 80s and

00:00:24,420 --> 00:00:32,520
HP related stuff go to IETF for HP to

00:00:28,199 --> 00:00:35,790
and TLS working groups worked on traffic

00:00:32,520 --> 00:00:37,620
server for seven years now since 2007

00:00:35,790 --> 00:00:40,079
and I was part of the group that open

00:00:37,620 --> 00:00:43,800
sourced it in 2009 and like I said I'm

00:00:40,079 --> 00:00:46,110
an 80s committer so it's just a brief

00:00:43,800 --> 00:00:49,230
overview of the presentation I'm just

00:00:46,110 --> 00:00:52,620
going to jump into it so how are you

00:00:49,230 --> 00:00:55,219
going to use a proxy server so there's

00:00:52,620 --> 00:01:00,629
various modes for running a proxy server

00:00:55,219 --> 00:01:02,520
and I'm going to talk about that so one

00:01:00,629 --> 00:01:04,500
of the main ways to use a proxy server

00:01:02,520 --> 00:01:07,220
is a reverse proxy server so this is

00:01:04,500 --> 00:01:10,830
where you have a browser and it would

00:01:07,220 --> 00:01:12,510
connect to the proxy server and then it

00:01:10,830 --> 00:01:15,090
would direct it to one of your internal

00:01:12,510 --> 00:01:20,460
web servers in this case proxy server

00:01:15,090 --> 00:01:21,390
can do caching or not and so some of the

00:01:20,460 --> 00:01:23,939
questions you're going to ask yourself

00:01:21,390 --> 00:01:25,979
when you set up a reverse proxy server

00:01:23,939 --> 00:01:28,380
is do you want to know is your is your

00:01:25,979 --> 00:01:30,840
content cacheable or not so we have

00:01:28,380 --> 00:01:32,460
different modes where our contents is

00:01:30,840 --> 00:01:33,750
highly catchable where you get you know

00:01:32,460 --> 00:01:35,130
close to one hundred percent cache hit

00:01:33,750 --> 00:01:37,079
rate then there's other times where it's

00:01:35,130 --> 00:01:38,640
it's very low cash yet right so

00:01:37,079 --> 00:01:40,650
sometimes it's just worked it just

00:01:38,640 --> 00:01:42,240
turning off the cash completely because

00:01:40,650 --> 00:01:44,189
you take a little bit of overhead having

00:01:42,240 --> 00:01:48,720
those cash lookups not much but a little

00:01:44,189 --> 00:01:51,149
bit some and also for reverse proxies do

00:01:48,720 --> 00:01:53,970
you want to have them geographically

00:01:51,149 --> 00:01:58,009
located next to your customers so that

00:01:53,970 --> 00:02:00,899
way when they're doing requests and

00:01:58,009 --> 00:02:02,610
three waking and shake ssl handshake is

00:02:00,899 --> 00:02:07,979
all close to their customers so that the

00:02:02,610 --> 00:02:10,679
round-trip time is really reduced so we

00:02:07,979 --> 00:02:12,930
have a lot of kodos across the world and

00:02:10,679 --> 00:02:15,239
this helps out quite a bit

00:02:12,930 --> 00:02:18,810
and what also comes into this is

00:02:15,239 --> 00:02:22,950
connection handling so in some cases

00:02:18,810 --> 00:02:24,659
will so say like in the Philippines

00:02:22,950 --> 00:02:26,340
there'll be proxy servers and the

00:02:24,659 --> 00:02:27,480
Philippines users will go ahead and make

00:02:26,340 --> 00:02:30,689
their three-way handshake they'll make

00:02:27,480 --> 00:02:32,129
their ssl handshakes to a local proxy

00:02:30,689 --> 00:02:34,170
server that say in the philippines and

00:02:32,129 --> 00:02:36,480
then it'll have persistent connections

00:02:34,170 --> 00:02:38,129
to other countries so it'll actually

00:02:36,480 --> 00:02:39,780
make requests over these persistent

00:02:38,129 --> 00:02:41,310
connections so that so a user is not

00:02:39,780 --> 00:02:42,719
making a three-way handshake from like

00:02:41,310 --> 00:02:45,180
the philippines into the united states

00:02:42,719 --> 00:02:47,189
so that's something also to consider if

00:02:45,180 --> 00:02:50,099
you have multiple kolos how you want to

00:02:47,189 --> 00:02:53,700
do your connection handling do you want

00:02:50,099 --> 00:02:56,819
to do SSL termination so just recently

00:02:53,700 --> 00:03:00,480
Yahoo switched everything over to SSL in

00:02:56,819 --> 00:03:02,819
q1 and this was kind of a big thing so

00:03:00,480 --> 00:03:06,359
SSL termination we do a lot of SSL

00:03:02,819 --> 00:03:08,909
termination on 80s and do you want to

00:03:06,359 --> 00:03:13,739
support speedy and that's something that

00:03:08,909 --> 00:03:15,389
we're going to be doing this quarter and

00:03:13,739 --> 00:03:17,069
then also do you want to add business

00:03:15,389 --> 00:03:19,919
logic into your proxy servers you want

00:03:17,069 --> 00:03:24,030
to write plugins so we have a lot of

00:03:19,919 --> 00:03:25,199
plugins in our use cases where may want

00:03:24,030 --> 00:03:27,479
to write limit you may want to do

00:03:25,199 --> 00:03:30,060
authentication you may want to modify

00:03:27,479 --> 00:03:34,639
the request or responses so it's nice to

00:03:30,060 --> 00:03:37,470
be able to have ability to give plugins

00:03:34,639 --> 00:03:40,290
another use case is forward proxy and

00:03:37,470 --> 00:03:43,379
this is large companies even I have a

00:03:40,290 --> 00:03:45,060
for proxy at my home so this is where

00:03:43,379 --> 00:03:46,709
your you hit a proxy server before you

00:03:45,060 --> 00:03:50,340
go out to the Internet in a forward

00:03:46,709 --> 00:03:54,739
proxy setup you actually configure the

00:03:50,340 --> 00:03:54,739
browser to go to the proxy server and

00:03:56,150 --> 00:03:59,970
there's also another use case is

00:03:58,229 --> 00:04:01,949
intercepting proxy and this is where you

00:03:59,970 --> 00:04:04,079
don't configure the browser to go to a

00:04:01,949 --> 00:04:05,790
proxy server and it actually just gets

00:04:04,079 --> 00:04:09,269
routed right through the intercepting

00:04:05,790 --> 00:04:12,680
proxy and the proxy is the intermediary

00:04:09,269 --> 00:04:12,680
before go out to the internet

00:04:17,669 --> 00:04:21,970
so some kind of some questions you would

00:04:20,139 --> 00:04:25,510
ask when you set up a forward or

00:04:21,970 --> 00:04:27,070
intermediate proxy is you know again are

00:04:25,510 --> 00:04:28,449
you going to do caching is the cat is

00:04:27,070 --> 00:04:32,530
the content that you're surfing is a

00:04:28,449 --> 00:04:34,030
cashable and you need a configure your

00:04:32,530 --> 00:04:35,590
do you want to configure your clients to

00:04:34,030 --> 00:04:37,419
go ahead and use the proxy server or not

00:04:35,590 --> 00:04:42,490
and that would be the decision between

00:04:37,419 --> 00:04:47,350
forward proxy or in madera intercepting

00:04:42,490 --> 00:04:52,240
proxy and also so when you're doing

00:04:47,350 --> 00:04:54,280
forward proxy and you're doing SSL the

00:04:52,240 --> 00:04:55,539
proxy server doesn't decrypt or encrypt

00:04:54,280 --> 00:04:58,240
any of the response it just actually

00:04:55,539 --> 00:05:02,110
uses a method called connect and it just

00:04:58,240 --> 00:05:06,190
creates a connection out to the to the

00:05:02,110 --> 00:05:08,340
web server or the origin server so but

00:05:06,190 --> 00:05:10,930
if you're wanting to do intercepting or

00:05:08,340 --> 00:05:12,639
intercept between proxy then you need to

00:05:10,930 --> 00:05:14,470
do termination on the proxy server and

00:05:12,639 --> 00:05:15,789
this gets a little bit tricky and

00:05:14,470 --> 00:05:17,080
there's some security concerns about

00:05:15,789 --> 00:05:19,690
this is because you're actually

00:05:17,080 --> 00:05:22,479
encrypting decrypting the connection you

00:05:19,690 --> 00:05:24,039
have to take some certs and there's some

00:05:22,479 --> 00:05:28,120
things like that so then also the

00:05:24,039 --> 00:05:33,460
browsers have to have an updated see a

00:05:28,120 --> 00:05:37,270
bundle so there are some choices various

00:05:33,460 --> 00:05:38,590
choices when looking at at proxy servers

00:05:37,270 --> 00:05:40,539
there's quite a few choices out there

00:05:38,590 --> 00:05:42,370
there's commercial and there's open

00:05:40,539 --> 00:05:44,740
source and I'm just going to be covering

00:05:42,370 --> 00:05:46,810
open source ones today and I'll be

00:05:44,740 --> 00:05:50,229
covering these five traffic server

00:05:46,810 --> 00:05:55,930
apache HPD with mod proxy and mod cash

00:05:50,229 --> 00:05:58,419
engine X varnish and squid so when

00:05:55,930 --> 00:05:59,860
you're looking at a proxy server a lot

00:05:58,419 --> 00:06:01,030
of proxy servers have you know proxy

00:05:59,860 --> 00:06:03,370
servers have a lot of features and

00:06:01,030 --> 00:06:04,690
options and just like buying a car you

00:06:03,370 --> 00:06:09,340
need to make sure that it has all the

00:06:04,690 --> 00:06:13,240
options that you need and here's a table

00:06:09,340 --> 00:06:14,889
of various features it's kind of hard to

00:06:13,240 --> 00:06:16,900
see on that screen so I'm just going to

00:06:14,889 --> 00:06:18,940
kind of co for go over some of these so

00:06:16,900 --> 00:06:26,940
I was talking about reverse forward and

00:06:18,940 --> 00:06:29,289
transparent proxy before so the be

00:06:26,940 --> 00:06:34,030
engine X and varnish don't do forward or

00:06:29,289 --> 00:06:35,530
transparent proxy so if you need to have

00:06:34,030 --> 00:06:37,210
hoarder or transparent proxy you're

00:06:35,530 --> 00:06:42,250
going to be looking at 80 s squared or

00:06:37,210 --> 00:06:47,590
Apache hvd most proxy servers support

00:06:42,250 --> 00:06:50,050
plugins squid partially does it all the

00:06:47,590 --> 00:06:52,270
proxy servers here they talk they they

00:06:50,050 --> 00:06:53,950
have cash the implementations are quite

00:06:52,270 --> 00:06:57,969
different and i'll be talking about the

00:06:53,950 --> 00:07:05,020
architecture in a little bit do you need

00:06:57,969 --> 00:07:09,070
ESI sport varnish just does includes we

00:07:05,020 --> 00:07:13,750
use 80s in some use cases heavily with

00:07:09,070 --> 00:07:16,719
ESI squid also supports ESI ICP this is

00:07:13,750 --> 00:07:20,169
for mirroring some of the cash 80s

00:07:16,719 --> 00:07:21,700
supported and same as squid SSL only

00:07:20,169 --> 00:07:26,500
proxy server the up here that doesn't

00:07:21,700 --> 00:07:30,430
support ssl is varnish and speedy

00:07:26,500 --> 00:07:32,320
support 80s in engine X support it it's

00:07:30,430 --> 00:07:35,340
in the trunk for 80s and it's going to

00:07:32,320 --> 00:07:39,070
be coming out in the next release in May

00:07:35,340 --> 00:07:40,539
Apache HPD as what I'd consider partial

00:07:39,070 --> 00:07:43,539
support I've heard the support for it

00:07:40,539 --> 00:07:44,860
isn't that great in HPD I'm sure there's

00:07:43,539 --> 00:07:50,169
people you can talk to you around here

00:07:44,860 --> 00:07:52,330
I'll give you more details on that squid

00:07:50,169 --> 00:07:55,300
they have it on their roadmap to be in

00:07:52,330 --> 00:07:57,250
35 however they don't have any bugs open

00:07:55,300 --> 00:07:58,840
for it and it doesn't look like there's

00:07:57,250 --> 00:08:00,789
been any work done so it's probably

00:07:58,840 --> 00:08:04,960
going to be a while until squid actually

00:08:00,789 --> 00:08:06,849
have support for for speedy and varnish

00:08:04,960 --> 00:08:08,620
I don't I don't think that's going to

00:08:06,849 --> 00:08:13,120
happen any time soon it doesn't have

00:08:08,620 --> 00:08:16,210
house to sell either so this is a table

00:08:13,120 --> 00:08:19,870
that that I grabbed for all the

00:08:16,210 --> 00:08:21,940
different SSL features so this is a good

00:08:19,870 --> 00:08:23,919
website to go to for this it's up to

00:08:21,940 --> 00:08:27,729
date unfortunately it doesn't cover

00:08:23,919 --> 00:08:33,339
squid but it covers other proxy servers

00:08:27,729 --> 00:08:36,669
and 80s we're working on the ocp o OCSP

00:08:33,339 --> 00:08:40,620
stapling right now and we expect that to

00:08:36,669 --> 00:08:40,620
be in 50 next month

00:08:42,720 --> 00:08:52,780
yes give any questions I don't know I

00:08:50,920 --> 00:09:02,050
didn't really dig into that do you know

00:08:52,780 --> 00:09:07,560
so the question was I would think it

00:09:02,050 --> 00:09:07,560
would have to to to support speedy so

00:09:08,700 --> 00:09:15,700
okay so if you're going to be doing

00:09:12,510 --> 00:09:18,790
forward a transparent proxy these are

00:09:15,700 --> 00:09:20,920
the three proxy servers that support it

00:09:18,790 --> 00:09:23,440
that'll be that I'm talking about the

00:09:20,920 --> 00:09:30,400
open-source ones so Apache HPD squid and

00:09:23,440 --> 00:09:34,600
traffic server and so HP 1.1 compliance

00:09:30,400 --> 00:09:39,040
so not all proxy servers handle HP 1.1

00:09:34,600 --> 00:09:41,980
the same so some of these issues are

00:09:39,040 --> 00:09:44,140
around accepting cutting so engine X has

00:09:41,980 --> 00:09:46,180
some issues around this because it

00:09:44,140 --> 00:09:48,040
caches everything on the keys it on the

00:09:46,180 --> 00:09:50,140
URL and it actually doesn't look to see

00:09:48,040 --> 00:09:55,300
if it's what the accepting coding is so

00:09:50,140 --> 00:09:57,280
you can pass back gzip encoded responses

00:09:55,300 --> 00:10:00,040
when you're asked not asking for gzip

00:09:57,280 --> 00:10:05,350
and I have an example of that same thing

00:10:00,040 --> 00:10:07,420
with very also engine X has issues with

00:10:05,350 --> 00:10:11,530
age it does an increment age for objects

00:10:07,420 --> 00:10:14,670
that are in cash so and then also engine

00:10:11,530 --> 00:10:17,740
X doesn't handle if none match very well

00:10:14,670 --> 00:10:21,040
so in this example you're doing a

00:10:17,740 --> 00:10:24,190
request and you and you're asking for it

00:10:21,040 --> 00:10:28,300
to be compressed and it comes back just

00:10:24,190 --> 00:10:34,180
fine content and encoding Jeezy so last

00:10:28,300 --> 00:10:36,610
line there is on the second request he

00:10:34,180 --> 00:10:39,790
turn off you're saying hey I don't want

00:10:36,610 --> 00:10:41,500
gzip however because it's like cash

00:10:39,790 --> 00:10:44,470
gzipped it's going to come back gzipped

00:10:41,500 --> 00:10:48,160
so there's some tweaks that you have to

00:10:44,470 --> 00:10:50,920
do to engine X configuration to support

00:10:48,160 --> 00:10:52,329
this or you can also run a module but

00:10:50,920 --> 00:10:56,549
then you run a penalty of

00:10:52,329 --> 00:11:00,939
doing compression on the fly in engine X

00:10:56,549 --> 00:11:05,079
so here's some co visor reports and

00:11:00,939 --> 00:11:07,660
tried to do HTTP httpd with mod proxy

00:11:05,079 --> 00:11:09,220
mod cash yesterday but we're having some

00:11:07,660 --> 00:11:13,059
issues so unfortunately those aren't in

00:11:09,220 --> 00:11:15,369
the slide I can update it when get those

00:11:13,059 --> 00:11:17,399
numbers but in this case you can see

00:11:15,369 --> 00:11:20,920
squid it's been around for a long time

00:11:17,399 --> 00:11:23,850
they support HP 1.1 very well and then

00:11:20,920 --> 00:11:26,709
80s and then varnish and then engine X

00:11:23,850 --> 00:11:31,449
engine X engine X and furniture kind of

00:11:26,709 --> 00:11:33,459
lost and the violations are kind of

00:11:31,449 --> 00:11:35,319
important to to know failure so it can

00:11:33,459 --> 00:11:37,119
be failure because of the test didn't

00:11:35,319 --> 00:11:39,819
run right by violations it definitely

00:11:37,119 --> 00:11:41,910
did violate the protocol squid again

00:11:39,819 --> 00:11:45,220
does the best here at only six percent

00:11:41,910 --> 00:11:50,769
violations and then 80s and then injects

00:11:45,220 --> 00:11:52,629
and varnish earned last again so before

00:11:50,769 --> 00:11:53,589
I jump into performance testing some

00:11:52,629 --> 00:11:55,540
benchmarks and then talk about

00:11:53,589 --> 00:12:01,360
architecture because architecture has a

00:11:55,540 --> 00:12:03,009
big influence on performance and talk

00:12:01,360 --> 00:12:06,459
about some process models so there's

00:12:03,009 --> 00:12:08,649
multi threading and this is where you'd

00:12:06,459 --> 00:12:10,179
you know it classic case of this is

00:12:08,649 --> 00:12:14,399
varnished where it just has you know

00:12:10,179 --> 00:12:18,369
tons of threads a thread per request

00:12:14,399 --> 00:12:21,040
event based process model this is much

00:12:18,369 --> 00:12:24,069
like what engine X does as an event loop

00:12:21,040 --> 00:12:27,369
and I'll talk about what event loops are

00:12:24,069 --> 00:12:29,559
in a minute process is kind of the old

00:12:27,369 --> 00:12:31,779
school HPD where you spin up a whole

00:12:29,559 --> 00:12:34,929
bunch of processes for each request or

00:12:31,779 --> 00:12:37,419
actually for each connection and fibers

00:12:34,929 --> 00:12:39,790
worked on a project that wasn't too

00:12:37,419 --> 00:12:42,910
successful these fibers and it does

00:12:39,790 --> 00:12:44,439
cooperative multitasking does get in set

00:12:42,910 --> 00:12:47,139
context you have to basically set up

00:12:44,439 --> 00:12:49,839
your own scheduler and everything for

00:12:47,139 --> 00:12:55,959
figuring out what what task you want to

00:12:49,839 --> 00:12:59,499
run so you know classic multi-threading

00:12:55,959 --> 00:13:01,360
you have a single CPU can only 11 threat

00:12:59,499 --> 00:13:03,389
at a time but you'll have the colonel

00:13:01,360 --> 00:13:06,310
it'll be picking and choosing what

00:13:03,389 --> 00:13:07,930
thread to run and it tries to Andrew

00:13:06,310 --> 00:13:11,350
leave it makes everything look like it's

00:13:07,930 --> 00:13:13,120
you know happening at the same time dual

00:13:11,350 --> 00:13:16,000
cpu can run two threads at the same time

00:13:13,120 --> 00:13:22,510
and again the colonel decides which

00:13:16,000 --> 00:13:25,980
threads to run so in threading the pros

00:13:22,510 --> 00:13:28,960
ours it's easy to share memory you can

00:13:25,980 --> 00:13:31,150
this is good for like catching for likes

00:13:28,960 --> 00:13:33,370
a DNS caching or object caching it's

00:13:31,150 --> 00:13:38,170
really easy to share things you have to

00:13:33,370 --> 00:13:40,060
of course use locking and it's do does

00:13:38,170 --> 00:13:41,170
lightweight context switching so

00:13:40,060 --> 00:13:43,480
switching between threads is pretty

00:13:41,170 --> 00:13:46,500
lightweight processes heavier weight

00:13:43,480 --> 00:13:49,480
when when switching between processes

00:13:46,500 --> 00:13:52,930
cons it's easy to share memory

00:13:49,480 --> 00:13:54,610
accidentally so this happens this is

00:13:52,930 --> 00:13:57,250
kind of probably one of the big gotchas

00:13:54,610 --> 00:14:00,550
is you can have a thread modify and

00:13:57,250 --> 00:14:02,800
other threads objects in memory and it

00:14:00,550 --> 00:14:06,040
could be difficult to track down and

00:14:02,800 --> 00:14:08,160
this has probably been where I've spent

00:14:06,040 --> 00:14:11,410
a lot of time on multi threading is easy

00:14:08,160 --> 00:14:14,800
is because the thread could modify other

00:14:11,410 --> 00:14:17,440
threads object or data structures you

00:14:14,800 --> 00:14:19,960
might not see the problems with that

00:14:17,440 --> 00:14:22,720
until later and you not might not know

00:14:19,960 --> 00:14:24,990
exactly how that happened and it's very

00:14:22,720 --> 00:14:28,900
difficult to track down locking

00:14:24,990 --> 00:14:30,339
deadlocks race conditions starvation out

00:14:28,900 --> 00:14:33,390
of these three I'd say race conditions

00:14:30,339 --> 00:14:35,410
I've run into being most problematic

00:14:33,390 --> 00:14:40,770
again it's kind of hard to figure out

00:14:35,410 --> 00:14:43,060
what's going on there event processing

00:14:40,770 --> 00:14:45,339
it's basically you have a whole bunch of

00:14:43,060 --> 00:14:47,650
events scheduled events network events

00:14:45,339 --> 00:14:49,630
disc events make a cute up you have a

00:14:47,650 --> 00:14:51,820
vent loop that goes around grabs events

00:14:49,630 --> 00:14:53,350
executing works on the event and then

00:14:51,820 --> 00:14:57,820
continues around through the loop

00:14:53,350 --> 00:15:02,800
driving more events some issues with

00:14:57,820 --> 00:15:05,920
event processing is doesn't work well

00:15:02,800 --> 00:15:09,570
with blocking system calls so our

00:15:05,920 --> 00:15:11,650
blocking API so if you're doing open

00:15:09,570 --> 00:15:13,779
just to the file system that's a

00:15:11,650 --> 00:15:16,240
blocking system call also if you're

00:15:13,779 --> 00:15:18,880
doing any locking you could be blocking

00:15:16,240 --> 00:15:19,720
when you block that event loop you're

00:15:18,880 --> 00:15:21,279
not acting

00:15:19,720 --> 00:15:25,839
working on any other events at that time

00:15:21,279 --> 00:15:28,930
also with event processing it doesn't

00:15:25,839 --> 00:15:31,029
scale well on SMP multiple cores on its

00:15:28,930 --> 00:15:33,310
own so you have to use either multi

00:15:31,029 --> 00:15:37,480
threading or multiple processes to

00:15:33,310 --> 00:15:39,990
actually use all the your course and

00:15:37,480 --> 00:15:43,000
it's just a table that talks about which

00:15:39,990 --> 00:15:47,500
proxy servers use which type of process

00:15:43,000 --> 00:15:52,269
model 80s uses multithreading and it

00:15:47,500 --> 00:15:55,449
also uses events engine X events and

00:15:52,269 --> 00:15:59,949
then multiple processes squid same thing

00:15:55,449 --> 00:16:05,110
is engine X varnish he uses a boatload

00:15:59,949 --> 00:16:06,759
of threads one for every request so in

00:16:05,110 --> 00:16:08,649
when you're benchmarking you have a lot

00:16:06,759 --> 00:16:10,569
of connections you'll see a lot of

00:16:08,649 --> 00:16:16,209
threads spinning up and you'll see a lot

00:16:10,569 --> 00:16:18,610
of contacts 15 it has it does some some

00:16:16,209 --> 00:16:22,209
stuff with fence but it's mainly thread

00:16:18,610 --> 00:16:25,300
based apache HPD that's kind of nice you

00:16:22,209 --> 00:16:27,759
can specify you can pick what type of

00:16:25,300 --> 00:16:33,189
process model you want and through the

00:16:27,759 --> 00:16:37,329
MPN and actually my benchmarks I was the

00:16:33,189 --> 00:16:38,829
default was events for the source code

00:16:37,329 --> 00:16:40,509
and I believe that would perform the

00:16:38,829 --> 00:16:42,959
best so that's what I was using in my

00:16:40,509 --> 00:16:42,959
benchmarks

00:16:47,209 --> 00:16:50,170
so too

00:16:50,899 --> 00:16:56,420
kind of flying through the slides cast

00:16:53,269 --> 00:16:57,829
architecture so I'm going to go through

00:16:56,420 --> 00:17:01,149
and talk a little bit about the cash

00:16:57,829 --> 00:17:03,259
architecture so there's mainly two types

00:17:01,149 --> 00:17:05,480
that these proxy servers that i'm

00:17:03,259 --> 00:17:06,740
talking about use one is file system

00:17:05,480 --> 00:17:08,899
this is basically where you have a

00:17:06,740 --> 00:17:11,059
hierarchy of directories and most of the

00:17:08,899 --> 00:17:13,100
time you can specify how many levels of

00:17:11,059 --> 00:17:15,860
directories and how many directories at

00:17:13,100 --> 00:17:17,929
each level but basically at the end

00:17:15,860 --> 00:17:23,059
there's a there's a file and that has

00:17:17,929 --> 00:17:25,309
the cache object and then there's

00:17:23,059 --> 00:17:28,520
database like where it uses either the

00:17:25,309 --> 00:17:32,240
raw disk or does direct i/o on a file

00:17:28,520 --> 00:17:34,549
and it basically manages how the objects

00:17:32,240 --> 00:17:41,059
are placed inside this file and manages

00:17:34,549 --> 00:17:43,490
indexing and everything and then also

00:17:41,059 --> 00:17:46,360
with catching you can have in memory

00:17:43,490 --> 00:17:48,950
index is so squid and 80s they both have

00:17:46,360 --> 00:17:51,649
you can have full in memory indexes of

00:17:48,950 --> 00:17:53,600
all the objects on the disk and

00:17:51,649 --> 00:17:55,460
something that's really important about

00:17:53,600 --> 00:17:58,520
this is how many bikes project does this

00:17:55,460 --> 00:18:01,460
index take up so squid takes like 70 to

00:17:58,520 --> 00:18:05,000
100 bytes per object 80s takes 10 bytes

00:18:01,460 --> 00:18:08,600
per object so 80s takes considerably

00:18:05,000 --> 00:18:10,460
less memory per object and it's it's

00:18:08,600 --> 00:18:15,350
very helpful if you have very very large

00:18:10,460 --> 00:18:16,880
caches and then you also want to

00:18:15,350 --> 00:18:19,340
minimize your desk seeks and system

00:18:16,880 --> 00:18:23,390
calls for cash and there's some tricks

00:18:19,340 --> 00:18:25,399
that some of the even the file system

00:18:23,390 --> 00:18:26,809
based caches do so they'll go ahead and

00:18:25,399 --> 00:18:29,840
I'll cash open files and things like

00:18:26,809 --> 00:18:33,460
that and they'll cash metadata too so

00:18:29,840 --> 00:18:33,460
you don't have to do open quite as often

00:18:34,809 --> 00:18:42,559
and this is a table that describes which

00:18:38,480 --> 00:18:46,640
proxy servers use what type of caching

00:18:42,559 --> 00:18:50,179
architecture so 80s uses raw disk or

00:18:46,640 --> 00:18:51,799
direct io to a file it also has the

00:18:50,179 --> 00:18:54,620
ability to have a ram cash to room offer

00:18:51,799 --> 00:18:56,779
on nice thing about having a ram cash is

00:18:54,620 --> 00:18:58,940
you're going to grab the object from

00:18:56,779 --> 00:19:01,669
from memory you're not going to have to

00:18:58,940 --> 00:19:03,260
go out to the operating system or do any

00:19:01,669 --> 00:19:04,870
system calls to grab the object from and

00:19:03,260 --> 00:19:09,790
then you're able to just

00:19:04,870 --> 00:19:11,350
write it down to the socket 80s like I

00:19:09,790 --> 00:19:16,630
was mentioning before has it in memory

00:19:11,350 --> 00:19:20,110
index and it's a persistent cash so

00:19:16,630 --> 00:19:22,750
engine X file system and its persistent

00:19:20,110 --> 00:19:25,600
cash and like I was mentioning before it

00:19:22,750 --> 00:19:27,790
it has the ability to do caching open

00:19:25,600 --> 00:19:31,690
files however here it's not all the all

00:19:27,790 --> 00:19:32,830
the objects in cash so some of the times

00:19:31,690 --> 00:19:35,950
you're going to have to actually go and

00:19:32,830 --> 00:19:39,070
do opens on files engine X is an event

00:19:35,950 --> 00:19:44,190
loop and doing open is blocking system

00:19:39,070 --> 00:19:46,630
call so there's some issues there squid

00:19:44,190 --> 00:19:50,530
you can set it up it has two different

00:19:46,630 --> 00:19:53,170
types of storage systems for their cash

00:19:50,530 --> 00:19:56,290
as file system based which is just a you

00:19:53,170 --> 00:19:58,330
know hierarchy of file or hierarchy of

00:19:56,290 --> 00:20:00,580
directories and then a file or you can

00:19:58,330 --> 00:20:02,500
use what's called the rock store there's

00:20:00,580 --> 00:20:05,980
issues with using rock store it's kind

00:20:02,500 --> 00:20:07,750
of so rock store there's some advantage

00:20:05,980 --> 00:20:09,910
of the dish manages with rock store rock

00:20:07,750 --> 00:20:14,590
store allows you to share the cash

00:20:09,910 --> 00:20:16,929
across the processes but but so there

00:20:14,590 --> 00:20:18,790
are some size limitations the maximum

00:20:16,929 --> 00:20:23,309
size of the objects in the rock stores

00:20:18,790 --> 00:20:23,309
like 32 k so that's kind of limiting

00:20:24,929 --> 00:20:32,140
with squid you can specify a ram cash or

00:20:28,150 --> 00:20:35,020
not it has an in memory index except

00:20:32,140 --> 00:20:39,940
it's kind of it's heavier than say 80s

00:20:35,020 --> 00:20:44,230
on in memory index but by 10 X and it

00:20:39,940 --> 00:20:46,390
has a persistent cash varnish it's just

00:20:44,230 --> 00:20:49,000
an amount so it's not really that

00:20:46,390 --> 00:20:50,620
sophisticated it's not persistent by

00:20:49,000 --> 00:20:53,520
default they do have an experimental

00:20:50,620 --> 00:20:55,510
cash that's that's persistent but

00:20:53,520 --> 00:21:01,150
experimental and I've heard it doesn't

00:20:55,510 --> 00:21:03,309
perform very well and because it's an

00:21:01,150 --> 00:21:08,050
nmap you basically have in memory index

00:21:03,309 --> 00:21:09,600
of all the objects so so you're not

00:21:08,050 --> 00:21:12,250
going to really be doing very large

00:21:09,600 --> 00:21:15,540
caches with varnish just because it has

00:21:12,250 --> 00:21:18,050
to be I damn map and has to be in memory

00:21:15,540 --> 00:21:22,670
Hachi HPD

00:21:18,050 --> 00:21:24,590
much like engine X file system based you

00:21:22,670 --> 00:21:32,390
know cache hierarchy of directories and

00:21:24,590 --> 00:21:33,950
files and it's persistent so I did some

00:21:32,390 --> 00:21:36,740
performance testing did some benchmarks

00:21:33,950 --> 00:21:38,840
and also I'm going to go over the

00:21:36,740 --> 00:21:41,810
configurations that i did with each one

00:21:38,840 --> 00:21:46,310
of the proxy servers before actually did

00:21:41,810 --> 00:21:47,990
the benchmarks so 80s configuration it

00:21:46,310 --> 00:21:49,730
was pretty straightforward use three

00:21:47,990 --> 00:21:52,790
lines that I had to add into the

00:21:49,730 --> 00:21:55,670
configuration files first one is just

00:21:52,790 --> 00:21:58,910
map all URLs to your origin server and

00:21:55,670 --> 00:22:00,380
that's in the remap config file and

00:21:58,910 --> 00:22:02,360
directed stock config had to change the

00:22:00,380 --> 00:22:05,600
port the default port is 8080 so I had

00:22:02,360 --> 00:22:08,060
to change it to 80 pretty basic and I

00:22:05,600 --> 00:22:11,540
had to turn the number of accept threads

00:22:08,060 --> 00:22:13,520
on this box it was a 24 core box so i

00:22:11,540 --> 00:22:16,760
turned the number of X steps for heads

00:22:13,520 --> 00:22:18,500
23 it automatically scales on the number

00:22:16,760 --> 00:22:20,900
of threads based it looks at the core

00:22:18,500 --> 00:22:22,970
and it figures out how many worker

00:22:20,900 --> 00:22:24,500
threads and he's actually great based

00:22:22,970 --> 00:22:26,600
upon the number of cores around the box

00:22:24,500 --> 00:22:29,150
so so that's kind of nice that scales

00:22:26,600 --> 00:22:30,470
well doing that would probably need to

00:22:29,150 --> 00:22:32,600
put something in where it auto scales

00:22:30,470 --> 00:22:38,150
the accept threads if it sees that you

00:22:32,600 --> 00:22:40,700
have tons of course engine X and this

00:22:38,150 --> 00:22:43,160
kind of gets into the HP 1.1 compliance

00:22:40,700 --> 00:22:47,560
so a lot of this is trying to get around

00:22:43,160 --> 00:22:51,290
or trying to help engine X do

00:22:47,560 --> 00:22:53,720
accept-encoding gzip and then also the

00:22:51,290 --> 00:22:57,530
last section is so you can do purges in

00:22:53,720 --> 00:23:03,500
the cache and they have a third party

00:22:57,530 --> 00:23:08,420
module that'll do the purging and in

00:23:03,500 --> 00:23:11,450
this one I had 24 workers squid was

00:23:08,420 --> 00:23:16,930
using the rock store for benchmarks and

00:23:11,450 --> 00:23:19,490
then also did a memory or Ram cash

00:23:16,930 --> 00:23:21,800
varnish you know pretty simple two lines

00:23:19,490 --> 00:23:23,420
however it doesn't it's really not this

00:23:21,800 --> 00:23:25,570
simple because when you actually execute

00:23:23,420 --> 00:23:28,520
the the server it gets very complicated

00:23:25,570 --> 00:23:31,660
so these are the four four trials that I

00:23:28,520 --> 00:23:34,690
did and the last line is actually the

00:23:31,660 --> 00:23:35,980
one that seemed to perform the best and

00:23:34,690 --> 00:23:38,700
you have to go through and read the

00:23:35,980 --> 00:23:40,900
documentation on this about you know

00:23:38,700 --> 00:23:42,820
what your thread pool side is going to

00:23:40,900 --> 00:23:44,770
be you know what's your minimum variable

00:23:42,820 --> 00:23:47,080
and then stuff like you know thread pool

00:23:44,770 --> 00:23:49,120
add delay like the thread creation and

00:23:47,080 --> 00:23:52,600
things like this and session linger I

00:23:49,120 --> 00:23:54,310
don't fully understand it even after

00:23:52,600 --> 00:23:58,000
reading the documentation but I have a

00:23:54,310 --> 00:24:07,720
pretty pretty rough idea of what what it

00:23:58,000 --> 00:24:10,210
needed to get good performance yes no I

00:24:07,720 --> 00:24:13,140
did not try to invent marks because I

00:24:10,210 --> 00:24:15,550
know that that would even perform worse

00:24:13,140 --> 00:24:17,530
it did okay because I've heard from

00:24:15,550 --> 00:24:23,650
other people when it gets very large

00:24:17,530 --> 00:24:27,870
caches at it yeah does it sighs okay

00:24:23,650 --> 00:24:27,870
yeah i'm thinking like terabytes yeah

00:24:30,960 --> 00:24:40,150
Apache hbd configuration pretty basic I

00:24:36,430 --> 00:24:43,140
had one of the Apache committers also

00:24:40,150 --> 00:24:45,490
helped me to tried tweak the number of I

00:24:43,140 --> 00:24:47,140
guess it'd be processes with reds and

00:24:45,490 --> 00:24:48,550
stuff and we actually in the benchmarks

00:24:47,140 --> 00:24:52,240
it made the branch marks come out even

00:24:48,550 --> 00:24:55,240
worse than the defaults so I just kept

00:24:52,240 --> 00:24:57,310
with the default numbers so in the first

00:24:55,240 --> 00:25:03,070
benchmark this is just a standard

00:24:57,310 --> 00:25:05,740
keep-alive benchmark thousand clients 8k

00:25:03,070 --> 00:25:12,780
response one hundred percent cache hit

00:25:05,740 --> 00:25:17,680
rate and then I limited to 100,000 RPS

00:25:12,780 --> 00:25:19,950
so and this was a this box had a 10 gige

00:25:17,680 --> 00:25:27,520
neck and I was push it about a gigabit

00:25:19,950 --> 00:25:29,380
doing these benchmarks so in this so

00:25:27,520 --> 00:25:31,870
this is the results of the benchmark so

00:25:29,380 --> 00:25:33,580
this was kind of the graph and the lower

00:25:31,870 --> 00:25:35,140
left is the throughput you know how many

00:25:33,580 --> 00:25:36,610
requests per second they're all going to

00:25:35,140 --> 00:25:41,230
hit around 100,000 because it was rate

00:25:36,610 --> 00:25:44,440
limited 200,000 and the upper ride talks

00:25:41,230 --> 00:25:45,639
about basically how efficient the the

00:25:44,440 --> 00:25:47,229
proxy servers are

00:25:45,639 --> 00:25:52,059
you know how many requests per

00:25:47,229 --> 00:25:55,029
percentage of cpu and and this is the

00:25:52,059 --> 00:25:58,959
lower right is basically the latency so

00:25:55,029 --> 00:26:00,729
a couple things to note squid used most

00:25:58,959 --> 00:26:03,940
more cpu than the other brought to you

00:26:00,729 --> 00:26:07,539
server and the proxy servers had issues

00:26:03,940 --> 00:26:11,169
with a 95th percentile was hbd squid and

00:26:07,539 --> 00:26:15,089
an engine and indigene ex and actually

00:26:11,169 --> 00:26:18,249
when I tried to tweak the number of

00:26:15,089 --> 00:26:20,619
processes and stuff for HPD it actually

00:26:18,249 --> 00:26:21,879
made the this was the number that I was

00:26:20,619 --> 00:26:24,099
trying to get lower was the 95th

00:26:21,879 --> 00:26:25,599
percentile number for HPD and actually

00:26:24,099 --> 00:26:28,629
it made it worse it went up to like 40

00:26:25,599 --> 00:26:33,789
milliseconds so that's why I just kept

00:26:28,629 --> 00:26:37,089
this number benchmark to this is a

00:26:33,789 --> 00:26:39,099
turning off keep-alive basically so this

00:26:37,089 --> 00:26:40,479
is how fast can you know the proxy

00:26:39,099 --> 00:26:41,739
server accept a connection process a

00:26:40,479 --> 00:26:44,769
connection move on to the next

00:26:41,739 --> 00:26:48,190
connection or requests well connection

00:26:44,769 --> 00:26:53,469
actually and this is the results of this

00:26:48,190 --> 00:26:57,129
benchmark so lower same thing lower left

00:26:53,469 --> 00:27:01,479
is the throughput 80s slightly beat

00:26:57,129 --> 00:27:03,940
varnish in the upper right is basically

00:27:01,479 --> 00:27:05,889
how efficient engine X was very

00:27:03,940 --> 00:27:09,639
efficient but it had tremendous latency

00:27:05,889 --> 00:27:11,739
issues and the throughput was low so I

00:27:09,639 --> 00:27:16,029
don't know if I would actually call that

00:27:11,739 --> 00:27:19,059
success 80s did better in efficiency

00:27:16,029 --> 00:27:23,709
than a lot better than say squid squid

00:27:19,059 --> 00:27:31,809
was again very bad on cpu usage and then

00:27:23,709 --> 00:27:34,570
varnish and HPD on the Layton sees the

00:27:31,809 --> 00:27:38,889
two that that did the best were 80s and

00:27:34,570 --> 00:27:42,249
HPD they're basically owes one

00:27:38,889 --> 00:27:45,309
millisecond for the mean and for the

00:27:42,249 --> 00:27:47,019
95th percentile HP did the best at two

00:27:45,309 --> 00:27:48,820
milliseconds and 80s was at three

00:27:47,019 --> 00:27:52,329
milliseconds I mean all really really

00:27:48,820 --> 00:27:54,369
good so generally in benchmarks we like

00:27:52,329 --> 00:27:55,989
to so probably highlight that a little

00:27:54,369 --> 00:27:57,609
bit in benchmarks we like to look at the

00:27:55,989 --> 00:27:59,320
medians and then also the 95th

00:27:57,609 --> 00:28:01,020
percentiles kind of see exactly

00:27:59,320 --> 00:28:04,900
you know what your tail in looks like

00:28:01,020 --> 00:28:06,670
and that's why that's why i was using

00:28:04,900 --> 00:28:08,440
these numbers the median in the 95th

00:28:06,670 --> 00:28:10,420
percentile kind of gives you an idea of

00:28:08,440 --> 00:28:14,170
what your distribution looks like your

00:28:10,420 --> 00:28:15,760
response times taking like that the

00:28:14,170 --> 00:28:18,120
median or something like that it's

00:28:15,760 --> 00:28:20,320
already taking the mean sometimes can be

00:28:18,120 --> 00:28:24,760
really not show the full picture of

00:28:20,320 --> 00:28:25,930
what's going on so I'm just going to

00:28:24,760 --> 00:28:36,510
kind of go through some of the pros and

00:28:25,930 --> 00:28:39,880
cons of the different proxy servers so

00:28:36,510 --> 00:28:42,010
80s the pros scales well and scales well

00:28:39,880 --> 00:28:44,790
automatically little configuration I

00:28:42,010 --> 00:28:47,230
gotta show you this just three lines and

00:28:44,790 --> 00:28:48,760
I believe it has the best cash

00:28:47,230 --> 00:28:51,630
implementation so I didn't really go

00:28:48,760 --> 00:28:54,490
over this in deep a lot of detail but

00:28:51,630 --> 00:28:57,130
80s it uses what's called a cyclone cash

00:28:54,490 --> 00:28:59,470
that's what it's called an 80s it's very

00:28:57,130 --> 00:29:03,430
much like a log base file system so just

00:28:59,470 --> 00:29:06,430
it does it merges the rights together

00:29:03,430 --> 00:29:08,230
and sprays those all allowed at once so

00:29:06,430 --> 00:29:13,450
you're not doing a lot of seeking for

00:29:08,230 --> 00:29:16,720
all your rights and also it's like I

00:29:13,450 --> 00:29:21,600
said it's very very efficient on the on

00:29:16,720 --> 00:29:21,600
them in memory index yes

00:29:26,600 --> 00:29:32,890
and the only one that I would see that

00:29:30,980 --> 00:29:36,500
it would have an issue would be the

00:29:32,890 --> 00:29:38,690
would-be squid with a rock store but 80s

00:29:36,500 --> 00:29:40,910
and everything I mean 80s is just fine

00:29:38,690 --> 00:29:43,940
with with large files I mean even like

00:29:40,910 --> 00:29:46,309
gigabytes sized objects and the other

00:29:43,940 --> 00:29:51,890
ones just use the file system so it

00:29:46,309 --> 00:29:54,049
shouldn't be an issue cons and we have a

00:29:51,890 --> 00:29:55,640
lot of configuration files and too many

00:29:54,049 --> 00:29:56,539
configuration options on the files so

00:29:55,640 --> 00:29:58,309
sometimes it can be a little bit

00:29:56,539 --> 00:29:59,510
overwhelming when someone you know cut

00:29:58,309 --> 00:30:02,990
new comes into it even though you have

00:29:59,510 --> 00:30:04,309
to just modify three lines it could kind

00:30:02,990 --> 00:30:07,900
of be overwhelming when you see all of

00:30:04,309 --> 00:30:07,900
that you get yeah right right at once

00:30:08,710 --> 00:30:19,070
engine X the pros lots of plugins and

00:30:14,690 --> 00:30:21,260
got fastest CDI sport cons HP 1.1

00:30:19,070 --> 00:30:24,620
compliance it's not doesn't do very well

00:30:21,260 --> 00:30:25,909
and there's latency issues around

00:30:24,620 --> 00:30:29,210
accepting new connections and the

00:30:25,909 --> 00:30:32,570
benchmarks that I did also if you want

00:30:29,210 --> 00:30:35,210
to add a new plugins is kind of a pretty

00:30:32,570 --> 00:30:37,100
big killer for us being a large company

00:30:35,210 --> 00:30:38,630
as anytime that you want to go ahead and

00:30:37,100 --> 00:30:39,620
you know each group wants to have a new

00:30:38,630 --> 00:30:41,630
plug-in or something you have to

00:30:39,620 --> 00:30:50,090
recompile the whole server so that's

00:30:41,630 --> 00:30:54,590
that's a pretty big issue of squid has

00:30:50,090 --> 00:30:56,510
the best HP 1.1 compliance however cons

00:30:54,590 --> 00:30:59,450
are is that the in memory index isn't

00:30:56,510 --> 00:31:03,049
very efficient uses a lot of cpu for

00:30:59,450 --> 00:31:07,270
what it does and have the worst median

00:31:03,049 --> 00:31:13,580
Layton sees for the keepalive benchmarks

00:31:07,270 --> 00:31:16,880
varnish big pro for varnish is the VCL

00:31:13,580 --> 00:31:17,900
it's the configuration language one

00:31:16,880 --> 00:31:21,169
thing the Knights about those you can do

00:31:17,900 --> 00:31:23,870
a lot of manipulation of requests and

00:31:21,169 --> 00:31:26,059
responses without actually having to you

00:31:23,870 --> 00:31:30,080
know right modules Wow thing that do C

00:31:26,059 --> 00:31:31,460
code so a lot of people like this we're

00:31:30,080 --> 00:31:36,740
talking about doing something like that

00:31:31,460 --> 00:31:38,690
in 80s but that's you know we have just

00:31:36,740 --> 00:31:39,960
kind of experimental implementation of

00:31:38,690 --> 00:31:43,630
that right now

00:31:39,960 --> 00:31:47,200
cons and you have a thread per connector

00:31:43,630 --> 00:31:49,060
actually it's a thread per request so

00:31:47,200 --> 00:31:52,510
you have tons of tons of threads in the

00:31:49,060 --> 00:31:55,090
system and map for cash for some this

00:31:52,510 --> 00:31:58,750
can be in a con and because it's you

00:31:55,090 --> 00:32:03,330
know how persistent cash also it's just

00:31:58,750 --> 00:32:06,670
you can't have very large caches and a

00:32:03,330 --> 00:32:08,320
it doesn't have SSL or speedy support so

00:32:06,670 --> 00:32:09,460
if you want to implement SSL are speedy

00:32:08,320 --> 00:32:12,010
are going to have to put another proxy

00:32:09,460 --> 00:32:20,920
proxy layer in front of varnish to go

00:32:12,010 --> 00:32:24,450
ahead and handle all that yes yeah

00:32:20,920 --> 00:32:24,450
that's why i said thread per request

00:32:26,370 --> 00:32:40,030
yeah I know yes thread per non idle

00:32:30,400 --> 00:32:43,810
connection Apache HPD Pro also has lots

00:32:40,030 --> 00:32:46,230
of plugins for modules it's most used

00:32:43,810 --> 00:32:49,210
you know it's very very common out there

00:32:46,230 --> 00:32:50,770
had best 95th percentile Layton sees

00:32:49,210 --> 00:32:53,020
from non keep you eyes and it was like a

00:32:50,770 --> 00:32:57,010
millisecond better than 80 s ain't

00:32:53,020 --> 00:32:59,200
talking to 23 milliseconds cons the

00:32:57,010 --> 00:33:06,610
speedy support isn't that great from

00:32:59,200 --> 00:33:09,850
again from what I've heard so why did

00:33:06,610 --> 00:33:12,250
yahoo pick 80s and why might you want to

00:33:09,850 --> 00:33:15,310
pick 80s is it scales well it's very

00:33:12,250 --> 00:33:20,100
efficient on CPU does auto configuration

00:33:15,310 --> 00:33:23,980
for you the cash scales very well

00:33:20,100 --> 00:33:27,340
there's there's people who run large

00:33:23,980 --> 00:33:31,240
caches and are doing you know 20 20 to

00:33:27,340 --> 00:33:35,020
40 gigabits per box so it's scales very

00:33:31,240 --> 00:33:36,370
well very very well efficient memory

00:33:35,020 --> 00:33:39,730
index so if you're having very large

00:33:36,370 --> 00:33:42,790
caches that helps and it does things to

00:33:39,730 --> 00:33:44,500
minimally seeks another I didn't really

00:33:42,790 --> 00:33:47,110
cover this too much but another big

00:33:44,500 --> 00:33:48,910
reason to have an in-memory indexes ease

00:33:47,110 --> 00:33:50,410
you know what all your objects are in

00:33:48,910 --> 00:33:51,880
your cash by just looking in the in

00:33:50,410 --> 00:33:53,920
memory index you don't have to go out to

00:33:51,880 --> 00:33:55,870
disk and do a disk seeks or look

00:33:53,920 --> 00:33:57,340
directories or whatever to go ahead and

00:33:55,870 --> 00:34:01,780
find out that you don't have the object

00:33:57,340 --> 00:34:04,030
in cash so depending on your situation

00:34:01,780 --> 00:34:12,070
having in memory index can be very

00:34:04,030 --> 00:34:13,990
helpful another good thing about 80s as

00:34:12,070 --> 00:34:17,130
it's part of the Pachi Pachi community

00:34:13,990 --> 00:34:19,270
it's easy to make contributions

00:34:17,130 --> 00:34:22,240
everything mailing lists are all open

00:34:19,270 --> 00:34:26,440
and everything so that's a big advantage

00:34:22,240 --> 00:34:28,540
and then also plugins support has

00:34:26,440 --> 00:34:33,040
ability to write plugins much like a lot

00:34:28,540 --> 00:34:34,660
of the other proxy servers and for us it

00:34:33,040 --> 00:34:37,030
was easy because we were running a yahoo

00:34:34,660 --> 00:34:38,740
version of traffic server it was easy

00:34:37,030 --> 00:34:43,990
for us to port all of our plugins / to

00:34:38,740 --> 00:34:45,640
80s with minimal effort here are some

00:34:43,990 --> 00:34:51,310
references of the different proxy

00:34:45,640 --> 00:34:56,070
servers and any questions kind of flew

00:34:51,310 --> 00:34:56,070
through the slides yes

00:35:04,640 --> 00:35:13,380
let's see so you want to look at that

00:35:07,860 --> 00:35:17,790
there's a hundred thousand so 80s 80s

00:35:13,380 --> 00:35:22,380
actually did the best on on on cpu usage

00:35:17,790 --> 00:35:25,070
over this what this is how many requests

00:35:22,380 --> 00:35:29,310
it did percentage to cpu so basically

00:35:25,070 --> 00:35:31,950
bigger the better Biggers better and if

00:35:29,310 --> 00:35:34,290
you look at where is it the results for

00:35:31,950 --> 00:35:36,570
this benchmark engine X did the the best

00:35:34,290 --> 00:35:38,250
here you know I got most you know but it

00:35:36,570 --> 00:35:39,900
wasn't doing very much you know if you

00:35:38,250 --> 00:35:43,770
look down at what the throughput would

00:35:39,900 --> 00:35:45,450
is was is pretty low compared to say 80s

00:35:43,770 --> 00:35:46,770
will was lower than 80 s and varnished

00:35:45,450 --> 00:35:54,450
but then also your Layton sees are

00:35:46,770 --> 00:35:56,550
really high so so yeah so if you take

00:35:54,450 --> 00:35:59,550
engine X outta there again 80s did the

00:35:56,550 --> 00:36:04,460
best basically is the most efficient on

00:35:59,550 --> 00:36:04,460
cpu usage yes

00:36:21,430 --> 00:36:23,490
e

00:36:30,940 --> 00:36:36,160
okay so your question was did you look

00:36:34,130 --> 00:36:38,210
at other proxy servers for forward proxy

00:36:36,160 --> 00:36:41,720
because you mainly just focused on

00:36:38,210 --> 00:36:44,000
cashing yeah it's in this case I didn't

00:36:41,720 --> 00:36:45,770
do any benchmarks on just fear here

00:36:44,000 --> 00:36:47,450
proxy server I didn't want to have just

00:36:45,770 --> 00:36:48,950
like slides of benchmarks because I mean

00:36:47,450 --> 00:36:51,140
there's so many different variants you

00:36:48,950 --> 00:36:54,500
can do also one thing is once you start

00:36:51,140 --> 00:36:56,990
throwing in take cashing out of the

00:36:54,500 --> 00:36:58,820
equation then you start you know then as

00:36:56,990 --> 00:37:00,770
houses the origin server perform and

00:36:58,820 --> 00:37:02,630
things like that but yeah I probably

00:37:00,770 --> 00:37:05,450
it's probably good to also look at that

00:37:02,630 --> 00:37:10,430
depends on what your use case is at

00:37:05,450 --> 00:37:12,290
Yahoo we do have one proxy we have a

00:37:10,430 --> 00:37:14,030
proxy setup that's basically more for

00:37:12,290 --> 00:37:15,349
static content very high cache hit right

00:37:14,030 --> 00:37:17,390
and then we have another proxy setup

00:37:15,349 --> 00:37:20,900
that basically is low cache hit rate

00:37:17,390 --> 00:37:24,380
does tons of proc seen in the real world

00:37:20,900 --> 00:37:26,030
ATS performs pretty well but it would be

00:37:24,380 --> 00:37:28,670
good to see exactly how that performs

00:37:26,030 --> 00:37:32,480
against other other brought to you

00:37:28,670 --> 00:37:37,750
servers yeah so unfortunately don't have

00:37:32,480 --> 00:37:37,750
any benchmarks here to show you that yes

00:37:48,900 --> 00:37:53,880
yeah so the question was did you do any

00:37:51,690 --> 00:37:56,610
benchmarks on large caches where you're

00:37:53,880 --> 00:37:59,820
filling up the cash in this case no i

00:37:56,610 --> 00:38:01,530
didn't but looking at the architectures

00:37:59,820 --> 00:38:02,910
you can kind of figure out what's going

00:38:01,530 --> 00:38:04,740
to happen with the file system based

00:38:02,910 --> 00:38:06,900
cash once you get char getting into very

00:38:04,740 --> 00:38:10,020
large caches we do have some very large

00:38:06,900 --> 00:38:12,960
caches like flickr that runs squid and

00:38:10,020 --> 00:38:15,930
they have issues with in-memory indexes

00:38:12,960 --> 00:38:28,290
and performance they're looking at

00:38:15,930 --> 00:38:32,400
switching over to 80s yeah so the answer

00:38:28,290 --> 00:38:33,900
from yon was basically that that varna

00:38:32,400 --> 00:38:41,160
starts falling over on the persistent

00:38:33,900 --> 00:38:43,820
caches when things start going on it

00:38:41,160 --> 00:38:43,820
just wraps around

00:38:49,920 --> 00:39:00,720
oh there's there's there it will does do

00:38:59,250 --> 00:39:02,339
that it does have to upload them in

00:39:00,720 --> 00:39:04,049
memory index but all that's pretty

00:39:02,339 --> 00:39:05,549
lightweight compared to going out to

00:39:04,049 --> 00:39:07,589
disk and having to delete objects and

00:39:05,549 --> 00:39:09,000
stuff so I mean like squid you know it's

00:39:07,589 --> 00:39:10,980
an LRU it has to go through and has to

00:39:09,000 --> 00:39:20,010
remove objects off disk and update

00:39:10,980 --> 00:39:21,599
director reason well most of the time

00:39:20,010 --> 00:39:23,490
you have that on on your on your

00:39:21,599 --> 00:39:25,140
responses you have max-age headers and

00:39:23,490 --> 00:39:27,540
things like that and then those will

00:39:25,140 --> 00:39:29,880
just expire based upon you know the

00:39:27,540 --> 00:39:31,799
object itself you can actually do some

00:39:29,880 --> 00:39:36,210
overrides cash overrides and cash config

00:39:31,799 --> 00:39:38,670
to go ahead and set TTLs on objects but

00:39:36,210 --> 00:39:40,710
most of the time hopefully you have good

00:39:38,670 --> 00:39:42,480
origin servers actually said send

00:39:40,710 --> 00:39:44,099
correct headers and that they actually

00:39:42,480 --> 00:39:45,720
aren't you know so you don't have to

00:39:44,099 --> 00:39:54,799
like fix it up in the in the proxy

00:39:45,720 --> 00:39:54,799
server you know yes

00:39:57,850 --> 00:40:09,680
having a hard time here it's good so the

00:40:07,070 --> 00:40:11,600
question was are you going to bring ESI

00:40:09,680 --> 00:40:15,110
into the core or is it going to remain a

00:40:11,600 --> 00:40:17,180
plug in my thoughts I'm not you know the

00:40:15,110 --> 00:40:19,280
only one that decides this my thoughts

00:40:17,180 --> 00:40:21,860
as I do to remain a plug-in I don't see

00:40:19,280 --> 00:40:24,560
it bring being pulled into the core what

00:40:21,860 --> 00:40:26,690
are your thoughts on that and why are we

00:40:24,560 --> 00:40:32,660
going to bring ESI into the core or keep

00:40:26,690 --> 00:40:34,100
it as a plug-in yes I i would think keep

00:40:32,660 --> 00:40:36,820
it as a plug-in I don't see a reason to

00:40:34,100 --> 00:40:36,820
bring it into the core

00:40:51,390 --> 00:40:56,950
it's something that not everybody uses

00:40:54,100 --> 00:40:58,780
to it's not a feature that at least in

00:40:56,950 --> 00:41:02,260
our use case there's some groups that

00:40:58,780 --> 00:41:04,920
use it but for the whole not everybody

00:41:02,260 --> 00:41:04,920
uses ESI

00:41:09,670 --> 00:41:12,869
any other questions

00:41:15,940 --> 00:41:24,400
um so question was did I test with any

00:41:19,510 --> 00:41:27,160
other response sizes than 8k I did some

00:41:24,400 --> 00:41:30,070
16 k but I mean at that point I was you

00:41:27,160 --> 00:41:31,540
know maxing out the neck so I didn't

00:41:30,070 --> 00:41:33,880
really do that I want to keep it kind of

00:41:31,540 --> 00:41:38,950
under what the Nick was when I was doing

00:41:33,880 --> 00:41:44,230
a hundred thousand rps so that was the

00:41:38,950 --> 00:41:46,630
kind of the what I wanted to do but yeah

00:41:44,230 --> 00:41:48,430
I mean you could push a lot more a lot

00:41:46,630 --> 00:42:00,070
more bits if you wanted to go ahead and

00:41:48,430 --> 00:42:03,660
do larger objects any other questions ok

00:42:00,070 --> 00:42:03,660

YouTube URL: https://www.youtube.com/watch?v=PDIdCgTxF2Q


