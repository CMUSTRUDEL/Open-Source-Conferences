Title: Apache Stratos (Incubating) - Samisa Abeysinghe
Publication date: 2014-04-25
Playlist: ApacheCon North America 2014
Description: 
	ApacheCon North America 2014
Captions: 
	00:00:00,390 --> 00:00:07,979
so I'm here to talk about an incubating

00:00:03,399 --> 00:00:07,979
project at Apache called Apache Stratis

00:00:08,100 --> 00:00:14,200
basically Apache status is a past

00:00:11,140 --> 00:00:16,180
framework from the Apache community this

00:00:14,200 --> 00:00:18,970
was initially developed and maintained

00:00:16,180 --> 00:00:21,880
by wso2 sometime back but it was donated

00:00:18,970 --> 00:00:23,770
to Apache about a year ago and the good

00:00:21,880 --> 00:00:25,600
news is that once it has been donated

00:00:23,770 --> 00:00:28,630
for the past year so it has been

00:00:25,600 --> 00:00:32,589
evolving with the Apache community and

00:00:28,630 --> 00:00:36,100
also it has been undergoing major revamp

00:00:32,589 --> 00:00:41,319
in terms of architecture design as an

00:00:36,100 --> 00:00:44,229
Apache project so what is Apache stratus

00:00:41,319 --> 00:00:46,690
basically these a platform as a service

00:00:44,229 --> 00:00:49,449
framework in simple terms what it is

00:00:46,690 --> 00:00:52,479
capable of is that it is capable of

00:00:49,449 --> 00:00:55,629
allowing you to introduce services into

00:00:52,479 --> 00:00:59,789
your platform and scale them up or down

00:00:55,629 --> 00:01:02,949
based on the load on a choice of a plat

00:00:59,789 --> 00:01:05,829
infrastructure as a service cloud so it

00:01:02,949 --> 00:01:07,780
allows you to bring in development

00:01:05,829 --> 00:01:09,490
services when we say services here these

00:01:07,780 --> 00:01:11,789
are not web services or read services

00:01:09,490 --> 00:01:13,750
there things such as you can i'm

00:01:11,789 --> 00:01:17,079
application programming frameworks

00:01:13,750 --> 00:01:19,659
databases legacy applications etc so

00:01:17,079 --> 00:01:22,240
this platform allows you to bring those

00:01:19,659 --> 00:01:24,759
applications and easily develop software

00:01:22,240 --> 00:01:27,909
as a service applications on top of that

00:01:24,759 --> 00:01:31,630
as a programmer it also provides you

00:01:27,909 --> 00:01:34,060
with the managing and metering services

00:01:31,630 --> 00:01:36,100
for your services that you introduced

00:01:34,060 --> 00:01:38,979
into the platform and it has some

00:01:36,100 --> 00:01:40,869
foundation services for a fundamental

00:01:38,979 --> 00:01:45,840
requirements such as user management

00:01:40,869 --> 00:01:49,869
building storage etc as a platform

00:01:45,840 --> 00:01:53,710
foundation services so this is the

00:01:49,869 --> 00:01:55,780
architecture of apache status which has

00:01:53,710 --> 00:01:57,429
been designed by the community after it

00:01:55,780 --> 00:01:59,799
has been donated so this is the latest

00:01:57,429 --> 00:02:02,920
and the greatest architecture one of the

00:01:59,799 --> 00:02:05,619
key aspects in here is the fact that we

00:02:02,920 --> 00:02:08,440
have a message bus which connects all

00:02:05,619 --> 00:02:11,080
the elements in the infrastructure so it

00:02:08,440 --> 00:02:13,390
loosely couples the elements in the

00:02:11,080 --> 00:02:13,970
architecture and uses the message bus to

00:02:13,390 --> 00:02:16,190
you

00:02:13,970 --> 00:02:18,160
adhere to a pub sub model of

00:02:16,190 --> 00:02:21,680
communication so that it allows

00:02:18,160 --> 00:02:23,120
components being added then removed so

00:02:21,680 --> 00:02:25,790
at the bottom most layer you have

00:02:23,120 --> 00:02:27,950
multiple infrastructure clouds apache

00:02:25,790 --> 00:02:31,040
status is capable of dealing with

00:02:27,950 --> 00:02:35,320
multiple cloud such as CloudStack ec2 or

00:02:31,040 --> 00:02:38,600
whatever that you would like to use and

00:02:35,320 --> 00:02:41,030
then on your left hand side of the

00:02:38,600 --> 00:02:43,430
screen you see the Stratus controller

00:02:41,030 --> 00:02:47,300
which deals with things such as auto

00:02:43,430 --> 00:02:49,250
scaling artifact distribution crowd

00:02:47,300 --> 00:02:52,430
controlling any toes who has a complex

00:02:49,250 --> 00:02:54,770
event processing engine and then in the

00:02:52,430 --> 00:02:56,390
services you can have multiples of

00:02:54,770 --> 00:02:59,030
services for example data services

00:02:56,390 --> 00:03:01,100
programming framework services scaling

00:02:59,030 --> 00:03:03,830
under a load balancer independent from

00:03:01,100 --> 00:03:07,310
each other on the cloud infrastructure

00:03:03,830 --> 00:03:09,280
and once you have service nodes within a

00:03:07,310 --> 00:03:11,930
service node there are agents running

00:03:09,280 --> 00:03:14,480
which are publishing events into the

00:03:11,930 --> 00:03:16,580
something called the event bus now the

00:03:14,480 --> 00:03:19,130
eventbus receives these events and

00:03:16,580 --> 00:03:21,230
publishers that into the complexity vent

00:03:19,130 --> 00:03:23,780
processing engine which in turn

00:03:21,230 --> 00:03:27,080
publishes them into the message bus to

00:03:23,780 --> 00:03:29,420
help monitor the situational awareness

00:03:27,080 --> 00:03:31,820
of the cloud so that you can tune

00:03:29,420 --> 00:03:34,340
provision etc based on that you can also

00:03:31,820 --> 00:03:36,650
plug in an external third party system

00:03:34,340 --> 00:03:39,500
to pump these events to be monitored as

00:03:36,650 --> 00:03:43,250
well and as I explained earlier you have

00:03:39,500 --> 00:03:45,650
the logging and metering as framework

00:03:43,250 --> 00:03:47,570
services and you have also foundation

00:03:45,650 --> 00:03:50,360
services that are a must when you are

00:03:47,570 --> 00:03:55,549
dealing with a cloud platform as a

00:03:50,360 --> 00:03:59,000
service system so I spoke about service

00:03:55,549 --> 00:04:03,110
nodes now the beauty of apache Stratus

00:03:59,000 --> 00:04:06,950
is that it has something called the

00:04:03,110 --> 00:04:11,180
cartridge model where you can add new

00:04:06,950 --> 00:04:13,010
types of services into platform so some

00:04:11,180 --> 00:04:14,480
examples are shown here you can have

00:04:13,010 --> 00:04:18,109
frameworks as I mentioned earlier

00:04:14,480 --> 00:04:20,780
application servers programming

00:04:18,109 --> 00:04:22,910
languages databases and the model is

00:04:20,780 --> 00:04:23,870
such that the design is such that you

00:04:22,910 --> 00:04:26,270
can even bring

00:04:23,870 --> 00:04:28,790
in legacy applications now the question

00:04:26,270 --> 00:04:30,050
is what is the advantage of this now say

00:04:28,790 --> 00:04:32,449
if you are bringing in a legacy

00:04:30,050 --> 00:04:34,970
application you can benefit from the

00:04:32,449 --> 00:04:38,150
services that the framework provides you

00:04:34,970 --> 00:04:41,060
and auto scale your legacy application

00:04:38,150 --> 00:04:44,360
and also benefit from the other services

00:04:41,060 --> 00:04:47,180
that I mentioned such as storage logging

00:04:44,360 --> 00:04:48,949
metering etc and the other beautiful

00:04:47,180 --> 00:04:51,560
thing about the Stratus architecture is

00:04:48,949 --> 00:04:54,889
that when we talk about these cottages

00:04:51,560 --> 00:04:58,880
it is not only about the web traffic it

00:04:54,889 --> 00:05:01,669
is also capable of dealing with non-web

00:04:58,880 --> 00:05:05,120
oriented traffic so non HTTP traffic for

00:05:01,669 --> 00:05:06,770
example you can scale up or down for

00:05:05,120 --> 00:05:10,550
example thrift services if your

00:05:06,770 --> 00:05:12,440
transport is thrift so that is useful

00:05:10,550 --> 00:05:14,300
because in your legacy applications

00:05:12,440 --> 00:05:17,030
there could be some applications which

00:05:14,300 --> 00:05:18,949
are non HTTP and also there are some

00:05:17,030 --> 00:05:21,680
state of those applications which are

00:05:18,949 --> 00:05:24,139
using non HTTP protocols for various

00:05:21,680 --> 00:05:27,169
reasons maybe they are not much or

00:05:24,139 --> 00:05:29,510
interpret but enterprises you suppose to

00:05:27,169 --> 00:05:31,580
use them in some situations so your

00:05:29,510 --> 00:05:36,169
cloud can support those protocols as

00:05:31,580 --> 00:05:40,070
well and it has comprehensive DevOps

00:05:36,169 --> 00:05:41,419
tooling for you to help tune the

00:05:40,070 --> 00:05:43,250
infrastructure provision the

00:05:41,419 --> 00:05:46,550
infrastructure etc as I mentioned

00:05:43,250 --> 00:05:48,320
earlier we have an event brass so events

00:05:46,550 --> 00:05:50,300
/ that are publishing to the grain bars

00:05:48,320 --> 00:05:52,570
are collected by the complexity vent

00:05:50,300 --> 00:05:55,940
processor and these metrics can be

00:05:52,570 --> 00:05:58,729
gathered to process and this is an

00:05:55,940 --> 00:06:00,919
example screenshot where the DevOps can

00:05:58,729 --> 00:06:04,729
monitor the state of the cloud system

00:06:00,919 --> 00:06:10,280
and make provisioning or capacity

00:06:04,729 --> 00:06:13,669
planning decisions so why should you

00:06:10,280 --> 00:06:16,639
bother about Stratus so as I mentioned

00:06:13,669 --> 00:06:18,910
earlier the ability to deal with HTTP as

00:06:16,639 --> 00:06:21,650
well as non-native traffic in terms of

00:06:18,910 --> 00:06:24,320
anything can be scaled up and down using

00:06:21,650 --> 00:06:28,099
the cloud infrastructure you get with

00:06:24,320 --> 00:06:30,199
this pass framework and it is also has a

00:06:28,099 --> 00:06:33,020
unique advantage in terms of cloud

00:06:30,199 --> 00:06:34,250
bursting it can simultaneously crowd

00:06:33,020 --> 00:06:36,880
burst into multiple

00:06:34,250 --> 00:06:40,030
infrastructure-as-a-service clouds

00:06:36,880 --> 00:06:43,690
for example if you have a private cloud

00:06:40,030 --> 00:06:45,160
and if you get a burst of load and if

00:06:43,690 --> 00:06:48,610
you want to use a public cloud may be

00:06:45,160 --> 00:06:50,890
easy to some other provider while

00:06:48,610 --> 00:06:53,910
keeping your existing cloud you can

00:06:50,890 --> 00:06:57,430
offload the rest of the load into these

00:06:53,910 --> 00:06:59,860
multiple clouds that are outside of your

00:06:57,430 --> 00:07:02,950
infrastructure and bursting to the cloud

00:06:59,860 --> 00:07:06,090
and it also has the capability of

00:07:02,950 --> 00:07:12,640
dealing multi-zone multi data center

00:07:06,090 --> 00:07:16,420
support so you can again deal with large

00:07:12,640 --> 00:07:18,070
volumes of load in the system and the

00:07:16,420 --> 00:07:20,850
other interesting thing about Stratus

00:07:18,070 --> 00:07:24,100
architecture is its ability to deal with

00:07:20,850 --> 00:07:26,080
tenant isolation at multiple levels the

00:07:24,100 --> 00:07:28,630
most interesting aspect is it supports

00:07:26,080 --> 00:07:30,910
in container multi-tenancy which means

00:07:28,630 --> 00:07:33,340
that given an instance of a service node

00:07:30,910 --> 00:07:36,970
you can have multiple tenants isolated

00:07:33,340 --> 00:07:41,260
in the same in instance and also it can

00:07:36,970 --> 00:07:43,180
have operating service layer tenancy

00:07:41,260 --> 00:07:45,340
isolation or virtual machine layer

00:07:43,180 --> 00:07:49,570
tenancy isolation or physical machine

00:07:45,340 --> 00:07:53,470
layer tenancy isolation so out of these

00:07:49,570 --> 00:07:56,980
the in container tenant isolation is the

00:07:53,470 --> 00:07:59,410
most appealing one because it gives you

00:07:56,980 --> 00:08:01,150
the highest multi-tenancy density like

00:07:59,410 --> 00:08:03,610
how many tenants can be parallely

00:08:01,150 --> 00:08:08,820
supported at a given point in time is

00:08:03,610 --> 00:08:08,820
highest within container multi-tenancy

00:08:10,140 --> 00:08:15,370
so as I told you it is an Apache project

00:08:12,850 --> 00:08:18,040
it is still in incubation hopefully it

00:08:15,370 --> 00:08:20,050
will graduate once the requirements are

00:08:18,040 --> 00:08:23,200
fulfilled but it has been a huge success

00:08:20,050 --> 00:08:25,930
as an Apache project we would love you

00:08:23,200 --> 00:08:28,120
to come and try it out and more

00:08:25,930 --> 00:08:30,940
importantly not only try it out be part

00:08:28,120 --> 00:08:32,770
of the project you can join the

00:08:30,940 --> 00:08:35,680
community contribute contribute at the

00:08:32,770 --> 00:08:38,710
code level or you can also help extend

00:08:35,680 --> 00:08:41,130
the platform by bringing in your Apache

00:08:38,710 --> 00:08:44,710
project into the cottage model and

00:08:41,130 --> 00:08:47,800
adding the new cartridges into the

00:08:44,710 --> 00:08:49,950
Kazakh cartridge stowe

00:08:47,800 --> 00:08:53,370
and I have given the link of the website

00:08:49,950 --> 00:08:56,589
that a lot of activities happening on

00:08:53,370 --> 00:08:59,440
social media as well you can participate

00:08:56,589 --> 00:09:02,170
can track these I would also like to

00:08:59,440 --> 00:09:04,180
invite you to come and have a chat with

00:09:02,170 --> 00:09:08,470
some of our committees are doing a

00:09:04,180 --> 00:09:09,940
hackathon outside today and tomorrow so

00:09:08,470 --> 00:09:11,680
they will be around if you like to

00:09:09,940 --> 00:09:13,990
participate please come and join us and

00:09:11,680 --> 00:09:16,959
also if you have questions there will be

00:09:13,990 --> 00:09:19,870
technical people including myself as

00:09:16,959 --> 00:09:21,519
well as people from the project several

00:09:19,870 --> 00:09:23,950
committees are available in the

00:09:21,519 --> 00:09:27,570
hackathon area to answer your questions

00:09:23,950 --> 00:09:27,570

YouTube URL: https://www.youtube.com/watch?v=EXka9rvqvg0


