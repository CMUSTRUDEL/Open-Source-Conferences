Title: Running Fineract.dev like a Cloud Native SRE
Publication date: 2020-10-17
Playlist: ApacheCon @Home 2020: Fineract
Description: 
	Running Fineract.dev like a Cloud Native SRE
Michael Vorburger

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

https://www.fineract.dev runs https://github.com/apache/fineract as a service. This talk will give a peek behind the curtain of how that has been set up, detailing e.g. http://blog2.vorburger.ch/2020/05/fineractdev-cicd-from-github-to-google.html etc. It will mention the details of that cloud's used services, but go easy on marketing the particular cloud (Google's) that Fineract.dev runs on. We will also lightly touch upon a few SRE principles from https://landing.google.com/sre/books, and mention some Cloud Native application architecture principles (hint: it's not all about microservices only).

Michael is a long time open sourcerer who over the years has been involved in too many projects to enumerate. He started in FLOSS one fateful night many moons ago through a friendly interaction with a maintainer on an IRC channel of what was then the Mifos project. Ever since, he has been actively supporting the humanitarian open source platform for financial inclusion that is now known as Apache Fineract in a volunteer capacity. Currently employed by Google, previously at Red Hat, this talk is given in a purely personal capacity.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,119 --> 00:00:29,039
um

00:00:25,760 --> 00:00:30,560
i'd like to present uh some background

00:00:29,039 --> 00:00:33,360
about this finrac dev

00:00:30,560 --> 00:00:34,719
server that um if you've been following

00:00:33,360 --> 00:00:36,000
along the mailing list or if you've had

00:00:34,719 --> 00:00:37,680
a look at the

00:00:36,000 --> 00:00:39,760
finrac readme recently you might have

00:00:37,680 --> 00:00:43,120
heard about

00:00:39,760 --> 00:00:44,879
um i

00:00:43,120 --> 00:00:46,320
i'm just introducing myself real quick

00:00:44,879 --> 00:00:48,800
for those of you who don't know me

00:00:46,320 --> 00:00:50,719
i've been involved with um what used to

00:00:48,800 --> 00:00:51,520
be mephos and is now apache finrac for

00:00:50,719 --> 00:00:52,960
10 years

00:00:51,520 --> 00:00:55,120
it was actually kind of how i got

00:00:52,960 --> 00:00:57,199
started in open source personally

00:00:55,120 --> 00:00:58,800
i currently work at google by day but

00:00:57,199 --> 00:01:00,800
i'm presenting here in a personal

00:00:58,800 --> 00:01:03,680
capacity on a day

00:01:00,800 --> 00:01:05,280
off from work this is not a google

00:01:03,680 --> 00:01:05,920
product or google offering or anything

00:01:05,280 --> 00:01:07,600
like that

00:01:05,920 --> 00:01:10,000
just to avoid any confusion anybody

00:01:07,600 --> 00:01:10,000
might have

00:01:10,159 --> 00:01:13,760
i think i can skip the slide where the

00:01:12,080 --> 00:01:15,680
patch of interact is we just heard from

00:01:13,760 --> 00:01:16,960
maria about why it's important i think

00:01:15,680 --> 00:01:18,159
many of you are here because you know

00:01:16,960 --> 00:01:21,280
what finrak is

00:01:18,159 --> 00:01:24,479
so i will skip over this

00:01:21,280 --> 00:01:27,360
um why and what of

00:01:24,479 --> 00:01:28,560
finrak.dev real real quick sort of goal

00:01:27,360 --> 00:01:30,479
and then we'll come back to this at the

00:01:28,560 --> 00:01:32,799
very end of the presentation

00:01:30,479 --> 00:01:35,439
um what i wanted to do was run a demo

00:01:32,799 --> 00:01:37,680
instance of batch of interact

00:01:35,439 --> 00:01:39,280
for the community i gave another

00:01:37,680 --> 00:01:41,280
presentation yesterday

00:01:39,280 --> 00:01:42,799
uh titled reinvigorating the community

00:01:41,280 --> 00:01:44,960
where i briefly touched upon why i

00:01:42,799 --> 00:01:46,720
thought this was useful and important

00:01:44,960 --> 00:01:48,640
um you see if the light here can be

00:01:46,720 --> 00:01:52,000
changed

00:01:48,640 --> 00:01:54,960
yeah i think this will look a bit better

00:01:52,000 --> 00:01:56,560
and the reason is that we have of course

00:01:54,960 --> 00:01:57,520
the source code up and of course we have

00:01:56,560 --> 00:01:59,119
distributions

00:01:57,520 --> 00:02:00,560
uh zip files that can be downloaded with

00:01:59,119 --> 00:02:03,280
the code but

00:02:00,560 --> 00:02:04,960
until recently the apache finrac project

00:02:03,280 --> 00:02:06,560
did not have a place where the latest

00:02:04,960 --> 00:02:09,920
and greatest code

00:02:06,560 --> 00:02:12,400
could be seen running

00:02:09,920 --> 00:02:14,239
i believe this is useful so that people

00:02:12,400 --> 00:02:16,800
can very easily try out

00:02:14,239 --> 00:02:18,400
our software um and i also think it's

00:02:16,800 --> 00:02:20,720
useful that we have it

00:02:18,400 --> 00:02:22,000
uh always having the latest and greatest

00:02:20,720 --> 00:02:24,720
software so

00:02:22,000 --> 00:02:26,080
it's fine and interesting to have

00:02:24,720 --> 00:02:27,760
releases from

00:02:26,080 --> 00:02:29,520
whatever many months ago running

00:02:27,760 --> 00:02:31,360
somewhere but i think for an open source

00:02:29,520 --> 00:02:33,680
project it's important for people to

00:02:31,360 --> 00:02:34,959
able to immediately see changes and

00:02:33,680 --> 00:02:36,560
fixes running live

00:02:34,959 --> 00:02:38,560
right somebody contributes a pull

00:02:36,560 --> 00:02:39,840
request somebody fixes something

00:02:38,560 --> 00:02:41,760
um it's cool to have a place where

00:02:39,840 --> 00:02:43,920
that's just ready up and running

00:02:41,760 --> 00:02:46,000
um so that was that was the goal of

00:02:43,920 --> 00:02:48,080
fitrac.dev right

00:02:46,000 --> 00:02:49,280
i wanted this to be really easy to use

00:02:48,080 --> 00:02:51,200
so something that was

00:02:49,280 --> 00:02:52,959
you know not running on my server at

00:02:51,200 --> 00:02:54,400
home only when i had it switched on but

00:02:52,959 --> 00:02:56,480
like really always up really

00:02:54,400 --> 00:02:58,000
highly available anytime i wanted to

00:02:56,480 --> 00:02:58,879
make sure there was no need to register

00:02:58,000 --> 00:03:01,599
anywhere

00:02:58,879 --> 00:03:02,560
just a basic simple default login and

00:03:01,599 --> 00:03:04,720
password

00:03:02,560 --> 00:03:07,040
um really for for demo purposes right to

00:03:04,720 --> 00:03:10,560
make the barrier to entry so to speak

00:03:07,040 --> 00:03:14,000
really low i have set this up

00:03:10,560 --> 00:03:15,760
on um gcp the google cloud primarily

00:03:14,000 --> 00:03:17,920
because i was already familiar with it

00:03:15,760 --> 00:03:19,519
there isn't much going on here with me

00:03:17,920 --> 00:03:21,360
working at google or with

00:03:19,519 --> 00:03:22,959
google being a better cloud than azure

00:03:21,360 --> 00:03:25,040
or amazon i'm sure they're all great

00:03:22,959 --> 00:03:26,720
then

00:03:25,040 --> 00:03:29,280
people implementing finrac can deploy it

00:03:26,720 --> 00:03:30,720
wherever they like i happen to

00:03:29,280 --> 00:03:33,200
have already deployed other things in

00:03:30,720 --> 00:03:34,799
google cloud so for me it was easy to

00:03:33,200 --> 00:03:37,200
do this there instead of learning a new

00:03:34,799 --> 00:03:37,200
cloud

00:03:39,120 --> 00:03:46,400
running something on a cloud

00:03:43,200 --> 00:03:48,720
on on any cloud always costs something

00:03:46,400 --> 00:03:51,440
so most clouds have some sort of trial

00:03:48,720 --> 00:03:54,959
tier going or some scheme

00:03:51,440 --> 00:03:56,879
it's the same on the cloud that i chose

00:03:54,959 --> 00:03:59,040
for a demo environment it's actually not

00:03:56,879 --> 00:04:00,879
that expensive i mean it's all relative

00:03:59,040 --> 00:04:03,439
but i'm running it on a fairly low end

00:04:00,879 --> 00:04:06,720
configuration

00:04:03,439 --> 00:04:08,239
and i'm thinking of paying for this demo

00:04:06,720 --> 00:04:11,599
instance as basically just another way

00:04:08,239 --> 00:04:11,599
in which i contribute to the project

00:04:11,760 --> 00:04:14,640
in case there are people who are

00:04:13,040 --> 00:04:15,840
interested in how much exactly this

00:04:14,640 --> 00:04:17,680
costs i think it's

00:04:15,840 --> 00:04:19,359
easier not to provide details or

00:04:17,680 --> 00:04:20,720
something like that because the cost of

00:04:19,359 --> 00:04:22,000
running a demo instance versus a

00:04:20,720 --> 00:04:23,280
production instance i think could be a

00:04:22,000 --> 00:04:25,440
little bit different

00:04:23,280 --> 00:04:26,400
right so for actual production

00:04:25,440 --> 00:04:29,280
deployment

00:04:26,400 --> 00:04:31,280
you probably need a higher end config of

00:04:29,280 --> 00:04:33,520
application runtime and database

00:04:31,280 --> 00:04:35,280
and so let's just say it costs something

00:04:33,520 --> 00:04:36,400
that that is okay to

00:04:35,280 --> 00:04:39,040
pay out of your own pocket for a

00:04:36,400 --> 00:04:40,560
contributor

00:04:39,040 --> 00:04:42,320
i do have a small announcement to make

00:04:40,560 --> 00:04:45,520
here that

00:04:42,320 --> 00:04:46,560
whereas the initial just setting up a

00:04:45,520 --> 00:04:48,720
timer here 40 minutes

00:04:46,560 --> 00:04:50,000
the initial setup was was personal i

00:04:48,720 --> 00:04:53,440
actually was able to

00:04:50,000 --> 00:04:55,360
um get google cloud open source to pay

00:04:53,440 --> 00:04:56,720
for finrac.net for the next year

00:04:55,360 --> 00:04:58,400
i think that's really nice of them it's

00:04:56,720 --> 00:05:01,759
a way of them to support

00:04:58,400 --> 00:05:03,520
um great open source projects such as

00:05:01,759 --> 00:05:05,199
finrac which have great traction of

00:05:03,520 --> 00:05:06,639
course many people interested in them

00:05:05,199 --> 00:05:08,639
and google open source is happy to

00:05:06,639 --> 00:05:10,560
sponsor this for a year for cloud

00:05:08,639 --> 00:05:12,720
hosting costs

00:05:10,560 --> 00:05:13,759
that's really cool all right let's get a

00:05:12,720 --> 00:05:17,520
bit more technical

00:05:13,759 --> 00:05:17,520
uh finra according to wikipedia

00:05:18,479 --> 00:05:22,960
um it's really easy right finrac we've

00:05:21,360 --> 00:05:24,320
made it simple to deploy i've mentioned

00:05:22,960 --> 00:05:26,720
this briefly yesterday

00:05:24,320 --> 00:05:28,560
in the community talk we have a docker

00:05:26,720 --> 00:05:31,120
compose setup now

00:05:28,560 --> 00:05:31,759
we have a fat jar that makes it easy to

00:05:31,120 --> 00:05:35,039
run

00:05:31,759 --> 00:05:35,520
so really all you need is a vm so gcloud

00:05:35,039 --> 00:05:38,960
compute

00:05:35,520 --> 00:05:40,320
instance create finrac that creates a vm

00:05:38,960 --> 00:05:42,160
on the command line with the google

00:05:40,320 --> 00:05:44,400
cloud command line interface and then

00:05:42,160 --> 00:05:46,400
your favorite package manager dnf mapped

00:05:44,400 --> 00:05:47,840
install mirror db server or mysql server

00:05:46,400 --> 00:05:50,479
whichever you want to prefer

00:05:47,840 --> 00:05:52,320
and you run finra all in one vm all

00:05:50,479 --> 00:05:54,800
great right

00:05:52,320 --> 00:05:56,080
um it it's actually not it's actually

00:05:54,800 --> 00:05:57,360
not there's actually a couple of things

00:05:56,080 --> 00:05:59,759
that are wrong with that

00:05:57,360 --> 00:06:01,280
um of course this works you can run a

00:05:59,759 --> 00:06:02,000
server like this and you can get this up

00:06:01,280 --> 00:06:03,840
and running

00:06:02,000 --> 00:06:05,919
fairly easily now that we've we've made

00:06:03,840 --> 00:06:07,680
some some work to simplify it you don't

00:06:05,919 --> 00:06:08,639
even need an external tomcat anymore now

00:06:07,680 --> 00:06:11,919
that we have

00:06:08,639 --> 00:06:13,280
this uh self sustaining jar file which

00:06:11,919 --> 00:06:17,120
we highly recommend over the war

00:06:13,280 --> 00:06:20,080
deployment now in 1.4.0

00:06:17,120 --> 00:06:20,479
but there's a couple of issues with this

00:06:20,080 --> 00:06:22,880
and

00:06:20,479 --> 00:06:24,639
i like to call this the difference

00:06:22,880 --> 00:06:26,160
between a managed and an unmanaged

00:06:24,639 --> 00:06:29,280
environment

00:06:26,160 --> 00:06:30,160
so if you set up a vm and in this vm you

00:06:29,280 --> 00:06:32,400
run

00:06:30,160 --> 00:06:34,319
finrac or any other application whether

00:06:32,400 --> 00:06:34,960
it's written in java or ruby or php or

00:06:34,319 --> 00:06:37,039
whatever

00:06:34,960 --> 00:06:38,080
is your favorite language you've got a

00:06:37,039 --> 00:06:41,759
lot of things you want to

00:06:38,080 --> 00:06:43,440
take care of yourself um this is a

00:06:41,759 --> 00:06:45,280
slide with too many words on them that

00:06:43,440 --> 00:06:46,560
just wants to illustrate there's a

00:06:45,280 --> 00:06:47,199
number of things you have to take care

00:06:46,560 --> 00:06:49,599
of

00:06:47,199 --> 00:06:51,120
you have to take care of ssl termination

00:06:49,599 --> 00:06:54,000
so how your

00:06:51,120 --> 00:06:56,000
https certificates are set up and how

00:06:54,000 --> 00:06:57,680
you rotate them after time

00:06:56,000 --> 00:06:59,360
if you have a single vm what happens

00:06:57,680 --> 00:07:00,880
when that vm goes down what happens if

00:06:59,360 --> 00:07:02,880
you need more than one vm because you

00:07:00,880 --> 00:07:04,400
want to scale what happens when you need

00:07:02,880 --> 00:07:06,639
to do a kernel upgrade

00:07:04,400 --> 00:07:08,160
which you should be doing following any

00:07:06,639 --> 00:07:09,840
recent linux distribution regularly

00:07:08,160 --> 00:07:13,039
enough

00:07:09,840 --> 00:07:16,080
how do you secure this vm what ports may

00:07:13,039 --> 00:07:18,720
be open by default on this

00:07:16,080 --> 00:07:19,280
many linux distributions come with sshd

00:07:18,720 --> 00:07:21,680
running

00:07:19,280 --> 00:07:22,479
and password login enabled what if you

00:07:21,680 --> 00:07:24,160
um

00:07:22,479 --> 00:07:27,280
you know don't do the work required to

00:07:24,160 --> 00:07:30,720
harden the box how do you backup

00:07:27,280 --> 00:07:34,160
a simple vm based uh

00:07:30,720 --> 00:07:35,039
setup these problems and many others

00:07:34,160 --> 00:07:38,960
have all been

00:07:35,039 --> 00:07:40,400
solved in managed environments

00:07:38,960 --> 00:07:42,160
so managed environment is just something

00:07:40,400 --> 00:07:43,360
that says what you want to do here is

00:07:42,160 --> 00:07:46,000
run a database or

00:07:43,360 --> 00:07:47,199
run the java application and something

00:07:46,000 --> 00:07:49,120
takes care of and

00:07:47,199 --> 00:07:51,759
manages problems like the ones i've

00:07:49,120 --> 00:07:54,160
enumerated here on others

00:07:51,759 --> 00:07:54,879
a managed environment is an orthogonal

00:07:54,160 --> 00:07:56,960
concern

00:07:54,879 --> 00:07:58,240
to whether something is a proprietary

00:07:56,960 --> 00:07:59,599
cloud or open source

00:07:58,240 --> 00:08:01,440
right that is that is completely

00:07:59,599 --> 00:08:04,720
separate there are

00:08:01,440 --> 00:08:06,319
uh fully open source managed sects

00:08:04,720 --> 00:08:07,759
which you have to deploy yourself but

00:08:06,319 --> 00:08:09,840
then when you deploy the applications

00:08:07,759 --> 00:08:13,199
and then the applications are managed

00:08:09,840 --> 00:08:14,879
or all the big uh closed

00:08:13,199 --> 00:08:16,400
uh clouds whether it's google cloud or

00:08:14,879 --> 00:08:17,919
amazon or azure or

00:08:16,400 --> 00:08:20,160
many of the others of course there are

00:08:17,919 --> 00:08:21,360
some medium and small cloud players

00:08:20,160 --> 00:08:22,800
where you get the same offer you can

00:08:21,360 --> 00:08:24,080
have a managed environment from many

00:08:22,800 --> 00:08:27,280
many vendors

00:08:24,080 --> 00:08:30,240
they take care of that as well um

00:08:27,280 --> 00:08:31,360
and and with a a bit of a joke here um a

00:08:30,240 --> 00:08:32,159
managed environment is something where

00:08:31,360 --> 00:08:33,760
you can tell it's

00:08:32,159 --> 00:08:35,599
uh when you kill your boss that it's

00:08:33,760 --> 00:08:37,120
somebody else's problem when it's not

00:08:35,599 --> 00:08:38,719
working when it's down

00:08:37,120 --> 00:08:41,360
of course the application is still on

00:08:38,719 --> 00:08:43,279
you but at least all of the

00:08:41,360 --> 00:08:44,480
technical infrastructure is taken care

00:08:43,279 --> 00:08:46,080
of by somebody else in a managed

00:08:44,480 --> 00:08:48,320
environment

00:08:46,080 --> 00:08:50,240
so that's what i went for on finrac.dev

00:08:48,320 --> 00:08:51,279
decided to run in a managed environment

00:08:50,240 --> 00:08:55,120
so

00:08:51,279 --> 00:08:58,480
not a vm which is called gce

00:08:55,120 --> 00:09:01,440
on google cloud

00:08:58,480 --> 00:09:02,720
and that makes sense because while a vm

00:09:01,440 --> 00:09:04,800
in a gcvm

00:09:02,720 --> 00:09:07,200
is is fun and your linux administrator

00:09:04,800 --> 00:09:09,360
can install packages in it and can

00:09:07,200 --> 00:09:10,560
you know i mentioned set up an ssh

00:09:09,360 --> 00:09:12,080
server on it so you can

00:09:10,560 --> 00:09:13,360
check the log files that's actually not

00:09:12,080 --> 00:09:14,160
what you want to do if you think about

00:09:13,360 --> 00:09:16,320
it right

00:09:14,160 --> 00:09:18,480
if you go back to my first slide my goal

00:09:16,320 --> 00:09:20,320
was to get finract

00:09:18,480 --> 00:09:22,640
running in the cloud for people to try

00:09:20,320 --> 00:09:24,640
it out my goal wasn't to set up a linux

00:09:22,640 --> 00:09:26,560
box my goal wasn't to

00:09:24,640 --> 00:09:28,080
deal with database backups as much fun

00:09:26,560 --> 00:09:30,160
as that sometimes is

00:09:28,080 --> 00:09:31,760
i think it's important to set yourself a

00:09:30,160 --> 00:09:33,360
goal and focus on achieving that goal so

00:09:31,760 --> 00:09:35,600
if your goal is to run

00:09:33,360 --> 00:09:37,839
a demo instance of finrac well then

00:09:35,600 --> 00:09:39,200
what's the easiest way to do that

00:09:37,839 --> 00:09:42,160
there are a couple of managed

00:09:39,200 --> 00:09:44,560
environments on the google cloud

00:09:42,160 --> 00:09:45,200
and it's surprisingly confusing actually

00:09:44,560 --> 00:09:48,320
how

00:09:45,200 --> 00:09:48,320
many options there are

00:09:48,560 --> 00:09:51,839
you can for example use google cloud run

00:09:51,279 --> 00:09:55,200
that is

00:09:51,839 --> 00:09:55,680
a very low entry product um that you can

00:09:55,200 --> 00:09:58,720
just give

00:09:55,680 --> 00:10:00,720
a container image a docker container

00:09:58,720 --> 00:10:01,760
um and it just runs that for you you

00:10:00,720 --> 00:10:04,560
don't have to do anything

00:10:01,760 --> 00:10:06,079
you just you get http requests and the

00:10:04,560 --> 00:10:08,079
container runs

00:10:06,079 --> 00:10:09,680
that sounds nice but for finrac that's

00:10:08,079 --> 00:10:11,760
actually a bad fit

00:10:09,680 --> 00:10:13,519
cloud run on the google cloud actually

00:10:11,760 --> 00:10:15,680
doesn't work well for finrac

00:10:13,519 --> 00:10:17,519
because a java spring boot application

00:10:15,680 --> 00:10:19,120
like our architecture takes too long to

00:10:17,519 --> 00:10:22,640
start up

00:10:19,120 --> 00:10:23,360
and cloud run optimizes hosting costs by

00:10:22,640 --> 00:10:26,240
shutting down

00:10:23,360 --> 00:10:27,839
instances that don't get requests also

00:10:26,240 --> 00:10:29,040
finrac of course has a background

00:10:27,839 --> 00:10:31,279
scheduler

00:10:29,040 --> 00:10:32,880
for some of the account processing and

00:10:31,279 --> 00:10:34,000
that's also not the cloud run model

00:10:32,880 --> 00:10:34,959
cloud run model is really an

00:10:34,000 --> 00:10:37,040
architecture where

00:10:34,959 --> 00:10:38,880
you get requests your server requests

00:10:37,040 --> 00:10:40,320
containers scale up

00:10:38,880 --> 00:10:41,360
gets shut down you can't have stuff

00:10:40,320 --> 00:10:43,200
running in the background when you'll

00:10:41,360 --> 00:10:45,279
get requests that's not a fit for

00:10:43,200 --> 00:10:46,560
for cloud run there's kubernetes of

00:10:45,279 --> 00:10:48,959
course many of you know kubernetes

00:10:46,560 --> 00:10:52,720
kubernetes is the leading winning

00:10:48,959 --> 00:10:55,040
container orchestration server um

00:10:52,720 --> 00:10:56,399
it's a lot of fun i highly recommend you

00:10:55,040 --> 00:10:59,040
all learn about kubernetes

00:10:56,399 --> 00:10:59,760
um it's overkill for what we're trying

00:10:59,040 --> 00:11:01,839
to do here

00:10:59,760 --> 00:11:03,600
go back to my goal i'd like to run

00:11:01,839 --> 00:11:07,440
finrak.dev

00:11:03,600 --> 00:11:09,040
where the finrac 1.x instance is

00:11:07,440 --> 00:11:10,480
available to anybody who wants to try it

00:11:09,040 --> 00:11:13,680
at all times

00:11:10,480 --> 00:11:14,399
i don't need kubernetes there is another

00:11:13,680 --> 00:11:17,040
thing

00:11:14,399 --> 00:11:18,320
called google app engine um that's

00:11:17,040 --> 00:11:19,440
somewhere in the middle between

00:11:18,320 --> 00:11:24,079
kubernetes and

00:11:19,440 --> 00:11:27,200
cloud run in terms of uh product or

00:11:24,079 --> 00:11:28,959
architecture and that actually works

00:11:27,200 --> 00:11:32,240
quite nicely for something like this

00:11:28,959 --> 00:11:34,320
a simple java app um even if it

00:11:32,240 --> 00:11:36,320
had several microservices like even if

00:11:34,320 --> 00:11:37,839
it had a couple of different java apps

00:11:36,320 --> 00:11:39,519
but you don't need advanced kubernetes

00:11:37,839 --> 00:11:43,600
features this is a nice

00:11:39,519 --> 00:11:44,880
managed hosting offering

00:11:43,600 --> 00:11:46,880
it's confusing because they're two

00:11:44,880 --> 00:11:50,079
different app engines

00:11:46,880 --> 00:11:51,279
the one that fits for something like

00:11:50,079 --> 00:11:53,279
finrac

00:11:51,279 --> 00:11:55,519
is the app engine flexible environment

00:11:53,279 --> 00:11:57,519
serverless app engine flexible

00:11:55,519 --> 00:11:58,720
that's the first choice here but then

00:11:57,519 --> 00:12:00,000
you have other choices to make and i'm

00:11:58,720 --> 00:12:01,680
going to simplify this a little bit

00:12:00,000 --> 00:12:04,639
while i spoke in detail

00:12:01,680 --> 00:12:06,240
about the choice of the runtime

00:12:04,639 --> 00:12:06,720
environment for the backend for the java

00:12:06,240 --> 00:12:08,480
part

00:12:06,720 --> 00:12:10,720
i'm going to cut short here and just

00:12:08,480 --> 00:12:13,519
list some of the other choices

00:12:10,720 --> 00:12:15,120
made for running finrac.dev so for the

00:12:13,519 --> 00:12:16,000
database there's something called cloud

00:12:15,120 --> 00:12:18,720
sql

00:12:16,000 --> 00:12:20,399
which is a managed mysql database finrac

00:12:18,720 --> 00:12:21,920
of course currently runs with mysql we

00:12:20,399 --> 00:12:23,760
don't support any other databases

00:12:21,920 --> 00:12:25,680
as of right now so we need that

00:12:23,760 --> 00:12:27,760
somewhere in in a cloud

00:12:25,680 --> 00:12:28,800
um and cloud sql is a managed database

00:12:27,760 --> 00:12:31,760
so the same thing that

00:12:28,800 --> 00:12:33,040
um i explained before about vms uh but

00:12:31,760 --> 00:12:34,240
long story short it's something that

00:12:33,040 --> 00:12:35,839
just runs a database and you don't have

00:12:34,240 --> 00:12:37,360
to care about backups and

00:12:35,839 --> 00:12:39,040
you know scaling up the database and

00:12:37,360 --> 00:12:42,240
monitoring the database this

00:12:39,040 --> 00:12:44,480
um this basically does that for you

00:12:42,240 --> 00:12:46,480
uh cloud storage is basically a place

00:12:44,480 --> 00:12:48,320
where documents can be uploaded

00:12:46,480 --> 00:12:50,160
so finrac supports attaching documents

00:12:48,320 --> 00:12:52,079
to customers and

00:12:50,160 --> 00:12:53,519
loans and things and they need to go

00:12:52,079 --> 00:12:56,079
somewhere you

00:12:53,519 --> 00:12:56,959
can't store them in a container that

00:12:56,079 --> 00:12:58,399
doesn't work

00:12:56,959 --> 00:13:00,480
probably this presentation is too short

00:12:58,399 --> 00:13:01,760
to explain the very technical details

00:13:00,480 --> 00:13:02,560
about this you need a place to store

00:13:01,760 --> 00:13:04,720
content

00:13:02,560 --> 00:13:06,079
and cloud storages for that and that's

00:13:04,720 --> 00:13:07,440
actually not fully implemented that's

00:13:06,079 --> 00:13:09,839
why it's in italics yet

00:13:07,440 --> 00:13:10,800
but there's like a long weekend's work

00:13:09,839 --> 00:13:14,000
left to get that

00:13:10,800 --> 00:13:16,560
fully done there is

00:13:14,000 --> 00:13:17,600
an environment for managing logs i'm

00:13:16,560 --> 00:13:18,880
going to speak about this a bit more

00:13:17,600 --> 00:13:21,120
with some details afterwards called

00:13:18,880 --> 00:13:22,959
cloud logging and cloudera reporting

00:13:21,120 --> 00:13:24,800
and there's something called cloud build

00:13:22,959 --> 00:13:25,360
which we use to build the container

00:13:24,800 --> 00:13:27,040
image

00:13:25,360 --> 00:13:29,839
something called container registry

00:13:27,040 --> 00:13:33,279
which keeps the image this is worthwhile

00:13:29,839 --> 00:13:35,200
to note because

00:13:33,279 --> 00:13:36,639
this is kind of an alternative to the

00:13:35,200 --> 00:13:38,880
docker hub image

00:13:36,639 --> 00:13:40,320
so many of you perhaps know already that

00:13:38,880 --> 00:13:43,279
finrac is running

00:13:40,320 --> 00:13:45,120
um continuous deployment into docker hub

00:13:43,279 --> 00:13:46,320
where the latest and greatest code is

00:13:45,120 --> 00:13:47,279
always available in a container on

00:13:46,320 --> 00:13:49,040
docker hub

00:13:47,279 --> 00:13:52,160
right now something i built a few months

00:13:49,040 --> 00:13:53,920
ago but you don't actually want your

00:13:52,160 --> 00:13:55,199
cloud environment to depend on that

00:13:53,920 --> 00:13:57,360
right you don't want to have a

00:13:55,199 --> 00:13:59,760
dependency to something like docker hub

00:13:57,360 --> 00:14:01,519
it could go down it might be less secure

00:13:59,760 --> 00:14:03,519
if you don't trust it

00:14:01,519 --> 00:14:05,360
for cloud deployment that you control

00:14:03,519 --> 00:14:06,880
you ideally want to build it from source

00:14:05,360 --> 00:14:10,160
and that's relatively easy to do with

00:14:06,880 --> 00:14:12,800
cloud build and container registry

00:14:10,160 --> 00:14:14,240
cloud monitoring yet another of these

00:14:12,800 --> 00:14:15,839
too many different things

00:14:14,240 --> 00:14:17,600
you need to get your head around to set

00:14:15,839 --> 00:14:19,760
this up there's a place where you can

00:14:17,600 --> 00:14:20,800
actually see metrics about the database

00:14:19,760 --> 00:14:24,639
that you're running

00:14:20,800 --> 00:14:28,000
the number of requests you get um the

00:14:24,639 --> 00:14:29,760
even inside the vm the java jvm you

00:14:28,000 --> 00:14:30,000
could check heap usage and whatever you

00:14:29,760 --> 00:14:32,079
like

00:14:30,000 --> 00:14:33,199
basically how much fun you want to have

00:14:32,079 --> 00:14:34,079
there how much time you want to invest

00:14:33,199 --> 00:14:36,079
to how

00:14:34,079 --> 00:14:37,519
deep you want to dig that's all possible

00:14:36,079 --> 00:14:39,279
with monitoring solutions

00:14:37,519 --> 00:14:41,199
and google cloud monitoring is a is one

00:14:39,279 --> 00:14:43,519
of those um

00:14:41,199 --> 00:14:44,480
google cloud firebase hosting last but

00:14:43,519 --> 00:14:47,360
not least is

00:14:44,480 --> 00:14:48,720
a way of hosting static content maybe

00:14:47,360 --> 00:14:49,680
i'll move here on here in the interest

00:14:48,720 --> 00:14:52,800
of time

00:14:49,680 --> 00:14:54,160
and start explaining details about some

00:14:52,800 --> 00:14:55,199
of these things from the top to the

00:14:54,160 --> 00:14:56,959
bottom

00:14:55,199 --> 00:14:58,399
so if we start at the front end and then

00:14:56,959 --> 00:14:59,760
dig yourself down at the application

00:14:58,399 --> 00:15:02,399
layer and maybe a few words about the

00:14:59,760 --> 00:15:06,399
database by the end of the presentation

00:15:02,399 --> 00:15:08,079
um the front end is of course the

00:15:06,399 --> 00:15:11,120
javascript based applications that we

00:15:08,079 --> 00:15:14,160
use in finrac to have user interfaces

00:15:11,120 --> 00:15:17,120
um i run them as well on finrac dev

00:15:14,160 --> 00:15:19,279
on these two urls they don't need a

00:15:17,120 --> 00:15:22,399
container right you don't need

00:15:19,279 --> 00:15:23,120
kubernetes or a cloud run or a app

00:15:22,399 --> 00:15:25,760
engine

00:15:23,120 --> 00:15:28,399
to just serve static html files that

00:15:25,760 --> 00:15:31,360
would be complete overkill obviously

00:15:28,399 --> 00:15:32,399
what's fun to do is to serve excuse me

00:15:31,360 --> 00:15:34,320
static web content

00:15:32,399 --> 00:15:35,920
from a worldwide content delivery

00:15:34,320 --> 00:15:37,600
network a cdn

00:15:35,920 --> 00:15:38,959
cdn is basically a place that you can

00:15:37,600 --> 00:15:41,440
throw static files on

00:15:38,959 --> 00:15:43,040
and then have them accessible http and

00:15:41,440 --> 00:15:44,880
they get sent to you

00:15:43,040 --> 00:15:46,639
from a content delivery network from a

00:15:44,880 --> 00:15:48,720
server that's close to you

00:15:46,639 --> 00:15:50,959
this makes more sense than running you

00:15:48,720 --> 00:15:53,440
know an apache server in a container

00:15:50,959 --> 00:15:54,720
or a nginx or whatever your favorite

00:15:53,440 --> 00:15:57,759
static html

00:15:54,720 --> 00:15:59,839
serving process is

00:15:57,759 --> 00:16:01,519
this is really easy to set up this

00:15:59,839 --> 00:16:02,959
firebase thing you can just basically

00:16:01,519 --> 00:16:04,079
upload a bunch of files and they appear

00:16:02,959 --> 00:16:06,720
on the url and

00:16:04,079 --> 00:16:09,360
get served to users from somewhere

00:16:06,720 --> 00:16:10,399
really close reducing initial page load

00:16:09,360 --> 00:16:12,160
time latency

00:16:10,399 --> 00:16:14,399
because they sort of come to you from

00:16:12,160 --> 00:16:17,680
whatever is close

00:16:14,399 --> 00:16:21,440
um this is right now

00:16:17,680 --> 00:16:22,399
these web apps of interact are static i

00:16:21,440 --> 00:16:24,160
basically

00:16:22,399 --> 00:16:25,920
a few months ago uploaded the current

00:16:24,160 --> 00:16:27,120
versions and made them available with

00:16:25,920 --> 00:16:30,000
the right urls

00:16:27,120 --> 00:16:31,040
um and something we'd like to do is that

00:16:30,000 --> 00:16:33,120
the community app

00:16:31,040 --> 00:16:34,480
and eventually the web app as well

00:16:33,120 --> 00:16:36,959
should be auto deployed

00:16:34,480 --> 00:16:38,720
on every change as well the initial

00:16:36,959 --> 00:16:39,839
focus of interact.dev was much more on

00:16:38,720 --> 00:16:41,600
the back end

00:16:39,839 --> 00:16:42,880
so this is kind of the last slide where

00:16:41,600 --> 00:16:43,920
where i'm talking about the front end if

00:16:42,880 --> 00:16:46,160
you're interested subscribe to these

00:16:43,920 --> 00:16:48,880
issues maybe even help if you have

00:16:46,160 --> 00:16:50,000
cycles and expertise to help especially

00:16:48,880 --> 00:16:51,680
in the web app there's a small

00:16:50,000 --> 00:16:53,120
change that's needed it's not actually

00:16:51,680 --> 00:16:54,959
possible today because the url is

00:16:53,120 --> 00:16:56,320
hard-coded

00:16:54,959 --> 00:16:58,000
not not something big but something

00:16:56,320 --> 00:17:00,399
needs to be sorted out before

00:16:58,000 --> 00:17:01,199
and we can switch to continuous delivery

00:17:00,399 --> 00:17:03,680
cd

00:17:01,199 --> 00:17:04,799
for the front end part speaking about

00:17:03,680 --> 00:17:08,640
cicd

00:17:04,799 --> 00:17:10,959
the back end the finrac api server

00:17:08,640 --> 00:17:12,400
is actually continuously deployed so

00:17:10,959 --> 00:17:15,280
that was one of the goals that i set out

00:17:12,400 --> 00:17:15,280
on the first slide

00:17:15,679 --> 00:17:21,919
we are actually able to have

00:17:19,199 --> 00:17:24,079
every pull request that's merged show up

00:17:21,919 --> 00:17:25,839
on finrac.dev live

00:17:24,079 --> 00:17:28,160
in i think it's about 10 minutes or

00:17:25,839 --> 00:17:31,280
maybe 12 or 30 minutes or something

00:17:28,160 --> 00:17:34,640
right now this

00:17:31,280 --> 00:17:37,200
should be easy in 2020 um

00:17:34,640 --> 00:17:39,120
it should take a few clicks to hook up a

00:17:37,200 --> 00:17:40,720
git repository to do a continuous

00:17:39,120 --> 00:17:43,440
integration build

00:17:40,720 --> 00:17:44,880
um triggering a continuous deployment to

00:17:43,440 --> 00:17:48,320
a server environment

00:17:44,880 --> 00:17:50,000
and this was surprisingly hard to do

00:17:48,320 --> 00:17:53,200
the theory is that there is something

00:17:50,000 --> 00:17:54,880
called a google cloud build github app

00:17:53,200 --> 00:17:56,240
so you can press a button and then you

00:17:54,880 --> 00:17:58,559
can install a github

00:17:56,240 --> 00:18:00,480
app into a git repository and then that

00:17:58,559 --> 00:18:02,400
watches for changes and then when

00:18:00,480 --> 00:18:03,919
every time somebody commits something a

00:18:02,400 --> 00:18:06,880
pull request is merged

00:18:03,919 --> 00:18:07,679
um it can trigger a build but that

00:18:06,880 --> 00:18:10,320
didn't work

00:18:07,679 --> 00:18:12,080
um the reason for that is that um apache

00:18:10,320 --> 00:18:15,039
software foundation hosted

00:18:12,080 --> 00:18:15,760
git repositories um don't accept that

00:18:15,039 --> 00:18:18,720
these

00:18:15,760 --> 00:18:20,400
github applications are installed so

00:18:18,720 --> 00:18:21,440
cloud bill or any other ones this

00:18:20,400 --> 00:18:23,360
problem came up

00:18:21,440 --> 00:18:25,120
in not just for this continuous

00:18:23,360 --> 00:18:26,720
deployment but it was also a problem for

00:18:25,120 --> 00:18:29,120
some of the code quality checks we

00:18:26,720 --> 00:18:30,960
wanted to set up there are some of these

00:18:29,120 --> 00:18:32,480
bots that check code every time you

00:18:30,960 --> 00:18:37,440
check them in they don't

00:18:32,480 --> 00:18:39,360
just work on asf repos because

00:18:37,440 --> 00:18:41,760
asf infra doesn't want to give write

00:18:39,360 --> 00:18:43,840
permission to asf reports which makes

00:18:41,760 --> 00:18:44,480
good sense right you don't want some bot

00:18:43,840 --> 00:18:46,000
that

00:18:44,480 --> 00:18:48,480
hasn't been voted in as a committer by a

00:18:46,000 --> 00:18:51,039
pmc to start changing code

00:18:48,480 --> 00:18:52,720
um i eventually found a way around this

00:18:51,039 --> 00:18:54,160
the full details of how exactly this

00:18:52,720 --> 00:18:56,240
works are a bit long but i have a

00:18:54,160 --> 00:18:57,520
blog post that explains the details

00:18:56,240 --> 00:18:59,840
essentially the

00:18:57,520 --> 00:19:00,640
the convoluted way around this is that

00:18:59,840 --> 00:19:03,760
um

00:19:00,640 --> 00:19:05,600
there is a github action on the

00:19:03,760 --> 00:19:07,280
finrective repo i can pull this up

00:19:05,600 --> 00:19:08,640
real quick now you probably won't see if

00:19:07,280 --> 00:19:10,480
i change tabs well

00:19:08,640 --> 00:19:12,960
click on this link if you want to see

00:19:10,480 --> 00:19:16,320
the details this github action

00:19:12,960 --> 00:19:17,679
triggers a cloud build and

00:19:16,320 --> 00:19:20,400
the problem by doing that is that you

00:19:17,679 --> 00:19:21,440
need to have this done in a secure way

00:19:20,400 --> 00:19:24,559
because the

00:19:21,440 --> 00:19:26,880
credentials to trigger a build

00:19:24,559 --> 00:19:28,160
inside the google cloud project with

00:19:26,880 --> 00:19:30,559
interac dev runs

00:19:28,160 --> 00:19:31,679
isn't necessarily something i'd like to

00:19:30,559 --> 00:19:33,520
um

00:19:31,679 --> 00:19:35,840
you know see abused by somebody just

00:19:33,520 --> 00:19:38,000
looking at the

00:19:35,840 --> 00:19:40,720
source code of the github action in the

00:19:38,000 --> 00:19:43,039
repo and so github has a way to support

00:19:40,720 --> 00:19:44,640
secrets and repos you can actually set a

00:19:43,039 --> 00:19:46,080
secret that can only be

00:19:44,640 --> 00:19:48,080
written once but that cannot be read

00:19:46,080 --> 00:19:49,039
back other than by actions and that's a

00:19:48,080 --> 00:19:51,200
great fit for this

00:19:49,039 --> 00:19:52,400
for managing a credential it's all

00:19:51,200 --> 00:19:55,200
described in a blog post i

00:19:52,400 --> 00:19:57,039
did it i think three months ago or so if

00:19:55,200 --> 00:19:59,679
you want the details about that

00:19:57,039 --> 00:20:00,960
with that any pr goes to production with

00:19:59,679 --> 00:20:03,840
zero toil

00:20:00,960 --> 00:20:04,480
zero manual work nobody has to press any

00:20:03,840 --> 00:20:07,760
buttons

00:20:04,480 --> 00:20:10,400
launch any scripts it just works

00:20:07,760 --> 00:20:11,600
continuously every time a polarquest

00:20:10,400 --> 00:20:12,960
gets merged

00:20:11,600 --> 00:20:14,400
the cool thing about this is that this

00:20:12,960 --> 00:20:16,240
includes scannering and rolling

00:20:14,400 --> 00:20:18,000
deployment so

00:20:16,240 --> 00:20:19,600
if somebody's using the finracta dev

00:20:18,000 --> 00:20:23,200
instance and somebody

00:20:19,600 --> 00:20:24,880
merges a change it looks like it

00:20:23,200 --> 00:20:27,600
doesn't come down it looks like there's

00:20:24,880 --> 00:20:29,679
no interruption because there's some

00:20:27,600 --> 00:20:30,640
magic going on thanks to again a managed

00:20:29,679 --> 00:20:32,720
environment

00:20:30,640 --> 00:20:34,080
and this is not something that only

00:20:32,720 --> 00:20:35,760
google cloud does kubernetes

00:20:34,080 --> 00:20:37,919
can do this if you take the time to set

00:20:35,760 --> 00:20:39,440
this up yourself but on a managed

00:20:37,919 --> 00:20:40,960
environment

00:20:39,440 --> 00:20:43,360
on a cloud this just works what it

00:20:40,960 --> 00:20:46,080
basically does is that it keeps running

00:20:43,360 --> 00:20:47,440
the old version of the app and keeps

00:20:46,080 --> 00:20:49,919
serving requests on that

00:20:47,440 --> 00:20:50,480
until the new version is completely up

00:20:49,919 --> 00:20:52,400
and running

00:20:50,480 --> 00:20:54,080
and it has some thing going on that

00:20:52,400 --> 00:20:55,520
makes sure it's really running and

00:20:54,080 --> 00:20:57,440
let's say if we merge the pull request

00:20:55,520 --> 00:21:00,400
that broke um

00:20:57,440 --> 00:21:01,679
the server the back end finrac this

00:21:00,400 --> 00:21:02,400
system will be smart enough to even

00:21:01,679 --> 00:21:04,480
detect that

00:21:02,400 --> 00:21:06,400
it actually would keep the old version

00:21:04,480 --> 00:21:06,799
and not roll over to the new version if

00:21:06,400 --> 00:21:08,240
that

00:21:06,799 --> 00:21:09,760
let's say just kept crashing or

00:21:08,240 --> 00:21:11,679
something like that that's pretty neat

00:21:09,760 --> 00:21:13,120
that's pretty neat

00:21:11,679 --> 00:21:14,880
talking about crashing and problems and

00:21:13,120 --> 00:21:17,760
things like that i worried about

00:21:14,880 --> 00:21:18,799
logging and error reporting and such so

00:21:17,760 --> 00:21:20,400
um

00:21:18,799 --> 00:21:22,720
i don't know if this is a huge surprise

00:21:20,400 --> 00:21:24,880
to anybody but log files are bad

00:21:22,720 --> 00:21:26,400
lock files are stupid applications that

00:21:24,880 --> 00:21:29,520
write log

00:21:26,400 --> 00:21:31,039
files are very 90s

00:21:29,520 --> 00:21:32,960
a cloud native application does actually

00:21:31,039 --> 00:21:34,400
not write log files a cloud native

00:21:32,960 --> 00:21:37,120
application just

00:21:34,400 --> 00:21:37,600
spews out what it has to say to stand it

00:21:37,120 --> 00:21:38,960
out

00:21:37,600 --> 00:21:40,720
if you want more background about why

00:21:38,960 --> 00:21:42,960
that is so and should be like that

00:21:40,720 --> 00:21:45,760
please read the 12factor.net

00:21:42,960 --> 00:21:46,320
and website which has 12 points that

00:21:45,760 --> 00:21:48,000
every

00:21:46,320 --> 00:21:49,360
self-respecting cloud native application

00:21:48,000 --> 00:21:51,679
should implement

00:21:49,360 --> 00:21:53,280
um the finrac container image is

00:21:51,679 --> 00:21:54,880
actually pre-configured now to not have

00:21:53,280 --> 00:21:56,320
a log file anymore and just print to

00:21:54,880 --> 00:21:59,120
stand it out

00:21:56,320 --> 00:22:01,039
most managed cloud environments um have

00:21:59,120 --> 00:22:03,120
some system or the other to capture that

00:22:01,039 --> 00:22:05,840
log output

00:22:03,120 --> 00:22:07,280
and do something with it the interesting

00:22:05,840 --> 00:22:08,240
thing is what you do with these logs

00:22:07,280 --> 00:22:09,840
once you have

00:22:08,240 --> 00:22:12,240
taken care of how they're managed and

00:22:09,840 --> 00:22:14,559
captured um

00:22:12,240 --> 00:22:15,520
nobody has should have should need to

00:22:14,559 --> 00:22:17,440
read logs right

00:22:15,520 --> 00:22:18,960
logs contain a bunch of information

00:22:17,440 --> 00:22:20,000
which you might want to look at if you

00:22:18,960 --> 00:22:22,240
have a problem

00:22:20,000 --> 00:22:23,760
but you shouldn't have to look at logs

00:22:22,240 --> 00:22:26,559
um things should just

00:22:23,760 --> 00:22:27,360
work if you start phenox it should just

00:22:26,559 --> 00:22:29,120
run

00:22:27,360 --> 00:22:31,600
and on the occasional case where there

00:22:29,120 --> 00:22:33,440
is a problem it should tell you about it

00:22:31,600 --> 00:22:35,760
if there is a you know null pointer

00:22:33,440 --> 00:22:37,520
exception or a legal state exception or

00:22:35,760 --> 00:22:39,520
a class cost exception or

00:22:37,520 --> 00:22:41,200
some real problem in the java code that

00:22:39,520 --> 00:22:45,360
would be interesting to know about

00:22:41,200 --> 00:22:48,000
but not that somebody you know

00:22:45,360 --> 00:22:49,520
did http gates on the client's rest api

00:22:48,000 --> 00:22:52,000
there's no need to really

00:22:49,520 --> 00:22:53,840
know much about that google cloud error

00:22:52,000 --> 00:22:55,600
reporting is pretty nice for that it

00:22:53,840 --> 00:22:58,960
analyzes log files

00:22:55,600 --> 00:22:59,760
and finds error logs and stack traces of

00:22:58,960 --> 00:23:01,600
error logs

00:22:59,760 --> 00:23:02,960
and allows you to track how often they

00:23:01,600 --> 00:23:05,120
occurred

00:23:02,960 --> 00:23:06,400
that's really neat i've actually been

00:23:05,120 --> 00:23:09,440
able to find

00:23:06,400 --> 00:23:12,720
meanwhile something between 30 and 40

00:23:09,440 --> 00:23:14,880
bugs in finrax just by observing

00:23:12,720 --> 00:23:16,480
what some of you have been doing on

00:23:14,880 --> 00:23:19,760
finrac.dev

00:23:16,480 --> 00:23:21,360
and having google cloud error reporting

00:23:19,760 --> 00:23:23,440
notify me each time there was an

00:23:21,360 --> 00:23:25,360
exception and

00:23:23,440 --> 00:23:26,640
we have these jira tickets open a good

00:23:25,360 --> 00:23:27,120
number of them have actually been fixed

00:23:26,640 --> 00:23:28,559
that's

00:23:27,120 --> 00:23:30,640
one of the many improvements that went

00:23:28,559 --> 00:23:31,840
into release 140

00:23:30,640 --> 00:23:33,200
and there's still some open ones if

00:23:31,840 --> 00:23:34,000
somebody wants to help with this this is

00:23:33,200 --> 00:23:35,840
a nice way to

00:23:34,000 --> 00:23:37,760
get engaged with the community and help

00:23:35,840 --> 00:23:39,039
us reduce some obvious errors that

00:23:37,760 --> 00:23:41,279
happen and that we've been able to

00:23:39,039 --> 00:23:44,720
observe on our demo instance

00:23:41,279 --> 00:23:47,600
this only really works if apps

00:23:44,720 --> 00:23:49,440
follow certain logging policies i've

00:23:47,600 --> 00:23:50,080
written up some login guidelines on the

00:23:49,440 --> 00:23:53,279
readme file

00:23:50,080 --> 00:23:54,480
of apache thinner act that are

00:23:53,279 --> 00:23:57,520
summarized here

00:23:54,480 --> 00:23:58,880
but basically errors should only be

00:23:57,520 --> 00:24:00,559
logged for things that are bugs in the

00:23:58,880 --> 00:24:02,240
application that can be fixed so

00:24:00,559 --> 00:24:03,760
there are a number of cases where we for

00:24:02,240 --> 00:24:05,360
example

00:24:03,760 --> 00:24:07,120
have some internal server errors that

00:24:05,360 --> 00:24:09,840
are caused by just simple

00:24:07,120 --> 00:24:10,480
wrong requests um these wrong requests

00:24:09,840 --> 00:24:11,919
are because

00:24:10,480 --> 00:24:13,840
somebody manually tried something out

00:24:11,919 --> 00:24:15,360
with postman or maybe a bug in an

00:24:13,840 --> 00:24:17,200
android app or something like that but

00:24:15,360 --> 00:24:18,880
there isn't anything that apache

00:24:17,200 --> 00:24:20,400
is the backhand can do about that right

00:24:18,880 --> 00:24:20,799
so those kind of conditions need to be

00:24:20,400 --> 00:24:25,279
sent

00:24:20,799 --> 00:24:27,520
back as errors to the client making the

00:24:25,279 --> 00:24:28,960
api request they don't need to be logged

00:24:27,520 --> 00:24:31,279
in the back end

00:24:28,960 --> 00:24:32,080
error reporting in technical terms what

00:24:31,279 --> 00:24:34,240
i'm trying to say here

00:24:32,080 --> 00:24:36,559
is that there's a class of errors that

00:24:34,240 --> 00:24:37,279
need to cause http 400 responses and the

00:24:36,559 --> 00:24:39,840
classifiers

00:24:37,279 --> 00:24:41,679
need to cause http 500 responses and

00:24:39,840 --> 00:24:42,880
sometimes we don't quite get that right

00:24:41,679 --> 00:24:44,799
um there's still work to be done in

00:24:42,880 --> 00:24:47,039
finrac to make this more more perfect

00:24:44,799 --> 00:24:49,440
and those 30-40 bucks that i mentioned

00:24:47,039 --> 00:24:51,200
uh a number of them is related to this

00:24:49,440 --> 00:24:52,799
the way this looks is like this

00:24:51,200 --> 00:24:54,559
on google cloud platform on this

00:24:52,799 --> 00:24:55,760
screenshot here of the back end of

00:24:54,559 --> 00:24:57,279
finrac.dev

00:24:55,760 --> 00:25:00,320
that i run you can see that in the last

00:24:57,279 --> 00:25:01,840
30 days we've had a number of exceptions

00:25:00,320 --> 00:25:03,919
for example when i took the screenshot

00:25:01,840 --> 00:25:05,360
three hours ago earlier in july

00:25:03,919 --> 00:25:07,520
i know this is the first occurrence in

00:25:05,360 --> 00:25:08,240
early july but a few days ago we still

00:25:07,520 --> 00:25:10,799
have

00:25:08,240 --> 00:25:12,159
journal entry invalid exceptions journal

00:25:10,799 --> 00:25:12,559
entry cannot be made prior to last

00:25:12,159 --> 00:25:14,799
account

00:25:12,559 --> 00:25:16,080
closing date this is the error that the

00:25:14,799 --> 00:25:17,520
scheduler runs into

00:25:16,080 --> 00:25:19,679
which in ideal world it shouldn't

00:25:17,520 --> 00:25:21,600
because we should catch this earlier

00:25:19,679 --> 00:25:22,960
and not even allow a journal entry to be

00:25:21,600 --> 00:25:24,320
made prior to its

00:25:22,960 --> 00:25:25,679
account closing date this is an

00:25:24,320 --> 00:25:27,279
improvement that i'm hoping sooner or

00:25:25,679 --> 00:25:29,919
later we'll be able to make finrac

00:25:27,279 --> 00:25:31,520
which will then mean that these 1041

00:25:29,919 --> 00:25:35,120
occurrences of this error

00:25:31,520 --> 00:25:35,120
on the back end will not happen anymore

00:25:35,360 --> 00:25:39,360
or a illegal steel exception no not a

00:25:38,080 --> 00:25:42,400
json array brazil

00:25:39,360 --> 00:25:44,480
this is a an example of something that

00:25:42,400 --> 00:25:45,440
should be an error 400 on there 500.

00:25:44,480 --> 00:25:48,880
somebody sent

00:25:45,440 --> 00:25:52,320
a api request there where brazil was not

00:25:48,880 --> 00:25:54,000
in a square bracket for a

00:25:52,320 --> 00:25:55,440
a json array this shouldn't be as

00:25:54,000 --> 00:25:56,000
internal server error there's absolutely

00:25:55,440 --> 00:25:57,760
nothing we

00:25:56,000 --> 00:25:59,200
can do to fix this error the only thing

00:25:57,760 --> 00:25:59,760
we can do is to improve the error

00:25:59,200 --> 00:26:01,679
handling

00:25:59,760 --> 00:26:03,120
to return this mode correctly and we've

00:26:01,679 --> 00:26:04,400
had a number of contributions petri has

00:26:03,120 --> 00:26:07,039
done a great job on this just

00:26:04,400 --> 00:26:11,520
another fix i think went in yesterday to

00:26:07,039 --> 00:26:13,440
help with some of these problems

00:26:11,520 --> 00:26:14,960
this for example sql state exception

00:26:13,440 --> 00:26:15,760
this is an actual problem in our data

00:26:14,960 --> 00:26:17,679
layer right

00:26:15,760 --> 00:26:19,520
there's some queries here which under

00:26:17,679 --> 00:26:21,039
some condition doesn't quite work

00:26:19,520 --> 00:26:22,720
so this is something worth following up

00:26:21,039 --> 00:26:24,799
every time i see one of those

00:26:22,720 --> 00:26:27,120
i create a jira issue to help the

00:26:24,799 --> 00:26:29,200
community to

00:26:27,120 --> 00:26:30,400
improve our code and get better how do i

00:26:29,200 --> 00:26:33,200
see these issues

00:26:30,400 --> 00:26:34,720
um i actually got woken up in the middle

00:26:33,200 --> 00:26:36,240
of the night on my phone about them i'm

00:26:34,720 --> 00:26:38,159
just joking i don't actually get woken

00:26:36,240 --> 00:26:39,679
up because i set this to silent but i

00:26:38,159 --> 00:26:42,000
actually have a mobile app

00:26:39,679 --> 00:26:43,440
from google cloud error reporting which

00:26:42,000 --> 00:26:46,960
pops up every time

00:26:43,440 --> 00:26:48,159
somebody does a request to the finrac

00:26:46,960 --> 00:26:50,880
dot dev demo server

00:26:48,159 --> 00:26:51,520
which causes an exception this is pretty

00:26:50,880 --> 00:26:54,960
neat

00:26:51,520 --> 00:26:58,640
um it's one of the ways in which

00:26:54,960 --> 00:27:02,799
you can do professional monitoring of a

00:26:58,640 --> 00:27:04,320
server a deployment such as finrac.dev

00:27:02,799 --> 00:27:06,320
some of the things i'm showing here are

00:27:04,320 --> 00:27:08,880
part of a

00:27:06,320 --> 00:27:10,000
an approach of running production

00:27:08,880 --> 00:27:13,200
services which is called

00:27:10,000 --> 00:27:16,400
sre site reliability engineering

00:27:13,200 --> 00:27:19,440
it's a practice that all of the big

00:27:16,400 --> 00:27:20,000
cloud vendors use internally to make

00:27:19,440 --> 00:27:21,840
sure that

00:27:20,000 --> 00:27:23,919
their environments keep running so at

00:27:21,840 --> 00:27:24,240
google their sres who make sure that you

00:27:23,919 --> 00:27:26,240
know

00:27:24,240 --> 00:27:28,080
gmail runs and works all the time and

00:27:26,240 --> 00:27:30,640
they actually do get woken up at night

00:27:28,080 --> 00:27:32,000
when gmail is down some of the things

00:27:30,640 --> 00:27:33,440
that i'm mentioning here are fairly

00:27:32,000 --> 00:27:36,559
similar to what

00:27:33,440 --> 00:27:36,559
sres use at

00:27:36,640 --> 00:27:40,480
cloud companies or at twitter or anybody

00:27:38,880 --> 00:27:42,080
basically who maintains website and

00:27:40,480 --> 00:27:43,600
production

00:27:42,080 --> 00:27:45,520
at the very end of the presentation is a

00:27:43,600 --> 00:27:49,600
book tip for how to learn more about the

00:27:45,520 --> 00:27:52,480
practice of sre

00:27:49,600 --> 00:27:53,120
metrics are an important point of of

00:27:52,480 --> 00:27:54,799
this

00:27:53,120 --> 00:27:56,240
way of running a production environment

00:27:54,799 --> 00:27:58,559
right you don't want to

00:27:56,240 --> 00:28:00,080
check if your server is running by

00:27:58,559 --> 00:28:02,480
yourself testing something you want to

00:28:00,080 --> 00:28:04,960
have a system that checks that so on

00:28:02,480 --> 00:28:05,600
google cloud monitoring you can set up

00:28:04,960 --> 00:28:08,159
metrics

00:28:05,600 --> 00:28:09,440
that check how your server is doing and

00:28:08,159 --> 00:28:11,039
this is an example here

00:28:09,440 --> 00:28:15,120
we can see here that the finrec.dev

00:28:11,039 --> 00:28:17,760
server has had 99.996 percent uptime

00:28:15,120 --> 00:28:19,360
over the last what's the time frame here

00:28:17,760 --> 00:28:22,880
last month i think

00:28:19,360 --> 00:28:24,799
that's pretty neat and

00:28:22,880 --> 00:28:26,080
shows that this is a fairly reliable

00:28:24,799 --> 00:28:28,000
server right

00:28:26,080 --> 00:28:29,919
there must have been one outage for a

00:28:28,000 --> 00:28:32,240
few minutes at some point

00:28:29,919 --> 00:28:33,120
where probably something got upgraded i

00:28:32,240 --> 00:28:34,559
suspect that would have been the

00:28:33,120 --> 00:28:37,520
database

00:28:34,559 --> 00:28:40,240
that caused that zero zero four percent

00:28:37,520 --> 00:28:44,640
uh downtime

00:28:40,240 --> 00:28:48,000
um the way this particular uptime metric

00:28:44,640 --> 00:28:48,799
checks work works is that it basically

00:28:48,000 --> 00:28:51,200
every

00:28:48,799 --> 00:28:52,000
what i set up here every 300 seconds

00:28:51,200 --> 00:28:55,600
every five

00:28:52,000 --> 00:28:56,720
minutes it does an http get of all the

00:28:55,600 --> 00:28:59,200
clients

00:28:56,720 --> 00:29:00,960
and it expects the response to contain

00:28:59,200 --> 00:29:03,840
total filtered records

00:29:00,960 --> 00:29:04,399
if that were to not work then this would

00:29:03,840 --> 00:29:07,279
show up

00:29:04,399 --> 00:29:08,000
as an error and as a spike here as a not

00:29:07,279 --> 00:29:09,440
passed check

00:29:08,000 --> 00:29:11,200
it will actually pop up on the mobile

00:29:09,440 --> 00:29:14,559
app as well and

00:29:11,200 --> 00:29:17,600
wake me up at night or not and um

00:29:14,559 --> 00:29:19,279
uh measures uh the response time to this

00:29:17,600 --> 00:29:21,120
as well so this is something

00:29:19,279 --> 00:29:23,039
that you can figure actually set this up

00:29:21,120 --> 00:29:24,080
to do it it doesn't just magically know

00:29:23,039 --> 00:29:26,159
what it has to do

00:29:24,080 --> 00:29:28,320
and this is just a first example of a

00:29:26,159 --> 00:29:29,520
metric you can set metrics for anything

00:29:28,320 --> 00:29:32,320
you want you could

00:29:29,520 --> 00:29:32,960
check on you know database response

00:29:32,320 --> 00:29:35,840
times

00:29:32,960 --> 00:29:36,640
or i don't know memory consumption on

00:29:35,840 --> 00:29:38,640
the jvm

00:29:36,640 --> 00:29:41,840
or basically a few clicks you can you

00:29:38,640 --> 00:29:41,840
can set up any metric you like here

00:29:41,919 --> 00:29:48,799
these are just for illustration a few

00:29:45,120 --> 00:29:50,399
metrics um that you can monitor

00:29:48,799 --> 00:29:51,919
these sort of come out of the box this

00:29:50,399 --> 00:29:53,039
takes like 10 minutes to set up or

00:29:51,919 --> 00:29:56,080
something

00:29:53,039 --> 00:29:56,799
this shows i think cpu utilization of

00:29:56,080 --> 00:29:59,760
the

00:29:56,799 --> 00:30:01,120
app engine so that the java container

00:29:59,760 --> 00:30:04,640
sent bytes

00:30:01,120 --> 00:30:07,919
so it looks like the

00:30:04,640 --> 00:30:10,080
get clients response is about 6k

00:30:07,919 --> 00:30:13,039
kilobytes 6000 bytes long

00:30:10,080 --> 00:30:14,480
because every few minutes we get about 6

00:30:13,039 --> 00:30:17,600
000 bytes that are sent back

00:30:14,480 --> 00:30:21,200
that's probably the the 5 minute

00:30:17,600 --> 00:30:23,600
polar there and on our demo instance

00:30:21,200 --> 00:30:24,320
the sql queries are really low right

00:30:23,600 --> 00:30:26,640
this is

00:30:24,320 --> 00:30:27,919
this is peanuts we got a couple of

00:30:26,640 --> 00:30:29,279
queries um

00:30:27,919 --> 00:30:31,440
every second this is not a production

00:30:29,279 --> 00:30:33,520
instance this would look different on a

00:30:31,440 --> 00:30:34,480
an environment which was more seriously

00:30:33,520 --> 00:30:38,080
hammered

00:30:34,480 --> 00:30:38,960
and used basically how am i doing on

00:30:38,080 --> 00:30:41,600
time

00:30:38,960 --> 00:30:42,880
i think about 10 minutes or so left i

00:30:41,600 --> 00:30:44,720
probably need to speed up a bit

00:30:42,880 --> 00:30:46,080
uh security security is always an

00:30:44,720 --> 00:30:46,960
interesting topic what's there to say

00:30:46,080 --> 00:30:50,159
about security

00:30:46,960 --> 00:30:54,000
on a managed environment i think in

00:30:50,159 --> 00:30:56,159
something like finrac.dev there's a huge

00:30:54,000 --> 00:30:57,120
line in security in a managed

00:30:56,159 --> 00:30:58,399
environment

00:30:57,120 --> 00:31:00,159
you have the security of the

00:30:58,399 --> 00:31:00,799
infrastructure stack which is much more

00:31:00,159 --> 00:31:03,919
to do

00:31:00,799 --> 00:31:05,200
with how the so the managed environment

00:31:03,919 --> 00:31:07,039
deals with security and then you have

00:31:05,200 --> 00:31:07,840
the application security which has

00:31:07,039 --> 00:31:09,440
everything to do

00:31:07,840 --> 00:31:11,120
with apache interact and nothing with

00:31:09,440 --> 00:31:12,320
google cloud let's talk about these two

00:31:11,120 --> 00:31:15,120
separately

00:31:12,320 --> 00:31:16,640
um in terms of infrastructure security

00:31:15,120 --> 00:31:18,559
uh so google cloud

00:31:16,640 --> 00:31:20,799
um generally speaking i think a managed

00:31:18,559 --> 00:31:22,159
platform makes security easier than if

00:31:20,799 --> 00:31:23,840
you run

00:31:22,159 --> 00:31:25,440
you know your own vm where you install

00:31:23,840 --> 00:31:26,799
mysql yourself and things like that the

00:31:25,440 --> 00:31:28,559
managed platform

00:31:26,799 --> 00:31:31,279
provider whoever runs that managed

00:31:28,559 --> 00:31:32,559
platform makes it

00:31:31,279 --> 00:31:34,399
takes care of some of the security

00:31:32,559 --> 00:31:36,640
concerns for you um

00:31:34,399 --> 00:31:38,080
it doesn't mean that it's secure right

00:31:36,640 --> 00:31:39,519
security is not something you can't be

00:31:38,080 --> 00:31:42,960
secure or not secure

00:31:39,519 --> 00:31:45,519
security is is is a

00:31:42,960 --> 00:31:46,320
grayscale thing left to right you can be

00:31:45,519 --> 00:31:48,080
more secure

00:31:46,320 --> 00:31:49,919
you can be less secure even in a managed

00:31:48,080 --> 00:31:53,039
environment that takes care of security

00:31:49,919 --> 00:31:55,679
you can do something really stupid like

00:31:53,039 --> 00:31:56,399
um on google cloud when you set up a

00:31:55,679 --> 00:32:00,000
managed

00:31:56,399 --> 00:32:02,960
um cloud sql mysql database

00:32:00,000 --> 00:32:03,519
it gets a public ip that's not a good

00:32:02,960 --> 00:32:07,039
idea

00:32:03,519 --> 00:32:09,919
there's really no reason why your mysql

00:32:07,039 --> 00:32:12,480
database should have a public ip

00:32:09,919 --> 00:32:13,679
you don't want that that's not the point

00:32:12,480 --> 00:32:18,720
right you have finrack

00:32:13,679 --> 00:32:18,720
which is the gateway to the database so

00:32:18,840 --> 00:32:22,880
demo.finrac.dev has a public ip

00:32:21,039 --> 00:32:24,720
but the mysql database that's running on

00:32:22,880 --> 00:32:25,200
financialf does not have a public ip so

00:32:24,720 --> 00:32:26,880
you gotta

00:32:25,200 --> 00:32:28,799
take care a little bit and know what

00:32:26,880 --> 00:32:30,960
you're doing there

00:32:28,799 --> 00:32:32,240
even on a managed platform but i don't

00:32:30,960 --> 00:32:35,120
think it makes it a little easier and if

00:32:32,240 --> 00:32:35,120
you do everything yourself

00:32:35,440 --> 00:32:39,440
and then it's the whole credential story

00:32:37,840 --> 00:32:42,159
so

00:32:39,440 --> 00:32:43,279
uh google google or any other cloud

00:32:42,159 --> 00:32:46,399
provider can do

00:32:43,279 --> 00:32:49,840
anything they want to

00:32:46,399 --> 00:32:51,600
secure your cloud deployment

00:32:49,840 --> 00:32:54,240
if you again don't know what you're

00:32:51,600 --> 00:32:56,799
doing and you screw something up in your

00:32:54,240 --> 00:32:58,080
credential with which you use and

00:32:56,799 --> 00:33:01,440
administer

00:32:58,080 --> 00:33:04,159
that cloud deployment is not safe

00:33:01,440 --> 00:33:06,000
then you're you're in trouble um if this

00:33:04,159 --> 00:33:07,919
sounds like i'm paranoid um

00:33:06,000 --> 00:33:10,000
which i'm paid to be at work so i am

00:33:07,919 --> 00:33:13,279
paranoid but i'm paranoid for a reason

00:33:10,000 --> 00:33:17,120
because these things happen um the

00:33:13,279 --> 00:33:20,080
google cloud test project account key

00:33:17,120 --> 00:33:22,320
for a previous google cloud project that

00:33:20,080 --> 00:33:24,799
is not related to finrac.def but

00:33:22,320 --> 00:33:25,360
we had a this was two years ago i think

00:33:24,799 --> 00:33:28,559
um

00:33:25,360 --> 00:33:29,840
we had a as an intern working with us to

00:33:28,559 --> 00:33:32,880
uh basically explore

00:33:29,840 --> 00:33:36,159
finrax cn deployment to google cloud

00:33:32,880 --> 00:33:37,760
and the account credential for that

00:33:36,159 --> 00:33:39,360
cloud deployment actually leaked to

00:33:37,760 --> 00:33:40,960
github so

00:33:39,360 --> 00:33:42,480
basically somebody with a bit of

00:33:40,960 --> 00:33:44,159
interest there and believe me there are

00:33:42,480 --> 00:33:46,640
people that put interest in this

00:33:44,159 --> 00:33:48,240
um could take over that project because

00:33:46,640 --> 00:33:50,320
the account credential

00:33:48,240 --> 00:33:52,640
json file for the service account was

00:33:50,320 --> 00:33:53,919
checked into github uh there isn't much

00:33:52,640 --> 00:33:54,960
a club right you can do actually there

00:33:53,919 --> 00:33:57,840
is some things that pop

00:33:54,960 --> 00:33:59,200
writers do this was actually detected by

00:33:57,840 --> 00:33:59,600
something that flagged this and said

00:33:59,200 --> 00:34:01,440
whoa

00:33:59,600 --> 00:34:02,799
there's a credential here checked into

00:34:01,440 --> 00:34:04,840
github this is a bad idea

00:34:02,799 --> 00:34:07,519
and we took care of it and i removed

00:34:04,840 --> 00:34:11,040
that but the same applies for local

00:34:07,519 --> 00:34:12,079
um like if your person who administers

00:34:11,040 --> 00:34:13,919
the cloud account

00:34:12,079 --> 00:34:15,440
has a windows machine that is as easily

00:34:13,919 --> 00:34:18,320
compromised as they are

00:34:15,440 --> 00:34:19,359
um and the cloud account credential gets

00:34:18,320 --> 00:34:22,960
um

00:34:19,359 --> 00:34:24,399
uh stolen there you can access anything

00:34:22,960 --> 00:34:25,599
on the cloud deployment that's

00:34:24,399 --> 00:34:27,280
it's not something infrastructure can

00:34:25,599 --> 00:34:28,800
solve let's move on to application

00:34:27,280 --> 00:34:30,480
security i really need to speed up a bit

00:34:28,800 --> 00:34:32,000
heavier it's possible i go slightly over

00:34:30,480 --> 00:34:34,240
time i hope that's okay

00:34:32,000 --> 00:34:35,839
um we'll just start above five minutes

00:34:34,240 --> 00:34:37,359
late

00:34:35,839 --> 00:34:38,560
at the application level i think there's

00:34:37,359 --> 00:34:39,919
a number of things this now has

00:34:38,560 --> 00:34:41,280
everything to do with finrac and nothing

00:34:39,919 --> 00:34:44,320
to do with the cloud

00:34:41,280 --> 00:34:48,159
um managed environment um

00:34:44,320 --> 00:34:51,119
we actually had an issue in um

00:34:48,159 --> 00:34:52,159
that we fixed infinite 140 where

00:34:51,119 --> 00:34:55,200
credentials were

00:34:52,159 --> 00:34:58,640
appearing in the url which is kind of

00:34:55,200 --> 00:35:01,200
stupid it means every intermediate proxy

00:34:58,640 --> 00:35:01,839
everything at your isp can theoretically

00:35:01,200 --> 00:35:03,839
intercept

00:35:01,839 --> 00:35:05,200
those um those credentials even if you

00:35:03,839 --> 00:35:08,320
use https because

00:35:05,200 --> 00:35:11,119
the url in https um

00:35:08,320 --> 00:35:12,560
ssl the urls is not encrypted that's

00:35:11,119 --> 00:35:14,640
something we fixed in finra

00:35:12,560 --> 00:35:17,119
f140 that alone is a reason for

00:35:14,640 --> 00:35:18,960
everybody to upgrade to 140 immediately

00:35:17,119 --> 00:35:21,680
but that is of course your call when you

00:35:18,960 --> 00:35:25,680
upgrade and how you upgrade

00:35:21,680 --> 00:35:26,320
um there is always a potential for sql

00:35:25,680 --> 00:35:28,640
injections

00:35:26,320 --> 00:35:30,000
in an application like finrac or any

00:35:28,640 --> 00:35:33,040
sort of back-end application

00:35:30,000 --> 00:35:33,040
it offers a rest api

00:35:34,000 --> 00:35:37,359
this is an area where we can still do a

00:35:36,240 --> 00:35:38,880
little better in we

00:35:37,359 --> 00:35:41,599
i think solve some problems but there's

00:35:38,880 --> 00:35:42,400
probably some left mountain our g-sucks

00:35:41,599 --> 00:35:44,079
intern is

00:35:42,400 --> 00:35:46,800
doing some great work around that to

00:35:44,079 --> 00:35:47,200
replace some string concatenations with

00:35:46,800 --> 00:35:49,920
some

00:35:47,200 --> 00:35:49,920
sql builder

00:35:50,880 --> 00:35:53,680
and help on that is of course very

00:35:52,400 --> 00:35:55,520
welcome if anybody listening to this

00:35:53,680 --> 00:35:57,440
presentation is a finrac user who would

00:35:55,520 --> 00:35:58,400
like to contribute to application level

00:35:57,440 --> 00:35:59,680
security

00:35:58,400 --> 00:36:01,200
please reach out there's definitely

00:35:59,680 --> 00:36:01,920
things we can point you to that you

00:36:01,200 --> 00:36:05,440
could help with

00:36:01,920 --> 00:36:05,440
in in apache interact

00:36:05,920 --> 00:36:12,000
weak passwords finrac offers

00:36:10,160 --> 00:36:13,520
two-factor authentication or auth

00:36:12,000 --> 00:36:16,079
integration um

00:36:13,520 --> 00:36:16,800
to combat the security threat weak

00:36:16,079 --> 00:36:18,079
passwords

00:36:16,800 --> 00:36:19,920
i think that's an area where we could do

00:36:18,079 --> 00:36:20,880
with some better documentation exactly

00:36:19,920 --> 00:36:23,839
how to set that up

00:36:20,880 --> 00:36:25,760
and how to use that um isn't super

00:36:23,839 --> 00:36:27,920
clearly documented and that's

00:36:25,760 --> 00:36:31,119
another area where community

00:36:27,920 --> 00:36:32,880
contributions would be great

00:36:31,119 --> 00:36:34,560
and you never you don't know what you

00:36:32,880 --> 00:36:36,720
don't know right that's a stupid old

00:36:34,560 --> 00:36:40,160
saying but

00:36:36,720 --> 00:36:42,640
any application can have basically just

00:36:40,160 --> 00:36:44,320
programming bugs um so i'm not saying

00:36:42,640 --> 00:36:45,839
finrac has any and in fact to my

00:36:44,320 --> 00:36:47,599
knowledge i'm not aware of any

00:36:45,839 --> 00:36:49,280
because we would have fixed them if we

00:36:47,599 --> 00:36:52,720
were aware of some big ones

00:36:49,280 --> 00:36:54,720
but um what i'm saying here is that in

00:36:52,720 --> 00:36:56,720
terms of talking about the security of a

00:36:54,720 --> 00:36:57,760
cloud deployment such as the finrac.dev

00:36:56,720 --> 00:36:59,200
demo

00:36:57,760 --> 00:37:01,040
at the infrastructure level that's what

00:36:59,200 --> 00:37:02,000
we spoke about so far at the application

00:37:01,040 --> 00:37:03,599
level

00:37:02,000 --> 00:37:05,119
there there can be problems i'm not

00:37:03,599 --> 00:37:05,520
trying to be alarmist or something here

00:37:05,119 --> 00:37:08,400
just

00:37:05,520 --> 00:37:11,119
distinguishing the different layers of

00:37:08,400 --> 00:37:14,160
where security problems can arise

00:37:11,119 --> 00:37:15,839
and just to sound like a broken record

00:37:14,160 --> 00:37:18,000
help and security is always very welcome

00:37:15,839 --> 00:37:20,000
right anybody contributing

00:37:18,000 --> 00:37:22,079
investigations into this and wanting to

00:37:20,000 --> 00:37:24,240
help fixing things in this area

00:37:22,079 --> 00:37:25,200
great way to contribute all right moving

00:37:24,240 --> 00:37:28,400
on

00:37:25,200 --> 00:37:29,839
done with security um scalability let's

00:37:28,400 --> 00:37:32,480
talk a little bit about

00:37:29,839 --> 00:37:34,320
scale and finrac.dev and how how does

00:37:32,480 --> 00:37:37,359
this um

00:37:34,320 --> 00:37:39,040
how well does this scale so finract is

00:37:37,359 --> 00:37:40,160
stateless and finract can scale

00:37:39,040 --> 00:37:42,560
horizontally

00:37:40,160 --> 00:37:44,720
um it would be relatively trivial to set

00:37:42,560 --> 00:37:45,920
up finrac.dev to basically start serving

00:37:44,720 --> 00:37:48,160
requests from

00:37:45,920 --> 00:37:49,839
more instances more containers on app

00:37:48,160 --> 00:37:50,560
engine and i haven't done it because

00:37:49,839 --> 00:37:52,240
there aren't

00:37:50,560 --> 00:37:53,599
many many requests it's a demo instance

00:37:52,240 --> 00:37:55,359
that people occasionally use

00:37:53,599 --> 00:37:57,040
but that would be one way of achieving

00:37:55,359 --> 00:37:59,040
scalability

00:37:57,040 --> 00:38:00,079
another way would be to break up the

00:37:59,040 --> 00:38:02,800
application

00:38:00,079 --> 00:38:03,680
um create you know microservices where

00:38:02,800 --> 00:38:07,119
every

00:38:03,680 --> 00:38:09,599
api runs in a separate container

00:38:07,119 --> 00:38:12,079
i'm personally not entirely convinced

00:38:09,599 --> 00:38:14,400
that's um

00:38:12,079 --> 00:38:16,160
strictly necessary and sort of justifies

00:38:14,400 --> 00:38:17,599
a rewrite of interact but that's a

00:38:16,160 --> 00:38:20,320
discussion that's not

00:38:17,599 --> 00:38:22,079
the purpose of this presentation here i

00:38:20,320 --> 00:38:23,839
do think that modularity in code is much

00:38:22,079 --> 00:38:26,960
more important as a first step

00:38:23,839 --> 00:38:29,200
towards a future architecture

00:38:26,960 --> 00:38:30,480
but i'm diverging slightly from the the

00:38:29,200 --> 00:38:32,000
main

00:38:30,480 --> 00:38:35,200
point of this particular presentation

00:38:32,000 --> 00:38:37,280
here um something that i do

00:38:35,200 --> 00:38:38,960
feel is worthwhile to throw in here in

00:38:37,280 --> 00:38:41,119
the discussion of you know do you need

00:38:38,960 --> 00:38:42,160
microservices to have a scalable cloud

00:38:41,119 --> 00:38:43,920
native architecture

00:38:42,160 --> 00:38:45,280
i think some people might be surprised

00:38:43,920 --> 00:38:47,280
how many um

00:38:45,280 --> 00:38:48,480
proprietary very well selling core

00:38:47,280 --> 00:38:51,920
banking solutions

00:38:48,480 --> 00:38:54,079
um are very monolithic right you

00:38:51,920 --> 00:38:55,119
might be surprised to know how

00:38:54,079 --> 00:38:58,400
monolithic

00:38:55,119 --> 00:39:02,320
some backends of some very very large

00:38:58,400 --> 00:39:04,079
internet services are uh it's sometimes

00:39:02,320 --> 00:39:06,560
easy to sort of read the latest

00:39:04,079 --> 00:39:07,839
literature and get into like whoa

00:39:06,560 --> 00:39:10,000
everything has to be a microservice

00:39:07,839 --> 00:39:13,040
let's break everything down into 100

00:39:10,000 --> 00:39:15,280
small pieces where every rest api runs

00:39:13,040 --> 00:39:16,240
in a separate microservice there's a

00:39:15,280 --> 00:39:19,200
balance there and

00:39:16,240 --> 00:39:20,560
yeah long discussion um the point of

00:39:19,200 --> 00:39:22,240
this slide is to say that i think

00:39:20,560 --> 00:39:24,320
finrac.dev is fine as a

00:39:22,240 --> 00:39:25,839
as a demo environment of the finrax 1.x

00:39:24,320 --> 00:39:28,480
architecture

00:39:25,839 --> 00:39:30,720
without requiring microservices

00:39:28,480 --> 00:39:34,400
something that is not fine

00:39:30,720 --> 00:39:34,400
that needs

00:39:34,640 --> 00:39:37,680
that you need to know about if you have

00:39:35,920 --> 00:39:41,119
any interest in the topic of

00:39:37,680 --> 00:39:44,079
deploying finract in a

00:39:41,119 --> 00:39:45,200
scalable way on a cloud environment or

00:39:44,079 --> 00:39:46,880
it's actually not really related to

00:39:45,200 --> 00:39:50,079
cloud even if you run a server

00:39:46,880 --> 00:39:50,880
um in your basement for your mfi or for

00:39:50,079 --> 00:39:53,599
your

00:39:50,880 --> 00:39:54,480
institution is this whole jdbc driver

00:39:53,599 --> 00:39:57,280
story

00:39:54,480 --> 00:39:57,920
so finrax ships with the drizzle jdbc

00:39:57,280 --> 00:40:01,119
driver

00:39:57,920 --> 00:40:02,880
that's an unmaintained project you

00:40:01,119 --> 00:40:04,640
absolutely should switch that out

00:40:02,880 --> 00:40:07,680
against a modern

00:40:04,640 --> 00:40:11,119
latest mariadb

00:40:07,680 --> 00:40:12,079
or mysql jdbc connector i think mariadb

00:40:11,119 --> 00:40:15,359
is the way to go there

00:40:12,079 --> 00:40:17,440
so the mariadb connector j

00:40:15,359 --> 00:40:19,119
is highly recommended as a gdbc driver

00:40:17,440 --> 00:40:22,400
instead of drizzle

00:40:19,119 --> 00:40:24,240
in fact the apache sorry the finrac

00:40:22,400 --> 00:40:25,680
container actually includes such an

00:40:24,240 --> 00:40:28,160
alternative

00:40:25,680 --> 00:40:30,319
jdbc driver you just have to configure

00:40:28,160 --> 00:40:30,319
it

00:40:30,400 --> 00:40:35,200
thinner act 982gr issue is an idea to

00:40:33,520 --> 00:40:36,960
completely remove drizzle

00:40:35,200 --> 00:40:38,880
it's a long and complicated story we

00:40:36,960 --> 00:40:42,800
don't have time to go in here

00:40:38,880 --> 00:40:45,920
related to open source licensing

00:40:42,800 --> 00:40:47,760
of apache server foundation hosted

00:40:45,920 --> 00:40:48,960
projects

00:40:47,760 --> 00:40:51,200
but but definitely something worth

00:40:48,960 --> 00:40:53,839
mentioning in context of

00:40:51,200 --> 00:40:55,440
scalability in cloud if we want to push

00:40:53,839 --> 00:40:57,680
this a little further on the database

00:40:55,440 --> 00:40:57,680
side

00:40:57,839 --> 00:41:01,920
i've not done any any scalability tests

00:41:00,079 --> 00:41:04,160
here but

00:41:01,920 --> 00:41:06,480
general anecdotal evidence and

00:41:04,160 --> 00:41:08,720
experience of

00:41:06,480 --> 00:41:09,599
other cloud-based systems suggests that

00:41:08,720 --> 00:41:11,760
if we

00:41:09,599 --> 00:41:13,839
were interested in scaling up finrac

00:41:11,760 --> 00:41:16,079
much more

00:41:13,839 --> 00:41:17,680
the likely bottleneck that would emerge

00:41:16,079 --> 00:41:19,760
after we took care of some low-hanging

00:41:17,680 --> 00:41:21,440
fruits i'm pretty sure that there is

00:41:19,760 --> 00:41:23,920
easy low hanging fruits that we can deal

00:41:21,440 --> 00:41:28,560
with with like adding missing

00:41:23,920 --> 00:41:30,480
indices to sql columns and

00:41:28,560 --> 00:41:31,920
very likely some problems in the java

00:41:30,480 --> 00:41:33,119
code there's probably some performance

00:41:31,920 --> 00:41:35,040
tuning we can do by

00:41:33,119 --> 00:41:36,800
profiling a java code but sooner or

00:41:35,040 --> 00:41:38,880
later we will probably discover that

00:41:36,800 --> 00:41:40,480
a mysql database is a performance issue

00:41:38,880 --> 00:41:42,079
because the mysql database does not

00:41:40,480 --> 00:41:43,920
scale out

00:41:42,079 --> 00:41:46,640
horizontally like the application

00:41:43,920 --> 00:41:46,640
container does

00:41:47,119 --> 00:41:52,960
there are a couple of takes on this um

00:41:50,319 --> 00:41:54,000
one thing that i'm i don't know much

00:41:52,960 --> 00:41:56,000
about

00:41:54,000 --> 00:41:59,440
the scale that some of you are

00:41:56,000 --> 00:42:01,680
interested in in running finrak at

00:41:59,440 --> 00:42:04,000
i know that at least on a managed

00:42:01,680 --> 00:42:06,000
environment such as a google cloud sql

00:42:04,000 --> 00:42:07,359
you can create a pretty large database

00:42:06,000 --> 00:42:09,280
so i think

00:42:07,359 --> 00:42:10,960
the low hanging fruit here is to say

00:42:09,280 --> 00:42:11,839
well if your database starts to become

00:42:10,960 --> 00:42:14,480
your bottleneck

00:42:11,839 --> 00:42:16,319
you can click a button and get a larger

00:42:14,480 --> 00:42:18,000
database machine type

00:42:16,319 --> 00:42:20,000
you can get a really large database

00:42:18,000 --> 00:42:23,040
machine type on google cloud

00:42:20,000 --> 00:42:26,319
very easily costs but if you

00:42:23,040 --> 00:42:26,960
run a huge production environment with i

00:42:26,319 --> 00:42:30,319
don't know

00:42:26,960 --> 00:42:32,000
gazillions of customers then you

00:42:30,319 --> 00:42:34,160
pay what it takes for a large database

00:42:32,000 --> 00:42:37,200
machine

00:42:34,160 --> 00:42:37,520
i'm personally quite curious if people

00:42:37,200 --> 00:42:40,880
run

00:42:37,520 --> 00:42:44,160
finract 1.x deployments

00:42:40,880 --> 00:42:47,200
that are big enough to max out a

00:42:44,160 --> 00:42:50,400
large mysql database machine

00:42:47,200 --> 00:42:52,560
um if you run with i don't know like a

00:42:50,400 --> 00:42:56,319
really large one

00:42:52,560 --> 00:42:59,760
32 cores and i don't know

00:42:56,319 --> 00:43:02,880
96 gigs of ram or something fancy

00:42:59,760 --> 00:43:04,079
um you have to have a lot of load for

00:43:02,880 --> 00:43:06,160
the database to still be the

00:43:04,079 --> 00:43:09,520
bottlenecked in

00:43:06,160 --> 00:43:11,440
um and yeah i don't know this is sort of

00:43:09,520 --> 00:43:14,560
a question mark

00:43:11,440 --> 00:43:17,839
if if this was the case like if you

00:43:14,560 --> 00:43:21,119
were deploying finrac in the cloud

00:43:17,839 --> 00:43:23,359
and really even with choosing and paying

00:43:21,119 --> 00:43:26,560
for a larger database machine

00:43:23,359 --> 00:43:28,319
you would still have an issue um

00:43:26,560 --> 00:43:30,240
there are a couple of next steps there

00:43:28,319 --> 00:43:31,839
that that you could look at and that i

00:43:30,240 --> 00:43:33,119
would consider if this was my problem

00:43:31,839 --> 00:43:34,480
it's not i don't run finracking

00:43:33,119 --> 00:43:36,000
production so it's not my problem but

00:43:34,480 --> 00:43:37,440
i'm sharing some ideas here

00:43:36,000 --> 00:43:39,920
for those of you who are interested in

00:43:37,440 --> 00:43:40,400
this i think something interesting there

00:43:39,920 --> 00:43:42,000
um

00:43:40,400 --> 00:43:43,920
we have a gera issue open about moving

00:43:42,000 --> 00:43:46,560
from my sequel to postgres

00:43:43,920 --> 00:43:48,000
um i'm not sure that would fundamentally

00:43:46,560 --> 00:43:49,680
shift this problem

00:43:48,000 --> 00:43:52,480
to another order of magnitude right

00:43:49,680 --> 00:43:54,000
postgres even if it were to be more

00:43:52,480 --> 00:43:54,880
scalable than mysql which i'm not

00:43:54,000 --> 00:43:57,599
entirely sure is

00:43:54,880 --> 00:43:58,720
is empirically proven um it would

00:43:57,599 --> 00:43:59,880
fundamentally still have the same

00:43:58,720 --> 00:44:02,079
architecture right

00:43:59,880 --> 00:44:03,920
postgresql you can shard them and you

00:44:02,079 --> 00:44:04,560
can do things like that and become fancy

00:44:03,920 --> 00:44:06,079
but

00:44:04,560 --> 00:44:07,839
these are database systems that that

00:44:06,079 --> 00:44:11,440
were

00:44:07,839 --> 00:44:12,960
designed for sort of a different era

00:44:11,440 --> 00:44:16,160
an interesting idea there could be to

00:44:12,960 --> 00:44:19,920
explore using google cloud spanner

00:44:16,160 --> 00:44:22,319
which is a managed database that

00:44:19,920 --> 00:44:24,240
basically has a different order of

00:44:22,319 --> 00:44:26,079
magnitude of scalability

00:44:24,240 --> 00:44:27,760
i'm not entirely sure how hard it would

00:44:26,079 --> 00:44:30,640
be to port finrac

00:44:27,760 --> 00:44:32,079
from mysql support to something like

00:44:30,640 --> 00:44:34,160
cloud spanner support

00:44:32,079 --> 00:44:35,440
but it sure could be fun to try if

00:44:34,160 --> 00:44:40,079
somebody wants to

00:44:35,440 --> 00:44:43,680
sink time into this um

00:44:40,079 --> 00:44:46,480
again i think the whole uh scalability

00:44:43,680 --> 00:44:47,119
debate is is something that should be

00:44:46,480 --> 00:44:49,200
driven

00:44:47,119 --> 00:44:50,319
by real need and real monitoring data

00:44:49,200 --> 00:44:51,760
right

00:44:50,319 --> 00:44:53,599
actually in terms of what we could do

00:44:51,760 --> 00:44:55,200
next on scalability if this is an

00:44:53,599 --> 00:44:58,000
area that interests anybody in this

00:44:55,200 --> 00:45:00,079
context of cloud deployments

00:44:58,000 --> 00:45:01,200
i think what we really need in finrac as

00:45:00,079 --> 00:45:02,640
a community and i've said this on

00:45:01,200 --> 00:45:05,280
mailing list posts before

00:45:02,640 --> 00:45:06,319
is automated load testing functional

00:45:05,280 --> 00:45:10,240
scenarios

00:45:06,319 --> 00:45:11,520
and tools that simulate load

00:45:10,240 --> 00:45:13,280
this is a pretty common thing and this

00:45:11,520 --> 00:45:14,240
is something we should have in the

00:45:13,280 --> 00:45:15,920
community project

00:45:14,240 --> 00:45:17,440
something we can you know re-run across

00:45:15,920 --> 00:45:19,440
releases

00:45:17,440 --> 00:45:21,280
if you have an interest in finrax

00:45:19,440 --> 00:45:24,240
scalability i urge you

00:45:21,280 --> 00:45:26,400
to work in the community on load testing

00:45:24,240 --> 00:45:28,319
share load testing scripts

00:45:26,400 --> 00:45:30,480
race pull requests where you contribute

00:45:28,319 --> 00:45:33,040
load testing

00:45:30,480 --> 00:45:34,560
scenarios or tools or even put them in a

00:45:33,040 --> 00:45:37,520
separate repo and share them with

00:45:34,560 --> 00:45:39,119
with the community say post to the

00:45:37,520 --> 00:45:40,720
developer mailing list and say here's my

00:45:39,119 --> 00:45:42,319
repo where i have a load testing

00:45:40,720 --> 00:45:44,240
scenario for finrac

00:45:42,319 --> 00:45:45,839
i have run it to a hundred gazillion

00:45:44,240 --> 00:45:46,880
customers and seen that it crashes what

00:45:45,839 --> 00:45:48,640
do you guys think

00:45:46,880 --> 00:45:51,200
that would be really useful i think

00:45:48,640 --> 00:45:52,240
reports of people who ask questions

00:45:51,200 --> 00:45:55,119
about

00:45:52,240 --> 00:45:56,240
scalability how scale does finra act or

00:45:55,119 --> 00:45:57,920
i have tested it

00:45:56,240 --> 00:46:00,560
and found it to not be very stable can

00:45:57,920 --> 00:46:01,640
you fix it are of much more limited use

00:46:00,560 --> 00:46:04,640
without

00:46:01,640 --> 00:46:08,319
reproducible scale test scenarios

00:46:04,640 --> 00:46:11,920
so i've made my my my point there

00:46:08,319 --> 00:46:14,319
i hope this is helpful i

00:46:11,920 --> 00:46:15,760
would like to offer finrac.dev the

00:46:14,319 --> 00:46:17,520
hosted

00:46:15,760 --> 00:46:19,119
environment of the project for scale

00:46:17,520 --> 00:46:20,480
testing if somebody wants to go ahead

00:46:19,119 --> 00:46:23,440
and start to

00:46:20,480 --> 00:46:25,200
basically hammer like load test and send

00:46:23,440 --> 00:46:27,839
a lot of requests to interact.dev

00:46:25,200 --> 00:46:29,520
please be my guest that's totally fine

00:46:27,839 --> 00:46:31,040
that's one of the ideas i originally had

00:46:29,520 --> 00:46:31,680
for for a sort of constantly up

00:46:31,040 --> 00:46:33,920
environment

00:46:31,680 --> 00:46:35,280
if you crash it interesting let's find

00:46:33,920 --> 00:46:36,000
out why let's see what we can do as a

00:46:35,280 --> 00:46:37,440
community

00:46:36,000 --> 00:46:39,040
to improve and so you can rerun your

00:46:37,440 --> 00:46:41,520
load test

00:46:39,040 --> 00:46:42,160
and we can we can go from there i will

00:46:41,520 --> 00:46:44,240
skip

00:46:42,160 --> 00:46:45,599
about over the point of the scalability

00:46:44,240 --> 00:46:48,319
of the scheduler that's

00:46:45,599 --> 00:46:50,000
sort of out of time for that uh

00:46:48,319 --> 00:46:52,400
multi-region deployments

00:46:50,000 --> 00:46:53,760
real quick so if interact.dev runs in a

00:46:52,400 --> 00:46:56,319
single region

00:46:53,760 --> 00:46:57,200
if you want to build a super high

00:46:56,319 --> 00:46:59,200
available

00:46:57,200 --> 00:47:01,440
production deployment you could consider

00:46:59,200 --> 00:47:03,839
a multi-regional deployment

00:47:01,440 --> 00:47:05,520
this is a fairly advanced setup

00:47:03,839 --> 00:47:07,119
definitely not something

00:47:05,520 --> 00:47:09,200
i'd want to get into for a demo

00:47:07,119 --> 00:47:11,520
environment i am

00:47:09,200 --> 00:47:12,800
personally not entirely sure again how

00:47:11,520 --> 00:47:16,319
scalable even

00:47:12,800 --> 00:47:19,680
uh many many serious finrac

00:47:16,319 --> 00:47:21,839
production deployments i need to

00:47:19,680 --> 00:47:23,520
be for something else to make sense this

00:47:21,839 --> 00:47:24,880
adds complexity in terms of database

00:47:23,520 --> 00:47:26,079
replication

00:47:24,880 --> 00:47:28,000
something you wouldn't have at spanner

00:47:26,079 --> 00:47:29,920
spanner is ultra replicated across

00:47:28,000 --> 00:47:32,720
regions

00:47:29,920 --> 00:47:34,160
but yeah something something can be

00:47:32,720 --> 00:47:36,839
looked into but i think is

00:47:34,160 --> 00:47:38,640
probably an overkill for many for many

00:47:36,839 --> 00:47:41,599
deployments

00:47:38,640 --> 00:47:42,319
um where are we with fernando dev and

00:47:41,599 --> 00:47:44,160
then i'll rip up

00:47:42,319 --> 00:47:45,680
a wrap up javier thanks for giving me a

00:47:44,160 --> 00:47:47,200
few extra minutes before we wrap this up

00:47:45,680 --> 00:47:49,839
and go into the buff

00:47:47,200 --> 00:47:51,280
the primary goal of the finrac.dev

00:47:49,839 --> 00:47:53,359
endeavor is achieved

00:47:51,280 --> 00:47:54,960
it works it has great uptime as we saw

00:47:53,359 --> 00:47:56,559
on the slide about monitoring

00:47:54,960 --> 00:47:58,160
it keeps magically updating itself if

00:47:56,559 --> 00:48:00,000
you click that link you get to a

00:47:58,160 --> 00:48:01,839
rest url which shows it a git revision

00:48:00,000 --> 00:48:04,720
that finrac dev currently runs on

00:48:01,839 --> 00:48:04,960
it's always the latest one people do use

00:48:04,720 --> 00:48:06,800
it

00:48:04,960 --> 00:48:08,559
the fact that um i keep getting error

00:48:06,800 --> 00:48:12,400
reports on my phone about some

00:48:08,559 --> 00:48:14,079
api having failed occasionally um is a

00:48:12,400 --> 00:48:16,240
indication that people are clearly you

00:48:14,079 --> 00:48:17,280
know exploring finrac by using this demo

00:48:16,240 --> 00:48:19,920
instance so

00:48:17,280 --> 00:48:21,520
this was this was useful this is uh this

00:48:19,920 --> 00:48:24,640
is fulfilling a need

00:48:21,520 --> 00:48:25,280
um it's great uptime there are basically

00:48:24,640 --> 00:48:27,359
zero

00:48:25,280 --> 00:48:28,960
lists uh complaints on the mailing and

00:48:27,359 --> 00:48:30,000
developer maintenance about finrac that

00:48:28,960 --> 00:48:31,839
they've been down and not being

00:48:30,000 --> 00:48:34,559
available or something like that

00:48:31,839 --> 00:48:36,160
um so yeah it it works the mission is

00:48:34,559 --> 00:48:37,440
fulfilled is it completely done are

00:48:36,160 --> 00:48:38,880
there still some some things that could

00:48:37,440 --> 00:48:39,760
be done in the future there's one big

00:48:38,880 --> 00:48:43,359
thing i'd like

00:48:39,760 --> 00:48:44,880
um uh ideally a contribution from from a

00:48:43,359 --> 00:48:47,359
community member for

00:48:44,880 --> 00:48:48,319
um this is the content repository

00:48:47,359 --> 00:48:50,559
setting so

00:48:48,319 --> 00:48:52,000
currently if you upload documents to the

00:48:50,559 --> 00:48:54,640
dev environment

00:48:52,000 --> 00:48:55,119
they work but then they get lost again

00:48:54,640 --> 00:48:57,280
they're

00:48:55,119 --> 00:48:59,359
they're not perfectly persistent because

00:48:57,280 --> 00:49:00,480
of what's described in this finrac 955

00:48:59,359 --> 00:49:01,920
issue

00:49:00,480 --> 00:49:04,079
i think this isn't a huge amount of work

00:49:01,920 --> 00:49:06,079
so any contributions for this welcome

00:49:04,079 --> 00:49:07,520
i'd guest you made this as a few days at

00:49:06,079 --> 00:49:09,599
most for somebody who knows a little bit

00:49:07,520 --> 00:49:13,200
what you're doing

00:49:09,599 --> 00:49:14,079
um phil director dev is a demo instance

00:49:13,200 --> 00:49:16,800
currently

00:49:14,079 --> 00:49:18,160
um could this also be used to offer

00:49:16,800 --> 00:49:20,160
non-demo instances

00:49:18,160 --> 00:49:21,760
um you know tenants perhaps for for

00:49:20,160 --> 00:49:23,200
non-demo purposes

00:49:21,760 --> 00:49:24,640
from a technical perspective that is

00:49:23,200 --> 00:49:25,920
totally feasible i think the support

00:49:24,640 --> 00:49:26,800
model around that is a little bit more

00:49:25,920 --> 00:49:28,960
interesting

00:49:26,800 --> 00:49:31,359
um if there are any partners finra

00:49:28,960 --> 00:49:32,800
partners implementers

00:49:31,359 --> 00:49:34,800
integrators who are interested in

00:49:32,800 --> 00:49:35,280
talking about this please let me know

00:49:34,800 --> 00:49:36,400
and

00:49:35,280 --> 00:49:38,000
i think there are opportunities there

00:49:36,400 --> 00:49:39,119
maybe to leverage some community

00:49:38,000 --> 00:49:43,280
resources

00:49:39,119 --> 00:49:46,079
with partner models who would take

00:49:43,280 --> 00:49:48,240
support uh for for people interested in

00:49:46,079 --> 00:49:50,400
running non-demo instances

00:49:48,240 --> 00:49:51,839
um definitely you've heard me talk about

00:49:50,400 --> 00:49:52,400
scalability in a couple of slides there

00:49:51,839 --> 00:49:53,920
i think

00:49:52,400 --> 00:49:55,680
work on scalability on the demo instance

00:49:53,920 --> 00:49:58,240
would be fun um

00:49:55,680 --> 00:49:59,839
it hinges i think as a next step on on

00:49:58,240 --> 00:50:02,960
people contributing

00:49:59,839 --> 00:50:02,960
skill test scenarios

00:50:03,599 --> 00:50:08,640
let's wrap it up here

00:50:07,200 --> 00:50:11,440
three book recommendations if you want

00:50:08,640 --> 00:50:13,839
to know more about how to run

00:50:11,440 --> 00:50:14,880
serious production environments these

00:50:13,839 --> 00:50:18,880
three books have

00:50:14,880 --> 00:50:21,680
a lot of great tips a lot of background

00:50:18,880 --> 00:50:22,800
some of which are much more details

00:50:21,680 --> 00:50:23,680
about some of the topics i've touched

00:50:22,800 --> 00:50:27,280
upon

00:50:23,680 --> 00:50:41,839
in this presentation care

00:50:27,280 --> 00:50:41,839
over to you

00:50:44,640 --> 00:50:50,559
i think i spoke too long and everybody

00:50:46,240 --> 00:50:50,559
disappeared javier you want to take back

00:50:52,839 --> 00:50:55,839
over

00:50:59,680 --> 00:51:06,960
hello yeah sorry

00:51:03,839 --> 00:51:08,030
it took a bit to connect um okay thank

00:51:06,960 --> 00:51:09,520
you michael um

00:51:08,030 --> 00:51:12,800
[Music]

00:51:09,520 --> 00:51:17,359
i think that the technical developers

00:51:12,800 --> 00:51:20,720
have enjoyed this i took the idea of the

00:51:17,359 --> 00:51:24,559
secret tool that monitored

00:51:20,720 --> 00:51:36,079
any any private key that you can

00:51:24,559 --> 00:51:36,079

YouTube URL: https://www.youtube.com/watch?v=EkCOSjTEtbw


