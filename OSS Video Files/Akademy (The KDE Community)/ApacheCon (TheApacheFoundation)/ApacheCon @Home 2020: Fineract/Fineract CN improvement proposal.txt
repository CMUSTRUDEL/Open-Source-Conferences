Title: Fineract CN improvement proposal
Publication date: 2020-10-17
Playlist: ApacheCon @Home 2020: Fineract
Description: 
	Fineract CN improvement proposal
Kevin Madhu, Saransh Sharma

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

With most of the projects showing negligible or no activity at all for about an year, the fineract-cn project looks so close to being looked upon as an abandoned beast. And because the difficulties one has to go through to tame this beast, not many people get to enjoy the real beauty it really is. With our work, we hope to make a difference to this current state of the project and to attract more people into getting to know the project and make contributions by making it easier for them so that we can steer the project towards a more mature, stable, complete and releasable version.

Kevin Madhu:
Developer implementing Finscale version inspired from fineract CN

Saransh Sharma :
Technical writers working for Muellners Foundation
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,240 --> 00:00:30,240
cool uh

00:00:25,279 --> 00:00:31,679
thank you very much everyone for letting

00:00:30,240 --> 00:00:35,040
us present this thought

00:00:31,679 --> 00:00:36,160
uh post relation of ours towards the

00:00:35,040 --> 00:00:39,600
improvement of

00:00:36,160 --> 00:00:44,160
interaction um

00:00:39,600 --> 00:00:45,360
so this specific talk is about i don't

00:00:44,160 --> 00:00:47,120
know somebody else is going to

00:00:45,360 --> 00:00:48,719
uh i'm not really sure so yeah we can

00:00:47,120 --> 00:00:50,960
start so this talk is

00:00:48,719 --> 00:00:52,160
uh this specific presentation is about

00:00:50,960 --> 00:00:55,840
um

00:00:52,160 --> 00:00:59,199
phenoxy and phenoxine is and

00:00:55,840 --> 00:01:02,559
is uh is it donated i think

00:00:59,199 --> 00:01:03,600
source code from efos io um which is a

00:01:02,559 --> 00:01:07,840
cloud native

00:01:03,600 --> 00:01:10,880
uh improvement over from direct 1.x

00:01:07,840 --> 00:01:15,040
so to some people who do not know um

00:01:10,880 --> 00:01:17,840
about the the fact what fenexian is

00:01:15,040 --> 00:01:19,840
uh it's it's like a side project or sub

00:01:17,840 --> 00:01:22,000
project of finrac one point x so one

00:01:19,840 --> 00:01:24,640
point x is like a flagship project for

00:01:22,000 --> 00:01:26,640
apache f interact and today we're

00:01:24,640 --> 00:01:28,400
probably going to talk about the ideas

00:01:26,640 --> 00:01:29,200
and the possible explorations which we

00:01:28,400 --> 00:01:31,119
did towards

00:01:29,200 --> 00:01:32,880
implementing with one of my team members

00:01:31,119 --> 00:01:36,240
here

00:01:32,880 --> 00:01:38,159
um so we we first we sort of like

00:01:36,240 --> 00:01:40,000
introduced the the vision and the

00:01:38,159 --> 00:01:43,280
mission of cn so

00:01:40,000 --> 00:01:46,399
ferexian by the name suggests cloud

00:01:43,280 --> 00:01:48,000
native i mean one point x is also cloud

00:01:46,399 --> 00:01:50,880
native in some ways like

00:01:48,000 --> 00:01:52,560
it doesn't really have the no sequel and

00:01:50,880 --> 00:01:56,000
some kind of other

00:01:52,560 --> 00:01:57,280
um you know new systems or databases or

00:01:56,000 --> 00:02:00,880
services

00:01:57,280 --> 00:02:01,920
so this is a quote which is actually

00:02:00,880 --> 00:02:06,000
from

00:02:01,920 --> 00:02:08,160
the the wiki page of finra cn

00:02:06,000 --> 00:02:09,920
anybody could actually go and read there

00:02:08,160 --> 00:02:11,760
um so it's a system it's a service it's

00:02:09,920 --> 00:02:13,599
a composed service like bunch of

00:02:11,760 --> 00:02:15,120
service combined together which kind of

00:02:13,599 --> 00:02:18,560
like allow

00:02:15,120 --> 00:02:19,120
the uh which focuses which puts a lot of

00:02:18,560 --> 00:02:23,040
focus

00:02:19,120 --> 00:02:25,200
on performance uh as well as scalability

00:02:23,040 --> 00:02:28,720
because this is where

00:02:25,200 --> 00:02:32,000
a lot of issues which um

00:02:28,720 --> 00:02:32,480
1.x users and partners face that the

00:02:32,000 --> 00:02:36,480
issue

00:02:32,480 --> 00:02:38,720
behind the fact that uh it it can

00:02:36,480 --> 00:02:40,480
it cannot scale because monolithic

00:02:38,720 --> 00:02:42,080
application has its own limitations

00:02:40,480 --> 00:02:43,440
definitely it can scale in a different

00:02:42,080 --> 00:02:44,879
way i mean you could run bunch of

00:02:43,440 --> 00:02:46,560
different services you could

00:02:44,879 --> 00:02:48,400
optimize different services you can

00:02:46,560 --> 00:02:50,560
optimize database but

00:02:48,400 --> 00:02:52,080
in my own personal experience i've seen

00:02:50,560 --> 00:02:55,200
these bottlenecks happening

00:02:52,080 --> 00:02:58,319
on friday one context now

00:02:55,200 --> 00:03:00,319
fine cn promises that it needs to be

00:02:58,319 --> 00:03:02,080
fml it needs to be scalable it needs to

00:03:00,319 --> 00:03:03,680
be agile also

00:03:02,080 --> 00:03:05,760
and definitely this should be the

00:03:03,680 --> 00:03:09,760
promise the mission for

00:03:05,760 --> 00:03:12,400
cn services to kind of like uh put out

00:03:09,760 --> 00:03:13,599
but before we actually dwell into the

00:03:12,400 --> 00:03:16,720
the whole

00:03:13,599 --> 00:03:17,599
um journey of ours with my team member

00:03:16,720 --> 00:03:18,879
here

00:03:17,599 --> 00:03:20,080
so i'm going to give you a little bit of

00:03:18,879 --> 00:03:22,000
statistics and a little bit of

00:03:20,080 --> 00:03:24,560
background which we conducted you

00:03:22,000 --> 00:03:25,280
we will share this file soon on the list

00:03:24,560 --> 00:03:27,519
with

00:03:25,280 --> 00:03:29,120
all of the community members they can

00:03:27,519 --> 00:03:31,120
actually go through it

00:03:29,120 --> 00:03:32,480
so finraj 1.x has actually more

00:03:31,120 --> 00:03:35,200
contributions than

00:03:32,480 --> 00:03:37,440
like way over like not even two times or

00:03:35,200 --> 00:03:39,599
three times it's like way over than that

00:03:37,440 --> 00:03:41,440
than infinite same combined uh over the

00:03:39,599 --> 00:03:43,440
past a couple of years

00:03:41,440 --> 00:03:44,720
uh the last comment i've seen was in the

00:03:43,440 --> 00:03:48,000
next like you know

00:03:44,720 --> 00:03:49,760
uh i mean a couple of days ago

00:03:48,000 --> 00:03:51,599
fenrir cn has the last comment i think

00:03:49,760 --> 00:03:54,879
almost around like a year ago

00:03:51,599 --> 00:03:57,920
almost more than a year ago and

00:03:54,879 --> 00:04:00,159
the the lack of contribution you know

00:03:57,920 --> 00:04:01,040
is there definitely and fenexian

00:04:00,159 --> 00:04:03,120
contributors

00:04:01,040 --> 00:04:05,120
are limited only a few including marcus

00:04:03,120 --> 00:04:07,280
miller i mean there was a reputation of

00:04:05,120 --> 00:04:08,879
authors like happening when you make a

00:04:07,280 --> 00:04:10,159
look up within that specific

00:04:08,879 --> 00:04:12,400
file which we would share to the

00:04:10,159 --> 00:04:14,720
community so our conclusion is

00:04:12,400 --> 00:04:16,560
for the from this the statistics which

00:04:14,720 --> 00:04:18,880
you've derived the architecture is quite

00:04:16,560 --> 00:04:21,440
complicated to adopt in the sense

00:04:18,880 --> 00:04:22,240
how do we how do we deduce this kind of

00:04:21,440 --> 00:04:23,360
statement

00:04:22,240 --> 00:04:25,600
it's quite simple there's less

00:04:23,360 --> 00:04:27,280
contributions happening and adoption is

00:04:25,600 --> 00:04:28,720
less so if the technology has less

00:04:27,280 --> 00:04:31,199
contribution it means that

00:04:28,720 --> 00:04:32,720
it's kind of hard or there's something

00:04:31,199 --> 00:04:34,960
missing some something else like for

00:04:32,720 --> 00:04:37,120
instance documentation and to be

00:04:34,960 --> 00:04:38,479
um able to have a great open source

00:04:37,120 --> 00:04:40,720
project going on

00:04:38,479 --> 00:04:42,960
is about a lot of documentations about

00:04:40,720 --> 00:04:42,960
how

00:04:49,040 --> 00:04:55,919
so i think uh here i would like

00:04:53,040 --> 00:04:56,880
kevin to get into and talk about these

00:04:55,919 --> 00:04:59,199
general

00:04:56,880 --> 00:05:00,960
general steep curves which we've

00:04:59,199 --> 00:05:01,680
identified which we've together worked

00:05:00,960 --> 00:05:03,919
on

00:05:01,680 --> 00:05:06,080
so kevin over to you would you like to

00:05:03,919 --> 00:05:09,199
expand your thought process here

00:05:06,080 --> 00:05:10,960
on the idea that what are the

00:05:09,199 --> 00:05:14,000
curves which we've identified when we

00:05:10,960 --> 00:05:14,000
worked with finraxian

00:05:22,800 --> 00:05:26,160
hello kevin are you there

00:05:27,360 --> 00:05:33,919
sorry i forgot

00:05:30,479 --> 00:05:37,199
yeah hello everyone so

00:05:33,919 --> 00:05:40,160
basically here i started with the

00:05:37,199 --> 00:05:42,080
one point text and then the micro

00:05:40,160 --> 00:05:45,360
service architecture

00:05:42,080 --> 00:05:47,759
kind of was interesting for me and so i

00:05:45,360 --> 00:05:50,160
jumped into finra's cn

00:05:47,759 --> 00:05:51,280
and i was looking i was hoping for a lot

00:05:50,160 --> 00:05:53,919
of improvement

00:05:51,280 --> 00:05:55,039
when i started watching the project it

00:05:53,919 --> 00:05:59,280
was

00:05:55,039 --> 00:06:01,470
having it was having some sort of like

00:05:59,280 --> 00:06:04,080
domain value it was serving some

00:06:01,470 --> 00:06:07,360
[Music]

00:06:04,080 --> 00:06:09,520
some kind of functionality and i was

00:06:07,360 --> 00:06:10,720
trying to get into the project and i was

00:06:09,520 --> 00:06:14,000
hoping that

00:06:10,720 --> 00:06:17,120
in some amount of time

00:06:14,000 --> 00:06:20,240
this project will

00:06:17,120 --> 00:06:23,840
get to a point where it it's

00:06:20,240 --> 00:06:27,199
as big as the finrax see a finrac 1.x

00:06:23,840 --> 00:06:30,160
and delivers all the

00:06:27,199 --> 00:06:32,000
functionality provided by finrac 1.8

00:06:30,160 --> 00:06:35,120
after a while i

00:06:32,000 --> 00:06:38,960
and when i i wanted to

00:06:35,120 --> 00:06:41,680
when i was trying to get started the

00:06:38,960 --> 00:06:42,720
condition of documentation was not that

00:06:41,680 --> 00:06:46,080
great

00:06:42,720 --> 00:06:49,280
in the beginning and still

00:06:46,080 --> 00:06:52,319
it's not that great but it has improved

00:06:49,280 --> 00:06:55,440
at that point i was struggling to

00:06:52,319 --> 00:06:57,680
get the services running and

00:06:55,440 --> 00:06:58,560
if i remember it correctly i was not

00:06:57,680 --> 00:07:02,720
able to

00:06:58,560 --> 00:07:03,840
i was not able to run uh this demo

00:07:02,720 --> 00:07:06,240
server which is

00:07:03,840 --> 00:07:07,520
demo server setup which is currently in

00:07:06,240 --> 00:07:11,199
the documentation

00:07:07,520 --> 00:07:14,560
and i had a 16 gb 16 gb

00:07:11,199 --> 00:07:16,960
uh macbook pro and this

00:07:14,560 --> 00:07:18,479
is something which was weird for me

00:07:16,960 --> 00:07:20,160
because i was having

00:07:18,479 --> 00:07:21,940
i couldn't get started with the project

00:07:20,160 --> 00:07:25,220
because

00:07:21,940 --> 00:07:25,220
[Music]

00:07:25,919 --> 00:07:32,800
imagine that 16 gb ram is not uh

00:07:29,680 --> 00:07:34,400
and the performance of a mac pro is not

00:07:32,800 --> 00:07:36,720
enough to run the project

00:07:34,400 --> 00:07:37,759
so how will the how will the developers

00:07:36,720 --> 00:07:40,960
uh

00:07:37,759 --> 00:07:42,639
get started with this projector run this

00:07:40,960 --> 00:07:43,840
project so that they could contribute

00:07:42,639 --> 00:07:48,800
more

00:07:43,840 --> 00:07:48,800
this was one of the so i i

00:07:48,960 --> 00:07:52,400
tried running some services in on the

00:07:51,199 --> 00:07:55,520
cloud and

00:07:52,400 --> 00:07:58,960
uh just the essential services on

00:07:55,520 --> 00:08:02,479
on my laptop this is how i

00:07:58,960 --> 00:08:05,360
i tried to get get the services

00:08:02,479 --> 00:08:06,240
running on cloud and then i saw that

00:08:05,360 --> 00:08:09,840
again

00:08:06,240 --> 00:08:12,080
there's no this lack of automation

00:08:09,840 --> 00:08:13,440
they don't provide i didn't see any

00:08:12,080 --> 00:08:16,960
scripts or a

00:08:13,440 --> 00:08:18,479
simple uh procedure through which i can

00:08:16,960 --> 00:08:21,759
get these

00:08:18,479 --> 00:08:24,879
services deployed on the cloud and

00:08:21,759 --> 00:08:28,800
i ended up creating a data form script

00:08:24,879 --> 00:08:32,719
which brings spins up all these

00:08:28,800 --> 00:08:36,399
instances and uh deploys the services

00:08:32,719 --> 00:08:39,760
and this is important for me because

00:08:36,399 --> 00:08:40,159
when i'm developing and when i need to

00:08:39,760 --> 00:08:42,800
see

00:08:40,159 --> 00:08:46,080
changes happening and so on i i'll make

00:08:42,800 --> 00:08:46,080
mistakes so i'll need to

00:08:46,320 --> 00:08:54,320
drop these instances make uh

00:08:50,240 --> 00:08:59,760
spin them up again and it was quite cons

00:08:54,320 --> 00:08:59,760
time consuming to do it all uh by hand

00:09:00,080 --> 00:09:02,720
and then

00:09:05,440 --> 00:09:12,080
this was one of the hardships i felt and

00:09:08,720 --> 00:09:12,080
with the documentation

00:09:13,040 --> 00:09:19,040
cassandra was then came a point where

00:09:17,040 --> 00:09:20,959
after i implemented the data form

00:09:19,040 --> 00:09:22,240
scripts it was easy for me to get the

00:09:20,959 --> 00:09:25,360
services running

00:09:22,240 --> 00:09:25,760
but then came the like i did not like

00:09:25,360 --> 00:09:29,120
the

00:09:25,760 --> 00:09:32,080
idea of running a database

00:09:29,120 --> 00:09:34,480
in on docker containers for a production

00:09:32,080 --> 00:09:37,519
environment so i was looking for options

00:09:34,480 --> 00:09:38,959
when i go for a serious deployment uh i

00:09:37,519 --> 00:09:42,000
need to

00:09:38,959 --> 00:09:42,000
have some kind of

00:09:42,399 --> 00:09:46,480
foolproof mechanism or a bit more

00:09:45,200 --> 00:09:49,279
stronger

00:09:46,480 --> 00:09:51,760
strategy so i tried looking for options

00:09:49,279 --> 00:09:55,600
and i saw that most of the

00:09:51,760 --> 00:09:58,320
probably most of the i came across the

00:09:55,600 --> 00:10:00,320
uh i faced a scenario where this

00:09:58,320 --> 00:10:02,800
deployment of cassandra in a

00:10:00,320 --> 00:10:03,760
production granted my environment it was

00:10:02,800 --> 00:10:06,880
to

00:10:03,760 --> 00:10:11,519
pricey for my for in my

00:10:06,880 --> 00:10:15,360
case and probably in most uh small scale

00:10:11,519 --> 00:10:19,440
for most of the small kit small scale uh

00:10:15,360 --> 00:10:22,959
deployments it will be pretty pricey

00:10:19,440 --> 00:10:25,200
that was another and so

00:10:22,959 --> 00:10:28,000
because of this i tried again i tried

00:10:25,200 --> 00:10:31,040
looking for options manage solutions

00:10:28,000 --> 00:10:32,079
and i came across it was the beginning

00:10:31,040 --> 00:10:35,279
where uh

00:10:32,079 --> 00:10:37,360
amazon uh amazon started uh providing

00:10:35,279 --> 00:10:41,360
cassandra service

00:10:37,360 --> 00:10:43,680
and even uh also i

00:10:41,360 --> 00:10:45,440
tried adopting cassandra as a managed

00:10:43,680 --> 00:10:48,720
service from

00:10:45,440 --> 00:10:52,320
offload by aws and again

00:10:48,720 --> 00:10:52,320
i came into a dead end because

00:10:52,800 --> 00:10:56,720
uh amazon doesn't these manage services

00:10:55,839 --> 00:10:59,279
they do not

00:10:56,720 --> 00:11:00,320
implement the api of cassandra

00:10:59,279 --> 00:11:04,160
completely

00:11:00,320 --> 00:11:08,240
and finraxian was using some

00:11:04,160 --> 00:11:08,240
apis which were not implemented by

00:11:08,320 --> 00:11:14,079
amazon and then i tried then

00:11:11,360 --> 00:11:15,360
another option of azure ended up the

00:11:14,079 --> 00:11:17,839
same way

00:11:15,360 --> 00:11:20,320
so i understood that either i have to

00:11:17,839 --> 00:11:24,079
either i have to modify the

00:11:20,320 --> 00:11:25,279
cassandra part to use the manage

00:11:24,079 --> 00:11:27,760
services or

00:11:25,279 --> 00:11:28,959
i should go with the deployment of

00:11:27,760 --> 00:11:32,320
cassandra and uh

00:11:28,959 --> 00:11:34,320
docker environment so i'm

00:11:32,320 --> 00:11:37,519
i ended up making some changes in the

00:11:34,320 --> 00:11:41,519
cassandra part and tried to

00:11:37,519 --> 00:11:44,560
uh notify the community about it

00:11:41,519 --> 00:11:46,880
and i didn't find much

00:11:44,560 --> 00:11:47,600
response i didn't get any response about

00:11:46,880 --> 00:11:50,800
uh

00:11:47,600 --> 00:11:53,760
this and after a while i i like uh

00:11:50,800 --> 00:11:54,720
the all these hardships led me to drop

00:11:53,760 --> 00:11:58,720
this

00:11:54,720 --> 00:12:03,120
idea and wait for some more improvement

00:11:58,720 --> 00:12:03,120
i i hope to find some more improvement

00:12:03,839 --> 00:12:10,320
so um which side did we find

00:12:07,920 --> 00:12:10,959
so the personal experience so far like

00:12:10,320 --> 00:12:14,000
creating

00:12:10,959 --> 00:12:16,240
i mean i remember uh contributing

00:12:14,000 --> 00:12:17,839
i mean thank you kevin for sharing your

00:12:16,240 --> 00:12:20,399
experience together we

00:12:17,839 --> 00:12:21,279
started out something i remember having

00:12:20,399 --> 00:12:25,200
this uh

00:12:21,279 --> 00:12:27,519
journey with kevin and i think

00:12:25,200 --> 00:12:29,360
um there's like a couple of things which

00:12:27,519 --> 00:12:31,440
i would like to point out

00:12:29,360 --> 00:12:33,680
with kevin and agreeing with kevin that

00:12:31,440 --> 00:12:35,600
it's uh there's a couple of things

00:12:33,680 --> 00:12:36,880
like packages which are specifically

00:12:35,600 --> 00:12:38,240
written like you know which we

00:12:36,880 --> 00:12:40,399
personally

00:12:38,240 --> 00:12:42,240
um think about the fact that why are

00:12:40,399 --> 00:12:42,639
they there i mean like you know if we

00:12:42,240 --> 00:12:44,240
have

00:12:42,639 --> 00:12:46,320
it's if this is a micro services

00:12:44,240 --> 00:12:48,639
architecture and definitely the

00:12:46,320 --> 00:12:51,760
documentation is very scarce

00:12:48,639 --> 00:12:52,720
and running phenoxy in in you know a

00:12:51,760 --> 00:12:54,639
cloud

00:12:52,720 --> 00:12:57,040
and i mean it's kind of like really

00:12:54,639 --> 00:12:58,639
broken i mean definitely some people

00:12:57,040 --> 00:12:59,760
might be running it but we're not aware

00:12:58,639 --> 00:13:03,360
of that and there's no

00:12:59,760 --> 00:13:05,519
uh giving back to the community um

00:13:03,360 --> 00:13:05,519
so

00:13:10,390 --> 00:13:13,460
[Music]

00:13:18,399 --> 00:13:22,320
and come across and i remember having

00:13:19,920 --> 00:13:24,160
these conversations um

00:13:22,320 --> 00:13:26,160
with one of the community members that

00:13:24,160 --> 00:13:28,160
they need uh people to upgrade these

00:13:26,160 --> 00:13:30,320
services i mean

00:13:28,160 --> 00:13:31,680
and i've this is something i've realized

00:13:30,320 --> 00:13:32,079
this is something which we've realized

00:13:31,680 --> 00:13:33,760
that

00:13:32,079 --> 00:13:35,440
there is an automated way to upgrade

00:13:33,760 --> 00:13:36,959
these services and to manage those

00:13:35,440 --> 00:13:38,000
dependencies because when you're talking

00:13:36,959 --> 00:13:40,639
about

00:13:38,000 --> 00:13:41,360
the these services and these services

00:13:40,639 --> 00:13:44,399
are like

00:13:41,360 --> 00:13:45,839
like a couple of services like it's not

00:13:44,399 --> 00:13:47,440
it's not a big application the

00:13:45,839 --> 00:13:48,320
microservices are like 10 10 different

00:13:47,440 --> 00:13:50,320
servers and

00:13:48,320 --> 00:13:52,240
gonna be a case where you have like

00:13:50,320 --> 00:13:55,360
another five other services or

00:13:52,240 --> 00:13:57,120
15 years to actually manage them

00:13:55,360 --> 00:13:58,880
and how do you create that this

00:13:57,120 --> 00:14:03,680
something struck to me

00:13:58,880 --> 00:14:05,680
manual update with another

00:14:03,680 --> 00:14:07,440
speaking of the open source enthusiast

00:14:05,680 --> 00:14:11,839
who was helping me out with that

00:14:07,440 --> 00:14:11,839
so we tried um you know services

00:14:15,440 --> 00:14:23,519
so this came in i remember we used

00:14:20,079 --> 00:14:26,320
so template is like a like a

00:14:23,519 --> 00:14:27,839
spoiler plate for a service where it

00:14:26,320 --> 00:14:29,920
doesn't do anything it just shows you

00:14:27,839 --> 00:14:31,040
how you can actually build a finrax cn

00:14:29,920 --> 00:14:33,600
based uh

00:14:31,040 --> 00:14:35,600
app or a service and we realized that it

00:14:33,600 --> 00:14:36,079
need more efforts because it requires us

00:14:35,600 --> 00:14:38,160
to do

00:14:36,079 --> 00:14:39,839
manual editions of configuration i mean

00:14:38,160 --> 00:14:40,560
it was really hard for us to kind of

00:14:39,839 --> 00:14:43,120
like

00:14:40,560 --> 00:14:44,399
um develop something on top of it

00:14:43,120 --> 00:14:45,680
because you have to like fix a couple of

00:14:44,399 --> 00:14:48,720
things before you actually

00:14:45,680 --> 00:14:50,160
do something and the most uh disturbing

00:14:48,720 --> 00:14:52,959
part is that you have to rely on

00:14:50,160 --> 00:14:52,959
different packages

00:14:53,279 --> 00:14:55,519
i mean

00:14:57,040 --> 00:15:00,160
and making it more dependent to each

00:14:58,720 --> 00:15:02,320
other you know rather

00:15:00,160 --> 00:15:03,920
isolating you know like there's a bunch

00:15:02,320 --> 00:15:06,959
of things which

00:15:03,920 --> 00:15:10,000
uh depend on each other so

00:15:06,959 --> 00:15:12,560
as go back to kevin and

00:15:10,000 --> 00:15:13,760
bring goodies put your own experience

00:15:12,560 --> 00:15:16,959
out here about

00:15:13,760 --> 00:15:20,160
cassandra and what and

00:15:16,959 --> 00:15:22,320
what was the blocker and you know

00:15:20,160 --> 00:15:23,839
as you mentioned that cassandra is a big

00:15:22,320 --> 00:15:25,199
issue when it comes to managing and

00:15:23,839 --> 00:15:27,519
maintenance and

00:15:25,199 --> 00:15:29,040
definitely it's a it's a pricey affair

00:15:27,519 --> 00:15:31,360
so could you could you explain

00:15:29,040 --> 00:15:32,320
would you put your uh experience here on

00:15:31,360 --> 00:15:35,279
this uh

00:15:32,320 --> 00:15:38,839
aspect why did we decide that cassandra

00:15:35,279 --> 00:15:41,839
is not definitely a choice to go ahead

00:15:38,839 --> 00:15:41,839
with

00:15:45,600 --> 00:15:49,440
so as i've already mentioned since it

00:15:48,560 --> 00:15:51,360
was

00:15:49,440 --> 00:15:52,560
since from the beginning i was having

00:15:51,360 --> 00:15:56,320
issues with the

00:15:52,560 --> 00:16:00,160
cassandra and having it

00:15:56,320 --> 00:16:03,440
deployed and like those kind of issues

00:16:00,160 --> 00:16:06,720
i had already like i was already fed up

00:16:03,440 --> 00:16:10,639
a little bit with this and

00:16:06,720 --> 00:16:14,240
when i started digging more into

00:16:10,639 --> 00:16:15,680
the more into the code of finraxian i

00:16:14,240 --> 00:16:19,620
understood that

00:16:15,680 --> 00:16:20,800
cassandra was mainly being used for

00:16:19,620 --> 00:16:24,240
[Music]

00:16:20,800 --> 00:16:28,399
providing cqrs facilities cqrs

00:16:24,240 --> 00:16:31,839
architecture and it did not do

00:16:28,399 --> 00:16:32,720
much stuff like much more uh it was just

00:16:31,839 --> 00:16:35,040
used for it

00:16:32,720 --> 00:16:35,759
it was just being used for serving

00:16:35,040 --> 00:16:39,759
commands

00:16:35,759 --> 00:16:42,480
and such stuff which is related to cqrs

00:16:39,759 --> 00:16:43,600
and later on at the stage where we'll

00:16:42,480 --> 00:16:46,160
discuss it later on

00:16:43,600 --> 00:16:47,199
uh later in the slide we are replaced

00:16:46,160 --> 00:16:49,759
with uh

00:16:47,199 --> 00:16:51,040
replace the finraxian implementation of

00:16:49,759 --> 00:16:54,560
cqrs

00:16:51,040 --> 00:16:56,880
which was actually which was kind of

00:16:54,560 --> 00:16:58,560
reinventing the wheel with because there

00:16:56,880 --> 00:17:02,399
were other alternatives

00:16:58,560 --> 00:17:04,720
out there uh later on

00:17:02,399 --> 00:17:05,919
we reached a point where we could just

00:17:04,720 --> 00:17:09,360
swap out

00:17:05,919 --> 00:17:11,600
cassandra for basically

00:17:09,360 --> 00:17:12,400
for nothing we did not need cassandra

00:17:11,600 --> 00:17:16,000
anymore

00:17:12,400 --> 00:17:16,000
after a while when we uh

00:17:16,640 --> 00:17:19,839
when we uh started using something else

00:17:19,439 --> 00:17:23,760
for

00:17:19,839 --> 00:17:27,039
cqrs and uh

00:17:23,760 --> 00:17:30,400
i think one less

00:17:27,039 --> 00:17:32,240
component means it it becomes easier for

00:17:30,400 --> 00:17:34,240
for the developers because they don't

00:17:32,240 --> 00:17:38,000
have to learn one more component in

00:17:34,240 --> 00:17:38,000
order to get involved with the project

00:17:42,000 --> 00:17:46,880
i mean this is something which we both

00:17:45,039 --> 00:17:47,600
have experienced you know in terms of

00:17:46,880 --> 00:17:50,240
that

00:17:47,600 --> 00:17:51,760
and i remember uh meeting kevin in one

00:17:50,240 --> 00:17:54,320
of the

00:17:51,760 --> 00:17:55,120
chat rooms and uh we were discussing the

00:17:54,320 --> 00:17:56,480
fact that

00:17:55,120 --> 00:17:58,400
there were a couple of commands which

00:17:56,480 --> 00:18:00,160
are not going through which i sometimes

00:17:58,400 --> 00:18:02,640
see on the email

00:18:00,160 --> 00:18:04,480
that cqrs is not processing this command

00:18:02,640 --> 00:18:06,559
because it's kind of like somewhere

00:18:04,480 --> 00:18:08,240
conclude does not really fulfill the

00:18:06,559 --> 00:18:12,640
expectations which we will look

00:18:08,240 --> 00:18:14,720
for so um this is where i started

00:18:12,640 --> 00:18:16,480
pouring in some ideas with kevin i

00:18:14,720 --> 00:18:18,720
started talking about the idea of

00:18:16,480 --> 00:18:20,320
you know if you remember kevin we had

00:18:18,720 --> 00:18:22,320
this discussion that i think what if

00:18:20,320 --> 00:18:24,000
first of all we could automate the whole

00:18:22,320 --> 00:18:26,880
process you know like

00:18:24,000 --> 00:18:28,000
where we could automate managing all of

00:18:26,880 --> 00:18:30,320
these services which

00:18:28,000 --> 00:18:31,600
is missing right now for a developer to

00:18:30,320 --> 00:18:34,640
kind of like

00:18:31,600 --> 00:18:36,559
um uh to work upon because

00:18:34,640 --> 00:18:39,039
that's one of the blocker when when you

00:18:36,559 --> 00:18:41,360
go ahead as a developer

00:18:39,039 --> 00:18:43,120
to kind of like you know to put out the

00:18:41,360 --> 00:18:44,559
fact that hey i want to manage this

00:18:43,120 --> 00:18:46,400
service but the problem is that i have

00:18:44,559 --> 00:18:47,919
to manage bunch of other services how do

00:18:46,400 --> 00:18:49,280
i do this manually

00:18:47,919 --> 00:18:50,799
and the developer wouldn't do that

00:18:49,280 --> 00:18:52,480
developer would not be interested in

00:18:50,799 --> 00:18:54,559
such kind of thing

00:18:52,480 --> 00:18:56,000
or any kind of partner or any kind of

00:18:54,559 --> 00:18:58,160
open source contributor

00:18:56,000 --> 00:18:59,520
such as in an institute or a company or

00:18:58,160 --> 00:19:01,760
whoever you could say

00:18:59,520 --> 00:19:02,640
so we reached out to jhipster which is a

00:19:01,760 --> 00:19:04,559
product that does

00:19:02,640 --> 00:19:06,559
automation on our behalf like it could

00:19:04,559 --> 00:19:08,799
generate an application

00:19:06,559 --> 00:19:10,640
um with existing frameworks included

00:19:08,799 --> 00:19:12,799
like using a blueprint or

00:19:10,640 --> 00:19:14,160
adding your own generator so generator

00:19:12,799 --> 00:19:15,919
does what it kind of like does

00:19:14,160 --> 00:19:17,520
what template is doing right now

00:19:15,919 --> 00:19:18,960
infinixian so you could kind of like

00:19:17,520 --> 00:19:22,880
generate your own

00:19:18,960 --> 00:19:23,760
uh complete uh you know whole packaged

00:19:22,880 --> 00:19:25,520
application

00:19:23,760 --> 00:19:28,240
and you could kind of like you do an

00:19:25,520 --> 00:19:30,160
upgrade also and add more languages

00:19:28,240 --> 00:19:31,360
i mean this is what this uh jhipster

00:19:30,160 --> 00:19:33,200
generator is doing

00:19:31,360 --> 00:19:34,720
so most of the people do not really know

00:19:33,200 --> 00:19:38,320
about hipster we would in

00:19:34,720 --> 00:19:40,240
uh introduce jhipster in like a couple

00:19:38,320 --> 00:19:42,320
of next slides also

00:19:40,240 --> 00:19:44,080
um and we realize that automation is the

00:19:42,320 --> 00:19:46,000
best automation is the

00:19:44,080 --> 00:19:47,280
forward first of all to make this thing

00:19:46,000 --> 00:19:50,080
easier

00:19:47,280 --> 00:19:50,559
and uh definitely i mean this is where

00:19:50,080 --> 00:19:53,600
we

00:19:50,559 --> 00:19:55,280
uh this is how we actually implemented

00:19:53,600 --> 00:19:57,039
this approach and we've helped we've

00:19:55,280 --> 00:20:00,240
taken help from development

00:19:57,039 --> 00:20:01,200
committers who we just simply reached

00:20:00,240 --> 00:20:02,799
out to them and asked them that hey

00:20:01,200 --> 00:20:04,559
could you want to try this

00:20:02,799 --> 00:20:06,880
approach on fundraising with they've

00:20:04,559 --> 00:20:07,520
used fundraising and we gave them this

00:20:06,880 --> 00:20:09,840
uh

00:20:07,520 --> 00:20:11,280
this new approach and they all liked it

00:20:09,840 --> 00:20:13,600
so definitely

00:20:11,280 --> 00:20:15,360
uh it's the best open source project

00:20:13,600 --> 00:20:16,240
available today in terms of code banking

00:20:15,360 --> 00:20:19,919
system

00:20:16,240 --> 00:20:21,760
fencing and people who did they

00:20:19,919 --> 00:20:23,440
did a good job to kind of like create

00:20:21,760 --> 00:20:26,400
but i think we need to move it

00:20:23,440 --> 00:20:27,600
from this uh the promise we need to kind

00:20:26,400 --> 00:20:32,000
of like take away the

00:20:27,600 --> 00:20:33,440
in the present tense now and

00:20:32,000 --> 00:20:35,360
so if you want more and more people to

00:20:33,440 --> 00:20:37,120
contribute towards it we need to

00:20:35,360 --> 00:20:38,720
simplify the architecture this is what

00:20:37,120 --> 00:20:39,280
we've got to know i mean from our

00:20:38,720 --> 00:20:41,840
learnings

00:20:39,280 --> 00:20:42,799
we need to like uh put automation in

00:20:41,840 --> 00:20:44,480
place we need to like

00:20:42,799 --> 00:20:46,000
improve the developer and then it

00:20:44,480 --> 00:20:48,799
becomes relevant and then

00:20:46,000 --> 00:20:49,360
you know when then we start seeing the

00:20:48,799 --> 00:20:52,000
the

00:20:49,360 --> 00:20:53,520
contributions coming back and to to

00:20:52,000 --> 00:20:55,679
retain its status as

00:20:53,520 --> 00:20:57,039
lot need lot needs to be done in terms

00:20:55,679 --> 00:20:59,039
of like uh

00:20:57,039 --> 00:21:00,480
this so these were the thought process

00:20:59,039 --> 00:21:01,919
which which we were having and we

00:21:00,480 --> 00:21:02,880
started writing it down like for

00:21:01,919 --> 00:21:05,840
instance

00:21:02,880 --> 00:21:06,240
automation of deployment and services uh

00:21:05,840 --> 00:21:08,880
like

00:21:06,240 --> 00:21:10,480
as i mentioned generators could help

00:21:08,880 --> 00:21:12,240
blueprints so we would introduce

00:21:10,480 --> 00:21:14,159
blueprint also

00:21:12,240 --> 00:21:15,679
and we kind of like envisioned that

00:21:14,159 --> 00:21:18,000
vincent is able to match

00:21:15,679 --> 00:21:18,880
finrak one point x and then one point x

00:21:18,000 --> 00:21:20,799
is kind of like all

00:21:18,880 --> 00:21:22,080
whatever the version is going to be

00:21:20,799 --> 00:21:23,679
right the monolithic

00:21:22,080 --> 00:21:25,840
so when we mention one point x we're

00:21:23,679 --> 00:21:28,960
talking about monolithic version

00:21:25,840 --> 00:21:33,280
of uh um

00:21:28,960 --> 00:21:34,559
you know um and

00:21:33,280 --> 00:21:36,320
in terms of functionality when we're

00:21:34,559 --> 00:21:38,480
talking and this is something

00:21:36,320 --> 00:21:40,080
not really hard to achieve but with the

00:21:38,480 --> 00:21:40,960
current rate which the project is being

00:21:40,080 --> 00:21:43,280
developed

00:21:40,960 --> 00:21:45,440
and as a couple of other community

00:21:43,280 --> 00:21:48,400
members on the list mentioning that

00:21:45,440 --> 00:21:50,640
might be a possibility that it can never

00:21:48,400 --> 00:21:52,159
reach that status also so we kind of

00:21:50,640 --> 00:21:53,840
like figure out

00:21:52,159 --> 00:21:56,400
uh you know we need to kind of like

00:21:53,840 --> 00:21:59,200
attract you know

00:21:56,400 --> 00:21:59,919
so i think uh we've replaced a couple of

00:21:59,200 --> 00:22:03,120
things

00:21:59,919 --> 00:22:04,080
on on from the core architecture the way

00:22:03,120 --> 00:22:06,799
we look

00:22:04,080 --> 00:22:08,080
and i think kevin could give us a little

00:22:06,799 --> 00:22:10,400
bit of insight

00:22:08,080 --> 00:22:12,480
uh that what did we actually replace you

00:22:10,400 --> 00:22:14,240
know where did we start

00:22:12,480 --> 00:22:16,400
when we look at the finra expension

00:22:14,240 --> 00:22:18,320
services so

00:22:16,400 --> 00:22:20,400
and i think kevin has been mentioning a

00:22:18,320 --> 00:22:21,760
lot about reinventing the wheel that you

00:22:20,400 --> 00:22:22,640
know there were a bunch of services

00:22:21,760 --> 00:22:24,400
which we could have

00:22:22,640 --> 00:22:26,480
outsourced to other frameworks like for

00:22:24,400 --> 00:22:28,159
instance messaging i mean we could have

00:22:26,480 --> 00:22:30,799
used a simple message oriented based

00:22:28,159 --> 00:22:32,559
architecture and developed a framework

00:22:30,799 --> 00:22:34,000
which could kind of like understand

00:22:32,559 --> 00:22:35,760
everything which is going on between

00:22:34,000 --> 00:22:37,120
different services but we did not i

00:22:35,760 --> 00:22:39,039
i mean definitely the original

00:22:37,120 --> 00:22:41,440
developers

00:22:39,039 --> 00:22:42,480
did not even keep up with the whole

00:22:41,440 --> 00:22:44,000
project so

00:22:42,480 --> 00:22:45,840
so we end up replacing a couple of

00:22:44,000 --> 00:22:48,400
components to kind of like simplify the

00:22:45,840 --> 00:22:55,840
lives of developers art lives also

00:22:48,400 --> 00:22:55,840
so kevin would you like to point out

00:22:58,320 --> 00:23:04,320
so sharon i think uh it's uh

00:23:01,520 --> 00:23:06,720
right now it's relevant how our journey

00:23:04,320 --> 00:23:08,960
started

00:23:06,720 --> 00:23:10,320
we started we actually started we did

00:23:08,960 --> 00:23:14,159
not have uh

00:23:10,320 --> 00:23:17,520
any any intention of

00:23:14,159 --> 00:23:19,200
having a different line of projects

00:23:17,520 --> 00:23:22,240
having a different line of projects

00:23:19,200 --> 00:23:24,559
which are uh

00:23:22,240 --> 00:23:25,600
different line of projects we intended

00:23:24,559 --> 00:23:29,200
to

00:23:25,600 --> 00:23:31,360
we were just starting out to get the

00:23:29,200 --> 00:23:32,240
project of uh all the projects of

00:23:31,360 --> 00:23:35,280
interaction

00:23:32,240 --> 00:23:38,799
upgraded to the latest version of or

00:23:35,280 --> 00:23:42,720
rather spring boot 2 version

00:23:38,799 --> 00:23:45,840
and we we thought that

00:23:42,720 --> 00:23:48,400
this might bring in some uh

00:23:45,840 --> 00:23:48,880
bring in some attention because uh maybe

00:23:48,400 --> 00:23:52,320
uh

00:23:48,880 --> 00:23:55,440
like and we'll be able to use a lot of

00:23:52,320 --> 00:23:57,440
uh a lot of

00:23:55,440 --> 00:24:00,559
new features which are being brought

00:23:57,440 --> 00:24:04,159
into the ecosystem by spring boot too

00:24:00,559 --> 00:24:04,960
so we started out this way and in

00:24:04,159 --> 00:24:08,400
between we

00:24:04,960 --> 00:24:11,919
realize that even if we get this

00:24:08,400 --> 00:24:15,120
upgraded to uh springboard 2

00:24:11,919 --> 00:24:18,640
this keeps on going why

00:24:15,120 --> 00:24:19,760
why this upgrade from finra uh spring

00:24:18,640 --> 00:24:22,400
boot

00:24:19,760 --> 00:24:23,520
uh the version with from with which it

00:24:22,400 --> 00:24:26,559
started i think it's

00:24:23,520 --> 00:24:28,960
1.4 or something and then

00:24:26,559 --> 00:24:30,000
after a while they stop stopped

00:24:28,960 --> 00:24:33,120
upgrading the

00:24:30,000 --> 00:24:35,279
developers stopped upgrading i think

00:24:33,120 --> 00:24:37,440
so even if we get this upgraded to

00:24:35,279 --> 00:24:40,320
spring boot 2

00:24:37,440 --> 00:24:40,640
this process again stops at some point

00:24:40,320 --> 00:24:43,360
and

00:24:40,640 --> 00:24:44,320
the project again becomes obsolete the

00:24:43,360 --> 00:24:46,000
spring boot

00:24:44,320 --> 00:24:47,919
version which is used by the project

00:24:46,000 --> 00:24:51,120
again becomes obsolete

00:24:47,919 --> 00:24:54,960
that's when we found jhipster

00:24:51,120 --> 00:24:59,840
and so basically uh

00:24:54,960 --> 00:25:01,039
this is this is how we started we didn't

00:24:59,840 --> 00:25:04,240
have any i

00:25:01,039 --> 00:25:07,600
uh any intention to move away from the

00:25:04,240 --> 00:25:09,120
finraxian code base so

00:25:07,600 --> 00:25:12,320
i think we already talked about

00:25:09,120 --> 00:25:16,559
cassandra how it became a

00:25:12,320 --> 00:25:20,000
pain for us to manage and so on

00:25:16,559 --> 00:25:21,840
and so we got rid of it because uh

00:25:20,000 --> 00:25:23,679
using the components the other two

00:25:21,840 --> 00:25:26,720
components we have

00:25:23,679 --> 00:25:26,720
we have introduced

00:25:26,960 --> 00:25:30,400
so here comes jay hipster

00:25:30,799 --> 00:25:35,679
as you can uh jhipster is a development

00:25:33,120 --> 00:25:39,200
platform could uh to quickly

00:25:35,679 --> 00:25:41,200
generate develop deploy and modern uh

00:25:39,200 --> 00:25:42,960
deploy modern web applications and

00:25:41,200 --> 00:25:44,640
microservice architectures this is the

00:25:42,960 --> 00:25:47,200
description they are given

00:25:44,640 --> 00:25:48,640
themselves and as you can see this is a

00:25:47,200 --> 00:25:52,320
pretty popular

00:25:48,640 --> 00:25:55,600
project and with the addition why we

00:25:52,320 --> 00:25:56,720
came across jhipster is with the idea

00:25:55,600 --> 00:26:00,240
that

00:25:56,720 --> 00:26:00,240
with jay hipster comes

00:26:00,320 --> 00:26:04,320
free upgradations if we start out in

00:26:03,120 --> 00:26:08,159
spring boot to

00:26:04,320 --> 00:26:10,080
when the jhipster the jhipster has a

00:26:08,159 --> 00:26:13,440
pretty active community

00:26:10,080 --> 00:26:16,640
as you can see from the stats and

00:26:13,440 --> 00:26:21,600
they they basically provide us with

00:26:16,640 --> 00:26:24,799
uh since they there are a lot of uh

00:26:21,600 --> 00:26:25,279
users they have a lot like this project

00:26:24,799 --> 00:26:28,720
gets

00:26:25,279 --> 00:26:30,000
tested uh by lots of people and so we

00:26:28,720 --> 00:26:33,039
have a strong

00:26:30,000 --> 00:26:36,480
strong uh base to work upon and

00:26:33,039 --> 00:26:39,039
when jhipster upgrades from

00:26:36,480 --> 00:26:40,240
one version like whatever upgrades they

00:26:39,039 --> 00:26:44,000
are providing

00:26:40,240 --> 00:26:44,720
we get the same uh we get the upgrades

00:26:44,000 --> 00:26:47,679
for free

00:26:44,720 --> 00:26:48,559
inside our jhipster projects using just

00:26:47,679 --> 00:26:50,960
a command

00:26:48,559 --> 00:26:51,760
you type in jhipster upgrade and there

00:26:50,960 --> 00:26:54,799
it goes

00:26:51,760 --> 00:26:57,120
we have uh upgraded our service

00:26:54,799 --> 00:26:58,799
we don't need to do anything else maybe

00:26:57,120 --> 00:27:02,720
that like uh

00:26:58,799 --> 00:27:06,000
we'll have to manage a couple of

00:27:02,720 --> 00:27:08,799
couple of errors which are going to come

00:27:06,000 --> 00:27:10,960
up or something like that but still the

00:27:08,799 --> 00:27:13,200
bulk of the work is uh will be managed

00:27:10,960 --> 00:27:15,279
by j hipster

00:27:13,200 --> 00:27:16,480
this is how we started out with j

00:27:15,279 --> 00:27:18,880
hipster like

00:27:16,480 --> 00:27:20,240
why we wanted to introduce j hipster and

00:27:18,880 --> 00:27:24,290
into the

00:27:20,240 --> 00:27:26,640
into the ecosystem so and

00:27:24,290 --> 00:27:29,760
[Music]

00:27:26,640 --> 00:27:29,760
can you go back

00:27:33,679 --> 00:27:38,880
so free free upgrades are one thing and

00:27:36,399 --> 00:27:42,000
this is how we started out

00:27:38,880 --> 00:27:42,799
another plus is that jhipster has uh a

00:27:42,000 --> 00:27:45,360
lot of

00:27:42,799 --> 00:27:46,399
like it's pretty popular so we don't

00:27:45,360 --> 00:27:50,320
lock uh

00:27:46,399 --> 00:27:53,919
one once we introduce jhipster into our

00:27:50,320 --> 00:27:57,279
ecosystem our finraxian ecosystem

00:27:53,919 --> 00:28:00,000
it's not just like when a

00:27:57,279 --> 00:28:00,960
developer one advantage is that

00:28:00,000 --> 00:28:03,520
developers who are

00:28:00,960 --> 00:28:04,799
already using jhips they are immediately

00:28:03,520 --> 00:28:08,480
able to adapt to

00:28:04,799 --> 00:28:11,200
uh like contribute to

00:28:08,480 --> 00:28:12,000
our project finraxion project that is

00:28:11,200 --> 00:28:15,520
oneplus

00:28:12,000 --> 00:28:17,600
the another plus is that the

00:28:15,520 --> 00:28:18,960
the users who are not familiar with

00:28:17,600 --> 00:28:20,640
jhipster

00:28:18,960 --> 00:28:22,640
like they have a pretty good

00:28:20,640 --> 00:28:23,520
documentation to get started with and

00:28:22,640 --> 00:28:27,120
when they are

00:28:23,520 --> 00:28:30,799
all uh they they are already uh

00:28:27,120 --> 00:28:32,720
like when they are already

00:28:30,799 --> 00:28:34,559
familiar familiarize themselves with the

00:28:32,720 --> 00:28:37,200
concepts of jhipster and

00:28:34,559 --> 00:28:38,399
after their used it in project and

00:28:37,200 --> 00:28:41,679
contributed to the

00:28:38,399 --> 00:28:45,919
finraxian project of finraxion

00:28:41,679 --> 00:28:47,360
our version then they don't go back with

00:28:45,919 --> 00:28:51,039
just the information of

00:28:47,360 --> 00:28:53,279
uh like how it works out

00:28:51,039 --> 00:28:55,200
how projects go on in finraxin they are

00:28:53,279 --> 00:28:57,600
able to use this information

00:28:55,200 --> 00:28:58,480
the this knowledge in some other

00:28:57,600 --> 00:29:00,960
projects which

00:28:58,480 --> 00:29:03,520
they might work on individually so

00:29:00,960 --> 00:29:06,799
there's another attraction

00:29:03,520 --> 00:29:10,080
this is one uh one more attraction

00:29:06,799 --> 00:29:10,559
then jhipster also provides us us with

00:29:10,080 --> 00:29:13,600
the

00:29:10,559 --> 00:29:16,640
functionality of blueprints

00:29:13,600 --> 00:29:20,399
and we have actually used

00:29:16,640 --> 00:29:23,200
we are actually using jhipster

00:29:20,399 --> 00:29:25,520
generate blueprints to create a

00:29:23,200 --> 00:29:29,520
generator for our project

00:29:25,520 --> 00:29:32,880
this finraxian uh our line of

00:29:29,520 --> 00:29:36,720
projects we are talking about we are

00:29:32,880 --> 00:29:36,720
actually going to use it for something

00:29:36,960 --> 00:29:42,080
so that i'll uh

00:29:40,080 --> 00:29:44,720
i would like to i would like to answer a

00:29:42,080 --> 00:29:48,720
couple of questions quickly before this

00:29:44,720 --> 00:29:50,880
so um there are like um

00:29:48,720 --> 00:29:52,880
victor has actually said that jfk is

00:29:50,880 --> 00:29:54,640
easy to implement but hard to do the

00:29:52,880 --> 00:29:57,039
maintenance uh

00:29:54,640 --> 00:29:58,320
maintenance is being done by j hipster

00:29:57,039 --> 00:29:59,840
themselves

00:29:58,320 --> 00:30:01,200
um and couple of people are saying that

00:29:59,840 --> 00:30:02,960
with javascript you have to create

00:30:01,200 --> 00:30:04,399
generators for everyone

00:30:02,960 --> 00:30:06,399
so we don't have to use generators

00:30:04,399 --> 00:30:08,159
generators are inbuilt there

00:30:06,399 --> 00:30:10,000
they maintain their generators

00:30:08,159 --> 00:30:11,679
generators. they just

00:30:10,000 --> 00:30:13,520
give you a boilerplate of an

00:30:11,679 --> 00:30:15,520
applications in a specific language

00:30:13,520 --> 00:30:18,480
which kind of does the job

00:30:15,520 --> 00:30:20,080
what we were looking for to have this

00:30:18,480 --> 00:30:21,279
microsoft for the microservices

00:30:20,080 --> 00:30:23,200
architecture um

00:30:21,279 --> 00:30:24,960
alexander is asking concerning jay

00:30:23,200 --> 00:30:26,399
hipster isn't there a certain danger

00:30:24,960 --> 00:30:29,039
getting locked in

00:30:26,399 --> 00:30:31,039
um why that every use case can be

00:30:29,039 --> 00:30:32,640
covered no we're not saying that every

00:30:31,039 --> 00:30:34,320
use case should be so we have to

00:30:32,640 --> 00:30:38,240
understand jipster is not

00:30:34,320 --> 00:30:38,960
about i mean the fact is that we want to

00:30:38,240 --> 00:30:42,000
provide

00:30:38,960 --> 00:30:43,360
a easier framework to start with

00:30:42,000 --> 00:30:46,640
definitely

00:30:43,360 --> 00:30:50,559
um can i step in

00:30:46,640 --> 00:30:54,000
just for a moment so uh

00:30:50,559 --> 00:30:56,490
basically what we are doing is uh

00:30:54,000 --> 00:30:57,919
one of the one of the

00:30:56,490 --> 00:30:59,680
[Music]

00:30:57,919 --> 00:31:01,440
bad implementation or uh

00:30:59,680 --> 00:31:04,559
[Music]

00:31:01,440 --> 00:31:07,200
what they did wrong in finraxian is that

00:31:04,559 --> 00:31:08,880
they actually made all the dependencies

00:31:07,200 --> 00:31:12,720
heart dependencies

00:31:08,880 --> 00:31:15,919
like one person who has to

00:31:12,720 --> 00:31:19,039
who just wants to improve the project or

00:31:15,919 --> 00:31:22,240
who just wants to put in more domain

00:31:19,039 --> 00:31:25,279
value into the ecosystem

00:31:22,240 --> 00:31:27,840
he needs to he should actually go

00:31:25,279 --> 00:31:28,720
like get himself acquainted with all the

00:31:27,840 --> 00:31:32,240
projects

00:31:28,720 --> 00:31:34,559
which are which are hard dependencies

00:31:32,240 --> 00:31:36,960
but what we are doing is we are we are

00:31:34,559 --> 00:31:38,080
not introducing any hard dependencies we

00:31:36,960 --> 00:31:39,679
are just making

00:31:38,080 --> 00:31:41,679
we are we are just bringing in a

00:31:39,679 --> 00:31:44,960
standard way in which

00:31:41,679 --> 00:31:48,480
most of the services can be uh developed

00:31:44,960 --> 00:31:50,240
easy in in an easy way but we are not

00:31:48,480 --> 00:31:53,200
locking

00:31:50,240 --> 00:31:54,720
locking these developers or users into

00:31:53,200 --> 00:31:58,799
this ecosystem

00:31:54,720 --> 00:32:01,919
they can improve upon or put in more

00:31:58,799 --> 00:32:05,039
domain value the way

00:32:01,919 --> 00:32:05,360
they want we are not locking them into

00:32:05,039 --> 00:32:08,799
uh

00:32:05,360 --> 00:32:10,159
to anything but the projects which uses

00:32:08,799 --> 00:32:13,600
this will be logged

00:32:10,159 --> 00:32:14,000
definitely that doesn't mean that it

00:32:13,600 --> 00:32:16,080
will be

00:32:14,000 --> 00:32:17,600
very hard to get it migrated to

00:32:16,080 --> 00:32:20,480
something else or something like that

00:32:17,600 --> 00:32:22,480
we are just trying to bring in some uh

00:32:20,480 --> 00:32:24,320
defaults

00:32:22,480 --> 00:32:26,080
sorry so there's one more question asked

00:32:24,320 --> 00:32:27,919
for james that he's asking that

00:32:26,080 --> 00:32:30,399
how would you how would jay hipster

00:32:27,919 --> 00:32:30,880
compare so jhipster is not comparable to

00:32:30,399 --> 00:32:34,080
camel

00:32:30,880 --> 00:32:36,240
uh it's not uh

00:32:34,080 --> 00:32:37,279
this is not an orchestration service for

00:32:36,240 --> 00:32:39,279
microservices

00:32:37,279 --> 00:32:40,480
jhipster does work essentially for

00:32:39,279 --> 00:32:42,880
people who are not aware they could

00:32:40,480 --> 00:32:45,519
simply go to japster's website

00:32:42,880 --> 00:32:46,559
um i'll just post it here so jhipster

00:32:45,519 --> 00:32:51,039
just simply

00:32:46,559 --> 00:32:52,159
uh let's say similar to finraxian

00:32:51,039 --> 00:32:56,399
template but

00:32:52,159 --> 00:32:59,519
more a project which gives us

00:32:56,399 --> 00:33:02,320
presents with uh us with more options

00:32:59,519 --> 00:33:03,840
dynamic options which could be uh chosen

00:33:02,320 --> 00:33:06,000
by the developer

00:33:03,840 --> 00:33:06,000
like

00:33:06,960 --> 00:33:14,000
use what kind of features he

00:33:10,000 --> 00:33:16,799
wants to use for this particular project

00:33:14,000 --> 00:33:19,919
what kind of architecture he's uh he's

00:33:16,799 --> 00:33:22,240
trying to implement and so on

00:33:19,919 --> 00:33:24,080
yeah for sure like i mean it gives you a

00:33:22,240 --> 00:33:25,600
step based option and

00:33:24,080 --> 00:33:27,200
you know like you can use a different

00:33:25,600 --> 00:33:27,919
language also like for instance you

00:33:27,200 --> 00:33:29,279
don't want to use

00:33:27,919 --> 00:33:31,360
java you want you don't want to use

00:33:29,279 --> 00:33:33,039
kotlin you you want to use node.js so

00:33:31,360 --> 00:33:36,240
you could just simply use

00:33:33,039 --> 00:33:39,440
node.js so rather than getting fixed on

00:33:36,240 --> 00:33:42,480
on the idea that uh it basically sets up

00:33:39,440 --> 00:33:45,519
sets up the whole initial uh

00:33:42,480 --> 00:33:46,799
uh boilerplate for all of for the

00:33:45,519 --> 00:33:49,200
application

00:33:46,799 --> 00:33:50,960
and uh but definitely the rest of the

00:33:49,200 --> 00:33:52,559
work needs to be done by the developers

00:33:50,960 --> 00:33:53,919
but developer gets a fresh start he

00:33:52,559 --> 00:33:55,440
doesn't have to worry about a lot of

00:33:53,919 --> 00:33:57,440
things about you know

00:33:55,440 --> 00:33:59,120
like uh from the from for the manual

00:33:57,440 --> 00:34:00,640
work upgrading the services

00:33:59,120 --> 00:34:02,960
this that which is kind of like a big

00:34:00,640 --> 00:34:04,399
issue right now with finrax and this is

00:34:02,960 --> 00:34:06,000
this is a personal experience i mean

00:34:04,399 --> 00:34:07,519
definitely a lot of people

00:34:06,000 --> 00:34:09,440
might not be feeling the same way which

00:34:07,519 --> 00:34:10,399
is this is just could be a subjective

00:34:09,440 --> 00:34:12,320
experience

00:34:10,399 --> 00:34:14,639
but this brings in a lot of integration

00:34:12,320 --> 00:34:18,320
also not only

00:34:14,639 --> 00:34:19,679
you know the aspect of uh and

00:34:18,320 --> 00:34:21,520
some people might say that this is a

00:34:19,679 --> 00:34:23,280
lock-in with jay hipster no definitely

00:34:21,520 --> 00:34:23,760
this is not a lock-in because javascript

00:34:23,280 --> 00:34:26,000
is a

00:34:23,760 --> 00:34:26,960
quite big vibrant community much much

00:34:26,000 --> 00:34:29,679
bigger

00:34:26,960 --> 00:34:32,000
than uh i think finra right now they

00:34:29,679 --> 00:34:37,280
have active like more than active 200

00:34:32,000 --> 00:34:37,280
or 300 men contributors every month

00:34:37,679 --> 00:34:42,639
uh so and this is not only about j

00:34:40,960 --> 00:34:45,040
hipster actually j hipster does a very

00:34:42,639 --> 00:34:47,440
small role just plays a very small role

00:34:45,040 --> 00:34:50,159
in finraxin or improvement

00:34:47,440 --> 00:34:52,159
how it just helps us to kind of automate

00:34:50,159 --> 00:34:54,159
couple of tasks which is to create a new

00:34:52,159 --> 00:34:56,079
boilerplate every time we want to create

00:34:54,159 --> 00:34:58,240
a different kind of language and we

00:34:56,079 --> 00:35:00,079
could add many blueprints which could

00:34:58,240 --> 00:35:02,960
like you know for different language

00:35:00,079 --> 00:35:04,640
different integrations and uh different

00:35:02,960 --> 00:35:07,440
things you know

00:35:04,640 --> 00:35:09,359
which we want to do and it just plays

00:35:07,440 --> 00:35:11,920
this plays a small role

00:35:09,359 --> 00:35:13,680
uh you know it's it's basically very it

00:35:11,920 --> 00:35:15,200
doesn't really play the big role here

00:35:13,680 --> 00:35:17,119
we're just identifying

00:35:15,200 --> 00:35:19,119
the idea of like for instance to create

00:35:17,119 --> 00:35:20,880
an application for ourselves

00:35:19,119 --> 00:35:22,320
so we thought about it that whether we

00:35:20,880 --> 00:35:24,480
should give an introduction

00:35:22,320 --> 00:35:26,400
we ended up in introducing a lot about j

00:35:24,480 --> 00:35:29,359
hipster eventually

00:35:26,400 --> 00:35:30,000
we didn't want to have j extras because

00:35:29,359 --> 00:35:32,079
for instance

00:35:30,000 --> 00:35:33,920
if somebody wishes to use the different

00:35:32,079 --> 00:35:34,240
kind of generator they could simply use

00:35:33,920 --> 00:35:37,200
but

00:35:34,240 --> 00:35:38,320
the the whole idea remains the same that

00:35:37,200 --> 00:35:42,079
it could

00:35:38,320 --> 00:35:44,800
create and and it does not really become

00:35:42,079 --> 00:35:47,040
difficult i think because

00:35:44,800 --> 00:35:48,560
there are i mean they manage the

00:35:47,040 --> 00:35:49,599
dependencies themselves and they test it

00:35:48,560 --> 00:35:52,880
pretty well

00:35:49,599 --> 00:35:54,000
and jhipster uh they don't so jhipster

00:35:52,880 --> 00:35:56,240
doesn't do

00:35:54,000 --> 00:35:57,040
publish the permissions the permission

00:35:56,240 --> 00:36:00,880
group

00:35:57,040 --> 00:36:02,800
to identity uh it it it handles it

00:36:00,880 --> 00:36:04,560
i think there's a question here which

00:36:02,800 --> 00:36:06,079
talks about how does the j hipster

00:36:04,560 --> 00:36:08,000
application publish

00:36:06,079 --> 00:36:09,359
uh see jhipster application doesn't

00:36:08,000 --> 00:36:12,240
really need to publish

00:36:09,359 --> 00:36:13,920
i think we use this message oriented i

00:36:12,240 --> 00:36:16,079
think

00:36:13,920 --> 00:36:17,040
kevin could you answer this question i

00:36:16,079 --> 00:36:19,119
think you can see this

00:36:17,040 --> 00:36:20,560
right how do you the application publish

00:36:19,119 --> 00:36:23,680
permissions and permission groups to

00:36:20,560 --> 00:36:25,839
identity infinixine

00:36:23,680 --> 00:36:26,960
one of the things we haven't put a lot

00:36:25,839 --> 00:36:29,280
of thought into

00:36:26,960 --> 00:36:30,560
like we haven't uh gone deep into the

00:36:29,280 --> 00:36:33,520
security part

00:36:30,560 --> 00:36:33,920
of interaction which already exists but

00:36:33,520 --> 00:36:37,280
we

00:36:33,920 --> 00:36:40,079
plan to and what we uh

00:36:37,280 --> 00:36:41,200
one of the things i have noticed this

00:36:40,079 --> 00:36:43,760
there are some

00:36:41,200 --> 00:36:45,760
like uh the uh there are some services

00:36:43,760 --> 00:36:48,640
which are introduced which

00:36:45,760 --> 00:36:50,000
which is not actually needed for example

00:36:48,640 --> 00:36:53,520
uh

00:36:50,000 --> 00:36:54,160
an auto server by itself provides us

00:36:53,520 --> 00:36:57,119
with

00:36:54,160 --> 00:36:59,119
not just with the ability to

00:36:57,119 --> 00:37:02,480
authenticate with the services

00:36:59,119 --> 00:37:05,839
but it it rather gives us a way

00:37:02,480 --> 00:37:08,800
to authenticate and authorize so why

00:37:05,839 --> 00:37:11,200
why build a whole new framework which is

00:37:08,800 --> 00:37:14,240
harder for people to understand

00:37:11,200 --> 00:37:17,839
why not just use uh oh

00:37:14,240 --> 00:37:17,839
to uh

00:37:19,680 --> 00:37:22,880
concepts and just

00:37:27,599 --> 00:37:34,960
thin layer on top of it uh maybe

00:37:31,839 --> 00:37:36,880
that thin layer is also not needed but

00:37:34,960 --> 00:37:38,800
they have made the in the fin drag

00:37:36,880 --> 00:37:39,119
inside the finraxy and they have made it

00:37:38,800 --> 00:37:42,000
too

00:37:39,119 --> 00:37:43,359
complicated i guess the security

00:37:42,000 --> 00:37:46,240
framework also

00:37:43,359 --> 00:37:48,720
and in my opinion this is not actually

00:37:46,240 --> 00:37:51,200
needed we can handle the security

00:37:48,720 --> 00:37:52,240
uh just with uh using the help of all to

00:37:51,200 --> 00:37:56,560
server which is

00:37:52,240 --> 00:37:56,560
being provided by jhipster registry

00:37:58,560 --> 00:38:05,040
so we can see

00:38:01,760 --> 00:38:05,040
like we'll take

00:38:11,080 --> 00:38:17,040
[Music]

00:38:14,480 --> 00:38:17,520
yeah he has already used it jay hipster

00:38:17,040 --> 00:38:21,119
in some

00:38:17,520 --> 00:38:22,160
projects and he came across some points

00:38:21,119 --> 00:38:24,960
where

00:38:22,160 --> 00:38:25,280
it was difficult for them to recover

00:38:24,960 --> 00:38:28,640
some

00:38:25,280 --> 00:38:32,400
breaking changes what i'm saying is

00:38:28,640 --> 00:38:35,760
why why like when a project uses the

00:38:32,400 --> 00:38:37,720
ability to upgrade our services

00:38:35,760 --> 00:38:38,960
and get move on with

00:38:37,720 --> 00:38:41,839
[Music]

00:38:38,960 --> 00:38:43,040
the upgradation process and those things

00:38:41,839 --> 00:38:46,240
easily

00:38:43,040 --> 00:38:49,520
for most of the part and

00:38:46,240 --> 00:38:51,520
we we have to face uh hardships for

00:38:49,520 --> 00:38:53,280
some time it doesn't mean that we should

00:38:51,520 --> 00:38:56,320
get rid of the whole project

00:38:53,280 --> 00:38:58,839
like uh it doesn't like

00:38:56,320 --> 00:39:01,680
there's no need to get rid of the whole

00:38:58,839 --> 00:39:03,920
project

00:39:01,680 --> 00:39:05,359
in a project which doesn't do like uh

00:39:03,920 --> 00:39:08,000
doesn't get upgraded at

00:39:05,359 --> 00:39:09,280
all if we get free upgrades for most of

00:39:08,000 --> 00:39:12,400
the time and then

00:39:09,280 --> 00:39:15,280
we have some breaking changes it's like

00:39:12,400 --> 00:39:16,880
it's normal we don't have silver bullets

00:39:15,280 --> 00:39:18,800
anywhere

00:39:16,880 --> 00:39:20,079
okay so kevin let's move on to the next

00:39:18,800 --> 00:39:22,320
component

00:39:20,079 --> 00:39:23,280
could uh guys could could be researched

00:39:22,320 --> 00:39:25,200
about

00:39:23,280 --> 00:39:27,359
and i think i would like to answer

00:39:25,200 --> 00:39:29,359
merrill here that uh how does j

00:39:27,359 --> 00:39:30,560
apple so jhipster doesn't really so you

00:39:29,359 --> 00:39:32,079
have we have to understand we have to

00:39:30,560 --> 00:39:34,400
identify that jfstr is not an

00:39:32,079 --> 00:39:37,520
application jf so just a generator

00:39:34,400 --> 00:39:39,280
java spring boot application is there

00:39:37,520 --> 00:39:40,560
or courtlane or different language

00:39:39,280 --> 00:39:44,320
applications are there

00:39:40,560 --> 00:39:47,280
these applications an application

00:39:44,320 --> 00:39:49,119
base so how does it publish the

00:39:47,280 --> 00:39:50,880
permissions it could publish we have

00:39:49,119 --> 00:39:53,599
found out the way to publish

00:39:50,880 --> 00:39:55,200
information through a system bus which i

00:39:53,599 --> 00:39:56,400
think kevin could introduce in the next

00:39:55,200 --> 00:39:59,359
slide what is this about

00:39:56,400 --> 00:39:59,359
exon framework

00:39:59,680 --> 00:40:04,880
again this uh axon framework is one of

00:40:04,000 --> 00:40:07,440
the

00:40:04,880 --> 00:40:08,240
two uh components we introduced one was

00:40:07,440 --> 00:40:11,440
jay hipster

00:40:08,240 --> 00:40:14,800
now from saxon this is again

00:40:11,440 --> 00:40:17,680
where uh we have talked about it this is

00:40:14,800 --> 00:40:18,400
another point where the finrax cn

00:40:17,680 --> 00:40:21,040
developers

00:40:18,400 --> 00:40:22,000
reinvented the wheel axon framework has

00:40:21,040 --> 00:40:25,440
been around

00:40:22,000 --> 00:40:29,359
since 2010 and so it

00:40:25,440 --> 00:40:32,720
has a pretty mature code base code base

00:40:29,359 --> 00:40:36,400
and so like why not just use

00:40:32,720 --> 00:40:40,160
axon framework for providing the cqrs

00:40:36,400 --> 00:40:43,280
side of architecture

00:40:40,160 --> 00:40:47,280
and not reinvent the wheel by us

00:40:43,280 --> 00:40:50,839
uh like let's just use it

00:40:47,280 --> 00:40:52,880
and go on with it and one of like axon

00:40:50,839 --> 00:40:55,520
framework

00:40:52,880 --> 00:40:57,040
it's moderately popular it has an active

00:40:55,520 --> 00:41:00,560
community

00:40:57,040 --> 00:41:01,920
and the same the say like it has a good

00:41:00,560 --> 00:41:03,760
documentation and

00:41:01,920 --> 00:41:05,760
enterprise support is also also

00:41:03,760 --> 00:41:07,680
available if we need it

00:41:05,760 --> 00:41:09,920
and the same points which i mentioned

00:41:07,680 --> 00:41:14,079
for j hipster like

00:41:09,920 --> 00:41:16,319
someone who uh gets acquainted with our

00:41:14,079 --> 00:41:18,560
finraxian improvement project

00:41:16,319 --> 00:41:21,760
he has to go through the documentation

00:41:18,560 --> 00:41:24,560
he has to learn about the axon framework

00:41:21,760 --> 00:41:25,200
using with the help of the documentation

00:41:24,560 --> 00:41:28,079
again

00:41:25,200 --> 00:41:30,240
here we have an added advantage that we

00:41:28,079 --> 00:41:31,040
don't need to do the documentation by

00:41:30,240 --> 00:41:33,680
ourselves

00:41:31,040 --> 00:41:35,040
this is one of the places where fin drag

00:41:33,680 --> 00:41:38,000
cn

00:41:35,040 --> 00:41:39,839
failed failed because they couldn't come

00:41:38,000 --> 00:41:42,960
up with a comprehensive

00:41:39,839 --> 00:41:44,560
documentation which helped the users

00:41:42,960 --> 00:41:47,680
with the

00:41:44,560 --> 00:41:49,760
whatever they wanted so like

00:41:47,680 --> 00:41:52,640
to get acquainted with the project but

00:41:49,760 --> 00:41:56,400
here we are getting it for free because

00:41:52,640 --> 00:41:59,359
it comes in with taxon framework

00:41:56,400 --> 00:42:00,839
so we get acquainted using the

00:41:59,359 --> 00:42:04,160
documentation and

00:42:00,839 --> 00:42:06,319
when after getting acquainted

00:42:04,160 --> 00:42:08,720
again this knowledge could be used in

00:42:06,319 --> 00:42:11,760
some other project which he wants to

00:42:08,720 --> 00:42:14,640
this is another like this is another

00:42:11,760 --> 00:42:16,319
attraction just like jhipster that he

00:42:14,640 --> 00:42:17,680
gets acquainted with the project which

00:42:16,319 --> 00:42:20,400
is popular and so

00:42:17,680 --> 00:42:20,800
this could be applied somewhere else too

00:42:20,400 --> 00:42:24,800
not

00:42:20,800 --> 00:42:24,800
just uh in our project

00:42:25,200 --> 00:42:31,839
so axon framework provides us with uh

00:42:27,280 --> 00:42:31,839
secure facilities and uh

00:42:31,920 --> 00:42:35,680
there are plug-ins like the back-end

00:42:34,480 --> 00:42:38,880
side could be

00:42:35,680 --> 00:42:42,079
cassandra it could be kafka

00:42:38,880 --> 00:42:45,110
but we prefer axon server which is

00:42:42,079 --> 00:42:46,319
specifically built for providing uh

00:42:45,110 --> 00:42:49,920
[Music]

00:42:46,319 --> 00:42:52,880
event based even even sourcing

00:42:49,920 --> 00:42:54,400
but one of the cones of using axon

00:42:52,880 --> 00:42:57,920
servers uh

00:42:54,400 --> 00:42:59,119
professors of a pro the advantage is

00:42:57,920 --> 00:43:01,920
that it's

00:42:59,119 --> 00:43:02,160
it's built just for this purpose and so

00:43:01,920 --> 00:43:07,460
it

00:43:02,160 --> 00:43:10,480
uh like i can post in a link to that

00:43:07,460 --> 00:43:13,760
[Music]

00:43:10,480 --> 00:43:16,800
i'll later on post a link to the uh

00:43:13,760 --> 00:43:20,400
youtube video in which they have

00:43:16,800 --> 00:43:23,680
uh this team has actually compared their

00:43:20,400 --> 00:43:26,560
accent servers performance with most of

00:43:23,680 --> 00:43:28,800
the other alternatives they provide and

00:43:26,560 --> 00:43:31,119
axon server perform pretty well compared

00:43:28,800 --> 00:43:31,119
to them

00:43:31,280 --> 00:43:34,079
so i think

00:43:34,800 --> 00:43:41,119
so i would like well

00:43:37,920 --> 00:43:43,680
part of the slide here which is about

00:43:41,119 --> 00:43:44,640
testing i think cast in a series of

00:43:43,680 --> 00:43:48,240
pretty well

00:43:44,640 --> 00:43:51,280
um party core commander in front

00:43:48,240 --> 00:43:54,560
one point x and when we

00:43:51,280 --> 00:43:56,480
start talk and we kind of like asked for

00:43:54,560 --> 00:43:59,680
his help that if he could want to

00:43:56,480 --> 00:44:02,960
kind of like try this whole

00:43:59,680 --> 00:44:04,240
test which we were doing um while

00:44:02,960 --> 00:44:06,400
generating the example

00:44:04,240 --> 00:44:07,520
so migrating these services from fenexi

00:44:06,400 --> 00:44:09,520
and we wanted to that

00:44:07,520 --> 00:44:12,240
would we be able to migrate these

00:44:09,520 --> 00:44:15,200
services and how do we do that

00:44:12,240 --> 00:44:17,040
so first and foremost we had to replace

00:44:15,200 --> 00:44:17,920
couple of things so we replaced those uh

00:44:17,040 --> 00:44:20,960
packages which

00:44:17,920 --> 00:44:22,240
are part of the the service existing

00:44:20,960 --> 00:44:25,440
services

00:44:22,240 --> 00:44:27,440
then we introduce this exon frame

00:44:25,440 --> 00:44:30,079
and the example does what it basically

00:44:27,440 --> 00:44:33,200
handles the interaction between services

00:44:30,079 --> 00:44:36,560
and then we use a oauth 2 based

00:44:33,200 --> 00:44:39,839
simple user uh authentication

00:44:36,560 --> 00:44:40,800
authorization layer um and each services

00:44:39,839 --> 00:44:43,119
could maintain

00:44:40,800 --> 00:44:44,240
permissions or whatever they wish to do

00:44:43,119 --> 00:44:46,240
in an isolated

00:44:44,240 --> 00:44:47,599
you can simply publish this information

00:44:46,240 --> 00:44:49,359
using the exam

00:44:47,599 --> 00:44:51,200
and all of these other services would

00:44:49,359 --> 00:44:54,319
get you know and

00:44:51,200 --> 00:44:55,920
uh coming back to his own experience he

00:44:54,319 --> 00:44:56,400
found out that the whole approach was

00:44:55,920 --> 00:44:58,319
simple

00:44:56,400 --> 00:45:00,079
i mean he had life and vaccine and he

00:44:58,319 --> 00:45:03,040
was able to successful

00:45:00,079 --> 00:45:04,000
my deposit service which is kind of

00:45:03,040 --> 00:45:06,319
available on

00:45:04,000 --> 00:45:08,000
one of our repository and he did not

00:45:06,319 --> 00:45:10,400
face any issue you know while doing that

00:45:08,000 --> 00:45:12,079
i remember working with him on

00:45:10,400 --> 00:45:13,760
template while upgrading he couldn't

00:45:12,079 --> 00:45:15,119
figure out a couple of things i mean he

00:45:13,760 --> 00:45:19,119
did not know

00:45:15,119 --> 00:45:19,119
and he found what he's saying

00:45:21,040 --> 00:45:25,680
which was very simple all he had to do

00:45:24,160 --> 00:45:28,240
is generate this application

00:45:25,680 --> 00:45:29,440
put on the exxon layer on it and then

00:45:28,240 --> 00:45:31,599
you know

00:45:29,440 --> 00:45:33,200
draw it out that's all i mean how

00:45:31,599 --> 00:45:34,800
whatever

00:45:33,200 --> 00:45:37,599
and the services are interacting with

00:45:34,800 --> 00:45:39,280
each other so

00:45:37,599 --> 00:45:41,040
the things which we kind of like

00:45:39,280 --> 00:45:44,560
achieved and

00:45:41,040 --> 00:45:47,040
uh like with this whole uh

00:45:44,560 --> 00:45:47,040
testing

00:45:47,920 --> 00:45:52,160
and i definitely understand that we all

00:45:50,400 --> 00:45:54,720
have questions we can take the questions

00:45:52,160 --> 00:45:57,200
now after this

00:45:54,720 --> 00:45:59,119
several services and one of them is

00:45:57,200 --> 00:46:03,680
accounting services

00:45:59,119 --> 00:46:07,440
and the accounting services

00:46:03,680 --> 00:46:07,440
essentially migrated by kevin only

00:46:08,000 --> 00:46:12,240
we get to test these services with

00:46:09,839 --> 00:46:14,240
respect to positive

00:46:12,240 --> 00:46:15,680
ideas that we wanted to migrate services

00:46:14,240 --> 00:46:18,400
direct one point x

00:46:15,680 --> 00:46:20,400
i mean one of the one of the uh

00:46:18,400 --> 00:46:22,720
committed or one of the uh

00:46:20,400 --> 00:46:24,880
community members speaking about what if

00:46:22,720 --> 00:46:27,040
we could migrate one point x to c you

00:46:24,880 --> 00:46:28,960
know something like in microservices

00:46:27,040 --> 00:46:31,280
these services are in open api standard

00:46:28,960 --> 00:46:33,839
it generates swagger-based documentation

00:46:31,280 --> 00:46:33,839
and they have

00:46:37,839 --> 00:46:42,240
identity service we couldn't migrate the

00:46:40,839 --> 00:46:45,440
ui uh

00:46:42,240 --> 00:46:47,680
it's we because uh merrill i think

00:46:45,440 --> 00:46:50,079
what we wanted to do is that we wanted

00:46:47,680 --> 00:46:52,160
to first of all achieve the results of

00:46:50,079 --> 00:46:54,160
the api which we achieved

00:46:52,160 --> 00:46:56,079
and we realized that there is another

00:46:54,160 --> 00:46:59,599
set of team who was working

00:46:56,079 --> 00:47:01,200
on the user interface and um

00:46:59,599 --> 00:47:03,680
we could just simply plug with that

00:47:01,200 --> 00:47:05,440
because we realized that we had the

00:47:03,680 --> 00:47:06,560
power to kind of like simply generate

00:47:05,440 --> 00:47:08,000
these applications so

00:47:06,560 --> 00:47:10,640
easily that we could just simply have

00:47:08,000 --> 00:47:12,400
those apis same level of apis

00:47:10,640 --> 00:47:15,119
or different level of api is available

00:47:12,400 --> 00:47:16,640
to i mean to the existing user interface

00:47:15,119 --> 00:47:17,920
the most important thing which we wanted

00:47:16,640 --> 00:47:19,440
to do is that we wanted to support

00:47:17,920 --> 00:47:20,000
different kind of services we wanted to

00:47:19,440 --> 00:47:22,960
see that

00:47:20,000 --> 00:47:23,440
like uh kevin has actually implemented

00:47:22,960 --> 00:47:27,680
uh

00:47:23,440 --> 00:47:29,520
accounting on on a database called neo4j

00:47:27,680 --> 00:47:31,119
which is a relational database i mean

00:47:29,520 --> 00:47:33,760
graph based database

00:47:31,119 --> 00:47:34,960
and like we wanted to run different kind

00:47:33,760 --> 00:47:36,720
of supports for different kind of

00:47:34,960 --> 00:47:38,160
services like for instance your service

00:47:36,720 --> 00:47:40,079
want to use elasticsearch

00:47:38,160 --> 00:47:42,079
why do you want to use postgres you

00:47:40,079 --> 00:47:43,599
don't want to use postcards don't use it

00:47:42,079 --> 00:47:45,839
all you have to do is publish this

00:47:43,599 --> 00:47:48,720
information we've removed couple of

00:47:45,839 --> 00:47:49,599
existing services including provisioner

00:47:48,720 --> 00:47:51,680
i think we made it

00:47:49,599 --> 00:47:53,839
automatic that the services would kind

00:47:51,680 --> 00:47:55,440
of like let know each other okay we are

00:47:53,839 --> 00:47:58,000
running right now through our

00:47:55,440 --> 00:47:59,760
just centralized registry and these

00:47:58,000 --> 00:48:00,640
centroid registries kind of like publish

00:47:59,760 --> 00:48:02,880
this information

00:48:00,640 --> 00:48:04,240
all of the required information which is

00:48:02,880 --> 00:48:06,400
like you know

00:48:04,240 --> 00:48:08,240
needed and the most important

00:48:06,400 --> 00:48:09,440
achievement here is a different language

00:48:08,240 --> 00:48:11,440
support so

00:48:09,440 --> 00:48:12,559
um you could just have different

00:48:11,440 --> 00:48:14,160
languages you know like

00:48:12,559 --> 00:48:15,599
that's the whole idea of microservices

00:48:14,160 --> 00:48:17,280
for instance if you're comfortable in

00:48:15,599 --> 00:48:19,119
using any other language all you have to

00:48:17,280 --> 00:48:20,960
do is connect with our service

00:48:19,119 --> 00:48:22,800
this single service you don't have to

00:48:20,960 --> 00:48:24,240
learn something new

00:48:22,800 --> 00:48:26,559
you don't have to like figure out

00:48:24,240 --> 00:48:30,000
different uh packages

00:48:26,559 --> 00:48:31,760
so this is where we possibly see the

00:48:30,000 --> 00:48:34,800
inclusion of these services that

00:48:31,760 --> 00:48:37,839
it could be read branded as vincent

00:48:34,800 --> 00:48:40,000
iii or like extended on top of

00:48:37,839 --> 00:48:40,960
we would like to work with the community

00:48:40,000 --> 00:48:43,040
to kind of like

00:48:40,960 --> 00:48:45,200
work with the existing services and i

00:48:43,040 --> 00:48:46,480
think it should be entirely dependent on

00:48:45,200 --> 00:48:49,920
the idea that

00:48:46,480 --> 00:48:51,119
what community wants to have you know

00:48:49,920 --> 00:48:54,160
if they want to have this as an

00:48:51,119 --> 00:48:56,000
extension and um

00:48:54,160 --> 00:48:57,760
if they want to have this as a part of

00:48:56,000 --> 00:48:59,440
the core that would be great

00:48:57,760 --> 00:49:01,119
if not then we could provide this as an

00:48:59,440 --> 00:49:04,480
extension on a possible

00:49:01,119 --> 00:49:08,079
exploration of the options so

00:49:04,480 --> 00:49:11,760
questions here we would like to answer

00:49:08,079 --> 00:49:13,520
um um we would like yet so ui

00:49:11,760 --> 00:49:15,200
already contains a gateway yeah so i

00:49:13,520 --> 00:49:16,559
think we don't need a gateway which

00:49:15,200 --> 00:49:17,920
we don't really need a gateway at this

00:49:16,559 --> 00:49:18,319
point of time i think this is something

00:49:17,920 --> 00:49:22,240
which

00:49:18,319 --> 00:49:24,960
i was discussing with kevin also so if

00:49:22,240 --> 00:49:26,319
so yeah we've actually just last note

00:49:24,960 --> 00:49:27,920
which i would like to share is that

00:49:26,319 --> 00:49:30,640
we've actually

00:49:27,920 --> 00:49:32,000
removed a lot of dependencies hardcore

00:49:30,640 --> 00:49:35,359
dependencies

00:49:32,000 --> 00:49:36,480
which um like for instance people would

00:49:35,359 --> 00:49:38,640
ask where is the

00:49:36,480 --> 00:49:39,520
you know provisioner where is the you

00:49:38,640 --> 00:49:43,359
know

00:49:39,520 --> 00:49:45,200
this other packages like core

00:49:43,359 --> 00:49:47,599
10 i mean i remember having looking at

00:49:45,200 --> 00:49:49,680
these 10 packages which is like anubis

00:49:47,599 --> 00:49:51,040
rhythm and all these services we no

00:49:49,680 --> 00:49:53,760
longer need them

00:49:51,040 --> 00:49:54,800
i mean because we've just simplified

00:49:53,760 --> 00:49:58,160
everything

00:49:54,800 --> 00:49:58,880
and that's the whole case so kevin would

00:49:58,160 --> 00:50:02,319
you like to

00:49:58,880 --> 00:50:02,319
add something in the end

00:50:08,800 --> 00:50:12,240
just like uh just like sharon's told we

00:50:11,200 --> 00:50:15,520
are trying to

00:50:12,240 --> 00:50:18,800
we are just trying to give power over

00:50:15,520 --> 00:50:20,559
over to the developers and uh improve

00:50:18,800 --> 00:50:23,920
their experience

00:50:20,559 --> 00:50:25,119
we are minimizing the set of services

00:50:23,920 --> 00:50:28,160
which are

00:50:25,119 --> 00:50:29,680
which were hard dependencies for example

00:50:28,160 --> 00:50:30,800
i told you in the beginning i was not

00:50:29,680 --> 00:50:34,559
able to run

00:50:30,800 --> 00:50:37,280
a basic setup which is mentioned in the

00:50:34,559 --> 00:50:38,640
documentation finraxion documentation on

00:50:37,280 --> 00:50:42,000
my

00:50:38,640 --> 00:50:45,359
laptop which had adequate uh

00:50:42,000 --> 00:50:48,000
memory and so i was not like

00:50:45,359 --> 00:50:49,040
this already gets in the way of

00:50:48,000 --> 00:50:51,440
development

00:50:49,040 --> 00:50:52,160
so what we are doing is the services

00:50:51,440 --> 00:50:55,359
could be

00:50:52,160 --> 00:50:57,839
developed in in isolation with the other

00:50:55,359 --> 00:51:01,920
services just like uh

00:50:57,839 --> 00:51:03,440
what microservice architecture proper

00:51:01,920 --> 00:51:07,359
microservice architecture

00:51:03,440 --> 00:51:10,559
would like us to do all we need to do

00:51:07,359 --> 00:51:13,839
like all need all we need to have if

00:51:10,559 --> 00:51:15,280
if we are using even the axon framework

00:51:13,839 --> 00:51:18,400
part the jhip stuff

00:51:15,280 --> 00:51:18,640
but everything is optional just like we

00:51:18,400 --> 00:51:21,440
have

00:51:18,640 --> 00:51:23,359
introduced though those components in

00:51:21,440 --> 00:51:26,720
order to simplify

00:51:23,359 --> 00:51:29,920
it for the developer if one developer

00:51:26,720 --> 00:51:30,640
decides to move away from these defaults

00:51:29,920 --> 00:51:33,839
and

00:51:30,640 --> 00:51:36,480
do things his own way he could actually

00:51:33,839 --> 00:51:38,079
do it by himself in his own way and plug

00:51:36,480 --> 00:51:40,319
it into our ecosystem

00:51:38,079 --> 00:51:41,760
which is pretty difficult in the finrax

00:51:40,319 --> 00:51:45,680
in ecosystem

00:51:41,760 --> 00:51:49,520
because of the uh existence of

00:51:45,680 --> 00:51:52,880
heart dependencies like this one

00:51:49,520 --> 00:51:56,880
and obvious and so on

00:51:52,880 --> 00:52:00,240
and we go uh in short like um

00:51:56,880 --> 00:52:02,559
sharon's sharon already mentioned we

00:52:00,240 --> 00:52:05,040
call

00:52:02,559 --> 00:52:06,079
components or projects just by doing

00:52:05,040 --> 00:52:08,960
nothing like

00:52:06,079 --> 00:52:10,720
they were all provided already provided

00:52:08,960 --> 00:52:13,440
by spring boot or

00:52:10,720 --> 00:52:14,160
some of the projects which are included

00:52:13,440 --> 00:52:18,000
like

00:52:14,160 --> 00:52:21,119
the hipster project in finra cn also

00:52:18,000 --> 00:52:22,240
there was a project that said finraxin

00:52:21,119 --> 00:52:24,880
identity

00:52:22,240 --> 00:52:25,920
and it already had an oauth 2 server

00:52:24,880 --> 00:52:30,400
inside it

00:52:25,920 --> 00:52:32,800
but the provisional was

00:52:30,400 --> 00:52:33,520
registering the clients or to clients

00:52:32,800 --> 00:52:35,920
for nothing

00:52:33,520 --> 00:52:37,200
like it was registering the clients over

00:52:35,920 --> 00:52:40,240
to clients

00:52:37,200 --> 00:52:43,359
while uh and it was just use

00:52:40,240 --> 00:52:44,559
uh it one of the purpose was to register

00:52:43,359 --> 00:52:47,839
or to clients

00:52:44,559 --> 00:52:47,839
another purpose was to

00:52:47,920 --> 00:52:55,119
inform inform other services that

00:52:52,000 --> 00:52:56,880
a new tenant has been created and the

00:52:55,119 --> 00:52:59,520
services provisioned themselves

00:52:56,880 --> 00:53:02,720
which is no longer needed in our setup

00:52:59,520 --> 00:53:02,720
so we got rid of it

00:53:02,880 --> 00:53:09,200
and it's a lot to

00:53:06,079 --> 00:53:12,079
discuss in uh discuss like this we'll

00:53:09,200 --> 00:53:15,200
bring in more documentation which

00:53:12,079 --> 00:53:19,680
which makes it easier for people to

00:53:15,200 --> 00:53:23,760
get acquainted more uh

00:53:19,680 --> 00:53:29,839
for now i think this will take questions

00:53:23,760 --> 00:53:29,839
right now

00:53:43,040 --> 00:53:46,079
basically what we are doing is we made

00:53:45,119 --> 00:53:49,119
it uh

00:53:46,079 --> 00:53:52,400
we brought in a lot of defaults which

00:53:49,119 --> 00:53:55,920
uh helps the developers and uh

00:53:52,400 --> 00:53:57,040
made them optional yeah like that's the

00:53:55,920 --> 00:53:58,960
whole idea because

00:53:57,040 --> 00:54:00,400
that can bring a lot of contribution

00:53:58,960 --> 00:54:02,720
back towards the

00:54:00,400 --> 00:54:04,559
project i mean the whole idea is that we

00:54:02,720 --> 00:54:06,720
want to bring back the contribution

00:54:04,559 --> 00:54:08,319
to the original promise i mean which we

00:54:06,720 --> 00:54:09,839
started out that

00:54:08,319 --> 00:54:11,280
it should be agile it should be

00:54:09,839 --> 00:54:13,359
ephemeral and it should be able to

00:54:11,280 --> 00:54:15,599
deliver these performance things also

00:54:13,359 --> 00:54:19,040
so plus keeping in mind that we wanted

00:54:15,599 --> 00:54:22,839
to keep this project distributed

00:54:19,040 --> 00:54:25,839
like so

00:54:22,839 --> 00:54:28,079
um you know so this is a possible

00:54:25,839 --> 00:54:28,640
exploration as james also suggested to

00:54:28,079 --> 00:54:31,200
us that

00:54:28,640 --> 00:54:32,800
it's not the i mean there is no such

00:54:31,200 --> 00:54:35,040
definitive

00:54:32,800 --> 00:54:36,720
guide to the universe i mean there is no

00:54:35,040 --> 00:54:38,799
definite guide to this whole

00:54:36,720 --> 00:54:40,720
technical approach also it's just that

00:54:38,799 --> 00:54:42,960
this is a possible exploration which we

00:54:40,720 --> 00:54:43,599
set out on and we wanted to give back

00:54:42,960 --> 00:54:46,000
this

00:54:43,599 --> 00:54:48,640
feedback to the community that there

00:54:46,000 --> 00:54:51,920
this work which we spent a lot of time

00:54:48,640 --> 00:54:53,760
on like 2-3 months i remember because we

00:54:51,920 --> 00:54:54,240
wanted to figure out that hey is there

00:54:53,760 --> 00:54:56,799
another

00:54:54,240 --> 00:54:58,880
possible way for us to uh you know

00:54:56,799 --> 00:55:02,480
determine

00:54:58,880 --> 00:55:15,119
um um that there exists a different

00:55:02,480 --> 00:55:15,119

YouTube URL: https://www.youtube.com/watch?v=kuH3uoSbKK4


