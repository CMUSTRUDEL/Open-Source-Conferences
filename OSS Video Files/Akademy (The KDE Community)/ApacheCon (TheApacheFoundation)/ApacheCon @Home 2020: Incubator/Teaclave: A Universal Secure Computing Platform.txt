Title: Teaclave: A Universal Secure Computing Platform
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Incubator
Description: 
	Teaclave: A Universal Secure Computing Platform
Mingshen Sun

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Teaclave (incubating) is a universal secure computing platform to make computation on privacy-sensitive data safe and secure. The platform adopts multiple security technologies to enable secure computing, in particular, Teaclave uses Intel SGX to serve the most security-sensitive tasks with hardware-based isolation, memory encryption and attestation. Teaclave is provided as a function-as-a-service platform and with many built-in functions, it supports a wide variety of tasks on sensitive data, such as privacy preserving machine learning, private set intersection, and cryptographic computation. More importantly, unlike traditional FaaS, Teaclave supports both general secure computing tasks and flexible single- and multi-party secure computation. Last but not least, Teaclave is written in Rust to prevent memory-safety issues. Teaclave entered the Apache Incubator in August 2019. In this talk, we would like to introduce this project to the whole community for the first time. We will discuss some motivation and background of the secure computing ecosystem. Then, we will present highlights of the Teaclave platform and its internal design, talk about the roadmap of incubating and current progress, and finally, introduce current status of Teaclave community.

Mingshen Sun works at Baidu and is a member of Apache Teaclave (incubating) PPMC (Podling Project Management Committee). He leads, maintains and actively contributes to several open source projects including Teaclave, MesaPy, Rust OP-TEE TrustZone SDK, etc. Please visit his homepage (https://mssun.me) for more information.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,680 --> 00:00:30,320
hello everyone my name is

00:00:27,119 --> 00:00:32,960
ming shin sun from baidu uh

00:00:30,320 --> 00:00:34,160
on behalf of the t-clip community uh

00:00:32,960 --> 00:00:36,079
today we'll talk about

00:00:34,160 --> 00:00:39,760
our open source universal secure

00:00:36,079 --> 00:00:39,760
computing platform eclipse

00:00:41,440 --> 00:00:47,920
okay so i haven't received any feedback

00:00:45,360 --> 00:00:53,199
about my uh

00:00:47,920 --> 00:00:53,199
mic so assume is good

00:00:56,960 --> 00:00:59,840
okay

00:01:00,559 --> 00:01:04,160
let's get started

00:01:04,400 --> 00:01:09,360
i'll start with background and then

00:01:07,119 --> 00:01:09,760
briefly introduce current status and

00:01:09,360 --> 00:01:12,880
some

00:01:09,760 --> 00:01:15,119
highlight of the declare project

00:01:12,880 --> 00:01:16,960
then i will provide some details of the

00:01:15,119 --> 00:01:21,080
declave internals

00:01:16,960 --> 00:01:22,560
at last we talked about the uh

00:01:21,080 --> 00:01:25,759
[Music]

00:01:22,560 --> 00:01:30,720
how to get involved and present

00:01:25,759 --> 00:01:30,720
particular community to uh

00:01:32,720 --> 00:01:36,320
let me start with some background

00:01:38,159 --> 00:01:42,399
secure computing also called the

00:01:40,400 --> 00:01:45,520
confidential computing

00:01:42,399 --> 00:01:48,640
is to provide a safe place

00:01:45,520 --> 00:01:52,000
or we called enclave for

00:01:48,640 --> 00:01:53,119
data computing for system data computing

00:01:52,000 --> 00:01:56,240
computation

00:01:53,119 --> 00:01:59,439
so normally this involves multi-parties

00:01:56,240 --> 00:02:02,079
of sometimes single parties but

00:01:59,439 --> 00:02:04,240
there are several scenarios for example

00:02:02,079 --> 00:02:06,640
private computation like

00:02:04,240 --> 00:02:07,759
privacy intersection between different

00:02:06,640 --> 00:02:10,720
parties

00:02:07,759 --> 00:02:11,440
and private machine learning multiple

00:02:10,720 --> 00:02:15,360
parties

00:02:11,440 --> 00:02:17,040
like banks they want to train some model

00:02:15,360 --> 00:02:22,480
with their own

00:02:17,040 --> 00:02:24,480
private data and normally these secure

00:02:22,480 --> 00:02:28,080
computing

00:02:24,480 --> 00:02:30,800
enclave of places is

00:02:28,080 --> 00:02:34,400
supported or powered by some

00:02:30,800 --> 00:02:37,120
hardware-based isolation mechanism

00:02:34,400 --> 00:02:38,080
for example uh they sometimes they have

00:02:37,120 --> 00:02:41,360
memory uh

00:02:38,080 --> 00:02:45,280
encryption uh isolation

00:02:41,360 --> 00:02:49,280
and attestation mechanism so for example

00:02:45,280 --> 00:02:52,560
uh intel provides intel sgx

00:02:49,280 --> 00:02:56,480
and arm has just so normally this

00:02:52,560 --> 00:02:59,440
technology will split the uh word to

00:02:56,480 --> 00:03:00,239
separate part or split the application

00:02:59,440 --> 00:03:03,920
into

00:03:00,239 --> 00:03:07,519
two step two separated part

00:03:03,920 --> 00:03:10,640
why is in on the livestream is untrusted

00:03:07,519 --> 00:03:13,599
on a normal world that means uh

00:03:10,640 --> 00:03:15,200
this application is running on uh

00:03:13,599 --> 00:03:18,720
operating system

00:03:15,200 --> 00:03:22,400
and which can be compromised and

00:03:18,720 --> 00:03:26,560
then another part is so-called enclave

00:03:22,400 --> 00:03:30,319
which will be run in an isolated and

00:03:26,560 --> 00:03:32,159
encrypted world which is called trusted

00:03:30,319 --> 00:03:35,760
world or secure world

00:03:32,159 --> 00:03:38,400
so under this uh threat model

00:03:35,760 --> 00:03:39,680
the operating system can be compromised

00:03:38,400 --> 00:03:42,799
but the data

00:03:39,680 --> 00:03:45,920
and the data and

00:03:42,799 --> 00:03:46,640
logic will be not linked from the

00:03:45,920 --> 00:03:50,239
trusted

00:03:46,640 --> 00:03:53,680
and secure world so

00:03:50,239 --> 00:03:57,280
particularly we provide this

00:03:53,680 --> 00:04:00,560
secure computing mechanism by

00:03:57,280 --> 00:04:04,879
intel sgx so when we look at the

00:04:00,560 --> 00:04:07,760
stx ecosystem we can use sdx sdk

00:04:04,879 --> 00:04:10,319
to build a css break application or

00:04:07,760 --> 00:04:14,319
split a legacy application into

00:04:10,319 --> 00:04:17,519
apps app and and play parts for sdx and

00:04:14,319 --> 00:04:17,919
environment or we can deploy a legacy

00:04:17,519 --> 00:04:21,040
app

00:04:17,919 --> 00:04:21,600
in containerized sdx environment based

00:04:21,040 --> 00:04:24,720
um

00:04:21,600 --> 00:04:25,280
libre license unicorn concept however

00:04:24,720 --> 00:04:28,560
there are

00:04:25,280 --> 00:04:31,840
several there are a lot of effort

00:04:28,560 --> 00:04:33,040
for program to develop on access

00:04:31,840 --> 00:04:35,759
application

00:04:33,040 --> 00:04:37,120
for example developers need to know how

00:04:35,759 --> 00:04:40,400
to save data

00:04:37,120 --> 00:04:40,800
how to do remote testation in the right

00:04:40,400 --> 00:04:43,199
way

00:04:40,800 --> 00:04:44,880
and how to design all costs without

00:04:43,199 --> 00:04:47,360
leaking sensitive data inside the

00:04:44,880 --> 00:04:47,360
enclave

00:04:48,000 --> 00:04:53,120
so uh so let's come to our solution we

00:04:51,919 --> 00:04:55,680
need a framework

00:04:53,120 --> 00:04:58,400
of platform that allow programmer to

00:04:55,680 --> 00:05:01,039
concentrate on the business logic

00:04:58,400 --> 00:05:02,800
and automate small protection of their

00:05:01,039 --> 00:05:05,520
code and data without

00:05:02,800 --> 00:05:06,639
worrying about technology technical

00:05:05,520 --> 00:05:09,280
details

00:05:06,639 --> 00:05:10,320
of association development model and

00:05:09,280 --> 00:05:13,840
difficulty

00:05:10,320 --> 00:05:16,160
implementations programmers are users

00:05:13,840 --> 00:05:17,840
who need to focus on sensitive data

00:05:16,160 --> 00:05:20,560
business logic

00:05:17,840 --> 00:05:22,400
and the interface between user and

00:05:20,560 --> 00:05:25,600
platform

00:05:22,400 --> 00:05:28,320
then the platform will manage data

00:05:25,600 --> 00:05:30,080
execution business logic in the

00:05:28,320 --> 00:05:34,560
computing units

00:05:30,080 --> 00:05:37,120
deployed as a like distributed system

00:05:34,560 --> 00:05:38,400
this is a main motivation of creating

00:05:37,120 --> 00:05:42,160
the tea play

00:05:38,400 --> 00:05:44,400
project so uh

00:05:42,160 --> 00:05:45,280
let's go let's come to the thickly

00:05:44,400 --> 00:05:48,720
project

00:05:45,280 --> 00:05:51,120
currently teach our apache ticlet is

00:05:48,720 --> 00:05:52,400
open source universal secure computing

00:05:51,120 --> 00:05:55,280
project

00:05:52,400 --> 00:05:58,400
a platform which make computation on

00:05:55,280 --> 00:06:01,360
privacy sensitive data safe and simple

00:05:58,400 --> 00:06:02,560
the project is originally developed at

00:06:01,360 --> 00:06:06,000
baidu as long as

00:06:02,560 --> 00:06:10,080
massetee and then open sourced in july

00:06:06,000 --> 00:06:13,680
2019 then we donated the msd project

00:06:10,080 --> 00:06:15,280
along with raster cssdk to apache

00:06:13,680 --> 00:06:19,039
software foundation

00:06:15,280 --> 00:06:19,440
in august 2019 and changed the project

00:06:19,039 --> 00:06:23,039
name

00:06:19,440 --> 00:06:26,479
to tk currently tkv is under

00:06:23,039 --> 00:06:29,759
a patch incubator and open source

00:06:26,479 --> 00:06:33,759
in the apache way

00:06:29,759 --> 00:06:37,600
okay let me go through some highlights

00:06:33,759 --> 00:06:40,560
first uh functionality dk provides us a

00:06:37,600 --> 00:06:41,120
function as a service platform which

00:06:40,560 --> 00:06:43,840
means

00:06:41,120 --> 00:06:44,960
we have many building functions support

00:06:43,840 --> 00:06:47,600
like

00:06:44,960 --> 00:06:49,360
machine learning private segment section

00:06:47,600 --> 00:06:52,160
crypto computation

00:06:49,360 --> 00:06:53,840
and so on and so forth in addition a

00:06:52,160 --> 00:06:56,960
developer can also

00:06:53,840 --> 00:07:00,080
deploy and execute python script

00:06:56,960 --> 00:07:03,840
in tcl so more importantly

00:07:00,080 --> 00:07:06,639
like i like a traditional fas

00:07:03,840 --> 00:07:07,919
platform declave supports both general

00:07:06,639 --> 00:07:11,520
secure computing tasks

00:07:07,919 --> 00:07:15,280
and the flexible single and multi-party

00:07:11,520 --> 00:07:17,840
secure computation for security

00:07:15,280 --> 00:07:19,039
declave adopts uh multiple security

00:07:17,840 --> 00:07:22,800
technologies

00:07:19,039 --> 00:07:26,240
to enable secure computing in particular

00:07:22,800 --> 00:07:29,440
uh ticle uses intel sgx

00:07:26,240 --> 00:07:32,000
to serve the most assistive uh

00:07:29,440 --> 00:07:33,840
task security sensitive time surveys

00:07:32,000 --> 00:07:37,520
hardware-based isolation

00:07:33,840 --> 00:07:40,479
memory encryption and attestation

00:07:37,520 --> 00:07:43,599
also tickets retain rust to prevent

00:07:40,479 --> 00:07:46,720
memory safety issues

00:07:43,599 --> 00:07:50,160
so for usability nuclear business

00:07:46,720 --> 00:07:53,280
components in containers and

00:07:50,160 --> 00:07:56,000
therefore is it supports deployment both

00:07:53,280 --> 00:07:57,440
locally and with the cloud

00:07:56,000 --> 00:07:59,840
infrastructure

00:07:57,440 --> 00:08:01,599
particularly also provides convenient

00:07:59,840 --> 00:08:06,240
endpoint apis

00:08:01,599 --> 00:08:09,440
client sdks and command line tools

00:08:06,240 --> 00:08:10,240
so last the modularity which a lot of

00:08:09,440 --> 00:08:14,000
people

00:08:10,240 --> 00:08:16,160
lack degree the components integral are

00:08:14,000 --> 00:08:18,639
designed in modular and

00:08:16,160 --> 00:08:21,680
some components like remote test station

00:08:18,639 --> 00:08:24,080
can be easily embedded in other projects

00:08:21,680 --> 00:08:25,520
so tick clip as for example particularly

00:08:24,080 --> 00:08:28,080
as sdk

00:08:25,520 --> 00:08:28,960
can also be used separately to write

00:08:28,080 --> 00:08:32,320
standalone

00:08:28,960 --> 00:08:35,120
icx enclave for other purpose

00:08:32,320 --> 00:08:36,000
so next let me let's talk about the

00:08:35,120 --> 00:08:40,240
basic flow

00:08:36,000 --> 00:08:43,599
in declare platform

00:08:40,240 --> 00:08:44,240
let's see the workflow since ticker is a

00:08:43,599 --> 00:08:47,360
function

00:08:44,240 --> 00:08:50,160
as a service like platform users

00:08:47,360 --> 00:08:51,519
only need to consider uh about the

00:08:50,160 --> 00:08:54,560
functions

00:08:51,519 --> 00:08:57,360
business logic and

00:08:54,560 --> 00:08:59,200
participant of how many parties involved

00:08:57,360 --> 00:09:02,880
in this task

00:08:59,200 --> 00:09:05,920
so when a client or user have determined

00:09:02,880 --> 00:09:08,959
about about their these three

00:09:05,920 --> 00:09:12,640
uh vectors function data

00:09:08,959 --> 00:09:16,160
and participant he can follow some

00:09:12,640 --> 00:09:16,720
list steps to execute a task on system

00:09:16,160 --> 00:09:20,880
data

00:09:16,720 --> 00:09:24,000
in sdx with the help of the eqa platform

00:09:20,880 --> 00:09:25,519
first is to register the data and the

00:09:24,000 --> 00:09:29,200
function to the platform

00:09:25,519 --> 00:09:32,080
and then uh create and the wrong task

00:09:29,200 --> 00:09:35,279
last you can wait and uh until the

00:09:32,080 --> 00:09:39,200
execution result from the platform

00:09:35,279 --> 00:09:42,240
see that's very simple and powerful

00:09:39,200 --> 00:09:45,760
and all your data and functioning

00:09:42,240 --> 00:09:50,240
is only in the sdx

00:09:45,760 --> 00:09:53,519
protected isolated enclave

00:09:50,240 --> 00:09:56,480
okay uh you'll be wondering about the

00:09:53,519 --> 00:09:56,959
internals of the declare platform now

00:09:56,480 --> 00:09:59,680
here

00:09:56,959 --> 00:10:00,399
are some here's an overview of our

00:09:59,680 --> 00:10:03,279
services

00:10:00,399 --> 00:10:04,160
of services in eclipse you can see that

00:10:03,279 --> 00:10:07,120
there are several

00:10:04,160 --> 00:10:08,160
kinds of seven kinds of service and

00:10:07,120 --> 00:10:11,200
connected with

00:10:08,160 --> 00:10:13,519
each other they are

00:10:11,200 --> 00:10:14,880
authenticated service front and service

00:10:13,519 --> 00:10:17,519
management service

00:10:14,880 --> 00:10:18,000
storage service scheduler service access

00:10:17,519 --> 00:10:21,040
control

00:10:18,000 --> 00:10:23,839
service and the execution service

00:10:21,040 --> 00:10:24,800
so they you can you can see uh

00:10:23,839 --> 00:10:27,040
internally

00:10:24,800 --> 00:10:27,839
they are internal api uh endpoint

00:10:27,040 --> 00:10:32,320
connections

00:10:27,839 --> 00:10:35,440
with a tested trs connection and

00:10:32,320 --> 00:10:38,160
then provides npi in point connection to

00:10:35,440 --> 00:10:38,160
date clients

00:10:38,720 --> 00:10:41,920
so currently our services are

00:10:40,640 --> 00:10:45,120
implemented in

00:10:41,920 --> 00:10:48,399
ics enclave and later we

00:10:45,120 --> 00:10:52,240
have plan in our road bike to uh

00:10:48,399 --> 00:10:55,040
for this uh service in other uh

00:10:52,240 --> 00:10:56,240
as the te backend p implementation

00:10:55,040 --> 00:10:59,440
back-end

00:10:56,240 --> 00:11:03,360
such as um just so so

00:10:59,440 --> 00:11:04,720
uh in this graph you can see the

00:11:03,360 --> 00:11:06,240
authentication and the front-end

00:11:04,720 --> 00:11:10,240
services are in the front and

00:11:06,240 --> 00:11:11,680
domain for core services domain we have

00:11:10,240 --> 00:11:14,000
storage service

00:11:11,680 --> 00:11:16,079
management service asset control service

00:11:14,000 --> 00:11:19,120
and scheduler service

00:11:16,079 --> 00:11:20,240
last we have execution service to ask

00:11:19,120 --> 00:11:24,399
you

00:11:20,240 --> 00:11:24,399
tasks on system data

00:11:25,200 --> 00:11:31,120
let me introduce them one by one

00:11:28,399 --> 00:11:33,120
for as for authentication service it

00:11:31,120 --> 00:11:36,320
implements a decent web token

00:11:33,120 --> 00:11:39,839
authentication uh in the

00:11:36,320 --> 00:11:43,040
icgx enclave for

00:11:39,839 --> 00:11:44,880
reference implementation for a front-end

00:11:43,040 --> 00:11:47,519
service it helps to

00:11:44,880 --> 00:11:49,040
authenticate requests forward to

00:11:47,519 --> 00:11:52,480
management service

00:11:49,040 --> 00:11:55,839
and can provide potential load balancing

00:11:52,480 --> 00:11:56,480
future management service remains

00:11:55,839 --> 00:11:59,839
function

00:11:56,480 --> 00:12:03,680
data registration task improve

00:11:59,839 --> 00:12:06,800
approve invocation access control

00:12:03,680 --> 00:12:09,760
data consistency and so on

00:12:06,800 --> 00:12:10,720
storage service implements actually a

00:12:09,760 --> 00:12:14,320
level db

00:12:10,720 --> 00:12:17,760
in sdx access control service implements

00:12:14,320 --> 00:12:18,399
an access control engine using a python

00:12:17,760 --> 00:12:21,440
like the

00:12:18,399 --> 00:12:24,560
domain specific language

00:12:21,440 --> 00:12:27,839
the scheduler service uh dispatch

00:12:24,560 --> 00:12:31,760
uh the state the task to uh

00:12:27,839 --> 00:12:34,720
the desired worker uh based capabilities

00:12:31,760 --> 00:12:35,839
like some worker can only execute some

00:12:34,720 --> 00:12:40,399
sensitive

00:12:35,839 --> 00:12:43,279
data for machine learning only and some

00:12:40,399 --> 00:12:45,440
executor may have different capabilities

00:12:43,279 --> 00:12:49,120
so unless the execution service

00:12:45,440 --> 00:12:50,320
is a status service designed to be

00:12:49,120 --> 00:12:54,079
deployed

00:12:50,320 --> 00:12:56,800
in cloud infrastructure and flexible

00:12:54,079 --> 00:12:59,680
we can support all kinds of sdx runtime

00:12:56,800 --> 00:12:59,680
and other t

00:13:01,600 --> 00:13:09,680
so these services are communicated with

00:13:05,360 --> 00:13:10,639
rpc and some hair some interfaces

00:13:09,680 --> 00:13:13,760
defined

00:13:10,639 --> 00:13:17,120
in protobuf i'll skip the

00:13:13,760 --> 00:13:17,760
list details here and and you can find

00:13:17,120 --> 00:13:21,279
them

00:13:17,760 --> 00:13:24,000
on our source code in the proto

00:13:21,279 --> 00:13:24,000
definition

00:13:24,399 --> 00:13:28,000
so basically our clients authenticate

00:13:26,800 --> 00:13:30,720
the id

00:13:28,000 --> 00:13:32,240
credential to get the session key this

00:13:30,720 --> 00:13:34,959
session key will be used

00:13:32,240 --> 00:13:36,160
later to communicate with the front end

00:13:34,959 --> 00:13:39,279
service

00:13:36,160 --> 00:13:40,720
then client then register data and

00:13:39,279 --> 00:13:44,880
function if needed

00:13:40,720 --> 00:13:46,880
and assign approved invoke task

00:13:44,880 --> 00:13:48,240
and then client and can also get

00:13:46,880 --> 00:13:51,519
information of

00:13:48,240 --> 00:13:53,279
functions tasks and so on front-end

00:13:51,519 --> 00:13:56,480
service will redirect

00:13:53,279 --> 00:13:59,920
valid requests to the management service

00:13:56,480 --> 00:14:04,240
get authentication of

00:13:59,920 --> 00:14:07,600
data function usage task invocation

00:14:04,240 --> 00:14:08,320
and and so on a story service can

00:14:07,600 --> 00:14:11,519
persist in

00:14:08,320 --> 00:14:15,120
function data types into database

00:14:11,519 --> 00:14:18,880
specular scheduler service name is

00:14:15,120 --> 00:14:22,160
confess uh task and ready for execution

00:14:18,880 --> 00:14:26,160
from a database and then uh

00:14:22,160 --> 00:14:29,680
it will give this a function which

00:14:26,160 --> 00:14:34,160
need to be executed to the executor and

00:14:29,680 --> 00:14:37,199
we implement a subscribe and

00:14:34,160 --> 00:14:40,000
pull task photo and

00:14:37,199 --> 00:14:40,639
the execution service will subscribe and

00:14:40,000 --> 00:14:43,040
protect

00:14:40,639 --> 00:14:45,440
the executable function of the status

00:14:43,040 --> 00:14:45,839
hand gave the execution result back to

00:14:45,440 --> 00:14:48,399
the

00:14:45,839 --> 00:14:51,440
scheduler service and the store in the

00:14:48,399 --> 00:14:51,440
storage service

00:14:53,839 --> 00:15:00,000
so if you are interested in reading code

00:14:57,120 --> 00:15:01,040
there there's a there's an overview of

00:15:00,000 --> 00:15:04,160
services

00:15:01,040 --> 00:15:04,720
and the corresponding implementations in

00:15:04,160 --> 00:15:07,760
the uh

00:15:04,720 --> 00:15:11,360
following database code-based

00:15:07,760 --> 00:15:14,959
overview for this project

00:15:11,360 --> 00:15:18,000
we have about four

00:15:14,959 --> 00:15:21,519
forty thousand lines of raster code

00:15:18,000 --> 00:15:24,880
and they have they are implemented in

00:15:21,519 --> 00:15:25,600
accelerate uh several degrees uh which

00:15:24,880 --> 00:15:29,360
is a

00:15:25,600 --> 00:15:33,519
library in rust like rpc

00:15:29,360 --> 00:15:35,680
for procedure uh remote procedure call

00:15:33,519 --> 00:15:37,759
and the service some service

00:15:35,680 --> 00:15:40,959
implementation which i mentioned

00:15:37,759 --> 00:15:44,800
above is in the services

00:15:40,959 --> 00:15:48,240
directory function implementation

00:15:44,800 --> 00:15:51,600
under this worker app

00:15:48,240 --> 00:15:55,279
and the athletic communication mechanism

00:15:51,600 --> 00:15:58,720
is implemented in a binder uh

00:15:55,279 --> 00:16:00,880
library and service project

00:15:58,720 --> 00:16:03,440
service protocol definitions in the

00:16:00,880 --> 00:16:06,639
service protocol directory

00:16:03,440 --> 00:16:10,480
and a test station which is

00:16:06,639 --> 00:16:13,519
above the most important library in the

00:16:10,480 --> 00:16:16,959
whole platform is

00:16:13,519 --> 00:16:20,399
separated in a different directory uh

00:16:16,959 --> 00:16:24,399
a test station directory rpc

00:16:20,399 --> 00:16:29,279
which support uh attested tis

00:16:24,399 --> 00:16:32,880
and decaf which is uh

00:16:29,279 --> 00:16:36,000
another attestation mechanism which

00:16:32,880 --> 00:16:38,320
can be deployed inside a data center

00:16:36,000 --> 00:16:39,920
and build the runtime configuration is

00:16:38,320 --> 00:16:43,839
in the config

00:16:39,920 --> 00:16:44,399
directory and for others we have a lot

00:16:43,839 --> 00:16:48,079
of

00:16:44,399 --> 00:16:49,440
grades like tabs and past integration

00:16:48,079 --> 00:16:52,480
tests unit tests

00:16:49,440 --> 00:16:55,600
and a functional test

00:16:52,480 --> 00:16:58,480
isdk we provide a python

00:16:55,600 --> 00:16:58,959
sdk to the client so that the client can

00:16:58,480 --> 00:17:02,560
only

00:16:58,959 --> 00:17:06,720
uh care about the python

00:17:02,560 --> 00:17:10,160
sdk to interact with our platform

00:17:06,720 --> 00:17:11,360
utilities and we provide several docker

00:17:10,160 --> 00:17:15,839
files for

00:17:11,360 --> 00:17:18,959
building and the deployment of keyclave

00:17:15,839 --> 00:17:21,439
and cri we have some

00:17:18,959 --> 00:17:22,480
command line tool you can increase and

00:17:21,439 --> 00:17:25,919
decrypt data

00:17:22,480 --> 00:17:30,080
and communicate with the tk platform

00:17:25,919 --> 00:17:32,880
and then do the attestation on your

00:17:30,080 --> 00:17:33,520
on your platform and verify if your

00:17:32,880 --> 00:17:36,960
platform

00:17:33,520 --> 00:17:40,000
is a test is a

00:17:36,960 --> 00:17:43,280
valid platform and

00:17:40,000 --> 00:17:46,960
then crypto and the tools third parties

00:17:43,280 --> 00:17:50,080
license stocks keys we actually provide

00:17:46,960 --> 00:17:53,200
extensive documents

00:17:50,080 --> 00:17:57,200
and if you want to get started

00:17:53,200 --> 00:18:00,240
you can get from the try from my first

00:17:57,200 --> 00:18:03,360
function write functions in python

00:18:00,240 --> 00:18:05,120
and how to write building functions

00:18:03,360 --> 00:18:06,880
and you if you want to understand the

00:18:05,120 --> 00:18:10,320
design of the clip

00:18:06,880 --> 00:18:11,200
you can read the thread model uh mutual

00:18:10,320 --> 00:18:14,240
test station

00:18:11,200 --> 00:18:18,160
by how access control

00:18:14,240 --> 00:18:21,200
build system declave services tunnels

00:18:18,160 --> 00:18:24,080
and then if you want to contribute the

00:18:21,200 --> 00:18:25,679
project you can read the rust develop

00:18:24,080 --> 00:18:28,480
gatlin

00:18:25,679 --> 00:18:29,520
development tips and all the

00:18:28,480 --> 00:18:33,360
documentation

00:18:29,520 --> 00:18:36,799
can be found in the ticket.ipac.org

00:18:33,360 --> 00:18:39,600
search stocks so

00:18:36,799 --> 00:18:40,320
at last let me give an overview of the

00:18:39,600 --> 00:18:43,520
teacher

00:18:40,320 --> 00:18:46,080
community system is a huge

00:18:43,520 --> 00:18:47,840
project which have multiple layers many

00:18:46,080 --> 00:18:51,440
users can get involved

00:18:47,840 --> 00:18:54,880
in this community for example

00:18:51,440 --> 00:18:58,240
a platform user can use eclipse platform

00:18:54,880 --> 00:19:01,600
directly deploy the system in their

00:18:58,240 --> 00:19:03,520
private infrastructure of the public

00:19:01,600 --> 00:19:06,559
infrastructure

00:19:03,520 --> 00:19:10,480
some users may prefer to only use

00:19:06,559 --> 00:19:13,440
once the standalone service for example

00:19:10,480 --> 00:19:14,960
user storage service and execution

00:19:13,440 --> 00:19:18,080
service itself

00:19:14,960 --> 00:19:21,440
without uh including all the components

00:19:18,080 --> 00:19:24,880
in the pca platform

00:19:21,440 --> 00:19:27,480
and some also a lot of products are

00:19:24,880 --> 00:19:29,039
used uh are using our attestation

00:19:27,480 --> 00:19:32,080
implementation

00:19:29,039 --> 00:19:36,480
library and of course some users

00:19:32,080 --> 00:19:38,880
directly use our raster cxsdk

00:19:36,480 --> 00:19:41,600
in the lower layer to build their own

00:19:38,880 --> 00:19:41,600
application

00:19:42,720 --> 00:19:47,039
the particular community have already

00:19:45,280 --> 00:19:50,320
supported mining projects

00:19:47,039 --> 00:19:53,200
like commercial products

00:19:50,320 --> 00:19:54,000
academic research project and some other

00:19:53,200 --> 00:19:57,760
open source

00:19:54,000 --> 00:20:04,799
project you can find them

00:19:57,760 --> 00:20:04,799
in our home page tickrate.apache.org

00:20:04,840 --> 00:20:10,240
community so in our community home cage

00:20:08,000 --> 00:20:12,799
you can see that organizations like

00:20:10,240 --> 00:20:16,559
baidu by dance enigma

00:20:12,799 --> 00:20:20,600
their ex projects like uh

00:20:16,559 --> 00:20:23,520
advanced unified uh enigma

00:20:20,600 --> 00:20:26,720
cryptocurrency our clone

00:20:23,520 --> 00:20:30,159
parlor network secret network subject

00:20:26,720 --> 00:20:33,679
the audio secret other the platform

00:20:30,159 --> 00:20:37,360
and the library of the roster cssdk

00:20:33,679 --> 00:20:40,559
so overall we encourage all people

00:20:37,360 --> 00:20:43,280
in the community

00:20:40,559 --> 00:20:44,080
to come and get involved whether to use

00:20:43,280 --> 00:20:49,840
this

00:20:44,080 --> 00:20:49,840
project or contribute to our project

00:20:51,039 --> 00:20:57,280
okay so at last i still want to put some

00:20:54,159 --> 00:21:01,360
uh information on the dk project

00:20:57,280 --> 00:21:04,720
so you can join us on the maolin list

00:21:01,360 --> 00:21:05,600
and visit our homepage follow on the

00:21:04,720 --> 00:21:08,640
twitter

00:21:05,600 --> 00:21:12,159
which will regularly post

00:21:08,640 --> 00:21:13,679
some update on the project and check out

00:21:12,159 --> 00:21:16,640
and read off code

00:21:13,679 --> 00:21:16,880
and we always call for collaborations

00:21:16,640 --> 00:21:20,159
and

00:21:16,880 --> 00:21:22,799
contributors okay

00:21:20,159 --> 00:21:22,799
thank you all

00:21:24,640 --> 00:21:31,760
i think if you have any questions

00:21:27,840 --> 00:21:35,039
you can put on the

00:21:31,760 --> 00:21:38,480
chat of this session i will

00:21:35,039 --> 00:21:45,840
answer uh now if not

00:21:38,480 --> 00:21:45,840
uh i will end this session

00:22:10,840 --> 00:22:13,840
okay

00:22:24,840 --> 00:22:27,840
so

00:22:46,400 --> 00:22:53,039
okay same side there's no question so

00:22:49,679 --> 00:22:56,320
uh you can ask me offline

00:22:53,039 --> 00:22:58,799
in the direct message or you can

00:22:56,320 --> 00:22:59,360
send me an email or send to the felonies

00:22:58,799 --> 00:23:01,679
to

00:22:59,360 --> 00:23:04,720
me i'm happy to answer all questions

00:23:01,679 --> 00:23:04,720
about this project

00:23:05,120 --> 00:23:10,400
okay thank you so much

00:23:20,840 --> 00:23:23,840

YouTube URL: https://www.youtube.com/watch?v=Ke36V5zoe_c


